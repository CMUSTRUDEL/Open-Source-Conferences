Title: "Bob" Streams in Node js
Publication date: 2019-06-05
Playlist: OpenJS Foundation Collaborator Summit, Berlin, May 2019
Description: 
	OpenJS Foundation Collaborator Summit, Berlin, 2019

More details: https://github.com/nodejs/summit/issues/172
Captions: 
	00:00:00,650 --> 00:00:08,360
so okay anyone who's used strings and

00:00:04,710 --> 00:00:23,090
note those that it's any ass

00:00:08,360 --> 00:00:28,650
the yeah you know consumer participation

00:00:23,090 --> 00:00:31,289
they asked the consumers right there is

00:00:28,650 --> 00:00:36,059
a movement of the back pressure the

00:00:31,289 --> 00:00:39,540
state model complicated and we can't

00:00:36,059 --> 00:00:44,550
separate the statement from me you know

00:00:39,540 --> 00:00:46,320
me implementation there are three

00:00:44,550 --> 00:00:49,770
versions of screens that are all kind of

00:00:46,320 --> 00:00:53,699
overlapping each other you've got a lot

00:00:49,770 --> 00:00:56,579
of from it has come into this so there's

00:00:53,699 --> 00:01:00,210
not only clean three versions half deep

00:00:56,579 --> 00:01:08,220
Jonathan level there's also at the

00:01:00,210 --> 00:01:09,950
native of the screen it works and the

00:01:08,220 --> 00:01:13,979
native low that goes back and forth

00:01:09,950 --> 00:01:23,939
right there there's the streams plank

00:01:13,979 --> 00:01:35,009
method that doesn't work and the native

00:01:23,939 --> 00:01:36,689
layer a medium height going well we make

00:01:35,009 --> 00:01:40,890
it even more efficient but it's just

00:01:36,689 --> 00:01:43,860
over the years just spend that the

00:01:40,890 --> 00:01:47,210
student is going from the earth right

00:01:43,860 --> 00:01:51,470
and harder to work with

00:01:47,210 --> 00:01:59,880
so was it two years ago

00:01:51,470 --> 00:02:02,250
yeah you know he was got together at

00:01:59,880 --> 00:02:05,009
lunch at at interactive two years ago

00:02:02,250 --> 00:02:10,289
Vancouver medicate and ronnie'll idea

00:02:05,009 --> 00:02:13,319
for this new streams API yeah somebody

00:02:10,289 --> 00:02:20,129
asked what are we gonna call it

00:02:13,319 --> 00:02:21,719
oh it's this la comedia Jeremiah has

00:02:20,129 --> 00:02:23,069
been the one I'm really pushing it

00:02:21,719 --> 00:02:26,489
forward because the rest of us that

00:02:23,069 --> 00:02:31,799
we're talking about it just got

00:02:26,489 --> 00:02:35,280
distracted she was the only one that's

00:02:31,799 --> 00:02:36,840
good work but reaching the point now

00:02:35,280 --> 00:02:38,970
where in order to move it forward

00:02:36,840 --> 00:02:41,459
you need to disband it and those listed

00:02:38,970 --> 00:02:44,480
were collected by the next week out and

00:02:41,459 --> 00:02:46,829
then if anyone else wants to help out

00:02:44,480 --> 00:03:03,750
when I kind of give a basic idea how it

00:02:46,829 --> 00:03:08,930
works so you're going to need to the

00:03:03,750 --> 00:03:16,400
difference is the bottom is then

00:03:08,930 --> 00:03:20,099
entirely you have a Sinkin source the

00:03:16,400 --> 00:03:22,859
source is providing the data but the see

00:03:20,099 --> 00:03:26,669
past you pull right that's to say when

00:03:22,859 --> 00:03:29,549
it's ready and the state model is

00:03:26,669 --> 00:03:31,709
greatly simplified that you only have

00:03:29,549 --> 00:03:34,049
the one read right and if you read

00:03:31,709 --> 00:03:35,579
there's no data available and say right

00:03:34,049 --> 00:03:42,030
away if it's an error reading or failure

00:03:35,579 --> 00:03:44,940
right away there's very few state

00:03:42,030 --> 00:03:48,449
transitions as you are actually reading

00:03:44,940 --> 00:03:52,019
the data another part of it is it

00:03:48,449 --> 00:03:54,659
emphasizes being memory stable so rather

00:03:52,019 --> 00:03:56,760
than the rather than the source

00:03:54,659 --> 00:03:59,699
allocating memory and then pushing it

00:03:56,760 --> 00:04:02,760
and then this receiver having to copy

00:03:59,699 --> 00:04:05,879
did it right we're notifying this of

00:04:02,760 --> 00:04:10,439
course when it's done the puller would

00:04:05,879 --> 00:04:12,689
allocate the source port and the source

00:04:10,439 --> 00:04:16,049
location ready to explore right so the

00:04:12,689 --> 00:04:17,989
intent is to hopefully reduce the number

00:04:16,049 --> 00:04:20,579
of men copies and actually become I

00:04:17,989 --> 00:04:21,900
think of the other micro store so I

00:04:20,579 --> 00:04:25,030
guess I'm just going to go vertically

00:04:21,900 --> 00:04:29,930
this is so

00:04:25,030 --> 00:04:32,420
this is kind of just p.m. this is flight

00:04:29,930 --> 00:04:36,170
today - thank you for the last time we

00:04:32,420 --> 00:04:40,330
go Rashmi are you Sheriff I'm honest I

00:04:36,170 --> 00:04:47,740
don't know you just like to disagree

00:04:40,330 --> 00:04:50,780
yes we do moving where do you start -

00:04:47,740 --> 00:04:54,170
you go through each issue number one

00:04:50,780 --> 00:04:58,090
seven one one seven one on solid good

00:04:54,170 --> 00:04:58,090
I think that's easiest thing

00:05:02,200 --> 00:05:05,320
[Music]

00:05:18,720 --> 00:05:48,190
right there continue cool

00:05:45,430 --> 00:05:55,539
so yeah I just kind of like one of the

00:05:48,190 --> 00:05:58,960
things love it because it's the very

00:05:55,539 --> 00:06:03,129
same thing still continue to discuss

00:05:58,960 --> 00:06:06,129
regardless of that so I'm gonna go over

00:06:03,129 --> 00:06:09,509
like you sliced it I do have perhaps a

00:06:06,129 --> 00:06:12,819
little bit more quickly than my stocking

00:06:09,509 --> 00:06:16,180
I'm already discussed some things

00:06:12,819 --> 00:06:18,250
written them so yeah we went over white

00:06:16,180 --> 00:06:22,120
skull that and future question or

00:06:18,250 --> 00:06:26,130
streams or stream like things so I'm

00:06:22,120 --> 00:06:30,300
just up here there's kind of like why a

00:06:26,130 --> 00:06:34,650
little bit of a fool's API status

00:06:30,300 --> 00:06:37,090
discuss so when we have been screams a

00:06:34,650 --> 00:06:40,930
you may know why here but the user

00:06:37,090 --> 00:06:42,669
experience is really kind people run

00:06:40,930 --> 00:06:50,520
into problems all the time all the time

00:06:42,669 --> 00:07:00,370
I don't think this is a very new that do

00:06:50,520 --> 00:07:03,430
so I have some goals and things that I'm

00:07:00,370 --> 00:07:06,159
calling a consumer saying is the API and

00:07:03,430 --> 00:07:09,750
the point where data users do and a

00:07:06,159 --> 00:07:13,599
producer or the source is the API and

00:07:09,750 --> 00:07:17,349
where the data comes from and the

00:07:13,599 --> 00:07:21,490
protocol is a combination so the goal of

00:07:17,349 --> 00:07:25,330
this effort is to make a protocol really

00:07:21,490 --> 00:07:27,039
its full base that is binary

00:07:25,330 --> 00:07:32,439
so you don't need to worry about object

00:07:27,039 --> 00:07:36,539
mode where's Jay thank you

00:07:32,439 --> 00:07:40,560
the stainless as much as we do so any

00:07:36,539 --> 00:07:43,060
safer well we got this plastic gene

00:07:40,560 --> 00:07:45,310
there is one to one as possible so that

00:07:43,060 --> 00:07:48,159
there's no advance bidders because those

00:07:45,310 --> 00:07:52,719
also follows oil money collecting issues

00:07:48,159 --> 00:07:54,969
and very important there is also

00:07:52,719 --> 00:07:56,949
claiming agnostic as much as also as

00:07:54,969 --> 00:07:57,940
much as we can get out of it we don't

00:07:56,949 --> 00:07:59,860
need to worry about it

00:07:57,940 --> 00:08:04,060
next extend the best like you currently

00:07:59,860 --> 00:08:06,639
do no buffering in the protocol so we

00:08:04,060 --> 00:08:09,669
would like the underlying classes do not

00:08:06,639 --> 00:08:11,620
have buffering logic and any buffering

00:08:09,669 --> 00:08:12,969
that is done she doesn't mean a

00:08:11,620 --> 00:08:14,949
component to where it actually needs to

00:08:12,969 --> 00:08:17,560
be done rather than all the time and

00:08:14,949 --> 00:08:20,740
also the error should be able to be in

00:08:17,560 --> 00:08:23,229
line and sort of like ends or Enzo files

00:08:20,740 --> 00:08:28,330
should also be able for you in line

00:08:23,229 --> 00:08:31,210
message so I think what was doing and

00:08:28,330 --> 00:08:32,800
unfortunately is late in the day and I'm

00:08:31,210 --> 00:08:35,800
still going to show you code which I

00:08:32,800 --> 00:08:38,949
regret but that's what it is I'm so the

00:08:35,800 --> 00:08:44,050
sing API of this essentially looks like

00:08:38,949 --> 00:08:46,420
this rather simple code there's a method

00:08:44,050 --> 00:08:48,279
to kind of find things together descent

00:08:46,420 --> 00:08:51,550
into singing to the source so you get

00:08:48,279 --> 00:08:54,790
the protocol and then on the same which

00:08:51,550 --> 00:08:59,769
is the thing that is going to receiving

00:08:54,790 --> 00:09:04,570
data you have a next method which is

00:08:59,769 --> 00:09:05,890
what the source is going to call they

00:09:04,570 --> 00:09:10,860
can be filled out a bit more so this

00:09:05,890 --> 00:09:15,130
actually more or less kind of like works

00:09:10,860 --> 00:09:18,730
together and then in your next wave yep

00:09:15,130 --> 00:09:20,709
there you would be once you are done

00:09:18,730 --> 00:09:23,490
receiving and processing data you are

00:09:20,709 --> 00:09:29,709
going to pull it again these are pulleys

00:09:23,490 --> 00:09:32,140
so you request data always and the

00:09:29,709 --> 00:09:34,930
source API is kind of like this we go to

00:09:32,140 --> 00:09:35,780
methods that are the other side

00:09:34,930 --> 00:09:39,140
equivalents

00:09:35,780 --> 00:09:41,990
classic and pull this cold and that

00:09:39,140 --> 00:09:46,900
maybe fill those two once you get the

00:09:41,990 --> 00:09:49,700
data send that back to the sink next and

00:09:46,900 --> 00:09:52,550
quickest obviously there's bit more

00:09:49,700 --> 00:09:56,540
filler but that's really a lot to the

00:09:52,550 --> 00:09:59,300
protocol so a very positive can be

00:09:56,540 --> 00:10:04,370
cooked beyond constructive just as this

00:09:59,300 --> 00:10:06,350
this works as a pass-through completely

00:10:04,370 --> 00:10:13,850
there's no extra code needed and it fits

00:10:06,350 --> 00:10:15,470
on this pretty nice effect so imposing

00:10:13,850 --> 00:10:19,340
these things into something you can

00:10:15,470 --> 00:10:22,010
actually like stream data through is

00:10:19,340 --> 00:10:23,620
kind of like not you know perfectly

00:10:22,010 --> 00:10:27,620
Pleasant like now a header would be

00:10:23,620 --> 00:10:33,170
appreciated or like as a rain cover is

00:10:27,620 --> 00:10:35,030
probably going to be the ideal to or to

00:10:33,170 --> 00:10:38,330
just change the planning mechanism I

00:10:35,030 --> 00:10:41,330
love it rough like that that is kind of

00:10:38,330 --> 00:10:46,010
it it's got its most simplest and

00:10:41,330 --> 00:10:47,960
brought for discussion and so if you

00:10:46,010 --> 00:10:51,680
want to put a transform any community

00:10:47,960 --> 00:10:55,430
basically now you're saying binds to

00:10:51,680 --> 00:10:58,940
sources so how do you pinch for inviting

00:10:55,430 --> 00:11:04,820
to your source and then your sequence

00:10:58,940 --> 00:11:08,450
then bind to that transform and doing

00:11:04,820 --> 00:11:10,460
the way most of this right now is so

00:11:08,450 --> 00:11:12,890
that kind of like one night we start

00:11:10,460 --> 00:11:15,550
there's some stuff I basically broke

00:11:12,890 --> 00:11:18,020
like this very minimal thing on like

00:11:15,550 --> 00:11:20,570
what we may want to add to that or

00:11:18,020 --> 00:11:22,670
extensions I'm not sure that's life but

00:11:20,570 --> 00:11:24,710
in cases where you have the network

00:11:22,670 --> 00:11:26,150
sockets it's nice to be able to start

00:11:24,710 --> 00:11:30,020
that explicitly you know how to

00:11:26,150 --> 00:11:34,640
privately start from so all this is

00:11:30,020 --> 00:11:36,170
system on my in my in repose under fish

00:11:34,640 --> 00:11:40,579
or 23 /

00:11:36,170 --> 00:11:43,220
thanks to everything and if you give

00:11:40,579 --> 00:11:46,070
diagrams you can blank these diagrams so

00:11:43,220 --> 00:11:52,250
this shows you the entire flow on where

00:11:46,070 --> 00:11:56,740
there is no point or anything but you

00:11:52,250 --> 00:11:58,579
you start down where the funny that's

00:11:56,740 --> 00:12:01,250
kind of thing is you know cut for

00:11:58,579 --> 00:12:04,310
yourself is and then you go and you pull

00:12:01,250 --> 00:12:05,930
up the stream so in this case you may be

00:12:04,310 --> 00:12:08,360
from a network socket or something

00:12:05,930 --> 00:12:10,670
molding compression transformer that is

00:12:08,360 --> 00:12:14,630
going to pull from as a final source and

00:12:10,670 --> 00:12:16,339
that once your final source has that

00:12:14,630 --> 00:12:18,589
theta it is going to send that back down

00:12:16,339 --> 00:12:20,870
and you know transform or something you

00:12:18,589 --> 00:12:24,230
made how they need to do some buffering

00:12:20,870 --> 00:12:25,279
so it made times and then you're going

00:12:24,230 --> 00:12:26,930
to get down to the bottom and it's going

00:12:25,279 --> 00:12:28,639
to repeat as many times it's necessary

00:12:26,930 --> 00:12:30,940
and when that's done you will get a

00:12:28,639 --> 00:12:34,579
message they're complying this

00:12:30,940 --> 00:12:36,529
everything or you go an error in which

00:12:34,579 --> 00:12:38,660
case the error flow looks very similar

00:12:36,529 --> 00:12:46,420
the error could be emitted anywhere it

00:12:38,660 --> 00:12:51,890
bubbles up so the anything it was below

00:12:46,420 --> 00:12:53,180
and also the thing that admitted I don't

00:12:51,890 --> 00:12:59,180
know if that makes sense that we go over

00:12:53,180 --> 00:13:01,190
it again discuss it we princesses if I

00:12:59,180 --> 00:13:03,380
have some various modules published

00:13:01,190 --> 00:13:05,360
they're published in nvm they're steep

00:13:03,380 --> 00:13:07,880
up sources for these things I'm buck

00:13:05,360 --> 00:13:11,570
status at the source at the sink do look

00:13:07,880 --> 00:13:13,339
transform they do work and then there's

00:13:11,570 --> 00:13:15,890
something which kind of attempts to make

00:13:13,339 --> 00:13:18,680
a network socket oh this requests with

00:13:15,890 --> 00:13:19,190
that sucker work with the server server

00:13:18,680 --> 00:13:23,959
looks

00:13:19,190 --> 00:13:26,899
lease memories I'm not a very good and I

00:13:23,959 --> 00:13:28,279
have limited time spend honest there's

00:13:26,899 --> 00:13:29,779
some things on the API performance if

00:13:28,279 --> 00:13:32,269
someone wants to build one that doesn't

00:13:29,779 --> 00:13:35,889
already put this is much cheaper to do

00:13:32,269 --> 00:13:39,220
than using current streams and

00:13:35,889 --> 00:13:39,220
everything this guess

00:13:39,490 --> 00:13:50,800
any questions on any questions on the

00:13:46,819 --> 00:13:50,800
benefits or concern

00:13:58,340 --> 00:14:08,700
what we have for streams how do you want

00:14:01,680 --> 00:14:12,660
to support the new API in the existing

00:14:08,700 --> 00:14:16,620
live net or hinge to be and doesn't have

00:14:12,660 --> 00:14:22,110
any overlap with the promises friendly

00:14:16,620 --> 00:14:23,820
API for of engineering streams so I kind

00:14:22,110 --> 00:14:28,700
of left that on such a nice light but

00:14:23,820 --> 00:14:32,040
the plan is to change all of the

00:14:28,700 --> 00:14:35,240
underside to no basically so the streams

00:14:32,040 --> 00:14:38,670
internally would use this because

00:14:35,240 --> 00:14:45,900
streams is mapable on top of including

00:14:38,670 --> 00:14:48,120
all the stars so leave the paprika

00:14:45,900 --> 00:14:50,580
juiciness is basically just an attic as

00:14:48,120 --> 00:14:53,040
a separate new streams implementation

00:14:50,580 --> 00:14:55,650
right in Carlos so what's there the

00:14:53,040 --> 00:14:59,250
existing streams API would continue to

00:14:55,650 --> 00:15:02,670
exist untouched right but there would be

00:14:59,250 --> 00:15:06,900
a map layer on top of this that would

00:15:02,670 --> 00:15:11,790
give a little lazy stream mapping on top

00:15:06,900 --> 00:15:13,950
of all right yeah the idea was to do

00:15:11,790 --> 00:15:16,350
this in a way that where streams could

00:15:13,950 --> 00:15:19,200
be implemented on top of it so that we

00:15:16,350 --> 00:15:22,050
could then prototype is essentially also

00:15:19,200 --> 00:15:24,030
a node by switching out internals to use

00:15:22,050 --> 00:15:26,070
this and then once we were happy with

00:15:24,030 --> 00:15:30,750
how that works then we could publicize

00:15:26,070 --> 00:15:33,840
it and then one of the other nice things

00:15:30,750 --> 00:15:37,170
about this is that the same protocol

00:15:33,840 --> 00:15:39,630
this is essentially just a protocol and

00:15:37,170 --> 00:15:43,470
it works for that the C++ and JavaScript

00:15:39,630 --> 00:15:45,390
using the same model so we don't have

00:15:43,470 --> 00:15:47,610
two completely different Navy I

00:15:45,390 --> 00:15:54,360
interchange models operating those two

00:15:47,610 --> 00:15:57,390
layers I'd be a mystic because I just

00:15:54,360 --> 00:15:59,400
came in but aside the question was how

00:15:57,390 --> 00:16:00,870
does this relate to some existing their

00:15:59,400 --> 00:16:05,130
ongoing standardization

00:16:00,870 --> 00:16:09,240
which looks great so what are the other

00:16:05,130 --> 00:16:11,430
intents of this was to give a the new

00:16:09,240 --> 00:16:13,380
little stream primitive upon wish

00:16:11,430 --> 00:16:17,400
something like whatever you shins could

00:16:13,380 --> 00:16:20,310
be built right now the existing streams

00:16:17,400 --> 00:16:22,640
and note if we try to do that what the

00:16:20,310 --> 00:16:25,320
new Jean implementation on top of that

00:16:22,640 --> 00:16:27,740
the performance will be rather bad and

00:16:25,320 --> 00:16:30,900
there's the model system quite thick

00:16:27,740 --> 00:16:33,210
with this we should be rather

00:16:30,900 --> 00:16:35,540
straightforward to build what W stream

00:16:33,210 --> 00:16:39,270
to the fish Mart on top of this

00:16:35,540 --> 00:17:02,580
furniture I guess so then one question

00:16:39,270 --> 00:17:05,130
would be then yeah yes the idea is that

00:17:02,580 --> 00:17:06,750
we would potentially eventually expose

00:17:05,130 --> 00:17:09,810
it because they would be much cheaper to

00:17:06,750 --> 00:17:12,360
do and it is much simpler than there and

00:17:09,810 --> 00:17:14,040
it is much more cheaper do it's much

00:17:12,360 --> 00:17:17,429
more performant than what will do speeds

00:17:14,040 --> 00:17:20,220
for ours what we do streams can be built

00:17:17,429 --> 00:17:22,500
on top of your problem what we do

00:17:20,220 --> 00:17:24,600
streams are first base when you are in

00:17:22,500 --> 00:17:26,790
the screening but the actual like end

00:17:24,600 --> 00:17:30,240
points of consuming something or giving

00:17:26,790 --> 00:17:33,360
data somewhere or actually so just find

00:17:30,240 --> 00:17:37,320
this also it's a lot easier to build put

00:17:33,360 --> 00:17:38,790
these streams on top of a streams all

00:17:37,320 --> 00:17:41,640
you do is have something that

00:17:38,790 --> 00:17:43,740
immediately grabs the data and pushes it

00:17:41,640 --> 00:17:45,929
along rather rather than the opposite

00:17:43,740 --> 00:17:48,990
way try to both pulled a stream stay

00:17:45,929 --> 00:17:51,679
screams you just have to buffer a ton of

00:17:48,990 --> 00:17:51,679
data all the time

00:18:01,650 --> 00:18:07,060
so this is probably just exposing my

00:18:04,240 --> 00:18:10,450
ignorance about how strings work but if

00:18:07,060 --> 00:18:12,580
you don't have any buffering and it's

00:18:10,450 --> 00:18:19,900
full based entirely what happens when

00:18:12,580 --> 00:18:23,560
the source is not so this is intended to

00:18:19,900 --> 00:18:25,840
reduce as much as possible you know when

00:18:23,560 --> 00:18:28,480
we do have a source which isn't far host

00:18:25,840 --> 00:18:31,810
then it will have to buffer what we're

00:18:28,480 --> 00:18:33,790
when we what the goal is is right now on

00:18:31,810 --> 00:18:36,370
the streams for course offering at every

00:18:33,790 --> 00:18:38,560
layer like rewritable hungry beautiful

00:18:36,370 --> 00:18:41,080
has this buffering we want to isolate

00:18:38,560 --> 00:18:43,960
the buffering where it only when it

00:18:41,080 --> 00:18:46,480
where it's absolutely needed there are

00:18:43,960 --> 00:18:48,100
some unfortunately the lot of the

00:18:46,480 --> 00:18:51,460
underlying protocol now are giving us

00:18:48,100 --> 00:18:54,250
options for providing flow control in

00:18:51,460 --> 00:18:56,950
the protocol HP to wait for instance we

00:18:54,250 --> 00:18:59,800
can actually if we're not reading we can

00:18:56,950 --> 00:19:02,800
tell the sender stop right some of the

00:18:59,800 --> 00:19:04,870
other the other protocol just will have

00:19:02,800 --> 00:19:09,880
to buffer inside of that of that one

00:19:04,870 --> 00:19:11,860
layer so exactly something will always

00:19:09,880 --> 00:19:16,480
be stop buffering so market you are

00:19:11,860 --> 00:19:19,180
further and as your options but the goal

00:19:16,480 --> 00:19:28,120
is to try to avoid doing that certainly

00:19:19,180 --> 00:19:29,260
at every step along the way another

00:19:28,120 --> 00:19:32,020
thing that's not gonna give that I'd

00:19:29,260 --> 00:19:35,410
like to mention is kind of like a live

00:19:32,020 --> 00:19:39,060
even layer of things so in in my circuit

00:19:35,410 --> 00:19:45,940
work this is also implemented in a

00:19:39,060 --> 00:19:48,940
sequel plus and should be also so along

00:19:45,940 --> 00:19:52,740
at the system level a lot of calls you

00:19:48,940 --> 00:19:55,720
make the network one way or there being

00:19:52,740 --> 00:19:58,390
like a request from from the operating

00:19:55,720 --> 00:20:01,030
system which kind of max lot better to

00:19:58,390 --> 00:20:03,910
replace things than most big streams new

00:20:01,030 --> 00:20:06,700
and let me be currently exposed

00:20:03,910 --> 00:20:09,820
quickly streams but would expose

00:20:06,700 --> 00:20:13,290
patients potentially in a way that made

00:20:09,820 --> 00:20:13,290
more sense so exactly is

00:20:14,640 --> 00:20:19,600
and one thing we haven't touched on sir

00:20:17,440 --> 00:20:21,640
the turn streams API has both the

00:20:19,600 --> 00:20:25,030
readable and writeable interfaces right

00:20:21,640 --> 00:20:27,190
another two very scenic things with this

00:20:25,030 --> 00:20:30,070
there's only one protocol that works for

00:20:27,190 --> 00:20:33,250
both right so maybe on the writable side

00:20:30,070 --> 00:20:37,300
what your what your and implementing is

00:20:33,250 --> 00:20:38,980
a it is a source right and then he will

00:20:37,300 --> 00:20:42,070
provide your brother than pushing data

00:20:38,980 --> 00:20:43,900
into it you're you're essentially just

00:20:42,070 --> 00:20:45,460
waiting for whatever your destination to

00:20:43,900 --> 00:20:48,700
pull data out so there would be a

00:20:45,460 --> 00:20:51,400
slightly different model it's like very

00:20:48,700 --> 00:20:53,650
normally what we have now this would be

00:20:51,400 --> 00:21:01,780
something but we will be able to support

00:20:53,650 --> 00:21:03,160
that liable side as well so any any

00:21:01,780 --> 00:21:09,370
other questions in terms of the basic

00:21:03,160 --> 00:21:13,929
model terms of what's needed here is

00:21:09,370 --> 00:21:21,850
just more validation of the model you

00:21:13,929 --> 00:21:23,830
know this is this is something I've been

00:21:21,850 --> 00:21:27,160
working on this for two years and you

00:21:23,830 --> 00:21:30,940
know meets anybody interested health

00:21:27,160 --> 00:21:33,309
pushing forward that I would mention the

00:21:30,940 --> 00:21:35,830
next step is actually getting land nice

00:21:33,309 --> 00:21:39,610
significant stuff is actually landing my

00:21:35,830 --> 00:21:42,100
support for this the next up is getting

00:21:39,610 --> 00:21:45,880
some sort of conversion between this and

00:21:42,100 --> 00:21:55,390
streams for every app that is required

00:21:45,880 --> 00:21:57,610
to do stuff that you just said is it

00:21:55,390 --> 00:21:59,200
time or reasonable to move that project

00:21:57,610 --> 00:22:00,820
under the nodejs ordinate was a

00:21:59,200 --> 00:22:03,730
something that is more easily

00:22:00,820 --> 00:22:09,940
discoverable and having other people get

00:22:03,730 --> 00:22:18,940
involved I'm not really convinced how

00:22:09,940 --> 00:22:21,220
much that not apparently so so yeah the

00:22:18,940 --> 00:22:23,730
the streams the existing stream jet guys

00:22:21,220 --> 00:22:26,580
for the complicated doing that map

00:22:23,730 --> 00:22:30,110
require somebody that you know that has

00:22:26,580 --> 00:22:30,110
a good understanding of those extremes

00:22:31,580 --> 00:22:38,250
but you know if you might get involved

00:22:34,080 --> 00:22:42,690
in that something that we can deal with

00:22:38,250 --> 00:22:43,980
let us see this section or earlier

00:22:42,690 --> 00:22:46,019
quickly is something we can introduce

00:22:43,980 --> 00:22:51,870
within we should build issues in the

00:22:46,019 --> 00:22:54,899
future of the minor yeah I mean so I

00:22:51,870 --> 00:22:57,990
just wanted to add one big thing once we

00:22:54,899 --> 00:23:00,809
have the transform layer one thing that

00:22:57,990 --> 00:23:20,059
can be really really nice to check is

00:23:00,809 --> 00:23:20,059
that this mechanism is you know

00:23:27,290 --> 00:23:30,349
[Music]

00:23:32,570 --> 00:24:16,710
so the overall once I brought it across

00:24:14,039 --> 00:24:20,120
the barrier of meaning to talk to Joe

00:24:16,710 --> 00:24:23,789
certainty loss is pretty much the same

00:24:20,120 --> 00:24:25,710
there's not some wildly different layer

00:24:23,789 --> 00:24:31,289
that's been it's like needed to encase

00:24:25,710 --> 00:24:35,580
it speed based yeah and a couple other

00:24:31,289 --> 00:24:38,249
things I mean dimensions point there

00:24:35,580 --> 00:24:41,610
please there's other things I probably

00:24:38,249 --> 00:24:44,610
should listen more a bit still use like

00:24:41,610 --> 00:24:47,279
prototyping like if you do want events

00:24:44,610 --> 00:24:51,769
with this like for some reason you want

00:24:47,279 --> 00:24:59,549
to see when they like or something

00:24:51,769 --> 00:25:01,289
really putting like a transforming you

00:24:59,549 --> 00:25:04,460
just want to like this is the errors or

00:25:01,289 --> 00:25:07,320
something for some reason that way

00:25:04,460 --> 00:25:09,119
another thing is okay this is from a

00:25:07,320 --> 00:25:10,950
space it's not only the apparently

00:25:09,119 --> 00:25:13,559
callback based here it's kind of just

00:25:10,950 --> 00:25:17,249
like objects that talk to each other

00:25:13,559 --> 00:25:20,999
they call each other than others but

00:25:17,249 --> 00:25:24,960
consuming a foolish thing with a async

00:25:20,999 --> 00:25:26,940
iterator also not very well in spacing

00:25:24,960 --> 00:25:31,679
good razors are essentially full length

00:25:26,940 --> 00:25:34,409
less and less this on that note the

00:25:31,679 --> 00:25:37,169
reason why it isn't sort of like a sneak

00:25:34,409 --> 00:25:38,730
away base is because or facing aerator

00:25:37,169 --> 00:25:44,299
sort of base because there's not really

00:25:38,730 --> 00:25:47,340
a way to pass up from the consumer to

00:25:44,299 --> 00:25:54,509
the thing that is giving you data and

00:25:47,340 --> 00:25:56,850
that is or memory yeah the one thing

00:25:54,509 --> 00:26:00,029
that I will see the current API was just

00:25:56,850 --> 00:26:02,609
universe your employer next there is one

00:26:00,029 --> 00:26:05,039
limitation there you know that we have a

00:26:02,609 --> 00:26:09,869
quick for instance if they might also

00:26:05,039 --> 00:26:12,629
think we have to hold on to the buffer

00:26:09,869 --> 00:26:13,679
data until is explicitly acknowledged so

00:26:12,629 --> 00:26:16,529
we have to write it again

00:26:13,679 --> 00:26:23,389
so it's perceived I should sir we might

00:26:16,529 --> 00:26:27,269
need to add one additional then and also

00:26:23,389 --> 00:26:31,320
don't mean to locate a Dennis student

00:26:27,269 --> 00:26:35,779
writing stuff recently the inherently

00:26:31,320 --> 00:26:35,779
have is like seeking although I guess

00:26:35,960 --> 00:26:44,070
like thing before all the other pipeline

00:26:40,289 --> 00:26:46,759
that doesn't like you continue until we

00:26:44,070 --> 00:26:46,759
get to this point

00:26:49,620 --> 00:26:56,770
or you're supposed to just do that so

00:26:53,400 --> 00:26:58,810
yeah so one of those lines yeah just you

00:26:56,770 --> 00:27:00,670
know validation of me yeah you know just

00:26:58,810 --> 00:27:03,370
you know think through the model how it

00:27:00,670 --> 00:27:07,150
works show how that ago and if there's

00:27:03,370 --> 00:27:10,000
if for some reason this this model just

00:27:07,150 --> 00:27:12,010
doesn't work for taste because it was

00:27:10,000 --> 00:27:22,390
not easy the great every boat that we

00:27:12,010 --> 00:27:30,280
can start discussions on any other

00:27:22,390 --> 00:27:32,380
questions comments you mention had

00:27:30,280 --> 00:27:35,380
performance improvements do you have

00:27:32,380 --> 00:27:45,970
numbers on like how much pasta TCP gets

00:27:35,380 --> 00:27:49,690
with this implementation for like doing

00:27:45,970 --> 00:27:51,670
like file reads and stuff even in five

00:27:49,690 --> 00:27:57,370
cases you get like eight thirty percent

00:27:51,670 --> 00:28:04,300
you seen you're using and for good cases

00:27:57,370 --> 00:28:08,200
like so like a five cases like your is I

00:28:04,300 --> 00:28:12,040
believe with Cosima transforms and it

00:28:08,200 --> 00:28:12,850
still takes you and just like doing a

00:28:12,040 --> 00:28:16,870
final copy

00:28:12,850 --> 00:28:19,240
screaming my hockey is is about anybody

00:28:16,870 --> 00:28:26,530
personality to this table and with the

00:28:19,240 --> 00:28:29,530
current stream based model stream base

00:28:26,530 --> 00:28:32,860
went when you write data to the stream

00:28:29,530 --> 00:28:36,460
to the right of those which like and it

00:28:32,860 --> 00:28:38,440
passes that through to the C++ you can't

00:28:36,460 --> 00:28:41,770
write on another jump until I call back

00:28:38,440 --> 00:28:46,300
this right in because of the way I have

00:28:41,770 --> 00:28:48,910
to buffer the data for port quick the

00:28:46,300 --> 00:28:52,900
maximum throughput by extension to do a

00:28:48,910 --> 00:28:55,470
mem copy on every right then call him

00:28:52,900 --> 00:28:58,870
back right away so I don't necessarily

00:28:55,470 --> 00:29:02,610
whether they need to be acknowledged but

00:28:58,870 --> 00:29:02,610
you know which will treat

00:29:07,000 --> 00:29:58,640
all the way I don't know where the

00:29:54,380 --> 00:30:01,970
olenka is it has been a fantastic

00:29:58,640 --> 00:30:04,490
experiences thing for everybody and I

00:30:01,970 --> 00:30:09,290
will open an issue to receive to collect

00:30:04,490 --> 00:30:11,030
feedback on repo so that we can improve

00:30:09,290 --> 00:30:13,400
for next time so things FM for our

00:30:11,030 --> 00:30:15,440
system didn't work and teaser do you

00:30:13,400 --> 00:30:17,420
mind if we might do better next time

00:30:15,440 --> 00:30:20,030
I've seen that a bunch of people who

00:30:17,420 --> 00:30:21,680
like to a main tax which is a fantastic

00:30:20,030 --> 00:30:23,120
thing because it means that more people

00:30:21,680 --> 00:30:29,840
that doesn't know each other coming to

00:30:23,120 --> 00:30:41,840
these events so things we have to do for

00:30:29,840 --> 00:30:49,190
the next time named tax right to thank

00:30:41,840 --> 00:30:51,170
jury thank you for picking up a lot of

00:30:49,190 --> 00:30:59,300
work and also to many other a lot of

00:30:51,170 --> 00:31:01,820
work that you know I was not along those

00:30:59,300 --> 00:31:04,660
big team working on this also proceed

00:31:01,820 --> 00:31:12,050
from this table

00:31:04,660 --> 00:31:15,630
helped a lot and as well rooms and

00:31:12,050 --> 00:31:19,140
everything it's been great so

00:31:15,630 --> 00:31:23,780
I am so to say thank you all of you for

00:31:19,140 --> 00:31:23,780
coming and that's it

00:31:23,830 --> 00:31:28,359

YouTube URL: https://www.youtube.com/watch?v=HLS58euwH60


