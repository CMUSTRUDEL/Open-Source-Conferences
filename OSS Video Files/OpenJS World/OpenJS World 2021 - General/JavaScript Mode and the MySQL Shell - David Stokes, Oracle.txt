Title: JavaScript Mode and the MySQL Shell - David Stokes, Oracle
Publication date: 2021-05-31
Playlist: OpenJS World 2021 - General
Description: 
	MySQL speaks JavaScript? Well, the new MySQL Shell does. The shell has three modes Structured Query Language (SQL) , Python, and JavaScript! So you can use your JS libraries to work directly with MySQL, create scripts in JS, and use the new X DevAPI to provide NoSQL, JSON Document store features. This is a quick introduction to the new MySQL shell's JavaScript mode, how to use the shell for scripting, and using the MySQL Document Store.
Captions: 
	00:00:00,510 --> 00:00:18,829
[Music]

00:00:23,359 --> 00:00:25,840
good morning

00:00:24,160 --> 00:00:27,760
good afternoon good evening depending on

00:00:25,840 --> 00:00:30,640
where you are in the world

00:00:27,760 --> 00:00:32,320
this is a presentation on extending the

00:00:30,640 --> 00:00:35,120
mysql shell

00:00:32,320 --> 00:00:37,680
with javascript this is a presentation

00:00:35,120 --> 00:00:40,239
for openjs world 2021

00:00:37,680 --> 00:00:42,160
my name is dave stokes i have the honor

00:00:40,239 --> 00:00:44,559
of being a mysql community manager

00:00:42,160 --> 00:00:46,559
for oracle corporation i've been on the

00:00:44,559 --> 00:00:47,440
mysql community team for just over a

00:00:46,559 --> 00:00:50,480
decade

00:00:47,440 --> 00:00:54,000
before that one of my jobs was the

00:00:50,480 --> 00:00:57,199
head of the certification department and

00:00:54,000 --> 00:00:59,600
i'm going to show you how to extend

00:00:57,199 --> 00:01:02,320
the new shell that we have with

00:00:59,600 --> 00:01:02,320
javascript

00:01:02,640 --> 00:01:07,600
but first since i work for oracle i have

00:01:05,680 --> 00:01:10,479
to post a safe harbor

00:01:07,600 --> 00:01:11,040
statement everything i'm talking about

00:01:10,479 --> 00:01:13,840
today

00:01:11,040 --> 00:01:15,360
is in the free open source version of

00:01:13,840 --> 00:01:16,799
mysql

00:01:15,360 --> 00:01:19,439
we're talking about the mysql server the

00:01:16,799 --> 00:01:22,240
mysql shell the connectors router all

00:01:19,439 --> 00:01:23,439
other pieces of software there isn't an

00:01:22,240 --> 00:01:25,200
enterprise version

00:01:23,439 --> 00:01:27,759
of all those products that you have to

00:01:25,200 --> 00:01:30,720
buy a subscription to use

00:01:27,759 --> 00:01:32,159
and to get the license for and i am

00:01:30,720 --> 00:01:34,479
speaking about the free version the

00:01:32,159 --> 00:01:37,119
community version because that's my job

00:01:34,479 --> 00:01:38,400
now during q a or some other time i

00:01:37,119 --> 00:01:40,799
might go off on a tangent

00:01:38,400 --> 00:01:42,000
on stuff that has not been released yet

00:01:40,799 --> 00:01:43,520
new products

00:01:42,000 --> 00:01:45,520
and unfortunately i don't have perfect

00:01:43,520 --> 00:01:47,840
knowledge of those products

00:01:45,520 --> 00:01:50,079
so take anything i say or may say about

00:01:47,840 --> 00:01:52,720
future products with a grain of salt

00:01:50,079 --> 00:01:53,600
i might be thinking the color blue and

00:01:52,720 --> 00:01:55,680
you're thinking

00:01:53,600 --> 00:01:58,079
royal blue and it ends up being blue

00:01:55,680 --> 00:01:58,079
cheese

00:01:59,040 --> 00:02:04,640
anyway about me um live in texas

00:02:02,560 --> 00:02:07,040
i work for oracle corporation i have a

00:02:04,640 --> 00:02:09,000
blog at

00:02:07,040 --> 00:02:10,640
dot elephantdoffin.blogspot.com email

00:02:09,000 --> 00:02:11,920
david.stokestorable.com and on twitter

00:02:10,640 --> 00:02:14,280
i'm at stoker

00:02:11,920 --> 00:02:16,879
the slides for this event will be up at

00:02:14,280 --> 00:02:20,640
slideshare.net slash dave stokes

00:02:16,879 --> 00:02:22,640
well looking for open js 2021

00:02:20,640 --> 00:02:25,360
mysql shell and that should bring it

00:02:22,640 --> 00:02:25,360
down for you

00:02:26,560 --> 00:02:30,560
let me turn off the webcam to save some

00:02:28,640 --> 00:02:32,879
screen space

00:02:30,560 --> 00:02:35,040
mysql sh which is our new shell if

00:02:32,879 --> 00:02:38,239
you've used our old shell in the past

00:02:35,040 --> 00:02:41,280
it was very much an old style

00:02:38,239 --> 00:02:42,879
command line interface the new shell is

00:02:41,280 --> 00:02:43,599
a brand new product that came out three

00:02:42,879 --> 00:02:46,480
years ago

00:02:43,599 --> 00:02:46,800
with the launch of mysql8 and has a lot

00:02:46,480 --> 00:02:50,319
of

00:02:46,800 --> 00:02:54,080
very interesting features the

00:02:50,319 --> 00:02:57,519
main use for it is to process

00:02:54,080 --> 00:03:00,879
code written in either javascript

00:02:57,519 --> 00:03:03,200
python and sql

00:03:00,879 --> 00:03:04,480
and you'll see that does all those very

00:03:03,200 --> 00:03:06,480
well

00:03:04,480 --> 00:03:08,560
now any of the executed code is

00:03:06,480 --> 00:03:09,920
processed in any of these languages so

00:03:08,560 --> 00:03:10,720
you can write something in python have

00:03:09,920 --> 00:03:13,680
it run in

00:03:10,720 --> 00:03:14,720
an sql or javascript and run python or

00:03:13,680 --> 00:03:17,360
however

00:03:14,720 --> 00:03:19,760
it's all basically based on the current

00:03:17,360 --> 00:03:24,080
language that you're currently active

00:03:19,760 --> 00:03:24,080
with well how do you tell that

00:03:24,400 --> 00:03:31,280
well here's where i fired up mysqlsh

00:03:28,159 --> 00:03:32,480
and you'll see the prompt there in

00:03:31,280 --> 00:03:35,840
yellow

00:03:32,480 --> 00:03:39,519
the js for javascript

00:03:35,840 --> 00:03:42,239
that's why i'm here open java.js21

00:03:39,519 --> 00:03:43,599
now if you want to work directly with

00:03:42,239 --> 00:03:48,000
python

00:03:43,599 --> 00:03:49,840
you type in slash py and if you're a old

00:03:48,000 --> 00:03:52,640
database person like myself and want to

00:03:49,840 --> 00:03:55,280
use structured query language

00:03:52,640 --> 00:03:55,280
sql

00:03:57,200 --> 00:04:02,400
by the way something to point out rather

00:04:00,400 --> 00:04:03,599
than our own monochromatic shell we now

00:04:02,400 --> 00:04:06,159
have colors

00:04:03,599 --> 00:04:08,080
and the command line prompt is all

00:04:06,159 --> 00:04:10,319
customizable

00:04:08,080 --> 00:04:12,080
in this case here i typed in a backslash

00:04:10,319 --> 00:04:12,879
s to get the status and you'll see that

00:04:12,080 --> 00:04:16,079
i'm

00:04:12,879 --> 00:04:16,720
in sql mode and if you look a little bit

00:04:16,079 --> 00:04:20,079
deeper

00:04:16,720 --> 00:04:23,360
you'll notice that we are using ssl

00:04:20,079 --> 00:04:24,320
we're using tls aes 256 encryption by

00:04:23,360 --> 00:04:26,240
default

00:04:24,320 --> 00:04:28,080
when you set up your mysql server that

00:04:26,240 --> 00:04:31,280
is enabled for you

00:04:28,080 --> 00:04:33,600
we wanted to have mysql80b secure

00:04:31,280 --> 00:04:34,960
out of the box now if you want to turn

00:04:33,600 --> 00:04:36,160
that off because your environment where

00:04:34,960 --> 00:04:38,960
everything is

00:04:36,160 --> 00:04:40,000
air gapped from the outside world or you

00:04:38,960 --> 00:04:42,160
have some other way of

00:04:40,000 --> 00:04:44,479
securing stuff you can turn it off by

00:04:42,160 --> 00:04:46,400
default we turn it on

00:04:44,479 --> 00:04:48,400
by the way if you notice at the bottom

00:04:46,400 --> 00:04:50,880
of the screen second lineup

00:04:48,400 --> 00:04:52,560
we can compress your data as it goes

00:04:50,880 --> 00:04:55,680
back and forth between the server and

00:04:52,560 --> 00:04:57,919
your client here the mysql shell

00:04:55,680 --> 00:05:00,479
also i'd like to point out with mysql8

00:04:57,919 --> 00:05:03,240
the default character set

00:05:00,479 --> 00:05:04,800
for the server and the client is

00:05:03,240 --> 00:05:07,840
utf-8mb4

00:05:04,800 --> 00:05:08,960
a big part of that is because of the

00:05:07,840 --> 00:05:11,039
json support

00:05:08,960 --> 00:05:12,639
that we have json by default is all

00:05:11,039 --> 00:05:14,479
utf-84

00:05:12,639 --> 00:05:16,080
also it lets you use emojis wherever you

00:05:14,479 --> 00:05:19,600
want

00:05:16,080 --> 00:05:22,080
so let's carry on now with the new shell

00:05:19,600 --> 00:05:23,280
there are two types of sessions that you

00:05:22,080 --> 00:05:25,280
can have

00:05:23,280 --> 00:05:26,720
we have the classic session which is

00:05:25,280 --> 00:05:30,880
what you probably are used to

00:05:26,720 --> 00:05:35,280
from mysql 5 7 all back to the 321 days

00:05:30,880 --> 00:05:35,280
which listens on port 3306

00:05:35,440 --> 00:05:38,560
also four years ago or three years ago

00:05:37,039 --> 00:05:41,360
when mysql8 came out

00:05:38,560 --> 00:05:42,960
we had the x protocol which we call the

00:05:41,360 --> 00:05:44,720
xdev api

00:05:42,960 --> 00:05:46,800
which speaks both structured query

00:05:44,720 --> 00:05:51,440
language and nosql

00:05:46,800 --> 00:05:53,280
by default it listens on port 33060

00:05:51,440 --> 00:05:54,639
and this is a nice little diagram that

00:05:53,280 --> 00:05:56,400
shows kind of our

00:05:54,639 --> 00:05:58,560
world view we're at the top level you

00:05:56,400 --> 00:06:01,840
have applications talking through

00:05:58,560 --> 00:06:04,880
connectors or you can use scripts

00:06:01,840 --> 00:06:07,280
right running through the mysql shell

00:06:04,880 --> 00:06:09,199
and they can talk the standard protocol

00:06:07,280 --> 00:06:11,520
or the x protocol

00:06:09,199 --> 00:06:12,639
and on the server you can have

00:06:11,520 --> 00:06:15,680
relational tables

00:06:12,639 --> 00:06:16,880
and you can have no sql json document

00:06:15,680 --> 00:06:18,960
stores

00:06:16,880 --> 00:06:21,280
and you can use them interchangeably so

00:06:18,960 --> 00:06:23,600
in the nosql site i can actually reach

00:06:21,280 --> 00:06:25,440
relational tables and the relational

00:06:23,600 --> 00:06:27,039
table side i can actually go out and get

00:06:25,440 --> 00:06:29,600
information from json document

00:06:27,039 --> 00:06:29,600
collections

00:06:30,400 --> 00:06:36,720
now you can use the functions available

00:06:33,840 --> 00:06:38,800
in javascript and python mode to create

00:06:36,720 --> 00:06:41,120
multiple sessions with multiple objects

00:06:38,800 --> 00:06:43,840
doing all sorts of different stuff

00:06:41,120 --> 00:06:45,520
these session objects lets you run

00:06:43,840 --> 00:06:47,600
concurrent

00:06:45,520 --> 00:06:49,599
sessions you can interact with each

00:06:47,600 --> 00:06:50,800
other uh or you have different things

00:06:49,599 --> 00:06:52,400
going at different times so you have a

00:06:50,800 --> 00:06:54,160
long running report in one

00:06:52,400 --> 00:06:55,440
and some quick and dirty stuff running

00:06:54,160 --> 00:06:59,680
another uh

00:06:55,440 --> 00:06:59,680
all from one instance of the mysql shell

00:07:00,319 --> 00:07:05,120
now default when you log in you fire

00:07:03,360 --> 00:07:07,440
mysql sh

00:07:05,120 --> 00:07:08,319
and the underlined here in red we have

00:07:07,440 --> 00:07:12,880
backslash

00:07:08,319 --> 00:07:15,840
c and then the account and the host name

00:07:12,880 --> 00:07:17,599
and in this example here the password

00:07:15,840 --> 00:07:21,199
has been cached

00:07:17,599 --> 00:07:23,919
and saved and it creates a session to

00:07:21,199 --> 00:07:26,319
rooted localhost and in this case it's

00:07:23,919 --> 00:07:28,319
going to run on the new x protocol

00:07:26,319 --> 00:07:31,520
and it's ready to go and you see down

00:07:28,319 --> 00:07:32,960
here that works on the bottom line here

00:07:31,520 --> 00:07:36,560
that my skill is running on the local

00:07:32,960 --> 00:07:38,639
host listing on port 33060

00:07:36,560 --> 00:07:40,720
ssl is enabled and we're in javascript

00:07:38,639 --> 00:07:44,400
mode

00:07:40,720 --> 00:07:46,879
well if you want multiple sessions

00:07:44,400 --> 00:07:49,120
what you can do is what you see here you

00:07:46,879 --> 00:07:51,199
fire mysql shell

00:07:49,120 --> 00:07:53,919
you set up a variable variable session

00:07:51,199 --> 00:07:57,680
one equals mysql dot get

00:07:53,919 --> 00:08:00,479
classic session that's the port 3306

00:07:57,680 --> 00:08:01,919
give the parameters to log in and

00:08:00,479 --> 00:08:03,520
suddenly we have session one

00:08:01,919 --> 00:08:05,360
if i want to set up multiple sessions i

00:08:03,520 --> 00:08:06,319
can have bar session two of our session

00:08:05,360 --> 00:08:10,840
x

00:08:06,319 --> 00:08:13,680
and uh address them by the session.one

00:08:10,840 --> 00:08:15,199
object

00:08:13,680 --> 00:08:17,120
by the way if you want encryption as i

00:08:15,199 --> 00:08:18,319
said earlier it's turned on by default

00:08:17,120 --> 00:08:20,960
let's say you're an environment where

00:08:18,319 --> 00:08:23,440
you don't have it turned on by default

00:08:20,960 --> 00:08:26,319
uh you can still enable it all you have

00:08:23,440 --> 00:08:29,599
to do is when you create your session

00:08:26,319 --> 00:08:31,919
specify the mysql x protocol and you

00:08:29,599 --> 00:08:34,719
have all the parameters host

00:08:31,919 --> 00:08:35,760
root password and then the path to the

00:08:34,719 --> 00:08:38,479
various files

00:08:35,760 --> 00:08:38,479
for encryption

00:08:38,959 --> 00:08:43,919
compression is very much the same way uh

00:08:41,039 --> 00:08:45,920
you can you can say that it's required

00:08:43,919 --> 00:08:49,120
uh what algorithms you want to use and

00:08:45,920 --> 00:08:49,120
the level of compression

00:08:50,240 --> 00:08:54,160
by the way as mentioned earlier uh the

00:08:52,320 --> 00:08:56,800
first time you log in

00:08:54,160 --> 00:08:57,680
using the mysql shell it will ask you

00:08:56,800 --> 00:09:00,080
for that account

00:08:57,680 --> 00:09:01,519
if you want to save the password it

00:09:00,080 --> 00:09:04,800
gives you the options of yes

00:09:01,519 --> 00:09:05,440
no never and the default is no this is

00:09:04,800 --> 00:09:09,680
stored

00:09:05,440 --> 00:09:12,399
in a hash not human readable

00:09:09,680 --> 00:09:15,519
and becomes very handy for those who

00:09:12,399 --> 00:09:17,279
don't like typing passwords

00:09:15,519 --> 00:09:19,040
also you use the mysql shell from the

00:09:17,279 --> 00:09:21,519
command line so if you have

00:09:19,040 --> 00:09:23,279
a javascript program that you want to

00:09:21,519 --> 00:09:25,279
feed in the mysql shell it has all the

00:09:23,279 --> 00:09:27,519
authentication

00:09:25,279 --> 00:09:29,440
parameters set in there all you have to

00:09:27,519 --> 00:09:32,560
do is type in mysql

00:09:29,440 --> 00:09:35,600
shell and use the

00:09:32,560 --> 00:09:39,200
less than sign from your javascript

00:09:35,600 --> 00:09:39,200
file and away it goes

00:09:40,320 --> 00:09:46,560
now by default your

00:09:43,839 --> 00:09:47,760
your your files that you're going to

00:09:46,560 --> 00:09:49,680
write for your

00:09:47,760 --> 00:09:50,959
the server if you don't if you want to

00:09:49,680 --> 00:09:53,440
share with other folks these

00:09:50,959 --> 00:09:54,399
are going to be star stored under user

00:09:53,440 --> 00:09:57,600
share

00:09:54,399 --> 00:09:59,680
mysql sh modules

00:09:57,600 --> 00:10:01,600
and you can have javascript and python

00:09:59,680 --> 00:10:04,959
modules in this example here a

00:10:01,600 --> 00:10:07,360
quick little one called dave.js

00:10:04,959 --> 00:10:08,720
has two little quick functions uh you

00:10:07,360 --> 00:10:11,279
can also

00:10:08,720 --> 00:10:12,240
change your path so if you have your

00:10:11,279 --> 00:10:14,800
something off your

00:10:12,240 --> 00:10:18,560
your root directory uh you can specify

00:10:14,800 --> 00:10:20,480
that there too

00:10:18,560 --> 00:10:23,040
by the way if you want to use the xdev

00:10:20,480 --> 00:10:24,640
api for using mysql as a nosql json

00:10:23,040 --> 00:10:26,399
document store

00:10:24,640 --> 00:10:28,560
uh this is an example written in

00:10:26,399 --> 00:10:29,839
javascript we create a variable called

00:10:28,560 --> 00:10:30,959
my session

00:10:29,839 --> 00:10:34,160
which says we're going to connect with

00:10:30,959 --> 00:10:38,160
the x protocol with the username

00:10:34,160 --> 00:10:39,440
password and machine name

00:10:38,160 --> 00:10:41,440
and then from there we're going to go

00:10:39,440 --> 00:10:43,040
out and get the schema now in the mysql

00:10:41,440 --> 00:10:44,880
world we use schema and database

00:10:43,040 --> 00:10:46,640
interchangeably

00:10:44,880 --> 00:10:48,160
that's just the way we're doing it and

00:10:46,640 --> 00:10:49,600
that's how we're gonna do it so we're

00:10:48,160 --> 00:10:50,640
saying for our session we're gonna go

00:10:49,600 --> 00:10:53,519
out get the world

00:10:50,640 --> 00:10:54,480
underscore x database or schema and in

00:10:53,519 --> 00:10:56,560
that database

00:10:54,480 --> 00:10:58,480
there's a document collection of json

00:10:56,560 --> 00:11:00,560
documents called country info

00:10:58,480 --> 00:11:02,480
we're gonna go out there and find

00:11:00,560 --> 00:11:05,200
everything in that collection

00:11:02,480 --> 00:11:06,560
then we're going to execute that and

00:11:05,200 --> 00:11:09,040
from there we do

00:11:06,560 --> 00:11:09,760
a fetch one to read all the records now

00:11:09,040 --> 00:11:12,480
if you notice

00:11:09,760 --> 00:11:14,640
this is going out and pulling back data

00:11:12,480 --> 00:11:17,519
not using sql

00:11:14,640 --> 00:11:18,320
very javascript like very modern design

00:11:17,519 --> 00:11:20,800
like

00:11:18,320 --> 00:11:23,519
you're not finding sql syntax so if you

00:11:20,800 --> 00:11:27,120
love databases but hate sql syntax

00:11:23,519 --> 00:11:30,399
this is another option for you

00:11:27,120 --> 00:11:32,480
by the way when you run this the script

00:11:30,399 --> 00:11:34,720
and you get the proper information it

00:11:32,480 --> 00:11:36,399
goes out i believe it returns 237

00:11:34,720 --> 00:11:39,519
different documents with the very

00:11:36,399 --> 00:11:41,600
various information now the rolex

00:11:39,519 --> 00:11:42,920
schema and the world schema are two

00:11:41,600 --> 00:11:44,800
schemas that we have out on the

00:11:42,920 --> 00:11:47,279
mysql.com website

00:11:44,800 --> 00:11:48,880
that we use for documentation and

00:11:47,279 --> 00:11:51,040
illustrative purposes such as

00:11:48,880 --> 00:11:52,560
documentation examples

00:11:51,040 --> 00:11:56,079
and that's free to download if you want

00:11:52,560 --> 00:11:58,000
to play with it

00:11:56,079 --> 00:11:59,680
also if you're in javascript mode and

00:11:58,000 --> 00:12:01,920
you decide that you just have to run an

00:11:59,680 --> 00:12:04,000
sql query but i want to change modes

00:12:01,920 --> 00:12:05,120
all i have to do is say okay for this

00:12:04,000 --> 00:12:07,760
session

00:12:05,120 --> 00:12:09,120
the current session i'm on i want to run

00:12:07,760 --> 00:12:12,320
an sql command

00:12:09,120 --> 00:12:14,320
break cleverly called run sql function

00:12:12,320 --> 00:12:15,680
and then just plug in your structured

00:12:14,320 --> 00:12:17,839
query language

00:12:15,680 --> 00:12:19,920
and in this example we're going out to

00:12:17,839 --> 00:12:21,519
the mysql schema

00:12:19,920 --> 00:12:22,959
and getting the user table and getting a

00:12:21,519 --> 00:12:25,920
list of users and

00:12:22,959 --> 00:12:28,560
their machines they're allowed from very

00:12:25,920 --> 00:12:28,560
very happy

00:12:30,160 --> 00:12:33,680
so you don't like this normal output you

00:12:32,560 --> 00:12:36,079
can get

00:12:33,680 --> 00:12:38,320
as an option from the horizontal output

00:12:36,079 --> 00:12:40,880
either json or vertical

00:12:38,320 --> 00:12:42,079
all i have to do is shell.options.set

00:12:40,880 --> 00:12:44,800
result format

00:12:42,079 --> 00:12:45,519
json and then when you run the same

00:12:44,800 --> 00:12:47,600
command

00:12:45,519 --> 00:12:48,639
this time we just limited it to you get

00:12:47,600 --> 00:12:52,480
the same information in

00:12:48,639 --> 00:12:55,120
json format now if you want to

00:12:52,480 --> 00:12:56,320
make all your output forever and ever

00:12:55,120 --> 00:12:58,560
json

00:12:56,320 --> 00:12:59,839
you change this set to a set capital p

00:12:58,560 --> 00:13:01,360
persist

00:12:59,839 --> 00:13:03,519
and that would save that out there for

00:13:01,360 --> 00:13:03,519
you

00:13:04,240 --> 00:13:07,920
by the way as i mentioned you don't have

00:13:05,680 --> 00:13:10,880
to use structured query language

00:13:07,920 --> 00:13:11,519
this is an example where say we don't

00:13:10,880 --> 00:13:13,040
know

00:13:11,519 --> 00:13:14,560
what our data is going to look like we

00:13:13,040 --> 00:13:16,320
want to use a database but we don't have

00:13:14,560 --> 00:13:18,480
time to set up the structures

00:13:16,320 --> 00:13:20,000
the relationships all the tables the

00:13:18,480 --> 00:13:22,720
indexes and all that

00:13:20,000 --> 00:13:24,320
what we can do is create a schema in

00:13:22,720 --> 00:13:25,920
this case it's called demo

00:13:24,320 --> 00:13:27,519
and then within that schema we'll create

00:13:25,920 --> 00:13:28,959
a document collection

00:13:27,519 --> 00:13:30,800
in this case we're going to cleverly

00:13:28,959 --> 00:13:33,120
call it openjs

00:13:30,800 --> 00:13:34,000
like the show you're talking at and then

00:13:33,120 --> 00:13:35,519
we say db

00:13:34,000 --> 00:13:37,519
and db is an object that points to the

00:13:35,519 --> 00:13:39,199
current schema

00:13:37,519 --> 00:13:40,720
openjs the name of the collection we

00:13:39,199 --> 00:13:43,600
just created add

00:13:40,720 --> 00:13:45,600
and then we put in a valid json document

00:13:43,600 --> 00:13:46,160
yes it has to be valid json or the

00:13:45,600 --> 00:13:49,279
server

00:13:46,160 --> 00:13:50,560
will reject it does some

00:13:49,279 --> 00:13:52,639
checking there to make sure you're doing

00:13:50,560 --> 00:13:53,440
the right thing and once the data is

00:13:52,639 --> 00:13:57,600
there

00:13:53,440 --> 00:13:59,279
uh we can do db open js.find

00:13:57,600 --> 00:14:01,360
this tells us all the records i'm going

00:13:59,279 --> 00:14:03,760
to skip over the underscore id

00:14:01,360 --> 00:14:05,120
for this talk it's had some important

00:14:03,760 --> 00:14:08,639
information in there

00:14:05,120 --> 00:14:11,920
but it's primarily to be a primary key

00:14:08,639 --> 00:14:12,800
in the database as you know our primary

00:14:11,920 --> 00:14:14,959
storage engine is

00:14:12,800 --> 00:14:16,959
something called nodb which would love

00:14:14,959 --> 00:14:18,160
for you to have primary keys on

00:14:16,959 --> 00:14:20,560
everything

00:14:18,160 --> 00:14:21,839
and it sorts everything into a b tree

00:14:20,560 --> 00:14:23,600
and this is the way we do it

00:14:21,839 --> 00:14:24,959
but you can ignore it for now by the way

00:14:23,600 --> 00:14:25,839
if you want to specify your own value

00:14:24,959 --> 00:14:31,199
for underscore id

00:14:25,839 --> 00:14:35,040
you can do that too

00:14:31,199 --> 00:14:35,920
now uh i think i showed this a little

00:14:35,040 --> 00:14:38,639
bit earlier

00:14:35,920 --> 00:14:39,360
um you can have your own script so if

00:14:38,639 --> 00:14:41,519
you have a

00:14:39,360 --> 00:14:42,720
library that you like or a script that

00:14:41,519 --> 00:14:44,800
you've written

00:14:42,720 --> 00:14:46,240
that does certain things for you with

00:14:44,800 --> 00:14:49,440
your data

00:14:46,240 --> 00:14:52,800
very easy to include it and

00:14:49,440 --> 00:14:54,720
in this case we're logged in and

00:14:52,800 --> 00:14:58,160
create a variable called dave that

00:14:54,720 --> 00:15:01,440
requires the dave.js file

00:14:58,160 --> 00:15:02,639
and if i just type d-a-v-e period and

00:15:01,440 --> 00:15:04,639
then hit tab

00:15:02,639 --> 00:15:06,560
will show me my options are hello and

00:15:04,639 --> 00:15:10,880
mysql as you can see

00:15:06,560 --> 00:15:13,040
hello and mysql and if i type dave.hello

00:15:10,880 --> 00:15:14,000
it prints out hello there like you'd

00:15:13,040 --> 00:15:16,959
expect

00:15:14,000 --> 00:15:18,959
and the same thing for dave.mysql so

00:15:16,959 --> 00:15:22,399
it's very easy that if you have

00:15:18,959 --> 00:15:24,639
libraries for statistics analytics

00:15:22,399 --> 00:15:26,240
machine learning or whatever very easy

00:15:24,639 --> 00:15:30,240
to include them with your mysql

00:15:26,240 --> 00:15:32,240
shell now the neat thing

00:15:30,240 --> 00:15:33,600
is the shell is extensible you can

00:15:32,240 --> 00:15:36,000
define

00:15:33,600 --> 00:15:37,600
uh what you want to do besides the base

00:15:36,000 --> 00:15:40,560
functionality of the shell

00:15:37,600 --> 00:15:42,800
and write it yourself in either

00:15:40,560 --> 00:15:44,160
javascript or python

00:15:42,800 --> 00:15:47,199
and if you want to share this with other

00:15:44,160 --> 00:15:50,959
people you can you don't have to

00:15:47,199 --> 00:15:53,040
and this is a very precise way of

00:15:50,959 --> 00:15:54,800
tuning the shell to exactly what you

00:15:53,040 --> 00:15:59,600
need

00:15:54,800 --> 00:15:59,600
now you can persist these reports and

00:15:59,759 --> 00:16:03,759
objects in what we call a plug-in that

00:16:02,320 --> 00:16:07,279
are loaded automatically

00:16:03,759 --> 00:16:09,519
when your shell starts

00:16:07,279 --> 00:16:11,040
now to register a report it's very

00:16:09,519 --> 00:16:14,160
simple

00:16:11,040 --> 00:16:17,440
you you write your code

00:16:14,160 --> 00:16:20,240
in either javascript or python

00:16:17,440 --> 00:16:22,320
and the reporting facility handles

00:16:20,240 --> 00:16:24,560
built-in reports very easily

00:16:22,320 --> 00:16:27,120
uh it's using the same api for both

00:16:24,560 --> 00:16:27,120
languages

00:16:27,199 --> 00:16:30,720
there's column a little differently i'll

00:16:28,399 --> 00:16:32,959
put that a little bit later

00:16:30,720 --> 00:16:34,079
now reports can specify a list of report

00:16:32,959 --> 00:16:36,959
specific options

00:16:34,079 --> 00:16:37,920
um so like you want wanna minus v for

00:16:36,959 --> 00:16:41,440
vervose

00:16:37,920 --> 00:16:44,240
or uh something similar that

00:16:41,440 --> 00:16:46,240
uh you can define all those you want and

00:16:44,240 --> 00:16:49,680
have that work

00:16:46,240 --> 00:16:50,079
and you can also have reports that don't

00:16:49,680 --> 00:16:54,160
need

00:16:50,079 --> 00:16:57,680
any uh qualifiers on the command line

00:16:54,160 --> 00:17:00,639
and you can also put in a

00:16:57,680 --> 00:17:02,320
help statement in there uh the new mysql

00:17:00,639 --> 00:17:04,559
shell one of those great features

00:17:02,320 --> 00:17:05,360
besides command completion is the help

00:17:04,559 --> 00:17:07,120
facility

00:17:05,360 --> 00:17:09,199
it really lets you drill down and if you

00:17:07,120 --> 00:17:11,120
forget syntax on something

00:17:09,199 --> 00:17:13,360
uh you can hit tab and it will prompt

00:17:11,120 --> 00:17:15,839
you for the the closest available

00:17:13,360 --> 00:17:15,839
options

00:17:16,160 --> 00:17:19,839
now registering shell reports is very

00:17:18,559 --> 00:17:21,839
easy uh you'll notice

00:17:19,839 --> 00:17:24,880
the difference is that when you register

00:17:21,839 --> 00:17:28,319
a report for javascript it's register

00:17:24,880 --> 00:17:30,640
uppercase r report now in python

00:17:28,319 --> 00:17:32,240
it's all lowercase with a underscore

00:17:30,640 --> 00:17:34,080
between them

00:17:32,240 --> 00:17:35,679
so if you write something in python that

00:17:34,080 --> 00:17:38,400
you want to call from

00:17:35,679 --> 00:17:41,120
from javascript you'll probably follow

00:17:38,400 --> 00:17:41,120
the same rules

00:17:42,960 --> 00:17:49,200
so here's an example in python

00:17:46,480 --> 00:17:50,400
where we're defining a function called

00:17:49,200 --> 00:17:52,559
session

00:17:50,400 --> 00:17:54,400
and this session we go out to this this

00:17:52,559 --> 00:17:57,679
is schema which is our schema

00:17:54,400 --> 00:17:59,760
that has metadata about your server and

00:17:57,679 --> 00:18:02,320
we're going out there and

00:17:59,760 --> 00:18:03,360
from a table instead of a json document

00:18:02,320 --> 00:18:05,039
collection

00:18:03,360 --> 00:18:06,720
we're going out and getting these

00:18:05,039 --> 00:18:10,080
columns

00:18:06,720 --> 00:18:13,280
and doing some processing with them

00:18:10,080 --> 00:18:16,320
and then we return a report

00:18:13,280 --> 00:18:18,720
now we have

00:18:16,320 --> 00:18:20,080
this function here shell.register report

00:18:18,720 --> 00:18:22,799
we say okay we're going to

00:18:20,080 --> 00:18:24,720
have a report called sessions it's going

00:18:22,799 --> 00:18:26,480
to output a list

00:18:24,720 --> 00:18:28,000
and this is the pointer to the function

00:18:26,480 --> 00:18:30,480
up here and

00:18:28,000 --> 00:18:34,000
this is the help information out here

00:18:30,480 --> 00:18:34,000
with the brief and the details

00:18:34,559 --> 00:18:37,919
and when you run that it's rather

00:18:37,120 --> 00:18:40,240
exciting

00:18:37,919 --> 00:18:42,720
you can use backslash watch sessions

00:18:40,240 --> 00:18:44,960
which is the name of our function here

00:18:42,720 --> 00:18:46,080
in this case we're running it every two

00:18:44,960 --> 00:18:50,799
seconds

00:18:46,080 --> 00:18:52,880
so if you want to watch something run

00:18:50,799 --> 00:18:56,000
some command that you have it's very

00:18:52,880 --> 00:18:58,799
handy to do that

00:18:56,000 --> 00:19:02,160
now there are some built-in functions

00:18:58,799 --> 00:19:04,480
already within mysql shell

00:19:02,160 --> 00:19:05,760
there's watch query this is an interval

00:19:04,480 --> 00:19:07,520
where we have section

00:19:05,760 --> 00:19:09,360
second where we're going to show global

00:19:07,520 --> 00:19:12,640
status like

00:19:09,360 --> 00:19:15,760
wild card other thing you do

00:19:12,640 --> 00:19:16,480
is show threads which will go out there

00:19:15,760 --> 00:19:19,520
and check

00:19:16,480 --> 00:19:21,520
what's going on in your system

00:19:19,520 --> 00:19:23,120
and this is the example slightly

00:19:21,520 --> 00:19:27,360
different this is for a

00:19:23,120 --> 00:19:30,799
particular id this is in the python mode

00:19:27,360 --> 00:19:30,799
not any difference right there

00:19:31,760 --> 00:19:35,360
now the mysql shell comes with a lot of

00:19:34,160 --> 00:19:36,480
utilities built in

00:19:35,360 --> 00:19:39,039
and believe it or not you can actually

00:19:36,480 --> 00:19:40,480
extend these if you want to

00:19:39,039 --> 00:19:43,039
uh the first one you'll probably run

00:19:40,480 --> 00:19:45,919
into if you're running mysql57

00:19:43,039 --> 00:19:47,120
is usual check for server upgrade this

00:19:45,919 --> 00:19:49,840
will go out there

00:19:47,120 --> 00:19:51,520
and take a look at your 5.7 instance and

00:19:49,840 --> 00:19:53,440
see if there's anything

00:19:51,520 --> 00:19:54,960
that you need to change before you

00:19:53,440 --> 00:19:58,320
upgrade to version 8.

00:19:54,960 --> 00:19:59,760
very very handy highly recommended

00:19:58,320 --> 00:20:01,520
if you're doing things like forcing the

00:19:59,760 --> 00:20:02,799
use of the old temporary storage engine

00:20:01,520 --> 00:20:04,880
we have a new temporary engine that's

00:20:02,799 --> 00:20:07,360
much much much faster

00:20:04,880 --> 00:20:08,559
if you're using something that wasn't a

00:20:07,360 --> 00:20:11,360
reserved word but

00:20:08,559 --> 00:20:12,320
is now reserved word it's there i will

00:20:11,360 --> 00:20:14,720
worry about

00:20:12,320 --> 00:20:17,280
uh problems with character sets and

00:20:14,720 --> 00:20:19,679
collations because in mysql 8 by default

00:20:17,280 --> 00:20:20,720
everything is utf-8 and b4 you might be

00:20:19,679 --> 00:20:22,559
using something

00:20:20,720 --> 00:20:24,480
else there's a whole bunch of other

00:20:22,559 --> 00:20:24,799
little checks out there that are run for

00:20:24,480 --> 00:20:29,840
you

00:20:24,799 --> 00:20:32,720
very very handy another nice

00:20:29,840 --> 00:20:33,280
utility we have out there allows you to

00:20:32,720 --> 00:20:36,960
import

00:20:33,280 --> 00:20:39,679
json documents is import json

00:20:36,960 --> 00:20:41,039
and uh in this case you tell it where

00:20:39,679 --> 00:20:42,799
the file is

00:20:41,039 --> 00:20:44,080
and then the schema you want to put it

00:20:42,799 --> 00:20:45,760
in and what document

00:20:44,080 --> 00:20:47,280
collection you want to drop in that

00:20:45,760 --> 00:20:50,159
information and

00:20:47,280 --> 00:20:51,919
it will pull in all that data for you by

00:20:50,159 --> 00:20:54,159
the way it knows how to handle bsons if

00:20:51,919 --> 00:20:56,960
you're coming from a background

00:20:54,159 --> 00:20:57,360
uh you can either ignore or inculcate

00:20:56,960 --> 00:21:00,880
that

00:20:57,360 --> 00:21:01,840
into your your data also there's a very

00:21:00,880 --> 00:21:04,880
nice

00:21:01,840 --> 00:21:06,960
import table function and

00:21:04,880 --> 00:21:08,240
called import table creatively enough

00:21:06,960 --> 00:21:10,159
and once again you tell it where the

00:21:08,240 --> 00:21:11,919
file is

00:21:10,159 --> 00:21:14,240
the schema you want to put that stuff in

00:21:11,919 --> 00:21:15,039
there the table that you're putting in

00:21:14,240 --> 00:21:17,360
there

00:21:15,039 --> 00:21:18,559
now this is not important json is

00:21:17,360 --> 00:21:21,440
actually importing a

00:21:18,559 --> 00:21:21,919
table uh the dialect there are actually

00:21:21,440 --> 00:21:25,679
several

00:21:21,919 --> 00:21:28,640
dialects of comma separated variables uh

00:21:25,679 --> 00:21:30,240
dos is one you can skip over the first

00:21:28,640 --> 00:21:32,320
row if that's all headers

00:21:30,240 --> 00:21:33,679
and i'll actually draw you a progress

00:21:32,320 --> 00:21:36,559
chart so progress

00:21:33,679 --> 00:21:37,760
so if you want to run something and keep

00:21:36,559 --> 00:21:39,039
an eye on it it's a load because it's a

00:21:37,760 --> 00:21:43,120
huge file you can actually get that

00:21:39,039 --> 00:21:43,120
little bar that draws across your screen

00:21:43,600 --> 00:21:47,440
we also have some other interesting

00:21:46,000 --> 00:21:49,200
utilities

00:21:47,440 --> 00:21:51,200
first i want to mention is the parallel

00:21:49,200 --> 00:21:53,280
table import utility

00:21:51,200 --> 00:21:54,799
uh this works in parallel i believe up

00:21:53,280 --> 00:21:56,720
to eight threads

00:21:54,799 --> 00:21:58,000
uh this example once again we give the

00:21:56,720 --> 00:22:00,000
name of the file

00:21:58,000 --> 00:22:01,840
the schema or database we're putting in

00:22:00,000 --> 00:22:05,120
there the name of the table

00:22:01,840 --> 00:22:08,320
the dialect and show progress

00:22:05,120 --> 00:22:11,600
and what's fun to use that with

00:22:08,320 --> 00:22:12,240
is the export table utility so this will

00:22:11,600 --> 00:22:14,240
export

00:22:12,240 --> 00:22:15,760
in parallel and then you can read it in

00:22:14,240 --> 00:22:18,640
in parallel

00:22:15,760 --> 00:22:19,440
things like mysql dump are single

00:22:18,640 --> 00:22:21,360
threaded

00:22:19,440 --> 00:22:22,799
so if you've been doing backups with

00:22:21,360 --> 00:22:25,280
those

00:22:22,799 --> 00:22:25,840
you're going to love this now even

00:22:25,280 --> 00:22:28,799
better

00:22:25,840 --> 00:22:30,640
than those and these are less than six

00:22:28,799 --> 00:22:32,960
months old i believe

00:22:30,640 --> 00:22:34,320
are the next couple utilities i'm going

00:22:32,960 --> 00:22:37,440
to

00:22:34,320 --> 00:22:40,960
to show you here dump instance

00:22:37,440 --> 00:22:43,360
which takes the entire server

00:22:40,960 --> 00:22:44,559
that you have there and we'll write it

00:22:43,360 --> 00:22:46,080
out there

00:22:44,559 --> 00:22:48,559
now in this example we're just doing a

00:22:46,080 --> 00:22:51,520
dry run for timings to see how it works

00:22:48,559 --> 00:22:52,559
and if you're on the oracle cloud

00:22:51,520 --> 00:22:54,240
there's some id

00:22:52,559 --> 00:22:55,919
information stuff that will do for you

00:22:54,240 --> 00:22:58,880
that's very handy

00:22:55,919 --> 00:22:59,520
now here's an example we're going to use

00:22:58,880 --> 00:23:02,880
the dump

00:22:59,520 --> 00:23:04,720
tables utility

00:23:02,880 --> 00:23:06,640
in this case we're going out to the

00:23:04,720 --> 00:23:07,919
schema called hr

00:23:06,640 --> 00:23:10,720
and in that we're going to take the

00:23:07,919 --> 00:23:11,760
tables employees and salary

00:23:10,720 --> 00:23:13,760
and we're going to throw that in an

00:23:11,760 --> 00:23:15,280
object called emp

00:23:13,760 --> 00:23:17,280
now if you don't want if you want to do

00:23:15,280 --> 00:23:19,679
better than tables

00:23:17,280 --> 00:23:20,320
there's dump schemas where you can

00:23:19,679 --> 00:23:22,480
actually

00:23:20,320 --> 00:23:23,440
name the various schemas that you're

00:23:22,480 --> 00:23:25,760
going to

00:23:23,440 --> 00:23:27,280
put out there so you have instance for

00:23:25,760 --> 00:23:29,039
everything schemas for specific

00:23:27,280 --> 00:23:30,960
databases

00:23:29,039 --> 00:23:32,480
in this example we're going to have one

00:23:30,960 --> 00:23:35,679
called world

00:23:32,480 --> 00:23:36,320
and if you're using the mysql cloud

00:23:35,679 --> 00:23:38,960
again there's

00:23:36,320 --> 00:23:40,159
uh buckets that you can set up and

00:23:38,960 --> 00:23:42,000
complete campaign

00:23:40,159 --> 00:23:43,200
building modes compatibility modes that

00:23:42,000 --> 00:23:46,000
you can put out there

00:23:43,200 --> 00:23:48,080
and also once you do a dump from either

00:23:46,000 --> 00:23:51,440
dump instance or done schema

00:23:48,080 --> 00:23:52,640
you can use load dump and what you do is

00:23:51,440 --> 00:23:54,640
you tell it where the data has been

00:23:52,640 --> 00:23:56,400
dumped to loads it back in there

00:23:54,640 --> 00:23:58,320
very very fast if you've been doing your

00:23:56,400 --> 00:24:01,279
backups with mysql dump you might want

00:23:58,320 --> 00:24:01,279
to take a look at this

00:24:01,600 --> 00:24:05,039
so where do you go if you want to learn

00:24:04,400 --> 00:24:08,240
more

00:24:05,039 --> 00:24:08,720
about extending the mysql shell well the

00:24:08,240 --> 00:24:11,840
first thing

00:24:08,720 --> 00:24:16,400
i recommend is the mysql shell

00:24:11,840 --> 00:24:19,120
manual itself this is grown from

00:24:16,400 --> 00:24:20,799
a fairly simple booklet to a commanding

00:24:19,120 --> 00:24:23,520
tome all of its own

00:24:20,799 --> 00:24:25,679
it has a lot of great examples and

00:24:23,520 --> 00:24:27,039
explains things in great detail very

00:24:25,679 --> 00:24:29,520
easily

00:24:27,039 --> 00:24:30,159
well written easy to read now if you're

00:24:29,520 --> 00:24:33,840
looking for

00:24:30,159 --> 00:24:37,720
a quick how to i write a plugin

00:24:33,840 --> 00:24:40,559
uh this second thing from

00:24:37,720 --> 00:24:41,840
developpaper.com i thought was very well

00:24:40,559 --> 00:24:44,159
now if you're looking for example

00:24:41,840 --> 00:24:48,320
plugins uh my counterpart

00:24:44,159 --> 00:24:50,400
from mia les fred

00:24:48,320 --> 00:24:53,039
has a whole bunch of wonderful examples

00:24:50,400 --> 00:24:55,120
out there they're mostly in python

00:24:53,039 --> 00:24:56,400
but they'll give you the idea of what's

00:24:55,120 --> 00:25:00,240
going on there

00:24:56,400 --> 00:25:02,640
and if you go out to slideshare.net

00:25:00,240 --> 00:25:04,159
uh this is his presentation and from

00:25:02,640 --> 00:25:07,440
there he'll have a link

00:25:04,159 --> 00:25:10,000
to his github account

00:25:07,440 --> 00:25:11,440
and from there you can actually download

00:25:10,000 --> 00:25:14,320
i think it's like a dozen

00:25:11,440 --> 00:25:16,559
or dozen and a half wonderful examples

00:25:14,320 --> 00:25:20,480
of how to

00:25:16,559 --> 00:25:22,240
do various things of various complexity

00:25:20,480 --> 00:25:23,039
from fairly simple to very very very

00:25:22,240 --> 00:25:26,400
complex

00:25:23,039 --> 00:25:28,799
with the mysql shell and fred believes

00:25:26,400 --> 00:25:30,880
that the best tool for a dba

00:25:28,799 --> 00:25:32,320
to administer is the mysql shell i

00:25:30,880 --> 00:25:33,360
haven't gone into some of the tools on

00:25:32,320 --> 00:25:36,400
that for

00:25:33,360 --> 00:25:37,600
setting up clusters and cloning servers

00:25:36,400 --> 00:25:41,120
and all that but it

00:25:37,600 --> 00:25:43,360
has a lot of other uses and with that

00:25:41,120 --> 00:25:45,440
uh let me earn my pay by saying if you

00:25:43,360 --> 00:25:46,000
want to test drive the mysql database

00:25:45,440 --> 00:25:48,640
service

00:25:46,000 --> 00:25:49,440
which we call mds for free you can get

00:25:48,640 --> 00:25:52,400
00:25:49,440 --> 00:25:54,320
in credits and if you stay on the lower

00:25:52,400 --> 00:25:55,520
end platforms that will last you quite a

00:25:54,320 --> 00:25:57,120
long time

00:25:55,520 --> 00:25:59,520
this is the full enterprise version of

00:25:57,120 --> 00:26:02,240
mysql by the way

00:25:59,520 --> 00:26:04,320
very very good deal there i encourage

00:26:02,240 --> 00:26:06,559
you to try that

00:26:04,320 --> 00:26:08,480
also please follow us on social media

00:26:06,559 --> 00:26:11,760
we're at mysql.com

00:26:08,480 --> 00:26:13,520
on twitter mysql facebook or mysql

00:26:11,760 --> 00:26:15,200
linkedin.com we have over twenty

00:26:13,520 --> 00:26:17,840
thousand people as part of our

00:26:15,200 --> 00:26:19,440
our mysql group and of course mysql

00:26:17,840 --> 00:26:21,120
community dot slash you're now part of

00:26:19,440 --> 00:26:23,039
the moscow community please join us

00:26:21,120 --> 00:26:25,679
there

00:26:23,039 --> 00:26:27,520
and by the way if you are in a startup

00:26:25,679 --> 00:26:30,960
orf would like to help you out

00:26:27,520 --> 00:26:33,440
they offer or we offer great discounts

00:26:30,960 --> 00:26:34,799
uh global exposure marketing help

00:26:33,440 --> 00:26:38,000
promotions

00:26:34,799 --> 00:26:41,039
and access to oracle's over 400 000

00:26:38,000 --> 00:26:42,799
customers if you are a startup

00:26:41,039 --> 00:26:44,960
i highly recommend recommend going to

00:26:42,799 --> 00:26:46,480
oracle.com startup and signing up i am

00:26:44,960 --> 00:26:47,760
one of the startup ambassadors

00:26:46,480 --> 00:26:50,159
if you have more questions about that

00:26:47,760 --> 00:26:51,919
please contact me

00:26:50,159 --> 00:26:53,360
by the way if you're interested in the

00:26:51,919 --> 00:26:56,480
json data type

00:26:53,360 --> 00:26:58,720
and mysql i've written a book now second

00:26:56,480 --> 00:27:00,880
editions called mysql and json a

00:26:58,720 --> 00:27:04,000
practical programming guide

00:27:00,880 --> 00:27:07,039
the manual is wonderful for the

00:27:04,000 --> 00:27:09,600
json functions and json data type

00:27:07,039 --> 00:27:11,520
i just wanted something something wanted

00:27:09,600 --> 00:27:13,600
to write something more cohesive

00:27:11,520 --> 00:27:14,799
and easier to follow uh reference

00:27:13,600 --> 00:27:16,400
manuals are for

00:27:14,799 --> 00:27:18,640
reference they're not for learning and

00:27:16,400 --> 00:27:22,159
this is a book designed to teach you

00:27:18,640 --> 00:27:25,360
how to exploit the json data type

00:27:22,159 --> 00:27:28,080
and the surrounding the facilities that

00:27:25,360 --> 00:27:30,240
mysql gives you with the mysql server

00:27:28,080 --> 00:27:32,320
to your advantage as quickly as easy as

00:27:30,240 --> 00:27:35,600
possible

00:27:32,320 --> 00:27:37,360
and with that uh it's on the q a

00:27:35,600 --> 00:27:38,720
hopefully uh during this presentation

00:27:37,360 --> 00:27:40,720
which is pre-recorded i've been

00:27:38,720 --> 00:27:41,679
answering your questions but if you have

00:27:40,720 --> 00:27:44,640
been waiting

00:27:41,679 --> 00:27:45,679
to answer ask me a question this is your

00:27:44,640 --> 00:27:47,520
time

00:27:45,679 --> 00:27:50,000
and once again let's go out to

00:27:47,520 --> 00:27:53,200
slideshare dave stokes

00:27:50,000 --> 00:27:56,640
you will find the link to these slides

00:27:53,200 --> 00:27:59,760
look for openjs 2021 mysql shell

00:27:56,640 --> 00:28:01,760
and you should write to it and

00:27:59,760 --> 00:28:03,120
please ask me any questions you have now

00:28:01,760 --> 00:28:05,760
if you're shy

00:28:03,120 --> 00:28:07,279
there's my email and if you're semi shy

00:28:05,760 --> 00:28:09,120
there's my twitter handle

00:28:07,279 --> 00:28:10,399
and with that i would like to thank you

00:28:09,120 --> 00:28:12,240
for

00:28:10,399 --> 00:28:17,840
joining me today and thank you for

00:28:12,240 --> 00:28:17,840

YouTube URL: https://www.youtube.com/watch?v=T3ygHsTJICM


