Title: Crafting Bespoke PWA Experiences with Angular - Mark Thompson, Google
Publication date: 2021-05-31
Playlist: OpenJS World 2021 - Development
Description: 
	Crafting Bespoke PWA Experiences with Angular - Mark Thompson, Google

Progressive Web Applications (PWA) help teams to deliver on the promise of multi-modal, code re-suing solutions for web apps. This is an important moment in time as their usefulness is becoming more visible and the technology as a solution more viable. Angular has first class support PWAs allowing teams to create bespoke progressive web applications experiences that delight users. In our time together, weâ€™ll explore some of the best techniques to make your Angular web app into a dynamic PWA that delivers constant value to your users across platforms.

Join the speaker for live Q&A on Slack, channel - #openjs_world-development
Thursday, June 3 from 06:00 - 06:20 PDT / 15:00 - 15:20 CEST
Thursday, June 3 from 06:20 - 06:40 PDT /  15:20 - 15:40 CEST
Captions: 
	00:00:00,080 --> 00:00:03,840
hi everyone my name is mark thompson i'm

00:00:02,000 --> 00:00:05,279
a developer relations engineer on the

00:00:03,840 --> 00:00:08,400
angular team at google

00:00:05,279 --> 00:00:09,200
and welcome to my talk lately i've been

00:00:08,400 --> 00:00:11,280
thinking about

00:00:09,200 --> 00:00:13,360
user experiences on the web and i've

00:00:11,280 --> 00:00:15,839
noticed that some of my favorite sites

00:00:13,360 --> 00:00:17,279
don't work when they're offline and they

00:00:15,839 --> 00:00:20,240
are slow to load

00:00:17,279 --> 00:00:20,880
and if i'm being honest i can't even be

00:00:20,240 --> 00:00:23,119
tasked

00:00:20,880 --> 00:00:24,720
to go to the app store and download

00:00:23,119 --> 00:00:26,800
another app

00:00:24,720 --> 00:00:28,400
there has to be a solution because this

00:00:26,800 --> 00:00:30,720
problem isn't new

00:00:28,400 --> 00:00:32,160
i want to talk to engineering but what

00:00:30,720 --> 00:00:35,280
should i do

00:00:32,160 --> 00:00:36,960
i mean i could tell you or

00:00:35,280 --> 00:00:38,559
so far we hang around we talking this

00:00:36,960 --> 00:00:39,920
and that and uh we're trying to keep our

00:00:38,559 --> 00:00:41,680
site engagement intact

00:00:39,920 --> 00:00:43,840
and uh no pushing mobile apps is there a

00:00:41,680 --> 00:00:46,719
better way have you tried using

00:00:43,840 --> 00:00:47,440
pwa we got web ask but are they

00:00:46,719 --> 00:00:49,280
progressive

00:00:47,440 --> 00:00:51,120
do they work offline are they load times

00:00:49,280 --> 00:00:52,320
impressive are they caching assets with

00:00:51,120 --> 00:00:53,920
service workers lurking

00:00:52,320 --> 00:00:56,399
when there's no connection does your app

00:00:53,920 --> 00:00:58,480
keep working it has to have a manifest

00:00:56,399 --> 00:00:59,840
and some images in the description of

00:00:58,480 --> 00:01:02,079
what this application is

00:00:59,840 --> 00:01:03,680
but building service workers can be hard

00:01:02,079 --> 00:01:04,720
painting life cycle and caching might

00:01:03,680 --> 00:01:06,080
leave you scarred

00:01:04,720 --> 00:01:08,000
that's why we're here together and

00:01:06,080 --> 00:01:10,560
that's no joke we're using angular to

00:01:08,000 --> 00:01:12,960
make our applications more bespoke

00:01:10,560 --> 00:01:14,400
i think the answer for them is to use a

00:01:12,960 --> 00:01:16,880
pwa

00:01:14,400 --> 00:01:19,360
but if you're going to do a pwa then

00:01:16,880 --> 00:01:22,080
really do a pwa

00:01:19,360 --> 00:01:22,880
you see a thoughtful intentional pwa

00:01:22,080 --> 00:01:25,680
experience

00:01:22,880 --> 00:01:27,600
gives you lots of benefits giving your

00:01:25,680 --> 00:01:29,920
users an installable application

00:01:27,600 --> 00:01:31,680
leads to less friction for your users

00:01:29,920 --> 00:01:33,200
because well they don't have to wait for

00:01:31,680 --> 00:01:35,680
an app to install or

00:01:33,200 --> 00:01:36,240
even leave your sites having a

00:01:35,680 --> 00:01:38,159
meaningful

00:01:36,240 --> 00:01:40,079
offline experience instead of your page

00:01:38,159 --> 00:01:40,880
just not loading means that users will

00:01:40,079 --> 00:01:43,280
get the most

00:01:40,880 --> 00:01:45,439
recently cached information or you can

00:01:43,280 --> 00:01:48,000
create something to let your users know

00:01:45,439 --> 00:01:50,000
you are offline but both of these are

00:01:48,000 --> 00:01:51,280
vastly better than a generic failure

00:01:50,000 --> 00:01:52,960
page

00:01:51,280 --> 00:01:54,960
you can improve your users experience

00:01:52,960 --> 00:01:56,159
with faster load times

00:01:54,960 --> 00:01:58,399
there are a variety of things that

00:01:56,159 --> 00:01:58,960
developers can do to create fast loading

00:01:58,399 --> 00:02:02,079
apps

00:01:58,960 --> 00:02:04,560
such as caching predictive prefetching

00:02:02,079 --> 00:02:06,640
and even some architectural patterns

00:02:04,560 --> 00:02:08,640
now all of these benefits and some

00:02:06,640 --> 00:02:09,520
others come with choices that are made

00:02:08,640 --> 00:02:12,959
when creating

00:02:09,520 --> 00:02:15,360
or converting an application to a pwa

00:02:12,959 --> 00:02:17,200
but there's a problem here this can be a

00:02:15,360 --> 00:02:18,879
challenging thing to get right

00:02:17,200 --> 00:02:22,239
at the core of many of the great things

00:02:18,879 --> 00:02:24,239
about pwas is service workers while

00:02:22,239 --> 00:02:27,360
service workers are the stars

00:02:24,239 --> 00:02:28,160
making service workers can be hard let's

00:02:27,360 --> 00:02:30,879
understand

00:02:28,160 --> 00:02:34,239
how this part fits and let's chat about

00:02:30,879 --> 00:02:34,239
service workers for a bit

00:02:34,840 --> 00:02:38,319
lego

00:02:36,400 --> 00:02:40,080
this little script in your app can't be

00:02:38,319 --> 00:02:41,200
beat if you take advantage you'll find

00:02:40,080 --> 00:02:43,280
that it's such a treat

00:02:41,200 --> 00:02:44,720
it's javascript so you know it's for me

00:02:43,280 --> 00:02:45,680
it could work offline and be your

00:02:44,720 --> 00:02:47,519
network proxy

00:02:45,680 --> 00:02:50,000
you can use it for tasks but don't get

00:02:47,519 --> 00:02:52,319
me wrong you cannot directly access

00:02:50,000 --> 00:02:53,040
the dom i can hear your brains stressing

00:02:52,319 --> 00:02:54,879
on this

00:02:53,040 --> 00:02:56,959
you communicate with the api for

00:02:54,879 --> 00:02:59,200
messages need to intercept the request

00:02:56,959 --> 00:03:00,159
on the go surface workers can do this

00:02:59,200 --> 00:03:02,720
and now you know

00:03:00,159 --> 00:03:04,400
also take notes that you can grab items

00:03:02,720 --> 00:03:04,879
that have been stored in their browser's

00:03:04,400 --> 00:03:07,360
cash

00:03:04,879 --> 00:03:09,120
installing activated weighting and idle

00:03:07,360 --> 00:03:09,760
these are all part of your workers life

00:03:09,120 --> 00:03:11,599
cycle

00:03:09,760 --> 00:03:13,360
each state has its place and it has its

00:03:11,599 --> 00:03:19,840
uses service workers changing that too

00:03:13,360 --> 00:03:19,840
useful from useless

00:03:24,720 --> 00:03:28,400
okay we understand a couple of things at

00:03:27,200 --> 00:03:30,480
this point

00:03:28,400 --> 00:03:32,400
some of our bad web app experiences can

00:03:30,480 --> 00:03:35,040
be solved with pwas

00:03:32,400 --> 00:03:37,440
at the core of a pwa is the effective

00:03:35,040 --> 00:03:39,760
use of a service worker

00:03:37,440 --> 00:03:42,239
how does angular fit into this picture

00:03:39,760 --> 00:03:45,599
well let's take a look

00:03:42,239 --> 00:03:47,280
angular has first class support for pwas

00:03:45,599 --> 00:03:49,519
this unlocks the potential for us to

00:03:47,280 --> 00:03:51,760
craft a great pwa experience

00:03:49,519 --> 00:03:52,799
and not have to focus on which files to

00:03:51,760 --> 00:03:55,360
set up

00:03:52,799 --> 00:03:58,319
to add pwa support to an application we

00:03:55,360 --> 00:04:01,200
can use the pwa schematic

00:03:58,319 --> 00:04:04,080
to install the schematic we use ng add

00:04:01,200 --> 00:04:05,439
angular slash pwa

00:04:04,080 --> 00:04:08,080
running the schematic makes some

00:04:05,439 --> 00:04:09,760
important changes to your application

00:04:08,080 --> 00:04:11,519
it creates a service worker with the

00:04:09,760 --> 00:04:14,400
default caching configuration

00:04:11,519 --> 00:04:16,639
which we'll look at soon it creates the

00:04:14,400 --> 00:04:18,400
web manifest file where things like the

00:04:16,639 --> 00:04:19,359
app description and icons can be

00:04:18,400 --> 00:04:21,919
configured

00:04:19,359 --> 00:04:24,000
and speaking of icons the schematic

00:04:21,919 --> 00:04:25,040
helps us by placing some of the default

00:04:24,000 --> 00:04:28,000
app icons

00:04:25,040 --> 00:04:29,759
in the asset folders of our project and

00:04:28,000 --> 00:04:31,840
it also does the work to make our

00:04:29,759 --> 00:04:33,440
application installable

00:04:31,840 --> 00:04:35,040
when we first started this talk the

00:04:33,440 --> 00:04:37,120
first issue that i mentioned

00:04:35,040 --> 00:04:38,960
is that well our applications don't work

00:04:37,120 --> 00:04:40,160
offline which hinders our application

00:04:38,960 --> 00:04:42,400
experience

00:04:40,160 --> 00:04:43,759
we solve that problem by installing the

00:04:42,400 --> 00:04:46,479
pwa schematic

00:04:43,759 --> 00:04:48,320
our application now works offline to

00:04:46,479 --> 00:04:50,240
test this out in an application

00:04:48,320 --> 00:04:52,160
we first need to build a production

00:04:50,240 --> 00:04:55,040
bundle using ng build

00:04:52,160 --> 00:04:56,960
dash pride now note in version 12 of

00:04:55,040 --> 00:04:59,280
angular beyond the prod flag is

00:04:56,960 --> 00:05:01,600
deprecated yeah

00:04:59,280 --> 00:05:03,520
after the bundle is created we can serve

00:05:01,600 --> 00:05:06,800
the application with a web server

00:05:03,520 --> 00:05:08,639
remember you can't use ng-serve here

00:05:06,800 --> 00:05:11,120
the next step is to confirm that the

00:05:08,639 --> 00:05:12,960
application has a service worker

00:05:11,120 --> 00:05:14,800
in the application tab in chrome dev

00:05:12,960 --> 00:05:16,320
tools we look at the service worker

00:05:14,800 --> 00:05:17,039
section to confirm that the service

00:05:16,320 --> 00:05:20,160
worker is

00:05:17,039 --> 00:05:21,680
activated awesome this looks great the

00:05:20,160 --> 00:05:24,000
service worker is working

00:05:21,680 --> 00:05:26,080
in action we can confirm that the

00:05:24,000 --> 00:05:27,280
application works offline by checking

00:05:26,080 --> 00:05:29,280
the offline button

00:05:27,280 --> 00:05:31,840
and for good measure i'm going to stop

00:05:29,280 --> 00:05:33,759
the application server as well

00:05:31,840 --> 00:05:35,520
now i'm going to refresh the page and

00:05:33,759 --> 00:05:36,479
look at the resources tab to help me

00:05:35,520 --> 00:05:37,919
identify

00:05:36,479 --> 00:05:39,520
which of the requests have been

00:05:37,919 --> 00:05:42,400
intercepted and served

00:05:39,520 --> 00:05:44,400
by the service worker check this out all

00:05:42,400 --> 00:05:46,880
of the resources needed to load the page

00:05:44,400 --> 00:05:47,680
are being loaded the angular cli has

00:05:46,880 --> 00:05:50,800
turned our app

00:05:47,680 --> 00:05:53,120
into a pwa but if i'm being honest it's

00:05:50,800 --> 00:05:55,759
all feeling a little magical right

00:05:53,120 --> 00:05:56,880
well how is this being configured can we

00:05:55,759 --> 00:05:58,880
figure this out

00:05:56,880 --> 00:06:01,120
well since you i suppose that we can

00:05:58,880 --> 00:06:03,600
clear up any doubts

00:06:01,120 --> 00:06:05,199
run the schematic it feels so automatic

00:06:03,600 --> 00:06:06,560
but in fact that's quite pragmatic

00:06:05,199 --> 00:06:08,479
update files create some static and

00:06:06,560 --> 00:06:09,600
there you go hit some goals your new

00:06:08,479 --> 00:06:11,360
wish is our command

00:06:09,600 --> 00:06:12,960
when you use the recommend your apps

00:06:11,360 --> 00:06:16,479
abilities expand

00:06:12,960 --> 00:06:17,759
ngsw config.json yeah configure your

00:06:16,479 --> 00:06:21,039
service worker and then

00:06:17,759 --> 00:06:22,000
it's like ah now i get it that's back to

00:06:21,039 --> 00:06:23,919
the cache

00:06:22,000 --> 00:06:25,360
update prefetching by providing the

00:06:23,919 --> 00:06:28,000
right path

00:06:25,360 --> 00:06:30,080
yeah and you can be quite specific if a

00:06:28,000 --> 00:06:31,600
file is not loading add an entry so we

00:06:30,080 --> 00:06:33,199
don't miss it and there you have it now

00:06:31,600 --> 00:06:33,520
you know it works online oh yeah let's

00:06:33,199 --> 00:06:35,120
go

00:06:33,520 --> 00:06:37,440
and if you can figure things right then

00:06:35,120 --> 00:06:40,240
your users may never know

00:06:37,440 --> 00:06:42,479
so it's not actually magical adding

00:06:40,240 --> 00:06:44,720
offline support is done when the service

00:06:42,479 --> 00:06:46,479
worker is installed into your project

00:06:44,720 --> 00:06:48,160
here's one place where we can create a

00:06:46,479 --> 00:06:50,880
more bespoke experience for

00:06:48,160 --> 00:06:52,160
our users angular supports two types of

00:06:50,880 --> 00:06:54,560
caching strategy

00:06:52,160 --> 00:06:56,639
pre-fetching and lazy pre-fetching

00:06:54,560 --> 00:06:56,960
allows you to specify the assets in your

00:06:56,639 --> 00:06:58,639
app

00:06:56,960 --> 00:07:00,479
that should be cached immediately when

00:06:58,639 --> 00:07:01,440
you run the app with your service worker

00:07:00,479 --> 00:07:03,360
enabled

00:07:01,440 --> 00:07:05,520
but this is going to be bandwidth

00:07:03,360 --> 00:07:06,160
intensive especially if you decide to

00:07:05,520 --> 00:07:09,199
download

00:07:06,160 --> 00:07:09,680
all of your assets for example now lazy

00:07:09,199 --> 00:07:11,919
mode

00:07:09,680 --> 00:07:12,720
only caches the assets when they are

00:07:11,919 --> 00:07:15,199
requested in

00:07:12,720 --> 00:07:16,000
app so if you use this mode you may find

00:07:15,199 --> 00:07:18,319
yourself without

00:07:16,000 --> 00:07:20,160
some assets when in offline mode but we

00:07:18,319 --> 00:07:22,240
can actually configure response for

00:07:20,160 --> 00:07:24,720
assets that are not available

00:07:22,240 --> 00:07:26,800
in the end you'll want to ask yourself

00:07:24,720 --> 00:07:27,440
what do i want my offline experience to

00:07:26,800 --> 00:07:29,440
be

00:07:27,440 --> 00:07:30,800
then update the cached assets

00:07:29,440 --> 00:07:34,479
accordingly

00:07:30,800 --> 00:07:37,599
a new file called ngswconfig.json is

00:07:34,479 --> 00:07:39,120
created when the pwa schematic is run

00:07:37,599 --> 00:07:41,440
here's where you can configure the

00:07:39,120 --> 00:07:44,319
caching strategy as well as determine

00:07:41,440 --> 00:07:46,400
which assets should be cached at this

00:07:44,319 --> 00:07:48,160
point our application works offline

00:07:46,400 --> 00:07:49,759
and we're in a great place are you

00:07:48,160 --> 00:07:51,440
excited yeah me too

00:07:49,759 --> 00:07:53,280
so get that left hand up because i have

00:07:51,440 --> 00:07:57,120
something for you

00:07:53,280 --> 00:08:00,000
high five let's dive into the next phase

00:07:57,120 --> 00:08:01,759
and that's fast load times we're going

00:08:00,000 --> 00:08:04,000
to take this in two parts

00:08:01,759 --> 00:08:06,479
there's how fast our application loads

00:08:04,000 --> 00:08:08,720
and there's boosting data loading speeds

00:08:06,479 --> 00:08:10,479
in the application caching is a

00:08:08,720 --> 00:08:12,000
recurring theme in our story today and

00:08:10,479 --> 00:08:15,039
it's going to make an appearance

00:08:12,000 --> 00:08:16,879
again in most applications there are

00:08:15,039 --> 00:08:18,160
parts that only change with the major

00:08:16,879 --> 00:08:20,639
redesign

00:08:18,160 --> 00:08:22,479
this may be a header footer or

00:08:20,639 --> 00:08:24,560
navigation menu

00:08:22,479 --> 00:08:26,080
because these don't change frequently

00:08:24,560 --> 00:08:28,560
what if we could load them while

00:08:26,080 --> 00:08:30,240
we load the rest of our app and dynamic

00:08:28,560 --> 00:08:32,399
content

00:08:30,240 --> 00:08:33,839
the users wouldn't be able to tell that

00:08:32,399 --> 00:08:36,800
every time they visited

00:08:33,839 --> 00:08:38,719
there was a quickly loading shell now

00:08:36,800 --> 00:08:41,120
what if we can do this better than we've

00:08:38,719 --> 00:08:42,880
been doing faster experiences

00:08:41,120 --> 00:08:44,560
than what they've been viewing i mean

00:08:42,880 --> 00:08:46,560
they're perusing our sites

00:08:44,560 --> 00:08:47,760
clicking and tapping with expectations

00:08:46,560 --> 00:08:50,080
that were pages load

00:08:47,760 --> 00:08:50,959
faster than light we can think about the

00:08:50,080 --> 00:08:53,040
pages in

00:08:50,959 --> 00:08:54,959
mainly two parts one part is static but

00:08:53,040 --> 00:08:56,800
dynamic that's close to their hearts

00:08:54,959 --> 00:08:58,480
can't keep them apart they need their

00:08:56,800 --> 00:09:00,480
data to hit the mark

00:08:58,480 --> 00:09:01,600
and that's the very reason they came

00:09:00,480 --> 00:09:03,279
from the start

00:09:01,600 --> 00:09:04,640
let's separate concerns and take

00:09:03,279 --> 00:09:06,800
advantage of routes

00:09:04,640 --> 00:09:08,080
that way we'll load the data that they

00:09:06,800 --> 00:09:10,160
care about and for

00:09:08,080 --> 00:09:11,200
us that means that page is slow snapping

00:09:10,160 --> 00:09:13,120
and quick

00:09:11,200 --> 00:09:15,040
first contentful paint comes right

00:09:13,120 --> 00:09:18,320
before the clicks and this is legit

00:09:15,040 --> 00:09:20,880
because we crave interaction fast low

00:09:18,320 --> 00:09:23,680
times means more satisfaction

00:09:20,880 --> 00:09:25,839
and don't stress this implementation use

00:09:23,680 --> 00:09:26,640
the angular cli for your asset

00:09:25,839 --> 00:09:28,090
generation

00:09:26,640 --> 00:09:29,760
okay

00:09:28,090 --> 00:09:32,000
[Music]

00:09:29,760 --> 00:09:33,120
the app shell architecture allows for

00:09:32,000 --> 00:09:36,399
the quick load

00:09:33,120 --> 00:09:38,560
and app-like experience in your pwa the

00:09:36,399 --> 00:09:40,800
architecture isn't unique to angular

00:09:38,560 --> 00:09:42,240
but we get to take advantage of the cli

00:09:40,800 --> 00:09:44,320
to enable it

00:09:42,240 --> 00:09:46,240
so the core idea behind the app shell

00:09:44,320 --> 00:09:47,839
architecture is to provide some minimum

00:09:46,240 --> 00:09:50,160
html and css

00:09:47,839 --> 00:09:52,080
to get to a meaningful first contentful

00:09:50,160 --> 00:09:54,399
paint by loading some content

00:09:52,080 --> 00:09:56,320
instantly so what's a good candidate for

00:09:54,399 --> 00:09:58,320
you to include in your app shell

00:09:56,320 --> 00:10:00,080
well here i like to consider headers

00:09:58,320 --> 00:10:01,920
footers and even potentially some

00:10:00,080 --> 00:10:04,320
navigation items that don't change

00:10:01,920 --> 00:10:06,079
often the goal for the user is to land

00:10:04,320 --> 00:10:07,040
on your page and be immediately shown

00:10:06,079 --> 00:10:09,920
some content

00:10:07,040 --> 00:10:11,440
to create that instant load effect it

00:10:09,920 --> 00:10:13,360
appears to be instant because we can

00:10:11,440 --> 00:10:16,560
take advantage of caching again

00:10:13,360 --> 00:10:19,040
with the mighty service workers in

00:10:16,560 --> 00:10:20,079
angular we use the cli to generate the

00:10:19,040 --> 00:10:23,279
app shell

00:10:20,079 --> 00:10:25,839
we run the ngg app shell command to kick

00:10:23,279 --> 00:10:27,600
off the process this will create a new

00:10:25,839 --> 00:10:28,720
component for us to structure as a

00:10:27,600 --> 00:10:30,560
placeholder content

00:10:28,720 --> 00:10:32,160
that users will see when the application

00:10:30,560 --> 00:10:34,399
is progressively loaded

00:10:32,160 --> 00:10:35,360
when things are cached properly the load

00:10:34,399 --> 00:10:37,839
even offline

00:10:35,360 --> 00:10:40,320
will be instant once we've added the

00:10:37,839 --> 00:10:41,839
html and css we want to appear in our

00:10:40,320 --> 00:10:43,760
app shell component

00:10:41,839 --> 00:10:46,800
we'll then generate a production bundle

00:10:43,760 --> 00:10:50,800
that'll create the necessary assets

00:10:46,800 --> 00:10:53,120
using ng run my app app dash shell

00:10:50,800 --> 00:10:54,959
that starts the process here you'd

00:10:53,120 --> 00:10:57,040
replace my app with the name of the app

00:10:54,959 --> 00:10:58,959
that you want to run this against

00:10:57,040 --> 00:11:02,320
to see the app shell loading i'm going

00:10:58,959 --> 00:11:04,880
to load the app with an http server

00:11:02,320 --> 00:11:06,240
in this slowed down clip we can see the

00:11:04,880 --> 00:11:09,920
app shell loading

00:11:06,240 --> 00:11:12,160
instantly then the full app loading

00:11:09,920 --> 00:11:14,079
here's another question can we speed up

00:11:12,160 --> 00:11:17,279
things once our app is loaded

00:11:14,079 --> 00:11:19,200
well the answer is yes the service

00:11:17,279 --> 00:11:20,560
worker config file has a section

00:11:19,200 --> 00:11:22,880
dedicated to data

00:11:20,560 --> 00:11:23,839
called data groups this is where we can

00:11:22,880 --> 00:11:26,640
specify which

00:11:23,839 --> 00:11:28,079
apis to cache as well as how long they

00:11:26,640 --> 00:11:29,920
should stick around in our app

00:11:28,079 --> 00:11:31,440
and we get to define what's the best

00:11:29,920 --> 00:11:33,360
strategy to use

00:11:31,440 --> 00:11:34,480
there's a lot of configuration available

00:11:33,360 --> 00:11:36,560
here there's

00:11:34,480 --> 00:11:38,240
api version in case there are some

00:11:36,560 --> 00:11:39,279
compatibility issues that you need to be

00:11:38,240 --> 00:11:41,519
mindful of

00:11:39,279 --> 00:11:43,040
there's a time out to specify how long

00:11:41,519 --> 00:11:45,120
should the service worker wait

00:11:43,040 --> 00:11:46,480
before timing out on a request and

00:11:45,120 --> 00:11:48,480
looking at the cash

00:11:46,480 --> 00:11:50,160
and then there's a really interesting

00:11:48,480 --> 00:11:51,839
strategy property

00:11:50,160 --> 00:11:54,160
the choices are performance and

00:11:51,839 --> 00:11:56,399
freshness performers prefers

00:11:54,160 --> 00:11:57,200
choosing the cash version of a resource

00:11:56,399 --> 00:11:59,519
before

00:11:57,200 --> 00:12:01,279
making a network request and then

00:11:59,519 --> 00:12:03,279
there's freshness

00:12:01,279 --> 00:12:04,639
this strategy prefers making a request

00:12:03,279 --> 00:12:07,839
over the network

00:12:04,639 --> 00:12:08,560
before considering your cache now your

00:12:07,839 --> 00:12:10,639
wrist still

00:12:08,560 --> 00:12:12,639
data and performance mode but may

00:12:10,639 --> 00:12:15,279
experience slower response times

00:12:12,639 --> 00:12:18,399
and freshness mode again use this

00:12:15,279 --> 00:12:20,399
opportunity to make strategic choices

00:12:18,399 --> 00:12:22,399
if you have data that doesn't change

00:12:20,399 --> 00:12:23,760
often like a department list well

00:12:22,399 --> 00:12:25,519
this is a great candidate for

00:12:23,760 --> 00:12:28,000
performance strategy but

00:12:25,519 --> 00:12:30,000
if you have something like stock prices

00:12:28,000 --> 00:12:31,920
well you can't restale data so you

00:12:30,000 --> 00:12:33,839
should likely choose freshness for these

00:12:31,920 --> 00:12:35,839
types of resources

00:12:33,839 --> 00:12:37,120
okay so far we've tackled offline

00:12:35,839 --> 00:12:39,519
ability and

00:12:37,120 --> 00:12:41,200
faster load times but at the start of

00:12:39,519 --> 00:12:43,760
our conversation we identify

00:12:41,200 --> 00:12:44,880
one more point of friction that our

00:12:43,760 --> 00:12:46,720
users face

00:12:44,880 --> 00:12:49,279
sometimes web apps will encourage the

00:12:46,720 --> 00:12:51,920
user to install a separate application

00:12:49,279 --> 00:12:53,120
now i know this works but sometimes it

00:12:51,920 --> 00:12:55,600
isn't optimal

00:12:53,120 --> 00:12:56,880
you see the user is already interacting

00:12:55,600 --> 00:12:58,639
with your web app

00:12:56,880 --> 00:13:00,160
having a separate application makes

00:12:58,639 --> 00:13:00,880
sense when you need to create an

00:13:00,160 --> 00:13:03,920
experience

00:13:00,880 --> 00:13:06,399
that's just not possible on the web

00:13:03,920 --> 00:13:08,079
but if you're having a hard time trying

00:13:06,399 --> 00:13:10,160
to identify what that could be

00:13:08,079 --> 00:13:11,200
well that's a good thing because the web

00:13:10,160 --> 00:13:13,680
is incredible

00:13:11,200 --> 00:13:15,120
and the apis are becoming more and more

00:13:13,680 --> 00:13:17,279
robust

00:13:15,120 --> 00:13:19,600
the web continues to move forward as

00:13:17,279 --> 00:13:20,480
more features are adopted by the major

00:13:19,600 --> 00:13:22,800
browsers

00:13:20,480 --> 00:13:24,880
pwas are installable once you've added

00:13:22,800 --> 00:13:27,040
support for them in your application

00:13:24,880 --> 00:13:30,480
the workflow for the user isn't a

00:13:27,040 --> 00:13:30,480
stretch for your imagination

00:13:31,200 --> 00:13:35,760
here's how it goes install the web app

00:13:33,360 --> 00:13:36,320
and have a good time the web experience

00:13:35,760 --> 00:13:38,880
is great

00:13:36,320 --> 00:13:39,839
and continues offline we have instant

00:13:38,880 --> 00:13:42,320
load with

00:13:39,839 --> 00:13:42,959
pre-cached assets i bet you did not

00:13:42,320 --> 00:13:45,199
expect this

00:13:42,959 --> 00:13:47,279
is what you would get no sweat this is

00:13:45,199 --> 00:13:49,440
the very least that we could do

00:13:47,279 --> 00:13:50,480
we want to remove the blockers and the

00:13:49,440 --> 00:13:52,920
friction for you

00:13:50,480 --> 00:13:54,959
and yes it is true we can show

00:13:52,920 --> 00:13:57,519
notifications to grab your

00:13:54,959 --> 00:13:58,079
attention in every occasion is there an

00:13:57,519 --> 00:14:01,040
update

00:13:58,079 --> 00:14:02,079
okay great here's your notice it'll work

00:14:01,040 --> 00:14:04,720
out so smoothly

00:14:02,079 --> 00:14:05,279
you barely would notice i hope this is

00:14:04,720 --> 00:14:08,079
helpful

00:14:05,279 --> 00:14:16,660
because we're close to finishing our rap

00:14:08,079 --> 00:14:23,440
and making it more biz folk now let go

00:14:16,660 --> 00:14:25,760
[Music]

00:14:23,440 --> 00:14:27,360
well here we are friends and we're ready

00:14:25,760 --> 00:14:30,240
to put the finishing touches

00:14:27,360 --> 00:14:30,720
on our application one of the final

00:14:30,240 --> 00:14:33,120
pieces

00:14:30,720 --> 00:14:35,120
is the sw update service that's made

00:14:33,120 --> 00:14:37,279
available to your application

00:14:35,120 --> 00:14:38,880
the service gives you access to events

00:14:37,279 --> 00:14:39,519
that let your application know things

00:14:38,880 --> 00:14:41,600
like if an

00:14:39,519 --> 00:14:42,880
update is discovered for your app or

00:14:41,600 --> 00:14:45,440
when the update is

00:14:42,880 --> 00:14:46,959
actually been activated this is very

00:14:45,440 --> 00:14:48,320
useful information that we can take

00:14:46,959 --> 00:14:50,720
advantage of because well

00:14:48,320 --> 00:14:51,600
it allows us to customize our pwa

00:14:50,720 --> 00:14:54,079
experience

00:14:51,600 --> 00:14:56,079
for the user there are four separate

00:14:54,079 --> 00:14:58,000
operations that we can tap into

00:14:56,079 --> 00:14:59,360
getting notified of available updates

00:14:58,000 --> 00:15:00,720
for your application so

00:14:59,360 --> 00:15:02,480
these are the ones that will be loaded

00:15:00,720 --> 00:15:04,959
when the app refreshes

00:15:02,480 --> 00:15:06,480
we can be notified of update activation

00:15:04,959 --> 00:15:08,399
meaning that the service worker

00:15:06,480 --> 00:15:09,920
has started serving a new version of

00:15:08,399 --> 00:15:11,920
your application

00:15:09,920 --> 00:15:13,519
we can even ask the service worker to

00:15:11,920 --> 00:15:16,639
check the remote server

00:15:13,519 --> 00:15:18,959
for updates and we can ask the service

00:15:16,639 --> 00:15:19,600
worker to activate the latest version of

00:15:18,959 --> 00:15:22,639
our app

00:15:19,600 --> 00:15:24,160
in the current tab now two of these

00:15:22,639 --> 00:15:27,279
events are observable

00:15:24,160 --> 00:15:28,560
available and updated so we can tie in

00:15:27,279 --> 00:15:31,199
our custom logic here

00:15:28,560 --> 00:15:33,040
in our application which as you might be

00:15:31,199 --> 00:15:34,000
thinking can include functionality like

00:15:33,040 --> 00:15:36,320
displaying a

00:15:34,000 --> 00:15:38,000
toe style message or even triggering a

00:15:36,320 --> 00:15:39,839
push notification

00:15:38,000 --> 00:15:41,920
there's a service worker object for

00:15:39,839 --> 00:15:44,560
interacting with push notifications

00:15:41,920 --> 00:15:46,000
called sw push including this in your

00:15:44,560 --> 00:15:47,839
app will allow you to build

00:15:46,000 --> 00:15:49,199
out these types of features for your

00:15:47,839 --> 00:15:51,360
application

00:15:49,199 --> 00:15:52,720
finally to make our app installable for

00:15:51,360 --> 00:15:55,440
all users we can use

00:15:52,720 --> 00:15:56,959
a service like firebase hosting using

00:15:55,440 --> 00:15:59,680
the firebase schematic

00:15:56,959 --> 00:16:01,920
we can add our firebase to our app

00:15:59,680 --> 00:16:05,040
select the current project and then

00:16:01,920 --> 00:16:07,120
deploy our app using ng deploy then

00:16:05,040 --> 00:16:08,240
it'll be live and ready for everyone to

00:16:07,120 --> 00:16:10,000
see

00:16:08,240 --> 00:16:11,759
alright friends this has been an

00:16:10,000 --> 00:16:13,680
incredible journey together

00:16:11,759 --> 00:16:14,800
we've seen how to take our standard web

00:16:13,680 --> 00:16:16,320
experiences and

00:16:14,800 --> 00:16:18,079
make them more meaningful and

00:16:16,320 --> 00:16:20,079
intentional for our users

00:16:18,079 --> 00:16:22,480
through the use of making the app work

00:16:20,079 --> 00:16:24,320
offline with service workers speeding up

00:16:22,480 --> 00:16:25,839
load times with caching and the app

00:16:24,320 --> 00:16:27,759
shell and making

00:16:25,839 --> 00:16:29,839
a more app-like experience when

00:16:27,759 --> 00:16:31,440
installed by integrating the services

00:16:29,839 --> 00:16:35,839
provided by angular

00:16:31,440 --> 00:16:39,120
so what's next well go build great apps

00:16:35,839 --> 00:16:39,120

YouTube URL: https://www.youtube.com/watch?v=n6-fEh5sB_g


