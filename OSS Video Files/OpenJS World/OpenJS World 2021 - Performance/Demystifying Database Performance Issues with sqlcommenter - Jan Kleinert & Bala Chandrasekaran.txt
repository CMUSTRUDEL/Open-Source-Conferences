Title: Demystifying Database Performance Issues with sqlcommenter - Jan Kleinert & Bala Chandrasekaran
Publication date: 2021-05-31
Playlist: OpenJS World 2021 - Performance
Description: 
	Have you ever tried to troubleshoot a database performance issue in an application that was built using an ORM? ORMs can simplify development of applications that communicate with databases, but since the ORMs are generating the SQL statements, it can be difficult to determine which application code is resulting in slow queries. sqlcommenter is an open source library that enables ORMs to augment SQL statements with comments about the about the code that caused its execution, making it easier to correlate your application code with the SQL statements that were generated by the ORM. In this session, Jan and Bala will demonstrate how to set up and use sqlcommenter with an application that uses Sequelize.js to diagnose query performance. They'll also touch on the other frameworks and ORMs that sqlcommenter supports as well as how you can view this data in db logs and observability tools.
Captions: 
	00:00:01,199 --> 00:00:04,799
hi thank you for joining us for this

00:00:02,960 --> 00:00:05,839
session on demystifying database

00:00:04,799 --> 00:00:09,920
performance issues

00:00:05,839 --> 00:00:11,759
with sql commenter i'm jan kleiner and i

00:00:09,920 --> 00:00:13,679
lead an advocacy team within google

00:00:11,759 --> 00:00:15,120
cloud that focuses on databases and

00:00:13,679 --> 00:00:17,279
infrastructure

00:00:15,120 --> 00:00:19,039
bala chandrasekharan is a software

00:00:17,279 --> 00:00:20,160
engineer in google cloud focusing on

00:00:19,039 --> 00:00:22,640
databases

00:00:20,160 --> 00:00:23,199
and also working as a software engineer

00:00:22,640 --> 00:00:26,080
on

00:00:23,199 --> 00:00:26,080
sql commenter

00:00:26,480 --> 00:00:31,359
so many developers use orms to simplify

00:00:29,279 --> 00:00:33,840
development of applications

00:00:31,359 --> 00:00:35,760
that communicate with databases but

00:00:33,840 --> 00:00:36,399
since orms are generating the sql

00:00:35,760 --> 00:00:38,559
statements

00:00:36,399 --> 00:00:39,920
it becomes difficult to determine which

00:00:38,559 --> 00:00:42,960
application code

00:00:39,920 --> 00:00:44,000
is resulting in slow queries so in this

00:00:42,960 --> 00:00:45,920
session we'll show you how

00:00:44,000 --> 00:00:47,039
you can use sql commenter and open

00:00:45,920 --> 00:00:49,360
source library

00:00:47,039 --> 00:00:51,120
to help solve this problem we'll

00:00:49,360 --> 00:00:53,280
demonstrate how to set up a new sql

00:00:51,120 --> 00:00:55,680
commenter with a node.js application

00:00:53,280 --> 00:00:58,239
that uses connects so that we can more

00:00:55,680 --> 00:01:00,000
easily diagnose query performance

00:00:58,239 --> 00:01:02,640
we'll also look at the other frameworks

00:01:00,000 --> 00:01:05,040
and orms that sql commenter supports

00:01:02,640 --> 00:01:07,840
and how you can view this information in

00:01:05,040 --> 00:01:10,000
database logs and observability tools

00:01:07,840 --> 00:01:13,360
including cloud sql insights so let's

00:01:10,000 --> 00:01:15,840
get started sql commenter is an open

00:01:13,360 --> 00:01:18,560
source library that enables orms to

00:01:15,840 --> 00:01:20,640
augment sql statements before execution

00:01:18,560 --> 00:01:22,320
with comments about the code that caused

00:01:20,640 --> 00:01:24,240
its execution

00:01:22,320 --> 00:01:25,360
this helps in more easily correlating

00:01:24,240 --> 00:01:27,360
slow queries

00:01:25,360 --> 00:01:29,759
with source code giving insights into

00:01:27,360 --> 00:01:31,759
back-end database performance

00:01:29,759 --> 00:01:34,240
in short it provides observability into

00:01:31,759 --> 00:01:36,640
the state of client-side applications

00:01:34,240 --> 00:01:37,920
and their impact on database performance

00:01:36,640 --> 00:01:39,520
without having to be a database

00:01:37,920 --> 00:01:42,880
performance expert

00:01:39,520 --> 00:01:44,560
or use a multitude of tools

00:01:42,880 --> 00:01:46,880
application developers don't need to do

00:01:44,560 --> 00:01:49,119
very much application code change at all

00:01:46,880 --> 00:01:49,600
to enable sql commenter for applications

00:01:49,119 --> 00:01:53,119
that use

00:01:49,600 --> 00:01:54,000
orms you can find a link on the slide to

00:01:53,119 --> 00:01:56,000
the github repo

00:01:54,000 --> 00:01:59,119
which in turn links to the documentation

00:01:56,000 --> 00:01:59,119
for sql commenter

00:01:59,920 --> 00:02:03,439
sql commenter is available for python

00:02:02,079 --> 00:02:05,920
java node.js

00:02:03,439 --> 00:02:07,680
and ruby and is supported by several

00:02:05,920 --> 00:02:08,640
orms and frameworks that you can see

00:02:07,680 --> 00:02:10,640
here

00:02:08,640 --> 00:02:12,720
it's also been tested against a number

00:02:10,640 --> 00:02:18,239
of databases including postgres

00:02:12,720 --> 00:02:18,239
mysql mariadb sql lite and cloud sql

00:02:19,440 --> 00:02:23,200
now let's look at some of the key parts

00:02:21,360 --> 00:02:24,560
of the specification for the sql

00:02:23,200 --> 00:02:28,239
commenter algorithm

00:02:24,560 --> 00:02:29,920
to understand how it works sql commenter

00:02:28,239 --> 00:02:32,560
augments a sql statement

00:02:29,920 --> 00:02:34,000
with a comment containing serialized key

00:02:32,560 --> 00:02:36,720
value pairs

00:02:34,000 --> 00:02:39,200
or application tags as we call them that

00:02:36,720 --> 00:02:41,360
are retrieved from the supported orm or

00:02:39,200 --> 00:02:43,200
framework that you're using

00:02:41,360 --> 00:02:45,440
so this can be information like the

00:02:43,200 --> 00:02:47,680
controller the route the action

00:02:45,440 --> 00:02:49,599
the database driver the framework those

00:02:47,680 --> 00:02:51,519
types of things

00:02:49,599 --> 00:02:53,920
the comments must come after the sequel

00:02:51,519 --> 00:02:55,280
statement and any existing comments must

00:02:53,920 --> 00:02:57,280
be preserved

00:02:55,280 --> 00:02:59,760
and the key value pairs have to be comma

00:02:57,280 --> 00:03:01,360
separated url encoded and any meta

00:02:59,760 --> 00:03:02,519
characters escaped

00:03:01,360 --> 00:03:05,120
and then they get sorted in

00:03:02,519 --> 00:03:06,879
lexicographical order

00:03:05,120 --> 00:03:09,280
you can read even more detail on the

00:03:06,879 --> 00:03:10,720
spec and the algorithm at this link

00:03:09,280 --> 00:03:14,879
but what we just described should give

00:03:10,720 --> 00:03:14,879
you the general idea for how it works

00:03:14,959 --> 00:03:19,519
these augmented sql statements will then

00:03:17,280 --> 00:03:21,519
show up in your database logs

00:03:19,519 --> 00:03:23,840
by having these application tags from

00:03:21,519 --> 00:03:25,280
the orm in your logs sql commenter will

00:03:23,840 --> 00:03:27,920
help you determine

00:03:25,280 --> 00:03:29,599
what application code is associated with

00:03:27,920 --> 00:03:31,519
any slow queries

00:03:29,599 --> 00:03:33,040
here's an example of a query log from a

00:03:31,519 --> 00:03:35,040
postgres database

00:03:33,040 --> 00:03:37,840
that's used by a django application with

00:03:35,040 --> 00:03:39,519
sql commenter for django enabled

00:03:37,840 --> 00:03:41,519
in the log you can see an update

00:03:39,519 --> 00:03:43,360
statement being executed

00:03:41,519 --> 00:03:45,040
and at the end of the sql statement the

00:03:43,360 --> 00:03:47,200
sql style comment

00:03:45,040 --> 00:03:48,480
has been added in the form of key value

00:03:47,200 --> 00:03:50,480
pairs

00:03:48,480 --> 00:03:52,799
this comment was added by sql commenter

00:03:50,480 --> 00:03:55,120
to the query that was generated by the

00:03:52,799 --> 00:03:56,560
django orm

00:03:55,120 --> 00:03:57,840
as you can see from the comments it

00:03:56,560 --> 00:03:59,920
provides information about the

00:03:57,840 --> 00:04:00,879
controller which in this case is assign

00:03:59,920 --> 00:04:02,720
order

00:04:00,879 --> 00:04:04,480
this is the controller method that sent

00:04:02,720 --> 00:04:06,319
the query

00:04:04,480 --> 00:04:07,760
in the case of django the controller in

00:04:06,319 --> 00:04:10,959
an mvc pattern

00:04:07,760 --> 00:04:12,799
maps to the view in a django application

00:04:10,959 --> 00:04:14,000
you can also see information about the

00:04:12,799 --> 00:04:16,720
route database

00:04:14,000 --> 00:04:18,959
driver and framework now since this

00:04:16,720 --> 00:04:20,959
query is taken 400 milliseconds we can

00:04:18,959 --> 00:04:22,720
go into the assign order method

00:04:20,959 --> 00:04:26,240
to see if we can understand why it's

00:04:22,720 --> 00:04:27,440
taking a relatively long time

00:04:26,240 --> 00:04:29,199
now we're going to walk through the

00:04:27,440 --> 00:04:30,240
process of deploying a node.js

00:04:29,199 --> 00:04:32,080
application

00:04:30,240 --> 00:04:33,520
that uses a postgres database for

00:04:32,080 --> 00:04:35,440
back-end storage

00:04:33,520 --> 00:04:36,560
then we'll enable sql commenter in that

00:04:35,440 --> 00:04:38,720
application

00:04:36,560 --> 00:04:42,000
and look at logs and also cloud sql

00:04:38,720 --> 00:04:43,840
insights to view and monitor queries

00:04:42,000 --> 00:04:46,080
taking advantage of that sql commenter

00:04:43,840 --> 00:04:49,120
information

00:04:46,080 --> 00:04:51,360
we'll switch over to the demo now

00:04:49,120 --> 00:04:53,360
so first we'll use the gcloud command

00:04:51,360 --> 00:04:53,919
line tool to create a new cloud sql

00:04:53,360 --> 00:04:57,040
instance

00:04:53,919 --> 00:04:58,479
named my instance and we'll create that

00:04:57,040 --> 00:05:01,520
with cloud sql

00:04:58,479 --> 00:05:01,520
insights enabled

00:05:04,320 --> 00:05:07,600
so here you can see we're going to

00:05:05,600 --> 00:05:11,360
create a cloud sql instance

00:05:07,600 --> 00:05:11,759
named my instance here we're specifying

00:05:11,360 --> 00:05:13,759
the

00:05:11,759 --> 00:05:16,160
version of postgres the region where we

00:05:13,759 --> 00:05:25,360
want this to be created

00:05:16,160 --> 00:05:28,000
we need to enter our password

00:05:25,360 --> 00:05:30,000
and then this flag here enables query

00:05:28,000 --> 00:05:32,320
insights

00:05:30,000 --> 00:05:34,639
allows it to record application tags and

00:05:32,320 --> 00:05:39,840
record client ip addresses

00:05:34,639 --> 00:05:39,840
we'll learn more about this in a moment

00:05:54,880 --> 00:05:59,280
and now our cloud sql instance is being

00:05:56,800 --> 00:05:59,280
created

00:06:04,560 --> 00:06:08,080
this may take a few minutes so we're

00:06:06,080 --> 00:06:10,960
going to speed this up

00:06:08,080 --> 00:06:14,160
for the sake of the demo okay so now our

00:06:10,960 --> 00:06:16,000
cloud sql instance has been created

00:06:14,160 --> 00:06:18,800
next we will create a database that

00:06:16,000 --> 00:06:20,880
we'll use for the sample application

00:06:18,800 --> 00:06:23,520
the database is going to be named

00:06:20,880 --> 00:06:26,560
votesdb

00:06:23,520 --> 00:06:26,560
we'll create that now

00:06:33,039 --> 00:06:38,000
okay so now we have our votes db

00:06:35,440 --> 00:06:38,000
database

00:06:38,080 --> 00:06:41,120
i'm going to get the instance connection

00:06:40,160 --> 00:06:44,319
name

00:06:41,120 --> 00:06:49,759
you can get that from here

00:06:44,319 --> 00:06:51,199
in the console i'm going to copy it now

00:06:49,759 --> 00:06:54,800
alternatively you can get it from the

00:06:51,199 --> 00:06:59,039
command line by running the following

00:06:54,800 --> 00:06:59,039
gcloud sql instances

00:06:59,199 --> 00:07:06,000
describe my instance

00:07:02,800 --> 00:07:10,000
and type that to grep

00:07:06,000 --> 00:07:12,560
connection name and you can see there

00:07:10,000 --> 00:07:14,840
we have the same instance connection

00:07:12,560 --> 00:07:17,680
name information that i grabbed from the

00:07:14,840 --> 00:07:19,680
console we'll need that later

00:07:17,680 --> 00:07:22,240
when we are configuring the node.js

00:07:19,680 --> 00:07:22,240
application

00:07:24,000 --> 00:07:28,000
okay so now we need to create a service

00:07:25,919 --> 00:07:29,840
account that we can use

00:07:28,000 --> 00:07:31,520
with the application service accounts

00:07:29,840 --> 00:07:33,840
are used to grant permissions

00:07:31,520 --> 00:07:35,840
to use different services within your

00:07:33,840 --> 00:07:38,639
google cloud project

00:07:35,840 --> 00:07:39,199
so in this instance we will need one to

00:07:38,639 --> 00:07:41,039
give

00:07:39,199 --> 00:07:42,319
the cloud sql proxy that we'll be using

00:07:41,039 --> 00:07:44,319
with this application

00:07:42,319 --> 00:07:45,680
permission to connect to our cloud sql

00:07:44,319 --> 00:07:48,720
instance

00:07:45,680 --> 00:07:48,720
so let's do that now

00:07:49,360 --> 00:07:55,199
go here to service accounts

00:07:56,240 --> 00:08:02,720
you will create a new service account

00:07:59,599 --> 00:08:06,960
i will call it node

00:08:02,720 --> 00:08:06,960
demo click create

00:08:08,080 --> 00:08:12,000
okay for roles i'm going to filter for

00:08:10,240 --> 00:08:14,080
cloud sql

00:08:12,000 --> 00:08:16,879
and we will find the cloud sequel client

00:08:14,080 --> 00:08:21,280
role that's what we need in this case

00:08:16,879 --> 00:08:23,280
click continue and then done

00:08:21,280 --> 00:08:25,120
once that service account is created

00:08:23,280 --> 00:08:27,840
i'll click here

00:08:25,120 --> 00:08:27,840
to

00:08:29,039 --> 00:08:31,840
manage keys

00:08:33,120 --> 00:08:37,599
and we want to add or create a new

00:08:38,839 --> 00:08:45,120
key we want the json format

00:08:42,080 --> 00:08:48,320
so we'll click that and

00:08:45,120 --> 00:08:55,839
now we have this

00:08:48,320 --> 00:08:55,839
key created

00:08:56,880 --> 00:09:03,519
so i can click these three dots here

00:09:00,240 --> 00:09:04,399
and choose upload file and i will upload

00:09:03,519 --> 00:09:07,040
that

00:09:04,399 --> 00:09:09,839
json file that was just downloaded to my

00:09:07,040 --> 00:09:09,839
local machine

00:09:10,800 --> 00:09:14,640
so that's uploading and then when i type

00:09:12,560 --> 00:09:16,640
ls

00:09:14,640 --> 00:09:23,839
it's actually in our home directory so

00:09:16,640 --> 00:09:23,839
i'm going to move

00:09:27,440 --> 00:09:37,839
i'm going to move that json file here

00:09:31,279 --> 00:09:37,839
so we know where it is

00:09:38,880 --> 00:09:42,080
so as i mentioned before we're going to

00:09:40,399 --> 00:09:44,080
use the cloud sql proxy for

00:09:42,080 --> 00:09:47,279
communication between our application

00:09:44,080 --> 00:09:50,560
and the database instance

00:09:47,279 --> 00:09:53,040
so we will download that now with this

00:09:50,560 --> 00:09:53,040
command

00:09:55,600 --> 00:10:00,000
you can see that we have it here now and

00:09:58,320 --> 00:10:01,839
then to run the proxy we're going to use

00:10:00,000 --> 00:10:04,320
that instance connection name that we

00:10:01,839 --> 00:10:06,560
copied before

00:10:04,320 --> 00:10:08,720
as well as the path to our credential

00:10:06,560 --> 00:10:11,360
file

00:10:08,720 --> 00:10:14,320
i don't believe that i have that in my

00:10:11,360 --> 00:10:18,399
clipboard anymore so let's go ahead

00:10:14,320 --> 00:10:21,200
and get that again

00:10:18,399 --> 00:10:21,200
and copy it

00:10:21,920 --> 00:10:24,640
all right so

00:10:26,000 --> 00:10:30,720
cloud sql proxy credential

00:10:30,839 --> 00:10:34,399
file of clothes

00:10:40,480 --> 00:10:47,839
no demons

00:10:58,839 --> 00:11:05,279
instances

00:11:01,519 --> 00:11:14,480
and pass that into our connection name

00:11:05,279 --> 00:11:16,959
close this out so we can see

00:11:14,480 --> 00:11:19,440
okay so cloud sql proxy will pass in the

00:11:16,959 --> 00:11:21,839
path to our credential file

00:11:19,440 --> 00:11:24,000
for instances we'll set that to our

00:11:21,839 --> 00:11:27,360
instance connection name

00:11:24,000 --> 00:11:28,959
followed by equals tcp colon 5432 which

00:11:27,360 --> 00:11:31,760
is the port

00:11:28,959 --> 00:11:34,240
and ampersand so that runs in the

00:11:31,760 --> 00:11:35,839
background

00:11:34,240 --> 00:11:38,000
all right we know this is successful

00:11:35,839 --> 00:11:39,040
since it says ready for new connections

00:11:38,000 --> 00:11:43,360
here

00:11:39,040 --> 00:11:45,440
i'll close this so we have more space

00:11:43,360 --> 00:11:48,480
all right now we need to clone and test

00:11:45,440 --> 00:11:48,480
our application

00:11:49,920 --> 00:11:56,720
so we're going to be using the node.js

00:11:53,600 --> 00:11:58,959
documentation samples so i'll clone that

00:11:56,720 --> 00:11:58,959
now

00:12:00,079 --> 00:12:04,079
and we'll go into that directory

00:12:05,839 --> 00:12:12,000
sql and postgres connects

00:12:10,399 --> 00:12:13,760
all right here's where our application

00:12:12,000 --> 00:12:16,240
is i'm going to go ahead and run npm

00:12:13,760 --> 00:12:16,240
install

00:12:23,120 --> 00:12:27,920
which will take a few seconds here now

00:12:26,240 --> 00:12:29,519
we're going to set up some environment

00:12:27,920 --> 00:12:31,040
variables

00:12:29,519 --> 00:12:32,560
there's other ways of doing this but for

00:12:31,040 --> 00:12:34,480
the sake of this demo we're just going

00:12:32,560 --> 00:12:38,160
to use these environment variables here

00:12:34,480 --> 00:12:41,680
so cloud sql connection

00:12:38,160 --> 00:12:43,839
name i have forgotten our connection

00:12:41,680 --> 00:12:46,160
name so let's go back over and grab that

00:12:43,839 --> 00:12:46,160
again

00:12:48,639 --> 00:12:54,639
as a reminder you can get it from here

00:12:51,680 --> 00:12:54,639
i'm gonna paste that

00:12:56,880 --> 00:12:59,360
all right

00:13:01,040 --> 00:13:04,720
next we will export

00:13:05,760 --> 00:13:11,440
db host which we're going to set to

00:13:12,760 --> 00:13:18,560
127.0.0.1

00:13:14,959 --> 00:13:20,240
colon 5432 since we are running through

00:13:18,560 --> 00:13:21,760
the cloud sql proxy which is running

00:13:20,240 --> 00:13:25,440
locally

00:13:21,760 --> 00:13:29,040
okay next export db user

00:13:25,440 --> 00:13:35,760
our user is the postgres user

00:13:29,040 --> 00:13:39,760
export db

00:13:35,760 --> 00:13:43,040
which is the password we set up for it

00:13:39,760 --> 00:13:46,240
and then export db name

00:13:43,040 --> 00:13:49,760
and our db name is votes

00:13:46,240 --> 00:13:52,639
db all right so now in our sample

00:13:49,760 --> 00:13:56,079
application we have this

00:13:52,639 --> 00:13:58,000
create table dot js

00:13:56,079 --> 00:14:00,000
file we're going to run that and what

00:13:58,000 --> 00:14:01,199
that's going to do is create a database

00:14:00,000 --> 00:14:03,199
table that the app

00:14:01,199 --> 00:14:05,279
needs in order to run and it'll ensure

00:14:03,199 --> 00:14:08,800
that the database is properly configured

00:14:05,279 --> 00:14:10,639
then we'll start our sample app so to do

00:14:08,800 --> 00:14:13,920
that

00:14:10,639 --> 00:14:16,240
we are going to run the following so

00:14:13,920 --> 00:14:18,160
we'll run node createtable.js

00:14:16,240 --> 00:14:19,839
then we'll pass in that database user

00:14:18,160 --> 00:14:23,360
password name

00:14:19,839 --> 00:14:23,360
our cloud sql connection name

00:14:23,519 --> 00:14:27,040
votes and then our db host so these are

00:14:25,440 --> 00:14:29,040
just

00:14:27,040 --> 00:14:31,839
parameters are expected by this

00:14:29,040 --> 00:14:31,839
createtable.js

00:14:32,639 --> 00:14:36,079
all right looks good so it says it

00:14:34,240 --> 00:14:37,760
successfully created that votes table

00:14:36,079 --> 00:14:39,760
and then close the connection so we know

00:14:37,760 --> 00:14:42,000
we've got good connectivity here

00:14:39,760 --> 00:14:43,519
and we're ready to go so let's make sure

00:14:42,000 --> 00:14:44,000
this application worked we're going to

00:14:43,519 --> 00:14:47,680
go to

00:14:44,000 --> 00:14:49,920
web preview preview on

00:14:47,680 --> 00:14:53,199
port 8080. it's going to open in this

00:14:49,920 --> 00:14:54,560
new tab here and hopefully

00:14:53,199 --> 00:14:56,720
we forgot to actually start the

00:14:54,560 --> 00:15:00,720
application that's important

00:14:56,720 --> 00:15:00,720
so let's run npm start

00:15:03,040 --> 00:15:08,800
all right and now if we go here

00:15:06,480 --> 00:15:11,040
and refresh we should yes now we have

00:15:08,800 --> 00:15:12,800
access to our application so this demo

00:15:11,040 --> 00:15:14,639
application is a voting app where you

00:15:12,800 --> 00:15:17,839
can vote for tabs

00:15:14,639 --> 00:15:20,959
versus spaces so if i click here for

00:15:17,839 --> 00:15:22,720
spaces i can vote

00:15:20,959 --> 00:15:24,639
lots of people could vote if we had

00:15:22,720 --> 00:15:27,440
multiple people accessing this app for

00:15:24,639 --> 00:15:30,240
now i'm just going to put in a few votes

00:15:27,440 --> 00:15:32,639
mostly for spaces but we'll put one in

00:15:30,240 --> 00:15:34,320
for tabs just for good measure

00:15:32,639 --> 00:15:35,839
all right so now we've saved some data

00:15:34,320 --> 00:15:38,720
in the database by by

00:15:35,839 --> 00:15:38,720
making those votes

00:15:39,360 --> 00:15:43,199
now let's create a page to be able to

00:15:41,120 --> 00:15:44,399
view all votes instead of just recent

00:15:43,199 --> 00:15:46,720
votes here

00:15:44,399 --> 00:15:47,600
what you can see on the recent votes

00:15:46,720 --> 00:15:50,720
page

00:15:47,600 --> 00:15:52,399
it just shows the five most recent votes

00:15:50,720 --> 00:15:55,839
but let's say we had a lot of votes and

00:15:52,399 --> 00:15:55,839
we want to be able to view all of them

00:15:57,040 --> 00:16:02,880
i'll go ahead and do that now

00:16:00,399 --> 00:16:04,320
so ctrl c to stop the application i'm

00:16:02,880 --> 00:16:08,560
going to open up

00:16:04,320 --> 00:16:10,480
the editor in cloud shell here

00:16:08,560 --> 00:16:12,079
make it a little taller so you can see

00:16:10,480 --> 00:16:16,079
what we're doing

00:16:12,079 --> 00:16:19,040
and we're going to find

00:16:16,079 --> 00:16:19,040
server.js

00:16:21,519 --> 00:16:23,839
in here

00:16:25,279 --> 00:16:33,680
doc samples cloud sql

00:16:28,399 --> 00:16:33,680
postgres connects and then here we go

00:16:34,839 --> 00:16:37,839
server.js

00:16:38,959 --> 00:16:42,880
we'll add a new function let's find

00:16:40,720 --> 00:16:46,480
where we have get

00:16:42,880 --> 00:16:46,480
votes in here

00:16:46,720 --> 00:16:50,320
insert vote get votes and below that

00:16:48,959 --> 00:16:54,560
we're going to add a new function

00:16:50,320 --> 00:16:54,560
for get all votes

00:16:57,839 --> 00:17:05,839
then below where all the other routes

00:17:01,279 --> 00:17:05,839
are defined

00:17:06,959 --> 00:17:09,280
here

00:17:14,720 --> 00:17:20,240
we'll add a new one for get all votes as

00:17:17,839 --> 00:17:20,240
you can see

00:17:23,679 --> 00:17:30,000
okay and now we need to create a new

00:17:25,280 --> 00:17:30,000
file in our views directory

00:17:30,080 --> 00:17:35,039
new file i'm going to call this one all

00:17:33,200 --> 00:17:39,520
votes dot

00:17:35,039 --> 00:17:42,480
pug and i'll just paste in

00:17:39,520 --> 00:17:44,480
the code for this new page it's just

00:17:42,480 --> 00:17:48,160
going to be a page to

00:17:44,480 --> 00:17:48,160
display all the votes

00:17:50,160 --> 00:17:53,600
okay now we can switch back over to the

00:17:52,080 --> 00:17:55,760
terminal

00:17:53,600 --> 00:17:58,240
and run npm start again let's see how

00:17:55,760 --> 00:17:58,240
that goes

00:17:59,679 --> 00:18:02,320
the reason that we're doing this is to

00:18:00,960 --> 00:18:02,960
just make things a little bit more

00:18:02,320 --> 00:18:06,320
interesting

00:18:02,960 --> 00:18:07,600
once we use cloud's equal insights to

00:18:06,320 --> 00:18:12,559
look at the database

00:18:07,600 --> 00:18:12,559
activity so now if i add

00:18:12,720 --> 00:18:17,600
get all votes to our url here

00:18:16,080 --> 00:18:19,600
there you can see we've got a list of

00:18:17,600 --> 00:18:23,600
all the votes all eight of them

00:18:19,600 --> 00:18:23,600
that are present in the database

00:18:23,840 --> 00:18:29,039
all right so that's working

00:18:27,039 --> 00:18:30,640
now we want to enable sql commenter in

00:18:29,039 --> 00:18:33,679
our application

00:18:30,640 --> 00:18:35,200
now for every framework or orm that

00:18:33,679 --> 00:18:36,000
you're using this process will be a

00:18:35,200 --> 00:18:38,000
little bit different

00:18:36,000 --> 00:18:40,840
this is how we're going to do it for

00:18:38,000 --> 00:18:42,880
this particular app which is using

00:18:40,840 --> 00:18:45,919
connects

00:18:42,880 --> 00:18:47,919
so the first thing that we'll do is

00:18:45,919 --> 00:18:48,640
install the packages that sql commenter

00:18:47,919 --> 00:18:52,480
needs

00:18:48,640 --> 00:18:54,840
i'm going to do this all in one step

00:18:52,480 --> 00:18:58,160
with an npm install so we have google

00:18:54,840 --> 00:19:00,960
cloud sql commenter connect

00:18:58,160 --> 00:19:01,520
so on you can find the instructions for

00:19:00,960 --> 00:19:04,000
each

00:19:01,520 --> 00:19:06,080
orm framework in the sql commenter

00:19:04,000 --> 00:19:11,840
documentation

00:19:06,080 --> 00:19:11,840
we'll run this now

00:19:20,320 --> 00:19:24,960
great okay we'll switch back to the

00:19:22,840 --> 00:19:26,720
editor so now that we've got those

00:19:24,960 --> 00:19:30,000
dependencies set up

00:19:26,720 --> 00:19:33,919
we need to go back to our server.js file

00:19:30,000 --> 00:19:37,440
and let's go up to the top here

00:19:33,919 --> 00:19:39,039
of this file here

00:19:37,440 --> 00:19:42,000
after this we're going to add the

00:19:39,039 --> 00:19:42,000
following code

00:19:45,280 --> 00:19:53,520
here so add this require

00:19:48,480 --> 00:19:58,559
and then

00:19:53,520 --> 00:19:58,559
set it up to actually use it

00:20:01,840 --> 00:20:07,919
that will go here and again you can find

00:20:06,000 --> 00:20:11,840
these code snippets and the

00:20:07,919 --> 00:20:14,159
documentation in the sql commenter docs

00:20:11,840 --> 00:20:18,320
all right so that's all we need to do to

00:20:14,159 --> 00:20:18,320
enable sql commenter in this application

00:20:18,960 --> 00:20:24,000
if we've done that correctly now when we

00:20:20,880 --> 00:20:24,000
run npm start

00:20:25,280 --> 00:20:29,679
we should be good to go let's go back to

00:20:27,440 --> 00:20:33,120
our application

00:20:29,679 --> 00:20:37,039
and add some more data to the database

00:20:33,120 --> 00:20:37,039
now that we have sql commenter enabled

00:20:38,960 --> 00:20:46,080
so now the sql commenter is enabled

00:20:42,320 --> 00:20:48,480
there should be comments added

00:20:46,080 --> 00:20:50,320
into the logs that include some of the

00:20:48,480 --> 00:20:52,080
information about our application

00:20:50,320 --> 00:20:53,840
those application tags we talked about

00:20:52,080 --> 00:20:56,480
before

00:20:53,840 --> 00:21:00,320
those should be present now that we've

00:20:56,480 --> 00:21:00,320
enabled sql commenter in the application

00:21:00,480 --> 00:21:04,559
i'm going to go to that get all votes

00:21:02,400 --> 00:21:07,600
page again get all

00:21:04,559 --> 00:21:10,640
votes and for fun we'll just refresh

00:21:07,600 --> 00:21:10,640
this a few times

00:21:11,120 --> 00:21:16,799
okay now let's take a look at cloud sql

00:21:15,120 --> 00:21:18,799
insights so that we can view some of the

00:21:16,799 --> 00:21:20,880
query performance and look it into in

00:21:18,799 --> 00:21:24,080
tracing

00:21:20,880 --> 00:21:26,880
so if we go into our cloud sql instance

00:21:24,080 --> 00:21:28,799
this query insights link here or this

00:21:26,880 --> 00:21:32,159
link here below the main

00:21:28,799 --> 00:21:34,159
graph will take us to the query insights

00:21:32,159 --> 00:21:37,280
dashboard

00:21:34,159 --> 00:21:38,240
so here we go this top level query

00:21:37,280 --> 00:21:40,240
insights dashboard

00:21:38,240 --> 00:21:42,799
shows this database load all queries

00:21:40,240 --> 00:21:43,760
graph which contains things like cpu

00:21:42,799 --> 00:21:48,640
capacity

00:21:43,760 --> 00:21:48,640
cpu and cpu8 i08 and lock weight

00:21:50,720 --> 00:21:54,720
in this case the database query load is

00:21:53,120 --> 00:21:57,520
low so there aren't really any large

00:21:54,720 --> 00:22:00,240
spikes on the graph

00:21:57,520 --> 00:22:01,120
below this graph you can see a table of

00:22:00,240 --> 00:22:03,039
queries

00:22:01,120 --> 00:22:04,720
that contains normalized queries for

00:22:03,039 --> 00:22:08,480
whatever time range

00:22:04,720 --> 00:22:10,159
is selected here we have one hour

00:22:08,480 --> 00:22:11,840
so you can click into an individual

00:22:10,159 --> 00:22:13,280
query if you'd like to view detailed

00:22:11,840 --> 00:22:15,600
information about the query like

00:22:13,280 --> 00:22:18,080
database load for the specific query

00:22:15,600 --> 00:22:19,120
query latency query plan samples and top

00:22:18,080 --> 00:22:20,880
users

00:22:19,120 --> 00:22:22,559
but if an application is built using an

00:22:20,880 --> 00:22:23,840
orm like this one

00:22:22,559 --> 00:22:25,679
you may not know which part of the

00:22:23,840 --> 00:22:26,320
application is responsible for which

00:22:25,679 --> 00:22:28,080
query

00:22:26,320 --> 00:22:32,240
and that's what the top tags section

00:22:28,080 --> 00:22:32,240
here can help you understand

00:22:32,720 --> 00:22:38,080
so we'll toggle there to the tags table

00:22:36,240 --> 00:22:41,760
and now you can see database load broken

00:22:38,080 --> 00:22:44,240
out by which route generated the load

00:22:41,760 --> 00:22:46,640
so what you can see here is get all

00:22:44,240 --> 00:22:46,640
votes

00:22:47,200 --> 00:22:51,679
has more rows returned on average which

00:22:50,000 --> 00:22:54,080
makes sense

00:22:51,679 --> 00:22:55,919
the execution time isn't problematic in

00:22:54,080 --> 00:22:57,520
any of these cases but we're going to go

00:22:55,919 --> 00:23:00,159
ahead and click on get all votes

00:22:57,520 --> 00:23:02,080
anyway to look at it more detail one

00:23:00,159 --> 00:23:02,880
other thing to notice there is this row

00:23:02,080 --> 00:23:05,200
here

00:23:02,880 --> 00:23:07,360
where there is no route this is because

00:23:05,200 --> 00:23:08,400
before we enabled sql commenter in our

00:23:07,360 --> 00:23:10,480
application

00:23:08,400 --> 00:23:12,240
we didn't have any application tag

00:23:10,480 --> 00:23:14,880
information being passed through

00:23:12,240 --> 00:23:15,440
to cloud sql insights so you can still

00:23:14,880 --> 00:23:17,760
use it

00:23:15,440 --> 00:23:19,679
even without sql commenter enabled and

00:23:17,760 --> 00:23:21,919
see this query information

00:23:19,679 --> 00:23:23,120
but to get that added benefit of having

00:23:21,919 --> 00:23:25,520
application tags

00:23:23,120 --> 00:23:27,440
sql commenter must be enabled for your

00:23:25,520 --> 00:23:29,120
application

00:23:27,440 --> 00:23:30,799
so let's go ahead and click on get all

00:23:29,120 --> 00:23:36,400
votes and take a look

00:23:30,799 --> 00:23:38,000
at what data we can see in more detail

00:23:36,400 --> 00:23:40,000
you can click on one of the dots in the

00:23:38,000 --> 00:23:43,200
query plan samples graph to see

00:23:40,000 --> 00:23:45,120
a sample query plan now i'm going to

00:23:43,200 --> 00:23:47,919
switch to showing you

00:23:45,120 --> 00:23:49,840
query plans and end and tracing for a

00:23:47,919 --> 00:23:51,039
more complex application so that you can

00:23:49,840 --> 00:23:54,320
get a better sense

00:23:51,039 --> 00:23:56,559
for what you can see in the tool

00:23:54,320 --> 00:23:58,400
query plans show how postgres executes a

00:23:56,559 --> 00:24:00,320
query under the covers making it easier

00:23:58,400 --> 00:24:03,600
to determine if there's operations

00:24:00,320 --> 00:24:04,640
that result in slowness cloud sql

00:24:03,600 --> 00:24:07,039
insights also has

00:24:04,640 --> 00:24:08,799
in-context visualization of end-to-end

00:24:07,039 --> 00:24:10,320
tracing which can be helpful for doing

00:24:08,799 --> 00:24:12,080
further investigation

00:24:10,320 --> 00:24:14,960
into what parts of an application are

00:24:12,080 --> 00:24:16,720
generating slow queries

00:24:14,960 --> 00:24:18,720
to see it you can click the end to end

00:24:16,720 --> 00:24:21,039
tab to view an in-context

00:24:18,720 --> 00:24:21,039
trace

00:24:25,600 --> 00:24:29,039
note that you can learn even more about

00:24:27,039 --> 00:24:30,480
how to use and interpret the query plans

00:24:29,039 --> 00:24:32,480
and end-to-end tracing

00:24:30,480 --> 00:24:33,520
in the cloud sql insights documentation

00:24:32,480 --> 00:24:35,520
which we'll reference

00:24:33,520 --> 00:24:37,520
at the end of the presentation all right

00:24:35,520 --> 00:24:40,080
so now you've learned how to enable

00:24:37,520 --> 00:24:40,799
sql commenter in a node.js app that

00:24:40,080 --> 00:24:43,760
connects to

00:24:40,799 --> 00:24:45,039
a cloud sql postgres database and you've

00:24:43,760 --> 00:24:46,799
learned a little bit about how you can

00:24:45,039 --> 00:24:48,559
use cloud sql insights to monitor

00:24:46,799 --> 00:24:51,279
investigate query performance in that

00:24:48,559 --> 00:24:51,279
application

00:24:51,360 --> 00:24:54,559
on this slide we have a list of

00:24:52,880 --> 00:24:57,120
resources if you want to learn more

00:24:54,559 --> 00:24:58,640
about either sql commenter or cloud sql

00:24:57,120 --> 00:25:00,320
insights

00:24:58,640 --> 00:25:03,039
there's a link to the sql commenter

00:25:00,320 --> 00:25:04,799
documentation and the github repo

00:25:03,039 --> 00:25:06,799
and for cloud sql insights there's a

00:25:04,799 --> 00:25:08,799
link to the overview docs as well as a

00:25:06,799 --> 00:25:11,760
code lab that's very similar to the demo

00:25:08,799 --> 00:25:11,760
we showed you today

00:25:12,400 --> 00:25:16,480
thanks so much for joining us today to

00:25:14,320 --> 00:25:18,080
learn a bit more about sql commenter

00:25:16,480 --> 00:25:19,919
if you'd like to follow up with us you

00:25:18,080 --> 00:25:21,279
can reach us on twitter or email as

00:25:19,919 --> 00:25:23,520
shown on this slide

00:25:21,279 --> 00:25:25,120
we would love to hear your feedback so

00:25:23,520 --> 00:25:27,840
get in touch with any questions

00:25:25,120 --> 00:25:28,320
comments we'd be more than happy to hear

00:25:27,840 --> 00:25:32,240
from you

00:25:28,320 --> 00:25:32,240

YouTube URL: https://www.youtube.com/watch?v=8AgpgPhNilA


