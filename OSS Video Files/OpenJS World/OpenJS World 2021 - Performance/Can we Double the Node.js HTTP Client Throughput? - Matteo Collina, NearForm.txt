Title: Can we Double the Node.js HTTP Client Throughput? - Matteo Collina, NearForm
Publication date: 2021-05-31
Playlist: OpenJS World 2021 - Performance
Description: 
	The Node.js HTTP client is a fundamental part of any application, yet many think it cannot be improved. I took this as a challenge and Iâ€™m now ready to present a new HTTP client for Node.js, undici, that doubles the throughput of your application The story behind this improvement begins with the birth of TCP/IP and it is rooted in one of the fundamental limitations of networking: head-of-line blocking (HOL blocking). HOL blocking is one of those topics that developers blissfully ignore and yet it deeply impacts the runtime experience of the distributed applications that they build every day. Undici is a HTTP/1.1 client that avoids HOL blocking by using keep-alive and pipelining, resulting in a doubling of your application throughput.
Captions: 
	00:00:01,760 --> 00:00:05,920
hi everyone i am matteo colina

00:00:03,760 --> 00:00:08,559
and today we are going to talk about the

00:00:05,920 --> 00:00:11,599
node.js http client

00:00:08,559 --> 00:00:15,200
um what can be so interesting about it

00:00:11,599 --> 00:00:18,160
well what if i could tell you

00:00:15,200 --> 00:00:20,160
that um you know you could just double

00:00:18,160 --> 00:00:24,560
the throughput of your http client or

00:00:20,160 --> 00:00:27,920
even better uh maybe you know

00:00:24,560 --> 00:00:28,640
triple the triplet so you know we can do

00:00:27,920 --> 00:00:31,760
that

00:00:28,640 --> 00:00:32,960
and we'll see how a couple of things

00:00:31,760 --> 00:00:34,719
about me before we start

00:00:32,960 --> 00:00:36,480
i am matakolina you can follow me on

00:00:34,719 --> 00:00:39,840
twitter at motocolina please

00:00:36,480 --> 00:00:40,160
you know follow me back i'm also a part

00:00:39,840 --> 00:00:43,360
of

00:00:40,160 --> 00:00:44,879
nier form uh technical directors there

00:00:43,360 --> 00:00:46,399
we are professional services company

00:00:44,879 --> 00:00:49,200
based in ireland so

00:00:46,399 --> 00:00:49,760
if you are interested you know working

00:00:49,200 --> 00:00:51,520
for us

00:00:49,760 --> 00:00:53,360
check us out we are hired globally and

00:00:51,520 --> 00:00:55,039
remotely so hey

00:00:53,360 --> 00:00:56,640
we are also i'm also a member of the

00:00:55,039 --> 00:00:59,680
nodejs technical steering committee

00:00:56,640 --> 00:01:01,920
so i'm part of the of node

00:00:59,680 --> 00:01:02,960
and i'm the co-creator of a few bits and

00:01:01,920 --> 00:01:05,760
bobs on

00:01:02,960 --> 00:01:06,159
npm i also write every week and i take

00:01:05,760 --> 00:01:08,159
an

00:01:06,159 --> 00:01:09,600
unused letter called nodeland so you

00:01:08,159 --> 00:01:14,080
know check us out

00:01:09,600 --> 00:01:15,759
um anyway uh i maintain a lot of open

00:01:14,080 --> 00:01:18,880
source including node

00:01:15,759 --> 00:01:21,920
so uh as part of my activity of both

00:01:18,880 --> 00:01:25,360
as a consultant and as as a

00:01:21,920 --> 00:01:27,680
maintainer i tend to strike and maintain

00:01:25,360 --> 00:01:30,799
a balance and feedbacks my learning

00:01:27,680 --> 00:01:32,640
from when i help companies to when i

00:01:30,799 --> 00:01:35,439
maintain things in the ecosystem

00:01:32,640 --> 00:01:36,880
as part of this activity i tend to write

00:01:35,439 --> 00:01:38,840
and build new things when the

00:01:36,880 --> 00:01:42,479
opportunity arises

00:01:38,840 --> 00:01:45,040
so uh most applications

00:01:42,479 --> 00:01:46,240
start as a monolith uh you know there's

00:01:45,040 --> 00:01:48,079
nothing bad about talking about

00:01:46,240 --> 00:01:49,439
monoliths most apps start as a monolith

00:01:48,079 --> 00:01:52,479
they're great

00:01:49,439 --> 00:01:53,439
uh and fastify the framework framework

00:01:52,479 --> 00:01:57,680
that i've built

00:01:53,439 --> 00:02:01,600
is great for building monoliths so um

00:01:57,680 --> 00:02:05,040
you know it's uh it has almost 900 000

00:02:01,600 --> 00:02:07,200
downloads per month and 15 collaborators

00:02:05,040 --> 00:02:08,959
we are working on version 4 now and we

00:02:07,200 --> 00:02:12,080
have a lot of ecosystem plugins

00:02:08,959 --> 00:02:14,560
so it's pretty great and it works really

00:02:12,080 --> 00:02:17,120
well it's also part of the openjs

00:02:14,560 --> 00:02:18,640
foundation so i have another talk about

00:02:17,120 --> 00:02:19,440
it so i'm not going to spend so much

00:02:18,640 --> 00:02:23,040
time about

00:02:19,440 --> 00:02:25,760
about fastify um

00:02:23,040 --> 00:02:27,680
however once we are built our monolith

00:02:25,760 --> 00:02:29,760
one of the hardest question is how do we

00:02:27,680 --> 00:02:32,319
start scaling our teams how do we start

00:02:29,760 --> 00:02:32,319
scaling

00:02:34,080 --> 00:02:38,720
how do we start oh sorry how do we start

00:02:37,040 --> 00:02:39,920
scaling our teams how do we start

00:02:38,720 --> 00:02:43,040
improving our system

00:02:39,920 --> 00:02:47,040
well we'll see that in a second so

00:02:43,040 --> 00:02:51,040
um the what we want to do in those cases

00:02:47,040 --> 00:02:53,519
is that is we want to

00:02:51,040 --> 00:02:55,519
is we want to move to what's called a

00:02:53,519 --> 00:02:58,159
micro service architecture

00:02:55,519 --> 00:02:58,720
and where we have some sort of gateway

00:02:58,159 --> 00:03:01,599
that

00:02:58,720 --> 00:03:02,879
talks to several microservices as you

00:03:01,599 --> 00:03:07,920
can see in

00:03:02,879 --> 00:03:07,920
in our as you can see in your um

00:03:08,000 --> 00:03:14,720
in the slide so however this is not

00:03:11,280 --> 00:03:17,760
just that because in most complex

00:03:14,720 --> 00:03:20,800
uh in the most complex

00:03:17,760 --> 00:03:23,200
enterprises and projects the reality is

00:03:20,800 --> 00:03:24,720
way way way more uh gets very

00:03:23,200 --> 00:03:26,560
complicated very quickly because you

00:03:24,720 --> 00:03:28,000
have several layers of microservices

00:03:26,560 --> 00:03:29,920
that talk to each other

00:03:28,000 --> 00:03:31,280
now the throughput and latency that each

00:03:29,920 --> 00:03:35,840
one of those introduce

00:03:31,280 --> 00:03:38,640
it it's critical for the system so

00:03:35,840 --> 00:03:39,599
and it's one of the most bits that tend

00:03:38,640 --> 00:03:43,120
to not

00:03:39,599 --> 00:03:45,440
tend to be overlooked when uh opting for

00:03:43,120 --> 00:03:48,720
uh microservice architecture

00:03:45,440 --> 00:03:50,959
so and by the way fastify is

00:03:48,720 --> 00:03:52,560
uh one of the architectures fastify is

00:03:50,959 --> 00:03:54,720
great for building microservices

00:03:52,560 --> 00:03:56,799
also lambdas by the way but it's great

00:03:54,720 --> 00:03:58,840
for building micro services so please

00:03:56,799 --> 00:04:00,239
use fastify when we're building micro

00:03:58,840 --> 00:04:02,480
services

00:04:00,239 --> 00:04:03,680
as part of this talk we are going to go

00:04:02,480 --> 00:04:06,159
through and look

00:04:03,680 --> 00:04:08,720
at these links between the microservices

00:04:06,159 --> 00:04:13,439
and now we can use http to provide some

00:04:08,720 --> 00:04:15,280
debug a link between the microservices

00:04:13,439 --> 00:04:16,400
easily debuggable but also very very

00:04:15,280 --> 00:04:19,519
performant

00:04:16,400 --> 00:04:23,280
so let's uh

00:04:19,519 --> 00:04:26,160
let's dig deep into into this topic okay

00:04:23,280 --> 00:04:26,160
so um

00:04:26,840 --> 00:04:31,199
it's um you know look at this because

00:04:30,720 --> 00:04:33,600
it's

00:04:31,199 --> 00:04:34,400
if you want to make it fast it's you

00:04:33,600 --> 00:04:37,600
know

00:04:34,400 --> 00:04:39,280
uh that link can add up pretty quickly

00:04:37,600 --> 00:04:41,280
because if you add more more levels of

00:04:39,280 --> 00:04:42,080
latency you know if that link becomes

00:04:41,280 --> 00:04:45,680
low

00:04:42,080 --> 00:04:47,600
then all all your system is low so

00:04:45,680 --> 00:04:49,840
let's take about a little very simple

00:04:47,600 --> 00:04:51,280
server this server is an http server

00:04:49,840 --> 00:04:53,840
virtually node

00:04:51,280 --> 00:04:54,840
that you know just respond with a given

00:04:53,840 --> 00:04:58,000
timeout

00:04:54,840 --> 00:05:01,360
easy and the client

00:04:58,000 --> 00:05:05,440
the http client for this is uh

00:05:01,360 --> 00:05:06,960
uh again it's very simple

00:05:05,440 --> 00:05:08,560
you call it shipping.get but you can

00:05:06,960 --> 00:05:12,880
also use axios

00:05:08,560 --> 00:05:16,000
nodefetch request got whatever you have

00:05:12,880 --> 00:05:16,479
and you can call and then you can just

00:05:16,000 --> 00:05:18,720
you know

00:05:16,479 --> 00:05:19,919
pipe it pipe the answer back somewhere

00:05:18,720 --> 00:05:22,160
somewhere

00:05:19,919 --> 00:05:22,960
note that this call this system by

00:05:22,160 --> 00:05:26,160
default

00:05:22,960 --> 00:05:29,120
allocates a new tcp socket for every ccp

00:05:26,160 --> 00:05:30,800
for every http request so one new socket

00:05:29,120 --> 00:05:34,080
for every request and we get

00:05:30,800 --> 00:05:37,280
we dispose it this is not efficient

00:05:34,080 --> 00:05:38,080
creating a socket we'll see it's this is

00:05:37,280 --> 00:05:40,240
not efficient

00:05:38,080 --> 00:05:41,919
because creating a socket involves

00:05:40,240 --> 00:05:45,600
several round trips

00:05:41,919 --> 00:05:47,919
so on the on our uh on the on the server

00:05:45,600 --> 00:05:48,639
so essentially when you establish a new

00:05:47,919 --> 00:05:50,639
socket

00:05:48,639 --> 00:05:52,720
you need to do a sin you need to send a

00:05:50,639 --> 00:05:54,400
synth type packet which then needs to be

00:05:52,720 --> 00:05:56,639
replied by the server

00:05:54,400 --> 00:05:58,080
now this is a back and forth and you are

00:05:56,639 --> 00:06:01,360
actually losing

00:05:58,080 --> 00:06:03,759
uh milliseconds here so if you're

00:06:01,360 --> 00:06:05,600
on a very fast network like a server

00:06:03,759 --> 00:06:07,680
this is actually not a big problem

00:06:05,600 --> 00:06:09,600
but um you know you still have to

00:06:07,680 --> 00:06:11,199
allocate you know file descriptions in

00:06:09,600 --> 00:06:12,720
your open system system and so on so

00:06:11,199 --> 00:06:16,000
forth so there's a limited amount of

00:06:12,720 --> 00:06:16,000
these things that you can use

00:06:16,800 --> 00:06:21,120
note that you get a little bit of of

00:06:19,759 --> 00:06:24,319
latency as well

00:06:21,120 --> 00:06:26,800
and part of the problem is also due to

00:06:24,319 --> 00:06:28,160
the so-called tcp congestion window as

00:06:26,800 --> 00:06:29,600
shown in this diagram

00:06:28,160 --> 00:06:31,440
by the way these diagrams are from a

00:06:29,600 --> 00:06:33,520
book called high performance browser

00:06:31,440 --> 00:06:34,000
networking which i would highly

00:06:33,520 --> 00:06:37,039
recommend

00:06:34,000 --> 00:06:40,560
you to uh to go and read

00:06:37,039 --> 00:06:43,280
so this book it's so this is

00:06:40,560 --> 00:06:43,919
these congestion windows what you have

00:06:43,280 --> 00:06:46,080
is

00:06:43,919 --> 00:06:47,440
you you can see that if i'm sending a

00:06:46,080 --> 00:06:50,479
big packet

00:06:47,440 --> 00:06:52,400
on a freshly created socket uh

00:06:50,479 --> 00:06:54,720
say sorry if i'm sending a big file on

00:06:52,400 --> 00:06:56,400
on a freshly created socket

00:06:54,720 --> 00:06:58,560
you know i need to do a lot of round

00:06:56,400 --> 00:06:59,599
trips because every once in a while i

00:06:58,560 --> 00:07:01,840
need to send a knack

00:06:59,599 --> 00:07:03,360
to the server and this is very important

00:07:01,840 --> 00:07:05,120
for http for tcp

00:07:03,360 --> 00:07:07,919
because it ensures that all the packets

00:07:05,120 --> 00:07:11,919
arrives in order

00:07:07,919 --> 00:07:12,479
however you know the congestion windows

00:07:11,919 --> 00:07:16,400
grows

00:07:12,479 --> 00:07:18,160
over time and at some point it's it's

00:07:16,400 --> 00:07:20,080
with using an algorithms and so on it

00:07:18,160 --> 00:07:21,680
stabilizes i don't want to enter all of

00:07:20,080 --> 00:07:24,400
this stuff it's very important

00:07:21,680 --> 00:07:25,280
but you know outside of this talk what

00:07:24,400 --> 00:07:28,240
is important

00:07:25,280 --> 00:07:30,479
is that if i have if my socket has been

00:07:28,240 --> 00:07:32,639
open for a while

00:07:30,479 --> 00:07:35,039
the congestion windows is higher and

00:07:32,639 --> 00:07:37,360
because it's higher

00:07:35,039 --> 00:07:39,199
we can all we can send a lot of data

00:07:37,360 --> 00:07:41,759
before sending a knack

00:07:39,199 --> 00:07:43,199
now in the example on the right you can

00:07:41,759 --> 00:07:45,120
see that if a big

00:07:43,199 --> 00:07:46,720
if we have a biggest congestion window

00:07:45,120 --> 00:07:49,840
we can always we can send

00:07:46,720 --> 00:07:50,720
all our data in without receiving a

00:07:49,840 --> 00:07:54,560
knack from the

00:07:50,720 --> 00:07:56,800
from the sender this the in this way

00:07:54,560 --> 00:07:58,160
we are actually reducing a lot uh

00:07:56,800 --> 00:08:01,199
reducing the latency

00:07:58,160 --> 00:08:02,720
quite a lot so in order to ensure the

00:08:01,199 --> 00:08:03,599
maximum bandwidth and the minimum

00:08:02,720 --> 00:08:06,400
latency

00:08:03,599 --> 00:08:06,960
we must reuse existing connections right

00:08:06,400 --> 00:08:08,560
is that

00:08:06,960 --> 00:08:11,440
you know it's it's this is a fair

00:08:08,560 --> 00:08:14,319
assessment um

00:08:11,440 --> 00:08:16,160
so what it means what we we were doing

00:08:14,319 --> 00:08:16,479
before creating a new connection every

00:08:16,160 --> 00:08:20,080
time

00:08:16,479 --> 00:08:20,720
is not efficient so in in node core we

00:08:20,080 --> 00:08:23,680
offer

00:08:20,720 --> 00:08:26,000
a construct to do this which is creating

00:08:23,680 --> 00:08:28,400
an http agent

00:08:26,000 --> 00:08:30,879
http agents can keep the connection

00:08:28,400 --> 00:08:32,959
alive so it avoids the handshake and

00:08:30,879 --> 00:08:35,680
maximize the connection window it uses

00:08:32,959 --> 00:08:38,399
the keeper http 1.1 keep alive it's a

00:08:35,680 --> 00:08:40,959
key feature of http 1.1

00:08:38,399 --> 00:08:41,919
this is actually critical for tls

00:08:40,959 --> 00:08:44,159
connections

00:08:41,919 --> 00:08:45,920
because on top of the tcpn shake you

00:08:44,159 --> 00:08:48,000
will also have the tls and shake

00:08:45,920 --> 00:08:49,680
so if you don't have an agent and you're

00:08:48,000 --> 00:08:51,920
calling with https

00:08:49,680 --> 00:08:53,200
services you you're setting yourself up

00:08:51,920 --> 00:08:55,760
for trouble

00:08:53,200 --> 00:08:56,959
note that this is not the default so you

00:08:55,760 --> 00:08:58,880
need to either to config

00:08:56,959 --> 00:09:01,120
you need to configure it manually for

00:08:58,880 --> 00:09:03,680
your http client or to set it

00:09:01,120 --> 00:09:05,600
to configure as a default in node so

00:09:03,680 --> 00:09:08,480
it's very important that you do

00:09:05,600 --> 00:09:09,680
because the difference can be staggering

00:09:08,480 --> 00:09:15,120
now

00:09:09,680 --> 00:09:15,120
let's turn the idea into reality

00:09:15,839 --> 00:09:20,880
one of the the service scenario that i'm

00:09:19,760 --> 00:09:24,000
going to test

00:09:20,880 --> 00:09:27,440
it involves doing a a 500

00:09:24,000 --> 00:09:32,640
request to one server and it's

00:09:27,440 --> 00:09:32,640
uh which in turn does you know

00:09:33,519 --> 00:09:39,279
another five uh

00:09:36,560 --> 00:09:40,480
five requests to other microservices so

00:09:39,279 --> 00:09:46,160
essentially

00:09:40,480 --> 00:09:51,360
uh it's uh um you know it's a lot of

00:09:46,160 --> 00:09:53,040
it's a lot of requests okay um

00:09:51,360 --> 00:09:54,880
the server takes 10 milliseconds to

00:09:53,040 --> 00:09:55,600
process the request and the client has a

00:09:54,880 --> 00:09:58,480
limit of

00:09:55,600 --> 00:10:00,320
50 sockets so all of these is fictional

00:09:58,480 --> 00:10:03,519
so don't worry too much about it

00:10:00,320 --> 00:10:05,279
do your measurements but the difference

00:10:03,519 --> 00:10:08,800
is staggering

00:10:05,279 --> 00:10:09,360
so if you don't do keep alive you will

00:10:08,800 --> 00:10:13,040
be in

00:10:09,360 --> 00:10:16,399
very very very huge trouble

00:10:13,040 --> 00:10:21,279
use http agent with keep alive

00:10:16,399 --> 00:10:21,279
full stop the difference can be enormous

00:10:21,920 --> 00:10:25,680
um so the key the secondary question

00:10:24,000 --> 00:10:29,279
then after you've seen how we can

00:10:25,680 --> 00:10:33,279
improve the uh our client

00:10:29,279 --> 00:10:35,760
uh you know it's

00:10:33,279 --> 00:10:37,440
we can use an agent then right but can

00:10:35,760 --> 00:10:41,920
we still can we improve things

00:10:37,440 --> 00:10:44,160
further well we can actually we can

00:10:41,920 --> 00:10:46,320
how well you know we need to go back

00:10:44,160 --> 00:10:48,560
into this pack and look what's there

00:10:46,320 --> 00:10:49,839
so is there something in http that can

00:10:48,560 --> 00:10:52,079
allow us to actually

00:10:49,839 --> 00:10:52,079
you know

00:10:52,880 --> 00:10:59,760
work at a higher speed well there is

00:10:56,880 --> 00:11:00,079
so one of the important bits is this

00:10:59,760 --> 00:11:04,399
thing

00:11:00,079 --> 00:11:09,200
called hdp 1.1 pipelining

00:11:04,399 --> 00:11:09,200
http 1.1 pipelining is

00:11:09,760 --> 00:11:13,519
allows to send more than one request at

00:11:12,320 --> 00:11:16,959
the same time

00:11:13,519 --> 00:11:18,160
using the uh more than one request at

00:11:16,959 --> 00:11:20,520
the same time

00:11:18,160 --> 00:11:22,160
it's great so um

00:11:20,520 --> 00:11:25,040
[Music]

00:11:22,160 --> 00:11:26,959
minus one thing you know all the

00:11:25,040 --> 00:11:29,200
responses with http 1.1

00:11:26,959 --> 00:11:30,800
needs to be received in order so it's

00:11:29,200 --> 00:11:33,040
suffer for

00:11:30,800 --> 00:11:35,440
the so-called head of line blocking so

00:11:33,040 --> 00:11:38,320
if the first request takes a lot of time

00:11:35,440 --> 00:11:38,880
everything will have to wait however

00:11:38,320 --> 00:11:40,720
these

00:11:38,880 --> 00:11:42,800
it's it's a good technique it's

00:11:40,720 --> 00:11:44,720
important to know that this is possible

00:11:42,800 --> 00:11:46,240
because we can actually use it on our

00:11:44,720 --> 00:11:47,839
server to server

00:11:46,240 --> 00:11:49,360
note that out of line we need to talk a

00:11:47,839 --> 00:11:49,839
little bit about that offline blocking

00:11:49,360 --> 00:11:52,480
though

00:11:49,839 --> 00:11:54,560
because if uh if you're doing this and

00:11:52,480 --> 00:11:58,079
you start losing packets

00:11:54,560 --> 00:12:01,040
or you know having a single slow request

00:11:58,079 --> 00:12:01,839
you can actually block all the incoming

00:12:01,040 --> 00:12:05,360
requests

00:12:01,839 --> 00:12:08,240
uh for a while so be careful

00:12:05,360 --> 00:12:09,279
on how much you are pipelining the other

00:12:08,240 --> 00:12:12,639
important part

00:12:09,279 --> 00:12:13,360
that we need to uh to talk before you

00:12:12,639 --> 00:12:15,680
know making

00:12:13,360 --> 00:12:16,480
uh a recommendation and you know

00:12:15,680 --> 00:12:19,040
discussing

00:12:16,480 --> 00:12:19,920
how and why we can actually improve the

00:12:19,040 --> 00:12:23,360
speed

00:12:19,920 --> 00:12:25,600
is the event loop um the in the event

00:12:23,360 --> 00:12:28,959
loop with node.js event loop

00:12:25,600 --> 00:12:29,279
we have um an event that uh you know

00:12:28,959 --> 00:12:31,440
when

00:12:29,279 --> 00:12:32,880
we actually we have a we have so called

00:12:31,440 --> 00:12:36,480
events so it's called even loop

00:12:32,880 --> 00:12:38,639
you know um events are

00:12:36,480 --> 00:12:40,800
are not javascript though so we have you

00:12:38,639 --> 00:12:42,240
have i o events iu events are can be

00:12:40,800 --> 00:12:43,839
produced by the kernel or can be

00:12:42,240 --> 00:12:47,519
produced by threadpool

00:12:43,839 --> 00:12:50,800
and those events get put into a queue

00:12:47,519 --> 00:12:53,920
once once an event is there node.js

00:12:50,800 --> 00:12:54,959
can fetch that event and process it with

00:12:53,920 --> 00:12:56,959
javascript

00:12:54,959 --> 00:12:58,639
that's what it does that's all all of it

00:12:56,959 --> 00:13:00,079
does and

00:12:58,639 --> 00:13:02,720
with javascript you can schedule more

00:13:00,079 --> 00:13:05,040
events to happen in the future

00:13:02,720 --> 00:13:06,399
and then those will be cued or maybe we

00:13:05,040 --> 00:13:08,480
can just say oh and

00:13:06,399 --> 00:13:10,880
i finished processing this event uh

00:13:08,480 --> 00:13:13,279
please uh send me the next one

00:13:10,880 --> 00:13:14,880
that's what it does how does this

00:13:13,279 --> 00:13:16,079
relating to pipelining we'll get there

00:13:14,880 --> 00:13:18,959
in a second

00:13:16,079 --> 00:13:21,760
but one of the important bit is to tell

00:13:18,959 --> 00:13:25,279
to note how can we make things fast

00:13:21,760 --> 00:13:27,920
in in

00:13:25,279 --> 00:13:29,440
in node so in order to make things fast

00:13:27,920 --> 00:13:30,639
you need to understand when the event

00:13:29,440 --> 00:13:33,360
loop is blocked

00:13:30,639 --> 00:13:34,480
so if you're doing massive io like in

00:13:33,360 --> 00:13:36,280
this case

00:13:34,480 --> 00:13:38,320
you need to you want to

00:13:36,280 --> 00:13:41,440
[Music]

00:13:38,320 --> 00:13:41,440
maximize the

00:13:42,000 --> 00:13:45,760
you want to maximize the time that

00:13:43,680 --> 00:13:48,480
node.js is doing io

00:13:45,760 --> 00:13:49,199
this means minimizing the time david

00:13:48,480 --> 00:13:51,519
loop is

00:13:49,199 --> 00:13:53,760
blocked right well the event loop is

00:13:51,519 --> 00:13:56,480
blocked when we are executing javascript

00:13:53,760 --> 00:13:58,399
so in order to make things fast we need

00:13:56,480 --> 00:13:59,120
to reduce the amount of time we spend in

00:13:58,399 --> 00:14:03,760
javascript

00:13:59,120 --> 00:14:06,800
down to zero if possible

00:14:03,760 --> 00:14:09,360
and it's uh this

00:14:06,800 --> 00:14:09,839
is the key technique that we have used

00:14:09,360 --> 00:14:13,199
in

00:14:09,839 --> 00:14:16,800
in we can use to improve things okay so

00:14:13,199 --> 00:14:20,480
um because

00:14:16,800 --> 00:14:21,839
because we can uh because we can

00:14:20,480 --> 00:14:25,440
schedule things you know

00:14:21,839 --> 00:14:27,760
with http pipelining um

00:14:25,440 --> 00:14:29,680
one of the that technique combined with

00:14:27,760 --> 00:14:32,959
the event loop logic

00:14:29,680 --> 00:14:34,320
can make sure that when we are

00:14:32,959 --> 00:14:36,560
processing things

00:14:34,320 --> 00:14:38,480
we are you know processing a lot of

00:14:36,560 --> 00:14:40,639
events a lot of things from the server

00:14:38,480 --> 00:14:45,120
or for the client and so on and so forth

00:14:40,639 --> 00:14:48,320
so it's important note that

00:14:45,120 --> 00:14:50,560
it's it's also important to note

00:14:48,320 --> 00:14:50,560
that

00:14:51,519 --> 00:14:55,120
with http pipelining you are going to

00:14:54,639 --> 00:14:57,279
have

00:14:55,120 --> 00:14:59,360
a lot of econ results you're risking

00:14:57,279 --> 00:15:01,839
economizat so if the other side is

00:14:59,360 --> 00:15:05,600
truncating your connection before

00:15:01,839 --> 00:15:09,199
uh you sent any data so

00:15:05,600 --> 00:15:12,560
recently we have changed the keep alive

00:15:09,199 --> 00:15:13,600
the keep alive agent to a logic of lifo

00:15:12,560 --> 00:15:15,680
so last in first

00:15:13,600 --> 00:15:17,519
out this means that this reduces the

00:15:15,680 --> 00:15:20,320
amount of

00:15:17,519 --> 00:15:20,800
these tend to use the most fresh sockets

00:15:20,320 --> 00:15:24,320
so

00:15:20,800 --> 00:15:25,839
it reduces the risk of them timing out

00:15:24,320 --> 00:15:27,519
still the risk is still there though so

00:15:25,839 --> 00:15:28,480
do you need to configure your keep a

00:15:27,519 --> 00:15:33,120
live timeout

00:15:28,480 --> 00:15:34,880
well um so

00:15:33,120 --> 00:15:36,800
considering all of the knowledge that we

00:15:34,880 --> 00:15:40,880
have went through so far

00:15:36,800 --> 00:15:43,519
uh i am going to uh to show you

00:15:40,880 --> 00:15:45,360
the one of the best thing that i that

00:15:43,519 --> 00:15:49,040
i've wrote in in a while

00:15:45,360 --> 00:15:53,040
which is this new library called oh it's

00:15:49,040 --> 00:15:56,720
well it's an italian word that means 11.

00:15:53,040 --> 00:15:58,000
why 11 well one if you consider the

00:15:56,720 --> 00:16:02,800
number one one

00:15:58,000 --> 00:16:05,759
then we have hdp 1.1 so you see

00:16:02,800 --> 00:16:06,839
um which is perfectly great uh note that

00:16:05,759 --> 00:16:10,800
this

00:16:06,839 --> 00:16:14,399
is totally a stranger things reference

00:16:10,800 --> 00:16:17,040
so if you don't you know if you

00:16:14,399 --> 00:16:18,959
if you're wondering if it's a why it's

00:16:17,040 --> 00:16:20,959
called undies it's also it's totally

00:16:18,959 --> 00:16:23,279
because stranger things because

00:16:20,959 --> 00:16:24,240
when i was starting working on this

00:16:23,279 --> 00:16:27,440
library

00:16:24,240 --> 00:16:30,000
i ended up writing a

00:16:27,440 --> 00:16:31,680
strangest thing was just came out so in

00:16:30,000 --> 00:16:32,000
fact i've been developing this library

00:16:31,680 --> 00:16:35,120
for

00:16:32,000 --> 00:16:38,240
quite a long time um so

00:16:35,120 --> 00:16:41,440
how does undigi work well this is a new

00:16:38,240 --> 00:16:44,720
uh library for uh for node and

00:16:41,440 --> 00:16:46,800
uh it keep alive by default so you don't

00:16:44,720 --> 00:16:50,000
need to configure a keep a live agent

00:16:46,800 --> 00:16:53,759
uh it also uh adds

00:16:50,000 --> 00:16:56,959
a lifo it also had a lethal

00:16:53,759 --> 00:16:59,199
ali for scheduler so by default again

00:16:56,959 --> 00:17:00,000
uh it does not do any pipelining by

00:16:59,199 --> 00:17:02,000
default

00:17:00,000 --> 00:17:03,440
but it can be configured to do so and it

00:17:02,000 --> 00:17:04,799
can create a limited connection

00:17:03,440 --> 00:17:07,520
or by the way you can also follow

00:17:04,799 --> 00:17:09,839
redirect note that this is really fresh

00:17:07,520 --> 00:17:11,280
um it's a fresh syntax it uses promises

00:17:09,839 --> 00:17:11,839
you can also use callbacks if you want

00:17:11,280 --> 00:17:15,439
but

00:17:11,839 --> 00:17:16,160
maybe not and basically you can just you

00:17:15,439 --> 00:17:18,400
know just

00:17:16,160 --> 00:17:20,160
use the things that you like the most

00:17:18,400 --> 00:17:20,720
it's very simple to use note that you

00:17:20,160 --> 00:17:23,120
can

00:17:20,720 --> 00:17:23,839
only choose similar to node node as a

00:17:23,120 --> 00:17:26,000
concept of

00:17:23,839 --> 00:17:27,360
agent and you can configure a global

00:17:26,000 --> 00:17:28,799
agent if you want to do so

00:17:27,360 --> 00:17:30,799
you can configure for example the

00:17:28,799 --> 00:17:33,200
pipelining factors so wundich

00:17:30,799 --> 00:17:34,400
is fully capable of doing a http

00:17:33,200 --> 00:17:36,480
pipelining

00:17:34,400 --> 00:17:37,679
don't pipeline too much because you risk

00:17:36,480 --> 00:17:39,840
a lot

00:17:37,679 --> 00:17:40,799
but you can also configure the number of

00:17:39,840 --> 00:17:42,880
connection

00:17:40,799 --> 00:17:44,080
for to each destination if you want to

00:17:42,880 --> 00:17:47,360
do so so

00:17:44,080 --> 00:17:49,840
it's actually pretty great that you can

00:17:47,360 --> 00:17:50,480
configure all those things uh note that

00:17:49,840 --> 00:17:52,400
if you're doing

00:17:50,480 --> 00:17:54,799
if you're using unity for testing you

00:17:52,400 --> 00:17:55,360
might want to disable or reduce deeply

00:17:54,799 --> 00:17:57,919
reduce

00:17:55,360 --> 00:17:59,200
the keep alive so you can actually

00:17:57,919 --> 00:18:01,039
change the setting

00:17:59,200 --> 00:18:04,640
and essentially configure the global

00:18:01,039 --> 00:18:04,640
dispatcher for for the thing

00:18:05,440 --> 00:18:08,640
you can also use the lower level apis so

00:18:07,840 --> 00:18:11,520
you can conf

00:18:08,640 --> 00:18:13,280
create a pool for a target destination

00:18:11,520 --> 00:18:15,360
so it creates a pool with a target

00:18:13,280 --> 00:18:17,679
pipelining and connection numbers

00:18:15,360 --> 00:18:18,720
um and then you can just call request as

00:18:17,679 --> 00:18:21,280
it was before

00:18:18,720 --> 00:18:22,559
you can create a client a client map one

00:18:21,280 --> 00:18:25,280
single socket

00:18:22,559 --> 00:18:25,600
again you can do all those things uh you

00:18:25,280 --> 00:18:28,400
know

00:18:25,600 --> 00:18:30,000
it's uh one at a time we also have these

00:18:28,400 --> 00:18:33,280
interesting methods

00:18:30,000 --> 00:18:35,280
called uh stream request

00:18:33,280 --> 00:18:36,720
dispatch we have pipeline we have a lot

00:18:35,280 --> 00:18:39,360
of things we have a lot of options

00:18:36,720 --> 00:18:41,600
in term of uh integration that you can

00:18:39,360 --> 00:18:45,120
do

00:18:41,600 --> 00:18:48,799
uh oh by the way i was almost uh

00:18:45,120 --> 00:18:50,720
forgetting we also have support for max

00:18:48,799 --> 00:18:53,280
this is one of the greatest thing that i

00:18:50,720 --> 00:18:55,679
really wanted to get in on the gv4

00:18:53,280 --> 00:18:56,880
this is not in v3 when the gv4 is coming

00:18:55,679 --> 00:18:58,320
out these days

00:18:56,880 --> 00:18:59,919
when you watch this it might be already

00:18:58,320 --> 00:19:02,559
get out but it's still not

00:18:59,919 --> 00:19:03,919
at this time so uh it's still in the

00:19:02,559 --> 00:19:06,000
release candidate phase so you can

00:19:03,919 --> 00:19:10,160
install it with npm i

00:19:06,000 --> 00:19:13,440
v4 v4.0.0

00:19:10,160 --> 00:19:16,080
for example with the mark

00:19:13,440 --> 00:19:18,480
you can actually you know configure a

00:19:16,080 --> 00:19:21,840
global agent a global dispatcher

00:19:18,480 --> 00:19:23,520
for that will mark the

00:19:21,840 --> 00:19:25,120
response and you can also enable a

00:19:23,520 --> 00:19:27,360
pass-through mode so you can only mock

00:19:25,120 --> 00:19:30,950
certain things

00:19:27,360 --> 00:19:33,039
this is really important because in

00:19:30,950 --> 00:19:35,679
[Music]

00:19:33,039 --> 00:19:36,720
in order to support mocks for example in

00:19:35,679 --> 00:19:39,280
the knock

00:19:36,720 --> 00:19:41,440
or in the knot core hdp there to rely a

00:19:39,280 --> 00:19:43,520
lot on monkey patching internals

00:19:41,440 --> 00:19:44,640
not core internals however we've done

00:19:43,520 --> 00:19:47,520
monkey patch

00:19:44,640 --> 00:19:48,480
with this is no monkey patching

00:19:47,520 --> 00:19:50,480
happening at all

00:19:48,480 --> 00:19:51,600
you can just create one and it will just

00:19:50,480 --> 00:19:54,640
work

00:19:51,600 --> 00:19:56,320
so it's pretty pretty great because you

00:19:54,640 --> 00:19:59,919
can also use it for testing

00:19:56,320 --> 00:20:02,880
your libraries so i really love it

00:19:59,919 --> 00:20:03,440
um how does this compare is this fast

00:20:02,880 --> 00:20:06,240
enough

00:20:03,440 --> 00:20:07,520
well let me show you so if we are

00:20:06,240 --> 00:20:10,960
considering just

00:20:07,520 --> 00:20:14,880
a a a a very

00:20:10,960 --> 00:20:17,360
uh a very simple system with this

00:20:14,880 --> 00:20:18,400
simple system as before with the keep

00:20:17,360 --> 00:20:21,039
alive

00:20:18,400 --> 00:20:22,720
if we don't enable pipelining there's

00:20:21,039 --> 00:20:25,440
not much effort here

00:20:22,720 --> 00:20:27,679
but if we enable pipelining we can

00:20:25,440 --> 00:20:29,840
dramatically and drastically include

00:20:27,679 --> 00:20:32,000
increase the number of requests per

00:20:29,840 --> 00:20:34,880
second that node core can set

00:20:32,000 --> 00:20:36,000
why well because we are minimizing the

00:20:34,880 --> 00:20:39,360
number of

00:20:36,000 --> 00:20:44,640
uh round trips to the

00:20:39,360 --> 00:20:44,640
uh underlining um

00:20:44,880 --> 00:20:48,320
to the kernel and the operating system

00:20:47,280 --> 00:20:50,000
anyway

00:20:48,320 --> 00:20:51,520
and we are using our socket the best

00:20:50,000 --> 00:20:55,360
size the most essentially

00:20:51,520 --> 00:20:59,440
so for me this is pretty pretty great uh

00:20:55,360 --> 00:21:01,280
i also done some benchmarks on http 2

00:20:59,440 --> 00:21:04,720
using this library called facified gtp

00:21:01,280 --> 00:21:06,720
proxy it's a simple http proxy system

00:21:04,720 --> 00:21:07,760
that is built on top of node.js and

00:21:06,720 --> 00:21:10,320
fastify

00:21:07,760 --> 00:21:12,880
that can do htv one to http one but also

00:21:10,320 --> 00:21:16,000
gp2 to http2 but also http

00:21:12,880 --> 00:21:20,240
jtpd 1.1 and vice versa so it

00:21:16,000 --> 00:21:23,360
also uses unity by default for http 1.1

00:21:20,240 --> 00:21:27,039
for hdb 1.1 which is great so

00:21:23,360 --> 00:21:29,039
you see it's fast actually uh and

00:21:27,039 --> 00:21:32,000
you know i'm pretty pretty happy about

00:21:29,039 --> 00:21:34,240
this so hey

00:21:32,000 --> 00:21:35,919
uh it's actually pretty good now i know

00:21:34,240 --> 00:21:37,600
that this can be improved quite a lot

00:21:35,919 --> 00:21:38,799
potentially because this is using one

00:21:37,600 --> 00:21:41,520
single connection and we

00:21:38,799 --> 00:21:42,320
might be eating some sort of http 2

00:21:41,520 --> 00:21:45,440
limit

00:21:42,320 --> 00:21:45,840
so yeah yeah this can be improved even

00:21:45,440 --> 00:21:48,799
but

00:21:45,840 --> 00:21:48,799
i'm pretty happy about

00:21:48,960 --> 00:21:52,640
so um i am almost wrapping up i just

00:21:51,520 --> 00:21:54,960
want to say that

00:21:52,640 --> 00:21:55,840
uh i want to recommend to you always use

00:21:54,960 --> 00:21:57,120
if you ever

00:21:55,840 --> 00:21:59,679
haven't watched this talk you want to

00:21:57,120 --> 00:22:02,679
just get the most out of it

00:21:59,679 --> 00:22:04,799
always set an http agent uh check out

00:22:02,679 --> 00:22:07,200
ownditchv4

00:22:04,799 --> 00:22:07,919
and if you if you have the problem of

00:22:07,200 --> 00:22:10,480
doing a lot of

00:22:07,919 --> 00:22:11,039
microservice system and http holds you

00:22:10,480 --> 00:22:12,320
can only

00:22:11,039 --> 00:22:14,640
can actually drastically reduce the

00:22:12,320 --> 00:22:17,679
overhead for your dc with the system

00:22:14,640 --> 00:22:19,039
um so hey pretty great we have a new

00:22:17,679 --> 00:22:23,159
docs website so

00:22:19,039 --> 00:22:26,159
https uh and

00:22:23,159 --> 00:22:26,559
onedigi.js.org yes it's part of node

00:22:26,159 --> 00:22:30,960
okay

00:22:26,559 --> 00:22:35,280
only is a part of node.js project now

00:22:30,960 --> 00:22:39,039
so it's uh it's pretty great from uh

00:22:35,280 --> 00:22:42,240
from my point of view um

00:22:39,039 --> 00:22:43,120
we need help there is uh we need people

00:22:42,240 --> 00:22:45,039
to use undissi

00:22:43,120 --> 00:22:46,400
and file bugs so that we can fix them

00:22:45,039 --> 00:22:48,880
please do that

00:22:46,400 --> 00:22:50,159
we can also send prs there's a lot of

00:22:48,880 --> 00:22:51,600
activity is one of the most

00:22:50,159 --> 00:22:53,280
active projects in the node.js

00:22:51,600 --> 00:22:56,799
organization so

00:22:53,280 --> 00:23:01,679
hey pretty neat right

00:22:56,799 --> 00:23:01,679
um i also want to uh

00:23:01,919 --> 00:23:06,159
to show uh

00:23:07,440 --> 00:23:15,039
oh nice oh

00:23:11,039 --> 00:23:16,880
here we go like um

00:23:15,039 --> 00:23:20,000
i also would like to show you a little

00:23:16,880 --> 00:23:20,000
bit of uh

00:23:20,080 --> 00:23:26,320
of a demo of of funding so

00:23:23,679 --> 00:23:27,039
here we go so let's see that we have a

00:23:26,320 --> 00:23:29,600
server

00:23:27,039 --> 00:23:30,480
so this is a server that does a few

00:23:29,600 --> 00:23:33,520
things

00:23:30,480 --> 00:23:35,919
and you know you can see it uh

00:23:33,520 --> 00:23:37,760
it is pretty is pretty new syntax so

00:23:35,919 --> 00:23:39,440
using the new esm

00:23:37,760 --> 00:23:41,600
we can actually iterate over the

00:23:39,440 --> 00:23:44,640
incoming events and can be requests

00:23:41,600 --> 00:23:46,240
we await for the number of uh

00:23:44,640 --> 00:23:49,120
to the server be listening and then we

00:23:46,240 --> 00:23:52,559
start processing our requests

00:23:49,120 --> 00:23:53,840
pretty nice right i am i i pretty i like

00:23:52,559 --> 00:23:57,039
this syntax

00:23:53,840 --> 00:24:00,559
so um then i can actually do

00:23:57,039 --> 00:24:04,159
uh the node server right so

00:24:00,559 --> 00:24:05,760
if i do that i then i can say for

00:24:04,159 --> 00:24:08,960
example i can curl it

00:24:05,760 --> 00:24:12,960
and here you go yeah yeah it actually

00:24:08,960 --> 00:24:16,799
you know works cool um

00:24:12,960 --> 00:24:18,080
now how can we use you undigi to call to

00:24:16,799 --> 00:24:20,960
query this server

00:24:18,080 --> 00:24:21,679
well we can actually open up this other

00:24:20,960 --> 00:24:24,559
code

00:24:21,679 --> 00:24:25,360
which use the global request method from

00:24:24,559 --> 00:24:28,960
mundici

00:24:25,360 --> 00:24:32,320
we extract a bunch of things and then we

00:24:28,960 --> 00:24:35,120
console log it essentially

00:24:32,320 --> 00:24:36,080
so let's see if it works cool whoa it

00:24:35,120 --> 00:24:39,120
seems it's working

00:24:36,080 --> 00:24:42,240
because we are actually replying that

00:24:39,120 --> 00:24:45,360
it's uh it's saying that we

00:24:42,240 --> 00:24:48,640
we have a date uh it's a 200

00:24:45,360 --> 00:24:49,120
and it it tells us that the server want

00:24:48,640 --> 00:24:51,360
to keep

00:24:49,120 --> 00:24:52,799
this connection alive for five seconds

00:24:51,360 --> 00:24:55,520
and it has

00:24:52,799 --> 00:24:58,840
a content length of 11 characters those

00:24:55,520 --> 00:25:01,039
11 characters are a low word

00:24:58,840 --> 00:25:02,080
hooray and if you're looking on the

00:25:01,039 --> 00:25:05,440
server you see we have

00:25:02,080 --> 00:25:09,120
access slash foo so um it's

00:25:05,440 --> 00:25:13,039
pretty great from from what i can see uh

00:25:09,120 --> 00:25:17,360
going back to to our slide um

00:25:13,039 --> 00:25:19,600
we can uh i just wanted to to finish up

00:25:17,360 --> 00:25:21,600
by uh pointing out to the fantastic high

00:25:19,600 --> 00:25:22,720
performance browser networking book by

00:25:21,600 --> 00:25:25,880
ilya grigorik

00:25:22,720 --> 00:25:27,279
you can also read it online for free at

00:25:25,880 --> 00:25:28,960
hpbn.com

00:25:27,279 --> 00:25:31,600
check it out i talked a lot about

00:25:28,960 --> 00:25:34,480
fastify so fastify.io here you go

00:25:31,600 --> 00:25:35,600
and then we have undici and there is a

00:25:34,480 --> 00:25:37,440
guide on the event loop

00:25:35,600 --> 00:25:40,559
and finally not clinic if you want to

00:25:37,440 --> 00:25:40,559
optimize your servers

00:25:41,039 --> 00:25:44,400
we are about to wrap up so i will just

00:25:43,440 --> 00:25:46,559
thank you very much

00:25:44,400 --> 00:25:48,480
for having me uh you can reach me on

00:25:46,559 --> 00:25:49,120
twitter at motocolina and also send me

00:25:48,480 --> 00:25:50,960
an email

00:25:49,120 --> 00:25:52,840
asking for anything essentially life the

00:25:50,960 --> 00:25:57,840
universe and everything everything at

00:25:52,840 --> 00:25:57,840

YouTube URL: https://www.youtube.com/watch?v=s2GicMw-Y48


