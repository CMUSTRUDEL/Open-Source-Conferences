Title: Quarkus Hands-on Workshop for Spring Developers - DevConf.CZ 2021
Publication date: 2021-03-15
Playlist: DevConfCZ 2021
Description: 
	Speaker: Daniel Oh

This workshop is designed to be hands-on experiences on how to refactor existing Spring Boot apps(i.e. Petclinic) to Kubernetes-Native apps on Quarkus for Java developers. The workshop covers Spring Web, DI, Data, JPA, and Cache refactoring practices. Lab participants donâ€™t need to install any tools & software ahead of time. Instead, they will use CodeReady Workspaces(Web IDE), Spring & Quarkus runtimes, and OpenShift(Kubernetes) 4 for a deployment infrastructure.



Schedule: https://sched.co/gmSJ
Captions: 
	00:00:01,120 --> 00:00:04,560
my name is daniel oh you know i've been

00:00:03,439 --> 00:00:06,879
working for

00:00:04,560 --> 00:00:08,480
almost six years at redhead in a

00:00:06,879 --> 00:00:09,519
solution architect and technical

00:00:08,480 --> 00:00:12,639
marketing agent

00:00:09,519 --> 00:00:15,679
manager and a developer advocate

00:00:12,639 --> 00:00:18,640
so i'm also responsible cnc ambassador

00:00:15,679 --> 00:00:20,560
you can find my old profile and

00:00:18,640 --> 00:00:24,560
expertise and

00:00:20,560 --> 00:00:26,880
my some the technology stuff

00:00:24,560 --> 00:00:29,199
you can find my twitter you can find my

00:00:26,880 --> 00:00:31,840
gear report and also

00:00:29,199 --> 00:00:32,480
i recommend subscribe my youtube channel

00:00:31,840 --> 00:00:35,840
i

00:00:32,480 --> 00:00:39,280
push a lot of technical demo video and

00:00:35,840 --> 00:00:42,960
uh technical uh tutorial as well

00:00:39,280 --> 00:00:46,399
okay so here are the four challenges for

00:00:42,960 --> 00:00:48,640
spring developer could be faced

00:00:46,399 --> 00:00:49,920
every single day specifically container

00:00:48,640 --> 00:00:53,600
technology plus

00:00:49,920 --> 00:00:56,079
kubernetes technology so first of all

00:00:53,600 --> 00:00:57,280
for spring developer when they needed to

00:00:56,079 --> 00:01:00,399
adopt a new

00:00:57,280 --> 00:01:02,640
application architecture or platform or

00:01:00,399 --> 00:01:05,680
a business

00:01:02,640 --> 00:01:08,479
requirement they need to

00:01:05,680 --> 00:01:09,920
make a decision which architecture which

00:01:08,479 --> 00:01:12,960
is platform which is

00:01:09,920 --> 00:01:15,040
component should be

00:01:12,960 --> 00:01:17,119
considered at a very beginning at the

00:01:15,040 --> 00:01:19,119
very beginning time for example

00:01:17,119 --> 00:01:20,960
we need to develop a serverless

00:01:19,119 --> 00:01:23,439
application we need to design

00:01:20,960 --> 00:01:25,040
reactivate application we need to more

00:01:23,439 --> 00:01:28,479
scalable flexible

00:01:25,040 --> 00:01:31,759
application to deploy kubernetes cluster

00:01:28,479 --> 00:01:34,640
and it should be scaled more than

00:01:31,759 --> 00:01:36,079
thousands of thousand container parts at

00:01:34,640 --> 00:01:39,439
the same time

00:01:36,079 --> 00:01:42,479
so this is all depend uh the different

00:01:39,439 --> 00:01:46,799
requirement expectation uh sometimes

00:01:42,479 --> 00:01:50,159
uh uh bother your screen architecture

00:01:46,799 --> 00:01:53,840
or application debug muscle so spring

00:01:50,159 --> 00:01:56,640
uh fundamentally has

00:01:53,840 --> 00:01:57,759
allows developers less control of

00:01:56,640 --> 00:01:59,759
flexibility

00:01:57,759 --> 00:02:01,920
and also for spring developers

00:01:59,759 --> 00:02:02,960
specifically the beginner or even

00:02:01,920 --> 00:02:05,840
mineral

00:02:02,960 --> 00:02:06,960
experience of spring developer so they

00:02:05,840 --> 00:02:10,560
have to

00:02:06,960 --> 00:02:12,319
learn every single detail of the spring

00:02:10,560 --> 00:02:15,200
ecosystem specifically

00:02:12,319 --> 00:02:15,840
your spring application can be running

00:02:15,200 --> 00:02:18,160
on

00:02:15,840 --> 00:02:19,760
multiple cloud or kubernetes cluster

00:02:18,160 --> 00:02:23,200
which means you have to figure

00:02:19,760 --> 00:02:26,080
out which e component or which

00:02:23,200 --> 00:02:28,160
ecosystem should be uh integrate your

00:02:26,080 --> 00:02:31,360
screen application for example

00:02:28,160 --> 00:02:31,840
spring cloud or security or integration

00:02:31,360 --> 00:02:34,640
with

00:02:31,840 --> 00:02:36,480
another spring ecosystem components so

00:02:34,640 --> 00:02:38,959
this is a really big problem for spring

00:02:36,480 --> 00:02:41,840
developer because they need to catch up

00:02:38,959 --> 00:02:42,720
this trend and technology every single

00:02:41,840 --> 00:02:44,319
day

00:02:42,720 --> 00:02:46,000
and another thing is developer

00:02:44,319 --> 00:02:48,400
experience so

00:02:46,000 --> 00:02:50,400
spring is really comfortable to develop

00:02:48,400 --> 00:02:53,599
every single day on your local machine

00:02:50,400 --> 00:02:56,080
but we have to i mean screen developers

00:02:53,599 --> 00:02:56,080
have to

00:02:56,319 --> 00:02:59,760
consider the remote container

00:02:58,400 --> 00:03:02,080
environment because the

00:02:59,760 --> 00:03:03,280
container environment is not an option

00:03:02,080 --> 00:03:06,480
it's a default

00:03:03,280 --> 00:03:09,680
runtime and infrastructure layer to

00:03:06,480 --> 00:03:12,640
run your spring application for

00:03:09,680 --> 00:03:14,800
addressing your business requirements

00:03:12,640 --> 00:03:17,040
but in order to deploy your application

00:03:14,800 --> 00:03:18,400
to container platforms such as openshift

00:03:17,040 --> 00:03:22,319
to equip analysts

00:03:18,400 --> 00:03:26,080
you maybe have ci cd pipeline or githubs

00:03:22,319 --> 00:03:29,120
or something like argo city but

00:03:26,080 --> 00:03:29,760
that's not exactly the same capability

00:03:29,120 --> 00:03:33,120
you can have

00:03:29,760 --> 00:03:34,879
your in your local environment so

00:03:33,120 --> 00:03:36,959
so that's why spring developer looking

00:03:34,879 --> 00:03:40,400
forward to adapting

00:03:36,959 --> 00:03:43,519
some kind of uh some kind of tool

00:03:40,400 --> 00:03:47,440
for increased inner local development

00:03:43,519 --> 00:03:51,040
capabilities such as the build deploy

00:03:47,440 --> 00:03:54,319
and testing and also keep

00:03:51,040 --> 00:03:54,879
writing your code the another uh the

00:03:54,319 --> 00:03:58,000
challenge

00:03:54,879 --> 00:04:00,799
from native corporation so this is

00:03:58,000 --> 00:04:01,360
still only in major technology some of

00:04:00,799 --> 00:04:04,319
people

00:04:01,360 --> 00:04:04,640
uh think about it so native compilation

00:04:04,319 --> 00:04:07,840
make

00:04:04,640 --> 00:04:11,120
your java application as executable by

00:04:07,840 --> 00:04:15,120
just like a go and you can run that

00:04:11,120 --> 00:04:17,120
application without jvm just running on

00:04:15,120 --> 00:04:19,040
substring vm just as part of the

00:04:17,120 --> 00:04:22,000
component of a graph vm

00:04:19,040 --> 00:04:23,040
so what is the benefit of a narrative

00:04:22,000 --> 00:04:26,080
compilation

00:04:23,040 --> 00:04:28,240
with the java application it allows you

00:04:26,080 --> 00:04:30,639
have a super fast and small memory

00:04:28,240 --> 00:04:32,720
footprint so just think about it

00:04:30,639 --> 00:04:35,199
you have a single microsoft application

00:04:32,720 --> 00:04:38,400
based on java technology and then you

00:04:35,199 --> 00:04:40,639
needed to deploy that application on

00:04:38,400 --> 00:04:43,360
your kubernetes cluster but

00:04:40,639 --> 00:04:45,280
that application should be scaled out

00:04:43,360 --> 00:04:49,040
maybe thousand parts or

00:04:45,280 --> 00:04:52,560
200 parts and then some application

00:04:49,040 --> 00:04:56,160
takes uh five minutes to scale up but

00:04:52,560 --> 00:04:58,639
nato corporation maybe reduced

00:04:56,160 --> 00:05:00,639
the amount of time to scale out maybe

00:04:58,639 --> 00:05:02,639
just

00:05:00,639 --> 00:05:05,039
five seconds or ten seconds make that

00:05:02,639 --> 00:05:08,080
happen the same scalability

00:05:05,039 --> 00:05:10,720
so this is a whole full challenge

00:05:08,080 --> 00:05:12,320
uh face the specifically spring

00:05:10,720 --> 00:05:13,600
developer so we need to something

00:05:12,320 --> 00:05:16,880
different to

00:05:13,600 --> 00:05:20,000
overcome this challenge for developers

00:05:16,880 --> 00:05:22,320
so today uh this workshop is

00:05:20,000 --> 00:05:24,080
actually designed for hands-on

00:05:22,320 --> 00:05:25,360
experience but we have only four

00:05:24,080 --> 00:05:27,759
remaining today

00:05:25,360 --> 00:05:29,680
so i just give you some workshop

00:05:27,759 --> 00:05:32,960
environments so you don't need to

00:05:29,680 --> 00:05:36,400
install any software or any

00:05:32,960 --> 00:05:38,400
uh some command line tool but you just

00:05:36,400 --> 00:05:38,960
need a web browser to go through every

00:05:38,400 --> 00:05:42,000
single

00:05:38,960 --> 00:05:42,720
lab but this workshop design for three

00:05:42,000 --> 00:05:44,560
hours

00:05:42,720 --> 00:05:46,160
well don't worry about that you don't

00:05:44,560 --> 00:05:49,120
need to finish

00:05:46,160 --> 00:05:51,520
the old labs today uh just for 40

00:05:49,120 --> 00:05:54,720
minutes but you just try to understand

00:05:51,520 --> 00:05:57,759
itchy labs of in terms of the goal

00:05:54,720 --> 00:06:02,080
and why carcass of

00:05:57,759 --> 00:06:04,720
why corkers tried to help out the

00:06:02,080 --> 00:06:05,360
spring developer to develop the same

00:06:04,720 --> 00:06:09,759
microsoft

00:06:05,360 --> 00:06:12,880
application but also a hard quarkus

00:06:09,759 --> 00:06:14,800
overcome that for challenges but you

00:06:12,880 --> 00:06:16,080
could still have the same capability

00:06:14,800 --> 00:06:18,160
just like a you develop

00:06:16,080 --> 00:06:19,680
a spring application we're going to use

00:06:18,160 --> 00:06:21,280
the one of the popular commerce

00:06:19,680 --> 00:06:24,160
springboard application

00:06:21,280 --> 00:06:25,520
called out pet clinic application and we

00:06:24,160 --> 00:06:28,560
convert that

00:06:25,520 --> 00:06:30,720
quarkx application for example uh

00:06:28,560 --> 00:06:32,080
the presentation layer and control

00:06:30,720 --> 00:06:35,199
radial departure layer

00:06:32,080 --> 00:06:37,520
in the end you once again strangle

00:06:35,199 --> 00:06:38,479
the modern race disagree with the

00:06:37,520 --> 00:06:42,639
application once

00:06:38,479 --> 00:06:43,919
you already uh convert to quarkx but you

00:06:42,639 --> 00:06:45,919
once again

00:06:43,919 --> 00:06:46,960
strangle the spring body application to

00:06:45,919 --> 00:06:49,599
parkers

00:06:46,960 --> 00:06:50,160
so let's try to drill down a little bit

00:06:49,599 --> 00:06:52,319
detail

00:06:50,160 --> 00:06:53,280
i'm not going to steal lots of time from

00:06:52,319 --> 00:06:56,560
viewers

00:06:53,280 --> 00:06:59,680
but just click through uh what

00:06:56,560 --> 00:07:00,560
which let i mean each labs uh what do

00:06:59,680 --> 00:07:03,199
you learn from

00:07:00,560 --> 00:07:04,639
each lab here the first step you will

00:07:03,199 --> 00:07:07,120
you will understand

00:07:04,639 --> 00:07:08,720
what speed pad cleaning application and

00:07:07,120 --> 00:07:12,000
which component

00:07:08,720 --> 00:07:13,919
is which components are implemented on

00:07:12,000 --> 00:07:15,199
spring pet cleaning application for

00:07:13,919 --> 00:07:17,280
example

00:07:15,199 --> 00:07:18,880
spring ambulance pattern and the spring

00:07:17,280 --> 00:07:20,960
data spring di

00:07:18,880 --> 00:07:22,639
and there are multiple spring components

00:07:20,960 --> 00:07:24,639
already used

00:07:22,639 --> 00:07:26,080
to develop and implement your spring

00:07:24,639 --> 00:07:29,440
pack cleaning application

00:07:26,080 --> 00:07:32,880
this is the general mbc application

00:07:29,440 --> 00:07:36,319
present web ui in the backend

00:07:32,880 --> 00:07:37,360
subreddit application in the second lab

00:07:36,319 --> 00:07:39,840
you're going to go through and you're

00:07:37,360 --> 00:07:43,039
going to actually get started uh

00:07:39,840 --> 00:07:46,160
refactor each screen application to

00:07:43,039 --> 00:07:47,440
partners for presentation layer so for

00:07:46,160 --> 00:07:51,120
example

00:07:47,440 --> 00:07:53,919
supreme mbc implement based on

00:07:51,120 --> 00:07:56,319
presentation layer such as html and a

00:07:53,919 --> 00:07:59,599
style sheet in javascript but also

00:07:56,319 --> 00:08:02,720
timely to make a more

00:07:59,599 --> 00:08:03,440
descent ui and the supreme and the

00:08:02,720 --> 00:08:07,039
quarkx

00:08:03,440 --> 00:08:09,759
actually uh can address the same

00:08:07,039 --> 00:08:11,520
capability and feature based on the

00:08:09,759 --> 00:08:14,319
quarkx template engine though

00:08:11,520 --> 00:08:15,520
also known as cute uh the quarkxpress

00:08:14,319 --> 00:08:18,720
template is the kind of

00:08:15,520 --> 00:08:22,400
acronym so quarkx template engine

00:08:18,720 --> 00:08:22,960
uh design will specifically represent

00:08:22,400 --> 00:08:25,280
your

00:08:22,960 --> 00:08:26,000
presentation layer and the wonderful

00:08:25,280 --> 00:08:29,199
beauty of

00:08:26,000 --> 00:08:31,280
the quarkx templar ng you can have a lab

00:08:29,199 --> 00:08:34,560
coating capability whenever you change

00:08:31,280 --> 00:08:36,479
code you don't need to recompile and

00:08:34,560 --> 00:08:38,240
rebuild redeploy and re-run

00:08:36,479 --> 00:08:40,000
your quarkx application it's

00:08:38,240 --> 00:08:42,880
automatically done by corpus

00:08:40,000 --> 00:08:43,760
engine you don't need to care about that

00:08:42,880 --> 00:08:46,480
in the end

00:08:43,760 --> 00:08:47,519
this capability increases developers

00:08:46,480 --> 00:08:49,600
productivity

00:08:47,519 --> 00:08:51,279
because you can do that and the same

00:08:49,600 --> 00:08:54,399
application implementation

00:08:51,279 --> 00:08:58,240
with 50 less time

00:08:54,399 --> 00:09:01,440
and does the left three

00:08:58,240 --> 00:09:02,399
is more about the dependency injection

00:09:01,440 --> 00:09:05,600
the spring

00:09:02,399 --> 00:09:08,880
actually provide the di capability and

00:09:05,600 --> 00:09:11,279
quarkx also provide context and

00:09:08,880 --> 00:09:12,399
the dependency injection feature by

00:09:11,279 --> 00:09:14,720
default

00:09:12,399 --> 00:09:16,160
so you can learn how to convert spring

00:09:14,720 --> 00:09:19,920
di to springs

00:09:16,160 --> 00:09:22,959
a quarter cdi and then left 4

00:09:19,920 --> 00:09:26,560
is more about data transaction

00:09:22,959 --> 00:09:29,519
so spring data jpa based on

00:09:26,560 --> 00:09:31,600
uh and allows java developer to

00:09:29,519 --> 00:09:34,160
communicate your data store like a

00:09:31,600 --> 00:09:34,880
database to retrieve data and create

00:09:34,160 --> 00:09:37,839
data

00:09:34,880 --> 00:09:39,680
and also insert update etc just like we

00:09:37,839 --> 00:09:42,640
can call out the cloud

00:09:39,680 --> 00:09:43,519
functionality and then carcass uh gives

00:09:42,640 --> 00:09:45,760
the same function

00:09:43,519 --> 00:09:46,640
it's more than that based on hybrid the

00:09:45,760 --> 00:09:50,399
oral mapping

00:09:46,640 --> 00:09:53,440
and with the panache so with the panache

00:09:50,399 --> 00:09:55,440
uh the the developer doesn't worry about

00:09:53,440 --> 00:09:56,959
uh creating the data setter in a

00:09:55,440 --> 00:09:59,920
position java classic

00:09:56,959 --> 00:10:02,800
and also you can automatically have uh

00:09:59,920 --> 00:10:07,279
the url mapping based on the panache

00:10:02,800 --> 00:10:10,880
uh component and focus extensions

00:10:07,279 --> 00:10:13,440
the next lab now you just done

00:10:10,880 --> 00:10:15,680
the finish to converting from screen

00:10:13,440 --> 00:10:19,200
ambush application to purpose

00:10:15,680 --> 00:10:21,760
and now you need to think about what is

00:10:19,200 --> 00:10:22,800
another way to optimize or make it

00:10:21,760 --> 00:10:25,600
better this

00:10:22,800 --> 00:10:27,120
application uh fill in the euro

00:10:25,600 --> 00:10:28,480
kubernetes cluster

00:10:27,120 --> 00:10:30,720
so we're going to use the openshifter

00:10:28,480 --> 00:10:32,720
for cluster today and then

00:10:30,720 --> 00:10:34,079
for you d project application to

00:10:32,720 --> 00:10:36,640
approach we're gonna uh

00:10:34,079 --> 00:10:38,000
slice down this application just like a

00:10:36,640 --> 00:10:40,240
strangle pattern

00:10:38,000 --> 00:10:41,120
as you can see we have one single

00:10:40,240 --> 00:10:43,839
application

00:10:41,120 --> 00:10:45,760
we make the breakdown it's a multiple

00:10:43,839 --> 00:10:47,839
application along with your business

00:10:45,760 --> 00:10:50,720
domain such as the

00:10:47,839 --> 00:10:51,680
bad budget customer service also from an

00:10:50,720 --> 00:10:55,680
application each

00:10:51,680 --> 00:10:59,920
backend application has owned

00:10:55,680 --> 00:11:01,200
the database store like a post sql here

00:10:59,920 --> 00:11:04,640
the last lab

00:11:01,200 --> 00:11:05,120
you're gonna add more the kubernetes

00:11:04,640 --> 00:11:08,320
native

00:11:05,120 --> 00:11:09,040
application capability for example all

00:11:08,320 --> 00:11:12,320
microsoft's

00:11:09,040 --> 00:11:14,800
application needed to

00:11:12,320 --> 00:11:16,480
adopt non-functional capabilities such

00:11:14,800 --> 00:11:19,680
as substrate discovery

00:11:16,480 --> 00:11:20,240
resiliency and load balancing or has to

00:11:19,680 --> 00:11:23,600
check

00:11:20,240 --> 00:11:26,160
or externalize your computation these

00:11:23,600 --> 00:11:27,120
all kinds of not business functionality

00:11:26,160 --> 00:11:30,079
but also

00:11:27,120 --> 00:11:31,200
but you have to consider when you

00:11:30,079 --> 00:11:33,839
implement

00:11:31,200 --> 00:11:34,880
and develop your microsoft application

00:11:33,839 --> 00:11:37,440
for deploying

00:11:34,880 --> 00:11:38,160
and kubernetes cluster for distributing

00:11:37,440 --> 00:11:41,839
microsoft

00:11:38,160 --> 00:11:44,480
application architecture so the workers

00:11:41,839 --> 00:11:46,880
allows java developer to add this

00:11:44,480 --> 00:11:48,480
non-functional microsoft's capability

00:11:46,880 --> 00:11:52,079
easily simply

00:11:48,480 --> 00:11:56,079
uh based on carcass extension

00:11:52,079 --> 00:12:00,000
so let's uh get your hands dirty

00:11:56,079 --> 00:12:02,720
so here is the uh how to access your

00:12:00,000 --> 00:12:04,160
uh workshop environment today so

00:12:02,720 --> 00:12:06,639
everything is already

00:12:04,160 --> 00:12:07,839
uh deployed and provisioned and you

00:12:06,639 --> 00:12:10,800
don't need to

00:12:07,839 --> 00:12:12,639
install any command line or software so

00:12:10,800 --> 00:12:15,120
you just need a web browser

00:12:12,639 --> 00:12:16,000
so the chrome browser of iops would be

00:12:15,120 --> 00:12:18,639
better

00:12:16,000 --> 00:12:19,519
rather than the safari or internet

00:12:18,639 --> 00:12:21,200
explorer

00:12:19,519 --> 00:12:22,800
and i strongly recommend you to raise

00:12:21,200 --> 00:12:26,399
the chrome version

00:12:22,800 --> 00:12:26,720
and then uh please tunnel off your vpn

00:12:26,399 --> 00:12:28,720
or

00:12:26,720 --> 00:12:29,839
ad block because we're going to use a

00:12:28,720 --> 00:12:32,480
websocket

00:12:29,839 --> 00:12:34,800
so if you prohibit the web socket

00:12:32,480 --> 00:12:37,839
protocol please turn it off

00:12:34,800 --> 00:12:38,720
during the workshop and if you have any

00:12:37,839 --> 00:12:41,839
question

00:12:38,720 --> 00:12:43,360
around this workshop or quarters or

00:12:41,839 --> 00:12:45,519
related technology

00:12:43,360 --> 00:12:48,480
uh related clown every application

00:12:45,519 --> 00:12:50,880
manual please don't hesitate and upload

00:12:48,480 --> 00:12:51,680
your question in the query box i'm more

00:12:50,880 --> 00:12:56,480
than happy

00:12:51,680 --> 00:13:00,000
address uh in the next 25 minutes

00:12:56,480 --> 00:13:02,079
okay so here's a short link to access to

00:13:00,000 --> 00:13:03,120
our the workshop environment the pinning

00:13:02,079 --> 00:13:06,240
url

00:13:03,120 --> 00:13:10,160
opening url slash devcon easy

00:13:06,240 --> 00:13:12,959
and 2021 dashi quarkus lab i'm gonna go

00:13:10,160 --> 00:13:14,800
i'll get back to this page but let's try

00:13:12,959 --> 00:13:17,600
to move on next slide

00:13:14,800 --> 00:13:19,519
so when you access this new one you can

00:13:17,600 --> 00:13:21,920
see

00:13:19,519 --> 00:13:22,720
account assess the assignment page you

00:13:21,920 --> 00:13:25,600
need to

00:13:22,720 --> 00:13:26,560
input your any uh your preferred email

00:13:25,600 --> 00:13:29,040
address

00:13:26,560 --> 00:13:30,399
we're not gonna store your email address

00:13:29,040 --> 00:13:33,440
it's kind of a

00:13:30,399 --> 00:13:35,519
pricey problem so so we just delete

00:13:33,440 --> 00:13:36,880
all your email address after this

00:13:35,519 --> 00:13:39,120
workshop so print

00:13:36,880 --> 00:13:40,720
any your preferred email address and a

00:13:39,120 --> 00:13:41,680
password i'm going to show you just a

00:13:40,720 --> 00:13:45,680
little bit later

00:13:41,680 --> 00:13:48,399
once you uh assign

00:13:45,680 --> 00:13:50,079
the print your email address and then

00:13:48,399 --> 00:13:53,760
your password is opposite

00:13:50,079 --> 00:13:57,839
you will find out your assigned username

00:13:53,760 --> 00:14:00,240
for example user 1 or user 10 or user 25

00:13:57,839 --> 00:14:02,000
and a password openshift and then when

00:14:00,240 --> 00:14:04,240
you click on the module quarter support

00:14:02,000 --> 00:14:07,760
spring developer you will find out the

00:14:04,240 --> 00:14:10,079
actual lab instruction so once again

00:14:07,760 --> 00:14:12,880
though our magic password is all

00:14:10,079 --> 00:14:16,079
lowercase openshift

00:14:12,880 --> 00:14:18,399
so here's more uh

00:14:16,079 --> 00:14:19,680
use case and demos around the quarkx

00:14:18,399 --> 00:14:22,720
application

00:14:19,680 --> 00:14:24,800
so for example uh just i'm strongly

00:14:22,720 --> 00:14:26,800
recommended you go to my youtube channel

00:14:24,800 --> 00:14:28,560
bini you already danielle tv and you can

00:14:26,800 --> 00:14:30,399
find the tons of the video around the

00:14:28,560 --> 00:14:32,480
quickest application demo but also

00:14:30,399 --> 00:14:34,160
more cloud and application departments

00:14:32,480 --> 00:14:36,560
for example here

00:14:34,160 --> 00:14:37,519
when you this is one of the use cases

00:14:36,560 --> 00:14:39,760
how to

00:14:37,519 --> 00:14:41,199
develop server as a function application

00:14:39,760 --> 00:14:43,519
based on workers

00:14:41,199 --> 00:14:45,440
and you can deploy that serverless

00:14:43,519 --> 00:14:46,240
function to approach the container

00:14:45,440 --> 00:14:48,720
platform

00:14:46,240 --> 00:14:49,680
that should that just use for product

00:14:48,720 --> 00:14:51,600
application

00:14:49,680 --> 00:14:52,720
and this application communicate with

00:14:51,600 --> 00:14:55,040
the backend

00:14:52,720 --> 00:14:55,760
display data grid based on the radio

00:14:55,040 --> 00:14:58,880
data

00:14:55,760 --> 00:15:00,880
are built on infinite span so once

00:14:58,880 --> 00:15:03,199
you're from the application have the

00:15:00,880 --> 00:15:06,240
tons of natural traffic

00:15:03,199 --> 00:15:10,079
the function will be scaled out

00:15:06,240 --> 00:15:13,680
i mean just comes up just in a second

00:15:10,079 --> 00:15:15,199
and then uh try to uh pass down your

00:15:13,680 --> 00:15:17,279
natural track to the back end

00:15:15,199 --> 00:15:18,800
application like a data grid and you

00:15:17,279 --> 00:15:21,360
will see the data agreed

00:15:18,800 --> 00:15:23,199
will be all scaled out maybe 10

00:15:21,360 --> 00:15:25,920
automatically depends on

00:15:23,199 --> 00:15:26,320
on demand natural traffic in the end

00:15:25,920 --> 00:15:29,360
there's

00:15:26,320 --> 00:15:32,160
no more a traffic uh

00:15:29,360 --> 00:15:33,519
happen in the ur backend application

00:15:32,160 --> 00:15:36,560
scale down to

00:15:33,519 --> 00:15:39,120
a default replication such as two or

00:15:36,560 --> 00:15:41,440
one and then you have run an application

00:15:39,120 --> 00:15:44,160
based on serverless application will be

00:15:41,440 --> 00:15:46,240
scaled down to zero automatically this

00:15:44,160 --> 00:15:49,040
is a really good use case

00:15:46,240 --> 00:15:51,120
uh how to implement and deploy

00:15:49,040 --> 00:15:54,160
serverless application plus

00:15:51,120 --> 00:15:57,680
data grid for district

00:15:54,160 --> 00:16:00,480
uh cash application so

00:15:57,680 --> 00:16:02,320
i'm gonna start my project mode and then

00:16:00,480 --> 00:16:05,759
just go back to here so once

00:16:02,320 --> 00:16:09,040
you go to uh

00:16:05,759 --> 00:16:12,240
uh assign your own username you can find

00:16:09,040 --> 00:16:13,920
that uh here the actual lab environment

00:16:12,240 --> 00:16:14,399
as you can see you just need to go

00:16:13,920 --> 00:16:16,720
through

00:16:14,399 --> 00:16:17,920
all lab instruction this wrap

00:16:16,720 --> 00:16:20,240
instruction

00:16:17,920 --> 00:16:21,120
uh just like the seventh step and then

00:16:20,240 --> 00:16:23,279
it should be

00:16:21,120 --> 00:16:24,639
takes more than three hours but don't

00:16:23,279 --> 00:16:28,240
worry about that i'm gonna

00:16:24,639 --> 00:16:29,920
uh keep uh live uh this workshop

00:16:28,240 --> 00:16:33,519
involved end of this

00:16:29,920 --> 00:16:35,680
day so after this uh workshop you can

00:16:33,519 --> 00:16:36,720
keep going through this workshop

00:16:35,680 --> 00:16:40,079
environment

00:16:36,720 --> 00:16:42,639
just end of day and then when you

00:16:40,079 --> 00:16:44,800
open your id tool you're going to use

00:16:42,639 --> 00:16:47,839
correlated workspace it's based on

00:16:44,800 --> 00:16:48,560
equally chat the web id tool and then

00:16:47,839 --> 00:16:50,399
you can find

00:16:48,560 --> 00:16:52,399
there are multiple projects in your

00:16:50,399 --> 00:16:56,079
website your explorer

00:16:52,399 --> 00:16:58,480
and then please make sure to develop or

00:16:56,079 --> 00:17:00,160
change your java application code in the

00:16:58,480 --> 00:17:01,040
right project for example the qualcomm

00:17:00,160 --> 00:17:03,199
station pep

00:17:01,040 --> 00:17:05,520
cleaning project here just putting

00:17:03,199 --> 00:17:10,000
there's a taxi project

00:17:05,520 --> 00:17:13,120
and i'm gonna go back to my slash deck

00:17:10,000 --> 00:17:16,160
and then i'm gonna copy uh

00:17:13,120 --> 00:17:16,839
this url i'm gonna put in the chat as

00:17:16,160 --> 00:17:20,079
well

00:17:16,839 --> 00:17:22,480
and i'm going to stop sharing

00:17:20,079 --> 00:17:24,559
and take a look at the queenie and it's

00:17:22,480 --> 00:17:28,079
your time to get started

00:17:24,559 --> 00:17:31,280
with your hands-on experience so here is

00:17:28,079 --> 00:17:35,280
the bini url benny

00:17:31,280 --> 00:17:39,200
stash workshop dash m3 this is the 24

00:17:35,280 --> 00:17:42,559
7 available uh the left instructions

00:17:39,200 --> 00:17:45,760
i made this one this labs instruction

00:17:42,559 --> 00:17:48,960
will be available anytime anywhere

00:17:45,760 --> 00:17:49,919
so sometimes you don't need to go

00:17:48,960 --> 00:17:52,160
through

00:17:49,919 --> 00:17:53,840
uh the hands-on experience but you want

00:17:52,160 --> 00:17:57,440
to understand

00:17:53,840 --> 00:18:00,559
um the goal and what contents

00:17:57,440 --> 00:18:01,919
have ichi lab for example just go

00:18:00,559 --> 00:18:03,840
through the spring di

00:18:01,919 --> 00:18:06,080
to quarkus cdi because you have a lot of

00:18:03,840 --> 00:18:08,240
experience how to implement

00:18:06,080 --> 00:18:09,120
the spring di but you're just curious

00:18:08,240 --> 00:18:12,960
about how

00:18:09,120 --> 00:18:15,120
carcass cdi covered up the spring di

00:18:12,960 --> 00:18:17,760
and then you don't need to uh you don't

00:18:15,120 --> 00:18:20,640
have enough time to go through by your

00:18:17,760 --> 00:18:22,720
uh dirty hands so here is the way just

00:18:20,640 --> 00:18:24,880
go to this url and take a look at the

00:18:22,720 --> 00:18:27,440
old content to understand

00:18:24,880 --> 00:18:28,080
how to implement a spring size and how

00:18:27,440 --> 00:18:31,200
to implement

00:18:28,080 --> 00:18:34,480
in the quarter side and then okay so it

00:18:31,200 --> 00:18:35,440
could be better i mean so the eur the

00:18:34,480 --> 00:18:38,000
light of course

00:18:35,440 --> 00:18:38,960
pretty much less than spring i mean

00:18:38,000 --> 00:18:42,080
quarter side

00:18:38,960 --> 00:18:45,280
and also how to implement

00:18:42,080 --> 00:18:47,600
what kind of annotation we have to use

00:18:45,280 --> 00:18:49,840
to implement same feature same

00:18:47,600 --> 00:18:52,960
functionality for example

00:18:49,840 --> 00:18:55,600
here is the cdi injection

00:18:52,960 --> 00:18:56,559
as you can see the spring style you have

00:18:55,600 --> 00:18:59,039
to use

00:18:56,559 --> 00:19:00,640
like a component annotation or a wire

00:18:59,039 --> 00:19:04,000
annotation to

00:19:00,640 --> 00:19:05,039
uh have the the dependency injection but

00:19:04,000 --> 00:19:07,760
parker side

00:19:05,039 --> 00:19:10,880
you just need to use the injection the

00:19:07,760 --> 00:19:12,799
inject annotation as you can see here

00:19:10,880 --> 00:19:14,000
so this is just something different in

00:19:12,799 --> 00:19:16,480
text but

00:19:14,000 --> 00:19:18,000
this isn't not a big deal i'm pretty

00:19:16,480 --> 00:19:22,080
sure because

00:19:18,000 --> 00:19:25,919
it's just simple syntax change

00:19:22,080 --> 00:19:27,120
so one another good tip of the spring to

00:19:25,919 --> 00:19:30,160
quaker stuff

00:19:27,120 --> 00:19:33,919
so some people ask me is there only

00:19:30,160 --> 00:19:36,320
way uh to migrate equity spring to

00:19:33,919 --> 00:19:37,039
carcass uh to address their full

00:19:36,320 --> 00:19:39,760
challenges

00:19:37,039 --> 00:19:42,559
or even we need to submit the

00:19:39,760 --> 00:19:46,160
corporation because spring

00:19:42,559 --> 00:19:48,480
has a plan to support the supreme native

00:19:46,160 --> 00:19:49,280
end of this year maybe around october

00:19:48,480 --> 00:19:52,559
september

00:19:49,280 --> 00:19:54,960
time period so we don't need

00:19:52,559 --> 00:19:56,880
enough time to wait for that

00:19:54,960 --> 00:20:00,080
announcement that's why we

00:19:56,880 --> 00:20:03,120
more focus on carcass and then

00:20:00,080 --> 00:20:05,039
we got some new pilot project to migrate

00:20:03,120 --> 00:20:08,080
a spring to carcass and this

00:20:05,039 --> 00:20:09,280
is this only way migrate more is there

00:20:08,080 --> 00:20:12,480
any some

00:20:09,280 --> 00:20:15,919
easier way or some comfortable way

00:20:12,480 --> 00:20:17,679
yes the answer is yes so

00:20:15,919 --> 00:20:21,039
the red hat probably the migration

00:20:17,679 --> 00:20:23,919
toolkit also known as mta

00:20:21,039 --> 00:20:25,760
migration to people application provide

00:20:23,919 --> 00:20:29,039
uh some of the quarters

00:20:25,760 --> 00:20:30,720
lose which means you just unload your

00:20:29,039 --> 00:20:32,240
spring with the application like a job

00:20:30,720 --> 00:20:34,880
file or explore the

00:20:32,240 --> 00:20:36,240
old file and then you could just analyze

00:20:34,880 --> 00:20:39,360
your application

00:20:36,240 --> 00:20:42,640
and it will show how to migrate

00:20:39,360 --> 00:20:43,919
and also quarkx provide spring

00:20:42,640 --> 00:20:48,000
compatibility

00:20:43,919 --> 00:20:50,960
let me share once again uh real quick

00:20:48,000 --> 00:20:51,600
so when you go to quarkx.io this is the

00:20:50,960 --> 00:20:54,480
uh

00:20:51,600 --> 00:20:56,400
our official page focus and then you can

00:20:54,480 --> 00:20:56,880
find the latest version here and you go

00:20:56,400 --> 00:21:00,039
to

00:20:56,880 --> 00:21:02,880
uh guides and click on

00:21:00,039 --> 00:21:04,000
compatibility this is all about the

00:21:02,880 --> 00:21:07,760
supreme

00:21:04,000 --> 00:21:11,039
api but not we not we're not going to

00:21:07,760 --> 00:21:14,720
address all the spring ecosystem

00:21:11,039 --> 00:21:18,400
but also spring all apis

00:21:14,720 --> 00:21:22,000
but we just focus on the common uh

00:21:18,400 --> 00:21:25,120
popular spring api for example spring di

00:21:22,000 --> 00:21:28,880
spring web and speed data and

00:21:25,120 --> 00:21:32,159
spring security spring cache etc

00:21:28,880 --> 00:21:35,440
this old api means you just keep

00:21:32,159 --> 00:21:38,400
using same spring api without no code

00:21:35,440 --> 00:21:40,240
change because the qualcomm wrap up your

00:21:38,400 --> 00:21:43,120
spring api and the running on

00:21:40,240 --> 00:21:44,080
qualcomm time but you still have live

00:21:43,120 --> 00:21:47,440
coding capability

00:21:44,080 --> 00:21:50,320
but also you could name compilation

00:21:47,440 --> 00:21:51,280
capability with the spring application

00:21:50,320 --> 00:21:54,080
but

00:21:51,280 --> 00:21:54,880
today in this workshop we're not going

00:21:54,080 --> 00:21:58,559
to use this

00:21:54,880 --> 00:22:00,720
spring compatibility api the reason why

00:21:58,559 --> 00:22:01,679
we sometimes your screen with the

00:22:00,720 --> 00:22:04,960
application

00:22:01,679 --> 00:22:08,559
have a specific api or specific feature

00:22:04,960 --> 00:22:12,159
which he quercus does not support

00:22:08,559 --> 00:22:15,360
with these capabilities so

00:22:12,159 --> 00:22:16,240
so i can show you uh this is a maybe

00:22:15,360 --> 00:22:18,159
better way

00:22:16,240 --> 00:22:20,000
in the end because there are lots of

00:22:18,159 --> 00:22:23,600
spring features supreme

00:22:20,000 --> 00:22:26,000
component you already are using so

00:22:23,600 --> 00:22:28,240
this is the you know how to refactor

00:22:26,000 --> 00:22:29,919
your easy spring boot to carcass maybe

00:22:28,240 --> 00:22:32,320
brand new thing

00:22:29,919 --> 00:22:34,480
so maybe but you could still start with

00:22:32,320 --> 00:22:35,280
the the migration turkey because the

00:22:34,480 --> 00:22:38,559
migration

00:22:35,280 --> 00:22:41,679
the migration toolkit uh basically

00:22:38,559 --> 00:22:45,120
uh uses this spring comfortable api

00:22:41,679 --> 00:22:48,880
on carcass migration so this is

00:22:45,120 --> 00:22:49,760
maybe two ways for you when you adopt a

00:22:48,880 --> 00:22:52,720
spree

00:22:49,760 --> 00:22:54,159
to carcass migration paths or

00:22:52,720 --> 00:22:57,120
refactoring past

00:22:54,159 --> 00:22:59,520
the first one uh try to use a supreme

00:22:57,120 --> 00:23:04,480
compatible api on the forecast

00:22:59,520 --> 00:23:04,480
which uh makes you

00:23:04,720 --> 00:23:09,120
not so much not so many change your

00:23:06,799 --> 00:23:11,200
screen with the application but secondly

00:23:09,120 --> 00:23:12,640
you need to rewrite all applications but

00:23:11,200 --> 00:23:15,520
that's not a

00:23:12,640 --> 00:23:16,320
big deal i guess and i'm pretty sure

00:23:15,520 --> 00:23:19,520
because

00:23:16,320 --> 00:23:21,919
you already understand the java

00:23:19,520 --> 00:23:23,600
stat the standard java specification and

00:23:21,919 --> 00:23:26,320
implementation way

00:23:23,600 --> 00:23:28,320
so you just spend maybe just two days or

00:23:26,320 --> 00:23:30,960
three days to understand

00:23:28,320 --> 00:23:33,600
how workers implement the microsoft

00:23:30,960 --> 00:23:35,600
application based on java specification

00:23:33,600 --> 00:23:38,000
so we already have a great success story

00:23:35,600 --> 00:23:40,880
already migrate from spring to quarters

00:23:38,000 --> 00:23:42,400
and they just spend maybe five day or

00:23:40,880 --> 00:23:45,760
three days to catch up all

00:23:42,400 --> 00:23:49,600
carcass features and

00:23:45,760 --> 00:23:53,120
capability if you go to

00:23:49,600 --> 00:23:56,960
focus uh the usual success story

00:23:53,120 --> 00:23:56,960
let me show you quickly quarters

00:23:57,120 --> 00:24:00,159
so here is all you can find the user

00:23:59,440 --> 00:24:03,200
story

00:24:00,159 --> 00:24:05,760
for example which customer

00:24:03,200 --> 00:24:06,559
already adopt parkers and products

00:24:05,760 --> 00:24:08,400
environment

00:24:06,559 --> 00:24:10,400
and some of our customers already

00:24:08,400 --> 00:24:12,799
migrate from spring to quarters

00:24:10,400 --> 00:24:14,240
or just develop a brand new application

00:24:12,799 --> 00:24:16,840
based on qr code you combine

00:24:14,240 --> 00:24:18,159
all that i'm gonna copy and upload the

00:24:16,840 --> 00:24:21,840
chat uh

00:24:18,159 --> 00:24:26,559
you might interesting here stop sharing

00:24:21,840 --> 00:24:33,200
i'm gonna go back to chat window and

00:24:26,559 --> 00:24:33,200

YouTube URL: https://www.youtube.com/watch?v=cXTi31TRh5o


