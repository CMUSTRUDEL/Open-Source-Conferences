Title: Container security automation with Ansible - DevConf.CZ 2021
Publication date: 2021-03-14
Playlist: DevConfCZ 2021
Description: 
	Speaker: Sumit Jaiswal


Docker containers are the new way developers package applications. Due to the ease of use and deployment, more and more applications are getting deployed in containers for production use. With so many moving parts, it becomes imperative that we have the capability to continuously scan Docker containers for security issues. We will explore following points in our discussion:
- Understanding continuous security concepts
- Automating vulnerability assessments of Docker containers using Ansible
- Scheduled scans using Ansible Tower for Docker security
- Scheduled scans using Ansible Tower for operating systems and kernel security
- Scheduled scans for file integrity checks, host level monitoring using Ansible for various compliance initiatives 


Schedule: https://sched.co/gmOO
Captions: 
	00:00:00,480 --> 00:00:03,919
good morning good evening and good

00:00:02,159 --> 00:00:05,120
afternoon based on the location where

00:00:03,919 --> 00:00:08,160
you're located

00:00:05,120 --> 00:00:09,519
so yeah hi uh so my name is sumat and

00:00:08,160 --> 00:00:11,280
i'm here to present you

00:00:09,519 --> 00:00:13,040
on the topic of container security

00:00:11,280 --> 00:00:16,480
automation with ansible

00:00:13,040 --> 00:00:18,400
so uh currently i'm working with ansible

00:00:16,480 --> 00:00:20,240
team as a senior software engineer

00:00:18,400 --> 00:00:22,640
and basically i'm part of ansible

00:00:20,240 --> 00:00:25,680
content team where i directly contribute

00:00:22,640 --> 00:00:26,640
in ansible security and the network team

00:00:25,680 --> 00:00:29,279
as well

00:00:26,640 --> 00:00:31,439
so as you can see i have listed on my

00:00:29,279 --> 00:00:35,360
github and irc handle

00:00:31,439 --> 00:00:36,640
which is just gis and i've also listed

00:00:35,360 --> 00:00:39,200
on my mail as well

00:00:36,640 --> 00:00:40,160
so at any point of time you guys have

00:00:39,200 --> 00:00:42,000
any query

00:00:40,160 --> 00:00:44,000
post this session as well with respect

00:00:42,000 --> 00:00:47,520
to container security automation

00:00:44,000 --> 00:00:50,879
with ansible you can just ping me up

00:00:47,520 --> 00:00:55,680
okay so moving on on the agenda

00:00:50,879 --> 00:00:57,360
okay so the agenda for today is uh

00:00:55,680 --> 00:00:59,120
the first one is understanding

00:00:57,360 --> 00:01:02,160
continuous security concept

00:00:59,120 --> 00:01:04,239
and this will basically tell us how

00:01:02,160 --> 00:01:06,799
and where it is important with respect

00:01:04,239 --> 00:01:08,479
to container security and how we used to

00:01:06,799 --> 00:01:10,479
check for security and compliance and

00:01:08,479 --> 00:01:12,880
hardening of that the second

00:01:10,479 --> 00:01:14,640
goes about tells you scan using the

00:01:12,880 --> 00:01:15,520
scans using the ansible automation

00:01:14,640 --> 00:01:17,119
platform

00:01:15,520 --> 00:01:19,119
the third one is understanding

00:01:17,119 --> 00:01:20,960
terminology which is basically used for

00:01:19,119 --> 00:01:22,479
identifying the vulnerability and which

00:01:20,960 --> 00:01:26,240
is most commonly used

00:01:22,479 --> 00:01:27,360
in the current scenario and again then

00:01:26,240 --> 00:01:28,960
we'll talk about all

00:01:27,360 --> 00:01:30,960
automating vulnerability analysis of

00:01:28,960 --> 00:01:31,920
docker containers and then we'll go

00:01:30,960 --> 00:01:33,920
about discuss

00:01:31,920 --> 00:01:35,600
uh the schedule scan using ansible

00:01:33,920 --> 00:01:38,479
automation platform which actually

00:01:35,600 --> 00:01:40,479
internally uses ansible tower and then

00:01:38,479 --> 00:01:42,240
we'll go about discuss uh

00:01:40,479 --> 00:01:43,840
to file integrity checks host level

00:01:42,240 --> 00:01:45,439
monitoring and various compliance

00:01:43,840 --> 00:01:47,840
initiative

00:01:45,439 --> 00:01:47,840
so yep

00:01:48,640 --> 00:01:52,640
so uh first one is understanding

00:01:51,360 --> 00:01:55,040
security concepts

00:01:52,640 --> 00:01:56,799
so as you all know that one of the key

00:01:55,040 --> 00:01:58,000
approaches to emerge out of devops is

00:01:56,799 --> 00:02:01,040
the idea of

00:01:58,000 --> 00:02:03,600
continuous and immigrable infrastructure

00:02:01,040 --> 00:02:05,360
it actually means that every time there

00:02:03,600 --> 00:02:06,560
needs to be a runtime change

00:02:05,360 --> 00:02:08,160
and application of goods or

00:02:06,560 --> 00:02:08,879
configuration the containers are built

00:02:08,160 --> 00:02:11,599
to deploy

00:02:08,879 --> 00:02:13,360
and existing running ones are torn down

00:02:11,599 --> 00:02:16,000
and that actually allows

00:02:13,360 --> 00:02:18,480
for predictability resilience and it

00:02:16,000 --> 00:02:20,160
simplifies deployment choices at runtime

00:02:18,480 --> 00:02:22,160
and there is no surprise that many

00:02:20,160 --> 00:02:22,640
operation teams are already moving

00:02:22,160 --> 00:02:26,000
towards

00:02:22,640 --> 00:02:27,680
it also uh with that comes the question

00:02:26,000 --> 00:02:28,400
of when these container basically should

00:02:27,680 --> 00:02:31,760
be tested

00:02:28,400 --> 00:02:34,720
for security and compliance so and that

00:02:31,760 --> 00:02:35,040
point at that point it is like on the so

00:02:34,720 --> 00:02:37,120
by

00:02:35,040 --> 00:02:38,560
embracing the process of continuous

00:02:37,120 --> 00:02:40,640
security and scanning

00:02:38,560 --> 00:02:42,480
and monitoring you can actually go ahead

00:02:40,640 --> 00:02:43,280
and automate the variety of workload and

00:02:42,480 --> 00:02:45,760
workflows

00:02:43,280 --> 00:02:47,680
for docker containers uh throws at you

00:02:45,760 --> 00:02:48,000
so here the best practices that we can

00:02:47,680 --> 00:02:51,440
see

00:02:48,000 --> 00:02:52,720
is like uh first one is ensure that

00:02:51,440 --> 00:02:54,800
there are no valuability in your

00:02:52,720 --> 00:02:57,760
container so the first one is

00:02:54,800 --> 00:02:58,159
basic so the second one is every time

00:02:57,760 --> 00:03:00,560
you

00:02:58,159 --> 00:03:01,599
deploy on production system the image

00:03:00,560 --> 00:03:04,080
should be rescan

00:03:01,599 --> 00:03:05,599
for any vulnerability that is that might

00:03:04,080 --> 00:03:08,560
have got crept in

00:03:05,599 --> 00:03:10,080
and third one is the uh every time you

00:03:08,560 --> 00:03:12,080
do a rebuild

00:03:10,080 --> 00:03:13,599
you don't do a patch you just do a

00:03:12,080 --> 00:03:15,920
rebuild instead

00:03:13,599 --> 00:03:17,360
and how ansible and ansible automation

00:03:15,920 --> 00:03:19,120
platform can help here

00:03:17,360 --> 00:03:21,200
is like there are plenty of security

00:03:19,120 --> 00:03:22,000
tools uh that are available currently in

00:03:21,200 --> 00:03:24,400
the market

00:03:22,000 --> 00:03:25,040
which actually can be automated using

00:03:24,400 --> 00:03:27,599
ansible

00:03:25,040 --> 00:03:29,599
and ansible can as well as all the new

00:03:27,599 --> 00:03:32,400
tools and needs to automate all those

00:03:29,599 --> 00:03:33,920
products and that can internally help in

00:03:32,400 --> 00:03:36,959
docking container security and

00:03:33,920 --> 00:03:38,799
scanning images so as uh

00:03:36,959 --> 00:03:40,000
as you see uh first one is automatic

00:03:38,799 --> 00:03:41,519
vulnerability is kind of like echo

00:03:40,000 --> 00:03:43,840
security and anchor

00:03:41,519 --> 00:03:45,680
and it can actually help in enabling

00:03:43,840 --> 00:03:47,680
programming programmatic scanning

00:03:45,680 --> 00:03:49,200
and it can also help in automating

00:03:47,680 --> 00:03:52,879
runtime production tools to ensure

00:03:49,200 --> 00:03:52,879
images don't change during runtime

00:03:53,439 --> 00:04:00,799
okay so now we can move to the

00:03:57,200 --> 00:04:02,640
next slide okay so

00:04:00,799 --> 00:04:04,080
as you know continuous security scanning

00:04:02,640 --> 00:04:06,319
requires us to manage

00:04:04,080 --> 00:04:07,519
uh in a software like ansible automation

00:04:06,319 --> 00:04:09,760
platform it

00:04:07,519 --> 00:04:11,040
actually most of the discussion most of

00:04:09,760 --> 00:04:12,560
the discus tool here

00:04:11,040 --> 00:04:14,319
can be used for scanning and maintaining

00:04:12,560 --> 00:04:16,479
a benchmark for security

00:04:14,319 --> 00:04:17,759
we should be uh we should think about

00:04:16,479 --> 00:04:19,199
the entire process

00:04:17,759 --> 00:04:20,880
as an incident response and threat

00:04:19,199 --> 00:04:23,919
detection workflow as well

00:04:20,880 --> 00:04:25,919
so how ansible security automation

00:04:23,919 --> 00:04:27,840
initiative helps here is like it helps

00:04:25,919 --> 00:04:31,360
you prepare

00:04:27,840 --> 00:04:32,720
prepare the tool for automation it can

00:04:31,360 --> 00:04:35,360
actually help and detection

00:04:32,720 --> 00:04:37,759
in a detection analysis it can also help

00:04:35,360 --> 00:04:40,160
in containment eradication and recovery

00:04:37,759 --> 00:04:40,880
and at the end it can also help in post

00:04:40,160 --> 00:04:44,880
incident

00:04:40,880 --> 00:04:48,000
activity as well so before going and

00:04:44,880 --> 00:04:50,400
uh discussing about the uh

00:04:48,000 --> 00:04:51,680
uh each and individual tool i'll just be

00:04:50,400 --> 00:04:54,320
going through the basic

00:04:51,680 --> 00:04:54,880
uh understanding and terminology for

00:04:54,320 --> 00:04:56,960
which

00:04:54,880 --> 00:04:58,160
is being used currently for identifying

00:04:56,960 --> 00:05:00,000
the vulnerability

00:04:58,160 --> 00:05:01,919
so basically as a part of our

00:05:00,000 --> 00:05:03,039
preparation it may be useful to get

00:05:01,919 --> 00:05:05,919
familiar with the

00:05:03,039 --> 00:05:06,720
follow uh like the following terms that

00:05:05,919 --> 00:05:10,400
are listed

00:05:06,720 --> 00:05:13,039
there so first one is cv which is

00:05:10,400 --> 00:05:14,960
common vulnerability and exposure so

00:05:13,039 --> 00:05:18,400
basically it's a list of records

00:05:14,960 --> 00:05:20,720
where each container and

00:05:18,400 --> 00:05:22,960
each containing an identification number

00:05:20,720 --> 00:05:25,199
and a description

00:05:22,960 --> 00:05:26,160
at least one public reference for the

00:05:25,199 --> 00:05:28,560
publicly known

00:05:26,160 --> 00:05:30,080
cyber security vulnerabilities so the

00:05:28,560 --> 00:05:32,880
other one is

00:05:30,080 --> 00:05:34,320
oval which is open vulnerability and

00:05:32,880 --> 00:05:36,000
assessment language

00:05:34,320 --> 00:05:38,560
it is actually an international

00:05:36,000 --> 00:05:40,560
information security community standard

00:05:38,560 --> 00:05:42,800
to promote open and publicly available

00:05:40,560 --> 00:05:45,360
security content

00:05:42,800 --> 00:05:47,199
and the third one is cwe which is a

00:05:45,360 --> 00:05:49,039
common weakness and enumeration

00:05:47,199 --> 00:05:51,440
and it's also a category system for

00:05:49,039 --> 00:05:53,440
software weaknesses and vulnerability

00:05:51,440 --> 00:05:54,479
and it's it's a sustained community

00:05:53,440 --> 00:05:56,720
project

00:05:54,479 --> 00:05:57,600
with the goals of understanding flaws in

00:05:56,720 --> 00:05:59,919
software

00:05:57,600 --> 00:06:01,039
and creating automated tools that can be

00:05:59,919 --> 00:06:04,400
used to identify

00:06:01,039 --> 00:06:05,199
and fix the prevent those flaws and the

00:06:04,400 --> 00:06:08,080
very last one

00:06:05,199 --> 00:06:09,919
is nvd so basically it's national

00:06:08,080 --> 00:06:10,960
vulnerability database and it is a us

00:06:09,919 --> 00:06:13,440
government database

00:06:10,960 --> 00:06:14,960
which is uh which takes care of

00:06:13,440 --> 00:06:16,160
vulnerability management database and

00:06:14,960 --> 00:06:19,280
it's available in

00:06:16,160 --> 00:06:22,319
uh available to public in xml format

00:06:19,280 --> 00:06:24,560
so going through the topic of uh

00:06:22,319 --> 00:06:26,240
a discussion here you'll get to like

00:06:24,560 --> 00:06:28,479
i'll be using cvs

00:06:26,240 --> 00:06:29,440
most often because that is how most

00:06:28,479 --> 00:06:32,960
often

00:06:29,440 --> 00:06:35,440
we categorize the

00:06:32,960 --> 00:06:36,400
issues that we find in container

00:06:35,440 --> 00:06:39,520
security world

00:06:36,400 --> 00:06:41,919
uh so moving on

00:06:39,520 --> 00:06:43,199
so uh as you can see there are many

00:06:41,919 --> 00:06:45,120
different ways of evaluating the

00:06:43,199 --> 00:06:46,240
security of containers as containers are

00:06:45,120 --> 00:06:48,639
everywhere

00:06:46,240 --> 00:06:50,080
at this point of time there are very

00:06:48,639 --> 00:06:51,120
various tools and techniques that are

00:06:50,080 --> 00:06:52,960
available to perform

00:06:51,120 --> 00:06:54,800
scans and assess the docker containers

00:06:52,960 --> 00:06:58,160
and the your environment

00:06:54,800 --> 00:06:58,800
so these are the tools that i'll be

00:06:58,160 --> 00:07:01,440
discussing

00:06:58,800 --> 00:07:02,080
during the presentation and i'll be

00:07:01,440 --> 00:07:04,960
going through

00:07:02,080 --> 00:07:06,240
each of these tools individually as well

00:07:04,960 --> 00:07:09,520
and i'll also

00:07:06,240 --> 00:07:09,840
have a demo prepared uh so at this point

00:07:09,520 --> 00:07:11,680
i

00:07:09,840 --> 00:07:13,120
understand that i'll have to switch

00:07:11,680 --> 00:07:15,599
between the tabs

00:07:13,120 --> 00:07:17,120
so i'll stop sharing and reshare again

00:07:15,599 --> 00:07:20,319
so bear with me for that

00:07:17,120 --> 00:07:23,520
so yeah so first one is docker bench

00:07:20,319 --> 00:07:24,880
uh and as i told you so this uh would i

00:07:23,520 --> 00:07:27,440
i would

00:07:24,880 --> 00:07:28,000
go in detail for this individual tool as

00:07:27,440 --> 00:07:29,759
well

00:07:28,000 --> 00:07:31,759
in upcoming slides but yeah just to give

00:07:29,759 --> 00:07:33,840
a basic idea what is docker tool

00:07:31,759 --> 00:07:35,120
docker bench is it's basically a

00:07:33,840 --> 00:07:38,400
security shell script

00:07:35,120 --> 00:07:40,639
which actually performs checks uh

00:07:38,400 --> 00:07:42,240
based on the cis which is a center for

00:07:40,639 --> 00:07:45,520
information security

00:07:42,240 --> 00:07:47,759
and uh the second one is clear so

00:07:45,520 --> 00:07:49,120
claire is also a tool to perform static

00:07:47,759 --> 00:07:51,919
vulnerability analysis

00:07:49,120 --> 00:07:53,199
based on the cve database so cv is the

00:07:51,919 --> 00:07:56,000
thing that we discussed

00:07:53,199 --> 00:07:56,560
in the last slide and hacker second

00:07:56,000 --> 00:08:00,000
anchor

00:07:56,560 --> 00:08:02,319
are these are two tools uh that

00:08:00,000 --> 00:08:04,080
perform variety of docker uh docker and

00:08:02,319 --> 00:08:06,400
communities uh security

00:08:04,080 --> 00:08:08,319
uh things but i'll be discussing over a

00:08:06,400 --> 00:08:10,160
few of the things that i wanted to bring

00:08:08,319 --> 00:08:12,240
about in this particular presentation

00:08:10,160 --> 00:08:14,479
so yeah across i can anchor a platform

00:08:12,240 --> 00:08:17,520
to perform security evaluation

00:08:14,479 --> 00:08:21,840
and make runtime policy decisions and

00:08:17,520 --> 00:08:23,520
the part of uh aquasic is acquisifect3v

00:08:21,840 --> 00:08:25,120
and it's basically a simple and

00:08:23,520 --> 00:08:27,360
comprehensive vulnerability

00:08:25,120 --> 00:08:28,400
image scanner for containers and the

00:08:27,360 --> 00:08:31,840
lastly

00:08:28,400 --> 00:08:34,240
we have os query so it actually doesn't

00:08:31,840 --> 00:08:34,959
er fit in the container side world

00:08:34,240 --> 00:08:37,200
because

00:08:34,959 --> 00:08:38,399
it actually goes ahead and check for the

00:08:37,200 --> 00:08:40,479
os related thing

00:08:38,399 --> 00:08:42,800
in your inside your container so

00:08:40,479 --> 00:08:43,279
actually if you think it is an analytics

00:08:42,800 --> 00:08:45,440
to do

00:08:43,279 --> 00:08:48,240
the hids which is host intrusion

00:08:45,440 --> 00:08:51,040
detection system type of activities

00:08:48,240 --> 00:08:51,920
so yep uh i'll be discussing and going

00:08:51,040 --> 00:08:54,720
over these

00:08:51,920 --> 00:08:57,040
tools individually and upcoming sites so

00:08:54,720 --> 00:08:59,200
first one is the docker bench

00:08:57,040 --> 00:08:59,200
so

00:09:07,040 --> 00:09:12,880
uh i hope you guys are able to see the

00:09:08,880 --> 00:09:12,880
screen yana can you confirm

00:09:14,080 --> 00:09:16,880
yes we can see

00:09:17,760 --> 00:09:22,000
cool thanks thanks for the confirmation

00:09:20,080 --> 00:09:23,920
okay so the first one is the docker

00:09:22,000 --> 00:09:25,839
bench and it's the docker bench for

00:09:23,920 --> 00:09:27,200
security as i told you it's a basically

00:09:25,839 --> 00:09:28,880
basically a shell script

00:09:27,200 --> 00:09:30,800
that checks for dozens of common best

00:09:28,880 --> 00:09:32,399
practices around deploying docker

00:09:30,800 --> 00:09:35,440
containers introduction

00:09:32,399 --> 00:09:37,920
and the tests here are all automated and

00:09:35,440 --> 00:09:39,519
is inspired by cia's docker benchmarks

00:09:37,920 --> 00:09:40,640
where ci is the center for information

00:09:39,519 --> 00:09:43,200
security

00:09:40,640 --> 00:09:44,080
so as you see i have listed down what

00:09:43,200 --> 00:09:47,120
all checks

00:09:44,080 --> 00:09:47,760
uh docker bench performs and it's

00:09:47,120 --> 00:09:49,920
basically

00:09:47,760 --> 00:09:51,279
host configuration your docker demon

00:09:49,920 --> 00:09:53,920
configuration and files

00:09:51,279 --> 00:09:55,760
docker container images docker runtime

00:09:53,920 --> 00:09:57,120
and docker security operation and docker

00:09:55,760 --> 00:10:00,399
swarm configuration

00:09:57,120 --> 00:10:03,200
so before uh like

00:10:00,399 --> 00:10:05,040
going to the presentation part uh so i

00:10:03,200 --> 00:10:08,079
have like recorded a demo

00:10:05,040 --> 00:10:08,480
for this particular uh tool but i wanted

00:10:08,079 --> 00:10:11,440
to

00:10:08,480 --> 00:10:12,880
cover clear as well because uh if i will

00:10:11,440 --> 00:10:13,680
be switching between the slides i think

00:10:12,880 --> 00:10:17,519
it will take

00:10:13,680 --> 00:10:20,160
a bit of time and i wanted to cover

00:10:17,519 --> 00:10:22,720
during the allocated time the entire

00:10:20,160 --> 00:10:24,160
presentation so

00:10:22,720 --> 00:10:26,480
before going to the presentation i'll

00:10:24,160 --> 00:10:28,079
discuss the clear tool as well

00:10:26,480 --> 00:10:29,760
and post that i'll be going through the

00:10:28,079 --> 00:10:33,600
demo recording of

00:10:29,760 --> 00:10:34,480
docker so yeah so the other tool that i

00:10:33,600 --> 00:10:36,800
wanted to discuss

00:10:34,480 --> 00:10:38,480
is clear it's basically open source

00:10:36,800 --> 00:10:40,320
project and it is used for static

00:10:38,480 --> 00:10:44,560
analysis of vulnerability

00:10:40,320 --> 00:10:47,279
and it is a static analysis

00:10:44,560 --> 00:10:48,640
against containers and it and health and

00:10:47,279 --> 00:10:49,920
health by checking with the existing

00:10:48,640 --> 00:10:51,680
vulnerability database

00:10:49,920 --> 00:10:53,120
so claire actually maintains a

00:10:51,680 --> 00:10:55,600
volumetric database

00:10:53,120 --> 00:10:57,519
and based on that a database actually

00:10:55,600 --> 00:11:00,480
the clear scanner performs the

00:10:57,519 --> 00:11:01,519
scan on the docker images and shows you

00:11:00,480 --> 00:11:04,720
uh the result

00:11:01,519 --> 00:11:05,279
with all the required cvs and severity

00:11:04,720 --> 00:11:08,399
level

00:11:05,279 --> 00:11:10,160
information so more details about this

00:11:08,399 --> 00:11:11,920
clear scan can easily be found over the

00:11:10,160 --> 00:11:13,120
github repo of claire because it's an

00:11:11,920 --> 00:11:14,480
open source project so everything is

00:11:13,120 --> 00:11:17,279
available on github

00:11:14,480 --> 00:11:18,160
and now it is part of uh it's a part of

00:11:17,279 --> 00:11:22,240
coreos

00:11:18,160 --> 00:11:25,279
and uh it is now part of way as well

00:11:22,240 --> 00:11:27,440
uh so yeah it actually uses the

00:11:25,279 --> 00:11:29,920
clear api index to their uh for the

00:11:27,440 --> 00:11:33,519
container images and it checks for

00:11:29,920 --> 00:11:36,000
known vulnerabilities and clear scanner

00:11:33,519 --> 00:11:37,760
is a tool that can actually trigger and

00:11:36,000 --> 00:11:39,279
help in

00:11:37,760 --> 00:11:41,440
getting through the clear database and

00:11:39,279 --> 00:11:45,040
give you the exact result

00:11:41,440 --> 00:11:45,040
so for claire i have just

00:11:46,079 --> 00:11:49,680
focused on the playbook and it's

00:11:47,760 --> 00:11:52,560
playbook run so as you see on the left

00:11:49,680 --> 00:11:55,680
hand side i have the entire playbook

00:11:52,560 --> 00:11:57,920
for clear scanner and as you see uh the

00:11:55,680 --> 00:11:59,600
name of the player book is uh scanning

00:11:57,920 --> 00:12:01,920
containers using clear scanner

00:11:59,600 --> 00:12:04,639
and hosts have kept us as localhost

00:12:01,920 --> 00:12:07,839
because uh

00:12:04,639 --> 00:12:08,720
as you see localhost i'll run this

00:12:07,839 --> 00:12:11,040
particular

00:12:08,720 --> 00:12:12,399
ansible playbook on my local box so

00:12:11,040 --> 00:12:13,200
because of that i have kept it as

00:12:12,399 --> 00:12:15,440
localhost

00:12:13,200 --> 00:12:17,279
and let's suppose if somebody wants to

00:12:15,440 --> 00:12:19,360
check for a docker container

00:12:17,279 --> 00:12:21,120
and inside that so they can just give

00:12:19,360 --> 00:12:22,399
the inventory details here and they can

00:12:21,120 --> 00:12:24,560
just run it

00:12:22,399 --> 00:12:25,760
here am making gather facts as false

00:12:24,560 --> 00:12:27,120
because i am not

00:12:25,760 --> 00:12:29,360
bothered about collecting the ansible

00:12:27,120 --> 00:12:32,560
variables and its information

00:12:29,360 --> 00:12:34,240
um become is yes why i'm doing it

00:12:32,560 --> 00:12:34,560
because i wanted to escalate privileges

00:12:34,240 --> 00:12:37,600
to

00:12:34,560 --> 00:12:38,079
pseudo level so i'm using two variables

00:12:37,600 --> 00:12:40,160
as

00:12:38,079 --> 00:12:41,920
positive one is image to scan the second

00:12:40,160 --> 00:12:45,440
one is clear server

00:12:41,920 --> 00:12:47,600
here i'll be trying to scan sorry

00:12:45,440 --> 00:12:49,600
here i'll try to scan the debian sid

00:12:47,600 --> 00:12:51,760
image and i'll

00:12:49,600 --> 00:12:52,880
have already have a setup ready with the

00:12:51,760 --> 00:12:55,120
clear server so

00:12:52,880 --> 00:12:56,800
this particular playbook talks about

00:12:55,120 --> 00:12:59,600
only

00:12:56,800 --> 00:13:01,440
the clear scanner so clear server you

00:12:59,600 --> 00:13:02,639
need to set up the clear server before

00:13:01,440 --> 00:13:04,560
you go ahead and

00:13:02,639 --> 00:13:05,920
run the clear scanner so this particular

00:13:04,560 --> 00:13:06,639
playbook only talks about the clear

00:13:05,920 --> 00:13:09,120
scanner

00:13:06,639 --> 00:13:10,399
so yeah clear server setup is at this

00:13:09,120 --> 00:13:13,279
particular location so

00:13:10,399 --> 00:13:14,240
what i do is i am using ansel module get

00:13:13,279 --> 00:13:17,519
url

00:13:14,240 --> 00:13:18,639
and command module so get url is doing

00:13:17,519 --> 00:13:20,399
the player scanner

00:13:18,639 --> 00:13:21,839
so as you see by the name it is

00:13:20,399 --> 00:13:23,519
suggesting that downloading and setting

00:13:21,839 --> 00:13:25,360
up the clear scanner library binary

00:13:23,519 --> 00:13:27,200
sorry

00:13:25,360 --> 00:13:28,959
so from this particular github repo it

00:13:27,200 --> 00:13:30,240
is trying to download it and move move

00:13:28,959 --> 00:13:30,800
to the destination folder and i am

00:13:30,240 --> 00:13:34,079
making

00:13:30,800 --> 00:13:36,000
the execution privileges as seth

00:13:34,079 --> 00:13:37,120
and now with the clear scanner command i

00:13:36,000 --> 00:13:39,760
am trying to

00:13:37,120 --> 00:13:40,880
run the clear scanner on the image of

00:13:39,760 --> 00:13:42,800
debian sid

00:13:40,880 --> 00:13:44,320
so and this will particularly report

00:13:42,800 --> 00:13:45,839
adjacent format

00:13:44,320 --> 00:13:48,079
and then i am registering the output and

00:13:45,839 --> 00:13:49,120
then downloading the report locally and

00:13:48,079 --> 00:13:52,399
on the left hand side

00:13:49,120 --> 00:13:55,519
if you see i am capturing the result so

00:13:52,399 --> 00:13:59,440
if you see my image name is a debian sid

00:13:55,519 --> 00:14:00,560
and unapproved cvs are all the cv that i

00:13:59,440 --> 00:14:02,800
have founded

00:14:00,560 --> 00:14:04,160
and the vulnerability that are available

00:14:02,800 --> 00:14:06,160
in this so

00:14:04,160 --> 00:14:07,600
as you see for both docker bench and

00:14:06,160 --> 00:14:10,720
clear is used for

00:14:07,600 --> 00:14:10,720
your image base

00:14:11,519 --> 00:14:14,639
it can actually check on image-based

00:14:13,440 --> 00:14:16,959
vulnerabilities

00:14:14,639 --> 00:14:18,399
and first one is docker bench and it is

00:14:16,959 --> 00:14:20,800
actually a docker product

00:14:18,399 --> 00:14:23,199
and clear is an open source project uh

00:14:20,800 --> 00:14:26,240
which is uh held by the community and

00:14:23,199 --> 00:14:27,199
actually is a static tools it's not a

00:14:26,240 --> 00:14:29,920
dynamic tool because

00:14:27,199 --> 00:14:32,000
it has a database set on on their own

00:14:29,920 --> 00:14:34,240
availability and on the basis of that

00:14:32,000 --> 00:14:35,600
it actually goes ahead and fire like cli

00:14:34,240 --> 00:14:37,600
clear scanner which on

00:14:35,600 --> 00:14:39,040
particular docker image and gets you the

00:14:37,600 --> 00:14:40,880
result so

00:14:39,040 --> 00:14:42,880
all these tools that i am talking about

00:14:40,880 --> 00:14:43,519
currently can easily be part of the ci

00:14:42,880 --> 00:14:46,959
system

00:14:43,519 --> 00:14:48,800
and can actually help in docker process

00:14:46,959 --> 00:14:50,880
compliance and other security compliance

00:14:48,800 --> 00:14:54,240
and its heartening

00:14:50,880 --> 00:14:59,199
so yeah so let me just stop the sharing

00:14:54,240 --> 00:15:03,040
and share the docker bench

00:14:59,199 --> 00:15:03,040
demo just hold on

00:15:04,320 --> 00:15:08,000
now i'll be sharing the entire screen i

00:15:06,399 --> 00:15:13,839
think

00:15:08,000 --> 00:15:13,839
because i wanted to share

00:15:17,600 --> 00:15:21,360
okay i hope you guys are able to see the

00:15:19,120 --> 00:15:23,839
entire screen now yes we can see this

00:15:21,360 --> 00:15:23,839
screen

00:15:25,600 --> 00:15:31,839
okay cool so this is the recording demo

00:15:29,440 --> 00:15:33,600
so i'll be doing a live demo for anchor

00:15:31,839 --> 00:15:35,920
but rest of the demo are recorded so

00:15:33,600 --> 00:15:36,639
this is the docker bench demo so as you

00:15:35,920 --> 00:15:40,560
see i

00:15:36,639 --> 00:15:42,639
am creating a docker bench playbook and

00:15:40,560 --> 00:15:44,399
here again i'm using host as localhost

00:15:42,639 --> 00:15:46,800
because i'm running on

00:15:44,399 --> 00:15:48,480
my local box and here become is yes

00:15:46,800 --> 00:15:50,560
because i want to escalate to

00:15:48,480 --> 00:15:52,000
sudo privileges and here i'm making

00:15:50,560 --> 00:15:54,800
gather facts that's true because i

00:15:52,000 --> 00:15:55,519
wanted to gather ansible a daytime

00:15:54,800 --> 00:15:59,040
variable

00:15:55,519 --> 00:16:01,040
which i am using here so first one

00:15:59,040 --> 00:16:03,120
first task is download and download the

00:16:01,040 --> 00:16:05,040
document security it is also

00:16:03,120 --> 00:16:06,160
available on your github profile as it's

00:16:05,040 --> 00:16:08,079
part of docker

00:16:06,160 --> 00:16:09,839
so i'm transferring the content to

00:16:08,079 --> 00:16:10,399
destination and then i'm trying to

00:16:09,839 --> 00:16:13,199
running

00:16:10,399 --> 00:16:15,759
run the actual docker shell script so

00:16:13,199 --> 00:16:18,160
i'm trying to change the directory here

00:16:15,759 --> 00:16:19,199
and then i'll be going through the

00:16:18,160 --> 00:16:22,720
command

00:16:19,199 --> 00:16:24,959
uh docker and i'm trying to run the

00:16:22,720 --> 00:16:26,560
shell script and transfer the output log

00:16:24,959 --> 00:16:27,600
then i'm trying to download the report

00:16:26,560 --> 00:16:30,000
locally and then

00:16:27,600 --> 00:16:32,160
i'm transferring the report location to

00:16:30,000 --> 00:16:35,360
the user

00:16:32,160 --> 00:16:37,440
okay so i think before uh

00:16:35,360 --> 00:16:38,399
starting before firing the playbook i

00:16:37,440 --> 00:16:40,000
just want to

00:16:38,399 --> 00:16:42,000
show you guys that currently i'm using

00:16:40,000 --> 00:16:44,320
ansible version 294

00:16:42,000 --> 00:16:46,560
which is kind of latest because ansible

00:16:44,320 --> 00:16:49,759
297 i think is already there

00:16:46,560 --> 00:16:52,320
and i'm using currently 294 so here goes

00:16:49,759 --> 00:16:52,320
the play run

00:16:55,839 --> 00:16:59,199
except uh as you see currently it is

00:16:58,320 --> 00:17:01,839
gathering facts

00:16:59,199 --> 00:17:03,120
and download and document security since

00:17:01,839 --> 00:17:04,400
it's already downloaded it is not

00:17:03,120 --> 00:17:06,480
showing changed as

00:17:04,400 --> 00:17:07,760
true so now it is running document

00:17:06,480 --> 00:17:09,760
security scan

00:17:07,760 --> 00:17:11,760
it is taking a bit of time because i

00:17:09,760 --> 00:17:12,480
have like close to five images already

00:17:11,760 --> 00:17:18,000
in my box

00:17:12,480 --> 00:17:20,079
so it is taking uh comparatively

00:17:18,000 --> 00:17:21,600
another time so yeah as you can see the

00:17:20,079 --> 00:17:23,280
reports can run scan

00:17:21,600 --> 00:17:25,360
completed and now the report is

00:17:23,280 --> 00:17:27,039
generated and i'm just throwing out to

00:17:25,360 --> 00:17:29,919
the user that where your particular

00:17:27,039 --> 00:17:29,919
report is located

00:17:30,480 --> 00:17:34,320
so now if i'll open the particular log

00:17:33,280 --> 00:17:38,080
you must see

00:17:34,320 --> 00:17:40,960
all the return output that

00:17:38,080 --> 00:17:42,160
docker bench gives you and all those is

00:17:40,960 --> 00:17:46,000
depending

00:17:42,160 --> 00:17:49,120
on your all those result basically

00:17:46,000 --> 00:17:53,840
okay sorry

00:17:49,120 --> 00:17:57,520
yeah so uh the configuration that you

00:17:53,840 --> 00:18:00,080
the log that gives is related on on this

00:17:57,520 --> 00:18:02,000
all this point host configuration your

00:18:00,080 --> 00:18:04,240
docker demon configuration and files

00:18:02,000 --> 00:18:06,240
your docker enterprise configurations so

00:18:04,240 --> 00:18:06,640
as you see there are n number of results

00:18:06,240 --> 00:18:10,160
and

00:18:06,640 --> 00:18:14,000
it's uh logged as a pass

00:18:10,160 --> 00:18:16,400
one info and one so

00:18:14,000 --> 00:18:18,240
only the one condition should be checked

00:18:16,400 --> 00:18:20,160
properly otherwise you can skip

00:18:18,240 --> 00:18:22,240
and you can also filter out the results

00:18:20,160 --> 00:18:23,600
so as i told you so this is scanning for

00:18:22,240 --> 00:18:26,160
almost five images so

00:18:23,600 --> 00:18:27,760
it is quite long otherwise for one

00:18:26,160 --> 00:18:28,400
particular image you will get a shorter

00:18:27,760 --> 00:18:30,240
result but

00:18:28,400 --> 00:18:33,200
it will have all the details with

00:18:30,240 --> 00:18:36,880
respect to the docker bench

00:18:33,200 --> 00:18:41,360
categories so yep i think i can

00:18:36,880 --> 00:18:44,000
stop it because this will go ahead and

00:18:41,360 --> 00:18:45,360
take through all those so as you can see

00:18:44,000 --> 00:18:48,000
container runtime docker song

00:18:45,360 --> 00:18:48,000
configuration

00:18:50,160 --> 00:18:53,840
so yeah so based on the log you can also

00:18:52,720 --> 00:18:56,320
filter out the result

00:18:53,840 --> 00:18:58,000
based on the images that you provide so

00:18:56,320 --> 00:19:11,840
at this point i'll just close it

00:18:58,000 --> 00:19:11,840
and go back to the presentation

00:19:19,120 --> 00:19:23,679
sorry guys for switching back and forth

00:19:22,080 --> 00:19:28,320
because i wanted to show you the demo

00:19:23,679 --> 00:19:29,760
and so i have to share the entire screen

00:19:28,320 --> 00:19:32,320
okay i hope you guys are able to see the

00:19:29,760 --> 00:19:32,320
screen again

00:19:33,280 --> 00:19:40,720
cool it's my day night

00:19:36,559 --> 00:19:40,720
everything is working cool uh

00:19:42,400 --> 00:19:49,760
so i have finished till clear

00:19:46,080 --> 00:19:51,600
okay so schedule scans uh

00:19:49,760 --> 00:19:52,880
why schedule scan is important uh

00:19:51,600 --> 00:19:55,600
because

00:19:52,880 --> 00:19:56,400
security is a continuous process right

00:19:55,600 --> 00:19:58,720
so

00:19:56,400 --> 00:19:59,600
it is a kind of loop of planning doing

00:19:58,720 --> 00:20:02,000
studying and acting

00:19:59,600 --> 00:20:02,799
it's kind of the thing that i've

00:20:02,000 --> 00:20:04,960
depicted is

00:20:02,799 --> 00:20:06,480
the dimming circle it's actually depicts

00:20:04,960 --> 00:20:09,360
the same so because

00:20:06,480 --> 00:20:10,320
if you are not doing it again and again

00:20:09,360 --> 00:20:12,320
at any point

00:20:10,320 --> 00:20:13,440
uh things might go wrong and things

00:20:12,320 --> 00:20:16,159
might go south and

00:20:13,440 --> 00:20:16,480
you'll be able you'll not be able to uh

00:20:16,159 --> 00:20:18,640
like

00:20:16,480 --> 00:20:21,919
uh catch those of things and you'll be

00:20:18,640 --> 00:20:24,320
in trouble so continue security

00:20:21,919 --> 00:20:25,120
is required from that prospectus and

00:20:24,320 --> 00:20:27,440
because of that

00:20:25,120 --> 00:20:29,039
schedule scan helps and using ansible

00:20:27,440 --> 00:20:31,360
automation platform offering like

00:20:29,039 --> 00:20:32,559
ansible tower you can schedule scan and

00:20:31,360 --> 00:20:34,640
get to the result

00:20:32,559 --> 00:20:37,760
every time you want it and at the time

00:20:34,640 --> 00:20:37,760
you want it so

00:20:38,000 --> 00:20:45,919
that is how it helps so let me

00:20:42,480 --> 00:20:47,679
so yeah this this is the tool or

00:20:45,919 --> 00:20:48,960
platform compliance that i wanted to

00:20:47,679 --> 00:20:52,240
talk about

00:20:48,960 --> 00:20:52,240
so basically anchor

00:20:52,480 --> 00:20:56,159
anchor engine is an open source project

00:20:54,640 --> 00:20:56,880
which actually provides a centralized

00:20:56,159 --> 00:20:58,320
service

00:20:56,880 --> 00:21:00,320
for inspection analysis and

00:20:58,320 --> 00:21:03,679
certification of container images

00:21:00,320 --> 00:21:05,919
it also uh has a restful apis and

00:21:03,679 --> 00:21:07,280
via anchor cli you can actually go ahead

00:21:05,919 --> 00:21:08,640
and perform the scans

00:21:07,280 --> 00:21:10,320
the anchor engine is provided as a

00:21:08,640 --> 00:21:12,080
docker container image as well

00:21:10,320 --> 00:21:13,520
which can actually be run as a

00:21:12,080 --> 00:21:14,480
standalone with an orchestration

00:21:13,520 --> 00:21:17,520
platform

00:21:14,480 --> 00:21:20,159
and uh it can actually uh

00:21:17,520 --> 00:21:22,400
help in high level operations like

00:21:20,159 --> 00:21:23,120
policy evaluation operations your image

00:21:22,400 --> 00:21:25,360
operations

00:21:23,120 --> 00:21:27,280
your policy operations your registry

00:21:25,360 --> 00:21:29,520
operations your subscription operate

00:21:27,280 --> 00:21:32,720
operations and system operations

00:21:29,520 --> 00:21:34,880
so quite a few operations but yeah it's

00:21:32,720 --> 00:21:36,559
anchor and echo security is kind of

00:21:34,880 --> 00:21:38,000
compliance tool which actually takes

00:21:36,559 --> 00:21:40,080
care of

00:21:38,000 --> 00:21:41,039
much more uh things that i'm talking

00:21:40,080 --> 00:21:43,360
about here

00:21:41,039 --> 00:21:45,760
since uh this particular topic is only

00:21:43,360 --> 00:21:47,600
revolving around container security so

00:21:45,760 --> 00:21:49,280
i'll be dealing only with container

00:21:47,600 --> 00:21:50,880
security world so yeah

00:21:49,280 --> 00:21:52,640
and the second one that i wanted to talk

00:21:50,880 --> 00:21:56,000
about is akka security trivia

00:21:52,640 --> 00:21:58,480
and it actually is a very useful

00:21:56,000 --> 00:21:59,120
tool and it can actually be very easily

00:21:58,480 --> 00:22:02,320
implemented

00:21:59,120 --> 00:22:05,280
into your ci system because it is

00:22:02,320 --> 00:22:05,919
uh very simple and it's just that you

00:22:05,280 --> 00:22:07,760
need to

00:22:05,919 --> 00:22:09,360
download the aqua security trivia tool

00:22:07,760 --> 00:22:12,640
from the security

00:22:09,360 --> 00:22:13,360
github depot and then it is very easy to

00:22:12,640 --> 00:22:17,120
use because

00:22:13,360 --> 00:22:20,159
it says that uh qb is a cli

00:22:17,120 --> 00:22:22,720
uh command and you give it the

00:22:20,159 --> 00:22:23,760
image and you just run it you'll be able

00:22:22,720 --> 00:22:25,840
to see that okay

00:22:23,760 --> 00:22:27,520
your pve performs analysis and give you

00:22:25,840 --> 00:22:30,720
the result in a

00:22:27,520 --> 00:22:34,159
json format and so it can actually be

00:22:30,720 --> 00:22:36,559
a a used in your dev cell pipeline

00:22:34,159 --> 00:22:37,280
so like your ci cd pipeline and it

00:22:36,559 --> 00:22:41,840
actually helps

00:22:37,280 --> 00:22:44,080
and supports multiple formats as well

00:22:41,840 --> 00:22:46,000
so at this point again i'll stop sharing

00:22:44,080 --> 00:22:49,440
and go back to the demo section

00:22:46,000 --> 00:22:49,440
because i want you to demo the

00:22:51,840 --> 00:22:58,720
anchor one

00:22:55,360 --> 00:22:59,200
through ansible tower okay so before

00:22:58,720 --> 00:23:01,039
going

00:22:59,200 --> 00:23:02,880
uh through the demo content and the

00:23:01,039 --> 00:23:05,440
playbook i'll just want to

00:23:02,880 --> 00:23:07,039
uh give you give you guys a heads up

00:23:05,440 --> 00:23:08,559
that all the playbook that i am showing

00:23:07,039 --> 00:23:11,679
in this particular presentation

00:23:08,559 --> 00:23:13,360
is already checked in add ansible

00:23:11,679 --> 00:23:15,200
security demo content

00:23:13,360 --> 00:23:16,799
and under playbook you will see there

00:23:15,200 --> 00:23:18,480
are

00:23:16,799 --> 00:23:20,159
platforms available and based on the

00:23:18,480 --> 00:23:20,880
platform of discussion you can just go

00:23:20,159 --> 00:23:22,480
ahead and

00:23:20,880 --> 00:23:23,919
check for the playbook and try it

00:23:22,480 --> 00:23:26,000
yourself okay

00:23:23,919 --> 00:23:27,039
so first one is anchor server because

00:23:26,000 --> 00:23:28,559
before uh

00:23:27,039 --> 00:23:31,039
firing the answer we'll see allie

00:23:28,559 --> 00:23:34,480
scanner i have to set up the server

00:23:31,039 --> 00:23:37,120
so as i think uh um like

00:23:34,480 --> 00:23:38,159
close to my timeline so i'll just skip

00:23:37,120 --> 00:23:40,400
it because this is a

00:23:38,159 --> 00:23:40,910
server setup based on the config file

00:23:40,400 --> 00:23:44,080
and then

00:23:40,910 --> 00:23:47,919
[Music]

00:23:44,080 --> 00:23:50,080
comes the anchor cli scan so

00:23:47,919 --> 00:23:52,480
if you see the cli scan actually it is

00:23:50,080 --> 00:23:55,440
uh trying to scan the image of docker

00:23:52,480 --> 00:23:55,919
debian latest and uh it is using ansible

00:23:55,440 --> 00:23:58,960
vars

00:23:55,919 --> 00:24:01,279
and your answer is set up on sorry

00:23:58,960 --> 00:24:04,080
anchor cli setup on this anchor server

00:24:01,279 --> 00:24:07,360
is set up on this local host 828 port

00:24:04,080 --> 00:24:08,799
and the default username and password is

00:24:07,360 --> 00:24:11,600
admin and foobar

00:24:08,799 --> 00:24:12,400
and this i'll try to run through ansible

00:24:11,600 --> 00:24:19,840
tower

00:24:12,400 --> 00:24:19,840
let me just log into it

00:24:21,360 --> 00:24:24,640
so yeah why i'm using tower is like

00:24:23,200 --> 00:24:26,799
because i wanted to demo the schedule

00:24:24,640 --> 00:24:29,200
scan part because it's very important to

00:24:26,799 --> 00:24:31,120
schedule this cam for every time you run

00:24:29,200 --> 00:24:32,080
it every time you want to check for a

00:24:31,120 --> 00:24:35,840
particular image

00:24:32,080 --> 00:24:38,159
or if you want to if you have a certain

00:24:35,840 --> 00:24:39,279
container image that is being modified

00:24:38,159 --> 00:24:41,520
so yeah the first one

00:24:39,279 --> 00:24:42,320
is project how i am setting the anchor

00:24:41,520 --> 00:24:45,200
scan project

00:24:42,320 --> 00:24:46,559
is like i am giving a anchor scan

00:24:45,200 --> 00:24:48,880
project and i'm getting

00:24:46,559 --> 00:24:50,159
the git repo where it will fetch the

00:24:48,880 --> 00:24:52,640
playbook from

00:24:50,159 --> 00:24:54,000
then i'm giving the inventory details

00:24:52,640 --> 00:24:56,080
inventory in this case

00:24:54,000 --> 00:24:58,480
uh would be the my would be my aws

00:24:56,080 --> 00:25:00,480
instance because

00:24:58,480 --> 00:25:02,080
here it is ubuntu system that's why you

00:25:00,480 --> 00:25:05,200
are seeing your public ip

00:25:02,080 --> 00:25:06,480
and the private ips with respect to aws

00:25:05,200 --> 00:25:07,840
instance you need to provide your

00:25:06,480 --> 00:25:10,400
credential as well because

00:25:07,840 --> 00:25:11,919
uh when you try to log in through

00:25:10,400 --> 00:25:14,880
console right you give the pen

00:25:11,919 --> 00:25:16,159
pen file credentials right the key

00:25:14,880 --> 00:25:18,960
that's how you give in

00:25:16,159 --> 00:25:19,440
uh the same you do it in your tower as

00:25:18,960 --> 00:25:22,960
well

00:25:19,440 --> 00:25:25,039
so here i'm giving anchor cred machine

00:25:22,960 --> 00:25:27,760
type is machine and my username is

00:25:25,039 --> 00:25:29,120
ubuntu and then i'm giving the file

00:25:27,760 --> 00:25:31,600
then i'm creating the template from the

00:25:29,120 --> 00:25:32,559
same thing and this is my anchor scan

00:25:31,600 --> 00:25:34,080
template

00:25:32,559 --> 00:25:36,080
and if you see i'm using all those

00:25:34,080 --> 00:25:38,799
details and here

00:25:36,080 --> 00:25:40,799
is the fun part is like i can create a

00:25:38,799 --> 00:25:43,279
schedule and based on the schedule

00:25:40,799 --> 00:25:44,640
it will run this particular template

00:25:43,279 --> 00:25:47,200
every time

00:25:44,640 --> 00:25:48,000
it has this particular condition

00:25:47,200 --> 00:25:49,760
fulfilled

00:25:48,000 --> 00:25:51,520
so as you can i have scheduled all the

00:25:49,760 --> 00:25:52,559
things and these are the occurrences it

00:25:51,520 --> 00:25:55,679
will happen

00:25:52,559 --> 00:25:56,000
in during the entire 21 and it is given

00:25:55,679 --> 00:26:00,880
for

00:25:56,000 --> 00:26:03,919
march right uh so feb and march so

00:26:00,880 --> 00:26:07,120
i'll just fire uh on demand scam

00:26:03,919 --> 00:26:07,600
because even though you have scheduled

00:26:07,120 --> 00:26:09,200
it

00:26:07,600 --> 00:26:10,640
sometimes you might need an on-demand

00:26:09,200 --> 00:26:15,600
scan so

00:26:10,640 --> 00:26:15,600
let's just launch it hopefully it works

00:26:16,400 --> 00:26:20,400
okay it's job is still running and now

00:26:19,440 --> 00:26:22,840
it's running

00:26:20,400 --> 00:26:25,279
and as you can see it's gathering facts

00:26:22,840 --> 00:26:27,720
first

00:26:25,279 --> 00:26:29,760
so anchor scan is using the same

00:26:27,720 --> 00:26:33,440
[Music]

00:26:29,760 --> 00:26:33,440
angular cli playbook so

00:26:35,520 --> 00:26:38,799
as you see installing anchor cli it

00:26:38,320 --> 00:26:41,520
should

00:26:38,799 --> 00:26:42,960
turn out as changed balls because angus

00:26:41,520 --> 00:26:45,360
ali might have already been installed

00:26:42,960 --> 00:26:52,960
because i have run it

00:26:45,360 --> 00:26:55,520
a couple of times

00:26:52,960 --> 00:26:55,520
what happened

00:26:56,159 --> 00:27:00,880
showing successful but i'm not able to

00:26:59,360 --> 00:27:07,840
browse through the section

00:27:00,880 --> 00:27:07,840
why ah

00:27:08,240 --> 00:27:12,799
fun for our live demo okay let me run it

00:27:11,440 --> 00:27:16,480
again so i have done that again

00:27:12,799 --> 00:27:16,480
hopefully this time i am able to see the

00:27:18,840 --> 00:27:21,840
result

00:27:28,720 --> 00:27:34,000
okay so i'm closing on my finish time so

00:27:31,840 --> 00:27:36,640
i'll just try to finish everything a bit

00:27:34,000 --> 00:27:36,640
quickly now

00:27:38,240 --> 00:27:41,760
so as you see uh it is trying to add

00:27:40,080 --> 00:27:43,440
image for analysis and then it is

00:27:41,760 --> 00:27:45,200
waiting on the analysis to complete and

00:27:43,440 --> 00:27:46,960
here is your result and if you click on

00:27:45,200 --> 00:27:48,640
it you get the json output for it with

00:27:46,960 --> 00:27:51,200
all the details for cvs

00:27:48,640 --> 00:27:52,640
and your package name severity and let's

00:27:51,200 --> 00:27:54,799
suppose if there is a fix

00:27:52,640 --> 00:27:55,840
that is available yeah it will tell you

00:27:54,799 --> 00:27:59,440
the fix as well

00:27:55,840 --> 00:28:03,679
so this is how your anchor clr works and

00:27:59,440 --> 00:28:06,320
uh if i'll run the tree scan as well

00:28:03,679 --> 00:28:08,720
and this is that particular demo so if

00:28:06,320 --> 00:28:11,200
you see

00:28:08,720 --> 00:28:12,159
this playbook is very short because as i

00:28:11,200 --> 00:28:15,039
told you tv

00:28:12,159 --> 00:28:16,640
is very lightweight tool and you just

00:28:15,039 --> 00:28:18,720
need to install the trivia tool

00:28:16,640 --> 00:28:20,080
and then the command using the command

00:28:18,720 --> 00:28:21,279
module i am just trying to fire the

00:28:20,080 --> 00:28:24,240
treby command

00:28:21,279 --> 00:28:30,559
with on this go line image so if i run

00:28:24,240 --> 00:28:33,200
this playbook

00:28:30,559 --> 00:28:34,080
it's giving me all the details of my

00:28:33,200 --> 00:28:36,799
package name

00:28:34,080 --> 00:28:37,760
uh what is uh there with the severity at

00:28:36,799 --> 00:28:40,399
medium level

00:28:37,760 --> 00:28:42,159
and the package name is lip crypto101

00:28:40,399 --> 00:28:43,919
and the second

00:28:42,159 --> 00:28:47,279
package that is having a severity of

00:28:43,919 --> 00:28:49,919
medium is released cell 101

00:28:47,279 --> 00:28:51,360
so this i am filtering from the result

00:28:49,919 --> 00:28:53,600
so

00:28:51,360 --> 00:28:55,039
i'm just gonna shut it off because i

00:28:53,600 --> 00:28:58,080
want it to give time for

00:28:55,039 --> 00:29:01,360
me as well you have still

00:28:58,080 --> 00:29:01,360
so just note

00:29:02,799 --> 00:29:13,840
okay okay cool thanks anna

00:29:14,240 --> 00:29:18,080
again going back to the presentation uh

00:29:16,480 --> 00:29:22,080
i hope you guys can still

00:29:18,080 --> 00:29:23,679
still see the screen and yes uh

00:29:22,080 --> 00:29:26,000
so the last part that i wanted to

00:29:23,679 --> 00:29:27,760
discuss about is like os

00:29:26,000 --> 00:29:29,600
security and compliance check based on

00:29:27,760 --> 00:29:31,200
the os level so

00:29:29,600 --> 00:29:32,799
while this may not eliminate the case

00:29:31,200 --> 00:29:34,799
for a purpose-built uh

00:29:32,799 --> 00:29:36,799
host intrusion detection system but in

00:29:34,799 --> 00:29:38,480
many cases we can execute the same kind

00:29:36,799 --> 00:29:41,039
of security task

00:29:38,480 --> 00:29:42,640
using the tools which is available uh uh

00:29:41,039 --> 00:29:43,760
like os query which is which was

00:29:42,640 --> 00:29:46,320
actually developed by

00:29:43,760 --> 00:29:48,559
facebook and now it has been open source

00:29:46,320 --> 00:29:50,480
so how it can help it can actually go

00:29:48,559 --> 00:29:52,480
ahead and check for file hashes

00:29:50,480 --> 00:29:54,159
your network connection and your list of

00:29:52,480 --> 00:29:57,039
and running processes

00:29:54,159 --> 00:29:58,640
so it's it can actually if you think

00:29:57,039 --> 00:30:00,480
that way it can actually

00:29:58,640 --> 00:30:02,159
act as a lightweight host-based

00:30:00,480 --> 00:30:04,240
intrusion detection system

00:30:02,159 --> 00:30:05,440
so i have not included the demo for

00:30:04,240 --> 00:30:07,600
oscary i think

00:30:05,440 --> 00:30:09,600
that can be considered as you do for

00:30:07,600 --> 00:30:11,919
from if you guys are interested

00:30:09,600 --> 00:30:13,520
and uh you can go ahead and look for os

00:30:11,919 --> 00:30:14,480
query it's an open source tool and you

00:30:13,520 --> 00:30:15,919
can just create an

00:30:14,480 --> 00:30:17,919
ansible playbook to run this particular

00:30:15,919 --> 00:30:19,600
tool it's very easy and let's suppose if

00:30:17,919 --> 00:30:20,240
you have any difficulty in finding that

00:30:19,600 --> 00:30:22,799
i'll just

00:30:20,240 --> 00:30:23,360
uh post the always query playbook as

00:30:22,799 --> 00:30:26,159
well

00:30:23,360 --> 00:30:26,559
in the demo content and so security so

00:30:26,159 --> 00:30:30,080
yeah

00:30:26,559 --> 00:30:31,440
so os query uh is it's

00:30:30,080 --> 00:30:33,120
uh is an operating system

00:30:31,440 --> 00:30:34,799
instrumentation framework which was

00:30:33,120 --> 00:30:36,159
designed actually by facebook and

00:30:34,799 --> 00:30:39,279
basically written in c

00:30:36,159 --> 00:30:42,320
blah blah so and it actually supports

00:30:39,279 --> 00:30:43,919
multiple platforms like uh windows linux

00:30:42,320 --> 00:30:44,480
mac os and other operating system as

00:30:43,919 --> 00:30:46,000
well

00:30:44,480 --> 00:30:47,520
and it actually performs the low level

00:30:46,000 --> 00:30:48,640
activities such as running processes

00:30:47,520 --> 00:30:49,760
kernel configuration

00:30:48,640 --> 00:30:52,159
your network connection and file

00:30:49,760 --> 00:30:52,799
integrity checks and it also helps in

00:30:52,159 --> 00:30:54,320
performing

00:30:52,799 --> 00:30:56,240
centralized monitoring and security

00:30:54,320 --> 00:30:58,559
management solutions as well

00:30:56,240 --> 00:31:00,480
so it's sometimes also described as sql

00:30:58,559 --> 00:31:02,240
powered operating system instrumentation

00:31:00,480 --> 00:31:05,120
monitoring and analytics

00:31:02,240 --> 00:31:05,840
so yep now coming to the most important

00:31:05,120 --> 00:31:09,279
part of the

00:31:05,840 --> 00:31:12,480
presentation is the call for action

00:31:09,279 --> 00:31:14,159
so uh yeah so as you guys all know that

00:31:12,480 --> 00:31:16,320
containers are rapidly changing

00:31:14,159 --> 00:31:17,360
the world of developers and its

00:31:16,320 --> 00:31:20,080
operation teams

00:31:17,360 --> 00:31:20,799
and by leveraging our knowledge of using

00:31:20,080 --> 00:31:22,960
ansible

00:31:20,799 --> 00:31:24,799
and for scripting the play-by-play

00:31:22,960 --> 00:31:27,440
commands or by using the ansible

00:31:24,799 --> 00:31:29,919
integrated modules

00:31:27,440 --> 00:31:30,640
with echo security anchor and os query

00:31:29,919 --> 00:31:32,799
tools

00:31:30,640 --> 00:31:34,240
we can measure analyze and benchmark our

00:31:32,799 --> 00:31:36,880
container for security

00:31:34,240 --> 00:31:37,840
this also allows us to build end-to-end

00:31:36,880 --> 00:31:39,760
automatic process

00:31:37,840 --> 00:31:41,279
for securing scanning and remediating

00:31:39,760 --> 00:31:43,200
the containers so

00:31:41,279 --> 00:31:45,120
at this very point i just want to call

00:31:43,200 --> 00:31:48,320
out uh to you guys that

00:31:45,120 --> 00:31:51,360
okay uh we at ancient security are

00:31:48,320 --> 00:31:54,240
actually looking on to the uh use cases

00:31:51,360 --> 00:31:55,360
and you guys can help us uh to fulfill

00:31:54,240 --> 00:31:57,120
those use cases and

00:31:55,360 --> 00:31:58,720
complete those use cases by giving your

00:31:57,120 --> 00:32:01,600
inputs and thoughts that

00:31:58,720 --> 00:32:03,840
how ansible can how ansible you see as a

00:32:01,600 --> 00:32:06,960
benefit for container security world

00:32:03,840 --> 00:32:08,240
and for now i have a demo through

00:32:06,960 --> 00:32:10,720
ansible modules

00:32:08,240 --> 00:32:11,600
like ansible core engine modules but in

00:32:10,720 --> 00:32:13,039
future

00:32:11,600 --> 00:32:15,600
we are talking with the vendors like

00:32:13,039 --> 00:32:17,279
echo security anchor stackrocks

00:32:15,600 --> 00:32:18,880
and prismacloud twist lock and new

00:32:17,279 --> 00:32:20,799
vector and more so

00:32:18,880 --> 00:32:22,240
we are talking with these vendors to

00:32:20,799 --> 00:32:25,600
come up with the integration plan

00:32:22,240 --> 00:32:27,760
so like you see uh for uh with docker we

00:32:25,600 --> 00:32:28,240
have a particular ansible module like

00:32:27,760 --> 00:32:29,600
right

00:32:28,240 --> 00:32:31,679
the docker m is the docker container

00:32:29,600 --> 00:32:34,080
module the same way you will have the

00:32:31,679 --> 00:32:35,600
modules for echo security anchor and

00:32:34,080 --> 00:32:37,919
other platforms as well

00:32:35,600 --> 00:32:40,240
so that will actually help in getting

00:32:37,919 --> 00:32:43,039
the integration going and

00:32:40,240 --> 00:32:44,320
so at this point uh would answer would

00:32:43,039 --> 00:32:47,840
also love to partner with

00:32:44,320 --> 00:32:50,159
all the uh container security vendors

00:32:47,840 --> 00:32:51,519
which can actually help in uh automation

00:32:50,159 --> 00:32:53,840
opportunities

00:32:51,519 --> 00:32:55,039
so uh if you want to get in touch with

00:32:53,840 --> 00:32:58,640
us we have

00:32:55,039 --> 00:33:02,399
irc handles of hashtag ansible security

00:32:58,640 --> 00:33:05,279
ansible devil and ansible communities

00:33:02,399 --> 00:33:06,960
and we have also offered our initiative

00:33:05,279 --> 00:33:08,480
ansible security automation initiative

00:33:06,960 --> 00:33:10,159
on ansible.com

00:33:08,480 --> 00:33:11,760
and you can check out the ebooks that

00:33:10,159 --> 00:33:14,399
are already present

00:33:11,760 --> 00:33:15,120
for the automation security initiative

00:33:14,399 --> 00:33:18,159
so

00:33:15,120 --> 00:33:19,840
yep and or as i told you already that

00:33:18,159 --> 00:33:21,200
all the demo contents and playbooks are

00:33:19,840 --> 00:33:21,919
already available on this particular

00:33:21,200 --> 00:33:23,440
github link

00:33:21,919 --> 00:33:26,240
you can just browse through the regular

00:33:23,440 --> 00:33:29,360
link and get to all the playbooks

00:33:26,240 --> 00:33:31,600
and yes i think

00:33:29,360 --> 00:33:33,440
this was the last part of the discussion

00:33:31,600 --> 00:33:35,919
and thanks a lot for joining in

00:33:33,440 --> 00:33:38,960
and hope you guys have got something

00:33:35,919 --> 00:33:42,240
from the container security world and

00:33:38,960 --> 00:33:45,760
i'm open for questions summit

00:33:42,240 --> 00:33:48,080
time and if

00:33:45,760 --> 00:33:49,840
just the question to audience so

00:33:48,080 --> 00:33:52,559
whenever you have the question

00:33:49,840 --> 00:33:53,600
now it's the right time to ask in the q

00:33:52,559 --> 00:33:56,080
and a

00:33:53,600 --> 00:33:57,120
section there's actually one question

00:33:56,080 --> 00:34:00,480
summit to you

00:33:57,120 --> 00:34:02,480
from the chat jan was asking if you have

00:34:00,480 --> 00:34:06,080
some published playbooks roles that

00:34:02,480 --> 00:34:09,359
automate setting up their server

00:34:06,080 --> 00:34:12,000
and i can see one question from pavel

00:34:09,359 --> 00:34:13,440
what do you think sumit about

00:34:12,000 --> 00:34:16,480
integration of claire

00:34:13,440 --> 00:34:21,839
and other scanners with egg docker

00:34:16,480 --> 00:34:21,839
repositories like hardware

00:34:25,760 --> 00:34:33,200
so power i haven't used harbor but

00:34:29,280 --> 00:34:33,200
i think so

00:34:33,599 --> 00:34:36,879
so you are asking about the integration

00:34:35,280 --> 00:34:39,040
of claire and other scanners

00:34:36,879 --> 00:34:39,919
uh with docker repositories like harper

00:34:39,040 --> 00:34:43,119
so i

00:34:39,919 --> 00:34:45,679
am i have not used harvard that well

00:34:43,119 --> 00:34:47,200
uh so i might not be the best person to

00:34:45,679 --> 00:34:48,560
look into that or answer to that

00:34:47,200 --> 00:34:49,760
particular question but definitely i'll

00:34:48,560 --> 00:34:52,960
check on that and

00:34:49,760 --> 00:34:53,760
probably if you can let me know your irc

00:34:52,960 --> 00:34:55,839
handle or

00:34:53,760 --> 00:34:56,879
let me know how i can reach you i can

00:34:55,839 --> 00:35:03,280
just let you know

00:34:56,879 --> 00:35:03,280

YouTube URL: https://www.youtube.com/watch?v=G-hOhtFyg-c


