Title: 5 Agile practices every SRE team should adopt - DevConf.CZ 2021
Publication date: 2021-03-14
Playlist: DevConfCZ 2021
Description: 
	Speaker: Manuel Dewald
As SRE (Site Reliability Engineering) teams contain a fair portion of software development work, and get filled up by software developers, it is a natural move to also adapt agile software development practices. The right agile model depends heavily on the percentage of development work vs. operations, which may be influenced by the team size. For example, in a small team where a high percentage of people is on call during the day, it might not make too much sense to plan sprints of 2 weeks if only a few backlog items are expected to get done in that timeframe.

Audience
This talk is targeted at everyone involved in Site Reliability Engineering, wondering how much agile to adopt - team leads, product owners, software developers, SREs. If you're planning to transform your ops team into an SRE team, your SRE team just got started, or already do SRE since quite some time. As a software engineer who recently joined SRE, I will talk about which practices I found useful to take over from software engineering, which ones are better dropped, and which ones I'm still missing sorely.

Agile Practices
Retrospective
While often being the first meeting to get dropped by teams as the relation to actual work items cannot be seen easily, the retrospective meeting is the tool for teams to iterate on how they work and improve, including which of the agile practices make sense to adopt it which don't.

Planning: Estimating Backlog Items
Planning meetings help the team understand priorities of items, the overall direction a project is heading and get a common understanding of how complex work is (with estimation). However, given a (not known) number of people is on call or doing incident response makes it hard to set sprint goals or commit to a consistent number of stories.

Standups
Standup meetings are useful, especially in distributed teams, to talk about what you're working on and where you need help. Frequency of the meeting does not necessarily be daily - and that hit me as software engineer unexpectedly hard.

Testing
If your SRE team is writing software, that software should be tested. No room for discussion.

That's what the software engineer might think - but you need to discuss. You need to convince your team testing is helpful. And that's as equally hard in an SRE team as in any software engineering team.

Pair programming
It's hard to convince people pair programming is helpful, and it isn't helpful in every situation - but confidence in code as well as operations changes (in an outage for example) is so much higher when working in a pair.

Key Takeaways
During this talk, attendees should have learned (1) that SRE and software engineering likewise benefit from agile development practices, of which at least (2) some practices are worth to adopt while others may not be too helpful for SRE. (3) Which ones are and are not helpful can be the easiest spotted by iterating not only work but also how we work (practice retrospectives).



Schedule: https://sched.co/gmIO
YouTube URL: https://www.youtube.com/watch?v=0krxyu1Ydjg


