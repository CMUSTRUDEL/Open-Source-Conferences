Title: Getting Started with Fedora CoreOS - DevConf.CZ 2021
Publication date: 2021-03-17
Playlist: DevConfCZ 2021
Description: 
	Speakers: Nasir Hussain, David Duncan, TimothÃ©e Ravier



This is a hands-on workshop that will introduce Fedora CoreOS (an emerging Fedora Edition) and explain the differences between Fedora CoreOS and traditional Linux operating system distributions. In this lab you'll become familiar with the components of Fedora CoreOS and also the value this automatically updating container focused OS provides. By the end you'll be ready to deploy Fedora CoreOS in your infrastructure and contribute back to the growing Fedora CoreOS community.

We will be covering the following key topics in the hands-on portion of the workshop:

Key Topics:

- Provisioning with Ignition
- Using the Fedora CoreOS Config Transpiler
- Booting Fedora CoreOS for the first time
- Booting on a Cloud (AWS)
- Running provisioning scripts and containers on boot
- Understanding how updates work
- Performing rollback when needed

In order to perform this lab at home the user will need:

- An internet connection capable of downloading large files
- A Linux system with KVM support and libvirt installed and running
- The system must be able to start the VM with at least 2GiB of RAM and 10GiB of disk space and a few VCPUs

Participants will be provided AWS credits to follow the lab with the Cloud demo.


Schedule: https://sched.co/gmSY
Captions: 
	00:00:00,880 --> 00:00:04,560
we'll start off just uh uh talking a

00:00:03,600 --> 00:00:07,040
little bit about

00:00:04,560 --> 00:00:07,600
the photo or core os and and what it is

00:00:07,040 --> 00:00:10,880
that

00:00:07,600 --> 00:00:13,679
we have here so uh um

00:00:10,880 --> 00:00:14,080
effectively this is um an introduction

00:00:13,679 --> 00:00:17,840
to

00:00:14,080 --> 00:00:20,880
immutable os modifications to the

00:00:17,840 --> 00:00:22,640
so you start we start with um in the

00:00:20,880 --> 00:00:25,279
fedora coreos world

00:00:22,640 --> 00:00:27,599
a universal image and that universal

00:00:25,279 --> 00:00:30,640
image is applied in all

00:00:27,599 --> 00:00:32,320
uh all domains uh so

00:00:30,640 --> 00:00:34,160
so wherever wherever it is that you're

00:00:32,320 --> 00:00:35,040
deploying you're deploying the same

00:00:34,160 --> 00:00:38,079
thing

00:00:35,040 --> 00:00:41,360
and um and then modifications are made

00:00:38,079 --> 00:00:43,440
through uh through through

00:00:41,360 --> 00:00:45,280
scripts that are introduced at the time

00:00:43,440 --> 00:00:47,840
of boot

00:00:45,280 --> 00:00:49,440
to make modifications so we're going to

00:00:47,840 --> 00:00:53,280
go through

00:00:49,440 --> 00:00:57,039
some of the the process for first off

00:00:53,280 --> 00:00:57,039
configuring a system to run

00:00:57,120 --> 00:01:03,920
a virtual instance and then uh

00:01:00,320 --> 00:01:05,920
dig into what the uh

00:01:03,920 --> 00:01:07,119
what the initial experience looks like

00:01:05,920 --> 00:01:09,520
and how to just

00:01:07,119 --> 00:01:11,200
have a command line connection to a

00:01:09,520 --> 00:01:13,760
system for

00:01:11,200 --> 00:01:14,400
uh review so i'm going to take you

00:01:13,760 --> 00:01:16,080
through

00:01:14,400 --> 00:01:17,759
a little bit of what's been what's going

00:01:16,080 --> 00:01:19,840
to get us started here so

00:01:17,759 --> 00:01:21,759
first off we need to make sure that any

00:01:19,840 --> 00:01:26,000
system we're using

00:01:21,759 --> 00:01:30,320
um is uh configured

00:01:26,000 --> 00:01:33,840
um for uh virtualization

00:01:30,320 --> 00:01:37,920
and uh just a quick and easy way to

00:01:33,840 --> 00:01:42,799
to uh to make sure that that's installed

00:01:37,920 --> 00:01:46,560
is uh to go to the getting started page

00:01:42,799 --> 00:01:49,759
uh for the prereqs on our

00:01:46,560 --> 00:01:52,799
lab for lib virtualization

00:01:49,759 --> 00:01:52,799
and i stood up um

00:01:53,439 --> 00:01:59,520
i have a throwaway system for doing this

00:01:56,799 --> 00:02:00,240
uh that i have set up from a launch

00:01:59,520 --> 00:02:05,119
template

00:02:00,240 --> 00:02:08,330
on um aws so i have a workshop instance

00:02:05,119 --> 00:02:10,879
i have one that's fully baked and

00:02:08,330 --> 00:02:13,040
[Music]

00:02:10,879 --> 00:02:14,160
so i'm just going to very quickly go

00:02:13,040 --> 00:02:16,720
through

00:02:14,160 --> 00:02:16,720
the uh

00:02:17,200 --> 00:02:23,840
that's interesting

00:02:24,000 --> 00:02:31,280
through the tutorial so we can add the

00:02:27,599 --> 00:02:31,280
virtualization immediately

00:02:31,599 --> 00:02:40,319
to the system

00:02:36,000 --> 00:02:51,840
once we have the the install completed

00:02:40,319 --> 00:02:51,840
we can start the liberty

00:02:54,560 --> 00:02:57,599
and we'll go through that

00:02:57,680 --> 00:03:05,200
once we have that enabled we'll look for

00:03:01,440 --> 00:03:07,920
the kvm configuration

00:03:05,200 --> 00:03:09,680
and make sure that shows up the instance

00:03:07,920 --> 00:03:14,000
here that i've chosen

00:03:09,680 --> 00:03:14,000
has a kvm intel support

00:03:14,400 --> 00:03:21,760
so we can

00:03:18,080 --> 00:03:21,760
uh we'll we'll uh

00:03:21,920 --> 00:03:28,560
uh once we get to this spot we can

00:03:24,959 --> 00:03:32,239
start the standard tutorial for

00:03:28,560 --> 00:03:36,560
um for the

00:03:32,239 --> 00:03:40,799
uh for the prerequisites for uh

00:03:36,560 --> 00:03:40,799
the fedora core os deployment

00:03:41,360 --> 00:03:47,200
so while it's going in the background

00:03:43,760 --> 00:03:49,120
let's just look over here

00:03:47,200 --> 00:03:50,239
we're going to i'm going to go ahead and

00:03:49,120 --> 00:03:51,920
do this uh

00:03:50,239 --> 00:03:53,280
first process this first part of the

00:03:51,920 --> 00:03:55,920
class with

00:03:53,280 --> 00:03:56,640
with standard virtualization because we

00:03:55,920 --> 00:03:58,560
want to log

00:03:56,640 --> 00:04:00,080
in directly to the system without having

00:03:58,560 --> 00:04:03,360
set up any

00:04:00,080 --> 00:04:06,400
uh configured users

00:04:03,360 --> 00:04:09,760
um obviously this will uh

00:04:06,400 --> 00:04:10,799
this will get you into the um the base

00:04:09,760 --> 00:04:13,519
image

00:04:10,799 --> 00:04:15,840
and then we'll do some inspection on

00:04:13,519 --> 00:04:19,199
that base image but we're going to start

00:04:15,840 --> 00:04:22,400
with some some housekeeping um

00:04:19,199 --> 00:04:26,720
we're going to make the directory uh

00:04:22,400 --> 00:04:26,720
where we're going to store our

00:04:27,280 --> 00:04:33,600
artifacts and

00:04:30,400 --> 00:04:33,600
required files

00:04:33,759 --> 00:04:43,840
so now let's see if you can see this

00:04:44,000 --> 00:04:47,199
so now i'm uh

00:04:48,400 --> 00:04:54,800
i'm in the in that

00:04:51,600 --> 00:04:57,840
directory proper

00:04:54,800 --> 00:04:57,840
i'm going to go ahead and

00:05:02,320 --> 00:05:05,440
start my live boats

00:05:06,240 --> 00:05:11,840
make sure that it comes back when i need

00:05:08,800 --> 00:05:11,840
it to

00:05:15,360 --> 00:05:24,400
and then just verify uh that i'm running

00:05:18,560 --> 00:05:28,400
the intel

00:05:24,400 --> 00:05:28,400
uh cpu extensions yes

00:05:29,600 --> 00:05:36,400
and now we'll move over here

00:05:33,280 --> 00:05:37,199
so all of the basic tools that we

00:05:36,400 --> 00:05:40,320
require

00:05:37,199 --> 00:05:42,080
are well there's these three tools that

00:05:40,320 --> 00:05:42,720
are associated so the first thing we're

00:05:42,080 --> 00:05:46,080
working on

00:05:42,720 --> 00:05:48,479
is a configuration file that will

00:05:46,080 --> 00:05:50,800
pass to the instance itself and that

00:05:48,479 --> 00:05:53,440
comes in the form of an ignition file

00:05:50,800 --> 00:05:56,720
ignition file um provides all the

00:05:53,440 --> 00:06:01,440
parameters and it's a little bit like

00:05:56,720 --> 00:06:03,120
a predecessor there called cloud inet

00:06:01,440 --> 00:06:04,960
but this one was written by the coreos

00:06:03,120 --> 00:06:07,039
team and and is

00:06:04,960 --> 00:06:08,319
much faster a little more robust in

00:06:07,039 --> 00:06:10,560
terms of the

00:06:08,319 --> 00:06:11,680
configuration and operations and we're

00:06:10,560 --> 00:06:13,440
going to write

00:06:11,680 --> 00:06:16,000
but it's written in json and and a lot

00:06:13,440 --> 00:06:19,120
of people like to write them in yaml

00:06:16,000 --> 00:06:22,479
and we have a fedora core os

00:06:19,120 --> 00:06:26,000
configuration file that's that is uh

00:06:22,479 --> 00:06:27,440
used to generate um or or

00:06:26,000 --> 00:06:29,440
is something that's built in human

00:06:27,440 --> 00:06:33,039
readable and then we have

00:06:29,440 --> 00:06:36,240
the the transpiler

00:06:33,039 --> 00:06:39,840
the fcct that will

00:06:36,240 --> 00:06:40,400
uh will actually uh change that file

00:06:39,840 --> 00:06:44,240
into

00:06:40,400 --> 00:06:46,880
a or convert the file into an ignition

00:06:44,240 --> 00:06:48,960
natural ignition file and the ignition

00:06:46,880 --> 00:06:51,599
file gets passed in the user date

00:06:48,960 --> 00:06:52,560
user data configuration for an instance

00:06:51,599 --> 00:06:55,919
or

00:06:52,560 --> 00:06:57,520
you'll set a parameter for where that

00:06:55,919 --> 00:07:01,039
will be pulled

00:06:57,520 --> 00:07:04,160
so these three utilities the fcct

00:07:01,039 --> 00:07:05,840
the transpiler the

00:07:04,160 --> 00:07:09,919
[Music]

00:07:05,840 --> 00:07:12,639
coreos installer which is used to to

00:07:09,919 --> 00:07:14,800
retrieve the image that you want and

00:07:12,639 --> 00:07:16,000
then the ignition validate the ignition

00:07:14,800 --> 00:07:17,759
validate will verify

00:07:16,000 --> 00:07:19,520
that the ignition file that was created

00:07:17,759 --> 00:07:22,800
from our transpiler

00:07:19,520 --> 00:07:27,840
includes information that is valid

00:07:22,800 --> 00:07:27,840
for the for the ignition file

00:07:28,160 --> 00:07:31,840
these tools are available in a couple of

00:07:30,000 --> 00:07:35,199
different ways

00:07:31,840 --> 00:07:38,240
one is we can download and install them

00:07:35,199 --> 00:07:41,440
uh from the

00:07:38,240 --> 00:07:44,879
uh to a fedora instance that we're using

00:07:41,440 --> 00:07:46,400
or we can pull them and use them

00:07:44,879 --> 00:07:49,440
interactively

00:07:46,400 --> 00:07:50,319
and the easiest way to pull and use them

00:07:49,440 --> 00:07:52,879
interactively

00:07:50,319 --> 00:07:54,240
is to create these aliases for the

00:07:52,879 --> 00:07:57,680
utilities

00:07:54,240 --> 00:07:58,479
you see the utilities have been assigned

00:07:57,680 --> 00:08:01,840
an alias

00:07:58,479 --> 00:08:01,840
that's associated with the

00:08:02,400 --> 00:08:08,319
the um uh container

00:08:05,680 --> 00:08:08,319
in this case

00:08:09,520 --> 00:08:16,000
but uh we can just use the packages

00:08:14,000 --> 00:08:26,800
so let's just make sure that these

00:08:16,000 --> 00:08:30,160
should be installed by default okay

00:08:26,800 --> 00:08:30,160
so now we have those

00:08:30,479 --> 00:08:34,000
uh the next thing we want to do is

00:08:31,919 --> 00:08:36,719
download the image

00:08:34,000 --> 00:08:38,640
that we want so in this case we're going

00:08:36,719 --> 00:08:43,360
to download the latest

00:08:38,640 --> 00:08:43,360
fedora 33 or fcos

00:08:43,440 --> 00:08:50,080
33 so door core os

00:08:46,720 --> 00:08:50,080
33 coming right up

00:08:51,040 --> 00:08:55,360
and to make this easier on ourselves

00:08:53,839 --> 00:08:58,560
we're going to use the same

00:08:55,360 --> 00:08:59,839
process that's here in this um in this

00:08:58,560 --> 00:09:03,120
step

00:08:59,839 --> 00:09:04,959
this step is just renaming

00:09:03,120 --> 00:09:06,839
the queue file that you're you're

00:09:04,959 --> 00:09:09,920
pulling down

00:09:06,839 --> 00:09:13,519
for for use

00:09:09,920 --> 00:09:13,519
in the configuration

00:09:14,720 --> 00:09:23,839
so now we have a file

00:09:26,399 --> 00:09:29,360
checking the signature

00:09:29,920 --> 00:09:38,800
and we can move that

00:09:36,640 --> 00:09:38,800
to

00:09:40,880 --> 00:09:44,720
something a little easier for us to

00:09:48,839 --> 00:09:54,480
digest

00:09:50,959 --> 00:09:57,839
the fedora core s qcal2 so now we are

00:09:54,480 --> 00:10:04,320
now we have changed what we downloaded

00:09:57,839 --> 00:10:06,720
into this file

00:10:04,320 --> 00:10:08,160
uh let's look i want to take just a

00:10:06,720 --> 00:10:12,560
second to go over

00:10:08,160 --> 00:10:18,079
what's happening here um

00:10:12,560 --> 00:10:19,760
this is pulling the latest stable build

00:10:18,079 --> 00:10:21,519
based on the release signature and the

00:10:19,760 --> 00:10:23,360
release signatures

00:10:21,519 --> 00:10:26,079
comes from somewhere right it comes from

00:10:23,360 --> 00:10:26,079
your uh

00:10:26,399 --> 00:10:30,240
from your configuration the

00:10:28,160 --> 00:10:33,839
configuration we can get

00:10:30,240 --> 00:10:33,839
let's see from

00:10:35,839 --> 00:10:38,640
this uri

00:10:41,839 --> 00:10:46,079
if i wanted to pull that information for

00:10:44,839 --> 00:10:49,120
myself

00:10:46,079 --> 00:10:52,079
so that i could say see where what that

00:10:49,120 --> 00:10:53,360
release is actually that's just there i

00:10:52,079 --> 00:10:56,560
can do a curl

00:10:53,360 --> 00:10:59,920
um and pull the content from that

00:10:56,560 --> 00:11:01,760
uh stream of the coreos stream this is

00:10:59,920 --> 00:11:02,959
awesome by the way it's one of my

00:11:01,760 --> 00:11:06,000
favorite

00:11:02,959 --> 00:11:08,800
um ways to to pull

00:11:06,000 --> 00:11:09,360
in the image that i need for a dynamic

00:11:08,800 --> 00:11:13,120
build

00:11:09,360 --> 00:11:15,920
so from building from for a uh

00:11:13,120 --> 00:11:16,959
just an automated process this is very

00:11:15,920 --> 00:11:19,920
helpful

00:11:16,959 --> 00:11:21,040
and then i can choose based on the the

00:11:19,920 --> 00:11:23,920
region

00:11:21,040 --> 00:11:25,279
so i'm looking for images here in aws

00:11:23,920 --> 00:11:27,519
just as an example

00:11:25,279 --> 00:11:29,200
but i've got the release information

00:11:27,519 --> 00:11:31,839
here that release information is

00:11:29,200 --> 00:11:31,839
associated

00:11:31,920 --> 00:11:35,519
in our

00:11:33,460 --> 00:11:38,560
[Music]

00:11:35,519 --> 00:11:39,760
in our tutorial that's associated here

00:11:38,560 --> 00:11:43,200
so i can just

00:11:39,760 --> 00:11:48,000
pull that release information from

00:11:43,200 --> 00:11:51,440
the command line as is shown here

00:11:48,000 --> 00:11:54,240
and then leverage it to grab the

00:11:51,440 --> 00:11:54,240
latest image

00:11:55,200 --> 00:11:59,120
and then i can verify that signature by

00:11:57,120 --> 00:12:02,000
pulling from the same location

00:11:59,120 --> 00:12:02,000
and verifying it

00:12:03,680 --> 00:12:07,600
and then i can uncompress that file

00:12:06,079 --> 00:12:08,320
which is all handled that's all been

00:12:07,600 --> 00:12:12,240
handled

00:12:08,320 --> 00:12:12,240
for us by the coreos installer

00:12:21,600 --> 00:12:25,200
and then this is just just discussing

00:12:24,720 --> 00:12:26,800
the

00:12:25,200 --> 00:12:29,279
initial configuration for those

00:12:26,800 --> 00:12:31,600
utilities that we were talking about

00:12:29,279 --> 00:12:31,600
all right

00:12:33,920 --> 00:12:42,399
so this is this is the fedora core os

00:12:38,079 --> 00:12:46,800
configuration file and in this case

00:12:42,399 --> 00:12:50,000
our first ignition file is just going to

00:12:46,800 --> 00:12:53,600
give us access to

00:12:50,000 --> 00:12:54,720
a running system

00:12:53,600 --> 00:12:57,120
you can see we have some version

00:12:54,720 --> 00:13:00,959
information here this is all uh

00:12:57,120 --> 00:13:03,600
basic and then we skip directly

00:13:00,959 --> 00:13:05,200
to so we don't modify anything that's

00:13:03,600 --> 00:13:06,000
associated with users and that's usually

00:13:05,200 --> 00:13:08,880
what happens here

00:13:06,000 --> 00:13:09,360
is there's the hierarchy here looks like

00:13:08,880 --> 00:13:13,440
user

00:13:09,360 --> 00:13:16,560
system and then your storage association

00:13:13,440 --> 00:13:19,279
the systemd configuration here

00:13:16,560 --> 00:13:20,959
is just giving us the auto login and

00:13:19,279 --> 00:13:21,600
then we're making some modifications of

00:13:20,959 --> 00:13:25,600
files

00:13:21,600 --> 00:13:28,800
so that we are not beholden to

00:13:25,600 --> 00:13:31,360
pager and we're making some changes

00:13:28,800 --> 00:13:34,000
so let's just take this information if

00:13:31,360 --> 00:13:37,680
you're doing this at your leisure

00:13:34,000 --> 00:13:37,680
you can grab you know you can

00:13:37,839 --> 00:13:40,480
bring that in

00:13:41,680 --> 00:13:45,680
the hard way but we're not going to do

00:13:44,639 --> 00:13:49,839
that

00:13:45,680 --> 00:13:49,839
we're going to

00:13:58,480 --> 00:14:03,839
we're going to grab this here

00:14:14,839 --> 00:14:17,839
um

00:14:28,839 --> 00:14:31,839
okay

00:14:36,320 --> 00:14:43,680
so just like we had it in in the

00:14:40,160 --> 00:14:46,800
web page we have it here now we have an

00:14:43,680 --> 00:14:46,800
auto login file

00:14:47,440 --> 00:14:51,279
and that matches the name that we wanted

00:14:49,440 --> 00:14:53,519
to give it up here i guess this is yaml

00:14:51,279 --> 00:14:53,519
not

00:14:53,680 --> 00:15:01,199
i left out the a

00:14:57,850 --> 00:15:02,639
[Music]

00:15:01,199 --> 00:15:04,959
now we'll convert this we're going to

00:15:02,639 --> 00:15:07,839
convert it from the uh

00:15:04,959 --> 00:15:08,480
fedora core os configuration to the

00:15:07,839 --> 00:15:13,839
ignition

00:15:08,480 --> 00:15:13,839
configuration um

00:15:14,800 --> 00:15:21,839
just move over here and

00:15:18,720 --> 00:15:24,880
i downloaded this so now i can say

00:15:21,839 --> 00:15:27,040
i want you to pretty print it in there

00:15:24,880 --> 00:15:27,040
i

00:15:31,040 --> 00:15:38,720
and i want the output to go to

00:15:34,320 --> 00:15:38,720
uh auto login dot

00:15:38,839 --> 00:15:41,839
ign

00:15:42,000 --> 00:15:46,320
and now i'll go back

00:15:46,639 --> 00:15:51,040
let's look at the auto login ign you can

00:15:49,839 --> 00:15:55,600
see that

00:15:51,040 --> 00:16:00,720
that's very nicely configured and

00:15:55,600 --> 00:16:00,720
ready to go so now

00:16:01,360 --> 00:16:06,399
i don't have to save anything i can move

00:16:03,839 --> 00:16:06,399
over here

00:16:06,560 --> 00:16:11,839
and we can take this detail

00:16:12,240 --> 00:16:15,120
and validate it

00:16:19,680 --> 00:16:22,880
so now we're going to use our ignition

00:16:21,279 --> 00:16:25,920
validate

00:16:22,880 --> 00:16:26,399
the command line to determine if that

00:16:25,920 --> 00:16:29,600
file

00:16:26,399 --> 00:16:33,680
indeed is a valid ignition file

00:16:29,600 --> 00:16:36,240
and we see that it is and

00:16:33,680 --> 00:16:38,480
dusty provided us with this handy little

00:16:36,240 --> 00:16:38,480
uh

00:16:39,600 --> 00:16:46,240
and so we could have some feedback that

00:16:43,279 --> 00:16:46,240
was recognizable

00:16:48,839 --> 00:16:54,880
and take this

00:16:51,680 --> 00:16:58,720
opportunity to modify the context

00:16:54,880 --> 00:16:58,720
on the ignition file

00:16:59,120 --> 00:17:08,720
so that it will slurp up into the

00:17:05,760 --> 00:17:08,720
the virt install

00:17:09,039 --> 00:17:13,360
now we're going to do just a standard

00:17:11,120 --> 00:17:15,520
virtualization avert install on this

00:17:13,360 --> 00:17:19,839
instance

00:17:15,520 --> 00:17:19,839
and because it's auto login

00:17:22,160 --> 00:17:28,079
it should be coreos auto login

00:17:25,600 --> 00:17:28,079
all good

00:17:28,960 --> 00:17:35,360
we all also know that it's fedora coreos

00:17:31,360 --> 00:17:35,360
stable because that's what we downloaded

00:17:36,320 --> 00:17:42,559
and now we're just building an image

00:17:39,520 --> 00:17:45,760
or an instance so we have

00:17:42,559 --> 00:17:49,520
just a simple virtual machine here

00:17:45,760 --> 00:17:49,520
funny enough inside a virtual machine

00:17:51,919 --> 00:17:58,960
so surprise uh there is no configuration

00:17:55,840 --> 00:18:01,440
for our users so we just go straight to

00:17:58,960 --> 00:18:02,160
the prompt and this is a very easy way

00:18:01,440 --> 00:18:04,880
to

00:18:02,160 --> 00:18:07,200
to just have a quick experience with the

00:18:04,880 --> 00:18:09,679
instance itself

00:18:07,200 --> 00:18:11,520
[Music]

00:18:09,679 --> 00:18:13,440
so this is where we are and these are

00:18:11,520 --> 00:18:15,840
some of the things that we can do we can

00:18:13,440 --> 00:18:15,840
walk through

00:18:17,120 --> 00:18:22,559
what we're getting out of the ring and

00:18:19,679 --> 00:18:22,559
then we can

00:18:24,080 --> 00:18:29,000
look at the hostname information

00:18:27,200 --> 00:18:32,960
in this case i don't think we actually

00:18:29,000 --> 00:18:32,960
set the host name

00:18:35,520 --> 00:18:44,320
oh yeah we did okay was that

00:18:46,640 --> 00:18:57,840
yeah there we go so you can see we set

00:18:50,000 --> 00:18:57,840
the host name here

00:18:58,480 --> 00:19:01,600
okay so

00:19:02,240 --> 00:19:05,360
you can see that's pretty quick and easy

00:19:03,760 --> 00:19:08,080
so if you were doing this you could

00:19:05,360 --> 00:19:08,880
you could uh spawn a spawn as many as

00:19:08,080 --> 00:19:11,840
you want to

00:19:08,880 --> 00:19:11,840
i have room for one

00:19:14,400 --> 00:19:22,000
and i see here that we're using the this

00:19:17,919 --> 00:19:24,880
os variance is an important definition

00:19:22,000 --> 00:19:26,960
for your vert install command to get the

00:19:24,880 --> 00:19:28,880
right

00:19:26,960 --> 00:19:30,880
to get the right configuration so if

00:19:28,880 --> 00:19:32,640
you're looking for that

00:19:30,880 --> 00:19:34,080
that's an important thing if you have an

00:19:32,640 --> 00:19:36,480
older version of deliver

00:19:34,080 --> 00:19:38,640
the delivery utilities you may you may

00:19:36,480 --> 00:19:41,440
not find that so make sure you're using

00:19:38,640 --> 00:19:41,440
a current version

00:19:45,679 --> 00:19:51,919
here's the commands i'm going to let you

00:19:49,200 --> 00:19:54,160
go ahead and go through the core os

00:19:51,919 --> 00:19:57,440
exploration yourself so you can

00:19:54,160 --> 00:20:01,919
find these these

00:19:57,440 --> 00:20:07,440
interesting and important rpms

00:20:01,919 --> 00:20:10,559
and consider that these are parts of the

00:20:07,440 --> 00:20:13,520
of the base os and this

00:20:10,559 --> 00:20:14,880
is an important uh distinction here this

00:20:13,520 --> 00:20:16,960
is the

00:20:14,880 --> 00:20:18,480
we'll just go here and look at the os

00:20:16,960 --> 00:20:21,360
tree

00:20:18,480 --> 00:20:23,280
and see that this is our the base of our

00:20:21,360 --> 00:20:24,159
uh operating system this is a container

00:20:23,280 --> 00:20:27,840
in itself

00:20:24,159 --> 00:20:30,960
and if we update this we would in fact

00:20:27,840 --> 00:20:33,760
uh get an entire replacement for uh

00:20:30,960 --> 00:20:34,159
not just the kernel or a single package

00:20:33,760 --> 00:20:36,559
but

00:20:34,159 --> 00:20:37,440
a collection of packages that make up

00:20:36,559 --> 00:20:41,360
the

00:20:37,440 --> 00:20:41,360
base operating system base deployment

00:20:42,400 --> 00:20:44,720
okay

00:20:45,600 --> 00:20:52,240
in the interest of time i'm going to

00:20:49,679 --> 00:20:52,240
let you

00:20:53,200 --> 00:20:58,720
walk through those commands yourself

00:20:57,200 --> 00:21:00,640
and i'm going to destroy this virtual

00:20:58,720 --> 00:21:03,840
machine so that we can move on to the

00:21:00,640 --> 00:21:03,840
next one

00:21:17,360 --> 00:21:21,360
oh and i'm going to get out of here

00:21:19,919 --> 00:21:24,559
sorry that's a

00:21:21,360 --> 00:21:27,679
control uh right bracket

00:21:24,559 --> 00:21:31,840
surprise and now

00:21:27,679 --> 00:21:31,840
there is a verse command

00:21:38,400 --> 00:21:45,840
and the undefined

00:21:49,679 --> 00:21:53,760
i've only got about yeah i've got 40 gig

00:21:51,679 --> 00:21:57,120
of space so

00:21:53,760 --> 00:22:02,240
two of these would uh are 25k okay

00:21:57,120 --> 00:22:05,600
so um so we're working with a 25 gig

00:22:02,240 --> 00:22:08,400
uh root volume and

00:22:05,600 --> 00:22:09,440
in the definition for the instance set

00:22:08,400 --> 00:22:12,400
or the

00:22:09,440 --> 00:22:14,720
the virtual machine you can see we've

00:22:12,400 --> 00:22:18,880
we're setting a disk size

00:22:14,720 --> 00:22:21,679
uh that is um pretty much

00:22:18,880 --> 00:22:21,679
pretty much the same

00:22:22,480 --> 00:22:27,520
okay so now let's uh let's move on to

00:22:26,640 --> 00:22:30,080
the second

00:22:27,520 --> 00:22:30,080
tutorial

00:22:32,000 --> 00:22:35,200
let's assume we are having a machine

00:22:34,159 --> 00:22:37,280
that

00:22:35,200 --> 00:22:38,400
is actually running on cloud or

00:22:37,280 --> 00:22:40,640
something like

00:22:38,400 --> 00:22:42,799
on a public network and you would like

00:22:40,640 --> 00:22:46,000
to get to know the ip

00:22:42,799 --> 00:22:49,200
of that specific instance

00:22:46,000 --> 00:22:51,360
and what we can do is use something like

00:22:49,200 --> 00:22:55,840
console login helper messages

00:22:51,360 --> 00:22:55,840
to actually

00:23:00,799 --> 00:23:05,200
uh yeah so let's assume we have a

00:23:03,520 --> 00:23:05,760
machine and we would like to get to know

00:23:05,200 --> 00:23:09,120
the public

00:23:05,760 --> 00:23:12,159
uh ip address of it so

00:23:09,120 --> 00:23:15,520
you can totally do that from the script

00:23:12,159 --> 00:23:19,520
that is like just using curl to actually

00:23:15,520 --> 00:23:23,360
get uh to actually hit a ipv4

00:23:19,520 --> 00:23:23,360
dot icon.com

00:23:34,960 --> 00:23:38,559
at the console so here's the systemd

00:23:37,919 --> 00:23:41,840
service

00:23:38,559 --> 00:23:42,240
around this uh bash file what it's going

00:23:41,840 --> 00:23:45,120
to do

00:23:42,240 --> 00:23:45,840
is it will execute that backscript file

00:23:45,120 --> 00:23:51,039
and

00:23:45,840 --> 00:23:54,320
then then it will uh

00:23:51,039 --> 00:23:56,799
actually be you will be used before

00:23:54,320 --> 00:23:58,799
the the executed before this thing

00:23:56,799 --> 00:24:00,799
before this service executes the control

00:23:58,799 --> 00:24:03,840
login has the message one

00:24:00,799 --> 00:24:04,400
so as they would as david demonstrated

00:24:03,840 --> 00:24:06,960
with

00:24:04,400 --> 00:24:08,960
enabling auto login and the custom host

00:24:06,960 --> 00:24:11,520
name we will be doing the same

00:24:08,960 --> 00:24:12,320
but uh like the same provisioning method

00:24:11,520 --> 00:24:15,520
i'll be

00:24:12,320 --> 00:24:16,240
ignition and we'll be writing a yaml

00:24:15,520 --> 00:24:19,600
file

00:24:16,240 --> 00:24:21,679
for doing it so what it's doing is that

00:24:19,600 --> 00:24:24,080
first of all we are making sure that we

00:24:21,679 --> 00:24:27,360
are able to auto login without having to

00:24:24,080 --> 00:24:29,600
uh do anything like ssh and stuff along

00:24:27,360 --> 00:24:32,400
with that we are also defining another

00:24:29,600 --> 00:24:35,120
system the unit uh systemd service

00:24:32,400 --> 00:24:37,200
which will execute this public ipv4

00:24:35,120 --> 00:24:38,559
which will actually hit the icon as i

00:24:37,200 --> 00:24:41,360
can get the ip address

00:24:38,559 --> 00:24:43,600
and you show it on the console along

00:24:41,360 --> 00:24:46,000
with that we are modifying the hostname

00:24:43,600 --> 00:24:46,799
and telling the systemd pager to

00:24:46,000 --> 00:24:50,240
actually use

00:24:46,799 --> 00:24:51,360
cat to use cat not a pager when printing

00:24:50,240 --> 00:24:53,520
information

00:24:51,360 --> 00:24:55,039
along with that we are actually these

00:24:53,520 --> 00:24:56,000
things are actually done to make sure

00:24:55,039 --> 00:24:59,440
that

00:24:56,000 --> 00:25:00,000
we have the work the workflow for the

00:24:59,440 --> 00:25:02,799
workshop

00:25:00,000 --> 00:25:03,760
goes smoothly because like if the

00:25:02,799 --> 00:25:06,640
control log

00:25:03,760 --> 00:25:08,159
message logging level is a debug that's

00:25:06,640 --> 00:25:11,200
actually seven

00:25:08,159 --> 00:25:15,039
that will show all the audit messages on

00:25:11,200 --> 00:25:18,240
interactive console so

00:25:15,039 --> 00:25:20,720
we are changing it to warning 4 and

00:25:18,240 --> 00:25:24,400
along with that we are also adding a

00:25:20,720 --> 00:25:27,760
script as public ipv4.sx in our path

00:25:24,400 --> 00:25:32,000
so i have actually written this

00:25:27,760 --> 00:25:34,480
ignition file here fcct

00:25:32,000 --> 00:25:34,480
here it does

00:25:38,080 --> 00:25:42,320
so here it is we are just modifying the

00:25:40,240 --> 00:25:45,840
hostname and that will be defcon

00:25:42,320 --> 00:25:48,480
minus c that means and most of the

00:25:45,840 --> 00:25:51,679
information is similar

00:25:48,480 --> 00:25:54,240
then what's on the documentation so

00:25:51,679 --> 00:25:55,120
i'm not using fedora on this on this

00:25:54,240 --> 00:25:56,880
laptop so

00:25:55,120 --> 00:25:58,640
i'm using something like docker to

00:25:56,880 --> 00:26:03,440
actually make sure that my

00:25:58,640 --> 00:26:05,600
uh ml file uh is converted directly into

00:26:03,440 --> 00:26:05,600
it

00:26:06,159 --> 00:26:13,760
so let's see how that works

00:26:10,400 --> 00:26:14,080
yeah so if we could get the services

00:26:13,760 --> 00:26:16,960
that

00:26:14,080 --> 00:26:16,960
ignition file

00:26:17,840 --> 00:26:22,640
is json which uh actually the fedora

00:26:20,720 --> 00:26:25,679
cost config transpiler read

00:26:22,640 --> 00:26:27,360
to file and created this ignition config

00:26:25,679 --> 00:26:29,679
that we will be using to provision the

00:26:27,360 --> 00:26:33,120
particular os right now

00:26:29,679 --> 00:26:33,520
so i'm going to quickly clear it out and

00:26:33,120 --> 00:26:36,960
then

00:26:33,520 --> 00:26:38,640
search for work install so what worth

00:26:36,960 --> 00:26:39,520
install is doing is creating another

00:26:38,640 --> 00:26:42,240
virtual machine

00:26:39,520 --> 00:26:43,520
which will be using this uh specific

00:26:42,240 --> 00:26:46,720
ignition config

00:26:43,520 --> 00:26:48,480
from the qemu command line and creating

00:26:46,720 --> 00:26:51,679
a backing store for 2gb

00:26:48,480 --> 00:26:54,320
and using that so

00:26:51,679 --> 00:26:56,320
let's try and provision it let's see how

00:26:54,320 --> 00:26:59,440
that works

00:26:56,320 --> 00:27:00,240
so it actually created another virtual

00:26:59,440 --> 00:27:06,440
machine

00:27:00,240 --> 00:27:09,559
and as you can see it's booting up

00:27:06,440 --> 00:27:09,559
[Music]

00:27:18,840 --> 00:27:21,840
uh

00:27:32,799 --> 00:27:38,640
so it's taking button time can you

00:27:35,520 --> 00:27:38,640
increase your font size

00:27:40,559 --> 00:27:48,159
uh dude i'm not sure who's responsible

00:27:43,279 --> 00:27:48,159
for the i can have the uh api

00:27:53,840 --> 00:28:00,399
so it is actually booting up here

00:27:57,520 --> 00:28:00,880
so i'm not sure if i'll be able to do

00:28:00,399 --> 00:28:03,039
that

00:28:00,880 --> 00:28:03,039
but

00:28:06,100 --> 00:28:09,280
[Music]

00:28:14,840 --> 00:28:19,279
and it will soon show us our public id

00:28:18,640 --> 00:28:23,320
address

00:28:19,279 --> 00:28:25,500
on uh the console this is what console

00:28:23,320 --> 00:28:27,039
is demonstrating

00:28:25,500 --> 00:28:30,960
[Music]

00:28:27,039 --> 00:28:36,159
and then

00:28:30,960 --> 00:28:45,840
let us build in the ignition file system

00:28:36,159 --> 00:28:45,840
and then

00:28:46,240 --> 00:28:59,840
so it's booting up the virtual machine

00:28:59,980 --> 00:29:03,390
[Music]

00:29:02,050 --> 00:29:08,080
[Applause]

00:29:03,390 --> 00:29:12,399
[Laughter]

00:29:08,080 --> 00:29:15,200
here's our service

00:29:12,399 --> 00:29:16,320
and so here you can see that along with

00:29:15,200 --> 00:29:20,480
the ignition

00:29:16,320 --> 00:29:23,120
and ssh host keys we have

00:29:20,480 --> 00:29:26,159
a script that was executed and has

00:29:23,120 --> 00:29:28,480
actually detected public ipv4

00:29:26,159 --> 00:29:31,120
uh ip address that detected and here's

00:29:28,480 --> 00:29:33,840
the public ipv4 address for it

00:29:31,120 --> 00:29:34,960
so it's a it logged in automatically

00:29:33,840 --> 00:29:38,480
because

00:29:34,960 --> 00:29:40,640
as we used ignition to actually create

00:29:38,480 --> 00:29:43,360
the service and

00:29:40,640 --> 00:29:45,120
execute the service so we can actually

00:29:43,360 --> 00:29:47,279
get the logs from here

00:29:45,120 --> 00:29:49,200
this is what the service is all about

00:29:47,279 --> 00:29:51,440
that we created from the ignition config

00:29:49,200 --> 00:29:54,080
file

00:29:51,440 --> 00:29:55,200
so it actually used curl to actually

00:29:54,080 --> 00:29:58,640
talk to i can has

00:29:55,200 --> 00:30:01,919
ip.com and use that

00:29:58,640 --> 00:30:05,279
to execute the script and get the

00:30:01,919 --> 00:30:08,960
ip address oops sorry

00:30:05,279 --> 00:30:11,600
so this is how ignition works

00:30:08,960 --> 00:30:13,840
and you can execute multiple scripts or

00:30:11,600 --> 00:30:15,120
use something like a smd service

00:30:13,840 --> 00:30:17,760
that will be executed they'll be

00:30:15,120 --> 00:30:21,120
responsible for executing your

00:30:17,760 --> 00:30:24,880
script and that

00:30:21,120 --> 00:30:28,799
service can be uh executed

00:30:24,880 --> 00:30:30,240
once like network is online or anything

00:30:28,799 --> 00:30:32,159
and you can demonstrate useful

00:30:30,240 --> 00:30:33,919
information using control login helper

00:30:32,159 --> 00:30:36,960
messages decision dot

00:30:33,919 --> 00:30:39,840
service to actually show something on

00:30:36,960 --> 00:30:41,200
after lock before logging in when you

00:30:39,840 --> 00:30:44,559
provision a machine

00:30:41,200 --> 00:30:47,919
so this is my first part

00:30:44,559 --> 00:30:50,399
and this was about using systemd

00:30:47,919 --> 00:30:53,760
services the second one is about

00:30:50,399 --> 00:30:55,840
enabling ssh server ssh access

00:30:53,760 --> 00:30:57,440
and starting containers on board let's

00:30:55,840 --> 00:31:00,799
assume that we have a machine

00:30:57,440 --> 00:31:02,159
and we would like to enable uh we would

00:31:00,799 --> 00:31:05,279
like to create an

00:31:02,159 --> 00:31:09,600
xtd the uh distributed scd

00:31:05,279 --> 00:31:13,039
uh program and make it as a member

00:31:09,600 --> 00:31:15,200
so put that on it

00:31:13,039 --> 00:31:17,039
in a container so lcd will actually be

00:31:15,200 --> 00:31:18,399
running in a container in order to do

00:31:17,039 --> 00:31:20,799
that we will be using

00:31:18,399 --> 00:31:22,320
podman which is like basically similar

00:31:20,799 --> 00:31:24,880
to docker

00:31:22,320 --> 00:31:26,240
and it was rootless for locals

00:31:24,880 --> 00:31:28,799
containers

00:31:26,240 --> 00:31:30,640
so we will be creating two services here

00:31:28,799 --> 00:31:32,000
the first one will be a failure service

00:31:30,640 --> 00:31:35,440
which will be

00:31:32,000 --> 00:31:37,840
one shot and it will be just doing

00:31:35,440 --> 00:31:39,840
false so it will actually result a

00:31:37,840 --> 00:31:41,120
non-zero code which will result in a

00:31:39,840 --> 00:31:44,399
failure and

00:31:41,120 --> 00:31:46,159
fedora goes after boot time it will show

00:31:44,399 --> 00:31:48,559
us that this service was filled while

00:31:46,159 --> 00:31:50,559
trying to load it via ignition

00:31:48,559 --> 00:31:52,720
and at the same time we'll be creating

00:31:50,559 --> 00:31:56,480
another service that will actually be

00:31:52,720 --> 00:31:59,679
an xcd container and that will be a

00:31:56,480 --> 00:32:02,720
member so

00:31:59,679 --> 00:32:06,399
we created the service for it

00:32:02,720 --> 00:32:08,399
and then we have the storage files and

00:32:06,399 --> 00:32:10,240
the modifications that we use for this

00:32:08,399 --> 00:32:13,919
uh

00:32:10,240 --> 00:32:16,159
tutorial so i'm quickly going to exit it

00:32:13,919 --> 00:32:16,159
and

00:32:16,240 --> 00:32:23,760
i'm going to quickly destroy it as well

00:32:20,320 --> 00:32:26,960
so we can use the same name

00:32:23,760 --> 00:32:30,240
for the other

00:32:26,960 --> 00:32:31,760
for this tutorial so i'm going to choose

00:32:30,240 --> 00:32:34,960
something

00:32:31,760 --> 00:32:34,960
and then continue

00:32:36,320 --> 00:32:42,640
so here's the fcct containers ignition

00:32:39,760 --> 00:32:42,640
file part where

00:32:46,320 --> 00:32:51,600
along with that we have another service

00:32:49,200 --> 00:32:53,360
that's going to enable auto login along

00:32:51,600 --> 00:32:54,320
with that we have a failure one which is

00:32:53,360 --> 00:32:57,360
failed

00:32:54,320 --> 00:32:58,480
and then we have an std member so i'm

00:32:57,360 --> 00:33:03,200
quickly going to

00:32:58,480 --> 00:33:07,519
convert it into the fcct one

00:33:03,200 --> 00:33:07,519
so that will be actually the

00:33:08,840 --> 00:33:13,039
docker so

00:33:10,720 --> 00:33:13,890
i'm quickly going to modify two

00:33:13,039 --> 00:33:15,120
containers

00:33:13,890 --> 00:33:17,840
[Music]

00:33:15,120 --> 00:33:18,880
so a quick note here you won't have to

00:33:17,840 --> 00:33:22,159
type

00:33:18,880 --> 00:33:24,399
all of it because like in the very start

00:33:22,159 --> 00:33:26,000
while setting up it was said that you

00:33:24,399 --> 00:33:28,080
have to set some aliases

00:33:26,000 --> 00:33:30,159
but i didn't do that so i have to type

00:33:28,080 --> 00:33:31,519
all the container running stuff on the

00:33:30,159 --> 00:33:35,840
command line

00:33:31,519 --> 00:33:35,840
so the ignition config files here

00:33:36,000 --> 00:33:41,039
uh here it is direct form you can uh all

00:33:38,960 --> 00:33:42,000
the ammo files convert into a json

00:33:41,039 --> 00:33:44,970
ignition

00:33:42,000 --> 00:33:46,880
format and then we can use this one to

00:33:44,970 --> 00:33:49,919
[Music]

00:33:46,880 --> 00:33:52,399
create a virtual machine so

00:33:49,919 --> 00:33:53,279
i am quickly going to modify the qemu

00:33:52,399 --> 00:33:58,799
command line

00:33:53,279 --> 00:33:58,799
from services.ignition to containers.ign

00:34:01,840 --> 00:34:06,000
so what we will do is use this nuke in

00:34:04,399 --> 00:34:10,079
the ignition file

00:34:06,000 --> 00:34:10,079
to create this instance

00:34:12,399 --> 00:34:16,159
we're going to time in the meantime do

00:34:14,159 --> 00:34:16,800
we have any questions oh it's major

00:34:16,159 --> 00:34:19,200
hidden

00:34:16,800 --> 00:34:19,200
okay

00:34:32,879 --> 00:34:39,440
or anything otherwise this thing boots

00:34:35,440 --> 00:34:39,440
up and just pulling the lcd image

00:34:40,240 --> 00:34:47,200
um as we all have

00:34:43,440 --> 00:34:48,480
um so here the examples that we are

00:34:47,200 --> 00:34:51,119
giving are

00:34:48,480 --> 00:34:51,919
relatively simple and and like direct

00:34:51,119 --> 00:34:55,119
examples

00:34:51,919 --> 00:34:58,720
uh but you can do a lot of things with

00:34:55,119 --> 00:35:02,240
uh ignition and fluorocares so

00:34:58,720 --> 00:35:06,160
as a more i would say complex example

00:35:02,240 --> 00:35:09,520
i can share one we made with matrix

00:35:06,160 --> 00:35:13,119
setting up matrix server on

00:35:09,520 --> 00:35:13,119
english lab and federal magazine

00:35:13,760 --> 00:35:17,440
where you can set up or automatically

00:35:16,240 --> 00:35:21,119
automatically set up

00:35:17,440 --> 00:35:24,480
a matrix on server

00:35:21,119 --> 00:35:26,480
vr only ignition config on

00:35:24,480 --> 00:35:29,119
on fedora corresps and that's really

00:35:26,480 --> 00:35:32,240
powerful because if you do it

00:35:29,119 --> 00:35:33,760
once then that's the time lots of time

00:35:32,240 --> 00:35:34,640
to set up and everything to write the

00:35:33,760 --> 00:35:38,160
configs but

00:35:34,640 --> 00:35:40,240
if you want to automatically set up

00:35:38,160 --> 00:35:41,599
more of the servers or do that for

00:35:40,240 --> 00:35:44,160
several domains for example

00:35:41,599 --> 00:35:44,880
separate instances then once you've done

00:35:44,160 --> 00:35:47,440
that

00:35:44,880 --> 00:35:49,440
the first time every single new instance

00:35:47,440 --> 00:35:51,440
is free basically because you've got all

00:35:49,440 --> 00:35:55,200
the configs and you can go ahead

00:35:51,440 --> 00:35:58,560
and start again and so we publish this

00:35:55,200 --> 00:36:01,440
these full examples that it gives you

00:35:58,560 --> 00:36:03,200
an idea of how much power ignition has

00:36:01,440 --> 00:36:03,839
and how much capability disease it has

00:36:03,200 --> 00:36:07,920
so

00:36:03,839 --> 00:36:11,680
that you can use it in more context

00:36:07,920 --> 00:36:12,000
go ahead i think the machine has booted

00:36:11,680 --> 00:36:14,480
up here

00:36:12,000 --> 00:36:17,119
you can see that the failure service

00:36:14,480 --> 00:36:20,640
that we actually created just to fail

00:36:17,119 --> 00:36:22,079
is demonstrate is here that the console

00:36:20,640 --> 00:36:24,079
login helper messages

00:36:22,079 --> 00:36:25,680
is telling us that this was the paid

00:36:24,079 --> 00:36:27,119
unit that you are trying to provision

00:36:25,680 --> 00:36:30,720
via ignition

00:36:27,119 --> 00:36:32,800
and the other service that we created is

00:36:30,720 --> 00:36:34,800
service so we'll just quickly even see

00:36:32,800 --> 00:36:37,839
the logs of it

00:36:34,800 --> 00:36:42,079
so it actually pulled the image and it

00:36:37,839 --> 00:36:42,079
started a single node fcd cluster

00:36:42,240 --> 00:36:45,599
by using this image so we are quickly

00:36:44,560 --> 00:36:48,160
going to

00:36:45,599 --> 00:36:50,320
see and add something here so what we're

00:36:48,160 --> 00:36:51,119
going to do is like create a key value

00:36:50,320 --> 00:36:54,640
here

00:36:51,119 --> 00:36:58,240
for fedora and then adding value

00:36:54,640 --> 00:37:00,880
as fun so i'm gonna do that

00:36:58,240 --> 00:37:01,920
and here you can see that it replied

00:37:00,880 --> 00:37:05,200
this with actions

00:37:01,920 --> 00:37:07,040
at node key fedora value this and

00:37:05,200 --> 00:37:10,720
modified indexes

00:37:07,040 --> 00:37:12,880
so now let's get this key from

00:37:10,720 --> 00:37:13,920
from it so what we're going to do is

00:37:12,880 --> 00:37:17,599
we're going to

00:37:13,920 --> 00:37:19,599
quickly use you okay

00:37:17,599 --> 00:37:21,280
so here you can see that we have when

00:37:19,599 --> 00:37:23,280
the single node cluster is

00:37:21,280 --> 00:37:24,560
as the single node cluster is up we can

00:37:23,280 --> 00:37:27,839
add

00:37:24,560 --> 00:37:29,119
uh the key value appears or at the same

00:37:27,839 --> 00:37:33,119
time effect data from it

00:37:29,119 --> 00:37:35,440
you can use it to purge in your case

00:37:33,119 --> 00:37:37,760
and use it as a part of kids cluster if

00:37:35,440 --> 00:37:41,040
you are setting up multinote

00:37:37,760 --> 00:37:44,079
multi-node xtd

00:37:41,040 --> 00:37:50,800
so you can like set that up easily by

00:37:44,079 --> 00:37:52,560
adding it in the ignition template

00:37:50,800 --> 00:37:55,440
so timothy would you like to go ahead

00:37:52,560 --> 00:37:57,599
and share yours

00:37:55,440 --> 00:38:00,160
and we can destroy it by this way so you

00:37:57,599 --> 00:38:03,200
have to press control and that's well

00:38:00,160 --> 00:38:04,000
ending bracket so when you do that it

00:38:03,200 --> 00:38:06,079
will like

00:38:04,000 --> 00:38:07,760
get you out of the domain virtual

00:38:06,079 --> 00:38:10,320
machine and then you can destroy and

00:38:07,760 --> 00:38:10,320
define it

00:38:10,880 --> 00:38:13,280
sorry

00:38:14,400 --> 00:38:18,960
so then you can use the same name to

00:38:16,480 --> 00:38:23,920
create other virtual machines as well

00:38:18,960 --> 00:38:23,920
so stop showing a skill now

00:38:25,440 --> 00:38:29,520
all right let's do that forward

00:38:30,000 --> 00:38:36,560
okay so now we will

00:38:33,200 --> 00:38:39,599
uh try and test updates

00:38:36,560 --> 00:38:41,680
so um the

00:38:39,599 --> 00:38:43,119
what's nice with the rockers is that it

00:38:41,680 --> 00:38:46,640
automatically updates

00:38:43,119 --> 00:38:48,560
so um yeah we

00:38:46,640 --> 00:38:50,320
okay all right yes we're at the end of

00:38:48,560 --> 00:38:52,000
the so yeah if you have any questions

00:38:50,320 --> 00:38:54,960
feel free and we'll stop and

00:38:52,000 --> 00:38:56,800
and answer them otherwise we'll uh we'll

00:38:54,960 --> 00:39:01,440
just like

00:38:56,800 --> 00:39:04,160
try and we can do

00:39:01,440 --> 00:39:04,640
some of the other tutorials or we can

00:39:04,160 --> 00:39:06,800
ask

00:39:04,640 --> 00:39:08,320
we we can also answer questions too if

00:39:06,800 --> 00:39:10,880
that's

00:39:08,320 --> 00:39:10,880
the id

00:39:13,200 --> 00:39:20,079
we don't see anything in q a section

00:39:16,240 --> 00:39:23,280
timothy okay um i think

00:39:20,079 --> 00:39:25,760
you already answered all the answer on

00:39:23,280 --> 00:39:25,760
the chat

00:39:27,040 --> 00:39:33,760
so all right thank you

00:39:30,720 --> 00:39:35,359
yeah do we have do we have time to do

00:39:33,760 --> 00:39:36,800
to for timothy to show the update

00:39:35,359 --> 00:39:37,599
because i think that's an important part

00:39:36,800 --> 00:39:40,720
of that

00:39:37,599 --> 00:39:40,720
yeah would you do that

00:39:41,359 --> 00:39:44,160
1 130 yeah

00:39:44,480 --> 00:39:48,160
right i'll do i'll do the i'll show the

00:39:47,359 --> 00:39:49,760
shot

00:39:48,160 --> 00:39:51,680
so that thanks that would be recorded

00:39:49,760 --> 00:39:55,040
right so yeah yeah

00:39:51,680 --> 00:39:56,880
um so yes the idea is that

00:39:55,040 --> 00:39:58,079
fedora quest is an automatically

00:39:56,880 --> 00:40:01,920
updating system

00:39:58,079 --> 00:40:04,480
so once you all share the page at the

00:40:01,920 --> 00:40:08,400
same time that should help

00:40:04,480 --> 00:40:08,960
here we go so once you've installed the

00:40:08,400 --> 00:40:10,880
system

00:40:08,960 --> 00:40:12,640
it will automatically stay up to date

00:40:10,880 --> 00:40:15,839
and reboot reboot to

00:40:12,640 --> 00:40:17,920
to apply the next update essentially we

00:40:15,839 --> 00:40:19,920
release updates

00:40:17,920 --> 00:40:21,440
something like every two weeks so every

00:40:19,920 --> 00:40:22,880
two weeks you get a new update unless

00:40:21,440 --> 00:40:25,119
there's major

00:40:22,880 --> 00:40:25,920
security issue and then we we release a

00:40:25,119 --> 00:40:28,800
place when it

00:40:25,920 --> 00:40:30,160
when it's needed so to do that to

00:40:28,800 --> 00:40:31,839
actually test updates

00:40:30,160 --> 00:40:33,920
usually you when you start a fed request

00:40:31,839 --> 00:40:36,960
instance you directly start it

00:40:33,920 --> 00:40:39,760
at the latest version so because

00:40:36,960 --> 00:40:41,280
you don't need to start with something

00:40:39,760 --> 00:40:43,680
that is already outdated

00:40:41,280 --> 00:40:44,480
uh but um to do that we will like

00:40:43,680 --> 00:40:47,119
download

00:40:44,480 --> 00:40:47,760
an exact uh just previous version so

00:40:47,119 --> 00:40:50,800
that we can

00:40:47,760 --> 00:40:54,560
actually have updates um working

00:40:50,800 --> 00:40:57,760
so let's just do that so i'll pick up

00:40:54,560 --> 00:41:00,800
a release here's another release from uh

00:40:57,760 --> 00:41:02,720
from fedoram so

00:41:00,800 --> 00:41:04,560
that's what i will do here so if you go

00:41:02,720 --> 00:41:06,240
ahead and look at the stable stream for

00:41:04,560 --> 00:41:10,079
example you can just pick up the

00:41:06,240 --> 00:41:12,000
previous one here and copy this value

00:41:10,079 --> 00:41:13,760
and and use that to download the release

00:41:12,000 --> 00:41:17,440
so i'll do just that

00:41:13,760 --> 00:41:19,520
um maybe i should share

00:41:17,440 --> 00:41:23,599
all right let's download the signature

00:41:19,520 --> 00:41:23,599
and we verify the release

00:41:25,599 --> 00:41:31,119
oh oh yeah because

00:41:29,760 --> 00:41:33,040
it's been a while since i have

00:41:31,119 --> 00:41:36,079
downloaded

00:41:33,040 --> 00:41:40,720
the images uh manually

00:41:36,079 --> 00:41:45,359
so i have to fetch out the signaling key

00:41:40,720 --> 00:41:45,359
which is uh which is where

00:41:46,560 --> 00:41:49,760
say new key

00:41:50,000 --> 00:41:53,200
which is over here

00:41:57,680 --> 00:42:03,839
all right no

00:42:01,040 --> 00:42:03,839
that should be good

00:42:04,240 --> 00:42:11,520
yes that's good all right

00:42:08,400 --> 00:42:14,960
so now that we have an older release

00:42:11,520 --> 00:42:31,839
we can simply boot up that one

00:42:14,960 --> 00:42:31,839
will just extract the image

00:42:46,000 --> 00:42:53,040
move it under a more predictable name

00:42:49,839 --> 00:42:55,440
and then we go so we don't need

00:42:53,040 --> 00:42:56,640
like a really complex configuration here

00:42:55,440 --> 00:42:59,280
so the fcc

00:42:56,640 --> 00:43:00,800
isn't really interesting so i'll just

00:42:59,280 --> 00:43:02,880
copy it and paste it

00:43:00,800 --> 00:43:06,240
you can you can find it in the in the

00:43:02,880 --> 00:43:06,240
dark i'll just copy paste

00:43:07,040 --> 00:43:14,319
and we'll use that directly whoops

00:43:18,240 --> 00:43:20,880
too fast

00:43:21,760 --> 00:43:29,040
yeah okay fcc let's go let's have it

00:43:26,960 --> 00:43:30,079
here so it's essentially the same one as

00:43:29,040 --> 00:43:32,880
we used before

00:43:30,079 --> 00:43:34,480
with auto login and eventually an ssh

00:43:32,880 --> 00:43:37,599
key so we can

00:43:34,480 --> 00:43:41,839
have that here i'll just paste my

00:43:37,599 --> 00:43:41,839
my own ssh key

00:43:48,160 --> 00:43:50,640
here we go

00:43:51,839 --> 00:44:02,319
great so as always we convert this

00:43:57,599 --> 00:44:02,319
here to an ignition config

00:44:03,119 --> 00:44:11,359
if i wrote yes because i wrote his fcc

00:44:09,119 --> 00:44:14,240
all right so we have our i'll have the

00:44:11,359 --> 00:44:23,839
extension config and we can go and start

00:44:14,240 --> 00:44:23,839
a vector machine with that

00:44:27,599 --> 00:44:29,839
so

00:44:31,760 --> 00:44:38,000
what's nice here so we able to update so

00:44:35,040 --> 00:44:38,800
what's going to happen is that directly

00:44:38,000 --> 00:44:41,920
after

00:44:38,800 --> 00:44:43,920
we boot up the system will immediately

00:44:41,920 --> 00:44:46,160
figure out that it's not up to date and

00:44:43,920 --> 00:44:49,520
we'll start doing the updates so

00:44:46,160 --> 00:44:51,440
if we do ask if we look at the status of

00:44:49,520 --> 00:44:53,200
the binkadi which is the update

00:44:51,440 --> 00:44:54,560
the the program which manages the update

00:44:53,200 --> 00:44:56,800
of eurocars

00:44:54,560 --> 00:44:58,560
you look that what he he finds out he's

00:44:56,800 --> 00:45:04,880
okay he's running here

00:44:58,560 --> 00:45:07,760
oh he failed to check for updates hmm

00:45:04,880 --> 00:45:08,800
no no you failed to check but it

00:45:07,760 --> 00:45:13,839
actually managed to

00:45:08,800 --> 00:45:13,839
do that so and we're already rebooting

00:45:16,839 --> 00:45:19,839
up

00:45:26,480 --> 00:45:30,560
so we were an old version but we

00:45:29,200 --> 00:45:34,960
immediately noticed that

00:45:30,560 --> 00:45:34,960
and we immediately rebooted the system

00:45:35,359 --> 00:45:41,760
so here we go we know back

00:45:39,200 --> 00:45:44,079
and let's take a look at the status of

00:45:41,760 --> 00:45:45,440
our system which with rpms3 which is the

00:45:44,079 --> 00:45:48,400
command that manages

00:45:45,440 --> 00:45:49,599
the system and how to and which version

00:45:48,400 --> 00:45:51,599
we are running

00:45:49,599 --> 00:45:54,000
and what we can see here is so we

00:45:51,599 --> 00:45:55,440
started on this version here which which

00:45:54,000 --> 00:45:59,200
is the version that i

00:45:55,440 --> 00:46:00,240
got from um from the from the download

00:45:59,200 --> 00:46:03,040
page

00:46:00,240 --> 00:46:03,280
uh the versions are actually used to set

00:46:03,040 --> 00:46:05,520
up

00:46:03,280 --> 00:46:06,720
the virtual machine and we immediately

00:46:05,520 --> 00:46:10,480
moved moved out

00:46:06,720 --> 00:46:15,599
to the latest version see here the

00:46:10,480 --> 00:46:19,680
the latest stable version um

00:46:15,599 --> 00:46:21,440
yeah so we basically nagari

00:46:19,680 --> 00:46:23,440
noticed that we were running something

00:46:21,440 --> 00:46:26,560
old and said okay

00:46:23,440 --> 00:46:28,160
that's good uh we you're ready you

00:46:26,560 --> 00:46:28,720
you're running an older version let's go

00:46:28,160 --> 00:46:32,079
in

00:46:28,720 --> 00:46:35,680
a bit right up uh so if we look at

00:46:32,079 --> 00:46:38,960
the status i think out here

00:46:35,680 --> 00:46:41,200
uh so right now yeah we are

00:46:38,960 --> 00:46:42,400
the current release so that's good

00:46:41,200 --> 00:46:45,200
because before

00:46:42,400 --> 00:46:46,400
he was saying that we were if i just

00:46:45,200 --> 00:46:50,000
look at the

00:46:46,400 --> 00:46:53,520
the journal from the full journal uh

00:46:50,000 --> 00:46:54,839
from um being gaddy which i think i can

00:46:53,520 --> 00:46:58,000
get

00:46:54,839 --> 00:47:00,880
um yeah

00:46:58,000 --> 00:47:00,880
i think got it

00:47:01,760 --> 00:47:05,839
oh yeah i just have to go ahead and get

00:47:04,800 --> 00:47:09,599
it

00:47:05,839 --> 00:47:12,000
uh so yes initially he he was like okay

00:47:09,599 --> 00:47:13,200
current release is not led n is not the

00:47:12,000 --> 00:47:15,440
latest version

00:47:13,200 --> 00:47:17,680
and we want to move to the latest

00:47:15,440 --> 00:47:20,079
version so that's what it did first

00:47:17,680 --> 00:47:22,839
and now we're on the we reboot it and we

00:47:20,079 --> 00:47:24,960
know we're in the latest one

00:47:22,839 --> 00:47:26,400
so if

00:47:24,960 --> 00:47:29,119
if we're there okay all right we got

00:47:26,400 --> 00:47:31,520
automatic updates but what's great

00:47:29,119 --> 00:47:33,359
is that we can check out what happened

00:47:31,520 --> 00:47:36,480
between the versions so directly

00:47:33,359 --> 00:47:38,240
in in our system here we can take a look

00:47:36,480 --> 00:47:39,680
and see okay all right what happened

00:47:38,240 --> 00:47:43,280
during this update

00:47:39,680 --> 00:47:45,920
and we gotta call rpm dbdif

00:47:43,280 --> 00:47:46,960
and it will tell you which packages have

00:47:45,920 --> 00:47:50,240
been updated

00:47:46,960 --> 00:47:52,079
as part of the images during

00:47:50,240 --> 00:47:54,319
this update so here you can see that we

00:47:52,079 --> 00:47:57,440
removed actually two packages and we

00:47:54,319 --> 00:47:57,440
loaded a bunch of them

00:47:57,520 --> 00:48:03,920
so great but what happens if for example

00:48:01,040 --> 00:48:05,680
there's a bug in k exact tools and you

00:48:03,920 --> 00:48:06,079
cannot use that anymore because it

00:48:05,680 --> 00:48:07,599
breaks

00:48:06,079 --> 00:48:09,920
your workflow on your system or your

00:48:07,599 --> 00:48:13,440
applications and you want to go back

00:48:09,920 --> 00:48:14,240
to the older version so well the easiest

00:48:13,440 --> 00:48:17,200
version is

00:48:14,240 --> 00:48:18,480
you can tell rpms3 to roll back the

00:48:17,200 --> 00:48:21,119
system state

00:48:18,480 --> 00:48:21,839
to the previous version of the system

00:48:21,119 --> 00:48:24,880
and you

00:48:21,839 --> 00:48:27,599
directly tell that to rpm3 with

00:48:24,880 --> 00:48:28,319
uh with the rollback man and what it

00:48:27,599 --> 00:48:31,839
will do

00:48:28,319 --> 00:48:33,839
is essentially it will move up it will

00:48:31,839 --> 00:48:34,880
go back to the previous version of this

00:48:33,839 --> 00:48:37,040
system so

00:48:34,880 --> 00:48:39,520
when you call rpms3 status you see we

00:48:37,040 --> 00:48:40,079
have two versions because we still have

00:48:39,520 --> 00:48:42,640
the

00:48:40,079 --> 00:48:43,359
previous version available for us on the

00:48:42,640 --> 00:48:45,680
system

00:48:43,359 --> 00:48:47,520
and we can go back at any time so that's

00:48:45,680 --> 00:48:50,960
what we will do right now

00:48:47,520 --> 00:48:52,400
if we call rpms3 rollback and dash dash

00:48:50,960 --> 00:48:54,880
reboot it will

00:48:52,400 --> 00:48:55,760
roll back and reboot the system it will

00:48:54,880 --> 00:49:03,839
see that we

00:48:55,760 --> 00:49:03,839
are back on the previous one

00:49:04,240 --> 00:49:09,839
so that's almost instant just time force

00:49:14,839 --> 00:49:19,520
reboot

00:49:16,000 --> 00:49:21,760
and we are nowhere back and

00:49:19,520 --> 00:49:22,880
if we look at the status here so we're

00:49:21,760 --> 00:49:25,920
back to the system

00:49:22,880 --> 00:49:29,119
to the image that we used

00:49:25,920 --> 00:49:31,440
to first we used to to create the system

00:49:29,119 --> 00:49:32,400
and the updates is right here it's right

00:49:31,440 --> 00:49:34,640
underneath and

00:49:32,400 --> 00:49:36,319
that's the one we are running here and

00:49:34,640 --> 00:49:37,280
that's the one that are available on

00:49:36,319 --> 00:49:39,599
system

00:49:37,280 --> 00:49:41,920
so we just roll back and everything's

00:49:39,599 --> 00:49:43,359
fine

00:49:41,920 --> 00:49:45,680
we can take a quick look at what

00:49:43,359 --> 00:49:46,000
bencardi is telling us and then god is

00:49:45,680 --> 00:49:49,680
like

00:49:46,000 --> 00:49:53,040
okay somebody's

00:49:49,680 --> 00:49:55,119
uh all right we uh

00:49:53,040 --> 00:49:56,640
we are not going to update because we

00:49:55,119 --> 00:49:59,359
are

00:49:56,640 --> 00:50:02,319
in a robux situation i there's like some

00:49:59,359 --> 00:50:02,319
strange error right here

00:50:04,079 --> 00:50:09,200
all right that's somebody and i'll have

00:50:06,240 --> 00:50:12,400
to check that one out

00:50:09,200 --> 00:50:14,720
um and yeah

00:50:12,400 --> 00:50:16,559
so essentially mungari is not going to

00:50:14,720 --> 00:50:17,200
update again because we've just rolled

00:50:16,559 --> 00:50:19,599
back so

00:50:17,200 --> 00:50:21,839
bengali is aware that we are well we're

00:50:19,599 --> 00:50:23,839
winning an old version but on purpose so

00:50:21,839 --> 00:50:25,599
we are not going to update that one

00:50:23,839 --> 00:50:26,559
underneath you again because that would

00:50:25,599 --> 00:50:28,559
be bad

00:50:26,559 --> 00:50:30,640
and we'll just wait until the next one

00:50:28,559 --> 00:50:31,520
comes in and hopefully by the time this

00:50:30,640 --> 00:50:34,000
one comes in

00:50:31,520 --> 00:50:35,839
you have time to report and fix uh maybe

00:50:34,000 --> 00:50:36,800
a bug figure has been busted a new

00:50:35,839 --> 00:50:38,720
package

00:50:36,800 --> 00:50:41,119
has been released and so this one will

00:50:38,720 --> 00:50:44,559
get included in the next version

00:50:41,119 --> 00:50:46,559
uh and uh and then we can move on so

00:50:44,559 --> 00:50:47,760
yeah this is this is essentially like

00:50:46,559 --> 00:50:49,200
skipping a version

00:50:47,760 --> 00:50:51,920
so that you can stay on the one that

00:50:49,200 --> 00:50:54,480
works and and move on to the next one

00:50:51,920 --> 00:50:55,680
which is uh which hopefully will work

00:50:54,480 --> 00:50:58,960
too

00:50:55,680 --> 00:51:01,359
uh yeah we do extensive testing but we

00:50:58,960 --> 00:51:02,960
we cannot test everything on the systems

00:51:01,359 --> 00:51:04,240
of course there will be bugs from time

00:51:02,960 --> 00:51:07,680
to time and that's like

00:51:04,240 --> 00:51:09,920
the last result option that you have

00:51:07,680 --> 00:51:11,119
so essentially that's the idea about

00:51:09,920 --> 00:51:14,640
automatic updates

00:51:11,119 --> 00:51:18,640
and optional rollbacks if you need them

00:51:14,640 --> 00:51:23,119
um so yeah that's that's just my part

00:51:18,640 --> 00:51:26,400
all right we have a latest

00:51:23,119 --> 00:51:27,839
um section but i won't be doing that one

00:51:26,400 --> 00:51:30,960
because that would take us

00:51:27,839 --> 00:51:32,800
far too late so i'll just like quickly

00:51:30,960 --> 00:51:33,839
show it and it's the last session here

00:51:32,800 --> 00:51:36,880
about noting

00:51:33,839 --> 00:51:39,359
user level system the units on board and

00:51:36,880 --> 00:51:41,200
you can do that at your own pace

00:51:39,359 --> 00:51:48,960
it's essentially a self-describing

00:51:41,200 --> 00:51:48,960

YouTube URL: https://www.youtube.com/watch?v=vH89CKVxLpA


