Title: Toolbox - interactive container environment - DevConf.CZ 2021
Publication date: 2021-03-14
Playlist: DevConfCZ 2021
Description: 
	Speaker: Ondřej Míchal



Operating systems like Fedora Silverblue, Fedora CoreOS, and many others that use OSTree or other technologies are on the rise. While solving many problems, they introduce their own set. Few of them are tackled by Toolbox, a tool for creating an interactive container-based environment.

This talk will show how Toolbox operates, how it can be used for software development and software debugging (both through command-line and GUI apps), how a toolbox-based workflow can be useful even on "classic" Linux distributions, what were the recent accomplished milestones, and what are the plans for the future development of the tool.

While knowledge of containers is very helpful to understand all concepts around Toolbox, they are not required.



Schedule: https://sched.co/gmLL
Captions: 
	00:00:02,000 --> 00:00:05,600
so i'm an information technology student

00:00:03,679 --> 00:00:07,919
at faculty of information technology at

00:00:05,600 --> 00:00:10,320
burner university of technology

00:00:07,919 --> 00:00:11,120
i'm also an intern at desktop team at

00:00:10,320 --> 00:00:14,160
red hat

00:00:11,120 --> 00:00:14,480
and i've been an intern since june 2019

00:00:14,160 --> 00:00:17,039
and

00:00:14,480 --> 00:00:18,080
it's been almost two years now time

00:00:17,039 --> 00:00:21,760
flies

00:00:18,080 --> 00:00:25,439
and among many other things i'm also

00:00:21,760 --> 00:00:28,560
a co-maintainer of toolbox

00:00:25,439 --> 00:00:31,039
so the agenda for today is i'll

00:00:28,560 --> 00:00:32,320
introduce you briefly to next gen

00:00:31,039 --> 00:00:34,880
operating systems

00:00:32,320 --> 00:00:36,320
what are containers and what actually is

00:00:34,880 --> 00:00:39,440
toolbox then we'll have

00:00:36,320 --> 00:00:42,239
some quick not really quick demo

00:00:39,440 --> 00:00:43,440
and then i'll lead you through recent

00:00:42,239 --> 00:00:47,680
accomplishments

00:00:43,440 --> 00:00:50,559
and our plans for the future of the tool

00:00:47,680 --> 00:00:51,760
so the first thing we should ask

00:00:50,559 --> 00:00:55,039
ourselves is

00:00:51,760 --> 00:00:55,440
why toolbox exists there are many tools

00:00:55,039 --> 00:00:58,000
out

00:00:55,440 --> 00:00:59,359
in the wild and why there is a yet

00:00:58,000 --> 00:01:02,239
another tool

00:00:59,359 --> 00:01:03,600
well maybe you have heard of image based

00:01:02,239 --> 00:01:06,720
operating systems

00:01:03,600 --> 00:01:08,880
maybe project atomics sounds bell

00:01:06,720 --> 00:01:10,240
or you've heard of systems like fedora

00:01:08,880 --> 00:01:13,280
silverpool core os

00:01:10,240 --> 00:01:17,840
iot or even nyx os

00:01:13,280 --> 00:01:20,720
coreos itself or its fork flat car

00:01:17,840 --> 00:01:21,759
these systems are quite different than

00:01:20,720 --> 00:01:26,000
classic

00:01:21,759 --> 00:01:28,479
operating systems and

00:01:26,000 --> 00:01:29,040
you we could describe them as immutable

00:01:28,479 --> 00:01:32,079
which is

00:01:29,040 --> 00:01:34,280
not exactly accurate and you can check

00:01:32,079 --> 00:01:37,520
out blog of colleen waters at

00:01:34,280 --> 00:01:40,799
blog.vermin.org where he has an article

00:01:37,520 --> 00:01:42,880
about this immutable term but or

00:01:40,799 --> 00:01:44,079
i will not go really in depth because

00:01:42,880 --> 00:01:47,119
that is a

00:01:44,079 --> 00:01:49,840
topic for a yet different yet another

00:01:47,119 --> 00:01:50,880
talk but i would describe them as secure

00:01:49,840 --> 00:01:54,960
reliable

00:01:50,880 --> 00:01:56,399
but clunky clunky to use and i

00:01:54,960 --> 00:01:58,399
can't say that very because i've been

00:01:56,399 --> 00:01:59,119
using those systems for almost two years

00:01:58,399 --> 00:02:03,280
now

00:01:59,119 --> 00:02:06,960
daily here's a screenshot of what

00:02:03,280 --> 00:02:10,080
um my uh from my machine

00:02:06,960 --> 00:02:12,640
where i run silver blue there is no dnf

00:02:10,080 --> 00:02:13,680
there is this tool called rpm os 3 that

00:02:12,640 --> 00:02:17,599
allows me

00:02:13,680 --> 00:02:19,440
to work with images and those images are

00:02:17,599 --> 00:02:21,360
different deployments of the system and

00:02:19,440 --> 00:02:22,319
whenever i update my machine i need to

00:02:21,360 --> 00:02:25,440
reboot

00:02:22,319 --> 00:02:28,720
and this is kind of hard let's say

00:02:25,440 --> 00:02:30,239
if i were to install quickly gcc to

00:02:28,720 --> 00:02:33,519
compile

00:02:30,239 --> 00:02:35,040
some project very quickly normally i

00:02:33,519 --> 00:02:38,080
just install the package

00:02:35,040 --> 00:02:40,319
compile delete but this would on

00:02:38,080 --> 00:02:41,280
on silver blue this would require at

00:02:40,319 --> 00:02:45,280
least

00:02:41,280 --> 00:02:47,920
at least two reboots so

00:02:45,280 --> 00:02:49,440
what's the solution containers

00:02:47,920 --> 00:02:52,000
containers they are

00:02:49,440 --> 00:02:52,720
means to isolate applications with their

00:02:52,000 --> 00:02:55,680
entire

00:02:52,720 --> 00:02:57,040
runtime environment but unlike virtual

00:02:55,680 --> 00:02:59,519
machines

00:02:57,040 --> 00:03:01,519
they are much more lightweight and part

00:02:59,519 --> 00:03:05,200
of that magic is that containers

00:03:01,519 --> 00:03:08,560
share the kernel with the whole system

00:03:05,200 --> 00:03:11,599
and the difference is very it's

00:03:08,560 --> 00:03:12,879
kind of huge instead of having a virtual

00:03:11,599 --> 00:03:16,000
machine that takes up

00:03:12,879 --> 00:03:19,519
gigabytes of of your disk and

00:03:16,000 --> 00:03:20,800
needs several hundreds of megabytes at

00:03:19,519 --> 00:03:23,120
least of ram

00:03:20,800 --> 00:03:24,400
you have a very minimal container that

00:03:23,120 --> 00:03:28,560
takes up

00:03:24,400 --> 00:03:28,560
at maximum tens of megabytes

00:03:28,799 --> 00:03:35,599
so when i say containers all of

00:03:32,080 --> 00:03:38,640
you if you are not a very

00:03:35,599 --> 00:03:39,200
huge diehard for podman you you'll ask

00:03:38,640 --> 00:03:42,480
me

00:03:39,200 --> 00:03:45,599
so it's docker right and i say

00:03:42,480 --> 00:03:48,959
oh yes but actually no

00:03:45,599 --> 00:03:50,879
and what's different well we are not

00:03:48,959 --> 00:03:53,040
really using docker

00:03:50,879 --> 00:03:54,879
but we use spot man which is a

00:03:53,040 --> 00:03:56,720
demon-less container engine for

00:03:54,879 --> 00:03:58,400
developing managing and running oci

00:03:56,720 --> 00:04:00,879
containers on linux systems

00:03:58,400 --> 00:04:01,680
yes i can read this is a description of

00:04:00,879 --> 00:04:05,280
the tool

00:04:01,680 --> 00:04:07,680
from the official side of podman i would

00:04:05,280 --> 00:04:08,640
describe it very quickly as a rare

00:04:07,680 --> 00:04:11,760
implementation

00:04:08,640 --> 00:04:12,799
of the docker clli it complements tools

00:04:11,760 --> 00:04:16,079
like builder

00:04:12,799 --> 00:04:17,759
and scopio and mainly

00:04:16,079 --> 00:04:20,560
it was implemented with ruthless

00:04:17,759 --> 00:04:22,880
containers in mind

00:04:20,560 --> 00:04:23,840
what does it mean in the past when

00:04:22,880 --> 00:04:26,880
docker

00:04:23,840 --> 00:04:30,400
showed up you had to use it as

00:04:26,880 --> 00:04:31,919
an administrator as as fruit so

00:04:30,400 --> 00:04:33,919
let's say even though you created a

00:04:31,919 --> 00:04:37,280
container that isolated

00:04:33,919 --> 00:04:40,639
the app once there was a security hole

00:04:37,280 --> 00:04:42,160
and some malicious software inside of

00:04:40,639 --> 00:04:44,560
the container got out

00:04:42,160 --> 00:04:46,000
it had access to the whole system

00:04:44,560 --> 00:04:49,120
because the container

00:04:46,000 --> 00:04:51,520
ran as fruit

00:04:49,120 --> 00:04:52,639
so if you have your service in a

00:04:51,520 --> 00:04:56,320
container

00:04:52,639 --> 00:04:58,560
that is unprivileged then

00:04:56,320 --> 00:05:00,560
even if that soft if that malicious

00:04:58,560 --> 00:05:03,759
software gets out

00:05:00,560 --> 00:05:07,039
it will not have greater privileges

00:05:03,759 --> 00:05:09,520
than the unprivileged user

00:05:07,039 --> 00:05:10,880
so what is the classic use usage of

00:05:09,520 --> 00:05:13,039
containers

00:05:10,880 --> 00:05:14,880
they are mainly used as easily

00:05:13,039 --> 00:05:17,120
disposable entities

00:05:14,880 --> 00:05:18,400
so which is good for rapid development

00:05:17,120 --> 00:05:21,680
so ci

00:05:18,400 --> 00:05:24,960
cd they are used in orchestration so

00:05:21,680 --> 00:05:28,880
all of us heard about kubernetes and

00:05:24,960 --> 00:05:31,039
overall is it from services if you

00:05:28,880 --> 00:05:32,000
let's say you want to spin up a web

00:05:31,039 --> 00:05:33,840
server or

00:05:32,000 --> 00:05:35,520
a game server even let's say for

00:05:33,840 --> 00:05:37,360
minecraft

00:05:35,520 --> 00:05:38,720
you don't want to download all the

00:05:37,360 --> 00:05:41,120
binaries and whatnot

00:05:38,720 --> 00:05:42,400
you're just you find yourself an image

00:05:41,120 --> 00:05:45,440
set it up

00:05:42,400 --> 00:05:45,440
and you are good to go

00:05:46,560 --> 00:05:53,520
but this is not the only way to use

00:05:50,840 --> 00:05:55,039
containers yes they are disposable and

00:05:53,520 --> 00:05:58,720
non-interactive but

00:05:55,039 --> 00:06:01,520
can we shift it can we go around

00:05:58,720 --> 00:06:03,280
yes we can and which that is the reason

00:06:01,520 --> 00:06:06,160
why toolbox exists

00:06:03,280 --> 00:06:08,240
it's as we or as we heard it's an

00:06:06,160 --> 00:06:10,160
interactive container environment it is

00:06:08,240 --> 00:06:12,479
built on top of spotman

00:06:10,160 --> 00:06:13,360
and brings the concept of toolboxes

00:06:12,479 --> 00:06:16,240
which are

00:06:13,360 --> 00:06:18,400
pet containers and these have two

00:06:16,240 --> 00:06:21,039
attributes they are persistent

00:06:18,400 --> 00:06:22,479
and they are integrated i'll talk about

00:06:21,039 --> 00:06:26,160
these two points

00:06:22,479 --> 00:06:29,360
a bit later on so

00:06:26,160 --> 00:06:31,919
they are the solution pet containers are

00:06:29,360 --> 00:06:34,000
toolboxes and they are the solution

00:06:31,919 --> 00:06:35,440
so imagine i have my system where it's

00:06:34,000 --> 00:06:38,080
not dnf

00:06:35,440 --> 00:06:39,759
and i need to compile something and for

00:06:38,080 --> 00:06:42,240
that i need my package manager because i

00:06:39,759 --> 00:06:46,080
trust fedor fedoras packages

00:06:42,240 --> 00:06:49,759
so i spin up i say my toolbox

00:06:46,080 --> 00:06:53,199
enter a toolbox for fedora 34.

00:06:49,759 --> 00:06:55,680
i enter and look there is dnf not unlike

00:06:53,199 --> 00:06:58,800
on my system there is dnf

00:06:55,680 --> 00:07:00,160
and with dnf i can do anything so what's

00:06:58,800 --> 00:07:02,880
a catch

00:07:00,160 --> 00:07:04,160
why everybody uses containers in a

00:07:02,880 --> 00:07:07,759
disposable manner

00:07:04,160 --> 00:07:10,880
but not the way toolbox envisions

00:07:07,759 --> 00:07:12,880
well once you create a container the

00:07:10,880 --> 00:07:15,280
setup cannot be changed

00:07:12,880 --> 00:07:16,319
a container by default is isolated and

00:07:15,280 --> 00:07:19,120
you can share with it

00:07:16,319 --> 00:07:19,840
let's say a volume a part of your file

00:07:19,120 --> 00:07:22,479
system

00:07:19,840 --> 00:07:23,280
but once you share it you cannot unshare

00:07:22,479 --> 00:07:26,639
it or share

00:07:23,280 --> 00:07:30,000
anything more and you can you can

00:07:26,639 --> 00:07:33,599
set up mount mounts entry point network

00:07:30,000 --> 00:07:36,800
set comp resource limits that list

00:07:33,599 --> 00:07:41,120
goes on and on so there is a lot of

00:07:36,800 --> 00:07:44,560
lots to configure is there a solution

00:07:41,120 --> 00:07:47,360
yes at least partially first

00:07:44,560 --> 00:07:49,199
we can mount as much as possible and

00:07:47,360 --> 00:07:52,319
then cherry pick

00:07:49,199 --> 00:07:53,039
and use a mechanism that allows dynamic

00:07:52,319 --> 00:07:55,120
change

00:07:53,039 --> 00:07:56,400
yes that's something i did not mention

00:07:55,120 --> 00:07:58,879
apart from mounts

00:07:56,400 --> 00:07:59,680
you can also set an entry point which

00:07:58,879 --> 00:08:01,680
means

00:07:59,680 --> 00:08:02,720
when you start a container there is some

00:08:01,680 --> 00:08:05,039
commands

00:08:02,720 --> 00:08:06,240
some an entry point that is executed

00:08:05,039 --> 00:08:08,400
every time

00:08:06,240 --> 00:08:09,599
a container is started that cannot be

00:08:08,400 --> 00:08:14,400
changed too

00:08:09,599 --> 00:08:16,479
but we can add there some mechanism that

00:08:14,400 --> 00:08:18,400
takes care that that is dynamic on the

00:08:16,479 --> 00:08:19,759
inside even though we don't change it on

00:08:18,400 --> 00:08:22,000
the outside

00:08:19,759 --> 00:08:24,319
so the key is the initial configuration

00:08:22,000 --> 00:08:26,560
entry and the entry point

00:08:24,319 --> 00:08:29,520
so this is something that toolbox does

00:08:26,560 --> 00:08:32,080
and as the entry point it uses itself

00:08:29,520 --> 00:08:32,560
so it calls to a toolbox binary that is

00:08:32,080 --> 00:08:35,760
shared

00:08:32,560 --> 00:08:37,279
inside of the container but that binary

00:08:35,760 --> 00:08:39,599
sits on the host machine

00:08:37,279 --> 00:08:40,640
and when we update it with updates it

00:08:39,599 --> 00:08:44,800
gets updated

00:08:40,640 --> 00:08:47,120
inside of the containers then we mount

00:08:44,800 --> 00:08:49,360
parts of the host file system let's say

00:08:47,120 --> 00:08:52,480
slash boot slash edc slash dev

00:08:49,360 --> 00:08:55,440
on and on you you can read and those

00:08:52,480 --> 00:08:56,959
mounts go under slash run slash host and

00:08:55,440 --> 00:09:00,000
if you want to work with them

00:08:56,959 --> 00:09:00,480
you simply bind mount them or assembling

00:09:00,000 --> 00:09:02,959
them

00:09:00,480 --> 00:09:03,519
inside of the container it's all up to

00:09:02,959 --> 00:09:07,040
you

00:09:03,519 --> 00:09:07,760
the resources are available apart from

00:09:07,040 --> 00:09:11,120
those

00:09:07,760 --> 00:09:13,680
toolbox takes care of setting up a user

00:09:11,120 --> 00:09:15,600
that means it maps your current user

00:09:13,680 --> 00:09:18,480
inside of the container and to make it

00:09:15,600 --> 00:09:19,279
more accessible and easy to use will

00:09:18,480 --> 00:09:22,320
remove

00:09:19,279 --> 00:09:25,120
the password

00:09:22,320 --> 00:09:25,680
let me remind you by default we use

00:09:25,120 --> 00:09:28,640
fruit

00:09:25,680 --> 00:09:29,839
we use rootless containers and through

00:09:28,640 --> 00:09:32,720
those containers

00:09:29,839 --> 00:09:33,680
will never have more privileges than the

00:09:32,720 --> 00:09:36,399
user

00:09:33,680 --> 00:09:37,360
creating the container then we also set

00:09:36,399 --> 00:09:40,560
up kerberos

00:09:37,360 --> 00:09:44,080
core dumps ctl journal on and on

00:09:40,560 --> 00:09:47,120
there are several things we do so

00:09:44,080 --> 00:09:50,959
this gives us persistence and

00:09:47,120 --> 00:09:54,080
interactivity for those of you who

00:09:50,959 --> 00:09:56,160
know podman a bit more you can check out

00:09:54,080 --> 00:09:58,000
uh this small glimpse of configuration

00:09:56,160 --> 00:09:59,600
you can see all the bind mounts that we

00:09:58,000 --> 00:10:02,480
currently do

00:09:59,600 --> 00:10:04,240
this is something i had in my in one of

00:10:02,480 --> 00:10:07,120
my containers

00:10:04,240 --> 00:10:09,440
and on the next screen on the next slide

00:10:07,120 --> 00:10:12,480
you can see the entry point

00:10:09,440 --> 00:10:13,920
you can see there is some uh there is

00:10:12,480 --> 00:10:17,440
the toolbox binary

00:10:13,920 --> 00:10:20,800
and and a neat container

00:10:17,440 --> 00:10:24,800
command that has several switches

00:10:20,800 --> 00:10:24,800
with this we can set up the container

00:10:25,839 --> 00:10:33,680
okay so that is the introduction

00:10:30,320 --> 00:10:36,880
and now the main part

00:10:33,680 --> 00:10:39,120
or the main course demos

00:10:36,880 --> 00:10:40,000
i have an extensive list of demos i want

00:10:39,120 --> 00:10:43,920
to show you

00:10:40,000 --> 00:10:47,440
so i'll switch workspaces

00:10:43,920 --> 00:10:50,079
and we can get to it so can

00:10:47,440 --> 00:10:51,519
everybody see my terminal and if i type

00:10:50,079 --> 00:10:54,320
something

00:10:51,519 --> 00:10:55,120
can you see what i'm writing or should i

00:10:54,320 --> 00:11:00,000
make it

00:10:55,120 --> 00:11:03,120
a bit bigger

00:11:00,000 --> 00:11:07,680
yes and nobody is complaining so

00:11:03,120 --> 00:11:11,120
i think we can i think we can start

00:11:07,680 --> 00:11:14,160
uh i believe you know that

00:11:11,120 --> 00:11:15,040
when you those of you who use podman and

00:11:14,160 --> 00:11:18,480
so on

00:11:15,040 --> 00:11:22,240
uh you know there is this file

00:11:18,480 --> 00:11:26,000
in slash run called container

00:11:22,240 --> 00:11:29,680
and and not cad but let's use that

00:11:26,000 --> 00:11:30,040
there is no such tool but if i were

00:11:29,680 --> 00:11:33,120
to

00:11:30,040 --> 00:11:37,279
[Music]

00:11:33,120 --> 00:11:42,560
run pawn and run and do the same

00:11:37,279 --> 00:11:45,600
run that container n

00:11:42,560 --> 00:11:48,800
i don't have the image sorry

00:11:45,600 --> 00:11:51,600
uh a different thing let's just

00:11:48,800 --> 00:11:52,560
show you toolbox itself there is this

00:11:51,600 --> 00:11:55,200
command

00:11:52,560 --> 00:11:56,480
list and you can see all my images that

00:11:55,200 --> 00:11:59,680
i have built

00:11:56,480 --> 00:12:02,880
and all my containers

00:11:59,680 --> 00:12:03,839
so i have four different images and

00:12:02,880 --> 00:12:07,279
these containers

00:12:03,839 --> 00:12:09,040
use all of those if i enter a container

00:12:07,279 --> 00:12:11,440
with just

00:12:09,040 --> 00:12:12,480
enter and because i'm on fedora row

00:12:11,440 --> 00:12:16,000
height which is

00:12:12,480 --> 00:12:19,120
35 and

00:12:16,000 --> 00:12:22,959
there is no image for 35 yet because

00:12:19,120 --> 00:12:27,279
body and koji is doing something fishy

00:12:22,959 --> 00:12:30,240
i'll enter a fedora toolbox 34

00:12:27,279 --> 00:12:30,720
and as you can see my hostname has

00:12:30,240 --> 00:12:34,079
changed

00:12:30,720 --> 00:12:37,440
it's now toolbox this indicates that

00:12:34,079 --> 00:12:40,959
i'm inside of a container so let me just

00:12:37,440 --> 00:12:44,320
check edt os release and

00:12:40,959 --> 00:12:45,760
yes i'm inside of fedora 34 and it's in

00:12:44,320 --> 00:12:49,279
container image

00:12:45,760 --> 00:12:52,320
and it's a pre release because

00:12:49,279 --> 00:12:56,240
i did not update my

00:12:52,320 --> 00:12:58,639
image after a fedora 34 was branched

00:12:56,240 --> 00:13:01,600
from row height

00:12:58,639 --> 00:13:02,560
as i was saying before there is now a

00:13:01,600 --> 00:13:06,079
slash run

00:13:02,560 --> 00:13:09,760
that container n not neff and

00:13:06,079 --> 00:13:12,639
yes there is this file and

00:13:09,760 --> 00:13:13,760
because toolbox is a bit special we also

00:13:12,639 --> 00:13:17,600
add a toolbox

00:13:13,760 --> 00:13:20,079
and file so if you use both podman

00:13:17,600 --> 00:13:22,320
and toolbox you can differentiate in

00:13:20,079 --> 00:13:25,600
your script

00:13:22,320 --> 00:13:28,639
for let's say aliases in bash

00:13:25,600 --> 00:13:31,279
what aliases you want in each different

00:13:28,639 --> 00:13:31,279
environment

00:13:33,279 --> 00:13:37,839
as an example i can show you what my

00:13:36,320 --> 00:13:40,800
batch rc

00:13:37,839 --> 00:13:41,760
looks like even though i use fish uh a

00:13:40,800 --> 00:13:45,600
batch rc

00:13:41,760 --> 00:13:47,199
will be enough there is this little

00:13:45,600 --> 00:13:49,519
block

00:13:47,199 --> 00:13:52,079
of if where i just check if the file is

00:13:49,519 --> 00:13:54,160
in and these two variables

00:13:52,079 --> 00:13:56,880
just change depending if i'm in the

00:13:54,160 --> 00:14:00,000
toolbox or not

00:13:56,880 --> 00:14:01,600
now a different demo will be with gnome

00:14:00,000 --> 00:14:03,440
builder

00:14:01,600 --> 00:14:05,040
it's a those of you who don't know

00:14:03,440 --> 00:14:07,920
builder though there is a

00:14:05,040 --> 00:14:09,440
graphical application for developing

00:14:07,920 --> 00:14:12,199
software just an ide

00:14:09,440 --> 00:14:14,480
meant primarily for developing

00:14:12,199 --> 00:14:15,199
non-graphical applications but it can be

00:14:14,480 --> 00:14:17,279
used

00:14:15,199 --> 00:14:19,199
also for different projects let's say

00:14:17,279 --> 00:14:21,760
toolbox

00:14:19,199 --> 00:14:22,320
and no on silver blue i don't have

00:14:21,760 --> 00:14:24,320
golang

00:14:22,320 --> 00:14:28,279
i don't have all the packages in

00:14:24,320 --> 00:14:29,580
installed to actually compile toolbox

00:14:28,279 --> 00:14:31,360
but

00:14:29,580 --> 00:14:34,399
[Music]

00:14:31,360 --> 00:14:36,639
builder has integration with podman

00:14:34,399 --> 00:14:38,560
and i can choose my runtime which is the

00:14:36,639 --> 00:14:41,519
goaling

00:14:38,560 --> 00:14:43,600
which is the goal in the toolbox where i

00:14:41,519 --> 00:14:46,800
have all my dependencies

00:14:43,600 --> 00:14:50,480
and let's just try to build it

00:14:46,800 --> 00:14:52,560
and as you can see we we use mezzone

00:14:50,480 --> 00:14:55,920
with ninja as the build system

00:14:52,560 --> 00:14:59,199
and it actually does its job

00:14:55,920 --> 00:14:59,920
so if you are on such a system you can

00:14:59,199 --> 00:15:02,000
install

00:14:59,920 --> 00:15:03,760
all your dependencies in a container

00:15:02,000 --> 00:15:06,959
connected to non builder

00:15:03,760 --> 00:15:06,959
and just do your work

00:15:08,000 --> 00:15:15,360
what's the time it's 1002

00:15:12,000 --> 00:15:18,720
good as in

00:15:15,360 --> 00:15:21,839
a different example would be gaming

00:15:18,720 --> 00:15:23,120
a very special game i really love is

00:15:21,839 --> 00:15:26,000
dwarf fortress

00:15:23,120 --> 00:15:27,279
maybe some of you know it and this game

00:15:26,000 --> 00:15:30,240
is bit special

00:15:27,279 --> 00:15:32,720
because it's kind of hard to play and

00:15:30,240 --> 00:15:37,279
mainly to configure

00:15:32,720 --> 00:15:40,959
but and there are graphical tools for

00:15:37,279 --> 00:15:44,639
for this but

00:15:40,959 --> 00:15:47,680
those are not really uh usable on

00:15:44,639 --> 00:15:51,120
silver blue at least that's

00:15:47,680 --> 00:15:53,759
my experience so i downloaded

00:15:51,120 --> 00:15:55,120
for fortress but i don't have lip sdl

00:15:53,759 --> 00:15:58,320
installed

00:15:55,120 --> 00:16:02,240
well i have my con i have

00:15:58,320 --> 00:16:04,480
my container i hope it works it should

00:16:02,240 --> 00:16:04,480
oh

00:16:05,759 --> 00:16:13,040
i hope i did not delete it ah

00:16:09,360 --> 00:16:16,880
it's not gaming but games

00:16:13,040 --> 00:16:18,959
and i hope it works yes it does

00:16:16,880 --> 00:16:20,320
as you can see we are again in the

00:16:18,959 --> 00:16:23,199
toolbox

00:16:20,320 --> 00:16:23,680
and my shell changed to bash because

00:16:23,199 --> 00:16:26,560
fish

00:16:23,680 --> 00:16:27,600
is not installed by default in fedora

00:16:26,560 --> 00:16:30,720
images

00:16:27,600 --> 00:16:33,839
so we toolbox automatically

00:16:30,720 --> 00:16:36,959
switches to bash so let me try to

00:16:33,839 --> 00:16:39,440
launch the game and it's actually

00:16:36,959 --> 00:16:39,440
starting

00:16:40,320 --> 00:16:44,639
and we are in game and because the game

00:16:43,440 --> 00:16:47,839
does not like

00:16:44,639 --> 00:16:48,959
multi monitor setup it's scaled all over

00:16:47,839 --> 00:16:51,120
the place

00:16:48,959 --> 00:16:53,279
but it is possible to install my

00:16:51,120 --> 00:16:54,240
dependencies in a container to play a

00:16:53,279 --> 00:16:57,040
game

00:16:54,240 --> 00:16:58,399
and because it's in the container i can

00:16:57,040 --> 00:17:00,160
just delete it later on

00:16:58,399 --> 00:17:03,279
if something changes and i can just

00:17:00,160 --> 00:17:06,400
recreate the environment

00:17:03,279 --> 00:17:09,039
uh now

00:17:06,400 --> 00:17:11,760
uh i have a point here that i wanted to

00:17:09,039 --> 00:17:15,520
show you how to get the stick trace

00:17:11,760 --> 00:17:18,640
and actually i can show you

00:17:15,520 --> 00:17:22,319
uh for this i have a special toolbox

00:17:18,640 --> 00:17:26,319
i have a fruitful toolbox prepared

00:17:22,319 --> 00:17:29,120
maybe i did not mention it but

00:17:26,319 --> 00:17:31,200
toolbox can be used in both fruitless

00:17:29,120 --> 00:17:34,799
and fruitful mode

00:17:31,200 --> 00:17:38,320
rootful mode is mainly good

00:17:34,799 --> 00:17:40,400
for debugging the host system

00:17:38,320 --> 00:17:41,760
because the capabilities inside of the

00:17:40,400 --> 00:17:46,880
container are the same

00:17:41,760 --> 00:17:50,640
as on the host so

00:17:46,880 --> 00:17:54,160
if let's say you want to connect s-trace

00:17:50,640 --> 00:17:56,880
to a running uh process you wouldn't

00:17:54,160 --> 00:17:58,640
be able to do that in a rootless

00:17:56,880 --> 00:17:59,200
container but you can do it in a route

00:17:58,640 --> 00:18:02,320
for

00:17:59,200 --> 00:18:06,080
but that i'll show a bit later

00:18:02,320 --> 00:18:09,039
on now let me enter

00:18:06,080 --> 00:18:09,919
a container that i have prepared for

00:18:09,039 --> 00:18:12,960
this

00:18:09,919 --> 00:18:14,480
and i am in a directory that is not

00:18:12,960 --> 00:18:18,559
inside of the container

00:18:14,480 --> 00:18:22,320
because normally when i run fruitless

00:18:18,559 --> 00:18:24,480
toolboxes my home directory is mapped

00:18:22,320 --> 00:18:26,400
inside of the container into the same

00:18:24,480 --> 00:18:29,760
location

00:18:26,400 --> 00:18:33,360
and that is that does not happen for

00:18:29,760 --> 00:18:34,080
fruitful uh user or for the fruitful use

00:18:33,360 --> 00:18:37,360
case

00:18:34,080 --> 00:18:37,840
because if let's say i had 10 users

00:18:37,360 --> 00:18:39,840
there

00:18:37,840 --> 00:18:41,520
i wouldn't know which one i want maps

00:18:39,840 --> 00:18:44,480
inside so we don't map

00:18:41,520 --> 00:18:45,200
anyone there and i just have to go back

00:18:44,480 --> 00:18:47,840
to the

00:18:45,200 --> 00:18:48,400
to the root so now i should be able to

00:18:47,840 --> 00:18:51,520
enter

00:18:48,400 --> 00:18:53,679
and you can see i'm the root user inside

00:18:51,520 --> 00:18:57,120
of a toolbox

00:18:53,679 --> 00:18:58,880
so let me clear this and i have a very

00:18:57,120 --> 00:19:01,280
special

00:18:58,880 --> 00:19:02,640
core dump i've been looking for it

00:19:01,280 --> 00:19:06,160
yesterday

00:19:02,640 --> 00:19:09,039
and it's gsd date time

00:19:06,160 --> 00:19:10,960
it's been crashing on me quite

00:19:09,039 --> 00:19:14,000
frequently on a raw height

00:19:10,960 --> 00:19:15,440
and it's been causing stutters of my

00:19:14,000 --> 00:19:18,480
system so

00:19:15,440 --> 00:19:21,360
let's take a look at it and what we

00:19:18,480 --> 00:19:22,840
what do we do what do we need to do to

00:19:21,360 --> 00:19:26,880
actually be able

00:19:22,840 --> 00:19:30,240
to see the back trace

00:19:26,880 --> 00:19:32,720
i'll show you my dnf history

00:19:30,240 --> 00:19:33,600
the most important part is to again

00:19:32,720 --> 00:19:36,240
install gnome

00:19:33,600 --> 00:19:37,280
settings daemon and then install the

00:19:36,240 --> 00:19:40,480
debug info

00:19:37,280 --> 00:19:44,080
and gdb at that moment when you

00:19:40,480 --> 00:19:47,280
type cordon ctl debug

00:19:44,080 --> 00:19:50,480
and oops

00:19:47,280 --> 00:19:53,520
the user

00:19:50,480 --> 00:19:56,799
live exact gsd dates time

00:19:53,520 --> 00:19:57,840
at the moment you'll get gdb and it will

00:19:56,799 --> 00:20:00,559
provide you

00:19:57,840 --> 00:20:01,120
with suggestions of dependencies you

00:20:00,559 --> 00:20:03,520
should or

00:20:01,120 --> 00:20:04,720
of debug ins info that you should

00:20:03,520 --> 00:20:07,919
install

00:20:04,720 --> 00:20:08,799
to get a meaning meaningful stick back

00:20:07,919 --> 00:20:12,960
trace

00:20:08,799 --> 00:20:15,280
so i did and that is the last

00:20:12,960 --> 00:20:17,280
part of the history that is quite long

00:20:15,280 --> 00:20:22,240
because

00:20:17,280 --> 00:20:25,840
cost cost me about a gigabyte of memory

00:20:22,240 --> 00:20:28,880
but i don't have to reboot my machine

00:20:25,840 --> 00:20:32,480
and inst and layer all those packages

00:20:28,880 --> 00:20:36,159
on top of on top of

00:20:32,480 --> 00:20:38,240
my my base system so

00:20:36,159 --> 00:20:39,440
let's open core dump and there is a

00:20:38,240 --> 00:20:42,960
bunch of

00:20:39,440 --> 00:20:45,679
not pretty stuff printed on me

00:20:42,960 --> 00:20:47,200
and i'm not proficient with gdb so i

00:20:45,679 --> 00:20:51,039
actually don't really know

00:20:47,200 --> 00:20:53,600
much about what to do about it but

00:20:51,039 --> 00:20:55,760
what i know is that i can do fret apply

00:20:53,600 --> 00:20:58,880
all back trace

00:20:55,760 --> 00:21:02,240
and actually what i see is

00:20:58,880 --> 00:21:05,039
not that bad of an output i'll

00:21:02,240 --> 00:21:06,960
zoom out a bit to be able to see

00:21:05,039 --> 00:21:10,400
something

00:21:06,960 --> 00:21:13,760
and let's see this line

00:21:10,400 --> 00:21:17,360
here there is gst timezone monitor

00:21:13,760 --> 00:21:20,320
and it checks the settings

00:21:17,360 --> 00:21:20,960
just there is something happening and

00:21:20,320 --> 00:21:23,039
actually

00:21:20,960 --> 00:21:24,159
right now i can see what is going on

00:21:23,039 --> 00:21:27,919
even though i'm

00:21:24,159 --> 00:21:31,200
inside of a container and i'm debugging

00:21:27,919 --> 00:21:32,640
a soft software that is on my host

00:21:31,200 --> 00:21:35,520
machine

00:21:32,640 --> 00:21:36,240
which is kind of dope in my eyes so

00:21:35,520 --> 00:21:39,200
while

00:21:36,240 --> 00:21:40,240
rail starts do you have any questions

00:21:39,200 --> 00:21:44,400
that i may

00:21:40,240 --> 00:21:45,679
answer well 8.3 does not have toolbox

00:21:44,400 --> 00:21:49,039
pre-installed so

00:21:45,679 --> 00:21:50,880
i had to build it locally and put it in

00:21:49,039 --> 00:21:54,640
my path

00:21:50,880 --> 00:21:57,120
but 8 rail 8.4 will have toolbox per

00:21:54,640 --> 00:21:57,120
installed

00:21:57,600 --> 00:22:05,679
let me go to fruit

00:22:00,720 --> 00:22:09,440
and i have a toolbox prepared here

00:22:05,679 --> 00:22:13,120
and in the meantime i'll launch

00:22:09,440 --> 00:22:16,799
a very simple process here

00:22:13,120 --> 00:22:19,200
and when i enter a toolbox now

00:22:16,799 --> 00:22:20,159
which by the way is not a fedora image

00:22:19,200 --> 00:22:23,760
but it is

00:22:20,159 --> 00:22:27,760
a ubi image on rel

00:22:23,760 --> 00:22:31,280
we have ubi images mapped

00:22:27,760 --> 00:22:35,600
to the system now let's say

00:22:31,280 --> 00:22:39,280
i want to get pid of watch

00:22:35,600 --> 00:22:39,679
then i can do s trace right now because

00:22:39,280 --> 00:22:43,520
i'm

00:22:39,679 --> 00:22:45,919
i'm root so let me get pid of

00:22:43,520 --> 00:22:45,919
watch

00:22:48,080 --> 00:22:50,240
p

00:22:52,880 --> 00:23:01,039
and as you can see every two seconds

00:22:57,200 --> 00:23:04,080
we get a bit of a bump

00:23:01,039 --> 00:23:05,600
because the watch is running every two

00:23:04,080 --> 00:23:08,720
seconds

00:23:05,600 --> 00:23:11,440
this wouldn't be possible in ruthless

00:23:08,720 --> 00:23:12,320
container i would just get an error

00:23:11,440 --> 00:23:14,640
message that

00:23:12,320 --> 00:23:16,080
there is that the user does not have

00:23:14,640 --> 00:23:19,440
sufficient capabilities

00:23:16,080 --> 00:23:19,840
to can to connect to people or to work

00:23:19,440 --> 00:23:23,840
with p

00:23:19,840 --> 00:23:23,840
trace okay

00:23:24,320 --> 00:23:30,480
oh just one more thing when i

00:23:27,360 --> 00:23:32,640
when i'm back to my user you can see

00:23:30,480 --> 00:23:34,559
that when i type toolbox list that shows

00:23:32,640 --> 00:23:35,840
all my images and all my containers you

00:23:34,559 --> 00:23:38,400
can see i have a rail

00:23:35,840 --> 00:23:39,520
toolbox but i also have my fedora

00:23:38,400 --> 00:23:42,000
toolbox

00:23:39,520 --> 00:23:42,880
so if i just quickly show you my os

00:23:42,000 --> 00:23:46,000
release now

00:23:42,880 --> 00:23:50,320
you can see i'm on frill 8.3 but

00:23:46,000 --> 00:23:55,039
if i enter my fedora toolbox

00:23:50,320 --> 00:23:59,279
of release 3 then

00:23:55,039 --> 00:24:02,320
if i read os release there

00:23:59,279 --> 00:24:06,799
edc os release

00:24:02,320 --> 00:24:10,080
you can see i'm inside of fedora 33.

00:24:06,799 --> 00:24:13,039
so you can even if you are running

00:24:10,080 --> 00:24:14,240
rel you can use this to get an

00:24:13,039 --> 00:24:17,520
integrated

00:24:14,240 --> 00:24:20,559
environment to compile

00:24:17,520 --> 00:24:23,760
or to do anything you you do on fedora

00:24:20,559 --> 00:24:23,760
but cannot do on rail

00:24:24,000 --> 00:24:28,960
and that is all for the demos

00:24:31,520 --> 00:24:36,480
i hope they were clear and easy to

00:24:33,840 --> 00:24:36,480
understand

00:24:36,559 --> 00:24:38,799
so

00:24:39,840 --> 00:24:45,840
before i go to the questions uh

00:24:43,760 --> 00:24:47,679
i'll just go through our recent

00:24:45,840 --> 00:24:51,039
accomplishments

00:24:47,679 --> 00:24:53,440
toolbox will be shipped in rail 8.4

00:24:51,039 --> 00:24:54,799
we allowed the brute for you use case in

00:24:53,440 --> 00:24:56,799
the past

00:24:54,799 --> 00:24:58,240
quite recent past it was not possible

00:24:56,799 --> 00:25:01,520
because we relied

00:24:58,240 --> 00:25:04,559
on a piece of software that did not work

00:25:01,520 --> 00:25:05,600
uh when invoked as root we added support

00:25:04,559 --> 00:25:09,120
for braille

00:25:05,600 --> 00:25:11,520
respectively for ubi images which also

00:25:09,120 --> 00:25:12,480
lays foundation for adding support for

00:25:11,520 --> 00:25:14,000
other distros

00:25:12,480 --> 00:25:16,000
which is something we want to do in the

00:25:14,000 --> 00:25:16,799
future to support other distros like

00:25:16,000 --> 00:25:20,559
ubuntu

00:25:16,799 --> 00:25:23,279
debian opensuse doesn't matter

00:25:20,559 --> 00:25:24,720
which image will come in our way we will

00:25:23,279 --> 00:25:26,960
try to use it

00:25:24,720 --> 00:25:29,120
we added toolbox specific tests to

00:25:26,960 --> 00:25:32,960
podman in the past it happened that

00:25:29,120 --> 00:25:36,320
some change in podman broke toolbox

00:25:32,960 --> 00:25:37,440
now this should be very or much more

00:25:36,320 --> 00:25:41,279
resilient

00:25:37,440 --> 00:25:44,080
and overall even though the tool in

00:25:41,279 --> 00:25:45,039
during the past months did not receive a

00:25:44,080 --> 00:25:48,320
lot of

00:25:45,039 --> 00:25:52,720
you you'd say uh fancy

00:25:48,320 --> 00:25:55,039
and um i lost the words

00:25:52,720 --> 00:25:57,120
a lot of new features we added a lot of

00:25:55,039 --> 00:25:58,080
polish and bug fixes and now toolbox

00:25:57,120 --> 00:26:01,120
should be much

00:25:58,080 --> 00:26:03,919
more reliable the future plans

00:26:01,120 --> 00:26:05,360
better customization you cannot really

00:26:03,919 --> 00:26:08,559
change the default

00:26:05,360 --> 00:26:10,480
behavior of toolbox which is something a

00:26:08,559 --> 00:26:12,400
lot of users complain about

00:26:10,480 --> 00:26:15,200
we hear them and we want to change that

00:26:12,400 --> 00:26:18,880
in the future we also want to make the

00:26:15,200 --> 00:26:21,039
cli user experience more intuitive

00:26:18,880 --> 00:26:22,320
because it as you could see it's not

00:26:21,039 --> 00:26:25,760
that bad

00:26:22,320 --> 00:26:26,159
but i bet you already saw and worked

00:26:25,760 --> 00:26:29,440
with

00:26:26,159 --> 00:26:32,799
which with much more uh

00:26:29,440 --> 00:26:35,360
fun to use cli tools uh

00:26:32,799 --> 00:26:36,640
we also also want to add means to invoke

00:26:35,360 --> 00:26:39,840
commands on the host

00:26:36,640 --> 00:26:41,279
let's say i open i'll imagine a scenario

00:26:39,840 --> 00:26:44,159
when i open my

00:26:41,279 --> 00:26:44,559
to my terminal and i don't get a host

00:26:44,159 --> 00:26:47,600
shell

00:26:44,559 --> 00:26:50,559
but i get a container

00:26:47,600 --> 00:26:51,440
and for this use case to work there has

00:26:50,559 --> 00:26:54,400
to be means

00:26:51,440 --> 00:26:56,000
to comfortably let's type let's say rpm

00:26:54,400 --> 00:26:59,440
os 3 if you are using

00:26:56,000 --> 00:27:01,520
silver blue or core os with that you

00:26:59,440 --> 00:27:04,559
would be able from inside of a container

00:27:01,520 --> 00:27:09,440
to control the host and of course

00:27:04,559 --> 00:27:12,320
more tests because we broke

00:27:09,440 --> 00:27:13,919
doing the way a few times fixed every

00:27:12,320 --> 00:27:17,520
time but

00:27:13,919 --> 00:27:21,919
testing is important so questions

00:27:17,520 --> 00:27:23,919
let me look at the q a and

00:27:21,919 --> 00:27:26,640
any progress on running container from

00:27:23,919 --> 00:27:30,399
inside of toolbox

00:27:26,640 --> 00:27:33,520
uh not officially

00:27:30,399 --> 00:27:38,640
and i i don't think that is

00:27:33,520 --> 00:27:42,559
a very good idea but maybe i'm wrong

00:27:38,640 --> 00:27:44,880
but no no we don't work on this

00:27:42,559 --> 00:27:47,600
uh is it possible to use the toolbox on

00:27:44,880 --> 00:27:50,240
fedora workstation what are the benefits

00:27:47,600 --> 00:27:51,440
uh yes it is possible toolbox is

00:27:50,240 --> 00:27:53,840
normally

00:27:51,440 --> 00:27:55,760
available through dnf as a package just

00:27:53,840 --> 00:27:58,240
type dnf install toolbox

00:27:55,760 --> 00:28:00,000
and you'll have two logs what are the

00:27:58,240 --> 00:28:02,000
benefits

00:28:00,000 --> 00:28:03,279
unlike on silver blue you can install

00:28:02,000 --> 00:28:06,240
all your packages

00:28:03,279 --> 00:28:08,159
with dnf on the host but let's say

00:28:06,240 --> 00:28:10,559
imagine a scenario that

00:28:08,159 --> 00:28:11,760
let's say a year ago you installed some

00:28:10,559 --> 00:28:14,880
software

00:28:11,760 --> 00:28:17,679
and you did not delete it immediately

00:28:14,880 --> 00:28:19,760
i bet that now you don't remember what

00:28:17,679 --> 00:28:22,240
packages were

00:28:19,760 --> 00:28:23,520
and now you may be thinking well if

00:28:22,240 --> 00:28:26,320
instead i

00:28:23,520 --> 00:28:28,320
used a toolbox a container where i

00:28:26,320 --> 00:28:31,279
installed all my dependencies

00:28:28,320 --> 00:28:33,600
and i had it and i have it named then i

00:28:31,279 --> 00:28:35,840
would just have to delete the container

00:28:33,600 --> 00:28:37,840
and that is the benefit on the

00:28:35,840 --> 00:28:40,240
workstation you can categorize

00:28:37,840 --> 00:28:41,679
and containerize your workflow and then

00:28:40,240 --> 00:28:43,200
just when you're done with it

00:28:41,679 --> 00:28:45,679
you just throw it away with a single

00:28:43,200 --> 00:28:50,640
command and you don't need to remember

00:28:45,679 --> 00:28:52,880
what where the specific dependencies

00:28:50,640 --> 00:28:55,360
and is there a feasible way how to

00:28:52,880 --> 00:28:57,440
automatically add fish to my toolbox and

00:28:55,360 --> 00:28:58,799
containers i know i can install them

00:28:57,440 --> 00:29:00,640
manually but i'm hoping for some

00:28:58,799 --> 00:29:02,000
integration maybe autobots of my custom

00:29:00,640 --> 00:29:05,600
container

00:29:02,000 --> 00:29:08,960
uh no not yet not yet

00:29:05,600 --> 00:29:10,480
and i wonder how that would how that

00:29:08,960 --> 00:29:13,840
could be done

00:29:10,480 --> 00:29:16,320
uh one way would be to integrate with

00:29:13,840 --> 00:29:17,120
package package managers in some way

00:29:16,320 --> 00:29:19,679
just

00:29:17,120 --> 00:29:20,399
let's say you enter a fedora container

00:29:19,679 --> 00:29:22,080
toolbox

00:29:20,399 --> 00:29:23,679
will know that it's a fedora container

00:29:22,080 --> 00:29:27,679
it can use dnf

00:29:23,679 --> 00:29:31,039
or in ubuntu or debian it can use apt

00:29:27,679 --> 00:29:34,320
that is one way but considering the size

00:29:31,039 --> 00:29:34,799
of the project and the staff i don't

00:29:34,320 --> 00:29:38,080
think that

00:29:34,799 --> 00:29:39,200
it's very realistic some people are

00:29:38,080 --> 00:29:42,399
using ansible

00:29:39,200 --> 00:29:45,279
playbooks some people use script

00:29:42,399 --> 00:29:46,320
and some people even create their own

00:29:45,279 --> 00:29:51,279
images

00:29:46,320 --> 00:29:53,679
so if you are proficient with

00:29:51,279 --> 00:29:55,600
images you can set it up let's say a

00:29:53,679 --> 00:29:58,399
pipeline on docker hub

00:29:55,600 --> 00:29:59,200
and rebuild your own images with your

00:29:58,399 --> 00:30:04,640
own packages

00:29:59,200 --> 00:30:04,640

YouTube URL: https://www.youtube.com/watch?v=qdpg-zBvNz8


