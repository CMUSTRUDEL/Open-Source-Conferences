Title: Painting the Night Sky at Noon: Putting the "Doc" in DevDocTest - DevConf.CZ 2021
Publication date: 2021-03-14
Playlist: DevConfCZ 2021
Description: 
	Speaker: Jiri Herrmann


DevDocTest is the agile practice of creating code synchronously with the user documentation of the code, and handing over both to be tested together. This is an excellent theoretical concept, with many benefits for everyone involved. It makes the development more focused, the testing easier, the documentation more accurate, and more. However, putting all this into practice can be rather tricky, and especially in larger teams, escaping the traditional waterfall workflow requires a lot of effort, and faces many pitfalls.

This talk will briefly introduce the basics of DevDocTest, and then recount a tech writer's experience with creating user documentation in lock-step with development and testers. It will include practical tips of what worked, what turned out to be not such a good idea, and how the overall experience differed from the waterfall approach.

The ultimate aim is for the audience - and especially the documentation writers among them - to learn whether DevDocTest is a viable workflow model for their teams, and if so, then how best to go about making it a reality. 


Schedule: https://sched.co/gmLa
Captions: 
	00:00:01,680 --> 00:00:07,040
hi everyone my name is sirka

00:00:03,600 --> 00:00:10,320
and i'm a part of the technical writing

00:00:07,040 --> 00:00:13,920
team at red hat in brno my talk today

00:00:10,320 --> 00:00:16,080
is about teamwork collaboration

00:00:13,920 --> 00:00:18,720
that holy grail of software development

00:00:16,080 --> 00:00:21,520
and especially so in open source

00:00:18,720 --> 00:00:22,000
primarily though i will be focusing on

00:00:21,520 --> 00:00:24,080
where

00:00:22,000 --> 00:00:26,560
documentation and technical writers fit

00:00:24,080 --> 00:00:29,519
in all of that

00:00:26,560 --> 00:00:30,320
to be more specific i will start with

00:00:29,519 --> 00:00:32,480
outlining

00:00:30,320 --> 00:00:35,120
some of the challenges to teamwork that

00:00:32,480 --> 00:00:38,160
you may run into at one point or another

00:00:35,120 --> 00:00:38,879
when working on software then i will go

00:00:38,160 --> 00:00:41,120
over

00:00:38,879 --> 00:00:43,440
two teamwork methodologies that aim to

00:00:41,120 --> 00:00:45,600
overcome these challenges

00:00:43,440 --> 00:00:46,800
first the well established waterfall

00:00:45,600 --> 00:00:49,440
method

00:00:46,800 --> 00:00:52,320
and then a more agile variant that we

00:00:49,440 --> 00:00:54,719
call devdoctest

00:00:52,320 --> 00:00:56,960
by the way because dev doctest is a bit

00:00:54,719 --> 00:00:58,559
of a mouthful i will be abbreviating as

00:00:56,960 --> 00:01:00,960
ddt

00:00:58,559 --> 00:01:01,680
so keep in mind i'm not talking about

00:01:00,960 --> 00:01:05,119
the

00:01:01,680 --> 00:01:07,040
infamous chemical pollutant so

00:01:05,119 --> 00:01:08,880
i will describe the theoretical basics

00:01:07,040 --> 00:01:10,799
of ddt

00:01:08,880 --> 00:01:12,720
but i will also touch upon some

00:01:10,799 --> 00:01:13,360
practical downsides that could prevent

00:01:12,720 --> 00:01:16,720
you

00:01:13,360 --> 00:01:18,960
from using it successfully in your team

00:01:16,720 --> 00:01:20,479
finally i will introduce some best

00:01:18,960 --> 00:01:24,320
practices that work for us

00:01:20,479 --> 00:01:24,320
in getting the most out of ddt

00:01:24,479 --> 00:01:28,000
and because it wouldn't be a proper talk

00:01:26,080 --> 00:01:29,600
without a quote let's start off with

00:01:28,000 --> 00:01:31,920
this one

00:01:29,600 --> 00:01:33,360
funny thing is if you google for quotes

00:01:31,920 --> 00:01:36,000
about teamwork

00:01:33,360 --> 00:01:38,320
you will find very many that talk about

00:01:36,000 --> 00:01:40,240
how it makes the dream work

00:01:38,320 --> 00:01:41,920
and how it divides the task and

00:01:40,240 --> 00:01:43,680
multiplies the success

00:01:41,920 --> 00:01:45,360
and how it's generally great and all

00:01:43,680 --> 00:01:48,240
that it's true

00:01:45,360 --> 00:01:49,520
but you will find very few codes that

00:01:48,240 --> 00:01:52,640
talk about how hard

00:01:49,520 --> 00:01:55,759
it can be to actually

00:01:52,640 --> 00:01:58,079
pull off teamwork properly

00:01:55,759 --> 00:01:59,040
you see teamwork is usually not

00:01:58,079 --> 00:02:02,079
something that

00:01:59,040 --> 00:02:03,040
just happens right it's something that

00:02:02,079 --> 00:02:05,680
you have to put

00:02:03,040 --> 00:02:08,000
thought and effort into and

00:02:05,680 --> 00:02:10,000
unsurprisingly that gets harder

00:02:08,000 --> 00:02:11,760
the more people that are on your team or

00:02:10,000 --> 00:02:14,080
your project

00:02:11,760 --> 00:02:17,040
let's take a look at how that works in

00:02:14,080 --> 00:02:17,040
software development

00:02:17,120 --> 00:02:20,800
if you're flying solo work on some pet

00:02:19,360 --> 00:02:22,959
project of yours

00:02:20,800 --> 00:02:24,800
then you do the code you do the testing

00:02:22,959 --> 00:02:25,680
and you do the documentation if there is

00:02:24,800 --> 00:02:29,360
any at all

00:02:25,680 --> 00:02:32,160
which it should by the way naturally

00:02:29,360 --> 00:02:33,200
coordination is not an issue here unless

00:02:32,160 --> 00:02:36,720
your golem

00:02:33,200 --> 00:02:38,959
or something like that

00:02:36,720 --> 00:02:41,040
when you are working in a smallish team

00:02:38,959 --> 00:02:45,040
perhaps with two or three other people

00:02:41,040 --> 00:02:46,800
you are all probably a bit of everything

00:02:45,040 --> 00:02:48,239
though some might not generally be

00:02:46,800 --> 00:02:51,120
slightly better at one thing

00:02:48,239 --> 00:02:53,120
or another among the few of you it

00:02:51,120 --> 00:02:56,160
should not be a huge problem to work out

00:02:53,120 --> 00:02:56,160
how to get things done

00:02:57,200 --> 00:03:04,879
but now when your project

00:03:01,040 --> 00:03:07,599
your software thing grows in size

00:03:04,879 --> 00:03:08,080
it naturally requires more developers

00:03:07,599 --> 00:03:10,800
and

00:03:08,080 --> 00:03:12,800
probably also specialized testers to

00:03:10,800 --> 00:03:16,000
make sure all that fancy code does

00:03:12,800 --> 00:03:19,440
what it's supposed to at this point

00:03:16,000 --> 00:03:20,159
there is also probably an end user of

00:03:19,440 --> 00:03:23,360
some sort

00:03:20,159 --> 00:03:26,000
in mind that is not other developers

00:03:23,360 --> 00:03:26,799
so the documentation should follow suit

00:03:26,000 --> 00:03:29,360
and

00:03:26,799 --> 00:03:30,879
provide information that is useful but

00:03:29,360 --> 00:03:34,239
also comprehensible

00:03:30,879 --> 00:03:38,560
for those end users and that is where

00:03:34,239 --> 00:03:41,360
tech writers come in this is also where

00:03:38,560 --> 00:03:43,280
documentation or well generally

00:03:41,360 --> 00:03:43,840
communication coordination might start

00:03:43,280 --> 00:03:46,959
being

00:03:43,840 --> 00:03:48,319
a bit troublesome as it won't always be

00:03:46,959 --> 00:03:51,680
clear to everyone

00:03:48,319 --> 00:03:51,680
what needs doing and when

00:03:51,920 --> 00:03:55,439
finally when you reach the highest level

00:03:53,840 --> 00:03:57,280
of project complexity which is

00:03:55,439 --> 00:03:58,720
usually what happens at the corporate

00:03:57,280 --> 00:04:02,799
level for instance

00:03:58,720 --> 00:04:05,200
it mayhem almost developers have their

00:04:02,799 --> 00:04:05,920
specialized teams and sub teams with

00:04:05,200 --> 00:04:07,760
leads

00:04:05,920 --> 00:04:10,879
product managers program managers and so

00:04:07,760 --> 00:04:11,920
on your end users probably require a lot

00:04:10,879 --> 00:04:13,760
of attention

00:04:11,920 --> 00:04:16,320
so customer support and sales

00:04:13,760 --> 00:04:19,120
specialists come into the picture

00:04:16,320 --> 00:04:20,479
testing is of course a lot bigger deal

00:04:19,120 --> 00:04:23,199
and there is probably a specialized

00:04:20,479 --> 00:04:25,919
quality engineering team to do it

00:04:23,199 --> 00:04:28,000
with its own structure of course finally

00:04:25,919 --> 00:04:30,720
pretty much that goes

00:04:28,000 --> 00:04:32,720
uh pretty much the same goes also for

00:04:30,720 --> 00:04:35,040
documentation

00:04:32,720 --> 00:04:35,919
the problem is to get things done on

00:04:35,040 --> 00:04:38,639
this level

00:04:35,919 --> 00:04:40,639
all these people have to be on the same

00:04:38,639 --> 00:04:45,600
ish page about what to attend to

00:04:40,639 --> 00:04:48,080
how and when which can get pretty messy

00:04:45,600 --> 00:04:50,160
to tackle this complexity there are

00:04:48,080 --> 00:04:53,199
multiple approaches to collaboration in

00:04:50,160 --> 00:04:55,280
cross-functional teams like that perhaps

00:04:53,199 --> 00:04:57,840
the most tried and tested is

00:04:55,280 --> 00:05:00,320
and arguably the most widespread also is

00:04:57,840 --> 00:05:01,759
the waterfall method

00:05:00,320 --> 00:05:03,919
i'm sure this doesn't need a lot of

00:05:01,759 --> 00:05:05,680
introduction it's a no-nonsense

00:05:03,919 --> 00:05:07,280
intuitive process based on sequential

00:05:05,680 --> 00:05:09,199
progression

00:05:07,280 --> 00:05:11,199
i do my thing then you do your thing

00:05:09,199 --> 00:05:14,720
then he does his thing

00:05:11,199 --> 00:05:18,080
and and so on but

00:05:14,720 --> 00:05:19,840
the problem with this is that it tends

00:05:18,080 --> 00:05:21,199
to drag on for a long time especially in

00:05:19,840 --> 00:05:24,240
larger teams

00:05:21,199 --> 00:05:24,880
oftentimes this also means that towards

00:05:24,240 --> 00:05:27,680
the end

00:05:24,880 --> 00:05:28,240
of the release cycle there is a lot of

00:05:27,680 --> 00:05:30,639
work

00:05:28,240 --> 00:05:32,240
left especially for testers and

00:05:30,639 --> 00:05:35,520
documentation

00:05:32,240 --> 00:05:37,840
that results in crunch time meaning uh

00:05:35,520 --> 00:05:38,720
long hours of being overloaded and

00:05:37,840 --> 00:05:41,840
stressed

00:05:38,720 --> 00:05:42,479
or it can result in delays but honestly

00:05:41,840 --> 00:05:45,600
it's uh

00:05:42,479 --> 00:05:47,520
it's a bit of both usually so

00:05:45,600 --> 00:05:49,199
this has also been described as the

00:05:47,520 --> 00:05:51,280
hockey stick problem

00:05:49,199 --> 00:05:54,639
based on the visual representation of

00:05:51,280 --> 00:05:54,639
the workload as you can see here

00:05:56,080 --> 00:05:59,680
all right to illustrate let's take a

00:05:57,919 --> 00:06:03,120
look at the sample waterfall

00:05:59,680 --> 00:06:06,080
cycle first based

00:06:03,120 --> 00:06:06,479
on data from customer support and sales

00:06:06,080 --> 00:06:08,880
the

00:06:06,479 --> 00:06:12,319
pm and the dev lead plan to address a

00:06:08,880 --> 00:06:12,319
specific user problem

00:06:12,479 --> 00:06:17,520
they task the developer with working on

00:06:15,600 --> 00:06:20,560
the code

00:06:17,520 --> 00:06:25,600
and when that is done

00:06:20,560 --> 00:06:25,600
qe ensures that the code works properly

00:06:25,919 --> 00:06:29,600
afterwards it's time for the writer to

00:06:28,960 --> 00:06:31,360
step in

00:06:29,600 --> 00:06:33,280
and create some user-facing

00:06:31,360 --> 00:06:35,840
documentation

00:06:33,280 --> 00:06:37,120
to do that however they usually need the

00:06:35,840 --> 00:06:39,440
assistance of an

00:06:37,120 --> 00:06:40,319
of a subject matter expert an sme and

00:06:39,440 --> 00:06:44,560
that's usually

00:06:40,319 --> 00:06:47,600
the developer however at this point

00:06:44,560 --> 00:06:51,360
the dev has likely moved on to something

00:06:47,600 --> 00:06:54,000
else and probably does not

00:06:51,360 --> 00:06:56,479
even remember much about the thing that

00:06:54,000 --> 00:06:58,319
is being documented

00:06:56,479 --> 00:07:00,160
still let's say that they part through

00:06:58,319 --> 00:07:02,160
somehow and now

00:07:00,160 --> 00:07:03,360
the document should be reviewed by a

00:07:02,160 --> 00:07:06,479
tester a

00:07:03,360 --> 00:07:09,680
quality engineer to ensure that

00:07:06,479 --> 00:07:10,479
the the described instructions are

00:07:09,680 --> 00:07:14,479
consistent

00:07:10,479 --> 00:07:14,479
with what the software actually does

00:07:14,800 --> 00:07:21,440
but uh the tester is probably busy with

00:07:17,840 --> 00:07:21,440
preparation of the impending release

00:07:21,520 --> 00:07:27,280
uh and might even have time for

00:07:24,800 --> 00:07:30,560
uh some some very rudimentary sanity

00:07:27,280 --> 00:07:33,039
testing if anything at all

00:07:30,560 --> 00:07:34,400
finally when they're done with the tests

00:07:33,039 --> 00:07:35,759
and the documentation is therefore

00:07:34,400 --> 00:07:37,599
received the

00:07:35,759 --> 00:07:38,880
green light from all the necessary

00:07:37,599 --> 00:07:42,479
stakeholders

00:07:38,880 --> 00:07:45,520
it might very well be far too late

00:07:42,479 --> 00:07:46,160
or the people involved have clocked in

00:07:45,520 --> 00:07:49,360
dozens

00:07:46,160 --> 00:07:53,680
of overtime hours so

00:07:49,360 --> 00:07:53,680
things get done but it's not ideal

00:07:54,800 --> 00:07:58,000
the traditional counter points to agile

00:07:57,599 --> 00:08:01,280
sorry

00:07:58,000 --> 00:08:04,639
the counterpart the counterpoint to

00:08:01,280 --> 00:08:06,240
waterfall is agile nevertheless

00:08:04,639 --> 00:08:08,560
every implementation of agile is

00:08:06,240 --> 00:08:09,919
slightly different and my team was no

00:08:08,560 --> 00:08:11,680
exception

00:08:09,919 --> 00:08:13,280
because it was not really viable for us

00:08:11,680 --> 00:08:16,400
to jump fully

00:08:13,280 --> 00:08:17,440
into the uh onto the bandwagon that is

00:08:16,400 --> 00:08:19,280
agile

00:08:17,440 --> 00:08:20,879
we came up with a bit of a hybrid that

00:08:19,280 --> 00:08:24,160
we call devdoc test

00:08:20,879 --> 00:08:28,160
or again ddt

00:08:24,160 --> 00:08:31,440
so the essence of a ddt workflow is

00:08:28,160 --> 00:08:32,719
that documentation and test plans are

00:08:31,440 --> 00:08:35,279
put together

00:08:32,719 --> 00:08:36,880
synchronously with the code rather than

00:08:35,279 --> 00:08:39,360
after it

00:08:36,880 --> 00:08:40,159
this aims to make creating and reviewing

00:08:39,360 --> 00:08:43,519
documentation

00:08:40,159 --> 00:08:44,480
easier for both the writer and also the

00:08:43,519 --> 00:08:47,120
subject matter

00:08:44,480 --> 00:08:48,959
experts involved and also to make

00:08:47,120 --> 00:08:52,320
testing more efficient

00:08:48,959 --> 00:08:55,440
for your quality engineers

00:08:52,320 --> 00:08:58,000
ultimately the intended effect is

00:08:55,440 --> 00:08:59,360
quite simply better results and more

00:08:58,000 --> 00:09:04,480
predictability

00:08:59,360 --> 00:09:04,480
with less crunch and no hockey stick

00:09:05,200 --> 00:09:11,200
so let's see how a ddt cycle would

00:09:07,200 --> 00:09:13,279
differ from what we saw in waterfall

00:09:11,200 --> 00:09:14,320
the first big difference is that testers

00:09:13,279 --> 00:09:17,360
and writers are

00:09:14,320 --> 00:09:20,320
present in the planning phase

00:09:17,360 --> 00:09:21,680
this helps them scope the user stories

00:09:20,320 --> 00:09:24,880
much earlier

00:09:21,680 --> 00:09:27,519
and be better prepared for them

00:09:24,880 --> 00:09:29,040
afterwards comes the most important part

00:09:27,519 --> 00:09:32,000
which is also called the ddt

00:09:29,040 --> 00:09:33,040
phase the dog test phase during this

00:09:32,000 --> 00:09:37,040
phase

00:09:33,040 --> 00:09:39,920
the testers and writers work in lockstep

00:09:37,040 --> 00:09:40,320
with the developers and they prepare a

00:09:39,920 --> 00:09:44,240
test

00:09:40,320 --> 00:09:46,880
test plan and write the documentation

00:09:44,240 --> 00:09:49,360
respectively while the code is being

00:09:46,880 --> 00:09:52,399
created

00:09:49,360 --> 00:09:54,160
all this they can actively cooperate in

00:09:52,399 --> 00:09:56,640
shaping the software as it is being

00:09:54,160 --> 00:09:56,640
developed

00:09:56,880 --> 00:10:01,760
for example testers can point out

00:09:59,680 --> 00:10:04,320
problematic code interactions

00:10:01,760 --> 00:10:06,000
while writers can suggest improvements

00:10:04,320 --> 00:10:08,160
for usability based on their own

00:10:06,000 --> 00:10:11,440
experience

00:10:08,160 --> 00:10:14,880
when this phase is done testers can then

00:10:11,440 --> 00:10:16,320
follow the created documentation to test

00:10:14,880 --> 00:10:19,519
the software

00:10:16,320 --> 00:10:22,640
which means they review both the docs

00:10:19,519 --> 00:10:26,079
and the code at the same time and have

00:10:22,640 --> 00:10:26,079
an easier time doing it too

00:10:26,480 --> 00:10:31,200
as a result the overall process is

00:10:29,440 --> 00:10:33,120
faster more efficient and also give

00:10:31,200 --> 00:10:36,320
testers and writers more say

00:10:33,120 --> 00:10:38,160
in the final form of the software and at

00:10:36,320 --> 00:10:42,000
the end there is much rejoicing

00:10:38,160 --> 00:10:44,160
yay so that much at least

00:10:42,000 --> 00:10:45,600
is a theoretical high-level version of

00:10:44,160 --> 00:10:48,000
ddt

00:10:45,600 --> 00:10:50,560
but let's see how that translates into

00:10:48,000 --> 00:10:50,560
reality

00:10:51,600 --> 00:10:55,680
as a tech writer in the ddt workflow

00:10:53,839 --> 00:10:57,440
you're essentially

00:10:55,680 --> 00:11:00,640
like creating a painting of the night

00:10:57,440 --> 00:11:04,320
sky while the sun is still

00:11:00,640 --> 00:11:06,560
in its zenith shining bright you have

00:11:04,320 --> 00:11:07,839
a reasonably good idea what the night

00:11:06,560 --> 00:11:09,760
sky looks like

00:11:07,839 --> 00:11:12,160
and perhaps you even have some

00:11:09,760 --> 00:11:14,000
astronomical data about the colors

00:11:12,160 --> 00:11:15,600
shapes and positions of the heavenly

00:11:14,000 --> 00:11:18,800
bodies

00:11:15,600 --> 00:11:22,640
still your imagination has to do most of

00:11:18,800 --> 00:11:22,640
the work so you will admittedly struggle

00:11:24,000 --> 00:11:31,600
apologize i need a drink

00:11:29,120 --> 00:11:32,399
so you will still struggle it is not

00:11:31,600 --> 00:11:36,320
easy

00:11:32,399 --> 00:11:39,519
but if you do get it more or less right

00:11:36,320 --> 00:11:42,320
you will have ample time to perfect

00:11:39,519 --> 00:11:43,360
your painting when the stars eventually

00:11:42,320 --> 00:11:46,480
do appear

00:11:43,360 --> 00:11:50,079
high above also

00:11:46,480 --> 00:11:53,200
you won't have to worry about finishing

00:11:50,079 --> 00:11:57,040
your work before the day break

00:11:53,200 --> 00:12:00,480
but much like painting the stars at noon

00:11:57,040 --> 00:12:03,200
ddt may in some cases not work really

00:12:00,480 --> 00:12:05,760
well or not work properly and not just

00:12:03,200 --> 00:12:08,079
for documentation

00:12:05,760 --> 00:12:11,760
sometimes your astronomical data may

00:12:08,079 --> 00:12:13,680
turn out completely wrong

00:12:11,760 --> 00:12:15,279
you see all new code matures in

00:12:13,680 --> 00:12:17,920
development so

00:12:15,279 --> 00:12:19,440
the feature that originally got planned

00:12:17,920 --> 00:12:21,519
and that you had in mind when you

00:12:19,440 --> 00:12:23,519
started writing

00:12:21,519 --> 00:12:25,519
could end up being something utterly

00:12:23,519 --> 00:12:29,279
different or it may get

00:12:25,519 --> 00:12:31,920
de-prioritized and pushed off

00:12:29,279 --> 00:12:34,320
also from time to time it can happen

00:12:31,920 --> 00:12:37,519
that a giant meteors just comes

00:12:34,320 --> 00:12:38,560
hurtling from space and instead of the

00:12:37,519 --> 00:12:42,160
night sky you have

00:12:38,560 --> 00:12:42,800
armageddon so which is to say that

00:12:42,160 --> 00:12:46,240
that's the

00:12:42,800 --> 00:12:48,240
feature gets scrapped completely

00:12:46,240 --> 00:12:50,720
so you need to keep your astronomical

00:12:48,240 --> 00:12:53,440
data as current as possible

00:12:50,720 --> 00:12:54,639
the essence of ddt is collaborating in

00:12:53,440 --> 00:12:58,000
lockstep

00:12:54,639 --> 00:12:59,120
synchronously which is significantly

00:12:58,000 --> 00:13:01,519
more

00:12:59,120 --> 00:13:02,880
demanding in many ways than if you go

00:13:01,519 --> 00:13:05,120
sequentially

00:13:02,880 --> 00:13:06,560
you know it's no longer now it's my turn

00:13:05,120 --> 00:13:09,760
to work on the code

00:13:06,560 --> 00:13:11,680
then it's your turn to test

00:13:09,760 --> 00:13:13,360
and then it's his turn to do the

00:13:11,680 --> 00:13:16,079
documentation

00:13:13,360 --> 00:13:17,200
instead it's uh it's basically

00:13:16,079 --> 00:13:21,200
everyone's turn

00:13:17,200 --> 00:13:24,160
almost all the time

00:13:21,200 --> 00:13:26,480
and finally perhaps you're still making

00:13:24,160 --> 00:13:28,160
a painting of the sun

00:13:26,480 --> 00:13:30,320
and you cannot possibly start another

00:13:28,160 --> 00:13:32,399
painting just yet

00:13:30,320 --> 00:13:35,760
so what i mean by this is that

00:13:32,399 --> 00:13:38,000
transitioning from waterfall to ddt

00:13:35,760 --> 00:13:40,399
can be pretty tough especially if you're

00:13:38,000 --> 00:13:43,360
a right or a tester

00:13:40,399 --> 00:13:43,680
this is because you probably have a lot

00:13:43,360 --> 00:13:46,639
of

00:13:43,680 --> 00:13:48,480
backloaded work uh like left from the

00:13:46,639 --> 00:13:51,920
old system

00:13:48,480 --> 00:13:52,320
but at the same time you suddenly have

00:13:51,920 --> 00:13:55,519
to

00:13:52,320 --> 00:14:00,000
take on the very much front loaded work

00:13:55,519 --> 00:14:02,560
that is connected to ddt

00:14:00,000 --> 00:14:04,399
so this can cause long long spikes of

00:14:02,560 --> 00:14:05,440
work where the hockey stick problem just

00:14:04,399 --> 00:14:08,639
keeps going

00:14:05,440 --> 00:14:12,240
and going and going

00:14:08,639 --> 00:14:15,440
and so the effect is that

00:14:12,240 --> 00:14:18,560
contrary to what ddt is aimed at what's

00:14:15,440 --> 00:14:20,959
its goal is it actually creates a lot

00:14:18,560 --> 00:14:24,240
more work and a lot more headaches

00:14:20,959 --> 00:14:24,240
at least temporarily

00:14:24,639 --> 00:14:28,399
so as a consequence of all these

00:14:26,079 --> 00:14:31,040
pitfalls uh

00:14:28,399 --> 00:14:31,920
quite a few teams i talked to were a bit

00:14:31,040 --> 00:14:34,560
reluctant

00:14:31,920 --> 00:14:35,440
let's say to abandon what's been working

00:14:34,560 --> 00:14:40,000
reasonably

00:14:35,440 --> 00:14:43,279
well for them and moved to ddt

00:14:40,000 --> 00:14:44,720
one specific uh reaction that stuck with

00:14:43,279 --> 00:14:48,160
me was

00:14:44,720 --> 00:14:51,279
get the fudge out with this bulldozer

00:14:48,160 --> 00:14:54,560
except they didn't say fudge

00:14:51,279 --> 00:14:56,160
and bulldozer anyway

00:14:54,560 --> 00:14:57,600
when you're a writer or a tester and

00:14:56,160 --> 00:14:58,079
some of the teams you work with on a

00:14:57,600 --> 00:15:01,440
product

00:14:58,079 --> 00:15:03,600
are agile ish using ddt

00:15:01,440 --> 00:15:05,199
and some are not or are somewhere in

00:15:03,600 --> 00:15:07,440
between it basically means

00:15:05,199 --> 00:15:09,040
you are always in a crunch either

00:15:07,440 --> 00:15:09,920
because you need to be taking care of

00:15:09,040 --> 00:15:12,560
the

00:15:09,920 --> 00:15:13,040
front loaded agile work or because

00:15:12,560 --> 00:15:15,600
you're

00:15:13,040 --> 00:15:19,120
on the hockey stick and that kind of

00:15:15,600 --> 00:15:19,120
sucks if you pardon my language

00:15:19,279 --> 00:15:23,760
so to make it suck less and perhaps even

00:15:22,639 --> 00:15:27,839
make most of the

00:15:23,760 --> 00:15:27,839
ideals of ddt a reality

00:15:28,639 --> 00:15:34,320
we figured out let's say a few core

00:15:31,680 --> 00:15:38,079
tenets to stick to

00:15:34,320 --> 00:15:40,720
as a cross-functional team firstly

00:15:38,079 --> 00:15:42,240
writers as early into the planning phase

00:15:40,720 --> 00:15:44,000
as possible

00:15:42,240 --> 00:15:46,320
work with your product managers or

00:15:44,000 --> 00:15:47,440
anyone else who is in charge of the user

00:15:46,320 --> 00:15:50,240
experience

00:15:47,440 --> 00:15:52,959
and figure out the well the intended

00:15:50,240 --> 00:15:55,120
user experience

00:15:52,959 --> 00:15:56,560
what is the issue that the user is

00:15:55,120 --> 00:15:58,480
facing

00:15:56,560 --> 00:16:00,560
what would they like to achieve with the

00:15:58,480 --> 00:16:02,639
software what will the changes in the

00:16:00,560 --> 00:16:04,880
code look like in the front end and so

00:16:02,639 --> 00:16:04,880
on

00:16:05,360 --> 00:16:10,160
this will make your writing a lot easier

00:16:08,399 --> 00:16:12,240
but it will also nudge the product

00:16:10,160 --> 00:16:14,639
person to

00:16:12,240 --> 00:16:15,680
figure out the ux as thoroughly as

00:16:14,639 --> 00:16:18,560
possible

00:16:15,680 --> 00:16:18,560
which is always good

00:16:19,680 --> 00:16:23,759
this goes hand in hand with being

00:16:21,680 --> 00:16:25,199
generally in the loop

00:16:23,759 --> 00:16:26,959
if there is a major change in the

00:16:25,199 --> 00:16:29,440
development direction and the

00:16:26,959 --> 00:16:30,480
writer learns about it like six weeks

00:16:29,440 --> 00:16:32,399
later

00:16:30,480 --> 00:16:34,240
then you can't reasonably expect the

00:16:32,399 --> 00:16:37,680
documentation to be on point and

00:16:34,240 --> 00:16:40,000
on time so

00:16:37,680 --> 00:16:40,880
if you're a developer or a pm and you're

00:16:40,000 --> 00:16:42,639
using

00:16:40,880 --> 00:16:45,839
some tracking system where you can name

00:16:42,639 --> 00:16:48,320
take somebody like for instance jira

00:16:45,839 --> 00:16:52,000
keep your writers in mind and toss them

00:16:48,320 --> 00:16:52,000
align when something important happens

00:16:53,759 --> 00:16:58,399
next point if you're using a granular

00:16:56,560 --> 00:17:01,040
timebox milestone system

00:16:58,399 --> 00:17:03,360
like sprints you can try using them to

00:17:01,040 --> 00:17:04,720
keep the individual teams in strict lock

00:17:03,360 --> 00:17:07,600
step

00:17:04,720 --> 00:17:08,880
but it's easier and honestly more likely

00:17:07,600 --> 00:17:12,000
to succeed

00:17:08,880 --> 00:17:14,160
to use them for priority sorting

00:17:12,000 --> 00:17:16,000
so it doesn't have to be like the

00:17:14,160 --> 00:17:17,199
development exit of this feature is

00:17:16,000 --> 00:17:19,280
targeted at sprint

00:17:17,199 --> 00:17:21,520
10 so the documentation has to be

00:17:19,280 --> 00:17:24,559
finished at sprint 10

00:17:21,520 --> 00:17:28,000
but perhaps if development of feature a

00:17:24,559 --> 00:17:31,760
is targeted at sprint 10 and

00:17:28,000 --> 00:17:32,559
feature b as print 15 we should document

00:17:31,760 --> 00:17:35,840
feature a

00:17:32,559 --> 00:17:35,840
first right

00:17:36,640 --> 00:17:42,000
finally as i mentioned uh creating

00:17:39,440 --> 00:17:44,400
documentation stories very early

00:17:42,000 --> 00:17:45,360
can lead to them being inconsistent with

00:17:44,400 --> 00:17:49,360
what the code

00:17:45,360 --> 00:17:51,280
looks like in the end so taking part in

00:17:49,360 --> 00:17:52,400
so-called test bashes or hackathons with

00:17:51,280 --> 00:17:54,960
your testers

00:17:52,400 --> 00:17:56,160
or with your quality engineers later in

00:17:54,960 --> 00:17:58,320
the cycle

00:17:56,160 --> 00:17:59,520
can reveal many of those quibbles and

00:17:58,320 --> 00:18:01,840
also give you

00:17:59,520 --> 00:18:03,120
an opportunity to test and discuss them

00:18:01,840 --> 00:18:06,240
in real time with

00:18:03,120 --> 00:18:08,960
anyone who anybody who's attending

00:18:06,240 --> 00:18:09,440
who could be like uh also support people

00:18:08,960 --> 00:18:11,679
or

00:18:09,440 --> 00:18:13,200
it could be your pm anyone so so

00:18:11,679 --> 00:18:15,520
basically this is uh

00:18:13,200 --> 00:18:19,200
this is something for everybody to do

00:18:15,520 --> 00:18:19,200
not just writers on second thoughts

00:18:19,919 --> 00:18:23,120
now i'm well aware that none of the tips

00:18:22,559 --> 00:18:25,840
that i've

00:18:23,120 --> 00:18:27,360
talked about here are exactly

00:18:25,840 --> 00:18:29,919
groundbreaking

00:18:27,360 --> 00:18:31,679
but as i see it as a tech writer even

00:18:29,919 --> 00:18:34,960
the most complex and

00:18:31,679 --> 00:18:35,679
cumbersome methodologies should be made

00:18:34,960 --> 00:18:38,480
of small

00:18:35,679 --> 00:18:38,480
simple steps

00:18:39,200 --> 00:18:46,080
ultimately i don't think we have

00:18:43,280 --> 00:18:47,919
ddt all figured out quite yet so you can

00:18:46,080 --> 00:18:51,360
take this as an

00:18:47,919 --> 00:18:52,799
in progress experimental view of sorts

00:18:51,360 --> 00:18:54,960
perhaps you could take up the same

00:18:52,799 --> 00:18:58,400
experiment and have

00:18:54,960 --> 00:18:58,400
much better results even

00:18:58,559 --> 00:19:02,000
you know maybe ddt would make perfect

00:19:00,480 --> 00:19:03,760
sense for your team or

00:19:02,000 --> 00:19:05,360
maybe you even have no choice in the

00:19:03,760 --> 00:19:07,919
matter

00:19:05,360 --> 00:19:09,679
in either case i hope this has given you

00:19:07,919 --> 00:19:12,559
some insights into how to successfully

00:19:09,679 --> 00:19:14,480
synchronize with your developers

00:19:12,559 --> 00:19:15,600
or synchronize your developers with your

00:19:14,480 --> 00:19:18,799
tech writers

00:19:15,600 --> 00:19:21,280
and with your testers and

00:19:18,799 --> 00:19:22,559
ideally also without much of the sweat

00:19:21,280 --> 00:19:26,720
and tears that

00:19:22,559 --> 00:19:26,720
this very often can involve

00:19:27,600 --> 00:19:32,400
with that said uh i'm not sure if our

00:19:31,120 --> 00:19:35,039
time is already up

00:19:32,400 --> 00:19:35,760
so if you'd like to clarify something

00:19:35,039 --> 00:19:36,880
i'm

00:19:35,760 --> 00:19:39,280
[Music]

00:19:36,880 --> 00:19:41,760
available for questions here or later in

00:19:39,280 --> 00:19:41,760
discord

00:19:42,240 --> 00:19:50,840
thank you yoga it was a great great talk

00:19:46,240 --> 00:19:53,440
uh i don't see any questions in the chat

00:19:50,840 --> 00:19:55,120
so um probably

00:19:53,440 --> 00:19:58,400
if anyone has a question like you said

00:19:55,120 --> 00:20:01,039
you will be available in discord

00:19:58,400 --> 00:20:01,760
yes uh wait there is yeah there is one

00:20:01,039 --> 00:20:04,159
question

00:20:01,760 --> 00:20:04,880
from wendell how exactly you synchronize

00:20:04,159 --> 00:20:08,640
your knowledge

00:20:04,880 --> 00:20:08,640
with deaf and kiwi

00:20:10,480 --> 00:20:16,640
okay uh that would be probably for for

00:20:14,400 --> 00:20:17,600
another talk maybe even longer than this

00:20:16,640 --> 00:20:20,000
one

00:20:17,600 --> 00:20:20,799
uh but generally it involves you know

00:20:20,000 --> 00:20:24,080
meetings

00:20:20,799 --> 00:20:27,679
and and uh asking questions and

00:20:24,080 --> 00:20:30,480
and being uh trying to be

00:20:27,679 --> 00:20:31,520
in the loop and you know not not just

00:20:30,480 --> 00:20:34,960
relying

00:20:31,520 --> 00:20:40,080
on them keeping you in the loop because

00:20:34,960 --> 00:20:40,080
oftentimes they don't so

00:20:40,320 --> 00:20:46,080
you know i guess being proactive which

00:20:43,360 --> 00:20:48,799
i know is a bit of a buzzword but i it

00:20:46,080 --> 00:20:50,400
sums it up fairly well

00:20:48,799 --> 00:20:52,799
yes there's one more comment about that

00:20:50,400 --> 00:20:54,880
because uh when was

00:20:52,799 --> 00:20:56,559
saying that it means it seems to her

00:20:54,880 --> 00:21:00,720
that it's a lot of meetings and

00:20:56,559 --> 00:21:04,240
well yes it is right it can be yeah

00:21:00,720 --> 00:21:06,480
but given that uh it's either that or

00:21:04,240 --> 00:21:08,159
sort of being in the dark and and having

00:21:06,480 --> 00:21:10,720
to spend long hours

00:21:08,159 --> 00:21:11,840
figuring out what's actually going on

00:21:10,720 --> 00:21:14,840
it's it's uh

00:21:11,840 --> 00:21:17,840
the the lesser of the two evils i would

00:21:14,840 --> 00:21:17,840
say

00:21:18,240 --> 00:21:20,320

YouTube URL: https://www.youtube.com/watch?v=ZUA2GWgxoP8


