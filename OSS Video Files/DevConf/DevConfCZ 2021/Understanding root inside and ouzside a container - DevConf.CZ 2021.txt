Title: Understanding root inside and ouzside a container - DevConf.CZ 2021
Publication date: 2021-03-19
Playlist: DevConfCZ 2021
Description: 
	Speaker: Scott McCarty


Do you run your containers as root, or as a regular user? Itâ€™s such a deceptively simple question. You might be tempted to answer too quickly. Is the threat model really crystal clear in your mind? I have a suspicion that it might not be. This workshop is intended to help clarify.

Before you can answer the question above, you need to determine if we are talking about the container engine (Podman, Docker, CRI-O, containerd, etc), the process inside of the container (apache, postgresql, mysql, etc) or the process ID the container is mapped to (all three can be different). At first glance, this might not be obvious. Either the container engine or its sub-process in containers can be run as virtually any user. This workshop will walk through understanding root inside and outside the container so that you can better model threads, risks and mitigation with containers. 


Schedule: https://sched.co/gmSP
Captions: 
	00:00:01,599 --> 00:00:03,840
good morning it is friday i am quite

00:00:03,120 --> 00:00:06,080
happy well

00:00:03,840 --> 00:00:07,600
morning for you wait morning for me

00:00:06,080 --> 00:00:08,080
afternoon for you guys probably beer

00:00:07,600 --> 00:00:10,639
soon

00:00:08,080 --> 00:00:11,599
for most people um but for the americans

00:00:10,639 --> 00:00:15,120
um

00:00:11,599 --> 00:00:16,800
so i am going to dig into um a question

00:00:15,120 --> 00:00:19,119
that i get a lot and like this is kind

00:00:16,800 --> 00:00:20,800
of the style of talks that i do where i

00:00:19,119 --> 00:00:22,480
where i like dig super deep into

00:00:20,800 --> 00:00:23,119
something so people can like understand

00:00:22,480 --> 00:00:24,720
it

00:00:23,119 --> 00:00:26,400
so that then they can use their own

00:00:24,720 --> 00:00:27,680
architecture brain to like build things

00:00:26,400 --> 00:00:28,720
the way they want and actually get the

00:00:27,680 --> 00:00:31,199
results they want

00:00:28,720 --> 00:00:32,880
so like like most people that were

00:00:31,199 --> 00:00:34,480
systems for a long time like i have to

00:00:32,880 --> 00:00:35,840
understand how something works so i can

00:00:34,480 --> 00:00:38,000
build it the right way and

00:00:35,840 --> 00:00:38,879
and i always get these questions of like

00:00:38,000 --> 00:00:40,719
like

00:00:38,879 --> 00:00:43,120
how does root work in the container why

00:00:40,719 --> 00:00:45,760
does user name spaces work like how does

00:00:43,120 --> 00:00:47,120
how does users work and i basically came

00:00:45,760 --> 00:00:48,239
with a system i was actually chatting

00:00:47,120 --> 00:00:51,520
with vincent uh

00:00:48,239 --> 00:00:51,920
bats at devconf us like maybe 18 months

00:00:51,520 --> 00:00:54,399
ago

00:00:51,920 --> 00:00:55,120
and we brainstormed this and i imagine

00:00:54,399 --> 00:00:57,280
in my brain

00:00:55,120 --> 00:00:59,199
a chart that would explain basically

00:00:57,280 --> 00:01:01,199
this um to people like

00:00:59,199 --> 00:01:02,480
i i was like oh this will be the easiest

00:01:01,199 --> 00:01:03,280
way to describe it to people like i

00:01:02,480 --> 00:01:04,960
could show them

00:01:03,280 --> 00:01:06,400
root outside the container root inside

00:01:04,960 --> 00:01:08,799
the container you know

00:01:06,400 --> 00:01:10,640
root outside user inside user outside

00:01:08,799 --> 00:01:12,000
and user inside

00:01:10,640 --> 00:01:13,760
and then just to cut to the chase we

00:01:12,000 --> 00:01:15,600
really want the bottom right box like in

00:01:13,760 --> 00:01:17,520
a perfect world we want defense in depth

00:01:15,600 --> 00:01:18,799
at as many layers of security as we can

00:01:17,520 --> 00:01:20,320
so we want to use a user in the

00:01:18,799 --> 00:01:22,240
container and a user outside

00:01:20,320 --> 00:01:23,439
to run the actual container engine but

00:01:22,240 --> 00:01:24,080
i'm going to demo this and dig a little

00:01:23,439 --> 00:01:25,759
bit deeper

00:01:24,080 --> 00:01:27,600
but then i realized this actually isn't

00:01:25,759 --> 00:01:29,280
enough because then people ask you well

00:01:27,600 --> 00:01:31,600
what about dash dash privileged

00:01:29,280 --> 00:01:33,600
so i jokingly have i have this talk out

00:01:31,600 --> 00:01:36,479
longer and longer and longer

00:01:33,600 --> 00:01:36,960
um but actually with this i am going to

00:01:36,479 --> 00:01:39,439
jump

00:01:36,960 --> 00:01:40,479
right into the first demo so i want you

00:01:39,439 --> 00:01:42,880
guys to kind of

00:01:40,479 --> 00:01:44,479
dig into this deeply and understand so i

00:01:42,880 --> 00:01:45,920
figured it was easier to script so i

00:01:44,479 --> 00:01:46,240
would not screw this up and forget these

00:01:45,920 --> 00:01:48,799
but

00:01:46,240 --> 00:01:49,520
first i'm going to show you root um

00:01:48,799 --> 00:01:52,000
outside

00:01:49,520 --> 00:01:53,119
of the container with a who am i so like

00:01:52,000 --> 00:01:54,640
the who am i command if you're not

00:01:53,119 --> 00:01:55,600
familiar it just shows you which user

00:01:54,640 --> 00:01:57,360
you're logged in as

00:01:55,600 --> 00:01:58,960
you'll see when i run the who am i it

00:01:57,360 --> 00:02:01,280
prompted me for sudo and

00:01:58,960 --> 00:02:02,960
um and now it now i'm actually executing

00:02:01,280 --> 00:02:04,479
these commands as root but um

00:02:02,960 --> 00:02:06,079
in a nutshell you'll see here i'm root

00:02:04,479 --> 00:02:08,080
outside the container what this means is

00:02:06,079 --> 00:02:09,759
i'm running podman as root so i'm

00:02:08,080 --> 00:02:11,360
running the podman command as root

00:02:09,759 --> 00:02:13,599
and then when i run pod man i run this

00:02:11,360 --> 00:02:15,760
who am i command inside the container

00:02:13,599 --> 00:02:16,959
and you'll see it's also root so like it

00:02:15,760 --> 00:02:19,360
believes it's root

00:02:16,959 --> 00:02:20,879
even inside the container um and i have

00:02:19,360 --> 00:02:23,680
a few drawings that i can show you

00:02:20,879 --> 00:02:24,480
how that works um then i'll show you

00:02:23,680 --> 00:02:26,080
later but

00:02:24,480 --> 00:02:28,080
now let's do a second one where we do

00:02:26,080 --> 00:02:29,760
like root outside the container so again

00:02:28,080 --> 00:02:30,879
we're executing podman as root

00:02:29,760 --> 00:02:33,200
but then this time we're going to

00:02:30,879 --> 00:02:34,720
execute the who am i command inside the

00:02:33,200 --> 00:02:36,800
container as a sync user

00:02:34,720 --> 00:02:37,920
you'll see this dash u sync that's like

00:02:36,800 --> 00:02:39,599
a really critical thing

00:02:37,920 --> 00:02:42,239
this is something even docker had

00:02:39,599 --> 00:02:44,560
forever um you could just execute

00:02:42,239 --> 00:02:46,160
it's kind of like the the user directive

00:02:44,560 --> 00:02:47,760
in a docker file where you tell it to

00:02:46,160 --> 00:02:48,239
execute the following commands after

00:02:47,760 --> 00:02:49,599
that

00:02:48,239 --> 00:02:51,440
as a certain user and what this does

00:02:49,599 --> 00:02:52,720
this is drops privileges right like it

00:02:51,440 --> 00:02:54,239
drops down to a

00:02:52,720 --> 00:02:56,160
regular user inside of the container

00:02:54,239 --> 00:02:58,080
instead of being root and you'll see if

00:02:56,160 --> 00:02:58,720
we execute this it shows it as the sync

00:02:58,080 --> 00:03:00,480
user

00:02:58,720 --> 00:03:03,040
you may wonder why did i choose sync i

00:03:00,480 --> 00:03:04,640
just choose sync i chose sync randomly

00:03:03,040 --> 00:03:07,040
because the sync user is one that's

00:03:04,640 --> 00:03:07,440
available inside of all container images

00:03:07,040 --> 00:03:08,800
like

00:03:07,440 --> 00:03:10,640
usually if you look at the password file

00:03:08,800 --> 00:03:11,200
there's a sync user so it's just an easy

00:03:10,640 --> 00:03:12,640
demo

00:03:11,200 --> 00:03:14,159
um i could have done it with a father

00:03:12,640 --> 00:03:15,120
linux you know added a user or something

00:03:14,159 --> 00:03:16,959
like that but i didn't want to create

00:03:15,120 --> 00:03:19,680
any kind of special container image

00:03:16,959 --> 00:03:21,360
so now let's look at a user so i'm

00:03:19,680 --> 00:03:22,800
running as father linux my user account

00:03:21,360 --> 00:03:24,560
that's logged into the system

00:03:22,800 --> 00:03:27,360
and then i'm going to execute the who am

00:03:24,560 --> 00:03:29,440
i as uh

00:03:27,360 --> 00:03:30,799
as a regular as without specifying what

00:03:29,440 --> 00:03:33,120
user actually

00:03:30,799 --> 00:03:35,280
i think i lied on this one yeah that's

00:03:33,120 --> 00:03:37,280
that's a lie that's not an itu

00:03:35,280 --> 00:03:38,720
um i actually copied and pasted that and

00:03:37,280 --> 00:03:40,879
so screwed that up but you'll see i'm

00:03:38,720 --> 00:03:42,720
actually not executing it with this itu

00:03:40,879 --> 00:03:44,239
this is gone imagine that but it is

00:03:42,720 --> 00:03:45,680
executing as root inside

00:03:44,239 --> 00:03:47,280
if you don't specify this and that's

00:03:45,680 --> 00:03:49,120
actually what's happening because that's

00:03:47,280 --> 00:03:50,640
that's what's happening here but um and

00:03:49,120 --> 00:03:51,680
then notice i will execute it with the

00:03:50,640 --> 00:03:53,599
itu

00:03:51,680 --> 00:03:54,959
the last time i'm father linux outside

00:03:53,599 --> 00:03:57,920
the container and then i'm

00:03:54,959 --> 00:03:58,159
sync inside and you'll see now again i'm

00:03:57,920 --> 00:04:00,640
at

00:03:58,159 --> 00:04:02,239
whom is right so now this this last

00:04:00,640 --> 00:04:03,680
option is what we want to do as much as

00:04:02,239 --> 00:04:07,360
possible and to be honest with you

00:04:03,680 --> 00:04:09,360
this is this is not easily possible in

00:04:07,360 --> 00:04:10,159
openshift for example because cryo runs

00:04:09,360 --> 00:04:12,159
as root

00:04:10,159 --> 00:04:13,280
but then you want to run the user inside

00:04:12,159 --> 00:04:16,160
as like sync

00:04:13,280 --> 00:04:17,440
um and even the the sccs the security

00:04:16,160 --> 00:04:19,519
context controls

00:04:17,440 --> 00:04:20,880
in obitu force you to run as a user

00:04:19,519 --> 00:04:21,680
inside by default those are like the

00:04:20,880 --> 00:04:23,120
restrictions

00:04:21,680 --> 00:04:24,160
and people get really tripped up by that

00:04:23,120 --> 00:04:25,759
because they're like why am i being

00:04:24,160 --> 00:04:27,919
forced to run this as a user because

00:04:25,759 --> 00:04:29,759
so many container images don't specify

00:04:27,919 --> 00:04:31,199
what user run and so then they just run

00:04:29,759 --> 00:04:34,479
as root by default

00:04:31,199 --> 00:04:35,919
and so um this is like a holdover from

00:04:34,479 --> 00:04:37,360
unix world where like

00:04:35,919 --> 00:04:39,040
you know apache would start as root and

00:04:37,360 --> 00:04:40,639
then drop privs and then run as apache

00:04:39,040 --> 00:04:42,720
like you know the sub processes would

00:04:40,639 --> 00:04:44,080
run as apache um

00:04:42,720 --> 00:04:46,080
what people don't realize the reason why

00:04:44,080 --> 00:04:47,919
we did this is because port 80 was

00:04:46,080 --> 00:04:49,919
a controlled port right and only root

00:04:47,919 --> 00:04:51,520
could connect to it but in a container

00:04:49,919 --> 00:04:53,120
it doesn't matter like you can put you

00:04:51,520 --> 00:04:54,639
can connect a port 8080

00:04:53,120 --> 00:04:56,320
and then there's always a load balancer

00:04:54,639 --> 00:04:59,040
in front so it's actually

00:04:56,320 --> 00:05:01,120
not that difficult to do you know to

00:04:59,040 --> 00:05:02,479
basically do this second version

00:05:01,120 --> 00:05:04,000
where you know where you run the

00:05:02,479 --> 00:05:04,720
container engine as root which would be

00:05:04,000 --> 00:05:06,800
cryo

00:05:04,720 --> 00:05:08,400
and then and then run you know the stuff

00:05:06,800 --> 00:05:10,320
inside as like say apache

00:05:08,400 --> 00:05:11,840
and then apache could fire up the you

00:05:10,320 --> 00:05:13,600
know on port 80 and it doesn't have to

00:05:11,840 --> 00:05:14,160
be root when it starts your import 8080

00:05:13,600 --> 00:05:15,600
i'm sorry

00:05:14,160 --> 00:05:17,520
instead of port 80 and then it doesn't

00:05:15,600 --> 00:05:18,560
have to actually be rude but but a lot

00:05:17,520 --> 00:05:21,600
of people don't do this

00:05:18,560 --> 00:05:23,039
so um i want to at least dig in that's

00:05:21,600 --> 00:05:24,560
the root of the entire talk but now i'm

00:05:23,039 --> 00:05:25,600
gonna go deeper and deeper into like

00:05:24,560 --> 00:05:27,919
each of these pieces

00:05:25,600 --> 00:05:29,520
so everything in unix is a file right

00:05:27,919 --> 00:05:31,120
but to understand root

00:05:29,520 --> 00:05:33,680
you have to really understand like what

00:05:31,120 --> 00:05:35,039
a user is um and i think people forget

00:05:33,680 --> 00:05:36,880
that there's what's

00:05:35,039 --> 00:05:38,080
you know everything in unix is a file

00:05:36,880 --> 00:05:39,440
but that's because we're exposing

00:05:38,080 --> 00:05:41,199
contents of memory as

00:05:39,440 --> 00:05:43,039
files to make it easy to poke around

00:05:41,199 --> 00:05:44,400
with like these data structures that are

00:05:43,039 --> 00:05:45,759
essentially in the kernel memory

00:05:44,400 --> 00:05:47,840
and so one of the data structures is

00:05:45,759 --> 00:05:48,880
like the process id table i'm actually

00:05:47,840 --> 00:05:49,919
that's probably one of the main data

00:05:48,880 --> 00:05:52,000
structures that matters for

00:05:49,919 --> 00:05:53,440
for unix and linux so so in this we're

00:05:52,000 --> 00:05:54,639
gonna look at like

00:05:53,440 --> 00:05:56,880
we're gonna i'm gonna use some new

00:05:54,639 --> 00:05:58,400
nomenclature um like very technical

00:05:56,880 --> 00:05:59,919
nomenclature to get your brains to work

00:05:58,400 --> 00:06:02,479
in the right way to think about this

00:05:59,919 --> 00:06:03,919
so you know we all know the ps command

00:06:02,479 --> 00:06:04,720
that's pretty common like it just shows

00:06:03,919 --> 00:06:06,400
you the processes

00:06:04,720 --> 00:06:07,840
that are running that's like the

00:06:06,400 --> 00:06:08,960
business way of saying it well it's the

00:06:07,840 --> 00:06:10,319
processes are running but like the

00:06:08,960 --> 00:06:12,080
technical way of saying is like

00:06:10,319 --> 00:06:14,160
it's dumping the contents of the process

00:06:12,080 --> 00:06:16,240
id table and then if you think of like

00:06:14,160 --> 00:06:18,479
top top is really like continually

00:06:16,240 --> 00:06:19,840
monitoring the process id table

00:06:18,479 --> 00:06:21,919
and then if you think of like digging

00:06:19,840 --> 00:06:24,400
around in slash proc that's like in

00:06:21,919 --> 00:06:26,160
manual inspecting the process id table

00:06:24,400 --> 00:06:27,440
but you're using a file to do it right

00:06:26,160 --> 00:06:29,039
like you're looking at a file

00:06:27,440 --> 00:06:30,319
that actually maps to memory and then

00:06:29,039 --> 00:06:31,039
you're gonna you know you're gonna take

00:06:30,319 --> 00:06:34,160
a look

00:06:31,039 --> 00:06:36,479
and this may sound super easy and simple

00:06:34,160 --> 00:06:37,280
but i'll bet i still show you something

00:06:36,479 --> 00:06:40,639
that you didn't know

00:06:37,280 --> 00:06:42,000
about before so let's do ps.gf everybody

00:06:40,639 --> 00:06:43,199
knows how this works this is pretty

00:06:42,000 --> 00:06:44,319
common this is like a regular

00:06:43,199 --> 00:06:46,639
again we're dumping the contents of the

00:06:44,319 --> 00:06:48,000
process id table my giant amount of

00:06:46,639 --> 00:06:51,680
google chrome tabs have

00:06:48,000 --> 00:06:53,680
like cube annoyingly in numbers of of uh

00:06:51,680 --> 00:06:55,440
of processes running um and then let's

00:06:53,680 --> 00:06:57,120
do top to like continually monitor it

00:06:55,440 --> 00:06:58,880
right like every two seconds or whatever

00:06:57,120 --> 00:07:00,000
this updates or five seconds

00:06:58,880 --> 00:07:02,000
and you see what it's doing is it's

00:07:00,000 --> 00:07:03,680
basically just constantly dumping the

00:07:02,000 --> 00:07:05,039
process id table and then showing me in

00:07:03,680 --> 00:07:06,080
a different type of screen

00:07:05,039 --> 00:07:07,840
and then if you get out of there and you

00:07:06,080 --> 00:07:09,360
just look at ls proc this is actually a

00:07:07,840 --> 00:07:11,759
file system representation

00:07:09,360 --> 00:07:12,880
you know representation of it um but

00:07:11,759 --> 00:07:14,080
then let's do

00:07:12,880 --> 00:07:15,680
something that maybe you haven't done in

00:07:14,080 --> 00:07:16,080
a long time or maybe haven't done ever

00:07:15,680 --> 00:07:18,080
let's

00:07:16,080 --> 00:07:19,120
let's actually like inspect for example

00:07:18,080 --> 00:07:22,400
in this one let's look at

00:07:19,120 --> 00:07:25,280
uh system d it's always process id one

00:07:22,400 --> 00:07:26,160
and then let's dump its status in this

00:07:25,280 --> 00:07:27,440
status file

00:07:26,160 --> 00:07:29,520
is a bunch of stuff this file is

00:07:27,440 --> 00:07:31,199
basically made to be read by humans

00:07:29,520 --> 00:07:34,479
um and this is a way to see all that

00:07:31,199 --> 00:07:36,479
information that's shown in ps and top

00:07:34,479 --> 00:07:37,520
but in a way that's a lot more like

00:07:36,479 --> 00:07:39,280
human readable and

00:07:37,520 --> 00:07:41,360
it feels more like a data structure

00:07:39,280 --> 00:07:44,160
right you're like oh there's the

00:07:41,360 --> 00:07:45,280
uid oh and then you go okay uid and gid

00:07:44,160 --> 00:07:47,199
i know what those are but wait

00:07:45,280 --> 00:07:48,319
why are there four of them and you're

00:07:47,199 --> 00:07:49,680
like oh i

00:07:48,319 --> 00:07:50,960
don't remember why there are four of

00:07:49,680 --> 00:07:52,000
them does anyone remember why there are

00:07:50,960 --> 00:07:54,319
four of them

00:07:52,000 --> 00:07:55,280
i'll i'll cheat because i already know

00:07:54,319 --> 00:07:57,120
these but like

00:07:55,280 --> 00:07:59,440
this is the real id this is the

00:07:57,120 --> 00:08:01,520
effective id this is the saved id

00:07:59,440 --> 00:08:02,639
and i'll bet like 90 of people don't

00:08:01,520 --> 00:08:04,879
remember what this one is

00:08:02,639 --> 00:08:06,319
and then file system set id which be

00:08:04,879 --> 00:08:07,199
honestly i did not even remember what

00:08:06,319 --> 00:08:08,560
the heck this one was

00:08:07,199 --> 00:08:10,479
and the good news is it's not used

00:08:08,560 --> 00:08:11,520
anymore this is like a holdover from old

00:08:10,479 --> 00:08:13,440
school unix stuff

00:08:11,520 --> 00:08:14,960
um apparently the way the linux kernel

00:08:13,440 --> 00:08:15,520
works nowadays it doesn't actually need

00:08:14,960 --> 00:08:17,120
this one

00:08:15,520 --> 00:08:18,879
and so really you only need these three

00:08:17,120 --> 00:08:20,080
but but the the fourth one's there just

00:08:18,879 --> 00:08:21,360
for system calls

00:08:20,080 --> 00:08:23,199
for software to work that's old

00:08:21,360 --> 00:08:24,800
basically um

00:08:23,199 --> 00:08:26,400
this is going to become important as we

00:08:24,800 --> 00:08:27,759
run these processes in containers i'm

00:08:26,400 --> 00:08:28,960
going to show you some hairy things

00:08:27,759 --> 00:08:31,520
that you may not have seen in a long

00:08:28,960 --> 00:08:33,599
time or maybe not even remember at all

00:08:31,520 --> 00:08:35,440
okay so let's talk through what the real

00:08:33,599 --> 00:08:37,519
id the effective id

00:08:35,440 --> 00:08:38,800
the saved id and then the file system id

00:08:37,519 --> 00:08:41,360
are so the real id

00:08:38,800 --> 00:08:42,320
never changes um that's who you actually

00:08:41,360 --> 00:08:44,000
are so like

00:08:42,320 --> 00:08:46,160
that's father linux like when i'm logged

00:08:44,000 --> 00:08:47,120
in as user 1001 which happens to be my

00:08:46,160 --> 00:08:50,399
uid on

00:08:47,120 --> 00:08:52,080
on my on my laptop um that's that never

00:08:50,399 --> 00:08:53,680
changes like a user does not have

00:08:52,080 --> 00:08:54,959
permission to change that you can never

00:08:53,680 --> 00:08:57,600
change your real id

00:08:54,959 --> 00:08:58,880
um but the effective id can be changed

00:08:57,600 --> 00:09:00,880
in a couple different ways

00:08:58,880 --> 00:09:02,720
root can actually change it itself so

00:09:00,880 --> 00:09:03,920
like it can drop privs it can drop to a

00:09:02,720 --> 00:09:05,279
different effective id

00:09:03,920 --> 00:09:07,120
so like you could start as root and then

00:09:05,279 --> 00:09:09,200
drop to apache

00:09:07,120 --> 00:09:11,279
effective id can also be set by like the

00:09:09,200 --> 00:09:12,160
set uid bit in a program so like people

00:09:11,279 --> 00:09:14,560
forget like

00:09:12,160 --> 00:09:15,519
things like new uid map and password and

00:09:14,560 --> 00:09:18,480
things like that

00:09:15,519 --> 00:09:20,480
actually are are set uid root so when we

00:09:18,480 --> 00:09:22,560
say set uid root what happens is

00:09:20,480 --> 00:09:24,080
the the the effective id when the

00:09:22,560 --> 00:09:26,720
program started is root

00:09:24,080 --> 00:09:28,560
but the real id remains father linux so

00:09:26,720 --> 00:09:30,720
a good example of this is password

00:09:28,560 --> 00:09:32,399
like the password file or the password

00:09:30,720 --> 00:09:34,000
program is pretty cool and and that that

00:09:32,399 --> 00:09:36,959
was actually one of the best ones

00:09:34,000 --> 00:09:38,560
um that actually was like a two hour uh

00:09:36,959 --> 00:09:39,839
rat hole for me to get my demo to work

00:09:38,560 --> 00:09:40,560
with password which i won't bore you

00:09:39,839 --> 00:09:41,920
with but

00:09:40,560 --> 00:09:43,519
running password in the background and

00:09:41,920 --> 00:09:45,120
not letting it fail and capturing all

00:09:43,519 --> 00:09:46,880
the output of it is actually much harder

00:09:45,120 --> 00:09:49,440
in shell script than you would think to

00:09:46,880 --> 00:09:51,760
to script a demo like this but um the

00:09:49,440 --> 00:09:55,200
saved user id now gets into

00:09:51,760 --> 00:09:57,760
um say you are like a patch

00:09:55,200 --> 00:09:59,440
say that apache process you know um

00:09:57,760 --> 00:10:01,360
needs to drop privs and then run the

00:09:59,440 --> 00:10:02,720
actual web servers as a lower

00:10:01,360 --> 00:10:05,519
you know the the threads that will

00:10:02,720 --> 00:10:07,519
handle the responses to like port 80 but

00:10:05,519 --> 00:10:10,800
then say it needs to like

00:10:07,519 --> 00:10:12,959
uh fire up a port 81 it can actually

00:10:10,800 --> 00:10:14,399
like in unix you can actually there's

00:10:12,959 --> 00:10:15,600
essentially this ability to like change

00:10:14,399 --> 00:10:17,519
your effective id

00:10:15,600 --> 00:10:18,720
but you can only set it to your saved id

00:10:17,519 --> 00:10:21,760
or your real id

00:10:18,720 --> 00:10:24,079
so um essentially if if uh

00:10:21,760 --> 00:10:25,760
you know if you were once root you have

00:10:24,079 --> 00:10:27,360
to put it in saved id because you can't

00:10:25,760 --> 00:10:29,040
go back it like won't let you go back

00:10:27,360 --> 00:10:31,200
unless you need to save it in saved id

00:10:29,040 --> 00:10:32,560
long story short it's complex but this

00:10:31,200 --> 00:10:33,680
we don't see very often this is not

00:10:32,560 --> 00:10:35,200
something you necessarily need to worry

00:10:33,680 --> 00:10:36,399
about for containers but it's important

00:10:35,200 --> 00:10:38,320
to know that this stuff's still

00:10:36,399 --> 00:10:39,920
happening inside of a container even

00:10:38,320 --> 00:10:42,320
with username spaces and i'll get

00:10:39,920 --> 00:10:42,959
we're going to go deeper into that so

00:10:42,320 --> 00:10:45,040
let me

00:10:42,959 --> 00:10:46,640
demo the effective user id just so you

00:10:45,040 --> 00:10:49,200
understand this pretty crisply

00:10:46,640 --> 00:10:50,480
um let me get out of here uh let me go

00:10:49,200 --> 00:10:54,000
into this one so who am i

00:10:50,480 --> 00:10:56,560
i'm father linux i'm a run password um

00:10:54,000 --> 00:10:58,000
ooh that's not supposed to happen i

00:10:56,560 --> 00:11:00,640
don't know why that happened

00:10:58,000 --> 00:11:02,160
let's see if this still works okay looks

00:11:00,640 --> 00:11:02,640
like it might have worked let's and then

00:11:02,160 --> 00:11:05,920
let's

00:11:02,640 --> 00:11:08,640
hope didn't work son of a gun okay we

00:11:05,920 --> 00:11:12,079
have to do this one live

00:11:08,640 --> 00:11:12,880
uh so let's run actually we will do this

00:11:12,079 --> 00:11:15,360
one live

00:11:12,880 --> 00:11:16,640
we we can recover from this i don't let

00:11:15,360 --> 00:11:18,959
one demo failure

00:11:16,640 --> 00:11:20,399
hurt me that badly uh so let me run

00:11:18,959 --> 00:11:21,839
password as father linux

00:11:20,399 --> 00:11:23,279
so i'm gonna i'm gonna let it hang in

00:11:21,839 --> 00:11:24,399
this terminal because this is actually

00:11:23,279 --> 00:11:28,079
the easiest way to do it

00:11:24,399 --> 00:11:31,519
and then i'm going to do pid of password

00:11:28,079 --> 00:11:34,959
so oops pid

00:11:31,519 --> 00:11:36,880
of password will get me the user id or

00:11:34,959 --> 00:11:37,760
the the process ids let's let's just use

00:11:36,880 --> 00:11:39,600
this one

00:11:37,760 --> 00:11:41,360
and now let's inspect this cat slash

00:11:39,600 --> 00:11:42,880
proc slash this process id

00:11:41,360 --> 00:11:44,720
and then let's look at the status of

00:11:42,880 --> 00:11:46,160
this process id so

00:11:44,720 --> 00:11:48,320
again i showed you what a status looks

00:11:46,160 --> 00:11:49,360
like oops that's the wrong one we do not

00:11:48,320 --> 00:11:51,360
want to show that one

00:11:49,360 --> 00:11:53,360
let's use the other one i don't want to

00:11:51,360 --> 00:11:56,240
get you too far ahead

00:11:53,360 --> 00:11:58,240
um let me grab this guy which i think is

00:11:56,240 --> 00:12:01,440
actually the right one

00:11:58,240 --> 00:12:02,160
so this is the right one this is the one

00:12:01,440 --> 00:12:06,240
you want to see

00:12:02,160 --> 00:12:08,480
so notice the uid here it the real id

00:12:06,240 --> 00:12:10,000
is 1001 which is father linux but the

00:12:08,480 --> 00:12:12,399
effective user id

00:12:10,000 --> 00:12:13,920
and saved state one are root so so

00:12:12,399 --> 00:12:15,360
basically what's happening is

00:12:13,920 --> 00:12:18,320
this password program has the

00:12:15,360 --> 00:12:20,959
permissions now to go at you know modify

00:12:18,320 --> 00:12:23,120
etsy password and then the password

00:12:20,959 --> 00:12:24,000
program itself is responsible for not

00:12:23,120 --> 00:12:26,880
letting

00:12:24,000 --> 00:12:28,639
my uid 1001. it has to go look at my

00:12:26,880 --> 00:12:29,440
real id and go oh i'm only going to let

00:12:28,639 --> 00:12:31,920
him change

00:12:29,440 --> 00:12:33,360
this one line in etsy password here let

00:12:31,920 --> 00:12:35,760
me cut etsy password

00:12:33,360 --> 00:12:39,120
you know the password program basically

00:12:35,760 --> 00:12:42,480
is smart enough to only let me modify

00:12:39,120 --> 00:12:46,160
modify this one where's my uid at

00:12:42,480 --> 00:12:47,760
and let's do this grab 1001.

00:12:46,160 --> 00:12:50,160
so it's smart enough to only let me

00:12:47,760 --> 00:12:51,200
modify this line that is mine right

00:12:50,160 --> 00:12:52,959
and i think a lot of people don't

00:12:51,200 --> 00:12:54,639
realize the same thing with etsy shadow

00:12:52,959 --> 00:12:56,639
so

00:12:54,639 --> 00:12:58,240
essentially we're deferring the security

00:12:56,639 --> 00:12:59,440
to this password program to like not

00:12:58,240 --> 00:13:00,800
break and if somebody programmed

00:12:59,440 --> 00:13:01,680
password wrong and there's a way to hack

00:13:00,800 --> 00:13:03,200
through password

00:13:01,680 --> 00:13:04,880
then then i'll be able to do nasty

00:13:03,200 --> 00:13:06,160
things as root with the password program

00:13:04,880 --> 00:13:08,160
which is why people don't really like

00:13:06,160 --> 00:13:09,680
set uid programs

00:13:08,160 --> 00:13:11,440
this all gets even more fun when you

00:13:09,680 --> 00:13:14,399
start running these things in containers

00:13:11,440 --> 00:13:16,399
so uh i will stop there for a second and

00:13:14,399 --> 00:13:18,839
see if anybody has any questions

00:13:16,399 --> 00:13:21,360
is everything super clear up to this

00:13:18,839 --> 00:13:24,079
point

00:13:21,360 --> 00:13:25,440
i don't hear jen breaking in so i'm

00:13:24,079 --> 00:13:28,240
going to continue now you're good

00:13:25,440 --> 00:13:29,519
we we were maybe uh suggesting that you

00:13:28,240 --> 00:13:32,160
did not do the appropriate

00:13:29,519 --> 00:13:34,320
uh homage payment to the demo gods

00:13:32,160 --> 00:13:36,399
that's about it yeah

00:13:34,320 --> 00:13:38,079
exactly know what i did well i know

00:13:36,399 --> 00:13:39,360
exactly what i did i didn't run the demo

00:13:38,079 --> 00:13:40,639
to the end where it has this clean up

00:13:39,360 --> 00:13:42,000
and so it didn't get rid of the other

00:13:40,639 --> 00:13:43,279
password so i noticed that

00:13:42,000 --> 00:13:45,199
there's a container running with the

00:13:43,279 --> 00:13:46,079
word with a password program in it and

00:13:45,199 --> 00:13:49,920
that's why

00:13:46,079 --> 00:13:52,639
it borked up but oh well um so

00:13:49,920 --> 00:13:53,440
thanks scott okay continue okay no

00:13:52,639 --> 00:13:56,639
problem

00:13:53,440 --> 00:13:58,480
so so okay so we go i

00:13:56,639 --> 00:14:00,079
i i was thinking about putting a big

00:13:58,480 --> 00:14:01,440
like x through this screen and saying

00:14:00,079 --> 00:14:02,320
this is not actually what you need to

00:14:01,440 --> 00:14:05,839
care about

00:14:02,320 --> 00:14:08,000
um you need to actually think through

00:14:05,839 --> 00:14:09,519
uh this is not actually what happens in

00:14:08,000 --> 00:14:10,720
a container but it kind of does it's

00:14:09,519 --> 00:14:12,240
kind of a lie that it doesn't

00:14:10,720 --> 00:14:13,680
but it's not the main way that a

00:14:12,240 --> 00:14:14,480
container is constrained is what i

00:14:13,680 --> 00:14:16,560
should say

00:14:14,480 --> 00:14:17,839
so this is actually the way a container

00:14:16,560 --> 00:14:19,680
works so you'll notice

00:14:17,839 --> 00:14:21,279
without user name spaces like those

00:14:19,680 --> 00:14:23,680
first containers i ran

00:14:21,279 --> 00:14:25,760
um you know when you have uid 0 in the

00:14:23,680 --> 00:14:28,720
container it's uid 0 outside

00:14:25,760 --> 00:14:30,800
if you're uid outside and you run uid 0

00:14:28,720 --> 00:14:33,120
inside the container it's still uid0 so

00:14:30,800 --> 00:14:33,600
if you break out of the selinux context

00:14:33,120 --> 00:14:36,480
or the c

00:14:33,600 --> 00:14:38,000
group or um you know the setcomp rules

00:14:36,480 --> 00:14:39,519
or if you have those disabled because

00:14:38,000 --> 00:14:41,360
you ran

00:14:39,519 --> 00:14:43,120
which we'll dig into a little bit deeper

00:14:41,360 --> 00:14:44,399
that is definitely going to this process

00:14:43,120 --> 00:14:45,839
that you run inside this container is

00:14:44,399 --> 00:14:47,680
definitely going to break out and be

00:14:45,839 --> 00:14:50,160
able to do nasty stuff as root

00:14:47,680 --> 00:14:51,920
um and this is a danger with something

00:14:50,160 --> 00:14:54,399
like docker because

00:14:51,920 --> 00:14:55,199
the actual demon always runs as root

00:14:54,399 --> 00:14:56,639
like in this

00:14:55,199 --> 00:14:58,000
scenario i'm showing you that pod man

00:14:56,639 --> 00:14:58,639
will run as root and then this will

00:14:58,000 --> 00:15:00,720
happen

00:14:58,639 --> 00:15:02,000
um but then if you run it if you run you

00:15:00,720 --> 00:15:04,720
know if i if i did that

00:15:02,000 --> 00:15:05,440
dash itu and i specified father linux it

00:15:04,720 --> 00:15:07,839
will at least

00:15:05,440 --> 00:15:09,680
run you know the uid inside the

00:15:07,839 --> 00:15:10,160
container so it protects us a little bit

00:15:09,680 --> 00:15:11,440
right

00:15:10,160 --> 00:15:13,440
but obviously if you give somebody

00:15:11,440 --> 00:15:15,040
access to podman as root they have root

00:15:13,440 --> 00:15:17,279
on the box already so like

00:15:15,040 --> 00:15:18,399
it is what it is it's not it's very well

00:15:17,279 --> 00:15:20,000
understood with podman

00:15:18,399 --> 00:15:21,279
the problem with docker is you don't

00:15:20,000 --> 00:15:22,639
necessarily realize you're giving

00:15:21,279 --> 00:15:24,320
everyone that has access

00:15:22,639 --> 00:15:26,240
to the docker socket route because the

00:15:24,320 --> 00:15:28,079
demon is always running as roots um

00:15:26,240 --> 00:15:29,360
and so it's a little bit more clear the

00:15:28,079 --> 00:15:30,880
threat model um

00:15:29,360 --> 00:15:32,320
you know the model in your brain and the

00:15:30,880 --> 00:15:34,160
reality are a lot more aligned with

00:15:32,320 --> 00:15:36,880
podman it's very easy to understand

00:15:34,160 --> 00:15:38,560
when you're giving somebody root now

00:15:36,880 --> 00:15:39,519
with username spaces and running as a

00:15:38,560 --> 00:15:42,560
regular user

00:15:39,519 --> 00:15:43,440
um which i i show here you know the the

00:15:42,560 --> 00:15:45,360
podman

00:15:43,440 --> 00:15:47,920
program itself is running as you know

00:15:45,360 --> 00:15:49,759
uid zero zero you know one zero zero one

00:15:47,920 --> 00:15:51,040
one thousand one and then if i run a

00:15:49,759 --> 00:15:53,759
container as root

00:15:51,040 --> 00:15:55,680
it will run as one thousand one and then

00:15:53,759 --> 00:15:57,839
if i run it as some other id

00:15:55,680 --> 00:15:59,279
like uid zero you know one zero zero one

00:15:57,839 --> 00:15:59,680
inside the container it will actually

00:15:59,279 --> 00:16:02,639
map

00:15:59,680 --> 00:16:03,759
to some crazy high number um this crazy

00:16:02,639 --> 00:16:06,800
high number we call this

00:16:03,759 --> 00:16:07,279
etsy sub uid and sub g id we do the same

00:16:06,800 --> 00:16:10,800
thing with

00:16:07,279 --> 00:16:14,320
group ids um and this is a

00:16:10,800 --> 00:16:15,600
an ability within the the shadow utils

00:16:14,320 --> 00:16:17,600
the kernel everything else

00:16:15,600 --> 00:16:18,800
basically all the utils within linux to

00:16:17,600 --> 00:16:20,880
basically

00:16:18,800 --> 00:16:22,480
start a process and then and then

00:16:20,880 --> 00:16:26,000
basically have these

00:16:22,480 --> 00:16:27,920
new processes run in this sub uid range

00:16:26,000 --> 00:16:29,680
as opposed to as the actual user

00:16:27,920 --> 00:16:31,199
this is username spaces in a nutshell

00:16:29,680 --> 00:16:33,040
like this is we

00:16:31,199 --> 00:16:34,720
we essentially allocate what people

00:16:33,040 --> 00:16:35,040
don't understand is like namespaces are

00:16:34,720 --> 00:16:36,639
just

00:16:35,040 --> 00:16:38,639
hiding reality and it makes it look

00:16:36,639 --> 00:16:40,399
different but in reality it's still

00:16:38,639 --> 00:16:43,279
mapping back to a real uid

00:16:40,399 --> 00:16:44,240
on the host so you still need a real uid

00:16:43,279 --> 00:16:45,519
and so outside

00:16:44,240 --> 00:16:47,600
on the host it's going to be this high

00:16:45,519 --> 00:16:50,480
port inside it's going to look like this

00:16:47,600 --> 00:16:52,160
this you know this low number the the

00:16:50,480 --> 00:16:54,320
security controls have nothing to really

00:16:52,160 --> 00:16:55,360
do with user name spaces the user names

00:16:54,320 --> 00:16:57,440
are basically more

00:16:55,360 --> 00:16:59,519
like hiding it from you so that so that

00:16:57,440 --> 00:17:01,600
it you know it looks effectively like

00:16:59,519 --> 00:17:02,720
you know 1001 for the processes that you

00:17:01,600 --> 00:17:05,679
run in this container

00:17:02,720 --> 00:17:06,319
um but it's not really totally isolated

00:17:05,679 --> 00:17:08,559
you know it's

00:17:06,319 --> 00:17:09,600
it's still running as a user id and

00:17:08,559 --> 00:17:11,760
hopefully these high

00:17:09,600 --> 00:17:13,199
port user id or high number user ids

00:17:11,760 --> 00:17:15,120
don't have very much access on the

00:17:13,199 --> 00:17:17,439
system right like that in and of itself

00:17:15,120 --> 00:17:18,559
limits a little bit um what they can do

00:17:17,439 --> 00:17:19,520
you know what kind of nasty things you

00:17:18,559 --> 00:17:22,319
can do but let's

00:17:19,520 --> 00:17:23,360
let's demo that as well let's demo user

00:17:22,319 --> 00:17:27,360
name spaces

00:17:23,360 --> 00:17:30,640
um these should not break i believe

00:17:27,360 --> 00:17:32,720
let us see all right so we're starting a

00:17:30,640 --> 00:17:33,840
container as user outside

00:17:32,720 --> 00:17:35,760
then we're going to run the password

00:17:33,840 --> 00:17:36,240
program inside so we're running password

00:17:35,760 --> 00:17:38,000
now

00:17:36,240 --> 00:17:39,360
in a container as opposed to like on the

00:17:38,000 --> 00:17:40,960
system and then we're going to use this

00:17:39,360 --> 00:17:42,320
really cool program called or the sub

00:17:40,960 --> 00:17:45,520
command called top

00:17:42,320 --> 00:17:47,600
in uh in pod man and podman top dash

00:17:45,520 --> 00:17:50,160
l basically shows you the last container

00:17:47,600 --> 00:17:53,520
that was ran and it's going to show me

00:17:50,160 --> 00:17:55,840
the user the the host user the pid

00:17:53,520 --> 00:17:57,360
the command um you can do hp id you can

00:17:55,840 --> 00:17:58,559
show you could show like the pid in the

00:17:57,360 --> 00:17:59,919
container outside the container

00:17:58,559 --> 00:18:01,840
you can do all kinds of cool things with

00:17:59,919 --> 00:18:02,320
these args but i just wanted to show

00:18:01,840 --> 00:18:04,799
basically

00:18:02,320 --> 00:18:06,640
notice if i just run a container without

00:18:04,799 --> 00:18:09,360
specifying the user as a regular user

00:18:06,640 --> 00:18:10,640
it will be root inside but the host user

00:18:09,360 --> 00:18:12,559
will always be my id

00:18:10,640 --> 00:18:14,000
so i'm basically running these this bash

00:18:12,559 --> 00:18:15,600
process and this password

00:18:14,000 --> 00:18:17,200
process and they're on the system you

00:18:15,600 --> 00:18:18,799
can like ps and grep for these

00:18:17,200 --> 00:18:20,000
see them but they just run they look

00:18:18,799 --> 00:18:20,559
like root inside the container but

00:18:20,000 --> 00:18:23,679
they're really

00:18:20,559 --> 00:18:25,679
you know regular user outside um

00:18:23,679 --> 00:18:28,000
now let's like go look inside the

00:18:25,679 --> 00:18:30,640
container at the status of this password

00:18:28,000 --> 00:18:31,039
you'll see that inside the container if

00:18:30,640 --> 00:18:33,120
we

00:18:31,039 --> 00:18:34,400
cap that file this thing really thinks

00:18:33,120 --> 00:18:35,520
it's root inside the container right

00:18:34,400 --> 00:18:37,360
like the effective

00:18:35,520 --> 00:18:39,120
the real user id the effective user id

00:18:37,360 --> 00:18:39,760
everything is root which makes sense

00:18:39,120 --> 00:18:41,039
right because

00:18:39,760 --> 00:18:42,880
it's root inside the container and it's

00:18:41,039 --> 00:18:44,080
in a namespace so it feels like it's a

00:18:42,880 --> 00:18:46,480
separate linux kernel

00:18:44,080 --> 00:18:48,080
it's like a virtualized set you know

00:18:46,480 --> 00:18:49,280
this is a virtualized data structure in

00:18:48,080 --> 00:18:50,880
the kernel basically you can think of

00:18:49,280 --> 00:18:51,520
and you're like oh okay this makes sense

00:18:50,880 --> 00:18:53,840
now

00:18:51,520 --> 00:18:57,440
um this is really password running is

00:18:53,840 --> 00:19:00,720
root but now let's do something trickier

00:18:57,440 --> 00:19:02,400
let's run the same bash let's run a

00:19:00,720 --> 00:19:04,160
container as the sync user

00:19:02,400 --> 00:19:06,880
then let's run the password command as a

00:19:04,160 --> 00:19:07,919
sync user and then let's look at it

00:19:06,880 --> 00:19:10,799
and this one's a little bit more

00:19:07,919 --> 00:19:13,280
interesting so you'll notice the the

00:19:10,799 --> 00:19:14,960
pet bash that we started was started as

00:19:13,280 --> 00:19:16,960
the sync user

00:19:14,960 --> 00:19:18,559
out you know in the container and has

00:19:16,960 --> 00:19:18,880
this high port you know high or upside

00:19:18,559 --> 00:19:21,919
not

00:19:18,880 --> 00:19:22,240
high port but a high uid number outside

00:19:21,919 --> 00:19:24,720
this

00:19:22,240 --> 00:19:26,559
this maps to my etsy sub uid and then

00:19:24,720 --> 00:19:27,679
notice this is root in the container

00:19:26,559 --> 00:19:30,960
like wait what

00:19:27,679 --> 00:19:32,480
um and then this is uid you know zero

00:19:30,960 --> 00:19:35,520
you know one zero zero one outside

00:19:32,480 --> 00:19:37,440
well remember my my i i i don't wanna

00:19:35,520 --> 00:19:39,280
cut ahead because i love this demo but

00:19:37,440 --> 00:19:40,799
let's let's now look at the status

00:19:39,280 --> 00:19:42,320
of this thing so we can see what's going

00:19:40,799 --> 00:19:45,360
on here

00:19:42,320 --> 00:19:47,760
well the effective uid you'll see

00:19:45,360 --> 00:19:49,440
is zero so it thinks it's able to

00:19:47,760 --> 00:19:50,320
operate on the password file inside of

00:19:49,440 --> 00:19:51,919
the container

00:19:50,320 --> 00:19:54,559
you know image that's mind mounted or

00:19:51,919 --> 00:19:55,039
that's mounted um and then you but it's

00:19:54,559 --> 00:19:57,280
actually

00:19:55,039 --> 00:19:58,240
the real uid is sync it would sync is

00:19:57,280 --> 00:20:01,039
always five

00:19:58,240 --> 00:20:01,840
um and so this looks a lot more like

00:20:01,039 --> 00:20:04,080
what we saw

00:20:01,840 --> 00:20:05,919
right but but it's running as the user

00:20:04,080 --> 00:20:07,679
and then it's it's hiding it but in

00:20:05,919 --> 00:20:09,600
reality it's not actually five

00:20:07,679 --> 00:20:11,120
it's actually like one thousand six you

00:20:09,600 --> 00:20:12,159
know whatever that was sixteen thousand

00:20:11,120 --> 00:20:15,520
five hundred and something

00:20:12,159 --> 00:20:17,440
whatever that high number was so

00:20:15,520 --> 00:20:19,200
when you use username spaces you can do

00:20:17,440 --> 00:20:19,520
multiple uids in the container and you

00:20:19,200 --> 00:20:21,280
can

00:20:19,520 --> 00:20:22,480
basically enact all of that normal

00:20:21,280 --> 00:20:23,679
infrastructure that would happen all the

00:20:22,480 --> 00:20:25,520
effective uid and

00:20:23,679 --> 00:20:26,480
real uid and all that jazz still happens

00:20:25,520 --> 00:20:27,280
in the container when you're doing

00:20:26,480 --> 00:20:29,919
things like

00:20:27,280 --> 00:20:30,559
you know uh password changing a password

00:20:29,919 --> 00:20:33,280
or new

00:20:30,559 --> 00:20:34,480
new gid you can actually do a nested you

00:20:33,280 --> 00:20:36,240
know user namespaces and things like

00:20:34,480 --> 00:20:37,760
that so you can use like new uid map and

00:20:36,240 --> 00:20:41,280
things like that inside

00:20:37,760 --> 00:20:41,280
um all right let's go back

00:20:42,559 --> 00:20:46,320
now uh oops i i should have been on this

00:20:46,000 --> 00:20:49,120
one

00:20:46,320 --> 00:20:50,880
but there's more so the next question

00:20:49,120 --> 00:20:51,440
that always comes up is well what about

00:20:50,880 --> 00:20:52,960
dash

00:20:51,440 --> 00:20:54,880
privilege like doesn't that give you

00:20:52,960 --> 00:20:57,840
root and you're like well

00:20:54,880 --> 00:20:58,799
not exactly i would think of it more as

00:20:57,840 --> 00:21:01,280
um

00:20:58,799 --> 00:21:02,559
what gives you root is is the user id

00:21:01,280 --> 00:21:03,760
that you specify what i just showed you

00:21:02,559 --> 00:21:05,200
there's root inside and outside the

00:21:03,760 --> 00:21:08,000
container that's what gives you root

00:21:05,200 --> 00:21:08,640
but the sc linux our friend see linux

00:21:08,000 --> 00:21:10,480
that people

00:21:08,640 --> 00:21:12,000
sometimes you know sometimes this revolt

00:21:10,480 --> 00:21:12,880
is happening against se linux that i'm

00:21:12,000 --> 00:21:14,480
showing in this picture

00:21:12,880 --> 00:21:16,080
but the the point of this picture is

00:21:14,480 --> 00:21:18,159
actually to show that like i joke that

00:21:16,080 --> 00:21:20,240
like sc linux is who you can talk to

00:21:18,159 --> 00:21:21,520
setcomp is what you can say so if you're

00:21:20,240 --> 00:21:22,720
trying to stop a revolt

00:21:21,520 --> 00:21:24,960
and you're trying to control people and

00:21:22,720 --> 00:21:26,080
you have rules in place that

00:21:24,960 --> 00:21:27,520
you know basically limit who they can

00:21:26,080 --> 00:21:28,960
talk to and what they can say it's gonna

00:21:27,520 --> 00:21:30,159
be really hard to organize a revolt

00:21:28,960 --> 00:21:32,559
against your castle

00:21:30,159 --> 00:21:34,320
so um the same is true with like a

00:21:32,559 --> 00:21:37,360
kernel right like if you can limit

00:21:34,320 --> 00:21:39,520
what um what essentially

00:21:37,360 --> 00:21:41,360
what files i can open what processes i

00:21:39,520 --> 00:21:42,080
can communicate with what ports i can

00:21:41,360 --> 00:21:43,840
communicate with

00:21:42,080 --> 00:21:46,080
and then i can also limit what they say

00:21:43,840 --> 00:21:48,240
which system calls can be executed

00:21:46,080 --> 00:21:49,840
you have a it's a lot harder for a

00:21:48,240 --> 00:21:52,799
hacker to get into your system

00:21:49,840 --> 00:21:53,520
these are on by default whether you know

00:21:52,799 --> 00:21:55,039
whether you

00:21:53,520 --> 00:21:56,240
technically se linux is on in the red

00:21:55,039 --> 00:21:56,880
hat world we don't always have set

00:21:56,240 --> 00:21:58,960
compound

00:21:56,880 --> 00:22:00,080
but these if you're using setcomp these

00:21:58,960 --> 00:22:01,280
are on all the time whether you're

00:22:00,080 --> 00:22:04,159
running rude or rootless

00:22:01,280 --> 00:22:06,400
um and so the dash dash privilege really

00:22:04,159 --> 00:22:08,000
disables these it disables the c groups

00:22:06,400 --> 00:22:08,720
that disables selinux that disables

00:22:08,000 --> 00:22:10,880
setcomp

00:22:08,720 --> 00:22:12,000
this is true whether it is running as

00:22:10,880 --> 00:22:14,799
rude or not

00:22:12,000 --> 00:22:16,799
um and now you may say okay that's weird

00:22:14,799 --> 00:22:20,720
how can a user disable se linux

00:22:16,799 --> 00:22:22,240
well we can disable we can disable the s

00:22:20,720 --> 00:22:23,919
vert like where we automatically

00:22:22,240 --> 00:22:26,640
generate a uid or

00:22:23,919 --> 00:22:27,360
a or a label a context label for the

00:22:26,640 --> 00:22:28,640
container

00:22:27,360 --> 00:22:30,799
and then that will change everything

00:22:28,640 --> 00:22:32,480
that happens so let me let me demo let

00:22:30,799 --> 00:22:33,600
me demo that because this is this is

00:22:32,480 --> 00:22:35,039
actually much harder to talk about

00:22:33,600 --> 00:22:39,039
without a demo

00:22:35,039 --> 00:22:41,440
so let's run again as root first

00:22:39,039 --> 00:22:42,960
and then let's ls roots home directory

00:22:41,440 --> 00:22:45,600
so you'll see that like

00:22:42,960 --> 00:22:47,120
it unconfined you don't get too wrapped

00:22:45,600 --> 00:22:48,080
around the axle on these things like i

00:22:47,120 --> 00:22:50,240
don't actually

00:22:48,080 --> 00:22:51,679
i only let dan dan walsh know about

00:22:50,240 --> 00:22:52,799
these i i basically just know enough to

00:22:51,679 --> 00:22:54,640
look for s zero

00:22:52,799 --> 00:22:56,480
and unconfined and then i know a few

00:22:54,640 --> 00:22:58,000
types long story sure it's pretty easy

00:22:56,480 --> 00:22:59,440
for me to pattern match and go okay

00:22:58,000 --> 00:23:01,760
remember this one like

00:22:59,440 --> 00:23:02,720
uh and then i go okay let's run a

00:23:01,760 --> 00:23:04,880
container

00:23:02,720 --> 00:23:06,240
as root but let's bind mount root's home

00:23:04,880 --> 00:23:07,600
directory into here

00:23:06,240 --> 00:23:09,679
let me give you a really important

00:23:07,600 --> 00:23:12,799
warning never

00:23:09,679 --> 00:23:14,400
ever ever set the cohen z when you're

00:23:12,799 --> 00:23:17,039
going to buy mount root's home directory

00:23:14,400 --> 00:23:18,960
you will screw up your system so there's

00:23:17,039 --> 00:23:20,240
two ways you can like now now let's see

00:23:18,960 --> 00:23:22,159
if we can ls

00:23:20,240 --> 00:23:23,440
this this root directory that we've

00:23:22,159 --> 00:23:25,440
basically bind mounted in

00:23:23,440 --> 00:23:26,799
what's executing oh we can't open it i

00:23:25,440 --> 00:23:31,039
wonder why let's

00:23:26,799 --> 00:23:32,559
ps it so if you look the bash command

00:23:31,039 --> 00:23:34,400
that is running at basically anything

00:23:32,559 --> 00:23:35,200
that runs in this container whether it's

00:23:34,400 --> 00:23:37,360
bash or not

00:23:35,200 --> 00:23:38,880
all run with this context you'll see

00:23:37,360 --> 00:23:42,240
this mcs label

00:23:38,880 --> 00:23:44,960
it's not just s0 it has a c15 c121

00:23:42,240 --> 00:23:46,720
it's also running as container t so it's

00:23:44,960 --> 00:23:47,279
a it's a constrained type that it's

00:23:46,720 --> 00:23:49,440
running as

00:23:47,279 --> 00:23:50,400
instead of an on you know it's it's a

00:23:49,440 --> 00:23:52,960
system user

00:23:50,400 --> 00:23:54,480
it's it's like these labels do not match

00:23:52,960 --> 00:23:56,559
so basically what's happening

00:23:54,480 --> 00:23:58,000
is these processes in the container

00:23:56,559 --> 00:23:59,279
cannot access this right

00:23:58,000 --> 00:24:00,559
because i didn't run with dash dash

00:23:59,279 --> 00:24:01,200
privileged i'm still rooting the

00:24:00,559 --> 00:24:02,880
container

00:24:01,200 --> 00:24:04,640
i'm still rude outside the container i

00:24:02,880 --> 00:24:06,240
still can't talk to root like i still

00:24:04,640 --> 00:24:09,360
can't read root's home directory

00:24:06,240 --> 00:24:11,600
because se linux is blocking it um

00:24:09,360 --> 00:24:12,880
now there's two options here i could do

00:24:11,600 --> 00:24:14,559
the colon z that i mentioned

00:24:12,880 --> 00:24:16,799
that many of you may be familiar with

00:24:14,559 --> 00:24:18,240
the colon capital z do not do that

00:24:16,799 --> 00:24:20,159
because that's terrible that will

00:24:18,240 --> 00:24:22,480
re-label your entire home directory

00:24:20,159 --> 00:24:23,600
with this label right here and then you

00:24:22,480 --> 00:24:24,159
won't be able to log into your system

00:24:23,600 --> 00:24:26,000
anymore

00:24:24,159 --> 00:24:27,600
um i've done that before i did it to

00:24:26,000 --> 00:24:28,720
myself before by mistake and i tried

00:24:27,600 --> 00:24:29,440
resetting it was a giant pain in the

00:24:28,720 --> 00:24:31,200
butt

00:24:29,440 --> 00:24:33,360
don't do that the other thing that you

00:24:31,200 --> 00:24:33,919
can do is the dash dash privileged flag

00:24:33,360 --> 00:24:36,559
the dash

00:24:33,919 --> 00:24:37,679
privilege flag says start this container

00:24:36,559 --> 00:24:40,000
again

00:24:37,679 --> 00:24:41,600
but this time let's see if we can ls the

00:24:40,000 --> 00:24:43,360
home directory oh we can

00:24:41,600 --> 00:24:44,799
we can ls it why can we do that we'll do

00:24:43,360 --> 00:24:47,679
a ps gf

00:24:44,799 --> 00:24:48,960
notice that the new processes that are

00:24:47,679 --> 00:24:50,559
running in this container

00:24:48,960 --> 00:24:52,159
are not constrained anymore they're

00:24:50,559 --> 00:24:54,480
basically run as unconfined u

00:24:52,159 --> 00:24:56,480
they have this s0 there's no mcs label

00:24:54,480 --> 00:24:57,919
so sc linux is like cool no problem go

00:24:56,480 --> 00:24:58,720
talk to those files and read them no

00:24:57,919 --> 00:25:00,799
problem

00:24:58,720 --> 00:25:02,640
and so this now starts to make a lot

00:25:00,799 --> 00:25:02,960
more sense um you're like okay i get

00:25:02,640 --> 00:25:04,640
that

00:25:02,960 --> 00:25:06,799
now i'm root outside the container root

00:25:04,640 --> 00:25:09,200
inside the container and i've disabled

00:25:06,799 --> 00:25:09,840
um the sc linux the extra se linux

00:25:09,200 --> 00:25:12,240
constraints

00:25:09,840 --> 00:25:13,520
on top of whatever already enabled on

00:25:12,240 --> 00:25:15,520
the host

00:25:13,520 --> 00:25:17,200
so i'm able to now read these files now

00:25:15,520 --> 00:25:19,360
what happens when we do it as a user

00:25:17,200 --> 00:25:21,360
so let's do this again as user as father

00:25:19,360 --> 00:25:23,039
linux obviously outside the container

00:25:21,360 --> 00:25:24,640
i should be able to ls my home directory

00:25:23,039 --> 00:25:27,520
i can so you can see my

00:25:24,640 --> 00:25:28,000
my my files they're also unconfined you

00:25:27,520 --> 00:25:30,240
they also

00:25:28,000 --> 00:25:31,440
are home t user home t type you know

00:25:30,240 --> 00:25:34,480
type and then there's no

00:25:31,440 --> 00:25:36,400
mcs label all right cool now let's run a

00:25:34,480 --> 00:25:37,200
container without disable you know no

00:25:36,400 --> 00:25:39,360
privileged

00:25:37,200 --> 00:25:40,240
and then let's do an exact let's try to

00:25:39,360 --> 00:25:42,080
let's try to

00:25:40,240 --> 00:25:43,679
up i can't read my home directory now

00:25:42,080 --> 00:25:45,120
mind you i mounted it as root just to

00:25:43,679 --> 00:25:46,880
make the demos the same but

00:25:45,120 --> 00:25:48,880
but i'm basically mounting my home

00:25:46,880 --> 00:25:51,200
directory into the container as root

00:25:48,880 --> 00:25:52,880
i can't ls it and you go well why not

00:25:51,200 --> 00:25:54,720
same reason as with root

00:25:52,880 --> 00:25:56,159
because if you look this one is running

00:25:54,720 --> 00:25:58,400
as a system user

00:25:56,159 --> 00:26:00,640
container t and then i have this mcs

00:25:58,400 --> 00:26:02,559
label so this mcs label is not going to

00:26:00,640 --> 00:26:04,000
let this process this bash or any other

00:26:02,559 --> 00:26:05,679
thing that runs in this container

00:26:04,000 --> 00:26:07,039
talk to these files and read them you're

00:26:05,679 --> 00:26:09,760
just not going to be allowed

00:26:07,039 --> 00:26:13,039
um and so you could think of dash

00:26:09,760 --> 00:26:15,279
privilege as like giving me my full user

00:26:13,039 --> 00:26:17,279
my full user capabilities inside of the

00:26:15,279 --> 00:26:18,720
container but what makes it a container

00:26:17,279 --> 00:26:19,120
is that it has these extra constraints

00:26:18,720 --> 00:26:21,679
on it

00:26:19,120 --> 00:26:22,880
if i do privilege you're just running a

00:26:21,679 --> 00:26:24,640
process that got

00:26:22,880 --> 00:26:26,720
from uh from a container image you're

00:26:24,640 --> 00:26:28,559
not really running a container per se

00:26:26,720 --> 00:26:30,080
like you're just running like you're

00:26:28,559 --> 00:26:30,720
you're basically just running a regular

00:26:30,080 --> 00:26:33,919
process

00:26:30,720 --> 00:26:34,880
and so like in this scenario i will be

00:26:33,919 --> 00:26:36,559
able you know like i

00:26:34,880 --> 00:26:38,480
when i run it as privileged obviously i

00:26:36,559 --> 00:26:39,679
can ls the home directory no problem

00:26:38,480 --> 00:26:41,200
this is like running a regular

00:26:39,679 --> 00:26:43,600
regular process it's running as

00:26:41,200 --> 00:26:45,200
unconfined u and then there's no mcs

00:26:43,600 --> 00:26:46,080
label so this would be like if i ran

00:26:45,200 --> 00:26:48,080
this ls

00:26:46,080 --> 00:26:49,200
as regular as myself basically just like

00:26:48,080 --> 00:26:51,279
i showed you at the beginning here

00:26:49,200 --> 00:26:53,440
like if i run you know this command it's

00:26:51,279 --> 00:26:55,760
basically exactly the same

00:26:53,440 --> 00:26:56,720
so um you'll see here again the

00:26:55,760 --> 00:27:00,480
processes are

00:26:56,720 --> 00:27:04,000
what you'd expect and now let's go back

00:27:00,480 --> 00:27:07,039
okay so um

00:27:04,000 --> 00:27:08,320
let's get through here all right so

00:27:07,039 --> 00:27:09,919
hopefully that makes sense so what

00:27:08,320 --> 00:27:11,120
privilege i think we now understand just

00:27:09,919 --> 00:27:12,159
disables security controls but it

00:27:11,120 --> 00:27:13,919
doesn't change the users

00:27:12,159 --> 00:27:15,440
all right now we have like three more

00:27:13,919 --> 00:27:18,960
slides to go through some cool stuff

00:27:15,440 --> 00:27:20,640
um uh here's i want to run through three

00:27:18,960 --> 00:27:21,440
things in our roadmap that are coming up

00:27:20,640 --> 00:27:22,720
like things that you should pay

00:27:21,440 --> 00:27:23,279
attention to and i think that will now

00:27:22,720 --> 00:27:25,120
make

00:27:23,279 --> 00:27:27,279
a lot more sense if you understand users

00:27:25,120 --> 00:27:29,440
and privileged um

00:27:27,279 --> 00:27:30,880
in in kubernetes for example we have

00:27:29,440 --> 00:27:33,120
this problem with cryo

00:27:30,880 --> 00:27:34,960
so challenges users want to run root in

00:27:33,120 --> 00:27:36,320
a container with less risk

00:27:34,960 --> 00:27:38,799
does not but it does not completely

00:27:36,320 --> 00:27:40,960
mitigate like the like people always say

00:27:38,799 --> 00:27:43,120
that user name spaces are a security

00:27:40,960 --> 00:27:45,679
tool but they're not actually they're a

00:27:43,120 --> 00:27:48,159
management tool that allows you to

00:27:45,679 --> 00:27:48,960
run a little bit less secure but do it

00:27:48,159 --> 00:27:51,200
in a

00:27:48,960 --> 00:27:52,640
in a less bad way so like it's like kind

00:27:51,200 --> 00:27:54,240
of like the best bad idea we have for

00:27:52,640 --> 00:27:56,159
letting people run root and container

00:27:54,240 --> 00:27:58,320
like still best like i showed you at the

00:27:56,159 --> 00:27:59,279
very beginning run the sync user inside

00:27:58,320 --> 00:28:00,799
the container run

00:27:59,279 --> 00:28:02,720
you know some other user outside the

00:28:00,799 --> 00:28:04,799
container that would be the best

00:28:02,720 --> 00:28:06,240
um second best would be run root outside

00:28:04,799 --> 00:28:07,520
the container like cryo you know it's a

00:28:06,240 --> 00:28:09,279
demon so it has to be root

00:28:07,520 --> 00:28:10,880
and then run as a regular user inside

00:28:09,279 --> 00:28:12,559
the container that would be second best

00:28:10,880 --> 00:28:14,480
third best is like okay we're gonna let

00:28:12,559 --> 00:28:16,159
people run root in the container

00:28:14,480 --> 00:28:17,679
but we're gonna map it to like we're

00:28:16,159 --> 00:28:19,279
gonna use username spaces to like map

00:28:17,679 --> 00:28:21,440
this to some regular user right

00:28:19,279 --> 00:28:23,120
um and so that's like kind of the best

00:28:21,440 --> 00:28:24,640
bad idea we have to let people run root

00:28:23,120 --> 00:28:28,000
in the container

00:28:24,640 --> 00:28:29,919
um we also uh we want user name spaces

00:28:28,000 --> 00:28:31,200
because especially for builds like image

00:28:29,919 --> 00:28:33,120
builds is probably the biggest place

00:28:31,200 --> 00:28:35,039
so i think dan walsh answered a question

00:28:33,120 --> 00:28:36,320
yesterday in our in our like sort of

00:28:35,039 --> 00:28:38,480
birds of a feather that we did yesterday

00:28:36,320 --> 00:28:39,039
about 10 10 10 30 to 11 30 something

00:28:38,480 --> 00:28:42,159
like that

00:28:39,039 --> 00:28:43,760
um our time uh somebody asked about this

00:28:42,159 --> 00:28:44,720
exact question they said um will you

00:28:43,760 --> 00:28:47,679
ever be able to run

00:28:44,720 --> 00:28:49,279
builds in openshift with the default

00:28:47,679 --> 00:28:50,000
security context where it's limited to a

00:28:49,279 --> 00:28:51,919
regular user

00:28:50,000 --> 00:28:53,200
the short answer is probably not like

00:28:51,919 --> 00:28:54,080
it's going to be really hard to get that

00:28:53,200 --> 00:28:56,480
to happen

00:28:54,080 --> 00:28:57,279
but if we can run a new username space

00:28:56,480 --> 00:28:59,600
we can at least

00:28:57,279 --> 00:29:01,120
allow some of the things that root needs

00:28:59,600 --> 00:29:03,440
um you know and do that

00:29:01,120 --> 00:29:04,880
a little bit better the the short the

00:29:03,440 --> 00:29:07,760
longer answer is it's it's

00:29:04,880 --> 00:29:09,919
we're still on not completely sure like

00:29:07,760 --> 00:29:12,559
things like build it if we enable

00:29:09,919 --> 00:29:13,039
uh the kernel based overlay or you know

00:29:12,559 --> 00:29:14,320
we'll

00:29:13,039 --> 00:29:16,399
we'll be able to do that as a regular

00:29:14,320 --> 00:29:17,840
user and there there is some idea that

00:29:16,399 --> 00:29:18,799
like a regular user will be able to you

00:29:17,840 --> 00:29:20,320
know there's only certain kinds of

00:29:18,799 --> 00:29:20,720
mounts that regular users can do and if

00:29:20,320 --> 00:29:22,000
we can

00:29:20,720 --> 00:29:23,520
hack through and figure out a way to let

00:29:22,000 --> 00:29:24,399
a regular user do some of these mounts

00:29:23,520 --> 00:29:26,640
and do some of these things

00:29:24,399 --> 00:29:28,320
we could probably execute build a in a

00:29:26,640 --> 00:29:30,399
container as a regular user but

00:29:28,320 --> 00:29:32,000
but running podman as a regulator it's

00:29:30,399 --> 00:29:33,200
probably almost impossible

00:29:32,000 --> 00:29:35,120
because it needs to do all the things

00:29:33,200 --> 00:29:36,880
that need to be root basically like root

00:29:35,120 --> 00:29:39,200
only root are allowed to do it so

00:29:36,880 --> 00:29:40,559
so long story short this is a really

00:29:39,200 --> 00:29:40,880
interesting piece of work keep your eye

00:29:40,559 --> 00:29:42,159
out

00:29:40,880 --> 00:29:44,080
the way it's gonna be implemented is

00:29:42,159 --> 00:29:44,799
you'll use a runtime class in openshift

00:29:44,080 --> 00:29:46,399
so if you're not familiar with

00:29:44,799 --> 00:29:47,600
kubernetes there's this concept of

00:29:46,399 --> 00:29:49,360
runtime classes

00:29:47,600 --> 00:29:50,720
typically this would be used to like run

00:29:49,360 --> 00:29:52,799
something in cryo

00:29:50,720 --> 00:29:54,000
or in catacontainers so if you had two

00:29:52,799 --> 00:29:55,600
different container engines

00:29:54,000 --> 00:29:57,600
running side by side on a node you could

00:29:55,600 --> 00:29:58,080
use a runtime class to invoke one or the

00:29:57,600 --> 00:29:59,600
other

00:29:58,080 --> 00:30:00,720
you can also do it to do things like

00:29:59,600 --> 00:30:01,600
this where it would change the security

00:30:00,720 --> 00:30:03,039
context

00:30:01,600 --> 00:30:04,399
so what's gonna happen is we're gonna

00:30:03,039 --> 00:30:05,440
have a different security context and

00:30:04,399 --> 00:30:07,120
then we're gonna enable

00:30:05,440 --> 00:30:08,720
cryo we're gonna basically pass a flag

00:30:07,120 --> 00:30:10,799
to cryo to start the container

00:30:08,720 --> 00:30:12,399
with uh username spaces kind of like i

00:30:10,799 --> 00:30:14,240
showed you with podman

00:30:12,399 --> 00:30:15,279
um and then you will be able to do

00:30:14,240 --> 00:30:16,240
interesting things inside of the

00:30:15,279 --> 00:30:16,640
container then you'll at least be able

00:30:16,240 --> 00:30:18,960
to use

00:30:16,640 --> 00:30:20,240
username spaces um we'll do it by

00:30:18,960 --> 00:30:22,640
default for the builds

00:30:20,240 --> 00:30:24,320
in openshift but then at some point in

00:30:22,640 --> 00:30:25,919
the future like the early work is going

00:30:24,320 --> 00:30:27,840
to be just to enable builds ourselves

00:30:25,919 --> 00:30:28,159
and this won't this this runtime class

00:30:27,840 --> 00:30:30,320
won't

00:30:28,159 --> 00:30:31,200
necessarily be made for end users to go

00:30:30,320 --> 00:30:33,440
invoke themselves

00:30:31,200 --> 00:30:35,440
but we will eventually expose um a

00:30:33,440 --> 00:30:37,520
version of this that we document we show

00:30:35,440 --> 00:30:39,200
people how to use

00:30:37,520 --> 00:30:41,039
the next one that i want to talk about

00:30:39,200 --> 00:30:44,159
um that will make a lot more sense

00:30:41,039 --> 00:30:46,320
is nfs uh and containers so

00:30:44,159 --> 00:30:48,720
so giuseppe has been working on some

00:30:46,320 --> 00:30:50,000
really cool work uh giuseppe carvano is

00:30:48,720 --> 00:30:51,520
one of the engineers on our team that's

00:30:50,000 --> 00:30:53,520
like just awesome and he does like all

00:30:51,520 --> 00:30:54,640
kinds of crazy hacky like low-level

00:30:53,520 --> 00:30:56,480
stuff like he'll come back

00:30:54,640 --> 00:30:58,080
like the next weekend and he he wrote c

00:30:56,480 --> 00:31:01,679
run in like a weekend

00:30:58,080 --> 00:31:02,320
um he's that guy so um he had this idea

00:31:01,679 --> 00:31:04,399
like well

00:31:02,320 --> 00:31:06,159
enough like in linux in like the in the

00:31:04,399 --> 00:31:07,679
version of linux kernel from like

00:31:06,159 --> 00:31:10,000
it's pretty recent i think dan said it

00:31:07,679 --> 00:31:11,279
was september or maybe november

00:31:10,000 --> 00:31:13,760
october last year like it's pretty

00:31:11,279 --> 00:31:15,760
recent um the the latest versions of the

00:31:13,760 --> 00:31:18,399
nfs server clients in linux do

00:31:15,760 --> 00:31:19,519
know how to do um extended attributes

00:31:18,399 --> 00:31:21,679
but they don't know how to do

00:31:19,519 --> 00:31:23,120
user namespaces in fact i don't think

00:31:21,679 --> 00:31:25,279
nfs would ever be able to understand

00:31:23,120 --> 00:31:28,080
usernames faces because as i showed

00:31:25,279 --> 00:31:30,159
um you know it it would have to well i

00:31:28,080 --> 00:31:31,760
guess it could if it read ed see subuid

00:31:30,159 --> 00:31:32,880
and i could understand all that but then

00:31:31,760 --> 00:31:34,159
it wouldn't understand on the server

00:31:32,880 --> 00:31:35,120
side like you would need to map those

00:31:34,159 --> 00:31:37,919
somehow to the server

00:31:35,120 --> 00:31:39,360
so this is pretty hairy problem so what

00:31:37,919 --> 00:31:42,159
giuseppe came up with is like

00:31:39,360 --> 00:31:43,600
well some nfs servers like the linux one

00:31:42,159 --> 00:31:46,880
support extended attributes

00:31:43,600 --> 00:31:48,320
so if we can tuck the the uids if we can

00:31:46,880 --> 00:31:50,240
basically do a shown

00:31:48,320 --> 00:31:52,000
back to the original uid and tuck the

00:31:50,240 --> 00:31:54,080
high number uid

00:31:52,000 --> 00:31:55,440
in an extended attribute we can read

00:31:54,080 --> 00:31:56,559
them back out and push them in every

00:31:55,440 --> 00:31:58,240
time we can do a shown

00:31:56,559 --> 00:31:59,600
so we can do some interesting hilarious

00:31:58,240 --> 00:32:00,799
things to hack and make this basically

00:31:59,600 --> 00:32:03,440
work with nfs

00:32:00,799 --> 00:32:04,399
um and then this is this is nice because

00:32:03,440 --> 00:32:05,760
if you want to have your home

00:32:04,399 --> 00:32:08,960
directories on nfs

00:32:05,760 --> 00:32:11,039
or in hpc this is a common use case um

00:32:08,960 --> 00:32:12,080
or or you want to actually do image bind

00:32:11,039 --> 00:32:13,519
mounts where like say you have a

00:32:12,080 --> 00:32:14,000
standard set of images that you share

00:32:13,519 --> 00:32:16,320
out to every

00:32:14,000 --> 00:32:17,840
node in the cluster um and you don't

00:32:16,320 --> 00:32:19,360
want to have those come from a registry

00:32:17,840 --> 00:32:20,399
server there's all kinds of interesting

00:32:19,360 --> 00:32:22,399
places where you want to be able to use

00:32:20,399 --> 00:32:23,760
nfs to do this kind of thing

00:32:22,399 --> 00:32:25,760
we're hoping to be able to support this

00:32:23,760 --> 00:32:27,039
around the rel 8.5 time frame so it

00:32:25,760 --> 00:32:28,320
should be pretty interesting

00:32:27,039 --> 00:32:29,360
keep your eye on this but basically what

00:32:28,320 --> 00:32:30,480
we're doing is we're taking that high

00:32:29,360 --> 00:32:31,679
number that i showed you

00:32:30,480 --> 00:32:32,559
and we're tucking in an extended

00:32:31,679 --> 00:32:33,519
attribute and then we're basically

00:32:32,559 --> 00:32:36,080
reading it back out and we're doing a

00:32:33,519 --> 00:32:38,080
tone on the actual file system

00:32:36,080 --> 00:32:40,640
so the next place that i think is pretty

00:32:38,080 --> 00:32:43,519
interesting is and this is the last one

00:32:40,640 --> 00:32:44,640
is around free ipa so in the context of

00:32:43,519 --> 00:32:46,720
that nfs

00:32:44,640 --> 00:32:48,159
those nfs mounts that i mentioned you

00:32:46,720 --> 00:32:50,559
can imagine now okay

00:32:48,159 --> 00:32:51,919
cool i can now put my home directories

00:32:50,559 --> 00:32:53,679
on nfs but

00:32:51,919 --> 00:32:56,399
if i don't have these etsy subuids and

00:32:53,679 --> 00:32:59,279
gids managed across an entire cluster

00:32:56,399 --> 00:33:00,320
of either desktops or hpc environment um

00:32:59,279 --> 00:33:02,320
how would i actually

00:33:00,320 --> 00:33:03,360
you know if i tuck these extended

00:33:02,320 --> 00:33:05,039
attributes in

00:33:03,360 --> 00:33:06,960
an extent you know if i tuck these high

00:33:05,039 --> 00:33:08,640
number uids in an extended attribute

00:33:06,960 --> 00:33:10,559
then save them in the nfs server

00:33:08,640 --> 00:33:12,480
in a file then read them back out on

00:33:10,559 --> 00:33:13,519
another node and the etsy subuids are

00:33:12,480 --> 00:33:14,960
not the same

00:33:13,519 --> 00:33:16,799
that would be a serious problem right

00:33:14,960 --> 00:33:18,240
it'd be the standard kind of nfs

00:33:16,799 --> 00:33:19,519
if you don't have the users available

00:33:18,240 --> 00:33:20,000
problem it's the same kind of problem

00:33:19,519 --> 00:33:21,360
where like

00:33:20,000 --> 00:33:23,039
if you have a user created on one node

00:33:21,360 --> 00:33:25,519
but not on another that's why we use

00:33:23,039 --> 00:33:28,159
free ipa those kinds of things um

00:33:25,519 --> 00:33:30,000
so we're actually again targeting for uh

00:33:28,159 --> 00:33:32,080
rel eight five we're looking at being

00:33:30,000 --> 00:33:34,640
able to manage those etsy sub uid and

00:33:32,080 --> 00:33:36,240
and sub gid files across the cluster

00:33:34,640 --> 00:33:37,919
using free ipa so that'll be cool

00:33:36,240 --> 00:33:39,519
so then if you have like an nfs cluster

00:33:37,919 --> 00:33:41,279
a free ipa server and a bunch of rel

00:33:39,519 --> 00:33:43,360
nodes or fedora nodes or whatever

00:33:41,279 --> 00:33:44,720
you would be able to access you know

00:33:43,360 --> 00:33:45,600
basically have your home directories for

00:33:44,720 --> 00:33:47,279
pod man

00:33:45,600 --> 00:33:48,720
um on there and rootless podman would

00:33:47,279 --> 00:33:49,600
work fine across you know a whole bunch

00:33:48,720 --> 00:33:51,039
of different nodes

00:33:49,600 --> 00:33:52,720
and so this is pretty cool this gets us

00:33:51,039 --> 00:33:53,840
to a place where we're doing some really

00:33:52,720 --> 00:33:55,279
interesting stuff that we just don't

00:33:53,840 --> 00:33:57,039
ever really see like a

00:33:55,279 --> 00:33:58,559
a docker to be able to do um because

00:33:57,039 --> 00:34:00,159
it's just architected differently like

00:33:58,559 --> 00:34:01,840
since podman executes has a local

00:34:00,159 --> 00:34:03,279
program in your home you know and it

00:34:01,840 --> 00:34:04,720
saves all of its storage in your home

00:34:03,279 --> 00:34:05,600
directory like a normal program you'd

00:34:04,720 --> 00:34:07,679
expect to do

00:34:05,600 --> 00:34:09,440
almost like a desktop program um it will

00:34:07,679 --> 00:34:10,960
be able to use you know the nfs server

00:34:09,440 --> 00:34:13,679
and the free ipa to basically do this

00:34:10,960 --> 00:34:16,720
kind of stuff so it's pretty cool

00:34:13,679 --> 00:34:18,720
um and that is really it i uh

00:34:16,720 --> 00:34:20,879
i did compile some source material just

00:34:18,720 --> 00:34:22,320
to like i did obviously refresh a lot of

00:34:20,879 --> 00:34:23,599
my memory on certain of these things so

00:34:22,320 --> 00:34:25,040
i want to share some of those

00:34:23,599 --> 00:34:27,599
some of those pieces also i want to call

00:34:25,040 --> 00:34:29,040
it like brian smith does some awesome

00:34:27,599 --> 00:34:30,399
videos so like i wrote an original

00:34:29,040 --> 00:34:31,760
article about running rude inside and

00:34:30,399 --> 00:34:34,720
outside that was inspired by

00:34:31,760 --> 00:34:35,359
a talk with vincent vats but but then um

00:34:34,720 --> 00:34:36,720
brian

00:34:35,359 --> 00:34:38,879
really went above and beyond and wrote

00:34:36,720 --> 00:34:40,560
this to or did this two-part uh

00:34:38,879 --> 00:34:42,560
video and so it's really awesome and so

00:34:40,560 --> 00:34:44,079
i think if you need if like you want to

00:34:42,560 --> 00:34:45,520
get this crisp in your brain

00:34:44,079 --> 00:34:47,520
he does some really good work explaining

00:34:45,520 --> 00:34:50,079
the same things i explained

00:34:47,520 --> 00:34:51,520
so with that um i will say if there are

00:34:50,079 --> 00:34:52,240
any questions i think we're pretty close

00:34:51,520 --> 00:34:54,000
to the time

00:34:52,240 --> 00:34:56,480
yeah we are we have about four minutes

00:34:54,000 --> 00:34:57,280
left and i do have one question for you

00:34:56,480 --> 00:35:00,880
scott

00:34:57,280 --> 00:35:02,400
from dan in chat when using docker

00:35:00,880 --> 00:35:04,079
you can't just run a container as a

00:35:02,400 --> 00:35:05,119
regular user you need to be in the

00:35:04,079 --> 00:35:09,119
docker group

00:35:05,119 --> 00:35:12,160
which docker uh which docker docs

00:35:09,119 --> 00:35:13,839
i think dan made this a uh he did this

00:35:12,160 --> 00:35:16,960
on deliberately by the way

00:35:13,839 --> 00:35:18,960
which docker docs warns you about

00:35:16,960 --> 00:35:20,720
with the docker group grants privileges

00:35:18,960 --> 00:35:22,800
equivalent to the root user

00:35:20,720 --> 00:35:24,000
for details on how this impacts security

00:35:22,800 --> 00:35:25,119
in your system

00:35:24,000 --> 00:35:27,359
what do you mean by running the

00:35:25,119 --> 00:35:28,720
container as a regular user or is it

00:35:27,359 --> 00:35:30,880
just a docker

00:35:28,720 --> 00:35:32,960
is it just a docker things compared to

00:35:30,880 --> 00:35:35,520
the pod man

00:35:32,960 --> 00:35:37,119
well so so this is this is a really good

00:35:35,520 --> 00:35:38,240
question and yeah i kind of assumed

00:35:37,119 --> 00:35:39,200
people understood this so i didn't

00:35:38,240 --> 00:35:42,320
explain all the way

00:35:39,200 --> 00:35:44,079
so the docker so docker is a client

00:35:42,320 --> 00:35:47,040
server program right like it has

00:35:44,079 --> 00:35:48,000
a a client that runs either as root or

00:35:47,040 --> 00:35:49,599
as a user

00:35:48,000 --> 00:35:51,200
and then it has a server that always

00:35:49,599 --> 00:35:53,680
runs as root and so

00:35:51,200 --> 00:35:55,200
for you know root obviously can run the

00:35:53,680 --> 00:35:55,760
client and talk to the demon all the

00:35:55,200 --> 00:35:57,920
time

00:35:55,760 --> 00:35:59,760
but then like you're saying if you want

00:35:57,920 --> 00:36:01,040
a regular user to be able to access that

00:35:59,760 --> 00:36:02,800
daemon what i'll have is that regular

00:36:01,040 --> 00:36:04,400
user will try to talk that socket

00:36:02,800 --> 00:36:05,760
and the docker demon will say oh this

00:36:04,400 --> 00:36:07,520
user is not in the docker group i'm not

00:36:05,760 --> 00:36:10,320
letting them talk to the socket

00:36:07,520 --> 00:36:11,920
so if you add your user to that group

00:36:10,320 --> 00:36:12,960
and then you do talk to that socket you

00:36:11,920 --> 00:36:15,760
have root access

00:36:12,960 --> 00:36:16,800
because as i showed since the demon the

00:36:15,760 --> 00:36:18,720
container engine

00:36:16,800 --> 00:36:20,560
is running as root it's always root

00:36:18,720 --> 00:36:22,880
outside the container and so when you

00:36:20,560 --> 00:36:24,960
run a program with dash dash privileged

00:36:22,880 --> 00:36:26,000
i have a one liner where i show as a

00:36:24,960 --> 00:36:29,040
regular user you can

00:36:26,000 --> 00:36:31,920
execute like you know docker run

00:36:29,040 --> 00:36:34,560
um you know dash i t dash privileged um

00:36:31,920 --> 00:36:37,599
and then just run you know ubi8 bash

00:36:34,560 --> 00:36:39,920
um and if you run as bash um and then

00:36:37,599 --> 00:36:42,480
mount you know or i'm sorry dash v

00:36:39,920 --> 00:36:43,200
slash cohen slash or you know or slash

00:36:42,480 --> 00:36:45,920
cohen

00:36:43,200 --> 00:36:47,839
you know mnt or whatever you can mount

00:36:45,920 --> 00:36:49,280
the underlying hard drive from the

00:36:47,839 --> 00:36:52,079
underlying container host

00:36:49,280 --> 00:36:53,200
into the container run this process with

00:36:52,079 --> 00:36:54,400
dash dash privileged

00:36:53,200 --> 00:36:55,520
and as i showed you if you're root

00:36:54,400 --> 00:36:56,400
outside the container and you're root

00:36:55,520 --> 00:36:58,560
inside the container

00:36:56,400 --> 00:36:59,760
and you run dash privileged you're rude

00:36:58,560 --> 00:37:01,280
on the box like there's

00:36:59,760 --> 00:37:02,800
there's you can go in and hack anything

00:37:01,280 --> 00:37:04,240
you want on the file system if you bind

00:37:02,800 --> 00:37:06,000
mount the file system into

00:37:04,240 --> 00:37:07,680
into the container so like you could cd

00:37:06,000 --> 00:37:08,880
into what i usually show is i would

00:37:07,680 --> 00:37:11,040
trued into like slash

00:37:08,880 --> 00:37:12,640
m t and show look i'm rude on the system

00:37:11,040 --> 00:37:14,720
right now and the worst part about

00:37:12,640 --> 00:37:16,960
becoming root with the docker demon

00:37:14,720 --> 00:37:18,800
is it doesn't even preserve your uh

00:37:16,960 --> 00:37:20,400
there's a login id that gets saved in

00:37:18,800 --> 00:37:22,800
linux um in slash proc

00:37:20,400 --> 00:37:23,520
somewhere um and for that for that i for

00:37:22,800 --> 00:37:25,440
that process

00:37:23,520 --> 00:37:27,040
and for that process the login id is not

00:37:25,440 --> 00:37:27,839
set because docker gets started by

00:37:27,040 --> 00:37:29,440
systemd

00:37:27,839 --> 00:37:31,520
which gets started by the kernel and so

00:37:29,440 --> 00:37:33,040
there's no login id like so you have no

00:37:31,520 --> 00:37:35,839
idea who ran these commands

00:37:33,040 --> 00:37:36,400
as root so yeah it's it's a really weird

00:37:35,839 --> 00:37:39,599
nasty

00:37:36,400 --> 00:37:42,000
thing that is basically um you know

00:37:39,599 --> 00:37:43,280
it has it's the way the architecture of

00:37:42,000 --> 00:37:43,920
of docker works there's just no way

00:37:43,280 --> 00:37:45,680
around it

00:37:43,920 --> 00:37:47,040
there is a way to run the docker demon

00:37:45,680 --> 00:37:48,960
in your home directory

00:37:47,040 --> 00:37:50,400
as a regular user and then run the

00:37:48,960 --> 00:37:52,800
docker

00:37:50,400 --> 00:37:53,839
uh cli to connect to the demon running

00:37:52,800 --> 00:37:55,599
as your uid

00:37:53,839 --> 00:37:57,280
but that's obviously not very elegant

00:37:55,599 --> 00:37:59,040
like and so that's why podman

00:37:57,280 --> 00:38:00,240
is just this think of it as bash for

00:37:59,040 --> 00:38:01,040
containers like you just run it and

00:38:00,240 --> 00:38:03,200
disappears

00:38:01,040 --> 00:38:04,560
it's just like a bash for containers it

00:38:03,200 --> 00:38:06,240
just runs as a program

00:38:04,560 --> 00:38:08,480
it doesn't have a demon so it's just a

00:38:06,240 --> 00:38:10,400
single program so it's just a lot more

00:38:08,480 --> 00:38:11,760
it's a lot easier for the threat model

00:38:10,400 --> 00:38:16,960
in your mind to like make sense with

00:38:11,760 --> 00:38:16,960

YouTube URL: https://www.youtube.com/watch?v=sZEwUW7-yGM


