Title: Containers are Linux - but what does it mean? - DevConf.CZ 2021
Publication date: 2021-03-17
Playlist: DevConfCZ 2021
Description: 
	Speakers: Jan Zmeškal, Tomáš Kašpárek

Container image we'll need for the workshop: https://www.dropbox.com/s/ho2sqlayp6qad2w/fedora.tar?dl=0
"Containers are Linux" is an interesting and bold statement that you might have read in blogs or seen on T-shirts. Do you know what it really means though?
In this workshop, we will guide you through the processes of running a fully functioning container without the usage of tools such as Docker, Podman or Kubernetes. Indeed, everything you need to start a container on your laptop is a couple of commands like chroot, unshare, mount and few others - all of them natively present on most Linux distributions. We believe that this hands-on experience will help you understand how containers are implemented on the low level.

Requirements: Linux workstation (virtual machine will do just fine). Even though it's possible to run containers on other operating systems with the usage of specialized tools, we won't have capacity to guide you through that process. We'll be using programs like curl, tar or top that should be already present at any modern Linux distribution.

During the workshop we'll all be working with the same tar archive. You can download it here: link will be added before the workshop

Credits:
The main inspiration for us was the great Containers from Scratch blog post by Eric Chiang: https://ericchiang.github.io/post/containers-from-scratch/

Additional sources:
If you want to delve deeper into this topic, here are some great sources.
Containers are Linux post on Red Hat blog: https://www.redhat.com/en/blog/containers-are-linux
Cgroups, namespaces, and beyond: what are containers made from? - DockerCon EU talk by Jérôme Petazzoni (Docker): https://www.youtube.com/watch?v=sK5i-N34im8
Linux Container Primitives: cgroups, namespaces, and more!  - Comprehensive explanation by Samuel Karp (AWS): https://www.youtube.com/watch?v=x1npPrzyKfs
Containers unplugged: Linux namespaces - Linux namespaces explained in-depth by Michael Kerrisk (Linux man-pages project): https://www.youtube.com/watch?v=0kJPa-1FuoI


Schedule: https://sched.co/gmSb
Captions: 
	00:00:01,199 --> 00:00:05,759
hello i'm thomas i'm working

00:00:03,120 --> 00:00:06,799
for redhead for almost nine years

00:00:05,759 --> 00:00:09,040
already

00:00:06,799 --> 00:00:11,200
and for the past three years i've been

00:00:09,040 --> 00:00:15,120
working on developing containers

00:00:11,200 --> 00:00:18,800
applications running in openshift so

00:00:15,120 --> 00:00:22,080
and before we actually start i will

00:00:18,800 --> 00:00:23,760
ask you at least those of you who would

00:00:22,080 --> 00:00:27,039
like to follow with us

00:00:23,760 --> 00:00:30,240
to download this fedoratar image we've

00:00:27,039 --> 00:00:33,600
prepared for you

00:00:30,240 --> 00:00:36,800
and extract it somewhere on your disk

00:00:33,600 --> 00:00:39,440
and if you do not remember if

00:00:36,800 --> 00:00:40,239
you don't feel like uh going along with

00:00:39,440 --> 00:00:42,160
us and

00:00:40,239 --> 00:00:44,079
uh doing all the typing you can just

00:00:42,160 --> 00:00:46,399
watch and i still believe you will

00:00:44,079 --> 00:00:48,719
you will benefit from that but for those

00:00:46,399 --> 00:00:50,640
of you who want to get your hands dirty

00:00:48,719 --> 00:00:52,160
please download the image sorry for

00:00:50,640 --> 00:00:54,879
interruption

00:00:52,160 --> 00:00:55,840
and if you do not remember the tar

00:00:54,879 --> 00:00:58,960
syntax

00:00:55,840 --> 00:01:00,399
like i do i've also included a command

00:00:58,960 --> 00:01:04,400
to extract the

00:01:00,399 --> 00:01:07,280
archive so first of all

00:01:04,400 --> 00:01:09,520
we are not an experts when it comes to

00:01:07,280 --> 00:01:12,080
container we are not developing it

00:01:09,520 --> 00:01:14,880
and we are merely just developing

00:01:12,080 --> 00:01:17,680
containers applications

00:01:14,880 --> 00:01:21,040
but for our for many points of our

00:01:17,680 --> 00:01:23,920
career i was interviewing people

00:01:21,040 --> 00:01:24,320
for what containers are and sometimes i

00:01:23,920 --> 00:01:27,360
hear

00:01:24,320 --> 00:01:32,240
an answer that containers are

00:01:27,360 --> 00:01:35,119
lightweight vms and they are not

00:01:32,240 --> 00:01:36,799
the name of the containers come from the

00:01:35,119 --> 00:01:40,000
word contain

00:01:36,799 --> 00:01:42,799
and in fact the containers are

00:01:40,000 --> 00:01:44,079
a mean how to encompass encapsulate and

00:01:42,799 --> 00:01:47,520
isolate

00:01:44,079 --> 00:01:51,360
and running process

00:01:47,520 --> 00:01:52,799
and all this isolation and resource

00:01:51,360 --> 00:01:57,119
confinement is done

00:01:52,799 --> 00:02:00,000
using standard linux means which are

00:01:57,119 --> 00:02:02,159
included in kernel for example kernel

00:02:00,000 --> 00:02:04,880
name spaces capabilities

00:02:02,159 --> 00:02:06,640
on the real like systems se linux and of

00:02:04,880 --> 00:02:10,399
course control groups

00:02:06,640 --> 00:02:15,360
shorten c groups and at this moment

00:02:10,399 --> 00:02:15,360
i would like to give my word to jan

00:02:16,160 --> 00:02:20,080
you'll give it just tiny bit of theory

00:02:18,560 --> 00:02:24,239
just guys keep in mind

00:02:20,080 --> 00:02:27,360
that this is not a theory theory focused

00:02:24,239 --> 00:02:30,400
so we will we will be very light on that

00:02:27,360 --> 00:02:32,000
uh i i want to talk for a while or what

00:02:30,400 --> 00:02:35,440
are actually container

00:02:32,000 --> 00:02:38,879
tools um because

00:02:35,440 --> 00:02:42,640
you are probably uh familiar

00:02:38,879 --> 00:02:45,920
with uh tools like podman or docker or

00:02:42,640 --> 00:02:49,040
even kubernetes docker swarm and

00:02:45,920 --> 00:02:52,480
uh all of these tools basically

00:02:49,040 --> 00:02:54,800
enable you work with container

00:02:52,480 --> 00:02:55,760
containers so can you please just put

00:02:54,800 --> 00:02:58,239
into chat

00:02:55,760 --> 00:02:59,519
which of those those tools have you used

00:02:58,239 --> 00:03:02,640
or which of them

00:02:59,519 --> 00:03:06,080
you are the most familiar with yeah be

00:03:02,640 --> 00:03:08,560
either docker podman uh some other

00:03:06,080 --> 00:03:10,959
some other things alex c maybe maybe

00:03:08,560 --> 00:03:13,040
some other things i don't know

00:03:10,959 --> 00:03:16,159
okay so there is there is some podman

00:03:13,040 --> 00:03:19,360
audience definitely some podman audience

00:03:16,159 --> 00:03:21,360
oh there's a poll already ah nice there

00:03:19,360 --> 00:03:24,080
the pole is already running sorry i

00:03:21,360 --> 00:03:24,080
didn't notice

00:03:28,239 --> 00:03:36,319
so we are getting we are getting some um

00:03:32,879 --> 00:03:39,760
votes in the poll well

00:03:36,319 --> 00:03:41,920
uh yeah i mean so far

00:03:39,760 --> 00:03:43,040
so far docker and podman are the

00:03:41,920 --> 00:03:45,519
definite winners

00:03:43,040 --> 00:03:47,040
so so so you have an idea what i'm

00:03:45,519 --> 00:03:50,159
talking about

00:03:47,040 --> 00:03:50,159
uh it's uh

00:03:51,040 --> 00:03:55,360
you know these tools uh there are some

00:03:54,000 --> 00:03:58,480
people who don't know them

00:03:55,360 --> 00:04:01,519
but the uh this is a minority

00:03:58,480 --> 00:04:04,480
and what those tools do they enable you

00:04:01,519 --> 00:04:06,159
to easily there's a keyword here here to

00:04:04,480 --> 00:04:10,159
easily spin up containers

00:04:06,159 --> 00:04:13,680
join them work with them the point of

00:04:10,159 --> 00:04:14,000
our talk or the workshop is to show you

00:04:13,680 --> 00:04:17,519
that

00:04:14,000 --> 00:04:20,639
under the hood they use already existing

00:04:17,519 --> 00:04:21,120
kernel features and you can actually

00:04:20,639 --> 00:04:24,240
create

00:04:21,120 --> 00:04:26,320
containers without ever touching those

00:04:24,240 --> 00:04:29,840
tools

00:04:26,320 --> 00:04:31,199
so this is for the theory uh i will jump

00:04:29,840 --> 00:04:34,240
in my terminal

00:04:31,199 --> 00:04:37,199
uh when i'm typing away uh

00:04:34,240 --> 00:04:38,080
i won't be able to see the chat so while

00:04:37,199 --> 00:04:40,880
i'm hacking

00:04:38,080 --> 00:04:42,000
away tomasz will be there in the chats

00:04:40,880 --> 00:04:45,360
to help you if

00:04:42,000 --> 00:04:47,919
you have some issues so

00:04:45,360 --> 00:04:49,680
let's get straight to it if you don't

00:04:47,919 --> 00:04:51,919
see my terminal

00:04:49,680 --> 00:04:53,520
you can just double click it in the

00:04:51,919 --> 00:04:57,199
hoping platform

00:04:53,520 --> 00:04:59,840
and it should be maximized for you

00:04:57,199 --> 00:05:01,600
and uh what i recommend to you

00:04:59,840 --> 00:05:02,320
recommends to you if you want to follow

00:05:01,600 --> 00:05:05,680
along

00:05:02,320 --> 00:05:08,880
just open two terminals like i did

00:05:05,680 --> 00:05:10,560
and put them side side by side uh with

00:05:08,880 --> 00:05:13,280
our presentation

00:05:10,560 --> 00:05:15,520
we will have one top terminal and one

00:05:13,280 --> 00:05:18,639
bottom terminal and i will refer

00:05:15,520 --> 00:05:22,000
to them as such

00:05:18,639 --> 00:05:24,800
so we are uh

00:05:22,000 --> 00:05:25,520
we are in home of dev confuser we

00:05:24,800 --> 00:05:28,880
created

00:05:25,520 --> 00:05:32,120
a directory workshop

00:05:28,880 --> 00:05:36,479
and in that directory we have a

00:05:32,120 --> 00:05:38,639
fedora. which is uh the same

00:05:36,479 --> 00:05:40,720
archive that you downloaded oh by the

00:05:38,639 --> 00:05:43,199
way tomas if there is some

00:05:40,720 --> 00:05:45,120
problem or some question in the chat uh

00:05:43,199 --> 00:05:48,400
feel free to interrupt me if such need

00:05:45,120 --> 00:05:48,400
arises i don't see them

00:05:48,639 --> 00:05:53,199
so uh let's start with the most

00:05:50,479 --> 00:05:56,000
difficult thing exploding guitar yeah

00:05:53,199 --> 00:05:58,240
remembering star syntax is difficult but

00:05:56,000 --> 00:06:00,800
i'll give you a hint a star

00:05:58,240 --> 00:06:00,800
xf

00:06:01,440 --> 00:06:09,440
and the dar archive

00:06:06,080 --> 00:06:13,280
and now you can see we have fedora uh

00:06:09,440 --> 00:06:16,080
directory so let's actually

00:06:13,280 --> 00:06:18,400
go into the directory and let's see

00:06:16,080 --> 00:06:21,759
what's in there

00:06:18,400 --> 00:06:23,280
okay this is some pretty standard linux

00:06:21,759 --> 00:06:26,000
file system

00:06:23,280 --> 00:06:27,280
you you might think and you are right uh

00:06:26,000 --> 00:06:30,639
actually

00:06:27,280 --> 00:06:32,840
uh now i will tell you one lie but it's

00:06:30,639 --> 00:06:34,000
this kind of high school lie that is

00:06:32,840 --> 00:06:36,560
acceptable

00:06:34,000 --> 00:06:38,960
and the truth is that container images

00:06:36,560 --> 00:06:41,280
are basically

00:06:38,960 --> 00:06:43,039
basically archives they are archived

00:06:41,280 --> 00:06:45,120
linux file systems

00:06:43,039 --> 00:06:47,199
not full-fledged of course some of the

00:06:45,120 --> 00:06:49,360
things that that

00:06:47,199 --> 00:06:50,560
you need on operating systems are

00:06:49,360 --> 00:06:53,039
omitted there

00:06:50,560 --> 00:06:54,319
because we want to minimize the size of

00:06:53,039 --> 00:06:57,919
our images

00:06:54,319 --> 00:07:02,319
but the it's basically there

00:06:57,919 --> 00:07:05,520
the basic structure uh

00:07:02,319 --> 00:07:08,720
so let me just go

00:07:05,520 --> 00:07:12,960
one level up again and you can see

00:07:08,720 --> 00:07:16,400
that if i do cat slash etc slash

00:07:12,960 --> 00:07:20,319
redhead release and this might not work

00:07:16,400 --> 00:07:24,160
if you are on ubuntu for example but

00:07:20,319 --> 00:07:27,680
i'm on uh we are on centos machine

00:07:24,160 --> 00:07:30,560
so this is a file from

00:07:27,680 --> 00:07:32,000
host operating system we are on centos

00:07:30,560 --> 00:07:35,599
h2

00:07:32,000 --> 00:07:39,280
i can do the same inside our

00:07:35,599 --> 00:07:41,680
image so i can do get fedora this is our

00:07:39,280 --> 00:07:45,360
local directory slash edc

00:07:41,680 --> 00:07:48,479
slash red hat release

00:07:45,360 --> 00:07:49,199
and we can see that the image is

00:07:48,479 --> 00:07:52,479
actually

00:07:49,199 --> 00:07:52,479
fedora 33

00:07:53,440 --> 00:08:00,879
okay so we have our image

00:07:57,120 --> 00:08:04,960
now we want to run a container from it

00:08:00,879 --> 00:08:08,479
that is isolated so first thing

00:08:04,960 --> 00:08:11,440
we can use for that is change root

00:08:08,479 --> 00:08:12,080
i'm pretty sure that most of you are

00:08:11,440 --> 00:08:16,240
familiar

00:08:12,080 --> 00:08:19,599
with change root it is a way how to

00:08:16,240 --> 00:08:22,800
how to change how to take a process

00:08:19,599 --> 00:08:26,560
and change its view of file system that

00:08:22,800 --> 00:08:29,840
it's the root of the file system will be

00:08:26,560 --> 00:08:33,200
will be placed someplace different for

00:08:29,840 --> 00:08:35,839
for that one particular process if

00:08:33,200 --> 00:08:36,320
you if i'm not making sense doesn't

00:08:35,839 --> 00:08:39,839
matter

00:08:36,320 --> 00:08:41,839
we will see it soon enough so in the top

00:08:39,839 --> 00:08:46,160
terminal i just again

00:08:41,839 --> 00:08:49,440
do pwd to make the pawn point that

00:08:46,160 --> 00:08:53,680
we are in slash home slash defcon

00:08:49,440 --> 00:08:57,279
workshop what i'm gonna do now

00:08:53,680 --> 00:08:59,839
now and uh you can follow me doing that

00:08:57,279 --> 00:09:02,080
is do sudo because that's needing for

00:08:59,839 --> 00:09:07,040
change route

00:09:02,080 --> 00:09:07,040
change route that's the command itself

00:09:07,200 --> 00:09:13,600
fedora this is the directory

00:09:10,240 --> 00:09:16,320
where we want to place our new root of

00:09:13,600 --> 00:09:19,519
the file system hierarchy

00:09:16,320 --> 00:09:21,120
so we are changing the route to to our

00:09:19,519 --> 00:09:24,399
container image

00:09:21,120 --> 00:09:27,600
and then what we want to run in there so

00:09:24,399 --> 00:09:28,240
let's just simply run bash so this

00:09:27,600 --> 00:09:32,800
command

00:09:28,240 --> 00:09:32,800
sudo root fedora bin bash

00:09:32,880 --> 00:09:38,080
okay we have a new shell let's see where

00:09:36,560 --> 00:09:41,120
are we now

00:09:38,080 --> 00:09:44,160
we are in the top of the file system

00:09:41,120 --> 00:09:47,519
hierarchy we see

00:09:44,160 --> 00:09:48,399
content of the image and now if we do

00:09:47,519 --> 00:09:52,480
cat

00:09:48,399 --> 00:09:57,680
slash etc slash redhead

00:09:52,480 --> 00:09:57,680
release what will this point to

00:09:58,480 --> 00:10:05,760
okay you have guessed correctly it's

00:10:02,560 --> 00:10:07,839
fedora so even though we are

00:10:05,760 --> 00:10:09,120
referring to the to the root of the

00:10:07,839 --> 00:10:12,399
hierarchy

00:10:09,120 --> 00:10:15,040
if we were on our host os we would see

00:10:12,399 --> 00:10:17,440
centos there but since we have changed

00:10:15,040 --> 00:10:20,560
the route to our container image

00:10:17,440 --> 00:10:22,160
we see that our operating system is

00:10:20,560 --> 00:10:25,440
fedora 33

00:10:22,160 --> 00:10:25,440
okay that works

00:10:25,600 --> 00:10:32,240
so running

00:10:28,640 --> 00:10:33,920
bin bash is nice in our changed route

00:10:32,240 --> 00:10:37,040
but we can definitely

00:10:33,920 --> 00:10:40,560
do some more interesting things so

00:10:37,040 --> 00:10:44,880
let's try doing the same

00:10:40,560 --> 00:10:46,959
running change route in directory fedora

00:10:44,880 --> 00:10:48,640
and let's say we want to run python

00:10:46,959 --> 00:10:51,279
there

00:10:48,640 --> 00:10:52,959
i created the image myself so i included

00:10:51,279 --> 00:10:56,959
the python binary i am sure

00:10:52,959 --> 00:11:02,160
it is there so let's uh

00:10:56,959 --> 00:11:02,160
start by by taking a look at its version

00:11:02,959 --> 00:11:09,760
we can see we have python 3.9 uh

00:11:06,240 --> 00:11:14,079
in the in the container image

00:11:09,760 --> 00:11:18,399
so let's use it for some good

00:11:14,079 --> 00:11:21,600
we will run a very simple http server

00:11:18,399 --> 00:11:23,279
so we can do minus m for running a

00:11:21,600 --> 00:11:27,440
module

00:11:23,279 --> 00:11:31,200
the modules name is http.server

00:11:27,440 --> 00:11:33,839
and we will be listening on port 8000

00:11:31,200 --> 00:11:34,560
so this is the whole syntax python minus

00:11:33,839 --> 00:11:38,959
m

00:11:34,560 --> 00:11:38,959
http server 8 000.

00:11:39,279 --> 00:11:43,600
and you can see the logs that we are

00:11:41,279 --> 00:11:46,880
serving http

00:11:43,600 --> 00:11:51,519
on port 8000

00:11:46,880 --> 00:11:55,279
now i'm switching to my bottom terminal

00:11:51,519 --> 00:11:58,800
and i can yeah we can verify

00:11:55,279 --> 00:12:02,720
it works and we can just scroll

00:11:58,800 --> 00:12:05,519
localhost port 8000

00:12:02,720 --> 00:12:06,240
and i injected a text file into the

00:12:05,519 --> 00:12:08,800
image

00:12:06,240 --> 00:12:10,000
to do to the top of the hierarchy which

00:12:08,800 --> 00:12:13,519
is called

00:12:10,000 --> 00:12:16,880
hello dot txt

00:12:13,519 --> 00:12:21,600
so call localhost colon

00:12:16,880 --> 00:12:21,600
8000 slash hello.txt

00:12:21,839 --> 00:12:26,399
and we are actually receiving its

00:12:24,000 --> 00:12:30,399
content

00:12:26,399 --> 00:12:34,160
and in the top terminal you can see

00:12:30,399 --> 00:12:39,839
that the server actually received

00:12:34,160 --> 00:12:39,839
get request as expected

00:12:40,240 --> 00:12:45,120
so what we have here now is actually

00:12:43,040 --> 00:12:49,760
something pretty useful

00:12:45,120 --> 00:12:52,880
we can run we can run http server

00:12:49,760 --> 00:12:58,000
using the python version that we want

00:12:52,880 --> 00:12:58,000
in a seemingly isolated environment

00:12:58,399 --> 00:13:04,560
but it has some problems

00:13:01,680 --> 00:13:06,880
let's let's examine them so i'm stopping

00:13:04,560 --> 00:13:10,399
the http server

00:13:06,880 --> 00:13:13,279
uh in the top terminal and i exit

00:13:10,399 --> 00:13:16,320
and there thereby i exited the container

00:13:13,279 --> 00:13:19,200
let's let's call it like that

00:13:16,320 --> 00:13:21,040
let me clear the terminals i'm going to

00:13:19,200 --> 00:13:24,480
the bottom terminal

00:13:21,040 --> 00:13:27,360
and i'm running top commander you

00:13:24,480 --> 00:13:27,920
are surely familiar with top command

00:13:27,360 --> 00:13:29,839
showing

00:13:27,920 --> 00:13:31,120
all the different processes running on

00:13:29,839 --> 00:13:34,079
the system so

00:13:31,120 --> 00:13:34,320
let's just run in the bottom terminal

00:13:34,079 --> 00:13:37,200
and

00:13:34,320 --> 00:13:38,160
in the top terminal let's do the thing

00:13:37,200 --> 00:13:41,040
we are

00:13:38,160 --> 00:13:41,839
very familiar already let's just change

00:13:41,040 --> 00:13:44,720
the route

00:13:41,839 --> 00:13:47,040
to fedora directory and run bash in

00:13:44,720 --> 00:13:47,040
there

00:13:47,519 --> 00:13:55,040
okay let us list processes

00:13:51,040 --> 00:13:59,839
with ps aux

00:13:55,040 --> 00:14:02,079
wow a problem we cannot do this

00:13:59,839 --> 00:14:03,360
there is some kind of linux theory

00:14:02,079 --> 00:14:06,320
behind this

00:14:03,360 --> 00:14:07,040
the reason why we cannot do that is that

00:14:06,320 --> 00:14:09,600
processes

00:14:07,040 --> 00:14:10,639
are tracked via virtual file system in

00:14:09,600 --> 00:14:13,839
linux

00:14:10,639 --> 00:14:17,199
so in order to see them we need to

00:14:13,839 --> 00:14:20,320
have access to this file system so

00:14:17,199 --> 00:14:23,920
let's just do what

00:14:20,320 --> 00:14:26,000
the system tells us let's just do mount

00:14:23,920 --> 00:14:27,760
because we'll need to we will need to

00:14:26,000 --> 00:14:31,279
mount the file system

00:14:27,760 --> 00:14:34,720
type of the file system is proc

00:14:31,279 --> 00:14:38,320
close enough name is sprock

00:14:34,720 --> 00:14:41,040
and we want to mount it at slash proc

00:14:38,320 --> 00:14:41,680
and keep in mind this slash proc is

00:14:41,040 --> 00:14:45,199
already

00:14:41,680 --> 00:14:48,959
inside the container

00:14:45,199 --> 00:14:49,440
okay that went well so let's try doing

00:14:48,959 --> 00:14:52,880
ps

00:14:49,440 --> 00:14:55,680
aux again okay

00:14:52,880 --> 00:14:57,519
and here's the issue we see all the

00:14:55,680 --> 00:15:00,560
system processes

00:14:57,519 --> 00:15:04,000
if we do ps aux and we

00:15:00,560 --> 00:15:07,760
grep for top running on our host

00:15:04,000 --> 00:15:07,760
os in the second terminal

00:15:08,240 --> 00:15:14,240
we can see it and not only that we can

00:15:12,240 --> 00:15:18,639
do something nasty

00:15:14,240 --> 00:15:20,160
we can do pickle top for process skill

00:15:18,639 --> 00:15:22,959
and as you can see in the bottom

00:15:20,160 --> 00:15:25,839
terminal we actually killed it

00:15:22,959 --> 00:15:26,560
so there's not much of an isolation is

00:15:25,839 --> 00:15:29,440
it

00:15:26,560 --> 00:15:31,680
if we can kill system processes from the

00:15:29,440 --> 00:15:34,480
container

00:15:31,680 --> 00:15:37,360
so the bit that will help us with that

00:15:34,480 --> 00:15:40,079
are namespaces

00:15:37,360 --> 00:15:42,480
basically again fury very quickly

00:15:40,079 --> 00:15:46,079
namespaces

00:15:42,480 --> 00:15:47,040
enable you to isolate one process or

00:15:46,079 --> 00:15:50,399
many processes

00:15:47,040 --> 00:15:52,399
doesn't matter to isolate process

00:15:50,399 --> 00:15:55,839
in a way that they have different view

00:15:52,399 --> 00:15:58,480
of system resources

00:15:55,839 --> 00:15:58,959
if this is again too theoretical let's

00:15:58,480 --> 00:16:02,079
just

00:15:58,959 --> 00:16:06,480
dive in so first

00:16:02,079 --> 00:16:07,279
uh i would like you to i would like to

00:16:06,480 --> 00:16:10,320
show you

00:16:07,279 --> 00:16:14,959
how namespaces are implemented

00:16:10,320 --> 00:16:18,880
so let's clear our terminal there

00:16:14,959 --> 00:16:18,880
i'll exit from the container again

00:16:19,279 --> 00:16:25,680
and in the bottom terminal or

00:16:22,480 --> 00:16:26,399
this is our host operating system we go

00:16:25,680 --> 00:16:31,759
to

00:16:26,399 --> 00:16:34,880
slash proc slash dollar dollar

00:16:31,759 --> 00:16:38,800
and this is actually a

00:16:34,880 --> 00:16:41,040
pid of our current process if we do echo

00:16:38,800 --> 00:16:42,480
dollar dollar you can see it's this

00:16:41,040 --> 00:16:46,959
number

00:16:42,480 --> 00:16:50,240
so let's once again go to proc

00:16:46,959 --> 00:16:53,920
dollar dollar ns

00:16:50,240 --> 00:16:57,519
and in this directory you can see

00:16:53,920 --> 00:17:01,120
the namespaces this particular process

00:16:57,519 --> 00:17:04,240
is part of we can see that

00:17:01,120 --> 00:17:09,600
our there are namespaces for network

00:17:04,240 --> 00:17:12,319
for processes for users for example

00:17:09,600 --> 00:17:13,360
let's do the same in the top terminal

00:17:12,319 --> 00:17:16,400
which is also

00:17:13,360 --> 00:17:21,520
our host operating system

00:17:16,400 --> 00:17:25,760
slash proc dollar ns

00:17:21,520 --> 00:17:28,799
and list so if we take a look for

00:17:25,760 --> 00:17:32,400
example at pid namespace

00:17:28,799 --> 00:17:36,080
it is 836 for top terminal

00:17:32,400 --> 00:17:39,200
and 836 for bottom terminal

00:17:36,080 --> 00:17:42,400
your numbers will of course vary

00:17:39,200 --> 00:17:42,400
but they should be the same

00:17:43,039 --> 00:17:46,880
this is expected that's fine because all

00:17:46,000 --> 00:17:50,559
the processes

00:17:46,880 --> 00:17:53,760
start in the same name spaces

00:17:50,559 --> 00:17:57,679
but that's not what we want to achieve

00:17:53,760 --> 00:17:59,600
so in our top terminal

00:17:57,679 --> 00:18:01,039
let's once again go to our working

00:17:59,600 --> 00:18:04,240
directory

00:18:01,039 --> 00:18:07,679
workshop and

00:18:04,240 --> 00:18:10,640
now we will use new command

00:18:07,679 --> 00:18:11,440
it's we will need to do again the

00:18:10,640 --> 00:18:15,600
command is

00:18:11,440 --> 00:18:18,720
unshare to create a new process

00:18:15,600 --> 00:18:21,520
which is uh in different namespace or

00:18:18,720 --> 00:18:21,520
namespaces

00:18:21,760 --> 00:18:28,640
we will use minus u

00:18:25,120 --> 00:18:30,799
because we want to unshare uts namespace

00:18:28,640 --> 00:18:31,840
okay you might be thinking what is uds

00:18:30,799 --> 00:18:34,880
namespace

00:18:31,840 --> 00:18:37,679
it's very fancy name that basically

00:18:34,880 --> 00:18:38,080
for our purposes means hostname we will

00:18:37,679 --> 00:18:42,000
just

00:18:38,080 --> 00:18:44,799
isolate hostname of the machine

00:18:42,000 --> 00:18:45,679
with this being unshared we change the

00:18:44,799 --> 00:18:48,720
route

00:18:45,679 --> 00:18:52,880
and you already know the rest fedora

00:18:48,720 --> 00:18:52,880
slash bin slash bash

00:18:53,760 --> 00:19:00,640
okay did something change

00:18:57,120 --> 00:19:03,919
let's see host name in our container

00:19:00,640 --> 00:19:07,280
is localhost in bottom terminal

00:19:03,919 --> 00:19:11,600
hostname of our os

00:19:07,280 --> 00:19:14,000
is localhost as well so let's try doing

00:19:11,600 --> 00:19:14,720
hostname and changing it in the

00:19:14,000 --> 00:19:18,080
container

00:19:14,720 --> 00:19:20,960
we will change it to container

00:19:18,080 --> 00:19:22,559
and now we can see that the hostname in

00:19:20,960 --> 00:19:26,080
the container

00:19:22,559 --> 00:19:26,960
is actually container while the host

00:19:26,080 --> 00:19:30,799
name

00:19:26,960 --> 00:19:33,760
in the host machine has not changed

00:19:30,799 --> 00:19:36,720
to further prove my point i in the

00:19:33,760 --> 00:19:39,120
container i can go to cd

00:19:36,720 --> 00:19:39,120
slash

00:19:42,960 --> 00:19:48,559
list its content and if we take a look

00:19:46,240 --> 00:19:52,160
at uts namespace

00:19:48,559 --> 00:19:55,840
it's 441 for the

00:19:52,160 --> 00:19:57,760
for the container and it's 838

00:19:55,840 --> 00:19:59,120
for the host operating system so we

00:19:57,760 --> 00:20:02,799
actually managed

00:19:59,120 --> 00:20:06,960
to isolate that particular

00:20:02,799 --> 00:20:10,080
resource so that was mainly for

00:20:06,960 --> 00:20:11,360
illustration the actual thing we want to

00:20:10,080 --> 00:20:14,640
achieve here

00:20:11,360 --> 00:20:17,039
is to isolate uh processes that

00:20:14,640 --> 00:20:19,200
that's the problem statement uh we

00:20:17,039 --> 00:20:23,120
started with

00:20:19,200 --> 00:20:24,480
so for that this will be my grandf

00:20:23,120 --> 00:20:28,320
finale

00:20:24,480 --> 00:20:30,320
uh we will use unshare

00:20:28,320 --> 00:20:32,960
again that's the same command we used

00:20:30,320 --> 00:20:36,240
just a second ago

00:20:32,960 --> 00:20:39,760
but now we will provide minus b

00:20:36,240 --> 00:20:44,480
option for uh

00:20:39,760 --> 00:20:47,679
for unsharing uh pid namespace

00:20:44,480 --> 00:20:51,039
we need to use minus f so that a new

00:20:47,679 --> 00:20:54,159
process is forked

00:20:51,039 --> 00:20:58,400
we also and here be really

00:20:54,159 --> 00:21:02,159
uh attentive we also need to use

00:20:58,400 --> 00:21:04,720
mount brock option from the same reason

00:21:02,159 --> 00:21:08,400
i already explained to you if we want to

00:21:04,720 --> 00:21:12,320
have a new view of processes we need to

00:21:08,400 --> 00:21:15,200
remount proc file system

00:21:12,320 --> 00:21:17,679
and here it basically wants to know

00:21:15,200 --> 00:21:20,559
where we want to mount it

00:21:17,679 --> 00:21:21,919
and we need to provide an absolute path

00:21:20,559 --> 00:21:26,000
so let's just do

00:21:21,919 --> 00:21:29,120
use pwd environment variable

00:21:26,000 --> 00:21:32,480
which points to the place where we are

00:21:29,120 --> 00:21:36,960
then we want to use the directory fedora

00:21:32,480 --> 00:21:40,559
and in that slash proc

00:21:36,960 --> 00:21:44,320
and again with this being uh unshared

00:21:40,559 --> 00:21:48,320
we go to the same old stuff we know

00:21:44,320 --> 00:21:53,360
we do change root in there

00:21:48,320 --> 00:21:53,360
to fedora directory and run bash

00:21:54,400 --> 00:22:01,760
okay let's see

00:21:58,480 --> 00:22:05,120
our pid and it's one

00:22:01,760 --> 00:22:08,320
so it obviously works because uh

00:22:05,120 --> 00:22:11,360
on our host os we couldn't have

00:22:08,320 --> 00:22:14,320
pid1 because that's always systemd

00:22:11,360 --> 00:22:16,000
or init or whatever your first process

00:22:14,320 --> 00:22:18,480
in the os is

00:22:16,000 --> 00:22:21,520
so we have pid one that's great let's

00:22:18,480 --> 00:22:25,200
see all the processes

00:22:21,520 --> 00:22:28,559
and we can really see only the processes

00:22:25,200 --> 00:22:33,679
running in the container so we

00:22:28,559 --> 00:22:37,840
achieved process isolation as we wished

00:22:33,679 --> 00:22:40,960
i intended to to show you also

00:22:37,840 --> 00:22:44,799
ns enter utility which allows you

00:22:40,960 --> 00:22:46,799
to enter already existing namespaces

00:22:44,799 --> 00:22:48,320
that's kind of like attaching shell to

00:22:46,799 --> 00:22:51,840
containers

00:22:48,320 --> 00:22:54,960
but i kind of fell behind schedule

00:22:51,840 --> 00:22:56,640
i guess i was two both so

00:22:54,960 --> 00:22:58,080
but it doesn't matter we've seen

00:22:56,640 --> 00:23:01,200
everything important

00:22:58,080 --> 00:23:02,480
that has to do with namespaces and with

00:23:01,200 --> 00:23:05,360
change root

00:23:02,480 --> 00:23:06,480
so with this being said i will hand it

00:23:05,360 --> 00:23:08,720
over

00:23:06,480 --> 00:23:08,720
to

00:23:10,320 --> 00:23:14,960
in case i'm quick we can show an

00:23:12,159 --> 00:23:18,960
essential at the end of the demo

00:23:14,960 --> 00:23:20,240
and i would like to ask you to switch to

00:23:18,960 --> 00:23:22,720
the view of the

00:23:20,240 --> 00:23:23,600
my terminal this is the one with cat in

00:23:22,720 --> 00:23:27,200
the

00:23:23,600 --> 00:23:30,880
bottom view just double click it

00:23:27,200 --> 00:23:37,840
and i will basically do the

00:23:30,880 --> 00:23:37,840
same stuff as the undid i will enter my

00:23:38,720 --> 00:23:44,480
or crea in it my container using the

00:23:42,080 --> 00:23:46,159
exact same command like he did the

00:23:44,480 --> 00:23:49,520
pseudo unshare

00:23:46,159 --> 00:23:49,520
minus b minus f

00:23:49,600 --> 00:23:56,559
to prove that i'm really isolating

00:23:53,279 --> 00:24:00,880
isolated like jana jan was i

00:23:56,559 --> 00:24:04,000
i did run ps in my container

00:24:00,880 --> 00:24:07,039
so we've achieved uh

00:24:04,000 --> 00:24:09,440
isolation of pids so processes running

00:24:07,039 --> 00:24:10,720
in container can no longer kill other

00:24:09,440 --> 00:24:14,240
processes running

00:24:10,720 --> 00:24:15,919
in other containers on in the of host

00:24:14,240 --> 00:24:19,440
operating system

00:24:15,919 --> 00:24:21,840
but it might not help

00:24:19,440 --> 00:24:22,720
because there might be some malicious

00:24:21,840 --> 00:24:24,720
piece of code

00:24:22,720 --> 00:24:27,000
running in the container for example

00:24:24,720 --> 00:24:30,080
like this one called

00:24:27,000 --> 00:24:33,840
eatmemory.pie which basically

00:24:30,080 --> 00:24:33,840
each half a second

00:24:34,640 --> 00:24:41,919
allocates 10 megabytes by

00:24:38,000 --> 00:24:45,980
just creating a new byte array

00:24:41,919 --> 00:24:47,919
so let me just run it

00:24:45,980 --> 00:24:50,480
[Music]

00:24:47,919 --> 00:24:51,360
you can see that it clearly prints that

00:24:50,480 --> 00:24:56,000
it's allocating

00:24:51,360 --> 00:24:58,960
memory and in the top you can see it

00:24:56,000 --> 00:24:59,440
time from time appear right now it has

00:24:58,960 --> 00:25:03,039
point

00:24:59,440 --> 00:25:05,600
seven point nine memory

00:25:03,039 --> 00:25:08,400
in a while it will be more over yeah one

00:25:05,600 --> 00:25:08,400
percent so

00:25:09,039 --> 00:25:12,720
a process running in container can

00:25:11,240 --> 00:25:16,320
[Music]

00:25:12,720 --> 00:25:19,919
for starve the host system for resources

00:25:16,320 --> 00:25:23,520
so let's use to

00:25:19,919 --> 00:25:26,960
call c groups or control groups for that

00:25:23,520 --> 00:25:30,000
to really restrict resources

00:25:26,960 --> 00:25:30,799
a container and process is running in

00:25:30,000 --> 00:25:35,360
container

00:25:30,799 --> 00:25:39,039
can use i will switch to root actually

00:25:35,360 --> 00:25:41,679
because for that you have to have

00:25:39,039 --> 00:25:44,559
elevated permissions

00:25:41,679 --> 00:25:47,039
all the time so and it's easier for me

00:25:44,559 --> 00:25:50,480
just to be rude

00:25:47,039 --> 00:25:53,600
and first thing i will do is root

00:25:50,480 --> 00:25:58,159
is to cd to sli cis

00:25:53,600 --> 00:26:00,880
slash fs slash c c group directory

00:25:58,159 --> 00:26:01,600
this is again a virtual file system

00:26:00,880 --> 00:26:04,720
exactly

00:26:01,600 --> 00:26:08,640
like the slash broke one is and

00:26:04,720 --> 00:26:13,760
in there we have couple of directories

00:26:08,640 --> 00:26:16,880
which represents all type of resources

00:26:13,760 --> 00:26:18,480
which can be restricted by c groups for

00:26:16,880 --> 00:26:21,679
example it can be

00:26:18,480 --> 00:26:25,840
cpu time it can be access to

00:26:21,679 --> 00:26:28,880
bulk devices network

00:26:25,840 --> 00:26:31,039
and right now we are definitely most

00:26:28,880 --> 00:26:34,480
interested in the memory one

00:26:31,039 --> 00:26:38,000
so let's just go to the memory directory

00:26:34,480 --> 00:26:41,360
and explore the directory a bit

00:26:38,000 --> 00:26:42,400
you can see that the memory directory

00:26:41,360 --> 00:26:46,960
contains

00:26:42,400 --> 00:26:46,960
multiple files and

00:26:47,520 --> 00:26:51,039
the basically the most important one is

00:26:50,159 --> 00:26:54,480
the memory

00:26:51,039 --> 00:26:57,760
limit in bytes and

00:26:54,480 --> 00:27:02,320
this is a pretty huge number for

00:26:57,760 --> 00:27:05,360
one process can allow use

00:27:02,320 --> 00:27:09,679
and this applies for all the processes

00:27:05,360 --> 00:27:14,559
running in the default c group so

00:27:09,679 --> 00:27:17,679
let's create a new c group using

00:27:14,559 --> 00:27:22,080
make their directory make their command

00:27:17,679 --> 00:27:22,080
let's call our c group defconf

00:27:22,240 --> 00:27:26,960
you can see that a new directory called

00:27:24,640 --> 00:27:30,960
defconf appeared

00:27:26,960 --> 00:27:34,880
if we change our directory to defconf

00:27:30,960 --> 00:27:40,159
we can see that there's already

00:27:34,880 --> 00:27:40,159
exactly the same files are pre-populated

00:27:40,320 --> 00:27:44,480
and we can write

00:27:45,919 --> 00:27:49,840
using echo command

00:27:49,919 --> 00:27:57,200
and the number 100

00:27:53,360 --> 00:28:00,320
thousand 100 million

00:27:57,200 --> 00:28:03,679
into the memory

00:28:00,320 --> 00:28:06,960
zero which is that yeah

00:28:03,679 --> 00:28:11,919
it's one two three

00:28:06,960 --> 00:28:11,919
four five six seven eight zeros

00:28:12,559 --> 00:28:17,840
and write it into memory limit in bytes

00:28:18,480 --> 00:28:25,919
in theory this command would restrict

00:28:22,240 --> 00:28:29,120
all processes with the dev config group

00:28:25,919 --> 00:28:29,940
to be able to use in total

00:28:29,120 --> 00:28:32,559
00:28:29,940 --> 00:28:36,960
[Music]

00:28:32,559 --> 00:28:40,080
million bytes which is roughly

00:28:36,960 --> 00:28:43,200
100 megabytes and

00:28:40,080 --> 00:28:46,320
to further unbreak my

00:28:43,200 --> 00:28:49,600
system by containers i will also

00:28:46,320 --> 00:28:52,660
echo zero to memory swappiness

00:28:49,600 --> 00:28:54,399
file which will disable swap for

00:28:52,660 --> 00:28:56,960
[Music]

00:28:54,399 --> 00:28:58,799
the processes in the c group as you can

00:28:56,960 --> 00:29:00,159
see i'm not using swap on this this

00:28:58,799 --> 00:29:03,039
machine but

00:29:00,159 --> 00:29:06,640
without this zero in memory for penis it

00:29:03,039 --> 00:29:06,640
might not work on your machine

00:29:06,960 --> 00:29:11,279
and the last thing i need is actually

00:29:10,080 --> 00:29:14,720
assign

00:29:11,279 --> 00:29:18,080
this bash running in the top

00:29:14,720 --> 00:29:21,440
terminal into the defconfc group

00:29:18,080 --> 00:29:27,120
to do that i will just

00:29:21,440 --> 00:29:30,720
find the process

00:29:27,120 --> 00:29:34,240
uh of the bash and it's actually

00:29:30,720 --> 00:29:36,960
this one the hint for you to determine

00:29:34,240 --> 00:29:37,760
which of the bashes running on your

00:29:36,960 --> 00:29:40,799
system

00:29:37,760 --> 00:29:44,480
is it is that

00:29:40,799 --> 00:29:48,880
the pid of the patch follows

00:29:44,480 --> 00:29:52,159
the pid of the unshare command you

00:29:48,880 --> 00:29:56,240
spawn your change rooted bash

00:29:52,159 --> 00:29:59,440
so let me just echo

00:29:56,240 --> 00:30:03,919
the pid of the bash into the

00:29:59,440 --> 00:30:08,559
tasks file the tasks file contain

00:30:03,919 --> 00:30:09,279
number pids of all processes associated

00:30:08,559 --> 00:30:11,679
with this c

00:30:09,279 --> 00:30:12,559
group so at the moment it should contain

00:30:11,679 --> 00:30:16,480
only

00:30:12,559 --> 00:30:18,000
the pid of the bash which is in the top

00:30:16,480 --> 00:30:21,440
terminal

00:30:18,000 --> 00:30:24,799
and if i try to run the

00:30:21,440 --> 00:30:28,159
id memory by script again

00:30:24,799 --> 00:30:29,360
it should be killed and it was killed

00:30:28,159 --> 00:30:33,200
because

00:30:29,360 --> 00:30:37,200
the process is the uh

00:30:33,200 --> 00:30:40,320
accumulated 100 megabytes of memory

00:30:37,200 --> 00:30:43,840
and what's worth mentioning here that

00:30:40,320 --> 00:30:45,520
all processes inherit their c group

00:30:43,840 --> 00:30:48,559
setting

00:30:45,520 --> 00:30:48,559
of their parent

00:30:49,600 --> 00:30:56,320
so let me just exit this change root

00:30:53,039 --> 00:30:59,039
and if i do cut tasks

00:30:56,320 --> 00:30:59,760
it's empty obviously because the process

00:30:59,039 --> 00:31:03,519
uh

00:30:59,760 --> 00:31:07,279
which was associated with this c group

00:31:03,519 --> 00:31:10,399
was exited so we can actually

00:31:07,279 --> 00:31:14,080
go and remove the def confic group right

00:31:10,399 --> 00:31:18,159
let's use rm minus rf

00:31:14,080 --> 00:31:22,000
fconf and it will fail because

00:31:18,159 --> 00:31:24,880
for removing the c groups which are

00:31:22,000 --> 00:31:26,480
not associated with any running process

00:31:24,880 --> 00:31:32,880
you have to use

00:31:26,480 --> 00:31:36,480
command rm there

00:31:32,880 --> 00:31:39,440
i will just call get the tasks

00:31:36,480 --> 00:31:40,880
file for the default c group and you can

00:31:39,440 --> 00:31:44,120
see that the default c

00:31:40,880 --> 00:31:45,519
group contains pretty much every

00:31:44,120 --> 00:31:50,240
[Music]

00:31:45,519 --> 00:31:50,240
thing running on my machine

00:31:50,559 --> 00:31:57,039
so that was for

00:31:53,679 --> 00:32:00,320
illustration what c group allow us

00:31:57,039 --> 00:32:03,519
as i mentioned

00:32:00,320 --> 00:32:06,240
we can also control

00:32:03,519 --> 00:32:07,519
access to cpu or how many cpu the

00:32:06,240 --> 00:32:11,440
process can use

00:32:07,519 --> 00:32:15,919
devices network stuff like that

00:32:11,440 --> 00:32:19,200
so let me just exit the root terminal

00:32:15,919 --> 00:32:21,919
and use the defconfuse user

00:32:19,200 --> 00:32:24,399
in the workshop directory for the next

00:32:21,919 --> 00:32:28,000
part of the demo or workshop

00:32:24,399 --> 00:32:30,799
and this is mounts the purpose of

00:32:28,000 --> 00:32:31,760
mounts in the containers is pretty much

00:32:30,799 --> 00:32:36,000
the same

00:32:31,760 --> 00:32:39,200
like purpose of the mount command

00:32:36,000 --> 00:32:39,760
in the real use case most of the time

00:32:39,200 --> 00:32:42,799
you just

00:32:39,760 --> 00:32:46,080
want to add some

00:32:42,799 --> 00:32:47,360
direct view of some directories or some

00:32:46,080 --> 00:32:51,120
resources

00:32:47,360 --> 00:32:54,240
to your machine or container

00:32:51,120 --> 00:32:56,480
so especially especially useful with

00:32:54,240 --> 00:32:57,519
uh for example kubernetes on or

00:32:56,480 --> 00:32:59,440
openshift

00:32:57,519 --> 00:33:01,039
where you want to have your application

00:32:59,440 --> 00:33:03,919
code in the container

00:33:01,039 --> 00:33:05,039
but the configuration is separate so you

00:33:03,919 --> 00:33:08,840
want to

00:33:05,039 --> 00:33:11,039
give the application access to the

00:33:08,840 --> 00:33:14,799
configuration

00:33:11,039 --> 00:33:19,039
yeah uh thank you ann so i will

00:33:14,799 --> 00:33:24,640
create a new new directory called

00:33:19,039 --> 00:33:27,760
ro files ro will stand for read only

00:33:24,640 --> 00:33:28,960
in the workshop directory and

00:33:27,760 --> 00:33:32,720
[Music]

00:33:28,960 --> 00:33:32,720
let's just create a file there

00:33:32,960 --> 00:33:40,080
time file into the

00:33:36,240 --> 00:33:42,720
arrow files slash hello

00:33:40,080 --> 00:33:42,720
txt

00:33:44,159 --> 00:33:46,480
and

00:33:48,559 --> 00:33:55,360
so you believe me that it's there

00:33:52,000 --> 00:33:55,919
so i will just find the unshare command

00:33:55,360 --> 00:33:57,850
in my

00:33:55,919 --> 00:33:59,200
basic story run it again

00:33:57,850 --> 00:34:04,080
[Music]

00:33:59,200 --> 00:34:07,279
and yeah at the moment it's not there

00:34:04,080 --> 00:34:08,520
so i need to somehow make the

00:34:07,279 --> 00:34:11,200
contents of the

00:34:08,520 --> 00:34:15,200
[Music]

00:34:11,200 --> 00:34:19,040
arrow files available to the container

00:34:15,200 --> 00:34:22,639
and it's done by amount command

00:34:19,040 --> 00:34:25,679
which requires elevated permissions

00:34:22,639 --> 00:34:28,720
i will use minus minus bind option

00:34:25,679 --> 00:34:32,320
and as for mount options i will

00:34:28,720 --> 00:34:35,760
use are all in case i would like to

00:34:32,320 --> 00:34:37,679
write it amounted right oh also with

00:34:35,760 --> 00:34:42,159
write i would use

00:34:37,679 --> 00:34:45,679
uh rw but for this example

00:34:42,159 --> 00:34:50,000
i will use just ro and i will use

00:34:45,679 --> 00:34:54,240
the absolute paths for the things so

00:34:50,000 --> 00:34:57,359
in this case the mounted

00:34:54,240 --> 00:35:01,200
stuff goes first so arrow files

00:34:57,359 --> 00:35:04,079
directory and then

00:35:01,200 --> 00:35:05,760
the second the last argument is where i

00:35:04,079 --> 00:35:10,000
want to mount it

00:35:05,760 --> 00:35:10,000
i would like to mount it to

00:35:10,640 --> 00:35:17,119
pw do you think you have typo

00:35:14,320 --> 00:35:19,839
even in the first part there is nothing

00:35:17,119 --> 00:35:23,119
after the dollar sign

00:35:19,839 --> 00:35:25,680
yeah thank you and

00:35:23,119 --> 00:35:28,000
to do it actually i have to have some

00:35:25,680 --> 00:35:31,839
mount point inside the container

00:35:28,000 --> 00:35:35,359
so let's examine the

00:35:31,839 --> 00:35:37,040
contents of the mn mnt in the container

00:35:35,359 --> 00:35:41,440
it's nothing there so

00:35:37,040 --> 00:35:41,440
let's just create a directory there

00:35:42,240 --> 00:35:48,000
in the mnd in container called

00:35:45,520 --> 00:35:48,000
files

00:35:49,920 --> 00:35:55,359
yeah so now the mnt directory in the

00:35:53,359 --> 00:35:56,880
container contains a new directory

00:35:55,359 --> 00:35:59,839
called files

00:35:56,880 --> 00:35:59,839
so

00:36:01,280 --> 00:36:07,920
i will mount the

00:36:05,040 --> 00:36:08,480
as home current directory slash arrow

00:36:07,920 --> 00:36:11,520
files

00:36:08,480 --> 00:36:14,400
into the current directory fedora

00:36:11,520 --> 00:36:15,760
which is the file system for the

00:36:14,400 --> 00:36:19,440
container

00:36:15,760 --> 00:36:19,440
mnt files

00:36:20,400 --> 00:36:27,040
i can also do mount

00:36:23,440 --> 00:36:28,960
command and you can see that there are

00:36:27,040 --> 00:36:34,079
something

00:36:28,960 --> 00:36:37,520
uh cause in is the last line here

00:36:34,079 --> 00:36:38,640
that the dev sdc2 is mounted in home dev

00:36:37,520 --> 00:36:42,079
corner workshop

00:36:38,640 --> 00:36:45,440
fedora mnt files so

00:36:42,079 --> 00:36:49,040
let's just explore the mnt

00:36:45,440 --> 00:36:49,040
files in the container

00:36:50,560 --> 00:37:09,839
and wow

00:36:55,440 --> 00:37:09,839
it's not working

00:37:10,320 --> 00:37:14,640
yeah it's not working because it's not

00:37:12,560 --> 00:37:17,599
applied for the

00:37:14,640 --> 00:37:18,640
currently running change route so i have

00:37:17,599 --> 00:37:23,839
to

00:37:18,640 --> 00:37:23,839
exit it and enter it again

00:37:24,880 --> 00:37:31,920
and now if i do it

00:37:28,720 --> 00:37:35,359
again the ls

00:37:31,920 --> 00:37:39,520
minus mnt files

00:37:35,359 --> 00:37:42,480
i can see that there's a file hello txt

00:37:39,520 --> 00:37:42,480
i can cut it

00:37:44,720 --> 00:37:48,839
it says exactly the same

00:37:47,360 --> 00:37:52,640
[Music]

00:37:48,839 --> 00:37:56,720
stuff as

00:37:52,640 --> 00:38:01,520
if i would get it in the host machine

00:37:56,720 --> 00:38:01,520
so let's try to change it from the

00:38:02,839 --> 00:38:05,839
container

00:38:07,119 --> 00:38:14,320
changing to file i will use

00:38:10,720 --> 00:38:19,839
double arrows so i will just

00:38:14,320 --> 00:38:19,839
try to append it

00:38:20,720 --> 00:38:25,839
and yeah it fails because it's mounted

00:38:27,200 --> 00:38:32,720
as read only and

00:38:30,560 --> 00:38:35,040
to further illustrate that the mounts

00:38:32,720 --> 00:38:36,480
are not using some kind of snapshot

00:38:35,040 --> 00:38:39,920
magic or

00:38:36,480 --> 00:38:41,200
many kind of similar tricks i will

00:38:39,920 --> 00:38:43,520
create an

00:38:41,200 --> 00:38:46,240
on the host machine because i do not

00:38:43,520 --> 00:38:49,119
have write access in the container

00:38:46,240 --> 00:38:49,119
another file

00:38:51,680 --> 00:38:55,599
and call it just another

00:38:56,560 --> 00:39:09,280
and you can see that it's there and i

00:39:00,000 --> 00:39:09,280

YouTube URL: https://www.youtube.com/watch?v=1wVpX2GyyPg


