Title: Building Fedora layered container images - DevConf.CZ 2021
Publication date: 2021-03-17
Playlist: DevConfCZ 2021
Description: 
	Speaker: Athos Ribeiro



The OpenShift Build Service (OSBS) is a collection of tools, workflows and integration points that build and release layered container images.
OSBS is used with Fedora's build system (koji) to build the layered images shipped in registry.fedoraproject.org.
In this session, we will give you an overview of what happens behind the
curtains when a container image build is triggered in the Fedora
infrastructure and what you need to do to include an image in
registry.fedoraproject.org. 


Schedule: https://sched.co/gmLv
Captions: 
	00:00:01,040 --> 00:00:05,440
uh my name is zatus hibero

00:00:03,040 --> 00:00:08,480
and today i'll be talking about building

00:00:05,440 --> 00:00:10,400
fedora layered container images

00:00:08,480 --> 00:00:12,639
so let me give you a quick background on

00:00:10,400 --> 00:00:14,920
me uh so

00:00:12,639 --> 00:00:16,400
i'm a barely active fedora package

00:00:14,920 --> 00:00:18,960
maintainer

00:00:16,400 --> 00:00:20,640
you know all those jokes about day job

00:00:18,960 --> 00:00:23,119
anal time whatever

00:00:20,640 --> 00:00:24,080
and i'm also a senior software engineer

00:00:23,119 --> 00:00:27,279
at red hat

00:00:24,080 --> 00:00:30,160
and i am currently working on

00:00:27,279 --> 00:00:32,239
the openshift build service uh and

00:00:30,160 --> 00:00:35,440
related container image builds tooling

00:00:32,239 --> 00:00:36,239
i'll get there soon all right so that's

00:00:35,440 --> 00:00:39,040
said

00:00:36,239 --> 00:00:40,320
let's go so when i talk about layered

00:00:39,040 --> 00:00:42,320
images here

00:00:40,320 --> 00:00:43,360
um i'm talking about something a bit

00:00:42,320 --> 00:00:46,399
different from the

00:00:43,360 --> 00:00:48,000
docker concept where each line on a

00:00:46,399 --> 00:00:51,600
docker file is a layer

00:00:48,000 --> 00:00:53,680
but i'm talking towards applications so

00:00:51,600 --> 00:00:55,920
we have like let's say we have a layer

00:00:53,680 --> 00:00:58,719
with a base image let's say it is the

00:00:55,920 --> 00:01:00,320
fedora base image and

00:00:58,719 --> 00:01:03,280
then i want to ship an application let's

00:01:00,320 --> 00:01:05,199
say i want to ship apache either

00:01:03,280 --> 00:01:07,040
then what i'll do is that i'll build a

00:01:05,199 --> 00:01:07,439
container with the fedora base image

00:01:07,040 --> 00:01:09,119
layer

00:01:07,439 --> 00:01:11,040
and then i'll add another layer on top

00:01:09,119 --> 00:01:13,280
of it which will be the apache one

00:01:11,040 --> 00:01:15,439
then i'll shift that obligation and then

00:01:13,280 --> 00:01:18,000
if me or someone else

00:01:15,439 --> 00:01:20,000
wants to see ship apache with some

00:01:18,000 --> 00:01:23,360
additional module installed

00:01:20,000 --> 00:01:26,960
then all we'll have to do is to get that

00:01:23,360 --> 00:01:27,600
uh contain an image with the apache

00:01:26,960 --> 00:01:29,920
layer on it

00:01:27,600 --> 00:01:31,600
and add another layer on that with the

00:01:29,920 --> 00:01:33,840
application i want to ship

00:01:31,600 --> 00:01:36,240
so this is what i'm talking about it's

00:01:33,840 --> 00:01:39,520
actually quite similar concept what

00:01:36,240 --> 00:01:40,000
of what it's done in docker but what we

00:01:39,520 --> 00:01:42,320
do

00:01:40,000 --> 00:01:44,640
in our tooling is that we squash some

00:01:42,320 --> 00:01:46,479
layers to make sure that each layer

00:01:44,640 --> 00:01:47,680
actually means something for the end

00:01:46,479 --> 00:01:51,439
user

00:01:47,680 --> 00:01:54,479
so that's it and but wait

00:01:51,439 --> 00:01:57,600
why do we want to ship layered images

00:01:54,479 --> 00:01:58,560
through fedora or and through a fedora

00:01:57,600 --> 00:02:01,840
registry

00:01:58,560 --> 00:02:03,840
if we do have docker hub why not

00:02:01,840 --> 00:02:06,000
just shipping images through docker hub

00:02:03,840 --> 00:02:08,879
well i'm not sure if you guys remember

00:02:06,000 --> 00:02:11,520
but november last year uh docker hub

00:02:08,879 --> 00:02:15,360
decided to introduce rate limits on

00:02:11,520 --> 00:02:18,640
image pools well that definitely broke

00:02:15,360 --> 00:02:19,599
my page of ci i'm not sure if it broke

00:02:18,640 --> 00:02:22,800
your shoe but

00:02:19,599 --> 00:02:24,720
well you know anyway uh but then you

00:02:22,800 --> 00:02:26,959
could say uh yeah but why

00:02:24,720 --> 00:02:28,480
not just move into another registry

00:02:26,959 --> 00:02:30,640
let's say why not using

00:02:28,480 --> 00:02:32,640
quay io for instance or any other

00:02:30,640 --> 00:02:34,720
registry well wait

00:02:32,640 --> 00:02:37,680
what what about all the cool features

00:02:34,720 --> 00:02:40,080
that fedora can uh

00:02:37,680 --> 00:02:40,959
give you and to the clear images that

00:02:40,080 --> 00:02:43,680
you're shipping

00:02:40,959 --> 00:02:44,720
for instance let's say we were using the

00:02:43,680 --> 00:02:46,720
mass rebuilds

00:02:44,720 --> 00:02:47,760
in the registers as well as we do for

00:02:46,720 --> 00:02:50,319
rpms

00:02:47,760 --> 00:02:52,400
well then we would have a fourth less

00:02:50,319 --> 00:02:53,760
dependency updates every six months how

00:02:52,400 --> 00:02:57,280
cool is that

00:02:53,760 --> 00:03:00,159
uh also uh we have other tooling set

00:02:57,280 --> 00:03:00,800
to provide automatic rebuilds so let's

00:03:00,159 --> 00:03:04,000
say

00:03:00,800 --> 00:03:06,000
that there is a cve found in in some

00:03:04,000 --> 00:03:07,360
component in one of the in one of the

00:03:06,000 --> 00:03:08,720
images in the registry

00:03:07,360 --> 00:03:12,400
let's say it was in the fedora based

00:03:08,720 --> 00:03:16,000
image let's say sudo had a cd

00:03:12,400 --> 00:03:20,560
well then all the images that

00:03:16,000 --> 00:03:23,599
are based on any image that had sudo

00:03:20,560 --> 00:03:27,120
are affected by the cd right well

00:03:23,599 --> 00:03:29,120
no problem we could re rebuild the base

00:03:27,120 --> 00:03:31,120
image with the image all the images that

00:03:29,120 --> 00:03:31,760
has sudo like in the base and then all

00:03:31,120 --> 00:03:33,519
the

00:03:31,760 --> 00:03:37,040
childs all the images that are on top of

00:03:33,519 --> 00:03:39,519
those can also be automatically rebuilt

00:03:37,040 --> 00:03:41,519
problem solved i'm not sure how people

00:03:39,519 --> 00:03:42,239
can deal with these sort of issues in

00:03:41,519 --> 00:03:44,080
docker hub

00:03:42,239 --> 00:03:46,400
and i think that's a huge issue like a

00:03:44,080 --> 00:03:48,239
lot of images with cdes

00:03:46,400 --> 00:03:49,599
being shipped around because they are

00:03:48,239 --> 00:03:53,040
just not updated

00:03:49,599 --> 00:03:56,159
right all right so

00:03:53,040 --> 00:03:57,840
for the ones of you who are not aware we

00:03:56,159 --> 00:04:00,439
do have a registry

00:03:57,840 --> 00:04:02,720
in fedor project it's

00:04:00,439 --> 00:04:05,840
registry.project.org

00:04:02,720 --> 00:04:07,519
moreover if you don't know uh from

00:04:05,840 --> 00:04:09,200
fedora 33

00:04:07,519 --> 00:04:11,519
if you try to pull an image let's say

00:04:09,200 --> 00:04:15,680
podman pool fedora

00:04:11,519 --> 00:04:18,799
or podman pool httpd the first place

00:04:15,680 --> 00:04:19,440
that uh your tooling will look for that

00:04:18,799 --> 00:04:21,440
image

00:04:19,440 --> 00:04:22,560
is in the fedora registry it's not on

00:04:21,440 --> 00:04:25,360
docker io

00:04:22,560 --> 00:04:26,320
uh from there it will look at to the red

00:04:25,360 --> 00:04:28,960
hat registry

00:04:26,320 --> 00:04:30,560
then the centos registry and only then

00:04:28,960 --> 00:04:33,759
if it cannot find the image

00:04:30,560 --> 00:04:36,400
it will look for it in docker io in

00:04:33,759 --> 00:04:36,800
rawhide and in the next fedora versions

00:04:36,400 --> 00:04:40,639
uh

00:04:36,800 --> 00:04:43,199
we will also add remove the centerless

00:04:40,639 --> 00:04:46,400
register from there and add way in the

00:04:43,199 --> 00:04:46,400
end after docker io

00:04:47,680 --> 00:04:52,320
so what can you ship in fedora layered

00:04:50,880 --> 00:04:54,960
images

00:04:52,320 --> 00:04:56,320
you can shape rpm packages you can ship

00:04:54,960 --> 00:04:59,199
configurations

00:04:56,320 --> 00:05:01,039
you can share documentation you can ship

00:04:59,199 --> 00:05:04,639
modules from modularity

00:05:01,039 --> 00:05:07,680
and you can also shape flat packs no

00:05:04,639 --> 00:05:09,919
the fedora registry is not a shortcut

00:05:07,680 --> 00:05:11,120
for people who don't want to package

00:05:09,919 --> 00:05:13,120
rpms

00:05:11,120 --> 00:05:14,639
uh you have to package your rpms and

00:05:13,120 --> 00:05:16,160
then you install them in the images and

00:05:14,639 --> 00:05:16,800
then you ship them it's just another

00:05:16,160 --> 00:05:20,240
meme

00:05:16,800 --> 00:05:24,720
to ship a content fedora content

00:05:20,240 --> 00:05:27,759
right and how can i ship

00:05:24,720 --> 00:05:28,240
fedora layered images well it's the

00:05:27,759 --> 00:05:30,960
process

00:05:28,240 --> 00:05:32,160
is quite similar to the one that we use

00:05:30,960 --> 00:05:34,720
for rpm packages

00:05:32,160 --> 00:05:36,320
you're going to submit your docker file

00:05:34,720 --> 00:05:37,360
and all your configuration files and

00:05:36,320 --> 00:05:40,479
documentation

00:05:37,360 --> 00:05:41,840
through a package review process and

00:05:40,479 --> 00:05:44,880
after that's approved

00:05:41,840 --> 00:05:45,360
you'll get a disk repository and then

00:05:44,880 --> 00:05:47,840
you

00:05:45,360 --> 00:05:49,039
you're going to to push your your code

00:05:47,840 --> 00:05:50,240
in there and then you're going to use

00:05:49,039 --> 00:05:53,280
that package

00:05:50,240 --> 00:05:55,360
to make a request to koji

00:05:53,280 --> 00:05:57,120
then code you will delegate the the

00:05:55,360 --> 00:05:59,759
execution to osps

00:05:57,120 --> 00:06:00,400
and then osps will push the final built

00:05:59,759 --> 00:06:03,919
image

00:06:00,400 --> 00:06:06,160
to a candidate registry after that

00:06:03,919 --> 00:06:07,759
you can submit updates to body and then

00:06:06,160 --> 00:06:09,280
body will

00:06:07,759 --> 00:06:10,960
transfer that image from the candidate

00:06:09,280 --> 00:06:15,919
registry to the code to the

00:06:10,960 --> 00:06:15,919
final registry the registry.project.io

00:06:16,000 --> 00:06:19,039
okay so what is osps that i've been

00:06:18,319 --> 00:06:22,080
talking about

00:06:19,039 --> 00:06:24,560
osps is the openshift build service

00:06:22,080 --> 00:06:25,600
osps is a set of tools to build and to

00:06:24,560 --> 00:06:28,880
release layered

00:06:25,600 --> 00:06:29,919
container images as i said it's not a

00:06:28,880 --> 00:06:32,400
single

00:06:29,919 --> 00:06:34,000
program it's like a set of them and you

00:06:32,400 --> 00:06:37,199
can find the code if you're curious

00:06:34,000 --> 00:06:40,800
in github.com slash continued system

00:06:37,199 --> 00:06:43,440
um and you can also read the the

00:06:40,800 --> 00:06:45,520
documentation you know sps.reader.com if

00:06:43,440 --> 00:06:49,360
you're curious as well

00:06:45,520 --> 00:06:51,360
okay so how how does that work

00:06:49,360 --> 00:06:53,440
so when you run fat package from your

00:06:51,360 --> 00:06:57,520
disk git repository containing your

00:06:53,440 --> 00:07:01,440
your container sources

00:06:57,520 --> 00:07:02,720
um fat package will send a request to

00:07:01,440 --> 00:07:05,280
koji

00:07:02,720 --> 00:07:07,039
and koji will delegate that build to a

00:07:05,280 --> 00:07:08,800
special koji builder

00:07:07,039 --> 00:07:10,240
that has this kojic container build

00:07:08,800 --> 00:07:12,720
plugin installed

00:07:10,240 --> 00:07:14,240
this plugin will then make some calls

00:07:12,720 --> 00:07:15,199
through openshift to an open shift

00:07:14,240 --> 00:07:17,919
cluster

00:07:15,199 --> 00:07:18,800
and then this openshift this openshift

00:07:17,919 --> 00:07:22,080
build will

00:07:18,800 --> 00:07:23,199
start a custom build in one or many

00:07:22,080 --> 00:07:25,919
architectures

00:07:23,199 --> 00:07:27,039
and then it will build your image for

00:07:25,919 --> 00:07:28,000
all the architectures that were

00:07:27,039 --> 00:07:29,599
requested

00:07:28,000 --> 00:07:31,840
uh for now in fedora i think only the

00:07:29,599 --> 00:07:36,080
x86 uh

00:07:31,840 --> 00:07:38,560
cluster is activated um and after that

00:07:36,080 --> 00:07:39,520
it will push all the images to the

00:07:38,560 --> 00:07:42,240
content registries

00:07:39,520 --> 00:07:43,759
in this case we're pushing to the

00:07:42,240 --> 00:07:47,440
candidate registry

00:07:43,759 --> 00:07:47,440
so body can pick it up later

00:07:47,840 --> 00:07:54,479
okay so let's see let's go hands-on here

00:07:52,479 --> 00:07:59,280
let me know if you guys can not see my

00:07:54,479 --> 00:08:03,360
my terminal window okay

00:07:59,280 --> 00:08:06,319
okay so i packaged a container just for

00:08:03,360 --> 00:08:06,960
for for this session here we did it this

00:08:06,319 --> 00:08:09,280
week

00:08:06,960 --> 00:08:10,400
uh so this is a discus repository for

00:08:09,280 --> 00:08:13,759
the container uh

00:08:10,400 --> 00:08:17,039
if i run git remote here

00:08:13,759 --> 00:08:19,199
you see that uh uh it's in this kit and

00:08:17,039 --> 00:08:22,479
uh there's a special namespace

00:08:19,199 --> 00:08:25,360
uh in there in baguio just for

00:08:22,479 --> 00:08:26,879
for containers so it's under the

00:08:25,360 --> 00:08:29,680
container namespace

00:08:26,879 --> 00:08:31,599
uh and what we have here is a container

00:08:29,680 --> 00:08:32,479
a dockerfile which is the most important

00:08:31,599 --> 00:08:35,440
file here

00:08:32,479 --> 00:08:36,320
uh and then we may have a container.dml

00:08:35,440 --> 00:08:38,399
file

00:08:36,320 --> 00:08:39,760
with with some additional configurations

00:08:38,399 --> 00:08:42,959
for your your

00:08:39,760 --> 00:08:44,560
container and also it's nice to have a

00:08:42,959 --> 00:08:46,880
help.md

00:08:44,560 --> 00:08:47,920
in there as well uh the readme file just

00:08:46,880 --> 00:08:49,760
came with the disk it

00:08:47,920 --> 00:08:51,200
uh i just forgot to remove this one and

00:08:49,760 --> 00:08:52,080
we don't need this here since we have

00:08:51,200 --> 00:08:54,959
the documentation

00:08:52,080 --> 00:08:55,600
help.nb uh of course this is a markdown

00:08:54,959 --> 00:08:58,399
file

00:08:55,600 --> 00:08:59,360
but during the build process osps will

00:08:58,399 --> 00:09:02,560
pick this file

00:08:59,360 --> 00:09:05,279
and will transform it into a main page

00:09:02,560 --> 00:09:07,040
in the root of your container image i'll

00:09:05,279 --> 00:09:09,519
show you later if we have time

00:09:07,040 --> 00:09:11,760
uh so let's take a look in the

00:09:09,519 --> 00:09:15,760
dockerfile here

00:09:11,760 --> 00:09:18,080
so we'll start with a from uh

00:09:15,760 --> 00:09:20,080
we're starting from the base image right

00:09:18,080 --> 00:09:22,399
which is the fedoraproject.org

00:09:20,080 --> 00:09:23,440
fedora latest so we're getting whatever

00:09:22,399 --> 00:09:25,440
is latest

00:09:23,440 --> 00:09:26,560
whatever stack it listed latest in that

00:09:25,440 --> 00:09:28,959
registry

00:09:26,560 --> 00:09:30,800
and then we have a set of labels and

00:09:28,959 --> 00:09:33,279
some of these you must add

00:09:30,800 --> 00:09:34,160
to your docker file for instance this

00:09:33,279 --> 00:09:37,680
convert head

00:09:34,160 --> 00:09:41,120
component here is the name of the

00:09:37,680 --> 00:09:44,720
the package in

00:09:41,120 --> 00:09:45,279
in koji right so this is where we'll

00:09:44,720 --> 00:09:47,519
find

00:09:45,279 --> 00:09:49,839
your builds in koji so this is the name

00:09:47,519 --> 00:09:52,399
of the package

00:09:49,839 --> 00:09:53,279
then you have the name and this is the

00:09:52,399 --> 00:09:55,519
name

00:09:53,279 --> 00:09:57,360
that is going to be pushed name of the

00:09:55,519 --> 00:10:00,240
image that's going to be pushed

00:09:57,360 --> 00:10:00,959
to the container registry then you have

00:10:00,240 --> 00:10:02,839
a version

00:10:00,959 --> 00:10:04,079
uh i'll explain why this is set to zero

00:10:02,839 --> 00:10:06,480
later

00:10:04,079 --> 00:10:07,519
and that's that's all the things you

00:10:06,480 --> 00:10:09,680
must add here

00:10:07,519 --> 00:10:11,839
you see that we were talking about koji

00:10:09,680 --> 00:10:14,640
right so we have an nvr

00:10:11,839 --> 00:10:16,399
here i just added a name and a version

00:10:14,640 --> 00:10:19,839
that's because for the release

00:10:16,399 --> 00:10:22,480
osbs has and special uh

00:10:19,839 --> 00:10:24,160
code path where it will set the release

00:10:22,480 --> 00:10:25,680
for you automatically

00:10:24,160 --> 00:10:28,079
given that you never set the release

00:10:25,680 --> 00:10:29,680
here before right so it will start from

00:10:28,079 --> 00:10:31,200
one and then every time you rebuild the

00:10:29,680 --> 00:10:33,200
image it will bump the release for you

00:10:31,200 --> 00:10:35,839
automatically

00:10:33,200 --> 00:10:37,120
so you don't have to deal with it here

00:10:35,839 --> 00:10:38,880
and then

00:10:37,120 --> 00:10:40,240
there's some other levels but they're

00:10:38,880 --> 00:10:42,560
optional

00:10:40,240 --> 00:10:43,519
and then i'm just like installing rpms

00:10:42,560 --> 00:10:45,200
and

00:10:43,519 --> 00:10:47,120
preparing the container image exposing

00:10:45,200 --> 00:10:49,600
ports set an entry point

00:10:47,120 --> 00:10:50,959
whatever just small container image

00:10:49,600 --> 00:10:53,440
right

00:10:50,959 --> 00:10:55,760
other than this we have the

00:10:53,440 --> 00:10:58,640
container.emo file

00:10:55,760 --> 00:11:00,480
uh here you can specify among other

00:10:58,640 --> 00:11:02,160
things that you can see in the osps

00:11:00,480 --> 00:11:05,440
documentation if you're curious

00:11:02,160 --> 00:11:07,519
but additional tags for your image uh

00:11:05,440 --> 00:11:09,680
so here i want to set a tag that's

00:11:07,519 --> 00:11:12,959
called latest and i also add a tag

00:11:09,680 --> 00:11:16,880
called devconf.cc right

00:11:12,959 --> 00:11:18,800
um all right

00:11:16,880 --> 00:11:20,079
this is it so if i want to build this

00:11:18,800 --> 00:11:24,640
image i will

00:11:20,079 --> 00:11:24,640
just have to come here and

00:11:24,959 --> 00:11:31,920
flat package container build

00:11:29,200 --> 00:11:31,920
and that's it

00:11:36,800 --> 00:11:40,800
just like in an rpm build but instead of

00:11:39,600 --> 00:11:43,519
just that package build

00:11:40,800 --> 00:11:45,120
container views let's not wait for this

00:11:43,519 --> 00:11:47,440
because it may take a while

00:11:45,120 --> 00:11:49,519
we can circle back in there later i

00:11:47,440 --> 00:11:52,720
already built this image before anyway

00:11:49,519 --> 00:11:56,000
so we can find it in the registry um

00:11:52,720 --> 00:11:59,600
so let's go for

00:11:56,000 --> 00:12:02,639
this boardman

00:11:59,600 --> 00:12:11,839
pull ranges

00:12:02,639 --> 00:12:11,839
three dots

00:12:20,000 --> 00:12:27,760
oops this second guys

00:12:25,360 --> 00:12:31,760
oh of course yeah i didn't push and

00:12:27,760 --> 00:12:31,760
update your body so it's candidate

00:12:35,100 --> 00:12:39,839
[Music]

00:12:36,839 --> 00:12:39,839
um

00:12:49,600 --> 00:12:54,720
there's definitely something out here i

00:12:51,200 --> 00:12:54,720
do have like just seven guys

00:12:56,000 --> 00:13:07,839
i do have it here so

00:13:11,440 --> 00:13:15,680
let's take a look at the tags so reg is

00:13:14,720 --> 00:13:18,079
a tool to

00:13:15,680 --> 00:13:19,920
to query container registries it's in

00:13:18,079 --> 00:13:21,279
github as well if you're curious we can

00:13:19,920 --> 00:13:26,320
talk about this later

00:13:21,279 --> 00:13:34,880
um yeah so let's try now

00:13:26,320 --> 00:13:36,560
close man pool i did type something

00:13:34,880 --> 00:13:38,240
wrong there you guys probably know and i

00:13:36,560 --> 00:13:38,560
don't so i want to keep looking at it i

00:13:38,240 --> 00:13:40,560
can

00:13:38,560 --> 00:13:42,399
see the video later and see what was

00:13:40,560 --> 00:13:45,440
wrong with the url

00:13:42,399 --> 00:13:46,320
but that's it of course i didn't

00:13:45,440 --> 00:13:49,279
specified

00:13:46,320 --> 00:13:50,480
a level so it's pulling the latest no

00:13:49,279 --> 00:13:53,600
worries because the latest

00:13:50,480 --> 00:13:57,440
is always also the one diagnostic

00:13:53,600 --> 00:13:57,440
so it's all good

00:13:58,320 --> 00:14:03,600
i should probably have downloaded this

00:13:59,839 --> 00:14:06,399
image before but well

00:14:03,600 --> 00:14:06,399
now we have to wait

00:14:11,279 --> 00:14:16,240
all right so while this happens here i

00:14:14,320 --> 00:14:19,839
can talk about that version uh uh

00:14:16,240 --> 00:14:22,079
uh level in the image for the koji nvr

00:14:19,839 --> 00:14:25,440
and for the the image as well

00:14:22,079 --> 00:14:26,959
so why is that set to zero uh this

00:14:25,440 --> 00:14:29,279
this is interesting this is like an

00:14:26,959 --> 00:14:31,199
ongoing discussion we still have to

00:14:29,279 --> 00:14:33,600
learn how to deal with that individual

00:14:31,199 --> 00:14:36,480
infrastructure but the thing is

00:14:33,600 --> 00:14:38,000
that if you if you paid attention in my

00:14:36,480 --> 00:14:41,760
docker file i wasn't

00:14:38,000 --> 00:14:42,959
specifying a a version for the package

00:14:41,760 --> 00:14:45,040
that i installed

00:14:42,959 --> 00:14:46,959
it means that every time i build the

00:14:45,040 --> 00:14:50,000
image it will pick

00:14:46,959 --> 00:14:53,360
whatever is uh released

00:14:50,000 --> 00:14:56,880
for the fedora version i am building so

00:14:53,360 --> 00:14:57,519
i would have to keep changing the the

00:14:56,880 --> 00:15:00,959
version

00:14:57,519 --> 00:15:01,360
in the docker file according to whatever

00:15:00,959 --> 00:15:04,480
is

00:15:01,360 --> 00:15:06,880
uh released in fedora and that's

00:15:04,480 --> 00:15:08,320
extremely error-prone so for now people

00:15:06,880 --> 00:15:12,639
decided that

00:15:08,320 --> 00:15:15,600
um the the version uh

00:15:12,639 --> 00:15:17,760
level will be set to zero uh there are

00:15:15,600 --> 00:15:20,079
some alternatives to to deal with that

00:15:17,760 --> 00:15:22,079
like trying to to fetch that during

00:15:20,079 --> 00:15:24,000
builds time but it's not that simple

00:15:22,079 --> 00:15:25,279
um if you want to make part of the

00:15:24,000 --> 00:15:27,760
discussions just

00:15:25,279 --> 00:15:29,759
take a look at the container sig in

00:15:27,760 --> 00:15:33,040
fedora which i'll talk about later

00:15:29,759 --> 00:15:35,199
and anyway that's it

00:15:33,040 --> 00:15:37,120
the other thing is that as i said one of

00:15:35,199 --> 00:15:40,160
the cool things here is that after

00:15:37,120 --> 00:15:42,079
osbs finishes the build it pushes

00:15:40,160 --> 00:15:43,199
i'm not sure if you guys are familiar

00:15:42,079 --> 00:15:46,240
with uh

00:15:43,199 --> 00:15:47,680
how docker manifests work but we push

00:15:46,240 --> 00:15:50,480
manifest lists

00:15:47,680 --> 00:15:52,079
to the registry so we can actually have

00:15:50,480 --> 00:15:55,199
multiple uh images

00:15:52,079 --> 00:15:55,600
in for for for each tag right meaning

00:15:55,199 --> 00:15:58,399
that

00:15:55,600 --> 00:15:59,839
we can have images built for several

00:15:58,399 --> 00:16:02,720
architectures

00:15:59,839 --> 00:16:03,440
uh i'll probably use rag soon to show

00:16:02,720 --> 00:16:05,680
you guys

00:16:03,440 --> 00:16:09,839
some of this let's just finish

00:16:05,680 --> 00:16:09,839
downloading this guy

00:16:10,079 --> 00:16:23,839
i play my bad internet connection

00:16:24,880 --> 00:16:37,839
i can't all stop in there because

00:16:28,800 --> 00:16:37,839
otherwise you guys will see like anyway

00:16:40,079 --> 00:16:43,600
uh are there any questions in the

00:16:41,759 --> 00:16:47,440
question and answers uh

00:16:43,600 --> 00:16:47,440
we may have time for one right now

00:16:48,000 --> 00:16:53,920
so we have one question uh let's say i

00:16:51,519 --> 00:16:55,040
have two images where first one depends

00:16:53,920 --> 00:16:57,519
to the second

00:16:55,040 --> 00:16:59,920
is there any plan for chain rebuilds in

00:16:57,519 --> 00:17:03,519
federal land

00:16:59,920 --> 00:17:06,720
plans for what sorry plans for

00:17:03,519 --> 00:17:08,880
chain rebuilds in federal land

00:17:06,720 --> 00:17:10,880
oh i see so that's the thing we have the

00:17:08,880 --> 00:17:13,919
tooling uh in place right

00:17:10,880 --> 00:17:15,439
um there are no plans because uh that's

00:17:13,919 --> 00:17:16,160
another problem i'll talk about later

00:17:15,439 --> 00:17:18,720
but

00:17:16,160 --> 00:17:20,240
uh the container sig is currently uh

00:17:18,720 --> 00:17:23,839
quite inactive

00:17:20,240 --> 00:17:27,199
so what we do need is people uh uh

00:17:23,839 --> 00:17:30,000
leading these efforts uh we we don't

00:17:27,199 --> 00:17:30,960
and i think everybody that could be

00:17:30,000 --> 00:17:34,480
involved or that

00:17:30,960 --> 00:17:37,520
it's barely involved it's also like

00:17:34,480 --> 00:17:39,520
quite busy with lots of stuff so

00:17:37,520 --> 00:17:40,799
that's the thing but yeah that would be

00:17:39,520 --> 00:17:44,320
cool that's something i would

00:17:40,799 --> 00:17:47,840
love to pursue okay so we finished

00:17:44,320 --> 00:17:47,840
downloading it so

00:17:48,640 --> 00:17:53,039
design image right so

00:17:53,200 --> 00:17:55,840
let's try it

00:17:56,480 --> 00:18:04,960
i will get stuff from here because

00:18:00,240 --> 00:18:04,960
you know better this way

00:18:07,840 --> 00:18:11,760
okay so i have my personal blog here and

00:18:10,559 --> 00:18:14,240
i will just run a little

00:18:11,760 --> 00:18:15,600
here with the image uh you remember that

00:18:14,240 --> 00:18:19,280
there was a level uh called

00:18:15,600 --> 00:18:22,799
run image in the in in the docker file

00:18:19,280 --> 00:18:24,320
uh usually we want to add the comments

00:18:22,799 --> 00:18:26,240
that the user

00:18:24,320 --> 00:18:28,160
are going to to use to run the image

00:18:26,240 --> 00:18:30,799
there just to make their lives easier

00:18:28,160 --> 00:18:30,799
because you know

00:18:32,720 --> 00:18:35,919
so there you go there's a server running

00:18:34,880 --> 00:18:38,000
uh

00:18:35,919 --> 00:18:39,600
here i'm not going to go in there but it

00:18:38,000 --> 00:18:43,039
did make the build for me

00:18:39,600 --> 00:18:45,760
whatever um if you guys want to see the

00:18:43,039 --> 00:18:49,280
blog you can thank me later

00:18:45,760 --> 00:18:51,600
all right so the image works uh there's

00:18:49,280 --> 00:18:57,600
a cool thing i want to show let's see

00:18:51,600 --> 00:18:59,840
if this works it's this guy here

00:18:57,600 --> 00:19:01,280
uh remember that i told you that we're

00:18:59,840 --> 00:19:03,440
shipping a man page

00:19:01,280 --> 00:19:04,720
uh in the root of the image if you can

00:19:03,440 --> 00:19:10,559
see this bit here

00:19:04,720 --> 00:19:10,559
i'm trying to uh direct

00:19:11,280 --> 00:19:17,600
so there you go so it's just

00:19:14,640 --> 00:19:19,440
a tutorial on how to use the image and

00:19:17,600 --> 00:19:23,360
the boards that's going to bind to

00:19:19,440 --> 00:19:26,000
whatever whatever okay as i said

00:19:23,360 --> 00:19:28,240
all you need is a help.md file you see

00:19:26,000 --> 00:19:28,240
that

00:19:28,480 --> 00:19:32,559
it's a it's a markdown file but it does

00:19:31,760 --> 00:19:34,799
get

00:19:32,559 --> 00:19:36,640
let's get converted to a main page in

00:19:34,799 --> 00:19:41,360
the root of the image

00:19:36,640 --> 00:19:41,360
um all right now

00:19:41,679 --> 00:19:45,840
do she have five minutes or should i

00:19:43,280 --> 00:19:48,559
stop for question answers now

00:19:45,840 --> 00:19:49,360
uh we still have five minutes so you can

00:19:48,559 --> 00:19:51,600
go ahead

00:19:49,360 --> 00:19:53,200
okay we don't have any more questions in

00:19:51,600 --> 00:19:57,039
the q a so far

00:19:53,200 --> 00:20:01,200
so i'll keep showing things um

00:19:57,039 --> 00:20:06,000
you see if i take a look

00:20:01,200 --> 00:20:08,960
at the manifest list for that image

00:20:06,000 --> 00:20:08,960
oh this guy's cool

00:20:09,360 --> 00:20:15,039
i love this too okay so if we take a

00:20:12,640 --> 00:20:18,720
look at the manifest list for the image

00:20:15,039 --> 00:20:22,320
we can see that it has only

00:20:18,720 --> 00:20:26,559
it was only built for md64 for

00:20:22,320 --> 00:20:30,799
x86 right and then

00:20:26,559 --> 00:20:30,799
we could also take a look at the

00:20:31,520 --> 00:20:38,240
manifest of the image you will see

00:20:34,799 --> 00:20:40,960
that where is that okay

00:20:38,240 --> 00:20:42,240
it has only two layers here you see so

00:20:40,960 --> 00:20:45,120
the first layer

00:20:42,240 --> 00:20:46,559
is the fedora base image as i said and

00:20:45,120 --> 00:20:49,679
then the second layer

00:20:46,559 --> 00:20:52,400
is the the google image but

00:20:49,679 --> 00:20:54,400
as you can see in the docker file there

00:20:52,400 --> 00:20:55,679
are several lines here it was supposed

00:20:54,400 --> 00:20:58,559
to have

00:20:55,679 --> 00:21:00,840
more layers but it doesn't because we

00:20:58,559 --> 00:21:03,679
squash the images in fedora

00:21:00,840 --> 00:21:05,200
right uh what else let me see if i had

00:21:03,679 --> 00:21:08,240
anything else

00:21:05,200 --> 00:21:11,440
for the demo oh yeah

00:21:08,240 --> 00:21:11,440
this is cool as well

00:21:12,000 --> 00:21:17,840
if we take a look at the roof directory

00:21:18,159 --> 00:21:21,919
i'm not oh let's just

00:21:27,440 --> 00:21:35,200
learn this one there will always be

00:21:31,200 --> 00:21:35,200
a build info file in there

00:21:37,600 --> 00:21:44,080
and build info directory in there

00:21:41,039 --> 00:21:46,720
and it always shows the docker file

00:21:44,080 --> 00:21:48,799
of your image it usually shows the

00:21:46,720 --> 00:21:50,320
docker files for all the layers

00:21:48,799 --> 00:21:53,280
we don't have the docker file for the

00:21:50,320 --> 00:21:56,320
base image because the base image

00:21:53,280 --> 00:21:57,600
in fedora specifically is not built in

00:21:56,320 --> 00:22:01,360
obvious

00:21:57,600 --> 00:22:03,200
due to some um just some

00:22:01,360 --> 00:22:05,200
hardware constraints that we have in

00:22:03,200 --> 00:22:08,880
there but that's it

00:22:05,200 --> 00:22:11,120
if i show you the docker file

00:22:08,880 --> 00:22:13,360
that's shipped in the image you'll see

00:22:11,120 --> 00:22:16,240
something quite interesting as well

00:22:13,360 --> 00:22:18,559
it's different from my dockerfile uh we

00:22:16,240 --> 00:22:21,360
perform some uh substitutions

00:22:18,559 --> 00:22:21,919
in there for instance we set the release

00:22:21,360 --> 00:22:24,559
level

00:22:21,919 --> 00:22:26,159
as i as i said in some other levels we

00:22:24,559 --> 00:22:29,440
add that

00:22:26,159 --> 00:22:31,679
main page in the image and

00:22:29,440 --> 00:22:33,039
we make some substitutions in the from

00:22:31,679 --> 00:22:35,840
line just to

00:22:33,039 --> 00:22:37,520
to make it easier to pull the image from

00:22:35,840 --> 00:22:40,640
the internal registry

00:22:37,520 --> 00:22:43,120
during the build all right this is it

00:22:40,640 --> 00:22:44,080
let me go back here uh we still have two

00:22:43,120 --> 00:22:47,120
minutes

00:22:44,080 --> 00:22:48,640
so let me talk about the condensing this

00:22:47,120 --> 00:22:49,679
is the page for the issues of the

00:22:48,640 --> 00:22:51,919
container sig

00:22:49,679 --> 00:22:54,000
in fedora so if you want to interact if

00:22:51,919 --> 00:22:57,039
you want to lead some efforts in there

00:22:54,000 --> 00:22:58,159
if you want to ask questions just go to

00:22:57,039 --> 00:23:01,360
this page

00:22:58,159 --> 00:23:01,360
and open a file an issue

00:23:02,000 --> 00:23:05,360
the tooling for and the processes still

00:23:04,960 --> 00:23:08,400
need

00:23:05,360 --> 00:23:11,120
a lot of improvements for instance we

00:23:08,400 --> 00:23:12,960
do we want and can you can we make those

00:23:11,120 --> 00:23:15,760
automated version levels

00:23:12,960 --> 00:23:17,039
so we have for each application we have

00:23:15,760 --> 00:23:19,520
the container

00:23:17,039 --> 00:23:20,480
labeled in the registry with the same

00:23:19,520 --> 00:23:23,840
level

00:23:20,480 --> 00:23:24,799
with the same version uh as we have them

00:23:23,840 --> 00:23:27,919
in fedora

00:23:24,799 --> 00:23:31,840
in the rpms uh how about these tags

00:23:27,919 --> 00:23:36,000
for the the contributes

00:23:31,840 --> 00:23:38,880
and also for now we are building the

00:23:36,000 --> 00:23:39,440
the container images in the same koji

00:23:38,880 --> 00:23:42,480
package

00:23:39,440 --> 00:23:43,760
as the packages that uh are going to be

00:23:42,480 --> 00:23:44,880
shaped of the main package that's going

00:23:43,760 --> 00:23:47,440
to be shipped in the image

00:23:44,880 --> 00:23:48,640
for instance like if you go to the

00:23:47,440 --> 00:23:51,440
google package

00:23:48,640 --> 00:23:52,080
in in koji now you see that there's a

00:23:51,440 --> 00:23:55,279
mix

00:23:52,080 --> 00:23:57,679
of container image builds and rpm builds

00:23:55,279 --> 00:23:59,600
and also the container review process

00:23:57,679 --> 00:24:03,200
this still needs a lot of love

00:23:59,600 --> 00:24:04,799
so uh we're still like trying to figure

00:24:03,200 --> 00:24:09,520
out how to do these things

00:24:04,799 --> 00:24:09,520
so everybody's much welcome to help

00:24:10,400 --> 00:24:13,520
you guys have any questions we still

00:24:12,159 --> 00:24:16,159
have like

00:24:13,520 --> 00:24:18,320
a couple minutes and here are some

00:24:16,159 --> 00:24:21,600
useful urls

00:24:18,320 --> 00:24:28,960
for the guidelines of the container sig

00:24:21,600 --> 00:24:28,960

YouTube URL: https://www.youtube.com/watch?v=cG-JKD9Ts-I


