Title: Immutable infrastructure, containers & the future of microservices - Adam Miller
Publication date: 2016-02-11
Playlist: DevConf.cz 2016
Description: 
	Many current trends in software development and deployment are based around the concept of microservices, small independent services interconnected via application programming interfaces (APIs).

The concept of immutable infrastructure is another area of application life cycle that’s gaining attention. In immutable infrastructure, we deploy immutable components that are replaced each time we deploy instead of in-place upgrades.

In this session, we’ll discuss the use of containers as a delivery mechanism for microservices following the immutable infrastructure paradigm. We’ll show this in the context of Project Atomic and OpenShift.

Presentation:
 http://bit.ly/1RwC4QW
Captions: 
	00:00:00,000 --> 00:00:05,509
one thing that this enables and and I

00:00:02,250 --> 00:00:10,820
think this is probably something that is

00:00:05,509 --> 00:00:14,190
kind of popular is in a traditional

00:00:10,820 --> 00:00:16,320
system environment or it's interesting

00:00:14,190 --> 00:00:17,970
that vote virtualization has become

00:00:16,320 --> 00:00:19,859
traditional in the sense that it was

00:00:17,970 --> 00:00:22,199
once kind of the late-breaking but it is

00:00:19,859 --> 00:00:23,310
kind of traditional technology now most

00:00:22,199 --> 00:00:24,630
IT departments are running in

00:00:23,310 --> 00:00:27,480
virtualization most of us are running in

00:00:24,630 --> 00:00:32,040
our laptops to do daily development work

00:00:27,480 --> 00:00:34,050
those kinds of things you can migrate an

00:00:32,040 --> 00:00:36,510
application let's pretend that it's

00:00:34,050 --> 00:00:40,500
written in language x I don't want to

00:00:36,510 --> 00:00:43,500
pick one because I don't want to get

00:00:40,500 --> 00:00:45,840
into discussions of religion while I'm

00:00:43,500 --> 00:00:48,420
all I'm presenting the lingua Jackson

00:00:45,840 --> 00:00:50,399
language X version one may or may not be

00:00:48,420 --> 00:00:52,890
compatible with version 2 let's say for

00:00:50,399 --> 00:00:55,980
example Fedora 22 is is still sitting on

00:00:52,890 --> 00:00:57,960
language language x version 1 but we

00:00:55,980 --> 00:00:59,879
want to take advantage of some new

00:00:57,960 --> 00:01:03,030
feature or some new performance

00:00:59,879 --> 00:01:07,140
component that has come out for our 23

00:01:03,030 --> 00:01:10,439
well we can take a platform a platform

00:01:07,140 --> 00:01:12,810
container base image based on 22 put our

00:01:10,439 --> 00:01:15,509
application inside of that container and

00:01:12,810 --> 00:01:19,380
then run that container on fedora 23 and

00:01:15,509 --> 00:01:25,409
this enables us the ability to kind of

00:01:19,380 --> 00:01:30,000
take application runtimes away from

00:01:25,409 --> 00:01:32,460
being bound to the host in a way that

00:01:30,000 --> 00:01:34,860
allows us to actually not have to

00:01:32,460 --> 00:01:37,189
duplicate the operating system so we

00:01:34,860 --> 00:01:41,130
don't need to duplicate the colonel and

00:01:37,189 --> 00:01:43,020
the entire file system tree and G Lib C

00:01:41,130 --> 00:01:44,100
and lang packs and all of these

00:01:43,020 --> 00:01:46,200
different things won't need to duplicate

00:01:44,100 --> 00:01:48,600
that we need to know need to share that

00:01:46,200 --> 00:01:50,670
across storage now I do want to say that

00:01:48,600 --> 00:01:54,149
containers don't necessarily replace

00:01:50,670 --> 00:01:55,890
virtualization in many cases because of

00:01:54,149 --> 00:01:58,680
the nature of different aspects of it

00:01:55,890 --> 00:02:00,560
but you do have this new ability to do

00:01:58,680 --> 00:02:05,759
that you kind of are afforded this this

00:02:00,560 --> 00:02:10,560
luxury so moving on something that has

00:02:05,759 --> 00:02:12,120
kind of sprung up or I'm not sure which

00:02:10,560 --> 00:02:13,550
is the chicken and the egg in this one

00:02:12,120 --> 00:02:16,590
because

00:02:13,550 --> 00:02:18,510
microservices have become more popular

00:02:16,590 --> 00:02:21,270
as a side effect containers but

00:02:18,510 --> 00:02:22,710
containers also are becoming the de

00:02:21,270 --> 00:02:25,340
facto standard mechanism by which we

00:02:22,710 --> 00:02:27,570
deliver microservices so Mike Rosario

00:02:25,340 --> 00:02:31,700
services again this is another topic if

00:02:27,570 --> 00:02:35,580
not entirely new I like to reference it

00:02:31,700 --> 00:02:36,840
back to the microkernel idea and micro

00:02:35,580 --> 00:02:38,610
kernels have existed for a very very

00:02:36,840 --> 00:02:45,630
long time these can absolutely buy beer

00:02:38,610 --> 00:02:49,620
in in most countries and the idea is

00:02:45,630 --> 00:02:51,000
that you have different small components

00:02:49,620 --> 00:02:52,410
of the system that interact with one

00:02:51,000 --> 00:02:55,680
another through some kind of

00:02:52,410 --> 00:02:56,700
inter-process communication and you

00:02:55,680 --> 00:02:57,930
could potentially have that inter

00:02:56,700 --> 00:03:00,270
process communication be across the

00:02:57,930 --> 00:03:02,970
network and if we were to default to a

00:03:00,270 --> 00:03:04,650
network we could then geographically

00:03:02,970 --> 00:03:06,870
dispersed components of the system and

00:03:04,650 --> 00:03:08,459
we could replicate components of them

00:03:06,870 --> 00:03:11,580
and load balance different components

00:03:08,459 --> 00:03:14,070
and allow them to go up and down and and

00:03:11,580 --> 00:03:15,810
that's micro kernels kind of do that and

00:03:14,070 --> 00:03:18,090
for anybody who's vaguely familiar with

00:03:15,810 --> 00:03:19,680
micro kernels likely knows about the

00:03:18,090 --> 00:03:21,540
amoeba operating system and that's kind

00:03:19,680 --> 00:03:23,250
of what they did was they where had the

00:03:21,540 --> 00:03:24,660
ability to have multiple network network

00:03:23,250 --> 00:03:26,640
connected computers have different

00:03:24,660 --> 00:03:29,130
components of the low-level system

00:03:26,640 --> 00:03:31,080
running anywhere on the network and it

00:03:29,130 --> 00:03:32,489
presented itself as a single computer we

00:03:31,080 --> 00:03:35,940
take that idea kind of up the stat

00:03:32,489 --> 00:03:40,620
further up the the application stack and

00:03:35,940 --> 00:03:43,079
our kind of higher Earl I guess data

00:03:40,620 --> 00:03:45,810
model for what layers of the stack there

00:03:43,079 --> 00:03:47,959
are four applications we we have very

00:03:45,810 --> 00:03:51,630
similar parallels in the sense that we

00:03:47,959 --> 00:03:53,430
can now have tiny components of what

00:03:51,630 --> 00:03:55,829
were previously monolithic systems and

00:03:53,430 --> 00:03:57,420
kind of move them around and you could

00:03:55,829 --> 00:03:58,560
effectively argue that system

00:03:57,420 --> 00:04:00,269
administrators have been doing this for

00:03:58,560 --> 00:04:01,860
a very long time using pipes I mean you

00:04:00,269 --> 00:04:03,600
you effectively have these tiny

00:04:01,860 --> 00:04:05,700
applications that do one thing and do

00:04:03,600 --> 00:04:07,110
them well and you submit inputs through

00:04:05,700 --> 00:04:08,700
one side of a inter process

00:04:07,110 --> 00:04:10,320
communication mechanisms and comes out

00:04:08,700 --> 00:04:12,150
the other side and then you can kind of

00:04:10,320 --> 00:04:15,360
daisy chain those together to create a

00:04:12,150 --> 00:04:17,970
solution now you're insane you know like

00:04:15,360 --> 00:04:21,479
30 utility one-liner is maybe not the

00:04:17,970 --> 00:04:23,490
best way to run an enterprise but it's

00:04:21,479 --> 00:04:25,349
it's a decent example of what we can do

00:04:23,490 --> 00:04:27,510
with with some kind of you know

00:04:25,349 --> 00:04:31,680
pass-through of small utilities

00:04:27,510 --> 00:04:34,260
so service is the unix way the unix way

00:04:31,680 --> 00:04:35,790
being a giant quotation huge air quotes

00:04:34,260 --> 00:04:36,960
around that because that you're going to

00:04:35,790 --> 00:04:38,460
get a different definition of who you

00:04:36,960 --> 00:04:41,850
talk of what that is depending on who

00:04:38,460 --> 00:04:43,260
you talk to however I like to believe it

00:04:41,850 --> 00:04:45,720
as you do one thing you do it well

00:04:43,260 --> 00:04:47,430
that's kind of the the distilled version

00:04:45,720 --> 00:04:49,890
of it broken down so you can kind of a

00:04:47,430 --> 00:04:52,440
decouple previously tightly integrated

00:04:49,890 --> 00:04:53,730
components such that they are more

00:04:52,440 --> 00:04:56,160
loosely coupled they can be more

00:04:53,730 --> 00:04:58,110
interchanged as long as you comply with

00:04:56,160 --> 00:05:00,240
this standard some some kind of an API

00:04:58,110 --> 00:05:02,040
standard that you come up with you can

00:05:00,240 --> 00:05:04,050
plug in plug and replace different

00:05:02,040 --> 00:05:07,770
components of this and if you have them

00:05:04,050 --> 00:05:11,400
loosely coupled you can kind of take

00:05:07,770 --> 00:05:13,740
that idea from from the amoeba micro

00:05:11,400 --> 00:05:15,600
kernel operating system and

00:05:13,740 --> 00:05:17,700
geographically dispersed different

00:05:15,600 --> 00:05:20,010
components of the system if you want to

00:05:17,700 --> 00:05:22,380
and in such a way that they can interact

00:05:20,010 --> 00:05:26,160
just like as though they were local and

00:05:22,380 --> 00:05:28,710
if you do this over the network well you

00:05:26,160 --> 00:05:30,330
can do it local host and you can do your

00:05:28,710 --> 00:05:32,070
loopback network and if you wanted to

00:05:30,330 --> 00:05:34,200
host it all in one one environment or

00:05:32,070 --> 00:05:36,350
you can geographically dispersed it and

00:05:34,200 --> 00:05:38,520
we get into a world where we have

00:05:36,350 --> 00:05:39,990
instructions or service clouds you have

00:05:38,520 --> 00:05:42,150
cloud providers that allow you to

00:05:39,990 --> 00:05:44,220
geographically dispersed this literally

00:05:42,150 --> 00:05:48,780
across the globe in multi-zone multi 10

00:05:44,220 --> 00:05:52,230
in all these different environments and

00:05:48,780 --> 00:05:54,930
and that will hopefully add redundance

00:05:52,230 --> 00:06:00,000
and resiliency to to the application to

00:05:54,930 --> 00:06:03,060
the service and what we can do with that

00:06:00,000 --> 00:06:04,860
is have smaller components that are more

00:06:03,060 --> 00:06:08,490
focused and more worked on more easily

00:06:04,860 --> 00:06:10,350
testable independently in a way that we

00:06:08,490 --> 00:06:13,710
can iterate on them faster and we can

00:06:10,350 --> 00:06:15,960
keep code quality up and and just

00:06:13,710 --> 00:06:17,460
hopefully get to a point where

00:06:15,960 --> 00:06:21,750
development is faster but we're not

00:06:17,460 --> 00:06:26,310
sacrificing on quality so immutable in

00:06:21,750 --> 00:06:28,560
structure this is actually a new one

00:06:26,310 --> 00:06:30,360
this is something that is kind of popped

00:06:28,560 --> 00:06:32,220
up a little bit a little bit more

00:06:30,360 --> 00:06:34,230
recently and it's kind of gaining ground

00:06:32,220 --> 00:06:36,000
and some of the newer technologies that

00:06:34,230 --> 00:06:38,130
have come up containers being one of

00:06:36,000 --> 00:06:38,650
them the more proliferation of people

00:06:38,130 --> 00:06:40,270
wanting to

00:06:38,650 --> 00:06:43,449
use microservice architectures have kind

00:06:40,270 --> 00:06:45,130
of led to this immune one structure is

00:06:43,449 --> 00:06:47,039
effectively fully automated it should be

00:06:45,130 --> 00:06:51,729
able to be deployed redeployed torn down

00:06:47,039 --> 00:06:55,680
with minimal human interaction and the

00:06:51,729 --> 00:06:58,030
idea behind that is is not so much that

00:06:55,680 --> 00:07:00,699
okay you can fire up some virtualization

00:06:58,030 --> 00:07:03,490
templates and have some kind of a post

00:07:00,699 --> 00:07:06,400
boot task run and reboot them into new

00:07:03,490 --> 00:07:09,490
updates and then run your configuration

00:07:06,400 --> 00:07:11,740
management the goal is is at deploy time

00:07:09,490 --> 00:07:15,010
you're done and and that's kind of what

00:07:11,740 --> 00:07:16,690
we what we get to it should be static

00:07:15,010 --> 00:07:18,820
once deployed you don't change it if you

00:07:16,690 --> 00:07:21,250
need to make a change you redeploy it's

00:07:18,820 --> 00:07:24,220
this new paradigm of of don't config

00:07:21,250 --> 00:07:25,660
management in the environment config

00:07:24,220 --> 00:07:26,949
management at Build time and don't

00:07:25,660 --> 00:07:28,570
change the environment keep the

00:07:26,949 --> 00:07:31,240
environment static in nature to the best

00:07:28,570 --> 00:07:37,990
of your ability and this allows you to

00:07:31,240 --> 00:07:41,590
have these immutable pieces and these

00:07:37,990 --> 00:07:44,919
pieces can be tested as a cohesive unit

00:07:41,590 --> 00:07:46,810
and we can then deploy them and verify

00:07:44,919 --> 00:07:48,880
that the thing that made it through

00:07:46,810 --> 00:07:51,849
testing is the thing that's running in

00:07:48,880 --> 00:07:56,080
production no nothing out there change

00:07:51,849 --> 00:07:57,940
no mutable state or should an ideal

00:07:56,080 --> 00:08:01,270
world nothing has changed and that gives

00:07:57,940 --> 00:08:04,060
ability to verify that an unexpected

00:08:01,270 --> 00:08:07,300
change because of some software update

00:08:04,060 --> 00:08:09,460
or because of some config management

00:08:07,300 --> 00:08:14,010
agent running out from under us because

00:08:09,460 --> 00:08:16,630
you know new person X or new person Y

00:08:14,010 --> 00:08:18,340
committed to master on accident on for

00:08:16,630 --> 00:08:25,900
the you know the get check in for the

00:08:18,340 --> 00:08:27,490
config management so what we effectively

00:08:25,900 --> 00:08:30,990
deploys a build artifact we no longer

00:08:27,490 --> 00:08:34,570
deploy in traditional senses of the word

00:08:30,990 --> 00:08:36,219
and have these automate or have these

00:08:34,570 --> 00:08:38,320
automated configuration management jobs

00:08:36,219 --> 00:08:41,770
run you deploy a build artifact and your

00:08:38,320 --> 00:08:44,080
build artifact could be a container

00:08:41,770 --> 00:08:45,760
image so if you were to take your doctor

00:08:44,080 --> 00:08:47,380
image and had your docker file and it

00:08:45,760 --> 00:08:49,000
ran it did it did its thing and at the

00:08:47,380 --> 00:08:50,620
end you have this image you can then

00:08:49,000 --> 00:08:52,410
distribute that image and start the

00:08:50,620 --> 00:08:54,970
service there should

00:08:52,410 --> 00:08:58,899
be no required added configuration

00:08:54,970 --> 00:09:01,029
management and you can then put your

00:08:58,899 --> 00:09:03,100
configuration management in the build

00:09:01,029 --> 00:09:04,449
time so you don't need to run it on the

00:09:03,100 --> 00:09:06,129
end host because you should be able to

00:09:04,449 --> 00:09:08,559
run it inside of the confines within the

00:09:06,129 --> 00:09:10,929
context of the container build the

00:09:08,559 --> 00:09:12,819
container image build such that all of

00:09:10,929 --> 00:09:13,799
your configuration that you want does it

00:09:12,819 --> 00:09:16,029
among hosts just like it always has

00:09:13,799 --> 00:09:18,489
except your delivery mechanism is

00:09:16,029 --> 00:09:21,040
different you are instead effectively

00:09:18,489 --> 00:09:22,899
shipping a tarball that has everything

00:09:21,040 --> 00:09:25,329
in it as you wanted it and that our wall

00:09:22,899 --> 00:09:28,299
with its metadata can run within the

00:09:25,329 --> 00:09:29,499
docker environment so need a

00:09:28,299 --> 00:09:33,399
configuration change build a new

00:09:29,499 --> 00:09:35,559
artifact and then artifacts can then be

00:09:33,399 --> 00:09:38,829
tested and graduate so you can have your

00:09:35,559 --> 00:09:42,790
your dev test stage production pipeline

00:09:38,829 --> 00:09:44,379
and that build artifact should be able

00:09:42,790 --> 00:09:45,850
to graduate in between each environment

00:09:44,379 --> 00:09:47,529
and potentially lo different

00:09:45,850 --> 00:09:48,639
configuration components so that you're

00:09:47,529 --> 00:09:51,369
not pointing your production database

00:09:48,639 --> 00:09:53,559
but you have this idea where this image

00:09:51,369 --> 00:09:56,949
can can go through unchanged because

00:09:53,559 --> 00:10:02,259
let's just say for example some new

00:09:56,949 --> 00:10:07,059
update of library Zed libraries edge

00:10:02,259 --> 00:10:11,739
shows up and you have version 11 in dev

00:10:07,059 --> 00:10:14,139
tests and stage well 12 landed and it

00:10:11,739 --> 00:10:16,600
has security fix so the ops team did an

00:10:14,139 --> 00:10:18,639
update to production let's say something

00:10:16,600 --> 00:10:20,199
changed and your application didn't take

00:10:18,639 --> 00:10:24,790
that into account so you then you move

00:10:20,199 --> 00:10:26,769
in within the window by which your

00:10:24,790 --> 00:10:28,059
software graduated from stage production

00:10:26,769 --> 00:10:30,549
something changed out from under it

00:10:28,059 --> 00:10:31,869
things crash your roll back procedure

00:10:30,549 --> 00:10:33,970
what's your role bracket procedure

00:10:31,869 --> 00:10:35,829
looked like well in some scenarios that

00:10:33,970 --> 00:10:37,389
can be painful with container type

00:10:35,829 --> 00:10:39,669
technologies it's very simple because

00:10:37,389 --> 00:10:42,069
you can change the tag that points to

00:10:39,669 --> 00:10:43,749
and restart the service so these build

00:10:42,069 --> 00:10:45,939
artifacts afford us some some

00:10:43,749 --> 00:10:49,089
interesting capabilities so this is good

00:10:45,939 --> 00:10:50,049
for red black blue green etc deployment

00:10:49,089 --> 00:10:54,399
models and I'm going to kind of walk

00:10:50,049 --> 00:10:58,490
through one deployment model that that

00:10:54,399 --> 00:11:01,700
exam is an example of this so

00:10:58,490 --> 00:11:06,140
and I stole these images from mr. Mike

00:11:01,700 --> 00:11:07,310
McGrath thank you sir so let's say that

00:11:06,140 --> 00:11:08,980
you're running version one of your

00:11:07,310 --> 00:11:12,170
software and you want to do an update

00:11:08,980 --> 00:11:14,959
take a note out and you upgrade or you

00:11:12,170 --> 00:11:16,339
you have your your tests and see I run

00:11:14,959 --> 00:11:19,010
through everything passes and you

00:11:16,339 --> 00:11:20,540
updated version 12 you put it back in

00:11:19,010 --> 00:11:22,040
rotation everything looks good so okay

00:11:20,540 --> 00:11:23,450
fine let's go and roll it out to the

00:11:22,040 --> 00:11:24,890
rest of the environment seems pretty

00:11:23,450 --> 00:11:31,520
straightforward should work everything's

00:11:24,890 --> 00:11:36,770
good now what happens when something

00:11:31,520 --> 00:11:39,170
breaks on one of the nodes let's assume

00:11:36,770 --> 00:11:40,790
that you can just think of the wildest

00:11:39,170 --> 00:11:41,959
doomsday scenario you can come up with

00:11:40,790 --> 00:11:43,220
some buddies walked in the day centre

00:11:41,959 --> 00:11:46,029
and kick the power cord out from under

00:11:43,220 --> 00:11:49,040
you something crashed somebody put a

00:11:46,029 --> 00:11:50,570
really bad custom rpm trigger and one of

00:11:49,040 --> 00:11:53,959
the packages that your infrastructure

00:11:50,570 --> 00:11:57,560
team runs for whatever version again new

00:11:53,959 --> 00:11:58,910
person XYZ shows up and commits to

00:11:57,560 --> 00:12:00,230
master on accident and that gets

00:11:58,910 --> 00:12:03,200
packaged and rolled out as part of your

00:12:00,230 --> 00:12:06,440
employment automation something how

00:12:03,200 --> 00:12:07,820
clean there's a rollback procedure how

00:12:06,440 --> 00:12:11,120
do you verify your components how do you

00:12:07,820 --> 00:12:13,310
know what state your file system is in

00:12:11,120 --> 00:12:15,890
how do you know what state your carnal

00:12:13,310 --> 00:12:17,600
is in let's say that the power cable got

00:12:15,890 --> 00:12:19,910
kicked out in the middle of the kernel

00:12:17,600 --> 00:12:22,070
update let's say for some reason it's

00:12:19,910 --> 00:12:25,790
generating in a tree MF s your changes

00:12:22,070 --> 00:12:30,020
are in grub but you haven't finished the

00:12:25,790 --> 00:12:33,500
then it build the drackett run and you

00:12:30,020 --> 00:12:35,209
don't reboot how do you how do you log

00:12:33,500 --> 00:12:36,860
in to your system if it's somewhere in

00:12:35,209 --> 00:12:38,779
the cloud well you can there's the web

00:12:36,860 --> 00:12:40,459
console and that's clunky and terrible

00:12:38,779 --> 00:12:46,089
and we go through and we do it we must

00:12:40,459 --> 00:12:49,640
but what if what if we could avoid that

00:12:46,089 --> 00:12:51,050
also do you know how far a package made

00:12:49,640 --> 00:12:55,610
it by show of hands are very familiar

00:12:51,050 --> 00:12:58,339
with RPM package triggers about a third

00:12:55,610 --> 00:12:59,600
that's good okay here they are this is

00:12:58,339 --> 00:13:02,300
from the documentation that comes with

00:12:59,600 --> 00:13:06,079
RPM this is in user bin doch or I'm

00:13:02,300 --> 00:13:07,850
sorry user shared doc rpm and this is

00:13:06,079 --> 00:13:09,560
this is literally what it says in all

00:13:07,850 --> 00:13:10,860
packaged managed to have this like rpms

00:13:09,560 --> 00:13:12,960
not special and like a mad

00:13:10,860 --> 00:13:14,250
he has these weird flaws every every

00:13:12,960 --> 00:13:15,810
package manager has to have an order of

00:13:14,250 --> 00:13:17,100
operations a steps by which it goes

00:13:15,810 --> 00:13:20,330
through and this is kind of what you

00:13:17,100 --> 00:13:25,080
have and at every step of the way some

00:13:20,330 --> 00:13:28,590
script or some trigger can take effect

00:13:25,080 --> 00:13:31,200
and cause a side effect so if if we're

00:13:28,590 --> 00:13:33,360
doing this in an upgrade timeline for

00:13:31,200 --> 00:13:34,920
your application in your production

00:13:33,360 --> 00:13:36,690
environment this is mutable state this

00:13:34,920 --> 00:13:39,000
is something that could potentially go

00:13:36,690 --> 00:13:41,250
wrong in the event of a failure whereas

00:13:39,000 --> 00:13:45,030
if all we're doing is in all or nothing

00:13:41,250 --> 00:13:46,530
a update to a new deployment image the

00:13:45,030 --> 00:13:47,610
worst-case scenario is you roll back to

00:13:46,530 --> 00:13:48,750
the previous deployment image by

00:13:47,610 --> 00:13:53,070
changing a tag and restarting your

00:13:48,750 --> 00:13:54,930
service so what if we take that concept

00:13:53,070 --> 00:13:58,950
a step further and we had a mutable

00:13:54,930 --> 00:14:02,340
operating systems so that's where

00:13:58,950 --> 00:14:04,980
project atomic comes in so project

00:14:02,340 --> 00:14:07,260
atomic is an upstream project based

00:14:04,980 --> 00:14:11,670
around taking concepts of immutability

00:14:07,260 --> 00:14:14,190
and the available or the idea that you

00:14:11,670 --> 00:14:16,050
can have these deployment artifacts

00:14:14,190 --> 00:14:18,120
effectively you have a build artifact

00:14:16,050 --> 00:14:20,100
that can be tested as a cohesive unit

00:14:18,120 --> 00:14:21,960
that can be applied and rolled out as a

00:14:20,100 --> 00:14:23,460
cohesive unit that is all or nothing

00:14:21,960 --> 00:14:27,840
you're either upgraded to it or you're

00:14:23,460 --> 00:14:29,460
not and and it includes some newer

00:14:27,840 --> 00:14:32,010
technologies and it's also built on top

00:14:29,460 --> 00:14:34,290
of more traditional technologies in the

00:14:32,010 --> 00:14:36,060
sense that we're not reinventing the

00:14:34,290 --> 00:14:38,340
world overnight but we're doing

00:14:36,060 --> 00:14:42,360
iterative improvements on the world that

00:14:38,340 --> 00:14:44,340
we had before so we have a lot of our

00:14:42,360 --> 00:14:45,570
tried and trusted and I mentioned that

00:14:44,340 --> 00:14:46,920
it's an upstream project and we have

00:14:45,570 --> 00:14:48,210
both fedora and centos because both

00:14:46,920 --> 00:14:51,780
fedora and centos are working with the

00:14:48,210 --> 00:14:55,190
upstream project atomic team to create

00:14:51,780 --> 00:14:57,540
atomic technology-based distributions

00:14:55,190 --> 00:14:59,120
being part of the Fedora team I'm going

00:14:57,540 --> 00:15:02,940
to talk specifically about the Fedora

00:14:59,120 --> 00:15:05,100
project Tomic but our friends in Santos

00:15:02,940 --> 00:15:10,680
land are working with us working with

00:15:05,100 --> 00:15:12,210
the upstream as well so it in inherits

00:15:10,680 --> 00:15:14,310
everything from the parent distro so

00:15:12,210 --> 00:15:17,130
everything that you previously had in

00:15:14,310 --> 00:15:18,480
terms of your rpm sets what you expect

00:15:17,130 --> 00:15:20,250
to be on the system those kind of things

00:15:18,480 --> 00:15:22,320
you're going to find a lot of them there

00:15:20,250 --> 00:15:27,990
everything all the

00:15:22,320 --> 00:15:28,830
of the your standard tools those kinds

00:15:27,990 --> 00:15:30,600
of things you're going to find them

00:15:28,830 --> 00:15:32,340
there what's changing is the delivery

00:15:30,600 --> 00:15:33,810
mechanism the delivery mechanism by

00:15:32,340 --> 00:15:35,010
which that we update our system and

00:15:33,810 --> 00:15:36,030
that's going to take a little you know

00:15:35,010 --> 00:15:38,610
there's going to be a little bit of

00:15:36,030 --> 00:15:40,200
Education in terms of getting people up

00:15:38,610 --> 00:15:42,540
to date with the newer technologies and

00:15:40,200 --> 00:15:43,950
as there always is however there's also

00:15:42,540 --> 00:15:46,260
kind of an added aspect to this too

00:15:43,950 --> 00:15:48,330
we're in an immutable environment you

00:15:46,260 --> 00:15:51,810
don't want changes so you you don't want

00:15:48,330 --> 00:15:54,780
to necessarily do package installs on to

00:15:51,810 --> 00:15:57,660
a live system you would instead build a

00:15:54,780 --> 00:15:59,520
new deployment artifact and I'll talk a

00:15:57,660 --> 00:16:02,010
little bit about that so it's a

00:15:59,520 --> 00:16:04,620
minimized footprint what a fedora atomic

00:16:02,010 --> 00:16:06,330
host is at face value as we are aiming

00:16:04,620 --> 00:16:09,600
to do a minimize footprint we're trying

00:16:06,330 --> 00:16:11,340
to have it tuned and be out of the box

00:16:09,600 --> 00:16:14,490
the best at running container type

00:16:11,340 --> 00:16:17,130
workloads hopefully we succeed to that

00:16:14,490 --> 00:16:19,770
if not a show up to the fedora cloud sig

00:16:17,130 --> 00:16:21,900
let us know participate we're always

00:16:19,770 --> 00:16:24,210
looking to do better so atomic updating

00:16:21,900 --> 00:16:26,310
and rollback means that it's easy to

00:16:24,210 --> 00:16:28,650
play update and roll back using OS trees

00:16:26,310 --> 00:16:30,030
and what OS trees are I'll actually talk

00:16:28,650 --> 00:16:32,220
about in a minute but that's our new

00:16:30,030 --> 00:16:34,220
deployment artifact in terms of how we

00:16:32,220 --> 00:16:37,620
actually just do that and then

00:16:34,220 --> 00:16:39,240
orchestration and that's where the KU

00:16:37,620 --> 00:16:44,430
brunette is peace comes in we'll talk

00:16:39,240 --> 00:16:47,850
about that briefly so i'm checking i'm

00:16:44,430 --> 00:16:49,280
doing time here all right the

00:16:47,850 --> 00:16:52,950
orchestration piece allows us to

00:16:49,280 --> 00:16:54,240
attainment okay all right i'll go a

00:16:52,950 --> 00:16:57,660
little quicker i thought i had thought i

00:16:54,240 --> 00:16:59,610
had more time I do not ok so atomic host

00:16:57,660 --> 00:17:03,810
deployments are upgrades of rpms trees

00:16:59,610 --> 00:17:06,449
and the newest tree is is this it's an

00:17:03,810 --> 00:17:08,339
entire root filesystem tree managed very

00:17:06,449 --> 00:17:09,420
similar to get commits and sent in the

00:17:08,339 --> 00:17:13,170
sense that you have a reference that you

00:17:09,420 --> 00:17:15,390
can revert back to or roll forward to

00:17:13,170 --> 00:17:17,459
and it gives you this this ref ID that

00:17:15,390 --> 00:17:20,070
you can command move around our pmos

00:17:17,459 --> 00:17:21,900
tree is a utility and a technology that

00:17:20,070 --> 00:17:24,630
allows us to build OS trees out of

00:17:21,900 --> 00:17:26,459
assets of rpms so you can use these

00:17:24,630 --> 00:17:28,650
packaged piece of software you've always

00:17:26,459 --> 00:17:30,990
had but then put them into an rpms tree

00:17:28,650 --> 00:17:32,820
and then you use RPM 0 street to be your

00:17:30,990 --> 00:17:33,830
distribution mechanism of that build

00:17:32,820 --> 00:17:36,509
artifact

00:17:33,830 --> 00:17:38,340
upgrades are atomic in nature which is a

00:17:36,509 --> 00:17:40,619
lot of where project atomic got its name

00:17:38,340 --> 00:17:42,899
it's all or nothing so if you're in the

00:17:40,619 --> 00:17:44,669
middle of an upgrade there is no you

00:17:42,899 --> 00:17:46,109
kicked it you kick the power cord out we

00:17:44,669 --> 00:17:48,029
don't know where it was on the RPM

00:17:46,109 --> 00:17:49,320
trigger we don't know where it was in

00:17:48,029 --> 00:17:51,659
the kernel update we don't know if that

00:17:49,320 --> 00:17:54,599
drackett run finished building are in a

00:17:51,659 --> 00:17:56,519
tram FS because all of that gets sorted

00:17:54,599 --> 00:17:58,700
out at Build time and when we're doing

00:17:56,519 --> 00:18:03,570
the actual deployment it's just

00:17:58,700 --> 00:18:05,340
deploying the bill artifact so in the

00:18:03,570 --> 00:18:06,929
entire trees in dimensions for entire

00:18:05,340 --> 00:18:09,479
tree is a cohesive unit it gives you the

00:18:06,929 --> 00:18:11,909
ability to to test this as a single

00:18:09,479 --> 00:18:13,499
thing so the atomic command is currently

00:18:11,909 --> 00:18:17,009
a wrapper on our PMO's tree and docker

00:18:13,499 --> 00:18:19,200
our atomic host is host-based commands

00:18:17,009 --> 00:18:22,080
atomic other commands do interaction

00:18:19,200 --> 00:18:24,239
with the docker Damon host upgrade you

00:18:22,080 --> 00:18:25,559
can see we're doing an update from it

00:18:24,239 --> 00:18:27,419
has a whole bunch more output but I

00:18:25,559 --> 00:18:30,089
don't want to clutter my slide too much

00:18:27,419 --> 00:18:31,349
atomic host status this these are the

00:18:30,089 --> 00:18:33,299
references I was talking about you have

00:18:31,349 --> 00:18:36,389
these IDs and it talks about the you

00:18:33,299 --> 00:18:38,729
have a version number and you can you

00:18:36,389 --> 00:18:40,320
can also actually go in and inspect what

00:18:38,729 --> 00:18:42,149
our pms are in there when it doesn't

00:18:40,320 --> 00:18:43,469
update it actually tells you which rpms

00:18:42,149 --> 00:18:46,729
change what versions they've been

00:18:43,469 --> 00:18:50,399
updated to those kinds of things

00:18:46,729 --> 00:18:52,619
orchestration so we have this we have

00:18:50,399 --> 00:18:56,339
this immutable infrastructure deployed

00:18:52,619 --> 00:18:58,859
in place and we have these atomic fedora

00:18:56,339 --> 00:19:01,169
atomic deployed operating system images

00:18:58,859 --> 00:19:02,429
and we're running containers how do we

00:19:01,169 --> 00:19:05,219
run a bunch of containers across a bunch

00:19:02,429 --> 00:19:07,950
of hosts Cooper netis glad you asked

00:19:05,219 --> 00:19:10,139
thank you so it's distribute

00:19:07,950 --> 00:19:12,299
organization for containers and there's

00:19:10,139 --> 00:19:14,639
a bunch of different vocabulary terms

00:19:12,299 --> 00:19:17,749
that coming into the play here but kind

00:19:14,639 --> 00:19:22,469
of the few main ones are pod service

00:19:17,749 --> 00:19:24,779
replication controller yes I think those

00:19:22,469 --> 00:19:27,539
are it so pod is a set of containers and

00:19:24,779 --> 00:19:29,909
they are scheduled as a single unit so

00:19:27,539 --> 00:19:32,009
they will go to a node they share a

00:19:29,909 --> 00:19:36,779
number of aspects of the systems process

00:19:32,009 --> 00:19:37,950
ID space IPC network UTS and this allows

00:19:36,779 --> 00:19:39,570
them to speak to each other as though

00:19:37,950 --> 00:19:41,940
they were on localhost because they will

00:19:39,570 --> 00:19:43,679
be a service is a set of one or more

00:19:41,940 --> 00:19:45,299
pods that can each pod can be

00:19:43,679 --> 00:19:47,290
distributed to different nodes in the

00:19:45,299 --> 00:19:49,060
service brings them together

00:19:47,290 --> 00:19:50,770
as a cohesive unit across the

00:19:49,060 --> 00:19:52,300
environment from there we have a

00:19:50,770 --> 00:19:54,970
replication controller that manages

00:19:52,300 --> 00:19:58,500
those pods and then no level proxy for

00:19:54,970 --> 00:20:01,630
load balancing to the services and then

00:19:58,500 --> 00:20:03,580
pluggable aspect or pluggable options

00:20:01,630 --> 00:20:08,170
for overlay and persistent storage

00:20:03,580 --> 00:20:09,940
providers developers I did not forget

00:20:08,170 --> 00:20:11,920
about developers all of everything I've

00:20:09,940 --> 00:20:14,800
been talking about in a lot of ways are

00:20:11,920 --> 00:20:16,480
is catered towards or at least my hope

00:20:14,800 --> 00:20:18,580
was that the tone of it was catered

00:20:16,480 --> 00:20:19,870
towards opera ops teams however the

00:20:18,580 --> 00:20:21,700
development teams you can take these

00:20:19,870 --> 00:20:23,350
concepts in these ideas and apply them

00:20:21,700 --> 00:20:24,490
to your development lifecycle that's

00:20:23,350 --> 00:20:26,440
where open shipped origin comes in

00:20:24,490 --> 00:20:27,580
luggage its origin builds on top of

00:20:26,440 --> 00:20:30,400
these concepts and on top of these

00:20:27,580 --> 00:20:33,780
technologies and provides a standard

00:20:30,400 --> 00:20:37,570
containers API it provides kind of a

00:20:33,780 --> 00:20:38,980
self-service out of the box dev panels

00:20:37,570 --> 00:20:40,270
such that developers can pick and choose

00:20:38,980 --> 00:20:41,530
the components they want they will be

00:20:40,270 --> 00:20:43,510
deployed using these container

00:20:41,530 --> 00:20:44,830
technologies and the developers are

00:20:43,510 --> 00:20:47,050
presented with a development environment

00:20:44,830 --> 00:20:48,460
that they can then just commit code into

00:20:47,050 --> 00:20:50,020
the code will go through build pipeline

00:20:48,460 --> 00:20:53,590
this completely configurable completely

00:20:50,020 --> 00:20:56,890
scriptable has Jenkins plugin api's and

00:20:53,590 --> 00:20:58,630
those kinds of things and you can then

00:20:56,890 --> 00:21:00,910
take that and you can either run it

00:20:58,630 --> 00:21:03,010
using open shift because open shipped is

00:21:00,910 --> 00:21:04,780
built atop cooper Nettie's in production

00:21:03,010 --> 00:21:06,670
or you can take that container you can

00:21:04,780 --> 00:21:08,680
take that definition of an application

00:21:06,670 --> 00:21:10,420
out of that environment and then run it

00:21:08,680 --> 00:21:12,970
into a in a directly criminales

00:21:10,420 --> 00:21:15,040
environment cooper Nettie's based

00:21:12,970 --> 00:21:20,650
environment running on top of project

00:21:15,040 --> 00:21:23,440
atomic for a fully atomic or a fully

00:21:20,650 --> 00:21:27,310
immutable infrastructure based pipeline

00:21:23,440 --> 00:21:29,230
from dev to production ran out of time

00:21:27,310 --> 00:21:32,070
sorry I meant to cover a few things more

00:21:29,230 --> 00:21:32,070
you have questions

00:21:36,470 --> 00:21:57,090
yes okay the question basically boil

00:21:55,050 --> 00:22:01,860
down to is a pod in Coober Nettie's

00:21:57,090 --> 00:22:04,680
always on a single host yes yes and if

00:22:01,860 --> 00:22:06,570
that changed I I will admit that there

00:22:04,680 --> 00:22:08,760
is a asterisks on that to the best of my

00:22:06,570 --> 00:22:12,660
knowledge it was if that if that changed

00:22:08,760 --> 00:22:15,300
I apologize but yeah it's it's it Do It

00:22:12,660 --> 00:22:17,700
was as defined as of not that long ago

00:22:15,300 --> 00:22:20,280
as as a single host that had inner

00:22:17,700 --> 00:22:22,550
communication between between the pod or

00:22:20,280 --> 00:23:00,420
between the containers inside the pot

00:22:22,550 --> 00:23:03,030
yes okay so the question is basically do

00:23:00,420 --> 00:23:04,260
do I have much perspective on how many

00:23:03,030 --> 00:23:06,600
people actually using configuration

00:23:04,260 --> 00:23:07,530
management and build I don't notice i

00:23:06,600 --> 00:23:10,140
know that i would i would highly

00:23:07,530 --> 00:23:12,390
recommend it as the path i generally

00:23:10,140 --> 00:23:14,340
kind of offer that up as like kind of a

00:23:12,390 --> 00:23:16,170
stepping stone like as you move into

00:23:14,340 --> 00:23:17,730
this everything that you used to do in

00:23:16,170 --> 00:23:20,340
config management can now be put into

00:23:17,730 --> 00:23:21,720
the build time and as you adopt the

00:23:20,340 --> 00:23:22,980
newer tech absolutely you should be

00:23:21,720 --> 00:23:26,210
using crew bernetti secrets and those

00:23:22,980 --> 00:23:30,500
kinds of things to inject and and supply

00:23:26,210 --> 00:23:32,490
config data to to your containers but

00:23:30,500 --> 00:23:35,100
that's probably something i could or

00:23:32,490 --> 00:23:38,990
should be more clear on be I ya know I I

00:23:35,100 --> 00:23:41,040
know of about half a dozen people who do

00:23:38,990 --> 00:23:43,860
inject their config management at build

00:23:41,040 --> 00:23:44,940
time just because they have so much

00:23:43,860 --> 00:23:46,800
investment in all their config

00:23:44,940 --> 00:23:57,000
management to be able to contain arises

00:23:46,800 --> 00:24:00,360
applications that just made sense okay

00:23:57,000 --> 00:24:02,010
the comment was use config management to

00:24:00,360 --> 00:24:04,500
build your crew benetti's files to begin

00:24:02,010 --> 00:24:06,210
with which yeah absolutely you could

00:24:04,500 --> 00:24:07,679
utility that and I think that makes a

00:24:06,210 --> 00:24:10,320
lot of sense especially if you again

00:24:07,679 --> 00:24:12,750
have a lot of investment in a a config

00:24:10,320 --> 00:24:13,590
management product I mean it so one of

00:24:12,750 --> 00:24:15,240
the one of the teams I'd previously

00:24:13,590 --> 00:24:17,040
worked on had many years of investment

00:24:15,240 --> 00:24:18,120
in in a configuration management

00:24:17,040 --> 00:24:20,580
infrastructure and have many many

00:24:18,120 --> 00:24:22,830
services built out that way so the first

00:24:20,580 --> 00:24:24,720
stepping stone into the the container

00:24:22,830 --> 00:24:26,400
runtime world where we started running

00:24:24,720 --> 00:24:28,020
things in production and docker was to

00:24:26,400 --> 00:24:34,220
just inject the config management

00:24:28,020 --> 00:24:37,610
runtime at the build any other questions

00:24:34,220 --> 00:24:37,610
one back yes

00:24:41,559 --> 00:24:44,559
yes

00:24:56,070 --> 00:25:00,160
ok so the comment was effectively that

00:24:58,570 --> 00:25:02,140
the consensus a config management camp

00:25:00,160 --> 00:25:04,240
was not that config management is dead

00:25:02,140 --> 00:25:06,760
or dying but that it needs to evolve

00:25:04,240 --> 00:25:09,040
into the newer technology and the newer

00:25:06,760 --> 00:25:11,500
workflows similar to this did I do okay

00:25:09,040 --> 00:25:14,440
on that all right cool and their

00:25:11,500 --> 00:25:37,570
questions all right thank you all for

00:25:14,440 --> 00:25:40,630
your time oh hello hey if you ask the

00:25:37,570 --> 00:25:43,020
question please come see me I have swag

00:25:40,630 --> 00:25:43,020
for you

00:25:51,330 --> 00:25:54,260
absolutely

00:26:13,200 --> 00:26:19,330
your sweat for the first show ok yes the

00:26:17,380 --> 00:26:21,420
board of a comment actually kill

00:26:19,330 --> 00:26:24,809
somebody was a better question dessert

00:26:21,420 --> 00:26:24,809
we've got a few

00:26:27,650 --> 00:26:30,280
yes

00:26:36,010 --> 00:26:39,010
come

00:26:48,179 --> 00:26:53,100
so there's a few think it's ugly

00:26:57,220 --> 00:27:09,620
that's all right thank you very much

00:27:02,210 --> 00:27:24,830
that's all built into the traffic and

00:27:09,620 --> 00:27:31,100
how to do the voluntary on Tonto sake

00:27:24,830 --> 00:27:36,080
promise Toby Enstrom at a conference at

00:27:31,100 --> 00:27:39,470
the phone mucho pero intent o menos esta

00:27:36,080 --> 00:27:45,169
Mingo introduzione see we also Mr Bond

00:27:39,470 --> 00:27:49,399
European high then right I'm Yulia oh

00:27:45,169 --> 00:27:53,779
yeah which one is still or do we have

00:27:49,399 --> 00:27:56,240
only one kind let me check uh but I may

00:27:53,779 --> 00:27:58,909
need some more down I think it's all

00:27:56,240 --> 00:28:03,139
still all still yeah then it's usually

00:27:58,909 --> 00:28:07,749
yeah yeah say all the windows all the

00:28:03,139 --> 00:28:07,749
way since bill excellent yeah

00:28:22,080 --> 00:28:34,149
rostra just a few announcements please

00:28:32,049 --> 00:28:36,370
ask questions at the end of the

00:28:34,149 --> 00:28:41,080
presentation you can get some cool swag

00:28:36,370 --> 00:28:43,960
and also pretty please gently close the

00:28:41,080 --> 00:28:45,490
doors when you leave the room or when

00:28:43,960 --> 00:28:48,970
you come back because it can get very

00:28:45,490 --> 00:28:51,460
disturbing for the speaker and in the

00:28:48,970 --> 00:28:54,250
meantime please feel free to tweet and

00:28:51,460 --> 00:28:56,950
blog about def con there is also

00:28:54,250 --> 00:29:09,250
competition for the best blog post so

00:28:56,950 --> 00:29:11,350
you can also win some prizes for that we

00:29:09,250 --> 00:29:16,620
talked about some words never checks on

00:29:11,350 --> 00:29:16,620
it sound works from from this yeah

00:29:24,310 --> 00:29:27,840
and he's three 1024

00:29:31,039 --> 00:29:34,549
before I'm just putting

00:30:00,330 --> 00:30:05,680
yes before because you have to HD was

00:30:03,790 --> 00:30:08,110
losing about some skills it through a

00:30:05,680 --> 00:30:10,600
ton of X extending yeah so you can sorry

00:30:08,110 --> 00:30:14,700
went ok with you then yeah otherwise ago

00:30:10,600 --> 00:30:14,700
just go to settings and change

00:30:34,540 --> 00:30:36,600

YouTube URL: https://www.youtube.com/watch?v=xnTN6DdjsnQ


