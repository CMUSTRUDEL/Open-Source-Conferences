Title: Securing Containers on OpenShift - Ryan Jarvinen
Publication date: 2016-02-11
Playlist: DevConf.cz 2016
Description: 
	Improve your container security model with tips related to notary, Source2Image, k8s templates, environment variables, k8s secrets, k8s service accounts, network isolation, and more!

Attendees of this session will learn: 
1. How to build secure container images using S2I
2. Security best-practices for a Containerized world 
3. How to Incorporate CI/CD to ensure Consistency and Compliance

Presentation: http://bit.ly/1PRHd4P
Captions: 
	00:00:51,980 --> 00:00:59,150
yeah oh yes good interesting yeah it

00:00:57,530 --> 00:01:04,400
doesn't really feel like completely

00:00:59,150 --> 00:01:06,790
boils hopefully if not flip it the other

00:01:04,400 --> 00:01:06,790
way

00:01:26,190 --> 00:01:29,730
my first time

00:01:41,400 --> 00:01:46,650
yeah okay yeah I'm good

00:02:57,740 --> 00:03:07,790
the project is the projector do more

00:03:00,959 --> 00:03:07,790
than 1080p I know it does walk long oh

00:03:10,160 --> 00:03:13,730
it's a square

00:03:23,410 --> 00:03:26,410
yeah

00:03:46,460 --> 00:03:51,290
the still a little bit different

00:04:06,579 --> 00:04:14,349
yeah look how big

00:04:29,420 --> 00:04:32,420
rostra

00:04:40,110 --> 00:04:44,530
guys thank you for coming to the

00:04:42,610 --> 00:04:46,570
presentation please don't forget to

00:04:44,530 --> 00:04:49,900
leave us feedback on the official

00:04:46,570 --> 00:04:52,270
website you can also tweet and blog

00:04:49,900 --> 00:04:55,650
about the event we really appreciate

00:04:52,270 --> 00:04:55,650
your feedback

00:05:56,770 --> 00:06:04,960
good enough I think I'm ready

00:06:20,180 --> 00:06:24,960
so hello everyone we have the next

00:06:23,730 --> 00:06:28,230
presentation ready

00:06:24,960 --> 00:06:46,890
so please welcome Ryan Jarvan and from

00:06:28,230 --> 00:06:52,080
Red Hat hello hi so I'm uh I'm Ryan from

00:06:46,890 --> 00:06:54,630
the from Red Hat's OpenShift team we'll

00:06:52,080 --> 00:06:55,730
be talking about securing containers on

00:06:54,630 --> 00:06:58,590
OpenShift

00:06:55,730 --> 00:07:02,640
how many people here are using open

00:06:58,590 --> 00:07:06,210
shifts today anybody whoo all right good

00:07:02,640 --> 00:07:09,030
good well hopefully this has good

00:07:06,210 --> 00:07:12,930
information for you there's also a lot

00:07:09,030 --> 00:07:15,630
of links in these this slide deck so

00:07:12,930 --> 00:07:18,420
I've made a URL to make this easier for

00:07:15,630 --> 00:07:23,670
you to follow along and for take-home

00:07:18,420 --> 00:07:27,690
notes right so bitly slash dev comp -

00:07:23,670 --> 00:07:30,330
container SEC has all the links I'll

00:07:27,690 --> 00:07:35,730
have this URL up again at the very end

00:07:30,330 --> 00:07:43,380
of the slides but feel free to follow

00:07:35,730 --> 00:07:47,040
along on your laptop if you like so like

00:07:43,380 --> 00:07:50,040
I said I'm Ryan Jarvan and I work on the

00:07:47,040 --> 00:07:56,060
OpenShift team specifically focusing on

00:07:50,040 --> 00:07:58,830
node.js development and here's the broad

00:07:56,060 --> 00:08:01,940
overview of a couple concepts we'll try

00:07:58,830 --> 00:08:04,920
to cover today so I'll start with a

00:08:01,940 --> 00:08:08,400
general introduction to open shift for

00:08:04,920 --> 00:08:12,000
folks who are new to the topic new to

00:08:08,400 --> 00:08:16,200
containers and new to kubernetes as well

00:08:12,000 --> 00:08:18,360
we'll cover a brief glossary of terms

00:08:16,200 --> 00:08:20,340
I'm gonna try to speed through it very

00:08:18,360 --> 00:08:23,599
quickly so we have more time for

00:08:20,340 --> 00:08:28,179
container security topics

00:08:23,599 --> 00:08:31,490
the first real security topic we have is

00:08:28,179 --> 00:08:34,069
creating images establishing a

00:08:31,490 --> 00:08:37,449
consistency for these images from the

00:08:34,069 --> 00:08:41,000
operational side then we'll go into

00:08:37,449 --> 00:08:43,399
runtime security for containers part of

00:08:41,000 --> 00:08:45,519
that is going to be the networking

00:08:43,399 --> 00:08:49,370
that's available to the container

00:08:45,519 --> 00:08:51,769
setting up network isolation or at least

00:08:49,370 --> 00:08:55,959
links to how you might set up network

00:08:51,769 --> 00:09:01,819
isolation we'll talk a bit about SELinux

00:08:55,959 --> 00:09:04,940
about how OpenShift handles user IDs

00:09:01,819 --> 00:09:07,880
within the container we'll talk a bit

00:09:04,940 --> 00:09:11,720
about image composing multiple images

00:09:07,880 --> 00:09:15,110
together using a kubernetes template and

00:09:11,720 --> 00:09:17,240
we'll talk about a couple briefly some

00:09:15,110 --> 00:09:19,550
advanced topics that you will most

00:09:17,240 --> 00:09:23,000
likely want to follow up on if you're

00:09:19,550 --> 00:09:27,350
really interested in getting security

00:09:23,000 --> 00:09:32,000
done right so to start off with the

00:09:27,350 --> 00:09:34,160
overview this is a little bit coming in

00:09:32,000 --> 00:09:37,009
to all this terminology with with

00:09:34,160 --> 00:09:39,980
kubernetes you may feel quite lost at

00:09:37,009 --> 00:09:42,110
first there's a lot going on so this is

00:09:39,980 --> 00:09:45,740
why I have links so you could come back

00:09:42,110 --> 00:09:47,990
as a future reference to what I have

00:09:45,740 --> 00:09:50,329
here in the following so I'll start off

00:09:47,990 --> 00:09:53,120
with the stack what what are we composed

00:09:50,329 --> 00:09:57,620
of with OpenShift OpenShift

00:09:53,120 --> 00:10:02,019
runs with a rel base you can also use

00:09:57,620 --> 00:10:05,000
sent OS one of the projects were

00:10:02,019 --> 00:10:07,910
especially working on is something

00:10:05,000 --> 00:10:14,620
called is it my network drop oh not a

00:10:07,910 --> 00:10:17,920
good not a good sign okay reconnected or

00:10:14,620 --> 00:10:17,920
or not

00:10:20,190 --> 00:10:30,900
ah Thank You old old link in my slides

00:10:26,910 --> 00:10:32,580
so this display resolution is a little

00:10:30,900 --> 00:10:35,160
bit awkward it'll look better on your

00:10:32,580 --> 00:10:38,160
laptop or mobile device maybe it looks

00:10:35,160 --> 00:10:41,610
like this on your mobile so you could

00:10:38,160 --> 00:10:46,560
learn more about project atomic and what

00:10:41,610 --> 00:10:48,840
Red Hat is doing to streamline the OS

00:10:46,560 --> 00:10:51,210
distributions specifically for running

00:10:48,840 --> 00:10:53,610
containers so project atomic is

00:10:51,210 --> 00:10:57,710
generally a stripped down version of

00:10:53,610 --> 00:11:01,970
rail or CentOS similar to rel minimal

00:10:57,710 --> 00:11:04,320
but then we add in docker and kubernetes

00:11:01,970 --> 00:11:06,930
everything you'd need for running

00:11:04,320 --> 00:11:10,170
containers and if you need to bring in

00:11:06,930 --> 00:11:13,620
let's say my sequel you bring that in as

00:11:10,170 --> 00:11:15,860
a container and we've really followed

00:11:13,620 --> 00:11:18,600
all the way down this rabbit hole

00:11:15,860 --> 00:11:20,490
OpenShift is itself running in a

00:11:18,600 --> 00:11:24,330
container that manages your other

00:11:20,490 --> 00:11:27,450
containers so anything we add from

00:11:24,330 --> 00:11:29,100
atomic it's it's a containers all the

00:11:27,450 --> 00:11:32,910
way up instead of turtles all the way

00:11:29,100 --> 00:11:35,610
down containers all the way up another

00:11:32,910 --> 00:11:39,750
so docker of course is our primary

00:11:35,610 --> 00:11:43,440
container runtime we also like looking

00:11:39,750 --> 00:11:45,810
into core OSS rocket spec as a way to

00:11:43,440 --> 00:11:50,390
achieve greater density within the

00:11:45,810 --> 00:11:53,220
cluster so both good topics to look into

00:11:50,390 --> 00:11:55,940
kubernetes is what we use for container

00:11:53,220 --> 00:11:58,380
lifecycle management this will

00:11:55,940 --> 00:12:03,290
automatically restart containers as

00:11:58,380 --> 00:12:06,320
needed if they crash or if a node fails

00:12:03,290 --> 00:12:07,500
and of course we've got links to

00:12:06,320 --> 00:12:10,740
OpenShift

00:12:07,500 --> 00:12:13,020
itself here's some more details about

00:12:10,740 --> 00:12:15,420
openshift if you want to track the

00:12:13,020 --> 00:12:17,670
project on github or if you'd like to

00:12:15,420 --> 00:12:21,510
participate in the community

00:12:17,670 --> 00:12:25,110
github comm slash OpenShift slash origin

00:12:21,510 --> 00:12:28,690
has a lot of great information I'll open

00:12:25,110 --> 00:12:36,140
this up really quick there's also a

00:12:28,690 --> 00:12:38,330
releases tab here that has a lot of

00:12:36,140 --> 00:12:42,290
information about what's new in this

00:12:38,330 --> 00:12:45,260
particular release along with binaries

00:12:42,290 --> 00:12:48,110
for the command-line tools so if you

00:12:45,260 --> 00:12:50,480
have a developer who wants to contact a

00:12:48,110 --> 00:12:52,870
remote open shift environment or if you

00:12:50,480 --> 00:12:55,220
would like to contact your local

00:12:52,870 --> 00:12:57,770
self-hosted OpenShift environment these

00:12:55,220 --> 00:13:00,820
are the command-line tools that you

00:12:57,770 --> 00:13:00,820
might want to access

00:13:03,100 --> 00:13:11,660
okay so terminology here's a maine

00:13:07,790 --> 00:13:15,140
glossary of terms that I'll quickly loop

00:13:11,660 --> 00:13:17,120
through first we have a node a node is

00:13:15,140 --> 00:13:21,590
basically a host machine for our

00:13:17,120 --> 00:13:23,930
purposes an image very similar to a VM

00:13:21,590 --> 00:13:26,210
image but we're using container images

00:13:23,930 --> 00:13:30,170
instead the main difference is with

00:13:26,210 --> 00:13:32,750
container images the host OS is going to

00:13:30,170 --> 00:13:35,750
share the kernel with the guest

00:13:32,750 --> 00:13:41,690
container so you only have one kernel

00:13:35,750 --> 00:13:45,440
per node usually containers basically is

00:13:41,690 --> 00:13:49,820
a running image a pod is a kubernetes

00:13:45,440 --> 00:13:52,700
term let's skip down to is image

00:13:49,820 --> 00:13:55,670
another thing about images there's an

00:13:52,700 --> 00:13:58,370
abstraction in openshift called image

00:13:55,670 --> 00:14:01,520
streams an image stream gives you a way

00:13:58,370 --> 00:14:05,090
to it fires events anytime a new image

00:14:01,520 --> 00:14:08,120
is added to your repository and you can

00:14:05,090 --> 00:14:10,460
add automation based on these image

00:14:08,120 --> 00:14:15,920
stream events that fire that's how we

00:14:10,460 --> 00:14:18,590
automate our deployments a pod is

00:14:15,920 --> 00:14:23,660
basically one or more containers that

00:14:18,590 --> 00:14:26,090
are physically co-located ask me more

00:14:23,660 --> 00:14:27,520
about this topic if needed but I'll try

00:14:26,090 --> 00:14:30,680
to get to the security stuff right away

00:14:27,520 --> 00:14:34,670
service is basically a software load

00:14:30,680 --> 00:14:38,720
balancer I like referring to my web

00:14:34,670 --> 00:14:40,970
services as services so this is a little

00:14:38,720 --> 00:14:44,089
confusing for me but for the purposes of

00:14:40,970 --> 00:14:49,190
this talk when I say service I'm talking

00:14:44,089 --> 00:14:53,120
about a load balancer a route is

00:14:49,190 --> 00:14:57,110
something that allows a service to be

00:14:53,120 --> 00:14:59,420
exposed externally so if I have a load

00:14:57,110 --> 00:15:02,480
balancer for my web applications and

00:14:59,420 --> 00:15:05,360
another load balancer for a set of DB

00:15:02,480 --> 00:15:07,610
resources I would probably want to

00:15:05,360 --> 00:15:09,760
expose the front-end but not the backend

00:15:07,610 --> 00:15:15,530
so I would give the front-end a route

00:15:09,760 --> 00:15:20,120
and leave the backend for internal

00:15:15,530 --> 00:15:23,030
addressing a replication controller

00:15:20,120 --> 00:15:24,920
helps really control the life cycle of

00:15:23,030 --> 00:15:27,050
these containers and guarantee that if

00:15:24,920 --> 00:15:29,600
you ask for a minimum of three to be

00:15:27,050 --> 00:15:32,210
running at all times kubernetes will

00:15:29,600 --> 00:15:37,540
help guaranteed offer some guarantees

00:15:32,210 --> 00:15:41,950
around the availability of your pods

00:15:37,540 --> 00:15:46,070
deployment config helps automate the

00:15:41,950 --> 00:15:50,210
distribution of images onto nodes and

00:15:46,070 --> 00:15:52,100
our build config is related to our first

00:15:50,210 --> 00:15:55,070
security topic here how we're going to

00:15:52,100 --> 00:15:58,190
help standardize the container images

00:15:55,070 --> 00:16:01,760
that are available inside your OpenShift

00:15:58,190 --> 00:16:05,990
cluster so here's a couple of those

00:16:01,760 --> 00:16:11,440
terms linked together in a relational

00:16:05,990 --> 00:16:14,510
diagram the blue pieces here are core

00:16:11,440 --> 00:16:19,520
kubernetes abstractions all of the

00:16:14,510 --> 00:16:22,720
orange pieces are kubernetes objects

00:16:19,520 --> 00:16:25,610
that are not part of the base

00:16:22,720 --> 00:16:28,970
terminology but they're extended terms

00:16:25,610 --> 00:16:31,880
that OpenShift has added some of these

00:16:28,970 --> 00:16:34,910
features are becoming available as

00:16:31,880 --> 00:16:38,050
upstream features in kubernetes for

00:16:34,910 --> 00:16:41,390
example the deployment configuration is

00:16:38,050 --> 00:16:43,640
being a contributed upstream to

00:16:41,390 --> 00:16:45,650
kubernetes I'm not sure if it will be

00:16:43,640 --> 00:16:47,390
called deployment configuration after

00:16:45,650 --> 00:16:49,820
they merge it in

00:16:47,390 --> 00:16:53,089
we may have to rebase around whatever

00:16:49,820 --> 00:16:56,360
changes that google asked for on that

00:16:53,089 --> 00:16:58,339
but a lot of development that the Red

00:16:56,360 --> 00:17:01,550
Hat team is doing is really going

00:16:58,339 --> 00:17:03,529
directly into the kubernetes project to

00:17:01,550 --> 00:17:06,980
help add multi-tenancy and security

00:17:03,529 --> 00:17:10,910
features and advanced deployments and

00:17:06,980 --> 00:17:14,390
other automations as well as securing

00:17:10,910 --> 00:17:17,150
the the docker runtime environment so we

00:17:14,390 --> 00:17:19,630
have it's not just our open source it's

00:17:17,150 --> 00:17:22,189
the community's open source and we

00:17:19,630 --> 00:17:30,380
contribute across the board to all of

00:17:22,189 --> 00:17:35,480
these projects so builds this is a link

00:17:30,380 --> 00:17:37,750
to hope this is a link to the open ship

00:17:35,480 --> 00:17:44,720
documentation that will introduce you to

00:17:37,750 --> 00:17:47,600
builds this will go into how we use a

00:17:44,720 --> 00:17:50,300
variety of build strategies you could

00:17:47,600 --> 00:17:53,570
see there's three listed here so our

00:17:50,300 --> 00:17:57,050
first build strategy is docker build if

00:17:53,570 --> 00:18:00,470
you have a reap repository with a docker

00:17:57,050 --> 00:18:03,470
file inside of it you could run docker

00:18:00,470 --> 00:18:05,600
build locally and then push the

00:18:03,470 --> 00:18:08,690
resulting image into the open ship

00:18:05,600 --> 00:18:11,120
registry you could also do this as part

00:18:08,690 --> 00:18:14,360
of your CI suite if you're already using

00:18:11,120 --> 00:18:16,400
Jenkins to run builds you can have it do

00:18:14,360 --> 00:18:18,169
an extra step of running docker build

00:18:16,400 --> 00:18:20,260
and then pushing the result into

00:18:18,169 --> 00:18:23,510
OpenShift

00:18:20,260 --> 00:18:26,240
running docker build has some inherent

00:18:23,510 --> 00:18:30,200
security risks inside a docker file

00:18:26,240 --> 00:18:33,080
you'll see things like apt-get install

00:18:30,200 --> 00:18:35,330
this package or yum install this other

00:18:33,080 --> 00:18:38,510
package depending on which base OS

00:18:35,330 --> 00:18:43,100
you're extending in order to carry out

00:18:38,510 --> 00:18:45,440
those actions the the build script needs

00:18:43,100 --> 00:18:47,600
to have root permissions in order to

00:18:45,440 --> 00:18:50,059
successfully carry out the yum install

00:18:47,600 --> 00:18:52,940
so there's additional risk you're

00:18:50,059 --> 00:18:56,540
handing out basically root access during

00:18:52,940 --> 00:18:57,919
the build life cycle so for this reason

00:18:56,540 --> 00:19:00,559
when openshift

00:18:57,919 --> 00:19:03,679
updates all of their code

00:19:00,559 --> 00:19:07,280
on OpenShift online on our hosted

00:19:03,679 --> 00:19:11,299
service it's quite likely that we will

00:19:07,280 --> 00:19:13,010
disable the docker build strategy since

00:19:11,299 --> 00:19:15,409
we're not comfortable handing out route

00:19:13,010 --> 00:19:17,780
permission to random people from the

00:19:15,409 --> 00:19:19,820
internet right it's something that if

00:19:17,780 --> 00:19:22,429
you're running your own OpenShift you

00:19:19,820 --> 00:19:24,250
can definitely have enabled depends on

00:19:22,429 --> 00:19:27,590
how much you trust your developers and

00:19:24,250 --> 00:19:29,840
with random random users from the

00:19:27,590 --> 00:19:34,760
internet we we can't afford to trust our

00:19:29,840 --> 00:19:37,130
developers so hopefully with our with

00:19:34,760 --> 00:19:39,799
our base of our base assumption of don't

00:19:37,130 --> 00:19:41,840
trust anybody we can prove that whether

00:19:39,799 --> 00:19:45,590
you trust your developers or not you

00:19:41,840 --> 00:19:48,890
should be able to do things safely so a

00:19:45,590 --> 00:19:51,679
safer build strategy or an alternate

00:19:48,890 --> 00:19:53,299
build strategy is custom builds this is

00:19:51,679 --> 00:19:53,990
another option that's available in

00:19:53,299 --> 00:19:56,929
OpenShift

00:19:53,990 --> 00:19:59,450
but source to image is the main one that

00:19:56,929 --> 00:20:02,630
we will have available with openshift

00:19:59,450 --> 00:20:08,570
online when that law relaunches with

00:20:02,630 --> 00:20:17,030
docker support so let's do a quick

00:20:08,570 --> 00:20:20,570
example if my machine holds up here

00:20:17,030 --> 00:20:25,720
let's see it looks like pages loading so

00:20:20,570 --> 00:20:32,030
I can go into one of my projects here

00:20:25,720 --> 00:20:35,330
and I'll click on add to project and we

00:20:32,030 --> 00:20:39,289
could show how a typical build and

00:20:35,330 --> 00:20:43,549
deploy looks so this for this particular

00:20:39,289 --> 00:20:46,340
example I'm going to name the service or

00:20:43,549 --> 00:20:50,480
the the thing I'm deploying I'll name it

00:20:46,340 --> 00:20:56,150
dub dub dub and I'm going to deploy some

00:20:50,480 --> 00:20:59,299
code that I have from github this is a

00:20:56,150 --> 00:21:01,010
node.js project so when you're running

00:20:59,299 --> 00:21:03,530
your build if you're onboarding new

00:21:01,010 --> 00:21:06,230
users it can really be this simple type

00:21:03,530 --> 00:21:08,840
in a repository name it and hit create

00:21:06,230 --> 00:21:10,240
write very simple to get started you

00:21:08,840 --> 00:21:13,669
want to see some of the Advanced Options

00:21:10,240 --> 00:21:16,700
we could start a someone on a dev brain

00:21:13,669 --> 00:21:19,190
or a particular feature or even enter a

00:21:16,700 --> 00:21:22,249
commit hash in here if we want to build

00:21:19,190 --> 00:21:25,459
something specific so very easy to

00:21:22,249 --> 00:21:27,739
customize this here's the route that

00:21:25,459 --> 00:21:30,409
will be exposing since this is a web

00:21:27,739 --> 00:21:32,299
service I'll say I'll leave this box

00:21:30,409 --> 00:21:35,059
selected and we'll say yes go ahead and

00:21:32,299 --> 00:21:38,450
expose this publicly right for databases

00:21:35,059 --> 00:21:40,879
we definitely unselect this box and say

00:21:38,450 --> 00:21:43,729
leave it behind internal to the

00:21:40,879 --> 00:21:48,259
kubernetes Network so I'll leave that

00:21:43,729 --> 00:21:51,649
selected we can also do additional

00:21:48,259 --> 00:21:54,859
automation via web hooks from github

00:21:51,649 --> 00:21:57,440
github Enterprise bitbucket a variety of

00:21:54,859 --> 00:21:59,509
revision control systems that have web

00:21:57,440 --> 00:22:03,079
hooks support and that web hook will

00:21:59,509 --> 00:22:06,379
fire in trigger a new build and possibly

00:22:03,079 --> 00:22:10,279
a new deploy based on your deployment

00:22:06,379 --> 00:22:12,559
config and in each stage of your release

00:22:10,279 --> 00:22:16,849
pipeline you'd have a different

00:22:12,559 --> 00:22:19,849
deployment config that might encapsulate

00:22:16,849 --> 00:22:21,799
any differences between your dev

00:22:19,849 --> 00:22:25,519
environment your your staging

00:22:21,799 --> 00:22:29,059
environment you may want to do high

00:22:25,519 --> 00:22:33,950
availability in production but maybe not

00:22:29,059 --> 00:22:36,769
for casual developers so you can encode

00:22:33,950 --> 00:22:38,719
all that some of those details in in the

00:22:36,769 --> 00:22:41,929
deployment config and the the templates

00:22:38,719 --> 00:22:44,179
per stage so I'll leave this on auto

00:22:41,929 --> 00:22:46,429
deploy anytime a new image is available

00:22:44,179 --> 00:22:48,950
and you could also see that I'm going to

00:22:46,429 --> 00:22:51,979
automatically rebuild any time the

00:22:48,950 --> 00:22:55,009
operations team updates the base image

00:22:51,979 --> 00:22:58,519
that I depend on on the previous page I

00:22:55,009 --> 00:23:02,869
selected a note j/s base which already

00:22:58,519 --> 00:23:05,659
includes rel and note Jas is maintained

00:23:02,869 --> 00:23:09,169
by the operations team and so anytime

00:23:05,659 --> 00:23:11,629
there's a exploit let's say shell shock

00:23:09,169 --> 00:23:14,779
or heartbleed one of these issues comes

00:23:11,629 --> 00:23:17,269
up you shouldn't have your node.js

00:23:14,779 --> 00:23:20,719
developers be responsible for closing

00:23:17,269 --> 00:23:23,239
that bug and saying oh hey we think we

00:23:20,719 --> 00:23:25,759
have it fixed you know you want to have

00:23:23,239 --> 00:23:27,240
someone from your operations team who's

00:23:25,759 --> 00:23:29,910
responsible for

00:23:27,240 --> 00:23:35,160
standardizing the base images across

00:23:29,910 --> 00:23:37,590
your enterprise and this allows you to

00:23:35,160 --> 00:23:41,460
automatically rebuild any of the

00:23:37,590 --> 00:23:45,210
application containers when its base

00:23:41,460 --> 00:23:48,510
image dependency has a change to it so

00:23:45,210 --> 00:23:51,059
if the ops team pushes an update that

00:23:48,510 --> 00:23:53,820
closes that heartbleed bug or shell

00:23:51,059 --> 00:23:57,210
shock will rebuild the application

00:23:53,820 --> 00:23:59,100
container as well automatically we could

00:23:57,210 --> 00:24:03,150
also inject a couple environment

00:23:59,100 --> 00:24:06,540
variables here here's the easy way to

00:24:03,150 --> 00:24:09,030
let's say you had a database that was

00:24:06,540 --> 00:24:11,640
outside of your OpenShift cluster you

00:24:09,030 --> 00:24:13,350
could give it a reference via an

00:24:11,640 --> 00:24:18,840
environment variable and allow your

00:24:13,350 --> 00:24:23,190
application to then contact MongoDB at a

00:24:18,840 --> 00:24:27,600
specific URL or something like that so

00:24:23,190 --> 00:24:29,010
I'll hit create that's basically what I

00:24:27,600 --> 00:24:32,309
wanted to cover we could watch this

00:24:29,010 --> 00:24:35,520
build as it happens this should be

00:24:32,309 --> 00:24:38,179
streaming logs as the build processes

00:24:35,520 --> 00:24:41,460
this will be since docker is a layered

00:24:38,179 --> 00:24:44,490
file system we have the base image and

00:24:41,460 --> 00:24:47,280
now this is a running build adding more

00:24:44,490 --> 00:24:50,400
layers on top once that build is

00:24:47,280 --> 00:24:53,220
complete we'll upload the application

00:24:50,400 --> 00:24:57,780
image back into our internal registry

00:24:53,220 --> 00:25:03,470
and then deploy it across the nodes in

00:24:57,780 --> 00:25:03,470
our cluster see if I could get back to

00:25:03,679 --> 00:25:10,110
overview should be able to catch the

00:25:07,260 --> 00:25:12,750
deploy here as soon as that push to the

00:25:10,110 --> 00:25:16,890
registry is done we should automatically

00:25:12,750 --> 00:25:21,840
see since I selected auto deploy it

00:25:16,890 --> 00:25:25,170
should show up right right here we'll

00:25:21,840 --> 00:25:29,040
check back on it in a minute securing

00:25:25,170 --> 00:25:33,330
builds there's more documentation on

00:25:29,040 --> 00:25:35,860
this topic if you want to dig in deeper

00:25:33,330 --> 00:25:39,370
here's another good link in our

00:25:35,860 --> 00:25:42,340
OpenShift docks also since we're

00:25:39,370 --> 00:25:44,860
submitting this image into our internal

00:25:42,340 --> 00:25:47,350
open ship registry if we want to have an

00:25:44,860 --> 00:25:52,000
external service jenkins or something

00:25:47,350 --> 00:25:55,120
else like that interact with our with

00:25:52,000 --> 00:25:58,150
our with our docker registry we have

00:25:55,120 --> 00:26:01,210
some notes on how to set secrets and and

00:25:58,150 --> 00:26:04,390
secure that registry another good topic

00:26:01,210 --> 00:26:08,280
that the Red Hat team has been actively

00:26:04,390 --> 00:26:10,210
developing or has contributed to is

00:26:08,280 --> 00:26:12,520
notary

00:26:10,210 --> 00:26:16,110
this is a feature for docker that helps

00:26:12,520 --> 00:26:18,250
with image signing so that you know

00:26:16,110 --> 00:26:21,780
internal to the registry I have a

00:26:18,250 --> 00:26:25,030
certain checksum or a certain hash sha

00:26:21,780 --> 00:26:28,000
value that that I can identify this

00:26:25,030 --> 00:26:30,970
image we want to know when we download

00:26:28,000 --> 00:26:33,550
the image that we can check the

00:26:30,970 --> 00:26:36,340
signature and verify that no code has

00:26:33,550 --> 00:26:37,210
changed in transit that I got the image

00:26:36,340 --> 00:26:40,170
that I asked for

00:26:37,210 --> 00:26:43,060
right so notary goes into that topic

00:26:40,170 --> 00:26:45,670
here's a link for more information

00:26:43,060 --> 00:26:46,690
ooh my build my build didn't work

00:26:45,670 --> 00:26:51,850
unfortunately

00:26:46,690 --> 00:26:59,100
I should have kept the tab hidden let's

00:26:51,850 --> 00:27:05,290
see I'll rebuild and see if it recovers

00:26:59,100 --> 00:27:08,200
okay runtime security so now that we

00:27:05,290 --> 00:27:11,320
have theoretically now we have an open

00:27:08,200 --> 00:27:13,330
shift container up and running let's see

00:27:11,320 --> 00:27:15,310
what we can do now that we have an image

00:27:13,330 --> 00:27:17,590
built and we're ready to deploy let's

00:27:15,310 --> 00:27:22,060
see what we can do to help secure the

00:27:17,590 --> 00:27:25,240
runtime environment we actually have one

00:27:22,060 --> 00:27:27,580
of our Red Hat engineers who who works

00:27:25,240 --> 00:27:31,600
specifically on the networking backplane

00:27:27,580 --> 00:27:34,240
is Rajat Chopra he has a talk at I

00:27:31,600 --> 00:27:36,370
believe four o'clock called networking

00:27:34,240 --> 00:27:38,520
and in container world so if you want to

00:27:36,370 --> 00:27:42,670
know a lot more about how to guarantee

00:27:38,520 --> 00:27:44,650
Network isolation or how the the

00:27:42,670 --> 00:27:47,280
internal software-defined networking

00:27:44,650 --> 00:27:50,120
works for the cluster

00:27:47,280 --> 00:27:53,880
this is a good good talk to look into

00:27:50,120 --> 00:27:56,700
there's also videos on our Software

00:27:53,880 --> 00:28:00,620
Defined Networking model and some notes

00:27:56,700 --> 00:28:03,390
on how to set up SSL or TSL certificates

00:28:00,620 --> 00:28:06,240
with the route that's established into

00:28:03,390 --> 00:28:10,230
your container so these are good notes

00:28:06,240 --> 00:28:11,820
on network security this one

00:28:10,230 --> 00:28:17,730
particularly the software-defined

00:28:11,820 --> 00:28:20,090
networking portion let's see if I can

00:28:17,730 --> 00:28:20,090
find

00:28:28,630 --> 00:28:34,270
we have a topological diagram that

00:28:31,780 --> 00:28:38,440
should have a link right about here and

00:28:34,270 --> 00:28:45,630
I think this display resolution is not

00:28:38,440 --> 00:28:48,190
gonna allow me to show it browse its

00:28:45,630 --> 00:28:52,690
yeah that's not it it should yeah it

00:28:48,190 --> 00:28:57,390
should be we're okay

00:28:52,690 --> 00:28:57,390
I am not sure where you're pointing oh

00:28:58,590 --> 00:29:04,090
okay yeah yeah yeah thank you

00:29:00,910 --> 00:29:06,790
all right so here we can see a couple

00:29:04,090 --> 00:29:09,970
objects that have been deployed this

00:29:06,790 --> 00:29:12,550
represents the route or the the hostname

00:29:09,970 --> 00:29:16,030
for my application this works similarly

00:29:12,550 --> 00:29:17,800
to Apache virtual hosts so anytime we

00:29:16,030 --> 00:29:20,380
have incoming traffic with a certain

00:29:17,800 --> 00:29:22,540
host header that matches the name of

00:29:20,380 --> 00:29:26,740
this route will then pass that along to

00:29:22,540 --> 00:29:29,980
the service or the load balancer which

00:29:26,740 --> 00:29:33,070
will then pass this into the containers

00:29:29,980 --> 00:29:40,090
that will be part of a scaled set so let

00:29:33,070 --> 00:29:42,400
me scale up the looks like the second

00:29:40,090 --> 00:29:44,260
build completed and was able to

00:29:42,400 --> 00:29:48,460
successfully deploy so here's our

00:29:44,260 --> 00:29:51,730
dub-dub-dub service and I can then scale

00:29:48,460 --> 00:29:55,030
this up to four containers we should see

00:29:51,730 --> 00:29:58,060
those containers coming online and we

00:29:55,030 --> 00:30:00,250
should see similar information on this

00:29:58,060 --> 00:30:03,490
diagram as these containers come online

00:30:00,250 --> 00:30:06,010
and OpenShift provides a flat networking

00:30:03,490 --> 00:30:08,260
space across each of these containers so

00:30:06,010 --> 00:30:10,210
if I click on each one we'll see more

00:30:08,260 --> 00:30:13,930
information in the right-hand pane and I

00:30:10,210 --> 00:30:16,270
could see the IP address of each of

00:30:13,930 --> 00:30:18,340
these containers so we'll have a flat

00:30:16,270 --> 00:30:21,790
networking space within this particular

00:30:18,340 --> 00:30:27,910
project there's a variety of project

00:30:21,790 --> 00:30:33,330
scopes here but these pods can

00:30:27,910 --> 00:30:36,160
communicate directly I P to IP if needed

00:30:33,330 --> 00:30:38,740
ideally you'll communicate via the

00:30:36,160 --> 00:30:40,400
service or the load balancer in order to

00:30:38,740 --> 00:30:44,900
spread traffic across

00:30:40,400 --> 00:30:48,290
your pods and if you want to add

00:30:44,900 --> 00:30:50,210
additional networking isolation you we

00:30:48,290 --> 00:30:54,080
have a feature you can enable on our

00:30:50,210 --> 00:30:58,760
open V switch network which basically

00:30:54,080 --> 00:31:01,070
does a private VX LAN per project that

00:30:58,760 --> 00:31:05,060
would prevent you from communicating

00:31:01,070 --> 00:31:06,980
across projects so it depends on how you

00:31:05,060 --> 00:31:10,420
want to architect your solution whether

00:31:06,980 --> 00:31:13,160
that's needed or not depends on you know

00:31:10,420 --> 00:31:17,240
depends on your the way you deploy your

00:31:13,160 --> 00:31:19,610
code but we do have additional support

00:31:17,240 --> 00:31:27,830
for a network isolation per per project

00:31:19,610 --> 00:31:30,230
using a private VX Lam selinux is an

00:31:27,830 --> 00:31:33,380
important topic how many of you are

00:31:30,230 --> 00:31:35,990
familiar with SELinux how many have it

00:31:33,380 --> 00:31:36,740
running on your laptop alright good good

00:31:35,990 --> 00:31:41,480
for you

00:31:36,740 --> 00:31:44,420
ok so I'm using Fedora on my laptop and

00:31:41,480 --> 00:31:46,520
it's pretty solid

00:31:44,420 --> 00:31:49,160
I think Red Hat has a lot of experience

00:31:46,520 --> 00:31:51,220
with this topic in particular there's

00:31:49,160 --> 00:31:54,380
been some pain over the years but it's

00:31:51,220 --> 00:31:56,660
working pretty well now and this is one

00:31:54,380 --> 00:31:59,000
of the tools we use to help lock down

00:31:56,660 --> 00:32:01,540
these container environments and create

00:31:59,000 --> 00:32:04,880
a security context

00:32:01,540 --> 00:32:06,980
dan Walsh had a talk I believe earlier

00:32:04,880 --> 00:32:09,020
in the day or somewhere on the schedule

00:32:06,980 --> 00:32:11,990
he could go into more detail on this

00:32:09,020 --> 00:32:16,220
topic if you like but we basically

00:32:11,990 --> 00:32:19,550
create a security context that's bound

00:32:16,220 --> 00:32:22,910
to a specific user scope and what we

00:32:19,550 --> 00:32:26,660
tried to do is run every container with

00:32:22,910 --> 00:32:30,310
a random user ID what this helps is if

00:32:26,660 --> 00:32:34,190
we have a SELinux policy for user number

00:32:30,310 --> 00:32:36,650
2030 and we start up two containers with

00:32:34,190 --> 00:32:38,690
the same user ID there's a potential

00:32:36,650 --> 00:32:41,540
risk that someone could break out of one

00:32:38,690 --> 00:32:43,610
container across to the other container

00:32:41,540 --> 00:32:46,820
with the same user ID so we assign

00:32:43,610 --> 00:32:53,070
random user IDs to the containers to

00:32:46,820 --> 00:32:55,610
help accommodate for this potential risk

00:32:53,070 --> 00:32:57,389
so here if you want to see more about

00:32:55,610 --> 00:33:02,159
inside the container

00:32:57,389 --> 00:33:05,549
here's we use this must run as range and

00:33:02,159 --> 00:33:09,090
we have a range of you IDs and we'll

00:33:05,549 --> 00:33:12,179
select one feed it into the container so

00:33:09,090 --> 00:33:15,240
when you're building containers whether

00:33:12,179 --> 00:33:17,190
it's via via the source to image this

00:33:15,240 --> 00:33:20,450
should work automatically but if you're

00:33:17,190 --> 00:33:24,149
building images externally to OpenShift

00:33:20,450 --> 00:33:26,159
make sure you don't run as user that's

00:33:24,149 --> 00:33:28,350
the primary thing to remember never

00:33:26,159 --> 00:33:30,779
allow the container to run as user or

00:33:28,350 --> 00:33:33,269
run as root right you don't want your

00:33:30,779 --> 00:33:36,570
containers running as root and they

00:33:33,269 --> 00:33:38,789
should allow random view IDs to be

00:33:36,570 --> 00:33:45,240
assigned if you really want them to work

00:33:38,789 --> 00:33:50,570
well with OpenShift online OC is our

00:33:45,240 --> 00:33:56,720
command line tool if you run OC get SCC

00:33:50,570 --> 00:34:06,179
you should see a my terminal is not

00:33:56,720 --> 00:34:10,319
available OC get SCC should give me a

00:34:06,179 --> 00:34:13,079
list of some of the security contexts

00:34:10,319 --> 00:34:18,510
that have been set up across my

00:34:13,079 --> 00:34:21,750
openshift cluster next topic we'll go

00:34:18,510 --> 00:34:23,819
into is composition now that we have one

00:34:21,750 --> 00:34:25,800
service one web service running I

00:34:23,819 --> 00:34:28,200
shouldn't say the word service now that

00:34:25,800 --> 00:34:29,579
we have you know what I mean one web

00:34:28,200 --> 00:34:32,730
service one application that I've

00:34:29,579 --> 00:34:34,919
deployed we may want to add a database

00:34:32,730 --> 00:34:39,089
we may want to have multiple services

00:34:34,919 --> 00:34:42,389
that compose a multiple micro services

00:34:39,089 --> 00:34:45,540
that compose a larger application so you

00:34:42,389 --> 00:34:49,560
can help compose multiple containers

00:34:45,540 --> 00:34:52,169
together using templates and then

00:34:49,560 --> 00:34:55,139
configure these images to talk to each

00:34:52,169 --> 00:34:59,280
other or to be aware of each other using

00:34:55,139 --> 00:35:01,619
environment variables so if I wanted to

00:34:59,280 --> 00:35:06,150
set an environment variable I guess

00:35:01,619 --> 00:35:06,810
first I'm going to go into one of the

00:35:06,150 --> 00:35:08,940
containers

00:35:06,810 --> 00:35:12,630
we have here this isn't the one I

00:35:08,940 --> 00:35:18,750
deployed here's a container we deployed

00:35:12,630 --> 00:35:26,550
I should be able to check the logs and

00:35:18,750 --> 00:35:32,810
get a live terminal I could see that

00:35:26,550 --> 00:35:32,810
inside this container process ID one

00:35:35,420 --> 00:35:40,710
well if I could scroll here process ID

00:35:38,220 --> 00:35:42,930
one is actually in p.m. so I'm clearly

00:35:40,710 --> 00:35:53,700
inside a container it's not a init

00:35:42,930 --> 00:35:55,920
script or something like that and here's

00:35:53,700 --> 00:36:04,650
a random user ID that I've been assigned

00:35:55,920 --> 00:36:10,070
inside the container also I set a

00:36:04,650 --> 00:36:15,260
generic key value right so if I grep for

00:36:10,070 --> 00:36:15,260
key oops

00:36:21,200 --> 00:36:26,700
here's the key and value the generic

00:36:24,299 --> 00:36:31,650
kyun value that I configured during our

00:36:26,700 --> 00:36:34,109
build phase so this could be a

00:36:31,650 --> 00:36:36,299
connection string to a database or

00:36:34,109 --> 00:36:38,400
something else that that my application

00:36:36,299 --> 00:36:41,369
needs to be aware of if I wanted to set

00:36:38,400 --> 00:36:45,440
a new environment variable I can update

00:36:41,369 --> 00:36:48,930
the deployment config or the buildconfig

00:36:45,440 --> 00:36:51,289
using the command like this and this

00:36:48,930 --> 00:36:54,770
will go update the kubernetes

00:36:51,289 --> 00:36:57,829
configuration file and automatically

00:36:54,770 --> 00:37:06,359
redeploy my containers with the new

00:36:57,829 --> 00:37:09,809
configuration templates this is one of

00:37:06,359 --> 00:37:13,770
my favorite topics I almost think that

00:37:09,809 --> 00:37:16,039
these would be better named as maybe

00:37:13,770 --> 00:37:19,950
installers this really encompasses

00:37:16,039 --> 00:37:23,900
everything that your application is

00:37:19,950 --> 00:37:28,710
comprised of so let's look at example

00:37:23,900 --> 00:37:37,010
here I've got a project on github that

00:37:28,710 --> 00:37:38,390
includes a template so this project uses

00:37:37,010 --> 00:37:44,190
nodejs

00:37:38,390 --> 00:37:47,760
with a Resta fie framework it uses

00:37:44,190 --> 00:37:52,369
MongoDB as the back-end environment and

00:37:47,760 --> 00:37:55,829
on the client side it uses leaflet j/s

00:37:52,369 --> 00:38:00,329
so I have a file in here we could look

00:37:55,829 --> 00:38:02,849
at here's the template file that I'll be

00:38:00,329 --> 00:38:07,829
deploying so there's a couple things

00:38:02,849 --> 00:38:12,660
that are unique to templates they all

00:38:07,829 --> 00:38:16,020
have a template name you can set an icon

00:38:12,660 --> 00:38:18,539
in here and then make this template easy

00:38:16,020 --> 00:38:21,490
to install to developers if I install

00:38:18,539 --> 00:38:24,520
this template in openshift I'll get a

00:38:21,490 --> 00:38:26,980
a one click launcher in the web

00:38:24,520 --> 00:38:30,369
interface so I'll install this and we'll

00:38:26,980 --> 00:38:34,170
see what it looks like after I install a

00:38:30,369 --> 00:38:36,820
template will also include a list of

00:38:34,170 --> 00:38:39,430
kubernetes objects that will then be

00:38:36,820 --> 00:38:43,000
posted to the API as the template is

00:38:39,430 --> 00:38:46,680
processed part of the processing for the

00:38:43,000 --> 00:38:50,290
template is to substitute in variables

00:38:46,680 --> 00:38:53,020
so you'll have a parameterised injection

00:38:50,290 --> 00:38:56,910
of config into the template we'll see an

00:38:53,020 --> 00:38:56,910
example of what this looks like as well

00:38:58,530 --> 00:39:06,610
so this is this is generally what some

00:39:04,390 --> 00:39:08,560
of the data might look like that's being

00:39:06,610 --> 00:39:12,580
fed into kubernetes here's our

00:39:08,560 --> 00:39:16,170
deployment config object that's going to

00:39:12,580 --> 00:39:20,380
get a particular database service name

00:39:16,170 --> 00:39:22,060
it has a list of triggers or change

00:39:20,380 --> 00:39:27,609
events so anytime the image changes

00:39:22,060 --> 00:39:32,740
we'll deploy we could set a default

00:39:27,609 --> 00:39:34,780
number of replicas here and setup ports

00:39:32,740 --> 00:39:38,380
and environment variables that will be

00:39:34,780 --> 00:39:41,830
used so for this MongoDB environment

00:39:38,380 --> 00:39:44,950
we'll be injecting a MongoDB user a

00:39:41,830 --> 00:39:47,590
password a database name and a couple

00:39:44,950 --> 00:39:50,650
other details we'll also inject the

00:39:47,590 --> 00:39:55,090
exact same configuration into our

00:39:50,650 --> 00:39:58,090
front-end environment the the nodejs web

00:39:55,090 --> 00:40:00,550
server that should be here's the the

00:39:58,090 --> 00:40:05,710
front-end environment we're passing in

00:40:00,550 --> 00:40:08,410
the same credentials so let's see if I

00:40:05,710 --> 00:40:12,490
can spin up this application really

00:40:08,410 --> 00:40:14,260
quickly actually I'm going to

00:40:12,490 --> 00:40:16,090
I think I'll flip through the rest of

00:40:14,260 --> 00:40:20,650
these slides and then close with with

00:40:16,090 --> 00:40:22,630
the demo a couple other topics other

00:40:20,650 --> 00:40:25,119
things you might add into a template if

00:40:22,630 --> 00:40:28,300
your application requires a persistent

00:40:25,119 --> 00:40:29,590
volume or any kind of disk your

00:40:28,300 --> 00:40:34,180
containers are meant to be stateless

00:40:29,590 --> 00:40:36,970
easily destroyed easily recreated so

00:40:34,180 --> 00:40:39,850
if you if you need storage in the

00:40:36,970 --> 00:40:44,050
template you can identify a volume or a

00:40:39,850 --> 00:40:47,110
persistent C persistent volume claim and

00:40:44,050 --> 00:40:48,850
then basically detail that in the

00:40:47,110 --> 00:40:52,720
template make it available to your

00:40:48,850 --> 00:40:54,400
application other advanced topics that

00:40:52,720 --> 00:40:56,620
you're gonna want to look into for

00:40:54,400 --> 00:40:59,620
security is there's something called

00:40:56,620 --> 00:41:02,650
secrets if you wanted a let's say your

00:40:59,620 --> 00:41:04,780
SSL configuration I'm not going to

00:41:02,650 --> 00:41:07,240
publish all of that via an environment

00:41:04,780 --> 00:41:10,420
variable what I'll do instead is create

00:41:07,240 --> 00:41:13,540
something called a secret that secret

00:41:10,420 --> 00:41:15,430
will then be mounted as a file into my

00:41:13,540 --> 00:41:18,870
container so that's how I would put in

00:41:15,430 --> 00:41:21,640
things like SSL config or other details

00:41:18,870 --> 00:41:25,860
that might need to be injected into a

00:41:21,640 --> 00:41:29,980
container service accounts are a way to

00:41:25,860 --> 00:41:31,870
delegate authorization into a cluster so

00:41:29,980 --> 00:41:36,570
there's another good topic to to follow

00:41:31,870 --> 00:41:39,190
up on and finally if you want to

00:41:36,570 --> 00:41:44,800
validate your containers or do security

00:41:39,190 --> 00:41:47,860
auditing this open SC AP project will

00:41:44,800 --> 00:41:51,210
help validate and review the container

00:41:47,860 --> 00:41:55,150
content check for vulnerabilities and

00:41:51,210 --> 00:42:00,250
possibly reject a deploy if it doesn't

00:41:55,150 --> 00:42:02,170
pass the test right so there's a couple

00:42:00,250 --> 00:42:04,450
ways to try OpenShift you could sign up

00:42:02,170 --> 00:42:06,460
for OpenShift enterprise we've also have

00:42:04,450 --> 00:42:09,580
a hosted environment called OpenShift

00:42:06,460 --> 00:42:11,590
dedicated please feel free to sign up

00:42:09,580 --> 00:42:13,090
for either of these environments if

00:42:11,590 --> 00:42:15,700
you're just interested in the upstream

00:42:13,090 --> 00:42:19,900
code I showed you the origin releases

00:42:15,700 --> 00:42:21,520
earlier we also have a all in one VM if

00:42:19,900 --> 00:42:24,940
you'd like to run the whole cluster

00:42:21,520 --> 00:42:28,330
locally just with vagrant up this

00:42:24,940 --> 00:42:30,760
OpenShift org slash VM has a VirtualBox

00:42:28,330 --> 00:42:33,820
file or VirtualBox image and a vagrant

00:42:30,760 --> 00:42:37,300
file also if you'd like to deploy a

00:42:33,820 --> 00:42:40,740
large cluster the openshift ansible repo

00:42:37,300 --> 00:42:45,430
has playbooks for deploying openshift to

00:42:40,740 --> 00:42:46,500
Amazon to Google compute - raw raw

00:42:45,430 --> 00:42:49,380
machines if you

00:42:46,500 --> 00:42:51,930
wrong machines anywhere you like and

00:42:49,380 --> 00:42:54,750
suppose our deployment tool for large

00:42:51,930 --> 00:42:57,450
environments the environment that I am

00:42:54,750 --> 00:43:01,440
using today I set up using this

00:42:57,450 --> 00:43:05,370
particular ansible playbook this one

00:43:01,440 --> 00:43:09,480
command and one command 20 minutes later

00:43:05,370 --> 00:43:12,150
I had a cluster of 10 machines so there

00:43:09,480 --> 00:43:14,400
should be very easy to setup feel free

00:43:12,150 --> 00:43:17,280
feel free to file bugs or issues if

00:43:14,400 --> 00:43:21,660
you've run into any problems along in

00:43:17,280 --> 00:43:25,050
the process more great links for you if

00:43:21,660 --> 00:43:27,350
you'd like some free e-books courtesy of

00:43:25,050 --> 00:43:32,430
Red Hat we've got a ebook on kubernetes

00:43:27,350 --> 00:43:34,890
ebook on docker security and more great

00:43:32,430 --> 00:43:39,090
documentation online official training

00:43:34,890 --> 00:43:42,990
courses from Red Hat and more

00:43:39,090 --> 00:43:50,460
information so if I have a minute left I

00:43:42,990 --> 00:43:53,250
will risk running this project and let's

00:43:50,460 --> 00:44:00,440
see if I can do a quick deploy here so I

00:43:53,250 --> 00:44:00,440
am in the demo project switch to demo

00:44:01,940 --> 00:44:05,330
I'll run

00:44:08,080 --> 00:44:17,200
I'll run OSI create on our template file

00:44:14,050 --> 00:44:20,660
this will install the template locally

00:44:17,200 --> 00:44:24,200
into the project that I'm using now when

00:44:20,660 --> 00:44:32,420
I run and add to project I should be

00:44:24,200 --> 00:44:34,660
able to find on this page a parks see

00:44:32,420 --> 00:44:34,660
all

00:44:40,140 --> 00:44:58,140
should be a project here with my parks

00:44:44,779 --> 00:45:01,229
application anyway parks should show up

00:44:58,140 --> 00:45:03,749
as a one-click kind of like this with a

00:45:01,229 --> 00:45:05,789
no js' MongoDB example I'll click on

00:45:03,749 --> 00:45:08,130
this because this will have a similar

00:45:05,789 --> 00:45:13,369
example here we can substitute the

00:45:08,130 --> 00:45:16,469
repository URL we can add in the

00:45:13,369 --> 00:45:19,170
database user database password and

00:45:16,469 --> 00:45:21,930
database name the result that we'll end

00:45:19,170 --> 00:45:25,589
up with has the front end and the back

00:45:21,930 --> 00:45:32,660
end fully configured it will end up

00:45:25,589 --> 00:45:32,660
looking let's see if I have a backup

00:45:32,719 --> 00:45:37,259
yeah I don't have a backup of it but if

00:45:35,279 --> 00:45:38,969
you'd like to see this demo in the Red

00:45:37,259 --> 00:45:41,069
Hat booth just outside the door I'd be

00:45:38,969 --> 00:45:44,509
happy to show you out there thank you

00:45:41,069 --> 00:45:44,509
that's all I got

00:50:19,570 --> 00:50:22,869
hi pepper

00:50:53,000 --> 00:50:56,930
so where is the where's the

00:51:10,210 --> 00:51:13,480
my pepper

00:51:33,070 --> 00:51:42,620
hello hello everyone just a reminder

00:51:38,290 --> 00:51:43,970
please if you liked the sessions or you

00:51:42,620 --> 00:51:45,770
don't like them which I hope wouldn't

00:51:43,970 --> 00:51:48,800
happen leave some feedback on our

00:51:45,770 --> 00:51:51,440
official website please also tweet and

00:51:48,800 --> 00:51:54,110
blog about the event so we have a

00:51:51,440 --> 00:51:58,550
competition for the best blog post so

00:51:54,110 --> 00:52:01,510
you can win some prizes basically that's

00:51:58,550 --> 00:52:01,510
it thank you very much

00:52:33,500 --> 00:52:43,559
yeah you didn't have the swing for the

00:52:36,269 --> 00:52:46,670
speakers like the whole D and the bag is

00:52:43,559 --> 00:52:46,670
their first time here

00:53:03,620 --> 00:53:11,390
sorry I think we can actually switch

00:53:08,730 --> 00:53:11,390
them here

00:53:20,730 --> 00:53:26,580
sorry for a young boy huh

00:53:28,940 --> 00:53:46,110
David cash bar nobody here maybe but

00:53:43,980 --> 00:53:48,380
don't worry we'll time you and we'll be

00:53:46,110 --> 00:53:48,380
showing

00:54:37,570 --> 00:54:51,940
so we have the next presentation ready

00:54:40,970 --> 00:54:51,940
please welcome Ryan hella see thank you

00:54:52,000 --> 00:54:58,010
okay thank you

00:54:55,180 --> 00:55:00,650
so hi my name is Ryan Halsey

00:54:58,010 --> 00:55:01,970
I'm a software engineer at Red Hat I've

00:55:00,650 --> 00:55:07,310
been at Red Hat for about a year and a

00:55:01,970 --> 00:55:10,070
half now and my specific focus the Red

00:55:07,310 --> 00:55:12,520
Hat has been around OpenStack I've been

00:55:10,070 --> 00:55:15,349
working on tech for that entire time

00:55:12,520 --> 00:55:18,859
specifically been working on containers

00:55:15,349 --> 00:55:21,920
for about a year now the container

00:55:18,859 --> 00:55:23,599
technology really has become a hit with

00:55:21,920 --> 00:55:26,420
an open stack and it's something that's

00:55:23,599 --> 00:55:27,980
really been growing there's been some

00:55:26,420 --> 00:55:32,480
projects around it and it's really

00:55:27,980 --> 00:55:35,680
started to take off and be successful so

00:55:32,480 --> 00:55:35,680

YouTube URL: https://www.youtube.com/watch?v=J-Mm6-uxfds


