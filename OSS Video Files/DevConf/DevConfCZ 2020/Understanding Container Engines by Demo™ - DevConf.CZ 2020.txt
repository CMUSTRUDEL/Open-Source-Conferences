Title: Understanding Container Engines by Demo™ - DevConf.CZ 2020
Publication date: 2020-03-25
Playlist: DevConfCZ 2020
Description: 
	Speakers: Scott McCarty

So, you know that containers are fancy processes, and you know that the kubelet, docker engine, runc and the kernel work together to somehow create containers, but you have gaps in knowledge on exactly what happens in between kubectl run (or docker run, or podman run) and ps -ef on a node. If you can’t explain it on a napkin and that drives you nuts, this talk is for you.

There are a lot of technologies working together to make a simple command so simple. It’s like an iceberg of technology below the water, and we are going to scuba dive below the surface and explore what’s going on. After attending this talk, you should be able to impress your friends, influence people and become rich using your new, deeper understanding of how the orchestration node (kubelet), container engine (CRI-O, dockerd, containerd), container runtime (runc, kata, gvisor), and Linux kernel work together to create containers.

[ https://sched.co/YOq1 ]

--
Recordings of talks at DevConf are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:01,020 --> 00:00:07,470
hello everyone how are you excellent I'm

00:00:05,700 --> 00:00:10,049
going to ask you some questions to start

00:00:07,470 --> 00:00:14,309
so how many of you are experts in

00:00:10,049 --> 00:00:16,049
containers he is all right I have one

00:00:14,309 --> 00:00:20,580
guy that can back me up if I have

00:00:16,049 --> 00:00:24,330
questions how many of you have ever had

00:00:20,580 --> 00:00:26,430
a hex put on you a curse have you ever

00:00:24,330 --> 00:00:28,800
had a curse put on you do you know what

00:00:26,430 --> 00:00:30,270
a curse is like when a witch like like

00:00:28,800 --> 00:00:31,920
somebody you do something bad to someone

00:00:30,270 --> 00:00:33,210
and then the witch put some kind of

00:00:31,920 --> 00:00:36,150
curse on you and then you have bad luck

00:00:33,210 --> 00:00:38,430
for a long time I'm hoping that during

00:00:36,150 --> 00:00:40,470
this talk since it is made out of lot of

00:00:38,430 --> 00:00:43,050
demo it will not have bad luck because

00:00:40,470 --> 00:00:45,180
last week I had a lot of bad luck in

00:00:43,050 --> 00:00:46,890
Greece and I think somebody put a curse

00:00:45,180 --> 00:00:50,720
on me so if anybody knows how to remove

00:00:46,890 --> 00:00:54,600
a curse after this I need to talk to you

00:00:50,720 --> 00:00:58,460
all right so on a serious note though

00:00:54,600 --> 00:01:01,850
how many of you have used docker before

00:00:58,460 --> 00:01:04,350
good how many of you have used pod man

00:01:01,850 --> 00:01:07,920
that's very good how many of you have

00:01:04,350 --> 00:01:10,889
used cryo okay last how many about how

00:01:07,920 --> 00:01:12,600
many have used container D all right so

00:01:10,889 --> 00:01:14,909
less how about just kubernetes in

00:01:12,600 --> 00:01:17,399
general okay good so we have a pretty

00:01:14,909 --> 00:01:20,969
good this is good now how many of you

00:01:17,399 --> 00:01:22,590
feel like there's magical black box

00:01:20,969 --> 00:01:27,569
stuff happening in the container engine

00:01:22,590 --> 00:01:30,240
I will dispel this after this you will

00:01:27,569 --> 00:01:32,219
realize how not complicated this is or

00:01:30,240 --> 00:01:34,529
how maybe complicated and not

00:01:32,219 --> 00:01:36,029
complicated is at the same time it's

00:01:34,529 --> 00:01:39,869
actually quite complicated in certain

00:01:36,029 --> 00:01:42,209
ways but then not another way so I'm

00:01:39,869 --> 00:01:43,950
going to start with this talk by doing

00:01:42,209 --> 00:01:46,409
three things we're going to have some

00:01:43,950 --> 00:01:48,509
drawings to set up the demo then I'm

00:01:46,409 --> 00:01:51,090
going to run the demo and then I'm going

00:01:48,509 --> 00:01:53,459
to ask you some trick questions and see

00:01:51,090 --> 00:01:54,630
if you can answer the questions so

00:01:53,459 --> 00:01:56,609
hopefully everyone is ready for

00:01:54,630 --> 00:01:59,369
participation raise your hand if you are

00:01:56,609 --> 00:02:04,770
ready for participation okay good we

00:01:59,369 --> 00:02:06,569
have enough all right so I remember this

00:02:04,770 --> 00:02:08,340
this question comes up to me all the

00:02:06,569 --> 00:02:11,700
time right what does a container engine

00:02:08,340 --> 00:02:13,500
do and it comes up through all kinds of

00:02:11,700 --> 00:02:14,490
weird questions that people ask me that

00:02:13,500 --> 00:02:16,470
show that they

00:02:14,490 --> 00:02:18,270
that it's black box to them they don't

00:02:16,470 --> 00:02:22,500
understand what's happening they'll ask

00:02:18,270 --> 00:02:24,360
me things like cryo hasn't been around

00:02:22,500 --> 00:02:26,520
that long how's the performance on it

00:02:24,360 --> 00:02:28,650
and that's a weird question because even

00:02:26,520 --> 00:02:31,470
even that question doesn't completely

00:02:28,650 --> 00:02:33,060
make sense in that context it could if

00:02:31,470 --> 00:02:34,290
they asked it right but just a general

00:02:33,060 --> 00:02:36,240
question like that doesn't actually make

00:02:34,290 --> 00:02:38,490
sense so I'm going to ask you a bunch of

00:02:36,240 --> 00:02:40,620
weird questions around these things but

00:02:38,490 --> 00:02:44,040
at a high level all a container engine

00:02:40,620 --> 00:02:46,800
does is provide a user interface whether

00:02:44,040 --> 00:02:49,050
that's a command line or an API like cry

00:02:46,800 --> 00:02:51,930
or container D that is used by another

00:02:49,050 --> 00:02:53,820
robot like the couplet or a human

00:02:51,930 --> 00:02:56,340
interface like like pod man or docker

00:02:53,820 --> 00:02:58,500
where it's just a CLI the other thing it

00:02:56,340 --> 00:02:59,970
does is not storage a lot of people

00:02:58,500 --> 00:03:01,830
don't realize it kind of handles the

00:02:59,970 --> 00:03:04,110
meta operations of getting the storage

00:03:01,830 --> 00:03:05,700
set up the kernel does all the actual

00:03:04,110 --> 00:03:07,220
storage work but it's the thing that

00:03:05,700 --> 00:03:11,040
invokes it in an easy way

00:03:07,220 --> 00:03:13,820
thirdly it creates a config file for run

00:03:11,040 --> 00:03:16,080
see how many of you know what run C is

00:03:13,820 --> 00:03:17,520
not that many I'm surprised

00:03:16,080 --> 00:03:20,070
okay so it is a black box it's

00:03:17,520 --> 00:03:23,210
definitely a black box so right yeah you

00:03:20,070 --> 00:03:26,190
will learn what run C does in this talk

00:03:23,210 --> 00:03:27,720
so let's get right into the first demo

00:03:26,190 --> 00:03:32,790
and this is the one where I trick you

00:03:27,720 --> 00:03:34,230
first a does everyone understand basic

00:03:32,790 --> 00:03:35,430
processes in Linux

00:03:34,230 --> 00:03:37,860
I guess raise your hand if you

00:03:35,430 --> 00:03:38,940
understand processes okay that's good I

00:03:37,860 --> 00:03:41,460
think everybody feels pretty comfortable

00:03:38,940 --> 00:03:43,350
with that so in a nutshell you can think

00:03:41,460 --> 00:03:45,570
of it this way there's a user interface

00:03:43,350 --> 00:03:48,120
which is just a CLI the user types a

00:03:45,570 --> 00:03:49,650
command in bash bash does a fork or exec

00:03:48,120 --> 00:03:51,240
depending on what command you're running

00:03:49,650 --> 00:03:53,370
and then it talks to the Linux kernel

00:03:51,240 --> 00:03:57,090
fire off another process this is very

00:03:53,370 --> 00:03:58,680
simple basic Unix Linux 101 if you look

00:03:57,090 --> 00:04:00,750
at the way a container engine works

00:03:58,680 --> 00:04:02,340
especially something like pod man it

00:04:00,750 --> 00:04:04,140
really does something very similar right

00:04:02,340 --> 00:04:06,510
so and this is a simplified version I'm

00:04:04,140 --> 00:04:09,300
going to get much more complicated but

00:04:06,510 --> 00:04:11,070
in a nutshell the user talks to pod man

00:04:09,300 --> 00:04:13,560
you can almost think of pod man like

00:04:11,070 --> 00:04:15,930
bash it's really just a utility that

00:04:13,560 --> 00:04:18,600
then goes and talks to run C which then

00:04:15,930 --> 00:04:20,070
does a clone syscall instead of a fork

00:04:18,600 --> 00:04:22,560
or exact but it's really very much like

00:04:20,070 --> 00:04:25,200
a fork except that it is it is it has

00:04:22,560 --> 00:04:26,970
some special options that you pass to it

00:04:25,200 --> 00:04:28,110
to basically tell it what what you want

00:04:26,970 --> 00:04:29,370
namespaces to use in the car

00:04:28,110 --> 00:04:31,500
and then it talks to the colonel to fire

00:04:29,370 --> 00:04:33,419
off a process we just happened to call

00:04:31,500 --> 00:04:36,569
this process a container but it's really

00:04:33,419 --> 00:04:39,270
just a process okay so looking at on the

00:04:36,569 --> 00:04:41,129
side by side it's pretty similar and I'm

00:04:39,270 --> 00:04:43,530
going to down do the first demo where I

00:04:41,129 --> 00:04:44,699
kind of show you what this looks like

00:04:43,530 --> 00:04:50,039
with a couple different container

00:04:44,699 --> 00:04:54,780
engines so this is a Fedora 30 box that

00:04:50,039 --> 00:04:56,789
I have that I have not upgraded to

00:04:54,780 --> 00:05:00,060
Fedora 31 because I want to show you how

00:04:56,789 --> 00:05:03,449
this works on with just run see how many

00:05:00,060 --> 00:05:04,620
of you are using Fedora 31 okay so some

00:05:03,449 --> 00:05:07,919
of you how many of you are using

00:05:04,620 --> 00:05:10,650
containers on Fedora 31 do you do know

00:05:07,919 --> 00:05:14,879
that you're using see run right okay

00:05:10,650 --> 00:05:17,009
good a different container run time than

00:05:14,879 --> 00:05:18,449
run see it is written in C by Giuseppe

00:05:17,009 --> 00:05:21,659
who is here who is actually I was just

00:05:18,449 --> 00:05:22,800
in his talk okay so I'm using fedora 30

00:05:21,659 --> 00:05:24,539
though because I want to kind of use

00:05:22,800 --> 00:05:26,430
standard technologies that we've been

00:05:24,539 --> 00:05:27,960
using for a long time and then kind of

00:05:26,430 --> 00:05:31,979
show how this works so to demonstrate

00:05:27,960 --> 00:05:34,830
I'm going to fire up a few containers

00:05:31,979 --> 00:05:39,300
with docker side by side with pod man so

00:05:34,830 --> 00:05:42,779
let's do this bash to you and then let's

00:05:39,300 --> 00:05:43,319
run bash to so what I want to explain

00:05:42,779 --> 00:05:46,500
what this is

00:05:43,319 --> 00:05:50,310
I created a special container image that

00:05:46,500 --> 00:05:51,779
I linked bash to to bash and the owners

00:05:50,310 --> 00:05:53,759
that I did this was to simplify the

00:05:51,779 --> 00:05:55,830
process table as you'll see so let me

00:05:53,759 --> 00:05:59,279
run this and then I'll show you why so I

00:05:55,830 --> 00:06:01,289
run this one this ID just means

00:05:59,279 --> 00:06:02,819
interactive but run it as a daemon

00:06:01,289 --> 00:06:04,199
basically in the background so what this

00:06:02,819 --> 00:06:07,349
does is this gives me the ability to run

00:06:04,199 --> 00:06:09,569
2/3 of them whatever so now let's do the

00:06:07,349 --> 00:06:11,819
same thing with pod man so let's run ID

00:06:09,569 --> 00:06:15,150
localhost I've created the same image

00:06:11,819 --> 00:06:16,949
for for pod man as I have in the docker

00:06:15,150 --> 00:06:19,349
storage could for the container images

00:06:16,949 --> 00:06:20,909
that docker has and the container image

00:06:19,349 --> 00:06:21,889
storage that that pod mean has so they

00:06:20,909 --> 00:06:23,909
look identical

00:06:21,889 --> 00:06:26,939
now we'll fire up a couple of these guys

00:06:23,909 --> 00:06:29,879
or three and then we'll do a PS and

00:06:26,939 --> 00:06:32,189
we're gonna do a PS EF with a capital Z

00:06:29,879 --> 00:06:35,099
so that we can see the SELinux contexts

00:06:32,189 --> 00:06:36,509
and then we're gonna grep for bash - you

00:06:35,099 --> 00:06:38,250
should this should become clear why did

00:06:36,509 --> 00:06:39,569
this now with bash - I just wanted

00:06:38,250 --> 00:06:41,070
something very simple that I could grep

00:06:39,569 --> 00:06:44,600
for in the process table

00:06:41,070 --> 00:06:47,880
so the first trick question here is

00:06:44,600 --> 00:06:49,590
which one of these was started with

00:06:47,880 --> 00:06:54,480
docker and which one were started with

00:06:49,590 --> 00:06:58,500
pod man actually raise your hand if you

00:06:54,480 --> 00:07:04,400
think you can tell the difference okay

00:06:58,500 --> 00:07:06,030
we have one anybody else that a hand

00:07:04,400 --> 00:07:20,610
let's go for it

00:07:06,030 --> 00:07:23,010
how could you tell the difference okay

00:07:20,610 --> 00:07:26,090
you're onto something I'll say that

00:07:23,010 --> 00:07:26,090
let's do this

00:07:29,480 --> 00:07:33,600
so yeah you're seeing the parent-child

00:07:32,160 --> 00:07:35,930
relationship between the doctor demon

00:07:33,600 --> 00:07:38,220
there so you can see these three ones

00:07:35,930 --> 00:07:39,810
whereas and we'll dig into this deeper

00:07:38,220 --> 00:07:43,770
you'll see that these three are actually

00:07:39,810 --> 00:07:45,600
their parents as conmen so yeah that's a

00:07:43,770 --> 00:07:48,660
good way but but from but once they're

00:07:45,600 --> 00:07:50,130
running as a process like this just

00:07:48,660 --> 00:07:58,160
looking at the process table can you

00:07:50,130 --> 00:07:58,160
tell huh see that one more time

00:07:59,210 --> 00:08:03,210
okay good how could you tell what what

00:08:02,130 --> 00:08:18,330
about that do you think would give that

00:08:03,210 --> 00:08:21,330
away uh well so so I'm gonna I'm gonna

00:08:18,330 --> 00:08:23,250
say no no because they actually use the

00:08:21,330 --> 00:08:26,010
exact same library they actually both

00:08:23,250 --> 00:08:27,900
use the SELinux library from containers

00:08:26,010 --> 00:08:30,150
the containers repository on github

00:08:27,900 --> 00:08:33,840
actually docker demon and Padma and both

00:08:30,150 --> 00:08:35,700
they use exact same code which I have

00:08:33,840 --> 00:08:39,120
I've sifted through to understand all

00:08:35,700 --> 00:08:40,410
this so yeah if you look at this they're

00:08:39,120 --> 00:08:42,090
actually just randomly generated

00:08:40,410 --> 00:08:43,950
contexts and they're generated by the

00:08:42,090 --> 00:08:46,350
exact same code they could be different

00:08:43,950 --> 00:08:48,360
versions possibly you know depending on

00:08:46,350 --> 00:08:49,950
when the go binary was compiled but I

00:08:48,360 --> 00:08:52,560
don't think that codes changed much in

00:08:49,950 --> 00:08:53,870
the last five years so I know I think

00:08:52,560 --> 00:08:57,590
it's pretty much identical

00:08:53,870 --> 00:08:59,930
um the point of this is you can clearly

00:08:57,590 --> 00:09:01,670
see that these are just processes right

00:08:59,930 --> 00:09:02,750
there is no difference you can't

00:09:01,670 --> 00:09:05,480
actually reverse engineer without

00:09:02,750 --> 00:09:06,440
looking at the process tree without kind

00:09:05,480 --> 00:09:08,690
of looking the parent-child relationship

00:09:06,440 --> 00:09:10,790
there's no way to tell technology-wise

00:09:08,690 --> 00:09:12,050
the exact same technologies in the Linux

00:09:10,790 --> 00:09:14,089
kernel have been turned on and are

00:09:12,050 --> 00:09:15,620
running with these processes and it's

00:09:14,089 --> 00:09:20,270
pretty much like it's impossible to tell

00:09:15,620 --> 00:09:21,890
from that below okay now I want to do

00:09:20,270 --> 00:09:25,430
another demo I want to do the same thing

00:09:21,890 --> 00:09:27,860
but I want to do it here as a non root

00:09:25,430 --> 00:09:30,529
user does everyone notice here I had the

00:09:27,860 --> 00:09:32,870
hash so I was I was route when I did

00:09:30,529 --> 00:09:35,300
this this is a common thing it's bad but

00:09:32,870 --> 00:09:37,630
now I'm going to do it as non-root so

00:09:35,300 --> 00:09:49,339
let's do the same thing so let's do

00:09:37,630 --> 00:09:51,050
localhost oops yeah I got a do a run so

00:09:49,339 --> 00:09:55,390
let's run a couple here as this and

00:09:51,050 --> 00:09:58,700
actually let's go over here and do a and

00:09:55,390 --> 00:10:04,880
then do an RM essay on this so we get

00:09:58,700 --> 00:10:08,510
rid of these route running ones let's

00:10:04,880 --> 00:10:11,360
kill these guys too just so that we

00:10:08,510 --> 00:10:13,900
don't have these polluting our what

00:10:11,360 --> 00:10:13,900
we're looking at

00:10:20,330 --> 00:10:25,080
alright alright so now we've ran a

00:10:22,950 --> 00:10:33,450
couple a spot man let's run a couple as

00:10:25,080 --> 00:10:36,180
docker and we'll do three that's good

00:10:33,450 --> 00:10:40,350
enough alright so now let's do a PS - EF

00:10:36,180 --> 00:10:43,730
z grep for a bash - now you'll notice

00:10:40,350 --> 00:10:46,470
that you might build a tell them apart

00:10:43,730 --> 00:10:50,070
does anyone can anyone see what the

00:10:46,470 --> 00:10:52,230
difference is yeah

00:10:50,070 --> 00:10:53,970
the fact that padmi and runs like bash

00:10:52,230 --> 00:10:56,160
means it has a parent-child relationship

00:10:53,970 --> 00:10:58,920
and it basically runs the process as

00:10:56,160 --> 00:11:01,410
that user and so using user name spaces

00:10:58,920 --> 00:11:03,450
we're actually running essentially all

00:11:01,410 --> 00:11:06,600
of the processes in these containers as

00:11:03,450 --> 00:11:08,640
that user's privilege whereas when I ran

00:11:06,600 --> 00:11:12,360
it with docker but but you might ask how

00:11:08,640 --> 00:11:14,550
is this possible I ran it as a user I've

00:11:12,360 --> 00:11:17,700
had people say this to me they're like I

00:11:14,550 --> 00:11:19,890
run docker as a user so it's fine does

00:11:17,700 --> 00:11:22,110
that become quickly clear why that's not

00:11:19,890 --> 00:11:24,150
fine you're still running you're

00:11:22,110 --> 00:11:26,520
essentially giving the user root access

00:11:24,150 --> 00:11:29,250
when they give them if you add the user

00:11:26,520 --> 00:11:31,920
to the docker group which gives them the

00:11:29,250 --> 00:11:34,410
ability to execute the docker CLI they

00:11:31,920 --> 00:11:36,300
now have root on the on your system

00:11:34,410 --> 00:11:37,680
essentially and I actually do a demo

00:11:36,300 --> 00:11:39,540
where I'll run one command and become a

00:11:37,680 --> 00:11:41,370
root and change some stuff and muck with

00:11:39,540 --> 00:11:43,500
the filesystem and actually Dan Walsh

00:11:41,370 --> 00:11:45,210
does some demos where he shows it's

00:11:43,500 --> 00:11:47,550
actually worse than just you can become

00:11:45,210 --> 00:11:49,080
root it's an untrackable root you came

00:11:47,550 --> 00:11:52,110
and tell who suited to it

00:11:49,080 --> 00:11:54,120
the login ID is not preserved and you're

00:11:52,110 --> 00:11:56,310
essentially are completely anonymous

00:11:54,120 --> 00:11:58,290
user running things as the root so it's

00:11:56,310 --> 00:11:59,280
a really bad scenario but the

00:11:58,290 --> 00:12:01,020
interesting thing here is really

00:11:59,280 --> 00:12:02,430
actually that you can tell the

00:12:01,020 --> 00:12:04,380
difference now because if you run them

00:12:02,430 --> 00:12:05,820
rootless you're actually running as a

00:12:04,380 --> 00:12:07,350
regular user but you'll notice the same

00:12:05,820 --> 00:12:09,150
thing is happening with the selinux

00:12:07,350 --> 00:12:10,800
context and the labels are getting

00:12:09,150 --> 00:12:12,450
generated the same so the same

00:12:10,800 --> 00:12:16,680
technology is basically being used to

00:12:12,450 --> 00:12:21,140
isolate these containers all right so

00:12:16,680 --> 00:12:21,140
let's go to the next one

00:12:22,540 --> 00:12:27,010
I already asked you this I asked you

00:12:24,160 --> 00:12:29,260
this this trick question and I like to

00:12:27,010 --> 00:12:30,270
process the ID Tree answer I like that

00:12:29,260 --> 00:12:34,900
one the best

00:12:30,270 --> 00:12:37,210
so let's do let's start with like the

00:12:34,900 --> 00:12:39,160
three things I talked about so creating

00:12:37,210 --> 00:12:41,560
a container is different than starting a

00:12:39,160 --> 00:12:43,660
container creating the container is

00:12:41,560 --> 00:12:47,590
really about actually sorry I got to

00:12:43,660 --> 00:12:49,510
show you one more slide I'm gonna kind

00:12:47,590 --> 00:12:52,330
of use this set of drawings to explain

00:12:49,510 --> 00:12:54,580
and set up the demo as I do it and I'm

00:12:52,330 --> 00:12:56,860
gonna use pod man because pod man has a

00:12:54,580 --> 00:12:59,740
lot more granularity in its ability to

00:12:56,860 --> 00:13:01,330
kind of to kind of show you what pieces

00:12:59,740 --> 00:13:03,160
of technology are being used and like

00:13:01,330 --> 00:13:04,930
what is getting generated and how things

00:13:03,160 --> 00:13:05,920
are happening whereas docker just kind

00:13:04,930 --> 00:13:08,320
of does it all in one shot

00:13:05,920 --> 00:13:10,330
you can actually break it down as sort

00:13:08,320 --> 00:13:11,680
of separate steps with pod man and a lot

00:13:10,330 --> 00:13:12,850
of these commands are probably obscure

00:13:11,680 --> 00:13:14,920
and most people don't know them but I

00:13:12,850 --> 00:13:18,160
find them very entertaining for showing

00:13:14,920 --> 00:13:19,510
how things work so in this in this

00:13:18,160 --> 00:13:22,540
drawing what I'm showing here is that

00:13:19,510 --> 00:13:23,980
that pod man is basically creating a

00:13:22,540 --> 00:13:25,000
container and by create I'm gonna I'm

00:13:23,980 --> 00:13:27,370
gonna run the command and show you what

00:13:25,000 --> 00:13:29,200
happens here what we're assuming is is

00:13:27,370 --> 00:13:31,390
that there's a container image already

00:13:29,200 --> 00:13:33,250
cached locally in the data storage in

00:13:31,390 --> 00:13:35,380
the storage for varlam containers this

00:13:33,250 --> 00:13:37,390
is this is the set of cached container

00:13:35,380 --> 00:13:40,240
image layers that are local and then

00:13:37,390 --> 00:13:42,070
we're also going to container storage

00:13:40,240 --> 00:13:43,780
doesn't just store the images it

00:13:42,070 --> 00:13:46,480
actually also stores metadata so that's

00:13:43,780 --> 00:13:47,980
what that md is so when you first create

00:13:46,480 --> 00:13:50,290
the container what we're gonna have is a

00:13:47,980 --> 00:13:52,360
container image locally and the metadata

00:13:50,290 --> 00:13:56,370
that would describe a running container

00:13:52,360 --> 00:13:56,370
but nothing else so here let me show you

00:13:58,560 --> 00:14:06,250
oops so let's go back to this user so

00:14:01,360 --> 00:14:11,530
pod man creates - i d-- let's do this

00:14:06,250 --> 00:14:13,480
and then let's do ubi 8 and bash

00:14:11,530 --> 00:14:19,270
actually let's do a more complex one

00:14:13,480 --> 00:14:23,710
let's do - v /m NT : /mnt

00:14:19,270 --> 00:14:25,810
alright so again we're creating a

00:14:23,710 --> 00:14:27,280
container we're running it interactive

00:14:25,810 --> 00:14:30,070
so that it'll have a terminal basically

00:14:27,280 --> 00:14:31,510
but it will be disconnected detached so

00:14:30,070 --> 00:14:32,620
that i won't i won't have it connected

00:14:31,510 --> 00:14:34,960
to the terminal here but it will have a

00:14:32,620 --> 00:14:36,310
terminal in the container and then i'm

00:14:34,960 --> 00:14:39,460
going to do what's called by

00:14:36,310 --> 00:14:41,050
mounting volume so it's going to become

00:14:39,460 --> 00:14:42,940
very crystal clear in the next three or

00:14:41,050 --> 00:14:44,529
four demos what all's happening here but

00:14:42,940 --> 00:14:48,130
let's run this command and then see what

00:14:44,529 --> 00:14:50,950
happens okay so we get back this long

00:14:48,130 --> 00:14:53,170
string it's it's it's nothing more than

00:14:50,950 --> 00:14:56,200
a piece of metadata that represents a

00:14:53,170 --> 00:14:58,990
user space essentially identity for that

00:14:56,200 --> 00:15:01,660
container that we will fire up but isn't

00:14:58,990 --> 00:15:04,420
fired up yet so let's do this pod man PS

00:15:01,660 --> 00:15:08,110
oh we still have those other ones let's

00:15:04,420 --> 00:15:10,660
redo this let's do pod man kill - a pod

00:15:08,110 --> 00:15:13,060
man RM - a and then let's do this

00:15:10,660 --> 00:15:16,450
command one more time okay so now pod

00:15:13,060 --> 00:15:18,880
man PS there's no container running

00:15:16,450 --> 00:15:20,770
right there's just the metadata

00:15:18,880 --> 00:15:23,680
representation of a container which

00:15:20,770 --> 00:15:25,720
means there's an image hold locally and

00:15:23,680 --> 00:15:27,310
then there is a metadata representation

00:15:25,720 --> 00:15:28,150
just that string and some other stuff

00:15:27,310 --> 00:15:28,720
but I'm going to show you what that

00:15:28,150 --> 00:15:31,480
looks like

00:15:28,720 --> 00:15:34,390
so pod man has this cool command called

00:15:31,480 --> 00:15:36,580
l - LS it's a command line option you

00:15:34,390 --> 00:15:38,529
can just run the last the last container

00:15:36,580 --> 00:15:41,970
image that was or the last container

00:15:38,529 --> 00:15:44,740
that was run so we'll do - q - - no

00:15:41,970 --> 00:15:47,110
truncate this is just gonna give us back

00:15:44,740 --> 00:15:52,420
that string so now let's do this let's

00:15:47,110 --> 00:15:54,180
do a find on /var lib such containers

00:15:52,420 --> 00:15:58,330
this is where pod man stores everything

00:15:54,180 --> 00:16:01,540
and then let's grep for let's grep for

00:15:58,330 --> 00:16:07,380
that that ID hopefully I'm not using too

00:16:01,540 --> 00:16:07,380
much bash food here oops what did I do

00:16:09,120 --> 00:16:15,820
mmm oh that's right I'm not route darn

00:16:13,330 --> 00:16:23,709
it that's uh I should do this as rude

00:16:15,820 --> 00:16:26,740
let's do this route let's do this same

00:16:23,709 --> 00:16:30,360
thing as read I like to do these without

00:16:26,740 --> 00:16:30,360
scripting them so that they're more fun

00:16:31,650 --> 00:16:39,420
all right so let's run that as route now

00:16:34,240 --> 00:16:39,420
let's do let's do our grip again

00:16:41,980 --> 00:16:46,910
does everyone understand I'm I was an I

00:16:44,600 --> 00:16:50,480
was a user so I don't have actual rights

00:16:46,910 --> 00:16:52,460
to go look at bar live containers it's

00:16:50,480 --> 00:16:55,700
actually all happening in the users home

00:16:52,460 --> 00:16:57,050
directory all right so I've created a

00:16:55,700 --> 00:16:59,150
container as route the metadata

00:16:57,050 --> 00:17:01,010
representation is there you'll see that

00:16:59,150 --> 00:17:03,410
some directories have been created under

00:17:01,010 --> 00:17:05,570
varlet container storage overlay

00:17:03,410 --> 00:17:07,760
containers you'll see that there's a

00:17:05,570 --> 00:17:09,950
user data directory and artifacts

00:17:07,760 --> 00:17:12,050
directory in this SH M directory but

00:17:09,950 --> 00:17:14,690
there's nothing else there's no there's

00:17:12,050 --> 00:17:16,730
no mounted storage there's no config

00:17:14,690 --> 00:17:17,860
file that gets handed to run C which

00:17:16,730 --> 00:17:21,860
I'll show you how that works

00:17:17,860 --> 00:17:23,810
there's nothing else yet but at least

00:17:21,860 --> 00:17:25,760
what happens here is there is a piece of

00:17:23,810 --> 00:17:27,650
metadata that knows when I start this

00:17:25,760 --> 00:17:29,840
I've already kind of saved that it's

00:17:27,650 --> 00:17:35,450
gonna fire up that process back right so

00:17:29,840 --> 00:17:37,670
now let's look at the next step so the

00:17:35,450 --> 00:17:39,950
story with storage right so pod man has

00:17:37,670 --> 00:17:41,750
this really cool feature that we can

00:17:39,950 --> 00:17:43,700
actually construct this container little

00:17:41,750 --> 00:17:45,920
by little we created the metadata

00:17:43,700 --> 00:17:50,180
representation now we're going to cause

00:17:45,920 --> 00:17:51,620
that copy-on-write piece to come into

00:17:50,180 --> 00:17:54,080
existence does everyone understand look

00:17:51,620 --> 00:17:55,580
at this this container image is three

00:17:54,080 --> 00:17:58,670
layers I'm showing a container image

00:17:55,580 --> 00:18:00,710
here that it's three layers and then for

00:17:58,670 --> 00:18:02,030
point of example I'm showing what

00:18:00,710 --> 00:18:03,980
happens when I actually mount the

00:18:02,030 --> 00:18:05,960
storage is it adds one more layer on top

00:18:03,980 --> 00:18:08,510
of that container image but that layer

00:18:05,960 --> 00:18:11,120
is copy on right so it wherever time I

00:18:08,510 --> 00:18:13,250
right into that writable directory it

00:18:11,120 --> 00:18:14,480
will compare with all the layers in the

00:18:13,250 --> 00:18:15,800
container image and if something's

00:18:14,480 --> 00:18:18,080
different it'll write a new piece of

00:18:15,800 --> 00:18:19,960
data on that upper layer that's all that

00:18:18,080 --> 00:18:22,100
happens that's the difference between

00:18:19,960 --> 00:18:23,480
between a running container and not

00:18:22,100 --> 00:18:25,460
running container and this might become

00:18:23,480 --> 00:18:26,840
more clear because I'm gonna build it up

00:18:25,460 --> 00:18:28,340
and then I'm gonna tear it back down and

00:18:26,840 --> 00:18:29,900
show you how I tear these pieces apart

00:18:28,340 --> 00:18:32,060
and then I think it might I saw some

00:18:29,900 --> 00:18:35,660
some puzzled looks but I think this will

00:18:32,060 --> 00:18:38,510
make sense so let's run the command so

00:18:35,660 --> 00:18:40,730
we'll do a pod man mount on this

00:18:38,510 --> 00:18:43,490
container we just created so we'll use

00:18:40,730 --> 00:18:46,820
this tag here this command will

00:18:43,490 --> 00:18:49,940
basically take the data representation

00:18:46,820 --> 00:18:51,800
of that container image the mount point

00:18:49,940 --> 00:18:53,880
that's in a mountain named space and

00:18:51,800 --> 00:18:57,210
expose it to

00:18:53,880 --> 00:18:59,880
the root user so what I get back here is

00:18:57,210 --> 00:19:01,170
a directory it's essentially mounted the

00:18:59,880 --> 00:19:03,000
storage that is in that mountain

00:19:01,170 --> 00:19:07,770
namespace so now let's let's do that

00:19:03,000 --> 00:19:09,720
same find actually no sorry you'll see

00:19:07,770 --> 00:19:11,910
here it's it's actually a different ID

00:19:09,720 --> 00:19:14,490
this mount is actually a different ID

00:19:11,910 --> 00:19:16,740
than the container itself but let's go

00:19:14,490 --> 00:19:19,740
into this directory so you can see so

00:19:16,740 --> 00:19:21,900
you can see what's there you'll notice

00:19:19,740 --> 00:19:23,160
that this looks just like a virtual

00:19:21,900 --> 00:19:25,770
machine right this looks like if you

00:19:23,160 --> 00:19:27,210
exact into a into a container if you

00:19:25,770 --> 00:19:28,520
were to use the exec command or if you

00:19:27,210 --> 00:19:30,660
were a run bash inside of a container

00:19:28,520 --> 00:19:32,910
now we're gonna do some funky stuff

00:19:30,660 --> 00:19:35,070
though you do remember that I created

00:19:32,910 --> 00:19:37,830
the bind mount right so you would think

00:19:35,070 --> 00:19:39,210
maybe this bind mount MNT should have

00:19:37,830 --> 00:19:41,790
something in it right like this should

00:19:39,210 --> 00:19:45,180
be the local M&T well let's touch a file

00:19:41,790 --> 00:19:47,160
and you'll see this later and then let's

00:19:45,180 --> 00:19:49,350
get out of here let's go back to my to

00:19:47,160 --> 00:19:50,430
my root home directory ok so now let's

00:19:49,350 --> 00:19:51,690
move on to the next step does they

00:19:50,430 --> 00:19:53,760
understand now we have the metadata

00:19:51,690 --> 00:19:55,560
created that represents the container we

00:19:53,760 --> 00:19:58,170
have a copy on write layer now mounted

00:19:55,560 --> 00:19:59,880
and ready to go and and we also have a

00:19:58,170 --> 00:20:01,170
persistent volume somewhere out there

00:19:59,880 --> 00:20:06,270
dangling that we're not quite sure

00:20:01,170 --> 00:20:10,230
what's going on with it yet this is that

00:20:06,270 --> 00:20:11,910
this is where I asked a question I asked

00:20:10,230 --> 00:20:14,220
some more trick questions how do you

00:20:11,910 --> 00:20:17,340
think that a container engine can affect

00:20:14,220 --> 00:20:19,380
the performance of the storage actually

00:20:17,340 --> 00:20:21,150
let me let me let me ask the simpler

00:20:19,380 --> 00:20:22,590
question do you believe that the

00:20:21,150 --> 00:20:27,690
container engine can have a profound

00:20:22,590 --> 00:20:30,290
effect on the storage raise your hand if

00:20:27,690 --> 00:20:30,290
you think it can

00:20:31,300 --> 00:20:37,370
exactly that's that's the best response

00:20:34,480 --> 00:20:39,020
the engine itself doesn't do anything

00:20:37,370 --> 00:20:41,360
alright so and and I'll highlight

00:20:39,020 --> 00:20:42,800
something very important here this is

00:20:41,360 --> 00:20:45,230
the fundamental difference between like

00:20:42,800 --> 00:20:46,370
traditional software and operating

00:20:45,230 --> 00:20:50,210
system system software and operating

00:20:46,370 --> 00:20:51,950
systems and cloud that meta operation of

00:20:50,210 --> 00:20:54,320
mounting and unmounting soft you know

00:20:51,950 --> 00:20:56,150
essentially overlay FS layers that's

00:20:54,320 --> 00:20:59,270
essentially what we're doing that's

00:20:56,150 --> 00:21:01,670
really more probably more controlled by

00:20:59,270 --> 00:21:03,230
the kernel than it is by pod men but pod

00:21:01,670 --> 00:21:05,600
man could have some effect on the

00:21:03,230 --> 00:21:07,250
mounting and unmounting so if you asked

00:21:05,600 --> 00:21:08,570
a question could pod man have an effect

00:21:07,250 --> 00:21:10,670
if he tried to start a thousand

00:21:08,570 --> 00:21:11,990
containers at the same time yes the

00:21:10,670 --> 00:21:14,210
answer is yes because you would be doing

00:21:11,990 --> 00:21:15,770
a ton of metadata operations mounting

00:21:14,210 --> 00:21:18,020
and unmounting you know essentially

00:21:15,770 --> 00:21:19,430
overlay layers but some of that would

00:21:18,020 --> 00:21:21,440
come from the kernels ability to base

00:21:19,430 --> 00:21:23,420
the mountain on mouth that so now we can

00:21:21,440 --> 00:21:25,010
ask that question now the runtime

00:21:23,420 --> 00:21:26,450
performance still once it's running has

00:21:25,010 --> 00:21:28,130
nothing to do with the container engine

00:21:26,450 --> 00:21:30,950
which which we'll get into in the next

00:21:28,130 --> 00:21:33,290
thing is that crystal clear to everyone

00:21:30,950 --> 00:21:34,610
only the mounting and unmounting has

00:21:33,290 --> 00:21:36,160
anything to do with the container engine

00:21:34,610 --> 00:21:39,560
there's nothing else that it does

00:21:36,160 --> 00:21:41,240
alright so we have a mount point we have

00:21:39,560 --> 00:21:44,360
the metadata that represents the

00:21:41,240 --> 00:21:47,360
container in pod mins basically you know

00:21:44,360 --> 00:21:49,400
storage area and now the next thing we

00:21:47,360 --> 00:21:53,240
do is we create the config files so

00:21:49,400 --> 00:21:55,280
you'll see I have metadata plus C which

00:21:53,240 --> 00:21:57,620
means config so now we're starting to

00:21:55,280 --> 00:21:58,910
get closer to a container but pot man

00:21:57,620 --> 00:22:01,190
has this cool command where we can

00:21:58,910 --> 00:22:07,460
actually just cause this to be created

00:22:01,190 --> 00:22:09,290
so let's go over here and I showed you

00:22:07,460 --> 00:22:11,300
that fine command you'll notice that

00:22:09,290 --> 00:22:13,640
there is no config file in this storage

00:22:11,300 --> 00:22:14,360
yet there's only that user data and

00:22:13,640 --> 00:22:19,100
that's it

00:22:14,360 --> 00:22:21,350
but let's do this pod man PS pod man PS

00:22:19,100 --> 00:22:23,380
a I forgot to show you this you'll see

00:22:21,350 --> 00:22:26,450
this is still sitting in the created

00:22:23,380 --> 00:22:28,670
status it's not it's not running yet but

00:22:26,450 --> 00:22:30,020
let's do this pod man in it how many of

00:22:28,670 --> 00:22:33,980
you are familiar with the pod man init

00:22:30,020 --> 00:22:37,570
command raise your hand nobody okay this

00:22:33,980 --> 00:22:40,520
is a cool feature that Matt Han added

00:22:37,570 --> 00:22:42,590
what I just did was cause pod man to go

00:22:40,520 --> 00:22:44,299
generate the config file that it's going

00:22:42,590 --> 00:22:47,980
to hand off to run

00:22:44,299 --> 00:22:51,500
now let's go look at that config file

00:22:47,980 --> 00:22:54,769
you'll see a few things got created but

00:22:51,500 --> 00:23:01,190
this is the most important one let's cat

00:22:54,769 --> 00:23:02,480
this guy and then JQ dot dan mentioned

00:23:01,190 --> 00:23:04,789
in his talk how many of you are in Dan's

00:23:02,480 --> 00:23:06,169
talk the security talk he mentioned this

00:23:04,789 --> 00:23:08,480
config file I don't know if you caught

00:23:06,169 --> 00:23:10,190
that but he mentioned that this config

00:23:08,480 --> 00:23:13,389
file it's kind of nasty right it's got a

00:23:10,190 --> 00:23:15,769
bunch of SEC comp rules in it it's got

00:23:13,389 --> 00:23:17,960
well it's very long here so let's go

00:23:15,769 --> 00:23:19,820
back I piped it into a command called JQ

00:23:17,960 --> 00:23:22,039
just to make it pretty so we can look at

00:23:19,820 --> 00:23:24,139
it but you'll see and once I get to the

00:23:22,039 --> 00:23:25,429
top of this thing ok now we're starting

00:23:24,139 --> 00:23:27,799
to see stuff that looks like what

00:23:25,429 --> 00:23:30,289
describes a container right we're seeing

00:23:27,799 --> 00:23:32,570
the OM killer stuff we're seeing some

00:23:30,289 --> 00:23:36,289
labels or annotations we're seeing

00:23:32,570 --> 00:23:37,820
things like different options we're

00:23:36,289 --> 00:23:39,860
seeing the bind mount you notice the

00:23:37,820 --> 00:23:41,330
bind mount or there are some already

00:23:39,860 --> 00:23:44,419
pre-existing buying mounts like the host

00:23:41,330 --> 00:23:47,929
file the resolve file run secrets run

00:23:44,419 --> 00:23:50,750
secrets here and then you'll see here's

00:23:47,929 --> 00:23:51,980
some options for terminal things here's

00:23:50,750 --> 00:23:54,669
our bind mount here's the one that we

00:23:51,980 --> 00:23:58,250
added that went when we did the dash V

00:23:54,669 --> 00:24:02,240
so now pod man has generated a config

00:23:58,250 --> 00:24:04,759
file that says hey bind mount MNT on mmt

00:24:02,240 --> 00:24:07,370
bind mount /mnt on the host into the

00:24:04,759 --> 00:24:09,940
container and you'll see all kinds of

00:24:07,370 --> 00:24:13,490
things you'll even see things like

00:24:09,940 --> 00:24:15,409
Sisyphus and then you'll see at the top

00:24:13,490 --> 00:24:18,049
you'll see things like what command

00:24:15,409 --> 00:24:19,940
it ran it'll even say things like

00:24:18,049 --> 00:24:21,320
sometimes it'll say Linux depending on

00:24:19,940 --> 00:24:22,820
which container image you pulled and

00:24:21,320 --> 00:24:24,649
what made it data is in the container

00:24:22,820 --> 00:24:27,559
image and I'm gonna show you that config

00:24:24,649 --> 00:24:28,850
file is actually very complex exactly I

00:24:27,559 --> 00:24:30,580
don't want to walk you through all this

00:24:28,850 --> 00:24:33,019
I do this in a deeper talk but that

00:24:30,580 --> 00:24:35,269
config dot JSON that I just showed you

00:24:33,019 --> 00:24:38,450
is actually the culmination of three

00:24:35,269 --> 00:24:40,490
things it's the culmination of things

00:24:38,450 --> 00:24:41,720
that the image builder put in the

00:24:40,490 --> 00:24:43,159
container image that you pulled it

00:24:41,720 --> 00:24:45,019
that's sort of the first thing like the

00:24:43,159 --> 00:24:47,090
default command that that image builder

00:24:45,019 --> 00:24:48,139
embeds in there like if you put bash in

00:24:47,090 --> 00:24:50,179
there and that's the default thing that

00:24:48,139 --> 00:24:51,679
runs that is kind of the baseline set of

00:24:50,179 --> 00:24:53,509
configure options that get passed in

00:24:51,679 --> 00:24:55,369
then the next thing is the user can

00:24:53,509 --> 00:24:57,890
override things you saw I did the dash V

00:24:55,369 --> 00:24:59,840
the bind mount so I added the bind now

00:24:57,890 --> 00:25:01,670
then the engine added all those for

00:24:59,840 --> 00:25:04,460
example set compras you saw that long

00:25:01,670 --> 00:25:06,050
list of second perils the SELinux s vert

00:25:04,460 --> 00:25:08,090
stuff is all added by the container

00:25:06,050 --> 00:25:10,340
engine so it's a culmination of things

00:25:08,090 --> 00:25:12,290
that the builder that the image user

00:25:10,340 --> 00:25:14,270
wanted the image consumer to basically

00:25:12,290 --> 00:25:15,860
have certain set defaults the things

00:25:14,270 --> 00:25:17,240
that the actual person running the

00:25:15,860 --> 00:25:18,650
container wanted and then things that

00:25:17,240 --> 00:25:21,080
the container engine wanted or what

00:25:18,650 --> 00:25:24,800
setup to do by default so that's kind of

00:25:21,080 --> 00:25:26,240
how that config gets built let's ask the

00:25:24,800 --> 00:25:32,660
nasty question do you think you can

00:25:26,240 --> 00:25:36,980
create this configuration by hand you

00:25:32,660 --> 00:25:39,350
can yes would you that is a question you

00:25:36,980 --> 00:25:42,470
see Kinane your engine basically makes

00:25:39,350 --> 00:25:44,480
my life our lives much easier because it

00:25:42,470 --> 00:25:47,060
goes and it knows it is building that

00:25:44,480 --> 00:25:49,850
config dot JSON file based on the OCI

00:25:47,060 --> 00:25:52,310
specification for what that config file

00:25:49,850 --> 00:25:54,020
should look like I don't go deep into it

00:25:52,310 --> 00:25:57,080
into this talk but that that that config

00:25:54,020 --> 00:26:00,560
file is governed by a specification and

00:25:57,080 --> 00:26:03,770
then run see the container runtime that

00:26:00,560 --> 00:26:05,480
that file gets passed to that's the only

00:26:03,770 --> 00:26:07,370
option that you pass to run see is that

00:26:05,480 --> 00:26:11,360
config file so things like cata

00:26:07,370 --> 00:26:14,300
containers and G visor and run C and C

00:26:11,360 --> 00:26:16,880
run in Fedora 31 all of these o CI

00:26:14,300 --> 00:26:19,100
compliant runtimes know how to consume

00:26:16,880 --> 00:26:21,620
this Oh CI compliant config file that

00:26:19,100 --> 00:26:23,210
pod man built this o CI compliant config

00:26:21,620 --> 00:26:25,160
file is also almost identical to what

00:26:23,210 --> 00:26:27,050
docker would build or what cryo would

00:26:25,160 --> 00:26:28,700
build or what any other container engine

00:26:27,050 --> 00:26:30,470
on the planet would build so I'm showing

00:26:28,700 --> 00:26:32,690
kind of this is kind of what the modern

00:26:30,470 --> 00:26:35,360
day a container looks like it's that

00:26:32,690 --> 00:26:39,100
config file that's kind of magic all

00:26:35,360 --> 00:26:41,780
right so now we handoff we have we have

00:26:39,100 --> 00:26:43,880
we you know like I've mentioned we have

00:26:41,780 --> 00:26:45,110
the metadata we have the config file we

00:26:43,880 --> 00:26:46,790
have the copy and write layer we have

00:26:45,110 --> 00:26:48,050
the over we have the bunch of layers

00:26:46,790 --> 00:26:49,670
that are mapped into the file system

00:26:48,050 --> 00:26:52,880
from the container image we have

00:26:49,670 --> 00:26:55,130
persistent data kind of which I'm gonna

00:26:52,880 --> 00:26:56,750
delve into a little bit and now we're

00:26:55,130 --> 00:27:00,470
gonna actually handle all this off to

00:26:56,750 --> 00:27:01,640
run C so you might think that it's

00:27:00,470 --> 00:27:03,380
actually I showed you a simplified

00:27:01,640 --> 00:27:06,200
version and I lied to you what actually

00:27:03,380 --> 00:27:08,750
happens is pod man talks to something

00:27:06,200 --> 00:27:10,940
called container manager con man con man

00:27:08,750 --> 00:27:11,809
does what is called a double fork it

00:27:10,940 --> 00:27:14,330
disk it

00:27:11,809 --> 00:27:17,269
two forks in a row disconnects itself

00:27:14,330 --> 00:27:20,690
from pod man allows itself to and then

00:27:17,269 --> 00:27:22,519
calls it forks are run see and then

00:27:20,690 --> 00:27:24,139
actually that calls a clone system

00:27:22,519 --> 00:27:26,389
called to the Linux kernel to then

00:27:24,139 --> 00:27:34,190
create the container and then what we

00:27:26,389 --> 00:27:41,989
are left with is let's show you this so

00:27:34,190 --> 00:27:47,479
now let's do a pod man PS - yeah it's

00:27:41,989 --> 00:27:48,979
pod man sorry my man PS - eh so we have

00:27:47,479 --> 00:27:51,019
this container it's still in the created

00:27:48,979 --> 00:27:54,229
state there's a config file now let's

00:27:51,019 --> 00:27:56,539
actually run it pod man start and we'll

00:27:54,229 --> 00:27:59,869
tell this thing to start okay now let's

00:27:56,539 --> 00:28:02,659
do a pod man PS - eh or actually gonna

00:27:59,869 --> 00:28:04,099
have to do it - eh anymore you see it

00:28:02,659 --> 00:28:07,460
was created eleven minutes ago but it's

00:28:04,099 --> 00:28:09,349
only up for five seconds we now have you

00:28:07,460 --> 00:28:10,700
know we metadata's there so there's

00:28:09,349 --> 00:28:13,210
nothing magical but the process is

00:28:10,700 --> 00:28:19,999
running so let's take a look at PS tree

00:28:13,210 --> 00:28:24,229
and then let's try to find this guy so

00:28:19,999 --> 00:28:26,029
here it is you'll notice system D is the

00:28:24,229 --> 00:28:28,070
you know first process that fires up

00:28:26,029 --> 00:28:30,859
when a when when a system boots when a

00:28:28,070 --> 00:28:33,499
rail or Fedora system boots then you'll

00:28:30,859 --> 00:28:35,749
notice that con man it has the parent of

00:28:33,499 --> 00:28:39,019
system D and then Bash is the child of

00:28:35,749 --> 00:28:41,690
kanwa so let's show you in a drawing so

00:28:39,019 --> 00:28:43,759
you saw it this is the process of how it

00:28:41,690 --> 00:28:46,549
starts but then once it's running this

00:28:43,759 --> 00:28:49,099
is actually what it looks like it's just

00:28:46,549 --> 00:28:51,229
the container its parent conmen and then

00:28:49,099 --> 00:28:52,999
its parent system D now all this other

00:28:51,229 --> 00:28:55,519
stuff is still in place right pod man is

00:28:52,999 --> 00:28:57,469
managing the config file the metadata

00:28:55,519 --> 00:28:59,059
the copy and write layers it's making

00:28:57,469 --> 00:29:01,489
sure that that stuff's there or not

00:28:59,059 --> 00:29:06,619
there this is kind of the definition of

00:29:01,489 --> 00:29:08,809
whether containers running or not now

00:29:06,619 --> 00:29:11,719
let's see something

00:29:08,809 --> 00:29:16,339
let's exec into that running container

00:29:11,719 --> 00:29:18,589
pod man PS and then let's do pod man

00:29:16,339 --> 00:29:20,479
exec does everyone understand an exec is

00:29:18,589 --> 00:29:22,460
going to run what I'm gonna do is I'm

00:29:20,479 --> 00:29:24,739
actually gonna run another process in

00:29:22,460 --> 00:29:25,360
the same namespaces as an existing

00:29:24,739 --> 00:29:27,250
container

00:29:25,360 --> 00:29:29,140
what we're doing we're firing up another

00:29:27,250 --> 00:29:30,730
process inside of there so I'm gonna

00:29:29,140 --> 00:29:32,049
give it the ID then I'm gonna tell it to

00:29:30,730 --> 00:29:35,549
run bash and then we're gonna get a

00:29:32,049 --> 00:29:39,130
shell back now we're in the container

00:29:35,549 --> 00:29:41,920
actually before I do that I think I may

00:29:39,130 --> 00:29:43,240
have forgotten to delete something no

00:29:41,920 --> 00:29:47,830
good I didn't all right

00:29:43,240 --> 00:29:49,150
yeah just want to make sure let's get

00:29:47,830 --> 00:29:55,179
back in there okay

00:29:49,150 --> 00:29:59,020
let's go into MNT oh I can't get in

00:29:55,179 --> 00:30:02,230
there it's because I did not use the

00:29:59,020 --> 00:30:05,350
capital Z option and so that container

00:30:02,230 --> 00:30:08,380
has a different SELinux context or label

00:30:05,350 --> 00:30:10,840
than the MNT filesystem you know the M&T

00:30:08,380 --> 00:30:12,010
directory in the underlying host so if I

00:30:10,840 --> 00:30:13,419
wanted to actually go to get in there

00:30:12,010 --> 00:30:15,250
and look I would actually have to do

00:30:13,419 --> 00:30:16,960
something slightly different so let's

00:30:15,250 --> 00:30:21,730
let's actually uh let's do this again

00:30:16,960 --> 00:30:26,650
let's kill this guy and let's do a pod

00:30:21,730 --> 00:30:31,090
man RM RM - eh sorry now let's run it

00:30:26,650 --> 00:30:35,460
another create no let's let's add this -

00:30:31,090 --> 00:30:38,820
Z option and now let's do a mount

00:30:35,460 --> 00:30:47,460
actually pod man do this quickly

00:30:38,820 --> 00:30:47,460
odd man mount go look at that directory

00:30:47,700 --> 00:30:55,330
let's do our little trick again where I

00:30:50,140 --> 00:30:58,110
go into MNT touch test file and then

00:30:55,330 --> 00:31:00,250
let's go back now let's do a pod man PS

00:30:58,110 --> 00:31:01,750
show you it's there it's still creative

00:31:00,250 --> 00:31:06,250
but now let's do a pod man run

00:31:01,750 --> 00:31:07,480
or start I don't have to do the in it

00:31:06,250 --> 00:31:09,940
because the init will actually happen

00:31:07,480 --> 00:31:11,799
automatically if I start it so the crew

00:31:09,940 --> 00:31:13,330
in this case it just create the config

00:31:11,799 --> 00:31:16,780
file and fired up the process at the

00:31:13,330 --> 00:31:20,710
same time now let's exec into this pod

00:31:16,780 --> 00:31:23,140
man exec shy t oops

00:31:20,710 --> 00:31:25,450
give it a command we're here now let's

00:31:23,140 --> 00:31:29,860
go into Mt

00:31:25,450 --> 00:31:36,330
there is no test file so what does that

00:31:29,860 --> 00:31:40,570
mean who's brave enough to answer this

00:31:36,330 --> 00:31:46,049
no it's not copy-on-write no in fact

00:31:40,570 --> 00:31:46,049
it's not but it is lazily up

00:31:46,380 --> 00:31:51,820
it is lazily mounted when you run the

00:31:49,600 --> 00:31:54,549
container so it actually has it mounted

00:31:51,820 --> 00:31:56,169
yet so I basically just wrote garbage

00:31:54,549 --> 00:31:57,970
data there that test file is gone

00:31:56,169 --> 00:31:59,679
basically it's mounted over basically as

00:31:57,970 --> 00:32:00,970
soon as I start the container so if I

00:31:59,679 --> 00:32:01,809
were to there's no way to actually get

00:32:00,970 --> 00:32:04,809
to it now it's gone

00:32:01,809 --> 00:32:06,130
pretty much forever I actually haven't

00:32:04,809 --> 00:32:07,570
tried if there's a way to hack there

00:32:06,130 --> 00:32:09,909
might be a way to hack aliy get back to

00:32:07,570 --> 00:32:12,159
it but it's it's not gonna be easy mom

00:32:09,909 --> 00:32:14,559
but that I want you to understand that

00:32:12,159 --> 00:32:16,029
that MNT is very different than that

00:32:14,559 --> 00:32:17,409
copy-on-write layer that's actually what

00:32:16,029 --> 00:32:18,039
I was trying to point out it's a very

00:32:17,409 --> 00:32:21,580
different thing

00:32:18,039 --> 00:32:22,539
it has native right speed so an anecdote

00:32:21,580 --> 00:32:24,100
that I'd like to talk about what this

00:32:22,539 --> 00:32:25,690
one was I had a person at a conference a

00:32:24,100 --> 00:32:27,880
few years ago come up to me and say

00:32:25,690 --> 00:32:30,100
we're building Yocto Linux in containers

00:32:27,880 --> 00:32:32,529
and it's super slow and I said are you

00:32:30,100 --> 00:32:33,909
using a bind mount and they said no so

00:32:32,529 --> 00:32:35,950
and why did we do that we don't care

00:32:33,909 --> 00:32:37,240
about its ephemeral data and I'm like

00:32:35,950 --> 00:32:39,429
this has nothing to do whether it's

00:32:37,240 --> 00:32:41,019
ephemeral data compiling a Linux

00:32:39,429 --> 00:32:44,139
distribution which is essentially what

00:32:41,019 --> 00:32:47,260
compiling Yocto is immediately what went

00:32:44,139 --> 00:32:49,659
through my architect brain was compiling

00:32:47,260 --> 00:32:51,789
a Linux distro sounds like a lot of file

00:32:49,659 --> 00:32:54,519
system operations right like it is

00:32:51,789 --> 00:32:57,789
building a root filesystem setting all

00:32:54,519 --> 00:33:00,070
kinds of labels permissions user you

00:32:57,789 --> 00:33:01,510
know read maybe changing users I don't

00:33:00,070 --> 00:33:03,850
know what all does but it makes a ton of

00:33:01,510 --> 00:33:05,620
metadata operations if you're doing all

00:33:03,850 --> 00:33:07,779
that in a copy-on-write file system

00:33:05,620 --> 00:33:09,340
that's going to be very very slow

00:33:07,779 --> 00:33:10,630
whereas if you do it in a bind mount

00:33:09,340 --> 00:33:12,100
it's gonna be native speed it will be

00:33:10,630 --> 00:33:13,710
just like the piling if we were

00:33:12,100 --> 00:33:15,399
compiling it not in a container so

00:33:13,710 --> 00:33:18,130
understanding the difference between the

00:33:15,399 --> 00:33:19,630
bind montt and the overlay amount is

00:33:18,130 --> 00:33:21,730
really important when you start to think

00:33:19,630 --> 00:33:24,399
about performance because Dan mentioned

00:33:21,730 --> 00:33:25,840
it if you have Maria DB or Maya scroll

00:33:24,399 --> 00:33:27,789
and it's bind mounted into the you know

00:33:25,840 --> 00:33:29,409
under that bind mount the performance is

00:33:27,789 --> 00:33:31,179
going to be native speed it's going to

00:33:29,409 --> 00:33:34,090
be whether that's an NFS share okay it

00:33:31,179 --> 00:33:35,559
might be as slow as a nun professor or

00:33:34,090 --> 00:33:36,880
you know block device it's mounted

00:33:35,559 --> 00:33:38,140
that's over you know a fiber channel

00:33:36,880 --> 00:33:39,789
network or something of that but if it's

00:33:38,140 --> 00:33:41,679
a local disc it's gonna be a local disc

00:33:39,789 --> 00:33:43,150
but not you're now back to basic

00:33:41,679 --> 00:33:46,360
operating system principles with that by

00:33:43,150 --> 00:33:50,110
now does that make sense to everyone all

00:33:46,360 --> 00:33:53,799
right so now what we have will have this

00:33:50,110 --> 00:33:55,330
running container right but I think ok

00:33:53,799 --> 00:33:58,679
let's ask some more trick questions

00:33:55,330 --> 00:34:02,700
so could we run a Windows container here

00:33:58,679 --> 00:34:02,700
raise your hand if you think we could

00:34:05,909 --> 00:34:11,649
well just with what I showed you could

00:34:08,109 --> 00:34:13,270
we do it good good there were some

00:34:11,649 --> 00:34:14,980
people that were quiet though it scares

00:34:13,270 --> 00:34:18,909
me I think you might have thought it was

00:34:14,980 --> 00:34:21,460
possible but I'll let you go this is not

00:34:18,909 --> 00:34:23,889
possible because run see as you see all

00:34:21,460 --> 00:34:25,750
it does is it takes this it takes this

00:34:23,889 --> 00:34:27,669
config file that pod man built for it or

00:34:25,750 --> 00:34:30,190
docker or container D or any other

00:34:27,669 --> 00:34:31,810
container engine cryo hey it takes that

00:34:30,190 --> 00:34:34,510
all it does is take that as an option

00:34:31,810 --> 00:34:36,730
and run a process so unless there's I

00:34:34,510 --> 00:34:38,349
mean possibly with TMU possibly with

00:34:36,730 --> 00:34:40,089
cata containers you could do that with

00:34:38,349 --> 00:34:42,099
cata containers maybe there's ways you

00:34:40,089 --> 00:34:43,869
could do it if you fired up a VM but but

00:34:42,099 --> 00:34:44,770
with just basic containers that is not

00:34:43,869 --> 00:34:46,869
possible right

00:34:44,770 --> 00:34:50,859
these are Linux processes as all they

00:34:46,869 --> 00:34:53,560
are all right so now the fun part where

00:34:50,859 --> 00:34:55,149
I start to pick apart the CLI of docker

00:34:53,560 --> 00:34:58,000
which we basically copied with pod man

00:34:55,149 --> 00:35:00,070
but it has some confusing things so

00:34:58,000 --> 00:35:00,810
let's kill the container and then see

00:35:00,070 --> 00:35:09,220
what happens

00:35:00,810 --> 00:35:10,839
so pod man PS so oh man I hope I'm in

00:35:09,220 --> 00:35:14,290
the mouth sorry yeah let me get out here

00:35:10,839 --> 00:35:15,910
so pod man PS alright so now what

00:35:14,290 --> 00:35:22,300
happens when we kill this let's do a pod

00:35:15,910 --> 00:35:25,000
man kill who thinks they know what

00:35:22,300 --> 00:35:28,260
happened here raise your hand if you

00:35:25,000 --> 00:35:33,369
think you can describe what I just did

00:35:28,260 --> 00:35:34,780
say that one more time the process has

00:35:33,369 --> 00:35:37,080
been killed that's one part what else

00:35:34,780 --> 00:35:37,080
has happened

00:35:43,820 --> 00:35:47,970
no the copy-on-write lair has not been

00:35:46,200 --> 00:35:50,370
deleted yet that's actually the magic

00:35:47,970 --> 00:35:52,170
but yes the process has been killed to

00:35:50,370 --> 00:35:54,270
be honestly I'm not sure if the by now

00:35:52,170 --> 00:35:57,560
it's gone completely I don't know if Dan

00:35:54,270 --> 00:36:00,330
even knows that is it gone I think it is

00:35:57,560 --> 00:36:01,830
but but most importantly the overlay

00:36:00,330 --> 00:36:03,480
file system is still there that

00:36:01,830 --> 00:36:05,580
copy-on-write lair is absolutely still

00:36:03,480 --> 00:36:09,660
there it's not gone so when we do a pod

00:36:05,580 --> 00:36:11,370
man PS - a you'll see that container is

00:36:09,660 --> 00:36:13,590
still there it's just in an exited

00:36:11,370 --> 00:36:15,210
status but what that really means is

00:36:13,590 --> 00:36:16,950
that copy-on-write layer is still there

00:36:15,210 --> 00:36:21,780
I could use it I could save it as a new

00:36:16,950 --> 00:36:23,910
image it's it looks like this so so

00:36:21,780 --> 00:36:26,160
you'll see still we have the metadata

00:36:23,910 --> 00:36:28,080
that's when I do a PS - a I can dump the

00:36:26,160 --> 00:36:29,940
content see the metadata I guess the

00:36:28,080 --> 00:36:33,000
config files still there so I could fire

00:36:29,940 --> 00:36:34,260
it back up if I want I the copy and

00:36:33,000 --> 00:36:36,540
write layer is still there and the

00:36:34,260 --> 00:36:37,920
persistent volume is in la-la-land like

00:36:36,540 --> 00:36:41,100
we can't get to it it's probably

00:36:37,920 --> 00:36:42,000
unmounted but it's irrelevant because

00:36:41,100 --> 00:36:44,850
you can't use it because there's no

00:36:42,000 --> 00:36:49,440
processes running but then now what

00:36:44,850 --> 00:36:51,050
happens when we go to now what's the

00:36:49,440 --> 00:36:56,100
next thing we can do we can do a pod man

00:36:51,050 --> 00:36:58,470
RM and we start - we start to

00:36:56,100 --> 00:36:58,950
deconstruct it right now what does it

00:36:58,470 --> 00:37:04,980
look like

00:36:58,950 --> 00:37:06,840
well now or you'll see it's gone the

00:37:04,980 --> 00:37:08,570
metadata is gone the config file is gone

00:37:06,840 --> 00:37:12,270
everything in VAR web storage is gone

00:37:08,570 --> 00:37:14,850
and you start to see okay now now I

00:37:12,270 --> 00:37:16,050
couldn't turn that old container into a

00:37:14,850 --> 00:37:18,570
new container image because that

00:37:16,050 --> 00:37:20,340
copy-on-write layer is gone so now it

00:37:18,570 --> 00:37:21,600
looks like this notice here I have the

00:37:20,340 --> 00:37:23,400
copy-on-write layer I have the metadata

00:37:21,600 --> 00:37:24,990
I have the config here I have nothing

00:37:23,400 --> 00:37:26,760
Varro you know container storage is

00:37:24,990 --> 00:37:28,650
empty doesn't have anything that contain

00:37:26,760 --> 00:37:30,270
that copy and write layer is gone the

00:37:28,650 --> 00:37:32,090
persistent volume is basically gone but

00:37:30,270 --> 00:37:33,960
but the data is still there on disk so

00:37:32,090 --> 00:37:35,550
obviously it doesn't delete like

00:37:33,960 --> 00:37:37,140
anything I put into M and T is still

00:37:35,550 --> 00:37:39,060
there so if I would have write wrote a

00:37:37,140 --> 00:37:40,380
test file to M and T and it was by mount

00:37:39,060 --> 00:37:42,480
on the host it would be left on the host

00:37:40,380 --> 00:37:48,660
right and that's actually the magic of

00:37:42,480 --> 00:37:52,880
fine mount now what happens when we do

00:37:48,660 --> 00:37:56,720
an RM I or you know so so now you

00:37:52,880 --> 00:38:00,290
see if we do a pod man images if we do

00:37:56,720 --> 00:38:04,730
like pod man just do our mi on this guy

00:38:00,290 --> 00:38:07,280
you know actually this one is fine now

00:38:04,730 --> 00:38:09,260
it's gone gone right like like it's it's

00:38:07,280 --> 00:38:11,870
every all the copy-on-write layers are

00:38:09,260 --> 00:38:13,310
gone so now it looks like this there's

00:38:11,870 --> 00:38:15,140
just a container storage is still there

00:38:13,310 --> 00:38:16,940
it's empty that persistent volume is

00:38:15,140 --> 00:38:18,710
still there systemd still there but

00:38:16,940 --> 00:38:20,120
there's nothing though all those

00:38:18,710 --> 00:38:21,380
copy-on-write layers are gone now

00:38:20,120 --> 00:38:22,820
all the copy-on-write layers that had

00:38:21,380 --> 00:38:24,590
been mirrored down from that container

00:38:22,820 --> 00:38:26,420
that's being stored locally are gone I

00:38:24,590 --> 00:38:28,090
think even the read-only ones that were

00:38:26,420 --> 00:38:33,590
basically part of that container image

00:38:28,090 --> 00:38:35,900
so does that I'll close with basically

00:38:33,590 --> 00:38:37,820
the fact that container engines are both

00:38:35,900 --> 00:38:39,350
more and less complex than you think

00:38:37,820 --> 00:38:41,120
there is actually this long string of

00:38:39,350 --> 00:38:43,310
events happening where pod man's calling

00:38:41,120 --> 00:38:44,750
konma and con man's calling runs he runs

00:38:43,310 --> 00:38:46,640
he's talking to Linda control of fire up

00:38:44,750 --> 00:38:47,570
containers and I do this spiel a lot of

00:38:46,640 --> 00:38:49,850
time when I talk about how that works

00:38:47,570 --> 00:38:51,440
but in reality the things that the

00:38:49,850 --> 00:38:53,870
container engine are doing are not that

00:38:51,440 --> 00:38:55,400
complex it's creating config file it's

00:38:53,870 --> 00:38:56,600
mounting it's telling the kernel to

00:38:55,400 --> 00:38:59,570
mount storage it's not even doing it

00:38:56,600 --> 00:39:02,300
itself and then it is you know just

00:38:59,570 --> 00:39:03,770
basically handing that off to run C and

00:39:02,300 --> 00:39:05,930
run C does all the heavy lifting of the

00:39:03,770 --> 00:39:08,590
of the interface between the kernel and

00:39:05,930 --> 00:39:11,360
and and basically the entire config file

00:39:08,590 --> 00:39:12,410
so the question I'll leave you with a

00:39:11,360 --> 00:39:15,280
little bit of further reading but I'll

00:39:12,410 --> 00:39:17,990
say so now we can answer questions like

00:39:15,280 --> 00:39:20,270
I'll give an example of a question that

00:39:17,990 --> 00:39:22,580
somebody said to me on a webinar I did

00:39:20,270 --> 00:39:24,800
like a month ago I said it's cryo mature

00:39:22,580 --> 00:39:28,430
enough like how do you feel about it is

00:39:24,800 --> 00:39:30,440
it mature enough and I'm like it doesn't

00:39:28,430 --> 00:39:31,850
yeah I'm a hundred percent confident in

00:39:30,440 --> 00:39:33,620
it because it creates a config file it

00:39:31,850 --> 00:39:34,820
mounts some storage and then it it

00:39:33,620 --> 00:39:36,260
basically hands everything off to the

00:39:34,820 --> 00:39:37,940
Linux kernel and so we've been running

00:39:36,260 --> 00:39:39,560
these exact same types of containers

00:39:37,940 --> 00:39:41,690
with the exact same technology with the

00:39:39,560 --> 00:39:43,450
exact same SC Linux libraries as you

00:39:41,690 --> 00:39:45,860
know set comp runs see all of this stuff

00:39:43,450 --> 00:39:48,110
it's all been running exactly the same

00:39:45,860 --> 00:39:51,470
for years now five ten seven six seven

00:39:48,110 --> 00:39:53,180
years now so yet what is there to not be

00:39:51,470 --> 00:39:55,310
comforted in in its maturity does that

00:39:53,180 --> 00:39:56,480
make sense now like there's not much

00:39:55,310 --> 00:39:58,190
that the container engines actually

00:39:56,480 --> 00:40:00,110
doing so I get these weird questions

00:39:58,190 --> 00:40:01,580
that don't make sense because people

00:40:00,110 --> 00:40:03,770
just don't have a warm and fuzzy feeling

00:40:01,580 --> 00:40:05,180
of in their stomach of how this works

00:40:03,770 --> 00:40:05,660
they don't have a gut understanding of

00:40:05,180 --> 00:40:07,010
how we're

00:40:05,660 --> 00:40:09,369
so they ask weird questions that don't

00:40:07,010 --> 00:40:12,289
quite make sense so I'll leave you with

00:40:09,369 --> 00:40:14,809
whenever you have performance or

00:40:12,289 --> 00:40:16,880
security questions you should now be

00:40:14,809 --> 00:40:18,890
able to kind of reverse engineer from

00:40:16,880 --> 00:40:20,390
this understanding and kind of answer

00:40:18,890 --> 00:40:22,579
the question with a lot more confidence

00:40:20,390 --> 00:40:25,039
things like should I compile a Yocto

00:40:22,579 --> 00:40:26,900
Linux in an ephemeral overlay mount FS

00:40:25,039 --> 00:40:28,760
probably not because it's writing tons

00:40:26,900 --> 00:40:30,829
of file system operations that should

00:40:28,760 --> 00:40:32,720
now be crystal clear things like how

00:40:30,829 --> 00:40:34,400
does the performance how's the

00:40:32,720 --> 00:40:36,859
performance of cryo versus you know

00:40:34,400 --> 00:40:37,970
container D I mean there's some metadata

00:40:36,859 --> 00:40:40,250
operations that there might be

00:40:37,970 --> 00:40:43,039
differences but that's it you know the

00:40:40,250 --> 00:40:45,140
running containers are identical storage

00:40:43,039 --> 00:40:46,579
network same same exact thing you know

00:40:45,140 --> 00:40:48,200
these are all the exact you can answer

00:40:46,579 --> 00:40:49,339
the question is storage or with network

00:40:48,200 --> 00:40:50,299
without even knowing it I haven't even

00:40:49,339 --> 00:40:52,960
showed you how it works but it basically

00:40:50,299 --> 00:40:52,960
works the same way

00:41:21,839 --> 00:41:25,390
no it doesn't have a demon it uses them

00:41:24,130 --> 00:41:28,290
better so let me repeat the question so

00:41:25,390 --> 00:41:31,720
how I think the question is essentially

00:41:28,290 --> 00:41:34,180
docker historically had docker is a

00:41:31,720 --> 00:41:36,130
daemon and so it can control all the

00:41:34,180 --> 00:41:38,170
storage basically in place like like

00:41:36,130 --> 00:41:40,030
everybody has to talk through that demon

00:41:38,170 --> 00:41:41,740
so basically it should basically be the

00:41:40,030 --> 00:41:43,690
bottleneck the governor for all of that

00:41:41,740 --> 00:41:46,420
metadata well it's the same thing I mean

00:41:43,690 --> 00:41:48,070
it's file locks and and and pod minute

00:41:46,420 --> 00:41:49,329
you know 20 different people well here's

00:41:48,070 --> 00:41:49,839
here's a couple of answers to your

00:41:49,329 --> 00:41:51,760
question

00:41:49,839 --> 00:41:54,000
how does pod minute manage that well

00:41:51,760 --> 00:41:55,990
when your root you know it's basically

00:41:54,000 --> 00:41:58,630
everybody's accessing Varla you know

00:41:55,990 --> 00:42:00,579
varlets container storage basically I

00:41:58,630 --> 00:42:07,079
don't know if there's file locks dan is

00:42:00,579 --> 00:42:07,079
I assume they're file locks yeah exactly

00:42:10,980 --> 00:42:16,030
yeah so it's that simple does that make

00:42:14,410 --> 00:42:17,920
sense its file system its basic file

00:42:16,030 --> 00:42:19,930
system operations file systems in

00:42:17,920 --> 00:42:21,730
general are atomic in nature they know

00:42:19,930 --> 00:42:23,230
how to do atomic transactions so you

00:42:21,730 --> 00:42:26,710
rely on the file system to do it

00:42:23,230 --> 00:42:28,900
basically I do show that in a slide I

00:42:26,710 --> 00:42:30,849
don't have it in this deck but like I do

00:42:28,900 --> 00:42:32,500
show a slide where people don't realize

00:42:30,849 --> 00:42:34,780
but that file system driver and the

00:42:32,500 --> 00:42:37,210
block driver are shared between all the

00:42:34,780 --> 00:42:39,400
containers right if you if you if you

00:42:37,210 --> 00:42:40,510
buy mount stuff and it's on an NFS share

00:42:39,400 --> 00:42:43,270
you buy mount something and it's on a

00:42:40,510 --> 00:42:45,339
block it's on a you know a fiber channel

00:42:43,270 --> 00:42:47,140
you know I scuzzy or you know something

00:42:45,339 --> 00:42:48,730
like that it uses the same I scuzzy

00:42:47,140 --> 00:42:51,609
driver like everybody shares that I

00:42:48,730 --> 00:42:54,220
scuzzy driver so this if it's XFS if

00:42:51,609 --> 00:42:55,750
it's you know extension for the block

00:42:54,220 --> 00:42:57,369
and faucets and drivers are all shared

00:42:55,750 --> 00:42:59,140
and basically like Dan said they know

00:42:57,369 --> 00:43:01,359
how to handle atomic transactions so

00:42:59,140 --> 00:43:03,310
there's no problem there now that said

00:43:01,359 --> 00:43:05,589
I'll go a step further say users have

00:43:03,310 --> 00:43:07,030
their storage in their home directory so

00:43:05,589 --> 00:43:09,220
different users can't see each other

00:43:07,030 --> 00:43:11,319
storage that's something docker can't do

00:43:09,220 --> 00:43:13,930
because everybody's storage is there so

00:43:11,319 --> 00:43:15,310
if one user creates an image and has

00:43:13,930 --> 00:43:17,020
passwords in it which you shouldn't do

00:43:15,310 --> 00:43:18,460
but if you did by mistake all the other

00:43:17,020 --> 00:43:20,440
users can see that storage because

00:43:18,460 --> 00:43:21,849
everybody's sharing that storage or as

00:43:20,440 --> 00:43:22,900
in pod man if you're running rootless

00:43:21,849 --> 00:43:25,660
they all have their own storage

00:43:22,900 --> 00:43:27,400
everything it's basic UNIX 101 everybody

00:43:25,660 --> 00:43:29,589
stores in their home directory it's dot

00:43:27,400 --> 00:43:30,650
local slash container storage or

00:43:29,589 --> 00:43:41,360
whatever

00:43:30,650 --> 00:43:43,980
does that make sense any other questions

00:43:41,360 --> 00:43:49,860
do you have any nagging performance and

00:43:43,980 --> 00:43:55,170
security questions am I am I supposed to

00:43:49,860 --> 00:43:57,570
talk about that right now it is but

00:43:55,170 --> 00:44:00,600
we're working on something else that we

00:43:57,570 --> 00:44:05,820
that we basically did we publish that

00:44:00,600 --> 00:44:07,740
yet there it did go out I wasn't

00:44:05,820 --> 00:44:08,970
tripping out all right so went out so I

00:44:07,740 --> 00:44:12,030
could talk about it but but in a

00:44:08,970 --> 00:44:15,540
nutshell we're working on an API so

00:44:12,030 --> 00:44:16,980
there's the local pod man CLI API if you

00:44:15,540 --> 00:44:18,960
will that's the human interface right

00:44:16,980 --> 00:44:21,570
it's essentially the docker API it's

00:44:18,960 --> 00:44:24,090
just Padma and run Padma and PS pod man

00:44:21,570 --> 00:44:26,640
you know kill Padma NRM RMI all those

00:44:24,090 --> 00:44:28,560
sub command that stays the same I would

00:44:26,640 --> 00:44:31,260
call that the local API but then we had

00:44:28,560 --> 00:44:34,980
this remote API called VAR link and VAR

00:44:31,260 --> 00:44:36,570
link was a way of exposing an API that

00:44:34,980 --> 00:44:38,640
could basically control all of these

00:44:36,570 --> 00:44:40,170
same things but in a programmatic way so

00:44:38,640 --> 00:44:42,330
you could get request response basically

00:44:40,170 --> 00:44:44,030
so that you could run for example Padma

00:44:42,330 --> 00:44:46,440
in a virtual machine but have a command

00:44:44,030 --> 00:44:48,570
locally on a Mac for example or locally

00:44:46,440 --> 00:44:50,100
on a Windows machine or even locally on

00:44:48,570 --> 00:44:53,340
another Linux machine and then have odd

00:44:50,100 --> 00:44:55,770
men running inside of a VM but we're

00:44:53,340 --> 00:44:57,330
actually working on and we just

00:44:55,770 --> 00:44:59,790
announced that there's actually a 2.0

00:44:57,330 --> 00:45:02,220
version of sensitive this API and it's

00:44:59,790 --> 00:45:06,600
actually going to implement the docker

00:45:02,220 --> 00:45:07,920
API so we're gonna have an API we're

00:45:06,600 --> 00:45:10,170
gonna use system D I think right so

00:45:07,920 --> 00:45:12,240
basically sock it activate it or network

00:45:10,170 --> 00:45:14,070
activate it and then basically have it

00:45:12,240 --> 00:45:15,450
talked so the magic here I'll just get

00:45:14,070 --> 00:45:17,340
cut to the chases you can run the docker

00:45:15,450 --> 00:45:19,410
command and talk to pod man like the

00:45:17,340 --> 00:45:21,300
docker command wants to talk to a remote

00:45:19,410 --> 00:45:23,730
API that is docker compliant and we're

00:45:21,300 --> 00:45:25,890
actually building an API or a mode API

00:45:23,730 --> 00:45:27,570
that will be you know doctor compose

00:45:25,890 --> 00:45:29,910
docker command could talk to it

00:45:27,570 --> 00:45:31,230
and then would go fire off a process for

00:45:29,910 --> 00:45:33,840
pod man in the background do everything

00:45:31,230 --> 00:45:38,450
I basically showed you that's kind of

00:45:33,840 --> 00:45:38,450
answer to that so far link goes away

00:45:39,810 --> 00:45:46,210
but something very cool comes in

00:45:41,890 --> 00:45:48,340
replaces it so I can stop asking the

00:45:46,210 --> 00:45:50,380
question can I use docker compose I can

00:45:48,340 --> 00:45:56,170
just say yes people ability as docker

00:45:50,380 --> 00:46:01,000
compose with pod man any other questions

00:45:56,170 --> 00:46:04,470
any weird questions like yak de winix in

00:46:01,000 --> 00:46:04,470
a container I love those weird ones

00:46:04,860 --> 00:46:09,810
no going once

00:46:11,610 --> 00:46:19,030
we're closed right I think it's in the

00:46:15,030 --> 00:46:20,560
it's in the I forgot what stages of yeah

00:46:19,030 --> 00:46:23,020
there's a different stage if you're a

00:46:20,560 --> 00:46:26,140
Debian user we will have pod man soon in

00:46:23,020 --> 00:46:29,530
Debian it's in like a the testing ish

00:46:26,140 --> 00:46:48,180
phase of whatever they call theirs yeah

00:46:29,530 --> 00:46:48,180
new right yeah so we had one more yeah

00:46:55,530 --> 00:47:03,840
I think you might be right but I don't

00:47:01,680 --> 00:47:05,450
know I haven't tried that but I think

00:47:03,840 --> 00:47:08,550
you might be right

00:47:05,450 --> 00:47:10,170
yeah yeah I think you're right I just

00:47:08,550 --> 00:47:11,940
didn't have time to I just thought about

00:47:10,170 --> 00:47:13,050
it as I was giving this in was like wait

00:47:11,940 --> 00:47:14,490
a minute how would I do that you guys

00:47:13,050 --> 00:47:16,140
running something like mountains object

00:47:14,490 --> 00:47:18,230
a nurse strange yeah but yeah I think

00:47:16,140 --> 00:47:20,070
you're right I think that would work

00:47:18,230 --> 00:47:21,990
alright I think I'm gonna cut everyone

00:47:20,070 --> 00:47:30,220
go so thank you

00:47:21,990 --> 00:47:30,220

YouTube URL: https://www.youtube.com/watch?v=eEBi--rU0ac


