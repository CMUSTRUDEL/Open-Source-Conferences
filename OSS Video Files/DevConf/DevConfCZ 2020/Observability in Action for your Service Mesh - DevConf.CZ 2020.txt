Title: Observability in Action for your Service Mesh - DevConf.CZ 2020
Publication date: 2020-02-28
Playlist: DevConfCZ 2020
Description: 
	Speakers: Xavier Canal Masjuan

Microservice Architectures break up the monolith into many smaller pieces and introduce new communication patterns between services like fault tolerance and dynamic routing. A Service Mesh like Istio provides these traffic control capabilities on a platform level and frees the application writers from those tasks, allowing them to focus on business logic. One of the major challenges with the management of a microservices architecture is trying to understand how services are composed, how they are connected and how all components operate from a global perspective to a particular detail. Kiali works with Istio to visualize the service mesh topology and describe how they are connected. In this session we will explore several microservices scenarios discussing observability practices and showing how Kiali integrates graph, health, metrics, traces, and the configuration of your Service Mesh.

[ https://sched.co/YOte ]

--
Recordings of talks at DevConf are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:00,599 --> 00:00:04,580
thank you for coming to this session

00:00:02,449 --> 00:00:08,069
today we're going to talk about

00:00:04,580 --> 00:00:12,419
observability of applications based on

00:00:08,069 --> 00:00:13,740
the size machine first of all my name is

00:00:12,419 --> 00:00:17,449
Tariq and I'm a software engineer

00:00:13,740 --> 00:00:21,019
working on the project it's called a

00:00:17,449 --> 00:00:25,019
where we observe container based

00:00:21,019 --> 00:00:28,650
application basically on East EO and

00:00:25,019 --> 00:00:32,910
service measures working in Kyani and

00:00:28,650 --> 00:00:36,600
also at hand so today what we are going

00:00:32,910 --> 00:00:42,449
to cover is mainly why we are here

00:00:36,600 --> 00:00:45,510
discussing why a little bit of history

00:00:42,449 --> 00:00:48,960
why we are here why we are talking about

00:00:45,510 --> 00:00:53,070
that and also talking about the

00:00:48,960 --> 00:00:56,850
architecture how it works how is your

00:00:53,070 --> 00:01:00,149
actually deploy and why we have all

00:00:56,850 --> 00:01:03,210
those nice features but most of the time

00:01:00,149 --> 00:01:14,670
of this session I'm going to spend it on

00:01:03,210 --> 00:01:18,840
it on a demo we have a backing site or

00:01:14,670 --> 00:01:24,619
something is not working nicely so we

00:01:18,840 --> 00:01:27,329
are gonna see thanks we have what

00:01:24,619 --> 00:01:30,540
observability tools we have and this

00:01:27,329 --> 00:01:38,610
talk I'm not gonna talk about a traffic

00:01:30,540 --> 00:01:42,750
management not security but main pillars

00:01:38,610 --> 00:01:46,290
of observability that easier gives to

00:01:42,750 --> 00:01:50,640
its users and at the end I'm gonna do a

00:01:46,290 --> 00:01:53,250
really brief recap so why we are here

00:01:50,640 --> 00:01:58,950
why we are even talking about service

00:01:53,250 --> 00:02:01,049
meshes so yeah a lot of you your know

00:01:58,950 --> 00:02:01,920
about these slides and we're you know

00:02:01,049 --> 00:02:04,170
that we are

00:02:01,920 --> 00:02:07,080
from monolithic applications to

00:02:04,170 --> 00:02:11,670
microservices one microservices

00:02:07,080 --> 00:02:14,930
or maybe just services one so what we

00:02:11,670 --> 00:02:18,989
what we were dealing like 20 years ago

00:02:14,930 --> 00:02:22,170
with we it was with application servers

00:02:18,989 --> 00:02:24,900
like huge servers really huge servers

00:02:22,170 --> 00:02:28,170
that deal with a lot of responsibilities

00:02:24,900 --> 00:02:31,019
to the front end of an application HTML

00:02:28,170 --> 00:02:35,690
Javascript may be dealing with emails

00:02:31,019 --> 00:02:39,330
dealing with maybe in CPU intensive

00:02:35,690 --> 00:02:42,299
operation may be GPU intensive operation

00:02:39,330 --> 00:02:45,930
and disk intensive operation right so we

00:02:42,299 --> 00:02:50,340
had we needed to have like huge server

00:02:45,930 --> 00:02:54,299
for dealing with those operations so but

00:02:50,340 --> 00:02:58,250
then someone decided okay do I have to

00:02:54,299 --> 00:03:01,980
pay for this really really huge server

00:02:58,250 --> 00:03:04,610
to maybe like a bit like 10 percent of

00:03:01,980 --> 00:03:08,549
our requests that they are CPU intensive

00:03:04,610 --> 00:03:11,340
and I do have to have a machine which

00:03:08,549 --> 00:03:14,750
don't know how many cores this is really

00:03:11,340 --> 00:03:18,660
expensive what about the splitting those

00:03:14,750 --> 00:03:21,989
responsibilities in a small series that

00:03:18,660 --> 00:03:24,570
for example I have maybe one server for

00:03:21,989 --> 00:03:27,420
the CPU intensive operator operations

00:03:24,570 --> 00:03:30,840
another server or couple of server for

00:03:27,420 --> 00:03:33,420
these ones and maybe some of them for

00:03:30,840 --> 00:03:37,260
the regular request that they don't need

00:03:33,420 --> 00:03:40,290
a lot of huge resources right so we were

00:03:37,260 --> 00:03:43,470
moving we needed to move this monolith

00:03:40,290 --> 00:03:46,620
is please break it down in different

00:03:43,470 --> 00:03:49,790
words so we got the microservices one

00:03:46,620 --> 00:03:53,790
you might yourself microservice party

00:03:49,790 --> 00:03:58,350
what's the the different in here that

00:03:53,790 --> 00:04:01,730
before in the monolith we were sharing

00:03:58,350 --> 00:04:03,400
information using the memory right

00:04:01,730 --> 00:04:07,390
important event

00:04:03,400 --> 00:04:09,700
in poking importing a library and change

00:04:07,390 --> 00:04:14,830
formation with it calling some methods

00:04:09,700 --> 00:04:18,489
there now for sharing information what

00:04:14,830 --> 00:04:23,740
you have its you have the network you

00:04:18,489 --> 00:04:28,870
have all these cables connecting all the

00:04:23,740 --> 00:04:31,750
services right so for example here what

00:04:28,870 --> 00:04:36,340
example this is a an example of a

00:04:31,750 --> 00:04:39,010
monolithic a monolithic application we

00:04:36,340 --> 00:04:41,169
need to compute the benefits of a

00:04:39,010 --> 00:04:45,340
company so what we are doing is just

00:04:41,169 --> 00:04:48,639
returning the subtract of the income and

00:04:45,340 --> 00:04:53,190
the outcome right non networking paused

00:04:48,639 --> 00:04:59,500
let's put a microservices parting here

00:04:53,190 --> 00:05:02,500
now those both our methods are the using

00:04:59,500 --> 00:05:04,539
network so then what you need to do this

00:05:02,500 --> 00:05:07,180
is not precise just it's like for you to

00:05:04,539 --> 00:05:11,440
understand my point right so it's like

00:05:07,180 --> 00:05:14,770
now we have to deal with network then we

00:05:11,440 --> 00:05:17,680
have to deal with timeout and for

00:05:14,770 --> 00:05:20,860
example in this case is how many retry

00:05:17,680 --> 00:05:25,020
we want to do because work is not

00:05:20,860 --> 00:05:28,510
reliable right so ok we have to keep

00:05:25,020 --> 00:05:31,419
with we have to do some how many three

00:05:28,510 --> 00:05:35,050
tries we've been done we've been doing

00:05:31,419 --> 00:05:39,669
so I'd say if we have to retry again and

00:05:35,050 --> 00:05:42,370
also before in the monolith we had one

00:05:39,669 --> 00:05:47,139
lakh and everything requests started in

00:05:42,370 --> 00:05:50,830
one part it and finishes that way so

00:05:47,139 --> 00:05:54,010
what we wanna do now is keep for example

00:05:50,830 --> 00:05:56,590
this DBT tracings we wanna because now

00:05:54,010 --> 00:05:59,169
one request is not in one server one

00:05:56,590 --> 00:06:02,620
request is made of maybe 10 different

00:05:59,169 --> 00:06:05,470
requests so we wanna keep like all the

00:06:02,620 --> 00:06:08,889
talk of them right so we need to yet add

00:06:05,470 --> 00:06:09,849
one more one Claire important client for

00:06:08,889 --> 00:06:13,229
example

00:06:09,849 --> 00:06:15,449
and then and then MANET if the

00:06:13,229 --> 00:06:18,279
initializations is is having any

00:06:15,449 --> 00:06:23,740
exception and at the end of the Big West

00:06:18,279 --> 00:06:26,860
keep or close the DG girl like tracing

00:06:23,740 --> 00:06:29,979
right of this panel and also for

00:06:26,860 --> 00:06:33,369
telemetry it's not in like monolithic

00:06:29,979 --> 00:06:36,399
you put an agent next to next to it next

00:06:33,369 --> 00:06:39,249
to your application at that Asian went

00:06:36,399 --> 00:06:41,679
down to your services and collected

00:06:39,249 --> 00:06:45,159
information now you have to do it like

00:06:41,679 --> 00:06:48,699
for every single service you have so you

00:06:45,159 --> 00:06:52,479
you have yet another client here for

00:06:48,699 --> 00:06:57,610
keeping all this telemetry so we end up

00:06:52,479 --> 00:07:01,289
with a method that has 30 lines of codes

00:06:57,610 --> 00:07:05,769
when we just need one before right so

00:07:01,289 --> 00:07:08,349
developers in the scenario they didn't

00:07:05,769 --> 00:07:12,189
they spending a lot of time dealing with

00:07:08,349 --> 00:07:15,599
network dilemma trees are distributed

00:07:12,189 --> 00:07:18,639
tracing and so on in for example

00:07:15,599 --> 00:07:22,589
security right you kept tons of services

00:07:18,639 --> 00:07:25,779
who is gonna who's gonna be in charge of

00:07:22,589 --> 00:07:30,039
implementing TLS for every service right

00:07:25,779 --> 00:07:36,999
so a lot of a lot of a lot of extra

00:07:30,039 --> 00:07:40,149
codes for dealing with this so here is

00:07:36,999 --> 00:07:45,969
the the service mix to the rescue right

00:07:40,149 --> 00:07:49,360
so what we have is that now for every

00:07:45,969 --> 00:07:52,059
every service you have that the blue

00:07:49,360 --> 00:07:55,509
space is what we call the business logic

00:07:52,059 --> 00:07:59,589
of your application getting the benefits

00:07:55,509 --> 00:08:02,289
of the of the it's actually the business

00:07:59,589 --> 00:08:05,709
the business logic but then you have the

00:08:02,289 --> 00:08:08,379
orange boxes that are the libraries

00:08:05,709 --> 00:08:10,599
modules whatever you wanna call it in

00:08:08,379 --> 00:08:13,460
charge for dealing with network

00:08:10,599 --> 00:08:17,150
telemetry in dealing with

00:08:13,460 --> 00:08:19,850
parody of micro-services there's bunch

00:08:17,150 --> 00:08:23,419
of technology in charge of it but

00:08:19,850 --> 00:08:26,180
because every service can be written

00:08:23,419 --> 00:08:27,729
down in multiple different in in

00:08:26,180 --> 00:08:30,889
different language and different

00:08:27,729 --> 00:08:34,190
languages maybe you have a benefit one

00:08:30,889 --> 00:08:38,089
is in Java but then the other one is in

00:08:34,190 --> 00:08:43,700
notes and the other one would be in C++

00:08:38,089 --> 00:08:47,899
right so now we have the developer

00:08:43,700 --> 00:08:51,950
taking care of too many responsibilities

00:08:47,899 --> 00:08:54,500
for just one single service and yes now

00:08:51,950 --> 00:08:58,730
yes now it's service much to the rescue

00:08:54,500 --> 00:09:02,570
service mesh so back on the like the

00:08:58,730 --> 00:09:05,149
starting of kubernetes so we have the

00:09:02,570 --> 00:09:07,370
surveys and we have the platform which

00:09:05,149 --> 00:09:10,940
is kubernetes and then you deploy your

00:09:07,370 --> 00:09:16,060
service on top of it right so is this a

00:09:10,940 --> 00:09:19,880
scenario so we want to push those

00:09:16,060 --> 00:09:22,399
responsibilities down to the platform so

00:09:19,880 --> 00:09:26,000
pushing it pushing them down to the plug

00:09:22,399 --> 00:09:30,560
so the platform is what a sto and

00:09:26,000 --> 00:09:33,050
service match are doing service mention

00:09:30,560 --> 00:09:36,560
eesti of them move us to teaser scenario

00:09:33,050 --> 00:09:40,160
where the service it only have the

00:09:36,560 --> 00:09:44,029
business logic operations where you can

00:09:40,160 --> 00:09:46,760
just compute benefits income or outcome

00:09:44,029 --> 00:09:50,589
data of your company right so you don't

00:09:46,760 --> 00:09:54,260
have to deal with all of them these

00:09:50,589 --> 00:09:56,870
responsibilities go that went down to

00:09:54,260 --> 00:09:58,579
the container platform layer what we

00:09:56,870 --> 00:10:03,020
call it the East your service measure

00:09:58,579 --> 00:10:07,160
right so now developers are just free to

00:10:03,020 --> 00:10:10,850
do just business logic ok this seems

00:10:07,160 --> 00:10:14,260
really really cool but how is it working

00:10:10,850 --> 00:10:21,470
what's the magic here so here is the

00:10:14,260 --> 00:10:23,640
architecture of of East EO a what we

00:10:21,470 --> 00:10:27,060
have here

00:10:23,640 --> 00:10:30,540
so check this out we have imagine we

00:10:27,060 --> 00:10:33,810
have a line here dividing this dividing

00:10:30,540 --> 00:10:36,300
this architecture so in the upper part

00:10:33,810 --> 00:10:40,230
of the of the image what we have is what

00:10:36,300 --> 00:10:43,410
we call is the data plane actually where

00:10:40,230 --> 00:10:48,300
all our services are living are running

00:10:43,410 --> 00:10:51,000
right where the income service is out

00:10:48,300 --> 00:10:53,459
come and get benefits for example and

00:10:51,000 --> 00:10:56,760
then in the other one in the in the

00:10:53,459 --> 00:11:01,339
bottom part what you have is the e steel

00:10:56,760 --> 00:11:05,160
modules is the control plane that is a

00:11:01,339 --> 00:11:07,980
coal-burning all what you have in your

00:11:05,160 --> 00:11:10,200
in your data plane right I imagine like

00:11:07,980 --> 00:11:13,410
a castle right

00:11:10,200 --> 00:11:16,019
what down on the on the Mount like down

00:11:13,410 --> 00:11:18,510
the mountain it has kind of the D town

00:11:16,019 --> 00:11:20,730
right so from the castle

00:11:18,510 --> 00:11:22,980
you can go burn you can see whatever is

00:11:20,730 --> 00:11:25,290
happening in your data plane right so

00:11:22,980 --> 00:11:29,040
the castle is the cultural plane and the

00:11:25,290 --> 00:11:30,779
town is the data plane right so let's

00:11:29,040 --> 00:11:34,940
just start with the data plane how is

00:11:30,779 --> 00:11:38,910
how is this how we can push those

00:11:34,940 --> 00:11:40,820
responsibilities down to the to the to

00:11:38,910 --> 00:11:44,579
the platform so all these

00:11:40,820 --> 00:11:47,190
responsibilities now are in that proxy

00:11:44,579 --> 00:11:50,790
let me let me explain a little bit

00:11:47,190 --> 00:11:54,300
better so for example now when you

00:11:50,790 --> 00:11:57,839
deploy your service automatically East

00:11:54,300 --> 00:12:01,140
is automatically injecting a proxy in

00:11:57,839 --> 00:12:04,260
front of every service right this proxy

00:12:01,140 --> 00:12:08,490
which is this one it captures all the

00:12:04,260 --> 00:12:12,329
traffic going outside of the service and

00:12:08,490 --> 00:12:15,600
also the incoming work incoming one so

00:12:12,329 --> 00:12:18,329
for example if service a is calling to

00:12:15,600 --> 00:12:21,449
service B what actually happens is that

00:12:18,329 --> 00:12:25,769
service a goes proxy and the proxy

00:12:21,449 --> 00:12:29,190
forwards the request to the following

00:12:25,769 --> 00:12:33,000
proxy that this one is going to forget

00:12:29,190 --> 00:12:36,750
to service me in those proxies something

00:12:33,000 --> 00:12:40,520
like of authentication happen so it may

00:12:36,750 --> 00:12:43,020
that security there's a security

00:12:40,520 --> 00:12:43,470
determination of TLS termination living

00:12:43,020 --> 00:12:47,160
there

00:12:43,470 --> 00:12:50,910
there's authorization so at the proxy is

00:12:47,160 --> 00:12:54,090
able to respond the question should I

00:12:50,910 --> 00:13:00,090
forward this request to the service or

00:12:54,090 --> 00:13:04,860
not right and also proxy does this thing

00:13:00,090 --> 00:13:08,280
of which version of the service a should

00:13:04,860 --> 00:13:10,680
I send the traffic among a beaten maybe

00:13:08,280 --> 00:13:14,490
testing a scenario so should I send it

00:13:10,680 --> 00:13:17,040
to version one corporation two is the

00:13:14,490 --> 00:13:20,430
system really collapse so should I

00:13:17,040 --> 00:13:23,070
prepare sending this request because I

00:13:20,430 --> 00:13:25,260
know that if I'm sending this request my

00:13:23,070 --> 00:13:28,080
database is gonna blow up right so

00:13:25,260 --> 00:13:31,740
should i I stop forwarding these

00:13:28,080 --> 00:13:34,290
requests so this is the data plane where

00:13:31,740 --> 00:13:37,620
everything happens all the all the

00:13:34,290 --> 00:13:40,440
requests happens of your application so

00:13:37,620 --> 00:13:43,950
the question is and who is the one

00:13:40,440 --> 00:13:47,280
configuring this proxy the control plane

00:13:43,950 --> 00:13:50,400
here you have four modules of each tier

00:13:47,280 --> 00:13:51,810
that manage all this configuration and

00:13:50,400 --> 00:13:55,980
may make this happen

00:13:51,810 --> 00:14:00,020
the first one is gali gali is the one in

00:13:55,980 --> 00:14:03,480
charge of receiving configuration and

00:14:00,020 --> 00:14:06,300
checking for its validity is it pallet

00:14:03,480 --> 00:14:10,380
I'm gonna break I'm gonna break the

00:14:06,300 --> 00:14:13,710
deserve a smash and if everything goes

00:14:10,380 --> 00:14:16,290
okay then it sends it to pilot which is

00:14:13,710 --> 00:14:19,459
the one the delivery time right it's

00:14:16,290 --> 00:14:23,179
sending attending all the configuration

00:14:19,459 --> 00:14:26,629
from the users sending sending it to

00:14:23,179 --> 00:14:30,559
every proxy proxy in the service mesh in

00:14:26,629 --> 00:14:32,929
the data plane target then you have

00:14:30,559 --> 00:14:36,769
Citadel that's why we are on top of the

00:14:32,929 --> 00:14:40,160
mountain Sudha Rao is the one detecting

00:14:36,769 --> 00:14:44,179
if there's one new service and if

00:14:40,160 --> 00:14:47,779
there's the service then it sends a pair

00:14:44,179 --> 00:14:51,910
of keys in order to implement the TLS

00:14:47,779 --> 00:14:54,889
and ends right so it's secure all the

00:14:51,910 --> 00:14:57,769
services you have for at least it

00:14:54,889 --> 00:15:03,860
prepares for being secure and start

00:14:57,769 --> 00:15:05,749
using MPLS mutual TLS or TLS for all the

00:15:03,860 --> 00:15:09,550
connects connections on the data plane

00:15:05,749 --> 00:15:13,809
and at the end what you have is mixer

00:15:09,550 --> 00:15:13,809
mixer oops

00:15:14,110 --> 00:15:22,300
all right thank you a mixer is they the

00:15:19,939 --> 00:15:26,569
one in charge for telemetry and

00:15:22,300 --> 00:15:29,149
authorization so telemetry if it

00:15:26,569 --> 00:15:31,730
registers every request happening in

00:15:29,149 --> 00:15:34,730
your data plane and it sends back to

00:15:31,730 --> 00:15:38,329
Prometheus and also it's in charge of

00:15:34,730 --> 00:15:41,869
authentication should i forward to allow

00:15:38,329 --> 00:15:46,009
this request go to the final service to

00:15:41,869 --> 00:15:49,730
the service v for example and yes this

00:15:46,009 --> 00:15:52,339
is the the pillars of ezo and with this

00:15:49,730 --> 00:15:54,939
but you would you what you can achieve

00:15:52,339 --> 00:15:57,970
and what you have by default is

00:15:54,939 --> 00:16:02,509
telemetry traffic management and

00:15:57,970 --> 00:16:06,559
security today we are gonna focus mostly

00:16:02,509 --> 00:16:09,829
and telemetry one really really

00:16:06,559 --> 00:16:12,619
important thing to say here is that with

00:16:09,829 --> 00:16:16,519
ease do you don't have to change any

00:16:12,619 --> 00:16:20,990
single line of code right it's because

00:16:16,519 --> 00:16:24,649
of you have this proxy here that it's

00:16:20,990 --> 00:16:28,549
like it's really like managed by this

00:16:24,649 --> 00:16:29,430
tier developers they don't need to

00:16:28,549 --> 00:16:34,020
change

00:16:29,430 --> 00:16:37,440
single line of code actually it's the

00:16:34,020 --> 00:16:41,130
opposite right we have to remove those

00:16:37,440 --> 00:16:44,010
30 extra lines we added before and just

00:16:41,130 --> 00:16:46,800
call the network call the self is you

00:16:44,010 --> 00:16:49,649
one and then II steel is gonna do the

00:16:46,800 --> 00:16:52,470
rich rice is gonna do the silk quit

00:16:49,649 --> 00:16:56,279
breaking is gonna implement the TLS at

00:16:52,470 --> 00:16:59,490
the end so you are back to monolithic

00:16:56,279 --> 00:17:04,610
area in terms of realizing what the

00:16:59,490 --> 00:17:09,300
network right in telemetry and security

00:17:04,610 --> 00:17:14,220
okay so now that we know that we have

00:17:09,300 --> 00:17:17,970
these three group of functionalities let

00:17:14,220 --> 00:17:20,400
me let me do this Ucayali and and and

00:17:17,970 --> 00:17:23,370
with if we are gonna see the observer

00:17:20,400 --> 00:17:26,429
Lily it observability in action so kyani

00:17:23,370 --> 00:17:29,520
is the observability tool for

00:17:26,429 --> 00:17:34,770
applications based based on Easter

00:17:29,520 --> 00:17:38,670
service mesh clearly very answers is the

00:17:34,770 --> 00:17:46,440
question of how are my micro service is

00:17:38,670 --> 00:17:49,140
doing let's go to the demo so I'm gonna

00:17:46,440 --> 00:17:54,830
spend now some time most of that like

00:17:49,140 --> 00:17:54,830
remaining time probably in here so

00:17:59,179 --> 00:18:06,690
what we prepared here is a application

00:18:03,090 --> 00:18:09,630
it's a travel agency application that

00:18:06,690 --> 00:18:12,929
basically is a really big dummy

00:18:09,630 --> 00:18:16,050
application you are you have three

00:18:12,929 --> 00:18:20,010
different portals distributed all over

00:18:16,050 --> 00:18:24,030
the globe that they are checking for

00:18:20,010 --> 00:18:29,070
cars hotels insurances in order to make

00:18:24,030 --> 00:18:31,470
some reservations services right really

00:18:29,070 --> 00:18:35,280
really easy what we are going to do with

00:18:31,470 --> 00:18:39,179
this demo is troubleshoot it understand

00:18:35,280 --> 00:18:47,280
what happened and go to the roots root

00:18:39,179 --> 00:18:52,190
case to the root to the problem and with

00:18:47,280 --> 00:18:55,290
some problems on there this one this

00:18:52,190 --> 00:18:57,780
pages here this is key ally actually

00:18:55,290 --> 00:19:00,420
this is the console and as you can see

00:18:57,780 --> 00:19:03,000
here like as the uber be which this is

00:19:00,420 --> 00:19:05,000
the overview page so where we can see

00:19:03,000 --> 00:19:08,429
it's all what we deploy in our

00:19:05,000 --> 00:19:11,400
kubernetes or OpenShift

00:19:08,429 --> 00:19:16,860
and here we want to take care we want to

00:19:11,400 --> 00:19:21,240
check out only those two namespaces let

00:19:16,860 --> 00:19:25,380
me filter that out yes only toast of

00:19:21,240 --> 00:19:28,710
right we see that apparently everything

00:19:25,380 --> 00:19:31,860
is ingrained so it look like there's no

00:19:28,710 --> 00:19:35,190
problem here what we say is that our

00:19:31,860 --> 00:19:38,850
configuration all the configs are all

00:19:35,190 --> 00:19:41,700
right the applications here the six

00:19:38,850 --> 00:19:45,510
applications we we are seeing our pre

00:19:41,700 --> 00:19:49,350
healthy traffic is a stable we see that

00:19:45,510 --> 00:19:54,080
like a seventy requests per second so it

00:19:49,350 --> 00:19:58,470
looks pretty cool let me show you like

00:19:54,080 --> 00:20:03,870
what what is this application and how it

00:19:58,470 --> 00:20:06,630
looks like here what you have this is

00:20:03,870 --> 00:20:10,740
one of the coolest coolest

00:20:06,630 --> 00:20:15,180
we haven't clearly and this is how our

00:20:10,740 --> 00:20:17,880
application is connected how are all the

00:20:15,180 --> 00:20:23,030
requests flowing from one service to

00:20:17,880 --> 00:20:25,920
another and yes this is thanks to the

00:20:23,030 --> 00:20:28,560
prometheus do you remember guys about

00:20:25,920 --> 00:20:32,160
this proxy we have in front of every

00:20:28,560 --> 00:20:35,160
service so that proxy what it does is it

00:20:32,160 --> 00:20:38,220
is capturing all the requests and

00:20:35,160 --> 00:20:41,520
sending it back to Prometheus and with

00:20:38,220 --> 00:20:44,730
those metrics now we are able to show

00:20:41,520 --> 00:20:48,540
this graph right let me show one cool

00:20:44,730 --> 00:20:53,070
thing we have also there is the traffic

00:20:48,540 --> 00:20:57,600
animation and also let me show if it's

00:20:53,070 --> 00:21:00,690
secure or not so now you can see that we

00:20:57,600 --> 00:21:02,970
have actually traffic flowing from from

00:21:00,690 --> 00:21:06,270
one service to another from one service

00:21:02,970 --> 00:21:09,180
ok let me stop here a bit so the

00:21:06,270 --> 00:21:11,100
triangles here are services like the

00:21:09,180 --> 00:21:16,640
ones you know if you know kubernetes

00:21:11,100 --> 00:21:20,340
services itself and now that one is a

00:21:16,640 --> 00:21:24,630
workloads Warbler meaning a unit of a

00:21:20,340 --> 00:21:28,320
runtime application ok it might be 100

00:21:24,630 --> 00:21:31,200
pots it may be one deployment one

00:21:28,320 --> 00:21:36,540
deployment like releasing or creating

00:21:31,200 --> 00:21:39,210
100 pots or yes it's like one piece of

00:21:36,540 --> 00:21:43,970
application you can have multiple

00:21:39,210 --> 00:21:49,980
versions of it so I can show you that

00:21:43,970 --> 00:21:57,870
for example here for every application

00:21:49,980 --> 00:22:00,300
we have version 1 and version 2 so it

00:21:57,870 --> 00:22:03,450
looks like this application is running

00:22:00,300 --> 00:22:07,470
and a be testing it looks like right

00:22:03,450 --> 00:22:10,500
it's like for every every request

00:22:07,470 --> 00:22:14,700
received in troubles goes to B 1 and B 2

00:22:10,500 --> 00:22:17,310
and also from be one goes to respective

00:22:14,700 --> 00:22:20,130
services checking for insurance or

00:22:17,310 --> 00:22:25,920
hotels that this traffic

00:22:20,130 --> 00:22:28,440
splitting v1 and v2 and here in this

00:22:25,920 --> 00:22:31,320
example what we have is we have three

00:22:28,440 --> 00:22:35,520
different applications that they might

00:22:31,320 --> 00:22:38,460
leave in different data centers or and

00:22:35,520 --> 00:22:41,960
this one is is actually in a in

00:22:38,460 --> 00:22:45,930
different namespaces so this one is a

00:22:41,960 --> 00:22:49,380
portal based in London this one is in

00:22:45,930 --> 00:22:51,570
Paris and this one is in Rome there's

00:22:49,380 --> 00:22:54,690
those portals are the ones sending

00:22:51,570 --> 00:22:56,700
traffic to the engine and what we see

00:22:54,690 --> 00:22:59,130
that there's two different customers

00:22:56,700 --> 00:23:02,970
here we we see that there's a web

00:22:59,130 --> 00:23:05,970
customer and VIP the ones paying more

00:23:02,970 --> 00:23:09,660
money and probably getting getting

00:23:05,970 --> 00:23:16,080
better discounts on own it's poking

00:23:09,660 --> 00:23:19,200
right so more or less I think it's clear

00:23:16,080 --> 00:23:21,200
what it does this application so and one

00:23:19,200 --> 00:23:24,330
important thing is that I remember

00:23:21,200 --> 00:23:27,060
someone saying that it's pretty pretty

00:23:24,330 --> 00:23:29,610
useful not only for seeing all the

00:23:27,060 --> 00:23:32,880
requests flowing but also because I

00:23:29,610 --> 00:23:35,340
finally know how many services I have

00:23:32,880 --> 00:23:36,810
because I'm talking to one developer and

00:23:35,340 --> 00:23:39,270
he said no no my name is pacer you know

00:23:36,810 --> 00:23:41,340
I'm my team only deals with three but

00:23:39,270 --> 00:23:44,070
I'm talking to his a his colleagues and

00:23:41,340 --> 00:23:46,650
his no no we are dealing with four it's

00:23:44,070 --> 00:23:48,900
like okay how many things I do do I have

00:23:46,650 --> 00:23:50,430
to secure how many things do I have to

00:23:48,900 --> 00:23:56,190
like take care of it

00:23:50,430 --> 00:24:01,100
so cool let me show you let me show you

00:23:56,190 --> 00:24:01,100
more things for understanding yes

00:24:03,950 --> 00:24:12,870
the large boxes are applications meaning

00:24:08,280 --> 00:24:18,090
that it's drug time a thoughts

00:24:12,870 --> 00:24:20,640
deployments that run a application that

00:24:18,090 --> 00:24:23,040
has the same behavior but may have

00:24:20,640 --> 00:24:32,250
different versions of it right for

00:24:23,040 --> 00:24:34,380
example here there are just deployments

00:24:32,250 --> 00:24:37,260
nope they are deployments and false and

00:24:34,380 --> 00:24:38,100
here it's just a representation out of

00:24:37,260 --> 00:24:41,670
the matrix

00:24:38,100 --> 00:24:46,770
so actually you see insurances here so

00:24:41,670 --> 00:24:49,280
it means that p1 and p2 deals with the

00:24:46,770 --> 00:24:52,440
same responsibilities for example fetch

00:24:49,280 --> 00:24:54,570
fetch insurances book insurances or

00:24:52,440 --> 00:24:57,180
canceled insurances but there's two

00:24:54,570 --> 00:25:02,690
versions of it right but essentially

00:24:57,180 --> 00:25:02,690
it's the same the same behavior

00:25:06,760 --> 00:25:14,740
okay let's see one let's see if this

00:25:11,860 --> 00:25:17,380
first time because here thanks to

00:25:14,740 --> 00:25:27,070
Prometheus what we have is it the

00:25:17,380 --> 00:25:30,480
responses time what we have is that for

00:25:27,070 --> 00:25:34,360
example the traffic going to be one it's

00:25:30,480 --> 00:25:40,690
taking 91 milliseconds but the traffic

00:25:34,360 --> 00:25:43,270
going to version 2 takes 222 here what

00:25:40,690 --> 00:25:47,650
we can see it's kind of the same that 90

00:25:43,270 --> 00:25:53,020
milliseconds for v1 and 202 version 2

00:25:47,650 --> 00:25:56,380
and same happen here patient - so it

00:25:53,020 --> 00:26:05,440
looks like the version 2 has a higher

00:25:56,380 --> 00:26:10,740
latency right here exactly exactly the

00:26:05,440 --> 00:26:14,200
same so now I want to introduce you the

00:26:10,740 --> 00:26:16,480
second D or the first pillar of the

00:26:14,200 --> 00:26:20,380
observability which are the metrics

00:26:16,480 --> 00:26:23,260
right the golden rules so with each do

00:26:20,380 --> 00:26:26,250
you have by default with not changing

00:26:23,260 --> 00:26:32,110
any single line of code you have

00:26:26,250 --> 00:26:35,710
something like like this we turn the

00:26:32,110 --> 00:26:39,010
unbound inbound and outbound metrics so

00:26:35,710 --> 00:26:41,620
we want to guess we want to see what

00:26:39,010 --> 00:26:43,809
happened with those latencies and we are

00:26:41,620 --> 00:26:48,100
them we want to answer the question for

00:26:43,809 --> 00:26:51,669
example is which users are suffering the

00:26:48,100 --> 00:26:56,110
most this new version - that has this

00:26:51,669 --> 00:27:00,100
low higher response time so what you

00:26:56,110 --> 00:27:06,790
have is that you have the ability with

00:27:00,100 --> 00:27:12,760
Jiali to group to group

00:27:06,790 --> 00:27:16,440
metrics by remote oops just let me show

00:27:12,760 --> 00:27:20,230
this worm is the one I wanted

00:27:16,440 --> 00:27:25,150
so you remember troubles

00:27:20,230 --> 00:27:27,850
troubles they trouble some servants had

00:27:25,150 --> 00:27:31,299
as a client's the London portal parish

00:27:27,850 --> 00:27:34,030
portal and Rome portal troubles is kind

00:27:31,299 --> 00:27:38,470
of the front end of our engine right so

00:27:34,030 --> 00:27:40,900
we want to know a for every portal which

00:27:38,470 --> 00:27:48,760
users are the are the most affected by

00:27:40,900 --> 00:27:52,210
by this by this version too so if I'm if

00:27:48,760 --> 00:27:56,380
I'm grouping the metric the all the

00:27:52,210 --> 00:28:02,110
telemetry by remote version by web and

00:27:56,380 --> 00:28:09,700
VIP versions of it what we you can see

00:28:02,110 --> 00:28:13,780
is that yes the VIP so there's two

00:28:09,700 --> 00:28:16,929
different lines of responses times the

00:28:13,780 --> 00:28:21,040
VIP are really really like a high

00:28:16,929 --> 00:28:26,260
response time 104 but for the web one

00:28:21,040 --> 00:28:30,610
it's around let's say 50 60 milliseconds

00:28:26,260 --> 00:28:34,510
so yes we are we are observing that VIP

00:28:30,610 --> 00:28:36,820
was the users that are paying extra

00:28:34,510 --> 00:28:41,400
money or we want to take care of them

00:28:36,820 --> 00:28:46,270
they are suffering of our new deployment

00:28:41,400 --> 00:28:49,750
so okay let's let's let's let's see what

00:28:46,270 --> 00:28:54,280
happened let's let's see who are which

00:28:49,750 --> 00:28:57,970
thoughts are the ones having those

00:28:54,280 --> 00:29:01,929
problems do you say also that you have

00:28:57,970 --> 00:29:06,250
little dots in in here like correlated

00:29:01,929 --> 00:29:10,320
can you see these dots this dot here are

00:29:06,250 --> 00:29:14,380
actually the traces that are

00:29:10,320 --> 00:29:17,620
automatically recorded in every proxy so

00:29:14,380 --> 00:29:22,240
what you can say is that the same time

00:29:17,620 --> 00:29:26,049
of you see here at that moment what you

00:29:22,240 --> 00:29:28,929
can see is the actual traces that

00:29:26,049 --> 00:29:31,419
lasting those milliseconds so you what

00:29:28,929 --> 00:29:32,620
you see is that there was a request to

00:29:31,419 --> 00:29:37,450
troubles

00:29:32,620 --> 00:29:39,640
at that part that lasted that amount of

00:29:37,450 --> 00:29:43,000
time right so you have we have

00:29:39,640 --> 00:29:45,270
correlated not only we have correlated

00:29:43,000 --> 00:29:48,100
the metrics and also the traces

00:29:45,270 --> 00:29:51,820
registered on our side business so we

00:29:48,100 --> 00:29:54,610
can see for every every every request

00:29:51,820 --> 00:29:56,559
when it happened on the top or in the

00:29:54,610 --> 00:30:00,190
button so we clearly see that most of

00:29:56,559 --> 00:30:02,590
the traces are off from the VIP so let's

00:30:00,190 --> 00:30:06,670
check that out let's let's see what

00:30:02,590 --> 00:30:08,620
those traces says and for that what

00:30:06,670 --> 00:30:12,610
we're going to go is to the services

00:30:08,620 --> 00:30:15,780
because sto it traces for a traces it

00:30:12,610 --> 00:30:19,929
creates the traces or track the traces

00:30:15,780 --> 00:30:23,980
with the in the services not in the not

00:30:19,929 --> 00:30:27,070
in the workloads this is the page of a

00:30:23,980 --> 00:30:29,710
service with information related to the

00:30:27,070 --> 00:30:34,840
service we see that there's two end

00:30:29,710 --> 00:30:37,179
points we see which part is exposed we

00:30:34,840 --> 00:30:40,840
see that is there those two versions

00:30:37,179 --> 00:30:44,140
that belongs to a flight to the up

00:30:40,840 --> 00:30:47,710
flight and yeah and also the it's

00:30:44,140 --> 00:30:51,120
version 1 and version 2 but the most

00:30:47,710 --> 00:30:54,790
important thing we see that troubles is

00:30:51,120 --> 00:30:58,480
the the front end is the one sending

00:30:54,790 --> 00:31:05,170
traffic to it and then flights is

00:30:58,480 --> 00:31:08,280
sending traffic to its pots right but

00:31:05,170 --> 00:31:11,800
let's go let's go to the tracing top

00:31:08,280 --> 00:31:16,120
here the awesome thing you can say is

00:31:11,800 --> 00:31:21,429
all the traces related to that flight to

00:31:16,120 --> 00:31:23,890
that flight service so we see here all

00:31:21,429 --> 00:31:27,460
the traces and quickly we can see is

00:31:23,890 --> 00:31:31,710
that there's three levels of traces

00:31:27,460 --> 00:31:33,929
right one level here around like zero

00:31:31,710 --> 00:31:38,080
milliseconds should be probably five

00:31:33,929 --> 00:31:44,310
milliseconds or another one here around

00:31:38,080 --> 00:31:44,310
like 50 milliseconds and one more

00:31:47,570 --> 00:31:56,190
here right so let's let's check those

00:31:51,990 --> 00:31:59,700
those those traces for example let's go

00:31:56,190 --> 00:32:03,510
to the to the middle one

00:31:59,700 --> 00:32:07,380
what do you can see for a trace is which

00:32:03,510 --> 00:32:11,310
are the sponge that created that request

00:32:07,380 --> 00:32:13,910
for example let's see for the flights

00:32:11,310 --> 00:32:20,310
right so we say that the service flights

00:32:13,910 --> 00:32:22,950
this is the the span so the requests

00:32:20,310 --> 00:32:25,530
going through flights and we see here

00:32:22,950 --> 00:32:29,900
some extra information what we can see

00:32:25,530 --> 00:32:34,910
is yes this trace in the 50 milliseconds

00:32:29,900 --> 00:32:39,300
goes to be - let's see - the discounts

00:32:34,910 --> 00:32:44,010
the discounts span this one goes to b2

00:32:39,300 --> 00:32:47,370
also all right let's check the these

00:32:44,010 --> 00:32:50,400
ones that are are they don't have like

00:32:47,370 --> 00:32:54,630
this this huge a delay and let's see

00:32:50,400 --> 00:32:59,400
which version are using this one it uses

00:32:54,630 --> 00:33:03,600
be one one one spine uses be 1 and the

00:32:59,400 --> 00:33:04,590
other span four flights uses the veto

00:33:03,600 --> 00:33:08,340
all right

00:33:04,590 --> 00:33:12,480
it also has veto so p2 is like not

00:33:08,340 --> 00:33:15,210
introducing delay but because it's like

00:33:12,480 --> 00:33:18,510
only 5 millisecond something is going

00:33:15,210 --> 00:33:20,430
really mad then for the 10 milliseconds

00:33:18,510 --> 00:33:24,720
one let's check that out

00:33:20,430 --> 00:33:28,650
and what we can see here is that here

00:33:24,720 --> 00:33:35,180
this request goes to veto the ones on

00:33:28,650 --> 00:33:39,300
flights and in troubles it uses b1 okay

00:33:35,180 --> 00:33:43,080
well it's not clear we see that v2 when

00:33:39,300 --> 00:33:47,340
when b2 is involved then it might have

00:33:43,080 --> 00:33:50,220
like a extra delay or the latency grows

00:33:47,340 --> 00:33:53,150
but we are not sure about it it's not

00:33:50,220 --> 00:33:57,270
all the time so it looks like v2

00:33:53,150 --> 00:34:02,670
introducing randomly a

00:33:57,270 --> 00:34:06,600
a delay so let me introduce you the the

00:34:02,670 --> 00:34:12,690
third pillar of observability which are

00:34:06,600 --> 00:34:17,510
a the deluxe right so with easier what

00:34:12,690 --> 00:34:22,740
you can also check is the locks of a

00:34:17,510 --> 00:34:25,919
specific of a specific application not

00:34:22,740 --> 00:34:29,669
only the locks let me let's let's go to

00:34:25,919 --> 00:34:36,480
veto which is make sense regarding our

00:34:29,669 --> 00:34:42,330
our a hypothesis so you what you can see

00:34:36,480 --> 00:34:46,110
is the locks of of the of the of you of

00:34:42,330 --> 00:34:48,390
one of one workloads not one part you

00:34:46,110 --> 00:34:51,659
can have many multiple parts here but

00:34:48,390 --> 00:34:55,230
also you can check the locks of your

00:34:51,659 --> 00:34:58,380
proxy and see what's happening here so

00:34:55,230 --> 00:35:01,130
this is the this is the proxy we were

00:34:58,380 --> 00:35:06,450
talking about in the architectural page

00:35:01,130 --> 00:35:11,160
so it looks like everything is kind of

00:35:06,450 --> 00:35:11,760
okay in for in for no errors nothing

00:35:11,160 --> 00:35:14,730
happened

00:35:11,760 --> 00:35:19,620
and let's see the locks of our

00:35:14,730 --> 00:35:22,200
applications of p2 on cars so what do

00:35:19,620 --> 00:35:26,100
you what you see here is that for

00:35:22,200 --> 00:35:29,850
example you have one gets car for city

00:35:26,100 --> 00:35:33,990
London but then you have okay you have

00:35:29,850 --> 00:35:36,960
here one chaos monkey one line saying

00:35:33,990 --> 00:35:40,230
chaos monkey introduced it 550

00:35:36,960 --> 00:35:42,530
milliseconds of latency do you do you

00:35:40,230 --> 00:35:46,910
guys know what is a chaos engineering

00:35:42,530 --> 00:35:49,950
how many of you okay so it looked like

00:35:46,910 --> 00:35:53,910
someone just released a version to with

00:35:49,950 --> 00:35:58,110
a 50 milliseconds delay on all the

00:35:53,910 --> 00:36:01,650
requests right so I mean not not that

00:35:58,110 --> 00:36:05,790
cool but okay we are on East year so we

00:36:01,650 --> 00:36:10,440
can amend this right so so far we've

00:36:05,790 --> 00:36:14,250
seen that we have metrics for the graph

00:36:10,440 --> 00:36:18,750
seeing how healthy our applications than

00:36:14,250 --> 00:36:21,290
what we saw it was the the metrics and

00:36:18,750 --> 00:36:25,079
the response time for everything and

00:36:21,290 --> 00:36:27,750
after that we see telemetry for like for

00:36:25,079 --> 00:36:30,599
our distributed tracing and for logs

00:36:27,750 --> 00:36:36,690
now what I want to we want to introduce

00:36:30,599 --> 00:36:39,270
you is how we can prepare our VIP users

00:36:36,690 --> 00:36:42,030
to receive these but experience how we

00:36:39,270 --> 00:36:45,599
can use traffic management management

00:36:42,030 --> 00:36:49,530
from East EO to cut all the

00:36:45,599 --> 00:36:53,150
communications to versions to that they

00:36:49,530 --> 00:36:57,869
add the one introducing introducing

00:36:53,150 --> 00:37:03,839
latency and just for fun let me see if

00:36:57,869 --> 00:37:08,040
b2 has also introduces some extra extra

00:37:03,839 --> 00:37:11,300
chaos it looks like no so we were right

00:37:08,040 --> 00:37:20,940
b2 is the one for sure introducing a

00:37:11,300 --> 00:37:27,660
latency here ok so yes here we have

00:37:20,940 --> 00:37:30,720
these these are the response time really

00:37:27,660 --> 00:37:34,200
really high and we see that everything

00:37:30,720 --> 00:37:38,730
is flowing from cars to p1 and p2 so

00:37:34,200 --> 00:37:42,270
what we should do is prevent prevent all

00:37:38,730 --> 00:37:44,099
the traffic to flow to v1 right so I'm

00:37:42,270 --> 00:37:47,550
gonna introduce you what we call it the

00:37:44,099 --> 00:37:49,770
Kyani action where we you go to a

00:37:47,550 --> 00:37:51,990
service which is the one in charge of

00:37:49,770 --> 00:37:54,089
splitting traffic to one version or

00:37:51,990 --> 00:37:57,030
another and we are going to do is

00:37:54,089 --> 00:38:01,490
suspend traffic we are calling we are

00:37:57,030 --> 00:38:06,180
going to suspend traffic on version 2

00:38:01,490 --> 00:38:09,780
with this what a key ally does is create

00:38:06,180 --> 00:38:14,010
for you the necessary configurations on

00:38:09,780 --> 00:38:16,020
sto that goes through gali gali sends it

00:38:14,010 --> 00:38:21,170
to Pilate and Pilate the deliverer

00:38:16,020 --> 00:38:22,270
delivery guy goes to every or the proxy

00:38:21,170 --> 00:38:24,820
necessary

00:38:22,270 --> 00:38:29,040
proxy's and installing those new

00:38:24,820 --> 00:38:33,130
configurations here you can see that

00:38:29,040 --> 00:38:36,460
that we create for you this new this new

00:38:33,130 --> 00:38:41,590
llamo saying that now hundred percent of

00:38:36,460 --> 00:38:45,040
the time let's go to v1 subset and zero

00:38:41,590 --> 00:38:49,570
percent of the time go to subset v2

00:38:45,040 --> 00:38:54,730
let's check that out let's go to the

00:38:49,570 --> 00:39:00,490
graph and if we see now we have done

00:38:54,730 --> 00:39:03,550
this one let me let me highlight which

00:39:00,490 --> 00:39:07,870
is the up cars okay so you have a cool

00:39:03,550 --> 00:39:13,090
feature here for highlighting what you

00:39:07,870 --> 00:39:18,340
have and let me show the request per

00:39:13,090 --> 00:39:20,830
seconds right now the graph says ok here

00:39:18,340 --> 00:39:26,100
you have a beautiful service so you have

00:39:20,830 --> 00:39:29,560
traffic management going on over here

00:39:26,100 --> 00:39:34,240
these should be getting a stable over

00:39:29,560 --> 00:39:41,620
the time and we should see that it

00:39:34,240 --> 00:39:45,130
should be zero in a few seconds or for

00:39:41,620 --> 00:39:48,400
if demo gods ones it should be zero

00:39:45,130 --> 00:39:51,070
requests per seconds percentage okay

00:39:48,400 --> 00:39:55,330
it's getting like loader percentage of

00:39:51,070 --> 00:39:58,960
requests going down 32 and so on this is

00:39:55,330 --> 00:40:02,290
for the last yes so now for the last

00:39:58,960 --> 00:40:06,580
minute what we have is that now there's

00:40:02,290 --> 00:40:08,650
no traffic here so we didn't change any

00:40:06,580 --> 00:40:11,980
single line of code we didn't have to

00:40:08,650 --> 00:40:16,510
rely on any configuration service just

00:40:11,980 --> 00:40:19,270
go to the configure the platform we

00:40:16,510 --> 00:40:24,640
could do exactly the same for all the

00:40:19,270 --> 00:40:29,950
others all the other services so you

00:40:24,640 --> 00:40:32,770
will finally traffic all the traffic all

00:40:29,950 --> 00:40:34,490
the all the traffic sorry we will

00:40:32,770 --> 00:40:38,480
forward all the traffic to

00:40:34,490 --> 00:40:41,990
Vito let's say for example again to her

00:40:38,480 --> 00:40:44,630
toes and use we do exactly the same or

00:40:41,990 --> 00:40:49,300
let's do another different thing a

00:40:44,630 --> 00:40:52,670
weight we can weaken a split traffic not

00:40:49,300 --> 00:40:55,700
0-100 but what we can do is it's like

00:40:52,670 --> 00:40:58,250
okay we for example the scenario we've

00:40:55,700 --> 00:41:01,460
talked to the guy who introduced his

00:40:58,250 --> 00:41:04,040
chaos monkey and he convinced us to

00:41:01,460 --> 00:41:07,460
leave - at least for one of the

00:41:04,040 --> 00:41:09,200
workloads try only 10% of the traffic

00:41:07,460 --> 00:41:11,150
because sometimes it's really really

00:41:09,200 --> 00:41:14,900
useful sometimes it's really really

00:41:11,150 --> 00:41:17,660
useful to play with real traffic right

00:41:14,900 --> 00:41:19,850
with a new version we don't wanna like

00:41:17,660 --> 00:41:23,180
do performance testing with like

00:41:19,850 --> 00:41:25,190
invented plan we just want to use real

00:41:23,180 --> 00:41:25,970
traffic right so we can do something

00:41:25,190 --> 00:41:28,490
like that

00:41:25,970 --> 00:41:31,040
send 10% of the traffic here and the

00:41:28,490 --> 00:41:35,030
rest to the previous version that we

00:41:31,040 --> 00:41:42,100
know it works so if we should go to the

00:41:35,030 --> 00:41:52,130
graph now I don't want you to believe me

00:41:42,100 --> 00:41:57,880
so we should see I don't remember now

00:41:52,130 --> 00:41:59,150
which was the which one Otto's thank you

00:41:57,880 --> 00:42:01,760
yeah

00:41:59,150 --> 00:42:04,730
so here we have actually I don't know

00:42:01,760 --> 00:42:07,760
why I asked because I have here a butyl

00:42:04,730 --> 00:42:10,100
service is saying that something

00:42:07,760 --> 00:42:14,180
happening and you see that over the time

00:42:10,100 --> 00:42:19,670
a the traffic going to version 2 it's

00:42:14,180 --> 00:42:24,320
gonna be like 90 10% right cool things

00:42:19,670 --> 00:42:28,400
you have is a if you see the traffic

00:42:24,320 --> 00:42:32,390
animation you see it you see you see the

00:42:28,400 --> 00:42:34,400
requests here if you have plenty we have

00:42:32,390 --> 00:42:38,030
a lot of requests then you're gonna see

00:42:34,400 --> 00:42:40,430
a lot of a lot of dots here and the size

00:42:38,030 --> 00:42:42,320
of the thought is the size of the

00:42:40,430 --> 00:42:45,109
requests if you here for example

00:42:42,320 --> 00:42:46,370
uploading pictures if you have a picture

00:42:45,109 --> 00:42:49,160
like a server

00:42:46,370 --> 00:42:51,440
uploading a great uploading picture then

00:42:49,160 --> 00:42:54,350
you're gonna see that you have huge

00:42:51,440 --> 00:42:57,710
balls or not so it's going to be easy

00:42:54,350 --> 00:43:01,310
for you to say okay we have bandwidth

00:42:57,710 --> 00:43:04,370
problems so let's go to that service and

00:43:01,310 --> 00:43:07,330
see what we can do this this area for

00:43:04,370 --> 00:43:07,330
example right

00:43:07,370 --> 00:43:16,190
the cool thing I didn't show you before

00:43:09,950 --> 00:43:18,590
is that we also show security because

00:43:16,190 --> 00:43:21,320
sto by default uses one thing it's

00:43:18,590 --> 00:43:27,560
called empty LS do you guys know about M

00:43:21,320 --> 00:43:31,250
TLS no okay MPLS is like TLS but not

00:43:27,560 --> 00:43:34,070
only clap not only from this client

00:43:31,250 --> 00:43:37,250
standpoint it saying OK server are you

00:43:34,070 --> 00:43:41,120
who you say you are it's both ways so

00:43:37,250 --> 00:43:43,370
client also servers identifies for a

00:43:41,120 --> 00:43:46,820
client and client also said I'm the

00:43:43,370 --> 00:43:49,070
bollocks interlocutor here because

00:43:46,820 --> 00:43:51,250
especially for micro services and

00:43:49,070 --> 00:43:54,320
especially for machine-to-machine

00:43:51,250 --> 00:43:56,870
communications it's it's really

00:43:54,320 --> 00:43:59,150
important to even divide both ends of

00:43:56,870 --> 00:44:03,380
the communication right so what you see

00:43:59,150 --> 00:44:07,910
here really easily is that you can find

00:44:03,380 --> 00:44:11,420
all the all the edges all the

00:44:07,910 --> 00:44:14,540
communications that uses MPLS at this

00:44:11,420 --> 00:44:19,640
point it's all of the traffic this is

00:44:14,540 --> 00:44:21,620
really cool feature and for example what

00:44:19,640 --> 00:44:25,310
you can see here what you can do here

00:44:21,620 --> 00:44:29,510
also is now tell me response time which

00:44:25,310 --> 00:44:34,340
are the edges that last more than 200

00:44:29,510 --> 00:44:39,110
milliseconds and we can see that this

00:44:34,340 --> 00:44:47,270
one the version to still have a higher

00:44:39,110 --> 00:44:49,640
latency right all right yes and and here

00:44:47,270 --> 00:44:52,130
probably you're gonna be one of like the

00:44:49,640 --> 00:44:55,010
it's gonna be a premiere right because

00:44:52,130 --> 00:44:59,570
we have this really really nice to

00:44:55,010 --> 00:45:03,260
which is the replay that also yeah it is

00:44:59,570 --> 00:45:07,400
it's brand-new oh so what you have here

00:45:03,260 --> 00:45:10,609
is that if you if you had like an

00:45:07,400 --> 00:45:13,280
incident you had like a problem what you

00:45:10,609 --> 00:45:15,980
can do it's replay it's like a football

00:45:13,280 --> 00:45:19,280
right it's like when when you scored out

00:45:15,980 --> 00:45:22,340
a goal and then you're showing like what

00:45:19,280 --> 00:45:26,869
happened so what do you you can see here

00:45:22,340 --> 00:45:30,710
is they you can replay you can replay

00:45:26,869 --> 00:45:34,280
what happened for the last five minutes

00:45:30,710 --> 00:45:37,190
so you can see all the traffic flowing

00:45:34,280 --> 00:45:39,980
and you can you can check all the

00:45:37,190 --> 00:45:43,820
response time happening over there for

00:45:39,980 --> 00:45:46,070
the life for the last five minutes so

00:45:43,820 --> 00:45:50,390
isn't it awesome that you can replay

00:45:46,070 --> 00:45:54,590
what was happening at the point that you

00:45:50,390 --> 00:45:57,230
had an incident and you still can use

00:45:54,590 --> 00:46:01,640
the usual tools for highlighting things

00:45:57,230 --> 00:46:04,640
seeing if it was because the mpls it was

00:46:01,640 --> 00:46:07,910
introduced and making you some issues or

00:46:04,640 --> 00:46:11,750
maybe you want to replay the moment you

00:46:07,910 --> 00:46:15,290
roll out a new version and your system

00:46:11,750 --> 00:46:18,650
get really really really like saturated

00:46:15,290 --> 00:46:20,660
like full of requests that's awesome and

00:46:18,650 --> 00:46:22,880
I think it's a premier I think this is

00:46:20,660 --> 00:46:30,770
like a Monday commit or something like

00:46:22,880 --> 00:46:34,760
that so yeah okay so I think it's kind

00:46:30,770 --> 00:46:38,780
of most of the things I have for you but

00:46:34,760 --> 00:46:42,580
before finishing let me let's do a recap

00:46:38,780 --> 00:46:45,980
because sometimes I can be messy like

00:46:42,580 --> 00:46:48,490
talking about things so what what we can

00:46:45,980 --> 00:46:51,670
what we can say that East

00:46:48,490 --> 00:46:53,890
leverage in terms of observability not

00:46:51,670 --> 00:46:58,060
security and not traffic management

00:46:53,890 --> 00:47:00,360
those are two different talks it's the

00:46:58,060 --> 00:47:03,310
fourth four golden rules of metrics

00:47:00,360 --> 00:47:05,980
service discovering so you see

00:47:03,310 --> 00:47:09,670
automatically your when you introduce

00:47:05,980 --> 00:47:13,720
one service you see it on this graph you

00:47:09,670 --> 00:47:17,200
see did you see a lot of green light

00:47:13,720 --> 00:47:20,440
green green communication sir health

00:47:17,200 --> 00:47:22,330
communication dashboards meaning that

00:47:20,440 --> 00:47:26,050
you can see all the response times

00:47:22,330 --> 00:47:29,050
operations per second even gruntin in

00:47:26,050 --> 00:47:33,700
real time operations and then security

00:47:29,050 --> 00:47:36,850
status second second pillar here it's a

00:47:33,700 --> 00:47:40,200
distributed dressing we saw that from

00:47:36,850 --> 00:47:43,720
here you can see a sneak peak of the

00:47:40,200 --> 00:47:47,830
distributed tracing and also if you want

00:47:43,720 --> 00:47:52,990
the full information you have access to

00:47:47,830 --> 00:47:55,630
the tiger console and then locks not

00:47:52,990 --> 00:47:59,260
only for application but also for the

00:47:55,630 --> 00:48:02,830
proxies since you introduced it proxies

00:47:59,260 --> 00:48:10,119
in front of every service now you need

00:48:02,830 --> 00:48:12,190
to know what is happening there yes in

00:48:10,119 --> 00:48:14,080
front of the pod sorry if i yeah in

00:48:12,190 --> 00:48:17,080
front of the part it's like every

00:48:14,080 --> 00:48:19,810
container it has every pot has to

00:48:17,080 --> 00:48:23,920
contain the application and then the

00:48:19,810 --> 00:48:27,580
proxy and the proxy is capturing all the

00:48:23,920 --> 00:48:35,140
all the upcoming papers from the service

00:48:27,580 --> 00:48:38,800
and and forwarding it yes so this should

00:48:35,140 --> 00:48:42,910
be so does this one is the Khan the pot

00:48:38,800 --> 00:48:44,090
so one container here and in the same

00:48:42,910 --> 00:48:48,890
pot you

00:48:44,090 --> 00:48:51,840
and that one here is the one sending

00:48:48,890 --> 00:48:54,680
everything necessary to for telemetry

00:48:51,840 --> 00:48:59,030
that when we have the craft and metrics

00:48:54,680 --> 00:49:46,050
this one is also configured by this one

00:48:59,030 --> 00:49:50,460
for ALS and yes the the basic I mean I'm

00:49:46,050 --> 00:49:53,099
going to be I remembered that they will

00:49:50,460 --> 00:49:57,740
before he ollie is to use it like a

00:49:53,099 --> 00:50:00,599
service graph and it was it was based on

00:49:57,740 --> 00:50:04,290
Prometheus telemetry and it was really

00:50:00,599 --> 00:50:07,800
really like how it was thoughts forties

00:50:04,290 --> 00:50:10,140
forty cents per meter so equals e steel

00:50:07,800 --> 00:50:14,070
steel ties and design it all the

00:50:10,140 --> 00:50:15,930
telemetry kind of for for for yeah

00:50:14,070 --> 00:50:18,089
showing the representation of all

00:50:15,930 --> 00:50:20,040
communication so it was pretty

00:50:18,089 --> 00:50:24,900
straightforward and the second thing is

00:50:20,040 --> 00:50:29,300
like sto develop problem is like putting

00:50:24,900 --> 00:50:32,760
a lot of metadata in every matrix so e

00:50:29,300 --> 00:50:35,339
steel is it puts there for example MPLS

00:50:32,760 --> 00:50:38,730
security avoids the status of security

00:50:35,339 --> 00:50:41,670
it puts it it says if it's like insert

00:50:38,730 --> 00:50:44,910
or outside of the cluster and there's a

00:50:41,670 --> 00:50:50,550
lot of metadata there that is really

00:50:44,910 --> 00:50:53,130
useful for for the graph besides that I

00:50:50,550 --> 00:50:56,610
cannot be accurate I wasn't working on

00:50:53,130 --> 00:50:59,180
that area and I might be wrong but more

00:50:56,610 --> 00:51:04,110
or less those are like the highlights

00:50:59,180 --> 00:51:05,970
and I haven't racing and I don't know

00:51:04,110 --> 00:51:08,010
the difference but if you want I think

00:51:05,970 --> 00:51:10,770
at the end and maybe often like offline

00:51:08,010 --> 00:51:12,990
hopefully a lot in blue jeans oh okay

00:51:10,770 --> 00:51:22,320
after the talk we can we can cut a

00:51:12,990 --> 00:51:27,990
couple of you guys and talk about it yes

00:51:22,320 --> 00:51:30,540
I mean kyani shows the traffic as long

00:51:27,990 --> 00:51:34,080
it has the proxy in front and it's part

00:51:30,540 --> 00:51:37,440
of this year right so if it's a part of

00:51:34,080 --> 00:51:44,300
the cluster and outside of East then you

00:51:37,440 --> 00:51:44,300
will see the traffic going out and you

00:51:52,890 --> 00:51:55,960
[Music]

00:52:02,900 --> 00:52:06,059
[Music]

00:52:13,550 --> 00:52:21,210
mean this is like kubernetes it's one

00:52:18,000 --> 00:52:25,380
cluster this one exactly it's Amazon

00:52:21,210 --> 00:52:27,750
okay it's have four nodes right this is

00:52:25,380 --> 00:52:30,720
what one part so kubernetes in others of

00:52:27,750 --> 00:52:32,970
these four notes the second the second

00:52:30,720 --> 00:52:35,210
one if you want to enable this then what

00:52:32,970 --> 00:52:39,560
you do is you have your

00:52:35,210 --> 00:52:42,260
your services deployments right and then

00:52:39,560 --> 00:52:47,140
with east you and open ship service wish

00:52:42,260 --> 00:52:50,690
does it automatically inject another

00:52:47,140 --> 00:52:53,750
container in your deployment so

00:52:50,690 --> 00:53:00,560
automatically when you deploy this you

00:52:53,750 --> 00:53:03,040
have the proxy on the pot just want to

00:53:00,560 --> 00:53:03,040
in control

00:53:05,540 --> 00:53:10,550
yeah it's one name is place is still

00:53:07,670 --> 00:53:17,780
system for example and there's the no

00:53:10,550 --> 00:53:22,280
are probably six seven pots is there any

00:53:17,780 --> 00:53:29,089
I mean performance or yeah how do we

00:53:22,280 --> 00:53:30,710
approximate number that we is depending

00:53:29,089 --> 00:53:33,589
on the scenario and depending on the

00:53:30,710 --> 00:53:36,320
features you are nailing is the one of

00:53:33,589 --> 00:53:38,750
course this is not for for free because

00:53:36,320 --> 00:53:41,990
it's like you you're putting a proxy in

00:53:38,750 --> 00:53:45,260
front of every it's here

00:53:41,990 --> 00:53:51,140
hey thank you very much

00:53:45,260 --> 00:53:52,760
clear compelling East co-operative

00:53:51,140 --> 00:53:56,780
service like they are working really

00:53:52,760 --> 00:54:01,700
really like intense their to reduce this

00:53:56,780 --> 00:54:04,430
latency especially how to approach that

00:54:01,700 --> 00:54:16,640
most of the people start with the

00:54:04,430 --> 00:54:19,910
staging to see farther idea one of the

00:54:16,640 --> 00:54:23,960
ideas is try to try to at least do in

00:54:19,910 --> 00:54:27,740
your in your cluster and not not put the

00:54:23,960 --> 00:54:31,220
proxies to all of your deployments but

00:54:27,740 --> 00:54:31,839
just maybe for two of them see how it

00:54:31,220 --> 00:54:35,060
works

00:54:31,839 --> 00:54:37,760
enable them security enabled everything

00:54:35,060 --> 00:54:41,119
see what you can that you can get off

00:54:37,760 --> 00:54:44,000
traffic management which just like three

00:54:41,119 --> 00:54:47,359
or four of them because if you put if

00:54:44,000 --> 00:54:50,240
you put East deal with no proxies it's

00:54:47,359 --> 00:54:52,760
just having priests East your

00:54:50,240 --> 00:54:54,710
application and that's it the thing is

00:54:52,760 --> 00:54:56,510
when you put the proxies on front of it

00:54:54,710 --> 00:54:58,640
so if you can gradually move from

00:54:56,510 --> 00:55:00,410
non-service mix to service measure

00:54:58,640 --> 00:55:03,290
application and when you feel

00:55:00,410 --> 00:55:05,690
comfortable with three then maybe we go

00:55:03,290 --> 00:55:19,940
with four five six

00:55:05,690 --> 00:55:23,570
I believe yes yes so it's like no no the

00:55:19,940 --> 00:55:26,540
whole name of space but only for the CPC

00:55:23,570 --> 00:55:35,780
t1 rj live into one so it's really kind

00:55:26,540 --> 00:55:37,980
of ok ok ok so thank you very much

00:55:35,780 --> 00:55:39,420
everyone

00:55:37,980 --> 00:55:41,480
[Applause]

00:55:39,420 --> 00:55:41,480

YouTube URL: https://www.youtube.com/watch?v=tkmdCEQrOZM


