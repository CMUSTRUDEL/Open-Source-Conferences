Title: The state of container security - DevConf.CZ 2020
Publication date: 2020-03-25
Playlist: DevConfCZ 2020
Description: 
	Speakers: Daniel Walsh

This session will review the current technology used to secure containers on the host. It will review advances on running containers and cover new technologies being developed to further secure containers.

[ https://sched.co/YOo2 ]

--
Recordings of talks at DevConf are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:00,849 --> 00:00:05,750
so first of all I want to point out

00:00:03,110 --> 00:00:10,160
where a check shirt talking check

00:00:05,750 --> 00:00:12,230
that's my stupid joke so you've all seen

00:00:10,160 --> 00:00:13,550
me present if you come to this before if

00:00:12,230 --> 00:00:14,990
you haven't come first that I like to

00:00:13,550 --> 00:00:17,180
get a little interaction with the

00:00:14,990 --> 00:00:20,530
audience so the first thing I need to do

00:00:17,180 --> 00:00:20,530
is everybody needs to end up

00:00:25,029 --> 00:00:29,580
okay please read out loud all text that

00:00:28,310 --> 00:00:32,880
is in

00:00:29,580 --> 00:00:32,880
[Applause]

00:01:10,990 --> 00:01:21,729
I hope I got the check right there you

00:01:19,570 --> 00:01:23,190
know I hope Google Translate got the

00:01:21,729 --> 00:01:25,570
check right

00:01:23,190 --> 00:01:28,509
okay so we went talking about Goldilocks

00:01:25,570 --> 00:01:30,220
and the three bears okay as a Boston

00:01:28,509 --> 00:01:32,140
accent every time I told people

00:01:30,220 --> 00:01:34,869
Goldilocks and the three bears they

00:01:32,140 --> 00:01:35,830
thought I was pronouncing fears but

00:01:34,869 --> 00:01:40,390
really we're gonna be talking about

00:01:35,830 --> 00:01:44,100
Goldilocks and the three bids okay and

00:01:40,390 --> 00:01:48,640
notice I say it in the same way ah

00:01:44,100 --> 00:01:50,710
hopefully that doesn't stop how many

00:01:48,640 --> 00:01:53,289
people here know the story of Goldie how

00:01:50,710 --> 00:01:55,410
many non-americans and not English know

00:01:53,289 --> 00:01:57,250
the Goldilocks of the three bed story

00:01:55,410 --> 00:02:01,210
okay because that was very so how many

00:01:57,250 --> 00:02:04,600
people don't okay so that ruins my

00:02:01,210 --> 00:02:06,970
entire presentation but so it's a very

00:02:04,600 --> 00:02:09,429
it's a children's story in America and I

00:02:06,970 --> 00:02:10,929
guess in England and I saw England's

00:02:09,429 --> 00:02:16,209
part of Europe at least for two more

00:02:10,929 --> 00:02:18,100
weeks so some Europeans know about it so

00:02:16,209 --> 00:02:20,860
let's uh to give you a quick

00:02:18,100 --> 00:02:23,280
introduction to the story we'll see if

00:02:20,860 --> 00:02:23,280
this will work

00:03:22,660 --> 00:03:25,770
[Music]

00:03:29,810 --> 00:03:32,900
[Music]

00:03:40,640 --> 00:03:44,600
okay we're going in the pencil

00:03:55,450 --> 00:03:59,610
it's worth the fighting online I

00:03:57,040 --> 00:03:59,610
downloaded

00:05:15,590 --> 00:05:19,850
okay I think you got the base clue

00:05:20,390 --> 00:05:27,030
so the basic idea is in in America and

00:05:25,230 --> 00:05:30,150
English now they talk about the

00:05:27,030 --> 00:05:32,400
Goldilocks planet for instance so a

00:05:30,150 --> 00:05:34,680
Goldilocks planet is a planet that is

00:05:32,400 --> 00:05:36,360
close enough to the Sun but not too

00:05:34,680 --> 00:05:38,400
close so it doesn't get too hot and fire

00:05:36,360 --> 00:05:39,930
enough for what yeah I'm not too big so

00:05:38,400 --> 00:05:42,360
they call it the Goldilocks planet the

00:05:39,930 --> 00:05:45,990
basic idea is the Goldilocks is sort of

00:05:42,360 --> 00:05:51,030
the perfect not too hard not too soft

00:05:45,990 --> 00:05:52,560
right the middle ground so you know we

00:05:51,030 --> 00:05:54,540
have the three bears we have the two had

00:05:52,560 --> 00:05:56,010
bear we have the two soft bear and then

00:05:54,540 --> 00:05:59,580
we have the baby bear who tends to be

00:05:56,010 --> 00:06:01,940
just right so what's this got to do with

00:05:59,580 --> 00:06:04,590
security well I'm going to talking about

00:06:01,940 --> 00:06:06,330
security here most of the security that

00:06:04,590 --> 00:06:08,730
we have in containers I would say is

00:06:06,330 --> 00:06:12,000
Goldilocks right it's just right it's

00:06:08,730 --> 00:06:13,740
sort of in the middle but the problem

00:06:12,000 --> 00:06:14,520
with that so it will be covering that

00:06:13,740 --> 00:06:18,330
and I'll be going through different

00:06:14,520 --> 00:06:20,790
topics about security but I would like

00:06:18,330 --> 00:06:23,610
to crank up the security if I get to get

00:06:20,790 --> 00:06:24,600
more secure in the systems and we have

00:06:23,610 --> 00:06:26,850
all the tools to do it

00:06:24,600 --> 00:06:29,070
the problem is how many people here ever

00:06:26,850 --> 00:06:34,170
turn up the security how many people in

00:06:29,070 --> 00:06:38,130
here have ever done cap drop okay I see

00:06:34,170 --> 00:06:43,130
three or four liars in the crowd okay

00:06:38,130 --> 00:06:45,630
how many people do this from privileged

00:06:43,130 --> 00:06:46,860
okay a lot more people telling the truth

00:06:45,630 --> 00:06:49,290
but there's a lot of people who didn't

00:06:46,860 --> 00:06:51,690
raise their hands who are lying okay so

00:06:49,290 --> 00:06:55,730
basically you know how many people do

00:06:51,690 --> 00:06:55,730
this not me

00:06:55,949 --> 00:07:02,590
so so the basic I mean most times people

00:07:00,669 --> 00:07:03,970
are you know my applications more

00:07:02,590 --> 00:07:05,590
important than security right that's the

00:07:03,970 --> 00:07:07,690
way they think so the most of time

00:07:05,590 --> 00:07:10,419
they're turning down security so if all

00:07:07,690 --> 00:07:12,250
of our Security's Goldilocks how can I

00:07:10,419 --> 00:07:14,580
get better than Goldilocks all right how

00:07:12,250 --> 00:07:17,819
can I go from Goldilocks to pop a bit

00:07:14,580 --> 00:07:20,169
right how do I move people over to that

00:07:17,819 --> 00:07:23,380
and that's where we're going to be

00:07:20,169 --> 00:07:26,259
looking at today and in this talk okay

00:07:23,380 --> 00:07:27,970
so first of all you might have if you

00:07:26,259 --> 00:07:30,520
follow me on Twitter or stop by Gregg I

00:07:27,970 --> 00:07:32,889
went a lot against the big fat demon and

00:07:30,520 --> 00:07:35,740
I got explained one of the things we've

00:07:32,889 --> 00:07:37,210
done to make move towards the pop of

00:07:35,740 --> 00:07:40,330
beer for the big fat demon the problem

00:07:37,210 --> 00:07:42,729
with a big fat demon is if every manner

00:07:40,330 --> 00:07:44,979
of interacting with containers goes

00:07:42,729 --> 00:07:46,300
through one route running demon then you

00:07:44,979 --> 00:07:49,150
get the least common denominator

00:07:46,300 --> 00:07:50,889
security okay so the basic idea if

00:07:49,150 --> 00:07:52,180
you're doing in my opinion when you're

00:07:50,889 --> 00:07:54,310
running containers in production say

00:07:52,180 --> 00:07:55,990
underneath kubernetes you have one set

00:07:54,310 --> 00:07:57,759
of security goals when I'm building

00:07:55,990 --> 00:07:59,199
containers or building container images

00:07:57,759 --> 00:08:01,360
I might have a different set of security

00:07:59,199 --> 00:08:03,310
goals if I'm running and playing with

00:08:01,360 --> 00:08:06,849
containers I have a yet a third security

00:08:03,310 --> 00:08:08,530
go so let's look at you know so that's

00:08:06,849 --> 00:08:10,659
really what we were doing when we

00:08:08,530 --> 00:08:13,300
created the set of products cryopod

00:08:10,659 --> 00:08:14,919
mantas copia land builder cryo again is

00:08:13,300 --> 00:08:17,259
built running containers in production

00:08:14,919 --> 00:08:19,330
right you don't want limited privileges

00:08:17,259 --> 00:08:20,889
you don't want people just going in and

00:08:19,330 --> 00:08:22,690
and fooling around in your kubernetes

00:08:20,889 --> 00:08:25,270
environment quad means four playing

00:08:22,690 --> 00:08:27,880
containers you know experimenting

00:08:25,270 --> 00:08:29,259
designing containers scope EO is really

00:08:27,880 --> 00:08:30,520
just about moving container images

00:08:29,259 --> 00:08:32,409
around right it just moves them around

00:08:30,520 --> 00:08:34,060
the environment and then builder is all

00:08:32,409 --> 00:08:38,680
about building katanas each one of those

00:08:34,060 --> 00:08:41,110
has different security goals so quickly

00:08:38,680 --> 00:08:42,279
let's look at container images so

00:08:41,110 --> 00:08:44,740
everything since of the container

00:08:42,279 --> 00:08:47,140
registry that's container image and in

00:08:44,740 --> 00:08:49,630
and in the container image is really

00:08:47,140 --> 00:08:52,029
where the developer defines what is

00:08:49,630 --> 00:08:54,279
application is so to think about it when

00:08:52,029 --> 00:08:56,200
I'm designing a container image I am

00:08:54,279 --> 00:08:58,779
putting in all of the knowledge I have

00:08:56,200 --> 00:09:01,630
about how I want my application to run

00:08:58,779 --> 00:09:03,730
so in an OC I image format this is a

00:09:01,630 --> 00:09:06,100
table all that includes the image so

00:09:03,730 --> 00:09:08,199
basically it's a route efest tied up and

00:09:06,100 --> 00:09:08,560
then this is JSON file associated with

00:09:08,199 --> 00:09:11,620
it

00:09:08,560 --> 00:09:12,970
JSON file usually says things like you

00:09:11,620 --> 00:09:14,440
know what is the entry point where the

00:09:12,970 --> 00:09:16,210
environmental barrels what's the

00:09:14,440 --> 00:09:17,770
executable I expect you what is the

00:09:16,210 --> 00:09:19,779
working directory and then it has a

00:09:17,770 --> 00:09:21,250
bunch of labels and some other fields

00:09:19,779 --> 00:09:23,170
with it but basically that's where the

00:09:21,250 --> 00:09:25,390
developers defines what he wants to do

00:09:23,170 --> 00:09:26,470
when he wants to run a container so if

00:09:25,390 --> 00:09:28,300
I'm going to run a container the

00:09:26,470 --> 00:09:30,760
developer has some input it's me running

00:09:28,300 --> 00:09:32,650
the container the next thing that has

00:09:30,760 --> 00:09:35,080
input into running a container is the

00:09:32,650 --> 00:09:38,200
container engine okay and the container

00:09:35,080 --> 00:09:40,390
engine has hide coded constants into it

00:09:38,200 --> 00:09:42,790
right basically it decides things like

00:09:40,390 --> 00:09:44,920
what SELinux label what are the C groups

00:09:42,790 --> 00:09:46,870
what are the namespaces all that stuff

00:09:44,920 --> 00:09:49,240
is hard-coded into the container engine

00:09:46,870 --> 00:09:51,279
that you're gonna run against okay it's

00:09:49,240 --> 00:09:53,320
so that basically has the input and how

00:09:51,279 --> 00:09:54,820
do you want to container the last thing

00:09:53,320 --> 00:09:57,370
that has input into running containers

00:09:54,820 --> 00:10:00,040
is the human beings that are launching

00:09:57,370 --> 00:10:02,560
the containers or an orchestrated like

00:10:00,040 --> 00:10:05,500
kubernetes right so basically when I

00:10:02,560 --> 00:10:07,210
want to run a container you know I'm

00:10:05,500 --> 00:10:08,980
gonna specify I need these additional

00:10:07,210 --> 00:10:10,480
volumes and then it's going to take the

00:10:08,980 --> 00:10:12,790
container engines the hard-coded

00:10:10,480 --> 00:10:14,050
constants in the container engine some

00:10:12,790 --> 00:10:17,020
lows together and that's going to take

00:10:14,050 --> 00:10:18,460
what the developers thoughts of the

00:10:17,020 --> 00:10:19,930
image that I'm loading and it basically

00:10:18,460 --> 00:10:22,150
combines all three of those things

00:10:19,930 --> 00:10:24,610
together and creates a JSON file that

00:10:22,150 --> 00:10:27,550
JSON files called the OC OC I runtime

00:10:24,610 --> 00:10:29,710
specification so when a container engine

00:10:27,550 --> 00:10:31,600
launches a container it writes out this

00:10:29,710 --> 00:10:34,600
OC I which is a combination of three

00:10:31,600 --> 00:10:37,720
inputs and then launches a OC I runtime

00:10:34,600 --> 00:10:40,690
like run C or C run or cotta containers

00:10:37,720 --> 00:10:42,310
or G visor and that launches it but we

00:10:40,690 --> 00:10:44,290
go back here if there's only one

00:10:42,310 --> 00:10:46,810
container engine then you only have one

00:10:44,290 --> 00:10:48,730
way of hard-coded constants and so if we

00:10:46,810 --> 00:10:50,770
basically look at the other container

00:10:48,730 --> 00:10:53,020
engines now I can have different

00:10:50,770 --> 00:10:55,660
constants in the environment so by doing

00:10:53,020 --> 00:10:57,940
this by you know basically making trial

00:10:55,660 --> 00:11:00,700
sort of separate I can put different

00:10:57,940 --> 00:11:02,230
hard-coded constants into cryo enforce

00:11:00,700 --> 00:11:04,180
your little closer to the pop-up a

00:11:02,230 --> 00:11:06,279
moment and that's really what the goal

00:11:04,180 --> 00:11:09,400
here is with doing this so let's look at

00:11:06,279 --> 00:11:14,709
look further into this so I wrote a blog

00:11:09,400 --> 00:11:17,440
I don't know how basically a few years

00:11:14,709 --> 00:11:18,760
ago call just say no to root okay how

00:11:17,440 --> 00:11:20,020
many people here run root running

00:11:18,760 --> 00:11:25,220
containers

00:11:20,020 --> 00:11:26,690
okay in the rest of you lyin so most

00:11:25,220 --> 00:11:28,910
containers in the world don't need any

00:11:26,690 --> 00:11:30,650
you don't need to be running as root if

00:11:28,910 --> 00:11:32,600
you think about it you know really the

00:11:30,650 --> 00:11:34,730
only ones that need to run is root our

00:11:32,600 --> 00:11:37,040
applications that are modifying the

00:11:34,730 --> 00:11:38,300
kernel right really if you're an

00:11:37,040 --> 00:11:39,710
administrative tool you have to run

00:11:38,300 --> 00:11:41,090
those fruit but almost every other

00:11:39,710 --> 00:11:44,510
application in the world will run it

00:11:41,090 --> 00:11:46,670
around without root but because of the

00:11:44,510 --> 00:11:48,260
way we install software and develop

00:11:46,670 --> 00:11:49,550
software we actually give you the

00:11:48,260 --> 00:11:52,670
impression that you have to run it right

00:11:49,550 --> 00:11:55,040
Red Hat is Fedora and Debbie and

00:11:52,670 --> 00:11:57,530
everybody built packages that goes into

00:11:55,040 --> 00:11:59,630
containers as if they were going to be

00:11:57,530 --> 00:12:01,610
amps so the assumptions built in that

00:11:59,630 --> 00:12:03,650
application status root and then drop

00:12:01,610 --> 00:12:06,430
privileges but basically you can turn

00:12:03,650 --> 00:12:09,860
that on on head and not have to do that

00:12:06,430 --> 00:12:13,010
the problem here is some applications do

00:12:09,860 --> 00:12:15,710
run as root and when they run as root

00:12:13,010 --> 00:12:17,900
one of the core technologies of Linux

00:12:15,710 --> 00:12:20,240
that we use to protect root is by

00:12:17,900 --> 00:12:23,030
subdividing the power root into

00:12:20,240 --> 00:12:24,470
capabilities so right now when you run

00:12:23,030 --> 00:12:26,750
containers that the fall way you run

00:12:24,470 --> 00:12:29,840
containers on your system if you're

00:12:26,750 --> 00:12:32,630
running is root you were using 14 out of

00:12:29,840 --> 00:12:36,680
the 37 Linux capabilities so these

00:12:32,630 --> 00:12:38,300
things like set UID set GID so you can

00:12:36,680 --> 00:12:40,730
change you IDs inside of the container

00:12:38,300 --> 00:12:43,490
kill so you can kill processes of all

00:12:40,730 --> 00:12:45,470
the containers but anyways so these were

00:12:43,490 --> 00:12:48,710
originally defined by the upstream

00:12:45,470 --> 00:12:53,660
doctor project these 14 capabilities and

00:12:48,710 --> 00:12:54,980
how many people here could name 14 okay

00:12:53,660 --> 00:12:58,610
that's because it's hard-coded into the

00:12:54,980 --> 00:13:00,440
doc I'm gonna show you what they are so

00:12:58,610 --> 00:13:02,420
these are the 14 capabilities that

00:13:00,440 --> 00:13:04,550
everybody that runs containers whether

00:13:02,420 --> 00:13:07,370
with pod man or darker is getting by

00:13:04,550 --> 00:13:12,020
default so let's look at a little

00:13:07,370 --> 00:13:16,040
history here lot it right this when you

00:13:12,020 --> 00:13:20,450
log into a system the login program

00:13:16,040 --> 00:13:23,660
writes a file called by log and my

00:13:20,450 --> 00:13:25,310
practice log in the UID logging UID then

00:13:23,660 --> 00:13:27,440
records the UID that you logged in the

00:13:25,310 --> 00:13:30,170
system every process you start from that

00:13:27,440 --> 00:13:32,290
point on goes it in order to do that you

00:13:30,170 --> 00:13:34,269
need on it right

00:13:32,290 --> 00:13:36,579
how many people think that you should

00:13:34,269 --> 00:13:40,239
have get containers writing to the audit

00:13:36,579 --> 00:13:42,790
system to say users doing something so

00:13:40,239 --> 00:13:44,229
why is that capability on by default the

00:13:42,790 --> 00:13:46,929
reason that capability is on by default

00:13:44,229 --> 00:13:49,689
is eight years ago when docker first

00:13:46,929 --> 00:13:53,109
outed everybody thought that containers

00:13:49,689 --> 00:13:56,889
were VMs so they put SSH daemon into the

00:13:53,109 --> 00:13:59,049
containers and when SSH daemon does what

00:13:56,889 --> 00:14:01,569
when you log in if you SSH into your

00:13:59,049 --> 00:14:04,149
container the container attempts to

00:14:01,569 --> 00:14:08,529
write to the auditing to that but you

00:14:04,149 --> 00:14:11,169
know that's /proc slash syslog in UID

00:14:08,529 --> 00:14:15,699
and that requires a lot about it right

00:14:11,169 --> 00:14:16,660
SSH daemon blew up and everybody said

00:14:15,699 --> 00:14:19,239
this sucks

00:14:16,660 --> 00:14:21,850
I can't log into my container so at that

00:14:19,239 --> 00:14:24,879
point somebody upstream said we'll just

00:14:21,850 --> 00:14:27,129
give out it right by default how many

00:14:24,879 --> 00:14:30,639
people here run SSH daemon inside of

00:14:27,129 --> 00:14:34,119
their containers now very few okay I

00:14:30,639 --> 00:14:36,579
would say no one should but right but

00:14:34,119 --> 00:14:40,509
here we are eight years later and we've

00:14:36,579 --> 00:14:42,309
never taken that away make note when I

00:14:40,509 --> 00:14:44,109
run a container with make node that

00:14:42,309 --> 00:14:45,489
means I can create device nodes in it

00:14:44,109 --> 00:14:47,559
that's a capability that allows me to

00:14:45,489 --> 00:14:49,449
create device notes almost oh

00:14:47,559 --> 00:14:51,220
application in the world creates device

00:14:49,449 --> 00:14:52,809
nodes device nodes when you run a

00:14:51,220 --> 00:14:55,149
container or automatically created for

00:14:52,809 --> 00:14:56,980
you but we allow make node you know what

00:14:55,149 --> 00:14:58,959
the history of that is there was in a

00:14:56,980 --> 00:15:01,539
bunch of package that when you installed

00:14:58,959 --> 00:15:04,079
want to sent into docker

00:15:01,539 --> 00:15:07,119
it would go out and create a device node

00:15:04,079 --> 00:15:08,980
when you're doing an RPM what app gets

00:15:07,119 --> 00:15:11,589
it would install and create a device

00:15:08,980 --> 00:15:13,509
note it blew up so somebody said it's a

00:15:11,589 --> 00:15:15,100
good idea to do make note now make note

00:15:13,509 --> 00:15:17,169
is protected by other other capabilities

00:15:15,100 --> 00:15:20,199
and stuff but I think we should just get

00:15:17,169 --> 00:15:22,149
rid of it altogether out of it sister o

00:15:20,199 --> 00:15:24,249
sister uu it allows you to create and

00:15:22,149 --> 00:15:25,989
shoot for running an application inside

00:15:24,249 --> 00:15:28,449
of it but if you're in a container

00:15:25,989 --> 00:15:29,949
you're already in at root so the only

00:15:28,449 --> 00:15:31,809
reason I can think of this one coming on

00:15:29,949 --> 00:15:34,359
is because somebody installed bind to

00:15:31,809 --> 00:15:36,009
root inside of a container and it blew

00:15:34,359 --> 00:15:38,769
up so someone said we'll just allow that

00:15:36,009 --> 00:15:40,299
so these are the reasons the only

00:15:38,769 --> 00:15:42,639
reasons I can think of that these are

00:15:40,299 --> 00:15:44,769
allowed by default so the last one is

00:15:42,639 --> 00:15:45,769
net raw and this is probably the most

00:15:44,769 --> 00:15:49,730
dangerous one

00:15:45,769 --> 00:15:53,629
it allows you to create a I see it will

00:15:49,730 --> 00:15:55,910
grate a packet on any kind of TCP or IP

00:15:53,629 --> 00:15:58,579
packet and send it out on your virtual

00:15:55,910 --> 00:16:00,379
private network it has been shown a

00:15:58,579 --> 00:16:03,110
couple of times to break out a virtual

00:16:00,379 --> 00:16:05,720
private so all these people providing

00:16:03,110 --> 00:16:07,939
VPNs well if I am able to format a

00:16:05,720 --> 00:16:09,619
certain packet and send it on the wire I

00:16:07,939 --> 00:16:12,350
might be able to get to the host network

00:16:09,619 --> 00:16:18,439
instead of being inside of a VPN why do

00:16:12,350 --> 00:16:21,259
we allow that Rob by default for ping ok

00:16:18,439 --> 00:16:23,119
ping creates an ICMP pack and has to

00:16:21,259 --> 00:16:24,889
send it on the network so by the file

00:16:23,119 --> 00:16:29,480
were you allowing this really cheered

00:16:24,889 --> 00:16:32,529
dangerous capability in the system and

00:16:29,480 --> 00:16:32,529
I'm going to show you what you can do

00:16:47,620 --> 00:16:51,220
okay so this is gonna be a demonstration

00:16:49,330 --> 00:16:52,600
of dropping capabilities there well

00:16:51,220 --> 00:16:54,310
dropping capabilities prevents the ping

00:16:52,600 --> 00:16:56,200
command from working and this is a

00:16:54,310 --> 00:16:57,700
demonstration to show that so here we

00:16:56,200 --> 00:16:59,200
are we're just running a container a pre

00:16:57,700 --> 00:17:01,480
created a container that just has the

00:16:59,200 --> 00:17:03,730
ping package in it and it goes off and

00:17:01,480 --> 00:17:05,830
it sends pings beautiful right that's

00:17:03,730 --> 00:17:07,480
using default capabilities but now I'm

00:17:05,830 --> 00:17:09,970
going to do the cap drop so I'm actually

00:17:07,480 --> 00:17:11,890
going to drop cat net raw and I'm gonna

00:17:09,970 --> 00:17:13,560
send a ping and it gets blocked

00:17:11,890 --> 00:17:17,130
operation not supported

00:17:13,560 --> 00:17:19,960
okay that's because I drop that rock

00:17:17,130 --> 00:17:22,260
there's a sysctl on linux that's been

00:17:19,960 --> 00:17:25,390
there for years and years called net

00:17:22,260 --> 00:17:27,040
ipv4 a ping route group range and what

00:17:25,390 --> 00:17:30,370
this says is anybody that's in group

00:17:27,040 --> 00:17:32,530
zero to group 1,000 you can pick you can

00:17:30,370 --> 00:17:34,990
pick you know 4 billion if you want is

00:17:32,530 --> 00:17:37,480
allowed to send create ICMP packets and

00:17:34,990 --> 00:17:39,940
send them out in the network so if I run

00:17:37,480 --> 00:17:42,940
a container with that simple flag in it

00:17:39,940 --> 00:17:45,070
I can send ping packets and now I don't

00:17:42,940 --> 00:17:47,200
need net broth so I can trade just an

00:17:45,070 --> 00:17:50,080
ICMP packet and send it out which is

00:17:47,200 --> 00:17:52,390
really all the ping needs to be able to

00:17:50,080 --> 00:17:55,600
do it so why don't we turn that on by

00:17:52,390 --> 00:17:57,760
default all right that didn't modify the

00:17:55,600 --> 00:17:59,260
host operating system that just modified

00:17:57,760 --> 00:18:01,000
the network name space inside of the

00:17:59,260 --> 00:18:02,680
container should do that so it did it

00:18:01,000 --> 00:18:11,590
had no effect on the host network at all

00:18:02,680 --> 00:18:14,230
it just did inside the container so a

00:18:11,590 --> 00:18:17,050
new idea that I've been we've been

00:18:14,230 --> 00:18:19,960
talking about this past week and

00:18:17,050 --> 00:18:21,910
basically allow unlimited why don't we

00:18:19,960 --> 00:18:23,590
allow the images the developer to

00:18:21,910 --> 00:18:27,190
specify what capabilities this

00:18:23,590 --> 00:18:29,080
application needs right if I come out

00:18:27,190 --> 00:18:31,690
with an application I say you know all I

00:18:29,080 --> 00:18:34,870
need is to change my UID so all I need

00:18:31,690 --> 00:18:36,760
to set UID and said GID so if I could

00:18:34,870 --> 00:18:39,340
specify that as a label in the container

00:18:36,760 --> 00:18:41,440
image as the developer then we could

00:18:39,340 --> 00:18:43,510
basically have the container engines

00:18:41,440 --> 00:18:45,730
look at what is the fall capabilities

00:18:43,510 --> 00:18:48,160
that's going to run with it check out

00:18:45,730 --> 00:18:50,380
the you know ones of the you admins

00:18:48,160 --> 00:18:52,260
specified if it's a subsection than the

00:18:50,380 --> 00:18:55,180
container engine should just allow that

00:18:52,260 --> 00:18:56,830
right so we could begin to specify in

00:18:55,180 --> 00:18:58,780
the container engine developer right

00:18:56,830 --> 00:19:00,550
this users never turn up security

00:18:58,780 --> 00:19:01,930
but hopefully developers understand

00:19:00,550 --> 00:19:03,910
their applications is supposed to work

00:19:01,930 --> 00:19:05,980
and if they could specify in their

00:19:03,910 --> 00:19:07,660
container images that and then we could

00:19:05,980 --> 00:19:09,760
basically have the container engines

00:19:07,660 --> 00:19:11,980
interpret that and say hey this

00:19:09,760 --> 00:19:14,020
application doesn't need the 14 it only

00:19:11,980 --> 00:19:16,060
needs these two now if he specify the

00:19:14,020 --> 00:19:17,830
capability that's not available if he

00:19:16,060 --> 00:19:20,500
was trying to move to the mamabear side

00:19:17,830 --> 00:19:22,270
of the equation then the application

00:19:20,500 --> 00:19:24,630
that the you know the user might need to

00:19:22,270 --> 00:19:27,370
override it or we might need to you know

00:19:24,630 --> 00:19:29,590
somehow say we have trusted images and

00:19:27,370 --> 00:19:31,180
so therefore we allow it but out of the

00:19:29,590 --> 00:19:33,490
box we could do this right now because

00:19:31,180 --> 00:19:37,510
we're increasing the security in the

00:19:33,490 --> 00:19:39,550
system so SELinux protected right

00:19:37,510 --> 00:19:41,590
SELinux is the number one tool that is

00:19:39,550 --> 00:19:44,440
basically thwarted almost every single

00:19:41,590 --> 00:19:46,180
exploit that's broken out of darker so

00:19:44,440 --> 00:19:47,800
it's using you know process types we

00:19:46,180 --> 00:19:51,160
controlled the breakout basically

00:19:47,800 --> 00:19:53,290
protects the filesystem so selinux I'd

00:19:51,160 --> 00:19:56,170
like to say selinux is is basically what

00:19:53,290 --> 00:19:58,060
happens in Vegas stays in Vegas and what

00:19:56,170 --> 00:19:59,200
I mean by that is all we're doing inside

00:19:58,060 --> 00:20:01,030
of the container was missing you can do

00:19:59,200 --> 00:20:03,160
anything you want in the container if

00:20:01,030 --> 00:20:05,320
you try to leave the container we're

00:20:03,160 --> 00:20:05,860
gonna block you but inside of the

00:20:05,320 --> 00:20:07,690
container

00:20:05,860 --> 00:20:09,100
we're not blocking anything we're not

00:20:07,690 --> 00:20:11,020
blocking access to the network

00:20:09,100 --> 00:20:13,120
we're not blocking access to any of the

00:20:11,020 --> 00:20:17,560
capabilities you know the goal here is

00:20:13,120 --> 00:20:19,630
to allow selinux is to you again prevent

00:20:17,560 --> 00:20:20,830
break out but we're allowing the

00:20:19,630 --> 00:20:22,360
capabilities because we're saying

00:20:20,830 --> 00:20:24,040
another part of the kernel like linux

00:20:22,360 --> 00:20:25,870
capabilities that i just showed you are

00:20:24,040 --> 00:20:28,030
controlling capabilities the problem is

00:20:25,870 --> 00:20:30,220
that the linux is not flexible enough to

00:20:28,030 --> 00:20:31,960
be able to do a cap drop in the cap ad

00:20:30,220 --> 00:20:33,850
right you have to generate different

00:20:31,960 --> 00:20:35,980
policies and different types so out of

00:20:33,850 --> 00:20:37,570
the box we allow it filly loose inside

00:20:35,980 --> 00:20:39,910
of the container but it's when the

00:20:37,570 --> 00:20:44,650
container tries to break out that you're

00:20:39,910 --> 00:20:47,400
protected so the problem with that see

00:20:44,650 --> 00:20:49,810
Linux in containers is usually volumes

00:20:47,400 --> 00:20:52,360
anybody anybody just runs containers

00:20:49,810 --> 00:20:54,190
with selinux it works perfectly until

00:20:52,360 --> 00:20:56,260
you stick a volume into a container and

00:20:54,190 --> 00:20:57,700
when you stick a volume amounts of

00:20:56,260 --> 00:20:59,830
volume into a container you're basically

00:20:57,700 --> 00:21:01,180
taking labels from the hosts in putting

00:20:59,830 --> 00:21:03,130
them into the container and the

00:21:01,180 --> 00:21:04,690
container cannot interact labels from

00:21:03,130 --> 00:21:06,700
the host right that's the whole idea of

00:21:04,690 --> 00:21:08,320
the protection so what we have to do is

00:21:06,700 --> 00:21:11,470
you have to real able the labels on the

00:21:08,320 --> 00:21:14,309
host so this if you use the lowercase Z

00:21:11,470 --> 00:21:16,320
in the uppercase Z on the volume mount

00:21:14,309 --> 00:21:18,119
the tool will go out and we label the

00:21:16,320 --> 00:21:20,759
content so if you're doing you know

00:21:18,119 --> 00:21:23,849
Padma and run vile ID be on a mouth and

00:21:20,759 --> 00:21:24,809
I'm Maria DB you could do : Z and

00:21:23,849 --> 00:21:28,080
everybody's happy

00:21:24,809 --> 00:21:31,349
the problem is in certain times you want

00:21:28,080 --> 00:21:33,779
to run containers that take huge system

00:21:31,349 --> 00:21:36,659
directories and put them into a

00:21:33,779 --> 00:21:39,719
container so like flu Andy wants to read

00:21:36,659 --> 00:21:42,149
all the logs logs on the system if I do

00:21:39,719 --> 00:21:43,950
that with SELinux and tell it to real

00:21:42,149 --> 00:21:45,869
Abel all of a sudden every tool that

00:21:43,950 --> 00:21:48,509
needs to write those logs is going to

00:21:45,869 --> 00:21:50,549
blow up so anybody that's ever tried is

00:21:48,509 --> 00:21:52,710
right we actually have code and darker

00:21:50,549 --> 00:21:55,469
and Padma and to try to protect you from

00:21:52,710 --> 00:21:58,830
doing that right to block the : Z in

00:21:55,469 --> 00:22:03,269
that case so what's the only option you

00:21:58,830 --> 00:22:06,629
have if that happens the option is turn

00:22:03,269 --> 00:22:08,879
selinux enforcement off all right policy

00:22:06,629 --> 00:22:12,029
and the problem is almost no in this

00:22:08,879 --> 00:22:13,979
room is is gonna write policy so almost

00:22:12,029 --> 00:22:16,619
everybody is set in for Sierra least

00:22:13,979 --> 00:22:19,679
7404 container which is security off

00:22:16,619 --> 00:22:22,679
label equals disabled so there's a

00:22:19,679 --> 00:22:24,089
project going on called you DISA I hope

00:22:22,679 --> 00:22:27,950
I pronounced that right for my Czech

00:22:24,089 --> 00:22:31,049
friends here we would call it Utica

00:22:27,950 --> 00:22:34,019
basically what you da n means in Slovak

00:22:31,049 --> 00:22:36,749
is fishing : the idea here is is to

00:22:34,019 --> 00:22:38,369
teach a person to fish he eats for life

00:22:36,749 --> 00:22:40,559
if you teach them you know give them a

00:22:38,369 --> 00:22:42,869
fish he eats one meal but basically the

00:22:40,559 --> 00:22:45,509
idea is to help them build policy for

00:22:42,869 --> 00:22:47,669
your container so with what you DISA

00:22:45,509 --> 00:22:48,779
does is it examines a pot so you create

00:22:47,669 --> 00:22:49,919
your container like the fluid D

00:22:48,779 --> 00:22:53,070
container that I just created

00:22:49,919 --> 00:22:55,109
and you basically have you look at the

00:22:53,070 --> 00:22:57,839
volume and I can generate policy based

00:22:55,109 --> 00:22:59,159
off it there's a talk Sunday morning

00:22:57,839 --> 00:23:02,549
that's going to go heavily into you

00:22:59,159 --> 00:23:05,609
dieter and explaining how it works and

00:23:02,549 --> 00:23:07,830
what in this case with you DISA we can

00:23:05,609 --> 00:23:09,179
take things like flu and D and move them

00:23:07,830 --> 00:23:12,570
towards mom a bit right make you a

00:23:09,179 --> 00:23:14,039
little less secure on your system but

00:23:12,570 --> 00:23:16,080
not make you have to go all the way to

00:23:14,039 --> 00:23:19,589
disabling SELinux for the container

00:23:16,080 --> 00:23:21,599
separation right your DITA also has the

00:23:19,589 --> 00:23:22,830
feature that it can actually examine

00:23:21,599 --> 00:23:23,970
your container and say hey this

00:23:22,830 --> 00:23:26,429
container is only going to use these

00:23:23,970 --> 00:23:27,810
capabilities and then turn off from an

00:23:26,429 --> 00:23:29,610
se Linux point of view of the rest

00:23:27,810 --> 00:23:31,410
bullies it also been looking network

00:23:29,610 --> 00:23:33,240
forts you can tighten them up so you can

00:23:31,410 --> 00:23:37,350
move a little bit towards Papa Bear for

00:23:33,240 --> 00:23:39,240
that container so let's look at the next

00:23:37,350 --> 00:23:39,870
one limiting the communications of the

00:23:39,240 --> 00:23:43,440
colonel

00:23:39,870 --> 00:23:45,750
so seccomp processes communicating via

00:23:43,440 --> 00:23:48,660
current colonel sis calls so what

00:23:45,750 --> 00:23:50,220
seccomp does SELinux basically prevents

00:23:48,660 --> 00:23:50,910
you from interacting with files on the

00:23:50,220 --> 00:23:52,710
file system

00:23:50,910 --> 00:23:54,840
what seccomp does is actually prevents

00:23:52,710 --> 00:23:57,210
you from interacting with the colonel

00:23:54,840 --> 00:23:59,210
certain sis khalsa blocks so on a

00:23:57,210 --> 00:24:01,590
standard linux system is I guess it's

00:23:59,210 --> 00:24:03,900
456 calls I looked this up last night

00:24:01,590 --> 00:24:06,060
around 456 calls there's actually a

00:24:03,900 --> 00:24:09,120
whole bunch more than that on the next

00:24:06,060 --> 00:24:11,520
86 64 box right because there's 32-bit

00:24:09,120 --> 00:24:13,320
code so all the 32-bit I don't know if

00:24:11,520 --> 00:24:15,000
there's another 450 but basically it's

00:24:13,320 --> 00:24:17,610
almost twice as many sis calls when you

00:24:15,000 --> 00:24:20,760
have a x86 box was that supports 32-bit

00:24:17,610 --> 00:24:23,130
code so when I put a container into a

00:24:20,760 --> 00:24:26,760
set comm filter if I add a second filter

00:24:23,130 --> 00:24:28,740
to it I can drop the syscalls down quite

00:24:26,760 --> 00:24:31,320
a bit I can eliminate the 32 bits this

00:24:28,740 --> 00:24:33,330
calls and right here if we look at this

00:24:31,320 --> 00:24:36,150
default set comp file that everybody use

00:24:33,330 --> 00:24:41,820
in the world is about 300 syscall still

00:24:36,150 --> 00:24:47,520
allowed other so if you go from 900 to

00:24:41,820 --> 00:24:50,070
300 that's pretty good right but can we

00:24:47,520 --> 00:24:53,040
do better but everybody in the world

00:24:50,070 --> 00:24:55,110
runs the exact same second file nobody

00:24:53,040 --> 00:24:56,790
changes that and it's difficult to

00:24:55,110 --> 00:24:59,610
figure out you know what's this cost is

00:24:56,790 --> 00:25:03,720
my container need so how can we do

00:24:59,610 --> 00:25:05,730
better than than the 300 so Valentin

00:25:03,720 --> 00:25:07,740
Rothberg who since this room somewhere I

00:25:05,730 --> 00:25:09,360
wrote a blog describing someone's

00:25:07,740 --> 00:25:11,670
technology but he did some investigation

00:25:09,360 --> 00:25:14,130
and he found an article by aqua sack

00:25:11,670 --> 00:25:16,980
that saying that most containers only

00:25:14,130 --> 00:25:19,890
require 40 to 70 syscalls

00:25:16,980 --> 00:25:21,750
I find that a little hard to believe but

00:25:19,890 --> 00:25:24,780
you know if we're allowing 300 and we

00:25:21,750 --> 00:25:27,270
only need 70 we could be a lot more

00:25:24,780 --> 00:25:29,220
secure if we could get basically figure

00:25:27,270 --> 00:25:30,990
out which this calls a container needed

00:25:29,220 --> 00:25:36,270
and be able to get down to that lower

00:25:30,990 --> 00:25:38,130
number so last time we had a google

00:25:36,270 --> 00:25:40,740
Summer of Code student in here and we

00:25:38,130 --> 00:25:41,280
wanted to use BPF to figure out which

00:25:40,740 --> 00:25:43,800
Cisco

00:25:41,280 --> 00:25:45,480
the container is running okay and we

00:25:43,800 --> 00:25:49,320
created this thing called the OCI CEQA

00:25:45,480 --> 00:25:51,270
set comp EPF whoa and what it does is it

00:25:49,320 --> 00:25:52,890
basically watches the container with BPF

00:25:51,270 --> 00:25:54,960
every time it makes the syscall it

00:25:52,890 --> 00:25:57,120
writes it up to a file all right pretty

00:25:54,960 --> 00:25:59,970
simple this is the dev comp talk

00:25:57,120 --> 00:26:01,920
tomorrow at 5 p.m. that's going to go

00:25:59,970 --> 00:26:04,260
heavily in-depth into this but I'm gonna

00:26:01,920 --> 00:26:10,980
do a quick demo now and show you how how

00:26:04,260 --> 00:26:13,560
it works so this is a demonstration the

00:26:10,980 --> 00:26:20,070
OCI hook to fire up a BPF program to

00:26:13,560 --> 00:26:22,620
trace all sis calls so this is what so

00:26:20,070 --> 00:26:24,540
this is what a the hook looks like so

00:26:22,620 --> 00:26:26,490
it's basically an executable you can you

00:26:24,540 --> 00:26:29,250
know on your fedora box the rail boxes

00:26:26,490 --> 00:26:32,610
you can do a basically DNF install Oh

00:26:29,250 --> 00:26:33,870
see I said seccomp BPF hook and it puts

00:26:32,610 --> 00:26:36,750
down a hook like this this basically

00:26:33,870 --> 00:26:38,250
tells that container engines to launch

00:26:36,750 --> 00:26:44,670
this hook before they launch the

00:26:38,250 --> 00:26:45,690
container okay so now what I'm going to

00:26:44,670 --> 00:26:47,100
do is I'm actually going to launch a

00:26:45,690 --> 00:26:49,170
container that's just going to do an LS

00:26:47,100 --> 00:26:51,390
of slash okay all it's going to do is

00:26:49,170 --> 00:26:53,550
launch a container and look at slash but

00:26:51,390 --> 00:26:56,730
I'm passing in a special annotation here

00:26:53,550 --> 00:26:58,530
that says I want that OCI hook to watch

00:26:56,730 --> 00:27:02,070
all sis calls that happen on the system

00:26:58,530 --> 00:27:04,650
so it runs and they're just finished

00:27:02,070 --> 00:27:06,870
running a container and what I'm gonna

00:27:04,650 --> 00:27:09,110
do now is I'm gonna actually look at the

00:27:06,870 --> 00:27:12,780
sis calls that are required to do an LS

00:27:09,110 --> 00:27:14,520
/ okay so it's pretty simple this is

00:27:12,780 --> 00:27:16,860
actually exactly what

00:27:14,520 --> 00:27:20,610
Sacre proles would look like as a JSON

00:27:16,860 --> 00:27:23,910
file in the system this point I'm gonna

00:27:20,610 --> 00:27:26,130
now I'm switching from using the OC ice

00:27:23,910 --> 00:27:28,650
hook and I'm actually going to run the

00:27:26,130 --> 00:27:30,870
container with the set comps and now I'm

00:27:28,650 --> 00:27:33,030
locking it down to those 25 sis calls

00:27:30,870 --> 00:27:36,180
that are required to do slash on the

00:27:33,030 --> 00:27:37,950
system and boil it worked okay so

00:27:36,180 --> 00:27:40,710
basically I recorded what's this calls

00:27:37,950 --> 00:27:42,510
are needed and then a meal to run it so

00:27:40,710 --> 00:27:45,540
we're gonna take a step further and now

00:27:42,510 --> 00:27:47,960
instead of just do an LS / of / we're

00:27:45,540 --> 00:27:50,510
gonna do an LS dash L of slash

00:27:47,960 --> 00:27:53,060
okay and with the same lockdown

00:27:50,510 --> 00:27:54,740
container but the second rolls and all

00:27:53,060 --> 00:27:58,610
of a sudden seccomp is blocking some

00:27:54,740 --> 00:28:00,440
Cisco on the system alright so now what

00:27:58,610 --> 00:28:03,740
I can do is I can go out to my auditing

00:28:00,440 --> 00:28:07,070
subsystem and look that see that that LS

00:28:03,740 --> 00:28:09,140
dash L needed these other syscalls so

00:28:07,070 --> 00:28:12,110
basically what's happening here is it's

00:28:09,140 --> 00:28:16,130
actually attempting to basically go get

00:28:12,110 --> 00:28:18,110
UID name based on the U IDs on it so can

00:28:16,130 --> 00:28:19,850
reveal that it's dee Walsh's files or

00:28:18,110 --> 00:28:24,440
whatever and that's actually talking to

00:28:19,850 --> 00:28:26,570
the SSS daemon on the system so if I

00:28:24,440 --> 00:28:29,480
basically run again the SIS call trace

00:28:26,570 --> 00:28:32,360
on it I can actually show when I got to

00:28:29,480 --> 00:28:34,280
show you now is now I did an LS l but

00:28:32,360 --> 00:28:38,810
basically I recorded the differences

00:28:34,280 --> 00:28:43,940
between LS of slash versus LS dash of

00:28:38,810 --> 00:28:47,720
slash what's strange down here is it

00:28:43,940 --> 00:28:49,760
actually removed one so - LS a - L

00:28:47,720 --> 00:28:53,780
actually doesn't need stat I don't know

00:28:49,760 --> 00:28:55,880
why but the way you can do with the OCI

00:28:53,780 --> 00:28:57,620
hook now is you can give it an input

00:28:55,880 --> 00:29:01,130
file and an output file so you can

00:28:57,620 --> 00:29:02,900
imagine if you had a CI CD system that

00:29:01,130 --> 00:29:05,090
ran your application multiple times

00:29:02,900 --> 00:29:07,040
every time it ran it with the hook

00:29:05,090 --> 00:29:10,250
watching all the SIS calls and ran

00:29:07,040 --> 00:29:11,510
through your entire CI CD system and you

00:29:10,250 --> 00:29:13,910
got to a point that you had a really

00:29:11,510 --> 00:29:16,010
nice suck on file out there now you

00:29:13,910 --> 00:29:17,990
could take that set comp file put it out

00:29:16,010 --> 00:29:19,820
into production and maybe continue to

00:29:17,990 --> 00:29:21,920
run the hook for a month about two

00:29:19,820 --> 00:29:23,450
months in production and continue to

00:29:21,920 --> 00:29:25,040
control basically you'll be still

00:29:23,450 --> 00:29:27,440
controlled by the default set comp file

00:29:25,040 --> 00:29:29,000
but now we could look and see if there's

00:29:27,440 --> 00:29:30,740
additional assist calls that are needed

00:29:29,000 --> 00:29:32,900
at some point you'll be confident enough

00:29:30,740 --> 00:29:34,250
to say it's been running for two months

00:29:32,900 --> 00:29:36,230
I haven't had a problem with it in

00:29:34,250 --> 00:29:39,080
production now I'm going to switch it

00:29:36,230 --> 00:29:41,630
over enforcing okay now I can start to

00:29:39,080 --> 00:29:45,380
use the second file one so that sounds

00:29:41,630 --> 00:29:48,260
great the problem is none of you're

00:29:45,380 --> 00:29:50,180
going to do that alright a developer

00:29:48,260 --> 00:29:51,710
might do that but no users are going to

00:29:50,180 --> 00:29:52,880
do it right users not going to

00:29:51,710 --> 00:29:54,980
understand it the users not going to

00:29:52,880 --> 00:29:57,620
understand how to do it so what we need

00:29:54,980 --> 00:29:59,630
oops I'm done demoing at this point

00:29:57,620 --> 00:30:02,400
stuff demoing

00:29:59,630 --> 00:30:05,160
so how do we ship and use these set comp

00:30:02,400 --> 00:30:08,130
rules how do i how do i ship those out

00:30:05,160 --> 00:30:10,650
well in production in kubernetes or pot

00:30:08,130 --> 00:30:12,090
man or docker or anything else the only

00:30:10,650 --> 00:30:14,670
thing I download when I run an

00:30:12,090 --> 00:30:16,410
application is the application image

00:30:14,670 --> 00:30:19,770
right the container image so we're

00:30:16,410 --> 00:30:21,390
proposing that we basically when I'm

00:30:19,770 --> 00:30:23,850
developing my image I develop that

00:30:21,390 --> 00:30:26,640
second JSON file and I stick it in the

00:30:23,850 --> 00:30:28,860
image and now we have potentially a

00:30:26,640 --> 00:30:31,620
label or an annotation that basically

00:30:28,860 --> 00:30:34,140
says i/o contain a set cop and tells it

00:30:31,620 --> 00:30:36,450
we're in the image to use the second

00:30:34,140 --> 00:30:38,220
file that's generated with it if and

00:30:36,450 --> 00:30:40,950
only if the container image is second

00:30:38,220 --> 00:30:42,960
chase on is a subset of the default set

00:30:40,950 --> 00:30:45,030
cop basically that's what the diagram is

00:30:42,960 --> 00:30:48,000
trying to show you so we can guarantee

00:30:45,030 --> 00:30:50,940
if I can guarantee that the image is set

00:30:48,000 --> 00:30:52,410
cop is just a subset of the set comp

00:30:50,940 --> 00:30:54,780
that I would going to run it by default

00:30:52,410 --> 00:30:55,980
and if I'm not running any second by

00:30:54,780 --> 00:30:57,510
default that means that there's no

00:30:55,980 --> 00:30:59,700
enforcing then I could run in you're

00:30:57,510 --> 00:31:01,470
guaranteed to be a subset I could

00:30:59,700 --> 00:31:03,330
actually run out of the box without a

00:31:01,470 --> 00:31:05,960
user interaction or anything else I can

00:31:03,330 --> 00:31:09,630
run lockdown I can move you towards

00:31:05,960 --> 00:31:10,290
basically the top of it so that's you

00:31:09,630 --> 00:31:11,580
know one of the things we're

00:31:10,290 --> 00:31:13,920
experimenting with right now

00:31:11,580 --> 00:31:15,690
I'm actually a pull request going in is

00:31:13,920 --> 00:31:17,670
basically shipping these set comp files

00:31:15,690 --> 00:31:18,990
inside of containers image and then

00:31:17,670 --> 00:31:22,050
allowing the container engine to

00:31:18,990 --> 00:31:26,240
automatically specify the second full

00:31:22,050 --> 00:31:29,780
set of used use the namespace security

00:31:26,240 --> 00:31:32,190
so user name space is really really cool

00:31:29,780 --> 00:31:34,860
how many people have run rootless pod

00:31:32,190 --> 00:31:37,050
man isn't that cool

00:31:34,860 --> 00:31:40,110
everybody else that hasn't run it go

00:31:37,050 --> 00:31:41,460
back to your Linux box and try it out

00:31:40,110 --> 00:31:43,800
you can do everything you can do in

00:31:41,460 --> 00:31:46,110
darker without being rude on the system

00:31:43,800 --> 00:31:48,120
okay it is really cool you can run your

00:31:46,110 --> 00:31:50,730
full container workflow and you don't

00:31:48,120 --> 00:31:52,620
have to be root to run it don't tell me

00:31:50,730 --> 00:31:54,870
I can do that with darker by making the

00:31:52,620 --> 00:31:56,280
darker socket in the darker group that

00:31:54,870 --> 00:31:58,559
is the most dangerous thing you can do

00:31:56,280 --> 00:32:00,660
on a Linux system access to the darkest

00:31:58,559 --> 00:32:01,350
socket me is worse than sudo without

00:32:00,660 --> 00:32:03,600
password

00:32:01,350 --> 00:32:06,150
it is worse than giving out the root

00:32:03,600 --> 00:32:08,220
password because there is no it's

00:32:06,150 --> 00:32:09,690
basically a client-server operation when

00:32:08,220 --> 00:32:12,000
I talk to the darkest socket I can watch

00:32:09,690 --> 00:32:13,890
a full root process fully privileged and

00:32:12,000 --> 00:32:15,720
go via machine when I'm done I can

00:32:13,890 --> 00:32:19,170
destroy the container in darker water

00:32:15,720 --> 00:32:22,230
Mac rat wipe out any access to Dan Walsh

00:32:19,170 --> 00:32:24,420
did when pod man runs rootless it is

00:32:22,230 --> 00:32:26,190
running as your user okay there is no

00:32:24,420 --> 00:32:29,160
privilege there's no privilege

00:32:26,190 --> 00:32:30,780
escalation or anything else so ruthless

00:32:29,160 --> 00:32:33,240
Padma and ruthless builder allows us to

00:32:30,780 --> 00:32:36,990
do all of the general container workflow

00:32:33,240 --> 00:32:39,120
with username space is a normal user so

00:32:36,990 --> 00:32:41,160
real loose builds it ruthless builds

00:32:39,120 --> 00:32:42,830
inside of a container imagine being able

00:32:41,160 --> 00:32:46,260
to build all these container images

00:32:42,830 --> 00:32:48,870
inside a kubernetes in a CI CD system

00:32:46,260 --> 00:32:50,730
without having to leak the docker socket

00:32:48,870 --> 00:32:53,400
into the container and these can run

00:32:50,730 --> 00:33:00,780
fully lockdown all based on the username

00:32:53,400 --> 00:33:02,550
space there is a issue with user name

00:33:00,780 --> 00:33:05,400
space that's being worked right now user

00:33:02,550 --> 00:33:07,530
name space requires access to requires

00:33:05,400 --> 00:33:09,390
credentials or your credentials to be

00:33:07,530 --> 00:33:13,440
added to a file called Etsy sub u ID and

00:33:09,390 --> 00:33:15,810
that's the sub G ID this right now is

00:33:13,440 --> 00:33:18,180
not network just distributable okay so

00:33:15,810 --> 00:33:20,490
basically there's no LDAP access to this

00:33:18,180 --> 00:33:22,200
thing or free IPA access to this thing

00:33:20,490 --> 00:33:24,870
so we're actually working through this

00:33:22,200 --> 00:33:26,490
process that you have to if you want to

00:33:24,870 --> 00:33:28,410
say had hundreds of thousands of users

00:33:26,490 --> 00:33:31,230
and you wanted to distribute that seen

00:33:28,410 --> 00:33:32,430
sub UID and it's the sub G ID we're

00:33:31,230 --> 00:33:34,140
working through the process of getting

00:33:32,430 --> 00:33:37,530
that but basically user name space is

00:33:34,140 --> 00:33:39,780
really really cool if they're doing it

00:33:37,530 --> 00:33:43,500
but basically that supports rootless

00:33:39,780 --> 00:33:44,880
users so ruthless users works but when

00:33:43,500 --> 00:33:45,930
you're running all your containers this

00:33:44,880 --> 00:33:47,550
route lee shoes they're they're all

00:33:45,930 --> 00:33:50,250
running inside of these same user name

00:33:47,550 --> 00:33:54,870
space when i'm running containers as

00:33:50,250 --> 00:33:57,420
root either under pod men or under trial

00:33:54,870 --> 00:34:00,180
in kubernetes they're all running in the

00:33:57,420 --> 00:34:02,280
same user name space so in the perfect

00:34:00,180 --> 00:34:04,860
world user name space would give us

00:34:02,280 --> 00:34:06,840
separation between containers so with

00:34:04,860 --> 00:34:09,899
pod man you can execute a command like

00:34:06,840 --> 00:34:13,050
Padma and run use the map UID 0 map to

00:34:09,899 --> 00:34:15,990
100,000 for 5,000 you IDs the next

00:34:13,050 --> 00:34:19,950
command runs the exact same UID map of

00:34:15,990 --> 00:34:22,230
users 200,000 you IDs so root inside of

00:34:19,950 --> 00:34:24,600
the first container is 100,000 root

00:34:22,230 --> 00:34:25,260
inside the second container is 200,000

00:34:24,600 --> 00:34:27,450
if

00:34:25,260 --> 00:34:29,399
break out of the container we have a

00:34:27,450 --> 00:34:31,889
feeling that you will not be able to

00:34:29,399 --> 00:34:34,230
attack the other containers because you

00:34:31,889 --> 00:34:37,380
are running as you ID to 100,000 versus

00:34:34,230 --> 00:34:39,210
running as you ID 200,000 pretty cool

00:34:37,380 --> 00:34:42,530
right this is what we relied on for

00:34:39,210 --> 00:34:44,820
security and Linux forever and ever

00:34:42,530 --> 00:34:50,159
how many people in here have ever done

00:34:44,820 --> 00:34:52,710
that command there's two maybe right

00:34:50,159 --> 00:34:55,230
it's really cool but almost no one uses

00:34:52,710 --> 00:34:57,360
it so we have used a namespace in the

00:34:55,230 --> 00:34:59,820
kernel we have it but the problem is no

00:34:57,360 --> 00:35:01,920
one knows how to use it right and you

00:34:59,820 --> 00:35:05,130
can't think of it so the human being has

00:35:01,920 --> 00:35:07,830
to go out and manage those UID maps so

00:35:05,130 --> 00:35:10,260
if I you know set up 50 containers I

00:35:07,830 --> 00:35:11,520
have to have some kind of tooling to

00:35:10,260 --> 00:35:13,650
figure out to make sure that I don't

00:35:11,520 --> 00:35:15,870
have overlap on my you IDs there else

00:35:13,650 --> 00:35:17,130
from a UI user namespace point of view

00:35:15,870 --> 00:35:19,650
the containers would be able to attack

00:35:17,130 --> 00:35:21,690
each other so how do I get closer to pop

00:35:19,650 --> 00:35:24,240
appear how do I get people to use user

00:35:21,690 --> 00:35:29,370
namespace to guarantee separation the

00:35:24,240 --> 00:35:31,140
containers another problem using

00:35:29,370 --> 00:35:32,700
namespace is we still have no kubernetes

00:35:31,140 --> 00:35:35,550
support I'm already down to 10 minutes

00:35:32,700 --> 00:35:37,770
okay we still have no guarantee any

00:35:35,550 --> 00:35:39,150
support kubernetes support there's

00:35:37,770 --> 00:35:41,640
people working on it but every single

00:35:39,150 --> 00:35:43,440
releases seems to get pushed back one so

00:35:41,640 --> 00:35:45,750
right now kubernetes has no concept of

00:35:43,440 --> 00:35:47,310
user namespace so therefore even though

00:35:45,750 --> 00:35:50,400
I'd want to run all my containers in

00:35:47,310 --> 00:35:53,340
different user namespaces the cool blood

00:35:50,400 --> 00:35:56,130
has to understand that okay and how do

00:35:53,340 --> 00:35:57,900
we work through that one other problem

00:35:56,130 --> 00:35:59,490
used in a space is lack of file system

00:35:57,900 --> 00:36:01,400
support so when I run those two

00:35:59,490 --> 00:36:04,020
containers the one that's running

00:36:01,400 --> 00:36:05,880
100,000 any files in its file system

00:36:04,020 --> 00:36:07,770
that are owned by 100,000 he will see

00:36:05,880 --> 00:36:10,530
his own by root the second one is

00:36:07,770 --> 00:36:13,440
200,000 I take the same image for both

00:36:10,530 --> 00:36:15,660
containers I need them shifted right so

00:36:13,440 --> 00:36:17,520
I want the same image mounted into one

00:36:15,660 --> 00:36:19,860
container it looks like it's 200,000 and

00:36:17,520 --> 00:36:22,320
to the other containers 100,000 so used

00:36:19,860 --> 00:36:23,730
a namespace it's been around for a long

00:36:22,320 --> 00:36:27,240
time but has never been in a file system

00:36:23,730 --> 00:36:28,710
support so what we've done in the

00:36:27,240 --> 00:36:31,020
container engine tools is we've actually

00:36:28,710 --> 00:36:33,390
added toning so we have really high

00:36:31,020 --> 00:36:34,890
performance toning going on underneath

00:36:33,390 --> 00:36:37,040
the covers so if you ran those two

00:36:34,890 --> 00:36:39,590
containers on a fresh

00:36:37,040 --> 00:36:41,090
block it will actually tone the second

00:36:39,590 --> 00:36:41,780
one to match to use a namespace that

00:36:41,090 --> 00:36:43,310
you're going to be running in the

00:36:41,780 --> 00:36:46,340
container and then everything works

00:36:43,310 --> 00:36:47,450
perfectly so we actually have some pull

00:36:46,340 --> 00:36:50,870
requests and we've been experimenting

00:36:47,450 --> 00:36:52,670
with parallel Chun so imagine right now

00:36:50,870 --> 00:36:54,320
have you shown a file system of filial

00:36:52,670 --> 00:36:55,610
eyes for ten houses this is one process

00:36:54,320 --> 00:36:58,070
going through and not owning those

00:36:55,610 --> 00:36:59,660
imagine instead if you use parallel in

00:36:58,070 --> 00:37:01,040
every single directory you forked off a

00:36:59,660 --> 00:37:03,110
thread and that thread went out and

00:37:01,040 --> 00:37:05,690
shown it so we've seen speed ups of

00:37:03,110 --> 00:37:08,930
between ten and a hundred times by going

00:37:05,690 --> 00:37:10,310
to parallel charting now as soon as

00:37:08,930 --> 00:37:12,350
people hear that I say well what about

00:37:10,310 --> 00:37:16,820
spinning disks well stop using spinning

00:37:12,350 --> 00:37:20,240
disk but they but basically it's a way

00:37:16,820 --> 00:37:21,830
to speed up the churning the real

00:37:20,240 --> 00:37:23,690
Nirvana or the system is a thing called

00:37:21,830 --> 00:37:25,010
a shifting filesystem right basically

00:37:23,690 --> 00:37:27,440
gets something in the kernel then

00:37:25,010 --> 00:37:29,330
understands uses a namespace and this is

00:37:27,440 --> 00:37:31,250
like the holy grail shifting file

00:37:29,330 --> 00:37:33,890
systems I've been asking for them for

00:37:31,250 --> 00:37:37,600
about six or seven years now and they're

00:37:33,890 --> 00:37:40,760
always six months a year two years away

00:37:37,600 --> 00:37:43,010
the kernel will moves at glacial speeds

00:37:40,760 --> 00:37:45,350
and for legitimate reasons right this is

00:37:43,010 --> 00:37:46,910
seems a little dangerous but basically

00:37:45,350 --> 00:37:51,020
shifting file systems have made a lot of

00:37:46,910 --> 00:37:52,910
progress in the last year but they still

00:37:51,020 --> 00:37:56,360
not on the horizon and I don't know

00:37:52,910 --> 00:37:59,030
where they are in terms of rel so a

00:37:56,360 --> 00:38:01,850
possible solution that I am looking for

00:37:59,030 --> 00:38:04,310
is to make the container engines handle

00:38:01,850 --> 00:38:06,500
user name space themselves so imagine a

00:38:04,310 --> 00:38:09,170
command like Padma and run use the name

00:38:06,500 --> 00:38:11,690
space Eagles auto where we go out and

00:38:09,170 --> 00:38:14,150
automatically just grab a free use and a

00:38:11,690 --> 00:38:16,280
space range of you IDs and actually run

00:38:14,150 --> 00:38:18,290
each container you rent automatically

00:38:16,280 --> 00:38:21,590
inside of user name space so would not

00:38:18,290 --> 00:38:24,080
become a concern of the user and then we

00:38:21,590 --> 00:38:26,000
could turn that on by default so quad

00:38:24,080 --> 00:38:27,680
man I automatically pick to use the name

00:38:26,000 --> 00:38:29,780
space per container guaranteeing you

00:38:27,680 --> 00:38:31,880
beat this this is how I see Linux works

00:38:29,780 --> 00:38:33,770
SELinux guarantees the uniqueness of the

00:38:31,880 --> 00:38:37,280
content container labels and that's

00:38:33,770 --> 00:38:38,570
built into the engine and then imagine

00:38:37,280 --> 00:38:40,370
we could add a similar feature to

00:38:38,570 --> 00:38:42,080
kubernetes we're automatically used a

00:38:40,370 --> 00:38:43,370
namespace gets picked and everything

00:38:42,080 --> 00:38:45,380
just works on the system so that's

00:38:43,370 --> 00:38:46,640
really what the future ism so the last

00:38:45,380 --> 00:38:49,610
section of my talk is talking about

00:38:46,640 --> 00:38:50,870
containers cough so earlier in the talk

00:38:49,610 --> 00:38:52,670
we talked about all

00:38:50,870 --> 00:38:54,740
container engines have this hard-coded

00:38:52,670 --> 00:38:56,390
constants right you guys didn't even

00:38:54,740 --> 00:38:57,710
know what the default capabilities list

00:38:56,390 --> 00:39:00,050
is right because that's hardcore than

00:38:57,710 --> 00:39:02,030
the content so we've been working on

00:39:00,050 --> 00:39:04,490
we actually a pull request right now not

00:39:02,030 --> 00:39:06,980
quite merged is the idea of taking your

00:39:04,490 --> 00:39:09,890
defaults and making them into a config

00:39:06,980 --> 00:39:12,350
file okay in this config file lists out

00:39:09,890 --> 00:39:13,940
lots and lots of you know general

00:39:12,350 --> 00:39:15,770
configurations that you might want to

00:39:13,940 --> 00:39:17,870
set as an admin you don't like the

00:39:15,770 --> 00:39:20,150
default config and we'll have free

00:39:17,870 --> 00:39:22,280
config files for it the one is from the

00:39:20,150 --> 00:39:24,350
distribution so that being say fedora

00:39:22,280 --> 00:39:26,630
this chooses to use different defaults

00:39:24,350 --> 00:39:28,220
and say Padma and Bill to use and then

00:39:26,630 --> 00:39:30,370
an admin can override that and then the

00:39:28,220 --> 00:39:36,410
individual users can over override that

00:39:30,370 --> 00:39:37,640
so let's take a quick look at that so

00:39:36,410 --> 00:39:40,340
here we are I'm just launching a

00:39:37,640 --> 00:39:42,020
container and I just launched a

00:39:40,340 --> 00:39:43,610
container on the system and it's using

00:39:42,020 --> 00:39:45,920
the fault and you see the 14

00:39:43,610 --> 00:39:49,880
capabilities including that raw on the

00:39:45,920 --> 00:39:53,180
system now I'm creating a capabilities

00:39:49,880 --> 00:39:54,770
file so I created a new scarf and if you

00:39:53,180 --> 00:39:56,540
notice I basically say that these are

00:39:54,770 --> 00:39:58,460
contain these if I was the god of the

00:39:56,540 --> 00:39:59,930
world these are the capabilities I would

00:39:58,460 --> 00:40:02,330
allow by default and even some of these

00:39:59,930 --> 00:40:03,980
I have questionable about but basically

00:40:02,330 --> 00:40:05,930
eliminated those four I talked about in

00:40:03,980 --> 00:40:09,710
the beginning talk and so now I'm going

00:40:05,930 --> 00:40:12,530
to try to do a container on it and now

00:40:09,710 --> 00:40:14,270
you'll see so I specified containers

00:40:12,530 --> 00:40:16,790
cough I didn't want to install it on

00:40:14,270 --> 00:40:18,410
this global system and now we have much

00:40:16,790 --> 00:40:20,440
less capabilities for running a

00:40:18,410 --> 00:40:23,020
container so we went from 14 down to 10

00:40:20,440 --> 00:40:26,540
but now I'm gonna run the ping command

00:40:23,020 --> 00:40:31,040
well we lost net raw ping command blows

00:40:26,540 --> 00:40:33,050
up well in containers cough I can

00:40:31,040 --> 00:40:35,720
actually add the sis control so if I add

00:40:33,050 --> 00:40:37,520
that falses control of net ipv4

00:40:35,720 --> 00:40:40,430
basically the same command I did outside

00:40:37,520 --> 00:40:42,950
of the container and now by default on

00:40:40,430 --> 00:40:45,260
my system I'm running ping inside of my

00:40:42,950 --> 00:40:47,300
containers without user having to do a

00:40:45,260 --> 00:40:49,010
single thing on the system and it

00:40:47,300 --> 00:40:51,410
becomes either the distribution does

00:40:49,010 --> 00:40:53,390
this by default or the administrator I

00:40:51,410 --> 00:40:55,220
can override it by default but after

00:40:53,390 --> 00:40:57,260
user really cares about security he can

00:40:55,220 --> 00:41:02,920
do it by default and instantaneously

00:40:57,260 --> 00:41:02,920
he's got a more secure system so

00:41:03,420 --> 00:41:09,400
that is the end of my quick overview of

00:41:06,580 --> 00:41:11,110
ways ideas we have there's other ideas

00:41:09,400 --> 00:41:13,870
there's things we actually have in a

00:41:11,110 --> 00:41:17,710
meeting later on with the KBM team to

00:41:13,870 --> 00:41:19,180
talk about you know potentially using

00:41:17,710 --> 00:41:21,940
cattle containers and how we can better

00:41:19,180 --> 00:41:23,770
integrate with kata which uses Katie of

00:41:21,940 --> 00:41:25,870
kernels separated containers but these

00:41:23,770 --> 00:41:28,000
are all the talks that I plan on going

00:41:25,870 --> 00:41:30,520
to this week and they're all talks about

00:41:28,000 --> 00:41:31,840
containers so at 12:30 today we're going

00:41:30,520 --> 00:41:33,400
to actually be digging deeper into

00:41:31,840 --> 00:41:34,720
container security we'll be talking

00:41:33,400 --> 00:41:37,780
about a lot of stuff that I talked about

00:41:34,720 --> 00:41:39,760
today and basically brainstorming so

00:41:37,780 --> 00:41:42,580
it's a we have a session and Valentin is

00:41:39,760 --> 00:41:45,220
running that session then we have a

00:41:42,580 --> 00:41:47,770
couple good talks in containers engine

00:41:45,220 --> 00:41:49,450
there's a talk down here on set comp to

00:41:47,770 --> 00:41:53,890
go deeper into the second tooling

00:41:49,450 --> 00:41:54,280
there's Utica we did stuff in here

00:41:53,890 --> 00:41:55,810
somewhere

00:41:54,280 --> 00:41:57,010
and so basically these are the talks so

00:41:55,810 --> 00:42:01,170
at this point I'd like to open up to any

00:41:57,010 --> 00:42:01,170
questions yes

00:42:12,410 --> 00:42:19,520
do I have any idea basically describe

00:42:15,330 --> 00:42:19,520
how do you figure out which capabilities

00:42:20,390 --> 00:42:25,470
well see again manely slide about

00:42:23,820 --> 00:42:27,180
capabilities i said i believe that we

00:42:25,470 --> 00:42:28,859
should have an annotation or a label

00:42:27,180 --> 00:42:31,080
inside of the container image that says

00:42:28,859 --> 00:42:33,119
my container will run perfectly fine

00:42:31,080 --> 00:42:34,590
with just these two capabilities so

00:42:33,119 --> 00:42:38,180
therefore by default when you run my

00:42:34,590 --> 00:42:38,180
container you'll use those two paper

00:42:41,690 --> 00:42:46,020
right easy he's probably the only one in

00:42:44,670 --> 00:42:47,190
the world that's going to know right

00:42:46,020 --> 00:42:57,540
he's the only one that's going to get me

00:42:47,190 --> 00:43:00,119
from Goldilocks to pop a bit yes so so

00:42:57,540 --> 00:43:01,800
static analysis always I actually have a

00:43:00,119 --> 00:43:04,400
big problem with static analysis in

00:43:01,800 --> 00:43:08,040
containers because of my static analyzed

00:43:04,400 --> 00:43:10,080
httpd what's that going to tell me right

00:43:08,040 --> 00:43:12,869
all I'm running is a little tiny

00:43:10,080 --> 00:43:14,099
application main so static analysis only

00:43:12,869 --> 00:43:16,050
works if you have a single application

00:43:14,099 --> 00:43:17,790
that only does one function or what in

00:43:16,050 --> 00:43:19,470
your one set of functions but just you

00:43:17,790 --> 00:43:21,000
know in containers we basically throw in

00:43:19,470 --> 00:43:26,480
all this crap and so I don't know if

00:43:21,000 --> 00:43:26,480
static analysis really works yes

00:43:42,930 --> 00:43:47,980
yeah so I mean right now in OpenShift

00:43:46,030 --> 00:43:49,420
you know an open ship we describe that

00:43:47,980 --> 00:43:52,660
you should never run route containers at

00:43:49,420 --> 00:43:54,360
all but yeah open ship theoretically we

00:43:52,660 --> 00:43:56,220
will come back with logging in and

00:43:54,360 --> 00:43:59,680
information about why the container

00:43:56,220 --> 00:44:04,030
failed sadly and that's a different

00:43:59,680 --> 00:44:06,610
topic I call it friendly Purim and we've

00:44:04,030 --> 00:44:08,770
had had open discussions for years and

00:44:06,610 --> 00:44:11,290
years about a thing called friendly perm

00:44:08,770 --> 00:44:13,360
in that each one of these security

00:44:11,290 --> 00:44:15,220
mechanisms carl's causes an application

00:44:13,360 --> 00:44:17,200
to get permission denied and then the

00:44:15,220 --> 00:44:19,030
kernel hangs onto for god life that I'm

00:44:17,200 --> 00:44:20,470
not telling you why it's denied it's

00:44:19,030 --> 00:44:23,620
just an ID so whether it's used a

00:44:20,470 --> 00:44:25,360
namespace SELinux SEC comp is really

00:44:23,620 --> 00:44:27,310
hard to tell so one of the things we've

00:44:25,360 --> 00:44:30,100
talked about there is basically losing

00:44:27,310 --> 00:44:31,630
BPF filters again to basically figure

00:44:30,100 --> 00:44:33,190
out in the kernel anytime two throws

00:44:31,630 --> 00:44:35,140
permission denied right that to a log

00:44:33,190 --> 00:44:36,670
file somewhere that says this container

00:44:35,140 --> 00:44:38,080
got permission to die because it was

00:44:36,670 --> 00:44:40,540
running and used a name space or a got

00:44:38,080 --> 00:44:43,080
it because it was SELinux blocking yes

00:44:40,540 --> 00:44:43,080
way in the back

00:45:02,310 --> 00:45:09,130
right I think what you're asking is so I

00:45:06,010 --> 00:45:10,900
set up my set comp filters and suddenly

00:45:09,130 --> 00:45:12,670
the container goes down a different code

00:45:10,900 --> 00:45:14,800
path that I've never tested before and

00:45:12,670 --> 00:45:17,170
this is what SELinux has had problems

00:45:14,800 --> 00:45:19,090
with for years right and I don't really

00:45:17,170 --> 00:45:21,970
have a good solution for that except

00:45:19,090 --> 00:45:24,100
that the set cop I showed you that the

00:45:21,970 --> 00:45:25,530
autoblog will record set comp failures

00:45:24,100 --> 00:45:27,460
that happening for your container

00:45:25,530 --> 00:45:28,750
whether or not there's a good mapping

00:45:27,460 --> 00:45:30,370
back from the auto log back to your

00:45:28,750 --> 00:45:33,010
container I don't know but basically

00:45:30,370 --> 00:45:35,170
yeah it's a general problem right and

00:45:33,010 --> 00:45:37,180
and the only thing I can say is you know

00:45:35,170 --> 00:45:38,920
we have to run this through as much

00:45:37,180 --> 00:45:40,630
testing as we can to try to make sure

00:45:38,920 --> 00:45:41,980
that we've got all the code pass that

00:45:40,630 --> 00:45:56,260
that container could possibly run either

00:45:41,980 --> 00:45:58,720
yes right you can you basically if you

00:45:56,260 --> 00:46:00,880
set up if you set that annotation in

00:45:58,720 --> 00:46:03,240
your open ship kubernetes and have the

00:46:00,880 --> 00:46:03,240
OCI

00:46:04,500 --> 00:46:12,430
well that policy is going to write it

00:46:06,730 --> 00:46:14,230
out to a file so they know you can use

00:46:12,430 --> 00:46:16,480
cryo you can use pod man you can use

00:46:14,230 --> 00:46:17,200
builder so anything that set has that

00:46:16,480 --> 00:46:19,330
capability

00:46:17,200 --> 00:46:20,590
basically OCI hooks implement matte

00:46:19,330 --> 00:46:23,020
effect it probably would work with

00:46:20,590 --> 00:46:28,630
darker I'm not sure if you could get

00:46:23,020 --> 00:46:30,160
Dockett around the OC I hope well you

00:46:28,630 --> 00:46:31,150
have to you're running a container so

00:46:30,160 --> 00:46:36,100
you have to have a tool that runs a

00:46:31,150 --> 00:46:37,420
container right but I would so I would

00:46:36,100 --> 00:46:40,840
take that binary sticking into a

00:46:37,420 --> 00:46:43,020
container and then run it anybody else

00:46:40,840 --> 00:46:43,020
yes

00:46:46,350 --> 00:46:52,950
well over stated everybody's so using

00:46:49,300 --> 00:46:52,950
rootless your any user name space yeah

00:46:54,300 --> 00:47:02,110
well that's what well there is so right

00:47:00,610 --> 00:47:07,840
there is how you would choose a user

00:47:02,110 --> 00:47:08,260
name space mapping well that's so right

00:47:07,840 --> 00:47:10,150
there

00:47:08,260 --> 00:47:12,520
so the idea right now this doesn't exist

00:47:10,150 --> 00:47:15,400
this is Dan and fairyland

00:47:12,520 --> 00:47:17,170
so right now Padma and Ron slash user

00:47:15,400 --> 00:47:19,930
name space equals Auto would

00:47:17,170 --> 00:47:22,690
automatically generate a secure

00:47:19,930 --> 00:47:24,430
container for it now if you take that

00:47:22,690 --> 00:47:25,960
with containers comp you could set that

00:47:24,430 --> 00:47:27,610
absolutely automatically happens for

00:47:25,960 --> 00:47:30,040
every user name space so all you can

00:47:27,610 --> 00:47:33,600
change with run it by default okay

00:47:30,040 --> 00:47:33,600
anybody else yes

00:47:43,479 --> 00:47:48,469
right so we're so our goal is to work

00:47:46,729 --> 00:47:50,719
through the OCI to get this to be a

00:47:48,469 --> 00:47:52,880
standard right now what I've goal is

00:47:50,719 --> 00:47:54,079
actually to prove we can do it so once

00:47:52,880 --> 00:47:55,579
we can do it then we're gonna go through

00:47:54,079 --> 00:47:57,499
the standards body to attempt to get

00:47:55,579 --> 00:48:01,960
other container engines to adopt this

00:47:57,499 --> 00:48:05,299
principle so right but I would say that

00:48:01,960 --> 00:48:08,210
kubernetes upstream and most developers

00:48:05,299 --> 00:48:10,729
don't care about security right it's

00:48:08,210 --> 00:48:12,499
very low in their priority list so we

00:48:10,729 --> 00:48:17,329
will try to push it thro but we will see

00:48:12,499 --> 00:48:18,469
what happens okay I'm out of time are

00:48:17,329 --> 00:48:22,180
you still getting anybody else a

00:48:18,469 --> 00:48:22,180
question yes

00:48:33,790 --> 00:48:36,390
right

00:48:39,820 --> 00:48:45,430
well yeah right now we are we populate

00:48:43,750 --> 00:48:47,530
the Etsy password based on the UID that

00:48:45,430 --> 00:48:48,760
you're coming in it yeah so we can

00:48:47,530 --> 00:48:51,160
populate it inside the container

00:48:48,760 --> 00:48:53,170
runtimes if your entry so if you come in

00:48:51,160 --> 00:48:54,970
and say run is nine hundred thousand we

00:48:53,170 --> 00:48:56,350
actually enter add an entry to the Etsy

00:48:54,970 --> 00:48:58,810
password file inside of the container

00:48:56,350 --> 00:49:00,010
saying this is nine hundred thousand but

00:48:58,810 --> 00:49:01,330
we don't know you use the name I don't

00:49:00,010 --> 00:49:03,010
think that information is available to

00:49:01,330 --> 00:49:04,660
us when the container is run but that

00:49:03,010 --> 00:49:06,190
would be a nice enhancement to open

00:49:04,660 --> 00:49:08,800
shift to kubernetes to be able to pass

00:49:06,190 --> 00:49:10,390
downn you call this call this Dan Walsh

00:49:08,800 --> 00:49:15,070
as nine hundred thousand side the

00:49:10,390 --> 00:49:16,930
containers it is a feature to do set up

00:49:15,070 --> 00:49:19,060
the UID map so you can do reverse UID

00:49:16,930 --> 00:49:21,670
map but it's not it doesn't identify

00:49:19,060 --> 00:49:23,020
your name inside the container so we

00:49:21,670 --> 00:49:27,120
just say you're nine hundred thousand

00:49:23,020 --> 00:49:27,120
right yes

00:49:30,100 --> 00:49:35,650
it's just something that makes sec calm

00:49:32,140 --> 00:49:38,380
for a socket so second set calm enforces

00:49:35,650 --> 00:49:39,850
syscalls well that would be SELinux so I

00:49:38,380 --> 00:49:42,130
see Linux we control whether the two

00:49:39,850 --> 00:49:47,230
processes can communicate together over

00:49:42,130 --> 00:49:49,390
a socket that's what su Linux does yeah

00:49:47,230 --> 00:49:51,130
that's what I see Linux does so that

00:49:49,390 --> 00:49:52,720
there's no other tool other than a skew

00:49:51,130 --> 00:49:54,580
links that does that right now but you

00:49:52,720 --> 00:49:56,740
have to identify both ends of the socket

00:49:54,580 --> 00:49:58,750
and put that C Linux you do it with

00:49:56,740 --> 00:49:59,580
types okay all right thanks everybody

00:49:58,750 --> 00:50:09,190
for coming

00:49:59,580 --> 00:50:09,190

YouTube URL: https://www.youtube.com/watch?v=_w6H5yAbGj8


