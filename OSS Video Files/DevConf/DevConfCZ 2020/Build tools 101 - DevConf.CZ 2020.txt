Title: Build tools 101 - DevConf.CZ 2020
Publication date: 2020-03-27
Playlist: DevConfCZ 2020
Description: 
	Speakers: Karel Hala, Tom Coufal

Have you ever wondered how modern JS apps are built? Or how it was done in the old times, like 2 years ago? This is the right place to learn basics about Webpack, Parcel, Rollup and history of build tools used in JS world. I will guide you trough the dark ages of grunt and gulp. The problematic era of first webpack scripts and we will end in modern era of buitd tools and libraries - Babel, Typescript, linters and many more. At the end you should be able to set different build processes based on your preferences with optional code minificatio and code splitting using either Webpack, Parcel or plain Babel or Typescript compiler.

[ https://sched.co/YOnq ]

--
Recordings of talks at DevConf are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:01,250 --> 00:00:08,069
hello and welcome everybody we're gonna

00:00:04,740 --> 00:00:09,469
start with a talk called bill Toulouse

00:00:08,069 --> 00:00:14,159
00:00:09,469 --> 00:00:18,810
unfortunately this talk was previously

00:00:14,159 --> 00:00:21,390
meant for a UX track or a UI track and

00:00:18,810 --> 00:00:23,340
it was moved to the bill Shuster a track

00:00:21,390 --> 00:00:26,910
so if you're interested in build tools

00:00:23,340 --> 00:00:29,940
for other stuff other than JavaScript in

00:00:26,910 --> 00:00:34,530
front-end for for applications or

00:00:29,940 --> 00:00:38,300
libraries we will probably not be able

00:00:34,530 --> 00:00:42,960
to serve evil but we'll try our best to

00:00:38,300 --> 00:00:46,440
explaining where the world of Bill's

00:00:42,960 --> 00:00:48,899
tools in JavaScript went where it went

00:00:46,440 --> 00:00:52,920
from and where it is going right now and

00:00:48,899 --> 00:00:59,329
what is probably the best thing to work

00:00:52,920 --> 00:00:59,329
with today so let's jump in and

00:01:05,720 --> 00:01:13,970
let's go over there to the others yes so

00:01:11,990 --> 00:01:17,020
the most important thing of this talk

00:01:13,970 --> 00:01:21,350
we're going to introduce ourselves first

00:01:17,020 --> 00:01:24,500
the person on the left that's Carl yeah

00:01:21,350 --> 00:01:32,570
hello guys I'm in front-end developer

00:01:24,500 --> 00:01:36,520
for more than five years now and I've

00:01:32,570 --> 00:01:39,470
been mostly working on cloud projects

00:01:36,520 --> 00:01:44,210
although my my background went all the

00:01:39,470 --> 00:01:47,750
way to Java and PHP and so and so forth

00:01:44,210 --> 00:01:50,960
so then I moved to coal projects and I

00:01:47,750 --> 00:01:53,360
worked on front-end and I'm really like

00:01:50,960 --> 00:01:57,740
going first and to see a stick so I

00:01:53,360 --> 00:02:00,740
liked building like stuff together so

00:01:57,740 --> 00:02:05,270
that's why I chose the front-end part

00:02:00,740 --> 00:02:09,830
and I have a co speaker with me his name

00:02:05,270 --> 00:02:13,670
is Tommy Kato foul yeah that's that will

00:02:09,830 --> 00:02:17,860
be me um when it comes to fronting

00:02:13,670 --> 00:02:21,260
that's not mine my main area of

00:02:17,860 --> 00:02:25,190
expertise I call it front-end as a hobby

00:02:21,260 --> 00:02:29,690
far as very used to call everything as a

00:02:25,190 --> 00:02:32,480
service so I call it as a hobby instead

00:02:29,690 --> 00:02:35,959
of front-end my expertise is mainly in

00:02:32,480 --> 00:02:40,250
analytics and back and stuff for four

00:02:35,959 --> 00:02:43,070
different areas of our cloud offerings

00:02:40,250 --> 00:02:45,560
so I'll be I was doing AI ops or

00:02:43,070 --> 00:02:52,040
automation analytics in Red Hat Island

00:02:45,560 --> 00:02:55,160
and let's again so the motivation for

00:02:52,040 --> 00:03:00,380
this talk or were the idea of having

00:02:55,160 --> 00:03:02,630
such a talk came from is originally

00:03:00,380 --> 00:03:06,950
there was an article there still is an

00:03:02,630 --> 00:03:09,470
article it's it's from year 2016 from

00:03:06,950 --> 00:03:13,390
Jose agua Naga

00:03:09,470 --> 00:03:16,270
who wrote an article for hacker moon and

00:03:13,390 --> 00:03:19,900
this article is about

00:03:16,270 --> 00:03:22,480
what should I do if I want to start some

00:03:19,900 --> 00:03:26,950
JavaScript publication from scratch

00:03:22,480 --> 00:03:29,830
right now in year 2016 and right now

00:03:26,950 --> 00:03:33,640
we're in year 2020 and we figure out

00:03:29,830 --> 00:03:36,130
that it kind of many of the ideas or

00:03:33,640 --> 00:03:39,400
many of the key aspects that he

00:03:36,130 --> 00:03:42,820
mentioned still applies though it kind

00:03:39,400 --> 00:03:45,190
of requires an update and we would like

00:03:42,820 --> 00:03:48,370
to cover that so if you would like to

00:03:45,190 --> 00:03:51,040
start some projects start completely

00:03:48,370 --> 00:03:53,490
different stuff today and write it in

00:03:51,040 --> 00:03:56,470
JavaScript around right front end for it

00:03:53,490 --> 00:04:00,370
what would be the advice tooling for you

00:03:56,470 --> 00:04:02,830
to use because the space evolved a lot

00:04:00,370 --> 00:04:05,290
and there are many different

00:04:02,830 --> 00:04:07,210
possibilities now than they're aware and

00:04:05,290 --> 00:04:11,320
the possibilities that there were

00:04:07,210 --> 00:04:12,700
available back then are probably no

00:04:11,320 --> 00:04:16,330
notes relevant anymore

00:04:12,700 --> 00:04:19,900
so we're gonna start with defining some

00:04:16,330 --> 00:04:24,910
requirements what we expect to deliver

00:04:19,900 --> 00:04:27,820
would we expect to define when we are

00:04:24,910 --> 00:04:33,880
what the project basically means for us

00:04:27,820 --> 00:04:38,740
so let's imagine a completely pictures

00:04:33,880 --> 00:04:42,690
scenario yeah so we have a team of

00:04:38,740 --> 00:04:46,030
developers and they are writing some

00:04:42,690 --> 00:04:49,960
JavaScript code and this code should

00:04:46,030 --> 00:04:52,540
deliver either libraries for other teams

00:04:49,960 --> 00:04:56,860
to use or a web publication which is

00:04:52,540 --> 00:05:00,250
their product and they want this

00:04:56,860 --> 00:05:04,990
application to be built and bundled and

00:05:00,250 --> 00:05:08,140
be able to deploy it in some easy

00:05:04,990 --> 00:05:11,050
fashion so they don't need to spend tons

00:05:08,140 --> 00:05:15,280
of time every time they want to release

00:05:11,050 --> 00:05:18,430
stuff and they want it to be easy to set

00:05:15,280 --> 00:05:21,070
up to be easy to use for new developers

00:05:18,430 --> 00:05:23,919
when they come on the team to be do the

00:05:21,070 --> 00:05:25,230
same as well and bear in mind this is

00:05:23,919 --> 00:05:29,110
not

00:05:25,230 --> 00:05:32,380
this is not cloth negative stuff this is

00:05:29,110 --> 00:05:37,050
still the legacy workflow and our love

00:05:32,380 --> 00:05:40,420
steps so we'll try to we'll try to

00:05:37,050 --> 00:05:42,070
describe how to do this stuff and since

00:05:40,420 --> 00:05:43,990
we are defining an application since we

00:05:42,070 --> 00:05:46,330
are defined define or we are defining a

00:05:43,990 --> 00:05:48,460
land library we would like to use some

00:05:46,330 --> 00:05:50,560
kind of framework for that we would like

00:05:48,460 --> 00:05:52,960
to know to build everything from scratch

00:05:50,560 --> 00:05:59,140
in custom we would like to incorporate

00:05:52,960 --> 00:05:59,890
some of the major made yeah something

00:05:59,140 --> 00:06:02,500
like stream

00:05:59,890 --> 00:06:05,290
it means Tim Lee used frameworks as we

00:06:02,500 --> 00:06:08,140
have now so react angular and things

00:06:05,290 --> 00:06:10,720
like that yeah yeah and we also you want

00:06:08,140 --> 00:06:13,060
to use some new cool JavaScript goodies

00:06:10,720 --> 00:06:15,520
I don't know if you are familiar with

00:06:13,060 --> 00:06:19,120
them then like spread operators or

00:06:15,520 --> 00:06:22,270
federal functions and so on so forth and

00:06:19,120 --> 00:06:25,510
we also want our applications to be able

00:06:22,270 --> 00:06:32,470
to run on almost anything like presents

00:06:25,510 --> 00:06:35,710
ie10 and so so before we can do that

00:06:32,470 --> 00:06:40,570
today we should learn some lesson from

00:06:35,710 --> 00:06:43,810
the past and that's an aspect which is

00:06:40,570 --> 00:06:46,150
easy to forget about there's been some

00:06:43,810 --> 00:06:47,980
history in distilling there has been

00:06:46,150 --> 00:06:51,700
some historical development around this

00:06:47,980 --> 00:06:54,280
doing and there are some decisions some

00:06:51,700 --> 00:07:00,480
decisions were made that kind of steer

00:06:54,280 --> 00:07:00,480
the wheel the wheel of the industry so

00:07:00,600 --> 00:07:09,280
from here so first thing we need to

00:07:05,170 --> 00:07:13,000
define is we need some task class

00:07:09,280 --> 00:07:15,850
coroner in JavaScript

00:07:13,000 --> 00:07:18,360
this isn't that easy and first task

00:07:15,850 --> 00:07:22,720
runner that we choose to speak about

00:07:18,360 --> 00:07:26,110
dates back to the year 2012

00:07:22,720 --> 00:07:29,650
that's for in JavaScript world that's

00:07:26,110 --> 00:07:35,440
like Stone Age mostly even though it's 8

00:07:29,650 --> 00:07:36,479
years ago and the first render was

00:07:35,440 --> 00:07:41,569
called

00:07:36,479 --> 00:07:45,569
it was relatively easy to use but it has

00:07:41,569 --> 00:07:48,840
drawbacks for a time it wasn't that from

00:07:45,569 --> 00:07:52,440
the pound like it is now it was using

00:07:48,840 --> 00:07:58,889
temporary files and it didn't allow

00:07:52,440 --> 00:08:01,050
piping tasks so this was year 2012

00:07:58,889 --> 00:08:04,770
I guess that most of you are familiar

00:08:01,050 --> 00:08:08,280
with something called jQuery the most

00:08:04,770 --> 00:08:11,729
left and hate Dom manipulation library I

00:08:08,280 --> 00:08:18,780
would pursue so see between the year

00:08:11,729 --> 00:08:22,380
2006 and 2012 I call it like before the

00:08:18,780 --> 00:08:26,370
Stone Age because you usually just had

00:08:22,380 --> 00:08:27,810
one file with copied code from Stack

00:08:26,370 --> 00:08:31,380
Overflow

00:08:27,810 --> 00:08:35,159
you are either you inject your you know

00:08:31,380 --> 00:08:38,520
JavaScript code in the HTML it wasn't

00:08:35,159 --> 00:08:41,370
that wasn't I was coding in in jQuery as

00:08:38,520 --> 00:08:44,850
well and now I discourage you from using

00:08:41,370 --> 00:08:47,940
it because the new JavaScript judice

00:08:44,850 --> 00:08:51,779
actually allow you much more than jQuery

00:08:47,940 --> 00:08:54,990
and even though you are like scale with

00:08:51,779 --> 00:08:58,649
jQuery and you know that if you call the

00:08:54,990 --> 00:09:00,890
whole side you can write it on the new

00:08:58,649 --> 00:09:06,110
just beliefs wallet allows that as well

00:09:00,890 --> 00:09:10,350
but but let's go back to the year 2012

00:09:06,110 --> 00:09:15,089
when the grant was was released also a

00:09:10,350 --> 00:09:17,220
new technology was created this fairly

00:09:15,089 --> 00:09:22,230
colorful bird called Bower

00:09:17,220 --> 00:09:24,420
it was aiming to deliver like JavaScript

00:09:22,230 --> 00:09:29,550
packages to the front-end world it

00:09:24,420 --> 00:09:32,040
heavily relied on github or

00:09:29,550 --> 00:09:34,170
a nigut library that was publicly

00:09:32,040 --> 00:09:37,500
available or available on your machine

00:09:34,170 --> 00:09:41,760
but it also had plenty of goodies for

00:09:37,500 --> 00:09:44,220
instance it had integration in Ruby we

00:09:41,760 --> 00:09:47,370
can install the gem and it was basically

00:09:44,220 --> 00:09:49,420
served javascript library through Babur

00:09:47,370 --> 00:09:55,090
that was really cool

00:09:49,420 --> 00:09:58,330
and around the time folks that were

00:09:55,090 --> 00:10:00,970
using grunt didn't quite like temporary

00:09:58,330 --> 00:10:04,000
files didn't quite like that grunt

00:10:00,970 --> 00:10:06,700
wasn't able to use piping so they

00:10:04,000 --> 00:10:11,290
created two clever frogs at the time

00:10:06,700 --> 00:10:14,350
created gulp it was much faster it's a

00:10:11,290 --> 00:10:19,840
lot foul piping and part it was became

00:10:14,350 --> 00:10:26,530
confusing if I say became confusing my

00:10:19,840 --> 00:10:29,590
first job was to introduce some tasks in

00:10:26,530 --> 00:10:32,470
gulp and I just opened this file with

00:10:29,590 --> 00:10:35,800
two hundred lines of code and I didn't

00:10:32,470 --> 00:10:38,800
quite know what to do I just knew that

00:10:35,800 --> 00:10:41,410
to go to the file and at the end there

00:10:38,800 --> 00:10:44,140
was a different file and for me it felt

00:10:41,410 --> 00:10:46,300
like black box even though there's just

00:10:44,140 --> 00:10:51,220
some JavaScript and such I didn't quite

00:10:46,300 --> 00:10:54,070
understood it so that's actually one of

00:10:51,220 --> 00:10:59,290
the reasons why these technologies were

00:10:54,070 --> 00:11:02,980
either replaced completely or pre nude

00:10:59,290 --> 00:11:07,060
so as the develop as the browser's

00:11:02,980 --> 00:11:10,990
evolved for instance es6 yes seven years

00:11:07,060 --> 00:11:14,350
next was introduced HTTP to code

00:11:10,990 --> 00:11:19,440
splitting tree shaking modifications and

00:11:14,350 --> 00:11:23,830
sources and these tools of dark age

00:11:19,440 --> 00:11:29,490
learned that useful anymore because they

00:11:23,830 --> 00:11:35,310
didn't quite keep the pace so and also

00:11:29,490 --> 00:11:38,770
we got introduced to NPM behemoths of

00:11:35,310 --> 00:11:41,020
JavaScript libraries you can think of

00:11:38,770 --> 00:11:43,450
any library if you type it in an NPM

00:11:41,020 --> 00:11:46,570
there's a high probability that the

00:11:43,450 --> 00:11:51,340
library is already there the fault

00:11:46,570 --> 00:11:55,390
behind the NPM there's Google so it's

00:11:51,340 --> 00:11:57,220
like huge servers to back it also so

00:11:55,390 --> 00:12:01,630
it's very good really nice technology

00:11:57,220 --> 00:12:02,710
and also introduced a task runner in NPM

00:12:01,630 --> 00:12:04,780
so you

00:12:02,710 --> 00:12:08,200
don't worry neaten the task runners

00:12:04,780 --> 00:12:10,870
anymore because the FN PM or yarn or any

00:12:08,200 --> 00:12:14,950
other package management that can also

00:12:10,870 --> 00:12:18,700
run run tasks and right now it's easier

00:12:14,950 --> 00:12:21,430
to configure the conflict to build tools

00:12:18,700 --> 00:12:23,200
that was before though

00:12:21,430 --> 00:12:26,440
some might argue it that peg is very

00:12:23,200 --> 00:12:27,190
complicated and we already it is very

00:12:26,440 --> 00:12:30,160
complicated

00:12:27,190 --> 00:12:35,890
trust me it is less complicated than go

00:12:30,160 --> 00:12:40,260
I would add to that yeah one of the main

00:12:35,890 --> 00:12:43,780
reasons also white was replaced is that

00:12:40,260 --> 00:12:48,100
the current tooling at a time wasn't

00:12:43,780 --> 00:12:50,830
able to properly adapt to the new

00:12:48,100 --> 00:12:55,750
features of the ecosystem around it so

00:12:50,830 --> 00:12:58,120
we had HTTP to protocol features like

00:12:55,750 --> 00:13:01,330
code splitting or we require three

00:12:58,120 --> 00:13:04,390
shaking for our note as well-behaved

00:13:01,330 --> 00:13:08,050
developers as we used to have to remove

00:13:04,390 --> 00:13:10,450
that code from our bundles and all these

00:13:08,050 --> 00:13:12,850
kind of stuff were not possible back

00:13:10,450 --> 00:13:14,590
time with God or if they were possible

00:13:12,850 --> 00:13:15,730
it was really hard to achieve them

00:13:14,590 --> 00:13:18,580
across the board

00:13:15,730 --> 00:13:21,190
yeah exactly because for instance to go

00:13:18,580 --> 00:13:24,430
just take one file and at the end

00:13:21,190 --> 00:13:27,490
another file but you wanted a tree

00:13:24,430 --> 00:13:32,130
shaking among all of your code files or

00:13:27,490 --> 00:13:36,220
codebase so yeah thanks Russian so and

00:13:32,130 --> 00:13:39,190
the state of the JavaScript now it's not

00:13:36,220 --> 00:13:42,040
easy you have so many options to choose

00:13:39,190 --> 00:13:45,490
from starting with the package

00:13:42,040 --> 00:13:49,420
management you can either choose NPM or

00:13:45,490 --> 00:13:51,190
you are which one is better there's one

00:13:49,420 --> 00:13:53,440
side that here's the artist whether

00:13:51,190 --> 00:13:56,800
there's other side that the Earth's NPM

00:13:53,440 --> 00:13:59,440
is better both are good both are bad

00:13:56,800 --> 00:14:03,310
let's focus what are a good edge and

00:13:59,440 --> 00:14:06,460
let's talk about it so yarn is from

00:14:03,310 --> 00:14:10,720
Facebook and PM is by Google both giant

00:14:06,460 --> 00:14:13,330
companies yarn supports workspaces this

00:14:10,720 --> 00:14:17,860
is really awesome if you are working

00:14:13,330 --> 00:14:21,220
on a large project and are unhappy with

00:14:17,860 --> 00:14:24,660
our code base you can go to tomonori

00:14:21,220 --> 00:14:27,250
post and here can help you tremendously

00:14:24,660 --> 00:14:30,070
it's really great if you look at for

00:14:27,250 --> 00:14:33,519
instance how Babel is doing it how react

00:14:30,070 --> 00:14:35,920
is doing it how pattern files you doing

00:14:33,519 --> 00:14:38,950
it to use mana repos you have multiple

00:14:35,920 --> 00:14:41,829
packages and one repository you have

00:14:38,950 --> 00:14:45,490
same developers doing to decoded code

00:14:41,829 --> 00:14:48,700
reviews and so on so forth

00:14:45,490 --> 00:14:53,470
yarn also introduced lock files as a

00:14:48,700 --> 00:14:56,230
first NPM followed also introduced local

00:14:53,470 --> 00:14:56,800
caching and p.m. followed but at the

00:14:56,230 --> 00:15:00,519
same time

00:14:56,800 --> 00:15:02,410
NPM comes better know Jess so whenever

00:15:00,519 --> 00:15:04,750
you install node.js you automatically

00:15:02,410 --> 00:15:07,660
have NPM in order to install your you

00:15:04,750 --> 00:15:10,120
have to install it when p.m. so it's

00:15:07,660 --> 00:15:15,430
kind of cumbersome and if you have like

00:15:10,120 --> 00:15:18,660
a large team of developers I would say

00:15:15,430 --> 00:15:22,450
it's probably safer to use NPM because I

00:15:18,660 --> 00:15:25,839
personally like NPM as well yarn is nice

00:15:22,450 --> 00:15:30,070
it's for me it's an issue that you can

00:15:25,839 --> 00:15:31,510
use but it has its drawbacks and also

00:15:30,070 --> 00:15:35,529
what is really awesome

00:15:31,510 --> 00:15:39,250
NPM it contains and px that's really

00:15:35,529 --> 00:15:42,250
awesome tool you can run your commands

00:15:39,250 --> 00:15:45,930
on the fly that that's really great and

00:15:42,250 --> 00:15:48,070
I would also like to introduce PM PM

00:15:45,930 --> 00:15:51,130
although I don't think it's going to

00:15:48,070 --> 00:15:53,649
catch up as much as your NPM but me

00:15:51,130 --> 00:15:56,920
personally I come from Java world and I

00:15:53,649 --> 00:15:59,949
come in really hard to that if you want

00:15:56,920 --> 00:16:01,899
to run your newly pulled a git

00:15:59,949 --> 00:16:07,240
repository you have to run NPM install

00:16:01,899 --> 00:16:10,180
on it and this P NPM it doesn't download

00:16:07,240 --> 00:16:16,300
the file the libraries it hard links

00:16:10,180 --> 00:16:19,180
them the way Linux and it fortunately

00:16:16,300 --> 00:16:21,970
this talk is not about

00:16:19,180 --> 00:16:23,980
the package managers only and we're

00:16:21,970 --> 00:16:26,110
gonna focus rather the build tools

00:16:23,980 --> 00:16:29,920
because we think the package manager of

00:16:26,110 --> 00:16:34,360
choice from the previous two big

00:16:29,920 --> 00:16:37,959
mansions so yarn or our or NPM either of

00:16:34,360 --> 00:16:41,249
them can do the jobs efficiently and you

00:16:37,959 --> 00:16:45,819
won't run into into any issues anymore

00:16:41,249 --> 00:16:49,629
so instead we're gonna focus mainly on

00:16:45,819 --> 00:16:53,949
the build tools and what's available for

00:16:49,629 --> 00:16:56,949
us today are these free make projects

00:16:53,949 --> 00:17:00,160
well the one on the left the web pack

00:16:56,949 --> 00:17:02,980
that's kind of the behemoth on deal of

00:17:00,160 --> 00:17:06,069
the industry nowadays it's like the mega

00:17:02,980 --> 00:17:10,329
build machines big a build machine that

00:17:06,069 --> 00:17:12,819
can build nearly anything and is really

00:17:10,329 --> 00:17:17,020
really powerful too but there are also

00:17:12,819 --> 00:17:18,880
the other two partial and drop each of

00:17:17,020 --> 00:17:20,919
them has their own advantages and

00:17:18,880 --> 00:17:23,470
disadvantages and we're going to cover

00:17:20,919 --> 00:17:26,140
the slider in the end just in the talk

00:17:23,470 --> 00:17:28,419
as demos so you're gonna see how they

00:17:26,140 --> 00:17:31,270
perform and what's the difference and

00:17:28,419 --> 00:17:33,820
how that behaves so when it comes to web

00:17:31,270 --> 00:17:38,470
pack as I said it's an old purpose-built

00:17:33,820 --> 00:17:42,130
tool also the it requires configuration

00:17:38,470 --> 00:17:49,059
it doesn't work well out of the box

00:17:42,130 --> 00:17:51,279
you usually and in really 99.9% cases

00:17:49,059 --> 00:17:57,490
you need to have some configuration for

00:17:51,279 --> 00:18:01,360
it do since it's so used it and it is

00:17:57,490 --> 00:18:06,539
extensible it already has a huge

00:18:01,360 --> 00:18:09,100
population of plugins and other

00:18:06,539 --> 00:18:12,039
extensions that can help you with the

00:18:09,100 --> 00:18:14,370
build process on the other hand the

00:18:12,039 --> 00:18:17,470
person throw up are much younger

00:18:14,370 --> 00:18:19,480
projects though they focus each of them

00:18:17,470 --> 00:18:23,559
are in different aspects of the of the

00:18:19,480 --> 00:18:26,740
build process when we go from the

00:18:23,559 --> 00:18:29,530
opposite direction from the Rob rollup

00:18:26,740 --> 00:18:29,900
is focused on building libraries so if

00:18:29,530 --> 00:18:33,890
you're

00:18:29,900 --> 00:18:38,380
building library to be sure Christian

00:18:33,890 --> 00:18:43,790
sir are being published roll up is

00:18:38,380 --> 00:18:47,420
really focused on this type of love this

00:18:43,790 --> 00:18:51,170
type of tasks they introduce the static

00:18:47,420 --> 00:18:54,910
analysis before the build to employ

00:18:51,170 --> 00:18:57,950
tree-shaking there so they climb and

00:18:54,910 --> 00:19:02,090
program later find out if it's true or

00:18:57,950 --> 00:19:04,100
not they claimed their build size when

00:19:02,090 --> 00:19:08,360
it comes to libraries is much smaller

00:19:04,100 --> 00:19:11,810
than what comes out of a pack and also

00:19:08,360 --> 00:19:16,610
they are focused on building the yes

00:19:11,810 --> 00:19:18,650
modules and also out of these es modules

00:19:16,610 --> 00:19:21,830
they can build any other target so they

00:19:18,650 --> 00:19:24,980
can build Judea and they can build other

00:19:21,830 --> 00:19:28,340
stuff as well and in the middle we have

00:19:24,980 --> 00:19:32,420
parcel which is the FIR - and that one

00:19:28,340 --> 00:19:34,660
is actually focused on the other target

00:19:32,420 --> 00:19:39,970
that we have that the web applications

00:19:34,660 --> 00:19:44,120
it introduces a zero config build so

00:19:39,970 --> 00:19:47,380
when you don't want to do you an extra

00:19:44,120 --> 00:19:49,580
setup and extra steps to to actually

00:19:47,380 --> 00:19:52,400
spin up an application and make it

00:19:49,580 --> 00:19:55,760
running parcel can do that for you

00:19:52,400 --> 00:19:58,460
without any configuration required and

00:19:55,760 --> 00:20:00,800
since it's written from ground up it's

00:19:58,460 --> 00:20:03,050
much it's claims it's much faster than

00:20:00,800 --> 00:20:05,840
web pack since it can use multiple cores

00:20:03,050 --> 00:20:08,930
so you can have distributed builds and

00:20:05,840 --> 00:20:11,810
it also has file system caching so if

00:20:08,930 --> 00:20:14,180
you're building the application and you

00:20:11,810 --> 00:20:20,450
want to rebuild it it's gonna take much

00:20:14,180 --> 00:20:22,840
less time and since we're building

00:20:20,450 --> 00:20:26,090
packages we don't need just these

00:20:22,840 --> 00:20:28,480
bundlers and compilers we also need

00:20:26,090 --> 00:20:32,830
something called transpilers which is a

00:20:28,480 --> 00:20:35,690
which is a I think an invention in the

00:20:32,830 --> 00:20:37,200
biggest invention in JavaScript world

00:20:35,690 --> 00:20:42,389
probably

00:20:37,200 --> 00:20:44,730
and we have we listed two two main ones

00:20:42,389 --> 00:20:48,480
one is typescript which is like a

00:20:44,730 --> 00:20:52,350
flavour supper set of features above

00:20:48,480 --> 00:20:56,880
JavaScript but it allows you to use all

00:20:52,350 --> 00:21:01,889
that fashion in JavaScript all that all

00:20:56,880 --> 00:21:06,870
its quirks and cool features that new

00:21:01,889 --> 00:21:10,460
JavaScript offers but so it's so it's

00:21:06,870 --> 00:21:13,860
easier for developer to to develop the

00:21:10,460 --> 00:21:16,289
application but also when it's compiled

00:21:13,860 --> 00:21:18,389
it can support all the browsers which

00:21:16,289 --> 00:21:21,990
don't support this type of syntax or

00:21:18,389 --> 00:21:24,149
this type of features it also was was

00:21:21,990 --> 00:21:26,549
the main advantage in its it's also

00:21:24,149 --> 00:21:31,679
recently the name of it it's typescript

00:21:26,549 --> 00:21:34,860
so it's statically typed and therefore

00:21:31,679 --> 00:21:38,220
it allows static verification of your

00:21:34,860 --> 00:21:40,919
code so you can build much more robust

00:21:38,220 --> 00:21:42,750
applications out of the box basically

00:21:40,919 --> 00:21:46,559
via typescript

00:21:42,750 --> 00:21:53,570
the other tool is called Babel and it's

00:21:46,559 --> 00:21:58,159
like sad for JavaScript so it's a

00:21:53,570 --> 00:22:01,230
extensible parser for JavaScript files

00:21:58,159 --> 00:22:03,929
it goes through each of the files and do

00:22:01,230 --> 00:22:07,200
some changes in there so it's basically

00:22:03,929 --> 00:22:12,710
it's a fine that replies tool for

00:22:07,200 --> 00:22:15,539
different syntactic sugars or different

00:22:12,710 --> 00:22:18,389
module types basically and things like

00:22:15,539 --> 00:22:21,200
that so so you can modify the files that

00:22:18,389 --> 00:22:25,799
you are bundling or compiling afterwards

00:22:21,200 --> 00:22:28,250
to alert to some kind of a standardized

00:22:25,799 --> 00:22:28,250
syntax

00:22:29,520 --> 00:22:37,030
so we're gonna focus rather the papal

00:22:34,630 --> 00:22:39,310
stuffed and type script because types

00:22:37,030 --> 00:22:41,590
could be it's fairly easy to use you

00:22:39,310 --> 00:22:45,400
just use basically a bit different

00:22:41,590 --> 00:22:47,170
language but Babel is used over the

00:22:45,400 --> 00:22:49,360
regular JavaScript that you have it's

00:22:47,170 --> 00:22:52,210
it's just another tool in the tool chain

00:22:49,360 --> 00:22:56,290
that you're gonna use as a step in your

00:22:52,210 --> 00:22:58,620
in your build process as you can see we

00:22:56,290 --> 00:23:04,210
have listed few config options in there

00:22:58,620 --> 00:23:06,250
that's that's what Bible Con seems it

00:23:04,210 --> 00:23:08,620
has some presets which is like bundles

00:23:06,250 --> 00:23:11,950
of plugins so you don't need to define

00:23:08,620 --> 00:23:14,890
what plugins to use and what what extra

00:23:11,950 --> 00:23:17,830
options these plugins have to have set

00:23:14,890 --> 00:23:20,140
up to support your use case and then you

00:23:17,830 --> 00:23:23,040
can list also your plugins so as you can

00:23:20,140 --> 00:23:25,480
see it's really really extensible and

00:23:23,040 --> 00:23:27,610
you can you can define which paper

00:23:25,480 --> 00:23:29,920
config to use based on your environment

00:23:27,610 --> 00:23:31,180
and based on what kind of build you do

00:23:29,920 --> 00:23:36,940
so

00:23:31,180 --> 00:23:37,570
I think that's okay okay enough with the

00:23:36,940 --> 00:23:43,680
boring stuff

00:23:37,570 --> 00:23:49,030
the before is now and such let's focus

00:23:43,680 --> 00:23:53,740
on some examples we have prepared two

00:23:49,030 --> 00:23:57,640
scenarios one is the publication

00:23:53,740 --> 00:24:00,670
web application but the new the public

00:23:57,640 --> 00:24:03,430
application usually has which was react

00:24:00,670 --> 00:24:05,580
from yak framework because our using

00:24:03,430 --> 00:24:08,680
react framework you might argue that

00:24:05,580 --> 00:24:10,990
would like to use angular in the bull

00:24:08,680 --> 00:24:15,060
chain it wouldn't probably change that

00:24:10,990 --> 00:24:17,520
much we also want development server so

00:24:15,060 --> 00:24:22,770
whenever developer writes

00:24:17,520 --> 00:24:26,590
awesome code the browser refreshes and

00:24:22,770 --> 00:24:29,710
developer can see his new awesome

00:24:26,590 --> 00:24:32,950
changes we'd also have tree shaking

00:24:29,710 --> 00:24:34,600
because we heard about new feature has

00:24:32,950 --> 00:24:38,470
been introduced in JavaScript like a

00:24:34,600 --> 00:24:40,980
year or two ago that it's that code and

00:24:38,470 --> 00:24:42,660
Ozzy analyzes

00:24:40,980 --> 00:24:45,179
if you've ever worked in C you probably

00:24:42,660 --> 00:24:45,900
heard about it as well Charles could

00:24:45,179 --> 00:24:49,260
heard about it

00:24:45,900 --> 00:24:51,860
two years ago I believe and also want

00:24:49,260 --> 00:24:55,020
one configuration file for both

00:24:51,860 --> 00:25:03,150
developer developers and the actual

00:24:55,020 --> 00:25:05,820
production as it as it is we want to

00:25:03,150 --> 00:25:13,410
also have static files like Styles

00:25:05,820 --> 00:25:18,600
images videos whatever you choose so let

00:25:13,410 --> 00:25:26,370
me share with you the demonstration over

00:25:18,600 --> 00:25:30,780
here so first of all let's look at a

00:25:26,370 --> 00:25:33,799
divot pack application how config for

00:25:30,780 --> 00:25:38,220
that pack application could look like

00:25:33,799 --> 00:25:42,150
as I said it's fairly easy but at the

00:25:38,220 --> 00:25:44,970
same time just just I'm going to jump in

00:25:42,150 --> 00:25:47,630
that we have a single just to just

00:25:44,970 --> 00:25:50,460
introduce the demo a bit we have a

00:25:47,630 --> 00:25:53,100
application and we're going to build

00:25:50,460 --> 00:25:58,530
this application via different tools so

00:25:53,100 --> 00:26:01,200
we're gonna see how easy or hard is to

00:25:58,530 --> 00:26:05,160
come up with a configuration for such

00:26:01,200 --> 00:26:07,350
scenario and how the build behaves

00:26:05,160 --> 00:26:11,730
basically what kind of build you get out

00:26:07,350 --> 00:26:13,890
of it so if it's bigger smaller how the

00:26:11,730 --> 00:26:15,000
linking works and stuff like that yeah

00:26:13,890 --> 00:26:18,840
thank you

00:26:15,000 --> 00:26:22,160
I probably forgot to tell it so as you

00:26:18,840 --> 00:26:27,179
can see here is the fact config file

00:26:22,160 --> 00:26:30,120
many of you probably saw it before if a

00:26:27,179 --> 00:26:35,429
lot of plugins just to copy some files

00:26:30,120 --> 00:26:37,559
create HTML extract CSS then we have

00:26:35,429 --> 00:26:42,690
these rules nobody really understands

00:26:37,559 --> 00:26:46,559
them then you have the dev server and

00:26:42,690 --> 00:26:49,110
you also have these optimizations split

00:26:46,559 --> 00:26:51,870
chunks chunk all I have to Google that

00:26:49,110 --> 00:26:53,730
all the times just to be clear it's

00:26:51,870 --> 00:26:57,000
optimization thing and

00:26:53,730 --> 00:27:00,210
it's something of the clever guys at

00:26:57,000 --> 00:27:04,740
Google figure out nobody else can

00:27:00,210 --> 00:27:10,950
understand it as well and let's see how

00:27:04,740 --> 00:27:18,450
do not this bomb but how do actual build

00:27:10,950 --> 00:27:22,019
looks like this one yeah yeah so if we

00:27:18,450 --> 00:27:27,090
were if we were to run NPM start or or

00:27:22,019 --> 00:27:29,490
NPM NPM start for this instance this is

00:27:27,090 --> 00:27:32,549
what we would see this is what you would

00:27:29,490 --> 00:27:36,260
see in your command line it says that

00:27:32,549 --> 00:27:40,380
you have like couple of JavaScript files

00:27:36,260 --> 00:27:42,350
one of them is seven megabytes big Wow

00:27:40,380 --> 00:27:45,679
how that happened

00:27:42,350 --> 00:27:48,570
then you suddenly run NPM run both and

00:27:45,679 --> 00:27:51,179
you can see that the vendors is not that

00:27:48,570 --> 00:27:52,409
big because of the tree shaking that

00:27:51,179 --> 00:27:55,830
comes with a backpack

00:27:52,409 --> 00:27:58,700
that's very awesome feature but as you

00:27:55,830 --> 00:28:02,159
as you saw the config is not that easy

00:27:58,700 --> 00:28:05,330
when it comes to the configuration this

00:28:02,159 --> 00:28:09,440
is Carl's daily job so he's basically

00:28:05,330 --> 00:28:12,840
doing this kind of stuff on daily basis

00:28:09,440 --> 00:28:16,049
but it still took him about a hour to

00:28:12,840 --> 00:28:19,080
build from scratch just to be sure that

00:28:16,049 --> 00:28:22,080
all the required stuff are in there and

00:28:19,080 --> 00:28:23,789
to be sure that the application works so

00:28:22,080 --> 00:28:25,950
if you change something in the

00:28:23,789 --> 00:28:28,110
application layout you would still need

00:28:25,950 --> 00:28:30,809
to go to this config file and it just

00:28:28,110 --> 00:28:35,669
said or if you choose to use a different

00:28:30,809 --> 00:28:39,419
for example styling thing not just plain

00:28:35,669 --> 00:28:42,299
CSS or you will rather use sass or

00:28:39,419 --> 00:28:46,559
something else you would need to

00:28:42,299 --> 00:28:52,830
probably adjust the config so it's it's

00:28:46,559 --> 00:28:56,690
not as easy as it might as it might look

00:28:52,830 --> 00:29:00,890
like yeah oh it doesn't

00:28:56,690 --> 00:29:03,900
probably that's probably fulfilled yeah

00:29:00,890 --> 00:29:06,720
to parse a config file

00:29:03,900 --> 00:29:09,780
I can't fight and find any that's

00:29:06,720 --> 00:29:14,310
because if you want to earn a parcel

00:29:09,780 --> 00:29:18,090
both we just do this just run one

00:29:14,310 --> 00:29:22,350
command personal build for instance dogs

00:29:18,090 --> 00:29:26,760
application you want it to be on public

00:29:22,350 --> 00:29:29,790
URL just shall do each other / you don't

00:29:26,760 --> 00:29:35,160
want any no source maps and you want it

00:29:29,790 --> 00:29:39,120
to be in the in one folder we're

00:29:35,160 --> 00:29:41,180
pointing it out to one HTML file we are

00:29:39,120 --> 00:29:45,210
not pointing it to JavaScript file

00:29:41,180 --> 00:29:47,820
because let me show how the index looks

00:29:45,210 --> 00:29:54,270
like this is something similar to what

00:29:47,820 --> 00:29:57,900
it looked like before like in 2014 15 or

00:29:54,270 --> 00:30:00,390
so you have just one one script included

00:29:57,900 --> 00:30:02,760
in here and you would expect that in the

00:30:00,390 --> 00:30:08,700
index dot JSP will be new in their

00:30:02,760 --> 00:30:14,700
application no classic react application

00:30:08,700 --> 00:30:19,410
is using imports and such so that's a

00:30:14,700 --> 00:30:24,210
very clever idea but at the same time

00:30:19,410 --> 00:30:28,700
let me show you preview the cold start

00:30:24,210 --> 00:30:34,740
can take few seconds it can take up to

00:30:28,700 --> 00:30:36,510
ten tens of seconds and I showed you to

00:30:34,740 --> 00:30:40,110
the docs application that is fairly

00:30:36,510 --> 00:30:42,480
fairly ok fairly small but what happens

00:30:40,110 --> 00:30:44,880
if you are going to use a library it

00:30:42,480 --> 00:30:47,910
doesn't fully support tree shake or

00:30:44,880 --> 00:30:50,760
relies on tree shaking you might end up

00:30:47,910 --> 00:30:53,040
with a bit of problems here this is why

00:30:50,760 --> 00:30:56,460
everybody hates charge script developers

00:30:53,040 --> 00:30:59,370
because their applications are huge so

00:30:56,460 --> 00:31:03,140
that's because there is no tree shaking

00:30:59,370 --> 00:31:06,140
probably and that's one of the problems

00:31:03,140 --> 00:31:06,140
with

00:31:08,389 --> 00:31:19,829
let me go back to prison thing it is one

00:31:12,570 --> 00:31:22,739
of the problems that has a parcel so as

00:31:19,829 --> 00:31:25,529
we said webpack has a huge selections of

00:31:22,739 --> 00:31:29,129
plugins it is large community so

00:31:25,529 --> 00:31:31,619
whenever you find something like you

00:31:29,129 --> 00:31:34,499
stumble upon a problem the terminology

00:31:31,619 --> 00:31:37,019
also do an error you can just paste the

00:31:34,499 --> 00:31:39,949
error into into Google and probably

00:31:37,019 --> 00:31:43,369
Stack Overflow has tens of replies to it

00:31:39,949 --> 00:31:47,549
it is a relatively good documentation I

00:31:43,369 --> 00:31:50,879
could find anything in there but it's

00:31:47,549 --> 00:31:53,869
hard to set up and it requires a lot of

00:31:50,879 --> 00:31:56,729
world boilerplate there are tons of

00:31:53,869 --> 00:31:59,999
thousands of boilerplate applications

00:31:56,729 --> 00:32:03,629
just to bootstrap react application bit

00:31:59,999 --> 00:32:07,889
material UI base backpack if you google

00:32:03,629 --> 00:32:11,459
material UI that PAC react in the github

00:32:07,889 --> 00:32:18,659
to he'll probably find tens repositories

00:32:11,459 --> 00:32:21,719
that does just this it all comes back to

00:32:18,659 --> 00:32:23,759
the extensive configuration because it's

00:32:21,719 --> 00:32:30,329
not easy to figure out the configuration

00:32:23,759 --> 00:32:31,859
right and for simple use cases you still

00:32:30,329 --> 00:32:34,199
need a lot of configuration and you

00:32:31,859 --> 00:32:36,690
still need to know what you are doing

00:32:34,199 --> 00:32:38,999
with the backpack so it's usually easier

00:32:36,690 --> 00:32:41,519
to start with some bootstrap and you're

00:32:38,999 --> 00:32:46,259
basically stripping out of the bootstrap

00:32:41,519 --> 00:32:48,659
what you don't need and that's probably

00:32:46,259 --> 00:32:51,209
not the best idea to yeah just spend

00:32:48,659 --> 00:32:55,589
days before you even start developing

00:32:51,209 --> 00:32:57,719
application so you can go to parcel it's

00:32:55,589 --> 00:33:00,359
easy to set up as I said you just point

00:32:57,719 --> 00:33:05,579
it to an HTML file where you include

00:33:00,359 --> 00:33:07,879
your JavaScript files yeah but it

00:33:05,579 --> 00:33:11,219
doesn't have has to shaking which is

00:33:07,879 --> 00:33:15,899
fairly problematic it is some

00:33:11,219 --> 00:33:18,619
experimental ones I tried them and they

00:33:15,899 --> 00:33:20,729
work ok

00:33:18,619 --> 00:33:24,659
sometimes they work sometimes they don't

00:33:20,729 --> 00:33:27,359
and it's harder to use in specific

00:33:24,659 --> 00:33:30,119
projects if you want for instance

00:33:27,359 --> 00:33:34,440
custom variables from from environment

00:33:30,119 --> 00:33:36,779
you have to change the build the thing

00:33:34,440 --> 00:33:40,710
is with tree-shaking is that if you use

00:33:36,779 --> 00:33:43,559
well-behaved libraries or dependencies

00:33:40,710 --> 00:33:47,849
like material UI you don't need that you

00:33:43,559 --> 00:33:50,669
can really work your way or make the

00:33:47,849 --> 00:33:53,820
application work even without the tree

00:33:50,669 --> 00:33:56,729
shaking required so but if you use

00:33:53,820 --> 00:34:01,009
something which is not written in a way

00:33:56,729 --> 00:34:04,440
that it's it it relies on you shaking

00:34:01,009 --> 00:34:08,669
you might end up with a big part no big

00:34:04,440 --> 00:34:12,500
chunk of JavaScript ok you might ask how

00:34:08,669 --> 00:34:15,419
to actually write an NPM package library

00:34:12,500 --> 00:34:17,789
many of you will probably and are

00:34:15,419 --> 00:34:21,529
probably writing web applications and

00:34:17,789 --> 00:34:27,240
some of you I believe are writing and

00:34:21,529 --> 00:34:36,929
library so let's define the library we

00:34:27,240 --> 00:34:40,349
want to create it is like you you export

00:34:36,929 --> 00:34:41,059
one huge chunk of file called index dot

00:34:40,349 --> 00:34:44,279
J's

00:34:41,059 --> 00:34:48,329
that has all the files and you also want

00:34:44,279 --> 00:34:49,649
to export small parts of your library in

00:34:48,329 --> 00:34:53,039
order to support the tree-shaking

00:34:49,649 --> 00:34:54,809
actually so we're going to show you how

00:34:53,039 --> 00:34:59,369
to do that

00:34:54,809 --> 00:35:03,869
it also has needs the support for named

00:34:59,369 --> 00:35:06,809
and default exports you can't have ten

00:35:03,869 --> 00:35:12,809
default exports in the index yes it's

00:35:06,809 --> 00:35:15,329
not how it actually works and it remove

00:35:12,809 --> 00:35:18,089
the external libraries you don't really

00:35:15,329 --> 00:35:20,069
want if a library that also includes

00:35:18,089 --> 00:35:24,599
your react and read acts and other

00:35:20,069 --> 00:35:26,970
libraries yeah that's these are

00:35:24,599 --> 00:35:29,579
requirements we expect from our build

00:35:26,970 --> 00:35:30,579
tools to be able to deliver based on our

00:35:29,579 --> 00:35:34,390
library

00:35:30,579 --> 00:35:37,420
so if we are developing a library we

00:35:34,390 --> 00:35:40,239
want to build the actual output of the

00:35:37,420 --> 00:35:41,950
build process to fulfill these needs for

00:35:40,239 --> 00:35:50,140
the developers that's can I use the

00:35:41,950 --> 00:35:54,130
library so let's dive in this is however

00:35:50,140 --> 00:36:00,220
Peck config might look like these two

00:35:54,130 --> 00:36:04,420
functions are fairly easy and our core

00:36:00,220 --> 00:36:08,079
principle of having multiple exported

00:36:04,420 --> 00:36:10,239
files as you can see here we export

00:36:08,079 --> 00:36:13,869
index.js and we also export everything

00:36:10,239 --> 00:36:18,069
that is in source components we have two

00:36:13,869 --> 00:36:25,089
components in here and it bundles into

00:36:18,069 --> 00:36:28,599
multiple types of bundles UMD it doesn't

00:36:25,089 --> 00:36:32,079
have yes an as-of-yet about that packed

00:36:28,599 --> 00:36:35,469
five promised it to be there so we'll

00:36:32,079 --> 00:36:38,589
see about like in two three months they

00:36:35,469 --> 00:36:41,229
will probably be there and you might say

00:36:38,589 --> 00:36:45,069
that it looks kind of similar ish the

00:36:41,229 --> 00:36:48,700
rules are still here and there are no

00:36:45,069 --> 00:36:52,180
plugins we'll just define the externals

00:36:48,700 --> 00:36:54,700
here based on the dependencies so please

00:36:52,180 --> 00:36:57,069
have your dependencies in order not to

00:36:54,700 --> 00:37:01,180
put develop developer dependencies in

00:36:57,069 --> 00:37:04,960
here it would be quite strange and what

00:37:01,180 --> 00:37:08,920
what it looks like on the note it

00:37:04,960 --> 00:37:10,960
creates three folders three like

00:37:08,920 --> 00:37:13,930
environments one is common J's

00:37:10,960 --> 00:37:17,999
the other one is its modules yes M and

00:37:13,930 --> 00:37:21,640
then the other one the last one is und

00:37:17,999 --> 00:37:25,660
that's where you would go if you want to

00:37:21,640 --> 00:37:29,799
a flight bond index.js imported may also

00:37:25,660 --> 00:37:33,519
tell you that in your packages jason you

00:37:29,799 --> 00:37:37,719
should always include main and module so

00:37:33,519 --> 00:37:39,759
when you are importing something from if

00:37:37,719 --> 00:37:43,450
someone is going to use a library and

00:37:39,759 --> 00:37:47,599
they import your index

00:37:43,450 --> 00:37:52,160
they the the bundle file or the bundler

00:37:47,599 --> 00:37:56,920
chooses the correct one so yeah let's

00:37:52,160 --> 00:37:59,329
look at raw we're discussing it before

00:37:56,920 --> 00:38:01,160
do you have any metrics on the build oh

00:37:59,329 --> 00:38:06,140
yeah definitely

00:38:01,160 --> 00:38:10,430
thanks for pointing that out yeah so

00:38:06,140 --> 00:38:13,099
this is how do the output of build would

00:38:10,430 --> 00:38:18,440
look like there's just just a couple of

00:38:13,099 --> 00:38:20,210
kilobytes for each environment it's

00:38:18,440 --> 00:38:23,450
nothing too fancy nothing too

00:38:20,210 --> 00:38:26,119
complicated so we don't expect anything

00:38:23,450 --> 00:38:28,940
huge don't expect anything to like

00:38:26,119 --> 00:38:32,680
strange to be happening here so bear in

00:38:28,940 --> 00:38:35,299
mind there are these are kilobytes so

00:38:32,680 --> 00:38:37,280
let's move on to roll up they promised

00:38:35,299 --> 00:38:40,010
us something better it promised that the

00:38:37,280 --> 00:38:42,319
promised us that it will be the bundles

00:38:40,010 --> 00:38:48,380
will be smaller that they support ESM

00:38:42,319 --> 00:38:50,450
and that it will be much better so we

00:38:48,380 --> 00:38:55,069
still have this one function to grab all

00:38:50,450 --> 00:38:58,430
things in source code with some some

00:38:55,069 --> 00:39:04,010
Global's some externals some babel

00:38:58,430 --> 00:39:08,990
options a few plugins those are mostly

00:39:04,010 --> 00:39:16,579
just to resolve javascript post CSS in

00:39:08,990 --> 00:39:20,740
injects and one analyzer so we have two

00:39:16,579 --> 00:39:26,599
two environments common J's and es m and

00:39:20,740 --> 00:39:32,319
we also have the UMD and output looks

00:39:26,599 --> 00:39:35,720
like the SM actually looks like roundest

00:39:32,319 --> 00:39:39,049
yes um actually looks like yes M it does

00:39:35,720 --> 00:39:41,240
have exports and imports rather than in

00:39:39,049 --> 00:39:44,540
the web pack world where you have like

00:39:41,240 --> 00:39:47,780
like this strange thing so there's a

00:39:44,540 --> 00:39:50,869
huge pass you have just the small files

00:39:47,780 --> 00:39:53,540
tree shaking is come coming out of the

00:39:50,869 --> 00:39:56,440
box that's that's awesome

00:39:53,540 --> 00:39:59,900
you also have

00:39:56,440 --> 00:40:03,440
environments c'mon GS and UMD just to

00:39:59,900 --> 00:40:11,560
support all the browsers or or any other

00:40:03,440 --> 00:40:18,800
goodies and let's look at the statistics

00:40:11,560 --> 00:40:22,180
okay so for it has the file files are

00:40:18,800 --> 00:40:26,240
really small it has only a few bytes

00:40:22,180 --> 00:40:29,240
no no kilobytes just bytes as you can

00:40:26,240 --> 00:40:33,310
see that's really really nice even for

00:40:29,240 --> 00:40:40,640
the UMD it's just just a couple of bites

00:40:33,310 --> 00:40:52,360
very nice to see so yeah let's dive back

00:40:40,640 --> 00:40:54,350
to here so what we saw is that that pack

00:40:52,360 --> 00:40:57,650
is just bad back

00:40:54,350 --> 00:41:00,080
it's what we expect it from but throw up

00:40:57,650 --> 00:41:00,860
that's very interesting the bundles were

00:41:00,080 --> 00:41:04,700
smaller

00:41:00,860 --> 00:41:07,640
it supports yes I'm not silly and even

00:41:04,700 --> 00:41:10,460
though it has named exports like me

00:41:07,640 --> 00:41:12,770
personally I've once found out that my

00:41:10,460 --> 00:41:16,310
build was broken because of named

00:41:12,770 --> 00:41:19,280
exports in web pack and we found out all

00:41:16,310 --> 00:41:22,270
the way in production because tests

00:41:19,280 --> 00:41:22,270
weren't failing at all

00:41:23,050 --> 00:41:29,360
that's very failing at all nothing

00:41:25,910 --> 00:41:31,670
happened it just happened only when we

00:41:29,360 --> 00:41:34,640
used the library in production because

00:41:31,670 --> 00:41:37,280
of the named export because that pack

00:41:34,640 --> 00:41:41,360
assumed the named export was there for

00:41:37,280 --> 00:41:43,820
before so that's when we looked at the

00:41:41,360 --> 00:41:46,310
book tools and we saw the roll up man

00:41:43,820 --> 00:41:47,200
with the Rob we need to experience this

00:41:46,310 --> 00:41:50,750
issue anymore

00:41:47,200 --> 00:41:52,850
so on the other hand when you compare

00:41:50,750 --> 00:41:54,410
web pack in the roll up convicts you see

00:41:52,850 --> 00:41:57,830
not much of a difference it's it's

00:41:54,410 --> 00:42:00,410
fairly big and structured config so you

00:41:57,830 --> 00:42:03,800
still need to come up with that it's

00:42:00,410 --> 00:42:07,720
tony to invent those yeah exactly

00:42:03,800 --> 00:42:10,540
and they also drawback for web pack

00:42:07,720 --> 00:42:13,450
that it doesn't support ESM modules as I

00:42:10,540 --> 00:42:17,560
said epic five is promising them

00:42:13,450 --> 00:42:24,460
we'll see they'd already deliver them so

00:42:17,560 --> 00:42:27,640
yeah so in a bit lighter note we kind of

00:42:24,460 --> 00:42:31,240
draw some parallels and take this

00:42:27,640 --> 00:42:33,760
lightly as a bit of a joke not too

00:42:31,240 --> 00:42:36,730
seriously when we compare these two

00:42:33,760 --> 00:42:41,500
built Hills we cannot draw a parallel

00:42:36,730 --> 00:42:43,900
between them and backpack it's a really

00:42:41,500 --> 00:42:47,010
robust tool big - that can achieve

00:42:43,900 --> 00:42:50,619
nearly anything you wanted to achieve

00:42:47,010 --> 00:42:54,010
but you need to know how to configure it

00:42:50,619 --> 00:42:56,560
you need to know how to use it and it's

00:42:54,010 --> 00:42:59,080
not always as easy as you would expect

00:42:56,560 --> 00:43:01,960
it to be choose to support different

00:42:59,080 --> 00:43:05,280
scenarios on the other hand if we're

00:43:01,960 --> 00:43:09,280
writing a document in wim and we want to

00:43:05,280 --> 00:43:13,570
build a PDF out of it or just have a

00:43:09,280 --> 00:43:17,550
text document if we use parcel we can do

00:43:13,570 --> 00:43:21,520
a parallel to office world Office Word

00:43:17,550 --> 00:43:23,619
which gives us what we expected - so it

00:43:21,520 --> 00:43:25,900
gives us some styling we can draw a

00:43:23,619 --> 00:43:30,040
document we can include pictures and we

00:43:25,900 --> 00:43:34,750
get a document out of it but we can't we

00:43:30,040 --> 00:43:37,540
can't use this as a as our IDE for

00:43:34,750 --> 00:43:41,530
example or we can but we are not that

00:43:37,540 --> 00:43:45,730
masochistic yeah and the last one is fro

00:43:41,530 --> 00:43:49,750
op which is a which is like an IDE

00:43:45,730 --> 00:43:51,839
basically which which allows you really

00:43:49,750 --> 00:43:57,180
create possibilities when it comes to

00:43:51,839 --> 00:44:00,460
going through the rabbit hole - to the

00:43:57,180 --> 00:44:03,970
internals of the code yeah but when we

00:44:00,460 --> 00:44:07,540
want when we want it to be easy to use

00:44:03,970 --> 00:44:10,510
it's not as well as easy to use when we

00:44:07,540 --> 00:44:13,750
converge the MS word for example just

00:44:10,510 --> 00:44:16,390
bear in mind display package libraries

00:44:13,750 --> 00:44:17,410
were chosen by us the revellers the

00:44:16,390 --> 00:44:19,720
chosen

00:44:17,410 --> 00:44:22,359
to draw a parallel between webpack

00:44:19,720 --> 00:44:24,700
because oftentimes when I speak to

00:44:22,359 --> 00:44:26,799
developers they use webpack even though

00:44:24,700 --> 00:44:29,769
they don't understand it fully so we

00:44:26,799 --> 00:44:31,779
wanted to show you that okay we have

00:44:29,769 --> 00:44:33,849
that back but we also have a parcel we

00:44:31,779 --> 00:44:36,069
also have a robot which is throw-up is

00:44:33,849 --> 00:44:37,989
really awesome for libraries parcel is

00:44:36,069 --> 00:44:40,749
really awesome for small applications

00:44:37,989 --> 00:44:47,319
and don't be afraid to experience with

00:44:40,749 --> 00:44:50,650
with them like and you can go dig deeply

00:44:47,319 --> 00:44:54,819
and find some different build tools that

00:44:50,650 --> 00:44:58,299
fits your needs so yeah this is the aim

00:44:54,819 --> 00:45:00,910
of this presentation I hope you enjoyed

00:44:58,299 --> 00:45:06,460
it I hope you learned something new or

00:45:00,910 --> 00:45:08,140
just enjoyed the time here and last but

00:45:06,460 --> 00:45:10,359
not least if you're interested in the

00:45:08,140 --> 00:45:12,640
source code we use for demos and you

00:45:10,359 --> 00:45:15,460
would like to see or build this for

00:45:12,640 --> 00:45:17,890
yourself or you want to use the config

00:45:15,460 --> 00:45:22,450
files you can find it on that link in

00:45:17,890 --> 00:45:24,519
the middle on github and that's probably

00:45:22,450 --> 00:45:27,430
all of it from us thank you for

00:45:24,519 --> 00:45:30,339
attention thank you for listening to us

00:45:27,430 --> 00:45:32,369
and if you have any questions please go

00:45:30,339 --> 00:45:32,369
ahead

00:45:50,000 --> 00:46:06,079
yeah yes yes so the question was that if

00:46:03,000 --> 00:46:09,000
you're new to the industry or new to the

00:46:06,079 --> 00:46:12,660
front-end development world and you want

00:46:09,000 --> 00:46:15,349
to start a project from scratch it's

00:46:12,660 --> 00:46:22,369
still fairly complicated to set it up

00:46:15,349 --> 00:46:22,369
and that's not a question

00:46:22,880 --> 00:46:29,640
it's just you

00:46:25,079 --> 00:46:32,640
try using some some pre-configured

00:46:29,640 --> 00:46:34,829
configs like either that but if you're

00:46:32,640 --> 00:46:38,640
starting up like writing application of

00:46:34,829 --> 00:46:40,920
the library you can go pretty well with

00:46:38,640 --> 00:46:44,240
the parcel which is a zero config thing

00:46:40,920 --> 00:46:48,869
and you just need to install it via node

00:46:44,240 --> 00:46:52,650
which adds it to your package to chasten

00:46:48,869 --> 00:46:55,349
and then you would just define one build

00:46:52,650 --> 00:46:59,420
command that would build the application

00:46:55,349 --> 00:47:02,670
for you so this is base maybe the

00:46:59,420 --> 00:47:05,450
biggest simplification we can offer for

00:47:02,670 --> 00:47:05,450
for onboarding

00:47:06,380 --> 00:47:24,890
I wanted to point out it there's so many

00:47:22,160 --> 00:47:29,930
more parades you just choose which one

00:47:24,890 --> 00:47:31,130
you want download the steak and you're

00:47:29,930 --> 00:47:33,170
free to free to go

00:47:31,130 --> 00:47:35,360
but with these border plates there is a

00:47:33,170 --> 00:47:37,550
problem that you might end up with

00:47:35,360 --> 00:47:44,360
something that you really don't I don't

00:47:37,550 --> 00:47:50,360
use or don't need it anymore and there's

00:47:44,360 --> 00:47:51,510
any other question okay thank you very

00:47:50,360 --> 00:47:58,359
much

00:47:51,510 --> 00:47:58,359

YouTube URL: https://www.youtube.com/watch?v=xk6ReBLA30Q


