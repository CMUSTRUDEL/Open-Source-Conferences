Title: Insights: the state analyzer to rule them all - DevConf.CZ 2020
Publication date: 2020-03-27
Playlist: DevConfCZ 2020
Description: 
	Speakers: Ivan Nečas

The world of running services has been shifting quite significantly towards providing a lot of diagnostic information to help with keeping the world running. However, what that means is also chance of getting overwhelmed by the amount of the data you're collecting, and the need of having more automation around processing that. While many services and tools exist in this space, they usually depend on some external service or some heavy machinery to work.

At this talk, I would like to talk about Insights project (https://github.com/RedHatInsights/insights-core), that is aiming at being able to process variety of diagnostics information from
different sources and define rules to provide more relevant… well… insights about the state, that can be used for further troubleshooting or fixing.

I will be talking about how we use it in OpenShift, as well as about other real of potential use-case, so that next time you're facing with this kind of problems, you know another tool to consider.

[ https://sched.co/YOv9 ]

--
Recordings of talks at DevConf are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:01,339 --> 00:00:06,560
hello everyone yeah I will introduce

00:00:05,090 --> 00:00:08,750
myself my name is your on the chest and

00:00:06,560 --> 00:00:11,809
I will spend some time with me talking

00:00:08,750 --> 00:00:14,719
about the insights and I hope you will

00:00:11,809 --> 00:00:17,720
enjoy at least a bit of it if not no

00:00:14,719 --> 00:00:20,990
internet is free we are not locking the

00:00:17,720 --> 00:00:23,570
doors so but I hope you actually get

00:00:20,990 --> 00:00:26,449
something out also one important thing

00:00:23,570 --> 00:00:28,820
the it's a lot of slippery slopes and

00:00:26,449 --> 00:00:33,470
other with only slopes out there tested

00:00:28,820 --> 00:00:36,650
myself so be careful and not not not go

00:00:33,470 --> 00:00:40,100
as I did so that was the most important

00:00:36,650 --> 00:00:41,330
thing you should learn this talk and I

00:00:40,100 --> 00:00:44,750
guess we can just go ahead and get

00:00:41,330 --> 00:00:47,240
started with with the content so one

00:00:44,750 --> 00:00:50,270
warning this presentation contains some

00:00:47,240 --> 00:00:53,660
subliminal messages bajas probably put

00:00:50,270 --> 00:00:56,090
parabolic coamo so watch for that and I

00:00:53,660 --> 00:01:02,000
will ask you at the end like what what

00:00:56,090 --> 00:01:07,310
was the content so be prepared so a bit

00:01:02,000 --> 00:01:10,729
above me I'm this guy here is a tech

00:01:07,310 --> 00:01:15,289
lead for initiative called connected

00:01:10,729 --> 00:01:16,939
custom experience and yeah we are trying

00:01:15,289 --> 00:01:18,979
to improve the support ability of their

00:01:16,939 --> 00:01:20,990
products based on the health data that

00:01:18,979 --> 00:01:24,350
we are getting from the clusters that

00:01:20,990 --> 00:01:27,289
are running off to Red Hat products so

00:01:24,350 --> 00:01:30,289
here I'm trying to help out a bit the

00:01:27,289 --> 00:01:31,569
technical part there so the problem

00:01:30,289 --> 00:01:37,399
domain that we are going to talk about

00:01:31,569 --> 00:01:40,009
is how we can actually help running the

00:01:37,399 --> 00:01:41,869
software when you don't have direct

00:01:40,009 --> 00:01:44,899
access to systems and the only thing

00:01:41,869 --> 00:01:46,850
that you have is some and usually

00:01:44,899 --> 00:01:48,770
multiple ways how to gather the

00:01:46,850 --> 00:01:51,649
information about remote hosts so we

00:01:48,770 --> 00:01:56,689
need to somehow be able to get and

00:01:51,649 --> 00:01:59,719
process and deal with the data that we

00:01:56,689 --> 00:02:01,279
get and we of course have also a lot of

00:01:59,719 --> 00:02:03,319
formats so you can think about different

00:02:01,279 --> 00:02:04,909
formats of the log messages different

00:02:03,319 --> 00:02:06,560
formats for the configuration of the

00:02:04,909 --> 00:02:11,840
software because you know that's fun

00:02:06,560 --> 00:02:13,519
creating new formats so for example like

00:02:11,840 --> 00:02:17,480
what kind of data we are talking about

00:02:13,519 --> 00:02:19,069
when you run your software you know you

00:02:17,480 --> 00:02:22,760
might have some minimal requirements

00:02:19,069 --> 00:02:25,040
like when you have 200 megabytes for

00:02:22,760 --> 00:02:27,650
running opens the core of issues or

00:02:25,040 --> 00:02:29,689
whatever you probably not succeed so you

00:02:27,650 --> 00:02:32,659
know one thing is that just knowing

00:02:29,689 --> 00:02:34,970
where the software is running also

00:02:32,659 --> 00:02:38,780
knowing how the software is configured

00:02:34,970 --> 00:02:40,819
has had a lot of impact in terms of like

00:02:38,780 --> 00:02:44,269
if the software will run correctly or

00:02:40,819 --> 00:02:47,090
not and of course all the software

00:02:44,269 --> 00:02:50,360
should produce some information about

00:02:47,090 --> 00:02:52,400
its run so you might know bar lock or

00:02:50,360 --> 00:02:55,720
should not the or whatever it is for

00:02:52,400 --> 00:02:58,189
collecting the locking information and

00:02:55,720 --> 00:03:02,269
of course like there are many other

00:02:58,189 --> 00:03:04,040
other things we can watch for so what I

00:03:02,269 --> 00:03:06,260
would like to talk about is one project

00:03:04,040 --> 00:03:09,709
one particular project that is open

00:03:06,260 --> 00:03:12,469
source and it's called inside score it's

00:03:09,709 --> 00:03:15,439
available at github and it's the as the

00:03:12,469 --> 00:03:19,159
name says is the sitting at the core of

00:03:15,439 --> 00:03:22,099
the Red Hat product code inside Red Hat

00:03:19,159 --> 00:03:25,250
insights that we are building to help

00:03:22,099 --> 00:03:29,930
our customers and give them advices

00:03:25,250 --> 00:03:32,689
about how they run our software so this

00:03:29,930 --> 00:03:35,569
will be a presentation about how this

00:03:32,689 --> 00:03:39,980
software like the core of it works and

00:03:35,569 --> 00:03:42,650
it will also have some will experience

00:03:39,980 --> 00:03:44,810
some advantage sweet or adventure let's

00:03:42,650 --> 00:03:46,129
say with the live demo which is always

00:03:44,810 --> 00:03:48,379
fun

00:03:46,129 --> 00:03:51,500
so this is the one of the tools that can

00:03:48,379 --> 00:03:53,000
help you actually with dealing with the

00:03:51,500 --> 00:03:56,900
data we are getting from the customers

00:03:53,000 --> 00:03:59,420
and analyzing that so some of the

00:03:56,900 --> 00:04:01,909
properties is that we try for it to be

00:03:59,420 --> 00:04:04,459
versatile so what I will be showing is

00:04:01,909 --> 00:04:06,769
running this tool against live system so

00:04:04,459 --> 00:04:07,190
like I don't need to kind of gather and

00:04:06,769 --> 00:04:10,220
infirm

00:04:07,190 --> 00:04:13,700
in terms of like copying files or at the

00:04:10,220 --> 00:04:15,710
disk and so on but we can also around to

00:04:13,700 --> 00:04:17,330
against the data they were collected

00:04:15,710 --> 00:04:20,570
from remote machines

00:04:17,330 --> 00:04:22,400
so think about source reports as one of

00:04:20,570 --> 00:04:26,510
the examples how many of you know source

00:04:22,400 --> 00:04:28,490
report okay so you are familiar with

00:04:26,510 --> 00:04:30,860
that with those that don't it's

00:04:28,490 --> 00:04:34,310
basically a tool that allows to collect

00:04:30,860 --> 00:04:36,440
as much health data information about

00:04:34,310 --> 00:04:41,480
the system to be shared when somebody

00:04:36,440 --> 00:04:43,820
else tries to help you yeah and this is

00:04:41,480 --> 00:04:46,550
not just a set of like batch scripts or

00:04:43,820 --> 00:04:50,690
some set of regular expressions which

00:04:46,550 --> 00:04:53,240
said that you could do it do as well we

00:04:50,690 --> 00:04:55,490
actually using it as as I mention as at

00:04:53,240 --> 00:04:59,060
the core of multiple production systems

00:04:55,490 --> 00:05:01,790
so we try to be as robust as possible

00:04:59,060 --> 00:05:03,680
and at the same time we also need to

00:05:01,790 --> 00:05:05,570
minimize the set of requirements or

00:05:03,680 --> 00:05:07,940
dependencies for the software so that

00:05:05,570 --> 00:05:10,730
actually we can run it and make it as a

00:05:07,940 --> 00:05:12,080
as a dependency by itself so we don't

00:05:10,730 --> 00:05:14,000
want to download the whole in the

00:05:12,080 --> 00:05:22,370
internet when you are installing this

00:05:14,000 --> 00:05:24,830
thing yeah so the purpose is we can

00:05:22,370 --> 00:05:28,130
parse the raw files with it we can

00:05:24,830 --> 00:05:31,370
define data model on top of this files

00:05:28,130 --> 00:05:34,880
this data and then we can either define

00:05:31,370 --> 00:05:39,380
rules or extract additional data so that

00:05:34,880 --> 00:05:41,960
we can do for the processing so the idea

00:05:39,380 --> 00:05:44,480
is that when you can have multiple

00:05:41,960 --> 00:05:47,270
sources about the information you can

00:05:44,480 --> 00:05:49,610
have the live data I can run some

00:05:47,270 --> 00:05:51,830
commands to get like information about

00:05:49,610 --> 00:05:54,050
the system or you can have the sys

00:05:51,830 --> 00:05:56,810
reports or you can have the insights

00:05:54,050 --> 00:05:58,820
archives themselves we have additional

00:05:56,810 --> 00:06:01,700
way how to collect data about the system

00:05:58,820 --> 00:06:03,919
so the idea is we have many ways how to

00:06:01,700 --> 00:06:06,919
collect the data but we want to have a

00:06:03,919 --> 00:06:09,320
single module the describes this data

00:06:06,919 --> 00:06:14,360
and allows us to treat it in a uniform

00:06:09,320 --> 00:06:16,880
way so once we have the data model as I

00:06:14,360 --> 00:06:18,660
mentioned we have multiple sources of

00:06:16,880 --> 00:06:21,120
this data

00:06:18,660 --> 00:06:23,910
the more model approach also is to use

00:06:21,120 --> 00:06:25,680
the Prometheus 444 matrix and we are

00:06:23,910 --> 00:06:31,110
also using insights to be able to work

00:06:25,680 --> 00:06:33,830
with that so we can show this example

00:06:31,110 --> 00:06:35,850
with for example looking at the

00:06:33,830 --> 00:06:37,410
information about the memory so this is

00:06:35,850 --> 00:06:42,440
will be this will be the fun part about

00:06:37,410 --> 00:06:46,380
the right demo so I'm switching to my

00:06:42,440 --> 00:06:48,840
terminal or your seat and I will just

00:06:46,380 --> 00:06:51,090
run Python so one thing that I've not

00:06:48,840 --> 00:06:54,540
mentioned the inside score is written in

00:06:51,090 --> 00:06:57,900
Python and basically when I talk about

00:06:54,540 --> 00:07:01,320
with modeling the data we are modeling

00:06:57,900 --> 00:07:02,640
using the Python objects and we can then

00:07:01,320 --> 00:07:10,250
use it this way

00:07:02,640 --> 00:07:17,670
so the first thing you need to do is in

00:07:10,250 --> 00:07:19,890
from inside this is for the use case

00:07:17,670 --> 00:07:23,250
when I'm actually using just the Python

00:07:19,890 --> 00:07:24,720
shell or ipython to explore the data I

00:07:23,250 --> 00:07:28,410
wouldn't show how how we can actually

00:07:24,720 --> 00:07:30,210
use it for defining Somerville's so what

00:07:28,410 --> 00:07:32,910
I'm interested in is memory memory

00:07:30,210 --> 00:07:35,460
information about the system so the

00:07:32,910 --> 00:07:38,910
insight itself defines lot of different

00:07:35,460 --> 00:07:40,770
pastures and models already that allows

00:07:38,910 --> 00:07:43,260
you to do this so we don't need to parse

00:07:40,770 --> 00:07:45,660
the memory information of a system on

00:07:43,260 --> 00:07:49,790
our own but instead we can use already

00:07:45,660 --> 00:07:53,450
what's already there so from the inside

00:07:49,790 --> 00:07:57,150
we have parsers many parses defined

00:07:53,450 --> 00:07:59,250
memory in for each one of those and I've

00:07:57,150 --> 00:08:02,090
already looked in the documentation that

00:07:59,250 --> 00:08:10,260
I am interested in to the man info class

00:08:02,090 --> 00:08:12,930
and it's in touch ok so I imported my

00:08:10,260 --> 00:08:16,260
class like nothing happened yet what I

00:08:12,930 --> 00:08:18,780
will do now is run the gathering face of

00:08:16,260 --> 00:08:21,510
the insides that will happen just at

00:08:18,780 --> 00:08:24,300
this computer and store it in some some

00:08:21,510 --> 00:08:26,520
data so that's why I imported the run

00:08:24,300 --> 00:08:29,250
method in the first place I will run

00:08:26,520 --> 00:08:31,650
that since it's running real-life

00:08:29,250 --> 00:08:35,130
gathering of the data it takes few

00:08:31,650 --> 00:08:39,000
two seconds and then I can ask this data

00:08:35,130 --> 00:08:45,480
object to get the mem info object of the

00:08:39,000 --> 00:08:50,060
main menu for class okay and when I try

00:08:45,480 --> 00:08:52,800
to search about the roof for the total

00:08:50,060 --> 00:08:55,920
attribute or parameter on this object

00:08:52,800 --> 00:08:58,820
I actually got the number so for those

00:08:55,920 --> 00:09:02,460
they don't see below this is the total

00:08:58,820 --> 00:09:07,680
number of what is bytes kilobytes

00:09:02,460 --> 00:09:11,430
megabytes yes I think I think it's bites

00:09:07,680 --> 00:09:13,650
actually of this particular machine so

00:09:11,430 --> 00:09:16,380
without needing to do anything else I

00:09:13,650 --> 00:09:18,779
have the information about the system

00:09:16,380 --> 00:09:21,990
and we can use it for for doing some

00:09:18,779 --> 00:09:25,080
some interesting stuff with that so that

00:09:21,990 --> 00:09:28,890
was just the like short example on how

00:09:25,080 --> 00:09:31,650
these models parsers inside score itself

00:09:28,890 --> 00:09:35,610
can be used to deal with the ROC machine

00:09:31,650 --> 00:09:37,680
and in the further examples we also will

00:09:35,610 --> 00:09:40,170
look how this can be used against for

00:09:37,680 --> 00:09:42,360
example source reports so one of the

00:09:40,170 --> 00:09:45,779
main reasons like why the project was

00:09:42,360 --> 00:09:48,209
created is actually to be able to define

00:09:45,779 --> 00:09:50,130
some rules about the system so when I

00:09:48,209 --> 00:09:53,910
have the memory information and I have a

00:09:50,130 --> 00:09:55,890
software that requires some memory to

00:09:53,910 --> 00:09:57,330
run successfully you can combine this

00:09:55,890 --> 00:10:00,209
information and when you qualify it

00:09:57,330 --> 00:10:02,520
allows customers or users to run it you

00:10:00,209 --> 00:10:04,709
can give them a unified way how you tell

00:10:02,520 --> 00:10:08,250
them whether they are good or not in

00:10:04,709 --> 00:10:11,700
terms of running the software so yet

00:10:08,250 --> 00:10:13,529
defined on top of the model and logic

00:10:11,700 --> 00:10:15,750
can indicate the potential problem

00:10:13,529 --> 00:10:18,990
sometimes it might not be problem itself

00:10:15,750 --> 00:10:21,390
but it still may suggest improvement so

00:10:18,990 --> 00:10:24,360
now you might be running the software in

00:10:21,390 --> 00:10:25,800
some misconfigured way and if there is

00:10:24,360 --> 00:10:27,870
somebody that knows how to configure it

00:10:25,800 --> 00:10:31,410
properly this is the tool that allows

00:10:27,870 --> 00:10:35,640
you to automate these things so yeah

00:10:31,410 --> 00:10:39,240
sometimes you know people use your stuff

00:10:35,640 --> 00:10:41,830
it somehow works but it's not done in a

00:10:39,240 --> 00:10:45,070
way that was meant in the first place so

00:10:41,830 --> 00:10:49,029
like you probably can't get into into

00:10:45,070 --> 00:10:51,250
the locker but maybe not designed that

00:10:49,029 --> 00:10:55,330
way and you can be more effective so

00:10:51,250 --> 00:10:57,700
let's let's take a look at seeing how

00:10:55,330 --> 00:11:01,149
the inside core can be used to actually

00:10:57,700 --> 00:11:05,260
parse the some configuration path so

00:11:01,149 --> 00:11:09,220
that's another thing that is pretty neat

00:11:05,260 --> 00:11:12,040
about the inside score is that defined

00:11:09,220 --> 00:11:14,680
by itself a set of part of the

00:11:12,040 --> 00:11:18,100
configuration files that allow you to

00:11:14,680 --> 00:11:22,180
work with this with this thing more in

00:11:18,100 --> 00:11:24,420
more programmatic way so one thing that

00:11:22,180 --> 00:11:28,140
I will do is looking at the

00:11:24,420 --> 00:11:34,019
configuration of the httpd I've actually

00:11:28,140 --> 00:11:40,899
configure it here so just to show you my

00:11:34,019 --> 00:11:46,360
httpd the account speak and type at the

00:11:40,899 --> 00:11:50,470
same time so I hear some configuration

00:11:46,360 --> 00:11:54,070
about the performance characteristics

00:11:50,470 --> 00:11:56,410
and I set up the max request workers for

00:11:54,070 --> 00:11:58,600
the Apache to be 5 so let's see how I

00:11:56,410 --> 00:12:01,140
could get to this information using the

00:11:58,600 --> 00:12:05,589
insights core and the idea is that now

00:12:01,140 --> 00:12:10,510
if you have some total amount of memory

00:12:05,589 --> 00:12:13,149
to use for let's say for the HTTP D then

00:12:10,510 --> 00:12:15,459
it also means that you have like if one

00:12:13,149 --> 00:12:17,890
worker in the HTTP D has requirements

00:12:15,459 --> 00:12:20,260
minimal recurrence for some memory you

00:12:17,890 --> 00:12:22,209
can calculate what's the maximum amount

00:12:20,260 --> 00:12:24,370
of workers that is still suitable for

00:12:22,209 --> 00:12:27,459
this machine and if it exceeds like if I

00:12:24,370 --> 00:12:30,160
configure the number to high here I

00:12:27,459 --> 00:12:32,199
would expect that something would tell

00:12:30,160 --> 00:12:35,589
me that you are doing something wrong

00:12:32,199 --> 00:12:38,050
either increase your memory or lower the

00:12:35,589 --> 00:12:43,199
max occurs workers so let's see first

00:12:38,050 --> 00:12:46,089
like how I can can treat the a GD httpd

00:12:43,199 --> 00:12:49,529
config files whopping it you can notice

00:12:46,089 --> 00:12:52,779
that like the configuration of the

00:12:49,529 --> 00:12:53,880
Apache of the httpd is composed for many

00:12:52,779 --> 00:12:56,990
files so

00:12:53,880 --> 00:13:00,840
you could grab the things like that but

00:12:56,990 --> 00:13:07,380
we can probably do better so what I will

00:13:00,840 --> 00:13:10,500
do in this example is using the HTTP D

00:13:07,380 --> 00:13:14,640
parser and three representation of the

00:13:10,500 --> 00:13:19,520
data so from inside I will not explain

00:13:14,640 --> 00:13:24,710
this what what combiners mean but I can

00:13:19,520 --> 00:13:28,110
give you some information later import

00:13:24,710 --> 00:13:30,000
get three the guessed three method

00:13:28,110 --> 00:13:38,280
actually gives me the tree information

00:13:30,000 --> 00:13:40,020
so if I do httpd I actually got the

00:13:38,280 --> 00:13:48,390
content of all the configuration for my

00:13:40,020 --> 00:13:52,530
httpd and I can for example and let me

00:13:48,390 --> 00:13:56,640
just import also some queering helpers

00:13:52,530 --> 00:13:59,810
and what I can do is in the httpd find

00:13:56,640 --> 00:14:11,940
the configuration or configuration key

00:13:59,810 --> 00:14:13,950
that contains workers okay so this what

00:14:11,940 --> 00:14:16,350
did the data looked at all the

00:14:13,950 --> 00:14:19,830
configuration of the httpd and somehow

00:14:16,350 --> 00:14:22,860
found that this particular key has the

00:14:19,830 --> 00:14:25,500
value 5 so in this like it just allowed

00:14:22,860 --> 00:14:27,870
me to explore this without me having to

00:14:25,500 --> 00:14:32,120
know exactly so this is also kind of

00:14:27,870 --> 00:14:37,050
helpful in kind of exploring the data

00:14:32,120 --> 00:14:44,670
and I see that I'm moving too slowly so

00:14:37,050 --> 00:14:45,750
I will switch into the fast pace so bear

00:14:44,670 --> 00:14:49,050
with me

00:14:45,750 --> 00:14:51,120
so this is the thing that I was showing

00:14:49,050 --> 00:14:53,250
you we have multiple ways how to how to

00:14:51,120 --> 00:14:58,110
pass this thing and it's also extendable

00:14:53,250 --> 00:15:04,320
for for more information so what we can

00:14:58,110 --> 00:15:05,960
do once we have the parser defined is

00:15:04,320 --> 00:15:08,540
define a rule

00:15:05,960 --> 00:15:10,670
which in this case we'll look and that's

00:15:08,540 --> 00:15:14,180
what I mentioned before we look at the

00:15:10,670 --> 00:15:17,170
memory information of the of the machine

00:15:14,180 --> 00:15:19,850
we look at the HTTP configuration and

00:15:17,170 --> 00:15:24,770
compare if the size of the workers is

00:15:19,850 --> 00:15:26,750
actually matching the required required

00:15:24,770 --> 00:15:29,330
amount and yeah one thing that I have

00:15:26,750 --> 00:15:35,240
not shown is that we can actually run

00:15:29,330 --> 00:15:38,000
this against some SOC port as well so if

00:15:35,240 --> 00:15:42,320
I go and around this particular file

00:15:38,000 --> 00:15:48,130
which is the Apache most Mac Mac's

00:15:42,320 --> 00:15:52,670
workers and I run it against some data

00:15:48,130 --> 00:15:56,060
source record with some httpd actually

00:15:52,670 --> 00:15:59,540
see that the rule marks workers check

00:15:56,060 --> 00:16:02,600
has failed because max workers is set to

00:15:59,540 --> 00:16:06,650
6 and recommended value is 3 like we

00:16:02,600 --> 00:16:08,990
could have more formatting about the

00:16:06,650 --> 00:16:09,380
message but you you get you get the

00:16:08,990 --> 00:16:11,420
point

00:16:09,380 --> 00:16:14,930
there is also another thing that the

00:16:11,420 --> 00:16:17,810
insights do is actually defining the

00:16:14,930 --> 00:16:20,030
dependencies and we can handle the case

00:16:17,810 --> 00:16:22,100
where the data or some rules that we are

00:16:20,030 --> 00:16:24,950
defining are not actually present in the

00:16:22,100 --> 00:16:28,790
file so let's say if I ran it against

00:16:24,950 --> 00:16:31,550
the archive that has no httpd installed

00:16:28,790 --> 00:16:33,590
I know I don't get exceptions I get

00:16:31,550 --> 00:16:35,750
information that some there were some

00:16:33,590 --> 00:16:38,620
missing dependencies so you can actually

00:16:35,750 --> 00:16:45,650
have these rules defined for multiple

00:16:38,620 --> 00:16:49,220
software so that's that was covered with

00:16:45,650 --> 00:16:52,760
this slide and I also show this example

00:16:49,220 --> 00:16:56,030
yet so another thing that we do is

00:16:52,760 --> 00:16:59,630
sometimes writing the rules itself is

00:16:56,030 --> 00:17:01,820
not the like kind of the most efficient

00:16:59,630 --> 00:17:06,560
way to do that we can also take the data

00:17:01,820 --> 00:17:09,800
from the archives and do some AI with

00:17:06,560 --> 00:17:13,520
that and sometimes the AI means just a

00:17:09,800 --> 00:17:16,190
bunch of it but after working with this

00:17:13,520 --> 00:17:17,199
stuff for some time I'm less skeptical

00:17:16,190 --> 00:17:19,600
because actually

00:17:17,199 --> 00:17:21,850
in some success with applying machine

00:17:19,600 --> 00:17:24,459
learning techniques on this data so I

00:17:21,850 --> 00:17:26,860
think next week or next year we'll have

00:17:24,459 --> 00:17:29,620
more to tell talk about this part as

00:17:26,860 --> 00:17:31,720
well but the first thing before we can

00:17:29,620 --> 00:17:33,429
actually do this kind of processing is

00:17:31,720 --> 00:17:35,529
actually extracting the data from the

00:17:33,429 --> 00:17:37,510
archives from the raw format into some

00:17:35,529 --> 00:17:40,330
format that we can actually plug into

00:17:37,510 --> 00:17:44,440
the machine learning algorithms to get

00:17:40,330 --> 00:17:46,480
some some additional information so I

00:17:44,440 --> 00:17:48,940
will not show the demo because we don't

00:17:46,480 --> 00:17:51,250
have that much time for that but the

00:17:48,940 --> 00:17:54,370
idea is basically being able to extract

00:17:51,250 --> 00:18:00,220
some text and then plug it into machine

00:17:54,370 --> 00:18:03,100
learning mechanisms machinery so and

00:18:00,220 --> 00:18:05,169
that brings me to what actually we do in

00:18:03,100 --> 00:18:07,690
the insides right now so inside has been

00:18:05,169 --> 00:18:09,789
around for some time already over two

00:18:07,690 --> 00:18:12,159
years I think maybe more and they were

00:18:09,789 --> 00:18:14,019
focusing on the on the rel on the

00:18:12,159 --> 00:18:15,630
operating system case and what we are

00:18:14,019 --> 00:18:19,659
doing right now is actually applying

00:18:15,630 --> 00:18:24,250
these techniques at the open shift space

00:18:19,659 --> 00:18:27,220
and this brings new challenges we have

00:18:24,250 --> 00:18:29,740
things that are progressing more in the

00:18:27,220 --> 00:18:32,230
open shipped world we have more health

00:18:29,740 --> 00:18:34,120
information already and we can still

00:18:32,230 --> 00:18:36,690
leverage the things that we already had

00:18:34,120 --> 00:18:43,590
to deal with this data and actually

00:18:36,690 --> 00:18:46,380
provide the similar the similar

00:18:43,590 --> 00:18:50,500
suggestions as we do for the open

00:18:46,380 --> 00:18:53,260
operating system realm so I will not go

00:18:50,500 --> 00:18:56,590
to the examples but at the end of the

00:18:53,260 --> 00:19:00,070
day what we do is actually try to search

00:18:56,590 --> 00:19:02,950
for problems and give hints so this says

00:19:00,070 --> 00:19:04,029
that this might be how Windows usually

00:19:02,950 --> 00:19:06,309
do that sometimes

00:19:04,029 --> 00:19:08,470
maybe not not anymore so we try to do

00:19:06,309 --> 00:19:10,840
like the result of our work should be

00:19:08,470 --> 00:19:14,310
instead of the sleep actually do real

00:19:10,840 --> 00:19:17,369
work and then getting the real

00:19:14,310 --> 00:19:17,369
[Music]

00:19:19,610 --> 00:19:25,549
we are hiring so if you are interested

00:19:22,280 --> 00:19:27,679
please let us know and that gives us to

00:19:25,549 --> 00:19:40,700
the Q&A session so please if you have

00:19:27,679 --> 00:19:44,179
any questions now it's your time No

00:19:40,700 --> 00:19:46,160
and yeah so the question is if we are

00:19:44,179 --> 00:19:48,440
running only against sauce reports and

00:19:46,160 --> 00:19:51,890
the answer is no as I mentioned the

00:19:48,440 --> 00:19:54,230
sauce report is one of the most liked

00:19:51,890 --> 00:19:56,299
contain the most of the information but

00:19:54,230 --> 00:19:58,760
sometimes you don't want to like send

00:19:56,299 --> 00:20:00,830
everything and we are for example you

00:19:58,760 --> 00:20:03,740
can define parses for the insults

00:20:00,830 --> 00:20:05,000
archives in the opposite world world you

00:20:03,740 --> 00:20:07,400
might be familiar with the mass gather

00:20:05,000 --> 00:20:09,770
tool which is equivalent of the sauce

00:20:07,400 --> 00:20:12,110
report but for the open shift and we

00:20:09,770 --> 00:20:14,090
have defined the parsers for that as

00:20:12,110 --> 00:20:15,830
well and we also can load for example

00:20:14,090 --> 00:20:19,390
data from the Prometheus so like we can

00:20:15,830 --> 00:20:19,390
still use it as well

00:20:20,110 --> 00:20:25,000
any other question yeah

00:20:36,279 --> 00:20:40,490
yeah so the insights client that's the

00:20:38,870 --> 00:20:43,159
the client tool that we are actually

00:20:40,490 --> 00:20:46,010
using for collecting the regular data

00:20:43,159 --> 00:20:47,600
about the about the system and the

00:20:46,010 --> 00:20:50,600
question was if it's running only

00:20:47,600 --> 00:20:53,870
regularly or if it can even collect ad

00:20:50,600 --> 00:20:55,700
hoc information or around on demand so

00:20:53,870 --> 00:20:59,450
right now we are running periodically

00:20:55,700 --> 00:21:03,409
every night and what can we kind of

00:20:59,450 --> 00:21:05,029
influence is the for example when we are

00:21:03,409 --> 00:21:07,520
looking for the new error message in

00:21:05,029 --> 00:21:09,039
logs we can kind of extend that so

00:21:07,520 --> 00:21:11,630
that's that's the way how we can

00:21:09,039 --> 00:21:13,880
influence what gets collected but we are

00:21:11,630 --> 00:21:15,919
not running it as a daemon that we would

00:21:13,880 --> 00:21:18,350
be triggering on the mounted like we

00:21:15,919 --> 00:21:20,830
might turn it at some point but what we

00:21:18,350 --> 00:21:20,830
didn't

00:21:27,110 --> 00:21:30,210
[Music]

00:21:30,240 --> 00:21:34,419
Yeah right now we are focusing on the

00:21:32,590 --> 00:21:36,789
cluster because we if you have broken

00:21:34,419 --> 00:21:39,340
Causton it doesn't matter even to think

00:21:36,789 --> 00:21:41,350
about the application health but once we

00:21:39,340 --> 00:21:43,840
figure out that part I expect that we

00:21:41,350 --> 00:21:45,899
would be moving towards the layer above

00:21:43,840 --> 00:21:45,899
that

00:22:01,179 --> 00:22:08,059
yeah so we as a team yeah the question

00:22:05,510 --> 00:22:10,309
is if like based on the information if

00:22:08,059 --> 00:22:12,049
we can do the remediations only like

00:22:10,309 --> 00:22:14,090
from the cloud side or if there is

00:22:12,049 --> 00:22:16,280
intent to also be able to do something

00:22:14,090 --> 00:22:18,289
locally so we as a team are focusing on

00:22:16,280 --> 00:22:21,440
the cloud integration and the quality

00:22:18,289 --> 00:22:23,120
mediations so if there is any need for

00:22:21,440 --> 00:22:25,789
doing this or being able to leverage

00:22:23,120 --> 00:22:27,350
this even like a home on premise without

00:22:25,789 --> 00:22:29,510
connecting it would probably need to be

00:22:27,350 --> 00:22:32,030
more effort of the product team using

00:22:29,510 --> 00:22:35,179
that but the tool itself is pretty

00:22:32,030 --> 00:22:37,220
straightforward simple to use and these

00:22:35,179 --> 00:22:40,400
integrations can be used without any

00:22:37,220 --> 00:22:41,659
cloud integration as well so like that

00:22:40,400 --> 00:22:43,730
that was the purpose of this talk

00:22:41,659 --> 00:22:45,409
advised to show that you don't need

00:22:43,730 --> 00:22:47,210
almost anything you don't need to be

00:22:45,409 --> 00:22:50,210
connected to the culture that come to be

00:22:47,210 --> 00:22:54,770
able to use inside score and all good as

00:22:50,210 --> 00:22:57,470
it has and I guess that actually took us

00:22:54,770 --> 00:22:59,750
to the end of the presentation or we

00:22:57,470 --> 00:23:00,260
have one one more minutes so one quick

00:22:59,750 --> 00:23:02,150
question

00:23:00,260 --> 00:23:04,490
yeah I have one question what was the

00:23:02,150 --> 00:23:05,270
what was the message that was there

00:23:04,490 --> 00:23:11,179
hidden

00:23:05,270 --> 00:23:15,140
somehow space max and the second part

00:23:11,179 --> 00:23:17,690
was rocks okay so so you at least know

00:23:15,140 --> 00:23:20,210
my favorite editor and I had to put it

00:23:17,690 --> 00:23:21,470
somehow into the message so this is the

00:23:20,210 --> 00:23:25,510
end of the presentation so thanks all

00:23:21,470 --> 00:23:25,510
for coming I hope you enjoyed

00:23:27,700 --> 00:23:29,760

YouTube URL: https://www.youtube.com/watch?v=GXEkfkk4cn8


