Title: Introducing OSBuild - DevConf.CZ 2020
Publication date: 2020-03-27
Playlist: DevConfCZ 2020
Description: 
	Speakers: Lars Karlitski, Tom Gundersen

OSBuild is a generic low-level tool for creating OS images. It is the new backend for Image Builder, and it is designed to make the definition and creation of OS images transparent, predictable, modifiable and reproducible. An OS image is fully specified in a declarative configuration format, which means that a given configuration always produces functionally equivalent images, regardless of what host they are generated on. We wish to facilitate future OS development and experimentation, by providing a plug-in architecture that should be easy to hook into for people hacking on OS images. This talk goes through the architecture of osbuild, describes some of the challenges it overcame, and outlines the possible road ahead.

[ https://sched.co/YOtz ]

--
Recordings of talks at DevConf are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:01,210 --> 00:00:12,450
oh wow so many people this is quite

00:00:05,050 --> 00:00:15,639
intimidating switch off your phones hi

00:00:12,450 --> 00:00:17,800
I'm Tom this is nurse we work on OS

00:00:15,639 --> 00:00:21,520
built and today we're going to talk

00:00:17,800 --> 00:00:23,349
about what we do and why so we figured

00:00:21,520 --> 00:00:25,660
that well sort of a starting point is

00:00:23,349 --> 00:00:28,000
that we thought that the tools that we

00:00:25,660 --> 00:00:30,640
have available to build operating

00:00:28,000 --> 00:00:32,950
systems are not as good as they could be

00:00:30,640 --> 00:00:34,120
and so we like you compared to the

00:00:32,950 --> 00:00:35,739
software development in general over the

00:00:34,120 --> 00:00:37,510
last 20-30 years whatever

00:00:35,739 --> 00:00:39,789
it's like we have gotten all the cool

00:00:37,510 --> 00:00:41,620
new tools like source control and so on

00:00:39,789 --> 00:00:43,210
that has really improved how we are able

00:00:41,620 --> 00:00:45,670
to develop things how the speed we can

00:00:43,210 --> 00:00:47,620
do it and the sort of the quality that

00:00:45,670 --> 00:00:50,109
you're able to produce I think we think

00:00:47,620 --> 00:00:52,149
that building operating systems are sort

00:00:50,109 --> 00:00:54,850
of like behind so we are it's still very

00:00:52,149 --> 00:00:56,980
much ad hoc and either the tools are

00:00:54,850 --> 00:00:59,079
really really old they're reusing all

00:00:56,980 --> 00:01:00,879
things that don't really fit together or

00:00:59,079 --> 00:01:02,980
people making new things they do an ad

00:01:00,879 --> 00:01:04,330
hoc solution for exactly the new thing

00:01:02,980 --> 00:01:06,549
that they want to build but we don't

00:01:04,330 --> 00:01:09,640
feel that was really a sort of general

00:01:06,549 --> 00:01:11,020
purpose tool kit for making the

00:01:09,640 --> 00:01:12,790
operating system of the future

00:01:11,020 --> 00:01:14,470
in a way all right we're playing around

00:01:12,790 --> 00:01:17,049
to figure out how you want to do things

00:01:14,470 --> 00:01:20,020
so we basically figured out there's some

00:01:17,049 --> 00:01:23,229
principles that we want to some of the

00:01:20,020 --> 00:01:25,899
tools that we want to you have to follow

00:01:23,229 --> 00:01:27,219
and we'll talk about them first three

00:01:25,899 --> 00:01:30,009
things stay but we want them to be

00:01:27,219 --> 00:01:33,850
extendable comprehensible and for the

00:01:30,009 --> 00:01:39,670
process to be reproducible so feel free

00:01:33,850 --> 00:01:42,340
to interrupt by the way so firstly

00:01:39,670 --> 00:01:44,140
extendible what does it mean so we want

00:01:42,340 --> 00:01:45,939
you want to be able to like once we have

00:01:44,140 --> 00:01:48,070
a tool to be an operating system firstly

00:01:45,939 --> 00:01:50,289
it's not enough to be able to build just

00:01:48,070 --> 00:01:51,490
the operators to may have today we want

00:01:50,289 --> 00:01:54,939
to be you know moved toward the future

00:01:51,490 --> 00:01:57,070
we want to build Fedora 40 and real 15

00:01:54,939 --> 00:01:59,590
as any want to make the tools that can

00:01:57,070 --> 00:02:01,420
do that but it's not also it's not

00:01:59,590 --> 00:02:03,939
really enough to have a tool that can

00:02:01,420 --> 00:02:06,369
just build a brand the shiny new future

00:02:03,939 --> 00:02:08,289
no time from now if it can't handle the

00:02:06,369 --> 00:02:09,940
thing here today so we basically we need

00:02:08,289 --> 00:02:11,440
something that can both do the past

00:02:09,940 --> 00:02:14,150
stuff the current stuff on the future

00:02:11,440 --> 00:02:16,829
stuff and can move gradually

00:02:14,150 --> 00:02:19,980
between them so we need some way of

00:02:16,829 --> 00:02:20,510
having our tools modifiable in an easy

00:02:19,980 --> 00:02:23,250
way

00:02:20,510 --> 00:02:24,299
right and one of the big points I always

00:02:23,250 --> 00:02:25,890
eye and this doesn't really fit in

00:02:24,299 --> 00:02:28,769
extendable but it's like experimental

00:02:25,890 --> 00:02:30,390
experiment happy to experiment so right

00:02:28,769 --> 00:02:31,769
now it's very hard if you you know have

00:02:30,390 --> 00:02:34,079
like some way to build an operating

00:02:31,769 --> 00:02:35,549
system or to make an image let's say to

00:02:34,079 --> 00:02:37,260
like just switch out one of the parts

00:02:35,549 --> 00:02:39,030
right like I want to try like a

00:02:37,260 --> 00:02:40,590
different bootloader because so much

00:02:39,030 --> 00:02:42,239
depends on it it's very hard to do you

00:02:40,590 --> 00:02:44,280
need to understand before full second I

00:02:42,239 --> 00:02:48,239
think that's a big thing which by itself

00:02:44,280 --> 00:02:51,569
here just want you add that and the next

00:02:48,239 --> 00:02:53,730
thing compressible so we we want the

00:02:51,569 --> 00:02:56,400
process of building operating systems to

00:02:53,730 --> 00:02:58,260
be as easily understandable as building

00:02:56,400 --> 00:02:59,730
software like a make file any ice or

00:02:58,260 --> 00:03:01,079
bowls and it's you know a bit

00:02:59,730 --> 00:03:02,730
complicated but at least you can figure

00:03:01,079 --> 00:03:04,919
out the steps if you look into it and

00:03:02,730 --> 00:03:05,909
you spend some time so we want the the

00:03:04,919 --> 00:03:07,739
process that we have like we have an

00:03:05,909 --> 00:03:09,659
input to our tools that describe the

00:03:07,739 --> 00:03:11,189
process that will happen to produce the

00:03:09,659 --> 00:03:13,139
operating system and you want that to

00:03:11,189 --> 00:03:14,400
cover all the things that we do so there

00:03:13,139 --> 00:03:15,780
should be nothing that our tool dust

00:03:14,400 --> 00:03:17,280
that is random for instance you don't

00:03:15,780 --> 00:03:18,959
put any like you don't have any

00:03:17,280 --> 00:03:20,669
randomness that ends up in the image tab

00:03:18,959 --> 00:03:22,109
you just make up in a tool it should all

00:03:20,669 --> 00:03:23,940
be specified a promise if you need some

00:03:22,109 --> 00:03:26,280
randomness then you need to prove

00:03:23,940 --> 00:03:28,650
provide it to our tool or if there's

00:03:26,280 --> 00:03:30,180
some policies for instance like you

00:03:28,650 --> 00:03:31,470
don't want to encode the policies in the

00:03:30,180 --> 00:03:33,030
tool because then in the future you want

00:03:31,470 --> 00:03:34,979
to make anything the different policy

00:03:33,030 --> 00:03:36,150
you have to change the tool itself so it

00:03:34,979 --> 00:03:38,579
doesn't nearly make it very easy to

00:03:36,150 --> 00:03:40,650
experiment so that means that the input

00:03:38,579 --> 00:03:43,739
to our tools is going to be very very

00:03:40,650 --> 00:03:46,459
verbose not most easiest to to quickly

00:03:43,739 --> 00:03:49,019
read but it will cover all of the things

00:03:46,459 --> 00:03:51,870
so I'm very nice example that we always

00:03:49,019 --> 00:03:54,449
bring up is the in the kickstart sample

00:03:51,870 --> 00:03:57,389
currently is a lot inside her hat and

00:03:54,449 --> 00:04:00,299
fedora you have this command called Otto

00:03:57,389 --> 00:04:01,349
Hahn apart or about amazing thing it's

00:04:00,299 --> 00:04:03,540
very obvious what it does it

00:04:01,349 --> 00:04:05,310
automatically partitions your disk but

00:04:03,540 --> 00:04:07,019
what does that mean like what does it

00:04:05,310 --> 00:04:09,329
mean to do automatically well it depends

00:04:07,019 --> 00:04:10,709
right so the program here on rail or on

00:04:09,329 --> 00:04:12,659
Fedora or which version you are it does

00:04:10,709 --> 00:04:14,280
automatically different things so just

00:04:12,659 --> 00:04:15,930
looking at input kickstart you don't

00:04:14,280 --> 00:04:17,459
really know what happens and you have to

00:04:15,930 --> 00:04:18,630
look at the source code then you need to

00:04:17,459 --> 00:04:19,799
know the version that you're looking at

00:04:18,630 --> 00:04:21,030
and so on so you don't want to do that

00:04:19,799 --> 00:04:23,550
we want to like if you want to do

00:04:21,030 --> 00:04:25,200
partitioning you specify exactly all the

00:04:23,550 --> 00:04:27,450
things that it needs which mean problem

00:04:25,200 --> 00:04:27,810
is that you want some tool that generate

00:04:27,450 --> 00:04:29,910
this

00:04:27,810 --> 00:04:31,560
but at least the low-level tool that

00:04:29,910 --> 00:04:36,419
build with builds a thing it doesn't do

00:04:31,560 --> 00:04:39,419
any any sort of policy and lastly

00:04:36,419 --> 00:04:41,490
reproducible this is like this - this

00:04:39,419 --> 00:04:42,720
word conjures up lots of ideas in

00:04:41,490 --> 00:04:44,940
different people and those people are

00:04:42,720 --> 00:04:47,310
very excited about reproducible builds

00:04:44,940 --> 00:04:51,630
an irreducible software for our

00:04:47,310 --> 00:04:53,100
theoretical reasons or yeah it's very

00:04:51,630 --> 00:04:54,660
elegant and cool but we don't really

00:04:53,100 --> 00:04:58,410
care about that we are much more on on a

00:04:54,660 --> 00:04:59,730
practical level so that if you say that

00:04:58,410 --> 00:05:02,310
I want to make a suggestion for how we

00:04:59,730 --> 00:05:04,020
build fedora and I online on my machine

00:05:02,310 --> 00:05:05,490
I try that the current way using our

00:05:04,020 --> 00:05:07,500
tool say we use that tool to build

00:05:05,490 --> 00:05:09,389
fedora I try out the current way and I

00:05:07,500 --> 00:05:10,889
make some change and I try it in a new

00:05:09,389 --> 00:05:13,740
way and now I see that all this works

00:05:10,889 --> 00:05:16,110
it's cool the tests pass and this is

00:05:13,740 --> 00:05:17,669
what I want but if I'm not confident

00:05:16,110 --> 00:05:19,770
that when I hand this change of to

00:05:17,669 --> 00:05:22,320
release engineering a fedora it has the

00:05:19,770 --> 00:05:24,720
same effect then I can't really you know

00:05:22,320 --> 00:05:27,120
it's like it doesn't really help much I

00:05:24,720 --> 00:05:29,639
cannot really do development I cannot

00:05:27,120 --> 00:05:31,050
really contribute to fedora if I'm most

00:05:29,639 --> 00:05:32,520
confident that what I do on my machine

00:05:31,050 --> 00:05:34,680
is the same thing I'm going to end up in

00:05:32,520 --> 00:05:35,910
release engineering and currently the

00:05:34,680 --> 00:05:37,590
tools we have now it really isn't the

00:05:35,910 --> 00:05:39,900
case so that because the tools when you

00:05:37,590 --> 00:05:41,220
run them it really depends on the

00:05:39,900 --> 00:05:43,260
environment you run them in so you must

00:05:41,220 --> 00:05:45,390
make sure that you exactly make what's

00:05:43,260 --> 00:05:47,580
going to happen in the end in your setup

00:05:45,390 --> 00:05:49,830
and so on in order for you to get the

00:05:47,580 --> 00:05:51,900
same results and even then it's not

00:05:49,830 --> 00:05:53,430
really clear exactly which things matter

00:05:51,900 --> 00:05:55,229
and which things don't so one of the

00:05:53,430 --> 00:05:57,090
main things we want to make sure is that

00:05:55,229 --> 00:05:59,250
whenever you have an input to our tool

00:05:57,090 --> 00:06:00,990
the operating system image that it

00:05:59,250 --> 00:06:04,229
produces is always the same and of

00:06:00,990 --> 00:06:06,120
course the same that what does it mean

00:06:04,229 --> 00:06:09,260
to be the same we are not really

00:06:06,120 --> 00:06:11,789
interested in a bit for bit

00:06:09,260 --> 00:06:13,950
reproducibility it would be cool will be

00:06:11,789 --> 00:06:15,570
amazing but that's just not what we have

00:06:13,950 --> 00:06:16,650
we can't do that with the tools maybe

00:06:15,570 --> 00:06:19,229
that we have in general are not

00:06:16,650 --> 00:06:21,120
reproducible I'm not really aiming for

00:06:19,229 --> 00:06:23,340
we don't really need that what we really

00:06:21,120 --> 00:06:25,200
need is that if you have produced two

00:06:23,340 --> 00:06:26,700
images with the same input they are

00:06:25,200 --> 00:06:27,990
functionally equivalent so it won't say

00:06:26,700 --> 00:06:29,850
something like functional

00:06:27,990 --> 00:06:31,110
reproducibility that they behave the

00:06:29,850 --> 00:06:32,520
same you cannot detect the difference

00:06:31,110 --> 00:06:34,440
between them that's the bar we are

00:06:32,520 --> 00:06:37,229
aiming for and of course this is not

00:06:34,440 --> 00:06:38,370
mathematically well-defined exactly what

00:06:37,229 --> 00:06:42,140
that means but that's sort of what we

00:06:38,370 --> 00:06:42,140
are they aim we are going for

00:06:42,330 --> 00:06:45,970
cool let's talk emitted by the

00:06:44,440 --> 00:06:47,830
implementation so those were the basic

00:06:45,970 --> 00:06:50,530
the ideas behind the thing when we are

00:06:47,830 --> 00:06:53,560
making and then talk about how we did

00:06:50,530 --> 00:06:55,570
that so the tool we said earlier already

00:06:53,560 --> 00:06:58,600
I think I hope I was built is what we're

00:06:55,570 --> 00:07:00,670
working on and the demand to build

00:06:58,600 --> 00:07:02,140
manifests or the inputs that we pass to

00:07:00,670 --> 00:07:06,100
our tool we call a pipeline

00:07:02,140 --> 00:07:07,630
it's a JSON document and it describes

00:07:06,100 --> 00:07:11,320
each of the steps that you want to do

00:07:07,630 --> 00:07:16,180
and we say that we have a set of stages

00:07:11,320 --> 00:07:19,240
and that each take a file system tree

00:07:16,180 --> 00:07:23,010
and modify it in some way so it's start

00:07:19,240 --> 00:07:26,560
of with an empty tree and then we run a

00:07:23,010 --> 00:07:28,780
DNF stage on that tree so I populate it

00:07:26,560 --> 00:07:30,160
with rpm typically I mean you can the

00:07:28,780 --> 00:07:31,780
whole point there is this should be

00:07:30,160 --> 00:07:33,910
something for expectation so you can

00:07:31,780 --> 00:07:35,919
then do things differently or you can

00:07:33,910 --> 00:07:37,690
you can do a git checkout here you can

00:07:35,919 --> 00:07:38,830
do install rpms directly you can do

00:07:37,690 --> 00:07:40,180
whatever you want right but this is the

00:07:38,830 --> 00:07:40,510
typical way that we are doing it at the

00:07:40,180 --> 00:07:43,240
moment

00:07:40,510 --> 00:07:45,340
so you fill as a tree with a with rpms

00:07:43,240 --> 00:07:48,070
and then maybe you want to change the

00:07:45,340 --> 00:07:50,110
hostname you install some grub config

00:07:48,070 --> 00:07:51,970
you set up the users you do maybe some

00:07:50,110 --> 00:07:54,400
enable or disable sis to be the unit's

00:07:51,970 --> 00:07:56,050
you put in the FS tab you configure the

00:07:54,400 --> 00:07:58,150
firewall and never you want to drop in

00:07:56,050 --> 00:07:59,740
some configuration that's going to be

00:07:58,150 --> 00:08:01,270
happen on the first boot like your

00:07:59,740 --> 00:08:02,770
answer will play books or whatever else

00:08:01,270 --> 00:08:03,910
you want you have an implement this is

00:08:02,770 --> 00:08:05,560
why it's great we haven't implemented

00:08:03,910 --> 00:08:09,340
this but it's it's like the idea of it

00:08:05,560 --> 00:08:12,550
and finally of course a selects thing we

00:08:09,340 --> 00:08:14,440
all love we apply all the labels to the

00:08:12,550 --> 00:08:15,970
file system so now what you have

00:08:14,440 --> 00:08:17,650
produced here after all those agencies

00:08:15,970 --> 00:08:19,419
at the file system but we want that our

00:08:17,650 --> 00:08:20,530
image to contain this file system but

00:08:19,419 --> 00:08:23,140
you haven't actually made an image yet

00:08:20,530 --> 00:08:26,350
and this I mean for the people who are

00:08:23,140 --> 00:08:27,640
used to building images this is sort of

00:08:26,350 --> 00:08:29,140
the other way around for how it's

00:08:27,640 --> 00:08:30,460
usually done so usually you first setup

00:08:29,140 --> 00:08:33,400
an image and then you fill it with stuff

00:08:30,460 --> 00:08:34,990
and then you finish but we first create

00:08:33,400 --> 00:08:36,219
a file system and each of these things

00:08:34,990 --> 00:08:38,260
you can also cache like your own

00:08:36,219 --> 00:08:40,089
whatever we can reuse them or we can and

00:08:38,260 --> 00:08:41,800
you can argue about them and tests about

00:08:40,089 --> 00:08:44,530
them to make just just talking about the

00:08:41,800 --> 00:08:46,720
files you have when you finish that we

00:08:44,530 --> 00:08:48,460
have what we call an assembler and we

00:08:46,720 --> 00:08:51,970
just take the file system tree and then

00:08:48,460 --> 00:08:54,250
put it into some image format so to

00:08:51,970 --> 00:08:57,130
capture that's what we do

00:08:54,250 --> 00:08:59,080
or other things and the point here is

00:08:57,130 --> 00:09:01,900
that we want to make sure that each of

00:08:59,080 --> 00:09:03,790
these things have a very distinct

00:09:01,900 --> 00:09:05,920
responsibilities and they don't overlap

00:09:03,790 --> 00:09:07,690
or and they don't depend on each other

00:09:05,920 --> 00:09:11,140
in unpredictable ways so for instance

00:09:07,690 --> 00:09:13,060
the assembler should always put only the

00:09:11,140 --> 00:09:14,830
file system into the image 3 when you

00:09:13,060 --> 00:09:16,450
mount it and you compare what was the

00:09:14,830 --> 00:09:18,430
input image abouts the thing that you

00:09:16,450 --> 00:09:20,260
put in there in Google was the input

00:09:18,430 --> 00:09:22,740
tree and was the content of an image

00:09:20,260 --> 00:09:28,000
should always be exactly the same

00:09:22,740 --> 00:09:29,230
yeah that's the the big picture go do we

00:09:28,000 --> 00:09:30,790
even talk about how they are like

00:09:29,230 --> 00:09:35,080
separated from each other I would love

00:09:30,790 --> 00:09:36,940
to uh well then go ahead please so so

00:09:35,080 --> 00:09:38,800
the many other tools that we have all of

00:09:36,940 --> 00:09:40,930
the tools that we have they are they are

00:09:38,800 --> 00:09:43,090
basically built for modifying a running

00:09:40,930 --> 00:09:44,500
system like DNF is Beit made for

00:09:43,090 --> 00:09:46,060
installing and updating packages on the

00:09:44,500 --> 00:09:47,530
system that you have and grub is made

00:09:46,060 --> 00:09:49,630
for installing the bootloader on your

00:09:47,530 --> 00:09:52,390
running laptop it is not what we do at

00:09:49,630 --> 00:09:53,830
all so this this thing StoneTree and so

00:09:52,390 --> 00:09:55,870
they make some assumptions that don't

00:09:53,830 --> 00:09:58,330
really hold in our context and this is a

00:09:55,870 --> 00:10:00,490
problem for the current law rocket

00:09:58,330 --> 00:10:01,810
anaconda installed at the moment and all

00:10:00,490 --> 00:10:03,880
these things we all face the same

00:10:01,810 --> 00:10:06,370
problem here that how do you make sure

00:10:03,880 --> 00:10:08,290
that DNF and grub and so on don't get

00:10:06,370 --> 00:10:09,580
confused by the fact that the machine

00:10:08,290 --> 00:10:10,570
that you're running on it's not the

00:10:09,580 --> 00:10:13,089
target machine that you're installing

00:10:10,570 --> 00:10:14,410
for so the typically what will happen is

00:10:13,089 --> 00:10:17,290
a day will maybe pull in the kernel

00:10:14,410 --> 00:10:19,089
command line from your current post they

00:10:17,290 --> 00:10:21,160
will look into at c25 our configuration

00:10:19,089 --> 00:10:22,630
what repositories do you have and then

00:10:21,160 --> 00:10:23,860
they put that into they use that you'll

00:10:22,630 --> 00:10:25,839
get packages to put it into the target

00:10:23,860 --> 00:10:27,010
and what do you of course want to do

00:10:25,839 --> 00:10:29,920
that we want to we want to make sure

00:10:27,010 --> 00:10:32,680
that our tool is completely independent

00:10:29,920 --> 00:10:35,770
from the host so if I want to build rel

00:10:32,680 --> 00:10:37,060
8.1 and I'm running a fedora machine of

00:10:35,770 --> 00:10:39,940
course I should be able to do that

00:10:37,060 --> 00:10:41,830
currently the tools we have it's all the

00:10:39,940 --> 00:10:44,320
tools we have you need to have the same

00:10:41,830 --> 00:10:46,839
operating system on your hosts as you're

00:10:44,320 --> 00:10:48,760
building for which is a bit that's not

00:10:46,839 --> 00:10:50,610
how it made you know generally use of

00:10:48,760 --> 00:10:54,670
make software and we all to avoid that

00:10:50,610 --> 00:10:57,400
so principle air we want to make sure

00:10:54,670 --> 00:10:59,740
that each stage is separate from the

00:10:57,400 --> 00:11:00,970
hosts and from each other so that the

00:10:59,740 --> 00:11:03,580
only community there's no communication

00:11:00,970 --> 00:11:06,190
between the stages so they operate on a

00:11:03,580 --> 00:11:07,570
shared tree one by one but all the one

00:11:06,190 --> 00:11:08,050
on that you don't pass any configuration

00:11:07,570 --> 00:11:10,200
but

00:11:08,050 --> 00:11:13,120
so if you want this to be for instance

00:11:10,200 --> 00:11:14,170
maybe the the grab stage needs some

00:11:13,120 --> 00:11:17,020
configure some stuff about the file

00:11:14,170 --> 00:11:18,790
system as does the FS tab stage as does

00:11:17,020 --> 00:11:20,020
the thing you finally make on the on the

00:11:18,790 --> 00:11:21,700
image then you have to pass the same

00:11:20,020 --> 00:11:23,710
information in configuration to all of

00:11:21,700 --> 00:11:25,420
them in order to be normally very strict

00:11:23,710 --> 00:11:27,580
that it can be no communication no

00:11:25,420 --> 00:11:29,620
leakage or information between them and

00:11:27,580 --> 00:11:32,710
we run each of these things we learn

00:11:29,620 --> 00:11:34,600
them in n spawn containers or like the

00:11:32,710 --> 00:11:39,670
police to have a container to make sure

00:11:34,600 --> 00:11:42,100
that is it really the case anything wait

00:11:39,670 --> 00:11:48,280
I mean it's very what I'm used to Fleur

00:11:42,100 --> 00:11:50,140
exactly right so let me think that yeah

00:11:48,280 --> 00:11:53,920
so this is how it actually looks like

00:11:50,140 --> 00:11:55,900
this document we have a list of stages

00:11:53,920 --> 00:11:57,610
and then we have one or at the end and

00:11:55,900 --> 00:11:59,140
we have named them just in Reverse

00:11:57,610 --> 00:12:01,420
domain and notation so we make sure that

00:11:59,140 --> 00:12:03,720
the names are unique so we must make

00:12:01,420 --> 00:12:07,360
sure now that once we have made such a

00:12:03,720 --> 00:12:09,010
pipeline then we said well it's

00:12:07,360 --> 00:12:11,050
reproducible right or is that also in

00:12:09,010 --> 00:12:14,070
the future if you have then an OS build

00:12:11,050 --> 00:12:16,270
tool made ten years from now hopefully

00:12:14,070 --> 00:12:17,800
then it will still make the same image

00:12:16,270 --> 00:12:19,570
so we cannot change the behavior or any

00:12:17,800 --> 00:12:22,089
of these things so that's why we're sure

00:12:19,570 --> 00:12:23,470
now we have our goais build DNF and if

00:12:22,089 --> 00:12:24,700
in the future we're as we made a mistake

00:12:23,470 --> 00:12:26,620
then we won't be enough to behave in a

00:12:24,700 --> 00:12:28,060
different way hopefully we made it

00:12:26,620 --> 00:12:29,740
low-level enough that that's never the

00:12:28,060 --> 00:12:30,910
case because it's just really doing what

00:12:29,740 --> 00:12:32,200
the enough does but if you made a

00:12:30,910 --> 00:12:34,720
mistake we must make then a different

00:12:32,200 --> 00:12:36,400
dnf2 or whatever that's fine that's why

00:12:34,720 --> 00:12:38,680
we have named them in such a way that we

00:12:36,400 --> 00:12:42,850
can easily add more things without ever

00:12:38,680 --> 00:12:45,490
taking away the old ones so another

00:12:42,850 --> 00:12:46,690
thing another little quirk that people

00:12:45,490 --> 00:12:49,360
working on these things are probably

00:12:46,690 --> 00:12:52,330
very used to is that well DNF like

00:12:49,360 --> 00:12:54,430
having a DNF stage what using the tool

00:12:52,330 --> 00:12:56,500
is one thing but of course the nf may

00:12:54,430 --> 00:12:57,580
change this behavior over time so one

00:12:56,500 --> 00:12:59,589
thing we also make sure me with the

00:12:57,580 --> 00:13:01,270
limit is if we save the information

00:12:59,589 --> 00:13:02,680
about the build environment so that we

00:13:01,270 --> 00:13:04,510
can reproduce the build closely as

00:13:02,680 --> 00:13:06,550
possible and what we wanted to say is

00:13:04,510 --> 00:13:08,710
that only thing that matters should be

00:13:06,550 --> 00:13:10,839
the things in this JSON manifest nothing

00:13:08,710 --> 00:13:13,660
else can possibly affect our cover image

00:13:10,839 --> 00:13:14,800
which means that if DNF the worst of the

00:13:13,660 --> 00:13:15,280
NF you're running could affect the

00:13:14,800 --> 00:13:17,500
outcome

00:13:15,280 --> 00:13:19,420
then you better encode that somehow in

00:13:17,500 --> 00:13:20,960
the manifests so that's why we

00:13:19,420 --> 00:13:23,270
introduced this notion of

00:13:20,960 --> 00:13:24,920
build pipelines it's a sub pipe lab so

00:13:23,270 --> 00:13:26,870
yeah this is like there's a set of

00:13:24,920 --> 00:13:28,370
stages and an assembler and before that

00:13:26,870 --> 00:13:30,500
you have exactly the same thing again

00:13:28,370 --> 00:13:32,870
you can have any pipeline you want in

00:13:30,500 --> 00:13:36,380
this bill instruction typically you only

00:13:32,870 --> 00:13:38,330
have a DNF stage that's what we do and

00:13:36,380 --> 00:13:41,060
what it does it installs the packages

00:13:38,330 --> 00:13:42,590
that you need later on in a file system

00:13:41,060 --> 00:13:45,100
tree and when you run and spawn when

00:13:42,590 --> 00:13:47,810
you're in the container this is then the

00:13:45,100 --> 00:13:49,580
part system the the root filesystem of

00:13:47,810 --> 00:13:52,720
your container so you can properly

00:13:49,580 --> 00:13:52,720
specify all the tools that you have

00:13:53,590 --> 00:13:58,490
right and that's all built those are the

00:13:56,690 --> 00:14:01,670
principles and that's that I hope you

00:13:58,490 --> 00:14:05,930
given you some idea of Hydrox and now

00:14:01,670 --> 00:14:07,970
two applications how do we how do you

00:14:05,930 --> 00:14:09,410
use it so currently the first program

00:14:07,970 --> 00:14:11,740
that we are working on now which is like

00:14:09,410 --> 00:14:15,470
something to deliverable to people is

00:14:11,740 --> 00:14:18,020
image problem and the target the aim of

00:14:15,470 --> 00:14:22,160
image builder is to be able to thank you

00:14:18,020 --> 00:14:24,890
is to be able to build images for cloud

00:14:22,160 --> 00:14:31,160
providers so both fedora and rel we want

00:14:24,890 --> 00:14:33,050
to be able to generate what's called you

00:14:31,160 --> 00:14:34,880
want to generate specific images for the

00:14:33,050 --> 00:14:37,190
specific providers so we will if you

00:14:34,880 --> 00:14:41,780
want to have Fedora 31 running in Azure

00:14:37,190 --> 00:14:44,300
or in Amazon then we have image builder

00:14:41,780 --> 00:14:48,410
allowing you to do that and here you

00:14:44,300 --> 00:14:52,010
have then a sample running on fedora so

00:14:48,410 --> 00:14:53,810
if you say that you want to have a

00:14:52,010 --> 00:14:56,120
specific version of Fedora running in a

00:14:53,810 --> 00:15:01,810
specific cloud provider for some

00:14:56,120 --> 00:15:03,860
specific use case you can configure some

00:15:01,810 --> 00:15:06,080
blueprints so I would I don't want to

00:15:03,860 --> 00:15:07,580
get into details here but you can in you

00:15:06,080 --> 00:15:09,170
can specify how you also customize your

00:15:07,580 --> 00:15:11,990
image and you can say this for instance

00:15:09,170 --> 00:15:13,850
should be an HTTP server and then our

00:15:11,990 --> 00:15:16,220
tool using Austral as the backend will

00:15:13,850 --> 00:15:17,930
produce an image with apache installed

00:15:16,220 --> 00:15:20,750
and set up in the correct way with the

00:15:17,930 --> 00:15:22,310
targets cloud provider that you want you

00:15:20,750 --> 00:15:25,130
can also do the same for download image

00:15:22,310 --> 00:15:26,450
and you can run it locally in VMware or

00:15:25,130 --> 00:15:32,120
in and spawn or whatever you want

00:15:26,450 --> 00:15:34,490
and so yeah I want to add something the

00:15:32,120 --> 00:15:36,360
whole point why we're using

00:15:34,490 --> 00:15:39,390
something like us built here is that

00:15:36,360 --> 00:15:40,890
here we kind of need to take a this is

00:15:39,390 --> 00:15:42,510
what it means to be a fedora 31 image

00:15:40,890 --> 00:15:44,040
and this is the kind of customizations

00:15:42,510 --> 00:15:47,279
you want to do on top of it right like I

00:15:44,040 --> 00:15:48,959
want to saw some packages or you said

00:15:47,279 --> 00:15:51,390
something it's all about yeah my dad SH

00:15:48,959 --> 00:15:53,339
keys or something and how we're doing

00:15:51,390 --> 00:15:54,720
this now typically is we we take a base

00:15:53,339 --> 00:15:58,410
image and then boot it somewhere and

00:15:54,720 --> 00:15:59,550
then do all of the changes and then do

00:15:58,410 --> 00:16:00,990
all the customizations that we just

00:15:59,550 --> 00:16:02,579
talked about and then well this is my

00:16:00,990 --> 00:16:03,660
gold image now but now we've booted that

00:16:02,579 --> 00:16:05,850
and you want to replicate that that's

00:16:03,660 --> 00:16:07,950
kind of not the very clean process I

00:16:05,850 --> 00:16:09,510
would say because once you've put it

00:16:07,950 --> 00:16:11,399
once it's a little bit weird because you

00:16:09,510 --> 00:16:13,079
need to like take some stuff away again

00:16:11,399 --> 00:16:17,070
like the machine ID for example a random

00:16:13,079 --> 00:16:18,300
seed or stuff like this so so the idea

00:16:17,070 --> 00:16:20,430
here is that we have like a norrisville

00:16:18,300 --> 00:16:22,170
pipeline that generates the image

00:16:20,430 --> 00:16:23,820
without ever booting it but having all

00:16:22,170 --> 00:16:26,300
of these customizations already baked in

00:16:23,820 --> 00:16:28,500
I think that's a very important point we

00:16:26,300 --> 00:16:31,380
certainly believe strongly and is that

00:16:28,500 --> 00:16:34,050
booting is instantiation that you can

00:16:31,380 --> 00:16:35,519
never boot something and then

00:16:34,050 --> 00:16:37,410
instantiate it afterwards several times

00:16:35,519 --> 00:16:39,720
because all of our lots of our tools

00:16:37,410 --> 00:16:41,640
assume that on the first boot you set up

00:16:39,720 --> 00:16:43,440
some things that are unique to instance

00:16:41,640 --> 00:16:44,490
and then your ears and the most most I

00:16:43,440 --> 00:16:46,079
mean the random seed is one thing but

00:16:44,490 --> 00:16:48,089
all the machinery is very important that

00:16:46,079 --> 00:16:50,459
we have made that mistake has happened

00:16:48,089 --> 00:16:52,140
in the past is that you have ended up

00:16:50,459 --> 00:16:53,700
with lots of instances with the same

00:16:52,140 --> 00:16:55,440
machine and machine and it and them and

00:16:53,700 --> 00:16:56,310
that's the software a schema that's

00:16:55,440 --> 00:16:58,200
never going to happen

00:16:56,310 --> 00:16:59,760
so we we absolutely want to avoid that

00:16:58,200 --> 00:17:01,620
so no image that we ever produced has

00:16:59,760 --> 00:17:04,650
been booted before you give it to the

00:17:01,620 --> 00:17:06,300
customer true it's actually yeah and it

00:17:04,650 --> 00:17:07,620
automates is much easier like oh I have

00:17:06,300 --> 00:17:09,510
this worst fear pipeline and this

00:17:07,620 --> 00:17:10,709
visible like I have a problem with this

00:17:09,510 --> 00:17:12,449
image what's going on yeah this is what

00:17:10,709 --> 00:17:14,790
I this is what I built here Tom please

00:17:12,449 --> 00:17:16,740
try it out can you you know do it and he

00:17:14,790 --> 00:17:18,540
has like a way to completely reproduce

00:17:16,740 --> 00:17:23,610
what I did without having to you know

00:17:18,540 --> 00:17:26,490
ask me about all the subs and I think

00:17:23,610 --> 00:17:29,370
that concludes our talk if you have any

00:17:26,490 --> 00:17:32,480
questions please do so many questions

00:17:29,370 --> 00:17:32,480
let's reach like your first

00:17:34,170 --> 00:17:44,650
yes sorry oh sorry the question was if

00:17:43,330 --> 00:17:47,410
you might want to build an image for

00:17:44,650 --> 00:17:49,030
with multiple partitions how is the

00:17:47,410 --> 00:17:52,810
assembly of that done and if I go back

00:17:49,030 --> 00:17:54,520
to this picture here is that now so what

00:17:52,810 --> 00:17:56,920
you say that you want to have boot and

00:17:54,520 --> 00:17:58,420
the Rooter has on several positions so

00:17:56,920 --> 00:18:00,070
like as few things you need to make sure

00:17:58,420 --> 00:18:02,020
of that right you need to tell tell grub

00:18:00,070 --> 00:18:03,640
about it in the configuration I need to

00:18:02,020 --> 00:18:04,570
tell FSM about it but that's just the

00:18:03,640 --> 00:18:06,880
content of the file system the

00:18:04,570 --> 00:18:08,530
configuration on the image that reflects

00:18:06,880 --> 00:18:10,480
that it's on are separate positions and

00:18:08,530 --> 00:18:15,490
then finally when you make the cue cow

00:18:10,480 --> 00:18:17,680
so what we do there is this is quite a

00:18:15,490 --> 00:18:19,030
lot of steps it goes into making the cue

00:18:17,680 --> 00:18:21,220
card and we are thinking of how to

00:18:19,030 --> 00:18:23,110
separate this up more to look more like

00:18:21,220 --> 00:18:26,080
simple stages but basically what happens

00:18:23,110 --> 00:18:28,480
here is you make a file which is the

00:18:26,080 --> 00:18:29,980
image file and then you you apply F

00:18:28,480 --> 00:18:31,720
disco days to make the partitions and

00:18:29,980 --> 00:18:33,460
you provide the configuration about how

00:18:31,720 --> 00:18:36,280
the petitions should look like and so on

00:18:33,460 --> 00:18:37,810
so you would just partition this in as

00:18:36,280 --> 00:18:40,210
you would know normally do a disk and

00:18:37,810 --> 00:18:42,280
then you copy the stuff over and then

00:18:40,210 --> 00:18:49,480
you wrap it up in a Kiko answer the

00:18:42,280 --> 00:18:50,950
question yes so so you're passed in the

00:18:49,480 --> 00:18:53,110
same information that isn't by a festive

00:18:50,950 --> 00:18:54,550
and using that you mount all you you

00:18:53,110 --> 00:18:56,260
partition your disk and you mount all of

00:18:54,550 --> 00:18:59,610
the sub volumes and you then copy

00:18:56,260 --> 00:18:59,610
everything over a lot

00:19:15,640 --> 00:19:28,160
they do so a good question because I

00:19:21,410 --> 00:19:31,490
have a nice answer so yeah we have a

00:19:28,160 --> 00:19:34,610
tool but if here is an image and and

00:19:31,490 --> 00:19:36,200
then we mount the image we look at the

00:19:34,610 --> 00:19:38,270
image and then you go through all the

00:19:36,200 --> 00:19:39,590
files on the thing and then we do the

00:19:38,270 --> 00:19:41,630
check sums of each of the files we check

00:19:39,590 --> 00:19:43,490
all the SELinux labels and the

00:19:41,630 --> 00:19:45,680
permissions and and all that stuff and

00:19:43,490 --> 00:19:47,480
then we also check more high level stuff

00:19:45,680 --> 00:19:48,590
like rpms that are installed the users

00:19:47,480 --> 00:19:50,810
are installed and so on they spit out

00:19:48,590 --> 00:19:52,850
and a huge report basically saying

00:19:50,810 --> 00:19:54,410
what's in the image and then we can

00:19:52,850 --> 00:19:56,510
rerun the things twice and you can then

00:19:54,410 --> 00:19:57,680
see what's what changes and basically

00:19:56,510 --> 00:20:00,140
the things that we see that changes is

00:19:57,680 --> 00:20:01,850
that you're in it Rd is different every

00:20:00,140 --> 00:20:03,080
time because it's not the way that we

00:20:01,850 --> 00:20:05,750
produced even that is are not reducible

00:20:03,080 --> 00:20:07,040
and your rpm and the NF databases are

00:20:05,750 --> 00:20:08,630
different because the database format is

00:20:07,040 --> 00:20:10,700
just not stable but almost everything

00:20:08,630 --> 00:20:13,870
else on your own the images that we are

00:20:10,700 --> 00:20:13,870
bruising are exactly the same

00:20:14,290 --> 00:20:19,010
yeah it's in a get report we don't ship

00:20:17,600 --> 00:20:24,320
it but it's in a git repository him it's

00:20:19,010 --> 00:20:26,360
called image info it's in one of the one

00:20:24,320 --> 00:20:30,370
of our git repositories we might want to

00:20:26,360 --> 00:20:30,370
move to that yeah sure

00:20:37,130 --> 00:20:45,000
yeah but so the question is how does it

00:20:42,870 --> 00:20:47,670
compare to something like Packer large

00:20:45,000 --> 00:20:49,230
you like talking about sure well Packer

00:20:47,670 --> 00:20:52,170
works in that way that I explained a

00:20:49,230 --> 00:20:54,000
little bit before where you you boot up

00:20:52,170 --> 00:20:55,860
an instance somewhere right and then you

00:20:54,000 --> 00:20:58,110
do all of the modifications and then you

00:20:55,860 --> 00:21:00,240
save that as your your gold image I

00:20:58,110 --> 00:21:01,830
think they often say and and we think

00:21:00,240 --> 00:21:03,510
that's the wrong way around we think we

00:21:01,830 --> 00:21:05,640
you cannot boot an image and then make

00:21:03,510 --> 00:21:07,530
that into a gold image and copy it to

00:21:05,640 --> 00:21:08,730
make many instances of it so that's

00:21:07,530 --> 00:21:10,760
that's the main difference between the

00:21:08,730 --> 00:21:10,760
two

00:21:11,210 --> 00:21:28,080
what yeah we do this all the time right

00:21:26,010 --> 00:21:30,810
we do this all the time there there is

00:21:28,080 --> 00:21:33,270
no command-line switch right now sorry

00:21:30,810 --> 00:21:34,950
the question was if you can basically

00:21:33,270 --> 00:21:36,900
interrupt the process at any time and

00:21:34,950 --> 00:21:39,090
then reuse and cache the result of one

00:21:36,900 --> 00:21:40,800
of the sages right yeah we do this all

00:21:39,090 --> 00:21:42,780
the time you just but what we do right

00:21:40,800 --> 00:21:43,950
now is we just give it a shorter Jason

00:21:42,780 --> 00:21:47,700
document that's exactly the same because

00:21:43,950 --> 00:21:49,080
we had that document and we know that we

00:21:47,700 --> 00:21:50,190
already saw that but there's no

00:21:49,080 --> 00:21:56,640
command-line switch right now but we

00:21:50,190 --> 00:21:58,590
easy very easy to add yeah yeah exactly

00:21:56,640 --> 00:22:00,180
yeah you 3000m there are very very often

00:21:58,590 --> 00:22:02,790
just like start off here if I wanted

00:22:00,180 --> 00:22:04,650
like you know like see what like what my

00:22:02,790 --> 00:22:05,970
changes in this stage are I just like

00:22:04,650 --> 00:22:07,170
take everything off here because that's

00:22:05,970 --> 00:22:09,030
the one that takes the longest time

00:22:07,170 --> 00:22:12,740
because like uploads downloads all the

00:22:09,030 --> 00:22:12,740
packages and and installs them and stuff

00:22:16,210 --> 00:22:25,460
sorry which one oh yeah I don't know off

00:22:24,169 --> 00:22:27,080
the top of my head I know we looked into

00:22:25,460 --> 00:22:28,820
it at some point but it's a little bit

00:22:27,080 --> 00:22:45,590
too far yeah please come after the

00:22:28,820 --> 00:22:47,210
talking we look into it again yeah as

00:22:45,590 --> 00:22:48,289
you see most of them are called even

00:22:47,210 --> 00:22:50,240
after some of the tools that we have

00:22:48,289 --> 00:22:52,370
sorry the question was do we rely on

00:22:50,240 --> 00:22:54,950
tools that already exist or have our own

00:22:52,370 --> 00:22:56,539
implementations we rely on tools that

00:22:54,950 --> 00:22:58,669
exist already that's why they're called

00:22:56,539 --> 00:23:00,740
like this the only thing is we have like

00:22:58,669 --> 00:23:01,940
little wrapper scripts around them so

00:23:00,740 --> 00:23:03,230
that they can run in that kind of

00:23:01,940 --> 00:23:05,750
confined environment that we have oh

00:23:03,230 --> 00:23:07,250
yeah we do call grab we do call like for

00:23:05,750 --> 00:23:10,879
the system v1 we do talk all system

00:23:07,250 --> 00:23:12,740
control so we just reuse and the biggest

00:23:10,879 --> 00:23:14,450
challenge in well I think the stages

00:23:12,740 --> 00:23:16,460
it's like we can just call the tools but

00:23:14,450 --> 00:23:18,350
the problem is usually as we talked

00:23:16,460 --> 00:23:19,700
about earlier is that the tools think

00:23:18,350 --> 00:23:21,080
that they are running on the system that

00:23:19,700 --> 00:23:22,009
they are installing on so we just have

00:23:21,080 --> 00:23:23,600
to make sure that they don't get

00:23:22,009 --> 00:23:25,009
confused that's the main we just have to

00:23:23,600 --> 00:23:26,870
wrap the tools in the right way and we

00:23:25,009 --> 00:23:29,690
try as much as possible to reuse the

00:23:26,870 --> 00:23:30,750
current existing tools thank you so much

00:23:29,690 --> 00:23:37,250
thank you very much

00:23:30,750 --> 00:23:37,250

YouTube URL: https://www.youtube.com/watch?v=5vv-i6mPtrQ


