Title: A different flavor of the distributed transaction - DevConf.CZ 2020
Publication date: 2020-02-28
Playlist: DevConfCZ 2020
Description: 
	Speakers: Martin Stefanko

Transactions are one of the most complex and yet very important areas of computing. Traditional locking protocols, used in transaction solutions today, are then very prone to holding locks on resources for unnecessarily long periods. The saga pattern provides an alternative non-blocking solution with the design that allows individual parts of the transaction to commited immediately and independently. In this session, we will present a newly created MicroProfile specification called Long Running Actions (LRA) which provides a definition of the transactional protocol and a simple API for the distributed transactions in the Java microservices environment based on the saga pattern. We will show you why the saga pattern is a very suitable transactional solution for many distributed microservices applications and demonstrate the usage of the LRA specification with the live coded demo.

[ https://sched.co/YOs3 ]

--
Recordings of talks at DevConf are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:00,060 --> 00:00:04,589
welcome to my session about distributed

00:00:02,370 --> 00:00:07,200
transactions my name is Martita Franco I

00:00:04,589 --> 00:00:08,670
work as a senior software engineer now

00:00:07,200 --> 00:00:11,099
in Red Hat mostly on middle-earth

00:00:08,670 --> 00:00:12,660
technologies like that yfd corn juice

00:00:11,099 --> 00:00:15,030
alright if you heard about these

00:00:12,660 --> 00:00:17,400
projects since last year I'm also

00:00:15,030 --> 00:00:19,650
microphone commenter I particularly like

00:00:17,400 --> 00:00:22,350
working on specifications and also

00:00:19,650 --> 00:00:24,390
starting with Jakarta right now and I'm

00:00:22,350 --> 00:00:26,340
a big micro-services enthusiast and if

00:00:24,390 --> 00:00:27,599
you are curious about stuff that I'm

00:00:26,340 --> 00:00:31,140
back home you can find me on twitter

00:00:27,599 --> 00:00:33,120
under this handle so what we are going

00:00:31,140 --> 00:00:34,890
to talk about today are transactions and

00:00:33,120 --> 00:00:36,660
before we start I would like to play a

00:00:34,890 --> 00:00:39,420
little guessing game with you can you

00:00:36,660 --> 00:00:40,469
guess how many Bitcoin transactions

00:00:39,420 --> 00:00:45,780
there were yesterday

00:00:40,469 --> 00:00:47,670
like performed yesterday number there's

00:00:45,780 --> 00:00:50,610
a funny about there is around always

00:00:47,670 --> 00:00:52,440
around 300,000 bitcoin transactions per

00:00:50,610 --> 00:00:55,170
day but this was taking this today from

00:00:52,440 --> 00:00:57,000
the side where you came here today to

00:00:55,170 --> 00:01:00,109
hear about something different and that

00:00:57,000 --> 00:01:03,210
something different is called a saga and

00:01:00,109 --> 00:01:04,379
we will get to it what it is but I would

00:01:03,210 --> 00:01:06,000
like to rather show you the

00:01:04,379 --> 00:01:07,590
implementation that we are working on

00:01:06,000 --> 00:01:09,860
micro profile which is called

00:01:07,590 --> 00:01:12,930
long-running actions or LRA in short

00:01:09,860 --> 00:01:15,509
however to start the just typing it's

00:01:12,930 --> 00:01:18,000
really hard to complement comprehend it

00:01:15,509 --> 00:01:21,750
so I will just do 15 minutes of some

00:01:18,000 --> 00:01:23,369
theory and then we will jump to ID so we

00:01:21,750 --> 00:01:26,009
are probably familiar with the typical

00:01:23,369 --> 00:01:29,970
asset transactions I will try to compare

00:01:26,009 --> 00:01:31,409
what you know with both the sides during

00:01:29,970 --> 00:01:33,150
my talk I will use this simple example

00:01:31,409 --> 00:01:34,409
that we have a transaction that we are

00:01:33,150 --> 00:01:36,360
going somewhere on the business trip and

00:01:34,409 --> 00:01:39,810
we need to book a flight booked a hotel

00:01:36,360 --> 00:01:44,670
and book a car we want all three of

00:01:39,810 --> 00:01:46,560
these otherwise we are not going so but

00:01:44,670 --> 00:01:47,869
the asset transaction stands for

00:01:46,560 --> 00:01:49,020
probably already know these

00:01:47,869 --> 00:01:51,600
optimistically

00:01:49,020 --> 00:01:54,360
all-or-nothing property basically I want

00:01:51,600 --> 00:01:56,360
all the things in the transactions to

00:01:54,360 --> 00:01:58,890
happen or none of them to happen

00:01:56,360 --> 00:02:01,500
consistency if we start the transaction

00:01:58,890 --> 00:02:03,270
in a consistent system we need to end it

00:02:01,500 --> 00:02:04,890
in a consistent system so we cannot end

00:02:03,270 --> 00:02:08,910
in a system when we have flied and we

00:02:04,890 --> 00:02:11,250
didn't public our isolation if we have

00:02:08,910 --> 00:02:11,950
multiple transactions that are performed

00:02:11,250 --> 00:02:13,900
in

00:02:11,950 --> 00:02:16,209
they cannot influence each other so

00:02:13,900 --> 00:02:19,060
basically if we have transactions a and

00:02:16,209 --> 00:02:21,330
B for a it must look like that B hasn't

00:02:19,060 --> 00:02:23,500
started yet or it's already finished and

00:02:21,330 --> 00:02:26,349
their ability is just saying that the

00:02:23,500 --> 00:02:28,330
transactions finish successfully or not

00:02:26,349 --> 00:02:32,470
so successfully it needs to be somewhat

00:02:28,330 --> 00:02:35,890
resistant how we actually acid

00:02:32,470 --> 00:02:38,739
transactions to pay is the only way how

00:02:35,890 --> 00:02:41,680
to achieve it is by usage of consensus

00:02:38,739 --> 00:02:43,750
protocols and the most known one that

00:02:41,680 --> 00:02:45,550
you are probably familiar with from the

00:02:43,750 --> 00:02:47,680
university is it two-phase commit

00:02:45,550 --> 00:02:50,230
protocol and actually this is the most

00:02:47,680 --> 00:02:52,480
we use protocol for any transaction

00:02:50,230 --> 00:02:56,440
processing them today however there are

00:02:52,480 --> 00:02:59,049
other but they're rather slightly we

00:02:56,440 --> 00:03:00,670
prefer to be more complex than to PC and

00:02:59,049 --> 00:03:02,560
people are trying to avoid them but

00:03:00,670 --> 00:03:04,390
there are some solution that are solving

00:03:02,560 --> 00:03:06,700
some of the problems of the PC available

00:03:04,390 --> 00:03:08,890
however for the simplicity reasons and

00:03:06,700 --> 00:03:11,290
for my demonstration to pcs more than

00:03:08,890 --> 00:03:15,250
suitable so I will stick with it for my

00:03:11,290 --> 00:03:17,470
debate though so we probably know how to

00:03:15,250 --> 00:03:20,380
PC works just to really quickly replace

00:03:17,470 --> 00:03:23,200
it pazi's in a first place we have this

00:03:20,380 --> 00:03:25,570
two phase commit coordinator which is a

00:03:23,200 --> 00:03:27,549
standalone service and I'm already

00:03:25,570 --> 00:03:29,049
talking micro services so we have arrow

00:03:27,549 --> 00:03:31,299
and micro service or two micro service

00:03:29,049 --> 00:03:33,489
and current and micro service so in the

00:03:31,299 --> 00:03:36,220
first phase the transaction is passed

00:03:33,489 --> 00:03:38,109
somewhere to this system and basically

00:03:36,220 --> 00:03:40,359
the coordinator or someone else will ask

00:03:38,109 --> 00:03:43,290
for the individual resources in a

00:03:40,359 --> 00:03:46,060
particular micro services these

00:03:43,290 --> 00:03:48,640
resources are located in the individual

00:03:46,060 --> 00:03:51,760
services and some form of a box are

00:03:48,640 --> 00:03:54,100
taken so you are not actually buying the

00:03:51,760 --> 00:03:55,989
flight or the ticket for a flight you

00:03:54,100 --> 00:03:59,890
are just looking it for someone else to

00:03:55,989 --> 00:04:01,900
not take it if you are able to log all

00:03:59,890 --> 00:04:03,850
the resources you will just send some

00:04:01,900 --> 00:04:07,120
okay message back to the coordinator and

00:04:03,850 --> 00:04:09,220
in a second phase if everyone responded

00:04:07,120 --> 00:04:12,910
successfully so the transactions can be

00:04:09,220 --> 00:04:14,670
actually performed the coordinator

00:04:12,910 --> 00:04:17,100
start the face do

00:04:14,670 --> 00:04:18,450
protocol and cents to every service yes

00:04:17,100 --> 00:04:20,280
go ahead and actually perform the

00:04:18,450 --> 00:04:22,650
operation that was it quested so the

00:04:20,280 --> 00:04:25,020
looks are removed and actually the

00:04:22,650 --> 00:04:29,180
tickets are both basically so you are

00:04:25,020 --> 00:04:32,010
paying money now in this particular time

00:04:29,180 --> 00:04:34,020
if everything successful again on the

00:04:32,010 --> 00:04:35,639
confirmation and we can say to the court

00:04:34,020 --> 00:04:37,320
that the transaction was successful we

00:04:35,639 --> 00:04:41,430
are holding off resources and we are

00:04:37,320 --> 00:04:45,570
good to go if something doesn't go so

00:04:41,430 --> 00:04:49,440
well so we cannot for instance walk the

00:04:45,570 --> 00:04:52,040
car or reserve the car because there are

00:04:49,440 --> 00:04:54,389
more normal car backs what or something

00:04:52,040 --> 00:04:56,070
we need to abort all the resources

00:04:54,389 --> 00:04:58,020
because the whole transaction cannot be

00:04:56,070 --> 00:04:59,820
completed so we are sending a port

00:04:58,020 --> 00:05:02,040
message now from the coordinator again

00:04:59,820 --> 00:05:03,810
walks are removed basically the

00:05:02,040 --> 00:05:04,620
resources on just forgotten we are not

00:05:03,810 --> 00:05:06,690
doing anything

00:05:04,620 --> 00:05:08,610
ok messages sent back and we are

00:05:06,690 --> 00:05:10,740
finished with the failure so the core

00:05:08,610 --> 00:05:13,130
can now repeat the transaction in a

00:05:10,740 --> 00:05:15,870
later time or do some other action

00:05:13,130 --> 00:05:20,789
however what is the biggest problem with

00:05:15,870 --> 00:05:22,140
our I coordinate to PC basically

00:05:20,789 --> 00:05:24,060
consciousness particles in general

00:05:22,140 --> 00:05:25,530
especially if we move into network so

00:05:24,060 --> 00:05:27,510
these are ready we stand on services

00:05:25,530 --> 00:05:29,700
communicating throughout the network is

00:05:27,510 --> 00:05:33,450
that things become the network dies

00:05:29,700 --> 00:05:35,490
alone so if the coordinator fails it

00:05:33,450 --> 00:05:37,979
cannot be contacted after the first

00:05:35,490 --> 00:05:39,750
phase we are basically now in a state

00:05:37,979 --> 00:05:42,060
that with all these pre-service is are

00:05:39,750 --> 00:05:45,800
they holding locks on these resources

00:05:42,060 --> 00:05:48,030
and that may be other services other

00:05:45,800 --> 00:05:50,430
customers which are requesting these

00:05:48,030 --> 00:05:50,820
resources and they may be coming and

00:05:50,430 --> 00:05:53,400
coming

00:05:50,820 --> 00:05:55,410
however you cannot allow them to

00:05:53,400 --> 00:05:58,680
actually get to this resource so if this

00:05:55,410 --> 00:06:00,150
is the last ticket for despite there may

00:05:58,680 --> 00:06:03,060
be four people waiting for this file

00:06:00,150 --> 00:06:05,310
nobody ever paid for this year but you

00:06:03,060 --> 00:06:08,039
cannot give give it to anybody so we are

00:06:05,310 --> 00:06:10,470
losing money or even worse you will

00:06:08,039 --> 00:06:14,310
leave all of the other requests to wait

00:06:10,470 --> 00:06:16,350
for you to actually you cannot say if

00:06:14,310 --> 00:06:19,289
you ever will lose this log so we will

00:06:16,350 --> 00:06:21,060
just keep them waiting and I had the

00:06:19,289 --> 00:06:23,580
talk yesterday about reactive and

00:06:21,060 --> 00:06:24,689
reactive systems and the most important

00:06:23,580 --> 00:06:27,869
stuff

00:06:24,689 --> 00:06:30,539
these modern enterprise applications for

00:06:27,869 --> 00:06:32,399
many people is a responsiveness so if

00:06:30,539 --> 00:06:34,739
you want a user to quick something and

00:06:32,399 --> 00:06:37,799
wait for three or five seconds they get

00:06:34,739 --> 00:06:40,319
nervous and you don't really want to get

00:06:37,799 --> 00:06:43,769
through these situations so here is

00:06:40,319 --> 00:06:45,839
where Sagar comes I would like to say

00:06:43,769 --> 00:06:50,749
that this is a new idea but actually

00:06:45,839 --> 00:06:53,669
this was first published in 87 by

00:06:50,749 --> 00:06:56,369
Solomon where they describe this pattern

00:06:53,669 --> 00:06:59,129
in long-running database transactions

00:06:56,369 --> 00:07:00,719
because this taking of walks even in

00:06:59,129 --> 00:07:03,959
databases when you needed to lock the

00:07:00,719 --> 00:07:09,389
whole table for periods of days it was

00:07:03,959 --> 00:07:12,539
not acceptable even in 1987 so what the

00:07:09,389 --> 00:07:17,479
saga actually is it's still a

00:07:12,539 --> 00:07:20,249
transaction but it is not acid anymore

00:07:17,479 --> 00:07:22,379
Sokka is basically again a set of

00:07:20,249 --> 00:07:24,329
operations but it allows individual

00:07:22,379 --> 00:07:26,549
operations to interweave with each other

00:07:24,329 --> 00:07:29,659
which is not possible with two-phase

00:07:26,549 --> 00:07:33,179
commit because we are either committing

00:07:29,659 --> 00:07:35,579
at the same time so now when I will have

00:07:33,179 --> 00:07:37,800
this example I could actually go call

00:07:35,579 --> 00:07:40,110
upon service and I could pay the money

00:07:37,800 --> 00:07:42,329
by the ticket so now I'm in a state that

00:07:40,110 --> 00:07:44,639
I have a ticket for a fight but I still

00:07:42,329 --> 00:07:47,039
haven't called the car rental and hotel

00:07:44,639 --> 00:07:50,339
service it so I am in inconsistent

00:07:47,039 --> 00:07:53,729
system isolation is broken right away

00:07:50,339 --> 00:07:56,309
and how the saga deals with this kind of

00:07:53,729 --> 00:07:58,979
situation is by a compensation action or

00:07:56,309 --> 00:08:02,669
compensations basically compensation is

00:07:58,979 --> 00:08:05,009
only a reverse action or semantical undo

00:08:02,669 --> 00:08:08,069
of the virginal perform operation that

00:08:05,009 --> 00:08:11,039
may be whatever you like it may be in a

00:08:08,069 --> 00:08:14,639
if your original operation is to add a

00:08:11,039 --> 00:08:16,349
role to database the reverse semantical

00:08:14,639 --> 00:08:19,889
undo compensation that we just did with

00:08:16,349 --> 00:08:22,800
Israel however if your operation is

00:08:19,889 --> 00:08:25,110
something more complex or something

00:08:22,800 --> 00:08:27,149
which is not idempotent not irreversible

00:08:25,110 --> 00:08:29,309
by opposite action like sending an email

00:08:27,149 --> 00:08:31,380
I cannot undo something Amin email

00:08:29,309 --> 00:08:33,810
however this is a 70

00:08:31,380 --> 00:08:35,729
I'm due basically this means that you

00:08:33,810 --> 00:08:38,400
are defining what the undo action should

00:08:35,729 --> 00:08:40,260
be so if I originally send an email in

00:08:38,400 --> 00:08:41,669
my transaction I can send follow-up

00:08:40,260 --> 00:08:43,740
email just saying that the previous

00:08:41,669 --> 00:08:46,740
email is cancelled or something similar

00:08:43,740 --> 00:08:48,690
and this is totally up to you you are

00:08:46,740 --> 00:08:50,520
defining your services you are defining

00:08:48,690 --> 00:08:52,380
your compensation so you know what you

00:08:50,520 --> 00:08:56,190
are doing in your original operation and

00:08:52,380 --> 00:08:58,380
you know how to cancel it if you are

00:08:56,190 --> 00:08:59,970
interested in really how this pattern

00:08:58,380 --> 00:09:02,460
can be put into practice that is a

00:08:59,970 --> 00:09:03,450
really interesting tow by Kathy

00:09:02,460 --> 00:09:05,280
McCaffrey

00:09:03,450 --> 00:09:08,940
where she describes how the use saga

00:09:05,280 --> 00:09:11,280
pattern in Halo game in multiplayer to

00:09:08,940 --> 00:09:12,750
God cystic or something it was really

00:09:11,280 --> 00:09:15,660
interesting to see that this can be

00:09:12,750 --> 00:09:19,080
actually used and people people are not

00:09:15,660 --> 00:09:22,770
always in the mid of food acid they will

00:09:19,080 --> 00:09:25,230
get to it so we again take our original

00:09:22,770 --> 00:09:29,160
transaction and we will try to put it

00:09:25,230 --> 00:09:31,020
into a saga so now we only have these

00:09:29,160 --> 00:09:33,330
free services we lose the coordinator

00:09:31,020 --> 00:09:36,000
for now and we just send the saga

00:09:33,330 --> 00:09:37,950
definition or this can be adjacent to

00:09:36,000 --> 00:09:39,630
the first service the first service will

00:09:37,950 --> 00:09:41,460
allocate the resource find the ticket

00:09:39,630 --> 00:09:44,010
and actually go ahead and pay the money

00:09:41,460 --> 00:09:46,740
so now we are instead we already have

00:09:44,010 --> 00:09:49,860
the flight ticket we can mark it in a

00:09:46,740 --> 00:09:52,710
JSON somewhere or in the in the saga

00:09:49,860 --> 00:09:54,450
that is passed away and now we are going

00:09:52,710 --> 00:09:56,130
to stay in an inconsistent state

00:09:54,450 --> 00:09:59,460
basically already this is already

00:09:56,130 --> 00:10:01,620
breaking s then you will send the saga

00:09:59,460 --> 00:10:03,060
to other services and the same operation

00:10:01,620 --> 00:10:06,900
again we will pay the money for the

00:10:03,060 --> 00:10:10,320
ticket sorry for the hotel room and

00:10:06,900 --> 00:10:11,550
again you will just back to the cart and

00:10:10,320 --> 00:10:15,090
tow service and it will pay money for

00:10:11,550 --> 00:10:17,340
the car and you are done basically if

00:10:15,090 --> 00:10:18,990
everything goes successful so you want

00:10:17,340 --> 00:10:21,420
through the whole chain of operations

00:10:18,990 --> 00:10:23,340
and all operation for successful you are

00:10:21,420 --> 00:10:26,610
finished you are again in a consistent

00:10:23,340 --> 00:10:28,730
system and everything everything is good

00:10:26,610 --> 00:10:32,430
you are happy your customers are happy

00:10:28,730 --> 00:10:34,320
the funny part is when something fails

00:10:32,430 --> 00:10:36,870
so we are again in the same phase we are

00:10:34,320 --> 00:10:39,960
already paid money for flight and for

00:10:36,870 --> 00:10:43,080
hotel but we cannot book a car because

00:10:39,960 --> 00:10:44,790
again reasons so now we have

00:10:43,080 --> 00:10:47,190
because we already paid some money and

00:10:44,790 --> 00:10:49,320
we cannot actually complete the business

00:10:47,190 --> 00:10:50,850
tree so how does I get that we did

00:10:49,320 --> 00:10:52,620
people just start calling the

00:10:50,850 --> 00:10:54,870
compensation actions but in reverse

00:10:52,620 --> 00:10:57,450
order so your individual operations can

00:10:54,870 --> 00:10:59,460
depend on each other so we will just

00:10:57,450 --> 00:11:02,340
send cancer saga message back to the

00:10:59,460 --> 00:11:05,130
hotel service and semantical action for

00:11:02,340 --> 00:11:07,440
hotel room will be cancel the booking so

00:11:05,130 --> 00:11:09,690
we just cancel the booking you are

00:11:07,440 --> 00:11:12,480
refunded probably for the full price and

00:11:09,690 --> 00:11:14,400
again the same thing for a flight so we

00:11:12,480 --> 00:11:16,740
cancel anything we have no money back

00:11:14,400 --> 00:11:18,480
and we can say that the sucker was

00:11:16,740 --> 00:11:19,740
unsuccessful and it can be returned

00:11:18,480 --> 00:11:23,160
later or something similar

00:11:19,740 --> 00:11:25,380
however we are again back in a

00:11:23,160 --> 00:11:27,720
consistent system so there was a state

00:11:25,380 --> 00:11:29,430
where we lose some money we paid some

00:11:27,720 --> 00:11:31,530
money and we hope they're holding the

00:11:29,430 --> 00:11:33,240
resources for some brief period of time

00:11:31,530 --> 00:11:34,770
but eventually we came back to a

00:11:33,240 --> 00:11:37,800
consistent system and we get our money

00:11:34,770 --> 00:11:40,380
back you see that this is quite

00:11:37,800 --> 00:11:42,540
different from original or traditional

00:11:40,380 --> 00:11:46,740
asset transactions but it turns out that

00:11:42,540 --> 00:11:48,540
in many situations this like really only

00:11:46,740 --> 00:11:53,420
that you are holding resources for just

00:11:48,540 --> 00:11:56,520
a while is acceptable for many use cases

00:11:53,420 --> 00:11:57,810
just because this can be quite hard for

00:11:56,520 --> 00:12:00,660
if you are seeing this for the first

00:11:57,810 --> 00:12:03,060
time I just want to repeat that other

00:12:00,660 --> 00:12:05,760
scenario but writing down the individual

00:12:03,060 --> 00:12:08,700
operation so again we are booking the

00:12:05,760 --> 00:12:11,460
flight sending the saga booking the

00:12:08,700 --> 00:12:14,610
hotel sending the saga booking the car

00:12:11,460 --> 00:12:18,030
and these fails so now we are sending

00:12:14,610 --> 00:12:20,280
this saga cancel message and we are just

00:12:18,030 --> 00:12:22,710
calling the compensation action in the

00:12:20,280 --> 00:12:24,960
same service behind by the same service

00:12:22,710 --> 00:12:27,270
they know how to compensate we will just

00:12:24,960 --> 00:12:29,670
provide them with the idea of the room

00:12:27,270 --> 00:12:32,250
let's say and again the same thing for

00:12:29,670 --> 00:12:34,740
the flight and then we are finished so

00:12:32,250 --> 00:12:36,360
you see that we are hoping for a sudden

00:12:34,740 --> 00:12:38,610
quiet time but eventually the

00:12:36,360 --> 00:12:43,080
compensation is called and we are

00:12:38,610 --> 00:12:45,330
getting back to a consistent system so

00:12:43,080 --> 00:12:47,790
acid versus base as I already were

00:12:45,330 --> 00:12:50,280
talking previously we directly those

00:12:47,790 --> 00:12:51,459
isolation because other transactions

00:12:50,280 --> 00:12:53,499
that are running in parallel see

00:12:51,459 --> 00:12:55,240
you're already holding one ticket for a

00:12:53,499 --> 00:12:57,569
flying but you haven't booked anything

00:12:55,240 --> 00:13:02,170
else and we will consistency because

00:12:57,569 --> 00:13:05,079
it's inconsistent state but saga

00:13:02,170 --> 00:13:06,519
actually tried to utilize is a different

00:13:05,079 --> 00:13:09,089
transactional model which is called base

00:13:06,519 --> 00:13:14,519
and that stands for basically available

00:13:09,089 --> 00:13:18,339
if you are familiar with captain captain

00:13:14,519 --> 00:13:21,790
okay captain Ram is basically an idea

00:13:18,339 --> 00:13:23,679
from older paper that even distributed

00:13:21,790 --> 00:13:24,850
system which you have in which you have

00:13:23,679 --> 00:13:27,910
components connected throughout the

00:13:24,850 --> 00:13:30,149
network Google can have at most two or

00:13:27,910 --> 00:13:31,899
three pins and that's consistency

00:13:30,149 --> 00:13:34,899
availability and partition tolerance

00:13:31,899 --> 00:13:37,389
since you cannot make network reliable

00:13:34,899 --> 00:13:40,360
at least today you need to choose

00:13:37,389 --> 00:13:43,589
between consistency and availability as

00:13:40,360 --> 00:13:48,629
it chooses consistency base chooses

00:13:43,589 --> 00:13:51,759
availability soft state that's basically

00:13:48,629 --> 00:13:54,550
again that because of the individual

00:13:51,759 --> 00:13:56,470
operations but can be performed and part

00:13:54,550 --> 00:13:59,019
isn't you cannot really say that you

00:13:56,470 --> 00:14:01,149
know in which state your saga is or your

00:13:59,019 --> 00:14:04,269
system it because eventually you can get

00:14:01,149 --> 00:14:06,100
into some different stage in it can even

00:14:04,269 --> 00:14:09,309
be in this state if the messages are

00:14:06,100 --> 00:14:10,809
already sent but not received and the

00:14:09,309 --> 00:14:13,179
most important one is that eventual

00:14:10,809 --> 00:14:16,600
consistency so second guarantee we

00:14:13,179 --> 00:14:18,699
rolled it in some some point in the

00:14:16,600 --> 00:14:20,230
future the state of the system will

00:14:18,699 --> 00:14:22,779
become consistent but we don't know what

00:14:20,230 --> 00:14:24,639
so either

00:14:22,779 --> 00:14:26,799
all of the operations are performed or

00:14:24,639 --> 00:14:28,329
all the compensation that semantical

00:14:26,799 --> 00:14:30,279
handles are called for operation

00:14:28,329 --> 00:14:32,350
operation so eventually if you don't

00:14:30,279 --> 00:14:43,420
start any new sagas your system will

00:14:32,350 --> 00:14:45,069
become consistent there are two

00:14:43,420 --> 00:14:47,019
different approaches that you can play

00:14:45,069 --> 00:14:48,399
when you are developing the sagas and

00:14:47,019 --> 00:14:50,290
it's the centralization and

00:14:48,399 --> 00:14:51,790
orchestration basically the

00:14:50,290 --> 00:14:54,759
centralization is what I was showing you

00:14:51,790 --> 00:14:55,930
so far you are passing the saga through

00:14:54,759 --> 00:14:57,520
some definition that can

00:14:55,930 --> 00:15:01,090
whatever to all the different services

00:14:57,520 --> 00:15:03,520
and then there is an orchestration that

00:15:01,090 --> 00:15:05,470
you have again some coordinator now it's

00:15:03,520 --> 00:15:07,420
a soccer coordinator and this is

00:15:05,470 --> 00:15:09,790
irresponsible to actually call the

00:15:07,420 --> 00:15:11,230
individual operations and compensation

00:15:09,790 --> 00:15:13,540
on your side we see so you can either

00:15:11,230 --> 00:15:16,000
pass saga directed to a coordinator or

00:15:13,540 --> 00:15:17,260
pass it to individual services but the

00:15:16,000 --> 00:15:19,390
services needs to panelist be the

00:15:17,260 --> 00:15:22,180
coordinator and they will tell the

00:15:19,390 --> 00:15:25,630
coordinator please call these when there

00:15:22,180 --> 00:15:27,460
will be potential compensation so again

00:15:25,630 --> 00:15:28,810
every service needs to Emily's with the

00:15:27,460 --> 00:15:30,370
coordinators of the coordinator is

00:15:28,810 --> 00:15:32,520
responsible to make the decision to

00:15:30,370 --> 00:15:36,540
actually compensate or something else

00:15:32,520 --> 00:15:39,130
and with that we are getting to the main

00:15:36,540 --> 00:15:41,080
point of this talk and this microphone

00:15:39,130 --> 00:15:42,580
over a long running actions which is

00:15:41,080 --> 00:15:45,010
basically the translation of this saga

00:15:42,580 --> 00:15:48,460
pattern into the other world into my

00:15:45,010 --> 00:15:52,150
profile specification we are currently

00:15:48,460 --> 00:15:56,260
in our c1 but our c2 is coming this week

00:15:52,150 --> 00:16:00,280
hopefully and GA next month or so so

00:15:56,260 --> 00:16:02,680
it's not still finished but I will show

00:16:00,280 --> 00:16:05,290
you to you just in a minute and

00:16:02,680 --> 00:16:09,190
hopefully it's stable enough already

00:16:05,290 --> 00:16:11,680
and if there are any questions please

00:16:09,190 --> 00:16:14,380
share the questions as I'm going if

00:16:11,680 --> 00:16:16,390
something is not clear I will just jump

00:16:14,380 --> 00:16:18,430
to a tell me now and I will spent

00:16:16,390 --> 00:16:20,850
probably the rest of the talk in a

00:16:18,430 --> 00:16:20,850
terminal

00:16:29,180 --> 00:16:38,630
this button I should also somehow

00:16:32,540 --> 00:16:40,490
reverse unnecessarily because in a point

00:16:38,630 --> 00:16:42,050
of time you are actually holding the

00:16:40,490 --> 00:16:44,540
resource so you can log it somewhere and

00:16:42,050 --> 00:16:46,490
then you will cancel it so I don't

00:16:44,540 --> 00:16:49,040
really see a reason if you have a use

00:16:46,490 --> 00:16:51,530
case for this for sure but I will show

00:16:49,040 --> 00:16:55,130
you in a minute these are going to be

00:16:51,530 --> 00:16:56,810
basically pressed invocation so what you

00:16:55,130 --> 00:17:05,780
define in your rest invocation is up to

00:16:56,810 --> 00:17:07,520
you even bigger okay because the I will

00:17:05,780 --> 00:17:13,459
help apply quite a lot of terminal

00:17:07,520 --> 00:17:16,040
solvents so what I will going to use

00:17:13,459 --> 00:17:17,240
right now is actually implementation

00:17:16,040 --> 00:17:18,950
that is available in Narayana

00:17:17,240 --> 00:17:20,270
transactional manager which is used in

00:17:18,950 --> 00:17:22,520
Wi-Fi

00:17:20,270 --> 00:17:25,310
there is also implementational currently

00:17:22,520 --> 00:17:26,839
in payara and we expect more in the

00:17:25,310 --> 00:17:29,360
future so I will just run this

00:17:26,839 --> 00:17:31,220
coordinator it's already acquired

00:17:29,360 --> 00:17:36,440
service and we don't need it anymore so

00:17:31,220 --> 00:17:39,020
I will just move it away and basically

00:17:36,440 --> 00:17:42,200
this coordinator runs on port 8080 and

00:17:39,020 --> 00:17:43,970
we are allowed to query all active other

00:17:42,200 --> 00:17:47,720
areas or other areas the dis coordinator

00:17:43,970 --> 00:17:49,850
knows oh by a simple rest calls so

00:17:47,720 --> 00:17:51,650
currently there is no other started so

00:17:49,850 --> 00:17:55,310
we have an empty array but I will

00:17:51,650 --> 00:17:57,320
actually put this into a watch so you

00:17:55,310 --> 00:18:00,170
can see when we will be developing

00:17:57,320 --> 00:18:03,260
different services that we are actually

00:18:00,170 --> 00:18:09,440
starting something and with that I will

00:18:03,260 --> 00:18:11,180
finally sorry create actual micro

00:18:09,440 --> 00:18:14,150
service that we are going to use I am

00:18:11,180 --> 00:18:16,880
using our coos but I have my script

00:18:14,150 --> 00:18:18,290
which is building my local variables we

00:18:16,880 --> 00:18:19,880
have a poor request open for an

00:18:18,290 --> 00:18:22,400
extension since last week

00:18:19,880 --> 00:18:24,290
only you can use it directly if you put

00:18:22,400 --> 00:18:27,320
dependencies but I want to use Quercus

00:18:24,290 --> 00:18:30,200
because it's just faster and easier but

00:18:27,320 --> 00:18:33,110
in the end there is a link to full

00:18:30,200 --> 00:18:37,970
tutorial sorry I forgot probably to

00:18:33,110 --> 00:18:39,590
remove yesterday there is a link to a

00:18:37,970 --> 00:18:42,260
tutorial which is using dontel as a

00:18:39,590 --> 00:18:44,419
runtime where you will use

00:18:42,260 --> 00:18:47,150
normal dependencies and it's not an

00:18:44,419 --> 00:18:49,130
extension but for demonstration purposes

00:18:47,150 --> 00:18:52,190
I will show you two or repeat this at

00:18:49,130 --> 00:18:55,010
the end so just let me CD to our a

00:18:52,190 --> 00:18:57,350
service again if you are not familiar

00:18:55,010 --> 00:19:00,080
with particles it's basically working on

00:18:57,350 --> 00:19:03,260
an extension pattern so we already

00:19:00,080 --> 00:19:05,210
should have here somewhere and I can

00:19:03,260 --> 00:19:07,790
make it bigger not Ayana

00:19:05,210 --> 00:19:12,860
la extensión if I will be able to find

00:19:07,790 --> 00:19:17,350
it if someone sees it it would be nice

00:19:12,860 --> 00:19:21,260
because I don't see it yeah Mariana la

00:19:17,350 --> 00:19:23,510
currently if you just download Farkas or

00:19:21,260 --> 00:19:25,490
run the latest fashion import be there

00:19:23,510 --> 00:19:27,530
but hopefully soon the Porticus will be

00:19:25,490 --> 00:19:29,990
match so to actually add an extension

00:19:27,530 --> 00:19:32,990
here is a comment to which I need to

00:19:29,990 --> 00:19:35,000
copy to add an extension and the search

00:19:32,990 --> 00:19:37,490
mechanism is really nice so I can just

00:19:35,000 --> 00:19:41,360
type la here and it should add my other

00:19:37,490 --> 00:19:45,080
extension and basically that's it now I

00:19:41,360 --> 00:19:50,530
can compile this project and around that

00:19:45,080 --> 00:19:54,460
quark was like real old mode make it

00:19:50,530 --> 00:19:54,460
bigger again and

00:19:57,720 --> 00:20:02,679
now it's not Java I probably have

00:20:00,490 --> 00:20:05,440
something running on that port because I

00:20:02,679 --> 00:20:08,710
have always liked 20 different

00:20:05,440 --> 00:20:11,590
workspaces open and I still yeah now I

00:20:08,710 --> 00:20:14,679
know what is the problem I started the

00:20:11,590 --> 00:20:16,570
other coordinator on port 8080 and I

00:20:14,679 --> 00:20:20,409
need to start this service on a

00:20:16,570 --> 00:20:23,470
different port of course so if I do use

00:20:20,409 --> 00:20:26,350
HTTP port 8081 and just repeat this

00:20:23,470 --> 00:20:27,610
watch yeah well I agree all demo so we

00:20:26,350 --> 00:20:29,980
will forget the basic stuff that you

00:20:27,610 --> 00:20:33,820
already started something on 8080 like

00:20:29,980 --> 00:20:35,889
two minutes ago okay just because I know

00:20:33,820 --> 00:20:40,210
that this is usually hard to follow

00:20:35,889 --> 00:20:42,820
I've prepared labels this time so we

00:20:40,210 --> 00:20:44,769
will have a larae service somewhere I

00:20:42,820 --> 00:20:46,419
hope that you can read these we have

00:20:44,769 --> 00:20:48,639
seen here we can see here that this is

00:20:46,419 --> 00:20:51,970
an array coordinator and I will open

00:20:48,639 --> 00:21:01,649
here a client so I will just copy paste

00:20:51,970 --> 00:21:01,649
this again I'm sorry where did I put it

00:21:02,519 --> 00:21:12,100
and one last thing that I forgot to do

00:21:06,820 --> 00:21:13,629
is to actually open this in idea I'm

00:21:12,100 --> 00:21:16,779
starting starting the project from

00:21:13,629 --> 00:21:20,230
scratch so it can sometimes make some

00:21:16,779 --> 00:21:22,120
issues and I will put this into

00:21:20,230 --> 00:21:25,450
presentation mode and this should be

00:21:22,120 --> 00:21:27,549
hopefully big enough for you to see so

00:21:25,450 --> 00:21:29,950
what this is basically only calling

00:21:27,549 --> 00:21:32,039
maven Clark who's create in the

00:21:29,950 --> 00:21:35,379
background so this will create for us

00:21:32,039 --> 00:21:39,129
only a single jax-rs endpoint I can just

00:21:35,379 --> 00:21:43,929
demonstrate sorry that it's running with

00:21:39,129 --> 00:21:45,789
HTTP 80 81 and that's pink and yes it is

00:21:43,929 --> 00:21:49,480
running so we can start actually working

00:21:45,789 --> 00:21:52,779
on another la what that maven Quercus ad

00:21:49,480 --> 00:21:55,179
extension only did is it added a maven

00:21:52,779 --> 00:21:56,889
dependency which you can do manually but

00:21:55,179 --> 00:21:57,810
if you don't know what the name of the

00:21:56,889 --> 00:21:59,720
extension is easy

00:21:57,810 --> 00:22:02,220
better to start with that least anxious

00:21:59,720 --> 00:22:04,320
extensions but I wanted to show you so

00:22:02,220 --> 00:22:11,130
with that let me just create a little

00:22:04,320 --> 00:22:14,190
resource and this will be at LA and we

00:22:11,130 --> 00:22:16,440
can start creating our application our

00:22:14,190 --> 00:22:20,430
operation that is actually going to be

00:22:16,440 --> 00:22:26,760
performed I will just go a performance

00:22:20,430 --> 00:22:30,380
response from perform and here we will

00:22:26,760 --> 00:22:33,780
look nicely that we are performing

00:22:30,380 --> 00:22:38,730
performing an operation that we will

00:22:33,780 --> 00:22:44,880
actually perform the operation and then

00:22:38,730 --> 00:22:46,590
I will just return response okay I don't

00:22:44,880 --> 00:22:48,660
want to do anything critical this would

00:22:46,590 --> 00:22:50,730
be your business section this is the

00:22:48,660 --> 00:22:53,160
work that you want to execute inside the

00:22:50,730 --> 00:22:59,070
transaction so I will just create a

00:22:53,160 --> 00:23:00,360
really simple logging so we can see it

00:22:59,070 --> 00:23:03,720
in a terminal that we are actually doing

00:23:00,360 --> 00:23:08,150
something I will just print the

00:23:03,720 --> 00:23:10,590
parameter and I see out at the end and

00:23:08,150 --> 00:23:12,960
our operation that we are going to

00:23:10,590 --> 00:23:16,320
perform there'll be only a tread slip so

00:23:12,960 --> 00:23:18,930
we can see it in on the coordinator that

00:23:16,320 --> 00:23:20,910
is actually started so this is the

00:23:18,930 --> 00:23:23,820
resource that you probably already have

00:23:20,910 --> 00:23:25,860
performing your operation orders booking

00:23:23,820 --> 00:23:28,170
the flight booking the auto room to

00:23:25,860 --> 00:23:31,430
actually put it into an LA all you need

00:23:28,170 --> 00:23:33,750
to do is to add a single annotation at I

00:23:31,430 --> 00:23:37,230
will just save it and because I am

00:23:33,750 --> 00:23:40,820
running percocet now that mode I should

00:23:37,230 --> 00:23:44,790
be already able to pull this at LA

00:23:40,820 --> 00:23:47,760
perform and when I call it it will be

00:23:44,790 --> 00:23:50,070
replays we can see probably you were

00:23:47,760 --> 00:23:52,320
able to see that the transaction is

00:23:50,070 --> 00:23:54,150
started in a coordinator and after two

00:23:52,320 --> 00:23:56,310
seconds it's finished so by default

00:23:54,150 --> 00:24:00,000
there are several transactional types

00:23:56,310 --> 00:24:02,520
again great la similar way as a way to

00:24:00,000 --> 00:24:05,450
JTA if you are familiar with it so I can

00:24:02,520 --> 00:24:05,450
say here

00:24:06,640 --> 00:24:16,200
I need to do every time mandatory nurse

00:24:11,500 --> 00:24:18,760
did never suspended supported sorry etc

00:24:16,200 --> 00:24:20,230
you are probably familiar with these if

00:24:18,760 --> 00:24:22,450
you are familiar with JTA the default

00:24:20,230 --> 00:24:24,370
one is required which will start a new

00:24:22,450 --> 00:24:26,950
transaction when the method start and

00:24:24,370 --> 00:24:29,020
will finish it when the method ends if

00:24:26,950 --> 00:24:30,790
there is no transaction it received I

00:24:29,020 --> 00:24:33,130
will get to it in a later panel while

00:24:30,790 --> 00:24:37,270
but now now we are good to go with the

00:24:33,130 --> 00:24:38,860
default so now we are already having our

00:24:37,270 --> 00:24:40,720
transaction which is started when I'm

00:24:38,860 --> 00:24:42,870
entering this peripheral method and

00:24:40,720 --> 00:24:45,640
completed when I'm finishing it but

00:24:42,870 --> 00:24:47,260
nothing is actually ever unlisted inside

00:24:45,640 --> 00:24:50,430
these transactions because we don't have

00:24:47,260 --> 00:24:54,040
that compensating action so let's edit

00:24:50,430 --> 00:24:56,800
to create an compensation action as you

00:24:54,040 --> 00:24:59,380
can see this is mostly built on top of

00:24:56,800 --> 00:25:01,450
jax-rs but that's not required for every

00:24:59,380 --> 00:25:03,730
and everything and I will get to it in

00:25:01,450 --> 00:25:06,490
the end but I will for now stick to

00:25:03,730 --> 00:25:08,940
jax-rs resources so I will have my

00:25:06,490 --> 00:25:12,220
compensator I thought now again

00:25:08,940 --> 00:25:14,640
compensation surprisingly annotated with

00:25:12,220 --> 00:25:21,880
compensate and this will be again

00:25:14,640 --> 00:25:29,650
responds compensate and here nicely that

00:25:21,880 --> 00:25:32,440
we are compensating and I can okay so

00:25:29,650 --> 00:25:35,020
this is my compensation just again a

00:25:32,440 --> 00:25:36,700
JAXA a service endpoint which I

00:25:35,020 --> 00:25:40,690
annotated with another annotation

00:25:36,700 --> 00:25:44,710
compensate that's it so if I now rerun

00:25:40,690 --> 00:25:48,430
this nothing will happen because we are

00:25:44,710 --> 00:25:50,290
actually closing the saga or the array

00:25:48,430 --> 00:25:52,180
successfully so this will be only

00:25:50,290 --> 00:25:54,610
invoked if something but me wrong

00:25:52,180 --> 00:25:57,910
so the compensation will happen how we

00:25:54,610 --> 00:26:01,030
can actually make it fail is by

00:25:57,910 --> 00:26:04,210
returning a different HTTP status code

00:26:01,030 --> 00:26:06,960
from the lra annotated metal and what

00:26:04,210 --> 00:26:10,630
status codes actually make array to

00:26:06,960 --> 00:26:12,760
cancel is defined sorry by these two

00:26:10,630 --> 00:26:16,210
attribute cancel on and cancel on family

00:26:12,760 --> 00:26:17,510
these are only basically HTTP status

00:26:16,210 --> 00:26:20,810
codes if you are familiar with

00:26:17,510 --> 00:26:24,200
that's tattoos but you can specify that

00:26:20,810 --> 00:26:28,280
I want to cancel on 412 404 etc by

00:26:24,200 --> 00:26:30,320
default we are canceling on 4 xx + 5 X 6

00:26:28,280 --> 00:26:32,390
so I don't need to type it here because

00:26:30,320 --> 00:26:37,900
I know that the default is canceled on

00:26:32,390 --> 00:26:41,080
family if I just change this 200 to 500

00:26:37,900 --> 00:26:45,290
the lra sorry the other day will now be

00:26:41,080 --> 00:26:49,100
instead of caused compensated and we

00:26:45,290 --> 00:26:55,250
will get our compensation called easy as

00:26:49,100 --> 00:26:56,900
that this is exactly what the

00:26:55,250 --> 00:26:59,960
specification is for that that

00:26:56,900 --> 00:27:03,020
annotation at compensate when you call

00:26:59,960 --> 00:27:04,910
when you call these methods annotated

00:27:03,020 --> 00:27:07,100
with LRA we actually go in our

00:27:04,910 --> 00:27:08,990
implementations can disclose for that

00:27:07,100 --> 00:27:11,720
compensate annotation and people take

00:27:08,990 --> 00:27:19,370
this already top sorry this end point

00:27:11,720 --> 00:27:21,560
say with me the coordinator and you can

00:27:19,370 --> 00:27:24,170
but the arbitrate one is children there

00:27:21,560 --> 00:27:25,820
is no point you can have multiple at LRA

00:27:24,170 --> 00:27:27,830
methods and I will use this later

00:27:25,820 --> 00:27:29,360
because that makes sense but having

00:27:27,830 --> 00:27:31,430
multiple compensation inside one

00:27:29,360 --> 00:27:46,340
participant of the transaction doesn't

00:27:31,430 --> 00:27:48,170
make sense so we will just be there are

00:27:46,340 --> 00:27:50,420
two different contents that Alero is

00:27:48,170 --> 00:27:52,430
starting a new saga that at compensate

00:27:50,420 --> 00:27:54,320
is enlisting a participant and

00:27:52,430 --> 00:27:56,660
participant is something which needs to

00:27:54,320 --> 00:27:59,270
be granel to one java class one jax-rs

00:27:56,660 --> 00:28:02,350
resource so you can start multiple

00:27:59,270 --> 00:28:05,180
arrays inside one Joxer as resource but

00:28:02,350 --> 00:28:09,380
one jax-rs resource can be only one

00:28:05,180 --> 00:28:11,870
participant that would be harder for us

00:28:09,380 --> 00:28:14,060
to really find out what we should call I

00:28:11,870 --> 00:28:15,680
will show you in a while but what you

00:28:14,060 --> 00:28:18,140
are asking for is just so they we create

00:28:15,680 --> 00:28:20,210
a similar class with another at

00:28:18,140 --> 00:28:23,840
compensate method so I can create here

00:28:20,210 --> 00:28:27,500
multiple at la la resources and this

00:28:23,840 --> 00:28:30,050
would work so just not in one class but

00:28:27,500 --> 00:28:30,610
but what I wanted to continue with is to

00:28:30,050 --> 00:28:33,040
actually

00:28:30,610 --> 00:28:36,190
turn this back into an okay and show you

00:28:33,040 --> 00:28:37,929
that there is also another so basically

00:28:36,190 --> 00:28:39,850
this at compensate is required to

00:28:37,929 --> 00:28:44,290
analyse these resources and discipline

00:28:39,850 --> 00:28:46,030
but there is also a similar endpoint

00:28:44,290 --> 00:28:48,760
which you can define which is called

00:28:46,030 --> 00:28:51,630
complete and that is denoted with a

00:28:48,760 --> 00:28:54,520
complete annotation and this is the

00:28:51,630 --> 00:28:56,679
callback which will be called basically

00:28:54,520 --> 00:28:58,600
when the other is closed successfully

00:28:56,679 --> 00:29:00,910
and you are a twisting with your content

00:28:58,600 --> 00:29:05,169
side action what can be the this used

00:29:00,910 --> 00:29:06,640
for is we can do the same tomorrow just

00:29:05,169 --> 00:29:11,460
sorry I will finish the typing and then

00:29:06,640 --> 00:29:13,690
I will start talking so response okay

00:29:11,460 --> 00:29:17,309
what this can be used for is basically

00:29:13,690 --> 00:29:19,570
that imagine that this la is actually

00:29:17,309 --> 00:29:20,830
performing some order or the booking of

00:29:19,570 --> 00:29:23,679
the flight so you probably need to

00:29:20,830 --> 00:29:28,179
remember that for this particular la i

00:29:23,679 --> 00:29:30,070
booked flight 66 so when the

00:29:28,179 --> 00:29:32,020
compensation will happen you can match

00:29:30,070 --> 00:29:33,910
that this earlier it was compensated and

00:29:32,020 --> 00:29:36,220
you will cancel the flight 66 so you

00:29:33,910 --> 00:29:38,620
need to remember this flight ID

00:29:36,220 --> 00:29:40,990
somewhere and because the array was

00:29:38,620 --> 00:29:42,700
already closed successfully there is no

00:29:40,990 --> 00:29:44,440
point to remember it any longer so you

00:29:42,700 --> 00:29:45,970
have an option to define this optional

00:29:44,440 --> 00:29:47,470
complete callback to actually perform

00:29:45,970 --> 00:29:49,030
any cleanup that you would like them so

00:29:47,470 --> 00:29:51,750
you can forget here about it

00:29:49,030 --> 00:29:51,750
fight ID

00:30:13,879 --> 00:30:20,610
there is actually feature requests for

00:30:18,269 --> 00:30:23,100
adding these option of some data that

00:30:20,610 --> 00:30:24,929
can be passed to a coordinator but we

00:30:23,100 --> 00:30:26,789
decided to not do it for Monday doe

00:30:24,929 --> 00:30:28,679
because there are a lot of issues it's

00:30:26,789 --> 00:30:30,570
transactional framework that we need to

00:30:28,679 --> 00:30:33,840
deal with but yeah this is on a road map

00:30:30,570 --> 00:30:38,159
that we want to cover for now it's up to

00:30:33,840 --> 00:30:40,619
you to actually save the data inside

00:30:38,159 --> 00:30:42,779
your services so I can do here some

00:30:40,619 --> 00:30:45,480
normal asset transactions for instance

00:30:42,779 --> 00:30:50,639
and save something to a database and

00:30:45,480 --> 00:30:52,619
here I can take it out so what I wanted

00:30:50,639 --> 00:30:54,419
to just show you that this complete will

00:30:52,619 --> 00:30:56,700
be called now instead of the compensate

00:30:54,419 --> 00:30:58,860
so if I just repeated this call after

00:30:56,700 --> 00:31:12,029
two seconds we should have our complete

00:30:58,860 --> 00:31:15,240
combo called so Ezio's that they're

00:31:12,029 --> 00:31:16,649
actually coordinated we are passing some

00:31:15,240 --> 00:31:19,919
compensation data but it's only

00:31:16,649 --> 00:31:24,259
something that is internal to the saga

00:31:19,919 --> 00:31:26,669
itself I can show it to you but really I

00:31:24,259 --> 00:31:30,299
personally don't agree with using jax-rs

00:31:26,669 --> 00:31:32,279
for this at all and we already have a

00:31:30,299 --> 00:31:35,460
supporting specification just now and I

00:31:32,279 --> 00:31:37,710
still not didn't catch up so I will

00:31:35,460 --> 00:31:39,029
actually show you the specification

00:31:37,710 --> 00:31:41,659
itself so this is the whole

00:31:39,029 --> 00:31:44,460
specification like a profile array API

00:31:41,659 --> 00:31:46,740
we have here only annotation package

00:31:44,460 --> 00:31:49,139
with these WS errors and you can see

00:31:46,740 --> 00:31:51,119
here that la is in this and I'd leave

00:31:49,139 --> 00:31:53,340
these are the only two annotations which

00:31:51,119 --> 00:31:56,369
are right now required to be on jax-rs

00:31:53,340 --> 00:31:57,990
resources all of these other ones that I

00:31:56,369 --> 00:32:00,450
am showing to compensate complete

00:31:57,990 --> 00:32:02,309
doesn't need to have people expose a

00:32:00,450 --> 00:32:06,899
jack status endpoint for you and we will

00:32:02,309 --> 00:32:08,550
call it basically any CDI beam method

00:32:06,899 --> 00:32:10,170
for you

00:32:08,550 --> 00:32:11,820
it doesn't work now right now with the

00:32:10,170 --> 00:32:13,440
clerk who's we are getting to it because

00:32:11,820 --> 00:32:16,830
we just need to finish our

00:32:13,440 --> 00:32:18,540
implementation in I am but yet this is

00:32:16,830 --> 00:32:20,370
like a really good point if you want to

00:32:18,540 --> 00:32:25,020
really follow the rest principles this

00:32:20,370 --> 00:32:27,840
doesn't do it so okay so this would be

00:32:25,020 --> 00:32:30,120
the basically the usage of basic usage

00:32:27,840 --> 00:32:32,970
of RA I told you that you need to

00:32:30,120 --> 00:32:34,890
somehow associate the invocation and we

00:32:32,970 --> 00:32:36,660
are starting right now only a single LA

00:32:34,890 --> 00:32:39,480
and we are investing a single resource

00:32:36,660 --> 00:32:41,640
so we know that is the same LA and the

00:32:39,480 --> 00:32:43,650
same resource but you can call this

00:32:41,640 --> 00:32:45,750
method several times with different IDs

00:32:43,650 --> 00:32:48,330
so you have this single resource and

00:32:45,750 --> 00:32:50,370
listed in different areas in multiple in

00:32:48,330 --> 00:32:53,310
a same time so you need some way to

00:32:50,370 --> 00:32:55,350
somehow know that now this particular

00:32:53,310 --> 00:32:57,650
array was compensated and how we are

00:32:55,350 --> 00:33:01,200
doing this in a specification is by

00:32:57,650 --> 00:33:04,140
header parameters in the array itself

00:33:01,200 --> 00:33:06,600
and the most important one is this array

00:33:04,140 --> 00:33:10,710
HTTP context header or long-running

00:33:06,600 --> 00:33:14,940
action which is always in a URI if I can

00:33:10,710 --> 00:33:18,630
import it yeah which is basically our la

00:33:14,940 --> 00:33:21,000
ID and I can just edit here and actually

00:33:18,630 --> 00:33:23,940
this will be passed to every invocation

00:33:21,000 --> 00:33:26,610
on of every method that you are going to

00:33:23,940 --> 00:33:28,440
ever use an array annotation on so I can

00:33:26,610 --> 00:33:31,830
put it into my complete and compensate

00:33:28,440 --> 00:33:36,410
if and if I now return repeat the same

00:33:31,830 --> 00:33:42,030
method we will see that we get some URI

00:33:36,410 --> 00:33:45,480
I didn't put it into log sorry but you

00:33:42,030 --> 00:33:48,210
see that the you URI is actually an URL

00:33:45,480 --> 00:33:50,940
inside of Narayana and we are actually

00:33:48,210 --> 00:33:53,610
using it for also for recovery of the

00:33:50,940 --> 00:33:55,980
transaction but I don't think that I

00:33:53,610 --> 00:33:57,930
will have a space to do it today

00:33:55,980 --> 00:33:59,670
if I now repeat the transaction we can

00:33:57,930 --> 00:34:01,560
see that the newly started transaction

00:33:59,670 --> 00:34:03,090
and that wait 23 and we were

00:34:01,560 --> 00:34:05,400
compensating the same transaction so in

00:34:03,090 --> 00:34:07,560
this sense you can match that order IB

00:34:05,400 --> 00:34:12,860
with particular array that is being

00:34:07,560 --> 00:34:12,860
compensated there is also one more

00:34:17,010 --> 00:34:24,100
I'm sorry if the invocation fails well

00:34:21,010 --> 00:34:25,960
basically we will repeat the cause until

00:34:24,100 --> 00:34:28,090
it succeed this is the transactional

00:34:25,960 --> 00:34:29,679
guarantee that there is that coordinator

00:34:28,090 --> 00:34:31,870
which will start the recovery if it

00:34:29,679 --> 00:34:34,720
cannot come contact all the compensating

00:34:31,870 --> 00:34:36,370
actions and people basically after some

00:34:34,720 --> 00:34:39,220
time out which is by default to means I

00:34:36,370 --> 00:34:41,679
think Co it again and if it fails again

00:34:39,220 --> 00:34:44,890
again again until we can reach a

00:34:41,679 --> 00:34:46,510
decision there is also a possibility

00:34:44,890 --> 00:34:48,580
because you understand now we are going

00:34:46,510 --> 00:34:50,410
to invoke that compensation multiple

00:34:48,580 --> 00:34:52,450
times and probably your compensation

00:34:50,410 --> 00:34:54,310
action is not going to be idempotent so

00:34:52,450 --> 00:34:57,400
you don't want to invoke it several

00:34:54,310 --> 00:35:00,250
times there is also an option in the lra

00:34:57,400 --> 00:35:02,320
specification to define status method

00:35:00,250 --> 00:35:04,270
but I will not have time to do it now

00:35:02,320 --> 00:35:06,220
and if you have in the same jax-rs

00:35:04,270 --> 00:35:09,070
research also this that was my thought

00:35:06,220 --> 00:35:10,870
if the compensator invocation fails we

00:35:09,070 --> 00:35:13,120
will instead call this status method so

00:35:10,870 --> 00:35:15,910
you can check your state in a different

00:35:13,120 --> 00:35:18,760
method which can be either potent and if

00:35:15,910 --> 00:35:19,930
you responded yes I am now already

00:35:18,760 --> 00:35:21,640
compensated we will finish the

00:35:19,930 --> 00:35:29,110
transaction but the compensate will be

00:35:21,640 --> 00:35:31,480
called only once compensate will only

00:35:29,110 --> 00:35:34,030
pass you this alade ID which I showed

00:35:31,480 --> 00:35:36,400
you and also a subscription ID which I'm

00:35:34,030 --> 00:35:38,020
going to show you in a minute but the

00:35:36,400 --> 00:35:40,270
state we don't know what the state is

00:35:38,020 --> 00:35:42,190
this is up to you and that's to your

00:35:40,270 --> 00:35:44,140
question we are working in one that one

00:35:42,190 --> 00:35:46,000
we would like to have an option for you

00:35:44,140 --> 00:35:48,190
to store the state actually in the

00:35:46,000 --> 00:35:49,630
framework itself something small some

00:35:48,190 --> 00:35:51,880
string or something similar and that

00:35:49,630 --> 00:35:53,560
would be passed with the put invocation

00:35:51,880 --> 00:35:55,960
but right now with one that all we

00:35:53,560 --> 00:35:58,630
decided to rather skip it because the

00:35:55,960 --> 00:36:02,170
framework itself it looks simple but the

00:35:58,630 --> 00:36:05,770
implementation is not so ok I was

00:36:02,170 --> 00:36:09,100
talking about the participant ID or that

00:36:05,770 --> 00:36:12,520
subscription idea it was to courier and

00:36:09,100 --> 00:36:13,930
that's again another header param which

00:36:12,520 --> 00:36:16,480
we will take from the whole array

00:36:13,930 --> 00:36:19,540
annotation and that's this one running

00:36:16,480 --> 00:36:21,910
action recovery or HTTP recovery header

00:36:19,540 --> 00:36:24,040
this is basically a subscription ID this

00:36:21,910 --> 00:36:24,670
allows me to analyse this particular

00:36:24,040 --> 00:36:28,269
party see

00:36:24,670 --> 00:36:30,160
and between multiple Alaric's so this

00:36:28,269 --> 00:36:32,349
will be again passed to every invocation

00:36:30,160 --> 00:36:34,599
of compensate them complete just it's a

00:36:32,349 --> 00:36:37,450
lot of again a different UI right so I

00:36:34,599 --> 00:36:39,880
just don't want to put it there but this

00:36:37,450 --> 00:36:41,920
will allow me to start multiple arrays

00:36:39,880 --> 00:36:44,890
and with this resource to multiple legs

00:36:41,920 --> 00:36:47,920
so la HTTP context header long-running

00:36:44,890 --> 00:36:50,799
action is a ID and this long-running

00:36:47,920 --> 00:36:52,599
action recovery is subscription ID or

00:36:50,799 --> 00:36:55,269
participant ID between a particular

00:36:52,599 --> 00:36:57,069
array so even one resource can be

00:36:55,269 --> 00:36:59,740
enlisted multiple times within the same

00:36:57,069 --> 00:37:04,329
array but you can have only one

00:36:59,740 --> 00:37:06,279
compensation so okay I will just not do

00:37:04,329 --> 00:37:11,200
this right now just to really save some

00:37:06,279 --> 00:37:13,510
space in the terminals and with that I

00:37:11,200 --> 00:37:15,760
we have a single resource now that is

00:37:13,510 --> 00:37:18,010
starting joining the LRA and finishing

00:37:15,760 --> 00:37:20,319
it so it's not really distributed so

00:37:18,010 --> 00:37:26,049
what I'm going to do right now is to

00:37:20,319 --> 00:37:29,289
actually start a new service so make it

00:37:26,049 --> 00:37:32,980
bigger and start it basically just by

00:37:29,289 --> 00:37:35,710
copying it the same service into other

00:37:32,980 --> 00:37:41,319
service too and I will put that in the

00:37:35,710 --> 00:37:43,720
IDE and again I will put it into Marcos

00:37:41,319 --> 00:37:48,430
dev mode but this time I will take care

00:37:43,720 --> 00:37:53,609
to use a free port hopefully if this

00:37:48,430 --> 00:37:56,410
starts yes it does we have here our LRA

00:37:53,609 --> 00:38:00,460
service to which is right now the same

00:37:56,410 --> 00:38:04,569
services the first one and here I can

00:38:00,460 --> 00:38:06,430
start explaining what this annotation

00:38:04,569 --> 00:38:08,680
can be configured it so I already show

00:38:06,430 --> 00:38:12,789
you this value parameter which is of

00:38:08,680 --> 00:38:16,329
array type and here we have like a

00:38:12,789 --> 00:38:18,400
typical JTA types if you are familiar

00:38:16,329 --> 00:38:20,319
with it what I'm going to I'm not going

00:38:18,400 --> 00:38:22,359
to go through all of them really nicely

00:38:20,319 --> 00:38:24,190
documented even in our a specification

00:38:22,359 --> 00:38:26,799
what I'm going to do use now is all

00:38:24,190 --> 00:38:29,559
right time mandatory this just says that

00:38:26,799 --> 00:38:32,589
the LRA ID when this method is invoked

00:38:29,559 --> 00:38:36,090
must be received and if it not before

00:38:32,589 --> 00:38:38,790
return precondition failed 412 and

00:38:36,090 --> 00:38:40,800
what it means to receive an array idea

00:38:38,790 --> 00:38:42,390
is basically to receive this HTTP

00:38:40,800 --> 00:38:45,660
context header this is the way how you

00:38:42,390 --> 00:38:47,760
can propagate the ID or self so now I

00:38:45,660 --> 00:38:50,820
will switch back to the array service 1

00:38:47,760 --> 00:38:52,980
and now I need to perform an HTTP

00:38:50,820 --> 00:38:55,440
request to our a service queue and for

00:38:52,980 --> 00:38:59,430
that I actually because Quercus doesn't

00:38:55,440 --> 00:39:05,520
really like normal or s client I need to

00:38:59,430 --> 00:39:08,870
add a new extension and it's Alice

00:39:05,520 --> 00:39:13,620
client I think I will just type it here

00:39:08,870 --> 00:39:15,390
press client to my our a service man you

00:39:13,620 --> 00:39:17,820
see that Marcos is even clever enough

00:39:15,390 --> 00:39:19,410
right now that it is I am able to change

00:39:17,820 --> 00:39:21,270
the palm exam a line and it will restart

00:39:19,410 --> 00:39:22,800
so I can add dependency on the fly I

00:39:21,270 --> 00:39:29,070
haven't stopped stopped this service

00:39:22,800 --> 00:39:31,440
tool and since I started typing sorry so

00:39:29,070 --> 00:39:31,920
now I should have my restraint already

00:39:31,440 --> 00:39:34,380
here

00:39:31,920 --> 00:39:36,390
we can verify that it here yes it is and

00:39:34,380 --> 00:39:39,450
I will show you really quickly a

00:39:36,390 --> 00:39:44,040
different micro prefer specification and

00:39:39,450 --> 00:39:47,610
I will create our a service to API rest

00:39:44,040 --> 00:39:49,800
client so to do a rest client all you

00:39:47,610 --> 00:39:51,680
need to do register that client and then

00:39:49,800 --> 00:39:54,630
you will type normal

00:39:51,680 --> 00:39:57,600
Jack's registers basically it just needs

00:39:54,630 --> 00:40:00,300
to be an interface and here I will do

00:39:57,600 --> 00:40:04,460
the same thing as I have in my other a

00:40:00,300 --> 00:40:13,320
service to just get at our I perform

00:40:04,460 --> 00:40:14,630
slash perform and here we will do we can

00:40:13,320 --> 00:40:19,470
do a void

00:40:14,630 --> 00:40:21,600
call and this should be it I can do one

00:40:19,470 --> 00:40:23,730
more step and to actually set the base

00:40:21,600 --> 00:40:26,340
URI since I know that I am only going to

00:40:23,730 --> 00:40:27,500
invoke my local host already here

00:40:26,340 --> 00:40:31,550
so I can say that

00:40:27,500 --> 00:40:34,280
we'll be localhost 1882 and I have

00:40:31,550 --> 00:40:36,650
created and restclient basically for

00:40:34,280 --> 00:40:39,020
this particular example is not that

00:40:36,650 --> 00:40:41,119
important just purpose doesn't really

00:40:39,020 --> 00:40:44,960
want to play with me with a client

00:40:41,119 --> 00:40:47,990
builder right now so to use it in my

00:40:44,960 --> 00:40:49,790
other resource I will just to make sure

00:40:47,990 --> 00:40:50,990
make it applications code and you should

00:40:49,790 --> 00:40:53,540
have done this in the beginning because

00:40:50,990 --> 00:40:55,609
by default it will be request code which

00:40:53,540 --> 00:41:01,300
is unnecessary for my use case and I

00:40:55,609 --> 00:41:05,660
will inject rest client which is my la

00:41:01,300 --> 00:41:09,800
service to API and I should be able to

00:41:05,660 --> 00:41:12,200
now make the call here just like this so

00:41:09,800 --> 00:41:15,109
this will make now and HT typical to

00:41:12,200 --> 00:41:17,240
8080 to such a large perform and

00:41:15,109 --> 00:41:18,080
hopefully if I typed everything

00:41:17,240 --> 00:41:20,570
correctly

00:41:18,080 --> 00:41:25,490
if I now Reaper repeat and I will give

00:41:20,570 --> 00:41:27,650
you the last level are a service to if I

00:41:25,490 --> 00:41:30,050
now repeat the call to LR a service it

00:41:27,650 --> 00:41:34,430
should call al are a service to and both

00:41:30,050 --> 00:41:35,990
of this should be yes should be unlisted

00:41:34,430 --> 00:41:38,000
within the same array and you can see

00:41:35,990 --> 00:41:41,089
that the competition was called on both

00:41:38,000 --> 00:41:42,680
services so now we have truly a

00:41:41,089 --> 00:41:46,070
distributed transaction running on my

00:41:42,680 --> 00:41:47,599
local host propagating the lra ID and

00:41:46,070 --> 00:41:51,380
calling the compensation on all both

00:41:47,599 --> 00:41:53,540
services again if I go back to our a

00:41:51,380 --> 00:41:56,420
service to and now I will fail this

00:41:53,540 --> 00:41:59,200
transaction again I will set the status

00:41:56,420 --> 00:42:02,960
to 500 just save it

00:41:59,200 --> 00:42:04,940
repeat the call after two seconds

00:42:02,960 --> 00:42:07,190
compensation will be called and please

00:42:04,940 --> 00:42:08,900
ignore this because this is from rest

00:42:07,190 --> 00:42:10,190
client this error but we can see that

00:42:08,900 --> 00:42:12,410
the compensation is coming it's just

00:42:10,190 --> 00:42:14,510
that client is telling me that the

00:42:12,410 --> 00:42:17,330
status is responded with by 500 but I

00:42:14,510 --> 00:42:23,210
did it so I know that it will respond

00:42:17,330 --> 00:42:25,280
with 500 I just put this back and what I

00:42:23,210 --> 00:42:27,440
want to show you probably you notice

00:42:25,280 --> 00:42:29,690
that there was a lot message in our a

00:42:27,440 --> 00:42:33,349
service when we even when we were come

00:42:29,690 --> 00:42:35,270
to completing this one which is

00:42:33,349 --> 00:42:37,369
basically saying that we were trying to

00:42:35,270 --> 00:42:37,850
call the LRA in our a service one but

00:42:37,369 --> 00:42:40,400
that

00:42:37,850 --> 00:42:42,290
there is one permitted ended but it was

00:42:40,400 --> 00:42:45,500
not found on the coordinator anymore and

00:42:42,290 --> 00:42:48,650
that's because by default la annotation

00:42:45,500 --> 00:42:52,490
we are in our a service to by default la

00:42:48,650 --> 00:42:54,290
annotation will end when the method ends

00:42:52,490 --> 00:42:56,210
so in another service one we were

00:42:54,290 --> 00:42:59,000
invoking mandatory end point in

00:42:56,210 --> 00:43:00,950
authorized service to and when this

00:42:59,000 --> 00:43:02,780
method in our a service to ends the

00:43:00,950 --> 00:43:04,880
transaction is closed so when we are

00:43:02,780 --> 00:43:07,130
returning from a call 12 SM is warm and

00:43:04,880 --> 00:43:09,380
dead then again the transaction will be

00:43:07,130 --> 00:43:21,890
tried to be closed there is no more

00:43:09,380 --> 00:44:06,500
transaction so if I want to run this

00:43:21,890 --> 00:44:08,210
again and because I will get to my last

00:44:06,500 --> 00:44:10,670
example you can start the new array in

00:44:08,210 --> 00:44:12,440
some like utility service let's say and

00:44:10,670 --> 00:44:14,690
then propagate it wherever you want and

00:44:12,440 --> 00:44:15,950
take my example with a business trip so

00:44:14,690 --> 00:44:18,530
we will start the transaction in

00:44:15,950 --> 00:44:20,570
airplane service propagated through

00:44:18,530 --> 00:44:22,820
hotel and car needs to compensate so why

00:44:20,570 --> 00:44:24,230
would you return this whole chain back

00:44:22,820 --> 00:44:25,730
to the airplane service and then the

00:44:24,230 --> 00:44:27,500
coordinator needs to call the services

00:44:25,730 --> 00:44:30,790
if you know that you need to compensate

00:44:27,500 --> 00:44:30,790
already in car service

00:44:34,650 --> 00:44:37,800
[Music]

00:44:48,400 --> 00:44:54,180
so we just called from java method

00:44:50,770 --> 00:44:58,170
perform there is the invitations

00:44:54,180 --> 00:45:16,510
intercepted and transaction is started

00:44:58,170 --> 00:45:18,700
inside already and now we are getting

00:45:16,510 --> 00:45:20,260
into an issue that I'm running to since

00:45:18,700 --> 00:45:22,330
I started with a specification that

00:45:20,260 --> 00:45:25,210
people still thinks about this IC

00:45:22,330 --> 00:45:28,030
transaction JPA this is not it we are

00:45:25,210 --> 00:45:30,820
innovating something new it just seems

00:45:28,030 --> 00:45:32,170
like a transaction but it's not JTA this

00:45:30,820 --> 00:45:34,900
was a design decisions that we made

00:45:32,170 --> 00:45:36,760
because we want to save network ops this

00:45:34,900 --> 00:45:38,820
is like really the main reasoning and we

00:45:36,760 --> 00:45:42,280
are sticking by it

00:45:38,820 --> 00:45:47,380
okay so I have five minutes left and I

00:45:42,280 --> 00:45:49,510
would like to show you some two things

00:45:47,380 --> 00:45:51,670
basically so I will just make it really

00:45:49,510 --> 00:45:55,690
fast and I will skip my last slides

00:45:51,670 --> 00:45:58,210
there is also an option to add another

00:45:55,690 --> 00:46:00,970
endpoint here which we will call after

00:45:58,210 --> 00:46:03,130
and there is another annotation called

00:46:00,970 --> 00:46:04,930
after L array which is basically only a

00:46:03,130 --> 00:46:06,250
codec that is going to be invoked every

00:46:04,930 --> 00:46:07,660
time that the transaction any

00:46:06,250 --> 00:46:09,700
transaction that passed through this

00:46:07,660 --> 00:46:12,849
particular resource it doesn't need to

00:46:09,700 --> 00:46:15,670
be even a participant will be invoked so

00:46:12,849 --> 00:46:18,730
you can do after color a listener so it

00:46:15,670 --> 00:46:20,349
you can watch for some other race lock

00:46:18,730 --> 00:46:23,020
them for instance or do something else

00:46:20,349 --> 00:46:25,270
and you don't need to join them if you

00:46:23,020 --> 00:46:27,310
don't want to join them so we don't need

00:46:25,270 --> 00:46:29,770
to create these empty compensations or

00:46:27,310 --> 00:46:35,140
something similar so this will be really

00:46:29,770 --> 00:46:38,380
just again this sorry response let's go

00:46:35,140 --> 00:46:41,140
it answer and what what I want to show

00:46:38,380 --> 00:46:43,210
you here is that since we expect that

00:46:41,140 --> 00:46:44,500
the use case for this method will be to

00:46:43,210 --> 00:46:47,260
actually start anew

00:46:44,500 --> 00:46:49,020
so when sun arreva is closed I want to

00:46:47,260 --> 00:46:51,910
start a new one

00:46:49,020 --> 00:46:54,220
we actually added a new header here

00:46:51,910 --> 00:46:57,220
which is long-running action and it if

00:46:54,220 --> 00:47:00,310
you want to L array of the ID which

00:46:57,220 --> 00:47:03,300
ended and here you will finally get

00:47:00,310 --> 00:47:08,980
payload which is an array state to this

00:47:03,300 --> 00:47:13,349
this is a valid put invocation and we

00:47:08,980 --> 00:47:23,619
can here just do here after plus and IB

00:47:13,349 --> 00:47:27,130
plus status and just return response

00:47:23,619 --> 00:47:28,840
okay built this is nothing fancy just

00:47:27,130 --> 00:47:31,150
really to show you that do you have an

00:47:28,840 --> 00:47:33,250
option to also define something which

00:47:31,150 --> 00:47:35,050
seems like a participant but it's not if

00:47:33,250 --> 00:47:36,970
you have a use case for it so you can

00:47:35,050 --> 00:47:39,580
see that after the array was finished we

00:47:36,970 --> 00:47:41,680
get our after invocation bit the state

00:47:39,580 --> 00:47:43,420
of the array so we can do this kind of

00:47:41,680 --> 00:47:46,119
editing and make a decision dynamically

00:47:43,420 --> 00:47:48,160
if to start a new array or not and if

00:47:46,119 --> 00:47:50,740
you start the new L array inside this

00:47:48,160 --> 00:47:52,770
method you can use them HTTP context

00:47:50,740 --> 00:47:57,520
header to get a newly started array

00:47:52,770 --> 00:47:59,470
inside this method so with that the last

00:47:57,520 --> 00:48:02,380
thing that I want to show you is to

00:47:59,470 --> 00:48:05,710
actually not close this L array at all

00:48:02,380 --> 00:48:08,170
so I will put even in a less than with

00:48:05,710 --> 00:48:10,839
one and false so this is the use case

00:48:08,170 --> 00:48:13,780
that I wanted to show you and I will

00:48:10,839 --> 00:48:17,560
create a new array endpoint which will

00:48:13,780 --> 00:48:19,900
be just slash end and I will add another

00:48:17,560 --> 00:48:21,550
at a limited this is like really

00:48:19,900 --> 00:48:23,770
transforming now this resource which was

00:48:21,550 --> 00:48:25,359
originally a participant doing something

00:48:23,770 --> 00:48:28,540
useful with the perform netted into

00:48:25,359 --> 00:48:30,070
really more a utility class so it will

00:48:28,540 --> 00:48:32,740
be responsible for starting and stopping

00:48:30,070 --> 00:48:35,260
the array just started propagated

00:48:32,740 --> 00:48:37,960
somewhere we can actually even return

00:48:35,260 --> 00:48:40,599
that la ID and I will need it here to

00:48:37,960 --> 00:48:42,760
assist string to the user so I can call

00:48:40,599 --> 00:48:44,980
this service get an ID then propagate it

00:48:42,760 --> 00:48:46,720
to different services and when I decide

00:48:44,980 --> 00:48:48,609
to close it I can close it manually so

00:48:46,720 --> 00:48:51,700
this would be one of the use cases that

00:48:48,609 --> 00:48:54,509
you were asking about so I will just do

00:48:51,700 --> 00:48:58,279
here response

00:48:54,509 --> 00:49:01,049
close and I will actually make this also

00:48:58,279 --> 00:49:03,419
mandatory because I want to know which

00:49:01,049 --> 00:49:05,189
holiday I am causing and I just I can

00:49:03,419 --> 00:49:06,359
explicitly type here too even if it's

00:49:05,189 --> 00:49:11,189
not required

00:49:06,359 --> 00:49:15,809
and I will also inject here the context

00:49:11,189 --> 00:49:21,469
header la ID which I'm closing just log

00:49:15,809 --> 00:49:26,429
nicely and our day ID and I will return

00:49:21,469 --> 00:49:29,729
that I want to finish successfully so

00:49:26,429 --> 00:49:31,979
what will now happen if I run this is

00:49:29,729 --> 00:49:33,659
basically all our operations are

00:49:31,979 --> 00:49:35,249
performed you see that the perform was

00:49:33,659 --> 00:49:38,549
called you know a service one in our

00:49:35,249 --> 00:49:40,890
series too but we are already finished

00:49:38,549 --> 00:49:43,679
with our invoke client invocation and

00:49:40,890 --> 00:49:45,449
the other is still active so this in

00:49:43,679 --> 00:49:48,359
this way it will stay active until

00:49:45,449 --> 00:49:51,599
somebody calls it and I returned our ID

00:49:48,359 --> 00:49:54,029
to myself here so to actually just close

00:49:51,599 --> 00:50:00,989
the array I will total an endpoint that

00:49:54,029 --> 00:50:04,139
I defined oh and I need to pass the lra

00:50:00,989 --> 00:50:06,569
ID manually here so I just will copy

00:50:04,139 --> 00:50:08,699
paste this and paste it here and in that

00:50:06,569 --> 00:50:10,829
sense when I call this method all of

00:50:08,699 --> 00:50:12,089
compensation competitions are called

00:50:10,829 --> 00:50:14,359
after Ella Rae are called

00:50:12,089 --> 00:50:17,009
and we see that already is finished so

00:50:14,359 --> 00:50:17,849
with that I will just really quickly go

00:50:17,009 --> 00:50:23,339
back to slides

00:50:17,849 --> 00:50:24,989
I should 25 that's great so well I show

00:50:23,339 --> 00:50:26,219
you here basically the state motto is

00:50:24,989 --> 00:50:28,649
precisely defined in a specification

00:50:26,219 --> 00:50:31,079
document when you start the holiday the

00:50:28,649 --> 00:50:32,849
cities in every state active that's

00:50:31,079 --> 00:50:36,539
before the competition and computation

00:50:32,849 --> 00:50:38,849
start to be cold many calls it's closed

00:50:36,539 --> 00:50:41,609
then you cancel it's canceled but there

00:50:38,849 --> 00:50:42,380
are also possibility to stay from the

00:50:41,609 --> 00:50:44,450
compensation

00:50:42,380 --> 00:50:47,080
manually that you are unable to complete

00:50:44,450 --> 00:50:49,610
or compensate with returning a specific

00:50:47,080 --> 00:50:53,120
tabled back which is a participant

00:50:49,610 --> 00:50:54,530
status if you state that you are failed

00:50:53,120 --> 00:50:56,690
to complete their fight to contain say

00:50:54,530 --> 00:50:58,220
they we are basically stuck we don't

00:50:56,690 --> 00:50:59,960
really know what this means for a

00:50:58,220 --> 00:51:01,670
particular application so it is only

00:50:59,960 --> 00:51:03,110
required from a specification point of

00:51:01,670 --> 00:51:06,170
view to log this somewhere and probably

00:51:03,110 --> 00:51:08,660
some manual intubation is needed but as

00:51:06,170 --> 00:51:10,850
somebody here was already asking there

00:51:08,660 --> 00:51:13,250
is also this immediate States closing

00:51:10,850 --> 00:51:14,690
and cancelling into which in which we

00:51:13,250 --> 00:51:16,640
are basically in a state that we're

00:51:14,690 --> 00:51:20,180
calling compensation or competition

00:51:16,640 --> 00:51:23,830
methods in completely compensate if you

00:51:20,180 --> 00:51:26,000
returned HTTP status accepted 202

00:51:23,830 --> 00:51:28,340
basically saying you that you are not

00:51:26,000 --> 00:51:30,050
able to compensate right now but you

00:51:28,340 --> 00:51:32,060
want to be called again somewhere else

00:51:30,050 --> 00:51:33,530
so we don't really need to further

00:51:32,060 --> 00:51:36,050
invocation to get your compensation

00:51:33,530 --> 00:51:38,350
compensation or that status method

00:51:36,050 --> 00:51:42,320
involved all you need to do is return

00:51:38,350 --> 00:51:44,540
201 202 from that computer contacting in

00:51:42,320 --> 00:51:46,010
that sense this method will be what will

00:51:44,540 --> 00:51:49,160
again all that status will be invoked

00:51:46,010 --> 00:51:50,750
again so really that felt to states

00:51:49,160 --> 00:51:54,320
should be reserved to be with something

00:51:50,750 --> 00:51:56,360
where you meet some human to look into

00:51:54,320 --> 00:51:58,700
the outcome and some manual intervention

00:51:56,360 --> 00:52:00,310
is needed I'm sorry that I am NOT able

00:51:58,700 --> 00:52:02,840
to show you but this is like really

00:52:00,310 --> 00:52:06,890
little advanced concept already in a

00:52:02,840 --> 00:52:11,240
specification so if you want to use this

00:52:06,890 --> 00:52:13,760
in your project this up is API

00:52:11,240 --> 00:52:15,860
dependency we are working on our c2

00:52:13,760 --> 00:52:19,280
which should be done this week hopefully

00:52:15,860 --> 00:52:22,160
and the Mariana which I was using is

00:52:19,280 --> 00:52:24,140
this one however the purpose extension

00:52:22,160 --> 00:52:27,830
is already of a PR so hopefully will be

00:52:24,140 --> 00:52:30,410
much soon release and with that this is

00:52:27,830 --> 00:52:32,900
everything from my side and this little

00:52:30,410 --> 00:52:35,560
you can find me on social media and

00:52:32,900 --> 00:52:35,560
thank you for your attention

00:52:38,220 --> 00:52:40,280

YouTube URL: https://www.youtube.com/watch?v=2gBoOEJUOb8


