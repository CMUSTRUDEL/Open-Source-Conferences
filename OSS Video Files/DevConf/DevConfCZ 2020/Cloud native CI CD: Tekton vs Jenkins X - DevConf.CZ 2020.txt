Title: Cloud native CI CD: Tekton vs Jenkins X - DevConf.CZ 2020
Publication date: 2020-03-26
Playlist: DevConfCZ 2020
Description: 
	Speakers: Paolo Carta

In the last few years we have seen massive changes in how we architect and design applications, with the rise of Containers, Kubernetes and Serverless Functions.

This paradigm shift had also a huge impact on the design of CI/CD tools, which are embracing the power of container orchestrators as well. In other words, those tools are starting leveraging the power of Kubernetes in terms of scalability, resiliency and infrastructure abstraction, which is truly awesome. In addition, they are portable, since they can be deployed easily on any type of cloud which provides a Kubernetes deployment.

At the moment, the most important open source projects, which are also part of the Continuous Delivery Foundation are Tekton, a former Google Project and Jenkins X, a revolutionary project from CloudBees.

This talk will describe and compare them for real world enterprise projects, pointing out their capabilities and use cases for the future.

[ https://sched.co/YOr5 ]

--
Recordings of talks at DevConf are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:01,689 --> 00:00:07,180
hello everybody so it's really nice to

00:00:04,299 --> 00:00:10,780
see so many people here I'm really

00:00:07,180 --> 00:00:13,419
humbled and as you can see already I

00:00:10,780 --> 00:00:17,140
changed the title of my presentation

00:00:13,419 --> 00:00:19,900
so it was Tecton versus Jenkins X you

00:00:17,140 --> 00:00:22,360
know it's just a pitch to get accepted

00:00:19,900 --> 00:00:26,260
at the conferences actually there is no

00:00:22,360 --> 00:00:29,620
competition here so because actually

00:00:26,260 --> 00:00:31,840
there the second project is based on

00:00:29,620 --> 00:00:37,239
tectum so it's just let's say a

00:00:31,840 --> 00:00:39,819
comparison so who here is practicing see

00:00:37,239 --> 00:00:42,339
ICD you can raise your hand

00:00:39,819 --> 00:00:44,530
Wow such a good audience normally in

00:00:42,339 --> 00:00:47,859
other conferences there was just one guy

00:00:44,530 --> 00:00:52,120
and I think he was following me at every

00:00:47,859 --> 00:00:55,809
conference but he's not here today so

00:00:52,120 --> 00:00:58,179
why do we do see ICD in my opinion we do

00:00:55,809 --> 00:01:02,499
see ICD because we want a quick and

00:00:58,179 --> 00:01:05,920
continuous feedback loop why I believe

00:01:02,499 --> 00:01:09,700
that none of us actually can write the

00:01:05,920 --> 00:01:12,280
perfect code straightaway so coding is

00:01:09,700 --> 00:01:14,980
just a sequence or really small

00:01:12,280 --> 00:01:17,860
experiments and we would like to

00:01:14,980 --> 00:01:20,440
basically gather feedback as soon as we

00:01:17,860 --> 00:01:23,950
can why because we want to delight our

00:01:20,440 --> 00:01:26,620
customers and basically we have to

00:01:23,950 --> 00:01:30,570
guarantee that our software can work

00:01:26,620 --> 00:01:34,150
properly on production we know that

00:01:30,570 --> 00:01:37,420
reality actually sometimes looks

00:01:34,150 --> 00:01:40,210
something like this it's war you can see

00:01:37,420 --> 00:01:45,550
smoke you can see gunfire you can see

00:01:40,210 --> 00:01:48,430
people screaming and here at the bottom

00:01:45,550 --> 00:01:52,140
left corner you can see even the product

00:01:48,430 --> 00:01:55,780
owners dead on the floor it's a mess

00:01:52,140 --> 00:01:59,860
yeah but our goal is to continuously

00:01:55,780 --> 00:02:02,080
improve so we should try to do that but

00:01:59,860 --> 00:02:05,050
let's take a step back we have seen

00:02:02,080 --> 00:02:08,619
massive changes in the last let's say 5

00:02:05,050 --> 00:02:10,440
years with the rise of containers micro

00:02:08,619 --> 00:02:13,000
service architectures container

00:02:10,440 --> 00:02:15,520
orchestrators in order to deploy and

00:02:13,000 --> 00:02:18,220
manage containers at scale

00:02:15,520 --> 00:02:21,760
and the de facto standard nowadays is

00:02:18,220 --> 00:02:24,100
kubernetes this is a big part of this

00:02:21,760 --> 00:02:27,190
paradigm shift and is actually

00:02:24,100 --> 00:02:31,930
influencing also the design of CD tools

00:02:27,190 --> 00:02:34,570
why if you think about the tools we use

00:02:31,930 --> 00:02:37,360
normally they were not designed for the

00:02:34,570 --> 00:02:40,030
cloud you can see the logo of Jenkins

00:02:37,360 --> 00:02:44,860
for instance here this is the most used

00:02:40,030 --> 00:02:47,770
CI CD tool out there and it's awesome it

00:02:44,860 --> 00:02:51,520
has allowed us let's say for like more

00:02:47,770 --> 00:02:53,860
than 10 years to go fast but still was

00:02:51,520 --> 00:02:56,320
not designed for the cloud so we have a

00:02:53,860 --> 00:03:00,070
big JVM running with gigabytes of memory

00:02:56,320 --> 00:03:02,730
and is continuously running so wasting

00:03:00,070 --> 00:03:06,160
CPU cycles if you are on the cloud and

00:03:02,730 --> 00:03:09,130
since we pay for CPU usage or memory

00:03:06,160 --> 00:03:13,260
usage we would light something with a

00:03:09,130 --> 00:03:16,690
serve less let's say mode on-demand and

00:03:13,260 --> 00:03:19,540
that's where the project pectin comes in

00:03:16,690 --> 00:03:22,320
so it's a pretty new project has been

00:03:19,540 --> 00:03:25,959
announced more or less one year ago and

00:03:22,320 --> 00:03:29,040
is trying to redefine in my opinion CI

00:03:25,959 --> 00:03:32,260
CD for the cloud and for kubernetes

00:03:29,040 --> 00:03:35,860
basically stems from the kinetic build

00:03:32,260 --> 00:03:38,140
projects and the kinetic build project

00:03:35,860 --> 00:03:43,060
was used to build functions let's say

00:03:38,140 --> 00:03:45,550
into containers so in order to to have a

00:03:43,060 --> 00:03:47,530
serve less let's say workloads on top of

00:03:45,550 --> 00:03:50,080
kubernetes and the community was so

00:03:47,530 --> 00:03:55,060
excited that they decided they wanted

00:03:50,080 --> 00:03:57,310
more pectin basically Tecton so my view

00:03:55,060 --> 00:03:59,680
of pectin is basically the first

00:03:57,310 --> 00:04:04,240
kubernetes native pipeline execution

00:03:59,680 --> 00:04:07,360
engine and how does it work so I will

00:04:04,240 --> 00:04:10,090
just let's say go through the basics so

00:04:07,360 --> 00:04:12,970
we have a few custom resource

00:04:10,090 --> 00:04:15,070
definitions so identify let's say five

00:04:12,970 --> 00:04:19,200
building blocks but they are actually

00:04:15,070 --> 00:04:21,790
increasing and there is also a tiny

00:04:19,200 --> 00:04:25,750
controller which is worth watching for

00:04:21,790 --> 00:04:28,950
CR DS in our kubernetes or openshift

00:04:25,750 --> 00:04:32,280
cluster so these are let's

00:04:28,950 --> 00:04:35,730
above eye view of their resources so

00:04:32,280 --> 00:04:38,310
let's go quickly through them but first

00:04:35,730 --> 00:04:43,110
a question who here is already using

00:04:38,310 --> 00:04:45,830
Tecton so I think I believe few guys I

00:04:43,110 --> 00:04:50,130
believe there are even a few Tecton

00:04:45,830 --> 00:04:55,290
developers here so I hope not to say any

00:04:50,130 --> 00:04:59,670
 so we have a pipeline as usual

00:04:55,290 --> 00:05:03,150
a pipeline is a collection of tasks a

00:04:59,670 --> 00:05:07,560
task in Tecton is executed within a pod

00:05:03,150 --> 00:05:10,380
in kubernetes you can execute tasks

00:05:07,560 --> 00:05:12,690
basically sequentially or in parallel

00:05:10,380 --> 00:05:17,420
normally you we define the so called

00:05:12,690 --> 00:05:20,310
directed acyclic graph and of course

00:05:17,420 --> 00:05:23,340
pods are basically orchestrated by

00:05:20,310 --> 00:05:28,470
kubernetes in other words they can run

00:05:23,340 --> 00:05:31,980
on different nodes a task task we said

00:05:28,470 --> 00:05:35,670
runs within a pod and defines a sequence

00:05:31,980 --> 00:05:38,850
of steps each step is basically executed

00:05:35,670 --> 00:05:41,520
within a container and normally they are

00:05:38,850 --> 00:05:45,060
executing sequentially as we define them

00:05:41,520 --> 00:05:48,450
in the yummo definition I know you all

00:05:45,060 --> 00:05:53,550
love llamo especially for the

00:05:48,450 --> 00:05:56,580
indentation so if if we want to run a

00:05:53,550 --> 00:06:00,120
pipeline we use normally a pipeline run

00:05:56,580 --> 00:06:02,280
so it's a CRD to instantiate if you

00:06:00,120 --> 00:06:04,950
think about let's say object-oriented

00:06:02,280 --> 00:06:07,500
programming we can think about a class

00:06:04,950 --> 00:06:11,250
and then an object out of that class

00:06:07,500 --> 00:06:15,840
let's say more or less so a pipeline run

00:06:11,250 --> 00:06:19,590
allows us also to bind resources so

00:06:15,840 --> 00:06:22,920
pipeline resources at runtime so for

00:06:19,590 --> 00:06:25,830
instance git repositories or docker

00:06:22,920 --> 00:06:28,350
images and so on now

00:06:25,830 --> 00:06:31,500
tasks can be run in isolation so you can

00:06:28,350 --> 00:06:33,870
see at the bottom tasks runs so you can

00:06:31,500 --> 00:06:38,390
do that or you can execute the pipeline

00:06:33,870 --> 00:06:42,689
of course within through a pipeline run

00:06:38,390 --> 00:06:45,059
this is again the complete picture so

00:06:42,689 --> 00:06:48,839
my opinion so I'm pretty amazed by

00:06:45,059 --> 00:06:51,319
Tecton because pipelines are now cloud

00:06:48,839 --> 00:06:53,879
native so are based on containers

00:06:51,319 --> 00:06:57,539
orchestrated dynamically by kubernetes

00:06:53,879 --> 00:07:00,419
and they are decoupled because we can

00:06:57,539 --> 00:07:03,299
actually execute pipelines on any

00:07:00,419 --> 00:07:06,569
kubernetes cluster on any cloud provider

00:07:03,299 --> 00:07:10,049
of course we can run tasks in isolation

00:07:06,569 --> 00:07:13,889
we can compose them as we wish basically

00:07:10,049 --> 00:07:17,699
and we can bind resources dynamically at

00:07:13,889 --> 00:07:25,249
runtime it's pretty cool in my opinion

00:07:17,699 --> 00:07:30,059
but this was the boring stuff so I

00:07:25,249 --> 00:07:31,979
prayed the demo gods so for I try to

00:07:30,059 --> 00:07:34,889
wake them up hopefully they're with me

00:07:31,979 --> 00:07:43,199
with Wi-Fi with everything I will see it

00:07:34,889 --> 00:07:46,829
for a second so let's see so just guys

00:07:43,199 --> 00:07:51,809
just shout if you have any trouble the

00:07:46,829 --> 00:07:54,779
scene from from the bottom little bit

00:07:51,809 --> 00:07:59,699
more no words and I will also zoom

00:07:54,779 --> 00:08:01,739
during the steps so I for time reasons I

00:07:59,699 --> 00:08:05,519
already have a kubernetes cluster with

00:08:01,739 --> 00:08:10,199
tacked on installed we can let's see if

00:08:05,519 --> 00:08:12,509
the Wi-Fi is still working okay so I

00:08:10,199 --> 00:08:19,759
have a kubernetes cluster with three

00:08:12,509 --> 00:08:24,539
nodes here and let's see the tectum

00:08:19,759 --> 00:08:27,089
controller is running luckily here so

00:08:24,539 --> 00:08:30,059
and watching for custom resource

00:08:27,089 --> 00:08:34,289
definitions we can see they see our DS

00:08:30,059 --> 00:08:42,000
here for example we can see the Tecton

00:08:34,289 --> 00:08:46,110
one and so on okay so now what do I want

00:08:42,000 --> 00:08:48,990
to do I want to basically build test

00:08:46,110 --> 00:08:51,179
package and deploy a really simple

00:08:48,990 --> 00:08:55,589
application so it's a spring boot pet

00:08:51,179 --> 00:08:59,490
clinic application so you have

00:08:55,589 --> 00:09:05,100
they code over here in the pet clinic

00:08:59,490 --> 00:09:10,730
can achill folder as you can see this

00:09:05,100 --> 00:09:13,410
just a super simple spring boot

00:09:10,730 --> 00:09:16,050
application you can see the the starter

00:09:13,410 --> 00:09:19,889
parent you can see a few dependencies

00:09:16,050 --> 00:09:22,800
the activator the starter for using

00:09:19,889 --> 00:09:27,170
relational databases there's the web

00:09:22,800 --> 00:09:34,610
starter for rest endpoints and so on so

00:09:27,170 --> 00:09:36,990
and yeah you can see basically this is a

00:09:34,610 --> 00:09:41,790
classic spring boot application so

00:09:36,990 --> 00:09:42,740
nothing really fancy okay now I would

00:09:41,790 --> 00:09:45,720
like to deploy this application

00:09:42,740 --> 00:09:47,730
basically on my kubernetes cluster in

00:09:45,720 --> 00:09:50,550
order to do that I also have another

00:09:47,730 --> 00:09:53,459
folder so basically git repos on my

00:09:50,550 --> 00:09:58,050
github if you want to have a look at

00:09:53,459 --> 00:10:01,879
Adam the deploys let's say the deploy

00:09:58,050 --> 00:10:05,610
folder the deploy folder just contains

00:10:01,879 --> 00:10:09,930
kubernetes definitions you can see here

00:10:05,610 --> 00:10:15,329
a classic deployment we will run one

00:10:09,930 --> 00:10:18,180
replica here we specify our container so

00:10:15,329 --> 00:10:22,079
taking it from from a container registry

00:10:18,180 --> 00:10:25,110
I defined a few resource limits and

00:10:22,079 --> 00:10:29,790
requests and the classic readiness and

00:10:25,110 --> 00:10:30,259
liveness probes this is one what we will

00:10:29,790 --> 00:10:33,420
use

00:10:30,259 --> 00:10:37,740
let's save to deploy our application so

00:10:33,420 --> 00:10:41,009
the third folder here the pet clinic

00:10:37,740 --> 00:10:43,620
tacked on contains my pipeline but

00:10:41,009 --> 00:10:45,779
before before going let's say through

00:10:43,620 --> 00:10:49,110
the tasks and the pipeline I would like

00:10:45,779 --> 00:10:51,929
to apply the resources so that while the

00:10:49,110 --> 00:10:56,519
pipeline is building we can go through

00:10:51,929 --> 00:11:01,939
the llamo definition okay so everything

00:10:56,519 --> 00:11:07,490
is in the pet clinic tacked on I said

00:11:01,939 --> 00:11:09,380
okay so let's apply a service account

00:11:07,490 --> 00:11:17,850
for

00:11:09,380 --> 00:11:28,579
access rights then let's deploy that pet

00:11:17,850 --> 00:11:34,829
clinic pipeline now I want also my

00:11:28,579 --> 00:11:38,100
resources and finally so after now

00:11:34,829 --> 00:11:42,149
applying the CD let the basically the

00:11:38,100 --> 00:11:51,930
objects I would like to run the pipeline

00:11:42,149 --> 00:11:55,860
so I'm using the pet clinic run okay so

00:11:51,930 --> 00:11:59,339
let's see if we have our stuff okay so

00:11:55,860 --> 00:12:02,459
we can see don't worry now about them

00:11:59,339 --> 00:12:06,899
we'll go through the ml definitions we

00:12:02,459 --> 00:12:10,769
can see three tasks let's see if we have

00:12:06,899 --> 00:12:13,829
the pipeline yeah same stuff can be done

00:12:10,769 --> 00:12:17,940
with detect on CLI so tectum comes also

00:12:13,829 --> 00:12:22,020
with the and with an NDE CLI so you can

00:12:17,940 --> 00:12:27,209
also play with that and we can see we

00:12:22,020 --> 00:12:29,910
have our stuff okay so let's go now to

00:12:27,209 --> 00:12:32,370
while the pipeline is building it's

00:12:29,910 --> 00:12:34,950
gonna take like three four minutes let's

00:12:32,370 --> 00:12:39,930
go through the pipeline definition as

00:12:34,950 --> 00:12:53,420
you can see it's it's really short so

00:12:39,930 --> 00:13:01,620
but I have never really complicated okay

00:12:53,420 --> 00:13:04,079
so any questions still now okay so we

00:13:01,620 --> 00:13:07,110
said we want to build test package and

00:13:04,079 --> 00:13:09,930
deploy a small spring boot application

00:13:07,110 --> 00:13:13,829
in order to do that I defined three

00:13:09,930 --> 00:13:17,190
tasks they build maven the container

00:13:13,829 --> 00:13:19,199
build and the deployment and then I

00:13:17,190 --> 00:13:23,160
group together all of them in a pipeline

00:13:19,199 --> 00:13:27,500
let's go now through the tasks so

00:13:23,160 --> 00:13:31,259
you can see attacked on tasks here and

00:13:27,500 --> 00:13:34,589
this is that may even build a task

00:13:31,259 --> 00:13:38,060
normally must specify of course at least

00:13:34,589 --> 00:13:42,240
one step this mandatory and can specify

00:13:38,060 --> 00:13:47,060
inputs and outputs in this case you can

00:13:42,240 --> 00:13:50,160
see over here we have a few inputs so

00:13:47,060 --> 00:13:53,430
workspace argot were space it contains

00:13:50,160 --> 00:13:55,589
of course our code and a parameter it

00:13:53,430 --> 00:13:57,990
can be anything you want for example the

00:13:55,589 --> 00:14:02,550
artifact name the artifact version it

00:13:57,990 --> 00:14:05,189
could be get token anything in this case

00:14:02,550 --> 00:14:09,449
for example I'm just specifying working

00:14:05,189 --> 00:14:12,660
directory for instance so in order now

00:14:09,449 --> 00:14:15,000
to build our code we need to specify

00:14:12,660 --> 00:14:17,610
steps which are executed within

00:14:15,000 --> 00:14:20,759
containers and as you can see here we

00:14:17,610 --> 00:14:24,180
have that the important step the maven

00:14:20,759 --> 00:14:29,339
build which is executed in a container

00:14:24,180 --> 00:14:31,560
which contains maven and the JDK as you

00:14:29,339 --> 00:14:35,970
can see we execute the classic command

00:14:31,560 --> 00:14:38,459
maven clean install and here I'm also

00:14:35,970 --> 00:14:42,839
accepted in that tests because I like to

00:14:38,459 --> 00:14:45,870
do TDD but if we want to do something

00:14:42,839 --> 00:14:49,949
else we could even uncomment it but this

00:14:45,870 --> 00:14:53,850
would be called jdd Jesus driven

00:14:49,949 --> 00:14:57,680
development so just just push something

00:14:53,850 --> 00:14:59,670
let's say on git and pray that it works

00:14:57,680 --> 00:15:06,449
sometimes I have seen that in the

00:14:59,670 --> 00:15:10,680
project so now we have another task the

00:15:06,449 --> 00:15:13,680
container build the task is named build

00:15:10,680 --> 00:15:18,750
chemical as you can see here we also

00:15:13,680 --> 00:15:21,839
specify a few input resources and the

00:15:18,750 --> 00:15:25,100
input resource comes from the previous

00:15:21,839 --> 00:15:28,410
task is basically the workspace

00:15:25,100 --> 00:15:30,240
containing the artifacts and we have

00:15:28,410 --> 00:15:34,670
also few parameter for example the

00:15:30,240 --> 00:15:34,670
docker file path over here

00:15:35,400 --> 00:15:43,430
the output of course as you can imagine

00:15:37,950 --> 00:15:46,680
is a container image now that step I

00:15:43,430 --> 00:15:50,339
have one step which is the Kanaka build

00:15:46,680 --> 00:15:53,160
so Kanaka is a by the way a tool in

00:15:50,339 --> 00:15:56,279
order to build container images inside a

00:15:53,160 --> 00:15:59,910
kubernetes cluster without mounting the

00:15:56,279 --> 00:16:02,610
docker socket and you know that has some

00:15:59,910 --> 00:16:05,850
security issues so I'm using conical

00:16:02,610 --> 00:16:07,440
here and as you can see I mount a secret

00:16:05,850 --> 00:16:10,350
in order to be able to deploy to the

00:16:07,440 --> 00:16:14,820
container registry and expose the secret

00:16:10,350 --> 00:16:18,360
as an environment variable then we have

00:16:14,820 --> 00:16:22,110
the third task the last one is the

00:16:18,360 --> 00:16:24,600
deployment task here the input is a git

00:16:22,110 --> 00:16:28,380
repository because we said we have our

00:16:24,600 --> 00:16:31,140
manifests in a git repository separated

00:16:28,380 --> 00:16:34,290
from the code so this is at least my

00:16:31,140 --> 00:16:36,540
personal preference so that for example

00:16:34,290 --> 00:16:38,670
I don't need to rebuild the code if if I

00:16:36,540 --> 00:16:41,250
just change a llamó definition but there

00:16:38,670 --> 00:16:45,510
are other strategies as well if you want

00:16:41,250 --> 00:16:48,270
just to use a single repo we have also a

00:16:45,510 --> 00:16:51,750
few parameters as you can see which for

00:16:48,270 --> 00:16:56,279
example there the deployment the file

00:16:51,750 --> 00:16:58,890
the Yamal file we want to use and the

00:16:56,279 --> 00:17:02,580
steps so the first one is doesn't really

00:16:58,890 --> 00:17:05,959
matter it's for cleanup stuff this one

00:17:02,580 --> 00:17:08,699
that's the important one so the cube CTL

00:17:05,959 --> 00:17:10,890
deploy so here I'm just using a

00:17:08,699 --> 00:17:14,579
container which contains the cube CTL

00:17:10,890 --> 00:17:19,020
CLI and I am executing cube city I'll

00:17:14,579 --> 00:17:22,970
apply now we have three tasks we group

00:17:19,020 --> 00:17:27,089
together in a pipeline a pipeline

00:17:22,970 --> 00:17:31,350
definition you can see that here named

00:17:27,089 --> 00:17:34,770
pet clinic pipeline in my case we can

00:17:31,350 --> 00:17:38,040
define a few resources which will be

00:17:34,770 --> 00:17:39,960
passed to the to the tasks in this case

00:17:38,040 --> 00:17:42,660
you see two git repositories and one

00:17:39,960 --> 00:17:45,870
docker image we could have defined

00:17:42,660 --> 00:17:48,870
parameters but I didn't really need that

00:17:45,870 --> 00:17:49,200
for the demo and then we start listing

00:17:48,870 --> 00:17:52,260
that

00:17:49,200 --> 00:17:54,960
asks we can see the first task which was

00:17:52,260 --> 00:17:58,830
the Maven clean install so the Maven

00:17:54,960 --> 00:18:02,519
build we reference our task and we

00:17:58,830 --> 00:18:04,889
specify the resources you can think at

00:18:02,519 --> 00:18:07,500
this stage in the pipeline when you

00:18:04,889 --> 00:18:12,269
start passing resources at least that's

00:18:07,500 --> 00:18:14,669
my perception as logical resources the

00:18:12,269 --> 00:18:19,500
physical resources will be represented

00:18:14,669 --> 00:18:20,309
in the in another CR D which will we'll

00:18:19,500 --> 00:18:23,149
see later

00:18:20,309 --> 00:18:26,309
so here we specify which basically

00:18:23,149 --> 00:18:29,210
resources the tasks we'll be using and

00:18:26,309 --> 00:18:32,070
of course the pipeline can override

00:18:29,210 --> 00:18:37,590
resources and parameters defined within

00:18:32,070 --> 00:18:39,870
our tasks so we have seen the first task

00:18:37,590 --> 00:18:42,299
reference the second task reference of

00:18:39,870 --> 00:18:45,059
course is referencing the Kaneko build

00:18:42,299 --> 00:18:47,220
the container build and we have a few

00:18:45,059 --> 00:18:50,789
resources here there is something

00:18:47,220 --> 00:18:55,070
interesting in the input resources we

00:18:50,789 --> 00:18:59,399
see at this line we are receiving a

00:18:55,070 --> 00:19:02,610
repository and this repository is coming

00:18:59,399 --> 00:19:06,269
from the previous task so basically we

00:19:02,610 --> 00:19:09,929
are with this keyword we can basically

00:19:06,269 --> 00:19:13,049
define sequential execution so ordering

00:19:09,929 --> 00:19:18,500
of the tasks so this task cannot start

00:19:13,049 --> 00:19:21,919
before we have a jar for example then

00:19:18,500 --> 00:19:25,559
the output of course is the docker

00:19:21,919 --> 00:19:28,350
container the last step we said we want

00:19:25,559 --> 00:19:32,820
to deploy with the cube city L so the

00:19:28,350 --> 00:19:37,559
pet clinic deploy so basically the task

00:19:32,820 --> 00:19:39,570
is referenced here and here how do we

00:19:37,559 --> 00:19:42,470
guarantee ordering we don't have a

00:19:39,570 --> 00:19:45,049
logical binding between input and output

00:19:42,470 --> 00:19:47,580
resources because we are building

00:19:45,049 --> 00:19:51,450
basically we are applying a kubernetes

00:19:47,580 --> 00:19:54,960
manifest therefore I need to specify

00:19:51,450 --> 00:19:57,389
that I want to of course deploy the

00:19:54,960 --> 00:20:00,160
container image after I have a container

00:19:57,389 --> 00:20:03,760
image of course

00:20:00,160 --> 00:20:07,600
then we have a few pipeline resources as

00:20:03,760 --> 00:20:11,620
we said in our case we have three

00:20:07,600 --> 00:20:15,070
resources you can see the first one in

00:20:11,620 --> 00:20:15,850
the spec a git repo which is pointing to

00:20:15,070 --> 00:20:19,320
my github

00:20:15,850 --> 00:20:23,050
it contains the debt clinic application

00:20:19,320 --> 00:20:25,810
then another one which points to the

00:20:23,050 --> 00:20:27,610
container image index stored in the

00:20:25,810 --> 00:20:33,190
container registry as you can see the

00:20:27,610 --> 00:20:36,790
type here is an image and then the last

00:20:33,190 --> 00:20:41,020
one is again a git repository which

00:20:36,790 --> 00:20:43,270
contains the kubernetes manifests in

00:20:41,020 --> 00:20:46,540
order to run the pipeline the last so

00:20:43,270 --> 00:20:49,720
manifest we have a look at is the

00:20:46,540 --> 00:20:53,290
pipeline run so here we are instantiated

00:20:49,720 --> 00:20:55,690
we are starting our pipeline we can

00:20:53,290 --> 00:20:59,800
specify a service accounts in order for

00:20:55,690 --> 00:21:01,870
to have different rights and of course

00:20:59,800 --> 00:21:05,650
here we perform the binding between

00:21:01,870 --> 00:21:13,660
their pipeline resources we have defined

00:21:05,650 --> 00:21:17,590
previously here and basically our tasks

00:21:13,660 --> 00:21:22,800
so this will be the resources provided

00:21:17,590 --> 00:21:22,800
to the task execution that's it

00:21:23,250 --> 00:21:31,930
okay hope everything is clear so let's

00:21:29,230 --> 00:21:36,640
see what's going on here Wow the demo

00:21:31,930 --> 00:21:39,250
gods at least for now are with me so we

00:21:36,640 --> 00:21:44,770
can see our application up and running

00:21:39,250 --> 00:21:48,010
and we can see also three completed pods

00:21:44,770 --> 00:21:50,560
these are the pods which executed the

00:21:48,010 --> 00:21:52,810
three tasks you can see the maven build

00:21:50,560 --> 00:21:57,970
you can see the container image build

00:21:52,810 --> 00:22:02,140
and you can see the deployment okay so

00:21:57,970 --> 00:22:04,600
we can use that packed on CLI to get

00:22:02,140 --> 00:22:09,220
some information for example about the

00:22:04,600 --> 00:22:12,010
tasks runs okay we have three tasks

00:22:09,220 --> 00:22:14,380
lands X so started for example seven

00:22:12,010 --> 00:22:17,770
minutes ago stay to succeed

00:22:14,380 --> 00:22:20,800
if we want some more information we can

00:22:17,770 --> 00:22:24,370
see for example the tasks run described

00:22:20,800 --> 00:22:25,980
and I want to describe for example the

00:22:24,370 --> 00:22:30,309
million built

00:22:25,980 --> 00:22:32,140
so here you can basically see what we

00:22:30,309 --> 00:22:35,530
have defined in the yeah mall definition

00:22:32,140 --> 00:22:40,870
so well we have the status success

00:22:35,530 --> 00:22:44,410
luckily we have input resources we have

00:22:40,870 --> 00:22:50,440
here output resources still Aggie trip

00:22:44,410 --> 00:22:52,809
um and a few steps so we can see for

00:22:50,440 --> 00:22:55,750
example the one we care about the maven

00:22:52,809 --> 00:23:00,670
build the some other of them are

00:22:55,750 --> 00:23:02,559
automatically generated by Tecton so if

00:23:00,670 --> 00:23:06,670
we want to get some logs

00:23:02,559 --> 00:23:11,200
well let's list the tasks again so if I

00:23:06,670 --> 00:23:14,710
want to get some logs I can say log for

00:23:11,200 --> 00:23:24,160
my tasks run we should be able for all

00:23:14,710 --> 00:23:28,000
these logs so we can see hopefully the

00:23:24,160 --> 00:23:32,350
well the wi-fi's yeah it's fast enough

00:23:28,000 --> 00:23:39,040
so we can see classic the maven logs so

00:23:32,350 --> 00:23:44,070
downloading the the world basically ok

00:23:39,040 --> 00:23:46,929
cool so our application now is deployed

00:23:44,070 --> 00:23:51,210
to the kubernetes cluster and i'm

00:23:46,929 --> 00:23:53,830
exposing it using kubernetes service i

00:23:51,210 --> 00:23:57,760
will show that to you so we have a

00:23:53,830 --> 00:23:59,920
kubernetes service here of type load

00:23:57,760 --> 00:24:01,750
balancer so a controller inside my

00:23:59,920 --> 00:24:05,920
kubernetes cluster is automatically

00:24:01,750 --> 00:24:12,760
generating cloud elf or load balancer

00:24:05,920 --> 00:24:17,679
with an ephemeral IP address so I can

00:24:12,760 --> 00:24:23,730
get the service it is the external IP so

00:24:17,679 --> 00:24:23,730
let's try to access it it was born 1990

00:24:25,669 --> 00:24:36,440
yeah so super complex application but

00:24:30,259 --> 00:24:46,879
it's here up and running okay now let's

00:24:36,440 --> 00:24:49,700
continue with the few slides so we have

00:24:46,879 --> 00:24:51,889
seen Tecton pipelines which are awesome

00:24:49,700 --> 00:24:55,809
they are scalable they are portable

00:24:51,889 --> 00:24:59,809
they are decoupled but in my opinion as

00:24:55,809 --> 00:25:03,829
let's say as a consultant dealing with

00:24:59,809 --> 00:25:06,440
code and middleware what I see is that

00:25:03,829 --> 00:25:10,190
for the average developer which in my

00:25:06,440 --> 00:25:13,519
opinion is more than half of let's say

00:25:10,190 --> 00:25:15,950
of dev developer population for for most

00:25:13,519 --> 00:25:17,179
of the developers define such pipelines

00:25:15,950 --> 00:25:19,789
is a bit complicated

00:25:17,179 --> 00:25:21,769
generally kubernetes is a little bit

00:25:19,789 --> 00:25:24,499
complicated and when something is

00:25:21,769 --> 00:25:26,809
complicated it becomes error-prone so at

00:25:24,499 --> 00:25:31,309
a normal developer what I see by the

00:25:26,809 --> 00:25:33,739
customer just cares about building the

00:25:31,309 --> 00:25:36,139
code deploying it but they don't want

00:25:33,739 --> 00:25:39,190
really to understand the underlying

00:25:36,139 --> 00:25:41,899
infrastructure and all the tricks and

00:25:39,190 --> 00:25:44,209
also because in my opinion everything is

00:25:41,899 --> 00:25:46,820
awesome kubernetes especially extended

00:25:44,209 --> 00:25:49,099
with Tecton but kubernetes in my opinion

00:25:46,820 --> 00:25:52,429
and of course openshift

00:25:49,099 --> 00:25:54,769
they are like a baby it's really nice to

00:25:52,429 --> 00:25:59,989
play with but you don't know when they

00:25:54,769 --> 00:26:02,269
start crying so something can happen so

00:25:59,989 --> 00:26:05,119
that's where basically Jenkins axe comes

00:26:02,269 --> 00:26:07,940
in so Jenkins axe even though the names

00:26:05,119 --> 00:26:09,979
it looks like is the old Jenkins it's a

00:26:07,940 --> 00:26:12,139
complete so basically it's a new project

00:26:09,979 --> 00:26:14,389
so the cloud bees

00:26:12,139 --> 00:26:16,940
Fulks they are trying to react attacked

00:26:14,389 --> 00:26:18,919
Jenkins for the cloud at the beginning

00:26:16,940 --> 00:26:22,700
actually was even based on the static

00:26:18,919 --> 00:26:25,399
Jenkins master but then it evolved so

00:26:22,700 --> 00:26:28,129
Jenkins basically tries not to reinvent

00:26:25,399 --> 00:26:31,219
the wheel Tecton is pretty good already

00:26:28,129 --> 00:26:33,559
so Jenkins X is trying to build an

00:26:31,219 --> 00:26:36,789
abstraction on top of Tecton with a few

00:26:33,559 --> 00:26:38,509
additional controllers which basically

00:26:36,789 --> 00:26:41,869
translate

00:26:38,509 --> 00:26:45,769
Tecton Jenkins X yeah mole this time

00:26:41,869 --> 00:26:48,469
pipelines into Tecton resources so we

00:26:45,769 --> 00:26:52,209
are used I think most of us to the

00:26:48,469 --> 00:26:56,349
classic Jenkins file with the groovy DSL

00:26:52,209 --> 00:26:59,779
the new let's say Jenkins X pipeline is

00:26:56,349 --> 00:27:04,419
exactly the same but just defined as GMO

00:26:59,779 --> 00:27:08,089
and translated into Tecton resources and

00:27:04,419 --> 00:27:12,139
something I really find awesome is about

00:27:08,089 --> 00:27:16,579
Jenkins X is the use of get ops so what

00:27:12,139 --> 00:27:20,269
is get ops basically we not we don't

00:27:16,579 --> 00:27:23,749
just define code on a git repo the

00:27:20,269 --> 00:27:25,940
infrastructure the pipelines but also we

00:27:23,749 --> 00:27:29,209
define the operational let's say

00:27:25,940 --> 00:27:33,169
knowledge so that the configuration of

00:27:29,209 --> 00:27:36,019
the CI CD ecosystem which environments

00:27:33,169 --> 00:27:38,690
do we have staging production everything

00:27:36,019 --> 00:27:41,299
is represented in it which application

00:27:38,690 --> 00:27:44,299
do we have on staging which version

00:27:41,299 --> 00:27:47,599
everything is on it we have an audit log

00:27:44,299 --> 00:27:49,039
we can revert in case of troubles we

00:27:47,599 --> 00:27:52,789
have seen the picture at the beginning

00:27:49,039 --> 00:27:55,399
about real-life deployments and of

00:27:52,789 --> 00:27:58,669
course it's also pretty cool in case of

00:27:55,399 --> 00:28:03,379
disaster recovery in my opinion Jenkins

00:27:58,669 --> 00:28:07,999
X so as just a drawback so I would like

00:28:03,379 --> 00:28:11,029
to first start with this light so it's

00:28:07,999 --> 00:28:15,109
awesome and I will try to show a little

00:28:11,029 --> 00:28:17,839
demo to you but of course as a few

00:28:15,109 --> 00:28:22,159
drawbacks its opinionated and in my

00:28:17,839 --> 00:28:26,509
opinion is not yet rock-solid so as a

00:28:22,159 --> 00:28:29,089
lot of moving parts so Tecton the the

00:28:26,509 --> 00:28:31,579
Jenkins X controllers the web book

00:28:29,089 --> 00:28:32,449
handler with prowl fall so for chat

00:28:31,579 --> 00:28:35,659
operations

00:28:32,449 --> 00:28:39,499
so sometimes beam based on so many tools

00:28:35,659 --> 00:28:42,259
makes that will really shaky and as you

00:28:39,499 --> 00:28:45,799
can imagine as I was preparing the demo

00:28:42,259 --> 00:28:52,610
so in the last few days there were a few

00:28:45,799 --> 00:28:55,010
regression bugs which let's say will

00:28:52,610 --> 00:28:58,880
not allow me to show the complete

00:28:55,010 --> 00:29:03,820
application deployed on on production

00:28:58,880 --> 00:29:08,150
but I will try to show you the best I

00:29:03,820 --> 00:29:10,549
can at the moment so I already have

00:29:08,150 --> 00:29:15,200
Jenkins acts installed in another

00:29:10,549 --> 00:29:16,120
kubernetes cluster so let's make it a

00:29:15,200 --> 00:29:20,059
little bit bigger

00:29:16,120 --> 00:29:25,790
janki's X comes with a nd CLI as you can

00:29:20,059 --> 00:29:29,540
see I have the CLI here now let's switch

00:29:25,790 --> 00:29:33,169
the context now I want to use the

00:29:29,540 --> 00:29:35,990
Jenkins X cluster so how did I install

00:29:33,169 --> 00:29:38,870
it the best way to install it would be

00:29:35,990 --> 00:29:42,110
junking X boot with the Jenkins X boot

00:29:38,870 --> 00:29:44,960
you start from a git repository which

00:29:42,110 --> 00:29:47,960
represents the CI CD configuration and

00:29:44,960 --> 00:29:52,520
you install it on your communities

00:29:47,960 --> 00:29:58,340
cluster so I have for instance an

00:29:52,520 --> 00:30:01,130
example here this is the repo the

00:29:58,340 --> 00:30:03,169
Jenkins X boot config repo as you can

00:30:01,130 --> 00:30:06,760
see there is a bunch a lot of stuff

00:30:03,169 --> 00:30:09,919
probably the most important one is here

00:30:06,760 --> 00:30:13,490
the requirements for example we can say

00:30:09,919 --> 00:30:15,950
which is the cluster the owner on github

00:30:13,490 --> 00:30:18,470
which environments do we have for

00:30:15,950 --> 00:30:21,290
example a development environment a

00:30:18,470 --> 00:30:24,919
staging environment do we have TLS

00:30:21,290 --> 00:30:29,990
enabled everything so configuration for

00:30:24,919 --> 00:30:32,270
the ingress control storage and so on so

00:30:29,990 --> 00:30:35,210
everything is pinned up with the JX boot

00:30:32,270 --> 00:30:38,690
in alternative since as I said is not

00:30:35,210 --> 00:30:41,540
super stable yet but I truly believe is

00:30:38,690 --> 00:30:49,400
really promising otherwise you can use

00:30:41,540 --> 00:30:52,160
the JX install command now let's see

00:30:49,400 --> 00:30:56,450
what it what is running on this

00:30:52,160 --> 00:30:58,910
kubernetes cluster so we have a bunch of

00:30:56,450 --> 00:31:01,750
stuff as you can see and everything has

00:30:58,910 --> 00:31:05,450
been installed just by typing JX boot or

00:31:01,750 --> 00:31:06,410
JX install you can see here this guy

00:31:05,450 --> 00:31:08,540
here

00:31:06,410 --> 00:31:11,360
install out-of-the-box you have the

00:31:08,540 --> 00:31:16,070
Tecton pipeline controller then you have

00:31:11,360 --> 00:31:21,830
a few Jenkins acts specific controllers

00:31:16,070 --> 00:31:25,660
here which will cooperate and also

00:31:21,830 --> 00:31:28,970
translate the the Jenkins pipeline into

00:31:25,660 --> 00:31:32,330
Tecton definition you can see a bio and

00:31:28,970 --> 00:31:35,750
just we don't care now about names but

00:31:32,330 --> 00:31:38,510
just for you to know so this is

00:31:35,750 --> 00:31:41,020
basically another application which is

00:31:38,510 --> 00:31:44,720
used as a web book handler this is prowl

00:31:41,020 --> 00:31:48,710
which is used by the kubernetes project

00:31:44,720 --> 00:31:51,620
itself so we have a bunch of stuff

00:31:48,710 --> 00:31:56,930
already installed now we can get also

00:31:51,620 --> 00:31:59,300
the CR DS and as you can see I'm not

00:31:56,930 --> 00:32:05,000
lying so everything has been installed

00:31:59,300 --> 00:32:09,560
by Jenkins X I believe this is pretty

00:32:05,000 --> 00:32:11,510
awesome now let's try to get the

00:32:09,560 --> 00:32:15,110
environments we said we are using heat

00:32:11,510 --> 00:32:16,880
ops our environments are represented on

00:32:15,110 --> 00:32:19,640
get cool

00:32:16,880 --> 00:32:22,220
so Jenkins X is opinionated and starts

00:32:19,640 --> 00:32:24,320
by default with two environments a

00:32:22,220 --> 00:32:27,620
staging environment and a production

00:32:24,320 --> 00:32:30,620
environment the staging environment has

00:32:27,620 --> 00:32:34,790
automatic promotion since we are doing

00:32:30,620 --> 00:32:40,160
CD and you can see here is automatic

00:32:34,790 --> 00:32:42,530
promotion then we have production here

00:32:40,160 --> 00:32:44,930
by default is manual but if you wanna do

00:32:42,530 --> 00:32:47,060
continuous deployment if let's say the

00:32:44,930 --> 00:32:50,180
team is mature enough and we have

00:32:47,060 --> 00:32:52,280
everything automated why not at the

00:32:50,180 --> 00:32:55,400
moment everything is told just on a

00:32:52,280 --> 00:32:57,080
single kubernetes cluster and the

00:32:55,400 --> 00:32:59,450
environments are represented by

00:32:57,080 --> 00:33:03,620
different namespaces as you can see in

00:32:59,450 --> 00:33:06,230
this column over here the team as far as

00:33:03,620 --> 00:33:08,810
I know so I used to cooperate in the

00:33:06,230 --> 00:33:12,020
open source community a little bit with

00:33:08,810 --> 00:33:14,560
the Jenkins axe guys they told me they

00:33:12,020 --> 00:33:19,200
are working also on multi cluster

00:33:14,560 --> 00:33:23,580
support so as you can see we have

00:33:19,200 --> 00:33:27,029
a git repo for example for staging so

00:33:23,580 --> 00:33:29,130
this is my personal get up and as you

00:33:27,029 --> 00:33:32,789
can see the staging configuration is

00:33:29,130 --> 00:33:36,649
completely under version control and

00:33:32,789 --> 00:33:39,320
everything that is deployed on this

00:33:36,649 --> 00:33:46,529
namespace on this environment is

00:33:39,320 --> 00:33:49,019
represented here as a dependency so for

00:33:46,529 --> 00:33:51,480
example two controllers when we had

00:33:49,019 --> 00:33:54,659
applications they will be added

00:33:51,480 --> 00:33:57,690
automatically to this repository through

00:33:54,659 --> 00:34:00,029
a pull request automatically we said for

00:33:57,690 --> 00:34:02,190
staging for production of course you

00:34:00,029 --> 00:34:04,200
would open manually a pull request I

00:34:02,190 --> 00:34:08,550
want to promote for example the micro

00:34:04,200 --> 00:34:10,500
service X version two on production you

00:34:08,550 --> 00:34:13,679
open a pull request this is going to be

00:34:10,500 --> 00:34:16,139
reviewed and this is pretty awesome

00:34:13,679 --> 00:34:18,510
because everything you do even they

00:34:16,139 --> 00:34:22,020
prove the promotion of micro services

00:34:18,510 --> 00:34:27,839
let's say goes under version control now

00:34:22,020 --> 00:34:32,129
I said that the last version is affected

00:34:27,839 --> 00:34:34,490
by a few regression bugs it means I will

00:34:32,129 --> 00:34:37,260
not be able to show the complete

00:34:34,490 --> 00:34:40,050
application running on production but

00:34:37,260 --> 00:34:43,169
still I would like to show you how you

00:34:40,050 --> 00:34:48,500
would create a micro service or how you

00:34:43,169 --> 00:34:57,119
would import a micro service so I have a

00:34:48,500 --> 00:35:02,040
copy of the pet clinic application so we

00:34:57,119 --> 00:35:04,140
are here so as you can see that's

00:35:02,040 --> 00:35:08,130
exactly the same application the pet

00:35:04,140 --> 00:35:11,910
clinic is just a call a copy now in

00:35:08,130 --> 00:35:15,420
order to to import this application what

00:35:11,910 --> 00:35:20,130
do we do first of all okay we enter the

00:35:15,420 --> 00:35:24,720
directory then we say JX import please

00:35:20,130 --> 00:35:27,900
demo God be with me so in this case we

00:35:24,720 --> 00:35:29,670
want to import this micro service so I

00:35:27,900 --> 00:35:32,430
want to use my github

00:35:29,670 --> 00:35:32,850
so Jenkins X guides us through the

00:35:32,430 --> 00:35:35,540
process

00:35:32,850 --> 00:35:38,160
of importing micro-services yeah

00:35:35,540 --> 00:35:42,060
initializes the git repo for us with an

00:35:38,160 --> 00:35:44,550
initial commit and also now in a few

00:35:42,060 --> 00:35:46,950
steps here it is is going to apply a

00:35:44,550 --> 00:35:50,370
build back in this case a maven build

00:35:46,950 --> 00:35:53,550
back so he basically scans the the poem

00:35:50,370 --> 00:35:56,030
realizes in this case it's a Java

00:35:53,550 --> 00:35:58,560
project and applies a build pack

00:35:56,030 --> 00:36:00,840
providing everything we need to build

00:35:58,560 --> 00:36:04,190
and deploy our application to kubernetes

00:36:00,840 --> 00:36:07,620
in other terms for example docker file

00:36:04,190 --> 00:36:11,370
kubernetes manifests and of course the

00:36:07,620 --> 00:36:15,840
sed pipeline so now let's see if it

00:36:11,370 --> 00:36:19,200
atleast this works so now we are

00:36:15,840 --> 00:36:22,470
importing our micro service on my

00:36:19,200 --> 00:36:25,680
personal get up and Jenkins X is also

00:36:22,470 --> 00:36:29,970
registering a web book let's say which

00:36:25,680 --> 00:36:33,870
will notify our Jenkins X therefore

00:36:29,970 --> 00:36:36,240
Tecton in order to start the pipeline so

00:36:33,870 --> 00:36:39,620
here probably the Wi-Fi is a little bit

00:36:36,240 --> 00:36:42,540
slow but it looks like now it's actually

00:36:39,620 --> 00:36:45,810
creating and pushing there the

00:36:42,540 --> 00:36:48,960
repository and here it is we have the

00:36:45,810 --> 00:36:52,050
web book register as well so we have now

00:36:48,960 --> 00:36:57,510
everything is already on it if we want

00:36:52,050 --> 00:37:00,990
to see let's say the activity we just we

00:36:57,510 --> 00:37:04,200
can do that as you can see the pipeline

00:37:00,990 --> 00:37:05,580
is running but unfortunately is failing

00:37:04,200 --> 00:37:10,470
for the bug I was telling you about

00:37:05,580 --> 00:37:12,300
before important to notice is here as an

00:37:10,470 --> 00:37:18,540
automatically generated step which is

00:37:12,300 --> 00:37:21,900
creating detect on see are these so if

00:37:18,540 --> 00:37:25,890
we want to get logs let's say if it can

00:37:21,900 --> 00:37:28,970
fetch something we can get the bill dogs

00:37:25,890 --> 00:37:33,500
for example for the pipeline's

00:37:28,970 --> 00:37:36,890
associated to the repository or to our

00:37:33,500 --> 00:37:39,750
micro service so now it's time to fetch

00:37:36,890 --> 00:37:44,370
logs of course there is a small failure

00:37:39,750 --> 00:37:46,500
here cool so this is just a really short

00:37:44,370 --> 00:37:50,119
introduction I really encourage you to

00:37:46,500 --> 00:37:55,380
try it out also together with Tecton

00:37:50,119 --> 00:38:02,550
okay we already talked about the

00:37:55,380 --> 00:38:06,000
drawbacks so let's go forward let's

00:38:02,550 --> 00:38:11,010
recap what we have we introduced today

00:38:06,000 --> 00:38:13,770
cloud native CI CD which is awesome we

00:38:11,010 --> 00:38:18,330
have seen Tecton as a kubernetes native

00:38:13,770 --> 00:38:20,280
pipeline execution engine afterwards we

00:38:18,330 --> 00:38:22,890
have seen Jenkins X and we have seen

00:38:20,280 --> 00:38:26,010
that is based on Tecton so there is no

00:38:22,890 --> 00:38:28,890
competition actually Jenkins X and Dec

00:38:26,010 --> 00:38:31,130
taking the cloud base guys are soul are

00:38:28,890 --> 00:38:35,250
also cooperating with Reddit and other

00:38:31,130 --> 00:38:36,780
companies - Tecton so these pretty

00:38:35,250 --> 00:38:39,060
awesome not yet

00:38:36,780 --> 00:38:41,340
I would say production-ready but really

00:38:39,060 --> 00:38:45,720
promising and it really allows

00:38:41,340 --> 00:38:51,570
developers to let's say to speed up

00:38:45,720 --> 00:38:54,210
operations so clone a TC a CD it's

00:38:51,570 --> 00:38:57,839
pretty cool but in my opinion this is

00:38:54,210 --> 00:39:00,540
not a silver bullet it nothing in my

00:38:57,839 --> 00:39:04,440
opinion nothing in IT is a silver bullet

00:39:00,540 --> 00:39:06,800
why because the biggest challenges we

00:39:04,440 --> 00:39:09,270
see are not technical challenges

00:39:06,800 --> 00:39:13,619
normally the biggest challenges are

00:39:09,270 --> 00:39:17,700
human challenges so my last message for

00:39:13,619 --> 00:39:20,960
this short presentation is always big

00:39:17,700 --> 00:39:23,910
careers always keep learning and keep

00:39:20,960 --> 00:39:26,430
sharing because knowledge in my opinion

00:39:23,910 --> 00:39:29,250
is something that it doesn't make us

00:39:26,430 --> 00:39:32,770
poorer if we share it it's not like

00:39:29,250 --> 00:39:36,010
money thank you

00:39:32,770 --> 00:39:36,010
[Applause]

00:39:38,860 --> 00:40:16,190
so if you have any questions I would be

00:39:44,810 --> 00:40:20,270
happy to try to answer yes okay so the

00:40:16,190 --> 00:40:22,430
question was now we have seen that we

00:40:20,270 --> 00:40:24,860
have staging and production different

00:40:22,430 --> 00:40:26,780
environments as namespaces in the same

00:40:24,860 --> 00:40:29,840
cluster what happens if we have

00:40:26,780 --> 00:40:33,770
different clusters so at the moment is

00:40:29,840 --> 00:40:37,190
working progress as far as I know that

00:40:33,770 --> 00:40:39,290
the trick here so the let's say the junk

00:40:37,190 --> 00:40:42,260
is X guys are building a custom

00:40:39,290 --> 00:40:45,140
controller which communic

00:40:42,260 --> 00:40:47,420
the clusters to communicate with each

00:40:45,140 --> 00:40:51,170
other so we will have one cluster which

00:40:47,420 --> 00:40:53,930
is just foresee a CD and other clusters

00:40:51,170 --> 00:40:57,380
with a tiny controller connected through

00:40:53,930 --> 00:41:00,560
sto and so everything is basically

00:40:57,380 --> 00:41:02,180
encrypted and they will be able like in

00:41:00,560 --> 00:41:04,790
a multi cluster solution they will be

00:41:02,180 --> 00:41:08,090
able to communicate but as you have seen

00:41:04,790 --> 00:41:11,750
is still already I'm still a bit shaky

00:41:08,090 --> 00:41:13,550
even though it's promising but I as far

00:41:11,750 --> 00:41:23,320
as I know so the final answer is is

00:41:13,550 --> 00:41:23,320
under development yes

00:41:26,420 --> 00:41:36,500
so not not necessarily so yeah I will

00:41:33,150 --> 00:41:39,180
repeat a question for those on the back

00:41:36,500 --> 00:41:40,410
so do you still need always the

00:41:39,180 --> 00:41:44,610
dockerfile

00:41:40,410 --> 00:41:47,640
not necessarily so it depends how you

00:41:44,610 --> 00:41:52,920
build the application so for example in

00:41:47,640 --> 00:41:56,970
the case of Tecton I used Kanaka but for

00:41:52,920 --> 00:41:59,760
example we can use a scaffold and or we

00:41:56,970 --> 00:42:02,700
could use build parks so it depends what

00:41:59,760 --> 00:42:05,190
you configure so in my case I'm using

00:42:02,700 --> 00:42:08,550
the docker file here but is not

00:42:05,190 --> 00:42:11,790
mandatory and that's actually what

00:42:08,550 --> 00:42:14,250
Jenkins X is doing so if we check for

00:42:11,790 --> 00:42:16,530
example what I imported I have them my

00:42:14,250 --> 00:42:19,200
pet clinic application with that at the

00:42:16,530 --> 00:42:22,230
beginning was pretty tiny and here we

00:42:19,200 --> 00:42:24,390
have for example docker file and also

00:42:22,230 --> 00:42:27,660
scaffold definition this is what is

00:42:24,390 --> 00:42:30,150
using to build docker containers and by

00:42:27,660 --> 00:42:33,990
the way this is the Jenkins X pipeline

00:42:30,150 --> 00:42:42,710
it's really complicated as you see sorry

00:42:33,990 --> 00:42:42,710
so yes

00:43:03,230 --> 00:43:11,100
uh-huh so the question was about Argo CD

00:43:07,020 --> 00:43:14,700
and the usage with get ops so I have

00:43:11,100 --> 00:43:17,520
played just shortly with Argos oh I'm

00:43:14,700 --> 00:43:21,360
not really an expert but as far as I

00:43:17,520 --> 00:43:24,810
have seen so Argo is just a CD solution

00:43:21,360 --> 00:43:28,410
so it's not a CI solution is so is used

00:43:24,810 --> 00:43:30,480
to deploy stuff continuously to

00:43:28,410 --> 00:43:33,630
kubernetes or even OpenShift

00:43:30,480 --> 00:43:37,350
so the comparison in my opinion is Argo

00:43:33,630 --> 00:43:41,540
is more specific for CD Jenkins X tries

00:43:37,350 --> 00:43:58,520
to do a little bit of everything so

00:43:41,540 --> 00:43:58,520
please so

00:43:59,320 --> 00:44:04,359
okay so this is a really interesting

00:44:01,520 --> 00:44:08,359
question so what I what I have seen is

00:44:04,359 --> 00:44:11,599
basically what I have shown is basically

00:44:08,359 --> 00:44:14,450
they're the open source version there is

00:44:11,599 --> 00:44:17,000
support for security and all these

00:44:14,450 --> 00:44:19,490
enterprise stuff but of course there is

00:44:17,000 --> 00:44:21,890
an enterprise and enterprise add-ons

00:44:19,490 --> 00:44:25,310
which you have to install on top of it

00:44:21,890 --> 00:44:29,150
so it's possible also to integrate it

00:44:25,310 --> 00:44:31,760
for example with LDAP its employee been

00:44:29,150 --> 00:44:34,220
possible to integrate it with vault for

00:44:31,760 --> 00:44:39,530
secret encryption but some add-ons are

00:44:34,220 --> 00:44:41,780
are not for free so I think I'm out of

00:44:39,530 --> 00:44:45,050
time unfortunately but I will be hanging

00:44:41,780 --> 00:44:50,680
out hanging out a little a little bit

00:44:45,050 --> 00:44:50,680

YouTube URL: https://www.youtube.com/watch?v=rhGgM8KfvfA


