Title: Presto: Cloud Native SQL-on-Anything
Publication date: 2019-10-02
Playlist: DevConfUS 2019
Description: 
	Speaker: Matt Fuller

Used by Facebook, Netflix, Twitter, Uber, Lyft, and many others, Presto has become a ubiquitous solution for running fast SQL analytics across disparate data sources. Presto is an open source distributed SQL query engine widely recognized for its low-latency queries, high concurrency, and native ability to query multiple data sources. These data sources may include Ceph, S3, Google Cloud Storage, Azure Storage, Hadoop/HDFS, relational database systems such as PostgreSQL, and non-relational systems such as Apache Kafka. Presto’s connector based architecture allow you to query virtually anything.

In the first part of the talk we will focus on what Presto is, its background, and its architecture. In the second part of the talk we will learn about Presto’s cloud native capabilities using Red Hat OpenShift and Kubernetes. Kubernetes reduces the burden and complexity of configuring, deploying, managing, and monitoring containerized applications. To achieve these capabilities with Presto, Red Hat and Starburst partnered to provide the Presto Kubernetes Operator and the Presto Container on OpenShift.

The talk will also include a live demo of using Presto on Kubernetes and showing SQL federation of data between Ceph and other data sources. After the talk, you will have a good understanding of Presto basics and ready to participate in the Presto open source community as well as try Presto on your own.
Captions: 
	00:00:04,200 --> 00:00:08,740
all right good afternoon everybody my

00:00:06,460 --> 00:00:11,530
name is Matt fuller and today I'm going

00:00:08,740 --> 00:00:16,720
to be speaking about presto and cloud

00:00:11,530 --> 00:00:20,170
native sequel on anything and before we

00:00:16,720 --> 00:00:20,800
get started it's kind of what I get lay

00:00:20,170 --> 00:00:23,560
of the land

00:00:20,800 --> 00:00:25,780
you know here raise your hand who's

00:00:23,560 --> 00:00:32,290
heard of presto the open source project

00:00:25,780 --> 00:00:35,469
presto okay great cool this is great cuz

00:00:32,290 --> 00:00:37,359
today I'm gonna be speaking about presto

00:00:35,469 --> 00:00:39,579
in sort of the basics and backgrounds

00:00:37,359 --> 00:00:42,699
behind it so by the end of the talk you

00:00:39,579 --> 00:00:44,350
will have learned about presto and of

00:00:42,699 --> 00:00:46,829
those few hands who have heard about it

00:00:44,350 --> 00:00:47,980
who's actually used it or tried it

00:00:46,829 --> 00:00:53,050
excellent

00:00:47,980 --> 00:00:56,379
cool awesome all right great so in this

00:00:53,050 --> 00:00:57,699
talk we will learn about presto which is

00:00:56,379 --> 00:01:00,159
an open source project Learner's

00:00:57,699 --> 00:01:01,239
background in architecture and then

00:01:00,159 --> 00:01:05,170
after we go through that will learn

00:01:01,239 --> 00:01:06,159
about presto and kubernetes and using on

00:01:05,170 --> 00:01:07,840
Red Hat OpenShift

00:01:06,159 --> 00:01:11,740
and then finally talk about the coup

00:01:07,840 --> 00:01:13,140
Bernays operator and and how we can

00:01:11,740 --> 00:01:19,180
participate in the open source community

00:01:13,140 --> 00:01:21,420
it's presto so you know kind of start

00:01:19,180 --> 00:01:25,930
off and cut the chase we'll talk about

00:01:21,420 --> 00:01:27,820
how we got here but in collaboration

00:01:25,930 --> 00:01:30,969
with partnering with Red Hat

00:01:27,820 --> 00:01:33,640
we now have a presto kubernetes operator

00:01:30,969 --> 00:01:36,850
that you can deploy to creates

00:01:33,640 --> 00:01:39,640
distributions such as Red Hat openshift

00:01:36,850 --> 00:01:41,109
so we'll talk about that we'll get to

00:01:39,640 --> 00:01:43,149
that by talking about presto and what

00:01:41,109 --> 00:01:45,250
the operator is and this might make more

00:01:43,149 --> 00:01:51,549
sense to what it means and how you can

00:01:45,250 --> 00:01:53,829
use it so you know first was presto well

00:01:51,549 --> 00:01:56,460
it's a community driven project and you

00:01:53,829 --> 00:02:01,479
can think of it as sequel on anything

00:01:56,460 --> 00:02:03,310
it's it's an open-source project and it

00:02:01,479 --> 00:02:05,619
looks like a database cuz it speaks

00:02:03,310 --> 00:02:07,960
sequel but it actually isn't a database

00:02:05,619 --> 00:02:10,360
because I'm actually store any data what

00:02:07,960 --> 00:02:13,720
you can do though is by issuing sequel

00:02:10,360 --> 00:02:16,900
queries through presto you can reach out

00:02:13,720 --> 00:02:19,750
to virtually any data source

00:02:16,900 --> 00:02:21,400
on this particular diagram are some

00:02:19,750 --> 00:02:23,560
examples of data sources that you could

00:02:21,400 --> 00:02:26,620
reach out to you whether it's files on

00:02:23,560 --> 00:02:30,310
staff or other distribute storages like

00:02:26,620 --> 00:02:31,930
s3 or relational databases such as my

00:02:30,310 --> 00:02:33,760
sequel or Postgres or even

00:02:31,930 --> 00:02:36,580
non-relational data sources whether it's

00:02:33,760 --> 00:02:39,250
Cassandra or Kafka and we'll talk about

00:02:36,580 --> 00:02:44,500
more about how you can accomplish that

00:02:39,250 --> 00:02:46,239
with presto so it's a community driven

00:02:44,500 --> 00:02:50,200
open-source project it was originally

00:02:46,239 --> 00:02:50,980
created an open source at Facebook so at

00:02:50,200 --> 00:02:52,989
the time

00:02:50,980 --> 00:02:56,560
this is Beckham around two thousand

00:02:52,989 --> 00:03:00,340
twelve or thirteen there was a hundred

00:02:56,560 --> 00:03:02,319
petabyte data warehouse using hive which

00:03:00,340 --> 00:03:05,170
is another sequel tool if you're not

00:03:02,319 --> 00:03:06,849
familiar and the problem with it is it

00:03:05,170 --> 00:03:09,430
wasn't performant to scale too fast

00:03:06,849 --> 00:03:11,910
Facebook's needs so they set out and

00:03:09,430 --> 00:03:16,060
they created presto

00:03:11,910 --> 00:03:19,630
so fast-forward a bit and I became a

00:03:16,060 --> 00:03:21,600
really popular project being used by

00:03:19,630 --> 00:03:25,120
companies not just Facebook but LinkedIn

00:03:21,600 --> 00:03:26,950
Airbnb uber Netflix so a lot of

00:03:25,120 --> 00:03:28,209
companies that had large amounts of data

00:03:26,950 --> 00:03:30,040
that the needs to run sequel in it

00:03:28,209 --> 00:03:31,959
analytics on and over time I became

00:03:30,040 --> 00:03:37,810
really hardened and battle-tested to

00:03:31,959 --> 00:03:39,970
really work at that at that scale so

00:03:37,810 --> 00:03:41,739
from the beginning it was really for

00:03:39,970 --> 00:03:44,380
this high-performance scale high

00:03:41,739 --> 00:03:47,590
concurrency and so on but one really

00:03:44,380 --> 00:03:50,519
cool part about presto is this notion of

00:03:47,590 --> 00:03:52,510
separation of storage and compute so

00:03:50,519 --> 00:03:55,120
unlike a traditional database that's

00:03:52,510 --> 00:03:57,280
managing the storage presto doesn't

00:03:55,120 --> 00:03:59,560
store anything all you do is you issue

00:03:57,280 --> 00:04:00,970
your sequel queries to it and it what

00:03:59,560 --> 00:04:06,010
reaches out to the different data

00:04:00,970 --> 00:04:07,690
sources so this is really nice it it

00:04:06,010 --> 00:04:10,810
works really well

00:04:07,690 --> 00:04:12,819
in a variety environment so for example

00:04:10,810 --> 00:04:17,380
whether it's public cloud or private

00:04:12,819 --> 00:04:22,270
cloud you can keep your your data in an

00:04:17,380 --> 00:04:24,880
object store like staff for s3 you know

00:04:22,270 --> 00:04:27,789
Asher's blob storage or Google Cloud

00:04:24,880 --> 00:04:29,899
Storage so you keep all your data there

00:04:27,789 --> 00:04:32,179
and then you can

00:04:29,899 --> 00:04:33,559
just provision the compute layer when

00:04:32,179 --> 00:04:34,969
you want we'll talk about how we can do

00:04:33,559 --> 00:04:36,499
that a kubernetes but you post it in

00:04:34,969 --> 00:04:39,979
cloud environments as well you can

00:04:36,499 --> 00:04:41,869
deploy it practically anywhere so why

00:04:39,979 --> 00:04:43,819
that's really neat is now you don't have

00:04:41,869 --> 00:04:46,389
to have the system running all the time

00:04:43,819 --> 00:04:49,219
you can provision it when you want to

00:04:46,389 --> 00:04:51,259
you can scale it out and in as you want

00:04:49,219 --> 00:04:53,259
to right so if you have a lot of demand

00:04:51,259 --> 00:04:55,279
on the system you can just add more

00:04:53,259 --> 00:04:56,299
horsepower to it we'll talk about that

00:04:55,279 --> 00:04:58,969
more when we talk about precipice

00:04:56,299 --> 00:05:01,099
architecture and how that works but

00:04:58,969 --> 00:05:04,669
because of this it gives you sequel on

00:05:01,099 --> 00:05:08,029
anything another piece we'll talk about

00:05:04,669 --> 00:05:10,639
later is how you can integrate data from

00:05:08,029 --> 00:05:14,779
different data sources so if we go if we

00:05:10,639 --> 00:05:16,219
go back to the slide where I said you

00:05:14,779 --> 00:05:18,649
can issue a sequel query and go to

00:05:16,219 --> 00:05:20,419
Vinnie's variety of data sources in the

00:05:18,649 --> 00:05:22,459
same sequel query you can actually reach

00:05:20,419 --> 00:05:25,849
out to multiple data sources and join it

00:05:22,459 --> 00:05:28,269
together so it eliminates the need to

00:05:25,849 --> 00:05:31,009
move data around if you don't have to

00:05:28,269 --> 00:05:32,809
and finally there's no there's no vendor

00:05:31,009 --> 00:05:34,969
lock-in right you don't have to run this

00:05:32,809 --> 00:05:36,919
on the Hadoop distro it can query data

00:05:34,969 --> 00:05:40,039
from hadoop like HDFS but you don't you

00:05:36,919 --> 00:05:41,929
don't have to so you could but you can

00:05:40,039 --> 00:05:43,089
run on a map bar or a cloud arrow

00:05:41,929 --> 00:05:48,769
Hortonworks

00:05:43,089 --> 00:05:51,019
or outside to do there's no storage and

00:05:48,769 --> 00:05:52,610
engine lock-in it's it's very it's very

00:05:51,019 --> 00:05:53,089
open you can you can run it wherever

00:05:52,610 --> 00:05:55,699
you'd like

00:05:53,089 --> 00:05:58,519
and in queries open data formats whether

00:05:55,699 --> 00:06:03,829
it's or C format or park' which are a

00:05:58,519 --> 00:06:05,659
type of file you can keep data in and if

00:06:03,829 --> 00:06:07,099
fine there's no cloud vendor lock-in you

00:06:05,659 --> 00:06:09,050
could run this on the public cloud you

00:06:07,099 --> 00:06:10,969
can run on a private club so it gives

00:06:09,050 --> 00:06:14,209
you that option ality and flexibility of

00:06:10,969 --> 00:06:18,439
those system and as I mentioned it's

00:06:14,209 --> 00:06:20,239
used by many well-known presto there are

00:06:18,439 --> 00:06:23,749
many use well-known Prester users

00:06:20,239 --> 00:06:27,469
whether it's twitter linkedin slack

00:06:23,749 --> 00:06:29,479
Netflix Facebook of course and many

00:06:27,469 --> 00:06:31,309
others this is really just a small

00:06:29,479 --> 00:06:35,029
sample of the amount of users and the

00:06:31,309 --> 00:06:36,829
community that are using it but a lot of

00:06:35,029 --> 00:06:39,699
these are using at it a pretty large

00:06:36,829 --> 00:06:39,699
scale

00:06:42,030 --> 00:06:46,030
so now that I've given the background

00:06:43,870 --> 00:06:48,490
about presto I'm going to talk about the

00:06:46,030 --> 00:06:50,470
presto architecture can you give you a

00:06:48,490 --> 00:06:54,910
better idea of how this system actually

00:06:50,470 --> 00:06:56,860
works how it actually scales and also

00:06:54,910 --> 00:06:57,940
kind of provide the the background for

00:06:56,860 --> 00:07:03,400
how this will actually work on

00:06:57,940 --> 00:07:05,200
kubernetes as well so there's really two

00:07:03,400 --> 00:07:07,360
main components in in presto there's

00:07:05,200 --> 00:07:11,230
what's known as a coordinator and what's

00:07:07,360 --> 00:07:13,390
known as a worker you can think of the

00:07:11,230 --> 00:07:15,940
corner is the brain of the system and

00:07:13,390 --> 00:07:19,050
the worker as the the muscle of the

00:07:15,940 --> 00:07:21,490
system so the user on the left here

00:07:19,050 --> 00:07:25,450
sends their sequel query that they want

00:07:21,490 --> 00:07:28,030
a query data source could be data that's

00:07:25,450 --> 00:07:33,040
in Oracle or Postgres or your data

00:07:28,030 --> 00:07:34,930
that's Insaf or s3 or or Hadoop data but

00:07:33,040 --> 00:07:36,100
the query comes in to the coordinator

00:07:34,930 --> 00:07:39,310
and it really has three primary

00:07:36,100 --> 00:07:40,690
responsibilities so it parses the sequel

00:07:39,310 --> 00:07:42,430
which is basically just a text string

00:07:40,690 --> 00:07:46,030
and it transforms it into an internal

00:07:42,430 --> 00:07:47,800
data structure that presto knows how to

00:07:46,030 --> 00:07:51,250
operate on and it goes through an

00:07:47,800 --> 00:07:53,530
optimization process I'm not going to

00:07:51,250 --> 00:07:55,210
talk about cost based optimizations and

00:07:53,530 --> 00:07:58,120
databases today but you can think of it

00:07:55,210 --> 00:08:01,330
as sequel is a declarative language

00:07:58,120 --> 00:08:02,530
where you're declaring the the day that

00:08:01,330 --> 00:08:04,690
you want to get your naturally not

00:08:02,530 --> 00:08:06,160
actually specifying the steps you're not

00:08:04,690 --> 00:08:07,780
saying do this this this the other thing

00:08:06,160 --> 00:08:10,780
you're relying on the database system to

00:08:07,780 --> 00:08:13,140
actually figure that out and so because

00:08:10,780 --> 00:08:15,190
of that there are many different ways to

00:08:13,140 --> 00:08:17,500
process the sequel query and the

00:08:15,190 --> 00:08:19,240
optimizer is tasked as ferry not the

00:08:17,500 --> 00:08:21,430
most efficient way to get you the

00:08:19,240 --> 00:08:23,080
results that you want the fastest so

00:08:21,430 --> 00:08:25,830
that's what the optimization phase goes

00:08:23,080 --> 00:08:28,240
through then finally it goes through

00:08:25,830 --> 00:08:29,710
scheduling this is where it takes what's

00:08:28,240 --> 00:08:31,120
known as a plan which are the sequence

00:08:29,710 --> 00:08:34,330
of the steps that you have to process

00:08:31,120 --> 00:08:37,210
the sequel query and it will schedule

00:08:34,330 --> 00:08:42,130
that work on the the muscle of the

00:08:37,210 --> 00:08:43,900
system the workers so again I was saying

00:08:42,130 --> 00:08:45,940
you know presto doesn't store any data

00:08:43,900 --> 00:08:50,050
so it's not technically a database it's

00:08:45,940 --> 00:08:51,550
really a sequel query engine so how do

00:08:50,050 --> 00:08:54,250
that work well there's this there's this

00:08:51,550 --> 00:08:57,279
notion of Presto's connector

00:08:54,250 --> 00:09:02,620
architecture so in order to to query any

00:08:57,279 --> 00:09:04,330
of these data sources you you're esto

00:09:02,620 --> 00:09:08,250
has to have a connector for it

00:09:04,330 --> 00:09:10,930
so the coordinator will reach out to the

00:09:08,250 --> 00:09:12,190
data sources values of a special

00:09:10,930 --> 00:09:15,160
connector and what this connector does

00:09:12,190 --> 00:09:17,800
for the the coordinator for example is

00:09:15,160 --> 00:09:19,240
it can return metadata because proposal

00:09:17,800 --> 00:09:21,130
story thing doesn't have metadata it

00:09:19,240 --> 00:09:22,570
doesn't know the table names it doesn't

00:09:21,130 --> 00:09:24,190
know the column names doesn't know the

00:09:22,570 --> 00:09:26,079
column types that's to get that

00:09:24,190 --> 00:09:29,140
information from somewhere so that's the

00:09:26,079 --> 00:09:30,760
connectors responsibility reaches out to

00:09:29,140 --> 00:09:32,500
the different data sources they all

00:09:30,760 --> 00:09:34,510
provide the metadata in different ways

00:09:32,500 --> 00:09:38,140
but it transforms it back into something

00:09:34,510 --> 00:09:41,079
for us to understands you know you can

00:09:38,140 --> 00:09:43,240
think of it as you know a connector from

00:09:41,079 --> 00:09:45,510
going from HDMI right into my laptop

00:09:43,240 --> 00:09:48,820
right as a kind of a crude analogy but

00:09:45,510 --> 00:09:51,070
it's it's translating something into

00:09:48,820 --> 00:09:51,579
something the other end understands

00:09:51,070 --> 00:09:55,839
right

00:09:51,579 --> 00:09:59,260
and so once it has that metadata it

00:09:55,839 --> 00:10:02,140
processes the processing to happen on

00:09:59,260 --> 00:10:03,399
the workers and that also goes through

00:10:02,140 --> 00:10:04,990
this connector architecture and the

00:10:03,399 --> 00:10:07,750
connector to actually get the data from

00:10:04,990 --> 00:10:10,149
the system so in in the case of

00:10:07,750 --> 00:10:13,480
distributed storage like HDFS or staff

00:10:10,149 --> 00:10:15,370
or s3 it's actually reading those files

00:10:13,480 --> 00:10:17,500
and streaming them through back into the

00:10:15,370 --> 00:10:21,010
workers in the cases of relational

00:10:17,500 --> 00:10:22,959
databases it might be issuing sequel

00:10:21,010 --> 00:10:24,490
queries so if you're if you're issuing a

00:10:22,959 --> 00:10:27,700
sequel query to press to the query data

00:10:24,490 --> 00:10:29,649
from Postgres it will push down part of

00:10:27,700 --> 00:10:32,800
that sequel query into Postgres to get

00:10:29,649 --> 00:10:36,250
the results back to the workers

00:10:32,800 --> 00:10:38,500
now presto is a distributed system so

00:10:36,250 --> 00:10:41,560
you could have one worker or you could

00:10:38,500 --> 00:10:43,209
have a thousand workers the more workers

00:10:41,560 --> 00:10:45,850
you add the more horsepower you add to

00:10:43,209 --> 00:10:47,769
the system so if you if you want to get

00:10:45,850 --> 00:10:52,720
more performance you can add more

00:10:47,769 --> 00:10:55,480
workers and this is where where it works

00:10:52,720 --> 00:10:59,110
really nice on cloud private cloud and

00:10:55,480 --> 00:11:01,120
kubernetes because you could set up what

00:10:59,110 --> 00:11:03,279
is known as auto scaling so so based on

00:11:01,120 --> 00:11:07,300
the the load that you're putting on

00:11:03,279 --> 00:11:11,199
presto you can you can add more workers

00:11:07,300 --> 00:11:14,500
and then queries would get faster is the

00:11:11,199 --> 00:11:17,320
distributed system so the plan is

00:11:14,500 --> 00:11:18,459
basically cut into pieces in in each

00:11:17,320 --> 00:11:20,709
worker well you can think of it as like

00:11:18,459 --> 00:11:24,220
a piece of the plan to work on it will

00:11:20,709 --> 00:11:25,270
work on chunks of the data at a time so

00:11:24,220 --> 00:11:26,709
when you're doing that in parallel

00:11:25,270 --> 00:11:28,690
you're gonna get much greater

00:11:26,709 --> 00:11:30,399
performance rather than if you had to

00:11:28,690 --> 00:11:33,520
read it rather than having something

00:11:30,399 --> 00:11:35,020
read all the data at once naturally

00:11:33,520 --> 00:11:36,699
makes sense if you can split it if it's

00:11:35,020 --> 00:11:37,510
if it's parallel in some way and you can

00:11:36,699 --> 00:11:40,899
split it you're gonna get better

00:11:37,510 --> 00:11:42,940
performance so this plan these workers

00:11:40,899 --> 00:11:45,459
could be much more complex you've got a

00:11:42,940 --> 00:11:46,839
really complex sequel query if anyone

00:11:45,459 --> 00:11:48,220
here is familiar with writing sequel

00:11:46,839 --> 00:11:51,480
really simple or they can be these

00:11:48,220 --> 00:11:53,890
massive pages and pages of queries

00:11:51,480 --> 00:11:56,020
Ruster will do either it can it can

00:11:53,890 --> 00:11:58,779
handle pretty much any sequel query you

00:11:56,020 --> 00:12:01,720
you could throw at it but the more

00:11:58,779 --> 00:12:04,240
complex the the more complex the plan is

00:12:01,720 --> 00:12:06,100
and actually the more important Cori

00:12:04,240 --> 00:12:09,430
optimization is to make sure that you

00:12:06,100 --> 00:12:12,810
can you can get good performance so the

00:12:09,430 --> 00:12:15,220
data flows through these workers and

00:12:12,810 --> 00:12:17,470
depending on the complexity query it may

00:12:15,220 --> 00:12:18,970
have to redistribute data meaning piece

00:12:17,470 --> 00:12:20,560
of the data might be have to sent over

00:12:18,970 --> 00:12:25,390
the network to other workers in order to

00:12:20,560 --> 00:12:26,860
compute the the query appropriately so

00:12:25,390 --> 00:12:28,449
when the query is done processing it

00:12:26,860 --> 00:12:31,500
will go back to the coordinator and send

00:12:28,449 --> 00:12:34,449
the results back back to presto

00:12:31,500 --> 00:12:37,329
so let's double click into like what

00:12:34,449 --> 00:12:39,010
this connector architecture looks like

00:12:37,329 --> 00:12:41,230
so here's another way to look at if we

00:12:39,010 --> 00:12:43,180
want to double click between you know

00:12:41,230 --> 00:12:46,240
until these arrows these red arrows

00:12:43,180 --> 00:12:48,250
where the data sources are we have the

00:12:46,240 --> 00:12:51,010
Presto coordinator on the left and the

00:12:48,250 --> 00:12:52,930
Presto worker on the right here and this

00:12:51,010 --> 00:12:54,399
is you know if you were to look in the

00:12:52,930 --> 00:12:56,380
code it's not gonna look exactly like

00:12:54,399 --> 00:13:00,579
this but conceptually you could think of

00:12:56,380 --> 00:13:04,540
it this way and there's what's known as

00:13:00,579 --> 00:13:08,800
an SPI and each connector has to

00:13:04,540 --> 00:13:10,959
implement certain required methods in

00:13:08,800 --> 00:13:13,769
order for Presta to work so for example

00:13:10,959 --> 00:13:16,319
the Presto coordinator will know

00:13:13,769 --> 00:13:19,559
to say it calls a method get me table

00:13:16,319 --> 00:13:23,069
names well the the hive connector will

00:13:19,559 --> 00:13:27,059
have to implement the method called get

00:13:23,069 --> 00:13:29,069
me table names that returns the list of

00:13:27,059 --> 00:13:31,860
table names in a format that presto

00:13:29,069 --> 00:13:34,699
expects same with Cassandra and Kafka my

00:13:31,860 --> 00:13:38,970
sequel and because press is actually

00:13:34,699 --> 00:13:40,949
pluggable if you have some sort of data

00:13:38,970 --> 00:13:42,929
source that presto can query from or

00:13:40,949 --> 00:13:45,689
some proprietary data source or custom

00:13:42,929 --> 00:13:48,329
data source you could write your own

00:13:45,689 --> 00:13:49,739
connector or if it's data source that

00:13:48,329 --> 00:13:51,420
just pressed it wasn't shipped with you

00:13:49,739 --> 00:13:53,999
could write your own connector in the

00:13:51,420 --> 00:13:57,420
complexity of it varies depending on

00:13:53,999 --> 00:13:59,369
what your data source is if it's a

00:13:57,420 --> 00:14:01,619
relational database they're relatively

00:13:59,369 --> 00:14:04,049
straightforward because ocean database

00:14:01,619 --> 00:14:08,610
that has rows tables columns that kind

00:14:04,049 --> 00:14:11,329
of map naturally into presto but if it's

00:14:08,610 --> 00:14:13,529
something more complex that isn't

00:14:11,329 --> 00:14:15,660
naturally relational let's just say

00:14:13,529 --> 00:14:19,199
Kafka for example it gets a little bit

00:14:15,660 --> 00:14:21,089
more tricky so you know if you're

00:14:19,199 --> 00:14:25,730
familiar with Kafka it's it's basically

00:14:21,089 --> 00:14:29,339
distributed pub subsystem and you can

00:14:25,730 --> 00:14:31,290
subscribe to topics to to read from

00:14:29,339 --> 00:14:36,569
messages are getting push to push to the

00:14:31,290 --> 00:14:38,490
topic so in that case the the

00:14:36,569 --> 00:14:40,860
implementer of the connector has to

00:14:38,490 --> 00:14:42,990
figure out what is a table what is a

00:14:40,860 --> 00:14:45,389
column what is a row in the case of

00:14:42,990 --> 00:14:48,299
something like Kafka the the topic the

00:14:45,389 --> 00:14:51,660
thing you're subscribing to appears as a

00:14:48,299 --> 00:14:54,959
table and presto and each message will

00:14:51,660 --> 00:14:58,129
appear as a row and then it's up to you

00:14:54,959 --> 00:14:58,129
what you want to call them to look like

00:14:58,429 --> 00:15:06,439
so this data stats SPI so if you want

00:15:01,919 --> 00:15:08,970
your your data sources to work with the

00:15:06,439 --> 00:15:10,709
cost-based optimizer and presto you have

00:15:08,970 --> 00:15:13,439
to provide data statistics to it so it

00:15:10,709 --> 00:15:15,299
knows how to operate on the data the

00:15:13,439 --> 00:15:19,259
data location is where is the data

00:15:15,299 --> 00:15:20,040
located you know what is the for a

00:15:19,259 --> 00:15:24,079
relational database

00:15:20,040 --> 00:15:26,339
what is the JDBC endpoint for

00:15:24,079 --> 00:15:27,570
distributed storage like where is the

00:15:26,339 --> 00:15:33,030
physical location of these

00:15:27,570 --> 00:15:34,680
vials so here's like if you double-click

00:15:33,030 --> 00:15:36,510
into Mars a little bit more technical

00:15:34,680 --> 00:15:39,450
I'll just kind of briefly go over this

00:15:36,510 --> 00:15:42,150
but each of these workers has an

00:15:39,450 --> 00:15:45,540
operator pipeline in them so these

00:15:42,150 --> 00:15:48,450
operators could be read me the data do a

00:15:45,540 --> 00:15:52,260
filter so if you want if you have data

00:15:48,450 --> 00:15:53,310
with maybe there's a state column in it

00:15:52,260 --> 00:15:55,650
you know Massachusetts Rhode Island

00:15:53,310 --> 00:15:58,080
California but you only want to return

00:15:55,650 --> 00:16:01,050
the California rose one of those awkward

00:15:58,080 --> 00:16:02,580
in that filter so that only pulls out

00:16:01,050 --> 00:16:04,830
the rows where the state is from

00:16:02,580 --> 00:16:06,450
California we might be doing an

00:16:04,830 --> 00:16:10,020
aggregation if you're doing a sum or a

00:16:06,450 --> 00:16:11,820
count or standard deviation or something

00:16:10,020 --> 00:16:16,020
so each of these operators have tasks

00:16:11,820 --> 00:16:18,090
for what they're doing so I'll talk a

00:16:16,020 --> 00:16:20,580
little bit about the Presto ecosystem

00:16:18,090 --> 00:16:22,650
now and then I think at this point

00:16:20,580 --> 00:16:25,230
you'll have a pretty good basic

00:16:22,650 --> 00:16:30,600
understanding of presto and we can talk

00:16:25,230 --> 00:16:34,190
about how this fits into kubernetes so

00:16:30,600 --> 00:16:36,780
the the most popular and widely used

00:16:34,190 --> 00:16:39,710
connector in presto is called the hive

00:16:36,780 --> 00:16:42,360
connector now it's a bit of a misnomer

00:16:39,710 --> 00:16:48,030
it was originally written to query from

00:16:42,360 --> 00:16:51,000
the hive data warehouse that is HDFS but

00:16:48,030 --> 00:16:54,200
it is just a list of files right so if

00:16:51,000 --> 00:16:59,130
you're using the same sort of hive table

00:16:54,200 --> 00:17:01,980
format where if you think of files and

00:16:59,130 --> 00:17:04,500
directories right a directory represents

00:17:01,980 --> 00:17:06,449
a table name and all the files in it

00:17:04,500 --> 00:17:10,610
could be one file or multiple files in

00:17:06,449 --> 00:17:13,860
it represent the data of that table so

00:17:10,610 --> 00:17:15,990
if you replicate that on the different

00:17:13,860 --> 00:17:20,939
distributed storages whether it's a four

00:17:15,990 --> 00:17:22,290
HDFS or Google or as your AWS the hive

00:17:20,939 --> 00:17:25,890
connector will work there so you can

00:17:22,290 --> 00:17:28,380
think of hive is as three things first

00:17:25,890 --> 00:17:32,400
of all it's a sequel engine that was

00:17:28,380 --> 00:17:35,070
developed before Presto's time and it

00:17:32,400 --> 00:17:37,830
was really clever where it it took what

00:17:35,070 --> 00:17:38,910
is known we're known as MapReduce jobs

00:17:37,830 --> 00:17:41,250
which is a

00:17:38,910 --> 00:17:44,460
the attention on Hadoop and actually

00:17:41,250 --> 00:17:46,080
translated it to you run sequel it

00:17:44,460 --> 00:17:47,549
translate to a bunch of MapReduce jobs

00:17:46,080 --> 00:17:49,169
to process the query I'm not gonna go

00:17:47,549 --> 00:17:51,390
into too many details but Dupin

00:17:49,169 --> 00:17:53,280
MapReduce but just take for granted that

00:17:51,390 --> 00:17:56,700
that existed and it was it was it was

00:17:53,280 --> 00:17:58,770
slow but that's what was done and but

00:17:56,700 --> 00:18:01,289
what came out of that was this notion of

00:17:58,770 --> 00:18:03,240
a hive data warehouse and that's how

00:18:01,289 --> 00:18:05,070
data is particularly formatted there and

00:18:03,240 --> 00:18:07,710
that's that's sort of the background

00:18:05,070 --> 00:18:10,470
behind the name now they're really three

00:18:07,710 --> 00:18:13,190
three parts to hive there's the the

00:18:10,470 --> 00:18:15,990
actual way you're storing data on disk

00:18:13,190 --> 00:18:19,049
then there's the the metadata catalog

00:18:15,990 --> 00:18:21,450
and then there's finally the execution

00:18:19,049 --> 00:18:23,760
engine so the hive connector uses two of

00:18:21,450 --> 00:18:27,330
those three uses the meta the metadata

00:18:23,760 --> 00:18:29,490
store and knows how to read this

00:18:27,330 --> 00:18:31,559
particular table format what presto does

00:18:29,490 --> 00:18:33,210
not use is the hive run time because

00:18:31,559 --> 00:18:35,220
presto is a century placing that high of

00:18:33,210 --> 00:18:38,039
run time because rusty was developed to

00:18:35,220 --> 00:18:42,510
be much more fast performing efficient

00:18:38,039 --> 00:18:44,100
than hive but hive has a really good

00:18:42,510 --> 00:18:46,980
meta store and a really good way of

00:18:44,100 --> 00:18:48,720
representing table so it leverages that

00:18:46,980 --> 00:18:50,280
but the other cool thing this is where

00:18:48,720 --> 00:18:52,890
separation of storage and compute comes

00:18:50,280 --> 00:18:54,539
into play is that you don't have to move

00:18:52,890 --> 00:18:56,940
the data if you had your hive data

00:18:54,539 --> 00:18:59,490
warehouse and you've deployed that in

00:18:56,940 --> 00:19:00,450
your infrastructure your company you

00:18:59,490 --> 00:19:02,309
don't have to do it you don't have to

00:19:00,450 --> 00:19:03,960
migrate erasin you can just point presto

00:19:02,309 --> 00:19:10,530
at it and you can start clearing the

00:19:03,960 --> 00:19:14,610
data the other public makers are

00:19:10,530 --> 00:19:18,780
relational database connectors so crusty

00:19:14,610 --> 00:19:20,130
will connect to these over JDBC you

00:19:18,780 --> 00:19:21,450
don't have to worry about this presto

00:19:20,130 --> 00:19:24,570
figure this out how to do so when you

00:19:21,450 --> 00:19:26,370
issue a query to to presto presto will

00:19:24,570 --> 00:19:29,309
know how to issue the particular sequel

00:19:26,370 --> 00:19:30,450
query to this database so to your

00:19:29,309 --> 00:19:32,100
end-users it actually might be

00:19:30,450 --> 00:19:34,020
transparent that they're even querying

00:19:32,100 --> 00:19:37,590
data from Postgres or even querying data

00:19:34,020 --> 00:19:41,520
from Oracle all they see is just its

00:19:37,590 --> 00:19:43,980
tables in presto so this can also solve

00:19:41,520 --> 00:19:45,870
so the data silo problem where you have

00:19:43,980 --> 00:19:47,580
to remember oh yeah for this data I have

00:19:45,870 --> 00:19:49,409
to go over here for this data I have to

00:19:47,580 --> 00:19:50,080
go over here now you can point your

00:19:49,409 --> 00:19:52,870
users are

00:19:50,080 --> 00:19:54,159
system that's presto kind of access all

00:19:52,870 --> 00:19:55,470
your data and that's that's one of the

00:19:54,159 --> 00:19:59,340
values that relational database

00:19:55,470 --> 00:20:01,419
connectors and for performance

00:19:59,340 --> 00:20:03,130
optimizations you can push filtering

00:20:01,419 --> 00:20:05,740
down so the example I gave earlier about

00:20:03,130 --> 00:20:08,200
a filtering on state columns you know

00:20:05,740 --> 00:20:12,519
you want only return the users that are

00:20:08,200 --> 00:20:14,440
from California you could pull all that

00:20:12,519 --> 00:20:16,840
data back into presto and Presta does

00:20:14,440 --> 00:20:19,750
the filtering but the more you're moving

00:20:16,840 --> 00:20:21,220
data across the system the the more time

00:20:19,750 --> 00:20:23,830
and effort it's going to take right so

00:20:21,220 --> 00:20:26,200
if you can eliminate data earlier in the

00:20:23,830 --> 00:20:29,919
processing pipeline then you're gonna

00:20:26,200 --> 00:20:36,549
get better performance so you can push

00:20:29,919 --> 00:20:39,820
down these filters to to the database to

00:20:36,549 --> 00:20:42,250
return middle amounts at a minimal

00:20:39,820 --> 00:20:45,149
amount of data and then finally there's

00:20:42,250 --> 00:20:48,510
non-relational data sources as well

00:20:45,149 --> 00:20:50,289
where there's a cumulative Cassandra

00:20:48,510 --> 00:20:56,500
elasticsearch is one that went in

00:20:50,289 --> 00:21:00,220
recently MongoDB Redis in the the

00:20:56,500 --> 00:21:01,779
community is constantly contributing

00:21:00,220 --> 00:21:05,260
connectors back so this list is only

00:21:01,779 --> 00:21:08,769
going to grow over time but if again if

00:21:05,260 --> 00:21:11,620
there isn't a data source that you want

00:21:08,769 --> 00:21:13,000
to query from you could always write

00:21:11,620 --> 00:21:16,769
your own connector and drop it in as a

00:21:13,000 --> 00:21:20,289
plugin and of course contribute it back

00:21:16,769 --> 00:21:24,389
so now that we have sort of a background

00:21:20,289 --> 00:21:29,289
of of presto I talked about presto and

00:21:24,389 --> 00:21:31,450
kubernetes now so again I went to

00:21:29,289 --> 00:21:37,090
another attendee poll who has heard of

00:21:31,450 --> 00:21:40,870
kubernetes way more hands cold and who

00:21:37,090 --> 00:21:42,279
has tried or or uses kubernetes okay

00:21:40,870 --> 00:21:45,039
less hands with still more handsome than

00:21:42,279 --> 00:21:46,240
the Presto question cool so we're gonna

00:21:45,039 --> 00:21:50,919
we're gonna talk about how these come

00:21:46,240 --> 00:21:52,809
together so it seems like most people

00:21:50,919 --> 00:21:54,580
know kubernetes here I do have some

00:21:52,809 --> 00:21:56,529
slides to kind of set this up but I

00:21:54,580 --> 00:21:57,700
might go a little bit I'll still go over

00:21:56,529 --> 00:21:59,440
them I could go over a little bit

00:21:57,700 --> 00:22:04,409
quicker since you see a lot of people

00:21:59,440 --> 00:22:04,409
have knowledge of it

00:22:04,840 --> 00:22:10,570
but yeah so Cumbres is a greek word when

00:22:07,990 --> 00:22:13,330
I looked it up I was like what is

00:22:10,570 --> 00:22:15,760
compared this word come from it's

00:22:13,330 --> 00:22:18,460
apparently a helmsman pilot navigator

00:22:15,760 --> 00:22:19,990
and finally you know after you know

00:22:18,460 --> 00:22:21,820
reading through the internet and it

00:22:19,990 --> 00:22:24,880
clicked on me that it's a container or

00:22:21,820 --> 00:22:28,000
penis orchestration right you have the

00:22:24,880 --> 00:22:29,680
helmsman of a container ship right so

00:22:28,000 --> 00:22:31,810
it's also of course an open-source

00:22:29,680 --> 00:22:33,910
container orchestration engine for

00:22:31,810 --> 00:22:36,570
automating deployment scaling and

00:22:33,910 --> 00:22:38,470
management of containerized applications

00:22:36,570 --> 00:22:40,090
so we're going to talk about how this

00:22:38,470 --> 00:22:41,950
relates to presto so how do we

00:22:40,090 --> 00:22:46,770
containerize presto so that I can work

00:22:41,950 --> 00:22:50,920
on kubernetes you may see in the slides

00:22:46,770 --> 00:22:53,350
k8s which is just shorthand for

00:22:50,920 --> 00:22:56,320
kubernetes because having written it a

00:22:53,350 --> 00:22:59,950
lot of times it actually becomes

00:22:56,320 --> 00:23:02,530
annoying okay it s is much easier to

00:22:59,950 --> 00:23:07,950
write so as I mention at the beginning

00:23:02,530 --> 00:23:12,190
of the talk you know we starburst

00:23:07,950 --> 00:23:15,850
partnered with Red Hat to provide a

00:23:12,190 --> 00:23:17,490
Cobra's operator and presto container on

00:23:15,850 --> 00:23:22,870
Red Hat OpenShift

00:23:17,490 --> 00:23:25,720
and so now you know go through the

00:23:22,870 --> 00:23:27,400
container Kelly you can you can use our

00:23:25,720 --> 00:23:29,340
operator and container and actually run

00:23:27,400 --> 00:23:33,330
Presta on your your career DS

00:23:29,340 --> 00:23:36,580
distribution reto openshift

00:23:33,330 --> 00:23:39,640
you know and why why is this important

00:23:36,580 --> 00:23:44,890
and and why you know why are we involved

00:23:39,640 --> 00:23:46,690
is as well and so so presto is an open

00:23:44,890 --> 00:23:49,840
source project we have a community

00:23:46,690 --> 00:23:52,030
edition this is the the free version you

00:23:49,840 --> 00:23:55,510
know that that you can get everything in

00:23:52,030 --> 00:23:57,160
open source and we if Starbucks we

00:23:55,510 --> 00:23:59,320
constantly will be patching it so you

00:23:57,160 --> 00:24:03,400
can get a very stable and tested version

00:23:59,320 --> 00:24:05,380
of it now if you're an enterprise

00:24:03,400 --> 00:24:07,690
organization this could be important

00:24:05,380 --> 00:24:10,840
because you can try you can try presto

00:24:07,690 --> 00:24:13,800
out you can use it in kubernetes but if

00:24:10,840 --> 00:24:16,019
you want those extra enterprise features

00:24:13,800 --> 00:24:18,759
or the

00:24:16,019 --> 00:24:21,969
the high touch support that we provide

00:24:18,759 --> 00:24:26,469
you could come to starburst and and get

00:24:21,969 --> 00:24:30,070
that initial features long-term support

00:24:26,469 --> 00:24:33,580
so not forcing you to do a major upgrade

00:24:30,070 --> 00:24:35,859
because some bug fixes in a much more

00:24:33,580 --> 00:24:39,399
recent patch right we'll do I'll patch

00:24:35,859 --> 00:24:42,669
back porting it and so on so so you can

00:24:39,399 --> 00:24:44,679
start out using you know the Community

00:24:42,669 --> 00:24:46,809
Edition but if you if you kind of need

00:24:44,679 --> 00:24:51,789
that extra enterprise taught you can

00:24:46,809 --> 00:24:55,089
come to starburst so you know briefly

00:24:51,789 --> 00:24:57,580
why kubernetes um I actually like this

00:24:55,089 --> 00:24:59,710
picture I did not draw it I i gave

00:24:57,580 --> 00:25:05,919
credit so but I got it from Korres

00:24:59,710 --> 00:25:08,019
website and you know so going back in a

00:25:05,919 --> 00:25:12,219
time machine right you just would run

00:25:08,019 --> 00:25:16,299
applications on just an operating system

00:25:12,219 --> 00:25:17,739
right red hat that you know is

00:25:16,299 --> 00:25:19,450
inefficient right you might have to over

00:25:17,739 --> 00:25:20,619
provision for resources or there's

00:25:19,450 --> 00:25:24,039
contention resources

00:25:20,619 --> 00:25:25,629
so then VM came out which which are

00:25:24,039 --> 00:25:28,299
better you get more efficient use to

00:25:25,629 --> 00:25:29,799
better utilization of your application

00:25:28,299 --> 00:25:31,419
you can isolate the application from

00:25:29,799 --> 00:25:33,099
each other but the really cool thing

00:25:31,419 --> 00:25:35,559
about containers is that you can it was

00:25:33,099 --> 00:25:37,479
like a lightweight VM where it's not

00:25:35,559 --> 00:25:39,099
packaging the operating system and all

00:25:37,479 --> 00:25:41,529
the libraries you need and in the

00:25:39,099 --> 00:25:43,989
application its packaging exactly what

00:25:41,529 --> 00:25:49,179
you need and it can run on top of the

00:25:43,989 --> 00:25:53,859
operating system so containers made kind

00:25:49,179 --> 00:25:56,499
of deploying applications really really

00:25:53,859 --> 00:25:58,629
beneficial but one thing is the

00:25:56,499 --> 00:26:01,839
complexity of maintaining these become

00:25:58,629 --> 00:26:03,940
became complicated so you know imagine

00:26:01,839 --> 00:26:05,349
feed an application has has many

00:26:03,940 --> 00:26:06,489
containers right how do you actually

00:26:05,349 --> 00:26:08,320
orchestrate them

00:26:06,489 --> 00:26:11,019
that's what kubernetes helps with us or

00:26:08,320 --> 00:26:15,489
the orchestration of it management of

00:26:11,019 --> 00:26:17,710
these containers you know so there's a

00:26:15,489 --> 00:26:22,389
brief concept the kameez cluster is made

00:26:17,710 --> 00:26:25,320
up of notes and you know kind of adding

00:26:22,389 --> 00:26:29,710
these these nodes to the to the cluster

00:26:25,320 --> 00:26:32,769
increases the CPU and memory available

00:26:29,710 --> 00:26:34,090
but the koomer a days they don't it

00:26:32,769 --> 00:26:36,700
doesn't actually run the containers

00:26:34,090 --> 00:26:38,740
where applications like presto runs it

00:26:36,700 --> 00:26:43,059
actually runs pods and these pods run

00:26:38,740 --> 00:26:47,860
containers so schema forward you know

00:26:43,059 --> 00:26:50,200
we've containerized presto to run within

00:26:47,860 --> 00:26:52,360
a career at his pod so if you remember

00:26:50,200 --> 00:26:55,149
the diagram from presto where you had a

00:26:52,360 --> 00:26:56,950
coordinator and workers coordinator

00:26:55,149 --> 00:26:59,139
could running in a pod and then we use

00:26:56,950 --> 00:27:03,820
what are known as replica sets to run

00:26:59,139 --> 00:27:05,379
the workers so you can you know as a pod

00:27:03,820 --> 00:27:07,509
becomes more popular or has more demand

00:27:05,379 --> 00:27:10,059
you can configure it so that you can

00:27:07,509 --> 00:27:11,559
auto scale the amount of pods and

00:27:10,059 --> 00:27:17,500
therefore the amount of Presta workers

00:27:11,559 --> 00:27:20,129
to do that to the system so you know

00:27:17,500 --> 00:27:22,389
let's take a look at what starburst

00:27:20,129 --> 00:27:26,230
christo on criminais x' architecture

00:27:22,389 --> 00:27:27,549
actually looks like so we we have what

00:27:26,230 --> 00:27:29,710
is known as an operator which I have a

00:27:27,549 --> 00:27:33,399
slide in a minute to kind of describe

00:27:29,710 --> 00:27:35,620
exactly what that is then we have the

00:27:33,399 --> 00:27:39,220
Presto coordinator in a pod as well as

00:27:35,620 --> 00:27:42,250
the Presta workers on the pod we also

00:27:39,220 --> 00:27:43,899
provide the hive meta store service so

00:27:42,250 --> 00:27:46,690
if you remember from a few slides ago I

00:27:43,899 --> 00:27:49,450
was describing how if you're querying

00:27:46,690 --> 00:27:51,580
from distributed file storage there is

00:27:49,450 --> 00:27:54,009
no catalog you have to have a catalog

00:27:51,580 --> 00:27:56,409
that tells presto what are the table

00:27:54,009 --> 00:28:01,149
names what are the column types and so

00:27:56,409 --> 00:28:03,850
on so if you want to query from just

00:28:01,149 --> 00:28:05,289
your bid storage will provide that

00:28:03,850 --> 00:28:07,360
catalog for you so you don't have to

00:28:05,289 --> 00:28:08,649
provide it on your own and then finally

00:28:07,360 --> 00:28:10,690
we work with the into the Horus

00:28:08,649 --> 00:28:12,700
horizontal pod autoscaler so that you

00:28:10,690 --> 00:28:15,789
can scale up and down your your presto

00:28:12,700 --> 00:28:18,519
worker notes so again like the really

00:28:15,789 --> 00:28:22,029
cool thing about kubernetes is its

00:28:18,519 --> 00:28:23,620
platform agnostic you you could run it

00:28:22,029 --> 00:28:26,230
on RedHat but if we have the certified

00:28:23,620 --> 00:28:28,750
operator for it but if you happen to be

00:28:26,230 --> 00:28:33,039
running on on Azure or Google Cloud or

00:28:28,750 --> 00:28:35,320
endless on Web Services you can move the

00:28:33,039 --> 00:28:36,909
application to and from there right so

00:28:35,320 --> 00:28:38,740
if you're on Google Cloud you want to

00:28:36,909 --> 00:28:40,269
move it onto OpenShift

00:28:38,740 --> 00:28:41,990
you can do that you don't really have to

00:28:40,269 --> 00:28:45,280
reconfigure much kind of

00:28:41,990 --> 00:28:48,760
the the hybrid cloud a multi cloud

00:28:45,280 --> 00:28:54,710
whether you know public or private

00:28:48,760 --> 00:28:56,840
really transferable so so you typically

00:28:54,710 --> 00:28:59,140
don't just launch the pod rickland the

00:28:56,840 --> 00:29:01,660
cluster use this abstraction called

00:28:59,140 --> 00:29:04,070
deployments where you kind of declare

00:29:01,660 --> 00:29:06,410
the layout of how you want press to work

00:29:04,070 --> 00:29:10,340
and that's what we we have to help

00:29:06,410 --> 00:29:13,220
deploy presto on kubernetes so remember

00:29:10,340 --> 00:29:15,320
what I mentioned earlier that sequel was

00:29:13,220 --> 00:29:17,660
declarative we're kind of defining the

00:29:15,320 --> 00:29:20,000
results you want and then it it figures

00:29:17,660 --> 00:29:22,070
out how to get the results I think of

00:29:20,000 --> 00:29:24,410
kubernetes is declarative where you're

00:29:22,070 --> 00:29:26,059
just kind of describing exactly what you

00:29:24,410 --> 00:29:27,860
want and kubernetes handles the

00:29:26,059 --> 00:29:30,890
management of how to do that how to

00:29:27,860 --> 00:29:32,690
deploy containers if a container goes

00:29:30,890 --> 00:29:37,580
down how to bring it back up so it's

00:29:32,690 --> 00:29:43,820
kind of self-healing and so chris eats

00:29:37,580 --> 00:29:47,570
the burden of complexity of this so

00:29:43,820 --> 00:29:49,520
going back to you know to here i want to

00:29:47,570 --> 00:29:51,440
talk about the the crudités operator

00:29:49,520 --> 00:29:56,870
which is sort of the the key to how we

00:29:51,440 --> 00:29:58,580
have presto working on kubernetes so as

00:29:56,870 --> 00:30:00,200
mentioned this is non-trivial you know

00:29:58,580 --> 00:30:03,590
to deploy a non-trivial application on

00:30:00,200 --> 00:30:05,510
top of kubernetes is is hard especially

00:30:03,590 --> 00:30:08,870
if it's like a stateful application

00:30:05,510 --> 00:30:11,900
right you know prior to this you'd have

00:30:08,870 --> 00:30:14,020
to somehow manage all the bootstrapping

00:30:11,900 --> 00:30:16,250
of complexity and lifecycle management

00:30:14,020 --> 00:30:20,150
failure recovery all these different

00:30:16,250 --> 00:30:22,280
scenarios on kubernetes so this OP this

00:30:20,150 --> 00:30:25,160
concept of an operator is meant to kind

00:30:22,280 --> 00:30:29,059
of encapsulate this this level of

00:30:25,160 --> 00:30:32,000
abstraction and so you can kind of focus

00:30:29,059 --> 00:30:33,260
on the logic of what you want to do and

00:30:32,000 --> 00:30:36,730
it reduces the complexity and

00:30:33,260 --> 00:30:39,950
boilerplate code you might do throughout

00:30:36,730 --> 00:30:41,780
so you know this is sort of a pattern

00:30:39,950 --> 00:30:44,090
for for building kubernetes native

00:30:41,780 --> 00:30:46,010
application it runs as a container and

00:30:44,090 --> 00:30:52,030
so we did is taking the operator

00:30:46,010 --> 00:30:52,030
framework we built a a Presta operator

00:30:55,490 --> 00:31:01,140
so the operator does a few a lot of

00:30:59,640 --> 00:31:03,210
things but the four kind of main things

00:31:01,140 --> 00:31:05,940
that are unique to - presto that are

00:31:03,210 --> 00:31:08,820
worth mentioning is auto configuration

00:31:05,940 --> 00:31:10,440
of the presto cluster I know I didn't

00:31:08,820 --> 00:31:14,430
see a lot of hands raised about whose

00:31:10,440 --> 00:31:17,640
use presto but you could imagine with a

00:31:14,430 --> 00:31:19,320
distributed system like presto

00:31:17,640 --> 00:31:20,400
it's pretty hard to configure you have

00:31:19,320 --> 00:31:23,100
to tell the workers where the

00:31:20,400 --> 00:31:26,550
coordinator is you have to specify how

00:31:23,100 --> 00:31:29,220
much memory to give it how much you know

00:31:26,550 --> 00:31:32,730
what thread count is for the CPU

00:31:29,220 --> 00:31:34,050
utilization configuration of where to

00:31:32,730 --> 00:31:36,150
get the data you have to tell presto

00:31:34,050 --> 00:31:39,470
where the data is so there's like a lot

00:31:36,150 --> 00:31:43,560
of tweaks and knobs you have to do but

00:31:39,470 --> 00:31:45,000
you know we can look at the system you

00:31:43,560 --> 00:31:48,450
know the CPU available the memory

00:31:45,000 --> 00:31:50,550
available and and do a basic auto

00:31:48,450 --> 00:31:52,890
configuration of presto to kind of get

00:31:50,550 --> 00:31:54,090
that that base configuration done for

00:31:52,890 --> 00:31:57,870
presto so you don't have to worry about

00:31:54,090 --> 00:31:59,670
that also the coordinator high

00:31:57,870 --> 00:32:03,630
availability so if the coordinator

00:31:59,670 --> 00:32:05,100
becomes unresponsive if you remember

00:32:03,630 --> 00:32:07,860
from the diagram I said there's one

00:32:05,100 --> 00:32:10,260
coordinator and any number of workers so

00:32:07,860 --> 00:32:12,060
if a worker goes down it's really not a

00:32:10,260 --> 00:32:14,340
big deal because you just have one less

00:32:12,060 --> 00:32:16,910
worker now of course a lot of them went

00:32:14,340 --> 00:32:19,290
down then the the performs gets slower

00:32:16,910 --> 00:32:22,260
but if the coordinator ever goes down

00:32:19,290 --> 00:32:24,360
that's a single point of failure which

00:32:22,260 --> 00:32:27,360
means your system becomes interoperable

00:32:24,360 --> 00:32:29,340
and so the real cool thing about Cooper

00:32:27,360 --> 00:32:31,740
is it helps here is if the coordinator

00:32:29,340 --> 00:32:33,480
goes down it will just bring up another

00:32:31,740 --> 00:32:35,370
one in a different pot as long as

00:32:33,480 --> 00:32:38,640
there's availability on the kumaras

00:32:35,370 --> 00:32:41,040
cluster of course we configure the

00:32:38,640 --> 00:32:44,070
worker auto-scaling so based on cpu

00:32:41,040 --> 00:32:46,650
utilization for example you can start

00:32:44,070 --> 00:32:49,040
adding more workers so long as there's

00:32:46,650 --> 00:32:52,500
availability on the community's cluster

00:32:49,040 --> 00:32:55,590
and then finally there's this notion we

00:32:52,500 --> 00:32:58,370
call graceful scale down so what happens

00:32:55,590 --> 00:33:03,000
is when you issue a presto sequel query

00:32:58,370 --> 00:33:04,570
the all the workers are processing the

00:33:03,000 --> 00:33:07,000
data so let's just

00:33:04,570 --> 00:33:09,850
say the the man on your your cluster has

00:33:07,000 --> 00:33:12,130
gone down the presto workers may still

00:33:09,850 --> 00:33:14,200
be processing a query maybe not as many

00:33:12,130 --> 00:33:18,639
queries but still processing the query

00:33:14,200 --> 00:33:20,470
nonetheless so you don't want to pause

00:33:18,639 --> 00:33:21,759
the cluster while you scale it down and

00:33:20,470 --> 00:33:23,470
you certainly don't want to remove a

00:33:21,759 --> 00:33:25,539
worker while it's processing a query

00:33:23,470 --> 00:33:28,090
because that would ultimately fail the

00:33:25,539 --> 00:33:30,340
query um so what we have this notion of

00:33:28,090 --> 00:33:32,200
a graceful scale down where when we

00:33:30,340 --> 00:33:35,679
determine okay we're gonna go from a

00:33:32,200 --> 00:33:37,600
hundred nodes to twenty-five nodes we

00:33:35,679 --> 00:33:40,179
may mark 75 of those nodes

00:33:37,600 --> 00:33:42,129
let's help presto hey don't take any new

00:33:40,179 --> 00:33:45,490
work finish up what you're doing and

00:33:42,129 --> 00:33:48,460
when you're done doing shutdown so what

00:33:45,490 --> 00:33:49,750
that does is any new queries come in

00:33:48,460 --> 00:33:52,389
they're only gonna be running on the 25

00:33:49,750 --> 00:33:54,720
nodes and one the other 75 nodes finish

00:33:52,389 --> 00:33:57,759
up what we're doing they'll shut down

00:33:54,720 --> 00:34:01,600
other things that will you know be

00:33:57,759 --> 00:34:04,990
working on you know some some degree of

00:34:01,600 --> 00:34:07,659
operator metering this is another and

00:34:04,990 --> 00:34:10,329
it's important in the enterprise our per

00:34:07,659 --> 00:34:12,069
se is they want to know usage report or

00:34:10,329 --> 00:34:14,790
even to tag users to see how much

00:34:12,069 --> 00:34:17,859
resources they're using on the system

00:34:14,790 --> 00:34:19,300
there's a variety of reasons that they

00:34:17,859 --> 00:34:23,500
may want to do this one could be charge

00:34:19,300 --> 00:34:30,819
backs if an organization or the the IT

00:34:23,500 --> 00:34:34,270
organization departments based on the

00:34:30,819 --> 00:34:40,329
usage or as simple as just knowing how

00:34:34,270 --> 00:34:41,919
much they're using it you know there are

00:34:40,329 --> 00:34:44,889
a variety components

00:34:41,919 --> 00:34:47,770
first there's the Presto queries custom

00:34:44,889 --> 00:34:51,909
resource definition this will redefine

00:34:47,770 --> 00:34:53,379
the resource of a presto type in

00:34:51,909 --> 00:34:56,139
instance like when you instantiate

00:34:53,379 --> 00:35:00,069
assistance that represents a presto

00:34:56,139 --> 00:35:02,050
cluster on kubernetes there's the presto

00:35:00,069 --> 00:35:04,480
operators continually monitors the

00:35:02,050 --> 00:35:09,160
kubernetes resources and it will create

00:35:04,480 --> 00:35:12,160
in remove approach to resource when

00:35:09,160 --> 00:35:15,940
asked for so coordinator a worker and so

00:35:12,160 --> 00:35:18,080
on I think we've covered what a quarter

00:35:15,940 --> 00:35:19,820
and worker do but again the court

00:35:18,080 --> 00:35:22,280
the the central pointed responsible for

00:35:19,820 --> 00:35:24,050
issue and the queries in employment

00:35:22,280 --> 00:35:27,490
queries and the presto workers are

00:35:24,050 --> 00:35:27,490
actually doing the query processing

00:35:27,830 --> 00:35:32,030
there's the QWERTY of services where we

00:35:29,470 --> 00:35:34,160
expose an external IP so you can

00:35:32,030 --> 00:35:36,980
actually connect to the Presto

00:35:34,160 --> 00:35:42,200
coordinator to actually issue queries on

00:35:36,980 --> 00:35:44,510
the system we have a network policy is

00:35:42,200 --> 00:35:46,820
really for secure the security that

00:35:44,510 --> 00:35:48,230
allows the inbound traffic to the postal

00:35:46,820 --> 00:35:50,270
workers from the from the postal

00:35:48,230 --> 00:35:52,430
coordinator i'm the meta store which i

00:35:50,270 --> 00:35:53,900
spoke about this is for if you're using

00:35:52,430 --> 00:35:55,610
distributed file stores that doesn't

00:35:53,900 --> 00:35:57,700
naturally have the catalog you can keep

00:35:55,610 --> 00:36:00,950
it in the medicine or that we provide

00:35:57,700 --> 00:36:02,390
and then now if you want to ever if you

00:36:00,950 --> 00:36:04,040
want to persist if using there should be

00:36:02,390 --> 00:36:08,390
two file storage and you want to persist

00:36:04,040 --> 00:36:12,230
your table names climbs column types it

00:36:08,390 --> 00:36:15,050
would be wise to have a database that's

00:36:12,230 --> 00:36:18,890
backing this whether it's Postgres or my

00:36:15,050 --> 00:36:21,320
sequel um so you can connect to one that

00:36:18,890 --> 00:36:23,720
you can access outside the the cluster

00:36:21,320 --> 00:36:25,880
or if you just kind of want to get up

00:36:23,720 --> 00:36:28,820
and running fast and try it out we do

00:36:25,880 --> 00:36:31,070
have this notion of an internal post

00:36:28,820 --> 00:36:33,620
gross it just runs on kubernetes but its

00:36:31,070 --> 00:36:35,480
life cycle starts and stops with the

00:36:33,620 --> 00:36:39,890
presto cluster so it's really only for

00:36:35,480 --> 00:36:45,230
kind of demonstration purposes it lasts

00:36:39,890 --> 00:36:49,760
as simple you know we can with a few

00:36:45,230 --> 00:36:52,370
commands you can you can deploy and I do

00:36:49,760 --> 00:36:56,260
it's one out in the next five minutes I

00:36:52,370 --> 00:36:56,260
can demo this

00:36:59,119 --> 00:37:04,210
oh you don't see me scream

00:37:07,309 --> 00:37:12,880
all right I have to look here okay cool

00:37:10,669 --> 00:37:12,880
so

00:37:20,800 --> 00:37:29,560
sorry it's a little hard trying to see

00:37:24,370 --> 00:37:33,010
my screen here alright alright so first

00:37:29,560 --> 00:37:37,390
of all um we'll use let's make sure

00:37:33,010 --> 00:37:40,660
there's nothing there oh yeah of course

00:37:37,390 --> 00:37:41,230
I already have it running so let me

00:37:40,660 --> 00:37:52,690
delete it

00:37:41,230 --> 00:37:55,290
oh yeah sure yeah get this deleted first

00:37:52,690 --> 00:37:55,290
and I'll work on that

00:38:00,780 --> 00:38:03,530
okay

00:38:09,260 --> 00:38:12,550
I don't like it huh

00:38:14,550 --> 00:38:24,960
that get bigger can you see that now is

00:38:16,800 --> 00:38:28,080
that good in the back bigger said even

00:38:24,960 --> 00:38:31,590
get is it getting bigger yeah that is

00:38:28,080 --> 00:38:39,330
getting big okay is that good in the

00:38:31,590 --> 00:38:40,860
back all right cool all right so for for

00:38:39,330 --> 00:38:43,350
time purposes I'm not going to tear down

00:38:40,860 --> 00:38:49,369
and bring up the operator but there's an

00:38:43,350 --> 00:38:52,920
operator running so we do is I have this

00:38:49,369 --> 00:38:54,270
yellow file that defines what we wanted

00:38:52,920 --> 00:39:01,410
to play for pressed I can show that in a

00:38:54,270 --> 00:39:03,119
moment to and now we've created it you

00:39:01,410 --> 00:39:05,570
see if I can bring that example over

00:39:03,119 --> 00:39:05,570
here too

00:39:09,800 --> 00:39:15,500
it looks something like this you know

00:39:13,910 --> 00:39:17,540
it's we're not going to go through it

00:39:15,500 --> 00:39:19,960
all today but you know you can say okay

00:39:17,540 --> 00:39:23,420
use Prometheus as the monitoring tool

00:39:19,960 --> 00:39:27,740
you specify you know the type of CPU you

00:39:23,420 --> 00:39:31,160
want for the coordinator workers I'm

00:39:27,740 --> 00:39:34,970
choosing nine workers in this case and

00:39:31,160 --> 00:39:36,830
so on so I'm not gonna go through all

00:39:34,970 --> 00:39:43,670
today but that's sort of how you how you

00:39:36,830 --> 00:39:44,570
define it now so if we do get pons again

00:39:43,670 --> 00:39:46,790
all right you'll see there's a bunch

00:39:44,570 --> 00:39:59,710
running now and now we want to do is I'm

00:39:46,790 --> 00:40:05,200
going to view expose right so we are

00:39:59,710 --> 00:40:09,640
setting up the IP for external minister

00:40:05,200 --> 00:40:09,640
it takes a few seconds

00:40:26,800 --> 00:40:32,200
so in a student observer will see that

00:40:30,190 --> 00:40:34,600
they're only eight workers running yes

00:40:32,200 --> 00:40:41,020
because the kubernetes cluster it wasn't

00:40:34,600 --> 00:40:43,120
big enough okay

00:40:41,020 --> 00:40:45,040
well anyways well that's starting up let

00:40:43,120 --> 00:40:49,570
me just go back to the the final slides

00:40:45,040 --> 00:40:51,940
here so if you want to customize the the

00:40:49,570 --> 00:40:55,480
solution um we do have one was a

00:40:51,940 --> 00:40:57,340
bootstrap script so if you want to set

00:40:55,480 --> 00:41:00,640
up security or download additional

00:40:57,340 --> 00:41:02,050
software you can or of course for more

00:41:00,640 --> 00:41:04,510
heavy customization let's say you want

00:41:02,050 --> 00:41:06,850
to install additional software on there

00:41:04,510 --> 00:41:09,880
or do something else you can use a

00:41:06,850 --> 00:41:13,000
custom docker image you just pull from

00:41:09,880 --> 00:41:15,490
the one we have and then you build your

00:41:13,000 --> 00:41:22,660
own and then you can specify it in the

00:41:15,490 --> 00:41:26,260
configuration so you can you can join

00:41:22,660 --> 00:41:28,630
the community as mailing list

00:41:26,260 --> 00:41:32,430
they're just development slack github

00:41:28,630 --> 00:41:36,190
you can follow on Twitter as well

00:41:32,430 --> 00:41:38,440
and then we at starburst we we have a

00:41:36,190 --> 00:41:40,480
monthly newsletter so to highly

00:41:38,440 --> 00:41:41,860
encourage you to sign up for that if you

00:41:40,480 --> 00:41:43,330
want to learn more about presto or just

00:41:41,860 --> 00:41:44,860
kind of seeing what's going on in the

00:41:43,330 --> 00:41:49,450
community

00:41:44,860 --> 00:41:50,890
Preston use events how to we just kind

00:41:49,450 --> 00:41:54,550
of aggregate it all and put it in your

00:41:50,890 --> 00:41:59,290
in your inbox and of course you know

00:41:54,550 --> 00:42:01,230
contributors welcome so if you want to

00:41:59,290 --> 00:42:03,670
learn more about sort of the vision and

00:42:01,230 --> 00:42:06,760
development philosophy contribution

00:42:03,670 --> 00:42:09,100
process to presto you can you can go to

00:42:06,760 --> 00:42:12,130
press the sequel dot IO and and learn

00:42:09,100 --> 00:42:18,580
about that all right let's go back real

00:42:12,130 --> 00:42:20,200
quick to demo here I realize I have only

00:42:18,580 --> 00:42:22,380
a couple minutes but I think we can do

00:42:20,200 --> 00:42:22,380
this

00:42:26,099 --> 00:42:40,690
did I copy that all sit highlighted I'll

00:42:32,830 --> 00:42:44,280
figure it out I get it here didn't work

00:42:40,690 --> 00:42:49,810
oh I see

00:42:44,280 --> 00:43:02,260
it's hard for me to see that's straining

00:42:49,810 --> 00:43:08,020
here didn't like that huh I'll write it

00:43:02,260 --> 00:43:10,660
in manually that's 30 4.70 3 da is at

00:43:08,020 --> 00:43:13,650
2:30 yeah

00:43:10,660 --> 00:43:13,650
1:30

00:43:19,750 --> 00:43:27,330
all right so here we are presses running

00:43:24,099 --> 00:43:32,560
nine okay

00:43:27,330 --> 00:43:36,430
okay yeah yeah sure so anyways yeah

00:43:32,560 --> 00:43:39,130
that's post Oh running nine worker nodes

00:43:36,430 --> 00:43:41,560
on a queries cluster and I'm told I'm

00:43:39,130 --> 00:43:44,190
short on time so I can definitely take

00:43:41,560 --> 00:43:44,190
some questions

00:43:44,230 --> 00:43:52,060
I guess one final piece or plug of

00:43:49,570 --> 00:43:55,800
course is at starburst we're hiring so

00:43:52,060 --> 00:44:05,470
if anyone here is interested reach out

00:43:55,800 --> 00:44:07,480
well I take some questions a quick

00:44:05,470 --> 00:44:09,430
question is presto have a reduced like

00:44:07,480 --> 00:44:10,690
sequel language that you have to use

00:44:09,430 --> 00:44:13,740
because it supports so many different

00:44:10,690 --> 00:44:16,690
things yeah it's a great question um so

00:44:13,740 --> 00:44:19,750
no actually presto follows the Siebel

00:44:16,690 --> 00:44:22,300
standard quite close so the reason for

00:44:19,750 --> 00:44:24,190
that is so you can use your your

00:44:22,300 --> 00:44:25,660
favorite BI tools or a sequel developer

00:44:24,190 --> 00:44:29,140
tool so they all kind of work seamlessly

00:44:25,660 --> 00:44:31,839
with those so the Presto connector will

00:44:29,140 --> 00:44:33,700
handle any sort of nuances or

00:44:31,839 --> 00:44:36,220
translations to the underlying data

00:44:33,700 --> 00:44:38,770
sources so you use standard sequel but

00:44:36,220 --> 00:44:41,140
if there's some my sequel or Postgres

00:44:38,770 --> 00:44:43,300
nuance presto for the connector figures

00:44:41,140 --> 00:44:47,619
out that kind of translation a good

00:44:43,300 --> 00:44:50,109
question so you mentioned that presto is

00:44:47,619 --> 00:44:52,150
not doing any storage but is there a way

00:44:50,109 --> 00:44:54,099
to set up any sort of caching mechanism

00:44:52,150 --> 00:44:59,440
to improve like query timing or anything

00:44:54,099 --> 00:45:01,560
yeah yeah great question um so there's a

00:44:59,440 --> 00:45:06,220
open source project called the lock Co

00:45:01,560 --> 00:45:09,210
and you can essentially just deploy it

00:45:06,220 --> 00:45:13,270
with presto so that's really good for

00:45:09,210 --> 00:45:15,550
cloud storage or sort of like hybrid of

00:45:13,270 --> 00:45:17,859
multi-cloud scenarios where the data

00:45:15,550 --> 00:45:19,950
isn't necessarily close to you or you

00:45:17,859 --> 00:45:23,410
have to go over the network and reach it

00:45:19,950 --> 00:45:25,240
so it is a variety of caching algorithms

00:45:23,410 --> 00:45:27,820
it uses and based on your workload you

00:45:25,240 --> 00:45:30,400
can choose which one you want but so if

00:45:27,820 --> 00:45:31,900
you if you issue queries and the data

00:45:30,400 --> 00:45:35,859
becomes hot then some

00:45:31,900 --> 00:45:37,329
good query as well we'll speed up and we

00:45:35,859 --> 00:45:40,150
are actually a partner with them as well

00:45:37,329 --> 00:45:42,339
so if if one is looking to deploy both

00:45:40,150 --> 00:45:48,880
we we offer starburst with caching which

00:45:42,339 --> 00:45:51,130
is essentially that this presto use any

00:45:48,880 --> 00:45:53,230
any integration we do scheduler on

00:45:51,130 --> 00:45:56,109
kubernetes to schedule better the

00:45:53,230 --> 00:45:59,619
workers based on load and the execution

00:45:56,109 --> 00:46:04,029
plan or something um press to itself

00:45:59,619 --> 00:46:08,500
does not natively integrate with the

00:46:04,029 --> 00:46:10,450
scheduler but I would like to talk more

00:46:08,500 --> 00:46:13,299
about with that if you off a fly maybe

00:46:10,450 --> 00:46:15,720
after the chat I'd be interested know

00:46:13,299 --> 00:46:15,720
what you had in mind

00:46:22,799 --> 00:46:28,359
probably the last one I'm imagining just

00:46:26,439 --> 00:46:30,670
a quick question you mentioned JDBC as a

00:46:28,359 --> 00:46:34,959
connector tool for for some of these

00:46:30,670 --> 00:46:37,749
data stores are there any shortcomings

00:46:34,959 --> 00:46:40,539
in using JDBC are there benefits for

00:46:37,749 --> 00:46:43,329
faster access and yeah that's a great

00:46:40,539 --> 00:46:46,150
question so so JDBC really isn't meant

00:46:43,329 --> 00:46:47,890
to be a big data pipe right it's of

00:46:46,150 --> 00:46:50,619
course the easiest way to write a

00:46:47,890 --> 00:46:55,179
connector to a data source because it's

00:46:50,619 --> 00:46:57,189
a standard interface but so some of the

00:46:55,179 --> 00:47:00,400
proprietary connectors that we have at

00:46:57,189 --> 00:47:04,859
starburst we what I say is like a native

00:47:00,400 --> 00:47:07,299
direct connection so for example our

00:47:04,859 --> 00:47:10,089
teradata connector we have actually

00:47:07,299 --> 00:47:13,630
connect directly to the amps we bypass

00:47:10,089 --> 00:47:15,219
JDBC entirely so the amps if you're

00:47:13,630 --> 00:47:17,829
familiar with Tara data I'm sure people

00:47:15,219 --> 00:47:19,359
are here or not but the amps will then

00:47:17,829 --> 00:47:20,859
be pushing the data depressed us we do

00:47:19,359 --> 00:47:23,769
in a completely parallel way instead of

00:47:20,859 --> 00:47:25,719
a single pipe way as well and we're

00:47:23,769 --> 00:47:28,769
doing that with snowflake as well our

00:47:25,719 --> 00:47:30,670
snowflake connector but great question I

00:47:28,769 --> 00:47:38,229
think we're out of time but thanks

00:47:30,670 --> 00:47:40,059
everyone for coming to the talk and I'll

00:47:38,229 --> 00:47:41,469
be mulling around I guess out there

00:47:40,059 --> 00:47:44,069
later if anyone has any additional

00:47:41,469 --> 00:47:44,069

YouTube URL: https://www.youtube.com/watch?v=73VZaP3Mh-M


