Title: A Journey through the Fedora CoreOS Boot Process
Publication date: 2019-10-02
Playlist: DevConfUS 2019
Description: 
	Speaker: Andrew Jeddeloh

The Fedora CoreOS boot process is key to supporting some of its more interesting features. This talk walks through the Fedora CoreOS boot process from the bootloader up to running a container. It discusses how atomic updates and automatic rollback work under the hood via its GRUB configuration, how Ignition is used to configure the system in the initramfs, how Afterburn applies per-boot configuration such as networking, and how greenboot determines if the boot is successful.
Captions: 
	00:00:02,550 --> 00:00:08,160
so I I'm Andrew and today I'm going to

00:00:06,000 --> 00:00:10,260
be talking about the your 4 OS boot

00:00:08,160 --> 00:00:11,789
process and I call this a journey

00:00:10,260 --> 00:00:13,559
through time and space because we're

00:00:11,789 --> 00:00:16,590
going to be walking through both from

00:00:13,559 --> 00:00:18,810
the start of when you boot to up to a

00:00:16,590 --> 00:00:21,090
running system but also we're going to

00:00:18,810 --> 00:00:23,250
be walking through we're in the disk

00:00:21,090 --> 00:00:29,220
image we actually like pull various bits

00:00:23,250 --> 00:00:32,750
of the process from so a little bit

00:00:29,220 --> 00:00:35,910
about me I used to work for the company

00:00:32,750 --> 00:00:39,000
and I Sarah worked on mostly container

00:00:35,910 --> 00:00:41,850
Linux ignition and the Fedora core OS

00:00:39,000 --> 00:00:44,220
config transpiler and then we got

00:00:41,850 --> 00:00:46,440
acquired by Red Hat and now I work in

00:00:44,220 --> 00:00:50,100
addition to maintaining container Linux

00:00:46,440 --> 00:00:52,829
also on the Fedora core OS equivalents

00:00:50,100 --> 00:00:56,100
that's Fedora core OS also stow ignition

00:00:52,829 --> 00:01:00,120
and FCC T which is the Fedora core OS

00:00:56,100 --> 00:01:02,430
config transpiler and recently I've been

00:01:00,120 --> 00:01:03,780
working a lot on setting up how we do

00:01:02,430 --> 00:01:08,039
our boot luring and so that's what I'm

00:01:03,780 --> 00:01:10,409
going to talk about today so in this

00:01:08,039 --> 00:01:13,139
talk we're going to walk through the

00:01:10,409 --> 00:01:14,039
boot process and as an example we're

00:01:13,139 --> 00:01:17,909
gonna walk through the boot process

00:01:14,039 --> 00:01:21,209
where we configure a the slash bar to be

00:01:17,909 --> 00:01:23,069
on a separate partition and we'll set

00:01:21,209 --> 00:01:26,700
the system be mount unit to mount that

00:01:23,069 --> 00:01:28,289
on every group and on Fedora core OS the

00:01:26,700 --> 00:01:30,479
first boot is where we do all of our

00:01:28,289 --> 00:01:31,889
configurations so booting and

00:01:30,479 --> 00:01:37,349
configuration are inherently tied

00:01:31,889 --> 00:01:40,349
together so a quick note this does not

00:01:37,349 --> 00:01:42,209
apply to rel core or less the boot

00:01:40,349 --> 00:01:44,340
process for fedora floor or less and rel

00:01:42,209 --> 00:01:46,829
for us are very similar but they are not

00:01:44,340 --> 00:01:51,419
the same so do not take this talk as

00:01:46,829 --> 00:01:52,919
applying 100% to rope or or less and

00:01:51,419 --> 00:01:55,259
start off by going over a little

00:01:52,919 --> 00:01:57,599
background about Fedora core OS if you

00:01:55,259 --> 00:01:59,689
are at Benjamin and Jonathan's talk

00:01:57,599 --> 00:02:02,819
yesterday that'll be entirely review

00:01:59,689 --> 00:02:05,159
talk a little bit about ignition OS tree

00:02:02,819 --> 00:02:07,190
and then before getting into how the

00:02:05,159 --> 00:02:10,560
door for OS boots I'll talk some about

00:02:07,190 --> 00:02:12,640
what a like normal 1x boot process looks

00:02:10,560 --> 00:02:14,200
like for comparison

00:02:12,640 --> 00:02:16,450
then when we actually get into how

00:02:14,200 --> 00:02:20,380
Fedora 4os boots and Paul talked about

00:02:16,450 --> 00:02:22,840
how drug gets loaded what's actually in

00:02:20,380 --> 00:02:24,970
that rub config and then the meat of the

00:02:22,840 --> 00:02:26,260
talk is about what goes on in the inner

00:02:24,970 --> 00:02:29,519
Rama fest because that's where we do all

00:02:26,260 --> 00:02:32,650
our configuration and then finally like

00:02:29,519 --> 00:02:34,120
what goes on in the real root and what's

00:02:32,650 --> 00:02:37,599
different on the first boot first the

00:02:34,120 --> 00:02:40,390
subsequent boots and then what we still

00:02:37,599 --> 00:02:44,110
have yet to implement for the process

00:02:40,390 --> 00:02:46,799
and where we get help there so more or

00:02:44,110 --> 00:02:51,130
less this is like super high level

00:02:46,799 --> 00:02:53,950
basics it came out of container Linux

00:02:51,130 --> 00:02:55,360
and tonic host and it's only for running

00:02:53,950 --> 00:02:58,180
containers don't try to use it as a

00:02:55,360 --> 00:03:01,000
desktop OS it's not designed for that

00:02:58,180 --> 00:03:04,660
it's it follows the like immutable

00:03:01,000 --> 00:03:06,910
infrastructure idea where you set it up

00:03:04,660 --> 00:03:09,370
on first boot you do all of your

00:03:06,910 --> 00:03:10,930
provisioning and then if you want you

00:03:09,370 --> 00:03:13,349
should instead reprovision with that

00:03:10,930 --> 00:03:16,320
change so all of your configuration is

00:03:13,349 --> 00:03:19,109
set up once and then you don't touch it

00:03:16,320 --> 00:03:22,030
it has automatic updates that are atomic

00:03:19,109 --> 00:03:23,560
so because you're running everything in

00:03:22,030 --> 00:03:25,150
containers you shouldn't really care as

00:03:23,560 --> 00:03:26,440
much what's on the host so we should be

00:03:25,150 --> 00:03:31,200
able to update that without breaking

00:03:26,440 --> 00:03:34,359
your workload it uses OS tree for

00:03:31,200 --> 00:03:36,130
handling these atomic updates and eases

00:03:34,359 --> 00:03:37,569
ignition for the configuration we'll

00:03:36,130 --> 00:03:41,440
talk a little bit more about both of

00:03:37,569 --> 00:03:44,350
those and then finally it's set up so

00:03:41,440 --> 00:03:48,100
that your install is just a DD to disk

00:03:44,350 --> 00:03:51,790
and then injection of a config into your

00:03:48,100 --> 00:03:54,280
boot partition and the advantage of this

00:03:51,790 --> 00:03:57,250
is it makes your bare metal case exactly

00:03:54,280 --> 00:03:58,810
like your cloud cases so on clouds

00:03:57,250 --> 00:04:00,639
you'll get instead of injecting your

00:03:58,810 --> 00:04:04,180
configuration into boot you'll grab it

00:04:00,639 --> 00:04:05,709
from like your ec2 metadata endpoint but

00:04:04,180 --> 00:04:10,239
in both cases you're starting with the

00:04:05,709 --> 00:04:12,609
same image and the boot process is the

00:04:10,239 --> 00:04:14,920
same your configuration is the same and

00:04:12,609 --> 00:04:17,370
so there's nothing special about a bare

00:04:14,920 --> 00:04:21,910
metal in that case

00:04:17,370 --> 00:04:26,050
so this is a diagram of a fedora or less

00:04:21,910 --> 00:04:31,150
disc this is the same on clouds and bare

00:04:26,050 --> 00:04:32,140
metal it's eight gigs in size and don't

00:04:31,150 --> 00:04:33,760
worry if this is a little overwhelming

00:04:32,140 --> 00:04:37,060
will return to this I've walked through

00:04:33,760 --> 00:04:40,420
everything in it you basically have it's

00:04:37,060 --> 00:04:43,380
a GPT disk you have your MBR and if you

00:04:40,420 --> 00:04:47,620
have a GPT disk all your MBR says is

00:04:43,380 --> 00:04:49,860
there's one partition and it's GPT then

00:04:47,620 --> 00:04:52,950
you have your actual GPT partition table

00:04:49,860 --> 00:04:57,820
and on this disk we have four partitions

00:04:52,950 --> 00:05:01,120
we have boot your boots efi or the efi

00:04:57,820 --> 00:05:03,910
system partition a bios boot which is

00:05:01,120 --> 00:05:07,390
just used to hold grub or when you're

00:05:03,910 --> 00:05:10,120
doing Bugan on BIOS and then root where

00:05:07,390 --> 00:05:12,040
all of your actual content is and then

00:05:10,120 --> 00:05:15,960
finally at the end of the disk there's a

00:05:12,040 --> 00:05:20,680
GPT packet header and unlike MBR GPT has

00:05:15,960 --> 00:05:22,360
a backup so in case your initial GPT

00:05:20,680 --> 00:05:24,040
header gets corrupted or deleted or

00:05:22,360 --> 00:05:27,720
something you can recover your partition

00:05:24,040 --> 00:05:30,850
table and it's worth calling out that

00:05:27,720 --> 00:05:33,910
normally on a UEFI booting system you'll

00:05:30,850 --> 00:05:37,210
have things like your kernel and a tram

00:05:33,910 --> 00:05:39,850
FS & grub config and your efi system

00:05:37,210 --> 00:05:42,760
partition that is not the case on Fedora

00:05:39,850 --> 00:05:45,070
core OS the only things in our efi

00:05:42,760 --> 00:05:48,070
system partition are your efi

00:05:45,070 --> 00:05:53,920
executables and a small shim broke

00:05:48,070 --> 00:05:56,500
config so let's talk about OS tree for a

00:05:53,920 --> 00:05:58,450
second it's tagline is kind of like get

00:05:56,500 --> 00:06:00,670
for your operating system so the idea is

00:05:58,450 --> 00:06:04,150
you have commit objects that you can

00:06:00,670 --> 00:06:06,580
deploy it lets you do atomic rollback

00:06:04,150 --> 00:06:09,910
and unlike container linux where you had

00:06:06,580 --> 00:06:13,000
a AV partitioning scheme os true uses

00:06:09,910 --> 00:06:14,950
hard links so in a given deployment you

00:06:13,000 --> 00:06:16,810
all of your files are hard links into

00:06:14,950 --> 00:06:19,420
the repo so you get sharing between

00:06:16,810 --> 00:06:22,240
deployments and that means you don't

00:06:19,420 --> 00:06:26,410
need twice as much space for having two

00:06:22,240 --> 00:06:27,700
very similar deployments and each of

00:06:26,410 --> 00:06:28,650
those deployments are basically just

00:06:27,700 --> 00:06:34,320
like a

00:06:28,650 --> 00:06:36,960
it commits checkout so if you look at

00:06:34,320 --> 00:06:39,479
like what's actually in an OS treat disk

00:06:36,960 --> 00:06:41,030
this is like if you were to just pop the

00:06:39,479 --> 00:06:44,130
disk out of your computer and mount it

00:06:41,030 --> 00:06:45,690
we have a directory for boot and that's

00:06:44,130 --> 00:06:48,630
actually not used by OS tree it's just a

00:06:45,690 --> 00:06:52,530
convenient mount point to have and then

00:06:48,630 --> 00:06:54,449
everything is under /os tree there's a

00:06:52,530 --> 00:06:57,810
repo directory and you can think of that

00:06:54,449 --> 00:07:01,620
kind of like your get directory where it

00:06:57,810 --> 00:07:04,680
has all of the actual objects and then

00:07:01,620 --> 00:07:08,610
you have deploy and that's where you

00:07:04,680 --> 00:07:10,320
check out those commits to OS tree

00:07:08,610 --> 00:07:12,360
supports actually installing multiple of

00:07:10,320 --> 00:07:15,330
us is at the same time on Fedora

00:07:12,360 --> 00:07:17,190
choristers just one so this like OS name

00:07:15,330 --> 00:07:20,220
would be just fedora more or less and

00:07:17,190 --> 00:07:22,139
then in there you have you know multiple

00:07:20,220 --> 00:07:23,699
deployments in that case in this case

00:07:22,139 --> 00:07:26,070
it's hash one and hash two those are

00:07:23,699 --> 00:07:30,150
like full jaws but those don't fit on a

00:07:26,070 --> 00:07:31,800
slide very well so and in each of those

00:07:30,150 --> 00:07:34,650
that's where you'll find your normal

00:07:31,800 --> 00:07:39,000
like slash user slash at see that it

00:07:34,650 --> 00:07:42,240
looks like a normal like Oh Linux root

00:07:39,000 --> 00:07:44,280
and then because when you do like an

00:07:42,240 --> 00:07:46,919
update you don't want delete all of our

00:07:44,280 --> 00:07:51,210
like you want to a carry state between

00:07:46,919 --> 00:07:55,400
updates within an OS the bar is shared

00:07:51,210 --> 00:07:59,610
and as you'll see in the next slide that

00:07:55,400 --> 00:08:01,789
that will get mounted to the correct

00:07:59,610 --> 00:08:05,310
place on boot

00:08:01,789 --> 00:08:08,000
so this is what a running OS tree

00:08:05,310 --> 00:08:11,909
systems important mount it's look like

00:08:08,000 --> 00:08:17,130
you can see that your root is mounted to

00:08:11,909 --> 00:08:19,110
that deployment and that you'll notice

00:08:17,130 --> 00:08:20,669
that user is also has a special mount

00:08:19,110 --> 00:08:23,820
and that's so that we can mount the user

00:08:20,669 --> 00:08:25,889
read-only this is to prevent people from

00:08:23,820 --> 00:08:28,620
making changes to the system because

00:08:25,889 --> 00:08:34,229
it's an immutable OS you can see that

00:08:28,620 --> 00:08:35,830
bar is mounted to the OSS far directory

00:08:34,229 --> 00:08:38,260
and

00:08:35,830 --> 00:08:40,030
couple other amounts here the boot and

00:08:38,260 --> 00:08:42,280
boot via fire normal mountain fights

00:08:40,030 --> 00:08:44,230
like you'd expect on other systems and

00:08:42,280 --> 00:08:45,880
then there's also this mountain point

00:08:44,230 --> 00:08:48,490
sis route and that's kind of escape

00:08:45,880 --> 00:08:50,590
hatch back to the root of the actual

00:08:48,490 --> 00:08:52,480
block device so when you do something

00:08:50,590 --> 00:08:55,270
like doing a new deployment you actually

00:08:52,480 --> 00:09:01,300
need to access by a repo and so you do

00:08:55,270 --> 00:09:04,420
it 3ds this route and finally you want

00:09:01,300 --> 00:09:08,550
all of our state in bar and so all of

00:09:04,420 --> 00:09:11,620
your directories like home or opt or

00:09:08,550 --> 00:09:13,480
serve where you like find state normally

00:09:11,620 --> 00:09:16,990
are all symlinks into corresponding

00:09:13,480 --> 00:09:19,630
directories in bar and so this means

00:09:16,990 --> 00:09:25,980
everything that changes on your OS goes

00:09:19,630 --> 00:09:28,630
in bar so let's talk about ignition now

00:09:25,980 --> 00:09:31,390
ignition is how we do all of our machine

00:09:28,630 --> 00:09:35,020
configuration it configures machines

00:09:31,390 --> 00:09:37,600
using a Jason config it's a declarative

00:09:35,020 --> 00:09:40,690
configuration so instead of saying like

00:09:37,600 --> 00:09:42,520
I want to do like partition it then

00:09:40,690 --> 00:09:45,760
create a file system then create files

00:09:42,520 --> 00:09:46,270
on it you say I want this partition to

00:09:45,760 --> 00:09:47,980
exist

00:09:46,270 --> 00:09:51,820
I want this file system on it and I want

00:09:47,980 --> 00:09:53,890
these files to exist on that file system

00:09:51,820 --> 00:09:58,270
and it's designed to run in the inner

00:09:53,890 --> 00:09:59,770
gram of s so the inner Rama fess is very

00:09:58,270 --> 00:10:02,500
early in the boot process before you

00:09:59,770 --> 00:10:03,810
founded anything and so because nothing

00:10:02,500 --> 00:10:05,950
is mounted we can do things like

00:10:03,810 --> 00:10:07,480
repartition the disk you're using that

00:10:05,950 --> 00:10:11,830
you normally wouldn't be able to do on a

00:10:07,480 --> 00:10:13,120
running system and it'll handle things

00:10:11,830 --> 00:10:15,100
that are traditionally handled by like

00:10:13,120 --> 00:10:17,740
an installer so things like partitioning

00:10:15,100 --> 00:10:19,480
creating file systems but as well as

00:10:17,740 --> 00:10:21,940
also like things that would normally be

00:10:19,480 --> 00:10:24,460
handed by configuration software like

00:10:21,940 --> 00:10:26,410
cloud net so things like creating user

00:10:24,460 --> 00:10:30,100
is creating files setting up system D

00:10:26,410 --> 00:10:31,780
and it's that kind of thing and because

00:10:30,100 --> 00:10:34,450
we have this unified disk image and

00:10:31,780 --> 00:10:35,980
because it runs in the intagram of s

00:10:34,450 --> 00:10:38,290
that means that all of your

00:10:35,980 --> 00:10:39,960
configuration on clouds and on bare

00:10:38,290 --> 00:10:41,160
metal can be the same

00:10:39,960 --> 00:10:42,330
depending on what you're setting up you

00:10:41,160 --> 00:10:48,779
might even be able to use the exact same

00:10:42,330 --> 00:10:51,870
config the configs themselves are not

00:10:48,779 --> 00:10:55,320
easy to handwrite they're a JSON file

00:10:51,870 --> 00:10:58,020
and like things like inline files get

00:10:55,320 --> 00:10:59,880
base64 encoded and so we have a tool

00:10:58,020 --> 00:11:02,010
called the Fedora core OS config

00:10:59,880 --> 00:11:04,410
transpiler that takes a human readable

00:11:02,010 --> 00:11:07,800
format that has sugar for common actions

00:11:04,410 --> 00:11:11,040
and transpose that into your JSON

00:11:07,800 --> 00:11:12,480
configuration file it runs in four

00:11:11,040 --> 00:11:15,240
stages and we'll get into more of this

00:11:12,480 --> 00:11:17,850
later via the disk stage that handles

00:11:15,240 --> 00:11:19,860
your typical like installer type tasks

00:11:17,850 --> 00:11:22,399
of partitioning creating file systems

00:11:19,860 --> 00:11:26,250
that's a mount stage for setting up

00:11:22,399 --> 00:11:28,410
mount points that the file stage uses to

00:11:26,250 --> 00:11:30,660
do all your configuration and then an

00:11:28,410 --> 00:11:33,570
unmount stage to tear down what it did

00:11:30,660 --> 00:11:34,890
in the math stage and finally actually

00:11:33,570 --> 00:11:37,800
lied earlier there's actually two

00:11:34,890 --> 00:11:40,170
configuration files one is what we call

00:11:37,800 --> 00:11:43,589
the base config and that is all of your

00:11:40,170 --> 00:11:45,540
like OS and vendor configurations so on

00:11:43,589 --> 00:11:47,670
Fedora core OS there's a default user

00:11:45,540 --> 00:11:50,250
called core and that's actually not

00:11:47,670 --> 00:11:53,190
shipped in the OS image but instead in

00:11:50,250 --> 00:11:55,380
the base config and so the base config

00:11:53,190 --> 00:11:58,380
says that this user should be created or

00:11:55,380 --> 00:12:00,450
should exist rather and then the user

00:11:58,380 --> 00:12:05,070
config is actually that you specify it's

00:12:00,450 --> 00:12:10,310
merged into that config so this is an

00:12:05,070 --> 00:12:10,310
example of a fedora core OS config yes

00:12:21,470 --> 00:12:28,040
the so it's only happens on first boot

00:12:24,500 --> 00:12:33,620
so there is nothing to roll back to

00:12:28,040 --> 00:12:36,800
beyond that this is a example Fedora 4s

00:12:33,620 --> 00:12:38,600
config in this case when FC CT runs on

00:12:36,800 --> 00:12:40,400
it it'll actually just generate an

00:12:38,600 --> 00:12:44,570
equivalent Jason config there's nothing

00:12:40,400 --> 00:12:48,650
magic happening it specifies that on

00:12:44,570 --> 00:12:51,260
device dev slash PDA there should be a

00:12:48,650 --> 00:12:55,130
partition with purchased number five

00:12:51,260 --> 00:12:57,770
labeled far the certain size zero are

00:12:55,130 --> 00:13:00,290
special keywords basically saying find

00:12:57,770 --> 00:13:04,820
the largest available block of space and

00:13:00,290 --> 00:13:07,520
use it it says there should be a file

00:13:04,820 --> 00:13:10,130
system labeled bar that exists on that

00:13:07,520 --> 00:13:13,820
partition and it should be formatted as

00:13:10,130 --> 00:13:16,700
XFS and when ignition files runs we

00:13:13,820 --> 00:13:18,290
should mount that at slash more and then

00:13:16,700 --> 00:13:21,110
finally there's a system D unit that

00:13:18,290 --> 00:13:24,020
will get put in the real route that says

00:13:21,110 --> 00:13:25,760
that should be mounted this is the

00:13:24,020 --> 00:13:29,990
ignition config it's the same thing just

00:13:25,760 --> 00:13:33,290
as JSON so then I'm gonna talk super

00:13:29,990 --> 00:13:36,050
briefly about how normal Linux booting

00:13:33,290 --> 00:13:38,420
works so in the simplest case you have

00:13:36,050 --> 00:13:40,730
no integrand with us your firmware loads

00:13:38,420 --> 00:13:43,160
your bootloader like rub-rub load your

00:13:40,730 --> 00:13:45,560
kernel and there's a kernel command-line

00:13:43,160 --> 00:13:47,750
argument called root that just says what

00:13:45,560 --> 00:13:51,320
device should be mounted as your root

00:13:47,750 --> 00:13:54,800
and let's mount that there and then

00:13:51,320 --> 00:13:56,960
exact s bin slash in it as your Padawan

00:13:54,800 --> 00:14:00,290
and typically that's like system you

00:13:56,960 --> 00:14:02,810
know but there's a problem with that of

00:14:00,290 --> 00:14:05,570
like what if I'm using Lux or what if

00:14:02,810 --> 00:14:09,080
I'm using raid and I can't just mount a

00:14:05,570 --> 00:14:11,600
device as read so that's where the unit

00:14:09,080 --> 00:14:13,460
Rama fest comes in and the idea there is

00:14:11,600 --> 00:14:18,740
you basically take a file system tree

00:14:13,460 --> 00:14:20,600
and bundle it with your perl and instead

00:14:18,740 --> 00:14:24,530
of directly mounting your

00:14:20,600 --> 00:14:27,500
argument you're the colonel we'll unpack

00:14:24,530 --> 00:14:29,330
that and mount that as root and then

00:14:27,500 --> 00:14:31,250
that will set up whatever it needs to do

00:14:29,330 --> 00:14:34,130
to get your actual root filesystem

00:14:31,250 --> 00:14:36,620
available mounted that typically slash

00:14:34,130 --> 00:14:38,240
sister root and then switch root into

00:14:36,620 --> 00:14:40,220
that and that's Richard operation you

00:14:38,240 --> 00:14:42,650
can think of us basically just a chroot

00:14:40,220 --> 00:14:44,390
and exec and that's not that for can

00:14:42,650 --> 00:14:48,350
exact that's your actual just exact so

00:14:44,390 --> 00:14:55,610
the new slash bin slash and it replaces

00:14:48,350 --> 00:14:57,230
the original so nor core or less is a

00:14:55,610 --> 00:14:59,390
little bit more complicated because we

00:14:57,230 --> 00:15:01,790
do all of our configuration also need a

00:14:59,390 --> 00:15:04,130
gram of s so that's everything in bold

00:15:01,790 --> 00:15:05,420
here is in the immigrant fest so you

00:15:04,130 --> 00:15:06,560
still have you know your firm lawyer

00:15:05,420 --> 00:15:08,830
loading your boot loader your boot

00:15:06,560 --> 00:15:11,900
loader loading your kernel and a pram FS

00:15:08,830 --> 00:15:14,540
but now we need to do a lot more so

00:15:11,900 --> 00:15:15,950
first ignitions only runs on first boot

00:15:14,540 --> 00:15:19,960
so we need to figure out if this is

00:15:15,950 --> 00:15:22,280
first boot or not and if it is we to

00:15:19,960 --> 00:15:25,090
partition and format disks with the

00:15:22,280 --> 00:15:28,070
ignition then we need to find route

00:15:25,090 --> 00:15:32,030
mount that have OS trees set up all of

00:15:28,070 --> 00:15:33,620
its mounts and mount any other file

00:15:32,030 --> 00:15:37,940
systems like in our example we're not

00:15:33,620 --> 00:15:41,060
also setting up a mount for bar and on

00:15:37,940 --> 00:15:43,460
OS tree systems var is unpopulated by

00:15:41,060 --> 00:15:45,590
default it's just empty and before we

00:15:43,460 --> 00:15:46,970
running the all of our configuration we

00:15:45,590 --> 00:15:50,240
want to make sure that we're configuring

00:15:46,970 --> 00:15:52,180
things on top of what the base system

00:15:50,240 --> 00:15:54,440
looks like so we need to populate bar

00:15:52,180 --> 00:15:55,880
then we can do all of our configuration

00:15:54,440 --> 00:15:59,990
with the ignition like creating users

00:15:55,880 --> 00:16:02,510
files file files system D units and then

00:15:59,990 --> 00:16:04,730
we need to tear everything back down so

00:16:02,510 --> 00:16:06,410
where we just have the roof mounted

00:16:04,730 --> 00:16:09,080
because we don't want the first move to

00:16:06,410 --> 00:16:10,670
be different you can imagine if a boo

00:16:09,080 --> 00:16:14,090
only worked because we left something

00:16:10,670 --> 00:16:15,920
mountain betting ignition mounted then

00:16:14,090 --> 00:16:17,300
when we go to reboot we're gonna run

00:16:15,920 --> 00:16:19,490
into an issue where it worked the first

00:16:17,300 --> 00:16:22,250
time didn't work in a second so we want

00:16:19,490 --> 00:16:24,770
to avoid that and then we do our normal

00:16:22,250 --> 00:16:26,060
switch room and then you're running in

00:16:24,770 --> 00:16:30,350
the raillery you can start off your

00:16:26,060 --> 00:16:32,210
system D services normally so let's talk

00:16:30,350 --> 00:16:34,940
about how we

00:16:32,210 --> 00:16:37,910
grub on itis if you know there's nothing

00:16:34,940 --> 00:16:44,110
special about this it's a standard scoop

00:16:37,910 --> 00:16:47,540
loading the BIOS will load the first

00:16:44,110 --> 00:16:49,610
sector of your disk and start executing

00:16:47,540 --> 00:16:53,540
that so that's the scrum bootstrap and

00:16:49,610 --> 00:16:56,450
you only have 446 bytes to work with

00:16:53,540 --> 00:16:58,459
there so all it does is just load the

00:16:56,450 --> 00:17:00,860
rest of the ground code which is in the

00:16:58,459 --> 00:17:02,990
BIOS boot partition over there and that

00:17:00,860 --> 00:17:07,040
wrote loads grub and then grub is

00:17:02,990 --> 00:17:10,189
configured to load your grub config from

00:17:07,040 --> 00:17:12,380
slash boot and so that's that broken

00:17:10,189 --> 00:17:15,829
Fignon read and I'll show you that a

00:17:12,380 --> 00:17:20,870
little bit later also in slash boot we

00:17:15,829 --> 00:17:23,750
have obviously our actual kernel and it

00:17:20,870 --> 00:17:25,689
Rama fesses but we're also using the

00:17:23,750 --> 00:17:28,339
bootloader specification so instead of

00:17:25,689 --> 00:17:30,200
the grub config defining all of the

00:17:28,339 --> 00:17:33,050
entries in your menu those are all

00:17:30,200 --> 00:17:36,980
defined by bootloader snippets which are

00:17:33,050 --> 00:17:38,929
all of these entry count files and so

00:17:36,980 --> 00:17:40,550
they typically look like this it's a

00:17:38,929 --> 00:17:42,470
pretty simple format you have a title

00:17:40,550 --> 00:17:45,500
that should be displayed paths to your

00:17:42,470 --> 00:17:48,110
inner amethyst and kernel and then all

00:17:45,500 --> 00:17:50,510
of your kernel options and by using this

00:17:48,110 --> 00:17:53,110
we can actually get rid of the need to

00:17:50,510 --> 00:17:55,280
ship like from mate config and

00:17:53,110 --> 00:17:57,559
regenerate the grub config every boot

00:17:55,280 --> 00:18:03,350
enables us to have a static proto config

00:17:57,559 --> 00:18:05,179
we don't need to change and the grub and

00:18:03,350 --> 00:18:07,400
it's meant to be a bootloader

00:18:05,179 --> 00:18:10,580
independent specification so brother has

00:18:07,400 --> 00:18:13,760
an implementation of it and all it does

00:18:10,580 --> 00:18:16,580
is look in /boot slash loader or slash

00:18:13,760 --> 00:18:21,080
entries and create menu entries for all

00:18:16,580 --> 00:18:25,850
the things to find there so if we look

00:18:21,080 --> 00:18:27,590
at the kernel options we use there's a

00:18:25,850 --> 00:18:29,960
standard route option that says like

00:18:27,590 --> 00:18:31,760
what our final route should be and then

00:18:29,960 --> 00:18:34,130
there's this dollar sign ignition first

00:18:31,760 --> 00:18:36,080
boot so that's actually a grub variable

00:18:34,130 --> 00:18:38,600
that will get expanded and I'll show

00:18:36,080 --> 00:18:40,460
that works in a sec there's a platform

00:18:38,600 --> 00:18:43,140
ID so this is taken from a key new image

00:18:40,460 --> 00:18:45,180
and this just tells ignition like hey

00:18:43,140 --> 00:18:46,530
you're running on chemo like you should

00:18:45,180 --> 00:18:49,230
affects your config using the chemo

00:18:46,530 --> 00:18:51,120
method and then there's this OS treating

00:18:49,230 --> 00:18:53,340
parameter that's that half is actually a

00:18:51,120 --> 00:18:58,980
symlink that points to where the actual

00:18:53,340 --> 00:19:02,790
OS tree deployment is so this is our

00:18:58,980 --> 00:19:05,550
grub config the first two lines I just

00:19:02,790 --> 00:19:09,240
find the boot partition and set that to

00:19:05,550 --> 00:19:11,610
both the boot and root variables the

00:19:09,240 --> 00:19:14,160
root variable is used in the next

00:19:11,610 --> 00:19:16,890
section there where it says if the file

00:19:14,160 --> 00:19:19,530
exists slash ignition dot first boot

00:19:16,890 --> 00:19:21,570
that is relative to the root variable so

00:19:19,530 --> 00:19:23,970
that's on a running system that would be

00:19:21,570 --> 00:19:26,430
/boot slash ignition but first boot and

00:19:23,970 --> 00:19:28,740
that's just a file that says this is the

00:19:26,430 --> 00:19:30,270
first boot and at the very end of our

00:19:28,740 --> 00:19:33,990
boot process we'll delete it so there

00:19:30,270 --> 00:19:35,940
will only happen on first boot and if

00:19:33,990 --> 00:19:38,010
that file exists we set that variable

00:19:35,940 --> 00:19:40,980
that was included in our kernel command

00:19:38,010 --> 00:19:42,540
line to say this is the first boot also

00:19:40,980 --> 00:19:47,160
need to turn on network hang which is

00:19:42,540 --> 00:19:49,350
this Rd need net and IP equals DHCP and

00:19:47,160 --> 00:19:51,570
then finally this last one be be OS

00:19:49,350 --> 00:19:53,400
config says go and read all of those

00:19:51,570 --> 00:19:56,520
config files and generate the menu

00:19:53,400 --> 00:20:01,320
entries and that one uses this boot

00:19:56,520 --> 00:20:04,550
variable that we also defined earlier so

00:20:01,320 --> 00:20:07,530
on UEFI things are a little bit simpler

00:20:04,550 --> 00:20:11,370
UEFI knows how to find the efi system

00:20:07,530 --> 00:20:13,980
partition and if you don't have any like

00:20:11,370 --> 00:20:18,210
efi configuration setup it will fall

00:20:13,980 --> 00:20:21,480
back to loading this boot x64 efi and

00:20:18,210 --> 00:20:23,400
that is our secure secure v chip so that

00:20:21,480 --> 00:20:25,920
assigned secure boot can load it and

00:20:23,400 --> 00:20:29,310
then that will in turn load the grub

00:20:25,920 --> 00:20:33,300
executable which will read this grub can

00:20:29,310 --> 00:20:35,910
config file and that grub config is just

00:20:33,300 --> 00:20:37,770
a shim that loads the same one that the

00:20:35,910 --> 00:20:42,000
bios loads so we share the same grove

00:20:37,770 --> 00:20:44,100
config between UEFI and bios the grub

00:20:42,000 --> 00:20:46,140
prefix variable is a special variable

00:20:44,100 --> 00:20:49,530
that says like this is where I expect to

00:20:46,140 --> 00:20:51,260
find like my goal my config and when you

00:20:49,530 --> 00:20:56,360
switch to normal mode that get simplest

00:20:51,260 --> 00:21:00,710
good so BIOS and UEFI are basically the

00:20:56,360 --> 00:21:03,070
same path so now that we've got the

00:21:00,710 --> 00:21:06,050
kernel loaded and would intagram efest

00:21:03,070 --> 00:21:07,850
now we get into the meat of things and

00:21:06,050 --> 00:21:10,310
this is everything the inner amethyst

00:21:07,850 --> 00:21:12,710
needs to do the things in red are things

00:21:10,310 --> 00:21:15,530
that happen every boot and everything

00:21:12,710 --> 00:21:17,570
else is things that happen just on the

00:21:15,530 --> 00:21:19,310
first boot so we need a way of deciding

00:21:17,570 --> 00:21:20,870
if it's the first boot and conveniently

00:21:19,310 --> 00:21:22,490
we have a kernel command line parameter

00:21:20,870 --> 00:21:25,490
that brought past us which tells us if

00:21:22,490 --> 00:21:27,140
it's the first food or not we need to do

00:21:25,490 --> 00:21:28,820
anything we need to do pair to run

00:21:27,140 --> 00:21:31,430
ignition disks to do a lower

00:21:28,820 --> 00:21:34,250
partitioning and filesystem creation we

00:21:31,430 --> 00:21:37,220
need to run it we need to mount the root

00:21:34,250 --> 00:21:39,770
device and set up all of the mounts we

00:21:37,220 --> 00:21:42,230
also need to mount bar on a normal mood

00:21:39,770 --> 00:21:44,030
that would happen in the real root but

00:21:42,230 --> 00:21:45,470
since we need to populate at meet about

00:21:44,030 --> 00:21:48,680
it in the intagram of vests on first

00:21:45,470 --> 00:21:50,120
boot then we need to mount any file

00:21:48,680 --> 00:21:52,040
system if we defined in our ignition

00:21:50,120 --> 00:21:54,470
config we need to populate

00:21:52,040 --> 00:21:56,330
bar dö all all of our configuration and

00:21:54,470 --> 00:22:00,080
then tear everything back down and

00:21:56,330 --> 00:22:03,710
switch root so if you look at the man

00:22:00,080 --> 00:22:07,030
page from system v4 boot up there's a

00:22:03,710 --> 00:22:09,680
bunch of studi targets and mount points

00:22:07,030 --> 00:22:11,450
there's some basic initialization that

00:22:09,680 --> 00:22:14,600
happens and once that's completed you've

00:22:11,450 --> 00:22:17,150
reached basic target then there's a

00:22:14,600 --> 00:22:21,500
target for saying I have found the

00:22:17,150 --> 00:22:23,390
device that you said was root there's a

00:22:21,500 --> 00:22:27,620
mount unit to mount it to slash this

00:22:23,390 --> 00:22:29,870
root there's a target for saying okay so

00:22:27,620 --> 00:22:31,550
I've mounted it and now it's ready as a

00:22:29,870 --> 00:22:34,400
normal Linux file system so this will

00:22:31,550 --> 00:22:36,740
happen after we've done the OS tree

00:22:34,400 --> 00:22:38,540
prepare root and fixed all of the mount

00:22:36,740 --> 00:22:42,110
points to look like a normal Linux file

00:22:38,540 --> 00:22:44,240
system these two in grey are not used by

00:22:42,110 --> 00:22:50,300
Fedora core or less so you can basically

00:22:44,240 --> 00:22:52,250
ignore them there's this init RDFS about

00:22:50,300 --> 00:22:54,050
target is for any other file systems

00:22:52,250 --> 00:22:55,460
that you might need to mount so if you

00:22:54,050 --> 00:22:56,960
were on a system that had like a

00:22:55,460 --> 00:22:58,190
separate user and need to have to be

00:22:56,960 --> 00:23:00,740
mounted before you switch through -

00:22:58,190 --> 00:23:01,410
that's where that would come in and then

00:23:00,740 --> 00:23:04,080
in

00:23:01,410 --> 00:23:05,970
target says I've done all of my Anna

00:23:04,080 --> 00:23:09,870
manifest configuration I'm ready to do

00:23:05,970 --> 00:23:12,270
the switch route so this is what that

00:23:09,870 --> 00:23:13,980
looks like and everything on the right

00:23:12,270 --> 00:23:18,060
is the stuff that only happens on first

00:23:13,980 --> 00:23:21,390
boot and so we have a system D generator

00:23:18,060 --> 00:23:23,640
and system D generators run before you

00:23:21,390 --> 00:23:26,030
start any units and they can do things

00:23:23,640 --> 00:23:29,460
like create units create dependencies

00:23:26,030 --> 00:23:32,040
between units and things like that so we

00:23:29,460 --> 00:23:34,140
use that to pull in all of these units

00:23:32,040 --> 00:23:38,730
on the right if that Colonel command

00:23:34,140 --> 00:23:43,040
line option is set so and if you kind of

00:23:38,730 --> 00:23:45,600
break this down into groups of units the

00:23:43,040 --> 00:23:47,490
Kouros GPT set up and that chunk up

00:23:45,600 --> 00:23:51,630
there is all stuff to prepare to run

00:23:47,490 --> 00:23:55,320
ignition disks this section here with

00:23:51,630 --> 00:23:58,650
the unit Rd root device is all of the

00:23:55,320 --> 00:24:01,800
stuff to set up your root of s and then

00:23:58,650 --> 00:24:06,150
the stuff over there is the stuff to

00:24:01,800 --> 00:24:08,340
populate bar and configure it and then

00:24:06,150 --> 00:24:10,350
finally once you've done all of that all

00:24:08,340 --> 00:24:14,430
ready to switch root and what we'll get

00:24:10,350 --> 00:24:16,290
back to this side too so what needs to

00:24:14,430 --> 00:24:20,820
happen for ignition disks well we need a

00:24:16,290 --> 00:24:22,380
disc that has a valid GPT partition

00:24:20,820 --> 00:24:24,720
layout and we actually don't have that

00:24:22,380 --> 00:24:28,740
by default and I'll get into that just a

00:24:24,720 --> 00:24:31,080
sec we need to find our base config and

00:24:28,740 --> 00:24:32,790
we need to find our user config so if

00:24:31,080 --> 00:24:34,080
you're on a cloud these are configure

00:24:32,790 --> 00:24:35,910
actually won't exist you're getting it

00:24:34,080 --> 00:24:37,440
from a cloud metadata service but it can

00:24:35,910 --> 00:24:38,820
start installed the bare metal you need

00:24:37,440 --> 00:24:42,060
to go grab that off of your boot

00:24:38,820 --> 00:24:43,650
partition and then finally since

00:24:42,060 --> 00:24:47,190
ignition can do things like fetch file

00:24:43,650 --> 00:24:52,740
over network we need networking up so

00:24:47,190 --> 00:24:53,970
the GPT is invalid by default because it

00:24:52,740 --> 00:24:56,430
has a disk UI

00:24:53,970 --> 00:24:58,110
UUID which is a unique identifier and

00:24:56,430 --> 00:24:59,460
since your D being the same damage

00:24:58,110 --> 00:25:02,970
everywhere it's not going to be unique

00:24:59,460 --> 00:25:05,610
so we need to scramble that and the

00:25:02,970 --> 00:25:07,650
backup header should be at the end of

00:25:05,610 --> 00:25:08,260
the disk and since you just feed an 8

00:25:07,650 --> 00:25:10,600
gigabyte

00:25:08,260 --> 00:25:12,940
it's not at the end of the disk it's 8 8

00:25:10,600 --> 00:25:14,500
gigabytes in and so we can fix both of

00:25:12,940 --> 00:25:18,820
those with an S to disk command so

00:25:14,500 --> 00:25:21,399
that's all this unit does the ignition

00:25:18,820 --> 00:25:24,639
setup just copies some files around so

00:25:21,399 --> 00:25:26,740
it uses that platform ID that you saw in

00:25:24,639 --> 00:25:28,419
the kernel command-line arguments

00:25:26,740 --> 00:25:29,889
earlier to determine what platform

00:25:28,419 --> 00:25:33,010
you're on and grab the correct basic

00:25:29,889 --> 00:25:36,250
config for that and then it also will

00:25:33,010 --> 00:25:38,110
mount boot grab a user configure if it

00:25:36,250 --> 00:25:39,789
exists and then copy it to that path and

00:25:38,110 --> 00:25:44,799
that's where ignition will read these

00:25:39,789 --> 00:25:47,019
from and then finally for networking

00:25:44,799 --> 00:25:49,620
we just used rackets legacy networking

00:25:47,019 --> 00:25:52,179
we want to move away from that and use

00:25:49,620 --> 00:25:54,669
network manager that will enable us to

00:25:52,179 --> 00:25:57,100
not need these Rd mean that an IP

00:25:54,669 --> 00:25:58,809
criminal command line parameters because

00:25:57,100 --> 00:26:03,010
we can pull a network manager just as

00:25:58,809 --> 00:26:04,899
another unit in our graph but we can

00:26:03,010 --> 00:26:06,130
just use the network targets so when you

00:26:04,899 --> 00:26:07,210
switch to network manager we won't

00:26:06,130 --> 00:26:11,679
actually have to change those

00:26:07,210 --> 00:26:14,260
dependencies so now we're ready to run

00:26:11,679 --> 00:26:16,480
ignition disks and this is the section

00:26:14,260 --> 00:26:19,510
of our config that ignition disk cares

00:26:16,480 --> 00:26:21,279
about so it'll go through and do our

00:26:19,510 --> 00:26:24,070
partitioning and then create the file

00:26:21,279 --> 00:26:26,080
system the other thing that we'll do is

00:26:24,070 --> 00:26:28,559
it'll actually fetch both that configs

00:26:26,080 --> 00:26:30,850
the base config and the user config

00:26:28,559 --> 00:26:33,190
merge them together and catch them to

00:26:30,850 --> 00:26:34,450
disk so that all of the future ignition

00:26:33,190 --> 00:26:38,769
stages don't need to go through that

00:26:34,450 --> 00:26:40,720
process so this is where we are in our

00:26:38,769 --> 00:26:45,789
boot process we've done all of our setup

00:26:40,720 --> 00:26:47,139
to run ignition disks and we also the

00:26:45,789 --> 00:26:49,690
root device has been available at this

00:26:47,139 --> 00:26:53,260
whole time so that's also all ready so

00:26:49,690 --> 00:26:56,710
now we can do our mounting we can set up

00:26:53,260 --> 00:27:01,840
all the mounts for OS tree and then

00:26:56,710 --> 00:27:03,429
start populating the bar so this roof

00:27:01,840 --> 00:27:06,580
mount is a normal mount unit it just

00:27:03,429 --> 00:27:08,980
counts the device this is generated from

00:27:06,580 --> 00:27:11,070
a another systemd generator that reads

00:27:08,980 --> 00:27:13,510
that route kernel command line parameter

00:27:11,070 --> 00:27:17,500
and generates the mount unit

00:27:13,510 --> 00:27:21,960
do that oh it's true prepare we've got

00:27:17,500 --> 00:27:25,240
service this is what a West tree does to

00:27:21,960 --> 00:27:27,520
fix all of those mounts so that when you

00:27:25,240 --> 00:27:29,530
look at slash the street you don't see

00:27:27,520 --> 00:27:31,900
like boot and OS tree but instead you

00:27:29,530 --> 00:27:34,600
see all of your like user Etsy all the

00:27:31,900 --> 00:27:38,080
things from your actual deployment and

00:27:34,600 --> 00:27:40,990
then core or less amount bar is what

00:27:38,080 --> 00:27:42,340
actually just mounts bar in and again on

00:27:40,990 --> 00:27:43,960
a normal boot you wouldn't need to do

00:27:42,340 --> 00:27:45,160
that ii happen in the real route but we

00:27:43,960 --> 00:27:53,260
need to populate it so we need to

00:27:45,160 --> 00:27:55,300
mounted now ignition mount all this does

00:27:53,260 --> 00:27:58,150
is look through your file system section

00:27:55,300 --> 00:28:00,610
and say oh i need to mount this

00:27:58,150 --> 00:28:04,510
filesystem to slash bar relative to the

00:28:00,610 --> 00:28:09,010
sis root and so you can see the four we

00:28:04,510 --> 00:28:11,380
are VAR was mounted as part of our root

00:28:09,010 --> 00:28:15,010
partition at a different path and now

00:28:11,380 --> 00:28:18,390
you have it mounted as our partition and

00:28:15,010 --> 00:28:18,390
filesystem that we just created

00:28:18,690 --> 00:28:23,980
so now VAR is mounted all of our mount

00:28:22,450 --> 00:28:28,840
points are set up and we can populate

00:28:23,980 --> 00:28:31,720
VAR and because OS tree has a blank bar

00:28:28,840 --> 00:28:33,430
by default if you have like packages in

00:28:31,720 --> 00:28:36,070
your base OS that need to put files

00:28:33,430 --> 00:28:38,320
there we need a way of doing that and so

00:28:36,070 --> 00:28:40,630
RPM OS tree which is the tool that

00:28:38,320 --> 00:28:44,110
actually creates the OS tree commits for

00:28:40,630 --> 00:28:46,330
us will look at all the packages it's

00:28:44,110 --> 00:28:48,490
using and if they have files in VAR

00:28:46,330 --> 00:28:51,550
it'll generate system v temp files

00:28:48,490 --> 00:28:52,990
entries to recreate those so it'll

00:28:51,550 --> 00:28:55,030
generate a bunch of configuration for

00:28:52,990 --> 00:28:57,310
system v temp files and then we can run

00:28:55,030 --> 00:29:01,210
system v temp files and put all of those

00:28:57,310 --> 00:29:03,250
files back in bar and so after we've

00:29:01,210 --> 00:29:05,770
done this our system is in a state

00:29:03,250 --> 00:29:07,300
similar to if you have just installed an

00:29:05,770 --> 00:29:09,850
operating system that have done no

00:29:07,300 --> 00:29:12,970
configuration yet so now we already do

00:29:09,850 --> 00:29:13,810
our configuration with ignition files if

00:29:12,970 --> 00:29:16,270
you'll get our craft

00:29:13,810 --> 00:29:18,220
we're almost done all we need to just do

00:29:16,270 --> 00:29:19,950
our configuration and then we're ready

00:29:18,220 --> 00:29:23,650
matru

00:29:19,950 --> 00:29:25,360
so ignition files internally is split

00:29:23,650 --> 00:29:27,700
into two parts

00:29:25,360 --> 00:29:30,910
there's user creation and group creation

00:29:27,700 --> 00:29:35,590
and then everything else so like files

00:29:30,910 --> 00:29:37,360
directories and smoothie units and if

00:29:35,590 --> 00:29:40,360
you're thinking that oh we don't have to

00:29:37,360 --> 00:29:42,160
worry like this is our configuration

00:29:40,360 --> 00:29:44,170
here all we have is to Sydney unit

00:29:42,160 --> 00:29:45,820
there's no users to create if you

00:29:44,170 --> 00:29:47,320
remember that base config has the core

00:29:45,820 --> 00:29:49,480
user so that will actually happen first

00:29:47,320 --> 00:29:53,770
we'll create that core user and then

00:29:49,480 --> 00:29:55,840
we'll add this system to unit and so now

00:29:53,770 --> 00:29:58,030
that we've done that all of our

00:29:55,840 --> 00:30:00,460
prerequisites for ignition complete

00:29:58,030 --> 00:30:03,220
target have been met so that's done and

00:30:00,460 --> 00:30:04,900
in our all the prerequisites for in a

00:30:03,220 --> 00:30:07,750
dirty target are done we're ready to

00:30:04,900 --> 00:30:10,990
switch root and when you go to switch

00:30:07,750 --> 00:30:14,260
root that happens by isolating

00:30:10,990 --> 00:30:16,930
to a new target so and when you do that

00:30:14,260 --> 00:30:18,370
it's going to stop in at our key target

00:30:16,930 --> 00:30:20,740
and if you've been wondering this entire

00:30:18,370 --> 00:30:24,160
time why are those two units in red

00:30:20,740 --> 00:30:27,010
that's because they have a special thing

00:30:24,160 --> 00:30:29,920
called exec stop so system being units

00:30:27,010 --> 00:30:32,290
allow you to specify actions that should

00:30:29,920 --> 00:30:34,750
be taken when a unit stops and so this

00:30:32,290 --> 00:30:36,580
is how we do our care down so when the

00:30:34,750 --> 00:30:39,930
ignition Mountain unit gets stopped we

00:30:36,580 --> 00:30:44,590
run the ignition unmount stage and when

00:30:39,930 --> 00:30:46,080
core OS of our mount stops we run its

00:30:44,590 --> 00:30:48,880
unmount

00:30:46,080 --> 00:30:50,440
and again this is to ensure that the

00:30:48,880 --> 00:30:53,500
first boot isn't special we're not

00:30:50,440 --> 00:30:55,180
carrying things that ignition did in

00:30:53,500 --> 00:30:56,860
terms of setting up mounts into the real

00:30:55,180 --> 00:30:58,570
root so that we don't run into a

00:30:56,860 --> 00:31:02,860
situation where it worked the first time

00:30:58,570 --> 00:31:06,850
and then we reboot and then we fail so

00:31:02,860 --> 00:31:12,940
switch root happens pretty much like a

00:31:06,850 --> 00:31:16,450
normal switch root would it basically

00:31:12,940 --> 00:31:18,940
just treats into the history and then

00:31:16,450 --> 00:31:24,160
execs spin in it in there and in our

00:31:18,940 --> 00:31:25,210
case that's system D again and the nice

00:31:24,160 --> 00:31:27,730
thing about doing all of our

00:31:25,210 --> 00:31:29,560
configuration beforehand is if we wanted

00:31:27,730 --> 00:31:31,600
if we want to configure things in the

00:31:29,560 --> 00:31:33,280
real roots boot process we did that

00:31:31,600 --> 00:31:34,179
before we started it so we're not trying

00:31:33,280 --> 00:31:36,429
to configure our

00:31:34,179 --> 00:31:41,799
process during our boot process which is

00:31:36,429 --> 00:31:43,389
problematic so now we switch through

00:31:41,799 --> 00:31:45,759
system via started up it's a normal

00:31:43,389 --> 00:31:48,340
system D start up and eventually we

00:31:45,759 --> 00:31:50,820
reach this boot complete target and that

00:31:48,340 --> 00:31:54,490
just says hey we successfully mooted and

00:31:50,820 --> 00:31:57,850
now we can go and delete this boot

00:31:54,490 --> 00:32:00,220
ignition first boot file and so that

00:31:57,850 --> 00:32:02,139
next time we boot when grub looks for

00:32:00,220 --> 00:32:03,759
that file it won't find it we won't add

00:32:02,139 --> 00:32:05,679
the kernel demand line argument to say

00:32:03,759 --> 00:32:07,450
this is the first we won't turn on

00:32:05,679 --> 00:32:10,779
networking in the intagram of s and our

00:32:07,450 --> 00:32:16,029
boot can proceed normally so now we're

00:32:10,779 --> 00:32:20,980
done so final part is like what do we

00:32:16,029 --> 00:32:24,159
still need to do live pixie is one case

00:32:20,980 --> 00:32:26,049
so container Linux supports running out

00:32:24,159 --> 00:32:29,710
of RAM so you can just pick C boot

00:32:26,049 --> 00:32:32,499
container Linux and have your entire

00:32:29,710 --> 00:32:34,539
root be ephemeral and typically when

00:32:32,499 --> 00:32:37,299
people do this they have all of their

00:32:34,539 --> 00:32:39,210
data in like bar and have that on

00:32:37,299 --> 00:32:42,159
persistent storage and mount that in and

00:32:39,210 --> 00:32:43,929
just run ignition on every boot in that

00:32:42,159 --> 00:32:45,669
case because they're starting from a

00:32:43,929 --> 00:32:47,590
fresh fruit every time so you can do

00:32:45,669 --> 00:32:49,809
that we want to be able to do that

00:32:47,590 --> 00:32:52,210
fedora for us as well we haven't had

00:32:49,809 --> 00:32:53,799
time to implement it yet

00:32:52,210 --> 00:32:56,470
we don't have automatic rollback but

00:32:53,799 --> 00:32:59,379
yeah so on container Linux if you fail

00:32:56,470 --> 00:33:00,399
too if you're like kernel fails to load

00:32:59,379 --> 00:33:04,649
or something like that it'll

00:33:00,399 --> 00:33:08,710
automatically fall back to the previous

00:33:04,649 --> 00:33:09,730
installation and move that instead you

00:33:08,710 --> 00:33:12,610
don't have that implemented yet

00:33:09,730 --> 00:33:14,830
something we want to do and that has a

00:33:12,610 --> 00:33:19,480
lot of that is in the grub configs where

00:33:14,830 --> 00:33:22,299
we need to keep track of have we tried

00:33:19,480 --> 00:33:24,789
moving this did it work and so we can

00:33:22,299 --> 00:33:29,019
use that to determine like which entry

00:33:24,789 --> 00:33:31,360
should we boot the other thing we want

00:33:29,019 --> 00:33:34,029
to do is detect if you're using

00:33:31,360 --> 00:33:35,919
admission to change kernel and line

00:33:34,029 --> 00:33:37,299
arguments because if you're changing

00:33:35,919 --> 00:33:39,070
kernel command-line arguments you

00:33:37,299 --> 00:33:41,230
probably want them to be applied on your

00:33:39,070 --> 00:33:42,750
first boot so after we've done all of

00:33:41,230 --> 00:33:45,540
our configuration we want

00:33:42,750 --> 00:33:47,190
take that and if that is the case reboot

00:33:45,540 --> 00:33:52,380
so we can pick those up and then go

00:33:47,190 --> 00:33:55,740
through the process normally with this

00:33:52,380 --> 00:33:58,380
like single image where we're not doing

00:33:55,740 --> 00:34:00,750
like a typical install that means moving

00:33:58,380 --> 00:34:02,430
where root is is problematic so if you

00:34:00,750 --> 00:34:05,970
wanted to do like root on raid or

00:34:02,430 --> 00:34:08,399
encrypted root we don't have a place to

00:34:05,970 --> 00:34:10,530
pull all of that information from after

00:34:08,399 --> 00:34:13,110
we've created the new device especially

00:34:10,530 --> 00:34:16,220
if you're replacing root so we need a

00:34:13,110 --> 00:34:19,980
way of detecting like a are we going to

00:34:16,220 --> 00:34:21,480
be moving root if so we should take all

00:34:19,980 --> 00:34:24,360
of the contents of root willed them into

00:34:21,480 --> 00:34:26,040
RAM so that absolutely blown away the

00:34:24,360 --> 00:34:31,710
old root we can still put all those

00:34:26,040 --> 00:34:33,750
contents back and finally this boot

00:34:31,710 --> 00:34:36,870
process isn't quite worked out on

00:34:33,750 --> 00:34:40,250
PowerPC and system 390x but their boot

00:34:36,870 --> 00:34:48,750
loaders yet so we need support for that

00:34:40,250 --> 00:34:51,330
you guys have any questions yes how did

00:34:48,750 --> 00:34:53,679
the ignition configure get fetched so

00:34:51,330 --> 00:34:56,869
I'm gonna jump way back

00:34:53,679 --> 00:34:56,869
[Music]

00:35:01,760 --> 00:35:05,480
if you look these are our criminal

00:35:03,410 --> 00:35:09,500
command-line options there is this

00:35:05,480 --> 00:35:12,049
ignition platform to ID and ignition has

00:35:09,500 --> 00:35:15,950
a list of different platforms so like

00:35:12,049 --> 00:35:19,420
key mu AWS Google cloud all of those and

00:35:15,950 --> 00:35:23,180
they all have a entry in there and

00:35:19,420 --> 00:35:25,819
ignition will that parameter gets passed

00:35:23,180 --> 00:35:28,670
to ignition and ignition will then will

00:35:25,819 --> 00:35:31,369
come how to look that up so on like AWS

00:35:28,670 --> 00:35:34,309
it'll hit the ec2 metadata endpoint on

00:35:31,369 --> 00:35:37,549
Google Cloud will hit that endpoint on

00:35:34,309 --> 00:35:39,380
key mu we use a kind of key method where

00:35:37,549 --> 00:35:41,990
we actually pass it in with the firmware

00:35:39,380 --> 00:35:46,160
config but it depends on which platform

00:35:41,990 --> 00:35:52,579
you're on what protocols does it support

00:35:46,160 --> 00:35:56,390
so it supports whatever you need on that

00:35:52,579 --> 00:35:59,510
cloud so those in most cases it's just

00:35:56,390 --> 00:36:01,760
HTTP ignition also supports chain

00:35:59,510 --> 00:36:04,579
loading configs so in your config you

00:36:01,760 --> 00:36:06,260
can say I want to actually like fetch

00:36:04,579 --> 00:36:09,470
another config and merge that into mine

00:36:06,260 --> 00:36:12,730
and for that and we support most common

00:36:09,470 --> 00:36:19,670
protocols I think is for HTTP and HTTPS

00:36:12,730 --> 00:36:24,529
TFTP I think one other but I don't

00:36:19,670 --> 00:36:25,660
remember off the top of my head sorry

00:36:24,529 --> 00:36:31,819
could you repeat the question

00:36:25,660 --> 00:36:36,020
does it use match box so match box will

00:36:31,819 --> 00:36:38,349
serve its configs over HTTP and there's

00:36:36,020 --> 00:36:41,180
actually something I didn't cover is

00:36:38,349 --> 00:36:44,180
there's an optional kernel command line

00:36:41,180 --> 00:36:46,160
argument where you can specify a URL

00:36:44,180 --> 00:36:48,859
that ignition should use instead of its

00:36:46,160 --> 00:36:51,410
normal config so I think it's ignition

00:36:48,859 --> 00:36:52,970
dot config you RL if you specify that

00:36:51,410 --> 00:36:55,130
kernel command line argument they give

00:36:52,970 --> 00:36:56,750
it a URL it'll instead of doing its

00:36:55,130 --> 00:37:01,789
normal fetching fetch the config from

00:36:56,750 --> 00:37:04,059
there yes things go wrong however you

00:37:01,789 --> 00:37:04,059
tree

00:37:04,780 --> 00:37:10,750
when things go wrong have we triage that

00:37:06,870 --> 00:37:13,060
so ignition and if you're poor or less

00:37:10,750 --> 00:37:16,870
in general follows the philosophy ugh

00:37:13,060 --> 00:37:18,730
if you fail you should fail hard so part

00:37:16,870 --> 00:37:20,080
of ignitions whole philosophy is you

00:37:18,730 --> 00:37:22,750
should either get the system you

00:37:20,080 --> 00:37:24,760
specified or nothing at all like the

00:37:22,750 --> 00:37:26,680
worst case is that you get a system that

00:37:24,760 --> 00:37:31,000
comes up that is like harshly

00:37:26,680 --> 00:37:33,190
provisioned and so unfortunately this

00:37:31,000 --> 00:37:34,920
means that if you fail you're gonna be

00:37:33,190 --> 00:37:39,160
dumped into an inner amethyst shell and

00:37:34,920 --> 00:37:41,080
this does make debugging harder we try

00:37:39,160 --> 00:37:44,230
to make it obvious like when that has

00:37:41,080 --> 00:37:46,570
failed like how to get logs if you're

00:37:44,230 --> 00:37:48,280
like on a cloud platform that becomes

00:37:46,570 --> 00:37:51,430
harder because your console access is

00:37:48,280 --> 00:37:54,190
typically not great one of the things we

00:37:51,430 --> 00:37:57,100
do want to do is support like forwarding

00:37:54,190 --> 00:37:58,750
ignition logs to various like cloud

00:37:57,100 --> 00:38:09,660
endpoints or things like that but that's

00:37:58,750 --> 00:38:09,660
still networks any other question yes

00:38:10,970 --> 00:38:17,620
like ignition what the future mentioned

00:38:13,700 --> 00:38:17,620
being able to reformat

00:38:17,630 --> 00:38:21,470
yes would that also include being able

00:38:19,310 --> 00:38:25,730
to do things like further splitting up

00:38:21,470 --> 00:38:28,960
the rear bus like you can have to put an

00:38:25,730 --> 00:38:28,960
additional amount point

00:38:30,870 --> 00:38:37,660
so the question is we talked about in

00:38:35,980 --> 00:38:40,510
the future being able to move the route

00:38:37,660 --> 00:38:42,810
of s does that also include being able

00:38:40,510 --> 00:38:48,910
to further split up the route of s into

00:38:42,810 --> 00:38:52,480
like more mouth points to some degree we

00:38:48,910 --> 00:38:55,900
already support that so things under the

00:38:52,480 --> 00:38:58,540
like OS tree section like your

00:38:55,900 --> 00:39:02,590
everything that's not under bar do need

00:38:58,540 --> 00:39:04,540
to stay together but we already within

00:39:02,590 --> 00:39:06,280
VAR you can actually divide up bar

00:39:04,540 --> 00:39:14,500
however you want like that can be

00:39:06,280 --> 00:39:22,510
arbitrarily complex already any other

00:39:14,500 --> 00:39:24,730
that yes yes so the question is I

00:39:22,510 --> 00:39:27,730
mentioned that this does not fully apply

00:39:24,730 --> 00:39:32,550
to rel core OS what are the differences

00:39:27,730 --> 00:39:35,770
there you know go to another slide so

00:39:32,550 --> 00:39:39,400
rel core OS is using an older version of

00:39:35,770 --> 00:39:43,510
ignition which does not have this

00:39:39,400 --> 00:39:45,790
ignition mount and unmount section and

00:39:43,510 --> 00:39:50,620
because of that and because we need to

00:39:45,790 --> 00:39:53,020
populate VAR on first boot what rel core

00:39:50,620 --> 00:39:57,930
or less can do with far is less flexible

00:39:53,020 --> 00:40:01,120
and so a lot of this is the same so like

00:39:57,930 --> 00:40:03,550
pretty much everything up until this

00:40:01,120 --> 00:40:07,450
point here the in a dirty roof s target

00:40:03,550 --> 00:40:09,280
is pretty much the same it's this stuff

00:40:07,450 --> 00:40:13,590
here where we deal with mounting of our

00:40:09,280 --> 00:40:13,590
populating it that part is different

00:40:18,770 --> 00:40:34,039
any other question yes

00:40:23,890 --> 00:40:37,390
yeah sure so the question is is Fedora

00:40:34,039 --> 00:40:42,499
core OS the upstream of Ralph or OS

00:40:37,390 --> 00:40:44,869
mostly so things do move from Fedora

00:40:42,499 --> 00:40:46,309
core OS interim or less there's also

00:40:44,869 --> 00:40:49,339
some things that move backwards the

00:40:46,309 --> 00:41:11,029
other way it's not a strict upstream and

00:40:49,339 --> 00:41:13,519
downstream relationship so the question

00:41:11,029 --> 00:41:18,199
is in the Fedora core OS config there's

00:41:13,519 --> 00:41:22,759
a variant label that says F cos what is

00:41:18,199 --> 00:41:24,979
that about so we try to make our configs

00:41:22,759 --> 00:41:28,719
descriptive about what they are so

00:41:24,979 --> 00:41:31,219
there's both a variant and a version

00:41:28,719 --> 00:41:35,299
because writing a mission configs is

00:41:31,219 --> 00:41:37,430
hard we wanted to make our transpiler

00:41:35,299 --> 00:41:38,329
easy for other people to extend for

00:41:37,430 --> 00:41:40,729
their own os's

00:41:38,329 --> 00:41:43,309
but at the same time we don't want a

00:41:40,729 --> 00:41:45,349
bunch of configs floating around that

00:41:43,309 --> 00:41:47,269
are descriptive about like what oh s

00:41:45,349 --> 00:41:49,609
they're targeting so that in variant

00:41:47,269 --> 00:41:52,640
there is saying this config is for

00:41:49,609 --> 00:41:54,380
Fedora core OS so if other people who

00:41:52,640 --> 00:41:56,930
want to use ignition want to write their

00:41:54,380 --> 00:41:59,509
own similar tool there's a standard way

00:41:56,930 --> 00:42:01,249
of saying like I this config is

00:41:59,509 --> 00:42:03,769
conforming to this version and targeting

00:42:01,249 --> 00:42:10,749
this OS don't try to use it on other

00:42:03,769 --> 00:42:10,749
alessa's yes

00:42:19,380 --> 00:42:23,950
the question was a lot of the boot

00:42:22,390 --> 00:42:27,820
process here that I collect containers

00:42:23,950 --> 00:42:33,610
where does that come in so yeah so if I

00:42:27,820 --> 00:42:35,830
go to our list of everything that needs

00:42:33,610 --> 00:42:37,630
to happen that's way down to the bottom

00:42:35,830 --> 00:42:39,220
and start normal services so there's

00:42:37,630 --> 00:42:42,250
nothing special about how we launch

00:42:39,220 --> 00:42:45,340
containers on Fedora core OS but if you

00:42:42,250 --> 00:42:47,170
wanted to set like where this would come

00:42:45,340 --> 00:42:50,140
in places if you wanted to set up a

00:42:47,170 --> 00:42:53,710
system be unit to like say run pod man

00:42:50,140 --> 00:42:55,540
run or start docker or that kind of

00:42:53,710 --> 00:42:58,870
thing you do all of these set up for

00:42:55,540 --> 00:43:09,280
that to get it ready to run that in this

00:42:58,870 --> 00:43:10,630
process a question is there's nothing in

00:43:09,280 --> 00:43:17,770
here that prevents us from doing a

00:43:10,630 --> 00:43:20,290
different kind of boot yeah so the the

00:43:17,770 --> 00:43:22,870
boot process here is not prescriptive

00:43:20,290 --> 00:43:25,240
about what kind of things you could set

00:43:22,870 --> 00:43:30,000
up so fedora for us is not designed to

00:43:25,240 --> 00:43:32,160
like run on a desktop for example but if

00:43:30,000 --> 00:43:34,420
there's nothing in our boot process

00:43:32,160 --> 00:43:42,370
specifically that prevents people from

00:43:34,420 --> 00:43:44,530
trying just don't we're trying to keep

00:43:42,370 --> 00:43:46,600
the boot process generic and not like

00:43:44,530 --> 00:43:54,810
limit the scope of what people can do

00:43:46,600 --> 00:43:54,810
with it any other questions

00:43:59,470 --> 00:44:02,400

YouTube URL: https://www.youtube.com/watch?v=00gzZcX9gUk


