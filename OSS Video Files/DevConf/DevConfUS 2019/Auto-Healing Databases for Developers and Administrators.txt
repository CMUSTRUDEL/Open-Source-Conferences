Title: Auto-Healing Databases for Developers and Administrators
Publication date: 2019-10-02
Playlist: DevConfUS 2019
Description: 
	Speaker: Matthew Ward

When uptime is critical, how do you build a self healing database? Let us demo how Couchbase and OpenShift can form a self-healing and fault tolerant data-as-a-service. We will fail, scale, deploy and rebalance a Couchbase Cluster with the OpenShift Operator Framework automatically. The application remains available and continues to write data without disruption. Attendees will walk away with the know-how and documentation for deploying the operator and configuring their cluster for this database-as-a-service.
Captions: 
	00:00:02,580 --> 00:00:11,879
good morning and I ready hear me alright

00:00:08,639 --> 00:00:15,150
so my name is Matthew ward I work for

00:00:11,879 --> 00:00:18,240
red hats I'm a work part of the vertical

00:00:15,150 --> 00:00:20,490
partners solutions team at Red Hat so

00:00:18,240 --> 00:00:22,920
what that means is that we basically

00:00:20,490 --> 00:00:25,260
work with partners and we help them

00:00:22,920 --> 00:00:27,539
understand our verticalized strategies

00:00:25,260 --> 00:00:30,180
so Red Hat doesn't really have any

00:00:27,539 --> 00:00:31,920
vertical products but how do we support

00:00:30,180 --> 00:00:37,200
these other partnerships so partnerships

00:00:31,920 --> 00:00:38,820
become super super important I am going

00:00:37,200 --> 00:00:41,160
to confess that I am NOT a Couchbase

00:00:38,820 --> 00:00:43,770
expert we supposed to have one with us

00:00:41,160 --> 00:00:47,180
but unfortunately he was not able to

00:00:43,770 --> 00:00:49,320
make it so you're stuck with me instead

00:00:47,180 --> 00:00:51,420
what we're gonna do is I'm gonna give

00:00:49,320 --> 00:00:52,820
you just some basic information on it

00:00:51,420 --> 00:00:55,050
we're gonna talk a little bit about

00:00:52,820 --> 00:00:57,989
developing this sort of auto healing

00:00:55,050 --> 00:01:00,690
database in some of the some of the use

00:00:57,989 --> 00:01:03,300
cases that we've targeted some specific

00:01:00,690 --> 00:01:05,159
customers with so everything we're to

00:01:03,300 --> 00:01:07,649
show you is something that is actually

00:01:05,159 --> 00:01:09,569
running in production today with some

00:01:07,649 --> 00:01:09,899
particular customers we're just not

00:01:09,569 --> 00:01:11,729
allowed

00:01:09,899 --> 00:01:13,970
we don't have approval to say which ones

00:01:11,729 --> 00:01:18,420
so

00:01:13,970 --> 00:01:20,280
you're writing an app right kubernetes

00:01:18,420 --> 00:01:22,799
is the answer to everything that's what

00:01:20,280 --> 00:01:26,310
our sales teams talk about that's what a

00:01:22,799 --> 00:01:27,899
lot of these sort of meetups a lot of

00:01:26,310 --> 00:01:29,820
these sort of talks are all about is how

00:01:27,899 --> 00:01:31,470
kubernetes has changed the landscape and

00:01:29,820 --> 00:01:34,140
changes everything but in reality

00:01:31,470 --> 00:01:35,700
kubernetes is really just a small piece

00:01:34,140 --> 00:01:38,520
of it and right and then all the

00:01:35,700 --> 00:01:42,750
supporting CN CF projects that support

00:01:38,520 --> 00:01:45,180
that product and that project are fit

00:01:42,750 --> 00:01:47,729
into these tiny little pieces where

00:01:45,180 --> 00:01:50,460
we're looking at is over here is this

00:01:47,729 --> 00:01:52,979
database section so if you're developing

00:01:50,460 --> 00:01:55,679
new apps and you're looking at changing

00:01:52,979 --> 00:01:58,259
the way that you go about doing things

00:01:55,679 --> 00:02:00,479
we need to look at and change the way

00:01:58,259 --> 00:02:03,630
that these traditional applications work

00:02:00,479 --> 00:02:07,170
right so does anybody have moved a an

00:02:03,630 --> 00:02:07,920
existing application to kubernetes or to

00:02:07,170 --> 00:02:11,489
OpenShift

00:02:07,920 --> 00:02:13,230
without doing anything right changing

00:02:11,489 --> 00:02:16,620
and just moving an application on to

00:02:13,230 --> 00:02:19,170
OpenShift it's not as easy as we like to

00:02:16,620 --> 00:02:21,239
think it is moving a database is even

00:02:19,170 --> 00:02:24,060
more complicated so one of the things

00:02:21,239 --> 00:02:25,739
that we've kind of focused on and what

00:02:24,060 --> 00:02:28,680
Couchbase has sort of been a critical

00:02:25,739 --> 00:02:31,650
piece of is helping to find that data

00:02:28,680 --> 00:02:32,730
story for us so some of the things that

00:02:31,650 --> 00:02:34,350
people are looking at when they're

00:02:32,730 --> 00:02:37,410
moving and they're getting into these

00:02:34,350 --> 00:02:41,130
cloud native databases we'll call them

00:02:37,410 --> 00:02:43,170
is sort of optimizing the experience for

00:02:41,130 --> 00:02:43,650
everyone so how do you get this up and

00:02:43,170 --> 00:02:45,840
running

00:02:43,650 --> 00:02:48,900
what is des to look like how do you

00:02:45,840 --> 00:02:51,390
upgrade our patches and how all this

00:02:48,900 --> 00:02:54,840
stuff maintained we want it to auto heal

00:02:51,390 --> 00:02:56,010
we want to drive the hybrid story we're

00:02:54,840 --> 00:02:57,690
gonna make sure that we can run it

00:02:56,010 --> 00:03:00,299
wherever we want to run it and we're not

00:02:57,690 --> 00:03:03,239
just tying ourselves to Amazon Web

00:03:00,299 --> 00:03:05,640
Services or masher and relying on their

00:03:03,239 --> 00:03:09,359
data services because data has gravity

00:03:05,640 --> 00:03:10,920
so getting data into those is difficult

00:03:09,359 --> 00:03:12,829
but getting it back out again is even

00:03:10,920 --> 00:03:16,379
harder

00:03:12,829 --> 00:03:18,030
so Couchbase helps us sort of fill in

00:03:16,379 --> 00:03:21,569
all of those stories so they are a

00:03:18,030 --> 00:03:24,299
containerized and cloud native developed

00:03:21,569 --> 00:03:26,129
database they also run in directly

00:03:24,299 --> 00:03:28,470
interface with all the major cloud

00:03:26,129 --> 00:03:29,909
providers they also directly interface

00:03:28,470 --> 00:03:31,739
with open ships and I'll show you a

00:03:29,909 --> 00:03:34,170
little bit later how that looks and how

00:03:31,739 --> 00:03:37,049
that interfaces so that gives them we've

00:03:34,170 --> 00:03:40,349
kind of become their own prem story

00:03:37,049 --> 00:03:42,750
around OpenShift but it also allows them

00:03:40,349 --> 00:03:45,329
to give the same experience so when a

00:03:42,750 --> 00:03:47,450
customer isn't all-in on AWS they can

00:03:45,329 --> 00:03:50,370
get a similar experience looking at

00:03:47,450 --> 00:03:52,379
OpenShift as they would running across

00:03:50,370 --> 00:03:56,129
all these hybrid clouds because then the

00:03:52,379 --> 00:03:58,920
reality of what we see pretty constantly

00:03:56,129 --> 00:04:01,560
is that individual companies dispite

00:03:58,920 --> 00:04:05,250
would you know AWS and Azure and all

00:04:01,560 --> 00:04:08,129
have up on their slides they're not just

00:04:05,250 --> 00:04:10,260
all in on one cloud right different

00:04:08,129 --> 00:04:12,840
divisions of different companies choose

00:04:10,260 --> 00:04:15,299
different clouds because of different

00:04:12,840 --> 00:04:17,370
reasons and so giving them a common user

00:04:15,299 --> 00:04:18,720
interface and a common database and

00:04:17,370 --> 00:04:20,699
giving them databases of service

00:04:18,720 --> 00:04:22,770
offerings on top of that it's proven to

00:04:20,699 --> 00:04:26,740
be pretty valuable

00:04:22,770 --> 00:04:29,530
so the main key way that Couchbase has

00:04:26,740 --> 00:04:31,300
done this is they have operated they use

00:04:29,530 --> 00:04:34,900
it they've written a kubernetes operator

00:04:31,300 --> 00:04:37,530
right so if we back we'll go backwards a

00:04:34,900 --> 00:04:39,760
few months or a few years

00:04:37,530 --> 00:04:41,170
containerization basically was awesome

00:04:39,760 --> 00:04:43,060
right so they came out with this notion

00:04:41,170 --> 00:04:46,500
of containers which has been around for

00:04:43,060 --> 00:04:48,750
a long time right I used Solaris zones

00:04:46,500 --> 00:04:53,110
probably seven or eight years ago

00:04:48,750 --> 00:04:55,900
putting WebSphere applications inside of

00:04:53,110 --> 00:04:59,200
zones and running those but really

00:04:55,900 --> 00:05:01,900
docker sort of popularized the x86

00:04:59,200 --> 00:05:04,420
version of containers created a nice

00:05:01,900 --> 00:05:06,040
format and so the idea is hey we have

00:05:04,420 --> 00:05:09,280
this great way of reproducing these

00:05:06,040 --> 00:05:11,140
smaller versions of VMs and we treated

00:05:09,280 --> 00:05:12,970
them kind of like that and then it

00:05:11,140 --> 00:05:15,930
started to evolve well we're gonna start

00:05:12,970 --> 00:05:17,920
writing sort of container native

00:05:15,930 --> 00:05:20,800
paradigms and we're gonna really kind of

00:05:17,920 --> 00:05:22,510
focus on leveraging the container to do

00:05:20,800 --> 00:05:25,060
what it's really good at so we can

00:05:22,510 --> 00:05:26,920
create builds here which really good you

00:05:25,060 --> 00:05:28,600
can run them in different in runtime

00:05:26,920 --> 00:05:31,750
environments that's really good it's

00:05:28,600 --> 00:05:34,180
nice packaging that's good so then we

00:05:31,750 --> 00:05:35,830
realized ok we have a couple containers

00:05:34,180 --> 00:05:37,780
that are running various applications

00:05:35,830 --> 00:05:39,850
they're usually simple things now we

00:05:37,780 --> 00:05:43,590
want to get more complex so we start

00:05:39,850 --> 00:05:46,050
doing and we say ok an application

00:05:43,590 --> 00:05:47,669
is really more than an individual

00:05:46,050 --> 00:05:50,040
container it's really more than an

00:05:47,669 --> 00:05:52,440
individual piece so how do we take all

00:05:50,040 --> 00:05:55,050
of these disparate different pieces

00:05:52,440 --> 00:05:56,580
together and how do we deploy them and

00:05:55,050 --> 00:05:58,740
that's really when kubernetes came onto

00:05:56,580 --> 00:06:01,200
the screen this how do we manage

00:05:58,740 --> 00:06:03,480
multiple containers kubernetes is the

00:06:01,200 --> 00:06:04,830
way to manage multiple containers so now

00:06:03,480 --> 00:06:06,690
we've gotten to the point where we're

00:06:04,830 --> 00:06:08,700
managing multiple kubernetes

00:06:06,690 --> 00:06:10,410
environments so how do we manage

00:06:08,700 --> 00:06:11,970
multiple kubernetes environments how do

00:06:10,410 --> 00:06:14,040
we get that consistency through there

00:06:11,970 --> 00:06:16,110
that's really what the operators and the

00:06:14,040 --> 00:06:17,970
operator framework helped you do that

00:06:16,110 --> 00:06:22,440
helps you define the installation path

00:06:17,970 --> 00:06:24,570
it helps guide upgrades backups what

00:06:22,440 --> 00:06:27,070
happens when we fail all those different

00:06:24,570 --> 00:06:31,910
pieces and parts

00:06:27,070 --> 00:06:33,590
so we touch largely on this but really

00:06:31,910 --> 00:06:35,990
what we're trying to do with an operator

00:06:33,590 --> 00:06:38,210
is we're trying to take the what is in

00:06:35,990 --> 00:06:41,690
people's inherent understanding and

00:06:38,210 --> 00:06:44,150
knowledge and codify that so how much of

00:06:41,690 --> 00:06:48,170
that can we codify when we're doing

00:06:44,150 --> 00:06:49,760
certain things if we are going to be in

00:06:48,170 --> 00:06:51,260
this particular case we're going to be

00:06:49,760 --> 00:06:54,650
running a demo where we're gonna add a

00:06:51,260 --> 00:06:57,020
new node to a Couchbase cluster there's

00:06:54,650 --> 00:06:59,660
probably eight or nine steps if I

00:06:57,020 --> 00:07:01,880
remember correctly to do that and to add

00:06:59,660 --> 00:07:04,400
a new node into it what we've done with

00:07:01,880 --> 00:07:06,650
the operator though is we've codified

00:07:04,400 --> 00:07:08,720
that so all you have to do it in an open

00:07:06,650 --> 00:07:12,500
shift environment is just change the

00:07:08,720 --> 00:07:13,370
size from 2 to 3 or 3 to 4 or 1 to 10

00:07:12,500 --> 00:07:17,270
doesn't matter

00:07:13,370 --> 00:07:19,970
and the codification of that knows how

00:07:17,270 --> 00:07:22,570
to add into the collective and rebalance

00:07:19,970 --> 00:07:22,570
all of the data

00:07:23,470 --> 00:07:26,770
this is just highlighting some of the

00:07:24,819 --> 00:07:29,199
things we've done with them they wrote

00:07:26,770 --> 00:07:34,599
the application for doing this but we

00:07:29,199 --> 00:07:35,770
sort of hosted on operator hub do one of

00:07:34,599 --> 00:07:39,069
the other things that's really nice

00:07:35,770 --> 00:07:41,500
about Couchbase I'm not an expert as I

00:07:39,069 --> 00:07:45,520
said before but it's an in-memory first

00:07:41,500 --> 00:07:48,610
database and is most known for its

00:07:45,520 --> 00:07:51,250
caching and key value stores but it also

00:07:48,610 --> 00:07:54,009
does provide us document stores so if

00:07:51,250 --> 00:07:55,539
you're using something like you'd

00:07:54,009 --> 00:07:57,759
be familiar with document stores

00:07:55,539 --> 00:08:00,699
it gives full-text search it has

00:07:57,759 --> 00:08:03,190
analytics capabilities eventing that's

00:08:00,699 --> 00:08:05,949
something we've discussed with them and

00:08:03,190 --> 00:08:07,840
they've incorporated our looking to

00:08:05,949 --> 00:08:11,889
incorporate into things like the

00:08:07,840 --> 00:08:15,220
operator and such if you add a table to

00:08:11,889 --> 00:08:17,770
a particular database you can trigger an

00:08:15,220 --> 00:08:20,620
event to basically go and run for you

00:08:17,770 --> 00:08:22,840
they also use things may have their own

00:08:20,620 --> 00:08:25,889
language which is called nikhil that

00:08:22,840 --> 00:08:27,909
allows them to give you sequel like

00:08:25,889 --> 00:08:29,620
capabilities and things like that we're

00:08:27,909 --> 00:08:31,960
not going to explore delve into any of

00:08:29,620 --> 00:08:33,880
that today but it's more than just a key

00:08:31,960 --> 00:08:35,829
value store so when you're looking at

00:08:33,880 --> 00:08:39,099
things like some of the other databases

00:08:35,829 --> 00:08:41,110
that we have they kind of do a more

00:08:39,099 --> 00:08:44,160
limited skill set of things which is why

00:08:41,110 --> 00:08:45,960
Couchbase is pretty popular

00:08:44,160 --> 00:08:47,160
they are out on the operator hub we'll

00:08:45,960 --> 00:08:49,560
show you what that looks like but they

00:08:47,160 --> 00:08:52,080
also are a certified container in the

00:08:49,560 --> 00:08:55,260
Red Hat container registry they were the

00:08:52,080 --> 00:08:57,300
first certified operator outside of Red

00:08:55,260 --> 00:09:00,060
Hat and they were one of the first

00:08:57,300 --> 00:09:04,320
certified containers and so this helps

00:09:00,060 --> 00:09:05,850
us keep track of updates upgrades all of

00:09:04,320 --> 00:09:08,400
those different aspects of it and it's

00:09:05,850 --> 00:09:10,980
documented here so since it's in the Red

00:09:08,400 --> 00:09:12,630
Hat catalog you're pulling from Red Hat

00:09:10,980 --> 00:09:15,870
registries you know things are tested

00:09:12,630 --> 00:09:19,190
you know they're built so bring them and

00:09:15,870 --> 00:09:19,190
dive into our live demo

00:09:36,620 --> 00:09:41,320
so this is my openshift environments

00:09:41,630 --> 00:09:49,490
or create a new project inside of this

00:09:46,579 --> 00:09:52,899
project we're gonna go to catalogs an

00:09:49,490 --> 00:09:52,899
operator hub dot IO

00:09:54,850 --> 00:10:01,179
inside of here or all of the various

00:09:57,189 --> 00:10:04,419
operators that are are that you can

00:10:01,179 --> 00:10:05,649
import into openshift today so we have a

00:10:04,419 --> 00:10:07,569
few of these that I've worked with

00:10:05,649 --> 00:10:11,220
before I've done some work with aqua

00:10:07,569 --> 00:10:11,220
I've done some work with

00:10:11,230 --> 00:10:15,850
synopsis I've done some work with

00:10:13,589 --> 00:10:19,529
crunchy I've done some work with a couch

00:10:15,850 --> 00:10:19,529
bass so we're gonna bring them in

00:10:20,560 --> 00:10:27,009
and we're going to install it to that's

00:10:22,360 --> 00:10:31,319
this specific namespace and we're gonna

00:10:27,009 --> 00:10:31,319
set the approval strategy to automatic

00:10:34,850 --> 00:10:38,389
so we're gonna switch up to installed

00:10:36,829 --> 00:10:41,269
operators and we're just gonna sit here

00:10:38,389 --> 00:10:42,769
for a while the couch based operator

00:10:41,269 --> 00:10:44,359
gets installed so there's a number of

00:10:42,769 --> 00:10:46,309
different components and things that are

00:10:44,359 --> 00:10:48,979
getting brought down some containers

00:10:46,309 --> 00:10:52,069
that are getting run and wherever this

00:10:48,979 --> 00:10:54,519
namespace is is getting pushed out we

00:10:52,069 --> 00:10:54,519
have a failure

00:11:14,390 --> 00:11:17,800
let's try that again

00:11:26,490 --> 00:11:29,600
[Music]

00:11:42,020 --> 00:11:45,289
[Music]

00:11:45,630 --> 00:11:51,250
don't get this alright so one of the

00:11:48,550 --> 00:11:52,870
things that we're gonna do if you want

00:11:51,250 --> 00:11:57,940
to bring out your phone and pull up

00:11:52,870 --> 00:11:59,140
Twitter we will be able to we're

00:11:57,940 --> 00:12:01,450
basically going to be deploying web

00:11:59,140 --> 00:12:04,270
application as part of this that's

00:12:01,450 --> 00:12:05,950
connected to that live database and it

00:12:04,270 --> 00:12:08,410
is sucking in that these particular

00:12:05,950 --> 00:12:10,330
hashtags so anything that's running out

00:12:08,410 --> 00:12:12,190
on Twitter that's using these hashtags

00:12:10,330 --> 00:12:14,380
will get sucked into our web application

00:12:12,190 --> 00:12:16,209
and we're gonna fail a node while it's

00:12:14,380 --> 00:12:18,160
running just to show you what it looks

00:12:16,209 --> 00:12:22,680
like and how it's gonna automatically

00:12:18,160 --> 00:12:26,010
detect it we deploy a new one and then

00:12:22,680 --> 00:12:26,010
rebalance the data

00:12:27,410 --> 00:12:31,749
all right so we have successfully

00:12:29,029 --> 00:12:31,749
installed

00:12:32,529 --> 00:12:37,259
next we need to create a secret

00:12:44,610 --> 00:12:49,519
by injecting this secret into

00:12:57,040 --> 00:13:02,980
into our environment we're basically

00:12:58,959 --> 00:13:06,540
setting the Couchbase admin username and

00:13:02,980 --> 00:13:06,540
password for the couch based console

00:13:10,010 --> 00:13:14,270
now we have the operator running we're

00:13:12,320 --> 00:13:16,870
gonna go and create a new Couchbase

00:13:14,270 --> 00:13:16,870
cluster

00:13:17,530 --> 00:13:26,640
I'm gonna make some modifications here

00:13:20,430 --> 00:13:26,640
mainly what I'm doing for Speed purposes

00:13:27,930 --> 00:13:31,730
[Music]

00:13:29,630 --> 00:13:33,170
is I'm removing a few different services

00:13:31,730 --> 00:13:36,050
that they have so we're removing the

00:13:33,170 --> 00:13:39,079
full-text search the eventing and the

00:13:36,050 --> 00:13:44,050
analytics piece of it and we're taking

00:13:39,079 --> 00:13:44,050
the count down the replicas count down

00:13:46,380 --> 00:13:50,460
and so now what we're gonna be doing is

00:13:48,240 --> 00:13:54,710
we're going to be deploying this

00:13:50,460 --> 00:13:54,710
Couchbase cluster

00:14:00,200 --> 00:14:05,589
[Music]

00:14:02,930 --> 00:14:09,580
we're gonna wait for this to finish

00:14:05,589 --> 00:14:11,920
running and then

00:14:09,580 --> 00:14:13,540
as part of their operator some of the

00:14:11,920 --> 00:14:19,260
things that they have built in here is

00:14:13,540 --> 00:14:19,260
that we can turn on the console

00:14:20,250 --> 00:14:23,480
for those

00:14:23,590 --> 00:14:27,200
database nodes

00:14:25,550 --> 00:14:28,400
so what this is going to allow us to do

00:14:27,200 --> 00:14:31,280
is it's gonna allow us to sign in to

00:14:28,400 --> 00:14:34,190
that particular database using the web

00:14:31,280 --> 00:14:36,700
interface that they have in the way that

00:14:34,190 --> 00:14:39,020
it works is it turns on that web service

00:14:36,700 --> 00:14:40,520
for all of them so it doesn't matter

00:14:39,020 --> 00:14:44,480
which database you're signing into

00:14:40,520 --> 00:14:46,370
whether you're hitting example 0 1 2 3 4

00:14:44,480 --> 00:14:47,810
it doesn't matter because it will route

00:14:46,370 --> 00:14:50,500
you to the one that's running that

00:14:47,810 --> 00:14:50,500
particular service

00:14:51,400 --> 00:14:54,520
[Music]

00:14:56,690 --> 00:15:04,300
[Music]

00:15:01,290 --> 00:15:07,510
all right we had

00:15:04,300 --> 00:15:10,000
waiting for the UI service to come up so

00:15:07,510 --> 00:15:12,630
that way we can expose that you are a

00:15:10,000 --> 00:15:12,630
container

00:15:16,090 --> 00:15:20,379
[Music]

00:15:33,360 --> 00:15:36,639
[Music]

00:15:40,170 --> 00:15:45,050
this particular one is failing

00:15:50,020 --> 00:15:54,509
darn well I somewhat prepared for this

00:15:52,300 --> 00:15:56,240
so old

00:15:54,509 --> 00:15:57,800
for the old

00:15:56,240 --> 00:15:59,860
[Applause]

00:15:57,800 --> 00:16:02,890
[Music]

00:15:59,860 --> 00:16:04,630
Julia Child's method where we're

00:16:02,890 --> 00:16:06,310
basically gonna pull the finished turkey

00:16:04,630 --> 00:16:08,530
out of the oven instead of putting a raw

00:16:06,310 --> 00:16:12,160
turkey just into the oven so what that's

00:16:08,530 --> 00:16:15,930
gonna look like is there is an open

00:16:12,160 --> 00:16:15,930
shift there we go

00:16:19,860 --> 00:16:27,779
[Music]

00:16:28,130 --> 00:16:33,620
so I have a couch bass cluster that I

00:16:31,250 --> 00:16:36,440
pre provisioned and had all this working

00:16:33,620 --> 00:16:39,880
nicely this morning and you can see here

00:16:36,440 --> 00:16:39,880
that it is consist of

00:16:40,870 --> 00:16:48,700
for servers if we want to and I can

00:16:45,220 --> 00:16:51,370
probably get away with doing this we're

00:16:48,700 --> 00:16:53,220
going to install operators

00:16:51,370 --> 00:16:56,880
[Music]

00:16:53,220 --> 00:17:00,070
Couchbase cluster at all

00:16:56,880 --> 00:17:00,070
[Music]

00:17:07,270 --> 00:17:13,110
change this from four to five will save

00:17:11,439 --> 00:17:15,839
it

00:17:13,110 --> 00:17:18,270
having this reload and what should

00:17:15,839 --> 00:17:22,830
happen fingers crossed

00:17:18,270 --> 00:17:25,250
is that this is going to deploy a fifth

00:17:22,830 --> 00:17:25,250
node

00:17:26,220 --> 00:17:32,280
there we go and if we go back to the

00:17:29,280 --> 00:17:33,990
couch base console this should update

00:17:32,280 --> 00:17:35,850
them in a moment it takes a little while

00:17:33,990 --> 00:17:37,290
for it to refresh but we're going to

00:17:35,850 --> 00:17:39,090
what we're going to see is we're going

00:17:37,290 --> 00:17:41,190
to see that a fifth node is going to be

00:17:39,090 --> 00:17:43,910
provisioned and then it will start the

00:17:41,190 --> 00:17:46,670
rebalance process

00:17:43,910 --> 00:17:50,920
we're also gonna skip some steps here

00:17:46,670 --> 00:17:50,920
but what we've done is we've deployed a

00:17:52,300 --> 00:17:56,350
Twitter analytics engine so this is just

00:17:55,150 --> 00:17:58,510
basically a simple web application

00:17:56,350 --> 00:18:01,750
that's ingesting data from Twitter

00:17:58,510 --> 00:18:04,470
that's using those hashtags that I put

00:18:01,750 --> 00:18:04,470
up there earlier

00:18:05,010 --> 00:18:10,230
if you were so inclined to send messages

00:18:08,640 --> 00:18:13,220
to those hashtags so we would see this

00:18:10,230 --> 00:18:13,220
starting to populate

00:18:13,710 --> 00:18:17,480
and we can go into

00:18:28,340 --> 00:18:33,730
[Music]

00:18:30,040 --> 00:18:35,409
button delete pod zero

00:18:33,730 --> 00:18:37,830
and in this case we'll go back to

00:18:35,409 --> 00:18:37,830
servers

00:18:38,570 --> 00:18:43,160
we can see now that the UI finally

00:18:41,210 --> 00:18:44,080
caught up it detected that four was

00:18:43,160 --> 00:18:45,490
being built

00:18:44,080 --> 00:18:48,790
[Music]

00:18:45,490 --> 00:18:51,760
was provisioned and is adding it to the

00:18:48,790 --> 00:18:53,700
collective at the same time we should

00:18:51,760 --> 00:18:57,520
notice an another minute or two that the

00:18:53,700 --> 00:18:59,470
zero node is going to fall off it's

00:18:57,520 --> 00:19:00,210
going to detect that failure it's going

00:18:59,470 --> 00:19:03,780
to reprovision

00:19:00,210 --> 00:19:03,780
and we'll see if it's

00:19:08,740 --> 00:19:12,779
does this and I've been

00:19:17,720 --> 00:19:20,950
[Music]

00:19:28,390 --> 00:19:34,500
all right it's terminating we should see

00:19:31,179 --> 00:19:34,500
a fifth one popping up soon

00:19:39,730 --> 00:19:51,930
[Music]

00:19:54,960 --> 00:19:58,650
[Music]

00:20:05,190 --> 00:20:10,620
[Music]

00:20:09,090 --> 00:20:13,100
I happened to kill the one I was

00:20:10,620 --> 00:20:13,100
attached to

00:20:17,730 --> 00:20:23,190
okay so now it's detecting that zero is

00:20:20,980 --> 00:20:23,190
gone

00:20:24,620 --> 00:20:30,590
openshift / kubernetes should detect

00:20:27,710 --> 00:20:32,120
that we have an inconsistent replica

00:20:30,590 --> 00:20:34,490
state and it should provision another

00:20:32,120 --> 00:20:38,990
one soon

00:20:34,490 --> 00:20:41,600
it should also detect upon this

00:20:38,990 --> 00:20:43,850
booting of the new one issue kick off an

00:20:41,600 --> 00:20:45,620
auto rebalance that way is going to make

00:20:43,850 --> 00:20:47,610
sure that all of the data spread evenly

00:20:45,620 --> 00:20:57,430
across all of your nodes

00:20:47,610 --> 00:20:57,430
[Music]

00:20:58,210 --> 00:21:04,019
so there's multiple ways that you can

00:21:00,789 --> 00:21:05,950
deploy the architecture for Couchbase

00:21:04,019 --> 00:21:08,080
which is a little bit different than

00:21:05,950 --> 00:21:10,240
some of the other databases the things

00:21:08,080 --> 00:21:12,669
each one of those individual services

00:21:10,240 --> 00:21:15,490
and capabilities I talked about have

00:21:12,669 --> 00:21:18,700
their own sort of manager to it so you

00:21:15,490 --> 00:21:20,769
could choose to have ten nodes and have

00:21:18,700 --> 00:21:23,559
them all running that individual service

00:21:20,769 --> 00:21:24,999
consuming different pieces of it but

00:21:23,559 --> 00:21:27,879
once you start getting into more complex

00:21:24,999 --> 00:21:29,019
workloads in more defined workloads what

00:21:27,879 --> 00:21:30,909
we see is more of the bottom

00:21:29,019 --> 00:21:32,649
architecture where they will have sort

00:21:30,909 --> 00:21:35,470
of a data service tier that's they're

00:21:32,649 --> 00:21:37,869
probably document and their key value

00:21:35,470 --> 00:21:40,720
store stuff and then they'll separate

00:21:37,869 --> 00:21:42,369
out their specific services they're

00:21:40,720 --> 00:21:44,980
indexing service so you can have

00:21:42,369 --> 00:21:47,320
indexing run sort of on batch periods of

00:21:44,980 --> 00:21:49,419
time over certain periods and you're not

00:21:47,320 --> 00:21:51,190
having it constantly running or you're

00:21:49,419 --> 00:21:53,139
not having to worry about consuming

00:21:51,190 --> 00:21:56,980
those workloads the thing that gives

00:21:53,139 --> 00:21:58,840
them the cape it to doing this

00:21:56,980 --> 00:22:01,779
separately versus VMs and things like

00:21:58,840 --> 00:22:04,570
that is that they can use OpenShift

00:22:01,779 --> 00:22:06,490
and call individual containers and add

00:22:04,570 --> 00:22:10,379
more to the queue container collective

00:22:06,490 --> 00:22:10,379
as they're using more of these services

00:22:10,970 --> 00:22:17,900
so hopefully we should see this new node

00:22:15,980 --> 00:22:21,789
popping up soon and rebalancing

00:22:17,900 --> 00:22:21,789
[Music]

00:22:27,380 --> 00:22:30,280
thank you projects

00:22:39,650 --> 00:22:44,350
container not ready container not ready

00:22:56,720 --> 00:22:59,940
[Music]

00:23:01,620 --> 00:23:04,320
I've never done this before but I'm

00:23:03,120 --> 00:23:05,010
going to try and manually failover a

00:23:04,320 --> 00:23:11,410
note

00:23:05,010 --> 00:23:11,410
[Music]

00:23:14,000 --> 00:23:17,390
[Music]

00:23:27,050 --> 00:23:31,220
alright other than watching this thing

00:23:29,090 --> 00:23:33,610
catastrophic ly fail on me does anybody

00:23:31,220 --> 00:23:33,610
have any questions

00:23:36,460 --> 00:23:39,600
all right well thank you

00:23:46,140 --> 00:23:50,940
strange if anyone does have a question

00:23:48,360 --> 00:23:53,900
please do raise your hand so that we can

00:23:50,940 --> 00:23:53,900

YouTube URL: https://www.youtube.com/watch?v=CPI2kUrwR1c


