Title: Lightning Talks Friday 2
Publication date: 2016-02-12
Playlist: Lightning Talks
Description: 
	1. Florian Festi: What's happening in RPM development
2. Jan Šilhan: DNF roadmap
3. Why one would want to be Release Engineer?
4. Nikolai Kondrashov: Open-Source User Session Recording
5. Thorsten Leemhuis: Testing new kernels is easy and important– your should do it, too!
Captions: 
	00:00:33,370 --> 00:00:40,160
so everyone we are going to start the

00:00:38,059 --> 00:00:46,390
last part of the of this first day of

00:00:40,160 --> 00:00:46,390
that compliment liking dogs each speaker

00:00:53,530 --> 00:01:01,040
okay so let's make this quick so we can

00:00:57,280 --> 00:01:04,610
all call it a day that's my yearly what

00:01:01,040 --> 00:01:08,960
are we doing in rpm talk as you might

00:01:04,610 --> 00:01:12,700
have noticed with poached RPM 44 up 13

00:01:08,960 --> 00:01:16,070
into fedora last year which comes with a

00:01:12,700 --> 00:01:20,420
pretty long list of new changes so I'm

00:01:16,070 --> 00:01:22,460
only going over the most notably one of

00:01:20,420 --> 00:01:27,710
them are file triggers I don't know who

00:01:22,460 --> 00:01:29,960
is our only heard of five triggers okay

00:01:27,710 --> 00:01:34,070
it's pretty good they're actually

00:01:29,960 --> 00:01:35,990
already used in our peer in fedora the

00:01:34,070 --> 00:01:39,140
next thing that's not so much used yet

00:01:35,990 --> 00:01:43,580
is bullied and dependencies which have

00:01:39,140 --> 00:01:45,259
just made it into RPM also they are

00:01:43,580 --> 00:01:46,759
basically the extension of the week

00:01:45,259 --> 00:01:50,960
dependencies we pushed in there last

00:01:46,759 --> 00:01:55,759
year there are people working on it but

00:01:50,960 --> 00:01:58,400
it's not there yet the third bigger new

00:01:55,759 --> 00:02:02,979
feature which is as far as i know not

00:01:58,400 --> 00:02:06,829
used anywhere already is support for

00:02:02,979 --> 00:02:10,280
security i am a file attributes that's

00:02:06,829 --> 00:02:16,310
basically support for trusted computing

00:02:10,280 --> 00:02:19,549
on kernel level file system level thing

00:02:16,310 --> 00:02:21,530
so if you actually have started I've

00:02:19,549 --> 00:02:24,470
managed to boot into a trusted colonel

00:02:21,530 --> 00:02:27,140
you can then make sure the colonel only

00:02:24,470 --> 00:02:30,379
reads file which are also trusted so

00:02:27,140 --> 00:02:32,900
some guy or actually got from from IBM

00:02:30,379 --> 00:02:35,380
has been working on that I don't know of

00:02:32,900 --> 00:02:36,850
anybody anybody's actually interested

00:02:35,380 --> 00:02:40,810
to putting this into the real world

00:02:36,850 --> 00:02:43,030
maybe I BMS so if anyone in wants to

00:02:40,810 --> 00:02:48,520
have trusted computing in fedora we

00:02:43,030 --> 00:02:51,600
support it now go for it and in addition

00:02:48,520 --> 00:02:53,920
to these three big things we have a huge

00:02:51,600 --> 00:02:55,990
number of smaller stuff i have only

00:02:53,920 --> 00:02:58,320
listed the stuff that's maybe more

00:02:55,990 --> 00:03:02,950
interesting for package or so or users

00:02:58,320 --> 00:03:05,020
we've added a remote path post remove

00:03:02,950 --> 00:03:07,000
path post fixes which is basically a

00:03:05,020 --> 00:03:11,260
setting which allows you to cut off the

00:03:07,000 --> 00:03:13,330
names of file for files this is useful

00:03:11,260 --> 00:03:15,820
to create sub packages which have

00:03:13,330 --> 00:03:19,390
conflicting files on them the problem is

00:03:15,820 --> 00:03:21,940
as rpm has basically one tree or files

00:03:19,390 --> 00:03:24,430
which it packages into sub packages it's

00:03:21,940 --> 00:03:26,860
not possible to have to file a multiple

00:03:24,430 --> 00:03:31,090
sub packages with different content for

00:03:26,860 --> 00:03:33,670
example having different config files in

00:03:31,090 --> 00:03:35,650
sub packages that are pre-configured for

00:03:33,670 --> 00:03:38,650
different use cases and it's pretty

00:03:35,650 --> 00:03:41,110
annoying and I think how out how r has

00:03:38,650 --> 00:03:44,850
and couple of other guys have been

00:03:41,110 --> 00:03:48,070
nagging about this so that's basically a

00:03:44,850 --> 00:03:51,700
band-aid to allow this so it's basically

00:03:48,070 --> 00:03:53,860
you give a postfix for the names it is

00:03:51,700 --> 00:03:57,670
cut off and then you can basically use

00:03:53,860 --> 00:04:03,540
the remaining name in in the sub

00:03:57,670 --> 00:04:06,160
packages then we have new checks for a

00:04:03,540 --> 00:04:08,590
for encoding of the spec file something

00:04:06,160 --> 00:04:09,790
a lot of people have wanted to have for

00:04:08,590 --> 00:04:11,650
quite a while because they are still

00:04:09,790 --> 00:04:15,820
spec files out there which are not

00:04:11,650 --> 00:04:18,850
properly utf-8 encoded so and I think

00:04:15,820 --> 00:04:22,720
it's still disabled or it just gives a

00:04:18,850 --> 00:04:24,130
warning right now so I don't know at

00:04:22,720 --> 00:04:27,510
some point we are going to switch that

00:04:24,130 --> 00:04:30,130
to enforcing and it will basically

00:04:27,510 --> 00:04:34,090
prevent rpm build from building packages

00:04:30,130 --> 00:04:39,900
which are which have non proper

00:04:34,090 --> 00:04:44,640
encodings in them we also have enabled

00:04:39,900 --> 00:04:47,970
the process expansion for a clubbing

00:04:44,640 --> 00:04:47,970
minor thing

00:04:48,389 --> 00:04:54,190
but you can use it in the files for

00:04:50,860 --> 00:04:56,620
example and we've extended our p.m.

00:04:54,190 --> 00:04:59,889
built with a new parameter so you can do

00:04:56,620 --> 00:05:03,160
all build steps directly from an SRM so

00:04:59,889 --> 00:05:05,590
our four rebuilt you already could

00:05:03,160 --> 00:05:07,389
rebuild and source RPM directly but you

00:05:05,590 --> 00:05:09,370
could only basically do a full rebuild

00:05:07,389 --> 00:05:14,949
and not built it to do all those stages

00:05:09,370 --> 00:05:17,320
that's supported now we also added what

00:05:14,949 --> 00:05:19,330
recommends and all the other queries for

00:05:17,320 --> 00:05:22,240
for the week dependencies which we

00:05:19,330 --> 00:05:31,479
somehow missed last year when we added

00:05:22,240 --> 00:05:38,320
with dependencies yeah I don't know I

00:05:31,479 --> 00:05:41,410
must I must have looked elsewhere and we

00:05:38,320 --> 00:05:44,169
also switched the signing over to use a

00:05:41,410 --> 00:05:46,419
pin entry more or less because pin

00:05:44,169 --> 00:05:48,910
increase that you are no longer allowed

00:05:46,419 --> 00:05:53,199
to call us with the command line

00:05:48,910 --> 00:05:56,710
parameter so now it actually GP cheetah

00:05:53,199 --> 00:05:58,210
changed to no longer allow passing the

00:05:56,710 --> 00:06:00,820
password or the command line and so we

00:05:58,210 --> 00:06:03,460
head to such as our it's done now I hope

00:06:00,820 --> 00:06:05,650
there's no too many problems with that I

00:06:03,460 --> 00:06:07,300
know that a couple of other

00:06:05,650 --> 00:06:11,130
distributions had issues with not having

00:06:07,300 --> 00:06:15,130
the proper version of gpg and pin entry

00:06:11,130 --> 00:06:17,409
lying around you now learn from unused

00:06:15,130 --> 00:06:20,080
macros and there's a long list of other

00:06:17,409 --> 00:06:23,880
stuff we fixed there's a release note so

00:06:20,080 --> 00:06:28,620
if you're interested okay five minutes

00:06:23,880 --> 00:06:31,270
so then we've continued with development

00:06:28,620 --> 00:06:34,750
the big feature we're working on right

00:06:31,270 --> 00:06:37,060
now or is getting stabilized as the new

00:06:34,750 --> 00:06:38,440
database format some of you might

00:06:37,060 --> 00:06:40,530
haven't seen it all today are under

00:06:38,440 --> 00:06:43,630
mailing list with the huge discussion

00:06:40,530 --> 00:06:45,220
problem is that there that the Berkeley

00:06:43,630 --> 00:06:49,750
will be we are using now has been bought

00:06:45,220 --> 00:06:51,699
up by Oracle and it chef change to the

00:06:49,750 --> 00:06:53,380
license for a new version and there's

00:06:51,699 --> 00:06:55,860
all this politics involved and so we

00:06:53,380 --> 00:06:58,840
have to move away from that basically

00:06:55,860 --> 00:07:00,340
another thing that might be interesting

00:06:58,840 --> 00:07:02,199
maybe not so much for fedora

00:07:00,340 --> 00:07:05,260
but for other people that are building

00:07:02,199 --> 00:07:08,680
packages is multi-threaded except

00:07:05,260 --> 00:07:12,760
compression we have had some customers

00:07:08,680 --> 00:07:15,010
who had well set up continuous

00:07:12,760 --> 00:07:18,310
integration which worked well by by

00:07:15,010 --> 00:07:21,610
compiling on like 64 processors which

00:07:18,310 --> 00:07:23,770
was quick and fast until you have to

00:07:21,610 --> 00:07:26,199
compress the RPM which is then single

00:07:23,770 --> 00:07:28,090
threaded and takes a while if the

00:07:26,199 --> 00:07:30,490
package is big enough so we have known

00:07:28,090 --> 00:07:38,320
as solution for this and it's coming up

00:07:30,490 --> 00:07:42,820
in the next release I think I think it's

00:07:38,320 --> 00:07:44,470
only cool it's currently so far as

00:07:42,820 --> 00:07:47,380
further it's not only compression I

00:07:44,470 --> 00:07:48,970
think decompression is for one fast

00:07:47,380 --> 00:07:51,880
enough and not have on the other hand

00:07:48,970 --> 00:07:58,120
you need to read it sequentially anyway

00:07:51,880 --> 00:08:01,750
so there's no this my create problems

00:07:58,120 --> 00:08:04,870
with Delta R pins actually but i hope i

00:08:01,750 --> 00:08:07,300
have an intern right I can put on this

00:08:04,870 --> 00:08:09,520
task to check and make sure delta rpms

00:08:07,300 --> 00:08:12,669
will continue to work there's all kind

00:08:09,520 --> 00:08:16,090
of tricky stuff like being able to

00:08:12,669 --> 00:08:19,150
actually reproduce the Delta Delta spit

00:08:16,090 --> 00:08:24,190
or to recreate a package in a bit by a

00:08:19,150 --> 00:08:26,349
bit compatible way need to hurry up a

00:08:24,190 --> 00:08:28,870
 so there's a new dependency

00:08:26,349 --> 00:08:31,599
generator written in Python written in

00:08:28,870 --> 00:08:35,979
Python which comes in from the man drive

00:08:31,599 --> 00:08:37,690
our crowd there's been some discussions

00:08:35,979 --> 00:08:40,169
that one hundred percent finalized how

00:08:37,690 --> 00:08:44,440
it's going to be but that's coming up

00:08:40,169 --> 00:08:48,370
and there's a lot of small fixes so they

00:08:44,440 --> 00:08:51,010
are not going to be that much big big

00:08:48,370 --> 00:08:53,490
changes but more small bug fixes and all

00:08:51,010 --> 00:08:57,339
kind of clean up so we have basically

00:08:53,490 --> 00:09:00,910
started to do a backpack fixing Friday

00:08:57,339 --> 00:09:03,430
to get down with the number of fact back

00:09:00,910 --> 00:09:05,350
tickets we have in fedora in on our own

00:09:03,430 --> 00:09:07,600
backtrack tracker another interesting

00:09:05,350 --> 00:09:09,730
thing that we just added recently and

00:09:07,600 --> 00:09:12,279
pack ported to fedora is we made missing

00:09:09,730 --> 00:09:14,829
ok which usul used to be

00:09:12,279 --> 00:09:16,660
basically config missing okay so could

00:09:14,829 --> 00:09:18,490
have config fights that are you allowed

00:09:16,660 --> 00:09:22,300
to delete without getting an error with

00:09:18,490 --> 00:09:25,899
with verify so we promoted missing okay

00:09:22,300 --> 00:09:29,559
to an full-featured file click on file

00:09:25,899 --> 00:09:32,220
attribute the G lipsy people are

00:09:29,559 --> 00:09:37,029
currently needing this to get their

00:09:32,220 --> 00:09:38,889
language packages done s there for some

00:09:37,029 --> 00:09:42,160
reason have files they want to merge in

00:09:38,889 --> 00:09:47,829
their language databases somehow details

00:09:42,160 --> 00:09:49,749
to ask some killa c key loopsy people so

00:09:47,829 --> 00:09:52,329
that's what we're doing right now what

00:09:49,749 --> 00:09:55,089
else we've moved will I cannot move that

00:09:52,329 --> 00:09:57,670
we are cloned our repository to github

00:09:55,089 --> 00:09:59,079
this has worked out very well for us so

00:09:57,670 --> 00:10:01,959
we've we are getting a lot of

00:09:59,079 --> 00:10:05,379
contributions right now we're even have

00:10:01,959 --> 00:10:07,449
to set aside a day a week to go over all

00:10:05,379 --> 00:10:10,959
the pull requests and get them merged

00:10:07,449 --> 00:10:13,300
and reviewed for now a lot of these

00:10:10,959 --> 00:10:17,139
contributions are outside from the

00:10:13,300 --> 00:10:20,920
Fedora world so I want to urge you to

00:10:17,139 --> 00:10:22,689
have a look and make sure that not only

00:10:20,920 --> 00:10:25,449
the other distributions are actually

00:10:22,689 --> 00:10:31,240
pushing stuff in there with any without

00:10:25,449 --> 00:10:34,209
anyone else noticing or caring so that's

00:10:31,240 --> 00:10:42,209
what happening there how many minutes do

00:10:34,209 --> 00:10:42,209
l have left one then I'm done

00:11:44,850 --> 00:11:55,480
can you hear me okay hello I'm honza

00:11:51,699 --> 00:11:59,619
she'll hon and now we are moving one

00:11:55,480 --> 00:12:02,529
layer up from rpm to DNF in my talk I

00:11:59,619 --> 00:12:06,129
will cover what we have done from

00:12:02,529 --> 00:12:17,709
previous year up until now and also I

00:12:06,129 --> 00:12:21,540
will reveal some future plans for dnf so

00:12:17,709 --> 00:12:24,249
DNA is DNFs main goal is still to

00:12:21,540 --> 00:12:29,649
maintain the compatibility with young

00:12:24,249 --> 00:12:33,939
and so far we have young hotels almost

00:12:29,649 --> 00:12:38,759
fully compatible with BNF plugins so you

00:12:33,939 --> 00:12:38,759
can search for its counterpart we are

00:12:38,999 --> 00:12:48,220
manual page yum to DNF VF also added

00:12:45,850 --> 00:12:52,540
dimensions about dnf in a federal

00:12:48,220 --> 00:12:56,470
project and federer baku pages so every

00:12:52,540 --> 00:13:01,119
almost every use case is covered in dnf

00:12:56,470 --> 00:13:04,779
stupid code as well for dues of you who

00:13:01,119 --> 00:13:07,419
are still using yam I have a good news

00:13:04,779 --> 00:13:10,809
for you you can switch to the NF in

00:13:07,419 --> 00:13:13,269
immediately you can just be enough

00:13:10,809 --> 00:13:16,720
migrate and it would transfer all your

00:13:13,269 --> 00:13:21,759
history and other metadata from young to

00:13:16,720 --> 00:13:28,089
DNF the status of the packages relying

00:13:21,759 --> 00:13:31,689
on yam there are only 14 packages no

00:13:28,089 --> 00:13:35,350
other the rest of the packages were

00:13:31,689 --> 00:13:37,089
reported to the NF and in federal base

00:13:35,350 --> 00:13:41,319
image there is no back

00:13:37,089 --> 00:13:46,089
which requires young the tool fed up

00:13:41,319 --> 00:13:49,480
which takes care of Federer upgrade to

00:13:46,089 --> 00:13:56,819
the next version it uses now dnf back

00:13:49,480 --> 00:14:00,249
and that means that you it no longer

00:13:56,819 --> 00:14:06,610
ignores package conflicts and you could

00:14:00,249 --> 00:14:09,249
be able to boot up again okay let's look

00:14:06,610 --> 00:14:14,350
at the new features that happened in the

00:14:09,249 --> 00:14:17,170
NF we introduced new mark command let's

00:14:14,350 --> 00:14:21,910
say you install package a which requires

00:14:17,170 --> 00:14:25,540
package B you install you actually use

00:14:21,910 --> 00:14:29,100
to package these two packages and then

00:14:25,540 --> 00:14:32,639
you decide you want to remove package a

00:14:29,100 --> 00:14:35,259
then unit notice that package bay is

00:14:32,639 --> 00:14:38,559
also getting an installed to prevent

00:14:35,259 --> 00:14:41,379
this you can type dnf mark install

00:14:38,559 --> 00:14:45,660
package B and it will stay installed

00:14:41,379 --> 00:14:49,360
until you decide to remove it explicitly

00:14:45,660 --> 00:14:56,230
dnf has full week dependency support so

00:14:49,360 --> 00:14:59,110
you can so hey yes so you can vary in

00:14:56,230 --> 00:15:02,819
the NFL book very for it it has minus

00:14:59,110 --> 00:15:07,959
minus such as enhancers supplements and

00:15:02,819 --> 00:15:11,649
what enhances and so on speeches dnf

00:15:07,959 --> 00:15:16,230
also has two states how it dreads big

00:15:11,649 --> 00:15:20,230
dependencies by default it installs all

00:15:16,230 --> 00:15:22,660
recommended packages but you can turn

00:15:20,230 --> 00:15:27,160
the behavior of if you want to keep your

00:15:22,660 --> 00:15:29,920
system minimal you just have to set to

00:15:27,160 --> 00:15:34,839
full install big depths in dnf config

00:15:29,920 --> 00:15:37,499
option in configuration file i think i

00:15:34,839 --> 00:15:41,160
must say that dnf is more user friendly

00:15:37,499 --> 00:15:43,809
with regard to user experience it

00:15:41,160 --> 00:15:45,970
provides you with some hints like that

00:15:43,809 --> 00:15:49,240
showing you that some packages were

00:15:45,970 --> 00:15:51,250
skipped and how to resolve some

00:15:49,240 --> 00:15:54,620
conflicts

00:15:51,250 --> 00:15:59,839
we also for package maintain Earth's

00:15:54,620 --> 00:16:03,529
describe the rules or actually bro the

00:15:59,839 --> 00:16:08,360
draft how they can prefer some package

00:16:03,529 --> 00:16:15,320
to another by using big dependencies or

00:16:08,360 --> 00:16:20,000
virgin provides okay now let's look for

00:16:15,320 --> 00:16:25,370
the plan to the next year dnf so far is

00:16:20,000 --> 00:16:29,720
using for C libraries well young was

00:16:25,370 --> 00:16:33,589
written entirely in Python recently we

00:16:29,720 --> 00:16:36,380
have merged dnf c library with package

00:16:33,589 --> 00:16:42,470
get library and we are planning to move

00:16:36,380 --> 00:16:45,050
more part from dnf to c code base we

00:16:42,470 --> 00:16:47,930
would like to also for package maintain

00:16:45,050 --> 00:16:50,930
errs describe some rules and provide an

00:16:47,930 --> 00:16:54,890
solution with examples how they can

00:16:50,930 --> 00:16:58,700
resolve some packaging problems with the

00:16:54,890 --> 00:17:04,579
use of cool stuff from RPM like deep and

00:16:58,700 --> 00:17:10,240
rich dependencies and the last thing but

00:17:04,579 --> 00:17:12,589
not lasting we would like to DNF to

00:17:10,240 --> 00:17:16,400
actually provide more of their boots

00:17:12,589 --> 00:17:18,640
output when you are dealing with some

00:17:16,400 --> 00:17:21,650
package conflicts and you want to know

00:17:18,640 --> 00:17:25,730
what happened inside the dependencies

00:17:21,650 --> 00:17:30,559
over this world plans now i would like

00:17:25,730 --> 00:17:33,830
to invite you to the talk that's which

00:17:30,559 --> 00:17:37,160
has the title developers q is of

00:17:33,830 --> 00:17:40,970
themselves and as title says it's mainly

00:17:37,160 --> 00:17:44,260
targeted for upstream developers who has

00:17:40,970 --> 00:17:47,510
no q ease and would like to deliver

00:17:44,260 --> 00:17:53,059
stable releases of their application

00:17:47,510 --> 00:17:57,100
with minimal effort so you are free free

00:17:53,059 --> 00:18:00,110
to go there we will explain our

00:17:57,100 --> 00:18:03,080
continuous integration workflow which

00:18:00,110 --> 00:18:09,440
components we have used there

00:18:03,080 --> 00:18:29,870
it will be on Sunday at 14 10 do you

00:18:09,440 --> 00:18:31,640
have any questions no no only when

00:18:29,870 --> 00:18:42,350
there's conflict and transaction cannot

00:18:31,640 --> 00:18:45,380
be resolved or yeah then you can then

00:18:42,350 --> 00:18:49,010
you can switch it on in verbose mode it

00:18:45,380 --> 00:19:04,610
will be shown yeah this is the future

00:18:49,010 --> 00:19:16,360
plan any other questions it will be

00:19:04,610 --> 00:19:16,360
probably some draft packaging drop yeah

00:19:22,149 --> 00:19:30,019
you can actually use version from equal

00:19:25,250 --> 00:19:37,309
7 I think yeah but butters yeah only

00:19:30,019 --> 00:19:40,750
virgin I thought I think 0.64 and arrow

00:19:37,309 --> 00:19:44,110
questions okay

00:19:40,750 --> 00:19:47,860
a pleasure switch to a storage specific

00:19:44,110 --> 00:19:50,560
update finally be implemented because

00:19:47,860 --> 00:19:53,740
this dealers are requesting foxy little

00:19:50,560 --> 00:20:00,760
twink permit this but this dear and

00:19:53,740 --> 00:20:03,900
tested and it was finally agreed that it

00:20:00,760 --> 00:20:03,900
should be implemented

00:20:16,070 --> 00:20:23,970
that's one reason why we're paper to

00:20:19,380 --> 00:20:29,580
need to use young because it's like

00:20:23,970 --> 00:20:33,950
humanity and excuse me let's be covered

00:20:29,580 --> 00:20:33,950
by the world security plugin so yeah

00:20:34,070 --> 00:20:40,970
okay and other questions okay thank you

00:20:38,549 --> 00:20:40,970
for attention

00:22:03,380 --> 00:22:10,140
hello okay I'm not going to talk a

00:22:08,159 --> 00:22:12,539
further up from be enough but it is

00:22:10,140 --> 00:22:16,440
completely different thing I'm going to

00:22:12,539 --> 00:22:19,409
talk about release engineering before i

00:22:16,440 --> 00:22:21,690
start my talk I would like to show you

00:22:19,409 --> 00:22:36,289
this short clip which always kind of

00:22:21,690 --> 00:22:36,289
makes me smile one second sorry yes

00:23:01,040 --> 00:23:08,550
so this is something when i hear release

00:23:04,470 --> 00:23:11,490
think I kind of remember this the crazy

00:23:08,550 --> 00:23:16,440
baby which is kind of trained hard and

00:23:11,490 --> 00:23:21,320
she is the one to catch that so let me

00:23:16,440 --> 00:23:25,110
move on so why I'm a release engineer I

00:23:21,320 --> 00:23:27,330
thank you I come from the development

00:23:25,110 --> 00:23:29,490
background and i also have an experience

00:23:27,330 --> 00:23:33,210
as release and configuration manager and

00:23:29,490 --> 00:23:37,170
i also worked in customer support so

00:23:33,210 --> 00:23:39,930
what I realized when I while I handled

00:23:37,170 --> 00:23:43,650
all this role is I like solving customer

00:23:39,930 --> 00:23:46,020
problems and i would like to dive into

00:23:43,650 --> 00:23:49,200
the problem and technically see what is

00:23:46,020 --> 00:23:52,320
going wrong and also i was passionate

00:23:49,200 --> 00:23:55,260
about delivery and release processes so

00:23:52,320 --> 00:23:57,930
that's when I kind of discovered release

00:23:55,260 --> 00:24:00,870
engineer is kind of a role which enables

00:23:57,930 --> 00:24:07,530
me to do all these things so that's why

00:24:00,870 --> 00:24:10,500
I am here and so what you have in store

00:24:07,530 --> 00:24:12,390
as in what is in store for you when you

00:24:10,500 --> 00:24:15,390
become a release engineer what

00:24:12,390 --> 00:24:18,000
opportunities it opens so from my

00:24:15,390 --> 00:24:20,490
experience what I understand being a

00:24:18,000 --> 00:24:24,540
release engineer at Red Hat it has given

00:24:20,490 --> 00:24:26,760
me an opportunity to develop tools which

00:24:24,540 --> 00:24:31,440
can be leveraged for the release of

00:24:26,760 --> 00:24:33,210
foster release process and you will get

00:24:31,440 --> 00:24:36,900
to work with the bunch of inspired

00:24:33,210 --> 00:24:39,030
people and you collaborate with themes

00:24:36,900 --> 00:24:43,590
which is going to expand your knowledge

00:24:39,030 --> 00:24:46,290
about the product of the project so and

00:24:43,590 --> 00:24:47,760
you will get a broader idea about how

00:24:46,290 --> 00:24:49,770
the product is going to be delivered to

00:24:47,760 --> 00:24:52,680
the customer how can i mix make it

00:24:49,770 --> 00:24:55,140
accessible to the customer and other

00:24:52,680 --> 00:24:55,900
parameters like quality and security of

00:24:55,140 --> 00:24:59,650
the product

00:24:55,900 --> 00:25:01,990
so that's that's I think it opens up a

00:24:59,650 --> 00:25:05,530
lot of opportunities and it can be at

00:25:01,990 --> 00:25:08,380
your capacity you can grow in to further

00:25:05,530 --> 00:25:11,050
in any capacity being a release engineer

00:25:08,380 --> 00:25:13,180
you will work with multiple products and

00:25:11,050 --> 00:25:16,470
you will with work with multiple teams

00:25:13,180 --> 00:25:20,530
and it will give you a thought about how

00:25:16,470 --> 00:25:23,560
the processes that we have how we can

00:25:20,530 --> 00:25:25,930
leverage it across the products so you

00:25:23,560 --> 00:25:28,530
will be thinking towards that and it's

00:25:25,930 --> 00:25:31,870
kind of a constant process it is

00:25:28,530 --> 00:25:34,900
reaching that maturity and you will

00:25:31,870 --> 00:25:37,120
think of innovative options of having

00:25:34,900 --> 00:25:40,690
different tools how we can make the

00:25:37,120 --> 00:25:43,450
installation easy packaging easy and how

00:25:40,690 --> 00:25:46,270
to make the delivery process kind of

00:25:43,450 --> 00:25:48,940
really streamlined and think in

00:25:46,270 --> 00:25:52,960
different ways so it opens up a

00:25:48,940 --> 00:25:55,330
different opportunities for you so what

00:25:52,960 --> 00:25:57,670
a release engineering do so I would like

00:25:55,330 --> 00:26:00,630
to talk about my delivery in how it

00:25:57,670 --> 00:26:02,590
looks like so as a release engineer

00:26:00,630 --> 00:26:05,350
broadleaf i categorize your

00:26:02,590 --> 00:26:08,710
responsibilities would be billed and

00:26:05,350 --> 00:26:10,870
packaging and content management and

00:26:08,710 --> 00:26:13,090
delivery into customer environments and

00:26:10,870 --> 00:26:14,860
also through test environments where the

00:26:13,090 --> 00:26:19,990
developer wants to test it or the Kiwi

00:26:14,860 --> 00:26:22,540
wants to test it and this will it also

00:26:19,990 --> 00:26:24,430
means that release engineer will be

00:26:22,540 --> 00:26:27,040
engaged starting from the planning phase

00:26:24,430 --> 00:26:28,630
of a product so when any product or

00:26:27,040 --> 00:26:33,040
project is initiated you will be

00:26:28,630 --> 00:26:35,080
contacted for as a person the go-to

00:26:33,040 --> 00:26:37,090
person to understand what are the

00:26:35,080 --> 00:26:39,340
contents I am delivering how I should be

00:26:37,090 --> 00:26:40,810
doing it and what are the different

00:26:39,340 --> 00:26:43,290
methods that are available which

00:26:40,810 --> 00:26:47,200
distribution platforms I should be

00:26:43,290 --> 00:26:50,740
looking for things like this and also

00:26:47,200 --> 00:26:52,600
ensuring if the contents are accessible

00:26:50,740 --> 00:26:55,240
to the customer how I can give them how

00:26:52,600 --> 00:26:57,520
I can deliver it to the customer and if

00:26:55,240 --> 00:27:00,340
they see any issue how what is the

00:26:57,520 --> 00:27:01,900
process they should follow and it's like

00:27:00,340 --> 00:27:04,210
really a being release engineer you will

00:27:01,900 --> 00:27:06,340
be evangelizing on the software

00:27:04,210 --> 00:27:08,620
development very processes that are used

00:27:06,340 --> 00:27:09,460
and you will be kind of a provider

00:27:08,620 --> 00:27:12,460
consultancy

00:27:09,460 --> 00:27:15,159
the products on how they can really go

00:27:12,460 --> 00:27:16,659
forward and once they deliver the

00:27:15,159 --> 00:27:18,820
products and how will it look like in

00:27:16,659 --> 00:27:21,880
the market and how the customer will see

00:27:18,820 --> 00:27:24,580
it say for example when you distribute

00:27:21,880 --> 00:27:27,669
it as a docker image or I sews or any

00:27:24,580 --> 00:27:29,700
other rpms or anything how are we going

00:27:27,669 --> 00:27:32,230
to kind of package it and make it

00:27:29,700 --> 00:27:37,330
reachable to the customer so that's what

00:27:32,230 --> 00:27:41,470
we work with on that and and on another

00:27:37,330 --> 00:27:43,570
note we also develop tools we kind of

00:27:41,470 --> 00:27:45,159
keep a track offer to the different

00:27:43,570 --> 00:27:47,169
products that are coming in what

00:27:45,159 --> 00:27:48,850
different methods they are using ease

00:27:47,169 --> 00:27:51,909
our tools supporting those build

00:27:48,850 --> 00:27:53,890
environments test environments and the

00:27:51,909 --> 00:27:55,840
test frameworks are anything that

00:27:53,890 --> 00:27:57,460
they're following the service tools

00:27:55,840 --> 00:27:59,289
support it do we need to come up with

00:27:57,460 --> 00:28:01,539
something new and support their

00:27:59,289 --> 00:28:04,840
processes and we think in all these

00:28:01,539 --> 00:28:06,970
different ways and try to make the

00:28:04,840 --> 00:28:10,179
release as smooth as possible for them

00:28:06,970 --> 00:28:12,250
so i think thats all i had to say and if

00:28:10,179 --> 00:28:13,840
anyone is interested in release

00:28:12,250 --> 00:28:17,590
engineering and to know more about it

00:28:13,840 --> 00:28:22,380
you can contact me on this so any

00:28:17,590 --> 00:28:22,380
questions yep

00:28:30,580 --> 00:28:36,890
actually we have a choice which product

00:28:33,799 --> 00:28:39,650
we would like to work on and it's not

00:28:36,890 --> 00:28:42,890
like only one product you might be

00:28:39,650 --> 00:28:46,880
interested to work on many so it is up

00:28:42,890 --> 00:28:48,650
to you to choose and it's not only rpms

00:28:46,880 --> 00:28:57,230
or anything that you can explore other

00:28:48,650 --> 00:29:00,400
options to any other so that's it okay

00:28:57,230 --> 00:29:00,400
thank you thanks for coming

00:30:15,990 --> 00:30:21,250
hello everyone my name is Nikolai

00:30:18,759 --> 00:30:23,769
condish off i work at identity

00:30:21,250 --> 00:30:26,230
management and security robot redhead

00:30:23,769 --> 00:30:29,169
and i'm here to present about a project

00:30:26,230 --> 00:30:31,840
we are doing for a while now and what is

00:30:29,169 --> 00:30:40,179
going to happen and what's exciting

00:30:31,840 --> 00:30:46,149
about it doesn't work I don't know it is

00:30:40,179 --> 00:30:50,700
ugly I must be in the other way yeah

00:30:46,149 --> 00:30:53,710
thanks that's better so the idea is that

00:30:50,700 --> 00:30:55,269
many companies have especially big

00:30:53,710 --> 00:30:59,620
companies have contractors and

00:30:55,269 --> 00:31:02,679
peripheral seesawed means with which

00:30:59,620 --> 00:31:07,240
they don't very have really big trust

00:31:02,679 --> 00:31:09,220
and which come in just for a while but

00:31:07,240 --> 00:31:13,720
need to access their privileged systems

00:31:09,220 --> 00:31:17,350
and have my privilege taxes to some

00:31:13,720 --> 00:31:20,320
critical stuff also some government

00:31:17,350 --> 00:31:22,779
organizations at least in US are

00:31:20,320 --> 00:31:28,840
required by law to present recordings of

00:31:22,779 --> 00:31:31,179
user sessions for review so we're trying

00:31:28,840 --> 00:31:35,740
to build an open source system / handle

00:31:31,179 --> 00:31:38,080
that there's plenty of commercial

00:31:35,740 --> 00:31:42,480
systems one of the bigger ones that

00:31:38,080 --> 00:31:45,179
Centrify and there is plenty I just by

00:31:42,480 --> 00:31:47,730
just looking one two night I found eight

00:31:45,179 --> 00:31:50,289
products which are more or less

00:31:47,730 --> 00:31:52,929
fulfilling that role and they are pretty

00:31:50,289 --> 00:31:54,580
good most of them they have centralized

00:31:52,929 --> 00:31:57,490
servers to store the recordings to

00:31:54,580 --> 00:31:59,409
search them to play them back with

00:31:57,490 --> 00:32:01,960
various speeds and rewinding and look

00:31:59,409 --> 00:32:03,669
for comments which user entered at this

00:32:01,960 --> 00:32:07,590
point and just to whine to that point in

00:32:03,669 --> 00:32:11,710
the recording and like it's like magic

00:32:07,590 --> 00:32:13,889
they are pretty good but on the open

00:32:11,710 --> 00:32:16,730
source side there's really nothing

00:32:13,889 --> 00:32:18,679
nothing good really

00:32:16,730 --> 00:32:21,290
other product but that there is to do

00:32:18,679 --> 00:32:23,990
that allows to record user sessions like

00:32:21,290 --> 00:32:25,790
the the privileged access into local

00:32:23,990 --> 00:32:27,919
files but there is no way to deliver to

00:32:25,790 --> 00:32:30,770
the servers like no built-in way there

00:32:27,919 --> 00:32:34,460
is no integration with the user

00:32:30,770 --> 00:32:36,620
management or anything there are some

00:32:34,460 --> 00:32:40,520
tools that allow like central recording

00:32:36,620 --> 00:32:42,530
like teammate i/o or asking Emma or

00:32:40,520 --> 00:32:45,410
short-term where you can upload your

00:32:42,530 --> 00:32:47,570
session somewhere the single place but

00:32:45,410 --> 00:32:51,669
it's obviously not suitable for security

00:32:47,570 --> 00:32:54,679
purposes so really there is there is

00:32:51,669 --> 00:32:58,610
nothing that is fulfilling that role in

00:32:54,679 --> 00:33:05,390
open source world and that that's where

00:32:58,610 --> 00:33:09,500
we come in so we are working on exactly

00:33:05,390 --> 00:33:12,260
this stuff that the commercial solutions

00:33:09,500 --> 00:33:13,809
provide but we are doing it the

00:33:12,260 --> 00:33:16,280
open-source way we are doing everything

00:33:13,809 --> 00:33:17,990
from open source components and very

00:33:16,280 --> 00:33:23,480
open source and everything that we are

00:33:17,990 --> 00:33:26,390
doing extra naturally we are using the

00:33:23,480 --> 00:33:28,940
stuff that we have in our identity

00:33:26,390 --> 00:33:32,470
management team so we planning on using

00:33:28,940 --> 00:33:37,010
three IPA as the central management

00:33:32,470 --> 00:33:40,460
system on the servers and on the client

00:33:37,010 --> 00:33:44,440
side we are using sssd which is going to

00:33:40,460 --> 00:33:48,830
control session recording itself

00:33:44,440 --> 00:33:52,040
configure everything and control who is

00:33:48,830 --> 00:33:57,890
recorded how how will he or she is

00:33:52,040 --> 00:34:01,730
recorded etc so everyone probably knows

00:33:57,890 --> 00:34:04,970
what all the DS it's for those who

00:34:01,730 --> 00:34:08,470
doesn't know it is a system that gets

00:34:04,970 --> 00:34:08,470
some messages from the kernel and

00:34:10,179 --> 00:34:16,159
records what user accessed what and

00:34:13,280 --> 00:34:18,560
what's this calls were invoked and etc

00:34:16,159 --> 00:34:22,669
etc which we can use the record what

00:34:18,560 --> 00:34:26,000
comments the user executed and exactly

00:34:22,669 --> 00:34:29,389
what files were accessed and apply

00:34:26,000 --> 00:34:31,720
filters to which files we want to track

00:34:29,389 --> 00:34:31,720
at

00:34:31,800 --> 00:34:38,380
that's good but there is really no good

00:34:35,770 --> 00:34:44,200
terminal recording solution no program

00:34:38,380 --> 00:34:46,179
that is that allows the record what user

00:34:44,200 --> 00:34:48,280
did on the terminal what he saw on the

00:34:46,179 --> 00:34:51,460
terminal what he typed in and what was

00:34:48,280 --> 00:34:53,710
displayed for him there is the again the

00:34:51,460 --> 00:34:55,450
script the pseudo but they are not

00:34:53,710 --> 00:34:57,880
integrated well with central delivery

00:34:55,450 --> 00:35:01,750
that's why we are implementing this

00:34:57,880 --> 00:35:07,840
thing and I am the one implementing it

00:35:01,750 --> 00:35:14,640
right now so it's a tool that basically

00:35:07,840 --> 00:35:16,990
gets in in front of the users shell

00:35:14,640 --> 00:35:20,260
records whatever passes between the

00:35:16,990 --> 00:35:27,880
shell and its user terminal and logs

00:35:20,260 --> 00:35:31,660
that in Jason to wherever we want so for

00:35:27,880 --> 00:35:34,710
example there is a user session user

00:35:31,660 --> 00:35:39,670
trying to execute a comment a pseudo and

00:35:34,710 --> 00:35:47,650
below is what gets logged 26 lock at the

00:35:39,670 --> 00:35:50,440
moment and as he has shown as the on the

00:35:47,650 --> 00:35:53,070
previous picture eventually from the

00:35:50,440 --> 00:35:56,890
lock server it gets to elasticsearch

00:35:53,070 --> 00:36:00,630
which would allow us to search

00:35:56,890 --> 00:36:03,190
everything to visualize everything and

00:36:00,630 --> 00:36:07,680
eventually the display that in cabana

00:36:03,190 --> 00:36:10,360
and our current idea is to get a

00:36:07,680 --> 00:36:12,190
playback visualization to get a nice

00:36:10,360 --> 00:36:16,150
play back with rewinding and everything

00:36:12,190 --> 00:36:17,920
in cabana as as good as possible they

00:36:16,150 --> 00:36:21,790
have no idea that's going to work but we

00:36:17,920 --> 00:36:25,420
are going to try it so back to that this

00:36:21,790 --> 00:36:28,570
is how it would look in cabana just just

00:36:25,420 --> 00:36:30,340
the und Jason so that's the same method

00:36:28,570 --> 00:36:33,940
that's the same log message that we saw

00:36:30,340 --> 00:36:38,340
in the previous slide and the current

00:36:33,940 --> 00:36:41,440
plan is to get this to fedora this year

00:36:38,340 --> 00:36:43,869
later to release it a stick review in

00:36:41,440 --> 00:36:53,759
rel and then

00:36:43,869 --> 00:36:53,759
get more of that that's it any questions

00:37:00,990 --> 00:37:07,540
that is to get till log to run on the

00:37:04,090 --> 00:37:09,850
special user it will be set to read and

00:37:07,540 --> 00:37:12,730
the van user logs in it becomes a

00:37:09,850 --> 00:37:15,910
different user starts logging than Forks

00:37:12,730 --> 00:37:18,490
then drops back to the original user and

00:37:15,910 --> 00:37:20,260
starts the show so transcend a different

00:37:18,490 --> 00:37:23,860
user of course it doesn't help with root

00:37:20,260 --> 00:37:26,980
but nothing helps against rude if we

00:37:23,860 --> 00:37:29,260
want to log route we will probably be

00:37:26,980 --> 00:37:31,270
using jump servers where the user will

00:37:29,260 --> 00:37:33,460
have to log into one server but he

00:37:31,270 --> 00:37:36,850
doesn't have the root privileges then he

00:37:33,460 --> 00:37:40,290
logs in to the target server and the

00:37:36,850 --> 00:37:40,290
intermediate session is Lord

00:37:54,980 --> 00:38:03,630
screen the thing is that you can stream

00:38:01,140 --> 00:38:05,309
that and this till OCH you can stream

00:38:03,630 --> 00:38:08,519
that you can deliver these log messages

00:38:05,309 --> 00:38:10,529
as they go you just cut in pieces there

00:38:08,519 --> 00:38:12,720
is a time limit when they get logged and

00:38:10,529 --> 00:38:14,309
that can get delivered immediately to

00:38:12,720 --> 00:38:17,119
elasticsearch review can search it

00:38:14,309 --> 00:38:20,839
between I mean it's an that link below

00:38:17,119 --> 00:38:26,299
has a video demo of how that happens and

00:38:20,839 --> 00:38:26,299
there is a demo how that works basically

00:38:31,400 --> 00:38:47,150
yep exactly how you see it on the screen

00:38:42,920 --> 00:38:47,150
what you see on the screen gets logged

00:38:48,799 --> 00:38:52,190
yeah sure

00:38:59,930 --> 00:39:06,020
it's perfectly fine it's all preserved

00:39:03,000 --> 00:39:06,020
in it yeah

00:39:30,650 --> 00:39:36,030
yes it's a problem there will be an

00:39:32,790 --> 00:39:37,619
option to not log the user input only

00:39:36,030 --> 00:39:40,590
the user output what will still log

00:39:37,619 --> 00:39:55,440
comments executed as part of audit d log

00:39:40,590 --> 00:39:57,869
so we can just skip input we would

00:39:55,440 --> 00:40:01,760
really yeah I'm sorry I'm out of time we

00:39:57,869 --> 00:40:01,760
can talk personally thanks a lot

00:40:21,090 --> 00:40:24,270
this one

00:40:33,459 --> 00:40:40,429
that looks good so it's a mean between

00:40:37,779 --> 00:40:43,939
you and the beer so I'll try to do that

00:40:40,429 --> 00:40:47,419
quickly and this is a motivation a talk

00:40:43,939 --> 00:40:50,119
and a short how to to do what I'm trying

00:40:47,419 --> 00:40:51,919
to motivate you to and that is testing

00:40:50,119 --> 00:40:54,709
the colonel so why help testing the

00:40:51,919 --> 00:40:58,579
colonel they're they're really really is

00:40:54,709 --> 00:41:01,059
a lot of computer hardware out there you

00:40:58,579 --> 00:41:04,339
know that every year there's a new

00:41:01,059 --> 00:41:07,819
notebook and the successor and Printers

00:41:04,339 --> 00:41:09,049
get their out every new year so that's

00:41:07,819 --> 00:41:11,359
something the colonel needs to support

00:41:09,049 --> 00:41:13,969
and that gets even more complicated

00:41:11,359 --> 00:41:16,910
because other components can become

00:41:13,969 --> 00:41:21,919
combined zillion ways a cellular number

00:41:16,910 --> 00:41:26,539
of ways and that influences how linux do

00:41:21,919 --> 00:41:28,609
person even what what does this makes

00:41:26,539 --> 00:41:30,890
the situation even more bad is that

00:41:28,609 --> 00:41:34,819
firmware sometimes influences linux

00:41:30,890 --> 00:41:37,729
compatibility to and the config you use

00:41:34,819 --> 00:41:41,029
in your carnal or is it the conflict a

00:41:37,729 --> 00:41:43,369
distro use in your kernel influences it

00:41:41,029 --> 00:41:45,949
also so in the end most systems are

00:41:43,369 --> 00:41:49,099
quite unique and maybe just in the stack

00:41:45,949 --> 00:41:53,569
that you have something we're back shows

00:41:49,099 --> 00:41:56,049
up and yeah then that back is will show

00:41:53,569 --> 00:42:00,199
up and annoy you and others and that

00:41:56,049 --> 00:42:02,989
will happen even more quickly if you

00:42:00,199 --> 00:42:05,299
have really unique hardware that's kind

00:42:02,989 --> 00:42:07,099
of issue using a five or six year old

00:42:05,299 --> 00:42:09,650
graphics card nobody else uses anymore

00:42:07,099 --> 00:42:13,549
or was kind of special even back when it

00:42:09,650 --> 00:42:16,549
was new so if you don't test that those

00:42:13,549 --> 00:42:20,269
new kernels on your heart where nobody

00:42:16,549 --> 00:42:22,819
might and helpless specific bugs might

00:42:20,269 --> 00:42:27,309
only be found when they are really old

00:42:22,819 --> 00:42:29,569
so maybe like two or three months old

00:42:27,309 --> 00:42:34,159
but depending on your distribution can

00:42:29,569 --> 00:42:36,679
even be one or two years old and the

00:42:34,159 --> 00:42:40,189
problem of that is finding and fixing

00:42:36,679 --> 00:42:43,220
the root cause of those bugs gets really

00:42:40,189 --> 00:42:45,590
really harder the older back gets

00:42:43,220 --> 00:42:47,260
and sometimes can even get nearly

00:42:45,590 --> 00:42:50,900
impossible if you have a kind of

00:42:47,260 --> 00:42:52,550
six-year-old graphics cards and maybe

00:42:50,900 --> 00:42:54,170
there was a back in the driver didn't

00:42:52,550 --> 00:42:58,070
compile and the kernel developer said

00:42:54,170 --> 00:42:59,510
okay here the code didn't compile for

00:42:58,070 --> 00:43:01,670
two years it seems nobody used it

00:42:59,510 --> 00:43:05,930
anymore then they throw it out so if you

00:43:01,670 --> 00:43:07,580
switch from you burn to 1404 to the next

00:43:05,930 --> 00:43:09,170
one that's coming out and I pray you

00:43:07,580 --> 00:43:11,930
suddenly might notice how the driver

00:43:09,170 --> 00:43:15,290
that I used to use until now it's gone

00:43:11,930 --> 00:43:17,180
and yeah then you bringing it back it's

00:43:15,290 --> 00:43:18,859
really hard and then you aren't know it

00:43:17,180 --> 00:43:20,480
and you have to live with it and find a

00:43:18,859 --> 00:43:24,230
different solution that's why you need

00:43:20,480 --> 00:43:29,840
to test that's its it's in your own

00:43:24,230 --> 00:43:32,540
interest at the risk not too many old

00:43:29,840 --> 00:43:34,369
conan's get to normally installed there

00:43:32,540 --> 00:43:36,500
and stay installed when you're

00:43:34,369 --> 00:43:39,980
installing a new kernel so you can

00:43:36,500 --> 00:43:42,950
always go back to the old colonel and

00:43:39,980 --> 00:43:45,460
put that instead and you can't normally

00:43:42,950 --> 00:43:48,349
are always backwards compatibility so

00:43:45,460 --> 00:43:50,780
and there shouldn't be any problems with

00:43:48,349 --> 00:43:54,619
the new column is there a risk of data

00:43:50,780 --> 00:43:57,320
loss it's quite unlikely and that's a

00:43:54,619 --> 00:43:59,540
short version I'm like this on the other

00:43:57,320 --> 00:44:02,119
hand says yes of course it can happen

00:43:59,540 --> 00:44:06,320
but it doesn't happen that often so it's

00:44:02,119 --> 00:44:07,880
not something you should it's it's

00:44:06,320 --> 00:44:10,670
something you should keep in mind but

00:44:07,880 --> 00:44:12,320
it's another reason to not test because

00:44:10,670 --> 00:44:14,180
otherwise nobody will test and in the

00:44:12,320 --> 00:44:17,480
end your hardware won't work anymore so

00:44:14,180 --> 00:44:20,810
how to test now if you're a fedora user

00:44:17,480 --> 00:44:24,140
run fedora rawhide the connells used in

00:44:20,810 --> 00:44:26,359
fedora rawhide are pretty close to what

00:44:24,140 --> 00:44:28,550
upstream is developing right now in the

00:44:26,359 --> 00:44:31,490
mainline kernel it's maybe one of the

00:44:28,550 --> 00:44:35,240
one or two days behind mainline kernel

00:44:31,490 --> 00:44:38,000
most of the time and there are a few

00:44:35,240 --> 00:44:41,270
federal specific patches and the raw

00:44:38,000 --> 00:44:43,700
hard rpms but it's compared to other

00:44:41,270 --> 00:44:46,670
distributions that are just a few so if

00:44:43,700 --> 00:44:48,980
you report problems to the Fedora

00:44:46,670 --> 00:44:51,589
developers or upstream and it's normally

00:44:48,980 --> 00:44:53,510
not a problem that you and I have a con

00:44:51,589 --> 00:44:56,300
let at extra petrus in it there are a

00:44:53,510 --> 00:44:57,050
few situation but then the developers

00:44:56,300 --> 00:44:59,600
will tell you

00:44:57,050 --> 00:45:01,070
how to test it if you're not running or

00:44:59,600 --> 00:45:03,710
hot because you think it's too unstable

00:45:01,070 --> 00:45:06,140
or something like that then you can also

00:45:03,710 --> 00:45:08,810
most of the time run the rawhide Colonel

00:45:06,140 --> 00:45:10,430
on the latest federal release that works

00:45:08,810 --> 00:45:12,590
most of the time I've heard that it

00:45:10,430 --> 00:45:17,780
right now doesn't work to do to some

00:45:12,590 --> 00:45:20,840
dependency there are always ways to get

00:45:17,780 --> 00:45:24,320
around it about if it works you can grab

00:45:20,840 --> 00:45:26,360
it with dnf on the command line or from

00:45:24,320 --> 00:45:30,560
Cody directly and install the RPMs it's

00:45:26,360 --> 00:45:32,420
quite easy as I indicated already at

00:45:30,560 --> 00:45:34,040
different ways so there's second way and

00:45:32,420 --> 00:45:37,810
that's actually why I'm giving the talk

00:45:34,040 --> 00:45:41,660
I'm maintaining a federal repository

00:45:37,810 --> 00:45:45,230
where I can cut get vanilla Colonel rpms

00:45:41,660 --> 00:45:47,840
and run them on fedora without compiling

00:45:45,230 --> 00:45:49,460
them yourself there's actually page in

00:45:47,840 --> 00:45:53,270
the federal wiki that explains how to

00:45:49,460 --> 00:45:55,330
use it to pan actually the two important

00:45:53,270 --> 00:45:58,670
commands are in the screenshot already

00:45:55,330 --> 00:46:00,920
now I've put them here as well but you

00:45:58,670 --> 00:46:03,640
can't confine them in the wiki and if

00:46:00,920 --> 00:46:06,530
you googling for Colonel vanilla

00:46:03,640 --> 00:46:08,930
repositories for fedora then Google will

00:46:06,530 --> 00:46:13,100
find you will get you there in case you

00:46:08,930 --> 00:46:15,140
forget to write down the UL and yes I'm

00:46:13,100 --> 00:46:17,710
running those kernels myself on my

00:46:15,140 --> 00:46:20,930
notebook to help testing the kernel and

00:46:17,710 --> 00:46:23,570
I've never run into any bad back so

00:46:20,930 --> 00:46:26,630
until now but I found a few bucks that I

00:46:23,570 --> 00:46:28,790
had to debug and track down and softly

00:46:26,630 --> 00:46:32,660
get got fixed before they were hitting

00:46:28,790 --> 00:46:34,370
you and other Linux users and similarly

00:46:32,660 --> 00:46:37,100
a repository is like this one are

00:46:34,370 --> 00:46:39,080
available for other distributions so at

00:46:37,100 --> 00:46:42,800
least for the big ones so if you want to

00:46:39,080 --> 00:46:46,040
go down that road just search for your

00:46:42,800 --> 00:46:48,320
distribution and vanilla cones the third

00:46:46,040 --> 00:46:51,500
way is simply doing manually that's

00:46:48,320 --> 00:46:55,430
quite easy you download and extract the

00:46:51,500 --> 00:46:58,130
latest kernel sources now run these two

00:46:55,430 --> 00:47:03,550
commands that actually is a backslash

00:46:58,130 --> 00:47:06,380
there what whatever and that greater

00:47:03,550 --> 00:47:08,150
configuration depending that's based on

00:47:06,380 --> 00:47:10,410
your old distribution colonel

00:47:08,150 --> 00:47:13,470
configuration and then throw

00:47:10,410 --> 00:47:16,829
everything out which is which seems to

00:47:13,470 --> 00:47:18,990
not be needed so all the modules that

00:47:16,829 --> 00:47:24,480
are not loaded basically and then

00:47:18,990 --> 00:47:27,180
comprises on my thinkpad t420 that's

00:47:24,480 --> 00:47:29,460
like four years old now that takes just

00:47:27,180 --> 00:47:33,289
twelve minute minutes and then this girl

00:47:29,460 --> 00:47:36,630
is ready just running a install command

00:47:33,289 --> 00:47:39,420
rebooting and yeah prophet and it's

00:47:36,630 --> 00:47:41,369
there you can boot it and check if

00:47:39,420 --> 00:47:46,039
everything works and if it doesn't you

00:47:41,369 --> 00:47:49,349
can report bugs that's the main part I

00:47:46,039 --> 00:47:51,809
guess time to run out soon I have

00:47:49,349 --> 00:47:53,900
actually questions like for example how

00:47:51,809 --> 00:47:57,599
to get rid of those condoms again that

00:47:53,900 --> 00:48:00,319
didn't fit into the this talk normally

00:47:57,599 --> 00:48:03,000
it's not a problem rpms you can can can

00:48:00,319 --> 00:48:04,650
just de install onto and the car notes

00:48:03,000 --> 00:48:06,720
that you installed manually off quickly

00:48:04,650 --> 00:48:12,210
deleted from the file system it's not

00:48:06,720 --> 00:48:21,930
that hard I'm putting it up here but

00:48:12,210 --> 00:48:23,549
baby you have questions already for the

00:48:21,930 --> 00:48:26,549
current cycle compile myself actually

00:48:23,549 --> 00:48:29,880
that that's on my to-do list ma'am but I

00:48:26,549 --> 00:48:32,160
all boot those kernels once in a QM you

00:48:29,880 --> 00:48:35,430
and check if that comes up probably and

00:48:32,160 --> 00:48:42,660
normally I only publish them if they are

00:48:35,430 --> 00:48:45,559
putting their fine the one where when

00:48:42,660 --> 00:48:45,559
how to report backs

00:48:54,560 --> 00:49:00,360
that depends on how specific the buggers

00:48:57,330 --> 00:49:02,070
I mean as I said zillions of hardware

00:49:00,360 --> 00:49:04,500
out there and combinations and if it's

00:49:02,070 --> 00:49:06,720
something like audio codec on your

00:49:04,500 --> 00:49:09,660
specific Mystery Machine that likely

00:49:06,720 --> 00:49:11,760
nobody else has and it's not that on at

00:49:09,660 --> 00:49:14,070
the top of the to do list for the Fedora

00:49:11,760 --> 00:49:17,340
kernel developers so you might better

00:49:14,070 --> 00:49:19,920
off getting the upstream there because

00:49:17,340 --> 00:49:24,110
the developer of the driver knows more

00:49:19,920 --> 00:49:24,110
how to fix it and what might be wrong

00:49:24,680 --> 00:49:32,190
yeah but not all the developers use it

00:49:29,570 --> 00:49:34,320
that's also the short version I could do

00:49:32,190 --> 00:49:38,330
this talk I guess in in one hour and

00:49:34,320 --> 00:49:38,330

YouTube URL: https://www.youtube.com/watch?v=F_uH_HhkCak


