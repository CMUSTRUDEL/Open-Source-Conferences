Title: Enterprise Linux crypto story
Publication date: 2019-03-04
Playlist: DevConfCZ 2019
Description: 
	Presentation name:  Enterprise Linux crypto story
Speaker:  Anderson Sasaki
Description:  This session will go through the core crypto components of Red Hat enterprise Linux from kernel to openssl, go briefly through the requirements set for such components, and how their security is evaluated through certifications and other means.
[ https://sched.co/JcdO]
Captions: 
	00:00:06,359 --> 00:00:16,619
I will talk about enterprise benefit the

00:00:10,200 --> 00:00:18,779
story I'm part of by that's protein so

00:00:16,619 --> 00:00:21,270
this is the agenda I will give some

00:00:18,779 --> 00:00:24,090
introduction and then talk about some

00:00:21,270 --> 00:00:27,029
challenge what we provide for very have

00:00:24,090 --> 00:00:29,970
Enterprise Linux how each is our crypto

00:00:27,029 --> 00:00:36,630
car crypto libraries and give us summary

00:00:29,970 --> 00:00:40,470
in them so the introduction let's start

00:00:36,630 --> 00:00:42,239
with some hypothetical statement as an

00:00:40,470 --> 00:00:44,670
enterprise system vendor I want some

00:00:42,239 --> 00:00:48,210
assistant customers it must be secure

00:00:44,670 --> 00:00:51,629
interoperable and have high quality but

00:00:48,210 --> 00:00:54,210
it sounds reasonable but how to fulfill

00:00:51,629 --> 00:00:56,670
those requirements fulfilling these

00:00:54,210 --> 00:00:58,440
requirements are not responsibilities

00:00:56,670 --> 00:01:01,500
only for the crypto part of the system

00:00:58,440 --> 00:01:04,769
it's a charter sponsibility across all

00:01:01,500 --> 00:01:06,600
system components the fifth column

00:01:04,769 --> 00:01:10,079
can't guarantee the security of the

00:01:06,600 --> 00:01:12,810
system so in this top I will restrict

00:01:10,079 --> 00:01:19,950
the scope only for the crypto point of

00:01:12,810 --> 00:01:24,029
view the challenge how to keep the

00:01:19,950 --> 00:01:29,249
system secure frustration look this

00:01:24,029 --> 00:01:31,590
padlock it was one secure but in with

00:01:29,249 --> 00:01:34,919
time we've got rusty and needs

00:01:31,590 --> 00:01:41,099
replacement is this it's not different

00:01:34,919 --> 00:01:44,939
with crypto the definition of secure

00:01:41,099 --> 00:01:47,399
encrypted changes with time flawed

00:01:44,939 --> 00:01:52,499
algorithms are covered for example our

00:01:47,399 --> 00:01:57,060
c4 and d5 and like SSL v3 can no longer

00:01:52,499 --> 00:02:00,149
be considered of the security the truck

00:01:57,060 --> 00:02:01,679
model changes in the past sharing the

00:02:00,149 --> 00:02:06,389
processor with other application

00:02:01,679 --> 00:02:09,119
wouldn't be concerning but now we have

00:02:06,389 --> 00:02:13,110
containers and that

00:02:09,119 --> 00:02:18,000
became much more common and we will be

00:02:13,110 --> 00:02:22,409
seeing a lot of attacks which takes

00:02:18,000 --> 00:02:31,440
advantage advantage of this station like

00:02:22,409 --> 00:02:33,440
tiny attacks and cash based attacks the

00:02:31,440 --> 00:02:38,459
capitation of power increases with time

00:02:33,440 --> 00:02:42,720
which means we have to use more like

00:02:38,459 --> 00:02:47,629
longer and longer keys to avoid having

00:02:42,720 --> 00:02:51,870
problems and small keys became unsecure

00:02:47,629 --> 00:02:55,890
so the crypt algorithm using the system

00:02:51,870 --> 00:02:58,019
must be updated with time and it is

00:02:55,890 --> 00:03:01,230
necessary to have controller or crypto

00:02:58,019 --> 00:03:05,180
using the system for the crypto point of

00:03:01,230 --> 00:03:09,930
view is the assistant kept be considered

00:03:05,180 --> 00:03:13,799
secure if you use any insecure is more

00:03:09,930 --> 00:03:20,880
if you use like secure algorithms but in

00:03:13,799 --> 00:03:23,669
wrong ways now imagine if each

00:03:20,880 --> 00:03:26,099
application brought their own crypto we

00:03:23,669 --> 00:03:28,919
would have to fix bugs and reveal every

00:03:26,099 --> 00:03:31,709
package or application the system that

00:03:28,919 --> 00:03:36,810
would take a reasonable time effectively

00:03:31,709 --> 00:03:39,480
making it impossible to ensure that only

00:03:36,810 --> 00:03:43,379
secure algorithms are used in a secure

00:03:39,480 --> 00:03:45,690
way so I have a lot of crypt

00:03:43,379 --> 00:03:48,090
implementations the system makes it

00:03:45,690 --> 00:03:52,680
difficult to maintain that it's a lot of

00:03:48,090 --> 00:03:56,160
code that we have art and reveal base

00:03:52,680 --> 00:03:57,910
height controls hours and keys I mean

00:03:56,160 --> 00:04:00,820
you have to have some too

00:03:57,910 --> 00:04:03,970
on the configuration of the system to

00:04:00,820 --> 00:04:08,160
make sure that all applications use only

00:04:03,970 --> 00:04:11,410
secure algorithms and in a secure way

00:04:08,160 --> 00:04:15,310
you tight ensure secure crypto usage

00:04:11,410 --> 00:04:18,640
like I said the protocols the key size

00:04:15,310 --> 00:04:24,310
and algorithms they have to be secure

00:04:18,640 --> 00:04:26,440
and so we conclude that the applications

00:04:24,310 --> 00:04:29,620
must be consistent and rely on a small

00:04:26,440 --> 00:04:31,990
set of crypto components so that we can

00:04:29,620 --> 00:04:36,070
control everything and be sure that they

00:04:31,990 --> 00:04:39,550
are safe so instead of having a system

00:04:36,070 --> 00:04:42,730
like this we would like to have a system

00:04:39,550 --> 00:04:47,110
like this where the applications rely on

00:04:42,730 --> 00:04:52,420
a small set of crypto components so and

00:04:47,110 --> 00:04:54,670
how to ensure interoperability if you

00:04:52,420 --> 00:04:56,820
have one application dependent on a

00:04:54,670 --> 00:05:00,430
crypto library and another application

00:04:56,820 --> 00:05:03,750
relying on different library how can we

00:05:00,430 --> 00:05:06,430
be sure that they will work together

00:05:03,750 --> 00:05:08,740
that's only possible if both crypto

00:05:06,430 --> 00:05:12,340
libraries implement a well-defined

00:05:08,740 --> 00:05:16,660
standard and specification those

00:05:12,340 --> 00:05:22,240
standards are usually defined by IETF to

00:05:16,660 --> 00:05:25,330
RFC's things like this so we can make

00:05:22,240 --> 00:05:27,970
sure that they work together and how to

00:05:25,330 --> 00:05:33,070
ensure interoperability with a legacy

00:05:27,970 --> 00:05:38,020
system so the system must be flexible

00:05:33,070 --> 00:05:40,870
enough to allow a configuration of the

00:05:38,020 --> 00:05:43,270
system for a more permissive in a more

00:05:40,870 --> 00:05:47,319
permissive way to allow it to

00:05:43,270 --> 00:05:49,630
work with legacy systems so that we can

00:05:47,319 --> 00:05:54,610
be sure that it interoperate with legacy

00:05:49,630 --> 00:05:56,500
systems so further credibility

00:05:54,610 --> 00:06:00,130
we need composite standards and

00:05:56,500 --> 00:06:03,060
specifications and to allow cooperation

00:06:00,130 --> 00:06:03,060
for legacy system

00:06:03,120 --> 00:06:10,509
how about quality from the user

00:06:08,560 --> 00:06:13,020
definition the International

00:06:10,509 --> 00:06:18,669
Organization for Standardization

00:06:13,020 --> 00:06:20,110
quality's this sentence

00:06:18,669 --> 00:06:22,569
the Tattaglia features and

00:06:20,110 --> 00:06:24,759
characteristics of product or service

00:06:22,569 --> 00:06:28,120
the per on its ability to satisfy stated

00:06:24,759 --> 00:06:30,550
or implied needs in simple words our

00:06:28,120 --> 00:06:32,470
product has good quality if it complies

00:06:30,550 --> 00:06:37,500
with the required space file is

00:06:32,470 --> 00:06:41,610
specified by the client so a customer

00:06:37,500 --> 00:06:44,139
provides a set of requirements and

00:06:41,610 --> 00:06:47,139
inside these requirements they have

00:06:44,139 --> 00:06:50,050
requirements for security and crypto and

00:06:47,139 --> 00:06:53,949
from these requirements are derived

00:06:50,050 --> 00:06:57,969
validation tests so we take this

00:06:53,949 --> 00:07:01,030
rotation test and equip the component

00:06:57,969 --> 00:07:04,590
and we we make it go through the

00:07:01,030 --> 00:07:08,349
validation process to get a validation

00:07:04,590 --> 00:07:11,800
crypto component a certified crypto

00:07:08,349 --> 00:07:14,740
component so we can use the

00:07:11,800 --> 00:07:17,949
certification to prove the complies with

00:07:14,740 --> 00:07:22,509
the set of requirements stated by the

00:07:17,949 --> 00:07:24,069
client obviously that that is an

00:07:22,509 --> 00:07:29,259
oversimplification of the validation

00:07:24,069 --> 00:07:32,650
process but it works for illustration so

00:07:29,259 --> 00:07:37,270
if all the crypto components in the

00:07:32,650 --> 00:07:40,539
system are certified and are used in a

00:07:37,270 --> 00:07:41,710
approved way we can say that the whole

00:07:40,539 --> 00:07:44,770
system

00:07:41,710 --> 00:07:49,030
is compliant with that with those

00:07:44,770 --> 00:07:53,260
requirements but in the other way if

00:07:49,030 --> 00:07:56,650
part of the system is not certified or

00:07:53,260 --> 00:08:02,850
used in a non-profit way we can't say

00:07:56,650 --> 00:08:02,850
that anymore so we will lose this

00:08:03,240 --> 00:08:10,449
compliant state of the system so and

00:08:07,780 --> 00:08:15,880
that doesn't work for customers because

00:08:10,449 --> 00:08:18,460
it doesn't meet the requirements so

00:08:15,880 --> 00:08:21,910
different customers have different

00:08:18,460 --> 00:08:26,500
requirements for example the US

00:08:21,910 --> 00:08:30,850
government required shapes the financial

00:08:26,500 --> 00:08:35,260
sector require PCI DSS and others

00:08:30,850 --> 00:08:39,909
require atomic criteria so to sell the

00:08:35,260 --> 00:08:43,140
system to these customers it's necessary

00:08:39,909 --> 00:08:50,290
to provide a certification for different

00:08:43,140 --> 00:08:52,510
requirement standards so for some

00:08:50,290 --> 00:08:55,600
standards certification is required to

00:08:52,510 --> 00:08:57,279
prove the system compliance in other

00:08:55,600 --> 00:09:01,300
words certification is a way to prove

00:08:57,279 --> 00:09:05,500
the part of the system so what we

00:09:01,300 --> 00:09:09,220
provide in Raths we provide a car

00:09:05,500 --> 00:09:14,080
krypter components which is a small set

00:09:09,220 --> 00:09:16,029
of crypto components and having a small

00:09:14,080 --> 00:09:18,279
set of crypto components allow us to

00:09:16,029 --> 00:09:21,610
have consistency across applications

00:09:18,279 --> 00:09:24,640
because then the applications would rely

00:09:21,610 --> 00:09:27,459
on a small set of certified and verified

00:09:24,640 --> 00:09:30,130
crypto components

00:09:27,459 --> 00:09:33,130
it makes the attack surface smaller

00:09:30,130 --> 00:09:38,890
which means less probability of having a

00:09:33,130 --> 00:09:41,140
vulnerability or or a security issue it

00:09:38,890 --> 00:09:44,560
also gives us less code to maintain and

00:09:41,140 --> 00:09:45,310
test allows the control of the system

00:09:44,560 --> 00:09:48,520
cryptic on

00:09:45,310 --> 00:09:54,279
religion like the size of the keys the

00:09:48,520 --> 00:09:56,890
others used the protocols allowed so and

00:09:54,279 --> 00:10:01,090
that allows us to prove the security

00:09:56,890 --> 00:10:04,750
claims we we make like that the system

00:10:01,090 --> 00:10:07,750
is combined with some requirement so

00:10:04,750 --> 00:10:11,050
this is a set of color cryptic

00:10:07,750 --> 00:10:13,810
components we provide it may sing a lot

00:10:11,050 --> 00:10:17,440
but it's really a small set of the

00:10:13,810 --> 00:10:20,200
critical components available and these

00:10:17,440 --> 00:10:22,830
do not include all crypto related

00:10:20,200 --> 00:10:27,730
packages in Braille but these are the

00:10:22,830 --> 00:10:29,980
core cryptic components for developer

00:10:27,730 --> 00:10:33,130
wanted to write a new application I

00:10:29,980 --> 00:10:36,580
would recommend to check checking this

00:10:33,130 --> 00:10:40,330
first it's important to remind that the

00:10:36,580 --> 00:10:43,029
effort made to make it secure and comply

00:10:40,330 --> 00:10:46,150
with standards and certified are push it

00:10:43,029 --> 00:10:50,920
upstream so the community can enjoy the

00:10:46,150 --> 00:10:54,570
benefit of this effort so we provide

00:10:50,920 --> 00:10:57,520
quality assurance to integration testing

00:10:54,570 --> 00:10:59,860
to make sure the applications and the

00:10:57,520 --> 00:11:03,280
crypto libraries work with each other

00:10:59,860 --> 00:11:09,040
and also to make sure that different

00:11:03,280 --> 00:11:11,230
versions work with each other we use

00:11:09,040 --> 00:11:16,089
regression testing to make sure that

00:11:11,230 --> 00:11:18,310
fixed bugs don't come back and the

00:11:16,089 --> 00:11:22,660
behavior of the system doesn't change

00:11:18,310 --> 00:11:24,940
between versions we have standards

00:11:22,660 --> 00:11:29,260
compliance testing that's to make sure

00:11:24,940 --> 00:11:34,230
that the the system is compliant and

00:11:29,260 --> 00:11:34,230
that is certifiable

00:11:36,240 --> 00:11:43,079
for example for testing the complies

00:11:39,689 --> 00:11:46,889
with TOS we use to us father

00:11:43,079 --> 00:11:51,509
it's a to my ten by our teammate Hobart

00:11:46,889 --> 00:11:59,220
cardio and it tests for complies with

00:11:51,509 --> 00:12:02,040
the many several RFC's it tries to test

00:11:59,220 --> 00:12:04,619
your library in a point of from the

00:12:02,040 --> 00:12:08,339
point of view of at an attacker using

00:12:04,619 --> 00:12:11,819
more formal packages and stuff like this

00:12:08,339 --> 00:12:14,610
it's interesting if you click it that

00:12:11,819 --> 00:12:21,209
link we will it will lead you to the

00:12:14,610 --> 00:12:23,939
repository and we do testing for

00:12:21,209 --> 00:12:32,720
certification requirement for Pheebs

00:12:23,939 --> 00:12:35,129
come on criteria to make sure the so

00:12:32,720 --> 00:12:37,889
different countries have different laws

00:12:35,129 --> 00:12:42,389
and regulations so we have to make sure

00:12:37,889 --> 00:12:45,929
the the crypto components we deliver the

00:12:42,389 --> 00:12:48,329
the they follow the rules of each

00:12:45,929 --> 00:12:52,499
country where we we might sell the

00:12:48,329 --> 00:12:55,379
system so some outlets are restricted in

00:12:52,499 --> 00:12:57,720
some countries and some algorithms have

00:12:55,379 --> 00:13:00,720
patents that we have to make sure that

00:12:57,720 --> 00:13:06,569
we don't cheat those others in our

00:13:00,720 --> 00:13:09,990
system that is verified by extensive

00:13:06,569 --> 00:13:14,009
code review to all the applications in

00:13:09,990 --> 00:13:17,360
the system which require crypto so we

00:13:14,009 --> 00:13:21,449
that also allow us in this code review

00:13:17,360 --> 00:13:25,889
we can check if norm allowed algorithms

00:13:21,449 --> 00:13:30,290
are our ship or if they're like non

00:13:25,889 --> 00:13:33,079
allowed protocols inside the libraries

00:13:30,290 --> 00:13:38,119
we also provide our crypto policies

00:13:33,079 --> 00:13:43,810
which is new in rally bidder and fedora

00:13:38,119 --> 00:13:47,470
I will not go deep in

00:13:43,810 --> 00:13:50,529
in this component because there is one

00:13:47,470 --> 00:13:54,480
talk I recommend you to attend the talk

00:13:50,529 --> 00:13:57,699
from our teammate Tomas about the crypto

00:13:54,480 --> 00:14:00,790
crypto policies to get more details

00:13:57,699 --> 00:14:04,059
about this but quickly going to the

00:14:00,790 --> 00:14:09,790
variable profiles the default profile is

00:14:04,059 --> 00:14:13,449
modern scary it it removed like insecure

00:14:09,790 --> 00:14:16,420
briefs but still have shower for

00:14:13,449 --> 00:14:19,629
usability because the world is not ready

00:14:16,420 --> 00:14:23,399
yet for the same amount of sha-1 in

00:14:19,629 --> 00:14:27,759
signatures ok

00:14:23,399 --> 00:14:33,610
legacy profile is intended to be used

00:14:27,759 --> 00:14:39,490
for legacy systems it allows kind of

00:14:33,610 --> 00:14:45,069
insecure algorithms and smaller keys and

00:14:39,490 --> 00:14:49,120
future is a more restrictive profile

00:14:45,069 --> 00:14:55,360
which uses large pieces and removes

00:14:49,120 --> 00:15:01,990
shower for example and phipps which is

00:14:55,360 --> 00:15:09,339
the fifth combined profile so how do we

00:15:01,990 --> 00:15:11,889
choose our character libraries we one of

00:15:09,339 --> 00:15:14,199
the aspects we consider when we are

00:15:11,889 --> 00:15:18,579
choosing our crypto core crypto

00:15:14,199 --> 00:15:22,779
libraries is the community like the

00:15:18,579 --> 00:15:25,569
popularity is important because if a

00:15:22,779 --> 00:15:28,300
library is more popular it means that we

00:15:25,569 --> 00:15:32,470
have more reach like changing those

00:15:28,300 --> 00:15:37,480
libraries would affect more people and

00:15:32,470 --> 00:15:42,370
more applications we also consider the

00:15:37,480 --> 00:15:44,879
active contributors the like it's

00:15:42,370 --> 00:15:49,350
necessary to have active contributors to

00:15:44,879 --> 00:15:52,170
allow us to fix bugs fixed speed

00:15:49,350 --> 00:15:55,770
villages more quickly to implement new

00:15:52,170 --> 00:16:00,300
features and we work really close to

00:15:55,770 --> 00:16:03,240
upstream so it's interesting to have

00:16:00,300 --> 00:16:06,390
friendly upstream so that we can

00:16:03,240 --> 00:16:12,360
cooperate and contribute to fixing bugs

00:16:06,390 --> 00:16:14,370
and adding new features and also it's

00:16:12,360 --> 00:16:17,970
important to have a friendly upstream

00:16:14,370 --> 00:16:22,770
because then we can make the changes we

00:16:17,970 --> 00:16:25,530
have to make to make the library search

00:16:22,770 --> 00:16:28,490
fiber for example because for some

00:16:25,530 --> 00:16:34,800
testing like Phipps you need to have

00:16:28,490 --> 00:16:38,310
specialized ApS which you will which is

00:16:34,800 --> 00:16:41,010
using the test so we have to have

00:16:38,310 --> 00:16:46,970
cooperation of the upstream to to make

00:16:41,010 --> 00:16:46,970
this into their library or the project

00:16:53,410 --> 00:17:00,790
we just considered the stability of the

00:16:56,570 --> 00:17:05,030
the project the project project has to

00:17:00,790 --> 00:17:09,860
have a version control system by get so

00:17:05,030 --> 00:17:13,910
that we can track all the changes that

00:17:09,860 --> 00:17:18,380
are made in which version they were

00:17:13,910 --> 00:17:21,559
introduced we also require API and API

00:17:18,380 --> 00:17:24,290
stability duties that is really

00:17:21,559 --> 00:17:27,079
important for a long term spark like

00:17:24,290 --> 00:17:29,660
because that allow us to update a

00:17:27,079 --> 00:17:35,240
library without breaking the the

00:17:29,660 --> 00:17:39,950
applications so a simple versioning is a

00:17:35,240 --> 00:17:43,970
way to keep the API and a bi-stable and

00:17:39,950 --> 00:17:49,809
and to make a update that won't break

00:17:43,970 --> 00:17:54,380
the applications so we can update

00:17:49,809 --> 00:18:01,600
replication yeah we also consider the

00:17:54,380 --> 00:18:05,320
quality of the project we consider the

00:18:01,600 --> 00:18:08,960
the methods used by the project to

00:18:05,320 --> 00:18:12,580
ensure their quality like continuous

00:18:08,960 --> 00:18:15,440
integration is one thing that we

00:18:12,580 --> 00:18:20,179
consider really important for a project

00:18:15,440 --> 00:18:22,940
to have and even better if they run CI

00:18:20,179 --> 00:18:25,309
tests for every change made to the code

00:18:22,940 --> 00:18:27,860
like every push

00:18:25,309 --> 00:18:31,280
there are many CI platforms available

00:18:27,860 --> 00:18:35,390
and most of them are free for

00:18:31,280 --> 00:18:38,090
open-source projects probably you heard

00:18:35,390 --> 00:18:44,300
about travelin and give up to CR and

00:18:38,090 --> 00:18:47,570
there are others we also consider if the

00:18:44,300 --> 00:18:49,940
project follow best practices as a

00:18:47,570 --> 00:18:51,559
guideline we recommend following the

00:18:49,940 --> 00:18:54,110
best practices defined by the Linux

00:18:51,559 --> 00:18:58,700
Foundation in the

00:18:54,110 --> 00:19:01,640
core infrastructure initiative so I put

00:18:58,700 --> 00:19:05,240
there a link if you click there you can

00:19:01,640 --> 00:19:13,549
see what the project to do to get the

00:19:05,240 --> 00:19:17,720
bag we also require the libraries to be

00:19:13,549 --> 00:19:23,450
tried safe to like be able to be used in

00:19:17,720 --> 00:19:25,820
a child multitrack scenario we require

00:19:23,450 --> 00:19:28,210
there to have complies with standards

00:19:25,820 --> 00:19:30,919
which means implementing the

00:19:28,210 --> 00:19:33,890
specifications in the right way for

00:19:30,919 --> 00:19:37,190
example like I said before we use tools

00:19:33,890 --> 00:19:40,190
like jaws first to check if the

00:19:37,190 --> 00:19:43,669
implementation is correct like if it

00:19:40,190 --> 00:19:48,559
returns the the right alerts when when

00:19:43,669 --> 00:19:56,270
the error occurs and and things like

00:19:48,559 --> 00:20:01,130
this like okay so this is all I will

00:19:56,270 --> 00:20:03,950
give a summary but remember the finish

00:20:01,130 --> 00:20:08,900
of secure encrypted changes with time so

00:20:03,950 --> 00:20:11,809
we have to update the the out refused

00:20:08,900 --> 00:20:14,020
and the configuration of the system with

00:20:11,809 --> 00:20:15,140
time it's not something that will be

00:20:14,020 --> 00:20:18,290
abused

00:20:15,140 --> 00:20:20,500
absolutely securing the crypto point of

00:20:18,290 --> 00:20:22,970
view forever

00:20:20,500 --> 00:20:25,510
have a small set of supported crypto

00:20:22,970 --> 00:20:31,190
components is beneficial so that we can

00:20:25,510 --> 00:20:34,750
control all the crypto usage and the

00:20:31,190 --> 00:20:37,100
crypto configuration the system

00:20:34,750 --> 00:20:40,580
certification is a way to prove complies

00:20:37,100 --> 00:20:43,960
with a set of requirements that means

00:20:40,580 --> 00:20:46,190
that if if someone requires some

00:20:43,960 --> 00:20:52,940
specification some standard you can

00:20:46,190 --> 00:20:56,770
provide a certified library to to prove

00:20:52,940 --> 00:20:56,770
that you comply with those requirements

00:20:56,890 --> 00:21:00,890
to prove the system comprised the whole

00:20:59,240 --> 00:21:03,500
system must

00:21:00,890 --> 00:21:07,310
years only certified crypto and in a

00:21:03,500 --> 00:21:10,340
perfect waves so if you use a certified

00:21:07,310 --> 00:21:13,310
crypto or you use certified crypto

00:21:10,340 --> 00:21:17,120
button in the wrong way then you can't

00:21:13,310 --> 00:21:20,150
say that your system is complaining and

00:21:17,120 --> 00:21:24,110
vs. Specter are analyzed when selecting

00:21:20,150 --> 00:21:29,840
the crypto libraries we we don't put it

00:21:24,110 --> 00:21:33,700
like random stuff inside well we just we

00:21:29,840 --> 00:21:39,040
analyze and choose the most popular

00:21:33,700 --> 00:21:39,040
which have good quality and such

00:21:39,910 --> 00:21:42,910
questions

00:21:46,730 --> 00:21:52,330
okay I guess there is no questions

00:21:53,680 --> 00:22:00,499

YouTube URL: https://www.youtube.com/watch?v=B9oIYrS_tQY


