Title: Multi - Networking Kubernetes Containers with CNI
Publication date: 2019-03-04
Playlist: DevConfCZ 2019
Description: 
	Presentation name: Multi - Networking Kubernetes Containers with CNI
Speaker: Rashid Khan
Description:  Waterfall model, and tennis match between QE and Devel is so last century. We all have constraints of time, resources, budgets, people, but despite all of that we have reached a state of near nirvana between QE and Development in Networking Team. We would like to share how we achieved that. In this session we will share some practical ideas about how Development and QE can establish trust, collaboration, coordination, and help make our products more robust, and in turn help our partners and customers.
[ https://sched.co/JckJ ]
Captions: 
	00:00:05,810 --> 00:00:10,250
my name is Dan Williams and I am a

00:00:08,360 --> 00:00:12,799
member of Raj's team we were just

00:00:10,250 --> 00:00:16,010
presented before so it's the networking

00:00:12,799 --> 00:00:18,439
services team and this presentation is

00:00:16,010 --> 00:00:21,080
multi networking kubernetes containers

00:00:18,439 --> 00:00:23,270
with CNI I'd like to do or give a

00:00:21,080 --> 00:00:25,910
special shout out to Doug Smith from

00:00:23,270 --> 00:00:28,460
whom a lot of the slides are adapted

00:00:25,910 --> 00:00:31,279
part of this was also presentation that

00:00:28,460 --> 00:00:33,650
we gave at Q con Seattle back in

00:00:31,279 --> 00:00:37,129
December so thanks a lot to dump you for

00:00:33,650 --> 00:00:39,770
helping out with not just the main event

00:00:37,129 --> 00:00:42,920
of this presentation which is multi but

00:00:39,770 --> 00:00:47,090
also a lot of the slides do so beyond

00:00:42,920 --> 00:00:49,190
Doug I'd also like to thank Tomo Fung

00:00:47,090 --> 00:00:52,489
from Red Hat on the end of the partner

00:00:49,190 --> 00:00:55,070
engineering team and then also Carol who

00:00:52,489 --> 00:00:57,320
is from Intel and is also a member of

00:00:55,070 --> 00:00:59,000
extra Malta scheme unity and has done a

00:00:57,320 --> 00:01:01,100
lot of work on the multis

00:00:59,000 --> 00:01:02,989
and the plumbing working group as well

00:01:01,100 --> 00:01:05,119
so and then of course there's the

00:01:02,989 --> 00:01:08,020
upstream Memphis community it is an

00:01:05,119 --> 00:01:10,280
open-source project on github and

00:01:08,020 --> 00:01:13,670
there's a lot of people who collaborate

00:01:10,280 --> 00:01:16,180
in that particular project and if you're

00:01:13,670 --> 00:01:20,960
interested join the community help out

00:01:16,180 --> 00:01:22,700
so with that said we're gonna go through

00:01:20,960 --> 00:01:24,619
a couple of things today we're gonna

00:01:22,700 --> 00:01:27,049
talk about exactly what all the acronyms

00:01:24,619 --> 00:01:30,259
that we are using me or that I'm using

00:01:27,049 --> 00:01:31,759
today are we're going to talk a little

00:01:30,259 --> 00:01:33,170
bit about the network plumbing working

00:01:31,759 --> 00:01:35,210
group which is a group that we started

00:01:33,170 --> 00:01:36,619
up streaming kubernetes and why that's

00:01:35,210 --> 00:01:40,130
relevant to this and then we're also

00:01:36,619 --> 00:01:41,570
going to talk about how we take the

00:01:40,130 --> 00:01:43,400
stuff that the network plumbing working

00:01:41,570 --> 00:01:45,590
group developed and bring it into

00:01:43,400 --> 00:01:47,060
practice in communities and then I

00:01:45,590 --> 00:01:50,149
finally will talk a little bit about

00:01:47,060 --> 00:01:52,399
what's next what's coming up in the

00:01:50,149 --> 00:01:55,970
plumbing working group CNI kubernetes

00:01:52,399 --> 00:01:58,520
networking itself so some of the

00:01:55,970 --> 00:01:59,390
acronyms were other things that we're

00:01:58,520 --> 00:02:00,820
going to talk about today hopefully

00:01:59,390 --> 00:02:04,420
everybody knows what

00:02:00,820 --> 00:02:09,509
it is its container orchestration system

00:02:04,420 --> 00:02:12,130
that's fairly popular today and that's

00:02:09,509 --> 00:02:14,830
when you have container orchestration

00:02:12,130 --> 00:02:16,420
system like kubernetes you probably want

00:02:14,830 --> 00:02:18,400
the containers to talk to each other and

00:02:16,420 --> 00:02:20,110
you probably want the containers to talk

00:02:18,400 --> 00:02:21,910
to the outside world and that's where

00:02:20,110 --> 00:02:23,560
something like CNI comes into play which

00:02:21,910 --> 00:02:26,530
is the container network interface and

00:02:23,560 --> 00:02:28,620
that is basically a specification and a

00:02:26,530 --> 00:02:31,270
set of reference plugins that allow

00:02:28,620 --> 00:02:33,850
Network plugins to setup and teardown

00:02:31,270 --> 00:02:35,380
container networking and that's going to

00:02:33,850 --> 00:02:39,100
be an integral part of the presentation

00:02:35,380 --> 00:02:42,370
today because the CNI interface is how

00:02:39,100 --> 00:02:46,200
all of these pieces fit together also a

00:02:42,370 --> 00:02:49,000
pod that's kubernetes terminology for a

00:02:46,200 --> 00:02:51,370
set of related containers that share a

00:02:49,000 --> 00:02:55,420
network configuration network namespace

00:02:51,370 --> 00:02:57,489
and set up and then CRD custom resource

00:02:55,420 --> 00:02:59,500
definition that's another kubernetes

00:02:57,489 --> 00:03:01,510
term and that's basically just we need

00:02:59,500 --> 00:03:04,420
to describe an object in the kubernetes

00:03:01,510 --> 00:03:07,209
api that anybody can create it's not an

00:03:04,420 --> 00:03:09,040
official part of the kubernetes api but

00:03:07,209 --> 00:03:11,700
anybody can create one and that's one of

00:03:09,040 --> 00:03:14,410
the ways that kubernetes enables

00:03:11,700 --> 00:03:16,120
extensibility of the system and these

00:03:14,410 --> 00:03:18,040
only showed up fairly recently in the

00:03:16,120 --> 00:03:19,620
last like year or two but they've

00:03:18,040 --> 00:03:23,380
already created kind of a huge explosion

00:03:19,620 --> 00:03:25,390
in how third parties and other

00:03:23,380 --> 00:03:27,910
components of the Kootenay ecosystem

00:03:25,390 --> 00:03:30,580
that are not officially particle based

00:03:27,910 --> 00:03:32,760
projects interact with kubernetes itself

00:03:30,580 --> 00:03:36,280
and it's the rest of the ecosystem and

00:03:32,760 --> 00:03:38,769
finally a CRI the CRI is an interface

00:03:36,280 --> 00:03:40,720
that kubernetes developed it's kind of

00:03:38,769 --> 00:03:42,820
an abstraction layer between kubernetes

00:03:40,720 --> 00:03:44,230
itself and what actually runs the

00:03:42,820 --> 00:03:46,959
containers and sets up the network

00:03:44,230 --> 00:03:48,600
namespace for the containers one of

00:03:46,959 --> 00:03:53,739
those is you might have heard of docker

00:03:48,600 --> 00:03:56,080
there is a CRI for docker but up and

00:03:53,739 --> 00:03:56,910
coming is also the cryo project and

00:03:56,080 --> 00:04:01,380
there is

00:03:56,910 --> 00:04:03,690
a CRI abstraction for cryo as well in

00:04:01,380 --> 00:04:06,510
fact price stands for container runtime

00:04:03,690 --> 00:04:07,830
interface I think I forget what the

00:04:06,510 --> 00:04:11,130
other stands for but there are many

00:04:07,830 --> 00:04:12,660
talks about cryo this weekend as well so

00:04:11,130 --> 00:04:15,630
if you're interested in more of kind of

00:04:12,660 --> 00:04:17,489
the details and the guts of container

00:04:15,630 --> 00:04:21,420
networking especially in communities

00:04:17,489 --> 00:04:22,950
land check out those talks so what's the

00:04:21,420 --> 00:04:25,410
general problem why are we even talking

00:04:22,950 --> 00:04:28,890
about this today well the first problem

00:04:25,410 --> 00:04:31,350
is that kubernetes really only has one

00:04:28,890 --> 00:04:34,410
network interface or one network that a

00:04:31,350 --> 00:04:36,740
container can be connected to and this

00:04:34,410 --> 00:04:39,210
is perfectly fine for a whole ton of

00:04:36,740 --> 00:04:40,740
different use cases like you know a web

00:04:39,210 --> 00:04:43,340
server if you just run the nginx

00:04:40,740 --> 00:04:45,890
this is great it works fine however

00:04:43,340 --> 00:04:49,620
that's nothing a use case that a lot of

00:04:45,890 --> 00:04:52,950
people have and over the past couple of

00:04:49,620 --> 00:04:55,950
years we've been seeing a lot of use

00:04:52,950 --> 00:04:58,200
cases a lot of customers of red hats but

00:04:55,950 --> 00:04:59,940
also a lot of interest upstream in being

00:04:58,200 --> 00:05:02,280
able to have more flexible networking

00:04:59,940 --> 00:05:03,810
for your containers things that don't

00:05:02,280 --> 00:05:06,060
really fit well into that kubernetes

00:05:03,810 --> 00:05:07,830
model very high bandwidth like media

00:05:06,060 --> 00:05:11,340
streaming applications that need to push

00:05:07,830 --> 00:05:14,310
tens of gigabytes per second or gigabit

00:05:11,340 --> 00:05:16,290
per second out of a container if you

00:05:14,310 --> 00:05:18,060
have specific latency requirements a lot

00:05:16,290 --> 00:05:22,169
of the default networking plug-ins for

00:05:18,060 --> 00:05:24,150
kubernetes don't really have strict

00:05:22,169 --> 00:05:26,070
guarantees or the ability to provide

00:05:24,150 --> 00:05:28,740
guarantees for these things

00:05:26,070 --> 00:05:31,080
so then segregated networks the legacy

00:05:28,740 --> 00:05:34,590
networks those two are if you have for

00:05:31,080 --> 00:05:37,080
example old legacy things like databases

00:05:34,590 --> 00:05:39,270
that aren't really a containerized model

00:05:37,080 --> 00:05:41,360
those might be over here on this network

00:05:39,270 --> 00:05:44,190
they might have a particular IP address

00:05:41,360 --> 00:05:47,660
you need to talk to that it's segregated

00:05:44,190 --> 00:05:48,979
due to like privacy concerns or legal

00:05:47,660 --> 00:05:50,270
you want your container to be able to

00:05:48,979 --> 00:05:53,060
talk to it but you can't cook that

00:05:50,270 --> 00:05:55,099
thing's Network up to the rest of your

00:05:53,060 --> 00:05:56,870
container cluster so maybe you have a

00:05:55,099 --> 00:05:59,270
physically segregated network that you

00:05:56,870 --> 00:06:01,039
have to connect containers to to be able

00:05:59,270 --> 00:06:02,599
to talk to that resource so these are a

00:06:01,039 --> 00:06:04,069
couple of the things that don't fit

00:06:02,599 --> 00:06:08,349
quite as well into the kubernetes

00:06:04,069 --> 00:06:11,060
networking model microservices etc as

00:06:08,349 --> 00:06:14,419
you know the simple web servers or you

00:06:11,060 --> 00:06:16,030
know databases and web apps so what's

00:06:14,419 --> 00:06:18,229
the network plumbing working group that

00:06:16,030 --> 00:06:20,330
is a group that we form to kind of

00:06:18,229 --> 00:06:24,169
tackle some of these problems we worked

00:06:20,330 --> 00:06:30,229
with a number of other upstream partners

00:06:24,169 --> 00:06:31,819
and groups Intel as well trying to think

00:06:30,229 --> 00:06:34,190
of similar ones well anyway red had

00:06:31,819 --> 00:06:37,819
helped form this group about a little

00:06:34,190 --> 00:06:40,310
over a year and a half ago and it's

00:06:37,819 --> 00:06:42,349
focus is on enabling some of these use

00:06:40,310 --> 00:06:45,889
cases that might require multiple

00:06:42,349 --> 00:06:48,500
network attachments per pod to enable

00:06:45,889 --> 00:06:51,319
these in kubernetes but at least

00:06:48,500 --> 00:06:53,810
initially in a way that does not modify

00:06:51,319 --> 00:06:55,669
the kubernetes api officially there have

00:06:53,810 --> 00:06:57,560
been discussions going on a lot in

00:06:55,669 --> 00:07:00,380
kubernetes network special interest

00:06:57,560 --> 00:07:03,139
group around how to enable this and some

00:07:00,380 --> 00:07:05,479
pocs and things like that but there's

00:07:03,139 --> 00:07:08,330
some resistance upstream to it some you

00:07:05,479 --> 00:07:09,830
know for some good reasons and so the

00:07:08,330 --> 00:07:11,150
network limit working group is formed as

00:07:09,830 --> 00:07:11,690
a forum to be able to talk about these

00:07:11,150 --> 00:07:14,330
things

00:07:11,690 --> 00:07:16,340
prototype them and figure out what we

00:07:14,330 --> 00:07:18,319
need to do to maybe get some pieces of

00:07:16,340 --> 00:07:22,009
this upstream solve these problems

00:07:18,319 --> 00:07:23,509
before something upstream that you know

00:07:22,009 --> 00:07:25,699
may or may not get rejected might need a

00:07:23,509 --> 00:07:27,460
lot of work etc and it turned out there

00:07:25,699 --> 00:07:29,900
was a lot more work than we thought here

00:07:27,460 --> 00:07:32,090
so the plumbing working group focused on

00:07:29,900 --> 00:07:33,860
creating a specification that bases

00:07:32,090 --> 00:07:35,870
itself off CNI that anybody could

00:07:33,860 --> 00:07:37,340
implement to provide multiple networks

00:07:35,870 --> 00:07:40,520
per pod

00:07:37,340 --> 00:07:42,740
we did some pocs we refine those we

00:07:40,520 --> 00:07:44,160
learned a lot from the pocs we developed

00:07:42,740 --> 00:07:48,330
a specification over

00:07:44,160 --> 00:07:52,110
year or so refined it we did a first

00:07:48,330 --> 00:07:53,160
release mid to late last year and also

00:07:52,110 --> 00:07:55,050
been working on a reference

00:07:53,160 --> 00:07:57,120
implementation of that which is multiple

00:07:55,050 --> 00:07:59,670
talked a little bit more about in depth

00:07:57,120 --> 00:08:02,070
quite soon if you're interested in

00:07:59,670 --> 00:08:04,890
helping out with this group joining the

00:08:02,070 --> 00:08:07,560
skirt I have the link to the community

00:08:04,890 --> 00:08:09,810
right there and that includes like

00:08:07,560 --> 00:08:12,210
meeting times the purpose some of the

00:08:09,810 --> 00:08:14,400
things that are being worked on and

00:08:12,210 --> 00:08:16,080
there's also in the slide back the link

00:08:14,400 --> 00:08:17,670
to meeting recordings on YouTube all of

00:08:16,080 --> 00:08:19,050
our meetings are public all the meetings

00:08:17,670 --> 00:08:20,910
of today's networks special interest

00:08:19,050 --> 00:08:23,970
group are also public so it's a very

00:08:20,910 --> 00:08:25,950
inclusive community feel free to join

00:08:23,970 --> 00:08:29,280
we'd like everybody's ideas and we'd

00:08:25,950 --> 00:08:33,169
love to happen I'm gonna skip that slide

00:08:29,280 --> 00:08:35,760
for time reasons so the spec b1 again

00:08:33,169 --> 00:08:37,320
short term solution there are other

00:08:35,760 --> 00:08:39,000
groups that are exploring much longer

00:08:37,320 --> 00:08:40,800
term solutions something like network

00:08:39,000 --> 00:08:44,219
service mesh if any of you for meeting

00:08:40,800 --> 00:08:46,890
with that but the network plumbing group

00:08:44,219 --> 00:08:49,190
was focused on what can we do to enable

00:08:46,890 --> 00:08:51,180
some of those cases that we talked about

00:08:49,190 --> 00:08:54,090
sooner rather than later

00:08:51,180 --> 00:08:55,740
without change in kubernetes api because

00:08:54,090 --> 00:08:57,210
that's very hard to do for various

00:08:55,740 --> 00:08:59,750
reasons that i won't necessarily get

00:08:57,210 --> 00:09:02,430
into unless you really want to know and

00:08:59,750 --> 00:09:03,840
it'll basically a lightweight standard

00:09:02,430 --> 00:09:08,790
that anybody could fairly easily

00:09:03,840 --> 00:09:11,010
implement beyond that it does use CNI

00:09:08,790 --> 00:09:13,530
but we found while developing the

00:09:11,010 --> 00:09:15,480
specification that there were other

00:09:13,530 --> 00:09:17,130
people who didn't want to use CNI

00:09:15,480 --> 00:09:18,780
plugins necessarily to do this

00:09:17,130 --> 00:09:20,340
specification so we worked with those

00:09:18,780 --> 00:09:23,550
people and we tried to figure out ways

00:09:20,340 --> 00:09:25,350
to make sure the spec would work for

00:09:23,550 --> 00:09:28,020
plugins that didn't necessarily use see

00:09:25,350 --> 00:09:29,610
it we also want to coordinate with the

00:09:28,020 --> 00:09:31,170
resource management working group and

00:09:29,610 --> 00:09:33,510
that's a working group that's focused on

00:09:31,170 --> 00:09:37,290
some things like scarce hardware so if

00:09:33,510 --> 00:09:38,520
you have s Riv nix on your notes that's

00:09:37,290 --> 00:09:40,140
something that you only have a certain

00:09:38,520 --> 00:09:42,900
number of and they only have a certain

00:09:40,140 --> 00:09:44,940
number of capabilities and so you need

00:09:42,900 --> 00:09:46,650
to figure out well if I over subscribe

00:09:44,940 --> 00:09:49,020
this node with pods that require that

00:09:46,650 --> 00:09:50,580
capability can't do that things will

00:09:49,020 --> 00:09:52,260
fail you want to stop that before it

00:09:50,580 --> 00:09:54,720
actually happens so we're working with

00:09:52,260 --> 00:09:56,670
them to try to figure out how we can

00:09:54,720 --> 00:09:58,439
best use of the resource management on

00:09:56,670 --> 00:10:01,379
the notes and make sure that me prevent

00:09:58,439 --> 00:10:05,370
these problems before they occur so a

00:10:01,379 --> 00:10:07,560
quickly go over specification that it

00:10:05,370 --> 00:10:10,050
has a couple of parts the first one is

00:10:07,560 --> 00:10:12,660
an annotation so in kubernetes you

00:10:10,050 --> 00:10:13,410
define everything through you know

00:10:12,660 --> 00:10:16,319
usually

00:10:13,410 --> 00:10:18,209
yamo files and so you'll add an

00:10:16,319 --> 00:10:20,519
annotation to the pod object when you

00:10:18,209 --> 00:10:23,220
create it that says I want to attach

00:10:20,519 --> 00:10:26,790
this pod to network a or in this case

00:10:23,220 --> 00:10:29,370
network fubar when that happens and the

00:10:26,790 --> 00:10:31,199
pot is created the node will actually go

00:10:29,370 --> 00:10:33,029
off and it will attach that pod to the

00:10:31,199 --> 00:10:34,980
cluster wide default network which is

00:10:33,029 --> 00:10:37,800
the normal communities Network but then

00:10:34,980 --> 00:10:40,709
also to fubar and then the

00:10:37,800 --> 00:10:42,899
implementation for example Malta's will

00:10:40,709 --> 00:10:45,569
take all the information about mac

00:10:42,899 --> 00:10:47,490
address IP address other characteristics

00:10:45,569 --> 00:10:50,069
and publish that back to the kubernetes

00:10:47,490 --> 00:10:53,850
api currently the only thing in the cube

00:10:50,069 --> 00:10:55,230
API that gets reported about a pod is

00:10:53,850 --> 00:10:56,970
its IP address and it turned out that

00:10:55,230 --> 00:10:59,129
that wasn't actually sufficient for a

00:10:56,970 --> 00:11:01,800
lot of the cases so you can kind of see

00:10:59,129 --> 00:11:02,850
here that there are a number of pieces

00:11:01,800 --> 00:11:05,279
of information that get published

00:11:02,850 --> 00:11:06,990
another thing you can see is that pods

00:11:05,279 --> 00:11:08,220
can have multiple IP addresses that's

00:11:06,990 --> 00:11:10,379
something that kubernetes upstream

00:11:08,220 --> 00:11:12,809
itself only is really starting to deal

00:11:10,379 --> 00:11:16,680
with and that was only because of ipv4

00:11:12,809 --> 00:11:17,970
and ipv6 dual-stack so we kind of tried

00:11:16,680 --> 00:11:20,699
to incorporate those kinds of things

00:11:17,970 --> 00:11:21,930
into the specification already so that

00:11:20,699 --> 00:11:25,529
it would be compatible with future

00:11:21,930 --> 00:11:28,110
versions of communities so you can see

00:11:25,529 --> 00:11:30,899
that so that's the second part the third

00:11:28,110 --> 00:11:32,339
part is that the specification defines a

00:11:30,899 --> 00:11:34,709
custom resource definition which we

00:11:32,339 --> 00:11:37,319
talked about earlier and the custom

00:11:34,709 --> 00:11:41,579
research definition just says this is

00:11:37,319 --> 00:11:43,889
what my network needs to be created for

00:11:41,579 --> 00:11:45,580
the pods here are the properties that

00:11:43,889 --> 00:11:47,170
this network should you

00:11:45,580 --> 00:11:49,779
is when a pod is connected to that

00:11:47,170 --> 00:11:52,959
network then you do that through the

00:11:49,779 --> 00:11:54,970
cube API there are some additional

00:11:52,959 --> 00:11:56,649
components you know for example you can

00:11:54,970 --> 00:11:59,200
think of you might not want every single

00:11:56,649 --> 00:12:00,850
pod in your cluster to attach to a given

00:11:59,200 --> 00:12:03,550
network so we need to make sure we have

00:12:00,850 --> 00:12:06,430
access control for these networks and

00:12:03,550 --> 00:12:07,089
there's also admission controllers for

00:12:06,430 --> 00:12:08,910
validation

00:12:07,089 --> 00:12:11,529
an admission controller is simply if

00:12:08,910 --> 00:12:14,170
components and kubernetes that allows

00:12:11,529 --> 00:12:15,940
validation allows access control of

00:12:14,170 --> 00:12:18,130
things before they get added to

00:12:15,940 --> 00:12:19,600
kubernetes itself so it kind of routes

00:12:18,130 --> 00:12:21,310
your request through the admission

00:12:19,600 --> 00:12:23,050
controller and then finally if the

00:12:21,310 --> 00:12:24,690
admission controller says yes allows

00:12:23,050 --> 00:12:29,350
that to be added to the communities

00:12:24,690 --> 00:12:31,420
object store and ecosystem there's also

00:12:29,350 --> 00:12:35,920
some upcoming stuff to help other

00:12:31,420 --> 00:12:38,410
implementations so let's talk about

00:12:35,920 --> 00:12:41,740
malti's we call Multi and I'm meta

00:12:38,410 --> 00:12:44,620
plugin because essentially what it is is

00:12:41,740 --> 00:12:46,870
a shim between kubernetes and a number

00:12:44,620 --> 00:12:48,670
of other network plugins and it kind of

00:12:46,870 --> 00:12:51,550
multi plexus things which is kind of

00:12:48,670 --> 00:12:53,440
where the name Malta's comes from so it

00:12:51,550 --> 00:12:55,779
allows you to attach more than one

00:12:53,440 --> 00:12:57,670
network to any given pod in kubernetes

00:12:55,779 --> 00:12:59,470
and it understands the network plumbing

00:12:57,670 --> 00:13:02,920
working group specification which allows

00:12:59,470 --> 00:13:06,070
you to do all these kinds of things so

00:13:02,920 --> 00:13:07,480
again the problem just to recap each bot

00:13:06,070 --> 00:13:10,240
only has one network interface and

00:13:07,480 --> 00:13:12,520
normal kubernetes that's not

00:13:10,240 --> 00:13:13,720
particularly dynamic you only get one

00:13:12,520 --> 00:13:16,300
thing we need a little bit more

00:13:13,720 --> 00:13:17,920
flexibility so how does most this help

00:13:16,300 --> 00:13:21,339
with this flexible or help with this and

00:13:17,920 --> 00:13:23,079
provide the flexibility well you define

00:13:21,339 --> 00:13:24,220
the CR T's that define all of your

00:13:23,079 --> 00:13:27,579
networks for the cluster

00:13:24,220 --> 00:13:29,770
Malta's looks at those it reads those it

00:13:27,579 --> 00:13:31,779
figures out when your pod is born on a

00:13:29,770 --> 00:13:33,520
particular node which networks it needs

00:13:31,779 --> 00:13:35,350
to go attach that pod - it looks up

00:13:33,520 --> 00:13:36,610
those network definitions and it

00:13:35,350 --> 00:13:40,020
actually makes that happen

00:13:36,610 --> 00:13:40,020
she'll go into a little bit more

00:13:41,320 --> 00:13:46,540
so in this example you know you kind of

00:13:43,930 --> 00:13:49,360
see how Malta's will attach to different

00:13:46,540 --> 00:13:51,550
networks at the same time and you get

00:13:49,360 --> 00:13:53,410
you know mac feeling inking the second

00:13:51,550 --> 00:13:54,970
network is going to be any cni plugin it

00:13:53,410 --> 00:13:57,880
doesn't really matter so it's fairly

00:13:54,970 --> 00:13:59,500
open it's fairly easy to specify what

00:13:57,880 --> 00:14:05,740
kind of networks you want beyond the

00:13:59,500 --> 00:14:07,959
default one so key concepts the

00:14:05,740 --> 00:14:10,449
specification okay let's back up a

00:14:07,959 --> 00:14:12,130
second kubernetes requires a cluster

00:14:10,449 --> 00:14:14,350
wide default network it has certain

00:14:12,130 --> 00:14:16,930
guarantees or certain things that it

00:14:14,350 --> 00:14:18,579
expects out of a network plug-in and

00:14:16,930 --> 00:14:20,440
your pod network and so the

00:14:18,579 --> 00:14:24,040
specification calls that the default

00:14:20,440 --> 00:14:27,430
cluster wide network and that provides

00:14:24,040 --> 00:14:29,350
the backwards compatibility between what

00:14:27,430 --> 00:14:32,019
Malta's does with multiple networks and

00:14:29,350 --> 00:14:34,180
what kubernetes expects it always

00:14:32,019 --> 00:14:36,459
attaches the default of the pod to the

00:14:34,180 --> 00:14:38,380
default cluster wide network but then

00:14:36,459 --> 00:14:40,480
all of the additional ones are secondary

00:14:38,380 --> 00:14:42,370
sidebar networks and what that means is

00:14:40,480 --> 00:14:43,810
that they're always going to be

00:14:42,370 --> 00:14:46,269
additional you have the default one

00:14:43,810 --> 00:14:49,089
always and then you have zero or more of

00:14:46,269 --> 00:14:51,220
these secondary networks the secondary

00:14:49,089 --> 00:14:53,290
networks don't have quite the same

00:14:51,220 --> 00:14:55,529
guarantees as the default cluster wide

00:14:53,290 --> 00:14:57,880
network for example you don't have

00:14:55,529 --> 00:14:59,589
microservices on those you don't have

00:14:57,880 --> 00:15:02,019
any kind of network policy on those

00:14:59,589 --> 00:15:03,519
networks we're gonna work on adding that

00:15:02,019 --> 00:15:05,920
in the future and exploring how to do

00:15:03,519 --> 00:15:09,000
that but at the moment these secondary

00:15:05,920 --> 00:15:13,569
networks are very targeted very focused

00:15:09,000 --> 00:15:15,069
custom resource definitions basically

00:15:13,569 --> 00:15:17,110
what happens is you say this is a

00:15:15,069 --> 00:15:18,850
description of my object in our case

00:15:17,110 --> 00:15:21,519
that would be these secondary networks

00:15:18,850 --> 00:15:24,430
and you tell kubernetes what this

00:15:21,519 --> 00:15:27,069
particular object looks like how to

00:15:24,430 --> 00:15:29,139
define it kind of validate it you add

00:15:27,069 --> 00:15:32,260
that to the kubernetes api and then

00:15:29,139 --> 00:15:36,149
anybody later can create objects using

00:15:32,260 --> 00:15:36,149
that kind of type using that description

00:15:36,389 --> 00:15:41,709
for the network plane working group

00:15:38,500 --> 00:15:44,410
specification you can kind of see the

00:15:41,709 --> 00:15:45,340
example of what the pod annotation looks

00:15:44,410 --> 00:15:49,779
like to select

00:15:45,340 --> 00:15:53,260
all networks right here you can kind of

00:15:49,779 --> 00:15:57,430
see this is an annotation that's kind of

00:15:53,260 --> 00:15:59,410
defined by the group it has a name for

00:15:57,430 --> 00:16:01,300
each network and so you can say okay

00:15:59,410 --> 00:16:03,580
well I want to attach this pod to the

00:16:01,300 --> 00:16:06,070
control fleet Network and one and I went

00:16:03,580 --> 00:16:08,320
to attach the pod to the data network so

00:16:06,070 --> 00:16:11,410
these names which are the product

00:16:08,320 --> 00:16:15,160
specification map down here to the

00:16:11,410 --> 00:16:16,930
actual object that you have defined for

00:16:15,160 --> 00:16:18,550
that network and that object has a

00:16:16,930 --> 00:16:22,060
couple of properties as well and this is

00:16:18,550 --> 00:16:23,920
basically the C&I configuration for that

00:16:22,060 --> 00:16:26,020
network that describes how you're

00:16:23,920 --> 00:16:32,529
actually going to attach spots to that

00:16:26,020 --> 00:16:35,170
network this is a little bit more

00:16:32,529 --> 00:16:37,210
detailed definition of how this works

00:16:35,170 --> 00:16:40,029
this is the object that we've been

00:16:37,210 --> 00:16:42,700
talking about attachment definition and

00:16:40,029 --> 00:16:44,860
this is what you create the CRD for so

00:16:42,700 --> 00:16:47,620
the CRD tells kubernetes how to

00:16:44,860 --> 00:16:50,020
interpret this particular object when

00:16:47,620 --> 00:16:52,180
you've added the subject of cube api so

00:16:50,020 --> 00:16:55,089
you add this once and then every single

00:16:52,180 --> 00:16:57,190
node on the system is able to see the

00:16:55,089 --> 00:16:59,140
configuration for CNI and to be able to

00:16:57,190 --> 00:17:05,740
create pods that attach to this network

00:16:59,140 --> 00:17:07,829
so how do you start a pod with one of

00:17:05,740 --> 00:17:11,319
these additional interfaces pretty easy

00:17:07,829 --> 00:17:12,699
you use an annotation then you say this

00:17:11,319 --> 00:17:15,730
is the network that I wouldn't attach to

00:17:12,699 --> 00:17:17,260
this name maps back to that object that

00:17:15,730 --> 00:17:20,170
you're just looking at that describes

00:17:17,260 --> 00:17:22,470
that MACD line network so that would be

00:17:20,170 --> 00:17:22,470
here

00:17:23,930 --> 00:17:28,740
and you can there's a couple of formats

00:17:26,490 --> 00:17:30,150
for this annotation you can use the

00:17:28,740 --> 00:17:31,680
short format which is a lot more

00:17:30,150 --> 00:17:34,770
user-friendly and that just says the

00:17:31,680 --> 00:17:36,480
name but there is also another format

00:17:34,770 --> 00:17:38,370
that allows you to describe things like

00:17:36,480 --> 00:17:40,140
what's the MAC address that I want this

00:17:38,370 --> 00:17:42,660
interface to have what's the IP address

00:17:40,140 --> 00:17:44,910
that I want this interface to have what

00:17:42,660 --> 00:17:48,540
is the network interface name inside the

00:17:44,910 --> 00:17:49,980
pot that this attachment should have so

00:17:48,540 --> 00:17:53,220
that it's not completely random in your

00:17:49,980 --> 00:17:57,120
application inside the pod can expect a

00:17:53,220 --> 00:18:00,210
certain network interface name so then

00:17:57,120 --> 00:18:01,590
of course after you attach this pod to a

00:18:00,210 --> 00:18:03,780
number of different networks how do you

00:18:01,590 --> 00:18:05,910
even get those results back the

00:18:03,780 --> 00:18:08,370
specification defines in volt dis

00:18:05,910 --> 00:18:10,110
implements a way to publish this

00:18:08,370 --> 00:18:12,900
information back to the Cooper Nettie's

00:18:10,110 --> 00:18:14,280
API so that you can inspect it from your

00:18:12,900 --> 00:18:16,620
other applications or from your

00:18:14,280 --> 00:18:20,970
management tools or anything else that

00:18:16,620 --> 00:18:22,650
you want and once you see the

00:18:20,970 --> 00:18:24,390
information here you'll see the

00:18:22,650 --> 00:18:34,800
secondary network interface and that's

00:18:24,390 --> 00:18:37,920
the MacNeill in one second but now we

00:18:34,800 --> 00:18:42,690
have demo time so and we'll just do a

00:18:37,920 --> 00:18:45,120
little quick demo of how this works so

00:18:42,690 --> 00:18:47,460
you can see here I have a small

00:18:45,120 --> 00:18:51,150
kubernetes our small open shipped

00:18:47,460 --> 00:18:54,210
cluster and it has two nodes in it at

00:18:51,150 --> 00:18:55,770
the moment there's a master right here

00:18:54,210 --> 00:18:57,690
and there's a second node right there

00:18:55,770 --> 00:19:00,180
and this is just showing that Malta's is

00:18:57,690 --> 00:19:09,680
running in that cluster and managing the

00:19:00,180 --> 00:19:09,680
networking situation yep not better

00:19:09,750 --> 00:19:14,860
good point so what we're going to do

00:19:13,060 --> 00:19:17,200
first is we're actually going to create

00:19:14,860 --> 00:19:18,670
a pod and we're just going to use nginx

00:19:17,200 --> 00:19:29,670
because it's small and it's really

00:19:18,670 --> 00:19:29,670
simple so you create the nginx pod and

00:19:31,410 --> 00:19:44,980
create itself for a second there sorry

00:19:43,270 --> 00:19:46,720
about the wait I actually had pulled

00:19:44,980 --> 00:19:49,590
this image before but apparently that's

00:19:46,720 --> 00:19:49,590
not the case anymore

00:19:58,920 --> 00:20:03,160
well anyway we will come back to that

00:20:01,300 --> 00:20:05,430
and hopefully it will be where it needs

00:20:03,160 --> 00:20:05,430
to be

00:20:08,030 --> 00:20:12,520
so while we wait for that what is next

00:20:10,580 --> 00:20:16,130
for the network plumbing working group

00:20:12,520 --> 00:20:18,500
we have some - classification updates

00:20:16,130 --> 00:20:21,610
obviously not everything is perfect the

00:20:18,500 --> 00:20:23,600
first time around so we found some

00:20:21,610 --> 00:20:25,850
changes that we need to make we found

00:20:23,600 --> 00:20:28,490
some errors in specification there were

00:20:25,850 --> 00:20:30,230
a couple of small problems that we had

00:20:28,490 --> 00:20:33,590
to address for example what if you want

00:20:30,230 --> 00:20:35,600
to specify multiple static IPS we had to

00:20:33,590 --> 00:20:37,880
add multiple static IPS but with a

00:20:35,600 --> 00:20:40,670
network prefix so if you want to do like

00:20:37,880 --> 00:20:43,400
a slash 24 or slash you know 16 whatever

00:20:40,670 --> 00:20:44,990
you want your static I paid to be we a

00:20:43,400 --> 00:20:47,090
found that that wasn't in the

00:20:44,990 --> 00:20:49,190
specification we added that and we also

00:20:47,090 --> 00:20:51,260
found that that wasn't possible with CNI

00:20:49,190 --> 00:20:53,900
due to some of the conventions that Si

00:20:51,260 --> 00:20:56,710
and I had and so we had to also update

00:20:53,900 --> 00:20:58,910
Si and I so there's kind of been a

00:20:56,710 --> 00:21:00,740
cross-pollination I guess between CNI

00:20:58,910 --> 00:21:01,580
and the plumbing working group we worked

00:21:00,740 --> 00:21:04,430
pretty well together

00:21:01,580 --> 00:21:05,990
also some of us on the plumbing working

00:21:04,430 --> 00:21:08,300
group or maintainer z-- with CNI so it's

00:21:05,990 --> 00:21:11,000
very easy to make these changes back and

00:21:08,300 --> 00:21:16,370
forth some of the other minor spec

00:21:11,000 --> 00:21:19,040
updates adding some of the capabilities

00:21:16,370 --> 00:21:20,360
that kubernetes allows and making sure

00:21:19,040 --> 00:21:22,250
that those were expressed in the

00:21:20,360 --> 00:21:25,970
specification kubernetes allows things

00:21:22,250 --> 00:21:27,110
like port mapping bandwidth QoS type

00:21:25,970 --> 00:21:29,210
stuff

00:21:27,110 --> 00:21:30,680
and it pushes those through into the

00:21:29,210 --> 00:21:33,380
network plugin but we also need to make

00:21:30,680 --> 00:21:35,270
sure that the specification allowed

00:21:33,380 --> 00:21:38,870
passing those through to something like

00:21:35,270 --> 00:21:41,000
Malta saying to those sub plugins we

00:21:38,870 --> 00:21:43,520
also as I talked about before because

00:21:41,000 --> 00:21:46,790
these secondary networks are not really

00:21:43,520 --> 00:21:48,920
full citizens yet and that can be a

00:21:46,790 --> 00:21:51,020
problem so for example if you want to

00:21:48,920 --> 00:21:52,520
run a media streaming service but it

00:21:51,020 --> 00:21:54,080
needs high performance you might have a

00:21:52,520 --> 00:21:56,810
second network interface that's

00:21:54,080 --> 00:21:59,870
dedicated to media streaming but you

00:21:56,810 --> 00:22:01,760
want to have a service on that

00:21:59,870 --> 00:22:03,170
particular network so that clients don't

00:22:01,760 --> 00:22:04,700
have to connect to a particular IP

00:22:03,170 --> 00:22:06,890
address they can just use a domain name

00:22:04,700 --> 00:22:09,160
and kubernetes figures out which pods it

00:22:06,890 --> 00:22:11,260
goes to that's not currently possible

00:22:09,160 --> 00:22:15,190
because of the

00:22:11,260 --> 00:22:16,809
funding groups because the plumbing

00:22:15,190 --> 00:22:19,510
working group is attempting to not

00:22:16,809 --> 00:22:23,440
change the communities API yet so what

00:22:19,510 --> 00:22:24,880
we need to do is we look into POCs and

00:22:23,440 --> 00:22:27,040
do a little research to figure out

00:22:24,880 --> 00:22:29,980
what's possible there one of the

00:22:27,040 --> 00:22:32,919
problems with that is that if you have a

00:22:29,980 --> 00:22:34,570
second network but you expose all of

00:22:32,919 --> 00:22:36,820
these kinds of things like the pods IP

00:22:34,570 --> 00:22:38,860
address the service virtual IP those

00:22:36,820 --> 00:22:40,480
things to the cube API how does

00:22:38,860 --> 00:22:42,520
something that's reading the cube API

00:22:40,480 --> 00:22:43,990
and trying to talk to it knowing that it

00:22:42,520 --> 00:22:47,140
has to use this completely separate

00:22:43,990 --> 00:22:48,760
physical network to access the pot so we

00:22:47,140 --> 00:22:50,350
have to solve those kinds of problems we

00:22:48,760 --> 00:22:52,630
also have to take a look at network

00:22:50,350 --> 00:22:54,400
policy on these second interfaces

00:22:52,630 --> 00:22:57,100
because again the network policy is

00:22:54,400 --> 00:22:59,200
talking about can pad a talk to pod be

00:22:57,100 --> 00:23:01,330
there anything in the network name very

00:22:59,200 --> 00:23:03,429
can anything in the project or name

00:23:01,330 --> 00:23:05,500
space over here talk to the project

00:23:03,429 --> 00:23:07,059
namespace over here which at least an

00:23:05,500 --> 00:23:10,210
open shift is one of the ways that we

00:23:07,059 --> 00:23:13,840
implement multi-tenancy that's not so

00:23:10,210 --> 00:23:15,880
easy because if the pod is on two

00:23:13,840 --> 00:23:17,470
networks at once how do you know what

00:23:15,880 --> 00:23:19,090
can talk to each other how do you know

00:23:17,470 --> 00:23:21,010
that these things over here is supposed

00:23:19,090 --> 00:23:22,570
to be able to access the network what

00:23:21,010 --> 00:23:24,640
happens if you can't actually talk

00:23:22,570 --> 00:23:28,390
between the two networks so the physical

00:23:24,640 --> 00:23:30,370
level so that's an area of research that

00:23:28,390 --> 00:23:33,070
we're trying to work on and also dynamic

00:23:30,370 --> 00:23:36,100
interface attachments those are right

00:23:33,070 --> 00:23:38,200
now kubernetes expects that when you

00:23:36,100 --> 00:23:40,660
start a pod it has your cluster by

00:23:38,200 --> 00:23:42,910
default network and through multi and

00:23:40,660 --> 00:23:44,440
the specification you get these

00:23:42,910 --> 00:23:46,360
additional networks but you can't add

00:23:44,440 --> 00:23:48,040
and remove them on demand because

00:23:46,360 --> 00:23:51,790
kubernetes really does not expect that

00:23:48,040 --> 00:23:54,160
well it turns out that they some people

00:23:51,790 --> 00:23:56,200
want this there's a lot of interest

00:23:54,160 --> 00:23:58,870
upstream and being able to change the

00:23:56,200 --> 00:24:00,790
pod definition after it started and have

00:23:58,870 --> 00:24:03,100
those networks automatically attach and

00:24:00,790 --> 00:24:05,650
detach and because we have this shim for

00:24:03,100 --> 00:24:08,710
example Montes in between kubernetes and

00:24:05,650 --> 00:24:11,049
the pods themselves this shim can sit

00:24:08,710 --> 00:24:13,360
there watch the kubernetes api and

00:24:11,049 --> 00:24:15,040
decide oh hey i noticed that this

00:24:13,360 --> 00:24:15,929
network is now present on the pod

00:24:15,040 --> 00:24:18,480
specification

00:24:15,929 --> 00:24:24,450
let's add it to the pot or for example

00:24:18,480 --> 00:24:25,830
removing it that's a use case for the

00:24:24,450 --> 00:24:28,350
particular use case that somebody is

00:24:25,830 --> 00:24:29,669
very interested in is dynamic grabbing

00:24:28,350 --> 00:24:31,769
and so they're kind of building an

00:24:29,669 --> 00:24:33,690
architecture where some of the routing

00:24:31,769 --> 00:24:35,429
logic is actually in the pots but to be

00:24:33,690 --> 00:24:37,440
able to do that you might need to add

00:24:35,429 --> 00:24:40,350
network interfaces remove them from the

00:24:37,440 --> 00:24:42,269
pot to be able to dynamically update

00:24:40,350 --> 00:24:42,690
that system so we're going to work on

00:24:42,269 --> 00:24:44,129
that

00:24:42,690 --> 00:24:47,399
that's actually not really that hard

00:24:44,129 --> 00:24:49,830
because it's just doing the same exact

00:24:47,399 --> 00:24:52,580
operation just at a different time so

00:24:49,830 --> 00:24:54,809
that's going to come up as well and

00:24:52,580 --> 00:24:56,909
because not many people have done this

00:24:54,809 --> 00:24:58,470
type of thing before we're gonna try to

00:24:56,909 --> 00:25:00,840
figure out if there any implications for

00:24:58,470 --> 00:25:02,039
kubernetes there might be we'll see a

00:25:00,840 --> 00:25:03,450
lot of this stuff you really don't know

00:25:02,039 --> 00:25:05,600
until you try it and not a lot of people

00:25:03,450 --> 00:25:08,970
have tried this kind of thing before

00:25:05,600 --> 00:25:10,710
so through CNI itself there are two

00:25:08,970 --> 00:25:12,600
parts to C&I the first one is the

00:25:10,710 --> 00:25:14,129
specification that anybody can implement

00:25:12,600 --> 00:25:17,850
and there's also a set of reference

00:25:14,129 --> 00:25:19,139
plug-ins for CNI so next up for CNI

00:25:17,850 --> 00:25:22,049
we're gonna release a new specification

00:25:19,139 --> 00:25:26,220
for for CNI in the next couple of weeks

00:25:22,049 --> 00:25:28,259
or maybe a month or so and as part of

00:25:26,220 --> 00:25:30,019
that it adds things like check support

00:25:28,259 --> 00:25:32,490
which is network health checking

00:25:30,019 --> 00:25:35,850
previously kubernetes has not really had

00:25:32,490 --> 00:25:38,220
the ability to say hey does this pod

00:25:35,850 --> 00:25:39,990
actually is its network actually healthy

00:25:38,220 --> 00:25:41,490
does this network actually work it has a

00:25:39,990 --> 00:25:43,139
higher level health checking where it

00:25:41,490 --> 00:25:44,909
actually query does the service inside

00:25:43,139 --> 00:25:46,440
the pod so if it's a web server it will

00:25:44,909 --> 00:25:48,119
actually query the web server and say

00:25:46,440 --> 00:25:49,860
hey does this web server still healthy

00:25:48,119 --> 00:25:51,929
but there's not a way to say is the

00:25:49,860 --> 00:25:54,749
network itself that the pot is attached

00:25:51,929 --> 00:25:56,220
to actually working so that's something

00:25:54,749 --> 00:25:58,679
that we add to CNI and then eventually

00:25:56,220 --> 00:26:01,769
we'll also add to kubernetes itself to

00:25:58,679 --> 00:26:04,350
call that functionality as soon I and

00:26:01,769 --> 00:26:06,119
when the network is unhealthy kubernetes

00:26:04,350 --> 00:26:06,539
will kill the pod we start it somewhere

00:26:06,119 --> 00:26:10,460
else

00:26:06,539 --> 00:26:10,460
or maybe the same note doesn't matter

00:26:10,529 --> 00:26:15,809
finally cache results in the helper

00:26:13,169 --> 00:26:18,330
library so CNI has kind of a helper

00:26:15,809 --> 00:26:18,840
library that kubernetes or any other

00:26:18,330 --> 00:26:23,010
runtime

00:26:18,840 --> 00:26:25,260
can use and that currently what happens

00:26:23,010 --> 00:26:26,850
is kubernetes calls the ad request for

00:26:25,260 --> 00:26:29,850
the pod it gets back the IP address

00:26:26,850 --> 00:26:31,470
throws everything else away that doesn't

00:26:29,850 --> 00:26:33,450
work that well in some of the cases for

00:26:31,470 --> 00:26:35,880
example when you want to check the

00:26:33,450 --> 00:26:37,980
network health again so we added support

00:26:35,880 --> 00:26:40,260
for caching that result from the pod

00:26:37,980 --> 00:26:42,720
network setup so that it could be used

00:26:40,260 --> 00:26:45,120
later that you get more information at

00:26:42,720 --> 00:26:46,680
kubernetes could use later because again

00:26:45,120 --> 00:26:49,680
right now it only stores the IP address

00:26:46,680 --> 00:26:51,750
and that's not really sufficient we also

00:26:49,680 --> 00:26:54,960
have some more reference plugins there's

00:26:51,750 --> 00:26:57,960
a firewall plugin that works with IP

00:26:54,960 --> 00:27:00,150
tables also works with firewall d that

00:26:57,960 --> 00:27:02,550
will help in some cases you need to

00:27:00,150 --> 00:27:04,410
punch those through the firewall to do

00:27:02,550 --> 00:27:07,680
certain things the firewall plugin will

00:27:04,410 --> 00:27:09,420
allow that fairly easily there's also a

00:27:07,680 --> 00:27:11,910
new source based routing plugin that

00:27:09,420 --> 00:27:14,270
helps with some of the vrf which is I

00:27:11,910 --> 00:27:17,210
think virtual routing and forwarding

00:27:14,270 --> 00:27:22,680
that was contributed upstream and

00:27:17,210 --> 00:27:25,290
recently merged Malta's itself what's

00:27:22,680 --> 00:27:28,950
next from Altis we want to like I said

00:27:25,290 --> 00:27:30,750
before try to figure out how these

00:27:28,950 --> 00:27:34,410
secondary networks are actually going to

00:27:30,750 --> 00:27:36,270
work with services in network policy so

00:27:34,410 --> 00:27:38,760
there's going to be some pocs going on

00:27:36,270 --> 00:27:40,560
right now about that we also wanted to

00:27:38,760 --> 00:27:44,460
enhance security currently the way that

00:27:40,560 --> 00:27:47,160
access control works is if this pot is

00:27:44,460 --> 00:27:49,260
part of a namespace you restrict the

00:27:47,160 --> 00:27:51,120
network to the network definition to

00:27:49,260 --> 00:27:52,530
that main space - and if you're not in

00:27:51,120 --> 00:27:54,720
the same namespace you can't actually

00:27:52,530 --> 00:27:58,500
add the network that's not sufficient so

00:27:54,720 --> 00:28:00,420
we're also going to investigate how we

00:27:58,500 --> 00:28:00,800
can make that more fine-grained so you

00:28:00,420 --> 00:28:02,990
can give

00:28:00,800 --> 00:28:05,360
specific users perhaps or specific

00:28:02,990 --> 00:28:07,940
cluster rules access certain networks

00:28:05,360 --> 00:28:08,870
but not there's also going to be

00:28:07,940 --> 00:28:11,300
refinements in that work plumbing

00:28:08,870 --> 00:28:12,770
working group specification we're going

00:28:11,300 --> 00:28:14,210
I mean like I said this kind of small

00:28:12,770 --> 00:28:15,740
fixes we have to make sure that the

00:28:14,210 --> 00:28:19,130
meltus reference implementation is

00:28:15,740 --> 00:28:21,170
updated for those small fixes we also

00:28:19,130 --> 00:28:23,180
want a conformance test framework for

00:28:21,170 --> 00:28:24,590
the specification because multi one

00:28:23,180 --> 00:28:27,050
implementation but there actually are

00:28:24,590 --> 00:28:29,660
others out there and so we want to

00:28:27,050 --> 00:28:31,850
develop a conformance test so that you

00:28:29,660 --> 00:28:33,710
know that certain plugins will actually

00:28:31,850 --> 00:28:36,050
implement the specification implemented

00:28:33,710 --> 00:28:38,240
correctly but that also works well for

00:28:36,050 --> 00:28:40,580
multi speak I've found in the past that

00:28:38,240 --> 00:28:42,830
Malta's itself didn't correctly

00:28:40,580 --> 00:28:45,380
implement the specification so it would

00:28:42,830 --> 00:28:48,290
be useful all around and then again

00:28:45,380 --> 00:28:51,170
continue working with the device

00:28:48,290 --> 00:28:53,660
management group on things like SR io v

00:28:51,170 --> 00:28:56,330
you know if you only have the ability to

00:28:53,660 --> 00:29:00,410
have 32 virtual functions on your NIC

00:28:56,330 --> 00:29:02,840
well don't start 33 pods that require a

00:29:00,410 --> 00:29:04,460
virtual function to be inside the pods

00:29:02,840 --> 00:29:06,710
network namespace because clearly that's

00:29:04,460 --> 00:29:11,450
not going to work and unhappiness

00:29:06,710 --> 00:29:14,480
results the other thing we might want to

00:29:11,450 --> 00:29:16,250
make multi celebrate because the

00:29:14,480 --> 00:29:19,310
functionality isn't something that's

00:29:16,250 --> 00:29:20,420
like earth-shatteringly complex so if we

00:29:19,310 --> 00:29:22,190
make it a library it could potentially

00:29:20,420 --> 00:29:23,660
be integrated into some of the

00:29:22,190 --> 00:29:25,550
kubernetes container runtimes

00:29:23,660 --> 00:29:27,200
like cryo and then you wouldn't

00:29:25,550 --> 00:29:28,760
necessarily need this shim because cryo

00:29:27,200 --> 00:29:31,010
would automatically understand by

00:29:28,760 --> 00:29:32,930
default that if it sees that this pod

00:29:31,010 --> 00:29:35,090
spec has a couple of networks that it

00:29:32,930 --> 00:29:37,460
should be attached to just go off and do

00:29:35,090 --> 00:29:39,110
that you know it basically fold the shim

00:29:37,460 --> 00:29:42,830
layer into the action of container

00:29:39,110 --> 00:29:44,390
runtime itself it's totally possible not

00:29:42,830 --> 00:29:46,430
sure if that's actually going to happen

00:29:44,390 --> 00:29:47,600
it or not we're just kind of exploring

00:29:46,430 --> 00:29:49,970
and thinking that maybe that's the

00:29:47,600 --> 00:29:51,830
direction that could go the last thing

00:29:49,970 --> 00:29:55,280
to talk about is network service mesh

00:29:51,830 --> 00:29:57,500
that's an upcoming attempt at solving

00:29:55,280 --> 00:30:00,650
this problem and it much more in your

00:29:57,500 --> 00:30:01,650
way if you are interested in our service

00:30:00,650 --> 00:30:02,880
mesh happy to talk

00:30:01,650 --> 00:30:06,620
more about it but it's a little out of

00:30:02,880 --> 00:30:09,090
scope for this particular presentation

00:30:06,620 --> 00:30:11,790
so let's actually go back and check out

00:30:09,090 --> 00:30:18,350
the demo if we can see if that got where

00:30:11,790 --> 00:30:23,070
it needs to be nope it sure didn't so

00:30:18,350 --> 00:30:26,490
unfortunately we will not have the quick

00:30:23,070 --> 00:30:28,380
demo but if you're interested in any of

00:30:26,490 --> 00:30:28,830
these topics we would love to have your

00:30:28,380 --> 00:30:30,600
help

00:30:28,830 --> 00:30:32,190
love to have your input I've put the

00:30:30,600 --> 00:30:34,380
link for the form a working group

00:30:32,190 --> 00:30:37,710
community right there like I said we

00:30:34,380 --> 00:30:40,740
have meetings every other week and we

00:30:37,710 --> 00:30:44,660
love any kind of help or input that

00:30:40,740 --> 00:30:48,770
anybody has so with that and - the demo

00:30:44,660 --> 00:30:48,770
I'd like to open it up for questions

00:31:06,470 --> 00:31:14,610
right yes Jerry asks that I said there

00:31:13,050 --> 00:31:16,190
were some problems with getting some of

00:31:14,610 --> 00:31:19,679
these features upstream into kubernetes

00:31:16,190 --> 00:31:22,230
what are those problems in way after two

00:31:19,679 --> 00:31:26,100
years or more are these sorts of things

00:31:22,230 --> 00:31:27,480
upstream I don't know I mean I'm

00:31:26,100 --> 00:31:29,490
assuming most people are familiar with

00:31:27,480 --> 00:31:31,710
networking in general in this room at

00:31:29,490 --> 00:31:34,890
least at a basic level well it's a very

00:31:31,710 --> 00:31:37,320
complex and so one of the problems is

00:31:34,890 --> 00:31:38,520
that because everybody has something

00:31:37,320 --> 00:31:41,190
different that they need out of

00:31:38,520 --> 00:31:44,910
networking because all of the ways to

00:31:41,190 --> 00:31:46,590
provide those needs are different you

00:31:44,910 --> 00:31:49,140
know it's which interface type do you

00:31:46,590 --> 00:31:51,390
need to use do you need to use a

00:31:49,140 --> 00:31:53,460
particular vendors hardware and software

00:31:51,390 --> 00:31:57,480
combination to get your cluster

00:31:53,460 --> 00:31:58,920
networking working you know what methods

00:31:57,480 --> 00:32:00,620
are you actually going to you know do

00:31:58,920 --> 00:32:02,570
you need to use routing or is

00:32:00,620 --> 00:32:04,490
to me like layer three or the unity is

00:32:02,570 --> 00:32:06,590
layer two all these kinds of things

00:32:04,490 --> 00:32:09,890
kubernetes really does not want to be in

00:32:06,590 --> 00:32:11,809
the business of defining a certain set

00:32:09,890 --> 00:32:14,150
of capabilities that networks should

00:32:11,809 --> 00:32:16,190
have for your containers so they kind of

00:32:14,150 --> 00:32:20,570
want because of the complexity to just

00:32:16,190 --> 00:32:22,309
wash their hands of it and push the

00:32:20,570 --> 00:32:24,110
kinds of things you need to do off to

00:32:22,309 --> 00:32:27,770
custom research definitions like we've

00:32:24,110 --> 00:32:29,360
described here push it off to the

00:32:27,770 --> 00:32:31,460
network plugins themselves that's kind

00:32:29,360 --> 00:32:33,860
of why the CNI layer was added to

00:32:31,460 --> 00:32:35,330
committees a couple years ago was to get

00:32:33,860 --> 00:32:36,950
kubernetes out of the business of

00:32:35,330 --> 00:32:38,720
defining the properties in the network

00:32:36,950 --> 00:32:41,779
and how it's called and just move it all

00:32:38,720 --> 00:32:43,730
into a simple add this container to the

00:32:41,779 --> 00:32:45,830
network and remove this container from

00:32:43,730 --> 00:32:48,380
the network so all that stuff's pushed

00:32:45,830 --> 00:32:51,140
down in now the problem is that when you

00:32:48,380 --> 00:32:53,539
encode those kinds of things like those

00:32:51,140 --> 00:32:55,700
claims of ideas about what a network is

00:32:53,539 --> 00:32:58,429
and how a network works into the

00:32:55,700 --> 00:33:00,200
kubernetes api its API there's

00:32:58,429 --> 00:33:01,610
guarantees there's stability guarantees

00:33:00,200 --> 00:33:05,299
there's backwards compatibility

00:33:01,610 --> 00:33:06,500
guarantees and because it's so complex

00:33:05,299 --> 00:33:08,480
they just don't want to have to deal

00:33:06,500 --> 00:33:12,020
with those kinds of things and formalize

00:33:08,480 --> 00:33:15,140
that stuff into the cube API so we're

00:33:12,020 --> 00:33:17,120
kind of left with how do we make these

00:33:15,140 --> 00:33:18,799
things happen outside of kubernetes and

00:33:17,120 --> 00:33:20,779
maybe take some of the things that we

00:33:18,799 --> 00:33:22,399
learn and bring those back into

00:33:20,779 --> 00:33:26,500
kubernetes but in a much more generic

00:33:22,399 --> 00:33:28,970
way and one of the thoughts there is

00:33:26,500 --> 00:33:32,390
what if you describe the things that

00:33:28,970 --> 00:33:34,159
your application needs out of kubernetes

00:33:32,390 --> 00:33:36,529
like okay does this application need a

00:33:34,159 --> 00:33:38,179
ton of bandwidth maybe what is the

00:33:36,529 --> 00:33:39,919
minimum bandwidth requirement for this

00:33:38,179 --> 00:33:41,870
application what is the minimum QoS

00:33:39,919 --> 00:33:43,789
guarantee or what are the minimum

00:33:41,870 --> 00:33:46,399
isolation guarantees that you need

00:33:43,789 --> 00:33:48,200
should this by network talk to these

00:33:46,399 --> 00:33:50,510
other networks or shouldn't not talk to

00:33:48,200 --> 00:33:53,270
that and then based on those kinds of

00:33:50,510 --> 00:33:53,929
generic properties or requirements of

00:33:53,270 --> 00:33:57,409
the container

00:33:53,929 --> 00:33:59,900
maybe the kubernetes ecosystem would

00:33:57,409 --> 00:34:01,580
figure out which actual backing

00:33:59,900 --> 00:34:04,250
network to attach the pod to you without

00:34:01,580 --> 00:34:07,760
having to say this needs IP address you

00:34:04,250 --> 00:34:09,440
know 10 1 1 3 on this network with this

00:34:07,760 --> 00:34:11,450
particular MAC address on this

00:34:09,440 --> 00:34:15,050
particular card that can deliver a 40

00:34:11,450 --> 00:34:17,030
gamers so it's kind of one of the

00:34:15,050 --> 00:34:19,640
reasons why how we're going to approach

00:34:17,030 --> 00:34:22,850
that problem but yes it's a very long

00:34:19,640 --> 00:34:24,649
road and everybody needs something

00:34:22,850 --> 00:34:43,550
different from networking I'm sure

00:34:24,649 --> 00:34:45,230
you're not missing well yeah they could

00:34:43,550 --> 00:34:47,659
I don't think that those those things

00:34:45,230 --> 00:34:49,850
are mutually exclusive you know you

00:34:47,659 --> 00:34:52,000
don't have to define services on the

00:34:49,850 --> 00:34:55,010
secondary networks if you don't want to

00:34:52,000 --> 00:34:58,190
it's just that we're gonna allow that

00:34:55,010 --> 00:34:59,690
possibility to happen because there are

00:34:58,190 --> 00:35:02,300
some use cases that want that

00:34:59,690 --> 00:35:05,030
possibility sorry the question was these

00:35:02,300 --> 00:35:08,330
the networks that multitude being the

00:35:05,030 --> 00:35:09,740
default network are secondary when we

00:35:08,330 --> 00:35:12,370
talk about trying to make those

00:35:09,740 --> 00:35:14,870
secondary networks first-class citizens

00:35:12,370 --> 00:35:16,490
are we also accounting for the fact that

00:35:14,870 --> 00:35:18,350
maybe some of these networks don't want

00:35:16,490 --> 00:35:21,110
to be part of the cube a part of

00:35:18,350 --> 00:35:22,970
kubernetes in general or use the

00:35:21,110 --> 00:35:25,610
constructs that could be minis gifts to

00:35:22,970 --> 00:35:31,480
networks by default so is that gonna

00:35:25,610 --> 00:35:31,480
answer the question any other questions

00:35:54,810 --> 00:36:15,010
yeah so the first question was how do we

00:36:12,760 --> 00:36:17,020
interact as like network on the oricon

00:36:15,010 --> 00:36:18,760
group multis community CNI etcetera how

00:36:17,020 --> 00:36:20,560
do we interact with the communities

00:36:18,760 --> 00:36:22,480
network special interest group and

00:36:20,560 --> 00:36:25,180
what's the cooperation there and what's

00:36:22,480 --> 00:36:27,040
the maybe timeline for getting these

00:36:25,180 --> 00:36:29,530
kinds of improvements and upstream into

00:36:27,040 --> 00:36:30,790
kubernetes the second question was have

00:36:29,530 --> 00:36:32,680
we played with the hardware side of

00:36:30,790 --> 00:36:37,060
things like s RI and V and that kind of

00:36:32,680 --> 00:36:39,240
stuff so first question I'm also I'm a

00:36:37,060 --> 00:36:42,010
co-chair of the kubernetes network sick

00:36:39,240 --> 00:36:43,450
so I'm in both meetings and there's a

00:36:42,010 --> 00:36:45,400
lot of other people that are also in

00:36:43,450 --> 00:36:47,830
both meetings back and forth so there's

00:36:45,400 --> 00:36:49,810
a large degree of cross-pollination

00:36:47,830 --> 00:36:51,970
between those two groups just based on

00:36:49,810 --> 00:36:55,410
the members being similar in a lot of

00:36:51,970 --> 00:36:58,780
cases other than that you know we

00:36:55,410 --> 00:37:02,260
regularly brings specific issues back to

00:36:58,780 --> 00:37:04,930
sig network so that we can talk about

00:37:02,260 --> 00:37:08,859
the air get back on those proposals

00:37:04,930 --> 00:37:10,690
those ideas that's also a forum that a

00:37:08,859 --> 00:37:13,060
lot of us on the plumbing work and

00:37:10,690 --> 00:37:15,400
reviews to kind of keep track of what's

00:37:13,060 --> 00:37:17,290
happening in kubernetes in general I'll

00:37:15,400 --> 00:37:19,450
give you one example there's been a lot

00:37:17,290 --> 00:37:22,090
of discussion back and forth about how

00:37:19,450 --> 00:37:23,890
should kubernetes deal with ipv6 and so

00:37:22,090 --> 00:37:25,869
it was decided that yes kubernetes

00:37:23,890 --> 00:37:28,420
should deal with ipv6 because it's kind

00:37:25,869 --> 00:37:30,640
of important well that means that pods

00:37:28,420 --> 00:37:32,190
might need multiple IP addresses because

00:37:30,640 --> 00:37:34,730
you

00:37:32,190 --> 00:37:38,160
and you'll have a v6 or one award each

00:37:34,730 --> 00:37:39,540
so there was input back and forth and we

00:37:38,160 --> 00:37:41,880
want to make sure that as a funding

00:37:39,540 --> 00:37:43,500
working your representative as you know

00:37:41,880 --> 00:37:45,750
I'm standing over here is plenty working

00:37:43,500 --> 00:37:48,060
here you want to make sure that when

00:37:45,750 --> 00:37:49,950
kubernetes makes changes to its api they

00:37:48,060 --> 00:37:51,450
don't have versity impact you but you

00:37:49,950 --> 00:37:53,220
know like sitting over here is a cig

00:37:51,450 --> 00:37:54,930
network representative I want to make

00:37:53,220 --> 00:37:57,000
sure that what gets added to kubernetes

00:37:54,930 --> 00:37:57,390
is generic enough that anybody can use

00:37:57,000 --> 00:37:59,400
it

00:37:57,390 --> 00:38:02,819
and then it's worthwhile for anybody and

00:37:59,400 --> 00:38:04,800
so it's kind of taking those two things

00:38:02,819 --> 00:38:06,810
and trying to make sure they happen it's

00:38:04,800 --> 00:38:08,310
a little bit challenging but it actually

00:38:06,810 --> 00:38:11,099
works out fairly well and we've been

00:38:08,310 --> 00:38:14,760
able to in the IP v4 v6 case kind of

00:38:11,099 --> 00:38:16,560
chart that path and make sure that it

00:38:14,760 --> 00:38:18,630
will be useful for you know plumbing

00:38:16,560 --> 00:38:21,030
working group and others but also useful

00:38:18,630 --> 00:38:22,829
in general for kubernetes so I guess

00:38:21,030 --> 00:38:26,550
that's one specific example of kind of a

00:38:22,829 --> 00:38:29,130
cross-pollination oh yeah for the second

00:38:26,550 --> 00:38:31,170
example are for the second question s

00:38:29,130 --> 00:38:33,569
are iov yes

00:38:31,170 --> 00:38:36,780
for example Corral from Intel is working

00:38:33,569 --> 00:38:38,970
pretty heavily MSR iov they have a

00:38:36,780 --> 00:38:40,680
device plug-in so without getting too

00:38:38,970 --> 00:38:44,670
far down the rat hole of device plugins

00:38:40,680 --> 00:38:47,220
device plugins are what the they're

00:38:44,670 --> 00:38:56,030
basically built for managing hardware

00:38:47,220 --> 00:38:56,030
resources on a node so things like SRV

00:38:56,119 --> 00:38:59,720
InfiniBand

00:38:57,359 --> 00:39:02,490
things that aren't normal network

00:38:59,720 --> 00:39:04,890
interfaces that have some finite

00:39:02,490 --> 00:39:06,960
resource a device plug in is what knows

00:39:04,890 --> 00:39:09,150
how to configure that particular piece

00:39:06,960 --> 00:39:11,730
of hardware knows how much of that

00:39:09,150 --> 00:39:13,800
hardware exists and that's what

00:39:11,730 --> 00:39:15,450
communities talks to to actually bring

00:39:13,800 --> 00:39:18,630
the hardware up that pipe creation time

00:39:15,450 --> 00:39:20,110
so the device plug-in is something that

00:39:18,630 --> 00:39:23,350
Corral and others at Intel

00:39:20,110 --> 00:39:26,440
working and they have software that will

00:39:23,350 --> 00:39:28,810
actually handle this are a V parts in

00:39:26,440 --> 00:39:31,120
interact with motives to make sure that

00:39:28,810 --> 00:39:33,190
you can do SR I would be with Memphis

00:39:31,120 --> 00:39:35,950
for the next question and that's

00:39:33,190 --> 00:39:39,790
actually it should be available already

00:39:35,950 --> 00:39:43,090
and it works there's some git repos at

00:39:39,790 --> 00:39:44,650
this link right here not community link

00:39:43,090 --> 00:39:47,950
but if you just take off the community

00:39:44,650 --> 00:39:50,080
part and really working group there's a

00:39:47,950 --> 00:39:52,750
sir IV device plug-in there's necessary

00:39:50,080 --> 00:39:55,500
of the admission controller and if you

00:39:52,750 --> 00:39:57,760
grab those things and they also publicly

00:39:55,500 --> 00:39:59,110
images as well because all these things

00:39:57,760 --> 00:40:01,900
actually run as containers in the

00:39:59,110 --> 00:40:04,540
company's ecosystem and so you can use

00:40:01,900 --> 00:40:08,440
those today it may only work with Intel

00:40:04,540 --> 00:40:10,930
cards at the moment but you know there

00:40:08,440 --> 00:40:13,210
are others I think that Mellanox is also

00:40:10,930 --> 00:40:14,050
working on device plugins for their

00:40:13,210 --> 00:40:16,930
stuff

00:40:14,050 --> 00:40:20,200
Nvidia also has a device plug in for

00:40:16,930 --> 00:40:25,800
more of the InfiniBand side too so as I

00:40:20,200 --> 00:40:25,800
answer the question yes on the end

00:40:34,620 --> 00:40:39,460
so currently the input list only

00:40:37,360 --> 00:40:43,780
includes IP addresses from the cluster

00:40:39,460 --> 00:40:45,700
by default network so they you do not

00:40:43,780 --> 00:40:47,050
have n points on the second networks yet

00:40:45,700 --> 00:40:48,790
and the problem there is you have to

00:40:47,050 --> 00:40:51,700
keep the guarantees of kubernetes api

00:40:48,790 --> 00:40:55,660
compatibility sorry the question again

00:40:51,700 --> 00:40:58,210
was how are the endpoints when you have

00:40:55,660 --> 00:40:59,380
services and you have pods and multiple

00:40:58,210 --> 00:41:01,270
networks how are the endpoints

00:40:59,380 --> 00:41:04,060
calculated what does that import list

00:41:01,270 --> 00:41:05,590
look like it does not like I said it

00:41:04,060 --> 00:41:08,020
does not include any of the network

00:41:05,590 --> 00:41:10,270
interface IP is on secondary interfaces

00:41:08,020 --> 00:41:12,280
at this time because something reading

00:41:10,270 --> 00:41:15,250
the kubernetes api sees a list of the

00:41:12,280 --> 00:41:16,690
endpoints you know su is currently that

00:41:15,250 --> 00:41:18,910
it can reach every single one of those

00:41:16,690 --> 00:41:20,140
endpoints but if some of those endpoints

00:41:18,910 --> 00:41:21,940
are on a separate you know like

00:41:20,140 --> 00:41:24,070
physically separate network or logically

00:41:21,940 --> 00:41:25,240
separate network something reading the

00:41:24,070 --> 00:41:26,740
cube api is it can be able to

00:41:25,240 --> 00:41:28,030
necessarily talk to those now you can't

00:41:26,740 --> 00:41:30,070
get around this through like you know

00:41:28,030 --> 00:41:32,640
proxies between the different networks

00:41:30,070 --> 00:41:36,190
or you know like some other kind of

00:41:32,640 --> 00:41:38,080
connection between those networks but at

00:41:36,190 --> 00:41:40,270
the moment that's not possible we're not

00:41:38,080 --> 00:41:42,250
going to try to jump into that mud pit

00:41:40,270 --> 00:41:44,800
at the moment but that's something that

00:41:42,250 --> 00:41:47,350
we are looking at trying to solve how to

00:41:44,800 --> 00:41:49,270
solve there are some ideas around what

00:41:47,350 --> 00:41:51,400
if you have a fully connected cluster

00:41:49,270 --> 00:41:53,230
where you have essentially two separate

00:41:51,400 --> 00:41:54,690
networks but every single node is

00:41:53,230 --> 00:41:56,770
connected to both of those networks

00:41:54,690 --> 00:41:58,660
that's a use case that's a lot more

00:41:56,770 --> 00:42:00,340
easily solved than if some machines are

00:41:58,660 --> 00:42:01,570
hooked up to this physical network and

00:42:00,340 --> 00:42:04,000
some machines are kept in this physical

00:42:01,570 --> 00:42:07,090
network and they can actually talk to

00:42:04,000 --> 00:42:09,310
each other so not quite yet but

00:42:07,090 --> 00:42:11,819
hopefully over the next year or so that

00:42:09,310 --> 00:42:14,819
might happen

00:42:11,819 --> 00:42:14,819
yes

00:42:42,750 --> 00:43:15,640
so I missed the middle part of your

00:42:44,890 --> 00:43:18,970
question could you repeat so the

00:43:15,640 --> 00:43:20,440
question was about interfaces but some

00:43:18,970 --> 00:43:24,070
of the higher-level things like perhaps

00:43:20,440 --> 00:43:26,160
an important range that currently is

00:43:24,070 --> 00:43:29,369
hard to configure are we thinking about

00:43:26,160 --> 00:43:29,369
making notes

00:43:30,350 --> 00:43:33,409
[Music]

00:43:33,680 --> 00:43:46,700
you feel okay yeah so also about

00:43:44,779 --> 00:43:50,299
protocol is not just TCP and UDP but

00:43:46,700 --> 00:43:52,190
other protocols SCTP support was

00:43:50,299 --> 00:43:55,819
recently out the Kubik yeah that may or

00:43:52,190 --> 00:43:57,559
may not be interesting to you and so

00:43:55,819 --> 00:43:59,779
that's one example we know there have

00:43:57,559 --> 00:44:02,089
also been requests at least on the

00:43:59,779 --> 00:44:04,880
OpenShift side to have two port ranges

00:44:02,089 --> 00:44:06,799
so again another example there you know

00:44:04,880 --> 00:44:10,760
kubernetes does not make that easily

00:44:06,799 --> 00:44:12,289
available but we certainly want to make

00:44:10,760 --> 00:44:14,119
that easier we know that those news

00:44:12,289 --> 00:44:17,390
cases exist I don't think there's a plan

00:44:14,119 --> 00:44:18,710
specifically for it but if this is

00:44:17,390 --> 00:44:22,279
something that's interesting you that

00:44:18,710 --> 00:44:23,779
you need I'd say get involved in Signet

00:44:22,279 --> 00:44:25,970
work or network will be working group

00:44:23,779 --> 00:44:29,260
let's figure out what that news case is

00:44:25,970 --> 00:44:29,260
and let's figure out how to address that

00:44:31,270 --> 00:44:34,270
okay

00:44:36,750 --> 00:44:46,750
on the SCTP okay the question was really

00:44:44,920 --> 00:44:50,980
explained talk a little bit more about

00:44:46,750 --> 00:44:52,990
SCTP support in communities urban days

00:44:50,980 --> 00:44:56,170
only really cared about tcp and UDP as

00:44:52,990 --> 00:44:58,630
protocols in the api it was recently

00:44:56,170 --> 00:45:01,750
updated like the kubernetes api objects

00:44:58,630 --> 00:45:03,490
were updated for SCTV support but of

00:45:01,750 --> 00:45:06,100
course that requires that you implement

00:45:03,490 --> 00:45:08,920
that support in like the proxy layer and

00:45:06,100 --> 00:45:11,890
also potentially your network plugins so

00:45:08,920 --> 00:45:13,690
just because Cube allows it now as part

00:45:11,890 --> 00:45:16,210
of the API there's kind of a little bit

00:45:13,690 --> 00:45:18,070
of lag between when the network plugins

00:45:16,210 --> 00:45:20,440
and the proxy and stuff actually end up

00:45:18,070 --> 00:45:24,520
supporting that I believe cute proxy

00:45:20,440 --> 00:45:26,320
does support a CPT SCTP new but not

00:45:24,520 --> 00:45:35,020
every Network plug-in actually uses cute

00:45:26,320 --> 00:45:37,750
proxy so so yeah those plugins yes yeah

00:45:35,020 --> 00:45:39,220
and so it's it's gonna be a little bit

00:45:37,750 --> 00:45:40,600
before some of those plugins support it

00:45:39,220 --> 00:45:42,880
some plugins might not actually ever

00:45:40,600 --> 00:45:44,530
support it but you know if there's

00:45:42,880 --> 00:45:46,960
certain plugins are interested in you

00:45:44,530 --> 00:45:48,910
might need to contact those you know

00:45:46,960 --> 00:45:51,070
that project or that vendor or something

00:45:48,910 --> 00:45:53,950
it has them that support amore

00:45:51,070 --> 00:45:56,350
I think it was like the kubernetes 112

00:45:53,950 --> 00:46:01,210
released when it was added so that was

00:45:56,350 --> 00:46:03,880
only like mid last year yeah so it's

00:46:01,210 --> 00:46:05,130
still pretty recent

00:46:03,880 --> 00:46:10,660
[Applause]

00:46:05,130 --> 00:46:13,860
any other questions all right thank you

00:46:10,660 --> 00:46:13,860
very much and let's see

00:46:15,600 --> 00:46:21,559

YouTube URL: https://www.youtube.com/watch?v=X6rcpy2g5Ew


