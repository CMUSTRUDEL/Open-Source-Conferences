Title: You should switch to Python 3 (two years ago)
Publication date: 2019-03-04
Playlist: DevConfCZ 2019
Description: 
	Presentation name: You should switch to Python 3 (two years ago)
Speaker: LumÃ­r Balhar
Description:  Python 3 exists for more than 10 years and during this time all your reasons to use Python 2 disappeared. In this talk, I'll show you advantages of Python 3, reasons why you really should switch (if a list of advantages won't be enough) and also how to do it in the most conservative way. Dual support for your old Debian server included.
[ https://sched.co/Jcjp ]
Captions: 
	00:00:05,810 --> 00:00:14,970
hello everybody do hear me the last

00:00:11,400 --> 00:00:17,250
togeer hello

00:00:14,970 --> 00:00:20,910
hope you're enjoying Def Con as I am I

00:00:17,250 --> 00:00:23,189
am here to tell you something maybe

00:00:20,910 --> 00:00:26,730
interesting maybe not you'll see about

00:00:23,189 --> 00:00:29,789
Python 3 and about the fact that you

00:00:26,730 --> 00:00:32,579
really should switch to Python 3 right

00:00:29,789 --> 00:00:34,920
now it's too late actually but right now

00:00:32,579 --> 00:00:39,690
it's still better than you know before

00:00:34,920 --> 00:00:42,840
Christmas so when I am a member of

00:00:39,690 --> 00:00:45,090
Python maintenance team in Red Hat I am

00:00:42,840 --> 00:00:48,240
people I organised vivo meetups in

00:00:45,090 --> 00:00:50,820
Ostrava I'm head of Pi constitute

00:00:48,240 --> 00:00:53,910
conference organizers I'm teaching and

00:00:50,820 --> 00:00:57,600
organizing pi PI ladies lessons and

00:00:53,910 --> 00:01:00,510
courses in Ostrava and you know private

00:00:57,600 --> 00:01:02,520
life let's say I don't have much time

00:01:00,510 --> 00:01:06,000
for that but I'm a drummer and also I

00:01:02,520 --> 00:01:09,260
won't in firefighter what in point and

00:01:06,000 --> 00:01:12,540
maintenance team what are we work on

00:01:09,260 --> 00:01:15,450
actually we take about a we do Python

00:01:12,540 --> 00:01:18,060
it's not that surprising right but

00:01:15,450 --> 00:01:20,700
actually we take care about C Python

00:01:18,060 --> 00:01:22,830
development as well a few members are

00:01:20,700 --> 00:01:26,790
core developers in a C Python

00:01:22,830 --> 00:01:29,700
interpreter we do take care about Python

00:01:26,790 --> 00:01:31,830
stacks in rail and federer about some

00:01:29,700 --> 00:01:35,070
really important packages so if you're

00:01:31,830 --> 00:01:39,479
enjoying a lot of pythons in fedora for

00:01:35,070 --> 00:01:43,260
testing ready to use that's our work we

00:01:39,479 --> 00:01:44,130
also we also moving things forward it's

00:01:43,260 --> 00:01:46,770
necessary

00:01:44,130 --> 00:01:49,560
so yeah we are working right now on

00:01:46,770 --> 00:01:53,430
removing point into from from next

00:01:49,560 --> 00:01:55,650
FedRAMP and also we are ready to help

00:01:53,430 --> 00:01:58,799
upstream project and upstream developers

00:01:55,650 --> 00:02:03,810
so if your project need you know some

00:01:58,799 --> 00:02:07,020
laughs to support vital free do not wait

00:02:03,810 --> 00:02:09,629
and contact us especially me and I will

00:02:07,020 --> 00:02:13,680
help you to do it I will help you to

00:02:09,629 --> 00:02:16,170
crack the hard nuts what I work on my

00:02:13,680 --> 00:02:18,410
last big project was to

00:02:16,170 --> 00:02:22,170
prepare Python free stack for relate

00:02:18,410 --> 00:02:25,920
because yeah next well my or release

00:02:22,170 --> 00:02:29,670
will be pointer free and I was working

00:02:25,920 --> 00:02:33,420
on the latch project which ran had use

00:02:29,670 --> 00:02:37,020
in our software stacks which needs to be

00:02:33,420 --> 00:02:40,020
ported or at least support Python 3

00:02:37,020 --> 00:02:40,830
namely it's a body it's federal update

00:02:40,020 --> 00:02:44,310
system

00:02:40,830 --> 00:02:46,290
it was samba I think that everybody

00:02:44,310 --> 00:02:49,769
knows samba it's a really large code

00:02:46,290 --> 00:02:52,319
base and for example ansible also a

00:02:49,769 --> 00:02:56,160
really big project based mainly on

00:02:52,319 --> 00:02:58,049
python so I was working still on by the

00:02:56,160 --> 00:03:01,290
maintenance what helps these upstream

00:02:58,049 --> 00:03:05,610
projects to support fighting free to

00:03:01,290 --> 00:03:09,209
welcome the future first question I have

00:03:05,610 --> 00:03:13,400
for you and I you know some prizes

00:03:09,209 --> 00:03:15,540
how old is Python well I mean where when

00:03:13,400 --> 00:03:18,739
the development of fighting language

00:03:15,540 --> 00:03:18,739
starts raise your hand please

00:03:21,709 --> 00:03:35,120
again please 28 years ago any other

00:03:29,100 --> 00:03:38,549
opinion it was 30 years ago

00:03:35,120 --> 00:03:45,269
well ok you were close ok and I you know

00:03:38,549 --> 00:03:50,400
I cannot eat candy so it's actually the

00:03:45,269 --> 00:03:52,560
same date as the first web page when I

00:03:50,400 --> 00:03:55,230
discovered the fabulous very surprising

00:03:52,560 --> 00:04:01,230
and was the first Linux kernel and also

00:03:55,230 --> 00:04:02,670
visual basic second one second candy how

00:04:01,230 --> 00:04:04,319
old is Python free

00:04:02,670 --> 00:04:11,720
what's the release date of the first

00:04:04,319 --> 00:04:16,500
pint of free release 2008 yes please

00:04:11,720 --> 00:04:21,239
thank you 2008 which is the same year as

00:04:16,500 --> 00:04:24,120
a github was you know published as first

00:04:21,239 --> 00:04:27,630
mobile phone with Android it's really

00:04:24,120 --> 00:04:29,400
old and intel atom family of processor

00:04:27,630 --> 00:04:33,060
was announced so it's

00:04:29,400 --> 00:04:36,229
really long time ago and you may or may

00:04:33,060 --> 00:04:38,729
not know that Python free is the first

00:04:36,229 --> 00:04:40,530
record in compatible release which means

00:04:38,729 --> 00:04:44,910
that if you write some software in

00:04:40,530 --> 00:04:49,250
Python one on fightin 0.1 which was

00:04:44,910 --> 00:04:52,560
released in 1991 then it should work

00:04:49,250 --> 00:04:54,930
should work in Python to seven as well

00:04:52,560 --> 00:04:59,070
so Python 3 is the first backward

00:04:54,930 --> 00:05:03,120
incompatible release and on question but

00:04:59,070 --> 00:05:07,400
I am out of candy sorry please raise

00:05:03,120 --> 00:05:10,229
your hand if you know the Zen of Python

00:05:07,400 --> 00:05:14,220
no one remember just know that something

00:05:10,229 --> 00:05:18,150
that like it exists kind a lot of people

00:05:14,220 --> 00:05:20,550
who the Zen of Python is the 90 rules

00:05:18,150 --> 00:05:22,710
which every point and developer should

00:05:20,550 --> 00:05:26,580
follow but not only Python developer as

00:05:22,710 --> 00:05:30,949
you can see it's a general one not only

00:05:26,580 --> 00:05:34,800
for Python if you don't know it just

00:05:30,949 --> 00:05:37,130
open CLI interactive session with your

00:05:34,800 --> 00:05:40,260
Python Python 2 and PI 2 3 of course and

00:05:37,130 --> 00:05:42,990
type import disks and enter and it will

00:05:40,260 --> 00:05:45,870
show show up for you and there is one

00:05:42,990 --> 00:05:48,120
really important and my favorite one

00:05:45,870 --> 00:05:50,430
there should be one and preferably only

00:05:48,120 --> 00:05:52,500
one obvious way to do it in language in

00:05:50,430 --> 00:05:53,490
Python language or in your software you

00:05:52,500 --> 00:05:58,110
know API

00:05:53,490 --> 00:06:05,130
depends on you and because you know from

00:05:58,110 --> 00:06:07,440
Python 0.9 from 1991 to Python 3 in 2008

00:06:05,130 --> 00:06:09,780
a lot of stuff accumulated in the

00:06:07,440 --> 00:06:12,560
language a lot of new features a lot of

00:06:09,780 --> 00:06:15,510
ways how to solve a simple problem

00:06:12,560 --> 00:06:17,849
multiple ways and it was kind of messy

00:06:15,510 --> 00:06:20,400
and not all the ways was you know

00:06:17,849 --> 00:06:22,289
optimal optimal eyes for best

00:06:20,400 --> 00:06:27,510
performance etcetera etcetera etcetera

00:06:22,289 --> 00:06:30,659
so decision was made to break the

00:06:27,510 --> 00:06:36,810
Bedwell compatibility to let the Python

00:06:30,659 --> 00:06:39,840
again be fit this all of these rules so

00:06:36,810 --> 00:06:43,400
that's the one reason and the second one

00:06:39,840 --> 00:06:43,400
is of course Unicode

00:06:45,199 --> 00:06:51,120
okay that's the history forget about it

00:06:48,600 --> 00:06:55,710
why should you care why should you care

00:06:51,120 --> 00:06:57,300
about Fighter 3 the most important thing

00:06:55,710 --> 00:06:59,880
you should know if you're still using

00:06:57,300 --> 00:07:03,690
fighting - is that fighting two point

00:06:59,880 --> 00:07:07,080
seven end of life is really near the

00:07:03,690 --> 00:07:08,550
support will be dropped in first January

00:07:07,080 --> 00:07:11,610
of 2020

00:07:08,550 --> 00:07:14,370
if you want to count down nurse like I

00:07:11,610 --> 00:07:17,070
do just open the page Python clock to

00:07:14,370 --> 00:07:20,340
arc and you will see it's exactly 11

00:07:17,070 --> 00:07:24,300
months and six days or seven days right

00:07:20,340 --> 00:07:26,400
now so yeah the Python 2.7 will be

00:07:24,300 --> 00:07:29,220
unsupported by upstream and as you can

00:07:26,400 --> 00:07:32,639
see in other talks today from for

00:07:29,220 --> 00:07:37,190
example Victor's thinner fighting core

00:07:32,639 --> 00:07:40,500
developers do a lot of work regularly so

00:07:37,190 --> 00:07:43,260
who will do the same for you Google

00:07:40,500 --> 00:07:47,010
support the language we will fix all the

00:07:43,260 --> 00:07:49,760
CVS etc it's open question but still if

00:07:47,010 --> 00:07:52,800
you can you should drop it as well

00:07:49,760 --> 00:07:56,849
Linux distros Linux distribution don't

00:07:52,800 --> 00:07:59,580
ship Python 2.7 by default for a few

00:07:56,849 --> 00:08:03,330
years right now for example federal 23

00:07:59,580 --> 00:08:07,950
in 2015 was without Python 2 by default

00:08:03,330 --> 00:08:12,560
Ubuntu two years later everything is

00:08:07,950 --> 00:08:16,560
going that way to you know keep you

00:08:12,560 --> 00:08:18,479
aware that something is changing the

00:08:16,560 --> 00:08:20,099
most important libraries libraries and

00:08:18,479 --> 00:08:22,380
project support fight on free without

00:08:20,099 --> 00:08:25,229
any problem actually if you take a look

00:08:22,380 --> 00:08:31,650
on this page writen free Radian is the

00:08:25,229 --> 00:08:34,010
dark you will see that 359 out of 360

00:08:31,650 --> 00:08:37,529
most downloaded projects on pipe I

00:08:34,010 --> 00:08:41,849
support patent free the one which

00:08:37,529 --> 00:08:46,560
doesn't is a patch beam I don't know

00:08:41,849 --> 00:08:49,220
what but if a lot of projects and a lot

00:08:46,560 --> 00:08:53,790
of neutral basis I mean like numpy

00:08:49,220 --> 00:08:55,709
pandas Syfy and all of this all of this

00:08:53,790 --> 00:09:00,269
stuff support Python 3 why

00:08:55,709 --> 00:09:02,759
you should know a list of projects with

00:09:00,269 --> 00:09:05,970
will stop supporting point of fruit you

00:09:02,759 --> 00:09:07,649
can find it on Python free statement

00:09:05,970 --> 00:09:10,279
org and I think that you will be

00:09:07,649 --> 00:09:13,439
surprised check this page there is

00:09:10,279 --> 00:09:15,600
interactive interactive chart when you

00:09:13,439 --> 00:09:18,449
will see when each project will stop

00:09:15,600 --> 00:09:19,740
support button - and I think that you

00:09:18,449 --> 00:09:22,529
will be surprised because for example

00:09:19,740 --> 00:09:27,360
pandas did it already

00:09:22,529 --> 00:09:29,939
numpy and sci-fi is on in bugfixes only

00:09:27,360 --> 00:09:32,759
state and a lot of project will follow

00:09:29,939 --> 00:09:36,589
and a lot of project will do it before

00:09:32,759 --> 00:09:42,569
2020 in this year for example in a half

00:09:36,589 --> 00:09:44,939
as somebody told me the whole next Samba

00:09:42,569 --> 00:09:46,800
Samba release will be the last we fight

00:09:44,939 --> 00:09:49,519
on to support and then the sub fight on

00:09:46,800 --> 00:09:53,730
to support there will be jobs as well so

00:09:49,519 --> 00:09:56,490
be aware Python 3 PI 2 free means

00:09:53,730 --> 00:10:01,259
performance boost for you I don't have

00:09:56,490 --> 00:10:03,329
any exact examples here but if you try

00:10:01,259 --> 00:10:06,389
to find something on YouTube you will

00:10:03,329 --> 00:10:10,679
find talks from huge conferences about

00:10:06,389 --> 00:10:12,569
for example loop big web sites like

00:10:10,679 --> 00:10:15,480
Instagram or Facebook

00:10:12,569 --> 00:10:18,269
switching to Python switching to find

00:10:15,480 --> 00:10:21,089
the free and what does it mean for their

00:10:18,269 --> 00:10:25,470
performance and yeah its performance

00:10:21,089 --> 00:10:28,589
boost so it's a good also for not for

00:10:25,470 --> 00:10:31,829
you but also for your servers and Python

00:10:28,589 --> 00:10:34,439
3 it contains useful new features if you

00:10:31,829 --> 00:10:37,259
want to support both you can if you want

00:10:34,439 --> 00:10:39,569
to use new features you can in Python 3

00:10:37,259 --> 00:10:42,740
you know you can drop point into support

00:10:39,569 --> 00:10:45,449
I think as well why not

00:10:42,740 --> 00:10:48,149
ok let's talk a little bit about

00:10:45,449 --> 00:10:50,249
strategies how to do it there are

00:10:48,149 --> 00:10:54,749
multiple ways how we can support by 2 3

00:10:50,249 --> 00:10:56,189
the first one is keep pointing to and

00:10:54,749 --> 00:10:58,259
python freak on base and separate

00:10:56,189 --> 00:11:02,009
branches which means that we will have

00:10:58,259 --> 00:11:05,690
do all the bug fixes twice you will have

00:11:02,009 --> 00:11:08,840
to do a review twice you will have to do

00:11:05,690 --> 00:11:11,180
everything twice but possibly make sense

00:11:08,840 --> 00:11:14,990
for your scenario depends on your

00:11:11,180 --> 00:11:17,420
project but it's not the best way how to

00:11:14,990 --> 00:11:20,480
do it but in this case you will you can

00:11:17,420 --> 00:11:25,340
use all the new features in PI 2 3 let

00:11:20,480 --> 00:11:28,610
school use tools like 2 to 3 or 3 to 2

00:11:25,340 --> 00:11:30,620
that's that's now it's actually not that

00:11:28,610 --> 00:11:32,840
good idea if your project is really

00:11:30,620 --> 00:11:35,180
small you can set up something like 2 to

00:11:32,840 --> 00:11:39,290
3 or 3 to 2 in your continuous

00:11:35,180 --> 00:11:42,080
integration or some other pipeline and

00:11:39,290 --> 00:11:44,750
it will convert your code dynamically

00:11:42,080 --> 00:11:46,190
for you which means that it will still

00:11:44,750 --> 00:11:50,030
maintain point into when you

00:11:46,190 --> 00:11:52,610
automatically transfer to PI to 3 but it

00:11:50,030 --> 00:11:56,180
doesn't work on a large code bases of

00:11:52,610 --> 00:12:00,290
course and if your project is small why

00:11:56,180 --> 00:12:02,210
not use PI to free or and I think that

00:12:00,290 --> 00:12:04,010
you won't be surprised the best strategy

00:12:02,210 --> 00:12:06,830
to stop a Python 3 is to write

00:12:04,010 --> 00:12:10,550
compatible code it's not had that hard

00:12:06,830 --> 00:12:13,220
as it may look because a lot of features

00:12:10,550 --> 00:12:16,880
from Python 3 was actually back ported

00:12:13,220 --> 00:12:20,780
to Python 2 in some way to make this

00:12:16,880 --> 00:12:22,370
transistor simpler as possible and we

00:12:20,780 --> 00:12:26,360
supply the maintenance team we are

00:12:22,370 --> 00:12:30,920
helping to do it even simpler and even

00:12:26,360 --> 00:12:34,370
easier to for you so how to make my code

00:12:30,920 --> 00:12:37,940
compatible how to do it what you will

00:12:34,370 --> 00:12:39,610
know what you will need to do it you

00:12:37,940 --> 00:12:42,230
will have to have good test coverage

00:12:39,610 --> 00:12:44,090
test courage is very important thing if

00:12:42,230 --> 00:12:45,560
you want to change basically the

00:12:44,090 --> 00:12:47,840
language you are using for your project

00:12:45,560 --> 00:12:51,310
I know I know I know nobody wants to

00:12:47,840 --> 00:12:54,530
write tests right but there is I think

00:12:51,310 --> 00:12:56,690
first advantage the writing test is that

00:12:54,530 --> 00:13:00,140
if your test coach is really good you

00:12:56,690 --> 00:13:02,000
can give the task of transition to point

00:13:00,140 --> 00:13:04,160
and free to some you know train at

00:13:02,000 --> 00:13:06,680
monkey to do it for you because all you

00:13:04,160 --> 00:13:07,970
need to do is make all test passing in

00:13:06,680 --> 00:13:12,830
Python 2 and point of three and that's

00:13:07,970 --> 00:13:16,670
all and I don't know if I want to say

00:13:12,830 --> 00:13:21,470
that but actually because Samba and

00:13:16,670 --> 00:13:24,740
body and a lot of other tools as good

00:13:21,470 --> 00:13:27,530
test coverage I don't really understand

00:13:24,740 --> 00:13:30,050
how it look how it works in the

00:13:27,530 --> 00:13:33,440
background and I'm still able to port it

00:13:30,050 --> 00:13:35,810
to PI to free so if you have a good test

00:13:33,440 --> 00:13:38,510
coverage it will take some time but not

00:13:35,810 --> 00:13:40,880
that much you will need to make some

00:13:38,510 --> 00:13:43,910
decision of course because for example

00:13:40,880 --> 00:13:47,270
as we will discuss it later a little bit

00:13:43,910 --> 00:13:51,590
but in pointing to was just wire

00:13:47,270 --> 00:13:54,110
variable with some bass string Unicode

00:13:51,590 --> 00:13:55,910
whatever I have it doesn't work just put

00:13:54,110 --> 00:13:59,330
there some decode encode the code and

00:13:55,910 --> 00:14:00,230
code and it will work so this is not

00:13:59,330 --> 00:14:02,900
true anymore

00:14:00,230 --> 00:14:05,120
so you will have to decide whether this

00:14:02,900 --> 00:14:08,750
variable should contain Unicode or

00:14:05,120 --> 00:14:11,720
should it contain by its etc there so it

00:14:08,750 --> 00:14:15,050
will need some decision probably from a

00:14:11,720 --> 00:14:17,780
people who understand the project and it

00:14:15,050 --> 00:14:20,660
will take some time some time of course

00:14:17,780 --> 00:14:23,420
but as I said with test coverage you can

00:14:20,660 --> 00:14:26,030
do the works some internet can do the

00:14:23,420 --> 00:14:28,490
work for you okay

00:14:26,030 --> 00:14:30,440
let's take a look on a common things you

00:14:28,490 --> 00:14:33,980
will have to deal with when supporting

00:14:30,440 --> 00:14:35,780
Python free and because I said that the

00:14:33,980 --> 00:14:38,900
best strategy is support both at the

00:14:35,780 --> 00:14:41,510
same time let's take a look how to do it

00:14:38,900 --> 00:14:45,740
how to support both pythons in the same

00:14:41,510 --> 00:14:52,310
time and we can take a look also why

00:14:45,740 --> 00:14:56,270
these things had to be change it let's

00:14:52,310 --> 00:14:58,610
start with something really simple which

00:14:56,270 --> 00:15:01,100
all of us now for example print print

00:14:58,610 --> 00:15:04,820
was a statement keyword in PI to 2 and

00:15:01,100 --> 00:15:06,830
print is a function in Python 3 actually

00:15:04,820 --> 00:15:10,490
you can use print as a function also in

00:15:06,830 --> 00:15:12,830
Python 2 if you from Python 2.6 if you

00:15:10,490 --> 00:15:14,690
use a future import so it means for

00:15:12,830 --> 00:15:17,300
future import print function and the

00:15:14,690 --> 00:15:20,760
damn Python 2 has also print as a

00:15:17,300 --> 00:15:23,430
function you may wonder why

00:15:20,760 --> 00:15:24,899
something that simple and it needs to be

00:15:23,430 --> 00:15:27,089
changed really

00:15:24,899 --> 00:15:30,930
from statement to function why was the

00:15:27,089 --> 00:15:32,940
benefit of this let me show what if you

00:15:30,930 --> 00:15:33,720
want to use more complex print like this

00:15:32,940 --> 00:15:43,399
one

00:15:33,720 --> 00:15:45,779
oh it's ugly right or not I think so and

00:15:43,399 --> 00:15:49,680
the same print there is only one

00:15:45,779 --> 00:15:53,730
difference and I want to know what the

00:15:49,680 --> 00:15:56,930
difference between two - Prince does who

00:15:53,730 --> 00:16:06,110
knows it maybe I find one more candy oh

00:15:56,930 --> 00:16:09,060
so yeah right the second print contains

00:16:06,110 --> 00:16:13,110
comments at the end of the line and the

00:16:09,060 --> 00:16:15,230
result is that it don't put the new line

00:16:13,110 --> 00:16:18,680
at the end of the string hello world

00:16:15,230 --> 00:16:21,990
printed on standard error output oh

00:16:18,680 --> 00:16:26,370
that's not look good right so if the

00:16:21,990 --> 00:16:28,110
things grow more complex it makes sense

00:16:26,370 --> 00:16:29,970
to make it easier and more

00:16:28,110 --> 00:16:32,790
understandable by readers and more

00:16:29,970 --> 00:16:35,550
readable so in point of three print is

00:16:32,790 --> 00:16:38,329
just a function it's simple it has

00:16:35,550 --> 00:16:42,930
similar API with a rest of the Python

00:16:38,329 --> 00:16:45,600
ecosystem and it's far it's more more

00:16:42,930 --> 00:16:49,410
more readable than Python - version I

00:16:45,600 --> 00:16:52,709
can only imagine that I will teach by

00:16:49,410 --> 00:16:56,490
ladies on courses how to do print

00:16:52,709 --> 00:16:59,160
without new line it's impossible but in

00:16:56,490 --> 00:17:02,760
point of three it's perfect handling

00:16:59,160 --> 00:17:05,250
exception if you have only one exception

00:17:02,760 --> 00:17:07,290
let's say zero division error everything

00:17:05,250 --> 00:17:09,870
is fine and you don't want to store it

00:17:07,290 --> 00:17:12,449
in a variable let's do it this way of

00:17:09,870 --> 00:17:15,600
course you cannot divide by zero right

00:17:12,449 --> 00:17:20,220
only Chuck Nori's can do it but what if

00:17:15,600 --> 00:17:22,020
you want to catch two exceptions hmm I

00:17:20,220 --> 00:17:25,650
remember that there was some commas

00:17:22,020 --> 00:17:29,970
somewhere let's do it this way will it

00:17:25,650 --> 00:17:32,700
work in fighting - no what what the

00:17:29,970 --> 00:17:36,760
second one do

00:17:32,700 --> 00:17:40,419
sorry don't be scared

00:17:36,760 --> 00:17:44,799
I'm that bite missing you break it and

00:17:40,419 --> 00:17:47,159
what this will do without brackets no it

00:17:44,799 --> 00:17:47,159
will work

00:17:48,780 --> 00:17:56,169
yeah yeah definitely because there's no

00:17:52,150 --> 00:17:58,780
brackets here it will store if we catch

00:17:56,169 --> 00:18:03,240
the zero division error in will store

00:17:58,780 --> 00:18:03,240
the exception in variable with this name

00:18:04,500 --> 00:18:11,919
the right way how to do the same in

00:18:09,100 --> 00:18:15,100
pointing to you is using brackets around

00:18:11,919 --> 00:18:17,260
a list of exceptions and another comma

00:18:15,100 --> 00:18:20,590
and then the name of the variable you

00:18:17,260 --> 00:18:25,150
want to store exception in come on it's

00:18:20,590 --> 00:18:25,600
ugly and everybody can write it in a bad

00:18:25,150 --> 00:18:29,230
way

00:18:25,600 --> 00:18:33,390
so python free introduced new keyword

00:18:29,230 --> 00:18:36,490
here s which is good separator between

00:18:33,390 --> 00:18:38,230
the list of exceptions and the name of

00:18:36,490 --> 00:18:41,740
the variable you want to store exception

00:18:38,230 --> 00:18:47,230
in so it's more readable it's less you

00:18:41,740 --> 00:18:52,330
know ready for mistakes etc another

00:18:47,230 --> 00:18:56,110
thing another thing actually you don't

00:18:52,330 --> 00:18:58,900
want to change anything to benefit from

00:18:56,110 --> 00:19:01,179
it is exception chains imagine you have

00:18:58,900 --> 00:19:04,480
this simple code you want to read some

00:19:01,179 --> 00:19:07,480
config file from from disk and you want

00:19:04,480 --> 00:19:10,030
to catch exception raced by Python IO

00:19:07,480 --> 00:19:12,669
error if the file is not found and you

00:19:10,030 --> 00:19:17,110
want to raise your own exception for

00:19:12,669 --> 00:19:20,500
example config not found error we fight

00:19:17,110 --> 00:19:22,809
until you get only this trace back this

00:19:20,500 --> 00:19:24,929
short config knows for error but in

00:19:22,809 --> 00:19:28,570
Python 3 because the exception stack was

00:19:24,929 --> 00:19:30,880
redesigned and it's store exception in a

00:19:28,570 --> 00:19:33,039
separated objects you will have this

00:19:30,880 --> 00:19:35,289
very useful trace back which will help

00:19:33,039 --> 00:19:38,200
you a lot especially when porting

00:19:35,289 --> 00:19:41,890
because you know when porting the things

00:19:38,200 --> 00:19:45,850
may go really wrong so you can benefit

00:19:41,890 --> 00:19:49,150
from the information about all

00:19:45,850 --> 00:19:54,130
exceptions rise it from a back to the

00:19:49,150 --> 00:19:56,080
top so this is this is a really cool new

00:19:54,130 --> 00:20:00,070
feature you don't have to do anything

00:19:56,080 --> 00:20:03,490
special to benefit from it okay next one

00:20:00,070 --> 00:20:07,000
sorting using CMP in Python 2 pointing

00:20:03,490 --> 00:20:11,289
to as you can you know define some

00:20:07,000 --> 00:20:14,440
function which will work as a comparator

00:20:11,289 --> 00:20:16,390
function of two values and you can use

00:20:14,440 --> 00:20:20,049
this you can use this function as a

00:20:16,390 --> 00:20:23,559
keyword argument for sorted function it

00:20:20,049 --> 00:20:25,450
works it has a visible disadvantage

00:20:23,559 --> 00:20:28,450
because the compare function has to be

00:20:25,450 --> 00:20:33,880
called every time you want to compare

00:20:28,450 --> 00:20:37,350
two objects to values so it it's yeah

00:20:33,880 --> 00:20:41,020
it's disadvantage of this approach and

00:20:37,350 --> 00:20:43,840
in PI 2 2 and invitin free of course you

00:20:41,020 --> 00:20:48,429
can use a key a key keyword argument for

00:20:43,840 --> 00:20:50,500
cert it which will also use the function

00:20:48,429 --> 00:20:54,400
defined by you or a lambda if you want

00:20:50,500 --> 00:20:57,490
but with the key the function you define

00:20:54,400 --> 00:20:59,770
has to be called only once for every

00:20:57,490 --> 00:21:01,990
value not every time you want to compare

00:20:59,770 --> 00:21:05,610
two values so for example for sorting

00:21:01,990 --> 00:21:08,260
lists this approach is much faster and

00:21:05,610 --> 00:21:13,659
again if you remember the Zen of the

00:21:08,260 --> 00:21:14,549
Python you remember the one rule I like

00:21:13,659 --> 00:21:18,760
the most

00:21:14,549 --> 00:21:24,760
now it's there is no one way and not

00:21:18,760 --> 00:21:26,710
neither one obvious way of to do it the

00:21:24,760 --> 00:21:30,299
same thing applies if you want to

00:21:26,710 --> 00:21:34,090
implement comparison for your object and

00:21:30,299 --> 00:21:40,809
again you can use the CMP CMP special

00:21:34,090 --> 00:21:43,299
method for your classes but in fighting

00:21:40,809 --> 00:21:46,570
2.1 i'm not kidding

00:21:43,299 --> 00:21:49,120
in fighting 2.1 was implemented the rich

00:21:46,570 --> 00:21:51,400
comparison which means that you can

00:21:49,120 --> 00:21:53,980
compare in a lot of ways you don't have

00:21:51,400 --> 00:21:57,760
to because in the previous example here

00:21:53,980 --> 00:21:59,259
you always have to implement the full

00:21:57,760 --> 00:22:02,720
comparison

00:21:59,259 --> 00:22:05,210
comparison which will return every which

00:22:02,720 --> 00:22:07,879
will return value representing all the

00:22:05,210 --> 00:22:10,159
comparing situation but with the rich

00:22:07,879 --> 00:22:13,249
comparison you can choose only the one

00:22:10,159 --> 00:22:16,549
you want to implement lower and greater

00:22:13,249 --> 00:22:18,889
than equality etc etc and again we have

00:22:16,549 --> 00:22:22,340
multiple ways how to do and how to solve

00:22:18,889 --> 00:22:27,080
kind of simple problem so in Python 3

00:22:22,340 --> 00:22:30,649
the CMP the less optimized way was

00:22:27,080 --> 00:22:35,289
removed very common think you have to

00:22:30,649 --> 00:22:39,080
deal with imports in pointing to

00:22:35,289 --> 00:22:40,070
pointing to prefers local files instead

00:22:39,080 --> 00:22:42,080
of the Global's

00:22:40,070 --> 00:22:44,960
which is a problem because if you wanna

00:22:42,080 --> 00:22:47,179
if you have a large code base its high

00:22:44,960 --> 00:22:51,679
probability that you will name one of

00:22:47,179 --> 00:22:53,570
your files the same like the name of

00:22:51,679 --> 00:22:56,690
something in the standard library and

00:22:53,570 --> 00:22:59,990
try to do will prefer the local copies

00:22:56,690 --> 00:23:03,080
the local files instead of the global

00:22:59,990 --> 00:23:07,279
Python standard library from python 2.5

00:23:03,080 --> 00:23:11,210
you can you can use the dot in imports

00:23:07,279 --> 00:23:15,259
to make it relative explicitly but in

00:23:11,210 --> 00:23:19,249
Python 3 you have to use the dot to make

00:23:15,259 --> 00:23:22,039
it to make import be a relative which

00:23:19,249 --> 00:23:25,129
means in Python 3

00:23:22,039 --> 00:23:27,049
if you write some import it's always the

00:23:25,129 --> 00:23:30,259
global one if you want to import

00:23:27,049 --> 00:23:32,419
something in the folder you are or in

00:23:30,259 --> 00:23:35,299
your package structure you have to use

00:23:32,419 --> 00:23:37,539
the dot in imports if you wanna if you

00:23:35,299 --> 00:23:37,539
wanna

00:23:37,600 --> 00:23:45,440
standardized approach and also make the

00:23:41,539 --> 00:23:46,999
code compatible for 2 & 3 Python you can

00:23:45,440 --> 00:23:50,590
use the future import from future import

00:23:46,999 --> 00:23:54,230
episode imports and this will make all

00:23:50,590 --> 00:23:56,289
imports by default absolute and if you

00:23:54,230 --> 00:24:00,559
want a relative one you can use the dot

00:23:56,289 --> 00:24:03,799
again very simple fix to make it work in

00:24:00,559 --> 00:24:08,090
Python 2 and PI 3 data formats let's

00:24:03,799 --> 00:24:12,090
talk about it a little bit what is data

00:24:08,090 --> 00:24:15,210
format data format is way how you

00:24:12,090 --> 00:24:18,840
take any information like images like

00:24:15,210 --> 00:24:22,800
music anything you want it's the way how

00:24:18,840 --> 00:24:25,560
to store it on disk like a bite but for

00:24:22,800 --> 00:24:28,470
images and for music we know it right we

00:24:25,560 --> 00:24:30,710
have a lot of photos and mp3's but what

00:24:28,470 --> 00:24:35,040
about text

00:24:30,710 --> 00:24:39,450
what is text just duty of 8's key or

00:24:35,040 --> 00:24:42,180
anything else you can pretend that Texas

00:24:39,450 --> 00:24:45,060
on the sequence of ascii cards and store

00:24:42,180 --> 00:24:50,780
it abides and then you meet frantic

00:24:45,060 --> 00:24:53,550
Brezina and your application of crash

00:24:50,780 --> 00:24:55,620
huge unicode the cold air or and you

00:24:53,550 --> 00:25:00,660
will try to play something decode in

00:24:55,620 --> 00:25:04,020
code and still doesn't work doesn't work

00:25:00,660 --> 00:25:06,990
and also cannot ignore emoji sorry but

00:25:04,020 --> 00:25:10,230
you cannot because it will make your

00:25:06,990 --> 00:25:12,360
user set M which is world the world and

00:25:10,230 --> 00:25:16,310
bitin upstream developers knows it so

00:25:12,360 --> 00:25:20,810
after a lot of years they decided that

00:25:16,310 --> 00:25:24,870
Python free sheet contains separated

00:25:20,810 --> 00:25:28,530
types for text which is in Python free

00:25:24,870 --> 00:25:32,010
Unicode by default and byte which is

00:25:28,530 --> 00:25:35,460
bytes nothing more plain text is a myth

00:25:32,010 --> 00:25:38,070
so Python free as a setter string cetera

00:25:35,460 --> 00:25:41,430
type for text which is Unicode and bytes

00:25:38,070 --> 00:25:46,320
for binary data and this is the I think

00:25:41,430 --> 00:25:48,870
maybe the hardest thing to port because

00:25:46,320 --> 00:25:51,270
you have to make a decision whether you

00:25:48,870 --> 00:25:52,740
want to store text or bytes and for

00:25:51,270 --> 00:25:54,660
example if somebody is supporting the

00:25:52,740 --> 00:25:56,550
code for you it might be even harder

00:25:54,660 --> 00:25:59,100
because I don't know what this variable

00:25:56,550 --> 00:26:01,830
contains I don't I cannot make a

00:25:59,100 --> 00:26:03,900
decision for you so this is if you will

00:26:01,830 --> 00:26:07,470
have for example some intern or some

00:26:03,900 --> 00:26:10,980
student of work for you and port Python

00:26:07,470 --> 00:26:14,010
to Python free compatible form this is

00:26:10,980 --> 00:26:16,170
up to you not up to any trained monkey

00:26:14,010 --> 00:26:18,840
you will have to decide this is the

00:26:16,170 --> 00:26:19,950
decision I was talking about changes in

00:26:18,840 --> 00:26:22,860
the standard library

00:26:19,950 --> 00:26:25,720
standard library ours again contains a

00:26:22,860 --> 00:26:29,049
lot of changes for example some Rene

00:26:25,720 --> 00:26:32,440
built-ins and ranch extra engine red use

00:26:29,049 --> 00:26:34,809
move to function modules module etc raw

00:26:32,440 --> 00:26:37,570
input it's not raw input anymore it's

00:26:34,809 --> 00:26:41,379
just input isodyne it's it's not that

00:26:37,570 --> 00:26:43,960
big deal maybe it is for you but I'm not

00:26:41,379 --> 00:26:47,169
taking it as is because there is a lot

00:26:43,960 --> 00:26:49,899
of modules which will help you to build

00:26:47,169 --> 00:26:54,250
a bridge between Python 2 and PI 2 3 and

00:26:49,899 --> 00:26:56,529
you don't need to take care about these

00:26:54,250 --> 00:26:57,549
simple changes and more I will show it

00:26:56,529 --> 00:27:00,370
to you later

00:26:57,549 --> 00:27:02,409
I don't see extensions is there anybody

00:27:00,370 --> 00:27:12,399
who need to write pint and see

00:27:02,409 --> 00:27:15,519
extensions of course if you need to

00:27:12,399 --> 00:27:19,179
write Python C extensions you're gonna

00:27:15,519 --> 00:27:21,820
have a bad time honestly because Python

00:27:19,179 --> 00:27:25,600
upstream developers said we are trying

00:27:21,820 --> 00:27:28,450
to develop language which will be you

00:27:25,600 --> 00:27:30,340
know easy to write easy to read easy to

00:27:28,450 --> 00:27:33,940
beginners and sister

00:27:30,340 --> 00:27:37,690
why would somebody write Python

00:27:33,940 --> 00:27:40,960
extensions in C we are making Python for

00:27:37,690 --> 00:27:46,889
easy development why you see to make

00:27:40,960 --> 00:27:49,240
Python extensions so my advice is if you

00:27:46,889 --> 00:27:49,750
really need to do it you're gonna have a

00:27:49,240 --> 00:27:54,370
bad time

00:27:49,750 --> 00:27:57,009
because Python developers say nobody

00:27:54,370 --> 00:27:59,710
should do this so we are not keeping

00:27:57,009 --> 00:28:04,870
backwards compatibility in any way and

00:27:59,710 --> 00:28:08,799
everything change it but help is alway

00:28:04,870 --> 00:28:12,039
so we have solution also for this so if

00:28:08,799 --> 00:28:14,919
you want to write the extensions I will

00:28:12,039 --> 00:28:19,419
show you how to do it but if you can

00:28:14,919 --> 00:28:24,220
choose please use seitan or CF Fi and C

00:28:19,419 --> 00:28:26,470
types seitan is you know modified Python

00:28:24,220 --> 00:28:29,080
which can be easily translated to seek

00:28:26,470 --> 00:28:33,009
out and it makes basically C extension

00:28:29,080 --> 00:28:36,539
for you and for basically no price and

00:28:33,009 --> 00:28:38,590
see FF IRC types are modules for calling

00:28:36,539 --> 00:28:41,139
existing c functions

00:28:38,590 --> 00:28:43,629
Python so if you can choose please do

00:28:41,139 --> 00:28:46,840
not write C extensions directmusic

00:28:43,629 --> 00:28:50,830
Python C API use seitan or C FF IRC

00:28:46,840 --> 00:28:55,419
types but if you have to I will show you

00:28:50,830 --> 00:28:59,740
how I will show what to use how this

00:28:55,419 --> 00:29:05,740
only way as I said if you are a really

00:28:59,740 --> 00:29:08,590
conservative guy if you do you really

00:29:05,740 --> 00:29:12,820
think it's right time to support Python

00:29:08,590 --> 00:29:15,789
3 really it's only 11 years I'm not sure

00:29:12,820 --> 00:29:18,480
whether stable or not if you are this

00:29:15,789 --> 00:29:21,159
type of conservative guy we wrote

00:29:18,480 --> 00:29:23,549
conservative party guy for you you will

00:29:21,159 --> 00:29:26,409
find it on the radio dogs and it's the

00:29:23,549 --> 00:29:29,049
complete list of the things you will

00:29:26,409 --> 00:29:32,139
have to change in your code to support

00:29:29,049 --> 00:29:34,990
Python 3 of course and what to do it

00:29:32,139 --> 00:29:38,679
what is prevalence of the changes why

00:29:34,990 --> 00:29:45,669
this was changed in the Python from time

00:29:38,679 --> 00:29:47,529
to time and and also how to do it

00:29:45,669 --> 00:29:51,009
because of course nobody wants to do it

00:29:47,529 --> 00:29:54,700
manually so there is help how to use

00:29:51,009 --> 00:29:57,669
tool called pint and modernize what you

00:29:54,700 --> 00:30:01,119
know options what arguments to use that

00:29:57,669 --> 00:30:03,610
only the one thing is changing in the

00:30:01,119 --> 00:30:06,220
time so it's really conservative and

00:30:03,610 --> 00:30:08,799
it's really here to you what you need to

00:30:06,220 --> 00:30:11,470
do to support Python Python 3 in your

00:30:08,799 --> 00:30:13,600
code base and also find in 2.7 and if

00:30:11,470 --> 00:30:20,230
you be if you will be careful also by

00:30:13,600 --> 00:30:22,480
32.6 come on the six library was

00:30:20,230 --> 00:30:27,330
mentioned before why it's called 6

00:30:22,480 --> 00:30:29,499
because 2 times 3 6 right 6 contains

00:30:27,330 --> 00:30:31,840
it's a wrapper and contains some

00:30:29,499 --> 00:30:34,899
utilities to help you building the

00:30:31,840 --> 00:30:36,999
bridge between PI 2 and PI 3 which means

00:30:34,899 --> 00:30:40,299
for example if you want to import

00:30:36,999 --> 00:30:44,000
something which was renamed in Python 3

00:30:40,299 --> 00:30:47,210
you can import in from the 6 and it will

00:30:44,000 --> 00:30:49,550
do basically the work for you so if you

00:30:47,210 --> 00:30:52,580
run the code in Python 2 it will import

00:30:49,550 --> 00:30:55,370
the in the Python 2 name if you work the

00:30:52,580 --> 00:30:57,650
if you want if you run the code in

00:30:55,370 --> 00:31:02,870
Python 3 it will import it under the

00:30:57,650 --> 00:31:04,910
Python 3 name etc etc also contains a

00:31:02,870 --> 00:31:08,120
lot of stuff which help you with Unicode

00:31:04,910 --> 00:31:11,240
etc so 6 9 berry it's also in the

00:31:08,120 --> 00:31:12,830
conservative pointing light so yeah and

00:31:11,240 --> 00:31:16,010
it really works and it will really help

00:31:12,830 --> 00:31:19,070
you trust me this is a project which

00:31:16,010 --> 00:31:23,000
helps basically do one from you who need

00:31:19,070 --> 00:31:25,640
to you need to write a Python C

00:31:23,000 --> 00:31:29,150
extensions it's something like 6 it

00:31:25,640 --> 00:31:31,310
contains a lot of macros for C and it'll

00:31:29,150 --> 00:31:36,110
help you to port Python C extensions as

00:31:31,310 --> 00:31:40,070
well and the last but not least wait for

00:31:36,110 --> 00:31:42,230
it it's me don't hesitate to write me to

00:31:40,070 --> 00:31:44,090
call me I am a firefighter so I'll pick

00:31:42,230 --> 00:31:46,850
your phone even on a midnight you know

00:31:44,090 --> 00:31:48,890
it's not a problem at all my girlfriend

00:31:46,850 --> 00:31:52,460
hates me because of the hell but it's

00:31:48,890 --> 00:31:55,700
not a problem at all don't hesitate call

00:31:52,460 --> 00:31:58,700
me send me an email I will help you I

00:31:55,700 --> 00:32:01,880
will help to set some pipeline for a

00:31:58,700 --> 00:32:05,600
project to support Python free in right

00:32:01,880 --> 00:32:07,640
time which is now thank you for

00:32:05,600 --> 00:32:14,909
attention

00:32:07,640 --> 00:32:17,710
[Applause]

00:32:14,909 --> 00:32:20,320
we have plenty of time for questions so

00:32:17,710 --> 00:32:39,159
many questions you can also catch me on

00:32:20,320 --> 00:32:41,409
the whole no that's a question I hope I

00:32:39,159 --> 00:32:44,169
repeat a question yeah sorry the

00:32:41,409 --> 00:32:45,490
question was if there will be some new

00:32:44,169 --> 00:32:47,379
breakages some backward

00:32:45,490 --> 00:32:53,730
incompatibilities in next painten's

00:32:47,379 --> 00:32:56,950
no hopefully not but we may release

00:32:53,730 --> 00:33:02,230
python for but it will keep backward

00:32:56,950 --> 00:33:05,019
compatibility so don't worry nobody even

00:33:02,230 --> 00:33:07,990
the point on upstream developers and me

00:33:05,019 --> 00:33:10,090
later nobody wants to repeat the same

00:33:07,990 --> 00:33:12,399
process again we are fighting with we

00:33:10,090 --> 00:33:26,950
are fighting with this for 10 years so

00:33:12,399 --> 00:33:29,590
we don't want to do it anymore if your

00:33:26,950 --> 00:33:33,399
tests are also invited to yeah the test

00:33:29,590 --> 00:33:36,279
what to do if your test coverage is good

00:33:33,399 --> 00:33:40,600
but your tests are also in Python in

00:33:36,279 --> 00:33:43,240
Python 2 question so the best approach

00:33:40,600 --> 00:33:45,340
to port basically if you have some test

00:33:43,240 --> 00:33:47,889
or if you have for example good test

00:33:45,340 --> 00:33:50,470
coverage is to set up some tool for

00:33:47,889 --> 00:33:53,470
example talks talks or you may know

00:33:50,470 --> 00:33:56,070
Travis etc it's a tool which can run

00:33:53,470 --> 00:33:58,869
your test on in multiple in multiple

00:33:56,070 --> 00:34:01,360
languages in the same time so you can

00:33:58,869 --> 00:34:05,289
pick the versions of Python you want to

00:34:01,360 --> 00:34:10,299
support for example 2.6 7 3 3 4 5 6 7

00:34:05,289 --> 00:34:13,599
etc and then you then do you have only

00:34:10,299 --> 00:34:14,109
one task to solve make all grain that's

00:34:13,599 --> 00:34:16,599
all

00:34:14,109 --> 00:34:20,079
sounds simple I know but if you test are

00:34:16,599 --> 00:34:23,319
important too and it's it's yeah it's

00:34:20,079 --> 00:34:26,409
common scenario then you will have to

00:34:23,319 --> 00:34:26,730
fix your test first before you can you

00:34:26,409 --> 00:34:30,149
know

00:34:26,730 --> 00:34:35,909
higher training monkey but it's not that

00:34:30,149 --> 00:34:39,600
big deal usually because how many you

00:34:35,909 --> 00:34:41,280
know features you are using in test it's

00:34:39,600 --> 00:34:43,200
basically called the function and

00:34:41,280 --> 00:34:45,240
compare the results and call the

00:34:43,200 --> 00:34:47,820
function and don't want something from

00:34:45,240 --> 00:34:50,100
web and compare the results so it's not

00:34:47,820 --> 00:34:52,679
that big deal in tests basically but

00:34:50,100 --> 00:34:55,050
yeah of course if you want to store

00:34:52,679 --> 00:34:57,780
Unicode somewhere you will accept

00:34:55,050 --> 00:34:59,990
Unicode in test so it needs some work to

00:34:57,780 --> 00:34:59,990
be done

00:35:00,080 --> 00:35:23,520
any more questions the question is

00:35:20,880 --> 00:35:27,030
whether concessions is that it was a bad

00:35:23,520 --> 00:35:31,740
idea to break the paper compatibility it

00:35:27,030 --> 00:35:35,730
wasn't because is that it wasn't a bad

00:35:31,740 --> 00:35:38,580
idea to break it because you know we

00:35:35,730 --> 00:35:41,910
will have to do it sooner or later so

00:35:38,580 --> 00:35:44,760
it's and everything was prepared and the

00:35:41,910 --> 00:35:47,070
first plan was okay just jump right into

00:35:44,760 --> 00:35:49,770
it all and make only part of frame

00:35:47,070 --> 00:35:52,170
that's cool and then somebody scared you

00:35:49,770 --> 00:35:55,380
crazy do you know how many lines of code

00:35:52,170 --> 00:35:59,490
are written in Python 2 it's no no idea

00:35:55,380 --> 00:36:01,230
and then the deadline the AOL for point

00:35:59,490 --> 00:36:03,170
into was postponed and postponed and

00:36:01,230 --> 00:36:08,580
postponed and postponed so nobody

00:36:03,170 --> 00:36:11,520
actually except that will be that big

00:36:08,580 --> 00:36:13,890
deal to transform and that's a good

00:36:11,520 --> 00:36:14,490
lesson we learned so we don't want to do

00:36:13,890 --> 00:36:18,060
it anymore

00:36:14,490 --> 00:36:21,570
so yeah about it we all have to be done

00:36:18,060 --> 00:36:23,840
sooner or later still so job is done

00:36:21,570 --> 00:36:23,840
basically

00:36:31,109 --> 00:36:37,869
question is is there any chance that the

00:36:33,579 --> 00:36:41,380
deadline of fightin to lol in 2020 will

00:36:37,869 --> 00:36:44,410
be postponed again no there is no chance

00:36:41,380 --> 00:36:46,869
to point into to be the deadline for

00:36:44,410 --> 00:36:49,029
from the upstream developers to be

00:36:46,869 --> 00:36:52,150
postponed of course there are projects

00:36:49,029 --> 00:36:54,099
like I don't know a fountain fountain is

00:36:52,150 --> 00:36:56,259
basically pointing to forked from

00:36:54,099 --> 00:36:59,970
upstream with some big vaulted features

00:36:56,259 --> 00:37:03,369
from Python 3 so it will probably be

00:36:59,970 --> 00:37:05,529
somebody who will take care of fighting

00:37:03,369 --> 00:37:08,019
too but it's a lot of work

00:37:05,529 --> 00:37:10,569
really so I don't think the upstream

00:37:08,019 --> 00:37:12,519
developers don't want to do it anymore

00:37:10,569 --> 00:37:15,910
actually the first announced that

00:37:12,519 --> 00:37:20,319
deadline was 2020 and then people start

00:37:15,910 --> 00:37:22,809
asking like and December 2020 before no

00:37:20,319 --> 00:37:25,749
first January 2020 and that's all

00:37:22,809 --> 00:37:28,930
no more discussing so no Python upstream

00:37:25,749 --> 00:37:33,009
developers don't want to do it I don't

00:37:28,930 --> 00:37:36,700
think anyone want to do it no I think

00:37:33,009 --> 00:37:40,150
that there's no chance it's we are too

00:37:36,700 --> 00:37:42,670
close to remove Python 2 from you don't

00:37:40,150 --> 00:37:48,969
want to postpone it and you know we want

00:37:42,670 --> 00:37:50,859
to party next year and by console yeah

00:37:48,969 --> 00:37:52,719
yeah Python Python us there will be a

00:37:50,859 --> 00:37:54,940
huge party for removing point and - so

00:37:52,719 --> 00:38:02,229
we don't want to post you know who wants

00:37:54,940 --> 00:38:04,650
to postpone party ok any more any more

00:38:02,229 --> 00:38:04,650
questions

00:38:12,349 --> 00:38:18,890
major is there any major libraries which

00:38:17,029 --> 00:38:22,160
don't be poured to find a free or unless

00:38:18,890 --> 00:38:24,410
to supper Python free I would say no but

00:38:22,160 --> 00:38:28,609
depends how you know where your

00:38:24,410 --> 00:38:32,509
dependencies is there are some of course

00:38:28,609 --> 00:38:33,829
but for every important library if the

00:38:32,509 --> 00:38:35,630
upstream developers don't want to

00:38:33,829 --> 00:38:38,180
support writer free there is a fork

00:38:35,630 --> 00:38:40,489
which supports writer free so it may if

00:38:38,180 --> 00:38:44,239
you are using some you know not that

00:38:40,489 --> 00:38:46,670
common libraries it will need maybe to

00:38:44,239 --> 00:38:49,369
change your dependencies and to add up

00:38:46,670 --> 00:38:55,609
to the new one but as I said before on a

00:38:49,369 --> 00:39:02,239
pipe I the 300 and 360 most downloaded

00:38:55,609 --> 00:39:03,710
libraries is done or done and you can

00:39:02,239 --> 00:39:07,009
also check it on Python through your

00:39:03,710 --> 00:39:09,460
readiness there is so huge list so it's

00:39:07,009 --> 00:39:12,910
not a problem

00:39:09,460 --> 00:39:12,910
I'm a questions

00:39:27,030 --> 00:39:31,720
yeah as I said before there are a lot of

00:39:29,770 --> 00:39:33,670
project already dropping or already

00:39:31,720 --> 00:39:36,280
they've already dropped Python to

00:39:33,670 --> 00:39:38,560
support so you might be really surprised

00:39:36,280 --> 00:39:41,800
when you do update of your software

00:39:38,560 --> 00:39:45,280
stack and if this presentation would be

00:39:41,800 --> 00:39:47,200
really boring for you and it's evening I

00:39:45,280 --> 00:39:50,860
know I can understand but please

00:39:47,200 --> 00:39:53,950
remember one thing if you start new

00:39:50,860 --> 00:39:57,190
project or if you actively work on some

00:39:53,950 --> 00:40:00,430
project move it or star it with Python

00:39:57,190 --> 00:40:03,160
free because if you don't after ten

00:40:00,430 --> 00:40:06,670
years from now somebody like me will

00:40:03,160 --> 00:40:10,450
need to do work for you and I don't want

00:40:06,670 --> 00:40:13,030
to okay so please every new project

00:40:10,450 --> 00:40:15,310
starting point and three point seven

00:40:13,030 --> 00:40:18,120
school full of new features every

00:40:15,310 --> 00:40:21,970
problem you need to actively maintain

00:40:18,120 --> 00:40:25,180
Python 3 6 PI 2 3 7 depends on what you

00:40:21,970 --> 00:40:27,580
want but moving it's not that bad

00:40:25,180 --> 00:40:32,310
somebody and it's huge project so you

00:40:27,580 --> 00:40:36,880
can do trust me thank you very much

00:40:32,310 --> 00:40:36,880
[Applause]

00:40:37,930 --> 00:40:39,990

YouTube URL: https://www.youtube.com/watch?v=HtUPzxUJNUQ


