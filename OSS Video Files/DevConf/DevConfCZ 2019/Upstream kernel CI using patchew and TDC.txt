Title: Upstream kernel CI using patchew and TDC
Publication date: 2019-03-04
Playlist: DevConfCZ 2019
Description: 
	Presentation name: Upstream kernel CI using patchew and TDC
Speaker: Davide Caratti
Description:  The Linux kernel provides TDC, a selftest suite for the TC subsystem. Unit tests are easy to write (a small example is presented), and the self-test suite can be enhanced with plugins to allow more coverage (e.g. valgrind or kmemleak). We show the setup of patchew (https://patchew.org) to monitor the kernel netdev mailing list and launch the TDC testsuite for each single patch targeting the TC subsystem. Developers/maintainers are then notified in case of functional breakage. Attendees will be encouraged to contribute to the Linux kernel testsuite, know more about patchew and also find a quick reference of usage for TC commands.
[ https://sched.co/JcdX ]
Captions: 
	00:00:07,720 --> 00:00:13,490
hello everybody welcome to Def Con my

00:00:11,480 --> 00:00:16,430
name is Doug Leier karate and I work for

00:00:13,490 --> 00:00:19,550
Red Hat in the networking services team

00:00:16,430 --> 00:00:21,980
and I'm Reza diamond and my work is

00:00:19,550 --> 00:00:25,250
mostly focused on reddit occupies the

00:00:21,980 --> 00:00:28,220
news today I want to share with you

00:00:25,250 --> 00:00:30,170
step-by-step where I'm at with the

00:00:28,220 --> 00:00:35,420
attempts of putting continuous

00:00:30,170 --> 00:00:38,390
integration in TC I assume most of you

00:00:35,420 --> 00:00:41,840
know what TC is is a component in that

00:00:38,390 --> 00:00:44,829
looks carmella that implements traffic

00:00:41,840 --> 00:00:50,149
schedulers packet classification and

00:00:44,829 --> 00:00:52,730
packet mainly in the test we are going

00:00:50,149 --> 00:00:56,420
to briefly see how unit tests can be

00:00:52,730 --> 00:00:58,460
written within the TDC suite and then we

00:00:56,420 --> 00:01:01,660
will see an example implementation for

00:00:58,460 --> 00:01:05,420
the BPF action which is kind of trendy

00:01:01,660 --> 00:01:08,500
then we will see how to how this test

00:01:05,420 --> 00:01:11,650
case and the whole TDC can be automated

00:01:08,500 --> 00:01:16,549
in a way that every single patch

00:01:11,650 --> 00:01:19,280
targeting the net dab mailing list can

00:01:16,549 --> 00:01:23,840
run this simple unit test with the

00:01:19,280 --> 00:01:27,830
purpose of avoiding regression and under

00:01:23,840 --> 00:01:30,740
undesired behaviors so I chose to use

00:01:27,830 --> 00:01:34,340
patch you told to wait the test and some

00:01:30,740 --> 00:01:36,049
are the test results we will overview

00:01:34,340 --> 00:01:40,070
the setup of the whole test system and

00:01:36,049 --> 00:01:41,960
see an example report next we will

00:01:40,070 --> 00:01:44,840
overview what can be the future

00:01:41,960 --> 00:01:48,890
developments for the TV set a suite and

00:01:44,840 --> 00:01:51,740
perpetuate well finally if there are any

00:01:48,890 --> 00:01:58,610
questions and there is enough I will be

00:01:51,740 --> 00:02:03,200
happy to try an answer so why am I doing

00:01:58,610 --> 00:02:07,190
this and why do I think it's useful as

00:02:03,200 --> 00:02:10,190
you might know TC code is in Linux since

00:02:07,190 --> 00:02:13,820
years so theoretical we would not expect

00:02:10,190 --> 00:02:16,880
to see so many packages over time but

00:02:13,820 --> 00:02:19,550
the reality is different because the TC

00:02:16,880 --> 00:02:22,660
code is constantly being expanded and

00:02:19,550 --> 00:02:27,890
included and sometimes written because

00:02:22,660 --> 00:02:29,810
there are many users of TC I want to

00:02:27,890 --> 00:02:33,500
mention time-based transmission which is

00:02:29,810 --> 00:02:37,460
a new to discipline which has been added

00:02:33,500 --> 00:02:39,500
by Intel and also I want to mention

00:02:37,460 --> 00:02:43,300
obvious offloads because openness which

00:02:39,500 --> 00:02:55,400
is using the TC layer to offload

00:02:43,300 --> 00:02:57,620
classifying an actions to the mix so one

00:02:55,400 --> 00:03:00,560
of the standard proposes for people

00:02:57,620 --> 00:03:03,680
working on deals is try to avoid the

00:03:00,560 --> 00:03:05,690
breakage breaking things so any change

00:03:03,680 --> 00:03:10,970
of behavior should be done on purpose

00:03:05,690 --> 00:03:14,920
and any change and improvement should be

00:03:10,970 --> 00:03:17,630
designed to be backwards compatible so

00:03:14,920 --> 00:03:20,090
unless it's about the current behavior

00:03:17,630 --> 00:03:22,430
needs to be preferred and as you

00:03:20,090 --> 00:03:27,560
probably already know ci is one of the

00:03:22,430 --> 00:03:31,580
answer to these kind of leads about two

00:03:27,560 --> 00:03:35,239
years ago TVC was pushed to the up

00:03:31,580 --> 00:03:39,260
strongly hoods and started introducing

00:03:35,239 --> 00:03:41,720
sub tests on the TC layer and more

00:03:39,260 --> 00:03:43,940
recently that you project landed

00:03:41,720 --> 00:03:48,800
upstream to provide a continuous

00:03:43,940 --> 00:03:50,540
integration for the Qumu project so

00:03:48,800 --> 00:03:53,030
before going on it's worth mentioning

00:03:50,540 --> 00:03:55,670
the guys that who wrote most of the code

00:03:53,030 --> 00:03:58,239
I'm using for this presentation so kudos

00:03:55,670 --> 00:04:01,760
and thanks to the authors of TDC and

00:03:58,239 --> 00:04:05,600
namely to Alexander Lucas kara a Roman

00:04:01,760 --> 00:04:09,769
from Wichita food and of course many

00:04:05,600 --> 00:04:12,080
thanks to the authors of virtue working

00:04:09,769 --> 00:04:15,940
they work for the Q project particularly

00:04:12,080 --> 00:04:15,940
text at the Paolo Maldini and funds

00:04:17,109 --> 00:04:20,950
last but not least

00:04:18,579 --> 00:04:23,230
kudos after you in case you plan to

00:04:20,950 --> 00:04:26,170
contribute to open source and

00:04:23,230 --> 00:04:28,360
particularly to TDC and that you so

00:04:26,170 --> 00:04:33,640
there's a lot of work that needs to be

00:04:28,360 --> 00:04:37,300
done especially if you are new to the

00:04:33,640 --> 00:04:39,520
linux camera community like I am writing

00:04:37,300 --> 00:04:43,990
acid test is definitely a good way for

00:04:39,520 --> 00:04:47,400
being embodied so this is a Emil the

00:04:43,990 --> 00:04:53,560
David Miller sent to one of my mates and

00:04:47,400 --> 00:04:58,630
it's quite self explaining say it's

00:04:53,560 --> 00:05:03,520
applied so I assume most of you have

00:04:58,630 --> 00:05:06,070
basic knowledge of what TC is and in any

00:05:03,520 --> 00:05:08,830
case there's a lot of documentation on

00:05:06,070 --> 00:05:10,570
the web on the man pages and a fun fact

00:05:08,830 --> 00:05:13,810
is also TDC as a source for

00:05:10,570 --> 00:05:18,100
documentation if you have troubles in

00:05:13,810 --> 00:05:19,660
configuring some TC rule anyway what's

00:05:18,100 --> 00:05:21,880
relevant here is the interface that

00:05:19,660 --> 00:05:25,210
programs use when they communicate with

00:05:21,880 --> 00:05:28,210
the colonel it's all made of netlink

00:05:25,210 --> 00:05:32,440
messages that carry inside the

00:05:28,210 --> 00:05:35,850
configuration data you can try to get an

00:05:32,440 --> 00:05:45,070
idea of how big is this configuration

00:05:35,850 --> 00:05:50,260
space and you try this common so you

00:05:45,070 --> 00:05:53,050
just try to show the simplest option in

00:05:50,260 --> 00:05:55,240
the kernel and see what kind of messages

00:05:53,050 --> 00:05:57,039
travel inside and this is the message

00:05:55,240 --> 00:06:03,160
it's a big even Atheling messages

00:05:57,039 --> 00:06:07,330
carrying data and after that consider we

00:06:03,160 --> 00:06:10,990
have these objects 35 q disks 12

00:06:07,330 --> 00:06:13,270
classifier and 15 actions maybe counting

00:06:10,990 --> 00:06:17,830
because I know of people writing more

00:06:13,270 --> 00:06:20,229
condensed and more actions so with this

00:06:17,830 --> 00:06:24,120
space of configuration the probability

00:06:20,229 --> 00:06:24,120
of breaking something is not negligible

00:06:24,150 --> 00:06:29,040
now let's take a real example

00:06:27,120 --> 00:06:33,300
and assume we want to unit to test the

00:06:29,040 --> 00:06:35,310
BPF action let's install dummy EBP a

00:06:33,300 --> 00:06:38,130
proper program that is going to be

00:06:35,310 --> 00:06:41,370
executed on the data plane for example

00:06:38,130 --> 00:06:44,850
we want to mangle packets one by one

00:06:41,370 --> 00:06:46,740
when they are transmitted so we start

00:06:44,850 --> 00:06:48,570
this program and then we queried the

00:06:46,740 --> 00:06:54,570
caramel back to see if the program has

00:06:48,570 --> 00:06:58,190
been correctly installed so we are doing

00:06:54,570 --> 00:07:02,310
the ITC action ad with the specifying

00:06:58,190 --> 00:07:04,320
the program and then we do what is the

00:07:02,310 --> 00:07:08,850
action done to see if the program has

00:07:04,320 --> 00:07:11,039
been installed correctly we will be

00:07:08,850 --> 00:07:15,870
invoking these methods in the control

00:07:11,039 --> 00:07:19,139
part of the action we will be enclosing

00:07:15,870 --> 00:07:21,270
in the ethnic messages the the following

00:07:19,139 --> 00:07:24,300
parameters which are specific to the BBF

00:07:21,270 --> 00:07:26,340
action and we will also use this kind of

00:07:24,300 --> 00:07:33,060
parameters that are explicit that are

00:07:26,340 --> 00:07:35,639
common to all TC actions ok this unit

00:07:33,060 --> 00:07:38,700
test and many others like this are

00:07:35,639 --> 00:07:40,680
covered currently by TDC so you just

00:07:38,700 --> 00:07:42,990
need to push the to the TC testing

00:07:40,680 --> 00:07:46,289
folder in the linkster source tree and

00:07:42,990 --> 00:07:48,870
then you can just list all the test

00:07:46,289 --> 00:07:54,930
cases available for the BBF action and

00:07:48,870 --> 00:08:00,300
selectively run one tester on do them

00:07:54,930 --> 00:08:03,060
all and let's see how test cases are

00:08:00,300 --> 00:08:05,070
written if the key action have a filter

00:08:03,060 --> 00:08:09,240
and a virtue disk has a dedicated list

00:08:05,070 --> 00:08:11,220
of unit tests so briefly unit test is

00:08:09,240 --> 00:08:13,820
made of a common under test that we

00:08:11,220 --> 00:08:17,849
launched there's an expected exit code

00:08:13,820 --> 00:08:20,550
we issue a verify command and the check

00:08:17,849 --> 00:08:28,110
if the match pattern matches match count

00:08:20,550 --> 00:08:30,240
time so back to our unit test example we

00:08:28,110 --> 00:08:34,070
assume we did the other setup phase

00:08:30,240 --> 00:08:37,500
where or BPF action has been cleared

00:08:34,070 --> 00:08:39,240
this is the common dangle test with the

00:08:37,500 --> 00:08:42,090
we check the expected at its exit code

00:08:39,240 --> 00:08:44,760
which should be zero we issued a

00:08:42,090 --> 00:08:46,530
verified comment and we check for the

00:08:44,760 --> 00:08:52,200
match pattern and the match count it's

00:08:46,530 --> 00:08:54,420
quite really easy so that's it that's

00:08:52,200 --> 00:08:56,250
what what is the TDC the test

00:08:54,420 --> 00:09:00,090
infrastructure can be extended that are

00:08:56,250 --> 00:09:01,770
the possibility to use plugins so we put

00:09:00,090 --> 00:09:03,510
some variants on the setup row we can

00:09:01,770 --> 00:09:06,360
use namespaces we can use a virtual

00:09:03,510 --> 00:09:10,350
Ethernet or we can use tools like violin

00:09:06,360 --> 00:09:12,510
dork mm lick to fire memorylanes so TBC

00:09:10,350 --> 00:09:19,320
the number to delete as cases is growing

00:09:12,510 --> 00:09:21,440
as the Linux kernel keyboards and please

00:09:19,320 --> 00:09:24,570
note that you dicks have not tested yet

00:09:21,440 --> 00:09:27,480
coverage will be introduced at this year

00:09:24,570 --> 00:09:29,910
so there's a lot of work that needs to

00:09:27,480 --> 00:09:31,920
be done and like I mentioned before

00:09:29,910 --> 00:09:33,050
contribution isn't in this area are very

00:09:31,920 --> 00:09:37,350
welcome

00:09:33,050 --> 00:09:40,170
so now that we know how to write a unit

00:09:37,350 --> 00:09:44,850
test let's see how does to do the CI

00:09:40,170 --> 00:09:46,800
part for this thing that is bad - why /

00:09:44,850 --> 00:09:49,740
- why did I choose patchy because it's

00:09:46,800 --> 00:09:52,230
new I like new things it's open source

00:09:49,740 --> 00:09:56,280
of course and it's used by another big

00:09:52,230 --> 00:09:59,280
project so it's kind of good thing this

00:09:56,280 --> 00:10:02,250
diagram summarizes the architecture used

00:09:59,280 --> 00:10:07,500
bye-bye - there is an important note

00:10:02,250 --> 00:10:09,900
that checks for new emails and it pushes

00:10:07,500 --> 00:10:13,670
information to a server which holds a

00:10:09,900 --> 00:10:16,500
dashboard and pushes to a git repository

00:10:13,670 --> 00:10:19,230
every patch that is received then there

00:10:16,500 --> 00:10:23,130
is a tester that pulls the server get

00:10:19,230 --> 00:10:25,770
new patches close a repository from the

00:10:23,130 --> 00:10:26,510
git repository and it simply does the

00:10:25,770 --> 00:10:30,450
test

00:10:26,510 --> 00:10:32,160
so the see our patch is processed at the

00:10:30,450 --> 00:10:35,670
very beginning somebody sends a message

00:10:32,160 --> 00:10:37,320
- amazing - a mailing list and the mail

00:10:35,670 --> 00:10:40,770
client that pulls for new content

00:10:37,320 --> 00:10:43,620
checks for new messages it checks if

00:10:40,770 --> 00:10:45,520
contains a patch and similarly to what

00:10:43,620 --> 00:10:47,170
is done inside patch worker in

00:10:45,520 --> 00:10:51,870
recognising the follow-up so they

00:10:47,170 --> 00:10:58,510
reviewed the tested the arcade bike and

00:10:51,870 --> 00:11:01,590
it stores the these informations so the

00:10:58,510 --> 00:11:04,660
importer applies locally the patch and

00:11:01,590 --> 00:11:07,120
tries to push it to a mirror of the

00:11:04,660 --> 00:11:10,200
Linux kernel which is currently in my

00:11:07,120 --> 00:11:13,600
github and after that it creates a tag

00:11:10,200 --> 00:11:15,850
but if the push operation has been

00:11:13,600 --> 00:11:21,040
successful the importer then updates the

00:11:15,850 --> 00:11:23,140
status in the server like this so if the

00:11:21,040 --> 00:11:29,400
push is successful the importer puts

00:11:23,140 --> 00:11:32,350
that G status plug the G is blue so the

00:11:29,400 --> 00:11:34,840
application has been successful it can

00:11:32,350 --> 00:11:40,870
be great in case the application is not

00:11:34,840 --> 00:11:44,110
much does not apply so the importance is

00:11:40,870 --> 00:11:46,240
also able to understand follow-ups so if

00:11:44,110 --> 00:11:49,800
somebody have used the patch it applies

00:11:46,240 --> 00:11:52,660
the app flag and if the patch is

00:11:49,800 --> 00:11:55,870
superseded by a new patch but you

00:11:52,660 --> 00:11:58,090
understand it and puts the old flag and

00:11:55,870 --> 00:12:01,090
in case there is a serious the citizen

00:11:58,090 --> 00:12:07,600
may be incomplete it the question mark

00:12:01,090 --> 00:12:10,120
and okay now it's time to see how in

00:12:07,600 --> 00:12:14,050
flower patch did pass the test so the

00:12:10,120 --> 00:12:16,540
the tester periodically pulls four new

00:12:14,050 --> 00:12:20,650
patches and tested patches and simply

00:12:16,540 --> 00:12:23,440
close the tag locally it compiles the

00:12:20,650 --> 00:12:26,440
kernel it launches a vector machine with

00:12:23,440 --> 00:12:29,650
the that kernel and runs the test so the

00:12:26,440 --> 00:12:32,620
test those okay there is a green tea

00:12:29,650 --> 00:12:35,850
flag and otherwise there is a red tip

00:12:32,620 --> 00:12:35,850
flag like in this case

00:12:37,790 --> 00:12:43,610
and that's how the dashboard looks like

00:12:41,540 --> 00:12:46,280
after the importer applied three patches

00:12:43,610 --> 00:12:51,050
and that's the two of them without

00:12:46,280 --> 00:12:55,610
finding any issue you can click on the

00:12:51,050 --> 00:12:58,910
subject and have looked like it looks

00:12:55,610 --> 00:13:01,550
like this and since I'm not getting a

00:12:58,910 --> 00:13:04,640
project I can reset some of these flags

00:13:01,550 --> 00:13:09,920
to redo the test or to redo the apply

00:13:04,640 --> 00:13:17,090
log so here is how I managed to install

00:13:09,920 --> 00:13:20,560
Pat you did it work well well the script

00:13:17,090 --> 00:13:23,450
I used to create the tester on my github

00:13:20,560 --> 00:13:25,340
during this percentage this worked the

00:13:23,450 --> 00:13:27,470
traffic on net the mailing list was

00:13:25,340 --> 00:13:30,350
almost zero because there was a long

00:13:27,470 --> 00:13:36,680
period where the wrench was closed so no

00:13:30,350 --> 00:13:39,200
patch was flying and also many 2dc test

00:13:36,680 --> 00:13:42,140
cases were broken and what strange that

00:13:39,200 --> 00:13:45,950
the breakage happened very recently in

00:13:42,140 --> 00:13:50,480
the last month so we want really to make

00:13:45,950 --> 00:13:53,150
this stable so the current state is

00:13:50,480 --> 00:13:55,580
there is no dashboard on the official

00:13:53,150 --> 00:13:57,800
patch ooh I have a draft to dashboard

00:13:55,580 --> 00:14:03,560
with semi broken important that it's

00:13:57,800 --> 00:14:06,470
working at the unstable virtual branch

00:14:03,560 --> 00:14:10,960
stay tuned because in the next days I'm

00:14:06,470 --> 00:14:15,050
going to put it online with live test

00:14:10,960 --> 00:14:17,450
what next for did you see a lot of

00:14:15,050 --> 00:14:18,950
things we are planning to do functional

00:14:17,450 --> 00:14:21,170
tests on the data path inject new

00:14:18,950 --> 00:14:23,030
traffic we are planning to do

00:14:21,170 --> 00:14:25,400
performance tests to check if the

00:14:23,030 --> 00:14:28,880
install writer and if the packet rate

00:14:25,400 --> 00:14:31,820
degrades with some patches we need to

00:14:28,880 --> 00:14:34,670
add more more test cases for testing

00:14:31,820 --> 00:14:36,800
cute ists and we are evaluating

00:14:34,670 --> 00:14:39,950
inclusion for the CI project which is a

00:14:36,800 --> 00:14:42,350
bigger bigger project for carrier

00:14:39,950 --> 00:14:45,350
continuous integration when TDC will

00:14:42,350 --> 00:14:46,940
provide enough coverage and then we need

00:14:45,350 --> 00:14:49,310
to fix the loose dependency on

00:14:46,940 --> 00:14:52,840
we have to because many breakages happen

00:14:49,310 --> 00:14:55,520
just because committing eyebrow to dog

00:14:52,840 --> 00:14:57,800
the current behavior there is a way to

00:14:55,520 --> 00:15:01,960
fix this and it's use the JSON file

00:14:57,800 --> 00:15:04,730
output perpetuates much easier because

00:15:01,960 --> 00:15:09,410
everything that is in the future is in

00:15:04,730 --> 00:15:10,990
this nice to-do list on the battery

00:15:09,410 --> 00:15:15,100
project github

00:15:10,990 --> 00:15:15,100
I'm done any questions

00:15:18,500 --> 00:15:35,870
till left some candies here so many

00:15:21,620 --> 00:15:38,570
questions cool so no we're I'm not

00:15:35,870 --> 00:15:41,540
playing into this sorry the question if

00:15:38,570 --> 00:15:44,630
is if we are planning to test driver

00:15:41,540 --> 00:15:48,620
changes so the TC layer should not

00:15:44,630 --> 00:15:51,620
impact on driver but on some case in

00:15:48,620 --> 00:15:54,290
some case it does because TC action and

00:15:51,620 --> 00:15:54,950
TC classifiers can be uploaded so in

00:15:54,290 --> 00:15:56,990
case a driver

00:15:54,950 --> 00:15:59,870
uploads a whole and the driver does not

00:15:56,990 --> 00:16:02,180
be helper Hatley that's a problem the

00:15:59,870 --> 00:16:04,880
solution for this is to use plugins so

00:16:02,180 --> 00:16:07,850
if you use the NS plug-in you can

00:16:04,880 --> 00:16:09,440
specify a network device and all the

00:16:07,850 --> 00:16:12,350
tests will flow through this network

00:16:09,440 --> 00:16:15,050
device so you install the TC action on a

00:16:12,350 --> 00:16:16,910
specific device and this in this way you

00:16:15,050 --> 00:16:21,440
will be testing to others am i planning

00:16:16,910 --> 00:16:23,420
to test patches for drivers no I don't

00:16:21,440 --> 00:16:25,130
think it's feasible with this

00:16:23,420 --> 00:16:30,490
infrastructure just because it's too

00:16:25,130 --> 00:16:30,490
slow CGI is is the correct thing to do I

00:16:32,980 --> 00:16:51,040
know you

00:16:34,280 --> 00:16:51,040
you are famous any more questions

00:16:52,760 --> 00:17:02,839
now some extra content so to get

00:16:57,110 --> 00:17:05,419
configuration the dashboard as soon as

00:17:02,839 --> 00:17:08,089
you log in you can just put the script

00:17:05,419 --> 00:17:14,350
on the server and configure email

00:17:08,089 --> 00:17:18,199
notifications and configure the git

00:17:14,350 --> 00:17:21,140
repository for key table it was quite a

00:17:18,199 --> 00:17:24,650
key for me to find it so maybe there's a

00:17:21,140 --> 00:17:28,580
reference for somebody this is the test

00:17:24,650 --> 00:17:30,700
grid it's very easy so I just copy a

00:17:28,580 --> 00:17:33,530
minimal configuration of the camel I

00:17:30,700 --> 00:17:37,220
compile the cattle I run a filter

00:17:33,530 --> 00:17:40,520
machine with that kernel and as soon as

00:17:37,220 --> 00:17:48,169
the virtual machine terms of I grab for

00:17:40,520 --> 00:17:53,480
her results and that's it oh this is the

00:17:48,169 --> 00:17:59,030
traffic on net scared in the latest two

00:17:53,480 --> 00:18:02,299
years it's not much and that's why we

00:17:59,030 --> 00:18:08,450
can leverage on like platform to do this

00:18:02,299 --> 00:18:11,960
kind of work why did the test test test

00:18:08,450 --> 00:18:13,610
case failed because the configuration of

00:18:11,960 --> 00:18:14,419
the camera was wrong I was testing a

00:18:13,610 --> 00:18:19,100
media without

00:18:14,419 --> 00:18:21,049
compiling the support for sha Sam and so

00:18:19,100 --> 00:18:23,799
I'm a VPS persist for the failed

00:18:21,049 --> 00:18:23,799
systematic

00:18:25,890 --> 00:18:32,950
well yes it could do this so the

00:18:30,280 --> 00:18:37,620
question is does it report the death

00:18:32,950 --> 00:18:37,620
trailer to mailing list it can do this

00:18:37,800 --> 00:18:43,840
testing purposes it's better to stay to

00:18:41,980 --> 00:18:45,880
be really careful when doing this

00:18:43,840 --> 00:18:52,720
because we don't want to spam the

00:18:45,880 --> 00:19:03,450
mailing list yeah that's exactly what

00:18:52,720 --> 00:19:03,450
typically happens thank you very much

00:19:06,240 --> 00:19:09,309

YouTube URL: https://www.youtube.com/watch?v=h9OEc6CG-sM


