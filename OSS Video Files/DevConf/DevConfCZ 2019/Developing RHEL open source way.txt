Title: Developing RHEL open source way
Publication date: 2019-03-04
Playlist: DevConfCZ 2019
Description: 
	Presentation name: Developing RHEL open source way
Speaker: Luděk Šmíd
Description:  Program and project management of Red Hat Enterprise Linux (RHEL) is daunting task which provides tons of learning opportunities. RHEL is unique because we use Open Source as the way how to develop and maintain it.

I work for more than 10 years in program management team responsible for planning and delivering RHEL releases. I would like to share what the team learned what worked and what did not work as the product was getting more complex over time.
[ https://sched.co/JcmF ]
Captions: 
	00:00:05,500 --> 00:00:16,430
good morning mark always special

00:00:12,940 --> 00:00:16,730
so as my colleague said my name is Lili

00:00:16,430 --> 00:00:19,330
Schmidt

00:00:16,730 --> 00:00:22,670
I've worked in program management team I

00:00:19,330 --> 00:00:23,210
do real for mony more years than I can

00:00:22,670 --> 00:00:25,430
count

00:00:23,210 --> 00:00:29,300
I'm not sure that's good or bad how

00:00:25,430 --> 00:00:31,010
let's pretend is good before I start I

00:00:29,300 --> 00:00:35,950
would like to know how many redheads are

00:00:31,010 --> 00:00:42,020
in the room can you raise your hand okay

00:00:35,950 --> 00:00:45,730
guys so how I'll go through how we

00:00:42,020 --> 00:00:50,600
develop Braille with focus on how we

00:00:45,730 --> 00:00:54,230
focus on upstream so if you know this a

00:00:50,600 --> 00:00:55,969
lot and you don't agree with me others

00:00:54,230 --> 00:00:58,399
going to be like at least 10 minutes of

00:00:55,969 --> 00:01:01,010
questions after this one feel free to

00:00:58,399 --> 00:01:04,369
shoot at me I know I survived worse

00:01:01,010 --> 00:01:07,420
discussions but let's let's dive into it

00:01:04,369 --> 00:01:09,859
straightaway right so what I look at

00:01:07,420 --> 00:01:14,179
I'll start with was realm with some

00:01:09,859 --> 00:01:16,490
really you know basic definitions then I

00:01:14,179 --> 00:01:19,749
look on what how actually work with

00:01:16,490 --> 00:01:23,149
upstream so that's actually basically

00:01:19,749 --> 00:01:25,189
how we touch what's outside of the

00:01:23,149 --> 00:01:30,920
company how we work with the community

00:01:25,189 --> 00:01:35,119
etc then I look at how all of this

00:01:30,920 --> 00:01:38,539
actually impacts what we do and then

00:01:35,119 --> 00:01:44,020
I'll try to wrap up so let's get started

00:01:38,539 --> 00:01:48,729
so I was thinking where as to start

00:01:44,020 --> 00:01:52,009
defining rel and micros open source

00:01:48,729 --> 00:01:53,659
distribution right so I started you know

00:01:52,009 --> 00:01:55,669
what's actually an open source software

00:01:53,659 --> 00:01:57,259
and you know what I was doing the

00:01:55,669 --> 00:02:00,859
researching of Wikipedia is a great

00:01:57,259 --> 00:02:05,419
source of definitions so I use this one

00:02:00,859 --> 00:02:08,619
and for me it was a great refresher how

00:02:05,419 --> 00:02:11,090
actually the open source is defined and

00:02:08,619 --> 00:02:13,030
don't forget it open source software is

00:02:11,090 --> 00:02:15,650
just a special case of open source

00:02:13,030 --> 00:02:19,690
there's a another theorem in wicked

00:02:15,650 --> 00:02:22,640
there and it's basically you know a way

00:02:19,690 --> 00:02:27,650
or type of computer software that allows

00:02:22,640 --> 00:02:29,599
sharing between users the other piece I

00:02:27,650 --> 00:02:33,500
was looking at is how you can actually

00:02:29,599 --> 00:02:35,569
make money on something that's that's

00:02:33,500 --> 00:02:39,500
for free right everybody can download it

00:02:35,569 --> 00:02:41,360
compile it run aids deployed etc and

00:02:39,500 --> 00:02:46,250
when I was looking through articles I

00:02:41,360 --> 00:02:49,700
found four major ways that can be

00:02:46,250 --> 00:02:52,700
actually used to run company that

00:02:49,700 --> 00:02:55,970
produces open-source software

00:02:52,700 --> 00:02:57,829
so the first one is support and services

00:02:55,970 --> 00:03:01,579
that's where Red Hat is right

00:02:57,829 --> 00:03:04,129
we provide subscriptions and we provide

00:03:01,579 --> 00:03:06,409
consulting services we provide support

00:03:04,129 --> 00:03:09,470
and this is the value added that

00:03:06,409 --> 00:03:11,930
actually customers buy from us they

00:03:09,470 --> 00:03:14,690
don't buy the software they buy all the

00:03:11,930 --> 00:03:16,370
stuff around it and they pay for it on

00:03:14,690 --> 00:03:18,709
annual basis you know we have different

00:03:16,370 --> 00:03:20,930
type of cups of contract so this is what

00:03:18,709 --> 00:03:23,780
red letters know the refresher for the

00:03:20,930 --> 00:03:26,590
others so added the business be are in

00:03:23,780 --> 00:03:31,129
there's actually two or three more ways

00:03:26,590 --> 00:03:35,389
that seems to be sustainable from a long

00:03:31,129 --> 00:03:40,489
term point of view so the the next one

00:03:35,389 --> 00:03:42,590
is advertisement partnerships what you

00:03:40,489 --> 00:03:45,230
can imagine behind that is Mozilla

00:03:42,590 --> 00:03:47,060
Foundation Mozilla Corporation because

00:03:45,230 --> 00:03:49,549
what they basically do is they get in

00:03:47,060 --> 00:03:51,680
contracts with companies to positions

00:03:49,549 --> 00:03:53,629
searching services high in their list or

00:03:51,680 --> 00:03:56,599
genome setting something as a default

00:03:53,629 --> 00:04:00,549
service like no Yahoo paid Mozilla years

00:03:56,599 --> 00:04:02,959
ago almost four hundred million dollars

00:04:00,549 --> 00:04:05,629
to make Yahoo is a default search engine

00:04:02,959 --> 00:04:07,160
so there's actually another sustainable

00:04:05,629 --> 00:04:11,269
way how you can run business in open

00:04:07,160 --> 00:04:13,430
source the third one is paid additional

00:04:11,269 --> 00:04:16,840
features what I mean by that is you know

00:04:13,430 --> 00:04:22,130
and it that's a lot of company do you

00:04:16,840 --> 00:04:26,270
basically provide core of the software

00:04:22,130 --> 00:04:28,569
as an open source and then features that

00:04:26,270 --> 00:04:30,429
are interesting for enterprises and

00:04:28,569 --> 00:04:32,679
you actually charge for them this for

00:04:30,429 --> 00:04:35,949
example you know how my cycle gets

00:04:32,679 --> 00:04:37,569
funded no ordered all the distributed

00:04:35,949 --> 00:04:40,509
database stuff you know you can get that

00:04:37,569 --> 00:04:43,330
for free and there's some conflict in

00:04:40,509 --> 00:04:45,339
there because basically you know by open

00:04:43,330 --> 00:04:48,129
source in just part of the product you

00:04:45,339 --> 00:04:50,529
get sometimes to the conflict with

00:04:48,129 --> 00:04:52,089
communities as people you know may

00:04:50,529 --> 00:04:54,399
contribute features that are part of

00:04:52,089 --> 00:04:56,439
your proprietary offering and I know

00:04:54,399 --> 00:04:58,809
there can be pretty bad clashes between

00:04:56,439 --> 00:05:02,740
the community and the company behind the

00:04:58,809 --> 00:05:06,909
software and then software is a service

00:05:02,740 --> 00:05:10,389
that's a model that WordPress uses know

00:05:06,909 --> 00:05:12,520
you can get WordPress as a open source

00:05:10,389 --> 00:05:14,740
content management system is tiles on

00:05:12,520 --> 00:05:17,379
your server they'll run it you know

00:05:14,740 --> 00:05:19,800
charges right but if you want to avoid

00:05:17,379 --> 00:05:22,719
all the administration tasks and just

00:05:19,800 --> 00:05:25,089
use the blogging services you go to

00:05:22,719 --> 00:05:27,789
wordpress.com you pay some annual fee

00:05:25,089 --> 00:05:32,610
and they maintain the service for you so

00:05:27,789 --> 00:05:37,360
this like that's the last from the

00:05:32,610 --> 00:05:39,430
sustainable I found like 14 more no from

00:05:37,360 --> 00:05:42,459
Kickstarter telling the selling t-shirts

00:05:39,430 --> 00:05:44,680
to pay what you want I know all of that

00:05:42,459 --> 00:05:46,389
but you know I couldn't find any

00:05:44,680 --> 00:05:49,029
evidence that this is something you can

00:05:46,389 --> 00:05:51,339
run a company on because like t-shirts

00:05:49,029 --> 00:05:55,169
eventually you know you sell it to all

00:05:51,339 --> 00:05:59,649
the users you have until you are done so

00:05:55,169 --> 00:06:01,029
this is to understand what was the open

00:05:59,649 --> 00:06:05,019
source and what could be the business

00:06:01,029 --> 00:06:07,300
models behind it and were rallies then

00:06:05,019 --> 00:06:09,550
larell instantaneous distribution so bla

00:06:07,300 --> 00:06:11,589
this is about one more definition what

00:06:09,550 --> 00:06:14,349
the distribution is and again wikipedia

00:06:11,589 --> 00:06:15,849
no you can read through it but you know

00:06:14,349 --> 00:06:19,419
word connects to open source is actually

00:06:15,849 --> 00:06:20,229
the this paragraph that actually says

00:06:19,419 --> 00:06:23,199
that typically

00:06:20,229 --> 00:06:25,629
Arlen's distribution includes open

00:06:23,199 --> 00:06:28,509
source software and free software that

00:06:25,629 --> 00:06:33,969
are available both as binaries and as a

00:06:28,509 --> 00:06:37,059
source code so based on all of this you

00:06:33,969 --> 00:06:38,649
you now know or refreshed you know it's

00:06:37,059 --> 00:06:40,960
easy to say a Red Hat Enterprise Linux

00:06:38,649 --> 00:06:43,460
is a enterprise directly

00:06:40,960 --> 00:06:45,290
distribution with support and service

00:06:43,460 --> 00:06:48,170
business model right that's a very short

00:06:45,290 --> 00:06:50,960
definition but that's only one way how

00:06:48,170 --> 00:06:53,660
to look at well it just gives you the

00:06:50,960 --> 00:06:58,300
what's the business behind it how rare

00:06:53,660 --> 00:07:00,740
looks but it doesn't give you any other

00:06:58,300 --> 00:07:04,910
dimension of railways and rel is like a

00:07:00,740 --> 00:07:07,910
huge beast what I mean by huge it it is

00:07:04,910 --> 00:07:10,910
something that's big and when I was

00:07:07,910 --> 00:07:13,730
thinking how to show scale of rel I was

00:07:10,910 --> 00:07:19,700
thinking hmm so one way how to look at

00:07:13,730 --> 00:07:21,920
it is how many source rpms we had we

00:07:19,700 --> 00:07:25,300
used to build a server version of the

00:07:21,920 --> 00:07:28,820
system and the source rpm is basically

00:07:25,300 --> 00:07:30,770
like you could make it equal to one

00:07:28,820 --> 00:07:32,990
upstream project that's being packaged

00:07:30,770 --> 00:07:38,510
in a way that you know we can distribute

00:07:32,990 --> 00:07:43,820
it so this went from like 900 in like

00:07:38,510 --> 00:07:54,530
2006 for 10 advanced server through 1400

00:07:43,820 --> 00:07:58,669
that's 5:11 to 1900 at 6:10 to 2200 in

00:07:54,530 --> 00:08:01,880
row 7 6 last fall and you know 800 beta

00:07:58,669 --> 00:08:05,720
had a little bit over that so that shows

00:08:01,880 --> 00:08:07,970
you what we are dealing with in terms of

00:08:05,720 --> 00:08:11,060
how many projects we need to integrate

00:08:07,970 --> 00:08:13,250
together to work as one piece of

00:08:11,060 --> 00:08:16,160
software because customers don't care

00:08:13,250 --> 00:08:17,990
about this package or that package they

00:08:16,160 --> 00:08:21,320
do care about the functionality that the

00:08:17,990 --> 00:08:25,250
whole thing provides so that actually

00:08:21,320 --> 00:08:27,770
tells the story of how we were getting

00:08:25,250 --> 00:08:31,150
bigger and bigger and bigger in terms of

00:08:27,770 --> 00:08:34,669
complexity we have to deal with right

00:08:31,150 --> 00:08:36,349
but that's just just one dimension can

00:08:34,669 --> 00:08:40,219
Brendan I can give you a link to those

00:08:36,349 --> 00:08:42,860
data no problems and there is one more

00:08:40,219 --> 00:08:45,230
slider if you create it and that's this

00:08:42,860 --> 00:08:50,040
one and you know the numbers are small

00:08:45,230 --> 00:08:53,490
so those are years this is

00:08:50,040 --> 00:08:56,130
five thousand ten fifteen and twenty

00:08:53,490 --> 00:08:58,830
thousand and what I should looked at his

00:08:56,130 --> 00:09:00,900
stuff up we can measure at reddit and

00:08:58,830 --> 00:09:07,290
this is how buck how many bucks be

00:09:00,900 --> 00:09:09,090
closed every single year 4l and so you

00:09:07,290 --> 00:09:13,500
can see that you know it went through

00:09:09,090 --> 00:09:16,470
relatively small numbers in 2006-2007 to

00:09:13,500 --> 00:09:19,650
something that's like very close to ten

00:09:16,470 --> 00:09:23,280
thousand a year in past couple of years

00:09:19,650 --> 00:09:27,780
and if you look at these spikes this is

00:09:23,280 --> 00:09:30,180
just a luck that we may may manage to

00:09:27,780 --> 00:09:32,070
release two minor versions in one year

00:09:30,180 --> 00:09:34,200
so that's white otherwise it would be

00:09:32,070 --> 00:09:36,000
spread out roughly evenly you can see

00:09:34,200 --> 00:09:42,150
that this is basically double of this

00:09:36,000 --> 00:09:44,490
this one and if you recall I said this

00:09:42,150 --> 00:09:49,380
is just minor versions so this doesn't

00:09:44,490 --> 00:09:52,110
show five or six oh seven or eight or

00:09:49,380 --> 00:09:54,870
work at all because that works actually

00:09:52,110 --> 00:09:57,510
happening mostly in upstream confederal

00:09:54,870 --> 00:09:59,670
we don't measure it in-house and they

00:09:57,510 --> 00:10:02,660
were skewed and the numbers anyway but

00:09:59,670 --> 00:10:05,250
you know for me this is terrifying view

00:10:02,660 --> 00:10:10,740
this is how much me crank through the

00:10:05,250 --> 00:10:12,710
system every single year and you know

00:10:10,740 --> 00:10:16,110
the other pieces as you remember how the

00:10:12,710 --> 00:10:17,760
number of packages grew over time you

00:10:16,110 --> 00:10:19,830
can actually reflect that in the number

00:10:17,760 --> 00:10:24,890
of bucks we fixed because this is rough

00:10:19,830 --> 00:10:26,490
four five six seven is one that's a

00:10:24,890 --> 00:10:30,990
software collections

00:10:26,490 --> 00:10:33,840
that's an offering on top of rel so

00:10:30,990 --> 00:10:39,240
nobody's running away that's good

00:10:33,840 --> 00:10:42,560
so if you have all this in minds how

00:10:39,240 --> 00:10:45,090
actually we work with upstream right and

00:10:42,560 --> 00:10:47,790
last definition I promise

00:10:45,090 --> 00:10:52,830
I was looking what upstream is so again

00:10:47,790 --> 00:10:54,690
Wikipedia just refresh the memories so

00:10:52,830 --> 00:10:56,700
it's basically you know it refers to a

00:10:54,690 --> 00:11:00,360
direction towards the original authors

00:10:56,700 --> 00:11:03,300
or maintained errs so when we say you

00:11:00,360 --> 00:11:05,010
know I sent patch upstream I know we

00:11:03,300 --> 00:11:06,660
basically sent patch of where I took the

00:11:05,010 --> 00:11:09,960
software from it couldn't be Apache

00:11:06,660 --> 00:11:11,750
foundation foundation GNU org or kernel

00:11:09,960 --> 00:11:17,100
etc right

00:11:11,750 --> 00:11:18,690
so having refreshed that I was thinking

00:11:17,100 --> 00:11:20,520
about when we worked with our team

00:11:18,690 --> 00:11:23,910
they're actually two types of

00:11:20,520 --> 00:11:27,150
interactions the first one is how we

00:11:23,910 --> 00:11:31,460
actually keep up with upstream and what

00:11:27,150 --> 00:11:34,620
I mean by that is this red head hurts

00:11:31,460 --> 00:11:38,550
like rel has hundreds and hundreds of

00:11:34,620 --> 00:11:42,930
engineers behind it as a product but

00:11:38,550 --> 00:11:45,930
thing about to 3,000 packages we get

00:11:42,930 --> 00:11:49,860
into the system right it's a power play

00:11:45,930 --> 00:11:52,290
that doesn't go in our favor at all so

00:11:49,860 --> 00:11:54,540
we need to have a ways how to keep up

00:11:52,290 --> 00:11:58,320
with what's happening out there

00:11:54,540 --> 00:12:00,150
and where we actually don't have too

00:11:58,320 --> 00:12:04,020
much control about what's going on and

00:12:00,150 --> 00:12:06,450
the answer to this is fedora

00:12:04,020 --> 00:12:10,050
right I mean it's probably a common

00:12:06,450 --> 00:12:13,320
knowledge in the room you know there's

00:12:10,050 --> 00:12:16,260
like thousands of upstream projects then

00:12:13,320 --> 00:12:20,970
you know we go that all gets integrated

00:12:16,260 --> 00:12:23,670
in fedora and you know why I say

00:12:20,970 --> 00:12:25,920
integrated because you know one of the

00:12:23,670 --> 00:12:28,650
main goals for distribution is actually

00:12:25,920 --> 00:12:31,380
making sure it provides a coherent user

00:12:28,650 --> 00:12:34,680
experience so the integration is the key

00:12:31,380 --> 00:12:36,470
piece the distribution does integration

00:12:34,680 --> 00:12:40,200
of all the pieces so it works together

00:12:36,470 --> 00:12:42,570
and so there's a lot of integration work

00:12:40,200 --> 00:12:44,180
happening in federal project that's

00:12:42,570 --> 00:12:45,470
being sponsored by Red Hat

00:12:44,180 --> 00:12:48,800
and additionally when you want to look

00:12:45,470 --> 00:12:50,750
where Hara is heading this is the place

00:12:48,800 --> 00:12:55,040
there's no other place you can have a

00:12:50,750 --> 00:12:57,800
look and you know from time to table for

00:12:55,040 --> 00:13:00,830
every three four years we pick one

00:12:57,800 --> 00:13:03,320
federal version and we make a rail out

00:13:00,830 --> 00:13:04,790
of it so this is really true that you

00:13:03,320 --> 00:13:09,800
know most of the development happens

00:13:04,790 --> 00:13:11,990
here and the rel is basically using

00:13:09,800 --> 00:13:15,050
federal job as upstream and further us

00:13:11,990 --> 00:13:20,120
using all the projects out there as

00:13:15,050 --> 00:13:23,030
upstream and the way this goes you know

00:13:20,120 --> 00:13:25,970
rel leverages all the all the work that

00:13:23,030 --> 00:13:28,580
happens here the integration and testing

00:13:25,970 --> 00:13:30,320
but you know this is still not good

00:13:28,580 --> 00:13:34,430
enough for enterprise customers to

00:13:30,320 --> 00:13:38,030
deploy in production environment this

00:13:34,430 --> 00:13:39,950
picture looks simple in real life it's a

00:13:38,030 --> 00:13:43,190
little bit more complicated because

00:13:39,950 --> 00:13:46,100
there are projects like atomic host that

00:13:43,190 --> 00:13:48,440
were initially developed here and then

00:13:46,100 --> 00:13:50,990
moved into fedora and then you know the

00:13:48,440 --> 00:13:52,760
whole of all what was straightened up to

00:13:50,990 --> 00:13:58,820
make sure like most of the stuff happens

00:13:52,760 --> 00:14:01,700
here before getting back to rural there

00:13:58,820 --> 00:14:03,950
are a couple of basic principles when we

00:14:01,700 --> 00:14:07,970
work with upstream and the number one

00:14:03,950 --> 00:14:10,820
one one is upstream first policy what

00:14:07,970 --> 00:14:14,090
does it mean is when we develop a patch

00:14:10,820 --> 00:14:17,870
a feature something we need to make sure

00:14:14,090 --> 00:14:20,360
it gets integrated in an upstream

00:14:17,870 --> 00:14:23,150
project and there is a really pragmatic

00:14:20,360 --> 00:14:26,570
reason behind that and that reason is

00:14:23,150 --> 00:14:30,350
that if we get all the cold into

00:14:26,570 --> 00:14:32,690
upstream the next time we take the

00:14:30,350 --> 00:14:35,660
source code we get all those patches

00:14:32,690 --> 00:14:38,300
with it so we don't carry the burden of

00:14:35,660 --> 00:14:40,460
maintaining everything in-house because

00:14:38,300 --> 00:14:43,640
if you know we couldn't scale the way so

00:14:40,460 --> 00:14:47,930
we're making sure that as much as we do

00:14:43,640 --> 00:14:52,460
gets accepted and we can actually then

00:14:47,930 --> 00:14:56,180
work with that later on the other piece

00:14:52,460 --> 00:14:57,440
is influencing upstream and I know in my

00:14:56,180 --> 00:14:58,019
world the curve when you look at the

00:14:57,440 --> 00:15:02,389
cross

00:14:58,019 --> 00:15:05,489
/ those guys control what they do right

00:15:02,389 --> 00:15:05,999
in open source world that that's not

00:15:05,489 --> 00:15:09,959
true

00:15:05,999 --> 00:15:12,540
so we cannot tell Apache foundation do

00:15:09,959 --> 00:15:15,929
this because we want you to do it that

00:15:12,540 --> 00:15:19,459
that wouldn't fly right now all we can

00:15:15,929 --> 00:15:22,249
do is actually influence them and

00:15:19,459 --> 00:15:26,309
influencing happens through developers

00:15:22,249 --> 00:15:28,139
so when it matters for at hat we do make

00:15:26,309 --> 00:15:30,749
sure that there are developers behind

00:15:28,139 --> 00:15:33,779
what matters and those developers are

00:15:30,749 --> 00:15:36,749
talking with upstream making sure that

00:15:33,779 --> 00:15:38,399
you know we'll get our stuff in maybe we

00:15:36,749 --> 00:15:42,299
don't get what we want but we get as

00:15:38,399 --> 00:15:44,819
close as we can and you know I wanted to

00:15:42,299 --> 00:15:46,980
also mention rebasing vs. Apache because

00:15:44,819 --> 00:15:51,239
it goes back to the obscene first policy

00:15:46,980 --> 00:15:54,360
you know when we deciding how to fix a

00:15:51,239 --> 00:16:00,179
problem inside very often the fix is

00:15:54,360 --> 00:16:02,850
already out there and there's a like

00:16:00,179 --> 00:16:05,850
decision to make if to take just that

00:16:02,850 --> 00:16:09,869
one piece know a couple of lines of code

00:16:05,850 --> 00:16:11,189
or if you take the whole new version and

00:16:09,869 --> 00:16:13,920
that's a decision that's actually

00:16:11,189 --> 00:16:16,949
happening on the front lines of the

00:16:13,920 --> 00:16:18,869
engineering like every now and then like

00:16:16,949 --> 00:16:20,459
I would say almost every day but there

00:16:18,869 --> 00:16:21,740
will be a little bit overstatement but

00:16:20,459 --> 00:16:24,449
you know it happens pretty frequently

00:16:21,740 --> 00:16:28,290
and this is also influencing how we work

00:16:24,449 --> 00:16:30,749
with upstream because sometimes upstream

00:16:28,290 --> 00:16:32,790
moves way too fast for us to keep up

00:16:30,749 --> 00:16:35,100
with it especially you know when we need

00:16:32,790 --> 00:16:37,410
to freeze our the features

00:16:35,100 --> 00:16:42,660
so sometimes we back port stuff and

00:16:37,410 --> 00:16:45,629
sometimes we keep up with upstream so

00:16:42,660 --> 00:16:47,399
that was how we keep up how we make sure

00:16:45,629 --> 00:16:49,139
that you know whatever happens out there

00:16:47,399 --> 00:16:51,329
with our wrong control you know we can

00:16:49,139 --> 00:16:54,480
use it we can actually ship it to our

00:16:51,329 --> 00:16:57,329
customers the other thing how I know

00:16:54,480 --> 00:17:00,899
what we deal with is actually how we

00:16:57,329 --> 00:17:05,100
drive the change and when I was thinking

00:17:00,899 --> 00:17:07,120
about this internet is full of

00:17:05,100 --> 00:17:11,079
controversial federal federal

00:17:07,120 --> 00:17:14,199
just google it you'll find like articles

00:17:11,079 --> 00:17:19,540
back from 2011 2010 when federal did

00:17:14,199 --> 00:17:22,089
something community didn't like so I was

00:17:19,540 --> 00:17:24,819
thinking just actually like free buckets

00:17:22,089 --> 00:17:29,130
when we drive the features to the

00:17:24,819 --> 00:17:31,630
upstream so one is it's relatively easy

00:17:29,130 --> 00:17:34,750
right there are upstream communities

00:17:31,630 --> 00:17:37,480
maybe have really good cooperation with

00:17:34,750 --> 00:17:39,160
really good relationships with I named

00:17:37,480 --> 00:17:41,110
couple of those like Colonel that's

00:17:39,160 --> 00:17:42,700
along like let's Evergreen you know we

00:17:41,110 --> 00:17:44,830
are very heavily invested there

00:17:42,700 --> 00:17:46,840
kubera t that's a little bit different

00:17:44,830 --> 00:17:49,870
example from the last two years or major

00:17:46,840 --> 00:17:51,400
companies including Google us are

00:17:49,870 --> 00:17:53,950
collaborating together to create

00:17:51,400 --> 00:17:56,620
orchestration layer for containers and

00:17:53,950 --> 00:17:59,950
there's many and many others so this is

00:17:56,620 --> 00:18:03,700
a not as easy but relatively easy game

00:17:59,950 --> 00:18:09,160
to play well it can be also hard right

00:18:03,700 --> 00:18:12,580
I picked free because of those free are

00:18:09,160 --> 00:18:16,510
probably something you can recall like

00:18:12,580 --> 00:18:18,970
selinux most people still turned off I

00:18:16,510 --> 00:18:20,800
would even won't ask question because I

00:18:18,970 --> 00:18:25,210
would see way too many hands I have

00:18:20,800 --> 00:18:27,160
heard that I would like but from our

00:18:25,210 --> 00:18:30,400
point of view from enterprise point of

00:18:27,160 --> 00:18:33,150
view this is a must-have feature to

00:18:30,400 --> 00:18:35,679
actually be able to sell to government

00:18:33,150 --> 00:18:37,410
because this is one of the key elements

00:18:35,679 --> 00:18:40,000
to get government a government

00:18:37,410 --> 00:18:40,630
certifications like FIPS or Common

00:18:40,000 --> 00:18:43,150
Criteria

00:18:40,630 --> 00:18:45,130
without that we cannot hit public sector

00:18:43,150 --> 00:18:47,650
in North America at all that would be a

00:18:45,130 --> 00:18:50,890
huge loss from the financial point of

00:18:47,650 --> 00:18:54,040
view so this is something we do push as

00:18:50,890 --> 00:18:56,620
a company is not very well accepted it

00:18:54,040 --> 00:18:59,410
took years and years and years to get at

00:18:56,620 --> 00:19:02,860
least decent user experience and you

00:18:59,410 --> 00:19:05,429
know we still keep pushing that systemd

00:19:02,860 --> 00:19:08,830
that's another story were collected to

00:19:05,429 --> 00:19:11,800
701 you know there was a huge huge

00:19:08,830 --> 00:19:13,960
discussion know who will take this which

00:19:11,800 --> 00:19:17,679
distribution will ship it which we all

00:19:13,960 --> 00:19:18,470
not you know how how its how it sucks

00:19:17,679 --> 00:19:20,929
right

00:19:18,470 --> 00:19:22,340
and there were like strong people

00:19:20,929 --> 00:19:24,830
supporting it there are people who

00:19:22,340 --> 00:19:27,139
dislike it like it's a really

00:19:24,830 --> 00:19:30,019
controversial feature even now four

00:19:27,139 --> 00:19:32,960
years later and a team did a great job

00:19:30,019 --> 00:19:35,179
of making sure like it's a really nice

00:19:32,960 --> 00:19:37,549
piece of software to work with but there

00:19:35,179 --> 00:19:40,070
are still people like me who don't get

00:19:37,549 --> 00:19:42,080
the basics because I'm I was born so

00:19:40,070 --> 00:19:44,629
early that I still have any D in my head

00:19:42,080 --> 00:19:47,419
right so the change is hard and I don't

00:19:44,629 --> 00:19:49,940
pretend that don't free is another thing

00:19:47,419 --> 00:19:52,730
that hit a lot of users and I know there

00:19:49,940 --> 00:19:55,460
are people love in KDE or other desktop

00:19:52,730 --> 00:19:56,690
so this is maybe not that impactful but

00:19:55,460 --> 00:20:00,590
still like you know this this was a

00:19:56,690 --> 00:20:04,759
change where we had to you know we were

00:20:00,590 --> 00:20:06,919
pushing a new behavior 2 3 2 users

00:20:04,759 --> 00:20:10,250
through a software because the gun on

00:20:06,919 --> 00:20:12,379
free Ingram to control was completely

00:20:10,250 --> 00:20:16,580
different now it's much better now but

00:20:12,379 --> 00:20:18,710
you know there was a huge degradation of

00:20:16,580 --> 00:20:22,100
usability for many then going from

00:20:18,710 --> 00:20:25,149
gorgrond tube to be on free so those are

00:20:22,100 --> 00:20:27,620
examples were and we struggled we

00:20:25,149 --> 00:20:30,590
couldn't give up in some of the cases

00:20:27,620 --> 00:20:33,769
and you know it doesn't earn enough

00:20:30,590 --> 00:20:36,529
earned as many credits but there's

00:20:33,769 --> 00:20:39,860
actually third bucket and I call it it

00:20:36,529 --> 00:20:42,230
can be even harder than that and you

00:20:39,860 --> 00:20:44,059
know I pick just one example here and

00:20:42,230 --> 00:20:48,529
this is docker and this is a great

00:20:44,059 --> 00:20:50,200
example of us colliding with business

00:20:48,529 --> 00:20:53,629
objectives of a different company

00:20:50,200 --> 00:20:55,549
because the docker the company was

00:20:53,629 --> 00:20:57,950
actually fighting over patches with us

00:20:55,549 --> 00:21:00,919
which ones to take in just to reject

00:20:57,950 --> 00:21:03,440
because what red had wanted from docker

00:21:00,919 --> 00:21:05,539
as the software was different things and

00:21:03,440 --> 00:21:08,899
what doc razor company wanted from the

00:21:05,539 --> 00:21:12,049
same piece of the software great news is

00:21:08,899 --> 00:21:13,549
you know we have forking in open source

00:21:12,049 --> 00:21:17,299
world it's pretty commonly used to

00:21:13,549 --> 00:21:20,299
create you know competition you know you

00:21:17,299 --> 00:21:22,909
can work is work around this in

00:21:20,299 --> 00:21:27,159
different ways so you know we actually

00:21:22,909 --> 00:21:29,710
saw this as part of rl8 by our different

00:21:27,159 --> 00:21:31,240
to chain that actually provides the same

00:21:29,710 --> 00:21:33,549
functionality even the compatibility

00:21:31,240 --> 00:21:40,240
layer but you know we don't have to

00:21:33,549 --> 00:21:41,919
fight over patches anymore so that's how

00:21:40,240 --> 00:21:43,299
I think you know we work with upstream

00:21:41,919 --> 00:21:45,460
and you know as I said we can have a

00:21:43,299 --> 00:21:49,659
discussion later on where we were

00:21:45,460 --> 00:21:52,330
beheading then I was thinking how

00:21:49,659 --> 00:21:56,080
actually open-source impacts what we do

00:21:52,330 --> 00:21:57,149
right no it's not it always always goes

00:21:56,080 --> 00:21:59,559
both ways

00:21:57,149 --> 00:22:03,700
maybe influencing them they influence us

00:21:59,559 --> 00:22:06,490
and I use work influence because that's

00:22:03,700 --> 00:22:09,279
the key and you know there's many many

00:22:06,490 --> 00:22:13,149
many sources but you know I always use

00:22:09,279 --> 00:22:15,039
kernels a great source of showing what

00:22:13,149 --> 00:22:18,970
we do as redhead because when you look

00:22:15,039 --> 00:22:20,679
here you know we are second in like

00:22:18,970 --> 00:22:23,230
comparison by changeset you know beyond

00:22:20,679 --> 00:22:28,620
fourth-placed by compressing how many

00:22:23,230 --> 00:22:32,230
lines we changed in 420 kernel and

00:22:28,620 --> 00:22:36,309
insulin bodied a lot of what we do is a

00:22:32,230 --> 00:22:40,590
program manager I look at the number in

00:22:36,309 --> 00:22:43,809
a different way so let's pick this one

00:22:40,590 --> 00:22:46,899
seven percent right there's the several

00:22:43,809 --> 00:22:50,590
percent of code we contributed we had

00:22:46,899 --> 00:22:53,080
some control over what it does because

00:22:50,590 --> 00:22:55,090
of maybe we know you know we had to push

00:22:53,080 --> 00:22:56,679
it through the approval process of

00:22:55,090 --> 00:23:01,289
kernel community maybe we worked with

00:22:56,679 --> 00:23:05,259
Intel engineers with customers etc but

00:23:01,289 --> 00:23:08,679
93% went from cows bar and it went from

00:23:05,259 --> 00:23:10,330
very good places right AMD Intel those

00:23:08,679 --> 00:23:12,070
are provide the best guys to support

00:23:10,330 --> 00:23:16,690
their chipset so that makes a lot of

00:23:12,070 --> 00:23:19,899
sense but it also means that there was

00:23:16,690 --> 00:23:23,110
no control over what we do there so what

00:23:19,899 --> 00:23:25,090
it does is we influencing what's

00:23:23,110 --> 00:23:27,850
happening in kernel but we also have to

00:23:25,090 --> 00:23:30,220
live sometimes with what we actually get

00:23:27,850 --> 00:23:33,029
and product managers I don't have to

00:23:30,220 --> 00:23:35,860
love the term pizza we didn't order

00:23:33,029 --> 00:23:40,289
because sometimes they get stuff they

00:23:35,860 --> 00:23:40,289
may not like but they have to leave it

00:23:41,409 --> 00:23:52,549
so other things that are happening is

00:23:48,519 --> 00:23:58,279
and I also almost sorry again mean our

00:23:52,549 --> 00:24:00,919
mentioned upstream first policy so when

00:23:58,279 --> 00:24:03,730
you think about it if we try to broken

00:24:00,919 --> 00:24:06,350
everything with upstream

00:24:03,730 --> 00:24:08,929
it also means it influences us

00:24:06,350 --> 00:24:11,360
internally it can very well happen that

00:24:08,929 --> 00:24:17,059
if if you are customer of red head you

00:24:11,360 --> 00:24:20,389
say I want this fixed that we tell you

00:24:17,059 --> 00:24:22,730
I'm sorry we cannot fix this for you

00:24:20,389 --> 00:24:26,029
because it clashes with perhaps is

00:24:22,730 --> 00:24:28,399
upstream heading or maybe you know it

00:24:26,029 --> 00:24:29,990
takes us months and months because first

00:24:28,399 --> 00:24:32,330
patch gets rejected second pants get

00:24:29,990 --> 00:24:36,019
back gets rejected and it takes us some

00:24:32,330 --> 00:24:39,350
time to actually make sure that we have

00:24:36,019 --> 00:24:42,049
a solution that's satisfiable customers

00:24:39,350 --> 00:24:44,570
needs and the project we actually

00:24:42,049 --> 00:24:47,240
interact with so that's that's a pretty

00:24:44,570 --> 00:24:49,759
significant impact in some cases

00:24:47,240 --> 00:24:53,450
especially when we start looking at some

00:24:49,759 --> 00:24:57,289
controversial features the other piece

00:24:53,450 --> 00:24:59,870
that that hit us pretty well is kernel a

00:24:57,289 --> 00:25:01,519
bi or user space a bi promise

00:24:59,870 --> 00:25:04,159
modern mean is you know we're basically

00:25:01,519 --> 00:25:06,440
promising our customers if you compile

00:25:04,159 --> 00:25:08,769
something on seven one it will run on

00:25:06,440 --> 00:25:13,519
seven two seven three for some specific

00:25:08,769 --> 00:25:19,639
no list of system calls or library calls

00:25:13,519 --> 00:25:23,559
and there's not too many up streams that

00:25:19,639 --> 00:25:26,179
actually think about anything like that

00:25:23,559 --> 00:25:28,610
which actually means that we have to put

00:25:26,179 --> 00:25:31,820
a lot of effort into making sure enough

00:25:28,610 --> 00:25:35,690
in breaks as we are using newer and

00:25:31,820 --> 00:25:37,820
newer version of some packages and now

00:25:35,690 --> 00:25:39,470
there are some libraries like jalebi

00:25:37,820 --> 00:25:41,990
that actually do miracles there I know

00:25:39,470 --> 00:25:44,179
they have a mechanism how to work with

00:25:41,990 --> 00:25:47,330
it etc but elsewhere it could be a lot

00:25:44,179 --> 00:25:49,879
of work now the other piece that

00:25:47,330 --> 00:25:52,549
upstream is not thinking about at all is

00:25:49,879 --> 00:25:53,340
lifecycle right they know release new

00:25:52,549 --> 00:25:57,420
versions when they

00:25:53,340 --> 00:25:59,490
ready you know they they may drop

00:25:57,420 --> 00:26:02,460
backward comparative compatibility hold

00:25:59,490 --> 00:26:06,690
together and yet on rel we promised ten

00:26:02,460 --> 00:26:10,200
years of support so like when we shipped

00:26:06,690 --> 00:26:13,710
seven all back in 2014 we'll have to

00:26:10,200 --> 00:26:16,740
leave it until 2024 so there's a lot of

00:26:13,710 --> 00:26:20,730
time that we have to maintain this piece

00:26:16,740 --> 00:26:23,340
of software and maybe even now drop

00:26:20,730 --> 00:26:25,350
versions of packages that are in there

00:26:23,340 --> 00:26:28,290
are seven that upstream doesn't care

00:26:25,350 --> 00:26:31,620
about at all so again that's extra work

00:26:28,290 --> 00:26:34,770
we have to put into all of this to make

00:26:31,620 --> 00:26:36,570
sure that the product is usable it

00:26:34,770 --> 00:26:39,660
doesn't have any any you know major

00:26:36,570 --> 00:26:43,200
security security flaws the other piece

00:26:39,660 --> 00:26:44,640
is maintenance so very often if there is

00:26:43,200 --> 00:26:48,150
a bug fix that you know we need to

00:26:44,640 --> 00:26:51,030
develop for a very old version of a

00:26:48,150 --> 00:26:52,530
software now it goes out of our pockets

00:26:51,030 --> 00:26:57,480
right now we have people who which will

00:26:52,530 --> 00:26:59,490
have to work on it and what when I was

00:26:57,480 --> 00:27:02,370
looking how much stuff me actually solve

00:26:59,490 --> 00:27:04,500
I don't have it like I have a data I

00:27:02,370 --> 00:27:07,650
didn't want to bombard you we've ever

00:27:04,500 --> 00:27:11,520
really you know busy graph but we fix

00:27:07,650 --> 00:27:14,640
roughly 200 issues like that every

00:27:11,520 --> 00:27:18,650
single month there's a lot of work that

00:27:14,640 --> 00:27:25,970
happens just to make sure that customers

00:27:18,650 --> 00:27:25,970
can use rel as a stable operating system

00:27:26,750 --> 00:27:35,070
the other part that actually is impacted

00:27:29,610 --> 00:27:37,620
by open source is the program team and

00:27:35,070 --> 00:27:40,350
what program team is program team is a

00:27:37,620 --> 00:27:43,290
team that actually drives the planning

00:27:40,350 --> 00:27:48,480
and development of individual releases

00:27:43,290 --> 00:27:51,780
and you know at some points we figure

00:27:48,480 --> 00:27:54,710
out there's you know one team doesn't

00:27:51,780 --> 00:27:57,300
roll them all it didn't fly at all and

00:27:54,710 --> 00:28:01,020
you know we had to split and create

00:27:57,300 --> 00:28:02,700
about it depends it changes all the time

00:28:01,020 --> 00:28:03,440
like it was initially twenty now it's

00:28:02,700 --> 00:28:06,259
almost four

00:28:03,440 --> 00:28:08,690
different subsistent teams that actually

00:28:06,259 --> 00:28:10,879
handle individual technological areas

00:28:08,690 --> 00:28:13,759
like Colonel subsystem Colonel

00:28:10,879 --> 00:28:14,419
networking low-level libraries stuff

00:28:13,759 --> 00:28:19,340
like that

00:28:14,419 --> 00:28:23,299
and this actually led to a delegation of

00:28:19,340 --> 00:28:25,159
responsibilities closer to the code but

00:28:23,299 --> 00:28:27,289
my second line on the on the slide says

00:28:25,159 --> 00:28:29,570
distributed decision-making and what I

00:28:27,289 --> 00:28:35,600
mean by that of course the subsystem

00:28:29,570 --> 00:28:37,909
team contributed to that because of you

00:28:35,600 --> 00:28:40,039
know we push the decision one level over

00:28:37,909 --> 00:28:43,779
those teams are allowed like handling

00:28:40,039 --> 00:28:47,899
their own stakes but also developers

00:28:43,779 --> 00:28:49,309
have to make decisions on their own when

00:28:47,899 --> 00:28:51,529
they actually work with upstream

00:28:49,309 --> 00:28:54,559
projects there's a lot of decisions they

00:28:51,529 --> 00:28:57,590
have to make and then not every of them

00:28:54,559 --> 00:29:00,500
could be bubbled up you know deciding

00:28:57,590 --> 00:29:01,700
bubbled up so there is a lot of that's

00:29:00,500 --> 00:29:04,100
happening in the engineering

00:29:01,700 --> 00:29:07,100
organization where our engineers are

00:29:04,100 --> 00:29:09,110
actually asked to do partially product

00:29:07,100 --> 00:29:11,440
management work because of they have to

00:29:09,110 --> 00:29:13,940
brag measurement would a scale at all

00:29:11,440 --> 00:29:15,950
and the last piece that I think you know

00:29:13,940 --> 00:29:21,980
impacted rail program really

00:29:15,950 --> 00:29:26,720
significantly is speed up of the whole

00:29:21,980 --> 00:29:30,769
software world what I mean by that it

00:29:26,720 --> 00:29:33,919
was okay back in 2006 seven to do

00:29:30,769 --> 00:29:37,850
waterfall right because of like we were

00:29:33,919 --> 00:29:41,440
releasing every like six to nine months

00:29:37,850 --> 00:29:43,730
I know it was an okay pace for customers

00:29:41,440 --> 00:29:46,970
the upstream wasn't changing that

00:29:43,730 --> 00:29:51,019
frequently that's not a picture you can

00:29:46,970 --> 00:29:55,820
see today so we actually started to

00:29:51,019 --> 00:30:00,470
adopt agile but some pieces of the

00:29:55,820 --> 00:30:01,899
company can never be agile they like

00:30:00,470 --> 00:30:04,190
marketing you know they cannot deliver

00:30:01,899 --> 00:30:06,860
marketing message every week right or

00:30:04,190 --> 00:30:10,159
every two weeks so we still have to make

00:30:06,860 --> 00:30:13,129
sure that we work in waterfall fashion

00:30:10,159 --> 00:30:16,000
and the program level as an interface to

00:30:13,129 --> 00:30:19,040
other other

00:30:16,000 --> 00:30:21,410
organizations in the company or to our

00:30:19,040 --> 00:30:24,170
partners and yet using agile principles

00:30:21,410 --> 00:30:29,000
inside to make sure we can keep up with

00:30:24,170 --> 00:30:31,280
a pace of development and this is my

00:30:29,000 --> 00:30:36,070
last but one slide because when you

00:30:31,280 --> 00:30:38,510
think about it the picture I just

00:30:36,070 --> 00:30:40,280
painted is there's a lot of issues

00:30:38,510 --> 00:30:43,370
connected with open source development

00:30:40,280 --> 00:30:45,650
right leg of control people know what

00:30:43,370 --> 00:30:48,290
they want you know you have to influence

00:30:45,650 --> 00:30:51,970
which is much more time-consuming than

00:30:48,290 --> 00:30:55,760
actually ordering people to do etc and

00:30:51,970 --> 00:30:59,240
why do we do it right and I think the

00:30:55,760 --> 00:31:00,860
answer is very simple because open

00:30:59,240 --> 00:31:02,990
source is superior development model

00:31:00,860 --> 00:31:05,690
it's much better than closed source

00:31:02,990 --> 00:31:09,040
because you get collaboration you could

00:31:05,690 --> 00:31:12,080
never ever get on the close source

00:31:09,040 --> 00:31:14,570
development model especially with

00:31:12,080 --> 00:31:18,500
partners like no we interact with Intel

00:31:14,570 --> 00:31:21,740
AMD interact with HP you know a lot of

00:31:18,500 --> 00:31:24,760
companies you get transparency people

00:31:21,740 --> 00:31:27,679
can look at your code can contribute of

00:31:24,760 --> 00:31:31,280
Mumbai no looking code you get peer

00:31:27,679 --> 00:31:33,050
reviews many many open source project

00:31:31,280 --> 00:31:36,590
actually adopted release earlier is

00:31:33,050 --> 00:31:38,840
often it means like then don't wait

00:31:36,590 --> 00:31:41,929
until they have a perfect solution for

00:31:38,840 --> 00:31:44,990
everything and there is a competition

00:31:41,929 --> 00:31:47,929
like there are most of the cases for one

00:31:44,990 --> 00:31:49,820
issue one problem there is multiple

00:31:47,929 --> 00:31:51,380
solutions you can try and you can

00:31:49,820 --> 00:31:55,580
actually decide which ones actually fits

00:31:51,380 --> 00:31:57,860
best for you so I would like to wrap up

00:31:55,580 --> 00:32:00,410
with it's not easy to do open source

00:31:57,860 --> 00:32:03,290
development is not easy to run business

00:32:00,410 --> 00:32:08,120
in open source company but is definitely

00:32:03,290 --> 00:32:11,480
worth it because our customers are

00:32:08,120 --> 00:32:14,150
actually voting by buying the software

00:32:11,480 --> 00:32:17,600
from us so and we've dead I would like

00:32:14,150 --> 00:32:22,540
to wrap up and there's roughly ten time

00:32:17,600 --> 00:32:26,260
ten minutes for questions 15 minutes

00:32:22,540 --> 00:32:26,260
okay who wants to start

00:32:33,880 --> 00:32:40,930
Brenden smiling I'm not sure if that

00:32:36,020 --> 00:32:40,930
means he wants to ask something or I

00:32:43,600 --> 00:32:48,830
think okay so thanks for your attention

00:32:46,640 --> 00:32:50,210
hopefully it was useful for you and then

00:32:48,830 --> 00:32:52,760
if you need anything I'll be in the

00:32:50,210 --> 00:32:53,140
corridor crying to me as you wish thanks

00:32:52,760 --> 00:33:01,369
Alan

00:32:53,140 --> 00:33:01,369

YouTube URL: https://www.youtube.com/watch?v=12p1XKhuZuA


