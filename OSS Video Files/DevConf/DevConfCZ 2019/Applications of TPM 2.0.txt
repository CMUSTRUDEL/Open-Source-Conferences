Title: Applications of TPM 2.0
Publication date: 2019-03-04
Playlist: DevConfCZ 2019
Description: 
	Presentation name: Applications of TPM 2.0
Speakers: Javier Martinez Canillas, Russell Doty
Description:  Now that a complete TPM 2.0 infrastructure has been delivered in Linux, the focus is moving to building applications that benefit from TPM security. This session will cover the initial application of TPM in NBDE and explore other applications that can be built with TPM. Topics include protecting secrets with the TPM, measurement of the system and using system information to seal secrets, Trusted Boot, TPM signing of software patchesand protection of Edge systems. We will also address the use of trusted processing enclaves and complete system protection using TPM with trusted processing enclaves. Bonus topic: TPM secured Blockchains!
[ ]
Captions: 
	00:00:05,510 --> 00:00:11,310
good afternoon everyone I'm Russ Jowell

00:00:09,360 --> 00:00:14,330
product man we're in the real business

00:00:11,310 --> 00:00:18,060
unit working with emergent technologies

00:00:14,330 --> 00:00:21,060
I'm Javier Martinez software engineer

00:00:18,060 --> 00:00:22,679
working on the good Lord our team so if

00:00:21,060 --> 00:00:25,829
their machine fails to boot probably I

00:00:22,679 --> 00:00:28,619
am someone to blame and what we'd like

00:00:25,829 --> 00:00:31,079
to do today is talk about a hardware

00:00:28,619 --> 00:00:33,060
root of trust and specifically about

00:00:31,079 --> 00:00:35,310
doing useful things I know what the

00:00:33,060 --> 00:00:38,640
hardware would have trust this is our

00:00:35,310 --> 00:00:40,470
second year we're back and last year we

00:00:38,640 --> 00:00:42,960
were talking about technology we were

00:00:40,470 --> 00:00:45,360
talking about unique things that can be

00:00:42,960 --> 00:00:47,190
done some of the new technology and we

00:00:45,360 --> 00:00:48,780
were basically here with the message of

00:00:47,190 --> 00:00:52,380
it's real this time

00:00:48,780 --> 00:00:54,630
trustus well we're back it's real this

00:00:52,380 --> 00:00:56,940
time and we've got some solid things to

00:00:54,630 --> 00:00:59,460
show last year we were doing technology

00:00:56,940 --> 00:01:03,390
preview of the trusted platform module

00:00:59,460 --> 00:01:06,000
in fedora we were short a preview of the

00:01:03,390 --> 00:01:08,550
network now disk encryption using the

00:01:06,000 --> 00:01:11,550
hardware root of trust again in fedora

00:01:08,550 --> 00:01:15,810
and talking about wonderful future

00:01:11,550 --> 00:01:19,260
so we from talks like this before so

00:01:15,810 --> 00:01:21,750
what's happened since then since the

00:01:19,260 --> 00:01:24,180
last DEFCON Network about disk

00:01:21,750 --> 00:01:28,320
encryption with TPM 2.0 support has been

00:01:24,180 --> 00:01:30,390
shipping in fedora in rel 7.6 and will

00:01:28,320 --> 00:01:33,600
be included in the future version of rel

00:01:30,390 --> 00:01:36,260
who cannot be named yet some of the

00:01:33,600 --> 00:01:39,930
recent developments are we have added

00:01:36,260 --> 00:01:41,940
measurement of the boot path to the

00:01:39,930 --> 00:01:46,380
system and we'll be talking about that

00:01:41,940 --> 00:01:46,970
both why you care what it is and how it

00:01:46,380 --> 00:01:49,380
works

00:01:46,970 --> 00:01:51,990
we actually have customers using this

00:01:49,380 --> 00:01:55,619
their customers using the capabilities

00:01:51,990 --> 00:01:58,500
of the TPM to to protect another Secrets

00:01:55,619 --> 00:02:01,200
variety of Secrets notably keys of

00:01:58,500 --> 00:02:03,210
different parts but they're also some

00:02:01,200 --> 00:02:06,299
people even using the advanced sealing

00:02:03,210 --> 00:02:08,759
capabilities what are the traditional

00:02:06,299 --> 00:02:10,860
challenges with using the hardware

00:02:08,759 --> 00:02:12,850
Riddick trust has been that they've been

00:02:10,860 --> 00:02:14,440
very difficult to program and

00:02:12,850 --> 00:02:17,460
you have no idea for it to get started

00:02:14,440 --> 00:02:20,320
so we're going to help you with that

00:02:17,460 --> 00:02:23,920
we're going to be talking about signing

00:02:20,320 --> 00:02:25,540
with TPM 2 and these slides are falling

00:02:23,920 --> 00:02:31,270
off the bottom so we're missing some of

00:02:25,540 --> 00:02:33,400
the other really important points so as

00:02:31,270 --> 00:02:35,530
he said correctly updating the

00:02:33,400 --> 00:02:37,180
resolution a little bit of background

00:02:35,530 --> 00:02:40,510
would be useful

00:02:37,180 --> 00:02:42,720
TPM the trusted platform module has been

00:02:40,510 --> 00:02:44,950
around for about twelve or fifteen years

00:02:42,720 --> 00:02:49,180
there are two versions of it

00:02:44,950 --> 00:02:52,270
the initial broadly-based was TPM 1.2 of

00:02:49,180 --> 00:02:55,500
which billions are shipped hundreds are

00:02:52,270 --> 00:02:57,730
used so there's some excellent

00:02:55,500 --> 00:02:59,380
capabilities as he came one got two but

00:02:57,730 --> 00:03:03,810
they're almost theoretical because they

00:02:59,380 --> 00:03:07,240
are so bloody difficult to use TPM 2

00:03:03,810 --> 00:03:09,430
built on the foundation of TPM 1.2 it

00:03:07,240 --> 00:03:13,240
provides additional capabilities notably

00:03:09,430 --> 00:03:14,830
at crypto agility but it also has a set

00:03:13,240 --> 00:03:16,540
of characteristics that make it

00:03:14,830 --> 00:03:18,550
dramatically easier to use and

00:03:16,540 --> 00:03:22,930
dramatically more useful and we'll be

00:03:18,550 --> 00:03:28,270
talking about those in here as part of

00:03:22,930 --> 00:03:30,910
TPM 2 there are two user space libraries

00:03:28,270 --> 00:03:33,220
that have emerged the early work for

00:03:30,910 --> 00:03:37,120
user space library to work with TPM 2

00:03:33,220 --> 00:03:39,730
was done by IBM and was a IBM

00:03:37,120 --> 00:03:43,510
development the trusted computing group

00:03:39,730 --> 00:03:46,360
TCG the developers of TPM specifications

00:03:43,510 --> 00:03:49,780
including 1.2 and 2.0 have developed

00:03:46,360 --> 00:03:51,700
their own user space specification which

00:03:49,780 --> 00:03:54,820
we believe will be the standard user

00:03:51,700 --> 00:03:59,770
space interface for working with TPM 2

00:03:54,820 --> 00:04:00,190
and this has been implemented give them

00:03:59,770 --> 00:04:02,260
credit

00:04:00,190 --> 00:04:05,560
Intel has done the majority of work and

00:04:02,260 --> 00:04:09,000
implemented the TCG 2.0 user space

00:04:05,560 --> 00:04:12,970
specification we are shipping both the

00:04:09,000 --> 00:04:16,989
IBM TPM to use of space and the TCG

00:04:12,970 --> 00:04:17,470
Intel TPM users face in fedora and in

00:04:16,989 --> 00:04:20,799
realm

00:04:17,470 --> 00:04:23,750
however our primary focus in developing

00:04:20,799 --> 00:04:28,900
tools and applications is using the

00:04:23,750 --> 00:04:32,420
t CNG user interface so in summary the

00:04:28,900 --> 00:04:36,140
focus and RedHat around doing useful

00:04:32,420 --> 00:04:42,460
things with TPM is based on TPM 2.0

00:04:36,140 --> 00:04:46,550
hardware and API and the TCG users face

00:04:42,460 --> 00:04:47,870
another interesting note since this may

00:04:46,550 --> 00:04:51,770
actually fit in with the theme of

00:04:47,870 --> 00:04:55,670
ease-of-use is it there is a fairly

00:04:51,770 --> 00:04:58,760
widely used interface called pkcs 11 so

00:04:55,670 --> 00:05:01,700
pkcs 11 is intended to provide a

00:04:58,760 --> 00:05:04,490
platform independent interface to a

00:05:01,700 --> 00:05:06,110
variety of security tokens so it's

00:05:04,490 --> 00:05:07,910
trying to provide a standardized

00:05:06,110 --> 00:05:10,840
interface that can be used across a

00:05:07,910 --> 00:05:14,570
range of devices basic capabilities

00:05:10,840 --> 00:05:17,210
would be implemented on smart cards on

00:05:14,570 --> 00:05:21,730
hardware security modules anyone here

00:05:17,210 --> 00:05:24,169
have a Yubikey you be keys and it gives

00:05:21,730 --> 00:05:26,180
it has a fairly basic set of

00:05:24,169 --> 00:05:29,300
capabilities that address the use case

00:05:26,180 --> 00:05:32,510
of creating modifying and deleting keys

00:05:29,300 --> 00:05:35,510
and tokens this weekly things like RSA

00:05:32,510 --> 00:05:38,600
keys x5 about 5 over 9 certificates as

00:05:35,510 --> 00:05:43,630
so forth and is very widely used by

00:05:38,600 --> 00:05:47,560
certificate authorities so this is

00:05:43,630 --> 00:05:53,630
useful and there's work underway to

00:05:47,560 --> 00:05:57,050
provide a pkcs 11 interface to TPM now

00:05:53,630 --> 00:06:00,919
this would be to a subset the relatively

00:05:57,050 --> 00:06:04,040
small subset of TPM capabilities but her

00:06:00,919 --> 00:06:07,460
useful and important substance also note

00:06:04,040 --> 00:06:12,350
that the pkcs 11 work is building on top

00:06:07,460 --> 00:06:14,780
of the TPM user space the TCG user space

00:06:12,350 --> 00:06:20,810
stack so it's not a question of whether

00:06:14,780 --> 00:06:24,500
to use the native TPM API or to use pkcs

00:06:20,810 --> 00:06:27,410
11 it's which is the best choice or the

00:06:24,500 --> 00:06:30,670
specific problem you're working with an

00:06:27,410 --> 00:06:33,790
example of this is that

00:06:30,670 --> 00:06:37,020
something a user application you know

00:06:33,790 --> 00:06:40,300
TLS is a entirely non random example and

00:06:37,020 --> 00:06:42,400
the pkcs lenten interface would allow

00:06:40,300 --> 00:06:45,490
you to use the same interface thoughts

00:06:42,400 --> 00:06:48,340
mark parts to talk to the gnome keyring

00:06:45,490 --> 00:06:51,340
demon and talk to trusted platform

00:06:48,340 --> 00:06:54,070
modules and so it's one of the things

00:06:51,340 --> 00:06:58,240
that is being worked on to try to make

00:06:54,070 --> 00:07:00,790
TPM more useful now if anyone is

00:06:58,240 --> 00:07:05,020
interested in actually developing

00:07:00,790 --> 00:07:07,810
software that uses TPM 2 we have a cheat

00:07:05,020 --> 00:07:10,690
sheet for you traditionally at the most

00:07:07,810 --> 00:07:14,110
difficult space our place getting

00:07:10,690 --> 00:07:17,650
started with using these things is where

00:07:14,110 --> 00:07:19,420
to get started what do I need to setup

00:07:17,650 --> 00:07:21,430
what do I need to initialize what do I

00:07:19,420 --> 00:07:24,190
need to interact with it what is a mess

00:07:21,430 --> 00:07:27,400
how do I know if it's working what do I

00:07:24,190 --> 00:07:29,770
do when I'm counting my head against the

00:07:27,400 --> 00:07:31,660
brick wall trying to get something that

00:07:29,770 --> 00:07:34,570
should be obvious to work and it's just

00:07:31,660 --> 00:07:39,160
not cooperating

00:07:34,570 --> 00:07:43,480
we hear you and there is work that as a

00:07:39,160 --> 00:07:47,710
side effect is really benefiting people

00:07:43,480 --> 00:07:49,720
who need the capabilities TPM no don't

00:07:47,710 --> 00:07:51,100
know quite where to get started we're

00:07:49,720 --> 00:07:53,050
going to be talking about network around

00:07:51,100 --> 00:07:57,190
disk encryption and specifically the

00:07:53,050 --> 00:07:59,320
clevis module and it turns out that this

00:07:57,190 --> 00:08:03,100
almost a side effect of the problem it's

00:07:59,320 --> 00:08:06,610
intended to solve clevis is a crypto

00:08:03,100 --> 00:08:09,610
framework with some very useful

00:08:06,610 --> 00:08:11,740
capabilities it has discernible

00:08:09,610 --> 00:08:15,310
flexibility we've seen more about that

00:08:11,740 --> 00:08:18,100
and a number of the clutters functions

00:08:15,310 --> 00:08:21,400
have been implemented to use TPM as well

00:08:18,100 --> 00:08:23,620
as the Tang server for the backend and

00:08:21,400 --> 00:08:26,590
other work is being explored for the

00:08:23,620 --> 00:08:28,750
future so what this means is that the

00:08:26,590 --> 00:08:31,420
clevis codebase is a really good

00:08:28,750 --> 00:08:33,830
starting point for working with keiki a

00:08:31,420 --> 00:08:35,690
clevis has gone in

00:08:33,830 --> 00:08:37,729
implemented the most common functions

00:08:35,690 --> 00:08:41,180
that you'd be interested in working with

00:08:37,729 --> 00:08:43,219
TPM so there's code sitting there ready

00:08:41,180 --> 00:08:45,830
to be stole I mean there is a reference

00:08:43,219 --> 00:08:48,140
implementation that you could look at to

00:08:45,830 --> 00:08:50,959
determine exactly what is needed to get

00:08:48,140 --> 00:08:53,899
these things up and running now in

00:08:50,959 --> 00:08:58,130
addition to working directly with TPM

00:08:53,899 --> 00:09:00,290
clevis is a good reference point for

00:08:58,130 --> 00:09:04,910
working with other parts of crypto such

00:09:00,290 --> 00:09:08,060
as the jose specification the java web

00:09:04,910 --> 00:09:10,550
encrypt soon as Shamir Secrets Eric

00:09:08,060 --> 00:09:13,820
sharing and we'll be showing an

00:09:10,550 --> 00:09:16,250
interface to you disks to so there's a

00:09:13,820 --> 00:09:19,930
quite a bit of good stuff in there get

00:09:16,250 --> 00:09:25,040
have their comm /watch set slash clips

00:09:19,930 --> 00:09:27,050
Javier what the hell is a TPM yes as

00:09:25,040 --> 00:09:29,329
Russell said last year we talked in

00:09:27,050 --> 00:09:31,190
detail about the TPM to use over stack

00:09:29,329 --> 00:09:33,470
different layers and libraries that we

00:09:31,190 --> 00:09:35,690
compounds so this year we are not going

00:09:33,470 --> 00:09:37,490
to cover that and instead show some of

00:09:35,690 --> 00:09:40,970
the applications of the PM's on some

00:09:37,490 --> 00:09:43,399
absolute project are using this super

00:09:40,970 --> 00:09:44,990
stack still for people that are not

00:09:43,399 --> 00:09:47,600
familiar with a trusted platform module

00:09:44,990 --> 00:09:50,890
I'm going to briefly describe what are

00:09:47,600 --> 00:09:55,579
the building blocks of these models so

00:09:50,890 --> 00:09:58,570
TPM to our crypto processors so they

00:09:55,579 --> 00:10:01,970
have a crypto precision you need to do

00:09:58,570 --> 00:10:05,540
to create random numbers to generate key

00:10:01,970 --> 00:10:07,880
for different ciphers all right and also

00:10:05,540 --> 00:10:10,779
they can do encryption and decryption by

00:10:07,880 --> 00:10:15,310
using the keys created by the TPM and

00:10:10,779 --> 00:10:18,980
also have stability to calculate hashes

00:10:15,310 --> 00:10:21,140
it also has a volatile memory that can

00:10:18,980 --> 00:10:23,899
be used to store transient objects

00:10:21,140 --> 00:10:26,510
because take the key created by the TPMS

00:10:23,899 --> 00:10:28,130
are not stored in the TPM but you have

00:10:26,510 --> 00:10:30,050
to load it we are going to explain more

00:10:28,130 --> 00:10:32,630
in detail about that

00:10:30,050 --> 00:10:35,149
so that memory is used store those keys

00:10:32,630 --> 00:10:37,070
and also it contains the platform

00:10:35,149 --> 00:10:41,420
configuration registers that are a set

00:10:37,070 --> 00:10:43,210
of registers that store hashes for for

00:10:41,420 --> 00:10:45,070
things that has been measured

00:10:43,210 --> 00:10:47,980
we're going also to talk a bit more

00:10:45,070 --> 00:10:50,610
about PCR I'm layering the talk and

00:10:47,980 --> 00:10:55,930
finally it has some non-volatile memory

00:10:50,610 --> 00:10:58,540
that can be used to persist objects in a

00:10:55,930 --> 00:11:01,510
secure way and this memory also

00:10:58,540 --> 00:11:04,660
contained the seeds that are the root of

00:11:01,510 --> 00:11:07,330
trust of the here king these seeds are

00:11:04,660 --> 00:11:10,630
created when you initialize the TPM and

00:11:07,330 --> 00:11:12,460
all the primary keys are derivated

00:11:10,630 --> 00:11:15,820
from the seeds using a key derivation

00:11:12,460 --> 00:11:18,960
function and this primary key never

00:11:15,820 --> 00:11:22,030
leave the TPMS and are the root of trust

00:11:18,960 --> 00:11:25,510
so what are the features that TPM

00:11:22,030 --> 00:11:27,910
provide we said it's able to generate

00:11:25,510 --> 00:11:30,340
random numbers it can create keys and do

00:11:27,910 --> 00:11:32,740
encryption and decryption you can also

00:11:30,340 --> 00:11:37,960
be used to identify the machines in a

00:11:32,740 --> 00:11:40,840
secure way can also store secrets in a

00:11:37,960 --> 00:11:42,970
secure way and it can be used to measure

00:11:40,840 --> 00:11:44,770
the integrity of the system and to

00:11:42,970 --> 00:11:49,210
attach it health that has not been

00:11:44,770 --> 00:11:51,520
tampered with the PM's comes in

00:11:49,210 --> 00:11:54,460
different flavors on their hardware tips

00:11:51,520 --> 00:11:57,220
that sit on our actual password like SPI

00:11:54,460 --> 00:12:00,730
and is perceived and there are also

00:11:57,220 --> 00:12:02,500
framework based TPMS for example the TPM

00:12:00,730 --> 00:12:05,530
in this machine that we are presenting

00:12:02,500 --> 00:12:09,630
in stock is a free web-based TPM doesn't

00:12:05,530 --> 00:12:13,450
have our real TPM chip as a side note

00:12:09,630 --> 00:12:16,750
everyone that has a laptop that shipped

00:12:13,450 --> 00:12:19,570
in the last oh five to eight years you

00:12:16,750 --> 00:12:20,890
do have TPM if you do have a laptop

00:12:19,570 --> 00:12:24,030
that's shipped in the last four or five

00:12:20,890 --> 00:12:26,800
years it's almost certain to be TPM 2.0

00:12:24,030 --> 00:12:32,170
part the reason for this is that

00:12:26,800 --> 00:12:34,840
Microsoft requires TPM 2.0 for Windows

00:12:32,170 --> 00:12:36,640
10 certification so any system that this

00:12:34,840 --> 00:12:37,089
Windows 10 is certified will include a

00:12:36,640 --> 00:12:40,689
teeth

00:12:37,089 --> 00:12:44,289
2.0 you may need to turn this on in the

00:12:40,689 --> 00:12:46,629
buyers but laptops and other client

00:12:44,289 --> 00:12:49,569
systems are pretty much guaranteed to

00:12:46,629 --> 00:12:55,889
include TPM and server platforms

00:12:49,569 --> 00:12:59,349
increasingly provide that that's true so

00:12:55,889 --> 00:13:02,199
one of the features at PM is WT to store

00:12:59,349 --> 00:13:07,629
secrets so you can encrypt and decrypt

00:13:02,199 --> 00:13:09,459
data using the keys created here as we

00:13:07,629 --> 00:13:12,339
mentioned the keys are not stored in the

00:13:09,459 --> 00:13:14,109
TPM but are store outside the TPM but

00:13:12,339 --> 00:13:16,359
protected by a primary key that never

00:13:14,109 --> 00:13:21,039
leaves the TPM so that means that you

00:13:16,359 --> 00:13:23,709
can have as many keys as q1 which was a

00:13:21,039 --> 00:13:25,479
different with the older TPM

00:13:23,709 --> 00:13:28,539
specification where the kids were stored

00:13:25,479 --> 00:13:33,279
in the TPM all the Crypt operations

00:13:28,539 --> 00:13:38,499
happens inside the TPM so are protected

00:13:33,279 --> 00:13:40,659
by PI by the hardware chip and another

00:13:38,499 --> 00:13:41,579
feature of the PM's is stability to seal

00:13:40,659 --> 00:13:44,699
data

00:13:41,579 --> 00:13:50,349
ceiling means that you encrypt something

00:13:44,699 --> 00:13:52,089
and specify a policy so the TPM is only

00:13:50,349 --> 00:13:55,029
allowed to decrypt the data if that

00:13:52,089 --> 00:13:58,359
policy is met we are also going to talk

00:13:55,029 --> 00:14:00,939
about sealing more later and something

00:13:58,359 --> 00:14:03,699
to keep in mind is that the TPMS are not

00:14:00,939 --> 00:14:06,879
crypto accelerators in fact they are

00:14:03,699 --> 00:14:10,629
very slow by design so it should only be

00:14:06,879 --> 00:14:15,519
used to encrypt small secrets like keys

00:14:10,629 --> 00:14:17,649
for example this is an example of how to

00:14:15,519 --> 00:14:21,999
do encryption and decryption using the

00:14:17,649 --> 00:14:23,739
TPM by using the TPM tools project this

00:14:21,999 --> 00:14:27,579
is a project that it's a set of command

00:14:23,739 --> 00:14:29,829
line tools to interact with the TPM the

00:14:27,579 --> 00:14:32,649
TPN tools project use the TPM to

00:14:29,829 --> 00:14:34,599
software stack libraries so it's a good

00:14:32,649 --> 00:14:37,479
starting point to wrap your head around

00:14:34,599 --> 00:14:39,369
the programming model of the TPMS when I

00:14:37,479 --> 00:14:42,069
start with the T psi I had to read a lot

00:14:39,369 --> 00:14:44,169
of specification and it was like really

00:14:42,069 --> 00:14:46,899
very complex to understand how to

00:14:44,169 --> 00:14:48,819
operate so the typical tools are are

00:14:46,899 --> 00:14:53,559
useful for for that value

00:14:48,819 --> 00:14:57,339
that interracial test it has and you

00:14:53,559 --> 00:14:59,289
probably can can find the use case for

00:14:57,339 --> 00:15:02,769
480p and that you're looking for and

00:14:59,289 --> 00:15:05,649
they are also a good reference code to

00:15:02,769 --> 00:15:08,979
understand how to use that the TPM to

00:15:05,649 --> 00:15:12,850
libraries so in this example we first

00:15:08,979 --> 00:15:14,859
create a primary key then we could

00:15:12,850 --> 00:15:19,119
create a key that's going to be used to

00:15:14,859 --> 00:15:22,929
encrypt it the data once the key has

00:15:19,119 --> 00:15:26,949
been created the key has to be load into

00:15:22,929 --> 00:15:30,429
the TPM so the TPM can use it so then we

00:15:26,949 --> 00:15:34,419
can have some plain text and crib and

00:15:30,429 --> 00:15:37,809
use the TPM to RSA in crypto man that

00:15:34,419 --> 00:15:41,019
encrypt that data in the TPM is in the

00:15:37,809 --> 00:15:43,539
key that has been low and then we can

00:15:41,019 --> 00:15:47,350
also decrease the data by using the TP

00:15:43,539 --> 00:15:50,639
and to RSA the creep command all the

00:15:47,350 --> 00:15:54,669
Crypt operation happens inside a TPM so

00:15:50,639 --> 00:15:56,799
the encrypted data is protected but by

00:15:54,669 --> 00:16:02,439
the TPM and can only be the clip in that

00:15:56,799 --> 00:16:06,129
particular machine so as you said is not

00:16:02,439 --> 00:16:08,769
hard to use the TPM but still and there

00:16:06,129 --> 00:16:11,139
is a lot of steps involved and there

00:16:08,769 --> 00:16:13,389
there are many properties there has to

00:16:11,139 --> 00:16:15,789
be a specific specify when you create

00:16:13,389 --> 00:16:18,789
the trigger key and the key and so on so

00:16:15,789 --> 00:16:21,909
we try to do these a little easier to

00:16:18,789 --> 00:16:25,679
use so as Russell mentioned we add

00:16:21,909 --> 00:16:28,299
support for TPMS to the clevis project

00:16:25,679 --> 00:16:31,509
the closest project is an automated the

00:16:28,299 --> 00:16:36,699
crypto framework that contains several

00:16:31,509 --> 00:16:41,229
pins each one of these pins implements

00:16:36,699 --> 00:16:43,959
our a decryption policy and also specify

00:16:41,229 --> 00:16:48,189
a key store for the kids that are are

00:16:43,959 --> 00:16:50,589
created but McLennan days also has a set

00:16:48,189 --> 00:16:53,739
of common line tools to the creep

00:16:50,589 --> 00:16:57,830
unencrypted our IDs in these pins and it

00:16:53,739 --> 00:17:01,600
also has the ability to bind a look

00:16:57,830 --> 00:17:04,610
Volume two opinion so you can ultimately

00:17:01,600 --> 00:17:07,910
unlock your looks volume if a certain

00:17:04,610 --> 00:17:11,209
policies met and it has several on

00:17:07,910 --> 00:17:13,459
lockers for four to do this there is one

00:17:11,209 --> 00:17:16,370
for this attractive model so you can

00:17:13,459 --> 00:17:20,420
unlock your your looks bottom in the in

00:17:16,370 --> 00:17:24,770
Iran fans it also has a do this to

00:17:20,420 --> 00:17:26,480
plug-in and also a command line that you

00:17:24,770 --> 00:17:28,520
can use this the clevis looks unlocked

00:17:26,480 --> 00:17:34,700
if you want to unlock a look volume

00:17:28,520 --> 00:17:37,690
explicitly this is how clevis works you

00:17:34,700 --> 00:17:40,150
need to provide some data to encrypt

00:17:37,690 --> 00:17:44,090
opinion for example TPM and a

00:17:40,150 --> 00:17:46,940
configuration clevis class original

00:17:44,090 --> 00:17:49,520
defaults but everything has its own

00:17:46,940 --> 00:17:54,350
configuration if you want to tweak a

00:17:49,520 --> 00:17:57,980
data parameters so close takes that

00:17:54,350 --> 00:18:00,700
information and generate a JSON web key

00:17:57,980 --> 00:18:04,450
that it is used to encrypt the data and

00:18:00,700 --> 00:18:07,880
the encrypted information and

00:18:04,450 --> 00:18:11,900
information how to retrieve the key are

00:18:07,880 --> 00:18:14,230
storing a JSON web encryption and then

00:18:11,900 --> 00:18:17,750
the key is protected by a VM on

00:18:14,230 --> 00:18:21,230
decryption do provide siclari's JSON web

00:18:17,750 --> 00:18:24,290
encryption Clarisse takes the

00:18:21,230 --> 00:18:29,860
information about how to get the key

00:18:24,290 --> 00:18:34,430
from there and also decipher the tag and

00:18:29,860 --> 00:18:36,770
retrieve the key on the cryptid Allah so

00:18:34,430 --> 00:18:40,370
here's an example of how to use Clarence

00:18:36,770 --> 00:18:42,320
it's a single command you tell clevis

00:18:40,370 --> 00:18:44,600
that you want to encrypt something which

00:18:42,320 --> 00:18:49,990
bill to you is a configuration in this

00:18:44,600 --> 00:18:52,100
case it's default I'm doing creep some

00:18:49,990 --> 00:18:53,780
and it generates against on web

00:18:52,100 --> 00:18:55,400
encryption and then if you want to clip

00:18:53,780 --> 00:18:56,510
the provider place the disk encryption

00:18:55,400 --> 00:19:01,240
and eat the creeps

00:18:56,510 --> 00:19:01,240
so I'm going to show here

00:19:05,900 --> 00:19:14,970
so I am encrypting something and then I

00:19:09,030 --> 00:19:17,900
can decrypt unplaced returns day I know

00:19:14,970 --> 00:19:17,900
if you see there

00:19:22,500 --> 00:19:29,260
but you can see it's very easy to use

00:19:25,780 --> 00:19:33,990
flurries and and you can also find a

00:19:29,260 --> 00:19:36,160
looks polymer we said to up to a pin you

00:19:33,990 --> 00:19:38,350
just need to install the Clara strike

00:19:36,160 --> 00:19:41,020
was modeled and generate your inner eye

00:19:38,350 --> 00:19:45,820
fest so it contains the clay weeds and

00:19:41,020 --> 00:19:47,590
the tip Ian's to layer it you bind at

00:19:45,820 --> 00:19:51,190
the bottom and if you repeat your

00:19:47,590 --> 00:19:54,940
machine and diem is present it will

00:19:51,190 --> 00:19:59,620
unlock they look swollen ultimately live

00:19:54,940 --> 00:20:02,470
in you and fast so we showed now how to

00:19:59,620 --> 00:20:05,440
click on the Crypt era you've seen the

00:20:02,470 --> 00:20:09,220
TPMS but we mentioned that also you can

00:20:05,440 --> 00:20:11,380
seal information so now

00:20:09,220 --> 00:20:14,080
Russell's going to explain house in

00:20:11,380 --> 00:20:18,250
words and and how the PCR are used for

00:20:14,080 --> 00:20:22,600
that so this is something that we're

00:20:18,250 --> 00:20:24,640
just starting to really use and on the

00:20:22,600 --> 00:20:26,800
one hand it's been around for a while on

00:20:24,640 --> 00:20:28,660
the other hand it has it they used a lot

00:20:26,800 --> 00:20:30,400
of that is because the implementation

00:20:28,660 --> 00:20:33,090
to get one that to for variety of

00:20:30,400 --> 00:20:37,300
reasons was very difficult to use

00:20:33,090 --> 00:20:40,360
implementation in TPM two is much easier

00:20:37,300 --> 00:20:43,770
to use so what is the measurement and

00:20:40,360 --> 00:20:47,790
ceiling measurement is basically

00:20:43,770 --> 00:20:51,910
creating a hash of something a hash

00:20:47,790 --> 00:20:54,750
firmware a hash of the configuration a

00:20:51,910 --> 00:20:57,370
hash of the bootloader a hash the kernel

00:20:54,750 --> 00:20:58,960
anything else so far pretty

00:20:57,370 --> 00:21:03,190
straightforward and good clean fun

00:20:58,960 --> 00:21:06,220
so the TPM has a set of platform

00:21:03,190 --> 00:21:08,860
configuration registers or PCRs so you

00:21:06,220 --> 00:21:13,630
can take a hash and you can write them

00:21:08,860 --> 00:21:17,170
into a register okay that seems kind of

00:21:13,630 --> 00:21:21,360
obvious so a couple of things here you

00:21:17,170 --> 00:21:25,570
don't write it into register there is a

00:21:21,360 --> 00:21:28,300
TPM operation called extend so you

00:21:25,570 --> 00:21:33,130
provide the hash value and you extend

00:21:28,300 --> 00:21:34,720
that into register now when you come to

00:21:33,130 --> 00:21:37,960
the next hash value

00:21:34,720 --> 00:21:40,990
you don't overwrite the register the

00:21:37,960 --> 00:21:45,850
extend operation will take whatever is

00:21:40,990 --> 00:21:48,420
already in the register do it's kind of

00:21:45,850 --> 00:21:52,720
a glorified concatenation and reduction

00:21:48,420 --> 00:21:59,290
but it uses two operations to produce a

00:21:52,720 --> 00:22:02,740
new value so it you have oh let's take a

00:21:59,290 --> 00:22:06,880
random example how about a kernel and

00:22:02,740 --> 00:22:09,580
five drivers that you care about you can

00:22:06,880 --> 00:22:11,890
hash the kernel in each of those five

00:22:09,580 --> 00:22:15,280
drivers and then actually do it hash

00:22:11,890 --> 00:22:18,670
extend past and cache extend you end up

00:22:15,280 --> 00:22:22,600
with a PCR containing a single value

00:22:18,670 --> 00:22:24,380
that is the result these specific

00:22:22,600 --> 00:22:26,420
measurements and important

00:22:24,380 --> 00:22:28,010
measurements were taking it the

00:22:26,420 --> 00:22:34,100
extension operation has done entirely

00:22:28,010 --> 00:22:37,840
inside the TPM and this can be used as

00:22:34,100 --> 00:22:42,560
part of more complex operations called

00:22:37,840 --> 00:22:45,980
sealing so the thing here is that this

00:22:42,560 --> 00:22:50,060
can be used in a number of rather

00:22:45,980 --> 00:22:51,350
interesting ways it is dependent on the

00:22:50,060 --> 00:22:52,490
contents of the things that are being

00:22:51,350 --> 00:22:54,800
measured and the order of the

00:22:52,490 --> 00:22:57,440
measurements are taken it is

00:22:54,800 --> 00:22:59,240
reproducible if you have the same set of

00:22:57,440 --> 00:23:01,640
things being measured and you measure

00:22:59,240 --> 00:23:04,430
them in the same order you will get the

00:23:01,640 --> 00:23:07,970
same results this is interesting because

00:23:04,430 --> 00:23:10,730
you have things that are common for

00:23:07,970 --> 00:23:13,700
example you can have a measurement of a

00:23:10,730 --> 00:23:17,120
bias and that measurement will be valid

00:23:13,700 --> 00:23:21,560
for any installation of that bios the

00:23:17,120 --> 00:23:24,860
bios made maker can publish the

00:23:21,560 --> 00:23:27,020
measurements of that bios and this can

00:23:24,860 --> 00:23:29,300
be used to determine if the BIOS has

00:23:27,020 --> 00:23:32,950
been modified to corrupted so it can be

00:23:29,300 --> 00:23:39,470
anything from a single file on system to

00:23:32,950 --> 00:23:40,610
universal things like a bytes so table

00:23:39,470 --> 00:23:44,500
york do you want to go into the piece

00:23:40,610 --> 00:23:46,880
yard so you want me to do that okay so

00:23:44,500 --> 00:23:48,770
the interesting thing here is that there

00:23:46,880 --> 00:23:52,310
are set of 24 piece yards

00:23:48,770 --> 00:23:55,700
some of them are very low level like the

00:23:52,310 --> 00:23:59,600
bios and the BIOS configuration this

00:23:55,700 --> 00:24:01,310
anyone looking at pc are number 2 option

00:23:59,600 --> 00:24:07,060
roms and what route of what that is all

00:24:01,310 --> 00:24:12,020
about so do any of your systems have a

00:24:07,060 --> 00:24:19,250
disk controller or a network controller

00:24:12,020 --> 00:24:23,630
in them so what is happening is that we

00:24:19,250 --> 00:24:27,260
can measure all the firmware on the

00:24:23,630 --> 00:24:29,810
different devices in the system and one

00:24:27,260 --> 00:24:32,510
of the attack vectors is that if as

00:24:29,810 --> 00:24:35,350
persistent threats have rootkits

00:24:32,510 --> 00:24:39,310
in the bios of peripherals

00:24:35,350 --> 00:24:42,250
we have the ability to check the bios

00:24:39,310 --> 00:24:44,740
and the peripherals and determine if the

00:24:42,250 --> 00:24:48,310
peripherals themselves have been

00:24:44,740 --> 00:24:52,150
modified or corrupted we can come down

00:24:48,310 --> 00:24:55,060
and we can do the bootloader the Master

00:24:52,150 --> 00:24:57,820
Boot Record we can check Oh straight

00:24:55,060 --> 00:25:01,240
transition state transitions and wakeup

00:24:57,820 --> 00:25:05,320
events we can measure the operating

00:25:01,240 --> 00:25:07,660
system and there are registers available

00:25:05,320 --> 00:25:13,000
to use so you can build custom

00:25:07,660 --> 00:25:15,010
applications okay this may sound vaguely

00:25:13,000 --> 00:25:17,290
interesting but it also sounds like

00:25:15,010 --> 00:25:20,350
there would be a lot of work to

00:25:17,290 --> 00:25:23,400
implement it and a lot of opportunities

00:25:20,350 --> 00:25:27,850
to mess things up

00:25:23,400 --> 00:25:30,430
couple things PCR zero through three are

00:25:27,850 --> 00:25:34,360
extended by the hardware of the TPM the

00:25:30,430 --> 00:25:37,330
low-level hardware and the TPM measure

00:25:34,360 --> 00:25:39,250
the key parts of the system so you now

00:25:37,330 --> 00:25:42,550
have a mechanism to determine if your

00:25:39,250 --> 00:25:46,590
BIOS BIOS configuration and device

00:25:42,550 --> 00:25:51,160
firmware has been modified or corrupted

00:25:46,590 --> 00:25:52,960
Steve Kerr Peter Jones has been

00:25:51,160 --> 00:25:55,600
implementing extensions to the shim and

00:25:52,960 --> 00:25:58,450
bootloader to add additional

00:25:55,600 --> 00:25:59,680
measurements such that the shemin's

00:25:58,450 --> 00:26:02,710
bootloader are now providing

00:25:59,680 --> 00:26:06,280
measurements for the shim of the

00:26:02,710 --> 00:26:09,640
bootloader for the system certificates

00:26:06,280 --> 00:26:12,010
Curling grub commands so we now have as

00:26:09,640 --> 00:26:15,850
a standard part of booting the system a

00:26:12,010 --> 00:26:19,030
set of valuable and useful measurements

00:26:15,850 --> 00:26:22,660
PCR measurements being done for you that

00:26:19,030 --> 00:26:26,380
are available to use more information on

00:26:22,660 --> 00:26:32,590
it github.com or h boot shim and you can

00:26:26,380 --> 00:26:34,570
get the details on that so let's try

00:26:32,590 --> 00:26:38,520
these two together we talked a moment

00:26:34,570 --> 00:26:43,840
ago about encrypting and decrypting

00:26:38,520 --> 00:26:45,210
secrets using the TPM with sealing we

00:26:43,840 --> 00:26:50,700
can

00:26:45,210 --> 00:26:54,059
sealed and the the secret operation with

00:26:50,700 --> 00:26:59,759
a set of pcr values which means that the

00:26:54,059 --> 00:27:03,570
secret will only be decrypted if those

00:26:59,759 --> 00:27:12,059
PCR measurements match what was used for

00:27:03,570 --> 00:27:15,349
sealing so top you this might be a

00:27:12,059 --> 00:27:18,029
useful place to show an example yeah

00:27:15,349 --> 00:27:21,089
presently we show how to prevent the

00:27:18,029 --> 00:27:25,259
cribbage that I think levies on but you

00:27:21,089 --> 00:27:29,450
can also and we use the default can you

00:27:25,259 --> 00:27:29,450
see there or should I make it bigger so

00:27:36,589 --> 00:27:43,169
we use the default configuration for the

00:27:39,929 --> 00:27:48,749
TTL tip in here this time we will pass a

00:27:43,169 --> 00:27:51,509
PC ours IP argument so we will say we

00:27:48,749 --> 00:27:54,419
want to encrypt but also we want to seal

00:27:51,509 --> 00:27:59,999
against the PC art number zero so we

00:27:54,419 --> 00:28:04,469
generate the digital web encryption we

00:27:59,999 --> 00:28:09,830
cam the creepiest without problem but if

00:28:04,469 --> 00:28:14,129
we we have a value of in the PCR

00:28:09,830 --> 00:28:16,289
register zero with the hash so if we

00:28:14,129 --> 00:28:20,429
change that hash for example with an

00:28:16,289 --> 00:28:23,339
extent operation TPM won't be able to

00:28:20,429 --> 00:28:29,899
decrypt the secret anymore so let's use

00:28:23,339 --> 00:28:36,179
the extend command to extend some hash

00:28:29,899 --> 00:28:41,159
for example of test string and then we

00:28:36,179 --> 00:28:44,789
have a different hash in the PCR zero so

00:28:41,159 --> 00:28:49,799
this time if we try to the creep our

00:28:44,789 --> 00:28:52,900
secret the TPM will not allow us to do

00:28:49,799 --> 00:28:56,260
that so close what wasn't able to get

00:28:52,900 --> 00:28:58,990
they gave some wacky because the PCR

00:28:56,260 --> 00:29:05,980
policy that was used to encrypt wasn't

00:28:58,990 --> 00:29:09,630
men so measurement and VCRs are only one

00:29:05,980 --> 00:29:13,740
part of the puzzle but we also need

00:29:09,630 --> 00:29:13,740
something that's called at the station

00:29:14,610 --> 00:29:25,210
okay so have any of you take an allylic

00:29:22,030 --> 00:29:27,370
system disk from one computer and moved

00:29:25,210 --> 00:29:30,580
it to another computer and run it or

00:29:27,370 --> 00:29:34,900
have you cloned a disk to get a disk

00:29:30,580 --> 00:29:35,679
that run on another system well if

00:29:34,900 --> 00:29:38,320
you're using

00:29:35,679 --> 00:29:42,400
clevis with looks and particularly if

00:29:38,320 --> 00:29:45,850
you're ceiling you can you have set it

00:29:42,400 --> 00:29:48,940
up such that the disk will not boot on

00:29:45,850 --> 00:29:53,050
anything but the system it was

00:29:48,940 --> 00:29:56,770
originally configured on and that it

00:29:53,050 --> 00:30:01,120
will not boot if someone has messed with

00:29:56,770 --> 00:30:05,080
the BIOS or has turned off secure boot

00:30:01,120 --> 00:30:10,270
or has done a number of other things so

00:30:05,080 --> 00:30:15,700
this provides a very strong capability

00:30:10,270 --> 00:30:18,970
for locking down systems so in some case

00:30:15,700 --> 00:30:23,559
here is basically we just showed seal

00:30:18,970 --> 00:30:24,010
and then check it so a good starting

00:30:23,559 --> 00:30:26,530
point

00:30:24,010 --> 00:30:30,190
it does have some limits in its

00:30:26,530 --> 00:30:35,679
flexibility the next thing to do is to

00:30:30,190 --> 00:30:39,429
begin providing comparison of the PCR

00:30:35,679 --> 00:30:42,220
measurements outside the direct ceiling

00:30:39,429 --> 00:30:45,340
this can be done either by having a list

00:30:42,220 --> 00:30:48,400
of good values on the system so

00:30:45,340 --> 00:30:53,620
basically Vitus manufacturer would

00:30:48,400 --> 00:30:56,770
provide a list of the PCR values for

00:30:53,620 --> 00:30:57,970
different bios versions so you would be

00:30:56,770 --> 00:31:01,060
able to

00:30:57,970 --> 00:31:07,480
upgrade the BIOS without breaking your

00:31:01,060 --> 00:31:10,150
system useful if the list is kept on the

00:31:07,480 --> 00:31:14,020
local system this is known as static

00:31:10,150 --> 00:31:17,470
attestation but it also there is a

00:31:14,020 --> 00:31:20,530
broader one which is take the various

00:31:17,470 --> 00:31:24,220
sealed PCR values make them available

00:31:20,530 --> 00:31:27,850
outside outside the system and allow a

00:31:24,220 --> 00:31:31,570
external server to determine if this set

00:31:27,850 --> 00:31:34,360
of pcr measurements is valid or if the

00:31:31,570 --> 00:31:36,760
system has been compromised so there are

00:31:34,360 --> 00:31:38,680
several systems that either exist or

00:31:36,760 --> 00:31:41,980
under development for implementing

00:31:38,680 --> 00:31:43,720
dynamic attestation some examples of

00:31:41,980 --> 00:31:50,530
this would include the keyline project

00:31:43,720 --> 00:31:53,350
the Intel open CIT system and the strong

00:31:50,530 --> 00:31:56,680
silent Wan package has some fairly

00:31:53,350 --> 00:31:58,990
extensive capabilities here so there are

00:31:56,680 --> 00:32:03,040
a number of things that you can do

00:31:58,990 --> 00:32:05,830
directly with PCR s and PCR sealing

00:32:03,040 --> 00:32:12,640
there are also some systems that begin

00:32:05,830 --> 00:32:15,490
to build on this okay signing everyone

00:32:12,640 --> 00:32:18,370
here knows what signing is it took me a

00:32:15,490 --> 00:32:19,990
little while to figure it out I'm

00:32:18,370 --> 00:32:21,580
somewhat slow the people that know me

00:32:19,990 --> 00:32:25,360
can will assure you of that

00:32:21,580 --> 00:32:29,830
so signing citing means you take a hash

00:32:25,360 --> 00:32:34,450
of the data you encrypt it with private

00:32:29,830 --> 00:32:40,480
key and then with a public key you can

00:32:34,450 --> 00:32:44,410
verify that the data was signed with a

00:32:40,480 --> 00:32:49,180
defined private key and that since it's

00:32:44,410 --> 00:32:52,330
the hash that the data in the file has

00:32:49,180 --> 00:32:53,920
not been corrupted or modified so good

00:32:52,330 --> 00:32:56,440
stuff we use signing all over the place

00:32:53,920 --> 00:33:01,510
it's really the foundation of much

00:32:56,440 --> 00:33:04,580
computer security so the thing that you

00:33:01,510 --> 00:33:08,660
can begin to do with TPM is you can do

00:33:04,580 --> 00:33:11,240
the signing operation in hardware so the

00:33:08,660 --> 00:33:15,320
signing operation is entirely inside the

00:33:11,240 --> 00:33:20,270
TPM inside the secure security processor

00:33:15,320 --> 00:33:25,340
boundaries and can only be done by that

00:33:20,270 --> 00:33:32,300
one specific TPM so TPM signing gives

00:33:25,340 --> 00:33:36,830
you the ability to prove that a file was

00:33:32,300 --> 00:33:39,140
signed by a specific system and that you

00:33:36,830 --> 00:33:41,870
do not have the situation if someone

00:33:39,140 --> 00:33:45,040
being able to copy your private key off

00:33:41,870 --> 00:33:48,950
someplace else and start signing things

00:33:45,040 --> 00:33:52,550
now traditionally this has been somewhat

00:33:48,950 --> 00:33:55,910
challenging to do using TPM hugger has

00:33:52,550 --> 00:33:58,280
that changed yeah here we have an

00:33:55,910 --> 00:34:02,810
example of how to do signing again you

00:33:58,280 --> 00:34:04,220
seen the TPM tools so you create a ream

00:34:02,810 --> 00:34:07,310
of primary key like in the previous

00:34:04,220 --> 00:34:10,730
example then you create a key you know

00:34:07,310 --> 00:34:13,550
the key that's the same that the last

00:34:10,730 --> 00:34:19,179
example and then there is a TP until

00:34:13,550 --> 00:34:22,730
sign command that can use that door key

00:34:19,179 --> 00:34:26,419
to sign some song that the hash of some

00:34:22,730 --> 00:34:29,750
data and that gives us a signature that

00:34:26,419 --> 00:34:33,740
contains the silent hash and since only

00:34:29,750 --> 00:34:36,980
the the private portion of the of the

00:34:33,740 --> 00:34:39,950
key is protected by the TPM because it's

00:34:36,980 --> 00:34:45,530
wrapped by the primary key the public

00:34:39,950 --> 00:34:50,590
key can be load in any TPM so another

00:34:45,530 --> 00:34:54,980
user can use the TPL to load external to

00:34:50,590 --> 00:34:57,440
that that allows to to load keys that

00:34:54,980 --> 00:35:00,140
are not created by that particular TPM

00:34:57,440 --> 00:35:03,730
so can know the public portion of the

00:35:00,140 --> 00:35:07,070
key and use the TPM to verify signature

00:35:03,730 --> 00:35:14,030
to check that the hash for that dial is

00:35:07,070 --> 00:35:18,060
signature matches so we have some demos

00:35:14,030 --> 00:35:22,020
of interesting up to projects that are

00:35:18,060 --> 00:35:24,030
you see the TPN to software stack we

00:35:22,020 --> 00:35:27,810
already show some examples using clevis

00:35:24,030 --> 00:35:30,180
ah but half we have another one and also

00:35:27,810 --> 00:35:32,850
there to our projects that are under

00:35:30,180 --> 00:35:37,230
development they don't have a released

00:35:32,850 --> 00:35:39,450
yet but we under test are working pretty

00:35:37,230 --> 00:35:43,230
well even when don't have a resist yet

00:35:39,450 --> 00:35:46,680
and one is the TPM - TSS engine that is

00:35:43,230 --> 00:35:50,550
an open SL engine for TPMT - and the

00:35:46,680 --> 00:35:53,310
other one is the TPM - pkcs 11 project

00:35:50,550 --> 00:35:58,980
that is the provides a pkcs 11 interface

00:35:53,310 --> 00:36:02,070
for TPMS - so the demos we have for

00:35:58,980 --> 00:36:08,820
clevis is to ultimately unlock a new

00:36:02,070 --> 00:36:12,780
problem you seen the UNIX to support for

00:36:08,820 --> 00:36:15,990
the OpenSSL engine we have a demo to

00:36:12,780 --> 00:36:19,350
show how a private key of a cert can be

00:36:15,990 --> 00:36:24,900
protected by a TPM and finally for the

00:36:19,350 --> 00:36:27,570
pkcs 11 one we will show how open a

00:36:24,900 --> 00:36:32,550
straight private key can be protected by

00:36:27,570 --> 00:36:36,890
the TPM so as we mentioned our Clarisse

00:36:32,550 --> 00:36:43,040
allows to bind a looks volume to a pin

00:36:36,890 --> 00:36:45,990
so in this example we we have external

00:36:43,040 --> 00:36:51,510
USB Drive that will be unlock

00:36:45,990 --> 00:36:56,910
automatically back Larry's so computer

00:36:51,510 --> 00:36:59,970
and even when it has a looks problem on

00:36:56,910 --> 00:37:03,630
it it will be unlocked automatically

00:36:59,970 --> 00:37:06,800
because the the clevis on lock unlock

00:37:03,630 --> 00:37:06,800
ur7 to do

00:37:13,310 --> 00:37:20,150
so we see that it has been mount unlock

00:37:17,450 --> 00:37:23,030
amount in image system and I didn't have

00:37:20,150 --> 00:37:25,190
to provide any any fast rate for that so

00:37:23,030 --> 00:37:28,700
this is for example useful for for

00:37:25,190 --> 00:37:30,590
backup solution if you you don't want to

00:37:28,700 --> 00:37:33,080
enter your password every time that you

00:37:30,590 --> 00:37:35,990
want to copy something but if someone

00:37:33,080 --> 00:37:37,790
steals your disk won't be able to

00:37:35,990 --> 00:37:39,500
automatically lock it looks fun

00:37:37,790 --> 00:37:41,540
only in your system because it is

00:37:39,500 --> 00:37:51,070
protected by a key that has to be load

00:37:41,540 --> 00:37:55,660
into your TPM so as Russell mentioned

00:37:51,070 --> 00:37:59,960
you can also steal your your look key

00:37:55,660 --> 00:38:02,360
using a PC our policy so only for

00:37:59,960 --> 00:38:05,390
example only if my secure boot

00:38:02,360 --> 00:38:07,760
configuration is the same or if my

00:38:05,390 --> 00:38:10,040
finger didn't change unlock

00:38:07,760 --> 00:38:16,460
automatically otherwise ask for a fast

00:38:10,040 --> 00:38:17,720
rate so I can I can unlock so keep it

00:38:16,460 --> 00:38:22,070
back up for one second

00:38:17,720 --> 00:38:26,000
this specific example it is going to be

00:38:22,070 --> 00:38:29,360
checking to see if the system firmware

00:38:26,000 --> 00:38:32,870
is unmodified if the option runs or the

00:38:29,360 --> 00:38:37,160
device firmware is unmodified and if the

00:38:32,870 --> 00:38:39,170
system is in secure boot mode so a lot

00:38:37,160 --> 00:38:43,220
of things that you can check this would

00:38:39,170 --> 00:38:45,590
be a simple yet very useful capability

00:38:43,220 --> 00:38:49,130
that would give you a strong indication

00:38:45,590 --> 00:38:54,830
that you're booting a secure unmodified

00:38:49,130 --> 00:38:58,910
system so the next example is to protect

00:38:54,830 --> 00:39:04,520
a private key of a certificate using the

00:38:58,910 --> 00:39:08,120
TPM so the TPN the opensl engine for TPM

00:39:04,520 --> 00:39:13,100
has this TPN - TSS Genki that generates

00:39:08,120 --> 00:39:16,940
our RSA key using the TPM so then you

00:39:13,100 --> 00:39:21,350
can use open SL and specify that you are

00:39:16,940 --> 00:39:24,460
using that the TPM - TSS engine to

00:39:21,350 --> 00:39:26,980
generate our certificate signing

00:39:24,460 --> 00:39:29,260
whereas on a certificate as on and then

00:39:26,980 --> 00:39:36,040
you can for example use the open and

00:39:29,260 --> 00:39:37,480
sell a server to to to start we only

00:39:36,040 --> 00:39:46,300
have five minutes I'm going to do this

00:39:37,480 --> 00:39:49,089
very quickly so here we have a private

00:39:46,300 --> 00:39:52,900
key that is it's a penalty with a label

00:39:49,089 --> 00:39:55,869
ESS so so Bannister knows that it has to

00:39:52,900 --> 00:40:01,170
use the TPM - anything for that and we

00:39:55,869 --> 00:40:03,760
will start the server on a client here

00:40:01,170 --> 00:40:07,690
and we see that they they are able to

00:40:03,760 --> 00:40:13,060
solve it at the last connection and the

00:40:07,690 --> 00:40:15,040
claim is using the certificate that it's

00:40:13,060 --> 00:40:19,390
associated with with with that private

00:40:15,040 --> 00:40:22,390
key so it's if someone steals your your

00:40:19,390 --> 00:40:23,880
private key the attacker cannot do a for

00:40:22,390 --> 00:40:26,380
example a man-in-the-middle attack

00:40:23,880 --> 00:40:31,240
because that private key can only be

00:40:26,380 --> 00:40:36,040
used in that particular machine the last

00:40:31,240 --> 00:40:41,950
example is to protect SSH private key so

00:40:36,040 --> 00:40:43,930
you see in the pkcs 11 interface you can

00:40:41,950 --> 00:40:46,660
generate applied a five-hour public key

00:40:43,930 --> 00:40:50,619
Asiri with with with with your private

00:40:46,660 --> 00:40:55,660
key and and you copy to the to the

00:40:50,619 --> 00:40:58,089
server and then you tell it straight

00:40:55,660 --> 00:41:01,540
since sage has support for the Casillas

00:40:58,089 --> 00:41:10,650
11 we do you specify that you want to

00:41:01,540 --> 00:41:15,910
use the leap TP and to pickets at 11 I

00:41:10,650 --> 00:41:20,380
can establish I can authenticate using

00:41:15,910 --> 00:41:21,099
that key and you can see here that the

00:41:20,380 --> 00:41:26,849
client

00:41:21,099 --> 00:41:29,859
it's where is that the client offers a

00:41:26,849 --> 00:41:32,130
pkcs learn public key and the server

00:41:29,859 --> 00:41:33,640
accepted key so you cannot dedicate

00:41:32,130 --> 00:41:36,280
using

00:41:33,640 --> 00:41:39,660
your key that is protected by a TPM so

00:41:36,280 --> 00:41:42,570
again someone steals your private key

00:41:39,660 --> 00:41:46,510
the attacker won't be able to access

00:41:42,570 --> 00:41:49,150
that machine because it can only be used

00:41:46,510 --> 00:41:52,180
by loading into your TPM in that machine

00:41:49,150 --> 00:41:54,520
so its protect is another level of

00:41:52,180 --> 00:42:01,630
protection for for your for your secrets

00:41:54,520 --> 00:42:03,119
so yeah we show some examples how to use

00:42:01,630 --> 00:42:07,039
the pm's

00:42:03,119 --> 00:42:10,019
and what what these moles are beautiful

00:42:07,039 --> 00:42:15,779
now Russell is going to talk a little

00:42:10,019 --> 00:42:21,710
bit about other use cases actually this

00:42:15,779 --> 00:42:24,989
is a almost a plea because I think we've

00:42:21,710 --> 00:42:27,180
demonstrated that there are some useful

00:42:24,989 --> 00:42:30,479
and powerful capabilities with a

00:42:27,180 --> 00:42:33,660
hardware root of trust today that we're

00:42:30,479 --> 00:42:37,499
beginning to do useful things with this

00:42:33,660 --> 00:42:40,829
hardware root of trust and that it is

00:42:37,499 --> 00:42:42,210
actually quite easy to use it is

00:42:40,829 --> 00:42:44,430
dramatically easier to use that it's

00:42:42,210 --> 00:42:46,950
been in the past and we've been

00:42:44,430 --> 00:42:49,710
demonstrating with even these early

00:42:46,950 --> 00:42:53,940
efforts that we can provide significant

00:42:49,710 --> 00:42:58,200
levels of hardware backed security that

00:42:53,940 --> 00:43:00,839
are transparent to the user transfer to

00:42:58,200 --> 00:43:04,529
the user hallelujah maybe people will

00:43:00,839 --> 00:43:05,729
actually start using this stuff but as I

00:43:04,529 --> 00:43:08,430
said we're just scratching the surface

00:43:05,729 --> 00:43:12,479
these are some things that we're looking

00:43:08,430 --> 00:43:15,509
at for potential uses of TPM I put this

00:43:12,479 --> 00:43:17,239
list together a few weeks ago so Xavier

00:43:15,509 --> 00:43:19,559
has already moved beyond Mia needs to

00:43:17,239 --> 00:43:23,249
take some of these things off the

00:43:19,559 --> 00:43:27,809
potential list but there are a lot of

00:43:23,249 --> 00:43:30,539
other things out there so if the

00:43:27,809 --> 00:43:33,239
hardware would of trust back security

00:43:30,539 --> 00:43:35,369
would be useful for any of the projects

00:43:33,239 --> 00:43:38,969
that you're working on we encourage you

00:43:35,369 --> 00:43:41,940
to use it any and all the upstream

00:43:38,969 --> 00:43:44,759
projects building on TPM can of course

00:43:41,940 --> 00:43:48,539
use additional assistance we would love

00:43:44,759 --> 00:43:50,339
to have people working with it and if

00:43:48,539 --> 00:43:53,729
you start getting into these things

00:43:50,339 --> 00:43:55,259
there are a set of resources a really

00:43:53,729 --> 00:43:58,920
good starting point if you want to know

00:43:55,259 --> 00:44:05,009
the details of this is a practical

00:43:58,920 --> 00:44:08,099
guides TPM 2.0 250 page book which is

00:44:05,009 --> 00:44:11,160
available as a free electronic book from

00:44:08,099 --> 00:44:12,180
a press there's more information

00:44:11,160 --> 00:44:16,380
available from the trusted computing

00:44:12,180 --> 00:44:18,720
group and the use of space tools

00:44:16,380 --> 00:44:22,289
you have listened for the IBM and for

00:44:18,720 --> 00:44:24,720
the trusted computing groups clevis and

00:44:22,289 --> 00:44:26,489
work that xavier and the other engineers

00:44:24,720 --> 00:44:29,849
are doing with network bound disk

00:44:26,489 --> 00:44:35,220
encryption and the work going on with

00:44:29,849 --> 00:44:38,700
open SSL and pkcs 11 and by incredible

00:44:35,220 --> 00:45:21,029
coincidence as the out of time sign came

00:44:38,700 --> 00:45:23,579
up we have you looked into this no no

00:45:21,029 --> 00:45:28,019
III don't know if there are some efforts

00:45:23,579 --> 00:45:29,670
on that I have to check so with this our

00:45:28,019 --> 00:45:35,160
would you get lucky that spectrum is

00:45:29,670 --> 00:45:44,849
like Harbour Bridge trust support in PGP

00:45:35,160 --> 00:45:46,950
oh absolutely

00:45:44,849 --> 00:45:49,619
with the with the simple instructions we

00:45:46,950 --> 00:45:52,619
have here we've shown you exactly what

00:45:49,619 --> 00:45:57,569
you need to do to take the secret such

00:45:52,619 --> 00:46:01,109
as a GPG private key and store it into

00:45:57,569 --> 00:46:03,739
the TPM with or without sealing so you

00:46:01,109 --> 00:46:03,739
can do that today

00:46:06,360 --> 00:46:09,360
yeah

00:46:11,410 --> 00:46:27,440
and so the two things here are you can

00:46:21,740 --> 00:46:29,540
use TPM outside of PGP the simplest case

00:46:27,440 --> 00:46:31,490
would be with the script and this is

00:46:29,540 --> 00:46:35,120
where you should point out that that's

00:46:31,490 --> 00:46:37,610
an ugly and incomplete answer and I

00:46:35,120 --> 00:46:41,390
would agree with you completely and say

00:46:37,610 --> 00:46:46,730
that a peach a gbg implementation such

00:46:41,390 --> 00:46:49,340
as PGP and he can be extended to use

00:46:46,730 --> 00:46:52,460
this capability and I have to admit that

00:46:49,340 --> 00:46:55,250
that work has not been done their

00:46:52,460 --> 00:46:58,190
efforts already to do that because of

00:46:55,250 --> 00:47:00,620
what is said if you encrypt the key is

00:46:58,190 --> 00:47:02,990
in the TPM you will store the picky at

00:47:00,620 --> 00:47:07,810
some point unencrypted under your file

00:47:02,990 --> 00:47:11,110
system side we need proper supporting

00:47:07,810 --> 00:47:11,110
good idea

00:47:21,770 --> 00:47:30,119
no it's it's not related it's it's you

00:47:27,210 --> 00:47:35,700
have secure good and trusted food

00:47:30,119 --> 00:47:37,320
there's separate things you can use you

00:47:35,700 --> 00:47:39,690
can connect it for example by using

00:47:37,320 --> 00:47:41,940
measurement you can say I'm going to

00:47:39,690 --> 00:47:44,790
seal this data if my secure boot

00:47:41,940 --> 00:47:47,820
configuration didn't change for example

00:47:44,790 --> 00:47:49,830
if if secure boot wasn't disabled or the

00:47:47,820 --> 00:47:52,020
keys replace it for example but there

00:47:49,830 --> 00:47:54,750
are separate things because secure

00:47:52,020 --> 00:47:57,450
boutiques active if your binary is not

00:47:54,750 --> 00:48:00,050
signed by one of the keys in the Bureau

00:47:57,450 --> 00:48:04,609
of trust that binary won't be executed

00:48:00,050 --> 00:48:06,990
but TPMS only measure it what you

00:48:04,609 --> 00:48:09,630
components and it doesn't take any

00:48:06,990 --> 00:48:11,820
action for you you can use the

00:48:09,630 --> 00:48:14,760
information in the PCR stay to say for

00:48:11,820 --> 00:48:17,960
example I know I want to create this but

00:48:14,760 --> 00:48:21,630
the TPM shall do nothing by their self

00:48:17,960 --> 00:48:27,780
take them in this case experience secure

00:48:21,630 --> 00:48:30,380
boot and there are these factors one of

00:48:27,780 --> 00:48:30,380
them is

00:48:32,220 --> 00:48:41,520
yes the other is to add new signing keys

00:48:36,810 --> 00:48:45,720
to the MOT list so both of those would

00:48:41,520 --> 00:48:49,380
allow you to boot with a on the side

00:48:45,720 --> 00:48:54,030
I've heard what you can do with TEM is

00:48:49,380 --> 00:48:58,440
that never seal it both to interchange

00:48:54,030 --> 00:49:02,880
that secure boot is enabled and also

00:48:58,440 --> 00:49:09,920
sealed signing keys to make sure that no

00:49:02,880 --> 00:49:09,920
one has added a key to the assignment so

00:49:16,220 --> 00:49:21,780
for example in empower platforms you

00:49:19,829 --> 00:49:24,150
have trusted boot because you have that

00:49:21,780 --> 00:49:25,099
TPM there but you don't have security so

00:49:24,150 --> 00:49:29,000
the dark

00:49:25,099 --> 00:49:29,000
there's no dependency between

00:49:33,820 --> 00:49:39,870
I think last question because we don't

00:49:37,810 --> 00:49:39,870
know

00:49:44,599 --> 00:49:48,170
we convert eight

00:49:48,940 --> 00:49:56,180
the question is how do I compare or

00:49:52,280 --> 00:49:58,490
might be a macho dying for my system

00:49:56,180 --> 00:50:04,670
that principina

00:49:58,490 --> 00:50:07,250
 time GPM is not a fact that you

00:50:04,670 --> 00:50:12,350
need to make sure that your data is

00:50:07,250 --> 00:50:16,220
backed up outside facility and one of

00:50:12,350 --> 00:50:20,890
the things is you have a mechanistic

00:50:16,220 --> 00:50:20,890
approach for reflection

00:50:24,770 --> 00:50:34,930
so if you have keys only you keep them

00:50:30,800 --> 00:50:38,060
that isn't risky about hunt worth it

00:50:34,930 --> 00:50:40,940
and since we're getting the hook over

00:50:38,060 --> 00:50:43,730
here thank you very much for attending

00:50:40,940 --> 00:50:46,990
the session pop your naivete just on the

00:50:43,730 --> 00:50:46,990
other side of the border and

00:50:51,990 --> 00:50:59,030

YouTube URL: https://www.youtube.com/watch?v=tg7N162cHQ4


