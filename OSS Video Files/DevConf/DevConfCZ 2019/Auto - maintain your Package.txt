Title: Auto - maintain your Package
Publication date: 2019-03-04
Playlist: DevConfCZ 2019
Description: 
	Presentation name: Auto - maintain your Package
Speakers: Tomas Tomecek, Stef Walter
Description:  Fedora has a specific aim, to have patches and development go upstream to their respective projects. This has been on each maintainer to do. We want to make that simple, even trivial … by using Git as God^H^H^HLinus intended.

There are many packages which use source git for development, rather than dist-git: systemd, cockpit, ostree, the RHEL kernel and more. The spec files live in the project’s source git history, often pushed upstream. 

We are now working on a system to make this easily available to everyone: work with code, not tarballs and patches. We’ll show you a prototype that can easily turn on auto-maintenance of your package in dist-git, even rawhide. Have your package track upstream work automatically, when it passes tests to check that it works with the rest of Fedora.
[ https://sched.co/Jch1 ]
Captions: 
	00:00:05,510 --> 00:00:15,330
hello everyone I'm Steph and I have

00:00:12,690 --> 00:00:17,010
loved putting Linux together integrating

00:00:15,330 --> 00:00:20,160
it I've contributed to over a hundred

00:00:17,010 --> 00:00:22,980
different projects in the in the

00:00:20,160 --> 00:00:24,720
open-source ecosystem and that's in many

00:00:22,980 --> 00:00:26,640
ways why I was one of the folks who

00:00:24,720 --> 00:00:29,039
built cockpit the cockpit brings

00:00:26,640 --> 00:00:30,659
together a whole bunch of stuff and has

00:00:29,039 --> 00:00:32,820
done the awesome things but it talks to

00:00:30,659 --> 00:00:35,930
about up again about 90 to 100 different

00:00:32,820 --> 00:00:39,540
parts of Linux in order to do its job

00:00:35,930 --> 00:00:41,190
when we were doing that we had to

00:00:39,540 --> 00:00:42,990
integrate it we had to test it we had to

00:00:41,190 --> 00:00:45,030
make sure it worked together and so I

00:00:42,990 --> 00:00:47,310
got dragged into the strange world of

00:00:45,030 --> 00:00:50,040
continuous integration and testing we're

00:00:47,310 --> 00:00:51,630
trying to make the operating system more

00:00:50,040 --> 00:00:54,690
integrated and work better together so

00:00:51,630 --> 00:00:58,110
I'm a CI freak and I often get teased

00:00:54,690 --> 00:01:00,610
about this I work for Red Hat hey I'm

00:00:58,110 --> 00:01:04,120
Tomas I like containers

00:01:00,610 --> 00:01:04,120
[Laughter]

00:01:10,750 --> 00:01:23,930
so a self-maintaining

00:01:13,880 --> 00:01:26,600
package wouldn't we like that we really

00:01:23,930 --> 00:01:28,759
want is for the package to do its dirty

00:01:26,600 --> 00:01:31,670
work itself to automatically have that

00:01:28,759 --> 00:01:33,140
taken care of for you and you have

00:01:31,670 --> 00:01:33,979
instead of having something that you

00:01:33,140 --> 00:01:37,340
have to take care of

00:01:33,979 --> 00:01:39,320
bit by bit by bit you basically have to

00:01:37,340 --> 00:01:42,140
train and take care of in a much higher

00:01:39,320 --> 00:01:44,090
level way but why would you want such a

00:01:42,140 --> 00:01:45,649
thing why are we looking at such a thing

00:01:44,090 --> 00:01:48,680
why is it interesting problem for us to

00:01:45,649 --> 00:01:52,610
solve well it's much more fundamental

00:01:48,680 --> 00:01:55,960
than that we bring together tonnes of

00:01:52,610 --> 00:02:00,229
packages into a Linux distro Fedora as

00:01:55,960 --> 00:02:02,000
there's what is it five digits worth of

00:02:00,229 --> 00:02:06,080
packages somewhere between 15 and 20

00:02:02,000 --> 00:02:07,759
thousand and we integrate them and yet

00:02:06,080 --> 00:02:09,649
each of those packages upstream most of

00:02:07,759 --> 00:02:11,660
them do not have any immediate feedback

00:02:09,649 --> 00:02:15,910
on how they affect the rest of the

00:02:11,660 --> 00:02:18,290
distribution the other 15,000 packages

00:02:15,910 --> 00:02:20,900
we all contribute back to upstream

00:02:18,290 --> 00:02:22,910
individually and this is awesome you can

00:02:20,900 --> 00:02:24,230
read it right in them in the basic

00:02:22,910 --> 00:02:27,079
description of how to be a package

00:02:24,230 --> 00:02:30,110
maintainer send your work upstream but

00:02:27,079 --> 00:02:32,140
as a distribution we do that very very

00:02:30,110 --> 00:02:34,670
poorly the distribution itself

00:02:32,140 --> 00:02:36,260
represented in the upstream project it's

00:02:34,670 --> 00:02:39,260
not really on the radar they know it

00:02:36,260 --> 00:02:43,549
exists but it's not in the work flow of

00:02:39,260 --> 00:02:46,610
those projects some upstream projects

00:02:43,549 --> 00:02:48,650
bring it into their workflow I know that

00:02:46,610 --> 00:02:49,880
assistant D does this cockpit does this

00:02:48,650 --> 00:02:51,530
there's a bunch of them that does it do

00:02:49,880 --> 00:02:54,430
this where a certain pull request to

00:02:51,530 --> 00:02:56,959
change is proposed to the project and

00:02:54,430 --> 00:02:58,519
immediately testing is they figured out

00:02:56,959 --> 00:03:00,320
how to do this take takes forever took

00:02:58,519 --> 00:03:02,600
them six months to a year to implement

00:03:00,320 --> 00:03:05,660
something like this figure out how it

00:03:02,600 --> 00:03:07,070
works on the distribution dora debian

00:03:05,660 --> 00:03:09,590
RAL whatever and bring that feedback

00:03:07,070 --> 00:03:13,070
immediately to say hey you broke

00:03:09,590 --> 00:03:16,100
but it's tough for this to happen for

00:03:13,070 --> 00:03:19,000
each of those projects it's difficult to

00:03:16,100 --> 00:03:21,850
make this work so

00:03:19,000 --> 00:03:23,380
let's be clear we probably have a lot of

00:03:21,850 --> 00:03:26,020
people here are excited by the act of

00:03:23,380 --> 00:03:28,030
packaging and that's nice but keep in

00:03:26,020 --> 00:03:30,190
mind it's not exciting for most of

00:03:28,030 --> 00:03:31,660
stream projects it's like the nasty

00:03:30,190 --> 00:03:34,180
stuff that they have to do

00:03:31,660 --> 00:03:37,390
it's the cleaning up the mess of the

00:03:34,180 --> 00:03:39,790
baby the baby is nice but they don't

00:03:37,390 --> 00:03:42,000
want to keep you know taking care of

00:03:39,790 --> 00:03:46,450
that part that part's not the highlight

00:03:42,000 --> 00:03:48,520
so having the latest bits integrated

00:03:46,450 --> 00:03:54,190
with the rest and usable that's exciting

00:03:48,520 --> 00:03:55,840
but the mechanism to do it is not so oh

00:03:54,190 --> 00:03:58,060
we already talked about the example of

00:03:55,840 --> 00:04:01,990
system D but keep in mind system D as

00:03:58,060 --> 00:04:04,690
awesome as it is is completely inert by

00:04:01,990 --> 00:04:07,630
itself it needs the rest a whole bunch

00:04:04,690 --> 00:04:09,010
of other things to run needs to be

00:04:07,630 --> 00:04:11,200
integrated with those things and most

00:04:09,010 --> 00:04:13,300
importantly when it breaks it needs

00:04:11,200 --> 00:04:15,640
to know right away or the people working

00:04:13,300 --> 00:04:17,169
on it need to know right away so what if

00:04:15,640 --> 00:04:21,910
you could immediately know if you're

00:04:17,169 --> 00:04:23,070
upstream change works in Fedora what if

00:04:21,910 --> 00:04:27,910
you're new upstream release

00:04:23,070 --> 00:04:29,440
automatically landed in rawhide what if

00:04:27,910 --> 00:04:33,610
we had something like this just a

00:04:29,440 --> 00:04:36,490
mock-up and here pole request happens

00:04:33,610 --> 00:04:38,650
propose change and a fedora packaging

00:04:36,490 --> 00:04:41,350
service comes along similar to Travis

00:04:38,650 --> 00:04:43,960
similar to - you know Circle CI

00:04:41,350 --> 00:04:45,430
semaphore and so on and says we package

00:04:43,960 --> 00:04:51,669
this and here you can try it out

00:04:45,430 --> 00:04:53,800
but it doesn't work or we package this

00:04:51,669 --> 00:04:56,500
and it will land at rawhide when this

00:04:53,800 --> 00:05:00,400
poor request is merged what if we could

00:04:56,500 --> 00:05:03,820
do that what would we need to make this

00:05:00,400 --> 00:05:08,050
happen so much what we need to make this

00:05:03,820 --> 00:05:10,240
happen okay let's go through the list so

00:05:08,050 --> 00:05:14,890
first of all it's not an easy task right

00:05:10,240 --> 00:05:16,540
sq assume any imagine so first of all we

00:05:14,890 --> 00:05:18,760
need to package the upstream software

00:05:16,540 --> 00:05:21,160
right so in federal for example we need

00:05:18,760 --> 00:05:23,770
spec files

00:05:21,160 --> 00:05:25,330
then we need tests like okay we packaged

00:05:23,770 --> 00:05:30,160
it now we need to verify that the

00:05:25,330 --> 00:05:33,190
software works so any tests okay what's

00:05:30,160 --> 00:05:35,440
next we have these two it's it's pretty

00:05:33,190 --> 00:05:37,030
nice but if we don't use this if we

00:05:35,440 --> 00:05:39,760
don't use the spec file you don't run

00:05:37,030 --> 00:05:41,320
the test and we just like blindly put it

00:05:39,760 --> 00:05:43,270
into the distribution we have no idea

00:05:41,320 --> 00:05:45,250
whether it works so we need we need to

00:05:43,270 --> 00:05:47,950
build a gate we need to make sure that

00:05:45,250 --> 00:05:50,350
if the tests are failing we don't put

00:05:47,950 --> 00:05:55,120
that content into our distribution and

00:05:50,350 --> 00:05:57,190
we keep going on until all is green and

00:05:55,120 --> 00:06:00,220
finally it would be very nice if all of

00:05:57,190 --> 00:06:01,780
this was done automatically so I I for

00:06:00,220 --> 00:06:04,360
example as a package maintainer wouldn't

00:06:01,780 --> 00:06:06,730
need to go and fetch those tarballs and

00:06:04,360 --> 00:06:09,370
edit these lines in spec files and then

00:06:06,730 --> 00:06:11,380
type build and wait like 30 minutes and

00:06:09,370 --> 00:06:13,540
then it failed and now I need to do it

00:06:11,380 --> 00:06:15,310
again I would love to have packaging

00:06:13,540 --> 00:06:17,200
service which would that all of this for

00:06:15,310 --> 00:06:20,130
me and all I would really need to do was

00:06:17,200 --> 00:06:22,780
just yeah I approve this change do it

00:06:20,130 --> 00:06:26,020
let's talk about all these points a

00:06:22,780 --> 00:06:28,530
little bit more so spec files wouldn't

00:06:26,020 --> 00:06:31,480
be nice if we had spec files upstream

00:06:28,530 --> 00:06:33,040
yeah I can see that this is like a very

00:06:31,480 --> 00:06:34,390
controversial team because some of the

00:06:33,040 --> 00:06:36,340
upstream projects don't even care about

00:06:34,390 --> 00:06:38,830
spec files they don't understand them

00:06:36,340 --> 00:06:40,390
they or maybe they understand them or

00:06:38,830 --> 00:06:41,920
maybe they think they understand them

00:06:40,390 --> 00:06:44,260
and then you try to consume them

00:06:41,920 --> 00:06:45,580
downstream and realize that they are

00:06:44,260 --> 00:06:47,290
trying to support like five different

00:06:45,580 --> 00:06:48,820
distribution and the spec file is

00:06:47,290 --> 00:06:51,280
horrible and unusable

00:06:48,820 --> 00:06:54,340
so maybe spec files upstream is not the

00:06:51,280 --> 00:06:56,380
best solution but something somewhere it

00:06:54,340 --> 00:06:58,660
can work somewhere it doesn't so there's

00:06:56,380 --> 00:07:01,630
also another way how to solve this

00:06:58,660 --> 00:07:04,390
so in philosophically we have bunch of

00:07:01,630 --> 00:07:04,840
tools like I don't know how how they are

00:07:04,390 --> 00:07:07,570
called

00:07:04,840 --> 00:07:09,910
but I could inspect generators so in an

00:07:07,570 --> 00:07:11,710
input you you gave the name of that same

00:07:09,910 --> 00:07:14,200
project as an output you get a spec file

00:07:11,710 --> 00:07:15,910
so we could use such mechanism that for

00:07:14,200 --> 00:07:20,020
example there is a new package and PI bi

00:07:15,910 --> 00:07:21,430
and I use the v2 rpm tool and I would

00:07:20,020 --> 00:07:24,120
get a spec file and I can use it right

00:07:21,430 --> 00:07:26,470
away and build a package in fedora

00:07:24,120 --> 00:07:27,590
obviously the like the problem is

00:07:26,470 --> 00:07:29,570
changelog because

00:07:27,590 --> 00:07:31,100
you need to populate it and if the

00:07:29,570 --> 00:07:33,919
changelog doesn't make sense if it's

00:07:31,100 --> 00:07:35,120
like 1000 lines of common messages that

00:07:33,919 --> 00:07:37,400
that's not useful right

00:07:35,120 --> 00:07:39,530
so we need to like figure it out how to

00:07:37,400 --> 00:07:42,139
do it the other thing is release number

00:07:39,530 --> 00:07:43,760
in like name version release the release

00:07:42,139 --> 00:07:45,800
number is specific to build system and

00:07:43,760 --> 00:07:47,990
like build system cares about it so why

00:07:45,800 --> 00:07:49,850
should we as package maintainer should

00:07:47,990 --> 00:07:51,380
like treat release numbers like it

00:07:49,850 --> 00:07:57,020
should be automatically populated by the

00:07:51,380 --> 00:08:00,020
build system okay test so after project

00:07:57,020 --> 00:08:02,150
have tests right so we can easily run

00:08:00,020 --> 00:08:04,790
them and see if the software works in

00:08:02,150 --> 00:08:06,620
our environment then we need to have

00:08:04,790 --> 00:08:10,639
distribution tests or we already have

00:08:06,620 --> 00:08:12,440
them Saddam William spoke in his talk so

00:08:10,639 --> 00:08:14,030
we just run all these tests and when

00:08:12,440 --> 00:08:16,370
they pass we are pretty sure that the

00:08:14,030 --> 00:08:19,400
software works in federal height or in

00:08:16,370 --> 00:08:21,260
the distribution of our choice but the

00:08:19,400 --> 00:08:22,940
thing is that we need to use those which

00:08:21,260 --> 00:08:24,650
are coming with the change so if there's

00:08:22,940 --> 00:08:26,830
a new of stimulus we should use those

00:08:24,650 --> 00:08:30,470
tests which are coming from that release

00:08:26,830 --> 00:08:32,810
and finally every project runs were

00:08:30,470 --> 00:08:35,750
invoked their tests on their own so we

00:08:32,810 --> 00:08:37,130
need then like standard way to invoke it

00:08:35,750 --> 00:08:39,320
so for example we would have a

00:08:37,130 --> 00:08:41,780
definition that you have to do make test

00:08:39,320 --> 00:08:45,620
and like everything will run like that

00:08:41,780 --> 00:08:48,080
would be the like API so we need such

00:08:45,620 --> 00:08:50,330
standard way so let's look at the

00:08:48,080 --> 00:08:54,290
diagram how this like how this would

00:08:50,330 --> 00:08:56,810
work so all nice green box is so wrapped

00:08:54,290 --> 00:08:59,810
up stream project we have a bunch of

00:08:56,810 --> 00:09:01,550
different branches for our four releases

00:08:59,810 --> 00:09:04,070
of our software and you would have

00:09:01,550 --> 00:09:06,680
automation to bring it automatically to

00:09:04,070 --> 00:09:11,209
feather at this gate or

00:09:06,680 --> 00:09:14,660
to like different federal leases so in

00:09:11,209 --> 00:09:17,089
this case the absolute project is all

00:09:14,660 --> 00:09:19,399
cool and put the stack file in the test

00:09:17,089 --> 00:09:22,579
wrapper or standard way to invoke the

00:09:19,399 --> 00:09:24,110
pests in their branches and part of

00:09:22,579 --> 00:09:25,819
their development many projects do this

00:09:24,110 --> 00:09:29,480
we know of many that we maintain that do

00:09:25,819 --> 00:09:32,720
this this is not this is not fictional

00:09:29,480 --> 00:09:33,949
but and you can see certain branches on

00:09:32,720 --> 00:09:35,540
the Fedora sidetracking that

00:09:33,949 --> 00:09:39,559
automatically without any intermediate

00:09:35,540 --> 00:09:42,319
party there's there's the automation

00:09:39,559 --> 00:09:44,929
would need to take into account who made

00:09:42,319 --> 00:09:47,869
the change whether they did a GPG

00:09:44,929 --> 00:09:50,600
signature on a certain tag or whether a

00:09:47,869 --> 00:09:53,749
certain identity pushed into the gate

00:09:50,600 --> 00:09:57,949
forge and then it could land in fedora

00:09:53,749 --> 00:09:59,329
in a different in these branches okay

00:09:57,949 --> 00:10:01,759
thank you

00:09:59,329 --> 00:10:03,439
what if the upstream project doesn't

00:10:01,759 --> 00:10:05,529
care about spec files and doesn't want

00:10:03,439 --> 00:10:08,389
to have spec files in their repository

00:10:05,529 --> 00:10:10,759
then we can create a new git branch like

00:10:08,389 --> 00:10:13,360
github or get la poor beggar or

00:10:10,759 --> 00:10:16,910
somewhere else and get all the upstream

00:10:13,360 --> 00:10:18,740
get all the upstream code stuff all our

00:10:16,910 --> 00:10:21,889
downstream changes which is spec file

00:10:18,740 --> 00:10:23,779
tests test wrappers and even additional

00:10:21,889 --> 00:10:25,550
comments which are fixes from the master

00:10:23,779 --> 00:10:28,399
branch and you will have such branch and

00:10:25,550 --> 00:10:30,740
use this branch to track like the

00:10:28,399 --> 00:10:34,240
upstream LEDs and use it in downstream

00:10:30,740 --> 00:10:38,209
and it would be just like a like simple

00:10:34,240 --> 00:10:40,759
Singapore or a single branch and we

00:10:38,209 --> 00:10:44,059
could use it to populate multiple

00:10:40,759 --> 00:10:45,379
branches so the benefit is like for

00:10:44,059 --> 00:10:47,149
example there is a new upstream release

00:10:45,379 --> 00:10:49,279
and you need to populate three different

00:10:47,149 --> 00:10:51,589
branches in Federer like in this way you

00:10:49,279 --> 00:10:53,839
would only set it in one and you would

00:10:51,589 --> 00:10:56,809
benefit in all three right and this

00:10:53,839 --> 00:10:59,209
really is using get in the way that God

00:10:56,809 --> 00:11:01,670
intended well Venice intended the same

00:10:59,209 --> 00:11:03,470
thing you have a branch you have another

00:11:01,670 --> 00:11:04,819
branch have some different stuff on this

00:11:03,470 --> 00:11:08,319
branch you may push this to a different

00:11:04,819 --> 00:11:11,920
repo and again what upstream says and

00:11:08,319 --> 00:11:14,689
essentially using the tools including

00:11:11,920 --> 00:11:16,819
gitlab github the standard workflows

00:11:14,689 --> 00:11:20,319
they're people who are used to using in

00:11:16,819 --> 00:11:20,319
the way that they were designed

00:11:21,930 --> 00:11:26,440
okay so the another thing we need to

00:11:24,490 --> 00:11:28,900
make all of this happen is gating of

00:11:26,440 --> 00:11:30,250
rawhide so right now row height is not

00:11:28,900 --> 00:11:31,930
gated so whenever there is a new

00:11:30,250 --> 00:11:35,080
upstream Early's it lands in row height

00:11:31,930 --> 00:11:37,180
and that's it it's very like very easy

00:11:35,080 --> 00:11:39,970
to break row height if you're a stimulus

00:11:37,180 --> 00:11:43,720
like changing something so we need to

00:11:39,970 --> 00:11:46,180
build that gate and use it so together

00:11:43,720 --> 00:11:48,400
we are trying like we will do it with

00:11:46,180 --> 00:11:50,740
fedora engineering so we already started

00:11:48,400 --> 00:11:52,170
the discussions and hopefully it will be

00:11:50,740 --> 00:11:55,240
done sooner or later

00:11:52,170 --> 00:11:57,550
and with the gating we have increased

00:11:55,240 --> 00:12:01,510
stability because only the proven tested

00:11:57,550 --> 00:12:04,120
content with land euro height like start

00:12:01,510 --> 00:12:06,250
we can't like you know like enable it on

00:12:04,120 --> 00:12:08,290
all will probably start with some core

00:12:06,250 --> 00:12:10,470
packages with some important packages

00:12:08,290 --> 00:12:14,170
and then we start on board more and more

00:12:10,470 --> 00:12:16,780
an important thing is that if you are

00:12:14,170 --> 00:12:18,610
owner of a package and for example some

00:12:16,780 --> 00:12:20,650
other package breaks your package like

00:12:18,610 --> 00:12:23,260
your dependency you can contribute test

00:12:20,650 --> 00:12:25,870
to that package and say okay so please

00:12:23,260 --> 00:12:27,880
include also my tests to it when you are

00:12:25,870 --> 00:12:30,280
updating your package and whenever my

00:12:27,880 --> 00:12:31,660
tester breaks means that you probably

00:12:30,280 --> 00:12:33,790
introduced the breaking change

00:12:31,660 --> 00:12:36,670
understand some issue and we can work on

00:12:33,790 --> 00:12:38,650
it together but I don't want to find out

00:12:36,670 --> 00:12:40,720
it after like it's already landed row

00:12:38,650 --> 00:12:42,850
height and it's already broken and there

00:12:40,720 --> 00:12:44,470
are bug reports coming and there is fire

00:12:42,850 --> 00:12:46,360
on the roof and I need to like do it

00:12:44,470 --> 00:12:52,450
very quickly let's do it we are still

00:12:46,360 --> 00:12:55,150
working on the code so and finally we

00:12:52,450 --> 00:12:57,100
want the automated packaging service so

00:12:55,150 --> 00:13:00,790
we we call it packet like this is the

00:12:57,100 --> 00:13:02,650
name of the project of the team and so

00:13:00,790 --> 00:13:04,690
said like it will be a set of tools we

00:13:02,650 --> 00:13:06,790
are just starting to be a set of tools

00:13:04,690 --> 00:13:09,490
you can easily run it on your laptop and

00:13:06,790 --> 00:13:11,650
do all the automation or we will provide

00:13:09,490 --> 00:13:13,630
it as a service so we we will run it for

00:13:11,650 --> 00:13:15,910
you and you can just enable it for your

00:13:13,630 --> 00:13:20,830
projects and use it and all your

00:13:15,910 --> 00:13:22,390
packages will be updated so the hardest

00:13:20,830 --> 00:13:23,830
thing about the project was the name you

00:13:22,390 --> 00:13:24,920
are trying to figure it out for like

00:13:23,830 --> 00:13:31,910
three months

00:13:24,920 --> 00:13:34,040
yeah but so one of the things you would

00:13:31,910 --> 00:13:36,019
love to explore is opening for requests

00:13:34,040 --> 00:13:37,819
for new upstream releases so when there

00:13:36,019 --> 00:13:39,559
is a new upstream release the tool or

00:13:37,819 --> 00:13:41,389
the service would create a pull request

00:13:39,559 --> 00:13:43,339
with all the changes and you as a

00:13:41,389 --> 00:13:45,470
maintainer will just review the changes

00:13:43,339 --> 00:13:47,929
and said yeah okay looks good all the

00:13:45,470 --> 00:13:50,119
tests are passing was just ship it or no

00:13:47,929 --> 00:13:54,589
it's broken I need to fix it and you

00:13:50,119 --> 00:13:56,899
just fix it at the same time federal

00:13:54,589 --> 00:13:58,429
engineering be one of their services is

00:13:56,899 --> 00:14:00,799
trying to do the same thing so in the

00:13:58,429 --> 00:14:02,929
end it doesn't like it's an

00:14:00,799 --> 00:14:06,019
implementation detail who actually

00:14:02,929 --> 00:14:09,639
implements it whether it's us or federal

00:14:06,019 --> 00:14:09,639
engineering but we just need the feature

00:14:09,819 --> 00:14:15,169
we also want to bring the feedback from

00:14:12,999 --> 00:14:17,209
downstream back to upstream so whenever

00:14:15,169 --> 00:14:19,339
there is a new of upstream release and

00:14:17,209 --> 00:14:21,829
it breaks Fedora we can easily create

00:14:19,339 --> 00:14:23,809
issue on their tracker or send them an

00:14:21,829 --> 00:14:26,660
email and say your newest option is does

00:14:23,809 --> 00:14:34,819
doesn't work maybe it concerns you maybe

00:14:26,660 --> 00:14:36,589
it doesn't and and it didn't land tell

00:14:34,819 --> 00:14:39,049
them here are the logs please try to

00:14:36,589 --> 00:14:43,910
figure it out and maybe the next release

00:14:39,049 --> 00:14:45,889
it will work okay so what are the

00:14:43,910 --> 00:14:48,199
benefits when you are using this

00:14:45,889 --> 00:14:51,169
workflow when you are using github to

00:14:48,199 --> 00:14:53,389
develop your packages you can use the

00:14:51,169 --> 00:14:55,129
tool pseudo for example right now it's

00:14:53,389 --> 00:14:57,259
very hard to contribute to federal you

00:14:55,129 --> 00:14:59,660
need to become the member need to use

00:14:57,259 --> 00:15:01,610
the tooling and ferry think it helped

00:14:59,660 --> 00:15:04,100
for that when you just clone the repo

00:15:01,610 --> 00:15:06,649
make the changes push and create a

00:15:04,100 --> 00:15:09,259
simple request that's very easy so you

00:15:06,649 --> 00:15:13,039
can use the tools we can use the tools

00:15:09,259 --> 00:15:14,839
we know and keep using them everyone can

00:15:13,039 --> 00:15:19,209
contribute we can benefit from the

00:15:14,839 --> 00:15:19,209
modern techniques like linters or CI

00:15:19,370 --> 00:15:25,370
and finally I can even go and fork some

00:15:23,029 --> 00:15:28,490
package like systemd or Colonel make

00:15:25,370 --> 00:15:30,260
some changes and then push them and see

00:15:28,490 --> 00:15:34,850
if it works in Federer or maybe even

00:15:30,260 --> 00:15:39,589
rail so we are also planning when

00:15:34,850 --> 00:15:41,449
someone just does such fork and like

00:15:39,589 --> 00:15:43,760
changes something we are planning to

00:15:41,449 --> 00:15:45,709
create a repository with the updated

00:15:43,760 --> 00:15:48,769
packages and you can install it on your

00:15:45,709 --> 00:15:57,740
laptop and use it right away and with

00:15:48,769 --> 00:15:59,630
the changes you just made so so the

00:15:57,740 --> 00:16:01,279
title of the talk is also maintained and

00:15:59,630 --> 00:16:03,320
that might be actually it's actually

00:16:01,279 --> 00:16:05,149
even confusing still for me like what

00:16:03,320 --> 00:16:07,610
does it mean to alter maintain the thing

00:16:05,149 --> 00:16:08,990
is that you a package maintainer or a

00:16:07,610 --> 00:16:11,570
upstream developer you are still

00:16:08,990 --> 00:16:13,760
responsible for the content and it's

00:16:11,570 --> 00:16:17,060
still your baby we don't want to mess

00:16:13,760 --> 00:16:18,800
with your baby we just want to keep to

00:16:17,060 --> 00:16:20,449
disc it up to date so whenever you do

00:16:18,800 --> 00:16:22,880
some changes upstream or in the source

00:16:20,449 --> 00:16:25,459
repository we just take the changes and

00:16:22,880 --> 00:16:28,190
move them downstream and tell you the

00:16:25,459 --> 00:16:29,839
results how it goes so we never learned

00:16:28,190 --> 00:16:32,510
anything broken you are still doing all

00:16:29,839 --> 00:16:34,910
the decisions it's still up to you we

00:16:32,510 --> 00:16:38,149
are just doing the hard work we are just

00:16:34,910 --> 00:16:41,680
changing diapers yeah it's your baby we

00:16:38,149 --> 00:16:41,680
just want to change the diapers for you

00:16:42,730 --> 00:16:56,830
we need t-shirts so as I said this is

00:16:55,000 --> 00:16:58,870
not an easy task this is not an easy

00:16:56,830 --> 00:17:01,150
change there are still many things we

00:16:58,870 --> 00:17:02,470
need to address so for example destroy

00:17:01,150 --> 00:17:04,660
by changes in fedora

00:17:02,470 --> 00:17:07,930
when we need to change 3000 spec files

00:17:04,660 --> 00:17:08,770
so could this this system be used for

00:17:07,930 --> 00:17:12,760
such a thing

00:17:08,770 --> 00:17:16,060
we don't know maybe yes maybe no stuff

00:17:12,760 --> 00:17:18,240
said like for some people packaging is

00:17:16,060 --> 00:17:20,620
not exciting but for some people it is

00:17:18,240 --> 00:17:22,390
what do we do with such thing we don't

00:17:20,620 --> 00:17:24,940
want to take packaging away from people

00:17:22,390 --> 00:17:28,540
who love it so maybe they don't want to

00:17:24,940 --> 00:17:31,450
use such system and finally this also

00:17:28,540 --> 00:17:33,340
means that we will like close the gap

00:17:31,450 --> 00:17:34,990
between upstream and downstream and

00:17:33,340 --> 00:17:37,390
again like this might be disturbing for

00:17:34,990 --> 00:17:42,670
some upstream communities so we need to

00:17:37,390 --> 00:17:44,470
work and figure out how to do this so we

00:17:42,670 --> 00:17:50,050
are almost running out of time yeah

00:17:44,470 --> 00:17:52,930
let's wrap up well let's just say I

00:17:50,050 --> 00:17:55,090
think here's what we want to wear we

00:17:52,930 --> 00:17:57,130
want to get to fedora should be the

00:17:55,090 --> 00:17:59,680
defect of place to land upstream work

00:17:57,130 --> 00:18:01,870
should just happen as a side effect of

00:17:59,680 --> 00:18:04,180
doing the work if you have said if you

00:18:01,870 --> 00:18:07,920
have set things up if you are the right

00:18:04,180 --> 00:18:10,600
person who's who's whose identity is

00:18:07,920 --> 00:18:15,700
Fedora has signed off on it you just

00:18:10,600 --> 00:18:17,560
land and it should be packaged as a part

00:18:15,700 --> 00:18:19,240
of complete Linux we should provide the

00:18:17,560 --> 00:18:21,010
feedback is necessary upstream and the

00:18:19,240 --> 00:18:23,890
automation that's necessary to

00:18:21,010 --> 00:18:27,220
accomplish this so yes let's go to

00:18:23,890 --> 00:18:29,170
questions ok so how can you help give us

00:18:27,220 --> 00:18:32,110
feedback please give us use cases or

00:18:29,170 --> 00:18:36,510
become an early adopter or give us

00:18:32,110 --> 00:18:36,510
questions right now yes please

00:18:43,230 --> 00:18:48,730
so the question is which parts of this

00:18:46,240 --> 00:18:51,730
exists today if any and whether it's

00:18:48,730 --> 00:18:54,039
pie-in-the-sky I would say that 90% of

00:18:51,730 --> 00:18:55,539
the ingredients exist rawhide gating is

00:18:54,039 --> 00:18:57,970
one of the key things that doesn't exist

00:18:55,539 --> 00:19:01,710
yet and we're basically tying them

00:18:57,970 --> 00:19:04,960
together Adam wants to answer this

00:19:01,710 --> 00:19:07,120
another question okay so we're not we're

00:19:04,960 --> 00:19:09,309
not saying invent all the tools tying

00:19:07,120 --> 00:19:12,399
together in a workflow that has this

00:19:09,309 --> 00:19:14,080
effect on upstream so that's that's the

00:19:12,399 --> 00:19:15,940
job of the team to work together with

00:19:14,080 --> 00:19:19,360
the people who own these tools to bring

00:19:15,940 --> 00:19:24,039
them together and undo that so yes and

00:19:19,360 --> 00:19:25,419
no Dominic has a I just want to point

00:19:24,039 --> 00:19:27,760
out it's not completely pine this guy

00:19:25,419 --> 00:19:31,000
because we have we have packages that do

00:19:27,760 --> 00:19:32,980
that so it's not completely dreamt up

00:19:31,000 --> 00:19:35,559
yeah by the way like a bunch of the

00:19:32,980 --> 00:19:37,360
examples I had like cocked that lands

00:19:35,559 --> 00:19:40,120
automated releases from upstream into

00:19:37,360 --> 00:19:42,460
Fedora and of course into Debian as well

00:19:40,120 --> 00:19:44,919
but all of these places automatically

00:19:42,460 --> 00:19:47,980
every two weeks without without touching

00:19:44,919 --> 00:19:57,850
the Fedora tooling just signing a tag in

00:19:47,980 --> 00:19:59,440
in git obviously if we want if people

00:19:57,850 --> 00:20:03,149
come and want to join in on the effort

00:19:59,440 --> 00:20:03,149
work together on it that's great

00:20:32,520 --> 00:20:38,160
so it's obviously a harder problem than

00:20:35,400 --> 00:20:40,470
the ones where then the ones where it's

00:20:38,160 --> 00:20:42,420
trivial to run in any environment but I

00:20:40,470 --> 00:20:44,070
know that Debian has solutions for this

00:20:42,420 --> 00:20:45,930
with Auto packaged tests they do they

00:20:44,070 --> 00:20:47,310
extract sources sometimes even build it

00:20:45,930 --> 00:20:50,070
and then run the tests inside of their

00:20:47,310 --> 00:20:52,260
environment or there's many solutions to

00:20:50,070 --> 00:20:55,230
this that we can try in general though

00:20:52,260 --> 00:20:57,450
if we if we cover the ones that are easy

00:20:55,230 --> 00:21:00,120
in fedora the thousands of packages that

00:20:57,450 --> 00:21:02,160
do work and leave those exceptions to

00:21:00,120 --> 00:21:04,290
then do the hard work of getting them on

00:21:02,160 --> 00:21:06,450
board later will prove the idea before

00:21:04,290 --> 00:21:10,260
we then try and solve every really tough

00:21:06,450 --> 00:21:13,230
problem any other question how much time

00:21:10,260 --> 00:21:17,330
do we have one more three minutes we've

00:21:13,230 --> 00:21:17,330
got time Dennis

00:21:19,390 --> 00:21:34,960
ah that's that's definitely a good

00:21:32,230 --> 00:21:37,090
discussion point so the question is can

00:21:34,960 --> 00:21:39,100
we can we make some of this work for new

00:21:37,090 --> 00:21:43,600
packages with the new package workflow

00:21:39,100 --> 00:21:48,100
easier and did that have been brought up

00:21:43,600 --> 00:21:50,500
and I think it's plausible and I think I

00:21:48,100 --> 00:21:51,700
think it's worth discussing I don't I

00:21:50,500 --> 00:21:53,740
don't have we I don't think we have an

00:21:51,700 --> 00:21:56,380
answer there but we definitely in the

00:21:53,740 --> 00:21:58,120
last couple days discuss this I think we

00:21:56,380 --> 00:21:59,669
haven't touched on it much so we can

00:21:58,120 --> 00:22:03,360
definitely put it on the roadmap and

00:21:59,669 --> 00:22:06,360
start thinking about it how to do it

00:22:03,360 --> 00:22:06,360
yeah

00:22:18,760 --> 00:22:23,150
that's a good question so how do we

00:22:20,960 --> 00:22:24,530
envision it working with upstream ain't

00:22:23,150 --> 00:22:26,260
a nurse taking care of more food or

00:22:24,530 --> 00:22:30,640
packaging or Fedora maintainer 'he's

00:22:26,260 --> 00:22:35,840
contributing packaging work upstream

00:22:30,640 --> 00:22:38,440
also other right so how do we in general

00:22:35,840 --> 00:22:43,130
I think all two are all three really

00:22:38,440 --> 00:22:45,740
first one is in many cases if if if you

00:22:43,130 --> 00:22:47,300
can contribute upstream and they're open

00:22:45,740 --> 00:22:49,220
to the idea of having a spec file there

00:22:47,300 --> 00:22:51,590
an invocation for the tests and so on in

00:22:49,220 --> 00:22:53,270
a way that works then yes it's always

00:22:51,590 --> 00:22:55,670
good to community to contribute to the

00:22:53,270 --> 00:22:57,920
community directly and especially for

00:22:55,670 --> 00:22:59,480
rawhide we want that bat to be tight but

00:22:57,920 --> 00:23:02,840
if it doesn't work and we have the

00:22:59,480 --> 00:23:05,420
option of branching upstream the way

00:23:02,840 --> 00:23:08,630
we'd get and doing the work there and

00:23:05,420 --> 00:23:11,030
again focusing the the human tasks the

00:23:08,630 --> 00:23:12,530
creative tasks of packaging the crafting

00:23:11,030 --> 00:23:13,880
of the spec file just so on all of that

00:23:12,530 --> 00:23:16,070
from the packager and letting the

00:23:13,880 --> 00:23:18,560
mundane task be done automatically that

00:23:16,070 --> 00:23:21,650
happens and landon rawhide in addition

00:23:18,560 --> 00:23:23,390
after a branch happens in raw hide from

00:23:21,650 --> 00:23:25,190
rawhide to a release branch of fedora

00:23:23,390 --> 00:23:27,260
there's a lot of good packaging work

00:23:25,190 --> 00:23:29,690
that needs to be done there and i

00:23:27,260 --> 00:23:31,010
although perhaps with the same tooling

00:23:29,690 --> 00:23:35,090
like you can run these on your laptop

00:23:31,010 --> 00:23:37,490
and so are interesting to use there it's

00:23:35,090 --> 00:23:39,410
not really the focus of this effort and

00:23:37,490 --> 00:23:40,850
so there's tons of packaging work to be

00:23:39,410 --> 00:23:42,590
done there to make sure that security

00:23:40,850 --> 00:23:44,210
fixes are applied appropriately the

00:23:42,590 --> 00:23:47,290
right decisions are made as far as

00:23:44,210 --> 00:23:50,390
rebase is backports and so on and

00:23:47,290 --> 00:23:52,550
there's there's tons of activity for a

00:23:50,390 --> 00:23:55,190
distribution to do there in fact it's

00:23:52,550 --> 00:23:57,410
the main interesting part i would say of

00:23:55,190 --> 00:23:59,150
the distribution both the work for

00:23:57,410 --> 00:24:00,950
crafting how the distribution comes

00:23:59,150 --> 00:24:03,440
together and we try to hope that happens

00:24:00,950 --> 00:24:05,870
in source kit and then making sure

00:24:03,440 --> 00:24:07,970
that's well maintained works continues

00:24:05,870 --> 00:24:11,950
to work well after the branch we're out

00:24:07,970 --> 00:24:12,360
of time thank you for coming

00:24:11,950 --> 00:24:20,390
you

00:24:12,360 --> 00:24:20,390

YouTube URL: https://www.youtube.com/watch?v=KpF27v6K4Oc


