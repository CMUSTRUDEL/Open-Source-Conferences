Title: Scale Your Auditing Events
Publication date: 2019-03-04
Playlist: DevConfCZ 2019
Description: 
	Presentation name: Scale Your Auditing Events
Speaker: Philipp Krenn
Description:  The Linux Audit daemon is responsible for writing audit records to the disk, which you can then access with ausearch and aureport. However, it turned out that parsing and centralizing these records is not as easy as you would hope. Elastic's new Auditbeat fixes this by keeping the original configuration, but ships them to a centralized location where you can easily visualize all events. You can also use Auditbeat to detect changes to critical files, like binaries and configuration files, and identify potential security policy violations. This talk shows you what can you do to discover changes, events, and potential security breaches as soon as possible on interactive dashboards. Additionally, we are combining Auditd events with logs, which are security relevant.
[ https://sched.co/Jcor ]
Captions: 
	00:00:05,270 --> 00:00:12,270
good morning everybody thanks for

00:00:09,240 --> 00:00:14,340
joining so early let's see if we will

00:00:12,270 --> 00:00:15,900
double in number during the course of

00:00:14,340 --> 00:00:18,499
this talk but let's see what we can take

00:00:15,900 --> 00:00:21,539
this so I want to talk a bit about

00:00:18,499 --> 00:00:24,409
auditing and generally how to figure out

00:00:21,539 --> 00:00:28,859
security events because often times

00:00:24,409 --> 00:00:30,239
security looks like this or at least

00:00:28,859 --> 00:00:32,009
oftentimes we have the feeling it is

00:00:30,239 --> 00:00:33,360
like that that the vendor or whoever

00:00:32,009 --> 00:00:34,950
you're talking to is sitting in the

00:00:33,360 --> 00:00:36,750
middle and while the data is being

00:00:34,950 --> 00:00:39,090
exposed there is still sitting there and

00:00:36,750 --> 00:00:41,490
saying everything is fine and we kind of

00:00:39,090 --> 00:00:44,130
want to avoid that or generally I would

00:00:41,490 --> 00:00:46,620
say the stages how bad something could

00:00:44,130 --> 00:00:48,360
be would be something like this worst

00:00:46,620 --> 00:00:50,250
case would probably you learn something

00:00:48,360 --> 00:00:52,440
bad happen from your users or from the

00:00:50,250 --> 00:00:56,190
press you're not going to have a good

00:00:52,440 --> 00:00:58,080
day when if that happens next step is

00:00:56,190 --> 00:01:00,180
maybe that somebody takes your data and

00:00:58,080 --> 00:01:01,920
that happens unfortunately quite

00:01:00,180 --> 00:01:03,900
frequently that somebody takes you data

00:01:01,920 --> 00:01:05,250
and then ask for a ransom to get your

00:01:03,900 --> 00:01:09,030
data back or maybe not get your data

00:01:05,250 --> 00:01:10,680
back or you just see them you can't

00:01:09,030 --> 00:01:12,480
provide a spill because somebody got a

00:01:10,680 --> 00:01:14,760
hold of some of your credentials or X

00:01:12,480 --> 00:01:17,010
experiences for example your AWS keys

00:01:14,760 --> 00:01:20,159
and started mining bitcoins then it's

00:01:17,010 --> 00:01:22,080
just getting very expensive maybe a bit

00:01:20,159 --> 00:01:23,340
embarrassing but mainly expensive so

00:01:22,080 --> 00:01:25,770
that's okay

00:01:23,340 --> 00:01:29,220
ideally you learn about it yourself

00:01:25,770 --> 00:01:30,870
after the fact and even better you learn

00:01:29,220 --> 00:01:33,180
it yourself that something has happened

00:01:30,870 --> 00:01:35,190
and you can even prove what actually has

00:01:33,180 --> 00:01:36,750
happened and yet here it's like how can

00:01:35,190 --> 00:01:39,210
I prove what actually happened to my

00:01:36,750 --> 00:01:41,549
system what what is going on and

00:01:39,210 --> 00:01:43,470
basically we want to avoid the bottom

00:01:41,549 --> 00:01:45,299
half where you figure out everything is

00:01:43,470 --> 00:01:48,180
on fire and everything is terrible and

00:01:45,299 --> 00:01:51,740
we don't want to go there that's the

00:01:48,180 --> 00:01:53,400
general idea so where do we start

00:01:51,740 --> 00:01:56,400
obviously there are no silver bullets

00:01:53,400 --> 00:02:00,119
and everybody promising you a silver

00:01:56,400 --> 00:02:02,159
bullet arm is probably wrong in one way

00:02:00,119 --> 00:02:04,170
or another so well there are no silver

00:02:02,159 --> 00:02:08,060
bullets but I want to start with oddity

00:02:04,170 --> 00:02:08,060
simply using oddity

00:02:08,310 --> 00:02:16,950
okay maybe so it's that's the

00:02:14,220 --> 00:02:18,569
description from the main page all it is

00:02:16,950 --> 00:02:21,270
the user space component from the

00:02:18,569 --> 00:02:24,060
auditing subsystem and it's just

00:02:21,270 --> 00:02:27,090
generating the week the new banks

00:02:24,060 --> 00:02:30,420
basically that it has captured and it

00:02:27,090 --> 00:02:31,920
looks something like this or let's start

00:02:30,420 --> 00:02:34,980
with the features generally you can

00:02:31,920 --> 00:02:37,230
access file a metric accesses you can

00:02:34,980 --> 00:02:39,690
see any system calls or depending on how

00:02:37,230 --> 00:02:41,430
you configure it you can catch those you

00:02:39,690 --> 00:02:43,709
can see which commands have been run by

00:02:41,430 --> 00:02:45,690
user and you can generally just get

00:02:43,709 --> 00:02:47,400
security events and it looks something

00:02:45,690 --> 00:02:49,709
like this you have your application and

00:02:47,400 --> 00:02:52,950
your application is doing some course to

00:02:49,709 --> 00:02:56,010
the kernel and then based on three

00:02:52,950 --> 00:02:57,239
filters where you filter them based by

00:02:56,010 --> 00:03:00,630
user by task

00:02:57,239 --> 00:03:02,730
when they exit on the exit code you can

00:03:00,630 --> 00:03:05,250
always check like does it pass through

00:03:02,730 --> 00:03:07,470
my exclude list and if it does then you

00:03:05,250 --> 00:03:10,080
can record the event in the auditing

00:03:07,470 --> 00:03:12,450
team so basically if it passes you're

00:03:10,080 --> 00:03:14,250
exclude rules then you're recording the

00:03:12,450 --> 00:03:18,150
event and you're collecting what

00:03:14,250 --> 00:03:21,600
somebody is doing so to just quickly

00:03:18,150 --> 00:03:24,299
show how this might look like so let's

00:03:21,600 --> 00:03:26,519
start with all report this has been

00:03:24,299 --> 00:03:29,220
running very shortly here and just to

00:03:26,519 --> 00:03:31,109
give you an idea I set this up yesterday

00:03:29,220 --> 00:03:34,319
evening so it was only running for like

00:03:31,109 --> 00:03:37,440
one and a half minutes but you can also

00:03:34,319 --> 00:03:40,709
really see like configuration changes

00:03:37,440 --> 00:03:43,410
number of login attempts how many groups

00:03:40,709 --> 00:03:46,470
and users and roles are there so you

00:03:43,410 --> 00:03:48,810
just get an overview of what has been

00:03:46,470 --> 00:03:52,319
going on on your system that's the all

00:03:48,810 --> 00:03:57,720
report you can also use the brother or

00:03:52,319 --> 00:04:01,170
search and for example to get just the

00:03:57,720 --> 00:04:03,540
raw events you just type in raw and then

00:04:01,170 --> 00:04:07,220
you could see this for example is one

00:04:03,540 --> 00:04:08,850
possible event so every event has a type

00:04:07,220 --> 00:04:11,100
here you can see okay

00:04:08,850 --> 00:04:13,950
a demon ended that was when I actually

00:04:11,100 --> 00:04:16,620
stopped Oddity you can see there is a

00:04:13,950 --> 00:04:18,750
message there is the audit event and the

00:04:16,620 --> 00:04:20,040
first thing here this is a time step and

00:04:18,750 --> 00:04:22,050
afterwards there is

00:04:20,040 --> 00:04:23,820
so after a column that is the idea of

00:04:22,050 --> 00:04:26,670
the event you could have the same

00:04:23,820 --> 00:04:28,410
timestamp and the same ID for events if

00:04:26,670 --> 00:04:31,770
you capture multiple things from one

00:04:28,410 --> 00:04:33,720
processes for example and then you have

00:04:31,770 --> 00:04:35,610
other key value pairs of what actually

00:04:33,720 --> 00:04:38,550
happened so for example you see the

00:04:35,610 --> 00:04:41,490
result was a success the process ID was

00:04:38,550 --> 00:04:43,890
one the auditing ID was zero and you

00:04:41,490 --> 00:04:47,970
extract those and to look at the event

00:04:43,890 --> 00:04:51,450
before here the user started something

00:04:47,970 --> 00:04:52,890
with no it was a different time stream

00:04:51,450 --> 00:04:55,020
and a different ID so this is a totally

00:04:52,890 --> 00:04:59,160
different event and you can see

00:04:55,020 --> 00:05:02,310
basically you know pseudo open the

00:04:59,160 --> 00:05:06,410
session one specific host name and it

00:05:02,310 --> 00:05:09,120
was a success you could also do add

00:05:06,410 --> 00:05:13,620
additional filters so you could say I

00:05:09,120 --> 00:05:16,410
won't success no we don't have any

00:05:13,620 --> 00:05:18,360
failed events in our audit log if you

00:05:16,410 --> 00:05:20,190
would for example say I only want the

00:05:18,360 --> 00:05:31,260
successful events that ended isn't

00:05:20,190 --> 00:05:34,950
successful yes yeah that is true and

00:05:31,260 --> 00:05:39,300
that's why it's not working so this one

00:05:34,950 --> 00:05:43,380
works if I type no then you don't have

00:05:39,300 --> 00:05:45,060
any matches with yes then you see just

00:05:43,380 --> 00:05:48,360
the successful events just like the one

00:05:45,060 --> 00:05:50,460
we just had one thing that you can

00:05:48,360 --> 00:05:52,620
already see is that these messages are

00:05:50,460 --> 00:05:54,540
already quite varied so this one is

00:05:52,620 --> 00:05:58,920
relatively simple this one is much more

00:05:54,540 --> 00:06:01,470
complex where you have the specific time

00:05:58,920 --> 00:06:05,490
step in there there as well so parsing

00:06:01,470 --> 00:06:08,250
that can be a pain and if you want to

00:06:05,490 --> 00:06:09,570
figure out like what this exists or what

00:06:08,250 --> 00:06:11,310
are the specific types that are

00:06:09,570 --> 00:06:12,420
available and what is going on and you

00:06:11,310 --> 00:06:15,600
can find all of those in the

00:06:12,420 --> 00:06:19,620
documentation so for example if you go

00:06:15,600 --> 00:06:21,870
to the documentation that example you

00:06:19,620 --> 00:06:24,420
will find various examples and they just

00:06:21,870 --> 00:06:27,180
walk you through things that can happen

00:06:24,420 --> 00:06:30,060
and types that happen and and explain

00:06:27,180 --> 00:06:31,980
those sometimes you also want to set up

00:06:30,060 --> 00:06:33,969
more specific rules that you want to

00:06:31,980 --> 00:06:37,989
have yourself in the

00:06:33,969 --> 00:06:39,849
repository of all it D you have a bunch

00:06:37,989 --> 00:06:41,709
of rules that might make sense for you

00:06:39,849 --> 00:06:44,229
or might not make sense for example

00:06:41,709 --> 00:06:46,299
we'll come back to that one but for

00:06:44,229 --> 00:06:50,939
example for a power abuse this is

00:06:46,299 --> 00:06:50,939
basically you make it slightly larger

00:06:51,959 --> 00:06:57,819
what is happening here basically is a

00:06:55,259 --> 00:07:00,309
privileged user is looking into the home

00:06:57,819 --> 00:07:02,139
directory of an unprivileged user so the

00:07:00,309 --> 00:07:04,239
user ID is greater than a thousand

00:07:02,139 --> 00:07:06,579
privileged user basically we're checking

00:07:04,239 --> 00:07:08,379
somebody is using or abusing their sudo

00:07:06,579 --> 00:07:11,049
privileges to look into somebody else's

00:07:08,379 --> 00:07:14,079
home directory we actually try it out

00:07:11,049 --> 00:07:16,360
afterwards as well but here in the

00:07:14,079 --> 00:07:18,879
repository you have a couple of examples

00:07:16,360 --> 00:07:21,369
of things that you might want to try out

00:07:18,879 --> 00:07:23,110
or if you try to generate any rules this

00:07:21,369 --> 00:07:24,579
is kind of a good starting point to see

00:07:23,110 --> 00:07:31,479
which are the rules that are available

00:07:24,579 --> 00:07:34,539
and people can actually use okay so we

00:07:31,479 --> 00:07:36,129
saw logs we saw more rules something

00:07:34,539 --> 00:07:37,659
that is still a bit work in progress but

00:07:36,129 --> 00:07:39,669
there has been some progress but it's

00:07:37,659 --> 00:07:42,459
like a large issue is for example talker

00:07:39,669 --> 00:07:44,709
support or having namespace support

00:07:42,459 --> 00:07:46,479
figuring out like some event happened

00:07:44,709 --> 00:07:47,829
just in this specific namespace or under

00:07:46,479 --> 00:07:51,459
this specific user them in that

00:07:47,829 --> 00:07:53,649
namespace it's a fairly complex issue

00:07:51,459 --> 00:07:55,899
and links to various other sub issues

00:07:53,649 --> 00:07:58,929
and that is still a work in progress so

00:07:55,899 --> 00:08:01,329
the idea is you don't just have one

00:07:58,929 --> 00:08:03,309
system but you have many systems and you

00:08:01,329 --> 00:08:05,169
basically want to collect all of them

00:08:03,309 --> 00:08:08,229
and want to see what is going on over

00:08:05,169 --> 00:08:12,449
all my systems so the problem then leads

00:08:08,229 --> 00:08:14,979
to how do you centralize this and now

00:08:12,449 --> 00:08:16,479
it's kind of like where I'm from I work

00:08:14,979 --> 00:08:20,919
for elastic the company behind the less

00:08:16,479 --> 00:08:24,159
observed logstash Cubana beats and we

00:08:20,919 --> 00:08:27,189
try to tackle this so I generally will

00:08:24,159 --> 00:08:29,469
hello world programs and this is like a

00:08:27,189 --> 00:08:32,769
hello world of quality and to see where

00:08:29,469 --> 00:08:35,860
we can get with this one and so anybody

00:08:32,769 --> 00:08:38,229
not familiar with our stack almost most

00:08:35,860 --> 00:08:39,710
kind of familiar you know we started off

00:08:38,229 --> 00:08:42,740
with the famous edge stack

00:08:39,710 --> 00:08:45,260
Lokesh Cubana and then we tried to morph

00:08:42,740 --> 00:08:47,270
it a bit further we added the so called

00:08:45,260 --> 00:08:50,270
beats which are like lightweight agent

00:08:47,270 --> 00:08:53,270
or forwarders then we try to add that

00:08:50,270 --> 00:08:55,310
b2l and then we came up with Melkor elk

00:08:53,270 --> 00:08:59,090
beep which might look something like

00:08:55,310 --> 00:09:02,000
this you can see it's B and stl horns it

00:08:59,090 --> 00:09:03,800
has everything but we're always a bit

00:09:02,000 --> 00:09:05,630
about scaling and this is not very

00:09:03,800 --> 00:09:07,400
scalable because what happens if you

00:09:05,630 --> 00:09:08,720
have another open-source product then we

00:09:07,400 --> 00:09:10,700
get another letter and whatever that

00:09:08,720 --> 00:09:13,280
letter will be it will be very hard to

00:09:10,700 --> 00:09:16,460
make up another enemy and also we need

00:09:13,280 --> 00:09:18,770
to do redo the entire branding so we

00:09:16,460 --> 00:09:20,750
kind of got rid of the peg or LP we we

00:09:18,770 --> 00:09:22,190
do have sometimes stickers with it but

00:09:20,750 --> 00:09:24,110
now we just call it the elastic stack

00:09:22,190 --> 00:09:26,120
because it's super scalable whatever

00:09:24,110 --> 00:09:28,160
component we have we just stick it in

00:09:26,120 --> 00:09:29,990
there maybe we have to meet raw the

00:09:28,160 --> 00:09:31,460
colors and add one component somewhere

00:09:29,990 --> 00:09:33,230
here but otherwise the name stays the

00:09:31,460 --> 00:09:35,450
same so that's a bit easier for us and

00:09:33,230 --> 00:09:38,840
generally what this looks like is and

00:09:35,450 --> 00:09:40,520
we'll only use these three components

00:09:38,840 --> 00:09:42,440
here so you have peat which is like the

00:09:40,520 --> 00:09:44,060
lightweight agent of schipper it's

00:09:42,440 --> 00:09:46,130
written in goes you have native binaries

00:09:44,060 --> 00:09:48,020
and it's as small as possible just to

00:09:46,130 --> 00:09:49,370
forward in X for example for log files

00:09:48,020 --> 00:09:51,680
we have something called fine Beach

00:09:49,370 --> 00:09:54,260
which I always describe it's a bit like

00:09:51,680 --> 00:09:57,770
came F over the network so it's just

00:09:54,260 --> 00:10:00,110
forwarding log events then we have log

00:09:57,770 --> 00:10:03,260
stash to parse the data for example and

00:10:00,110 --> 00:10:05,530
enrich it what could be enrichment and

00:10:03,260 --> 00:10:05,530
it guesses

00:10:08,889 --> 00:10:12,860
yes for example if you have an IP

00:10:11,149 --> 00:10:14,660
address and you want to get the GU point

00:10:12,860 --> 00:10:16,850
where the IP address that could be there

00:10:14,660 --> 00:10:19,069
in Richmond State and we generally do

00:10:16,850 --> 00:10:21,860
that when we ingest events so we

00:10:19,069 --> 00:10:23,839
actually enrich it when we store it so

00:10:21,860 --> 00:10:26,959
that search and retrieval afterwards is

00:10:23,839 --> 00:10:29,180
much faster also for example the IP

00:10:26,959 --> 00:10:31,579
addresses IP ranges can change over time

00:10:29,180 --> 00:10:34,009
and so it might be a good idea to

00:10:31,579 --> 00:10:36,110
actually take that kind of owner at the

00:10:34,009 --> 00:10:38,059
point of time when you ingest event

00:10:36,110 --> 00:10:39,649
because six months later somebody else

00:10:38,059 --> 00:10:42,649
might own the IP address and it might

00:10:39,649 --> 00:10:44,029
have just moved around so that's what

00:10:42,649 --> 00:10:46,730
laksa she's doing there Lester search is

00:10:44,029 --> 00:10:49,339
just storing everything and then we have

00:10:46,730 --> 00:10:51,920
Cabana to visualize it and today I will

00:10:49,339 --> 00:10:54,439
just focus on pizza let's search and

00:10:51,920 --> 00:10:58,459
Cabana use those how to collect things

00:10:54,439 --> 00:11:00,829
so and all of that there is a Pecha to

00:10:58,459 --> 00:11:03,620
license so you can just take it and go

00:11:00,829 --> 00:11:06,709
while with it um so the first thing we

00:11:03,620 --> 00:11:08,420
did is I showed you the on search raw

00:11:06,709 --> 00:11:10,910
like the Royal Bank logs and they were

00:11:08,420 --> 00:11:14,000
also in a file of the file system so the

00:11:10,910 --> 00:11:16,100
natural thing is we point a file beat to

00:11:14,000 --> 00:11:19,250
the file and said like okay collect this

00:11:16,100 --> 00:11:20,870
file and then we try to parse it by the

00:11:19,250 --> 00:11:22,670
way we added something called file bit

00:11:20,870 --> 00:11:25,069
modules now because we figured out there

00:11:22,670 --> 00:11:26,600
are some things that are very frequent

00:11:25,069 --> 00:11:29,089
that people need to do very frequently

00:11:26,600 --> 00:11:30,170
for example collect nginx locks or my c4

00:11:29,089 --> 00:11:32,029
locks or something like that

00:11:30,170 --> 00:11:34,040
and we have so-called modules for those

00:11:32,029 --> 00:11:37,850
so basically we tell file big hey

00:11:34,040 --> 00:11:39,470
collect nginx or in our case oddity and

00:11:37,850 --> 00:11:42,559
it really not automatically on your

00:11:39,470 --> 00:11:45,050
operating system ubuntu it's in bar lock

00:11:42,559 --> 00:11:47,660
whatever you're trying to get it will

00:11:45,050 --> 00:11:49,879
know okay this file is what this locked

00:11:47,660 --> 00:11:51,769
file is in this location and the default

00:11:49,879 --> 00:11:53,870
format for your operating system is this

00:11:51,769 --> 00:11:55,579
it will then also know how to parse that

00:11:53,870 --> 00:11:58,550
automatically and you don't need to set

00:11:55,579 --> 00:12:00,170
up those rules for every single hole not

00:11:58,550 --> 00:12:02,779
everybody needs to set up the same rules

00:12:00,170 --> 00:12:04,699
for nginx for example because well

00:12:02,779 --> 00:12:06,679
previously with log stash you would

00:12:04,699 --> 00:12:09,510
always add your custom rules to say that

00:12:06,679 --> 00:12:12,900
this is nginx and this is my secret

00:12:09,510 --> 00:12:14,580
is an Apache HTTP it was kind of boring

00:12:12,900 --> 00:12:18,180
that everybody had to do the same thing

00:12:14,580 --> 00:12:20,460
so we kind of got cleverer and we we do

00:12:18,180 --> 00:12:23,310
stuff like that automatically no now

00:12:20,460 --> 00:12:27,330
what do we even have here so just to

00:12:23,310 --> 00:12:30,330
give you an idea sudo VI you see file

00:12:27,330 --> 00:12:33,420
bit file bit game this is where the file

00:12:30,330 --> 00:12:35,790
bit configuration lives and to collect

00:12:33,420 --> 00:12:37,830
the oddity event what I'm doing here is

00:12:35,790 --> 00:12:41,400
basically I say I have the file bit

00:12:37,830 --> 00:12:43,470
module I pointed to oddity and I add

00:12:41,400 --> 00:12:46,400
some tags for example here this is the

00:12:43,470 --> 00:12:50,010
name of my instance I just give it some

00:12:46,400 --> 00:12:52,620
hats because we can enrich it with cloud

00:12:50,010 --> 00:12:54,990
metadata and host metadata and then I

00:12:52,620 --> 00:12:57,180
just put it or throw it to my

00:12:54,990 --> 00:12:59,130
elasticsearch instance with username and

00:12:57,180 --> 00:13:02,430
everything and this is all you need to

00:12:59,130 --> 00:13:06,420
do to collect that quality minute what

00:13:02,430 --> 00:13:08,970
that looks like is if I had over two we

00:13:06,420 --> 00:13:10,500
have dashboards for those modules we

00:13:08,970 --> 00:13:11,730
generally have dashboards to visualize

00:13:10,500 --> 00:13:15,210
what has happened here

00:13:11,730 --> 00:13:20,040
so if I search for audit D and you see

00:13:15,210 --> 00:13:22,740
the file bit what you see since I only

00:13:20,040 --> 00:13:25,530
had Oddity running for a short amount of

00:13:22,740 --> 00:13:29,760
time at night tonight let's change the

00:13:25,530 --> 00:13:32,640
timeframe to the last 24 hours and you

00:13:29,760 --> 00:13:34,650
can see these vertically banks we have

00:13:32,640 --> 00:13:36,510
in that auditing block so this is a bit

00:13:34,650 --> 00:13:38,070
like the whole report where you saw this

00:13:36,510 --> 00:13:40,440
was the overview of things that happen

00:13:38,070 --> 00:13:42,390
but here you could also do for example

00:13:40,440 --> 00:13:43,770
you could just filter into one of them

00:13:42,390 --> 00:13:44,940
and say like I'm only interested in

00:13:43,770 --> 00:13:47,370
those events so if you click on that

00:13:44,940 --> 00:13:48,840
little plus in the magnifying glass it

00:13:47,370 --> 00:13:51,780
adds a filter here and then you can see

00:13:48,840 --> 00:13:54,810
all of those creates these events were

00:13:51,780 --> 00:13:57,210
done by route and then you could throw

00:13:54,810 --> 00:13:59,340
those away again and then if you scroll

00:13:57,210 --> 00:14:00,900
down for example you can see here we

00:13:59,340 --> 00:14:02,700
didn't have any failures over time but

00:14:00,900 --> 00:14:06,090
here when I started ODT

00:14:02,700 --> 00:14:06,540
we had some events in a short amount of

00:14:06,090 --> 00:14:08,100
time

00:14:06,540 --> 00:14:10,680
you could also see for example where

00:14:08,100 --> 00:14:12,900
have this been happening and well this

00:14:10,680 --> 00:14:15,420
was me when I just set it up so it does

00:14:12,900 --> 00:14:17,700
it reverse to you IP lookup on the data

00:14:15,420 --> 00:14:19,760
and you can see the raw events down here

00:14:17,700 --> 00:14:21,580
so this is basically just parsing it out

00:14:19,760 --> 00:14:23,140
hi

00:14:21,580 --> 00:14:24,670
some point we figured out that parsing

00:14:23,140 --> 00:14:28,200
that file was a major pain in the ass

00:14:24,670 --> 00:14:30,520
because every line looks different and

00:14:28,200 --> 00:14:33,070
you know you write regular expressions

00:14:30,520 --> 00:14:36,760
to parse it and does anybody like

00:14:33,070 --> 00:14:38,770
writing regular expressions like every

00:14:36,760 --> 00:14:40,150
time somebody says like yes I'd like to

00:14:38,770 --> 00:14:41,770
write regular expression I would say

00:14:40,150 --> 00:14:43,840
it's the Stockholm Syndrome where you

00:14:41,770 --> 00:14:45,610
just got so used to it and that you

00:14:43,840 --> 00:14:48,310
start liking it but I personally don't

00:14:45,610 --> 00:14:52,030
like it and writing regulations can be

00:14:48,310 --> 00:14:55,630
such a pain and then we also had like

00:14:52,030 --> 00:14:57,640
that dogfooding problem or or maybe you

00:14:55,630 --> 00:14:59,140
don't want to say dog food but we might

00:14:57,640 --> 00:15:02,050
prefer like drink your own champagne

00:14:59,140 --> 00:15:03,940
because it sounds much fancier but we

00:15:02,050 --> 00:15:05,290
have our own cloud service and they have

00:15:03,940 --> 00:15:07,510
that need and they said well we have all

00:15:05,290 --> 00:15:09,250
this technology we want to be sure like

00:15:07,510 --> 00:15:11,620
did somebody break into our instances or

00:15:09,250 --> 00:15:13,570
what have people been doing and we want

00:15:11,620 --> 00:15:15,640
to monitor that but we would not want to

00:15:13,570 --> 00:15:18,520
rely on parsing those files because well

00:15:15,640 --> 00:15:20,310
it's a pain so what do we do so we

00:15:18,520 --> 00:15:23,140
created something called audit beat

00:15:20,310 --> 00:15:26,830
basically it's using the oddities syntax

00:15:23,140 --> 00:15:29,380
and so you just use the same

00:15:26,830 --> 00:15:31,330
configurations but it's running that

00:15:29,380 --> 00:15:33,820
automatically for you and you don't need

00:15:31,330 --> 00:15:37,420
to parse it anymore so what that does is

00:15:33,820 --> 00:15:39,430
it can do correlation of events it

00:15:37,420 --> 00:15:42,040
automatically results to user IDs to the

00:15:39,430 --> 00:15:43,870
user names and it can for the data

00:15:42,040 --> 00:15:45,580
directly to elasticsearch you don't

00:15:43,870 --> 00:15:47,290
basically have it in a structured format

00:15:45,580 --> 00:15:50,080
and write it out to a file and then

00:15:47,290 --> 00:15:51,880
parse it back but since the the binary

00:15:50,080 --> 00:15:53,710
has it in a structured format already it

00:15:51,880 --> 00:15:57,250
can just forward it in a structured way

00:15:53,710 --> 00:16:01,210
directly to elasticsearch sometimes

00:15:57,250 --> 00:16:02,710
people ask why why not EVP F which is

00:16:01,210 --> 00:16:05,080
probably more powerful

00:16:02,710 --> 00:16:06,760
the downside of EBP F is it depends a

00:16:05,080 --> 00:16:08,680
bit on your current versions and we have

00:16:06,760 --> 00:16:14,680
a lot of customers or very old kernels

00:16:08,680 --> 00:16:17,350
as well and what is it the extended

00:16:14,680 --> 00:16:19,900
Berkeley packet filter it's another way

00:16:17,350 --> 00:16:22,840
to filter for security events but it

00:16:19,900 --> 00:16:25,450
needs relatively new kernel versions to

00:16:22,840 --> 00:16:27,980
do that it's just another way to get

00:16:25,450 --> 00:16:31,880
similar kinds of events it's

00:16:27,980 --> 00:16:34,279
I'm not just networking it or it ties

00:16:31,880 --> 00:16:41,060
into the network as well but you can get

00:16:34,279 --> 00:16:44,230
all kinds of events are the V BPF but it

00:16:41,060 --> 00:16:46,490
needs Union depending on the feature set

00:16:44,230 --> 00:16:48,860
because features were added over time

00:16:46,490 --> 00:16:50,870
with very old corners you have a very

00:16:48,860 --> 00:16:53,779
limited subset of features new currents

00:16:50,870 --> 00:16:55,579
have more features but we didn't want to

00:16:53,779 --> 00:16:57,380
rely on having a newer kernel but we

00:16:55,579 --> 00:16:59,510
wanted to have something that's kind of

00:16:57,380 --> 00:17:01,339
working on all the ways as well and all

00:16:59,510 --> 00:17:04,429
the T has been around for a long time so

00:17:01,339 --> 00:17:06,350
that's generally available and we think

00:17:04,429 --> 00:17:08,959
it might be slightly easier to configure

00:17:06,350 --> 00:17:11,390
and also it has dr. metadata enrichment

00:17:08,959 --> 00:17:13,100
built in so basically we just look up

00:17:11,390 --> 00:17:14,660
against the docker demon in which

00:17:13,100 --> 00:17:18,829
namespaces is running and it will

00:17:14,660 --> 00:17:21,980
properly tie into docker or any any

00:17:18,829 --> 00:17:24,709
container names based index so what do

00:17:21,980 --> 00:17:29,030
we have here and we have another binary

00:17:24,709 --> 00:17:40,610
now which is called oddity so it looks

00:17:29,030 --> 00:17:42,620
like this you could just type so

00:17:40,610 --> 00:17:44,480
basically we have an oddity module here

00:17:42,620 --> 00:17:49,160
we have some configurations these

00:17:44,480 --> 00:17:51,110
configurations you can have mostly in an

00:17:49,160 --> 00:17:53,000
oddity as well for example the backlog

00:17:51,110 --> 00:17:54,679
limit how many events should you look in

00:17:53,000 --> 00:17:56,750
the past this is something you can

00:17:54,679 --> 00:17:58,340
configure or by default configure in

00:17:56,750 --> 00:17:59,990
oddity as well

00:17:58,340 --> 00:18:01,970
we have added some other things for

00:17:59,990 --> 00:18:03,679
example yes we want to resolve IDs

00:18:01,970 --> 00:18:06,080
automatically we don't want to rate

00:18:03,679 --> 00:18:08,990
limit it you might want to do it if you

00:18:06,080 --> 00:18:10,669
have a lot of events not to overload the

00:18:08,990 --> 00:18:12,710
system collecting and forwarding all of

00:18:10,669 --> 00:18:15,919
those events and if I want to collect

00:18:12,710 --> 00:18:17,450
the raw events but well I didn't because

00:18:15,919 --> 00:18:21,020
it might be just too many events and

00:18:17,450 --> 00:18:23,450
then thanks to the awesomeness of Yemen

00:18:21,020 --> 00:18:26,030
you can just pass in after the pipe like

00:18:23,450 --> 00:18:28,160
your good old oddity configuration rules

00:18:26,030 --> 00:18:30,169
so you're reusing the same rules and

00:18:28,160 --> 00:18:32,110
because I always forget I wrote a

00:18:30,169 --> 00:18:35,419
comment for myself and you can see

00:18:32,110 --> 00:18:38,950
generally watching a file start with - W

00:18:35,419 --> 00:18:41,650
or to have a syscall you have an action

00:18:38,950 --> 00:18:43,060
and then the filter we want to use and

00:18:41,650 --> 00:18:46,780
the fifth direction can either be always

00:18:43,060 --> 00:18:48,820
or never and then the filter can specify

00:18:46,780 --> 00:18:52,420
which specific Colonel rules you want to

00:18:48,820 --> 00:18:54,540
target and those can be a task exit or a

00:18:52,420 --> 00:18:58,360
user and you can also exclude something

00:18:54,540 --> 00:19:01,330
and then you can add additional keywords

00:18:58,360 --> 00:19:03,220
which we use after the words with - que

00:19:01,330 --> 00:19:05,860
tweet identify our events and what

00:19:03,220 --> 00:19:09,610
happened and you can group several rules

00:19:05,860 --> 00:19:10,900
into one by this - s or capital S and it

00:19:09,610 --> 00:19:15,280
looks something like this here for

00:19:10,900 --> 00:19:20,020
example any file access to et Cie group

00:19:15,280 --> 00:19:22,390
s wdg shadow etc is locked and gets a

00:19:20,020 --> 00:19:24,940
key of identity so I could afterwards

00:19:22,390 --> 00:19:27,310
filter down to the key identity to see

00:19:24,940 --> 00:19:29,290
who has tried to access those files and

00:19:27,310 --> 00:19:31,240
obviously you could whatever files a

00:19:29,290 --> 00:19:32,890
sensitive for you you could just add

00:19:31,240 --> 00:19:34,990
those and as soon as somebody accesses

00:19:32,890 --> 00:19:39,880
those you want to trigger or create an

00:19:34,990 --> 00:19:43,450
event here for example I say if one of

00:19:39,880 --> 00:19:46,090
my I pick the user ID of one specific

00:19:43,450 --> 00:19:48,430
user will use the user afterwards if

00:19:46,090 --> 00:19:51,010
that user locks in

00:19:48,430 --> 00:19:54,490
I want to be notified if they try to

00:19:51,010 --> 00:19:56,650
access et Cie passwd and then we add

00:19:54,490 --> 00:20:00,420
attack developer past immunity agreed

00:19:56,650 --> 00:20:00,420
and so yes

00:20:06,550 --> 00:20:55,180
oh no no no this is this is not from

00:20:50,080 --> 00:20:59,280
that example oh yeah so the question was

00:20:55,180 --> 00:20:59,280
like white this specific rule basically

00:21:02,760 --> 00:21:08,470
so why this set of rules and so no this

00:21:06,760 --> 00:21:10,720
is not what our cloud team is using and

00:21:08,470 --> 00:21:12,100
I I'm probably I should not even share

00:21:10,720 --> 00:21:13,570
what the cloud team is using because

00:21:12,100 --> 00:21:15,490
they are trying to find the bad guys and

00:21:13,570 --> 00:21:17,890
if I show like what are they searching

00:21:15,490 --> 00:21:19,540
on it would give kind of a stupid

00:21:17,890 --> 00:21:21,460
advantage to the attacker so I'm not

00:21:19,540 --> 00:21:23,830
sharing like the extra rules these are

00:21:21,460 --> 00:21:26,110
just like the hello world rules that you

00:21:23,830 --> 00:21:28,150
could do with oddity so this is just

00:21:26,110 --> 00:21:32,830
since this is the the general oddity

00:21:28,150 --> 00:21:35,500
syntax I just picked some yeah this is

00:21:32,830 --> 00:21:38,380
the yeah we reusing the oddity syntax

00:21:35,500 --> 00:21:40,960
one to one so you could use this exactly

00:21:38,380 --> 00:21:44,200
in oddity and we just reuse the same

00:21:40,960 --> 00:21:47,710
syntax and so the syntax is maybe weird

00:21:44,200 --> 00:21:50,230
like I I'm not super used to it or I'm

00:21:47,710 --> 00:21:52,150
like ok maybe this makes sense but this

00:21:50,230 --> 00:21:53,740
is what oddity is using and to make that

00:21:52,150 --> 00:21:56,080
switch easier and we didn't want to

00:21:53,740 --> 00:21:57,100
create another proprietary system where

00:21:56,080 --> 00:21:58,780
we say we have our own configuration

00:21:57,100 --> 00:22:00,700
language and now learn our configuration

00:21:58,780 --> 00:22:02,680
language we're just reusing what oddity

00:22:00,700 --> 00:22:04,540
is providing and we're tying into that

00:22:02,680 --> 00:22:06,400
and these are just some sample rules

00:22:04,540 --> 00:22:11,140
just to show you some stuff that is

00:22:06,400 --> 00:22:14,020
going on yeah so this is what we're

00:22:11,140 --> 00:22:15,220
collecting with those basically it might

00:22:14,020 --> 00:22:18,340
look something like this

00:22:15,220 --> 00:22:21,610
so if I had over

00:22:18,340 --> 00:22:24,010
to oddity and I had over to the overview

00:22:21,610 --> 00:22:26,890
here you can see this has been running

00:22:24,010 --> 00:22:29,080
for the last 24 hours and you can see

00:22:26,890 --> 00:22:32,140
for example we have a lot of our events

00:22:29,080 --> 00:22:35,290
are user logins or system services and

00:22:32,140 --> 00:22:37,810
you just have a break down into user

00:22:35,290 --> 00:22:40,390
logins or sent authenticated and locked

00:22:37,810 --> 00:22:42,490
in users or those events are all some

00:22:40,390 --> 00:22:43,930
auditing rules that we had and here most

00:22:42,490 --> 00:22:46,270
of them were that some program was

00:22:43,930 --> 00:22:48,280
executed but we have some more here and

00:22:46,270 --> 00:22:51,220
you can just see over time how many

00:22:48,280 --> 00:22:53,620
events happened and down here you can

00:22:51,220 --> 00:22:55,270
basically see which user did what action

00:22:53,620 --> 00:22:58,780
and you could even unfold one of them

00:22:55,270 --> 00:23:00,460
and see the raw event and whatever that

00:22:58,780 --> 00:23:04,290
the raw event here was so you can see

00:23:00,460 --> 00:23:06,610
here something with sshd was being run

00:23:04,290 --> 00:23:09,280
to nine things by the way that we are

00:23:06,610 --> 00:23:11,080
doing here is first off we're enriching

00:23:09,280 --> 00:23:12,760
that with the host information so you

00:23:11,080 --> 00:23:14,020
can see on which operating system was

00:23:12,760 --> 00:23:19,210
dead running so you can see I'm using

00:23:14,020 --> 00:23:24,130
the latest Ubuntu sorry for that it's an

00:23:19,210 --> 00:23:26,590
old habit dies hard and the second thing

00:23:24,130 --> 00:23:29,080
we're enriching the cloud metadata so

00:23:26,590 --> 00:23:31,360
since this is running on AWS you can see

00:23:29,080 --> 00:23:33,340
this is running in Ireland in the 1a

00:23:31,360 --> 00:23:35,890
availability zone with that instance ID

00:23:33,340 --> 00:23:37,660
on that instance type etc so you put

00:23:35,890 --> 00:23:39,490
filter down for example I'm only

00:23:37,660 --> 00:23:41,650
interested in one availability zone or I

00:23:39,490 --> 00:23:43,270
know maybe one of my instances has been

00:23:41,650 --> 00:23:45,040
compromised and I only want to see

00:23:43,270 --> 00:23:47,800
events for that specific instance or

00:23:45,040 --> 00:23:49,660
with the operating system you might know

00:23:47,800 --> 00:23:51,550
oh there was a security issue with just

00:23:49,660 --> 00:23:53,290
one specific operating system in one

00:23:51,550 --> 00:23:55,450
specific version and then you could just

00:23:53,290 --> 00:23:57,070
filter down on those and see like did

00:23:55,450 --> 00:24:00,030
anything specific happen on those

00:23:57,070 --> 00:24:03,030
instances to see what is going on there

00:24:00,030 --> 00:24:03,030
yes

00:24:14,330 --> 00:24:20,070
so the question was did we implement

00:24:17,370 --> 00:24:23,010
parsing that No so what I showed you at

00:24:20,070 --> 00:24:25,050
first the file bit module that used the

00:24:23,010 --> 00:24:27,600
parsing rules so that basically took

00:24:25,050 --> 00:24:30,540
what our search role would give you all

00:24:27,600 --> 00:24:32,580
in a log file that we parse here since

00:24:30,540 --> 00:24:34,740
we run the binary in a binary we have it

00:24:32,580 --> 00:24:36,510
as a structured format so we don't write

00:24:34,740 --> 00:24:39,300
it out to a file just to parse it back

00:24:36,510 --> 00:24:42,270
but we wrapped the oddity binary

00:24:39,300 --> 00:24:43,740
Randa have there the information in a

00:24:42,270 --> 00:24:45,330
structured way and then we can send it

00:24:43,740 --> 00:24:47,010
off to elasticsearch directly so we're

00:24:45,330 --> 00:25:09,090
not going this indirection through a

00:24:47,010 --> 00:25:10,920
file basically yes I mean we do process

00:25:09,090 --> 00:25:12,510
it so the question was do we process it

00:25:10,920 --> 00:25:15,420
yes we do process it for example and

00:25:12,510 --> 00:25:18,180
this enrichment here that happens in the

00:25:15,420 --> 00:25:21,060
binary already this is not like after

00:25:18,180 --> 00:25:24,870
the fact that basically for the hosts

00:25:21,060 --> 00:25:27,540
metadata we just use whatever when every

00:25:24,870 --> 00:25:30,810
call may be LSB whatever to get the

00:25:27,540 --> 00:25:33,180
operating system out so that is enriched

00:25:30,810 --> 00:25:35,690
when you collect it and not really after

00:25:33,180 --> 00:25:35,690
the fact

00:25:36,640 --> 00:25:53,049
I know I have not seen it it's got our

00:25:47,920 --> 00:25:55,570
shape okay a u-shape interesting yeah

00:25:53,049 --> 00:25:58,000
that sounds very similar since we in the

00:25:55,570 --> 00:25:59,770
end we also generate Jason because

00:25:58,000 --> 00:26:03,270
elasticsearch uses Jason so it's just

00:25:59,770 --> 00:26:03,270
basically generating Jason

00:26:05,460 --> 00:26:14,140
interesting then we have kind of the

00:26:08,049 --> 00:26:15,610
same goal in two different ways yeah

00:26:14,140 --> 00:26:17,679
interesting okay I'll look into that

00:26:15,610 --> 00:26:24,460
wait I've never seen a chef before to be

00:26:17,679 --> 00:26:26,830
honest cool okay so we have that we have

00:26:24,460 --> 00:26:28,630
by the way we have both this auditing

00:26:26,830 --> 00:26:29,980
event but we also have some other

00:26:28,630 --> 00:26:31,270
information and this is just from the

00:26:29,980 --> 00:26:35,110
playing log files and then you can

00:26:31,270 --> 00:26:37,840
collect or connect that for example you

00:26:35,110 --> 00:26:41,140
could see for example which uses have I

00:26:37,840 --> 00:26:43,030
created in my system for example here

00:26:41,140 --> 00:26:45,070
you can see this is what I created my

00:26:43,030 --> 00:26:47,169
different uses in my system or you could

00:26:45,070 --> 00:26:50,070
for example also see like when we're

00:26:47,169 --> 00:26:53,470
sudo commands being run and you can see

00:26:50,070 --> 00:26:55,120
all search success yes has been run by

00:26:53,470 --> 00:26:56,740
there you want to use the four times and

00:26:55,120 --> 00:26:59,590
you can't collect that kind of

00:26:56,740 --> 00:27:07,929
information and just see how those work

00:26:59,590 --> 00:27:11,260
okay so let's try something else so I

00:27:07,929 --> 00:27:16,809
want to SSH into my box let's say we use

00:27:11,260 --> 00:27:20,160
the elastic user and well let's enter a

00:27:16,809 --> 00:27:20,160
wrong password for it change

00:27:22,880 --> 00:27:30,769
where would I get this event from where

00:27:25,610 --> 00:27:32,720
will fail login attempts by SSH yeah I

00:27:30,769 --> 00:27:35,509
think you know bun - its var log of log

00:27:32,720 --> 00:27:38,269
but same thing we we do collect that as

00:27:35,509 --> 00:27:40,159
well by the way so we can both get the

00:27:38,269 --> 00:27:41,750
auditing event or we can just parse the

00:27:40,159 --> 00:27:43,850
file this is now the information passed

00:27:41,750 --> 00:27:45,919
from the file so you can see in the last

00:27:43,850 --> 00:27:48,259
let's say 4 hours because people seem to

00:27:45,919 --> 00:27:50,659
have woken up now you can see these were

00:27:48,259 --> 00:27:52,009
all the failed login attempts to my

00:27:50,659 --> 00:27:54,559
instance which is probably not a

00:27:52,009 --> 00:27:57,409
surprise because before the sage board

00:27:54,559 --> 00:27:59,659
people just try to log in this was me

00:27:57,409 --> 00:28:02,539
when I either used my public key or a

00:27:59,659 --> 00:28:04,759
password yes don't use passwords but for

00:28:02,539 --> 00:28:07,399
the demo I do and then you can see which

00:28:04,759 --> 00:28:09,230
users had failed login attempts and

00:28:07,399 --> 00:28:12,590
where where they're coming from so you

00:28:09,230 --> 00:28:14,149
can see somebody from China normally

00:28:12,590 --> 00:28:16,039
it's either Russia or China but somebody

00:28:14,149 --> 00:28:17,509
from China seems to brute force or try

00:28:16,039 --> 00:28:21,019
to brute force into my instance so they

00:28:17,509 --> 00:28:22,940
have like 700 something plus 200 plus

00:28:21,019 --> 00:28:25,309
another two hundred or so login attempts

00:28:22,940 --> 00:28:28,190
from this area and this here was

00:28:25,309 --> 00:28:29,960
probably me so if I check like where was

00:28:28,190 --> 00:28:34,549
the elastic user coming from you can see

00:28:29,960 --> 00:28:38,000
it was only coming from me here by the

00:28:34,549 --> 00:28:40,820
way I would be curious that's the wrong

00:28:38,000 --> 00:28:44,149
way how good my geo information is today

00:28:40,820 --> 00:28:46,039
because it always depends a bit on you

00:28:44,149 --> 00:28:47,690
IP data is sometimes very good and

00:28:46,039 --> 00:28:50,590
sometimes not so good but today it seems

00:28:47,690 --> 00:28:50,590
to be pretty decent

00:28:54,250 --> 00:28:57,870
and it seems to be very good

00:29:01,980 --> 00:29:08,309
we're more he further up north right

00:29:05,090 --> 00:29:10,470
okay but it's still you you get you get

00:29:08,309 --> 00:29:14,429
the city you get get a pretty good

00:29:10,470 --> 00:29:16,019
impression of where we are since I'm

00:29:14,429 --> 00:29:17,519
probably under University Network I

00:29:16,019 --> 00:29:19,380
would be curious why this is off maybe

00:29:17,519 --> 00:29:22,049
they have another main headquarters here

00:29:19,380 --> 00:29:24,480
or whatever but that's what you get from

00:29:22,049 --> 00:29:27,389
geoip lookups and you can see this was

00:29:24,480 --> 00:29:29,610
my user from this IP address trying to

00:29:27,389 --> 00:29:31,830
log in and it saved anyway

00:29:29,610 --> 00:29:34,409
let's say we want to do the same thing

00:29:31,830 --> 00:29:40,399
again and this one this time it will

00:29:34,409 --> 00:29:46,950
succeed if I will type it correctly okay

00:29:40,399 --> 00:29:49,470
let's say service nginx restored my user

00:29:46,950 --> 00:29:51,539
is not in the sudras group so it will

00:29:49,470 --> 00:29:55,320
need to do something and let's say we

00:29:51,539 --> 00:29:56,820
want to use this admin user here luckily

00:29:55,320 --> 00:29:59,820
I know their password and then I just

00:29:56,820 --> 00:30:02,639
restarted my nginx and then you could

00:29:59,820 --> 00:30:06,690
find those in the executions for example

00:30:02,639 --> 00:30:09,149
so if you look for oddity if you go to

00:30:06,690 --> 00:30:10,740
the executions you can see all the

00:30:09,149 --> 00:30:12,179
executions that have been banned by

00:30:10,740 --> 00:30:14,460
different users

00:30:12,179 --> 00:30:16,460
let's just see what has the elastic user

00:30:14,460 --> 00:30:20,220
been up to so I fit that on on those

00:30:16,460 --> 00:30:23,549
this the general aim overview and if you

00:30:20,220 --> 00:30:26,279
then look here this was the command that

00:30:23,549 --> 00:30:29,370
I have just ran so you can see I use

00:30:26,279 --> 00:30:32,370
that to restart nginx and if you look

00:30:29,370 --> 00:30:34,889
into the details you will also see okay

00:30:32,370 --> 00:30:37,590
it was the elastic user running that

00:30:34,889 --> 00:30:40,860
binary and it was successfully executed

00:30:37,590 --> 00:30:42,779
by somebody in the root group and you

00:30:40,860 --> 00:30:45,419
see where it happened then like the

00:30:42,779 --> 00:30:47,490
specific user groups like who has been

00:30:45,419 --> 00:30:50,789
accessing what in which permissions etc

00:30:47,490 --> 00:30:54,809
so this event has been selected by the

00:30:50,789 --> 00:30:59,399
auditing event now let's do something

00:30:54,809 --> 00:31:03,690
else let's say we log in with the admin

00:30:59,399 --> 00:31:05,549
user by the way something I didn't

00:31:03,690 --> 00:31:07,289
mention is Oddity is just collecting

00:31:05,549 --> 00:31:10,080
information it's not blocking anything

00:31:07,289 --> 00:31:12,450
it's not like SELinux that can block bad

00:31:10,080 --> 00:31:12,930
cause all it is really just passive and

00:31:12,450 --> 00:31:19,590
it's just

00:31:12,930 --> 00:31:21,780
collecting what are you up to before I

00:31:19,590 --> 00:31:26,160
showed that power abuse thing so let's

00:31:21,780 --> 00:31:27,840
try to do the power abuse where the user

00:31:26,160 --> 00:31:31,200
with admirable interest is looking into

00:31:27,840 --> 00:31:33,450
the home directory of a specific user so

00:31:31,200 --> 00:31:37,110
we have let's say we have the home

00:31:33,450 --> 00:31:39,540
directory okay that looks okay let's say

00:31:37,110 --> 00:31:41,160
we have an elastic user that might be

00:31:39,540 --> 00:31:46,350
interesting you look into the elastic

00:31:41,160 --> 00:31:53,580
user and then we see okay we has a

00:31:46,350 --> 00:31:56,040
secret txt file little surprise let's do

00:31:53,580 --> 00:32:03,660
let's check out what the secret of that

00:31:56,040 --> 00:32:08,600
user is will this work no there's no

00:32:03,660 --> 00:32:12,840
sudo let's make sure we run sudo and

00:32:08,600 --> 00:32:16,410
then you can see it's my secret okay

00:32:12,840 --> 00:32:18,810
that's also not super surprising that we

00:32:16,410 --> 00:32:20,670
could read that but let's see how to

00:32:18,810 --> 00:32:24,180
figure out what has happened here so I

00:32:20,670 --> 00:32:31,230
mentioned those tags before so we had

00:32:24,180 --> 00:32:33,840
those in the configuration and if we

00:32:31,230 --> 00:32:37,590
scroll further down somebody will have

00:32:33,840 --> 00:32:39,090
the power abuse here we have the Polish

00:32:37,590 --> 00:32:42,240
so this is the exact rule for the power

00:32:39,090 --> 00:32:46,170
abuse so when somebody accesses the home

00:32:42,240 --> 00:32:50,540
directory of a user with a an ID greater

00:32:46,170 --> 00:32:54,660
than a thousand and it's somebody in

00:32:50,540 --> 00:32:56,400
pseudo group ten reported power abuse so

00:32:54,660 --> 00:32:59,220
basically we can just filter down on

00:32:56,400 --> 00:33:02,910
these events which looks something like

00:32:59,220 --> 00:33:05,710
this I'm in the audit beat data and then

00:33:02,910 --> 00:33:09,820
you could just say we have

00:33:05,710 --> 00:33:12,010
tag and the tag is at any half like the

00:33:09,820 --> 00:33:13,630
common tax and people do so for example

00:33:12,010 --> 00:33:16,270
here we have the power abuse I just

00:33:13,630 --> 00:33:18,850
filter down on those you can see we had

00:33:16,270 --> 00:33:22,870
a couple but let's see what the last the

00:33:18,850 --> 00:33:24,549
latest one was and hopefully it's no

00:33:22,870 --> 00:33:27,970
it's not to be mean for that we want to

00:33:24,549 --> 00:33:34,020
see but yeah since we VI is always

00:33:27,970 --> 00:33:34,020
creating multiple files here where is my

00:33:34,049 --> 00:33:43,770
basic so this is the one that I wanted

00:33:40,809 --> 00:33:47,740
so you can see we were running cat on

00:33:43,770 --> 00:33:51,010
this file and basically you can then see

00:33:47,740 --> 00:33:56,080
like which user was doing that and we

00:33:51,010 --> 00:33:59,770
reported that the power abuse that user

00:33:56,080 --> 00:34:02,020
ID with root privileges on that file so

00:33:59,770 --> 00:34:08,440
we were collecting those for example if

00:34:02,020 --> 00:34:11,770
I would log out of that user again and

00:34:08,440 --> 00:34:15,520
say I want to log in with my general

00:34:11,770 --> 00:34:20,770
user and I say I want to for example see

00:34:15,520 --> 00:34:23,470
the e to see passwd we had a rule for

00:34:20,770 --> 00:34:25,089
that as well you can just see that

00:34:23,470 --> 00:34:27,040
because well that's a publicly

00:34:25,089 --> 00:34:30,250
accessible file is Cheerios are not

00:34:27,040 --> 00:34:35,070
super critical but if you for example

00:34:30,250 --> 00:34:38,200
filtered down I think we called it

00:34:35,070 --> 00:34:40,089
developers passwd read so there I had a

00:34:38,200 --> 00:34:42,810
very specific tag to filter those events

00:34:40,089 --> 00:34:46,389
and then you can see okay there was just

00:34:42,810 --> 00:34:49,960
just now it happened and you can see

00:34:46,389 --> 00:34:52,210
okay this user the elastic user ran pin

00:34:49,960 --> 00:34:53,740
cat on et Cie past and beauty and

00:34:52,210 --> 00:34:55,480
whatever your critical files would be

00:34:53,740 --> 00:35:02,320
you could just monitor those and figure

00:34:55,480 --> 00:35:05,500
out what they are object okay moving on

00:35:02,320 --> 00:35:06,420
we've seen that the next thing we can do

00:35:05,500 --> 00:35:08,760
is and we

00:35:06,420 --> 00:35:10,559
edit that so the auditing on if these

00:35:08,760 --> 00:35:15,210
stuff only works for Linux because only

00:35:10,559 --> 00:35:16,559
the Linux kernel has oddity we do have

00:35:15,210 --> 00:35:17,819
something else in there audit beat

00:35:16,559 --> 00:35:20,400
module which is file integrity

00:35:17,819 --> 00:35:23,190
monitoring and that works on the major

00:35:20,400 --> 00:35:24,510
operating systems depending on what

00:35:23,190 --> 00:35:26,519
operating system you have to basically

00:35:24,510 --> 00:35:28,950
watch your filesystem and watch for

00:35:26,519 --> 00:35:31,140
changes and catch all the files in so

00:35:28,950 --> 00:35:33,119
you watch a file or a directory we hash

00:35:31,140 --> 00:35:34,859
all those and every time you change

00:35:33,119 --> 00:35:36,539
something we will detect that oh

00:35:34,859 --> 00:35:38,190
something has changed with these events

00:35:36,539 --> 00:35:40,380
depending on your operating system and

00:35:38,190 --> 00:35:43,230
we can just tell you okay somebody puts

00:35:40,380 --> 00:35:52,109
some new information in your web service

00:35:43,230 --> 00:35:55,349
directory so for example let's say this

00:35:52,109 --> 00:35:58,410
is this is your website not very

00:35:55,349 --> 00:36:00,210
spectacular but somebody was able to

00:35:58,410 --> 00:36:04,740
break into your server and just changed

00:36:00,210 --> 00:36:06,720
it and I will need a different user

00:36:04,740 --> 00:36:08,880
permissions to do that so let's change

00:36:06,720 --> 00:36:13,500
to somebody who has root privileges just

00:36:08,880 --> 00:36:17,220
in case so for example let's say we have

00:36:13,500 --> 00:36:24,269
VAR w w HTML and we should have an index

00:36:17,220 --> 00:36:27,480
file and then you see this is my welcome

00:36:24,269 --> 00:36:29,750
message and let's say we want to change

00:36:27,480 --> 00:36:29,750
this

00:36:35,930 --> 00:36:40,319
so we've changed the file and suddenly

00:36:38,400 --> 00:36:41,609
your professional website and doesn't

00:36:40,319 --> 00:36:45,270
look that professional anymore because

00:36:41,609 --> 00:36:46,710
you have the new emoji in there and you

00:36:45,270 --> 00:36:49,740
want to figure out where is that coming

00:36:46,710 --> 00:36:52,829
from world when did that even change so

00:36:49,740 --> 00:37:06,630
for that we have let's quickly look at

00:36:52,829 --> 00:37:08,640
the rules so if you scroll further down

00:37:06,630 --> 00:37:10,829
that file you see here we have the so

00:37:08,640 --> 00:37:13,950
called file integrity module this is the

00:37:10,829 --> 00:37:15,539
path of your monitoring and well we just

00:37:13,950 --> 00:37:18,690
set some limits so don't scan more than

00:37:15,539 --> 00:37:20,609
50 megabytes per second and don't scan

00:37:18,690 --> 00:37:22,410
files larger than 10 megabytes because

00:37:20,609 --> 00:37:24,569
otherwise it might just be too much for

00:37:22,410 --> 00:37:26,339
you CPU you can also change the hash

00:37:24,569 --> 00:37:28,799
type so we're sticking to the default

00:37:26,339 --> 00:37:30,450
which is sha-1 that we have but we have

00:37:28,799 --> 00:37:33,630
a couple of others I'll get back to

00:37:30,450 --> 00:37:35,609
those in the slides and with that let's

00:37:33,630 --> 00:37:37,740
see if anything has changed in our file

00:37:35,609 --> 00:37:39,510
system so I have a dashboard for that oh

00:37:37,740 --> 00:37:43,579
by the way all of these dashboards are

00:37:39,510 --> 00:37:43,579
pre-built that didn't build those myself

00:37:43,640 --> 00:37:50,190
I'm lazy I'm just using what we have so

00:37:48,000 --> 00:37:56,579
we have sorry that this is called

00:37:50,190 --> 00:38:00,390
differently or the file integrity this

00:37:56,579 --> 00:38:02,369
is the one I want so you can see in the

00:38:00,390 --> 00:38:04,680
last four hours no files have been

00:38:02,369 --> 00:38:06,450
changed in my website now just now

00:38:04,680 --> 00:38:11,490
something has happened so three files

00:38:06,450 --> 00:38:15,869
were created three updated and one moved

00:38:11,490 --> 00:38:18,000
by a user in the group root and y3 and

00:38:15,869 --> 00:38:20,520
might be slightly confusing but you know

00:38:18,000 --> 00:38:21,990
bi is opening like the swap file in the

00:38:20,520 --> 00:38:24,029
background which is kind of hard to see

00:38:21,990 --> 00:38:26,670
but you can see we have a swap file with

00:38:24,029 --> 00:38:28,559
an SW X file word and what that was and

00:38:26,670 --> 00:38:32,160
then we have the actual file so those

00:38:28,559 --> 00:38:34,740
were edited and you can see that was the

00:38:32,160 --> 00:38:36,299
most updated file the swap file and you

00:38:34,740 --> 00:38:39,960
can just see these were all the files

00:38:36,299 --> 00:38:42,059
that were changed in here you can see on

00:38:39,960 --> 00:38:44,069
my horse this was the event and then you

00:38:42,059 --> 00:38:45,520
can see okay when I closed VI the swap

00:38:44,069 --> 00:38:47,230
file was deleted

00:38:45,520 --> 00:38:51,400
like all these temporary files were

00:38:47,230 --> 00:38:53,260
deleted and you can see this file was

00:38:51,400 --> 00:38:55,510
moved from the old state to the new

00:38:53,260 --> 00:38:57,040
state so these are all the events

00:38:55,510 --> 00:38:59,890
basically it would happen in that folder

00:38:57,040 --> 00:39:02,530
and we're just keeping track of any

00:38:59,890 --> 00:39:04,690
changes in the directory if you upload

00:39:02,530 --> 00:39:08,530
it by FTP you would only have like the

00:39:04,690 --> 00:39:10,810
replacement operation to see these are

00:39:08,530 --> 00:39:13,720
all the hashes that we support and the

00:39:10,810 --> 00:39:16,930
very last one is the fastest so if

00:39:13,720 --> 00:39:19,960
you're concerned about like I'll perform

00:39:16,930 --> 00:39:23,110
in this state and how much time will

00:39:19,960 --> 00:39:25,750
this hashing take the last one the X is

00:39:23,110 --> 00:39:27,900
X age 64 that is the most performant

00:39:25,750 --> 00:39:32,440
hashing algorithm that we have in there

00:39:27,900 --> 00:39:37,210
okay we've seen that sometimes if you

00:39:32,440 --> 00:39:38,590
get kind of stuck with all we have too

00:39:37,210 --> 00:39:40,300
many events we need to figure out what

00:39:38,590 --> 00:39:41,830
is going on we have some other thing

00:39:40,300 --> 00:39:43,570
that's kind of like learning

00:39:41,830 --> 00:39:45,280
automatically what is normal for example

00:39:43,570 --> 00:39:46,840
this could be like how many users are

00:39:45,280 --> 00:39:48,850
locked into your system where you see

00:39:46,840 --> 00:39:50,470
hearing the day it's kind of like a lot

00:39:48,850 --> 00:39:51,910
of people but over the weekend it's not

00:39:50,470 --> 00:39:53,470
that many and that night is also not

00:39:51,910 --> 00:39:56,560
that many and then you could just see

00:39:53,470 --> 00:39:59,380
otherwise this one here this drop might

00:39:56,560 --> 00:40:01,840
be very hard to find but here you

00:39:59,380 --> 00:40:04,990
basically see this is an anomaly so this

00:40:01,840 --> 00:40:06,730
is just like time anomalies over time

00:40:04,990 --> 00:40:08,350
series you where you know like this blue

00:40:06,730 --> 00:40:10,510
band is basically these are the expected

00:40:08,350 --> 00:40:12,550
values and this is what you have an

00:40:10,510 --> 00:40:14,500
anomaly and this would then just tell

00:40:12,550 --> 00:40:16,000
you okay here for example you have too

00:40:14,500 --> 00:40:17,890
few users who are logged in maybe your

00:40:16,000 --> 00:40:19,750
network goes down or if you have too

00:40:17,890 --> 00:40:21,370
many maybe somebody was trying to brute

00:40:19,750 --> 00:40:23,740
force their way into your system or

00:40:21,370 --> 00:40:25,300
whatever and so sometimes it's very hard

00:40:23,740 --> 00:40:27,670
to find the right thresholds to alert

00:40:25,300 --> 00:40:30,910
for that so you could just automatically

00:40:27,670 --> 00:40:33,340
do that okay to wrap up I always compare

00:40:30,910 --> 00:40:34,720
this data bit to Lego because you have

00:40:33,340 --> 00:40:37,090
all these building blocks but you need

00:40:34,720 --> 00:40:38,620
to kind of put them together the right

00:40:37,090 --> 00:40:40,960
way so you need to have to write all

00:40:38,620 --> 00:40:42,760
your key rules and then you need to kind

00:40:40,960 --> 00:40:44,440
of look for the right stuff it's not

00:40:42,760 --> 00:40:47,260
like an out-of-the-box solution it just

00:40:44,440 --> 00:40:48,940
does pixie magic and it runs

00:40:47,260 --> 00:40:51,400
automatically and does everything for

00:40:48,940 --> 00:40:52,870
you you will need to like know what are

00:40:51,400 --> 00:40:54,730
you looking for what is your kind of

00:40:52,870 --> 00:40:56,680
threat model for example like which

00:40:54,730 --> 00:40:59,260
files are sensitive to somebody accesses

00:40:56,680 --> 00:41:02,680
or which for the student change on their

00:40:59,260 --> 00:41:03,880
own like some configurations settings we

00:41:02,680 --> 00:41:06,040
do provide like these building blocks

00:41:03,880 --> 00:41:09,190
but we will need to do that putting it

00:41:06,040 --> 00:41:13,150
together to write where yourself yeah

00:41:09,190 --> 00:41:15,280
generally Oh daddy is great it's just

00:41:13,150 --> 00:41:17,290
very hard to parse and work with the

00:41:15,280 --> 00:41:19,059
output for me that's why we added audit

00:41:17,290 --> 00:41:21,010
bead to have that in a more structured

00:41:19,059 --> 00:41:22,809
format and also enrich it with some more

00:41:21,010 --> 00:41:24,670
information and then you can combine

00:41:22,809 --> 00:41:25,990
that information with more logs and

00:41:24,670 --> 00:41:28,869
dashboards for example you could just

00:41:25,990 --> 00:41:30,670
get off log or general logs from your

00:41:28,869 --> 00:41:32,230
applications and then combine those to

00:41:30,670 --> 00:41:34,960
see what is really happening with your

00:41:32,230 --> 00:41:38,380
system if you want to try to doubt

00:41:34,960 --> 00:41:40,450
yourself you can I'm just giving you the

00:41:38,380 --> 00:41:44,559
regular user not the root user but you

00:41:40,450 --> 00:41:46,240
put an SSH into that instance and if you

00:41:44,559 --> 00:41:47,800
want to try out dashboards you will be

00:41:46,240 --> 00:41:50,290
automatically logged in if you have two

00:41:47,800 --> 00:41:52,599
dashboards um then you can just head to

00:41:50,290 --> 00:41:54,339
the dashboard since we still have three

00:41:52,599 --> 00:41:57,069
minutes left we can do one more small

00:41:54,339 --> 00:42:06,460
demo that I kind of forgot to do or oh

00:41:57,069 --> 00:42:11,470
god let's say let's say we have netcat

00:42:06,460 --> 00:42:16,150
we listen on port 1025 how do we talk to

00:42:11,470 --> 00:42:19,150
this now if anybody has their laptop out

00:42:16,150 --> 00:42:24,549
or has something like that it should be

00:42:19,150 --> 00:42:30,400
something like this so you can see

00:42:24,549 --> 00:42:32,380
whatever I'm whatever I've typed here

00:42:30,400 --> 00:42:36,069
will appear here so if anybody feels

00:42:32,380 --> 00:42:39,520
inclined to send a message as well you

00:42:36,069 --> 00:42:43,270
can just tell that to my hostname and

00:42:39,520 --> 00:42:46,960
port 1025 now how would I find that

00:42:43,270 --> 00:42:48,609
somebody has opened a specific port i'll

00:42:46,960 --> 00:42:50,829
keep it pretty simple and I'll just say

00:42:48,609 --> 00:42:53,079
like I'm heading to the raw events and

00:42:50,829 --> 00:42:54,730
I'm just interested in like somebody

00:42:53,079 --> 00:42:57,190
reported some weird behavior on port

00:42:54,730 --> 00:42:59,609
1025 so I just use the full text search

00:42:57,190 --> 00:43:03,190
over everything I have in my system and

00:42:59,609 --> 00:43:06,690
okay we have one event and if you open

00:43:03,190 --> 00:43:08,490
that one you will actually see here

00:43:06,690 --> 00:43:11,250
somebody has

00:43:08,490 --> 00:43:13,650
netcat and then there was the command

00:43:11,250 --> 00:43:18,570
they or the young inventor deranged so

00:43:13,650 --> 00:43:20,970
we have a net can't listen on port 1025

00:43:18,570 --> 00:43:24,930
so you could figure out that somebody

00:43:20,970 --> 00:43:27,420
has standard and well it's a very basic

00:43:24,930 --> 00:43:29,100
check server but this is one of the ways

00:43:27,420 --> 00:43:32,220
not to figure out that somebody has

00:43:29,100 --> 00:43:34,980
opened a port and has been up to good or

00:43:32,220 --> 00:43:38,330
no good depending on where you stand

00:43:34,980 --> 00:43:41,369
okay if you want to try out the code

00:43:38,330 --> 00:43:44,100
it's mostly like ansible and a bit of

00:43:41,369 --> 00:43:45,810
terraform just to set it up because you

00:43:44,100 --> 00:43:48,030
saw I just started that at midnight or

00:43:45,810 --> 00:43:49,980
so I basically run ran terraform to

00:43:48,030 --> 00:43:51,480
create me one AWS instance and then ran

00:43:49,980 --> 00:43:53,310
a playbook and threw in the

00:43:51,480 --> 00:43:56,040
configuration files that's all I did all

00:43:53,310 --> 00:44:00,270
the sample code is there that's probably

00:43:56,040 --> 00:44:01,890
the most relevant part any questions I

00:44:00,270 --> 00:44:06,060
think we have like five minutes left for

00:44:01,890 --> 00:44:08,300
questions it should be perfect six yes

00:44:06,060 --> 00:44:08,300
please

00:44:10,920 --> 00:44:17,170
can you enhance events with communities

00:44:14,650 --> 00:44:17,590
yes um so there's actually a very good

00:44:17,170 --> 00:44:33,700
point

00:44:17,590 --> 00:44:37,030
I let me let's kill this one so we have

00:44:33,700 --> 00:44:38,950
here we have the so called processes and

00:44:37,030 --> 00:44:41,200
the processes they include the cloud

00:44:38,950 --> 00:44:43,990
conformation the host information we do

00:44:41,200 --> 00:44:45,790
have that full talker but basically what

00:44:43,990 --> 00:44:48,010
you do with docker is you need to have

00:44:45,790 --> 00:44:50,650
access to the talker diamond because we

00:44:48,010 --> 00:44:54,850
we need to stop it and then we look up

00:44:50,650 --> 00:44:56,830
like stuff like the base image and tags

00:44:54,850 --> 00:44:59,230
from the docker image we have the same

00:44:56,830 --> 00:45:01,240
thing for kubernetes and where we go

00:44:59,230 --> 00:45:02,530
against the namespace and the pot and we

00:45:01,240 --> 00:45:03,760
will enrich all of that and then you

00:45:02,530 --> 00:45:05,710
could just say I'm interested in just

00:45:03,760 --> 00:45:08,710
one specific namespace of pot or

00:45:05,710 --> 00:45:12,160
whatever and filter down to that and we

00:45:08,710 --> 00:45:14,580
very recently added one more give me a

00:45:12,160 --> 00:45:14,580
second

00:45:18,780 --> 00:45:32,670
so just to okay we have the metadata

00:45:25,359 --> 00:45:37,150
here so we have the host metadata the

00:45:32,670 --> 00:45:37,900
talker kubernetes I thought we had one

00:45:37,150 --> 00:45:40,910
more

00:45:37,900 --> 00:45:46,309
[Music]

00:45:40,910 --> 00:45:50,089
sorry yes yes exactly

00:45:46,309 --> 00:45:52,759
it's yes sorry we are in five bit but

00:45:50,089 --> 00:45:56,720
they all have the same they all have the

00:45:52,759 --> 00:46:04,250
same so you can add all of those in all

00:45:56,720 --> 00:46:05,809
the beats and I thought we had was it

00:46:04,250 --> 00:46:09,500
open shift I know that we have

00:46:05,809 --> 00:46:10,849
integration for one more I would need to

00:46:09,500 --> 00:46:12,559
look that up that is Patel one is very

00:46:10,849 --> 00:46:14,450
new and I haven't tried it out myself

00:46:12,559 --> 00:46:17,960
but kubernetes and Tucker are very

00:46:14,450 --> 00:46:19,819
common and useful s might be hosts or

00:46:17,960 --> 00:46:25,359
the cloud metadata for the cloud

00:46:19,819 --> 00:46:28,339
metadata we support at least AWS and TCP

00:46:25,359 --> 00:46:29,930
maybe a sure as well and I would need to

00:46:28,339 --> 00:46:31,730
check but those are the ones that we

00:46:29,930 --> 00:46:33,470
need for those ad or support for those

00:46:31,730 --> 00:46:35,480
processes also that's kind of like a

00:46:33,470 --> 00:46:38,059
pretty cheap look up because basically

00:46:35,480 --> 00:46:39,890
what we do is we general or we cache

00:46:38,059 --> 00:46:41,359
that and then enrich every event for

00:46:39,890 --> 00:46:43,700
example for the target socket will just

00:46:41,359 --> 00:46:45,289
catch that and then we use that for to

00:46:43,700 --> 00:46:48,220
get the AWS information there is

00:46:45,289 --> 00:46:50,930
dispatch like IP address on AWS which is

00:46:48,220 --> 00:46:52,609
169 dot something something something

00:46:50,930 --> 00:46:54,319
if you query that you will get the

00:46:52,609 --> 00:46:56,480
information about the instance itself

00:46:54,319 --> 00:46:58,549
back I will basically cache that and

00:46:56,480 --> 00:47:00,680
enrich every information or every event

00:46:58,549 --> 00:47:02,599
with that information from that API

00:47:00,680 --> 00:47:04,250
that's how we get to that metadata yes

00:47:02,599 --> 00:47:07,809
but the tentacle point

00:47:04,250 --> 00:47:13,299
yes stalker and kubernetes are supported

00:47:07,809 --> 00:47:13,299
any other questions

00:47:13,750 --> 00:47:17,200
otherwise I have still have a couple of

00:47:16,009 --> 00:47:19,579
stickers over there

00:47:17,200 --> 00:47:22,509
since you're not that many will probably

00:47:19,579 --> 00:47:22,509
last for everybody

00:47:42,569 --> 00:47:45,989
see you

00:47:47,970 --> 00:47:58,570
yes so the question was about the

00:47:57,340 --> 00:48:06,010
performance for the file integrity

00:47:58,570 --> 00:48:07,330
module so we we have done benchmarks

00:48:06,010 --> 00:48:08,860
like which hashing algorithm is the

00:48:07,330 --> 00:48:10,780
fastest and we have like a bunch of the

00:48:08,860 --> 00:48:13,450
ones that we support and you can also

00:48:10,780 --> 00:48:17,050
say like don't hash files over exercise

00:48:13,450 --> 00:48:19,780
and don't hash more than X megabyte per

00:48:17,050 --> 00:48:21,910
second so you can totally limit how much

00:48:19,780 --> 00:48:25,180
resources you want to use so nobody can

00:48:21,910 --> 00:48:26,980
the DDoS basically and your your

00:48:25,180 --> 00:48:29,350
instance by just changing too many files

00:48:26,980 --> 00:48:31,810
and then you will exhaust your CPU also

00:48:29,350 --> 00:48:34,120
I would assume that hashing generally

00:48:31,810 --> 00:48:37,990
should be pretty cheap but of course it

00:48:34,120 --> 00:48:40,360
depends how much files you change

00:48:37,990 --> 00:48:43,600
I mean don't don't throw it on unjust

00:48:40,360 --> 00:48:47,140
route and then for for the entire file

00:48:43,600 --> 00:48:48,850
system like probably put that on folders

00:48:47,140 --> 00:48:50,470
with contain which contain like the

00:48:48,850 --> 00:48:51,970
sensitive information that makes sense

00:48:50,470 --> 00:48:55,360
also otherwise you can have a lot of

00:48:51,970 --> 00:48:57,880
garbage events I'm not sure we have like

00:48:55,360 --> 00:48:59,500
done too many benchmarks on like super

00:48:57,880 --> 00:49:02,410
large scale but we have tried out

00:48:59,500 --> 00:49:06,430
various hashing algorithm that you can

00:49:02,410 --> 00:49:07,930
just limit it to what you want so it

00:49:06,430 --> 00:49:14,200
shouldn't kill your instance at least

00:49:07,930 --> 00:49:17,190
not that part any final questions okay

00:49:14,200 --> 00:49:17,190

YouTube URL: https://www.youtube.com/watch?v=JPZv1Az72f4


