Title: Future of the DNF package management stack
Publication date: 2019-03-04
Playlist: DevConfCZ 2019
Description: 
	Presentation name: Future of the DNF package management stack
Speakers: Daniel Mach,Jaroslav Mracek
Description:  If you're interested in package management and DNF stack in particular,
join us to learn more about what we have done over the past year and what we plan for the next years. Among other topics, we'll touch Modularity support, new unified API and integration testing.
[ https://sched.co/Jch7 ]
Captions: 
	00:00:05,569 --> 00:00:10,590
welcome everybody we are here to talk

00:00:08,490 --> 00:00:12,590
about DNF obviously my name is Daniel

00:00:10,590 --> 00:00:15,960
mark I've been with Red Hat for Oh

00:00:12,590 --> 00:00:19,679
decade I've spent 10 years in

00:00:15,960 --> 00:00:21,570
engineering and I've been leading the

00:00:19,679 --> 00:00:26,609
software management team for about two

00:00:21,570 --> 00:00:28,980
years I'm mainly focused on DNF and I

00:00:26,609 --> 00:00:33,050
will have this presentation together

00:00:28,980 --> 00:00:35,910
with our software our check who is the

00:00:33,050 --> 00:00:39,000
longest-serving DNF team member so far

00:00:35,910 --> 00:00:42,870
for three years he's been focused on

00:00:39,000 --> 00:00:47,370
modularity and also some optimizations

00:00:42,870 --> 00:00:53,130
and performance tuning so what's on the

00:00:47,370 --> 00:00:57,630
agenda first of all we will remind what

00:00:53,130 --> 00:01:00,600
the nf is then we will provide several

00:00:57,630 --> 00:01:04,049
details about the DNF stack and some

00:01:00,600 --> 00:01:05,489
statistics then we will quickly go

00:01:04,049 --> 00:01:08,460
through the achievements we have made

00:01:05,489 --> 00:01:11,070
over the last year we will touch on map

00:01:08,460 --> 00:01:14,670
and future plans and then there will be

00:01:11,070 --> 00:01:15,320
space for questions and answers so what

00:01:14,670 --> 00:01:18,510
is DNA

00:01:15,320 --> 00:01:24,000
it's a package manager you may know from

00:01:18,510 --> 00:01:26,550
fedora and it replaces em3 it's also

00:01:24,000 --> 00:01:29,580
available as cm4 in Red Hat Enterprise

00:01:26,550 --> 00:01:32,010
Linux eight beta that's for mainly for

00:01:29,580 --> 00:01:35,790
continuity and compatibility because the

00:01:32,010 --> 00:01:38,700
existing customers are used to use yum

00:01:35,790 --> 00:01:41,280
so we provided that but it runs on the

00:01:38,700 --> 00:01:44,070
DNA back-end and it's essentially the

00:01:41,280 --> 00:01:46,409
same software and it's also available in

00:01:44,070 --> 00:01:52,380
our distributions such as Messiah

00:01:46,409 --> 00:01:55,880
openSUSE or Yocto project this is a very

00:01:52,380 --> 00:01:58,619
realistic overview so on the left side

00:01:55,880 --> 00:02:01,110
these are packages we maintain you can

00:01:58,619 --> 00:02:04,580
see all the sources on github and they

00:02:01,110 --> 00:02:08,330
are mainly also available in federal

00:02:04,580 --> 00:02:08,330
those which are

00:02:09,640 --> 00:02:18,319
these are the main packages you may be

00:02:13,760 --> 00:02:19,069
using frequently especially the BNF and

00:02:18,319 --> 00:02:21,379
the plugins

00:02:19,069 --> 00:02:24,680
there are also some related projects

00:02:21,379 --> 00:02:27,590
such as rpm beeps off educated cetera

00:02:24,680 --> 00:02:29,739
all these belong to our ecosystem but we

00:02:27,590 --> 00:02:32,510
don't maintain them directly

00:02:29,739 --> 00:02:38,840
Jakub provide some details on the

00:02:32,510 --> 00:02:39,650
numbers formation about three of our

00:02:38,840 --> 00:02:43,989
projects

00:02:39,650 --> 00:02:46,430
the first one is TNF we can't hear you

00:02:43,989 --> 00:02:53,620
we have some issues you need to speak up

00:02:46,430 --> 00:02:58,549
or a DNF is a python-based project it is

00:02:53,620 --> 00:03:03,250
forked from young in 2012 and from that

00:02:58,549 --> 00:03:03,250
time we already have about 4,000 commits

00:03:04,569 --> 00:03:19,430
DNA plug in DNA plugins is again the

00:03:08,389 --> 00:03:22,400
Buyten project and the last one what do

00:03:19,430 --> 00:03:27,430
I want to highlight its latina the PMF

00:03:22,400 --> 00:03:30,560
is C C++ library they did use as

00:03:27,430 --> 00:03:35,720
back-end not only for DNF but also for

00:03:30,560 --> 00:03:38,680
the micro DNF and package gate what is

00:03:35,720 --> 00:03:38,680
most important

00:03:49,070 --> 00:04:09,260
okay maybe yeah maybe let me continue

00:03:55,110 --> 00:04:11,880
until the technical issues ninety thirty

00:04:09,260 --> 00:04:14,610
contributors and for the other two

00:04:11,880 --> 00:04:17,310
projects is about sixteen and as you can

00:04:14,610 --> 00:04:26,560
see even in the last year we have for so

00:04:17,310 --> 00:04:28,520
many active people about our achievement

00:04:26,560 --> 00:04:36,470
[Music]

00:04:28,520 --> 00:04:39,780
era I have took about modularity a quick

00:04:36,470 --> 00:04:44,310
so maybe let me cover this slide your

00:04:39,780 --> 00:04:47,340
microphone get fixed so modularity we

00:04:44,310 --> 00:04:51,080
have shipped modularity tech preview in

00:04:47,340 --> 00:04:53,490
federal 28 that was mainly patent based

00:04:51,080 --> 00:04:57,030
the code was merely a proof of concept

00:04:53,490 --> 00:04:59,580
and we have have written it completely

00:04:57,030 --> 00:05:03,180
for federal 29 which is based on the

00:04:59,580 --> 00:05:06,030
Libyan F C C++ implementation which is

00:05:03,180 --> 00:05:10,020
also available in package G and other

00:05:06,030 --> 00:05:12,960
software and we have also made some

00:05:10,020 --> 00:05:17,330
improvements in the stack mainly the

00:05:12,960 --> 00:05:19,830
memory issues memory leaks

00:05:17,330 --> 00:05:30,720
double freeze and a lot of issues

00:05:19,830 --> 00:05:32,430
leading to seg faults give it a try okay

00:05:30,720 --> 00:05:37,830
so let's switch sides okay

00:05:32,430 --> 00:05:40,620
probably that's that was an issue okay

00:05:37,830 --> 00:05:40,889
let's further next time next slide

00:05:40,620 --> 00:05:45,419
please

00:05:40,889 --> 00:05:48,060
all right okay I pick up for the

00:05:45,419 --> 00:05:51,599
performance presentation three versions

00:05:48,060 --> 00:05:54,419
the oldest one is from the fedora 26 the

00:05:51,599 --> 00:05:56,849
middle one is from the federal 27 and

00:05:54,419 --> 00:06:04,650
the last one this was recently release

00:05:56,849 --> 00:06:07,199
in Fedora 29 and rl8 better yeah as you

00:06:04,650 --> 00:06:08,759
can see during the time or a difference

00:06:07,199 --> 00:06:11,490
to come and provide the slightly

00:06:08,759 --> 00:06:15,120
improving the performance but as you can

00:06:11,490 --> 00:06:17,789
see in the photo DNF did command we have

00:06:15,120 --> 00:06:20,870
a huge difference between the version

00:06:17,789 --> 00:06:24,030
from Twitter 0:27 and the latest one and

00:06:20,870 --> 00:06:26,580
similar approach you can see the video

00:06:24,030 --> 00:06:30,199
commands that use the security options

00:06:26,580 --> 00:06:34,440
like the security bug fix the last

00:06:30,199 --> 00:06:37,319
example here it represents how DNF

00:06:34,440 --> 00:06:39,810
handlers a lot of arguments in this guy

00:06:37,319 --> 00:06:45,630
in this example it was 3000 arguments

00:06:39,810 --> 00:06:49,469
and already for the dnf2 5 one we can

00:06:45,630 --> 00:06:51,659
say that or did this DNF that sounds

00:06:49,469 --> 00:06:58,699
like pretty slow it's much faster that

00:06:51,659 --> 00:07:02,940
young yes okay maybe let me explain the

00:06:58,699 --> 00:07:05,159
latest results as you can see it's a

00:07:02,940 --> 00:07:07,169
little bit over two seconds and those

00:07:05,159 --> 00:07:09,029
two seconds is the time required for

00:07:07,169 --> 00:07:12,360
loading all the repositories which is

00:07:09,029 --> 00:07:17,039
something we cannot probably get rid of

00:07:12,360 --> 00:07:21,050
but basically we can't time from these

00:07:17,039 --> 00:07:26,039
times almost nothing because we are down

00:07:21,050 --> 00:07:28,520
to the overhead all right the slide ok

00:07:26,039 --> 00:07:28,520
that's mine

00:07:29,539 --> 00:07:35,969
ok so the first point is the new history

00:07:32,400 --> 00:07:38,520
database I'm actually the author of the

00:07:35,969 --> 00:07:40,979
change and I can proudly say that we

00:07:38,520 --> 00:07:44,430
have managed to break quite a lot of

00:07:40,979 --> 00:07:48,659
stuff in the federal 29 paralysis but

00:07:44,430 --> 00:07:50,690
luckily Fedora 29 final release is

00:07:48,659 --> 00:07:52,340
almost without any issues

00:07:50,690 --> 00:07:56,330
and everything seems to be working fine

00:07:52,340 --> 00:07:58,250
and why we were doing that the engine

00:07:56,330 --> 00:08:01,670
software database or no history database

00:07:58,250 --> 00:08:04,070
contained a lot of different tables in

00:08:01,670 --> 00:08:05,810
the sequel database and we decided to

00:08:04,070 --> 00:08:08,000
redesign it to make it better and make

00:08:05,810 --> 00:08:10,700
sure that it contains the exact

00:08:08,000 --> 00:08:13,310
information that is needed across the

00:08:10,700 --> 00:08:15,620
NSTIC and that we know what the

00:08:13,310 --> 00:08:18,470
information is there and how to use it

00:08:15,620 --> 00:08:20,270
before that it was quite quite a black

00:08:18,470 --> 00:08:24,020
box and we really didn't know what's

00:08:20,270 --> 00:08:26,870
that all about we also made a design

00:08:24,020 --> 00:08:30,440
decision on Lib DNF so we ended up

00:08:26,870 --> 00:08:33,590
coding that library in C++ and using

00:08:30,440 --> 00:08:37,340
speak to generate bindings the main

00:08:33,590 --> 00:08:40,030
reason for that was to gain native

00:08:37,340 --> 00:08:42,469
objects type containers and have

00:08:40,030 --> 00:08:46,570
bindings that are easy to generate so

00:08:42,469 --> 00:08:50,420
basically we write C++ classes we easily

00:08:46,570 --> 00:08:53,710
export them into Python we have also

00:08:50,420 --> 00:09:00,890
introduced C plug-in API which is

00:08:53,710 --> 00:09:02,570
something quite new it's quite I would

00:09:00,890 --> 00:09:04,580
say dangerous to use at the moment

00:09:02,570 --> 00:09:05,030
because we will get to that in the next

00:09:04,580 --> 00:09:07,700
slides

00:09:05,030 --> 00:09:10,910
we are planning bigger changes in the C

00:09:07,700 --> 00:09:17,300
API and if anyone uses this ladina C API

00:09:10,910 --> 00:09:28,000
with all the library in C we will change

00:09:17,300 --> 00:09:28,000
that so this is the existing DNF stack

00:09:28,510 --> 00:09:36,440
infrastructure or architecture as you

00:09:32,270 --> 00:09:38,960
can see it relies on the BNF and libyan

00:09:36,440 --> 00:09:43,310
f has quite a long history

00:09:38,960 --> 00:09:46,240
it's made of original DNF back end

00:09:43,310 --> 00:09:49,610
that's the hockey hooray

00:09:46,240 --> 00:09:51,590
and then there's the C API dolly behave

00:09:49,610 --> 00:09:53,870
which originally comes from package gate

00:09:51,590 --> 00:09:57,920
and we ended up with these two libraries

00:09:53,870 --> 00:10:00,770
in single source tree and the merge

00:09:57,920 --> 00:10:02,810
hasn't been finished finished yet so we

00:10:00,770 --> 00:10:05,780
are currently working on

00:10:02,810 --> 00:10:09,560
making all these functions and all the

00:10:05,780 --> 00:10:11,630
code better that leads also to a

00:10:09,560 --> 00:10:16,370
situation when micro DNF and package

00:10:11,630 --> 00:10:18,740
gate they used live part and DNF is

00:10:16,370 --> 00:10:22,630
based on something else and cannot use

00:10:18,740 --> 00:10:22,630
the c plugins for instance at the moment

00:10:23,380 --> 00:10:32,870
tell you this is the picture how we

00:10:30,020 --> 00:10:35,990
suggest the libyan m sheet should appear

00:10:32,870 --> 00:10:41,530
in near the far future

00:10:35,990 --> 00:10:46,250
it means we want to create a C++ API and

00:10:41,530 --> 00:10:49,430
on top of that we want to generate or as

00:10:46,250 --> 00:10:52,520
a wrapper C API or Python API or Python

00:10:49,430 --> 00:10:55,640
binding and of course the plug-in API

00:10:52,520 --> 00:10:58,310
the advantages is directly represented

00:10:55,640 --> 00:11:01,460
here that as you can see as you can see

00:10:58,310 --> 00:11:04,220
plugins API plugins can handle it also

00:11:01,460 --> 00:11:07,010
not only Libyan micro DNA package gate

00:11:04,220 --> 00:11:11,210
but also can be used or will be used

00:11:07,010 --> 00:11:15,920
with the DNF it means it will some

00:11:11,210 --> 00:11:26,300
troubles from our from our from the

00:11:15,920 --> 00:11:29,360
components that use plug-in it could it

00:11:26,300 --> 00:11:30,710
could disappear is the most important

00:11:29,360 --> 00:11:33,590
thing about this is that if something

00:11:30,710 --> 00:11:38,810
breaks in one place and we don't have to

00:11:33,590 --> 00:11:41,270
fix in three places as today and when we

00:11:38,810 --> 00:11:46,010
start to think the the plans for the

00:11:41,270 --> 00:11:50,030
next releases for the velocity we plan

00:11:46,010 --> 00:11:52,640
to deliver as a chanc support the chunk

00:11:50,030 --> 00:11:52,850
is a new compression format designing to

00:11:52,640 --> 00:11:58,310
ow

00:11:52,850 --> 00:12:01,570
Delta's for meta meta data and as I can

00:11:58,310 --> 00:12:04,810
say I think this is pretty promising

00:12:01,570 --> 00:12:09,080
technology how to decrease the downloads

00:12:04,810 --> 00:12:11,389
for the for the metadata additionally

00:12:09,080 --> 00:12:17,899
according to the federal plan

00:12:11,389 --> 00:12:20,629
plans we will drop Titan to support for

00:12:17,899 --> 00:12:24,100
the Federal Reserve and we would like to

00:12:20,629 --> 00:12:27,410
deliver a new improved modularity

00:12:24,100 --> 00:12:31,459
according to the feedback probably some

00:12:27,410 --> 00:12:35,420
of us will provide from the fedora 29 30

00:12:31,459 --> 00:12:42,350
or even rural additionally we would like

00:12:35,420 --> 00:12:46,339
to prepare for a redesign of the work

00:12:42,350 --> 00:12:49,549
cache and this should result in the

00:12:46,339 --> 00:12:54,439
shared cache with the micro DNF and

00:12:49,549 --> 00:12:57,259
package gate and additionally we have a

00:12:54,439 --> 00:13:00,259
bit see a stack dump in case can you

00:12:57,259 --> 00:13:04,699
provide information sure so we have

00:13:00,259 --> 00:13:07,790
decided to have CI tests because we want

00:13:04,699 --> 00:13:09,980
to improve the performance separate the

00:13:07,790 --> 00:13:15,649
tests from the environment so we can run

00:13:09,980 --> 00:13:17,839
them anywhere this is basically for you

00:13:15,649 --> 00:13:20,089
to let you know that if you have

00:13:17,839 --> 00:13:22,549
anything that is built on top of the NF

00:13:20,089 --> 00:13:24,499
you have any tests reach out to us so we

00:13:22,549 --> 00:13:30,049
can eventually run your tests to make

00:13:24,499 --> 00:13:32,899
sure we don't break your software okay

00:13:30,049 --> 00:13:35,899
let spec for the plans for the velocity

00:13:32,899 --> 00:13:37,850
we still have a plans yeah we want to

00:13:35,899 --> 00:13:41,689
deliver this shared metadata and

00:13:37,850 --> 00:13:43,879
download RPM it means one unload for the

00:13:41,689 --> 00:13:45,919
package get a DNF and marketed NF and

00:13:43,879 --> 00:13:47,839
especially people who work on the

00:13:45,919 --> 00:13:51,829
workstation I think they will love it

00:13:47,839 --> 00:13:55,249
yeah also as I mentioned the unified

00:13:51,829 --> 00:13:59,110
code base this is the target fedora 32

00:13:55,249 --> 00:14:02,989
and it means state new stable API

00:13:59,110 --> 00:14:05,449
newsweek bindings and additionally there

00:14:02,989 --> 00:14:09,110
is the downside probably for the some of

00:14:05,449 --> 00:14:10,879
the users we want to drop the hockey

00:14:09,110 --> 00:14:16,100
sack package because it will be replaced

00:14:10,879 --> 00:14:18,379
by the new stable and supported API this

00:14:16,100 --> 00:14:20,539
actually looks quite simple but we need

00:14:18,379 --> 00:14:22,270
to redesign quite a lot of stuff under

00:14:20,539 --> 00:14:24,610
hood without

00:14:22,270 --> 00:14:26,560
making any bigger changes in public

00:14:24,610 --> 00:14:29,380
interfaces and without breaking anything

00:14:26,560 --> 00:14:31,720
so this will probably take some time but

00:14:29,380 --> 00:14:37,570
the goal is to have single unified

00:14:31,720 --> 00:14:41,170
library and the future vision this is

00:14:37,570 --> 00:14:44,050
just an overview we have touched these

00:14:41,170 --> 00:14:46,770
topics in the previous slides so we are

00:14:44,050 --> 00:14:50,980
aiming to have all the business logic

00:14:46,770 --> 00:14:55,360
moved from DNF to live DNF so DNF stays

00:14:50,980 --> 00:14:58,240
as Python API as a compatible API with

00:14:55,360 --> 00:15:00,160
existing tools but all the business

00:14:58,240 --> 00:15:02,260
logic will go to lib DNF so it's

00:15:00,160 --> 00:15:06,160
available to micro DNF and package gate

00:15:02,260 --> 00:15:10,000
possibly other software micro DNF will

00:15:06,160 --> 00:15:13,210
gain more features so basically you

00:15:10,000 --> 00:15:17,770
won't see any difference if you use DNF

00:15:13,210 --> 00:15:19,540
or micro DNF the only thing we know

00:15:17,770 --> 00:15:21,010
about that it's not achievable in my

00:15:19,540 --> 00:15:23,190
Korean official viously the Python

00:15:21,010 --> 00:15:28,960
plugins but everything else should be

00:15:23,190 --> 00:15:30,970
most likely doable in micro DNF and it's

00:15:28,960 --> 00:15:33,670
not going to replace DNF we will

00:15:30,970 --> 00:15:36,250
maintain both at least for some time and

00:15:33,670 --> 00:15:39,160
we are also thinking this is you know

00:15:36,250 --> 00:15:42,460
something nothing more than a vision

00:15:39,160 --> 00:15:43,960
that we make 8 a DNF daemon replacing

00:15:42,460 --> 00:15:45,820
possibly the existing Python the an

00:15:43,960 --> 00:15:51,430
agreement in Fedora which is the back

00:15:45,820 --> 00:15:53,950
end for for the end of the Agora and we

00:15:51,430 --> 00:15:59,740
may also integrate this demon with

00:15:53,950 --> 00:16:02,200
anaconda which helps them to avoid

00:15:59,740 --> 00:16:04,210
forking the DNF browsers and Linux

00:16:02,200 --> 00:16:06,040
handling everything by themselves so we

00:16:04,210 --> 00:16:08,620
can offer them a service and enjoy it

00:16:06,040 --> 00:16:10,270
and again it's not going to replace

00:16:08,620 --> 00:16:13,120
anything else in the stack it's an

00:16:10,270 --> 00:16:14,860
additional service you can use but if

00:16:13,120 --> 00:16:18,940
you don't have to if you don't want to

00:16:14,860 --> 00:16:22,420
you don't have to this is the final

00:16:18,940 --> 00:16:26,530
slide so thanks to the DNF team who

00:16:22,420 --> 00:16:29,130
actually helped us to get here and made

00:16:26,530 --> 00:16:31,960
all the hard work over the last years

00:16:29,130 --> 00:16:33,910
also to the community and contribute

00:16:31,960 --> 00:16:36,640
were reported all the issues and box and

00:16:33,910 --> 00:16:40,450
special thanks to Neil gompa some of you

00:16:36,640 --> 00:16:42,630
know this guy he actually spelled DNF

00:16:40,450 --> 00:16:47,860
into three other distributions

00:16:42,630 --> 00:16:51,870
definitely big thanks for doing that so

00:16:47,860 --> 00:16:51,870
this is time for questions and answers

00:17:09,630 --> 00:17:16,390
okay DNF ability in four takes quite a

00:17:12,970 --> 00:17:19,589
long time to execute wish Federer was

00:17:16,390 --> 00:17:22,929
that was that twenty nine

00:17:19,589 --> 00:17:26,380
so okay we will look into that it's

00:17:22,929 --> 00:17:28,120
related to the security filters we have

00:17:26,380 --> 00:17:32,830
to see that and it seemed to be working

00:17:28,120 --> 00:17:36,370
fine maybe if you could drop bugzilla

00:17:32,830 --> 00:17:40,000
for us so we can reproduce that on some

00:17:36,370 --> 00:17:50,320
data or something or maybe if you if you

00:17:40,000 --> 00:17:52,059
can share the expectations with us yes

00:17:50,320 --> 00:17:54,340
but you know the thing is that we

00:17:52,059 --> 00:17:57,550
typically we are not optimizing

00:17:54,340 --> 00:18:00,010
everything if something doesn't work as

00:17:57,550 --> 00:18:03,250
expected then we analyze that and fix

00:18:00,010 --> 00:18:05,770
that so basically based on any any

00:18:03,250 --> 00:18:09,610
reports we can you know we probably need

00:18:05,770 --> 00:18:11,530
just the command just just like Zillah

00:18:09,610 --> 00:18:13,840
and people look at exactly the versions

00:18:11,530 --> 00:18:15,880
we need and especially this guy is

00:18:13,840 --> 00:18:19,920
interested in that he does all the

00:18:15,880 --> 00:18:19,920
optimizations I love it

00:18:27,410 --> 00:18:36,200
okay the question is whether the Liberty

00:18:33,300 --> 00:18:39,470
Network will impact the size of

00:18:36,200 --> 00:18:44,100
containers I think the answer is no

00:18:39,470 --> 00:18:46,650
besides maybe maybe the micro DNF binary

00:18:44,100 --> 00:18:48,270
will slightly go but I don't expect

00:18:46,650 --> 00:18:50,550
anything else because all other

00:18:48,270 --> 00:18:53,670
functionality is in Libya for one day so

00:18:50,550 --> 00:18:56,790
I don't expect any any big changes in

00:18:53,670 --> 00:18:58,740
the size and eventually you will get a

00:18:56,790 --> 00:19:07,170
fully functional DNF in the container

00:18:58,740 --> 00:19:08,850
with no additional overhead I know

00:19:07,170 --> 00:19:10,350
you're the guy who actually helped me to

00:19:08,850 --> 00:19:25,260
fix all the issues with software

00:19:10,350 --> 00:19:27,390
database yes that that is the goal but

00:19:25,260 --> 00:19:30,390
we need a couple years to get there

00:19:27,390 --> 00:19:33,330
because if you look into the sources and

00:19:30,390 --> 00:19:36,630
you see all the possible gold path it's

00:19:33,330 --> 00:19:39,390
not nice and we want to have single code

00:19:36,630 --> 00:19:56,930
path for everything and all everything

00:19:39,390 --> 00:19:56,930
documented just yes any other question

00:19:57,080 --> 00:20:01,750
all right so that's it thank you for

00:20:00,480 --> 00:20:10,450
attending thank you very much

00:20:01,750 --> 00:20:10,450

YouTube URL: https://www.youtube.com/watch?v=6bvExIy5JyE


