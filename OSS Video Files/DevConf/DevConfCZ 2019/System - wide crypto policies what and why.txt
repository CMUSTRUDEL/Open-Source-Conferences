Title: System - wide crypto policies what and why
Publication date: 2019-03-04
Playlist: DevConfCZ 2019
Description: 
	Presentation name: System - wide crypto policies what and why
Speaker: Tomáš Mráz
Description:  System-wide crypto policies are a fairly new thing in Fedora. In this talk I will introduce them and show the reasons why system-wide crypto policies are needed.
Then we look at them in more details - which are the currently provided policy levels, which core crypto components follow the policy, and how the policies are implemented.
I will also provide overview of what is in works and what are the future plans with the system-wide crypto policies features.
The attendants of the talk should have some basic knowledge of cryptography algorithms and secure protocols from the user's point of view.
[ https://sched.co/JcjU ]
Captions: 
	00:00:04,880 --> 00:00:14,460
my name my name is Tomas Tomas I work in

00:00:08,240 --> 00:00:17,070
the team which focuses on encryption and

00:00:14,460 --> 00:00:23,970
other cryptographic technologies on the

00:00:17,070 --> 00:00:32,220
platform on Darrell and Fedora so I will

00:00:23,970 --> 00:00:35,010
what yeah okay for the for the start I

00:00:32,220 --> 00:00:38,610
will talk a little bit about history

00:00:35,010 --> 00:00:41,190
what perspectives it gives us then I

00:00:38,610 --> 00:00:44,070
will get to the point what is the crypto

00:00:41,190 --> 00:00:49,370
policies why do we need it I will show

00:00:44,070 --> 00:00:52,620
you some demo of the functionality and I

00:00:49,370 --> 00:00:56,030
will talk about some details and also

00:00:52,620 --> 00:01:06,180
what crypto policies isn't about and

00:00:56,030 --> 00:01:08,820
some future for the history I won't go

00:01:06,180 --> 00:01:13,830
through all this stuff that I put on the

00:01:08,820 --> 00:01:16,980
slides but basically crypt of

00:01:13,830 --> 00:01:19,070
cryptography was started to be used very

00:01:16,980 --> 00:01:23,300
early in history

00:01:19,070 --> 00:01:26,220
but at at all times these were mostly

00:01:23,300 --> 00:01:28,680
substitution ciphers and stuff that can

00:01:26,220 --> 00:01:33,450
be very easily broken it was broken

00:01:28,680 --> 00:01:38,880
like the first century first millennium

00:01:33,450 --> 00:01:41,600
after there is one thing that's not yet

00:01:38,880 --> 00:01:47,520
deciphered it's the Voynich manuscript

00:01:41,600 --> 00:01:50,369
but the the reason is that the context

00:01:47,520 --> 00:01:52,470
is unknown and there is too little

00:01:50,369 --> 00:01:56,790
information about it and it might not be

00:01:52,470 --> 00:02:01,439
even a cipher one interesting thing is

00:01:56,790 --> 00:02:03,869
that at 1917 the job Joubert Varnum

00:02:01,439 --> 00:02:05,939
invented the one-time pad which is the

00:02:03,869 --> 00:02:09,269
only fully mathematically proven and

00:02:05,939 --> 00:02:12,750
breakup or cipher but there is but and

00:02:09,269 --> 00:02:13,390
that's the context I don't I won't go

00:02:12,750 --> 00:02:16,720
into it

00:02:13,390 --> 00:02:22,900
but there are many ifs and and so on

00:02:16,720 --> 00:02:24,900
yeah this is modern cryptography for

00:02:22,900 --> 00:02:31,090
symmetric we have deaths

00:02:24,900 --> 00:02:34,060
it started with dest now we have aes for

00:02:31,090 --> 00:02:40,770
the public a public key cryptography

00:02:34,060 --> 00:02:46,120
it was also invented in 70s this is

00:02:40,770 --> 00:02:48,850
timeline of secure protocols or the

00:02:46,120 --> 00:02:52,480
major one which is SSL and then later

00:02:48,850 --> 00:02:55,900
TLS this this is where it was like

00:02:52,480 --> 00:02:59,590
publish the standard standard was

00:02:55,900 --> 00:03:04,150
published and this is when it was a

00:02:59,590 --> 00:03:08,680
pre-k and this kind of line shows you

00:03:04,150 --> 00:03:11,830
when it was insecure so SSL and insecure

00:03:08,680 --> 00:03:15,580
that we know that it is insecure so SSL

00:03:11,830 --> 00:03:17,890
me - it was like this so since the

00:03:15,580 --> 00:03:21,250
beginning but it was anybody deployed

00:03:17,890 --> 00:03:26,230
yeah so yeah it was insecure but the

00:03:21,250 --> 00:03:29,590
point at this time it really that much

00:03:26,230 --> 00:03:33,239
deployed for SSL v3

00:03:29,590 --> 00:03:38,560
b3v are a little bit worse because yeah

00:03:33,239 --> 00:03:41,440
this is like kind of longer but we still

00:03:38,560 --> 00:03:44,530
have SSL v3 servers it's not on public

00:03:41,440 --> 00:03:48,540
internet but it's not that that much

00:03:44,530 --> 00:03:50,930
anymore anyway but for the others

00:03:48,540 --> 00:03:54,950
you can see us this this is top of the

00:03:50,930 --> 00:03:57,690
situation the only secure protocols

00:03:54,950 --> 00:04:01,140
which we can like reasonably that are

00:03:57,690 --> 00:04:04,650
secure TLS we put a 1.2 and of course

00:04:01,140 --> 00:04:11,069
the others 1.3 there are some ifs 40oz

00:04:04,650 --> 00:04:14,430
1.2 but so what perspective is this

00:04:11,069 --> 00:04:16,739
gives us the progress in design of new

00:04:14,430 --> 00:04:20,160
ciphers goes hand-in-hand with progress

00:04:16,739 --> 00:04:22,229
in script analysis and algorithms and

00:04:20,160 --> 00:04:24,030
protocols will be broken and replies

00:04:22,229 --> 00:04:26,580
that's the fact

00:04:24,030 --> 00:04:29,490
we need to get us accustomed with it and

00:04:26,580 --> 00:04:31,470
of course there is a huge pool of legacy

00:04:29,490 --> 00:04:35,520
things that we need to communicate with

00:04:31,470 --> 00:04:37,800
and that might not be that secure

00:04:35,520 --> 00:04:41,130
communication but we need to communicate

00:04:37,800 --> 00:04:43,070
with them you cannot like just say no we

00:04:41,130 --> 00:04:46,020
won't

00:04:43,070 --> 00:04:49,110
so what what what's the crypto policies

00:04:46,020 --> 00:04:52,020
it's a set of configuration files or

00:04:49,110 --> 00:04:55,560
configuration file snippets that are

00:04:52,020 --> 00:04:58,770
centrally managed on the system they

00:04:55,560 --> 00:05:01,889
have multiple pre-designed policy policy

00:04:58,770 --> 00:05:03,990
levels which are maintained and they

00:05:01,889 --> 00:05:07,320
cover cover crypto components of a

00:05:03,990 --> 00:05:11,160
system there was a presentation in the

00:05:07,320 --> 00:05:16,979
morning components but I will also talk

00:05:11,160 --> 00:05:18,660
about this they they are present the

00:05:16,979 --> 00:05:21,150
crypto policies are present on current

00:05:18,660 --> 00:05:29,010
federal leases and they will be in a

00:05:21,150 --> 00:05:31,229
relay why do we need it this is

00:05:29,010 --> 00:05:33,930
basically coming from the from the

00:05:31,229 --> 00:05:35,639
perspectives cryptography and secure

00:05:33,930 --> 00:05:38,310
protocols are widespread in the

00:05:35,639 --> 00:05:40,289
operating system and multiple

00:05:38,310 --> 00:05:43,020
cryptographic libraries provide the

00:05:40,289 --> 00:05:45,720
implementation so we have and we have

00:05:43,020 --> 00:05:49,020
relatively relatively fast changes we

00:05:45,720 --> 00:05:53,240
need to like adjust rightly

00:05:49,020 --> 00:05:56,910
quickly especially if on enterprise

00:05:53,240 --> 00:06:00,330
products which have a long life cycle

00:05:56,910 --> 00:06:03,030
and we have multiple things to configure

00:06:00,330 --> 00:06:05,630
so it would be very hard to like require

00:06:03,030 --> 00:06:11,460
the sysadmin to do all all the stuff or

00:06:05,630 --> 00:06:14,960
reconfigure and so on so and we have got

00:06:11,460 --> 00:06:18,150
a legacy device devices which use an

00:06:14,960 --> 00:06:19,920
insecure or partly insecure algorithms

00:06:18,150 --> 00:06:21,320
or protocols and we need to communicate

00:06:19,920 --> 00:06:37,700
with them

00:06:21,320 --> 00:06:41,880
let's look at some demo so say I have a

00:06:37,700 --> 00:06:43,560
HTTP server which is configured to use

00:06:41,880 --> 00:06:47,160
only TLS

00:06:43,560 --> 00:06:50,630
we want or we want one and I need to

00:06:47,160 --> 00:06:53,790
communicate it based on real a beta

00:06:50,630 --> 00:06:56,990
which is not the system here but I have

00:06:53,790 --> 00:07:03,240
installed policy from rally beta here

00:06:56,990 --> 00:07:06,330
and let's say I use normal connection to

00:07:03,240 --> 00:07:08,730
this system open SSL and you can see

00:07:06,330 --> 00:07:12,390
that the others when we want a large

00:07:08,730 --> 00:07:14,490
protocol version but that means that the

00:07:12,390 --> 00:07:19,560
protocol is not accepted by the client

00:07:14,490 --> 00:07:21,570
and or rather the server says that

00:07:19,560 --> 00:07:28,710
protocol that the client offered is not

00:07:21,570 --> 00:07:33,690
accepted by server and then I can try T

00:07:28,710 --> 00:07:35,340
as one and it will work but this is

00:07:33,690 --> 00:07:41,610
somehow overriding the system

00:07:35,340 --> 00:07:46,010
configuration and but I can I can do all

00:07:41,610 --> 00:07:46,010
right I can show you also Firefox

00:07:47,389 --> 00:08:05,669
don't put it to the right yeah you can

00:07:54,240 --> 00:08:09,169
see it's felt then if I do I will set

00:08:05,669 --> 00:08:11,910
the system-wide crypto policy to legacy

00:08:09,169 --> 00:08:18,150
with the update crypto policy set like a

00:08:11,910 --> 00:08:21,690
sick amount and then the OpenSSL apply

00:08:18,150 --> 00:08:24,330
and magically start working I know you

00:08:21,690 --> 00:08:27,419
can see that it used basically the

00:08:24,330 --> 00:08:31,650
highest available protocol which is the

00:08:27,419 --> 00:08:35,460
husband we won on and hopefully the

00:08:31,650 --> 00:08:42,570
Firefox will work as well yeah it it

00:08:35,460 --> 00:08:45,680
loaded so sleep let's switch back to

00:08:42,570 --> 00:08:45,680
default because

00:08:51,510 --> 00:08:56,800
or fully secured let's say not that like

00:08:55,209 --> 00:09:00,519
I see policy that doesn't make you

00:08:56,800 --> 00:09:03,220
insecure but it will make it tomorrow in

00:09:00,519 --> 00:09:04,660
the end you can be more less secure if

00:09:03,220 --> 00:09:06,760
you are connecting to the like a sister

00:09:04,660 --> 00:09:10,360
it doesn't mean that if you connect to

00:09:06,760 --> 00:09:12,519
side that uses proper versions and

00:09:10,360 --> 00:09:14,560
algorithms it will make you insecure you

00:09:12,519 --> 00:09:23,200
will use the the best algorithm to the

00:09:14,560 --> 00:09:25,170
terrible so the details we have these

00:09:23,200 --> 00:09:28,180
script or libraries and other

00:09:25,170 --> 00:09:32,410
applications that are considered to be

00:09:28,180 --> 00:09:37,390
core this is open SSL TLS NSS in Java

00:09:32,410 --> 00:09:39,430
for crypto libraries and the other

00:09:37,390 --> 00:09:41,800
applications which basically are not

00:09:39,430 --> 00:09:45,070
using the TLS protocol but other

00:09:41,800 --> 00:09:48,459
protocols other security costs and thus

00:09:45,070 --> 00:09:50,800
a Kerberos 5 bind OpenSSH which is

00:09:48,459 --> 00:09:53,500
addressed to configurations for client

00:09:50,800 --> 00:10:00,010
and server separately and for reverse

00:09:53,500 --> 00:10:06,010
one for IPSec and I these are policies

00:10:00,010 --> 00:10:11,200
that we provide legacy is let's say at

00:10:06,010 --> 00:10:16,180
least 64-bit security default at least

00:10:11,200 --> 00:10:19,209
80 bit next which is federal only policy

00:10:16,180 --> 00:10:25,300
but it's actually the default on rel egg

00:10:19,209 --> 00:10:27,610
but this in addition to them federally

00:10:25,300 --> 00:10:33,579
for time of Steel as 101 one and

00:10:27,610 --> 00:10:37,420
requires 2k the film and RSA keys and it

00:10:33,579 --> 00:10:40,779
should be for this reason to be 112 bit

00:10:37,420 --> 00:10:41,470
security there is exception and that's a

00:10:40,779 --> 00:10:45,220
shaman

00:10:41,470 --> 00:10:49,899
because sha-1 is still used in the NSA

00:10:45,220 --> 00:10:50,230
and we cannot like completely switch it

00:10:49,899 --> 00:10:54,930
off

00:10:50,230 --> 00:10:57,270
so this somehow breaks the rule for 100

00:10:54,930 --> 00:11:02,190
security for collisions in signatures

00:10:57,270 --> 00:11:05,960
it's only a bit future is the

00:11:02,190 --> 00:11:09,750
conservative level and there are only

00:11:05,960 --> 00:11:12,260
256 bits ciphers and no Chauhan Phipps

00:11:09,750 --> 00:11:16,110
is a special police say that's for use

00:11:12,260 --> 00:11:22,560
by FIPS mode setup you shouldn't like

00:11:16,110 --> 00:11:25,070
set it manually you can actually but you

00:11:22,560 --> 00:11:25,070
are on your own

00:11:27,920 --> 00:11:36,899
so some Ras use default just like us

00:11:32,520 --> 00:11:39,330
only if you're needed use future to test

00:11:36,899 --> 00:11:42,800
compatibility of your Nura created or

00:11:39,330 --> 00:11:47,040
deployed application it's not usable for

00:11:42,800 --> 00:11:50,250
general use but it's useful if you are

00:11:47,040 --> 00:11:53,040
deploying a new server for example it's

00:11:50,250 --> 00:11:55,620
a good idea to check if client which

00:11:53,040 --> 00:12:02,490
uses future can communicate with this

00:11:55,620 --> 00:12:04,620
new server even legacy level doesn't

00:12:02,490 --> 00:12:08,100
enable everything or make your system

00:12:04,620 --> 00:12:11,220
insecure so and we do things like

00:12:08,100 --> 00:12:12,860
disabling SSL v2 which is completely

00:12:11,220 --> 00:12:17,190
removed and there is no implementation

00:12:12,860 --> 00:12:19,680
anymore and SSL v3 is disabled during

00:12:17,190 --> 00:12:22,290
the build time so even if you use like I

00:12:19,680 --> 00:12:25,080
say you unfortunately won't be able to

00:12:22,290 --> 00:12:28,140
communicate with SSL v3 only server and

00:12:25,080 --> 00:12:31,290
that the reason is that eventual

00:12:28,140 --> 00:12:33,150
downgrade can be catastrophic and we

00:12:31,290 --> 00:12:39,660
don't want actually make the legacy

00:12:33,150 --> 00:12:41,970
policy to be like really insecure custom

00:12:39,660 --> 00:12:47,490
levels are currently somehow somehow

00:12:41,970 --> 00:12:50,760
possible but it's very hard to like do

00:12:47,490 --> 00:12:54,899
them you would have to basically create

00:12:50,760 --> 00:12:57,959
the policy install it on yourself and it

00:12:54,899 --> 00:13:00,750
would be like if we make some change

00:12:57,959 --> 00:13:04,810
there is no fixed API for for the

00:13:00,750 --> 00:13:06,900
policies so it

00:13:04,810 --> 00:13:09,670
it can be that a new version of like

00:13:06,900 --> 00:13:17,790
crypto police is evil they'll be broken

00:13:09,670 --> 00:13:22,660
so that's somehow these are the files

00:13:17,790 --> 00:13:24,820
for structure on the system not that

00:13:22,660 --> 00:13:28,540
much interesting there is something like

00:13:24,820 --> 00:13:30,520
loco D which allows to add some

00:13:28,540 --> 00:13:33,370
additional configuration to the to the

00:13:30,520 --> 00:13:35,350
predefined mekin configuration back in

00:13:33,370 --> 00:13:38,440
Confederations this is actually not that

00:13:35,350 --> 00:13:39,760
useful for custom crypto policies but it

00:13:38,440 --> 00:13:43,780
can be used for things like

00:13:39,760 --> 00:13:46,900
mentioned on the slide currently it's

00:13:43,780 --> 00:13:51,370
used for a little pile and keep proxy to

00:13:46,900 --> 00:13:53,800
NSS by default what crypto policies

00:13:51,370 --> 00:13:57,910
isn't they won't make your

00:13:53,800 --> 00:14:00,700
systematically secure of course you

00:13:57,910 --> 00:14:05,470
still need to for example handle system

00:14:00,700 --> 00:14:10,540
updates and so on there is no support

00:14:05,470 --> 00:14:13,290
for data at rest the reason is that the

00:14:10,540 --> 00:14:17,490
requirements are very much different

00:14:13,290 --> 00:14:20,470
than for data in transit

00:14:17,490 --> 00:14:22,960
it cannot magically configure things and

00:14:20,470 --> 00:14:26,760
doesn't know about for example we had

00:14:22,960 --> 00:14:29,230
this talk about a Russian ghost

00:14:26,760 --> 00:14:34,450
implementation and currently crypto

00:14:29,230 --> 00:14:36,280
policies don't know about it and yeah it

00:14:34,450 --> 00:14:39,370
cannot configure for example if you have

00:14:36,280 --> 00:14:42,640
your application that uses third-party

00:14:39,370 --> 00:14:46,990
crypto library yeah it won't follow the

00:14:42,640 --> 00:14:50,380
crypto policies what in a future we

00:14:46,990 --> 00:14:53,290
would like to really work on the custom

00:14:50,380 --> 00:14:57,040
crypto policies which would mean that

00:14:53,290 --> 00:15:00,430
the policy will be some kind of policy

00:14:57,040 --> 00:15:02,410
definition file there will be scripts or

00:15:00,430 --> 00:15:08,140
tools which will deploy the police say

00:15:02,410 --> 00:15:12,010
they would update it if the backend

00:15:08,140 --> 00:15:14,150
changed but or the or the crypto

00:15:12,010 --> 00:15:18,470
policies but he changed but

00:15:14,150 --> 00:15:21,260
compatible way so it will seamlessly

00:15:18,470 --> 00:15:25,120
work okay we would like to cooperate

00:15:21,260 --> 00:15:29,330
with other Linux OS vendors or

00:15:25,120 --> 00:15:32,510
distributions so the system-wide trip

00:15:29,330 --> 00:15:34,370
the policies are used everywhere and you

00:15:32,510 --> 00:15:36,589
would like add support for more

00:15:34,370 --> 00:15:41,290
algorithms of course and you would like

00:15:36,589 --> 00:15:45,080
to add more backends which mostly mostly

00:15:41,290 --> 00:15:51,020
these are your most critical examples

00:15:45,080 --> 00:15:53,360
like go googling leap SSH maybe some

00:15:51,020 --> 00:15:56,890
time and like more distant future we

00:15:53,360 --> 00:16:01,029
should think about the date at rest

00:15:56,890 --> 00:16:01,029
these are resources

00:16:01,210 --> 00:16:08,480
so what's summery take away system-wide

00:16:06,020 --> 00:16:11,839
crypto policies help it maintaining your

00:16:08,480 --> 00:16:13,430
crypto usage up-to-date help it it

00:16:11,839 --> 00:16:15,170
doesn't mean that they solve all the

00:16:13,430 --> 00:16:19,400
problems right

00:16:15,170 --> 00:16:22,010
they provide some like a C compatibility

00:16:19,400 --> 00:16:26,360
they provide you way how to prepare for

00:16:22,010 --> 00:16:33,370
future and if something doesn't work use

00:16:26,360 --> 00:16:36,370
this command and advice pieces before

00:16:33,370 --> 00:16:36,370
questions

00:16:37,730 --> 00:16:40,789
[Music]

00:16:47,030 --> 00:16:53,299
[Music]

00:16:58,090 --> 00:17:08,420
[Music]

00:17:13,550 --> 00:17:16,860
[Music]

00:17:14,990 --> 00:17:18,959
unfortunate yeah

00:17:16,860 --> 00:17:23,030
the first question was whether whether

00:17:18,959 --> 00:17:26,250
the ligase policy will help me with

00:17:23,030 --> 00:17:29,850
connecting to really own legacy devices

00:17:26,250 --> 00:17:34,170
which use for example SSL v2 and the

00:17:29,850 --> 00:17:37,950
second question was whether the policy

00:17:34,170 --> 00:17:44,090
can apply the federal system well can

00:17:37,950 --> 00:17:47,090
apply policy for each binary separately

00:17:44,090 --> 00:17:50,880
so the answer to both questions is no

00:17:47,090 --> 00:17:54,030
the first of course and I talked about

00:17:50,880 --> 00:17:56,490
it that we some some things are

00:17:54,030 --> 00:18:00,420
completely removed from the system for

00:17:56,490 --> 00:18:02,570
because they are very insecure from and

00:18:00,420 --> 00:18:05,220
there is no implementation actually and

00:18:02,570 --> 00:18:07,350
some things are disabled on both time

00:18:05,220 --> 00:18:13,340
and like I say policy cannot do anything

00:18:07,350 --> 00:18:17,130
is that and for the second question

00:18:13,340 --> 00:18:21,300
actually the policy or for most of the

00:18:17,130 --> 00:18:24,150
back ends the the applications can

00:18:21,300 --> 00:18:27,390
override the policy so they can say that

00:18:24,150 --> 00:18:30,270
yeah we allow whatever TLS version or

00:18:27,390 --> 00:18:32,430
something but the default default

00:18:30,270 --> 00:18:35,610
configuration of this of these

00:18:32,430 --> 00:18:39,720
applications as as they are in the in

00:18:35,610 --> 00:18:42,150
the OS should like respect the policy

00:18:39,720 --> 00:18:45,980
defaults if you override it manually in

00:18:42,150 --> 00:18:45,980
the configuration file then you override

00:19:00,539 --> 00:19:37,750
yeah ya know so the question is what can

00:19:34,809 --> 00:19:40,750
be configured by the policy currently it

00:19:37,750 --> 00:19:43,150
allows you to configure the ciphers the

00:19:40,750 --> 00:19:46,679
key lengths and the protocol versions

00:19:43,150 --> 00:19:46,679
basically that's it

00:20:03,060 --> 00:20:09,330
[Music]

00:20:05,990 --> 00:20:12,420
yeah the question is well when the

00:20:09,330 --> 00:20:14,550
policy vendor Arboretum's is unknown to

00:20:12,420 --> 00:20:17,300
the policy it's rejected yeah the

00:20:14,550 --> 00:20:45,210
current configurations as they are

00:20:17,300 --> 00:20:48,870
basically the question was whether open

00:20:45,210 --> 00:20:53,090
ssl upstream team considers including

00:20:48,870 --> 00:20:53,090
something by themselves like similar

00:20:56,540 --> 00:21:04,080
well basically i discuss it when i

00:21:01,880 --> 00:21:07,800
submitted the power pool request that

00:21:04,080 --> 00:21:10,130
allows loading the or makes the OpenSSL

00:21:07,800 --> 00:21:13,290
owning the configuration file by default

00:21:10,130 --> 00:21:16,800
there was some discussions some small

00:21:13,290 --> 00:21:24,600
discussion but I feel it like for damn

00:21:16,800 --> 00:21:27,150
it's like this is not not basically what

00:21:24,600 --> 00:21:30,000
they have now allows you if you use open

00:21:27,150 --> 00:21:32,970
ssl in isolation you basically allows

00:21:30,000 --> 00:21:38,250
you to do this configuration so but it's

00:21:32,970 --> 00:21:41,510
not I don't yes yeah it's not system

00:21:38,250 --> 00:21:41,510
like yeah

00:21:45,220 --> 00:21:51,450
[Music]

00:21:59,490 --> 00:22:05,730
the four OpenSSL the configuration file

00:22:02,279 --> 00:22:09,360
is loaded by the by the library by

00:22:05,730 --> 00:22:12,919
default you can I think you can override

00:22:09,360 --> 00:22:12,919
it so it won't load it

00:22:14,210 --> 00:22:22,759
no the a bit crypto policy tool

00:22:18,179 --> 00:22:25,980
basically updates the configuration file

00:22:22,759 --> 00:22:28,440
somehow a little bit different but the

00:22:25,980 --> 00:22:31,110
configuration file loads the policy it

00:22:28,440 --> 00:22:34,259
includes the configuration file snippet

00:22:31,110 --> 00:22:36,350
that has the policy configuration and if

00:22:34,259 --> 00:22:42,049
you disable loading the default

00:22:36,350 --> 00:22:42,049
configuration file then you won't get

00:22:58,509 --> 00:23:09,889
we can edit this

00:23:06,709 --> 00:23:12,109
there's a man page and at least I was

00:23:09,889 --> 00:23:16,449
like stepping quickly through that maybe

00:23:12,109 --> 00:23:19,399
I should not my home page of the tool

00:23:16,449 --> 00:23:24,979
but there is numerical page that will be

00:23:19,399 --> 00:23:27,889
in the next absence that lists all the

00:23:24,979 --> 00:23:29,839
policies in the detail the supported

00:23:27,889 --> 00:23:32,449
procedure and of course with the

00:23:29,839 --> 00:23:34,009
interaction of custom crypto policies we

00:23:32,449 --> 00:23:36,889
will have to provide something like this

00:23:34,009 --> 00:23:40,850
listing all the policies on the system

00:23:36,889 --> 00:23:43,960
and so on but this is not ethical

00:23:40,850 --> 00:23:43,960
[Music]

00:23:53,549 --> 00:24:00,299
the question was whether there could be

00:23:56,049 --> 00:24:04,570
somewhere Bo's mode which will like show

00:24:00,299 --> 00:24:06,520
show the what what the actual policy

00:24:04,570 --> 00:24:09,130
applied is and so on

00:24:06,520 --> 00:24:11,580
currently we a thank thank you for the

00:24:09,130 --> 00:24:11,580
suggestion

00:24:16,550 --> 00:24:25,219

YouTube URL: https://www.youtube.com/watch?v=mvESVXRy-WY


