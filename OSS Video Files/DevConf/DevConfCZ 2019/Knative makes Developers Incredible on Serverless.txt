Title: Knative makes Developers Incredible on Serverless
Publication date: 2019-03-04
Playlist: DevConfCZ 2019
Description: 
	Presentation name: Knative makes Developers Incredible on Serverless
Speaker: Daniel Oh
Description:  What makes your developers incredible to develop, deploy, manage modern serverless workload? With Knative, developers can create and deploy their own serverless on Kubernetes where they want then develop your functions with your language of choice. For example, OpenWhisk has rich support for your preferred serverless apps such as Python, Java. If those languages don't suit your needs, you can deploy your own app container to act as your function. Because the containers only spin up for a function when in use, resource usage can be minimized during idle times. 
In this session, you will learn how Knative makes it easier, quicker to develop, deploy, and manage your serverless app for enterprise developers with an understandable live demo.
[ https://sched.co/Jck7 ]
Captions: 
	00:00:05,270 --> 00:00:11,000
hello everybody

00:00:06,950 --> 00:00:13,680
also my white people then I expected so

00:00:11,000 --> 00:00:15,990
so what I'm going to talk about today is

00:00:13,680 --> 00:00:21,689
the key native stuff so keep one how

00:00:15,990 --> 00:00:23,900
many you are oops sorry about that

00:00:21,689 --> 00:00:23,900
Oh

00:00:31,099 --> 00:00:38,330
all right so how many you are some

00:00:34,620 --> 00:00:41,790
experience about somebody's computing

00:00:38,330 --> 00:00:43,290
nobody oh just people all right and how

00:00:41,790 --> 00:00:49,260
many of you have some heard about que

00:00:43,290 --> 00:00:50,970
nadie proper alright cool so today I'm

00:00:49,260 --> 00:00:53,010
going to be talking about kab makes the

00:00:50,970 --> 00:00:55,740
developer awesome in the story journey

00:00:53,010 --> 00:00:58,280
so let me talk about my first pair for

00:00:55,740 --> 00:01:01,380
free so my name is Daniel Rowe I'm a

00:00:58,280 --> 00:01:03,210
DevOps evangelist and we had an edge

00:01:01,380 --> 00:01:05,970
already working as a solution architect

00:01:03,210 --> 00:01:08,700
so I'm specialized in more cloud native

00:01:05,970 --> 00:01:11,190
app tab based on Asia and above the

00:01:08,700 --> 00:01:14,610
practice railroad just single Radian

00:01:11,190 --> 00:01:16,620
product or some methodology so I got

00:01:14,610 --> 00:01:19,590
many chance to talk about this agenda

00:01:16,620 --> 00:01:22,740
clown ad microservices their most ever

00:01:19,590 --> 00:01:26,909
calls and even listening are summaries

00:01:22,740 --> 00:01:29,520
with the enterprise developers so so

00:01:26,909 --> 00:01:32,070
just keep one or more time so how many

00:01:29,520 --> 00:01:36,870
of you are enterprise developers or just

00:01:32,070 --> 00:01:40,409
developers oh yeah perfect and alum

00:01:36,870 --> 00:01:42,570
redhead I'm cnc ambassador so I try to

00:01:40,409 --> 00:01:44,070
spend a lot of time to give some

00:01:42,570 --> 00:01:46,560
inspiration

00:01:44,070 --> 00:01:49,619
who needed to inspire about looking for

00:01:46,560 --> 00:01:52,320
some better way to build a crown area

00:01:49,619 --> 00:01:55,799
application based on cnc project of

00:01:52,320 --> 00:01:58,619
course culinary's and prometheus

00:01:55,799 --> 00:02:00,840
and a movie posse and listen II we have

00:01:58,619 --> 00:02:04,260
another good project a graduate

00:02:00,840 --> 00:02:06,630
accordion s as well and I'm actually I'm

00:02:04,260 --> 00:02:09,179
Java developer more than 16 years I love

00:02:06,630 --> 00:02:11,280
to java technology and also I'm really

00:02:09,179 --> 00:02:13,260
loved to writing some technical and

00:02:11,280 --> 00:02:14,270
non-technical article in ops of

00:02:13,260 --> 00:02:17,570
Stockholm in my

00:02:14,270 --> 00:02:19,610
a private blog so if you any question

00:02:17,570 --> 00:02:23,600
about me about my specialty

00:02:19,610 --> 00:02:26,000
after decision you can follow my Twitter

00:02:23,600 --> 00:02:29,900
you can go through my repo and also you

00:02:26,000 --> 00:02:31,880
can send in my email directly so this is

00:02:29,900 --> 00:02:33,230
a bottom line of today's session so if

00:02:31,880 --> 00:02:35,720
you're looking forward to something like

00:02:33,230 --> 00:02:38,060
the the fundamental stop like what the

00:02:35,720 --> 00:02:40,940
mean but does that mean observer is

00:02:38,060 --> 00:02:43,580
computing platform and function at your

00:02:40,940 --> 00:02:46,220
service like affairs so I don't have

00:02:43,580 --> 00:02:49,460
enough time today to go through every

00:02:46,220 --> 00:02:52,700
single detail but luckily I know about

00:02:49,460 --> 00:02:56,600
this fundamental stop in OpenSocial calm

00:02:52,700 --> 00:02:59,270
so just you need to at least a minute to

00:02:56,600 --> 00:03:01,310
go through this article so seven offices

00:02:59,270 --> 00:03:04,880
a platform to get started with the

00:03:01,310 --> 00:03:08,300
subarrays computing so so rather than

00:03:04,880 --> 00:03:09,950
talk about that fundamental stop I'm

00:03:08,300 --> 00:03:15,350
going to talk about a little bit more a

00:03:09,950 --> 00:03:20,060
developer experience stuff so you know

00:03:15,350 --> 00:03:22,310
meantime I asked many many time to end

00:03:20,060 --> 00:03:24,140
up write a developer though how does it

00:03:22,310 --> 00:03:26,870
operate the mapper imagine the server is

00:03:24,140 --> 00:03:28,940
computing but the answer more than

00:03:26,870 --> 00:03:32,360
eighty percent more than ninety percent

00:03:28,940 --> 00:03:35,690
was the Amazon lambda so Amazon lambda

00:03:32,360 --> 00:03:39,170
is a really cool and but there is some

00:03:35,690 --> 00:03:41,360
big challenge if you roll your solicitor

00:03:39,170 --> 00:03:43,730
application or a container application

00:03:41,360 --> 00:03:45,680
just Microsoft's application on top of

00:03:43,730 --> 00:03:49,370
that I'm going to go through a little

00:03:45,680 --> 00:03:52,850
bit layer and this is a developer are

00:03:49,370 --> 00:03:55,700
thinking about what suburi see somebody

00:03:52,850 --> 00:03:58,670
sees this is a principle as a developer

00:03:55,700 --> 00:04:01,040
point of view so the map wrote origin

00:03:58,670 --> 00:04:03,230
developer doesn't worry about the

00:04:01,040 --> 00:04:05,870
infrastructure to run so what is the

00:04:03,230 --> 00:04:08,000
application for example so I don't want

00:04:05,870 --> 00:04:11,030
to take care about how many virtual

00:04:08,000 --> 00:04:14,209
machine should be provision purple I

00:04:11,030 --> 00:04:16,070
deployed my sub reciprocation and also

00:04:14,209 --> 00:04:18,560
they're looking forward to

00:04:16,070 --> 00:04:21,650
although scaling capability along the

00:04:18,560 --> 00:04:24,530
repeat changing so what goes a lasting

00:04:21,650 --> 00:04:26,060
is the money so if you use the Amazon

00:04:24,530 --> 00:04:29,270
Rhonda you need

00:04:26,060 --> 00:04:33,200
to pay for the big money

00:04:29,270 --> 00:04:35,570
the for the amount of your time you're

00:04:33,200 --> 00:04:40,760
consuming you are consuming your Amazon

00:04:35,570 --> 00:04:44,060
London so I love this picture because

00:04:40,760 --> 00:04:47,320
these still many people developer IT

00:04:44,060 --> 00:04:50,690
operation team and some evil CIO stop

00:04:47,320 --> 00:04:54,560
Tabas understand what Sala C is like

00:04:50,690 --> 00:04:58,190
just picture there's an observer in the

00:04:54,560 --> 00:05:00,380
data center but that is not true

00:04:58,190 --> 00:05:03,110
there are many server maybe hundred

00:05:00,380 --> 00:05:05,570
thousand server because the public cloud

00:05:03,110 --> 00:05:10,400
provider will take care of the instead

00:05:05,570 --> 00:05:13,880
you and developers so this is our most

00:05:10,400 --> 00:05:15,889
important three things to address your

00:05:13,880 --> 00:05:19,130
summaries architecture servers

00:05:15,889 --> 00:05:22,430
application on your local machine or on

00:05:19,130 --> 00:05:25,580
your on-prem infrastructure and even

00:05:22,430 --> 00:05:29,300
public cloud even services and functions

00:05:25,580 --> 00:05:32,060
so I'm going to go through how relate

00:05:29,300 --> 00:05:34,550
those three things and part of the

00:05:32,060 --> 00:05:36,830
developer journey so many many years ago

00:05:34,550 --> 00:05:40,160
developer have a big one motorist

00:05:36,830 --> 00:05:42,200
application so maybe this is something

00:05:40,160 --> 00:05:44,150
Frankenstein big monitors the

00:05:42,200 --> 00:05:46,340
application but this is a perfect that

00:05:44,150 --> 00:05:47,990
is true because it it contain this

00:05:46,340 --> 00:05:50,780
monitor application contains

00:05:47,990 --> 00:05:52,880
hundred-percent functionality to address

00:05:50,780 --> 00:05:54,729
to your busiest employment but there is

00:05:52,880 --> 00:05:58,669
a big challenging you probably know that

00:05:54,729 --> 00:06:02,150
it's very hard to maintain your mark

00:05:58,669 --> 00:06:05,450
your monitor application needed to spend

00:06:02,150 --> 00:06:10,729
a lot of time to maintain that so that's

00:06:05,450 --> 00:06:12,770
why developer be on separating was

00:06:10,729 --> 00:06:15,229
supporting their big monitor application

00:06:12,770 --> 00:06:18,620
as you're into small pieces of of

00:06:15,229 --> 00:06:21,580
modules but the truth is the module

00:06:18,620 --> 00:06:24,860
should be path with a one single

00:06:21,580 --> 00:06:28,010
artifact like a warp I or Java in Java

00:06:24,860 --> 00:06:31,100
technology for example and also you can

00:06:28,010 --> 00:06:34,970
have some big mirror air like a Oracle

00:06:31,100 --> 00:06:35,860
IBM and another big local load mirror

00:06:34,970 --> 00:06:39,169
Esther

00:06:35,860 --> 00:06:40,029
that's why micro service was born so

00:06:39,169 --> 00:06:43,509
since the total

00:06:40,029 --> 00:06:47,829
14 the spring booth was born and many

00:06:43,509 --> 00:06:50,259
developer really love to use spring

00:06:47,829 --> 00:06:52,329
booth application the Microsoft's

00:06:50,259 --> 00:06:54,549
application fundamentally have their own

00:06:52,329 --> 00:06:57,099
independent runtime environment based on

00:06:54,549 --> 00:06:59,049
Java technology and also another the

00:06:57,099 --> 00:07:02,439
runtime environment and the indeed

00:06:59,049 --> 00:07:05,529
reality your other project production so

00:07:02,439 --> 00:07:08,469
your Microsoft's have very complicated

00:07:05,529 --> 00:07:12,819
this is architecture like of network

00:07:08,469 --> 00:07:16,079
services and more importantly so your

00:07:12,819 --> 00:07:19,149
micro services or a modern application

00:07:16,079 --> 00:07:22,229
might have a multiple entry point like a

00:07:19,149 --> 00:07:25,569
respirator a to communicate another

00:07:22,229 --> 00:07:28,269
macro service application and also some

00:07:25,569 --> 00:07:31,329
invocation Casa form and user based on

00:07:28,269 --> 00:07:33,729
web browser like a GUI stop and also

00:07:31,329 --> 00:07:36,489
there are multiple data sources rather

00:07:33,729 --> 00:07:39,719
than just a big single United database

00:07:36,489 --> 00:07:42,819
so you can follow to designing

00:07:39,719 --> 00:07:45,159
perspective as a CQRS let the crowd and

00:07:42,819 --> 00:07:49,360
events or C or a second pattern

00:07:45,159 --> 00:07:52,599
something like that so now you have a

00:07:49,360 --> 00:07:54,399
functions in this architecture in the

00:07:52,599 --> 00:07:57,159
network services architecture with

00:07:54,399 --> 00:07:59,829
Microsoft's application so what is that

00:07:57,159 --> 00:08:02,439
function means for your soberest

00:07:59,829 --> 00:08:06,099
application so go back to the date to

00:08:02,439 --> 00:08:09,209
read two things so now you have many

00:08:06,099 --> 00:08:13,089
events for example hey i need to

00:08:09,209 --> 00:08:18,369
rendering my 3d images to provide an

00:08:13,089 --> 00:08:23,349
user based on GUI or I need to save or

00:08:18,369 --> 00:08:25,569
store my log file to tracing when I have

00:08:23,349 --> 00:08:29,679
some error something like that that kind

00:08:25,569 --> 00:08:31,659
always event the event function function

00:08:29,679 --> 00:08:34,959
means your application the application

00:08:31,659 --> 00:08:37,899
very small piece of your function my

00:08:34,959 --> 00:08:45,100
call T packet another Microsoft

00:08:37,899 --> 00:08:48,639
application so as a developer point of

00:08:45,100 --> 00:08:51,670
view so what is the easiest way to run

00:08:48,639 --> 00:08:52,660
to the two readings and address the

00:08:51,670 --> 00:08:56,350
events

00:08:52,660 --> 00:08:58,810
functions and practice services so I

00:08:56,350 --> 00:09:02,170
already mentioned earlier that is that

00:08:58,810 --> 00:09:04,720
the public cloud provider like Amazon

00:09:02,170 --> 00:09:07,420
lambda but they are the two big charity

00:09:04,720 --> 00:09:09,879
EP use the manage is a service to run

00:09:07,420 --> 00:09:13,240
your service application the first of

00:09:09,879 --> 00:09:16,420
all is the canal address multi cloud

00:09:13,240 --> 00:09:19,149
strategy so if you adopt a one single a

00:09:16,420 --> 00:09:22,750
public cloud vendor to address your

00:09:19,149 --> 00:09:25,389
subway so close you cannot build some

00:09:22,750 --> 00:09:27,759
multi cloud strategy you wanted to run

00:09:25,389 --> 00:09:30,610
your many thousands of function on top

00:09:27,759 --> 00:09:33,100
of the private cloud public cloud even

00:09:30,610 --> 00:09:35,470
hybrid cloud including on tram it's not

00:09:33,100 --> 00:09:37,689
possible if he usages and as a lambda

00:09:35,470 --> 00:09:40,899
what Google Microsoft functions and

00:09:37,689 --> 00:09:42,819
second of all as more than more the

00:09:40,899 --> 00:09:46,209
developer point of view so it's a

00:09:42,819 --> 00:09:48,029
constraint of a dependency so some of

00:09:46,209 --> 00:09:51,160
the developer team was to build

00:09:48,029 --> 00:09:54,279
developed microsoft application was

00:09:51,160 --> 00:09:57,310
soberest application using java

00:09:54,279 --> 00:10:02,259
technology or JavaScript or Python or

00:09:57,310 --> 00:10:04,899
any other things but maybe the MPP EP

00:10:02,259 --> 00:10:07,600
use the end as a lambda they provided

00:10:04,899 --> 00:10:10,660
some just comparable T long time

00:10:07,600 --> 00:10:14,500
including Java but not everything so

00:10:10,660 --> 00:10:17,019
that's the point of the etiology so what

00:10:14,500 --> 00:10:20,889
is the solution to figure out this

00:10:17,019 --> 00:10:24,459
problem simple managing by yourself in

00:10:20,889 --> 00:10:26,740
your team and in the meantime luckily we

00:10:24,459 --> 00:10:29,439
have a such a great technology you

00:10:26,740 --> 00:10:32,740
probably know that e the Linux container

00:10:29,439 --> 00:10:36,819
so for example the OCI forming container

00:10:32,740 --> 00:10:41,110
images container now enable the

00:10:36,819 --> 00:10:43,930
developer to 100% perfectly with the

00:10:41,110 --> 00:10:46,720
artifact or such as that you could pair

00:10:43,930 --> 00:10:48,670
your application code and runtime and

00:10:46,720 --> 00:10:51,519
dependent rivalry and also the

00:10:48,670 --> 00:10:53,980
development or worry about some service

00:10:51,519 --> 00:10:56,800
to discover registering networking and

00:10:53,980 --> 00:10:58,930
something else because the coronaries

00:10:56,800 --> 00:11:02,529
will take care of that instead of

00:10:58,930 --> 00:11:07,509
developer and easier service mess so you

00:11:02,529 --> 00:11:12,019
know that Forex ssstop and spring cloud

00:11:07,509 --> 00:11:14,319
the wanting Beach one thing the one big

00:11:12,019 --> 00:11:17,329
challenge Apple developer so developer

00:11:14,319 --> 00:11:19,729
should take care of all configuration

00:11:17,329 --> 00:11:23,179
and micros like Microsoft's capability

00:11:19,729 --> 00:11:27,259
such as logging Tracy and intelligent

00:11:23,179 --> 00:11:29,959
Rory and for tourists such as the sake

00:11:27,259 --> 00:11:34,009
braking which immediately developer

00:11:29,959 --> 00:11:37,219
inject some configuration or some Yama

00:11:34,009 --> 00:11:40,099
file or some properly file into their

00:11:37,219 --> 00:11:43,789
application code into their method in

00:11:40,099 --> 00:11:48,529
Java classes but server smash based on

00:11:43,789 --> 00:11:51,769
sto will address instead for with the

00:11:48,529 --> 00:11:54,349
developers and all api's this is a

00:11:51,769 --> 00:11:58,069
beauty of the the current architecture

00:11:54,349 --> 00:12:03,019
of the public cloud even internal data

00:11:58,069 --> 00:12:05,689
centers services so now if you for

00:12:03,019 --> 00:12:08,299
example developer wants to hey I needed

00:12:05,689 --> 00:12:09,859
to some back-end data services a year

00:12:08,299 --> 00:12:12,439
you don't need to implement when you

00:12:09,859 --> 00:12:15,470
don't connect you a packet there are

00:12:12,439 --> 00:12:18,319
same tera base itself you just call API

00:12:15,470 --> 00:12:21,739
ape data as a service or an easy story

00:12:18,319 --> 00:12:25,399
you can call the based on f3 data in the

00:12:21,739 --> 00:12:28,099
service so all this is technology make

00:12:25,399 --> 00:12:32,089
it easier and quicker to develop build

00:12:28,099 --> 00:12:34,879
at managing your supplication and more

00:12:32,089 --> 00:12:36,529
importantly are the luminaries with the

00:12:34,879 --> 00:12:39,669
Stormers this is a beauty of the

00:12:36,529 --> 00:12:42,799
kubernetes so there are more than 13

00:12:39,669 --> 00:12:46,579
somebody's NFS opposes a project based

00:12:42,799 --> 00:12:48,709
on kubernetes so if you might if you

00:12:46,579 --> 00:12:50,929
might have some intuition about this

00:12:48,709 --> 00:12:52,220
project you can go through the landscape

00:12:50,929 --> 00:12:55,879
to see some data

00:12:52,220 --> 00:13:03,109
oh there are summaries the CSS officer

00:12:55,879 --> 00:13:06,379
working group so but truth is the purple

00:13:03,109 --> 00:13:09,559
isn't that easy for them the Canaries is

00:13:06,379 --> 00:13:12,409
not easy for developer there is truth to

00:13:09,559 --> 00:13:13,249
you because that container and

00:13:12,409 --> 00:13:16,970
kubernetes

00:13:13,249 --> 00:13:20,089
and which means the developer needed to

00:13:16,970 --> 00:13:25,310
lot of things about feature and some

00:13:20,089 --> 00:13:27,620
command line or some architecture how

00:13:25,310 --> 00:13:29,990
the clone aerosol works and how to use

00:13:27,620 --> 00:13:35,660
that for running your subversive

00:13:29,990 --> 00:13:40,750
application so that's why the cane Abel

00:13:35,660 --> 00:13:45,589
what's wrong so just the funny thing is

00:13:40,750 --> 00:13:48,050
maybe six months ago so I met with it I

00:13:45,589 --> 00:13:51,680
met with a customer to talk about the

00:13:48,050 --> 00:13:54,800
summaries strategy a breadhead so we

00:13:51,680 --> 00:13:57,199
just told about the Apache upper whisk

00:13:54,800 --> 00:14:00,139
this is our cloud function based on a

00:13:57,199 --> 00:14:03,110
food ship container platform but now we

00:14:00,139 --> 00:14:06,560
just got to talk about the Canaries so

00:14:03,110 --> 00:14:11,089
can a is of course based on kubernetes

00:14:06,560 --> 00:14:14,600
and for them and now developer can build

00:14:11,089 --> 00:14:17,689
deploy and a mangie you were somebody's

00:14:14,600 --> 00:14:23,480
application on top of the del so this is

00:14:17,689 --> 00:14:27,470
a primitive so there are three primary a

00:14:23,480 --> 00:14:29,300
component of K native bills or big event

00:14:27,470 --> 00:14:32,420
e I'm going to show you quick demo just

00:14:29,300 --> 00:14:35,420
right away how to stand out your

00:14:32,420 --> 00:14:38,209
software application for developer point

00:14:35,420 --> 00:14:40,189
of view and most important is the Easter

00:14:38,209 --> 00:14:42,439
service image is as a Depot

00:14:40,189 --> 00:14:46,850
running on top of you on top of the

00:14:42,439 --> 00:14:52,399
canary so I'm going to show you some

00:14:46,850 --> 00:14:54,470
quick demo so Apple to decision you can

00:14:52,399 --> 00:14:58,009
go through yourself it's a relative

00:14:54,470 --> 00:15:02,180
upper the cane able to tour ear so there

00:14:58,009 --> 00:15:06,410
are many documentation how to set up

00:15:02,180 --> 00:15:09,019
your local connect the luminaries

00:15:06,410 --> 00:15:11,959
platform so mini shipped is based on

00:15:09,019 --> 00:15:15,319
mini cube and how to install your sto

00:15:11,959 --> 00:15:19,339
stop and how to install Kane observing

00:15:15,319 --> 00:15:21,559
is all it's an actually not is

00:15:19,339 --> 00:15:23,600
technically not installation is sort of

00:15:21,559 --> 00:15:27,529
the deployment at the running of the

00:15:23,600 --> 00:15:29,800
path so this is my local machine

00:15:27,529 --> 00:15:31,140
and I already stand out my

00:15:29,800 --> 00:15:37,960
[Music]

00:15:31,140 --> 00:15:39,850
container environment so let me go pick

00:15:37,960 --> 00:15:46,570
through my local environment based on

00:15:39,850 --> 00:15:50,110
mini shift so I already stand up my

00:15:46,570 --> 00:15:56,920
local in Bombay stone to sto submerge

00:15:50,110 --> 00:16:03,970
and KD pill can have a survey so Cuba

00:15:56,920 --> 00:16:08,350
steel get pas he still so you can find

00:16:03,970 --> 00:16:10,690
there some the default apart about SEO

00:16:08,350 --> 00:16:16,570
service America ingress/egress and

00:16:10,690 --> 00:16:23,050
sciatica is Sarah and also there are K

00:16:16,570 --> 00:16:25,690
knee primary couple of Bill and sir be

00:16:23,050 --> 00:16:28,450
yeah it's all fine because the already

00:16:25,690 --> 00:16:31,780
stand out and finger crossed the network

00:16:28,450 --> 00:16:34,000
is not good but all right so here's your

00:16:31,780 --> 00:16:38,290
my demo scenario I'm a developer so what

00:16:34,000 --> 00:16:39,340
is the first entry point to to go jump

00:16:38,290 --> 00:16:41,680
into the sourest

00:16:39,340 --> 00:16:44,890
journey the first thing is that you have

00:16:41,680 --> 00:16:47,350
to develop so you're all application

00:16:44,890 --> 00:16:49,690
maybe you can use this spring boot so

00:16:47,350 --> 00:16:53,260
here is my supreme Buddha application I

00:16:49,690 --> 00:16:56,560
already my simple supreme Buddha

00:16:53,260 --> 00:16:59,740
application so my artifact is creator

00:16:56,560 --> 00:17:03,420
and presence to 0 0 1 and some

00:16:59,740 --> 00:17:06,280
dependency is a very simple spring boot

00:17:03,420 --> 00:17:11,160
starter spring boot web spring start

00:17:06,280 --> 00:17:13,089
test no more and this is my simple

00:17:11,160 --> 00:17:15,220
application Twitter

00:17:13,089 --> 00:17:23,080
hello can a be alright here I change

00:17:15,220 --> 00:17:26,200
some code Deb calm chair so so imagine

00:17:23,080 --> 00:17:28,209
that I already done I implementation of

00:17:26,200 --> 00:17:30,670
my small piece of Microsoft's

00:17:28,209 --> 00:17:36,670
application so what is your next thing

00:17:30,670 --> 00:17:38,590
is I'm going to peel my supreme Buddha

00:17:36,670 --> 00:17:41,140
application I'm going to tap I'm gonna

00:17:38,590 --> 00:17:42,380
skip test to save on my time for just

00:17:41,140 --> 00:17:47,630
demo

00:17:42,380 --> 00:17:51,080
and green packaging it'll be just a

00:17:47,630 --> 00:17:57,230
couple of a second - bill bill success

00:17:51,080 --> 00:18:05,650
and just make sure I have if I have the

00:17:57,230 --> 00:18:05,650
artifact like a gel foil target agreed

00:18:06,190 --> 00:18:14,180
yeah just making there and what is the

00:18:11,870 --> 00:18:19,130
next thing is the I need to some unit

00:18:14,180 --> 00:18:35,060
asked for making sure my application is

00:18:19,130 --> 00:18:36,920
working so spring food the one of a

00:18:35,060 --> 00:18:41,150
beauty of spring will just really you

00:18:36,920 --> 00:18:45,970
need to two seconds to run so right

00:18:41,150 --> 00:18:49,009
there and you can check with by call

00:18:45,970 --> 00:18:49,009
[Music]

00:18:56,240 --> 00:19:07,530
localhost:8080 so he'll okay maybe on

00:19:02,700 --> 00:19:09,300
their Kampf cool oh you can use the web

00:19:07,530 --> 00:19:15,210
browser across a DAT

00:19:09,300 --> 00:19:18,060
yes same all right cool so now you

00:19:15,210 --> 00:19:20,670
already done to create a develop your

00:19:18,060 --> 00:19:24,000
Microsoft application and you make sure

00:19:20,670 --> 00:19:25,620
how it works based on unit test what is

00:19:24,000 --> 00:19:28,740
the next thing is you have to continue

00:19:25,620 --> 00:19:32,220
at your application papa deploying TK

00:19:28,740 --> 00:19:38,190
native so I'm going to shut my local

00:19:32,220 --> 00:19:41,540
environment and once again I'm gonna

00:19:38,190 --> 00:19:44,700
skip my tasks to save my demo time and

00:19:41,540 --> 00:19:47,670
green package II I'm going to use a

00:19:44,700 --> 00:19:50,970
cheap you ready for Taco Bell today and

00:19:47,670 --> 00:19:54,240
also the primary of cannibal cannibal

00:19:50,970 --> 00:19:57,150
bill is the one of the feature to peel

00:19:54,240 --> 00:20:00,320
your contain energy based on multiple

00:19:57,150 --> 00:20:03,360
stab and you could report the remote

00:20:00,320 --> 00:20:07,470
repository but today I'm going to show

00:20:03,360 --> 00:20:14,780
you using the chip literally to make it

00:20:07,470 --> 00:20:18,390
shorter and now I have a darker images

00:20:14,780 --> 00:20:20,190
Twitter I have so so what is the next

00:20:18,390 --> 00:20:21,960
thing is say I need to deploy my

00:20:20,190 --> 00:20:26,460
Somerset application based on my

00:20:21,960 --> 00:20:32,430
Microsoft application so I already have

00:20:26,460 --> 00:20:35,400
a defined so Kay Neeley as a default you

00:20:32,430 --> 00:20:37,950
are you is using the coupon an associate

00:20:35,400 --> 00:20:40,190
the object the custom the resource

00:20:37,950 --> 00:20:43,320
definition so you can find that

00:20:40,190 --> 00:20:47,490
disturbing canary tab is just one of the

00:20:43,320 --> 00:20:49,680
CID okayed the cook culinary's and also

00:20:47,490 --> 00:20:53,360
I want to use it is the container image

00:20:49,680 --> 00:20:53,360
that I just created

00:20:58,920 --> 00:21:07,390
so just simple you already know there to

00:21:02,470 --> 00:21:13,990
cube apply my service mo but you know to

00:21:07,390 --> 00:21:16,510
make sure q CTL past and what so there's

00:21:13,990 --> 00:21:24,460
no part in my product in my name space

00:21:16,510 --> 00:21:27,220
so I deploy my sole occasion and just

00:21:24,460 --> 00:21:30,130
like that at the same time exactly same

00:21:27,220 --> 00:21:34,390
time I deploy my so barista application

00:21:30,130 --> 00:21:38,880
and you can see there are 2 / 2 which

00:21:34,390 --> 00:21:42,880
means the sum of DISA the side container

00:21:38,880 --> 00:21:47,680
will be inject automatically by SEO

00:21:42,880 --> 00:21:56,680
service mesh and I can call to make sure

00:21:47,680 --> 00:22:04,150
my social application works come on come

00:21:56,680 --> 00:22:11,410
on DVT finish uppity have a song a

00:22:04,150 --> 00:22:15,810
console during the time so this is my

00:22:11,410 --> 00:22:15,810
DEFCON project and already provider

00:22:22,260 --> 00:22:29,470
all right so really be natural problem

00:22:26,820 --> 00:22:41,470
and one of the t I wanted to show you

00:22:29,470 --> 00:22:44,110
rusting is yeah this is one of the auto

00:22:41,470 --> 00:22:47,140
scaling of a cop because complication of

00:22:44,110 --> 00:22:53,740
auto scaling of K native so you can see

00:22:47,140 --> 00:22:56,370
here so grace the period n threshold

00:22:53,740 --> 00:22:59,550
which means they in this demo I just

00:22:56,370 --> 00:23:02,740
configure to one minute which means

00:22:59,550 --> 00:23:05,530
during the one minute there's an or cast

00:23:02,740 --> 00:23:07,840
from end-user this is this your Michael

00:23:05,530 --> 00:23:10,660
your Microsoft application will be

00:23:07,840 --> 00:23:12,970
shutting down automatically scale down

00:23:10,660 --> 00:23:15,550
to zero there is a beauty of the summer

00:23:12,970 --> 00:23:18,480
little occasion so you can see that they

00:23:15,550 --> 00:23:21,720
are already dominating so go back to the

00:23:18,480 --> 00:23:25,480
moonship console the web you are already

00:23:21,720 --> 00:23:30,370
dominating and after if you call once

00:23:25,480 --> 00:23:39,880
again your application stand out

00:23:30,370 --> 00:23:43,870
automatically so that's a problem okay

00:23:39,880 --> 00:23:47,520
so go back to the I have enough time to

00:23:43,870 --> 00:23:50,950
today so I'll go back to the slide

00:23:47,520 --> 00:23:52,990
alright to serving the world to be

00:23:50,950 --> 00:23:56,080
component over the key name is serving

00:23:52,990 --> 00:23:59,710
is to provide the functionality to scale

00:23:56,080 --> 00:24:03,180
down to 0 after there are any requests

00:23:59,710 --> 00:24:07,600
from your end user that is the honorable

00:24:03,180 --> 00:24:10,840
mandatory functionality of the summary

00:24:07,600 --> 00:24:12,640
so platform a second of all bill so

00:24:10,840 --> 00:24:14,980
today in the demo I just need to keep

00:24:12,640 --> 00:24:17,890
Jeep you're really but you can use the

00:24:14,980 --> 00:24:20,350
bill primitive on top of the canary

00:24:17,890 --> 00:24:24,820
which appear your container images you

00:24:20,350 --> 00:24:27,310
can define multiple step and you can you

00:24:24,820 --> 00:24:31,389
you can push your container registry you

00:24:27,310 --> 00:24:34,209
can retrieve some git repository to

00:24:31,389 --> 00:24:37,089
access some your application code itself

00:24:34,209 --> 00:24:40,419
a last thing is eventing so amazing that

00:24:37,089 --> 00:24:41,950
you are there a bunch of the the so

00:24:40,419 --> 00:24:44,289
Marissa application was summaries

00:24:41,950 --> 00:24:46,690
container but it's happening in

00:24:44,289 --> 00:24:48,759
different time which means the some

00:24:46,690 --> 00:24:52,539
producer create your summaries

00:24:48,759 --> 00:24:54,909
application but the other is using the

00:24:52,539 --> 00:24:57,429
consumer using their in a different time

00:24:54,909 --> 00:25:02,109
so inventing will take care of them with

00:24:57,429 --> 00:25:05,909
the lazy binding so the last thing is so

00:25:02,109 --> 00:25:09,190
now developer it used a key neighborhood

00:25:05,909 --> 00:25:11,799
instead of the kubernetes itself or you

00:25:09,190 --> 00:25:14,200
can use the EP you have a pest problem

00:25:11,799 --> 00:25:17,109
like an Apache upper whisk and another

00:25:14,200 --> 00:25:20,440
project if he wants to more some fancy

00:25:17,109 --> 00:25:21,959
Sierra such as debugging and when you I

00:25:20,440 --> 00:25:25,839
is service era

00:25:21,959 --> 00:25:28,179
so here is my resources so you can go

00:25:25,839 --> 00:25:31,089
through the opposite account there are

00:25:28,179 --> 00:25:33,579
many summaries and Apache open with

00:25:31,089 --> 00:25:35,919
scholarly article and there are red hair

00:25:33,579 --> 00:25:39,459
blog and also can able to toriel you can

00:25:35,919 --> 00:25:41,960
follow that yourself and we are all over

00:25:39,459 --> 00:25:44,930
tired thank you for that

00:25:41,960 --> 00:25:45,540
[Applause]

00:25:44,930 --> 00:25:48,650
you

00:25:45,540 --> 00:25:48,650

YouTube URL: https://www.youtube.com/watch?v=v-Z3_OvXEuI


