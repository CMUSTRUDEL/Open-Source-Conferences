Title: Automating Openshift Compliance Scanning
Publication date: 2020-10-06
Playlist: DevConfUS 2020
Description: 
	Speakers: Jakub Hrozek & Juan Antonio Osorio Robles

Checking for security compliance is overall hard. Doing so for a cluster of hundreds of machines is even worse.

Compliance is hard and tedious work, especially on a cluster scale. There are many checkboxes to tick; the controls in the standards are not easy to interpret; and more so, compliance needs to be reached, but also maintained and continuously monitored.
We aimed to address this issue by building the compliance-operator.

This project aims to aid OpenShift deployers to verify, monitor, and ultimately achieve their compliance targets in an automated fashion by checking both the OpenShift configuration and the Linux nodes that form that cluster.
Captions: 
	00:00:00,000 --> 00:00:04,000
uh hello everybody thank you for joining

00:00:04,160 --> 00:00:08,320
my name is juan antonio and we're going

00:00:06,319 --> 00:00:09,679
to start hopefully you're here because

00:00:08,320 --> 00:00:12,960
you're interested in

00:00:09,679 --> 00:00:15,200
compliance in openshift automation

00:00:12,960 --> 00:00:17,279
if not you're still welcome to stay but

00:00:15,200 --> 00:00:20,960
i understand if you got here by mistake

00:00:17,279 --> 00:00:24,640
that's also not an issue it happens

00:00:20,960 --> 00:00:28,160
so we got a pretty big agenda

00:00:24,640 --> 00:00:30,320
uh for the limited time that we have

00:00:28,160 --> 00:00:31,760
but we're gonna go through it and uh

00:00:30,320 --> 00:00:33,280
it'll be fine hopefully we're gonna

00:00:31,760 --> 00:00:36,239
answer these questions if not

00:00:33,280 --> 00:00:37,440
there is still a q a uh time slot

00:00:36,239 --> 00:00:40,079
enabled

00:00:37,440 --> 00:00:41,440
so it'll be fine so first a quick

00:00:40,079 --> 00:00:42,960
introduction about who are we

00:00:41,440 --> 00:00:44,640
who are these weird people that are

00:00:42,960 --> 00:00:47,120
talking to you

00:00:44,640 --> 00:00:49,600
my name is juan antonio sore robles but

00:00:47,120 --> 00:00:51,199
that's pretty long so you can call me oz

00:00:49,600 --> 00:00:53,520
i'm a mexican living in finland and

00:00:51,199 --> 00:00:56,320
nowadays i do openshift

00:00:53,520 --> 00:00:58,879
mostly security and compliance though so

00:00:56,320 --> 00:01:02,960
that's who i am

00:00:58,879 --> 00:01:05,680
i'm jacob i'm working on open

00:01:02,960 --> 00:01:06,159
security compliance with us and before i

00:01:05,680 --> 00:01:07,520
was work

00:01:06,159 --> 00:01:09,680
before i started working on this project

00:01:07,520 --> 00:01:13,840
i used to work for a long time on

00:01:09,680 --> 00:01:13,840
ssd and free ipa

00:01:14,320 --> 00:01:18,159
all right uh so now we're just gonna go

00:01:17,040 --> 00:01:21,439
very quickly about

00:01:18,159 --> 00:01:26,880
why we're even doing what we're doing

00:01:21,439 --> 00:01:27,439
so jacket right so the work we are doing

00:01:26,880 --> 00:01:30,400
is

00:01:27,439 --> 00:01:31,520
making sure that openshift is able to

00:01:30,400 --> 00:01:34,640
pass

00:01:31,520 --> 00:01:37,439
uh compliance test compliance

00:01:34,640 --> 00:01:38,880
is compliant and we're doing this

00:01:37,439 --> 00:01:41,200
because

00:01:38,880 --> 00:01:42,159
unless piece of software is compliant it

00:01:41,200 --> 00:01:45,439
can't be used

00:01:42,159 --> 00:01:49,920
in some industries or environments

00:01:45,439 --> 00:01:53,040
i think banks militaries governments

00:01:49,920 --> 00:01:55,119
like that our biggest

00:01:53,040 --> 00:01:56,159
user or customer whatever you want to

00:01:55,119 --> 00:01:58,960
take it is the

00:01:56,159 --> 00:02:00,640
north american public sector this has

00:01:58,960 --> 00:02:01,920
implication on what standards we are

00:02:00,640 --> 00:02:04,320
trying to be compliant with

00:02:01,920 --> 00:02:04,320
first

00:02:05,040 --> 00:02:10,000
and while we are doing this software

00:02:07,439 --> 00:02:12,400
work and automating the stuff

00:02:10,000 --> 00:02:13,280
in theory you can just download the

00:02:12,400 --> 00:02:15,120
standard

00:02:13,280 --> 00:02:16,640
and go to the cluster and make it

00:02:15,120 --> 00:02:19,440
compliant yourself

00:02:16,640 --> 00:02:21,120
but that's already quite hard work if

00:02:19,440 --> 00:02:24,319
you're doing it with like with

00:02:21,120 --> 00:02:25,920
one machine one vm one server

00:02:24,319 --> 00:02:27,440
if you bring this up on the cluster

00:02:25,920 --> 00:02:31,360
scale it becomes

00:02:27,440 --> 00:02:34,480
even harder and

00:02:31,360 --> 00:02:35,360
with openshift you're not just trying to

00:02:34,480 --> 00:02:38,000
make the

00:02:35,360 --> 00:02:39,120
kubernetes layer compliant just the just

00:02:38,000 --> 00:02:41,280
the cluster level

00:02:39,120 --> 00:02:43,120
but under that you have nodes that the

00:02:41,280 --> 00:02:45,920
cluster runs on

00:02:43,120 --> 00:02:47,920
and underneath you also have other

00:02:45,920 --> 00:02:50,160
layers that we don't

00:02:47,920 --> 00:02:51,440
necessarily care with our software with

00:02:50,160 --> 00:02:52,959
the compliance operator

00:02:51,440 --> 00:02:54,400
like you might need to make sure that

00:02:52,959 --> 00:02:55,519
actually the hardware you're running on

00:02:54,400 --> 00:02:58,400
is compliant

00:02:55,519 --> 00:02:58,800
or that the people who are operating the

00:02:58,400 --> 00:03:01,519
the

00:02:58,800 --> 00:03:02,480
cluster pass some background checks and

00:03:01,519 --> 00:03:05,440
whatnot

00:03:02,480 --> 00:03:06,720
that's outside our jurisdiction but the

00:03:05,440 --> 00:03:08,319
point is

00:03:06,720 --> 00:03:10,159
to make sure the whole system is

00:03:08,319 --> 00:03:11,120
compliant is very hard and it gets much

00:03:10,159 --> 00:03:14,319
harder

00:03:11,120 --> 00:03:15,440
uh with the cluster and what makes it

00:03:14,319 --> 00:03:18,319
even harder is

00:03:15,440 --> 00:03:20,000
that kubernetes is an upstream project

00:03:18,319 --> 00:03:23,040
and object as a product

00:03:20,000 --> 00:03:24,560
are very uh fast moving and the

00:03:23,040 --> 00:03:25,680
standards that you are complying with

00:03:24,560 --> 00:03:28,159
are quite big

00:03:25,680 --> 00:03:29,920
so if you are doing this all this all

00:03:28,159 --> 00:03:32,400
work manually

00:03:29,920 --> 00:03:33,360
once you are done the next version comes

00:03:32,400 --> 00:03:35,840
and you can

00:03:33,360 --> 00:03:36,879
as well start over so it's kind of

00:03:35,840 --> 00:03:39,440
proven that

00:03:36,879 --> 00:03:40,879
the compliance work is done in automated

00:03:39,440 --> 00:03:44,959
fashion

00:03:40,879 --> 00:03:46,959
and if possible with the

00:03:44,959 --> 00:03:48,959
with a click of a button and the last

00:03:46,959 --> 00:03:50,000
thing is that the standards themselves

00:03:48,959 --> 00:03:51,440
while they are

00:03:50,000 --> 00:03:53,760
often freely accessible you can just

00:03:51,440 --> 00:03:55,599
download them and process them yourself

00:03:53,760 --> 00:03:57,439
they are not easy to read they are

00:03:55,599 --> 00:04:00,239
written in sort of

00:03:57,439 --> 00:04:01,200
lawyer english and you need to go from

00:04:00,239 --> 00:04:04,560
that

00:04:01,200 --> 00:04:07,760
to some configuration

00:04:04,560 --> 00:04:09,680
directives and it's not easy to

00:04:07,760 --> 00:04:10,879
to process the standard and figure out

00:04:09,680 --> 00:04:13,280
how do i how do i

00:04:10,879 --> 00:04:14,640
go from the sentence in the standard to

00:04:13,280 --> 00:04:16,239
some configuration settings on my

00:04:14,640 --> 00:04:18,720
cluster and this is all done

00:04:16,239 --> 00:04:22,160
automatically by the compliance operator

00:04:18,720 --> 00:04:25,280
and the compliance code project

00:04:22,160 --> 00:04:25,280
okay next slide please

00:04:25,919 --> 00:04:30,800
so the theme we are part of is called uh

00:04:29,040 --> 00:04:32,240
infrastructure security and compliance

00:04:30,800 --> 00:04:34,560
that's me and us

00:04:32,240 --> 00:04:35,759
and another developer matt rogers who

00:04:34,560 --> 00:04:38,960
i'm not sure if he's

00:04:35,759 --> 00:04:42,000
there but he's not presenting uh

00:04:38,960 --> 00:04:44,000
what we do is we

00:04:42,000 --> 00:04:45,680
on one level we go through the standards

00:04:44,000 --> 00:04:48,960
three compliance controls

00:04:45,680 --> 00:04:49,919
and try to codify them as compliance

00:04:48,960 --> 00:04:51,759
content that can be

00:04:49,919 --> 00:04:52,960
evaluated and automated by the

00:04:51,759 --> 00:04:55,040
compliance operator

00:04:52,960 --> 00:04:56,080
the compliance operator is another big

00:04:55,040 --> 00:04:58,720
part of what we are doing

00:04:56,080 --> 00:04:59,440
so it's a it's an open shift operator

00:04:58,720 --> 00:05:01,120
that

00:04:59,440 --> 00:05:03,120
can run in your cluster can take the

00:05:01,120 --> 00:05:05,600
compliance content evaluate it

00:05:03,120 --> 00:05:07,199
and based on the content tell you if you

00:05:05,600 --> 00:05:10,400
are compliant

00:05:07,199 --> 00:05:13,759
how much you are compliant and help you

00:05:10,400 --> 00:05:16,880
with mitigating any issues that

00:05:13,759 --> 00:05:18,400
you might have as i said earlier

00:05:16,880 --> 00:05:19,919
a big part of what we do is for the

00:05:18,400 --> 00:05:21,440
north american public sector so the

00:05:19,919 --> 00:05:24,880
standard that we

00:05:21,440 --> 00:05:28,880
start with is called fedram moderate

00:05:24,880 --> 00:05:32,080
there's also a kind of acronym that it's

00:05:28,880 --> 00:05:33,759
known by nist 853 uh

00:05:32,080 --> 00:05:35,440
it's not all that we are doing but we

00:05:33,759 --> 00:05:36,320
are starting with that because all the

00:05:35,440 --> 00:05:38,479
other standards

00:05:36,320 --> 00:05:41,039
even outside north america like

00:05:38,479 --> 00:05:42,080
australian e8 and whatever else might be

00:05:41,039 --> 00:05:44,000
used around the world

00:05:42,080 --> 00:05:45,600
is sort of based on those standards so

00:05:44,000 --> 00:05:48,560
it's not like we are just

00:05:45,600 --> 00:05:50,000
doing the n a public sector work and

00:05:48,560 --> 00:05:51,199
then we're going to start over and do

00:05:50,000 --> 00:05:54,000
something completely different

00:05:51,199 --> 00:05:55,680
the other standards are based on that so

00:05:54,000 --> 00:05:58,560
if we start with the

00:05:55,680 --> 00:06:02,000
fedramp standards we will be covering

00:05:58,560 --> 00:06:02,000
sort of implicitly the other work

00:06:02,240 --> 00:06:05,199
except for the compliance operator that

00:06:03,520 --> 00:06:06,479
we will talk about in detail in this

00:06:05,199 --> 00:06:09,919
presentation we are also

00:06:06,479 --> 00:06:12,800
working on another operator for

00:06:09,919 --> 00:06:14,560
file integrity of the cluster nodes

00:06:12,800 --> 00:06:15,120
that's called file integrity operator

00:06:14,560 --> 00:06:17,520
it's

00:06:15,120 --> 00:06:19,120
not mentioned very much in this talk or

00:06:17,520 --> 00:06:21,600
not even at all

00:06:19,120 --> 00:06:22,639
but it's also a cool project and you can

00:06:21,600 --> 00:06:25,440
check it out

00:06:22,639 --> 00:06:25,440
if you're interested

00:06:26,479 --> 00:06:29,280
next slide please

00:06:31,360 --> 00:06:38,160
okay in the following slides will

00:06:35,600 --> 00:06:39,199
you're talking to me okay yeah yeah

00:06:38,160 --> 00:06:40,639
sorry about that

00:06:39,199 --> 00:06:42,319
right uh so now we're going to talk a

00:06:40,639 --> 00:06:44,800
little bit about what we actually did

00:06:42,319 --> 00:06:48,160
which is the whole reason of this talk

00:06:44,800 --> 00:06:49,919
and so as folks might know

00:06:48,160 --> 00:06:51,680
there is this cool new thing in

00:06:49,919 --> 00:06:53,599
openshift or well in kubernetes in

00:06:51,680 --> 00:06:56,960
general called operators

00:06:53,599 --> 00:06:59,039
so uh to some extent we did develop uh

00:06:56,960 --> 00:07:00,800
a lot of the stuff for the operator to

00:06:59,039 --> 00:07:02,000
be able to do scans in the cluster in a

00:07:00,800 --> 00:07:04,800
more automated and friendly

00:07:02,000 --> 00:07:06,240
fashion however we didn't uh we can't

00:07:04,800 --> 00:07:07,440
take credit for everything right so i'm

00:07:06,240 --> 00:07:09,039
just gonna mention that

00:07:07,440 --> 00:07:11,440
there are three big pieces to all of

00:07:09,039 --> 00:07:13,520
this work right

00:07:11,440 --> 00:07:14,560
the first one of course is the operator

00:07:13,520 --> 00:07:17,440
and the operator

00:07:14,560 --> 00:07:18,560
is a controller that listens for

00:07:17,440 --> 00:07:21,680
specific objects

00:07:18,560 --> 00:07:24,720
and helps you get into compliance track

00:07:21,680 --> 00:07:26,400
your compliance and then

00:07:24,720 --> 00:07:27,759
we'll give you guidance on how to reach

00:07:26,400 --> 00:07:30,319
there if there are any gaps

00:07:27,759 --> 00:07:31,759
right then we have openscap which is a

00:07:30,319 --> 00:07:32,240
tool that we use to actually do the

00:07:31,759 --> 00:07:34,080
checks

00:07:32,240 --> 00:07:35,440
and that is a nice certified tool in

00:07:34,080 --> 00:07:39,120
order to

00:07:35,440 --> 00:07:41,199
uh follow policies code them into uh

00:07:39,120 --> 00:07:42,479
a language called scap actually and

00:07:41,199 --> 00:07:45,919
evaluate it

00:07:42,479 --> 00:07:49,360
right so this is a long

00:07:45,919 --> 00:07:52,080
well it has a long history of a project

00:07:49,360 --> 00:07:52,800
and um so we can't take credit for that

00:07:52,080 --> 00:07:54,479
one but we

00:07:52,800 --> 00:07:56,560
work closely with those folks that's a

00:07:54,479 --> 00:07:57,199
great team as well and finally of course

00:07:56,560 --> 00:08:00,319
what is

00:07:57,199 --> 00:08:01,199
a compliance tool without content right

00:08:00,319 --> 00:08:03,360
you want to do

00:08:01,199 --> 00:08:04,800
checks and you want to give explanations

00:08:03,360 --> 00:08:07,440
about what you're checking

00:08:04,800 --> 00:08:09,199
so that is what the content does right

00:08:07,440 --> 00:08:09,599
there is a project called compliance as

00:08:09,199 --> 00:08:12,400
code

00:08:09,599 --> 00:08:13,440
where you are able to write content for

00:08:12,400 --> 00:08:16,800
different platforms

00:08:13,440 --> 00:08:19,520
and uh this is what we're took into use

00:08:16,800 --> 00:08:20,639
all right so getting back to the

00:08:19,520 --> 00:08:22,639
operator

00:08:20,639 --> 00:08:24,800
we expose a lot of custom resources in

00:08:22,639 --> 00:08:27,120
order to be uh help you automate your

00:08:24,800 --> 00:08:28,720
compliance story

00:08:27,120 --> 00:08:31,039
it looks very overwhelming and it kind

00:08:28,720 --> 00:08:33,760
of is but don't worry there is

00:08:31,039 --> 00:08:35,039
a subset that you could care about right

00:08:33,760 --> 00:08:36,240
and we'll go through them in a little

00:08:35,039 --> 00:08:38,399
bit so you don't need to worry about

00:08:36,240 --> 00:08:39,919
that either

00:08:38,399 --> 00:08:41,839
the first thing that you want to do

00:08:39,919 --> 00:08:43,360
though when you're

00:08:41,839 --> 00:08:44,880
trying to reach compliance or evaluate

00:08:43,360 --> 00:08:47,839
for compliance is figure out

00:08:44,880 --> 00:08:49,839
hey what am i going to comply with and

00:08:47,839 --> 00:08:51,760
how am i going to do it

00:08:49,839 --> 00:08:52,800
and so this is the first step and the

00:08:51,760 --> 00:08:54,720
first thing that you're going to have to

00:08:52,800 --> 00:08:55,600
define it's actually the only thing that

00:08:54,720 --> 00:08:58,640
you

00:08:55,600 --> 00:09:00,640
as a user need to choose speak and

00:08:58,640 --> 00:09:02,080
choose right for your cluster

00:09:00,640 --> 00:09:05,279
so the first thing of course is a

00:09:02,080 --> 00:09:08,800
profile right a profile is a definition

00:09:05,279 --> 00:09:11,279
of a benchmark so to say and it

00:09:08,800 --> 00:09:11,839
contains a list of rules right so for

00:09:11,279 --> 00:09:13,839
the

00:09:11,839 --> 00:09:15,040
for this use case for example is we're

00:09:13,839 --> 00:09:17,760
choosing the

00:09:15,040 --> 00:09:19,200
essential 8 benchmark uh and it contains

00:09:17,760 --> 00:09:21,279
the appropriate descriptions

00:09:19,200 --> 00:09:22,240
um some metadata about what it applies

00:09:21,279 --> 00:09:24,880
for

00:09:22,240 --> 00:09:27,680
and ultimately what you're going to do

00:09:24,880 --> 00:09:30,480
is check a specific set of rules

00:09:27,680 --> 00:09:31,360
right so they're defined over there

00:09:30,480 --> 00:09:34,320
after that

00:09:31,360 --> 00:09:36,720
you have a rule and the rule defines

00:09:34,320 --> 00:09:39,120
what specifically are you going to check

00:09:36,720 --> 00:09:40,000
which is the most granular thing right

00:09:39,120 --> 00:09:41,120
so

00:09:40,000 --> 00:09:42,480
it could be that you're going to check

00:09:41,120 --> 00:09:44,000
file permissions it could be that you're

00:09:42,480 --> 00:09:46,240
going to check for a kernel argument

00:09:44,000 --> 00:09:47,360
there's many things that could be done

00:09:46,240 --> 00:09:49,200
so that would be the rule

00:09:47,360 --> 00:09:51,839
and rules are included in profiles as i

00:09:49,200 --> 00:09:51,839
mentioned

00:09:52,320 --> 00:09:55,680
for example in this case we also include

00:09:54,480 --> 00:09:57,440
a description of the rule

00:09:55,680 --> 00:09:58,959
to help you audit what you're doing

00:09:57,440 --> 00:10:01,519
right so you have some

00:09:58,959 --> 00:10:02,880
more metadata such as severity even a

00:10:01,519 --> 00:10:04,560
warning

00:10:02,880 --> 00:10:07,360
and so in the final report you're gonna

00:10:04,560 --> 00:10:10,079
see all this stuff right

00:10:07,360 --> 00:10:11,279
and of course a big thing is how do i

00:10:10,079 --> 00:10:13,760
fix this

00:10:11,279 --> 00:10:14,640
right and in this case this is a machine

00:10:13,760 --> 00:10:16,640
config object

00:10:14,640 --> 00:10:17,839
which is an open shift specific object

00:10:16,640 --> 00:10:19,279
that allows you to configure the

00:10:17,839 --> 00:10:22,480
operating system

00:10:19,279 --> 00:10:24,079
so this is included as part of the rule

00:10:22,480 --> 00:10:24,720
right so as part of this rule if i find

00:10:24,079 --> 00:10:26,800
an issue

00:10:24,720 --> 00:10:29,519
this is how i fix it so all of this

00:10:26,800 --> 00:10:32,480
information is there

00:10:29,519 --> 00:10:33,200
after you have this stuff uh well one

00:10:32,480 --> 00:10:34,640
thing to note

00:10:33,200 --> 00:10:36,959
is that we try to be friendly and

00:10:34,640 --> 00:10:38,720
provide you with some predefined

00:10:36,959 --> 00:10:40,399
profiles that you can already take into

00:10:38,720 --> 00:10:43,519
use out of the box

00:10:40,399 --> 00:10:46,800
and which we're currently testing and

00:10:43,519 --> 00:10:50,480
making sure that they're solid right

00:10:46,800 --> 00:10:52,000
but in reality no size fits all and

00:10:50,480 --> 00:10:54,079
most likely that not you're going to

00:10:52,000 --> 00:10:54,800
have to tailor your profile which means

00:10:54,079 --> 00:10:57,360
change

00:10:54,800 --> 00:10:58,480
add rules remove rules and so we have an

00:10:57,360 --> 00:11:01,200
abstraction called

00:10:58,480 --> 00:11:01,600
profiles right and which allows you to

00:11:01,200 --> 00:11:04,880
do

00:11:01,600 --> 00:11:06,240
just that right in this case uh

00:11:04,880 --> 00:11:08,160
maybe you want to throw a joke at

00:11:06,240 --> 00:11:09,519
somebody and put silencers permissive

00:11:08,160 --> 00:11:11,680
please don't do that but

00:11:09,519 --> 00:11:15,200
it's part of the example and this is

00:11:11,680 --> 00:11:17,440
exactly what we're doing in this role

00:11:15,200 --> 00:11:18,480
finally as i mentioned before we also

00:11:17,440 --> 00:11:22,480
want to

00:11:18,480 --> 00:11:25,040
configure the specific operational

00:11:22,480 --> 00:11:26,480
settings of your scanning right how much

00:11:25,040 --> 00:11:30,160
storage are you going to put there

00:11:26,480 --> 00:11:30,560
how often are you gonna scan your hosts

00:11:30,160 --> 00:11:32,079
right

00:11:30,560 --> 00:11:34,800
in this case it's every day at one

00:11:32,079 --> 00:11:36,640
morning uh what roles

00:11:34,800 --> 00:11:38,560
for the nodes in your cluster are you

00:11:36,640 --> 00:11:40,480
gonna scan right and all of this gets

00:11:38,560 --> 00:11:42,320
defined in the scan settings

00:11:40,480 --> 00:11:43,839
we provide a default but most likely

00:11:42,320 --> 00:11:44,399
than not that will not be enough for

00:11:43,839 --> 00:11:46,079
your case

00:11:44,399 --> 00:11:47,600
you will most likely have different

00:11:46,079 --> 00:11:49,519
roles or

00:11:47,600 --> 00:11:51,040
want the different rotations rotation

00:11:49,519 --> 00:11:53,760
strategies so

00:11:51,040 --> 00:11:55,120
you'll define it there and with that in

00:11:53,760 --> 00:11:56,720
mind

00:11:55,120 --> 00:11:59,200
finally what you want to do is specify

00:11:56,720 --> 00:12:00,639
your intent as with a lot of kubernetes

00:11:59,200 --> 00:12:03,760
objects right so

00:12:00,639 --> 00:12:05,839
you want to say for example in this case

00:12:03,760 --> 00:12:07,200
i want to comply with the essential aid

00:12:05,839 --> 00:12:09,440
profile

00:12:07,200 --> 00:12:10,480
and that's it you bind the settings to

00:12:09,440 --> 00:12:13,760
the profile

00:12:10,480 --> 00:12:16,720
so in a way of saying please scan

00:12:13,760 --> 00:12:20,160
my host with these specific profiles and

00:12:16,720 --> 00:12:20,160
the operator will just do it

00:12:21,200 --> 00:12:24,480
the next thing you want to do is keep

00:12:22,560 --> 00:12:26,320
track right you want to see how the

00:12:24,480 --> 00:12:29,120
scans are doing

00:12:26,320 --> 00:12:30,880
so we have an object called the

00:12:29,120 --> 00:12:31,920
compliance suite and it allows you to do

00:12:30,880 --> 00:12:34,800
that

00:12:31,920 --> 00:12:35,760
it helps you keep track like it will

00:12:34,800 --> 00:12:37,680
keep a face

00:12:35,760 --> 00:12:39,040
of where the scans are at right is it

00:12:37,680 --> 00:12:41,839
done is it running

00:12:39,040 --> 00:12:42,399
is it aggregating the results it helps

00:12:41,839 --> 00:12:45,279
you get

00:12:42,399 --> 00:12:46,800
events so you could actually write a a

00:12:45,279 --> 00:12:48,160
small service that listens for events

00:12:46,800 --> 00:12:50,480
when you have a result

00:12:48,160 --> 00:12:52,160
and do actions on that right maybe you

00:12:50,480 --> 00:12:55,200
want to send a mail to your

00:12:52,160 --> 00:12:57,519
sre or maybe you want to just copy

00:12:55,200 --> 00:12:59,279
the results up to somewhere else like

00:12:57,519 --> 00:13:00,320
upload it for example so you could do

00:12:59,279 --> 00:13:02,240
such a thing

00:13:00,320 --> 00:13:04,399
that's the intent and finally of course

00:13:02,240 --> 00:13:06,480
we have objects for the results

00:13:04,399 --> 00:13:08,079
right one of them is going to be a

00:13:06,480 --> 00:13:08,720
remediation that you can apply and the

00:13:08,079 --> 00:13:12,000
operator

00:13:08,720 --> 00:13:12,560
will help you do so next you're going to

00:13:12,000 --> 00:13:14,320
have the

00:13:12,560 --> 00:13:16,320
check results themselves with metadata

00:13:14,320 --> 00:13:17,760
about what happened and finally you'll

00:13:16,320 --> 00:13:20,959
have raw results which

00:13:17,760 --> 00:13:21,760
are in a format that some auditors are

00:13:20,959 --> 00:13:23,519
used to seeing

00:13:21,760 --> 00:13:24,800
right so we store that in a persistent

00:13:23,519 --> 00:13:26,560
volume as well

00:13:24,800 --> 00:13:28,320
i'm not gonna go through examples of

00:13:26,560 --> 00:13:29,200
these ones here but you're gonna see a

00:13:28,320 --> 00:13:32,240
little bit of that

00:13:29,200 --> 00:13:36,320
in the demo uh

00:13:32,240 --> 00:13:36,320
next is the how jacob

00:13:36,480 --> 00:13:40,880
right so the house section tells how

00:13:39,440 --> 00:13:42,320
these scans are actually performed on

00:13:40,880 --> 00:13:45,440
the technical level

00:13:42,320 --> 00:13:47,360
it sort of goes goes

00:13:45,440 --> 00:13:48,480
up from the bottom from the low level

00:13:47,360 --> 00:13:50,720
scans to the

00:13:48,480 --> 00:13:52,959
abstractions that us mentioned a while

00:13:50,720 --> 00:13:52,959
ago

00:13:54,320 --> 00:13:58,399
so before you have the scan it needs to

00:13:56,800 --> 00:14:00,959
have some content

00:13:58,399 --> 00:14:04,079
and the content is developed in this

00:14:00,959 --> 00:14:06,000
compliances code project

00:14:04,079 --> 00:14:07,839
that it's compiled and the result of the

00:14:06,000 --> 00:14:10,639
compilation is

00:14:07,839 --> 00:14:11,760
xml file that's called data stream the

00:14:10,639 --> 00:14:14,720
data stream is

00:14:11,760 --> 00:14:17,600
is put into a container image and the

00:14:14,720 --> 00:14:21,839
container which is pushed to a registry

00:14:17,600 --> 00:14:21,839
and while you can

00:14:22,639 --> 00:14:27,920
you can reference all the low level

00:14:24,800 --> 00:14:31,040
openscap objects in the compliance scan

00:14:27,920 --> 00:14:34,800
api objects it's very user unfriendly

00:14:31,040 --> 00:14:39,519
so there's this profile bundle

00:14:34,800 --> 00:14:42,839
object that we use to encapsulate the

00:14:39,519 --> 00:14:46,000
openscap data stream and the compliance

00:14:42,839 --> 00:14:47,600
content and what comes

00:14:46,000 --> 00:14:50,560
out of this profile bundle objects are

00:14:47,600 --> 00:14:51,360
all these rules profiles and variables

00:14:50,560 --> 00:14:56,160
that

00:14:51,360 --> 00:14:59,360
als was showing earlier and

00:14:56,160 --> 00:14:59,920
the compliance operator on startup would

00:14:59,360 --> 00:15:02,320
create

00:14:59,920 --> 00:15:03,360
two kind of default profile bundle

00:15:02,320 --> 00:15:06,480
objects

00:15:03,360 --> 00:15:10,399
uh one is for ocp so for the

00:15:06,480 --> 00:15:13,600
kubernetes cluster level and one for the

00:15:10,399 --> 00:15:16,480
nodes and by default we uh we support

00:15:13,600 --> 00:15:17,040
our costs so by default there's an ocp

00:15:16,480 --> 00:15:19,600
uh

00:15:17,040 --> 00:15:21,040
profile bundle and uh uh our profile

00:15:19,600 --> 00:15:24,320
bundle

00:15:21,040 --> 00:15:27,920
these are meant for usability so that

00:15:24,320 --> 00:15:30,639
instead of referencing to the long

00:15:27,920 --> 00:15:32,399
openscap identifiers that nobody can be

00:15:30,639 --> 00:15:34,880
expected to remember or type

00:15:32,399 --> 00:15:36,160
it just reference the objects like rules

00:15:34,880 --> 00:15:37,040
and profiles that are parts of these

00:15:36,160 --> 00:15:41,279
profile bundles

00:15:37,040 --> 00:15:45,440
just by name

00:15:41,279 --> 00:15:48,800
next slide please okay then

00:15:45,440 --> 00:15:50,480
the kind of the lowest level uh lowest

00:15:48,800 --> 00:15:52,320
object on the abstraction

00:15:50,480 --> 00:15:54,160
level is a compliance scan which

00:15:52,320 --> 00:15:56,160
represents a

00:15:54,160 --> 00:15:57,600
single scan and a single scan scans

00:15:56,160 --> 00:16:01,040
either the

00:15:57,600 --> 00:16:02,720
kubernetes api objects or a set of nodes

00:16:01,040 --> 00:16:06,720
typically you would say you would scan

00:16:02,720 --> 00:16:08,000
a a machine config pool because all the

00:16:06,720 --> 00:16:12,079
nodes in the machine graphic pool

00:16:08,000 --> 00:16:15,759
are the same um

00:16:12,079 --> 00:16:16,639
the scan represents an orchestrated

00:16:15,759 --> 00:16:20,639
openscap

00:16:16,639 --> 00:16:22,959
scan so there's uh scanner pods that run

00:16:20,639 --> 00:16:25,120
actually openscap they are fed the

00:16:22,959 --> 00:16:26,560
information through the content

00:16:25,120 --> 00:16:29,920
typically you would do it by referencing

00:16:26,560 --> 00:16:32,079
the profiles and rules and whatnot

00:16:29,920 --> 00:16:34,480
then openscap itself runs and produces

00:16:32,079 --> 00:16:34,480
results

00:16:34,560 --> 00:16:38,079
there's sort of two kinds of results

00:16:36,800 --> 00:16:40,240
that are produced and we'll

00:16:38,079 --> 00:16:41,519
talk about that more in detail but just

00:16:40,240 --> 00:16:44,320
briefly for now

00:16:41,519 --> 00:16:47,600
there's sort of compact results uh that

00:16:44,320 --> 00:16:50,800
just say if some rule passed or failed

00:16:47,600 --> 00:16:53,040
and that can be used to produce

00:16:50,800 --> 00:16:54,160
results as kubernetes objects and then

00:16:53,040 --> 00:16:57,519
there's a

00:16:54,160 --> 00:16:57,920
much bigger result it's actually a

00:16:57,519 --> 00:17:01,519
result

00:16:57,920 --> 00:17:02,320
file called arf file that auditors are

00:17:01,519 --> 00:17:04,880
normally used to

00:17:02,320 --> 00:17:06,799
and that's too big to be stored in at cd

00:17:04,880 --> 00:17:10,160
as kubernetes objects so it's

00:17:06,799 --> 00:17:13,039
offloaded to a persistent volume and

00:17:10,160 --> 00:17:14,079
uh how and why exactly we'll talk about

00:17:13,039 --> 00:17:18,720
late writing there

00:17:14,079 --> 00:17:20,400
in more detail and uh because

00:17:18,720 --> 00:17:22,400
especially when you're scanning nodes

00:17:20,400 --> 00:17:22,720
you would scan many nodes but you want

00:17:22,400 --> 00:17:25,439
to

00:17:22,720 --> 00:17:27,199
represent the result for a set of nodes

00:17:25,439 --> 00:17:30,000
a single result right you don't want to

00:17:27,199 --> 00:17:30,480
see 1000 results for 1000 nodes so

00:17:30,000 --> 00:17:33,440
there's

00:17:30,480 --> 00:17:34,640
a port called aggregator that looks at

00:17:33,440 --> 00:17:37,679
each of the

00:17:34,640 --> 00:17:40,320
compact results stored in config maps

00:17:37,679 --> 00:17:41,919
and aggregates them to a single result

00:17:40,320 --> 00:17:44,799
so for each

00:17:41,919 --> 00:17:46,080
scan that scans a set of nodes in a

00:17:44,799 --> 00:17:48,880
machine config pool you would end up

00:17:46,080 --> 00:17:48,880
seeing one result

00:17:51,360 --> 00:17:57,679
okay there's two kind of scans

00:17:55,120 --> 00:17:59,360
as we mentioned a couple of times before

00:17:57,679 --> 00:18:00,799
that you can either scan the nodes in

00:17:59,360 --> 00:18:04,080
the cluster or the

00:18:00,799 --> 00:18:06,400
kubernetes api objects

00:18:04,080 --> 00:18:07,600
this distinction is represented as two

00:18:06,400 --> 00:18:09,760
types of scans

00:18:07,600 --> 00:18:11,039
one is node and the other is a platform

00:18:09,760 --> 00:18:14,240
scan

00:18:11,039 --> 00:18:16,160
the node scan looks at the

00:18:14,240 --> 00:18:18,160
cluster nodes themselves so typically

00:18:16,160 --> 00:18:21,280
that would be arcos

00:18:18,160 --> 00:18:24,160
how it works is that the pod that

00:18:21,280 --> 00:18:26,960
performs the scan is a privileged spot

00:18:24,160 --> 00:18:30,240
it mounts the host file system

00:18:26,960 --> 00:18:33,440
at some known location

00:18:30,240 --> 00:18:34,960
in the pot and the openscap then runs

00:18:33,440 --> 00:18:36,799
sort of as

00:18:34,960 --> 00:18:38,080
as it was scanning each route where the

00:18:36,799 --> 00:18:41,200
fasterm

00:18:38,080 --> 00:18:44,480
uh where the node system is mounted

00:18:41,200 --> 00:18:47,440
um and in this case you would have

00:18:44,480 --> 00:18:48,000
one port with openscap one scanner board

00:18:47,440 --> 00:18:50,240
per

00:18:48,000 --> 00:18:51,840
node in the cluster and the platform

00:18:50,240 --> 00:18:52,799
scans is scanning the kubernetes api

00:18:51,840 --> 00:18:55,760
objects

00:18:52,799 --> 00:18:57,120
it scans just one singleton instance of

00:18:55,760 --> 00:19:00,160
the scanner pod

00:18:57,120 --> 00:19:01,840
that is not privileged because that bot

00:19:00,160 --> 00:19:02,640
doesn't have any business in mounting

00:19:01,840 --> 00:19:05,280
the

00:19:02,640 --> 00:19:05,760
node file systems it doesn't have to be

00:19:05,280 --> 00:19:08,240
uh

00:19:05,760 --> 00:19:09,120
before actually doing this scan the bot

00:19:08,240 --> 00:19:11,039
prefetches

00:19:09,120 --> 00:19:12,400
the kubernetes ap object that would be

00:19:11,039 --> 00:19:14,960
looking at like

00:19:12,400 --> 00:19:16,960
uh config knife secrets and whatnot

00:19:14,960 --> 00:19:19,760
dumps them into a known location

00:19:16,960 --> 00:19:21,919
and then runs the openscap scanner on

00:19:19,760 --> 00:19:21,919
that

00:19:22,840 --> 00:19:27,760
location

00:19:24,720 --> 00:19:27,760
relax slightly

00:19:28,799 --> 00:19:32,640
so this is what the scans do they more

00:19:31,520 --> 00:19:36,640
or less wrap

00:19:32,640 --> 00:19:39,120
openscap and perform the actual scans

00:19:36,640 --> 00:19:40,000
one level up above the the scans are the

00:19:39,120 --> 00:19:42,400
suites that

00:19:40,000 --> 00:19:43,520
as mentioned before so they provide

00:19:42,400 --> 00:19:47,360
first a

00:19:43,520 --> 00:19:49,039
group together so if you're scanning a

00:19:47,360 --> 00:19:50,880
kind of the typical default installation

00:19:49,039 --> 00:19:53,440
of openshift you would have

00:19:50,880 --> 00:19:55,039
once one scan for the masternodes you

00:19:53,440 --> 00:19:55,760
would have another scan for the worker

00:19:55,039 --> 00:19:57,360
nodes

00:19:55,760 --> 00:19:58,880
and then you would have a third scan for

00:19:57,360 --> 00:20:00,559
the uh

00:19:58,880 --> 00:20:02,400
for the kubernetes api objects they

00:20:00,559 --> 00:20:06,080
would all be probably listed in one

00:20:02,400 --> 00:20:07,280
compliance suite so there's the list of

00:20:06,080 --> 00:20:10,480
scans

00:20:07,280 --> 00:20:11,440
uh the suite also exposes uh aggregated

00:20:10,480 --> 00:20:15,280
status

00:20:11,440 --> 00:20:18,320
of all the scans so uh by aggregate

00:20:15,280 --> 00:20:19,679
it means that if you have three scans

00:20:18,320 --> 00:20:22,159
one of them is already done the other

00:20:19,679 --> 00:20:23,440
two are running uh the aggregated scan

00:20:22,159 --> 00:20:25,520
will be displayed as running and

00:20:23,440 --> 00:20:27,039
not switch to down until all of them are

00:20:25,520 --> 00:20:30,400
done

00:20:27,039 --> 00:20:32,159
and the suite also exposes kind of

00:20:30,400 --> 00:20:34,159
sugar around running these scans

00:20:32,159 --> 00:20:35,760
actually so there's

00:20:34,159 --> 00:20:38,080
two things that are worth mentioning one

00:20:35,760 --> 00:20:40,000
is a schedule so you can with the suite

00:20:38,080 --> 00:20:40,799
you can say that the suite runs the

00:20:40,000 --> 00:20:43,520
scans

00:20:40,799 --> 00:20:44,880
periodically with a kubernetes current

00:20:43,520 --> 00:20:48,400
job

00:20:44,880 --> 00:20:50,240
and the other thing is that in the suite

00:20:48,400 --> 00:20:53,280
you can say that you want to just

00:20:50,240 --> 00:20:54,400
trust us and automatically apply all

00:20:53,280 --> 00:20:56,960
your mediations

00:20:54,400 --> 00:20:59,039
and kind of close all the gaps toward

00:20:56,960 --> 00:21:00,960
the compliance automatically

00:20:59,039 --> 00:21:03,039
uh that might be useful but probably

00:21:00,960 --> 00:21:04,480
should be used only once you verify that

00:21:03,039 --> 00:21:07,919
all of the settings are

00:21:04,480 --> 00:21:07,919
actually okay in your environment

00:21:09,919 --> 00:21:14,240
okay and then going up from the scan and

00:21:12,799 --> 00:21:17,440
the suite is the

00:21:14,240 --> 00:21:20,559
scan setting binding so that's a

00:21:17,440 --> 00:21:22,960
abstraction that lets you generate

00:21:20,559 --> 00:21:24,480
the suite and the scans without actually

00:21:22,960 --> 00:21:28,240
having to type out all the

00:21:24,480 --> 00:21:31,120
uh openscap details so instead of

00:21:28,240 --> 00:21:33,120
typing the identifiers that openscape

00:21:31,120 --> 00:21:34,240
expects that would be like xccdf

00:21:33,120 --> 00:21:37,120
underscore something

00:21:34,240 --> 00:21:38,159
underscore archos and so on you can just

00:21:37,120 --> 00:21:41,440
say

00:21:38,159 --> 00:21:44,960
i want to scan these

00:21:41,440 --> 00:21:48,000
this group of machines using the

00:21:44,960 --> 00:21:49,840
arkos feldram moderate profile and

00:21:48,000 --> 00:21:52,000
the scan setting binding would generate

00:21:49,840 --> 00:21:52,640
the compliance suite for you and the

00:21:52,000 --> 00:21:54,159
compliance

00:21:52,640 --> 00:21:55,919
would then generate the scans for you

00:21:54,159 --> 00:21:59,440
and feels

00:21:55,919 --> 00:22:00,880
all like this and i said earlier that

00:21:59,440 --> 00:22:02,640
some profile bundles are created by

00:22:00,880 --> 00:22:04,240
default so

00:22:02,640 --> 00:22:06,400
in the easiest case you can just

00:22:04,240 --> 00:22:08,000
reference the objects that are already

00:22:06,400 --> 00:22:12,960
there for you you don't have to

00:22:08,000 --> 00:22:17,200
set anything let's slide this now

00:22:12,960 --> 00:22:20,240
okay and a little more

00:22:17,200 --> 00:22:22,080
if lights keep getting off here just

00:22:20,240 --> 00:22:25,280
probably save my camera for a bit

00:22:22,080 --> 00:22:27,600
so as we said a bit before there's

00:22:25,280 --> 00:22:29,039
uh two kinds of results there's the

00:22:27,600 --> 00:22:31,760
compact results

00:22:29,039 --> 00:22:32,480
that are small enough to be put into a

00:22:31,760 --> 00:22:34,480
cd

00:22:32,480 --> 00:22:37,039
and there's the raw results that are

00:22:34,480 --> 00:22:39,200
stored in this format called arf

00:22:37,039 --> 00:22:41,280
uh i think it means assessment result

00:22:39,200 --> 00:22:44,320
format these results are very often

00:22:41,280 --> 00:22:46,159
required by auditors or at least the

00:22:44,320 --> 00:22:49,200
others are used to them and there exists

00:22:46,159 --> 00:22:50,159
a some third-party tools that visualize

00:22:49,200 --> 00:22:54,080
and correlate the

00:22:50,159 --> 00:22:57,600
results and so on the arf result

00:22:54,080 --> 00:23:00,240
while useful uh is

00:22:57,600 --> 00:23:02,480
huge it's uh like think tens or even

00:23:00,240 --> 00:23:05,520
hundreds of megabytes big external file

00:23:02,480 --> 00:23:06,720
so this is too big to put in a cd into

00:23:05,520 --> 00:23:09,280
configmap or any other

00:23:06,720 --> 00:23:11,039
native kubernetes object it's need to be

00:23:09,280 --> 00:23:14,559
stored somewhere else

00:23:11,039 --> 00:23:18,559
uh what we did was that once the result

00:23:14,559 --> 00:23:22,640
once the arf test result is created

00:23:18,559 --> 00:23:26,240
the scanner ports upload the uh

00:23:22,640 --> 00:23:28,799
the results into a persistent volume so

00:23:26,240 --> 00:23:30,080
as a user what you would do is you would

00:23:28,799 --> 00:23:31,760
then spawn a port

00:23:30,080 --> 00:23:33,600
that mounts the persistent volume once

00:23:31,760 --> 00:23:35,520
once the scan is done and copy the

00:23:33,600 --> 00:23:37,679
results somewhere else for

00:23:35,520 --> 00:23:40,159
viewing in some third party tool that

00:23:37,679 --> 00:23:40,159
you might have

00:23:43,919 --> 00:23:50,799
all right so with all that said and done

00:23:47,120 --> 00:23:52,880
now we can try it out now uh

00:23:50,799 --> 00:23:54,559
we're not going to do a live demo even

00:23:52,880 --> 00:23:56,159
though this is a live session

00:23:54,559 --> 00:23:59,520
so this time we'll actually have a

00:23:56,159 --> 00:24:02,960
recording for that right so

00:23:59,520 --> 00:24:06,240
let me try to copy here oh

00:24:02,960 --> 00:24:09,760
i could not copy there yeah there you go

00:24:06,240 --> 00:24:13,760
you could see it so

00:24:09,760 --> 00:24:13,760
oh i messed it up

00:24:16,840 --> 00:24:19,840
hmm

00:24:23,760 --> 00:24:26,480
let me try to

00:24:27,520 --> 00:24:33,840
do this right

00:24:34,400 --> 00:24:37,440
right hopefully folks can see the whole

00:24:36,240 --> 00:24:40,000
thing

00:24:37,440 --> 00:24:40,000
but uh

00:24:41,919 --> 00:24:45,039
okay as kinema has been a little

00:24:43,200 --> 00:24:46,559
difficult but okay we can see some

00:24:45,039 --> 00:24:48,000
things right so the first thing that you

00:24:46,559 --> 00:24:51,279
already see

00:24:48,000 --> 00:24:52,640
is that uh uh we have some profiles that

00:24:51,279 --> 00:24:53,360
already come with the installation of

00:24:52,640 --> 00:24:55,120
the operator

00:24:53,360 --> 00:24:56,480
so what we're gonna do is check out one

00:24:55,120 --> 00:25:00,240
of those profiles right

00:24:56,480 --> 00:25:02,559
uh this one is the essential eight one

00:25:00,240 --> 00:25:03,919
there are some extra fields that come

00:25:02,559 --> 00:25:06,400
from cube cuddle but

00:25:03,919 --> 00:25:08,159
that's just what you get oh is it

00:25:06,400 --> 00:25:11,600
possible to make it larger

00:25:08,159 --> 00:25:15,279
okay let me give that a try

00:25:11,600 --> 00:25:18,640
i can give that a try wait up

00:25:15,279 --> 00:25:22,240
i think uh i could do that larger but i

00:25:18,640 --> 00:25:22,240
would need to switch to the other screen

00:25:23,760 --> 00:25:27,360
yeah i'm gonna try to switch to the

00:25:25,600 --> 00:25:43,840
other screen and

00:25:27,360 --> 00:25:43,840
hopefully that helps hello

00:25:47,919 --> 00:25:51,840
people think of a click okay

00:25:54,960 --> 00:25:58,240
so then i'm gonna switch this one to my

00:25:56,880 --> 00:26:11,840
other screen over here

00:25:58,240 --> 00:26:14,559
there you go and let's give this a try

00:26:11,840 --> 00:26:16,880
right uh what about this is this any

00:26:14,559 --> 00:26:16,880
better

00:26:20,000 --> 00:26:29,200
the font could be bigger

00:26:25,120 --> 00:26:29,200
yeah i guess what about this though

00:26:35,440 --> 00:26:38,480
right maybe we can continue with this

00:26:37,440 --> 00:26:40,720
one

00:26:38,480 --> 00:26:43,120
right so the stuff that you already saw

00:26:40,720 --> 00:26:45,120
some profiles are already there

00:26:43,120 --> 00:26:47,679
not much difference all right well

00:26:45,120 --> 00:26:50,400
that's that's a bummer

00:26:47,679 --> 00:26:52,400
uh so in this case i'm just checking out

00:26:50,400 --> 00:26:53,919
the profile as you can see there's a

00:26:52,400 --> 00:26:55,120
bunch of rules that are enabled in this

00:26:53,919 --> 00:26:58,400
profile

00:26:55,120 --> 00:27:00,320
the next thing to do though is well

00:26:58,400 --> 00:27:01,600
check out one of the rules right just

00:27:00,320 --> 00:27:04,880
the curiosity

00:27:01,600 --> 00:27:07,440
in this case we're gonna set the

00:27:04,880 --> 00:27:08,799
k pointer restrict from the syscontrols

00:27:07,440 --> 00:27:13,279
in the kernel

00:27:08,799 --> 00:27:15,039
and uh it gives you some metadata as i

00:27:13,279 --> 00:27:18,080
mentioned about it like the rationale

00:27:15,039 --> 00:27:21,600
or there was a

00:27:18,080 --> 00:27:23,919
fix enabled over there and uh

00:27:21,600 --> 00:27:26,159
yeah let's try to take it into use uh

00:27:23,919 --> 00:27:28,720
first thing that we want though is to

00:27:26,159 --> 00:27:30,240
put some settings for that right in this

00:27:28,720 --> 00:27:30,960
case we're just gonna allocate one

00:27:30,240 --> 00:27:32,960
gigabyte

00:27:30,960 --> 00:27:34,640
for this storage uh it's a very small

00:27:32,960 --> 00:27:35,840
cluster in bigger clusters of course you

00:27:34,640 --> 00:27:37,520
would need a lot more

00:27:35,840 --> 00:27:39,279
and there is guidance for that and we're

00:27:37,520 --> 00:27:40,240
just going to run this every day at one

00:27:39,279 --> 00:27:43,440
in the morning

00:27:40,240 --> 00:27:44,080
right for workers and masters finally we

00:27:43,440 --> 00:27:46,840
just apply

00:27:44,080 --> 00:27:49,679
right we want to comply with the e8

00:27:46,840 --> 00:27:51,760
profile and with my settings

00:27:49,679 --> 00:27:52,960
and let's just do let the operator do

00:27:51,760 --> 00:27:56,240
its thing

00:27:52,960 --> 00:27:57,520
right which is exactly what it's doing

00:27:56,240 --> 00:27:58,880
right it's going to be running the

00:27:57,520 --> 00:28:01,840
profile

00:27:58,880 --> 00:28:04,799
and until we get a result it's going to

00:28:01,840 --> 00:28:04,799
be in state running

00:28:06,480 --> 00:28:09,840
and then it's finally aggregating the

00:28:08,159 --> 00:28:11,120
result which means that it goes through

00:28:09,840 --> 00:28:12,399
all of the nodes in the cluster

00:28:11,120 --> 00:28:14,399
check the results do i have

00:28:12,399 --> 00:28:17,919
inconsistencies or not

00:28:14,399 --> 00:28:19,760
or is everything a okay

00:28:17,919 --> 00:28:21,600
and finally after aggregating the

00:28:19,760 --> 00:28:24,320
profile we should see a result

00:28:21,600 --> 00:28:24,320
fairly soon

00:28:26,960 --> 00:28:30,000
right so in this case of course this was

00:28:29,600 --> 00:28:33,120
an

00:28:30,000 --> 00:28:35,200
out-of-the-box uh

00:28:33,120 --> 00:28:36,559
cluster so it was not not compliant

00:28:35,200 --> 00:28:39,679
unfortunately

00:28:36,559 --> 00:28:41,039
and we can see what exactly failed right

00:28:39,679 --> 00:28:42,399
in this case there's a lot of audit

00:28:41,039 --> 00:28:44,720
rules that were not set

00:28:42,399 --> 00:28:46,080
and they're not default so those can be

00:28:44,720 --> 00:28:48,399
easily fixed

00:28:46,080 --> 00:28:49,760
there were some sshd parameters as well

00:28:48,399 --> 00:28:52,880
that we're missing

00:28:49,760 --> 00:28:55,200
but that's a lot of them we can also

00:28:52,880 --> 00:28:56,320
actually just check the failed results

00:28:55,200 --> 00:28:59,760
with a label

00:28:56,320 --> 00:29:01,520
which makes life a little bit easier uh

00:28:59,760 --> 00:29:03,679
and you can also view the results and it

00:29:01,520 --> 00:29:06,080
will tell you more or less like is this

00:29:03,679 --> 00:29:07,520
uh a bad thing right how bad of it is

00:29:06,080 --> 00:29:10,960
it's like medium

00:29:07,520 --> 00:29:12,960
high uh severity and a little bit more

00:29:10,960 --> 00:29:14,320
metadata about it

00:29:12,960 --> 00:29:16,080
in this case we're also checking the

00:29:14,320 --> 00:29:16,720
remediations none of them have been

00:29:16,080 --> 00:29:19,279
applied

00:29:16,720 --> 00:29:20,799
but uh in this case other mediation was

00:29:19,279 --> 00:29:24,480
a machine config

00:29:20,799 --> 00:29:26,159
as i mentioned the machine config is a

00:29:24,480 --> 00:29:29,039
openshift specific thing that allows you

00:29:26,159 --> 00:29:32,399
to configure the operating system

00:29:29,039 --> 00:29:36,000
and uh yeah

00:29:32,399 --> 00:29:37,919
so we just try to apply it and as you

00:29:36,000 --> 00:29:41,840
can see the machine config object

00:29:37,919 --> 00:29:41,840
got uh created

00:29:43,679 --> 00:29:50,080
and that's about

00:29:46,880 --> 00:29:54,159
it related to remediations

00:29:50,080 --> 00:29:55,760
right so here was the creation uh

00:29:54,159 --> 00:29:58,240
you can see machine config object in

00:29:55,760 --> 00:29:59,360
there and finally we want the world

00:29:58,240 --> 00:30:01,840
results

00:29:59,360 --> 00:30:04,080
right so those are they have persistent

00:30:01,840 --> 00:30:05,600
volume claims in the cluster

00:30:04,080 --> 00:30:07,679
one thing that we can do is create

00:30:05,600 --> 00:30:10,240
another part to fetch them or actually i

00:30:07,679 --> 00:30:13,360
have another utility to

00:30:10,240 --> 00:30:15,120
make that a little bit easier but uh

00:30:13,360 --> 00:30:16,480
but yeah this is just the basic flow of

00:30:15,120 --> 00:30:18,320
what you would do in your day-to-day

00:30:16,480 --> 00:30:20,640
when you're running the operator

00:30:18,320 --> 00:30:21,760
i'm sorry it went a little fast it was a

00:30:20,640 --> 00:30:25,120
little difficult

00:30:21,760 --> 00:30:28,559
given that i could not uh

00:30:25,120 --> 00:30:31,840
maximize this but yeah

00:30:28,559 --> 00:30:33,120
so so that's it over there uh

00:30:31,840 --> 00:30:35,200
now we're going to talk about some

00:30:33,120 --> 00:30:37,840
challenges about the building the

00:30:35,200 --> 00:30:37,840
operator itself

00:30:38,000 --> 00:30:41,679
one of them as mentioned was the result

00:30:40,559 --> 00:30:43,360
server

00:30:41,679 --> 00:30:45,600
which is the server that actually

00:30:43,360 --> 00:30:48,159
fetches all of the raw results

00:30:45,600 --> 00:30:49,200
and the issue was that initially we were

00:30:48,159 --> 00:30:51,200
not aware that

00:30:49,200 --> 00:30:53,039
ncd had that limit because we were new

00:30:51,200 --> 00:30:57,440
to that so we had to

00:30:53,039 --> 00:31:00,640
write it to begin with right and so

00:30:57,440 --> 00:31:04,000
then we came to the issue that

00:31:00,640 --> 00:31:07,760
not all of the default

00:31:04,000 --> 00:31:09,279
volume types accept read write many

00:31:07,760 --> 00:31:11,679
right a lot of them for example in

00:31:09,279 --> 00:31:14,799
amazon the default is read write once

00:31:11,679 --> 00:31:18,880
which will only allow you to mount

00:31:14,799 --> 00:31:21,519
one volume per node at a time right so

00:31:18,880 --> 00:31:23,679
that got a little bit tricky so you got

00:31:21,519 --> 00:31:25,440
to be careful when using that one

00:31:23,679 --> 00:31:27,519
therefore that's why we needed just one

00:31:25,440 --> 00:31:29,440
result server as opposed to just writing

00:31:27,519 --> 00:31:30,559
to a shared volume in all of the nodes

00:31:29,440 --> 00:31:32,240
that are doing the scan that would have

00:31:30,559 --> 00:31:33,840
been way easier but that wasn't possible

00:31:32,240 --> 00:31:35,919
at the time

00:31:33,840 --> 00:31:37,919
another thing is that now that we

00:31:35,919 --> 00:31:40,799
actually push the results towards a

00:31:37,919 --> 00:31:42,559
single result server

00:31:40,799 --> 00:31:45,279
we have to do it securely right because

00:31:42,559 --> 00:31:47,919
these are potential security findings

00:31:45,279 --> 00:31:48,720
so we do have an ephemeral pki that's

00:31:47,919 --> 00:31:52,480
created

00:31:48,720 --> 00:31:54,399
just for each scan so you can only get

00:31:52,480 --> 00:31:56,320
and receive results from the nodes that

00:31:54,399 --> 00:31:59,760
belong to that scan from the pods

00:31:56,320 --> 00:32:01,760
sorry right so so that was another thing

00:31:59,760 --> 00:32:03,760
that we did

00:32:01,760 --> 00:32:05,440
jacob will explain the next challenge

00:32:03,760 --> 00:32:08,640
though

00:32:05,440 --> 00:32:09,679
right so as i alluded when you're

00:32:08,640 --> 00:32:11,360
scanning the notes

00:32:09,679 --> 00:32:12,880
you might be potentially scanning

00:32:11,360 --> 00:32:14,640
hundreds or thousands of nodes but you

00:32:12,880 --> 00:32:18,640
want the result to be represented

00:32:14,640 --> 00:32:18,640
as a single object right

00:32:18,720 --> 00:32:23,039
that sort of assumes that all the nodes

00:32:21,039 --> 00:32:24,960
would have identical results

00:32:23,039 --> 00:32:27,679
which should be the case normally you

00:32:24,960 --> 00:32:30,240
would scan a

00:32:27,679 --> 00:32:31,519
notes in the single machine config pool

00:32:30,240 --> 00:32:34,559
which should be

00:32:31,519 --> 00:32:37,919
identical but

00:32:34,559 --> 00:32:40,720
there might not be so what if one of the

00:32:37,919 --> 00:32:40,720
notes is different

00:32:40,840 --> 00:32:48,399
um if

00:32:43,919 --> 00:32:50,320
next slide please oh

00:32:48,399 --> 00:32:51,679
if one of the notes is different it

00:32:50,320 --> 00:32:54,480
might be because

00:32:51,679 --> 00:32:57,039
the admin just did you know oc debug or

00:32:54,480 --> 00:32:58,640
ssh into the node and just run vi and

00:32:57,039 --> 00:33:00,080
change the file

00:32:58,640 --> 00:33:02,559
or it might be worse it might be a

00:33:00,080 --> 00:33:05,440
breaking attempt either way what we

00:33:02,559 --> 00:33:07,440
want to do is we want to direct the

00:33:05,440 --> 00:33:08,720
attention of the admin or the

00:33:07,440 --> 00:33:11,279
compliance officer who's running the

00:33:08,720 --> 00:33:14,640
scan to this issue and

00:33:11,279 --> 00:33:17,760
make them aware so in this case

00:33:14,640 --> 00:33:19,760
uh regardless of whether we can

00:33:17,760 --> 00:33:21,039
move on from this state to a compliant

00:33:19,760 --> 00:33:24,159
we always flag the

00:33:21,039 --> 00:33:26,320
result as inconsistent

00:33:24,159 --> 00:33:28,240
and because there can be many nodes and

00:33:26,320 --> 00:33:30,320
we want to make it easy to find

00:33:28,240 --> 00:33:31,519
where the inconsistency is we also try

00:33:30,320 --> 00:33:34,240
to find the

00:33:31,519 --> 00:33:35,360
most common state among the nodes and

00:33:34,240 --> 00:33:39,039
just flag the

00:33:35,360 --> 00:33:40,799
inconsistencies this is all visible as

00:33:39,039 --> 00:33:41,600
kubernetes labels i forgot the exact

00:33:40,799 --> 00:33:44,480
names but it's

00:33:41,600 --> 00:33:46,640
it's in the docs so once you get the

00:33:44,480 --> 00:33:49,120
full set of results you can just

00:33:46,640 --> 00:33:50,320
filter by labels and see okay this note

00:33:49,120 --> 00:33:54,320
is different from the others

00:33:50,320 --> 00:33:54,320
and this result is consistent so on

00:33:54,640 --> 00:33:59,519
finding the most common state is not

00:33:57,840 --> 00:34:00,960
always possible like what happens if you

00:33:59,519 --> 00:34:01,519
have just two nodes right and one of

00:34:00,960 --> 00:34:03,039
them has

00:34:01,519 --> 00:34:04,640
this state and the other has the other

00:34:03,039 --> 00:34:06,080
so

00:34:04,640 --> 00:34:08,240
but if it's possible we try to find the

00:34:06,080 --> 00:34:09,359
common state and if possible we try to

00:34:08,240 --> 00:34:11,040
make it possible

00:34:09,359 --> 00:34:12,879
we try to make it so that you can

00:34:11,040 --> 00:34:14,639
converge from that inconsistent state by

00:34:12,879 --> 00:34:17,200
applying the remediation

00:34:14,639 --> 00:34:17,679
that's also not always possible like in

00:34:17,200 --> 00:34:19,520
case

00:34:17,679 --> 00:34:20,800
uh one of the nodes skips the check

00:34:19,520 --> 00:34:22,720
completely

00:34:20,800 --> 00:34:24,159
we have no idea what what its state is

00:34:22,720 --> 00:34:26,079
but if it's possible you always try to

00:34:24,159 --> 00:34:28,960
generate the remediation

00:34:26,079 --> 00:34:29,679
and once you apply the remediations you

00:34:28,960 --> 00:34:35,839
would get to the

00:34:29,679 --> 00:34:35,839
consistent state

00:34:37,599 --> 00:34:41,679
okay the other issue we were dealing

00:34:41,040 --> 00:34:45,919
with was

00:34:41,679 --> 00:34:47,520
with uh contents updates uh so the

00:34:45,919 --> 00:34:49,919
remediations as you may be saw in the

00:34:47,520 --> 00:34:52,320
demo are stored as kubernetes objects

00:34:49,919 --> 00:34:57,040
for the node updates there will be

00:34:52,320 --> 00:34:57,040
machine config objects and

00:34:57,680 --> 00:35:02,640
while you can patch the object like

00:34:59,680 --> 00:35:05,680
calling oc patch or keep ctl patch

00:35:02,640 --> 00:35:07,839
this still replaces the

00:35:05,680 --> 00:35:09,200
whole thing so the whole machine config

00:35:07,839 --> 00:35:11,920
or a whole

00:35:09,200 --> 00:35:11,920
config map

00:35:12,480 --> 00:35:16,640
so with the machine config this means

00:35:15,119 --> 00:35:20,160
the whole file is

00:35:16,640 --> 00:35:22,720
is replaced uh but what if the

00:35:20,160 --> 00:35:24,079
remediation needs to be updated like we

00:35:22,720 --> 00:35:25,599
messed up the remediations we actually

00:35:24,079 --> 00:35:26,400
need to set some other contents of the

00:35:25,599 --> 00:35:29,599
file

00:35:26,400 --> 00:35:30,880
or the file the the package that we set

00:35:29,599 --> 00:35:33,280
configuration for

00:35:30,880 --> 00:35:34,720
has been updated rebased and its default

00:35:33,280 --> 00:35:36,240
has changed

00:35:34,720 --> 00:35:38,079
in that case we need to push out a new

00:35:36,240 --> 00:35:41,839
remediation

00:35:38,079 --> 00:35:43,359
um because it's probably not a good idea

00:35:41,839 --> 00:35:46,079
to just do this automatically and not

00:35:43,359 --> 00:35:49,119
that let the admin know what we do is

00:35:46,079 --> 00:35:50,400
in this case the remediation object that

00:35:49,119 --> 00:35:53,599
was previously

00:35:50,400 --> 00:35:56,640
applied is flagged as outdated

00:35:53,599 --> 00:35:57,839
and in the in the object like if you

00:35:56,640 --> 00:36:00,880
dump it with

00:35:57,839 --> 00:36:04,000
oc get yama you would see

00:36:00,880 --> 00:36:05,280
both the current object that is applied

00:36:04,000 --> 00:36:07,200
to the cluster now so

00:36:05,280 --> 00:36:08,400
that represents maybe the file contents

00:36:07,200 --> 00:36:12,160
on the disk

00:36:08,400 --> 00:36:16,480
and the new version of the remediation

00:36:12,160 --> 00:36:19,760
and this gives you the opportunity to

00:36:16,480 --> 00:36:21,200
review and revisit the the object and

00:36:19,760 --> 00:36:23,760
apply the

00:36:21,200 --> 00:36:24,960
new settings at your own pace once the

00:36:23,760 --> 00:36:28,079
contents have been vetted

00:36:24,960 --> 00:36:28,079
tested what not

00:36:33,599 --> 00:36:38,320
okay when is this going to be released

00:36:38,800 --> 00:36:43,920
the operator will be part of openshift

00:36:42,000 --> 00:36:47,520
4.6

00:36:43,920 --> 00:36:48,480
um as far as like private openshift goes

00:36:47,520 --> 00:36:51,760
this will be

00:36:48,480 --> 00:36:55,040
released on operator hub as

00:36:51,760 --> 00:36:56,960
many other operators but the

00:36:55,040 --> 00:36:58,720
important thing to note is that that's

00:36:56,960 --> 00:36:59,839
the operator it doesn't mean that we

00:36:58,720 --> 00:37:02,640
will release

00:36:59,839 --> 00:37:04,480
all the content and you know people will

00:37:02,640 --> 00:37:05,680
be able to make their clusters compliant

00:37:04,480 --> 00:37:07,119
immediately with all the different

00:37:05,680 --> 00:37:10,240
security standards

00:37:07,119 --> 00:37:14,560
the content will come a bit later

00:37:10,240 --> 00:37:16,640
and uh the content releases

00:37:14,560 --> 00:37:17,920
are designed or we work so that the

00:37:16,640 --> 00:37:20,240
content releases

00:37:17,920 --> 00:37:22,000
can be asynchronous and not depend on

00:37:20,240 --> 00:37:24,720
the

00:37:22,000 --> 00:37:27,200
openshift schedule or you know operator

00:37:24,720 --> 00:37:30,800
schedule they're completely decoupled

00:37:27,200 --> 00:37:34,839
and in four six as far as the notes go

00:37:30,800 --> 00:37:37,839
notes go at least only arcos will be

00:37:34,839 --> 00:37:37,839
supported

00:37:44,320 --> 00:37:48,640
typical issue from right now so

00:37:47,520 --> 00:37:50,110
now we're going to go through some

00:37:48,640 --> 00:37:51,599
frequently asked questions

00:37:50,110 --> 00:37:52,960
[Music]

00:37:51,599 --> 00:37:54,720
that we have gotten over the time while

00:37:52,960 --> 00:37:57,760
developing this operator

00:37:54,720 --> 00:37:58,880
the first one has been why are you using

00:37:57,760 --> 00:38:02,400
opus capital plus

00:37:58,880 --> 00:38:04,640
code that is old technology

00:38:02,400 --> 00:38:06,640
and so on but in reality i mean it's a

00:38:04,640 --> 00:38:07,920
standard and it's something that people

00:38:06,640 --> 00:38:11,040
already have tooling

00:38:07,920 --> 00:38:12,240
and automation on top of right more so

00:38:11,040 --> 00:38:14,800
there are auditors that

00:38:12,240 --> 00:38:16,079
already have uh setups that allow them

00:38:14,800 --> 00:38:19,520
to easily browse

00:38:16,079 --> 00:38:22,000
and consume

00:38:19,520 --> 00:38:22,960
results and a checklist out of this

00:38:22,000 --> 00:38:26,000
right so

00:38:22,960 --> 00:38:27,359
let's just make life easier for both the

00:38:26,000 --> 00:38:29,040
people in the field

00:38:27,359 --> 00:38:30,400
and for us because there's already

00:38:29,040 --> 00:38:32,240
something up there

00:38:30,400 --> 00:38:34,000
right another thing is that they already

00:38:32,240 --> 00:38:36,640
have a community

00:38:34,000 --> 00:38:37,599
right so it is not actually just used

00:38:36,640 --> 00:38:40,640
for rel

00:38:37,599 --> 00:38:42,240
there are there is content for ubuntu

00:38:40,640 --> 00:38:43,920
there is content for mac os

00:38:42,240 --> 00:38:46,000
uh there are other projects not just

00:38:43,920 --> 00:38:49,280
openshift like openstack for example

00:38:46,000 --> 00:38:51,040
that has security content here so

00:38:49,280 --> 00:38:52,640
we we want to enable communities and

00:38:51,040 --> 00:38:54,240
enhance communities so

00:38:52,640 --> 00:38:55,920
that's why we decided hey let's tag

00:38:54,240 --> 00:38:59,440
along in this project

00:38:55,920 --> 00:39:00,880
and take it into use right hopefully at

00:38:59,440 --> 00:39:04,560
some point be able to

00:39:00,880 --> 00:39:05,839
provide more value as well so

00:39:04,560 --> 00:39:08,079
another question that we have got in

00:39:05,839 --> 00:39:10,720
quite often is why did you use opa

00:39:08,079 --> 00:39:12,240
or open policy agent which is a project

00:39:10,720 --> 00:39:15,040
from the cncf

00:39:12,240 --> 00:39:16,960
and the fact is that even though opa and

00:39:15,040 --> 00:39:19,440
the compliance operator both evaluate

00:39:16,960 --> 00:39:23,520
policy they're very different projects

00:39:19,440 --> 00:39:26,480
right the open policy agent is

00:39:23,520 --> 00:39:29,040
a policy engine so it allows you to in

00:39:26,480 --> 00:39:31,359
an abstract matter evaluate policy

00:39:29,040 --> 00:39:33,040
that most likely than not you're going

00:39:31,359 --> 00:39:35,920
to use in kubernetes

00:39:33,040 --> 00:39:37,040
for your admission controllers right so

00:39:35,920 --> 00:39:39,280
you're going to be able to do

00:39:37,040 --> 00:39:42,800
authorization decisions

00:39:39,280 --> 00:39:44,320
the compliance operator evaluates

00:39:42,800 --> 00:39:45,359
compliance policy which is very

00:39:44,320 --> 00:39:47,760
different

00:39:45,359 --> 00:39:49,839
right so what we want to do is do i

00:39:47,760 --> 00:39:52,320
comply with this framework

00:39:49,839 --> 00:39:53,599
and give me a result about it and help

00:39:52,320 --> 00:39:55,440
me get there

00:39:53,599 --> 00:39:57,040
right so in reality they're quite

00:39:55,440 --> 00:40:00,000
different projects and

00:39:57,040 --> 00:40:01,280
we do see a world where the compliance

00:40:00,000 --> 00:40:04,240
operator could check

00:40:01,280 --> 00:40:05,839
that certain rules that opa expects are

00:40:04,240 --> 00:40:07,040
present in the cluster and thus allow

00:40:05,839 --> 00:40:09,520
you to comply

00:40:07,040 --> 00:40:10,400
using those rules right so we view them

00:40:09,520 --> 00:40:13,119
as

00:40:10,400 --> 00:40:13,440
projects that can coexist converge and

00:40:13,119 --> 00:40:16,319
give

00:40:13,440 --> 00:40:17,200
mutual value right they're not visually

00:40:16,319 --> 00:40:20,319
exclusive

00:40:17,200 --> 00:40:22,000
although and we do different things we

00:40:20,319 --> 00:40:24,319
also have gotten a lot of questions

00:40:22,000 --> 00:40:25,599
about can we use this in more previous

00:40:24,319 --> 00:40:29,280
versions right like

00:40:25,599 --> 00:40:32,640
4.3 and unfortunately the answer is no

00:40:29,280 --> 00:40:34,800
right due to uh one the testing due

00:40:32,640 --> 00:40:36,480
to the bandwidth that we have but three

00:40:34,800 --> 00:40:39,440
is just that we are using a little bit

00:40:36,480 --> 00:40:42,800
newer apis that didn't exist in 4.3

00:40:39,440 --> 00:40:43,920
so that's uh unfortunately not gonna be

00:40:42,800 --> 00:40:47,520
possible

00:40:43,920 --> 00:40:49,040
uh what about well uh even though uh

00:40:47,520 --> 00:40:50,960
the design that we have is fairly

00:40:49,040 --> 00:40:53,119
generic and you could possibly run

00:40:50,960 --> 00:40:55,040
content for rel

00:40:53,119 --> 00:40:57,520
again the fact is that mostly we've done

00:40:55,040 --> 00:41:01,599
done testing in core os

00:40:57,520 --> 00:41:04,640
right so that is what we're supporting

00:41:01,599 --> 00:41:05,280
and finally does the compliance operator

00:41:04,640 --> 00:41:08,000
make us

00:41:05,280 --> 00:41:08,640
compliant and the answer again is no

00:41:08,000 --> 00:41:09,920
right

00:41:08,640 --> 00:41:12,160
while there's a lot of stuff that you

00:41:09,920 --> 00:41:13,440
can automate with the compliance

00:41:12,160 --> 00:41:16,560
operator

00:41:13,440 --> 00:41:19,119
as jack mentioned some content is still

00:41:16,560 --> 00:41:21,040
being created and even when we have that

00:41:19,119 --> 00:41:22,560
content ready the fact is that

00:41:21,040 --> 00:41:24,960
there are things that you're gonna have

00:41:22,560 --> 00:41:26,800
to do by yourself for example we cannot

00:41:24,960 --> 00:41:28,000
force you to use a specific identity

00:41:26,800 --> 00:41:30,319
provider

00:41:28,000 --> 00:41:31,839
and to enable two-factor authentication

00:41:30,319 --> 00:41:33,119
in that identity provider right that's

00:41:31,839 --> 00:41:35,440
up to you

00:41:33,119 --> 00:41:37,839
right that's just one example but

00:41:35,440 --> 00:41:40,319
there's many more

00:41:37,839 --> 00:41:42,480
and so there is more to it than just an

00:41:40,319 --> 00:41:45,280
operator for compliance

00:41:42,480 --> 00:41:46,800
right and uh what's next uh there is

00:41:45,280 --> 00:41:48,640
still a lot of work to do

00:41:46,800 --> 00:41:51,119
mostly content though so we are going to

00:41:48,640 --> 00:41:53,520
be very busy writing content

00:41:51,119 --> 00:41:55,040
uh we are looking into the cis benchmark

00:41:53,520 --> 00:41:55,760
we are looking for more content for

00:41:55,040 --> 00:41:58,000
fedramp

00:41:55,760 --> 00:42:00,560
and there are more profiles out there so

00:41:58,000 --> 00:42:02,880
we're going to be doing a lot of that

00:42:00,560 --> 00:42:04,079
another one is that we are working a lot

00:42:02,880 --> 00:42:06,560
with the

00:42:04,079 --> 00:42:07,359
uh advanced cluster management team

00:42:06,560 --> 00:42:09,680
right so

00:42:07,359 --> 00:42:12,240
to enable the compliance operator there

00:42:09,680 --> 00:42:15,359
so we already are able to

00:42:12,240 --> 00:42:17,680
uh create policies

00:42:15,359 --> 00:42:19,040
with raccoon that will trigger policies

00:42:17,680 --> 00:42:21,359
from the compliance operator

00:42:19,040 --> 00:42:23,920
right so and give results to rackham

00:42:21,359 --> 00:42:27,599
right so you are able to say i want

00:42:23,920 --> 00:42:30,720
all of my managed clusters to be uh

00:42:27,599 --> 00:42:32,800
essentially compliant and you'll get

00:42:30,720 --> 00:42:35,359
results for it that is possible

00:42:32,800 --> 00:42:36,079
but uh it is not very granular right so

00:42:35,359 --> 00:42:37,680
it will tell you

00:42:36,079 --> 00:42:39,920
pass or fail but it won't tell you

00:42:37,680 --> 00:42:40,400
exactly what are all the checks that

00:42:39,920 --> 00:42:41,599
failed

00:42:40,400 --> 00:42:44,240
and that's something that we're working

00:42:41,599 --> 00:42:46,640
on right so that'll come in the future

00:42:44,240 --> 00:42:48,400
and finally we want to be also deployed

00:42:46,640 --> 00:42:50,560
by default by rackham

00:42:48,400 --> 00:42:51,839
which would be great but we're not there

00:42:50,560 --> 00:42:54,720
yet

00:42:51,839 --> 00:42:56,560
and uh that's it if you have any

00:42:54,720 --> 00:42:58,640
questions we'd be happy to answer them

00:42:56,560 --> 00:43:00,560
thanks a lot for joining our talk

00:42:58,640 --> 00:43:02,800
i'm sorry if it the demo got a little

00:43:00,560 --> 00:43:04,880
messy but uh we really appreciate

00:43:02,800 --> 00:43:07,599
you folks getting interested in this

00:43:04,880 --> 00:43:07,599
thank you so much

00:43:09,040 --> 00:43:13,200
we're gonna stick around for the

00:43:10,720 --> 00:43:27,839
questions though

00:43:13,200 --> 00:43:27,839
if there's any

00:43:52,839 --> 00:43:55,839
mm-hmm

00:44:00,560 --> 00:44:04,240
that we do have a question right now for

00:44:02,560 --> 00:44:06,640
from david duncan

00:44:04,240 --> 00:44:07,359
uh do we have any specific complaints

00:44:06,640 --> 00:44:10,720
targets

00:44:07,359 --> 00:44:13,839
in mind for the first support

00:44:10,720 --> 00:44:18,319
right and uh we are going to be looking

00:44:13,839 --> 00:44:21,599
into cis and fedramp

00:44:18,319 --> 00:44:23,359
right uh fedramp is a huge huge

00:44:21,599 --> 00:44:25,280
compliance benchmark so that'll take a

00:44:23,359 --> 00:44:28,000
while but

00:44:25,280 --> 00:44:30,079
cis is not as much so that's what we're

00:44:28,000 --> 00:44:32,240
going to be looking at first

00:44:30,079 --> 00:44:34,480
unfortunately that's not going to be

00:44:32,240 --> 00:44:36,319
available in the first first release

00:44:34,480 --> 00:44:37,839
but as we mentioned in the presentation

00:44:36,319 --> 00:44:41,200
you can get updates

00:44:37,839 --> 00:44:42,800
out of band for your content right so

00:44:41,200 --> 00:44:44,800
at any time that there's newer content

00:44:42,800 --> 00:44:47,839
you can just fetch it with the operator

00:44:44,800 --> 00:44:51,839
and uh that'll that'll just come

00:44:47,839 --> 00:44:51,839
it'll be fairly seamless to that extent

00:45:09,359 --> 00:45:15,040
so um this you can handle one time

00:45:13,520 --> 00:45:17,040
i think we don't have too much time left

00:45:15,040 --> 00:45:19,440
there is a link to a breakout room

00:45:17,040 --> 00:45:20,079
where we can continue discussion if more

00:45:19,440 --> 00:45:22,400
q a

00:45:20,079 --> 00:45:23,920
questions come up so um or you can

00:45:22,400 --> 00:45:26,400
continue discussing in this track chat

00:45:23,920 --> 00:45:29,920
as well uh which one you prefer

00:45:26,400 --> 00:45:33,520
um thanks again for your time folks

00:45:29,920 --> 00:45:33,520

YouTube URL: https://www.youtube.com/watch?v=Q7t9l_kz3bY


