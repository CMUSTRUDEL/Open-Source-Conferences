Title: oVirt System Tests Using Lago
Publication date: 2020-10-06
Playlist: DevConfUS 2020
Description: 
	Speaker: Parth Dhanjal

I'll be focusing on how Lago can be used to spin up infrastructures on very minimal resources(just your laptop is enough) and perform end-to-end testings.
I'll start with a small introduction to testing frameworks and continue to how lago works and how you can define your environment needed for testing.
A brief explanation about ovirt-system-tests, what different test_suites are currently included, how to run an ovirt-system-test instance and then interact with the environment once it is up and running.
Closing with a small preview about how ovirt-system-tests are used for CI automation.
Captions: 
	00:00:00,880 --> 00:00:06,720
hello everyone i am bad answer

00:00:03,760 --> 00:00:08,080
i work with red heart india and today i

00:00:06,720 --> 00:00:11,519
am going to talk about

00:00:08,080 --> 00:00:13,200
overt system tests using logo so before

00:00:11,519 --> 00:00:16,160
beginning i would just like to

00:00:13,200 --> 00:00:16,720
cover what is laco and after which i

00:00:16,160 --> 00:00:19,840
will be

00:00:16,720 --> 00:00:22,000
explaining uh a little about red hat

00:00:19,840 --> 00:00:25,599
hyper converged infrastructure

00:00:22,000 --> 00:00:26,240
uh on top of which we run over system

00:00:25,599 --> 00:00:28,720
tests

00:00:26,240 --> 00:00:29,599
and how do we recreate uh the

00:00:28,720 --> 00:00:33,040
hyper-converged

00:00:29,599 --> 00:00:36,800
infrastructure using logo so what

00:00:33,040 --> 00:00:39,200
is logo logo is an ad hoc virtual in

00:00:36,800 --> 00:00:40,000
framework which can help you build

00:00:39,200 --> 00:00:42,239
virtualized

00:00:40,000 --> 00:00:43,440
environments on your laptop or your

00:00:42,239 --> 00:00:46,559
server

00:00:43,440 --> 00:00:49,840
this can be for any use case for and

00:00:46,559 --> 00:00:52,079
it uses bigboard to create vms

00:00:49,840 --> 00:00:52,879
you can use this plugin to create the

00:00:52,079 --> 00:00:56,559
setup you need

00:00:52,879 --> 00:01:00,480
very easily be it for

00:00:56,559 --> 00:01:04,320
deployment development automated testing

00:01:00,480 --> 00:01:04,320
regression or for pipelining

00:01:10,400 --> 00:01:14,400
we can divide testing into three broad

00:01:13,200 --> 00:01:16,560
categories

00:01:14,400 --> 00:01:18,159
starting with unit tests which is

00:01:16,560 --> 00:01:19,520
basically isolating the smallest

00:01:18,159 --> 00:01:22,799
functionality to perform

00:01:19,520 --> 00:01:25,520
a test on do a functional test

00:01:22,799 --> 00:01:26,080
which implies that we need to test a

00:01:25,520 --> 00:01:30,479
specific

00:01:26,080 --> 00:01:32,720
component of the system and

00:01:30,479 --> 00:01:33,600
the system test which as the name

00:01:32,720 --> 00:01:37,040
suspects

00:01:33,600 --> 00:01:39,360
we need to test a whole system from end

00:01:37,040 --> 00:01:43,119
to end starting from deployment

00:01:39,360 --> 00:01:45,280
to its users to a point where

00:01:43,119 --> 00:01:47,200
we are getting the expected results or

00:01:45,280 --> 00:01:49,439
not

00:01:47,200 --> 00:01:50,479
lagoon helps us to create tests on top

00:01:49,439 --> 00:01:52,560
of

00:01:50,479 --> 00:01:55,520
which we can run unit and functional

00:01:52,560 --> 00:01:56,640
tests so lago basically is a system

00:01:55,520 --> 00:01:58,799
testing tool

00:01:56,640 --> 00:02:01,119
on which we can be done unit and

00:01:58,799 --> 00:02:03,520
functional tests

00:02:01,119 --> 00:02:05,200
setting or setting up a lag environment

00:02:03,520 --> 00:02:07,280
is rather simple

00:02:05,200 --> 00:02:09,280
you can define your requirements through

00:02:07,280 --> 00:02:12,400
a largo init file

00:02:09,280 --> 00:02:15,680
which is written in gamma format the

00:02:12,400 --> 00:02:18,640
init file contains two sections domains

00:02:15,680 --> 00:02:19,760
and net you can define your virtual

00:02:18,640 --> 00:02:22,800
machines

00:02:19,760 --> 00:02:25,920
or hosts you wish to replicate

00:02:22,800 --> 00:02:30,000
under domains and the network topology

00:02:25,920 --> 00:02:33,440
underneath when you add a nic to a vm

00:02:30,000 --> 00:02:36,560
it must be defined under here that is

00:02:33,440 --> 00:02:38,640
under the net part of the aml file

00:02:36,560 --> 00:02:41,840
and all the virtual machines need to be

00:02:38,640 --> 00:02:41,840
defined under domain

00:02:43,760 --> 00:02:47,440
we can define the logo on it file as per

00:02:46,239 --> 00:02:49,519
our requirement

00:02:47,440 --> 00:02:51,280
and simply run logo to create that

00:02:49,519 --> 00:02:53,360
environment

00:02:51,280 --> 00:02:54,959
the environment is saved on a disk as a

00:02:53,360 --> 00:02:57,920
qqr2 image

00:02:54,959 --> 00:02:58,879
and you can start stop or pause images

00:02:57,920 --> 00:03:01,840
and destroy

00:02:58,879 --> 00:03:05,519
them as per your need or as your testing

00:03:01,840 --> 00:03:08,560
is completed

00:03:05,519 --> 00:03:12,010
so now coming to red hat hyper converge

00:03:08,560 --> 00:03:14,319
infrastructure or right for short

00:03:12,010 --> 00:03:16,720
[Music]

00:03:14,319 --> 00:03:18,239
an example of system tests on nago is

00:03:16,720 --> 00:03:22,400
perfectly encompassed

00:03:18,239 --> 00:03:24,799
by the over system tests for rai

00:03:22,400 --> 00:03:25,760
rai setup requires a minimum of three

00:03:24,799 --> 00:03:28,239
hosts

00:03:25,760 --> 00:03:28,959
with nested virtualization capabilities

00:03:28,239 --> 00:03:31,200
so that

00:03:28,959 --> 00:03:32,480
it can run vms on top of these three

00:03:31,200 --> 00:03:34,720
hosts

00:03:32,480 --> 00:03:36,640
now to test this setup rather than using

00:03:34,720 --> 00:03:40,879
three different machines

00:03:36,640 --> 00:03:44,159
to re-enact the setup we simply use

00:03:40,879 --> 00:03:46,400
lago to recreate our required hosts

00:03:44,159 --> 00:03:48,560
on top of which on top of these three

00:03:46,400 --> 00:03:49,360
vms we recreate the virtual machines

00:03:48,560 --> 00:03:52,720
which would

00:03:49,360 --> 00:03:56,959
have been in the hosts instead

00:03:52,720 --> 00:03:59,040
they are within another virtual machine

00:03:56,959 --> 00:04:00,080
and we can simply run this from our

00:03:59,040 --> 00:04:03,200
laptop

00:04:00,080 --> 00:04:03,840
or a small server which ensures that we

00:04:03,200 --> 00:04:06,159
do not

00:04:03,840 --> 00:04:08,400
use a lot of resource and we do not

00:04:06,159 --> 00:04:11,439
waste our valuable resource on

00:04:08,400 --> 00:04:14,879
testing and rather we we have resource

00:04:11,439 --> 00:04:18,400
available for development

00:04:14,879 --> 00:04:21,759
so our right setup basically needs

00:04:18,400 --> 00:04:23,199
three vms and on top of which on one of

00:04:21,759 --> 00:04:26,880
the vms we have another

00:04:23,199 --> 00:04:29,759
hosted engine or overt engine vm which

00:04:26,880 --> 00:04:31,600
which can run tests we generally have

00:04:29,759 --> 00:04:35,280
gluster storage at the bottom

00:04:31,600 --> 00:04:35,280
and on top there is overt

00:04:36,320 --> 00:04:40,960
after setting up a mock rye environment

00:04:38,960 --> 00:04:42,400
we can run tests on the recreated

00:04:40,960 --> 00:04:44,880
systems

00:04:42,400 --> 00:04:46,479
over this system test is a framework

00:04:44,880 --> 00:04:49,040
written in python

00:04:46,479 --> 00:04:51,360
which helps automating these tests and

00:04:49,040 --> 00:04:55,040
covering multiple cases

00:04:51,360 --> 00:04:57,520
it uses the python sdk provided by overt

00:04:55,040 --> 00:04:59,440
to automate the test cases and complete

00:04:57,520 --> 00:05:01,520
the test cases with minimum hardware

00:04:59,440 --> 00:05:03,520
requirements

00:05:01,520 --> 00:05:04,960
the tests are broadly divided into two

00:05:03,520 --> 00:05:07,280
categories

00:05:04,960 --> 00:05:10,160
one are the bootstrap tests that are

00:05:07,280 --> 00:05:12,479
that are the tests which are required

00:05:10,160 --> 00:05:13,440
for our during the setup are are the

00:05:12,479 --> 00:05:16,479
base

00:05:13,440 --> 00:05:17,919
baseline setups and on top of those are

00:05:16,479 --> 00:05:21,039
the functional tests

00:05:17,919 --> 00:05:25,840
that is the expected result

00:05:21,039 --> 00:05:25,840
for when a setup is completed

00:05:25,919 --> 00:05:32,880
we can also automate this logo process

00:05:29,280 --> 00:05:35,039
by using overt system tests we can just

00:05:32,880 --> 00:05:37,199
define a bash file

00:05:35,039 --> 00:05:39,199
which here is represented by the control

00:05:37,199 --> 00:05:43,440
dot sh

00:05:39,199 --> 00:05:43,440
and i'm sorry about that

00:05:43,520 --> 00:05:47,120
which is represented here by the control

00:05:45,360 --> 00:05:49,600
dot sh

00:05:47,120 --> 00:05:50,320
and in in here we can also define a

00:05:49,600 --> 00:05:53,280
reposing

00:05:50,320 --> 00:05:53,919
file which basically ensures that you

00:05:53,280 --> 00:05:57,440
download

00:05:53,919 --> 00:05:57,919
the needed packages only and you save

00:05:57,440 --> 00:06:00,800
space

00:05:57,919 --> 00:06:03,360
by excluding the packages which are not

00:06:00,800 --> 00:06:05,600
required or which are not necessary

00:06:03,360 --> 00:06:07,199
so you do not waste bandwidth on

00:06:05,600 --> 00:06:09,440
downloading packages

00:06:07,199 --> 00:06:11,520
every time you test and the reposing

00:06:09,440 --> 00:06:13,520
file actually downloads the packages and

00:06:11,520 --> 00:06:14,960
stores them on your local system or your

00:06:13,520 --> 00:06:17,919
local server

00:06:14,960 --> 00:06:18,720
so that you do not have to download them

00:06:17,919 --> 00:06:22,160
again and again

00:06:18,720 --> 00:06:24,400
and rather only once before starting the

00:06:22,160 --> 00:06:24,880
test and in case you happen to delete

00:06:24,400 --> 00:06:27,919
them

00:06:24,880 --> 00:06:29,520
then again it will download after

00:06:27,919 --> 00:06:30,080
downloading the repos to your local

00:06:29,520 --> 00:06:32,479
system

00:06:30,080 --> 00:06:34,400
and deploying the vms you can copy the

00:06:32,479 --> 00:06:37,520
reports to the vm

00:06:34,400 --> 00:06:40,639
as discussed earlier lagoinet file

00:06:37,520 --> 00:06:43,280
is used to define your vms and network

00:06:40,639 --> 00:06:43,280
topology

00:06:44,400 --> 00:06:50,400
and then coming to how specifically rai

00:06:47,600 --> 00:06:51,360
is set up firstly we have to create

00:06:50,400 --> 00:06:53,919
three vms

00:06:51,360 --> 00:06:55,120
and after that we set up passwordless

00:06:53,919 --> 00:06:57,520
ssh

00:06:55,120 --> 00:06:58,560
because we use ansible in the background

00:06:57,520 --> 00:07:00,240
to automate

00:06:58,560 --> 00:07:02,479
our right deployment so we need the

00:07:00,240 --> 00:07:05,680
password this ss setup

00:07:02,479 --> 00:07:08,960
between all the three hosts

00:07:05,680 --> 00:07:08,960
and and the engine

00:07:09,520 --> 00:07:13,120
then using ansible we deploy the setup

00:07:12,240 --> 00:07:15,919
on top of

00:07:13,120 --> 00:07:17,680
these three vms firstly it creates

00:07:15,919 --> 00:07:20,560
cluster storage setup

00:07:17,680 --> 00:07:21,199
then it deploys the over hosted engine

00:07:20,560 --> 00:07:25,039
and

00:07:21,199 --> 00:07:28,880
then it adds this hosted engine vm

00:07:25,039 --> 00:07:30,000
to one of the host vms once the setup is

00:07:28,880 --> 00:07:32,479
complete

00:07:30,000 --> 00:07:34,080
the pre-checks are done it is followed

00:07:32,479 --> 00:07:37,520
by the bootstrap tests

00:07:34,080 --> 00:07:38,880
which is run by overt system test or ost

00:07:37,520 --> 00:07:41,440
for short

00:07:38,880 --> 00:07:44,400
once the bootstrap tests are completed

00:07:41,440 --> 00:07:47,520
then it runs the functionality tests

00:07:44,400 --> 00:07:48,960
and once that result is completed it

00:07:47,520 --> 00:07:52,160
gives us a

00:07:48,960 --> 00:07:52,560
all good or all test pass sign or else

00:07:52,160 --> 00:07:54,319
it will

00:07:52,560 --> 00:07:58,560
tell us where the test is failing and

00:07:54,319 --> 00:08:01,840
what error exactly is it facing we can

00:07:58,560 --> 00:08:02,720
also use jenkins ci to pipeline pipeline

00:08:01,840 --> 00:08:04,720
these tests

00:08:02,720 --> 00:08:06,000
to run automatically at a regular

00:08:04,720 --> 00:08:08,879
interval or

00:08:06,000 --> 00:08:09,360
every time a patch is pushed so we have

00:08:08,879 --> 00:08:12,000
our

00:08:09,360 --> 00:08:14,879
jenkins set up for overt this is for

00:08:12,000 --> 00:08:17,440
multiple projects and one

00:08:14,879 --> 00:08:18,560
not just pry or a hyper convention

00:08:17,440 --> 00:08:22,240
infrastructure

00:08:18,560 --> 00:08:25,360
this is for rev over over testing

00:08:22,240 --> 00:08:26,800
only hosted engine testing and even for

00:08:25,360 --> 00:08:29,919
other components

00:08:26,800 --> 00:08:32,719
so here you can see at the bottom

00:08:29,919 --> 00:08:33,279
on the last four tests had failed and we

00:08:32,719 --> 00:08:34,880
have

00:08:33,279 --> 00:08:36,880
we were trying to debug after these

00:08:34,880 --> 00:08:38,159
failures and before that it was

00:08:36,880 --> 00:08:40,640
regularly passing

00:08:38,159 --> 00:08:41,760
here we can also see that we have

00:08:40,640 --> 00:08:44,560
multiple

00:08:41,760 --> 00:08:45,440
parameters we can build it with a custom

00:08:44,560 --> 00:08:49,040
repose

00:08:45,440 --> 00:08:52,160
or we can simply rebuild the last and ah

00:08:49,040 --> 00:08:53,680
if you if you can see the time you can

00:08:52,160 --> 00:08:57,519
see that we have triggered it

00:08:53,680 --> 00:08:59,440
for every day at a particular time and

00:08:57,519 --> 00:09:01,120
whenever the test is complete it

00:08:59,440 --> 00:09:04,000
triggers an email to everybody whether

00:09:01,120 --> 00:09:04,000
it fails or pass

00:09:04,560 --> 00:09:10,000
so as i was mentioning jenkins can be

00:09:07,360 --> 00:09:11,519
run using custom parameters as well

00:09:10,000 --> 00:09:14,080
in case you wish to test for a

00:09:11,519 --> 00:09:15,519
particular patch on an updated custom

00:09:14,080 --> 00:09:18,800
repo

00:09:15,519 --> 00:09:22,480
you can directly mention your uh get it

00:09:18,800 --> 00:09:25,680
patch over here and provide the

00:09:22,480 --> 00:09:27,839
right path it will test for that patch

00:09:25,680 --> 00:09:30,399
you can create custom repose and add it

00:09:27,839 --> 00:09:30,399
over here

00:09:32,080 --> 00:09:36,000
so thank you so much for your time and

00:09:34,000 --> 00:09:39,200
patience in case you wish to

00:09:36,000 --> 00:09:42,480
read more about largo or ost you can

00:09:39,200 --> 00:09:42,480
follow these two links

00:09:43,519 --> 00:09:49,839
if you wish to contribute words over osd

00:09:46,560 --> 00:09:51,200
over system test you can continue to

00:09:49,839 --> 00:09:54,080
this link

00:09:51,200 --> 00:09:55,200
or this link where it can basically

00:09:54,080 --> 00:09:58,640
guide you how to start

00:09:55,200 --> 00:10:01,360
over sorry for that

00:09:58,640 --> 00:10:02,640
you can uh check out the over dashboard

00:10:01,360 --> 00:10:04,399
over here

00:10:02,640 --> 00:10:07,760
and you can read about red hat hyper

00:10:04,399 --> 00:10:10,959
converge infrastructure over here

00:10:07,760 --> 00:10:14,320
so now i'm going to show a small demo

00:10:10,959 --> 00:10:17,600
for uh how to deploy

00:10:14,320 --> 00:10:19,839
ost using lago how to deploy

00:10:17,600 --> 00:10:21,519
hyper converged infrastructure using

00:10:19,839 --> 00:10:25,920
lagos specifically

00:10:21,519 --> 00:10:28,000
so i think i am on a server

00:10:25,920 --> 00:10:29,200
on which i have installed the required

00:10:28,000 --> 00:10:32,240
packages for

00:10:29,200 --> 00:10:34,240
os for osg and

00:10:32,240 --> 00:10:35,279
right now i am i am starting a mock

00:10:34,240 --> 00:10:38,320
session

00:10:35,279 --> 00:10:40,320
uh so that it's easier to

00:10:38,320 --> 00:10:42,320
deploy on top of mock you do not have to

00:10:40,320 --> 00:10:46,560
do this but in case you

00:10:42,320 --> 00:10:48,560
feel like you can use a mock session

00:10:46,560 --> 00:10:50,000
right now the mock as you can see it's

00:10:48,560 --> 00:10:54,480
installing

00:10:50,000 --> 00:10:57,760
apple 7 and it's going to take some time

00:10:54,480 --> 00:10:59,279
so let's skip ahead to once it is done

00:10:57,760 --> 00:11:03,600
and i will show you how

00:10:59,279 --> 00:11:06,079
to deploy osd with this the simplest

00:11:03,600 --> 00:11:06,880
so now as you can see mock runner is

00:11:06,079 --> 00:11:10,079
complete

00:11:06,880 --> 00:11:12,240
it's running we'll just

00:11:10,079 --> 00:11:13,440
go to the directory where we have our

00:11:12,240 --> 00:11:16,640
tests

00:11:13,440 --> 00:11:17,519
and run the command from under source

00:11:16,640 --> 00:11:20,720
who dot

00:11:17,519 --> 00:11:22,720
shell followed by the

00:11:20,720 --> 00:11:25,120
suit which we wish to run as i am

00:11:22,720 --> 00:11:28,880
planning to run etsy basic suit master

00:11:25,120 --> 00:11:32,959
i am going to deploy that and simply

00:11:28,880 --> 00:11:35,200
press enter ansible will do its work

00:11:32,959 --> 00:11:36,640
uh shell script will shell script

00:11:35,200 --> 00:11:39,279
firstly will start

00:11:36,640 --> 00:11:40,880
and it will find if the environment is

00:11:39,279 --> 00:11:43,600
there if there is a pre-existing

00:11:40,880 --> 00:11:45,279
environment it will ask you to clean it

00:11:43,600 --> 00:11:47,040
in case not then it will look for the

00:11:45,279 --> 00:11:48,800
reports which are downloaded locally

00:11:47,040 --> 00:11:52,079
here you can see

00:11:48,800 --> 00:11:55,279
the lago init file is available and

00:11:52,079 --> 00:11:58,160
the lago in it file our description

00:11:55,279 --> 00:11:59,680
can be seen here how we have described

00:11:58,160 --> 00:12:04,079
three different machines

00:11:59,680 --> 00:12:05,120
and after that we can see that it's

00:12:04,079 --> 00:12:08,240
downloading

00:12:05,120 --> 00:12:11,680
the required packages

00:12:08,240 --> 00:12:16,560
and now it has it is creating disks

00:12:11,680 --> 00:12:19,920
and uh after for each vm you can see

00:12:16,560 --> 00:12:22,639
what all has passed and here

00:12:19,920 --> 00:12:25,600
we can see that uh engine vms is success

00:12:22,639 --> 00:12:27,519
so it's now just uh

00:12:25,600 --> 00:12:29,760
deploying all the vms this will again

00:12:27,519 --> 00:12:32,240
take a little while in case this is the

00:12:29,760 --> 00:12:35,279
first run it might take even longer

00:12:32,240 --> 00:12:36,320
since it has to download the required

00:12:35,279 --> 00:12:38,560
repos

00:12:36,320 --> 00:12:40,560
and store it on your local system first

00:12:38,560 --> 00:12:42,240
and then it will copy it to the vms

00:12:40,560 --> 00:12:44,560
after they are created

00:12:42,240 --> 00:12:46,639
so i will though even though i have

00:12:44,560 --> 00:12:48,639
reports it will still take time to spin

00:12:46,639 --> 00:12:51,200
up the vm images

00:12:48,639 --> 00:12:52,320
so i'll just stop the recording here for

00:12:51,200 --> 00:12:55,760
a while and

00:12:52,320 --> 00:12:55,760
once my

00:12:56,560 --> 00:13:00,800
environment is deployed i will start it

00:12:59,279 --> 00:13:02,880
again and i will show you

00:13:00,800 --> 00:13:04,560
in case something important comes up in

00:13:02,880 --> 00:13:06,639
between

00:13:04,560 --> 00:13:07,760
now we will do a quick uh code

00:13:06,639 --> 00:13:09,839
walkthrough

00:13:07,760 --> 00:13:10,800
you can get the project from get a dot

00:13:09,839 --> 00:13:12,800
over dot or

00:13:10,800 --> 00:13:14,320
kind of projects you can look for over

00:13:12,800 --> 00:13:17,760
system tests

00:13:14,320 --> 00:13:20,160
and you can clone the project from here

00:13:17,760 --> 00:13:21,760
after cloning the project if you open i

00:13:20,160 --> 00:13:25,519
will i will actually

00:13:21,760 --> 00:13:29,279
uh particularly look at

00:13:25,519 --> 00:13:31,519
the etsy basic suit master and

00:13:29,279 --> 00:13:32,800
in case you feel like going through

00:13:31,519 --> 00:13:36,160
something else you can

00:13:32,800 --> 00:13:38,639
there are based on the same concept

00:13:36,160 --> 00:13:41,519
so firstly has the most important file

00:13:38,639 --> 00:13:45,760
which is the control dot

00:13:41,519 --> 00:13:49,040
sh file as you can see firstly

00:13:45,760 --> 00:13:53,040
it copies the config file

00:13:49,040 --> 00:13:53,040
and then it copies the repo file

00:13:55,120 --> 00:14:02,240
into the vms and then it deploys

00:13:58,160 --> 00:14:05,360
our environment on top of that

00:14:02,240 --> 00:14:08,800
and under here you can see that it's

00:14:05,360 --> 00:14:12,079
copying from your local

00:14:08,800 --> 00:14:13,839
run to the vm stamp

00:14:12,079 --> 00:14:16,000
and from here you can again see from

00:14:13,839 --> 00:14:16,720
your local where it says the reposing

00:14:16,000 --> 00:14:20,800
file it is

00:14:16,720 --> 00:14:23,120
uh copying it to the vmgtcm.repost

00:14:20,800 --> 00:14:24,320
now it is uh setting up passwordless

00:14:23,120 --> 00:14:27,760
search which was the

00:14:24,320 --> 00:14:30,959
initial step required to allow ansible

00:14:27,760 --> 00:14:33,120
access ansible root access then it's

00:14:30,959 --> 00:14:36,240
running the automated deployment through

00:14:33,120 --> 00:14:40,160
ansible itself and

00:14:36,240 --> 00:14:43,279
after that it starts running the test

00:14:40,160 --> 00:14:46,639
which is the test suit which we have

00:14:43,279 --> 00:14:47,680
and to run that we need uh to install

00:14:46,639 --> 00:14:51,040
pip

00:14:47,680 --> 00:14:54,639
and we need to install uh libguest fs

00:14:51,040 --> 00:14:55,199
and we need to install a few a few other

00:14:54,639 --> 00:14:58,000
things

00:14:55,199 --> 00:14:58,720
which are mentioned in the rpms which is

00:14:58,000 --> 00:15:01,519
available

00:14:58,720 --> 00:15:03,360
and from there we just start running the

00:15:01,519 --> 00:15:04,160
test which we have listed in one of the

00:15:03,360 --> 00:15:06,399
files

00:15:04,160 --> 00:15:07,360
which i will show you again and you can

00:15:06,399 --> 00:15:09,199
just uh

00:15:07,360 --> 00:15:10,880
run test it goes through each test in

00:15:09,199 --> 00:15:13,440
case any test fails

00:15:10,880 --> 00:15:16,000
the test stops there and reports that it

00:15:13,440 --> 00:15:16,000
has failed

00:15:16,160 --> 00:15:22,000
under uh execute playbook

00:15:19,440 --> 00:15:22,560
we have actually defined how we are

00:15:22,000 --> 00:15:25,760
going to

00:15:22,560 --> 00:15:26,720
automate the ansible deployment uh using

00:15:25,760 --> 00:15:29,519
shell script

00:15:26,720 --> 00:15:30,399
we just provided the path under which

00:15:29,519 --> 00:15:32,880
ansible

00:15:30,399 --> 00:15:33,920
achievable hyper-converged rangeable

00:15:32,880 --> 00:15:36,399
deployment files

00:15:33,920 --> 00:15:38,800
are available and we have provided a

00:15:36,399 --> 00:15:42,399
path to the playbook

00:15:38,800 --> 00:15:45,920
we have saved a copy of playbook in this

00:15:42,399 --> 00:15:50,639
folder which we copy to the vms

00:15:45,920 --> 00:15:53,519
before the execution and

00:15:50,639 --> 00:15:54,399
you can see this is the host inventory

00:15:53,519 --> 00:15:57,839
file

00:15:54,399 --> 00:16:00,880
and here host

00:15:57,839 --> 00:16:05,680
0 and other variables

00:16:00,880 --> 00:16:05,680
are replaced according to the deployment

00:16:06,240 --> 00:16:10,639
this is the lago init file uh which you

00:16:09,040 --> 00:16:12,959
can see firstly we have defined the

00:16:10,639 --> 00:16:16,800
domain

00:16:12,959 --> 00:16:19,519
and under domains first is inch

00:16:16,800 --> 00:16:21,360
under engine we have defined nick where

00:16:19,519 --> 00:16:22,320
we have provided the network interface

00:16:21,360 --> 00:16:25,360
for this

00:16:22,320 --> 00:16:26,639
and again we have defined three hosts as

00:16:25,360 --> 00:16:27,759
that's what we require for our

00:16:26,639 --> 00:16:30,079
deployment and

00:16:27,759 --> 00:16:32,560
again for those we have defined a

00:16:30,079 --> 00:16:32,560
network

00:16:34,320 --> 00:16:40,399
and these are some files required uh

00:16:37,600 --> 00:16:41,440
this is this is the file required by uh

00:16:40,399 --> 00:16:43,839
he deployment

00:16:41,440 --> 00:16:45,120
is required for he deployment this is

00:16:43,839 --> 00:16:48,240
the depo file

00:16:45,120 --> 00:16:49,920
uh which we save and we download these

00:16:48,240 --> 00:16:50,880
repos locally on our system and then

00:16:49,920 --> 00:16:53,519
copy them

00:16:50,880 --> 00:16:55,199
there are the various repo files we need

00:16:53,519 --> 00:16:59,199
and this is the setup

00:16:55,199 --> 00:17:02,320
uh which is required to do pre

00:16:59,199 --> 00:17:04,480
pre ansible insta pre-ansible run

00:17:02,320 --> 00:17:06,559
so that there are no interruptions here

00:17:04,480 --> 00:17:08,000
we are installing the basic packages

00:17:06,559 --> 00:17:10,319
needed on the host

00:17:08,000 --> 00:17:12,400
uh which is ansible cluster ansible

00:17:10,319 --> 00:17:15,600
roles overtoasted engine

00:17:12,400 --> 00:17:19,280
setup or transable repositories

00:17:15,600 --> 00:17:21,199
and ansible engine setup you can

00:17:19,280 --> 00:17:22,959
enable them through these reports you

00:17:21,199 --> 00:17:25,280
can include them in the repo

00:17:22,959 --> 00:17:27,199
and then you can install them from here

00:17:25,280 --> 00:17:27,839
here we have the templates available

00:17:27,199 --> 00:17:30,240
since we

00:17:27,839 --> 00:17:31,120
are running let's see basic suit master

00:17:30,240 --> 00:17:36,000
on top of

00:17:31,120 --> 00:17:38,080
eight two so we use the 82 base

00:17:36,000 --> 00:17:40,160
and similarly you can have a look at

00:17:38,080 --> 00:17:41,200
other suits also there's basic suit

00:17:40,160 --> 00:17:43,760
available

00:17:41,200 --> 00:17:45,760
for running uh just high uh he engine

00:17:43,760 --> 00:17:48,160
and then there is an he basic suit also

00:17:45,760 --> 00:17:48,160
available

00:17:50,000 --> 00:17:56,160
now we have some more the major tests

00:17:53,120 --> 00:17:59,280
uh which we have divided for a

00:17:56,160 --> 00:18:01,760
hyper converged basic suit are into two

00:17:59,280 --> 00:18:05,039
parts one is the bootstrap test this is

00:18:01,760 --> 00:18:08,320
the tests which are done to check

00:18:05,039 --> 00:18:10,000
that the deployment has been successful

00:18:08,320 --> 00:18:11,360
and there are no errors to the

00:18:10,000 --> 00:18:14,000
deployment so

00:18:11,360 --> 00:18:15,200
we perform first basic functionality

00:18:14,000 --> 00:18:17,280
test and then

00:18:15,200 --> 00:18:18,240
we have a basic sanity test which

00:18:17,280 --> 00:18:22,080
performs uh

00:18:18,240 --> 00:18:24,799
other tests uh which are

00:18:22,080 --> 00:18:26,240
that is uh a day two tests as we like to

00:18:24,799 --> 00:18:29,919
call them that once you're

00:18:26,240 --> 00:18:32,240
uh deployment is successful

00:18:29,919 --> 00:18:33,280
we have to create new vms add new

00:18:32,240 --> 00:18:36,080
networks

00:18:33,280 --> 00:18:36,880
whatever will be required to maintain

00:18:36,080 --> 00:18:40,000
the

00:18:36,880 --> 00:18:40,799
setup so we have these tests defined

00:18:40,000 --> 00:18:44,320
over

00:18:40,799 --> 00:18:48,960
in these two files which are basically

00:18:44,320 --> 00:18:52,240
python files which use python libraries

00:18:48,960 --> 00:18:55,120
and overtest sdk api

00:18:52,240 --> 00:18:56,000
to run the tests as you can see some of

00:18:55,120 --> 00:18:58,160
the test examples

00:18:56,000 --> 00:18:59,679
here we are trying to check that the

00:18:58,160 --> 00:19:02,799
host type is

00:18:59,679 --> 00:19:05,120
uh are available we are trying to check

00:19:02,799 --> 00:19:07,760
that the hosts are in data center

00:19:05,120 --> 00:19:10,400
and then we are trying to uh restart the

00:19:07,760 --> 00:19:11,360
engine and wait for the engine now we

00:19:10,400 --> 00:19:13,520
are trying to

00:19:11,360 --> 00:19:15,840
install cockpit over it which is

00:19:13,520 --> 00:19:18,960
basically a ui plug-in

00:19:15,840 --> 00:19:20,880
trying to add storage domain

00:19:18,960 --> 00:19:24,240
and then we are trying to add different

00:19:20,880 --> 00:19:29,120
storage domains here

00:19:24,240 --> 00:19:31,520
and all of these tests are basically

00:19:29,120 --> 00:19:34,400
run over here at the end which is

00:19:31,520 --> 00:19:34,400
through the test list

00:19:35,120 --> 00:19:41,919
there is a particular instance

00:19:38,559 --> 00:19:45,280
in the control file which runs

00:19:41,919 --> 00:19:50,480
these tests as you can see we have

00:19:45,280 --> 00:19:54,240
we are collecting the test list and

00:19:50,480 --> 00:19:56,640
from each suit we are passing the test

00:19:54,240 --> 00:19:58,160
in from test scenarios and we are

00:19:56,640 --> 00:20:01,360
running each test

00:19:58,160 --> 00:20:02,559
and once these test passes then we move

00:20:01,360 --> 00:20:04,880
forward

00:20:02,559 --> 00:20:06,000
so these are the tests which we perform

00:20:04,880 --> 00:20:09,760
first

00:20:06,000 --> 00:20:13,039
and uh followed by these tests over here

00:20:09,760 --> 00:20:13,039
a few of the tests in

00:20:13,679 --> 00:20:17,600
basic sanity suit are adding a new blank

00:20:16,400 --> 00:20:20,720
vm

00:20:17,600 --> 00:20:23,760
adding disks to vm adding a

00:20:20,720 --> 00:20:27,440
direct direct learn

00:20:23,760 --> 00:20:28,480
snapshotting snapshots adding vm

00:20:27,440 --> 00:20:31,919
templates

00:20:28,480 --> 00:20:35,200
running vms migrating vms

00:20:31,919 --> 00:20:38,320
and again

00:20:35,200 --> 00:20:42,000
live merge snapshot and

00:20:38,320 --> 00:20:44,320
so on so forth other than that we have a

00:20:42,000 --> 00:20:44,720
vars file which basically defines how

00:20:44,320 --> 00:20:48,080
many

00:20:44,720 --> 00:20:51,600
hosts we need if you look at our lago

00:20:48,080 --> 00:20:52,559
file uh we do not redefine the number of

00:20:51,600 --> 00:20:54,640
hosts as the

00:20:52,559 --> 00:20:56,400
as the hosts are similar and the only

00:20:54,640 --> 00:20:59,679
difference in these hosts

00:20:56,400 --> 00:21:02,960
will be the host name

00:20:59,679 --> 00:21:05,280
and the ip assigned to them so

00:21:02,960 --> 00:21:06,240
we just have to find a small variable

00:21:05,280 --> 00:21:09,360
over here which

00:21:06,240 --> 00:21:11,520
counts our host in case uh any day we

00:21:09,360 --> 00:21:12,240
wish to do a six node deployment we can

00:21:11,520 --> 00:21:16,080
change this

00:21:12,240 --> 00:21:19,600
and do a signal deployment as well

00:21:16,080 --> 00:21:21,280
so now uh that my environment is

00:21:19,600 --> 00:21:23,360
deployed i'll just quickly run through

00:21:21,280 --> 00:21:26,559
what all has happened

00:21:23,360 --> 00:21:29,120
as you can see this is ansible log so uh

00:21:26,559 --> 00:21:31,840
since i'm not discussing that i'll just

00:21:29,120 --> 00:21:34,000
not deep dive into it and maybe you know

00:21:31,840 --> 00:21:37,120
show one part or two

00:21:34,000 --> 00:21:39,760
now since uh i think last we left from

00:21:37,120 --> 00:21:39,760
here at

00:21:41,520 --> 00:21:45,039
i could not find it sorry oh yeah we

00:21:43,600 --> 00:21:48,480
left our bootstrap

00:21:45,039 --> 00:21:50,960
bootstrapping uh the three bms and then

00:21:48,480 --> 00:21:53,360
we are initializing we have saved the

00:21:50,960 --> 00:21:54,640
uh nets we have saved the vms we saved

00:21:53,360 --> 00:21:58,080
the environment

00:21:54,640 --> 00:22:01,200
and now we are initializing the same

00:21:58,080 --> 00:22:03,760
we have started the vms over here

00:22:01,200 --> 00:22:05,600
and then we have copied the files as you

00:22:03,760 --> 00:22:07,840
can see we are copying the vars file we

00:22:05,600 --> 00:22:11,600
are copying the repose

00:22:07,840 --> 00:22:15,120
over here to all the three vms now it uh

00:22:11,600 --> 00:22:16,799
basically outputs the lago init file

00:22:15,120 --> 00:22:20,000
again

00:22:16,799 --> 00:22:23,280
and from here it starts the uh

00:22:20,000 --> 00:22:24,880
deployment process and for the

00:22:23,280 --> 00:22:28,320
deployment process

00:22:24,880 --> 00:22:29,520
uh is a part of iv or a hyper converged

00:22:28,320 --> 00:22:33,200
infrastructure

00:22:29,520 --> 00:22:34,880
so we have added the ssh key to that one

00:22:33,200 --> 00:22:36,000
host from which we are deploying so that

00:22:34,880 --> 00:22:40,960
there are no

00:22:36,000 --> 00:22:41,919
ansible issues and now uh you can see

00:22:40,960 --> 00:22:45,679
that

00:22:41,919 --> 00:22:48,240
this is the starting of the ansible log

00:22:45,679 --> 00:22:50,240
where firstly we are trying to go

00:22:48,240 --> 00:22:52,880
through some preflight checks

00:22:50,240 --> 00:22:53,679
if there is enough space on var log if

00:22:52,880 --> 00:22:57,520
there is space

00:22:53,679 --> 00:22:58,159
on var and in case we pass certain size

00:22:57,520 --> 00:23:00,640
we are

00:22:58,159 --> 00:23:02,480
checking for the block size and there

00:23:00,640 --> 00:23:05,760
are many such tests

00:23:02,480 --> 00:23:06,240
which then we deploy cluster and after

00:23:05,760 --> 00:23:08,799
that

00:23:06,240 --> 00:23:11,280
we start once gluster is successfully

00:23:08,799 --> 00:23:14,799
deployed after a bunch of steps

00:23:11,280 --> 00:23:17,039
we go on and deploy hosted engine

00:23:14,799 --> 00:23:18,720
hosted engine and cluster use two

00:23:17,039 --> 00:23:21,679
different

00:23:18,720 --> 00:23:23,600
ansibles cluster is deployed using

00:23:21,679 --> 00:23:26,320
cluster ansible and a word engine is

00:23:23,600 --> 00:23:28,640
deployed using overtansible

00:23:26,320 --> 00:23:29,679
now these are the over engine ansible

00:23:28,640 --> 00:23:32,720
processes

00:23:29,679 --> 00:23:36,400
i will skip through them and directly go

00:23:32,720 --> 00:23:39,200
to the success of

00:23:36,400 --> 00:23:39,200
our deployment

00:23:40,480 --> 00:23:45,919
and here now

00:23:43,520 --> 00:23:48,320
after successfully creating the

00:23:45,919 --> 00:23:52,400
deployment

00:23:48,320 --> 00:23:53,120
we do some testing to ensure that the

00:23:52,400 --> 00:23:55,039
deploy

00:23:53,120 --> 00:23:56,559
environment is created properly and

00:23:55,039 --> 00:23:57,760
there are no problems with the

00:23:56,559 --> 00:24:00,640
environment

00:23:57,760 --> 00:24:01,760
we are running the bootstrap tests first

00:24:00,640 --> 00:24:04,880
as you can see

00:24:01,760 --> 00:24:08,640
all the tests have passed successfully

00:24:04,880 --> 00:24:11,919
and then we collect the

00:24:08,640 --> 00:24:15,120
details the logs and

00:24:11,919 --> 00:24:17,679
related logs in a file

00:24:15,120 --> 00:24:20,159
and then we run the basic sanity tests

00:24:17,679 --> 00:24:22,960
after which you again collect the logs

00:24:20,159 --> 00:24:24,559
and once all the tests have passed we

00:24:22,960 --> 00:24:26,799
get a success message

00:24:24,559 --> 00:24:28,159
in case something fails we get it traced

00:24:26,799 --> 00:24:32,159
back for that

00:24:28,159 --> 00:24:35,760
and we also get the related logs

00:24:32,159 --> 00:24:39,200
and we can we can always check

00:24:35,760 --> 00:24:42,799
uh check our

00:24:39,200 --> 00:24:44,960
deployment using first list

00:24:42,799 --> 00:24:47,279
you can see that we have three vms

00:24:44,960 --> 00:24:50,080
running and there is another vm

00:24:47,279 --> 00:24:50,480
inside this vm so we are using nested vm

00:24:50,080 --> 00:24:53,440
uh

00:24:50,480 --> 00:24:55,200
nested virtualization let's try to log

00:24:53,440 --> 00:24:59,279
into a vm and check

00:24:55,200 --> 00:25:01,440
uh for a few things we'll just see

00:24:59,279 --> 00:25:02,400
is cluster deployed and how hosted

00:25:01,440 --> 00:25:07,440
engine is running

00:25:02,400 --> 00:25:10,799
we use worsh console the password and

00:25:07,440 --> 00:25:13,679
login is defined in the files and

00:25:10,799 --> 00:25:15,039
let's quickly run a gloucester v status

00:25:13,679 --> 00:25:17,919
you can see that

00:25:15,039 --> 00:25:19,919
there are three hosts which are running

00:25:17,919 --> 00:25:22,799
three different volumes

00:25:19,919 --> 00:25:24,000
and all the volumes are up uh the hosts

00:25:22,799 --> 00:25:26,960
are connected

00:25:24,000 --> 00:25:26,960
and let's take a

00:25:27,039 --> 00:25:31,679
vm status uh hosted engine vm status

00:25:34,400 --> 00:25:40,559
sorry one second

00:25:37,840 --> 00:25:42,080
now we can see that the vm is up and

00:25:40,559 --> 00:25:45,279
it's running on host 0

00:25:42,080 --> 00:25:48,240
right now and

00:25:45,279 --> 00:25:50,320
so we can also interact with the setup

00:25:48,240 --> 00:25:52,000
it's not that we have to do the tests

00:25:50,320 --> 00:25:55,279
automatically we can

00:25:52,000 --> 00:25:58,720
do we can do the steps

00:25:55,279 --> 00:26:02,400
manually as well and in case you have a

00:25:58,720 --> 00:26:04,720
web ui you can access that through

00:26:02,400 --> 00:26:05,520
uh if you are running it on your local

00:26:04,720 --> 00:26:09,200
machine

00:26:05,520 --> 00:26:11,360
you can access it on port 8443

00:26:09,200 --> 00:26:13,279
and in case you are running on on a

00:26:11,360 --> 00:26:16,559
remote machine like i am

00:26:13,279 --> 00:26:19,440
you can always assist tunnel into it

00:26:16,559 --> 00:26:20,400
ah so here is the command two tunnel

00:26:19,440 --> 00:26:23,679
which is uh

00:26:20,400 --> 00:26:26,960
sh minus l eight four three

00:26:23,679 --> 00:26:30,480
followed by the ip address of your

00:26:26,960 --> 00:26:33,840
engine vm or your ui

00:26:30,480 --> 00:26:35,679
wherever your ui is deployed by the port

00:26:33,840 --> 00:26:37,200
on which it is deployed for me as the

00:26:35,679 --> 00:26:40,000
port was 443

00:26:37,200 --> 00:26:40,799
i have mentioned it here and the

00:26:40,000 --> 00:26:43,039
username

00:26:40,799 --> 00:26:44,159
uh the the machine name on which it is

00:26:43,039 --> 00:26:46,720
deployed

00:26:44,159 --> 00:26:48,000
once this is successfully connected you

00:26:46,720 --> 00:26:52,240
can log on

00:26:48,000 --> 00:26:56,159
to the uh

00:26:52,240 --> 00:27:01,159
to the machine using

00:26:56,159 --> 00:27:03,679
uh this particular url which is https

00:27:01,159 --> 00:27:05,279
localhost843 so

00:27:03,679 --> 00:27:07,360
thank you for your time and thank you

00:27:05,279 --> 00:27:11,039
for listening to my presentation

00:27:07,360 --> 00:27:11,520
i hope i was able to give you an insight

00:27:11,039 --> 00:27:15,600
upon

00:27:11,520 --> 00:27:17,679
on lago and ost if you have any queries

00:27:15,600 --> 00:27:23,039
please do get in touch with me

00:27:17,679 --> 00:27:23,039
and again thanks a lot for your time

00:27:27,360 --> 00:27:32,840
so thank you very much parth would you

00:27:29,520 --> 00:27:35,840
like to join us for some questions and

00:27:32,840 --> 00:27:35,840
answers

00:27:39,360 --> 00:27:42,559
thank you for excellent presentation i

00:27:41,039 --> 00:27:45,360
don't hear any audio from you parse i

00:27:42,559 --> 00:27:45,360
think you're muted

00:27:46,000 --> 00:27:50,640
yeah excellent so uh does anyone from

00:27:49,760 --> 00:27:54,000
the audience

00:27:50,640 --> 00:27:56,799
uh have any questions i know david made

00:27:54,000 --> 00:27:56,799
a couple comments

00:27:58,880 --> 00:28:02,399
so thank you for all the links part

00:28:00,399 --> 00:28:03,520
that'll be very helpful to those who are

00:28:02,399 --> 00:28:05,200
in the audience

00:28:03,520 --> 00:28:06,640
and i'm going to place a link to your

00:28:05,200 --> 00:28:10,399
video as well

00:28:06,640 --> 00:28:10,399
in the chat thank you

00:28:13,120 --> 00:28:19,120
did you make any comments uh so

00:28:16,640 --> 00:28:21,440
in case anybody wants to understand uh

00:28:19,120 --> 00:28:23,279
if i was unclear at any point or

00:28:21,440 --> 00:28:24,559
uh it was i think it was a little

00:28:23,279 --> 00:28:27,919
confusing because

00:28:24,559 --> 00:28:31,120
uh my demo was not very well rehearsed

00:28:27,919 --> 00:28:31,760
it was just uh i i sort of did it in a

00:28:31,120 --> 00:28:33,520
hurry

00:28:31,760 --> 00:28:35,360
so in case somebody wishes to get a tube

00:28:33,520 --> 00:28:38,480
type they can contact me

00:28:35,360 --> 00:28:39,840
um offline on my email id by just paste

00:28:38,480 --> 00:28:41,600
it in the chat

00:28:39,840 --> 00:28:44,080
and reach out to me and in case you

00:28:41,600 --> 00:28:48,080
would like to contribute with diversity

00:28:44,080 --> 00:28:51,279
or even talk about what i

00:28:48,080 --> 00:28:52,640
i contribute towards cockpit over ui

00:28:51,279 --> 00:28:54,559
as well so in case somebody is

00:28:52,640 --> 00:28:55,360
interested in contributing towards

00:28:54,559 --> 00:28:56,799
either of those

00:28:55,360 --> 00:28:59,840
uh you can reach out to me and i can

00:28:56,799 --> 00:28:59,840
help getting started

00:29:00,000 --> 00:29:03,039
yeah and thank you for the your contact

00:29:02,000 --> 00:29:04,640
information um

00:29:03,039 --> 00:29:07,039
all that information is great and

00:29:04,640 --> 00:29:08,720
they'll definitely help people get going

00:29:07,039 --> 00:29:10,320
and overt obviously it's a very

00:29:08,720 --> 00:29:12,080
important pro project

00:29:10,320 --> 00:29:13,600
so there's a ton of folks that are

00:29:12,080 --> 00:29:16,640
depending on overt

00:29:13,600 --> 00:29:18,240
and the uh kbm back end and

00:29:16,640 --> 00:29:20,240
it's extremely important to the open

00:29:18,240 --> 00:29:22,320
source community in general

00:29:20,240 --> 00:29:24,399
one of the most interesting things about

00:29:22,320 --> 00:29:25,520
uh overt and kvm is that

00:29:24,399 --> 00:29:27,760
you can do something a lot of the other

00:29:25,520 --> 00:29:29,520
virtualizers can't which is uh cross

00:29:27,760 --> 00:29:31,440
processor virtualization

00:29:29,520 --> 00:29:33,360
so when you're prototyping new solutions

00:29:31,440 --> 00:29:34,000
like risk five or arm whatever you're

00:29:33,360 --> 00:29:35,760
doing

00:29:34,000 --> 00:29:38,159
you can virtualize those very

00:29:35,760 --> 00:29:41,039
effectively on x86 if that's what you

00:29:38,159 --> 00:29:42,960
have so

00:29:41,039 --> 00:29:45,039
yeah i'm i'm a big fan of over this i'm

00:29:42,960 --> 00:29:47,360
sure you can tell

00:29:45,039 --> 00:29:48,880
so but i i don't have much experience

00:29:47,360 --> 00:29:51,279
with the word passage

00:29:48,880 --> 00:29:54,480
like yeah you know i haven't been with

00:29:51,279 --> 00:29:57,200
your handcuffed

00:29:54,480 --> 00:29:58,880
excellent well well thank you very much

00:29:57,200 --> 00:30:00,240
then i i guess

00:29:58,880 --> 00:30:02,559
we certainly appreciate your time and

00:30:00,240 --> 00:30:06,240
that was excellent presentation

00:30:02,559 --> 00:30:06,240

YouTube URL: https://www.youtube.com/watch?v=twmjgi2AoXQ


