Title: OWASP Top-10 - quickstart your security awareness
Publication date: 2020-10-06
Playlist: DevConfUS 2020
Description: 
	Speaker: Allon Mureinik

Not everyone is a security expert. Of course, not everyone needs to be a security expert, but in today’s world of rapid development and deployment, developers cannot afford to ignore security considerations completely, and “just leave it up to the security team to review”.

In this talk, I’ll present the OWASP Top-10 project, an (incomplete) list of the top security vulnerabilities (web) developers face. I will then talk about how developer-awareness from the ground up is a key to shifting left the way we think about security, which is the first step in creating better-secured applications.
Captions: 
	00:00:00,880 --> 00:00:06,560
well good morning good afternoon good

00:00:04,400 --> 00:00:07,919
evening depending on where you are on

00:00:06,560 --> 00:00:12,639
the globe

00:00:07,919 --> 00:00:16,960
welcome to first virtual.conf

00:00:12,639 --> 00:00:20,080
my name is the slide says is aluminum

00:00:16,960 --> 00:00:20,400
and i work for synopsis where i manage r

00:00:20,080 --> 00:00:24,480
d

00:00:20,400 --> 00:00:27,359
for seekers nodejs and net agents

00:00:24,480 --> 00:00:28,400
if you haven't heard about seeker or

00:00:27,359 --> 00:00:31,760
rather

00:00:28,400 --> 00:00:35,760
haven't heard about seeker yet

00:00:31,760 --> 00:00:39,200
seeker is probably the best highest

00:00:35,760 --> 00:00:42,559
solution out there today but

00:00:39,200 --> 00:00:45,920
as fascinating as iest may be

00:00:42,559 --> 00:00:47,520
it's just not my topic today so

00:00:45,920 --> 00:00:49,840
this is the last time i'm going to

00:00:47,520 --> 00:00:52,480
mention it

00:00:49,840 --> 00:00:54,719
instead today i want to talk about

00:00:52,480 --> 00:00:57,199
security awareness

00:00:54,719 --> 00:00:59,840
specifically security awareness for

00:00:57,199 --> 00:01:02,640
developers

00:00:59,840 --> 00:01:03,440
so before i go into things i just want

00:01:02,640 --> 00:01:07,119
to

00:01:03,440 --> 00:01:07,119
set expectations correctly

00:01:08,880 --> 00:01:12,240
well i can see the slides are lagging a

00:01:11,360 --> 00:01:14,640
bit

00:01:12,240 --> 00:01:16,640
so i just want to set expectations

00:01:14,640 --> 00:01:19,280
correctly

00:01:16,640 --> 00:01:21,280
listening to the store will not make you

00:01:19,280 --> 00:01:24,640
a security expert

00:01:21,280 --> 00:01:28,000
in fact no 30 minute talk

00:01:24,640 --> 00:01:28,479
will make you a security expert what i

00:01:28,000 --> 00:01:32,240
do

00:01:28,479 --> 00:01:35,280
hope to achieve today though is to

00:01:32,240 --> 00:01:40,079
spark your interest in security

00:01:35,280 --> 00:01:43,439
to raise awareness to security

00:01:40,079 --> 00:01:46,560
to help you get to to a mindset if you

00:01:43,439 --> 00:01:47,280
don't have one of these already the

00:01:46,560 --> 00:01:50,320
mindset

00:01:47,280 --> 00:01:55,040
of thinking about security

00:01:50,320 --> 00:01:58,399
during your day job as you could

00:01:55,040 --> 00:02:01,200
so in the information security industry

00:01:58,399 --> 00:02:04,640
we like to say that security is

00:02:01,200 --> 00:02:08,319
everyone's responsibility

00:02:04,640 --> 00:02:12,959
this is 100 sure i

00:02:08,319 --> 00:02:16,319
do not dispute this for one small second

00:02:12,959 --> 00:02:20,640
but i believe that

00:02:16,319 --> 00:02:20,640
it all has to start with developers

00:02:21,200 --> 00:02:26,640
or although security is everyone's

00:02:23,680 --> 00:02:26,640
responsibility

00:02:27,280 --> 00:02:30,480
the the process often starts with

00:02:29,440 --> 00:02:34,239
developers

00:02:30,480 --> 00:02:36,640
and if we as developers

00:02:34,239 --> 00:02:38,160
don't introduce security flaws to begin

00:02:36,640 --> 00:02:40,560
with

00:02:38,160 --> 00:02:41,200
if we think about security as we'll

00:02:40,560 --> 00:02:44,640
coding

00:02:41,200 --> 00:02:47,200
and avoid security mistakes

00:02:44,640 --> 00:02:48,879
from from the get-go we can make

00:02:47,200 --> 00:02:51,840
everyone else's jobs

00:02:48,879 --> 00:02:51,840
a whole lot easier

00:02:52,160 --> 00:02:58,959
this is especially correct

00:02:55,840 --> 00:03:02,840
especially true in

00:02:58,959 --> 00:03:05,200
the poster devops quote-unquote

00:03:02,840 --> 00:03:05,920
revolution where developers are

00:03:05,200 --> 00:03:09,599
empowered

00:03:05,920 --> 00:03:10,720
to come up with new features on your

00:03:09,599 --> 00:03:14,080
products

00:03:10,720 --> 00:03:16,720
code them test them or

00:03:14,080 --> 00:03:17,519
more often than not lie about testing

00:03:16,720 --> 00:03:21,360
them

00:03:17,519 --> 00:03:24,640
and then push them slightly production

00:03:21,360 --> 00:03:27,920
so in in such organizations if

00:03:24,640 --> 00:03:31,760
developers are not aware of security and

00:03:27,920 --> 00:03:33,360
don't approach development with the

00:03:31,760 --> 00:03:36,799
security mindset

00:03:33,360 --> 00:03:37,040
no one else will do this so security is

00:03:36,799 --> 00:03:40,239
an

00:03:37,040 --> 00:03:40,239
absolute must for us

00:03:42,400 --> 00:03:47,360
problem is not everyone can be a

00:03:45,840 --> 00:03:49,920
security expert

00:03:47,360 --> 00:03:52,239
and in fact i don't think everyone

00:03:49,920 --> 00:03:55,360
should be a security expert

00:03:52,239 --> 00:03:59,120
but just starting with awareness can

00:03:55,360 --> 00:04:03,599
take us a long way enter

00:03:59,120 --> 00:04:07,599
ours oursp stands for the

00:04:03,599 --> 00:04:10,000
open web application security project

00:04:07,599 --> 00:04:11,360
this is an organization devoted to

00:04:10,000 --> 00:04:15,200
promoting

00:04:11,360 --> 00:04:18,239
awareness of security to provide

00:04:15,200 --> 00:04:20,239
knowledge of security

00:04:18,239 --> 00:04:22,320
and to promote secure development

00:04:20,239 --> 00:04:26,720
practices

00:04:22,320 --> 00:04:28,000
now uh it's it's in the name to operate

00:04:26,720 --> 00:04:31,680
the operative word here

00:04:28,000 --> 00:04:35,040
is web but

00:04:31,680 --> 00:04:38,479
first of all if we're completely honest

00:04:35,040 --> 00:04:42,639
in today's day and age if your

00:04:38,479 --> 00:04:44,320
application if you work um interact with

00:04:42,639 --> 00:04:47,680
the outside world in

00:04:44,320 --> 00:04:50,800
some way shape or form chances are

00:04:47,680 --> 00:04:54,479
there is web involved somewhere there

00:04:50,800 --> 00:04:58,800
be it an html javascript whatever

00:04:54,479 --> 00:05:02,080
ui or the rest apis over http

00:04:58,800 --> 00:05:05,120
the concept of web

00:05:02,080 --> 00:05:08,000
is is there web has

00:05:05,120 --> 00:05:11,120
long since stopped being your personal

00:05:08,000 --> 00:05:14,479
page on gear settings or whatever

00:05:11,120 --> 00:05:14,960
and second even though i am going to

00:05:14,479 --> 00:05:18,080
discuss

00:05:14,960 --> 00:05:20,880
web today the good news is that

00:05:18,080 --> 00:05:22,720
most if not all of these concepts are

00:05:20,880 --> 00:05:25,680
easily transferable

00:05:22,720 --> 00:05:26,320
so even if you are not a web developer

00:05:25,680 --> 00:05:29,520
or

00:05:26,320 --> 00:05:30,400
web development is not part of your day

00:05:29,520 --> 00:05:33,759
job in any

00:05:30,400 --> 00:05:36,960
way shape or form the concepts here are

00:05:33,759 --> 00:05:40,320
still meaningful and are still useful

00:05:36,960 --> 00:05:43,280
hopefully to every developer

00:05:40,320 --> 00:05:44,000
specifically today i want to talk about

00:05:43,280 --> 00:05:48,080
the hours

00:05:44,000 --> 00:05:51,919
top 10 list this is a list that gets

00:05:48,080 --> 00:05:54,000
updated every couple of years in fact in

00:05:51,919 --> 00:05:57,440
the process of updating it again

00:05:54,000 --> 00:05:59,520
and they were kind enough

00:05:57,440 --> 00:06:00,720
not to release an update between the

00:05:59,520 --> 00:06:03,360
time i

00:06:00,720 --> 00:06:05,360
sat down and wrote this presentation to

00:06:03,360 --> 00:06:07,520
the time i'm presenting it so

00:06:05,360 --> 00:06:08,800
today i'll be talking about our sp top

00:06:07,520 --> 00:06:12,479
10 2017

00:06:08,800 --> 00:06:16,240
list but regardless of the

00:06:12,479 --> 00:06:20,479
revamping it for every couple of years

00:06:16,240 --> 00:06:24,479
this is a top 10 list of the most the 10

00:06:20,479 --> 00:06:27,919
most influential most common most

00:06:24,479 --> 00:06:31,600
impactful security vulnerabilities

00:06:27,919 --> 00:06:31,600
that we see in the world

00:06:32,560 --> 00:06:36,000
just to clarify this is not a list of

00:06:34,960 --> 00:06:38,960
cves

00:06:36,000 --> 00:06:40,400
this is not the list of specific

00:06:38,960 --> 00:06:43,680
security vulnerabilities

00:06:40,400 --> 00:06:46,560
it is more a list of concepts

00:06:43,680 --> 00:06:47,039
the top 10 things you should keep in

00:06:46,560 --> 00:06:49,840
mind

00:06:47,039 --> 00:06:49,840
while developing

00:06:50,560 --> 00:06:56,880
not to say that if you go over and

00:06:53,759 --> 00:06:59,919
tick the boxes for each and every each

00:06:56,880 --> 00:07:00,960
and every of these 10 categories your

00:06:59,919 --> 00:07:04,319
application will be

00:07:00,960 --> 00:07:07,680
100 safe i don't believe

00:07:04,319 --> 00:07:10,960
anything can be 100 safe but it's a

00:07:07,680 --> 00:07:10,960
really good place to start

00:07:11,599 --> 00:07:15,360
unfortunately i do not have the time to

00:07:14,720 --> 00:07:18,800
go

00:07:15,360 --> 00:07:22,319
in depth to in

00:07:18,800 --> 00:07:25,759
excuse me i do not have the time to

00:07:22,319 --> 00:07:29,199
discuss in depth all of these

00:07:25,759 --> 00:07:32,560
top 10 categories

00:07:29,199 --> 00:07:36,880
in fact each of these can easily deserve

00:07:32,560 --> 00:07:36,880
its own half hour talk hour tour

00:07:37,520 --> 00:07:45,199
holiday training session you name it

00:07:42,080 --> 00:07:48,960
so instead i'm going to focus on my own

00:07:45,199 --> 00:07:52,160
top three not too so not to say

00:07:48,960 --> 00:07:55,360
that the other seven aren't impactful

00:07:52,160 --> 00:07:56,240
and dangerous and something you need to

00:07:55,360 --> 00:07:59,440
keep in mind

00:07:56,240 --> 00:08:02,960
but i decided to focus on these

00:07:59,440 --> 00:08:06,639
three for two reasons

00:08:02,960 --> 00:08:10,080
first of all these three in my mind

00:08:06,639 --> 00:08:13,440
are the top three that are really

00:08:10,080 --> 00:08:18,080
solely a developer's responsibility

00:08:13,440 --> 00:08:21,199
and if we as developers do not address

00:08:18,080 --> 00:08:21,919
these three issues chances are now in

00:08:21,199 --> 00:08:25,039
the world

00:08:21,919 --> 00:08:25,039
could do it for us

00:08:25,120 --> 00:08:32,240
second these three are probably

00:08:28,720 --> 00:08:34,159
the easiest to demo it's been a long day

00:08:32,240 --> 00:08:37,440
and i feel a bit selfish

00:08:34,159 --> 00:08:40,159
so i'm gonna take the easy way out

00:08:37,440 --> 00:08:40,719
now for all for each of these three i'm

00:08:40,159 --> 00:08:43,839
going to

00:08:40,719 --> 00:08:46,640
discuss them i'm going to then

00:08:43,839 --> 00:08:48,399
demo a hardly written application that

00:08:46,640 --> 00:08:51,279
has

00:08:48,399 --> 00:08:52,240
this vulnerability and again i emphasize

00:08:51,279 --> 00:08:54,560
these are

00:08:52,240 --> 00:08:56,000
horribly written applications i will

00:08:54,560 --> 00:08:59,360
share the source code

00:08:56,000 --> 00:09:00,000
it's under the mit license please do not

00:08:59,360 --> 00:09:02,480
paste it

00:09:00,000 --> 00:09:03,440
into your applications these are

00:09:02,480 --> 00:09:06,480
intentionally

00:09:03,440 --> 00:09:09,040
vulnerable applications

00:09:06,480 --> 00:09:11,200
anyway i will demo them i will show

00:09:09,040 --> 00:09:14,399
these vulnerabilities and i will

00:09:11,200 --> 00:09:17,440
discuss how to overcome them

00:09:14,399 --> 00:09:21,519
all of my demos today are going to be in

00:09:17,440 --> 00:09:24,959
node.js for a couple of reasons

00:09:21,519 --> 00:09:28,640
first of all node.js is open source

00:09:24,959 --> 00:09:32,640
so on brand here devconf

00:09:28,640 --> 00:09:35,120
second node.js is javascript

00:09:32,640 --> 00:09:36,640
so even if you are not a node.js

00:09:35,120 --> 00:09:39,360
developer

00:09:36,640 --> 00:09:42,399
any web developer should feel

00:09:39,360 --> 00:09:45,680
comfortable with the syntax here

00:09:42,399 --> 00:09:49,120
and to be completely honest even if you

00:09:45,680 --> 00:09:51,760
have never seen javascript before

00:09:49,120 --> 00:09:52,880
this is pretty straightforward syntax

00:09:51,760 --> 00:09:55,920
i'm not using any

00:09:52,880 --> 00:09:56,320
bells and whistles so hopefully it will

00:09:55,920 --> 00:09:59,760
be

00:09:56,320 --> 00:10:02,839
easy to understand for anyone listening

00:09:59,760 --> 00:10:04,240
even if you are not familiar with

00:10:02,839 --> 00:10:06,720
javascript

00:10:04,240 --> 00:10:08,560
so that was an extremely long

00:10:06,720 --> 00:10:12,399
introduction

00:10:08,560 --> 00:10:14,880
let's get into things the first

00:10:12,399 --> 00:10:15,680
category of vulnerabilities i want to

00:10:14,880 --> 00:10:19,120
discuss

00:10:15,680 --> 00:10:21,760
is a1 injection

00:10:19,120 --> 00:10:23,120
now chances are you've heard about

00:10:21,760 --> 00:10:26,720
injection attacks

00:10:23,120 --> 00:10:27,360
specifically you've most probably heard

00:10:26,720 --> 00:10:30,399
about

00:10:27,360 --> 00:10:33,519
sql injection attacks

00:10:30,399 --> 00:10:36,079
scale injection is in fact so famous

00:10:33,519 --> 00:10:38,640
i think you'll be hard-pressed to find a

00:10:36,079 --> 00:10:42,240
talk about application security

00:10:38,640 --> 00:10:46,880
that does not discuss sql

00:10:42,240 --> 00:10:49,920
so famous it has its own xkcd comic stop

00:10:46,880 --> 00:10:53,839
but since my goal here today is to

00:10:49,920 --> 00:10:57,360
raise awareness i'm not going to discuss

00:10:53,839 --> 00:10:58,079
an injection instead i want us to

00:10:57,360 --> 00:11:01,760
consider

00:10:58,079 --> 00:11:04,959
injection in the oldest terms possible

00:11:01,760 --> 00:11:08,240
injection or an injection attack is

00:11:04,959 --> 00:11:09,120
any scenario where your application

00:11:08,240 --> 00:11:12,320
receives

00:11:09,120 --> 00:11:13,519
input from the outside world untrusted

00:11:12,320 --> 00:11:16,640
input

00:11:13,519 --> 00:11:18,959
which is any input in fact

00:11:16,640 --> 00:11:20,000
and he uses it in a way where the

00:11:18,959 --> 00:11:23,040
application

00:11:20,000 --> 00:11:25,200
assumes it's just text or something

00:11:23,040 --> 00:11:28,160
benign

00:11:25,200 --> 00:11:29,360
but due to some special character or

00:11:28,160 --> 00:11:32,959
characters

00:11:29,360 --> 00:11:36,320
this payload just input gains syntactic

00:11:32,959 --> 00:11:40,320
or semantic meaning

00:11:36,320 --> 00:11:40,320
that's a mouthful let's see a demo

00:11:40,880 --> 00:11:45,040
so i have here a

00:11:45,200 --> 00:11:53,200
basic login form or rather

00:11:49,200 --> 00:11:55,760
the backend handler for login form

00:11:53,200 --> 00:11:57,839
as you may notice this login form

00:11:55,760 --> 00:12:00,959
operates on the owner system

00:11:57,839 --> 00:12:02,560
it accepts any combination of username

00:12:00,959 --> 00:12:05,360
and password

00:12:02,560 --> 00:12:06,399
which is of course a horrible security

00:12:05,360 --> 00:12:09,440
practice

00:12:06,399 --> 00:12:12,560
never do the system but

00:12:09,440 --> 00:12:15,600
for the demo sake we will use the honor

00:12:12,560 --> 00:12:19,200
login system and once a user

00:12:15,600 --> 00:12:22,079
is logged in we will

00:12:19,200 --> 00:12:23,440
log the fact that they have logged in

00:12:22,079 --> 00:12:26,000
using our

00:12:23,440 --> 00:12:27,839
enterprise-grade logging system which is

00:12:26,000 --> 00:12:32,959
just pointing to the

00:12:27,839 --> 00:12:32,959
console let's see the slide

00:12:34,480 --> 00:12:41,200
here a really ugly login form

00:12:38,000 --> 00:12:43,760
because to be completely honest i'm not

00:12:41,200 --> 00:12:48,399
a very good web developer

00:12:43,760 --> 00:12:48,399
nonetheless it does work and if i

00:12:48,480 --> 00:12:52,160
input my username and password i can log

00:12:51,839 --> 00:12:54,240
in

00:12:52,160 --> 00:12:56,720
and i'll get a log message that says

00:12:54,240 --> 00:12:59,519
alone logged in

00:12:56,720 --> 00:13:00,480
now i can of course exploit the form

00:12:59,519 --> 00:13:02,639
itself

00:13:00,480 --> 00:13:03,920
but it's not always convenient so

00:13:02,639 --> 00:13:07,279
instead i will use

00:13:03,920 --> 00:13:08,240
curl to send a payload which contains a

00:13:07,279 --> 00:13:12,959
line like

00:13:08,240 --> 00:13:12,959
backslash n one of sensors

00:13:13,839 --> 00:13:20,800
two log messages a long login and

00:13:17,160 --> 00:13:24,000
uranium which of course is my

00:13:20,800 --> 00:13:24,000
absolute sense

00:13:24,560 --> 00:13:28,880
i've just sent one single request so by

00:13:27,920 --> 00:13:32,839
using

00:13:28,880 --> 00:13:36,079
a line like which has the semantic

00:13:32,839 --> 00:13:39,440
meaning of a new log message

00:13:36,079 --> 00:13:42,800
i was able to inject or falsify a lot

00:13:39,440 --> 00:13:46,000
message now there's

00:13:42,800 --> 00:13:49,519
benign occasions it doesn't do anything

00:13:46,000 --> 00:13:53,680
and no one ever looks at these logs

00:13:49,519 --> 00:13:57,519
but if you had a real application

00:13:53,680 --> 00:13:59,519
with real logs and monitoring system

00:13:57,519 --> 00:14:00,880
and events triggered by this monitoring

00:13:59,519 --> 00:14:04,160
system

00:14:00,880 --> 00:14:05,279
the ability to falsify or inject a lock

00:14:04,160 --> 00:14:09,920
message

00:14:05,279 --> 00:14:09,920
can only cause a whole lot of noise

00:14:10,000 --> 00:14:16,320
providing injection attacks is

00:14:13,760 --> 00:14:17,279
well easy in theory and not always easy

00:14:16,320 --> 00:14:21,920
in practice

00:14:17,279 --> 00:14:23,920
but the cardinal rule is we never trust

00:14:21,920 --> 00:14:26,079
any input from the outside we do not

00:14:23,920 --> 00:14:29,519
trust our users

00:14:26,079 --> 00:14:32,880
input is potentially malicious

00:14:29,519 --> 00:14:33,760
so if you can avoid any input from the

00:14:32,880 --> 00:14:36,639
outside

00:14:33,760 --> 00:14:38,959
that's excellent unfortunately my

00:14:36,639 --> 00:14:41,519
systems can't because

00:14:38,959 --> 00:14:43,360
the reason we have these systems is to

00:14:41,519 --> 00:14:47,040
get input from the outside and

00:14:43,360 --> 00:14:51,440
do stuff with it if we cannot avoid it

00:14:47,040 --> 00:14:54,560
we have to sanitize this input

00:14:51,440 --> 00:14:56,240
we have to think about the context it's

00:14:54,560 --> 00:15:00,000
used in

00:14:56,240 --> 00:15:03,360
think about what special characters

00:15:00,000 --> 00:15:06,720
could gain syntactic or semantic meaning

00:15:03,360 --> 00:15:09,120
and then escape them somehow

00:15:06,720 --> 00:15:09,760
now i'm sure everyone listening to this

00:15:09,120 --> 00:15:12,639
is

00:15:09,760 --> 00:15:15,120
super smart and you can all implement

00:15:12,639 --> 00:15:18,800
your own sanitizers

00:15:15,120 --> 00:15:22,399
i'm sure you can do this please don't

00:15:18,800 --> 00:15:25,680
unless you have a really really

00:15:22,399 --> 00:15:29,199
good reason to invent a better wheel

00:15:25,680 --> 00:15:31,199
don't reinvent the wheel every framework

00:15:29,199 --> 00:15:33,360
every programming language every

00:15:31,199 --> 00:15:36,720
programming environment

00:15:33,360 --> 00:15:38,839
should have its own popular battle

00:15:36,720 --> 00:15:41,519
tested

00:15:38,839 --> 00:15:44,160
privileges your input against

00:15:41,519 --> 00:15:45,279
any number of places that can be abused

00:15:44,160 --> 00:15:48,240
or injected

00:15:45,279 --> 00:15:50,399
so find the right library and please use

00:15:48,240 --> 00:15:50,399
it

00:15:50,560 --> 00:15:55,839
let's move on

00:15:57,680 --> 00:16:05,279
so that was injection and

00:16:01,759 --> 00:16:08,959
perhaps a few too many words

00:16:05,279 --> 00:16:10,639
the next category of vulnerabilities i

00:16:08,959 --> 00:16:15,920
want to discuss

00:16:10,639 --> 00:16:15,920
are xml external entities or xxe

00:16:17,680 --> 00:16:24,639
well i started programming in the inh

00:16:21,360 --> 00:16:28,000
xml was everywhere in

00:16:24,639 --> 00:16:29,519
the later years it kind of fell from

00:16:28,000 --> 00:16:32,959
rice but

00:16:29,519 --> 00:16:36,079
it's still definitely out there

00:16:32,959 --> 00:16:40,399
definitely being used and can definitely

00:16:36,079 --> 00:16:40,399
be a source of security vulnerabilities

00:16:41,279 --> 00:16:44,399
the cliff note for those of you who

00:16:43,920 --> 00:16:48,000
aren't

00:16:44,399 --> 00:16:51,440
deeply familiar with xml is that xml

00:16:48,000 --> 00:16:55,279
is awesome xml has

00:16:51,440 --> 00:16:58,399
a ton of features which

00:16:55,279 --> 00:17:03,920
developers sometimes really like

00:16:58,399 --> 00:17:04,959
which have a ton of power behind them

00:17:03,920 --> 00:17:08,000
but

00:17:04,959 --> 00:17:11,600
as peter parker or other

00:17:08,000 --> 00:17:14,880
campaign has taught us with great power

00:17:11,600 --> 00:17:18,559
comes great responsibility and

00:17:14,880 --> 00:17:22,400
that could be some such a thing as

00:17:18,559 --> 00:17:25,199
too much power sometimes

00:17:22,400 --> 00:17:25,919
specifically i want to discuss xml

00:17:25,199 --> 00:17:28,960
entities

00:17:25,919 --> 00:17:31,520
excellent external entities

00:17:28,960 --> 00:17:32,240
as programmers we don't like to copy

00:17:31,520 --> 00:17:35,280
paste

00:17:32,240 --> 00:17:39,600
we like to reuse code

00:17:35,280 --> 00:17:44,320
and xml entities let's use xml

00:17:39,600 --> 00:17:47,440
xml these allow you to define

00:17:44,320 --> 00:17:50,160
entities in the document and then

00:17:47,440 --> 00:17:52,240
reference them in various places in that

00:17:50,160 --> 00:17:57,039
document

00:17:52,240 --> 00:17:57,039
in order to avoid duplicating entries

00:17:57,120 --> 00:18:05,600
now that sounds like a good idea but

00:18:01,600 --> 00:18:05,600
well that is in practice

00:18:05,840 --> 00:18:12,799
i have here a very basic

00:18:09,280 --> 00:18:16,960
web application or web api

00:18:12,799 --> 00:18:20,000
that receives an xml payload passes it

00:18:16,960 --> 00:18:23,120
and returns the text of

00:18:20,000 --> 00:18:26,160
the name element

00:18:23,120 --> 00:18:26,960
sounds straightforward right let's see

00:18:26,160 --> 00:18:30,000
this

00:18:26,960 --> 00:18:30,000
let's see what can happen

00:18:30,160 --> 00:18:34,559
so this time i'm not going to offend

00:18:32,799 --> 00:18:37,840
your eyes with

00:18:34,559 --> 00:18:40,840
my ugly fontan skills

00:18:37,840 --> 00:18:43,919
i will show you though that i can use

00:18:40,840 --> 00:18:46,880
curl hopefully you can see this

00:18:43,919 --> 00:18:48,320
to send a payload which has a root

00:18:46,880 --> 00:18:51,679
element a name element an

00:18:48,320 --> 00:18:55,520
image along and this

00:18:51,679 --> 00:18:58,880
web api will return name is alarm

00:18:55,520 --> 00:19:01,919
now if i use code to send

00:18:58,880 --> 00:19:06,000
from a interesting xml

00:19:01,919 --> 00:19:09,280
with an extended entity i guess that

00:19:06,000 --> 00:19:13,200
name is a sequel or name is sorry this

00:19:09,280 --> 00:19:17,120
is a secret now this is not

00:19:13,200 --> 00:19:22,640
the path of the entity that i defined

00:19:17,120 --> 00:19:22,640
this is the actual content of the file

00:19:22,880 --> 00:19:29,440
now again here this is the 9

00:19:25,919 --> 00:19:32,880
because it's a system nobody uses

00:19:29,440 --> 00:19:36,640
but by sending

00:19:32,880 --> 00:19:39,760
an xml payload to a web api

00:19:36,640 --> 00:19:42,240
i was able to get the content

00:19:39,760 --> 00:19:43,200
of a text file this isn't even an xml

00:19:42,240 --> 00:19:45,039
file

00:19:43,200 --> 00:19:46,720
that has nothing to do with the

00:19:45,039 --> 00:19:48,799
application and just

00:19:46,720 --> 00:19:50,960
happens to be sitting there in the file

00:19:48,799 --> 00:19:54,240
system

00:19:50,960 --> 00:19:56,720
now what would have happened if i

00:19:54,240 --> 00:19:57,760
were not the security conscious

00:19:56,720 --> 00:20:00,720
developer that i

00:19:57,760 --> 00:20:01,120
am and i would have won this application

00:20:00,720 --> 00:20:04,720
as

00:20:01,120 --> 00:20:07,520
root which nobody should ever do but

00:20:04,720 --> 00:20:08,159
people do of course and what if my

00:20:07,520 --> 00:20:11,840
payload

00:20:08,159 --> 00:20:15,280
wasn't a path to this file but

00:20:11,840 --> 00:20:18,480
an entity by fencing file colon

00:20:15,280 --> 00:20:20,720
slash slash so

00:20:18,480 --> 00:20:20,720
file

00:20:24,799 --> 00:20:32,960
well a whole big oops right

00:20:29,760 --> 00:20:36,000
so even though xml is not

00:20:32,960 --> 00:20:41,280
as prominent as it used to be it can

00:20:36,000 --> 00:20:44,480
definitely still pose a security risk

00:20:41,280 --> 00:20:47,760
luckily avoiding x6e attacks

00:20:44,480 --> 00:20:51,360
is not that hard

00:20:47,760 --> 00:20:54,640
first and foremost if you don't use xml

00:20:51,360 --> 00:20:56,400
or at least don't use xml to

00:20:54,640 --> 00:20:58,080
communicate with the outside world you

00:20:56,400 --> 00:21:01,760
don't get your xmls from

00:20:58,080 --> 00:21:05,200
external sources you're good

00:21:01,760 --> 00:21:07,200
if you do use xml well

00:21:05,200 --> 00:21:08,559
first of all see if you can stop using

00:21:07,200 --> 00:21:12,720
xml

00:21:08,559 --> 00:21:15,280
if you can't double check your password

00:21:12,720 --> 00:21:16,960
a lot of passes don't allow external

00:21:15,280 --> 00:21:20,720
entities at all

00:21:16,960 --> 00:21:23,679
so for this use case correct

00:21:20,720 --> 00:21:25,200
a lot of parcels that do allow external

00:21:23,679 --> 00:21:27,919
entities

00:21:25,200 --> 00:21:30,400
don't allow them by default or could be

00:21:27,919 --> 00:21:32,320
configured at least not to allow them

00:21:30,400 --> 00:21:33,919
so if you can tweak the password

00:21:32,320 --> 00:21:36,559
configuration to

00:21:33,919 --> 00:21:39,200
disallow entities or disallow external

00:21:36,559 --> 00:21:43,039
entities at least

00:21:39,200 --> 00:21:46,400
again problem solved if you can do

00:21:43,039 --> 00:21:49,280
neither of these things you have

00:21:46,400 --> 00:21:49,840
absolutely no choice no other choice but

00:21:49,280 --> 00:21:53,039
to

00:21:49,840 --> 00:21:56,320
write some code and to introduce some

00:21:53,039 --> 00:22:00,880
mechanism like an inclusion lost

00:21:56,320 --> 00:22:03,760
or an list inclusion less always better

00:22:00,880 --> 00:22:04,960
to filter and make sure that your

00:22:03,760 --> 00:22:07,440
entities

00:22:04,960 --> 00:22:09,600
only access the files that they are

00:22:07,440 --> 00:22:12,400
allowed to

00:22:09,600 --> 00:22:13,120
that's kind of a pain to do but the good

00:22:12,400 --> 00:22:15,840
news is

00:22:13,120 --> 00:22:17,039
hey it's possible and b hey all

00:22:15,840 --> 00:22:20,159
developers here

00:22:17,039 --> 00:22:22,799
we like writing code so not

00:22:20,159 --> 00:22:22,799
that bad

00:22:25,360 --> 00:22:30,159
the last category of

00:22:30,240 --> 00:22:36,480
vulnerabilities i want to discuss today

00:22:33,440 --> 00:22:37,280
are cost side scripting a7 cross-site

00:22:36,480 --> 00:22:41,360
sculpting or

00:22:37,280 --> 00:22:44,640
exercise now cross-site sculpting

00:22:41,360 --> 00:22:48,640
is kind of sort of an injection attack

00:22:44,640 --> 00:22:52,000
but it is so widespread so

00:22:48,640 --> 00:22:53,360
ubiquitous to web development that it

00:22:52,000 --> 00:22:57,520
got

00:22:53,360 --> 00:23:00,799
got gets its own category

00:22:57,520 --> 00:23:04,320
cod site scripting is any numbers

00:23:00,799 --> 00:23:07,520
number of ways where an attacker

00:23:04,320 --> 00:23:11,679
sends a payload to a website

00:23:07,520 --> 00:23:14,880
a web application and

00:23:11,679 --> 00:23:15,760
this this payload instead of being

00:23:14,880 --> 00:23:18,880
treated as

00:23:15,760 --> 00:23:22,000
benign text is somehow

00:23:18,880 --> 00:23:25,440
executed by a victim's browser

00:23:22,000 --> 00:23:29,679
so this payload becomes interpreted as

00:23:25,440 --> 00:23:32,799
html as javascript usually

00:23:29,679 --> 00:23:33,120
but generally speaking as any payload

00:23:32,799 --> 00:23:37,120
that

00:23:33,120 --> 00:23:40,320
the victims or the browser can interpret

00:23:37,120 --> 00:23:44,080
even vbscript in some browsers

00:23:40,320 --> 00:23:44,080
we will not mention their names

00:23:44,480 --> 00:23:50,640
yeah sounds like a mouthful

00:23:47,600 --> 00:23:53,760
let's let's talk specifics

00:23:50,640 --> 00:23:57,120
there are a number of ways to create

00:23:53,760 --> 00:23:58,880
exercise vulnerabilities i'm going to

00:23:57,120 --> 00:24:03,200
show here a technique called

00:23:58,880 --> 00:24:06,480
store exercise in this technique

00:24:03,200 --> 00:24:09,919
the attacker sends his his or hers

00:24:06,480 --> 00:24:13,039
malicious payload it is saved

00:24:09,919 --> 00:24:16,559
by the target application for instance

00:24:13,039 --> 00:24:19,919
in a database and then an

00:24:16,559 --> 00:24:23,279
unrelated time when the victim

00:24:19,919 --> 00:24:26,640
browses to cite this application

00:24:23,279 --> 00:24:30,240
this malicious payload is retrieved

00:24:26,640 --> 00:24:33,600
in this case for a database and executed

00:24:30,240 --> 00:24:33,600
by the victim's browser

00:24:33,679 --> 00:24:41,360
let's see some code i have here

00:24:37,679 --> 00:24:44,559
a very simple comments form

00:24:41,360 --> 00:24:47,919
now when you pause to it you will see

00:24:44,559 --> 00:24:51,120
two things first of all a form

00:24:47,919 --> 00:24:55,520
asking you how is deathcon so far

00:24:51,120 --> 00:24:58,799
and allowing you to submit your comment

00:24:55,520 --> 00:25:02,880
and understood chronologically all of

00:24:58,799 --> 00:25:02,880
the comments from previous users

00:25:03,360 --> 00:25:09,600
the back-end handle of this form is

00:25:07,120 --> 00:25:10,320
pretty straightforward it just takes a

00:25:09,600 --> 00:25:13,360
comment

00:25:10,320 --> 00:25:16,480
and inserts it to your database

00:25:13,360 --> 00:25:16,880
you will notice i'm using bind variables

00:25:16,480 --> 00:25:20,400
here

00:25:16,880 --> 00:25:22,799
so this application is safe

00:25:20,400 --> 00:25:24,080
from the aforementioned sql injection

00:25:22,799 --> 00:25:26,960
attack

00:25:24,080 --> 00:25:27,840
but of course this does nothing to

00:25:26,960 --> 00:25:31,440
prevent

00:25:27,840 --> 00:25:34,000
excess attacks um

00:25:31,440 --> 00:25:35,440
so and just for for the cycle of

00:25:34,000 --> 00:25:38,080
completeness

00:25:35,440 --> 00:25:38,960
once this current is inserted the

00:25:38,080 --> 00:25:42,320
location is

00:25:38,960 --> 00:25:45,679
refreshed back to the floor

00:25:42,320 --> 00:25:48,159
not really critical to

00:25:45,679 --> 00:25:51,679
to display this vulnerability but just

00:25:48,159 --> 00:25:57,039
to explain the application you're seeing

00:25:51,679 --> 00:26:00,159
so let's see this in action

00:25:57,039 --> 00:26:02,880
so as usual i have an

00:26:00,159 --> 00:26:04,159
ugly form here because i'm not a very

00:26:02,880 --> 00:26:08,159
good web developer

00:26:04,159 --> 00:26:08,960
but nonetheless it does work and if i

00:26:08,159 --> 00:26:11,679
put in

00:26:08,960 --> 00:26:14,000
that i think dev confused great i can

00:26:11,679 --> 00:26:17,440
submit it the page is refreshed

00:26:14,000 --> 00:26:17,440
and i get my comments back

00:26:17,760 --> 00:26:24,159
as always i could use this phone

00:26:20,880 --> 00:26:28,000
to try and exploit the application it's

00:26:24,159 --> 00:26:30,960
much more convenient using code so

00:26:28,000 --> 00:26:32,080
i'll use co i'll send a payload which

00:26:30,960 --> 00:26:35,279
contains

00:26:32,080 --> 00:26:37,679
some html versus script tag

00:26:35,279 --> 00:26:38,320
and and there's some inline javascript

00:26:37,679 --> 00:26:41,520
that

00:26:38,320 --> 00:26:44,080
refreshes the page's location

00:26:41,520 --> 00:26:46,400
next time the victim browsers here they

00:26:44,080 --> 00:26:48,799
will be redirected to the dev confirm

00:26:46,400 --> 00:26:48,799
page

00:26:49,520 --> 00:26:56,320
like all the demos in this session

00:26:54,080 --> 00:26:58,080
this is kind of harmless because again

00:26:56,320 --> 00:26:59,200
it's in applications it doesn't do

00:26:58,080 --> 00:27:02,960
anything

00:26:59,200 --> 00:27:06,480
there's no important data here

00:27:02,960 --> 00:27:10,799
and my attack was to

00:27:06,480 --> 00:27:14,400
redirect to the dev confirm page which

00:27:10,799 --> 00:27:17,039
knock on wood is a safe page but

00:27:14,400 --> 00:27:19,200
if you think about it for a second i got

00:27:17,039 --> 00:27:22,320
this page to execute

00:27:19,200 --> 00:27:26,000
i got sorry a victim's browser

00:27:22,320 --> 00:27:29,120
to execute some arbitrary javascript

00:27:26,000 --> 00:27:32,240
and instead of redirecting

00:27:29,120 --> 00:27:35,840
dev confirm page i could have done

00:27:32,240 --> 00:27:35,840
all sorts of damage

00:27:37,120 --> 00:27:43,600
so the defending against

00:27:40,559 --> 00:27:44,720
xss kind of goes back to the injection

00:27:43,600 --> 00:27:48,000
cable

00:27:44,720 --> 00:27:51,200
if you can don't take any input

00:27:48,000 --> 00:27:54,799
from the user usually you cannot

00:27:51,200 --> 00:27:58,159
if input you have taken are taking

00:27:54,799 --> 00:28:01,360
from a user has any chance to be

00:27:58,159 --> 00:28:05,919
displayed in a browser

00:28:01,360 --> 00:28:08,640
you have to sanitize it and once again

00:28:05,919 --> 00:28:09,600
please do not try to invent the wheel

00:28:08,640 --> 00:28:11,520
although i'm sure

00:28:09,600 --> 00:28:12,799
everyone here is super smart and can do

00:28:11,520 --> 00:28:15,919
this

00:28:12,799 --> 00:28:19,120
find the sanitation library or feature

00:28:15,919 --> 00:28:19,600
that matches your application framework

00:28:19,120 --> 00:28:22,000
your

00:28:19,600 --> 00:28:24,240
programming language and put it to good

00:28:22,000 --> 00:28:28,840
use

00:28:24,240 --> 00:28:30,720
now i think i'm running out of time

00:28:28,840 --> 00:28:33,279
so let's

00:28:30,720 --> 00:28:33,279
summarize

00:28:34,320 --> 00:28:40,960
we have seen here a

00:28:38,159 --> 00:28:42,080
couple of we have seen here three of the

00:28:40,960 --> 00:28:45,919
top ten

00:28:42,080 --> 00:28:49,200
hours one sorry we have seen

00:28:45,919 --> 00:28:53,600
three of the top ten of the our

00:28:49,200 --> 00:28:56,880
top 10 vulnerability list

00:28:53,600 --> 00:29:01,760
this is not an exhaustive list but

00:28:56,880 --> 00:29:05,520
i do hope it kind of sparked your

00:29:01,760 --> 00:29:09,039
your interest and raised some awareness

00:29:05,520 --> 00:29:11,039
and made you feel like

00:29:09,039 --> 00:29:13,840
going out there and learning someone's

00:29:11,039 --> 00:29:13,840
about security

00:29:14,159 --> 00:29:21,840
as i said in the beginning security

00:29:18,000 --> 00:29:24,720
is everyone's responsibility but it

00:29:21,840 --> 00:29:27,679
has to start with us developers

00:29:24,720 --> 00:29:30,000
sometimes because we were learned there

00:29:27,679 --> 00:29:30,720
sometimes because even if we are not

00:29:30,000 --> 00:29:33,600
alone

00:29:30,720 --> 00:29:35,760
if we can avoid introducing security

00:29:33,600 --> 00:29:38,960
vulnerabilities to begin with

00:29:35,760 --> 00:29:41,840
it will make everyone else's life so

00:29:38,960 --> 00:29:41,840
so much easier

00:29:42,399 --> 00:29:48,559
the bad news is that we cannot

00:29:45,440 --> 00:29:53,039
all be security experts the

00:29:48,559 --> 00:29:56,320
good news is that we don't have to

00:29:53,039 --> 00:29:59,840
first of all because awareness really

00:29:56,320 --> 00:30:03,919
goes a long way second of all

00:29:59,840 --> 00:30:06,720
even if we're not experts us developers

00:30:03,919 --> 00:30:08,159
are very very good at using other

00:30:06,720 --> 00:30:11,600
people's knowledge

00:30:08,159 --> 00:30:11,919
even that we are even in areas we are

00:30:11,600 --> 00:30:15,440
not

00:30:11,919 --> 00:30:16,480
experts in now that sounds kind of

00:30:15,440 --> 00:30:19,600
surprising

00:30:16,480 --> 00:30:20,720
but think about it for a moment i for

00:30:19,600 --> 00:30:23,679
example

00:30:20,720 --> 00:30:24,799
am not an expert in writing but free

00:30:23,679 --> 00:30:28,399
code

00:30:24,799 --> 00:30:32,640
but i can use other people's knowledge

00:30:28,399 --> 00:30:35,200
by implementing automated tools such as

00:30:32,640 --> 00:30:38,320
unit tests and component tests and

00:30:35,200 --> 00:30:41,279
system tests and integration tests and

00:30:38,320 --> 00:30:41,279
whatever tests

00:30:41,440 --> 00:30:45,760
to help me reduce the number of bugs

00:30:44,080 --> 00:30:48,559
this will not be perfect

00:30:45,760 --> 00:30:50,640
but this will drastically reduce the

00:30:48,559 --> 00:30:53,760
number of bugs in my software

00:30:50,640 --> 00:30:54,000
even before any qa engineer takes a look

00:30:53,760 --> 00:30:57,440
at

00:30:54,000 --> 00:31:00,960
it security

00:30:57,440 --> 00:31:04,159
should be treated with the same mindset

00:31:00,960 --> 00:31:06,000
now this is not a sales pitch i'm not

00:31:04,159 --> 00:31:10,240
going to advocate

00:31:06,000 --> 00:31:14,399
to a worldsailer there are

00:31:10,240 --> 00:31:17,519
a bunch of really good

00:31:14,399 --> 00:31:18,240
security tools out there that can really

00:31:17,519 --> 00:31:21,440
help you

00:31:18,240 --> 00:31:24,880
develop more develop

00:31:21,440 --> 00:31:24,880
more secure applications

00:31:25,679 --> 00:31:29,440
there are several different ways of

00:31:27,519 --> 00:31:32,559
doing this and

00:31:29,440 --> 00:31:36,559
several different

00:31:32,559 --> 00:31:39,360
phases in a life cycle just might apply

00:31:36,559 --> 00:31:39,840
but at the very least the good tools

00:31:39,360 --> 00:31:43,360
will

00:31:39,840 --> 00:31:46,399
easily plug into your pipeline

00:31:43,360 --> 00:31:47,120
so if your pipeline does not have any

00:31:46,399 --> 00:31:50,080
sort of

00:31:47,120 --> 00:31:52,640
security considerations if you have a

00:31:50,080 --> 00:31:55,679
pristine pipeline that handles

00:31:52,640 --> 00:31:58,840
code quality with lenders and

00:31:55,679 --> 00:32:00,880
hospice tests with nothing for your

00:31:58,840 --> 00:32:04,000
secured

00:32:00,880 --> 00:32:04,559
nothing for your security you may just

00:32:04,000 --> 00:32:06,399
be

00:32:04,559 --> 00:32:10,320
overlooking a major part of your

00:32:06,399 --> 00:32:14,480
responsibility as a developer

00:32:10,320 --> 00:32:18,159
so find the two tools city and see how

00:32:14,480 --> 00:32:18,159
we integrate them into ufc

00:32:18,320 --> 00:32:22,320
with that i think i'm really running out

00:32:21,200 --> 00:32:26,399
of time

00:32:22,320 --> 00:32:29,279
so i just wanted a couple of planes

00:32:26,399 --> 00:32:31,120
so i powers top 10 project which i've

00:32:29,279 --> 00:32:34,000
been discussing

00:32:31,120 --> 00:32:36,000
the source code for all of my demos here

00:32:34,000 --> 00:32:39,039
and in fact for

00:32:36,000 --> 00:32:42,240
all of the for the entire top 10 list

00:32:39,039 --> 00:32:44,559
is available in my github and once again

00:32:42,240 --> 00:32:47,519
i cannot stress so small

00:32:44,559 --> 00:32:49,120
intentionally bad code intentionally

00:32:47,519 --> 00:32:51,600
vulnerable

00:32:49,120 --> 00:32:54,559
please do not copy paste it to any

00:32:51,600 --> 00:32:56,799
application you care about

00:32:54,559 --> 00:32:57,919
and of course just to give credit wait

00:32:56,799 --> 00:32:59,600
steer

00:32:57,919 --> 00:33:01,519
the curl which i've been using

00:32:59,600 --> 00:33:05,279
throughout this demos

00:33:01,519 --> 00:33:08,399
with that i am really really running out

00:33:05,279 --> 00:33:11,840
so if there are any questions

00:33:08,399 --> 00:33:11,840
and happily check them

00:33:23,440 --> 00:33:31,200
okay and if they are not i'll

00:33:28,159 --> 00:33:34,000
just take this opportunity to

00:33:31,200 --> 00:33:35,840
say thank you for listening thank you

00:33:34,000 --> 00:33:38,480
for your time

00:33:35,840 --> 00:33:40,799
and if anyone is interested in

00:33:38,480 --> 00:33:43,840
discussing these topics more

00:33:40,799 --> 00:33:46,240
feel free to reach out to me my

00:33:43,840 --> 00:33:46,240
email

00:33:47,120 --> 00:33:52,640
over here in the chat i'll be here

00:33:50,399 --> 00:33:55,440
for a couple of hours longer it's kind

00:33:52,640 --> 00:33:58,320
of late in my part of the world but

00:33:55,440 --> 00:33:59,840
shoot me up with an email or twitter or

00:33:58,320 --> 00:34:03,600
linkedin or whatever and i'll be

00:33:59,840 --> 00:34:05,440
happy to talk and once again

00:34:03,600 --> 00:34:21,839
thank you everyone for listening and

00:34:05,440 --> 00:34:21,839
thank you for your time

00:34:29,599 --> 00:34:34,960

YouTube URL: https://www.youtube.com/watch?v=6Z5hlgZQQt0


