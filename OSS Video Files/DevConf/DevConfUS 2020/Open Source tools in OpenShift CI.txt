Title: Open Source tools in OpenShift CI
Publication date: 2020-10-06
Playlist: DevConfUS 2020
Description: 
	Speaker: Andrew Kiselev

This session will demonstrate how open source tools (Prow, ansible) are used in OpenShift CI. You will see OpenShift CI operation from baremetal installer component prospective: job types, configuration files, test steps registry. The plan is to cover OpenShift CI components in the slides and give a brief demo of a baremetal installer CI job.
Captions: 
	00:00:00,320 --> 00:00:07,279
i was talking on youtube so uh

00:00:03,120 --> 00:00:10,800
here's uh our next presentation

00:00:07,279 --> 00:00:14,400
open source tools and openshift ci

00:00:10,800 --> 00:00:17,840
and i'll be presenting it and um

00:00:14,400 --> 00:00:20,880
in this case i'll be uh

00:00:17,840 --> 00:00:23,920
doing live presentation because

00:00:20,880 --> 00:00:28,560
the original slide deck which i

00:00:23,920 --> 00:00:28,560
uh recorded was a couple of

00:00:28,720 --> 00:00:34,480
things which i fixed later so to me

00:00:32,000 --> 00:00:36,719
it's uh better to share the latest and

00:00:34,480 --> 00:00:39,680
greatest

00:00:36,719 --> 00:00:41,520
so in this case let me just uh share my

00:00:39,680 --> 00:00:44,960
screen

00:00:41,520 --> 00:00:59,840
and actually let me just share my slides

00:00:44,960 --> 00:00:59,840
in case you want to follow

00:01:32,400 --> 00:01:41,840
there's a slide deck i'm going to use

00:01:34,720 --> 00:01:41,840
the international screen

00:01:47,680 --> 00:01:55,600
all right so first of all

00:01:50,720 --> 00:01:59,280
about a little bit about myself

00:01:55,600 --> 00:02:03,600
i work as a senior software engineer

00:01:59,280 --> 00:02:06,799
for office of cqr in red hat and

00:02:03,600 --> 00:02:10,720
we sometimes ask to help

00:02:06,799 --> 00:02:14,160
other teams uh within some

00:02:10,720 --> 00:02:17,840
in some cases which require some uh help

00:02:14,160 --> 00:02:19,520
external help so in my case it was um

00:02:17,840 --> 00:02:21,680
environmental openshift bare metal

00:02:19,520 --> 00:02:25,520
installer component and

00:02:21,680 --> 00:02:25,520
there was originally a pretty

00:02:25,680 --> 00:02:31,680
difficult situation with ci most

00:02:29,200 --> 00:02:32,400
test cases and test suites were failing

00:02:31,680 --> 00:02:36,080
over time

00:02:32,400 --> 00:02:38,160
and that's how i actually got into

00:02:36,080 --> 00:02:39,760
this interesting project and got

00:02:38,160 --> 00:02:42,879
familiar with

00:02:39,760 --> 00:02:43,599
openshift ci internals so the disclaimer

00:02:42,879 --> 00:02:46,160
is that

00:02:43,599 --> 00:02:47,200
most of this presentation will be

00:02:46,160 --> 00:02:50,160
provided from

00:02:47,200 --> 00:02:51,599
a single component prosecutive which is

00:02:50,160 --> 00:02:54,640
a bare metal installer

00:02:51,599 --> 00:02:57,760
and i'm not

00:02:54,640 --> 00:03:01,519
going to probably give you a complete

00:02:57,760 --> 00:03:04,800
picture of openshift ci universe because

00:03:01,519 --> 00:03:07,920
uh like one of uh previous presenter

00:03:04,800 --> 00:03:07,920
shared it's it's huge

00:03:08,239 --> 00:03:15,120
let's move on so today

00:03:11,280 --> 00:03:15,120
i want to

00:03:15,200 --> 00:03:24,239
review main moving parts of openshift ci

00:03:19,360 --> 00:03:24,239
brow and ci operator and

00:03:24,400 --> 00:03:30,959
i'm going to look

00:03:27,680 --> 00:03:31,680
deeper into parameter api and to end

00:03:30,959 --> 00:03:34,959
test

00:03:31,680 --> 00:03:37,200
so in this case we can go through

00:03:34,959 --> 00:03:39,599
components of this test look at the step

00:03:37,200 --> 00:03:42,640
register

00:03:39,599 --> 00:03:44,959
look at the hardware platform we use to

00:03:42,640 --> 00:03:48,080
run these tests

00:03:44,959 --> 00:03:48,480
and we also look at another open source

00:03:48,080 --> 00:03:52,400
tool

00:03:48,480 --> 00:03:56,879
we actually using in this ci flow

00:03:52,400 --> 00:04:00,000
which is concept and obviously some q a

00:03:56,879 --> 00:04:03,200
and the end of this presentation

00:04:00,000 --> 00:04:05,680
so we'll start from openshift city

00:04:03,200 --> 00:04:05,680
overview

00:04:06,319 --> 00:04:10,159
and the main component of openshift ci

00:04:09,200 --> 00:04:14,879
is a trial

00:04:10,159 --> 00:04:18,239
which is kubernetes-based cicd system

00:04:14,879 --> 00:04:21,040
native to kubernetes uranium

00:04:18,239 --> 00:04:22,639
kubernetes or in our case on openshift

00:04:21,040 --> 00:04:25,919
cluster

00:04:22,639 --> 00:04:28,400
and the strongest part of it

00:04:25,919 --> 00:04:29,440
is designed to scale with high number of

00:04:28,400 --> 00:04:32,880
jobs

00:04:29,440 --> 00:04:37,040
with very detailed policy enforcements

00:04:32,880 --> 00:04:40,560
and has a seamless github integration

00:04:37,040 --> 00:04:43,280
like we will see a little bit later it's

00:04:40,560 --> 00:04:45,120
very flexible accepting different

00:04:43,280 --> 00:04:49,759
commands which you can

00:04:45,120 --> 00:04:56,160
issue from your pr comments field and

00:04:49,759 --> 00:04:58,880
it does govern automatic vr merging

00:04:56,160 --> 00:04:59,280
so they are response to external events

00:04:58,880 --> 00:05:03,680
to

00:04:59,280 --> 00:05:03,680
execute jobs which can be some

00:05:04,160 --> 00:05:07,919
either chrome event or can be some

00:05:06,960 --> 00:05:11,520
command

00:05:07,919 --> 00:05:14,960
from github and the main types of jobs

00:05:11,520 --> 00:05:17,919
you can see inside bravo's press update

00:05:14,960 --> 00:05:19,039
which you see that gets executed every

00:05:17,919 --> 00:05:21,360
time

00:05:19,039 --> 00:05:23,199
you have any code changes inside pr

00:05:21,360 --> 00:05:25,759
before merge

00:05:23,199 --> 00:05:27,360
are made after the code is merged and

00:05:25,759 --> 00:05:30,720
periodic which

00:05:27,360 --> 00:05:33,199
runs on repositories on a scheduled

00:05:30,720 --> 00:05:33,199
basis

00:05:35,759 --> 00:05:44,080
if you look at inside brow architecture

00:05:40,800 --> 00:05:49,039
in connection into our openshift ci

00:05:44,080 --> 00:05:49,039
it's some event from github

00:05:49,520 --> 00:05:54,800
is triggering a web hook

00:05:52,800 --> 00:05:57,280
and there is a hook component inside

00:05:54,800 --> 00:06:01,039
brow which actually

00:05:57,280 --> 00:06:05,280
responds to such request

00:06:01,039 --> 00:06:08,319
we also interact

00:06:05,280 --> 00:06:10,080
with um end user

00:06:08,319 --> 00:06:12,160
sharing the final results there is a

00:06:10,080 --> 00:06:15,280
deck component inside brow

00:06:12,160 --> 00:06:18,960
and you can see the brow

00:06:15,280 --> 00:06:18,960
dashboard with the results

00:06:19,360 --> 00:06:25,120
blank is responsible to uh starting

00:06:22,560 --> 00:06:25,919
uh multi-engine execution for ci

00:06:25,120 --> 00:06:30,160
components

00:06:25,919 --> 00:06:34,400
uh tight it's something which you

00:06:30,160 --> 00:06:38,800
will use for merging recall for uh

00:06:34,400 --> 00:06:42,560
final merge it was successful

00:06:38,800 --> 00:06:45,680
sinker does uh do some stale jobs and

00:06:42,560 --> 00:06:45,680
making sure everything

00:06:46,639 --> 00:06:50,800
as it gets without any garbage left

00:06:49,360 --> 00:06:54,400
behind

00:06:50,800 --> 00:06:58,319
and uh on on this background you can see

00:06:54,400 --> 00:07:02,720
end-to-end test our usual design

00:06:58,319 --> 00:07:04,479
for openshift which gets executed

00:07:02,720 --> 00:07:05,919
uh every time in order to have

00:07:04,479 --> 00:07:08,560
successful match

00:07:05,919 --> 00:07:08,560
of the code

00:07:10,240 --> 00:07:13,919
the next slide is something which i

00:07:12,880 --> 00:07:15,440
borrowed

00:07:13,919 --> 00:07:17,440
from the external source there's a

00:07:15,440 --> 00:07:21,120
reference below

00:07:17,440 --> 00:07:26,319
and this one is

00:07:21,120 --> 00:07:26,319
something which gives you a very

00:07:26,800 --> 00:07:33,599
live picture of what you can

00:07:30,000 --> 00:07:36,000
see what components uh are inside

00:07:33,599 --> 00:07:37,360
private cluster and by the way prowl is

00:07:36,000 --> 00:07:40,880
a leading edge of a ship

00:07:37,360 --> 00:07:40,880
that's why you see some

00:07:41,360 --> 00:07:46,319
marine picture here with a sheep with

00:07:46,879 --> 00:07:51,440
some other components like sinker greens

00:07:49,199 --> 00:07:53,680
of dead jokes like i mentioned for

00:07:51,440 --> 00:07:56,000
blank launching a container for each

00:07:53,680 --> 00:07:56,000
tooth

00:07:57,520 --> 00:08:02,800
so uh brow is just one of the components

00:08:01,360 --> 00:08:06,720
it's a

00:08:02,800 --> 00:08:10,160
big bigger picture so to speak uh and

00:08:06,720 --> 00:08:13,919
ci operator is something which

00:08:10,160 --> 00:08:16,639
we interact most inside

00:08:13,919 --> 00:08:17,199
openshift ci system if we need to create

00:08:16,639 --> 00:08:21,599
any

00:08:17,199 --> 00:08:25,199
tests for them so ci operator is a

00:08:21,599 --> 00:08:27,599
openshift native tool which automates

00:08:25,199 --> 00:08:29,199
of building and testing openshift

00:08:27,599 --> 00:08:33,120
components

00:08:29,199 --> 00:08:35,680
and almost every openshift ci

00:08:33,120 --> 00:08:36,399
job is supposed to run an instance of a

00:08:35,680 --> 00:08:40,399
ci

00:08:36,399 --> 00:08:43,440
operator it's basically

00:08:40,399 --> 00:08:47,360
uh when you look uh inside under hood

00:08:43,440 --> 00:08:51,760
uh every component git repository

00:08:47,360 --> 00:08:54,880
has a ci operator config file

00:08:51,760 --> 00:08:57,920
and uh it translates automatically

00:08:54,880 --> 00:09:01,279
and prowl job to execute

00:08:57,920 --> 00:09:01,279
a certain set of tests

00:09:01,920 --> 00:09:05,760
i see a operator both builds images

00:09:04,880 --> 00:09:10,160
required

00:09:05,760 --> 00:09:10,160
and run tests for this images

00:09:13,680 --> 00:09:20,000
i see a operator config file

00:09:17,200 --> 00:09:21,440
this is something which is required to

00:09:20,000 --> 00:09:24,800
create

00:09:21,440 --> 00:09:28,320
any tests in openshift ci

00:09:24,800 --> 00:09:31,839
it defines main things which images

00:09:28,320 --> 00:09:36,880
will be built to run the tests

00:09:31,839 --> 00:09:40,560
which tests to be executed and

00:09:36,880 --> 00:09:42,720
which images will be promoted in case of

00:09:40,560 --> 00:09:44,959
success successful execution of the

00:09:42,720 --> 00:09:47,200
tests

00:09:44,959 --> 00:09:49,120
as i mentioned before proud jobs are

00:09:47,200 --> 00:09:50,480
automatically generated from this config

00:09:49,120 --> 00:09:54,000
file and

00:09:50,480 --> 00:09:55,839
it it's done usually by running

00:09:54,000 --> 00:09:57,360
the following commands makes your

00:09:55,839 --> 00:10:00,399
operator conflict and

00:09:57,360 --> 00:10:05,120
make jobs prior to checking

00:10:00,399 --> 00:10:07,760
in your files in the repository

00:10:05,120 --> 00:10:08,560
and the repository itself uh i provided

00:10:07,760 --> 00:10:12,240
link here

00:10:08,560 --> 00:10:15,600
it's uh under openshift release

00:10:12,240 --> 00:10:19,839
ci operator that's where we store

00:10:15,600 --> 00:10:19,839
uh contact files

00:10:21,040 --> 00:10:25,279
i provided a few references here without

00:10:23,440 --> 00:10:26,959
waiting till the end of presentation so

00:10:25,279 --> 00:10:30,720
in this case we can

00:10:26,959 --> 00:10:34,160
just see the ci cluster used to

00:10:30,720 --> 00:10:37,440
run openshift ci dashboard

00:10:34,160 --> 00:10:41,120
which was actually mentioned before in

00:10:37,440 --> 00:10:46,640
one of the slides i'll just quickly show

00:10:41,120 --> 00:10:49,680
how it looks

00:10:46,640 --> 00:10:50,560
so here we have a number of uh fresh

00:10:49,680 --> 00:10:52,880
jobs

00:10:50,560 --> 00:10:54,160
uh without any filtering but if needed

00:10:52,880 --> 00:10:55,279
there is a there's all kinds of

00:10:54,160 --> 00:11:01,839
filtering we can apply

00:10:55,279 --> 00:11:01,839
in the upper part of this dashboard

00:11:02,160 --> 00:11:07,200
we'll look into more details into the

00:11:04,560 --> 00:11:11,440
tree and see operator configs

00:11:07,200 --> 00:11:11,440
in the demo part of the presentation

00:11:12,640 --> 00:11:16,160
and by the way another useful link here

00:11:15,200 --> 00:11:20,640
is

00:11:16,160 --> 00:11:24,560
open shift uh radius status

00:11:20,640 --> 00:11:24,560
also presented wonderful components

00:11:26,320 --> 00:11:32,800
and last but not least ci search engine

00:11:29,920 --> 00:11:33,200
it's not technically part of the role

00:11:32,800 --> 00:11:36,079
but

00:11:33,200 --> 00:11:37,360
uh it does allow you to search on

00:11:36,079 --> 00:11:39,920
openshift

00:11:37,360 --> 00:11:41,040
results so if there is certain failure

00:11:39,920 --> 00:11:44,800
you can use

00:11:41,040 --> 00:11:46,959
regex search partner here and find it

00:11:44,800 --> 00:11:49,360
within say certain number of days and a

00:11:46,959 --> 00:11:52,480
certain number of jobs

00:11:49,360 --> 00:11:53,040
that you want to review it's very useful

00:11:52,480 --> 00:11:57,839
for

00:11:53,040 --> 00:11:57,839
debugging purposes

00:11:59,120 --> 00:12:07,200
all right now off to our bare metal

00:12:03,440 --> 00:12:10,240
api end-to-end test and

00:12:07,200 --> 00:12:14,560
first of all what is it about

00:12:10,240 --> 00:12:17,920
this is one of uh our end-to-end tests

00:12:14,560 --> 00:12:19,279
executed by many at this point it's

00:12:17,920 --> 00:12:21,360
already

00:12:19,279 --> 00:12:23,360
probably 10 15 completely more

00:12:21,360 --> 00:12:26,320
open-shift components

00:12:23,360 --> 00:12:26,320
and repositories

00:12:26,720 --> 00:12:34,000
it uses standard df scripts

00:12:30,800 --> 00:12:37,279
deployment which is essentially

00:12:34,000 --> 00:12:39,279
open shift installation in on

00:12:37,279 --> 00:12:40,959
virtual machines which can be deployed

00:12:39,279 --> 00:12:42,639
on a single physical server

00:12:40,959 --> 00:12:45,200
it does not require any additional

00:12:42,639 --> 00:12:45,200
components

00:12:45,680 --> 00:12:48,800
by default it does three masters to

00:12:47,600 --> 00:12:51,519
workers

00:12:48,800 --> 00:12:51,519
deployments

00:12:53,830 --> 00:12:58,959
[Music]

00:12:55,519 --> 00:13:03,279
api test runs

00:12:58,959 --> 00:13:05,680
subset of openshift conformance tests

00:13:03,279 --> 00:13:07,839
currently it's if i remember right

00:13:05,680 --> 00:13:12,160
around 170

00:13:07,839 --> 00:13:14,560
test cases give or take

00:13:12,160 --> 00:13:17,360
originally it started from very low

00:13:14,560 --> 00:13:18,800
amount maybe like five test cases

00:13:17,360 --> 00:13:20,480
but obviously it's not all of them

00:13:18,800 --> 00:13:23,440
because the whole amount will be

00:13:20,480 --> 00:13:25,680
probably 2007.

00:13:23,440 --> 00:13:27,360
the reason why it's not often because

00:13:25,680 --> 00:13:30,240
rust through certain limitations

00:13:27,360 --> 00:13:30,880
running openshift tests in this virtual

00:13:30,240 --> 00:13:34,639
environment

00:13:30,880 --> 00:13:37,200
in depth

00:13:34,639 --> 00:13:37,839
so we choose mostly a core and critical

00:13:37,200 --> 00:13:42,480
test for

00:13:37,839 --> 00:13:42,480
to test a cluster functionality

00:13:45,839 --> 00:13:50,399
here's how our tests test workflow looks

00:13:48,720 --> 00:13:54,000
uh we have this

00:13:50,399 --> 00:13:54,639
antenna parameter api test in open shift

00:13:54,000 --> 00:13:59,120
ci

00:13:54,639 --> 00:14:03,360
and openshift knight test image stream

00:13:59,120 --> 00:14:05,920
for dev skates we have that packet

00:14:03,360 --> 00:14:06,880
cloud which is um basically

00:14:05,920 --> 00:14:10,399
infrastructure

00:14:06,880 --> 00:14:13,680
as a service a cloud where you can

00:14:10,399 --> 00:14:16,720
borrow the server please

00:14:13,680 --> 00:14:19,920
have the configuration whatever you want

00:14:16,720 --> 00:14:22,160
and you probe

00:14:19,920 --> 00:14:24,160
the running operating system whatever

00:14:22,160 --> 00:14:28,079
you choose in our case it's

00:14:24,160 --> 00:14:28,079
centered as paid by default

00:14:28,320 --> 00:14:35,040
so for this server we first thing we

00:14:31,120 --> 00:14:37,199
acquire this provisional packet server

00:14:35,040 --> 00:14:38,240
uh using by the way ansible sleep like

00:14:37,199 --> 00:14:41,440
we see

00:14:38,240 --> 00:14:45,519
a few steps ahead oh

00:14:41,440 --> 00:14:49,040
uh this your latest uh devscapes image

00:14:45,519 --> 00:14:52,480
from devskate's openshift repository

00:14:49,040 --> 00:14:55,839
and copy resources to the server

00:14:52,480 --> 00:14:58,959
we run devscapes installation which

00:14:55,839 --> 00:15:00,800
is actually just a pure make command

00:14:58,959 --> 00:15:02,000
with maybe some clicks in the

00:15:00,800 --> 00:15:05,440
configuration by

00:15:02,000 --> 00:15:08,240
uh end-to-end metal api test

00:15:05,440 --> 00:15:10,720
and then we run our conformance subset

00:15:08,240 --> 00:15:13,760
of test cases against the cluster

00:15:10,720 --> 00:15:17,440
and the millions we copy

00:15:13,760 --> 00:15:21,600
brow logs and test results back

00:15:17,440 --> 00:15:24,639
to uh the system to shift cluster

00:15:21,600 --> 00:15:27,360
running ci and we

00:15:24,639 --> 00:15:30,079
provision like a server using another

00:15:27,360 --> 00:15:30,079
unsubscribe

00:15:32,320 --> 00:15:38,720
and another thing to consider in

00:15:35,600 --> 00:15:42,079
in this design we run our

00:15:38,720 --> 00:15:44,000
list tests and uh indian

00:15:42,079 --> 00:15:46,320
nato ipa is written as a multi-stage

00:15:44,000 --> 00:15:46,320
test

00:15:46,959 --> 00:15:52,320
which was introduced literally i would

00:15:49,600 --> 00:15:56,000
say about six months ago

00:15:52,320 --> 00:15:58,160
by our dbtp team and

00:15:56,000 --> 00:15:59,279
the main idea is it has a modular test

00:15:58,160 --> 00:16:01,920
design which

00:15:59,279 --> 00:16:03,279
allows users to create new tests

00:16:01,920 --> 00:16:06,639
combining smaller

00:16:03,279 --> 00:16:10,800
steps so in this case step

00:16:06,639 --> 00:16:13,440
is the smallest executable unit and

00:16:10,800 --> 00:16:14,720
then we have chains and then we have

00:16:13,440 --> 00:16:18,079
workflows as a

00:16:14,720 --> 00:16:22,320
biggest element of this multi-stage

00:16:18,079 --> 00:16:25,839
test cases so all steps are

00:16:22,320 --> 00:16:28,560
stored in so-called test step registry

00:16:25,839 --> 00:16:29,920
and here's the url and the open shift

00:16:28,560 --> 00:16:33,440
release

00:16:29,920 --> 00:16:33,440
see operator step register

00:16:34,399 --> 00:16:40,079
and the good thing is

00:16:37,440 --> 00:16:40,800
it's it's now includes a pretty

00:16:40,079 --> 00:16:44,480
extensive

00:16:40,800 --> 00:16:46,959
uh help the help is

00:16:44,480 --> 00:16:48,240
provided here on this url and i

00:16:46,959 --> 00:16:50,570
identified it

00:16:48,240 --> 00:16:52,079
already but in case it's

00:16:50,570 --> 00:16:54,240
[Music]

00:16:52,079 --> 00:16:55,680
it does include pretty detailed

00:16:54,240 --> 00:16:59,360
explanation of

00:16:55,680 --> 00:17:02,839
every way you can use

00:16:59,360 --> 00:17:08,000
step registry and openshift ci

00:17:02,839 --> 00:17:10,640
engineer with all possible examples of

00:17:08,000 --> 00:17:13,760
ci operator config files environment

00:17:10,640 --> 00:17:13,760
variables etc

00:17:16,839 --> 00:17:19,839
etc

00:17:20,240 --> 00:17:25,280
so for multi-stage steps this slide just

00:17:23,520 --> 00:17:29,760
explains how we

00:17:25,280 --> 00:17:32,799
pass our information between steps and

00:17:29,760 --> 00:17:36,240
feed some information from openshift ci

00:17:32,799 --> 00:17:38,240
into this step in our case it's all

00:17:36,240 --> 00:17:42,320
governed by

00:17:38,240 --> 00:17:43,280
environment variables so cluster profile

00:17:42,320 --> 00:17:46,000
directory

00:17:43,280 --> 00:17:46,559
that's something where we store secrets

00:17:46,000 --> 00:17:49,840
for

00:17:46,559 --> 00:17:53,039
a parameter idea test

00:17:49,840 --> 00:17:55,120
and we use a shared directory to share

00:17:53,039 --> 00:17:56,160
our information between steps if we have

00:17:55,120 --> 00:18:00,080
more than one

00:17:56,160 --> 00:18:03,120
step in a row and in the end usually

00:18:00,080 --> 00:18:04,240
the final step writes its information or

00:18:03,120 --> 00:18:06,320
intermediate step maybe

00:18:04,240 --> 00:18:07,520
also writing information in public

00:18:06,320 --> 00:18:10,960
directory to

00:18:07,520 --> 00:18:12,960
store our logs and wait uh shared with

00:18:10,960 --> 00:18:16,320
the

00:18:12,960 --> 00:18:17,600
brow and store it and share it with the

00:18:16,320 --> 00:18:20,799
customer so

00:18:17,600 --> 00:18:20,799
where we started this test

00:18:24,240 --> 00:18:32,320
entrance metal api steps and a workflow

00:18:29,280 --> 00:18:32,320
as i mentioned we

00:18:33,440 --> 00:18:37,679
designed a special specific workflow for

00:18:35,440 --> 00:18:41,600
this and

00:18:37,679 --> 00:18:42,000
based on the tests that definition would

00:18:41,600 --> 00:18:45,440
have

00:18:42,000 --> 00:18:46,799
three steps steps designed to set up the

00:18:45,440 --> 00:18:49,679
environment

00:18:46,799 --> 00:18:51,520
i have test step which effectively

00:18:49,679 --> 00:18:55,039
executes test

00:18:51,520 --> 00:18:57,600
steps and post it's something for

00:18:55,039 --> 00:19:00,400
cleanup and

00:18:57,600 --> 00:19:02,799
something which always executed even if

00:19:00,400 --> 00:19:06,240
any of the previous

00:19:02,799 --> 00:19:07,200
stages fail so in this case we get a

00:19:06,240 --> 00:19:12,799
clean system

00:19:07,200 --> 00:19:12,799
and or not have any garbage left behind

00:19:15,679 --> 00:19:22,840
and here let's uh i i just wanted to

00:19:19,760 --> 00:19:24,640
spend maybe a minute looking at

00:19:22,840 --> 00:19:38,480
packet.net

00:19:24,640 --> 00:19:43,679
this is

00:19:38,480 --> 00:19:43,679
so this is the interface we use

00:19:43,760 --> 00:19:46,080
and

00:19:48,799 --> 00:19:55,280
in our case we have a dedicated project

00:19:51,840 --> 00:19:58,720
to run very metal

00:19:55,280 --> 00:19:59,520
tests we're just making sure that i'm

00:19:58,720 --> 00:20:03,120
very perfect

00:19:59,520 --> 00:20:08,080
and you can see there are a few servers

00:20:03,120 --> 00:20:11,440
already running a certain configuration

00:20:08,080 --> 00:20:15,039
most of them in the same data center and

00:20:11,440 --> 00:20:15,039
we use certain set of tags to

00:20:15,120 --> 00:20:21,200
actually better understand

00:20:18,400 --> 00:20:22,240
what crowd job actually hdpg in this

00:20:21,200 --> 00:20:25,120
server so in this

00:20:22,240 --> 00:20:27,440
in case of failure to debug it using the

00:20:25,120 --> 00:20:27,440
tags

00:20:33,120 --> 00:20:40,400
so now a few uh things about ansible

00:20:36,640 --> 00:20:42,640
uh where it is in this picture uh

00:20:40,400 --> 00:20:44,320
so i will not probably spend too much

00:20:42,640 --> 00:20:47,039
time

00:20:44,320 --> 00:20:47,440
telling you what hansboro is because

00:20:47,039 --> 00:20:49,200
it's

00:20:47,440 --> 00:20:50,640
greatly widely known and some of the

00:20:49,200 --> 00:20:54,320
previous presentations went

00:20:50,640 --> 00:20:57,360
integrated about ansible tower

00:20:54,320 --> 00:21:02,080
so in our case ansible

00:20:57,360 --> 00:21:05,280
is another open source tool

00:21:02,080 --> 00:21:08,400
which is conveniently fit openshift

00:21:05,280 --> 00:21:11,600
ci environment and namely

00:21:08,400 --> 00:21:15,440
we use ansible

00:21:11,600 --> 00:21:18,559
in order to preserve

00:21:15,440 --> 00:21:21,440
and prepare packet.net server

00:21:18,559 --> 00:21:23,840
for the test and then clean up and

00:21:21,440 --> 00:21:27,039
released

00:21:23,840 --> 00:21:30,159
so in this case we'll proceed to a

00:21:27,039 --> 00:21:33,840
demo part of this presentation

00:21:30,159 --> 00:21:37,840
and i have

00:21:33,840 --> 00:21:37,840
let's see if it open right here

00:21:42,840 --> 00:21:49,520
yeah so here we have some

00:21:46,240 --> 00:21:52,559
setup command to uh reserve

00:21:49,520 --> 00:21:56,640
this system and

00:21:52,559 --> 00:21:58,720
uh here actually how some of our steps

00:21:56,640 --> 00:22:00,640
in step register look like as you can

00:21:58,720 --> 00:22:01,760
see it's under this at a rather step

00:22:00,640 --> 00:22:05,520
register

00:22:01,760 --> 00:22:07,760
and in this case it's set up for packet

00:22:05,520 --> 00:22:08,880
the puffiness kind of explains what it

00:22:07,760 --> 00:22:11,840
does and

00:22:08,880 --> 00:22:12,799
naming convention is to follow this path

00:22:11,840 --> 00:22:14,240
and

00:22:12,799 --> 00:22:17,120
essentially every step of the shell

00:22:14,240 --> 00:22:20,960
script but in our case

00:22:17,120 --> 00:22:24,159
it does have embedded ansible

00:22:20,960 --> 00:22:26,960
which is using packet

00:22:24,159 --> 00:22:28,080
server module which is supported by

00:22:26,960 --> 00:22:31,520
packet.net

00:22:28,080 --> 00:22:33,919
and it gets updated whenever they change

00:22:31,520 --> 00:22:36,320
any of the apis so in this case we are

00:22:33,919 --> 00:22:38,720
fully

00:22:36,320 --> 00:22:41,840
isolated from any possible breakage in

00:22:38,720 --> 00:22:41,840
this case

00:22:42,000 --> 00:22:48,640
and it goes

00:22:45,120 --> 00:22:52,080
reserving the server and

00:22:48,640 --> 00:22:52,640
reporting the failure if something goes

00:22:52,080 --> 00:22:55,679
wrong

00:22:52,640 --> 00:23:00,000
we have notifications sent straight to

00:22:55,679 --> 00:23:00,000
dislike channel for perimeter installer

00:23:00,320 --> 00:23:06,840
and similar we have

00:23:03,840 --> 00:23:08,159
environmental ds packet teardown

00:23:06,840 --> 00:23:11,440
commands

00:23:08,159 --> 00:23:15,360
again cmos structure shell script with

00:23:11,440 --> 00:23:18,400
answer bone side which

00:23:15,360 --> 00:23:21,760
does tear down

00:23:18,400 --> 00:23:24,960
for a server once we're done with ci

00:23:21,760 --> 00:23:28,640
execution with where metal

00:23:24,960 --> 00:23:30,960
gears test form and again

00:23:28,640 --> 00:23:32,320
in case of any headers we'll get a

00:23:30,960 --> 00:23:36,480
notification

00:23:32,320 --> 00:23:39,280
sent in this lecture

00:23:36,480 --> 00:23:39,280
so let's see

00:23:41,840 --> 00:23:46,000
what else i wanted to highlight here oh

00:23:44,799 --> 00:23:49,360
and uh

00:23:46,000 --> 00:23:51,360
another interesting item in this

00:23:49,360 --> 00:23:54,400
presentation

00:23:51,360 --> 00:23:57,600
the pr test flow

00:23:54,400 --> 00:23:59,200
how it looks like from say a

00:23:57,600 --> 00:24:00,640
test developer or ci developer

00:23:59,200 --> 00:24:02,159
perspective how you interact with

00:24:00,640 --> 00:24:05,200
systems

00:24:02,159 --> 00:24:09,039
so in this case originally i have uh

00:24:05,200 --> 00:24:13,600
this uh up here but uh right now it's

00:24:09,039 --> 00:24:16,559
it was already merged so i'll just

00:24:13,600 --> 00:24:17,200
leave the live one in this presentation

00:24:16,559 --> 00:24:20,400
and

00:24:17,200 --> 00:24:24,480
in this case um

00:24:20,400 --> 00:24:25,120
we have it right here and i created this

00:24:24,480 --> 00:24:28,880
uh

00:24:25,120 --> 00:24:32,799
sample here just a showcase of uh

00:24:28,880 --> 00:24:36,000
day-to-day work you may need to

00:24:32,799 --> 00:24:38,880
perform inside of the components here

00:24:36,000 --> 00:24:40,960
so in this case we may need to tweak a

00:24:38,880 --> 00:24:44,559
number of test cases

00:24:40,960 --> 00:24:47,840
and uh let me just

00:24:44,559 --> 00:24:47,840
keep this

00:24:49,200 --> 00:25:01,840
push through see some action

00:24:53,600 --> 00:25:01,840
from github and from browser

00:25:06,320 --> 00:25:13,840
so in this case i made some change then

00:25:10,320 --> 00:25:15,600
one of my teammates made another change

00:25:13,840 --> 00:25:19,039
in the list and i have to

00:25:15,600 --> 00:25:22,240
rebase and resolve some conflicts uh

00:25:19,039 --> 00:25:23,200
for spr but for our purpose it's pretty

00:25:22,240 --> 00:25:26,320
much

00:25:23,200 --> 00:25:29,840
irrelevant which i can just see

00:25:26,320 --> 00:25:31,039
what's going on and um why it was just

00:25:29,840 --> 00:25:34,400
pushing the

00:25:31,039 --> 00:25:37,600
updated version of my code and

00:25:34,400 --> 00:25:40,960
in this case we'll see the

00:25:37,600 --> 00:25:44,240
automated ci test execution

00:25:40,960 --> 00:25:47,440
new resume uh running here

00:25:44,240 --> 00:25:49,360
and hopefully we will see some results

00:25:47,440 --> 00:25:50,799
pretty early in a few seconds because

00:25:49,360 --> 00:25:54,000
depending on the test

00:25:50,799 --> 00:25:58,080
uh case it may take from say

00:25:54,000 --> 00:26:00,159
several seconds to in this in case of uh

00:25:58,080 --> 00:26:01,600
internet metal api it will probably take

00:26:00,159 --> 00:26:03,760
hour and a half so

00:26:01,600 --> 00:26:06,000
we will obviously not wait until the end

00:26:03,760 --> 00:26:11,840
of this execution

00:26:06,000 --> 00:26:11,840
but install see how it starts

00:26:17,279 --> 00:26:21,120
as you can see that some successful

00:26:20,240 --> 00:26:24,240
tests already

00:26:21,120 --> 00:26:28,240
mark the search but this is basically

00:26:24,240 --> 00:26:31,279
uh checks by uh

00:26:28,240 --> 00:26:34,640
format of the files say ci corners etc

00:26:31,279 --> 00:26:38,400
etc so the interesting part will be

00:26:34,640 --> 00:26:39,520
actually some the the entrance metal ipa

00:26:38,400 --> 00:26:42,799
test

00:26:39,520 --> 00:26:47,200
which is still in painting state

00:26:42,799 --> 00:26:50,480
and let's see what how it looks like

00:26:47,200 --> 00:26:53,440
so we don't see yet any locks here

00:26:50,480 --> 00:26:53,919
but as we go through execution it will

00:26:53,440 --> 00:26:57,520
be

00:26:53,919 --> 00:26:59,279
here you may be interested to look in

00:26:57,520 --> 00:27:02,080
artifacts directory

00:26:59,279 --> 00:27:03,840
in the end or for the purpose of this

00:27:02,080 --> 00:27:06,640
presentation i can just look at the

00:27:03,840 --> 00:27:07,600
logs instead of this painting look at

00:27:06,640 --> 00:27:11,279
some previous

00:27:07,600 --> 00:27:13,679
execution which is 1 hour 40 minutes

00:27:11,279 --> 00:27:14,400
so if we if we wait all the way to the

00:27:13,679 --> 00:27:17,679
end we'll see

00:27:14,400 --> 00:27:20,320
something like this there's

00:27:17,679 --> 00:27:22,080
always one fragi test but otherwise most

00:27:20,320 --> 00:27:25,200
of the

00:27:22,080 --> 00:27:26,320
test cases which are supposed to run

00:27:25,200 --> 00:27:29,360
here past

00:27:26,320 --> 00:27:33,200
and from my control it's a

00:27:29,360 --> 00:27:33,200
green brand so this week successfully

00:27:33,360 --> 00:27:40,480
and artifacts directly in this case

00:27:37,360 --> 00:27:42,559
have all kinds of logs and

00:27:40,480 --> 00:27:43,760
in our case if we look at the test case

00:27:42,559 --> 00:27:48,240
log since on the

00:27:43,760 --> 00:27:51,360
internet method api

00:27:48,240 --> 00:27:54,000
every every step of the

00:27:51,360 --> 00:27:55,279
test flow produce its own directory in

00:27:54,000 --> 00:27:57,679
this case

00:27:55,279 --> 00:27:59,360
like it's set up like a teardown by the

00:27:57,679 --> 00:28:02,159
way if you look at the ansible

00:27:59,360 --> 00:28:03,279
how it looks like from logs perspective

00:28:02,159 --> 00:28:07,200
it's not

00:28:03,279 --> 00:28:11,039
probably anything interesting because

00:28:07,200 --> 00:28:16,159
in in the interest of

00:28:11,039 --> 00:28:18,399
securing our environment we don't really

00:28:16,159 --> 00:28:21,039
share too much information from ansible

00:28:18,399 --> 00:28:21,039
in the works

00:28:21,840 --> 00:28:31,120
but for the test steps it's more

00:28:23,440 --> 00:28:33,200
detailed for actual test execution

00:28:31,120 --> 00:28:34,880
so you can see all the test cases

00:28:33,200 --> 00:28:37,679
started

00:28:34,880 --> 00:28:40,240
fast and if you scroll down it's

00:28:37,679 --> 00:28:40,240
probably more

00:28:42,840 --> 00:28:45,840
details

00:28:49,520 --> 00:28:55,679
so this is pretty much

00:28:52,960 --> 00:28:57,440
all what i wanted to share for today and

00:28:55,679 --> 00:29:00,399
in the end of this presentation

00:28:57,440 --> 00:29:02,799
you can see a more fundamental set of

00:29:00,399 --> 00:29:06,480
references

00:29:02,799 --> 00:29:10,840
again the link to

00:29:06,480 --> 00:29:13,520
ci steps documentation which we saw

00:29:10,840 --> 00:29:16,240
recently

00:29:13,520 --> 00:29:18,159
environmental ipi starts in the

00:29:16,240 --> 00:29:22,000
repository

00:29:18,159 --> 00:29:26,080
and very detailed openshift

00:29:22,000 --> 00:29:30,000
ci doc is written by our team

00:29:26,080 --> 00:29:33,039
knight deployment for barometer api

00:29:30,000 --> 00:29:36,159
it's our code survival guide for

00:29:33,039 --> 00:29:37,279
ci and that's how one of the sub sub

00:29:36,159 --> 00:29:40,880
nodes

00:29:37,279 --> 00:29:44,159
tells us

00:29:40,880 --> 00:29:47,520
and uh at this point we are done with uh

00:29:44,159 --> 00:29:50,399
my presentation and uh i'm open to

00:29:47,520 --> 00:29:55,840
any questions please feel free to type

00:29:50,399 --> 00:29:55,840
your questions in the chat window

00:30:09,360 --> 00:30:12,480
actually i did some dry run of this

00:30:11,360 --> 00:30:15,360
presentation before in

00:30:12,480 --> 00:30:18,080
our tech talk and in this case it's kind

00:30:15,360 --> 00:30:18,080
of trying to

00:30:19,120 --> 00:30:28,080
already note what what probably will be

00:30:23,840 --> 00:30:28,080
asked in some cases

00:30:29,200 --> 00:30:35,360
all right so in this case you have my

00:30:32,159 --> 00:30:39,120
presentation slide deck

00:30:35,360 --> 00:30:39,760
which i probably will still keep up to

00:30:39,120 --> 00:30:43,200
date

00:30:39,760 --> 00:30:46,640
uh in case of uh any

00:30:43,200 --> 00:30:49,520
new changes in openshift ca

00:30:46,640 --> 00:30:51,679
it's it's very uh dynamic system to a

00:30:49,520 --> 00:30:54,399
degree and

00:30:51,679 --> 00:30:56,080
some new stuff is literally getting

00:30:54,399 --> 00:30:59,120
introduced

00:30:56,080 --> 00:31:02,240
if not daily but monthly basis

00:30:59,120 --> 00:31:04,240
so i highly recommend again that link

00:31:02,240 --> 00:31:05,279
which i shared on the staff register

00:31:04,240 --> 00:31:08,240
because now

00:31:05,279 --> 00:31:09,200
uh openshift cit is trying to keep it up

00:31:08,240 --> 00:31:12,320
to date and

00:31:09,200 --> 00:31:18,480
if there is anything new it's usually

00:31:12,320 --> 00:31:20,440
getting documented here

00:31:18,480 --> 00:31:23,440
so thank you very much for your

00:31:20,440 --> 00:31:23,440

YouTube URL: https://www.youtube.com/watch?v=yHcvWgws5rU


