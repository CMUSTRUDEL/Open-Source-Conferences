Title: Better security for Cloud, IoT, and the Edge: Enarx
Publication date: 2020-10-06
Playlist: DevConfUS 2020
Description: 
	Speakers: Nathaniel McCallum & Mike Bursell

Deploying applications to the Cloud (or IoT, or the Edge) is all very well ... until you start running sensitive workloads. Can you trust the OS? The hypervisor? The stack? The cloud provider? The host owner? We all know that the answer to all of these is not always "yes": Enarx is a project using the hardware-based secuirty of TEEs (Trusted Execution Environments), to reduce the number of components and parties you need to trust. Find out how it works, why it uses WebAssembly for your runtime, and how to contribute.
Captions: 
	00:00:00,480 --> 00:00:06,560
right um well welcome folks to uh

00:00:03,439 --> 00:00:08,880
this uh this session um on uh

00:00:06,560 --> 00:00:09,599
nrx a uh an open source project which

00:00:08,880 --> 00:00:12,480
we're very

00:00:09,599 --> 00:00:13,200
proud to be presenting um i'm mike

00:00:12,480 --> 00:00:14,639
lassell

00:00:13,200 --> 00:00:16,800
i'm one of the co-founders of the

00:00:14,639 --> 00:00:19,920
project and with me is nathaniel

00:00:16,800 --> 00:00:23,600
nathaniel hello everyone

00:00:19,920 --> 00:00:25,359
welcome from the lake yeah nathaniel is

00:00:23,600 --> 00:00:26,960
is on pto he's actually taking some

00:00:25,359 --> 00:00:27,279
leaves so he's dialed in from the lake

00:00:26,960 --> 00:00:30,000
so

00:00:27,279 --> 00:00:30,800
um if you hear lapping of water and feel

00:00:30,000 --> 00:00:33,280
very jealous

00:00:30,800 --> 00:00:33,840
um that's what it is um i encourage you

00:00:33,280 --> 00:00:36,640
to

00:00:33,840 --> 00:00:37,680
make the um the slides as big as

00:00:36,640 --> 00:00:41,360
possible we're gonna have

00:00:37,680 --> 00:00:42,239
demo um slides in a bit with a fairly

00:00:41,360 --> 00:00:44,480
small text

00:00:42,239 --> 00:00:45,920
so um we will walk you through them of

00:00:44,480 --> 00:00:47,360
course but if you can

00:00:45,920 --> 00:00:49,600
make them as big as possible double

00:00:47,360 --> 00:00:53,440
click on the on screen and

00:00:49,600 --> 00:00:56,640
that should help right so um

00:00:53,440 --> 00:00:58,559
let's let's carry on so uh

00:00:56,640 --> 00:00:59,680
first of all a little bit of an overview

00:00:58,559 --> 00:01:01,920
of anarchs

00:00:59,680 --> 00:01:02,800
nathaniel please tell me if the slides

00:01:01,920 --> 00:01:06,320
aren't moving on i

00:01:02,800 --> 00:01:08,799
i assume they are so just a five

00:01:06,320 --> 00:01:10,080
five but over to to give you a basic

00:01:08,799 --> 00:01:11,920
intro we want to

00:01:10,080 --> 00:01:13,520
focus really on the technical here but i

00:01:11,920 --> 00:01:14,479
want you to want to to know a little bit

00:01:13,520 --> 00:01:17,439
about it so

00:01:14,479 --> 00:01:19,840
the first thing is that nrx uses tes

00:01:17,439 --> 00:01:22,960
that's trusted execution environments

00:01:19,840 --> 00:01:25,840
um some examples are sdx from intel

00:01:22,960 --> 00:01:26,960
suv from amd uh the recently announced

00:01:25,840 --> 00:01:29,759
tdx from

00:01:26,960 --> 00:01:30,479
intel um and what we what they allow you

00:01:29,759 --> 00:01:32,640
to do

00:01:30,479 --> 00:01:33,920
is to isolate workloads and we'll talk

00:01:32,640 --> 00:01:37,439
about that in a minute

00:01:33,920 --> 00:01:41,200
um so we want to help you to um

00:01:37,439 --> 00:01:44,399
deploy confidential sensitive workloads

00:01:41,200 --> 00:01:46,960
using tvs another

00:01:44,399 --> 00:01:49,040
really important part of the project is

00:01:46,960 --> 00:01:52,079
we want to make it really easy to

00:01:49,040 --> 00:01:54,799
both develop and to deploy

00:01:52,079 --> 00:01:56,560
your workloads usability is really

00:01:54,799 --> 00:01:59,759
really important to us

00:01:56,560 --> 00:02:01,680
as part of the project we

00:01:59,759 --> 00:02:04,479
have chosen some very strong design

00:02:01,680 --> 00:02:06,240
principles uh in terms of security

00:02:04,479 --> 00:02:08,000
we want to make it as difficult as

00:02:06,240 --> 00:02:09,360
possible to do the wrong thing we can't

00:02:08,000 --> 00:02:10,560
always force you to do the right thing

00:02:09,360 --> 00:02:11,360
but we want to make it difficult to do

00:02:10,560 --> 00:02:13,680
the wrong thing

00:02:11,360 --> 00:02:15,120
but easy so yeah and easy to do the

00:02:13,680 --> 00:02:18,000
right thing

00:02:15,120 --> 00:02:18,720
um cloud native absolutely you know we

00:02:18,000 --> 00:02:21,440
very much

00:02:18,720 --> 00:02:24,160
uh hope to be integrating with things

00:02:21,440 --> 00:02:26,560
like openshift and kubernetes

00:02:24,160 --> 00:02:28,160
and um this is of course all open source

00:02:26,560 --> 00:02:30,800
and i want to be very clear this is a

00:02:28,160 --> 00:02:33,519
project that is not production ready yet

00:02:30,800 --> 00:02:34,560
um but we will have some exciting news

00:02:33,519 --> 00:02:37,760
that we'll be announcing

00:02:34,560 --> 00:02:39,840
in the course of this this

00:02:37,760 --> 00:02:41,760
slideshow and it's part of the

00:02:39,840 --> 00:02:45,120
confidential computing consortium

00:02:41,760 --> 00:02:46,160
which is a linux foundation project to

00:02:45,120 --> 00:02:49,440
encourage use

00:02:46,160 --> 00:02:51,519
of tes and open source so that's enough

00:02:49,440 --> 00:02:55,120
uh to be getting getting on with

00:02:51,519 --> 00:02:57,840
let's let's talk a bit about isolation

00:02:55,120 --> 00:02:58,400
okay i want to set the scene so let's

00:02:57,840 --> 00:03:01,519
assume

00:02:58,400 --> 00:03:03,040
you've got uh you'll do putting stuff in

00:03:01,519 --> 00:03:04,319
the cloud public cloud private cloud

00:03:03,040 --> 00:03:05,519
whatever but let's say you've got some

00:03:04,319 --> 00:03:08,400
stuff in the cloud and

00:03:05,519 --> 00:03:09,200
um your tenant is on the on the right

00:03:08,400 --> 00:03:10,800
and you've got

00:03:09,200 --> 00:03:12,800
you've got some workloads you want to

00:03:10,800 --> 00:03:16,480
deploy into a

00:03:12,800 --> 00:03:18,400
uh host on a cloud and

00:03:16,480 --> 00:03:19,760
you've got your workload which is in

00:03:18,400 --> 00:03:22,000
yellow and there's an

00:03:19,760 --> 00:03:23,840
another workload from another tenant and

00:03:22,000 --> 00:03:26,080
of course there's the host

00:03:23,840 --> 00:03:27,440
os hypervisor all the other bits and

00:03:26,080 --> 00:03:30,080
pieces that our host

00:03:27,440 --> 00:03:32,000
uh includes so we've got three types of

00:03:30,080 --> 00:03:35,040
isolation the first type is

00:03:32,000 --> 00:03:36,560
workload from workload isolation so you

00:03:35,040 --> 00:03:38,400
do not want

00:03:36,560 --> 00:03:40,400
somebody else's workload to be able to

00:03:38,400 --> 00:03:40,959
interfere with yours either stop it

00:03:40,400 --> 00:03:43,840
running

00:03:40,959 --> 00:03:46,159
or look inside it or change information

00:03:43,840 --> 00:03:48,400
inside it that's a that's a bad thing

00:03:46,159 --> 00:03:49,920
luckily um actually we know how to do

00:03:48,400 --> 00:03:51,680
this we've been doing this for a long

00:03:49,920 --> 00:03:52,400
time i don't mean enoch i mean just the

00:03:51,680 --> 00:03:54,879
community

00:03:52,400 --> 00:03:55,840
the security community with things like

00:03:54,879 --> 00:03:58,640
um

00:03:55,840 --> 00:03:59,439
vms with containers c groups all those

00:03:58,640 --> 00:04:02,640
sorts of things

00:03:59,439 --> 00:04:03,840
i do a great job in actually stopping uh

00:04:02,640 --> 00:04:06,480
this sort of thing

00:04:03,840 --> 00:04:07,680
so uh type one we pretty much know how

00:04:06,480 --> 00:04:10,640
to do

00:04:07,680 --> 00:04:11,599
type two is protecting the host from the

00:04:10,640 --> 00:04:13,519
workload

00:04:11,599 --> 00:04:16,400
if your host if your workload is

00:04:13,519 --> 00:04:18,560
compromised or it's malicious

00:04:16,400 --> 00:04:19,600
um we really don't want it to be able to

00:04:18,560 --> 00:04:22,560
interact

00:04:19,600 --> 00:04:23,680
uh maliciously with with the host

00:04:22,560 --> 00:04:25,120
because it can

00:04:23,680 --> 00:04:27,120
alter what's happening on the host or

00:04:25,120 --> 00:04:28,400
maybe even break out into the other

00:04:27,120 --> 00:04:29,520
workload this is sometimes known as

00:04:28,400 --> 00:04:32,639
breakout

00:04:29,520 --> 00:04:34,400
um and again actually this is something

00:04:32,639 --> 00:04:36,320
which we've been doing the community for

00:04:34,400 --> 00:04:38,560
you know 10 15 20 years

00:04:36,320 --> 00:04:40,320
pretty well we know how to do this vms

00:04:38,560 --> 00:04:42,080
cgroups se linux

00:04:40,320 --> 00:04:43,919
uh all this cool stuff that dan walsh

00:04:42,080 --> 00:04:46,400
was talking about a bit before

00:04:43,919 --> 00:04:47,840
um is how we do this sort of thing so

00:04:46,400 --> 00:04:50,720
this is good

00:04:47,840 --> 00:04:52,080
what i hear you cry is the third type of

00:04:50,720 --> 00:04:54,639
isolation

00:04:52,080 --> 00:04:57,199
well that is protecting the workload

00:04:54,639 --> 00:05:00,400
from the host

00:04:57,199 --> 00:05:02,960
this is a lot more difficult so

00:05:00,400 --> 00:05:04,320
what if the host is compromised what if

00:05:02,960 --> 00:05:06,320
it's malicious

00:05:04,320 --> 00:05:07,840
well if you've got a sensitive workload

00:05:06,320 --> 00:05:09,120
and by sensitive workload i mean

00:05:07,840 --> 00:05:12,320
anything from

00:05:09,120 --> 00:05:13,039
customer data credit card data your

00:05:12,320 --> 00:05:16,160
ceo's

00:05:13,039 --> 00:05:18,240
pay pay packet um some

00:05:16,160 --> 00:05:19,360
hadoop machine learning some

00:05:18,240 --> 00:05:23,120
pharmaceutical

00:05:19,360 --> 00:05:24,880
information um some firewall rules some

00:05:23,120 --> 00:05:26,880
cryptographic keys

00:05:24,880 --> 00:05:28,720
all of those sorts of things what if you

00:05:26,880 --> 00:05:32,880
want to protect that from the host

00:05:28,720 --> 00:05:34,960
well this is a lot more difficult um and

00:05:32,880 --> 00:05:37,360
the answer that the industry has come up

00:05:34,960 --> 00:05:39,039
with the chip vendors has come up with

00:05:37,360 --> 00:05:40,800
is something called teas trusted

00:05:39,039 --> 00:05:43,199
execution environments

00:05:40,800 --> 00:05:45,039
these are chip level instructions which

00:05:43,199 --> 00:05:47,440
allow you to set up

00:05:45,039 --> 00:05:48,560
a special execution environment where

00:05:47,440 --> 00:05:52,080
basically

00:05:48,560 --> 00:05:53,759
all the pages are encrypted um and so

00:05:52,080 --> 00:05:55,120
the rest of the host can't see it so the

00:05:53,759 --> 00:05:56,319
only time they're unencrypted is when

00:05:55,120 --> 00:05:58,800
actually being acted on

00:05:56,319 --> 00:05:59,840
by the cpu or whatever's provided in the

00:05:58,800 --> 00:06:02,880
uh providing

00:05:59,840 --> 00:06:05,919
um the uh the environment

00:06:02,880 --> 00:06:06,479
tease trusted execution environments um

00:06:05,919 --> 00:06:09,840
so

00:06:06,479 --> 00:06:11,199
that's all good well and good so but it

00:06:09,840 --> 00:06:13,520
this is what you need if you're gonna

00:06:11,199 --> 00:06:15,840
use sensitive workloads and

00:06:13,520 --> 00:06:16,639
there are lots of sectors who can't

00:06:15,840 --> 00:06:18,960
deploy

00:06:16,639 --> 00:06:20,880
many of their workloads onto the cloud

00:06:18,960 --> 00:06:22,400
because their regulators are unhappy

00:06:20,880 --> 00:06:23,280
about it healthcare finance government

00:06:22,400 --> 00:06:25,360
whatever

00:06:23,280 --> 00:06:26,960
but also you know what about vulnerable

00:06:25,360 --> 00:06:28,560
hosts well if you're in the edge

00:06:26,960 --> 00:06:30,479
maybe you've got machines which are

00:06:28,560 --> 00:06:33,520
vulnerable to physical tampering

00:06:30,479 --> 00:06:35,280
or you know dodgy networks so

00:06:33,520 --> 00:06:37,280
you really want to be able to start

00:06:35,280 --> 00:06:38,319
making use of this and this is what the

00:06:37,280 --> 00:06:41,840
anarch project

00:06:38,319 --> 00:06:43,360
aims to let you do so um nathaniel why

00:06:41,840 --> 00:06:45,199
don't you talk a bit about this uh this

00:06:43,360 --> 00:06:47,680
slide

00:06:45,199 --> 00:06:49,919
sure thanks mike um so the key bit here

00:06:47,680 --> 00:06:52,720
is that the tees allow us

00:06:49,919 --> 00:06:53,919
to actively distrust the middle part of

00:06:52,720 --> 00:06:55,680
the stack

00:06:53,919 --> 00:06:58,160
in other words we don't have to include

00:06:55,680 --> 00:07:00,800
them within our threat model

00:06:58,160 --> 00:07:02,960
because they are uh they're external and

00:07:00,800 --> 00:07:05,120
they're protected by these tees

00:07:02,960 --> 00:07:06,800
so our principles are pretty simple here

00:07:05,120 --> 00:07:07,919
we don't trust the host we don't trust

00:07:06,800 --> 00:07:10,960
the host operator

00:07:07,919 --> 00:07:13,199
we don't trust the owner and then

00:07:10,960 --> 00:07:14,400
we make sure as part of our software

00:07:13,199 --> 00:07:16,000
deployment that

00:07:14,400 --> 00:07:17,759
all the hardware that we are using is

00:07:16,000 --> 00:07:20,560
cryptographically verified

00:07:17,759 --> 00:07:22,240
and all of the software that is in use

00:07:20,560 --> 00:07:23,199
is audited and cryptographically

00:07:22,240 --> 00:07:25,680
verified

00:07:23,199 --> 00:07:27,280
so uh pretty pretty much strong

00:07:25,680 --> 00:07:29,440
principles all around

00:07:27,280 --> 00:07:31,120
um anarchs is well suited to

00:07:29,440 --> 00:07:33,199
microservices this is sort of

00:07:31,120 --> 00:07:34,639
uh our bread and butter of what we would

00:07:33,199 --> 00:07:37,039
like to be able to tackle

00:07:34,639 --> 00:07:38,720
is to be able to put microservices

00:07:37,039 --> 00:07:40,319
inside these keeps which is what we call

00:07:38,720 --> 00:07:42,720
our protected area

00:07:40,319 --> 00:07:44,479
this is also well suited to sensitive

00:07:42,720 --> 00:07:45,120
data or algorithms right these are

00:07:44,479 --> 00:07:47,280
generally

00:07:45,120 --> 00:07:48,879
things you want as microservices anyway

00:07:47,280 --> 00:07:52,000
because you want to be able to isolate

00:07:48,879 --> 00:07:54,080
that data from the rest of your workflow

00:07:52,000 --> 00:07:55,919
we really really want to have easy

00:07:54,080 --> 00:07:58,080
development integration usable security

00:07:55,919 --> 00:08:00,080
is incredibly important to us this is

00:07:58,080 --> 00:08:02,639
why we also want simple deployment

00:08:00,080 --> 00:08:03,520
as well and everything that we do is

00:08:02,639 --> 00:08:06,639
standards based

00:08:03,520 --> 00:08:10,319
so this is not uh write your application

00:08:06,639 --> 00:08:12,720
to some new proprietary apis

00:08:10,319 --> 00:08:15,280
this is deploy using uh existing

00:08:12,720 --> 00:08:15,280
standards

00:08:15,520 --> 00:08:19,440
cool so um two sound great everyone

00:08:18,879 --> 00:08:22,639
wants them

00:08:19,440 --> 00:08:25,759
okay um but we do have some problems

00:08:22,639 --> 00:08:27,280
um the first is that there are different

00:08:25,759 --> 00:08:30,879
platforms so

00:08:27,280 --> 00:08:34,479
if you want to deploy on an intel

00:08:30,879 --> 00:08:36,719
sgx te

00:08:34,479 --> 00:08:37,839
you're going to have to develop and

00:08:36,719 --> 00:08:39,599
deploy

00:08:37,839 --> 00:08:41,200
in different ways because they're just

00:08:39,599 --> 00:08:44,640
different platforms

00:08:41,200 --> 00:08:48,560
and that's that's tricky and difficult

00:08:44,640 --> 00:08:53,120
so many of them require you to write

00:08:48,560 --> 00:08:56,160
your code to follow a specific

00:08:53,120 --> 00:08:57,760
sdk and

00:08:56,160 --> 00:08:59,839
we don't think that's good we don't want

00:08:57,760 --> 00:09:02,880
you to have to only code in c

00:08:59,839 --> 00:09:05,920
or c plus for instance or only in java

00:09:02,880 --> 00:09:07,200
um the other thing is that one thing

00:09:05,920 --> 00:09:09,920
we've not talked about

00:09:07,200 --> 00:09:10,800
is is attestation attestation is how you

00:09:09,920 --> 00:09:13,680
prove

00:09:10,800 --> 00:09:15,680
that your workload is actually executing

00:09:13,680 --> 00:09:16,720
in one of these tvs because it would be

00:09:15,680 --> 00:09:19,680
very easy

00:09:16,720 --> 00:09:21,120
for something to set up a malicious host

00:09:19,680 --> 00:09:22,399
or whatever to set up something so this

00:09:21,120 --> 00:09:24,959
is definitely a te

00:09:22,399 --> 00:09:26,000
you're safe you can you can put your

00:09:24,959 --> 00:09:28,160
workload in here

00:09:26,000 --> 00:09:29,200
but actually to do that maliciously so

00:09:28,160 --> 00:09:32,640
um

00:09:29,200 --> 00:09:35,519
the teas provide attestation models

00:09:32,640 --> 00:09:37,360
but they're all very different and you

00:09:35,519 --> 00:09:39,360
shouldn't as an app developer

00:09:37,360 --> 00:09:41,440
need to understand all of this stuff

00:09:39,360 --> 00:09:42,720
it's it's orthogonal to what you're

00:09:41,440 --> 00:09:45,680
trying to do which is just

00:09:42,720 --> 00:09:47,600
write an application um so that's really

00:09:45,680 --> 00:09:49,519
quite tricky

00:09:47,600 --> 00:09:51,120
then of course different vendors we've

00:09:49,519 --> 00:09:51,839
already seen some vulnerabilities in

00:09:51,120 --> 00:09:54,800
some of these

00:09:51,839 --> 00:09:56,560
uh these implementations how do you know

00:09:54,800 --> 00:09:57,680
which to track which are important to

00:09:56,560 --> 00:10:01,040
you which are going to

00:09:57,680 --> 00:10:02,320
affect you i just want to deploy

00:10:01,040 --> 00:10:05,360
workloads

00:10:02,320 --> 00:10:06,959
so it was with these things in mind that

00:10:05,360 --> 00:10:09,519
we decided to come up

00:10:06,959 --> 00:10:10,480
with uh with the anarchs project so

00:10:09,519 --> 00:10:11,760
which technology would

00:10:10,480 --> 00:10:14,720
build my application well the answer of

00:10:11,760 --> 00:10:16,000
course is nrx so um why don't you have a

00:10:14,720 --> 00:10:16,720
brief talk through this as well and then

00:10:16,000 --> 00:10:18,880
we'll get onto the

00:10:16,720 --> 00:10:19,839
demos in a couple of slides sure thanks

00:10:18,880 --> 00:10:21,120
mike

00:10:19,839 --> 00:10:23,040
so this is essentially what our

00:10:21,120 --> 00:10:25,120
architecture looks like

00:10:23,040 --> 00:10:27,200
as i mentioned before we call our

00:10:25,120 --> 00:10:30,640
constrained areas keeps

00:10:27,200 --> 00:10:32,240
and basically we have a separate keep

00:10:30,640 --> 00:10:33,680
implementation for each hardware

00:10:32,240 --> 00:10:36,240
technology

00:10:33,680 --> 00:10:36,959
so these basically deal with the

00:10:36,240 --> 00:10:39,600
specific

00:10:36,959 --> 00:10:41,600
cpu instructions and make sure that

00:10:39,600 --> 00:10:44,959
everything is set up properly

00:10:41,600 --> 00:10:46,720
and our goal is to normalize this so

00:10:44,959 --> 00:10:48,640
you can see that immediately above the

00:10:46,720 --> 00:10:50,240
hardware specific layer

00:10:48,640 --> 00:10:52,560
uh we are immediately jumping into

00:10:50,240 --> 00:10:53,360
webassembly which is a normalized

00:10:52,560 --> 00:10:55,920
standard

00:10:53,360 --> 00:10:56,880
so all of our applications run on top of

00:10:55,920 --> 00:10:59,839
this you don't

00:10:56,880 --> 00:11:01,360
have to worry about um you know

00:10:59,839 --> 00:11:02,560
everything else that's that's under the

00:11:01,360 --> 00:11:05,120
covers

00:11:02,560 --> 00:11:06,399
so uh for looking from our webassembly

00:11:05,120 --> 00:11:09,120
layer and above

00:11:06,399 --> 00:11:11,200
we have uh wazi which is the webassembly

00:11:09,120 --> 00:11:13,200
system interface this is an upcoming

00:11:11,200 --> 00:11:15,360
standard from the w3c

00:11:13,200 --> 00:11:16,560
uh that basically provides uh you can

00:11:15,360 --> 00:11:20,079
sort of think of this

00:11:16,560 --> 00:11:23,360
as um you know what uh posix

00:11:20,079 --> 00:11:26,880
is to uh you know to a uh

00:11:23,360 --> 00:11:28,959
unix syscall uh webis is to

00:11:26,880 --> 00:11:30,800
web assemblies so these give you system

00:11:28,959 --> 00:11:33,360
calls that allow you to do

00:11:30,800 --> 00:11:34,959
interesting bits of things and then

00:11:33,360 --> 00:11:36,240
above this of course we have our

00:11:34,959 --> 00:11:38,320
language bindings so this is not

00:11:36,240 --> 00:11:40,079
something that's provided by anarchs

00:11:38,320 --> 00:11:41,680
this would be whatever tooling is

00:11:40,079 --> 00:11:44,000
supplied um

00:11:41,680 --> 00:11:45,040
with whatever language you're coding in

00:11:44,000 --> 00:11:47,440
for example

00:11:45,040 --> 00:11:49,040
this would just be the uh rust target if

00:11:47,440 --> 00:11:50,880
you were programming in rust

00:11:49,040 --> 00:11:52,720
and you wouldn't you know install the

00:11:50,880 --> 00:11:54,399
rust target for webassembly

00:11:52,720 --> 00:11:56,079
and just compile your application for

00:11:54,399 --> 00:11:58,000
that and you're off to the races

00:11:56,079 --> 00:11:59,360
and then of course your your application

00:11:58,000 --> 00:12:01,600
is on the top so

00:11:59,360 --> 00:12:03,279
uh the key bit here of course is that we

00:12:01,600 --> 00:12:05,360
want to normalize things so that they

00:12:03,279 --> 00:12:08,000
look the same as quickly as possible

00:12:05,360 --> 00:12:11,839
and then above that you get a standard

00:12:08,000 --> 00:12:11,839
environment to develop your application

00:12:12,000 --> 00:12:15,519
so what you what you want to do is you

00:12:14,560 --> 00:12:18,800
want to

00:12:15,519 --> 00:12:21,360
develop an application and it to run

00:12:18,800 --> 00:12:22,160
on both you don't have to recompile it

00:12:21,360 --> 00:12:24,399
for the different

00:12:22,160 --> 00:12:25,680
types of thing you're running it on um

00:12:24,399 --> 00:12:26,800
you want to be running the same

00:12:25,680 --> 00:12:30,320
application

00:12:26,800 --> 00:12:31,600
the same binary um so it's demo time

00:12:30,320 --> 00:12:34,000
i'll go through the fir we've got

00:12:31,600 --> 00:12:35,760
a few demos they're fairly short i'll go

00:12:34,000 --> 00:12:39,040
through a first two or three and then

00:12:35,760 --> 00:12:40,320
hand over to uh to uh nathaniel to to do

00:12:39,040 --> 00:12:41,920
some of the more detail

00:12:40,320 --> 00:12:43,600
but just to be clear some of the

00:12:41,920 --> 00:12:45,519
sequences are shortened uh that's

00:12:43,600 --> 00:12:46,880
because compiling takes a while we sped

00:12:45,519 --> 00:12:49,440
the compiling up

00:12:46,880 --> 00:12:49,920
apologies for that but um you didn't

00:12:49,440 --> 00:12:52,639
need to

00:12:49,920 --> 00:12:53,600
spend you know loads of seconds watching

00:12:52,639 --> 00:12:56,399
that however

00:12:53,600 --> 00:12:56,959
this is real gameplay this is real uh

00:12:56,399 --> 00:12:59,279
code

00:12:56,959 --> 00:13:00,480
that you can use right now it's checked

00:12:59,279 --> 00:13:03,360
into our repositories

00:13:00,480 --> 00:13:04,480
and we really want you to so let's just

00:13:03,360 --> 00:13:08,160
remind ourselves

00:13:04,480 --> 00:13:11,279
this is the setup we've got we have we

00:13:08,160 --> 00:13:14,639
want to protect our workload

00:13:11,279 --> 00:13:16,240
from the host os and the the and the

00:13:14,639 --> 00:13:18,240
more general uh

00:13:16,240 --> 00:13:20,480
environment of the host so let's uh

00:13:18,240 --> 00:13:23,040
let's start our first demo i'll make it

00:13:20,480 --> 00:13:26,560
as big as i can apologies if it's not

00:13:23,040 --> 00:13:28,880
huge so um first of all we're going to

00:13:26,560 --> 00:13:29,839
clone our demo code this is pretty

00:13:28,880 --> 00:13:33,040
simple

00:13:29,839 --> 00:13:34,800
um and we're going to

00:13:33,040 --> 00:13:36,800
look at it and so what this is it's a

00:13:34,800 --> 00:13:40,000
very simple program

00:13:36,800 --> 00:13:41,839
which generates a a random number and it

00:13:40,000 --> 00:13:45,440
doesn't print the random number

00:13:41,839 --> 00:13:48,160
out until you press enter

00:13:45,440 --> 00:13:49,760
so you do this and it's done it we press

00:13:48,160 --> 00:13:50,399
enter and there we are we have a random

00:13:49,760 --> 00:13:52,560
number

00:13:50,399 --> 00:13:54,480
so that's that's the very basic thing

00:13:52,560 --> 00:13:57,199
and what you've just seen in fact

00:13:54,480 --> 00:13:58,240
is um is this we've got a secret

00:13:57,199 --> 00:14:00,399
generator

00:13:58,240 --> 00:14:01,519
as a workload in a standard binary so

00:14:00,399 --> 00:14:03,440
nothing particularly

00:14:01,519 --> 00:14:04,560
exciting but we want to show show you

00:14:03,440 --> 00:14:07,040
step by step

00:14:04,560 --> 00:14:08,560
so let's go to uh to demo two which

00:14:07,040 --> 00:14:10,000
shows which goes just a little bit

00:14:08,560 --> 00:14:12,160
further

00:14:10,000 --> 00:14:13,680
so um we're doing the same thing we're

00:14:12,160 --> 00:14:17,279
cloning the demo

00:14:13,680 --> 00:14:20,639
um so we know what this looks like

00:14:17,279 --> 00:14:21,920
and uh just to prove it's the same code

00:14:20,639 --> 00:14:24,800
i'm sure you could have remembered

00:14:21,920 --> 00:14:24,800
exactly what it was

00:14:25,360 --> 00:14:29,440
uh this time we're going to run it in a

00:14:27,040 --> 00:14:33,199
in a different way though

00:14:29,440 --> 00:14:36,320
um so run it first off as

00:14:33,199 --> 00:14:40,480
as you expect but we have a secret

00:14:36,320 --> 00:14:40,480
we talked about being able to

00:14:40,800 --> 00:14:47,040
compile to a different target so

00:14:44,160 --> 00:14:48,720
this is how you compile your application

00:14:47,040 --> 00:14:52,000
your rust application

00:14:48,720 --> 00:14:54,800
to uh to washi to to webassembly

00:14:52,000 --> 00:14:56,079
it's literally this simple it you you

00:14:54,800 --> 00:14:57,600
use that target

00:14:56,079 --> 00:14:59,279
and assuming you've got your environment

00:14:57,600 --> 00:15:02,079
set up you have now

00:14:59,279 --> 00:15:02,800
um you've now created a dot wasm file

00:15:02,079 --> 00:15:06,079
which is

00:15:02,800 --> 00:15:08,959
uh the the binary uh for it and we're

00:15:06,079 --> 00:15:08,959
going to run it now

00:15:11,120 --> 00:15:18,079
in a second here we go and um

00:15:15,519 --> 00:15:19,040
you can compile to webassembly from lots

00:15:18,079 --> 00:15:23,199
of different languages c

00:15:19,040 --> 00:15:26,880
c plus plus go rust uh python

00:15:23,199 --> 00:15:31,440
haskell c sharp lots of different things

00:15:26,880 --> 00:15:33,519
um and okay we've just

00:15:31,440 --> 00:15:34,480
uh built up what we've also got to do

00:15:33,519 --> 00:15:36,399
now actually

00:15:34,480 --> 00:15:37,600
is not just run it straight we are going

00:15:36,399 --> 00:15:41,680
to run it

00:15:37,600 --> 00:15:44,000
via a um a loader

00:15:41,680 --> 00:15:44,959
um which we call the wasm loader which

00:15:44,000 --> 00:15:46,880
is part of the

00:15:44,959 --> 00:15:48,560
of nx this is how this is all part of

00:15:46,880 --> 00:15:51,040
how we run it together so

00:15:48,560 --> 00:15:52,399
what we're going to do is run this uh

00:15:51,040 --> 00:15:56,240
binary

00:15:52,399 --> 00:15:58,079
through the wasm loader so this is uh

00:15:56,240 --> 00:16:00,639
what we're just doing here

00:15:58,079 --> 00:16:02,240
and hopefully it's going to come up with

00:16:00,639 --> 00:16:06,000
a number

00:16:02,240 --> 00:16:09,199
yep and then we can uh enter an area

00:16:06,000 --> 00:16:10,880
what we've done let me show you is um

00:16:09,199 --> 00:16:12,320
is done exactly the same we've got a

00:16:10,880 --> 00:16:14,399
secret generator but now it's running

00:16:12,320 --> 00:16:15,279
not as a standard binary but as a wasm

00:16:14,399 --> 00:16:18,399
binary

00:16:15,279 --> 00:16:20,160
um and it's running via a keep

00:16:18,399 --> 00:16:21,600
loader which is a piece that we've

00:16:20,160 --> 00:16:23,920
written

00:16:21,600 --> 00:16:25,040
right i'm going to take you um i'll take

00:16:23,920 --> 00:16:26,880
you through the third

00:16:25,040 --> 00:16:28,320
third demo briefly and then we'll pass

00:16:26,880 --> 00:16:31,519
over to nathaniel

00:16:28,320 --> 00:16:34,320
so you may have noticed when we um

00:16:31,519 --> 00:16:34,800
when we looked at that uh the original

00:16:34,320 --> 00:16:36,639
uh

00:16:34,800 --> 00:16:37,920
clone there was a something called

00:16:36,639 --> 00:16:40,880
secret search

00:16:37,920 --> 00:16:42,000
and this is an evil evil program uh

00:16:40,880 --> 00:16:45,120
which basically

00:16:42,000 --> 00:16:48,240
um once it has the uh the process id

00:16:45,120 --> 00:16:51,120
of your uh your running

00:16:48,240 --> 00:16:52,800
uh demo it tries to find the secret it

00:16:51,120 --> 00:16:54,720
basically scans the memory

00:16:52,800 --> 00:16:56,480
to find something that looks like it's

00:16:54,720 --> 00:16:58,320
secret and it's doing it now it's gonna

00:16:56,480 --> 00:17:00,240
see if it can find the secret

00:16:58,320 --> 00:17:01,440
gonna look through the pages uh

00:17:00,240 --> 00:17:07,360
associated with that

00:17:01,440 --> 00:17:07,360
uh that pid and can it find a secret

00:17:08,319 --> 00:17:12,559
dot dot dot oh it's found something it

00:17:11,039 --> 00:17:14,559
thinks like a secret let's have a look

00:17:12,559 --> 00:17:15,839
on the left and it has indeed found the

00:17:14,559 --> 00:17:19,199
secret

00:17:15,839 --> 00:17:22,400
so what we've just seen

00:17:19,199 --> 00:17:26,559
is our

00:17:22,400 --> 00:17:30,000
secret generator and the secret

00:17:26,559 --> 00:17:32,160
search was able to look inside it

00:17:30,000 --> 00:17:33,600
and that makes us very sad we do not

00:17:32,160 --> 00:17:36,640
like this so this

00:17:33,600 --> 00:17:40,160
basically shows that in normal usage

00:17:36,640 --> 00:17:40,960
there is no isolation of type three

00:17:40,160 --> 00:17:44,000
there's no

00:17:40,960 --> 00:17:44,640
workload from host isolation right and

00:17:44,000 --> 00:17:46,240
do you want to

00:17:44,640 --> 00:17:48,480
talk through uh demo force when it

00:17:46,240 --> 00:17:51,120
starts getting really interesting uh

00:17:48,480 --> 00:17:52,320
sure so in uh in demo four we're

00:17:51,120 --> 00:17:54,160
basically going to do the

00:17:52,320 --> 00:17:56,720
same thing that we have been showing all

00:17:54,160 --> 00:17:59,280
along uh which is the ability to

00:17:56,720 --> 00:18:00,160
uh to scan the memory and find this

00:17:59,280 --> 00:18:02,000
secret

00:18:00,160 --> 00:18:03,360
one important thing to note is that the

00:18:02,000 --> 00:18:05,840
reason why we don't

00:18:03,360 --> 00:18:07,760
reveal the secret until you press enter

00:18:05,840 --> 00:18:09,120
this is essentially your application

00:18:07,760 --> 00:18:10,880
security controls

00:18:09,120 --> 00:18:12,799
so the vulnerability that we're seeing

00:18:10,880 --> 00:18:13,679
here is that the host can through memory

00:18:12,799 --> 00:18:15,679
scanning

00:18:13,679 --> 00:18:16,799
bypass the security controls of your

00:18:15,679 --> 00:18:20,080
application

00:18:16,799 --> 00:18:22,000
and can access the secret and um

00:18:20,080 --> 00:18:23,600
this is this is part of everything we do

00:18:22,000 --> 00:18:24,080
in the cloud today right so this is this

00:18:23,600 --> 00:18:26,160
is just

00:18:24,080 --> 00:18:27,760
normal way that we operate today we want

00:18:26,160 --> 00:18:30,640
to see if we can do something

00:18:27,760 --> 00:18:32,640
that is a little different and gives us

00:18:30,640 --> 00:18:33,200
a stronger guarantee of security from

00:18:32,640 --> 00:18:36,320
that

00:18:33,200 --> 00:18:38,000
third form of isolation so

00:18:36,320 --> 00:18:39,840
uh i can't actually see what's going on

00:18:38,000 --> 00:18:41,280
on the screen here mike because

00:18:39,840 --> 00:18:42,799
what we're running here is we're doing

00:18:41,280 --> 00:18:43,679
pretty much the same as we did before so

00:18:42,799 --> 00:18:46,640
we're running it

00:18:43,679 --> 00:18:48,080
with nil which means we're not giving it

00:18:46,640 --> 00:18:51,520
making any attempts to

00:18:48,080 --> 00:18:53,440
improve things and sadly uh as as before

00:18:51,520 --> 00:18:56,320
it was able to find it what we can do

00:18:53,440 --> 00:18:59,039
now is run it is in a kvm so if you want

00:18:56,320 --> 00:19:01,039
to talk about that

00:18:59,039 --> 00:19:02,640
in the first example with k with the uh

00:19:01,039 --> 00:19:04,799
with the kneel back and basically we're

00:19:02,640 --> 00:19:06,720
going to run this as a normal process

00:19:04,799 --> 00:19:08,400
and we don't get any protections now

00:19:06,720 --> 00:19:10,080
we're running it in kbm

00:19:08,400 --> 00:19:11,919
and we're going to see if kvm provides

00:19:10,080 --> 00:19:13,919
us any additional protections

00:19:11,919 --> 00:19:15,840
so right now the on the left-hand side

00:19:13,919 --> 00:19:16,880
you can actually see that that wasm code

00:19:15,840 --> 00:19:20,320
is running

00:19:16,880 --> 00:19:20,880
inside of a super tiny micro uh virtual

00:19:20,320 --> 00:19:25,840
machine

00:19:20,880 --> 00:19:25,840
and it is just kvm

00:19:30,400 --> 00:19:34,160
the reason of this for this of course is

00:19:32,320 --> 00:19:37,200
that uh virtual machines

00:19:34,160 --> 00:19:38,400
don't provide uh this kind of isolation

00:19:37,200 --> 00:19:39,760
from the host

00:19:38,400 --> 00:19:42,160
so what we're going to do now is we're

00:19:39,760 --> 00:19:44,160
going to turn on uh scv mode we're going

00:19:42,160 --> 00:19:44,640
to execute this using the suv keep and

00:19:44,160 --> 00:19:47,760
this is

00:19:44,640 --> 00:19:49,919
the technology from amd which allows you

00:19:47,760 --> 00:19:51,360
to create an encrypted virtual machine

00:19:49,919 --> 00:19:53,520
and so we are going to use this

00:19:51,360 --> 00:19:56,559
encrypted virtual machine to do

00:19:53,520 --> 00:19:58,559
exactly what we just did in the kvm case

00:19:56,559 --> 00:20:02,159
but this time we are really hoping that

00:19:58,559 --> 00:20:04,840
we don't find uh any secret in this vm

00:20:02,159 --> 00:20:06,159
so it's running it's looking it is

00:20:04,840 --> 00:20:08,799
looking

00:20:06,159 --> 00:20:10,159
and it's it's just returned it doesn't

00:20:08,799 --> 00:20:11,840
seem to have found anything

00:20:10,159 --> 00:20:13,760
yep and it didn't find anything this

00:20:11,840 --> 00:20:15,360
time because all of the pages

00:20:13,760 --> 00:20:17,039
uh for this virtual machine are

00:20:15,360 --> 00:20:19,760
encrypted and uh

00:20:17,039 --> 00:20:21,760
cannot be decrypted by the host and this

00:20:19,760 --> 00:20:22,720
is guaranteed by the cpu and the cpu's

00:20:21,760 --> 00:20:25,039
firmware

00:20:22,720 --> 00:20:26,640
um so we've just run it again just in

00:20:25,039 --> 00:20:28,960
case you wrote the code badly and it

00:20:26,640 --> 00:20:31,600
didn't find it second time so it seems

00:20:28,960 --> 00:20:32,960
uh and there we are we've seen it so we

00:20:31,600 --> 00:20:34,880
saw it on the left to prove that what

00:20:32,960 --> 00:20:37,760
actually was a secret

00:20:34,880 --> 00:20:39,679
so what we see and i'm not going to show

00:20:37,760 --> 00:20:41,039
all three cases

00:20:39,679 --> 00:20:42,720
because you've already seen that sort of

00:20:41,039 --> 00:20:46,159
nil case we've seen

00:20:42,720 --> 00:20:49,520
the kvm did not provide protection

00:20:46,159 --> 00:20:51,440
but as soon as we put it in an suv keep

00:20:49,520 --> 00:20:54,240
we did provide protection the secret

00:20:51,440 --> 00:20:58,159
search could not look inside it

00:20:54,240 --> 00:20:59,840
um so this is pretty cool right um

00:20:58,159 --> 00:21:01,679
we're happy now on the left hand side

00:20:59,840 --> 00:21:02,400
but still very unhappy on the right hand

00:21:01,679 --> 00:21:05,039
side

00:21:02,400 --> 00:21:06,159
so we have one more demo to show you and

00:21:05,039 --> 00:21:07,520
um

00:21:06,159 --> 00:21:09,360
let's uh we're going to see something

00:21:07,520 --> 00:21:11,520
very very similar actually but

00:21:09,360 --> 00:21:14,240
this time we're on a different machine

00:21:11,520 --> 00:21:17,679
uh i have

00:21:14,240 --> 00:21:19,440
with the um uh

00:21:17,679 --> 00:21:20,880
this is not displaying very well it's

00:21:19,440 --> 00:21:22,400
almost different it's very difficult to

00:21:20,880 --> 00:21:23,679
read on my screen i suspect you're

00:21:22,400 --> 00:21:25,280
having the same problem

00:21:23,679 --> 00:21:27,840
um do you want to just talk through what

00:21:25,280 --> 00:21:28,559
it's doing anyway i i will yeah so this

00:21:27,840 --> 00:21:30,880
time we are

00:21:28,559 --> 00:21:32,480
not running on an amd box we're running

00:21:30,880 --> 00:21:34,880
on an intel box

00:21:32,480 --> 00:21:35,760
and uh in intel cpus have a different

00:21:34,880 --> 00:21:39,120
technology called

00:21:35,760 --> 00:21:42,240
sgx so we want to basically run the same

00:21:39,120 --> 00:21:44,159
application inside sgx and we're showing

00:21:42,240 --> 00:21:46,080
it incrementally here as well i

00:21:44,159 --> 00:21:47,919
believe this video does it incrementally

00:21:46,080 --> 00:21:50,159
where we start off

00:21:47,919 --> 00:21:51,919
yeah yep it's so it starts off with the

00:21:50,159 --> 00:21:52,880
nil keep and we're able to find the

00:21:51,919 --> 00:21:55,679
secret

00:21:52,880 --> 00:21:56,559
and uh then we show it again uh

00:21:55,679 --> 00:22:00,320
executing

00:21:56,559 --> 00:22:02,640
in kvm on this intel cpu and uh that's

00:22:00,320 --> 00:22:06,159
what it's doing right now

00:22:02,640 --> 00:22:09,360
and i believe it's the search

00:22:06,159 --> 00:22:11,360
we're doing our secret search on ktm

00:22:09,360 --> 00:22:13,840
and we should still find the secret in

00:22:11,360 --> 00:22:13,840
this case

00:22:14,080 --> 00:22:18,400
yep it's just about to find it i think i

00:22:16,480 --> 00:22:20,640
i should say that this

00:22:18,400 --> 00:22:21,600
this presentation with just me talking

00:22:20,640 --> 00:22:24,240
on it

00:22:21,600 --> 00:22:25,840
is available if you go to our booth and

00:22:24,240 --> 00:22:26,799
we'll be making it on the anarchs

00:22:25,840 --> 00:22:29,280
youtube

00:22:26,799 --> 00:22:29,919
uh channel uh if you want to go and uh

00:22:29,280 --> 00:22:33,440
go and

00:22:29,919 --> 00:22:34,799
look at it uh there as well

00:22:33,440 --> 00:22:36,880
so we didn't find this we're just

00:22:34,799 --> 00:22:41,440
creating a we're now doing a

00:22:36,880 --> 00:22:45,120
a new one an suv one i think uh sgx yeah

00:22:41,440 --> 00:22:48,400
and it's core dumped yup so in this case

00:22:45,120 --> 00:22:50,960
um the the hardware profile of sgx is

00:22:48,400 --> 00:22:53,280
is slightly different to the one in seb

00:22:50,960 --> 00:22:54,400
uh suv will allow the host to read all

00:22:53,280 --> 00:22:57,520
of the pages

00:22:54,400 --> 00:22:59,840
but it can't decrypt them where sgx does

00:22:57,520 --> 00:23:01,440
not even allow access to the pages

00:22:59,840 --> 00:23:03,039
so what happens on the right hand side

00:23:01,440 --> 00:23:04,159
is that when we attempt to scan those

00:23:03,039 --> 00:23:06,640
memory pages

00:23:04,159 --> 00:23:09,840
we actually get a core dump and we can't

00:23:06,640 --> 00:23:09,840
find the secret at all

00:23:10,880 --> 00:23:14,640
and it's just core dumped again uh which

00:23:12,960 --> 00:23:16,799
is good news for us

00:23:14,640 --> 00:23:18,080
um i'm really sorry this uh the screen

00:23:16,799 --> 00:23:20,400
resolution is terrible i don't know

00:23:18,080 --> 00:23:22,159
what's going on here but um

00:23:20,400 --> 00:23:24,000
okay and we're just going to see yeah

00:23:22,159 --> 00:23:26,960
there was a secret so that's good

00:23:24,000 --> 00:23:27,360
that's all that's all shown very nicely

00:23:26,960 --> 00:23:30,960
so

00:23:27,360 --> 00:23:31,440
um in this case we've seen something

00:23:30,960 --> 00:23:34,000
very

00:23:31,440 --> 00:23:34,880
similar as we did before but this is kvm

00:23:34,000 --> 00:23:38,080
again it could look

00:23:34,880 --> 00:23:40,240
in sgx it couldn't look in

00:23:38,080 --> 00:23:42,799
and again we're happy so we have just

00:23:40,240 --> 00:23:42,799
shown you

00:23:42,880 --> 00:23:52,400
a wasm file so a a web assembly binary

00:23:49,039 --> 00:23:56,240
running in a keep

00:23:52,400 --> 00:23:59,360
in a trust execution environment on amd

00:23:56,240 --> 00:24:01,120
and on intel um this is a

00:23:59,360 --> 00:24:02,880
really really big step forward in the

00:24:01,120 --> 00:24:05,600
project um

00:24:02,880 --> 00:24:06,000
so what i'm gonna do now is hand over to

00:24:05,600 --> 00:24:07,279
uh

00:24:06,000 --> 00:24:08,640
to nathaniel for a bit of an

00:24:07,279 --> 00:24:10,080
architectural view we want to leave

00:24:08,640 --> 00:24:12,400
space for questions

00:24:10,080 --> 00:24:13,679
um but we have loads of time we we're

00:24:12,400 --> 00:24:16,000
doing well so

00:24:13,679 --> 00:24:18,400
um here's a chance in the fans to talk

00:24:16,000 --> 00:24:20,320
about uh the specific details of the

00:24:18,400 --> 00:24:24,240
different types of key

00:24:20,320 --> 00:24:27,279
sure so uh in this example here

00:24:24,240 --> 00:24:29,520
we this is roughly what

00:24:27,279 --> 00:24:30,960
um everything looks like on all of our

00:24:29,520 --> 00:24:34,400
cpu architectures

00:24:30,960 --> 00:24:36,000
in this case it's it's intel uh and sgx

00:24:34,400 --> 00:24:37,679
so we have of course our cpu at the

00:24:36,000 --> 00:24:40,240
bottom this is our route of trust

00:24:37,679 --> 00:24:41,440
and we can validate this route of trust

00:24:40,240 --> 00:24:44,000
using attestation

00:24:41,440 --> 00:24:45,440
to prove to us cryptographically that

00:24:44,000 --> 00:24:47,840
that is the real cpu

00:24:45,440 --> 00:24:49,440
that is made by intel and has set up our

00:24:47,840 --> 00:24:52,080
environment properly

00:24:49,440 --> 00:24:52,480
uh above that we have the host kernel

00:24:52,080 --> 00:24:55,440
and

00:24:52,480 --> 00:24:56,880
the uh anarchs loader the anarch keep

00:24:55,440 --> 00:24:59,520
loader

00:24:56,880 --> 00:25:01,039
and uh these two bits are actively

00:24:59,520 --> 00:25:03,760
distrusted so they uh

00:25:01,039 --> 00:25:05,520
exist outside of the the trusted domain

00:25:03,760 --> 00:25:08,000
um but these layers are both

00:25:05,520 --> 00:25:09,840
um silicon architecture dependent so

00:25:08,000 --> 00:25:10,720
you're going to have you know a kernel

00:25:09,840 --> 00:25:13,039
built for

00:25:10,720 --> 00:25:14,960
the intel instruction set for example

00:25:13,039 --> 00:25:17,520
and uh you're going to have

00:25:14,960 --> 00:25:19,520
a a loader that is built specifically

00:25:17,520 --> 00:25:21,200
for sgx

00:25:19,520 --> 00:25:23,120
the same is true with the shim the so

00:25:21,200 --> 00:25:26,400
the shim is a layer which

00:25:23,120 --> 00:25:29,520
adapts the specific hardware technology

00:25:26,400 --> 00:25:30,640
to be able to support um a static ply

00:25:29,520 --> 00:25:33,440
binary

00:25:30,640 --> 00:25:34,480
and uh so basically everything from the

00:25:33,440 --> 00:25:36,880
shim layer above

00:25:34,480 --> 00:25:38,000
looks exactly the same both to anarchs

00:25:36,880 --> 00:25:39,919
and the application

00:25:38,000 --> 00:25:41,200
uh where everything below from the shim

00:25:39,919 --> 00:25:44,720
layer and below

00:25:41,200 --> 00:25:48,159
is uh is architecture dependent

00:25:44,720 --> 00:25:50,320
so once you hit the key

00:25:48,159 --> 00:25:52,960
yeah so this is this is the same exact

00:25:50,320 --> 00:25:54,240
on on an amd cpu you notice

00:25:52,960 --> 00:25:56,400
that things are slightly different but

00:25:54,240 --> 00:25:58,400
all the layers are the same and

00:25:56,400 --> 00:26:00,400
uh basically once we get up into that

00:25:58,400 --> 00:26:00,799
webassembly and wassie layer everything

00:26:00,400 --> 00:26:03,440
is

00:26:00,799 --> 00:26:04,799
is the same from that point on um one

00:26:03,440 --> 00:26:07,760
important bit is to note that

00:26:04,799 --> 00:26:08,320
that nrx plans to distribute those four

00:26:07,760 --> 00:26:10,960
layers

00:26:08,320 --> 00:26:13,120
the the loader the shim and the web

00:26:10,960 --> 00:26:15,600
assembly and wazi layers

00:26:13,120 --> 00:26:16,720
uh application is your responsibility

00:26:15,600 --> 00:26:18,480
and of course the

00:26:16,720 --> 00:26:19,760
the kernel is the cloud host's

00:26:18,480 --> 00:26:21,760
responsibility

00:26:19,760 --> 00:26:24,240
uh and the cpu is of course the cpu

00:26:21,760 --> 00:26:27,200
vendor's responsibility

00:26:24,240 --> 00:26:27,840
absolutely and now we we've talked about

00:26:27,200 --> 00:26:32,320
intel

00:26:27,840 --> 00:26:33,760
uh sgx and uh amd scv

00:26:32,320 --> 00:26:36,240
those are the ones that are available at

00:26:33,760 --> 00:26:38,559
the moment um we absolutely plan to

00:26:36,240 --> 00:26:40,880
support others as they become available

00:26:38,559 --> 00:26:42,320
um so intel has announced something

00:26:40,880 --> 00:26:44,000
called tdx

00:26:42,320 --> 00:26:46,240
which we've already said that we we plan

00:26:44,000 --> 00:26:49,760
to support once we have hardware

00:26:46,240 --> 00:26:50,559
and as and when um other chip vendors

00:26:49,760 --> 00:26:52,720
come out with

00:26:50,559 --> 00:26:54,720
similar technologies uh we very much

00:26:52,720 --> 00:26:56,159
intend to support them and we talk very

00:26:54,720 --> 00:26:57,840
closely to all of the major silicon

00:26:56,159 --> 00:27:01,840
vendors

00:26:57,840 --> 00:27:03,840
um so one key thing that we didn't

00:27:01,840 --> 00:27:06,080
talk about particularly in the demo was

00:27:03,840 --> 00:27:09,360
that the binary we created was the

00:27:06,080 --> 00:27:10,480
same the the compiled wasn't binary is

00:27:09,360 --> 00:27:13,520
exactly the same so

00:27:10,480 --> 00:27:16,720
you know if um if you do

00:27:13,520 --> 00:27:20,399
if you have a cloud or a bunch of clouds

00:27:16,720 --> 00:27:23,760
with um with a variety of different

00:27:20,399 --> 00:27:26,960
um chip architectures

00:27:23,760 --> 00:27:27,840
you you don't care you as the tenant

00:27:26,960 --> 00:27:30,320
don't care

00:27:27,840 --> 00:27:31,919
because anarchs will deploy to whichever

00:27:30,320 --> 00:27:34,559
chip architectures

00:27:31,919 --> 00:27:36,080
are available and which fit the your

00:27:34,559 --> 00:27:37,600
security policy

00:27:36,080 --> 00:27:39,120
um and you don't need to worry about it

00:27:37,600 --> 00:27:42,240
because as far as you're concerned

00:27:39,120 --> 00:27:44,960
it's you just your binary your

00:27:42,240 --> 00:27:45,919
application will see just the same

00:27:44,960 --> 00:27:48,080
underlying

00:27:45,919 --> 00:27:50,080
uh hardware because of the abstraction

00:27:48,080 --> 00:27:53,600
that we perform

00:27:50,080 --> 00:27:56,880
um so here we've got a a brief um

00:27:53,600 --> 00:27:57,760
very sort of simplified uh way of

00:27:56,880 --> 00:28:00,880
thinking about

00:27:57,760 --> 00:28:03,840
the different pieces that uh that we

00:28:00,880 --> 00:28:05,440
we will be talking about so um on the

00:28:03,840 --> 00:28:07,440
right we've got a client and

00:28:05,440 --> 00:28:08,880
you might be using a cli you might be

00:28:07,440 --> 00:28:11,520
using an orchestrator like

00:28:08,880 --> 00:28:12,080
uh kubernetes open shift open stack and

00:28:11,520 --> 00:28:14,000
there's an

00:28:12,080 --> 00:28:16,080
arts client agent and the analytics

00:28:14,000 --> 00:28:19,279
client agent knows how to talk

00:28:16,080 --> 00:28:21,600
to the pieces on the host um and the

00:28:19,279 --> 00:28:24,799
announcement client agent is trusted

00:28:21,600 --> 00:28:26,960
uh the nrx host agent um

00:28:24,799 --> 00:28:27,919
involves things like the the loader

00:28:26,960 --> 00:28:31,120
which we've already said

00:28:27,919 --> 00:28:32,240
isn't trusted but it helps load the

00:28:31,120 --> 00:28:35,919
workload

00:28:32,240 --> 00:28:39,039
um into the keep although

00:28:35,919 --> 00:28:40,880
it never sees it itself the workload is

00:28:39,039 --> 00:28:44,240
always encrypted data and

00:28:40,880 --> 00:28:47,520
code until it actually runs in the keep

00:28:44,240 --> 00:28:50,000
so the host agent can't interfere can't

00:28:47,520 --> 00:28:50,720
see the worst you could do is refuse to

00:28:50,000 --> 00:28:52,880
load it

00:28:50,720 --> 00:28:55,200
um and you'd know about that because

00:28:52,880 --> 00:28:58,159
your application wouldn't be loading

00:28:55,200 --> 00:28:59,440
um got a slightly more complex view of

00:28:58,159 --> 00:29:02,080
this do you want to talk around this at

00:28:59,440 --> 00:29:02,080
all nathaniel

00:29:02,799 --> 00:29:06,240
it's my phone i'm afraid okay fine

00:29:06,000 --> 00:29:07,360
that's

00:29:06,240 --> 00:29:10,000
the problem you have of being at the

00:29:07,360 --> 00:29:10,399
lake this um this just goes into a bit

00:29:10,000 --> 00:29:13,600
more

00:29:10,399 --> 00:29:14,880
more detail and if anyone has any

00:29:13,600 --> 00:29:16,640
specific questions about the

00:29:14,880 --> 00:29:17,279
architecture we can come back to this

00:29:16,640 --> 00:29:19,120
slide

00:29:17,279 --> 00:29:22,000
uh maybe if we need to uh need to

00:29:19,120 --> 00:29:25,840
discuss things in a bit more detail

00:29:22,000 --> 00:29:29,279
um so one final thing is we've talked

00:29:25,840 --> 00:29:31,440
about you know low-level um

00:29:29,279 --> 00:29:32,960
stuff or we we haven't talked about

00:29:31,440 --> 00:29:34,640
cisco's particularly but

00:29:32,960 --> 00:29:36,720
you know that's the business we're in

00:29:34,640 --> 00:29:37,520
we're in cisco territory we're in uh you

00:29:36,720 --> 00:29:41,279
know

00:29:37,520 --> 00:29:42,880
low-level uh runtime territory

00:29:41,279 --> 00:29:45,919
kernels and all those sorts of things

00:29:42,880 --> 00:29:48,480
but actually as a developer

00:29:45,919 --> 00:29:49,120
we don't want you to need to care about

00:29:48,480 --> 00:29:52,720
this

00:29:49,120 --> 00:29:56,000
we see an arcs as a deployment

00:29:52,720 --> 00:29:57,520
framework not a development framework

00:29:56,000 --> 00:29:59,840
you should be able to choose whatever

00:29:57,520 --> 00:30:02,880
language you want as long as you can

00:29:59,840 --> 00:30:05,360
it can compile to webassembly and

00:30:02,880 --> 00:30:07,919
many of them do over 40 already you

00:30:05,360 --> 00:30:09,360
develop your application you compile it

00:30:07,919 --> 00:30:12,080
and then you've got

00:30:09,360 --> 00:30:14,480
um a something that's ready to run you

00:30:12,080 --> 00:30:17,440
can think of that as the equivalent

00:30:14,480 --> 00:30:19,279
of a a virtual machine image or a

00:30:17,440 --> 00:30:21,840
container image something like that

00:30:19,279 --> 00:30:23,039
or a jar file that you're ready to ship

00:30:21,840 --> 00:30:25,840
and deploy

00:30:23,039 --> 00:30:26,559
and the stuff in oranges is one set of

00:30:25,840 --> 00:30:29,600
steps

00:30:26,559 --> 00:30:31,120
and then you hand that over and you do

00:30:29,600 --> 00:30:32,320
the second set of sets which is actually

00:30:31,120 --> 00:30:34,320
the deployment side

00:30:32,320 --> 00:30:36,480
where you choose the host uh it's

00:30:34,320 --> 00:30:39,679
configured and then it runs

00:30:36,480 --> 00:30:40,240
so in the exam example you might be

00:30:39,679 --> 00:30:42,960
using

00:30:40,240 --> 00:30:44,159
uh dev tooling which will which will do

00:30:42,960 --> 00:30:46,799
your development

00:30:44,159 --> 00:30:47,760
uh and uh called compile to webassembly

00:30:46,799 --> 00:30:51,840
whether that's

00:30:47,760 --> 00:30:54,640
emacs or vs code or

00:30:51,840 --> 00:30:55,200
eclipse che or whatever but it it spits

00:30:54,640 --> 00:30:58,240
out

00:30:55,200 --> 00:30:59,840
a wasm file at the end and then

00:30:58,240 --> 00:31:02,480
whenever you're ready you can you can

00:30:59,840 --> 00:31:05,600
deploy you might be using open shift

00:31:02,480 --> 00:31:07,600
alongside the nrx pieces and you deploy

00:31:05,600 --> 00:31:10,640
into the ibm cloud azure

00:31:07,600 --> 00:31:14,720
aws whatever it may be

00:31:10,640 --> 00:31:17,360
alibaba you can deploy what you want

00:31:14,720 --> 00:31:19,760
we separate out these two things because

00:31:17,360 --> 00:31:21,760
that's one of the joys of the cloud and

00:31:19,760 --> 00:31:23,200
the way of thinking about cloud native

00:31:21,760 --> 00:31:23,840
is that you shouldn't need to think

00:31:23,200 --> 00:31:25,840
about or

00:31:23,840 --> 00:31:27,760
that the say the different parts at the

00:31:25,840 --> 00:31:30,399
same time

00:31:27,760 --> 00:31:32,080
so where are we um why don't you talk

00:31:30,399 --> 00:31:33,440
about these design principles a bit and

00:31:32,080 --> 00:31:34,720
nathaniel

00:31:33,440 --> 00:31:36,799
sure so as mike mentioned at the

00:31:34,720 --> 00:31:38,480
beginning of the talk we have some very

00:31:36,799 --> 00:31:40,640
strong design principles

00:31:38,480 --> 00:31:41,600
and these are essentially our 10

00:31:40,640 --> 00:31:43,760
commitments

00:31:41,600 --> 00:31:45,600
so number one is that we want to have a

00:31:43,760 --> 00:31:47,679
minimal trusted computing base

00:31:45,600 --> 00:31:48,720
that is the amount of code that is

00:31:47,679 --> 00:31:52,320
required

00:31:48,720 --> 00:31:53,440
inside of the keep in order to make your

00:31:52,320 --> 00:31:55,679
application run

00:31:53,440 --> 00:31:56,480
should be as small as possible this

00:31:55,679 --> 00:31:59,679
protects you

00:31:56,480 --> 00:32:01,840
as the tenant from compromises and

00:31:59,679 --> 00:32:03,360
it also allows you to have greater

00:32:01,840 --> 00:32:06,399
density

00:32:03,360 --> 00:32:08,080
for uh for your deployments

00:32:06,399 --> 00:32:10,960
number two is that we want to have a

00:32:08,080 --> 00:32:13,120
minimum number of trust relationships

00:32:10,960 --> 00:32:15,200
and this is who who do you have to trust

00:32:13,120 --> 00:32:17,919
in order to deploy an application

00:32:15,200 --> 00:32:18,880
and uh from the anarch's perspective you

00:32:17,919 --> 00:32:21,519
have to have two

00:32:18,880 --> 00:32:22,880
and basically no more uh you need to

00:32:21,519 --> 00:32:25,120
trust the cpu

00:32:22,880 --> 00:32:27,120
and the cpu's firmware uh we consider

00:32:25,120 --> 00:32:28,640
that as one trust entity since it comes

00:32:27,120 --> 00:32:30,399
from the same provider

00:32:28,640 --> 00:32:32,000
and the second one is that you need to

00:32:30,399 --> 00:32:35,600
trust the nrx code base

00:32:32,000 --> 00:32:37,279
everything else outside of that is um

00:32:35,600 --> 00:32:38,960
you know it was libraries that you're

00:32:37,279 --> 00:32:40,960
bringing into your application

00:32:38,960 --> 00:32:42,559
or uh you know is internal to your own

00:32:40,960 --> 00:32:44,720
application process

00:32:42,559 --> 00:32:46,399
but you don't have to trust many other

00:32:44,720 --> 00:32:47,200
people in order to get your application

00:32:46,399 --> 00:32:49,919
running

00:32:47,200 --> 00:32:51,200
in a way that that's secure so third is

00:32:49,919 --> 00:32:52,399
that we care about deployment time

00:32:51,200 --> 00:32:55,200
portability

00:32:52,399 --> 00:32:56,159
so we uh we basically want to make sure

00:32:55,200 --> 00:32:58,080
that once you've

00:32:56,159 --> 00:32:59,840
compiled and validated your your

00:32:58,080 --> 00:33:01,840
application that you can take that

00:32:59,840 --> 00:33:04,080
binary you can deploy it across a number

00:33:01,840 --> 00:33:04,640
of cpu targets without having to go

00:33:04,080 --> 00:33:07,840
through

00:33:04,640 --> 00:33:09,679
any sort of redevelopment cycle

00:33:07,840 --> 00:33:12,320
number four we want to make sure that

00:33:09,679 --> 00:33:13,840
the network stack is outside of the tcb

00:33:12,320 --> 00:33:15,600
and the reason for this is that there

00:33:13,840 --> 00:33:16,399
are quite a number of vulnerabilities

00:33:15,600 --> 00:33:19,120
that occurred

00:33:16,399 --> 00:33:20,320
um historically on the network stack uh

00:33:19,120 --> 00:33:22,799
in fact if you look

00:33:20,320 --> 00:33:24,480
um you know at the linux kernel for

00:33:22,799 --> 00:33:27,279
example

00:33:24,480 --> 00:33:29,039
really this applies to all kernels but

00:33:27,279 --> 00:33:30,399
it's very often times the network stack

00:33:29,039 --> 00:33:32,480
that provides the worst kind of

00:33:30,399 --> 00:33:35,519
vulnerabilities

00:33:32,480 --> 00:33:37,840
some things like heartbleed and such so

00:33:35,519 --> 00:33:39,360
we want that to be outside of the tcp we

00:33:37,840 --> 00:33:41,039
want um

00:33:39,360 --> 00:33:43,039
we want to have security at rest in

00:33:41,039 --> 00:33:45,039
transit and in use so we want to be

00:33:43,039 --> 00:33:47,039
protecting your data at all times and

00:33:45,039 --> 00:33:50,000
this should be on by default

00:33:47,039 --> 00:33:51,600
uh this means that when you are when

00:33:50,000 --> 00:33:52,080
your application is actually running

00:33:51,600 --> 00:33:54,640
it's

00:33:52,080 --> 00:33:55,519
uh it's protected through the hardware

00:33:54,640 --> 00:33:58,240
isolation

00:33:55,519 --> 00:34:00,080
we also want to make sure that your data

00:33:58,240 --> 00:34:02,640
is protected in transit

00:34:00,080 --> 00:34:03,679
via enforcement of encrypted channels

00:34:02,640 --> 00:34:06,880
like tls

00:34:03,679 --> 00:34:08,879
and at rest with disk encryption um six

00:34:06,880 --> 00:34:09,200
is auditability we want our code base to

00:34:08,879 --> 00:34:12,320
be

00:34:09,200 --> 00:34:12,800
uh easy to read and auditable so uh we

00:34:12,320 --> 00:34:16,079
want

00:34:12,800 --> 00:34:17,679
uh we want basically to uh allow people

00:34:16,079 --> 00:34:18,480
to be able to look into it and be able

00:34:17,679 --> 00:34:20,560
to have trust that

00:34:18,480 --> 00:34:21,679
we are doing what we are we say we are

00:34:20,560 --> 00:34:24,159
doing seven

00:34:21,679 --> 00:34:26,079
of course as always we are open source

00:34:24,159 --> 00:34:29,119
um that's that's never in question

00:34:26,079 --> 00:34:31,119
uh eight we we are place hemp heavy

00:34:29,119 --> 00:34:32,960
emphasis on open standards

00:34:31,119 --> 00:34:35,119
so again you don't have to develop

00:34:32,960 --> 00:34:37,280
something to a proprietary

00:34:35,119 --> 00:34:38,240
api we just want to use standards for

00:34:37,280 --> 00:34:39,919
this

00:34:38,240 --> 00:34:41,440
nine we have an emphasis on memory

00:34:39,919 --> 00:34:43,440
safety this is protected

00:34:41,440 --> 00:34:44,720
precisely why we chose web assembly and

00:34:43,440 --> 00:34:48,079
rust as

00:34:44,720 --> 00:34:48,879
our implementation tools and ten we're

00:34:48,079 --> 00:34:50,560
committed to

00:34:48,879 --> 00:34:52,800
ensuring that we will not place any

00:34:50,560 --> 00:34:53,760
backdoors in the project

00:34:52,800 --> 00:34:56,320
i think that one's pretty

00:34:53,760 --> 00:34:59,359
self-explanatory yep absolutely

00:34:56,320 --> 00:35:02,000
so um last last slide before

00:34:59,359 --> 00:35:03,200
for questions is we are an open project

00:35:02,000 --> 00:35:07,119
it's not just the code

00:35:03,200 --> 00:35:09,920
the wiki is open our design uh

00:35:07,119 --> 00:35:10,640
documents are open issues and pr's are

00:35:09,920 --> 00:35:13,599
all open

00:35:10,640 --> 00:35:14,880
our chat is open hosted by rocket chat

00:35:13,599 --> 00:35:18,240
thank you very much indeed

00:35:14,880 --> 00:35:19,760
our cicd resources are open by packet io

00:35:18,240 --> 00:35:22,240
thank you guys indeed

00:35:19,760 --> 00:35:23,839
we have stand ups every day of the uh

00:35:22,240 --> 00:35:25,520
the monday through friday

00:35:23,839 --> 00:35:26,880
anyone can turn up to those you're very

00:35:25,520 --> 00:35:28,960
welcome uh and

00:35:26,880 --> 00:35:30,400
we uh we implement the contributor

00:35:28,960 --> 00:35:32,160
covenant

00:35:30,400 --> 00:35:34,400
code of conduct because we believe very

00:35:32,160 --> 00:35:36,800
strongly in diversity and inclusion

00:35:34,400 --> 00:35:37,760
in the project um here's some

00:35:36,800 --> 00:35:39,760
information here

00:35:37,760 --> 00:35:41,680
um the booth is open there should be

00:35:39,760 --> 00:35:43,119
some folks from the project

00:35:41,680 --> 00:35:45,200
there if you're interested in chatting

00:35:43,119 --> 00:35:47,760
to them or you can just join us on our

00:35:45,200 --> 00:35:49,359
our chat any point chat.next.dev it's

00:35:47,760 --> 00:35:51,920
pretty easy to remember

00:35:49,359 --> 00:35:52,960
uh it's all apache 2-0 license and it's

00:35:51,920 --> 00:35:55,119
all in russ so

00:35:52,960 --> 00:35:57,119
with that i'm going to i'm going to stop

00:35:55,119 --> 00:36:00,560
sharing and i'm going to

00:35:57,119 --> 00:36:02,079
see if we have any questions from

00:36:00,560 --> 00:36:03,950
from anybody and we'll try and answer

00:36:02,079 --> 00:36:07,020
those if we can

00:36:03,950 --> 00:36:07,020
[Music]

00:36:10,240 --> 00:36:13,760
i don't see any questions in the chat we

00:36:12,400 --> 00:36:16,640
can wait for a bit

00:36:13,760 --> 00:36:17,839
to see if anything appears one second

00:36:16,640 --> 00:36:19,200
the final anything that

00:36:17,839 --> 00:36:21,040
we should be talking about that we

00:36:19,200 --> 00:36:23,119
hadn't we did rush

00:36:21,040 --> 00:36:25,200
well not rush through but we uh there's

00:36:23,119 --> 00:36:26,400
only so much we can get on the slides

00:36:25,200 --> 00:36:28,480
anything we should have mentioned you

00:36:26,400 --> 00:36:30,079
think

00:36:28,480 --> 00:36:32,480
um just we would love to have people

00:36:30,079 --> 00:36:34,160
show up and uh be a part of it really

00:36:32,480 --> 00:36:36,079
i think that's the most important thing

00:36:34,160 --> 00:36:37,680
we're a pretty friendly group of people

00:36:36,079 --> 00:36:40,560
and there's a really tech

00:36:37,680 --> 00:36:41,599
really uh challenging technical problems

00:36:40,560 --> 00:36:43,200
to solve

00:36:41,599 --> 00:36:46,320
and uh so it's in we think it's an

00:36:43,200 --> 00:36:48,720
interesting project to be a part of

00:36:46,320 --> 00:36:49,440
indeed it is i'm going to put a couple

00:36:48,720 --> 00:36:53,200
of uh

00:36:49,440 --> 00:36:56,880
of links into the um

00:36:53,200 --> 00:37:00,320
um into the chat

00:36:56,880 --> 00:37:03,200
um one is the uh

00:37:00,320 --> 00:37:04,880
the booth so if anyone wants to uh to

00:37:03,200 --> 00:37:06,640
join us the booth they're very welcome

00:37:04,880 --> 00:37:10,320
to do so

00:37:06,640 --> 00:37:14,000
um another one is our

00:37:10,320 --> 00:37:14,000
um our chat

00:37:15,760 --> 00:37:23,920
uh which is there and last but not least

00:37:19,920 --> 00:37:25,839
is um nrx.dev where you can

00:37:23,920 --> 00:37:28,160
uh that'll lead you to our code and in

00:37:25,839 --> 00:37:31,920
fact all of all of the other information

00:37:28,160 --> 00:37:35,040
um that that you might be needing

00:37:31,920 --> 00:37:36,000
so uh yeah as i said there's uh there's

00:37:35,040 --> 00:37:38,720
some folks

00:37:36,000 --> 00:37:40,240
i think willing ready and able to take

00:37:38,720 --> 00:37:43,520
your questions or you're always

00:37:40,240 --> 00:37:45,520
welcome to join us in in the chat uh and

00:37:43,520 --> 00:37:47,599
we have a mentoring system as well so if

00:37:45,520 --> 00:37:49,599
you want to get involved in the project

00:37:47,599 --> 00:37:51,440
um and you're you know a bit scared by

00:37:49,599 --> 00:37:52,320
the size of the code base or not sure

00:37:51,440 --> 00:37:54,079
how best to

00:37:52,320 --> 00:37:55,920
contribute because it's not all about

00:37:54,079 --> 00:37:57,040
coding uh there's lots of other things

00:37:55,920 --> 00:38:00,079
to be done as well

00:37:57,040 --> 00:38:02,160
then um you can raise a an issue

00:38:00,079 --> 00:38:03,200
a github issue which is a mentoring

00:38:02,160 --> 00:38:05,680
request and

00:38:03,200 --> 00:38:07,599
we will find somebody uh who will uh

00:38:05,680 --> 00:38:08,720
come and um

00:38:07,599 --> 00:38:09,920
and work with you to try and get you

00:38:08,720 --> 00:38:11,599
involved in the project that seems to

00:38:09,920 --> 00:38:14,480
have worked very well so far

00:38:11,599 --> 00:38:15,280
um we had a new person turn up today who

00:38:14,480 --> 00:38:18,480
who came to

00:38:15,280 --> 00:38:20,320
a uh a talk earlier in the week which uh

00:38:18,480 --> 00:38:21,920
she was interested in and um

00:38:20,320 --> 00:38:23,839
she is hopefully going to be starting a

00:38:21,920 --> 00:38:26,079
mentor mentoring request

00:38:23,839 --> 00:38:28,960
uh so that's always always nice to have

00:38:26,079 --> 00:38:28,960
new people like that

00:38:29,839 --> 00:38:33,359
i think that's great i really like the

00:38:32,160 --> 00:38:36,000
open source culture

00:38:33,359 --> 00:38:36,800
i mean open standups and the mentoring

00:38:36,000 --> 00:38:39,359
thing so

00:38:36,800 --> 00:38:41,280
so anyone who wants to get in touch

00:38:39,359 --> 00:38:45,280
there are links in the chat

00:38:41,280 --> 00:38:48,000
and then get in touch with these people

00:38:45,280 --> 00:38:49,680
i think they're doing amazing work and i

00:38:48,000 --> 00:38:52,800
really like the idea

00:38:49,680 --> 00:38:54,560
of enochs like the third type of

00:38:52,800 --> 00:38:57,839
isolation that you talked about

00:38:54,560 --> 00:39:00,480
i'm not from a security background but

00:38:57,839 --> 00:39:01,280
learning about that was really fun so

00:39:00,480 --> 00:39:04,640
thank you

00:39:01,280 --> 00:39:05,839
for sharing all the cool work that you

00:39:04,640 --> 00:39:07,599
did

00:39:05,839 --> 00:39:09,440
you're very welcome thank you for your

00:39:07,599 --> 00:39:12,640
attention everyone is this the last

00:39:09,440 --> 00:39:12,640
is there another um

00:39:13,200 --> 00:39:17,119
uh thing to today in the um in the track

00:39:16,079 --> 00:39:20,320
or is this the last

00:39:17,119 --> 00:39:21,680
last one this is the last one so we're

00:39:20,320 --> 00:39:24,640
done for the day after that

00:39:21,680 --> 00:39:25,839
we have a comedy show and a

00:39:24,640 --> 00:39:29,359
show-and-tell

00:39:25,839 --> 00:39:31,920
party after this so like

00:39:29,359 --> 00:39:32,880
feel free to join that and it's going to

00:39:31,920 --> 00:39:35,520
be fun

00:39:32,880 --> 00:39:38,240
so we hope to see you there so i think

00:39:35,520 --> 00:39:38,240
i'm probably going to bed

00:39:39,440 --> 00:39:42,880
so thank you everybody for your

00:39:40,640 --> 00:39:45,280
attention for coming along and

00:39:42,880 --> 00:39:46,640
we look forward to speaking to you and

00:39:45,280 --> 00:39:47,520
meeting on the project thanks a lot i'm

00:39:46,640 --> 00:39:57,839
going to leave now

00:39:47,520 --> 00:39:57,839
thank you thank you bye

00:39:59,040 --> 00:40:01,119

YouTube URL: https://www.youtube.com/watch?v=y_eDNTIkBBE


