Title: ATCasC - Ansible Tower Configurations as Code
Publication date: 2020-10-06
Playlist: DevConfUS 2020
Description: 
	Speaker: Kedar Kulkarni

Everyone has heard of Red Hat Ansible, but how about Ansible Tower(or AWX- its open source counterpart)? If you donâ€™t know what it is, then this talk is for you. Tower will help you add sophistication to your Ansible usage and have visibility & control over how your team uses Ansible. While doing so, one of the things that you need to worry about is how reliable your Ansible Tower setup is? How would you maintain all the objects like Projects, Users, Settings, Credentials, Job Templates and Workflow Templates created in the ansible tower are reproducible, you can redeploy it in case you lose it. In this talk, you will see how we achieved this reproducibility in our environment.

You will walk away with knowledge of:
What is Ansible Tower and why do I need it?
Ansible Modules to interact with tower
Ansible tower Meta backup vs full backup and restore
CI Workflow for Ansible Playbook/Ansible Tower Git Repos to enable contribution from others
Use cases that can be automated via Ansible
Captions: 
	00:00:00,080 --> 00:00:05,920
a reminder we'll be doing atc asc

00:00:03,600 --> 00:00:07,759
ansible tower configurationist code it's

00:00:05,920 --> 00:00:08,559
a subject that is near and dear to my

00:00:07,759 --> 00:00:11,360
heart

00:00:08,559 --> 00:00:13,360
and kadar kulkarni is going to do a

00:00:11,360 --> 00:00:16,320
great presentation for us so

00:00:13,360 --> 00:00:17,440
we'll be starting again at 12 20 eastern

00:00:16,320 --> 00:00:21,279
daylight time

00:00:17,440 --> 00:00:21,279
it'll be again in three minutes

00:00:21,680 --> 00:00:25,680
so kedar has corrected me it's

00:00:28,840 --> 00:00:34,800
uh

00:00:30,080 --> 00:00:37,600
it's a t cask i believe that is correct

00:00:34,800 --> 00:00:39,920
a t cask ansible tower configuration is

00:00:37,600 --> 00:00:39,920
code

00:00:42,000 --> 00:00:45,280
for anyone who's not familiar with the

00:00:43,360 --> 00:00:47,440
concept of configuration as code it's

00:00:45,280 --> 00:00:50,960
the idea of building your systems

00:00:47,440 --> 00:00:53,360
based on a configuration repository i.e

00:00:50,960 --> 00:00:55,360
github subversion whatever committing

00:00:53,360 --> 00:00:57,760
all your system configuration there

00:00:55,360 --> 00:00:59,840
and treating it like software it's a

00:00:57,760 --> 00:01:00,960
great idea it's a great way of making

00:00:59,840 --> 00:01:03,039
sure that your

00:01:00,960 --> 00:01:04,799
systems are built consistently every

00:01:03,039 --> 00:01:08,240
time

00:01:04,799 --> 00:01:08,240
okay let's get started

00:01:08,960 --> 00:01:16,799
let me go ahead and share the video

00:01:13,840 --> 00:01:16,799
with the audio

00:01:19,280 --> 00:01:23,759
well hello everyone this is watching

00:01:22,560 --> 00:01:27,119
this presentation

00:01:23,759 --> 00:01:28,799
recorded for us2020 now if you are

00:01:27,119 --> 00:01:30,640
watching this presentation

00:01:28,799 --> 00:01:32,960
i'm assuming that you're probably

00:01:30,640 --> 00:01:35,439
interested in the automation as a topic

00:01:32,960 --> 00:01:36,720
you have heard of ansible or maybe also

00:01:35,439 --> 00:01:39,600
used ansible

00:01:36,720 --> 00:01:40,479
and ansible tower but if not that's fine

00:01:39,600 --> 00:01:41,920
as well

00:01:40,479 --> 00:01:44,240
we are going to talk about both of them

00:01:41,920 --> 00:01:45,520
today we are also going to talk about

00:01:44,240 --> 00:01:48,720
infrastructure as code

00:01:45,520 --> 00:01:49,520
configuration and score gate ops and so

00:01:48,720 --> 00:01:52,640
on

00:01:49,520 --> 00:01:55,040
so let me tell you a story

00:01:52,640 --> 00:01:56,799
a few months ago my team was trying to

00:01:55,040 --> 00:01:58,159
decide what would be our de facto

00:01:56,799 --> 00:02:00,159
automation tool

00:01:58,159 --> 00:02:01,360
to fulfill some of our use cases

00:02:00,159 --> 00:02:04,079
internally

00:02:01,360 --> 00:02:05,040
and being red hat the first thing we do

00:02:04,079 --> 00:02:07,200
is

00:02:05,040 --> 00:02:08,080
we look at what tools do we have

00:02:07,200 --> 00:02:10,959
available

00:02:08,080 --> 00:02:12,560
within red hat that we can use and

00:02:10,959 --> 00:02:15,920
that's what we call dog fooding

00:02:12,560 --> 00:02:18,080
eating your own food and in that we

00:02:15,920 --> 00:02:20,480
decided to use ansible tower

00:02:18,080 --> 00:02:21,120
now if you are using ansible tower that

00:02:20,480 --> 00:02:24,319
means

00:02:21,120 --> 00:02:26,800
that you have to deploy a fresh instance

00:02:24,319 --> 00:02:27,920
of ansible tower and then configure that

00:02:26,800 --> 00:02:30,480
ansible tower

00:02:27,920 --> 00:02:31,920
with job templates workflows and all the

00:02:30,480 --> 00:02:34,959
metadata it needs

00:02:31,920 --> 00:02:36,800
to do function properly in order to

00:02:34,959 --> 00:02:38,560
provide the functionality for all of

00:02:36,800 --> 00:02:40,560
your use cases

00:02:38,560 --> 00:02:42,720
and when you're setting these up it

00:02:40,560 --> 00:02:43,599
would mean that you will use these

00:02:42,720 --> 00:02:46,959
things

00:02:43,599 --> 00:02:49,440
using ansible tower ui or cli

00:02:46,959 --> 00:02:50,080
or api and maybe you will integrate

00:02:49,440 --> 00:02:53,120
these

00:02:50,080 --> 00:02:56,319
uh tools into your ci cd system

00:02:53,120 --> 00:02:58,000
and so on now the problem that we faced

00:02:56,319 --> 00:02:59,360
as soon as we started thinking about

00:02:58,000 --> 00:03:02,159
ansible tower

00:02:59,360 --> 00:03:03,440
was how do we manage the change we were

00:03:02,159 --> 00:03:06,800
a team of three

00:03:03,440 --> 00:03:09,680
sis admins or devopsish engineers

00:03:06,800 --> 00:03:10,720
were responsible for standing up this

00:03:09,680 --> 00:03:13,360
ansible tower

00:03:10,720 --> 00:03:15,760
for our team and this was gonna be our

00:03:13,360 --> 00:03:18,560
production ansible tower instance

00:03:15,760 --> 00:03:20,159
which in case goes down stops working

00:03:18,560 --> 00:03:22,239
crashes and burns

00:03:20,159 --> 00:03:24,080
it means gonna take away our good

00:03:22,239 --> 00:03:25,280
night's sleep until we stand this back

00:03:24,080 --> 00:03:28,640
up

00:03:25,280 --> 00:03:30,159
and just before we did this i had an

00:03:28,640 --> 00:03:32,400
ansible tower instance

00:03:30,159 --> 00:03:34,640
which had the exact same problem i had a

00:03:32,400 --> 00:03:36,239
one tiny playground ansible tower

00:03:34,640 --> 00:03:37,599
instance which i was using for some

00:03:36,239 --> 00:03:39,840
functionality

00:03:37,599 --> 00:03:40,959
just to make my life easier it wasn't

00:03:39,840 --> 00:03:43,360
really critical

00:03:40,959 --> 00:03:45,040
nobody on the team was using it but it

00:03:43,360 --> 00:03:48,239
one day it stopped working

00:03:45,040 --> 00:03:51,680
and i had to figure out how

00:03:48,239 --> 00:03:53,120
did i set that up in the first place

00:03:51,680 --> 00:03:56,239
figuring that out based on the

00:03:53,120 --> 00:03:59,120
documentation or your in-memory notes

00:03:56,239 --> 00:04:01,680
is not really easy it's a difficult task

00:03:59,120 --> 00:04:02,720
and that's the time when i was realizing

00:04:01,680 --> 00:04:05,200
that

00:04:02,720 --> 00:04:07,120
hmm maybe this is not really clever way

00:04:05,200 --> 00:04:09,439
to do it and since we were asked to set

00:04:07,120 --> 00:04:12,159
up a production and civil tower where

00:04:09,439 --> 00:04:13,360
maybe 20 30 40 50 people were gonna rely

00:04:12,159 --> 00:04:16,079
on it

00:04:13,360 --> 00:04:17,199
plus all of our automation and ci cd

00:04:16,079 --> 00:04:19,040
pipelines

00:04:17,199 --> 00:04:21,040
it's gonna be much more difficult if

00:04:19,040 --> 00:04:23,600
this production and civil tower which

00:04:21,040 --> 00:04:25,759
has complex workflows and jobs

00:04:23,600 --> 00:04:26,639
is going to go down and it's gonna be

00:04:25,759 --> 00:04:28,960
difficult for

00:04:26,639 --> 00:04:30,479
any of us out of three of three people

00:04:28,960 --> 00:04:33,600
on our team

00:04:30,479 --> 00:04:35,280
to set this back up so

00:04:33,600 --> 00:04:37,600
that's the time when i started thinking

00:04:35,280 --> 00:04:40,320
about and looking around the solution

00:04:37,600 --> 00:04:42,960
to use infrastructure as code because we

00:04:40,320 --> 00:04:44,160
are in 2020 and i had recently been also

00:04:42,960 --> 00:04:47,360
introduced to

00:04:44,160 --> 00:04:50,400
something uh called j cask which is

00:04:47,360 --> 00:04:52,479
jenkins configuration escort and i

00:04:50,400 --> 00:04:54,400
found that concept pretty much relevant

00:04:52,479 --> 00:04:57,759
to what i was trying to do

00:04:54,400 --> 00:04:59,520
and hence the name at cask and similar

00:04:57,759 --> 00:05:01,759
to our configuration and score

00:04:59,520 --> 00:05:03,199
so imagine if you have this production

00:05:01,759 --> 00:05:05,199
and civil tower

00:05:03,199 --> 00:05:07,199
in your production environments and it

00:05:05,199 --> 00:05:10,560
goes down it crashes and burns

00:05:07,199 --> 00:05:14,080
into ashes how do you stand that up

00:05:10,560 --> 00:05:16,000
back from the scratch within lowest

00:05:14,080 --> 00:05:17,360
shortest amount of possible time to

00:05:16,000 --> 00:05:21,039
respond

00:05:17,360 --> 00:05:23,919
so we developed this solution which can

00:05:21,039 --> 00:05:24,720
do this for you in less than 30 minutes

00:05:23,919 --> 00:05:28,080
out of which

00:05:24,720 --> 00:05:29,520
maybe 28 minutes minutes can be set up

00:05:28,080 --> 00:05:31,600
and then 10 minutes can be the

00:05:29,520 --> 00:05:33,600
configuration so you spend

00:05:31,600 --> 00:05:35,199
about 30 minutes standing up a new

00:05:33,600 --> 00:05:38,160
ansible tower instance

00:05:35,199 --> 00:05:40,320
and running configuration and score

00:05:38,160 --> 00:05:42,240
against that ansible tower to get it

00:05:40,320 --> 00:05:44,479
fully functioning

00:05:42,240 --> 00:05:46,400
if that sounds all interesting let's

00:05:44,479 --> 00:05:49,919
dive into the slide deck

00:05:46,400 --> 00:05:50,720
so little bit about myself i have been

00:05:49,919 --> 00:05:53,120
at red hat

00:05:50,720 --> 00:05:54,880
for more than four years now and i'm a

00:05:53,120 --> 00:05:57,280
senior software engineer

00:05:54,880 --> 00:05:59,680
in management business unit where i

00:05:57,280 --> 00:06:01,520
joined as a quality engineer

00:05:59,680 --> 00:06:02,960
who was responsible for python and

00:06:01,520 --> 00:06:05,360
automation testing

00:06:02,960 --> 00:06:06,720
but eventually i basically got

00:06:05,360 --> 00:06:09,759
interested into

00:06:06,720 --> 00:06:10,880
infrastructure automation devops etc

00:06:09,759 --> 00:06:13,680
related practices

00:06:10,880 --> 00:06:14,160
and that's where my interest lies right

00:06:13,680 --> 00:06:15,840
now

00:06:14,160 --> 00:06:17,520
and that's what i have been working on

00:06:15,840 --> 00:06:19,520
in past two years

00:06:17,520 --> 00:06:20,960
i have managed multiple red hat

00:06:19,520 --> 00:06:23,039
virtualization environments

00:06:20,960 --> 00:06:25,120
open stack environments automated lot of

00:06:23,039 --> 00:06:27,520
deployments and day two operations

00:06:25,120 --> 00:06:29,039
using ansible and ansible tower i've

00:06:27,520 --> 00:06:30,080
worked with satellite i have worked with

00:06:29,039 --> 00:06:31,919
cloud forms

00:06:30,080 --> 00:06:34,160
i have worked a little bit with some of

00:06:31,919 --> 00:06:35,440
the newer red hat offerings which are

00:06:34,160 --> 00:06:38,639
sas offerings

00:06:35,440 --> 00:06:42,400
like insights automation analytics etc

00:06:38,639 --> 00:06:45,039
so now let's go into the topic

00:06:42,400 --> 00:06:46,720
we are going to talk about hitops if you

00:06:45,039 --> 00:06:49,919
have not heard about git ops

00:06:46,720 --> 00:06:50,880
gitobs is basically a special way of

00:06:49,919 --> 00:06:54,000
saying that

00:06:50,880 --> 00:06:55,120
everything in your infrastructure has to

00:06:54,000 --> 00:06:57,440
be written down as

00:06:55,120 --> 00:06:58,319
code as to be added into a git

00:06:57,440 --> 00:06:59,680
repository

00:06:58,319 --> 00:07:02,000
or some kind of version control

00:06:59,680 --> 00:07:04,160
repository and every change

00:07:02,000 --> 00:07:05,680
to your production infrastructure is

00:07:04,160 --> 00:07:08,880
driven by this code

00:07:05,680 --> 00:07:11,120
so what that basically means is since

00:07:08,880 --> 00:07:12,880
the day you stand up a new ansible tower

00:07:11,120 --> 00:07:15,360
or any kind of system

00:07:12,880 --> 00:07:16,479
you are going to have all of its setup

00:07:15,360 --> 00:07:18,800
installation

00:07:16,479 --> 00:07:19,919
and configuration as well as data

00:07:18,800 --> 00:07:22,240
operations

00:07:19,919 --> 00:07:23,039
written down in the form of some kind of

00:07:22,240 --> 00:07:25,680
code

00:07:23,039 --> 00:07:27,520
that you can execute and recreate the

00:07:25,680 --> 00:07:30,160
environment update the environment

00:07:27,520 --> 00:07:31,120
make changes to this code and then use

00:07:30,160 --> 00:07:34,560
that code

00:07:31,120 --> 00:07:36,880
execution to make changes to your

00:07:34,560 --> 00:07:38,400
production environments so you are not

00:07:36,880 --> 00:07:39,680
actually logging into any of your

00:07:38,400 --> 00:07:42,240
production systems

00:07:39,680 --> 00:07:43,280
you are actually writing your code and

00:07:42,240 --> 00:07:45,759
then that code

00:07:43,280 --> 00:07:48,160
takes some form of automation execution

00:07:45,759 --> 00:07:49,759
or ci cd to go from that code to the

00:07:48,160 --> 00:07:50,720
production level changes in your

00:07:49,759 --> 00:07:53,280
infrastructure

00:07:50,720 --> 00:07:55,120
and that's what the git ops is so get

00:07:53,280 --> 00:07:56,400
ops basically enables you to do

00:07:55,120 --> 00:07:59,440
infrastructure as core

00:07:56,400 --> 00:08:01,840
or configuration score now

00:07:59,440 --> 00:08:03,599
a little bit more into the main topic

00:08:01,840 --> 00:08:05,280
the introduction is here

00:08:03,599 --> 00:08:07,520
that's saying that we have three

00:08:05,280 --> 00:08:10,160
important things to cover in here

00:08:07,520 --> 00:08:12,240
infrastructure as code ansible and

00:08:10,160 --> 00:08:14,240
ansible tower

00:08:12,240 --> 00:08:16,000
as you might have understood thus far

00:08:14,240 --> 00:08:17,440
that infrastructure score is very

00:08:16,000 --> 00:08:19,680
important for us

00:08:17,440 --> 00:08:21,199
and for a lot of you if you are trying

00:08:19,680 --> 00:08:23,680
to make your lives easier

00:08:21,199 --> 00:08:25,039
because infrastructure as code has its

00:08:23,680 --> 00:08:27,039
own advantages

00:08:25,039 --> 00:08:29,599
it basically helps you boost your

00:08:27,039 --> 00:08:32,240
confidence as devops engineer

00:08:29,599 --> 00:08:34,320
and ansible as well as ansible tower

00:08:32,240 --> 00:08:37,279
these are the two automation tools

00:08:34,320 --> 00:08:39,360
that will help you automate all your all

00:08:37,279 --> 00:08:42,080
of your infrastructure activities

00:08:39,360 --> 00:08:45,120
and they have their own advantages so

00:08:42,080 --> 00:08:47,360
let's look at the ansible tower first

00:08:45,120 --> 00:08:49,120
so ansible tower i'm gonna talk in

00:08:47,360 --> 00:08:51,920
relation with ansible

00:08:49,120 --> 00:08:53,040
differs in slight up slight things so

00:08:51,920 --> 00:08:56,080
basically

00:08:53,040 --> 00:08:58,000
ansible is a command line tool it's a

00:08:56,080 --> 00:08:58,720
basically a package that you install on

00:08:58,000 --> 00:09:01,120
your system

00:08:58,720 --> 00:09:02,080
on your laptop which you can do it right

00:09:01,120 --> 00:09:04,560
now using pip

00:09:02,080 --> 00:09:06,800
install ansible or maybe your own

00:09:04,560 --> 00:09:09,120
preferred package manager

00:09:06,800 --> 00:09:11,200
and installing ansible allows you to run

00:09:09,120 --> 00:09:14,320
commands using ansible

00:09:11,200 --> 00:09:16,080
ansible playbook and so on these

00:09:14,320 --> 00:09:18,640
commands will help you execute

00:09:16,080 --> 00:09:19,680
ad-hoc ansible tasks or ansible

00:09:18,640 --> 00:09:22,240
playbooks

00:09:19,680 --> 00:09:24,160
and these playbooks are usually what is

00:09:22,240 --> 00:09:26,560
the main unit of execution

00:09:24,160 --> 00:09:27,519
in the world of ansible this playbook

00:09:26,560 --> 00:09:30,160
can contain

00:09:27,519 --> 00:09:32,240
a lot of tasks so each task can do a

00:09:30,160 --> 00:09:35,040
certain thing against the host

00:09:32,240 --> 00:09:37,040
that you are running this automation for

00:09:35,040 --> 00:09:38,240
it can install a certain package it can

00:09:37,040 --> 00:09:40,800
remove a certain package

00:09:38,240 --> 00:09:42,240
create a new directory copy some files

00:09:40,800 --> 00:09:45,279
uh download some files

00:09:42,240 --> 00:09:47,360
configure something and so on now

00:09:45,279 --> 00:09:49,200
if there are some repetitive tasks that

00:09:47,360 --> 00:09:52,399
you are wanting to use against

00:09:49,200 --> 00:09:54,000
different hosts in different context and

00:09:52,399 --> 00:09:56,320
using different playbooks

00:09:54,000 --> 00:09:59,200
then you can probably actually abstract

00:09:56,320 --> 00:10:01,279
these tasks into what's called a role

00:09:59,200 --> 00:10:02,320
so in a playbook you can have one or

00:10:01,279 --> 00:10:04,720
more roles

00:10:02,320 --> 00:10:06,480
and these roles are basically a package

00:10:04,720 --> 00:10:07,519
that you can share across different

00:10:06,480 --> 00:10:11,519
playbooks

00:10:07,519 --> 00:10:13,920
so if you are setting up an http server

00:10:11,519 --> 00:10:15,279
if you are setting up a email server if

00:10:13,920 --> 00:10:18,399
you are setting up an

00:10:15,279 --> 00:10:20,240
nginx server apache server or whatever

00:10:18,399 --> 00:10:22,800
in all of these you might want to

00:10:20,240 --> 00:10:26,720
connect to your awx google cloud

00:10:22,800 --> 00:10:28,959
or gc sorry azure to actually create an

00:10:26,720 --> 00:10:30,959
instance or a container or something

00:10:28,959 --> 00:10:32,720
on which you can actually do the further

00:10:30,959 --> 00:10:34,959
deployment and configuration

00:10:32,720 --> 00:10:36,959
so that part of initial deployment is

00:10:34,959 --> 00:10:38,160
same no matter what kind of server

00:10:36,959 --> 00:10:40,800
you're setting up

00:10:38,160 --> 00:10:42,800
so you can create a rollout of that and

00:10:40,800 --> 00:10:44,839
abstract it away so you can have three

00:10:42,800 --> 00:10:47,920
different playbooks to set up

00:10:44,839 --> 00:10:49,839
nginx apache and email servers

00:10:47,920 --> 00:10:51,760
and then all of the all of these

00:10:49,839 --> 00:10:53,440
playbooks can have

00:10:51,760 --> 00:10:55,519
that one common role that they are

00:10:53,440 --> 00:10:57,760
calling to set up the initial

00:10:55,519 --> 00:10:59,360
virtual machine or an instance or some

00:10:57,760 --> 00:11:00,399
kind of container whatever is your

00:10:59,360 --> 00:11:03,360
choice

00:11:00,399 --> 00:11:04,000
that way roles allow you to abstract

00:11:03,360 --> 00:11:06,000
tasks

00:11:04,000 --> 00:11:07,279
and be reusable across multiple

00:11:06,000 --> 00:11:10,160
playbooks

00:11:07,279 --> 00:11:11,519
now in terms of ansible tower it's an

00:11:10,160 --> 00:11:14,480
enterprise level tool

00:11:11,519 --> 00:11:15,600
that enables you to use ansible at

00:11:14,480 --> 00:11:19,120
enterprise level

00:11:15,600 --> 00:11:22,640
so thus far talking about playbooks and

00:11:19,120 --> 00:11:24,480
roles can probably seen as an individual

00:11:22,640 --> 00:11:26,959
thing you can do it on your laptop

00:11:24,480 --> 00:11:28,320
i can do it on my laptop but if you are

00:11:26,959 --> 00:11:30,800
trying to do

00:11:28,320 --> 00:11:32,240
ansible in your production environment

00:11:30,800 --> 00:11:34,240
you might want to have some more

00:11:32,240 --> 00:11:36,000
visibility control over who's running

00:11:34,240 --> 00:11:37,040
what against which hosts or which

00:11:36,000 --> 00:11:39,279
servers

00:11:37,040 --> 00:11:42,000
and you you need to have some historical

00:11:39,279 --> 00:11:44,399
logs to make sure that everything has a

00:11:42,000 --> 00:11:45,279
change log or audit trail that you want

00:11:44,399 --> 00:11:48,240
to check if

00:11:45,279 --> 00:11:49,040
something goes down and so on so these

00:11:48,240 --> 00:11:51,360
um

00:11:49,040 --> 00:11:53,519
enterprise level features of centralized

00:11:51,360 --> 00:11:54,320
ansible execution role-based access

00:11:53,519 --> 00:11:56,320
control

00:11:54,320 --> 00:11:57,519
multiple user environment having these

00:11:56,320 --> 00:12:00,240
debug logs

00:11:57,519 --> 00:12:02,240
uh present across all these environments

00:12:00,240 --> 00:12:04,639
everything is possible

00:12:02,240 --> 00:12:05,360
if you use ansible tower because ansible

00:12:04,639 --> 00:12:07,760
tower

00:12:05,360 --> 00:12:09,680
is basically ansible plus all these

00:12:07,760 --> 00:12:13,200
enterprise level features

00:12:09,680 --> 00:12:14,880
so i'm gonna show you a screenshot of

00:12:13,200 --> 00:12:17,839
ansible to over here

00:12:14,880 --> 00:12:18,720
the screenshot basically shows you that

00:12:17,839 --> 00:12:21,360
this is the

00:12:18,720 --> 00:12:24,000
login page or landing page right after

00:12:21,360 --> 00:12:26,639
your login to ansible tower

00:12:24,000 --> 00:12:28,480
and in this case this is the snapshot or

00:12:26,639 --> 00:12:30,079
screenshot of our production ansible

00:12:28,480 --> 00:12:34,399
tower

00:12:30,079 --> 00:12:35,440
this sensible tower has 111 hosts that

00:12:34,399 --> 00:12:37,519
it is managing

00:12:35,440 --> 00:12:39,120
because ansible tower can do inventory

00:12:37,519 --> 00:12:42,639
management

00:12:39,120 --> 00:12:44,800
it has excuse me number of

00:12:42,639 --> 00:12:47,760
job templates that that were executed on

00:12:44,800 --> 00:12:49,120
it there are number of recent job runs

00:12:47,760 --> 00:12:51,279
that are listed

00:12:49,120 --> 00:12:52,720
then there is a graph showing how many

00:12:51,279 --> 00:12:55,760
jobs are being executed

00:12:52,720 --> 00:12:58,639
on any given day and this

00:12:55,760 --> 00:12:59,360
is the main page that gives you a lot of

00:12:58,639 --> 00:13:01,680
information

00:12:59,360 --> 00:13:02,959
about overall ansible usage in your

00:13:01,680 --> 00:13:04,880
organization

00:13:02,959 --> 00:13:06,880
then you can look at the left hand side

00:13:04,880 --> 00:13:07,680
navigation menu and navigate to some of

00:13:06,880 --> 00:13:10,480
the

00:13:07,680 --> 00:13:11,360
more important and individual types of

00:13:10,480 --> 00:13:13,040
objects

00:13:11,360 --> 00:13:14,800
like you can look at the templates you

00:13:13,040 --> 00:13:17,519
can look at the credentials

00:13:14,800 --> 00:13:19,279
projects inventories users teams

00:13:17,519 --> 00:13:21,519
organization where you do all

00:13:19,279 --> 00:13:22,800
role based access control you can have

00:13:21,519 --> 00:13:25,519
notification setup

00:13:22,800 --> 00:13:27,680
you have instance groups if you have

00:13:25,519 --> 00:13:31,279
like an ansible tower cluster

00:13:27,680 --> 00:13:33,040
settings and so on so

00:13:31,279 --> 00:13:35,920
now that we have looked into ansible

00:13:33,040 --> 00:13:37,680
tower and little bit of ansible

00:13:35,920 --> 00:13:40,880
let's dive into the next important

00:13:37,680 --> 00:13:43,760
question so how to set up ansible tower

00:13:40,880 --> 00:13:45,279
infrastructure with a single playbook

00:13:43,760 --> 00:13:48,000
execute

00:13:45,279 --> 00:13:50,160
now imagine you are in the situation you

00:13:48,000 --> 00:13:52,399
just learned about ansible tower

00:13:50,160 --> 00:13:54,240
now you want to basically start using

00:13:52,399 --> 00:13:55,839
ansible tower the first thing you do is

00:13:54,240 --> 00:13:57,839
you go out

00:13:55,839 --> 00:13:59,920
you find out what information you need

00:13:57,839 --> 00:14:00,399
to download and install the ansible

00:13:59,920 --> 00:14:02,160
tower

00:14:00,399 --> 00:14:04,160
you download it you install it on

00:14:02,160 --> 00:14:05,839
certain system maybe a virtual machine

00:14:04,160 --> 00:14:07,920
somewhere maybe in a container you want

00:14:05,839 --> 00:14:09,040
to spin up a container that has ansible

00:14:07,920 --> 00:14:12,480
tower

00:14:09,040 --> 00:14:15,680
and so on so you basically take care of

00:14:12,480 --> 00:14:16,320
all these things by hand and even after

00:14:15,680 --> 00:14:18,160
that

00:14:16,320 --> 00:14:20,480
your job is not done you still have to

00:14:18,160 --> 00:14:23,440
set up the job templates workflows

00:14:20,480 --> 00:14:24,399
projects credentials users organizations

00:14:23,440 --> 00:14:28,240
ldap

00:14:24,399 --> 00:14:31,360
are back everything and all of this

00:14:28,240 --> 00:14:32,240
can take take you a day maybe take you a

00:14:31,360 --> 00:14:35,360
week

00:14:32,240 --> 00:14:37,519
and it's not done there you have to

00:14:35,360 --> 00:14:40,720
constantly add new things if your

00:14:37,519 --> 00:14:42,480
environment is rapidly changing or with

00:14:40,720 --> 00:14:44,000
any new ansible tower instance it's

00:14:42,480 --> 00:14:46,079
gonna be difficult for you to

00:14:44,000 --> 00:14:47,440
get done in first pass you're gonna have

00:14:46,079 --> 00:14:50,079
to go back change things

00:14:47,440 --> 00:14:51,680
as things work out for you and you're

00:14:50,079 --> 00:14:53,920
gonna have to keep doing that

00:14:51,680 --> 00:14:55,440
now imagine if you are doing that by

00:14:53,920 --> 00:14:57,519
hand every time

00:14:55,440 --> 00:14:59,680
and if there are like three people who

00:14:57,519 --> 00:15:02,000
are responsible for doing this in three

00:14:59,680 --> 00:15:04,079
different geographical locations

00:15:02,000 --> 00:15:06,480
all of them are trying to update this

00:15:04,079 --> 00:15:10,399
single ansible tower instance

00:15:06,480 --> 00:15:12,480
and now this instance basically has a

00:15:10,399 --> 00:15:16,320
lot of mess because nobody

00:15:12,480 --> 00:15:19,360
knows who did what doesn't sound

00:15:16,320 --> 00:15:21,680
very good right so

00:15:19,360 --> 00:15:23,360
with at cask with infrastructure as code

00:15:21,680 --> 00:15:27,839
with configuration as code

00:15:23,360 --> 00:15:30,079
you basically use all of this automation

00:15:27,839 --> 00:15:30,959
to set up and configure your ansible

00:15:30,079 --> 00:15:34,160
tower

00:15:30,959 --> 00:15:36,480
using a single ansible execution

00:15:34,160 --> 00:15:38,480
so what that means is basically you can

00:15:36,480 --> 00:15:42,079
have an ansible playbook

00:15:38,480 --> 00:15:45,120
that can execute against ansible tower

00:15:42,079 --> 00:15:45,600
and set up that ansible tower for you or

00:15:45,120 --> 00:15:47,759
say

00:15:45,600 --> 00:15:48,639
run that against like a new instance or

00:15:47,759 --> 00:15:51,120
maybe just

00:15:48,639 --> 00:15:52,800
run that against your aws environment

00:15:51,120 --> 00:15:55,920
create a new instance

00:15:52,800 --> 00:15:58,320
configure it install ansible tower

00:15:55,920 --> 00:16:00,639
conf ready to use all with a single

00:15:58,320 --> 00:16:03,759
ansible playbook

00:16:00,639 --> 00:16:06,160
so basically ansible tower which is

00:16:03,759 --> 00:16:08,000
the superset of ansible which is

00:16:06,160 --> 00:16:10,399
basically the tool that lets you

00:16:08,000 --> 00:16:11,839
interface with ansible at an enterprise

00:16:10,399 --> 00:16:15,600
scale

00:16:11,839 --> 00:16:17,600
can be set up using the ansible itself

00:16:15,600 --> 00:16:19,920
you heard that right an ansible tower

00:16:17,600 --> 00:16:23,120
collections here on this slide

00:16:19,920 --> 00:16:26,000
is the answer that lets you do that

00:16:23,120 --> 00:16:26,639
with a little help from adcask atkask is

00:16:26,000 --> 00:16:29,279
the project

00:16:26,639 --> 00:16:30,480
that i built based on top of ansible

00:16:29,279 --> 00:16:33,519
tower modules

00:16:30,480 --> 00:16:35,440
within ansible core as well as ansible

00:16:33,519 --> 00:16:37,279
awx collections

00:16:35,440 --> 00:16:39,279
which is the newer thing that came out

00:16:37,279 --> 00:16:43,279
to supersede the ancient

00:16:39,279 --> 00:16:47,519
pencil tower modules within ansible core

00:16:43,279 --> 00:16:48,320
so basically at cask is gonna take you

00:16:47,519 --> 00:16:51,440
from

00:16:48,320 --> 00:16:54,560
a fresh installed ansible tower

00:16:51,440 --> 00:16:56,880
to a fully functional ready-to-use

00:16:54,560 --> 00:16:58,240
ansible tower instance within five

00:16:56,880 --> 00:17:01,040
minutes

00:16:58,240 --> 00:17:02,320
it's super fast it's super convenient

00:17:01,040 --> 00:17:04,720
and it basically

00:17:02,320 --> 00:17:05,839
takes a lot of guesswork a lot of manual

00:17:04,720 --> 00:17:09,120
effort a lot of

00:17:05,839 --> 00:17:12,240
oil if you're an sre

00:17:09,120 --> 00:17:14,799
you'll understand this concept

00:17:12,240 --> 00:17:15,600
it will go all out of your day-to-day

00:17:14,799 --> 00:17:18,640
job because

00:17:15,600 --> 00:17:20,559
ansible tower configuration score

00:17:18,640 --> 00:17:22,559
is taking care of all of this manual

00:17:20,559 --> 00:17:27,360
effort for you

00:17:22,559 --> 00:17:29,360
right now right out of the box so

00:17:27,360 --> 00:17:30,799
enough about ansible tower and the

00:17:29,360 --> 00:17:32,640
configuration s code

00:17:30,799 --> 00:17:35,039
i hope you understand a little bit about

00:17:32,640 --> 00:17:37,039
what we are trying to tackle here

00:17:35,039 --> 00:17:38,640
the problem that we are really trying to

00:17:37,039 --> 00:17:40,559
tackle were

00:17:38,640 --> 00:17:42,960
trying to make your ansible tower easy

00:17:40,559 --> 00:17:44,000
to reproduce easy to stand up easy to

00:17:42,960 --> 00:17:45,760
reconfigure

00:17:44,000 --> 00:17:48,160
have everything tracked into the code

00:17:45,760 --> 00:17:49,840
repository everything has a commit

00:17:48,160 --> 00:17:51,280
history assigned to it every change is

00:17:49,840 --> 00:17:53,919
made through the code

00:17:51,280 --> 00:17:56,000
so all of that anything that you have

00:17:53,919 --> 00:17:56,960
heard for infrastructure escort applies

00:17:56,000 --> 00:17:59,760
to this

00:17:56,960 --> 00:18:01,200
so at cars what is it providing it is

00:17:59,760 --> 00:18:04,640
providing basically an

00:18:01,200 --> 00:18:07,120
as core solution to configure your tower

00:18:04,640 --> 00:18:09,039
and who does it benefit it benefits

00:18:07,120 --> 00:18:11,600
anybody who is a devops engineer

00:18:09,039 --> 00:18:13,440
who is an admin like assist admin who's

00:18:11,600 --> 00:18:16,000
using ansible tower or

00:18:13,440 --> 00:18:16,480
whatever you might call these people or

00:18:16,000 --> 00:18:19,600
maybe

00:18:16,480 --> 00:18:21,600
ansible developers who wants to work on

00:18:19,600 --> 00:18:24,160
ansible tower

00:18:21,600 --> 00:18:25,840
like imagine a situation where you have

00:18:24,160 --> 00:18:28,000
this production and civil tower

00:18:25,840 --> 00:18:28,880
like this is a real story we have an

00:18:28,000 --> 00:18:31,440
ansible tower

00:18:28,880 --> 00:18:32,240
a production ansible tour in our team

00:18:31,440 --> 00:18:35,360
and we have

00:18:32,240 --> 00:18:37,360
three people uh at the beginning

00:18:35,360 --> 00:18:40,000
all of them working on developing new

00:18:37,360 --> 00:18:42,080
playbooks new roles and everything

00:18:40,000 --> 00:18:43,120
that goes into our production ansible

00:18:42,080 --> 00:18:45,600
tower

00:18:43,120 --> 00:18:46,720
so how does adcast help them we are

00:18:45,600 --> 00:18:50,000
going to look at that

00:18:46,720 --> 00:18:53,919
in the slides coming up but for now

00:18:50,000 --> 00:18:56,720
let's keep that in mind and move on so

00:18:53,919 --> 00:18:57,280
what all is supported at cask basically

00:18:56,720 --> 00:18:59,120
supports

00:18:57,280 --> 00:19:01,200
all kind of objects creation

00:18:59,120 --> 00:19:03,200
modification and deletion

00:19:01,200 --> 00:19:04,960
which are listed here on the slide so

00:19:03,200 --> 00:19:07,200
i'm not gonna read through all of them

00:19:04,960 --> 00:19:09,039
but basically if some of the important

00:19:07,200 --> 00:19:11,360
names for ansible tower

00:19:09,039 --> 00:19:13,120
objects would be an ansible tower job

00:19:11,360 --> 00:19:16,080
template or workflow

00:19:13,120 --> 00:19:17,120
credentials hosts inventories

00:19:16,080 --> 00:19:19,760
notifications

00:19:17,120 --> 00:19:20,240
and so on so you are able to manage all

00:19:19,760 --> 00:19:22,880
this

00:19:20,240 --> 00:19:24,640
through your code and at any given point

00:19:22,880 --> 00:19:26,799
if you ask me in my team

00:19:24,640 --> 00:19:29,280
like hey do we have a notification for

00:19:26,799 --> 00:19:31,520
that do we have a job template for that

00:19:29,280 --> 00:19:33,520
what what job templates do you have or

00:19:31,520 --> 00:19:36,000
what permissions this user has

00:19:33,520 --> 00:19:38,720
i don't log into the ansible tower i log

00:19:36,000 --> 00:19:40,880
into our github or gitlab repo

00:19:38,720 --> 00:19:42,400
and look at all of our code base which

00:19:40,880 --> 00:19:44,480
is basically using at

00:19:42,400 --> 00:19:45,520
cars configure our tower in the

00:19:44,480 --> 00:19:47,919
production

00:19:45,520 --> 00:19:49,440
so i'm able to look at the code and

00:19:47,919 --> 00:19:51,280
figure out what is in the production

00:19:49,440 --> 00:19:53,440
ansible tower instead of going into the

00:19:51,280 --> 00:19:56,480
production ansible tower and looking at

00:19:53,440 --> 00:19:59,679
things manually clicking buttons and

00:19:56,480 --> 00:20:01,919
knobs and looking at forms and so on

00:19:59,679 --> 00:20:03,039
that is all possible but for an admin

00:20:01,919 --> 00:20:05,760
who's trying to be

00:20:03,039 --> 00:20:06,159
efficient with the job looking at his

00:20:05,760 --> 00:20:08,480
code

00:20:06,159 --> 00:20:10,159
and telling quickly the answer to any of

00:20:08,480 --> 00:20:13,520
these such kind of questions

00:20:10,159 --> 00:20:15,520
is really easy and really useful so

00:20:13,520 --> 00:20:16,880
are you ready for some kind of yaml

00:20:15,520 --> 00:20:20,000
hotness some

00:20:16,880 --> 00:20:22,080
some nice yamas that are coming your way

00:20:20,000 --> 00:20:23,360
these are some examples that i have

00:20:22,080 --> 00:20:26,400
taken

00:20:23,360 --> 00:20:27,760
from addcask that we use and sharing

00:20:26,400 --> 00:20:30,400
some screenshots here

00:20:27,760 --> 00:20:31,360
so you can understand how it is written

00:20:30,400 --> 00:20:35,200
so

00:20:31,360 --> 00:20:36,799
there we go this one is showing you a

00:20:35,200 --> 00:20:38,880
tower credentials

00:20:36,799 --> 00:20:40,000
dictionary which is a list of

00:20:38,880 --> 00:20:43,440
dictionaries

00:20:40,000 --> 00:20:46,960
and each item in this list is a new

00:20:43,440 --> 00:20:49,600
ansible tower credential so we have

00:20:46,960 --> 00:20:50,080
one two three and four credentials each

00:20:49,600 --> 00:20:52,559
of them

00:20:50,080 --> 00:20:54,720
are of different type and take different

00:20:52,559 --> 00:20:57,120
kind of parameters

00:20:54,720 --> 00:20:57,760
and using this kind of yaml i'm able to

00:20:57,120 --> 00:21:00,480
add like

00:20:57,760 --> 00:21:02,080
maybe another 100 200 or however many

00:21:00,480 --> 00:21:04,799
credentials i want in this

00:21:02,080 --> 00:21:07,360
file and when i run add cast when i run

00:21:04,799 --> 00:21:09,520
configure tower.yaml playbook

00:21:07,360 --> 00:21:11,840
reads this file and creates all these

00:21:09,520 --> 00:21:15,039
objects on the ansible tower

00:21:11,840 --> 00:21:18,159
now imagine if you had to actually

00:21:15,039 --> 00:21:20,240
sit look at your ansible tower and

00:21:18,159 --> 00:21:22,559
write down all these credentials or make

00:21:20,240 --> 00:21:26,720
all these credential objects in the ui

00:21:22,559 --> 00:21:28,720
using that form clicky clicky clicky

00:21:26,720 --> 00:21:30,640
it's not not a great thing to do it's

00:21:28,720 --> 00:21:33,520
not great use of your time

00:21:30,640 --> 00:21:35,760
with this playbook with this ad cast

00:21:33,520 --> 00:21:38,320
with this yaml file you're saving

00:21:35,760 --> 00:21:39,200
tons of time for everyone for you for

00:21:38,320 --> 00:21:41,760
your team

00:21:39,200 --> 00:21:43,919
you're able to deliver your targets on

00:21:41,760 --> 00:21:45,919
time you're able to quickly reconfigure

00:21:43,919 --> 00:21:48,960
or add new things to your tower

00:21:45,919 --> 00:21:50,559
and you're able to have that assurance

00:21:48,960 --> 00:21:53,919
that good night sleep that

00:21:50,559 --> 00:21:56,159
rest that will tell you that in case

00:21:53,919 --> 00:21:58,640
something happens to your ansible tower

00:21:56,159 --> 00:22:00,559
all of the code is written you just

00:21:58,640 --> 00:22:00,960
execute this again and you reproduce

00:22:00,559 --> 00:22:02,880
this

00:22:00,960 --> 00:22:04,559
and your ansible tower is ready for the

00:22:02,880 --> 00:22:07,840
production

00:22:04,559 --> 00:22:08,640
so how does that sound if that sounds

00:22:07,840 --> 00:22:11,520
interesting

00:22:08,640 --> 00:22:12,320
let's look at another example this one

00:22:11,520 --> 00:22:15,200
is from the

00:22:12,320 --> 00:22:16,720
tower projects.yaml file here we have a

00:22:15,200 --> 00:22:19,039
top level dictionary key

00:22:16,720 --> 00:22:20,400
which says to our projects and it has a

00:22:19,039 --> 00:22:22,960
list of dictionaries

00:22:20,400 --> 00:22:24,080
so we have added two different projects

00:22:22,960 --> 00:22:26,799
in the tower

00:22:24,080 --> 00:22:28,720
using these two items in this dictionary

00:22:26,799 --> 00:22:30,400
all of the projects are configured with

00:22:28,720 --> 00:22:32,000
all the parameters it needs

00:22:30,400 --> 00:22:33,600
right out of the box and you don't have

00:22:32,000 --> 00:22:35,280
to remember any of this because it is

00:22:33,600 --> 00:22:37,679
written down

00:22:35,280 --> 00:22:38,640
now job templates top templates is the

00:22:37,679 --> 00:22:42,240
object which is

00:22:38,640 --> 00:22:43,440
executed within ansible tower alongside

00:22:42,240 --> 00:22:46,720
probably sometimes

00:22:43,440 --> 00:22:48,240
in a workflow template and each of these

00:22:46,720 --> 00:22:50,480
things can be created

00:22:48,240 --> 00:22:51,600
using yamls that look something similar

00:22:50,480 --> 00:22:54,640
to this

00:22:51,600 --> 00:22:55,840
and then this job template is

00:22:54,640 --> 00:22:58,400
responsible

00:22:55,840 --> 00:22:59,679
for executing your playbook which is

00:22:58,400 --> 00:23:01,840
highlighted here

00:22:59,679 --> 00:23:02,880
in the playbook section playbook utils

00:23:01,840 --> 00:23:04,640
remove vm

00:23:02,880 --> 00:23:07,360
so it is able to remove a virtual

00:23:04,640 --> 00:23:09,360
machine for me for my team members

00:23:07,360 --> 00:23:11,200
using this job template and i have put

00:23:09,360 --> 00:23:12,240
together this job template and hundreds

00:23:11,200 --> 00:23:15,280
of others

00:23:12,240 --> 00:23:17,039
using the code in that file and i never

00:23:15,280 --> 00:23:17,919
have to remember a single thing out of

00:23:17,039 --> 00:23:20,880
it

00:23:17,919 --> 00:23:23,280
because who can remember all this and

00:23:20,880 --> 00:23:26,159
you might argue that i can document this

00:23:23,280 --> 00:23:27,600
but what document is better than the

00:23:26,159 --> 00:23:29,520
code itself

00:23:27,600 --> 00:23:31,120
you can read the document and try to do

00:23:29,520 --> 00:23:33,200
the ui things you can

00:23:31,120 --> 00:23:34,720
try to click in the ui and fill up

00:23:33,200 --> 00:23:35,760
different forms with the information

00:23:34,720 --> 00:23:38,559
from docs

00:23:35,760 --> 00:23:39,919
and create these objects one chalk

00:23:38,559 --> 00:23:42,320
template can take you

00:23:39,919 --> 00:23:43,919
maybe two to three minutes to fill up

00:23:42,320 --> 00:23:44,720
but if you have the code and if you are

00:23:43,919 --> 00:23:46,799
running the

00:23:44,720 --> 00:23:48,320
playbook that actually creates these

00:23:46,799 --> 00:23:50,880
templates for you

00:23:48,320 --> 00:23:52,000
it will create the entire functioning

00:23:50,880 --> 00:23:55,039
ansible tower

00:23:52,000 --> 00:23:56,799
in five minutes or less

00:23:55,039 --> 00:23:58,240
of course depending on the size the time

00:23:56,799 --> 00:24:01,520
might vary but

00:23:58,240 --> 00:24:03,279
for us for the tower that of

00:24:01,520 --> 00:24:04,960
that we are using in our team it takes

00:24:03,279 --> 00:24:07,120
five to ten minutes to set up

00:24:04,960 --> 00:24:09,120
after the initial setup of the ansible

00:24:07,120 --> 00:24:09,760
tower a fresh ansible tower instance is

00:24:09,120 --> 00:24:13,200
made

00:24:09,760 --> 00:24:14,720
available to the outcast so now

00:24:13,200 --> 00:24:16,480
what we are gonna do is we are gonna

00:24:14,720 --> 00:24:18,559
quickly switch to the demo

00:24:16,480 --> 00:24:20,559
and we are going to look at how all of

00:24:18,559 --> 00:24:26,080
this works in action

00:24:20,559 --> 00:24:26,080
demo time everyone eyes at your screen

00:24:26,159 --> 00:24:31,760
so here i have a pre-recorded demo where

00:24:28,880 --> 00:24:34,159
i am showing you an ansible tower

00:24:31,760 --> 00:24:35,440
that is freshly installed i'm just

00:24:34,159 --> 00:24:37,440
logging into this

00:24:35,440 --> 00:24:39,279
fresh installation of fancy built over

00:24:37,440 --> 00:24:41,919
right now as you can see

00:24:39,279 --> 00:24:42,640
i'm highlighting some of the top cards

00:24:41,919 --> 00:24:45,600
so

00:24:42,640 --> 00:24:46,400
first card here was hosts then fail host

00:24:45,600 --> 00:24:48,880
inventories

00:24:46,400 --> 00:24:51,200
projects everything and as you can see

00:24:48,880 --> 00:24:53,520
it is either one or zero

00:24:51,200 --> 00:24:55,200
so if it is one it is usually the demo

00:24:53,520 --> 00:24:57,760
host like the local host

00:24:55,200 --> 00:24:58,640
demo inventory demo project demo job

00:24:57,760 --> 00:25:02,240
template

00:24:58,640 --> 00:25:03,919
because everything demo comes up

00:25:02,240 --> 00:25:05,679
as soon as the ansible tower is

00:25:03,919 --> 00:25:07,840
installed because it comes up

00:25:05,679 --> 00:25:09,360
pre-installed or pre-configured for you

00:25:07,840 --> 00:25:12,240
in the ansible tower

00:25:09,360 --> 00:25:13,200
on any fresh installation but it doesn't

00:25:12,240 --> 00:25:17,039
really do much

00:25:13,200 --> 00:25:20,559
it's just demo purposes only so

00:25:17,039 --> 00:25:23,760
from here we went on to add

00:25:20,559 --> 00:25:26,400
hundreds of hosts tens of inventories

00:25:23,760 --> 00:25:27,360
tens of job templates another few

00:25:26,400 --> 00:25:29,840
workflows

00:25:27,360 --> 00:25:30,799
that comprise all of multiple job

00:25:29,840 --> 00:25:33,200
templates

00:25:30,799 --> 00:25:34,320
adding users and ldap everything using

00:25:33,200 --> 00:25:36,159
addcask

00:25:34,320 --> 00:25:38,640
in our team and every time we make a

00:25:36,159 --> 00:25:40,799
change we make change to add cast

00:25:38,640 --> 00:25:42,320
we have a review process we review the

00:25:40,799 --> 00:25:44,880
changes we merge them

00:25:42,320 --> 00:25:46,159
and we push these changes to see uh

00:25:44,880 --> 00:25:49,679
through ci cd

00:25:46,159 --> 00:25:51,760
to production and simple tower so

00:25:49,679 --> 00:25:53,679
next up here in demo is that i'm gonna

00:25:51,760 --> 00:25:54,640
show you templates as i said there is

00:25:53,679 --> 00:25:57,440
demo template

00:25:54,640 --> 00:25:59,360
demo credential demo project demo

00:25:57,440 --> 00:26:02,159
inventory and in that inventory we have

00:25:59,360 --> 00:26:05,760
localhost which is the only host we have

00:26:02,159 --> 00:26:06,400
now you look at the terminal you can see

00:26:05,760 --> 00:26:08,640
that

00:26:06,400 --> 00:26:11,200
we have tower configurations directory

00:26:08,640 --> 00:26:12,720
under add cask in this directory i have

00:26:11,200 --> 00:26:16,480
a bunch of files

00:26:12,720 --> 00:26:19,760
and each file has different tower object

00:26:16,480 --> 00:26:21,520
that you can specify now if you look at

00:26:19,760 --> 00:26:22,880
some of the files that i'm gonna cut out

00:26:21,520 --> 00:26:26,080
here on the screen

00:26:22,880 --> 00:26:28,720
you're gonna see the same or similar

00:26:26,080 --> 00:26:29,760
yaml formatted text that actually

00:26:28,720 --> 00:26:31,919
comprises of

00:26:29,760 --> 00:26:32,960
the configurations that i want to make

00:26:31,919 --> 00:26:35,039
or apply

00:26:32,960 --> 00:26:37,120
to my ansible tower in order to make it

00:26:35,039 --> 00:26:39,600
a useful instance

00:26:37,120 --> 00:26:41,600
so what my what i mean by useful

00:26:39,600 --> 00:26:43,520
instance is that if you log into ansible

00:26:41,600 --> 00:26:44,960
tower as soon as it is installed it is

00:26:43,520 --> 00:26:46,159
really not useful because there's

00:26:44,960 --> 00:26:48,320
nothing in there

00:26:46,159 --> 00:26:50,000
and now you add all this stuff in there

00:26:48,320 --> 00:26:50,480
all the job templates and workflows and

00:26:50,000 --> 00:26:53,120
all

00:26:50,480 --> 00:26:54,240
the metadata that is required to make

00:26:53,120 --> 00:26:56,400
that happen

00:26:54,240 --> 00:26:57,840
and then that tower is useful for you or

00:26:56,400 --> 00:27:00,720
anybody on your team

00:26:57,840 --> 00:27:02,000
to start using it to run automation

00:27:00,720 --> 00:27:06,080
against your systems

00:27:02,000 --> 00:27:08,880
and get your job done so let's look at

00:27:06,080 --> 00:27:10,720
our job templates file now if you look

00:27:08,880 --> 00:27:12,720
at the tower shop templates i have

00:27:10,720 --> 00:27:14,080
two job templates and few other things

00:27:12,720 --> 00:27:17,200
that are commented out

00:27:14,080 --> 00:27:17,760
as an example i have left those there

00:27:17,200 --> 00:27:19,360
because

00:27:17,760 --> 00:27:20,960
these help you understand how these

00:27:19,360 --> 00:27:23,679
things are created

00:27:20,960 --> 00:27:25,919
and how you can create more of these but

00:27:23,679 --> 00:27:28,080
right now we just have two job templates

00:27:25,919 --> 00:27:29,440
that's template one and demo job

00:27:28,080 --> 00:27:31,039
template

00:27:29,440 --> 00:27:33,279
and they have all their respective

00:27:31,039 --> 00:27:34,559
respective fields of information filled

00:27:33,279 --> 00:27:36,960
up

00:27:34,559 --> 00:27:38,559
and next is tower inventories.yaml so

00:27:36,960 --> 00:27:41,120
here we are creating

00:27:38,559 --> 00:27:41,919
inventory localhost satlab admin

00:27:41,120 --> 00:27:45,360
inventory

00:27:41,919 --> 00:27:47,279
we are uh creating the mmo1 revm o2

00:27:45,360 --> 00:27:49,200
so four inventories are being created

00:27:47,279 --> 00:27:51,520
everything else is left there

00:27:49,200 --> 00:27:53,279
in comments as examples for your

00:27:51,520 --> 00:27:56,559
reference

00:27:53,279 --> 00:27:58,799
so now what i'm doing is i

00:27:56,559 --> 00:27:58,799
am

00:28:01,760 --> 00:28:05,760
i am running this ansible playbook sorry

00:28:04,240 --> 00:28:06,240
about that i am running the sensible

00:28:05,760 --> 00:28:08,320
playbook

00:28:06,240 --> 00:28:10,799
that is actually responsible for reading

00:28:08,320 --> 00:28:14,399
all the files under tower configs

00:28:10,799 --> 00:28:16,399
and create all the instances of

00:28:14,399 --> 00:28:19,120
all the objects that are required within

00:28:16,399 --> 00:28:21,360
ansible tower all the metadata for you

00:28:19,120 --> 00:28:23,039
so now it has started execution it is

00:28:21,360 --> 00:28:24,320
going through all the steps so it makes

00:28:23,039 --> 00:28:26,720
sure all the packages

00:28:24,320 --> 00:28:29,120
needs are installed it is applying some

00:28:26,720 --> 00:28:32,720
settings to that ansible tower

00:28:29,120 --> 00:28:34,720
then it is gonna go into

00:28:32,720 --> 00:28:35,760
the next thing where it is setting up

00:28:34,720 --> 00:28:38,399
the organization

00:28:35,760 --> 00:28:40,559
setting up the user it is then adding

00:28:38,399 --> 00:28:41,600
the tower team so ansible tower has

00:28:40,559 --> 00:28:44,159
ability to create

00:28:41,600 --> 00:28:45,120
teams of users and assign them certain

00:28:44,159 --> 00:28:46,799
permissions

00:28:45,120 --> 00:28:48,880
because it can provide the role based

00:28:46,799 --> 00:28:49,919
access control now we are adding the

00:28:48,880 --> 00:28:52,159
credential

00:28:49,919 --> 00:28:52,960
obviously if you set this no log equal

00:28:52,159 --> 00:28:55,039
to true

00:28:52,960 --> 00:28:57,039
it will not actually share all the

00:28:55,039 --> 00:28:58,799
credentials on the screen

00:28:57,039 --> 00:29:00,480
but these are some dummy credentials for

00:28:58,799 --> 00:29:02,320
you um then

00:29:00,480 --> 00:29:04,080
you have some inventories that we saw

00:29:02,320 --> 00:29:05,440
earlier so it created all four

00:29:04,080 --> 00:29:08,399
inventories we needed

00:29:05,440 --> 00:29:09,919
now it's adding adding the tower project

00:29:08,399 --> 00:29:12,880
and in the tower project

00:29:09,919 --> 00:29:14,720
we are adding two different projects

00:29:12,880 --> 00:29:16,480
both of the projects are

00:29:14,720 --> 00:29:17,919
ready projects pointing to one of my

00:29:16,480 --> 00:29:19,760
github repo

00:29:17,919 --> 00:29:21,600
and once the project is added what

00:29:19,760 --> 00:29:24,240
ansible tower does is it

00:29:21,600 --> 00:29:25,039
connects to the github repo or any repo

00:29:24,240 --> 00:29:27,760
where you are

00:29:25,039 --> 00:29:28,159
fetching that project from and make sure

00:29:27,760 --> 00:29:31,600
that

00:29:28,159 --> 00:29:33,760
it is accessible it clones that locally

00:29:31,600 --> 00:29:36,000
within ansible tower instance so that

00:29:33,760 --> 00:29:37,120
all playbooks are available for you to

00:29:36,000 --> 00:29:38,960
execute

00:29:37,120 --> 00:29:41,440
so that's what it is doing right now it

00:29:38,960 --> 00:29:42,000
is sleeping or it is basically in a

00:29:41,440 --> 00:29:44,000
sleep

00:29:42,000 --> 00:29:45,200
timer where it is trying to make sure

00:29:44,000 --> 00:29:47,679
that all the projects

00:29:45,200 --> 00:29:48,799
that we added can be updated or are

00:29:47,679 --> 00:29:51,120
updated

00:29:48,799 --> 00:29:52,559
if the projects don't get update or

00:29:51,120 --> 00:29:56,000
don't get synced

00:29:52,559 --> 00:29:58,640
that means that project sync failed and

00:29:56,000 --> 00:30:00,720
ansible tower would not be able to

00:29:58,640 --> 00:30:02,880
access the playbooks from that project

00:30:00,720 --> 00:30:04,240
once that's done we are creating tower

00:30:02,880 --> 00:30:07,039
inventory sources

00:30:04,240 --> 00:30:08,320
we are adding hosts we added localhost

00:30:07,039 --> 00:30:10,320
here manually

00:30:08,320 --> 00:30:12,480
then we are adding the job templates

00:30:10,320 --> 00:30:14,320
which is what we we are gonna be able to

00:30:12,480 --> 00:30:16,320
execute once it is ready

00:30:14,320 --> 00:30:18,960
then we are adding some notifications so

00:30:16,320 --> 00:30:21,840
we have ability to do emails irc

00:30:18,960 --> 00:30:24,399
slack and so on notifications from your

00:30:21,840 --> 00:30:26,399
ansible tower on each job execution

00:30:24,399 --> 00:30:27,440
success or failure depending on how you

00:30:26,399 --> 00:30:30,799
might want to set it up

00:30:27,440 --> 00:30:32,720
set that up so

00:30:30,799 --> 00:30:34,480
now once everything is done once we

00:30:32,720 --> 00:30:36,320
created job templates and workflows the

00:30:34,480 --> 00:30:37,279
last step in the playbook is to make

00:30:36,320 --> 00:30:40,320
sure

00:30:37,279 --> 00:30:42,480
apply a role that actually makes sure

00:30:40,320 --> 00:30:43,360
all the ansible tower objects that we

00:30:42,480 --> 00:30:44,960
created have

00:30:43,360 --> 00:30:46,880
correct permissions for the correct

00:30:44,960 --> 00:30:48,000
users that are gonna use the ansible

00:30:46,880 --> 00:30:51,600
toolbar

00:30:48,000 --> 00:30:53,840
so that prevents anybody from your team

00:30:51,600 --> 00:30:55,600
logging into ansible tower and doing

00:30:53,840 --> 00:30:57,279
something inadvertently which

00:30:55,600 --> 00:30:58,640
they are not supposed to do or they are

00:30:57,279 --> 00:31:01,200
not supposed to see

00:30:58,640 --> 00:31:02,000
i'm gonna refresh this page i'm gonna

00:31:01,200 --> 00:31:04,320
show you

00:31:02,000 --> 00:31:05,120
let's see the inventories that we listed

00:31:04,320 --> 00:31:07,840
earlier are

00:31:05,120 --> 00:31:08,720
all created we have inventory source

00:31:07,840 --> 00:31:10,960
created

00:31:08,720 --> 00:31:13,200
everything is pre-filled for you

00:31:10,960 --> 00:31:14,880
projects are created projects are

00:31:13,200 --> 00:31:17,120
showing the green dot in front of them

00:31:14,880 --> 00:31:17,679
so they are synced all credentials are

00:31:17,120 --> 00:31:20,559
ready

00:31:17,679 --> 00:31:21,200
and the job templates are also ready so

00:31:20,559 --> 00:31:23,279
now

00:31:21,200 --> 00:31:24,240
this tower is much more useful than it

00:31:23,279 --> 00:31:27,200
was

00:31:24,240 --> 00:31:27,600
less than four minutes ago so as you can

00:31:27,200 --> 00:31:31,039
see

00:31:27,600 --> 00:31:32,000
ansible tower is able to set up itself

00:31:31,039 --> 00:31:33,600
using addcast

00:31:32,000 --> 00:31:36,080
project or you are able to set up the

00:31:33,600 --> 00:31:39,039
ansible tower using addcast project

00:31:36,080 --> 00:31:40,799
such that it becomes very easy process

00:31:39,039 --> 00:31:41,600
to set up and configure the ansible

00:31:40,799 --> 00:31:43,120
tower

00:31:41,600 --> 00:31:44,799
now i'm gonna switch back to the

00:31:43,120 --> 00:31:46,240
presentation

00:31:44,799 --> 00:31:48,080
and we are going to look at the next

00:31:46,240 --> 00:31:51,200
slides

00:31:48,080 --> 00:31:52,960
so here on this slide what we have is

00:31:51,200 --> 00:31:55,840
the workflow that we follow

00:31:52,960 --> 00:31:56,720
in our ansible tower setup so within our

00:31:55,840 --> 00:31:59,200
team

00:31:56,720 --> 00:32:00,640
we are using gitlab to store all of our

00:31:59,200 --> 00:32:03,360
ad cast code

00:32:00,640 --> 00:32:04,720
and we have a pipeline configured in

00:32:03,360 --> 00:32:06,480
gitlab ci

00:32:04,720 --> 00:32:08,240
that actually does a lot of things that

00:32:06,480 --> 00:32:11,279
i'm gonna describe now

00:32:08,240 --> 00:32:14,080
so suppose you are an engineer

00:32:11,279 --> 00:32:14,880
who is responsible to write a ansible

00:32:14,080 --> 00:32:18,000
role

00:32:14,880 --> 00:32:18,880
and a playbook to use that role and you

00:32:18,000 --> 00:32:20,799
want to make

00:32:18,880 --> 00:32:23,279
that role available or that playbook

00:32:20,799 --> 00:32:25,919
available to your entire team

00:32:23,279 --> 00:32:26,960
using your production ansible tower so

00:32:25,919 --> 00:32:28,880
anybody

00:32:26,960 --> 00:32:31,600
on your team can log into production

00:32:28,880 --> 00:32:33,600
ansible tower and use your job template

00:32:31,600 --> 00:32:36,640
which basically is going to execute this

00:32:33,600 --> 00:32:38,720
playbook or role that you are writing

00:32:36,640 --> 00:32:40,320
now to make that happen there are two

00:32:38,720 --> 00:32:43,440
routes one

00:32:40,320 --> 00:32:45,200
you ask your sis admin or you go in

00:32:43,440 --> 00:32:49,039
yourself into your production ansible

00:32:45,200 --> 00:32:52,320
tower and do those changes manually

00:32:49,039 --> 00:32:55,440
is that clever or is that easy

00:32:52,320 --> 00:32:56,720
i'd say it is easy probably but not

00:32:55,440 --> 00:32:59,440
clever

00:32:56,720 --> 00:33:00,399
because at cask helps you have all of

00:32:59,440 --> 00:33:03,200
that recorded

00:33:00,399 --> 00:33:03,679
and we have developed a pipeline that

00:33:03,200 --> 00:33:06,720
does

00:33:03,679 --> 00:33:09,360
all of the workflow behind

00:33:06,720 --> 00:33:10,640
going from testing staging to production

00:33:09,360 --> 00:33:13,200
kind of scenario

00:33:10,640 --> 00:33:14,960
with your code so you write some code

00:33:13,200 --> 00:33:17,360
and you submit a merge request

00:33:14,960 --> 00:33:18,320
in our git lab repo as soon as you

00:33:17,360 --> 00:33:21,120
submit a

00:33:18,320 --> 00:33:22,720
gitlab merge request our gitlab runners

00:33:21,120 --> 00:33:25,200
will pick up that merge request

00:33:22,720 --> 00:33:26,720
and connect to our rev provider redhat

00:33:25,200 --> 00:33:29,120
virtualization provider

00:33:26,720 --> 00:33:30,399
which is also shown as o work on this

00:33:29,120 --> 00:33:32,399
slide

00:33:30,399 --> 00:33:33,519
what is upstream name for those who

00:33:32,399 --> 00:33:35,360
don't know

00:33:33,519 --> 00:33:36,559
for the red hat virtualization project

00:33:35,360 --> 00:33:39,039
and upstream means

00:33:36,559 --> 00:33:41,679
it is open source and it is available on

00:33:39,039 --> 00:33:44,640
github or some kind of code repository

00:33:41,679 --> 00:33:45,600
on the internet free of cost now it

00:33:44,640 --> 00:33:47,600
connects to that

00:33:45,600 --> 00:33:49,440
word provider creates a new virtual

00:33:47,600 --> 00:33:52,399
machine which is based off of

00:33:49,440 --> 00:33:52,880
red hat enterprise linux and installs a

00:33:52,399 --> 00:33:54,880
fresh

00:33:52,880 --> 00:33:57,279
instance of ansible tower on that

00:33:54,880 --> 00:34:00,880
machine configures it

00:33:57,279 --> 00:34:04,159
using addcast and makes a test

00:34:00,880 --> 00:34:05,679
ansible tower ready for you using this

00:34:04,159 --> 00:34:07,760
test ansible tower

00:34:05,679 --> 00:34:08,800
then you as an engineer shown here in

00:34:07,760 --> 00:34:10,879
the diagram

00:34:08,800 --> 00:34:12,240
is able to go into this test ansible

00:34:10,879 --> 00:34:14,399
tower and

00:34:12,240 --> 00:34:16,000
run some tests based on what kind of

00:34:14,399 --> 00:34:19,119
changes you have proposed

00:34:16,000 --> 00:34:20,079
so if you are proposing a new playbook

00:34:19,119 --> 00:34:21,919
or a role

00:34:20,079 --> 00:34:23,599
you might just want to make sure the job

00:34:21,919 --> 00:34:26,079
template associated with that

00:34:23,599 --> 00:34:27,200
is available and is able to execute

00:34:26,079 --> 00:34:29,679
successfully

00:34:27,200 --> 00:34:31,520
if you are changing an existing code

00:34:29,679 --> 00:34:33,440
anywhere in the repository you might

00:34:31,520 --> 00:34:36,560
want to do more you might want to

00:34:33,440 --> 00:34:39,359
check test multiple job templates

00:34:36,560 --> 00:34:41,040
workflows and whatnot make sure that

00:34:39,359 --> 00:34:42,879
whatever you are proposing is not

00:34:41,040 --> 00:34:45,280
breaking anything else

00:34:42,879 --> 00:34:46,639
in the production ansible tower so you

00:34:45,280 --> 00:34:48,800
are able to use add cars

00:34:46,639 --> 00:34:50,399
and set up this test ansible tower for

00:34:48,800 --> 00:34:52,159
that sole reason

00:34:50,399 --> 00:34:53,839
where you make sure that everything is

00:34:52,159 --> 00:34:56,079
working and

00:34:53,839 --> 00:34:57,520
me as a reviewer is also able to look at

00:34:56,079 --> 00:35:00,720
this test ansible tower

00:34:57,520 --> 00:35:02,079
run anything multiple times and make

00:35:00,720 --> 00:35:04,160
sure that it works

00:35:02,079 --> 00:35:05,440
before i give you a thumbs up on your

00:35:04,160 --> 00:35:08,880
review and

00:35:05,440 --> 00:35:12,240
merge your merge request now the

00:35:08,880 --> 00:35:14,880
the test step here or the

00:35:12,240 --> 00:35:16,720
the step where you determine how your

00:35:14,880 --> 00:35:18,880
code is affecting production ansible

00:35:16,720 --> 00:35:19,920
tower or what all tests you need to

00:35:18,880 --> 00:35:23,040
execute

00:35:19,920 --> 00:35:23,440
is going to be a manual effort on your

00:35:23,040 --> 00:35:25,920
side

00:35:23,440 --> 00:35:27,200
on the side of the reviewer but we are

00:35:25,920 --> 00:35:30,000
working on a project

00:35:27,200 --> 00:35:32,240
internally in my team which is called

00:35:30,000 --> 00:35:34,480
ansible genealogist

00:35:32,240 --> 00:35:35,599
which can look at all of your ad cask

00:35:34,480 --> 00:35:38,079
repository

00:35:35,599 --> 00:35:39,440
and trace the changes between your

00:35:38,079 --> 00:35:41,280
proposed code

00:35:39,440 --> 00:35:43,680
and the production ansible tower code

00:35:41,280 --> 00:35:47,040
that is running in the repo

00:35:43,680 --> 00:35:49,359
so um basically using that

00:35:47,040 --> 00:35:51,359
relationship derivation we are able to

00:35:49,359 --> 00:35:52,320
tell you what job templates and what

00:35:51,359 --> 00:35:54,640
workflows

00:35:52,320 --> 00:35:55,760
you are going to affect based on what

00:35:54,640 --> 00:35:58,800
changes you have

00:35:55,760 --> 00:36:00,800
proposed in your merge request and

00:35:58,800 --> 00:36:01,839
taking that output you are able to

00:36:00,800 --> 00:36:04,560
actually

00:36:01,839 --> 00:36:05,040
reduce or remove all the guesswork of

00:36:04,560 --> 00:36:07,920
what

00:36:05,040 --> 00:36:09,760
exactly you as a contributor or i as a

00:36:07,920 --> 00:36:12,079
reviewer need to make sure work

00:36:09,760 --> 00:36:14,000
is working before we merge your merge

00:36:12,079 --> 00:36:15,119
request or pull request your code into

00:36:14,000 --> 00:36:17,359
the production

00:36:15,119 --> 00:36:19,280
because all of that is derived for us

00:36:17,359 --> 00:36:21,920
using ansible genealogist

00:36:19,280 --> 00:36:23,760
and this project would be open sourced

00:36:21,920 --> 00:36:26,079
at appropriate time

00:36:23,760 --> 00:36:27,520
now this project is going to help you

00:36:26,079 --> 00:36:30,079
get that output which

00:36:27,520 --> 00:36:30,960
then you can consume into an ansible

00:36:30,079 --> 00:36:33,920
playbook that

00:36:30,960 --> 00:36:36,800
can read this output and call all the

00:36:33,920 --> 00:36:39,040
appropriate jobs and workflow templates

00:36:36,800 --> 00:36:41,119
in automated fashion so your entire

00:36:39,040 --> 00:36:43,839
testing phase is automated

00:36:41,119 --> 00:36:45,920
and if the ansible tests pass if all the

00:36:43,839 --> 00:36:48,240
tower jobs and workflows that you have

00:36:45,920 --> 00:36:49,040
executed in this automated or manual

00:36:48,240 --> 00:36:50,960
testing

00:36:49,040 --> 00:36:52,480
depending on how you are doing that are

00:36:50,960 --> 00:36:54,720
passing

00:36:52,480 --> 00:36:57,040
in that case your merge request your

00:36:54,720 --> 00:36:59,599
proposed changes are really good

00:36:57,040 --> 00:37:01,440
and we are able to merge them without

00:36:59,599 --> 00:37:03,920
any significant harm to the production

00:37:01,440 --> 00:37:06,880
environment so once we merge them

00:37:03,920 --> 00:37:09,839
we run the final step where we have

00:37:06,880 --> 00:37:12,480
another stage in our gitlab pipeline

00:37:09,839 --> 00:37:14,400
which acts on any merge request which is

00:37:12,480 --> 00:37:15,599
merged into the master or the double

00:37:14,400 --> 00:37:19,200
branch

00:37:15,599 --> 00:37:22,400
and takes that and push those changes or

00:37:19,200 --> 00:37:23,839
reruns the ansible tower configured.yaml

00:37:22,400 --> 00:37:26,400
playbook

00:37:23,839 --> 00:37:28,720
reconfigure and submit our prod such

00:37:26,400 --> 00:37:31,680
that the new changes that you proposed

00:37:28,720 --> 00:37:32,400
are injected into the production ansible

00:37:31,680 --> 00:37:34,720
tower

00:37:32,400 --> 00:37:37,760
and are made available to all of the

00:37:34,720 --> 00:37:40,800
users on the team

00:37:37,760 --> 00:37:42,560
this way we have a proper workflow for

00:37:40,800 --> 00:37:44,400
anybody who is trying to contribute to

00:37:42,560 --> 00:37:47,280
ansible to our production and this

00:37:44,400 --> 00:37:48,320
helps us all of the admins and all of

00:37:47,280 --> 00:37:50,400
our team

00:37:48,320 --> 00:37:52,079
to function more effectively than it

00:37:50,400 --> 00:37:55,520
would otherwise

00:37:52,079 --> 00:37:58,400
because having changes done manually

00:37:55,520 --> 00:37:59,119
is difficult and not easy to track

00:37:58,400 --> 00:38:01,280
versus

00:37:59,119 --> 00:38:03,200
if you have all these processes and all

00:38:01,280 --> 00:38:04,160
these steps which are all recorded and

00:38:03,200 --> 00:38:06,880
automated

00:38:04,160 --> 00:38:09,040
you can check which change introduced

00:38:06,880 --> 00:38:11,040
any failure if any failure happens

00:38:09,040 --> 00:38:12,720
even after all this testing and you are

00:38:11,040 --> 00:38:14,079
able to revert the changes

00:38:12,720 --> 00:38:16,480
and you are able to rerun the

00:38:14,079 --> 00:38:18,240
configuration so that those changes are

00:38:16,480 --> 00:38:21,040
taken out or

00:38:18,240 --> 00:38:23,119
maybe you can just destroy the ansible

00:38:21,040 --> 00:38:23,839
tower and just rerun from a previous

00:38:23,119 --> 00:38:26,480
commit

00:38:23,839 --> 00:38:28,000
and create a new one which is identical

00:38:26,480 --> 00:38:31,040
to the previous production

00:38:28,000 --> 00:38:35,599
because it has everything that you need

00:38:31,040 --> 00:38:37,200
that's that's how it is easy it is so

00:38:35,599 --> 00:38:39,440
how do you get started if you are really

00:38:37,200 --> 00:38:40,800
excited about this if you have installed

00:38:39,440 --> 00:38:42,720
an ansible tower

00:38:40,800 --> 00:38:45,200
and go to this repository this

00:38:42,720 --> 00:38:47,040
repository has a really nice readme

00:38:45,200 --> 00:38:48,800
and if you don't understand any of this

00:38:47,040 --> 00:38:50,400
stuff you can contact me i'll have my

00:38:48,800 --> 00:38:51,359
contact information at the end of the

00:38:50,400 --> 00:38:53,680
slides

00:38:51,359 --> 00:38:55,680
but basically you clone the repo you go

00:38:53,680 --> 00:38:57,680
into tower configs directory you add all

00:38:55,680 --> 00:38:58,400
the stuff that is required to be added

00:38:57,680 --> 00:38:59,839
there

00:38:58,400 --> 00:39:02,000
and you run the playbook which is

00:38:59,839 --> 00:39:03,920
configure tower.yaml under the playbooks

00:39:02,000 --> 00:39:05,760
directory in this project

00:39:03,920 --> 00:39:07,440
and that takes care of setting up all

00:39:05,760 --> 00:39:09,119
your ansible tower based on all the

00:39:07,440 --> 00:39:13,040
tower configs that you have in that

00:39:09,119 --> 00:39:13,040
directory of tower dash configs

00:39:13,839 --> 00:39:16,880
a quick introduction or quick overview

00:39:16,320 --> 00:39:18,880
to the

00:39:16,880 --> 00:39:21,119
milestones that we have had in this

00:39:18,880 --> 00:39:21,440
project the initial idea was conceived

00:39:21,119 --> 00:39:23,599
in

00:39:21,440 --> 00:39:24,480
january of 2020 when i had some

00:39:23,599 --> 00:39:26,320
incidents

00:39:24,480 --> 00:39:28,000
with my old ansible tower and we were

00:39:26,320 --> 00:39:29,440
also tasked to set up the new production

00:39:28,000 --> 00:39:32,240
environment

00:39:29,440 --> 00:39:34,480
then we developed that cast based on the

00:39:32,240 --> 00:39:37,920
ansible tower collections

00:39:34,480 --> 00:39:40,400
then we open source that art cask so

00:39:37,920 --> 00:39:41,280
it was open sourced on github in march

00:39:40,400 --> 00:39:43,200
00:39:41,280 --> 00:39:45,839
in april i presented that to a larger

00:39:43,200 --> 00:39:47,520
and civil community within red hat

00:39:45,839 --> 00:39:49,200
where a lot of different people from

00:39:47,520 --> 00:39:51,280
different teams and different functions

00:39:49,200 --> 00:39:53,839
and different geographic location

00:39:51,280 --> 00:39:55,680
participated and a lot of them i liked

00:39:53,839 --> 00:39:56,800
the idea or were working on a similar

00:39:55,680 --> 00:39:59,920
idea

00:39:56,800 --> 00:40:04,240
so we decided to work together

00:39:59,920 --> 00:40:06,400
and in june we actually released our new

00:40:04,240 --> 00:40:09,520
project called tower configurations

00:40:06,400 --> 00:40:10,000
on ansible galaxy which is under red hat

00:40:09,520 --> 00:40:13,200
cop

00:40:10,000 --> 00:40:14,640
namespace or organization it is based

00:40:13,200 --> 00:40:17,599
off of at cask

00:40:14,640 --> 00:40:19,359
and some other ideas that enhance the

00:40:17,599 --> 00:40:22,720
stuff that we had in the act cast

00:40:19,359 --> 00:40:25,359
so our configuration is the next step

00:40:22,720 --> 00:40:26,880
and if you were to try out at cask and

00:40:25,359 --> 00:40:28,800
if you really like it i would also

00:40:26,880 --> 00:40:31,119
recommend that you move on to the next

00:40:28,800 --> 00:40:33,440
step and look at the tower configuration

00:40:31,119 --> 00:40:35,200
which is built on top of at cusk you

00:40:33,440 --> 00:40:38,720
know in a certain way

00:40:35,200 --> 00:40:41,119
so right now at the present we don't

00:40:38,720 --> 00:40:43,359
have any of this supported by red hat

00:40:41,119 --> 00:40:45,359
but we are actively attempting to get

00:40:43,359 --> 00:40:48,000
this into red hat automation hub

00:40:45,359 --> 00:40:49,040
make it available to all of you to use

00:40:48,000 --> 00:40:51,119
all of the customers

00:40:49,040 --> 00:40:53,359
by and this is gonna be supported

00:40:51,119 --> 00:40:54,400
solution it makes into the automation

00:40:53,359 --> 00:40:56,319
hub

00:40:54,400 --> 00:40:59,520
right now it is unsupported and you have

00:40:56,319 --> 00:41:02,000
to use it at your own discretion

00:40:59,520 --> 00:41:03,680
here are some testimonials uh i'm not

00:41:02,000 --> 00:41:05,440
gonna read those out but this is what

00:41:03,680 --> 00:41:08,240
people said about the solution once it

00:41:05,440 --> 00:41:10,240
was presented to them

00:41:08,240 --> 00:41:12,160
and lastly thank you so much for

00:41:10,240 --> 00:41:13,760
attending i hope you learned something

00:41:12,160 --> 00:41:15,680
new today i hope you learned about

00:41:13,760 --> 00:41:17,760
github's infrastructure score

00:41:15,680 --> 00:41:19,200
configuration as code ansible and

00:41:17,760 --> 00:41:22,400
ansible tower

00:41:19,200 --> 00:41:24,079
and i hope you really enjoy enjoyed this

00:41:22,400 --> 00:41:25,440
and i look forward to hearing any

00:41:24,079 --> 00:41:27,760
questions from you

00:41:25,440 --> 00:41:28,960
and this is all my contact information

00:41:27,760 --> 00:41:31,119
and i'll be happy

00:41:28,960 --> 00:41:32,240
to answer any questions offline after

00:41:31,119 --> 00:41:34,640
the conference

00:41:32,240 --> 00:41:36,160
on any of these communication mediums

00:41:34,640 --> 00:41:39,119
thank you so much

00:41:36,160 --> 00:41:39,119
and you have a great day

00:41:45,200 --> 00:41:50,000
thank you kedar i it was a very

00:41:48,000 --> 00:41:52,079
interesting presentation

00:41:50,000 --> 00:41:54,319
and configuration as code as i said uh

00:41:52,079 --> 00:41:56,160
before and and deploying ansible tower

00:41:54,319 --> 00:41:57,440
and configuring it that way is extremely

00:41:56,160 --> 00:41:58,960
important

00:41:57,440 --> 00:42:03,839
do you want to join us for a question

00:41:58,960 --> 00:42:03,839
and answer

00:42:12,079 --> 00:42:17,520
okay everybody so let's uh think of your

00:42:15,359 --> 00:42:21,200
good questions and comments for kadar he

00:42:17,520 --> 00:42:21,200
should be online in just a second

00:42:23,839 --> 00:42:28,720
can you hear me yes indeed although no

00:42:26,480 --> 00:42:30,880
video but i can hear you

00:42:28,720 --> 00:42:32,720
yeah my video is not working for some

00:42:30,880 --> 00:42:35,760
reason today

00:42:32,720 --> 00:42:38,640
that's fine yeah i mean uh

00:42:35,760 --> 00:42:40,240
for for us this concept has uh really

00:42:38,640 --> 00:42:43,280
been very helpful and

00:42:40,240 --> 00:42:46,240
right now our pipeline has been executed

00:42:43,280 --> 00:42:49,359
21 000 times in last eight months

00:42:46,240 --> 00:42:50,960
um which keeps uh updating our product

00:42:49,359 --> 00:42:51,680
production and civil tower using all of

00:42:50,960 --> 00:42:54,800
the outcast

00:42:51,680 --> 00:42:57,520
stuff so anybody

00:42:54,800 --> 00:42:59,359
who is trying to set up ansible tower

00:42:57,520 --> 00:43:02,480
it's the best thing to do

00:42:59,359 --> 00:43:02,480
in the beginning itself

00:43:03,040 --> 00:43:06,319
that's really neat yeah i i've had a

00:43:05,200 --> 00:43:07,839
bunch of uh

00:43:06,319 --> 00:43:09,680
folks that i've talked to about ansible

00:43:07,839 --> 00:43:11,520
tower hobast how to get started and how

00:43:09,680 --> 00:43:12,480
to set up the initial configurationist

00:43:11,520 --> 00:43:14,400
code pipeline

00:43:12,480 --> 00:43:17,119
and i will definitely refer them to this

00:43:14,400 --> 00:43:20,640
this is really good

00:43:17,119 --> 00:43:23,760
thank you yeah um thanks everybody uh

00:43:20,640 --> 00:43:25,119
for attending the talk um and

00:43:23,760 --> 00:43:27,119
definitely check out the tower

00:43:25,119 --> 00:43:27,520
configuration because that's where we

00:43:27,119 --> 00:43:30,400
are

00:43:27,520 --> 00:43:32,480
putting all of the latest code um so

00:43:30,400 --> 00:43:33,359
addcask was just the place where it got

00:43:32,480 --> 00:43:36,400
started

00:43:33,359 --> 00:43:37,040
hence that repo has been also kept in

00:43:36,400 --> 00:43:38,800
place

00:43:37,040 --> 00:43:40,240
but i have updated the readme there to

00:43:38,800 --> 00:43:43,359
point to the new repo

00:43:40,240 --> 00:43:45,839
as well for all of you excellent

00:43:43,359 --> 00:43:48,160
so i ask you to talk about savings and

00:43:45,839 --> 00:43:48,160
time

00:43:48,400 --> 00:43:53,760
yeah definitely so um

00:43:51,440 --> 00:43:55,440
the way we uh have been using this is

00:43:53,760 --> 00:43:58,640
basically for every

00:43:55,440 --> 00:44:00,800
so if we are quantify the savings every

00:43:58,640 --> 00:44:01,839
single time we propose a new merge

00:44:00,800 --> 00:44:04,960
request

00:44:01,839 --> 00:44:06,079
we have had more than hundreds of merge

00:44:04,960 --> 00:44:09,280
requests that we

00:44:06,079 --> 00:44:11,680
we posted in last few months every

00:44:09,280 --> 00:44:13,520
merge request has this temporary ansible

00:44:11,680 --> 00:44:15,760
tower that's coming in

00:44:13,520 --> 00:44:16,720
and that ansible tower is used for all

00:44:15,760 --> 00:44:19,280
the testing so

00:44:16,720 --> 00:44:21,359
the ansible tower comes up uh gets

00:44:19,280 --> 00:44:22,319
configured everything in 20 to 25

00:44:21,359 --> 00:44:24,160
minutes

00:44:22,319 --> 00:44:25,920
um which you would have to do otherwise

00:44:24,160 --> 00:44:27,520
for your every merge request

00:44:25,920 --> 00:44:29,280
and you cannot really share the same

00:44:27,520 --> 00:44:30,640
ansible tower across different merge

00:44:29,280 --> 00:44:32,960
requests because

00:44:30,640 --> 00:44:34,720
uh you might just it's like testing you

00:44:32,960 --> 00:44:36,240
cannot test on the same system over and

00:44:34,720 --> 00:44:38,319
over again because you don't know what's

00:44:36,240 --> 00:44:40,240
the previous state is right

00:44:38,319 --> 00:44:41,520
so you need a fresh clean state to start

00:44:40,240 --> 00:44:45,200
with

00:44:41,520 --> 00:44:48,240
so 20 000 times running the pipeline

00:44:45,200 --> 00:44:51,920
we have ran so many

00:44:48,240 --> 00:44:54,720
tower deployments everything let's say

00:44:51,920 --> 00:44:56,160
multiplied by 10 or 20 minutes um of

00:44:54,720 --> 00:44:58,160
automation that running

00:44:56,160 --> 00:44:59,359
and if you were to do it manually it

00:44:58,160 --> 00:45:01,680
would be like

00:44:59,359 --> 00:45:03,119
maybe one art war depending on however

00:45:01,680 --> 00:45:06,480
the big changes

00:45:03,119 --> 00:45:08,079
so it's it's really um difficult to give

00:45:06,480 --> 00:45:09,680
you a number but that that will give you

00:45:08,079 --> 00:45:11,599
an idea of how

00:45:09,680 --> 00:45:13,440
beneficial it is for everybody on your

00:45:11,599 --> 00:45:14,079
team to have something like this in

00:45:13,440 --> 00:45:16,720
place

00:45:14,079 --> 00:45:18,800
and uh it doesn't have to be uh

00:45:16,720 --> 00:45:20,800
something you need to start with like

00:45:18,800 --> 00:45:23,760
for example you just went ahead and did

00:45:20,800 --> 00:45:26,160
create an ansible tower manually um

00:45:23,760 --> 00:45:27,520
there is a tower export module that is

00:45:26,160 --> 00:45:29,920
being integrated in the tower

00:45:27,520 --> 00:45:32,800
configuration which will let you export

00:45:29,920 --> 00:45:34,720
from your existing tower and use that to

00:45:32,800 --> 00:45:35,839
stand up a new tower to see all of your

00:45:34,720 --> 00:45:38,240
changes are

00:45:35,839 --> 00:45:40,160
properly working as configuration scored

00:45:38,240 --> 00:45:43,440
and then you can just use the new tower

00:45:40,160 --> 00:45:45,599
there on or just keep that as backup

00:45:43,440 --> 00:45:47,119
so there are many ways to do these

00:45:45,599 --> 00:45:49,280
things um

00:45:47,119 --> 00:45:50,560
just the configuration as code as as you

00:45:49,280 --> 00:45:52,800
said alexander

00:45:50,560 --> 00:45:53,920
um is a great concept and everybody

00:45:52,800 --> 00:45:56,319
should be uh

00:45:53,920 --> 00:45:57,839
trying to leverage this it just gives

00:45:56,319 --> 00:46:01,359
you a lot of peace of mind

00:45:57,839 --> 00:46:03,680
uh if nothing else yeah very much agreed

00:46:01,359 --> 00:46:05,119
um i've been on many projects over the

00:46:03,680 --> 00:46:07,599
past 25 years or so

00:46:05,119 --> 00:46:09,440
where some piece of infrastructure gets

00:46:07,599 --> 00:46:10,079
built and then no one knows how it's

00:46:09,440 --> 00:46:12,400
done

00:46:10,079 --> 00:46:14,400
and configuration as code is so critical

00:46:12,400 --> 00:46:16,960
to making sure that doesn't happen

00:46:14,400 --> 00:46:18,079
so it's really important in addition to

00:46:16,960 --> 00:46:20,079
the time savings

00:46:18,079 --> 00:46:22,000
it also helps with security and the fact

00:46:20,079 --> 00:46:22,560
that if you document how everything's

00:46:22,000 --> 00:46:24,480
built

00:46:22,560 --> 00:46:25,599
when you find a security issue it's very

00:46:24,480 --> 00:46:28,160
easy to go back in

00:46:25,599 --> 00:46:29,040
and go in the configurations uh

00:46:28,160 --> 00:46:31,599
playbooks or

00:46:29,040 --> 00:46:32,560
scripts or whatever it happens to be and

00:46:31,599 --> 00:46:33,839
make an update

00:46:32,560 --> 00:46:36,079
and you know you're going to get it

00:46:33,839 --> 00:46:37,599
right yeah and it is our points about

00:46:36,079 --> 00:46:41,040
yeah traceability

00:46:37,599 --> 00:46:44,240
and attributability as well

00:46:41,040 --> 00:46:45,680
yep all those uh abilities special

00:46:44,240 --> 00:46:47,920
abilities i would say

00:46:45,680 --> 00:46:49,680
uh come in very handy when you're in a

00:46:47,920 --> 00:46:53,040
bad situation because

00:46:49,680 --> 00:46:53,440
um it's easy to overlook the benefit of

00:46:53,040 --> 00:46:55,359
such

00:46:53,440 --> 00:46:56,480
uh system like when i was setting this

00:46:55,359 --> 00:46:59,280
up initially

00:46:56,480 --> 00:46:59,920
um we i was also trying to explain that

00:46:59,280 --> 00:47:02,480
to

00:46:59,920 --> 00:47:04,400
to my teammates uh to get buy-in from

00:47:02,480 --> 00:47:06,720
them that okay you have to follow this

00:47:04,400 --> 00:47:09,040
process this pipeline where you have to

00:47:06,720 --> 00:47:10,720
um make sure your code is working you

00:47:09,040 --> 00:47:12,000
have to test it on our test ansible

00:47:10,720 --> 00:47:14,079
tower that comes up

00:47:12,000 --> 00:47:16,079
for your specific merge request and show

00:47:14,079 --> 00:47:17,119
me that your stuff is working before we

00:47:16,079 --> 00:47:20,880
merge that

00:47:17,119 --> 00:47:23,119
that process itself can basically take a

00:47:20,880 --> 00:47:27,040
little bit of mind shift change

00:47:23,119 --> 00:47:29,599
uh sorry mindset shift to to actually

00:47:27,040 --> 00:47:30,400
get that buy in uh but once you have

00:47:29,599 --> 00:47:32,559
that

00:47:30,400 --> 00:47:36,640
that really works well in the long term

00:47:32,559 --> 00:47:36,640
um for you and for your team

00:47:36,880 --> 00:47:41,680
yeah absolutely true does

00:47:40,079 --> 00:47:45,280
anyone have any questions or any

00:47:41,680 --> 00:47:45,280
comments for kadar

00:47:47,280 --> 00:47:52,480
seems like not too much oh it looks like

00:47:50,079 --> 00:47:55,440
uh alain says any suggestions about

00:47:52,480 --> 00:47:55,440
managing vaults

00:47:56,079 --> 00:48:03,440
excuse me um so what is an interesting

00:48:00,160 --> 00:48:05,839
um thing that we came across when we

00:48:03,440 --> 00:48:09,040
were moving from ansible

00:48:05,839 --> 00:48:11,200
to ansible tower and what happened is uh

00:48:09,040 --> 00:48:13,359
and civil tower does not so if you let's

00:48:11,200 --> 00:48:16,480
say if you have an ansible repo with

00:48:13,359 --> 00:48:18,720
ansible vault file that has all your

00:48:16,480 --> 00:48:20,079
important stuff in there it's not easy

00:48:18,720 --> 00:48:22,559
for for you to go from

00:48:20,079 --> 00:48:24,240
there to ansible tower and when you when

00:48:22,559 --> 00:48:26,400
you talk to ansible tower

00:48:24,240 --> 00:48:27,680
team or look at their documents they i

00:48:26,400 --> 00:48:30,800
think seem to

00:48:27,680 --> 00:48:33,040
um recommend hashicorp uh

00:48:30,800 --> 00:48:34,160
integration with uncivil tower to get

00:48:33,040 --> 00:48:36,800
better uh

00:48:34,160 --> 00:48:39,119
better uh security and access levels uh

00:48:36,800 --> 00:48:41,599
related modifications or

00:48:39,119 --> 00:48:42,880
those controls so i would definitely

00:48:41,599 --> 00:48:45,760
suggest that if you're

00:48:42,880 --> 00:48:46,640
uh managing a more production and civil

00:48:45,760 --> 00:48:47,839
tower

00:48:46,640 --> 00:48:49,920
probably you'll have to look at

00:48:47,839 --> 00:48:51,040
hashicorp vault integration with ansible

00:48:49,920 --> 00:48:54,160
tower

00:48:51,040 --> 00:48:57,520
for us we just use the uh ansible

00:48:54,160 --> 00:48:59,119
vault directly using loading that has a

00:48:57,520 --> 00:49:01,520
inventory source

00:48:59,119 --> 00:49:03,040
and we have to worry too much about

00:49:01,520 --> 00:49:04,640
access because we have the

00:49:03,040 --> 00:49:06,240
inventory and inventory sources

00:49:04,640 --> 00:49:08,160
permission so that nobody

00:49:06,240 --> 00:49:10,559
who's not supposed to see it can't see

00:49:08,160 --> 00:49:12,720
it but it's definitely

00:49:10,559 --> 00:49:14,000
not not probably going to be production

00:49:12,720 --> 00:49:14,800
grade uh for

00:49:14,000 --> 00:49:17,839
something that's more customer

00:49:14,800 --> 00:49:19,280
customer-facing and critical

00:49:17,839 --> 00:49:21,359
yeah that's excellent that's that's a

00:49:19,280 --> 00:49:25,119
very good point kedar and i'm i'm

00:49:21,359 --> 00:49:25,119
familiar with hasty corps vault as well

00:49:26,000 --> 00:49:30,160
and alan says thank you thanks for

00:49:29,200 --> 00:49:31,520
attending

00:49:30,160 --> 00:49:34,559
yeah and thank you very much for the

00:49:31,520 --> 00:49:37,680
presentation this is very interesting

00:49:34,559 --> 00:49:39,839
yep thanks alexander uh for hosting me

00:49:37,680 --> 00:49:41,599
um i think there are no other questions

00:49:39,839 --> 00:49:43,119
uh i'll leave this

00:49:41,599 --> 00:49:49,359
so that the next presentation can get

00:49:43,119 --> 00:49:49,359

YouTube URL: https://www.youtube.com/watch?v=sDeG124dHrc


