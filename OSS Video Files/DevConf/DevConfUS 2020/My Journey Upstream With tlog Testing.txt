Title: My Journey Upstream With tlog Testing
Publication date: 2020-10-06
Playlist: DevConfUS 2020
Description: 
	Speaker: Scott Poore

Want to get involved in Open Source but don't know where to start?

Try writing tests!

A lot of projects already have tests upstream with the source code.

As a Quality Engineer working on RHEL, I rarely worked on upstream projects. Most of my tests were written in private Downstream repos. For tlog, I wanted to change that.

To contribute tests upstream I had to learn a different workflow. This presentation will show my journey contributing tests upstream to the tlog project.

Who will benefit from this presentation?
* Anyone writing tests Downstream that wants to move upstream
* Anyone looking to start contributing upstream (with tests!)

What will be covered in this presentation?
* Upstream vs Downstream testing
* A basic upstream workflow
* My experience contributing tests upstream
* Lessons learned

Take-aways from this presentation?
* A better understanding of the upstream contribution process
* A new found desire to start contributing tests upstream
Captions: 
	00:00:09,280 --> 00:00:12,559
hi

00:00:10,320 --> 00:00:14,240
today i'm going to present my story

00:00:12,559 --> 00:00:16,720
about my journey upstream

00:00:14,240 --> 00:00:18,800
with t log testing this is kind of a

00:00:16,720 --> 00:00:20,880
case study in getting started with

00:00:18,800 --> 00:00:23,439
open source software in upstream

00:00:20,880 --> 00:00:23,439
environments

00:00:24,960 --> 00:00:28,320
a quick introduction my name is scott

00:00:27,599 --> 00:00:31,439
poor

00:00:28,320 --> 00:00:33,760
i am a quality engineer at red hat i

00:00:31,439 --> 00:00:35,920
work primarily on testing identity

00:00:33,760 --> 00:00:38,879
management software in rel

00:00:35,920 --> 00:00:39,280
if you're familiar with free ipa that is

00:00:38,879 --> 00:00:42,079
the

00:00:39,280 --> 00:00:44,079
upstream project that the downstream

00:00:42,079 --> 00:00:46,320
identity management product is based

00:00:44,079 --> 00:00:46,320
on

00:00:47,840 --> 00:00:53,520
now i'm going to go a little bit into my

00:00:50,640 --> 00:00:53,520
journey upstream

00:00:54,960 --> 00:00:58,879
i'll start by covering some terminology

00:00:56,879 --> 00:01:01,440
that may not be familiar to everyone

00:00:58,879 --> 00:01:02,480
then i'll describe where i started from

00:01:01,440 --> 00:01:05,119
and motivation

00:01:02,480 --> 00:01:06,799
for moving upstream i'll cover some

00:01:05,119 --> 00:01:10,000
challenges you can face when you

00:01:06,799 --> 00:01:14,720
first start working with open source and

00:01:10,000 --> 00:01:14,720
my specific fears and concerns

00:01:14,799 --> 00:01:19,680
i'll cover a little bit about how to

00:01:16,479 --> 00:01:19,680
contribute to open source

00:01:20,640 --> 00:01:26,080
go into the process that i went through

00:01:22,560 --> 00:01:28,400
for planning the tests for the software

00:01:26,080 --> 00:01:30,799
then writing the test and the mistake

00:01:28,400 --> 00:01:32,560
that i made

00:01:30,799 --> 00:01:34,320
i'll talk about submitting my test

00:01:32,560 --> 00:01:37,600
upstream

00:01:34,320 --> 00:01:39,200
what that was like and what i did

00:01:37,600 --> 00:01:43,360
and to end this section i'll give a

00:01:39,200 --> 00:01:43,360
brief overview of lessons learned

00:01:45,920 --> 00:01:52,159
first up terminology what is open source

00:01:50,560 --> 00:01:54,720
for starters the term open source

00:01:52,159 --> 00:01:56,479
originated with open source software

00:01:54,720 --> 00:01:58,640
this is software that makes the source

00:01:56,479 --> 00:02:00,880
code available to the public

00:01:58,640 --> 00:02:03,200
to quote an opensource.com article it is

00:02:00,880 --> 00:02:06,159
software that anyone can inspect

00:02:03,200 --> 00:02:08,319
modify and enhance today the term is

00:02:06,159 --> 00:02:10,640
used much more broadly

00:02:08,319 --> 00:02:12,080
it is applied to products such as

00:02:10,640 --> 00:02:13,920
hardware projects

00:02:12,080 --> 00:02:15,840
which are designed and built using open

00:02:13,920 --> 00:02:18,640
source principles

00:02:15,840 --> 00:02:21,920
the term is also applied to the general

00:02:18,640 --> 00:02:24,080
processes used in open source projects

00:02:21,920 --> 00:02:26,239
these processes may be used to

00:02:24,080 --> 00:02:28,000
design and guide how a global run for

00:02:26,239 --> 00:02:30,000
example

00:02:28,000 --> 00:02:31,440
as long as the process follows the open

00:02:30,000 --> 00:02:34,319
source principles

00:02:31,440 --> 00:02:35,760
in allowing anyone to view adapt and

00:02:34,319 --> 00:02:39,120
share the process

00:02:35,760 --> 00:02:42,000
it might be considered open source

00:02:39,120 --> 00:02:43,440
the open source way describes the set of

00:02:42,000 --> 00:02:46,959
principles that outline

00:02:43,440 --> 00:02:49,200
or define what open source means today

00:02:46,959 --> 00:02:51,440
to oversimplify things basically

00:02:49,200 --> 00:02:54,000
anything that is worked on in public

00:02:51,440 --> 00:02:56,560
and shared openly might be considered

00:02:54,000 --> 00:02:56,560
open source

00:02:59,680 --> 00:03:04,480
i just mentioned working openly in

00:03:01,519 --> 00:03:05,440
public this is a primary tenet of open

00:03:04,480 --> 00:03:07,360
source

00:03:05,440 --> 00:03:10,319
it allows better collaboration when you

00:03:07,360 --> 00:03:13,120
can work transparently in the open

00:03:10,319 --> 00:03:14,000
open source software is usually free to

00:03:13,120 --> 00:03:17,440
use

00:03:14,000 --> 00:03:21,120
modify and share within terms

00:03:17,440 --> 00:03:22,400
of the project's license the license is

00:03:21,120 --> 00:03:24,959
used to dictate

00:03:22,400 --> 00:03:26,480
extensive limits of these activities

00:03:24,959 --> 00:03:29,599
most open source

00:03:26,480 --> 00:03:31,440
licenses have few limitations but there

00:03:29,599 --> 00:03:33,280
are many different licenses to choose

00:03:31,440 --> 00:03:36,560
from and those vary

00:03:33,280 --> 00:03:37,280
sometimes greatly some allow you to

00:03:36,560 --> 00:03:39,599
choose

00:03:37,280 --> 00:03:40,799
or to charge money for your software as

00:03:39,599 --> 00:03:43,840
long as you still provide

00:03:40,799 --> 00:03:46,080
the source code with it most if not all

00:03:43,840 --> 00:03:49,280
open source licenses do require that you

00:03:46,080 --> 00:03:51,440
provide access to the source code

00:03:49,280 --> 00:03:53,280
i'm including a couple of good links to

00:03:51,440 --> 00:03:55,040
resources on open source software

00:03:53,280 --> 00:03:57,760
licenses

00:03:55,040 --> 00:03:59,360
one is another link from opensource.com

00:03:57,760 --> 00:04:01,680
and the other is a wikipedia article

00:03:59,360 --> 00:04:03,760
comparing licenses

00:04:01,680 --> 00:04:05,120
the latter includes a table comparing

00:04:03,760 --> 00:04:10,720
features

00:04:05,120 --> 00:04:10,720
and different aspects of different

00:04:12,840 --> 00:04:16,479
licenses

00:04:14,640 --> 00:04:18,239
now what exactly do i mean when i say

00:04:16,479 --> 00:04:19,840
upstream or downstream

00:04:18,239 --> 00:04:21,280
in the context of working with open

00:04:19,840 --> 00:04:23,680
source software the term

00:04:21,280 --> 00:04:25,440
upstream usually refers to the original

00:04:23,680 --> 00:04:27,840
project or work

00:04:25,440 --> 00:04:30,320
downstream would typically indicate

00:04:27,840 --> 00:04:34,080
someone using the upstream package

00:04:30,320 --> 00:04:37,360
with slight modifications or using

00:04:34,080 --> 00:04:38,960
limited versions features or patch sets

00:04:37,360 --> 00:04:42,320
that they package to provide their

00:04:38,960 --> 00:04:44,800
specific version of the software

00:04:42,320 --> 00:04:46,639
for example the main linux kernel source

00:04:44,800 --> 00:04:49,440
repository would be considered

00:04:46,639 --> 00:04:50,800
upstream while a specific linux

00:04:49,440 --> 00:04:54,080
distributions

00:04:50,800 --> 00:04:56,479
version that bundle only specific

00:04:54,080 --> 00:05:00,080
patches with their kernel packages

00:04:56,479 --> 00:05:02,240
would generally be considered downstream

00:05:00,080 --> 00:05:04,320
wikipedia's definition seems quite

00:05:02,240 --> 00:05:06,800
simple and direct

00:05:04,320 --> 00:05:07,680
upstream is toward the original software

00:05:06,800 --> 00:05:09,440
developers

00:05:07,680 --> 00:05:13,199
and downstream is toward a different

00:05:09,440 --> 00:05:15,440
group that uses and develops it as well

00:05:13,199 --> 00:05:17,039
upstream is generally hosted in public

00:05:15,440 --> 00:05:18,720
repositories

00:05:17,039 --> 00:05:20,080
there are ways for anyone to help

00:05:18,720 --> 00:05:22,840
contribute

00:05:20,080 --> 00:05:24,080
to it so getting outside help can be

00:05:22,840 --> 00:05:25,759
easier

00:05:24,080 --> 00:05:27,360
tests are often maintained right

00:05:25,759 --> 00:05:30,720
alongside the source code

00:05:27,360 --> 00:05:34,639
in the same repository so everything

00:05:30,720 --> 00:05:34,639
can at times be easy to find

00:05:35,039 --> 00:05:40,000
downstream is often hosted in private

00:05:37,919 --> 00:05:42,400
repositories

00:05:40,000 --> 00:05:43,199
even if a company provides the software

00:05:42,400 --> 00:05:45,199
source code

00:05:43,199 --> 00:05:46,320
for free per the original software

00:05:45,199 --> 00:05:48,639
license

00:05:46,320 --> 00:05:50,479
they may not and often don't allow

00:05:48,639 --> 00:05:52,639
public access to their source code

00:05:50,479 --> 00:05:54,639
management systems

00:05:52,639 --> 00:05:55,840
the nature of a limited access project

00:05:54,639 --> 00:05:58,720
like this can

00:05:55,840 --> 00:06:00,639
make getting help more difficult the

00:05:58,720 --> 00:06:00,960
number of resources available to help

00:06:00,639 --> 00:06:03,120
you

00:06:00,960 --> 00:06:05,520
may be fewer than in an upstream

00:06:03,120 --> 00:06:06,880
community

00:06:05,520 --> 00:06:08,960
and they may have their own

00:06:06,880 --> 00:06:11,199
responsibilities and have limited time

00:06:08,960 --> 00:06:14,800
to help

00:06:11,199 --> 00:06:17,520
tests downstream are often maintained in

00:06:14,800 --> 00:06:19,360
a separate repository complete entirely

00:06:17,520 --> 00:06:21,199
from the source code

00:06:19,360 --> 00:06:23,360
this can make finding them even more

00:06:21,199 --> 00:06:25,600
difficult if someone doesn't point you

00:06:23,360 --> 00:06:28,000
directly to them

00:06:25,600 --> 00:06:30,000
also processes downstream may differ

00:06:28,000 --> 00:06:32,000
greatly from upstream

00:06:30,000 --> 00:06:34,080
different types of git repositories

00:06:32,000 --> 00:06:35,759
different workflows

00:06:34,080 --> 00:06:37,360
or even completely different people and

00:06:35,759 --> 00:06:39,199
release schedules

00:06:37,360 --> 00:06:41,440
all of which can complicate things for

00:06:39,199 --> 00:06:48,720
people trying to

00:06:41,440 --> 00:06:50,400
use write and test software

00:06:48,720 --> 00:06:52,479
so i'll give you a bit of a flow from

00:06:50,400 --> 00:06:55,919
upstream to downstream

00:06:52,479 --> 00:06:58,800
this is a good example the linux kernel

00:06:55,919 --> 00:07:00,800
source repository in this example is the

00:06:58,800 --> 00:07:03,599
top of our upstream

00:07:00,800 --> 00:07:05,360
then fedora takes that and takes

00:07:03,599 --> 00:07:07,440
specific packages

00:07:05,360 --> 00:07:09,280
makes settings they need that they want

00:07:07,440 --> 00:07:10,080
for the kernel that they're going to

00:07:09,280 --> 00:07:12,560
provide

00:07:10,080 --> 00:07:14,479
and that becomes downstream fedora's

00:07:12,560 --> 00:07:17,520
kernel it's downstream to the kernel

00:07:14,479 --> 00:07:20,800
source repository which is upstream

00:07:17,520 --> 00:07:23,039
then row comes along red hat comes along

00:07:20,800 --> 00:07:24,639
and takes a specific version of fedora

00:07:23,039 --> 00:07:27,599
to use as its base

00:07:24,639 --> 00:07:29,759
to build a major release of red hat

00:07:27,599 --> 00:07:32,960
enterprise linux

00:07:29,759 --> 00:07:36,319
this then is the downstream to

00:07:32,960 --> 00:07:38,800
fedora so in the flow

00:07:36,319 --> 00:07:40,479
fedora is both upstream and downstream

00:07:38,800 --> 00:07:41,199
it is upstream to red hat enterprise

00:07:40,479 --> 00:07:45,840
linux

00:07:41,199 --> 00:07:45,840
and is downstream from the linux kernel

00:07:48,000 --> 00:07:51,360
now i'll talk about my starting point

00:07:52,479 --> 00:07:56,319
i had little to no experience

00:07:54,400 --> 00:07:58,479
contributing upstream

00:07:56,319 --> 00:07:59,840
i'd worked with open source for a long

00:07:58,479 --> 00:08:01,599
time

00:07:59,840 --> 00:08:04,080
and i'd even submitted a few pull

00:08:01,599 --> 00:08:05,360
requests to a couple github projects

00:08:04,080 --> 00:08:07,840
over the years

00:08:05,360 --> 00:08:10,080
but all were very small and in at least

00:08:07,840 --> 00:08:12,080
one case was a patch file

00:08:10,080 --> 00:08:14,639
i sent directly to a developer who

00:08:12,080 --> 00:08:16,879
applied it for me

00:08:14,639 --> 00:08:18,400
working on identity management in rel

00:08:16,879 --> 00:08:20,639
gave me some insight

00:08:18,400 --> 00:08:22,400
into the software development model but

00:08:20,639 --> 00:08:23,520
the tools and processes i used

00:08:22,400 --> 00:08:26,479
day-to-day

00:08:23,520 --> 00:08:29,039
were still very different at the time

00:08:26,479 --> 00:08:32,320
almost all of the tests i worked with

00:08:29,039 --> 00:08:34,640
wrote or ran were downstream only

00:08:32,320 --> 00:08:36,479
so i just didn't get the exposure to the

00:08:34,640 --> 00:08:37,919
upstream tests

00:08:36,479 --> 00:08:40,800
a few of my teammates did work

00:08:37,919 --> 00:08:44,480
previously on free ipa upstream tests

00:08:40,800 --> 00:08:49,760
but my involvement was limited

00:08:44,480 --> 00:08:49,760
before i got involved with t-log

00:08:53,120 --> 00:08:56,880
so what's my motivation i already knew i

00:08:55,440 --> 00:08:59,120
wanted to work more upstream

00:08:56,880 --> 00:09:00,640
in general i wanted to get involved more

00:08:59,120 --> 00:09:01,360
and i wanted to learn the upstream

00:09:00,640 --> 00:09:04,640
development

00:09:01,360 --> 00:09:06,320
workflow t-log was

00:09:04,640 --> 00:09:08,640
already developed upstream and was a

00:09:06,320 --> 00:09:09,360
nice small but powerful project to start

00:09:08,640 --> 00:09:10,880
with

00:09:09,360 --> 00:09:13,040
and as i was the assigned quality

00:09:10,880 --> 00:09:15,920
engineer i got to choose where we stored

00:09:13,040 --> 00:09:15,920
the test initially

00:09:16,000 --> 00:09:21,680
so what is t-log t-log

00:09:19,040 --> 00:09:22,480
is a terminal i o recording and playback

00:09:21,680 --> 00:09:25,440
tool

00:09:22,480 --> 00:09:27,040
it can be run from command line or it

00:09:25,440 --> 00:09:30,399
can be configured to record

00:09:27,040 --> 00:09:32,080
all user shell activity it can record to

00:09:30,399 --> 00:09:36,320
specific files

00:09:32,080 --> 00:09:38,399
or to a systemd journal or to syslog

00:09:36,320 --> 00:09:40,240
it can play back from any of these

00:09:38,399 --> 00:09:42,399
sources as well

00:09:40,240 --> 00:09:45,760
it consists of a few command line tools

00:09:42,399 --> 00:09:45,760
and a handful of libraries

00:09:45,839 --> 00:09:50,720
so what needed to be tested well the

00:09:48,880 --> 00:09:52,480
command line tools needed to be tested i

00:09:50,720 --> 00:09:53,600
needed to know that commands worked as

00:09:52,480 --> 00:09:56,080
expected

00:09:53,600 --> 00:09:57,200
that recording playback functioned as

00:09:56,080 --> 00:09:59,200
designed

00:09:57,200 --> 00:10:02,560
and that a user shell activity was

00:09:59,200 --> 00:10:05,760
recorded on login when configured

00:10:02,560 --> 00:10:08,640
so where did i want to store the test

00:10:05,760 --> 00:10:08,640
upstream of course

00:10:11,040 --> 00:10:13,600
challenges

00:10:15,519 --> 00:10:18,800
i'm here today because getting involved

00:10:16,880 --> 00:10:20,320
in open source can be intimidating

00:10:18,800 --> 00:10:22,399
and you feel like trying to get into a

00:10:20,320 --> 00:10:23,120
room with a closed door that you don't

00:10:22,399 --> 00:10:26,320
quite know

00:10:23,120 --> 00:10:28,399
how to open do you need a key

00:10:26,320 --> 00:10:29,519
do you need a passphrase do you need a

00:10:28,399 --> 00:10:32,560
special knock

00:10:29,519 --> 00:10:34,160
or do you just turn the knob

00:10:32,560 --> 00:10:36,079
if you're slightly paranoid and have an

00:10:34,160 --> 00:10:38,160
overactive imagination like myself you

00:10:36,079 --> 00:10:40,959
can wonder if someone attached a heating

00:10:38,160 --> 00:10:43,279
element to the other side

00:10:40,959 --> 00:10:45,120
it can sometimes be hard to even

00:10:43,279 --> 00:10:46,720
articulate how difficult it can be to

00:10:45,120 --> 00:10:48,560
get started

00:10:46,720 --> 00:10:50,240
and even with my years of experience in

00:10:48,560 --> 00:10:54,160
it and quality engineering

00:10:50,240 --> 00:10:54,160
i still had some anxiety about it

00:10:56,880 --> 00:11:01,760
so what are the barriers to entry

00:10:59,920 --> 00:11:02,640
sometimes getting started as i've said

00:11:01,760 --> 00:11:05,040
before can

00:11:02,640 --> 00:11:06,160
just be intimidating it's not just an

00:11:05,040 --> 00:11:08,000
issue for people new

00:11:06,160 --> 00:11:09,360
to using open source or new to

00:11:08,000 --> 00:11:10,800
programming

00:11:09,360 --> 00:11:13,600
you may have to learn new programming

00:11:10,800 --> 00:11:16,160
languages new tool sets

00:11:13,600 --> 00:11:16,720
new ways to work with people for example

00:11:16,160 --> 00:11:19,600
i know

00:11:16,720 --> 00:11:20,720
python in a form of life i knew pearl

00:11:19,600 --> 00:11:23,760
and c

00:11:20,720 --> 00:11:25,839
but i've never used golang or java

00:11:23,760 --> 00:11:28,160
so if i wanted to work on a project with

00:11:25,839 --> 00:11:31,120
code or test written in either i would

00:11:28,160 --> 00:11:33,200
need to start by learning those

00:11:31,120 --> 00:11:34,880
some projects could include tools you've

00:11:33,200 --> 00:11:37,760
never used before

00:11:34,880 --> 00:11:39,600
i've used expect from tcl but that may

00:11:37,760 --> 00:11:42,560
be new or completely unheard of to a lot

00:11:39,600 --> 00:11:46,399
of people

00:11:42,560 --> 00:11:48,800
a lot of projects use git github git lab

00:11:46,399 --> 00:11:50,639
or some other source code management and

00:11:48,800 --> 00:11:52,240
collaboration system

00:11:50,639 --> 00:11:54,959
or just some system you've never used

00:11:52,240 --> 00:11:56,399
before or maybe a system you used before

00:11:54,959 --> 00:11:57,519
but they're using it in a completely

00:11:56,399 --> 00:11:59,839
different way

00:11:57,519 --> 00:12:01,680
maybe they're using different tags maybe

00:11:59,839 --> 00:12:03,680
a different group of people are required

00:12:01,680 --> 00:12:06,240
to handle reviews

00:12:03,680 --> 00:12:08,800
it could be anything processes may

00:12:06,240 --> 00:12:10,880
differ greatly between projects

00:12:08,800 --> 00:12:12,240
some may accept patches via email some

00:12:10,880 --> 00:12:14,639
may not

00:12:12,240 --> 00:12:15,519
some may require an issue tracker ticket

00:12:14,639 --> 00:12:19,440
be open

00:12:15,519 --> 00:12:19,440
before accepting a patch some may not

00:12:19,760 --> 00:12:25,440
some projects also may not have good

00:12:22,959 --> 00:12:26,800
or any documentation that would help you

00:12:25,440 --> 00:12:28,720
get started

00:12:26,800 --> 00:12:32,800
this can be extremely frustrating for

00:12:28,720 --> 00:12:34,480
both users and potential contributors

00:12:32,800 --> 00:12:36,800
another challenge could be the skill

00:12:34,480 --> 00:12:39,279
level required or rather expected

00:12:36,800 --> 00:12:41,279
by the project team you may be

00:12:39,279 --> 00:12:43,519
interested in working on something

00:12:41,279 --> 00:12:45,600
but the way its program may just be

00:12:43,519 --> 00:12:47,600
beyond your current skill level

00:12:45,600 --> 00:12:49,120
and maybe that's what interests you

00:12:47,600 --> 00:12:51,519
maybe you're looking for that challenge

00:12:49,120 --> 00:12:53,040
to enhance your skills and learn more

00:12:51,519 --> 00:12:55,519
that's what brings and keeps a lot of us

00:12:53,040 --> 00:12:57,279
here i think but it could be a challenge

00:12:55,519 --> 00:13:00,320
that you have to work through

00:12:57,279 --> 00:13:00,320
possibly on your own

00:13:00,399 --> 00:13:05,040
another challenge real or perceived is

00:13:03,279 --> 00:13:06,000
that some communities are harder to get

00:13:05,040 --> 00:13:08,480
into

00:13:06,000 --> 00:13:10,160
some seem more tight-knit and may appear

00:13:08,480 --> 00:13:13,519
less welcoming than others

00:13:10,160 --> 00:13:15,120
for whatever reason in some cases it

00:13:13,519 --> 00:13:16,720
appears if they only want top-tier

00:13:15,120 --> 00:13:18,480
developers

00:13:16,720 --> 00:13:22,079
even if that's not the case they may not

00:13:18,480 --> 00:13:22,079
have time to train someone new

00:13:26,639 --> 00:13:31,040
so my specific fears as i mentioned

00:13:30,240 --> 00:13:32,839
earlier

00:13:31,040 --> 00:13:34,160
working upstream can have challenges and

00:13:32,839 --> 00:13:36,639
barriers

00:13:34,160 --> 00:13:38,240
the following were my fears whether real

00:13:36,639 --> 00:13:40,560
or perceived these are things that

00:13:38,240 --> 00:13:43,040
concern me about working upstream

00:13:40,560 --> 00:13:46,079
things that made me anxious or hesitant

00:13:43,040 --> 00:13:48,399
to move forward with my plan

00:13:46,079 --> 00:13:50,560
i wasn't familiar with the github

00:13:48,399 --> 00:13:52,639
workflow specifics

00:13:50,560 --> 00:13:54,240
i had a very general understanding but i

00:13:52,639 --> 00:13:56,560
was going to have to learn new tools

00:13:54,240 --> 00:13:59,600
and new ways to use some tools in order

00:13:56,560 --> 00:14:01,199
to be able to contribute upstream

00:13:59,600 --> 00:14:03,360
i was worried that i performed some

00:14:01,199 --> 00:14:04,399
stuff wrong in the word flow and screw

00:14:03,360 --> 00:14:07,440
up a pull request

00:14:04,399 --> 00:14:09,519
and have to drop it or not know how to

00:14:07,440 --> 00:14:09,920
perform some step that dev asked me to

00:14:09,519 --> 00:14:13,839
do

00:14:09,920 --> 00:14:13,839
that may seem trivial to them

00:14:14,720 --> 00:14:18,720
one of the original developers of the

00:14:16,320 --> 00:14:21,760
tool i'd worked with him a little

00:14:18,720 --> 00:14:22,399
and in fact i had interviewed him years

00:14:21,760 --> 00:14:24,800
before

00:14:22,399 --> 00:14:26,399
and knew that in the past he had done

00:14:24,800 --> 00:14:28,240
some kernel programming

00:14:26,399 --> 00:14:29,440
which i've always held in very high

00:14:28,240 --> 00:14:32,880
regard

00:14:29,440 --> 00:14:32,880
so i was a little intimidated

00:14:32,959 --> 00:14:37,040
a main fear i had was that my code

00:14:35,600 --> 00:14:39,120
wouldn't be good enough

00:14:37,040 --> 00:14:41,040
that deb would reject a submitted pull

00:14:39,120 --> 00:14:44,639
request and i'd have to

00:14:41,040 --> 00:14:46,000
rewrite everything i was worried that my

00:14:44,639 --> 00:14:47,440
techniques for testing would be

00:14:46,000 --> 00:14:50,320
considered inefficient

00:14:47,440 --> 00:14:51,040
or just wrong or maybe that i wasn't

00:14:50,320 --> 00:14:54,160
adhering

00:14:51,040 --> 00:14:56,639
properly to coding guidelines

00:14:54,160 --> 00:14:58,399
these types of criticisms are all things

00:14:56,639 --> 00:15:01,519
that make open source software

00:14:58,399 --> 00:15:02,880
better in the end but it can still be

00:15:01,519 --> 00:15:05,680
intimidating the first time you go

00:15:02,880 --> 00:15:05,680
through the process

00:15:09,519 --> 00:15:13,839
so how can you contribute

00:15:15,600 --> 00:15:20,079
there are a few common ways that should

00:15:17,440 --> 00:15:22,720
apply to most projects

00:15:20,079 --> 00:15:23,760
if you're familiar with the dev doc test

00:15:22,720 --> 00:15:26,240
process

00:15:23,760 --> 00:15:28,000
that covers the first three ways that i

00:15:26,240 --> 00:15:30,160
mention here

00:15:28,000 --> 00:15:31,600
first off you can contribute by doing

00:15:30,160 --> 00:15:34,160
development

00:15:31,600 --> 00:15:35,360
writing code used by the actual software

00:15:34,160 --> 00:15:37,360
itself

00:15:35,360 --> 00:15:38,720
this is probably the most common form of

00:15:37,360 --> 00:15:40,880
contribution

00:15:38,720 --> 00:15:42,720
it's the main pull for a lot of people

00:15:40,880 --> 00:15:43,600
to open source software in the first

00:15:42,720 --> 00:15:47,279
place

00:15:43,600 --> 00:15:47,279
the desire to write software

00:15:47,360 --> 00:15:52,160
the next option is to help write or

00:15:49,519 --> 00:15:54,560
maintain documentation

00:15:52,160 --> 00:15:55,600
most projects have some form of

00:15:54,560 --> 00:15:58,560
documentation

00:15:55,600 --> 00:15:59,040
hopefully but could also use a lot of

00:15:58,560 --> 00:16:02,480
help

00:15:59,040 --> 00:16:04,880
with extending it correcting it

00:16:02,480 --> 00:16:07,040
or just updating it to match current

00:16:04,880 --> 00:16:09,279
changes to the software

00:16:07,040 --> 00:16:10,959
some of the projects want help from

00:16:09,279 --> 00:16:12,000
someone with a technical writing

00:16:10,959 --> 00:16:15,040
background

00:16:12,000 --> 00:16:18,079
and some just want help in general

00:16:15,040 --> 00:16:21,199
better documentation can help a project

00:16:18,079 --> 00:16:23,440
look and feel more legitimate helping

00:16:21,199 --> 00:16:26,320
with documentation can also extend

00:16:23,440 --> 00:16:27,759
to translations if you can read and

00:16:26,320 --> 00:16:30,480
write a language that a project

00:16:27,759 --> 00:16:32,000
doesn't already cover you could help by

00:16:30,480 --> 00:16:32,639
translating the documentation they

00:16:32,000 --> 00:16:37,120
already have

00:16:32,639 --> 00:16:38,639
into yet another language

00:16:37,120 --> 00:16:40,959
another way to contribute to an open

00:16:38,639 --> 00:16:42,639
source project is testing

00:16:40,959 --> 00:16:44,480
a lot of projects could use more help

00:16:42,639 --> 00:16:47,920
with their testing

00:16:44,480 --> 00:16:49,839
especially writing more automated tests

00:16:47,920 --> 00:16:51,120
some could also use help in areas like

00:16:49,839 --> 00:16:53,279
running test days

00:16:51,120 --> 00:16:56,320
where groups of people try out the

00:16:53,279 --> 00:16:58,480
software and report issues

00:16:56,320 --> 00:17:00,399
no matter what the project is there's a

00:16:58,480 --> 00:17:04,880
good chance it could definitely benefit

00:17:00,399 --> 00:17:07,280
from more testing

00:17:04,880 --> 00:17:09,199
another less direct but still very

00:17:07,280 --> 00:17:10,480
important way to contribute to an open

00:17:09,199 --> 00:17:13,439
source project

00:17:10,480 --> 00:17:15,120
would be to provide help to others if

00:17:13,439 --> 00:17:15,439
you know how to use the software but

00:17:15,120 --> 00:17:16,959
just

00:17:15,439 --> 00:17:18,480
aren't comfortable writing code or

00:17:16,959 --> 00:17:20,000
documentation

00:17:18,480 --> 00:17:21,679
you could still help users with

00:17:20,000 --> 00:17:24,880
questions on irc

00:17:21,679 --> 00:17:27,280
mailing lists or in forums

00:17:24,880 --> 00:17:28,960
find where the project operates start

00:17:27,280 --> 00:17:30,840
reading and responding

00:17:28,960 --> 00:17:32,400
it's that simple if you already know the

00:17:30,840 --> 00:17:34,320
software

00:17:32,400 --> 00:17:36,720
help like this frees up time of people

00:17:34,320 --> 00:17:38,799
typically working in the other areas

00:17:36,720 --> 00:17:41,840
this can go a long way to make some

00:17:38,799 --> 00:17:41,840
projects successful

00:17:42,720 --> 00:17:47,600
so why tests to be honest my first

00:17:45,760 --> 00:17:49,600
reason is kind of selfish

00:17:47,600 --> 00:17:50,799
it helps people like me that test and do

00:17:49,600 --> 00:17:54,080
quality assurance

00:17:50,799 --> 00:17:57,039
for open source projects it also helps

00:17:54,080 --> 00:18:00,160
the developers developers can make

00:17:57,039 --> 00:18:01,760
better products when more people test

00:18:00,160 --> 00:18:04,400
in some cases you can learn how the

00:18:01,760 --> 00:18:06,160
software works from the test code

00:18:04,400 --> 00:18:09,120
it might be easier than learning the

00:18:06,160 --> 00:18:10,720
source code itself

00:18:09,120 --> 00:18:12,960
starting small and building from there

00:18:10,720 --> 00:18:15,520
might be easier to do with tests

00:18:12,960 --> 00:18:17,520
and help focus your attention on smaller

00:18:15,520 --> 00:18:19,200
more manageable areas of the project at

00:18:17,520 --> 00:18:21,919
a time

00:18:19,200 --> 00:18:22,720
a lot of projects already have tests

00:18:21,919 --> 00:18:25,919
upstream

00:18:22,720 --> 00:18:28,960
that you can review and run

00:18:25,919 --> 00:18:30,160
some of these need to be expanded some

00:18:28,960 --> 00:18:32,559
only cover the bare

00:18:30,160 --> 00:18:34,799
minimum of testing and could use a lot

00:18:32,559 --> 00:18:37,280
of expansion

00:18:34,799 --> 00:18:39,039
others might have a lot of tests but

00:18:37,280 --> 00:18:41,120
could still benefit from

00:18:39,039 --> 00:18:42,240
a fresh new perspective that could

00:18:41,120 --> 00:18:47,120
identify

00:18:42,240 --> 00:18:49,120
new areas to test or new ways to test

00:18:47,120 --> 00:18:52,480
some may have no tests at all and be a

00:18:49,120 --> 00:18:52,480
completely blank slate

00:18:52,640 --> 00:18:56,960
manual testing is time intensive and not

00:18:55,440 --> 00:18:59,600
always accurate

00:18:56,960 --> 00:19:01,520
human error can affect manual testing so

00:18:59,600 --> 00:19:02,080
projects where possible could benefit

00:19:01,520 --> 00:19:04,960
more from

00:19:02,080 --> 00:19:07,039
automated tests this doesn't mean that

00:19:04,960 --> 00:19:09,840
manual testing is useful

00:19:07,039 --> 00:19:10,640
on the contrary even if you can't write

00:19:09,840 --> 00:19:13,440
tests

00:19:10,640 --> 00:19:15,440
if you can do manual exploratory testing

00:19:13,440 --> 00:19:18,960
you can open tickets for bugs

00:19:15,440 --> 00:19:22,080
or new tests to be written

00:19:18,960 --> 00:19:22,480
also sometimes it's just easier to start

00:19:22,080 --> 00:19:24,799
with

00:19:22,480 --> 00:19:27,280
writing tests than it is to start with

00:19:24,799 --> 00:19:28,720
development of the software

00:19:27,280 --> 00:19:31,200
test code may have less strict

00:19:28,720 --> 00:19:32,640
requirements than the software itself

00:19:31,200 --> 00:19:34,720
you may be allowed to use the

00:19:32,640 --> 00:19:35,919
programming language and frameworks of

00:19:34,720 --> 00:19:38,000
your choice

00:19:35,919 --> 00:19:39,039
for tests whereas you may not have that

00:19:38,000 --> 00:19:41,840
flexibility

00:19:39,039 --> 00:19:44,240
working with the software for example

00:19:41,840 --> 00:19:48,080
the test may be written in python

00:19:44,240 --> 00:19:48,080
whereas the code itself is written in c

00:19:50,559 --> 00:19:53,360
planning test

00:19:55,760 --> 00:20:00,960
so at this point i've got my assignment

00:19:59,039 --> 00:20:02,240
i have my general plan to store test

00:20:00,960 --> 00:20:04,240
upstream

00:20:02,240 --> 00:20:06,159
now i need to actually learn t-log and

00:20:04,240 --> 00:20:07,919
what it can do

00:20:06,159 --> 00:20:11,039
there are some basic patterns you can

00:20:07,919 --> 00:20:12,799
follow for learning a new tool

00:20:11,039 --> 00:20:14,400
i even had a training course one time

00:20:12,799 --> 00:20:16,640
where the instructor spent

00:20:14,400 --> 00:20:17,919
almost as much time showing us where to

00:20:16,640 --> 00:20:20,159
find information

00:20:17,919 --> 00:20:22,880
as it is showing us how to actually use

00:20:20,159 --> 00:20:25,039
the software

00:20:22,880 --> 00:20:27,440
for t-log i started with the main readme

00:20:25,039 --> 00:20:29,840
in the github repository

00:20:27,440 --> 00:20:30,960
it had a lot of good information about

00:20:29,840 --> 00:20:33,600
what it was meant to do

00:20:30,960 --> 00:20:34,159
and how to do it another good source of

00:20:33,600 --> 00:20:37,520
information

00:20:34,159 --> 00:20:38,960
to start with is to know what files are

00:20:37,520 --> 00:20:41,520
included with the

00:20:38,960 --> 00:20:42,880
package you're working with you can run

00:20:41,520 --> 00:20:46,080
an rpm command

00:20:42,880 --> 00:20:49,840
or packaging command base that

00:20:46,080 --> 00:20:51,919
your distro uses to get a full file list

00:20:49,840 --> 00:20:54,080
pipe that to a few different grips and

00:20:51,919 --> 00:20:57,919
you can find a list of binaries

00:20:54,080 --> 00:21:00,400
libraries or man pages easily

00:20:57,919 --> 00:21:02,880
speaking of man pages that can be the

00:21:00,400 --> 00:21:05,200
next logical step

00:21:02,880 --> 00:21:07,840
once you have a list of binaries you can

00:21:05,200 --> 00:21:09,280
man one to find out how to use it

00:21:07,840 --> 00:21:12,080
since you need to record something

00:21:09,280 --> 00:21:15,520
before you can play back anything

00:21:12,080 --> 00:21:16,640
t log rec would be the first place i'd

00:21:15,520 --> 00:21:19,039
start

00:21:16,640 --> 00:21:21,520
go to a man on that command and see how

00:21:19,039 --> 00:21:24,880
to use it

00:21:21,520 --> 00:21:25,360
next up would be to use the tools in my

00:21:24,880 --> 00:21:27,600
case

00:21:25,360 --> 00:21:28,799
i started with different methods of

00:21:27,600 --> 00:21:31,760
recording

00:21:28,799 --> 00:21:32,799
and looking at files or journal entries

00:21:31,760 --> 00:21:35,840
and then moved on to

00:21:32,799 --> 00:21:36,720
setting user shells to t log right

00:21:35,840 --> 00:21:39,840
session

00:21:36,720 --> 00:21:43,919
and looking at the recorded

00:21:39,840 --> 00:21:45,840
information from the user's activity be

00:21:43,919 --> 00:21:48,400
aware that if you're using

00:21:45,840 --> 00:21:50,559
well this is not the suggested mechanism

00:21:48,400 --> 00:21:53,280
for configuring a user to

00:21:50,559 --> 00:21:54,480
record their activity instead is it is

00:21:53,280 --> 00:21:57,039
suggested that you

00:21:54,480 --> 00:21:57,760
use sssd's session recording

00:21:57,039 --> 00:22:00,159
configuration

00:21:57,760 --> 00:22:00,159
options

00:22:03,120 --> 00:22:06,880
after learning t-log i needed to

00:22:07,360 --> 00:22:11,600
plan the tests this was a fairly easy

00:22:10,159 --> 00:22:13,200
step for me

00:22:11,600 --> 00:22:15,039
i had a lot of experience already with

00:22:13,200 --> 00:22:16,320
writing test cases for command line

00:22:15,039 --> 00:22:18,320
tools

00:22:16,320 --> 00:22:22,080
i wrote a lot of downstream tests as i

00:22:18,320 --> 00:22:23,760
mentioned for identity management in rel

00:22:22,080 --> 00:22:26,320
now i just need to do it for t log which

00:22:23,760 --> 00:22:28,400
has a much smaller feature set

00:22:26,320 --> 00:22:31,039
so i took each of the tools and came up

00:22:28,400 --> 00:22:33,760
with test cases for each one

00:22:31,039 --> 00:22:35,280
covering things like expected behavior

00:22:33,760 --> 00:22:38,080
expected failures

00:22:35,280 --> 00:22:39,200
does the command work the way it should

00:22:38,080 --> 00:22:42,159
also things like

00:22:39,200 --> 00:22:43,600
how configuration changes affected the

00:22:42,159 --> 00:22:46,880
tool's behavior

00:22:43,600 --> 00:22:49,280
and a few other things here and there

00:22:46,880 --> 00:22:51,760
next i needed to write up high-level

00:22:49,280 --> 00:22:53,679
test cases

00:22:51,760 --> 00:22:55,520
for this i'd write a brief description

00:22:53,679 --> 00:22:59,919
of what i was testing

00:22:55,520 --> 00:23:02,720
the setup necessary the steps to perform

00:22:59,919 --> 00:23:04,320
input maybe expected results maybe

00:23:02,720 --> 00:23:08,480
expected errors

00:23:04,320 --> 00:23:10,559
error codes error messages etc

00:23:08,480 --> 00:23:13,200
some of the details as i mentioned might

00:23:10,559 --> 00:23:14,880
include specific types of input

00:23:13,200 --> 00:23:16,559
this would be necessary for steps

00:23:14,880 --> 00:23:20,640
checking playback output

00:23:16,559 --> 00:23:23,280
does accurately reflect the input

00:23:20,640 --> 00:23:26,480
finally for planning i needed to get the

00:23:23,280 --> 00:23:28,880
test cases reviewed by the developers

00:23:26,480 --> 00:23:31,039
so i shared the document and asked for

00:23:28,880 --> 00:23:33,039
their feedback

00:23:31,039 --> 00:23:34,240
this would be the first actual point

00:23:33,039 --> 00:23:37,840
where i hit some

00:23:34,240 --> 00:23:37,840
of my anxieties

00:23:41,679 --> 00:23:46,240
but the planning phase for the most part

00:23:44,480 --> 00:23:49,440
went well

00:23:46,240 --> 00:23:51,200
i sent the document to dev with a list

00:23:49,440 --> 00:23:53,120
of test cases for each tool

00:23:51,200 --> 00:23:55,200
and most were approved with little to no

00:23:53,120 --> 00:23:57,840
changes necessary

00:23:55,200 --> 00:24:00,000
to have made a few suggestions but for

00:23:57,840 --> 00:24:01,200
the most part the entire process of

00:24:00,000 --> 00:24:03,679
planning the test

00:24:01,200 --> 00:24:06,000
was straightforward and painless it was

00:24:03,679 --> 00:24:09,039
nothing to worry about

00:24:06,000 --> 00:24:09,039
so far so good

00:24:12,320 --> 00:24:15,440
on to writing tests

00:24:17,279 --> 00:24:22,559
the first step was to pick a language

00:24:20,080 --> 00:24:25,120
and framework to use

00:24:22,559 --> 00:24:26,960
i've written tests using bash and

00:24:25,120 --> 00:24:28,720
special libraries in the past

00:24:26,960 --> 00:24:30,559
but most of my test writing in recent

00:24:28,720 --> 00:24:33,440
years has been in python

00:24:30,559 --> 00:24:34,799
using pi test since i was already

00:24:33,440 --> 00:24:36,799
familiar with these there was no

00:24:34,799 --> 00:24:38,880
learning curve there

00:24:36,799 --> 00:24:40,400
second thing i needed to do in order to

00:24:38,880 --> 00:24:42,960
write the tests

00:24:40,400 --> 00:24:45,600
was determine how i was going to handle

00:24:42,960 --> 00:24:47,840
interactive input and output

00:24:45,600 --> 00:24:50,080
i need a library that would let me pass

00:24:47,840 --> 00:24:52,400
input to an interactive shell

00:24:50,080 --> 00:24:53,760
and define how i expected the program to

00:24:52,400 --> 00:24:56,480
respond

00:24:53,760 --> 00:24:57,520
in short i needed to be able to send

00:24:56,480 --> 00:25:00,720
input

00:24:57,520 --> 00:25:01,279
parse output and possibly send different

00:25:00,720 --> 00:25:04,320
input

00:25:01,279 --> 00:25:06,159
again based on some basic criteria

00:25:04,320 --> 00:25:09,120
as i mentioned i wanted to do this with

00:25:06,159 --> 00:25:09,120
an interactive shell

00:25:09,360 --> 00:25:14,240
there are a few options that i knew of

00:25:12,480 --> 00:25:15,600
i could have gone to the trouble of

00:25:14,240 --> 00:25:18,880
writing a small library

00:25:15,600 --> 00:25:21,039
using the sub process module but that

00:25:18,880 --> 00:25:24,080
would require more work on my side and

00:25:21,039 --> 00:25:25,840
complicate the test code another module

00:25:24,080 --> 00:25:29,600
i knew about but hadn't

00:25:25,840 --> 00:25:31,279
used before was p expect

00:25:29,600 --> 00:25:33,679
i already had some experience with

00:25:31,279 --> 00:25:38,240
expect so i thought i'd take a look

00:25:33,679 --> 00:25:38,240
i liked what i saw so i went with it

00:25:39,279 --> 00:25:43,120
once it was time to actually code the

00:25:41,039 --> 00:25:46,720
test i started developing them

00:25:43,120 --> 00:25:48,559
offline i wrote them initially

00:25:46,720 --> 00:25:51,360
so that they were independent of the

00:25:48,559 --> 00:25:54,720
source i wanted a place i could work

00:25:51,360 --> 00:25:57,440
and get input only as needed

00:25:54,720 --> 00:25:59,440
this was a mistake and this is a primary

00:25:57,440 --> 00:26:01,039
lesson learned for me

00:25:59,440 --> 00:26:02,960
i should have simply started working

00:26:01,039 --> 00:26:04,559
with my fork of the project

00:26:02,960 --> 00:26:06,880
and worked upstream from the very

00:26:04,559 --> 00:26:08,080
beginning it would probably have saved

00:26:06,880 --> 00:26:10,159
me some time

00:26:08,080 --> 00:26:11,200
and headaches with getting the test code

00:26:10,159 --> 00:26:13,600
pull requests

00:26:11,200 --> 00:26:15,520
accepted later and it would have been a

00:26:13,600 --> 00:26:16,880
more natural process for writing and

00:26:15,520 --> 00:26:19,440
submitting the pull request

00:26:16,880 --> 00:26:19,440
in general

00:26:21,520 --> 00:26:28,880
speaking of submitting pull requests

00:26:24,799 --> 00:26:28,880
now it's time to submit upstream

00:26:30,640 --> 00:26:35,039
this was the most stressful step for me

00:26:33,200 --> 00:26:37,440
i was worried about how

00:26:35,039 --> 00:26:39,039
my pull request would be received was it

00:26:37,440 --> 00:26:41,919
good enough

00:26:39,039 --> 00:26:44,000
what was wrong with it that i didn't see

00:26:41,919 --> 00:26:44,880
would i make a mistake in the github

00:26:44,000 --> 00:26:46,799
workflow

00:26:44,880 --> 00:26:48,240
and have to drop my pull request and

00:26:46,799 --> 00:26:50,480
submit another

00:26:48,240 --> 00:26:52,159
these were all things that i thought of

00:26:50,480 --> 00:26:55,360
that caused some level of anxiety

00:26:52,159 --> 00:26:56,240
for me i had another problem to face as

00:26:55,360 --> 00:26:58,159
well

00:26:56,240 --> 00:27:00,080
because i wrote most of the initial

00:26:58,159 --> 00:27:01,679
tests entirely before i started

00:27:00,080 --> 00:27:04,240
submitting upstream

00:27:01,679 --> 00:27:07,039
i had to break up my code into smaller

00:27:04,240 --> 00:27:09,440
logical pull requests

00:27:07,039 --> 00:27:10,799
i began with a small subset of simple

00:27:09,440 --> 00:27:13,279
tests to get the

00:27:10,799 --> 00:27:15,840
initial code in place and go through the

00:27:13,279 --> 00:27:17,360
whole github workflow

00:27:15,840 --> 00:27:19,440
this was a problem because i had to

00:27:17,360 --> 00:27:20,080
manage my tests carefully to make sure i

00:27:19,440 --> 00:27:22,159
didn't forget

00:27:20,080 --> 00:27:26,240
something as i submitted follow-up pull

00:27:22,159 --> 00:27:26,240
requests with more test code later

00:27:27,279 --> 00:27:30,399
i got a lot of feedback on my first pull

00:27:29,440 --> 00:27:31,919
request

00:27:30,399 --> 00:27:33,440
dev pointed out several things that

00:27:31,919 --> 00:27:35,440
would improve my code

00:27:33,440 --> 00:27:37,360
including suggestions for where to store

00:27:35,440 --> 00:27:39,120
and how to organize some of it

00:27:37,360 --> 00:27:40,799
i even got some tips on improving my

00:27:39,120 --> 00:27:42,799
setup shell scripts

00:27:40,799 --> 00:27:44,080
one of the suggestions was to use ben

00:27:42,799 --> 00:27:47,039
bash instead of

00:27:44,080 --> 00:27:48,720
been sh because not all distributions

00:27:47,039 --> 00:27:52,399
use

00:27:48,720 --> 00:27:55,279
bash for bin sh and unless you're using

00:27:52,399 --> 00:27:57,039
posik only posix only standards you

00:27:55,279 --> 00:27:58,320
should be shell specific

00:27:57,039 --> 00:28:03,840
this is good because it helps make the

00:27:58,320 --> 00:28:03,840
code more distrognostic

00:28:05,360 --> 00:28:09,279
what was the outcome of my submission

00:28:08,240 --> 00:28:12,159
upstream

00:28:09,279 --> 00:28:13,039
my pull request and the whole process to

00:28:12,159 --> 00:28:15,360
get my code

00:28:13,039 --> 00:28:17,360
merged into t log was not as difficult

00:28:15,360 --> 00:28:19,520
as i thought it was going to be

00:28:17,360 --> 00:28:21,919
the hardest part as i mentioned before

00:28:19,520 --> 00:28:23,120
was breaking up my code into smaller

00:28:21,919 --> 00:28:27,200
logical requests

00:28:23,120 --> 00:28:27,200
that were easier to manage pull requests

00:28:28,840 --> 00:28:34,000
for

00:28:30,240 --> 00:28:34,000
so what did i learn

00:28:35,360 --> 00:28:39,600
i learned that working upstream wasn't

00:28:37,039 --> 00:28:42,559
that bad it wasn't as scary

00:28:39,600 --> 00:28:44,080
or painful as i was worried it would be

00:28:42,559 --> 00:28:46,480
logically i knew it wouldn't be

00:28:44,080 --> 00:28:47,919
but fear and anxiety don't always follow

00:28:46,480 --> 00:28:50,399
logic

00:28:47,919 --> 00:28:51,360
aside from learning t-log i also got to

00:28:50,399 --> 00:28:54,080
learn a new

00:28:51,360 --> 00:28:55,760
python module which is very useful for

00:28:54,080 --> 00:28:58,720
processing interactive io

00:28:55,760 --> 00:29:00,240
as well as some tips for shell scripting

00:28:58,720 --> 00:29:01,760
most important thing i took away from

00:29:00,240 --> 00:29:03,840
the experience

00:29:01,760 --> 00:29:05,840
was that i had successfully navigated

00:29:03,840 --> 00:29:08,640
through a github workflow

00:29:05,840 --> 00:29:10,080
upstream i no longer needed to worry

00:29:08,640 --> 00:29:12,080
about how to do that

00:29:10,080 --> 00:29:14,320
and can move on to submitting more pull

00:29:12,080 --> 00:29:16,640
requests to add the tests i'd already

00:29:14,320 --> 00:29:16,640
written

00:29:17,039 --> 00:29:20,640
i do wish i'd written the test in my

00:29:18,880 --> 00:29:22,240
fork from the very beginning

00:29:20,640 --> 00:29:25,520
because it would have made the whole

00:29:22,240 --> 00:29:27,679
process more fluid and natural

00:29:25,520 --> 00:29:29,760
i wouldn't have had to break things up

00:29:27,679 --> 00:29:31,279
and submitted chunks from my downstream

00:29:29,760 --> 00:29:32,960
private repository

00:29:31,279 --> 00:29:36,480
while trying to make sure i didn't miss

00:29:32,960 --> 00:29:38,000
a library update that was necessary

00:29:36,480 --> 00:29:40,080
i would have submitted my first pull

00:29:38,000 --> 00:29:42,080
request as soon as the first few

00:29:40,080 --> 00:29:44,000
tests were ready and then proceeded to

00:29:42,080 --> 00:29:46,320
submit pull requests as i wrote new

00:29:44,000 --> 00:29:46,320
tests

00:29:49,679 --> 00:29:52,799
since it was the most beneficial part of

00:29:51,679 --> 00:29:55,279
my journey

00:29:52,799 --> 00:29:57,200
other than the lesson learned i thought

00:29:55,279 --> 00:29:59,039
it'd be good to share the basic github

00:29:57,200 --> 00:30:00,880
workflow i learned

00:29:59,039 --> 00:30:02,080
first step after you find the project

00:30:00,880 --> 00:30:04,480
you want to work on

00:30:02,080 --> 00:30:06,960
is to create your fork of that project

00:30:04,480 --> 00:30:10,559
then clone it to your local workstation

00:30:06,960 --> 00:30:13,600
or wherever you're going to code next

00:30:10,559 --> 00:30:14,640
create a branch to work in don't work in

00:30:13,600 --> 00:30:16,399
master

00:30:14,640 --> 00:30:18,080
work in a branch with a descriptive name

00:30:16,399 --> 00:30:19,840
if possible

00:30:18,080 --> 00:30:21,760
check with the project's contribution

00:30:19,840 --> 00:30:25,200
doc in case they have any preferred

00:30:21,760 --> 00:30:28,320
standards that they want you to follow

00:30:25,200 --> 00:30:31,440
after you have your branch start work

00:30:28,320 --> 00:30:34,000
create files edit files etc

00:30:31,440 --> 00:30:36,080
make sure your code works and then git

00:30:34,000 --> 00:30:37,919
add and get committed

00:30:36,080 --> 00:30:40,480
now you should push your branch to your

00:30:37,919 --> 00:30:42,240
fork when you do this

00:30:40,480 --> 00:30:44,240
you should be presented with a link to

00:30:42,240 --> 00:30:46,559
submit a pull request with the upstream

00:30:44,240 --> 00:30:48,240
project

00:30:46,559 --> 00:30:51,760
follow this link to the pull request

00:30:48,240 --> 00:30:54,000
submission page and submit your pr

00:30:51,760 --> 00:30:55,520
when you get feedback from a reviewer

00:30:54,000 --> 00:30:58,159
discuss suggested changes

00:30:55,520 --> 00:31:00,640
if necessary then make the agreed upon

00:30:58,159 --> 00:31:00,640
changes

00:31:02,159 --> 00:31:05,679
after making those changes you should

00:31:03,600 --> 00:31:08,640
then re-add the files

00:31:05,679 --> 00:31:09,760
and commit again but in my case i'm

00:31:08,640 --> 00:31:12,240
specifically

00:31:09,760 --> 00:31:13,360
amending the previous commit this can

00:31:12,240 --> 00:31:16,480
help skip the need

00:31:13,360 --> 00:31:19,039
to squash multiple commits later

00:31:16,480 --> 00:31:21,200
not all projects like to work like this

00:31:19,039 --> 00:31:24,559
so you may want to ask before

00:31:21,200 --> 00:31:26,000
committing and updating once you've

00:31:24,559 --> 00:31:28,559
committed your changes

00:31:26,000 --> 00:31:29,760
first push your branch to your fork this

00:31:28,559 --> 00:31:32,640
will trigger an update

00:31:29,760 --> 00:31:34,399
in the pull request also if you receive

00:31:32,640 --> 00:31:36,960
further requests for changes

00:31:34,399 --> 00:31:37,840
go ahead and make them and repeat the

00:31:36,960 --> 00:31:40,399
add commit

00:31:37,840 --> 00:31:42,640
push steps when the reviewer is happy

00:31:40,399 --> 00:31:44,640
they will merge your change

00:31:42,640 --> 00:31:47,840
you've now successfully contributed to

00:31:44,640 --> 00:31:47,840
open source

00:31:49,760 --> 00:31:52,480
what can you do

00:31:53,360 --> 00:31:55,919
write tests

00:31:56,399 --> 00:32:01,679
so how can you get started with open

00:31:59,519 --> 00:32:04,880
source software

00:32:01,679 --> 00:32:08,399
start by finding a project that you

00:32:04,880 --> 00:32:08,960
would want to work on find something you

00:32:08,399 --> 00:32:12,480
like

00:32:08,960 --> 00:32:16,240
if you like video processing

00:32:12,480 --> 00:32:19,120
network scanning games

00:32:16,240 --> 00:32:20,880
whatever it is if you can find a project

00:32:19,120 --> 00:32:23,600
that

00:32:20,880 --> 00:32:24,399
looks interesting to you that may be

00:32:23,600 --> 00:32:27,200
easier

00:32:24,399 --> 00:32:27,679
or find something you already know if

00:32:27,200 --> 00:32:30,880
you

00:32:27,679 --> 00:32:33,840
know some software already go

00:32:30,880 --> 00:32:35,919
look and see if you feel comfortable

00:32:33,840 --> 00:32:37,519
writing tests for it

00:32:35,919 --> 00:32:39,200
maybe you already know a programming

00:32:37,519 --> 00:32:42,080
language and you can

00:32:39,200 --> 00:32:43,440
work in any specific project that just

00:32:42,080 --> 00:32:46,399
needs tests written

00:32:43,440 --> 00:32:48,399
in that language after you find a

00:32:46,399 --> 00:32:50,559
project to work on the next step is to

00:32:48,399 --> 00:32:54,000
find some of the docs

00:32:50,559 --> 00:32:56,960
you start with the readme usually in the

00:32:54,000 --> 00:32:58,399
their git repository whether it's github

00:32:56,960 --> 00:33:01,519
gitlab or some other

00:32:58,399 --> 00:33:04,799
repository those usually show how to

00:33:01,519 --> 00:33:06,480
install and start using the software

00:33:04,799 --> 00:33:08,159
after you start to get a little familiar

00:33:06,480 --> 00:33:11,279
with it you can also look at the

00:33:08,159 --> 00:33:13,279
contributing dock this will

00:33:11,279 --> 00:33:14,720
show you the steps that the project

00:33:13,279 --> 00:33:18,399
expects you to follow

00:33:14,720 --> 00:33:21,279
when contributing to it for source code

00:33:18,399 --> 00:33:22,000
they may show you things like issue

00:33:21,279 --> 00:33:25,840
tracker

00:33:22,000 --> 00:33:28,480
cues where they have easy

00:33:25,840 --> 00:33:29,279
tickets that you might be able to add

00:33:28,480 --> 00:33:32,399
tests for

00:33:29,279 --> 00:33:34,559
or if you're doing development add bug

00:33:32,399 --> 00:33:36,240
fixes

00:33:34,559 --> 00:33:38,399
after that you could also learn the

00:33:36,240 --> 00:33:40,960
software in other ways go through

00:33:38,399 --> 00:33:45,840
official documentation if it exists

00:33:40,960 --> 00:33:45,840
man pages trial and error

00:33:49,200 --> 00:33:54,000
after you've got a handle on the

00:33:50,720 --> 00:33:55,600
software start writing tests

00:33:54,000 --> 00:33:57,360
take a look see if they already have

00:33:55,600 --> 00:34:00,559
tests in place

00:33:57,360 --> 00:34:03,039
see how they work if nothing already

00:34:00,559 --> 00:34:05,519
exists then add a test directory

00:34:03,039 --> 00:34:06,080
you may be asked to change this later i

00:34:05,519 --> 00:34:08,879
was

00:34:06,080 --> 00:34:12,480
i started in one place and had was asked

00:34:08,879 --> 00:34:15,520
later to rename my test directory

00:34:12,480 --> 00:34:19,040
then start writing your tests python

00:34:15,520 --> 00:34:21,119
pi test java bash go whatever

00:34:19,040 --> 00:34:23,440
some projects even use ansible for their

00:34:21,119 --> 00:34:27,520
tests

00:34:23,440 --> 00:34:29,679
you can also at this point

00:34:27,520 --> 00:34:32,399
go ahead and submit your pull request

00:34:29,679 --> 00:34:35,359
review with dev or the project team

00:34:32,399 --> 00:34:37,040
and once it's merged congratulations

00:34:35,359 --> 00:34:39,679
you've now successfully contributed to

00:34:37,040 --> 00:34:39,679
open source

00:34:42,639 --> 00:34:49,359
and close out with

00:34:46,879 --> 00:34:51,520
some of the links to the resources that

00:34:49,359 --> 00:34:55,440
i mentioned earlier

00:34:51,520 --> 00:34:57,839
and that's all i have for today

00:34:55,440 --> 00:34:57,839
thank you

00:35:00,640 --> 00:35:03,839
thank you scott it was a great

00:35:02,560 --> 00:35:07,440
presentation let me

00:35:03,839 --> 00:35:16,960
just stop my stream

00:35:07,440 --> 00:35:19,119
and now we're open for questions

00:35:16,960 --> 00:35:22,079
so feel free to submit your questions in

00:35:19,119 --> 00:35:31,839
the chat window and the squad is here to

00:35:22,079 --> 00:35:31,839
answer them

00:35:38,640 --> 00:35:42,000
how about now can you hear me yeah now

00:35:40,640 --> 00:35:44,640
it works okay

00:35:42,000 --> 00:35:45,920
uh the one thing i would do i would go

00:35:44,640 --> 00:35:48,720
back in time to tell

00:35:45,920 --> 00:35:50,640
uh pascot to do uh to make everything

00:35:48,720 --> 00:35:51,520
easier would have been to work entirely

00:35:50,640 --> 00:35:54,560
upstream

00:35:51,520 --> 00:35:55,920
the the biggest problem was that i

00:35:54,560 --> 00:35:59,359
developed

00:35:55,920 --> 00:36:02,400
a lot of the tests from the start

00:35:59,359 --> 00:36:05,280
in a downstream private repository

00:36:02,400 --> 00:36:06,560
and then had to pick and choose pieces

00:36:05,280 --> 00:36:08,079
to submit upstream

00:36:06,560 --> 00:36:09,680
so when i made my first submission

00:36:08,079 --> 00:36:13,760
upstream i

00:36:09,680 --> 00:36:16,880
had to i picked i think

00:36:13,760 --> 00:36:17,280
i don't remember if it was two three a

00:36:16,880 --> 00:36:18,880
hand

00:36:17,280 --> 00:36:20,640
a small handful of tests that i wanted

00:36:18,880 --> 00:36:24,079
to contribute

00:36:20,640 --> 00:36:27,359
and i stripped out everything from

00:36:24,079 --> 00:36:31,040
the library files that

00:36:27,359 --> 00:36:34,320
were the support functions that i used

00:36:31,040 --> 00:36:38,320
and submitted those and then

00:36:34,320 --> 00:36:40,880
for future submissions i

00:36:38,320 --> 00:36:41,520
created pull requests and chunks so i

00:36:40,880 --> 00:36:44,880
would submit

00:36:41,520 --> 00:36:46,079
different types of tests and that caused

00:36:44,880 --> 00:36:49,760
a lot of

00:36:46,079 --> 00:36:51,599
headaches for me for having to maintain

00:36:49,760 --> 00:36:53,440
mostly the library file because the

00:36:51,599 --> 00:36:54,400
chunks were typically a whole file at a

00:36:53,440 --> 00:36:58,480
time

00:36:54,400 --> 00:37:01,839
but i had different support functions i

00:36:58,480 --> 00:37:05,680
developed that were very specific to

00:37:01,839 --> 00:37:07,440
different types of tests so i would have

00:37:05,680 --> 00:37:08,880
if i had worked entirely upstream from

00:37:07,440 --> 00:37:09,280
the beginning that would have made my

00:37:08,880 --> 00:37:11,119
life

00:37:09,280 --> 00:37:12,720
much easier because i would have

00:37:11,119 --> 00:37:14,960
submitted when i had

00:37:12,720 --> 00:37:16,240
three tests and then i would have

00:37:14,960 --> 00:37:19,599
submitted as i went

00:37:16,240 --> 00:37:22,000
instead of having to pick and choose

00:37:19,599 --> 00:37:23,359
how i put it all together for each

00:37:22,000 --> 00:37:26,400
individual pull request

00:37:23,359 --> 00:37:28,960
later that's that's my biggest

00:37:26,400 --> 00:37:30,320
biggest thing i would have changed and

00:37:28,960 --> 00:37:33,440
told myself was

00:37:30,320 --> 00:37:33,440
don't work

00:37:34,240 --> 00:37:38,960
as much downstream as i was at the time

00:37:37,520 --> 00:37:42,800
just work

00:37:38,960 --> 00:37:44,880
in my fork and submit as

00:37:42,800 --> 00:37:51,839
as i went which would have made

00:37:44,880 --> 00:37:51,839
everything easier

00:37:52,640 --> 00:37:56,800
i just got do we have any more questions

00:38:03,119 --> 00:38:10,160
all right going once going twice

00:38:06,960 --> 00:38:12,640
and uh i guess we're good

00:38:10,160 --> 00:38:14,240
so once again so thank you very much for

00:38:12,640 --> 00:38:18,240
a great presentation

00:38:14,240 --> 00:38:21,520
i actually really enjoyed it myself and

00:38:18,240 --> 00:38:24,160
it reminded me about my first steps in

00:38:21,520 --> 00:38:24,160
open source

00:38:25,040 --> 00:38:31,119
so i believe for today

00:38:28,079 --> 00:38:36,079
that's the final presentation

00:38:31,119 --> 00:38:38,000
for ensuring software quality track

00:38:36,079 --> 00:38:40,200
thank you very much everyone for

00:38:38,000 --> 00:38:43,200
listening and watching to us

00:38:40,200 --> 00:38:43,200

YouTube URL: https://www.youtube.com/watch?v=yO-v5AVqdjc


