Title: Object Storage for K8s - Krish Chowdhary - DevConf.CZ 2021
Publication date: 2021-02-13
Playlist: DevConfCZ 2021 Lighting talks
Description: 
	Kubernetes graduated Container Storage Interface (CSI) to GA status in v1.13, but it is limited to block and file storage. 
In this talk, we discuss SIG-Storage's efforts to bring object storage into the forefront of Kubernetes and introduce the Container Object Storage Interface (COSI) and cover: 
- Why COSI is needed for Kubernetes 
- Best practices for using COSI 
- Designing apps to leverage COSI 
- The COSI architecture, and how to contribute to the project.
Captions: 
	00:00:00,799 --> 00:00:06,160
what's next after csi an introduction to

00:00:03,919 --> 00:00:08,639
object storage for kubernetes

00:00:06,160 --> 00:00:10,559
and moving beyond file and block storage

00:00:08,639 --> 00:00:13,040
hello everyone my name is krish and i'm

00:00:10,559 --> 00:00:14,559
a software engineer at red hat

00:00:13,040 --> 00:00:16,400
so today we're going to be discussing a

00:00:14,559 --> 00:00:18,800
few main topics starting off with a

00:00:16,400 --> 00:00:20,640
brief introduction to object storage

00:00:18,800 --> 00:00:23,519
uh then an overview of csi and

00:00:20,640 --> 00:00:27,119
kubernetes followed by the need for cosy

00:00:23,519 --> 00:00:27,119
and the cosi architecture

00:00:27,680 --> 00:00:31,599
so what is object storage uh in object

00:00:31,119 --> 00:00:33,360
storage

00:00:31,599 --> 00:00:35,040
data is broken up into small discrete

00:00:33,360 --> 00:00:37,600
units known as objects

00:00:35,040 --> 00:00:38,719
which are then uh stored in a flat

00:00:37,600 --> 00:00:41,440
architecture

00:00:38,719 --> 00:00:43,360
uh data can be accessed through simple

00:00:41,440 --> 00:00:47,760
network apis

00:00:43,360 --> 00:00:50,000
and we organize these objects into

00:00:47,760 --> 00:00:51,199
logical containers commonly known as

00:00:50,000 --> 00:00:53,360
buckets

00:00:51,199 --> 00:00:54,559
this is an extremely cost efficient and

00:00:53,360 --> 00:00:56,239
scalable way to store

00:00:54,559 --> 00:00:58,559
large quantities of data while

00:00:56,239 --> 00:01:00,399
maintaining quick access

00:00:58,559 --> 00:01:02,160
and so what's the use case as i

00:01:00,399 --> 00:01:04,080
mentioned it is a network focused

00:01:02,160 --> 00:01:06,159
software defined storage design

00:01:04,080 --> 00:01:07,840
and so this makes it very flexible and

00:01:06,159 --> 00:01:09,040
so object storage is well suited for

00:01:07,840 --> 00:01:11,439
static data

00:01:09,040 --> 00:01:12,080
always connected mobile devices deep

00:01:11,439 --> 00:01:15,360
learning

00:01:12,080 --> 00:01:16,640
and analysis we can enforce more

00:01:15,360 --> 00:01:19,040
granular permissions

00:01:16,640 --> 00:01:20,159
on these buckets through bucket policies

00:01:19,040 --> 00:01:22,400
and name spacing

00:01:20,159 --> 00:01:24,400
however one challenge is that there's no

00:01:22,400 --> 00:01:28,000
definitive protocol for consumption and

00:01:24,400 --> 00:01:32,079
creation of objects or buckets

00:01:28,000 --> 00:01:34,640
and so what's the role of csi well csi

00:01:32,079 --> 00:01:36,400
provides a platform to expose block and

00:01:34,640 --> 00:01:39,439
file storage systems

00:01:36,400 --> 00:01:41,200
prior to csi connecting to new volume

00:01:39,439 --> 00:01:44,079
plugins

00:01:41,200 --> 00:01:45,920
was a core part of kubernetes but csi

00:01:44,079 --> 00:01:47,280
allowed vendors to move this logic into

00:01:45,920 --> 00:01:49,439
separate drivers

00:01:47,280 --> 00:01:50,320
and so some popular csi drivers today

00:01:49,439 --> 00:01:53,920
expose

00:01:50,320 --> 00:01:55,360
amazon ebs ceph or google cloud store

00:01:53,920 --> 00:01:57,360
and so this has been more options for

00:01:55,360 --> 00:01:59,680
storage and it made core kubernetes more

00:01:57,360 --> 00:02:02,320
secure and reliable

00:01:59,680 --> 00:02:03,920
so what are the core concepts in csi

00:02:02,320 --> 00:02:06,640
well first there's the storage class

00:02:03,920 --> 00:02:08,399
which is how kubernetes admins define

00:02:06,640 --> 00:02:10,399
different classes of storage

00:02:08,399 --> 00:02:12,000
this is followed by persistent volumes

00:02:10,399 --> 00:02:13,599
which are pieces of storage that are

00:02:12,000 --> 00:02:15,680
provisioned statically by an

00:02:13,599 --> 00:02:16,959
admin or dynamically through a storage

00:02:15,680 --> 00:02:19,680
class

00:02:16,959 --> 00:02:20,000
lastly we have persistent volumes which

00:02:19,680 --> 00:02:22,720
are

00:02:20,000 --> 00:02:25,280
requests for access to storage by a user

00:02:22,720 --> 00:02:28,239
and so pvcs consume pv resources and

00:02:25,280 --> 00:02:30,720
they specify the size and access mode

00:02:28,239 --> 00:02:32,560
so where does cosy fit in so in in

00:02:30,720 --> 00:02:33,040
cozies there are six main terms that are

00:02:32,560 --> 00:02:34,959
used

00:02:33,040 --> 00:02:36,239
there's the bucket class the bucket

00:02:34,959 --> 00:02:38,400
request the bucket

00:02:36,239 --> 00:02:41,519
the bucket access class the bucket

00:02:38,400 --> 00:02:43,040
access and the bucket access request

00:02:41,519 --> 00:02:45,760
and so we can draw some comparisons

00:02:43,040 --> 00:02:48,720
between cosy and csi

00:02:45,760 --> 00:02:50,640
where cosy has a bucket class csi

00:02:48,720 --> 00:02:53,519
defines a storage class

00:02:50,640 --> 00:02:54,800
a bucket is very similar to a persistent

00:02:53,519 --> 00:02:56,720
volume

00:02:54,800 --> 00:02:58,319
and a bucket request and bucket access

00:02:56,720 --> 00:03:02,000
request together

00:02:58,319 --> 00:03:04,400
kind of mimic a persistent volume claim

00:03:02,000 --> 00:03:06,239
and so cozy emphasizes the granularity

00:03:04,400 --> 00:03:09,200
of bucket access policies

00:03:06,239 --> 00:03:11,280
through bucket access classes bucket

00:03:09,200 --> 00:03:13,280
accesses and bucket access requests

00:03:11,280 --> 00:03:14,480
csi on the other hand has less granular

00:03:13,280 --> 00:03:16,959
access policies

00:03:14,480 --> 00:03:18,480
and instead allows for predefined access

00:03:16,959 --> 00:03:22,400
modes of read write ones

00:03:18,480 --> 00:03:22,400
read only many and read write many

00:03:22,640 --> 00:03:28,879
so the architecture of

00:03:25,840 --> 00:03:29,920
cozy essentially has four main

00:03:28,879 --> 00:03:32,319
components

00:03:29,920 --> 00:03:33,519
there's the cozy central controller the

00:03:32,319 --> 00:03:36,319
cozy sidecar

00:03:33,519 --> 00:03:38,799
controller uh the cozy node adapter and

00:03:36,319 --> 00:03:40,879
lastly the vendor provisioner

00:03:38,799 --> 00:03:42,799
uh and so the vendor provisioner

00:03:40,879 --> 00:03:44,159
communicates with the sidecar through

00:03:42,799 --> 00:03:48,560
grpc

00:03:44,159 --> 00:03:49,840
and the sidecar car is kubernetes aware

00:03:48,560 --> 00:03:51,120
and so on the right you can see the

00:03:49,840 --> 00:03:52,159
relationship between some of the

00:03:51,120 --> 00:03:54,560
different objects

00:03:52,159 --> 00:03:55,920
so a bucket request references the

00:03:54,560 --> 00:03:58,319
bucket class

00:03:55,920 --> 00:04:01,040
and a bucket access request references a

00:03:58,319 --> 00:04:02,799
bucket access class

00:04:01,040 --> 00:04:05,439
so here's an example of a sample

00:04:02,799 --> 00:04:06,159
workflow a simple workflow for creating

00:04:05,439 --> 00:04:08,720
a bucket

00:04:06,159 --> 00:04:09,519
so first things first the admin would

00:04:08,720 --> 00:04:12,400
define

00:04:09,519 --> 00:04:13,280
a bucket class this would be followed by

00:04:12,400 --> 00:04:15,760
the user

00:04:13,280 --> 00:04:16,880
creating a bucket request at some later

00:04:15,760 --> 00:04:18,720
time

00:04:16,880 --> 00:04:19,919
the central controller would notice the

00:04:18,720 --> 00:04:24,240
bucket request

00:04:19,919 --> 00:04:27,280
and it would create a bucket resource

00:04:24,240 --> 00:04:31,919
the sidecar upon noticing the bucket

00:04:27,280 --> 00:04:34,240
we'll call the create bucket grpc call

00:04:31,919 --> 00:04:35,040
and the vendor provisional in turn will

00:04:34,240 --> 00:04:37,520
create the

00:04:35,040 --> 00:04:38,080
backing bucket and so although not

00:04:37,520 --> 00:04:40,240
pictured

00:04:38,080 --> 00:04:41,520
the node adapter would be responsible

00:04:40,240 --> 00:04:44,320
for the final step

00:04:41,520 --> 00:04:45,840
of mounting the secret onto the pod so

00:04:44,320 --> 00:04:47,840
that's all for this presentation

00:04:45,840 --> 00:04:49,600
uh thank you for your time if you want

00:04:47,840 --> 00:04:51,600
to get involved with the cozy project

00:04:49,600 --> 00:04:52,800
check out the six storage cosy slack

00:04:51,600 --> 00:04:55,120
channel

00:04:52,800 --> 00:04:56,400
in the kubernetes slack or join the

00:04:55,120 --> 00:05:01,600
weekly meetings

00:04:56,400 --> 00:05:01,600

YouTube URL: https://www.youtube.com/watch?v=BikWtON4bqo


