Title: Taming Microservices Testing with Docker and Arquillian Cube - Aslak Knutsen
Publication date: 2016-02-12
Playlist: JUDCon
Description: 
	The Borg is docking your system; testing is futile! Or is it? With microservices, polyglot, and DevOps on the rise, where are we at with testing?

Do these technologies bring more complexity and make our testing effort harder, or maybe the contrary? Do they actually help us write better tests more easily?

This session explores not only how we can do our testing in this new world but also how the new world can help us test better.

It takes a close look at various topics, from NodeJS, DynJS, VertX, Ceylon or Ruby, orchestrated microservices, system scale testing with various configurations to database migration and regression testing.All are within reach.
Captions: 
	00:00:06,200 --> 00:00:22,100
okay everybody all right so um as far as

00:00:14,009 --> 00:00:26,970
being a testing the testing hospital now

00:00:22,100 --> 00:00:29,010
testing testing platform one of the

00:00:26,970 --> 00:00:30,660
first things you do when when you want

00:00:29,010 --> 00:00:32,000
to run our Killian is to select some

00:00:30,660 --> 00:00:35,399
type of container that you're going to

00:00:32,000 --> 00:00:37,800
run again that could be some examples

00:00:35,399 --> 00:00:41,219
there being a tomcat instance a while

00:00:37,800 --> 00:00:42,450
for instance or a JBoss EAP or glassfish

00:00:41,219 --> 00:00:44,010
or whatever that's the kind of the

00:00:42,450 --> 00:00:48,719
target environment that you want to run

00:00:44,010 --> 00:00:50,700
this this or these tests against or it

00:00:48,719 --> 00:00:54,270
could be a remote thing like an open

00:00:50,700 --> 00:00:56,010
shift instance and then when the killing

00:00:54,270 --> 00:01:00,800
starts up I will then connect and

00:00:56,010 --> 00:01:03,750
communicate with that that container and

00:01:00,800 --> 00:01:07,770
based on how you set up the test it will

00:01:03,750 --> 00:01:09,540
then start to deploy the the the

00:01:07,770 --> 00:01:12,299
deployment that you have defined the

00:01:09,540 --> 00:01:14,820
target the the scope of this test

00:01:12,299 --> 00:01:17,130
essentially the app application that we

00:01:14,820 --> 00:01:20,490
want to test that's being deployed today

00:01:17,130 --> 00:01:25,590
to the target environment along with a

00:01:20,490 --> 00:01:27,659
bunch of arquillian things and then you

00:01:25,590 --> 00:01:29,820
can move the whole test execution over

00:01:27,659 --> 00:01:33,420
into that run time instead of instead of

00:01:29,820 --> 00:01:37,350
having it only having having it run

00:01:33,420 --> 00:01:40,049
inside the tips ID now you have the

00:01:37,350 --> 00:01:42,500
advantage of actually being inside side

00:01:40,049 --> 00:01:45,299
the wrong time that that you want to to

00:01:42,500 --> 00:01:47,159
to test thank you to the inventors are

00:01:45,299 --> 00:01:51,149
actually having access to all the things

00:01:47,159 --> 00:01:54,380
that run time provides like security

00:01:51,149 --> 00:01:56,579
managers entity managers data sources

00:01:54,380 --> 00:02:01,469
JMS connections and all those type of

00:01:56,579 --> 00:02:04,530
standard things and when they're Killian

00:02:01,469 --> 00:02:06,630
then it's done running in container test

00:02:04,530 --> 00:02:08,250
it can then move the test results back

00:02:06,630 --> 00:02:11,540
over to the client side and everything

00:02:08,250 --> 00:02:15,489
looks like the lucky word if you run

00:02:11,540 --> 00:02:18,079
normal gender test then of course it

00:02:15,489 --> 00:02:22,400
cleans up the environment so that's the

00:02:18,079 --> 00:02:24,950
basic what what are Killian are kidding

00:02:22,400 --> 00:02:28,489
as we know it from the Java EE space

00:02:24,950 --> 00:02:30,319
does and this is what a the giant

00:02:28,489 --> 00:02:33,739
version of the test would look like so

00:02:30,319 --> 00:02:36,439
you have the g-unit extension point that

00:02:33,739 --> 00:02:40,189
says handled execution process to the

00:02:36,439 --> 00:02:41,719
arquillian arquillian runner at this

00:02:40,189 --> 00:02:44,599
point or killing has control I can do

00:02:41,719 --> 00:02:47,209
essentially whatever he wants one of the

00:02:44,599 --> 00:02:50,359
first things it does is to look for that

00:02:47,209 --> 00:02:53,480
deployment annotated and then annotated

00:02:50,359 --> 00:02:55,220
method and relies on the on the library

00:02:53,480 --> 00:02:58,090
called the shrink-wrap to bundle up

00:02:55,220 --> 00:03:01,129
whatever you want to to deploy to this

00:02:58,090 --> 00:03:06,200
application server so you can add the

00:03:01,129 --> 00:03:09,109
classes packages files full jars you can

00:03:06,200 --> 00:03:12,079
resolve them for home de maven maven

00:03:09,109 --> 00:03:15,200
repository and so on then if the

00:03:12,079 --> 00:03:16,609
attempts to reuse the the component

00:03:15,200 --> 00:03:18,889
models that exist in that environment

00:03:16,609 --> 00:03:22,549
that you're targeting in this case we're

00:03:18,889 --> 00:03:24,290
using CDI so we can inject back the live

00:03:22,549 --> 00:03:25,970
beam that is actually being deployed and

00:03:24,290 --> 00:03:27,769
running in the server it's not even mark

00:03:25,970 --> 00:03:29,329
it's not a proxy of some sort it's the

00:03:27,769 --> 00:03:32,060
actual thing that the server operates on

00:03:29,329 --> 00:03:33,979
and then you come to the test method and

00:03:32,060 --> 00:03:37,970
the test method execute as any normal

00:03:33,979 --> 00:03:40,280
the j unit tests essentially you you get

00:03:37,970 --> 00:03:43,040
the value set and you assert on the

00:03:40,280 --> 00:03:46,069
state that results in that debt result

00:03:43,040 --> 00:03:51,229
is then being handed back down down to

00:03:46,069 --> 00:03:52,879
the client that was entertaining version

00:03:51,229 --> 00:03:55,010
this is the client-side version there's

00:03:52,879 --> 00:03:57,319
kind of two points there's the interest

00:03:55,010 --> 00:03:59,120
of being in the environment that you

00:03:57,319 --> 00:04:00,439
want to test and then at the point of

00:03:59,120 --> 00:04:02,720
being on the outside of the environment

00:04:00,439 --> 00:04:07,310
because you have remote entry points

00:04:02,720 --> 00:04:09,889
like a jax-rs service or a remote ejb or

00:04:07,310 --> 00:04:11,060
HTML pages or whatever the only

00:04:09,889 --> 00:04:13,400
difference from our Killian point of

00:04:11,060 --> 00:04:16,810
view is that you then except Saturday

00:04:13,400 --> 00:04:18,590
deployment it's not it's testable faults

00:04:16,810 --> 00:04:21,349
instead are killing will do anything

00:04:18,590 --> 00:04:22,270
besides deploying this for you and then

00:04:21,349 --> 00:04:24,580
you're up and running

00:04:22,270 --> 00:04:31,720
you can as we're using here we're using

00:04:24,580 --> 00:04:36,759
the rest assure library to communicate

00:04:31,720 --> 00:04:41,680
with one of our best services so to set

00:04:36,759 --> 00:04:44,110
it up for those are you start killing in

00:04:41,680 --> 00:04:46,270
the past and a bunch of the extension we

00:04:44,110 --> 00:04:48,400
know that it's a bit complicated to know

00:04:46,270 --> 00:04:53,009
what works and what doesn't let's sell

00:04:48,400 --> 00:04:56,470
it so we started topical the arquillian

00:04:53,009 --> 00:04:58,330
universe bomb which includes all of the

00:04:56,470 --> 00:05:01,360
different all of the different

00:04:58,330 --> 00:05:02,460
extensions and try to align the

00:05:01,360 --> 00:05:05,770
different version so that everything

00:05:02,460 --> 00:05:08,229
should work together so instead of

00:05:05,770 --> 00:05:11,880
relying on the arquillian bomb you can

00:05:08,229 --> 00:05:15,580
now rely on the arcane universe bomb and

00:05:11,880 --> 00:05:18,340
you just followed the same pattern being

00:05:15,580 --> 00:05:19,990
org arquillian universe and then the

00:05:18,340 --> 00:05:22,479
name of the module or extension so in

00:05:19,990 --> 00:05:24,129
this case we want to use the alkylene j

00:05:22,479 --> 00:05:25,750
unit integration but it could be the

00:05:24,129 --> 00:05:27,009
testing g integration it could be the

00:05:25,750 --> 00:05:31,300
cucumber integration to Spock

00:05:27,009 --> 00:05:35,020
integration or any of the other other

00:05:31,300 --> 00:05:37,889
test framework that we support and then

00:05:35,020 --> 00:05:40,870
in this case we're using the chameleon

00:05:37,889 --> 00:05:44,289
container which is they could a proxy

00:05:40,870 --> 00:05:46,509
container essentially to allow you to to

00:05:44,289 --> 00:05:48,840
call all the other containers so there's

00:05:46,509 --> 00:05:51,130
one dependency to include all of the

00:05:48,840 --> 00:05:54,090
different jpost versions and the

00:05:51,130 --> 00:05:56,740
different glassfish versions and so on

00:05:54,090 --> 00:05:59,319
so let's see that up and running that's

00:05:56,740 --> 00:06:01,360
the basis over Killian so this is the

00:05:59,319 --> 00:06:08,409
same test that we were seeing on the

00:06:01,360 --> 00:06:11,620
slides the ink container version and as

00:06:08,409 --> 00:06:15,639
far as it's being configured we can see

00:06:11,620 --> 00:06:18,340
in the palm aire that it's just relying

00:06:15,639 --> 00:06:22,750
on on the universe bomb boy it's a bit

00:06:18,340 --> 00:06:27,729
small maybe but and the camp comedians

00:06:22,750 --> 00:06:30,060
driver see and it's defined in the are

00:06:27,729 --> 00:06:33,550
killing configuration file that this

00:06:30,060 --> 00:06:36,590
should be running on a wall fine line

00:06:33,550 --> 00:06:38,450
man your server and some of the features

00:06:36,590 --> 00:06:41,560
of chameleon is that as long as you

00:06:38,450 --> 00:06:43,850
haven't defined where this is server is

00:06:41,560 --> 00:06:47,720
it will actually download it and

00:06:43,850 --> 00:06:50,240
download and extract it for you it makes

00:06:47,720 --> 00:06:55,040
it easy to do them worse and eventually

00:06:50,240 --> 00:06:56,810
have to run from CI systems and so on so

00:06:55,040 --> 00:06:58,370
since this is just a j unit test the

00:06:56,810 --> 00:07:04,100
only thing we need to do is to right

00:06:58,370 --> 00:07:09,830
click and save run as a unit dr. deter

00:07:04,100 --> 00:07:15,290
run has gained its starting off the

00:07:09,830 --> 00:07:21,770
server flowing application and we got a

00:07:15,290 --> 00:07:22,880
green bar you look really log and see

00:07:21,770 --> 00:07:26,330
what's happening but it's not that

00:07:22,880 --> 00:07:29,680
interesting people understand the

00:07:26,330 --> 00:07:38,000
conceptual or water killing normal does

00:07:29,680 --> 00:07:39,260
any questions around that maybe that's

00:07:38,000 --> 00:07:47,300
the other way is there anyone who

00:07:39,260 --> 00:07:51,500
understands it at all 23 okay all right

00:07:47,300 --> 00:07:53,750
I can explain more um so what are

00:07:51,500 --> 00:07:55,820
Killian dolls in the background here is

00:07:53,750 --> 00:07:57,920
kind of the first steps that we looked

00:07:55,820 --> 00:07:59,270
at so as far as you are defined our

00:07:57,920 --> 00:08:01,670
Killian it will then look for the

00:07:59,270 --> 00:08:04,100
deployment it will start that container

00:08:01,670 --> 00:08:07,850
that you have configured which is a in

00:08:04,100 --> 00:08:10,940
this case the wildfly container we

00:08:07,850 --> 00:08:13,700
started as part of the test the test

00:08:10,940 --> 00:08:15,080
high cycle and it will deploy the

00:08:13,700 --> 00:08:17,570
deployment and then it will move the

00:08:15,080 --> 00:08:19,430
whole execution of the test over into

00:08:17,570 --> 00:08:22,190
that container so you're running inside

00:08:19,430 --> 00:08:28,310
the container no that's the wrong test

00:08:22,190 --> 00:08:31,750
per se but this one could actually for

00:08:28,310 --> 00:08:31,750
the fun of it let's see

00:08:37,310 --> 00:08:39,310
I

00:08:41,099 --> 00:08:50,710
no let's start up a wildfire bro outside

00:08:49,060 --> 00:08:53,410
of our Killians control and then change

00:08:50,710 --> 00:08:55,680
it to use the remote adapter so they

00:08:53,410 --> 00:09:02,040
will communicate with some existing

00:08:55,680 --> 00:09:07,600
existing server and we can debug that

00:09:02,040 --> 00:09:08,830
server and that's it when we then run

00:09:07,600 --> 00:09:13,300
the ink container test we can set a

00:09:08,830 --> 00:09:14,800
debug point on the inside the test

00:09:13,300 --> 00:09:20,589
method and see where that actually

00:09:14,800 --> 00:09:23,430
actually execute we run that see it's

00:09:20,589 --> 00:09:23,430
not starting it up anymore

00:09:31,379 --> 00:09:33,470
you

00:09:46,910 --> 00:09:49,870
susan home

00:09:58,899 --> 00:10:07,209
okay then we have a break point I'm you

00:10:01,899 --> 00:10:10,360
can see the the actual break point the

00:10:07,209 --> 00:10:17,679
stack of it may be hard to see but it's

00:10:10,360 --> 00:10:19,689
coming in from due to the HTTP server on

00:10:17,679 --> 00:10:24,100
the wildfly side so it's actually not

00:10:19,689 --> 00:10:26,619
executing p in the IDE but they request

00:10:24,100 --> 00:10:29,290
is forwarded in and executed in the

00:10:26,619 --> 00:10:32,829
remote environment and then it's being

00:10:29,290 --> 00:10:35,230
passed back back to the client so it

00:10:32,829 --> 00:10:39,040
will see and feel like it was executed

00:10:35,230 --> 00:10:43,589
as a local test regardless of it I'll be

00:10:39,040 --> 00:10:51,660
being a good either in eclipse or in

00:10:43,589 --> 00:10:51,660
navan surefire or whatever so

00:10:54,190 --> 00:11:06,830
struggle so the principles around

00:11:02,510 --> 00:11:08,660
achillion in general is the the test

00:11:06,830 --> 00:11:10,730
case itself shouldn't have any

00:11:08,660 --> 00:11:15,100
information about where this is running

00:11:10,730 --> 00:11:18,820
it should only define what it needs

00:11:15,100 --> 00:11:20,960
needs to run that's to be able to create

00:11:18,820 --> 00:11:22,100
portable tests in the sense of day they

00:11:20,960 --> 00:11:24,800
can swap between the different

00:11:22,100 --> 00:11:27,590
environments you have the same test case

00:11:24,800 --> 00:11:29,960
or test suite run on both the class fish

00:11:27,590 --> 00:11:35,090
and wildfire and can see that they work

00:11:29,960 --> 00:11:38,030
in the same locations and it's going to

00:11:35,090 --> 00:11:41,600
execute for from wherever you want it to

00:11:38,030 --> 00:11:45,710
being an IDE or or maven surefire for

00:11:41,600 --> 00:11:47,570
instance or cradle or whatnot some of

00:11:45,710 --> 00:11:51,620
the big problems that we're trying to

00:11:47,570 --> 00:11:54,860
solve was the big integration test suite

00:11:51,620 --> 00:11:57,350
type of thing where you end up writing a

00:11:54,860 --> 00:11:59,090
test going to Maybin having to build the

00:11:57,350 --> 00:12:01,550
whole thing that could take an hour and

00:11:59,090 --> 00:12:04,820
then you're going to have one hitting

00:12:01,550 --> 00:12:07,550
tests so we wanted to be able to be in

00:12:04,820 --> 00:12:09,950
the ID and just call the test and run

00:12:07,550 --> 00:12:17,990
that single test as as a view with a

00:12:09,950 --> 00:12:19,880
normal unit test and we see that some

00:12:17,990 --> 00:12:23,630
somewhat through the use of the

00:12:19,880 --> 00:12:25,640
shrink-wrap libraries which can use the

00:12:23,630 --> 00:12:28,250
incremental compilation that happens in

00:12:25,640 --> 00:12:30,470
the IDE and just packaged up the stuff

00:12:28,250 --> 00:12:36,200
instead of having to to go through the

00:12:30,470 --> 00:12:38,180
whole maybe build and we call it a

00:12:36,200 --> 00:12:40,670
testing platform instead of a testing

00:12:38,180 --> 00:12:42,380
library because it's really what it does

00:12:40,670 --> 00:12:44,600
is just to manage the lifecycle of

00:12:42,380 --> 00:12:46,730
different things you put on top of it so

00:12:44,600 --> 00:12:48,590
it manages the lifecycle of selenium for

00:12:46,730 --> 00:12:51,830
instance through the drawn extension it

00:12:48,590 --> 00:12:55,610
handles the lifecycle of containers with

00:12:51,830 --> 00:12:59,690
the container extension and it can be

00:12:55,610 --> 00:13:02,480
used from multiple different testing

00:12:59,690 --> 00:13:04,240
frameworks or it can be used as a

00:13:02,480 --> 00:13:07,330
standalone thing outside of it

00:13:04,240 --> 00:13:09,279
testing environment and it's built to be

00:13:07,330 --> 00:13:12,399
flexible and extensible in the sense

00:13:09,279 --> 00:13:14,890
that we wanted we don't know what's what

00:13:12,399 --> 00:13:18,490
libraries or component models we need to

00:13:14,890 --> 00:13:20,110
support today's or we need we need to we

00:13:18,490 --> 00:13:22,180
know which ones are here today but we

00:13:20,110 --> 00:13:25,240
don't necessarily butch woman know which

00:13:22,180 --> 00:13:28,420
one come tomorrow so so it's build the

00:13:25,240 --> 00:13:30,700
brown extensions and and the richest so

00:13:28,420 --> 00:13:32,740
the platform can kind of stay the same

00:13:30,700 --> 00:13:41,200
and if you just kind of go a bit along

00:13:32,740 --> 00:13:42,760
as a modular system so I'm going to look

00:13:41,200 --> 00:13:45,640
at one of those extension today which is

00:13:42,760 --> 00:13:48,510
a clean cube which is the extension of

00:13:45,640 --> 00:13:52,600
operates and controls the lifecycle of

00:13:48,510 --> 00:14:00,880
docker containers which is the the basis

00:13:52,600 --> 00:14:03,790
of this talk essential so cube is as a

00:14:00,880 --> 00:14:06,430
setter said already it manages the life

00:14:03,790 --> 00:14:10,149
cycle of of a docker container or

00:14:06,430 --> 00:14:12,520
multiple containers and it has some

00:14:10,149 --> 00:14:15,670
magic so you can either use just the

00:14:12,520 --> 00:14:18,459
doctor containers as this or you can

00:14:15,670 --> 00:14:21,339
snap up a container adapter from the

00:14:18,459 --> 00:14:24,760
Java EE world on top of it on top of a

00:14:21,339 --> 00:14:26,320
docker instance and Cuba kind of handle

00:14:24,760 --> 00:14:27,610
all the IP addresses and pork mappings

00:14:26,320 --> 00:14:32,560
and all that stuff for you so you just

00:14:27,610 --> 00:14:35,380
say on that cube there is a a JBoss

00:14:32,560 --> 00:14:41,260
server and then cube figures out the

00:14:35,380 --> 00:14:44,529
rest and of course you can operate them

00:14:41,260 --> 00:14:47,350
multiple containers at once and then I

00:14:44,529 --> 00:14:49,690
kind of orchestrate how they run

00:14:47,350 --> 00:14:52,750
together how they're started and when

00:14:49,690 --> 00:14:55,770
you want to stop them etc and it's not

00:14:52,750 --> 00:14:57,910
just built around the idea of being a

00:14:55,770 --> 00:15:00,990
application server inside the docker

00:14:57,910 --> 00:15:03,220
image but it can be used with any

00:15:00,990 --> 00:15:07,600
library anything that starts at court

00:15:03,220 --> 00:15:11,010
essentially any language so drop wizard

00:15:07,600 --> 00:15:13,590
spring good net the node vertex

00:15:11,010 --> 00:15:19,800
bash scripts and I mean whatever you

00:15:13,590 --> 00:15:23,850
want to make the cube it's just a doctor

00:15:19,800 --> 00:15:28,950
container so so we're gonna look at the

00:15:23,850 --> 00:15:30,570
first the first test we kind of some of

00:15:28,950 --> 00:15:34,710
the premise of this talk is to see how

00:15:30,570 --> 00:15:38,820
we can use darker to enhance our current

00:15:34,710 --> 00:15:43,260
testing techniques as well as how we can

00:15:38,820 --> 00:15:48,050
test in general doctor stuff so the

00:15:43,260 --> 00:15:51,300
first the first test here is a simple

00:15:48,050 --> 00:15:53,250
wildfly based docker image that is

00:15:51,300 --> 00:15:54,600
custom-made then it opens up all the

00:15:53,250 --> 00:15:59,450
management ports and so on so we're

00:15:54,600 --> 00:16:02,220
going to use darker as a I know as I

00:15:59,450 --> 00:16:04,500
it's not a pre-configured image but

00:16:02,220 --> 00:16:07,170
we're going to change the state so it

00:16:04,500 --> 00:16:09,950
just starts up a firefly server and

00:16:07,170 --> 00:16:13,770
we're going to be deploying into it as

00:16:09,950 --> 00:16:16,620
as per as we were doing it in the other

00:16:13,770 --> 00:16:21,750
example but this time we're going to do

00:16:16,620 --> 00:16:24,060
it through through doctor instead so the

00:16:21,750 --> 00:16:26,220
test case itself we're also going to use

00:16:24,060 --> 00:16:28,560
the extension called the arquillian

00:16:26,220 --> 00:16:34,320
persistent extension which helps you

00:16:28,560 --> 00:16:36,690
deal with database data essentially so

00:16:34,320 --> 00:16:39,000
you can say before this has method

00:16:36,690 --> 00:16:41,550
starts we're going to insert this camel

00:16:39,000 --> 00:16:43,560
file with data and make sure that the

00:16:41,550 --> 00:16:45,980
state of the database is correct and

00:16:43,560 --> 00:16:50,760
then we're going to execute this

00:16:45,980 --> 00:16:55,100
different jpr jpa chorus against it and

00:16:50,760 --> 00:16:57,420
see that the results are are as expected

00:16:55,100 --> 00:17:00,330
the only thing you have to do when

00:16:57,420 --> 00:17:02,370
you're using the universe bomb to get

00:17:00,330 --> 00:17:08,190
dr. in there is to add the arquillian

00:17:02,370 --> 00:17:09,750
cube daugher dependency and do the

00:17:08,190 --> 00:17:12,839
persistence is our current persistence

00:17:09,750 --> 00:17:16,250
there's a pattern here and how they take

00:17:12,839 --> 00:17:16,250
the name and then are giving chameleon

00:17:17,339 --> 00:17:23,640
so this is the arcane XML file when

00:17:21,160 --> 00:17:27,370
you're using docker or sorry blue cube

00:17:23,640 --> 00:17:30,850
there's an extension section for darker

00:17:27,370 --> 00:17:33,130
in a minimalistic there's a bunch of

00:17:30,850 --> 00:17:35,650
rules say well if you don't define

00:17:33,130 --> 00:17:37,720
anything it will try to figure out where

00:17:35,650 --> 00:17:42,940
it might run these things so if there is

00:17:37,720 --> 00:17:51,820
a if you're on a unix box it will look

00:17:42,940 --> 00:17:54,100
for the linux unix unix taco sockets if

00:17:51,820 --> 00:17:55,809
there's a doctor machine up and running

00:17:54,100 --> 00:17:56,830
you will see if there's only one running

00:17:55,809 --> 00:18:00,370
and that kind of thing so it tries to

00:17:56,830 --> 00:18:01,990
kind of figure out where it should run

00:18:00,370 --> 00:18:04,120
but in this case we're telling it to run

00:18:01,990 --> 00:18:07,030
on the on the on the doctor machine

00:18:04,120 --> 00:18:08,740
that's called Devon and then there's a

00:18:07,030 --> 00:18:12,640
definition of the image so this image

00:18:08,740 --> 00:18:15,520
called file why we're going to use the

00:18:12,640 --> 00:18:20,800
darker file that is no kind located with

00:18:15,520 --> 00:18:25,390
within within our project structure to

00:18:20,800 --> 00:18:27,940
build this file I'm sorry to build a

00:18:25,390 --> 00:18:30,690
team rich as as a part of the test run

00:18:27,940 --> 00:18:37,600
then there's a couple of port findings

00:18:30,690 --> 00:18:39,429
fairly standard docker stuff and due to

00:18:37,600 --> 00:18:42,160
how wildfly works with the

00:18:39,429 --> 00:18:44,530
authentication mechanism and so on you

00:18:42,160 --> 00:18:46,600
have to set up some user as long as

00:18:44,530 --> 00:18:49,120
you're not hunting on the same holes so

00:18:46,600 --> 00:18:50,890
that's why these two are there as far as

00:18:49,120 --> 00:18:52,120
the chameleon configuration is just

00:18:50,890 --> 00:18:57,309
telling it that it's going to use a well

00:18:52,120 --> 00:19:01,240
fine line remote adapter and combination

00:18:57,309 --> 00:19:03,910
of cube and the doctor integration will

00:19:01,240 --> 00:19:08,410
then set the IP address that is going to

00:19:03,910 --> 00:19:10,300
use and and look at the port binding for

00:19:08,410 --> 00:19:13,660
instance that you have remapped the

00:19:10,300 --> 00:19:15,400
default in a teapot to be 80 81 and kind

00:19:13,660 --> 00:19:20,940
of update all of that configuration for

00:19:15,400 --> 00:19:20,940
you so let's see how that looks

00:19:23,700 --> 00:19:29,650
so yeah right so this as far as the JPA

00:19:27,520 --> 00:19:34,300
part of this test it's going to run

00:19:29,650 --> 00:19:39,280
against the default installed h/o

00:19:34,300 --> 00:19:43,200
vertical the default database example

00:19:39,280 --> 00:19:46,570
database what is it going h to thank you

00:19:43,200 --> 00:19:48,910
h2 and nothing else so it's also oh it's

00:19:46,570 --> 00:19:55,140
all internal and all inside the same

00:19:48,910 --> 00:19:55,140
image test case itself doesn't really

00:19:56,220 --> 00:20:10,450
set the right one ok so this case it's

00:20:05,650 --> 00:20:13,960
the same as we saw just do runners jail

00:20:10,450 --> 00:20:18,400
it and now if I find a little window

00:20:13,960 --> 00:20:23,470
here should see here well don't be

00:20:18,400 --> 00:20:25,360
another but now we're inside the pep

00:20:23,470 --> 00:20:27,940
talker machine and we can see that the

00:20:25,360 --> 00:20:34,120
walk language has been started up it's

00:20:27,940 --> 00:20:38,170
been up 49 seconds and there is sorry to

00:20:34,120 --> 00:20:46,220
run the test and we should see the

00:20:38,170 --> 00:20:49,250
locker image go away and book gone

00:20:46,220 --> 00:20:52,890
so that's the most simple version of

00:20:49,250 --> 00:20:57,420
cube starting up some existing container

00:20:52,890 --> 00:21:00,540
in some existing tucker image building

00:20:57,420 --> 00:21:04,950
image when it starts up to match your i

00:21:00,540 --> 00:21:10,770
can look at that as well we define their

00:21:04,950 --> 00:21:12,750
had the killian xml pointing to our

00:21:10,770 --> 00:21:16,730
local folder hair that has all the

00:21:12,750 --> 00:21:16,730
dockerfile and what that's needing

00:21:18,020 --> 00:21:27,200
essentially just setting the password

00:21:20,070 --> 00:21:27,200
and closing the ports yes absolutely

00:21:57,160 --> 00:22:02,690
the foreman that you saw here was was

00:22:00,350 --> 00:22:08,960
our own essentially it's loosely based

00:22:02,690 --> 00:22:11,870
around fig and how the variables that

00:22:08,960 --> 00:22:13,940
the doctor served with the service

00:22:11,870 --> 00:22:16,100
rather that takes in that essentially

00:22:13,940 --> 00:22:20,090
what the hell's basil but we do also

00:22:16,100 --> 00:22:24,530
support you compose a post format the

00:22:20,090 --> 00:22:26,600
compost format came after we've started

00:22:24,530 --> 00:22:34,970
that thing that's why that's not a city

00:22:26,600 --> 00:22:41,350
full option at the time antis friends

00:22:34,970 --> 00:22:41,350
but i'll dispose of course um no no

00:23:08,420 --> 00:23:13,650
um you technically could they would only

00:23:11,580 --> 00:23:15,540
work on the localhost essentially

00:23:13,650 --> 00:23:19,080
because in a normal mode machine you

00:23:15,540 --> 00:23:22,830
wouldn't see the room the the containers

00:23:19,080 --> 00:23:24,150
IP at all most likely but running on

00:23:22,830 --> 00:23:26,160
locals you could do that you could

00:23:24,150 --> 00:23:28,590
configure configure it to run directly

00:23:26,160 --> 00:23:34,260
on the container without going through

00:23:28,590 --> 00:23:35,700
the hosts I believe that's possible so

00:23:34,260 --> 00:23:40,920
I'm going to look a bit in on your

00:23:35,700 --> 00:23:43,380
orchestration part of it then means

00:23:40,920 --> 00:23:46,550
several dependent dependent docker

00:23:43,380 --> 00:23:49,320
containers then needs to be started and

00:23:46,550 --> 00:23:52,560
some of them needs to be started up it

00:23:49,320 --> 00:23:56,220
up in a different hype cycle than what

00:23:52,560 --> 00:23:59,910
the the test container is going to start

00:23:56,220 --> 00:24:02,640
up in and you can compose and compose

00:23:59,910 --> 00:24:05,070
some bits based on different templates

00:24:02,640 --> 00:24:08,520
and kind of extend let's extend each

00:24:05,070 --> 00:24:10,290
other so as far as JP I part of this

00:24:08,520 --> 00:24:12,600
we're going to use this time we're going

00:24:10,290 --> 00:24:14,760
to use Wi-Fi it's gonna be the same test

00:24:12,600 --> 00:24:15,960
case I take a test case as we saw before

00:24:14,760 --> 00:24:18,930
but this time it's going to be

00:24:15,960 --> 00:24:21,300
configured to run against and my SQL

00:24:18,930 --> 00:24:25,160
instance instead which then it's two

00:24:21,300 --> 00:24:25,160
different doctor containers

00:24:25,370 --> 00:24:31,530
configuration doesn't mean the basic is

00:24:28,080 --> 00:24:33,300
still the same there is no a property

00:24:31,530 --> 00:24:35,250
that we have exposed it says all to

00:24:33,300 --> 00:24:37,170
start containers you can put an

00:24:35,250 --> 00:24:40,050
expression there to say which of the

00:24:37,170 --> 00:24:43,920
defined containers here Iron Tail

00:24:40,050 --> 00:24:46,920
wildfire or MySQL latest that you want

00:24:43,920 --> 00:24:54,140
to start up before it's actually before

00:24:46,920 --> 00:24:58,140
anything else happens and then we are

00:24:54,140 --> 00:25:01,970
adding a link so that the containers can

00:24:58,140 --> 00:25:05,010
kind of see each other based on the name

00:25:01,970 --> 00:25:06,720
based on the property there that you see

00:25:05,010 --> 00:25:09,980
say which one you're going to auto

00:25:06,720 --> 00:25:13,370
starch you can have multiple different

00:25:09,980 --> 00:25:16,920
my SQL e in

00:25:13,370 --> 00:25:19,170
for instance that have a link so it

00:25:16,920 --> 00:25:23,190
could be a wireless ql5 it could be him

00:25:19,170 --> 00:25:25,590
has gives six it could be a postgres and

00:25:23,190 --> 00:25:28,410
just based on swapping on which one you

00:25:25,590 --> 00:25:32,190
start first essentially it's what will

00:25:28,410 --> 00:25:34,860
define which link to link the wildfly

00:25:32,190 --> 00:25:40,470
server will see image database you will

00:25:34,860 --> 00:25:43,400
be running this test against and and

00:25:40,470 --> 00:25:45,930
that allows you to to fairly easily

00:25:43,400 --> 00:25:48,330
spawn out multiple different tests over

00:25:45,930 --> 00:25:51,830
multiple different database servers and

00:25:48,330 --> 00:25:55,560
so on which is an interesting so um

00:25:51,830 --> 00:26:00,980
right to your point I guess or to some

00:25:55,560 --> 00:26:05,040
of it that form an SDR arquillian cube

00:26:00,980 --> 00:26:09,990
cube format loosely based on thing and

00:26:05,040 --> 00:26:12,810
some other options but it looks fairly

00:26:09,990 --> 00:26:15,270
similar to how the compose format looks

00:26:12,810 --> 00:26:19,470
so we also support the default dr.

00:26:15,270 --> 00:26:22,380
Koppel's format so you could I mean that

00:26:19,470 --> 00:26:25,260
would be the that would be the personal

00:26:22,380 --> 00:26:29,430
of the same configuration but done in

00:26:25,260 --> 00:26:31,020
the doctor compose format instead and

00:26:29,430 --> 00:26:34,710
just define that you want the definition

00:26:31,020 --> 00:26:36,950
format to be compose so look let's look

00:26:34,710 --> 00:26:36,950
at that

00:26:44,330 --> 00:26:57,419
so again this is the same test that we

00:26:46,889 --> 00:27:01,080
saw before can just run us and we should

00:26:57,419 --> 00:27:23,159
start to see some mysql containers

00:27:01,080 --> 00:27:30,330
starting wildfire starting yeah there we

00:27:23,159 --> 00:27:32,460
go turn up to jump down any bar that was

00:27:30,330 --> 00:27:34,529
with two containers just splitting up

00:27:32,460 --> 00:27:37,610
the same same example as bad before but

00:27:34,529 --> 00:27:39,539
now over two containers and in cube

00:27:37,610 --> 00:27:44,190
dealing with both of them and should

00:27:39,539 --> 00:27:51,539
have stopped both of them as well hmm

00:27:44,190 --> 00:27:57,360
any questions are like yeah hmm well you

00:27:51,539 --> 00:28:00,269
could let's see you could technically in

00:27:57,360 --> 00:28:03,570
this file you can define instead of this

00:28:00,269 --> 00:28:06,659
property you can say MySQL for instance

00:28:03,570 --> 00:28:10,830
and then you can say wildfly but if you

00:28:06,659 --> 00:28:13,350
just say and I can cube when it tries to

00:28:10,830 --> 00:28:15,450
determine this order it will look at the

00:28:13,350 --> 00:28:17,399
links and so on as well so we will start

00:28:15,450 --> 00:28:20,340
things in parallel if you can but it

00:28:17,399 --> 00:28:23,779
needs one to be started pay for the

00:28:20,340 --> 00:28:27,330
other than they will yeah make sure that

00:28:23,779 --> 00:28:31,279
minus QL is up in hunting dip before the

00:28:27,330 --> 00:28:31,279
graphite one starts this is

00:28:31,380 --> 00:28:41,710
basically based on the which containers

00:28:37,750 --> 00:28:46,360
links which essentially figure it out

00:28:41,710 --> 00:28:51,910
okay that was observation pétain less so

00:28:46,360 --> 00:28:54,370
contain alice is what a arquillian

00:28:51,910 --> 00:28:56,410
container is but for a talker so you can

00:28:54,370 --> 00:28:59,140
deploy docker images you can deploy

00:28:56,410 --> 00:29:02,020
templates you can deploy it into a

00:28:59,140 --> 00:29:04,480
darker host essentially and that's where

00:29:02,020 --> 00:29:10,480
all the other alternative languages and

00:29:04,480 --> 00:29:12,990
and as servers come in so you define

00:29:10,480 --> 00:29:15,730
that to be the cube container less

00:29:12,990 --> 00:29:19,780
extension you want to add that this is

00:29:15,730 --> 00:29:22,800
our JavaScript application just tested

00:29:19,780 --> 00:29:25,510
simple rest api in the two thousand and

00:29:22,800 --> 00:29:27,100
then in the same fashion we have the

00:29:25,510 --> 00:29:31,330
deployment method but in this case we're

00:29:27,100 --> 00:29:34,870
actually deploying the doctor definition

00:29:31,330 --> 00:29:39,250
instead of a java application deployment

00:29:34,870 --> 00:29:43,260
to an app server and we on that we kind

00:29:39,250 --> 00:29:46,660
of have the same testing abilities

00:29:43,260 --> 00:29:49,060
moving down so there's a darker template

00:29:46,660 --> 00:29:51,040
it's instead of a docker file and i

00:29:49,060 --> 00:29:54,100
think the only variable with support /

00:29:51,040 --> 00:29:56,680
now is the deployable deployable high

00:29:54,100 --> 00:29:58,840
limb which is the content or it which is

00:29:56,680 --> 00:30:01,360
the tar file that's the output of that

00:29:58,840 --> 00:30:04,600
deployment method if you want to

00:30:01,360 --> 00:30:07,990
dynamically build up some kind of files

00:30:04,600 --> 00:30:11,920
to be added and automatically build this

00:30:07,990 --> 00:30:15,490
part of if it has sweet now you can sit

00:30:11,920 --> 00:30:18,820
in hacky in the I ID you can make

00:30:15,490 --> 00:30:21,880
changes make changes to the JavaScript

00:30:18,820 --> 00:30:25,600
application startup and start up the

00:30:21,880 --> 00:30:30,780
test case the image will be built with

00:30:25,600 --> 00:30:36,820
the JavaScript files on the ID and then

00:30:30,780 --> 00:30:39,400
start it up and yeah that's essentially

00:30:36,820 --> 00:30:41,340
the same as far as the configuration

00:30:39,400 --> 00:30:43,890
except that now you have a container

00:30:41,340 --> 00:30:46,170
skin coloration instead of the chameleon

00:30:43,890 --> 00:30:49,770
won't be so before and the cube format

00:30:46,170 --> 00:31:06,180
is the same just to see that runs as

00:30:49,770 --> 00:31:20,700
well does the NPM install nah don't

00:31:06,180 --> 00:31:26,340
worry no there's an MPN start right and

00:31:20,700 --> 00:31:28,140
here we're done so that's just the pure

00:31:26,340 --> 00:31:30,420
JavaScript application as opposed to a

00:31:28,140 --> 00:31:32,070
job app server or anything like that so

00:31:30,420 --> 00:31:35,040
that could be a Piton application it can

00:31:32,070 --> 00:31:39,110
be whatever running a bit short on time

00:31:35,040 --> 00:31:39,110
whatever not two minutes or something oh

00:31:39,380 --> 00:31:43,920
seven minutes okay so I'm gonna drop the

00:31:42,630 --> 00:31:47,970
last demo I'm going to show something

00:31:43,920 --> 00:31:55,650
that's brand new so new that it doesn't

00:31:47,970 --> 00:31:58,410
actually work yet so some of the

00:31:55,650 --> 00:32:01,710
inventors when you have a container

00:31:58,410 --> 00:32:04,170
rised system and you're controlling all

00:32:01,710 --> 00:32:05,880
the servers essentially all the

00:32:04,170 --> 00:32:08,220
different doctor containers is that you

00:32:05,880 --> 00:32:10,200
can also start to fiddle with didn't

00:32:08,220 --> 00:32:13,560
have to work and you can do all of these

00:32:10,200 --> 00:32:15,600
kind of magical things that you really

00:32:13,560 --> 00:32:18,770
haven't been able to test very easily

00:32:15,600 --> 00:32:22,710
unless you have some kind of vm system

00:32:18,770 --> 00:32:26,150
so the new extension to cube it's

00:32:22,710 --> 00:32:30,780
something called cube q.q from Star Trek

00:32:26,150 --> 00:32:32,730
also also note that is the entity that

00:32:30,780 --> 00:32:34,800
has the control over all space and time

00:32:32,730 --> 00:32:38,370
and everything right so that's what a

00:32:34,800 --> 00:32:41,750
cube essentially does q intercept your

00:32:38,370 --> 00:32:47,540
normal doctor composition setup and

00:32:41,750 --> 00:32:51,360
inserts foxes in every possible fashion

00:32:47,540 --> 00:32:53,549
so when you should have been reaching or

00:32:51,360 --> 00:32:57,179
container you actually big communicate

00:32:53,549 --> 00:32:59,460
with the proxy and then it comes to your

00:32:57,179 --> 00:33:02,399
container then that container talks to

00:32:59,460 --> 00:33:04,799
another server but there's a proxy in

00:33:02,399 --> 00:33:08,909
between so now we have control over all

00:33:04,799 --> 00:33:10,249
the different endpoints so that allows

00:33:08,909 --> 00:33:15,600
you to do things like this for instance

00:33:10,249 --> 00:33:18,239
you can say Q when this block of code

00:33:15,600 --> 00:33:21,720
executes and make sure that server one

00:33:18,239 --> 00:33:24,350
which is a our container any

00:33:21,720 --> 00:33:28,980
communication happens on port 80 85 will

00:33:24,350 --> 00:33:31,619
time out within five seconds and then

00:33:28,980 --> 00:33:37,169
you can see did my database driver

00:33:31,619 --> 00:33:42,210
actually handle it correctly did my rest

00:33:37,169 --> 00:33:44,029
service he connect and so on so we can

00:33:42,210 --> 00:33:49,159
run this now just to see how that looks

00:33:44,029 --> 00:33:51,960
still just ran as a normal test case

00:33:49,159 --> 00:33:54,869
it's a bit small probably but you can

00:33:51,960 --> 00:33:58,369
see the original configuration on top we

00:33:54,869 --> 00:34:01,279
have two servers there's one server that

00:33:58,369 --> 00:34:03,480
communicates the other and then the

00:34:01,279 --> 00:34:05,580
naproxen comes in then kind of all

00:34:03,480 --> 00:34:09,599
rights all the communication between

00:34:05,580 --> 00:34:14,220
them to go through itself and then you

00:34:09,599 --> 00:34:17,250
can programmatically control the

00:34:14,220 --> 00:34:20,339
communication flow between them so we've

00:34:17,250 --> 00:34:23,220
got a connection here's that exception

00:34:20,339 --> 00:34:26,869
because we told it to essentially do

00:34:23,220 --> 00:34:33,270
that and but of course you have other

00:34:26,869 --> 00:34:35,819
options on cue as well so you have you

00:34:33,270 --> 00:34:38,010
can set the bandwidth you can tell it to

00:34:35,819 --> 00:34:43,109
be just down you can set the hate and

00:34:38,010 --> 00:34:48,179
see and you can slice up all the package

00:34:43,109 --> 00:34:52,859
into much smaller bits and you can have

00:34:48,179 --> 00:34:57,960
a very slow too slow closed for instance

00:34:52,859 --> 00:35:00,930
I drew on the upstream or the downstream

00:34:57,960 --> 00:35:02,900
connection that kind of you so I gives

00:35:00,930 --> 00:35:11,210
you an extra level of an

00:35:02,900 --> 00:35:14,619
of control okay we dropped that one time

00:35:11,210 --> 00:35:16,490
done to them so what's coming

00:35:14,619 --> 00:35:20,150
accumulated is an operative three

00:35:16,490 --> 00:35:23,720
support we have kind of in the latest

00:35:20,150 --> 00:35:26,569
album releases more work would put into

00:35:23,720 --> 00:35:29,150
those also around the core OS and

00:35:26,569 --> 00:35:30,680
missiles as well so cube will be is

00:35:29,150 --> 00:35:33,650
essentially the article in the

00:35:30,680 --> 00:35:39,140
abstraction that deals with anything dr.

00:35:33,650 --> 00:35:42,109
E and it control over those let's get

00:35:39,140 --> 00:35:44,089
that one so if there's any next steps

00:35:42,109 --> 00:35:47,119
apart of figuring out what are Killian

00:35:44,089 --> 00:35:49,819
is and the part of our killing is to go

00:35:47,119 --> 00:35:55,400
to the arcane org website which has a

00:35:49,819 --> 00:35:56,960
lot of guides etc or you can join the

00:35:55,400 --> 00:36:01,760
discussion on discussed or giving the

00:35:56,960 --> 00:36:07,660
road and any questions are welcome of

00:36:01,760 --> 00:36:07,660
course anyone honey and yes that's me

00:36:12,260 --> 00:36:15,260
yes

00:36:27,430 --> 00:36:34,819
what exactly well as far as integration

00:36:31,099 --> 00:36:36,109
there now is it's you can use the

00:36:34,819 --> 00:36:37,670
container less container a special

00:36:36,109 --> 00:36:39,849
before you can deploy a docker image

00:36:37,670 --> 00:36:42,440
that you build or that you're creating

00:36:39,849 --> 00:36:44,690
locally push that to the overshift

00:36:42,440 --> 00:36:48,170
instance which will build that and start

00:36:44,690 --> 00:36:50,599
it up that's one face and the other one

00:36:48,170 --> 00:36:55,970
is to start in control pulse whichever

00:36:50,599 --> 00:36:57,980
apology want and yeah and I say

00:36:55,970 --> 00:37:01,970
essentially do the same thing it as you

00:36:57,980 --> 00:37:05,359
see here or that you saw here is just

00:37:01,970 --> 00:37:07,910
some extent works in open shift three

00:37:05,359 --> 00:37:09,650
now opportunity will also add on a bunch

00:37:07,910 --> 00:37:11,930
more stuff to it so you have more

00:37:09,650 --> 00:37:15,020
control over communicating through

00:37:11,930 --> 00:37:17,599
services setting up roots and all those

00:37:15,020 --> 00:37:20,690
kind of features as well but the basics

00:37:17,599 --> 00:37:22,309
as far as starting up an image an open

00:37:20,690 --> 00:37:25,630
shapes turning up multiple images the

00:37:22,309 --> 00:37:30,470
opposite doing the the orchestration

00:37:25,630 --> 00:37:33,520
parts of it and also building something

00:37:30,470 --> 00:37:41,540
in your project is also functioning as a

00:37:33,520 --> 00:37:45,490
alpha six awesome oh yes scarves scarves

00:37:41,540 --> 00:37:45,490
right scarves

00:37:51,660 --> 00:37:54,660
yes

00:37:59,790 --> 00:38:05,790
not currently we haven't done anything

00:38:02,310 --> 00:38:07,710
against this form yet but that's yeah

00:38:05,790 --> 00:38:10,560
that's something to explore then we're

00:38:07,710 --> 00:38:13,070
all the time so that would be thank you

00:38:10,560 --> 00:38:13,070

YouTube URL: https://www.youtube.com/watch?v=e353L7wuuMc


