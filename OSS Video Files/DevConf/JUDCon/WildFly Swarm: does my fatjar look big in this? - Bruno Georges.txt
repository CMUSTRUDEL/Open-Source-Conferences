Title: WildFly Swarm: does my fatjar look big in this? - Bruno Georges
Publication date: 2016-02-12
Playlist: JUDCon
Description: 
	Application servers are dead? We hear more and more than Linux containers, microservices and DevOps do away with the need for traditional Java application servers, particularly those based on Java EE. In this session we'll look at WildFly-swarm a subproject of WildFly, the leading open source Java application server. We'll see how the underlying architecture
allows WildFly to be trimmed down to give you Just Enough Application Server (JeAS?) and retain those key capabilities your application (or microservice) needs as well as creating a self-contained executable jar.

Presentation: http://bit.ly/1Tgv23G
Captions: 
	00:00:58,329 --> 00:01:09,200
so ladies and gentlemen please take

00:01:01,579 --> 00:01:12,979
seats please mute your mobile phones if

00:01:09,200 --> 00:01:17,210
possible don't forget to send some

00:01:12,979 --> 00:01:24,170
feedback as a feedback form here and the

00:01:17,210 --> 00:01:27,970
last / is important the next talk is

00:01:24,170 --> 00:01:30,830
going to be about XY swarm that's

00:01:27,970 --> 00:01:36,190
another exciting technology coming from

00:01:30,830 --> 00:01:41,929
jboss middleware the presenters are

00:01:36,190 --> 00:01:46,100
brutal Sebastian and George yeah can you

00:01:41,929 --> 00:01:50,229
hear me okay if if you don't understand

00:01:46,100 --> 00:01:54,229
my French accent you tell me you wave or

00:01:50,229 --> 00:01:56,630
so first thank you to sebastia and

00:01:54,229 --> 00:01:59,659
George I stole them this morning when I

00:01:56,630 --> 00:02:02,989
saw because a swarm and forge of things

00:01:59,659 --> 00:02:05,090
that are moving at a fast pace and and

00:02:02,989 --> 00:02:07,759
we've been out doing lots of work and

00:02:05,090 --> 00:02:10,039
and the George will tell you actually

00:02:07,759 --> 00:02:12,530
the work he's been doing actually just

00:02:10,039 --> 00:02:15,110
been merged two days ago so it's a right

00:02:12,530 --> 00:02:18,530
time to talk about it I wasn't planning

00:02:15,110 --> 00:02:20,629
Italy but he managed to get in and same

00:02:18,530 --> 00:02:23,629
for sebastian has been working actively

00:02:20,629 --> 00:02:26,810
on the project so thanks for you guys

00:02:23,629 --> 00:02:31,190
and i think you introduce yourself this

00:02:26,810 --> 00:02:36,709
morning so like Sebastian um I used to

00:02:31,190 --> 00:02:38,330
be French that's so I'm leaving a bra

00:02:36,709 --> 00:02:41,890
that work for way that for the last

00:02:38,330 --> 00:02:45,340
since 2007 I used to be a customer and

00:02:41,890 --> 00:02:48,110
now i joined the engineering team and

00:02:45,340 --> 00:02:50,120
i'm very happy there and we have

00:02:48,110 --> 00:02:52,580
fantastic guys from testing technology

00:02:50,120 --> 00:02:54,260
and fantastic project so it's very

00:02:52,580 --> 00:02:59,000
exciting we have lots of passion other

00:02:54,260 --> 00:03:01,670
way if you joined tim berg presentation

00:02:59,000 --> 00:03:03,440
this morning about rock stars and i

00:03:01,670 --> 00:03:05,269
think i can say a lot of the people in

00:03:03,440 --> 00:03:07,280
my team and people who are here that

00:03:05,269 --> 00:03:10,520
worked for jboss really fit in that

00:03:07,280 --> 00:03:12,560
profile actually check most of the boxes

00:03:10,520 --> 00:03:16,610
so it's great to be surrounded by by

00:03:12,560 --> 00:03:17,720
these profiles in these people maybe you

00:03:16,610 --> 00:03:20,750
can talk a little bit about yourself

00:03:17,720 --> 00:03:24,260
yeah for those who wear and add my talk

00:03:20,750 --> 00:03:28,310
Chrissy so I'm Sebastian I'm hot french

00:03:24,260 --> 00:03:31,940
and half dutch and i joined reddit three

00:03:28,310 --> 00:03:37,760
years ago and i'm under wed at mobile

00:03:31,940 --> 00:03:41,420
platform team and today i will talk

00:03:37,760 --> 00:03:44,120
about forging forum because i love to

00:03:41,420 --> 00:03:45,920
talk about other technologies and i

00:03:44,120 --> 00:03:49,600
talked about these technologies as a

00:03:45,920 --> 00:03:54,890
passionate user so it's really cool and

00:03:49,600 --> 00:03:57,380
George hello everybody my name is George

00:03:54,890 --> 00:04:02,920
I am the project lead of the jboss Forge

00:03:57,380 --> 00:04:09,950
project and I work in Red Hat since for

00:04:02,920 --> 00:04:14,570
2012 so three four years and well this

00:04:09,950 --> 00:04:18,370
is this is going to be great ok so today

00:04:14,570 --> 00:04:21,920
the presentation will be a mix of slides

00:04:18,370 --> 00:04:23,810
encode and also will have a few little

00:04:21,920 --> 00:04:27,740
questions throughout the ends but i'll

00:04:23,810 --> 00:04:29,690
keep the surprise but feel free to ask

00:04:27,740 --> 00:04:31,760
any I don't know if you have enough time

00:04:29,690 --> 00:04:36,620
with 40 minutes but if you feel like

00:04:31,760 --> 00:04:38,780
asking a question raise your hand so

00:04:36,620 --> 00:04:42,520
there's few sessions about micro

00:04:38,780 --> 00:04:45,410
services today but containers but

00:04:42,520 --> 00:04:47,690
evolution but lots of things that you

00:04:45,410 --> 00:04:49,630
know moving into that direction but for

00:04:47,690 --> 00:04:51,950
is it's a it's an evolution

00:04:49,630 --> 00:04:54,350
microservices is something that existed

00:04:51,950 --> 00:04:56,630
if you seen the second session this

00:04:54,350 --> 00:04:59,210
morning with mr. Miller it started

00:04:56,630 --> 00:05:01,130
actually with microkernel in the 80s

00:04:59,210 --> 00:05:04,370
really had the low end of the stack on

00:05:01,130 --> 00:05:06,290
the under linux side and but we're

00:05:04,370 --> 00:05:09,260
looking more at the higher end of the

00:05:06,290 --> 00:05:11,600
stack today so more and really at the

00:05:09,260 --> 00:05:15,530
web frameworks level at the application

00:05:11,600 --> 00:05:18,290
level and one of the purpose of that

00:05:15,530 --> 00:05:21,320
talk today is how we've transitioned

00:05:18,290 --> 00:05:23,540
from traditional and we can record some

00:05:21,320 --> 00:05:24,770
time on elite applications

00:05:23,540 --> 00:05:27,710
and where are we today with

00:05:24,770 --> 00:05:30,980
microservices we're not going to spend

00:05:27,710 --> 00:05:33,200
too much time on the on so our top

00:05:30,980 --> 00:05:36,640
applications but we're focusing more on

00:05:33,200 --> 00:05:42,620
you know immutable infrastructure

00:05:36,640 --> 00:05:46,190
microservices and containers okay this

00:05:42,620 --> 00:05:50,960
morning Sebastian are presented author

00:05:46,190 --> 00:05:53,240
and book store applications will use

00:05:50,960 --> 00:05:55,450
that as a traditional applications you

00:05:53,240 --> 00:05:58,190
know something you deploy as a single

00:05:55,450 --> 00:06:01,460
artifacts in an application server and

00:05:58,190 --> 00:06:05,240
we'll take you through what it takes to

00:06:01,460 --> 00:06:06,980
actually to swap my app yeah so the word

00:06:05,240 --> 00:06:09,620
tech will take you through these steps

00:06:06,980 --> 00:06:11,480
and we also explain you actually a

00:06:09,620 --> 00:06:14,660
little bit of the notions beyond

00:06:11,480 --> 00:06:17,870
microservices and also what are the

00:06:14,660 --> 00:06:21,440
constituents behind swarm what what it

00:06:17,870 --> 00:06:22,820
what is warm exactly a little bit of

00:06:21,440 --> 00:06:25,760
them on the characteristics of

00:06:22,820 --> 00:06:28,430
microservices definitely about

00:06:25,760 --> 00:06:31,840
decoupling independent release cycles

00:06:28,430 --> 00:06:34,610
what do we mean by that is actually very

00:06:31,840 --> 00:06:36,860
often in agile groups actually we will

00:06:34,610 --> 00:06:39,200
see more and more feet with the

00:06:36,860 --> 00:06:44,090
microservices characteristic there

00:06:39,200 --> 00:06:47,090
because to team p2p teams will work on

00:06:44,090 --> 00:06:50,120
maybe of an accounting service another

00:06:47,090 --> 00:06:53,480
one we work on billing or OSS BSS top

00:06:50,120 --> 00:06:55,550
step and these things actually have a

00:06:53,480 --> 00:06:57,980
different release cycles and very often

00:06:55,550 --> 00:07:00,050
there is actually a restraint that's

00:06:57,980 --> 00:07:01,910
blocked because in a monolithic word

00:07:00,050 --> 00:07:04,430
because these things have to wait or

00:07:01,910 --> 00:07:07,870
there's an dependencies but

00:07:04,430 --> 00:07:10,520
microservices allow you to break that

00:07:07,870 --> 00:07:12,860
it's not about the amount of line of

00:07:10,520 --> 00:07:16,070
code it's more about the functionality

00:07:12,860 --> 00:07:18,230
you know function T that then caps rated

00:07:16,070 --> 00:07:19,520
that do one thing and do it well is

00:07:18,230 --> 00:07:21,080
something as I mentioned before that

00:07:19,520 --> 00:07:22,490
takes been existing for a long time I

00:07:21,080 --> 00:07:24,950
don't know if you've done some credit

00:07:22,490 --> 00:07:26,630
checking when you write applications you

00:07:24,950 --> 00:07:28,570
know there is dun and Bradstreet there's

00:07:26,630 --> 00:07:31,370
a lot of credit checking applicator

00:07:28,570 --> 00:07:33,590
providers they used to do that I

00:07:31,370 --> 00:07:37,090
remember when I was doing a ecommerce

00:07:33,590 --> 00:07:39,490
app in 2000's you could access them for

00:07:37,090 --> 00:07:41,440
xml-rpc or web service is already so

00:07:39,490 --> 00:07:43,900
that's that's a micro service you know

00:07:41,440 --> 00:07:46,270
you could sell also the what-if scenario

00:07:43,900 --> 00:07:48,550
that you have running on the dll you can

00:07:46,270 --> 00:07:51,850
export it to schwab and others brought

00:07:48,550 --> 00:07:54,340
other brokers through web protocols so

00:07:51,850 --> 00:07:56,770
that's the notion of web service is not

00:07:54,340 --> 00:07:59,380
tied to technology is a at your language

00:07:56,770 --> 00:08:01,930
but is definitely something that is

00:07:59,380 --> 00:08:04,240
self-contained and that executes one

00:08:01,930 --> 00:08:07,449
function it's not about the amount of

00:08:04,240 --> 00:08:11,080
code you are behind it and scale

00:08:07,449 --> 00:08:14,229
independently of course so again about

00:08:11,080 --> 00:08:15,910
size it's a lot of people say okay it

00:08:14,229 --> 00:08:18,700
shouldn't be longer than 100 lines of

00:08:15,910 --> 00:08:20,440
code and that's that's that's I'm not

00:08:18,700 --> 00:08:24,220
gonna use the word that's the BS

00:08:20,440 --> 00:08:26,260
basically so you see here actually in

00:08:24,220 --> 00:08:30,400
some of the the micro services will be

00:08:26,260 --> 00:08:33,580
showing later is actually very small but

00:08:30,400 --> 00:08:34,810
doesn't doesn't mean that it has to stay

00:08:33,580 --> 00:08:36,820
that way sometimes you have lots of

00:08:34,810 --> 00:08:39,150
functionality sometimes you bring lots

00:08:36,820 --> 00:08:42,490
of dependencies although libraries okay

00:08:39,150 --> 00:08:47,140
so it doesn't mean microservice means

00:08:42,490 --> 00:08:49,600
micro sized containers are becoming very

00:08:47,140 --> 00:08:52,060
popular we've done and we have lots of

00:08:49,600 --> 00:08:55,570
documentation online we have done some

00:08:52,060 --> 00:09:01,209
microservices architecture based on EAP

00:08:55,570 --> 00:09:03,850
six so primarily deploying using

00:09:01,209 --> 00:09:06,760
containers as a deployment mechanism to

00:09:03,850 --> 00:09:09,490
deploy those kind of capabilities today

00:09:06,760 --> 00:09:14,529
we will show you actually that not only

00:09:09,490 --> 00:09:19,660
you can run with the de facto a

00:09:14,529 --> 00:09:24,790
container solution today a docker but

00:09:19,660 --> 00:09:27,779
also you can run it without docker swarm

00:09:24,790 --> 00:09:31,120
actually is a perfect fit for that and

00:09:27,779 --> 00:09:33,930
swamp actually encapsulate things like

00:09:31,120 --> 00:09:36,730
and we'll show you in the demo

00:09:33,930 --> 00:09:40,120
capabilities that you know like typical

00:09:36,730 --> 00:09:41,950
typical like SSO I DM is not just

00:09:40,120 --> 00:09:45,490
providing an app it could be back and

00:09:41,950 --> 00:09:47,079
services okay so we'll take will take

00:09:45,490 --> 00:09:49,760
you through that so not everyone wants

00:09:47,079 --> 00:09:52,580
to use no GI theater so it does but

00:09:49,760 --> 00:09:55,730
and the reason is lots of there's a lot

00:09:52,580 --> 00:09:57,320
of investments in Java EE you know so

00:09:55,730 --> 00:09:59,480
today is actually a great window of

00:09:57,320 --> 00:10:02,650
opportunities for a number of companies

00:09:59,480 --> 00:10:06,320
that want to modernize the Java EE

00:10:02,650 --> 00:10:08,810
applications so and again if I take the

00:10:06,320 --> 00:10:11,500
first slides how do you what is the

00:10:08,810 --> 00:10:13,940
journey to take your existing II

00:10:11,500 --> 00:10:17,030
applications do you actually move them

00:10:13,940 --> 00:10:18,350
to modern infrastructure to decom so

00:10:17,030 --> 00:10:21,590
we'll take through the notion of the

00:10:18,350 --> 00:10:24,500
compositions and also run them into

00:10:21,590 --> 00:10:26,660
thinking single executable jar so that's

00:10:24,500 --> 00:10:31,040
one of the the advantage of white flies

00:10:26,660 --> 00:10:33,860
wall here so stripping down EAP why fly

00:10:31,040 --> 00:10:35,360
is quite common so very often you see

00:10:33,860 --> 00:10:36,950
applications and I don't know many of

00:10:35,360 --> 00:10:39,170
you probably that you write an app

00:10:36,950 --> 00:10:41,660
you'll probably just need GPA Jack sighs

00:10:39,170 --> 00:10:44,690
and sometimes jsf of course for

00:10:41,660 --> 00:10:47,180
presentations but those those sets of

00:10:44,690 --> 00:10:51,800
capabilities are you know not the entire

00:10:47,180 --> 00:10:54,560
East ack so you really want to to to

00:10:51,800 --> 00:10:56,930
have the ability to run in a higher

00:10:54,560 --> 00:10:59,090
density environment to especially when

00:10:56,930 --> 00:11:01,010
you run on clouds or you know different

00:10:59,090 --> 00:11:06,620
environments you you need to actually

00:11:01,010 --> 00:11:09,110
deploy just what you need okay good so

00:11:06,620 --> 00:11:11,690
we've we've seen actually a evolution

00:11:09,110 --> 00:11:14,000
around the deployment mechanism so we

00:11:11,690 --> 00:11:16,490
want to run our application not just as

00:11:14,000 --> 00:11:18,410
a moderate application we want to be

00:11:16,490 --> 00:11:21,200
able to decompose them we talked about

00:11:18,410 --> 00:11:22,970
with different release cycles we talked

00:11:21,200 --> 00:11:26,000
also about different deployment model

00:11:22,970 --> 00:11:28,550
sometimes on docker maybe on OpenStack

00:11:26,000 --> 00:11:29,900
on openshift but from a developer

00:11:28,550 --> 00:11:34,010
perspective you shouldn't be affected

00:11:29,900 --> 00:11:36,860
with that okay so suami lawyers 02 to

00:11:34,010 --> 00:11:38,690
deploy artifacts in any environment you

00:11:36,860 --> 00:11:41,810
think of you can actually deploy them

00:11:38,690 --> 00:11:44,300
whether as a wall you can still deploy

00:11:41,810 --> 00:11:47,000
your not java ee co-located with other

00:11:44,300 --> 00:11:49,640
services or you can run them separately

00:11:47,000 --> 00:11:53,480
in a docker instance or an open shift or

00:11:49,640 --> 00:11:56,150
anywhere else and invoke them so that's

00:11:53,480 --> 00:11:59,660
one of the one of the the constituents

00:11:56,150 --> 00:12:03,350
that we've been looking into that's a

00:11:59,660 --> 00:12:06,290
slide that Margot are presented in 2010

00:12:03,350 --> 00:12:10,400
remember if you look at the follow up

00:12:06,290 --> 00:12:12,740
our keynotes and read at summit and at

00:12:10,400 --> 00:12:16,700
that time in 2010 is when we actually

00:12:12,740 --> 00:12:21,680
reacted collected a s5 and s6 two is

00:12:16,700 --> 00:12:23,840
seven and one of the bigger change was

00:12:21,680 --> 00:12:27,100
around the micro service called modular

00:12:23,840 --> 00:12:30,320
service container especially around the

00:12:27,100 --> 00:12:33,590
dependency resolution mechanism but also

00:12:30,320 --> 00:12:45,320
the modularity so we started already to

00:12:33,590 --> 00:12:47,930
do that work you know like with yes yes

00:12:45,320 --> 00:12:50,360
so you can actually just have a gb as a

00:12:47,930 --> 00:12:53,890
dependency and you just catch that and

00:12:50,360 --> 00:12:53,890
run it as an executable job

00:13:11,710 --> 00:13:18,770
so you so you're talking about the

00:13:16,700 --> 00:13:21,440
interaction are you do you have inter

00:13:18,770 --> 00:13:28,930
process communication so into micro

00:13:21,440 --> 00:13:28,930
service yeah

00:13:35,060 --> 00:13:40,230
yeah so we are we preserve that level of

00:13:38,130 --> 00:13:43,950
isolation so actually whiteflies swarm

00:13:40,230 --> 00:13:46,260
is a subset of we keep the wife like all

00:13:43,950 --> 00:13:48,450
and we bring those dependencies and we

00:13:46,260 --> 00:13:50,730
wire those dependencies on demand and

00:13:48,450 --> 00:13:52,470
you're seeing the demo actually we they

00:13:50,730 --> 00:13:54,660
will actually we call them fractions

00:13:52,470 --> 00:13:58,110
thank you so you bring those

00:13:54,660 --> 00:13:59,490
capabilities that you need if you don't

00:13:58,110 --> 00:14:01,110
need to bring so we've done that work

00:13:59,490 --> 00:14:03,390
okay what'd you just say we actually

00:14:01,110 --> 00:14:05,820
started to have that demand we wanted

00:14:03,390 --> 00:14:08,490
actually with the evolution of you know

00:14:05,820 --> 00:14:10,680
we were not just deploying on servers

00:14:08,490 --> 00:14:12,840
we're deploying on different environment

00:14:10,680 --> 00:14:15,450
and with the cloud with the open ship we

00:14:12,840 --> 00:14:17,880
couldn't we had to rethink our footprint

00:14:15,450 --> 00:14:20,250
you know we had to change our know up

00:14:17,880 --> 00:14:22,050
the way we we assemble those

00:14:20,250 --> 00:14:27,470
capabilities and give choice to

00:14:22,050 --> 00:14:30,480
developers to bring what they need ok so

00:14:27,470 --> 00:14:33,030
what flights warm we call it also just

00:14:30,480 --> 00:14:36,390
enough observer as you mentioned maybe

00:14:33,030 --> 00:14:39,930
you just need I remember when we when I

00:14:36,390 --> 00:14:42,060
was a customer we used to do end of day

00:14:39,930 --> 00:14:45,510
processing for our booking so all our

00:14:42,060 --> 00:14:47,700
trades and for each of them we actually

00:14:45,510 --> 00:14:51,300
add a kind of a worker farmer situation

00:14:47,700 --> 00:14:54,030
and we will spin an instance with we

00:14:51,300 --> 00:14:56,280
just need messaging and JPA basically so

00:14:54,030 --> 00:14:58,350
we get orders and we book them and we

00:14:56,280 --> 00:15:00,690
with dehydrate and database we were

00:14:58,350 --> 00:15:03,720
starting a weblogic server for weblogic

00:15:00,690 --> 00:15:05,220
server every time here you just don't

00:15:03,720 --> 00:15:08,070
need that anymore now we're talking

00:15:05,220 --> 00:15:10,440
about few few tens of megabytes versus

00:15:08,070 --> 00:15:12,420
one point five gigabytes every time okay

00:15:10,440 --> 00:15:15,000
so when you look at especially when you

00:15:12,420 --> 00:15:18,810
do end of day processing in the trading

00:15:15,000 --> 00:15:21,210
environment it's a huge amount of of you

00:15:18,810 --> 00:15:22,980
know you churning lots of data and when

00:15:21,210 --> 00:15:24,900
you when you look at how many instance

00:15:22,980 --> 00:15:26,910
you want to spin you know it's the

00:15:24,900 --> 00:15:30,080
difference between two megabytes and the

00:15:26,910 --> 00:15:33,490
gigabyte is you know your seat quickly

00:15:30,080 --> 00:15:36,670
it can change from hours and

00:15:33,490 --> 00:15:38,860
the one thatís center cost you can

00:15:36,670 --> 00:15:44,230
reduce that by a fraction of your 10

00:15:38,860 --> 00:15:49,620
fold at least so we use a lot of the

00:15:44,230 --> 00:15:51,880
existing a wife lie on the AP in some of

00:15:49,620 --> 00:15:57,220
self content services without wrapping

00:15:51,880 --> 00:15:58,990
it all in dokur we also have a as I

00:15:57,220 --> 00:16:01,510
mentioned earlier that's something we've

00:15:58,990 --> 00:16:06,209
done in 2009 with is seven so weary

00:16:01,510 --> 00:16:09,040
architected to make it possible as

00:16:06,209 --> 00:16:11,200
Sebastian mentioned this morning we

00:16:09,040 --> 00:16:14,589
follow the principle as the convention

00:16:11,200 --> 00:16:16,540
of our configurations we'll see actually

00:16:14,589 --> 00:16:21,540
later how we bring those dependencies in

00:16:16,540 --> 00:16:24,130
mail in pop that XML from maven and

00:16:21,540 --> 00:16:25,839
again we're trying to lower the barrier

00:16:24,130 --> 00:16:28,000
of entry so how do you want to be

00:16:25,839 --> 00:16:29,860
productive you know if you if you want

00:16:28,000 --> 00:16:31,420
to create a micro services it shouldn't

00:16:29,860 --> 00:16:35,800
be more effort actually it's a very

00:16:31,420 --> 00:16:38,860
simple exercise it's not just job IE or

00:16:35,800 --> 00:16:41,260
so so how do you cluster those services

00:16:38,860 --> 00:16:44,079
so we bring also other works other other

00:16:41,260 --> 00:16:47,860
contributions from netflix OSS so like

00:16:44,079 --> 00:16:50,050
we bond hystrix and also log stash so

00:16:47,860 --> 00:16:56,140
how do you monitor all those services

00:16:50,050 --> 00:17:01,510
together water ah so a spec way could be

00:16:56,140 --> 00:17:02,980
useful building e application with

00:17:01,510 --> 00:17:05,650
limited capabilities that gave the

00:17:02,980 --> 00:17:10,329
example we just need em messaging and

00:17:05,650 --> 00:17:15,429
JPA or Jack sighs and JPA or jsf you

00:17:10,329 --> 00:17:18,100
need also a number of mechanism like

00:17:15,429 --> 00:17:20,650
class loading handling you know like oh

00:17:18,100 --> 00:17:23,800
we brought the notions that are close to

00:17:20,650 --> 00:17:27,850
HDI in a 7 so you know classf loading

00:17:23,800 --> 00:17:29,710
oscillation modularity etc I'm not going

00:17:27,850 --> 00:17:34,660
to go into the flat path description but

00:17:29,710 --> 00:17:36,429
leave that later but basically the goals

00:17:34,660 --> 00:17:38,679
are deafening around multi-tenancy and

00:17:36,429 --> 00:17:40,960
higher density and share CVC so that's

00:17:38,679 --> 00:17:45,100
one of the the foundation of the work

00:17:40,960 --> 00:17:47,049
we've done again as a as a

00:17:45,100 --> 00:17:50,169
representation so white

00:17:47,049 --> 00:17:52,539
I when you create your jaw you basically

00:17:50,169 --> 00:17:55,239
you bring only what you need as opposed

00:17:52,539 --> 00:17:57,639
to Anna normal container where you if

00:17:55,239 --> 00:17:59,529
you just in Jack sighs you still bring a

00:17:57,639 --> 00:18:04,299
number of unuse part even if they're not

00:17:59,529 --> 00:18:08,080
wire that run time because with is since

00:18:04,299 --> 00:18:13,059
is seven we do those resolutions at

00:18:08,080 --> 00:18:15,190
runtime but they still there so by

00:18:13,059 --> 00:18:17,919
default we provide the main but you can

00:18:15,190 --> 00:18:20,379
override it so I'll show you a simple

00:18:17,919 --> 00:18:22,330
example and you don't have to touch the

00:18:20,379 --> 00:18:23,679
a standard standard XML although some

00:18:22,330 --> 00:18:27,549
people have requested it and I think

00:18:23,679 --> 00:18:29,889
that's something we we can do so others

00:18:27,549 --> 00:18:34,980
it work so typically when you do Jack

00:18:29,889 --> 00:18:39,600
sighs resource is a very simple

00:18:34,980 --> 00:18:44,129
construct that's in a normal e6

00:18:39,600 --> 00:18:49,799
container that's with white flies warm

00:18:44,129 --> 00:18:52,659
okay same person so spot the difference

00:18:49,799 --> 00:18:54,399
so here there's actually no difference

00:18:52,659 --> 00:18:56,799
we swarm you actually don't change your

00:18:54,399 --> 00:18:59,889
code as what I mentioned before there's

00:18:56,799 --> 00:19:03,639
a that's we've made sure that actually

00:18:59,889 --> 00:19:05,499
the code you've already what you want to

00:19:03,639 --> 00:19:07,539
decompose that application that are and

00:19:05,499 --> 00:19:09,399
modernize it in not gonna do we don't

00:19:07,539 --> 00:19:13,830
want you to touch that code so those

00:19:09,399 --> 00:19:16,659
those changes will revolve mostly around

00:19:13,830 --> 00:19:19,889
maven so maven will bring a new plug-in

00:19:16,659 --> 00:19:19,889
so it just with a package

00:19:20,240 --> 00:19:29,130
goal so you can realize as a water jar

00:19:24,060 --> 00:19:34,320
we also bring the fractions so before

00:19:29,130 --> 00:19:37,010
you add the jpa dependency you just

00:19:34,320 --> 00:19:40,380
actually call wife light bring the

00:19:37,010 --> 00:19:43,170
dependency or wife lies warm so we have

00:19:40,380 --> 00:19:45,180
actually we name them fraction so you

00:19:43,170 --> 00:19:48,960
bring those capabilities that you had on

00:19:45,180 --> 00:19:51,540
white fly and also project like OSS net

00:19:48,960 --> 00:19:54,090
fix OSS you bring them you can also

00:19:51,540 --> 00:19:56,190
bring the full server which will show

00:19:54,090 --> 00:20:01,080
you that we all need to to accelerate

00:19:56,190 --> 00:20:03,590
but you can bring SSO IDM server as a

00:20:01,080 --> 00:20:08,250
fraction as other capabilities and

00:20:03,590 --> 00:20:09,510
Sebastian will demonstrate that so we

00:20:08,250 --> 00:20:11,910
have fractions are wiped flight

00:20:09,510 --> 00:20:13,470
subsystem whitefly everyone knows why

00:20:11,910 --> 00:20:16,320
fine I've been talking about the wife

00:20:13,470 --> 00:20:19,860
liar assume everyone so it's our app

00:20:16,320 --> 00:20:22,340
server so all these subsystems are

00:20:19,860 --> 00:20:27,300
brought as fractions so they define as

00:20:22,340 --> 00:20:30,600
module four jars and they define end

00:20:27,300 --> 00:20:32,520
they also bring all the transitive

00:20:30,600 --> 00:20:34,980
dependencies ways much cleaner for the

00:20:32,520 --> 00:20:37,020
for the developer so if you if you bring

00:20:34,980 --> 00:20:39,390
a jak sie CDI then they'll bring off

00:20:37,020 --> 00:20:44,400
post Jack sighs and same same for the

00:20:39,390 --> 00:20:47,310
rest so that's the list of the current

00:20:44,400 --> 00:20:50,790
and I think it's even is going so it's

00:20:47,310 --> 00:20:54,660
probably even bigger now but even it's

00:20:50,790 --> 00:20:59,100
not just about the typical II subsystem

00:20:54,660 --> 00:21:02,670
and you find in why fly but it's non one

00:20:59,100 --> 00:21:06,060
fly also around just as I said before

00:21:02,670 --> 00:21:08,670
the the netflix OSS contribution but

00:21:06,060 --> 00:21:11,060
also reactive java and reactive Nettie

00:21:08,670 --> 00:21:14,760
so net is a project or so we've been

00:21:11,060 --> 00:21:20,160
contributing heavily with trust in and

00:21:14,760 --> 00:21:22,710
and a norman i mentioned you can also

00:21:20,160 --> 00:21:24,480
override your main so by default when

00:21:22,710 --> 00:21:27,180
you build the swarm application it will

00:21:24,480 --> 00:21:30,600
it's a it's it will boost trap for your

00:21:27,180 --> 00:21:33,360
main 99% of the case that's enough for

00:21:30,600 --> 00:21:35,820
you but you can also override it so

00:21:33,360 --> 00:21:40,260
bring all the capabilities maybe your

00:21:35,820 --> 00:21:43,110
own fractions that's an example for

00:21:40,260 --> 00:21:45,150
example I think that's something you've

00:21:43,110 --> 00:21:47,490
done to secure and to protect a rest

00:21:45,150 --> 00:21:49,740
endpoint here yeah yeah maybe you can

00:21:47,490 --> 00:21:52,500
talk about this oh yeah that was just I

00:21:49,740 --> 00:21:56,640
was showing in our in six lines of code

00:21:52,500 --> 00:22:00,030
you can deploy your micro service with

00:21:56,640 --> 00:22:05,250
farm and secure it so basically we start

00:22:00,030 --> 00:22:10,950
a new container we say we want to have

00:22:05,250 --> 00:22:13,440
jax-rs we add our West class that I

00:22:10,950 --> 00:22:15,510
don't show you and then we say we deploy

00:22:13,440 --> 00:22:18,929
it and we secure it and we protect this

00:22:15,510 --> 00:22:21,840
path with the gap matej we have to get

00:22:18,929 --> 00:22:24,120
the wall admin contain the start okay

00:22:21,840 --> 00:22:25,620
you just double click it will deploy

00:22:24,120 --> 00:22:29,280
this micro service and it will be

00:22:25,620 --> 00:22:34,080
protected there's just small example and

00:22:29,280 --> 00:22:36,690
oh it's perfect timing its timing so I

00:22:34,080 --> 00:22:38,429
didn't mean to you yeah yeah perfect I'm

00:22:36,690 --> 00:22:41,940
it was out me ask you to stop talking

00:22:38,429 --> 00:22:43,710
but so I'm going to hand over to for the

00:22:41,940 --> 00:22:45,390
code because we actually I don't have

00:22:43,710 --> 00:22:47,730
much time I think the bigger value is

00:22:45,390 --> 00:22:52,110
actually when you see it in action so

00:22:47,730 --> 00:22:55,500
alone yeah Oh George we have 18 minutes

00:22:52,110 --> 00:22:58,650
to build an all-school up from that we

00:22:55,500 --> 00:23:02,790
will extract microservice we work for me

00:22:58,650 --> 00:23:09,169
fired and we will secure it do you think

00:23:02,790 --> 00:23:13,309
we can do it okay grab my my cheat sheet

00:23:09,169 --> 00:23:17,880
okay of course we will be using Sun

00:23:13,309 --> 00:23:21,570
porch and then let's start by creating

00:23:17,880 --> 00:23:24,150
and a bookstore app for those who are

00:23:21,570 --> 00:23:27,120
here this morning it's pretty simple app

00:23:24,150 --> 00:23:30,030
you have a book you have an utter and us

00:23:27,120 --> 00:23:33,690
also an offer class so to provide

00:23:30,030 --> 00:23:36,510
special offers to do that we just run a

00:23:33,690 --> 00:23:39,330
script a4 script that will just create

00:23:36,510 --> 00:23:42,330
20 app for us because it's not within

00:23:39,330 --> 00:23:45,480
the scope of farm though this is just to

00:23:42,330 --> 00:23:47,220
show you how nice for jizz and by the

00:23:45,480 --> 00:23:49,110
way at the end of the talk we

00:23:47,220 --> 00:23:51,230
or treat a guest containing all the

00:23:49,110 --> 00:23:57,870
scripts out 2nite you can play with it

00:23:51,230 --> 00:24:03,480
now here is creating the app for us okay

00:23:57,870 --> 00:24:08,250
here this classic java application we

00:24:03,480 --> 00:24:11,610
can deploy it it has been just even a UI

00:24:08,250 --> 00:24:15,030
doesnt mean scaffolded so let's deploy

00:24:11,610 --> 00:24:19,470
that to the classic way to a rough like

00:24:15,030 --> 00:24:21,960
server that is running oh it's deployed

00:24:19,470 --> 00:24:29,900
okay let's just take a quick look at the

00:24:21,960 --> 00:24:34,049
app bookstore awesome we got authors

00:24:29,900 --> 00:24:36,530
books and create create offers it took

00:24:34,049 --> 00:24:41,390
you 40 minutes without this morning yeah

00:24:36,530 --> 00:24:44,630
script had to explain each step so

00:24:41,390 --> 00:24:48,419
that's it we have our appt classic app

00:24:44,630 --> 00:24:50,700
now the thing we have to offer we want

00:24:48,419 --> 00:24:54,120
to extract that as a micro service

00:24:50,700 --> 00:24:57,330
because other application need to

00:24:54,120 --> 00:24:59,280
consume that and we want to be able to

00:24:57,330 --> 00:25:02,669
extract that as a micro service and

00:24:59,280 --> 00:25:05,190
since offer is quite simple it's a maybe

00:25:02,669 --> 00:25:07,320
you can show it we just have to to fuel

00:25:05,190 --> 00:25:10,440
the description and a name let's start

00:25:07,320 --> 00:25:12,720
from scratch let's start create the

00:25:10,440 --> 00:25:15,179
micro service from scratch so you are we

00:25:12,720 --> 00:25:17,850
moving away from a traditional model

00:25:15,179 --> 00:25:21,900
adapt to actually stop decomposing it

00:25:17,850 --> 00:25:26,280
yeah so with words creating a new

00:25:21,900 --> 00:25:33,450
project is easy as project new we call

00:25:26,280 --> 00:25:38,010
it offer and first thing we will do is

00:25:33,450 --> 00:25:40,530
add the swarm Adam that will means we

00:25:38,010 --> 00:25:43,370
Channing for stats we want to use swarm

00:25:40,530 --> 00:25:48,299
so first change that it will do is

00:25:43,370 --> 00:25:54,659
change our pump XML to add the swarm

00:25:48,299 --> 00:25:57,030
plug-in and everything everything evil

00:25:54,659 --> 00:25:58,980
force will be listening to any changes

00:25:57,030 --> 00:26:01,860
that we are making to the code

00:25:58,980 --> 00:26:06,690
and what we're going to do now is add a

00:26:01,860 --> 00:26:09,000
new entity so great either you see the

00:26:06,690 --> 00:26:12,600
added fraction automatically yeah

00:26:09,000 --> 00:26:16,590
detected the actually the e api's and

00:26:12,600 --> 00:26:20,390
created fractions for it okay so let's

00:26:16,590 --> 00:26:24,570
add a new entity and we call it offer

00:26:20,390 --> 00:26:28,950
okay here we go and here you can see

00:26:24,570 --> 00:26:32,400
that form the swarm fraction jpa has

00:26:28,950 --> 00:26:36,990
been installed so we have nothing maybe

00:26:32,400 --> 00:26:39,780
you can show the bum just to show that

00:26:36,990 --> 00:26:41,730
the fraction has been added on the fly

00:26:39,780 --> 00:26:46,080
so you don't have to care about that we

00:26:41,730 --> 00:26:49,549
the first plug-in do that for you do we

00:26:46,080 --> 00:26:58,220
have we need to add some fields to our

00:26:49,549 --> 00:27:03,419
offer class so a name and description

00:26:58,220 --> 00:27:06,419
okay yeah now we have to generate the

00:27:03,419 --> 00:27:10,770
west end point for this offer so that's

00:27:06,419 --> 00:27:13,790
just one command as generate I'm point

00:27:10,770 --> 00:27:18,480
from entity and here we point to our

00:27:13,790 --> 00:27:23,400
offer class so and here we go we got our

00:27:18,480 --> 00:27:25,980
jax-rs end point since web apps will be

00:27:23,400 --> 00:27:28,799
consuming it we have to add course

00:27:25,980 --> 00:27:40,700
support but I'm sure for just something

00:27:28,799 --> 00:27:40,700
for that yeah cool okay

00:27:45,169 --> 00:27:55,169
Jack's arrest and we are done with our

00:27:51,059 --> 00:27:58,340
micro service and we can build yeah we

00:27:55,169 --> 00:28:14,639
can win it built the driver first so

00:27:58,340 --> 00:28:18,809
here so this will go build a jar and

00:28:14,639 --> 00:28:21,210
will execute the jar the Wildflower jar

00:28:18,809 --> 00:28:23,070
and then whiteflies swamp Rogan has been

00:28:21,210 --> 00:28:25,769
added when you did the water flood setup

00:28:23,070 --> 00:28:27,509
but in any time if you do a maven clean

00:28:25,769 --> 00:28:30,059
and soul it will create the jar for you

00:28:27,509 --> 00:28:32,249
but it will also create a classic war

00:28:30,059 --> 00:28:34,499
valve so if you still want to deploy

00:28:32,249 --> 00:28:36,749
that in your wife like server you can

00:28:34,499 --> 00:28:40,710
also use the War artifact but here we

00:28:36,749 --> 00:28:48,389
are running the jar it's like we could

00:28:40,710 --> 00:28:53,509
double-click the jar on Windows now ok

00:28:48,389 --> 00:29:00,239
let's take a look if if our

00:28:53,509 --> 00:29:04,710
microservices deployed is empty response

00:29:00,239 --> 00:29:10,830
since we didn't have any dated oh yeah

00:29:04,710 --> 00:29:12,869
you prepared a small a small a SQL

00:29:10,830 --> 00:29:16,409
script just to create some offers so we

00:29:12,869 --> 00:29:20,820
have some content oh this one and you

00:29:16,409 --> 00:29:26,940
just have to run it again I so maybe you

00:29:20,820 --> 00:29:32,099
can show with java jar or okay just to

00:29:26,940 --> 00:29:34,109
show the difference so here is you can

00:29:32,099 --> 00:29:39,509
see that he's making the war file but

00:29:34,109 --> 00:29:42,269
under the hood is also made the the jar

00:29:39,509 --> 00:29:44,779
file so if goat in the target we can see

00:29:42,269 --> 00:29:50,029
if maybe can increase the bits of funds

00:29:44,779 --> 00:29:52,830
until ship this yeah so we got our offer

00:29:50,029 --> 00:29:55,259
sore arm jar and we can just execute

00:29:52,830 --> 00:29:57,510
that as a as a jerk so it's just a java

00:29:55,259 --> 00:30:04,900
jar target

00:29:57,510 --> 00:30:07,450
Doctore of course we can run many of

00:30:04,900 --> 00:30:10,120
them we can do pass the port offset like

00:30:07,450 --> 00:30:12,460
in white fly we can also run them with

00:30:10,120 --> 00:30:14,560
Netflix ribbon in a Christian

00:30:12,460 --> 00:30:18,220
environment when we don't have time to

00:30:14,560 --> 00:30:20,620
demonstrate that yet so if we refresh we

00:30:18,220 --> 00:30:23,400
should have a list of look okay that's

00:30:20,620 --> 00:30:30,250
as being injected by the SQL script so

00:30:23,400 --> 00:30:32,980
our auto service is running now we have

00:30:30,250 --> 00:30:36,340
to change our old F so that instead of

00:30:32,980 --> 00:30:40,570
consuming his own service it will take

00:30:36,340 --> 00:30:45,070
two offers from the micro service really

00:30:40,570 --> 00:30:48,370
hard so I'm not sure we're going to do

00:30:45,070 --> 00:30:50,200
it okay so that's an angular app that

00:30:48,370 --> 00:30:54,730
has been scaffold and here you could see

00:30:50,200 --> 00:30:56,860
before it was just a local calling is

00:30:54,730 --> 00:30:59,230
relative path because it was insane war

00:30:56,860 --> 00:31:01,720
now we say okay you have to take the

00:30:59,230 --> 00:31:05,200
offers from this pass the mic reserves

00:31:01,720 --> 00:31:08,410
that we just deployed so if we we deploy

00:31:05,200 --> 00:31:18,520
that again though here we do all school

00:31:08,410 --> 00:31:21,430
we blow ok and let's make sure and if we

00:31:18,520 --> 00:31:24,550
go to the offers here we have the offers

00:31:21,430 --> 00:31:26,740
so we have decoupled our app we could do

00:31:24,550 --> 00:31:29,380
the same with boots with utter with

00:31:26,740 --> 00:31:38,410
anything we could create all mini micro

00:31:29,380 --> 00:31:42,490
services there it is wow the ex ex ex

00:31:38,410 --> 00:31:44,230
offer I don't want to know what it is so

00:31:42,490 --> 00:31:46,810
remember someone asked you this morning

00:31:44,230 --> 00:31:49,510
if we could secure that if you can

00:31:46,810 --> 00:31:52,360
secure that let me tell you let me think

00:31:49,510 --> 00:31:55,420
should we do that yeah and we are going

00:31:52,360 --> 00:31:59,410
to secure that uncool way by using t

00:31:55,420 --> 00:32:01,450
cloak so for this one as a swamp as I

00:31:59,410 --> 00:32:03,130
swarm though just a few work for those

00:32:01,450 --> 00:32:05,500
who don't know what key clock is clock

00:32:03,130 --> 00:32:08,590
is an security server authentication

00:32:05,500 --> 00:32:09,290
server that dilek you can delegate oil

00:32:08,590 --> 00:32:13,010
security

00:32:09,290 --> 00:32:14,780
to that deserve a wall presentation we

00:32:13,010 --> 00:32:18,830
don't have time to talk about that but

00:32:14,780 --> 00:32:21,110
anyway you should check that out farm as

00:32:18,830 --> 00:32:24,070
support for key club in two ways it has

00:32:21,110 --> 00:32:27,890
a fraction called Chi cloak server and

00:32:24,070 --> 00:32:30,170
you just create an empty project and you

00:32:27,890 --> 00:32:33,260
just add the key cloak server fraction

00:32:30,170 --> 00:32:36,050
and then it creates a jar containing a

00:32:33,260 --> 00:32:39,470
full key clock server so we got one here

00:32:36,050 --> 00:32:44,180
running already and what we are going to

00:32:39,470 --> 00:32:46,730
do is to update our micro service so and

00:32:44,180 --> 00:32:49,550
we are going to tell them you will be

00:32:46,730 --> 00:32:53,690
secured by a key club so first step is

00:32:49,550 --> 00:32:56,270
to add the fraction key cloak so we have

00:32:53,690 --> 00:32:58,790
a command if any time you have to add a

00:32:56,270 --> 00:33:01,810
fraction manually we have a command here

00:32:58,790 --> 00:33:04,790
let's list all fraction existing

00:33:01,810 --> 00:33:09,470
fractions here we get kick log we just

00:33:04,790 --> 00:33:11,570
click that okay now we have two more

00:33:09,470 --> 00:33:13,700
things two more steps before it's

00:33:11,570 --> 00:33:16,040
totally secure the first one we have to

00:33:13,700 --> 00:33:17,810
provide a web dot XML that contains

00:33:16,040 --> 00:33:21,850
security constraints and that's

00:33:17,810 --> 00:33:25,370
specified at a login method btus will be

00:33:21,850 --> 00:33:27,560
logical since we are running a bit short

00:33:25,370 --> 00:33:29,060
of time we have that prepared for you

00:33:27,560 --> 00:33:31,970
but as you can see nothing really

00:33:29,060 --> 00:33:37,130
exciting so we just calculated here

00:33:31,970 --> 00:33:40,750
maybe you can open it it again so we can

00:33:37,130 --> 00:33:44,150
see so basically what we say here is

00:33:40,750 --> 00:33:48,650
that it's a security constraint we say

00:33:44,150 --> 00:33:53,060
we want to protect this URL and only

00:33:48,650 --> 00:33:56,840
users with the role user yeah can access

00:33:53,060 --> 00:33:59,810
it and and that's the other important

00:33:56,840 --> 00:34:03,050
part we say the authenticator login

00:33:59,810 --> 00:34:05,780
method will be key cloak the second step

00:34:03,050 --> 00:34:09,169
is to provide a descriptor file ajisen

00:34:05,780 --> 00:34:11,450
file that tells our micro service where

00:34:09,169 --> 00:34:14,980
the key cloak server is running what

00:34:11,450 --> 00:34:18,350
public key is all kind of information

00:34:14,980 --> 00:34:20,000
again it's not the scope of this demo we

00:34:18,350 --> 00:34:21,300
prepare that for you but as you can see

00:34:20,000 --> 00:34:25,110
nothing really x

00:34:21,300 --> 00:34:27,720
they're just it's pointing to our key

00:34:25,110 --> 00:34:33,810
cloak server which is running as a swarm

00:34:27,720 --> 00:34:35,670
swarm app I now we call you and that's

00:34:33,810 --> 00:34:45,620
all we have to do I think you can build

00:34:35,670 --> 00:34:45,620
the app again yeah this one yeah

00:34:57,369 --> 00:35:06,960
so we have the the peacock server is

00:35:01,150 --> 00:35:06,960
running right here in the screen

00:35:10,900 --> 00:35:26,329
okay and if we go back to here and if we

00:35:16,339 --> 00:35:28,579
refresh the page and and do we have is

00:35:26,329 --> 00:35:32,630
no X Factor it's good we have five

00:35:28,579 --> 00:35:40,930
minutes should be okay um where have you

00:35:32,630 --> 00:35:40,930
put kick luggage isn't exactly weapon

00:35:48,600 --> 00:35:51,530
oh yeah

00:35:57,829 --> 00:36:08,579
when it's not before we wrap this just

00:36:04,010 --> 00:36:25,130
yeah but it's so easy to just redeploy

00:36:08,579 --> 00:36:29,790
it up here we go okay we're almost there

00:36:25,130 --> 00:36:34,230
and normally now if we will we will

00:36:29,790 --> 00:36:42,980
refresh the page it will say that we are

00:36:34,230 --> 00:36:47,369
not allowed no our micro service is

00:36:42,980 --> 00:36:50,240
secured you have to you can only talk

00:36:47,369 --> 00:36:54,720
with this Mike reservist if you are

00:36:50,240 --> 00:36:57,720
authenticated on your food angular app

00:36:54,720 --> 00:37:00,240
so now if we go back to the angular app

00:36:57,720 --> 00:37:07,950
and we ask for the offers that will

00:37:00,240 --> 00:37:12,510
probably not work I hope so oh that's oh

00:37:07,950 --> 00:37:14,430
but we just see it was responsive so

00:37:12,510 --> 00:37:17,400
it's not working if we open the console

00:37:14,430 --> 00:37:21,119
we will see it another eyes oh that's

00:37:17,400 --> 00:37:24,089
also out of scope of this demo now you

00:37:21,119 --> 00:37:29,579
have to enable kick log on the angular

00:37:24,089 --> 00:37:33,510
site and that's so we could do that we

00:37:29,579 --> 00:37:37,109
could do that I I can propose something

00:37:33,510 --> 00:37:41,220
again we will treat at the end the

00:37:37,109 --> 00:37:43,619
scripts to create these apps and audio

00:37:41,220 --> 00:37:47,520
session tomorrow maybe uncle and

00:37:43,619 --> 00:37:49,770
tomorrow's raj bose forge lab and there

00:37:47,520 --> 00:37:53,990
if someone come there and provides us

00:37:49,770 --> 00:37:58,260
the solution to enable key cloak

00:37:53,990 --> 00:38:02,250
integration in angular app he will get a

00:37:58,260 --> 00:38:04,290
raspberry to a really cool one and i

00:38:02,250 --> 00:38:06,180
swear you it's really easy if you're a

00:38:04,290 --> 00:38:08,580
bit curious if you check the

00:38:06,180 --> 00:38:10,770
documentation the key cloak examples

00:38:08,580 --> 00:38:14,220
you look for angular you should be able

00:38:10,770 --> 00:38:17,490
to do that so if someone comes with this

00:38:14,220 --> 00:38:21,420
laptop FSA I managed to secure that well

00:38:17,490 --> 00:38:24,900
you will get that that's the end of the

00:38:21,420 --> 00:38:27,840
demo I think we are still one minute or

00:38:24,900 --> 00:38:30,510
two for any questions two minutes left

00:38:27,840 --> 00:38:33,840
for questions I just oh yeah I'll just

00:38:30,510 --> 00:38:36,210
summarize or so so that's the slides

00:38:33,840 --> 00:38:41,850
will be available or so in addition to

00:38:36,210 --> 00:38:44,010
the gist you'll have information that's

00:38:41,850 --> 00:38:46,410
what we just did to move from linearity

00:38:44,010 --> 00:38:48,960
application to your full macro service

00:38:46,410 --> 00:38:50,970
and if you really want to go deeper dive

00:38:48,960 --> 00:38:53,430
if you're interesting to look at those

00:38:50,970 --> 00:38:55,020
are fractions like net fixed versus

00:38:53,430 --> 00:38:57,390
projects you have fully clustered

00:38:55,020 --> 00:38:59,600
environment then you look at that Booker

00:38:57,390 --> 00:39:05,190
demo so that's the way full blown demo

00:38:59,600 --> 00:39:09,390
scale a bowling etc ok so the

00:39:05,190 --> 00:39:12,270
conclusions of course we we it's a fast

00:39:09,390 --> 00:39:15,330
iteration we add alpha 8 today I think

00:39:12,270 --> 00:39:19,620
has been released two days ago you very

00:39:15,330 --> 00:39:22,110
welcome to bring also your ideas you can

00:39:19,620 --> 00:39:24,270
communicate with us Wi-Fi is a community

00:39:22,110 --> 00:39:27,150
as a team berg this morning side is

00:39:24,270 --> 00:39:29,970
where the team is better than the

00:39:27,150 --> 00:39:32,940
individual so you welcome to to

00:39:29,970 --> 00:39:36,900
contribute through the twitter wildfly

00:39:32,940 --> 00:39:40,920
swarm IRC or look at the code and also

00:39:36,900 --> 00:39:43,100
share your ideas with us okay and if you

00:39:40,920 --> 00:39:48,080
want to participate to the the little

00:39:43,100 --> 00:39:53,670
things we have you can look at the gift

00:39:48,080 --> 00:39:56,220
everyone can play except abstractor you

00:39:53,670 --> 00:40:00,960
didn't hear me yeah so here's the

00:39:56,220 --> 00:40:04,430
put in github you can solve the scripts

00:40:00,960 --> 00:40:04,430
that were used in this presentation

00:40:07,880 --> 00:40:18,560
hashtag so people can confine it back oh

00:40:13,880 --> 00:40:18,560
yeah so you will treat it right after

00:40:43,200 --> 00:40:52,480
yep awesome good actually your project

00:40:50,230 --> 00:40:55,089
doesn't have to be forged enabled any

00:40:52,480 --> 00:40:59,559
project any Java project can use one

00:40:55,089 --> 00:41:02,170
platform we demonstrated the force for

00:40:59,559 --> 00:41:04,029
the amazing productivity you get out of

00:41:02,170 --> 00:41:08,220
it and you have all the add-ons it

00:41:04,029 --> 00:41:08,220
brings all the fractions automatically

00:41:27,710 --> 00:41:30,710
you

00:42:21,250 --> 00:42:32,240
if you look at the Jardins generated

00:42:26,140 --> 00:42:38,180
swarm the world I charge inside so it's

00:42:32,240 --> 00:42:44,530
like server inside the jar with all the

00:42:38,180 --> 00:42:44,530
models together with your application

00:42:48,700 --> 00:42:51,850
thank you

00:43:03,869 --> 00:43:07,019

YouTube URL: https://www.youtube.com/watch?v=SkXfOu0JiMM


