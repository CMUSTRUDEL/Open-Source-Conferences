Title: CI CD with Openshift and Jenkins - Michal Fojtik, Ari LiVigni, Aaron Weitekamp
Publication date: 2016-02-12
Playlist: JUDCon
Description: 
	Openshift has the mechanism for building and deploying applications and Jenkins is a tool use for continuous integration/delivery/deployment. If we combine these together we can create a CI/CD pipeline that will allow us to promote builds of applications and make them available in our OSE instance. This could also be extended to publish to an external Docker registry as well.

http://bit.ly/ci-os-jenkins
Captions: 
	00:00:02,120 --> 00:00:09,830
the only issue 06 to do yes top a vm

00:00:06,120 --> 00:00:09,830
katoch monochrome woj

00:00:16,020 --> 00:00:23,279
so whoever's not talking can do it I

00:00:19,240 --> 00:00:23,279
mean it does not what's I hand off to

00:00:48,110 --> 00:01:23,170
miss you Aaliyah

00:00:51,520 --> 00:01:27,600
Oh solution air passages like a comer mi

00:01:23,170 --> 00:01:27,600
google 780 send a potent re haha

00:02:04,010 --> 00:02:06,850
doesn't

00:02:18,080 --> 00:02:21,080
Wow

00:02:46,030 --> 00:02:49,030
me

00:03:36,270 --> 00:03:39,380
take to Mike

00:03:45,000 --> 00:03:53,500
so thanks again for coming there's a few

00:03:50,160 --> 00:03:55,390
organizational messages while the guys

00:03:53,500 --> 00:03:58,840
are solving the technical difficulties

00:03:55,390 --> 00:04:03,550
again so please mute your mobile phones

00:03:58,840 --> 00:04:06,270
please keep the room as clean as

00:04:03,550 --> 00:04:09,880
possible when you really need to leave

00:04:06,270 --> 00:04:19,150
please keep the doors as quietly as

00:04:09,880 --> 00:04:21,160
possible and close it again please don't

00:04:19,150 --> 00:04:26,500
forget to vote for lightning talks they

00:04:21,160 --> 00:04:29,230
did take part tomorrow and there's a

00:04:26,500 --> 00:04:32,800
party tomorrow as you may know i think

00:04:29,230 --> 00:04:34,450
the tickets for are over today for today

00:04:32,800 --> 00:04:38,220
but there should be more tickets

00:04:34,450 --> 00:04:43,480
tomorrow at the Red Hat recruitment boot

00:04:38,220 --> 00:04:48,180
at the entrance but sit for me and now I

00:04:43,480 --> 00:04:48,180
hope the guys from openshift we all take

00:05:14,370 --> 00:05:34,690
okay good afternoon nobody breathe okay

00:05:19,060 --> 00:05:38,010
cuz this thing is did it just go off do

00:05:34,690 --> 00:05:38,010
you want me to get my laptop

00:06:45,830 --> 00:06:52,470
so we're going to go with this we have

00:06:49,440 --> 00:06:58,400
some color ABNA more abnormalities but

00:06:52,470 --> 00:07:02,250
that's okay so welcome to our talk about

00:06:58,400 --> 00:07:04,949
CCD continuous integration delivery with

00:07:02,250 --> 00:07:07,860
jenkins and open shift this is really a

00:07:04,949 --> 00:07:10,289
tools kind of discussion but we want to

00:07:07,860 --> 00:07:12,080
recognize from the beginning that CI CD

00:07:10,289 --> 00:07:17,729
practices are not just about the tools

00:07:12,080 --> 00:07:20,310
right this is about okay we're thinking

00:07:17,729 --> 00:07:23,580
differently about how we deliver

00:07:20,310 --> 00:07:25,889
software how we test software and it

00:07:23,580 --> 00:07:27,870
does have a big impact on the tools but

00:07:25,889 --> 00:07:30,930
it's just as much a part of how we

00:07:27,870 --> 00:07:33,599
collaborate how we think about who does

00:07:30,930 --> 00:07:35,969
testing and who does development and who

00:07:33,599 --> 00:07:37,740
does the deployment to production and

00:07:35,969 --> 00:07:39,659
that type of thing so we want it we want

00:07:37,740 --> 00:07:40,710
to try to try to keep that in our mind

00:07:39,659 --> 00:07:42,000
but we're really going to just be

00:07:40,710 --> 00:07:45,509
talking about the tools I think

00:07:42,000 --> 00:07:49,229
primarily today and what we're going to

00:07:45,509 --> 00:07:52,289
go through briefly is kind of the goals

00:07:49,229 --> 00:07:54,569
of the project and the the demo that

00:07:52,289 --> 00:07:56,729
we're going to show the kind of the

00:07:54,569 --> 00:07:59,969
Jenkins setup and that those kind of

00:07:56,729 --> 00:08:02,639
details the workflow that that we've set

00:07:59,969 --> 00:08:05,940
up in kind of a generalized way that

00:08:02,639 --> 00:08:07,919
will be demonstrating and then provide

00:08:05,940 --> 00:08:11,789
some some opportunity to see see things

00:08:07,919 --> 00:08:17,610
work where we've got a short demo and

00:08:11,789 --> 00:08:21,479
then we'll have some questions so just

00:08:17,610 --> 00:08:24,000
briefly why containers why are we using

00:08:21,479 --> 00:08:26,819
containers in our in our testing in an

00:08:24,000 --> 00:08:29,580
art in our deployment and development

00:08:26,819 --> 00:08:31,560
work so speed is a huge thing and just

00:08:29,580 --> 00:08:34,800
the whole agile nature of how quickly

00:08:31,560 --> 00:08:38,070
that you can you can work with

00:08:34,800 --> 00:08:40,770
containers deploying them replacing them

00:08:38,070 --> 00:08:43,649
very very easily and quickly you your

00:08:40,770 --> 00:08:45,540
fork to treat them as cattle you know

00:08:43,649 --> 00:08:48,390
there there's lot of these things and

00:08:45,540 --> 00:08:50,850
and you don't care if one dies it's you

00:08:48,390 --> 00:08:52,199
know or one's broken it's gonna we're

00:08:50,850 --> 00:08:52,970
going to rebuild we're going to redeploy

00:08:52,199 --> 00:08:56,290
that kind of

00:08:52,970 --> 00:09:00,410
so and we're trying to bring that whole

00:08:56,290 --> 00:09:03,259
you know microservice buzzword if you

00:09:00,410 --> 00:09:05,240
will into the way we test not just in

00:09:03,259 --> 00:09:08,509
the way that we you know build our

00:09:05,240 --> 00:09:11,569
application and deploy it but also you

00:09:08,509 --> 00:09:14,920
know the whole infrastructure that that

00:09:11,569 --> 00:09:17,439
provides that deployment pipeline pipe

00:09:14,920 --> 00:09:21,139
so we want to kind of dog food

00:09:17,439 --> 00:09:23,959
containers across across the board the

00:09:21,139 --> 00:09:27,050
other is how many of you have a system

00:09:23,959 --> 00:09:29,839
that you maintain or whatever they give

00:09:27,050 --> 00:09:31,399
spun up at some point and that if it

00:09:29,839 --> 00:09:34,730
goes down you really don't know what you

00:09:31,399 --> 00:09:36,889
would do because you know just spun it

00:09:34,730 --> 00:09:39,050
up one weekend and and you didn't

00:09:36,889 --> 00:09:41,839
provide baby storage that that was

00:09:39,050 --> 00:09:44,600
backed up and and maybe yeah it's kind

00:09:41,839 --> 00:09:47,360
of on this other you know part of the

00:09:44,600 --> 00:09:48,740
network that isn't real robust so if

00:09:47,360 --> 00:09:51,980
you're in that situation if you're like

00:09:48,740 --> 00:09:54,470
me you can get easy very easily and we

00:09:51,980 --> 00:09:56,389
find that working with containers a lot

00:09:54,470 --> 00:09:58,970
of times it requires you to think about

00:09:56,389 --> 00:10:00,740
persistence and you know how if this

00:09:58,970 --> 00:10:02,569
thing dies what's going to happen what

00:10:00,740 --> 00:10:04,430
if my database isn't backed up and all

00:10:02,569 --> 00:10:05,720
that kind of stuff so we start to think

00:10:04,430 --> 00:10:07,040
about a little bit more disciplined

00:10:05,720 --> 00:10:09,139
about these things it's kind of a pain

00:10:07,040 --> 00:10:11,180
sometimes but it's it's actually

00:10:09,139 --> 00:10:14,059
probably a good thing in most cases to

00:10:11,180 --> 00:10:18,439
think about persistence state decoupling

00:10:14,059 --> 00:10:19,759
your application from your data I don't

00:10:18,439 --> 00:10:22,839
think what the last thing was what was

00:10:19,759 --> 00:10:24,949
the last thing reproducibility okay and

00:10:22,839 --> 00:10:27,259
and I think that gets delete to the

00:10:24,949 --> 00:10:29,389
other the other you know about

00:10:27,259 --> 00:10:31,699
persistence and being able to spin this

00:10:29,389 --> 00:10:37,009
thing up in a reproducible environment

00:10:31,699 --> 00:10:39,319
okay next so why open shift I think that

00:10:37,009 --> 00:10:42,470
for me whenever I started working with

00:10:39,319 --> 00:10:44,660
the containers it was kind of as a toy

00:10:42,470 --> 00:10:47,000
right you have this thing and you play

00:10:44,660 --> 00:10:48,410
with it and then you have another thing

00:10:47,000 --> 00:10:50,569
and you play with it but when you're

00:10:48,410 --> 00:10:53,180
serious about things you've got problems

00:10:50,569 --> 00:10:55,939
and you need some tort some type of

00:10:53,180 --> 00:10:58,899
platform to orchestrate these things to

00:10:55,939 --> 00:11:02,899
provide networking to expose ports and

00:10:58,899 --> 00:11:05,389
provide routing dns to certain services

00:11:02,899 --> 00:11:06,270
to link services together all that kind

00:11:05,389 --> 00:11:08,940
of stuff open

00:11:06,270 --> 00:11:09,960
shift starts to really solve some of

00:11:08,940 --> 00:11:12,900
those problems so you don't have to

00:11:09,960 --> 00:11:15,630
worry about those things so much just

00:11:12,900 --> 00:11:19,980
having templates to manage your micro

00:11:15,630 --> 00:11:21,420
services is really useful pattern also

00:11:19,980 --> 00:11:23,340
just having this kind of integrated

00:11:21,420 --> 00:11:24,690
system we you know when you're dealing

00:11:23,340 --> 00:11:27,510
with containers you're always going to

00:11:24,690 --> 00:11:30,330
need to build you need a place to put

00:11:27,510 --> 00:11:33,180
that build a registry you need a way to

00:11:30,330 --> 00:11:34,980
you know manage kind of that whole

00:11:33,180 --> 00:11:37,410
pipeline so we've got a Jenkins service

00:11:34,980 --> 00:11:40,320
and maybe some slaves over here and

00:11:37,410 --> 00:11:42,510
you've got to build two so now you've

00:11:40,320 --> 00:11:44,220
got lots of containers you've gotta

00:11:42,510 --> 00:11:46,550
build lots of containers you need to

00:11:44,220 --> 00:11:49,770
store lots of containers you need to

00:11:46,550 --> 00:11:51,450
maintain and orchestrate wick when they

00:11:49,770 --> 00:11:52,920
when they come up and down and when

00:11:51,450 --> 00:11:55,470
they're updated I mean this gets

00:11:52,920 --> 00:11:57,450
complicated right so that's it's one of

00:11:55,470 --> 00:11:59,850
the benefits of having having a platform

00:11:57,450 --> 00:12:01,950
and I think one of the really

00:11:59,850 --> 00:12:04,920
interesting things that openshift

00:12:01,950 --> 00:12:07,590
provides it's not at all utilized to its

00:12:04,920 --> 00:12:10,200
fullest it's really just kind of being

00:12:07,590 --> 00:12:12,990
introduced I think to to my thinking is

00:12:10,200 --> 00:12:16,350
this source to image and that's a way of

00:12:12,990 --> 00:12:20,370
layering a small amount of your

00:12:16,350 --> 00:12:24,000
application onto a docker image and it

00:12:20,370 --> 00:12:28,140
provides a very quick way of customizing

00:12:24,000 --> 00:12:32,480
an application it's it's a very lean

00:12:28,140 --> 00:12:35,280
kind of quick pattern to provide a

00:12:32,480 --> 00:12:38,880
common set of images and then just

00:12:35,280 --> 00:12:41,070
having the unique data layer on top of

00:12:38,880 --> 00:12:42,800
each each one and we'll see we'll see

00:12:41,070 --> 00:12:46,980
how that works in the Jenkins slave

00:12:42,800 --> 00:12:49,290
example that Michal will show so the

00:12:46,980 --> 00:12:51,660
goals we really to kind of generalize

00:12:49,290 --> 00:12:54,420
this container based pipeline you know

00:12:51,660 --> 00:12:57,600
everyone has unique needs but we do want

00:12:54,420 --> 00:13:02,040
to provide some of these basic you know

00:12:57,600 --> 00:13:05,390
hooks and automation types of patterns

00:13:02,040 --> 00:13:07,140
that you will need in any project and

00:13:05,390 --> 00:13:08,640
certainly there's going to be lots of

00:13:07,140 --> 00:13:10,950
customization that's going to need in

00:13:08,640 --> 00:13:12,510
it's going to be required but hopefully

00:13:10,950 --> 00:13:14,730
you don't have to spend so much time

00:13:12,510 --> 00:13:16,410
with the basics that everyone has all

00:13:14,730 --> 00:13:17,400
the basic problems so that we all share

00:13:16,410 --> 00:13:20,430
in common

00:13:17,400 --> 00:13:22,800
and and really the goal is to prevent

00:13:20,430 --> 00:13:25,710
the promotion of broken builds we can

00:13:22,800 --> 00:13:27,450
build all day a thousand times and if

00:13:25,710 --> 00:13:29,520
it's broken that's okay because we're

00:13:27,450 --> 00:13:32,280
not going to promote it to a place where

00:13:29,520 --> 00:13:34,650
it's going to be critical when we

00:13:32,280 --> 00:13:36,240
promote it to a stage environment then

00:13:34,650 --> 00:13:41,070
we're going to have some confidence that

00:13:36,240 --> 00:13:42,630
time on 1001 build so i think i'm going

00:13:41,070 --> 00:13:47,310
to hand it over to macau to talk about

00:13:42,630 --> 00:13:49,050
the Jenkins yeah so hi my name is B hill

00:13:47,310 --> 00:13:51,660
and I working in red head as a software

00:13:49,050 --> 00:13:53,160
engineer so I'm actually responsible for

00:13:51,660 --> 00:13:55,320
the developer experience part of the

00:13:53,160 --> 00:13:57,260
open shift so I'm working on the docker

00:13:55,320 --> 00:14:00,180
images that open sure it provides and

00:13:57,260 --> 00:14:02,790
part as part of that we think that the

00:14:00,180 --> 00:14:05,010
CIC d flows and Jenkins fits to this so

00:14:02,790 --> 00:14:07,650
i also worked on the drinking's and

00:14:05,010 --> 00:14:12,060
continues delivery continuous

00:14:07,650 --> 00:14:14,340
integration with open shift week 3 so so

00:14:12,060 --> 00:14:16,350
this will be part of the demo so you

00:14:14,340 --> 00:14:18,690
will see how this works in practice so I

00:14:16,350 --> 00:14:21,810
will just briefly talk through what you

00:14:18,690 --> 00:14:23,820
will see there so what we what you can

00:14:21,810 --> 00:14:26,220
do an open shift nowadays you can run

00:14:23,820 --> 00:14:30,060
Jenkins as inside the container as open

00:14:26,220 --> 00:14:33,150
shift so open shift can also run the

00:14:30,060 --> 00:14:36,450
slaves that the Jenkins use for building

00:14:33,150 --> 00:14:38,970
your application right so so in a normal

00:14:36,450 --> 00:14:40,950
world that slaves are the two machines

00:14:38,970 --> 00:14:43,230
that you build your application right

00:14:40,950 --> 00:14:45,480
and they you keep them usually you keep

00:14:43,230 --> 00:14:49,260
them running you know and you assign the

00:14:45,480 --> 00:14:51,900
the jobs to them and what we think is

00:14:49,260 --> 00:14:54,930
more cloud this way to do these is that

00:14:51,900 --> 00:14:56,430
you spawn slave as a port in Coober

00:14:54,930 --> 00:14:58,320
Nettie's when you really need it right

00:14:56,430 --> 00:15:00,930
like i don't need to have the virtual

00:14:58,320 --> 00:15:02,880
machine hanging out doing nothing so

00:15:00,930 --> 00:15:04,500
every time I need a slave every time I

00:15:02,880 --> 00:15:06,870
need to test or build my application I

00:15:04,500 --> 00:15:09,300
will just create a pot and run the test

00:15:06,870 --> 00:15:13,050
or whatever I need their get the results

00:15:09,300 --> 00:15:16,500
back so the Jenkins image that we have

00:15:13,050 --> 00:15:18,300
in open shift initially we start adding

00:15:16,500 --> 00:15:20,160
a lot of features to it so we start

00:15:18,300 --> 00:15:23,870
adding things like a master's life

00:15:20,160 --> 00:15:26,460
replication you know changing the

00:15:23,870 --> 00:15:29,160
passwords configuring the jobs and then

00:15:26,460 --> 00:15:30,840
at some point we say like note is it too

00:15:29,160 --> 00:15:32,640
much right like we are we are putting

00:15:30,840 --> 00:15:35,340
a lot of features to jenkins image and

00:15:32,640 --> 00:15:37,740
this is not how the world works so we

00:15:35,340 --> 00:15:40,920
can satisfy everybody and people usually

00:15:37,740 --> 00:15:42,860
use and configurations for Jenkins to

00:15:40,920 --> 00:15:44,760
use different jobs they use you know

00:15:42,860 --> 00:15:46,740
artifacts that they want to deploy in

00:15:44,760 --> 00:15:49,380
Jenkins so we told like it will be cool

00:15:46,740 --> 00:15:53,070
if Jenkins can be an s2 I builder so we

00:15:49,380 --> 00:15:55,290
treat a configuration of your Jenkins

00:15:53,070 --> 00:15:58,050
configuration your jobs your plug-in as

00:15:55,290 --> 00:15:59,640
a source and you can use it is to build

00:15:58,050 --> 00:16:01,770
your own customized drinking's image

00:15:59,640 --> 00:16:03,810
that will have all jobs you want that

00:16:01,770 --> 00:16:05,370
will have all the plugins you want you

00:16:03,810 --> 00:16:07,550
know all the configuration and

00:16:05,370 --> 00:16:10,380
everything that fits your infrastructure

00:16:07,550 --> 00:16:12,330
so the s2 I allows currently

00:16:10,380 --> 00:16:14,010
customization of the Jenkins image so

00:16:12,330 --> 00:16:16,410
just you just give us your git

00:16:14,010 --> 00:16:19,500
repository and we'll just rebuild the

00:16:16,410 --> 00:16:21,690
Jenkins based on your configuration so

00:16:19,500 --> 00:16:25,200
what an important piece here is the

00:16:21,690 --> 00:16:27,330
slaves as well as I was talking about so

00:16:25,200 --> 00:16:29,070
currently to have a slave what does it

00:16:27,330 --> 00:16:31,650
mean in Jenkins world you need to have

00:16:29,070 --> 00:16:34,530
an adductor image that has a Java on its

00:16:31,650 --> 00:16:36,810
right so you can run these J&L p AF

00:16:34,530 --> 00:16:39,930
agent by the way if somebody in this

00:16:36,810 --> 00:16:41,820
room go ahead and rewrite this to go or

00:16:39,930 --> 00:16:44,100
something stain that we can run without

00:16:41,820 --> 00:16:48,000
installing java i will send him t-shirt

00:16:44,100 --> 00:16:49,680
personally sign it you know so so so

00:16:48,000 --> 00:16:52,350
what this temple so we have a special

00:16:49,680 --> 00:16:54,600
template that basically converts every

00:16:52,350 --> 00:16:56,250
builder image which means in openshift

00:16:54,600 --> 00:16:59,490
terminology every image that builds your

00:16:56,250 --> 00:17:01,380
source code to a valid Jenkins slave so

00:16:59,490 --> 00:17:02,640
yeah that sounds nice what is really

00:17:01,380 --> 00:17:04,890
doing what we really do is that we

00:17:02,640 --> 00:17:08,280
install Java on that image nothing else

00:17:04,890 --> 00:17:10,890
and we also install a one shell script

00:17:08,280 --> 00:17:13,020
that will then act as a connector to the

00:17:10,890 --> 00:17:15,030
Jenkins so what really happens is that

00:17:13,020 --> 00:17:17,760
the Jenkins starts a pot which does a

00:17:15,030 --> 00:17:19,950
container which runs your builder and

00:17:17,760 --> 00:17:22,650
that builder will launch a shell script

00:17:19,950 --> 00:17:25,050
that will note the agent from Jenkins

00:17:22,650 --> 00:17:27,150
and started and connect to Jenkins right

00:17:25,050 --> 00:17:29,160
so you can then from the Jenkins you can

00:17:27,150 --> 00:17:31,350
execute the shell shell script on that

00:17:29,160 --> 00:17:33,930
slave and you can put your application

00:17:31,350 --> 00:17:35,610
execute you need to execute whatever if

00:17:33,930 --> 00:17:39,120
that is done Cooper Nettie's

00:17:35,610 --> 00:17:40,920
automatically put the foot down so you

00:17:39,120 --> 00:17:43,080
know it does it's not consuming any

00:17:40,920 --> 00:17:44,670
resources but it's important as I said

00:17:43,080 --> 00:17:47,280
is that you are creating slow

00:17:44,670 --> 00:17:49,200
on demand you don't run them you know

00:17:47,280 --> 00:17:51,270
all the time so you create a pool and

00:17:49,200 --> 00:17:53,580
you say Cooper Nettie's can launch 30

00:17:51,270 --> 00:17:59,160
slaves in parallel right and you know

00:17:53,580 --> 00:18:01,920
you're okay to go slides other way

00:17:59,160 --> 00:18:04,520
around yeah and this is Ari yeah so I'm

00:18:01,920 --> 00:18:09,180
are a big knee I got my life in here

00:18:04,520 --> 00:18:12,090
kidding can you hear me so another part

00:18:09,180 --> 00:18:14,490
to this is you can manage your jobs you

00:18:12,090 --> 00:18:16,170
can have all all Jenkins jobs if you

00:18:14,490 --> 00:18:18,570
were to go under the covers of the UI or

00:18:16,170 --> 00:18:20,250
basically in XML files on which we

00:18:18,570 --> 00:18:23,010
actually have in our example repo right

00:18:20,250 --> 00:18:24,570
now but some a better way to manage an

00:18:23,010 --> 00:18:26,040
abundant amount of jobs so if you had a

00:18:24,570 --> 00:18:28,290
lot of microservices you get a lot of

00:18:26,040 --> 00:18:30,480
these applications that you're testing

00:18:28,290 --> 00:18:32,280
and you wanted to kind of run through a

00:18:30,480 --> 00:18:35,940
set of jobs an easier way to do this is

00:18:32,280 --> 00:18:39,210
to use Jenkins job builder it's a nice

00:18:35,940 --> 00:18:41,550
ya moul template you can basically it

00:18:39,210 --> 00:18:43,560
has a templating system that allows you

00:18:41,550 --> 00:18:46,410
to define many jobs in a very limited

00:18:43,560 --> 00:18:49,230
amount of yamel you can use this notion

00:18:46,410 --> 00:18:51,540
of defaults that allows you to reference

00:18:49,230 --> 00:18:54,780
them and reuse a lot of the same data

00:18:51,540 --> 00:18:57,450
instead of having to have all this xml

00:18:54,780 --> 00:18:59,910
code and duplication of xml code and and

00:18:57,450 --> 00:19:04,110
names and things like that you can just

00:18:59,910 --> 00:19:07,890
reference it the you know it reduces the

00:19:04,110 --> 00:19:10,980
redundancy and it can easily be uploaded

00:19:07,890 --> 00:19:12,780
into into the Jenkins system and you're

00:19:10,980 --> 00:19:15,870
maintaining yamma which is very easy to

00:19:12,780 --> 00:19:17,510
read as opposed to xml and you can put

00:19:15,870 --> 00:19:20,850
all this under source control management

00:19:17,510 --> 00:19:22,920
and it's it's much easier to manage

00:19:20,850 --> 00:19:26,130
that's another piece that we added into

00:19:22,920 --> 00:19:28,140
this kind of see icd workflow just to

00:19:26,130 --> 00:19:31,320
also mention jakers job builder is an

00:19:28,140 --> 00:19:32,730
upstream opens that project it's very

00:19:31,320 --> 00:19:38,070
extensible as well and you can

00:19:32,730 --> 00:19:40,890
contribute to it um so we wanted to show

00:19:38,070 --> 00:19:42,780
before we go into a demo is kind of the

00:19:40,890 --> 00:19:47,130
picture of what this workflow looks like

00:19:42,780 --> 00:19:48,690
so as we Cal mentioned you have we have

00:19:47,130 --> 00:19:50,250
a test phase where we're running it

00:19:48,690 --> 00:19:51,630
these basically break down to the

00:19:50,250 --> 00:19:54,930
Jenkins jobs that you're going to see in

00:19:51,630 --> 00:19:57,570
the demo and we have a test job that

00:19:54,930 --> 00:19:59,280
will spin up the slave slave pod

00:19:57,570 --> 00:20:02,970
at in Coober Nettie's as Mikhail

00:19:59,280 --> 00:20:05,570
indicated when it when that starts we

00:20:02,970 --> 00:20:07,970
can do some level of testing on that pod

00:20:05,570 --> 00:20:11,100
which will be a Jenkins slave and

00:20:07,970 --> 00:20:12,990
destroy the pod now in the example we're

00:20:11,100 --> 00:20:15,840
showing it's a sample app so it's just

00:20:12,990 --> 00:20:18,000
one container but there's no reason this

00:20:15,840 --> 00:20:20,640
could be multiple containers that we're

00:20:18,000 --> 00:20:24,450
going to run and validate and test in

00:20:20,640 --> 00:20:26,280
that phase if that is successful we get

00:20:24,450 --> 00:20:30,420
an automatic promotion using the

00:20:26,280 --> 00:20:32,640
promotion plugin to then kick a build

00:20:30,420 --> 00:20:34,410
now this is not a Jenkins bill this is

00:20:32,640 --> 00:20:37,080
building in actually the open shift

00:20:34,410 --> 00:20:39,600
environment and kicking that off in a

00:20:37,080 --> 00:20:44,070
namespace called stage or a project

00:20:39,600 --> 00:20:45,420
called stage once that's that's done and

00:20:44,070 --> 00:20:48,570
it was successful that build a

00:20:45,420 --> 00:20:50,340
successful we you could do this

00:20:48,570 --> 00:20:52,740
automatically but we chose to actually

00:20:50,340 --> 00:20:55,050
take a manual approach of you can then

00:20:52,740 --> 00:20:56,730
deploy this in your stage name space so

00:20:55,050 --> 00:20:58,200
you can think it as a company that has a

00:20:56,730 --> 00:21:01,520
stage environment that they're testing

00:20:58,200 --> 00:21:05,040
out an application and they they want to

00:21:01,520 --> 00:21:07,530
test that out yeah anyway and in your

00:21:05,040 --> 00:21:09,600
real life like in real life you don't

00:21:07,530 --> 00:21:11,490
deploy to stage every single comedy you

00:21:09,600 --> 00:21:13,710
make to the source control version right

00:21:11,490 --> 00:21:15,660
that will be just crazy I mean like the

00:21:13,710 --> 00:21:18,120
QA and testers will hate you for that

00:21:15,660 --> 00:21:20,250
and I mean like that usually like you

00:21:18,120 --> 00:21:21,870
have some testing life cycle where you

00:21:20,250 --> 00:21:24,270
say like this is the version we want to

00:21:21,870 --> 00:21:27,420
deploy to stage and we want to have a QA

00:21:24,270 --> 00:21:29,250
or testers spend like one week on it and

00:21:27,420 --> 00:21:31,380
tell us if it's good or not right so you

00:21:29,250 --> 00:21:34,760
don't want to optum attic promotion to

00:21:31,380 --> 00:21:34,760
stage every time you have a new image

00:21:41,420 --> 00:21:46,770
there you can do kind of these you know

00:21:44,070 --> 00:21:49,770
you need to integrate testing before you

00:21:46,770 --> 00:21:51,180
yeah there's nothing preventing you to

00:21:49,770 --> 00:21:52,890
have a priest stage or something like

00:21:51,180 --> 00:21:55,770
that where you do all this evaluation

00:21:52,890 --> 00:21:57,600
yeah we our sample really shows kind of

00:21:55,770 --> 00:22:00,480
these four but there's no reason right

00:21:57,600 --> 00:22:02,250
you could have another pipeline in there

00:22:00,480 --> 00:22:03,720
as well if you wanted to expand that or

00:22:02,250 --> 00:22:05,820
you wanted to be more cautious and what

00:22:03,720 --> 00:22:07,680
you're rolling out then the other ideas

00:22:05,820 --> 00:22:09,710
you would then once you're successful in

00:22:07,680 --> 00:22:11,160
your integration testing you would

00:22:09,710 --> 00:22:14,520
manually put

00:22:11,160 --> 00:22:16,950
to the production namespace or project

00:22:14,520 --> 00:22:19,350
and then we would deploy your

00:22:16,950 --> 00:22:22,200
application and everyone be happy your

00:22:19,350 --> 00:22:24,360
new tested application is out there in

00:22:22,200 --> 00:22:26,580
the world to use for for your end users

00:22:24,360 --> 00:22:28,110
yeah and what is important here is that

00:22:26,580 --> 00:22:31,170
the connection to open shift which

00:22:28,110 --> 00:22:33,960
allows you to set us different policies

00:22:31,170 --> 00:22:35,730
for staging and for production here so

00:22:33,960 --> 00:22:37,440
you can have people that can work only

00:22:35,730 --> 00:22:39,600
on stage you can have the people that

00:22:37,440 --> 00:22:41,400
can touch the production you know so

00:22:39,600 --> 00:22:43,860
those two people don't talk each other

00:22:41,400 --> 00:22:45,930
in the real world usually they are the

00:22:43,860 --> 00:22:47,790
same people but in some companies you

00:22:45,930 --> 00:22:49,980
know you you have these security

00:22:47,790 --> 00:22:51,540
policies in place so open it really

00:22:49,980 --> 00:22:53,220
allows you to do this scenario because

00:22:51,540 --> 00:22:57,720
you have a separation of privileges

00:22:53,220 --> 00:23:03,720
between two projects so I think we're

00:22:57,720 --> 00:23:05,850
ready now to yeah so so the reason why

00:23:03,720 --> 00:23:07,560
we play a video here and we are cheating

00:23:05,850 --> 00:23:10,200
is that the conference Wi-Fi really

00:23:07,560 --> 00:23:12,060
sucks and we we are we need to download

00:23:10,200 --> 00:23:13,590
like a 2 gigabytes of docker images and

00:23:12,060 --> 00:23:15,420
I spent like three hours trying time to

00:23:13,590 --> 00:23:17,670
download them and that failed so that's

00:23:15,420 --> 00:23:20,280
why we play the video but it works the

00:23:17,670 --> 00:23:22,500
same yeah the other thing to know too

00:23:20,280 --> 00:23:24,630
well Kel's getting it setup is all this

00:23:22,500 --> 00:23:26,370
is in at the end we'll have a list of

00:23:24,630 --> 00:23:30,270
references you can just go get this

00:23:26,370 --> 00:23:33,600
project off a github and use it yeah so

00:23:30,270 --> 00:23:35,190
yeah this project really sucks so so

00:23:33,600 --> 00:23:37,140
this is the open shift console is not

00:23:35,190 --> 00:23:41,070
that green and in real life it's white

00:23:37,140 --> 00:23:43,230
and yeah so so this is the opposite v3

00:23:41,070 --> 00:23:45,810
so basically what are we going to show

00:23:43,230 --> 00:23:47,970
you is starting from nothing I mean like

00:23:45,810 --> 00:23:52,020
literally empty project so i just have

00:23:47,970 --> 00:23:54,540
the projects created oops which is the

00:23:52,020 --> 00:23:56,340
CI plot and stage you can see the

00:23:54,540 --> 00:23:58,020
projects there and there is nothing in

00:23:56,340 --> 00:24:00,240
those projects like they're completely

00:23:58,020 --> 00:24:02,250
empty so I'm going to show you how you

00:24:00,240 --> 00:24:05,250
can in eight minutes you know and maybe

00:24:02,250 --> 00:24:07,380
now it's even faster because we fix one

00:24:05,250 --> 00:24:09,420
plugin so it's like five minutes you can

00:24:07,380 --> 00:24:12,210
get from nothing to have the full CDC I

00:24:09,420 --> 00:24:14,220
flow for your single application really

00:24:12,210 --> 00:24:16,680
easy now the key thing too is there's

00:24:14,220 --> 00:24:18,570
the communication between Jenkins and an

00:24:16,680 --> 00:24:20,970
open shift is done through an open shift

00:24:18,570 --> 00:24:22,900
pipeline plug-in that was developed so

00:24:20,970 --> 00:24:25,960
that data to can talk together

00:24:22,900 --> 00:24:28,990
yeah so now i'm going to create the

00:24:25,960 --> 00:24:30,970
Jenkins slave image from my Ruby 22

00:24:28,990 --> 00:24:33,760
image so I'm this will be a ruby

00:24:30,970 --> 00:24:36,580
application because you know Ruby and

00:24:33,760 --> 00:24:39,130
and you know we i'm just going to build

00:24:36,580 --> 00:24:44,320
this life image using the template i was

00:24:39,130 --> 00:24:46,510
describing so here basically I I set the

00:24:44,320 --> 00:24:49,030
image stream name so I want to use Ruby

00:24:46,510 --> 00:24:53,140
22 CentOS 7 and want to convert it to

00:24:49,030 --> 00:24:55,150
Jenkins life so yeah that's the name of

00:24:53,140 --> 00:24:57,640
the image dream you can you can also

00:24:55,150 --> 00:24:59,130
specify like it alternative repository

00:24:57,640 --> 00:25:01,360
git repository where you have your

00:24:59,130 --> 00:25:03,820
customized those scripts so if you want

00:25:01,360 --> 00:25:05,470
to add something more than the slave

00:25:03,820 --> 00:25:08,010
stuff like you can also add more like

00:25:05,470 --> 00:25:13,120
testing libraries or something like that

00:25:08,010 --> 00:25:17,530
so we just hit create yeah there's

00:25:13,120 --> 00:25:19,420
nothing because it's just the built it's

00:25:17,530 --> 00:25:24,430
nothing else it will just produce this

00:25:19,420 --> 00:25:26,620
life image so now i'm going to create a

00:25:24,430 --> 00:25:32,820
Jenkins server so I'm going to create

00:25:26,620 --> 00:25:35,290
the junkies master and yeah so in

00:25:32,820 --> 00:25:37,720
junkies master you can you can specify

00:25:35,290 --> 00:25:39,460
the service name so that's a useful when

00:25:37,720 --> 00:25:41,260
you want to run something more than

00:25:39,460 --> 00:25:43,540
Jenkins and you want to talk to Jenkins

00:25:41,260 --> 00:25:45,700
service and within your pots or within

00:25:43,540 --> 00:25:47,560
your application you can specify the

00:25:45,700 --> 00:25:50,050
Jenkins password which is the admin

00:25:47,560 --> 00:25:52,180
password for Jenkins you can specify

00:25:50,050 --> 00:25:53,500
alternative Jenkins image so if you

00:25:52,180 --> 00:25:55,200
don't want to use our image you can

00:25:53,500 --> 00:25:58,420
specify whatever image you want and then

00:25:55,200 --> 00:26:00,660
the s2 I repo that's the thing I was

00:25:58,420 --> 00:26:04,270
talking about that repository contains

00:26:00,660 --> 00:26:07,480
configuration plugins jobs basically you

00:26:04,270 --> 00:26:09,070
know and this is fully customizable so

00:26:07,480 --> 00:26:11,140
if you wanted to add your own plugins

00:26:09,070 --> 00:26:13,090
like we've downloaded all the plugins at

00:26:11,140 --> 00:26:16,330
our example you could also have a text

00:26:13,090 --> 00:26:17,470
file that has a name and a version and

00:26:16,330 --> 00:26:19,630
maybe you wanted to go to a different

00:26:17,470 --> 00:26:21,220
update site than the Jenkins update site

00:26:19,630 --> 00:26:23,140
you could do all that and customize

00:26:21,220 --> 00:26:25,420
Jenkins the way you want using that time

00:26:23,140 --> 00:26:27,670
yeah so now I deployed the Jenkins so

00:26:25,420 --> 00:26:30,760
that now the Jenkins master image is

00:26:27,670 --> 00:26:34,210
currently being built so I can view the

00:26:30,760 --> 00:26:37,590
looks from this build i hope i will show

00:26:34,210 --> 00:26:37,590
that i don't remember if i wreck

00:26:44,830 --> 00:26:49,220
this is from the slave this is from the

00:26:47,120 --> 00:26:51,560
slave what so what really is happening

00:26:49,220 --> 00:26:54,140
here is that you can see we do yum

00:26:51,560 --> 00:27:02,990
install Java and then this is a rapper

00:26:54,140 --> 00:27:11,870
nothing else and now we can see the

00:27:02,990 --> 00:27:13,850
highlighted speak to the build so you

00:27:11,870 --> 00:27:18,860
can see we copied the repository files

00:27:13,850 --> 00:27:20,800
we install 141 Jenkins plugins because I

00:27:18,860 --> 00:27:24,020
really likes to have a rich Jenkins and

00:27:20,800 --> 00:27:25,970
we remove the sample inkings jobs that

00:27:24,020 --> 00:27:29,180
week comes from the original image and

00:27:25,970 --> 00:27:31,310
we install our own configuration we push

00:27:29,180 --> 00:27:34,010
it to the internal register even open

00:27:31,310 --> 00:27:39,650
shift and that will basically cause the

00:27:34,010 --> 00:27:42,650
Jenkins be deployed automatically so now

00:27:39,650 --> 00:27:44,360
you can see I have a I have one pot of

00:27:42,650 --> 00:27:47,720
Jenkins running and I have the route

00:27:44,360 --> 00:27:49,700
bind that pot this small buttons I think

00:27:47,720 --> 00:27:51,290
you will see that later on the open

00:27:49,700 --> 00:27:53,120
Street presentation can be used for

00:27:51,290 --> 00:27:54,380
scaling gabon scaling down so if you

00:27:53,120 --> 00:27:55,670
have a if you want to have a more

00:27:54,380 --> 00:27:57,830
Jenkins running you can just hit the

00:27:55,670 --> 00:28:03,260
button doesn't work with this Jenkins

00:27:57,830 --> 00:28:06,380
image so now we just go to Jenkins yeah

00:28:03,260 --> 00:28:08,210
epsilon certificate it's not coming yeah

00:28:06,380 --> 00:28:13,490
and it's still coming up again what's

00:28:08,210 --> 00:28:15,470
you'll see ya Jake a service went out so

00:28:13,490 --> 00:28:18,200
you can see what's really going on in

00:28:15,470 --> 00:28:20,750
the in the Jenkins so it's copying the

00:28:18,200 --> 00:28:23,300
comp scoping the configuration that

00:28:20,750 --> 00:28:25,810
expose for change setting a password it

00:28:23,300 --> 00:28:28,940
is automatically discovering the images

00:28:25,810 --> 00:28:30,770
for for slaves so the Jenkees will be

00:28:28,940 --> 00:28:33,890
pre-configured with with those images

00:28:30,770 --> 00:28:37,820
and it also downloading the jiggies job

00:28:33,890 --> 00:28:39,410
builder which is button project this is

00:28:37,820 --> 00:28:40,880
the kind of customization you can do on

00:28:39,410 --> 00:28:42,950
the officer Jenkins image so if you want

00:28:40,880 --> 00:28:44,300
to install more stuff like you can just

00:28:42,950 --> 00:28:49,000
read your own shell script that will do

00:28:44,300 --> 00:28:49,000
that and Jenkees is now getting up

00:28:50,389 --> 00:28:57,450
yeah now you'll see the flow that we

00:28:55,859 --> 00:29:01,309
showed before you'll see the four jobs

00:28:57,450 --> 00:29:06,119
in there to get reflects the same flow

00:29:01,309 --> 00:29:09,539
so its up so I use the password I said

00:29:06,119 --> 00:29:12,389
in template yeah and this is the screen

00:29:09,539 --> 00:29:15,239
so all these four jobs are the jobs that

00:29:12,389 --> 00:29:17,820
I pre-configure up so I put the XML

00:29:15,239 --> 00:29:19,739
files there I can use the Jenkins your

00:29:17,820 --> 00:29:22,889
builder to automatically create those if

00:29:19,739 --> 00:29:26,009
I want so so this is the on the bottom

00:29:22,889 --> 00:29:29,070
you can see the test I think it's barely

00:29:26,009 --> 00:29:30,840
visible but it's called test then you

00:29:29,070 --> 00:29:32,909
have a built here and then you have a

00:29:30,840 --> 00:29:40,080
deploys stage here and you have a deploy

00:29:32,909 --> 00:29:48,649
to production yeah this drinking is

00:29:40,080 --> 00:29:48,649
finished yeah

00:29:51,200 --> 00:29:56,550
so now what I want to show you is what I

00:29:53,940 --> 00:29:58,410
already spoiled which is that the

00:29:56,550 --> 00:30:00,750
Jenkins will automatically be configured

00:29:58,410 --> 00:30:05,780
to have the slave images like the Cooper

00:30:00,750 --> 00:30:09,390
Nettie's configuration already done here

00:30:05,780 --> 00:30:11,240
yeah so the credentials will be said the

00:30:09,390 --> 00:30:13,950
the image stream will be said dr. image

00:30:11,240 --> 00:30:15,210
you know a repository will be set for

00:30:13,950 --> 00:30:24,390
you you know everything will be

00:30:15,210 --> 00:30:26,910
pre-configured yeah the Cooper net is

00:30:24,390 --> 00:30:28,710
plug-in we are using here is done by

00:30:26,910 --> 00:30:31,280
Cooper native white google so it's a

00:30:28,710 --> 00:30:35,580
google jenkins plugin is the official

00:30:31,280 --> 00:30:37,950
plugin through varieties so now i keep

00:30:35,580 --> 00:30:39,810
the build the test so i don't push to

00:30:37,950 --> 00:30:42,330
the source code but i can configure it

00:30:39,810 --> 00:30:44,640
to trigger on the on the new committing

00:30:42,330 --> 00:30:49,680
masters i triggered manually so you see

00:30:44,640 --> 00:30:52,350
that the job is now in queue and now we

00:30:49,680 --> 00:30:56,640
will just wait till drinking in stellar

00:30:52,350 --> 00:30:59,060
brunette is to to spawn a pot it's

00:30:56,640 --> 00:30:59,060
running

00:31:02,700 --> 00:31:07,149
taking some time because when the

00:31:05,080 --> 00:31:08,679
drinking start it's it's still not

00:31:07,149 --> 00:31:11,080
finished with initializing all the

00:31:08,679 --> 00:31:13,059
plugins we have so it takes some time to

00:31:11,080 --> 00:31:14,980
download all the crab and metadata and

00:31:13,059 --> 00:31:18,429
everything and after that it will start

00:31:14,980 --> 00:31:20,110
operating reasonably so yeah I just sit

00:31:18,429 --> 00:31:21,970
here in this queue State waiting for

00:31:20,110 --> 00:31:24,100
that slave to show up and then now it's

00:31:21,970 --> 00:31:26,230
starting to come on yeah so so you can

00:31:24,100 --> 00:31:28,000
see that this is the pot you know Papa

00:31:26,230 --> 00:31:31,480
ship so it started slave automatically

00:31:28,000 --> 00:31:34,029
and in the second the the job should be

00:31:31,480 --> 00:31:36,940
assigned to that slave and you will see

00:31:34,029 --> 00:31:39,730
its console yeah I can you can also tell

00:31:36,940 --> 00:31:40,899
to up here that that's running on the

00:31:39,730 --> 00:31:43,570
slave the other ones are running on the

00:31:40,899 --> 00:31:46,779
master this is the log so you can see

00:31:43,570 --> 00:31:50,140
here it's building remotely on this

00:31:46,779 --> 00:31:53,919
crazy name slave and easy it's running

00:31:50,140 --> 00:31:56,980
inside a ruby 22 CentOS 7 image so what

00:31:53,919 --> 00:31:58,750
is this job is really doing is it gets

00:31:56,980 --> 00:32:01,210
the source code and installed all the

00:31:58,750 --> 00:32:03,730
dependency at executed rake test so it

00:32:01,210 --> 00:32:05,620
will just execute the one unit test so

00:32:03,730 --> 00:32:11,289
we can prove that you can do testing

00:32:05,620 --> 00:32:16,299
here at that was tribute to Jenkins

00:32:11,289 --> 00:32:18,340
developer and now yeah so now the test

00:32:16,299 --> 00:32:21,220
job is done and you can see the bell job

00:32:18,340 --> 00:32:23,529
was automatically started so now we are

00:32:21,220 --> 00:32:25,390
building the image in open shift so if

00:32:23,529 --> 00:32:27,520
we go back to open shift and go to stage

00:32:25,390 --> 00:32:31,090
you can see that that the image for

00:32:27,520 --> 00:32:33,760
sample app is currently being built it's

00:32:31,090 --> 00:32:35,770
a ruby app so you know open ship to

00:32:33,760 --> 00:32:39,279
build your application and push it to

00:32:35,770 --> 00:32:47,799
the registry and that the next step is

00:32:39,279 --> 00:32:49,980
that you have to deploy it to stage come

00:32:47,799 --> 00:32:49,980
on

00:32:50,050 --> 00:32:57,890
yeah and this is the back we found got

00:32:55,670 --> 00:32:59,330
recording this demo so so the build is

00:32:57,890 --> 00:33:01,310
now trying to make sure that the

00:32:59,330 --> 00:33:03,740
application was built and is deployed

00:33:01,310 --> 00:33:08,380
but in this case we are not deploying it

00:33:03,740 --> 00:33:11,870
so it will just Hank for two minutes and

00:33:08,380 --> 00:33:19,430
yeah this was fixed last week so super

00:33:11,870 --> 00:33:21,440
fast just keep this so right now since

00:33:19,430 --> 00:33:25,840
we had the automatic promotion from test

00:33:21,440 --> 00:33:28,190
to build once that's done then we will

00:33:25,840 --> 00:33:30,200
right now it's doing the bills of that

00:33:28,190 --> 00:33:33,830
that was successful in open shift and

00:33:30,200 --> 00:33:36,680
now will manually and you can see the

00:33:33,830 --> 00:33:42,950
promotion status plug in there I'll see

00:33:36,680 --> 00:33:45,380
the console yeah and now well automatic

00:33:42,950 --> 00:33:56,930
will will manually deploy an open shift

00:33:45,380 --> 00:33:59,540
to the stage project there it goes so

00:33:56,930 --> 00:34:02,690
now you can see in the sample app that's

00:33:59,540 --> 00:34:04,820
been deployed out into the stage project

00:34:02,690 --> 00:34:08,950
up top you can see the stage project and

00:34:04,820 --> 00:34:08,950
we've deployed it and that's ready to go

00:34:10,720 --> 00:34:14,899
yet so something like the point of

00:34:13,220 --> 00:34:17,990
production works the same so you kick

00:34:14,899 --> 00:34:19,700
the job and it will deploy the same

00:34:17,990 --> 00:34:21,770
image to production so how this is

00:34:19,700 --> 00:34:24,350
working actually in open shift is that

00:34:21,770 --> 00:34:27,260
we built the doctor image in stage and

00:34:24,350 --> 00:34:28,760
it's you know it's in the registry so

00:34:27,260 --> 00:34:30,530
what you can do in Oakland ship now is

00:34:28,760 --> 00:34:33,320
that you can tag the image from one

00:34:30,530 --> 00:34:35,510
rigidity to one repository to another so

00:34:33,320 --> 00:34:37,700
in open shift every project has its own

00:34:35,510 --> 00:34:40,399
repository in this case you have the

00:34:37,700 --> 00:34:42,500
stage repository in dr. registry and you

00:34:40,399 --> 00:34:45,440
have a prod repository in Tokyo registry

00:34:42,500 --> 00:34:48,169
so to do the promotion basically that

00:34:45,440 --> 00:34:51,860
that that means that you run OC tag

00:34:48,169 --> 00:34:54,020
stage / sample app latest or whatever

00:34:51,860 --> 00:34:56,810
docker image you want to promote to

00:34:54,020 --> 00:34:59,240
prote / sample up something right and

00:34:56,810 --> 00:35:02,300
that will basically move the it will

00:34:59,240 --> 00:35:03,860
link the image from stage to prod and if

00:35:02,300 --> 00:35:05,780
road you have a deployment config that

00:35:03,860 --> 00:35:07,430
is a configure to trigger deployment

00:35:05,780 --> 00:35:08,630
automatically if there is a new image it

00:35:07,430 --> 00:35:16,160
will automatically deploy your

00:35:08,630 --> 00:35:19,640
application I mean I think that does it

00:35:16,160 --> 00:35:21,470
it's up to the slides no that's

00:35:19,640 --> 00:35:22,910
basically the whole pipeline showing and

00:35:21,470 --> 00:35:29,030
jenkins and open shift in that

00:35:22,910 --> 00:35:31,310
connection yeah so this was really

00:35:29,030 --> 00:35:37,760
simple you know because Europe what the

00:35:31,310 --> 00:35:39,530
hell is this so so this was really

00:35:37,760 --> 00:35:41,870
simple example when we have just one

00:35:39,530 --> 00:35:43,850
application that has just one you know

00:35:41,870 --> 00:35:46,220
source of source code so it is really

00:35:43,850 --> 00:35:48,380
simple a ruby application but in the

00:35:46,220 --> 00:35:50,420
real world that what we expect from

00:35:48,380 --> 00:35:54,500
people to build is the application that

00:35:50,420 --> 00:35:56,510
consists from 10 20 50 different micro

00:35:54,500 --> 00:35:59,150
services and all these micro services

00:35:56,510 --> 00:36:01,430
will be deployed as containers or has it

00:35:59,150 --> 00:36:02,870
their own services inside open shift and

00:36:01,430 --> 00:36:06,500
they will talk each other and provide

00:36:02,870 --> 00:36:07,880
the application itself so I know the

00:36:06,500 --> 00:36:09,800
marketing hates to call it up up

00:36:07,880 --> 00:36:13,610
application what we call it application

00:36:09,800 --> 00:36:15,350
now and you know so so what this is

00:36:13,610 --> 00:36:17,350
really useful for if you have this

00:36:15,350 --> 00:36:20,000
scenario where you have a different

00:36:17,350 --> 00:36:21,710
services and you need to make sure they

00:36:20,000 --> 00:36:23,450
all talk each other and they work each

00:36:21,710 --> 00:36:25,880
other right you really need to have

00:36:23,450 --> 00:36:27,860
something like a CD CD cci CD flow

00:36:25,880 --> 00:36:29,720
otherwise you know you will just shoot

00:36:27,860 --> 00:36:31,910
yourself after some time because you

00:36:29,720 --> 00:36:34,430
know the depends if one container gets

00:36:31,910 --> 00:36:36,650
broken that that can mean your whole

00:36:34,430 --> 00:36:38,120
application is broken right so so it's

00:36:36,650 --> 00:36:39,950
really important to test the whole

00:36:38,120 --> 00:36:41,750
deployment for us like the you know the

00:36:39,950 --> 00:36:44,660
end-to-end testing you know that the

00:36:41,750 --> 00:36:46,640
whole thing testing and then promote the

00:36:44,660 --> 00:36:49,910
thing that works and was verified by the

00:36:46,640 --> 00:36:52,190
QA testers or whoever to production and

00:36:49,910 --> 00:36:53,930
what took it really allows us here we

00:36:52,190 --> 00:36:56,810
don't we are not working only with the

00:36:53,930 --> 00:36:58,430
source code now so in in the past when

00:36:56,810 --> 00:37:00,590
you want to promote something you say I

00:36:58,430 --> 00:37:02,570
want to promote this git commit to

00:37:00,590 --> 00:37:04,760
production right that's not longer true

00:37:02,570 --> 00:37:07,190
now you can promote this docker image

00:37:04,760 --> 00:37:09,770
that has the application built from this

00:37:07,190 --> 00:37:12,080
comment which what will bring us is that

00:37:09,770 --> 00:37:14,240
you promote the whole environment the

00:37:12,080 --> 00:37:14,900
whole operation system everything you

00:37:14,240 --> 00:37:18,170
know

00:37:14,900 --> 00:37:21,680
as a you know as the think that you are

00:37:18,170 --> 00:37:23,779
going to promote to production so it's

00:37:21,680 --> 00:37:26,180
not just the single source code commit

00:37:23,779 --> 00:37:28,880
is the whole environment so that's what

00:37:26,180 --> 00:37:31,339
dr. allow us to do now yeah so in

00:37:28,880 --> 00:37:32,960
conclusion it should be fairly easy to

00:37:31,339 --> 00:37:35,869
take what we've done in this example

00:37:32,960 --> 00:37:40,700
repo and create your own CDC ICD

00:37:35,869 --> 00:37:43,970
pipeline the this plug-in and this

00:37:40,700 --> 00:37:46,430
features should show up in in release 33

00:37:43,970 --> 00:37:48,020
of open shift which i think is about the

00:37:46,430 --> 00:37:53,059
summit timeframe or something like that

00:37:48,020 --> 00:37:55,130
ah and we some things that we'd like to

00:37:53,059 --> 00:37:57,410
add or I'd like to add is the delivery

00:37:55,130 --> 00:37:59,299
pipe lines or more of a visualization

00:37:57,410 --> 00:38:01,490
and Jenkins of the whole flow so we can

00:37:59,299 --> 00:38:03,289
see kind of what openshift shows

00:38:01,490 --> 00:38:05,059
graphically but a great to see that kind

00:38:03,289 --> 00:38:07,970
of pie it's a manager's view you know

00:38:05,059 --> 00:38:10,640
like icons and you know stuff moving

00:38:07,970 --> 00:38:12,680
around a nice and pretty and then

00:38:10,640 --> 00:38:14,960
there's some features to add to jdb

00:38:12,680 --> 00:38:17,240
which i'd like to work on just to extend

00:38:14,960 --> 00:38:18,700
the promotion plugin because there's

00:38:17,240 --> 00:38:23,930
some options that aren't available today

00:38:18,700 --> 00:38:27,680
through that and i think that's it we're

00:38:23,930 --> 00:38:30,230
open for questions please yeah we really

00:38:27,680 --> 00:38:32,150
want to so it's hold up what one sent

00:38:30,230 --> 00:38:34,430
with one final word so so what we're

00:38:32,150 --> 00:38:36,319
looking for is that I know that you a

00:38:34,430 --> 00:38:37,670
lot of you will not ask questions now

00:38:36,319 --> 00:38:39,770
because you are shy and there's a lot of

00:38:37,670 --> 00:38:41,930
people here so we really want to talk

00:38:39,770 --> 00:38:44,089
with people about what are they use

00:38:41,930 --> 00:38:45,829
cases what I trying to build so we can

00:38:44,089 --> 00:38:48,349
make this stuff really helpful for them

00:38:45,829 --> 00:38:50,210
I mean you know this works for the

00:38:48,349 --> 00:38:52,789
sample app is Ruby application but if

00:38:50,210 --> 00:38:54,559
you run some crazy skala something with

00:38:52,789 --> 00:38:56,089
millions of dependencies or something

00:38:54,559 --> 00:38:58,369
and you have like a 10 different

00:38:56,089 --> 00:38:59,779
services or just crazy scenarios we

00:38:58,369 --> 00:39:01,730
really want to hear about these crazy

00:38:59,779 --> 00:39:03,859
scenarios because we want to learn it

00:39:01,730 --> 00:39:07,760
you know to make things better for you

00:39:03,859 --> 00:39:10,180
as a developer's so yeah now you can ask

00:39:07,760 --> 00:39:10,180
questions

00:39:13,230 --> 00:39:21,310
44 I build or test like how do you map a

00:39:18,870 --> 00:39:27,520
project to an image like if it needs to

00:39:21,310 --> 00:39:30,070
a specific environment to the test in so

00:39:27,520 --> 00:39:32,680
the Builder image i use flew convert to

00:39:30,070 --> 00:39:34,240
slave that that can be whatever image

00:39:32,680 --> 00:39:36,400
you can you can define whatever image

00:39:34,240 --> 00:39:38,440
you want there so it can be your custom

00:39:36,400 --> 00:39:40,470
image it can be whatever image it should

00:39:38,440 --> 00:39:42,280
it doesn't need to be the official

00:39:40,470 --> 00:39:44,620
openshift image or something like that

00:39:42,280 --> 00:39:47,440
so the template i was showing on the

00:39:44,620 --> 00:39:49,180
demo it has this image name or something

00:39:47,440 --> 00:39:52,090
like that needs right so it was a ruby

00:39:49,180 --> 00:39:54,400
dash 2 to the edge CentOS 7 so that's

00:39:52,090 --> 00:39:56,590
the name of the image stream that exists

00:39:54,400 --> 00:39:58,330
in open shift so if you create your own

00:39:56,590 --> 00:40:01,180
builder image and create your image

00:39:58,330 --> 00:40:04,060
stream you can just use that name there

00:40:01,180 --> 00:40:06,670
and should work so one of the patterns

00:40:04,060 --> 00:40:08,920
that I've been interested in is is like

00:40:06,670 --> 00:40:10,660
container izing your test suite and then

00:40:08,920 --> 00:40:12,760
making that a slave through that

00:40:10,660 --> 00:40:14,380
mechanism and all of a sudden you know

00:40:12,760 --> 00:40:16,120
maybe it's an ansible playbook that you

00:40:14,380 --> 00:40:18,550
kick off and and you do some work and

00:40:16,120 --> 00:40:20,530
and now you've got a lot of things you

00:40:18,550 --> 00:40:24,120
can do so it's an interesting pattern

00:40:20,530 --> 00:40:24,120
that can be extended however yeah

00:40:30,700 --> 00:40:36,770
guys sorry view cover this you know

00:40:34,130 --> 00:40:39,020
maybe what's the how is it similar to

00:40:36,770 --> 00:40:41,060
what fabric eight is doing or what the

00:40:39,020 --> 00:40:43,460
manager who is doing can you find any

00:40:41,060 --> 00:40:45,260
similarities or differences yeah it's

00:40:43,460 --> 00:40:46,430
really question I mean fabricate is also

00:40:45,260 --> 00:40:48,710
putting something together it's similar

00:40:46,430 --> 00:40:50,840
but I think they have some specific use

00:40:48,710 --> 00:40:53,390
cases when it comes to java applications

00:40:50,840 --> 00:40:55,610
I don't know if they're this is more I

00:40:53,390 --> 00:40:57,350
think a general use for any type of

00:40:55,610 --> 00:40:58,850
application and that's what we were

00:40:57,350 --> 00:41:01,790
going for is to make it as general as

00:40:58,850 --> 00:41:03,920
possible they also use I think the

00:41:01,790 --> 00:41:06,830
workflow plug in the Jenkins to

00:41:03,920 --> 00:41:09,230
accommodate some of this and the front

00:41:06,830 --> 00:41:12,080
end to that is basically like a groovy

00:41:09,230 --> 00:41:14,090
file that people really have to learn

00:41:12,080 --> 00:41:16,460
how to use and that's I think where JJ

00:41:14,090 --> 00:41:18,620
bees a little bit gives you some benefit

00:41:16,460 --> 00:41:20,210
it's a lot clearer to follow I took like

00:41:18,620 --> 00:41:21,500
yeah I think like that there are two

00:41:20,210 --> 00:41:23,480
problems that we are trying to solve

00:41:21,500 --> 00:41:25,760
that the fabricated guys are trying to

00:41:23,480 --> 00:41:28,100
create like really first-class drinking

00:41:25,760 --> 00:41:29,720
CDC I experience for java tables

00:41:28,100 --> 00:41:31,970
application or java based applications

00:41:29,720 --> 00:41:33,770
which is great goal I mean like they are

00:41:31,970 --> 00:41:36,260
doing great job doing that and like

00:41:33,770 --> 00:41:38,180
they'd demons are awesome the problem is

00:41:36,260 --> 00:41:40,370
that we want to make this more generic

00:41:38,180 --> 00:41:42,170
for the other people right so if you

00:41:40,370 --> 00:41:44,420
don't write like if you don't use maven

00:41:42,170 --> 00:41:45,890
or you don't use gel tables or you know

00:41:44,420 --> 00:41:47,540
you want to build a ruby your

00:41:45,890 --> 00:41:49,220
application or no J's application or

00:41:47,540 --> 00:41:51,500
patent application we don't care what

00:41:49,220 --> 00:41:53,990
builder you have so we want to provide

00:41:51,500 --> 00:41:55,460
the pieces of the legal to people to

00:41:53,990 --> 00:42:00,440
people and taking then use it to

00:41:55,460 --> 00:42:01,940
construct their flaws basically so how

00:42:00,440 --> 00:42:04,130
many JQ is fitting here I don't know

00:42:01,940 --> 00:42:06,080
really exactly i hope this a lot of any

00:42:04,130 --> 00:42:08,780
JQ is it's really cloud forms to which

00:42:06,080 --> 00:42:12,020
is the which is a tool that you can use

00:42:08,780 --> 00:42:15,020
them to manage or orchestrate the whole

00:42:12,020 --> 00:42:16,640
cluster for Billy's one level on top so

00:42:15,020 --> 00:42:18,230
he's sitting there and monitoring all

00:42:16,640 --> 00:42:20,630
the notes that open ship is using

00:42:18,230 --> 00:42:22,160
getting information from them are

00:42:20,630 --> 00:42:23,900
collecting data provide you know

00:42:22,160 --> 00:42:26,510
creating all these charts and managers

00:42:23,900 --> 00:42:28,340
views and so on so you know what's going

00:42:26,510 --> 00:42:30,530
on in open shift in the cluster but it's

00:42:28,340 --> 00:42:33,140
not really like a something thats

00:42:30,530 --> 00:42:34,640
related to the applications are building

00:42:33,140 --> 00:42:37,360
the applications you know from

00:42:34,640 --> 00:42:37,360
developers

00:42:37,950 --> 00:42:42,420
I'm not going there soon you to scream

00:42:58,319 --> 00:43:03,430
we know about that yeah so this is a

00:43:01,690 --> 00:43:05,710
very common question so in open ship

00:43:03,430 --> 00:43:08,559
builds you have some cold concept called

00:43:05,710 --> 00:43:10,569
incremental builds where you can you can

00:43:08,559 --> 00:43:13,089
if you already build something and that

00:43:10,569 --> 00:43:14,979
image exists on the note will reuse that

00:43:13,089 --> 00:43:17,319
image so we don't download the whole

00:43:14,979 --> 00:43:19,239
internet over and over we know that

00:43:17,319 --> 00:43:21,339
there is a limitation if you have a

00:43:19,239 --> 00:43:23,979
multiple nodes you need to pull the

00:43:21,339 --> 00:43:26,019
image from in one node to another you

00:43:23,979 --> 00:43:28,599
know that's one case you know so it's

00:43:26,019 --> 00:43:30,160
slow down the build as well so it is

00:43:28,599 --> 00:43:31,960
like a chicken egg problem right like

00:43:30,160 --> 00:43:33,519
you either gonna download all the

00:43:31,960 --> 00:43:35,710
dependencies from maven or you're going

00:43:33,519 --> 00:43:38,529
to download the entire doctor image that

00:43:35,710 --> 00:43:41,229
you build previously so the answer to

00:43:38,529 --> 00:43:42,940
these could be used one doctor registry

00:43:41,229 --> 00:43:45,519
that has a shared storage across the

00:43:42,940 --> 00:43:47,319
cluster that's one answer for me you

00:43:45,519 --> 00:43:50,079
know the other another a sphere is that

00:43:47,319 --> 00:43:52,119
we recently added docker source input to

00:43:50,079 --> 00:43:54,489
the build so you can specify a docker

00:43:52,119 --> 00:43:56,469
image that we pull and suck the

00:43:54,489 --> 00:43:59,559
artifacts out of it and put it into the

00:43:56,469 --> 00:44:02,880
world thank you you are out of time you

00:43:59,559 --> 00:44:02,880
can continue the discussion yeah

00:44:42,570 --> 00:44:45,410
home

00:46:59,710 --> 00:47:07,869
oh gee

00:47:12,240 --> 00:47:26,220
chicaza sobbing another resolution

00:47:35,350 --> 00:47:37,980
toke

00:47:41,319 --> 00:47:44,369

YouTube URL: https://www.youtube.com/watch?v=rLG4HCycohY


