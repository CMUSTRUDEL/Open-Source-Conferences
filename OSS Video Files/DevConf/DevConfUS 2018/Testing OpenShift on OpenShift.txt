Title: Testing OpenShift on OpenShift
Publication date: 2019-02-25
Playlist: DevConfUS 2018
Description: 
	OKD  is a container orchestration platform that is being rapidly adopted by tech ecosystems. Itâ€™s one of the products with many versatile features for container management. The current presentation illustrates a process to run end to end conformance tests openshift origin by running it on top of openshift origin with help of privileged containers and multi cloud provisioning tool linchpin.
Captions: 
	00:00:21,560 --> 00:00:32,340
I'll be ready alright welcome to the

00:00:28,050 --> 00:00:37,199
10:40 talk on testing open ships on open

00:00:32,340 --> 00:00:39,449
shipped eagerly yeah so hello guys my

00:00:37,199 --> 00:00:43,440
name is Sam Baron Kashyap Lala Bundy and

00:00:39,449 --> 00:00:45,899
I go by name SK and my work for

00:00:43,440 --> 00:00:47,219
continuous product ization team and I

00:00:45,899 --> 00:00:49,230
have been working on a project called

00:00:47,219 --> 00:00:54,440
the CI pipeline which is a part of

00:00:49,230 --> 00:00:57,329
CentOS pass safe community and today

00:00:54,440 --> 00:00:58,649
today we are in the current talk we are

00:00:57,329 --> 00:01:02,190
going to discuss about the following

00:00:58,649 --> 00:01:04,559
things like we are going to test open

00:01:02,190 --> 00:01:08,580
shift on open shaft like use case and

00:01:04,559 --> 00:01:12,000
how is it feasible for us and how did we

00:01:08,580 --> 00:01:14,760
like work on it and why do we need open

00:01:12,000 --> 00:01:16,680
shift on open shirt and there and this

00:01:14,760 --> 00:01:18,780
basic terminology we need to understand

00:01:16,680 --> 00:01:21,960
like the whole whole process like of the

00:01:18,780 --> 00:01:25,020
container slip word and open shell again

00:01:21,960 --> 00:01:26,460
containers that's repeated and about the

00:01:25,020 --> 00:01:29,430
privileged containers and what are the

00:01:26,460 --> 00:01:31,470
differences between them and like why do

00:01:29,430 --> 00:01:34,950
we need open shift on multiple clouds

00:01:31,470 --> 00:01:38,610
and how are we deploying open shift on

00:01:34,950 --> 00:01:40,650
multiple clouds and how is the whole

00:01:38,610 --> 00:01:43,980
process is enabled by it will called as

00:01:40,650 --> 00:01:45,840
linchpin and we'll have a short

00:01:43,980 --> 00:01:48,360
introduction about Lexie I try pipeline

00:01:45,840 --> 00:01:49,650
project and we'll have a demo and we'll

00:01:48,360 --> 00:01:55,530
be concluding the whole presentation

00:01:49,650 --> 00:01:58,980
there going ahead like our use case now

00:01:55,530 --> 00:02:02,430
is to like install and run end-to-end

00:01:58,980 --> 00:02:04,710
tests of open shift on a VM which is

00:02:02,430 --> 00:02:06,950
running inside an open shaped container

00:02:04,710 --> 00:02:08,989
so it's like we are running

00:02:06,950 --> 00:02:11,180
nested virtualization scenario layer

00:02:08,989 --> 00:02:14,930
where we are running a virtual machine

00:02:11,180 --> 00:02:17,680
instead inside a container or which is

00:02:14,930 --> 00:02:20,239
already running on a OpenShift VM and

00:02:17,680 --> 00:02:23,989
why do we need it like because of the

00:02:20,239 --> 00:02:26,209
regular system updates we found a need

00:02:23,989 --> 00:02:28,580
to test OpenShift on like multiple

00:02:26,209 --> 00:02:31,130
destroys like for example CentOS and

00:02:28,580 --> 00:02:33,950
Fedora like our Fedora is greatly very

00:02:31,130 --> 00:02:37,370
going very fast like we have federal 26

00:02:33,950 --> 00:02:40,069
27 28 and 29 is and beam may be innocent

00:02:37,370 --> 00:02:42,560
beta and every time like whenever there

00:02:40,069 --> 00:02:44,209
is an update they there is a need like

00:02:42,560 --> 00:02:47,569
whether the OpenShift works on that

00:02:44,209 --> 00:02:49,150
update or not so like of that that is

00:02:47,569 --> 00:02:53,180
the thing which we are going to address

00:02:49,150 --> 00:02:56,180
and and well and we also need to check

00:02:53,180 --> 00:02:59,480
out like why or like how the open shift

00:02:56,180 --> 00:03:01,670
works with multiple deployments and why

00:02:59,480 --> 00:03:04,549
does it fail and how does it fail in in

00:03:01,670 --> 00:03:08,269
multiple vistas also so in that case

00:03:04,549 --> 00:03:10,420
like we need open ship we need to test

00:03:08,269 --> 00:03:14,900
open shipped in a very feasible manner

00:03:10,420 --> 00:03:16,340
using open shift itself so before we go

00:03:14,900 --> 00:03:19,180
ahead with the talk like these are the

00:03:16,340 --> 00:03:22,579
things which you need to know about like

00:03:19,180 --> 00:03:24,829
containers like most of the people who

00:03:22,579 --> 00:03:26,299
are attending this this talk should be

00:03:24,829 --> 00:03:27,829
knowing about the containers my

00:03:26,299 --> 00:03:30,700
containers are nothing but an isolated

00:03:27,829 --> 00:03:34,220
user spaces slick which acts as a

00:03:30,700 --> 00:03:36,560
processes running a shared kernel which

00:03:34,220 --> 00:03:40,700
which can simulate your work and like

00:03:36,560 --> 00:03:43,370
environment like federal servers or like

00:03:40,700 --> 00:03:45,950
the central servers in a user isolated

00:03:43,370 --> 00:03:48,709
user spaces and we have like privileged

00:03:45,950 --> 00:03:52,519
containers these are like the containers

00:03:48,709 --> 00:03:54,440
which which gain the access to the host

00:03:52,519 --> 00:03:57,319
kernel and we'll be discussing more

00:03:54,440 --> 00:04:00,769
about that and openshift is a container

00:03:57,319 --> 00:04:02,870
management platform which which is based

00:04:00,769 --> 00:04:05,260
on kubernetes distribution which

00:04:02,870 --> 00:04:08,209
recently changed its name to okay the

00:04:05,260 --> 00:04:09,650
origin kubernetes distribution so I

00:04:08,209 --> 00:04:12,500
should be using that term

00:04:09,650 --> 00:04:15,560
or like by promoting that instead of

00:04:12,500 --> 00:04:19,609
like taking openshift name and finally

00:04:15,560 --> 00:04:22,039
like we will be we should also be

00:04:19,609 --> 00:04:24,199
knowing about the lipid demons where

00:04:22,039 --> 00:04:27,050
like live what is an open source API

00:04:24,199 --> 00:04:29,210
which is used for managing different

00:04:27,050 --> 00:04:31,789
kinds of virtualization platforms and

00:04:29,210 --> 00:04:34,610
which are like all different kinds of

00:04:31,789 --> 00:04:37,520
virtualization hypervisors like Xen

00:04:34,610 --> 00:04:40,310
hypervisor or KBR Mike cetera though you

00:04:37,520 --> 00:04:42,620
had let's talk about like are the

00:04:40,310 --> 00:04:45,080
container verses a privileged container

00:04:42,620 --> 00:04:48,560
so when when you talk about a container

00:04:45,080 --> 00:04:50,780
like our it is just a process or it is

00:04:48,560 --> 00:04:56,180
just a command running inside a user

00:04:50,780 --> 00:04:58,340
space well then why do we need why do we

00:04:56,180 --> 00:05:00,620
need a privileged container in place

00:04:58,340 --> 00:05:03,880
because like some like most of the times

00:05:00,620 --> 00:05:06,020
containers are kind of secured by

00:05:03,880 --> 00:05:08,690
containers are secured by a container

00:05:06,020 --> 00:05:11,419
engine which are which run on top of an

00:05:08,690 --> 00:05:14,389
operating system which is kind of using

00:05:11,419 --> 00:05:16,039
like the kernel and which and it is and

00:05:14,389 --> 00:05:18,410
it is running on an infrastructure

00:05:16,039 --> 00:05:21,199
however they come in in case of

00:05:18,410 --> 00:05:23,030
privileged containers the containers

00:05:21,199 --> 00:05:25,699
kind of pipe as this container engine

00:05:23,030 --> 00:05:28,760
and get access to the operating system

00:05:25,699 --> 00:05:30,680
and the kernel devices directly which we

00:05:28,760 --> 00:05:34,220
might or might not want to do like in

00:05:30,680 --> 00:05:37,699
certain cases because unless unless the

00:05:34,220 --> 00:05:40,669
container is unless the container needs

00:05:37,699 --> 00:05:42,710
to use the device is shared by the

00:05:40,669 --> 00:05:45,260
kernel we shouldn't be using privileged

00:05:42,710 --> 00:05:48,500
containers because there there is a risk

00:05:45,260 --> 00:05:51,919
where the container can run commands

00:05:48,500 --> 00:05:55,070
like RM minus r slash and liquor remove

00:05:51,919 --> 00:05:57,169
the whole host or all at once so which

00:05:55,070 --> 00:06:00,470
we don't want it to happen I have a

00:05:57,169 --> 00:06:03,060
perfect analogy for this like where have

00:06:00,470 --> 00:06:05,460
you guys used like hotels and Airbnb you

00:06:03,060 --> 00:06:09,120
definitely our views so what do you

00:06:05,460 --> 00:06:12,240
think about about like Airbnb so is it

00:06:09,120 --> 00:06:13,770
is it secure enough or liquor which

00:06:12,240 --> 00:06:17,660
which one do you prefer we're staying in

00:06:13,770 --> 00:06:20,730
a hotel or like staying in an urban aura

00:06:17,660 --> 00:06:23,730
yeah if my company is kind of sponsoring

00:06:20,730 --> 00:06:26,130
me like to stay in like a hotel then I

00:06:23,730 --> 00:06:29,190
would definitely prefer photos but in

00:06:26,130 --> 00:06:32,040
some cases Blake are in case of Airbnb

00:06:29,190 --> 00:06:34,650
you kind of share the risk share the

00:06:32,040 --> 00:06:36,690
resources like kitchen and like the wall

00:06:34,650 --> 00:06:39,540
sometimes the washrooms I have pretty

00:06:36,690 --> 00:06:41,340
birth experiences with Airbnb and great

00:06:39,540 --> 00:06:43,380
experiences too so

00:06:41,340 --> 00:06:44,729
Airbnb kind of acts as a privileged

00:06:43,380 --> 00:06:48,150
container like ah

00:06:44,729 --> 00:06:50,880
a person who is using Airbnb can lick

00:06:48,150 --> 00:06:53,310
can be a lick well-mannered person and

00:06:50,880 --> 00:06:55,830
make use of the whole like accommodation

00:06:53,310 --> 00:06:57,540
very in a very good way or he can

00:06:55,830 --> 00:06:59,010
destroy the house he can set your house

00:06:57,540 --> 00:07:00,360
on your house and fire

00:06:59,010 --> 00:07:02,040
so that's what happens with the

00:07:00,360 --> 00:07:03,510
privileged containers maker if you are

00:07:02,040 --> 00:07:06,630
not being careful with the privileged

00:07:03,510 --> 00:07:09,390
containers the whole infrastructure is

00:07:06,630 --> 00:07:12,539
on fire like a people might delete the

00:07:09,390 --> 00:07:16,080
devices or I'd care it can go like her

00:07:12,539 --> 00:07:18,000
in an Arab state whereas in in terms of

00:07:16,080 --> 00:07:20,010
they are in when we check out the hotels

00:07:18,000 --> 00:07:22,850
these are like the secured spaces which

00:07:20,010 --> 00:07:25,650
are of the security mechanisms like

00:07:22,850 --> 00:07:27,990
security mechanisms of like in security

00:07:25,650 --> 00:07:30,300
guards or like patrolling around and

00:07:27,990 --> 00:07:33,060
they are they have access to the cops at

00:07:30,300 --> 00:07:36,300
any point of time and each room is kind

00:07:33,060 --> 00:07:39,479
of on its own which which doesn't share

00:07:36,300 --> 00:07:42,360
the resources and hotels are like have

00:07:39,479 --> 00:07:44,580
the best service also because like her

00:07:42,360 --> 00:07:45,990
hotel management is kind of responsible

00:07:44,580 --> 00:07:48,930
for maintaining the rooms

00:07:45,990 --> 00:07:51,710
whereas in kind of in terms of Airbnb

00:07:48,930 --> 00:07:54,510
the whole Blake the guests are kind of

00:07:51,710 --> 00:07:58,020
morally obligated to clean up their

00:07:54,510 --> 00:08:01,820
rooms like when the glue go away but in

00:07:58,020 --> 00:08:04,919
hotels it's not the case so going ahead

00:08:01,820 --> 00:08:07,480
why do we need open shift on multiple

00:08:04,919 --> 00:08:10,090
clothes so have recently

00:08:07,480 --> 00:08:12,490
like we have seen OpenShift popping up

00:08:10,090 --> 00:08:16,120
on every type of cloud provider a coffin

00:08:12,490 --> 00:08:18,340
shipped on AWS OpenShift on our Shore in

00:08:16,120 --> 00:08:20,860
collaboration with Red Hat and open chef

00:08:18,340 --> 00:08:22,750
can make Google cloud platform so that

00:08:20,860 --> 00:08:25,060
there can be like many scenarios like

00:08:22,750 --> 00:08:27,130
which wheel you want to use so they've

00:08:25,060 --> 00:08:29,200
even like you you would like to run

00:08:27,130 --> 00:08:31,660
openshift on your local machine to offer

00:08:29,200 --> 00:08:33,580
your development environment so but

00:08:31,660 --> 00:08:36,070
there must be a better way to choose

00:08:33,580 --> 00:08:39,550
cloud providers like there there must be

00:08:36,070 --> 00:08:42,610
like an easier way for your deployments

00:08:39,550 --> 00:08:44,800
to happen so advantage this would be

00:08:42,610 --> 00:08:46,960
like you can choose what you want to

00:08:44,800 --> 00:08:49,930
take when you choose multiple providers

00:08:46,960 --> 00:08:52,240
yeah in some cases like Amazon is like

00:08:49,930 --> 00:08:54,310
more costlier like it's just an example

00:08:52,240 --> 00:08:56,860
it might not be true in real time

00:08:54,310 --> 00:08:59,170
scenarios Amazon might be more cost here

00:08:56,860 --> 00:09:01,210
in terms of storage who believe cut

00:08:59,170 --> 00:09:04,150
downs it cost like every car every three

00:09:01,210 --> 00:09:06,850
months to compete with Amazon so I might

00:09:04,150 --> 00:09:09,460
want to run my open ship deployments on

00:09:06,850 --> 00:09:11,590
Google Cloud maybe like Amazon is more

00:09:09,460 --> 00:09:14,190
efficient efficient in terms of storage

00:09:11,590 --> 00:09:17,110
so I want to keep the storage on Amazon

00:09:14,190 --> 00:09:18,730
but I would like to run my machines on

00:09:17,110 --> 00:09:22,090
Google Cloud so I want to connect them

00:09:18,730 --> 00:09:25,120
together like that that is like very

00:09:22,090 --> 00:09:28,000
difficult these days because each cloud

00:09:25,120 --> 00:09:30,520
provider has its own API and it's very

00:09:28,000 --> 00:09:32,830
difficult to connect them and the person

00:09:30,520 --> 00:09:34,900
who is using those API Slyke should have

00:09:32,830 --> 00:09:38,670
intense to my knowledge of like both the

00:09:34,900 --> 00:09:41,470
cloud providers at any point of time and

00:09:38,670 --> 00:09:43,960
like when we curve when we kind of

00:09:41,470 --> 00:09:47,670
deploy the whole infrastructure on multi

00:09:43,960 --> 00:09:50,380
cloud bases I'm pretty sure that like a

00:09:47,670 --> 00:09:53,050
Google cloud on Amazon like both

00:09:50,380 --> 00:09:55,540
wouldn't be down like at the same time

00:09:53,050 --> 00:09:57,490
they come there so there will be less

00:09:55,540 --> 00:09:59,050
down times and there might be less

00:09:57,490 --> 00:10:01,440
latency is like according to the

00:09:59,050 --> 00:10:05,050
region's which they actually offer

00:10:01,440 --> 00:10:08,320
whether it be dreamy like our if we have

00:10:05,050 --> 00:10:12,010
to a tool that does the whole like multi

00:10:08,320 --> 00:10:14,500
cloud platform deployments so there we

00:10:12,010 --> 00:10:16,330
get the Thule Carla's linchpin so

00:10:14,500 --> 00:10:18,670
linchpin is a collection of ants with

00:10:16,330 --> 00:10:21,370
playbooks modules and life curves and

00:10:18,670 --> 00:10:23,230
simple Python scripts which enable this

00:10:21,370 --> 00:10:26,170
cross cloud deployments and multi cloud

00:10:23,230 --> 00:10:28,390
deployments going ahead like linchpin

00:10:26,170 --> 00:10:29,920
does have its own terminology maker

00:10:28,390 --> 00:10:33,130
which you need to understand before we

00:10:29,920 --> 00:10:35,010
use linchpin linchpin has workspaces of

00:10:33,130 --> 00:10:37,269
their workspaces are nothing but a

00:10:35,010 --> 00:10:39,459
collection of files which are generated

00:10:37,269 --> 00:10:41,950
to manage your multi cloud deployments

00:10:39,459 --> 00:10:43,690
or it's not difficult to like create a

00:10:41,950 --> 00:10:45,750
workspace it's just a simple command

00:10:43,690 --> 00:10:49,810
called a linchpin in it and it just

00:10:45,750 --> 00:10:52,300
creates your workspace magically and we

00:10:49,810 --> 00:10:54,550
have a pin file there which is starting

00:10:52,300 --> 00:10:58,390
for entry point for linchpin to grab

00:10:54,550 --> 00:11:00,940
details from and they have topologies

00:10:58,390 --> 00:11:03,370
and layouts each topology constitutes of

00:11:00,940 --> 00:11:05,140
different resource definitions of like

00:11:03,370 --> 00:11:08,980
multiple clouds which would be seeing in

00:11:05,140 --> 00:11:11,560
the upcoming slides and we have we have

00:11:08,980 --> 00:11:15,310
layouts to generate multi-cloud

00:11:11,560 --> 00:11:16,839
inventories automatically based on based

00:11:15,310 --> 00:11:18,910
on the data which we fetch from the

00:11:16,839 --> 00:11:23,050
different cloud providers and the best

00:11:18,910 --> 00:11:26,380
part of linchpin is the hooks so hooks

00:11:23,050 --> 00:11:28,360
are something which you which access

00:11:26,380 --> 00:11:30,910
like a free provision and the post

00:11:28,360 --> 00:11:33,910
provision scenario flick based scripts

00:11:30,910 --> 00:11:36,959
which you can run which can enable like

00:11:33,910 --> 00:11:39,220
things like open shaft installations

00:11:36,959 --> 00:11:41,560
going ahead this is the linchpin flow

00:11:39,220 --> 00:11:44,050
like our linchpin if you see linchpin as

00:11:41,560 --> 00:11:46,420
a black box and if it takes two policy

00:11:44,050 --> 00:11:48,579
and layout as an input and it gives you

00:11:46,420 --> 00:11:50,709
output file and it gives you ansible

00:11:48,579 --> 00:11:53,410
inventory if there is a layout and it

00:11:50,709 --> 00:11:56,320
connects to all the cloud providers like

00:11:53,410 --> 00:11:58,570
AWS open star GC and there are like six

00:11:56,320 --> 00:11:59,020
to seven providers like which we support

00:11:58,570 --> 00:12:01,570
right now

00:11:59,020 --> 00:12:04,149
a true linchpin and it provisions the

00:12:01,570 --> 00:12:07,120
instances so though all outputs will be

00:12:04,149 --> 00:12:10,530
gathered from the API is provided by the

00:12:07,120 --> 00:12:14,040
cloud providers and

00:12:10,530 --> 00:12:16,350
Lynch - lynchpin hooks works on the lake

00:12:14,040 --> 00:12:18,870
generator inventories so they run

00:12:16,350 --> 00:12:23,510
ansible playbooks Python scripts are

00:12:18,870 --> 00:12:26,130
like no J scripts Ruby scripts on

00:12:23,510 --> 00:12:28,680
generator inventories once the pro like

00:12:26,130 --> 00:12:31,230
resources are up and running and they

00:12:28,680 --> 00:12:32,640
created deployment using some magic

00:12:31,230 --> 00:12:35,940
there there is no ma'am there is no

00:12:32,640 --> 00:12:38,960
magic in between but it does use ansible

00:12:35,940 --> 00:12:41,940
so which we call it as magic because

00:12:38,960 --> 00:12:45,960
that is a pretty good tool which uses

00:12:41,940 --> 00:12:48,510
SSH which I always like wonder like how

00:12:45,960 --> 00:12:51,270
how come SSH can be an integral part of

00:12:48,510 --> 00:12:54,330
deployments so that that's that's what I

00:12:51,270 --> 00:12:56,840
feel so magic so we use ansible in

00:12:54,330 --> 00:13:00,180
between to deploy the inventories and

00:12:56,840 --> 00:13:03,180
going ahead this this is a typical

00:13:00,180 --> 00:13:04,620
workspace house looks like it works

00:13:03,180 --> 00:13:09,030
where this is a work space to install

00:13:04,620 --> 00:13:11,640
MySQL on a particular topology and it

00:13:09,030 --> 00:13:13,920
comes consists of the credentials we are

00:13:11,640 --> 00:13:15,840
which are stored and like the ml we can

00:13:13,920 --> 00:13:18,530
use like whatever credentials which you

00:13:15,840 --> 00:13:20,820
want and these three crystals which are

00:13:18,530 --> 00:13:24,380
standardized credentials of fake

00:13:20,820 --> 00:13:27,720
OpenStack AWS and the Google Cloud and

00:13:24,380 --> 00:13:29,760
we also have books we created an answer

00:13:27,720 --> 00:13:34,530
we'll hook in in this particular case

00:13:29,760 --> 00:13:37,230
which installs the DB server from from

00:13:34,530 --> 00:13:39,950
an external role and after that like we

00:13:37,230 --> 00:13:42,660
have hold different types of folders to

00:13:39,950 --> 00:13:45,230
to store different kinds of files like

00:13:42,660 --> 00:13:49,890
inventories layouts topologies and

00:13:45,230 --> 00:13:51,150
resources and topologies and this is how

00:13:49,890 --> 00:13:54,320
a pin file looks like

00:13:51,150 --> 00:13:56,270
and each pin file has is a

00:13:54,320 --> 00:13:58,220
collection of key-value pairs where you

00:13:56,270 --> 00:14:01,340
just give the reference to the topology

00:13:58,220 --> 00:14:04,040
and layout or in our case like we can we

00:14:01,340 --> 00:14:06,410
can use any other we can use the layout

00:14:04,040 --> 00:14:09,290
for like openshift three node cluster or

00:14:06,410 --> 00:14:13,120
like four node cluster that that creates

00:14:09,290 --> 00:14:15,590
a ansible inventory for for us to create

00:14:13,120 --> 00:14:18,950
lands will inventory to deploy the

00:14:15,590 --> 00:14:20,510
fourfold openshift environment and these

00:14:18,950 --> 00:14:22,490
are the examples of the topologies which

00:14:20,510 --> 00:14:25,130
kinds of resource groups

00:14:22,490 --> 00:14:26,360
therefore resource definitions and there

00:14:25,130 --> 00:14:29,780
can be like a number of definitions

00:14:26,360 --> 00:14:31,490
coming up so the highest deployment

00:14:29,780 --> 00:14:34,940
which have made is level is about like

00:14:31,490 --> 00:14:38,270
which I accidentally made using linchpin

00:14:34,940 --> 00:14:40,850
was like 20 node deployment on my AWS

00:14:38,270 --> 00:14:44,860
account which are which costed me like

00:14:40,850 --> 00:14:47,780
two hundred dollars over two days but I

00:14:44,860 --> 00:14:49,280
came to know about a lesson like okay

00:14:47,780 --> 00:14:52,160
you should be very careful with the

00:14:49,280 --> 00:14:54,280
count attribute of this inventories the

00:14:52,160 --> 00:14:56,540
contact herbs of this your valleys and

00:14:54,280 --> 00:14:58,550
linchpin works with bigger deployments

00:14:56,540 --> 00:15:00,680
too though we haven't tested in the

00:14:58,550 --> 00:15:02,630
production environments of deploying

00:15:00,680 --> 00:15:05,570
thinking or clusters but it does

00:15:02,630 --> 00:15:07,460
provision like 20 not textures this is

00:15:05,570 --> 00:15:09,290
the basic structure of the Linton

00:15:07,460 --> 00:15:11,060
topology where we have resource groups

00:15:09,290 --> 00:15:13,070
and if cancels of like different

00:15:11,060 --> 00:15:15,020
resource definitions and each resource

00:15:13,070 --> 00:15:16,910
group can have its own metadata which

00:15:15,020 --> 00:15:19,190
can be parsed and the best part of this

00:15:16,910 --> 00:15:21,020
topologies are like they do support

00:15:19,190 --> 00:15:23,660
ginger templating where you can

00:15:21,020 --> 00:15:26,570
dynamically render the whole template

00:15:23,660 --> 00:15:28,550
templates of topologies so that like

00:15:26,570 --> 00:15:29,900
there can be ad hoc provisioning like

00:15:28,550 --> 00:15:32,810
are there are different other

00:15:29,900 --> 00:15:35,180
provisioning tools and this is the

00:15:32,810 --> 00:15:37,340
inventory layout which is kind of a

00:15:35,180 --> 00:15:40,580
cloud agnostic in nature because it

00:15:37,340 --> 00:15:42,830
doesn't specify it doesn't tell you to

00:15:40,580 --> 00:15:45,380
choose from the which cloud provider it

00:15:42,830 --> 00:15:48,410
intelligently like goes to the invent

00:15:45,380 --> 00:15:53,300
provision instances and brings out the

00:15:48,410 --> 00:15:57,530
lekha brings out the net resources where

00:15:53,300 --> 00:15:59,930
based on the count attribute there to

00:15:57,530 --> 00:16:00,610
map the ansible example layout with

00:15:59,930 --> 00:16:03,399
inventory

00:16:00,610 --> 00:16:06,100
like we have three sections mainly like

00:16:03,399 --> 00:16:08,589
one section is the wars which translates

00:16:06,100 --> 00:16:10,899
roughly to the all Wars inside the

00:16:08,589 --> 00:16:13,029
ansible inventory and at the same time

00:16:10,899 --> 00:16:16,000
like each host has its own host group

00:16:13,029 --> 00:16:20,610
which consists of its own metadata using

00:16:16,000 --> 00:16:22,779
the layouts going ahead this would be

00:16:20,610 --> 00:16:25,540
successfully generated inventory for

00:16:22,779 --> 00:16:28,750
alayka an app server and DB server as

00:16:25,540 --> 00:16:33,010
you can see there can be like a there

00:16:28,750 --> 00:16:34,870
can be a AWS instance and a Google cloud

00:16:33,010 --> 00:16:37,540
instance working together or there can

00:16:34,870 --> 00:16:39,610
be a private cloud private cloud

00:16:37,540 --> 00:16:43,000
instance to which you can connect them

00:16:39,610 --> 00:16:46,209
together as long as the network permits

00:16:43,000 --> 00:16:48,430
you to do that and coming with the

00:16:46,209 --> 00:16:51,790
linchpin hooks which which are kind of

00:16:48,430 --> 00:16:54,459
part of our like use case of testing

00:16:51,790 --> 00:16:56,550
openshift on openshift the linchpin

00:16:54,459 --> 00:17:00,610
hooks are like kind of context-aware

00:16:56,550 --> 00:17:02,320
scripts which run after the live after

00:17:00,610 --> 00:17:05,380
the provisioning of the instance has

00:17:02,320 --> 00:17:07,240
happened there can be like five types of

00:17:05,380 --> 00:17:11,260
folks leave can be written in ansible

00:17:07,240 --> 00:17:12,880
Python shell Ruby and no gs2 and they

00:17:11,260 --> 00:17:16,299
are like for states where you can

00:17:12,880 --> 00:17:18,130
initiate Hakan where one is the pre up

00:17:16,299 --> 00:17:20,439
state that is which is before the

00:17:18,130 --> 00:17:23,380
provisioning has happening is happening

00:17:20,439 --> 00:17:26,199
and one is the post hub post up which is

00:17:23,380 --> 00:17:29,290
after the provisioning has happened and

00:17:26,199 --> 00:17:30,910
the one is before a pre disturb before

00:17:29,290 --> 00:17:33,160
the destruction if you want to do some

00:17:30,910 --> 00:17:34,960
cleanups to the external cloud providers

00:17:33,160 --> 00:17:37,390
if it's your own custom scripts which

00:17:34,960 --> 00:17:39,610
you can do and one is with the post

00:17:37,390 --> 00:17:42,880
destroy which can be helpful in a case

00:17:39,610 --> 00:17:45,309
where if you want to assure or like be

00:17:42,880 --> 00:17:49,299
certain of the resources are being

00:17:45,309 --> 00:17:52,330
destroyed properly or not and this is an

00:17:49,299 --> 00:17:56,169
example hook of in installing a DB

00:17:52,330 --> 00:17:59,580
server basically we don't do Blake much

00:17:56,169 --> 00:18:03,880
work in creating hooks because if we use

00:17:59,580 --> 00:18:06,080
if you use a playbook which uses a an

00:18:03,880 --> 00:18:08,450
existing role this would be a payable

00:18:06,080 --> 00:18:10,880
looks like it's just referring to a role

00:18:08,450 --> 00:18:13,370
which is externally available on ansible

00:18:10,880 --> 00:18:15,020
galaxy so you need not write different

00:18:13,370 --> 00:18:20,450
types of course if they are already on

00:18:15,020 --> 00:18:23,240
the galaxy and this is a like a quick

00:18:20,450 --> 00:18:25,550
while linchpin one or one of like how

00:18:23,240 --> 00:18:30,320
lynchpin is installed and how do we

00:18:25,550 --> 00:18:32,870
create instances you install it via PI

00:18:30,320 --> 00:18:35,870
pi and after that who created workspace

00:18:32,870 --> 00:18:38,120
are using lynchpin in it and giving up

00:18:35,870 --> 00:18:41,240
and giving to the credential spark you

00:18:38,120 --> 00:18:43,220
can you can use Lynch of an app command

00:18:41,240 --> 00:18:45,350
just like you do with vagrant up it

00:18:43,220 --> 00:18:46,940
creates all the instances and if layer

00:18:45,350 --> 00:18:49,280
is specified it creates the ansible

00:18:46,940 --> 00:18:52,070
inventory too and finally if you want to

00:18:49,280 --> 00:18:53,870
destroy the ends and inventories or you

00:18:52,070 --> 00:18:56,540
won't destroy the inventory but it would

00:18:53,870 --> 00:18:59,920
destroy the whole resources out there by

00:18:56,540 --> 00:19:03,740
using linchpin destroy carmine and

00:18:59,920 --> 00:19:07,040
finally to make openshift on offensive

00:19:03,740 --> 00:19:12,590
possible like we used a container which

00:19:07,040 --> 00:19:14,930
is specifically which basically installs

00:19:12,590 --> 00:19:18,440
linchpin and other dependencies and

00:19:14,930 --> 00:19:21,920
which also runs which also runs lipfird

00:19:18,440 --> 00:19:25,220
the inside the container so we kind of

00:19:21,920 --> 00:19:28,960
borrowed this docker file from mr. Alec

00:19:25,220 --> 00:19:31,910
of Brenton bard this is like one of the

00:19:28,960 --> 00:19:34,490
great examples which we found you know

00:19:31,910 --> 00:19:37,160
it will run libvirt inside inside a

00:19:34,490 --> 00:19:39,950
container and on top of it we like cava

00:19:37,160 --> 00:19:42,230
just clear had to be install some of the

00:19:39,950 --> 00:19:43,320
dependencies like the clipboard

00:19:42,230 --> 00:19:46,110
developer

00:19:43,320 --> 00:19:49,010
devil and rpm bills and the batch

00:19:46,110 --> 00:19:51,870
completions which are necessary for

00:19:49,010 --> 00:19:56,640
which are necessary for creating little

00:19:51,870 --> 00:19:59,040
effort instances and what we did is like

00:19:56,640 --> 00:20:01,800
we kind of asses we are using like a

00:19:59,040 --> 00:20:03,270
privileged containers of almost there a

00:20:01,800 --> 00:20:07,380
car since we are using privileged

00:20:03,270 --> 00:20:09,750
containers we we were like trying to run

00:20:07,380 --> 00:20:13,500
the whole lipfird demon by overriding

00:20:09,750 --> 00:20:18,240
the existing setup with the host

00:20:13,500 --> 00:20:20,580
machines KVM device and we got to the

00:20:18,240 --> 00:20:24,180
point where we kind of created an

00:20:20,580 --> 00:20:27,000
inception inside an inception like we

00:20:24,180 --> 00:20:28,710
create we had a mini shove VM on top of

00:20:27,000 --> 00:20:31,020
it we are running a lynchpin container

00:20:28,710 --> 00:20:32,970
on top of it like we are running

00:20:31,020 --> 00:20:36,330
OpenShift origin and we are using

00:20:32,970 --> 00:20:40,110
linchpin to run end to end tests so this

00:20:36,330 --> 00:20:43,500
is a simple like workspace I would like

00:20:40,110 --> 00:20:45,420
to show the I would like to show the how

00:20:43,500 --> 00:20:48,480
the workspace looks like you can access

00:20:45,420 --> 00:20:52,140
this workspace on on to this particular

00:20:48,480 --> 00:20:54,120
repository and before before I conclude

00:20:52,140 --> 00:20:56,070
and show the demo like I would like to

00:20:54,120 --> 00:20:59,100
talk more about like our CI pipeline

00:20:56,070 --> 00:21:01,230
project where the whole testing

00:20:59,100 --> 00:21:03,990
openshift on open shelf is a part of CI

00:21:01,230 --> 00:21:06,840
pipeline project where we are trying to

00:21:03,990 --> 00:21:09,900
like accommodate an automation framework

00:21:06,840 --> 00:21:13,050
which uses different types of containers

00:21:09,900 --> 00:21:16,500
and tools to make your CI process easier

00:21:13,050 --> 00:21:18,420
and in an example project which testing

00:21:16,500 --> 00:21:21,720
open shipped on OpenShift is a part of

00:21:18,420 --> 00:21:23,460
as a stage where we were testing we have

00:21:21,720 --> 00:21:26,250
we were actually getting the practices

00:21:23,460 --> 00:21:27,810
of a Confederate ohmic host and every

00:21:26,250 --> 00:21:29,910
commit that is made to the federal

00:21:27,810 --> 00:21:34,500
atomic Coast runs through the pipeline

00:21:29,910 --> 00:21:36,510
and it triggers a build package

00:21:34,500 --> 00:21:39,510
runs the functional tests and composes

00:21:36,510 --> 00:21:41,640
the OS tree and further there will be

00:21:39,510 --> 00:21:45,450
integration tests made on the compose of

00:21:41,640 --> 00:21:48,210
images and finally like once the image

00:21:45,450 --> 00:21:50,130
is being generated gutka image is being

00:21:48,210 --> 00:21:52,920
fed to the linchpin lipfird container

00:21:50,130 --> 00:21:57,030
where the OpenShift cluster is being

00:21:52,920 --> 00:22:00,390
booted inside a container and end-to-end

00:21:57,030 --> 00:22:03,930
tests are being run so this is our part

00:22:00,390 --> 00:22:06,930
pipeline looks like as I said we'd curve

00:22:03,930 --> 00:22:09,830
like whenever there is a diskette commit

00:22:06,930 --> 00:22:13,380
it goes through all the stages and

00:22:09,830 --> 00:22:15,570
finally like I it conforms like this is

00:22:13,380 --> 00:22:17,640
the part of which where the linchpin

00:22:15,570 --> 00:22:23,580
works inside a container to run the open

00:22:17,640 --> 00:22:28,730
ship this sorry coming back to the demo

00:22:23,580 --> 00:22:28,730
I hope you can play this

00:22:29,990 --> 00:22:32,020
Oh

00:22:36,070 --> 00:22:41,739
so this is an open shift an open

00:22:38,679 --> 00:22:42,940
environment this is running locally and

00:22:41,739 --> 00:22:45,309
we have the linchpin delivered

00:22:42,940 --> 00:22:48,749
containers which are already being built

00:22:45,309 --> 00:22:51,789
as a part of the CI pipeline process and

00:22:48,749 --> 00:22:55,029
this is our Jenkins environment where

00:22:51,789 --> 00:22:56,889
our actual pipeline runs for this

00:22:55,029 --> 00:22:59,320
particular demo I kind of isolated all

00:22:56,889 --> 00:23:01,989
the other stages and use the Lynch

00:22:59,320 --> 00:23:06,239
believer container directly to run our

00:23:01,989 --> 00:23:08,919
OpenShift end-to-end test in this case

00:23:06,239 --> 00:23:15,639
it started provisioning the instances

00:23:08,919 --> 00:23:16,690
and in using a Lippard provider so using

00:23:15,639 --> 00:23:18,669
a quick work through this is a

00:23:16,690 --> 00:23:22,599
privileged container which uses the host

00:23:18,669 --> 00:23:24,009
machines Liberty demon and but the

00:23:22,599 --> 00:23:25,149
virtual machine is actually running

00:23:24,009 --> 00:23:28,960
inside the container

00:23:25,149 --> 00:23:31,090
where it uses linchpin hooks to install

00:23:28,960 --> 00:23:37,960
the openshift and run end-to-end tests

00:23:31,090 --> 00:23:40,330
on it so it took like 28 minutes 38

00:23:37,960 --> 00:23:42,700
minutes last time and it's gonna take

00:23:40,330 --> 00:23:45,460
like a little while more but the whole

00:23:42,700 --> 00:23:47,649
demo is like is within two minutes so I

00:23:45,460 --> 00:23:50,799
added that I took a freedom tree I did

00:23:47,649 --> 00:23:53,259
that there and demo and now it's kind of

00:23:50,799 --> 00:23:55,779
downloading the image source from then

00:23:53,259 --> 00:23:59,139
that would be a federal Tomic image and

00:23:55,779 --> 00:24:02,759
it uses linchpin to boot that image and

00:23:59,139 --> 00:24:02,759
run open ship tests on it

00:24:07,530 --> 00:24:14,800
Hemme just followed it a little now it's

00:24:11,410 --> 00:24:16,300
generating the outputs and it is

00:24:14,800 --> 00:24:20,080
generating the open shipped inventory

00:24:16,300 --> 00:24:27,970
with hook which would be the post

00:24:20,080 --> 00:24:29,830
inventory for post provisioning hook and

00:24:27,970 --> 00:24:31,750
started are installing the open shot

00:24:29,830 --> 00:24:33,160
environment onto the whole virtual

00:24:31,750 --> 00:24:38,279
machine

00:24:33,160 --> 00:24:38,279
[Music]

00:24:39,240 --> 00:24:43,649
and once the opening shipped single

00:24:41,730 --> 00:24:46,350
Linda in in this current experiment like

00:24:43,649 --> 00:24:48,750
we try to run the single node

00:24:46,350 --> 00:24:49,620
environment because running like a

00:24:48,750 --> 00:24:51,450
full-blown

00:24:49,620 --> 00:24:54,630
open ship deployment inside a container

00:24:51,450 --> 00:24:56,669
which we tried it kind of crashed our

00:24:54,630 --> 00:24:59,669
environment like a lake up multiple

00:24:56,669 --> 00:25:03,990
times so we just wanted to check only

00:24:59,669 --> 00:25:07,080
the single more environments so coming

00:25:03,990 --> 00:25:09,990
back to the presentation I tank further

00:25:07,080 --> 00:25:12,840
I thank my team like continuous product

00:25:09,990 --> 00:25:14,940
ization team for all the like support

00:25:12,840 --> 00:25:16,409
they have given me and for giving an

00:25:14,940 --> 00:25:20,460
opportunity to work with this particular

00:25:16,409 --> 00:25:23,640
project and feel free to feel free to

00:25:20,460 --> 00:25:25,289
for the for the repository of CI

00:25:23,640 --> 00:25:29,399
pipeline we are looking for contributors

00:25:25,289 --> 00:25:32,220
and on freenode we are continuous infra

00:25:29,399 --> 00:25:34,620
and we have a mailing list per like

00:25:32,220 --> 00:25:39,080
continuous infrared Hakam if you have

00:25:34,620 --> 00:25:39,080
any doubts so any questions

00:25:44,090 --> 00:25:46,690
yep

00:25:51,669 --> 00:25:58,030
what's the performance like in terms of

00:25:55,030 --> 00:26:01,039
comparing which pin to like just using a

00:25:58,030 --> 00:26:02,600
instable playbook that has they used

00:26:01,039 --> 00:26:07,340
like they give us modules or they owe us

00:26:02,600 --> 00:26:09,580
modules for OpenStack performance like

00:26:07,340 --> 00:26:12,169
us since we are like underling

00:26:09,580 --> 00:26:16,580
underlying playbooks of lynchpin

00:26:12,169 --> 00:26:19,090
actually uses OS server and other things

00:26:16,580 --> 00:26:22,700
like if you are just talking about

00:26:19,090 --> 00:26:25,360
provisioning of instances it's hardly

00:26:22,700 --> 00:26:28,880
hardly the person milliseconds because

00:26:25,360 --> 00:26:32,150
the things which we do is like the it is

00:26:28,880 --> 00:26:34,490
just instantiated by ansible API and the

00:26:32,150 --> 00:26:37,880
ansible api calls the playbooks there

00:26:34,490 --> 00:26:40,340
the OpenStack server like OpenStack

00:26:37,880 --> 00:26:43,340
several modules are ions will OpenStack

00:26:40,340 --> 00:26:45,380
modules are so it shouldn't be any any

00:26:43,340 --> 00:26:48,350
much of a difference but when you talk

00:26:45,380 --> 00:26:51,020
about the whole run from creating of

00:26:48,350 --> 00:26:53,179
instance to a generation of inventory

00:26:51,020 --> 00:26:56,419
which you need like multiple play books

00:26:53,179 --> 00:26:58,760
to run and still then like lensman gets

00:26:56,419 --> 00:27:00,919
an advantage or on top of it by

00:26:58,760 --> 00:27:03,530
simplifying the process they are rather

00:27:00,919 --> 00:27:05,450
than on performance so we in lynch when

00:27:03,530 --> 00:27:07,460
we have multiple components called as

00:27:05,450 --> 00:27:10,330
run vb where we use the database to

00:27:07,460 --> 00:27:13,039
store the existing topologies and

00:27:10,330 --> 00:27:14,990
successful runs and you can repeat it

00:27:13,039 --> 00:27:18,950
again and again like a based on a

00:27:14,990 --> 00:27:22,490
transaction ID so essentially it it can

00:27:18,950 --> 00:27:25,250
be like thinking about that it can act

00:27:22,490 --> 00:27:27,500
as an external cloud service provider if

00:27:25,250 --> 00:27:30,110
we write a rest wrapper around it it can

00:27:27,500 --> 00:27:32,120
be a full grown like provisioning as a

00:27:30,110 --> 00:27:34,340
service kind of thing but currently it's

00:27:32,120 --> 00:27:38,169
just a small lightweight tool which does

00:27:34,340 --> 00:27:38,169
provisioning across multiple clocks

00:27:43,350 --> 00:27:46,700
any more questions

00:27:46,980 --> 00:27:50,870
nope

00:27:48,980 --> 00:27:54,080
[Music]

00:27:50,870 --> 00:27:57,830
have you played with Qbert instead of

00:27:54,080 --> 00:27:59,779
like manually not yet but some part of

00:27:57,830 --> 00:28:02,240
my like a couple of people in my team

00:27:59,779 --> 00:28:05,659
they have started working with Cooper

00:28:02,240 --> 00:28:08,629
and I heard like pretty cool stuff with

00:28:05,659 --> 00:28:12,249
Qbert so we are going to like we are

00:28:08,629 --> 00:28:12,249
going to like implement Hubert's

00:28:14,440 --> 00:28:17,539
[Music]

00:28:21,600 --> 00:28:24,650
any other questions

00:28:25,490 --> 00:28:31,490
alright I'll say okay thank you one more

00:28:29,419 --> 00:28:34,549
small announcement like I have a talk

00:28:31,490 --> 00:28:36,890
about like CI pipeline for dummies which

00:28:34,549 --> 00:28:40,159
is which could have been better like if

00:28:36,890 --> 00:28:42,260
I give that up first because that that

00:28:40,159 --> 00:28:45,679
has like all the basics of like how the

00:28:42,260 --> 00:28:48,169
pipeline works and how OpenShift works

00:28:45,679 --> 00:28:51,350
and water containers and it starts from

00:28:48,169 --> 00:28:55,669
a basic level where what is the software

00:28:51,350 --> 00:28:57,080
and how does it work so so we like feel

00:28:55,669 --> 00:29:00,640
free to attend that like curve and

00:28:57,080 --> 00:29:00,640

YouTube URL: https://www.youtube.com/watch?v=sNDKEQxafb8


