Title: Elytron: Next-Generation Security for Java Servers
Publication date: 2019-02-22
Playlist: DevConfUS 2018
Description: 
	Elytron is a new security framework for WildFly that unifies security across the whole application server. It has replaced the combination of PicketBox and the Java Authentication and Authorization Service (JAAS) as the WildFly client and server security mechanism. In this session, we’ll first touch on some security history to understand the motivation for introducing Elytron. Then, we’ll dive into what Elytron is and learn about its core concepts, including authentication and authorization. By the end of the session, you will understand how to secure Java EE applications deployed to WildFly using Elytron.
Captions: 
	00:00:02,590 --> 00:00:07,960
understand the motivation for

00:00:04,779 --> 00:00:10,690
introducing Ella Tron then we're gonna

00:00:07,960 --> 00:00:13,539
jump right into what electron is and

00:00:10,690 --> 00:00:15,730
we'll go through its core concepts for

00:00:13,539 --> 00:00:18,789
both server side authentication and

00:00:15,730 --> 00:00:21,400
client-side authentication and then

00:00:18,789 --> 00:00:24,249
we'll go through a demo so you can see

00:00:21,400 --> 00:00:29,849
how to secure an application that's been

00:00:24,249 --> 00:00:33,190
deployed to wildfly using electron so

00:00:29,849 --> 00:00:36,330
historically Java applications server

00:00:33,190 --> 00:00:39,010
security has been provided by the Java

00:00:36,330 --> 00:00:42,340
authentication and authorization service

00:00:39,010 --> 00:00:46,030
also known as Jaz now as its name

00:00:42,340 --> 00:00:48,430
suggests Jaz is a set of Java API is

00:00:46,030 --> 00:00:52,360
designed for authentication and

00:00:48,430 --> 00:00:55,210
authorization now Jaz implements the

00:00:52,360 --> 00:00:57,640
pluggable authentication module and so

00:00:55,210 --> 00:01:00,520
since authentication is performed in a

00:00:57,640 --> 00:01:02,320
pluggable way it allows for applications

00:01:00,520 --> 00:01:06,220
to remain independent of the underlying

00:01:02,320 --> 00:01:09,340
offense occation technologies so it was

00:01:06,220 --> 00:01:12,490
common for application servers to make

00:01:09,340 --> 00:01:15,999
use of Jaz login modules for username

00:01:12,490 --> 00:01:18,460
password verification now in the early

00:01:15,999 --> 00:01:21,729
days of application servers this

00:01:18,460 --> 00:01:24,340
solution was fine but as finding ways to

00:01:21,729 --> 00:01:27,249
improve security became more important

00:01:24,340 --> 00:01:29,170
this simple solution was no longer

00:01:27,249 --> 00:01:34,030
adequate and it actually became

00:01:29,170 --> 00:01:37,270
difficult to use effectively so for

00:01:34,030 --> 00:01:39,549
JBoss application server 7 which is the

00:01:37,270 --> 00:01:42,340
predecessor of the wildfly application

00:01:39,549 --> 00:01:45,030
server we really wanted to switch to

00:01:42,340 --> 00:01:49,119
more secure to stronger authentication

00:01:45,030 --> 00:01:50,979
mechanism so specifically we wanted to

00:01:49,119 --> 00:01:53,649
be able to use Stossel based

00:01:50,979 --> 00:01:57,369
authentication for our native interface

00:01:53,649 --> 00:02:00,609
now Sasol is a challenge response based

00:01:57,369 --> 00:02:03,340
protocol so the way it works is that the

00:02:00,609 --> 00:02:06,490
server issues a challenge to the client

00:02:03,340 --> 00:02:09,520
the client responds to the challenge and

00:02:06,490 --> 00:02:11,830
the exchange continues until the server

00:02:09,520 --> 00:02:12,910
is happy and doesn't send anymore

00:02:11,830 --> 00:02:16,390
challenges

00:02:12,910 --> 00:02:18,640
now the main problem with switching to

00:02:16,390 --> 00:02:23,080
stossel was that it was totally

00:02:18,640 --> 00:02:26,770
incompatible with jazz so we actually

00:02:23,080 --> 00:02:30,340
ended up with two security solutions one

00:02:26,770 --> 00:02:33,250
based on jazz for applications one based

00:02:30,340 --> 00:02:36,280
on facile for management and we had

00:02:33,250 --> 00:02:39,460
integration between the two now

00:02:36,280 --> 00:02:41,680
obviously having two different security

00:02:39,460 --> 00:02:44,170
solutions that solve the same

00:02:41,680 --> 00:02:47,290
authentication problem but in two

00:02:44,170 --> 00:02:49,800
different ways was not ideal and it

00:02:47,290 --> 00:02:53,890
became confusing for both users and

00:02:49,800 --> 00:02:57,130
developers so this led to the creation

00:02:53,890 --> 00:02:59,820
of the electron project in order to

00:02:57,130 --> 00:03:03,070
provide a single unified security

00:02:59,820 --> 00:03:08,190
solution across the whole wildfly

00:03:03,070 --> 00:03:12,460
application server so what is ella Tron

00:03:08,190 --> 00:03:15,850
electron is a set of Java API and SP is

00:03:12,460 --> 00:03:18,310
for applications to reverse security now

00:03:15,850 --> 00:03:22,390
in addition to providing a single

00:03:18,310 --> 00:03:25,090
unified security solution for wildfly we

00:03:22,390 --> 00:03:27,700
also had a few other objectives when

00:03:25,090 --> 00:03:30,640
introduced being electron so in

00:03:27,700 --> 00:03:33,459
particular we wanted to support stronger

00:03:30,640 --> 00:03:37,750
authentication mechanism so we wanted to

00:03:33,459 --> 00:03:41,050
move beyond the Jazz login modules next

00:03:37,750 --> 00:03:43,900
we also wanted to centralize SSL

00:03:41,050 --> 00:03:46,989
configuration so that different parts of

00:03:43,900 --> 00:03:49,830
the application server that require SSL

00:03:46,989 --> 00:03:53,770
could make use of the same centralized

00:03:49,830 --> 00:03:56,160
configuration next we wanted to be able

00:03:53,770 --> 00:04:00,310
to support identity switching and

00:03:56,160 --> 00:04:02,800
identity propagation and finally we

00:04:00,310 --> 00:04:04,900
wanted to be able to provide integration

00:04:02,800 --> 00:04:07,989
points to make it possible to create

00:04:04,900 --> 00:04:12,150
custom implementations that could extend

00:04:07,989 --> 00:04:16,690
electron functionality if necessary

00:04:12,150 --> 00:04:19,090
so within wildfly electron is used to

00:04:16,690 --> 00:04:21,850
secure applications that are deployed to

00:04:19,090 --> 00:04:24,910
the server and to secure management

00:04:21,850 --> 00:04:27,010
access to the server it's important to

00:04:24,910 --> 00:04:29,890
keep in mind though that although Allah

00:04:27,010 --> 00:04:33,190
Tron was developed for wildfly it's

00:04:29,890 --> 00:04:35,350
actually a standalone library that can

00:04:33,190 --> 00:04:40,180
theoretically be used in other Java

00:04:35,350 --> 00:04:42,720
server environments so electron covers

00:04:40,180 --> 00:04:46,300
the two main security area

00:04:42,720 --> 00:04:48,940
authentication and authorization now

00:04:46,300 --> 00:04:51,640
just as a reminder authentication

00:04:48,940 --> 00:04:54,160
involves verifying someone is really who

00:04:51,640 --> 00:04:56,289
they say they are an authorization

00:04:54,160 --> 00:05:00,760
involves verifying that they're actually

00:04:56,289 --> 00:05:04,110
allowed to access the resource so

00:05:00,760 --> 00:05:06,700
electrons api's are based on a few core

00:05:04,110 --> 00:05:10,300
components and so we're gonna go through

00:05:06,700 --> 00:05:13,450
these components now the most important

00:05:10,300 --> 00:05:16,840
component is the security domain so a

00:05:13,450 --> 00:05:20,229
security domain is a representation of a

00:05:16,840 --> 00:05:23,289
security policy and it's backed by one

00:05:20,229 --> 00:05:25,180
or more security realms and a set of

00:05:23,289 --> 00:05:30,070
resources that can perform

00:05:25,180 --> 00:05:33,789
transformations a security realm

00:05:30,070 --> 00:05:36,669
provides access to an identity store so

00:05:33,789 --> 00:05:39,910
it can encapsulate a database and LDAP

00:05:36,669 --> 00:05:45,250
server properties file key store and so

00:05:39,910 --> 00:05:47,320
on now security realm can be used to

00:05:45,250 --> 00:05:51,460
obtain attributes that are associated

00:05:47,320 --> 00:05:53,830
with an identity and to obtain or verify

00:05:51,460 --> 00:05:57,270
credentials that are associated with an

00:05:53,830 --> 00:06:00,210
identity now some of our security realm

00:05:57,270 --> 00:06:02,680
implementations also expose an API for

00:06:00,210 --> 00:06:04,570
modification so that means that it's

00:06:02,680 --> 00:06:07,570
possible to make updates to the

00:06:04,570 --> 00:06:10,599
underlying identity store so you can add

00:06:07,570 --> 00:06:12,810
users remove them update them and still

00:06:10,599 --> 00:06:12,810
on

00:06:12,990 --> 00:06:19,780
next we have a realm mapper so a realm

00:06:16,930 --> 00:06:22,630
mapper is associated with the security

00:06:19,780 --> 00:06:25,630
domain and it's used in cases where the

00:06:22,630 --> 00:06:29,260
security domain is backed by multiple

00:06:25,630 --> 00:06:31,780
security realms so a realm mapper takes

00:06:29,260 --> 00:06:34,510
the username that's been provided during

00:06:31,780 --> 00:06:37,270
authentication and it uses it to

00:06:34,510 --> 00:06:39,790
determine which security realm should be

00:06:37,270 --> 00:06:43,300
used in order to obtain the identity

00:06:39,790 --> 00:06:45,520
information for that user so as an

00:06:43,300 --> 00:06:48,370
example here you can see that this

00:06:45,520 --> 00:06:50,890
security domain is backed by three

00:06:48,370 --> 00:06:53,800
security realms so when the

00:06:50,890 --> 00:06:56,410
authentication process starts and we see

00:06:53,800 --> 00:06:59,890
a username like Alice at Red Hat com

00:06:56,410 --> 00:07:02,830
this security domain needs to determine

00:06:59,890 --> 00:07:04,900
which of these security realms it's

00:07:02,830 --> 00:07:08,170
going to use in order to obtain the

00:07:04,900 --> 00:07:11,200
identity information for Alice so it

00:07:08,170 --> 00:07:14,950
takes its realm mapper and it Maps Alice

00:07:11,200 --> 00:07:17,140
at Red Hat comm to a security realm now

00:07:14,950 --> 00:07:20,230
in this example it's been mapped to the

00:07:17,140 --> 00:07:22,780
LDAP server so this will be the security

00:07:20,230 --> 00:07:28,420
realm that's used to obtain the identity

00:07:22,780 --> 00:07:31,540
information for Alice next we have a

00:07:28,420 --> 00:07:34,960
principal transformer it can be used to

00:07:31,540 --> 00:07:38,650
map a name to another name so in this

00:07:34,960 --> 00:07:41,800
example it Maps Alice at Red Hat comm to

00:07:38,650 --> 00:07:44,260
just Alice this can be useful if the

00:07:41,800 --> 00:07:45,880
identity store has usernames in a

00:07:44,260 --> 00:07:50,730
different format than what's being

00:07:45,880 --> 00:07:54,130
provided during authentication so once

00:07:50,730 --> 00:07:57,250
authentication has succeeded a security

00:07:54,130 --> 00:07:59,740
domain produces a security identity and

00:07:57,250 --> 00:08:01,650
that's the representation of the current

00:07:59,740 --> 00:08:04,590
user

00:08:01,650 --> 00:08:07,300
now resources that need to make

00:08:04,590 --> 00:08:10,330
authorization decisions can be

00:08:07,300 --> 00:08:13,120
associated with a security domain now

00:08:10,330 --> 00:08:15,640
that security domain can then be used to

00:08:13,120 --> 00:08:17,920
obtain the current identity and its

00:08:15,640 --> 00:08:21,280
roles and permissions can then be

00:08:17,920 --> 00:08:24,580
checked in order to make authorization

00:08:21,280 --> 00:08:27,730
Asians now a security identities roles

00:08:24,580 --> 00:08:30,910
and permissions are determined using

00:08:27,730 --> 00:08:37,539
resources that are associated with the

00:08:30,910 --> 00:08:40,330
security domain so in particular a role

00:08:37,539 --> 00:08:43,479
decoder can be used to decode the

00:08:40,330 --> 00:08:45,820
current users roles so it takes the raw

00:08:43,479 --> 00:08:48,820
identity information that's been

00:08:45,820 --> 00:08:51,640
obtained from the security realm and it

00:08:48,820 --> 00:08:55,020
uses it to map its attributes to roles

00:08:51,640 --> 00:08:57,850
so in this example the role decoder

00:08:55,020 --> 00:09:04,690
determines that Alice at Red Hat comm

00:08:57,850 --> 00:09:07,780
has two roles admin and employee next we

00:09:04,690 --> 00:09:10,990
have a role mapper it can be used to

00:09:07,780 --> 00:09:13,990
apply a role modification to an identity

00:09:10,990 --> 00:09:17,560
so it can be used for normalizing roles

00:09:13,990 --> 00:09:22,620
adding or removing roles in this example

00:09:17,560 --> 00:09:26,320
it adds the prefix Red Hat to each role

00:09:22,620 --> 00:09:28,300
finally we have the permission mapper it

00:09:26,320 --> 00:09:31,480
can be used to assign a set of

00:09:28,300 --> 00:09:34,540
permissions to an identity so in this

00:09:31,480 --> 00:09:37,720
example the security don't identity for

00:09:34,540 --> 00:09:39,970
Alice gets mapped to two permissions the

00:09:37,720 --> 00:09:44,530
login permission and the run as

00:09:39,970 --> 00:09:47,080
principal permission so so far we've

00:09:44,530 --> 00:09:50,380
taken a look at the resources that back

00:09:47,080 --> 00:09:52,930
a security domain now one thing to note

00:09:50,380 --> 00:09:56,380
is that it's possible to configure a

00:09:52,930 --> 00:09:59,950
security domain to in flow a security

00:09:56,380 --> 00:10:02,800
identity from another security domain so

00:09:59,950 --> 00:10:06,160
when an identity is in flowed it retains

00:10:02,800 --> 00:10:08,380
its raw original identity but it gets

00:10:06,160 --> 00:10:11,200
assigned a new set of roles and

00:10:08,380 --> 00:10:13,960
permissions using the new security

00:10:11,200 --> 00:10:16,690
domains role decoders role mappers and

00:10:13,960 --> 00:10:20,880
permission mappers so you actually end

00:10:16,690 --> 00:10:23,760
up with a new security identity

00:10:20,880 --> 00:10:25,500
another important component is the

00:10:23,760 --> 00:10:29,070
authentication Factory

00:10:25,500 --> 00:10:32,130
so an authentication Factory represents

00:10:29,070 --> 00:10:34,650
an authentication policy and it's a

00:10:32,130 --> 00:10:38,250
factory for the configured server side

00:10:34,650 --> 00:10:41,520
authentication mechanism now a Letran

00:10:38,250 --> 00:10:44,600
provides both HTTP mechanisms like

00:10:41,520 --> 00:10:47,430
digest form clients dirt and so on and

00:10:44,600 --> 00:10:54,870
fassl mechanism so some examples are

00:10:47,430 --> 00:10:58,050
digest md5 scram and gs2 so next the SSL

00:10:54,870 --> 00:11:01,860
context is used to define all policy

00:10:58,050 --> 00:11:05,190
information related to SSL now in

00:11:01,860 --> 00:11:07,710
addition to the usual configuration for

00:11:05,190 --> 00:11:11,100
an SSL context like key managers and

00:11:07,710 --> 00:11:13,680
trust managers electron allows you to

00:11:11,100 --> 00:11:18,140
provide configuration for additional

00:11:13,680 --> 00:11:18,140
things like cipher suites and protocols

00:11:18,860 --> 00:11:24,780
electron also provides secure credential

00:11:22,320 --> 00:11:27,990
stores and these are used for security

00:11:24,780 --> 00:11:30,150
storage and use of credentials now the

00:11:27,990 --> 00:11:33,270
way they work is that they allow you to

00:11:30,150 --> 00:11:36,450
associate an alias with a credential you

00:11:33,270 --> 00:11:39,300
can then reference that alias directly

00:11:36,450 --> 00:11:40,980
in the wild fly configuration file so

00:11:39,300 --> 00:11:43,950
you don't have to specify your

00:11:40,980 --> 00:11:46,350
credential directly so as an example

00:11:43,950 --> 00:11:49,170
here you can see you'd specify something

00:11:46,350 --> 00:11:51,300
like credential reference and then you'd

00:11:49,170 --> 00:11:53,370
give the store name which is the name of

00:11:51,300 --> 00:11:56,550
the credential store that you want to

00:11:53,370 --> 00:11:58,560
use and then you'd specify which alias

00:11:56,550 --> 00:12:00,510
you'd like to use and that represents

00:11:58,560 --> 00:12:05,850
the credential that you want to

00:12:00,510 --> 00:12:09,090
reference so so far we've been talking

00:12:05,850 --> 00:12:10,800
about the electron components for server

00:12:09,090 --> 00:12:14,460
side authentication

00:12:10,800 --> 00:12:17,810
now electron also provides a set of Java

00:12:14,460 --> 00:12:21,420
API and SBI's for client-side

00:12:17,810 --> 00:12:24,450
authentication now when I say client

00:12:21,420 --> 00:12:26,730
side I just mean the client side of the

00:12:24,450 --> 00:12:29,699
connection that's being estab

00:12:26,730 --> 00:12:32,160
it is also possible to use client-side

00:12:29,699 --> 00:12:34,019
authentication in a server environment

00:12:32,160 --> 00:12:38,220
so when you're connecting from one

00:12:34,019 --> 00:12:42,149
server to another server now electrons

00:12:38,220 --> 00:12:45,360
client api's allow remote clients to

00:12:42,149 --> 00:12:47,220
authenticate using eletronic so we're

00:12:45,360 --> 00:12:51,050
now going to go through the components

00:12:47,220 --> 00:12:53,850
for the electron authentication client

00:12:51,050 --> 00:12:57,149
so the first component is the

00:12:53,850 --> 00:12:59,610
authentication configuration it contains

00:12:57,149 --> 00:13:02,699
all of the information that will be used

00:12:59,610 --> 00:13:04,490
when attempting to authenticate so this

00:13:02,699 --> 00:13:06,920
includes things like principals

00:13:04,490 --> 00:13:09,870
credentials and the authentication

00:13:06,920 --> 00:13:12,300
mechanisms that should be used now you

00:13:09,870 --> 00:13:14,129
can also use credential stores here so

00:13:12,300 --> 00:13:16,139
you don't have to specify the

00:13:14,129 --> 00:13:20,939
credentials directly in the

00:13:16,139 --> 00:13:24,329
authentication configuration next we

00:13:20,939 --> 00:13:26,399
have SSL context configuration so this

00:13:24,329 --> 00:13:28,980
is just like the SSL context

00:13:26,399 --> 00:13:31,290
configuration on the server side so you

00:13:28,980 --> 00:13:33,600
can specify things like key managers

00:13:31,290 --> 00:13:38,790
trust managers cipher suite and

00:13:33,600 --> 00:13:41,790
protocols now finally we have the

00:13:38,790 --> 00:13:44,639
authentication context it consists of an

00:13:41,790 --> 00:13:46,129
ordered collection of match rules that

00:13:44,639 --> 00:13:48,839
are used to determine which

00:13:46,129 --> 00:13:51,899
authentication configuration and which

00:13:48,839 --> 00:13:55,139
SSL context configuration should be used

00:13:51,899 --> 00:13:56,819
when attempting to authenticate so for

00:13:55,139 --> 00:13:59,160
example you could have one

00:13:56,819 --> 00:14:01,829
authentication configuration that gets

00:13:59,160 --> 00:14:03,870
used when connecting to one server and a

00:14:01,829 --> 00:14:05,639
different authentication configuration

00:14:03,870 --> 00:14:09,899
that gets used when connecting to a

00:14:05,639 --> 00:14:13,350
different server now it's possible for

00:14:09,899 --> 00:14:15,899
electron client-side authentication to

00:14:13,350 --> 00:14:19,860
be configured using an XML configuration

00:14:15,899 --> 00:14:22,889
file now this file can be specified

00:14:19,860 --> 00:14:25,529
using the wildfly config URL system

00:14:22,889 --> 00:14:27,990
property and if that property hasn't

00:14:25,529 --> 00:14:30,240
been specified then electron will look

00:14:27,990 --> 00:14:34,220
in the class loaders root directory and

00:14:30,240 --> 00:14:37,600
it's not an indirect tree for this file

00:14:34,220 --> 00:14:41,120
so this is an example of a very simple

00:14:37,600 --> 00:14:44,120
client-side XML configuration file it

00:14:41,120 --> 00:14:46,970
has one authentication configuration

00:14:44,120 --> 00:14:49,910
specified and no SSL context

00:14:46,970 --> 00:14:53,120
configuration so if we look at the top

00:14:49,910 --> 00:14:56,420
we can see that there's one match rule

00:14:53,120 --> 00:15:00,220
okay and it says that when we connect to

00:14:56,420 --> 00:15:02,720
server one comm the default config

00:15:00,220 --> 00:15:06,340
authentication configuration should be

00:15:02,720 --> 00:15:09,620
used and the default config

00:15:06,340 --> 00:15:12,350
authentication configuration says that

00:15:09,620 --> 00:15:15,590
we should be using Alice at Red Hat comm

00:15:12,350 --> 00:15:19,070
as the username secret as the password

00:15:15,590 --> 00:15:22,250
and we're going to use the digest md5

00:15:19,070 --> 00:15:24,170
fassl authentication mechanism so this

00:15:22,250 --> 00:15:31,370
information gets used when we're

00:15:24,170 --> 00:15:34,010
attempting to authenticate now it's also

00:15:31,370 --> 00:15:37,370
possible to specify client side

00:15:34,010 --> 00:15:39,530
authentication programmatically so this

00:15:37,370 --> 00:15:43,640
example is just like the previous

00:15:39,530 --> 00:15:47,510
example it has one match rule that says

00:15:43,640 --> 00:15:49,940
when we connect to server one comm this

00:15:47,510 --> 00:15:52,760
is the authentication configuration that

00:15:49,940 --> 00:15:54,860
should be used and again we're saying

00:15:52,760 --> 00:15:58,040
that we want to use Alice at Red Hat

00:15:54,860 --> 00:16:00,830
comm as our username secret as the

00:15:58,040 --> 00:16:03,590
password and we're also specifying that

00:16:00,830 --> 00:16:08,510
we want to use the digest md5 saffle

00:16:03,590 --> 00:16:10,970
authentication mechanism next we can

00:16:08,510 --> 00:16:14,540
specify the code that we want to run

00:16:10,970 --> 00:16:16,580
under this authentication context so as

00:16:14,540 --> 00:16:19,040
this code is running when it attempts to

00:16:16,580 --> 00:16:23,420
authenticate this is the information

00:16:19,040 --> 00:16:26,210
that's going to be used to do that so

00:16:23,420 --> 00:16:30,380
those were the electron components for

00:16:26,210 --> 00:16:33,140
client-side authentication now while the

00:16:30,380 --> 00:16:35,420
majority of wildfly users are probably

00:16:33,140 --> 00:16:38,870
going to use the functionality that's

00:16:35,420 --> 00:16:42,470
already provided by electron it is

00:16:38,870 --> 00:16:45,830
possible to use electrons AP eyes and SP

00:16:42,470 --> 00:16:46,590
eyes to create custom implementations

00:16:45,830 --> 00:16:49,890
that

00:16:46,590 --> 00:16:51,890
send electron functionality so for

00:16:49,890 --> 00:16:55,440
example you can implement custom

00:16:51,890 --> 00:16:58,050
authentication mechanisms SSL contacts

00:16:55,440 --> 00:17:00,510
credential stores and password

00:16:58,050 --> 00:17:04,079
implementations and so these can be

00:17:00,510 --> 00:17:09,530
registered using Java security providers

00:17:04,079 --> 00:17:13,079
or Java service loader discovery now

00:17:09,530 --> 00:17:16,560
out-of-the-box wildfly still uses its

00:17:13,079 --> 00:17:19,410
legacy security subsystem by default

00:17:16,560 --> 00:17:21,720
however electron is already installed

00:17:19,410 --> 00:17:24,540
and it's ready to be used

00:17:21,720 --> 00:17:27,689
now the reason for this is that we want

00:17:24,540 --> 00:17:31,170
to minimize disruption as users migrate

00:17:27,689 --> 00:17:33,360
to electron so in the future wild flies

00:17:31,170 --> 00:17:35,730
legacy security subsystem will be

00:17:33,360 --> 00:17:41,850
completely removed and electron will

00:17:35,730 --> 00:17:43,590
become the default so now we're going to

00:17:41,850 --> 00:17:47,640
take a look at an example application

00:17:43,590 --> 00:17:50,670
that I've deployed to wild fly it's a

00:17:47,640 --> 00:17:54,179
simple inventory application for a store

00:17:50,670 --> 00:17:58,590
called wild fly widgets it has two

00:17:54,179 --> 00:18:01,350
servlets that invoked in EJB both

00:17:58,590 --> 00:18:04,260
stirlitz have a constraint specified

00:18:01,350 --> 00:18:07,020
that says that only users with employee

00:18:04,260 --> 00:18:09,620
role should be allowed to access these

00:18:07,020 --> 00:18:09,620
service

00:18:11,570 --> 00:18:17,359
now the first servlet is the inventory

00:18:14,479 --> 00:18:19,489
servlet and it allows you to view the

00:18:17,359 --> 00:18:23,419
list of products that are currently in

00:18:19,489 --> 00:18:25,940
stock now it invokes an unsecured EJB

00:18:23,419 --> 00:18:28,129
method called get products and that

00:18:25,940 --> 00:18:31,639
retrieves the products that are in stock

00:18:28,129 --> 00:18:34,489
now our EJB is called the products bean

00:18:31,639 --> 00:18:40,249
and you can see that it associated with

00:18:34,489 --> 00:18:43,190
a security domain called other our next

00:18:40,249 --> 00:18:46,099
servlet it's called the add servlet it

00:18:43,190 --> 00:18:48,919
allows you to add a product to the list

00:18:46,099 --> 00:18:52,429
of products that are in stock now it

00:18:48,919 --> 00:18:55,519
invokes an EJB method called add product

00:18:52,429 --> 00:18:57,229
that requires admin role so as you can

00:18:55,519 --> 00:18:59,960
see here it has this roles allowed

00:18:57,229 --> 00:19:05,509
annotation which specifies that you must

00:18:59,960 --> 00:19:07,690
have admin role to invoke this method so

00:19:05,509 --> 00:19:11,239
we're gonna create an electron

00:19:07,690 --> 00:19:15,019
filesystem security realm with two users

00:19:11,239 --> 00:19:17,960
Alice and Bob Alice is going to have

00:19:15,019 --> 00:19:20,929
both admin role and employee role and

00:19:17,960 --> 00:19:25,580
Bob is only going to have the employee

00:19:20,929 --> 00:19:29,119
role so we can create this file system

00:19:25,580 --> 00:19:31,940
security realm using wildfly CLI command

00:19:29,119 --> 00:19:35,479
so in particular we can use the

00:19:31,940 --> 00:19:38,299
filesystem realm add operation to create

00:19:35,479 --> 00:19:41,840
a new security realm called example

00:19:38,299 --> 00:19:44,779
realm the path attribute here specifies

00:19:41,840 --> 00:19:47,029
the location on your file system where

00:19:44,779 --> 00:19:54,499
you want this new electron security

00:19:47,029 --> 00:19:58,909
realm to be stored okay so we can also

00:19:54,499 --> 00:20:02,479
use CLI commands to add our users so we

00:19:58,909 --> 00:20:05,570
can use the add identity operation to

00:20:02,479 --> 00:20:09,590
add the Alice identity to our filesystem

00:20:05,570 --> 00:20:13,039
realm called example realm we can then

00:20:09,590 --> 00:20:16,009
use the set password operation to set

00:20:13,039 --> 00:20:19,159
Alice's password to Alice one two three

00:20:16,009 --> 00:20:22,039
plus now notice I'm just specifying a

00:20:19,159 --> 00:20:22,860
clear password here but it is possible

00:20:22,039 --> 00:20:25,410
to specify

00:20:22,860 --> 00:20:27,780
many different password types so as an

00:20:25,410 --> 00:20:31,520
example you could specify like assaulted

00:20:27,780 --> 00:20:34,920
digest password here if you want it to

00:20:31,520 --> 00:20:36,990
next we can use the ad identity

00:20:34,920 --> 00:20:40,500
operation add identity attribute

00:20:36,990 --> 00:20:42,990
operation in order to assign Alice to

00:20:40,500 --> 00:20:50,160
roles and we're assigning her employee

00:20:42,990 --> 00:20:52,950
and admin ok and now we can repeat the

00:20:50,160 --> 00:20:56,720
process for Bob but we're only going to

00:20:52,950 --> 00:20:56,720
assign him employee role

00:21:03,390 --> 00:21:09,840
so now that we have created this file

00:21:06,510 --> 00:21:13,140
system security realm we need to add it

00:21:09,840 --> 00:21:15,780
to an electron security domain now the

00:21:13,140 --> 00:21:19,770
default wildfly configuration file

00:21:15,780 --> 00:21:22,679
already has an electron security domain

00:21:19,770 --> 00:21:25,020
called application domain and so we're

00:21:22,679 --> 00:21:27,780
gonna take this electron filesystem

00:21:25,020 --> 00:21:30,059
security realm that we just created and

00:21:27,780 --> 00:21:33,090
we're going to add it to the list of

00:21:30,059 --> 00:21:36,809
security realm that back.this existing

00:21:33,090 --> 00:21:40,410
domain and so we can use the list add

00:21:36,809 --> 00:21:44,520
operation to add this example realm to

00:21:40,410 --> 00:21:47,460
the existing list of realms and then we

00:21:44,520 --> 00:21:50,309
can set the default realm that's used

00:21:47,460 --> 00:21:55,400
for by this security domain to the realm

00:21:50,309 --> 00:21:58,590
that we just created so to indicate that

00:21:55,400 --> 00:22:01,890
security for our servlets and our EJB

00:21:58,590 --> 00:22:05,340
should be handled by electron instead of

00:22:01,890 --> 00:22:07,770
by the legacy security subsystem we need

00:22:05,340 --> 00:22:11,250
to add some configuration to the

00:22:07,770 --> 00:22:14,520
undertow and ejv subsystem and we do

00:22:11,250 --> 00:22:16,890
this in order to map the security domain

00:22:14,520 --> 00:22:20,100
name that's been referenced in our

00:22:16,890 --> 00:22:22,950
application to the electron security

00:22:20,100 --> 00:22:25,650
domain that we want to use so if you

00:22:22,950 --> 00:22:28,320
recall our application reference the

00:22:25,650 --> 00:22:30,360
other security domain and there it was

00:22:28,320 --> 00:22:32,820
specified using a security domain

00:22:30,360 --> 00:22:35,940
annotation but it could also have been

00:22:32,820 --> 00:22:38,549
defined using a descriptor file so we

00:22:35,940 --> 00:22:41,730
take that security domain name that's

00:22:38,549 --> 00:22:44,400
been specified in our deployment and we

00:22:41,730 --> 00:22:48,000
add an application security domain

00:22:44,400 --> 00:22:51,270
mapping in our undertow subsystem to map

00:22:48,000 --> 00:22:53,730
that name other to application domain

00:22:51,270 --> 00:22:56,429
and so again application domain is the

00:22:53,730 --> 00:23:00,450
electron security domain that we want to

00:22:56,429 --> 00:23:03,090
use and then we repeat the process for

00:23:00,450 --> 00:23:07,190
in the EJB subsystem we add another

00:23:03,090 --> 00:23:10,529
application security domain mapping

00:23:07,190 --> 00:23:13,379
now there's just one more configuration

00:23:10,529 --> 00:23:16,080
change that we need to make in order to

00:23:13,379 --> 00:23:19,470
secure our application using electron

00:23:16,080 --> 00:23:22,440
and so that's to update the HTTP

00:23:19,470 --> 00:23:25,200
remoting connector to reference the

00:23:22,440 --> 00:23:28,259
saffle offense ocation factory that is

00:23:25,200 --> 00:23:32,039
backed by our electron security domain

00:23:28,259 --> 00:23:35,519
now the default wildfly configuration

00:23:32,039 --> 00:23:38,460
file already defines a SAS allah thent

00:23:35,519 --> 00:23:41,070
ocation factory that's backed by our

00:23:38,460 --> 00:23:45,059
application domain so we're just going

00:23:41,070 --> 00:23:47,879
to update our HTTP remoting connector so

00:23:45,059 --> 00:23:50,129
that it references that existing vassal

00:23:47,879 --> 00:23:53,479
authentication factory ok and it's

00:23:50,129 --> 00:23:57,509
called application facile authentication

00:23:53,479 --> 00:24:00,119
and finally we can undefined the

00:23:57,509 --> 00:24:03,269
security realm attribute that's defined

00:24:00,119 --> 00:24:05,340
for the HTTP remoting connector and we

00:24:03,269 --> 00:24:07,679
can do that because that attribute is a

00:24:05,340 --> 00:24:13,470
legacy attribute and so it's not going

00:24:07,679 --> 00:24:17,519
to be used when using electron so now

00:24:13,470 --> 00:24:20,580
once the reload operation is executed in

00:24:17,519 --> 00:24:22,889
the wild fly CLI everything will have

00:24:20,580 --> 00:24:26,220
been set up so that now our application

00:24:22,889 --> 00:24:29,690
will be secured using electron instead

00:24:26,220 --> 00:24:32,759
of using our legacy security subsystem

00:24:29,690 --> 00:24:35,759
so now let's take a look at our

00:24:32,759 --> 00:24:38,460
application so again you can see that

00:24:35,759 --> 00:24:41,190
there's two buttons view inventory and

00:24:38,460 --> 00:24:45,149
add product so let's try to click on

00:24:41,190 --> 00:24:49,309
view inventory and let's log in as Bob

00:24:45,149 --> 00:24:52,410
now remember Bob only has employee role

00:24:49,309 --> 00:24:54,780
okay so we're gonna login

00:24:52,410 --> 00:24:57,180
and so we can see that we're able to

00:24:54,780 --> 00:24:59,250
successfully view the list of products

00:24:57,180 --> 00:25:01,620
that are currently in stock and again

00:24:59,250 --> 00:25:04,530
that only requires employee role to be

00:25:01,620 --> 00:25:06,990
able to access this page and so we're

00:25:04,530 --> 00:25:11,160
able to do this successfully if we go

00:25:06,990 --> 00:25:12,870
back and now we try to add a product ok

00:25:11,160 --> 00:25:16,440
so let's say we're adding a football

00:25:12,870 --> 00:25:21,630
let's say it's price is $17.99 and that

00:25:16,440 --> 00:25:23,790
we have 40 in stock now this time if we

00:25:21,630 --> 00:25:26,780
click Submit here we get a failure

00:25:23,790 --> 00:25:29,070
message that says that only an

00:25:26,780 --> 00:25:33,290
admittance oh that's expected because

00:25:29,070 --> 00:25:36,480
Bob is not an admin so now if we go back

00:25:33,290 --> 00:25:42,030
and we try to view inventory again but

00:25:36,480 --> 00:25:42,390
this time is Alice ok so we can see that

00:25:42,030 --> 00:25:44,790
again

00:25:42,390 --> 00:25:47,010
we're able to successfully view the list

00:25:44,790 --> 00:25:50,670
of products that are currently in stock

00:25:47,010 --> 00:25:53,160
since Alice has employee role now if we

00:25:50,670 --> 00:25:54,900
go back and we attempt to add a product

00:25:53,160 --> 00:26:00,260
again so let's use the same information

00:25:54,900 --> 00:26:04,260
so it's a football 1799 40 in stock and

00:26:00,260 --> 00:26:06,570
we click Submit this time we get a

00:26:04,260 --> 00:26:08,550
success message that says that the

00:26:06,570 --> 00:26:12,300
product was successfully added and

00:26:08,550 --> 00:26:14,880
that's because alice is an admin and now

00:26:12,300 --> 00:26:17,070
if we go back we'll see that the

00:26:14,880 --> 00:26:22,170
football now appears in the list of

00:26:17,070 --> 00:26:25,020
inventory so today we've talked all

00:26:22,170 --> 00:26:28,650
about electron which is a set of Java

00:26:25,020 --> 00:26:32,340
API and SP is for application server

00:26:28,650 --> 00:26:34,740
security we went through an example of

00:26:32,340 --> 00:26:38,060
how to secure an application that's been

00:26:34,740 --> 00:26:41,010
deployed to wildfly using electron and

00:26:38,060 --> 00:26:44,310
the important thing to keep in mind is

00:26:41,010 --> 00:26:46,710
that electron is a standalone library so

00:26:44,310 --> 00:26:51,060
it can theoretically be used in other

00:26:46,710 --> 00:26:53,570
Java server environments thanks any

00:26:51,060 --> 00:26:53,570
questions

00:27:20,039 --> 00:27:26,019
what are they

00:27:22,250 --> 00:27:26,019
he's recording his question suck

00:27:31,120 --> 00:27:38,899
so the question was if we wanted to use

00:27:34,669 --> 00:27:43,250
electron in Tomcat server what would we

00:27:38,899 --> 00:27:45,980
have to do so it would be you'd have to

00:27:43,250 --> 00:27:49,340
take a look at how security is currently

00:27:45,980 --> 00:27:51,830
configured on the server side and then

00:27:49,340 --> 00:27:54,529
you would plug in these different

00:27:51,830 --> 00:27:57,730
electron components so you'd need to

00:27:54,529 --> 00:28:00,710
have a way to configure things like

00:27:57,730 --> 00:28:04,130
authentication factories security

00:28:00,710 --> 00:28:05,929
domains and security realms okay and as

00:28:04,130 --> 00:28:08,480
long as you have a way to configure that

00:28:05,929 --> 00:28:10,429
then the server can make use of that and

00:28:08,480 --> 00:28:11,990
then on the client side it's just a

00:28:10,429 --> 00:28:14,120
matter of adding like an electron

00:28:11,990 --> 00:28:17,480
dependency and you can make use of the

00:28:14,120 --> 00:28:20,419
remote client API now we did actually do

00:28:17,480 --> 00:28:23,690
some prototype work with looking at how

00:28:20,419 --> 00:28:25,880
we'd integrate electron with jetty so we

00:28:23,690 --> 00:28:27,740
do have a proof of concept for that and

00:28:25,880 --> 00:28:29,210
I think it's part of our future work

00:28:27,740 --> 00:28:31,279
we'll be looking to see how we can

00:28:29,210 --> 00:28:33,639
integrate with other Java servers as

00:28:31,279 --> 00:28:33,639
well

00:28:34,690 --> 00:28:40,710
it is it's on github I can point you to

00:28:37,300 --> 00:28:40,710
the okay

00:28:52,970 --> 00:28:59,870
um so I'm not like I don't know too much

00:28:57,140 --> 00:29:01,880
about the spring security framework so

00:28:59,870 --> 00:29:05,030
I'm not a hundred percent sure how to

00:29:01,880 --> 00:29:06,920
answer that question but does it have

00:29:05,030 --> 00:29:10,900
similar concepts like high security

00:29:06,920 --> 00:29:10,900
identities and security domains or

00:29:21,550 --> 00:29:26,050
okay so one advantage of electron is

00:29:24,070 --> 00:29:28,630
that you can define everything in one

00:29:26,050 --> 00:29:30,340
place so in what spring it might be that

00:29:28,630 --> 00:29:33,400
you have to define it in multiple

00:29:30,340 --> 00:29:34,660
different configuration files and maybe

00:29:33,400 --> 00:29:36,240
you're specifying the same thing

00:29:34,660 --> 00:29:38,560
multiple times in different places

00:29:36,240 --> 00:29:40,870
things like that so in that sense

00:29:38,560 --> 00:29:42,460
electronics is better because you can

00:29:40,870 --> 00:29:44,980
define everything just in the electron

00:29:42,460 --> 00:29:46,840
subsystem within wildfly and that's your

00:29:44,980 --> 00:29:49,770
one spot for security for all the

00:29:46,840 --> 00:29:49,770
various subsystems

00:30:04,070 --> 00:30:09,039
dumb song because it's a servicer

00:30:06,049 --> 00:30:12,640
technically I'd say it a service which

00:30:09,039 --> 00:30:12,640
can't be smooth

00:30:13,840 --> 00:30:16,860
similar to Barrett

00:30:27,680 --> 00:30:36,690
um so we can support like two-way ssl

00:30:32,400 --> 00:30:41,580
and stuff so I mean I don't think

00:30:36,690 --> 00:30:43,650
spoofing would be a concern there but I

00:30:41,580 --> 00:30:46,700
guess it's something that should be

00:30:43,650 --> 00:30:46,700
looked into further

00:30:51,269 --> 00:30:54,389
pretty much

00:32:20,360 --> 00:32:30,799
girl did ya get a second hole plug in

00:32:23,390 --> 00:32:33,760
here so it starts a to convene I yep

00:32:30,799 --> 00:32:33,760
think so

00:32:41,940 --> 00:32:45,170
- ten okay

00:32:52,910 --> 00:32:56,360
yes yeah

00:33:05,029 --> 00:33:09,219
so that's nice swap this out

00:33:24,710 --> 00:33:29,950
do you guys know how to set this backup

00:33:26,950 --> 00:33:29,950

YouTube URL: https://www.youtube.com/watch?v=CjdeJpcojTk


