Title: R-med and Loaded: Using R on OpenShift
Publication date: 2019-02-21
Playlist: DevConfUS 2018
Description: 
	R is one of the most famous languages in the Data Science world, focused on statistical computing and graphics. Nowadays, it is possible to use R in a variety of tasks to do Data Science and create powerful visualizations. This session will focus on mix the good things in R with a Container-as-a-Service platform like OpenShift to make those analysis in high volume data in a very scalable platform.
Captions: 
	00:00:03,260 --> 00:00:12,289
[Music]

00:00:13,070 --> 00:00:19,440
hi everyone so the next topic would be

00:00:17,430 --> 00:00:23,370
our med and loaded using our own

00:00:19,440 --> 00:00:27,680
openshift um thank you and over to

00:00:23,370 --> 00:00:27,680
Ricardo thank you all right thank you

00:00:29,590 --> 00:00:38,530
all right so good afternoon everyone I'm

00:00:33,940 --> 00:00:41,470
glad to be here at Def Con I had the

00:00:38,530 --> 00:00:44,920
opportunity to go to the latest to Def

00:00:41,470 --> 00:00:47,680
Con from Renault and I think it's a very

00:00:44,920 --> 00:00:53,230
good conference to share some experience

00:00:47,680 --> 00:00:54,250
we've developers for other areas and I'm

00:00:53,230 --> 00:00:58,089
very glad to be here

00:00:54,250 --> 00:01:00,519
so speaking of all the experience part

00:00:58,089 --> 00:01:04,890
I'm going to show is a bit of my

00:01:00,519 --> 00:01:07,930
experience a few of my experience with

00:01:04,890 --> 00:01:11,530
data visualization and data manipulation

00:01:07,930 --> 00:01:14,619
and a bit of my personal initiative is

00:01:11,530 --> 00:01:20,590
to bring our own open shifts so let's

00:01:14,619 --> 00:01:23,439
get started well I think most of you

00:01:20,590 --> 00:01:25,270
know what our language is but for those

00:01:23,439 --> 00:01:29,020
who didn't understand what our language

00:01:25,270 --> 00:01:35,109
does well our is a language that believe

00:01:29,020 --> 00:01:36,719
or not it's 25 years language so it's

00:01:35,109 --> 00:01:41,649
pretty old

00:01:36,719 --> 00:01:44,109
its main utility for for the language is

00:01:41,649 --> 00:01:47,579
data manipulation calculation and

00:01:44,109 --> 00:01:52,450
graphic is display so it is very useful

00:01:47,579 --> 00:01:55,060
now they're talking about big data and

00:01:52,450 --> 00:01:58,929
machine learning we're talking about

00:01:55,060 --> 00:02:01,139
using art for statistics data

00:01:58,929 --> 00:02:03,360
exploration data visualization and

00:02:01,139 --> 00:02:09,330
machine learning

00:02:03,360 --> 00:02:12,960
well I personally love the language why

00:02:09,330 --> 00:02:17,160
would someone use our for data

00:02:12,960 --> 00:02:19,230
manipulation well R is a very useful

00:02:17,160 --> 00:02:22,920
language not only for software

00:02:19,230 --> 00:02:25,910
developers but those who are not

00:02:22,920 --> 00:02:31,220
software developers can use our - its

00:02:25,910 --> 00:02:33,750
language with with very easy syntax and

00:02:31,220 --> 00:02:38,160
not only that there are many libraries

00:02:33,750 --> 00:02:40,260
that covers many many applications and

00:02:38,160 --> 00:02:43,470
you can download the libraries through

00:02:40,260 --> 00:02:48,270
crane crane stands for the

00:02:43,470 --> 00:02:52,500
comprehensible are comprehensible our

00:02:48,270 --> 00:02:54,209
archive network and particularly I'm

00:02:52,500 --> 00:02:58,910
trying to find the comprehensible in the

00:02:54,209 --> 00:02:58,910
crane but as a person or team

00:02:59,180 --> 00:03:08,329
however be careful when you try to load

00:03:04,010 --> 00:03:14,239
a huge amount of data because our use

00:03:08,329 --> 00:03:15,950
this in memory calculation so be careful

00:03:14,239 --> 00:03:19,099
if you have a huge data set to

00:03:15,950 --> 00:03:23,959
manipulate it's not recommended for this

00:03:19,099 --> 00:03:28,159
kind of situation all right just to show

00:03:23,959 --> 00:03:31,639
a little bit about how easy is are for

00:03:28,159 --> 00:03:36,319
Naenae manipulation I'll start an our

00:03:31,639 --> 00:03:41,060
session here so this is the our problems

00:03:36,319 --> 00:03:46,329
it's like up - you can run comments in

00:03:41,060 --> 00:03:49,609
here so I'll start reading a CSV file

00:03:46,329 --> 00:03:51,799
and as you can see I have a type

00:03:49,609 --> 00:03:57,139
completion not only for comments word

00:03:51,799 --> 00:03:57,940
for paths so I'll use the US elections

00:03:57,139 --> 00:04:00,080
CSV

00:03:57,940 --> 00:04:04,010
[Music]

00:04:00,080 --> 00:04:09,500
as I want to handle this data I'll put

00:04:04,010 --> 00:04:15,740
in a variable alright so now I can take

00:04:09,500 --> 00:04:21,490
the first the first six lines of this

00:04:15,740 --> 00:04:30,350
data I can check the latest six two I

00:04:21,490 --> 00:04:33,020
can weave some recommend I can look at a

00:04:30,350 --> 00:04:39,860
little bit about about my data like for

00:04:33,020 --> 00:04:44,120
example a I have total votes 2008 it's a

00:04:39,860 --> 00:04:46,370
number column so I have some status some

00:04:44,120 --> 00:04:49,610
measurements of the data distribution

00:04:46,370 --> 00:04:54,800
like minimum maximal the part Iost me

00:04:49,610 --> 00:04:58,490
median and in case of a text column like

00:04:54,800 --> 00:05:00,680
for example counting I will have the

00:04:58,490 --> 00:05:06,500
frequency of each word inside my data

00:05:00,680 --> 00:05:08,810
set as I said our is for statistics so I

00:05:06,500 --> 00:05:13,540
can also calculate the standard

00:05:08,810 --> 00:05:19,970
deviation of for example total votes

00:05:13,540 --> 00:05:25,590
2008 so it's 52 for two zero point six

00:05:19,970 --> 00:05:32,410
nine and what else well I can also

00:05:25,590 --> 00:05:35,440
plot the data so let me try plot the

00:05:32,410 --> 00:05:39,310
distribution of total votes for 2008 and

00:05:35,440 --> 00:05:45,250
I have a very simple graph to show the

00:05:39,310 --> 00:05:47,740
spread of my data alright so what about

00:05:45,250 --> 00:05:50,560
companies how many companies are using

00:05:47,740 --> 00:05:53,560
our today well there's facebook for

00:05:50,560 --> 00:05:57,940
behavior analysis they used a lot of it

00:05:53,560 --> 00:06:00,820
in there related to status updates and

00:05:57,940 --> 00:06:03,280
profile pictures Google uses for

00:06:00,820 --> 00:06:07,360
advertising Twitter for data

00:06:03,280 --> 00:06:09,910
visualization Microsoft and IBM are part

00:06:07,360 --> 00:06:14,410
of the our consortium is a special group

00:06:09,910 --> 00:06:16,540
who maintains the our foundation you

00:06:14,410 --> 00:06:22,060
verb for statistic analysis

00:06:16,540 --> 00:06:27,690
Airbnb and Z and so on the search for

00:06:22,060 --> 00:06:32,050
the list of those companies is below and

00:06:27,690 --> 00:06:37,930
what else do we have for our well as I

00:06:32,050 --> 00:06:41,170
said our is has a extensible repository

00:06:37,930 --> 00:06:45,010
of libraries and one of the things makes

00:06:41,170 --> 00:06:47,130
art very good is to create data

00:06:45,010 --> 00:06:50,170
visualizations are around your data and

00:06:47,130 --> 00:06:53,230
in particular there's a special library

00:06:50,170 --> 00:06:57,250
called shiny which is a very useful

00:06:53,230 --> 00:07:01,450
library to create dashboards in a web

00:06:57,250 --> 00:07:06,460
application style so you can use just

00:07:01,450 --> 00:07:09,760
let me show the shiny webpage so you can

00:07:06,460 --> 00:07:11,710
create dashboards using your data you

00:07:09,760 --> 00:07:15,640
can create some visualizations create

00:07:11,710 --> 00:07:18,280
some interactions with it and using some

00:07:15,640 --> 00:07:23,290
of the standard components from shiny

00:07:18,280 --> 00:07:27,940
and you can also change the style using

00:07:23,290 --> 00:07:31,460
CSS themes and so on so ours a dashboard

00:07:27,940 --> 00:07:35,750
is a very good

00:07:31,460 --> 00:07:38,949
in my opinion a very good is a very good

00:07:35,750 --> 00:07:45,250
option to make quick visualizations and

00:07:38,949 --> 00:07:51,139
to publish in a web application style

00:07:45,250 --> 00:07:53,270
alright so now we know what R is let's

00:07:51,139 --> 00:07:59,870
talk about a little bit about cloud and

00:07:53,270 --> 00:08:02,810
containers so we have and currently this

00:07:59,870 --> 00:08:07,130
form of using cloud computing and

00:08:02,810 --> 00:08:09,770
containers and most of the requirements

00:08:07,130 --> 00:08:15,919
of the motivations of around that is

00:08:09,770 --> 00:08:19,760
mostly because of what n is T define it

00:08:15,919 --> 00:08:22,699
as a cloud computing so they elected

00:08:19,760 --> 00:08:25,400
five requirements for cloud which is

00:08:22,699 --> 00:08:29,479
soft service on the main resources broad

00:08:25,400 --> 00:08:33,380
network access wizards fully registered

00:08:29,479 --> 00:08:38,209
a and measured service so everything we

00:08:33,380 --> 00:08:41,409
didn't have in standard data center

00:08:38,209 --> 00:08:45,279
style architectures we have in cloud

00:08:41,409 --> 00:08:50,340
mostly because there's the biggest

00:08:45,279 --> 00:08:55,170
motivations around the technology itself

00:08:50,340 --> 00:09:01,920
all right and why I chose open shifts to

00:08:55,170 --> 00:09:07,770
run our well I have been using open

00:09:01,920 --> 00:09:11,960
shift since the alpha version me well

00:09:07,770 --> 00:09:15,420
fought for four and a half years ago and

00:09:11,960 --> 00:09:20,000
one of the things that makes my opinion

00:09:15,420 --> 00:09:22,800
a very very good platform is that is a

00:09:20,000 --> 00:09:26,430
developer friendly environment you can

00:09:22,800 --> 00:09:31,080
weave just single clicks you can publish

00:09:26,430 --> 00:09:36,030
your application and you have a DNS name

00:09:31,080 --> 00:09:38,900
for you to access externally you can

00:09:36,030 --> 00:09:43,940
also have some pipelines so you can

00:09:38,900 --> 00:09:48,180
divide your fleet yard workflow in

00:09:43,940 --> 00:09:51,930
stages where you can test and deploy our

00:09:48,180 --> 00:09:56,210
application production and now we've

00:09:51,930 --> 00:09:59,040
opened ship t3 you have all the

00:09:56,210 --> 00:10:01,720
capabilities to create micro services

00:09:59,040 --> 00:10:06,910
tire for your applications

00:10:01,720 --> 00:10:13,060
all right so mixing cloud computing and

00:10:06,910 --> 00:10:16,210
iron makes the image which is published

00:10:13,060 --> 00:10:22,930
and available through the retina Jo

00:10:16,210 --> 00:10:24,840
project is a project aimed to bring some

00:10:22,930 --> 00:10:30,510
machine learning in Big Data

00:10:24,840 --> 00:10:34,150
capabilities to OpenShift we have the

00:10:30,510 --> 00:10:40,570
Apache spark as the central component of

00:10:34,150 --> 00:10:44,290
it it's one of the biggest projects

00:10:40,570 --> 00:10:47,550
coming in the Big Data area it's a very

00:10:44,290 --> 00:10:54,400
useful tool to make large-scale

00:10:47,550 --> 00:10:57,730
computing around your data and our is

00:10:54,400 --> 00:11:01,590
around this this language for advice

00:10:57,730 --> 00:11:06,670
Park we have also Java Scala and Python

00:11:01,590 --> 00:11:10,060
so and are in open ships offer also the

00:11:06,670 --> 00:11:12,910
s twice I own workflow to build your

00:11:10,060 --> 00:11:16,810
application so for this who doesn't know

00:11:12,910 --> 00:11:21,160
what sy is sy is the standard workflow

00:11:16,810 --> 00:11:24,160
in open shifts you create yarn your own

00:11:21,160 --> 00:11:26,980
application image just by just providing

00:11:24,160 --> 00:11:30,589
the base image and the source code in

00:11:26,980 --> 00:11:34,920
get purple stream

00:11:30,589 --> 00:11:37,649
our the our image has also it's on the

00:11:34,920 --> 00:11:40,980
pain se management well although we have

00:11:37,649 --> 00:11:46,500
the cran-apple stream which has all the

00:11:40,980 --> 00:11:48,470
libraries started for our we have this

00:11:46,500 --> 00:11:52,170
problem that we don't have a way to

00:11:48,470 --> 00:11:56,610
provide a matter on metadata where you

00:11:52,170 --> 00:12:00,870
can just tell the the penises of your

00:11:56,610 --> 00:12:03,089
application so this is one of the

00:12:00,870 --> 00:12:06,990
challenges I did in the our image so I

00:12:03,089 --> 00:12:10,830
needed to create my own dependency

00:12:06,990 --> 00:12:17,260
management mechanism using a kind of a

00:12:10,830 --> 00:12:19,459
metadata file in very simple text file

00:12:17,260 --> 00:12:23,990
[Music]

00:12:19,459 --> 00:12:30,029
so let me just show a quick demo with

00:12:23,990 --> 00:12:33,860
our image so this is my repository where

00:12:30,029 --> 00:12:37,770
I started my my shiny application and

00:12:33,860 --> 00:12:40,980
this thing I would like to bring some

00:12:37,770 --> 00:12:45,209
more attention is the dog our libraries

00:12:40,980 --> 00:12:48,920
file what does that file means well this

00:12:45,209 --> 00:12:52,890
is the file I told in the last slide

00:12:48,920 --> 00:12:56,579
about that that makes the dependency

00:12:52,890 --> 00:12:58,829
management mechanism in the our image so

00:12:56,579 --> 00:13:04,500
as you can see is just a very simple

00:12:58,829 --> 00:13:08,040
file with each line mentioning the name

00:13:04,500 --> 00:13:11,460
of the libraries required to build your

00:13:08,040 --> 00:13:15,580
application your our application

00:13:11,460 --> 00:13:20,290
and this is honestly the only only

00:13:15,580 --> 00:13:24,550
difference are the only capability I I

00:13:20,290 --> 00:13:30,040
created for to make su I works for open

00:13:24,550 --> 00:13:34,300
shifts so we have also the main entry

00:13:30,040 --> 00:13:38,020
points the F dot iron which calls the

00:13:34,300 --> 00:13:40,660
server and UI it's the front and decane

00:13:38,020 --> 00:13:46,000
for shiny application I'm using some

00:13:40,660 --> 00:13:50,550
custom CSS and JavaScript file and in

00:13:46,000 --> 00:13:53,410
this example I start my data files

00:13:50,550 --> 00:13:58,740
inside my repository but I could also

00:13:53,410 --> 00:14:03,370
use an external storage to load the data

00:13:58,740 --> 00:14:06,460
well yeah I think this is basically what

00:14:03,370 --> 00:14:09,940
I have in my repo stream so going back

00:14:06,460 --> 00:14:14,530
to the open ships this is my project

00:14:09,940 --> 00:14:19,240
where I have the US elections data and

00:14:14,530 --> 00:14:23,380
set which contains the delay the last

00:14:19,240 --> 00:14:26,440
three elections data the number of

00:14:23,380 --> 00:14:34,120
voters of each County for the last three

00:14:26,440 --> 00:14:36,790
elections so this is the visualization

00:14:34,120 --> 00:14:40,310
from second

00:14:36,790 --> 00:14:45,420
[Music]

00:14:40,310 --> 00:14:49,709
so I created a Geo JSON file with all

00:14:45,420 --> 00:14:52,920
the county limits and then I murdered

00:14:49,709 --> 00:14:57,060
the US elections data inside this geo

00:14:52,920 --> 00:14:59,610
JSON files so what water see here is the

00:14:57,060 --> 00:15:03,899
map of the u.s. divided by the counties

00:14:59,610 --> 00:15:09,180
and the color stays the number of voters

00:15:03,899 --> 00:15:14,880
of each county and there are many parts

00:15:09,180 --> 00:15:18,329
with the same color the problem in this

00:15:14,880 --> 00:15:24,930
data sets that most data and most data

00:15:18,329 --> 00:15:29,850
is below 400 number four four hundred

00:15:24,930 --> 00:15:32,820
four thousand voters so most of the

00:15:29,850 --> 00:15:37,019
counties are with the same color because

00:15:32,820 --> 00:15:40,709
of them but you have also like for

00:15:37,019 --> 00:15:42,230
example let me check another one right

00:15:40,709 --> 00:15:43,920
here

00:15:42,230 --> 00:15:47,429
[Music]

00:15:43,920 --> 00:15:52,009
No there are some counties here with

00:15:47,429 --> 00:15:52,009
more than 10,000

00:15:52,260 --> 00:15:59,460
even here yeah this just are just very

00:15:56,010 --> 00:16:02,760
few number of voters but as you can see

00:15:59,460 --> 00:16:05,250
if you point to the county you can see

00:16:02,760 --> 00:16:07,320
the number of the county and the name of

00:16:05,250 --> 00:16:11,400
the county and the number of voters in

00:16:07,320 --> 00:16:14,040
that County specifically also I created

00:16:11,400 --> 00:16:17,730
a very simple page to explore the data

00:16:14,040 --> 00:16:22,740
so there's a table here with the state

00:16:17,730 --> 00:16:24,630
name county name the party where which

00:16:22,740 --> 00:16:28,470
receive the votes and the number of

00:16:24,630 --> 00:16:30,810
votes of each election so for 2008 2012

00:16:28,470 --> 00:16:35,910
and 2016

00:16:30,810 --> 00:16:40,070
I used tiny components to create a very

00:16:35,910 --> 00:16:47,000
simple filter so I can look at the

00:16:40,070 --> 00:16:51,740
Massachusetts state and eastex County

00:16:47,000 --> 00:16:56,330
and I have only the data related to the

00:16:51,740 --> 00:17:04,970
D state and county you can also use the

00:16:56,330 --> 00:17:07,340
other filter here so like for example d6

00:17:04,970 --> 00:17:12,800
right and it shows all the clearances

00:17:07,340 --> 00:17:16,630
around the data okay Leslie I have this

00:17:12,800 --> 00:17:21,830
other visualization which is bar graph

00:17:16,630 --> 00:17:25,520
with the votes by state in the 2008

00:17:21,830 --> 00:17:30,320
elections but I can also choose the 2016

00:17:25,520 --> 00:17:32,780
so the data changes as changing the

00:17:30,320 --> 00:17:36,280
parameters and I have a check

00:17:32,780 --> 00:17:40,600
I check box to color the votes by party

00:17:36,280 --> 00:17:49,010
so these are what the colors do and

00:17:40,600 --> 00:17:53,000
there's the legend of the graph here all

00:17:49,010 --> 00:17:56,450
right so this is a very simple dashboard

00:17:53,000 --> 00:18:01,880
I created with the US elections data

00:17:56,450 --> 00:18:04,970
this is just a demonstration of the art

00:18:01,880 --> 00:18:11,140
capabilities for our image inside open

00:18:04,970 --> 00:18:14,060
ships and I know that there are lots of

00:18:11,140 --> 00:18:18,110
improvements I need to put that like for

00:18:14,060 --> 00:18:20,360
example I'm going to prepare more the

00:18:18,110 --> 00:18:24,890
basis to eye image to support machine

00:18:20,360 --> 00:18:28,280
learning features maybe need to do some

00:18:24,890 --> 00:18:32,150
more research like GQ scheduling and who

00:18:28,280 --> 00:18:36,740
the patches first so far I know there

00:18:32,150 --> 00:18:41,390
there's support for sparkly yarn but I

00:18:36,740 --> 00:18:45,560
like to also add spark our improved view

00:18:41,390 --> 00:18:48,140
times because the cran are the cran

00:18:45,560 --> 00:18:50,660
repository only stores the source code

00:18:48,140 --> 00:18:52,550
for each library and the process is

00:18:50,660 --> 00:18:57,020
basically download the source code and

00:18:52,550 --> 00:19:00,980
compile the the hosters inside your

00:18:57,020 --> 00:19:03,650
image your container and that makes the

00:19:00,980 --> 00:19:06,260
beautifulness like for example in the

00:19:03,650 --> 00:19:10,220
u.s. election application it takes about

00:19:06,260 --> 00:19:14,110
60 minutes so I'll try to come up with a

00:19:10,220 --> 00:19:19,640
better way to improve the build times

00:19:14,110 --> 00:19:24,010
also I have only the image streams for R

00:19:19,640 --> 00:19:27,580
so I'm going to create some templates to

00:19:24,010 --> 00:19:31,220
fast creating applications using R and

00:19:27,580 --> 00:19:36,680
try to find a better way to handle the

00:19:31,220 --> 00:19:37,580
pain esteem management so that's all I

00:19:36,680 --> 00:19:43,910
have so far

00:19:37,580 --> 00:19:47,420
so before finished the talk I'd like to

00:19:43,910 --> 00:19:51,290
thank everyone who attended the this

00:19:47,420 --> 00:19:58,700
talk it's my first time talking about

00:19:51,290 --> 00:20:01,190
art so I was a bit nervous so if I if

00:19:58,700 --> 00:20:03,400
anyone have any questions feel free to

00:20:01,190 --> 00:20:03,400
ask

00:20:09,040 --> 00:20:14,669
[Music]

00:20:15,370 --> 00:20:21,160
hey thanks for card oh that was really

00:20:18,250 --> 00:20:24,880
nice when you were showing the the

00:20:21,160 --> 00:20:26,260
repple the the our interface that you

00:20:24,880 --> 00:20:29,170
had well I command you man was like a

00:20:26,260 --> 00:20:32,170
summary and it showed statistics about

00:20:29,170 --> 00:20:34,120
the various inflation your day to see

00:20:32,170 --> 00:20:37,210
our columns yeah yeah the are prompt

00:20:34,120 --> 00:20:39,820
yeah so okay in that summary can you

00:20:37,210 --> 00:20:41,140
actually index each one of those pieces

00:20:39,820 --> 00:20:43,150
of information to pull it out

00:20:41,140 --> 00:20:46,000
programmatically could you like if you

00:20:43,150 --> 00:20:48,040
wanted some of that information I don't

00:20:46,000 --> 00:20:50,830
think I follow your question hi like

00:20:48,040 --> 00:20:53,170
could I run the summary commander than

00:20:50,830 --> 00:20:54,430
say I want the top entry for County

00:20:53,170 --> 00:20:57,730
native or what I have to run a different

00:20:54,430 --> 00:21:01,590
query to do that like whatever use the

00:20:57,730 --> 00:21:01,590
summary in my in my application

00:21:01,620 --> 00:21:06,820
let me see fight and this is because

00:21:04,120 --> 00:21:11,290
you're saying a little far from the

00:21:06,820 --> 00:21:13,810
microphone I'm not so the summer this

00:21:11,290 --> 00:21:17,410
summary would you ever use this command

00:21:13,810 --> 00:21:19,450
inside an application to get the summary

00:21:17,410 --> 00:21:22,460
data

00:21:19,450 --> 00:21:25,400
so the Fenderson your questions a

00:21:22,460 --> 00:21:28,430
summary even if it's kind of part of my

00:21:25,400 --> 00:21:33,650
application instead would you use it in

00:21:28,430 --> 00:21:38,510
an application I'll okay right well to

00:21:33,650 --> 00:21:41,900
be honest and summary and some other

00:21:38,510 --> 00:21:44,540
comments I ran here it's just comments

00:21:41,900 --> 00:21:49,100
to do some data exploration but you can

00:21:44,540 --> 00:21:52,340
also you have other commands to view

00:21:49,100 --> 00:21:55,340
applications but the idea behind some of

00:21:52,340 --> 00:21:59,060
these phase commands is to have a very

00:21:55,340 --> 00:22:01,190
quick insight above your data so for

00:21:59,060 --> 00:22:03,800
example this summary is just a base

00:22:01,190 --> 00:22:08,780
command you'll know what your data is

00:22:03,800 --> 00:22:13,420
how their data like for example even as

00:22:08,780 --> 00:22:19,130
art is mostly used in statistical

00:22:13,420 --> 00:22:21,350
calculations summary usually brings all

00:22:19,130 --> 00:22:25,760
the statistical data around your data

00:22:21,350 --> 00:22:29,290
you like I'm doing with all the datasets

00:22:25,760 --> 00:22:33,480
where I can also choose some specific

00:22:29,290 --> 00:22:39,659
column like for example which is very

00:22:33,480 --> 00:22:43,909
also and this I need to use my special

00:22:39,659 --> 00:22:46,889
library called G player it's kind of

00:22:43,909 --> 00:22:50,669
advanced data manipulation tool but I

00:22:46,889 --> 00:22:52,860
can also use like for example do you

00:22:50,669 --> 00:22:55,529
know in shell you'll have the pipe

00:22:52,860 --> 00:22:57,750
command where you just get the output of

00:22:55,529 --> 00:23:00,870
one command and passes the input of the

00:22:57,750 --> 00:23:04,669
other command we have the same in team

00:23:00,870 --> 00:23:07,889
player but it's not the pipe it's this

00:23:04,669 --> 00:23:11,159
strange symbol which they call the pipe

00:23:07,889 --> 00:23:20,269
but you can also with election data you

00:23:11,159 --> 00:23:26,370
can filter by total votes since 2008

00:23:20,269 --> 00:23:31,720
below 4,000 and we have the data let's

00:23:26,370 --> 00:23:36,340
just do another thing okay sorry

00:23:31,720 --> 00:23:39,519
so with the output of that command I

00:23:36,340 --> 00:23:46,929
would like to select only the total

00:23:39,519 --> 00:23:49,360
votes in 2018 and with the output of

00:23:46,929 --> 00:23:55,539
that command you can also use the plot

00:23:49,360 --> 00:23:59,830
box plot and there is so what I did is

00:23:55,539 --> 00:24:03,990
just if I used the same command using

00:23:59,830 --> 00:24:07,720
the raw data it will be a very difficult

00:24:03,990 --> 00:24:11,350
box plot visualization to see because of

00:24:07,720 --> 00:24:17,860
the outliers but then what I did is just

00:24:11,350 --> 00:24:21,490
I filtered the data to to get the data

00:24:17,860 --> 00:24:25,659
below 4,000 and then I select all only

00:24:21,490 --> 00:24:27,970
the column I'd like to visualize and

00:24:25,659 --> 00:24:32,799
then I call the box plot just in a

00:24:27,970 --> 00:24:36,100
single pipeline you know so all these

00:24:32,799 --> 00:24:39,519
comments are mostly used to get some

00:24:36,100 --> 00:24:42,129
data exploration and shiny could be

00:24:39,519 --> 00:24:46,090
useful to create all the visualizations

00:24:42,129 --> 00:24:49,020
to publish in a webpage style does that

00:24:46,090 --> 00:24:51,650
answer your question yes thank you

00:24:49,020 --> 00:24:51,650
cool

00:24:51,700 --> 00:25:02,800
[Music]

00:25:00,190 --> 00:25:08,110
hi okay hear me

00:25:02,800 --> 00:25:11,050
a little bit okay so when you start by

00:25:08,110 --> 00:25:14,320
saying this tools easy this is easy it's

00:25:11,050 --> 00:25:16,270
not from for developers you don't have

00:25:14,320 --> 00:25:17,080
to be developer to learn it you were

00:25:16,270 --> 00:25:22,260
talking to me

00:25:17,080 --> 00:25:28,920
so how a few questions you should use a

00:25:22,260 --> 00:25:32,290
comma separated CSV file do you have to

00:25:28,920 --> 00:25:37,300
format that in any particular way to get

00:25:32,290 --> 00:25:39,910
the way does it have to be for man in a

00:25:37,300 --> 00:25:43,090
specific way for our or is it just in a

00:25:39,910 --> 00:25:46,510
CSV file number one no it can be any CSV

00:25:43,090 --> 00:25:51,360
file actually CSV file is just one of

00:25:46,510 --> 00:25:56,250
the sources I could use but I was

00:25:51,360 --> 00:25:56,250
hanging out there data set for

00:25:56,400 --> 00:26:04,660
atmospheric data for example they have a

00:25:59,830 --> 00:26:09,390
special format called netcdf it's a

00:26:04,660 --> 00:26:09,390
binary data so it's very hard to use in

00:26:09,750 --> 00:26:18,370
in standard text editors but I know that

00:26:15,370 --> 00:26:21,880
there's a library inside are called

00:26:18,370 --> 00:26:24,700
our netcdf which you can read the netcdf

00:26:21,880 --> 00:26:29,470
data and then I created an order

00:26:24,700 --> 00:26:33,070
I created a function to read the netcdf

00:26:29,470 --> 00:26:37,230
data and export to CSV but it can be

00:26:33,070 --> 00:26:40,500
whatever CSV as well as have separators

00:26:37,230 --> 00:26:42,390
you don't need to have the first line as

00:26:40,500 --> 00:26:45,090
the coal names but you need to specify

00:26:42,390 --> 00:26:49,010
you don't need the first line is a call

00:26:45,090 --> 00:26:51,929
name you can also have the role names

00:26:49,010 --> 00:26:54,690
but you need to specify if you need or

00:26:51,929 --> 00:26:58,410
not to read the first column as the role

00:26:54,690 --> 00:27:01,169
name so there are lots of options to

00:26:58,410 --> 00:27:03,990
read and and it's just be data not only

00:27:01,169 --> 00:27:07,110
CSV data about every other format that

00:27:03,990 --> 00:27:11,160
could contain data I'm intrigued with is

00:27:07,110 --> 00:27:12,870
because I just had a project where I had

00:27:11,160 --> 00:27:16,590
CSV files all over the place and I had

00:27:12,870 --> 00:27:18,210
to use grabber said to just kind of get

00:27:16,590 --> 00:27:21,540
what I needed and print out what I

00:27:18,210 --> 00:27:24,150
needed and this our language as you

00:27:21,540 --> 00:27:27,470
presented it to look like a little bit

00:27:24,150 --> 00:27:33,330
great if I knew it two weeks ago

00:27:27,470 --> 00:27:36,240
so for know how much effort would you

00:27:33,330 --> 00:27:38,520
say it takes to get to a point where you

00:27:36,240 --> 00:27:40,530
can create reports or something like

00:27:38,520 --> 00:27:43,140
what you just show today thank you

00:27:40,530 --> 00:27:45,450
[Music]

00:27:43,140 --> 00:27:48,179
I'm going to finish that our session and

00:27:45,450 --> 00:27:51,870
I will start again can you see that

00:27:48,179 --> 00:27:56,549
you're that last paragraph you can see

00:27:51,870 --> 00:27:59,100
there are two very helpful comments

00:27:56,549 --> 00:28:03,299
there's the demo command where there

00:27:59,100 --> 00:28:06,570
there's another there's a list of very

00:28:03,299 --> 00:28:10,170
simple use cases to use are and there's

00:28:06,570 --> 00:28:13,200
the help for the online help so when you

00:28:10,170 --> 00:28:17,820
type help it will open a very simple

00:28:13,200 --> 00:28:20,010
HTTP server and export it open your web

00:28:17,820 --> 00:28:22,860
browser with all the online

00:28:20,010 --> 00:28:30,720
documentation for our there's also some

00:28:22,860 --> 00:28:35,100
very beginner our tutorials so is for me

00:28:30,720 --> 00:28:37,840
if I would beginning learn arm I would

00:28:35,100 --> 00:28:43,330
start with one of these two comments

00:28:37,840 --> 00:28:44,810
[Music]

00:28:43,330 --> 00:28:47,130
all right

00:28:44,810 --> 00:28:49,060
so thank you everyone

00:28:47,130 --> 00:28:52,810
[Music]

00:28:49,060 --> 00:28:55,500
yato thank you everyone for attending

00:28:52,810 --> 00:29:24,939
today and we hope to see you tomorrow

00:28:55,500 --> 00:29:24,939

YouTube URL: https://www.youtube.com/watch?v=q-_YgFOoiX0


