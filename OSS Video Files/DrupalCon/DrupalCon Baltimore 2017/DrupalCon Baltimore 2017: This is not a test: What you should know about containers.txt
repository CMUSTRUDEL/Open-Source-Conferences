Title: DrupalCon Baltimore 2017: This is not a test: What you should know about containers
Publication date: 2017-04-26
Playlist: DrupalCon Baltimore 2017
Description: 
	Containers are in everybody's lips, if you search through any tech conference session proposal list, they are full of talks about Docker and Containers. Lull in conversation at a networking event? Ask how someone is using containers! Unfortunately, these talks are only about how to specifically connect Containers and Drupal, how to run them on massive scale or how to setup them in a secure way.

I believe thought when it comes to containers, we are missing the forest for the trees. The excitement around the topic is great, but today barely anyone is actually using containers in production. For such a hot button topic this should not be the case, except that containers can also simply be scary. I personally believe that only a few people really understand in great detail how they work and the rest are nodding, smiling, and faking it until they make it. 

In this session I would like to give any interested person (business, backend, frontend, design, consultant) an explanation and overview of containerization:

What’s the big deal anyway? 
What makes containers so exciting and why they are seen as a revolution in computing
What’s the potential?
What new possibilities containers open up (for Drupal, for local Development, for automated Testing)
What’s the hold up?
Why people are still hesitant on running containers in Production
What’s next? 
Where containers will bring us in the future
Captions: 
	00:00:00,000 --> 00:00:03,870
so my name is Michael I'm the CTO of a

00:00:02,010 --> 00:00:06,330
meze IO and also all the other amazing

00:00:03,870 --> 00:00:10,410
companies and we do hosting and we do a

00:00:06,330 --> 00:00:12,719
lot of things with containers and in the

00:00:10,410 --> 00:00:15,030
last couple of times that I talked with

00:00:12,719 --> 00:00:18,000
people I see there's a lot of confusion

00:00:15,030 --> 00:00:21,900
of what are they exactly what are they

00:00:18,000 --> 00:00:24,570
here for are they going away and is the

00:00:21,900 --> 00:00:26,310
VM is it nas and things like that so the

00:00:24,570 --> 00:00:29,880
session today should really be about an

00:00:26,310 --> 00:00:32,189
overview what are they actually and what

00:00:29,880 --> 00:00:34,649
are they used for and will they go away

00:00:32,189 --> 00:00:38,100
or not so we're going to talk first

00:00:34,649 --> 00:00:39,450
about what are containers then we're

00:00:38,100 --> 00:00:40,829
going to talk about containers and

00:00:39,450 --> 00:00:43,620
docker because there's a lot of

00:00:40,829 --> 00:00:45,570
confusion between the two and we're

00:00:43,620 --> 00:00:48,090
going to try to look a bit in the future

00:00:45,570 --> 00:00:51,989
of containers and you can already see

00:00:48,090 --> 00:00:54,750
now they're not going away but let's

00:00:51,989 --> 00:00:56,430
first look at containers so when I'm

00:00:54,750 --> 00:00:58,920
hearing people explaining containers

00:00:56,430 --> 00:01:03,270
they are using yeah there are kind of

00:00:58,920 --> 00:01:06,960
something like VM I'm sorry to say no

00:01:03,270 --> 00:01:09,590
they are not it's very similar and you

00:01:06,960 --> 00:01:12,270
can do similar things but there's very

00:01:09,590 --> 00:01:14,490
important parts and to actually explain

00:01:12,270 --> 00:01:19,080
you what a container is I want to use

00:01:14,490 --> 00:01:22,229
the analogy of a city and a house and an

00:01:19,080 --> 00:01:24,119
apartment so let's first look at

00:01:22,229 --> 00:01:28,200
physical servers let's look at the

00:01:24,119 --> 00:01:30,030
physical server as a city where multiple

00:01:28,200 --> 00:01:32,030
people live we have a lot of things in

00:01:30,030 --> 00:01:35,579
there wind cities we have things like

00:01:32,030 --> 00:01:40,290
streets we have stuff like a water

00:01:35,579 --> 00:01:42,509
system we have power grids and if you

00:01:40,290 --> 00:01:47,430
compare that to a physical server we

00:01:42,509 --> 00:01:48,930
could say like and we have a CPU is like

00:01:47,430 --> 00:01:51,570
maybe the street

00:01:48,930 --> 00:01:54,540
the Rams is the water system and the

00:01:51,570 --> 00:01:58,049
storage is the power grid and if we look

00:01:54,540 --> 00:02:01,259
at the highways of a city that's

00:01:58,049 --> 00:02:03,930
actually the network between multiple

00:02:01,259 --> 00:02:05,939
servers so cities provide us with

00:02:03,930 --> 00:02:09,319
infrastructure as humans that we need

00:02:05,939 --> 00:02:12,569
and physical servers provide our apps

00:02:09,319 --> 00:02:13,980
interest em so resources like CPU RAM

00:02:12,569 --> 00:02:16,379
storage and

00:02:13,980 --> 00:02:19,080
possibility to talk to each other like

00:02:16,379 --> 00:02:21,930
we move between cities we visit friends

00:02:19,080 --> 00:02:26,430
and things like that so if you think

00:02:21,930 --> 00:02:31,349
about now a virtual machine a virtual

00:02:26,430 --> 00:02:34,680
machine is a house and within a house is

00:02:31,349 --> 00:02:38,849
within a city so a VM is in a physical

00:02:34,680 --> 00:02:41,700
server and the house though have its own

00:02:38,849 --> 00:02:45,659
plumbing system a house has its own

00:02:41,700 --> 00:02:48,810
heating system the house also has its

00:02:45,659 --> 00:02:51,480
own power distribution system and very

00:02:48,810 --> 00:02:54,680
important a house has doors and fences

00:02:51,480 --> 00:02:56,879
so not everybody goes in and takes that

00:02:54,680 --> 00:02:57,510
so if you need a house and you need

00:02:56,879 --> 00:02:59,670
another one

00:02:57,510 --> 00:03:01,680
you take the infrastructure of a city

00:02:59,670 --> 00:03:03,629
and you put your house there and you

00:03:01,680 --> 00:03:06,480
have another house with the vm's it's

00:03:03,629 --> 00:03:09,750
exactly the same a virtual machine has a

00:03:06,480 --> 00:03:12,810
full operating system it has its full

00:03:09,750 --> 00:03:17,060
own network stack it's at this own

00:03:12,810 --> 00:03:21,950
kernel and also it has its own firewall

00:03:17,060 --> 00:03:24,930
so if you want to clone a VM to another

00:03:21,950 --> 00:03:27,180
physical server or we just want to clone

00:03:24,930 --> 00:03:29,760
a VM in general we copy everything we

00:03:27,180 --> 00:03:31,470
start the full operating system we start

00:03:29,760 --> 00:03:33,359
the full networks back we saw start the

00:03:31,470 --> 00:03:36,030
full kernel and we start the full

00:03:33,359 --> 00:03:38,760
firewall and the problem is a bit first

00:03:36,030 --> 00:03:40,950
that takes quite some time to boot an

00:03:38,760 --> 00:03:43,470
operating system and everything and it's

00:03:40,950 --> 00:03:47,459
also going to be very heavy a virtual

00:03:43,470 --> 00:03:49,139
machine usually is between it probably

00:03:47,459 --> 00:03:52,620
the smallest one you can maybe go down

00:03:49,139 --> 00:03:54,419
to 200 megabytes but usually a virtual

00:03:52,620 --> 00:03:55,739
machine has a couple of gigabytes with

00:03:54,419 --> 00:03:58,230
the full operating system and the

00:03:55,739 --> 00:04:00,510
network stack and and all the stuff in

00:03:58,230 --> 00:04:02,519
there they are not bad because in the

00:04:00,510 --> 00:04:04,139
past we started physical servers every

00:04:02,519 --> 00:04:05,819
time we had a new app or we had a new

00:04:04,139 --> 00:04:08,340
version of our app we actually put like

00:04:05,819 --> 00:04:11,669
a new servers in there so VMs made a lot

00:04:08,340 --> 00:04:14,310
of things possible and now let's look at

00:04:11,669 --> 00:04:18,539
the containers and you can guess it

00:04:14,310 --> 00:04:21,180
containers are apartment so if you look

00:04:18,539 --> 00:04:25,349
at an apartment an apartment has a

00:04:21,180 --> 00:04:27,900
shared plumbing system an apartment has

00:04:25,349 --> 00:04:29,970
shared thing your you reuse

00:04:27,900 --> 00:04:31,800
in an existing heat system you can still

00:04:29,970 --> 00:04:35,160
control in your own apartment how hot or

00:04:31,800 --> 00:04:38,550
cold it is but the actual heating

00:04:35,160 --> 00:04:40,979
produced is somewhere in the building

00:04:38,550 --> 00:04:42,810
and you also have a shared power

00:04:40,979 --> 00:04:45,449
distribution system so the power comes

00:04:42,810 --> 00:04:48,300
into and it's shared among everybody and

00:04:45,449 --> 00:04:51,060
we also have shared doors and fences

00:04:48,300 --> 00:04:53,490
not everybody can have a very secure

00:04:51,060 --> 00:04:55,169
door so we put one very secure door at

00:04:53,490 --> 00:04:57,120
the bottom when where the people

00:04:55,169 --> 00:04:58,500
actually walk in so the doors of the

00:04:57,120 --> 00:05:00,000
individual apartments they don't need to

00:04:58,500 --> 00:05:02,250
be that secure anymore because we have

00:05:00,000 --> 00:05:04,830
one very secure one so we also share

00:05:02,250 --> 00:05:07,800
security and containers you guessed it

00:05:04,830 --> 00:05:11,699
is exactly that so a container is a

00:05:07,800 --> 00:05:13,979
minimal operating system it's much much

00:05:11,699 --> 00:05:17,010
much smaller than what actually is

00:05:13,979 --> 00:05:20,310
needed in a full virtual machine it

00:05:17,010 --> 00:05:23,130
shares the kernel all containers

00:05:20,310 --> 00:05:27,150
together running on the same server or

00:05:23,130 --> 00:05:29,190
sharing the kernel they have a common

00:05:27,150 --> 00:05:31,860
container engine like the power

00:05:29,190 --> 00:05:34,740
distribution system they all use the

00:05:31,860 --> 00:05:37,050
same container engine and they also have

00:05:34,740 --> 00:05:39,180
a shared firewall like an apartment we

00:05:37,050 --> 00:05:40,889
have one big door the containers they

00:05:39,180 --> 00:05:45,360
have a big firewall in front of them

00:05:40,889 --> 00:05:46,520
that does everything does that make

00:05:45,360 --> 00:05:51,990
sense

00:05:46,520 --> 00:05:54,120
nothing so what are containers exactly

00:05:51,990 --> 00:05:57,930
first of all they are super lightweight

00:05:54,120 --> 00:06:01,860
a container can be it can start at like

00:05:57,930 --> 00:06:03,750
2 or 3 megabytes you can start and stop

00:06:01,860 --> 00:06:06,840
a container and everything that B is

00:06:03,750 --> 00:06:09,360
necessary to run in there is running in

00:06:06,840 --> 00:06:13,590
that single container so it's much

00:06:09,360 --> 00:06:16,349
smaller than a full virtual machine also

00:06:13,590 --> 00:06:19,889
they're really really fast a container

00:06:16,349 --> 00:06:21,510
can start within milliseconds and now

00:06:19,889 --> 00:06:23,099
the virtual machine that has to boot

00:06:21,510 --> 00:06:25,349
everything and load different any

00:06:23,099 --> 00:06:27,539
systems in whatever a kernel that a

00:06:25,349 --> 00:06:31,229
container that just starts and it also

00:06:27,539 --> 00:06:33,810
stops again very fast it is though fully

00:06:31,229 --> 00:06:36,389
secure because within the containers

00:06:33,810 --> 00:06:38,190
they are separate it's like in your

00:06:36,389 --> 00:06:39,690
apartment building if you're in your

00:06:38,190 --> 00:06:41,440
apartment you cannot just walk into the

00:06:39,690 --> 00:06:43,150
other apartment in there

00:06:41,440 --> 00:06:44,680
there's a door again so it's the same

00:06:43,150 --> 00:06:47,080
with containers if you are in a

00:06:44,680 --> 00:06:49,030
container you cannot see what the other

00:06:47,080 --> 00:06:50,680
containers are doing you cannot change

00:06:49,030 --> 00:06:52,780
what the other containers are doing you

00:06:50,680 --> 00:06:59,230
know that air but you don't actually see

00:06:52,780 --> 00:07:02,770
what's happening and because of all of

00:06:59,230 --> 00:07:05,410
that containers allow us micro-service

00:07:02,770 --> 00:07:07,000
architectures actually a whole other

00:07:05,410 --> 00:07:10,150
topic and would allow another three

00:07:07,000 --> 00:07:12,280
hours talking but because they are so

00:07:10,150 --> 00:07:16,260
small because they start too fast

00:07:12,280 --> 00:07:19,450
it allows us to put one single service

00:07:16,260 --> 00:07:22,780
into one container if we talk about

00:07:19,450 --> 00:07:24,250
Drupal hosting the PHP SPM can be in one

00:07:22,780 --> 00:07:26,230
container the nginx

00:07:24,250 --> 00:07:29,200
can be in another container the varnish

00:07:26,230 --> 00:07:32,260
can be in another container you want to

00:07:29,200 --> 00:07:34,120
have a small things as possible because

00:07:32,260 --> 00:07:36,940
you can reuse them you can distribute

00:07:34,120 --> 00:07:40,060
them and stuff like that and if you have

00:07:36,940 --> 00:07:43,870
the end good you can still run container

00:07:40,060 --> 00:07:46,060
systems on VMs you can still you still

00:07:43,870 --> 00:07:47,230
need like if we look at the house or if

00:07:46,060 --> 00:07:49,419
you look at an apartment

00:07:47,230 --> 00:07:50,830
you still need a plumbing system you

00:07:49,419 --> 00:07:54,030
still need a power distribution system

00:07:50,830 --> 00:07:59,910
it just shared the same is for the ends

00:07:54,030 --> 00:08:03,040
so we usually look at like graphs how am

00:07:59,910 --> 00:08:05,620
doctor is used you have the physical

00:08:03,040 --> 00:08:08,530
server on about the button you have the

00:08:05,620 --> 00:08:11,740
operating system and you have the doctor

00:08:08,530 --> 00:08:13,840
engine what that doctor engine exactly

00:08:11,740 --> 00:08:18,070
does or a container engine we will see

00:08:13,840 --> 00:08:22,450
later and on top there's three different

00:08:18,070 --> 00:08:24,220
apps these are our containers so there

00:08:22,450 --> 00:08:25,630
are our apartment buildings and all the

00:08:24,220 --> 00:08:26,950
stuff at the bottom is the things that

00:08:25,630 --> 00:08:29,710
isn't the button usually of the

00:08:26,950 --> 00:08:31,720
apartment house but we have our app in

00:08:29,710 --> 00:08:33,339
there and we maybe have some libraries

00:08:31,720 --> 00:08:34,900
like our Drupal code is in there and

00:08:33,339 --> 00:08:37,539
maybe an engine X or something like that

00:08:34,900 --> 00:08:39,909
and we have multiple of them but in here

00:08:37,539 --> 00:08:44,980
there's no virtual machine so it's still

00:08:39,909 --> 00:08:47,980
possible to run doctor containers inside

00:08:44,980 --> 00:08:51,280
a virtual machine so this is a setup

00:08:47,980 --> 00:08:52,810
where we have a hypervisor which is

00:08:51,280 --> 00:08:54,740
basically what the virtual machine is

00:08:52,810 --> 00:08:57,800
doing it hypervisors

00:08:54,740 --> 00:08:59,529
multiple operating systems so we still

00:08:57,800 --> 00:09:02,270
have the physical server at the button

00:08:59,529 --> 00:09:06,020
then we have an hypervisor there and

00:09:02,270 --> 00:09:07,810
then we have an operating system we've

00:09:06,020 --> 00:09:11,930
done a doctor or a container engine

00:09:07,810 --> 00:09:13,490
we've done again multiple apps and this

00:09:11,930 --> 00:09:16,970
is actually what you're getting if you

00:09:13,490 --> 00:09:19,040
go to any cloud provider today they will

00:09:16,970 --> 00:09:24,110
do the high providing stuff for you so

00:09:19,040 --> 00:09:26,420
if you go to a sure AWS Google cloud or

00:09:24,110 --> 00:09:28,250
whatever they are having for you you

00:09:26,420 --> 00:09:30,500
don't see it but they're running an

00:09:28,250 --> 00:09:33,140
hypervisor for you and they're running

00:09:30,500 --> 00:09:34,520
the physical servers for you yes it's

00:09:33,140 --> 00:09:37,250
the clouds and it's somebody else's

00:09:34,520 --> 00:09:39,560
server it's still there you may be not

00:09:37,250 --> 00:09:41,690
seeing it so what you're doing you're

00:09:39,560 --> 00:09:43,820
actually doing the top part so you're

00:09:41,690 --> 00:09:46,250
installing the operating system on top

00:09:43,820 --> 00:09:47,750
of that widow machine and you're having

00:09:46,250 --> 00:09:57,680
the docker engine or a container engine

00:09:47,750 --> 00:10:00,950
that then runs the actual containers so

00:09:57,680 --> 00:10:04,070
a lot of people say like okay yeah

00:10:00,950 --> 00:10:07,399
that's cool and who actually uses

00:10:04,070 --> 00:10:08,750
containers well turns out all you tuple

00:10:07,399 --> 00:10:12,500
friendly holsters they're all using

00:10:08,750 --> 00:10:14,209
containers you just don't see it there

00:10:12,500 --> 00:10:16,940
are other companies these are for

00:10:14,209 --> 00:10:20,029
example runs 100,000 transactions

00:10:16,940 --> 00:10:22,910
through containers every day and they're

00:10:20,029 --> 00:10:25,850
starting to do more and more the Netflix

00:10:22,910 --> 00:10:29,020
series that you watched maybe em on the

00:10:25,850 --> 00:10:32,540
weekend got encoded inside a container

00:10:29,020 --> 00:10:34,670
Netflix starts 1 million containers per

00:10:32,540 --> 00:10:38,779
week and yes they also throw them away

00:10:34,670 --> 00:10:41,230
again so they moved all of their

00:10:38,779 --> 00:10:43,370
infrastructure on to containers and

00:10:41,230 --> 00:10:46,070
everything that happens with Netflix is

00:10:43,370 --> 00:10:49,010
happening in containers and you ever

00:10:46,070 --> 00:10:52,010
heard about Alibaba the singles day they

00:10:49,010 --> 00:10:59,060
made 12 billion dollars in one single

00:10:52,010 --> 00:11:01,570
day and it all ran on containers so the

00:10:59,060 --> 00:11:05,510
big companies they're already there

00:11:01,570 --> 00:11:07,790
they're already using it why

00:11:05,510 --> 00:11:11,150
because they are like that they are fast

00:11:07,790 --> 00:11:13,850
and you can reuse your existing

00:11:11,150 --> 00:11:15,290
infrastructure even better because you

00:11:13,850 --> 00:11:17,840
don't have to move virtual machines

00:11:15,290 --> 00:11:20,900
around you're just moving containers

00:11:17,840 --> 00:11:23,350
around so that means they actually

00:11:20,900 --> 00:11:27,200
reduce their amount of hardware

00:11:23,350 --> 00:11:29,480
sometimes even up to 50% and it's better

00:11:27,200 --> 00:11:33,140
for the developer as well because you

00:11:29,480 --> 00:11:36,590
will see later how exactly that works so

00:11:33,140 --> 00:11:38,780
all of that now was about containers but

00:11:36,590 --> 00:11:41,660
what does it actually has to do with

00:11:38,780 --> 00:11:44,540
chakra because everybody uses to claim

00:11:41,660 --> 00:11:48,620
in the same sentence and using the same

00:11:44,540 --> 00:11:52,220
well so what docker is is an

00:11:48,620 --> 00:11:56,600
implementation of containers if you run

00:11:52,220 --> 00:11:59,930
a docker it starts you a container but

00:11:56,600 --> 00:12:02,720
docker is much more than just running a

00:11:59,930 --> 00:12:04,850
single container so docker for example

00:12:02,720 --> 00:12:07,450
has the docker engine we saw that now a

00:12:04,850 --> 00:12:11,410
couple of times so the darker engine is

00:12:07,450 --> 00:12:13,850
responsible for running the containers

00:12:11,410 --> 00:12:15,500
for looking that they're actually

00:12:13,850 --> 00:12:17,180
running so you can tell doctor if the

00:12:15,500 --> 00:12:20,860
container dies please restart it again

00:12:17,180 --> 00:12:23,900
for me automatically you have networking

00:12:20,860 --> 00:12:25,190
in there so it creates virtual networks

00:12:23,900 --> 00:12:27,080
we're drilling to face the stuff like

00:12:25,190 --> 00:12:29,270
that it makes sure that you have storage

00:12:27,080 --> 00:12:31,100
you can connect storage to your physical

00:12:29,270 --> 00:12:33,650
storage or you can connect to somewhere

00:12:31,100 --> 00:12:36,160
else it makes sure that nobody else can

00:12:33,650 --> 00:12:39,230
access it that the security is given and

00:12:36,160 --> 00:12:41,780
docker even has a plugging system so if

00:12:39,230 --> 00:12:44,480
you want to extend the functionality you

00:12:41,780 --> 00:12:46,010
can do that that's everything given if

00:12:44,480 --> 00:12:49,580
you install docker on your local

00:12:46,010 --> 00:12:51,440
computer you install the docker engine

00:12:49,580 --> 00:12:53,120
which brings all these things which

00:12:51,440 --> 00:12:55,430
technically have nothing to do with the

00:12:53,120 --> 00:12:58,490
container itself it's just stuff that

00:12:55,430 --> 00:13:00,170
has been built around because containers

00:12:58,490 --> 00:13:03,440
actually exist since a long long time

00:13:00,170 --> 00:13:05,810
they were just not really usable they

00:13:03,440 --> 00:13:08,840
were not easy to use you didn't just run

00:13:05,810 --> 00:13:09,460
one single command docker run and you

00:13:08,840 --> 00:13:13,010
headed

00:13:09,460 --> 00:13:17,030
but now dr. actually brings that in dr.

00:13:13,010 --> 00:13:19,190
also introduces the ideas of images so

00:13:17,030 --> 00:13:22,430
an docker image

00:13:19,190 --> 00:13:26,180
a full representation of the app that

00:13:22,430 --> 00:13:28,970
you would like to run so I can build a

00:13:26,180 --> 00:13:32,210
docker image on my computer and I can

00:13:28,970 --> 00:13:35,060
send it to a hosting company or to my

00:13:32,210 --> 00:13:36,560
server and everything that is necessary

00:13:35,060 --> 00:13:38,540
for all the files and all the

00:13:36,560 --> 00:13:41,390
configuration of that container is all

00:13:38,540 --> 00:13:43,880
in that single docker image and I can

00:13:41,390 --> 00:13:46,340
push that around so it's a very easy way

00:13:43,880 --> 00:13:50,180
to distribute stuff it's like a virtual

00:13:46,340 --> 00:13:52,640
machine image just going back it's much

00:13:50,180 --> 00:13:55,610
smaller the smallest docker images are

00:13:52,640 --> 00:13:57,200
maybe 2 or 3 megabytes if you can still

00:13:55,610 --> 00:13:59,510
build them very big you shouldn't but

00:13:57,200 --> 00:14:02,090
and the very interesting thing that

00:13:59,510 --> 00:14:05,660
doctor did they implemented a layer

00:14:02,090 --> 00:14:07,820
system what does it mean if I'm building

00:14:05,660 --> 00:14:09,710
a docker file completely fresh and I'm

00:14:07,820 --> 00:14:12,170
pushing it to my server the whole docker

00:14:09,710 --> 00:14:14,030
file is kind of pushed up there so let's

00:14:12,170 --> 00:14:17,090
say my docker file with my Drupal site

00:14:14,030 --> 00:14:19,850
in it is 400 megabytes and pushing 400

00:14:17,090 --> 00:14:22,160
megabytes up there now I'm changing

00:14:19,850 --> 00:14:26,060
thirst let's say one single file or a

00:14:22,160 --> 00:14:29,000
couple of files in my Drupal build a

00:14:26,060 --> 00:14:31,850
docker image again and push it again the

00:14:29,000 --> 00:14:34,070
Dockers M layer image the image layer

00:14:31,850 --> 00:14:35,980
will realize that only parts have

00:14:34,070 --> 00:14:38,870
changed and will only push the changes

00:14:35,980 --> 00:14:40,970
let's say 10 megabytes over there so the

00:14:38,870 --> 00:14:43,130
rest of the 390 megabytes they're not

00:14:40,970 --> 00:14:44,660
pushed because what happens there

00:14:43,130 --> 00:14:46,790
hashing it and they're comparing these

00:14:44,660 --> 00:14:49,730
two hashes and realize I don't have to

00:14:46,790 --> 00:14:52,610
push that anymore so it's very very fast

00:14:49,730 --> 00:14:54,530
you can deploy changes in a very very

00:14:52,610 --> 00:14:57,320
fast matter because the system actually

00:14:54,530 --> 00:14:58,730
realizes what has changed that is

00:14:57,320 --> 00:15:01,700
something that got introduced by docker

00:14:58,730 --> 00:15:04,820
and has also that's one of the reasons

00:15:01,700 --> 00:15:07,310
that by docker is so successful because

00:15:04,820 --> 00:15:11,150
you can now push a tiny change within

00:15:07,310 --> 00:15:13,250
seconds to the production side the next

00:15:11,150 --> 00:15:16,280
thing they do there is a docker registry

00:15:13,250 --> 00:15:19,010
the docker registry is the storage for

00:15:16,280 --> 00:15:20,780
your docker images the most famous one

00:15:19,010 --> 00:15:22,880
is the docker hub where a lot of people

00:15:20,780 --> 00:15:24,680
go but you can actually the docker

00:15:22,880 --> 00:15:26,270
registry itself is a containers you can

00:15:24,680 --> 00:15:27,860
run it in your already existing doctor

00:15:26,270 --> 00:15:30,560
environment and it just allows you to

00:15:27,860 --> 00:15:32,300
storage for all your images you can push

00:15:30,560 --> 00:15:32,880
them there you can ask private ones you

00:15:32,300 --> 00:15:34,500
have authentic

00:15:32,880 --> 00:15:36,540
so that not everybody can run your

00:15:34,500 --> 00:15:37,740
Drupal site on their own servers even

00:15:36,540 --> 00:15:39,660
though that would actually be a cool

00:15:37,740 --> 00:15:42,240
idea but and people don't like doing

00:15:39,660 --> 00:15:45,180
that so um it also makes the whole thing

00:15:42,240 --> 00:15:48,480
safe and the last thing you maybe heard

00:15:45,180 --> 00:15:51,420
about its docker swarm and docker swarm

00:15:48,480 --> 00:15:53,190
is an orchestration system another term

00:15:51,420 --> 00:15:56,460
ok let's look at that so what is

00:15:53,190 --> 00:15:58,230
orchestration other orchestration tools

00:15:56,460 --> 00:16:00,300
or like dr. swarm that we just talked

00:15:58,230 --> 00:16:01,770
about that Dockers own invention and

00:16:00,300 --> 00:16:03,450
that's what they're pushing obviously

00:16:01,770 --> 00:16:06,600
but there is also kubernetes there is

00:16:03,450 --> 00:16:09,570
open chase there is Rancher so the

00:16:06,600 --> 00:16:12,450
problem of it because containers can

00:16:09,570 --> 00:16:14,790
start very fast and you can move them

00:16:12,450 --> 00:16:18,180
around very easily that also means

00:16:14,790 --> 00:16:19,830
they're dying very fast and dying

00:16:18,180 --> 00:16:23,430
containers is not a lot of fun because

00:16:19,830 --> 00:16:26,820
then you Drupal site is down so you need

00:16:23,430 --> 00:16:29,760
a system that orchestrates like a group

00:16:26,820 --> 00:16:32,370
of containers so the orchestration

00:16:29,760 --> 00:16:34,140
system you tell the orchestration system

00:16:32,370 --> 00:16:36,690
like I want to have five containers of

00:16:34,140 --> 00:16:39,270
my Drupal site running and that

00:16:36,690 --> 00:16:41,760
orchestration system looks which servers

00:16:39,270 --> 00:16:44,160
or VMs are available which ones are used

00:16:41,760 --> 00:16:46,590
and distributes them if one of them

00:16:44,160 --> 00:16:48,480
let's say the whole VM dies the

00:16:46,590 --> 00:16:50,040
orchestration system realizes oh I only

00:16:48,480 --> 00:16:53,130
have four running now it's not another

00:16:50,040 --> 00:16:54,630
one or you can also do scaling so we can

00:16:53,130 --> 00:16:56,670
look at and say like oh we have a lot of

00:16:54,630 --> 00:16:59,070
traffic coming in and starting more

00:16:56,670 --> 00:17:02,070
containers so it's the system that on

00:16:59,070 --> 00:17:05,760
top is and looks at what exactly happens

00:17:02,070 --> 00:17:07,020
what should I need etc so if you

00:17:05,760 --> 00:17:09,660
actually want to run docker in

00:17:07,020 --> 00:17:11,610
production you will not have three

00:17:09,660 --> 00:17:12,750
servers and just run a bit docker run in

00:17:11,610 --> 00:17:15,120
your console you will have an

00:17:12,750 --> 00:17:17,730
orchestration system that will take over

00:17:15,120 --> 00:17:21,030
these things for you because containers

00:17:17,730 --> 00:17:22,800
are gonna die they are not made to be

00:17:21,030 --> 00:17:25,920
there forever and if you go back to the

00:17:22,800 --> 00:17:27,390
Netflix yes they are starting 1 million

00:17:25,920 --> 00:17:30,810
containers per week but they're also

00:17:27,390 --> 00:17:33,150
stopping 1 million containers I think

00:17:30,810 --> 00:17:35,490
that's the weirdest part to understand a

00:17:33,150 --> 00:17:37,980
lot of times if we talk about physical

00:17:35,490 --> 00:17:39,720
servers or virtual machines we think

00:17:37,980 --> 00:17:43,320
about something that is started once and

00:17:39,720 --> 00:17:45,480
stays there until I stop it with a

00:17:43,320 --> 00:17:46,809
docker container for example if we

00:17:45,480 --> 00:17:50,289
employ new

00:17:46,809 --> 00:17:53,230
a code for you we are not exchanging the

00:17:50,289 --> 00:17:55,779
Drupal code in the existing container we

00:17:53,230 --> 00:17:58,330
are starting a new container with the

00:17:55,779 --> 00:18:01,480
new code make sure that everything is

00:17:58,330 --> 00:18:03,129
good and then we move to traffic from

00:18:01,480 --> 00:18:05,950
the old container to the new container

00:18:03,129 --> 00:18:09,460
are still monitoring if there are any

00:18:05,950 --> 00:18:11,679
errors or problems and only after some

00:18:09,460 --> 00:18:13,779
seconds that we are sure that the code

00:18:11,679 --> 00:18:16,629
in that new container is good we're

00:18:13,779 --> 00:18:18,129
starting the old one if during that time

00:18:16,629 --> 00:18:20,379
we're realizing something is flaky and

00:18:18,129 --> 00:18:23,200
there is errors we just move the counter

00:18:20,379 --> 00:18:24,759
the traffic back to the old one and we

00:18:23,200 --> 00:18:26,639
stop the new one and tell you hey there

00:18:24,759 --> 00:18:28,570
was an error and we show you the error

00:18:26,639 --> 00:18:31,389
something that has never been possible

00:18:28,570 --> 00:18:33,070
before with virtual machines because the

00:18:31,389 --> 00:18:35,860
virtual machines we're replacing code

00:18:33,070 --> 00:18:38,799
all the time and now go back to what you

00:18:35,860 --> 00:18:41,159
had an hour before it's very hard with

00:18:38,799 --> 00:18:47,429
containers that is possible again all

00:18:41,159 --> 00:18:53,679
handled by an orchestration system so

00:18:47,429 --> 00:18:57,539
why should you care so the very

00:18:53,679 --> 00:19:00,690
interesting thing about docker or

00:18:57,539 --> 00:19:05,080
containers in general these darker files

00:19:00,690 --> 00:19:08,440
can be written by developers in the past

00:19:05,080 --> 00:19:11,110
if you as a developer wanted to let's

00:19:08,440 --> 00:19:12,909
say deploy your own elasticsearch you

00:19:11,110 --> 00:19:14,769
had to learn about Orcas about

00:19:12,909 --> 00:19:16,899
configuration management systems like

00:19:14,769 --> 00:19:18,519
puppet and ansible and they were complex

00:19:16,899 --> 00:19:21,549
and things like that

00:19:18,519 --> 00:19:23,830
now with docker you can do it and you

00:19:21,549 --> 00:19:27,249
can actually run it on your local

00:19:23,830 --> 00:19:30,129
computer first you can write the docker

00:19:27,249 --> 00:19:33,330
file you can create an image and you can

00:19:30,129 --> 00:19:36,639
run it locally to make sure it works and

00:19:33,330 --> 00:19:38,679
then you push it the image you push up

00:19:36,639 --> 00:19:40,809
to the system and it's going to run

00:19:38,679 --> 00:19:44,259
there and you can be sure it's exactly

00:19:40,809 --> 00:19:46,149
the same with VM technically that's also

00:19:44,259 --> 00:19:48,340
possible you could build your own VM

00:19:46,149 --> 00:19:50,080
locally and you could push it to

00:19:48,340 --> 00:19:51,850
somewhere else the problem is you're

00:19:50,080 --> 00:19:53,919
going to wait ten minutes because it's

00:19:51,850 --> 00:19:57,220
going to do like transfer multiple

00:19:53,919 --> 00:19:58,899
hundreds megabytes and with docker even

00:19:57,220 --> 00:20:00,670
if you do it once and you push it the

00:19:58,899 --> 00:20:04,600
next time it will only push the Train

00:20:00,670 --> 00:20:09,010
so it's very fast and now you wonder why

00:20:04,600 --> 00:20:12,700
do I care about that well the problem is

00:20:09,010 --> 00:20:15,730
in Drupal itself Drupal is much more

00:20:12,700 --> 00:20:19,420
than just an engine X in the PHP and the

00:20:15,730 --> 00:20:23,260
MySQL we have now right now three

00:20:19,420 --> 00:20:25,360
different PHP versions we have varnishes

00:20:23,260 --> 00:20:27,760
we have engine X we use we have sites

00:20:25,360 --> 00:20:30,220
that use no tress we have MongoDB we

00:20:27,760 --> 00:20:32,950
have elastic search we have CouchDB so

00:20:30,220 --> 00:20:35,320
suddenly it's much more so the hosting

00:20:32,950 --> 00:20:37,780
company that tries to run your Drupal

00:20:35,320 --> 00:20:40,510
site doesn't even know anymore what they

00:20:37,780 --> 00:20:42,640
should run because there is so many

00:20:40,510 --> 00:20:44,080
different ways of running a Drupal site

00:20:42,640 --> 00:20:47,800
now and connecting into different

00:20:44,080 --> 00:20:50,170
systems with docker the developer can

00:20:47,800 --> 00:20:52,750
locally configure everything he needs

00:20:50,170 --> 00:20:55,570
for his website it's his own choice if

00:20:52,750 --> 00:20:57,880
he needs PHP 7 PHP 71 if you want to use

00:20:55,570 --> 00:21:00,460
elastic search or MongoDB whatever after

00:20:57,880 --> 00:21:03,280
he has all of that done he pushes all

00:21:00,460 --> 00:21:05,470
the images to your hosting company and

00:21:03,280 --> 00:21:08,770
the hosting companies just gonna run the

00:21:05,470 --> 00:21:11,560
images in there so there is no necessary

00:21:08,770 --> 00:21:13,510
to go to the UI of the hosting company

00:21:11,560 --> 00:21:15,280
and select like oh I want to have an

00:21:13,510 --> 00:21:16,720
elastic search but I've never tested it

00:21:15,280 --> 00:21:18,790
locally because so I don't know if it

00:21:16,720 --> 00:21:21,970
work and these things you can run it

00:21:18,790 --> 00:21:24,820
everything locally and test it and the

00:21:21,970 --> 00:21:27,640
next is containers are used more and

00:21:24,820 --> 00:21:29,980
more and more I was a docker Konya last

00:21:27,640 --> 00:21:34,300
week there are companies thinking about

00:21:29,980 --> 00:21:37,840
running containers in cars so they are

00:21:34,300 --> 00:21:41,980
implementing self-driving cars and the

00:21:37,840 --> 00:21:43,990
the the neural network that will drive

00:21:41,980 --> 00:21:48,370
your car it's running inside a container

00:21:43,990 --> 00:21:50,470
why the same reason they can very easily

00:21:48,370 --> 00:21:53,740
distribute that if you want to

00:21:50,470 --> 00:21:55,780
distribute a new system to cars you have

00:21:53,740 --> 00:21:57,310
hundred millions of cars driving around

00:21:55,780 --> 00:21:59,440
the world and overnight you want to

00:21:57,310 --> 00:22:03,190
update all of them you push them a new

00:21:59,440 --> 00:22:04,420
container image and all the system all

00:22:03,190 --> 00:22:06,130
the problems are going to be fixed that

00:22:04,420 --> 00:22:08,230
you like how to distribute them so a lot

00:22:06,130 --> 00:22:10,990
of people are trying to use containers

00:22:08,230 --> 00:22:13,270
even in maybe the beginning very weird

00:22:10,990 --> 00:22:14,180
ways but if you think about it makes a

00:22:13,270 --> 00:22:16,650
lot of sense

00:22:14,180 --> 00:22:20,190
so let's look at the future darker just

00:22:16,650 --> 00:22:21,630
turned four it's a technology that

00:22:20,190 --> 00:22:24,030
really has been evolved over the last

00:22:21,630 --> 00:22:27,230
four years that's very short

00:22:24,030 --> 00:22:31,890
that's like yesterday in technology arms

00:22:27,230 --> 00:22:35,640
so if you look at the future we have now

00:22:31,890 --> 00:22:38,220
operating systems which say instead of

00:22:35,640 --> 00:22:42,240
actually running a service so your

00:22:38,220 --> 00:22:43,860
network stack or your sis lock instead

00:22:42,240 --> 00:22:46,620
of starting them they're starting a

00:22:43,860 --> 00:22:49,440
container that runs them again so

00:22:46,620 --> 00:22:52,350
everything inside your operating system

00:22:49,440 --> 00:22:54,720
is running within a container it's just

00:22:52,350 --> 00:22:55,980
operating system running doctor running

00:22:54,720 --> 00:23:00,780
and then everything single is a

00:22:55,980 --> 00:23:03,480
container Windows or Microsoft announced

00:23:00,780 --> 00:23:07,500
they already have it running you can now

00:23:03,480 --> 00:23:10,740
run Windows inside containers and not

00:23:07,500 --> 00:23:15,540
only that you can also run now Linux

00:23:10,740 --> 00:23:17,100
containers on Windows machines and I'm

00:23:15,540 --> 00:23:22,290
not sure if people really understand

00:23:17,100 --> 00:23:25,470
that that means if your client runs

00:23:22,290 --> 00:23:28,800
everything on Windows and forces you to

00:23:25,470 --> 00:23:31,110
run on Windows you can still do

00:23:28,800 --> 00:23:34,110
everything on Linux you just send them

00:23:31,110 --> 00:23:37,830
the docker images they sit in there they

00:23:34,110 --> 00:23:39,690
do docker run and it runs they are happy

00:23:37,830 --> 00:23:41,220
because it run all runs on Microsoft

00:23:39,690 --> 00:23:43,680
infrastructure they don't have to change

00:23:41,220 --> 00:23:45,480
anything and you're happy because we can

00:23:43,680 --> 00:23:50,130
use the Linux that we all use all the

00:23:45,480 --> 00:23:52,800
time to host then there is an open

00:23:50,130 --> 00:23:55,770
container initiative which actually

00:23:52,800 --> 00:23:59,580
defines how a container should look like

00:23:55,770 --> 00:24:02,040
how a container should behave because

00:23:59,580 --> 00:24:04,170
there is not only docker there are other

00:24:02,040 --> 00:24:06,810
container systems coming up like rocket

00:24:04,170 --> 00:24:08,550
or other companies are also thinking

00:24:06,810 --> 00:24:11,070
about doing them so it's not only going

00:24:08,550 --> 00:24:13,350
to be about docker itself it's going to

00:24:11,070 --> 00:24:16,410
be about containers where docker is just

00:24:13,350 --> 00:24:18,510
one of the flavors but we want that

00:24:16,410 --> 00:24:21,120
let's say one container that has been

00:24:18,510 --> 00:24:23,040
built on docker also runs on the rocket

00:24:21,120 --> 00:24:24,750
container engine and things like that

00:24:23,040 --> 00:24:27,840
and that's what the open container

00:24:24,750 --> 00:24:30,840
initiative is about so it's like

00:24:27,840 --> 00:24:33,120
in HTML we all have a common standard of

00:24:30,840 --> 00:24:34,650
how HTML looks like so I don't have to

00:24:33,120 --> 00:24:36,179
build my sites for different browsers

00:24:34,650 --> 00:24:38,580
because they are all doing something

00:24:36,179 --> 00:24:41,130
different the same we do also in

00:24:38,580 --> 00:24:43,529
containers we decide together as a

00:24:41,130 --> 00:24:45,179
community how should the container look

00:24:43,529 --> 00:24:48,539
like and how should we do it and that's

00:24:45,179 --> 00:24:52,850
going to boost the detection and the

00:24:48,539 --> 00:24:52,850
possibility with containers much more

00:24:53,330 --> 00:25:00,899
that's it we have three minutes for

00:24:57,150 --> 00:25:03,960
questions now it's a very short

00:25:00,899 --> 00:25:10,770
presentation yes can you come to the

00:25:03,960 --> 00:25:14,010
microphone can you talk about the

00:25:10,770 --> 00:25:17,070
relationship between like containers

00:25:14,010 --> 00:25:19,140
darker and the underlining operating

00:25:17,070 --> 00:25:25,289
system like core OS or something like

00:25:19,140 --> 00:25:27,059
that yeah so technically it's not

00:25:25,289 --> 00:25:28,970
necessary for operating systems to

00:25:27,059 --> 00:25:32,010
actually know what you're running so

00:25:28,970 --> 00:25:33,809
like you can run docker on almost any

00:25:32,010 --> 00:25:35,490
other Linux operating system like if you

00:25:33,809 --> 00:25:37,919
pun - I'm just installing doctor and I'm

00:25:35,490 --> 00:25:40,110
running it the thing though there are

00:25:37,919 --> 00:25:42,720
some things that the docker engine has

00:25:40,110 --> 00:25:45,360
to change on the operating system in

00:25:42,720 --> 00:25:47,610
order to work very well and so what

00:25:45,360 --> 00:25:50,730
obviously happens is that now we have

00:25:47,610 --> 00:25:52,860
operating systems that are implemented

00:25:50,730 --> 00:25:55,770
from the beginning or architecture in

00:25:52,860 --> 00:25:59,010
from the beginning to run on containers

00:25:55,770 --> 00:26:00,899
and one of them is Rancher OS that has

00:25:59,010 --> 00:26:05,100
everything in there there's core OS as

00:26:00,899 --> 00:26:07,470
well that just makes it easier to run

00:26:05,100 --> 00:26:10,950
docker on them because if you never

00:26:07,470 --> 00:26:15,090
think about let's say running directly

00:26:10,950 --> 00:26:18,090
and and a web server on an operating

00:26:15,090 --> 00:26:19,830
system you can remove that part from the

00:26:18,090 --> 00:26:21,240
operating system from the beginning and

00:26:19,830 --> 00:26:24,240
that's what happens to the operating

00:26:21,240 --> 00:26:27,590
system implementer builders they're

00:26:24,240 --> 00:26:27,590
building stuff directly from containers

00:26:28,460 --> 00:26:37,710
hi thank you my name is Mark so I love

00:26:33,779 --> 00:26:40,679
the idea of making everything repeatable

00:26:37,710 --> 00:26:41,430
replacing containers we do some of that

00:26:40,679 --> 00:26:44,810
not

00:26:41,430 --> 00:26:46,950
containers but with using ansible to

00:26:44,810 --> 00:26:49,140
script our configurations and things

00:26:46,950 --> 00:26:51,570
like that I'm curious you talked about

00:26:49,140 --> 00:26:54,060
like just replacing a container how does

00:26:51,570 --> 00:27:00,870
it work like with a database container

00:26:54,060 --> 00:27:03,330
okay so and persistent storage is very

00:27:00,870 --> 00:27:05,880
hard because if you have something that

00:27:03,330 --> 00:27:08,270
dies and starts all the time your

00:27:05,880 --> 00:27:11,400
storage you want to have seed persistent

00:27:08,270 --> 00:27:14,280
so you can run containers you can run

00:27:11,400 --> 00:27:18,300
databases in containers it's not easy

00:27:14,280 --> 00:27:20,790
it's possible basically the key is that

00:27:18,300 --> 00:27:24,000
let's say you have a cluster or you have

00:27:20,790 --> 00:27:26,700
a darker cluster of like 500 nodes that

00:27:24,000 --> 00:27:29,250
technically your MySQL container could

00:27:26,700 --> 00:27:30,900
start at one of them so what you have

00:27:29,250 --> 00:27:33,180
you have an underlining storage system

00:27:30,900 --> 00:27:35,730
that allows you to connect it to any of

00:27:33,180 --> 00:27:38,160
them so if you talk for example in AWS

00:27:35,730 --> 00:27:40,950
the storage of your container is

00:27:38,160 --> 00:27:44,550
actually attached to like an EBS volume

00:27:40,950 --> 00:27:46,710
or an ESS volume and then wherever the

00:27:44,550 --> 00:27:50,730
container then starts again it attaches

00:27:46,710 --> 00:27:52,650
it again to that storage so don't that's

00:27:50,730 --> 00:27:54,630
all handled by the orchestration system

00:27:52,650 --> 00:27:56,730
so a container in organization system

00:27:54,630 --> 00:27:59,340
can say I need persistent storage and

00:27:56,730 --> 00:28:00,870
when I start again on another note I

00:27:59,340 --> 00:28:03,320
want to have the same again so then it's

00:28:00,870 --> 00:28:05,670
connected to all the things together

00:28:03,320 --> 00:28:08,490
good question though it's not easy to

00:28:05,670 --> 00:28:10,050
run okay we have to already move if you

00:28:08,490 --> 00:28:12,100
have more questions I'm around the whole

00:28:10,050 --> 00:28:20,510
week and happy to answer

00:28:12,100 --> 00:28:20,510
[Applause]

00:28:21,419 --> 00:28:25,740

YouTube URL: https://www.youtube.com/watch?v=nqueaFx2AnE


