Title: DrupalCon Baltimore 2017: Development Workflow Tools for Open-Source PHP Libraries
Publication date: 2017-04-25
Playlist: DrupalCon Baltimore 2017
Description: 
	"Hey, I just had a great idea for a new module!  It's new and different and it's going to be GREAT!  So, let's see here, what do I need to do? Well, I've still got some Drupal 7 sites, so I'll need two versions of the module. Maybe I should put some of the code in a library, so I don't have to put the same exact code in the Drupal 8 version of the module. I guess that means I'll need to register my project with Packagist. I'd better make sure that the code has some tests; it sure would be good to know how much code coverage I'm getting, and whether the library is standards-compliant, and it would be nice to get some feedback if my classes and methods start to get too complicated. Since I'm making a library, it would be really rightous to provide some good documentation. It would be handy if I could throw in a phar, so that users could fiddle with the code from the command line. The cool kid's GitHub projects have these neat looking badges at the top of their README files; if my project looked cool like that, maybe more people would submit pull requests. Maybe I should tell people how to contribute and report issues. I guess I'd better sit down for a few days and build a fancy website for my library that pulls all of this together. This modularity thing is starting to sound hard; maybe I should just skip it."

Having a fine-tuned continuous integration environment is extremely valuable, even for small projects. Today, there is a wide variety of standalone projects and online Software-As-A-Service offerings that can super-streamline your everyday development tasks that can help you get your projects up and running like a pro. In this session, we'll look at how you can get the most out of:

GitHub source code repository
Packagist package manager for Composer
Travis CI continuous integration service
Coveralls code coverage service
Scrutinizer static analysis service
Box2 phar builder
Sami api documentation generator
ReadTheDocs online documentation reader service
Composer scripts and projects for running local tests and builds
After mastering these tools, you will be able to quickly set up a new php library project and use it in your Drupal modules.
Captions: 
	00:00:05,150 --> 00:00:11,700
all right good morning again welcome to

00:00:08,280 --> 00:00:14,759
your technical content for Drupal con on

00:00:11,700 --> 00:00:17,070
Tuesday very happy to be kicking off

00:00:14,759 --> 00:00:21,529
your Tuesday for you today we're going

00:00:17,070 --> 00:00:26,400
to be talking about workflows for PHP

00:00:21,529 --> 00:00:28,890
libraries I'm Greg Anderson I'm an

00:00:26,400 --> 00:00:32,640
infrastructure engineer at Kathy on and

00:00:28,890 --> 00:00:35,640
an open source contributor I contributed

00:00:32,640 --> 00:00:39,030
to things like drush and the robot PHP

00:00:35,640 --> 00:00:41,760
task runner Composer utilities and

00:00:39,030 --> 00:00:44,160
things of that nature today we're

00:00:41,760 --> 00:00:47,520
talking about the process of using

00:00:44,160 --> 00:00:50,520
generic PHP libraries in the context of

00:00:47,520 --> 00:00:52,530
Drupal you might have a Drupal 8 site

00:00:50,520 --> 00:00:54,660
you might have another site that's still

00:00:52,530 --> 00:00:57,210
running under plus 7 and if you have

00:00:54,660 --> 00:01:00,199
some technology especially if you want

00:00:57,210 --> 00:01:03,270
to interface with some outside system

00:01:00,199 --> 00:01:05,460
it's natural for you to want to be able

00:01:03,270 --> 00:01:07,320
to factor out your common code into an

00:01:05,460 --> 00:01:09,689
independent library that you can reuse

00:01:07,320 --> 00:01:12,240
in both places and then just make a

00:01:09,689 --> 00:01:13,890
drupal 8 version of the library and a

00:01:12,240 --> 00:01:18,210
drupal 7 version of the library and

00:01:13,890 --> 00:01:20,430
you're good to go from that optionally

00:01:18,210 --> 00:01:24,000
you might want to stick a command line

00:01:20,430 --> 00:01:26,659
tool in just for testing and automation

00:01:24,000 --> 00:01:29,280
and that's another thing that is more

00:01:26,659 --> 00:01:34,500
easily accomplished if you have a

00:01:29,280 --> 00:01:36,869
separate library this is an example of

00:01:34,500 --> 00:01:40,280
what a composer jason looks like i'm

00:01:36,869 --> 00:01:40,280
sure many of you have seen this before

00:01:40,430 --> 00:01:46,200
if you add a minimal composer jason to

00:01:43,110 --> 00:01:51,479
your library and that put in a required

00:01:46,200 --> 00:01:53,909
statement then this tells composer that

00:01:51,479 --> 00:01:57,930
it should load in this library whenever

00:01:53,909 --> 00:02:01,280
it's using your module the way the

00:01:57,930 --> 00:02:05,520
Drupal community has sort of evolved for

00:02:01,280 --> 00:02:08,429
using composer with modules is once you

00:02:05,520 --> 00:02:10,619
have one module that uses composer for

00:02:08,429 --> 00:02:12,030
dependencies then you should manage your

00:02:10,619 --> 00:02:14,850
entire site with

00:02:12,030 --> 00:02:16,830
composure you should use something like

00:02:14,850 --> 00:02:19,470
the Drupal composure Drupal project

00:02:16,830 --> 00:02:22,410
templates that has both Drupal 7 and

00:02:19,470 --> 00:02:26,490
Drupal 8 templates follow the pattern

00:02:22,410 --> 00:02:28,650
there and then composer will pull in all

00:02:26,490 --> 00:02:31,850
of your modules and it will also pull in

00:02:28,650 --> 00:02:34,560
all the dependencies of your module

00:02:31,850 --> 00:02:37,140
other solutions like composer manager

00:02:34,560 --> 00:02:39,270
are really deprecated at this point and

00:02:37,140 --> 00:02:42,989
you should stick with a straight

00:02:39,270 --> 00:02:44,430
composer implementation so what is our

00:02:42,989 --> 00:02:46,709
workflow that we're trying to set up

00:02:44,430 --> 00:02:50,130
here we're talking about the process

00:02:46,709 --> 00:02:53,400
where you build a PHP library you test

00:02:50,130 --> 00:02:55,350
it with PHP unit and then you drop it

00:02:53,400 --> 00:02:57,630
into a Drupal context and maybe do some

00:02:55,350 --> 00:03:01,050
more functional tests with B hat and you

00:02:57,630 --> 00:03:03,480
repeat until your module is done in this

00:03:01,050 --> 00:03:06,780
session we're really going to focus on

00:03:03,480 --> 00:03:09,420
that first step of building the library

00:03:06,780 --> 00:03:10,280
and testing it and making sure that it's

00:03:09,420 --> 00:03:13,050
perfect

00:03:10,280 --> 00:03:16,010
however PHP unit isn't the only thing we

00:03:13,050 --> 00:03:21,140
need we also need collaboration reduce

00:03:16,010 --> 00:03:23,640
disability analysis and documentation

00:03:21,140 --> 00:03:25,230
there's a whole ecosystem of things that

00:03:23,640 --> 00:03:26,549
you need to be concerned about you're

00:03:25,230 --> 00:03:28,590
going to collaborate with other people

00:03:26,549 --> 00:03:33,360
on software whether it's within your

00:03:28,590 --> 00:03:35,730
team or a community some of you may be

00:03:33,360 --> 00:03:37,170
familiar with George Jetson George

00:03:35,730 --> 00:03:39,030
Jetson had a really demanding boss

00:03:37,170 --> 00:03:40,650
sometimes George would come home and I

00:03:39,030 --> 00:03:43,320
didn't say oh my god

00:03:40,650 --> 00:03:46,579
my boss is a slave driver he made me

00:03:43,320 --> 00:03:49,019
push the button three times today so

00:03:46,579 --> 00:03:50,670
that's the workflow we're going for we

00:03:49,019 --> 00:03:52,709
want to go for the George Jetson

00:03:50,670 --> 00:03:55,049
workflow when it's time for you to roll

00:03:52,709 --> 00:03:58,019
out your module you just push the button

00:03:55,049 --> 00:04:01,739
and the right thing happens work hard

00:03:58,019 --> 00:04:04,380
once don't do that stuff over and over

00:04:01,739 --> 00:04:05,940
again then you can complain your

00:04:04,380 --> 00:04:08,940
significant other when you come home oh

00:04:05,940 --> 00:04:11,269
my gosh I have to run see I three times

00:04:08,940 --> 00:04:11,269
today

00:04:11,360 --> 00:04:16,920
but all things take effort you know if

00:04:14,400 --> 00:04:19,620
you're going to win the benefits of

00:04:16,920 --> 00:04:22,130
having a George Jetson workflow then you

00:04:19,620 --> 00:04:25,020
have to spend some time to set it up

00:04:22,130 --> 00:04:27,900
there's a fairly well-known xkcd cartoon

00:04:25,020 --> 00:04:30,630
where the author says hey how often do

00:04:27,900 --> 00:04:33,270
you do this thing and how long does that

00:04:30,630 --> 00:04:34,890
thing take you and from that he builds a

00:04:33,270 --> 00:04:38,220
little matrix this is okay you're

00:04:34,890 --> 00:04:40,110
allowed to spend this much time no more

00:04:38,220 --> 00:04:42,330
on making your tool better otherwise

00:04:40,110 --> 00:04:44,190
it's a waste of time and this is a funny

00:04:42,330 --> 00:04:47,940
cartoon because you know it's engineers

00:04:44,190 --> 00:04:49,530
sometimes we get so focused on improving

00:04:47,940 --> 00:04:51,300
our tools that we never get on to the

00:04:49,530 --> 00:04:54,030
real product and that's of course isn't

00:04:51,300 --> 00:04:55,860
good but what's this cartoon missus is

00:04:54,030 --> 00:04:58,560
that not all time

00:04:55,860 --> 00:05:02,070
is equivalent if you get a phone call

00:04:58,560 --> 00:05:04,380
from a customer they say my god but

00:05:02,070 --> 00:05:07,710
fights down and you trace the bug down

00:05:04,380 --> 00:05:10,410
to a bug in your library if you're

00:05:07,710 --> 00:05:12,740
depending on manual processes and it

00:05:10,410 --> 00:05:15,630
takes you longer to respond to that

00:05:12,740 --> 00:05:18,030
incident then that's a lot worse than if

00:05:15,630 --> 00:05:19,440
you spent an entire day making it

00:05:18,030 --> 00:05:22,020
possible for you to respond to incidents

00:05:19,440 --> 00:05:23,790
quickly so consider all of these other

00:05:22,020 --> 00:05:25,350
factors when you're deciding how much

00:05:23,790 --> 00:05:28,200
time to spend on this onboarding new

00:05:25,350 --> 00:05:31,410
engineers and just reproducibility and

00:05:28,200 --> 00:05:35,310
the increase of content makes automation

00:05:31,410 --> 00:05:36,540
really worth it fortunately there's a

00:05:35,310 --> 00:05:39,840
whole bunch of services that come to the

00:05:36,540 --> 00:05:42,270
rescue and make it a lot easier for you

00:05:39,840 --> 00:05:45,060
to get this automation done we have past

00:05:42,270 --> 00:05:47,790
runners like Travis that will do tests

00:05:45,060 --> 00:05:52,050
for you scrutinize or is a really cool

00:05:47,790 --> 00:05:54,180
tool that will do a code complexity

00:05:52,050 --> 00:05:57,360
analysis of course if you're going to

00:05:54,180 --> 00:05:59,870
use composer you need a package manager

00:05:57,360 --> 00:06:02,700
and packages is the standard one

00:05:59,870 --> 00:06:05,940
coveralls will give you reports of how

00:06:02,700 --> 00:06:08,520
much numbers you've got on your various

00:06:05,940 --> 00:06:10,169
PHP unit tests version is a neat little

00:06:08,520 --> 00:06:12,330
tool that will tell you about your

00:06:10,169 --> 00:06:14,100
open-source license usage and all of

00:06:12,330 --> 00:06:16,590
your components and of course there's

00:06:14,100 --> 00:06:18,810
also a number of tools that will help

00:06:16,590 --> 00:06:21,589
you publish documentation online easily

00:06:18,810 --> 00:06:22,579
and these are the different things

00:06:21,589 --> 00:06:28,549
and we're going to be talking about

00:06:22,579 --> 00:06:32,809
today so in this example I'm going to be

00:06:28,549 --> 00:06:35,209
using a few projects as templates one is

00:06:32,809 --> 00:06:38,179
L cash L cash this is a caching module

00:06:35,209 --> 00:06:39,199
that was developed at Pantheon but its

00:06:38,179 --> 00:06:42,579
general purpose

00:06:39,199 --> 00:06:44,539
it's not even specific to not just

00:06:42,579 --> 00:06:46,549
Pantheon independence but it's not

00:06:44,539 --> 00:06:49,489
Drupal specific an independent library

00:06:46,549 --> 00:06:52,339
works on WordPress as well at some

00:06:49,489 --> 00:06:56,389
holiday ssin is a collection of projects

00:06:52,339 --> 00:07:00,109
that have utilities for symphony console

00:06:56,389 --> 00:07:03,169
applications and finally I just threw in

00:07:00,109 --> 00:07:05,299
an example website it's a old triple7

00:07:03,169 --> 00:07:08,869
site it has some automation not running

00:07:05,299 --> 00:07:11,869
on campeón so if you have something that

00:07:08,869 --> 00:07:14,689
you want to set up then you should be

00:07:11,869 --> 00:07:17,619
like Wally and you life code were used

00:07:14,689 --> 00:07:17,619
and see what else is out there

00:07:17,949 --> 00:07:24,049
everybody's using github which allows

00:07:21,859 --> 00:07:26,749
you to collaborate through the browser

00:07:24,049 --> 00:07:28,699
without having to set up get as lots and

00:07:26,749 --> 00:07:32,719
lots of it integration this is going to

00:07:28,699 --> 00:07:34,249
be the cornerstone technology that

00:07:32,719 --> 00:07:39,319
enables the things that we're going to

00:07:34,249 --> 00:07:41,839
be talking about but I also want to go

00:07:39,319 --> 00:07:44,839
over how to get the most out of github

00:07:41,839 --> 00:07:46,489
let's github is going to be your front

00:07:44,839 --> 00:07:47,869
page for your project you know if you

00:07:46,489 --> 00:07:50,569
care about other people collaborating

00:07:47,869 --> 00:07:52,609
with it and there's two neat features of

00:07:50,569 --> 00:07:54,969
github that in some cases are

00:07:52,609 --> 00:07:54,969
underutilized

00:07:56,710 --> 00:08:02,030
github is a good way to go because if

00:07:59,240 --> 00:08:05,449
you click on the pencil then it brings

00:08:02,030 --> 00:08:08,720
up an editor and people can submit flow

00:08:05,449 --> 00:08:10,280
requests right in the web browser which

00:08:08,720 --> 00:08:13,100
means you don't have to learn all of

00:08:10,280 --> 00:08:14,870
this command line get stuff and in some

00:08:13,100 --> 00:08:19,040
cases that sort of collaboration is

00:08:14,870 --> 00:08:22,460
really useful and helpful I'm just going

00:08:19,040 --> 00:08:26,270
to get this part if you have a good read

00:08:22,460 --> 00:08:27,800
me badges up at the top we'll link you

00:08:26,270 --> 00:08:30,260
to your other integrations it tells

00:08:27,800 --> 00:08:32,860
people what integrations you have set up

00:08:30,260 --> 00:08:35,089
and it will give a good indication of

00:08:32,860 --> 00:08:37,789
you know whether this project is still

00:08:35,089 --> 00:08:41,479
being maintained and how the code is is

00:08:37,789 --> 00:08:44,660
looking if you add a contributing

00:08:41,479 --> 00:08:46,220
document just commit a file called

00:08:44,660 --> 00:08:49,070
contributing got MD at the root of your

00:08:46,220 --> 00:08:51,800
github repository and there'll be a link

00:08:49,070 --> 00:08:53,600
to this page anytime someone submits a

00:08:51,800 --> 00:08:56,630
new pull request or an issue queue this

00:08:53,600 --> 00:08:59,779
is a great place to tell people what

00:08:56,630 --> 00:09:02,690
sort of standards you are using in your

00:08:59,779 --> 00:09:05,900
project a Drupal core as a whole isn't

00:09:02,690 --> 00:09:07,520
using tsr-2 yet but if you're outside of

00:09:05,900 --> 00:09:10,400
Drupal the rest of the world pretty much

00:09:07,520 --> 00:09:13,330
is so when I'm making independent

00:09:10,400 --> 00:09:16,310
libraries I like to enforce PS r2 and

00:09:13,330 --> 00:09:19,209
advertise the fact that I do in like

00:09:16,310 --> 00:09:19,209
contributing document

00:09:22,990 --> 00:09:29,870
similarly github issue template will

00:09:27,400 --> 00:09:31,310
fill in the instead of getting a blank

00:09:29,870 --> 00:09:33,260
slate when you're starting a full

00:09:31,310 --> 00:09:35,780
request for an issue you'll give the

00:09:33,260 --> 00:09:41,090
user something to fill in which improves

00:09:35,780 --> 00:09:42,950
the quality of your feedback next I'm

00:09:41,090 --> 00:09:44,570
going to be talking about packages if

00:09:42,950 --> 00:09:45,590
you're making an independent library

00:09:44,570 --> 00:09:46,960
you're going to have to make it possible

00:09:45,590 --> 00:09:50,570
for composer

00:09:46,960 --> 00:09:53,690
to recognize it and that package just is

00:09:50,570 --> 00:09:56,690
a very convenient web-based system for

00:09:53,690 --> 00:09:59,780
describing where to get your project but

00:09:56,690 --> 00:10:01,760
the integration is a little bit tricky

00:09:59,780 --> 00:10:02,810
to set up the first time you do it the

00:10:01,760 --> 00:10:03,950
good news is this is the hardest

00:10:02,810 --> 00:10:06,010
integration we're going to talk about

00:10:03,950 --> 00:10:10,910
today I'm going to go over a little bit

00:10:06,010 --> 00:10:13,730
how you describe it a project such that

00:10:10,910 --> 00:10:16,100
packages can understand it for you up at

00:10:13,730 --> 00:10:18,230
the top you have to give your project a

00:10:16,100 --> 00:10:19,730
name this is actually optional and

00:10:18,230 --> 00:10:22,010
composer Jason if you're not publishing

00:10:19,730 --> 00:10:25,130
your project with strongly recommended

00:10:22,010 --> 00:10:28,010
and the other little trick that's really

00:10:25,130 --> 00:10:29,990
useful too many projects fail to do is

00:10:28,010 --> 00:10:32,800
in the extra section if you create

00:10:29,990 --> 00:10:36,350
something called a branch alias

00:10:32,800 --> 00:10:38,770
then you can say in this case we're

00:10:36,350 --> 00:10:41,660
saying that the dev master branch is

00:10:38,770 --> 00:10:46,220
equivalent to the one point X does

00:10:41,660 --> 00:10:48,380
branch another reason this is important

00:10:46,220 --> 00:10:50,680
is if you have one component that's

00:10:48,380 --> 00:10:53,720
asking for the development version of

00:10:50,680 --> 00:10:56,090
your library and another component that

00:10:53,720 --> 00:10:58,520
says I work with one point X if you

00:10:56,090 --> 00:11:01,430
don't have a branch alias then composer

00:10:58,520 --> 00:11:03,110
won't know that your dev master is

00:11:01,430 --> 00:11:05,210
compatible with one X and then you won't

00:11:03,110 --> 00:11:08,710
be able to use those two modules

00:11:05,210 --> 00:11:11,810
together so putting your branch alias

00:11:08,710 --> 00:11:16,190
faithfully and it'll be easier for

00:11:11,810 --> 00:11:18,540
people to pull in dev versions like the

00:11:16,190 --> 00:11:20,860
full effect

00:11:18,540 --> 00:11:24,430
so starting often packages is really

00:11:20,860 --> 00:11:27,790
easy you just give the address of your

00:11:24,430 --> 00:11:29,620
repository and hit check but in addition

00:11:27,790 --> 00:11:31,839
to just putting it in packages you're

00:11:29,620 --> 00:11:34,810
going to want packages to automatically

00:11:31,839 --> 00:11:39,190
pull in the new versions of your library

00:11:34,810 --> 00:11:41,320
every time you release a new one so in

00:11:39,190 --> 00:11:45,070
order to do that you have to do a little

00:11:41,320 --> 00:11:47,529
bit of extra integration package this is

00:11:45,070 --> 00:11:49,930
going to warn you up at the top that

00:11:47,529 --> 00:11:51,760
says that auto updating is not happening

00:11:49,930 --> 00:11:53,829
if auto updating isn't happening that

00:11:51,760 --> 00:11:55,180
every time you release something you

00:11:53,829 --> 00:11:58,089
have to go and click that green Update

00:11:55,180 --> 00:12:01,810
button to bring the new versions in but

00:11:58,089 --> 00:12:05,290
we're going to automate that so you go

00:12:01,810 --> 00:12:06,850
over to your profile section and up at

00:12:05,290 --> 00:12:08,890
the top if you click on your API token

00:12:06,850 --> 00:12:11,290
it's going to show you this o auth token

00:12:08,890 --> 00:12:14,589
which is just a long set of characters

00:12:11,290 --> 00:12:17,200
copy that in your clipboard and then

00:12:14,589 --> 00:12:20,260
bass and github in the integration and

00:12:17,200 --> 00:12:22,149
services section you add a service you

00:12:20,260 --> 00:12:26,100
find packages either just like scrolling

00:12:22,149 --> 00:12:29,350
or typing packages and click on it

00:12:26,100 --> 00:12:31,720
you then put your packages user name in

00:12:29,350 --> 00:12:34,740
the user section the token you got off

00:12:31,720 --> 00:12:38,140
of your profile page and the second

00:12:34,740 --> 00:12:42,670
fields and down at the bottom it must

00:12:38,140 --> 00:12:46,540
say HTTP packages org then you add the

00:12:42,670 --> 00:12:50,050
service and come back to the web hooks

00:12:46,540 --> 00:12:51,790
section open your service and up at the

00:12:50,050 --> 00:12:56,050
top there's a little test service button

00:12:51,790 --> 00:12:58,060
if you click on that and then go back to

00:12:56,050 --> 00:13:00,910
packages you'll see that the warning

00:12:58,060 --> 00:13:03,070
about the auto update has disappeared if

00:13:00,910 --> 00:13:04,870
the warning is still there what's is the

00:13:03,070 --> 00:13:08,459
steps again double check your username

00:13:04,870 --> 00:13:11,320
and make sure you set HTTP packages org

00:13:08,459 --> 00:13:14,040
you should be able to get it up and run

00:13:11,320 --> 00:13:14,040
in with those steps

00:13:21,300 --> 00:13:25,890
some projects have plugins here's an

00:13:23,670 --> 00:13:29,970
example of dress dress has plugins and

00:13:25,890 --> 00:13:32,100
if you write a dress plugin and you give

00:13:29,970 --> 00:13:33,900
it a type of Drupal dress then that

00:13:32,100 --> 00:13:35,940
advertises that this is something that

00:13:33,900 --> 00:13:37,590
you can use with rush if you wanted to

00:13:35,940 --> 00:13:40,590
have something on you read me that says

00:13:37,590 --> 00:13:43,170
hey here's a list of everything in

00:13:40,590 --> 00:13:45,180
package us with this type you can

00:13:43,170 --> 00:13:48,770
compose a link and drop that in your

00:13:45,180 --> 00:13:48,770
readme really useful for your users

00:13:50,150 --> 00:13:55,980
earlier I showed an example of badges at

00:13:53,790 --> 00:13:58,950
the top of you read me which are nice

00:13:55,980 --> 00:14:02,070
way signs for your users there's a site

00:13:58,950 --> 00:14:04,830
called closer tug xorg that will give

00:14:02,070 --> 00:14:07,650
you additional badges that you can drop

00:14:04,830 --> 00:14:09,740
in to your package of site it'll tell

00:14:07,650 --> 00:14:12,270
you things like how many times your

00:14:09,740 --> 00:14:13,530
projects has been downloaded but the one

00:14:12,270 --> 00:14:15,900
on this page that I think it's really

00:14:13,530 --> 00:14:18,690
useful is to license I'll talk about

00:14:15,900 --> 00:14:20,970
license a little bit more later I don't

00:14:18,690 --> 00:14:22,290
think that the download vanity badges

00:14:20,970 --> 00:14:24,750
are really that useful to include on a

00:14:22,290 --> 00:14:26,640
project page they mostly let people know

00:14:24,750 --> 00:14:28,620
how much your project is being used in

00:14:26,640 --> 00:14:31,170
continuous integration and that number

00:14:28,620 --> 00:14:32,310
isn't really meaningful for much but you

00:14:31,170 --> 00:14:38,280
know a lot of people like the vanity

00:14:32,310 --> 00:14:40,770
badges a Travis is just one of the many

00:14:38,280 --> 00:14:43,770
ways that you can run tests the reason I

00:14:40,770 --> 00:14:47,700
really like Travis is it makes it a lot

00:14:43,770 --> 00:14:50,130
easier to test different versions of PHP

00:14:47,700 --> 00:14:52,800
this is also possible in other systems

00:14:50,130 --> 00:14:56,060
but as we will see in a moment it's much

00:14:52,800 --> 00:14:56,060
easier to setup with Travis

00:14:58,160 --> 00:15:04,139
if you set up a file called PHP unit

00:15:01,199 --> 00:15:07,559
that XML disk then PHP is going to load

00:15:04,139 --> 00:15:10,919
your settings from this file you can get

00:15:07,559 --> 00:15:13,559
ignore the PHP XML files you want your

00:15:10,919 --> 00:15:17,160
users could copy the PHP unit XML disk

00:15:13,559 --> 00:15:19,439
into PHP no XML if they need to

00:15:17,160 --> 00:15:22,979
customize it but for a minimal

00:15:19,439 --> 00:15:27,079
customization of running PHP unit on

00:15:22,979 --> 00:15:30,959
Travis all you need to do is specify

00:15:27,079 --> 00:15:32,850
your auto load file and where you want

00:15:30,959 --> 00:15:35,009
to keep your test and what filename

00:15:32,850 --> 00:15:40,109
pattern you want to find them under and

00:15:35,009 --> 00:15:44,759
then PHP unit will run all of those

00:15:40,109 --> 00:15:48,329
files I also like to use a project

00:15:44,759 --> 00:15:51,029
called exclusive labs PHP code sniffer

00:15:48,329 --> 00:15:53,609
this helps check for conformance like pH

00:15:51,029 --> 00:15:57,539
P sr2 and if you just composed or

00:15:53,609 --> 00:16:00,179
require that then it'll show up in your

00:15:57,539 --> 00:16:02,699
composer Jason and you can make it part

00:16:00,179 --> 00:16:07,889
of your test so here's the thing I was

00:16:02,699 --> 00:16:10,709
alluding to earlier if you want to do

00:16:07,889 --> 00:16:13,289
multiple PHP version testing on some

00:16:10,709 --> 00:16:16,739
other VI system like circle then you

00:16:13,289 --> 00:16:17,850
have to propose prepared docker images

00:16:16,739 --> 00:16:20,339
and things like that it's kind of

00:16:17,850 --> 00:16:23,339
inconvenient but in Travis it's a very

00:16:20,339 --> 00:16:24,989
simple matter of just listing all of the

00:16:23,339 --> 00:16:28,229
different versions of PHP you want to

00:16:24,989 --> 00:16:30,659
test and Travis will automatically cycle

00:16:28,229 --> 00:16:33,239
through those run the tests again after

00:16:30,659 --> 00:16:36,449
installing the version of PHP in the

00:16:33,239 --> 00:16:39,449
image makes it a lot easier to get good

00:16:36,449 --> 00:16:41,549
coverage across different versions and

00:16:39,449 --> 00:16:44,429
then down at the bottom in the script

00:16:41,549 --> 00:16:46,979
section after running PHP unit we also

00:16:44,429 --> 00:16:50,249
run PHP CS which is part of the squeeze

00:16:46,979 --> 00:16:53,519
Lib thing that I showed you earlier if

00:16:50,249 --> 00:16:55,529
someone submits a contribution and it

00:16:53,519 --> 00:16:58,109
doesn't follow PSR - then the tests will

00:16:55,529 --> 00:17:00,600
fail and you know that right away and so

00:16:58,109 --> 00:17:01,919
that helps not just you as a maintainer

00:17:00,600 --> 00:17:03,269
but it's also good service for your

00:17:01,919 --> 00:17:05,429
contributors they don't have to wait for

00:17:03,269 --> 00:17:08,750
the maintainer to come back with just

00:17:05,429 --> 00:17:16,399
some nitpicky style feedback

00:17:08,750 --> 00:17:19,250
happens right away finally travis has

00:17:16,399 --> 00:17:20,539
this interesting feature where it runs

00:17:19,250 --> 00:17:22,939
the test as soon as the branch is

00:17:20,539 --> 00:17:25,610
created and Alonzo runs the test as soon

00:17:22,939 --> 00:17:28,580
as your full request is created and that

00:17:25,610 --> 00:17:31,269
means the same code gets tested twice

00:17:28,580 --> 00:17:33,440
because every full request has a branch

00:17:31,269 --> 00:17:36,230
so in the branches section if you're

00:17:33,440 --> 00:17:37,610
Travis CMO if you add this funny regular

00:17:36,230 --> 00:17:41,259
expression down at the bottom of they

00:17:37,610 --> 00:17:45,309
only wants to test the master branch and

00:17:41,259 --> 00:17:49,100
branches that look like version numbers

00:17:45,309 --> 00:17:52,159
because in Travis tags and branches

00:17:49,100 --> 00:17:55,549
alike are applied on this branches

00:17:52,159 --> 00:17:58,299
section then your pull request will only

00:17:55,549 --> 00:18:01,429
be tested once and this will conserve

00:17:58,299 --> 00:18:05,000
valuable Travis resources strongly

00:18:01,429 --> 00:18:06,830
recommended one thing to make your life

00:18:05,000 --> 00:18:09,110
really happy is if you add a cache

00:18:06,830 --> 00:18:11,330
directory Travis is going to keep this

00:18:09,110 --> 00:18:13,610
around and in particular the composer

00:18:11,330 --> 00:18:20,480
cache directory will greatly speed up

00:18:13,610 --> 00:18:23,600
your bills if you add that I recommend

00:18:20,480 --> 00:18:26,000
committing your composer lock file if

00:18:23,600 --> 00:18:29,059
you're doing Travis testing and the

00:18:26,000 --> 00:18:31,879
reason for this is it really helps with

00:18:29,059 --> 00:18:34,549
what's called min max testing so you can

00:18:31,879 --> 00:18:37,759
see in the matrix I have here there is a

00:18:34,549 --> 00:18:40,639
list of different PHP versions and in

00:18:37,759 --> 00:18:42,889
some of these we also define an

00:18:40,639 --> 00:18:46,039
environment variable depth and we either

00:18:42,889 --> 00:18:48,409
set it to highest or lowest or empty and

00:18:46,039 --> 00:18:51,320
then when we're setting up a project to

00:18:48,409 --> 00:18:53,750
test we're going to run composer install

00:18:51,320 --> 00:18:55,669
and by default if you don't have a depth

00:18:53,750 --> 00:18:57,529
variable set it's just going to run

00:18:55,669 --> 00:18:59,629
composer install the prefer disc which

00:18:57,529 --> 00:19:02,210
will quickly load whatever it's in your

00:18:59,629 --> 00:19:03,950
composer lock file but if you have an

00:19:02,210 --> 00:19:06,590
independent library it's also

00:19:03,950 --> 00:19:09,159
interesting to know whether the code

00:19:06,590 --> 00:19:10,929
still works against your lowest

00:19:09,159 --> 00:19:13,570
described

00:19:10,929 --> 00:19:16,580
dependencies and also your highest

00:19:13,570 --> 00:19:18,919
described dependencies the lowest test

00:19:16,580 --> 00:19:21,620
is really important to make sure that no

00:19:18,919 --> 00:19:24,200
one has allowed any code that doesn't

00:19:21,620 --> 00:19:27,530
work with the lower software to creep in

00:19:24,200 --> 00:19:31,300
and the highest is really important to

00:19:27,530 --> 00:19:34,010
find out if any new releases from

00:19:31,300 --> 00:19:37,790
programs that your library uses have

00:19:34,010 --> 00:19:40,130
come out to break your code so to do

00:19:37,790 --> 00:19:43,870
Louis we just run a composer update with

00:19:40,130 --> 00:19:46,610
a - desk for fer Louis to do highest of

00:19:43,870 --> 00:19:48,410
we just run a composer update instead of

00:19:46,610 --> 00:19:50,450
composer installed in both of those

00:19:48,410 --> 00:19:52,910
cases that ignores the composer lock and

00:19:50,450 --> 00:19:57,230
brings in fresh dependencies you have

00:19:52,910 --> 00:19:59,179
coverage many of you probably heard the

00:19:57,230 --> 00:20:02,150
rule of thumb that if you're making an

00:19:59,179 --> 00:20:04,190
application you commit composer lock if

00:20:02,150 --> 00:20:06,440
you're making a library you don't commit

00:20:04,190 --> 00:20:08,630
composer lock why is that a rule the

00:20:06,440 --> 00:20:10,850
reason that the rule is that if you

00:20:08,630 --> 00:20:13,790
don't commit composer lock then you get

00:20:10,850 --> 00:20:16,730
highest testing every time and if you're

00:20:13,790 --> 00:20:19,970
doing a library and you're only doing

00:20:16,730 --> 00:20:23,809
one test then I agree highest is the

00:20:19,970 --> 00:20:25,970
best to do but if you if you do the

00:20:23,809 --> 00:20:28,250
whole highest lowest you'll get even

00:20:25,970 --> 00:20:29,720
better testing and in that case you

00:20:28,250 --> 00:20:32,059
might as well commit your composer lock

00:20:29,720 --> 00:20:37,660
so that those middle tests that are just

00:20:32,059 --> 00:20:40,070
running off of your preferred versions

00:20:37,660 --> 00:20:42,679
run really fast and the other advantage

00:20:40,070 --> 00:20:44,420
of this is if you have some failure that

00:20:42,679 --> 00:20:47,150
falls into one of these categories it's

00:20:44,420 --> 00:20:50,179
really obvious just by looking at which

00:20:47,150 --> 00:20:51,950
test failed of what the cause of it is

00:20:50,179 --> 00:20:53,600
it was just highest testing then

00:20:51,950 --> 00:20:55,190
suddenly all of your tests to fail and

00:20:53,600 --> 00:20:59,330
you have to scratch your head and wonder

00:20:55,190 --> 00:21:01,820
exactly why that happened it's usually

00:20:59,330 --> 00:21:03,350
because of highest anyway but with this

00:21:01,820 --> 00:21:04,790
a lot more clear of just one of the

00:21:03,350 --> 00:21:06,710
tests of failing and all the others work

00:21:04,790 --> 00:21:08,840
then any of the confidence to know this

00:21:06,710 --> 00:21:12,220
is a dependency change and I didn't just

00:21:08,840 --> 00:21:12,220
accidentally commit something bad

00:21:16,210 --> 00:21:21,460
and look how to get the focus of this

00:21:19,100 --> 00:21:24,110
screen is on the lower right a

00:21:21,460 --> 00:21:25,730
consolidation annotated command it's not

00:21:24,110 --> 00:21:30,230
a very big library it's pretty darn

00:21:25,730 --> 00:21:31,580
small but it's not teeny and if you're

00:21:30,230 --> 00:21:33,170
not using the techniques that I just

00:21:31,580 --> 00:21:35,120
described a frittered this just

00:21:33,170 --> 00:21:38,030
described you're not going to get down

00:21:35,120 --> 00:21:40,160
to this sub one minute test time that

00:21:38,030 --> 00:21:42,320
we're seeing here so it really makes a

00:21:40,160 --> 00:21:45,380
big difference to be your your cashing

00:21:42,320 --> 00:21:49,700
of things in only 40 seconds if we're

00:21:45,380 --> 00:21:53,180
not messing with the composer lock if

00:21:49,700 --> 00:21:56,120
you want to make a far you can do the

00:21:53,180 --> 00:21:58,880
hard work and look at the PHP far api's

00:21:56,120 --> 00:22:01,790
and start writing some code but there's

00:21:58,880 --> 00:22:02,210
a little project called a care of your

00:22:01,790 --> 00:22:04,280
box

00:22:02,210 --> 00:22:07,310
and if you install that all you have to

00:22:04,280 --> 00:22:11,680
do is run box build that's going to make

00:22:07,310 --> 00:22:14,150
a far for you if you take an existing

00:22:11,680 --> 00:22:16,040
basta JSON file which describes what

00:22:14,150 --> 00:22:19,730
your car should look like all you really

00:22:16,040 --> 00:22:21,140
have to modify is this part here that is

00:22:19,730 --> 00:22:23,360
highlighted in the middle and this is

00:22:21,140 --> 00:22:24,860
from the Robo project you know by

00:22:23,360 --> 00:22:27,290
default you say which directories

00:22:24,860 --> 00:22:29,120
contain all of my sources you can add

00:22:27,290 --> 00:22:30,560
additional files that are outside of

00:22:29,120 --> 00:22:33,770
that location if you just want to

00:22:30,560 --> 00:22:39,020
cherry-pick some things and then down at

00:22:33,770 --> 00:22:40,790
the bottom the finder allows you to have

00:22:39,020 --> 00:22:43,070
a better control over what goes in and

00:22:40,790 --> 00:22:47,080
what goes out so just a little bit of

00:22:43,070 --> 00:22:48,950
editing of this and then all of your

00:22:47,080 --> 00:22:51,500
contents will go into afar and it

00:22:48,950 --> 00:22:54,020
actually works right I found that it's

00:22:51,500 --> 00:22:56,000
very easy using the PHP API to

00:22:54,020 --> 00:22:58,880
accidentally build a far that seems to

00:22:56,000 --> 00:23:02,840
mostly work but some of the far API

00:22:58,880 --> 00:23:04,820
functions for retrieving files just

00:23:02,840 --> 00:23:06,350
don't return anything and that's very

00:23:04,820 --> 00:23:09,380
frustrating takes a long time to debug

00:23:06,350 --> 00:23:11,890
so if you use a tool you don't have to

00:23:09,380 --> 00:23:11,890
debug that

00:23:14,600 --> 00:23:21,259
Travis also has a deployment feature in

00:23:18,690 --> 00:23:25,440
the deployed section of your Travis CMO

00:23:21,259 --> 00:23:29,249
if you say provider releases and provide

00:23:25,440 --> 00:23:32,580
your OAuth token for github then you can

00:23:29,249 --> 00:23:35,249
automatically take some contents of your

00:23:32,580 --> 00:23:37,860
build results such as your bar file and

00:23:35,249 --> 00:23:39,269
it'll get pushed up to github so and

00:23:37,860 --> 00:23:41,580
github every time you have a release

00:23:39,269 --> 00:23:43,739
there's a little section where you can

00:23:41,580 --> 00:23:46,220
go to see all of your releases and it

00:23:43,739 --> 00:23:48,539
has tarballs that github makes for you

00:23:46,220 --> 00:23:51,539
anything else that you put in here will

00:23:48,539 --> 00:23:53,489
show up right next to those releases so

00:23:51,539 --> 00:23:55,649
if you're distributing a bar that you

00:23:53,489 --> 00:23:57,239
want people to release you don't need to

00:23:55,649 --> 00:23:59,519
build it manually yourself and upload it

00:23:57,239 --> 00:24:02,129
to github every time you can just

00:23:59,519 --> 00:24:05,789
automate it as part of your TR a part of

00:24:02,129 --> 00:24:11,369
here at CI and that this will happen any

00:24:05,789 --> 00:24:13,940
time you push your release which is to

00:24:11,369 --> 00:24:13,940
say a version

00:24:16,700 --> 00:24:23,389
I like to use a feature of composer

00:24:21,049 --> 00:24:27,859
called composer script if you make a

00:24:23,389 --> 00:24:30,769
script section inside of your composer

00:24:27,859 --> 00:24:34,369
JSON file then you can add new commands

00:24:30,769 --> 00:24:36,769
that are available from the command line

00:24:34,369 --> 00:24:38,869
when you run them with composer so in

00:24:36,769 --> 00:24:41,090
the highlighted example if you run

00:24:38,869 --> 00:24:44,239
composer unit that's going to run your

00:24:41,090 --> 00:24:48,980
PHP unit test and in this particular

00:24:44,239 --> 00:24:51,049
example I define the environment

00:24:48,980 --> 00:24:56,749
variable shell interactive equals true

00:24:51,049 --> 00:25:00,379
and this prevents Symphony from running

00:24:56,749 --> 00:25:04,450
code in a way that is destructive to the

00:25:00,379 --> 00:25:06,710
tests for this project so it's harder to

00:25:04,450 --> 00:25:09,289
describe necessarily all of the

00:25:06,710 --> 00:25:12,070
requirements and readme if we start

00:25:09,289 --> 00:25:16,309
getting into the habit of providing

00:25:12,070 --> 00:25:18,320
these standard rules like composer tests

00:25:16,309 --> 00:25:20,659
much like other projects do with make

00:25:18,320 --> 00:25:23,809
files then that makes it easier for

00:25:20,659 --> 00:25:25,309
people to just clone bills and run your

00:25:23,809 --> 00:25:27,889
projects without having to think twice

00:25:25,309 --> 00:25:31,429
about what they need to do or dig

00:25:27,889 --> 00:25:34,429
through your reasoning on the test

00:25:31,429 --> 00:25:36,619
script yet Allah is at unit with that

00:25:34,429 --> 00:25:43,399
block if you fail to FPS or when they go

00:25:36,619 --> 00:25:46,309
wrong I would have to test that this is

00:25:43,399 --> 00:25:48,080
it I don't remember but to call it out

00:25:46,309 --> 00:25:54,259
in the square brackets it's the items

00:25:48,080 --> 00:25:56,269
start with an axe it recursively runs on

00:25:54,259 --> 00:25:57,799
those can also be shell commands when

00:25:56,269 --> 00:25:59,840
you have a list of things like that I

00:25:57,799 --> 00:26:03,970
don't remember if the list is

00:25:59,840 --> 00:26:03,970
interrupted by errors I think it is

00:26:05,350 --> 00:26:12,730
because it's going to return your status

00:26:07,460 --> 00:26:17,890
code so yeah

00:26:12,730 --> 00:26:20,170
oh so if you provide testing with Travis

00:26:17,890 --> 00:26:24,760
it's a good idea to put a badge when you

00:26:20,170 --> 00:26:29,170
read me if you go to your image status

00:26:24,760 --> 00:26:34,540
status images on the Travis website you

00:26:29,170 --> 00:26:38,170
can get up and this example I'm showing

00:26:34,540 --> 00:26:41,740
image URL it if you wanted to put a

00:26:38,170 --> 00:26:43,870
badge on a file that was just HTML you

00:26:41,740 --> 00:26:46,660
could do that you can also switch image

00:26:43,870 --> 00:26:52,780
URL to markdown to get the markdown if

00:26:46,660 --> 00:26:54,550
it's going into a readme MD but the

00:26:52,780 --> 00:26:58,440
image URL is is sometimes kind of

00:26:54,550 --> 00:26:58,440
interesting for a little hack we do I

00:26:58,920 --> 00:27:05,350
can't see on we have some wiki pages and

00:27:02,230 --> 00:27:08,530
they just collect in a wiki table a

00:27:05,350 --> 00:27:11,260
whole bunch of lists of project and then

00:27:08,530 --> 00:27:13,330
we paste the images of the status badges

00:27:11,260 --> 00:27:16,900
into the wiki page and anyone who is

00:27:13,330 --> 00:27:19,120
doing the wiki page will then see the

00:27:16,900 --> 00:27:23,530
status of all of those projects so we

00:27:19,120 --> 00:27:26,020
have just made a dynamically updated

00:27:23,530 --> 00:27:31,690
status page just in a wiki it's kind of

00:27:26,020 --> 00:27:32,770
fun coveralls is a neat little service

00:27:31,690 --> 00:27:36,370
that will show you what your code

00:27:32,770 --> 00:27:42,430
coverage is like on your project it's

00:27:36,370 --> 00:27:44,440
easy to set up in your PHP unit XML file

00:27:42,430 --> 00:27:50,020
you just need a login section which

00:27:44,440 --> 00:27:52,450
tells PHP unit how to produce this

00:27:50,020 --> 00:27:54,360
coverage information in the example

00:27:52,450 --> 00:27:58,630
shown on the screen there the

00:27:54,360 --> 00:28:00,670
unhighlight idli produces the clover SML

00:27:58,630 --> 00:28:03,430
that's used by coveralls the one that

00:28:00,670 --> 00:28:06,430
commented out above it will generate

00:28:03,430 --> 00:28:09,610
HTML pages with your coverage so if you

00:28:06,430 --> 00:28:13,840
want to look at code coverage reports

00:28:09,610 --> 00:28:17,200
offline you can just uncomment that run

00:28:13,840 --> 00:28:19,450
your unit test and take a look at them

00:28:17,200 --> 00:28:21,760
locally but if you put it online then

00:28:19,450 --> 00:28:22,789
other users who are evaluating your

00:28:21,760 --> 00:28:24,949
projects can

00:28:22,789 --> 00:28:29,749
to coverage results and and see how much

00:28:24,949 --> 00:28:31,909
code cover you got if you want to run

00:28:29,749 --> 00:28:33,409
the test coverage code you need a debug

00:28:31,909 --> 00:28:36,320
install on a mass this is really easy

00:28:33,409 --> 00:28:38,209
now if you just installed PHP with X

00:28:36,320 --> 00:28:41,389
debug you're not on a Mac you might want

00:28:38,209 --> 00:28:44,239
to use a VM and then you compose a

00:28:41,389 --> 00:28:46,579
require satoshi PHP coveralls which is a

00:28:44,239 --> 00:28:50,899
little third party utility that helps

00:28:46,579 --> 00:28:53,719
upload your clover XML to cover all and

00:28:50,899 --> 00:29:00,319
then you just add in a after success

00:28:53,719 --> 00:29:01,819
with this Travis retry command and if

00:29:00,319 --> 00:29:03,859
you run vendor bin come to rolls it'll

00:29:01,819 --> 00:29:06,199
just put the the results of your clover

00:29:03,859 --> 00:29:09,919
XML up on come roll for you

00:29:06,199 --> 00:29:11,749
the result is oh sorry another step in

00:29:09,919 --> 00:29:14,539
coveralls itself you have to click on

00:29:11,749 --> 00:29:16,369
the plus and then you can just move the

00:29:14,539 --> 00:29:19,399
little radio slider to the on position

00:29:16,369 --> 00:29:22,339
and once you do that then coveralls will

00:29:19,399 --> 00:29:24,289
start keeping records of your your build

00:29:22,339 --> 00:29:26,749
results and then you can get a little

00:29:24,289 --> 00:29:28,459
graph over time that shows how your

00:29:26,749 --> 00:29:32,539
coverage goes up and down if you add

00:29:28,459 --> 00:29:34,869
tests and add extra features and things

00:29:32,539 --> 00:29:34,869
of that nature

00:29:38,280 --> 00:29:43,020
once you have all of this stuff in

00:29:39,960 --> 00:29:44,760
coveralls it has a nice little web user

00:29:43,020 --> 00:29:47,820
interface where you can take a look at

00:29:44,760 --> 00:29:50,640
the changes in any given full request

00:29:47,820 --> 00:29:52,500
and you can also sort these by most to

00:29:50,640 --> 00:29:57,170
least covered so it gives you a nice

00:29:52,500 --> 00:30:00,480
place to find it areas in your code that

00:29:57,170 --> 00:30:02,400
need a little more attention on your

00:30:00,480 --> 00:30:04,710
coverage and if you click on one of

00:30:02,400 --> 00:30:07,260
these files then it'll give little

00:30:04,710 --> 00:30:09,540
shading showing red for lines that

00:30:07,260 --> 00:30:13,110
aren't covered and green for lines that

00:30:09,540 --> 00:30:14,400
are in this example we have a file that

00:30:13,110 --> 00:30:17,010
doesn't have great coverage but it's a

00:30:14,400 --> 00:30:20,190
really small file and uncovered lines

00:30:17,010 --> 00:30:23,070
are just providing some very trivial

00:30:20,190 --> 00:30:25,260
defaults so you know we can feel sort of

00:30:23,070 --> 00:30:27,870
good about this but 100% coverage is

00:30:25,260 --> 00:30:30,000
even better and this tool gives us that

00:30:27,870 --> 00:30:35,280
ability to make that decision about

00:30:30,000 --> 00:30:38,640
where we're going to spend our time the

00:30:35,280 --> 00:30:41,190
coverall badge is on the static page

00:30:38,640 --> 00:30:43,470
that shows coverage over time a little

00:30:41,190 --> 00:30:47,340
embed section will give you the markdown

00:30:43,470 --> 00:30:49,740
to add to your evening page scrutinise

00:30:47,340 --> 00:30:53,130
err is a particularly favorite tool of

00:30:49,740 --> 00:30:54,420
mine there's a lot of various tools that

00:30:53,130 --> 00:30:58,500
to try to make this claim of doing

00:30:54,420 --> 00:31:02,670
static analysis on your files but some

00:30:58,500 --> 00:31:05,100
of them produce fairly low value bits of

00:31:02,670 --> 00:31:10,320
advice and I've found over the last year

00:31:05,100 --> 00:31:12,300
or so that scrutinise err if you really

00:31:10,320 --> 00:31:15,750
understand what it's looking at gives

00:31:12,300 --> 00:31:20,390
you some pretty good advice it analyzes

00:31:15,750 --> 00:31:25,290
for code complexity and duplication and

00:31:20,390 --> 00:31:27,660
gives you some feedback in terms of bugs

00:31:25,290 --> 00:31:30,890
and hotspots will help you focus on on

00:31:27,660 --> 00:31:30,890
where you might want to refactor

00:31:31,000 --> 00:31:34,539
it's easy to set up scrutinize er you

00:31:33,220 --> 00:31:36,490
just give it the name of your github

00:31:34,539 --> 00:31:38,289
repository and it's going to pull it in

00:31:36,490 --> 00:31:42,130
unlike some of the other services it

00:31:38,289 --> 00:31:46,150
doesn't give you a list but feel fairly

00:31:42,130 --> 00:31:48,250
easy to get started and the other neat

00:31:46,150 --> 00:31:50,140
thing is on their website they have a

00:31:48,250 --> 00:31:52,600
little chrome plug-in if you choose to

00:31:50,140 --> 00:31:55,179
you can install the plug-in and then

00:31:52,600 --> 00:31:57,760
you'll get scrutinized or reports right

00:31:55,179 --> 00:32:00,659
inside of your full request so if you

00:31:57,760 --> 00:32:03,789
have someone submit something and

00:32:00,659 --> 00:32:10,299
scrutinize or comes back and says oh

00:32:03,789 --> 00:32:13,390
this is a bug then you can say oh I like

00:32:10,299 --> 00:32:19,659
you to fix this you're missing this

00:32:13,390 --> 00:32:24,010
interface this is an example of an

00:32:19,659 --> 00:32:30,549
inspection report that I ran right after

00:32:24,010 --> 00:32:31,840
I fix a given problem scrutinize er was

00:32:30,549 --> 00:32:33,880
complaining that I had a class called

00:32:31,840 --> 00:32:36,880
hook manager that was rated as an F

00:32:33,880 --> 00:32:40,870
because of what it really focuses on is

00:32:36,880 --> 00:32:44,320
class size and complexity and I'd gotten

00:32:40,870 --> 00:32:46,659
the complexity down but it was still

00:32:44,320 --> 00:32:48,490
kind of a large class scrutinise will

00:32:46,659 --> 00:32:50,049
give you advice about refactoring and it

00:32:48,490 --> 00:32:52,570
says you know some times of your class

00:32:50,049 --> 00:32:54,669
that's too large it's doing too many

00:32:52,570 --> 00:32:56,830
different things and in this case the

00:32:54,669 --> 00:32:59,049
hook manager was responsible both for

00:32:56,830 --> 00:33:04,419
managing the hooks and also for doing

00:32:59,049 --> 00:33:06,610
the dispatching so I factored out a base

00:33:04,419 --> 00:33:09,520
class for dispatching and implemented a

00:33:06,610 --> 00:33:11,080
separate dispatcher for every piece in

00:33:09,520 --> 00:33:13,360
the code that was doing dispatching and

00:33:11,080 --> 00:33:17,500
then left the rest and hook manager and

00:33:13,360 --> 00:33:18,940
after that scrutinize er said hey now

00:33:17,500 --> 00:33:20,620
hook manager looks good to me I'm going

00:33:18,940 --> 00:33:22,659
to move it from an a to an F in all of

00:33:20,620 --> 00:33:28,990
these little classes that I did for all

00:33:22,659 --> 00:33:30,760
so nice so a pretty useful thing and the

00:33:28,990 --> 00:33:34,090
way it founds that is if you go to your

00:33:30,760 --> 00:33:35,620
code hotspot you can see on the left as

00:33:34,090 --> 00:33:39,159
a list of all of your worst graded

00:33:35,620 --> 00:33:40,840
classes and on the right is your worst

00:33:39,159 --> 00:33:41,430
rated what they call PHP operations

00:33:40,840 --> 00:33:43,980
which is to say

00:33:41,430 --> 00:33:46,730
just a method and you have a couple of

00:33:43,980 --> 00:33:49,320
different techniques you can use if you

00:33:46,730 --> 00:33:50,970
reduce your psychometric complexity

00:33:49,320 --> 00:33:55,320
which is to say reduce the number of

00:33:50,970 --> 00:33:57,870
code paths through a method then your

00:33:55,320 --> 00:33:59,610
PHP operations will get better but of

00:33:57,870 --> 00:34:01,760
course doing that will make the classes

00:33:59,610 --> 00:34:05,550
longer and then eventually as a class

00:34:01,760 --> 00:34:06,840
and gets into an area where you're going

00:34:05,550 --> 00:34:08,310
to want to try to figure out how to

00:34:06,840 --> 00:34:12,330
split it up but if you've already done

00:34:08,310 --> 00:34:15,240
the complexity part then that also will

00:34:12,330 --> 00:34:20,700
sort of help you figure out how to split

00:34:15,240 --> 00:34:22,740
up the class there's another yes here is

00:34:20,700 --> 00:34:24,630
how to fix complexity so in this case

00:34:22,740 --> 00:34:27,740
I've got a class and it says though this

00:34:24,630 --> 00:34:30,510
is complex you might want to split it up

00:34:27,740 --> 00:34:32,070
it'll also draw these class diagrams

00:34:30,510 --> 00:34:33,360
that shows how different things relate

00:34:32,070 --> 00:34:35,790
to each other and I've highlighted the

00:34:33,360 --> 00:34:37,680
section here and this is an unfixed bug

00:34:35,790 --> 00:34:39,270
and some of my code and I can say oh hey

00:34:37,680 --> 00:34:42,390
I have all of these methods that have to

00:34:39,270 --> 00:34:45,720
do with options and the other methods

00:34:42,390 --> 00:34:47,430
don't really talk to these in there

00:34:45,720 --> 00:34:49,170
there's not a lot of crosstalk so this

00:34:47,430 --> 00:34:51,300
is a place where I could create a

00:34:49,170 --> 00:34:57,960
subclass and factor that out of my

00:34:51,300 --> 00:34:59,940
chrome complex class so sometimes any

00:34:57,960 --> 00:35:01,290
static analysis tool will give you

00:34:59,940 --> 00:35:04,830
advice that you don't like to just

00:35:01,290 --> 00:35:07,740
ignore it but I found that if you

00:35:04,830 --> 00:35:11,430
recognize what the tool is is good at

00:35:07,740 --> 00:35:13,470
and use it for that purpose and I've

00:35:11,430 --> 00:35:17,370
been pretty happy with what scrutinise

00:35:13,470 --> 00:35:22,350
ER does you can get a bad for scrutinise

00:35:17,370 --> 00:35:26,720
ER right under your overall score just

00:35:22,350 --> 00:35:26,720
hits the mark down into readme as usual

00:35:28,350 --> 00:35:35,050
I'm just going to zoom through version

00:35:31,150 --> 00:35:37,120
eyes really quickly but some people have

00:35:35,050 --> 00:35:39,130
said that this is not the most important

00:35:37,120 --> 00:35:41,140
tool but what are we doing here we are

00:35:39,130 --> 00:35:42,970
creating open source software and

00:35:41,140 --> 00:35:45,310
there's a lot of different licenses in

00:35:42,970 --> 00:35:48,070
the world so I think we should try to

00:35:45,310 --> 00:35:50,110
pay attention at least a little bit in

00:35:48,070 --> 00:35:55,170
our composer Jason we really want to put

00:35:50,110 --> 00:35:57,400
in explicitly the license that we allow

00:35:55,170 --> 00:35:58,780
writing the composer Jason because this

00:35:57,400 --> 00:36:04,200
will allow other programs such as

00:35:58,780 --> 00:36:04,200
version I to automatically analyze

00:36:04,770 --> 00:36:12,790
here's an example of a version I output

00:36:08,800 --> 00:36:15,250
that is showing a one bit of software

00:36:12,790 --> 00:36:19,570
that was out of date and in this case in

00:36:15,250 --> 00:36:20,650
this project it was a decision to you

00:36:19,570 --> 00:36:21,850
know not to do that

00:36:20,650 --> 00:36:24,390
the other interesting thing on this

00:36:21,850 --> 00:36:27,970
graph if there's a little Apache 2

00:36:24,390 --> 00:36:31,060
license embedded in there and Apache 2

00:36:27,970 --> 00:36:33,640
can be a red flag because if you use

00:36:31,060 --> 00:36:35,230
something that is licensed to party -

00:36:33,640 --> 00:36:38,200
that's been compatible with the GPL

00:36:35,230 --> 00:36:41,260
which makes for a dicey situation if you

00:36:38,200 --> 00:36:44,440
want to mix things up this is just a dev

00:36:41,260 --> 00:36:46,840
component here it's not used in the main

00:36:44,440 --> 00:36:49,110
software but if we click through on this

00:36:46,840 --> 00:36:51,160
link then we find out something that

00:36:49,110 --> 00:36:52,450
version I doesn't tell it very easily

00:36:51,160 --> 00:36:55,320
and that is that this component is

00:36:52,450 --> 00:36:59,980
actually dual license under Apache and

00:36:55,320 --> 00:37:02,200
GPL so if you're not using version I you

00:36:59,980 --> 00:37:04,720
can run a command called composer

00:37:02,200 --> 00:37:07,330
licenses and that will output in your

00:37:04,720 --> 00:37:10,630
terminal a list of all of the licenses

00:37:07,330 --> 00:37:12,060
of all of the software that you use so

00:37:10,630 --> 00:37:14,800
even if you don't bother the setup

00:37:12,060 --> 00:37:16,870
version I I strongly recommend that you

00:37:14,800 --> 00:37:19,210
occasionally run composer licenses on

00:37:16,870 --> 00:37:21,010
your PHP library to see how your

00:37:19,210 --> 00:37:23,140
compliance is doing and we can see down

00:37:21,010 --> 00:37:27,640
here the composer is a little smarter

00:37:23,140 --> 00:37:30,910
than version is telling us right in the

00:37:27,640 --> 00:37:33,270
output that this file is due Alexis the

00:37:30,910 --> 00:37:33,270
boxing

00:37:36,010 --> 00:37:40,480
when I do setup version I what I like to

00:37:38,410 --> 00:37:42,490
do is I'd like to take the license badge

00:37:40,480 --> 00:37:45,330
from poser that I showed you earlier and

00:37:42,490 --> 00:37:48,869
then I edit it so instead of linking to

00:37:45,330 --> 00:37:51,220
hacking just I link it to the version I

00:37:48,869 --> 00:37:53,230
licenses table so if someone comes to my

00:37:51,220 --> 00:37:54,730
project and they click on the badge they

00:37:53,230 --> 00:37:57,550
don't have to download my project and

00:37:54,730 --> 00:38:01,900
run composer licenses they can see the

00:37:57,550 --> 00:38:05,650
output right from my project page the

00:38:01,900 --> 00:38:07,869
read the docs is a really cool service

00:38:05,650 --> 00:38:11,619
that allows you to write documentation

00:38:07,869 --> 00:38:18,670
in markdown just like github and the

00:38:11,619 --> 00:38:21,340
result of that is a output that looks

00:38:18,670 --> 00:38:22,960
like this your markdown texas on the

00:38:21,340 --> 00:38:26,710
right and there's a nice table of

00:38:22,960 --> 00:38:28,930
contents on the left that people can

00:38:26,710 --> 00:38:30,880
navigate through and if you do your

00:38:28,930 --> 00:38:33,820
documentation and markdown files it's

00:38:30,880 --> 00:38:36,270
really easy to edit in github and easy

00:38:33,820 --> 00:38:43,359
to update as part of pull request I

00:38:36,270 --> 00:38:47,170
recommend that so here's a neat little

00:38:43,359 --> 00:38:49,330
trick there is a project called markdown

00:38:47,170 --> 00:38:51,940
Docs and if you run it it will troll

00:38:49,330 --> 00:38:55,780
through all of your PHP files and it'll

00:38:51,940 --> 00:38:59,890
build a nice API API dot get a single

00:38:55,780 --> 00:39:01,900
markdown file and you can just add that

00:38:59,890 --> 00:39:05,770
to read the doc now the problem with

00:39:01,900 --> 00:39:09,570
this is that it's not automated there's

00:39:05,770 --> 00:39:13,119
no way that you can have this system

00:39:09,570 --> 00:39:14,890
automatically generate your

00:39:13,119 --> 00:39:17,589
documentation off of a pull request

00:39:14,890 --> 00:39:20,080
because read the docs is written in

00:39:17,589 --> 00:39:22,180
Python and this markdown Doc's it's

00:39:20,080 --> 00:39:24,369
written in PHP and it's hard to get

00:39:22,180 --> 00:39:26,920
those two things to play together so you

00:39:24,369 --> 00:39:30,369
have to make separate api's and remember

00:39:26,920 --> 00:39:32,440
to update your documentation but this

00:39:30,369 --> 00:39:35,020
technique is really easy to get started

00:39:32,440 --> 00:39:38,020
but it's just unfortunately cumbersome

00:39:35,020 --> 00:39:40,810
that it's not automated so what if you

00:39:38,020 --> 00:39:44,109
want to automate you can move on to a

00:39:40,810 --> 00:39:44,890
more complex tool github pages allows

00:39:44,109 --> 00:39:47,340
you to serve

00:39:44,890 --> 00:39:51,820
at acacia you know directly from github

00:39:47,340 --> 00:39:54,730
out of a separate branch on Travis I

00:39:51,820 --> 00:40:00,040
mean up on github that you generate on

00:39:54,730 --> 00:40:03,670
Travis on github you can launch the

00:40:00,040 --> 00:40:05,440
automatic page generator and it has a

00:40:03,670 --> 00:40:07,870
whole bunch of templates that you can

00:40:05,440 --> 00:40:11,440
just click on and it's one time it's

00:40:07,870 --> 00:40:13,210
going to splat down some HTML and it

00:40:11,440 --> 00:40:15,310
looks about like this the templates that

00:40:13,210 --> 00:40:18,040
I picked and then with a little bit of

00:40:15,310 --> 00:40:22,840
CSS fiddling and cursing I made it look

00:40:18,040 --> 00:40:24,970
like this but at mostly you're not going

00:40:22,840 --> 00:40:27,910
to want to do CSS fiddling and cursing

00:40:24,970 --> 00:40:30,400
if you can avoid it I don't really have

00:40:27,910 --> 00:40:32,070
time in this presentation to talk about

00:40:30,400 --> 00:40:35,230
all of the options that are available

00:40:32,070 --> 00:40:39,520
but you can add a whole bunch of

00:40:35,230 --> 00:40:42,520
different techniques like the MK org is

00:40:39,520 --> 00:40:44,650
the markdown to HTML generator that read

00:40:42,520 --> 00:40:46,840
the docs uses and you can use that as

00:40:44,650 --> 00:40:48,430
part of your github pages process

00:40:46,840 --> 00:40:50,820
especially if you're moving from read

00:40:48,430 --> 00:40:54,580
the docs to a more complicated system

00:40:50,820 --> 00:40:57,490
Jekyll is really popular and gulp in as

00:40:54,580 --> 00:41:01,570
a PHP project that that does similar

00:40:57,490 --> 00:41:07,930
things and there's many more to keep you

00:41:01,570 --> 00:41:10,390
out of this and CSS fiddling world once

00:41:07,930 --> 00:41:14,080
you're doing github pages then it's

00:41:10,390 --> 00:41:16,030
possible to automate your API generation

00:41:14,080 --> 00:41:18,280
and the API generator I like is called

00:41:16,030 --> 00:41:22,360
Sami this is part of the Symphony

00:41:18,280 --> 00:41:30,850
project and it makes a very Java Dom

00:41:22,360 --> 00:41:33,850
like output from your PHP sources this

00:41:30,850 --> 00:41:37,090
slide is just showing you how to run

00:41:33,850 --> 00:41:38,800
Sami I would recommend that you grab

00:41:37,090 --> 00:41:39,910
this from somewhere that's already doing

00:41:38,800 --> 00:41:42,430
that successfully like one of the

00:41:39,910 --> 00:41:47,980
consolidation projects and copy it with

00:41:42,430 --> 00:41:51,370
a little bit of customization then you

00:41:47,980 --> 00:41:57,760
can easily have your code runs free Sami

00:41:51,370 --> 00:42:03,250
and welcome kind enough to give a screen

00:41:57,760 --> 00:42:07,750
shot for that okay this is also showing

00:42:03,250 --> 00:42:10,150
that you need to set up some environment

00:42:07,750 --> 00:42:12,610
variables to put your github token and

00:42:10,150 --> 00:42:14,260
your email address into the environment

00:42:12,610 --> 00:42:16,750
variable sections on Travis so that you

00:42:14,260 --> 00:42:19,510
have the right to actually run Sammy and

00:42:16,750 --> 00:42:22,180
then push that back up to get up when it

00:42:19,510 --> 00:42:24,580
runs and here is the diagram that I

00:42:22,180 --> 00:42:26,350
wanted to show you that shows you all of

00:42:24,580 --> 00:42:27,730
your classes on the left and you click

00:42:26,350 --> 00:42:29,590
on it and then it shows you all of the

00:42:27,730 --> 00:42:32,410
methods and those are all linked up this

00:42:29,590 --> 00:42:35,380
was used to make the Symphony API doc so

00:42:32,410 --> 00:42:36,730
it's nice and clean and despite the

00:42:35,380 --> 00:42:38,110
lengths of that script I showed you a

00:42:36,730 --> 00:42:41,290
couple of slides back it's not really

00:42:38,110 --> 00:42:43,750
that hard to set up automated if you

00:42:41,290 --> 00:42:46,210
have a module that has a little bit of a

00:42:43,750 --> 00:42:50,290
medium to large-sized API I recommend

00:42:46,210 --> 00:42:53,800
taking the time to do that so that is

00:42:50,290 --> 00:42:55,180
the extent of what I wanted to go over

00:42:53,800 --> 00:42:58,330
today there's going to be some really

00:42:55,180 --> 00:43:01,090
cool contributions sprints coming up I

00:42:58,330 --> 00:43:04,150
hope you will stay for those the first

00:43:01,090 --> 00:43:06,730
time sprinters workshop is at 9:00 a.m.

00:43:04,150 --> 00:43:09,130
in room 307 we've got a mentor course

00:43:06,730 --> 00:43:11,050
sprint also at 9:00 a.m. in room 301 to

00:43:09,130 --> 00:43:13,570
303 the big sprint rooms you may have

00:43:11,050 --> 00:43:14,920
already been there and the general

00:43:13,570 --> 00:43:19,780
sprints are going to move to room 309

00:43:14,920 --> 00:43:22,480
and 310 so thank you very much for

00:43:19,780 --> 00:43:26,950
coming please find the presentation on

00:43:22,480 --> 00:43:29,110
the slides session section and I'll take

00:43:26,950 --> 00:43:29,380
any questions anyone might have at this

00:43:29,110 --> 00:43:31,330
time

00:43:29,380 --> 00:43:33,720
please come to the microphone if you

00:43:31,330 --> 00:43:33,720
have a picture

00:43:34,920 --> 00:43:40,650
are the slides available somewhere I'll

00:43:38,490 --> 00:43:42,330
certainly tweet it out and you going

00:43:40,650 --> 00:43:44,760
they're all going to show up on the

00:43:42,330 --> 00:43:48,320
schedule on DrupalCon

00:43:44,760 --> 00:43:48,320
yeah they should be like

00:43:49,640 --> 00:43:58,250

YouTube URL: https://www.youtube.com/watch?v=WVmqiXrJnP0


