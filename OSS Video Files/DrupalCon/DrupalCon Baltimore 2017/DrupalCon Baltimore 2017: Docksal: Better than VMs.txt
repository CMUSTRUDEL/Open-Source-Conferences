Title: DrupalCon Baltimore 2017: Docksal: Better than VMs
Publication date: 2017-04-26
Playlist: DrupalCon Baltimore 2017
Description: 
	Update: BoF for QnA and follow-up discussions: Room 311 @ 3:45PM

Getting a project up and running locally should be something "quick and easy". Pull the code, start the stack, maybe grab a DB dump and files, import. Done.

Unfortunately, the reality is somewhat different. Too often that takes hours or even days. Manual setup is tedious, VMs and Vagrant boxes take forever to build or fail to build at all. Developers spend time dealing with sysadmin issues and configurations instead of writing code.

Let's see how all of this can be handled with just two commands.


git clone -project-repo
fin init
This is the workflow we are using at FFW and we are doing that with Docksal.

Docksal is an open-source tool created by FFW for defining and managing development environments. It brings together common development tools, minimizes time spent on configuration, and ensures the consistency of local development environments throughout a team’s continuous integration workflow.

Docksal automatically configures each project's environment to ensure team members are using the same tools, and versions, regardless of the individual requirements of each project. Most importantly, it makes the entire process easy. Docksal offers fully containerized environments with Docker, provides cross-platform support (MacOS, Windows, and Linux,) and has built-in tools that include:

Drush (6,7,8), Drupal Console, WP-CLI, Composer, PHP Code Sniffer
Ruby (with bundler), Node.js (with nvm, nmp), Python
Apache Solr, Varnish, Memcache and more (including BYO)
Built-in testing support with Behat and Selenium
Zero configuration Xdebug support with PhpStorm
Docksal will even automatically configure virtual hosts for you, so no more editing host files and server configurations.

In this session we will:

Go over the basics of using Docker for local development
Compare the Docker based vs the VM based approach
Go over the pain points that Docksal eliminates
Initialize instant environments with zero configuration
Get a Drupal7 and a Drupal8 site running side by side using different stack versions
See how Docksal can be integrated into an existing project
Have a sneak peek into some more advanced use case supported in Docksal (e.g. complex, production-like stacks)
Prior experience using VMs and/or Docker is a plus, but not required.
Captions: 
	00:00:00,030 --> 00:00:05,400
welcome everyone this is to talk about

00:00:02,460 --> 00:00:07,350
what is better than VMs I'm going to

00:00:05,400 --> 00:00:11,010
talk about tool that we're building

00:00:07,350 --> 00:00:13,500
called duxelle if you were present at

00:00:11,010 --> 00:00:15,089
the previous half session it was a great

00:00:13,500 --> 00:00:18,449
presentation from my tell about what

00:00:15,089 --> 00:00:20,760
containers are how they work so that was

00:00:18,449 --> 00:00:23,430
a good framing layer for the audience

00:00:20,760 --> 00:00:25,529
that stayed for this part of the session

00:00:23,430 --> 00:00:28,949
I can keep some of my slides or really

00:00:25,529 --> 00:00:31,769
go quickly through them so my name is

00:00:28,949 --> 00:00:35,850
leonid Makarov I'm a chief architect at

00:00:31,769 --> 00:00:37,950
a FW and we will be talking about what

00:00:35,850 --> 00:00:39,360
is data than VM sense I think I think

00:00:37,950 --> 00:00:43,410
you already know the answer but let's

00:00:39,360 --> 00:00:46,350
dive into this so well first what are

00:00:43,410 --> 00:00:50,670
the whole point why do we want to use

00:00:46,350 --> 00:00:52,309
containers instead of VMs in local

00:00:50,670 --> 00:00:55,320
development environment well because

00:00:52,309 --> 00:00:56,879
project on boiling is difficult it takes

00:00:55,320 --> 00:01:00,350
an enormous and in a reasonable amount

00:00:56,879 --> 00:01:03,149
of time and we as a big digital agency

00:01:00,350 --> 00:01:05,600
know it really well we have distributed

00:01:03,149 --> 00:01:09,600
teams using different tools different

00:01:05,600 --> 00:01:12,180
platforms and it's very difficult to get

00:01:09,600 --> 00:01:14,960
everyone on the same page using the same

00:01:12,180 --> 00:01:19,259
tools and and achieving the same result

00:01:14,960 --> 00:01:22,110
so you start with having no

00:01:19,259 --> 00:01:23,369
documentation no then you realize what

00:01:22,110 --> 00:01:26,000
that I'm going to work these people

00:01:23,369 --> 00:01:30,030
spend weeks trying to figure out how to

00:01:26,000 --> 00:01:32,790
start working in a project how to get

00:01:30,030 --> 00:01:35,070
the codebase and then from getting the

00:01:32,790 --> 00:01:38,970
codebase to having a running site you

00:01:35,070 --> 00:01:41,189
really can spend this and that so even

00:01:38,970 --> 00:01:44,430
even if you have the instructions they

00:01:41,189 --> 00:01:48,210
tend to be outdated incomplete then what

00:01:44,430 --> 00:01:50,850
you do you start are trying to all me

00:01:48,210 --> 00:01:53,700
that you use a virtual machine you use

00:01:50,850 --> 00:01:56,969
the vagrant box but they that takes

00:01:53,700 --> 00:01:58,890
quite a while to provision over time

00:01:56,969 --> 00:02:01,469
those provisioning scripts starts to

00:01:58,890 --> 00:02:02,969
fail as well as well because well maybe

00:02:01,469 --> 00:02:05,399
something failed to download maybe

00:02:02,969 --> 00:02:09,539
something just get out of it so it's

00:02:05,399 --> 00:02:11,380
pretty happy to use that for like day to

00:02:09,539 --> 00:02:15,130
day use in development

00:02:11,380 --> 00:02:17,170
and developers try to stick things on

00:02:15,130 --> 00:02:19,450
their own but they are not to sadness so

00:02:17,170 --> 00:02:21,550
they can attach it here and there

00:02:19,450 --> 00:02:23,770
yeah they will get it up back and

00:02:21,550 --> 00:02:26,920
running and everyone else that with

00:02:23,770 --> 00:02:30,880
their snow flaky setups and this is the

00:02:26,920 --> 00:02:34,960
direct path to it works on my local how

00:02:30,880 --> 00:02:37,450
many of you have had it works in my

00:02:34,960 --> 00:02:39,070
local case exactly

00:02:37,450 --> 00:02:41,260
pretty much everyone right I don't know

00:02:39,070 --> 00:02:43,870
if I think you have a broken head sorry

00:02:41,260 --> 00:02:46,210
for that to me you were not able to whip

00:02:43,870 --> 00:02:48,400
it up yeah so that's the exact deviation

00:02:46,210 --> 00:02:50,560
you own boiling is difficult because of

00:02:48,400 --> 00:02:52,600
all of these issues and it seems to be

00:02:50,560 --> 00:02:56,740
difficult to automate it and keep that

00:02:52,600 --> 00:02:58,660
automation alive so and this is the

00:02:56,740 --> 00:03:01,210
reality this is exactly what we went

00:02:58,660 --> 00:03:05,620
through as a big company through all of

00:03:01,210 --> 00:03:07,870
those stages over time and fortunately

00:03:05,620 --> 00:03:13,690
today this is what the process looks

00:03:07,870 --> 00:03:16,570
like our developers can clone a project

00:03:13,690 --> 00:03:18,730
people switch to that directly the

00:03:16,570 --> 00:03:22,180
disease just cloned and lana commands

00:03:18,730 --> 00:03:24,790
and that brings the entire stack to them

00:03:22,180 --> 00:03:27,160
up and that stack is not just constant

00:03:24,790 --> 00:03:28,600
default it's a specific stack for that

00:03:27,160 --> 00:03:30,940
particular project that they are working

00:03:28,600 --> 00:03:33,160
on with whatever components are

00:03:30,940 --> 00:03:36,850
necessary inversions for that project

00:03:33,160 --> 00:03:39,910
and then it also provisions the site

00:03:36,850 --> 00:03:42,760
itself with a full Davis from somewhere

00:03:39,910 --> 00:03:46,270
run specific set of commands so in the

00:03:42,760 --> 00:03:48,040
end this is everything I as a new

00:03:46,270 --> 00:03:51,460
developer being on boarded into the

00:03:48,040 --> 00:03:54,250
project has to do to get a site up and

00:03:51,460 --> 00:03:56,680
running and be productive right away and

00:03:54,250 --> 00:03:59,650
this takes me about 10 minutes let's say

00:03:56,680 --> 00:04:03,780
and yes we are using docker and

00:03:59,650 --> 00:04:06,880
containers for this so let's just

00:04:03,780 --> 00:04:08,290
because I know some of you were not

00:04:06,880 --> 00:04:11,350
present in the previous session I will

00:04:08,290 --> 00:04:15,160
quickly go through and repeat repeat

00:04:11,350 --> 00:04:17,200
again what containers are and what they

00:04:15,160 --> 00:04:19,390
are not containers are not virtual

00:04:17,200 --> 00:04:20,710
machines and this is a very important

00:04:19,390 --> 00:04:22,930
thing to understand they are

00:04:20,710 --> 00:04:24,639
fundamentally different virtual machines

00:04:22,930 --> 00:04:26,889
or hypervisors

00:04:24,639 --> 00:04:28,539
I used to be too virtualized hardware

00:04:26,889 --> 00:04:31,949
and that's pretty good as you can run

00:04:28,539 --> 00:04:34,569
any gas operating system on any host

00:04:31,949 --> 00:04:36,569
that's cool that's extremely powerful

00:04:34,569 --> 00:04:39,270
but that comes at a cost

00:04:36,569 --> 00:04:44,199
performance and other challenges

00:04:39,270 --> 00:04:46,810
containers on the other hand operated at

00:04:44,199 --> 00:04:52,629
a higher level at the operating system

00:04:46,810 --> 00:04:55,900
virtualization level and you a container

00:04:52,629 --> 00:04:58,479
gas the Linux gas we uses the Linux

00:04:55,900 --> 00:05:00,580
kernel of the host machine so you don't

00:04:58,479 --> 00:05:01,449
have to boot the whole operating system

00:05:00,580 --> 00:05:02,849
it's already there

00:05:01,449 --> 00:05:05,039
it's your usable so eventually

00:05:02,849 --> 00:05:07,840
containers are religious processes

00:05:05,039 --> 00:05:13,060
isolated gauged processors within the

00:05:07,840 --> 00:05:15,990
same running host machine so again quick

00:05:13,060 --> 00:05:19,469
overview on the left side we have

00:05:15,990 --> 00:05:22,180
traditional hypervisor virtual machine

00:05:19,469 --> 00:05:25,689
infrastructure where you have a full

00:05:22,180 --> 00:05:27,490
operating system for each VM start over

00:05:25,689 --> 00:05:28,779
and started and running and the overhead

00:05:27,490 --> 00:05:31,089
of that on top of that you have your

00:05:28,779 --> 00:05:33,219
libraries and applications and on the

00:05:31,089 --> 00:05:35,080
left side on the right side and so you

00:05:33,219 --> 00:05:36,939
can see that there is no hypervisor in

00:05:35,080 --> 00:05:39,430
place we have the doctor Engine or

00:05:36,939 --> 00:05:42,370
whatever container engine it would be in

00:05:39,430 --> 00:05:44,409
our case it is like your engine and you

00:05:42,370 --> 00:05:46,240
have the necessary libraries and

00:05:44,409 --> 00:05:48,039
binaries and that's really the

00:05:46,240 --> 00:05:50,169
difference between different Linux

00:05:48,039 --> 00:05:51,939
distributions just the file system is

00:05:50,169 --> 00:05:53,379
different the kernel is pretty much the

00:05:51,939 --> 00:05:57,339
same on top of that you have your

00:05:53,379 --> 00:06:00,909
applications where containers so with

00:05:57,339 --> 00:06:03,669
again virtual machines on lab what we're

00:06:00,909 --> 00:06:05,169
all used to you have a physical host you

00:06:03,669 --> 00:06:07,180
launch several virtual machines they

00:06:05,169 --> 00:06:09,339
reserve resources not all of those

00:06:07,180 --> 00:06:11,919
resources are used so you end up with

00:06:09,339 --> 00:06:16,089
space being kind of reserved but not

00:06:11,919 --> 00:06:18,610
used with containers it is used more

00:06:16,089 --> 00:06:21,159
efficient so the physical resources are

00:06:18,610 --> 00:06:24,129
now free that because containers only

00:06:21,159 --> 00:06:26,589
use what they need and all that stays

00:06:24,129 --> 00:06:28,270
that is left can be used for more

00:06:26,589 --> 00:06:31,000
containers so the the whole

00:06:28,270 --> 00:06:33,039
infrastructure and setup can be much

00:06:31,000 --> 00:06:35,700
more advanced you can watch a lot more

00:06:33,039 --> 00:06:39,240
stuff and more efficiently on the same

00:06:35,700 --> 00:06:41,720
physical host another cool idea and

00:06:39,240 --> 00:06:44,960
approach that you probably heard about

00:06:41,720 --> 00:06:48,390
microservice approach what does it mean

00:06:44,960 --> 00:06:51,720
VMs monolithic huge couple gigabytes and

00:06:48,390 --> 00:06:54,510
size pre provisions prepackaged with

00:06:51,720 --> 00:06:58,260
everything you would want in a single

00:06:54,510 --> 00:07:00,840
operating system image well try changing

00:06:58,260 --> 00:07:04,650
something and you can start the building

00:07:00,840 --> 00:07:06,770
it and maybe go have coffee one more one

00:07:04,650 --> 00:07:12,330
two three five times

00:07:06,770 --> 00:07:14,190
so what's regular part we switch the

00:07:12,330 --> 00:07:16,860
containers and every piece every

00:07:14,190 --> 00:07:20,400
component every service we break tit

00:07:16,860 --> 00:07:23,070
into a tiny service micro service so now

00:07:20,400 --> 00:07:25,860
our apache is its own container our

00:07:23,070 --> 00:07:28,020
database is its own container our PHP is

00:07:25,860 --> 00:07:28,380
its own container and whatever else you

00:07:28,020 --> 00:07:30,840
want

00:07:28,380 --> 00:07:32,880
varnish memcache solar there is a

00:07:30,840 --> 00:07:34,710
container for that similar to modules in

00:07:32,880 --> 00:07:36,390
Drupal there is already probably a

00:07:34,710 --> 00:07:39,540
container for that the container image

00:07:36,390 --> 00:07:43,290
or you can always build your own so this

00:07:39,540 --> 00:07:45,270
is very similar to how you can plug and

00:07:43,290 --> 00:07:47,010
play Drupal modules you can plug and

00:07:45,270 --> 00:07:50,460
play container and continue images into

00:07:47,010 --> 00:07:55,950
your stack composition so you are no no

00:07:50,460 --> 00:07:58,440
longer married to this huge VM which is

00:07:55,950 --> 00:08:00,510
your path eventually because that's all

00:07:58,440 --> 00:08:02,640
you have and you take care of it until

00:08:00,510 --> 00:08:05,670
it dies and then you go grab another

00:08:02,640 --> 00:08:07,530
bath with containers you just plug and

00:08:05,670 --> 00:08:11,910
play whatever you need at that point in

00:08:07,530 --> 00:08:15,090
time for that particular project so to

00:08:11,910 --> 00:08:16,410
recap containers are super efficient

00:08:15,090 --> 00:08:19,350
because they are not VMs they're

00:08:16,410 --> 00:08:21,660
processes they are super super flexible

00:08:19,350 --> 00:08:24,030
because of the micro service approach

00:08:21,660 --> 00:08:26,430
you grab what you need to plug it in and

00:08:24,030 --> 00:08:29,130
it works they are consistent every

00:08:26,430 --> 00:08:31,800
container start from a pre-built image

00:08:29,130 --> 00:08:34,890
which you pull from you graduates really

00:08:31,800 --> 00:08:36,750
play doctor help or private registry and

00:08:34,890 --> 00:08:38,670
because of that results are always the

00:08:36,750 --> 00:08:40,110
same it's the same image the same

00:08:38,670 --> 00:08:42,660
container that starts from the damage

00:08:40,110 --> 00:08:45,600
the same result anywhere employed

00:08:42,660 --> 00:08:47,610
ability anywhere I use it locally it

00:08:45,600 --> 00:08:48,330
works this way I use it in continuous

00:08:47,610 --> 00:08:49,000
integration

00:08:48,330 --> 00:08:51,100
towards

00:08:49,000 --> 00:09:00,370
same exact way I used in production it

00:08:51,100 --> 00:09:03,879
works the same exact way so taking all

00:09:00,370 --> 00:09:06,759
those benefits and applying them to the

00:09:03,879 --> 00:09:09,519
problem we stated originally how can we

00:09:06,759 --> 00:09:12,910
make the onboarding process more

00:09:09,519 --> 00:09:14,980
efficient how can we optimize the way we

00:09:12,910 --> 00:09:17,529
do local development how can we make it

00:09:14,980 --> 00:09:21,040
more consistent we developed it to

00:09:17,529 --> 00:09:23,529
letter W called axial we've been working

00:09:21,040 --> 00:09:25,839
on this for about two years so far we're

00:09:23,529 --> 00:09:28,300
using it in our projects we build it for

00:09:25,839 --> 00:09:31,930
our development teams we open sourced it

00:09:28,300 --> 00:09:36,430
you're welcome to try it and let us know

00:09:31,930 --> 00:09:39,339
what you feel so setting up this is what

00:09:36,430 --> 00:09:42,879
it would look like when I start as a

00:09:39,339 --> 00:09:46,029
brand new developer let's say and I I'm

00:09:42,879 --> 00:09:48,850
going to use the project that has doc

00:09:46,029 --> 00:09:51,040
Doc's whole configuration in place so I

00:09:48,850 --> 00:09:54,309
install it first and installation

00:09:51,040 --> 00:09:57,250
process is very seamless you they have

00:09:54,309 --> 00:09:59,920
the 1ly installer script which is

00:09:57,250 --> 00:10:02,620
cross-platform run it on Linux Mac on

00:09:59,920 --> 00:10:05,079
Windows for Windows if you have to

00:10:02,620 --> 00:10:06,750
install a Linux shell first so that's

00:10:05,079 --> 00:10:08,920
one manual step that you have to perform

00:10:06,750 --> 00:10:13,389
everything else is automated by the

00:10:08,920 --> 00:10:15,600
Installer Linux native no VM super

00:10:13,389 --> 00:10:17,860
efficient all the benefits of containers

00:10:15,600 --> 00:10:20,319
well for Mac and Windows

00:10:17,860 --> 00:10:23,350
you still have to virtualize containers

00:10:20,319 --> 00:10:26,050
I native to Linux although Michael just

00:10:23,350 --> 00:10:28,779
told me great and use that now you can

00:10:26,050 --> 00:10:30,459
run Linux containers and windows which

00:10:28,779 --> 00:10:32,620
was not possible maybe I missed

00:10:30,459 --> 00:10:36,250
something from dark recon that happened

00:10:32,620 --> 00:10:38,110
the week ago but it used to be that you

00:10:36,250 --> 00:10:40,209
can only run Linux containers and Linux

00:10:38,110 --> 00:10:41,680
and windows containers and windows when

00:10:40,209 --> 00:10:44,019
also interested in windows and windows

00:10:41,680 --> 00:10:47,720
because windows was not not not made for

00:10:44,019 --> 00:10:50,760
web development we're interested in

00:10:47,720 --> 00:10:52,920
or vice-versa

00:10:50,760 --> 00:10:55,290
we're interested in running Linux

00:10:52,920 --> 00:10:57,120
containers on Windows and for both Mac

00:10:55,290 --> 00:10:59,910
and Windows we have to visualize but in

00:10:57,120 --> 00:11:02,700
this case it's a really really tiny than

00:10:59,910 --> 00:11:05,640
VM layer it's a very small virtual

00:11:02,700 --> 00:11:08,520
machine which is about 20 megabytes in

00:11:05,640 --> 00:11:10,980
size and all in kit it can do is running

00:11:08,520 --> 00:11:12,840
containers nothing else it's very thin

00:11:10,980 --> 00:11:15,570
and because of that varies here as well

00:11:12,840 --> 00:11:17,280
which we probably not care that much in

00:11:15,570 --> 00:11:19,050
the local environment but it doesn't

00:11:17,280 --> 00:11:23,460
matter when you go up into continuous

00:11:19,050 --> 00:11:25,580
integration in production so once we

00:11:23,460 --> 00:11:28,260
have the duxelle environment installed

00:11:25,580 --> 00:11:32,430
we I forgot to mention we do use

00:11:28,260 --> 00:11:37,890
VirtualBox for mac and Windows this is

00:11:32,430 --> 00:11:41,220
something that works really well and it

00:11:37,890 --> 00:11:43,560
cross-platform there are now solutions

00:11:41,220 --> 00:11:46,080
the docker working on which are called

00:11:43,560 --> 00:11:49,560
docker for Mac and dagger phone windows

00:11:46,080 --> 00:11:52,770
when those get production ready we will

00:11:49,560 --> 00:11:54,390
start using them as well right now it's

00:11:52,770 --> 00:11:56,700
very experimental there are two issues

00:11:54,390 --> 00:11:59,370
in performance so we're still sticking

00:11:56,700 --> 00:12:01,770
with using VirtualBox for virtualization

00:11:59,370 --> 00:12:03,660
on Mac and Windows so once we have the

00:12:01,770 --> 00:12:07,860
duxelle environment provisioned and

00:12:03,660 --> 00:12:10,170
working this is the second step I clone

00:12:07,860 --> 00:12:12,030
the repo and now I run the init script

00:12:10,170 --> 00:12:14,940
so what is really this you need command

00:12:12,030 --> 00:12:16,950
well it's a custom commands which is

00:12:14,940 --> 00:12:19,710
specific to your project and every

00:12:16,950 --> 00:12:22,800
project has its own init script and this

00:12:19,710 --> 00:12:26,760
is just a very simple example of what it

00:12:22,800 --> 00:12:30,990
could look like once you have your you

00:12:26,760 --> 00:12:33,900
pull your code you just a cuss up and

00:12:30,990 --> 00:12:35,610
running you want to provision your

00:12:33,900 --> 00:12:37,770
Drupal site you can either run inside

00:12:35,610 --> 00:12:40,020
install almost likely you will grab a

00:12:37,770 --> 00:12:42,300
database from somewhere and then run

00:12:40,020 --> 00:12:44,580
some kind of update scripts with

00:12:42,300 --> 00:12:49,830
features and things like that again this

00:12:44,580 --> 00:12:51,450
is just an example in reality be any

00:12:49,830 --> 00:12:53,970
commands and that scripts can be as

00:12:51,450 --> 00:12:56,370
sophisticated as you want it to be I'm

00:12:53,970 --> 00:12:58,950
actually going to demo you right now

00:12:56,370 --> 00:13:00,960
what it looks like specifically this

00:12:58,950 --> 00:13:05,610
example I'm going to use

00:13:00,960 --> 00:13:08,270
I hope you can see that and make it a

00:13:05,610 --> 00:13:08,270
bit bigger

00:13:13,600 --> 00:13:21,160
so what I'm going to do I'm going to do

00:13:18,970 --> 00:13:24,340
exactly exactly that I'm going to get

00:13:21,160 --> 00:13:26,830
clone a Reaper from github in this in

00:13:24,340 --> 00:13:32,260
this example it's a sample Drupal AIDS

00:13:26,830 --> 00:13:35,050
we both from the dog sole repository on

00:13:32,260 --> 00:13:37,960
github and imagine this is a real

00:13:35,050 --> 00:13:40,210
project that you would clone and you

00:13:37,960 --> 00:13:43,060
want to start working on so you clone it

00:13:40,210 --> 00:13:46,350
you switch into the director of the

00:13:43,060 --> 00:13:51,390
project Iran pinup

00:13:46,350 --> 00:13:51,390
I'm sorry enough enough mistake

00:13:56,610 --> 00:14:03,280
it was supposed to be finished so why

00:14:01,600 --> 00:14:05,680
the thinning it is actually thinner but

00:14:03,280 --> 00:14:12,280
also a lot more in order to provision

00:14:05,680 --> 00:14:16,270
the actual Drupal site okay let's try it

00:14:12,280 --> 00:14:18,640
once again so the init command and being

00:14:16,270 --> 00:14:20,950
a custom command if I run in just like

00:14:18,640 --> 00:14:23,770
that you can see that a drive bunch of

00:14:20,950 --> 00:14:26,020
things that can can do and then at a

00:14:23,770 --> 00:14:28,690
project level I have the significant

00:14:26,020 --> 00:14:30,250
amount in the repo so thin detects the

00:14:28,690 --> 00:14:33,070
commands if I had more commands it will

00:14:30,250 --> 00:14:35,110
show me them here but I see here there

00:14:33,070 --> 00:14:38,200
is an init command for this project and

00:14:35,110 --> 00:14:41,290
I started so what what happens here part

00:14:38,200 --> 00:14:43,510
of the initialization project process

00:14:41,290 --> 00:14:45,340
for the project these settings for my

00:14:43,510 --> 00:14:48,040
local set up I copied there is a

00:14:45,340 --> 00:14:49,990
template in the people again you have to

00:14:48,040 --> 00:14:52,480
create this for one time and then it's

00:14:49,990 --> 00:14:55,180
being reused every time by every

00:14:52,480 --> 00:14:58,080
developer and we're also using the same

00:14:55,180 --> 00:15:03,070
exact process and continuous integration

00:14:58,080 --> 00:15:06,460
so settings initialized my stack is

00:15:03,070 --> 00:15:08,020
starting up my sequel starts up by

00:15:06,460 --> 00:15:10,810
default here we have only three

00:15:08,020 --> 00:15:15,400
containers with PHP my sequel and Apache

00:15:10,810 --> 00:15:18,880
those CLI GB and web containers and when

00:15:15,400 --> 00:15:20,830
the stacks started up what happens here

00:15:18,880 --> 00:15:23,890
is the Drupal site is installed with

00:15:20,830 --> 00:15:27,460
Rush and this takes about 30 seconds

00:15:23,890 --> 00:15:30,550
right now so once it's installed it

00:15:27,460 --> 00:15:33,640
spits out the URL for me so I didn't

00:15:30,550 --> 00:15:36,430
have to configure I didn't have to have

00:15:33,640 --> 00:15:39,280
PHP Apache my sequel any of that stuff

00:15:36,430 --> 00:15:40,690
installed on my local I didn't have to

00:15:39,280 --> 00:15:45,490
configure my virtual host

00:15:40,690 --> 00:15:49,630
I just initialize the project I paste

00:15:45,490 --> 00:15:52,180
the URL this is really grainy but you

00:15:49,630 --> 00:15:55,360
can get the idea that I got the project

00:15:52,180 --> 00:15:59,790
right there and all I had to do is clone

00:15:55,360 --> 00:15:59,790
the repo and run the init command

00:16:02,960 --> 00:16:11,730
getting back to our presentation so once

00:16:08,760 --> 00:16:14,090
I have my stack up and running there are

00:16:11,730 --> 00:16:16,830
many ways how you can work with it so

00:16:14,090 --> 00:16:19,440
part of the CLI container one of the

00:16:16,830 --> 00:16:21,960
three containers in the stack that we

00:16:19,440 --> 00:16:25,590
have there in the CLI container we have

00:16:21,960 --> 00:16:28,170
PHP running and also have pretty much

00:16:25,590 --> 00:16:31,350
every tool you would ever need to work

00:16:28,170 --> 00:16:34,230
with the Google site so lots of supports

00:16:31,350 --> 00:16:39,330
also other CMS's as well not going to

00:16:34,230 --> 00:16:41,700
name them with Drupal con so you can run

00:16:39,330 --> 00:16:44,160
a any command inside of the container

00:16:41,700 --> 00:16:46,860
within exact whatever it is let's say

00:16:44,160 --> 00:16:50,670
you want to run composer install or - or

00:16:46,860 --> 00:16:54,180
triple console or I don't know golf for

00:16:50,670 --> 00:16:56,550
instance or you can also just enter into

00:16:54,180 --> 00:16:58,470
the CLI container and run those tools

00:16:56,550 --> 00:17:00,360
directly so again a quick demo of that

00:16:58,470 --> 00:17:03,330
since we already have the stack running

00:17:00,360 --> 00:17:03,720
here I can do the exact let's let's do

00:17:03,330 --> 00:17:07,440
this

00:17:03,720 --> 00:17:10,829
so with the files you can see it's my

00:17:07,440 --> 00:17:13,770
that's the project I copied there is a

00:17:10,829 --> 00:17:16,290
dark root folder where the rupal is so I

00:17:13,770 --> 00:17:21,600
can I can actually go ahead and switch

00:17:16,290 --> 00:17:28,170
into the dark root folder and then I can

00:17:21,600 --> 00:17:30,060
do the same with in exact LS away and

00:17:28,170 --> 00:17:33,360
this will run the same exact command but

00:17:30,060 --> 00:17:35,220
now inside of the container I don't know

00:17:33,360 --> 00:17:37,830
if you notice the random differences and

00:17:35,220 --> 00:17:40,530
that's the point because if I now go

00:17:37,830 --> 00:17:43,440
inside of the CLI container with the

00:17:40,530 --> 00:17:46,050
same bash commands I'm basically inside

00:17:43,440 --> 00:17:48,060
of this terminal where all of my tools

00:17:46,050 --> 00:17:51,300
already installed and they are the same

00:17:48,060 --> 00:17:54,510
exact versions and the same exact set of

00:17:51,300 --> 00:18:00,050
tools for anyone running this so I have

00:17:54,510 --> 00:18:03,910
my brush here I have my composure here

00:18:00,050 --> 00:18:08,140
all right yes

00:18:03,910 --> 00:18:09,940
and everything else so for comparison

00:18:08,140 --> 00:18:13,450
luckily I don't have any of those tools

00:18:09,940 --> 00:18:15,850
installed they are not there I don't

00:18:13,450 --> 00:18:18,130
have to install them my status provision

00:18:15,850 --> 00:18:20,250
there nothing is polluting my local

00:18:18,130 --> 00:18:22,840
machine I don't have to deal with

00:18:20,250 --> 00:18:25,930
version collision sword swishing

00:18:22,840 --> 00:18:28,030
versions it's all in there it's all per

00:18:25,930 --> 00:18:30,730
project every project can customize it

00:18:28,030 --> 00:18:40,150
the way they want it and everything is

00:18:30,730 --> 00:18:43,000
consistent within the Team Viewer

00:18:40,150 --> 00:18:46,150
configuration so this is another great

00:18:43,000 --> 00:18:50,470
example how we try to make it very

00:18:46,150 --> 00:18:52,480
simple and it's on the other side of the

00:18:50,470 --> 00:18:54,190
spectrums compared to running the init

00:18:52,480 --> 00:18:55,870
script where we kind of scripted

00:18:54,190 --> 00:18:58,710
everything and didn't have well actually

00:18:55,870 --> 00:19:00,910
yeah and didn't have to configure it in

00:18:58,710 --> 00:19:03,730
actually we had a lot of configuration

00:19:00,910 --> 00:19:06,970
there but that's done one time I can

00:19:03,730 --> 00:19:09,070
actually have instant environments and

00:19:06,970 --> 00:19:11,560
those will be full lamp stack

00:19:09,070 --> 00:19:14,110
environments with zero configuration

00:19:11,560 --> 00:19:17,440
with duxelle and I will be adding that

00:19:14,110 --> 00:19:20,650
default tacking position for for lamp of

00:19:17,440 --> 00:19:23,740
your Linux Apache MySQL PHP well I have

00:19:20,650 --> 00:19:31,060
to do for this game switching to our

00:19:23,740 --> 00:19:35,190
demo going couple levels up so I'm going

00:19:31,060 --> 00:19:35,190
to create a folder call it a low

00:19:35,490 --> 00:19:44,650
Baltimore switch into the folder there's

00:19:40,480 --> 00:19:48,520
nothing there I create a duxelle

00:19:44,650 --> 00:19:52,510
directory so there is that that

00:19:48,520 --> 00:19:55,930
directory and this is all dogs'll needs

00:19:52,510 --> 00:19:59,350
to know that this is a project fruit for

00:19:55,930 --> 00:20:00,970
some project now around up this is not

00:19:59,350 --> 00:20:02,560
the Enigma because I don't have the

00:20:00,970 --> 00:20:06,520
anything as yet there it's just up to

00:20:02,560 --> 00:20:07,990
start the stack itself and you can see

00:20:06,520 --> 00:20:10,810
it's dying containers to me it's

00:20:07,990 --> 00:20:14,770
starting the default lamp stack with PHP

00:20:10,810 --> 00:20:18,180
my sequel and apply to those CLI GB and

00:20:14,770 --> 00:20:24,100
web containers and I can

00:20:18,180 --> 00:20:27,730
open my browser window here and well

00:20:24,100 --> 00:20:30,640
that the PV estate now I reload it

00:20:27,730 --> 00:20:33,150
well it doesn't found focus there is no

00:20:30,640 --> 00:20:37,510
doc with really I probably should create

00:20:33,150 --> 00:20:41,740
something really dark with folder and

00:20:37,510 --> 00:20:44,680
maybe output some PHP info into dog food

00:20:41,740 --> 00:20:48,580
index dot PHP just to have something out

00:20:44,680 --> 00:20:51,280
there now we laud it this is my complete

00:20:48,580 --> 00:20:53,410
lamp stack with zero effort I didn't

00:20:51,280 --> 00:20:55,510
have to do anything for that because

00:20:53,410 --> 00:20:58,120
duxelle comes with a pre-configured

00:20:55,510 --> 00:21:01,210
stack which you don't have to do

00:20:58,120 --> 00:21:03,130
anything to to start using you can

00:21:01,210 --> 00:21:04,600
extend that going forward you can

00:21:03,130 --> 00:21:06,730
override some defaults you can go

00:21:04,600 --> 00:21:09,910
completely custom if you want to but

00:21:06,730 --> 00:21:13,270
this is like ground zero very easy to

00:21:09,910 --> 00:21:22,000
get instant stacks lamp stacks up and

00:21:13,270 --> 00:21:26,440
running so as I said you can go very

00:21:22,000 --> 00:21:30,520
simple you can go very custom we have a

00:21:26,440 --> 00:21:33,610
bunch of services available in the

00:21:30,520 --> 00:21:37,540
dogs'll library as well as any image you

00:21:33,610 --> 00:21:39,580
can find on daughter help because of and

00:21:37,540 --> 00:21:42,040
thanks to the micro service architecture

00:21:39,580 --> 00:21:45,940
you just grab a service you plug it into

00:21:42,040 --> 00:21:47,890
the configuration file you use it so in

00:21:45,940 --> 00:21:50,560
this case I want to add memcache to my

00:21:47,890 --> 00:21:54,370
configuration so all I have to do is

00:21:50,560 --> 00:21:56,980
define a service define the image I this

00:21:54,370 --> 00:21:59,770
image is freely available and docker hub

00:21:56,980 --> 00:22:02,560
I can also build my own and have it

00:21:59,770 --> 00:22:04,330
either private or public and maybe

00:22:02,560 --> 00:22:06,070
otherwise there is some configuration

00:22:04,330 --> 00:22:09,130
for this service like I want to set the

00:22:06,070 --> 00:22:11,890
memory limitation for for memcache and

00:22:09,130 --> 00:22:13,450
that's it I add it to my configuration

00:22:11,890 --> 00:22:16,420
file it's like downloading a module

00:22:13,450 --> 00:22:19,390
folder will plug it in run the update

00:22:16,420 --> 00:22:21,820
command and it it spins out the service

00:22:19,390 --> 00:22:23,860
if the image does not exist on my local

00:22:21,820 --> 00:22:25,600
computer yet it's going to pull it from

00:22:23,860 --> 00:22:27,790
the github so why do you need internet

00:22:25,600 --> 00:22:29,780
connection to that but once it's there

00:22:27,790 --> 00:22:31,610
or wants it in Watson

00:22:29,780 --> 00:22:32,960
once you have it in your continuous

00:22:31,610 --> 00:22:34,700
integration environment it doesn't have

00:22:32,960 --> 00:22:37,300
to download anything it will reuse that

00:22:34,700 --> 00:22:42,710
image and it will just updated seconds

00:22:37,300 --> 00:22:45,530
spin out that service some other notable

00:22:42,710 --> 00:22:47,600
features that I wanted to share there

00:22:45,530 --> 00:22:50,050
are a lot more but these are kind of

00:22:47,600 --> 00:22:53,810
cool so I wanted to talk about them

00:22:50,050 --> 00:22:57,530
first one is fin share so let's go back

00:22:53,810 --> 00:22:59,690
to our Drupal 8 site so imagine I'm

00:22:57,530 --> 00:23:06,050
working on a project and now I want to

00:22:59,690 --> 00:23:08,240
show it to a client or teammate and we

00:23:06,050 --> 00:23:09,170
are not in the same office so I could

00:23:08,240 --> 00:23:11,300
obviously use

00:23:09,170 --> 00:23:16,250
GoToMeeting or Skype or something else

00:23:11,300 --> 00:23:20,150
or I can also if I want to give them the

00:23:16,250 --> 00:23:22,190
ability to try themselves I can launch

00:23:20,150 --> 00:23:24,770
fin share what this is doing is

00:23:22,190 --> 00:23:28,250
launching a service called in and rock

00:23:24,770 --> 00:23:31,820
and angle created tunnel so it links

00:23:28,250 --> 00:23:35,990
this URL here from Internet to my local

00:23:31,820 --> 00:23:37,430
environment so without any effort I just

00:23:35,990 --> 00:23:40,480
exposed my local development environment

00:23:37,430 --> 00:23:40,480
on the Internet

00:23:41,410 --> 00:23:44,650
thank you

00:23:45,290 --> 00:23:51,850
another cool thing if you are familiar

00:23:47,120 --> 00:23:55,610
with Rush and aliases and rush you can

00:23:51,850 --> 00:23:57,920
and you're working with multiple

00:23:55,610 --> 00:24:01,730
projects and and this is one

00:23:57,920 --> 00:24:04,360
misconception that people quite often I

00:24:01,730 --> 00:24:07,400
see if you are working with multiple

00:24:04,360 --> 00:24:09,980
projects you still only need a single

00:24:07,400 --> 00:24:11,420
virtual machine that virtual machine on

00:24:09,980 --> 00:24:14,810
Mac and Windows on linux no

00:24:11,420 --> 00:24:16,760
virtualization you only need one virtual

00:24:14,810 --> 00:24:19,610
machine that we provision for you the

00:24:16,760 --> 00:24:21,350
dogs'll provisions and nothing else and

00:24:19,610 --> 00:24:23,090
it's very transparent to you you don't

00:24:21,350 --> 00:24:25,730
even have to think about it so running

00:24:23,090 --> 00:24:27,860
multiple projects if I check my project

00:24:25,730 --> 00:24:30,290
with here I can say I have maybe three

00:24:27,860 --> 00:24:33,470
projects here hello Baltimore Drupal 8

00:24:30,290 --> 00:24:34,820
in my client project they are all using

00:24:33,470 --> 00:24:37,850
the same virtual machine and I don't

00:24:34,820 --> 00:24:39,800
have to spin up new VMs like with

00:24:37,850 --> 00:24:41,630
vagrant I would have and these are all

00:24:39,800 --> 00:24:43,580
they they they can have different stack

00:24:41,630 --> 00:24:46,549
like this client project is use

00:24:43,580 --> 00:24:48,860
PHP 5 point 6 and our Drupal agent

00:24:46,549 --> 00:24:50,809
project is using PHP 7 I can have

00:24:48,860 --> 00:24:53,179
completely different stacking position

00:24:50,809 --> 00:24:56,619
running put in the same VM and they are

00:24:53,179 --> 00:24:58,999
still isolated and let's say I want to

00:24:56,619 --> 00:25:01,639
usually you have to be in the project

00:24:58,999 --> 00:25:03,769
directory to run a command but if I

00:25:01,639 --> 00:25:06,139
don't want to switch I can also do it

00:25:03,769 --> 00:25:08,720
like this I can use an alias let's say

00:25:06,139 --> 00:25:10,190
check the status of containers and maybe

00:25:08,720 --> 00:25:11,869
I want just to stop them so you can

00:25:10,190 --> 00:25:14,570
serve resources and through free up some

00:25:11,869 --> 00:25:17,739
memory so aliases is a cool thing when

00:25:14,570 --> 00:25:22,009
you start working with multiple projects

00:25:17,739 --> 00:25:24,519
then we have a set of commands to manage

00:25:22,009 --> 00:25:28,190
databases connecting to the database

00:25:24,519 --> 00:25:29,929
dumping or importing the backup back you

00:25:28,190 --> 00:25:34,909
can also connect with any tool you want

00:25:29,929 --> 00:25:36,559
to a database there is a random port

00:25:34,909 --> 00:25:38,720
that is being assigned to the abyss

00:25:36,559 --> 00:25:40,929
container and you can access my sequel

00:25:38,720 --> 00:25:44,179
to any tool you want from your local

00:25:40,929 --> 00:25:48,230
custom commands the init command is an

00:25:44,179 --> 00:25:50,359
example of that you can like quite often

00:25:48,230 --> 00:25:54,409
use case if we have maybe running a PHP

00:25:50,359 --> 00:25:56,419
code sniffer you just created commands

00:25:54,409 --> 00:25:59,570
and it's basically just a shell script

00:25:56,419 --> 00:26:01,100
but you can use any other interpreter

00:25:59,570 --> 00:26:06,590
you want to know to use note you want

00:26:01,100 --> 00:26:08,419
golf well go for it and you script

00:26:06,590 --> 00:26:10,519
whatever you want there and then you can

00:26:08,419 --> 00:26:12,710
hit that code that custom commands exist

00:26:10,519 --> 00:26:15,019
in the in the project configuration so

00:26:12,710 --> 00:26:18,470
everyone gets it and everyone can you

00:26:15,019 --> 00:26:20,929
start using it and another cool feature

00:26:18,470 --> 00:26:24,429
I wanted to mention which is a more

00:26:20,929 --> 00:26:26,840
advanced use case but very nice one for

00:26:24,429 --> 00:26:29,450
occasions like Drupal con and trainings

00:26:26,840 --> 00:26:31,609
different conferences is the offline

00:26:29,450 --> 00:26:33,559
installation mode and we actually

00:26:31,609 --> 00:26:35,539
introduced the feature specific before

00:26:33,559 --> 00:26:39,889
for doctor Khan

00:26:35,539 --> 00:26:42,559
sorry Drupal con targetable you can use

00:26:39,889 --> 00:26:47,929
the same online installer the one-line

00:26:42,559 --> 00:26:50,330
thing but having a package that is we we

00:26:47,929 --> 00:26:52,070
download on a USB Drive you run it in

00:26:50,330 --> 00:26:53,659
that directory where everything is

00:26:52,070 --> 00:26:56,299
downloaded and the Installer is smart

00:26:53,659 --> 00:26:57,350
enough to pick these files like

00:26:56,299 --> 00:26:59,570
VirtualBox

00:26:57,350 --> 00:27:02,600
our tools all of the necessary docker

00:26:59,570 --> 00:27:04,250
images from that drive and you don't

00:27:02,600 --> 00:27:06,919
download anything from Internet so we

00:27:04,250 --> 00:27:09,679
just still download maybe 200 kilobytes

00:27:06,919 --> 00:27:11,450
of the Installer itself but then it

00:27:09,679 --> 00:27:13,610
picks from the USB Drive and installer

00:27:11,450 --> 00:27:15,530
it installs everything so you don't have

00:27:13,610 --> 00:27:17,360
to run provisioning that both gigabytes

00:27:15,530 --> 00:27:20,210
of data from internet you can have to

00:27:17,360 --> 00:27:26,080
wait for it it just works offline as

00:27:20,210 --> 00:27:29,809
well so a quick recap to a successful

00:27:26,080 --> 00:27:31,760
way of on boiling people and managing

00:27:29,809 --> 00:27:34,580
your development environments it have to

00:27:31,760 --> 00:27:36,650
standardize without standards it works

00:27:34,580 --> 00:27:40,100
on my local we'll never you will never

00:27:36,650 --> 00:27:42,169
escape that switch from container from

00:27:40,100 --> 00:27:43,909
games to containers for many reasons

00:27:42,169 --> 00:27:46,490
that were where you discussed no

00:27:43,909 --> 00:27:49,549
virtualization on Linux very fast easy

00:27:46,490 --> 00:27:53,929
to swap components micro service

00:27:49,549 --> 00:27:56,630
architecture and automates automates all

00:27:53,929 --> 00:27:59,179
limits really this is probably the most

00:27:56,630 --> 00:28:03,230
important one and everything before that

00:27:59,179 --> 00:28:05,450
was just to link but this idea of

00:28:03,230 --> 00:28:07,730
everything has to be automated is what

00:28:05,450 --> 00:28:10,370
we will bring you success and this is

00:28:07,730 --> 00:28:11,600
what we can apply in local then you can

00:28:10,370 --> 00:28:14,059
take it to continuous integration

00:28:11,600 --> 00:28:15,700
because exactly the same workflow and

00:28:14,059 --> 00:28:18,020
exactly the same tools with containers

00:28:15,700 --> 00:28:21,080
working your continuous integration as

00:28:18,020 --> 00:28:23,630
well and and the same you get the same

00:28:21,080 --> 00:28:27,650
results regardless of where you use this

00:28:23,630 --> 00:28:30,169
set up find more information on our

00:28:27,650 --> 00:28:32,270
website documentation you have people

00:28:30,169 --> 00:28:37,130
and we have a community support chat on

00:28:32,270 --> 00:28:40,010
Gator and I know we're just in time to

00:28:37,130 --> 00:28:42,049
finish so I'll take some support a

00:28:40,010 --> 00:28:44,360
couple questions but there will be a

00:28:42,049 --> 00:28:48,530
boss in half an hour right after the

00:28:44,360 --> 00:28:51,260
break in room 311 you're always welcome

00:28:48,530 --> 00:28:55,309
to come join me as we'll we'll have a

00:28:51,260 --> 00:28:57,940
full hour to discuss vision and have a

00:28:55,309 --> 00:28:57,940
conversations

00:29:03,890 --> 00:29:08,940
Linnea thanks for the presentation a

00:29:06,300 --> 00:29:11,490
quick question about the thin layer

00:29:08,940 --> 00:29:15,600
virtualization if you're on Mac OS or

00:29:11,490 --> 00:29:17,820
Windows you have any automation for that

00:29:15,600 --> 00:29:19,650
or does the VirtualBox piece have to be

00:29:17,820 --> 00:29:22,050
set up manually so the Installer

00:29:19,650 --> 00:29:23,940
automates all of that once I run the

00:29:22,050 --> 00:29:26,760
installer even social VirtualBox and

00:29:23,940 --> 00:29:29,460
provisions vvm it solves it ultimate is

00:29:26,760 --> 00:29:30,960
taken care for you I've been using Doxil

00:29:29,460 --> 00:29:33,630
now for a month or two and it's great

00:29:30,960 --> 00:29:38,790
but I still wonder what is the name mean

00:29:33,630 --> 00:29:44,280
and what is fin me why dogs'll yeah so

00:29:38,790 --> 00:29:46,500
doctor is like that fishy finks or whale

00:29:44,280 --> 00:29:49,890
whatever so when we were picking the

00:29:46,500 --> 00:29:53,480
name we had an idea of docker fin like

00:29:49,890 --> 00:29:54,720
the thing that controls it and then

00:29:53,480 --> 00:29:58,260
unblocker

00:29:54,720 --> 00:29:59,880
out like a dog salty and bucks off a

00:29:58,260 --> 00:30:04,340
locker and then we can bind them and

00:29:59,880 --> 00:30:06,540
ended up with boxes something like that

00:30:04,340 --> 00:30:09,360
when you're imagining you know multiple

00:30:06,540 --> 00:30:11,280
projects on your local stocks will

00:30:09,360 --> 00:30:13,050
automatically handle conflicts with like

00:30:11,280 --> 00:30:14,730
ports I'm sorry can you speak up cuz I'm

00:30:13,050 --> 00:30:17,070
sorry when you're managing multiple

00:30:14,730 --> 00:30:19,110
projects on your local this docks will

00:30:17,070 --> 00:30:20,970
automatically handle conflicts between

00:30:19,110 --> 00:30:23,160
the different containers with like you

00:30:20,970 --> 00:30:25,380
know there are no conflicts they are all

00:30:23,160 --> 00:30:27,690
isolated the only content you can run

00:30:25,380 --> 00:30:29,550
into is when you name the folder the

00:30:27,690 --> 00:30:32,070
same or you use the same virtual host

00:30:29,550 --> 00:30:34,140
and then yes it handles it it will warn

00:30:32,070 --> 00:30:36,330
you that there is already project using

00:30:34,140 --> 00:30:38,760
the same virtual Coast and it will offer

00:30:36,330 --> 00:30:41,220
you to stop that project for resolve we

00:30:38,760 --> 00:30:44,490
didn't be conflict but but in terms of

00:30:41,220 --> 00:30:47,370
pack itself its isolated you will never

00:30:44,490 --> 00:30:49,500
run into oh I have this PHP version in

00:30:47,370 --> 00:30:52,050
one project and all PHP version another

00:30:49,500 --> 00:30:54,540
project know it's isolated containers

00:30:52,050 --> 00:30:58,340
are very isolated so null conflicts and

00:30:54,540 --> 00:30:58,340
from the perspective of the actual tools

00:30:59,130 --> 00:31:05,250
I couldn't tell from what I was seeing

00:31:02,910 --> 00:31:06,900
anybody to pick up I'm sorry I couldn't

00:31:05,250 --> 00:31:10,140
tell from what I've seen but are you I'm

00:31:06,900 --> 00:31:12,000
going directly to the port's or was it

00:31:10,140 --> 00:31:14,910
going to a proxy of some sort

00:31:12,000 --> 00:31:18,179
so with dogs'll we do have a virtual

00:31:14,910 --> 00:31:20,940
host proxy service and this is what

00:31:18,179 --> 00:31:24,630
allows you to allows us through our run

00:31:20,940 --> 00:31:27,570
multiple projects multiple stacks and

00:31:24,630 --> 00:31:28,799
still using the same port 80 so yeah

00:31:27,570 --> 00:31:32,700
there is an engine active throughout

00:31:28,799 --> 00:31:35,340
request that's great thanks all right

00:31:32,700 --> 00:31:37,590
thanks for the presentation um your demo

00:31:35,340 --> 00:31:39,900
showed setting up from a clean slate

00:31:37,590 --> 00:31:43,470
starting a new project can this be used

00:31:39,900 --> 00:31:45,030
to like pull an existing project that

00:31:43,470 --> 00:31:46,590
will then also pull a copy the

00:31:45,030 --> 00:31:49,200
production database yeah of course

00:31:46,590 --> 00:31:51,270
well you you can you can ensure you you

00:31:49,200 --> 00:31:55,679
can integrate dogs'll into any existing

00:31:51,270 --> 00:31:58,169
project very easily the minimal setup is

00:31:55,679 --> 00:32:00,120
basically the dot blog that dot dogs'll

00:31:58,169 --> 00:32:02,520
folder and from there read on

00:32:00,120 --> 00:32:07,350
documentation how you can extend and

00:32:02,520 --> 00:32:08,970
customize it thanks hi could you speak a

00:32:07,350 --> 00:32:12,750
little bit to how you use Doc's alone

00:32:08,970 --> 00:32:14,970
like production you know with certain

00:32:12,750 --> 00:32:17,640
hosting companies like AWS or suck it up

00:32:14,970 --> 00:32:19,289
a little please how use Doxil in

00:32:17,640 --> 00:32:21,360
production like with aw how we're not

00:32:19,289 --> 00:32:23,190
using dogs'll in production so I had an

00:32:21,360 --> 00:32:25,940
example that you can use the same

00:32:23,190 --> 00:32:29,309
container setup and ideas in production

00:32:25,940 --> 00:32:32,520
so far it's for local developments we do

00:32:29,309 --> 00:32:34,830
use it for continuous integration so we

00:32:32,520 --> 00:32:36,750
have our own like Pantheon has multi

00:32:34,830 --> 00:32:39,360
depth we have the same exact thing and

00:32:36,750 --> 00:32:41,640
it's very easy from local to CI it's

00:32:39,360 --> 00:32:45,000
just one step because containers are

00:32:41,640 --> 00:32:46,110
portable so we can run the same thing on

00:32:45,000 --> 00:32:53,039
a linux server in the cloud

00:32:46,110 --> 00:32:55,830
cool thanks I've built with VMs and with

00:32:53,039 --> 00:32:59,100
like docker compose I've had like a lot

00:32:55,830 --> 00:33:01,650
of trouble with the share on Linux and

00:32:59,100 --> 00:33:04,770
Mac sorry on Windows and Mac machines

00:33:01,650 --> 00:33:09,030
have you had any are you doing anything

00:33:04,770 --> 00:33:12,410
to mitigate the the i/o latency but so

00:33:09,030 --> 00:33:15,290
on Mac and Windows we're still

00:33:12,410 --> 00:33:16,640
sharing the same challenges with virtual

00:33:15,290 --> 00:33:19,700
machines you can obviously keep your

00:33:16,640 --> 00:33:21,680
sources inside of the container and get

00:33:19,700 --> 00:33:24,320
native performance but that's not the

00:33:21,680 --> 00:33:27,350
based workflow for developers so what we

00:33:24,320 --> 00:33:30,140
do on Mac will use NFS and we fine-tune

00:33:27,350 --> 00:33:32,600
it so the overhead is about 10% on that

00:33:30,140 --> 00:33:34,580
latency which is pretty reasonable like

00:33:32,600 --> 00:33:38,150
I don't notice it on my Mac on Windows

00:33:34,580 --> 00:33:43,010
we use samba Windows File Sharing which

00:33:38,150 --> 00:33:44,960
is slower than NFS but that's also what

00:33:43,010 --> 00:33:46,670
docker uses with blocker from Windows

00:33:44,960 --> 00:33:48,350
like if there is still no better

00:33:46,670 --> 00:33:50,720
solution for Windows unfortunately

00:33:48,350 --> 00:33:52,430
unlike you cannot eat the better

00:33:50,720 --> 00:33:55,640
approach would be if you put your

00:33:52,430 --> 00:33:57,260
sources inside of the container but then

00:33:55,640 --> 00:33:59,330
you get with deal with challenges well

00:33:57,260 --> 00:34:02,120
how do you edit them then how do you use

00:33:59,330 --> 00:34:04,700
your ID to connect and debug and such

00:34:02,120 --> 00:34:07,280
yeah well actually by actually yeah exit

00:34:04,700 --> 00:34:10,610
bug as well but and since you mentioned

00:34:07,280 --> 00:34:13,610
this we do have documentation for my

00:34:10,610 --> 00:34:15,470
final documentation for 0x debug

00:34:13,610 --> 00:34:20,360
configuration but it's still there like

00:34:15,470 --> 00:34:23,330
how how to click those two buttons and

00:34:20,360 --> 00:34:25,190
teach historians in your chrome to get

00:34:23,330 --> 00:34:26,840
it up working yes there are a lot of

00:34:25,190 --> 00:34:29,020
tools that we integrate into this thing

00:34:26,840 --> 00:34:33,200
thank you welcome

00:34:29,020 --> 00:34:34,730
umm the duck sold yeah mole it looked a

00:34:33,200 --> 00:34:36,980
lot like a docker compose was that

00:34:34,730 --> 00:34:39,410
that's exactly that thing the only

00:34:36,980 --> 00:34:41,740
difference is that we we start we

00:34:39,410 --> 00:34:44,570
started with just pure docker compose

00:34:41,740 --> 00:34:47,150
but then since we wanted to provide this

00:34:44,570 --> 00:34:48,710
default tax and then all let you

00:34:47,150 --> 00:34:51,340
override it usually the write a lot of

00:34:48,710 --> 00:34:54,020
llamó files which are in fact just

00:34:51,340 --> 00:34:57,710
docker compose camel files that we

00:34:54,020 --> 00:35:00,260
stitch together but in the end it is

00:34:57,710 --> 00:35:03,080
just the complete docker compose yeah no

00:35:00,260 --> 00:35:05,180
file we don't extend it with anything in

00:35:03,080 --> 00:35:07,790
addition to that it's pure docker

00:35:05,180 --> 00:35:10,460
compose so in your CI environment you

00:35:07,790 --> 00:35:12,580
install Doxil as well to interpret this

00:35:10,460 --> 00:35:15,560
stuff or do you somehow like X yes we

00:35:12,580 --> 00:35:18,200
yeah so Doxil has to be installed in CI

00:35:15,560 --> 00:35:20,960
as well okay so you can't use like the

00:35:18,200 --> 00:35:23,990
built docker compose instead like in the

00:35:20,960 --> 00:35:24,920
CIA you could eventually compile it into

00:35:23,990 --> 00:35:27,349
a single document

00:35:24,920 --> 00:35:29,059
those file and use like that but the

00:35:27,349 --> 00:35:30,650
reason for out there is no reason for

00:35:29,059 --> 00:35:32,900
that eventually when you go into the

00:35:30,650 --> 00:35:34,549
action yeah it doesn't make sense to to

00:35:32,900 --> 00:35:35,839
compile the docker compose llamó but

00:35:34,549 --> 00:35:40,730
that's not the use case we're targeting

00:35:35,839 --> 00:35:42,440
right now with voxel okay okay last

00:35:40,730 --> 00:35:44,210
question yeah sorry

00:35:42,440 --> 00:35:45,500
so one thing I noticed with vagrant

00:35:44,210 --> 00:35:48,980
occasionally is I run into weird

00:35:45,500 --> 00:35:52,190
instances where NFS file permissions

00:35:48,980 --> 00:35:54,950
cause create havoc and so your page P

00:35:52,190 --> 00:35:57,230
can't write to a file so let's say T see

00:35:54,950 --> 00:35:59,839
PDF you're creating junk files right I

00:35:57,230 --> 00:36:03,890
know with you ever yeah so have you had

00:35:59,839 --> 00:36:07,279
those issues so we do we do a smart move

00:36:03,890 --> 00:36:10,309
here when the CLI containers start we

00:36:07,279 --> 00:36:14,180
tell it what is the user ID of the host

00:36:10,309 --> 00:36:17,029
user and it just inherited and we switch

00:36:14,180 --> 00:36:20,119
IDs so the user inside of the CLI

00:36:17,029 --> 00:36:22,579
container is the same user as you have

00:36:20,119 --> 00:36:26,059
it on your host so files created by the

00:36:22,579 --> 00:36:29,240
user by PHP whatever tools get the same

00:36:26,059 --> 00:36:31,299
ownership the user and group so there

00:36:29,240 --> 00:36:33,019
are no complex in terms of permissions

00:36:31,299 --> 00:36:35,240
thank you okay

00:36:33,019 --> 00:36:37,430
thank you everyone this is my first

00:36:35,240 --> 00:36:40,039
rupal ton presentation so feedback is

00:36:37,430 --> 00:36:42,500
very valuable please rate this session

00:36:40,039 --> 00:36:44,539
and come to the block and half an hour

00:36:42,500 --> 00:36:59,500
room 311 if you have more questions

00:36:44,539 --> 00:37:04,960
thank you - I guess I'll find someone

00:36:59,500 --> 00:37:04,960

YouTube URL: https://www.youtube.com/watch?v=jev2EW2hzdY


