Title: DrupalCon Baltimore 2017: 100% Observability
Publication date: 2017-04-26
Playlist: DrupalCon Baltimore 2017
Description: 
	The only way to avoid crippling issues and resolve critical outages is with complete system and application visibility. But how do you ensure 100% observability and identify potential blind spots? Can you rely on Drupal's Watchdog to give you the information you need? (Spoiler: no!) With the growing number of monitoring projects and hundreds of monitoring services vying for your attention and business, how do you balance full coverage with limited budgets?


In this session we’ll break down the expansive monitoring landscape into 5 categories and provide a framework to help you ensure full coverage. we’ll also touch on why these categories are important to your business and share the top criteria to consider when evaluating your options.
Captions: 
	00:00:00,030 --> 00:00:05,689
right I think we're just about at time

00:00:08,059 --> 00:00:15,170
so I'm just going to go ahead and go and

00:00:11,420 --> 00:00:17,190
hopefully there's no too late stragglers

00:00:15,170 --> 00:00:19,590
don't miss out on the important things

00:00:17,190 --> 00:00:20,820
like well not really important things

00:00:19,590 --> 00:00:23,330
like about me

00:00:20,820 --> 00:00:26,189
so I'm Jason welcome this is 100%

00:00:23,330 --> 00:00:27,539
observability I'm a technical writer and

00:00:26,189 --> 00:00:29,880
evangelist at data dog

00:00:27,539 --> 00:00:31,830
I do Docs and talks is how I shorten

00:00:29,880 --> 00:00:33,630
that's the documentation and I travel

00:00:31,830 --> 00:00:35,579
and talk I'm also a DevOps days

00:00:33,630 --> 00:00:38,489
organizer so I help with the global team

00:00:35,579 --> 00:00:40,860
as well as I helped organize DevOps days

00:00:38,489 --> 00:00:42,390
Portland so if you're into DevOps you

00:00:40,860 --> 00:00:45,450
should definitely check out your local

00:00:42,390 --> 00:00:47,820
DevOps days event I've also been a

00:00:45,450 --> 00:00:49,829
Drupal contractor for a while so help

00:00:47,820 --> 00:00:51,210
select sessions for this conference

00:00:49,829 --> 00:00:54,510
hopefully you've enjoyed them

00:00:51,210 --> 00:00:56,309
I'm also travel hacker so I get on

00:00:54,510 --> 00:00:59,039
planes and fly around to really nowhere

00:00:56,309 --> 00:01:00,629
in particular just for miles and then

00:00:59,039 --> 00:01:02,609
occasionally when I do get off and visit

00:01:00,629 --> 00:01:07,110
places I like to find interesting whisky

00:01:02,609 --> 00:01:09,960
on Twitter I'm get bisect I also have an

00:01:07,110 --> 00:01:12,180
email Jason yet data dog HQ if at any

00:01:09,960 --> 00:01:13,619
time even after this you think of a

00:01:12,180 --> 00:01:15,420
question and you're like I wonder about

00:01:13,619 --> 00:01:18,509
that feel free to email me or tweet at

00:01:15,420 --> 00:01:21,000
me also if you are in the keynote this

00:01:18,509 --> 00:01:23,220
morning and you stayed through Q&A I

00:01:21,000 --> 00:01:26,640
might also be known as Preston so or

00:01:23,220 --> 00:01:30,030
David Wang so you can tweet at them also

00:01:26,640 --> 00:01:32,369
it's at Preston so and at eating EI TI

00:01:30,030 --> 00:01:34,259
ng s feel free to just tweet at them

00:01:32,369 --> 00:01:39,119
about this session about how great you

00:01:34,259 --> 00:01:41,460
thought they were that'd be amazing is

00:01:39,119 --> 00:01:43,710
have people heard of data dog just quick

00:01:41,460 --> 00:01:46,320
show hands anybody just a few people

00:01:43,710 --> 00:01:48,720
cool and so for those who haven't dated

00:01:46,320 --> 00:01:50,970
dog is a fast-paced monitoring platform

00:01:48,720 --> 00:01:53,100
give you an idea of the scale of what we

00:01:50,970 --> 00:01:56,040
handle we do 15 million data points per

00:01:53,100 --> 00:01:57,630
second which comes to over trillion data

00:01:56,040 --> 00:02:00,659
points per day so we do a lot of

00:01:57,630 --> 00:02:02,520
monitoring for a lot of people we have

00:02:00,659 --> 00:02:04,469
open source clients and libraries and a

00:02:02,520 --> 00:02:06,899
bunch of other cool stuff I do have to

00:02:04,469 --> 00:02:09,539
do the thing that we are hiring we don't

00:02:06,899 --> 00:02:10,830
do any drupal but if you're in ops or

00:02:09,539 --> 00:02:13,430
you're looking for really cool

00:02:10,830 --> 00:02:15,500
challenges handling tons of data or

00:02:13,430 --> 00:02:17,060
hiring all over the place for all sorts

00:02:15,500 --> 00:02:20,269
of positions sres

00:02:17,060 --> 00:02:22,310
ops people front end Dead's things like

00:02:20,269 --> 00:02:24,019
that so definitely checked out that link

00:02:22,310 --> 00:02:26,390
if you're interested in a new job and

00:02:24,019 --> 00:02:29,090
it's data dog HQ on Twitter not data dog

00:02:26,390 --> 00:02:30,980
data dog is a black Labrador Retriever

00:02:29,090 --> 00:02:32,959
who will make fun of you if you tweet at

00:02:30,980 --> 00:02:35,389
data dog so again don't tweet at data

00:02:32,959 --> 00:02:37,099
dog tweet at app press and so or at

00:02:35,389 --> 00:02:41,239
eating's and tell them how great the

00:02:37,099 --> 00:02:42,769
session is a data dog one of the things

00:02:41,239 --> 00:02:44,480
with monitoring is you want a lot of

00:02:42,769 --> 00:02:47,840
integrations and we have a whole ton of

00:02:44,480 --> 00:02:50,720
stuff simply because if you're involved

00:02:47,840 --> 00:02:53,120
in any sort of text even like drupal

00:02:50,720 --> 00:02:54,980
related we all face this right there's

00:02:53,120 --> 00:02:56,000
just so much tech out there you can go

00:02:54,980 --> 00:02:58,909
down to the X to the hall and you'll

00:02:56,000 --> 00:03:01,579
meet a bunch of these people but there's

00:02:58,909 --> 00:03:04,639
an explosion of stuff that's going on we

00:03:01,579 --> 00:03:07,310
live in this fantastic period of time in

00:03:04,639 --> 00:03:10,219
tech where everyone's creating really

00:03:07,310 --> 00:03:12,650
cool stuff and that comes to monitoring

00:03:10,219 --> 00:03:14,659
as well right so when we think of all

00:03:12,650 --> 00:03:16,760
the things that are out there how we can

00:03:14,659 --> 00:03:19,519
monitor our systems and our websites and

00:03:16,760 --> 00:03:21,979
applications there's just a ton of stuff

00:03:19,519 --> 00:03:23,449
and if you talk to any of the vendors

00:03:21,979 --> 00:03:24,769
will tell you that they monitor it all

00:03:23,449 --> 00:03:26,870
and you just need their thing and you

00:03:24,769 --> 00:03:29,419
should just pay them money or if you're

00:03:26,870 --> 00:03:30,799
involved in open source then you have

00:03:29,419 --> 00:03:31,909
all these tools and you're like what do

00:03:30,799 --> 00:03:33,979
I need to put together so that's

00:03:31,909 --> 00:03:35,930
essentially why I wrote this talk right

00:03:33,979 --> 00:03:38,720
there's just too much so let's try to

00:03:35,930 --> 00:03:39,829
make some sense of the monitoring

00:03:38,720 --> 00:03:41,569
systems out there whether they're

00:03:39,829 --> 00:03:43,310
services whether they're open source so

00:03:41,569 --> 00:03:46,729
that we we can actually get some full

00:03:43,310 --> 00:03:48,139
coverage but before we do we really

00:03:46,729 --> 00:03:50,989
ought to talk about how we should think

00:03:48,139 --> 00:03:52,370
about metrics and the you know what

00:03:50,989 --> 00:03:53,930
do we need to be gathering how do we

00:03:52,370 --> 00:03:56,060
need to think about the data that we're

00:03:53,930 --> 00:03:57,769
gathering and there's really four good

00:03:56,060 --> 00:04:00,139
qualities of metrics that you should

00:03:57,769 --> 00:04:02,290
keep in mind the first of those is that

00:04:00,139 --> 00:04:05,060
they have to be well understood

00:04:02,290 --> 00:04:07,099
obviously if I understand a metric and

00:04:05,060 --> 00:04:08,900
you don't understand it or someone else

00:04:07,099 --> 00:04:11,689
in our organization doesn't understand

00:04:08,900 --> 00:04:14,810
it then it's completely useless a great

00:04:11,689 --> 00:04:17,239
example of this is the Mars orbiter I

00:04:14,810 --> 00:04:20,090
love this example is anyone familiar

00:04:17,239 --> 00:04:22,880
with the Mars orbiter yeah I saw one

00:04:20,090 --> 00:04:25,669
hand the Mars orbiter for those who

00:04:22,880 --> 00:04:27,330
don't know isn't more orbiting Mars so

00:04:25,669 --> 00:04:29,430
the Mars orbiter was created

00:04:27,330 --> 00:04:32,400
in collaboration between NASA and

00:04:29,430 --> 00:04:35,150
Lockheed Martin NASA traditionally uses

00:04:32,400 --> 00:04:38,099
metric numbers things like kilograms

00:04:35,150 --> 00:04:39,629
kilometers things like that and Lockheed

00:04:38,099 --> 00:04:41,849
Martin being an American company

00:04:39,629 --> 00:04:45,000
traditionally uses Imperial numbers so

00:04:41,849 --> 00:04:48,360
miles pounds feet inches numbers like

00:04:45,000 --> 00:04:50,819
that nobody bothered marking what units

00:04:48,360 --> 00:04:52,770
things were on one of their orbital

00:04:50,819 --> 00:04:55,319
calculations everyone just assumed they

00:04:52,770 --> 00:04:56,759
were all on the same page and obviously

00:04:55,319 --> 00:04:59,849
their data was not well understood

00:04:56,759 --> 00:05:03,180
because the Mars orbiter has crashed

00:04:59,849 --> 00:05:04,860
into Mars so it's very key to understand

00:05:03,180 --> 00:05:06,360
that what sort of metrics you're using

00:05:04,860 --> 00:05:08,280
what sort of numbers you're using get

00:05:06,360 --> 00:05:10,080
everybody on the same page and as we

00:05:08,280 --> 00:05:11,849
dive into some of the monitoring

00:05:10,080 --> 00:05:13,530
solutions out there this will come up

00:05:11,849 --> 00:05:17,819
and be one of the ways that we evaluate

00:05:13,530 --> 00:05:19,590
things the second is that your metrics

00:05:17,819 --> 00:05:21,840
need to be sufficiently granular so I

00:05:19,590 --> 00:05:25,190
love this this is from the Olympics I

00:05:21,840 --> 00:05:27,840
guess that was last year down in Rio

00:05:25,190 --> 00:05:30,629
this is the some of the numbers from the

00:05:27,840 --> 00:05:33,270
metal race for the men's 50 meter

00:05:30,629 --> 00:05:35,009
freestyle it's it's really cool I enjoy

00:05:33,270 --> 00:05:36,990
it because it's super fast and as we can

00:05:35,009 --> 00:05:39,630
see hopefully those numbers aren't too

00:05:36,990 --> 00:05:41,669
cutoff on the screen but everybody

00:05:39,630 --> 00:05:44,069
except for the last guy did it in 21

00:05:41,669 --> 00:05:46,319
seconds so whole seconds are our

00:05:44,069 --> 00:05:48,779
granularity then this is the Special

00:05:46,319 --> 00:05:51,090
Olympics everybody wins right we

00:05:48,779 --> 00:05:53,520
understand intrinsically that

00:05:51,090 --> 00:05:55,919
granularity matters so for the Olympics

00:05:53,520 --> 00:05:58,830
we do it to hundreds of a second and so

00:05:55,919 --> 00:06:01,379
there are there's one tie here there was

00:05:58,830 --> 00:06:02,729
a tie for sixth place but similarly with

00:06:01,379 --> 00:06:04,349
the metrics that we gather and as we

00:06:02,729 --> 00:06:07,020
talk about this different things that we

00:06:04,349 --> 00:06:09,810
need to monitor our granularity will

00:06:07,020 --> 00:06:11,940
matter significantly depending on what

00:06:09,810 --> 00:06:14,009
we're talking about so keeping in mind

00:06:11,940 --> 00:06:16,259
that we need things to be sufficiently

00:06:14,009 --> 00:06:20,099
granular for what we desire to get out

00:06:16,259 --> 00:06:21,870
of them the third property that we need

00:06:20,099 --> 00:06:24,569
from all our metrics is that they have

00:06:21,870 --> 00:06:26,759
to be tagged in filterable tagging

00:06:24,569 --> 00:06:29,690
filterable the the important thing here

00:06:26,759 --> 00:06:32,969
is if we're generating a lot of data

00:06:29,690 --> 00:06:34,770
even not at the level of data dogs you

00:06:32,969 --> 00:06:36,839
know trillions of data points a day but

00:06:34,770 --> 00:06:38,310
you are all generating a ton of data

00:06:36,839 --> 00:06:40,090
you're generating more data than you

00:06:38,310 --> 00:06:42,190
ever have before

00:06:40,090 --> 00:06:43,810
and that metric data you need to be able

00:06:42,190 --> 00:06:45,580
to make sense of it and one way is

00:06:43,810 --> 00:06:47,320
tagging filtering and we'll see you

00:06:45,580 --> 00:06:49,510
later how this becomes important but

00:06:47,320 --> 00:06:51,669
generally the idea is if you don't have

00:06:49,510 --> 00:06:53,680
that metadata around the metrics that

00:06:51,669 --> 00:06:58,210
you're gathering then it's going to be

00:06:53,680 --> 00:06:59,919
much less useful and then finally is

00:06:58,210 --> 00:07:02,050
that your metrics need to be long-lived

00:06:59,919 --> 00:07:03,610
so as you think about your metrics

00:07:02,050 --> 00:07:05,639
collection you need to be thinking about

00:07:03,610 --> 00:07:07,960
how long you need to store things

00:07:05,639 --> 00:07:09,729
storing things has different properties

00:07:07,960 --> 00:07:12,490
a lot of times you're storing things to

00:07:09,729 --> 00:07:14,380
find trends oftentimes you're storing

00:07:12,490 --> 00:07:16,120
things so you can have historical

00:07:14,380 --> 00:07:17,710
reference sometimes you're storing

00:07:16,120 --> 00:07:19,450
things because computers need that

00:07:17,710 --> 00:07:21,639
history as well so that they can start

00:07:19,450 --> 00:07:24,940
to make some predictions so we'll dive

00:07:21,639 --> 00:07:27,430
into that a little bit later as well so

00:07:24,940 --> 00:07:30,010
with those four key properties of being

00:07:27,430 --> 00:07:32,020
well understood sufficiently granular

00:07:30,010 --> 00:07:33,940
tagged and filterable and long lived

00:07:32,020 --> 00:07:38,080
let's try to make sense of some of this

00:07:33,940 --> 00:07:40,090
craziness that we have and the way that

00:07:38,080 --> 00:07:42,370
I like to do that is to start to think

00:07:40,090 --> 00:07:44,229
of our application stack right let's

00:07:42,370 --> 00:07:46,810
think of the things that we run the

00:07:44,229 --> 00:07:49,630
technology that we run that makes up an

00:07:46,810 --> 00:07:51,070
application so obviously if we're if

00:07:49,630 --> 00:07:52,900
we're drilling down it starts with the

00:07:51,070 --> 00:07:55,900
client it's our end users how do they

00:07:52,900 --> 00:07:58,300
interact with our Drupal sites or our

00:07:55,900 --> 00:08:00,330
applications earlier this morning in the

00:07:58,300 --> 00:08:02,500
keynote we saw juries talk about voice

00:08:00,330 --> 00:08:04,810
communications right being able to have

00:08:02,500 --> 00:08:08,560
a chat bot into Drupal or being able to

00:08:04,810 --> 00:08:10,539
have a you know like an Alexa voice kind

00:08:08,560 --> 00:08:12,639
of skill into Drupal so we need to think

00:08:10,539 --> 00:08:16,570
about how do we monitor what we would

00:08:12,639 --> 00:08:18,070
consider the client side and then we're

00:08:16,570 --> 00:08:20,169
all here at Drupal con so we're very

00:08:18,070 --> 00:08:23,050
familiar with applications like Drupal

00:08:20,169 --> 00:08:25,720
things that run traditionally as backend

00:08:23,050 --> 00:08:27,310
code or applications on servers that's

00:08:25,720 --> 00:08:29,620
pretty straightforward if we think of

00:08:27,310 --> 00:08:31,180
applications and then finally the

00:08:29,620 --> 00:08:33,250
infrastructure and infrastructure is

00:08:31,180 --> 00:08:34,750
really great I love the age that we're

00:08:33,250 --> 00:08:35,700
in now because infrastructure is getting

00:08:34,750 --> 00:08:38,289
totally crazy

00:08:35,700 --> 00:08:41,349
you obviously have things like hosted

00:08:38,289 --> 00:08:43,570
cloud providers Amazon Google Microsoft

00:08:41,349 --> 00:08:46,630
Azure but then you've got cool things

00:08:43,570 --> 00:08:48,790
like soccer and kubernetes and mesas

00:08:46,630 --> 00:08:50,709
that run containers so we have to start

00:08:48,790 --> 00:08:52,630
thinking again about our infrastructure

00:08:50,709 --> 00:08:53,340
and how do we monitor these these things

00:08:52,630 --> 00:08:54,900
that

00:08:53,340 --> 00:08:58,980
the femoral where we can spin them up

00:08:54,900 --> 00:09:00,840
and share them down and scale them but

00:08:58,980 --> 00:09:02,790
one of the the problems of when we think

00:09:00,840 --> 00:09:05,280
of things in our traditional stacks or

00:09:02,790 --> 00:09:08,040
think of them in these buckets is we

00:09:05,280 --> 00:09:10,530
tend to miss out and we tend to not see

00:09:08,040 --> 00:09:11,820
really where these edges are or we miss

00:09:10,530 --> 00:09:13,770
things because we're defining these

00:09:11,820 --> 00:09:16,140
edges and what really we ought to be

00:09:13,770 --> 00:09:19,860
thinking of it less as an application

00:09:16,140 --> 00:09:21,090
stack and more of as a spectrum your end

00:09:19,860 --> 00:09:22,890
users when they interact with your

00:09:21,090 --> 00:09:24,810
application they don't see a stack they

00:09:22,890 --> 00:09:26,760
interact with you as a company and that

00:09:24,810 --> 00:09:28,590
goes from all the way in the front end

00:09:26,760 --> 00:09:29,850
whatever they're clicking on all the way

00:09:28,590 --> 00:09:32,160
down to the infrastructure and they

00:09:29,850 --> 00:09:35,400
don't care which portion it is or which

00:09:32,160 --> 00:09:36,900
team is responsible for that they really

00:09:35,400 --> 00:09:39,810
care that it just works and that it

00:09:36,900 --> 00:09:42,210
works well so if we think of things as

00:09:39,810 --> 00:09:46,410
an application spectrum it allows us to

00:09:42,210 --> 00:09:47,640
start to see where things blur and it

00:09:46,410 --> 00:09:49,920
really helps us when we're choosing

00:09:47,640 --> 00:09:52,380
monitoring solutions because monitoring

00:09:49,920 --> 00:09:54,540
has a lot of overlaps so when a vendor

00:09:52,380 --> 00:09:56,910
or an open source projects is that they

00:09:54,540 --> 00:09:59,070
monitor something if you think of things

00:09:56,910 --> 00:10:01,650
as a spectrum it becomes much clearer to

00:09:59,070 --> 00:10:04,280
see where that monitoring ends and where

00:10:01,650 --> 00:10:07,320
you need to start filling in those gaps

00:10:04,280 --> 00:10:09,870
so the five areas that we're going to be

00:10:07,320 --> 00:10:12,120
covering for monitoring the three that

00:10:09,870 --> 00:10:14,130
are traditionally thought of on the

00:10:12,120 --> 00:10:16,050
front end the first is going to be

00:10:14,130 --> 00:10:18,420
what's traditionally knows performance

00:10:16,050 --> 00:10:20,190
monitoring traditionally this has two

00:10:18,420 --> 00:10:21,960
main sections one's called synthetics

00:10:20,190 --> 00:10:25,860
and the other is called rum and rum

00:10:21,960 --> 00:10:27,780
stands for real user monitoring as we

00:10:25,860 --> 00:10:29,910
transition across the spectrum into the

00:10:27,780 --> 00:10:32,370
application side we traditionally call

00:10:29,910 --> 00:10:34,680
this application monitoring suitable

00:10:32,370 --> 00:10:36,720
monitoring applications but there's two

00:10:34,680 --> 00:10:38,490
traditional parts of this as well once

00:10:36,720 --> 00:10:40,470
traditionally called a p.m. or

00:10:38,490 --> 00:10:42,420
application performance monitoring and

00:10:40,470 --> 00:10:45,590
the others just known as application

00:10:42,420 --> 00:10:47,520
monitoring and then finally as we

00:10:45,590 --> 00:10:49,860
transition all the way back into there

00:10:47,520 --> 00:10:51,660
our infrastructure again very suitable

00:10:49,860 --> 00:10:54,690
name infrastructure monitoring is what

00:10:51,660 --> 00:10:56,370
infrastructure monitoring is called but

00:10:54,690 --> 00:10:59,000
again as we start to think of these

00:10:56,370 --> 00:11:00,600
three groups within monitoring

00:10:59,000 --> 00:11:02,670
understanding that there are these

00:11:00,600 --> 00:11:04,980
overlaps and understanding things like

00:11:02,670 --> 00:11:06,760
if we're talking about an application

00:11:04,980 --> 00:11:09,070
and monitoring an applique

00:11:06,760 --> 00:11:10,840
nation you do have applications now that

00:11:09,070 --> 00:11:12,880
are running on the front end right that

00:11:10,840 --> 00:11:15,730
you push code to them and a lot of the

00:11:12,880 --> 00:11:17,650
the code is being executed in JavaScript

00:11:15,730 --> 00:11:19,270
in their browser or similarly when we're

00:11:17,650 --> 00:11:22,210
thinking of infrastructure we have that

00:11:19,270 --> 00:11:24,400
blurry line of if you're running in AWS

00:11:22,210 --> 00:11:27,640
and you've moved off of my sequel and

00:11:24,400 --> 00:11:29,230
you're using Amazon RDS well is that

00:11:27,640 --> 00:11:32,350
infrastructure is that an application

00:11:29,230 --> 00:11:33,790
right it could be both in those cases so

00:11:32,350 --> 00:11:36,700
understanding that we have these gray

00:11:33,790 --> 00:11:39,040
lines on our spectrum where we can start

00:11:36,700 --> 00:11:40,240
to have fuzzy areas but knowing that we

00:11:39,040 --> 00:11:43,300
need to be aware of those when we

00:11:40,240 --> 00:11:45,820
monitor so with all of that let's dive

00:11:43,300 --> 00:11:48,400
into the infrastructure side why is

00:11:45,820 --> 00:11:49,690
infrastructure monitoring important well

00:11:48,400 --> 00:11:51,700
obviously you need it because your

00:11:49,690 --> 00:11:53,740
application needs to run and need some

00:11:51,700 --> 00:11:56,080
sort of infrastructure even if you have

00:11:53,740 --> 00:11:58,270
bought into the whole server list thing

00:11:56,080 --> 00:12:00,430
server list is just someone else's

00:11:58,270 --> 00:12:03,460
server right it still runs on a server

00:12:00,430 --> 00:12:05,500
so you need that infrastructure but more

00:12:03,460 --> 00:12:07,090
importantly than that we need

00:12:05,500 --> 00:12:08,950
infrastructure because and we need to

00:12:07,090 --> 00:12:11,290
monitor it because downtime costs us

00:12:08,950 --> 00:12:12,970
money and we all inherently know this

00:12:11,290 --> 00:12:14,850
that when our applications go down it

00:12:12,970 --> 00:12:17,080
costs our company money whether that's

00:12:14,850 --> 00:12:20,950
actual money in sales or whether that's

00:12:17,080 --> 00:12:24,970
money in donations or just money in PR

00:12:20,950 --> 00:12:26,710
branding type things for a little idea

00:12:24,970 --> 00:12:28,840
of how much money though this costs us

00:12:26,710 --> 00:12:33,280
well if you're huge and you're like

00:12:28,840 --> 00:12:35,170
Amazon Amazon went down about a year ago

00:12:33,280 --> 00:12:37,330
a little over a year ago and they were

00:12:35,170 --> 00:12:39,400
down for 20 minutes it cost them a whole

00:12:37,330 --> 00:12:41,680
three and three-quarters of a million

00:12:39,400 --> 00:12:42,580
dollars so that's one end of the

00:12:41,680 --> 00:12:45,360
spectrum

00:12:42,580 --> 00:12:47,800
it's huge that's a ton of money but even

00:12:45,360 --> 00:12:50,020
thinking about like Fortune 1000

00:12:47,800 --> 00:12:52,440
companies so what big places that we

00:12:50,020 --> 00:12:56,080
would consider your average enterprise

00:12:52,440 --> 00:12:57,790
IDC did a survey of the Fortune 1000 and

00:12:56,080 --> 00:13:00,880
they found that the average cost of

00:12:57,790 --> 00:13:05,050
entry an hour of infrastructure failure

00:13:00,880 --> 00:13:07,330
was $100,000 as mentioned before I'm a

00:13:05,050 --> 00:13:09,760
travel hacker so I am really interested

00:13:07,330 --> 00:13:11,860
in aviation things this was an

00:13:09,760 --> 00:13:13,870
interesting one earlier in January Delta

00:13:11,860 --> 00:13:16,990
had an outage on a Sunday night they had

00:13:13,870 --> 00:13:18,370
a canceled about 170 flight it cost them

00:13:16,990 --> 00:13:19,660
eight and a half million dollars and

00:13:18,370 --> 00:13:23,140
this is due to assist

00:13:19,660 --> 00:13:24,790
the manage but more interestingly and

00:13:23,140 --> 00:13:26,620
this is a little washed out but

00:13:24,790 --> 00:13:27,760
hopefully you can see that more than the

00:13:26,620 --> 00:13:30,130
eight and half a million dollars that

00:13:27,760 --> 00:13:32,200
they lost their stock went down Monday

00:13:30,130 --> 00:13:35,110
morning instantly just dropped off two

00:13:32,200 --> 00:13:37,870
points which this represents more than

00:13:35,110 --> 00:13:41,070
just the revenues loss this was tens of

00:13:37,870 --> 00:13:43,900
millions of dollars on their part so

00:13:41,070 --> 00:13:45,880
there is a cost not just financial to

00:13:43,900 --> 00:13:48,130
the things that we you know when we have

00:13:45,880 --> 00:13:50,200
an outage it's not just the lost sales

00:13:48,130 --> 00:13:52,330
we have to start thinking about the

00:13:50,200 --> 00:13:56,440
actual cost to our companies and their

00:13:52,330 --> 00:13:57,880
reputations the benefits though the

00:13:56,440 --> 00:13:59,740
benefits of monitoring why do we do this

00:13:57,880 --> 00:14:00,850
well as GI Joe says knowing is half the

00:13:59,740 --> 00:14:03,940
battle right

00:14:00,850 --> 00:14:05,560
the Crees meantime detection is really

00:14:03,940 --> 00:14:07,300
what we're after here getting faster

00:14:05,560 --> 00:14:09,880
getting faster at our jobs getting

00:14:07,300 --> 00:14:12,580
faster at putting things back up when

00:14:09,880 --> 00:14:14,590
they when they fail and then also not

00:14:12,580 --> 00:14:16,330
only the detection but getting that

00:14:14,590 --> 00:14:20,260
information that we need in order to

00:14:16,330 --> 00:14:23,020
speed our recovery because if you can

00:14:20,260 --> 00:14:24,310
detect things and potentially if you can

00:14:23,020 --> 00:14:28,270
actually detect things before they

00:14:24,310 --> 00:14:31,090
happen you can avoid them so let's dive

00:14:28,270 --> 00:14:33,430
into let's take those four qualities and

00:14:31,090 --> 00:14:35,800
metrics and start to consider them as we

00:14:33,430 --> 00:14:38,050
we look at two infrastructure monitoring

00:14:35,800 --> 00:14:39,700
so the first that I mentioned was they

00:14:38,050 --> 00:14:42,730
have to be well understood so there's

00:14:39,700 --> 00:14:44,860
this ease of sharing information if we

00:14:42,730 --> 00:14:46,570
have infrastructure monitoring well

00:14:44,860 --> 00:14:48,910
understood means does it integrate with

00:14:46,570 --> 00:14:50,260
the tools we already reuse right so for

00:14:48,910 --> 00:14:52,840
implementing some sort of monitoring

00:14:50,260 --> 00:14:55,630
tool does it integrate with our chat ops

00:14:52,840 --> 00:14:58,330
tool slack HipChat whatever we're using

00:14:55,630 --> 00:15:00,070
even IRC if we're still using that can

00:14:58,330 --> 00:15:03,040
we actually send out automated messages

00:15:00,070 --> 00:15:04,510
so that people understand things also

00:15:03,040 --> 00:15:07,090
there's the ease of deployment in use

00:15:04,510 --> 00:15:09,460
simply can people log in can people make

00:15:07,090 --> 00:15:10,900
the dashboards that they need if you're

00:15:09,460 --> 00:15:12,190
not able to make the dashboards that you

00:15:10,900 --> 00:15:15,880
need if you're not able to get the

00:15:12,190 --> 00:15:18,010
alerts then similar to having metric and

00:15:15,880 --> 00:15:19,690
imperial numbers and people being

00:15:18,010 --> 00:15:21,640
completely disconnected and not

00:15:19,690 --> 00:15:22,960
understanding things people don't have

00:15:21,640 --> 00:15:27,370
that information they're going to be

00:15:22,960 --> 00:15:29,350
disconnected so as I mentioned

00:15:27,370 --> 00:15:30,790
integrations but aside from the

00:15:29,350 --> 00:15:32,620
integrations like applications that you

00:15:30,790 --> 00:15:34,180
need also consider things like

00:15:32,620 --> 00:15:35,500
the integrations with your

00:15:34,180 --> 00:15:37,630
infrastructure as you're starting to

00:15:35,500 --> 00:15:40,690
move to may be things like hybrid clouds

00:15:37,630 --> 00:15:42,310
or hosted clouds how do those work with

00:15:40,690 --> 00:15:44,650
the traditional servers that you've been

00:15:42,310 --> 00:15:46,960
running can you monitor all of those can

00:15:44,650 --> 00:15:49,780
you monitor virtual servers or

00:15:46,960 --> 00:15:52,180
containers and can we bring them all

00:15:49,780 --> 00:15:54,070
into one place it's so easy for us to

00:15:52,180 --> 00:15:56,320
set up things and I know people love to

00:15:54,070 --> 00:15:58,060
set up open-source tools so if someone

00:15:56,320 --> 00:15:59,560
sets up an idea server and they're

00:15:58,060 --> 00:16:01,300
monitoring something but how does that

00:15:59,560 --> 00:16:03,490
play with all the other monitoring that

00:16:01,300 --> 00:16:07,750
you've got so try to bring everything

00:16:03,490 --> 00:16:09,190
all into one place so that was being

00:16:07,750 --> 00:16:11,250
well understood being sufficiently

00:16:09,190 --> 00:16:13,300
granular here is really crucial

00:16:11,250 --> 00:16:16,180
especially as you're moving to hosted

00:16:13,300 --> 00:16:18,340
services when you're hosted it's often

00:16:16,180 --> 00:16:20,170
really difficult to adjust these for

00:16:18,340 --> 00:16:23,140
yourself so if you're looking at hosting

00:16:20,170 --> 00:16:25,570
on popular public clouds if you're

00:16:23,140 --> 00:16:26,710
looking at cloud watch for from Amazon

00:16:25,570 --> 00:16:28,600
you're going to get one-minute

00:16:26,710 --> 00:16:29,260
granularity similar with with Google

00:16:28,600 --> 00:16:31,930
stackdriver

00:16:29,260 --> 00:16:34,870
if you're looking at Amazon or Microsoft

00:16:31,930 --> 00:16:38,170
Azure you get one minute but that's only

00:16:34,870 --> 00:16:40,510
up to 24 hours so as you think of the

00:16:38,170 --> 00:16:42,610
granularity that you need and you think

00:16:40,510 --> 00:16:44,740
of maybe having a one minute outage on

00:16:42,610 --> 00:16:46,060
the weekend and then coming back and

00:16:44,740 --> 00:16:48,330
trying to check in on Monday morning

00:16:46,060 --> 00:16:50,740
well with Azure that's completely gone

00:16:48,330 --> 00:16:53,020
because it rolls up into one hour and so

00:16:50,740 --> 00:16:55,870
you're down for one sixtieth of the time

00:16:53,020 --> 00:16:59,290
now which essentially means you'll never

00:16:55,870 --> 00:17:00,760
actually see that that comes to play

00:16:59,290 --> 00:17:03,400
when we think of the dashboarding tools

00:17:00,760 --> 00:17:06,520
that we use so this is just a simple

00:17:03,400 --> 00:17:08,830
graph showing a CPU spike we can see the

00:17:06,520 --> 00:17:12,459
top is in one second granularity it's

00:17:08,830 --> 00:17:15,310
really hard to see the the peak there

00:17:12,459 --> 00:17:20,140
but if you were to zoom in the total

00:17:15,310 --> 00:17:23,170
spike there is 46.7% or thereabouts and

00:17:20,140 --> 00:17:25,390
we can see where that actual spike is we

00:17:23,170 --> 00:17:27,640
roll that up to one minute we can see

00:17:25,390 --> 00:17:29,470
that that that spike has now shifted to

00:17:27,640 --> 00:17:31,900
the beginning of the minute but more

00:17:29,470 --> 00:17:34,030
than that and again it's hard to see but

00:17:31,900 --> 00:17:35,740
off to the the left of it we can see the

00:17:34,030 --> 00:17:37,570
scale and at this point it's only

00:17:35,740 --> 00:17:39,610
peaking because it's been rolled up into

00:17:37,570 --> 00:17:43,120
one minute it's only peaking at about

00:17:39,610 --> 00:17:45,100
36% so now our peak is much less and

00:17:43,120 --> 00:17:46,180
then when we roll up to five minutes not

00:17:45,100 --> 00:17:48,100
only has that

00:17:46,180 --> 00:17:50,050
that spike shifted all the way to the

00:17:48,100 --> 00:17:54,660
start of our 5-minute a lot mint but

00:17:50,050 --> 00:17:57,850
it's only peaking at like 11 percent so

00:17:54,660 --> 00:18:01,030
when we roll things up not only is it

00:17:57,850 --> 00:18:02,980
just about losing information there's a

00:18:01,030 --> 00:18:04,660
sense that because the time is shifting

00:18:02,980 --> 00:18:06,490
here and because the level of this spike

00:18:04,660 --> 00:18:07,960
is being aggregated we're not just

00:18:06,490 --> 00:18:10,120
losing information we're starting to

00:18:07,960 --> 00:18:12,370
receive false data so having that

00:18:10,120 --> 00:18:13,900
granularity isn't just about seeing what

00:18:12,370 --> 00:18:17,740
you need but seeing the accurate

00:18:13,900 --> 00:18:21,190
information that you need so part three

00:18:17,740 --> 00:18:22,630
of our good qualities is that we need to

00:18:21,190 --> 00:18:25,510
have metrics that are tagged and

00:18:22,630 --> 00:18:27,700
filterable so the main advantage is on

00:18:25,510 --> 00:18:30,040
the infrastructure side of being

00:18:27,700 --> 00:18:31,960
cloud-based and having things contain

00:18:30,040 --> 00:18:34,390
things like containers or virtual

00:18:31,960 --> 00:18:37,600
machines is the ease that we get of

00:18:34,390 --> 00:18:39,430
scaling and distributing right so when

00:18:37,600 --> 00:18:41,410
we moved to Amazon it's really easy to

00:18:39,430 --> 00:18:43,360
have geo distributed things in different

00:18:41,410 --> 00:18:46,720
availability zones different regions of

00:18:43,360 --> 00:18:48,250
the world but the problem with that is

00:18:46,720 --> 00:18:50,500
that it generates all this useful

00:18:48,250 --> 00:18:52,840
metadata and if we're not capturing that

00:18:50,500 --> 00:18:54,730
if we're not tagging our metrics with

00:18:52,840 --> 00:18:57,370
where they came from what region of the

00:18:54,730 --> 00:19:00,250
world what size of the Machine they were

00:18:57,370 --> 00:19:02,710
on then we're losing a lot of that

00:19:00,250 --> 00:19:04,480
useful data to know in the future to

00:19:02,710 --> 00:19:06,010
help us understand our data and

00:19:04,480 --> 00:19:07,870
understand where our problems are

00:19:06,010 --> 00:19:09,790
whether they're having happening in a

00:19:07,870 --> 00:19:12,520
specific part of the world or if they're

00:19:09,790 --> 00:19:16,420
happening say on a specific type of

00:19:12,520 --> 00:19:17,590
server or specific size of server so

00:19:16,420 --> 00:19:19,120
when you think about our metrics on the

00:19:17,590 --> 00:19:21,700
infrastructure side we really need to

00:19:19,120 --> 00:19:24,400
think of them not only as the what is it

00:19:21,700 --> 00:19:26,260
and the how much and obviously the

00:19:24,400 --> 00:19:27,870
timestamp of when it happened but we

00:19:26,260 --> 00:19:30,640
need these tags of where it happened

00:19:27,870 --> 00:19:33,370
where it happened what type of system it

00:19:30,640 --> 00:19:35,740
happened on and that allows us to start

00:19:33,370 --> 00:19:37,720
thinking of our metrics less of as

00:19:35,740 --> 00:19:38,950
here's a metric we just need to put it

00:19:37,720 --> 00:19:40,930
into a dashboard and hopefully we can

00:19:38,950 --> 00:19:43,090
see it but actually turn it into

00:19:40,930 --> 00:19:46,510
something that we can query almost like

00:19:43,090 --> 00:19:48,490
a database so rather than looking at

00:19:46,510 --> 00:19:51,540
something we can query against it and

00:19:48,490 --> 00:19:56,050
say show me all of the information from

00:19:51,540 --> 00:19:59,360
my apache server that's running on if we

00:19:56,050 --> 00:20:02,260
aren't Amazon you know a an Amazon

00:19:59,360 --> 00:20:04,580
large instance let's say in u.s. East 1a

00:20:02,260 --> 00:20:07,610
that's running my Drupal application

00:20:04,580 --> 00:20:10,160
versus the Apache that's running maybe a

00:20:07,610 --> 00:20:11,900
wordpress so as we start to do this we

00:20:10,160 --> 00:20:14,420
can start to ask these questions and

00:20:11,900 --> 00:20:17,440
hone things down and it allows us to see

00:20:14,420 --> 00:20:20,000
patterns and trends and things like that

00:20:17,440 --> 00:20:21,290
speaking of patterns and trends keeping

00:20:20,000 --> 00:20:23,390
your information around for a long time

00:20:21,290 --> 00:20:25,580
so that again back to our qualities

00:20:23,390 --> 00:20:27,679
number four is long lived so for

00:20:25,580 --> 00:20:29,990
thinking of hosting again on things like

00:20:27,679 --> 00:20:31,940
public cloud well when we're doing the

00:20:29,990 --> 00:20:34,040
monitoring and retaining these metrics

00:20:31,940 --> 00:20:35,929
if we're using Amazon Cloud watch there

00:20:34,040 --> 00:20:38,360
the industry leader at fifteen months

00:20:35,929 --> 00:20:42,200
but similar to the way that azure rolled

00:20:38,360 --> 00:20:44,299
up their metrics Amazon does that for

00:20:42,200 --> 00:20:46,970
their their retention so they won't

00:20:44,299 --> 00:20:48,950
retain all of your data past 15 days

00:20:46,970 --> 00:20:50,240
we'll start to roll it up into 5-minute

00:20:48,950 --> 00:20:53,059
increments and then into one-hour

00:20:50,240 --> 00:20:54,440
increments which is still better because

00:20:53,059 --> 00:20:56,510
they keep things around for 15 months

00:20:54,440 --> 00:20:59,150
compared to Google stackdriver which you

00:20:56,510 --> 00:21:02,120
only have six weeks or Azure which is 90

00:20:59,150 --> 00:21:03,410
days so about three months so start to

00:21:02,120 --> 00:21:06,340
think about how long you should be

00:21:03,410 --> 00:21:08,870
keeping your data in order to see trends

00:21:06,340 --> 00:21:11,270
15 months is fantastic if you can

00:21:08,870 --> 00:21:13,010
actually keep things and 15 months for

00:21:11,270 --> 00:21:14,510
those that don't understand why 15

00:21:13,010 --> 00:21:17,360
months because it seems like a odd

00:21:14,510 --> 00:21:19,400
number it's a year and a quarter because

00:21:17,360 --> 00:21:22,340
oftentimes we see patterns that go on

00:21:19,400 --> 00:21:25,309
quarters so not only keeping a year to

00:21:22,340 --> 00:21:26,510
see you're over year trends but keeping

00:21:25,309 --> 00:21:30,350
things so you can actually see

00:21:26,510 --> 00:21:31,490
quarter-over-quarter trends so I've

00:21:30,350 --> 00:21:33,500
talked a lot about how we should be

00:21:31,490 --> 00:21:36,200
considering monitoring our

00:21:33,500 --> 00:21:37,460
infrastructure well a lot of people are

00:21:36,200 --> 00:21:39,710
wondering okay well what should I use

00:21:37,460 --> 00:21:42,169
for monitoring there are a ton of

00:21:39,710 --> 00:21:44,000
projects out there particularly in the

00:21:42,169 --> 00:21:47,750
open source world so we've got things

00:21:44,000 --> 00:21:50,090
like Nagios or Nagios and pronounce it

00:21:47,750 --> 00:21:53,150
either way I guess or a chinga which is

00:21:50,090 --> 00:21:54,740
the newer version of that sensu is

00:21:53,150 --> 00:21:58,030
getting really popular sensu is

00:21:54,740 --> 00:22:00,260
essentially taking nagi OSes idea and

00:21:58,030 --> 00:22:02,179
modernizing it for modern infrastructure

00:22:00,260 --> 00:22:04,549
if you're interested in that actually

00:22:02,179 --> 00:22:08,050
Howard Tyson has the session right after

00:22:04,549 --> 00:22:10,870
this at 5:00 p.m. a couple doors down

00:22:08,050 --> 00:22:12,890
prometheus is another super popular one

00:22:10,870 --> 00:22:13,250
but you have to understand with all of

00:22:12,890 --> 00:22:15,110
these

00:22:13,250 --> 00:22:17,000
that with open source you're putting

00:22:15,110 --> 00:22:19,250
together parts in a very similar way

00:22:17,000 --> 00:22:21,559
that you are with Drupal modules and you

00:22:19,250 --> 00:22:22,940
have to connect a bunch of modules and

00:22:21,559 --> 00:22:25,070
configure them and put them all together

00:22:22,940 --> 00:22:28,190
so they work right if you're running

00:22:25,070 --> 00:22:30,559
prometheus it's largely gathering data

00:22:28,190 --> 00:22:32,539
for you and you have to understand the

00:22:30,559 --> 00:22:33,860
nuances of things like the open source

00:22:32,539 --> 00:22:36,650
projects that you're using so for

00:22:33,860 --> 00:22:39,890
example Prometheus is fantastic but it

00:22:36,650 --> 00:22:42,590
stores one file per time-series metric

00:22:39,890 --> 00:22:45,309
type so every single metric that you

00:22:42,590 --> 00:22:47,960
gather has a file and if you can imagine

00:22:45,309 --> 00:22:49,730
storing everything into one file over

00:22:47,960 --> 00:22:52,070
time that grows so Prometheus they don't

00:22:49,730 --> 00:22:53,809
recommend you that you retain your data

00:22:52,070 --> 00:22:55,640
for a long time they recommend that you

00:22:53,809 --> 00:22:58,039
actually put it into something like iron

00:22:55,640 --> 00:23:00,500
DB or another tool which actually is

00:22:58,039 --> 00:23:02,390
designed for longer retention so

00:23:00,500 --> 00:23:04,940
understanding similarly in the ways that

00:23:02,390 --> 00:23:06,890
we evaluate Drupal modules you have to

00:23:04,940 --> 00:23:08,179
evaluate your open source projects

00:23:06,890 --> 00:23:10,669
understand what they're good at what

00:23:08,179 --> 00:23:13,130
they were intended for and marry them

00:23:10,669 --> 00:23:16,510
with things that sort of fill in those

00:23:13,130 --> 00:23:18,950
those gaps of things that it doesn't do

00:23:16,510 --> 00:23:20,990
obviously I work for data dogs so if

00:23:18,950 --> 00:23:22,820
you're thinking more on the the sass or

00:23:20,990 --> 00:23:25,460
path side it's something that's hosted

00:23:22,820 --> 00:23:27,049
for you data dogs fantastic but I'm not

00:23:25,460 --> 00:23:29,090
going to turn this into an infomercial

00:23:27,049 --> 00:23:31,159
cloud watch if you're running on Amazon

00:23:29,090 --> 00:23:33,799
they do a great job they do have some

00:23:31,159 --> 00:23:37,880
missing spots but for the large part you

00:23:33,799 --> 00:23:39,590
know it's a good cheap service so we

00:23:37,880 --> 00:23:41,539
covered infrastructure let's talk a

00:23:39,590 --> 00:23:43,429
little bit about application monitoring

00:23:41,539 --> 00:23:45,289
the things that run over on our

00:23:43,429 --> 00:23:46,940
infrastructure so why is it important

00:23:45,289 --> 00:23:48,980
obviously the applications that we run

00:23:46,940 --> 00:23:50,840
are important to our businesses they're

00:23:48,980 --> 00:23:54,049
how our businesses make money they're

00:23:50,840 --> 00:23:55,880
how our businesses get known we already

00:23:54,049 --> 00:23:59,390
know that downtime costs money and I

00:23:55,880 --> 00:24:00,919
threw some stats at you for that but as

00:23:59,390 --> 00:24:03,409
we start thinking of application we also

00:24:00,919 --> 00:24:05,600
know that slow performance costs us

00:24:03,409 --> 00:24:08,690
money so we need to start considering

00:24:05,600 --> 00:24:10,760
that so as I mentioned there's two types

00:24:08,690 --> 00:24:13,100
under application monitoring one is just

00:24:10,760 --> 00:24:14,960
straight-up application monitoring and

00:24:13,100 --> 00:24:16,909
the benefits here are that we've all

00:24:14,960 --> 00:24:18,740
built custom apps right that's the whole

00:24:16,909 --> 00:24:20,990
point behind Drupal is to build custom

00:24:18,740 --> 00:24:22,610
applications web applications but we

00:24:20,990 --> 00:24:25,070
also a lot of us build other

00:24:22,610 --> 00:24:26,930
applications so we need to start

00:24:25,070 --> 00:24:28,190
gathering custom metro

00:24:26,930 --> 00:24:30,230
from these applications and

00:24:28,190 --> 00:24:32,570
understanding how well we're doing on a

00:24:30,230 --> 00:24:34,670
business level and then also within

00:24:32,570 --> 00:24:36,470
application monitoring monitoring the

00:24:34,670 --> 00:24:38,630
applications that we didn't write so if

00:24:36,470 --> 00:24:40,280
we're running Drupal how is my sequel

00:24:38,630 --> 00:24:43,490
doing are we gathering metrics from my

00:24:40,280 --> 00:24:45,650
sequel if we're running engine X or if

00:24:43,490 --> 00:24:49,670
we're running varnish out front as a

00:24:45,650 --> 00:24:53,450
load balancer or a reverse proxy how's

00:24:49,670 --> 00:24:55,880
that performing so again diving into

00:24:53,450 --> 00:24:58,360
those those four key qualities well

00:24:55,880 --> 00:25:01,550
understood so if we're thinking about

00:24:58,360 --> 00:25:03,200
application monitoring largely we're

00:25:01,550 --> 00:25:06,020
going to be dealing with some sort of

00:25:03,200 --> 00:25:07,130
SDK some sort of library on the code

00:25:06,020 --> 00:25:08,330
that we're writing so how do we

00:25:07,130 --> 00:25:11,210
integrate the code that we're writing

00:25:08,330 --> 00:25:13,790
into it or if we are using other

00:25:11,210 --> 00:25:14,540
applications like my sequel or engine X

00:25:13,790 --> 00:25:17,060
or varnish

00:25:14,540 --> 00:25:18,980
how do those integrate with it so well

00:25:17,060 --> 00:25:21,380
understood in this case for application

00:25:18,980 --> 00:25:23,420
monitoring means how well-documented is

00:25:21,380 --> 00:25:25,070
it is there an API is there an SDK that

00:25:23,420 --> 00:25:28,190
allows me to get up and running really

00:25:25,070 --> 00:25:30,200
quickly and then how many integrations

00:25:28,190 --> 00:25:31,280
does it have right if we're talking

00:25:30,200 --> 00:25:32,780
about something that's well understood

00:25:31,280 --> 00:25:35,450
it should have a good community it

00:25:32,780 --> 00:25:37,640
should have a good base if I want to run

00:25:35,450 --> 00:25:39,200
some other application hopefully there's

00:25:37,640 --> 00:25:42,920
a lot of integration so I don't have to

00:25:39,200 --> 00:25:44,510
write that myself and then as we think

00:25:42,920 --> 00:25:46,430
of the other three qualities is it

00:25:44,510 --> 00:25:48,770
sufficiently granular so for our

00:25:46,430 --> 00:25:50,840
applications depending on what sort of

00:25:48,770 --> 00:25:52,940
granularity we're running we probably

00:25:50,840 --> 00:25:55,340
still want second or maybe we want to

00:25:52,940 --> 00:25:58,310
start diving into sub second granularity

00:25:55,340 --> 00:26:00,290
so second granularity here is really

00:25:58,310 --> 00:26:03,110
good so for running my sequel how many

00:26:00,290 --> 00:26:05,840
queries per second are we running but

00:26:03,110 --> 00:26:07,070
maybe we want that sub second we want to

00:26:05,840 --> 00:26:09,770
know how long we're left

00:26:07,070 --> 00:26:10,940
what's the latency on a query so usually

00:26:09,770 --> 00:26:14,420
queries are measured in things like

00:26:10,940 --> 00:26:17,270
milliseconds tagged in filterable again

00:26:14,420 --> 00:26:20,120
super important here if we're running my

00:26:17,270 --> 00:26:23,120
sequel and it's been broken out into

00:26:20,120 --> 00:26:25,340
master slave or primary secondary we

00:26:23,120 --> 00:26:27,170
want to know if we're having reads from

00:26:25,340 --> 00:26:29,150
a bunch of different my sequels which

00:26:27,170 --> 00:26:31,130
one did it come from which my sequel

00:26:29,150 --> 00:26:32,540
server was that from or if we're load

00:26:31,130 --> 00:26:34,310
balancing with engine X and it's

00:26:32,540 --> 00:26:37,130
diverting things to a particular web

00:26:34,310 --> 00:26:39,170
server which one is it coming from what

00:26:37,130 --> 00:26:41,270
size is it what's the metadata on that

00:26:39,170 --> 00:26:43,910
server so that we can start to

00:26:41,270 --> 00:26:45,740
and what's going on and then long-lived

00:26:43,910 --> 00:26:48,230
again to start to see those trends on

00:26:45,740 --> 00:26:51,820
what were how we're performing over time

00:26:48,230 --> 00:26:54,590
and what our systems are doing over time

00:26:51,820 --> 00:26:55,730
so example than this there are again a

00:26:54,590 --> 00:26:57,920
lot of examples

00:26:55,730 --> 00:27:00,500
typically application and infrastructure

00:26:57,920 --> 00:27:02,180
monitoring do overlap so all of the

00:27:00,500 --> 00:27:03,890
things that I mentioned on the open

00:27:02,180 --> 00:27:06,350
source side before things like Nagios

00:27:03,890 --> 00:27:08,660
things like Prometheus they can monitor

00:27:06,350 --> 00:27:10,130
some of your applications but again

00:27:08,660 --> 00:27:12,740
you're going to have to piece together a

00:27:10,130 --> 00:27:14,990
lot of this so you you often have to

00:27:12,740 --> 00:27:16,790
install some sort of collector marry

00:27:14,990 --> 00:27:19,550
that with some sort of time-series

00:27:16,790 --> 00:27:22,370
database to actually ingest your data

00:27:19,550 --> 00:27:23,900
marry that to a dashboarding tool and

00:27:22,370 --> 00:27:25,550
then to some alerting tool to actually

00:27:23,900 --> 00:27:29,480
let you know when something's going

00:27:25,550 --> 00:27:33,080
wrong there are a bunch of standards and

00:27:29,480 --> 00:27:35,660
how metrics are generated the format's

00:27:33,080 --> 00:27:38,090
typically that there are two main ones

00:27:35,660 --> 00:27:41,270
collect D and statsky are the really

00:27:38,090 --> 00:27:43,760
popular ones at data dog we use stat C

00:27:41,270 --> 00:27:45,440
or a modified version of it there is a

00:27:43,760 --> 00:27:47,900
Drupal project out there if you are

00:27:45,440 --> 00:27:51,110
thinking of sending metrics from Drupal

00:27:47,900 --> 00:27:53,030
directly as you know application metrics

00:27:51,110 --> 00:27:55,130
to some sort of application monitoring

00:27:53,030 --> 00:27:58,580
tool you can use the Drupal stats B

00:27:55,130 --> 00:28:00,020
project again popular services here are

00:27:58,580 --> 00:28:02,120
really going to be the same so a data

00:28:00,020 --> 00:28:04,450
dog we do it of course cloud watch does

00:28:02,120 --> 00:28:06,890
it most any of your application

00:28:04,450 --> 00:28:08,510
monitoring companies will be the same as

00:28:06,890 --> 00:28:10,730
your infrastructure monitoring companies

00:28:08,510 --> 00:28:12,050
but again consider how many integrations

00:28:10,730 --> 00:28:14,930
they have because you don't want to be

00:28:12,050 --> 00:28:16,430
writing all of those the other one

00:28:14,930 --> 00:28:18,070
within application that I mentioned is a

00:28:16,430 --> 00:28:21,500
p.m. or application application

00:28:18,070 --> 00:28:22,970
performance monitoring and so here we

00:28:21,500 --> 00:28:25,850
need to talk about the cost of slow

00:28:22,970 --> 00:28:28,160
performance and the graphic there is how

00:28:25,850 --> 00:28:31,390
I feel when how most of us feel when we

00:28:28,160 --> 00:28:33,860
hit a site and it's just super slow and

00:28:31,390 --> 00:28:36,440
statistics prove it the permanent

00:28:33,860 --> 00:28:39,290
abandonment Murray for a slow site is

00:28:36,440 --> 00:28:41,960
28% so people that hit a site that's

00:28:39,290 --> 00:28:43,670
actually slow will never come back a

00:28:41,960 --> 00:28:46,160
quarter of them will never come back

00:28:43,670 --> 00:28:47,930
compared only 9% for an outage which

00:28:46,160 --> 00:28:50,390
essentially means if your website goes

00:28:47,930 --> 00:28:53,780
down it's far better than just having a

00:28:50,390 --> 00:28:55,040
slow website at walmart.com did a study

00:28:53,780 --> 00:28:56,480
for every hundred mill

00:28:55,040 --> 00:28:59,150
seconds that they improved on their page

00:28:56,480 --> 00:29:01,180
load time it grew their revenue 1% so

00:28:59,150 --> 00:29:03,470
making comes faster makes you more money

00:29:01,180 --> 00:29:05,150
Google and Bing essentially did the

00:29:03,470 --> 00:29:07,940
reverse study they started to

00:29:05,150 --> 00:29:09,890
intentionally slow down their search

00:29:07,940 --> 00:29:13,340
sites and they found that they lost

00:29:09,890 --> 00:29:17,090
about 3% of revenue for every one second

00:29:13,340 --> 00:29:19,480
of delay so that's why APM is important

00:29:17,090 --> 00:29:22,400
we want to monitor the performance and

00:29:19,480 --> 00:29:23,960
again how that impacts our revenue but

00:29:22,400 --> 00:29:25,460
similarly one thing that a lot of people

00:29:23,960 --> 00:29:27,820
don't consider when they're thinking of

00:29:25,460 --> 00:29:29,780
an APM is there's an impact to your cost

00:29:27,820 --> 00:29:31,760
particularly if you're thinking of

00:29:29,780 --> 00:29:35,270
hosting on some sort of public cloud

00:29:31,760 --> 00:29:37,790
when you buy time from AWS you're buying

00:29:35,270 --> 00:29:40,010
CPU time which means that if you're

00:29:37,790 --> 00:29:42,260
running code that's taking a long time

00:29:40,010 --> 00:29:44,210
that's not optimized not only are you

00:29:42,260 --> 00:29:46,190
losing money from your site being slow

00:29:44,210 --> 00:29:47,750
but you're losing money because you're

00:29:46,190 --> 00:29:50,450
spending a lot of money in order to run

00:29:47,750 --> 00:29:52,460
those the other interesting thing is the

00:29:50,450 --> 00:29:57,230
optimized code has a correlation to less

00:29:52,460 --> 00:29:59,120
defects or bugs and that's in we all

00:29:57,230 --> 00:30:00,710
kind of feel that as common sense if we

00:29:59,120 --> 00:30:02,210
write good code there's not going to be

00:30:00,710 --> 00:30:04,910
a whole lot of bugs in it and it'll be

00:30:02,210 --> 00:30:08,000
faster there is an interesting session

00:30:04,910 --> 00:30:10,280
on Thursday which I you know I haven't

00:30:08,000 --> 00:30:11,990
met this guy but it looked really cool

00:30:10,280 --> 00:30:13,880
so I'm going to try to check it out

00:30:11,990 --> 00:30:16,160
hopefully you will as well and Joseph

00:30:13,880 --> 00:30:17,450
Purcell on Thursday morning has one on

00:30:16,160 --> 00:30:20,420
code quality and he's going to talk a

00:30:17,450 --> 00:30:24,440
little bit about essentially how to

00:30:20,420 --> 00:30:26,810
optimize your code so as we dive back

00:30:24,440 --> 00:30:29,090
into our four key qualities of metrics

00:30:26,810 --> 00:30:31,760
well understood well for APM's well

00:30:29,090 --> 00:30:33,500
understood does meet well understood

00:30:31,760 --> 00:30:35,840
means does it understand the languages

00:30:33,500 --> 00:30:37,880
that we write in so for Drupal that's

00:30:35,840 --> 00:30:40,550
PHP but if we're writing in other things

00:30:37,880 --> 00:30:42,710
does it support that and more and more

00:30:40,550 --> 00:30:45,470
we're all moving to be polyglots we're

00:30:42,710 --> 00:30:47,060
writing applications and services in

00:30:45,470 --> 00:30:49,190
languages that best suit them

00:30:47,060 --> 00:30:51,620
so does it support the languages that I

00:30:49,190 --> 00:30:53,780
have now but can it support other

00:30:51,620 --> 00:30:56,840
languages that I might shift into and

00:30:53,780 --> 00:30:59,090
then more and more with other languages

00:30:56,840 --> 00:31:01,100
not so much again PHP but does it handle

00:30:59,090 --> 00:31:02,960
asynchronous languages so if we're

00:31:01,100 --> 00:31:05,420
starting to write things and go or if

00:31:02,960 --> 00:31:08,210
we're starting to write things Python 3

00:31:05,420 --> 00:31:10,210
has Python async io

00:31:08,210 --> 00:31:12,529
can it handle these asynchronous

00:31:10,210 --> 00:31:13,940
transactions and asynchronous runs where

00:31:12,529 --> 00:31:18,200
things are starting to spin off

00:31:13,940 --> 00:31:19,909
concurrent processes again does this

00:31:18,200 --> 00:31:21,740
integrate with other applications this

00:31:19,909 --> 00:31:23,480
one's a little bit different from your

00:31:21,740 --> 00:31:25,399
traditional application monitoring where

00:31:23,480 --> 00:31:27,850
you're going to be receiving metrics

00:31:25,399 --> 00:31:31,159
from something like my sequel or varnish

00:31:27,850 --> 00:31:32,659
but with this on APM side we want to

00:31:31,159 --> 00:31:34,249
know does it integrate can it actually

00:31:32,659 --> 00:31:35,929
see what my queries are against a

00:31:34,249 --> 00:31:38,450
database and start to track those so we

00:31:35,929 --> 00:31:40,309
can see the latency and how our slow

00:31:38,450 --> 00:31:43,340
queries are affecting our our actual

00:31:40,309 --> 00:31:45,080
code or things like our caches so if

00:31:43,340 --> 00:31:46,610
something is in cache or not in cache we

00:31:45,080 --> 00:31:49,730
wanted to understand how that makes our

00:31:46,610 --> 00:31:51,230
code slow or more performant and then

00:31:49,730 --> 00:31:53,929
finally how easy is it to integrate

00:31:51,230 --> 00:31:55,669
because nobody wants to go and have to

00:31:53,929 --> 00:31:58,759
modify all their code to insert all

00:31:55,669 --> 00:32:00,110
these lines to trace their code and to

00:31:58,759 --> 00:32:01,909
figure out the performance of their code

00:32:00,110 --> 00:32:05,869
so does it work with the frameworks that

00:32:01,909 --> 00:32:09,049
we're using sufficiently granular in

00:32:05,869 --> 00:32:10,879
this sense almost every APM uses seven

00:32:09,049 --> 00:32:13,490
second timers if you find one that

00:32:10,879 --> 00:32:15,710
doesn't you should run away quickly like

00:32:13,490 --> 00:32:18,499
that's just ludicrous because code

00:32:15,710 --> 00:32:20,570
operates that fast but when it comes to

00:32:18,499 --> 00:32:22,730
sufficiently granular we really want to

00:32:20,570 --> 00:32:25,309
understand how our APM sample things

00:32:22,730 --> 00:32:26,840
so with APM's you should be running them

00:32:25,309 --> 00:32:29,299
on your production systems you're not

00:32:26,840 --> 00:32:32,480
just running it in dev tests or on your

00:32:29,299 --> 00:32:34,039
local machine you want to run and have

00:32:32,480 --> 00:32:35,840
real users hitting your systems and

00:32:34,039 --> 00:32:39,590
figuring out what the performance of

00:32:35,840 --> 00:32:42,169
your actual sites are doing but in order

00:32:39,590 --> 00:32:44,299
to do that it means that you're going to

00:32:42,169 --> 00:32:45,499
have a slight performance it because now

00:32:44,299 --> 00:32:47,539
you're running a little bit of an

00:32:45,499 --> 00:32:49,369
additional code on top of that so we

00:32:47,539 --> 00:32:51,289
need to understand number one that it

00:32:49,369 --> 00:32:52,519
shouldn't negatively impact our

00:32:51,289 --> 00:32:54,350
customers because that's the whole

00:32:52,519 --> 00:32:56,570
problem that we're trying to solve with

00:32:54,350 --> 00:32:59,029
this but in order to do that we need to

00:32:56,570 --> 00:33:02,799
sample so we want it to sample and only

00:32:59,029 --> 00:33:04,570
run on a certain number of our users

00:33:02,799 --> 00:33:06,919
sessions when they're actually

00:33:04,570 --> 00:33:09,499
interacting with our applications or our

00:33:06,919 --> 00:33:11,330
sites in order to do that sufficient

00:33:09,499 --> 00:33:14,269
granularity here means that we have to

00:33:11,330 --> 00:33:16,249
have statistically sound models so you

00:33:14,269 --> 00:33:18,230
can't just be gathering the metrics for

00:33:16,249 --> 00:33:20,430
when something fails or when something

00:33:18,230 --> 00:33:22,320
is slow

00:33:20,430 --> 00:33:24,660
you want to collect everything that you

00:33:22,320 --> 00:33:26,730
can so you can understand your latency

00:33:24,660 --> 00:33:31,140
distribution and not just your extremes

00:33:26,730 --> 00:33:33,210
or your averages tagged in filter bral

00:33:31,140 --> 00:33:35,280
again does it handle distributed

00:33:33,210 --> 00:33:37,770
environments as we move to more and more

00:33:35,280 --> 00:33:39,720
distributed things when we're starting

00:33:37,770 --> 00:33:43,200
to run an APM and its tracing our code

00:33:39,720 --> 00:33:45,330
if our code is jumping from one server

00:33:43,200 --> 00:33:48,120
to another can it actually follow that

00:33:45,330 --> 00:33:51,120
along and see how that happens and how

00:33:48,120 --> 00:33:52,470
long that latency is and similarly if

00:33:51,120 --> 00:33:53,940
we're running modern environments if

00:33:52,470 --> 00:33:56,940
we're running doctor or kubernetes

00:33:53,940 --> 00:33:58,620
things that when a user hits it might

00:33:56,940 --> 00:34:00,360
run part of their request and then it

00:33:58,620 --> 00:34:02,940
might die and be picked up by another

00:34:00,360 --> 00:34:06,740
container or another system can our

00:34:02,940 --> 00:34:10,830
tracing actually manage to follow that

00:34:06,740 --> 00:34:13,409
and then finally long lived so long live

00:34:10,830 --> 00:34:15,450
for APM traditionally we don't keep

00:34:13,409 --> 00:34:17,460
things around too long because you just

00:34:15,450 --> 00:34:19,950
need to see the correlation between the

00:34:17,460 --> 00:34:22,409
code that you deploy and the code that

00:34:19,950 --> 00:34:25,020
or the performance of your application

00:34:22,409 --> 00:34:27,600
or your system although if you can keep

00:34:25,020 --> 00:34:29,340
things around for longer it's largely

00:34:27,600 --> 00:34:31,409
interesting to see your application

00:34:29,340 --> 00:34:33,450
performance over time performance

00:34:31,409 --> 00:34:36,390
changes when you change code are usually

00:34:33,450 --> 00:34:38,040
not huge or significant but over time

00:34:36,390 --> 00:34:39,870
they can build up so if you do keep

00:34:38,040 --> 00:34:43,260
things around that's an interesting

00:34:39,870 --> 00:34:45,600
piece of data that you can get so again

00:34:43,260 --> 00:34:48,120
let's do some examples there aren't too

00:34:45,600 --> 00:34:51,030
many APM examples in the open source

00:34:48,120 --> 00:34:52,950
world particularly for PHP there is this

00:34:51,030 --> 00:34:56,370
interesting github project that I found

00:34:52,950 --> 00:34:59,490
PHP APM so it is an open source PHP

00:34:56,370 --> 00:35:01,830
based APM there's also a project child

00:34:59,490 --> 00:35:05,910
called open tracing the website is open

00:35:01,830 --> 00:35:07,650
tracing IO the the notion here is it's

00:35:05,910 --> 00:35:09,630
part of I believe the Linux Foundation

00:35:07,650 --> 00:35:12,810
but they're trying to set up a standard

00:35:09,630 --> 00:35:15,720
for how we do APM or how we trace code

00:35:12,810 --> 00:35:17,640
so that you can essentially not have to

00:35:15,720 --> 00:35:19,770
build all the clients yourself and you

00:35:17,640 --> 00:35:22,500
can interchange them monitoring tools

00:35:19,770 --> 00:35:24,870
that you use Zipkin is an interesting

00:35:22,500 --> 00:35:27,360
one there's no PHP support yet they're

00:35:24,870 --> 00:35:30,000
one of the leaders light step is also

00:35:27,360 --> 00:35:33,550
one they list PHP it's in early access

00:35:30,000 --> 00:35:35,720
right now so you have to request access

00:35:33,550 --> 00:35:38,360
other things though they're interesting

00:35:35,720 --> 00:35:40,160
not really monitoring that can be XH

00:35:38,360 --> 00:35:45,170
profs I think a lot of us are familiar

00:35:40,160 --> 00:35:47,170
with XH frost as a profiler but there is

00:35:45,170 --> 00:35:49,460
a XH frost sampling module so you

00:35:47,170 --> 00:35:52,760
potentially could try to set up your own

00:35:49,460 --> 00:35:57,260
APM with s xh prof have it run sampling

00:35:52,760 --> 00:35:59,300
on real-world hits on your site popular

00:35:57,260 --> 00:36:00,710
services here new relics the big one I

00:35:59,300 --> 00:36:03,230
think we've all heard of new relic this

00:36:00,710 --> 00:36:05,150
is their bread and butter at data Dobbs

00:36:03,230 --> 00:36:08,170
we did release an IPM we don't have

00:36:05,150 --> 00:36:11,120
official PHP support but the community

00:36:08,170 --> 00:36:13,670
decided to do that so some guy spent a

00:36:11,120 --> 00:36:16,190
weekend and wrote an integration and

00:36:13,670 --> 00:36:18,050
published in on Twitter the other day so

00:36:16,190 --> 00:36:20,690
I haven't played with that I don't know

00:36:18,050 --> 00:36:25,160
how well it works but definitely if you

00:36:20,690 --> 00:36:27,560
do use data dog give that a try I have

00:36:25,160 --> 00:36:29,510
mentioned profiling a few times and so

00:36:27,560 --> 00:36:31,250
this is often one of the things that

00:36:29,510 --> 00:36:33,950
people get confused about with APM

00:36:31,250 --> 00:36:35,810
what's what's APM versus profiling or

00:36:33,950 --> 00:36:38,990
sometimes tracing versus profiling

00:36:35,810 --> 00:36:42,890
profiling isn't monitoring it largely

00:36:38,990 --> 00:36:44,870
isn't run on production applications the

00:36:42,890 --> 00:36:47,150
way that I like to think of profiling is

00:36:44,870 --> 00:36:49,940
similar to automated testing when we

00:36:47,150 --> 00:36:51,440
write code we run it we commit it and we

00:36:49,940 --> 00:36:54,430
run it through some automated testing

00:36:51,440 --> 00:36:56,630
like unit tests or behavior tests and

00:36:54,430 --> 00:36:58,760
then we confirm that it's okay and

00:36:56,630 --> 00:37:01,070
largely this is where profiling really

00:36:58,760 --> 00:37:02,780
shines and you never get a hit on your

00:37:01,070 --> 00:37:04,310
performance from real-world users

00:37:02,780 --> 00:37:06,320
because they're never seeing it but it

00:37:04,310 --> 00:37:07,970
has this great ability to when you check

00:37:06,320 --> 00:37:09,890
in code hopefully you can hook up with a

00:37:07,970 --> 00:37:11,270
profiling system that will just

00:37:09,890 --> 00:37:13,100
automatically run and it gives you a

00:37:11,270 --> 00:37:15,410
baseline for how your code should act

00:37:13,100 --> 00:37:17,480
and oftentimes it can help you find bugs

00:37:15,410 --> 00:37:20,000
and things like that on the open source

00:37:17,480 --> 00:37:23,900
side xh prof again this is where that's

00:37:20,000 --> 00:37:25,970
really really well-known Blackfyre do

00:37:23,900 --> 00:37:28,010
who I think they just walked in the back

00:37:25,970 --> 00:37:29,240
there they have a booth downstairs so

00:37:28,010 --> 00:37:33,320
you should check them out they also have

00:37:29,240 --> 00:37:35,630
a really great book that explains a lot

00:37:33,320 --> 00:37:36,830
of how profiling works and what you

00:37:35,630 --> 00:37:41,780
should consider there when you're

00:37:36,830 --> 00:37:44,330
thinking of profiling versus APM so that

00:37:41,780 --> 00:37:46,100
covers two of our our portions of the

00:37:44,330 --> 00:37:47,930
spectrum let's move on up into

00:37:46,100 --> 00:37:50,720
formants monitoring or the client-side

00:37:47,930 --> 00:37:53,630
and there's really two types here real

00:37:50,720 --> 00:37:55,370
users and synthetics and a lot of people

00:37:53,630 --> 00:37:56,780
are wondering why you should use both

00:37:55,370 --> 00:37:57,590
and they actually work really really

00:37:56,780 --> 00:37:59,330
well together

00:37:57,590 --> 00:38:03,110
which is why I've got fry and Bender up

00:37:59,330 --> 00:38:06,170
there so when you're thinking of real

00:38:03,110 --> 00:38:07,850
user monitoring you really want those

00:38:06,170 --> 00:38:09,560
real user experience real world

00:38:07,850 --> 00:38:11,000
experiences you want to start to measure

00:38:09,560 --> 00:38:13,150
how people are actually using your

00:38:11,000 --> 00:38:15,500
website and generating metrics from that

00:38:13,150 --> 00:38:17,060
because we all when we build

00:38:15,500 --> 00:38:19,340
applications we have these assumptions

00:38:17,060 --> 00:38:21,110
on how people will interact and often

00:38:19,340 --> 00:38:22,490
those assumptions more often than not

00:38:21,110 --> 00:38:24,800
they're wrong people use their

00:38:22,490 --> 00:38:27,050
applications in really strange ways that

00:38:24,800 --> 00:38:29,660
we always call edge cases but they're

00:38:27,050 --> 00:38:32,030
usually not so getting those real-world

00:38:29,660 --> 00:38:33,440
experiences is really critical in

00:38:32,030 --> 00:38:35,420
testing the performance of your

00:38:33,440 --> 00:38:37,430
application but more than that when

00:38:35,420 --> 00:38:39,710
we're using real users we get a

00:38:37,430 --> 00:38:41,240
diversity of testing because when we

00:38:39,710 --> 00:38:43,730
test we all have our development

00:38:41,240 --> 00:38:46,460
environments we have most of us are

00:38:43,730 --> 00:38:48,620
running really great souped-up laptops

00:38:46,460 --> 00:38:52,010
with as much memory as we can so

00:38:48,620 --> 00:38:54,440
performance is an issue versus the test

00:38:52,010 --> 00:38:56,930
in the real world where we have you know

00:38:54,440 --> 00:38:59,210
someone that's in a third world country

00:38:56,930 --> 00:39:01,820
on a really poor connection that's using

00:38:59,210 --> 00:39:05,180
you know not really a smartphone like a

00:39:01,820 --> 00:39:07,250
semi smart phone and how does that work

00:39:05,180 --> 00:39:09,020
so we can start to get a lot of

00:39:07,250 --> 00:39:11,300
interesting things from real users

00:39:09,020 --> 00:39:12,740
around the world different types of

00:39:11,300 --> 00:39:15,680
connections different types of browsers

00:39:12,740 --> 00:39:17,360
and this feeds back into creating

00:39:15,680 --> 00:39:18,980
synthetic tests synthetic tests being

00:39:17,360 --> 00:39:21,560
things that aren't real users so

00:39:18,980 --> 00:39:25,280
essentially robots scripts that we can

00:39:21,560 --> 00:39:28,010
write that will actually run preset

00:39:25,280 --> 00:39:29,660
actions for us so the great thing about

00:39:28,010 --> 00:39:31,280
synthetics is they're independent of

00:39:29,660 --> 00:39:34,070
your user activity they still hit your

00:39:31,280 --> 00:39:37,850
production sites but you don't have to

00:39:34,070 --> 00:39:39,950
worry about users actually coming on and

00:39:37,850 --> 00:39:42,200
the great thing about robots is they can

00:39:39,950 --> 00:39:44,480
often test things that real users can't

00:39:42,200 --> 00:39:46,520
or they can help test things that you

00:39:44,480 --> 00:39:47,600
don't have enough real users testing so

00:39:46,520 --> 00:39:48,740
if you're thinking of things like

00:39:47,600 --> 00:39:50,750
accessibility

00:39:48,740 --> 00:39:53,180
well how many you know depending on what

00:39:50,750 --> 00:39:55,340
you are running how many blind users you

00:39:53,180 --> 00:39:58,070
have maybe you want to bulk that up and

00:39:55,340 --> 00:39:59,290
start to test things from the synthetic

00:39:58,070 --> 00:40:00,730
side that you

00:39:59,290 --> 00:40:04,390
have enough users testing on the

00:40:00,730 --> 00:40:06,540
real-world side so if we think about our

00:40:04,390 --> 00:40:09,090
four good qualities and metrics

00:40:06,540 --> 00:40:11,740
well-understood are we well understood

00:40:09,090 --> 00:40:13,210
with synthetics that means do we

00:40:11,740 --> 00:40:15,370
understand what's being measured and can

00:40:13,210 --> 00:40:17,620
we easily update on the run side that

00:40:15,370 --> 00:40:19,420
means can we easily see user sessions

00:40:17,620 --> 00:40:23,350
interactions make sense of what users

00:40:19,420 --> 00:40:25,480
are actually doing sufficiently granular

00:40:23,350 --> 00:40:28,180
so for both of these again you're going

00:40:25,480 --> 00:40:30,550
to have metrics that are in seconds or

00:40:28,180 --> 00:40:32,650
sometimes milliseconds often

00:40:30,550 --> 00:40:33,970
milliseconds for the front end but how

00:40:32,650 --> 00:40:36,550
frequently are tests running on the

00:40:33,970 --> 00:40:39,160
synthetic side and do we have synthetics

00:40:36,550 --> 00:40:41,500
on all parts of the system and then on

00:40:39,160 --> 00:40:43,240
run the run side is there low overhead

00:40:41,500 --> 00:40:45,880
so similar to what we're thinking about

00:40:43,240 --> 00:40:47,830
for APM we're impacting real users we

00:40:45,880 --> 00:40:51,340
don't want to make the performance of

00:40:47,830 --> 00:40:54,030
what they're seeing degrade enough that

00:40:51,340 --> 00:40:56,470
they we start to drive them or way

00:40:54,030 --> 00:40:58,420
tagged in filterable with synthetics

00:40:56,470 --> 00:41:01,150
they're robots so again we want to start

00:40:58,420 --> 00:41:05,350
to try to use the real user information

00:41:01,150 --> 00:41:07,930
that we've collected to improve what

00:41:05,350 --> 00:41:09,970
we're doing on our synthetic sides so

00:41:07,930 --> 00:41:12,130
can we make synthetic tests that are

00:41:09,970 --> 00:41:14,020
also geographically distributed can we

00:41:12,130 --> 00:41:15,880
make synthetic tests that are using

00:41:14,020 --> 00:41:17,590
different connections and using

00:41:15,880 --> 00:41:19,990
different browsers or are we just

00:41:17,590 --> 00:41:22,570
running from one server running selenium

00:41:19,990 --> 00:41:24,060
on an old version of Firefox right those

00:41:22,570 --> 00:41:26,620
are two very different things

00:41:24,060 --> 00:41:30,070
with the Rum side can we extract that

00:41:26,620 --> 00:41:31,540
that data from them so can we know with

00:41:30,070 --> 00:41:33,040
our real user monitoring where they're

00:41:31,540 --> 00:41:34,420
coming from and can we gather the

00:41:33,040 --> 00:41:37,690
information about their browser and

00:41:34,420 --> 00:41:39,430
their connection and then finally for

00:41:37,690 --> 00:41:41,710
long lives for both of these we really

00:41:39,430 --> 00:41:43,570
want to see trends we want to see the

00:41:41,710 --> 00:41:46,420
trends and how our users are interacting

00:41:43,570 --> 00:41:48,970
with our applications and our sites for

00:41:46,420 --> 00:41:50,590
real user monitoring it's a lot of the

00:41:48,970 --> 00:41:52,330
real user monitoring services out there

00:41:50,590 --> 00:41:53,860
have started to correlate against

00:41:52,330 --> 00:41:56,200
business metrics which is really really

00:41:53,860 --> 00:41:59,050
handy being able to see how fast

00:41:56,200 --> 00:42:01,540
something is to tying that into some

00:41:59,050 --> 00:42:03,310
sort of you know e-commerce system and

00:42:01,540 --> 00:42:06,640
seeing how many people buy things

00:42:03,310 --> 00:42:08,230
because things are faster on the open

00:42:06,640 --> 00:42:10,240
source side there's not a whole lot here

00:42:08,230 --> 00:42:12,220
which is really sad there there isn't

00:42:10,240 --> 00:42:15,640
any really synthetic testing

00:42:12,220 --> 00:42:16,780
out there for true synthetic testing so

00:42:15,640 --> 00:42:18,670
that's why I didn't put it up here

00:42:16,780 --> 00:42:20,140
there's a lot of load testing so when we

00:42:18,670 --> 00:42:23,010
think of things like that we're thinking

00:42:20,140 --> 00:42:25,630
of for example a pants apache bench

00:42:23,010 --> 00:42:27,910
which will just hit your site and just

00:42:25,630 --> 00:42:29,319
as if it's up or down but very few

00:42:27,910 --> 00:42:32,950
things will actually run through and do

00:42:29,319 --> 00:42:35,109
a whole host of tests on the run side

00:42:32,950 --> 00:42:37,500
boomerang is really the main one that's

00:42:35,109 --> 00:42:40,599
out there boomerang was started by Yahoo

00:42:37,500 --> 00:42:42,940
got the team that started it ended up

00:42:40,599 --> 00:42:46,810
going to sew stuff so they ended up

00:42:42,940 --> 00:42:48,550
running it again I'm not a data dog

00:42:46,810 --> 00:42:50,710
infomercial but if you do run data dog

00:42:48,550 --> 00:42:52,960
and you run a integrate boomerang this

00:42:50,710 --> 00:42:55,930
guy actually did it and it's pretty cool

00:42:52,960 --> 00:43:02,319
and also get a little crazy but yeah

00:42:55,930 --> 00:43:04,150
that's worth checking out yeah let's do

00:43:02,319 --> 00:43:07,450
questions at the end just to ensure that

00:43:04,150 --> 00:43:10,420
we have enough time so not monitoring

00:43:07,450 --> 00:43:12,460
but maybe so things like sites cuidado

00:43:10,420 --> 00:43:14,440
and sho slow are really useful for

00:43:12,460 --> 00:43:16,119
actually starting to gauge your

00:43:14,440 --> 00:43:17,859
front-end performance they're not

00:43:16,119 --> 00:43:19,420
actually monitoring because they're not

00:43:17,859 --> 00:43:22,089
going to be running all the time or

00:43:19,420 --> 00:43:24,310
sending you alerts popular services in

00:43:22,089 --> 00:43:26,710
this category our speed curve catch

00:43:24,310 --> 00:43:29,650
point Pingdom those are all really

00:43:26,710 --> 00:43:32,619
popular I've got two more sections that

00:43:29,650 --> 00:43:33,760
aren't actually within those three

00:43:32,619 --> 00:43:35,680
because I did mention there's sort of

00:43:33,760 --> 00:43:38,050
five sections of monitoring one is other

00:43:35,680 --> 00:43:40,500
and specialized so here really it's just

00:43:38,050 --> 00:43:42,640
thinking about if you have a spectrum

00:43:40,500 --> 00:43:45,339
starting to think of where are those

00:43:42,640 --> 00:43:46,599
gaps so for some people this might be

00:43:45,339 --> 00:43:48,730
things like network if you're running

00:43:46,599 --> 00:43:50,200
all of your own systems and you're not

00:43:48,730 --> 00:43:51,760
hosting somewhere then you might be

00:43:50,200 --> 00:43:54,670
running your own network so you might

00:43:51,760 --> 00:43:56,530
consider how you network those things or

00:43:54,670 --> 00:43:58,540
how you monitor your networks other

00:43:56,530 --> 00:44:00,460
things would be things like security

00:43:58,540 --> 00:44:02,079
monitoring so there are security

00:44:00,460 --> 00:44:04,510
monitoring solutions out there that

00:44:02,079 --> 00:44:06,490
essentially will monitor your systems to

00:44:04,510 --> 00:44:09,760
let you know if they think you've been

00:44:06,490 --> 00:44:10,900
hacked configuration monitoring physical

00:44:09,760 --> 00:44:13,450
monitoring if you're running your own

00:44:10,900 --> 00:44:14,980
data center specialized so they're

00:44:13,450 --> 00:44:16,690
they're monitors out there like run

00:44:14,980 --> 00:44:20,970
scope which are specially designed to

00:44:16,690 --> 00:44:23,740
hit api's and test your API endpoints

00:44:20,970 --> 00:44:26,040
open source projects in this area open

00:44:23,740 --> 00:44:30,270
NMS is a network monitor

00:44:26,040 --> 00:44:31,890
project OS SEC is a security monitoring

00:44:30,270 --> 00:44:33,810
project so those are both really

00:44:31,890 --> 00:44:36,360
interesting and then popular services

00:44:33,810 --> 00:44:39,000
here Athleta is like one of the leaders

00:44:36,360 --> 00:44:40,980
in network monitoring tripwire if you're

00:44:39,000 --> 00:44:43,740
familiar with it is they do security

00:44:40,980 --> 00:44:45,480
monitoring particularly for services New

00:44:43,740 --> 00:44:47,130
Relic infrastructure so New Relic does

00:44:45,480 --> 00:44:49,230
APM they do have an infrastructure

00:44:47,130 --> 00:44:51,360
product which is largely configuration

00:44:49,230 --> 00:44:53,460
monitoring so they can let you know how

00:44:51,360 --> 00:44:56,220
all of your servers like what sort of

00:44:53,460 --> 00:44:58,980
software they're running and then

00:44:56,220 --> 00:45:01,110
finally logging another tool so this is

00:44:58,980 --> 00:45:02,850
one that comes up a lot for me people

00:45:01,110 --> 00:45:04,860
ask how does logging play with

00:45:02,850 --> 00:45:06,290
monitoring and logging at school because

00:45:04,860 --> 00:45:08,670
logging goes all across the spectrum

00:45:06,290 --> 00:45:10,950
when we think of the things that we're

00:45:08,670 --> 00:45:12,420
writing for running writing apps or

00:45:10,950 --> 00:45:14,910
writing things that run on the front end

00:45:12,420 --> 00:45:17,040
we largely have those emitting logs -

00:45:14,910 --> 00:45:18,860
like console but sometimes we have those

00:45:17,040 --> 00:45:21,150
emitting logs they're transmitted back

00:45:18,860 --> 00:45:23,070
similarly we're all familiar with Drupal

00:45:21,150 --> 00:45:23,700
watchdogs so we're generating logs on

00:45:23,070 --> 00:45:25,320
that end

00:45:23,700 --> 00:45:27,270
we're running infrastructure of those

00:45:25,320 --> 00:45:29,610
well generate logs logs aren't

00:45:27,270 --> 00:45:32,160
monitoring though logs are a horrible

00:45:29,610 --> 00:45:33,960
way to monitor there's a computational

00:45:32,160 --> 00:45:36,660
overhead to these and storage overhead

00:45:33,960 --> 00:45:37,860
when you think of logging how many of

00:45:36,660 --> 00:45:39,960
you are developers and you've actually

00:45:37,860 --> 00:45:40,890
written log statements out to watchdog

00:45:39,960 --> 00:45:43,470
or something else

00:45:40,890 --> 00:45:45,900
yeah like most of you have and you've

00:45:43,470 --> 00:45:48,030
written a log and you've made it really

00:45:45,900 --> 00:45:50,670
long because you wanted all that good

00:45:48,030 --> 00:45:52,290
info right that's the way you write logs

00:45:50,670 --> 00:45:54,450
it's the way that we all write logs

00:45:52,290 --> 00:45:56,010
because we want that useful info but if

00:45:54,450 --> 00:45:57,870
you're trying to monitor off of a log

00:45:56,010 --> 00:45:59,400
you're trying to pull out that metric

00:45:57,870 --> 00:46:01,650
which means what you're essentially

00:45:59,400 --> 00:46:03,900
running some sort of regex

00:46:01,650 --> 00:46:05,790
across a giant string to pull out that

00:46:03,900 --> 00:46:08,190
information and then you're doing math

00:46:05,790 --> 00:46:09,960
on that you're either averaging it out

00:46:08,190 --> 00:46:12,180
or you're summing it up you're doing

00:46:09,960 --> 00:46:14,910
these things which so imagine that over

00:46:12,180 --> 00:46:17,190
a distributed system you're now

00:46:14,910 --> 00:46:19,260
aggregating a bunch of huge amounts of

00:46:17,190 --> 00:46:21,150
text which you have to store so that's

00:46:19,260 --> 00:46:22,890
expensive but you're also having the

00:46:21,150 --> 00:46:24,960
computational overhead of pulling the

00:46:22,890 --> 00:46:26,430
metrics out of your logs so logs are

00:46:24,960 --> 00:46:29,100
affordable for monitoring that logs are

00:46:26,430 --> 00:46:31,440
amazing for finding that additional

00:46:29,100 --> 00:46:34,020
context and helping you solve things a

00:46:31,440 --> 00:46:35,640
co-worker of mine likes to point out

00:46:34,020 --> 00:46:36,760
that logs are good for discovering the

00:46:35,640 --> 00:46:38,620
unknown unknown

00:46:36,760 --> 00:46:40,090
monitoring is great you set up

00:46:38,620 --> 00:46:41,890
dashboards for you the things you know

00:46:40,090 --> 00:46:45,040
about but when something fails that you

00:46:41,890 --> 00:46:46,720
don't know about logs are usually really

00:46:45,040 --> 00:46:49,330
really useful for that because we've all

00:46:46,720 --> 00:46:51,910
right verbose logs so really you want

00:46:49,330 --> 00:46:55,390
log management tools not log monitoring

00:46:51,910 --> 00:46:59,200
tools open source projects around this

00:46:55,390 --> 00:47:02,170
elk the elk stack elf elasticsearch logs

00:46:59,200 --> 00:47:03,700
- gabbana is super popular gray log is

00:47:02,170 --> 00:47:06,400
another one if you don't want to go down

00:47:03,700 --> 00:47:08,530
the ELQ stock route popular services

00:47:06,400 --> 00:47:10,600
here would be Splunk I think most of it

00:47:08,530 --> 00:47:11,290
sort of heard of Splunk zuma logic is a

00:47:10,600 --> 00:47:14,320
great one

00:47:11,290 --> 00:47:18,220
logs i/o and log matticchio are also

00:47:14,320 --> 00:47:19,480
fantastic and then the other tools that

00:47:18,220 --> 00:47:21,550
kind of fall in this that aren't

00:47:19,480 --> 00:47:24,310
monitoring but are often considered with

00:47:21,550 --> 00:47:26,170
monitoring on-call management tools so

00:47:24,310 --> 00:47:27,970
things that actually let you know when

00:47:26,170 --> 00:47:30,340
something goes wrong error tracking tool

00:47:27,970 --> 00:47:32,230
so a lot of times this is gathering up

00:47:30,340 --> 00:47:34,780
the errors from that logging tool and

00:47:32,230 --> 00:47:36,700
making them easily available and

00:47:34,780 --> 00:47:38,440
starting to track your errors and then

00:47:36,700 --> 00:47:40,150
anomaly detection is often mentioned in

00:47:38,440 --> 00:47:43,270
this so essentially how do we take our

00:47:40,150 --> 00:47:44,950
metrics and find interesting anomalies

00:47:43,270 --> 00:47:48,490
or know about things that we may not be

00:47:44,950 --> 00:47:51,690
able to see in dashboards open source

00:47:48,490 --> 00:47:54,070
projects for these Cabot and open duty

00:47:51,690 --> 00:47:56,650
open duty is essentially an open source

00:47:54,070 --> 00:47:59,710
version of pager duty these are really

00:47:56,650 --> 00:48:01,570
interesting but I kind of wonder about

00:47:59,710 --> 00:48:03,760
the wisdom of this the whole point

00:48:01,570 --> 00:48:06,130
behind something like pager duty or

00:48:03,760 --> 00:48:07,960
Victor ops or ServiceNow any of these

00:48:06,130 --> 00:48:09,580
that are alerting you they're trying to

00:48:07,960 --> 00:48:10,930
alert you that your system went down and

00:48:09,580 --> 00:48:13,030
if you're hosting them yourself

00:48:10,930 --> 00:48:14,230
chances are they went down as well so

00:48:13,030 --> 00:48:17,590
that's why you want to pay other people

00:48:14,230 --> 00:48:20,080
to do it but again pager duty Victor ops

00:48:17,590 --> 00:48:23,200
ops Genie service now all great services

00:48:20,080 --> 00:48:25,660
for on-call management error tracking

00:48:23,200 --> 00:48:28,390
sentry is an open source project they

00:48:25,660 --> 00:48:32,020
also do a paid hosted version err bit

00:48:28,390 --> 00:48:34,150
and squash squash do is and one that I

00:48:32,020 --> 00:48:36,040
hadn't found out until recently but

00:48:34,150 --> 00:48:38,410
that's from the people that built square

00:48:36,040 --> 00:48:40,930
the credit card processing like iPad

00:48:38,410 --> 00:48:43,420
thing that you find in stores and then

00:48:40,930 --> 00:48:46,780
popular services sentry io roll bar

00:48:43,420 --> 00:48:48,190
regen bug snag all good ways to start to

00:48:46,780 --> 00:48:48,780
track your errors and get that

00:48:48,190 --> 00:48:52,590
information

00:48:48,780 --> 00:48:54,060
of them anomaly detection there's even

00:48:52,590 --> 00:48:57,180
less here there's some really cool

00:48:54,060 --> 00:48:59,340
projects but they're tricky to set up so

00:48:57,180 --> 00:49:02,580
skyline is the one that FD came up with

00:48:59,340 --> 00:49:04,620
it took their stuff out of I believe it

00:49:02,580 --> 00:49:07,410
was graphite and would try to find

00:49:04,620 --> 00:49:11,190
anomalies within their data it's no

00:49:07,410 --> 00:49:13,110
longer being maintained so egads is an

00:49:11,190 --> 00:49:15,860
interesting one that's from Yahoo and

00:49:13,110 --> 00:49:19,110
luminol is from LinkedIn

00:49:15,860 --> 00:49:23,070
egads is it's interesting but it doesn't

00:49:19,110 --> 00:49:26,100
it it's not particularly meant well

00:49:23,070 --> 00:49:28,230
egads sorry let me look at these notes

00:49:26,100 --> 00:49:29,730
egads is actually really fantastic it's

00:49:28,230 --> 00:49:31,920
written in Java though so it's kind of

00:49:29,730 --> 00:49:33,780
tricky to set up and it's generic so you

00:49:31,920 --> 00:49:36,870
have to start to write your own queries

00:49:33,780 --> 00:49:39,360
against things so find a good data

00:49:36,870 --> 00:49:41,640
scientist and bug them if you actually

00:49:39,360 --> 00:49:43,260
want to run that luminol is interesting

00:49:41,640 --> 00:49:45,060
but it's not particularly meant for

00:49:43,260 --> 00:49:47,030
real-time and really if you're thinking

00:49:45,060 --> 00:49:49,560
about anomaly detection for your metrics

00:49:47,030 --> 00:49:51,690
you want that real-time to be able to

00:49:49,560 --> 00:49:54,600
understand what's going on and see those

00:49:51,690 --> 00:49:57,180
anomalies and get alerts other services

00:49:54,600 --> 00:49:59,880
here Amazon if you're running in AWS has

00:49:57,180 --> 00:50:01,830
Kinesis again this is a sort of similar

00:49:59,880 --> 00:50:05,100
to egads you have to write your own

00:50:01,830 --> 00:50:06,920
queries for this so again find your your

00:50:05,100 --> 00:50:09,870
nearest data scientist and bug them

00:50:06,920 --> 00:50:11,970
Asher has a machine learning which it

00:50:09,870 --> 00:50:13,560
they say tries to make this easier I

00:50:11,970 --> 00:50:15,840
haven't played with machines they're

00:50:13,560 --> 00:50:19,440
machine learning so I can't say how good

00:50:15,840 --> 00:50:21,210
or bad it is but in short just to wrap

00:50:19,440 --> 00:50:23,640
this up really follow your application

00:50:21,210 --> 00:50:26,160
spectrum start to think of things less

00:50:23,640 --> 00:50:28,080
of buckets or the teams that are

00:50:26,160 --> 00:50:29,790
actually running them and start to think

00:50:28,080 --> 00:50:31,640
of them more as a spectrum of what

00:50:29,790 --> 00:50:34,500
happens when your users make a request

00:50:31,640 --> 00:50:38,550
so that you can start to see those gaps

00:50:34,500 --> 00:50:40,680
of what you need and again remember

00:50:38,550 --> 00:50:44,240
those four qualities of good metrics so

00:50:40,680 --> 00:50:47,760
is it well understood is it long lived

00:50:44,240 --> 00:50:51,780
is it tagged in filterable and then is

00:50:47,760 --> 00:50:53,670
it sufficiently granular we do have on

00:50:51,780 --> 00:50:55,380
our data dog blog we have some more

00:50:53,670 --> 00:50:57,240
information about how to collect the

00:50:55,380 --> 00:51:00,090
right data so that would be interesting

00:50:57,240 --> 00:51:01,750
if you like to read blog stuff but at

00:51:00,090 --> 00:51:03,130
this point

00:51:01,750 --> 00:51:05,170
questions and I know there's at least

00:51:03,130 --> 00:51:06,880
one there is a mic in the center of the

00:51:05,170 --> 00:51:10,540
room and I think they want us to use

00:51:06,880 --> 00:51:13,390
that and again if you if you think of

00:51:10,540 --> 00:51:15,520
anything beyond this session hit me up

00:51:13,390 --> 00:51:18,490
on Twitter I'm get bisect I'm not

00:51:15,520 --> 00:51:20,440
actually eating's or Preston so but you

00:51:18,490 --> 00:51:21,850
should you should tweet out something if

00:51:20,440 --> 00:51:23,580
you haven't already just a mess with

00:51:21,850 --> 00:51:27,700
them

00:51:23,580 --> 00:51:29,380
testing testing all right um I think you

00:51:27,700 --> 00:51:32,260
had said that there weren't that many

00:51:29,380 --> 00:51:36,190
great tools for simulating users is that

00:51:32,260 --> 00:51:38,920
right uh so synthetic monitoring yeah so

00:51:36,190 --> 00:51:40,930
synthetic monitoring is essentially

00:51:38,920 --> 00:51:42,250
monitoring with computers having

00:51:40,930 --> 00:51:45,790
computers pretend that they're real

00:51:42,250 --> 00:51:49,180
users and constantly running tests or

00:51:45,790 --> 00:51:51,070
running predefined tests to interact

00:51:49,180 --> 00:51:54,430
with your site and generating metrics

00:51:51,070 --> 00:51:58,510
from that you could potentially build

00:51:54,430 --> 00:52:01,000
something with like B hat to like run

00:51:58,510 --> 00:52:03,370
that and test you know you would write a

00:52:01,000 --> 00:52:07,210
story as you would with B hat and it

00:52:03,370 --> 00:52:10,330
would run and do things but it's really

00:52:07,210 --> 00:52:13,120
hard with in B hat for that to start to

00:52:10,330 --> 00:52:15,940
get you really accurate measurements in

00:52:13,120 --> 00:52:17,710
time so it would be it would be as if

00:52:15,940 --> 00:52:20,710
with code

00:52:17,710 --> 00:52:24,610
you were you were review you were almost

00:52:20,710 --> 00:52:26,530
reviewing the monitoring with like the

00:52:24,610 --> 00:52:29,650
code was also reviewing the monitoring

00:52:26,530 --> 00:52:31,240
itself and producing stat yeah I mean

00:52:29,650 --> 00:52:34,450
it's not reviewing the monitoring so

00:52:31,240 --> 00:52:36,730
much as example if you were to try to do

00:52:34,450 --> 00:52:40,630
this in B hat you would have some sort

00:52:36,730 --> 00:52:44,050
of B hat story that was like as a user

00:52:40,630 --> 00:52:46,210
when I go to the home page and I click

00:52:44,050 --> 00:52:49,090
on this button to log in and I enter

00:52:46,210 --> 00:52:51,880
this login credential I should see my

00:52:49,090 --> 00:52:53,980
user profile page yeah an actual

00:52:51,880 --> 00:52:56,440
synthetic monitoring tool would actually

00:52:53,980 --> 00:52:57,820
measure the time distance between how

00:52:56,440 --> 00:52:59,890
long did it take for the site to load

00:52:57,820 --> 00:53:02,620
when the site loaded how long did it

00:52:59,890 --> 00:53:06,010
take for the button the login button to

00:53:02,620 --> 00:53:08,200
appear how long did it do for after I

00:53:06,010 --> 00:53:11,260
entered the the login credentials for

00:53:08,200 --> 00:53:13,490
you know things to happen and you know

00:53:11,260 --> 00:53:15,710
largely B hat wasn't designed for that

00:53:13,490 --> 00:53:17,660
right so you could put in some timers

00:53:15,710 --> 00:53:20,330
but because b-hat wasn't designed for

00:53:17,660 --> 00:53:22,730
that you you will get some variability

00:53:20,330 --> 00:53:25,520
be happening how long it takes each run

00:53:22,730 --> 00:53:27,650
that may not be variability in your

00:53:25,520 --> 00:53:31,010
systems right

00:53:27,650 --> 00:53:33,589
so tools for tools for simulating the

00:53:31,010 --> 00:53:35,359
actions are out there but tools for

00:53:33,589 --> 00:53:38,180
doing something with reading at your

00:53:35,359 --> 00:53:39,920
agent and and getting metrics from them

00:53:38,180 --> 00:53:48,170
aren't as developed yet

00:53:39,920 --> 00:53:49,940
yeah got it any other questions no I

00:53:48,170 --> 00:53:52,070
know that was kind of a barrage of like

00:53:49,940 --> 00:53:54,200
here's a lot of things and you should

00:53:52,070 --> 00:53:56,450
monitor them all so I'm sure all of you

00:53:54,200 --> 00:53:58,760
have are using some of those monitoring

00:53:56,450 --> 00:54:01,480
tools but you might be missing others so

00:53:58,760 --> 00:54:03,560
consider consider what you're missing

00:54:01,480 --> 00:54:05,390
cool well if there are no other

00:54:03,560 --> 00:54:07,310
questions again hit me up on Twitter or

00:54:05,390 --> 00:54:10,820
via email happy to answer your questions

00:54:07,310 --> 00:54:12,050
and I'll hang out up front here for a

00:54:10,820 --> 00:54:13,340
while in case you do have questions

00:54:12,050 --> 00:54:21,949
thanks for coming

00:54:13,340 --> 00:54:21,949
[Applause]

00:55:03,119 --> 00:55:17,190
with that yeah I don't very often

00:55:13,410 --> 00:55:19,920
because well yeah oh you know when I

00:55:17,190 --> 00:55:21,420
could have used it though the very first

00:55:19,920 --> 00:55:30,900
time that I crashed something at day to

00:55:21,420 --> 00:55:32,460
dog Hey yeah so I I had committed I'd

00:55:30,900 --> 00:55:39,269
committed like a minor like

00:55:32,460 --> 00:55:44,119
documentation change and I didn't crash

00:55:39,269 --> 00:55:44,119
the main dated dog ya know

00:56:33,380 --> 00:56:42,990
like our system like Flags me down and

00:56:41,460 --> 00:56:46,440
then I felt like our head of engineering

00:56:42,990 --> 00:56:48,300
like dude totally high school you don't

00:56:46,440 --> 00:56:51,570
get like two men like merge things and

00:56:48,300 --> 00:56:53,820
walk away but it's like I didn't I like

00:56:51,570 --> 00:56:56,540
didn't even Burgess like I walked away

00:56:53,820 --> 00:56:56,540

YouTube URL: https://www.youtube.com/watch?v=csxbfEXbNLc


