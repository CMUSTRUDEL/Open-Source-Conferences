Title: DrupalCon Baltimore 2017: Continuous Integration is For Teams
Publication date: 2017-04-25
Playlist: DrupalCon Baltimore 2017
Description: 
	Discussions of Continuous Integration often revolve around the coolest new tools and technologies. Have you tried Yarn yet? How about Docker, Composer, Gulp, Grunt, or Robo? The buzzwords of modern development can be dizzying.

Join Drew Gorton of Pantheon and Rob Bayliss of Last Call Media for a real world look at Continuous Integration. This session will go past the tooling hype and look at the benefits of CI for developers, project managers, and clients. Ultimately a successful Continuous Integration practice makes a team work faster, safer, and more predictably.

Attendees will learn:

The Foundation: How Continuous Integration, Continuous Delivery, and Continuous Deployment build on each other.
Tips & Tricks: Options for Continuous Integration practices with Pantheon.
Real Examples: How Continuous Integration fits into the lifecycle of Last Call Media projects.
Next Steps: Prioritizing potential improvements to your own process.
Slides are at https://goo.gl/6U1bBn
Captions: 
	00:00:01,070 --> 00:00:05,040
Thirteen's it's probably obvious

00:00:02,580 --> 00:00:06,720
hopefully from from the little slide

00:00:05,040 --> 00:00:07,200
here but we're going to go ahead and get

00:00:06,720 --> 00:00:10,050
started

00:00:07,200 --> 00:00:11,429
my name is drew Gorton I am the director

00:00:10,050 --> 00:00:13,590
of agency and community outreach at

00:00:11,429 --> 00:00:16,500
Pantheon if you're not already familiar

00:00:13,590 --> 00:00:18,539
with Pantheon we are the best drupal

00:00:16,500 --> 00:00:20,400
optimized hosting on the planet and we

00:00:18,539 --> 00:00:21,960
combine that with some really great

00:00:20,400 --> 00:00:23,460
tools to make teams more effective and

00:00:21,960 --> 00:00:25,230
efficient if you want to hear more about

00:00:23,460 --> 00:00:27,689
that you can come down we go demo booth

00:00:25,230 --> 00:00:30,000
t-shirts and you can get hold of me

00:00:27,689 --> 00:00:34,320
these ways so Dee Gordon on the Twitter

00:00:30,000 --> 00:00:37,350
that's my email and hey I'm Rob Bayless

00:00:34,320 --> 00:00:38,790
I'm the CTO at last call media you

00:00:37,350 --> 00:00:41,370
haven't heard of last call media where a

00:00:38,790 --> 00:00:42,590
small Drupal agency in western

00:00:41,370 --> 00:00:44,730
Massachusetts

00:00:42,590 --> 00:00:47,399
personally I spend a lot of time working

00:00:44,730 --> 00:00:49,950
with organizations on their process and

00:00:47,399 --> 00:00:51,239
their development workflow oh and for

00:00:49,950 --> 00:00:53,520
those of you just coming in it's okay

00:00:51,239 --> 00:00:55,829
let's friend the crowd there are seats

00:00:53,520 --> 00:01:00,120
couple look at the front so make your

00:00:55,829 --> 00:01:01,770
way in no worries so we're talking about

00:01:00,120 --> 00:01:03,930
some streets integration and just a sort

00:01:01,770 --> 00:01:05,850
of level set continuous integration is

00:01:03,930 --> 00:01:07,740
not something that was invented with the

00:01:05,850 --> 00:01:11,100
web continuous integration as a computer

00:01:07,740 --> 00:01:11,610
sort of like best practices evolved over

00:01:11,100 --> 00:01:13,920
many years

00:01:11,610 --> 00:01:16,530
we recently relatively recently as a

00:01:13,920 --> 00:01:18,390
community of practitioners have picked

00:01:16,530 --> 00:01:20,310
up continuous integration said we should

00:01:18,390 --> 00:01:22,259
do this for websites now and so on in

00:01:20,310 --> 00:01:24,450
the context of websites that josh pranic

00:01:22,259 --> 00:01:27,960
says it's really the process of taking

00:01:24,450 --> 00:01:30,900
your live content and configuration and

00:01:27,960 --> 00:01:32,880
combining it with the latest dev code

00:01:30,900 --> 00:01:35,159
the code that's in process and putting

00:01:32,880 --> 00:01:36,780
together those quickly and fearlessly

00:01:35,159 --> 00:01:38,939
and being able to see the results and

00:01:36,780 --> 00:01:41,009
know what's going to happen if you

00:01:38,939 --> 00:01:42,689
actually get that stuff live so that's

00:01:41,009 --> 00:01:44,220
really all you know like we have lots

00:01:42,689 --> 00:01:45,720
and lots of jargon words what does take

00:01:44,220 --> 00:01:48,509
continuous integration that's really

00:01:45,720 --> 00:01:50,180
what it's all about and continuous

00:01:48,509 --> 00:01:52,140
integration assumes a couple of things

00:01:50,180 --> 00:01:54,840
one of those is that that some time

00:01:52,140 --> 00:01:55,979
compiling or building again this has

00:01:54,840 --> 00:01:59,219
been common in computer science for a

00:01:55,979 --> 00:02:02,969
long time and those things take a lot of

00:01:59,219 --> 00:02:05,189
pack and as xkcd reminds us it's like

00:02:02,969 --> 00:02:07,740
it's a delay between you going ahead and

00:02:05,189 --> 00:02:09,989
hitting something and then the computers

00:02:07,740 --> 00:02:11,250
coming back the results and you know

00:02:09,989 --> 00:02:13,740
they capture quite well there's some

00:02:11,250 --> 00:02:15,720
downtime their time

00:02:13,740 --> 00:02:16,920
which you're able to legitimately claim

00:02:15,720 --> 00:02:18,150
you're working while sword-fighting

00:02:16,920 --> 00:02:20,250
because the computers are doing the work

00:02:18,150 --> 00:02:21,480
for you you might choose to spend your

00:02:20,250 --> 00:02:22,980
time talking your project manager or

00:02:21,480 --> 00:02:27,720
catching about slack or other things but

00:02:22,980 --> 00:02:29,070
also legit so I just want to talk a

00:02:27,720 --> 00:02:31,320
little bit about how we got here because

00:02:29,070 --> 00:02:32,790
this is not the end of the evolution of

00:02:31,320 --> 00:02:34,530
continuous integration and all the tools

00:02:32,790 --> 00:02:37,110
and the the things that we're inventing

00:02:34,530 --> 00:02:40,910
to make our jobs easier so just looking

00:02:37,110 --> 00:02:43,290
back aways once upon a time web pages

00:02:40,910 --> 00:02:46,320
were very simple things websites were

00:02:43,290 --> 00:02:48,780
made a very simple thing HTML CSS and

00:02:46,320 --> 00:02:49,770
JavaScript into assets and that's where

00:02:48,780 --> 00:02:51,960
we started in 90s

00:02:49,770 --> 00:02:54,660
we're building sites that are just these

00:02:51,960 --> 00:02:56,880
things this was all of the layers and

00:02:54,660 --> 00:02:58,800
those sites might look like this

00:02:56,880 --> 00:03:00,510
and for those as anybody Todd Dietrich's

00:02:58,800 --> 00:03:02,490
presentation earlier like apparently

00:03:00,510 --> 00:03:05,310
this is he also featured this site this

00:03:02,490 --> 00:03:07,230
site still exists called spacejam for

00:03:05,310 --> 00:03:09,240
those who remember the web of the 90s it

00:03:07,230 --> 00:03:10,710
was a glorious time of doing really

00:03:09,240 --> 00:03:14,490
interesting things with images and

00:03:10,710 --> 00:03:18,020
whatnot and anyway this is an old

00:03:14,490 --> 00:03:23,610
website still works HTML CSS JavaScript

00:03:18,020 --> 00:03:26,100
some assets etc however when you are

00:03:23,610 --> 00:03:27,420
managing a site that has a lot of those

00:03:26,100 --> 00:03:30,300
things to start running the problems

00:03:27,420 --> 00:03:32,790
right so Rasmus illarionov invented PHP

00:03:30,300 --> 00:03:36,240
to account for some of those things it

00:03:32,790 --> 00:03:38,400
was basically a tool for helping process

00:03:36,240 --> 00:03:41,190
forms as well as to do some templating

00:03:38,400 --> 00:03:43,860
right and this PHP then got involved to

00:03:41,190 --> 00:03:45,660
help build all of these other things and

00:03:43,860 --> 00:03:47,760
then that sort of kicked off with the

00:03:45,660 --> 00:03:50,910
development of content management

00:03:47,760 --> 00:03:51,930
systems as a thing so PHP the content

00:03:50,910 --> 00:03:54,600
management system is typically something

00:03:51,930 --> 00:03:56,100
as PHP talk to your database it's got

00:03:54,600 --> 00:03:57,540
some source CSS we've got some source

00:03:56,100 --> 00:03:59,010
JavaScript some sort of assets make

00:03:57,540 --> 00:04:01,170
resize those might optimize the

00:03:59,010 --> 00:04:03,750
JavaScript etc and the content

00:04:01,170 --> 00:04:06,780
management system is then doing a build

00:04:03,750 --> 00:04:08,760
for us it's a layer of abstraction that

00:04:06,780 --> 00:04:10,709
is managing all this stuff for us and

00:04:08,760 --> 00:04:12,750
it's kind of doing it on demand oh right

00:04:10,709 --> 00:04:15,030
they might get caching later there but

00:04:12,750 --> 00:04:16,170
this is the start of the the journey

00:04:15,030 --> 00:04:18,030
that we're talking about today really

00:04:16,170 --> 00:04:23,130
this goes all the way back to the idea

00:04:18,030 --> 00:04:25,020
of PHP is the thing because we add more

00:04:23,130 --> 00:04:26,730
tools to make our lives easier so Josh

00:04:25,020 --> 00:04:28,920
make fat pockets

00:04:26,730 --> 00:04:31,860
other things like that get added to our

00:04:28,920 --> 00:04:33,780
tool belt and we start adding yet

00:04:31,860 --> 00:04:35,520
another layer so you have a git repo

00:04:33,780 --> 00:04:38,190
where you have your just make custom

00:04:35,520 --> 00:04:40,220
code your sass is happening CoffeeScript

00:04:38,190 --> 00:04:42,870
is there other things as well perhaps

00:04:40,220 --> 00:04:45,450
but it starts to cause some confusion

00:04:42,870 --> 00:04:48,180
and you know for those of us who make a

00:04:45,450 --> 00:04:49,650
live through this it's sort of

00:04:48,180 --> 00:04:51,330
philosophically you run into some

00:04:49,650 --> 00:04:53,640
questions you need to answer like who

00:04:51,330 --> 00:04:55,650
owns the CSS right so if you're

00:04:53,640 --> 00:04:57,540
compiling as you're working with sass

00:04:55,650 --> 00:05:01,470
because it's helpful it's better than

00:04:57,540 --> 00:05:04,260
raw CSS from in reason what happens are

00:05:01,470 --> 00:05:06,990
you are you storing the artifact that is

00:05:04,260 --> 00:05:08,340
the compiled CSS and what if I use a

00:05:06,990 --> 00:05:09,960
different build tool than Rob or

00:05:08,340 --> 00:05:10,950
somebody else on the team's got plug

00:05:09,960 --> 00:05:13,380
things slightly different you start

00:05:10,950 --> 00:05:15,180
getting into like weird spots and like

00:05:13,380 --> 00:05:17,790
how do we handle this as a team what is

00:05:15,180 --> 00:05:20,280
there what are our rules and whatnot and

00:05:17,790 --> 00:05:21,870
I think philosophically we arrive at the

00:05:20,280 --> 00:05:24,360
spot like what we're trying to do with

00:05:21,870 --> 00:05:27,210
version control is capture the knowledge

00:05:24,360 --> 00:05:29,670
that is required to build the system

00:05:27,210 --> 00:05:31,080
that's that's like the crucial thing

00:05:29,670 --> 00:05:32,880
that what we're trying to do and then

00:05:31,080 --> 00:05:34,350
you let the robots take it from there on

00:05:32,880 --> 00:05:36,600
the system to take it from there and use

00:05:34,350 --> 00:05:39,450
that knowledge and go ahead and create

00:05:36,600 --> 00:05:41,880
the system after that so that it for

00:05:39,450 --> 00:05:45,300
example is what composer does so we had

00:05:41,880 --> 00:05:47,190
tools like composer power and NPM

00:05:45,300 --> 00:05:49,260
to manage these dependencies so you can

00:05:47,190 --> 00:05:51,240
simply declare I watched Drupal 8

00:05:49,260 --> 00:05:54,630
I want this module I want this version

00:05:51,240 --> 00:05:55,020
of this and then system takes it from

00:05:54,630 --> 00:05:58,350
there

00:05:55,020 --> 00:05:59,310
God again extends the chain just a

00:05:58,350 --> 00:06:00,330
little further so now we've got local

00:05:59,310 --> 00:06:02,700
development talking to a git repo

00:06:00,330 --> 00:06:04,920
there's a build tool somewhere the order

00:06:02,700 --> 00:06:07,050
might be reversed for example in your

00:06:04,920 --> 00:06:11,060
per to aesthetic but that then creates a

00:06:07,050 --> 00:06:13,290
CMS and eventually that builds a webpage

00:06:11,060 --> 00:06:15,780
and it can get a little overwhelming

00:06:13,290 --> 00:06:17,460
though like we've already had a lot of

00:06:15,780 --> 00:06:19,260
things that we've had to learn to get to

00:06:17,460 --> 00:06:23,220
this point in web development and we

00:06:19,260 --> 00:06:24,750
just laugh a lot more and so we're going

00:06:23,220 --> 00:06:28,110
to be showing a lot of code we've got a

00:06:24,750 --> 00:06:31,080
git repo that has a lot of sample stuff

00:06:28,110 --> 00:06:33,090
and you'll be able to check that out for

00:06:31,080 --> 00:06:35,910
those of you who are just sort of early

00:06:33,090 --> 00:06:37,470
into continuous integration through make

00:06:35,910 --> 00:06:38,510
maybe taking baby steps or maybe without

00:06:37,470 --> 00:06:43,370
process you're hoping to

00:06:38,510 --> 00:06:45,560
proof it's okay because as Marie Curie

00:06:43,370 --> 00:06:48,140
reminds us like nothing in life is to be

00:06:45,560 --> 00:06:51,610
feared it's only to be understood so

00:06:48,140 --> 00:06:51,610
again we'll be showing some things here

00:06:52,660 --> 00:06:56,360
in order to understand and sometimes

00:06:54,890 --> 00:06:58,010
it's helpful to just take a step back

00:06:56,360 --> 00:07:00,200
like why are we doing all this again

00:06:58,010 --> 00:07:01,570
like that base camp site looks pretty

00:07:00,200 --> 00:07:04,660
good

00:07:01,570 --> 00:07:06,950
could we just get back to the basics and

00:07:04,660 --> 00:07:09,500
what continuous integration really

00:07:06,950 --> 00:07:11,390
allows us there are at least two ways to

00:07:09,500 --> 00:07:13,130
sort of think about this I think for

00:07:11,390 --> 00:07:16,010
your clients for somebody who own the

00:07:13,130 --> 00:07:18,020
website continues a good reliable

00:07:16,010 --> 00:07:21,170
continuous integration practice makes

00:07:18,020 --> 00:07:23,000
frequent updates possible and a much

00:07:21,170 --> 00:07:24,470
lower risk and that means work can get

00:07:23,000 --> 00:07:27,170
done faster and your budget can go

00:07:24,470 --> 00:07:30,170
further as someone who builds websites

00:07:27,170 --> 00:07:31,760
for others a good process gives you

00:07:30,170 --> 00:07:34,250
something you can share across multiple

00:07:31,760 --> 00:07:36,560
projects a chance to fix problems

00:07:34,250 --> 00:07:38,360
permanently so for example as an agency

00:07:36,560 --> 00:07:39,980
you decide look we just want to make

00:07:38,360 --> 00:07:42,260
sure that we're something as simple as

00:07:39,980 --> 00:07:44,510
code styling always following code style

00:07:42,260 --> 00:07:46,880
we're going to build a process that

00:07:44,510 --> 00:07:50,000
always checks for that nice easy sort of

00:07:46,880 --> 00:07:52,550
baby step into this whole thing because

00:07:50,000 --> 00:07:54,890
of what you're doing because what you're

00:07:52,550 --> 00:07:56,960
doing is reflected in your clients sort

00:07:54,890 --> 00:07:58,670
of like confidence and rapid moving and

00:07:56,960 --> 00:08:01,190
agility of feature develop and other

00:07:58,670 --> 00:08:02,990
things like that the word of mouth goes

00:08:01,190 --> 00:08:04,630
up there Trust goes up that's really

00:08:02,990 --> 00:08:08,690
valuable for anyone who builds websites

00:08:04,630 --> 00:08:11,030
for a living because ultimately we get

00:08:08,690 --> 00:08:12,980
future projects because our clients

00:08:11,030 --> 00:08:15,650
recommend us to others and they trust us

00:08:12,980 --> 00:08:18,050
with their future work and so a good CI

00:08:15,650 --> 00:08:20,330
system is it's really foundational and a

00:08:18,050 --> 00:08:23,150
real long-term competitive advantage and

00:08:20,330 --> 00:08:25,340
also since always allows us all to take

00:08:23,150 --> 00:08:28,940
on riskier projects because if you know

00:08:25,340 --> 00:08:30,530
you have a good safety net that's that's

00:08:28,940 --> 00:08:32,599
going to be there sometimes you know you

00:08:30,530 --> 00:08:34,640
get a project like I'm in heritage a

00:08:32,599 --> 00:08:36,740
site that sort of had some code smell to

00:08:34,640 --> 00:08:38,750
it or there's something that's not quite

00:08:36,740 --> 00:08:42,590
in our comfort area I would like us to

00:08:38,750 --> 00:08:45,230
go this direction having a set of tools

00:08:42,590 --> 00:08:47,900
that helps you test your work know

00:08:45,230 --> 00:08:50,330
deploy with confidence can allow you to

00:08:47,900 --> 00:08:51,360
sort of take on a project like that and

00:08:50,330 --> 00:08:53,040
be more confident

00:08:51,360 --> 00:08:55,199
and just open up that sort of new line

00:08:53,040 --> 00:08:57,569
of business or meat that you know new

00:08:55,199 --> 00:09:03,959
clients and have the confidence to be

00:08:57,569 --> 00:09:06,869
able to do that because again in in a

00:09:03,959 --> 00:09:09,600
complex ecosystem it's not about being

00:09:06,869 --> 00:09:12,929
the strongest or the smartest the most

00:09:09,600 --> 00:09:14,549
talented dev but what you need in order

00:09:12,929 --> 00:09:18,509
to survive and grow and thrive in the

00:09:14,549 --> 00:09:23,089
real world is to be responsive to change

00:09:18,509 --> 00:09:25,679
to embrace it get better and improve so

00:09:23,089 --> 00:09:27,209
this is what we're going to be showing

00:09:25,679 --> 00:09:28,860
abouts code here this is sort like the

00:09:27,209 --> 00:09:30,959
scaffold that we are we're painting on

00:09:28,860 --> 00:09:32,759
top of this is happens to be the normal

00:09:30,959 --> 00:09:35,249
Pantheon workflow you have a dev test

00:09:32,759 --> 00:09:36,720
live sort of process built in and then

00:09:35,249 --> 00:09:39,389
the chance to do different kind of

00:09:36,720 --> 00:09:40,769
branches that feed into that and on top

00:09:39,389 --> 00:09:45,809
of this you can do some really cool

00:09:40,769 --> 00:09:47,639
stuff yeah so I just want to talk about

00:09:45,809 --> 00:09:49,920
kind of the workflow that we use the

00:09:47,639 --> 00:09:51,540
last call and how that's a slightly

00:09:49,920 --> 00:09:54,089
different from the normal Pantheon

00:09:51,540 --> 00:09:56,040
workflow and as you mentioned one of the

00:09:54,089 --> 00:09:58,529
really nice features of Pantheon is

00:09:56,040 --> 00:10:01,259
having this multi dev available to to us

00:09:58,529 --> 00:10:05,369
how many of us have used Pantheon multi

00:10:01,259 --> 00:10:08,879
dev how many of us love it we have music

00:10:05,369 --> 00:10:11,519
cool yeah we do - it's really nice to be

00:10:08,879 --> 00:10:13,199
able to create sort of an instance of a

00:10:11,519 --> 00:10:14,850
site that's totally away from the

00:10:13,199 --> 00:10:17,939
production pipeline you don't have to

00:10:14,850 --> 00:10:19,499
have any crossover or commit anything to

00:10:17,939 --> 00:10:21,660
your master branch that you don't want

00:10:19,499 --> 00:10:24,480
to make it to production so it's a

00:10:21,660 --> 00:10:26,819
really powerful idea but when you

00:10:24,480 --> 00:10:29,279
combine it with CI tools really you need

00:10:26,819 --> 00:10:32,220
to be able to integrate with an external

00:10:29,279 --> 00:10:35,309
repository so for us what that means

00:10:32,220 --> 00:10:37,169
this is our sort of feature workflow if

00:10:35,309 --> 00:10:39,629
we have a new feature we're building or

00:10:37,169 --> 00:10:41,639
even a bug fix it's going to go into a

00:10:39,629 --> 00:10:43,619
feature branch it's going to start with

00:10:41,639 --> 00:10:46,619
a developer kind of making the change

00:10:43,619 --> 00:10:49,819
and then pushing it up to github we have

00:10:46,619 --> 00:10:52,889
a tool called circle CI which does our

00:10:49,819 --> 00:10:54,449
continuous integration for us and

00:10:52,889 --> 00:10:56,639
ultimately we're going to be sending

00:10:54,449 --> 00:10:58,769
what's called an artifact off to

00:10:56,639 --> 00:11:00,059
Pantheon that's going to go up to a

00:10:58,769 --> 00:11:03,270
multi dem instance where our

00:11:00,059 --> 00:11:05,220
stakeholders can review it and again

00:11:03,270 --> 00:11:07,620
one of the really sort of powerful tools

00:11:05,220 --> 00:11:10,560
here is being able to take that database

00:11:07,620 --> 00:11:12,300
and files from live back to the multi

00:11:10,560 --> 00:11:15,300
deaths in order to display the most

00:11:12,300 --> 00:11:19,680
recent stuff for review and also back to

00:11:15,300 --> 00:11:21,210
circle CI during the build when we push

00:11:19,680 --> 00:11:24,240
the production it's going to look pretty

00:11:21,210 --> 00:11:27,330
similar we're just going to end up going

00:11:24,240 --> 00:11:30,360
to the master branch on Pantheon rather

00:11:27,330 --> 00:11:33,300
than to a feature branch so really what

00:11:30,360 --> 00:11:36,150
you end up with here is two repositories

00:11:33,300 --> 00:11:40,980
and this is sort of a key idea to this

00:11:36,150 --> 00:11:44,700
whole CI concept in Drupal your source

00:11:40,980 --> 00:11:47,910
repository or what we use for github is

00:11:44,700 --> 00:11:50,760
going to only contain the custom stuff

00:11:47,910 --> 00:11:54,180
so that would be like the site specific

00:11:50,760 --> 00:11:56,040
modules themes whatever and then the

00:11:54,180 --> 00:11:58,680
knowledge of how to get all the other

00:11:56,040 --> 00:12:02,370
stuff so Drupal core isn't even included

00:11:58,680 --> 00:12:05,100
in our source repositories but we have a

00:12:02,370 --> 00:12:08,280
composer JSON that specifies the version

00:12:05,100 --> 00:12:11,700
of Drupal core that we need and circle

00:12:08,280 --> 00:12:13,530
CI is able to pull that in for us what

00:12:11,700 --> 00:12:17,190
gets sent up the Pantheon on the other

00:12:13,530 --> 00:12:18,780
hand is the full site so all of the all

00:12:17,190 --> 00:12:21,900
of the code you're going to need to run

00:12:18,780 --> 00:12:25,290
it so your compiled assets your core

00:12:21,900 --> 00:12:28,200
your contribs stuff plus any PHP

00:12:25,290 --> 00:12:31,440
libraries and so this really answers the

00:12:28,200 --> 00:12:34,500
question of who owns the CSS right it's

00:12:31,440 --> 00:12:39,300
Circle CI that our build tool is in

00:12:34,500 --> 00:12:41,850
charge of creating this for us so I just

00:12:39,300 --> 00:12:44,040
want to take a look at a sort of a

00:12:41,850 --> 00:12:46,560
fictional example this is one of our

00:12:44,040 --> 00:12:48,990
real clients albright-knox art gallery

00:12:46,560 --> 00:12:51,150
in Buffalo New York and they have a

00:12:48,990 --> 00:12:53,820
beautiful-looking Drupal 8 site that we

00:12:51,150 --> 00:12:55,530
took on not too long ago we didn't

00:12:53,820 --> 00:12:58,230
actually do the build on this site and

00:12:55,530 --> 00:13:00,060
so it's sort of unique in that we're

00:12:58,230 --> 00:13:02,400
taking on a project that we are not

00:13:00,060 --> 00:13:04,140
super familiar with and of course one

00:13:02,400 --> 00:13:06,900
way to mitigate the risk of taking on a

00:13:04,140 --> 00:13:11,160
new project like that is to add testing

00:13:06,900 --> 00:13:13,140
around it so let's imagine that this

00:13:11,160 --> 00:13:14,660
client has a change that they'd like to

00:13:13,140 --> 00:13:17,480
make they want to add

00:13:14,660 --> 00:13:19,579
order below their exhibitions block on

00:13:17,480 --> 00:13:21,860
their homepage pretty simple change

00:13:19,579 --> 00:13:24,110
really this is what they wanted to look

00:13:21,860 --> 00:13:29,810
like and kind of tough to see that

00:13:24,110 --> 00:13:32,329
border but it's their improvement yeah

00:13:29,810 --> 00:13:36,230
and you know good designers subtle so

00:13:32,329 --> 00:13:40,009
whatever I'm a developer by the way

00:13:36,230 --> 00:13:41,839
another designer so so anyway first

00:13:40,009 --> 00:13:44,360
steps is going to be creating a github

00:13:41,839 --> 00:13:47,209
issue for it and issues kind of outline

00:13:44,360 --> 00:13:51,050
you know what what the task is I'm sure

00:13:47,209 --> 00:13:53,779
we're all familiar familiar with them so

00:13:51,050 --> 00:13:56,180
we place it in a picture of what we want

00:13:53,779 --> 00:13:59,680
it to look like in sort of a spec on

00:13:56,180 --> 00:14:02,660
what needs to change as a developer

00:13:59,680 --> 00:14:06,050
we're going to go into the codebase

00:14:02,660 --> 00:14:07,910
we're going to make a new CSS rule we're

00:14:06,050 --> 00:14:11,420
going to add a border to the bottom of

00:14:07,910 --> 00:14:13,160
that block title when we save the file

00:14:11,420 --> 00:14:16,730
we're going to have our sass recompile

00:14:13,160 --> 00:14:20,630
for us and then locally the next step of

00:14:16,730 --> 00:14:23,689
course is looking at the change so if we

00:14:20,630 --> 00:14:26,930
reload the browser we can see that

00:14:23,689 --> 00:14:30,980
there's that border there and everything

00:14:26,930 --> 00:14:33,019
looks great so let's ship it so because

00:14:30,980 --> 00:14:35,240
we're using future branches we're not

00:14:33,019 --> 00:14:37,250
going to commit to master we check out a

00:14:35,240 --> 00:14:39,170
new feature branch that's labeled after

00:14:37,250 --> 00:14:41,620
the issue and then we're going to add

00:14:39,170 --> 00:14:44,750
our changes and kind of push them up

00:14:41,620 --> 00:14:47,000
this lets us maintain that isolation and

00:14:44,750 --> 00:14:51,410
over on the github side what we're going

00:14:47,000 --> 00:14:53,209
to end up with is a pull request and I

00:14:51,410 --> 00:14:56,420
suspect most of us have worked with pull

00:14:53,209 --> 00:14:58,160
requests at one point or another but we

00:14:56,420 --> 00:15:00,670
really love them as a way to kind of

00:14:58,160 --> 00:15:03,889
isolate code and also to allow

00:15:00,670 --> 00:15:08,120
non-technical stakeholders to execute

00:15:03,889 --> 00:15:09,649
merges even if they need to so in this

00:15:08,120 --> 00:15:11,000
case we're just creating that pull

00:15:09,649 --> 00:15:14,660
request we're going to leave a little

00:15:11,000 --> 00:15:17,990
description and creating this pull

00:15:14,660 --> 00:15:21,709
request is going to run our continuous

00:15:17,990 --> 00:15:24,050
integration suite for us we create it

00:15:21,709 --> 00:15:26,180
and in this case because this is a

00:15:24,050 --> 00:15:28,040
magical demo it instantly failed

00:15:26,180 --> 00:15:31,490
wouldn't do this in real life

00:15:28,040 --> 00:15:32,600
but it would fail eventually and if you

00:15:31,490 --> 00:15:34,730
know that would be the sword-fighting

00:15:32,600 --> 00:15:38,750
stuff right there yes right we miss a

00:15:34,730 --> 00:15:41,480
whole lot of sword fighting but then

00:15:38,750 --> 00:15:45,260
when we take a look at this build we can

00:15:41,480 --> 00:15:47,450
see what failed and so as the developer

00:15:45,260 --> 00:15:49,670
we're like oh no there's a design

00:15:47,450 --> 00:15:52,370
deviation circle says there's a design

00:15:49,670 --> 00:15:55,340
deviation what does that mean so we can

00:15:52,370 --> 00:15:58,130
go to this artifact tab we can open up

00:15:55,340 --> 00:16:01,670
the report for a tool called backstop

00:15:58,130 --> 00:16:04,990
j/s this is a visual regression testing

00:16:01,670 --> 00:16:07,610
tool that basically snapshots the site

00:16:04,990 --> 00:16:09,290
so on the Left what you're seeing is the

00:16:07,610 --> 00:16:11,450
reference or what it's supposed to look

00:16:09,290 --> 00:16:13,250
like in the middle you're seeing what it

00:16:11,450 --> 00:16:15,950
actually looks like and then on the

00:16:13,250 --> 00:16:19,850
brightest we overlay if we open this up

00:16:15,950 --> 00:16:23,390
and slide this slider we can see sort of

00:16:19,850 --> 00:16:25,580
the difference in real time so we can

00:16:23,390 --> 00:16:28,460
see that we have borders that we didn't

00:16:25,580 --> 00:16:31,010
plan on having so as a developer I now

00:16:28,460 --> 00:16:34,130
have the all the tools that I need to

00:16:31,010 --> 00:16:37,880
fix this I know that my CSS selector was

00:16:34,130 --> 00:16:41,420
way too broad and it's pretty easy to

00:16:37,880 --> 00:16:44,690
fix so really what we just watched was a

00:16:41,420 --> 00:16:47,920
you know 510 minute turnaround time on

00:16:44,690 --> 00:16:51,800
something that may have taken a day to

00:16:47,920 --> 00:16:54,890
sort of for a QA person to come back in

00:16:51,800 --> 00:16:57,050
and look at this ticket if we sent it up

00:16:54,890 --> 00:16:59,540
to a development environment somewhere

00:16:57,050 --> 00:17:01,850
and then they would have to write what

00:16:59,540 --> 00:17:04,040
happened what I expected to see what I

00:17:01,850 --> 00:17:06,020
actually saw and so we're turning that

00:17:04,040 --> 00:17:08,360
around in five minutes so when we talk

00:17:06,020 --> 00:17:10,610
about agility and being able to adapt

00:17:08,360 --> 00:17:15,230
that's really powerful having that fast

00:17:10,610 --> 00:17:16,790
feedback loop so really all we're doing

00:17:15,230 --> 00:17:19,880
here is pushing the work to the machines

00:17:16,790 --> 00:17:22,040
you know we're taking that super boring

00:17:19,880 --> 00:17:24,949
stuff away from the developer and away

00:17:22,040 --> 00:17:27,110
from the QA person and just saying okay

00:17:24,949 --> 00:17:29,030
we know that this footer block which is

00:17:27,110 --> 00:17:31,220
what we were seeing there is prone to

00:17:29,030 --> 00:17:33,560
breakage on this site so let's snapshot

00:17:31,220 --> 00:17:37,510
it let's add a test and then it'll

00:17:33,560 --> 00:17:37,510
always work the way we expect it to

00:17:38,380 --> 00:17:43,670
before I really dive in on the build

00:17:41,690 --> 00:17:45,910
I'm going to get somewhat technical but

00:17:43,670 --> 00:17:47,360
I want to talk about a tool that we use

00:17:45,910 --> 00:17:50,300
internally

00:17:47,360 --> 00:17:52,850
please gulp and this is a tool that a

00:17:50,300 --> 00:17:56,210
lot of agencies use the way we use it is

00:17:52,850 --> 00:18:00,770
maybe slightly different we have a set

00:17:56,210 --> 00:18:05,120
of top-level tasks so we have so install

00:18:00,770 --> 00:18:07,490
check build test and then watch that are

00:18:05,120 --> 00:18:11,600
the same across all of our projects and

00:18:07,490 --> 00:18:15,230
then down below those we have individual

00:18:11,600 --> 00:18:18,800
tasks so install is actually composer

00:18:15,230 --> 00:18:20,990
install and Bower install check is

00:18:18,800 --> 00:18:23,600
actually you know those four things and

00:18:20,990 --> 00:18:25,520
so what this means is that when we

00:18:23,600 --> 00:18:28,040
switch back and forth between projects

00:18:25,520 --> 00:18:32,000
we can have the same top level gulp

00:18:28,040 --> 00:18:35,510
commands for everything that we do and

00:18:32,000 --> 00:18:37,850
then our CI process also has those same

00:18:35,510 --> 00:18:40,010
top level commands this is a really nice

00:18:37,850 --> 00:18:42,200
tool to enable that kind of like fast

00:18:40,010 --> 00:18:45,380
contact switching between projects and

00:18:42,200 --> 00:18:48,260
also to keep our CI builds more or less

00:18:45,380 --> 00:18:50,600
consistent between all the projects it

00:18:48,260 --> 00:18:53,150
also wraps up a whole lot of complexity

00:18:50,600 --> 00:18:54,710
so as a developer I'm not really going

00:18:53,150 --> 00:18:56,780
to need to know what the PHP unit

00:18:54,710 --> 00:18:59,240
configuration is I'm just going to need

00:18:56,780 --> 00:19:02,810
to know where to put my tests and how to

00:18:59,240 --> 00:19:04,190
run it which is just gulp tests so it's

00:19:02,810 --> 00:19:09,740
a nice system and we're going to see it

00:19:04,190 --> 00:19:11,330
a lot in the circle configuration so I

00:19:09,740 --> 00:19:13,120
should just point out here that if

00:19:11,330 --> 00:19:16,250
you're having trouble reading this or

00:19:13,120 --> 00:19:17,840
just want to come back to it later this

00:19:16,250 --> 00:19:19,670
is all available in a public repository

00:19:17,840 --> 00:19:22,310
which we're going to link to multiple

00:19:19,670 --> 00:19:24,440
times all of this stuff is open source

00:19:22,310 --> 00:19:27,050
and it's sort of the platform that we

00:19:24,440 --> 00:19:28,970
use to get started with and you can too

00:19:27,050 --> 00:19:30,920
if you'd like

00:19:28,970 --> 00:19:32,960
so we're looking at the circle that yeah

00:19:30,920 --> 00:19:37,130
mol file and if you've used a system

00:19:32,960 --> 00:19:38,830
like Jenkins or Travis CI you're

00:19:37,130 --> 00:19:41,210
probably familiar with this kind of

00:19:38,830 --> 00:19:44,900
concept you're configuring the build in

00:19:41,210 --> 00:19:46,970
a file and what we're really seeing here

00:19:44,900 --> 00:19:48,680
is the dependency section so this is

00:19:46,970 --> 00:19:52,340
where we start pulling in all of our

00:19:48,680 --> 00:19:54,320
dependencies so you can see we run the

00:19:52,340 --> 00:19:55,490
two that we really care about here our

00:19:54,320 --> 00:19:58,970
yarn install

00:19:55,490 --> 00:20:00,559
and gulp install yarn install is

00:19:58,970 --> 00:20:03,440
actually going to pull down gulp in all

00:20:00,559 --> 00:20:05,960
of those dependencies and then gulp

00:20:03,440 --> 00:20:11,120
install does everything else really

00:20:05,960 --> 00:20:12,830
simple process the next step in the

00:20:11,120 --> 00:20:14,899
build is going to be setting up a Drupal

00:20:12,830 --> 00:20:18,200
site to do that we all know we need a

00:20:14,899 --> 00:20:21,140
database so we set up the settings that

00:20:18,200 --> 00:20:23,690
PHP and then we reach out to Pantheon

00:20:21,140 --> 00:20:27,529
and grab a snapshot of the live database

00:20:23,690 --> 00:20:28,880
if you had sanitizing requirements or

00:20:27,529 --> 00:20:31,340
something like that you could grab them

00:20:28,880 --> 00:20:34,700
from somewhere else too pretty easy and

00:20:31,340 --> 00:20:38,080
then we have a Drupal console command

00:20:34,700 --> 00:20:40,490
and thanks hey-zeus for all your work

00:20:38,080 --> 00:20:46,429
this is a chain command that basically

00:20:40,490 --> 00:20:48,440
runs yeah let's get man yeah this is a

00:20:46,429 --> 00:20:51,679
chain command and this is nice because

00:20:48,440 --> 00:20:53,690
it allows us to in a yamo file specify

00:20:51,679 --> 00:20:55,880
all of the Drupal console commands that

00:20:53,690 --> 00:20:57,679
we want to run after the database is

00:20:55,880 --> 00:21:01,419
imported so that's things like

00:20:57,679 --> 00:21:04,130
configuration import update the database

00:21:01,419 --> 00:21:05,600
that kind of thing so it's really nice

00:21:04,130 --> 00:21:08,390
as far as being able to share code

00:21:05,600 --> 00:21:11,090
between projects then we're going to

00:21:08,390 --> 00:21:15,320
proceed into test and really what that

00:21:11,090 --> 00:21:18,590
means is run the build steps and then

00:21:15,320 --> 00:21:21,710
run our static code checks and then run

00:21:18,590 --> 00:21:25,549
our full-on tests and we're going to see

00:21:21,710 --> 00:21:27,470
all this in action in a moment and then

00:21:25,549 --> 00:21:29,090
finally assuming everything goes well

00:21:27,470 --> 00:21:30,649
during those other phases we're going to

00:21:29,090 --> 00:21:33,730
deploy and we have two different

00:21:30,649 --> 00:21:35,600
workflows and again those really just

00:21:33,730 --> 00:21:39,890
correspond with whether we're going to

00:21:35,600 --> 00:21:42,169
multi dev or to master to production so

00:21:39,890 --> 00:21:45,470
the only difference here is that in this

00:21:42,169 --> 00:21:48,169
bottom one the multi dev step we

00:21:45,470 --> 00:21:50,360
actually create a Pantheon multi dev

00:21:48,169 --> 00:21:52,909
environment on the fly that's kind of

00:21:50,360 --> 00:21:55,520
powerful as a developer I can just

00:21:52,909 --> 00:21:58,820
create a new feature branch send it up

00:21:55,520 --> 00:22:00,590
to github and assuming all my tests pass

00:21:58,820 --> 00:22:03,529
I have a fresh environment for it

00:22:00,590 --> 00:22:04,789
instantly and just like a word on it's

00:22:03,529 --> 00:22:06,260
like so this is a fair amount of code

00:22:04,789 --> 00:22:06,789
and it looks maybe in a format you're

00:22:06,260 --> 00:22:08,109
not familiar

00:22:06,789 --> 00:22:11,079
or some of those like wow there was a

00:22:08,109 --> 00:22:13,059
lot to parse kind of the point of this a

00:22:11,079 --> 00:22:15,449
little bit you write this once now you

00:22:13,059 --> 00:22:17,799
need to cross multiple projects and it's

00:22:15,449 --> 00:22:19,779
that you're giving the machine the tools

00:22:17,799 --> 00:22:21,940
to build the thing and you might have to

00:22:19,779 --> 00:22:25,179
look up the the syntax to write these

00:22:21,940 --> 00:22:27,429
things but you start with a repo or as

00:22:25,179 --> 00:22:28,989
your own thing you really only have to

00:22:27,429 --> 00:22:32,129
figure out once and then you can offload

00:22:28,989 --> 00:22:34,479
that from your brain into the scripts

00:22:32,129 --> 00:22:36,789
exactly yeah as a developer you don't

00:22:34,479 --> 00:22:41,159
need to worry about the nitty-gritty of

00:22:36,789 --> 00:22:43,569
how this is working 99% of the time so

00:22:41,159 --> 00:22:45,789
ok we're going to actually watch a

00:22:43,569 --> 00:22:50,489
little video here the other time I love

00:22:45,789 --> 00:22:53,739
videoed and what we're seeing is a

00:22:50,489 --> 00:22:56,259
successful build so I went in you know

00:22:53,739 --> 00:22:58,949
and I fixed the specificity of the

00:22:56,259 --> 00:23:01,449
selector so the test should pass now and

00:22:58,949 --> 00:23:03,369
this length I don't know we'll see if

00:23:01,449 --> 00:23:06,059
this gets boring or not but we're just

00:23:03,369 --> 00:23:08,619
going to watch this happen in real time

00:23:06,059 --> 00:23:10,659
so first thing there's a couple of house

00:23:08,619 --> 00:23:13,119
key to keeping items that circle CI

00:23:10,659 --> 00:23:16,419
needs to do just kind of like startup

00:23:13,119 --> 00:23:19,389
containers for for the CI job to run in

00:23:16,419 --> 00:23:21,429
and then to actually run the git

00:23:19,389 --> 00:23:23,379
checkout so it's going to clone down the

00:23:21,429 --> 00:23:25,659
stuff from github and I should note that

00:23:23,379 --> 00:23:28,419
this happens through a web hook so this

00:23:25,659 --> 00:23:32,229
happens almost simultaneously as you

00:23:28,419 --> 00:23:35,109
push to github next thing we're going to

00:23:32,229 --> 00:23:37,569
set up docker and we use docker for the

00:23:35,109 --> 00:23:41,349
backstop test again I have to give a

00:23:37,569 --> 00:23:43,239
shout out to ffw who I believe is

00:23:41,349 --> 00:23:48,029
maintaining maintaining the Doxil

00:23:43,239 --> 00:23:48,029
project we use their container there

00:23:48,359 --> 00:23:52,269
next we're going to be setting up the

00:23:50,289 --> 00:23:54,969
versions and really you know that's

00:23:52,269 --> 00:23:57,729
pretty straightforward one nice thing is

00:23:54,969 --> 00:24:00,190
that in alignment with Pantheon we can

00:23:57,729 --> 00:24:03,239
we can actually push a PHP version

00:24:00,190 --> 00:24:06,639
change through both the CI system and

00:24:03,239 --> 00:24:09,489
Pantheon so we can set like if we wanted

00:24:06,639 --> 00:24:12,879
to go from five six to seven we can

00:24:09,489 --> 00:24:13,269
change our PHP version in both circle

00:24:12,879 --> 00:24:16,269
llamó

00:24:13,269 --> 00:24:19,360
and Pantheon the mo and push that up and

00:24:16,269 --> 00:24:21,370
have it test and employee

00:24:19,360 --> 00:24:23,920
so now we've proceeded on to the

00:24:21,370 --> 00:24:26,230
dependencies installation our entire

00:24:23,920 --> 00:24:29,170
yarn install process took about three

00:24:26,230 --> 00:24:31,390
seconds pretty quick and now we're

00:24:29,170 --> 00:24:34,960
watching composer happen which is like

00:24:31,390 --> 00:24:38,080
watching concrete dry we are we sort of

00:24:34,960 --> 00:24:41,080
backed by the cache here so Sir Kofi I

00:24:38,080 --> 00:24:43,450
has a nice feature where it'll load

00:24:41,080 --> 00:24:47,110
things from the cache if if they're

00:24:43,450 --> 00:24:48,490
there so it's not quite that bad so now

00:24:47,110 --> 00:24:51,120
how often do you in real life actually

00:24:48,490 --> 00:24:54,160
watch this never never yeah this

00:24:51,120 --> 00:24:55,780
something exactly you really don't need

00:24:54,160 --> 00:24:57,460
to worry about all this stuff all you

00:24:55,780 --> 00:25:01,750
need to worry about is whether it turns

00:24:57,460 --> 00:25:03,460
red or green on on the pull request so

00:25:01,750 --> 00:25:07,240
this is normally time I'd be sword

00:25:03,460 --> 00:25:11,220
fighting or making coffee or whatever

00:25:07,240 --> 00:25:11,220
yet work work work

00:25:13,020 --> 00:25:17,440
so at this point you can also see where

00:25:16,030 --> 00:25:19,030
we're installing some development

00:25:17,440 --> 00:25:21,370
dependencies like phpunit

00:25:19,030 --> 00:25:23,170
and those will be stripped out before we

00:25:21,370 --> 00:25:28,120
get to the final deployment but this is

00:25:23,170 --> 00:25:31,120
just kind of the initial setup now we're

00:25:28,120 --> 00:25:33,490
into the database stuff and we're

00:25:31,120 --> 00:25:40,480
grabbing that backup which is pretty

00:25:33,490 --> 00:25:42,820
quick pretty quick yep nine seconds this

00:25:40,480 --> 00:25:46,440
is not quick however so we're going to

00:25:42,820 --> 00:25:46,440
transition to the next video

00:25:56,789 --> 00:26:00,900
and so this video just picks up where

00:25:58,919 --> 00:26:02,789
the the other one left off about five

00:26:00,900 --> 00:26:05,520
minutes later and that's a duei it's

00:26:02,789 --> 00:26:07,080
just finished importing this particular

00:26:05,520 --> 00:26:09,840
site has a really big database for

00:26:07,080 --> 00:26:12,510
whatever reason so now again we're

00:26:09,840 --> 00:26:14,909
running that a chain command and on this

00:26:12,510 --> 00:26:16,770
side it's going to set up stage file

00:26:14,909 --> 00:26:18,600
proxy for us so we don't need to grab

00:26:16,770 --> 00:26:20,309
the files as well it's going to turn off

00:26:18,600 --> 00:26:23,730
cron it's going to do a couple other

00:26:20,309 --> 00:26:25,409
things but really could do anything that

00:26:23,730 --> 00:26:28,710
you would do in AD rush or Drupal

00:26:25,409 --> 00:26:31,799
console command in there and then we're

00:26:28,710 --> 00:26:34,409
proceeding into build build is pretty

00:26:31,799 --> 00:26:36,510
quick you can see the subtasks running

00:26:34,409 --> 00:26:38,309
there and again we're just executing

00:26:36,510 --> 00:26:42,870
build whatever that means for this site

00:26:38,309 --> 00:26:47,159
it's happening and we start a web server

00:26:42,870 --> 00:26:51,750
to run our tests off of cache rebuild

00:26:47,159 --> 00:26:54,419
that's fun and then we're going to

00:26:51,750 --> 00:26:57,000
proceed into the static code checks

00:26:54,419 --> 00:26:58,320
which are fairly quick for static code

00:26:57,000 --> 00:27:02,250
checks we're going to have the the

00:26:58,320 --> 00:27:04,500
composer validation the es length which

00:27:02,250 --> 00:27:08,039
is JavaScript you can see we're going to

00:27:04,500 --> 00:27:10,500
have a couple of errors and then PHP CS

00:27:08,039 --> 00:27:14,970
which is a really rigorous tool that I

00:27:10,500 --> 00:27:17,610
kind of hate but keeps us honest ah now

00:27:14,970 --> 00:27:19,260
we're on to the test phase one nice

00:27:17,610 --> 00:27:21,150
thing about gulp is that it's going to

00:27:19,260 --> 00:27:24,240
run tests or it's going to run all of

00:27:21,150 --> 00:27:26,490
its tasks in parallel so we start up B

00:27:24,240 --> 00:27:28,470
hat backstop j/s and front-end

00:27:26,490 --> 00:27:29,640
performance testing tool called phantom

00:27:28,470 --> 00:27:32,820
us all at once

00:27:29,640 --> 00:27:35,220
and those execute simultaneously so even

00:27:32,820 --> 00:27:39,780
though those are three really slow tasks

00:27:35,220 --> 00:27:41,520
they kind of run parallel this is the

00:27:39,780 --> 00:27:44,370
phantom honest output and it gives you a

00:27:41,520 --> 00:27:47,909
lot of data about how your your

00:27:44,370 --> 00:27:50,760
front-end is performing and now we're

00:27:47,909 --> 00:27:52,650
watching backstop run and one thing

00:27:50,760 --> 00:27:55,140
that's cool about backstop is it's going

00:27:52,650 --> 00:27:57,000
to snapshot your site this is a visual

00:27:55,140 --> 00:27:59,400
regression testing tool it's going to

00:27:57,000 --> 00:28:01,590
snapshot your site at the breakpoints

00:27:59,400 --> 00:28:05,789
that you give it so we've said give us

00:28:01,590 --> 00:28:07,230
phone tablet and desktop breakpoints and

00:28:05,789 --> 00:28:11,160
then we've given it a couple of

00:28:07,230 --> 00:28:12,990
different pages to capture elements off

00:28:11,160 --> 00:28:14,820
and again this stuff you know once this

00:28:12,990 --> 00:28:17,970
is set up and configured you really

00:28:14,820 --> 00:28:19,350
never need to see this again one thing

00:28:17,970 --> 00:28:21,140
we'll talk about a little while like for

00:28:19,350 --> 00:28:23,400
those of you like maybe pulling in like

00:28:21,140 --> 00:28:26,280
does anybody here have to feel like they

00:28:23,400 --> 00:28:30,210
have a TI process that looks almost the

00:28:26,280 --> 00:28:32,370
same as this alright and are there many

00:28:30,210 --> 00:28:34,080
like operationally I think this is

00:28:32,370 --> 00:28:36,090
pretty cool but yes how do you get there

00:28:34,080 --> 00:28:38,790
yeah very brave soul I think there's

00:28:36,090 --> 00:28:40,500
more than one so Rob did you start with

00:28:38,790 --> 00:28:41,460
this whole process absolutely not no

00:28:40,500 --> 00:28:44,400
yeah right

00:28:41,460 --> 00:28:46,320
so your first foray into this is set up

00:28:44,400 --> 00:28:47,910
a circle account and maybe do some like

00:28:46,320 --> 00:28:49,740
code checking some static code analysis

00:28:47,910 --> 00:28:52,560
or something like that and then on the

00:28:49,740 --> 00:28:54,420
next project this project the footer

00:28:52,560 --> 00:28:56,790
breaks yeah all the time because the

00:28:54,420 --> 00:28:58,620
sort of the CSS selectors are just

00:28:56,790 --> 00:29:00,120
archaic and our team didn't do it if we

00:28:58,620 --> 00:29:01,680
don't know so we're always breaking it

00:29:00,120 --> 00:29:02,580
so we're going to add that one thing

00:29:01,680 --> 00:29:04,890
that we heard about it that one

00:29:02,580 --> 00:29:06,300
presentation at Drupal con okay cool and

00:29:04,890 --> 00:29:08,160
now the next project we're going to add

00:29:06,300 --> 00:29:09,480
another thing and another thing yeah and

00:29:08,160 --> 00:29:11,310
eventually you get to a pretty cool

00:29:09,480 --> 00:29:13,500
feature thing and it's not done yet

00:29:11,310 --> 00:29:15,360
right bill right be more that happens

00:29:13,500 --> 00:29:18,150
over time yes you don't have to jump all

00:29:15,360 --> 00:29:20,490
the way to this is just showing you you

00:29:18,150 --> 00:29:22,800
know a particular combination of these

00:29:20,490 --> 00:29:24,630
things and what's possible exactly yeah

00:29:22,800 --> 00:29:26,610
I mean this is our solution and maybe

00:29:24,630 --> 00:29:29,820
what makes sense for your organization

00:29:26,610 --> 00:29:31,710
is a whole different set of tools but we

00:29:29,820 --> 00:29:33,270
just want to give you a taste of why

00:29:31,710 --> 00:29:36,510
this is valuable and what it would be

00:29:33,270 --> 00:29:38,280
used for so what we've been seeing going

00:29:36,510 --> 00:29:39,990
on in the background here is essentially

00:29:38,280 --> 00:29:41,550
all the tests passed everything looks

00:29:39,990 --> 00:29:43,170
good and so we sent it up

00:29:41,550 --> 00:29:45,960
we've reinstalled the composer

00:29:43,170 --> 00:29:49,320
dependencies and sent it to Pantheon and

00:29:45,960 --> 00:29:51,900
really all that is is just a clone of

00:29:49,320 --> 00:29:53,760
the Pantheon repository copy the code

00:29:51,900 --> 00:29:56,580
over and then commit it and push it up

00:29:53,760 --> 00:29:58,680
the Pantheon so again two totally

00:29:56,580 --> 00:30:02,150
separate repositories only kept in sync

00:29:58,680 --> 00:30:02,150
by circle here

00:30:08,750 --> 00:30:12,810
all right

00:30:10,050 --> 00:30:14,970
and I don't think we need to watch the

00:30:12,810 --> 00:30:20,910
whole master deployment video it's

00:30:14,970 --> 00:30:22,650
basically does the same thing so now now

00:30:20,910 --> 00:30:24,240
that that's been sent up to Pantheon to

00:30:22,650 --> 00:30:27,810
that multi dev instance we have a new

00:30:24,240 --> 00:30:30,120
URL here it's going to be P 23 after the

00:30:27,810 --> 00:30:32,700
branch name and we can see that our

00:30:30,120 --> 00:30:34,410
border is in place great awesome let's

00:30:32,700 --> 00:30:38,520
send it off to the stakeholders for

00:30:34,410 --> 00:30:40,670
review everything looks fantastic and so

00:30:38,520 --> 00:30:46,680
just to kind of recap what we did here

00:30:40,670 --> 00:30:49,080
we're at this phase and we've gotten

00:30:46,680 --> 00:30:50,970
stakeholder sign-off I'm going to assume

00:30:49,080 --> 00:30:54,000
somewhere along the line we probably got

00:30:50,970 --> 00:30:59,700
code review on that pull request because

00:30:54,000 --> 00:31:01,800
we always do that and next is going to

00:30:59,700 --> 00:31:03,560
come this production flow and again

00:31:01,800 --> 00:31:06,900
we're not going to step through this

00:31:03,560 --> 00:31:08,910
super detailed but really it's just a

00:31:06,900 --> 00:31:10,620
mirror of what we did there except we

00:31:08,910 --> 00:31:12,690
pushed in the master branch and then it

00:31:10,620 --> 00:31:17,490
says a quick button deployment to go

00:31:12,690 --> 00:31:19,410
from dev to test alive so as a developer

00:31:17,490 --> 00:31:22,350
this is a really nice workflow because

00:31:19,410 --> 00:31:24,900
my involvement in it is so minimal and I

00:31:22,350 --> 00:31:29,550
really have clear indications of when I

00:31:24,900 --> 00:31:32,370
needed on on the task if the test if a

00:31:29,550 --> 00:31:34,470
build fails I'm needed if something is

00:31:32,370 --> 00:31:36,240
ready to be merged I'm needed but

00:31:34,470 --> 00:31:41,670
otherwise I can go hands-off and it

00:31:36,240 --> 00:31:45,810
becomes someone else's problem so let's

00:31:41,670 --> 00:31:48,930
kind of take a step back look at the

00:31:45,810 --> 00:31:51,360
lessons we've learned here and how we

00:31:48,930 --> 00:31:54,120
would recommend implementing this for

00:31:51,360 --> 00:31:56,040
other people I think it's important to

00:31:54,120 --> 00:31:59,130
know as Drew was saying that this is

00:31:56,040 --> 00:32:01,260
this a never ever evolving thing it's

00:31:59,130 --> 00:32:03,480
never finished it's never going to be

00:32:01,260 --> 00:32:05,700
finished it's basically you're making an

00:32:03,480 --> 00:32:08,010
investment in your pipeline your

00:32:05,700 --> 00:32:10,440
pipeline becomes a product that you as

00:32:08,010 --> 00:32:14,880
an organization whether you maintain one

00:32:10,440 --> 00:32:16,530
site or a hundred sites invest in so

00:32:14,880 --> 00:32:17,820
over time you're going to want to add

00:32:16,530 --> 00:32:20,770
things you're going to want to change

00:32:17,820 --> 00:32:22,330
things and that's okay

00:32:20,770 --> 00:32:24,880
you know you're not striving for

00:32:22,330 --> 00:32:26,559
perfection the first time don't let us

00:32:24,880 --> 00:32:29,559
screw this thing up earlier don't let

00:32:26,559 --> 00:32:31,660
great good perfect yeah yeah whatever

00:32:29,559 --> 00:32:33,040
don't let the one video and then beat

00:32:31,660 --> 00:32:36,220
the other perfect

00:32:33,040 --> 00:32:39,640
okay yep

00:32:36,220 --> 00:32:42,400
so next thing start small you know as as

00:32:39,640 --> 00:32:45,370
drew was saying also you've got to start

00:32:42,400 --> 00:32:47,679
with whatever makes sense for you for us

00:32:45,370 --> 00:32:49,660
it was B hat testing several years ago

00:32:47,679 --> 00:32:53,200
we wanted to document those specs and

00:32:49,660 --> 00:32:55,690
really get test suite sort of written up

00:32:53,200 --> 00:32:57,100
around the specifications that were

00:32:55,690 --> 00:32:59,770
happening that were coming out of our

00:32:57,100 --> 00:33:02,500
discovery process so we got that in

00:32:59,770 --> 00:33:04,840
place and then we had you know a client

00:33:02,500 --> 00:33:06,730
that wanted they had a strict front-end

00:33:04,840 --> 00:33:08,890
performance budgets we looked into tools

00:33:06,730 --> 00:33:11,740
that would do that we ended up with a

00:33:08,890 --> 00:33:16,230
tool called San Tomas and we got that

00:33:11,740 --> 00:33:20,490
wired in and then it was close next

00:33:16,230 --> 00:33:25,290
static code checking and then it was a

00:33:20,490 --> 00:33:25,290
backstop so just one piece at a time

00:33:25,870 --> 00:33:29,740
and you really want to make sure you're

00:33:28,090 --> 00:33:32,470
focusing on the business value because

00:33:29,740 --> 00:33:35,350
at the end of the day we do like cool

00:33:32,470 --> 00:33:38,500
tools as developers but also you need to

00:33:35,350 --> 00:33:40,030
make sure that you're improving the

00:33:38,500 --> 00:33:42,370
value that you're providing to your

00:33:40,030 --> 00:33:48,400
clients or your your stakeholders

00:33:42,370 --> 00:33:50,590
whoever you work with and then kind of

00:33:48,400 --> 00:33:54,130
the last thing I'd say is if you're an

00:33:50,590 --> 00:33:55,750
agency especially make sure that what

00:33:54,130 --> 00:33:57,190
you're doing is reusable you don't want

00:33:55,750 --> 00:33:59,590
to be creating something for one project

00:33:57,190 --> 00:34:04,150
that you can't take across your entire

00:33:59,590 --> 00:34:07,619
infrastructure it's really important to

00:34:04,150 --> 00:34:09,850
have consistency between projects and

00:34:07,619 --> 00:34:12,159
starting with something like a scaffold

00:34:09,850 --> 00:34:13,869
allows you to do that it allows you to

00:34:12,159 --> 00:34:17,649
bring that that consistency across

00:34:13,869 --> 00:34:20,679
everything so to that end we have two

00:34:17,649 --> 00:34:22,629
different kind of offerings here we have

00:34:20,679 --> 00:34:24,280
the scaffold that we've kind of been

00:34:22,629 --> 00:34:27,520
showing off that's all the circle

00:34:24,280 --> 00:34:29,859
configuration the gulp tasks as well as

00:34:27,520 --> 00:34:32,919
the composer manage build and then we

00:34:29,859 --> 00:34:33,690
have sort of the less opinionated

00:34:32,919 --> 00:34:35,220
version of the

00:34:33,690 --> 00:34:37,799
that you can adapt to whatever you'd

00:34:35,220 --> 00:34:53,399
like which is Pantheon drops eight

00:34:37,799 --> 00:34:54,780
repository that's about it so adds

00:34:53,399 --> 00:34:56,010
expected as we were hoping we have

00:34:54,780 --> 00:34:58,500
plenty of time for questions so if

00:34:56,010 --> 00:34:59,609
anybody has questions please we ask that

00:34:58,500 --> 00:35:02,579
you come up here to the mic so that

00:34:59,609 --> 00:35:04,799
people who can review the recording can

00:35:02,579 --> 00:35:12,720
hear the questions as well could anybody

00:35:04,799 --> 00:35:13,140
has questions please step on up Hey nice

00:35:12,720 --> 00:35:15,390
shirt

00:35:13,140 --> 00:35:17,190
he's for the for the other to bring the

00:35:15,390 --> 00:35:19,319
doctor if you are using my image so

00:35:17,190 --> 00:35:22,099
that's thanks so creative it works for

00:35:19,319 --> 00:35:24,539
you the question I have evolved backstop

00:35:22,099 --> 00:35:27,030
would you store their background

00:35:24,539 --> 00:35:29,849
signatures do you keep it and get to

00:35:27,030 --> 00:35:32,760
keep it somewhere else after you can

00:35:29,849 --> 00:35:35,069
we're due for our husbands before could

00:35:32,760 --> 00:35:36,059
everybody hear that question I'd say I

00:35:35,069 --> 00:35:39,630
don't think that mic is on

00:35:36,059 --> 00:35:42,180
hey okay alright so it's you know art so

00:35:39,630 --> 00:35:44,549
you might add in that again so my

00:35:42,180 --> 00:35:47,039
question is what backstop reference

00:35:44,549 --> 00:35:48,750
images where do you store them to keep

00:35:47,039 --> 00:35:51,839
them in the repo or somewhere else

00:35:48,750 --> 00:35:54,210
how do you pull them yeah run mm that's

00:35:51,839 --> 00:35:56,069
a really good question and so what's

00:35:54,210 --> 00:35:58,470
worked for us so far is keeping them in

00:35:56,069 --> 00:36:00,599
the repository actually committing them

00:35:58,470 --> 00:36:04,200
and that way they get version controlled

00:36:00,599 --> 00:36:06,329
and during the PR review we can see if

00:36:04,200 --> 00:36:07,559
there was a visual change required we

00:36:06,329 --> 00:36:12,079
can see exactly what the

00:36:07,559 --> 00:36:15,470
before-and-after was okay thank you yeah

00:36:12,079 --> 00:36:18,720
hello I also have a question about the

00:36:15,470 --> 00:36:20,010
visual regression testing that's when

00:36:18,720 --> 00:36:22,980
you make a change like the one that you

00:36:20,010 --> 00:36:25,020
showed you expect some visual changes so

00:36:22,980 --> 00:36:26,309
not do you go about making sure that it

00:36:25,020 --> 00:36:27,690
doesn't cause an error and stop

00:36:26,309 --> 00:36:30,020
everything and then require special

00:36:27,690 --> 00:36:33,960
exception later on down the line

00:36:30,020 --> 00:36:36,450
yeah so when I made that change I was

00:36:33,960 --> 00:36:39,839
not expecting the change to the footer

00:36:36,450 --> 00:36:41,220
which is what we were seeing right but

00:36:39,839 --> 00:36:43,289
how do you tell that's all that I do

00:36:41,220 --> 00:36:45,869
want to change in this place yeah

00:36:43,289 --> 00:36:46,230
so this gets back to the question of the

00:36:45,869 --> 00:36:50,280
ref

00:36:46,230 --> 00:36:51,810
screen shots and so the reference

00:36:50,280 --> 00:36:53,849
screenshots are the ones that are

00:36:51,810 --> 00:36:55,980
committed to the repository that contain

00:36:53,849 --> 00:36:58,650
that it was the screenshots on the left

00:36:55,980 --> 00:37:00,900
there so what it should look like so as

00:36:58,650 --> 00:37:04,530
a developer I can run those backstop

00:37:00,900 --> 00:37:06,720
tests locally using the gulp task and I

00:37:04,530 --> 00:37:08,579
can run it with the rebase flag which

00:37:06,720 --> 00:37:11,040
will regenerate those reference

00:37:08,579 --> 00:37:11,940
screenshots for me so and that's what

00:37:11,040 --> 00:37:16,109
I'm saying

00:37:11,940 --> 00:37:17,760
as a developer who is reviewing when I

00:37:16,109 --> 00:37:20,550
take a look at that pull request what

00:37:17,760 --> 00:37:24,060
I'm actually going to see is the new

00:37:20,550 --> 00:37:26,130
screenshots that were captured I think

00:37:24,060 --> 00:37:28,200
so buddy what he's saying there was some

00:37:26,130 --> 00:37:30,690
visual difference that was intently was

00:37:28,200 --> 00:37:32,400
in fact a design change yet so capturing

00:37:30,690 --> 00:37:34,589
so that's going to throw at least the

00:37:32,400 --> 00:37:36,030
first time to a false negative how do

00:37:34,589 --> 00:37:38,550
you handle that right because you there

00:37:36,030 --> 00:37:40,050
was a change to like adding the border

00:37:38,550 --> 00:37:41,310
whether it does the application yep so

00:37:40,050 --> 00:37:44,460
how do you account for that in process

00:37:41,310 --> 00:37:45,660
so if we had had and in this case I'm

00:37:44,460 --> 00:37:48,210
sort of cheating because we didn't have

00:37:45,660 --> 00:37:50,520
a test for the actual current and

00:37:48,210 --> 00:37:52,470
upcoming exhibitions block which is what

00:37:50,520 --> 00:37:54,300
we were expecting to see changed if we

00:37:52,470 --> 00:37:56,359
had had a test for that we would have

00:37:54,300 --> 00:38:00,089
needed to regenerate the reference

00:37:56,359 --> 00:38:03,180
screenshot before we push to avoid that

00:38:00,089 --> 00:38:05,819
false positive okay so are you expecting

00:38:03,180 --> 00:38:08,849
to fail the first time around or is that

00:38:05,819 --> 00:38:13,849
no no okay no yeah there there's no

00:38:08,849 --> 00:38:13,849
intended fail there was just yeah

00:38:16,040 --> 00:38:22,700
thank you other people might have to

00:38:19,610 --> 00:38:26,570
shorten it so I like a lot of what I see

00:38:22,700 --> 00:38:28,760
as a manager and as a process fanatic

00:38:26,570 --> 00:38:30,530
that's all great one of the push backs

00:38:28,760 --> 00:38:31,790
that I get when we talk about this in

00:38:30,530 --> 00:38:34,730
our workflow is first of all we

00:38:31,790 --> 00:38:36,650
internally host our sites and your

00:38:34,730 --> 00:38:38,480
example is the perfect push back that

00:38:36,650 --> 00:38:41,990
I've done I'm just changing a border

00:38:38,480 --> 00:38:44,600
it's a specific selector and that's a

00:38:41,990 --> 00:38:47,420
lot of overhead when we all we have to

00:38:44,600 --> 00:38:50,690
do is recompile the staffs upload the

00:38:47,420 --> 00:38:54,320
change theme to the dev server and I'm

00:38:50,690 --> 00:38:58,010
done so so what point is that

00:38:54,320 --> 00:39:00,590
too much overhead and and why do I have

00:38:58,010 --> 00:39:02,600
to wait five minutes I presume if you're

00:39:00,590 --> 00:39:05,060
doing all those tests and it's just or

00:39:02,600 --> 00:39:06,350
really I mean are there breakpoints are

00:39:05,060 --> 00:39:08,300
there time where you don't need to do a

00:39:06,350 --> 00:39:10,250
full test regression test because you

00:39:08,300 --> 00:39:12,470
change the border on an imager when you

00:39:10,250 --> 00:39:13,640
don't care about the result I think

00:39:12,470 --> 00:39:16,580
that's the end of it

00:39:13,640 --> 00:39:17,600
I mean it's I don't really know but it

00:39:16,580 --> 00:39:20,780
really when you could make that argument

00:39:17,600 --> 00:39:21,320
yeah but by and large that's really not

00:39:20,780 --> 00:39:24,440
a problem

00:39:21,320 --> 00:39:25,880
mm-hmm I I get what you're saying but in

00:39:24,440 --> 00:39:27,860
the work but what we've seen the day of

00:39:25,880 --> 00:39:30,170
the day when we change a single class

00:39:27,860 --> 00:39:32,270
selector it's not going to ripple out to

00:39:30,170 --> 00:39:34,580
other pages sure by and large

00:39:32,270 --> 00:39:36,350
yeah well although all right who here

00:39:34,580 --> 00:39:38,660
has ever written a CSS selector that

00:39:36,350 --> 00:39:40,910
they feel like that that had unintended

00:39:38,660 --> 00:39:42,860
consequences and as a byproduct of that

00:39:40,910 --> 00:39:45,800
how many of us have Urton overly

00:39:42,860 --> 00:39:48,470
specific CSS selectors like the delivery

00:39:45,800 --> 00:39:51,200
chain it together so I would say I like

00:39:48,470 --> 00:39:54,020
I think another answer might be you

00:39:51,200 --> 00:39:56,180
start small so like don't do don't

00:39:54,020 --> 00:39:57,620
implement a testing system if you're in

00:39:56,180 --> 00:40:00,470
maintenance mode on a site and what's

00:39:57,620 --> 00:40:02,030
likely to change is adding a border once

00:40:00,470 --> 00:40:04,310
every three months or changing a border

00:40:02,030 --> 00:40:07,490
once for the rows start with you know

00:40:04,310 --> 00:40:09,620
your next project build do you know like

00:40:07,490 --> 00:40:12,980
gather your specs in cucumber like

00:40:09,620 --> 00:40:15,350
format and start using B hat column so

00:40:12,980 --> 00:40:17,480
don't I mean like retrofitting all of us

00:40:15,350 --> 00:40:21,080
into something that's in maintenance

00:40:17,480 --> 00:40:24,440
mode possibly a bit much although like

00:40:21,080 --> 00:40:26,540
that being said what you have this last

00:40:24,440 --> 00:40:28,400
call has done that like they inherit is

00:40:26,540 --> 00:40:29,290
the site that we're looking at like all

00:40:28,400 --> 00:40:31,330
right because

00:40:29,290 --> 00:40:34,360
Nuala pieces we got the things we can

00:40:31,330 --> 00:40:36,100
just don't drop it over here figure out

00:40:34,360 --> 00:40:38,050
the specifics of this site do that one

00:40:36,100 --> 00:40:40,360
and now everybody's still in our same

00:40:38,050 --> 00:40:41,560
problems so I think yeah hopefully

00:40:40,360 --> 00:40:43,630
that's a little bit more nuanced real

00:40:41,560 --> 00:40:46,390
will so just one more indulgence kit can

00:40:43,630 --> 00:40:47,710
you can you tear it so that you'd rather

00:40:46,390 --> 00:40:50,320
than you so let's say we're going to

00:40:47,710 --> 00:40:52,360
push to our dev server mmm and we don't

00:40:50,320 --> 00:40:55,030
need to have a full rich panoply of

00:40:52,360 --> 00:40:57,640
tests sure that we can set up different

00:40:55,030 --> 00:40:59,140
workflows in that chair yeah yeah yeah

00:40:57,640 --> 00:41:01,450
okay yeah I mean you just have a

00:40:59,140 --> 00:41:03,910
condition on based on the branch that

00:41:01,450 --> 00:41:04,210
you're actually under test yeah thank

00:41:03,910 --> 00:41:06,100
you

00:41:04,210 --> 00:41:07,960
yeah yeah if you can if you can write

00:41:06,100 --> 00:41:10,540
down the logic you can teach you to a

00:41:07,960 --> 00:41:12,520
computer I'm gonna keep it like this

00:41:10,540 --> 00:41:18,670
I like Lemmy from Motorhead you know

00:41:12,520 --> 00:41:20,950
okay if you do this then your little

00:41:18,670 --> 00:41:23,530
button on your dev environment on

00:41:20,950 --> 00:41:28,320
Pantheon is like no longer a thing right

00:41:23,530 --> 00:41:33,070
yeah so what do you do to watch

00:41:28,320 --> 00:41:37,230
Pantheon's drops eight things so you

00:41:33,070 --> 00:41:40,300
know when eight got updated yeah so

00:41:37,230 --> 00:41:42,910
that's a very good question and not one

00:41:40,300 --> 00:41:45,400
that I have a great answer to currently

00:41:42,910 --> 00:41:48,910
drops eight is almost in perfect sync

00:41:45,400 --> 00:41:54,520
with upstream Drupal 8 it would be nice

00:41:48,910 --> 00:41:56,290
if let me back up for a second we're

00:41:54,520 --> 00:42:00,190
pulling it in through composers so

00:41:56,290 --> 00:42:04,000
theoretically if drops eight were to

00:42:00,190 --> 00:42:06,070
release a core only repository we could

00:42:04,000 --> 00:42:09,550
pull that in the same as we're pulling

00:42:06,070 --> 00:42:12,430
in Drupal core and that would be no

00:42:09,550 --> 00:42:16,090
different there is this concept of the

00:42:12,430 --> 00:42:18,460
Drupal composer I forget exactly what

00:42:16,090 --> 00:42:22,090
it's called but we're basically composer

00:42:18,460 --> 00:42:26,170
downloads all of Drupal core and then

00:42:22,090 --> 00:42:27,760
pulls out the slash core directory which

00:42:26,170 --> 00:42:31,050
makes things slightly more complicated

00:42:27,760 --> 00:42:34,830
for us and is the reason that we don't

00:42:31,050 --> 00:42:37,450
tightly mirror drops eight right now

00:42:34,830 --> 00:42:40,600
does that answer the question kind of

00:42:37,450 --> 00:42:41,980
okay for the and for those of you who

00:42:40,600 --> 00:42:42,390
happen to be using Pantheon and looking

00:42:41,980 --> 00:42:44,579
to a

00:42:42,390 --> 00:42:47,490
this in some ways we have people at our

00:42:44,579 --> 00:42:48,720
booth that are like happy to help them

00:42:47,490 --> 00:42:50,250
like pretty smart people can talk about

00:42:48,720 --> 00:42:51,750
composure we're close and it's like how

00:42:50,250 --> 00:42:54,839
do I do this but you know like get the

00:42:51,750 --> 00:42:57,089
education you explore it so yeah so you

00:42:54,839 --> 00:42:58,710
talk about having your local repository

00:42:57,089 --> 00:42:59,880
which was just your custom and contact

00:42:58,710 --> 00:43:01,019
only and then pushing me through to

00:42:59,880 --> 00:43:02,579
create the artifact which goes to

00:43:01,019 --> 00:43:04,710
panting on but you also talk about local

00:43:02,579 --> 00:43:08,279
development and testing where does that

00:43:04,710 --> 00:43:10,559
fit in the cycle yeah so locally we're

00:43:08,279 --> 00:43:14,510
going to be running the gulp install

00:43:10,559 --> 00:43:16,470
command just like we we did up on CI and

00:43:14,510 --> 00:43:18,450
so that's going to pull down our

00:43:16,470 --> 00:43:20,400
composer dependencies and that stuff the

00:43:18,450 --> 00:43:22,829
same way and I think that's a kind of a

00:43:20,400 --> 00:43:25,589
critical part of the process that we're

00:43:22,829 --> 00:43:29,960
running this the exact same way in CI as

00:43:25,589 --> 00:43:33,269
we will for local set up everything yeah

00:43:29,960 --> 00:43:35,339
hi I have a simple quick question sure

00:43:33,269 --> 00:43:36,990
like when you are doing a little task

00:43:35,339 --> 00:43:40,349
impalement very beginning of the slide

00:43:36,990 --> 00:43:43,339
and notice Li you didn't you only pushed

00:43:40,349 --> 00:43:47,009
the sass bottom at the CSS file right

00:43:43,339 --> 00:43:49,140
generally this good idea to include the

00:43:47,009 --> 00:43:51,509
compile PSS and if you report it's

00:43:49,140 --> 00:43:54,329
better not to include it much better not

00:43:51,509 --> 00:43:57,089
to include it in my opinion and this is

00:43:54,329 --> 00:43:59,130
kind of what this whole process is for

00:43:57,089 --> 00:44:02,009
in a lot of ways is to make sure that

00:43:59,130 --> 00:44:05,250
you're only committing the bare minimum

00:44:02,009 --> 00:44:07,200
required to build the site because there

00:44:05,250 --> 00:44:09,450
are a lot of risks of you know merge

00:44:07,200 --> 00:44:12,480
conflicts and that kind of styling like

00:44:09,450 --> 00:44:13,380
money to them yeah and let's say like I

00:44:12,480 --> 00:44:16,740
made a change

00:44:13,380 --> 00:44:19,650
sass change my teammate wants to leave

00:44:16,740 --> 00:44:23,299
to work on top of my change yep and how

00:44:19,650 --> 00:44:23,299
that usually work but dude put like

00:44:26,700 --> 00:44:34,150
right away or for us you don't have any

00:44:31,390 --> 00:44:36,370
CSS locally if I were to pull down your

00:44:34,150 --> 00:44:40,270
changes I wouldn't have any actual CSS

00:44:36,370 --> 00:44:43,330
until I run the build steps this ironic

00:44:40,270 --> 00:44:46,120
manual yeah yeah so that that's again

00:44:43,330 --> 00:44:48,520
we're gulp is it so locally it's gulp on

00:44:46,120 --> 00:44:50,230
the server level it's circle and again

00:44:48,520 --> 00:44:52,150
it's so philosophically what you're

00:44:50,230 --> 00:44:55,090
doing is you're capturing the knowledge

00:44:52,150 --> 00:44:57,040
to create like what's required to build

00:44:55,090 --> 00:44:59,320
the stuff rather than the output of it

00:44:57,040 --> 00:45:02,670
because like it's a really common thing

00:44:59,320 --> 00:45:04,510
like hi I'm using this tool to compile a

00:45:02,670 --> 00:45:05,890
different version or different slightly

00:45:04,510 --> 00:45:07,690
different tool all inside like

00:45:05,890 --> 00:45:10,720
everything's a merge conflict and that

00:45:07,690 --> 00:45:13,030
just kind of sucks so have the tools do

00:45:10,720 --> 00:45:15,730
that record what's necessary record your

00:45:13,030 --> 00:45:18,730
source requirements and then have the

00:45:15,730 --> 00:45:23,620
Machine take it from there oh thank you

00:45:18,730 --> 00:45:26,410
I much conflict was a good keyword

00:45:23,620 --> 00:45:30,280
because we have a very similar protein

00:45:26,410 --> 00:45:34,330
all workflow we use also pull requests

00:45:30,280 --> 00:45:38,410
but we already merged equal requests

00:45:34,330 --> 00:45:40,330
after a QA and the reason why we do that

00:45:38,410 --> 00:45:43,900
is because our clients tend to be very

00:45:40,330 --> 00:45:47,190
lazy proving or denying those revenge

00:45:43,900 --> 00:45:50,710
requests a whole yeah do you have any

00:45:47,190 --> 00:45:53,650
well kind of magical handle you like you

00:45:50,710 --> 00:45:55,540
have a cool requests and resulting merge

00:45:53,650 --> 00:45:58,240
conflicts because I tend to believe that

00:45:55,540 --> 00:46:02,080
your plans are much faster than our

00:45:58,240 --> 00:46:05,650
client so I would say that our clients

00:46:02,080 --> 00:46:07,120
like I don't think our clients are any

00:46:05,650 --> 00:46:09,430
different from your clients but I think

00:46:07,120 --> 00:46:12,430
that we as an organization are very

00:46:09,430 --> 00:46:14,260
cognizant of the fact that the longer a

00:46:12,430 --> 00:46:17,230
pull request Marui mains open the more

00:46:14,260 --> 00:46:21,610
risk is involved that's the so much

00:46:17,230 --> 00:46:24,520
really early and yeah yeah so we tend to

00:46:21,610 --> 00:46:28,420
push our clients very hard to to get any

00:46:24,520 --> 00:46:30,700
in progress features merged in or or

00:46:28,420 --> 00:46:32,620
buttoned up in a way where they go to a

00:46:30,700 --> 00:46:35,410
release branch I don't know if that's an

00:46:32,620 --> 00:46:36,910
option for you but I don't have a magic

00:46:35,410 --> 00:46:38,300
bullet right we try supposed to oak

00:46:36,910 --> 00:46:40,820
lines yeah

00:46:38,300 --> 00:46:43,600
they don't react everything and I would

00:46:40,820 --> 00:46:46,010
say that's a class of problems that is

00:46:43,600 --> 00:46:51,980
outside of the scope of what computers

00:46:46,010 --> 00:46:54,830
can do so yeah so so tools we'll never

00:46:51,980 --> 00:46:56,210
saw like technology won't solve human

00:46:54,830 --> 00:46:57,920
problems and communication and

00:46:56,210 --> 00:46:59,300
responsiveness is a human problem and

00:46:57,920 --> 00:47:00,860
while you can have a tool maybe help

00:46:59,300 --> 00:47:01,940
prompt someone like poke them send them

00:47:00,860 --> 00:47:03,920
you know text them every five minutes

00:47:01,940 --> 00:47:08,120
until they approve it's probably also

00:47:03,920 --> 00:47:09,740
not a good idea but so so like this

00:47:08,120 --> 00:47:12,110
speaks to the like this doesn't make

00:47:09,740 --> 00:47:14,830
project management go away this is a

00:47:12,110 --> 00:47:17,900
safety net for developers to be able to

00:47:14,830 --> 00:47:20,600
confidently deploy change and know that

00:47:17,900 --> 00:47:22,040
what they've done is in process and they

00:47:20,600 --> 00:47:23,630
don't have to manage it after that and

00:47:22,040 --> 00:47:25,640
that it's you know pass all the checks

00:47:23,630 --> 00:47:28,280
let that flow out of your body move on

00:47:25,640 --> 00:47:30,350
to the next day I would also maybe point

00:47:28,280 --> 00:47:33,860
out that you could get some mileage out

00:47:30,350 --> 00:47:36,020
of frequently reintegrating master into

00:47:33,860 --> 00:47:37,820
your future branches you might try that

00:47:36,020 --> 00:47:40,340
well speaking of composers of the

00:47:37,820 --> 00:47:42,890
composer log files ah yeah black for

00:47:40,340 --> 00:47:45,770
wanna metal gate well okay yeah hope you

00:47:42,890 --> 00:47:47,660
have a mango book okay that's the next

00:47:45,770 --> 00:47:50,960
tool yeah we'll invent that tool for

00:47:47,660 --> 00:47:52,910
next year yeah thanks for the talk is

00:47:50,960 --> 00:47:54,380
really good information I just have a

00:47:52,910 --> 00:47:56,090
question about composer and everything

00:47:54,380 --> 00:47:58,640
like why don't you just take a snapshot

00:47:56,090 --> 00:48:00,560
of the live site and merge the code into

00:47:58,640 --> 00:48:02,420
it like really quickly to see if it you

00:48:00,560 --> 00:48:07,070
know causes problems other than like

00:48:02,420 --> 00:48:10,570
rebuilding from scratch all time I think

00:48:07,070 --> 00:48:13,600
it's a test of the process and it's just

00:48:10,570 --> 00:48:17,320
consistency so like making sure that

00:48:13,600 --> 00:48:20,480
locally I'm using composer install on

00:48:17,320 --> 00:48:24,110
circle we're using composer install it's

00:48:20,480 --> 00:48:26,120
just a consistency thing I think I mean

00:48:24,110 --> 00:48:27,710
to me it's like the best test would be

00:48:26,120 --> 00:48:30,500
merging the code right into production

00:48:27,710 --> 00:48:34,830
see what happens doing that but I mean

00:48:30,500 --> 00:48:38,880
not like a real exercise but yeah

00:48:34,830 --> 00:48:41,310
the total running credit okay can we

00:48:38,880 --> 00:48:43,230
just change it on the live yeah right by

00:48:41,310 --> 00:48:45,690
me up here snapshot production you know

00:48:43,230 --> 00:48:47,940
do your posts think scripts good Colonel

00:48:45,690 --> 00:48:50,250
Khan or whatever ah we merge your branch

00:48:47,940 --> 00:48:52,770
and run your test it would take a lot

00:48:50,250 --> 00:48:55,140
quicker right then importing a database

00:48:52,770 --> 00:48:58,350
downloading files doing maybe some stuff

00:48:55,140 --> 00:49:00,240
maybe I guess you would still have to

00:48:58,350 --> 00:49:02,490
run like composer install or whatever

00:49:00,240 --> 00:49:04,350
because the files are already compiled

00:49:02,490 --> 00:49:06,060
in there right I mean so if you just

00:49:04,350 --> 00:49:07,620
commit everything you don't have to put

00:49:06,060 --> 00:49:09,390
everything but you have a production at

00:49:07,620 --> 00:49:11,130
some point it has to get build the one

00:49:09,390 --> 00:49:12,990
yeah it's built and all the files are

00:49:11,130 --> 00:49:14,820
there you just need to start for what

00:49:12,990 --> 00:49:16,950
happens when you have a composer change

00:49:14,820 --> 00:49:19,050
like when you add a new module you would

00:49:16,950 --> 00:49:20,580
have to run composer and yeah where you

00:49:19,050 --> 00:49:22,680
have to have a make file that keeps

00:49:20,580 --> 00:49:24,480
track of that or you have to like it all

00:49:22,680 --> 00:49:25,590
the code in the repository I mean yeah

00:49:24,480 --> 00:49:28,770
there's different ways to do that I

00:49:25,590 --> 00:49:30,060
guess but yeah and I mean I just leading

00:49:28,770 --> 00:49:31,620
a bunch of developers like I want the

00:49:30,060 --> 00:49:33,440
closest thing to live with the code

00:49:31,620 --> 00:49:35,700
merged into it to see what will happen

00:49:33,440 --> 00:49:38,250
but that's for sure that's what you're

00:49:35,700 --> 00:49:40,170
getting here this is exactly what's

00:49:38,250 --> 00:49:42,390
being built on CI is exactly what's

00:49:40,170 --> 00:49:43,710
going to end up on production show we're

00:49:42,390 --> 00:49:45,780
essentially overwriting the whole

00:49:43,710 --> 00:49:50,070
repository on the panthéon side every

00:49:45,780 --> 00:49:51,780
push right and so the so there's like

00:49:50,070 --> 00:49:53,790
there's like maybe like an intellectual

00:49:51,780 --> 00:49:55,500
like it seems a little bit much to

00:49:53,790 --> 00:49:57,810
install like you're like in order to

00:49:55,500 --> 00:49:59,220
bake is like a Carl Sagan phone order to

00:49:57,810 --> 00:50:00,270
bake an apple pie or make an apple pie

00:49:59,220 --> 00:50:02,190
first you have to invent the universe

00:50:00,270 --> 00:50:04,230
like it feels a little like that like

00:50:02,190 --> 00:50:05,970
you're inventing like you're like

00:50:04,230 --> 00:50:07,050
creating environments and then putting a

00:50:05,970 --> 00:50:08,460
Drupal inside of it and then putting

00:50:07,050 --> 00:50:10,050
other things are that and then

00:50:08,460 --> 00:50:11,630
eventually finally your JavaScript or

00:50:10,050 --> 00:50:15,150
CSS change makes it

00:50:11,630 --> 00:50:16,560
however there's like a there's like a

00:50:15,150 --> 00:50:20,640
sort of confidence thing and it's also

00:50:16,560 --> 00:50:22,260
the machines are doing it it's okay like

00:50:20,640 --> 00:50:26,880
it's machine time and that's

00:50:22,260 --> 00:50:28,560
increasingly not a big obstacle and so

00:50:26,880 --> 00:50:29,970
there's some kind of fun we gonna make a

00:50:28,560 --> 00:50:31,140
really quick change for client really

00:50:29,970 --> 00:50:32,760
fast you don't want it to break the

00:50:31,140 --> 00:50:36,360
whole site but you don't want to wait 30

00:50:32,760 --> 00:50:37,800
minutes yeah all right so 10 minutes at

00:50:36,360 --> 00:50:39,720
speed to change yeah like that's like

00:50:37,800 --> 00:50:40,800
but can you do it reliable it becomes

00:50:39,720 --> 00:50:41,880
like a trust thing too because sometimes

00:50:40,800 --> 00:50:43,770
you're going to need to install a module

00:50:41,880 --> 00:50:45,420
and it's your process for installing a

00:50:43,770 --> 00:50:47,350
module slightly different than the

00:50:45,420 --> 00:50:49,180
process for changing CSS

00:50:47,350 --> 00:50:51,090
and then are you managing to processes

00:50:49,180 --> 00:50:53,770
and is to more than one is that you know

00:50:51,090 --> 00:50:55,990
not a lot of things think about for sure

00:50:53,770 --> 00:50:58,990
yeah well I mean I don't think any of

00:50:55,990 --> 00:51:00,670
this stuff is like we're all still

00:50:58,990 --> 00:51:02,170
learning we're all still growing we're

00:51:00,670 --> 00:51:06,430
all still like having conversations this

00:51:02,170 --> 00:51:07,990
is a point in time and you know it's

00:51:06,430 --> 00:51:13,080
often I mean we're halfway there

00:51:07,990 --> 00:51:16,360
we're getting there okay cool thanks

00:51:13,080 --> 00:51:20,050
questions click okay um first one is why

00:51:16,360 --> 00:51:22,000
do we deploy to a gate artifact I'm

00:51:20,050 --> 00:51:28,240
going to right click - and just pushing

00:51:22,000 --> 00:51:30,990
it alive so this is how Pantheon works

00:51:28,240 --> 00:51:34,060
but you would need to Pantheon basically

00:51:30,990 --> 00:51:36,430
requires you to have okay there's no

00:51:34,060 --> 00:51:39,040
other neat for that right no you could

00:51:36,430 --> 00:51:41,530
you could make a tarball and send it

00:51:39,040 --> 00:51:43,960
somewhere this workflow actually does

00:51:41,530 --> 00:51:46,180
give you a nice rollback process though

00:51:43,960 --> 00:51:48,010
because you're able to yeah just rolled

00:51:46,180 --> 00:51:51,250
straight back to whatever the left

00:51:48,010 --> 00:51:53,620
commit was on Pantheon okay the second

00:51:51,250 --> 00:51:55,330
question is I mean a project that kind

00:51:53,620 --> 00:51:56,680
of breaks a little bit of the rules we

00:51:55,330 --> 00:51:59,140
don't have feature branches and we

00:51:56,680 --> 00:52:01,150
deploy graphics production so forgetting

00:51:59,140 --> 00:52:02,920
you know best practices for drupal is

00:52:01,150 --> 00:52:04,810
there something inherently for drupal

00:52:02,920 --> 00:52:18,040
that requires us to hospital branches

00:52:04,810 --> 00:52:23,880
and also add you know head and nope it's

00:52:18,040 --> 00:52:26,850
maybe we're looking at you though yeah

00:52:23,880 --> 00:52:29,560
so this is oddest go for the

00:52:26,850 --> 00:52:31,540
presentation just just let me know but

00:52:29,560 --> 00:52:35,470
uh so suppose I'm a little bit familiar

00:52:31,540 --> 00:52:38,440
with this LTM workflow and suppose that

00:52:35,470 --> 00:52:41,980
in this process of working through this

00:52:38,440 --> 00:52:45,070
see I I have to do security updates and

00:52:41,980 --> 00:52:47,170
in doing that I end up with a merge

00:52:45,070 --> 00:52:49,690
conflict in my composer dot log file

00:52:47,170 --> 00:52:52,540
yeah and because of circumstances I

00:52:49,690 --> 00:52:56,890
absolutely just can't run Raw composer

00:52:52,540 --> 00:52:58,780
updates what would be a workaround that

00:52:56,890 --> 00:52:59,790
you can use because you don't want to

00:52:58,780 --> 00:53:01,500
bypass this

00:52:59,790 --> 00:53:03,630
some and just push up the modules in

00:53:01,500 --> 00:53:07,110
some other way well now I've got a jam

00:53:03,630 --> 00:53:09,780
up and I gotta fix it and the clear

00:53:07,110 --> 00:53:11,250
option just isn't an option okay so the

00:53:09,780 --> 00:53:14,490
reason that you would have a conflict in

00:53:11,250 --> 00:53:17,490
your composer that lock file is that you

00:53:14,490 --> 00:53:19,140
made a change in two places and so

00:53:17,490 --> 00:53:22,670
really the best way to resolve that

00:53:19,140 --> 00:53:25,410
would be to rerun both of the changes

00:53:22,670 --> 00:53:34,350
without touching your composer JSON and

00:53:25,410 --> 00:53:37,560
then commit the result if you open the

00:53:34,350 --> 00:53:41,310
pull request and code gets the 42 CI

00:53:37,560 --> 00:53:43,200
server so you need a number of CI server

00:53:41,310 --> 00:53:47,430
swatching number of four requests open

00:53:43,200 --> 00:53:49,620
right and until the pull request is

00:53:47,430 --> 00:53:52,080
closed or merged the code is still

00:53:49,620 --> 00:53:54,150
checked out there great so you're

00:53:52,080 --> 00:53:57,270
talking about the multi debit is okay

00:53:54,150 --> 00:54:01,610
right so you just provision the new CI

00:53:57,270 --> 00:54:04,140
server for each new pull request yep uh

00:54:01,610 --> 00:54:05,280
let me I think you're at something

00:54:04,140 --> 00:54:06,450
different but maybe I'll answer

00:54:05,280 --> 00:54:09,270
something else and you choose whichever

00:54:06,450 --> 00:54:10,920
you like so there's a new multi dev

00:54:09,270 --> 00:54:13,410
instance for every pull request so that

00:54:10,920 --> 00:54:15,300
so that's n number of multi does and

00:54:13,410 --> 00:54:18,030
that's just happens with phantoms kind

00:54:15,300 --> 00:54:19,080
of cool feature with circle I think

00:54:18,030 --> 00:54:20,940
you're asking about like how many

00:54:19,080 --> 00:54:22,710
instance of a circle running so I'm

00:54:20,940 --> 00:54:23,550
working on this client I have full

00:54:22,710 --> 00:54:25,230
requests coming through

00:54:23,550 --> 00:54:27,600
do you five mins later is the same thing

00:54:25,230 --> 00:54:29,730
how many threads of circle are running

00:54:27,600 --> 00:54:31,770
but I think for that the answer is last

00:54:29,730 --> 00:54:33,960
call has the you know pro plan or some

00:54:31,770 --> 00:54:36,240
mobile plan which gives you yeah eight

00:54:33,960 --> 00:54:38,940
processes and it or something like that

00:54:36,240 --> 00:54:41,130
current build yet they call it yeah yeah

00:54:38,940 --> 00:54:43,140
so I mean it depends on your plan but

00:54:41,130 --> 00:54:45,570
really the answer is as many as you pay

00:54:43,140 --> 00:54:47,520
for okay all right thank you yeah yeah

00:54:45,570 --> 00:54:48,900
and it doesn't like enter than the cost

00:54:47,520 --> 00:54:53,970
of not having it up is like it just

00:54:48,900 --> 00:54:57,870
waits a little rare exactly oh that

00:54:53,970 --> 00:54:59,130
seems to be the end of the questions so

00:54:57,870 --> 00:55:00,360
thank you everyone for staying long

00:54:59,130 --> 00:55:01,800
we're still around it's early in the

00:55:00,360 --> 00:55:03,450
conference we're happy to talk more

00:55:01,800 --> 00:55:05,400
about this all week also just as a

00:55:03,450 --> 00:55:06,630
reminder contribution Sprint's are

00:55:05,400 --> 00:55:07,860
happening on Friday if you're not

00:55:06,630 --> 00:55:08,859
already where everyone is welcome

00:55:07,860 --> 00:55:11,289
everyone

00:55:08,859 --> 00:55:13,599
contribute so we've got people here to

00:55:11,289 --> 00:55:16,599
help mentor other folks and last but not

00:55:13,599 --> 00:55:18,670
least is really helpful for us as

00:55:16,599 --> 00:55:21,039
presenters as human beings as people who

00:55:18,670 --> 00:55:23,079
try to do good work for us to get your

00:55:21,039 --> 00:55:25,239
feedback and fourth Drupal conference to

00:55:23,079 --> 00:55:27,430
hear that as well like so if you would

00:55:25,239 --> 00:55:29,019
if you would mind taking a moment so

00:55:27,430 --> 00:55:30,880
rate this sessions wealth everything

00:55:29,019 --> 00:55:33,340
else you go to that's good for all of us

00:55:30,880 --> 00:55:39,649
helps us all get better thank you

00:55:33,340 --> 00:55:39,649

YouTube URL: https://www.youtube.com/watch?v=drNfnzGjy7U


