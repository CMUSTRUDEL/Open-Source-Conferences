Title: DrupalCon Baltimore 2017: Backwards Compatibility: Burden & Benefit
Publication date: 2017-04-26
Playlist: DrupalCon Baltimore 2017
Description: 
	The benefits of backwards compatibility (BC) are clear: no users are left behind. Which leads to higher adoption rates because you're often getting new features and you always have the latest security fixes.

Of course, that's easy when you have a small API surface (as Nate Haug once said: "the WordPress API has like 11 functions!" — which is surprisingly close to the truth). But Drupal has an enormous API surface. In fact, it seems there's APIs hiding in every crevice!

In Drupal 8, we have experience with some extremes:

the BigPipe & Dynamic Page Cache modules have no API, but build on top of other APIs: they provide functionality only, not APIs
the REST module has an API, and its functionality can be modified not just via that API, but also via other APIs
The first cannot break BC. The second requires scrutiny for every line of code modified to ensure we don't break BC. For the second, the burden can easily outweigh the benefit, because how many sites actually are using this obscure edge case of the API?

We'll look at:

How can we make our modules more evolvable in the future? (Contrib & core, D8 & D9.)
Ideas to improve this, and root cause hypotheses (for example, the fact that we have API cascades and not orthogonal APIs)
We should be thinking more actively about how feature X, configuration Y or API Z might get in the way of BC. This session is only a starting point; we should continue discussing in the hallways and during dinner :)
Captions: 
	00:00:00,060 --> 00:00:06,540
welcome everybody it's a quarter of SDR

00:00:03,510 --> 00:00:08,490
so I think we're going to get started so

00:00:06,540 --> 00:00:09,630
this is a core conversation so it's

00:00:08,490 --> 00:00:10,950
meant to be a conversation

00:00:09,630 --> 00:00:13,170
first and foremost so I'm going to do a

00:00:10,950 --> 00:00:16,379
short presentation kind of short

00:00:13,170 --> 00:00:18,060
presentation about my perspective and by

00:00:16,379 --> 00:00:21,830
Chris comfortability in Drupal core

00:00:18,060 --> 00:00:25,670
specifically about triple core kind of

00:00:21,830 --> 00:00:27,840
general observations for projects so

00:00:25,670 --> 00:00:29,670
software projects like Drupal and

00:00:27,840 --> 00:00:32,399
dealing with backwards compatibility and

00:00:29,670 --> 00:00:34,440
how we can get better so it's meant to

00:00:32,399 --> 00:00:36,960
be a conversation when you do speak up

00:00:34,440 --> 00:00:39,570
please go and talk to the mic via the

00:00:36,960 --> 00:00:42,629
mic so that the recording contains the

00:00:39,570 --> 00:00:45,559
entire discussion so that people at home

00:00:42,629 --> 00:00:48,800
who cannot be here can also follow along

00:00:45,559 --> 00:00:51,030
so backwards-compatibility

00:00:48,800 --> 00:00:53,309
I'm going to talk just about a few

00:00:51,030 --> 00:00:54,989
things that I learned so I kind of know

00:00:53,309 --> 00:00:57,539
better the things that I didn't know

00:00:54,989 --> 00:00:59,460
before so there's still a lot to know a

00:00:57,539 --> 00:01:04,129
lot of things to learn I don't have a

00:00:59,460 --> 00:01:08,010
complete answer and I'm not going to

00:01:04,129 --> 00:01:10,439
have a complete answer and I see that I

00:01:08,010 --> 00:01:15,080
forgot to disable my notes I think it

00:01:10,439 --> 00:01:15,080
was this maybe it's not I'm really sorry

00:01:15,350 --> 00:01:22,670
there is something in here with no knows

00:01:22,729 --> 00:01:30,020
and doesn't work

00:01:25,140 --> 00:01:35,970
yay ok was that I know what's going on

00:01:30,020 --> 00:01:37,680
before the fragment there we go so I

00:01:35,970 --> 00:01:38,369
don't know how your else work apparently

00:01:37,680 --> 00:01:43,530
so

00:01:38,369 --> 00:01:45,210
yay so yeah things I learned I have to

00:01:43,530 --> 00:01:46,560
learn a few things I'm sure that lots of

00:01:45,210 --> 00:01:48,450
you have different perspectives and so

00:01:46,560 --> 00:01:50,579
on so let's let's get a discussion going

00:01:48,450 --> 00:01:53,930
the things I will mention I'm

00:01:50,579 --> 00:01:53,930
responsible for both the good in the bad

00:01:54,049 --> 00:01:58,320
and I'm going to rush through these so

00:01:56,909 --> 00:02:00,420
that we can have as much discussion time

00:01:58,320 --> 00:02:02,250
as possible so I'm going to look at this

00:02:00,420 --> 00:02:06,360
from a core perspective particularly so

00:02:02,250 --> 00:02:09,239
hands up who worked on Drupal core ok a

00:02:06,360 --> 00:02:11,039
third or so it will be helpful for you

00:02:09,239 --> 00:02:13,470
as well if you're working on maintaining

00:02:11,039 --> 00:02:15,420
contract modules probably it will

00:02:13,470 --> 00:02:17,430
probably be or maybe be less useful if

00:02:15,420 --> 00:02:19,860
you're working only on custom modules

00:02:17,430 --> 00:02:21,510
because then you're not really facing

00:02:19,860 --> 00:02:23,460
the burden of backwards-compatibility

00:02:21,510 --> 00:02:25,650
necessarily because you control the

00:02:23,460 --> 00:02:27,990
entire experience so with that out of

00:02:25,650 --> 00:02:30,090
the gates my analysis in a nutshell if I

00:02:27,990 --> 00:02:32,550
had only one slide I would be putting up

00:02:30,090 --> 00:02:34,530
this Drupal can be used for anything so

00:02:32,550 --> 00:02:37,080
what we do in Drupal is that every bit

00:02:34,530 --> 00:02:38,430
of code must have an API to be generic

00:02:37,080 --> 00:02:39,900
because we want support all the things

00:02:38,430 --> 00:02:41,970
it will be over aidable for the edge

00:02:39,900 --> 00:02:44,280
cases but we don't necessarily have

00:02:41,970 --> 00:02:47,100
enough time to carefully design every

00:02:44,280 --> 00:02:49,290
such API so what we end up with is

00:02:47,100 --> 00:02:52,590
something that is over engineers because

00:02:49,290 --> 00:02:54,209
we have api's for everything yes under

00:02:52,590 --> 00:02:56,310
engineer because the API is that we have

00:02:54,209 --> 00:02:59,550
are not necessarily always well designed

00:02:56,310 --> 00:03:00,780
well thought through and therefore if

00:02:59,550 --> 00:03:01,800
we're not careful BC

00:03:00,780 --> 00:03:03,810
backwards-compatibility

00:03:01,800 --> 00:03:06,030
can be a nightmare so let's get better

00:03:03,810 --> 00:03:08,340
this I think is a summary and this is

00:03:06,030 --> 00:03:11,280
what the core conversation is about so

00:03:08,340 --> 00:03:12,660
looking forward to the conversation by

00:03:11,280 --> 00:03:14,250
Chris Carter built in a nutshell is

00:03:12,660 --> 00:03:16,980
basically just promising that you can

00:03:14,250 --> 00:03:19,080
update without problems that's that's

00:03:16,980 --> 00:03:20,820
that that's the benefit the burden is

00:03:19,080 --> 00:03:23,160
the rest of the talk basically because

00:03:20,820 --> 00:03:25,170
that's the thing we face as a developer

00:03:23,160 --> 00:03:27,030
so maintain yourself Drupal core and of

00:03:25,170 --> 00:03:28,950
course reason ice recently that the

00:03:27,030 --> 00:03:30,900
point is that Drupal we have easy

00:03:28,950 --> 00:03:32,370
upgrades forever which means that

00:03:30,900 --> 00:03:34,860
backwards compatibility is ever more

00:03:32,370 --> 00:03:37,580
important because we must be backwards

00:03:34,860 --> 00:03:41,610
compatible for far longer period of time

00:03:37,580 --> 00:03:43,500
so over engineers why the question

00:03:41,610 --> 00:03:45,360
basically is why does Drupal have so

00:03:43,500 --> 00:03:47,549
many api's well I think the answer is

00:03:45,360 --> 00:03:50,790
this is my perspective is that we

00:03:47,549 --> 00:03:51,870
optimized for targeted overrides so you

00:03:50,790 --> 00:03:53,640
want to be able to override that one

00:03:51,870 --> 00:03:55,290
small thing the consequence of being

00:03:53,640 --> 00:03:56,790
able to do that or wanting to be able to

00:03:55,290 --> 00:03:59,370
do that is that you need Tran Euler ap

00:03:56,790 --> 00:04:01,860
is very to be able to touch those very

00:03:59,370 --> 00:04:03,510
small things very specific things as a

00:04:01,860 --> 00:04:05,010
consequence of that because there are

00:04:03,510 --> 00:04:07,230
many things that can be randomly

00:04:05,010 --> 00:04:10,380
overridden we have many many api's and

00:04:07,230 --> 00:04:12,330
so if we use an analogy then I think

00:04:10,380 --> 00:04:14,580
this is something that kind of works if

00:04:12,330 --> 00:04:16,470
Drupal is it specific Drupal site is

00:04:14,580 --> 00:04:18,359
like a forest and a module is them or a

00:04:16,470 --> 00:04:20,489
component is like a tree a feature

00:04:18,359 --> 00:04:23,430
within such a model as a branch and then

00:04:20,489 --> 00:04:26,130
it's super tiny thing is within such a

00:04:23,430 --> 00:04:26,520
module it's a leaf then the thing is

00:04:26,130 --> 00:04:28,620
that

00:04:26,520 --> 00:04:30,870
always optimize this to allow you to

00:04:28,620 --> 00:04:32,009
override any leaf in the entire force to

00:04:30,870 --> 00:04:35,240
be able to override at one particular

00:04:32,009 --> 00:04:38,940
tiny thing and other projects like

00:04:35,240 --> 00:04:41,699
WordPress or Django

00:04:38,940 --> 00:04:43,590
maybe amber they all require you to

00:04:41,699 --> 00:04:46,080
replace an entire branch or maybe an

00:04:43,590 --> 00:04:48,150
entire tree so they don't allow you to

00:04:46,080 --> 00:04:49,740
do the superest granular override and

00:04:48,150 --> 00:04:52,380
that makes their lives a whole lot

00:04:49,740 --> 00:04:55,259
easier and it's less overwhelming as

00:04:52,380 --> 00:04:58,590
well I think Drupal has roughly three

00:04:55,259 --> 00:05:01,580
types of AP is explicit ap is so hooks

00:04:58,590 --> 00:05:03,990
plugins like services the things that we

00:05:01,580 --> 00:05:06,030
advertised as being the ways to provide

00:05:03,990 --> 00:05:08,400
api's we also have implicit AP eyes

00:05:06,030 --> 00:05:10,380
which are our markup structure render

00:05:08,400 --> 00:05:12,830
array structure the order in which

00:05:10,380 --> 00:05:15,060
things are called so for example the

00:05:12,830 --> 00:05:16,889
execution order of hook implementations

00:05:15,060 --> 00:05:18,960
and those depend on weights and

00:05:16,889 --> 00:05:20,580
priorities so there is a kind of the

00:05:18,960 --> 00:05:22,440
implicit ap eyes which aren't officially

00:05:20,580 --> 00:05:24,090
ap eyes but if you do change them that

00:05:22,440 --> 00:05:26,250
could break backwards compatibility so

00:05:24,090 --> 00:05:28,409
we kind of cannot change them and then

00:05:26,250 --> 00:05:31,320
there is a side pocket which is

00:05:28,409 --> 00:05:33,509
accidental AP eyes because many of our

00:05:31,320 --> 00:05:37,050
interfaces if not most is very very

00:05:33,509 --> 00:05:39,449
honest and even some classes are

00:05:37,050 --> 00:05:41,250
actually also ap eyes and we didn't

00:05:39,449 --> 00:05:42,949
really design them as being ap eyes but

00:05:41,250 --> 00:05:45,150
we have to support them anyway

00:05:42,949 --> 00:05:46,800
the officials you played backwards

00:05:45,150 --> 00:05:50,880
compatibility falls he basically says

00:05:46,800 --> 00:05:53,509
this so there are three different ways

00:05:50,880 --> 00:05:55,949
that you can have an API or there's

00:05:53,509 --> 00:05:58,050
there's three distinctions in our ap

00:05:55,949 --> 00:06:00,360
eyes there's as API which is

00:05:58,050 --> 00:06:02,159
specifically marked as being a this is

00:06:00,360 --> 00:06:03,680
an API to the support that we guarantee

00:06:02,159 --> 00:06:06,509
backwards compatibility

00:06:03,680 --> 00:06:09,659
feel free to users at internal that we

00:06:06,509 --> 00:06:11,490
explicitly used to say this is not an

00:06:09,659 --> 00:06:13,440
API you could override it you could

00:06:11,490 --> 00:06:13,770
extend it but it's up to you you're on

00:06:13,440 --> 00:06:15,990
your own

00:06:13,770 --> 00:06:19,590
and then there is a third category which

00:06:15,990 --> 00:06:22,110
is the side bucket undocumented and it

00:06:19,590 --> 00:06:24,360
says literally if an API carries neither

00:06:22,110 --> 00:06:26,669
of these distinctions or nor as API nor

00:06:24,360 --> 00:06:30,509
as internal we treat it as will try very

00:06:26,669 --> 00:06:33,180
hard not to break it but we may which is

00:06:30,509 --> 00:06:35,490
of course a lot of things and then it's

00:06:33,180 --> 00:06:36,900
going to be very hard to try very hard

00:06:35,490 --> 00:06:39,490
to not break the API but then

00:06:36,900 --> 00:06:40,960
accidentally still do it

00:06:39,490 --> 00:06:42,669
and as you can see this document is

00:06:40,960 --> 00:06:44,919
still in our discussion so we have a

00:06:42,669 --> 00:06:46,750
backwards compatibility policy but it's

00:06:44,919 --> 00:06:50,889
not fully fleshed out yet and that's the

00:06:46,750 --> 00:06:53,320
problem as well and so the ads API and

00:06:50,889 --> 00:06:55,960
as internal we have that button through

00:06:53,320 --> 00:06:58,780
procore we sadly use at API zero times

00:06:55,960 --> 00:07:01,389
and at internal 53 times which is not a

00:06:58,780 --> 00:07:04,000
whole lot so that means that 99% falls

00:07:01,389 --> 00:07:07,360
in the undocumented bucket so this one

00:07:04,000 --> 00:07:11,440
which means that 99% is effectively

00:07:07,360 --> 00:07:13,210
considered kind of API so we have a way

00:07:11,440 --> 00:07:14,680
to explicit to be explicit about things

00:07:13,210 --> 00:07:16,389
and ideally we would be using it but in

00:07:14,680 --> 00:07:18,820
practice very not es using it that's a

00:07:16,389 --> 00:07:21,639
problem so elsewhere how do we how do

00:07:18,820 --> 00:07:22,780
they do things WordPress as last time I

00:07:21,639 --> 00:07:26,500
gave this part was a Drupal desde

00:07:22,780 --> 00:07:28,470
Seville there was a very well-known true

00:07:26,500 --> 00:07:31,509
Buchan or former troop contributors some

00:07:28,470 --> 00:07:34,120
he was there as well and he's moved on

00:07:31,509 --> 00:07:35,440
since kind of to WordPress to a large

00:07:34,120 --> 00:07:37,270
extent and he confirmed that this is

00:07:35,440 --> 00:07:40,960
indeed the set of API that you work with

00:07:37,270 --> 00:07:42,849
in WordPress and so much smaller set of

00:07:40,960 --> 00:07:45,490
API is for drupal this page or this

00:07:42,849 --> 00:07:48,070
screenshot would have to be maybe

00:07:45,490 --> 00:07:51,340
reaching the moon maybe not as much but

00:07:48,070 --> 00:07:55,270
it would be very very long Jango very

00:07:51,340 --> 00:07:56,889
similar very you can get easily get a

00:07:55,270 --> 00:07:59,289
good sense of what the api's are that

00:07:56,889 --> 00:08:01,930
are available so the difference is that

00:07:59,289 --> 00:08:04,150
in rupal we assume that something some

00:08:01,930 --> 00:08:06,940
piece of functionality is an API it must

00:08:04,150 --> 00:08:08,830
be an API others don't have that default

00:08:06,940 --> 00:08:11,440
assumption and that's a very important

00:08:08,830 --> 00:08:13,539
difference they are more conscious more

00:08:11,440 --> 00:08:18,130
explicit about making something in API

00:08:13,539 --> 00:08:19,870
and so for the under engineers part so I

00:08:18,130 --> 00:08:21,849
mentioned before that I think some are

00:08:19,870 --> 00:08:24,220
under engineer because we provided as an

00:08:21,849 --> 00:08:27,490
API but are necessarily very conscious

00:08:24,220 --> 00:08:28,990
about it so the accidental API I think

00:08:27,490 --> 00:08:31,449
the key reason that we have many of

00:08:28,990 --> 00:08:35,140
these is that interpolate we we went

00:08:31,449 --> 00:08:37,899
with the the Adagio or the a dodging the

00:08:35,140 --> 00:08:40,000
motto or PCI make everything

00:08:37,899 --> 00:08:42,039
object-oriented and so we had a rule

00:08:40,000 --> 00:08:43,959
basically every time we added a class in

00:08:42,039 --> 00:08:45,760
Drupal 8 core it had to have an

00:08:43,959 --> 00:08:48,130
interface because somebody might want to

00:08:45,760 --> 00:08:50,230
override it at some point of course it

00:08:48,130 --> 00:08:51,400
means that we because we just extracted

00:08:50,230 --> 00:08:52,370
an interface out of the sole

00:08:51,400 --> 00:08:53,960
implementation

00:08:52,370 --> 00:08:56,210
our interfaces are tightly coupled to

00:08:53,960 --> 00:08:57,980
that single implementation which means

00:08:56,210 --> 00:09:00,170
that as soon as we find bug fixes that

00:08:57,980 --> 00:09:01,790
we need to do and need to change the

00:09:00,170 --> 00:09:04,670
signature of some of the methods on the

00:09:01,790 --> 00:09:06,410
interface we break baseed new

00:09:04,670 --> 00:09:09,050
implementations that we add and Contrave

00:09:06,410 --> 00:09:11,990
are in core that surface certain needs

00:09:09,050 --> 00:09:13,700
we break B see an example for me for

00:09:11,990 --> 00:09:15,440
example is a new quick edit module we

00:09:13,700 --> 00:09:17,420
have an access checker so inside we

00:09:15,440 --> 00:09:19,310
weren't actually using the dollar well

00:09:17,420 --> 00:09:21,050
the current user card or we weren't

00:09:19,310 --> 00:09:22,310
explicit about the user that we were

00:09:21,050 --> 00:09:24,680
checking access for we're always using

00:09:22,310 --> 00:09:27,170
the current user service so we need to

00:09:24,680 --> 00:09:29,690
actually fix the interface by injecting

00:09:27,170 --> 00:09:31,430
that as well to the interface method but

00:09:29,690 --> 00:09:33,020
we can because doing this is breaking

00:09:31,430 --> 00:09:35,720
the API because the interface is being

00:09:33,020 --> 00:09:38,030
modified this is a super simple example

00:09:35,720 --> 00:09:41,030
and I am the one who introduced us so

00:09:38,030 --> 00:09:43,160
blame me but this is something we didn't

00:09:41,030 --> 00:09:45,020
really like it didn't bother us but now

00:09:43,160 --> 00:09:46,640
four years later when we want to make

00:09:45,020 --> 00:09:47,960
things right or make things better for

00:09:46,640 --> 00:09:50,300
the future we're suffering the

00:09:47,960 --> 00:09:52,310
consequences so poorly designed api's

00:09:50,300 --> 00:09:54,350
because honestly I didn't design this

00:09:52,310 --> 00:09:55,970
API I was just oh I have this method

00:09:54,350 --> 00:09:58,340
let's make an interface for it so

00:09:55,970 --> 00:10:00,170
anybody can override it this is not a

00:09:58,340 --> 00:10:02,900
consequence we have a very hard time

00:10:00,170 --> 00:10:04,940
into any PC and so I think in general

00:10:02,900 --> 00:10:08,120
what we need to think about it when we

00:10:04,940 --> 00:10:10,250
add API is the support cost and what we

00:10:08,120 --> 00:10:11,600
very often do is we want to have an

00:10:10,250 --> 00:10:14,020
abstraction for everything so that you

00:10:11,600 --> 00:10:16,820
can cleanly elegantly with minimal code

00:10:14,020 --> 00:10:18,680
do things differently well many other

00:10:16,820 --> 00:10:21,770
projects prefer duplication instead

00:10:18,680 --> 00:10:23,270
because that removes the cost of

00:10:21,770 --> 00:10:26,000
maintaining and supporting in a venue

00:10:23,270 --> 00:10:27,920
abstraction a new API I think it would

00:10:26,000 --> 00:10:29,270
be better if we would only add an API

00:10:27,920 --> 00:10:30,470
when we have the data to prove this

00:10:29,270 --> 00:10:32,390
farness and where there is sufficient

00:10:30,470 --> 00:10:34,250
demand we'd like you can add API sir

00:10:32,390 --> 00:10:37,250
everything under the Sun it doesn't

00:10:34,250 --> 00:10:39,440
always make sense for the 0.1% that

00:10:37,250 --> 00:10:41,660
needs it to support that API to provide

00:10:39,440 --> 00:10:44,660
that API so I think maybe we need to be

00:10:41,660 --> 00:10:46,570
more strict about it and then say oK

00:10:44,660 --> 00:10:49,250
you've got a super super edge casing

00:10:46,570 --> 00:10:52,550
you'll have to duplicate and change

00:10:49,250 --> 00:10:54,890
things that way another consequence of

00:10:52,550 --> 00:10:57,470
having some granular API is and so many

00:10:54,890 --> 00:11:00,020
API is that we have problems with

00:10:57,470 --> 00:11:03,260
discoverability because we have granular

00:11:00,020 --> 00:11:04,700
API and that means that you have to do

00:11:03,260 --> 00:11:05,540
very little work like how many of you

00:11:04,700 --> 00:11:07,910
have

00:11:05,540 --> 00:11:11,089
written a hope status has a one or two

00:11:07,910 --> 00:11:13,639
line implementation show of hands yes I

00:11:11,089 --> 00:11:16,670
have to half the room but how much time

00:11:13,639 --> 00:11:18,920
did it take you to find the exact proper

00:11:16,670 --> 00:11:21,320
name for that hook like how many of you

00:11:18,920 --> 00:11:23,899
have spent sometimes at least 20 minutes

00:11:21,320 --> 00:11:25,670
and raise of hands easily yeah the same

00:11:23,899 --> 00:11:27,709
amount of people basically because that

00:11:25,670 --> 00:11:29,810
that's a cup like we have we have

00:11:27,709 --> 00:11:31,130
granular ap is we have many AP is and so

00:11:29,810 --> 00:11:32,990
it's very hard to find just the right

00:11:31,130 --> 00:11:36,699
incantation of this magical thing

00:11:32,990 --> 00:11:39,529
basically if I'm being a bit facetious

00:11:36,699 --> 00:11:41,810
so that's that's the way we went so far

00:11:39,529 --> 00:11:44,990
but we could also do is is go with the

00:11:41,810 --> 00:11:46,550
the other route which is simpler but

00:11:44,990 --> 00:11:48,800
require more work which is just

00:11:46,550 --> 00:11:52,850
duplicating slightly and it would be so

00:11:48,800 --> 00:11:55,130
much simpler to support the second so

00:11:52,850 --> 00:11:57,500
the first one was the under engineers I

00:11:55,130 --> 00:11:59,120
sorry the accidental API now our sir

00:11:57,500 --> 00:12:00,769
analogy which is a fancy word but it

00:11:59,120 --> 00:12:02,540
really just means small number of

00:12:00,769 --> 00:12:04,850
components and you can build complex

00:12:02,540 --> 00:12:06,139
advanced things so how do we have a

00:12:04,850 --> 00:12:07,550
small number of components to build

00:12:06,139 --> 00:12:11,779
anything that we want so I think in the

00:12:07,550 --> 00:12:13,459
case of Drupal the answer is no and few

00:12:11,779 --> 00:12:15,319
examples to make this maybe a bit more

00:12:13,459 --> 00:12:18,139
clear the automated cron module in

00:12:15,319 --> 00:12:20,000
Drupal 8 it has it depends on five API

00:12:18,139 --> 00:12:22,069
is in Drupal it has it depends on the

00:12:20,000 --> 00:12:23,209
form API to provide you with a form

00:12:22,069 --> 00:12:25,130
where you can configure things the

00:12:23,209 --> 00:12:28,430
configuration that you can set up there

00:12:25,130 --> 00:12:29,839
is stored in the config API and that

00:12:28,430 --> 00:12:31,459
configuration is then used by an event

00:12:29,839 --> 00:12:33,709
subscriber that runs on every request

00:12:31,459 --> 00:12:35,839
that runs the current service and tracks

00:12:33,709 --> 00:12:37,670
in the state API when the last time was

00:12:35,839 --> 00:12:39,860
that it ran see I can explain it in one

00:12:37,670 --> 00:12:42,980
sentence basically that sounds like it's

00:12:39,860 --> 00:12:46,490
a pretty reasonably well it's pretty

00:12:42,980 --> 00:12:47,329
simply built in a simple way it's

00:12:46,490 --> 00:12:49,459
understandable

00:12:47,329 --> 00:12:52,310
Big Five is a similar story but then

00:12:49,459 --> 00:12:53,660
entity API itself so just using entity

00:12:52,310 --> 00:12:56,779
API means that you're using more than

00:12:53,660 --> 00:12:58,310
ten API and it's necessary like it makes

00:12:56,779 --> 00:13:00,560
sense at MC API which is a bread and

00:12:58,310 --> 00:13:02,810
butter of Drupal that it uses many of

00:13:00,560 --> 00:13:04,819
the underlying API but maybe we can make

00:13:02,810 --> 00:13:07,490
it a little bit simpler I think we have

00:13:04,819 --> 00:13:10,639
to be more we to try harder maybe to do

00:13:07,490 --> 00:13:12,350
so but so the consequence is whenever

00:13:10,639 --> 00:13:13,819
you're using SD API you don't have to

00:13:12,350 --> 00:13:14,910
know just enter the API you have to know

00:13:13,819 --> 00:13:16,830
about

00:13:14,910 --> 00:13:19,940
morons na vis and maybe understand their

00:13:16,830 --> 00:13:23,970
debug in very different sets of api's

00:13:19,940 --> 00:13:24,840
another related thing is Cascades and

00:13:23,970 --> 00:13:26,670
this is something that's particularly

00:13:24,840 --> 00:13:28,590
true for the end of the API and again

00:13:26,670 --> 00:13:32,490
for a good reason we wanted to make sure

00:13:28,590 --> 00:13:34,290
that you could jump in at the right

00:13:32,490 --> 00:13:38,280
level of abstraction for your use case

00:13:34,290 --> 00:13:40,260
and so we have a very steep hierarchy of

00:13:38,280 --> 00:13:43,560
things that are extending each other to

00:13:40,260 --> 00:13:45,570
ever layer on more meaning and it makes

00:13:43,560 --> 00:13:48,360
sense but it the end result is that you

00:13:45,570 --> 00:13:49,650
have these very very complex sets of

00:13:48,360 --> 00:13:51,180
interfaces that they were being

00:13:49,650 --> 00:13:54,210
implemented and you need to know about

00:13:51,180 --> 00:13:56,160
all of them and then once you have an

00:13:54,210 --> 00:13:58,040
entity and you retrieve a field and for

00:13:56,160 --> 00:14:00,690
a field itself it's again the same story

00:13:58,040 --> 00:14:02,970
this is very difficult to understand and

00:14:00,690 --> 00:14:04,320
it can take you a long time to layer it

00:14:02,970 --> 00:14:05,940
if you step through the different layers

00:14:04,320 --> 00:14:07,530
in order to figure out what exactly is

00:14:05,940 --> 00:14:08,880
happening so we did this for the right

00:14:07,530 --> 00:14:11,040
reasons but at the same time it has

00:14:08,880 --> 00:14:12,990
consequences for DX for debug ability

00:14:11,040 --> 00:14:17,070
and so on maybe we need to reconsider

00:14:12,990 --> 00:14:18,300
that so in using some of these api's can

00:14:17,070 --> 00:14:21,510
actually take you down a rabbit hole

00:14:18,300 --> 00:14:24,410
kind of like this and it can be kind of

00:14:21,510 --> 00:14:27,210
scary even though it kind of looks cool

00:14:24,410 --> 00:14:29,340
in any case mathas composition is what

00:14:27,210 --> 00:14:31,530
we do we have long inheritance chains

00:14:29,340 --> 00:14:33,360
that we do as well and it consequences

00:14:31,530 --> 00:14:35,070
that for both you need massive amounts

00:14:33,360 --> 00:14:39,000
of knowledge like you need to learn in

00:14:35,070 --> 00:14:40,830
and out of the system then the last kind

00:14:39,000 --> 00:14:43,620
of end there Engineers assumptions so

00:14:40,830 --> 00:14:45,690
this a cute little baby is trying to fit

00:14:43,620 --> 00:14:48,360
the block in and it's it's really not

00:14:45,690 --> 00:14:52,020
fitting in any of the the hole so she

00:14:48,360 --> 00:14:53,760
just goes the other way and like if you

00:14:52,020 --> 00:14:56,130
can't find the right the exact right

00:14:53,760 --> 00:14:58,050
hook you might just go with a nuclear

00:14:56,130 --> 00:15:00,030
option and do in Drupal 7 equivalent of

00:14:58,050 --> 00:15:02,490
hook page alter and replace all the

00:15:00,030 --> 00:15:04,290
things that sort of thing so when it

00:15:02,490 --> 00:15:07,620
when it is necessary well Drupal core

00:15:04,290 --> 00:15:10,140
does a certain thing and then the module

00:15:07,620 --> 00:15:12,090
and the API all have built have been

00:15:10,140 --> 00:15:14,160
built with the assumption that the same

00:15:12,090 --> 00:15:15,720
thing is always what happens like that's

00:15:14,160 --> 00:15:17,190
how it happens and it will never change

00:15:15,720 --> 00:15:19,080
but then once you install a contract

00:15:17,190 --> 00:15:22,620
module whoops all of a sudden is no

00:15:19,080 --> 00:15:25,140
longer true and then sadness so for me

00:15:22,620 --> 00:15:27,240
for example I suffer from this as well

00:15:25,140 --> 00:15:28,950
so I published a super simple module no

00:15:27,240 --> 00:15:30,960
configuration no UI in such

00:15:28,950 --> 00:15:32,280
what can go wrong well turn something

00:15:30,960 --> 00:15:34,620
goes wrong when you install the advanced

00:15:32,280 --> 00:15:38,820
aggregation module because in my code I

00:15:34,620 --> 00:15:41,570
assumed that everything in the H in the

00:15:38,820 --> 00:15:43,860
HTML had elements would always be

00:15:41,570 --> 00:15:48,090
something of this form that we have a

00:15:43,860 --> 00:15:50,070
parent tag render array kind of and then

00:15:48,090 --> 00:15:51,450
we could work with that but turns out

00:15:50,070 --> 00:15:52,830
that once you install it sounds like

00:15:51,450 --> 00:15:54,540
regression there can be something else

00:15:52,830 --> 00:15:56,880
in there still so my assumptions were

00:15:54,540 --> 00:15:58,560
wrong and I didn't test them worked fine

00:15:56,880 --> 00:16:00,270
as long as you were using just Drupal

00:15:58,560 --> 00:16:01,380
core and dozens and dozens of modules

00:16:00,270 --> 00:16:02,880
but as soon as you install this one

00:16:01,380 --> 00:16:04,440
extra contrib modules then there's

00:16:02,880 --> 00:16:08,070
something new appears am I saying brakes

00:16:04,440 --> 00:16:09,780
completely so assumptions we have many

00:16:08,070 --> 00:16:11,820
of them but we're not always explicit

00:16:09,780 --> 00:16:14,430
about them and we're very often

00:16:11,820 --> 00:16:17,280
forgetting to test them so making these

00:16:14,430 --> 00:16:19,410
assumptions explicit by using a third or

00:16:17,280 --> 00:16:22,620
adding test coverage that would be

00:16:19,410 --> 00:16:25,380
better and I'm finally extreme one end

00:16:22,620 --> 00:16:27,810
for for the consequences of these things

00:16:25,380 --> 00:16:32,130
residency realization it's a beautiful

00:16:27,810 --> 00:16:35,190
thing unless a pre exam in Drupal 8 zero

00:16:32,130 --> 00:16:37,890
we shipped rest as stable but

00:16:35,190 --> 00:16:39,600
unfortunately we had only very thin desk

00:16:37,890 --> 00:16:41,160
our test coverage and only for the happy

00:16:39,600 --> 00:16:43,140
path so as soon as you made a mistake

00:16:41,160 --> 00:16:45,150
like something you can trigger a

00:16:43,140 --> 00:16:47,100
validation error or whatnot

00:16:45,150 --> 00:16:48,810
you would be getting very very very

00:16:47,100 --> 00:16:50,430
difficult to understand errors and you

00:16:48,810 --> 00:16:52,680
would be able to solve them basically

00:16:50,430 --> 00:16:54,270
only if you were stepping through it

00:16:52,680 --> 00:16:58,080
with a PHP debugger which is not ideal

00:16:54,270 --> 00:17:00,180
for a REST API things like serialization

00:16:58,080 --> 00:17:02,130
gap so we need to provide everything

00:17:00,180 --> 00:17:04,079
like everything that is in Drupal core

00:17:02,130 --> 00:17:07,770
in terms of entities and fields needs to

00:17:04,079 --> 00:17:09,720
be accessible via rest but unfortunately

00:17:07,770 --> 00:17:10,829
when we fix those things to the things

00:17:09,720 --> 00:17:14,579
that are currently not entirely

00:17:10,829 --> 00:17:17,310
supported or even broken the problem is

00:17:14,579 --> 00:17:18,930
that we will break BC so we did

00:17:17,310 --> 00:17:20,579
something we didn't anticipate when the

00:17:18,930 --> 00:17:22,650
rest Marshall was made stable when we

00:17:20,579 --> 00:17:24,209
when it was built and we're suffering

00:17:22,650 --> 00:17:25,800
the consequences now so we're fixing

00:17:24,209 --> 00:17:28,380
these things but it's very hard to find

00:17:25,800 --> 00:17:31,770
just the right line between fixing it

00:17:28,380 --> 00:17:33,180
and breaking BC so when the entire

00:17:31,770 --> 00:17:36,680
response is an API you have to apply

00:17:33,180 --> 00:17:38,940
extreme care so in this case I think

00:17:36,680 --> 00:17:40,800
overall the lesson is that when the API

00:17:38,940 --> 00:17:42,150
surface is great the test coverage must

00:17:40,800 --> 00:17:44,040
be even greater and

00:17:42,150 --> 00:17:46,980
for example that is the case it's an

00:17:44,040 --> 00:17:48,630
enormous surface that we are exposing to

00:17:46,980 --> 00:17:50,250
the world and that we supposedly

00:17:48,630 --> 00:17:53,730
supporting and so on but it's very

00:17:50,250 --> 00:17:55,170
difficult to actually do that and the

00:17:53,730 --> 00:17:57,330
problem is again that we're not clearly

00:17:55,170 --> 00:18:00,900
about clear about what is the API what

00:17:57,330 --> 00:18:02,160
is not extreme other M it's something

00:18:00,900 --> 00:18:03,930
that has no interface this thing is

00:18:02,160 --> 00:18:06,900
moving and has no interaction at all

00:18:03,930 --> 00:18:08,910
it's moving by itself for example the

00:18:06,900 --> 00:18:11,790
dynamic page cache module this is the

00:18:08,910 --> 00:18:13,500
entire list of issues faces any status

00:18:11,790 --> 00:18:15,390
any priority any category any version

00:18:13,500 --> 00:18:18,600
for the dynamic page cache module five

00:18:15,390 --> 00:18:20,430
issues in total because we had like it

00:18:18,600 --> 00:18:22,760
was very scary to add a satrupa core it

00:18:20,430 --> 00:18:25,740
was even scarier to enable it by default

00:18:22,760 --> 00:18:27,330
and so we had a lot of time spent on

00:18:25,740 --> 00:18:29,340
test coverage so we tested every

00:18:27,330 --> 00:18:30,990
possible assumption every possible

00:18:29,340 --> 00:18:35,370
educate and the result of that is far

00:18:30,990 --> 00:18:37,050
more maintainable big five we were very

00:18:35,370 --> 00:18:38,280
explicit about it because I because of

00:18:37,050 --> 00:18:40,140
the experience I had with rest

00:18:38,280 --> 00:18:41,940
I was very explicit and I marked every

00:18:40,140 --> 00:18:43,320
single thing as internal because what

00:18:41,940 --> 00:18:45,360
they fight provides is not something is

00:18:43,320 --> 00:18:46,830
configurable it's not about API device

00:18:45,360 --> 00:18:49,350
functionality so we were very explicit

00:18:46,830 --> 00:18:51,660
about not providing api's so that we

00:18:49,350 --> 00:18:53,490
don't have something that is a kind of

00:18:51,660 --> 00:18:56,190
undocumented and therefore we need to

00:18:53,490 --> 00:18:58,230
maintain BC otherwise we break it and so

00:18:56,190 --> 00:19:02,070
I think something that we very often

00:18:58,230 --> 00:19:04,290
forget about it is that we actually also

00:19:02,070 --> 00:19:06,810
choose to not provide an API I think

00:19:04,290 --> 00:19:09,090
very often we can provide very same set

00:19:06,810 --> 00:19:12,120
of default or same default behavior and

00:19:09,090 --> 00:19:13,830
you can customize it by swapping out an

00:19:12,120 --> 00:19:17,100
entire service or swapping out an entire

00:19:13,830 --> 00:19:18,600
class that can be the only way for you

00:19:17,100 --> 00:19:21,660
to override something that makes it far

00:19:18,600 --> 00:19:24,690
more easy to configure easier to support

00:19:21,660 --> 00:19:27,500
and so on because the default behavior

00:19:24,690 --> 00:19:29,640
for the 99.9% will always be the same

00:19:27,500 --> 00:19:31,050
and that's something that's not possible

00:19:29,640 --> 00:19:32,640
for everything but for example for Big

00:19:31,050 --> 00:19:34,350
Five it is but we could have provided

00:19:32,640 --> 00:19:37,560
several configuration options for it as

00:19:34,350 --> 00:19:40,620
well where we chose not to and so this

00:19:37,560 --> 00:19:43,560
is what I have and now we switch to

00:19:40,620 --> 00:19:46,250
discussion basically I think these are

00:19:43,560 --> 00:19:48,660
the three things are for me jump art

00:19:46,250 --> 00:19:50,700
functionality first and then later at

00:19:48,660 --> 00:19:52,770
the API and not start with also shipping

00:19:50,700 --> 00:19:54,630
an API that's something we did so in

00:19:52,770 --> 00:19:55,650
other words so everything should be

00:19:54,630 --> 00:19:58,200
Markus at internal

00:19:55,650 --> 00:20:00,420
first and you can add API later once you

00:19:58,200 --> 00:20:01,920
have sufficient confidence and you see

00:20:00,420 --> 00:20:04,410
to prove that there is a need for it

00:20:01,920 --> 00:20:06,870
preferring the referring duplication

00:20:04,410 --> 00:20:08,100
over the wrong abstraction and finally I

00:20:06,870 --> 00:20:09,450
think we're pretty good about detecting

00:20:08,100 --> 00:20:11,430
a critical class or decent device

00:20:09,450 --> 00:20:12,570
testing edge cases but I think we're not

00:20:11,430 --> 00:20:15,360
good enough yet about testing

00:20:12,570 --> 00:20:17,370
assumptions and so assumptions that this

00:20:15,360 --> 00:20:20,160
thing will always have this data will

00:20:17,370 --> 00:20:21,900
always have this sort of shape that's

00:20:20,160 --> 00:20:25,860
something we I think kind of often

00:20:21,900 --> 00:20:28,430
forgotten about so I I want to make

00:20:25,860 --> 00:20:30,500
Drupal core more supportable more

00:20:28,430 --> 00:20:32,910
backwards-compatibility maintainable

00:20:30,500 --> 00:20:37,920
because I see in rest that it's very

00:20:32,910 --> 00:20:40,310
difficult to do so so with that that's

00:20:37,920 --> 00:20:40,310
the sky

00:20:40,790 --> 00:20:48,600
if anybody haunts you I have a question

00:20:44,850 --> 00:20:51,720
so use white on this Daniel Vina and on

00:20:48,600 --> 00:20:52,380
this slide you say API later in terms

00:20:51,720 --> 00:20:54,900
first

00:20:52,380 --> 00:20:57,630
but that means for new things right even

00:20:54,900 --> 00:20:58,440
reset today we don't want to put too

00:20:57,630 --> 00:21:00,710
many new things

00:20:58,440 --> 00:21:04,230
of course I'm wondering can we make

00:21:00,710 --> 00:21:05,940
existing things internal oh like a

00:21:04,230 --> 00:21:08,400
really good question or on which levels

00:21:05,940 --> 00:21:11,850
like that yeah I mean there are layers

00:21:08,400 --> 00:21:14,610
in our system which is like yeah I mean

00:21:11,850 --> 00:21:16,410
like you mean with swept stuff yeah you

00:21:14,610 --> 00:21:18,690
could override from the boots or stuff

00:21:16,410 --> 00:21:21,390
but it's that our API can we say there's

00:21:18,690 --> 00:21:24,750
actually not our API yeah we used to

00:21:21,390 --> 00:21:26,670
kind support you but if things wake me

00:21:24,750 --> 00:21:28,140
up there there are lots of things that I

00:21:26,670 --> 00:21:30,930
think that's also what you're getting at

00:21:28,140 --> 00:21:32,700
there are lots of things that are like

00:21:30,930 --> 00:21:34,650
you could theoretically override them

00:21:32,700 --> 00:21:36,330
but we should actually mark them as

00:21:34,650 --> 00:21:38,850
internal because there will be maybe one

00:21:36,330 --> 00:21:40,860
in 10,000 people who override it can we

00:21:38,850 --> 00:21:42,420
then mark it as internal now so that we

00:21:40,860 --> 00:21:43,560
avoid saying in the future I think

00:21:42,420 --> 00:21:46,920
that's what you're getting at right so

00:21:43,560 --> 00:21:48,750
there's a very long term catch by the

00:21:46,920 --> 00:21:50,910
way net control there's a very long

00:21:48,750 --> 00:21:55,890
documentation page and people talk about

00:21:50,910 --> 00:21:59,490
a PC policy but which I'm sure will you

00:21:55,890 --> 00:22:02,650
know as a cycle yet and that has a list

00:21:59,490 --> 00:22:06,670
of things that are internal

00:22:02,650 --> 00:22:09,100
that are marked and it's a long list and

00:22:06,670 --> 00:22:11,710
a lot of those things in court don't

00:22:09,100 --> 00:22:14,440
have the internal yeah actually

00:22:11,710 --> 00:22:15,820
whatsoever so this is a small part that

00:22:14,440 --> 00:22:19,030
you've missed the beginning so ready

00:22:15,820 --> 00:22:20,740
fine so at API that's what we use to

00:22:19,030 --> 00:22:22,630
mark something as an explicit API at

00:22:20,740 --> 00:22:24,130
internal to say this is not something we

00:22:22,630 --> 00:22:26,320
support you can do this when you're on

00:22:24,130 --> 00:22:28,090
your own and then there's this one and

00:22:26,320 --> 00:22:30,880
that's the problem the undocumented one

00:22:28,090 --> 00:22:33,430
because that says we'll try hard to not

00:22:30,880 --> 00:22:35,380
break it but we may these will receive a

00:22:33,430 --> 00:22:37,150
release now it's mention so let's write

00:22:35,380 --> 00:22:38,530
very hard not to break it it's very much

00:22:37,150 --> 00:22:40,480
what we do but that means that we're

00:22:38,530 --> 00:22:42,250
getting ourselves stuck in a corner yeah

00:22:40,480 --> 00:22:44,440
but then underneath that we have Lisa

00:22:42,250 --> 00:22:46,990
the things that we have break and those

00:22:44,440 --> 00:22:49,240
things we should go back which

00:22:46,990 --> 00:22:51,730
respectively and mark them as at

00:22:49,240 --> 00:22:53,230
internal okay and if we did that they're

00:22:51,730 --> 00:22:55,990
nothing people's expectations

00:22:53,230 --> 00:22:57,970
yeah met alike earlier rather than what

00:22:55,990 --> 00:22:59,860
normally happens is we break some minor

00:22:57,970 --> 00:23:02,740
release if you like you broke my module

00:22:59,860 --> 00:23:04,540
and were like yes we did that's why it

00:23:02,740 --> 00:23:06,910
was in a minor release here's the long

00:23:04,540 --> 00:23:08,320
place to explain the revoking failure

00:23:06,910 --> 00:23:10,000
you're seeing rather than pointing

00:23:08,320 --> 00:23:11,620
people to this long page and expecting

00:23:10,000 --> 00:23:13,840
him to look it up for every single thing

00:23:11,620 --> 00:23:15,550
let's move the as internal explicitly

00:23:13,840 --> 00:23:17,950
into every single thing that this page

00:23:15,550 --> 00:23:20,440
so yeah we've had we had an issue open

00:23:17,950 --> 00:23:23,260
to do that three years ago and it's

00:23:20,440 --> 00:23:23,580
never been done I would be happy to do

00:23:23,260 --> 00:23:26,470
that

00:23:23,580 --> 00:23:30,040
I'm involving it but part the problem

00:23:26,470 --> 00:23:32,080
that we've had is that getting to that

00:23:30,040 --> 00:23:35,610
list has taken two years of iterative

00:23:32,080 --> 00:23:37,750
work like up like some issues go in and

00:23:35,610 --> 00:23:39,370
the only way that they go in is that

00:23:37,750 --> 00:23:41,380
we've had to edit this page to kind of

00:23:39,370 --> 00:23:42,580
retrospectively define a policy about

00:23:41,380 --> 00:23:45,640
whether certain changes could be made

00:23:42,580 --> 00:23:47,410
because it was completely open and and

00:23:45,640 --> 00:23:49,660
that's I mean it kind of says that it

00:23:47,410 --> 00:23:52,120
still says needs technical review yep

00:23:49,660 --> 00:23:54,429
because it's Infosys and as big

00:23:52,120 --> 00:23:55,900
disclaimer at the top because we didn't

00:23:54,429 --> 00:23:57,670
do this work and every or four years ago

00:23:55,900 --> 00:23:59,170
yeah and I think there's not even more

00:23:57,670 --> 00:24:01,540
important with the reason I'm saying

00:23:59,170 --> 00:24:03,760
that we want to be able to move

00:24:01,540 --> 00:24:05,740
tragically to Drupal 9 without pain so

00:24:03,760 --> 00:24:08,290
it's even more important that this is

00:24:05,740 --> 00:24:09,940
moved out of just in discussion phase

00:24:08,290 --> 00:24:11,620
and into a phase where it's more

00:24:09,940 --> 00:24:13,570
explicit yeah I mean the things that are

00:24:11,620 --> 00:24:14,650
explicit in there can be yeah

00:24:13,570 --> 00:24:18,030
documenting in

00:24:14,650 --> 00:24:22,240
okay I'll be able to what computer code

00:24:18,030 --> 00:24:23,800
hi I'm Edie I I wanted to I'm hearing a

00:24:22,240 --> 00:24:25,450
lot of similarities so I'll say other

00:24:23,800 --> 00:24:27,160
things I've experienced where I'm more

00:24:25,450 --> 00:24:29,230
involved in amber community because we

00:24:27,160 --> 00:24:34,420
cared a lot about vacuum compatibility

00:24:29,230 --> 00:24:37,120
for over a series of years and one idea

00:24:34,420 --> 00:24:38,710
to throw out there is we started out

00:24:37,120 --> 00:24:41,110
with kind of two categories which are

00:24:38,710 --> 00:24:43,990
map very much to API and internal public

00:24:41,110 --> 00:24:46,809
and private and we realized there is

00:24:43,990 --> 00:24:48,550
always a third category and it's not

00:24:46,809 --> 00:24:50,530
necessarily whether it's undocumented up

00:24:48,550 --> 00:24:53,950
but we tend to call them intimate API

00:24:50,530 --> 00:24:57,910
and and they get discovered by use case

00:24:53,950 --> 00:24:59,860
right so mostly and I think this is true

00:24:57,910 --> 00:25:02,050
in Drupal as well most of the people who

00:24:59,860 --> 00:25:03,550
are diving into internal API s are

00:25:02,050 --> 00:25:04,840
probably writing modules they're

00:25:03,550 --> 00:25:07,360
probably writing plugins right they're

00:25:04,840 --> 00:25:09,130
like using your own good hopefully you

00:25:07,360 --> 00:25:10,929
don't go directly from your app to

00:25:09,130 --> 00:25:12,220
diving deep into internals you need some

00:25:10,929 --> 00:25:14,559
functionality you write up what you

00:25:12,220 --> 00:25:17,140
write the contributory or custom module

00:25:14,559 --> 00:25:18,850
at least if you can give visibility into

00:25:17,140 --> 00:25:21,040
which modules are using which API is

00:25:18,850 --> 00:25:22,540
that give you getting that data is

00:25:21,040 --> 00:25:24,429
extremely valuable to make these

00:25:22,540 --> 00:25:26,080
decisions because it's like you said a

00:25:24,429 --> 00:25:28,570
lot of these things might actually be

00:25:26,080 --> 00:25:31,690
tiny minorities of apps that get broken

00:25:28,570 --> 00:25:32,920
and then that's much easier problem on

00:25:31,690 --> 00:25:34,120
the other hand you might have some piece

00:25:32,920 --> 00:25:35,800
of internals you don't realize that a

00:25:34,120 --> 00:25:37,690
huge number of sites to rely on because

00:25:35,800 --> 00:25:41,260
of some very popular module it does it

00:25:37,690 --> 00:25:43,450
so data is critical there yeah the other

00:25:41,260 --> 00:25:45,550
thing I wanted to say about retconning

00:25:43,450 --> 00:25:47,500
which things were private I think from

00:25:45,550 --> 00:25:49,450
visas keynote when he talked about the

00:25:47,500 --> 00:25:51,580
strategy of making minor releases

00:25:49,450 --> 00:25:53,740
additives and then major really with

00:25:51,580 --> 00:25:55,830
deprecation warnings and then major

00:25:53,740 --> 00:25:57,850
releases dropping deprecated features

00:25:55,830 --> 00:26:00,700
that's the same pattern we've been using

00:25:57,850 --> 00:26:02,050
very successfully and it's a way out to

00:26:00,700 --> 00:26:04,000
doing this things with private if you

00:26:02,050 --> 00:26:05,950
guys as well basically you can take

00:26:04,000 --> 00:26:08,740
something and move it and make the old

00:26:05,950 --> 00:26:09,970
one deprecated right it might still be

00:26:08,740 --> 00:26:11,350
there it might even still have the same

00:26:09,970 --> 00:26:12,910
API but you've decided it needs to be

00:26:11,350 --> 00:26:15,520
private now you know people are using it

00:26:12,910 --> 00:26:16,690
you make it you essentially make sure

00:26:15,520 --> 00:26:19,330
anybody accessing it through the old

00:26:16,690 --> 00:26:21,280
path gets the deprecation warning now

00:26:19,330 --> 00:26:23,230
when they go to Drupal 8 5 or whatever

00:26:21,280 --> 00:26:24,790
some minor release if they try to

00:26:23,230 --> 00:26:25,810
actually clear all their deprecations

00:26:24,790 --> 00:26:27,530
they're going to have to get off that

00:26:25,810 --> 00:26:30,320
API that's private API

00:26:27,530 --> 00:26:31,850
and now and then when you hit Drupal 9

00:26:30,320 --> 00:26:33,860
you could now it's like completely

00:26:31,850 --> 00:26:37,160
private and the public accessible one is

00:26:33,860 --> 00:26:38,720
gone it's a great strategy so some some

00:26:37,160 --> 00:26:40,490
may say yep thanks for letting us know

00:26:38,720 --> 00:26:44,240
that but it's working really well for a

00:26:40,490 --> 00:26:46,490
birth definitely did so at the beginning

00:26:44,240 --> 00:26:49,160
of the conversation you mentioned about

00:26:46,490 --> 00:26:51,140
the burden and bid just beyond encore

00:26:49,160 --> 00:26:52,820
but it actually you know when you're

00:26:51,140 --> 00:26:54,980
talking about rest it's just it's

00:26:52,820 --> 00:26:57,620
everywhere yeah for the rest of every

00:26:54,980 --> 00:26:59,450
year not just Drupal so no when you make

00:26:57,620 --> 00:27:02,510
an API and you provide a restful

00:26:59,450 --> 00:27:04,460
interface for for vendors or whatever to

00:27:02,510 --> 00:27:07,190
consume out in the world they're going

00:27:04,460 --> 00:27:10,220
to be making apps and then when you

00:27:07,190 --> 00:27:12,380
update that contribute a core and it

00:27:10,220 --> 00:27:15,080
breaks some sort of like content

00:27:12,380 --> 00:27:18,620
negotiation just somehow changes and

00:27:15,080 --> 00:27:20,570
then that app or several apps that you

00:27:18,620 --> 00:27:21,830
have no control over written by someone

00:27:20,570 --> 00:27:24,290
else in a different language

00:27:21,830 --> 00:27:29,150
now breaks they're coming to you and you

00:27:24,290 --> 00:27:33,080
feel this intense like like it becomes

00:27:29,150 --> 00:27:36,370
very hard to defend those changes so I

00:27:33,080 --> 00:27:39,860
feel really strongly about just know I

00:27:36,370 --> 00:27:41,780
having a good API like standard and and

00:27:39,860 --> 00:27:44,450
not breaking BC as much as possible

00:27:41,780 --> 00:27:46,880
because it gets really hard to defend

00:27:44,450 --> 00:27:48,650
Drupal when it's you know you're running

00:27:46,880 --> 00:27:52,040
into these changes in front of like

00:27:48,650 --> 00:27:53,690
people outside the Drupal community yeah

00:27:52,040 --> 00:27:56,330
so you're specifically referring to REST

00:27:53,690 --> 00:27:58,340
API Zen it sounds like or it could be

00:27:56,330 --> 00:27:59,720
other things as well yeah wait Perez's

00:27:58,340 --> 00:28:01,400
lecture are difficult especially for

00:27:59,720 --> 00:28:03,500
Drupal because we allow data model

00:28:01,400 --> 00:28:06,080
changes to make me to be made by the UI

00:28:03,500 --> 00:28:08,060
by by anybody so that that will also

00:28:06,080 --> 00:28:12,470
cause likewise credibility breaks for

00:28:08,060 --> 00:28:14,090
those api's so i know the west community

00:28:12,470 --> 00:28:17,690
which is a different programming

00:28:14,090 --> 00:28:19,670
language and what they have like

00:28:17,690 --> 00:28:23,600
packages they have a poster of all they

00:28:19,670 --> 00:28:26,780
are like libraries and what they do is

00:28:23,600 --> 00:28:31,010
for changes in the api or even for any

00:28:26,780 --> 00:28:35,210
change they won the test against each

00:28:31,010 --> 00:28:36,230
library with the new compiler so we

00:28:35,210 --> 00:28:38,690
could

00:28:36,230 --> 00:28:40,789
like what I mean what we do at the

00:28:38,690 --> 00:28:43,010
moment is we run all tests of concept

00:28:40,789 --> 00:28:46,399
modules against them but we could get

00:28:43,010 --> 00:28:48,559
the data into the qualitative we always

00:28:46,399 --> 00:28:52,460
want them we just need to facilitate

00:28:48,559 --> 00:28:54,409
them so I don't know how easy that is

00:28:52,460 --> 00:28:55,700
and another thing of course it doesn't

00:28:54,409 --> 00:28:57,590
work if the test coverage for that

00:28:55,700 --> 00:29:00,230
module is not complete enough but it

00:28:57,590 --> 00:29:01,760
will already help because many to have

00:29:00,230 --> 00:29:04,519
at least are you going to make it just

00:29:01,760 --> 00:29:06,440
for something I know yeah and the other

00:29:04,519 --> 00:29:08,659
thing so I was wondering again about

00:29:06,440 --> 00:29:10,519
this internal API thing so I'm wondering

00:29:08,659 --> 00:29:13,340
whether we can duplicate things before

00:29:10,519 --> 00:29:18,230
we actually change things and then wait

00:29:13,340 --> 00:29:20,200
a release like I was thinking about your

00:29:18,230 --> 00:29:23,899
public func of your area or a quick

00:29:20,200 --> 00:29:27,380
click edit yeah so let's assume that

00:29:23,899 --> 00:29:29,120
would have been an API we could probably

00:29:27,380 --> 00:29:32,240
in that example somehow

00:29:29,120 --> 00:29:39,830
so an application or some other warning

00:29:32,240 --> 00:29:44,000
in 8 3 and then change it in 8 for like

00:29:39,830 --> 00:29:46,100
1/2 year later or so you mean that

00:29:44,000 --> 00:29:48,200
require module to update within one

00:29:46,100 --> 00:29:50,450
minor allele annex out of waiting until

00:29:48,200 --> 00:29:53,029
major because that's something as

00:29:50,450 --> 00:29:59,899
mentioned in specific at ember at least

00:29:53,029 --> 00:30:01,429
is yes can you go to the mic we do that

00:29:59,899 --> 00:30:03,260
somewhat similar and we make a

00:30:01,429 --> 00:30:04,490
distinction between things things that

00:30:03,260 --> 00:30:05,960
are explicitly private when we're

00:30:04,490 --> 00:30:09,019
already private we can break on a minor

00:30:05,960 --> 00:30:11,269
that's ok course things that are

00:30:09,019 --> 00:30:13,309
exclusively public you can't drop until

00:30:11,269 --> 00:30:14,929
a major and that's obvious to the

00:30:13,309 --> 00:30:17,029
intimate api's which is the ones that we

00:30:14,929 --> 00:30:18,110
know they were either not marked they

00:30:17,029 --> 00:30:19,639
might have been explicitly marked

00:30:18,110 --> 00:30:22,429
private but we know that they're very

00:30:19,639 --> 00:30:23,929
popular because some popular add-on just

00:30:22,429 --> 00:30:25,549
needed it to get the job done and

00:30:23,929 --> 00:30:28,309
started using it we consider those an

00:30:25,549 --> 00:30:30,289
intimate API and those week we will not

00:30:28,309 --> 00:30:32,630
break we until we have deprecated them

00:30:30,289 --> 00:30:34,039
for one LTS cycle which for us is about

00:30:32,630 --> 00:30:36,380
the same as your miners because it's

00:30:34,039 --> 00:30:39,980
about six months our miners are six

00:30:36,380 --> 00:30:41,240
weeks our LCS cycles six months yeah so

00:30:39,980 --> 00:30:43,190
you get you get to guarantee that as

00:30:41,240 --> 00:30:44,960
long as you hit the LTS releases in

00:30:43,190 --> 00:30:46,549
order you will see a duplication before

00:30:44,960 --> 00:30:47,840
you get a break even even though it was

00:30:46,549 --> 00:30:48,650
marked private we know a lot of people

00:30:47,840 --> 00:30:51,320
are using it

00:30:48,650 --> 00:30:53,150
don't do that way so we think that the

00:30:51,320 --> 00:30:54,860
minor releases like from one minor

00:30:53,150 --> 00:30:57,290
release to the next we create in Drupal

00:30:54,860 --> 00:30:59,630
mark something is deprecated in a three

00:30:57,290 --> 00:31:02,690
and then introduce the alternative an 84

00:30:59,630 --> 00:31:05,140
and requires that to be used okay can

00:31:02,690 --> 00:31:05,140
you go to the mic

00:31:06,700 --> 00:31:15,110
it depends we've done there's been

00:31:12,740 --> 00:31:16,730
things with my clay because my guide

00:31:15,110 --> 00:31:18,020
still experimental people are using it

00:31:16,730 --> 00:31:20,300
and that's probably the closest to

00:31:18,020 --> 00:31:22,580
something where you're not supposed to

00:31:20,300 --> 00:31:28,190
use it but you have to and we've

00:31:22,580 --> 00:31:29,929
introduced PC breaks with BC layers with

00:31:28,190 --> 00:31:34,940
the intention of removing the BG layer

00:31:29,929 --> 00:31:37,100
if it's a burden to maintain so it's but

00:31:34,940 --> 00:31:39,890
it really it's going to depend on voice

00:31:37,100 --> 00:31:41,360
yeah I mean but I mean also but I'm

00:31:39,890 --> 00:31:44,120
theoretically it's possible at least for

00:31:41,360 --> 00:31:45,830
some use cases which we'd make which

00:31:44,120 --> 00:31:46,880
would alleviate a pain somewhat yeah I

00:31:45,830 --> 00:31:48,800
mean the other thing is you can also

00:31:46,880 --> 00:31:50,929
introduce a complete replacement like a

00:31:48,800 --> 00:31:53,390
completely new interface and then I'll

00:31:50,929 --> 00:31:55,250
switch on the new any old interface yes

00:31:53,390 --> 00:31:58,190
but that's still a BC break right

00:31:55,250 --> 00:32:00,590
because modules have to follow in order

00:31:58,190 --> 00:32:02,510
for you're saying not that not remove

00:32:00,590 --> 00:32:04,370
this that deprecated it one thanks might

00:32:02,510 --> 00:32:06,890
move your one but you don't have to

00:32:04,370 --> 00:32:09,260
change it if you just you do something

00:32:06,890 --> 00:32:13,130
completely different so in it but it's a

00:32:09,260 --> 00:32:14,720
much more you have like you're not just

00:32:13,130 --> 00:32:16,160
adding an extra thing on an interface so

00:32:14,720 --> 00:32:17,510
I getting a whole new interface to it

00:32:16,160 --> 00:32:19,250
where the extra thing on a newly named

00:32:17,510 --> 00:32:21,230
method so you have to do a lot more work

00:32:19,250 --> 00:32:22,700
in the background but it doesn't stop

00:32:21,230 --> 00:32:24,500
the change being made it just makes a

00:32:22,700 --> 00:32:25,970
change it harder to do so there's I mean

00:32:24,500 --> 00:32:27,020
it's a whole spectrum of stuff and

00:32:25,970 --> 00:32:28,760
that's what we have to figure out page

00:32:27,020 --> 00:32:30,710
by page I think was important with this

00:32:28,760 --> 00:32:33,530
tool is that everyone needs to be

00:32:30,710 --> 00:32:35,000
thinking about this a lot more and with

00:32:33,530 --> 00:32:36,290
juvenile only dropping backwards

00:32:35,000 --> 00:32:38,000
compatibility all the things that people

00:32:36,290 --> 00:32:40,040
want it or doing Drupal 9 they can L do

00:32:38,000 --> 00:32:42,530
they can do now that's always been the

00:32:40,040 --> 00:32:44,330
case since be introduced my know

00:32:42,530 --> 00:32:48,020
releases but people haven't been

00:32:44,330 --> 00:32:49,190
thickening this way so kind of how far

00:32:48,020 --> 00:32:51,140
can we stretch it so that we can

00:32:49,190 --> 00:32:53,690
actually get stuff done it's where it's

00:32:51,140 --> 00:32:55,100
and it's a lot of its open like we don't

00:32:53,690 --> 00:32:57,740
want to break people's actual real life

00:32:55,100 --> 00:32:59,240
models and sites in my narrators and bit

00:32:57,740 --> 00:33:01,520
within these parameters but the

00:32:59,240 --> 00:33:02,800
parameters are still being defined

00:33:01,520 --> 00:33:05,780
we have to figure out what the lines are

00:33:02,800 --> 00:33:07,400
yeah but it's it would be good to have

00:33:05,780 --> 00:33:09,260
it less issue by issue than it has been

00:33:07,400 --> 00:33:10,370
it I mean it really is like and it

00:33:09,260 --> 00:33:11,750
should come up and you have to have a

00:33:10,370 --> 00:33:14,210
whole discussion about whether it's

00:33:11,750 --> 00:33:15,680
backward compatible I cannot within the

00:33:14,210 --> 00:33:17,690
existing rule sometimes change rules

00:33:15,680 --> 00:33:23,900
sometimes clarify what the auditor is

00:33:17,690 --> 00:33:27,650
this tricky I ran a Latino I would like

00:33:23,900 --> 00:33:30,050
to ask you if you can go a bit deeper in

00:33:27,650 --> 00:33:33,320
preferred duplication because this is

00:33:30,050 --> 00:33:36,050
recorded and maybe you can explain what

00:33:33,320 --> 00:33:40,090
is your approach to to prefer to

00:33:36,050 --> 00:33:43,460
plication instead of using that

00:33:40,090 --> 00:33:50,120
dimension yes so for example in this

00:33:43,460 --> 00:33:52,520
case let me open HP system so in this

00:33:50,120 --> 00:33:56,090
case we're providing an explicit API to

00:33:52,520 --> 00:33:59,960
implement a quick edit field access

00:33:56,090 --> 00:34:04,700
check thing and my phpstorm is

00:33:59,960 --> 00:34:07,310
disappearing that's info wait what

00:34:04,700 --> 00:34:09,169
so we provide an explicit API to

00:34:07,310 --> 00:34:13,100
implement such an access checker but

00:34:09,169 --> 00:34:14,830
what the alternative would be is things

00:34:13,100 --> 00:34:20,380
are being very slow I don't know why

00:34:14,830 --> 00:34:20,380
what the alternative would be is instead

00:34:21,310 --> 00:34:26,540
just overwrite this entire service so

00:34:24,980 --> 00:34:29,210
that would be is something that you can

00:34:26,540 --> 00:34:32,750
do in very many cases just replace the

00:34:29,210 --> 00:34:35,419
service entirely and instead of this

00:34:32,750 --> 00:34:37,700
implementing a particular interface you

00:34:35,419 --> 00:34:39,290
just copy-paste the default

00:34:37,700 --> 00:34:41,929
implementation which is this one and you

00:34:39,290 --> 00:34:46,100
modify it and point it as modified class

00:34:41,929 --> 00:34:49,570
in the access check service so then this

00:34:46,100 --> 00:34:51,800
would point to my alternative class

00:34:49,570 --> 00:34:53,149
that's basically the duplication that

00:34:51,800 --> 00:34:55,399
you could use for example for many many

00:34:53,149 --> 00:34:57,710
services so instead of providing an

00:34:55,399 --> 00:34:59,810
explicit interface duplicate and the

00:34:57,710 --> 00:35:01,160
burden is on the counterbore custom

00:34:59,810 --> 00:35:03,290
module developer to keep up to date

00:35:01,160 --> 00:35:05,240
because we don't provide an explicit

00:35:03,290 --> 00:35:08,330
interface for it so the risk is that you

00:35:05,240 --> 00:35:09,500
are going to have to updated with every

00:35:08,330 --> 00:35:11,750
release

00:35:09,500 --> 00:35:13,730
but that is exactly what we want we want

00:35:11,750 --> 00:35:15,770
to hear whether it is something that is

00:35:13,730 --> 00:35:17,300
a common need whether it is something we

00:35:15,770 --> 00:35:19,640
need to support whether there is demand

00:35:17,300 --> 00:35:20,690
whether there is enough demand for it so

00:35:19,640 --> 00:35:26,500
that's what I Ament

00:35:20,690 --> 00:35:31,040
hope that's clear so another thing that

00:35:26,500 --> 00:35:34,010
for my opinions is that like base

00:35:31,040 --> 00:35:38,300
classes should always be considered API

00:35:34,010 --> 00:35:40,010
because we made a base class and we want

00:35:38,300 --> 00:35:42,980
people to use the base class so when a

00:35:40,010 --> 00:35:45,440
base class signature method signature

00:35:42,980 --> 00:35:47,900
changes it's going to be very difficult

00:35:45,440 --> 00:35:49,730
disruptive regardless because we say hey

00:35:47,900 --> 00:35:52,970
you use it and then oh no we're going to

00:35:49,730 --> 00:35:56,570
change it so so so if you open up the

00:35:52,970 --> 00:35:59,390
API BBT documentation page it says for

00:35:56,570 --> 00:36:03,500
public interfaces I think if there is a

00:35:59,390 --> 00:36:05,570
base class you are safe because like new

00:36:03,500 --> 00:36:07,880
methods will be added to those base

00:36:05,570 --> 00:36:09,800
class so you don't have to care any

00:36:07,880 --> 00:36:12,890
extent based on but if you have a

00:36:09,800 --> 00:36:16,670
constructor the construct method then

00:36:12,890 --> 00:36:18,470
that's not safe and and I okay so

00:36:16,670 --> 00:36:22,400
constructor for fail of the should

00:36:18,470 --> 00:36:25,250
become this idea yes yeah all we use

00:36:22,400 --> 00:36:26,720
metric yeah we usually solve it with

00:36:25,250 --> 00:36:28,970
magic right if the constructor

00:36:26,720 --> 00:36:30,950
technically needs to be updated we we

00:36:28,970 --> 00:36:32,869
don't update the constructor and we just

00:36:30,950 --> 00:36:34,640
go retrieve it and by talking to the

00:36:32,869 --> 00:36:36,260
service container directly I know

00:36:34,640 --> 00:36:37,760
there's ways of working around it but if

00:36:36,260 --> 00:36:40,250
we do have a base class that has a

00:36:37,760 --> 00:36:43,400
construct method already defined I think

00:36:40,250 --> 00:36:48,619
that it should be at API and not at

00:36:43,400 --> 00:36:50,599
internal because it is you know that's

00:36:48,619 --> 00:36:54,560
I've been bitten by that I think I'm

00:36:50,599 --> 00:36:56,060
served if he updated I think that we're

00:36:54,560 --> 00:36:57,589
that is something at least that we do

00:36:56,060 --> 00:37:01,099
everything pretty decently we don't

00:36:57,589 --> 00:37:02,960
break base classes I think I yes we know

00:37:01,099 --> 00:37:05,140
of one that we broke and had problems

00:37:02,960 --> 00:37:05,140
with

00:37:08,570 --> 00:37:14,750
one of the I think it's a nutty account

00:37:10,760 --> 00:37:17,590
access based classes I have two you

00:37:14,750 --> 00:37:21,980
might have been an interface as well

00:37:17,590 --> 00:37:25,970
okay I over write it a service and just

00:37:21,980 --> 00:37:28,400
to pass in a different argument and I

00:37:25,970 --> 00:37:31,310
and my class is just an empty class

00:37:28,400 --> 00:37:37,580
extending I think yeah it might not be a

00:37:31,310 --> 00:37:39,110
base class I have to work again it was

00:37:37,580 --> 00:37:45,230
very much more like hey I don't have to

00:37:39,110 --> 00:37:47,210
write any code and one thing I was

00:37:45,230 --> 00:37:49,460
wondering so you mentioned that that we

00:37:47,210 --> 00:37:52,190
have on the page where you mentioned how

00:37:49,460 --> 00:37:53,450
our API is are designed as everything is

00:37:52,190 --> 00:37:55,820
just copied from the old implementation

00:37:53,450 --> 00:38:01,220
objectify bird and put an interface on

00:37:55,820 --> 00:38:03,590
this yeah

00:38:01,220 --> 00:38:06,460
so I'm actually wondering whether we

00:38:03,590 --> 00:38:09,320
should skip shipping with interfaces

00:38:06,460 --> 00:38:12,470
until we know that we want to support

00:38:09,320 --> 00:38:13,990
this API of course like so currently

00:38:12,470 --> 00:38:16,760
working on patch and this patch

00:38:13,990 --> 00:38:18,830
introduces a whole new subsystem but I

00:38:16,760 --> 00:38:21,620
don't need an interface like I have

00:38:18,830 --> 00:38:24,680
classes I have inheritance but I don't

00:38:21,620 --> 00:38:28,400
need an interface and it's it's the API

00:38:24,680 --> 00:38:30,260
which is designed to be used like I call

00:38:28,400 --> 00:38:33,410
something get something back it's not

00:38:30,260 --> 00:38:35,720
designed to be extended and I think we

00:38:33,410 --> 00:38:37,670
don't necessarily have to design every

00:38:35,720 --> 00:38:38,750
piece of everything to be extendable

00:38:37,670 --> 00:38:41,000
yeah exactly

00:38:38,750 --> 00:38:43,160
what's very welcome and that if um that

00:38:41,000 --> 00:38:45,380
is limiting the API so here I dismiss

00:38:43,160 --> 00:38:47,210
its postponing the Attic this is

00:38:45,380 --> 00:38:49,130
basically my what I said in the

00:38:47,210 --> 00:38:51,170
conclusion which is functionality first

00:38:49,130 --> 00:38:53,750
API later yeah like yeah you're saying

00:38:51,170 --> 00:38:56,150
and I remembered that when we were

00:38:53,750 --> 00:38:58,130
working on the media entity patch in

00:38:56,150 --> 00:39:00,560
Drupal dev day civil we explicitly

00:38:58,130 --> 00:39:03,260
removed several interfaces and marked a

00:39:00,560 --> 00:39:05,840
few methods on the base class I think as

00:39:03,260 --> 00:39:07,130
internal precisely for this reason so

00:39:05,840 --> 00:39:09,830
that we wouldn't be exposing ourselves

00:39:07,130 --> 00:39:11,330
to supporting that API forever whereas

00:39:09,830 --> 00:39:15,290
we were because we weren't certain yet

00:39:11,330 --> 00:39:16,790
so this was the right shape and form so

00:39:15,290 --> 00:39:18,410
I think I think we're getting better

00:39:16,790 --> 00:39:19,579
right but we need to be very conscious

00:39:18,410 --> 00:39:24,079
about when we add new

00:39:19,579 --> 00:39:26,539
things to Drupal core I think I also

00:39:24,079 --> 00:39:29,180
think we should reiterate on the

00:39:26,539 --> 00:39:31,069
existing things because like we have a

00:39:29,180 --> 00:39:32,569
lot of area so you're saying we should

00:39:31,069 --> 00:39:34,849
reiterate it yeah

00:39:32,569 --> 00:39:37,249
iterate on the existing API in the

00:39:34,849 --> 00:39:39,680
interim a son has defecated for example

00:39:37,249 --> 00:39:42,229
yeah but keep the implementations major

00:39:39,680 --> 00:39:44,749
so for the ones that haven't been very

00:39:42,229 --> 00:39:47,119
explicitly designed yes to limit the

00:39:44,749 --> 00:39:50,089
future backwards compatibility burden

00:39:47,119 --> 00:39:51,890
because then we we discourage module

00:39:50,089 --> 00:39:53,869
authors from using those yeah yeah

00:39:51,890 --> 00:39:56,059
exactly and I mean we want to be able to

00:39:53,869 --> 00:39:58,519
go to two benign at some point and like

00:39:56,059 --> 00:40:01,910
the problem is like if we have so many

00:39:58,519 --> 00:40:04,039
depth like if we have all those API in

00:40:01,910 --> 00:40:07,160
place we will have a hard time just go

00:40:04,039 --> 00:40:09,559
to benign we need to remove it now

00:40:07,160 --> 00:40:11,900
because we don't want to have this weird

00:40:09,559 --> 00:40:20,059
careful four point five years again are

00:40:11,900 --> 00:40:25,130
we hearing an API removal initiative but

00:40:20,059 --> 00:40:29,479
there I was beaten by a change in a base

00:40:25,130 --> 00:40:32,140
class um it was a change on the content

00:40:29,479 --> 00:40:36,650
entity content and base class and

00:40:32,140 --> 00:40:38,630
literally it was less than 24 hours and

00:40:36,650 --> 00:40:40,729
then someone submitted a bug report and

00:40:38,630 --> 00:40:43,339
it could be fixed because I was

00:40:40,729 --> 00:40:47,660
implementing the class directly so it is

00:40:43,339 --> 00:40:49,880
happening contrary so maybe it's good to

00:40:47,660 --> 00:40:53,150
know or I didn't know that I should be

00:40:49,880 --> 00:40:56,449
using the base class otherwise I I

00:40:53,150 --> 00:41:01,160
didn't have BC guaranteed but that in

00:40:56,449 --> 00:41:02,539
turn to be like catastrophic so and

00:41:01,160 --> 00:41:05,719
that's something that the Daniel

00:41:02,539 --> 00:41:08,239
proposed that we would have tests the

00:41:05,719 --> 00:41:11,089
tests that run income trip for the next

00:41:08,239 --> 00:41:12,680
version of Drupal 8 the next minor that

00:41:11,089 --> 00:41:14,299
would have detected the failure that

00:41:12,680 --> 00:41:16,249
you're driving and we'd be great if it

00:41:14,299 --> 00:41:20,599
was surface to Drupal core developers

00:41:16,249 --> 00:41:23,509
yeah exactly so on that note this seems

00:41:20,599 --> 00:41:26,479
to be liking practical terms let's say

00:41:23,509 --> 00:41:30,739
that I'm maintaining a bunch of contribs

00:41:26,479 --> 00:41:31,980
and I decide to go all in for marking

00:41:30,739 --> 00:41:36,270
everything that

00:41:31,980 --> 00:41:38,570
internal right but someone wants to kind

00:41:36,270 --> 00:41:41,700
of build on top of what I have done

00:41:38,570 --> 00:41:44,370
right and they just start doing stuff

00:41:41,700 --> 00:41:50,030
and they say okay I need to get this

00:41:44,370 --> 00:41:52,860
thing this this class but they get this

00:41:50,030 --> 00:41:55,770
strike through and phpstorm

00:41:52,860 --> 00:42:00,210
and they realize I cannot use this so I

00:41:55,770 --> 00:42:01,290
cannot get the job done so what what is

00:42:00,210 --> 00:42:04,530
it then

00:42:01,290 --> 00:42:08,070
because it feels to me like the with

00:42:04,530 --> 00:42:11,100
like an approach of the intimate api's

00:42:08,070 --> 00:42:15,450
but we need to discover that how can I

00:42:11,100 --> 00:42:20,010
know that someone wants to use something

00:42:15,450 --> 00:42:23,280
that I mark as internal but I may change

00:42:20,010 --> 00:42:25,200
it to API if I know that anyone you have

00:42:23,280 --> 00:42:28,470
said I'll add acknowledge this could you

00:42:25,200 --> 00:42:30,120
could could help with this so I think

00:42:28,470 --> 00:42:33,090
the teach me something maybe we can work

00:42:30,120 --> 00:42:35,490
with the phpstorm people to ensure the

00:42:33,090 --> 00:42:38,460
deprecated versus internal are marked on

00:42:35,490 --> 00:42:41,010
different way oh sorry yeah because both

00:42:38,460 --> 00:42:42,780
are just the strikethrough right it

00:42:41,010 --> 00:42:46,230
would be good I think if they had a

00:42:42,780 --> 00:42:48,000
different indication that it's not as if

00:42:46,230 --> 00:42:49,530
one thing is deprecated will be removed

00:42:48,000 --> 00:42:50,760
forces internal will necessarily be

00:42:49,530 --> 00:42:52,320
removed it's just something we don't

00:42:50,760 --> 00:42:53,760
support which should be marked

00:42:52,320 --> 00:42:55,020
differently in phpstorm that so it's

00:42:53,760 --> 00:42:57,180
something that would help I think but

00:42:55,020 --> 00:43:01,800
yes otherwise great question I don't

00:42:57,180 --> 00:43:04,470
have an answer so if you're marking

00:43:01,800 --> 00:43:06,840
something deprecated for developers who

00:43:04,470 --> 00:43:09,450
use a different editor than phpstorm or

00:43:06,840 --> 00:43:10,980
yeah our site builders and they're just

00:43:09,450 --> 00:43:12,570
installing random modules make that no

00:43:10,980 --> 00:43:14,070
idea that a big chunk of something is

00:43:12,570 --> 00:43:16,140
calling something that's deprecated and

00:43:14,070 --> 00:43:18,810
it's going to disappear next month or

00:43:16,140 --> 00:43:20,340
next year or whenever like have you

00:43:18,810 --> 00:43:22,110
talked to that is there any ideas like

00:43:20,340 --> 00:43:24,450
some sort of way to put a message on us

00:43:22,110 --> 00:43:28,050
status page same way as when the

00:43:24,450 --> 00:43:30,030
database updated I think and that might

00:43:28,050 --> 00:43:31,830
have some ideas about that apparently

00:43:30,030 --> 00:43:33,300
but I noted Treece mentioned it this

00:43:31,830 --> 00:43:35,160
morning in the keynote kind of he

00:43:33,300 --> 00:43:37,320
mentions that we will need tools in

00:43:35,160 --> 00:43:39,390
order for you to know whether this

00:43:37,320 --> 00:43:41,520
module is compatible with future or

00:43:39,390 --> 00:43:43,079
still using deprecated API that's

00:43:41,520 --> 00:43:47,759
something that will help the

00:43:43,079 --> 00:43:49,079
the developer toolbar that like

00:43:47,759 --> 00:43:52,349
development basically what development

00:43:49,079 --> 00:43:55,499
resides in Drupal 8 now and because we

00:43:52,349 --> 00:43:57,959
do sugar error at deprecated you don't

00:43:55,499 --> 00:43:59,819
get defecation errors in the Lord in the

00:43:57,959 --> 00:44:03,209
logs but you can customize the error

00:43:59,819 --> 00:44:04,979
handler and expose them so if you

00:44:03,209 --> 00:44:06,420
install the toolbar it doesn't work

00:44:04,979 --> 00:44:07,979
because none was actually done it yet

00:44:06,420 --> 00:44:09,900
but soon ffunny has implemented it for

00:44:07,979 --> 00:44:11,849
their for their version of it so all we

00:44:09,900 --> 00:44:14,910
really have to do is pour the logic over

00:44:11,849 --> 00:44:16,229
you have a customer hand collected it at

00:44:14,910 --> 00:44:18,959
the end of the page it's going to stick

00:44:16,229 --> 00:44:22,079
in the thing 20 duplications on 20

00:44:18,959 --> 00:44:23,339
dedicated usages on this page because

00:44:22,079 --> 00:44:25,499
it's actually seen the duplication

00:44:23,339 --> 00:44:27,390
messages that we're firing but it

00:44:25,499 --> 00:44:29,039
doesn't it just it like literally it

00:44:27,390 --> 00:44:31,799
just needs people to work on also

00:44:29,039 --> 00:44:34,950
there's a PHP unit integration for the

00:44:31,799 --> 00:44:38,190
same thing so that you can run tests

00:44:34,950 --> 00:44:40,670
where deprecations are okay you can run

00:44:38,190 --> 00:44:43,680
tests where they cause like warnings

00:44:40,670 --> 00:44:45,749
fails you can test the deprecations that

00:44:43,680 --> 00:44:48,690
the actual duplication may message is

00:44:45,749 --> 00:44:50,579
firing when the wrong input is going to

00:44:48,690 --> 00:44:52,229
all of that is done but the the actual

00:44:50,579 --> 00:44:54,059
infrastructure is not there for call yet

00:44:52,229 --> 00:44:56,130
like the conceptually we have most of

00:44:54,059 --> 00:44:59,190
that because Symphony's done it for

00:44:56,130 --> 00:45:01,289
their own system that would only work

00:44:59,190 --> 00:45:02,880
though for the code that is executed on

00:45:01,289 --> 00:45:04,709
the current page so maybe if there's a

00:45:02,880 --> 00:45:07,190
module that is running in some far

00:45:04,709 --> 00:45:09,719
forgotten corner that's running by Crom

00:45:07,190 --> 00:45:11,549
trigger by Crom then the code would emit

00:45:09,719 --> 00:45:12,930
triggers and then you wouldn't see the

00:45:11,549 --> 00:45:15,180
error messages that you're referring to

00:45:12,930 --> 00:45:17,249
the ones in the tool bar so I think you

00:45:15,180 --> 00:45:19,199
will still need the Drupal of orc level

00:45:17,249 --> 00:45:21,150
indication or the status page level

00:45:19,199 --> 00:45:23,130
indication for that as a site builder

00:45:21,150 --> 00:45:24,900
you know Oh dis macho it's not going to

00:45:23,130 --> 00:45:27,869
be supported once I upgrade to the next

00:45:24,900 --> 00:45:29,579
I mean if the if we do on the Drupal CIN

00:45:27,869 --> 00:45:31,259
in this test coverage then it would but

00:45:29,579 --> 00:45:33,299
I mean static noise it's like an API

00:45:31,259 --> 00:45:36,390
module Drupal contribute org I don't

00:45:33,299 --> 00:45:37,890
know what the site is now but there used

00:45:36,390 --> 00:45:39,809
to be really good for is this Herculean

00:45:37,890 --> 00:45:41,459
use you could go in actually all these

00:45:39,809 --> 00:45:43,049
15 modules are using this works worse

00:45:41,459 --> 00:45:44,969
there's no one implement I mean with API

00:45:43,049 --> 00:45:47,400
breaks it's like if a tree falls in the

00:45:44,969 --> 00:45:49,229
woods like if I break this API if no

00:45:47,400 --> 00:45:50,670
one's using it who cares because no

00:45:49,229 --> 00:45:51,900
one's ever going to know reverses some

00:45:50,670 --> 00:45:53,700
you think it out okay and then you

00:45:51,900 --> 00:45:56,640
suddenly it's like so much healthier

00:45:53,700 --> 00:45:58,110
a kind of a demand thing that has also

00:45:56,640 --> 00:46:01,260
been referring to like you need to data

00:45:58,110 --> 00:46:03,690
and knowing how many people are using

00:46:01,260 --> 00:46:05,850
that hook or that event subscriber or

00:46:03,690 --> 00:46:07,590
that whatever it is could be super

00:46:05,850 --> 00:46:09,150
valuable because then indeed it's safe

00:46:07,590 --> 00:46:10,680
to break well safe to the extent that

00:46:09,150 --> 00:46:13,050
Gotham code could still be broken of

00:46:10,680 --> 00:46:14,610
course but yes would you like do you

00:46:13,050 --> 00:46:16,290
think it would be recent just like on

00:46:14,610 --> 00:46:18,150
the Status page to go back to that

00:46:16,290 --> 00:46:20,910
because that's what bike builders it

00:46:18,150 --> 00:46:23,010
exactly I go in the same way they can

00:46:20,910 --> 00:46:24,300
see if the module has an upgrade or a

00:46:23,010 --> 00:46:25,620
security upgrade there's two different

00:46:24,300 --> 00:46:28,890
statuses there do you think would be

00:46:25,620 --> 00:46:31,400
possible to add a status say this module

00:46:28,890 --> 00:46:34,140
doesn't have an upgrade but it contains

00:46:31,400 --> 00:46:35,850
deprecated API calls and it's going to

00:46:34,140 --> 00:46:38,430
work there's probably going to have

00:46:35,850 --> 00:46:40,560
problems with in the future yeah yeah

00:46:38,430 --> 00:46:41,850
it's a it's an open question how we will

00:46:40,560 --> 00:46:43,530
solve that I think but I think it should

00:46:41,850 --> 00:46:45,930
be possible in theory maybe something on

00:46:43,530 --> 00:46:47,670
lines of static code analysis run by

00:46:45,930 --> 00:46:49,350
Drupal dork so that you don't have

00:46:47,670 --> 00:46:51,240
update status but you also have

00:46:49,350 --> 00:46:53,580
deprecations that is kind of so that you

00:46:51,240 --> 00:46:55,620
know for a given module is this

00:46:53,580 --> 00:46:58,830
compatible with this vert with a next

00:46:55,620 --> 00:47:01,200
version of Drupal the next core minor or

00:46:58,830 --> 00:47:03,240
the one that is already RNAV and so on I

00:47:01,200 --> 00:47:05,160
think something like that is what we

00:47:03,240 --> 00:47:06,930
will need but what we don't have yet

00:47:05,160 --> 00:47:09,900
yeah I'm wondering whether we should

00:47:06,930 --> 00:47:11,580
just allow like module authors to have a

00:47:09,900 --> 00:47:12,960
flag in the info file and always

00:47:11,580 --> 00:47:15,390
thinking the same thing like then your

00:47:12,960 --> 00:47:17,280
form is simple I mean and yet you would

00:47:15,390 --> 00:47:18,780
like tricking the system and everything

00:47:17,280 --> 00:47:20,250
but no it's not tricking to say I'm the

00:47:18,780 --> 00:47:22,410
problem is just that you don't need

00:47:20,250 --> 00:47:24,990
conflict authors to do a new release at

00:47:22,410 --> 00:47:26,910
least every six months even though there

00:47:24,990 --> 00:47:28,260
may be nothing that nothing has changed

00:47:26,910 --> 00:47:30,150
and they need to be active in

00:47:28,260 --> 00:47:32,250
maintaining their module to do a release

00:47:30,150 --> 00:47:33,390
every six months Lu that's the like I

00:47:32,250 --> 00:47:35,130
was thinking the exact same thing just

00:47:33,390 --> 00:47:40,200
no but I think that's where it breaks

00:47:35,130 --> 00:47:42,300
are hi I'm Laurie and I was just

00:47:40,200 --> 00:47:45,900
wondering like how much does this drive

00:47:42,300 --> 00:47:48,510
us from being a but you're poised to be

00:47:45,900 --> 00:47:50,010
a just generic framework because of one

00:47:48,510 --> 00:47:51,870
of the powers that we have because it's

00:47:50,010 --> 00:47:54,660
a API it's like the very generic and

00:47:51,870 --> 00:47:56,280
complex API is that plenty of different

00:47:54,660 --> 00:47:59,520
country modules can work out of the box

00:47:56,280 --> 00:48:01,020
together like you can install 15

00:47:59,520 --> 00:48:04,200
different contributed modules using the

00:48:01,020 --> 00:48:06,000
OEM API and the whoever is installing

00:48:04,200 --> 00:48:07,920
them don't have to really care

00:48:06,000 --> 00:48:11,280
that at all but instead if we move

00:48:07,920 --> 00:48:13,680
towards the you know copying all of

00:48:11,280 --> 00:48:15,000
these things education then it's the

00:48:13,680 --> 00:48:17,280
responsibility of the application

00:48:15,000 --> 00:48:19,170
builder to build like proxies and things

00:48:17,280 --> 00:48:21,119
do to make the multiple different

00:48:19,170 --> 00:48:22,920
contributor projects work together I

00:48:21,119 --> 00:48:25,980
think that's a super super acute point

00:48:22,920 --> 00:48:29,130
to be honest and I recently heard a

00:48:25,980 --> 00:48:31,770
podcast I think by the lull about folks

00:48:29,130 --> 00:48:33,300
I think my kershel I think I saw him in

00:48:31,770 --> 00:48:35,310
the back just earlier but I think he's

00:48:33,300 --> 00:48:38,310
gone now he was talking about WordPress

00:48:35,310 --> 00:48:41,849
and Drupal and how how they have our

00:48:38,310 --> 00:48:43,260
WordPress has a problem that for example

00:48:41,849 --> 00:48:45,380
they have many competing implementations

00:48:43,260 --> 00:48:48,030
what we call CCK or field api and

00:48:45,380 --> 00:48:49,770
because of that everybody has to

00:48:48,030 --> 00:48:51,810
duplicate all the things and the entire

00:48:49,770 --> 00:48:54,359
ecosystem is duplicated essentially or

00:48:51,810 --> 00:48:56,340
they have enormous if-else switches to

00:48:54,359 --> 00:48:59,220
detect different health implementations

00:48:56,340 --> 00:49:01,260
of field api and c ck and then they have

00:48:59,220 --> 00:49:02,790
different code to deal with each of them

00:49:01,260 --> 00:49:04,380
that's the thing that would be the

00:49:02,790 --> 00:49:05,760
consequence but I think we're so far

00:49:04,380 --> 00:49:07,470
removed from that like I've never heard

00:49:05,760 --> 00:49:09,270
to be a problem in triple think it's

00:49:07,470 --> 00:49:11,339
kind of like we're a hundred times

00:49:09,270 --> 00:49:13,410
bigger and API service if we could go to

00:49:11,339 --> 00:49:16,770
ten times bigger we'd still support all

00:49:13,410 --> 00:49:19,650
those things and book a better balance

00:49:16,770 --> 00:49:22,140
work a finer line of choosing to support

00:49:19,650 --> 00:49:24,510
what you say would be a problem and

00:49:22,140 --> 00:49:27,599
avoid a problem so still still make it

00:49:24,510 --> 00:49:30,030
possible but remove some of the things

00:49:27,599 --> 00:49:32,070
that are barely used of the api's yeah

00:49:30,030 --> 00:49:34,050
me neither fearful I definitely agree

00:49:32,070 --> 00:49:37,050
with everything that you've presented

00:49:34,050 --> 00:49:38,550
and what's happening it's more of just

00:49:37,050 --> 00:49:40,800
something that we have to consider when

00:49:38,550 --> 00:49:41,880
you're when we do it and I just wanted

00:49:40,800 --> 00:49:44,490
to hear if you have any thoughts about

00:49:41,880 --> 00:49:46,859
that and yeah I think we've done some

00:49:44,490 --> 00:49:48,780
pretty good decisions I need to pull the

00:49:46,859 --> 00:49:51,119
eight life cycle that we've marked a lot

00:49:48,780 --> 00:49:53,700
of markup internal which is allow us to

00:49:51,119 --> 00:49:56,550
make things like the status report page

00:49:53,700 --> 00:49:57,690
that trees presented on the keynote in

00:49:56,550 --> 00:49:59,880
Drupal seven that wouldn't have been

00:49:57,690 --> 00:50:01,859
possible because of the markup was all

00:49:59,880 --> 00:50:04,619
marked into your line it's it's pretty

00:50:01,859 --> 00:50:06,000
it makes my life as the maintainer

00:50:04,619 --> 00:50:10,619
easier because like now we actually can

00:50:06,000 --> 00:50:12,690
change things in like four teams but the

00:50:10,619 --> 00:50:15,000
problem over there is still that even

00:50:12,690 --> 00:50:17,000
though those are marked internal there

00:50:15,000 --> 00:50:20,090
is plenty of even large contribute

00:50:17,000 --> 00:50:24,830
projects that are using the internal API

00:50:20,090 --> 00:50:26,780
as their API yes and it's like I still

00:50:24,830 --> 00:50:28,520
feel scared for breaking sides even

00:50:26,780 --> 00:50:32,030
though it's marked interim internal yes

00:50:28,520 --> 00:50:33,920
exactly so basically this it's an

00:50:32,030 --> 00:50:35,840
implicit API like markup technically is

00:50:33,920 --> 00:50:38,270
internal and we don't need support but

00:50:35,840 --> 00:50:39,740
kind of we still do for some levels of

00:50:38,270 --> 00:50:41,810
the market kind of like the overall

00:50:39,740 --> 00:50:43,910
structure cannot really change them yeah

00:50:41,810 --> 00:50:45,770
that made us a goal I make sense and

00:50:43,910 --> 00:50:47,570
especially for the vendor area

00:50:45,770 --> 00:50:50,420
structures we've stated there in general

00:50:47,570 --> 00:50:52,460
but there is specific types of changes

00:50:50,420 --> 00:50:57,710
that you know would break everyone sighs

00:50:52,460 --> 00:50:59,480
yeah hey my name is Mike um I work

00:50:57,710 --> 00:51:01,730
mostly in the contribs base so not much

00:50:59,480 --> 00:51:04,280
core but I feel like the really granular

00:51:01,730 --> 00:51:06,920
api's have really helped for the

00:51:04,280 --> 00:51:08,600
unforeseen contribution so people taking

00:51:06,920 --> 00:51:10,460
things in completely just different

00:51:08,600 --> 00:51:13,280
direction but still tying them in with

00:51:10,460 --> 00:51:14,990
these api's that exists and this

00:51:13,280 --> 00:51:17,420
conversations made me think of kind of

00:51:14,990 --> 00:51:20,030
an analogy there's a landscape architect

00:51:17,420 --> 00:51:22,730
to designing a quadrant planted all

00:51:20,030 --> 00:51:24,890
grass rather than planning out any

00:51:22,730 --> 00:51:26,540
sidewalks at the beginning waited for

00:51:24,890 --> 00:51:28,910
people to actually just walk your ass

00:51:26,540 --> 00:51:31,520
and carve out paths and save to those I

00:51:28,910 --> 00:51:33,170
think in we wouldn't want to go to that

00:51:31,520 --> 00:51:35,180
extreme or just be chaos into

00:51:33,170 --> 00:51:37,910
determining what's internal and what's

00:51:35,180 --> 00:51:42,170
an API but maybe there's some at the

00:51:37,910 --> 00:51:44,030
static code analysis think of seeing the

00:51:42,170 --> 00:51:47,900
youth seeing what people are doing with

00:51:44,030 --> 00:51:49,160
it and then taking that and basing some

00:51:47,900 --> 00:51:51,500
of the decisions around that I think

00:51:49,160 --> 00:51:57,020
that's a great approach yep I agree

00:51:51,500 --> 00:51:58,850
thanks to the great analogy indeed so

00:51:57,020 --> 00:52:00,650
amber if like apparently documents or

00:51:58,850 --> 00:52:04,700
saves that says it explicitly paving the

00:52:00,650 --> 00:52:10,310
cow path which is an easy expression so

00:52:04,700 --> 00:52:12,500
I really did the duplication concepts

00:52:10,310 --> 00:52:15,710
and you know that that we do you really

00:52:12,500 --> 00:52:17,600
like it you say okay and and for the

00:52:15,710 --> 00:52:20,150
reason that it prevents as many BC

00:52:17,600 --> 00:52:22,130
breaks it's gonna be hard right you know

00:52:20,150 --> 00:52:23,780
we're at a point in Tripoli where we

00:52:22,130 --> 00:52:26,060
have all this complexity and then

00:52:23,780 --> 00:52:29,420
gonna have to start duplicating and it's

00:52:26,060 --> 00:52:33,230
gonna be it's gonna hurt but when we get

00:52:29,420 --> 00:52:35,510
to Drupal 9 and we start making

00:52:33,230 --> 00:52:38,180
decisions in Drupal 9 it's going to be a

00:52:35,510 --> 00:52:40,310
lot easier because it'll make some smart

00:52:38,180 --> 00:52:41,960
decisions like okay this didn't work

00:52:40,310 --> 00:52:44,420
one thing didn't work and the duplicated

00:52:41,960 --> 00:52:46,910
thing did work or all right we can maybe

00:52:44,420 --> 00:52:52,250
have three choices and an intial mind

00:52:46,910 --> 00:52:54,620
the codebase will shrink hopefully and I

00:52:52,250 --> 00:52:57,860
think that you know then once we make

00:52:54,620 --> 00:52:59,420
these decisions of and solidify the the

00:52:57,860 --> 00:53:02,300
backwards compatibility or in Japan

00:52:59,420 --> 00:53:04,340
ability policy we will you know we'll be

00:53:02,300 --> 00:53:05,870
in a good place I think it's going to

00:53:04,340 --> 00:53:08,780
hurt at first

00:53:05,870 --> 00:53:12,080
ya know but it's already hurting right

00:53:08,780 --> 00:53:14,030
and the longer the more time passes the

00:53:12,080 --> 00:53:15,950
more it will hurt because we we fix more

00:53:14,030 --> 00:53:17,180
bugs and that fixing those bugs will

00:53:15,950 --> 00:53:19,640
sometimes require that Chris

00:53:17,180 --> 00:53:21,350
compatibility breaks and so on so yeah

00:53:19,640 --> 00:53:22,880
it's unavoidable we have to get through

00:53:21,350 --> 00:53:25,220
it anyway so yeah I think we should

00:53:22,880 --> 00:53:29,750
prefer duplication over the wrong

00:53:25,220 --> 00:53:31,370
abstraction cool alright I think we're I

00:53:29,750 --> 00:53:32,630
thought of one thing that I wish I could

00:53:31,370 --> 00:53:35,750
go back and do differently maybe you

00:53:32,630 --> 00:53:36,950
guys to do from the beginning when you

00:53:35,750 --> 00:53:38,450
Mark something difficut is the way you

00:53:36,950 --> 00:53:40,490
do that it's actually explicitly in your

00:53:38,450 --> 00:53:43,460
code I would strongly suggest that it

00:53:40,490 --> 00:53:44,870
actually have kind of as of version

00:53:43,460 --> 00:53:47,240
information right there in that line

00:53:44,870 --> 00:53:49,310
that's programmatically accessible you'd

00:53:47,240 --> 00:53:50,930
already do it that way we do that but

00:53:49,310 --> 00:53:52,940
it's not programmatically accessible I

00:53:50,930 --> 00:53:54,950
think forget it and even in fact

00:53:52,940 --> 00:53:57,260
actually two ranges like deprecated as

00:53:54,950 --> 00:53:59,780
of this point will be removed as of that

00:53:57,260 --> 00:54:01,310
point because you really want automated

00:53:59,780 --> 00:54:03,260
tooling to be able to let people focus

00:54:01,310 --> 00:54:05,090
on these in small bite-sized chunks and

00:54:03,260 --> 00:54:06,440
you want to be able to keep rolling out

00:54:05,090 --> 00:54:08,720
new deprecations even though people are

00:54:06,440 --> 00:54:09,980
still chasing the old tail of them you

00:54:08,720 --> 00:54:12,200
want people to be able do things like in

00:54:09,980 --> 00:54:13,670
their test suite forbid deprecations

00:54:12,200 --> 00:54:15,980
older than a certain point so they don't

00:54:13,670 --> 00:54:17,480
regress but let them slowly chip away

00:54:15,980 --> 00:54:18,830
and move forward to getting the newer

00:54:17,480 --> 00:54:20,900
one so it's super valuable so that you

00:54:18,830 --> 00:54:23,720
have a certain number of releases to fix

00:54:20,900 --> 00:54:26,059
a code yeah that would be the dream I

00:54:23,720 --> 00:54:30,809
think for enough

00:54:26,059 --> 00:54:33,210
okay anything else so that we want to

00:54:30,809 --> 00:54:35,430
bring up nobody has any burning

00:54:33,210 --> 00:54:37,529
questions so I think this was a useful

00:54:35,430 --> 00:54:39,779
discussion hopefully you will will get

00:54:37,529 --> 00:54:42,839
some useful Direction out of it for a

00:54:39,779 --> 00:54:45,049
Drupal core as well so thanks focus is

00:54:42,839 --> 00:54:45,049

YouTube URL: https://www.youtube.com/watch?v=RXEzM7w_rak


