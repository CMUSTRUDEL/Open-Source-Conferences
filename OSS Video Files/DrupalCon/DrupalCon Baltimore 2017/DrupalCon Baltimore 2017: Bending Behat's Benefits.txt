Title: DrupalCon Baltimore 2017: Bending Behat's Benefits
Publication date: 2017-04-26
Playlist: DrupalCon Baltimore 2017
Description: 
	SLIDES

Behat is a tool for having better conversations with your team about expectations for the software being built. By it's nature, Behat separates the expectations (the steps written in feature files) from the implementation details (the PHP files that define the steps). This separation of concerns can make Behat both powerful and cumbersome. Once comfortable with Behat's complexity, there is room for a lot of creative usage.

This session will cover some of the good, bad, and ugly ways Pantheon uses Behat include:

Testing our command line tool, Terminus.
Sharing tests of core WordPress behavior across multiple WordPress plugins.
Overriding some Behat classes to change how shared steps are executed (for example, changing the execution of user login steps for SAML).
Nightly tests of Drupal and WordPress core.
Verifying Drupal 7 to Drupal 8 data migration.
Providing authenticated traffic to compare performance of PHP 5 vs. PHP 7.
Remote execution of Behat tests against sites installed on Pantheon.
Captions: 
	00:00:00,000 --> 00:00:07,710
hello everyone hello welcome to bending

00:00:04,440 --> 00:00:09,960
B hats benefits my name is Steve Kirsh

00:00:07,710 --> 00:00:12,150
I'm an agency and community engineer at

00:00:09,960 --> 00:00:13,889
Pantheon we're a sponsor here at Drupal

00:00:12,150 --> 00:00:16,470
con you can see us down on the main

00:00:13,889 --> 00:00:17,940
convention floor again I'm an agency and

00:00:16,470 --> 00:00:19,890
community engineer that means I spend a

00:00:17,940 --> 00:00:22,260
lot of my time working with agencies and

00:00:19,890 --> 00:00:24,630
web development teams adopting Pantheon

00:00:22,260 --> 00:00:26,010
working on Drupal best practices a lot

00:00:24,630 --> 00:00:28,590
of what I've done lately is related to

00:00:26,010 --> 00:00:29,820
our continuous integration tooling often

00:00:28,590 --> 00:00:32,369
when working with continuous integration

00:00:29,820 --> 00:00:33,899
you may want to use an automated testing

00:00:32,369 --> 00:00:35,730
tool like be has a mess what we'll be

00:00:33,899 --> 00:00:38,100
talking about today you can find me

00:00:35,730 --> 00:00:41,399
online as Steve vector on github

00:00:38,100 --> 00:00:42,840
drupal.org wordpress.org twitter I'll be

00:00:41,399 --> 00:00:44,670
tweeting out a link to these slides

00:00:42,840 --> 00:00:47,340
after the presentation and you can of

00:00:44,670 --> 00:00:48,840
course email me so today we're we're

00:00:47,340 --> 00:00:51,539
talking about B hat we'll be talking

00:00:48,840 --> 00:00:53,550
about the what the why the who the where

00:00:51,539 --> 00:00:56,160
the when and the how of B at those

00:00:53,550 --> 00:00:59,789
wonderful five W's and of course a how

00:00:56,160 --> 00:01:01,859
we're starting with what what is B hat

00:00:59,789 --> 00:01:05,640
I'm curious in the audience here today

00:01:01,859 --> 00:01:07,439
who here has used B hat oh wow more more

00:01:05,640 --> 00:01:09,119
people than I was expecting and now that

00:01:07,439 --> 00:01:10,799
not everyone in the room but for the

00:01:09,119 --> 00:01:12,570
recording we had I think a little over

00:01:10,799 --> 00:01:14,159
half the audience raise their hands for

00:01:12,570 --> 00:01:16,320
those of you who haven't used B hat

00:01:14,159 --> 00:01:18,180
that's fine well we'll go over some

00:01:16,320 --> 00:01:20,369
introductory things I'm curious for the

00:01:18,180 --> 00:01:23,790
people in the room who have used B hat

00:01:20,369 --> 00:01:25,650
how many of you have used it as a client

00:01:23,790 --> 00:01:28,380
communication tool how many of you who

00:01:25,650 --> 00:01:31,470
are using B hat have clients who are

00:01:28,380 --> 00:01:33,509
actually looking at at your B hat s and

00:01:31,470 --> 00:01:35,250
it's far fewer people in the audience

00:01:33,509 --> 00:01:37,170
I've been get saw two hands there

00:01:35,250 --> 00:01:39,869
two people have clients who are looking

00:01:37,170 --> 00:01:42,030
at their their behalf tests okay good to

00:01:39,869 --> 00:01:44,189
know so using B hat and Drupal together

00:01:42,030 --> 00:01:47,520
again we're talking about just what is B

00:01:44,189 --> 00:01:49,290
hat B hat is a PHP command-line tool

00:01:47,520 --> 00:01:51,329
that you can use for behavior driven

00:01:49,290 --> 00:01:52,950
testing when you're using B hat there

00:01:51,329 --> 00:01:55,259
are three main elements that I want you

00:01:52,950 --> 00:01:56,729
to be aware of we have B hat the PHP

00:01:55,259 --> 00:01:59,250
command-line tool that we'll take a look

00:01:56,729 --> 00:02:01,439
at in just a second we have an actual

00:01:59,250 --> 00:02:03,509
Drupal site somewhere I'm about to do a

00:02:01,439 --> 00:02:05,490
live demo where I have a site running

00:02:03,509 --> 00:02:08,700
locally you might have a site running up

00:02:05,490 --> 00:02:10,649
on the Internet maybe on a Kalibak

00:02:08,700 --> 00:02:13,000
locally you may have a site somewhere

00:02:10,649 --> 00:02:15,040
and then you have documented

00:02:13,000 --> 00:02:17,380
what you expect the behavior of that

00:02:15,040 --> 00:02:19,390
site to be these expectations are

00:02:17,380 --> 00:02:21,760
written in plain English they're written

00:02:19,390 --> 00:02:24,370
in dot feature files these are simply

00:02:21,760 --> 00:02:26,290
plain text files that document what you

00:02:24,370 --> 00:02:29,320
expect the behavior of your Drupal site

00:02:26,290 --> 00:02:31,959
to be so behalf looks at those

00:02:29,320 --> 00:02:34,390
expectations look at looks at the actual

00:02:31,959 --> 00:02:36,040
Drupal site and compares the two so it

00:02:34,390 --> 00:02:38,230
reads the dot feature files and it

00:02:36,040 --> 00:02:41,230
interacts with the Drupal site

00:02:38,230 --> 00:02:42,670
now often when I heard b-hat subscribe

00:02:41,230 --> 00:02:44,530
to me when I was first getting familiar

00:02:42,670 --> 00:02:46,750
with it about two years ago I just had a

00:02:44,530 --> 00:02:48,670
very hard time wrapping my mind around

00:02:46,750 --> 00:02:50,920
wait what are we actually talking about

00:02:48,670 --> 00:02:53,320
what does this actually look like to use

00:02:50,920 --> 00:02:55,330
b-hat so it's a little risky to start a

00:02:53,320 --> 00:02:56,860
presentation with a live demo I feel

00:02:55,330 --> 00:02:58,780
like I'm living on the edge here living

00:02:56,860 --> 00:03:00,310
dangerously but that is what I'm going

00:02:58,780 --> 00:03:02,770
to do I am going to start this

00:03:00,310 --> 00:03:05,050
presentation with a live demo jumping

00:03:02,770 --> 00:03:08,020
over to my command line here I have

00:03:05,050 --> 00:03:10,840
behalf the command line utility I happen

00:03:08,020 --> 00:03:12,430
to be inside of a Drupal 8 site right

00:03:10,840 --> 00:03:14,560
now I'm going to jump over to phpstorm

00:03:12,430 --> 00:03:16,810
where we can see here is all of my

00:03:14,560 --> 00:03:19,180
Drupal 8 code I've got my vendor

00:03:16,810 --> 00:03:23,410
directory where dependencies like B hats

00:03:19,180 --> 00:03:26,049
live and I have a B hat - local llamo

00:03:23,410 --> 00:03:28,930
file dot local is compared to Pantheon

00:03:26,049 --> 00:03:31,420
if I wanted to run these be haps

00:03:28,930 --> 00:03:33,940
tests against Pantheon I could but I

00:03:31,420 --> 00:03:36,130
don't want to be extra risky in my live

00:03:33,940 --> 00:03:38,769
demo here I'll run this against a local

00:03:36,130 --> 00:03:40,150
site so we can see here the main bit of

00:03:38,769 --> 00:03:43,079
configuration I want you to see here

00:03:40,150 --> 00:03:45,760
that I am pointing at a base URL that is

00:03:43,079 --> 00:03:48,820
local here again jumping back to the

00:03:45,760 --> 00:03:50,680
command line so I've told B be hat on

00:03:48,820 --> 00:03:52,209
the command line haven't yet run this

00:03:50,680 --> 00:03:54,370
command yet but I'm about to have told

00:03:52,209 --> 00:03:56,470
it that the configuration is here B has

00:03:54,370 --> 00:03:58,600
local yeah mo is the configuration the

00:03:56,470 --> 00:04:01,000
config that it's about to take and the

00:03:58,600 --> 00:04:03,010
the dot feature file that I want B hat

00:04:01,000 --> 00:04:06,280
to process the set of expectations that

00:04:03,010 --> 00:04:09,160
I want B has to process is a a file

00:04:06,280 --> 00:04:10,660
named whose new dot feature and that

00:04:09,160 --> 00:04:12,370
lives in these features directory

00:04:10,660 --> 00:04:14,350
jumping back over to phpstorm

00:04:12,370 --> 00:04:16,060
just to briefly look at at this what

00:04:14,350 --> 00:04:17,950
we'll look at it in greater details of

00:04:16,060 --> 00:04:19,390
presentation goes on but I do just want

00:04:17,950 --> 00:04:22,510
you to see that this is a plain text

00:04:19,390 --> 00:04:24,370
file I've got to be hat scenarios that

00:04:22,510 --> 00:04:26,110
I'm about to run here all right

00:04:24,370 --> 00:04:27,639
so now

00:04:26,110 --> 00:04:29,590
I hadn't showed this part to you yet I

00:04:27,639 --> 00:04:31,930
do have the actual Drupal site so

00:04:29,590 --> 00:04:33,969
totally vanilla Drupal core site not

00:04:31,930 --> 00:04:37,120
much to it the part that were we're

00:04:33,969 --> 00:04:40,120
testing with these b-hat scenarios the

00:04:37,120 --> 00:04:42,759
who's new block all that does is just

00:04:40,120 --> 00:04:44,560
list the recently created site recently

00:04:42,759 --> 00:04:46,449
created accounts on this site it's just

00:04:44,560 --> 00:04:48,729
a normal part of Drupal core I've got a

00:04:46,449 --> 00:04:51,580
very simple B hat feature file that's

00:04:48,729 --> 00:04:53,590
going to test my expectations for the

00:04:51,580 --> 00:04:57,969
who's new block all right

00:04:53,590 --> 00:05:04,740
live demo time going to oh no no no what

00:04:57,969 --> 00:05:08,169
did I do as I was oh wow that's why I

00:05:04,740 --> 00:05:11,469
added a comma as I was interacting with

00:05:08,169 --> 00:05:13,599
with phpstorm alright so I feel like

00:05:11,469 --> 00:05:15,610
that that was probably my lesson for

00:05:13,599 --> 00:05:17,680
attempting a lot of demo I hope it goes

00:05:15,610 --> 00:05:20,289
smoothly from here on out I've added

00:05:17,680 --> 00:05:22,090
breakpoints here a nice feature in the

00:05:20,289 --> 00:05:23,979
drupal extension for for b hat which

00:05:22,090 --> 00:05:25,300
i'll talk about later is this ability to

00:05:23,979 --> 00:05:27,490
add breakpoints i'm just going to be

00:05:25,300 --> 00:05:29,590
hitting the enter key as i go along here

00:05:27,490 --> 00:05:32,770
to let me pause and talk about these

00:05:29,590 --> 00:05:34,930
things so P hat is processing my my dot

00:05:32,770 --> 00:05:36,339
feature file up at the top here it's

00:05:34,930 --> 00:05:39,190
telling me the feature that's being

00:05:36,339 --> 00:05:40,750
being tested as the who's new block and

00:05:39,190 --> 00:05:43,930
here we get really to the meat of things

00:05:40,750 --> 00:05:46,389
B hat is logging in as an administrator

00:05:43,930 --> 00:05:48,699
does a used brush to create a brand new

00:05:46,389 --> 00:05:50,409
administrative account and with that

00:05:48,699 --> 00:05:55,000
administrative account it's now going to

00:05:50,409 --> 00:05:57,639
visit the URL admin / people slash

00:05:55,000 --> 00:06:00,370
create looking at that in my real

00:05:57,639 --> 00:06:03,189
browser this is just the normal Drupal

00:06:00,370 --> 00:06:06,430
core form for adding a new user account

00:06:03,189 --> 00:06:08,229
and now behalf is going to fill out all

00:06:06,430 --> 00:06:10,569
of these form elements so it's adding

00:06:08,229 --> 00:06:14,439
the the email address adding the name

00:06:10,569 --> 00:06:17,020
adding the password on and on hitting

00:06:14,439 --> 00:06:20,289
the create new account button and then

00:06:17,020 --> 00:06:23,229
going back to the home page and hooray

00:06:20,289 --> 00:06:25,089
we have two new accounts the one that

00:06:23,229 --> 00:06:26,860
was just created so that we could log in

00:06:25,089 --> 00:06:28,900
as a throwaway administrative account

00:06:26,860 --> 00:06:31,900
and then that test account that was

00:06:28,900 --> 00:06:34,690
actually added to be detected by this

00:06:31,900 --> 00:06:37,180
behalf scenario and we can see here that

00:06:34,690 --> 00:06:39,430
the way it's checking for this test

00:06:37,180 --> 00:06:43,690
account is by just checking for the

00:06:39,430 --> 00:06:47,320
ring test account one in the CSS ID

00:06:43,690 --> 00:06:48,640
block views block whose new block one so

00:06:47,320 --> 00:06:50,350
this is this is a test that I think

00:06:48,640 --> 00:06:52,420
developers can understand we can

00:06:50,350 --> 00:06:55,240
understand what B hat is doing it's just

00:06:52,420 --> 00:06:57,070
simulating some browser interaction and

00:06:55,240 --> 00:06:58,560
this gets the job done for automation

00:06:57,070 --> 00:07:00,490
this isn't a great tool for

00:06:58,560 --> 00:07:02,380
communicating with your clients I

00:07:00,490 --> 00:07:04,890
wouldn't want to show someone unfamiliar

00:07:02,380 --> 00:07:07,690
with the implementation details of HTML

00:07:04,890 --> 00:07:08,920
this as a way of understanding the who's

00:07:07,690 --> 00:07:11,200
new block there's a whole lot of

00:07:08,920 --> 00:07:13,450
implementation details here around the

00:07:11,200 --> 00:07:15,700
creating account form so this second

00:07:13,450 --> 00:07:17,500
scenario is going to test basically the

00:07:15,700 --> 00:07:20,530
same thing and I think a way that is

00:07:17,500 --> 00:07:23,320
more understandable by perhaps your

00:07:20,530 --> 00:07:25,660
client it will again sign in first as an

00:07:23,320 --> 00:07:27,820
administrator and then using custom

00:07:25,660 --> 00:07:29,950
written behalf steps it's going to do

00:07:27,820 --> 00:07:31,690
basically the same thing it's going to

00:07:29,950 --> 00:07:36,220
make a new account but rather than

00:07:31,690 --> 00:07:38,020
making that new account by by manually

00:07:36,220 --> 00:07:39,880
visiting the create account form I've

00:07:38,020 --> 00:07:42,310
just written a custom step that that

00:07:39,880 --> 00:07:44,730
does that same thing creates a new user

00:07:42,310 --> 00:07:47,050
account and then goes to the home page

00:07:44,730 --> 00:07:49,540
specifying it as when I go to the home

00:07:47,050 --> 00:07:52,450
page rather than the more developer

00:07:49,540 --> 00:07:54,730
oriented when I visit just slash and

00:07:52,450 --> 00:07:56,890
then it it checks for basically the same

00:07:54,730 --> 00:07:59,410
thing then I should see the new user

00:07:56,890 --> 00:08:01,000
name for that new account in D who's new

00:07:59,410 --> 00:08:03,400
block I think this is a more readable

00:08:01,000 --> 00:08:07,270
way of doing it than referencing the

00:08:03,400 --> 00:08:08,920
exact CSS ID in your feature file so for

00:08:07,270 --> 00:08:10,480
those of you new to B hat they made that

00:08:08,920 --> 00:08:12,580
may have been a whole lot of information

00:08:10,480 --> 00:08:14,350
all at once but I did want to just give

00:08:12,580 --> 00:08:17,500
you a sense of what does it look like to

00:08:14,350 --> 00:08:19,360
run a B hat test there we go we have two

00:08:17,500 --> 00:08:20,890
scenarios that pass we could plug this

00:08:19,360 --> 00:08:23,470
into a continuous integration

00:08:20,890 --> 00:08:27,490
environment and automatically execute

00:08:23,470 --> 00:08:29,740
our our test so and when we saw two two

00:08:27,490 --> 00:08:32,650
types of tests now now why would you

00:08:29,740 --> 00:08:34,870
actually do this jumping back to the to

00:08:32,650 --> 00:08:37,810
the slides here why would you use B hat

00:08:34,870 --> 00:08:40,210
why would you use any automated testing

00:08:37,810 --> 00:08:41,830
tool well a continuous integration is a

00:08:40,210 --> 00:08:44,050
really popular topic these days if you

00:08:41,830 --> 00:08:46,870
go down to the panthéon booth you'll see

00:08:44,050 --> 00:08:49,150
a demonstration of a relatively complex

00:08:46,870 --> 00:08:50,530
continuous integration process one of

00:08:49,150 --> 00:08:52,330
the great parts about continuous

00:08:50,530 --> 00:08:53,290
integration is that if you have

00:08:52,330 --> 00:08:55,149
automated tests you

00:08:53,290 --> 00:08:56,860
can be much more confident that the

00:08:55,149 --> 00:08:58,449
changes you're making that there's a new

00:08:56,860 --> 00:09:01,060
feature you're adding if you're adding

00:08:58,449 --> 00:09:02,709
the who's new block to your site none of

00:09:01,060 --> 00:09:04,750
your other features have broken this is

00:09:02,709 --> 00:09:06,910
a great part of testing just the ability

00:09:04,750 --> 00:09:09,100
to automatically run those tests over

00:09:06,910 --> 00:09:11,230
and over again in perpetuity verifying

00:09:09,100 --> 00:09:13,029
that you haven't broken anything but

00:09:11,230 --> 00:09:15,009
there are other reasons to test quoting

00:09:13,029 --> 00:09:16,899
my colleague Michelle Krejci here there

00:09:15,009 --> 00:09:19,149
are other reasons to test among them

00:09:16,899 --> 00:09:21,310
defining done with a client and

00:09:19,149 --> 00:09:23,199
translating the definition of done into

00:09:21,310 --> 00:09:25,240
code so that we can know when a feature

00:09:23,199 --> 00:09:27,670
is complete this adds focus

00:09:25,240 --> 00:09:29,709
it adds documentation and yes it adds

00:09:27,670 --> 00:09:32,110
regression testing and this this really

00:09:29,709 --> 00:09:34,000
is where B hat shines the ability to

00:09:32,110 --> 00:09:35,459
have a better conversation with your

00:09:34,000 --> 00:09:39,459
client about what do they actually

00:09:35,459 --> 00:09:41,880
expect from that who's new block this

00:09:39,459 --> 00:09:44,589
allows us to to get both of these

00:09:41,880 --> 00:09:45,959
benefits so the primary benefits of B

00:09:44,589 --> 00:09:47,920
hats that I'll be talking about today

00:09:45,959 --> 00:09:49,870
automation this is a benefit that you

00:09:47,920 --> 00:09:51,310
get really from any automated testing

00:09:49,870 --> 00:09:52,990
tool you get this benefit if you're

00:09:51,310 --> 00:09:56,290
using selenium directly you get this

00:09:52,990 --> 00:09:59,319
benefit if you're using PHP unit B hat

00:09:56,290 --> 00:10:01,360
shines with the the benefit of clarity

00:09:59,319 --> 00:10:02,949
if you're using B hat well this should

00:10:01,360 --> 00:10:05,560
give you a clearer picture as a whole

00:10:02,949 --> 00:10:07,540
team the developers the project managers

00:10:05,560 --> 00:10:09,970
your client stakeholders it should give

00:10:07,540 --> 00:10:12,490
everyone on the on the project a clear

00:10:09,970 --> 00:10:15,910
understanding of what the definition of

00:10:12,490 --> 00:10:19,810
done is quality is a benefit we often

00:10:15,910 --> 00:10:22,420
expect to get from testing tools I don't

00:10:19,810 --> 00:10:25,630
think this is a benefit you get directly

00:10:22,420 --> 00:10:28,300
from from B hat and I'll explain why so

00:10:25,630 --> 00:10:31,540
a simplified view of the different types

00:10:28,300 --> 00:10:35,079
of testing this comes from a blog post

00:10:31,540 --> 00:10:38,260
on the Econo economy of testing a blog

00:10:35,079 --> 00:10:41,110
post from the author of B hat itself he

00:10:38,260 --> 00:10:44,319
simplifies types of testing into unit

00:10:41,110 --> 00:10:46,300
testing integration testing and system

00:10:44,319 --> 00:10:47,980
testing when we're talking about unit

00:10:46,300 --> 00:10:50,980
testing we're talking about the smallest

00:10:47,980 --> 00:10:53,170
units that we have as developers testing

00:10:50,980 --> 00:10:56,019
individual functions testing individual

00:10:53,170 --> 00:10:57,370
classes testing individual methods we

00:10:56,019 --> 00:10:59,410
know we're doing unit testing when we

00:10:57,370 --> 00:11:01,120
can reason about our tests in isolation

00:10:59,410 --> 00:11:02,680
when we can look at a test and see

00:11:01,120 --> 00:11:04,839
that's the only thing that this test

00:11:02,680 --> 00:11:06,730
touches is a method and it's a method

00:11:04,839 --> 00:11:08,920
that someone on the team wrote it's a

00:11:06,730 --> 00:11:10,930
method that we have totally under our

00:11:08,920 --> 00:11:13,149
control so this is a great way of

00:11:10,930 --> 00:11:14,589
answering the question is our code any

00:11:13,149 --> 00:11:16,420
good if you're doing test-driven

00:11:14,589 --> 00:11:19,000
development and writing these very

00:11:16,420 --> 00:11:21,000
granular unit tests these unit tests

00:11:19,000 --> 00:11:24,579
will guide you towards writing good code

00:11:21,000 --> 00:11:26,339
code that is decoupled code that is

00:11:24,579 --> 00:11:29,290
clean code depth that's readable

00:11:26,339 --> 00:11:31,600
integration tests are meant to give you

00:11:29,290 --> 00:11:35,170
a slightly different benefit integration

00:11:31,600 --> 00:11:37,059
tests well they did they do it it sounds

00:11:35,170 --> 00:11:39,279
like they test the integration of

00:11:37,059 --> 00:11:40,600
different units sometimes those may be

00:11:39,279 --> 00:11:42,959
units totally under our control

00:11:40,600 --> 00:11:46,149
sometimes that may be units that

00:11:42,959 --> 00:11:47,829
interact with a third party API that's

00:11:46,149 --> 00:11:49,120
outside of our control

00:11:47,829 --> 00:11:50,680
I think we're less likely to see

00:11:49,120 --> 00:11:52,149
integration testing and the Drupal

00:11:50,680 --> 00:11:54,519
community because often we're dealing

00:11:52,149 --> 00:11:56,709
with the smallest units or we're dealing

00:11:54,519 --> 00:11:58,569
with the complete picture so integration

00:11:56,709 --> 00:12:01,059
tests are meant to answer this question

00:11:58,569 --> 00:12:02,589
of do art pieces fit together but often

00:12:01,059 --> 00:12:05,230
when we're working with Drupal it's hard

00:12:02,589 --> 00:12:07,449
to subdivide our pieces and say I'm only

00:12:05,230 --> 00:12:10,000
testing the backend and not testing the

00:12:07,449 --> 00:12:11,649
theme layer Drupal is still relatively

00:12:10,000 --> 00:12:13,750
monolithic often when we're working with

00:12:11,649 --> 00:12:15,699
Drupal we're doing system testing and

00:12:13,750 --> 00:12:18,100
this is really what b-hat is designed

00:12:15,699 --> 00:12:20,769
for system testing testing a complete

00:12:18,100 --> 00:12:22,779
website very often we hat can be used

00:12:20,769 --> 00:12:24,399
for test testing things other than

00:12:22,779 --> 00:12:26,290
websites but mainly what we're talking

00:12:24,399 --> 00:12:28,839
about today is testing a complete

00:12:26,290 --> 00:12:31,870
website running in a production like

00:12:28,839 --> 00:12:33,790
environment or just running out on my

00:12:31,870 --> 00:12:34,860
local machine here this is verifying the

00:12:33,790 --> 00:12:37,029
system as a whole

00:12:34,860 --> 00:12:39,760
answering the question do all of our

00:12:37,029 --> 00:12:41,709
pieces fit together you can think of

00:12:39,760 --> 00:12:43,870
these different types of testing as as

00:12:41,709 --> 00:12:45,699
answering again different questions did

00:12:43,870 --> 00:12:47,559
we build the thing right this is a

00:12:45,699 --> 00:12:49,839
question unit testing can help you

00:12:47,559 --> 00:12:51,639
address versus did we build the right

00:12:49,839 --> 00:12:54,579
thing did we build what our client

00:12:51,639 --> 00:12:57,279
actually expected you could have a the

00:12:54,579 --> 00:12:59,230
old users block and and have really

00:12:57,279 --> 00:13:00,579
clean code that gives you the old users

00:12:59,230 --> 00:13:03,970
block but that's not what your client

00:13:00,579 --> 00:13:06,100
asked for building the right thing is is

00:13:03,970 --> 00:13:09,279
what B hat is designed for so who is

00:13:06,100 --> 00:13:11,439
going to use B hat well who cares about

00:13:09,279 --> 00:13:13,630
our website at all often when we're

00:13:11,439 --> 00:13:15,670
making websites we have at least two

00:13:13,630 --> 00:13:17,799
groups of people we have often the the

00:13:15,670 --> 00:13:18,880
people building the website often these

00:13:17,799 --> 00:13:20,589
are people working at

00:13:18,880 --> 00:13:22,089
agency working with the client their

00:13:20,589 --> 00:13:24,490
developers your designers project

00:13:22,089 --> 00:13:26,380
managers everyone working at the agency

00:13:24,490 --> 00:13:29,110
and that they can be somewhat separated

00:13:26,380 --> 00:13:30,940
from the people using the website often

00:13:29,110 --> 00:13:33,730
you have a main point of contact

00:13:30,940 --> 00:13:36,250
I am ain't of contact with your client

00:13:33,730 --> 00:13:38,529
you have stakeholders who are working at

00:13:36,250 --> 00:13:41,199
the same company as your client and they

00:13:38,529 --> 00:13:43,600
have their own and customers and one way

00:13:41,199 --> 00:13:45,370
to conceptualize how how all of these

00:13:43,600 --> 00:13:47,620
different people work together is by

00:13:45,370 --> 00:13:49,690
separating each group from one another

00:13:47,620 --> 00:13:51,519
you have the stakeholders and the end

00:13:49,690 --> 00:13:53,529
customers and they have expectations for

00:13:51,519 --> 00:13:55,509
what the website is supposed to do and

00:13:53,529 --> 00:13:56,949
they may communicate that to the one

00:13:55,509 --> 00:13:59,470
person at your client who really owns

00:13:56,949 --> 00:14:01,870
the the website as a whole you can call

00:13:59,470 --> 00:14:04,720
that person a product owner the product

00:14:01,870 --> 00:14:06,910
owner at your client company describes

00:14:04,720 --> 00:14:10,000
what they expect from the website maybe

00:14:06,910 --> 00:14:11,920
to a tech lead or a business analyst at

00:14:10,000 --> 00:14:13,810
the agency or within the web development

00:14:11,920 --> 00:14:15,759
team they then write down detailed

00:14:13,810 --> 00:14:17,440
requirements often just in in bullet

00:14:15,759 --> 00:14:19,029
lists form of of what are the

00:14:17,440 --> 00:14:21,009
requirements for this side those can

00:14:19,029 --> 00:14:22,990
then be formed into tickets that get

00:14:21,009 --> 00:14:24,910
handed off to a project manager the

00:14:22,990 --> 00:14:26,620
project manager that hands off those

00:14:24,910 --> 00:14:27,970
tickets to a developer the developer

00:14:26,620 --> 00:14:30,189
then may take the tickets look at the

00:14:27,970 --> 00:14:33,069
bulleted list write tests that are

00:14:30,189 --> 00:14:34,930
really only readable by developers do

00:14:33,069 --> 00:14:38,500
the work maybe hand it out to a QA

00:14:34,930 --> 00:14:40,600
person and then the QA person may send

00:14:38,500 --> 00:14:43,389
it along to the the final approval and

00:14:40,600 --> 00:14:46,300
deployment process and each step is

00:14:43,389 --> 00:14:48,279
separated out from from the next the

00:14:46,300 --> 00:14:49,990
developer maybe is never talking to the

00:14:48,279 --> 00:14:52,839
product owner maybe never talking to an

00:14:49,990 --> 00:14:54,970
actual person who really relies on this

00:14:52,839 --> 00:14:58,000
website so if this is the way you're

00:14:54,970 --> 00:15:00,009
conceptualizing of a development process

00:14:58,000 --> 00:15:02,819
then B hat is going to be a difficult

00:15:00,009 --> 00:15:05,829
tool to use because B hat encourages

00:15:02,819 --> 00:15:08,050
everyone in the process to at least at

00:15:05,829 --> 00:15:10,569
one point in time have a conversation

00:15:08,050 --> 00:15:13,720
about what does everyone actually expect

00:15:10,569 --> 00:15:15,100
from from the website at least one

00:15:13,720 --> 00:15:18,279
conversation that is going to set

00:15:15,100 --> 00:15:20,319
expectations for what we're doing here

00:15:18,279 --> 00:15:21,910
a leader in the behavior driven

00:15:20,319 --> 00:15:24,279
development community says this is

00:15:21,910 --> 00:15:26,079
really the point of of writing our our

00:15:24,279 --> 00:15:28,750
expectations in these plain English

00:15:26,079 --> 00:15:30,910
feature files they allow more people to

00:15:28,750 --> 00:15:32,120
get involved if you're if you're not

00:15:30,910 --> 00:15:33,830
writing down your

00:15:32,120 --> 00:15:35,960
in plain English then you're going to

00:15:33,830 --> 00:15:38,060
have clients who think well I don't

00:15:35,960 --> 00:15:39,890
really know how the site really works

00:15:38,060 --> 00:15:41,990
that's for the developers to know only

00:15:39,890 --> 00:15:44,240
the developers can read the test I'm

00:15:41,990 --> 00:15:46,070
further removed from that by writing out

00:15:44,240 --> 00:15:48,320
your expectations in plain English it's

00:15:46,070 --> 00:15:50,720
a chance for everyone in the process to

00:15:48,320 --> 00:15:52,460
get involved and and have a common

00:15:50,720 --> 00:15:54,589
understanding of what we're doing here

00:15:52,460 --> 00:15:56,750
so these dot feature files should really

00:15:54,589 --> 00:15:59,000
be a representation of a conversation

00:15:56,750 --> 00:16:00,620
that was had at some point in time by

00:15:59,000 --> 00:16:02,990
everyone involved in the process this

00:16:00,620 --> 00:16:04,460
should really be the anatomy of a

00:16:02,990 --> 00:16:05,360
conversation so what are we talking

00:16:04,460 --> 00:16:06,770
about at all

00:16:05,360 --> 00:16:08,240
that's that first line in the dot

00:16:06,770 --> 00:16:10,160
feature file what's what are we even

00:16:08,240 --> 00:16:12,290
talking about we're talking about the

00:16:10,160 --> 00:16:13,790
who's new blog that should be easy to

00:16:12,290 --> 00:16:15,890
scan right there at the top of the file

00:16:13,790 --> 00:16:18,170
that is the feature that we're talking

00:16:15,890 --> 00:16:20,540
about and and who even needs that and

00:16:18,170 --> 00:16:23,570
why do they need that these top lines

00:16:20,540 --> 00:16:25,339
are not the computer process of bold

00:16:23,570 --> 00:16:27,589
lines as we get lower what would get to

00:16:25,339 --> 00:16:29,390
the Machine executable steps these are

00:16:27,589 --> 00:16:31,339
really just for people to read and get

00:16:29,390 --> 00:16:33,680
some understanding of what are we even

00:16:31,339 --> 00:16:36,950
talking about what feature are we

00:16:33,680 --> 00:16:38,870
building if your expectations are just

00:16:36,950 --> 00:16:40,670
written out and bulleted list it can be

00:16:38,870 --> 00:16:42,560
a it can be difficult to know what are

00:16:40,670 --> 00:16:45,290
we even talking about who needs this

00:16:42,560 --> 00:16:48,020
feature why do they need it getting into

00:16:45,290 --> 00:16:49,790
these scenarios each scenario is a

00:16:48,020 --> 00:16:52,370
description of what can this feature

00:16:49,790 --> 00:16:55,640
even do well in this case this feature

00:16:52,370 --> 00:16:57,500
can display new users in a list you

00:16:55,640 --> 00:16:59,540
might have a negative scenario saying

00:16:57,500 --> 00:17:01,279
old users don't appear in the list in

00:16:59,540 --> 00:17:03,500
this case we've just got one thing new

00:17:01,279 --> 00:17:05,510
users appear in the list here's where we

00:17:03,500 --> 00:17:08,360
get into the really Machine executable

00:17:05,510 --> 00:17:11,209
parts the district given when then

00:17:08,360 --> 00:17:13,010
syntax the expectations here that be

00:17:11,209 --> 00:17:15,350
given portion this is where you're

00:17:13,010 --> 00:17:17,660
starting from before we even talk about

00:17:15,350 --> 00:17:19,490
the the who's new block specifically

00:17:17,660 --> 00:17:20,750
where are we even starting from oh we're

00:17:19,490 --> 00:17:22,880
starting from the point of being logged

00:17:20,750 --> 00:17:25,100
in as an administrator and we're

00:17:22,880 --> 00:17:27,829
assuming that recently at some point in

00:17:25,100 --> 00:17:32,570
time a new user account has been created

00:17:27,829 --> 00:17:34,580
that the web portion this is our our

00:17:32,570 --> 00:17:36,380
logged in user actually doing something

00:17:34,580 --> 00:17:38,690
each of these dot feature files each of

00:17:36,380 --> 00:17:41,270
these scenarios should be describing a

00:17:38,690 --> 00:17:43,130
person doing something a person actually

00:17:41,270 --> 00:17:45,030
interacting with your website and that's

00:17:43,130 --> 00:17:46,770
what the when clause

00:17:45,030 --> 00:17:48,630
for that person actually taking an

00:17:46,770 --> 00:17:50,340
action in this case it's a pretty small

00:17:48,630 --> 00:17:52,350
action all they're doing is going to the

00:17:50,340 --> 00:17:55,680
home page but they may be taking a more

00:17:52,350 --> 00:17:57,870
complex action the then portion is the

00:17:55,680 --> 00:18:00,840
observable result and observable is

00:17:57,870 --> 00:18:02,490
really the key word here an actual

00:18:00,840 --> 00:18:03,930
administrator for this site should be

00:18:02,490 --> 00:18:05,790
able to read this scenario and

00:18:03,930 --> 00:18:07,650
understand what's happening they should

00:18:05,790 --> 00:18:10,200
be able to say oh yeah I really can see

00:18:07,650 --> 00:18:12,750
new user accounts in that block you

00:18:10,200 --> 00:18:15,000
could write these then clauses against

00:18:12,750 --> 00:18:17,520
like reading database tables directly

00:18:15,000 --> 00:18:21,030
you could write this scenario to say

00:18:17,520 --> 00:18:22,440
okay then I print out all of the rows in

00:18:21,030 --> 00:18:23,940
the user table and I see that there's a

00:18:22,440 --> 00:18:25,800
new user there well that's not really

00:18:23,940 --> 00:18:27,870
observable to the end users of your

00:18:25,800 --> 00:18:30,390
website the then Clause should really be

00:18:27,870 --> 00:18:31,770
about observable things and it's

00:18:30,390 --> 00:18:34,050
important to remember that these dot

00:18:31,770 --> 00:18:36,870
feature files alone are not our test

00:18:34,050 --> 00:18:39,240
this is a bit of a pedantic point again

00:18:36,870 --> 00:18:41,250
from Constantine the author of behalf

00:18:39,240 --> 00:18:43,740
these are really just our expectations

00:18:41,250 --> 00:18:45,540
the feature files alone are not the

00:18:43,740 --> 00:18:48,480
tests the feature files are the

00:18:45,540 --> 00:18:50,070
expectations in order to have tests in

00:18:48,480 --> 00:18:52,050
order to be doing testing you need a

00:18:50,070 --> 00:18:53,580
couple other pieces we need something

00:18:52,050 --> 00:18:56,070
like the B hat that can actually

00:18:53,580 --> 00:18:58,500
evaluate those expectations and compare

00:18:56,070 --> 00:19:03,390
them to an actual thing so if we're if

00:18:58,500 --> 00:19:05,010
we're using B hat with Drupal then the

00:19:03,390 --> 00:19:07,410
dot feature files again are our

00:19:05,010 --> 00:19:11,340
expectations the Drupal sites is the

00:19:07,410 --> 00:19:13,290
actual thing and the B hat samman line

00:19:11,340 --> 00:19:15,930
program is the means of comparison if

00:19:13,290 --> 00:19:17,520
you're doing PHP unit testing directly

00:19:15,930 --> 00:19:20,840
then you probably see those those

00:19:17,520 --> 00:19:23,610
functions that that have an expected an

00:19:20,840 --> 00:19:25,500
actual and an assertion in between you

00:19:23,610 --> 00:19:29,160
need those three elements and expected

00:19:25,500 --> 00:19:31,380
an actual and insertion of comparison so

00:19:29,160 --> 00:19:33,990
where where are we actually running B

00:19:31,380 --> 00:19:36,120
hat where do these pieces actually go so

00:19:33,990 --> 00:19:38,250
Pantheon uses B hat with all of our

00:19:36,120 --> 00:19:39,780
WordPress plugins we use B hat in a

00:19:38,250 --> 00:19:42,210
bunch of different ways so with our

00:19:39,780 --> 00:19:44,460
WordPress plugins we use B hat to answer

00:19:42,210 --> 00:19:45,810
the question does this work on Pantheon

00:19:44,460 --> 00:19:47,520
at all we're looking here to just a

00:19:45,810 --> 00:19:51,180
screenshot of an internal dashboard we

00:19:47,520 --> 00:19:53,370
have we have circle CI badges and Travis

00:19:51,180 --> 00:19:56,100
badges lined up with a couple of our

00:19:53,370 --> 00:19:57,510
WordPress plugin so we're answering two

00:19:56,100 --> 00:19:58,680
different questions here does this

00:19:57,510 --> 00:20:01,530
plugin work

00:19:58,680 --> 00:20:03,000
all and does it work on Pantheon before

00:20:01,530 --> 00:20:05,220
I started at Pantheon we were already

00:20:03,000 --> 00:20:06,990
answering the question does this plug-in

00:20:05,220 --> 00:20:09,210
work at all we to answer that question

00:20:06,990 --> 00:20:12,150
we have a wordpress site it installs the

00:20:09,210 --> 00:20:14,550
given plug-in WP Redis native session

00:20:12,150 --> 00:20:16,860
handling we've got a bunch of different

00:20:14,550 --> 00:20:19,860
plugins so we have WordPress running

00:20:16,860 --> 00:20:21,180
just in a you Mbutu container again all

00:20:19,860 --> 00:20:22,260
we're trying to answer is does this

00:20:21,180 --> 00:20:25,140
plug-in work at all

00:20:22,260 --> 00:20:28,050
PHP unit is the normal way the WordPress

00:20:25,140 --> 00:20:29,910
community does automated tests so we use

00:20:28,050 --> 00:20:31,500
that that's the test that we've had

00:20:29,910 --> 00:20:33,620
written for years with these plugins and

00:20:31,500 --> 00:20:35,880
these happened to be running inside of

00:20:33,620 --> 00:20:39,330
Travis CI so this is how we answer

00:20:35,880 --> 00:20:43,410
abstractly does WP Redis work at all

00:20:39,330 --> 00:20:44,760
does WP native sessions work at all that

00:20:43,410 --> 00:20:46,650
separate from the question does this

00:20:44,760 --> 00:20:48,630
work on Pantheon so when I started at

00:20:46,650 --> 00:20:50,910
Pantheon a year and a half ago I didn't

00:20:48,630 --> 00:20:52,440
have a ton of familiarity with WordPress

00:20:50,910 --> 00:20:54,240
but I was still occasionally reviewing

00:20:52,440 --> 00:20:56,490
some pull requests here I wanted some

00:20:54,240 --> 00:20:58,200
level of confidence not only does this

00:20:56,490 --> 00:20:59,880
pull request allow the plug-in to

00:20:58,200 --> 00:21:01,260
continue working but I really want to

00:20:59,880 --> 00:21:01,860
make sure that it's not going to break

00:21:01,260 --> 00:21:04,260
anything

00:21:01,860 --> 00:21:06,630
Pantheon specific that's kind of a

00:21:04,260 --> 00:21:08,070
different question to answer so to

00:21:06,630 --> 00:21:10,620
answer that question we again have a

00:21:08,070 --> 00:21:13,170
wordpress site it's running on Pantheon

00:21:10,620 --> 00:21:15,690
all these plugins have WordPress sites

00:21:13,170 --> 00:21:19,380
running on on Pantheon every single time

00:21:15,690 --> 00:21:21,270
we get a pull request b-hat runs a set

00:21:19,380 --> 00:21:23,220
of tests against that WordPress site

00:21:21,270 --> 00:21:25,380
running on Pantheon and circle CI

00:21:23,220 --> 00:21:28,050
happens to be the tool we're using to

00:21:25,380 --> 00:21:31,860
execute those tests I look more closely

00:21:28,050 --> 00:21:33,690
at those yamo configuration files we saw

00:21:31,860 --> 00:21:35,460
that in the live demo a yamo

00:21:33,690 --> 00:21:37,770
configuration file that really sets up

00:21:35,460 --> 00:21:39,900
how how be had execute the main thing I

00:21:37,770 --> 00:21:42,570
want to point out here is that in your

00:21:39,900 --> 00:21:45,420
be Hamel file you're going to specify

00:21:42,570 --> 00:21:47,670
the path of the dot feature files where

00:21:45,420 --> 00:21:49,740
are these expectations actually living

00:21:47,670 --> 00:21:51,420
with all of these WordPress plugins we

00:21:49,740 --> 00:21:53,820
have two sets of expectations the

00:21:51,420 --> 00:21:55,140
expectations specific to the plug-in we

00:21:53,820 --> 00:21:57,030
want to be able to install the Redis

00:21:55,140 --> 00:21:59,310
plug-in go to the administrative page

00:21:57,030 --> 00:22:01,320
verify that it's actually connected to

00:21:59,310 --> 00:22:04,290
Redis and I also want to make sure that

00:22:01,320 --> 00:22:05,190
I'm not breaking anything in WordPress

00:22:04,290 --> 00:22:06,960
core itself

00:22:05,190 --> 00:22:09,960
so we have a separate suite of tests

00:22:06,960 --> 00:22:11,330
that we add in with composer so those

00:22:09,960 --> 00:22:13,280
are living in a different path

00:22:11,330 --> 00:22:15,770
are living in the vendor directory these

00:22:13,280 --> 00:22:17,300
are expectations just general to

00:22:15,770 --> 00:22:20,060
WordPress core the fact that we can add

00:22:17,300 --> 00:22:22,670
posts we can add users we can add

00:22:20,060 --> 00:22:25,370
taxonomy terms make comments and anytime

00:22:22,670 --> 00:22:27,020
we add one of our plugins Redis native

00:22:25,370 --> 00:22:28,760
session handling we shouldn't break any

00:22:27,020 --> 00:22:31,520
of those so we should be able to execute

00:22:28,760 --> 00:22:33,530
all of those same tests those same tests

00:22:31,520 --> 00:22:35,780
that just verify WordPress core behavior

00:22:33,530 --> 00:22:39,400
we should be able to execute those tests

00:22:35,780 --> 00:22:41,570
with any of our plugins installed so

00:22:39,400 --> 00:22:44,030
there are a few terms that you'll hear

00:22:41,570 --> 00:22:45,710
often in in be had and even for the

00:22:44,030 --> 00:22:46,970
first year or two that I was working

00:22:45,710 --> 00:22:49,010
with be had I didn't have these terms

00:22:46,970 --> 00:22:50,450
fully differentiated so I just want to

00:22:49,010 --> 00:22:54,020
talk about three terms you'll hear a lot

00:22:50,450 --> 00:22:57,110
with what behalf context drivers and

00:22:54,020 --> 00:22:59,630
extensions first let's take context so

00:22:57,110 --> 00:23:01,490
context are how be hat understands these

00:22:59,630 --> 00:23:04,100
dot feature files these dot feature

00:23:01,490 --> 00:23:06,890
files again have the given when then

00:23:04,100 --> 00:23:09,050
syntax how do we actually map between

00:23:06,890 --> 00:23:12,740
the the phrases in those dot feature

00:23:09,050 --> 00:23:14,600
files and actual PHP execution so we do

00:23:12,740 --> 00:23:17,710
that with context files

00:23:14,600 --> 00:23:20,030
they're just PHP classes and they use

00:23:17,710 --> 00:23:23,480
annotations here to line up between

00:23:20,030 --> 00:23:25,130
these plain text phrases like given I am

00:23:23,480 --> 00:23:27,470
on the home page there's some regular

00:23:25,130 --> 00:23:29,450
expressions here so that you can vary

00:23:27,470 --> 00:23:32,150
them slightly but basically given I am

00:23:29,450 --> 00:23:34,540
the home page Maps really to a one-line

00:23:32,150 --> 00:23:37,310
function here only one line of PHP is

00:23:34,540 --> 00:23:39,560
executing here visit path that's all

00:23:37,310 --> 00:23:42,290
that happens when you you use the phrase

00:23:39,560 --> 00:23:45,620
given I'm on the home page the when

00:23:42,290 --> 00:23:48,410
Clause a lot of the examples in in minke

00:23:45,620 --> 00:23:51,560
context dot PHP are are from the world

00:23:48,410 --> 00:23:54,050
of Batman so when I select bats from

00:23:51,560 --> 00:23:57,800
user fears then this relatively simple

00:23:54,050 --> 00:24:01,460
PHP method executes it it's really just

00:23:57,800 --> 00:24:04,160
these three lines moving on to the then

00:24:01,460 --> 00:24:05,510
Clause then I should see who is the

00:24:04,160 --> 00:24:09,650
Batman all we're doing here is checking

00:24:05,510 --> 00:24:12,230
for text in our HTML page again it's

00:24:09,650 --> 00:24:14,180
just a one line function these contexts

00:24:12,230 --> 00:24:16,370
don't have to be all that complicated

00:24:14,180 --> 00:24:18,650
now you may be thinking see there's no

00:24:16,370 --> 00:24:20,000
way it's really that simple there's no

00:24:18,650 --> 00:24:22,360
way we're really just visiting the home

00:24:20,000 --> 00:24:25,130
page with a single line of PHP so

00:24:22,360 --> 00:24:27,320
contexts are one level of abstract

00:24:25,130 --> 00:24:29,299
they abstract between those plain text

00:24:27,320 --> 00:24:32,210
feature files and the world of PHP

00:24:29,299 --> 00:24:34,429
drivers are only a layer deeper of

00:24:32,210 --> 00:24:37,549
abstraction so two places you'll hear

00:24:34,429 --> 00:24:41,390
about drivers a lot are mink and Drupal

00:24:37,549 --> 00:24:44,929
drivers first taking the concept of mink

00:24:41,390 --> 00:24:46,910
drivers the mink is a way to actually do

00:24:44,929 --> 00:24:48,559
browser execution and this is an

00:24:46,910 --> 00:24:50,840
abstraction layer that allows you to use

00:24:48,559 --> 00:24:53,210
a common interface a common set of

00:24:50,840 --> 00:24:55,789
phrases like given I'm on the home page

00:24:53,210 --> 00:24:58,370
and then execute those with different

00:24:55,789 --> 00:25:00,110
browser simulation tools so if you want

00:24:58,370 --> 00:25:02,120
to actually execute JavaScript you're

00:25:00,110 --> 00:25:04,760
going to need something like selenium it

00:25:02,120 --> 00:25:07,520
can do more things but it runs a little

00:25:04,760 --> 00:25:09,880
bit slower gutten and browser kit run

00:25:07,520 --> 00:25:11,870
much faster but they don't process

00:25:09,880 --> 00:25:13,760
javascript so you can switch between

00:25:11,870 --> 00:25:16,730
these without rewriting everything

00:25:13,760 --> 00:25:19,460
drivers are an abstraction layer as long

00:25:16,730 --> 00:25:22,610
as you're implementing a PHP interface

00:25:19,460 --> 00:25:24,590
the the driver is going to work

00:25:22,610 --> 00:25:28,039
Drupal drivers another thing you'll hear

00:25:24,590 --> 00:25:30,110
about a lot when using b-hat with Drupal

00:25:28,039 --> 00:25:32,360
these are an abstraction layer that

00:25:30,110 --> 00:25:35,270
determine how B hat actually interacts

00:25:32,360 --> 00:25:38,299
with your your Drupal site so if you're

00:25:35,270 --> 00:25:40,010
using the black box driver then HTTP is

00:25:38,299 --> 00:25:42,020
really your only means of communicating

00:25:40,010 --> 00:25:44,480
with the site you could probably use the

00:25:42,020 --> 00:25:46,130
black box driver against crippled org I

00:25:44,480 --> 00:25:47,659
don't have any like administrative

00:25:46,130 --> 00:25:49,610
access to drupal.org but I could

00:25:47,659 --> 00:25:52,130
probably use the black box driver and

00:25:49,610 --> 00:25:54,650
just interact over HTTP

00:25:52,130 --> 00:25:56,419
the drush driver moves the Drupal site a

00:25:54,650 --> 00:25:57,950
little bit closer to B hat so we're

00:25:56,419 --> 00:26:01,400
getting a little bit closer we can

00:25:57,950 --> 00:26:03,260
access our site over SSH we can execute

00:26:01,400 --> 00:26:05,630
some drush commands this is going to let

00:26:03,260 --> 00:26:07,220
us do some fancy things like right steps

00:26:05,630 --> 00:26:08,480
saying give an I'm logged in as an

00:26:07,220 --> 00:26:10,580
administrator the way that actually

00:26:08,480 --> 00:26:13,580
works is we have add rush command that

00:26:10,580 --> 00:26:15,650
creates a new user and sets a certain

00:26:13,580 --> 00:26:18,380
password and then with that set you can

00:26:15,650 --> 00:26:20,480
you know sign in as that user finally

00:26:18,380 --> 00:26:22,760
the drupal api driver moves the Drupal

00:26:20,480 --> 00:26:24,110
site very very close to B hat they're

00:26:22,760 --> 00:26:26,720
literally just running on the same

00:26:24,110 --> 00:26:28,789
server the same PHP functions can be

00:26:26,720 --> 00:26:30,679
called in either so with that you get a

00:26:28,789 --> 00:26:33,409
whole lot of power you can call node

00:26:30,679 --> 00:26:35,299
save from your behalf steps you can do

00:26:33,409 --> 00:26:38,450
anything directly on the Drupal site

00:26:35,299 --> 00:26:41,160
with the the drupal api driver

00:26:38,450 --> 00:26:43,950
extensions the the third term in our

00:26:41,160 --> 00:26:45,600
glossary here when you hear about B hat

00:26:43,950 --> 00:26:48,660
extensions you can really just think

00:26:45,600 --> 00:26:50,640
about modules to use the phrase from the

00:26:48,660 --> 00:26:52,560
Drupal community we say there's a module

00:26:50,640 --> 00:26:54,390
for that and B hat basically there's an

00:26:52,560 --> 00:26:57,360
extension for that so if you want to do

00:26:54,390 --> 00:27:01,650
something like add some some B hat tests

00:26:57,360 --> 00:27:03,660
specific to SEO to check meta tags or

00:27:01,650 --> 00:27:06,660
metadata on your HTML responses well

00:27:03,660 --> 00:27:08,460
there's an SEO extension for for B hat

00:27:06,660 --> 00:27:10,710
if you want to do things like analyzing

00:27:08,460 --> 00:27:13,380
your test themselves find out how fast

00:27:10,710 --> 00:27:15,270
or slow they are find out how many times

00:27:13,380 --> 00:27:18,030
you're calling individual steps there

00:27:15,270 --> 00:27:20,130
are extensions for that taking

00:27:18,030 --> 00:27:22,050
screenshots of failures a bunch of

00:27:20,130 --> 00:27:24,420
different extensions for testing rest

00:27:22,050 --> 00:27:27,540
api's and of course integration to other

00:27:24,420 --> 00:27:28,980
systems like symphony wordpress and

00:27:27,540 --> 00:27:35,070
we've been talking a bit about the the

00:27:28,980 --> 00:27:36,780
drupal extension if you have a deeper

00:27:35,070 --> 00:27:38,790
familiarity with the hat then you can

00:27:36,780 --> 00:27:41,940
start to bend it a little more just as

00:27:38,790 --> 00:27:44,550
as you become more familiar with with

00:27:41,940 --> 00:27:46,320
drupal you get access to deeper and

00:27:44,550 --> 00:27:48,870
deeper layers you get more and more

00:27:46,320 --> 00:27:50,040
comfortable doing things with with

00:27:48,870 --> 00:27:53,220
drupal that aren't available out of the

00:27:50,040 --> 00:27:55,080
box the same dynamic as present in indy

00:27:53,220 --> 00:27:58,760
hat so I want to talk about one way we

00:27:55,080 --> 00:28:01,770
use a be had a little more deeply so

00:27:58,760 --> 00:28:03,810
again taking those those WordPress tests

00:28:01,770 --> 00:28:05,700
that just validates normal WordPress

00:28:03,810 --> 00:28:07,530
core behavior in order to validate

00:28:05,700 --> 00:28:09,870
normal WordPress core behavior we have

00:28:07,530 --> 00:28:11,820
to sign in as an administrator and when

00:28:09,870 --> 00:28:13,920
we wrote these tests there wasn't a

00:28:11,820 --> 00:28:15,600
robust wordpress extension the way there

00:28:13,920 --> 00:28:17,970
is with Drupal so I had to write my own

00:28:15,600 --> 00:28:20,790
steps in order to log in as an

00:28:17,970 --> 00:28:23,940
administrator with WordPress and if it's

00:28:20,790 --> 00:28:27,180
not all that fancy all it does is use

00:28:23,940 --> 00:28:28,920
some environmental variables to to set

00:28:27,180 --> 00:28:30,870
the WordPress administrative username

00:28:28,920 --> 00:28:33,650
and password and then I can just go to

00:28:30,870 --> 00:28:36,840
the WordPress login page and login

00:28:33,650 --> 00:28:39,240
because I know what the HTML form

00:28:36,840 --> 00:28:42,060
elements are and that works for

00:28:39,240 --> 00:28:43,650
basically all of our plugins there's one

00:28:42,060 --> 00:28:46,260
plug-in though where this doesn't work

00:28:43,650 --> 00:28:47,910
we have a plug-in for sam'l single

00:28:46,260 --> 00:28:50,670
sign-on the whole purpose of this

00:28:47,910 --> 00:28:51,890
plug-in is to override the login form so

00:28:50,670 --> 00:28:54,170
when I tried to

00:28:51,890 --> 00:28:56,120
to hook up our pre-existing b-hat test

00:28:54,170 --> 00:28:58,760
to this plugin it didn't work because

00:28:56,120 --> 00:29:02,450
those tests were dependent on logging in

00:28:58,760 --> 00:29:03,950
to WordPress in a very specific way to

00:29:02,450 --> 00:29:06,020
get around that problem all I have to do

00:29:03,950 --> 00:29:09,049
is override that one context that

00:29:06,020 --> 00:29:12,170
supplies the implementation details for

00:29:09,049 --> 00:29:15,380
administrative login with a with a

00:29:12,170 --> 00:29:17,890
different class specific to sam'l this

00:29:15,380 --> 00:29:21,020
sam'l plug-in that we have and then

00:29:17,890 --> 00:29:25,070
slightly different form fields basically

00:29:21,020 --> 00:29:26,510
doing the same thing again using global

00:29:25,070 --> 00:29:28,340
variables here for the username and

00:29:26,510 --> 00:29:30,260
password but accessing slightly

00:29:28,340 --> 00:29:33,290
different administrator forms and then

00:29:30,260 --> 00:29:35,330
those same be hat dot feature files can

00:29:33,290 --> 00:29:38,299
execute those same feature files that

00:29:35,330 --> 00:29:40,610
have expectations around adding posts

00:29:38,299 --> 00:29:42,799
adding users adding comments can all

00:29:40,610 --> 00:29:44,450
execute against the the sam'l plug-in

00:29:42,799 --> 00:29:45,950
the same way they execute against all

00:29:44,450 --> 00:29:49,730
the other ones because we've overridden

00:29:45,950 --> 00:29:51,980
just this one part so when when you

00:29:49,730 --> 00:29:53,540
actually start using behalf again to

00:29:51,980 --> 00:29:56,240
quote Michelle Krejci you should write

00:29:53,540 --> 00:29:58,040
your tests early and often ideally at

00:29:56,240 --> 00:29:59,929
the beginning of a project you have a

00:29:58,040 --> 00:30:02,150
great conversation with all your

00:29:59,929 --> 00:30:04,790
stakeholders everyone gets in the same

00:30:02,150 --> 00:30:07,040
room everyone smiles everyone has a

00:30:04,790 --> 00:30:11,030
common understanding of what we're doing

00:30:07,040 --> 00:30:13,669
and and it's all wonderful I don't think

00:30:11,030 --> 00:30:16,520
you can actually expect it to go like

00:30:13,669 --> 00:30:18,890
that how do you really start to use B

00:30:16,520 --> 00:30:20,750
hat like there is a lot of complexity

00:30:18,890 --> 00:30:22,490
here I have shown you a lot of

00:30:20,750 --> 00:30:24,950
complexity in B hat

00:30:22,490 --> 00:30:26,630
I've been I've been using it off and on

00:30:24,950 --> 00:30:28,400
for two years and I still feel like I'm

00:30:26,630 --> 00:30:31,610
learning it I don't think you can jump

00:30:28,400 --> 00:30:34,520
from from zero to 60 with B hat to quote

00:30:31,610 --> 00:30:36,230
myself from Drupal con Dublin the agile

00:30:34,520 --> 00:30:38,720
you're agile presentation there's a lot

00:30:36,230 --> 00:30:41,240
of overlap between the agile

00:30:38,720 --> 00:30:42,679
methodologies community and the behavior

00:30:41,240 --> 00:30:44,570
driven development community that you'll

00:30:42,679 --> 00:30:46,490
see and behead I think it's kind of

00:30:44,570 --> 00:30:48,770
weird that these methodologies that

00:30:46,490 --> 00:30:51,140
really encourage us to work and for

00:30:48,770 --> 00:30:53,570
incrementally take baby steps in the

00:30:51,140 --> 00:30:54,950
right direction I find it odd when

00:30:53,570 --> 00:30:57,620
there's also an expectation that we're

00:30:54,950 --> 00:30:59,210
going to jump to perfect scrum all in

00:30:57,620 --> 00:31:02,419
one new project or we're going to drum

00:30:59,210 --> 00:31:04,820
jump to perfect B hat usage all in one

00:31:02,419 --> 00:31:06,950
project I don't think that's reason

00:31:04,820 --> 00:31:08,960
so again to go back to those two main

00:31:06,950 --> 00:31:11,419
benefits that I think you can get using

00:31:08,960 --> 00:31:13,759
be had a clear definition of done a

00:31:11,419 --> 00:31:16,700
clear understanding with your client of

00:31:13,759 --> 00:31:19,309
what are we even building and automatic

00:31:16,700 --> 00:31:21,470
execution I think when you're starting

00:31:19,309 --> 00:31:25,490
to use b-hat you have to prioritize one

00:31:21,470 --> 00:31:28,159
and Bend on the other so so which do you

00:31:25,490 --> 00:31:29,870
prioritize dan North the guy who coined

00:31:28,159 --> 00:31:32,149
the term behavior driven development

00:31:29,870 --> 00:31:34,309
says the definition of done might

00:31:32,149 --> 00:31:36,529
actually be more important than the

00:31:34,309 --> 00:31:38,659
automatic testing because what good is

00:31:36,529 --> 00:31:40,490
is automated testing if you built the

00:31:38,659 --> 00:31:44,179
wrong thing what good is it if I get

00:31:40,490 --> 00:31:47,330
green check checkboxes that tell me yes

00:31:44,179 --> 00:31:49,309
my old users block is still functioning

00:31:47,330 --> 00:31:50,960
the same way at functions yesterday the

00:31:49,309 --> 00:31:53,389
client ever asked for old users they

00:31:50,960 --> 00:31:55,279
wanted new users so how do you how do

00:31:53,389 --> 00:31:58,669
you get a clear definition of done

00:31:55,279 --> 00:32:00,320
without automatic execution demo driven

00:31:58,669 --> 00:32:02,419
development I don't think this term will

00:32:00,320 --> 00:32:04,820
catch on because DDD has already been

00:32:02,419 --> 00:32:06,470
claimed by domain driven development but

00:32:04,820 --> 00:32:09,350
this is this is a term that we threw

00:32:06,470 --> 00:32:11,419
around informally at my last job at

00:32:09,350 --> 00:32:14,000
Palantir dotnet we would talk about how

00:32:11,419 --> 00:32:15,679
every sprint we we end with the demo for

00:32:14,000 --> 00:32:16,970
our client and we show them these are

00:32:15,679 --> 00:32:19,309
the stories we built and we would just

00:32:16,970 --> 00:32:20,090
have like an informal human readable

00:32:19,309 --> 00:32:21,769
script saying

00:32:20,090 --> 00:32:24,169
first you should demo the blog archive

00:32:21,769 --> 00:32:26,179
feature and then you should demo the the

00:32:24,169 --> 00:32:28,009
new stuff on the home page and then show

00:32:26,179 --> 00:32:30,080
them the new user role and then show

00:32:28,009 --> 00:32:32,059
them the new fields so we just had an

00:32:30,080 --> 00:32:33,980
informal human readable script that said

00:32:32,059 --> 00:32:36,529
here's how you demonstrate that the

00:32:33,980 --> 00:32:39,139
sprint is done so you can do that like I

00:32:36,529 --> 00:32:41,059
could I could have a human really human

00:32:39,139 --> 00:32:44,120
friendly script saying the way I'm going

00:32:41,059 --> 00:32:45,289
to demo that this new user block is done

00:32:44,120 --> 00:32:47,210
as well I'm just going to sign as an

00:32:45,289 --> 00:32:49,309
admin user I'm going to make a new

00:32:47,210 --> 00:32:50,779
testing account and click on the home

00:32:49,309 --> 00:32:53,120
page and I'm going to say to my client

00:32:50,779 --> 00:32:55,519
look the new account that I just made is

00:32:53,120 --> 00:32:57,200
in this block like this isn't really

00:32:55,519 --> 00:32:59,750
complex but I do think it's a good idea

00:32:57,200 --> 00:33:01,460
before you start a ticket before you

00:32:59,750 --> 00:33:03,679
start a user story just think about and

00:33:01,460 --> 00:33:05,600
actually write down in a place that you

00:33:03,679 --> 00:33:06,889
and your other co-workers can see how

00:33:05,600 --> 00:33:09,139
you're going to demonstrate that you're

00:33:06,889 --> 00:33:11,059
actually done with the thing I think you

00:33:09,139 --> 00:33:14,750
can get a clear definition of done

00:33:11,059 --> 00:33:16,820
without automatic execution if you do

00:33:14,750 --> 00:33:18,230
want to focus on automatic execution you

00:33:16,820 --> 00:33:21,260
may run into that pain point

00:33:18,230 --> 00:33:23,510
of wait is testing going to make me

00:33:21,260 --> 00:33:25,580
slower be how does this new thing that I

00:33:23,510 --> 00:33:27,740
have to use it may take me an extra hour

00:33:25,580 --> 00:33:29,690
to write a b-hat test for this thing I

00:33:27,740 --> 00:33:32,690
don't have time to write a b-hat test

00:33:29,690 --> 00:33:34,970
for every single thing I'm doing on my

00:33:32,690 --> 00:33:36,380
project well I think you can start with

00:33:34,970 --> 00:33:38,540
the attitude we're going to have a B hat

00:33:36,380 --> 00:33:40,400
test or some kind of automated test for

00:33:38,540 --> 00:33:42,140
every single bug fix because by

00:33:40,400 --> 00:33:44,510
definition of bug fix is something that

00:33:42,140 --> 00:33:46,940
has already broken if you're concerned

00:33:44,510 --> 00:33:48,679
about writing unnecessary tests for

00:33:46,940 --> 00:33:50,960
things that aren't going to break a bug

00:33:48,679 --> 00:33:52,429
is something that already broke so you

00:33:50,960 --> 00:33:55,429
might as well write a test to verify

00:33:52,429 --> 00:33:58,250
that it doesn't break again I think this

00:33:55,429 --> 00:33:58,910
is really helpful for data migrations at

00:33:58,250 --> 00:34:01,250
my last job

00:33:58,910 --> 00:34:03,559
I was doing a ton of Drupal 6 to Drupal

00:34:01,250 --> 00:34:07,010
7 migration now I've been not even in my

00:34:03,559 --> 00:34:09,350
free time I do seven to eight migrations

00:34:07,010 --> 00:34:11,210
as part of my job at Pantheon I wrote a

00:34:09,350 --> 00:34:13,639
blog post and some documentation just

00:34:11,210 --> 00:34:17,240
showing that yes you can use migrate

00:34:13,639 --> 00:34:20,240
module on Pantheon migrating from 7 to 8

00:34:17,240 --> 00:34:22,129
so this is a pretty messy feature file

00:34:20,240 --> 00:34:25,879
but this is a feature file that runs

00:34:22,129 --> 00:34:27,800
after a series of drush commands do the

00:34:25,879 --> 00:34:30,800
correct steps in the correct order to

00:34:27,800 --> 00:34:33,320
migrate from 7 to 8 then all I do here

00:34:30,800 --> 00:34:35,990
is validate that by going to node slash

00:34:33,320 --> 00:34:39,350
one on my Drupal 8 site then I see the

00:34:35,990 --> 00:34:41,179
text test node made on on d7 that's the

00:34:39,350 --> 00:34:44,149
name of the node that I made on Drupal 7

00:34:41,179 --> 00:34:46,730
I even just check directly the exact

00:34:44,149 --> 00:34:49,820
HTML I expect for the the image that I

00:34:46,730 --> 00:34:53,030
added on Drupal 7 and I even go to the

00:34:49,820 --> 00:34:55,399
exact URL for that image and I validate

00:34:53,030 --> 00:34:57,740
that it's a two hundred instead of a 404

00:34:55,399 --> 00:35:01,670
so it's a pretty test I wouldn't want to

00:34:57,740 --> 00:35:03,859
show this to an end client but this does

00:35:01,670 --> 00:35:05,720
automatically execute every single night

00:35:03,859 --> 00:35:08,330
this test runs it makes a brand-new

00:35:05,720 --> 00:35:10,010
Pantheon multi dev environment does the

00:35:08,330 --> 00:35:12,530
correct rush commands in the correct

00:35:10,010 --> 00:35:14,960
order migrating from Drupal 7 to Drupal

00:35:12,530 --> 00:35:17,510
8 this b-hat test runs and then I know

00:35:14,960 --> 00:35:22,180
great that blog post that I wrote a year

00:35:17,510 --> 00:35:22,180
ago is still relatively accurate great

00:35:22,210 --> 00:35:27,320
even caught a bug this way on a personal

00:35:25,369 --> 00:35:29,900
project I was migrating from Drupal 7 to

00:35:27,320 --> 00:35:30,760
Drupal 8 and often when I'm migrating I

00:35:29,900 --> 00:35:32,800
just have the two

00:35:30,760 --> 00:35:34,510
those open I have my Drupal 8 site I

00:35:32,800 --> 00:35:36,670
have my Drupal 7 site and all I want to

00:35:34,510 --> 00:35:39,100
do is validate that the taxonomy terms

00:35:36,670 --> 00:35:42,160
the nodes come from one to the other so

00:35:39,100 --> 00:35:44,530
I can just script that with Whitby hat I

00:35:42,160 --> 00:35:46,900
can just say like on my Drupal 8 site if

00:35:44,530 --> 00:35:49,630
I go to the taxonomy lifting play page I

00:35:46,900 --> 00:35:51,880
should see blog tags I should see iTunes

00:35:49,630 --> 00:35:53,650
categories this is a test that actually

00:35:51,880 --> 00:35:55,660
failed because a couple months ago there

00:35:53,650 --> 00:35:58,090
was a genuine bug in Drupal core that

00:35:55,660 --> 00:35:59,980
broke taxonomy term migration I probably

00:35:58,090 --> 00:36:02,230
wouldn't have caught that without this

00:35:59,980 --> 00:36:03,700
test but because this test failed I was

00:36:02,230 --> 00:36:06,340
able to find the appropriate issue on

00:36:03,700 --> 00:36:09,700
drupal.org help review a patch and get

00:36:06,340 --> 00:36:11,260
an actual bug fixed in in Drupal core so

00:36:09,700 --> 00:36:13,750
if you're looking to experiment with

00:36:11,260 --> 00:36:16,420
b-hat and in a way that that's not going

00:36:13,750 --> 00:36:18,100
to require you to be working too closely

00:36:16,420 --> 00:36:20,980
with with your client if you just want

00:36:18,100 --> 00:36:23,770
to do a developer focused introduction

00:36:20,980 --> 00:36:27,190
to to be had I recommend using it with

00:36:23,770 --> 00:36:29,470
migrations b-hat is not a performance

00:36:27,190 --> 00:36:31,180
testing tool but I kind of used it as

00:36:29,470 --> 00:36:34,960
one last summer when we were comparing

00:36:31,180 --> 00:36:37,060
PHP 5 against PHP 7 on Pantheon we just

00:36:34,960 --> 00:36:39,940
wanted to show clearly especially for

00:36:37,060 --> 00:36:42,100
authenticated traffic PHP 7 is going to

00:36:39,940 --> 00:36:44,440
be genuinely faster so I took a real

00:36:42,100 --> 00:36:46,510
Drupal 8 site being built by a major

00:36:44,440 --> 00:36:48,610
agency on Pantheon and is M hey can I

00:36:46,510 --> 00:36:50,350
just script up some some basic

00:36:48,610 --> 00:36:52,360
administrative behavior with b-hat

00:36:50,350 --> 00:36:54,670
basically I'm going to make a node I'm

00:36:52,360 --> 00:36:56,440
going to go to a workbench moderation

00:36:54,670 --> 00:36:58,660
listing page and just click around a

00:36:56,440 --> 00:37:01,600
bunch I'm going to do that in PHP 5 in

00:36:58,660 --> 00:37:03,940
PHP 7 and the result was was pretty

00:37:01,600 --> 00:37:07,840
clear it showed me that the exact same

00:37:03,940 --> 00:37:09,370
pattern of traffic in PHP 7 is faster

00:37:07,840 --> 00:37:12,850
than the exact same pattern of traffic

00:37:09,370 --> 00:37:14,410
in PHP 5 now again be hat really isn't a

00:37:12,850 --> 00:37:16,120
performance testing tool if you're

00:37:14,410 --> 00:37:19,420
comfortable with other performance

00:37:16,120 --> 00:37:21,310
testing tools you can script up this

00:37:19,420 --> 00:37:22,930
kind of thing yet more cleanly but if

00:37:21,310 --> 00:37:26,710
you're just looking to experiment with

00:37:22,930 --> 00:37:29,860
behalf this this might be helpful we

00:37:26,710 --> 00:37:33,330
even use be hyper testing command-line

00:37:29,860 --> 00:37:35,770
tools here's a dot feature file for

00:37:33,330 --> 00:37:38,890
evaluating the behavior of the terminus

00:37:35,770 --> 00:37:40,960
command that enables New Relic on a site

00:37:38,890 --> 00:37:43,060
so it's a pretty simple commander I just

00:37:40,960 --> 00:37:44,590
want to point out this this portion the

00:37:43,060 --> 00:37:47,320
command is terminus

00:37:44,590 --> 00:37:49,570
New Relic : enable and then you give it

00:37:47,320 --> 00:37:50,950
the site name and we just want to

00:37:49,570 --> 00:37:53,050
validate that when you run that command

00:37:50,950 --> 00:37:55,030
you're going to get back from terminus

00:37:53,050 --> 00:37:57,400
that new relic has been enabled and that

00:37:55,030 --> 00:37:59,710
our environments have been reconfigured

00:37:57,400 --> 00:38:01,810
so again if you're looking for a more

00:37:59,710 --> 00:38:04,240
developer oriented way of experimenting

00:38:01,810 --> 00:38:05,530
with B hat you can use it on command

00:38:04,240 --> 00:38:07,360
line tools that you might be writing

00:38:05,530 --> 00:38:11,200
another detail I want to point out here

00:38:07,360 --> 00:38:17,290
is this ass VCR annotation this is is

00:38:11,200 --> 00:38:19,180
telling us which predetermined HTTP

00:38:17,290 --> 00:38:20,920
interaction is going to be referenced it

00:38:19,180 --> 00:38:24,250
would be pretty slow to run our full

00:38:20,920 --> 00:38:27,790
suite of terminus B hat tests using real

00:38:24,250 --> 00:38:30,820
HTTP against the panthéon api so we have

00:38:27,790 --> 00:38:33,490
those pre-baked with this VCR plug-in is

00:38:30,820 --> 00:38:35,230
just going to replay the same HTTP

00:38:33,490 --> 00:38:37,450
interaction I'm also excited because

00:38:35,230 --> 00:38:39,160
there's a new extension for for

00:38:37,450 --> 00:38:41,410
WordPress for a couple years there have

00:38:39,160 --> 00:38:42,640
been a few WordPress extensions that got

00:38:41,410 --> 00:38:44,170
started and then didn't really go

00:38:42,640 --> 00:38:45,760
anywhere we've got a new one in the

00:38:44,170 --> 00:38:48,730
community that's really modeled after

00:38:45,760 --> 00:38:50,740
the the extension that's present in the

00:38:48,730 --> 00:38:53,170
the Drupal community I think in the

00:38:50,740 --> 00:38:55,060
coming months or year or so we'll be

00:38:53,170 --> 00:38:58,300
looking at refactoring our WordPress

00:38:55,060 --> 00:39:02,620
tests around a much more robust behalf

00:38:58,300 --> 00:39:05,430
be a tool in WordPress so what have I

00:39:02,620 --> 00:39:08,110
learned with all my my be hat work

00:39:05,430 --> 00:39:09,940
bending be has benefits again be willing

00:39:08,110 --> 00:39:12,040
to bend I think if you're trying to get

00:39:09,940 --> 00:39:14,110
both of those main benefits of a clear

00:39:12,040 --> 00:39:15,670
definition of done and automatic

00:39:14,110 --> 00:39:17,980
execution you're probably going to have

00:39:15,670 --> 00:39:20,980
to sacrifice on one in order to get the

00:39:17,980 --> 00:39:23,080
other at first B hat behavior driven

00:39:20,980 --> 00:39:24,310
development in general really is about

00:39:23,080 --> 00:39:25,870
the communication that you have with

00:39:24,310 --> 00:39:28,180
your team the communication that you

00:39:25,870 --> 00:39:30,550
have with your clients so flying

00:39:28,180 --> 00:39:33,340
teammates to work with a prioritized

00:39:30,550 --> 00:39:35,740
test that will fail it sounds odd of

00:39:33,340 --> 00:39:37,780
course we want our tests to pass but if

00:39:35,740 --> 00:39:40,120
they never fail I sometimes wonder why

00:39:37,780 --> 00:39:42,430
did I write that test at all and ideally

00:39:40,120 --> 00:39:43,630
you want them to fail meaningfully you

00:39:42,430 --> 00:39:46,150
want them to fail in a way that gives

00:39:43,630 --> 00:39:48,300
you meaningful information some of our

00:39:46,150 --> 00:39:52,480
wordpress tests just fail because

00:39:48,300 --> 00:39:54,610
wordpress has has changed HTML

00:39:52,480 --> 00:39:56,380
implementation details and it's not so

00:39:54,610 --> 00:39:58,150
much a meaningful fail it's just that

00:39:56,380 --> 00:40:00,730
somewhere we've assumed

00:39:58,150 --> 00:40:03,190
an HTML structure and then sometimes

00:40:00,730 --> 00:40:04,329
that breaks I think when you're working

00:40:03,190 --> 00:40:07,779
with a new tool like the Hat you're

00:40:04,329 --> 00:40:09,940
going to have to practice it can be

00:40:07,779 --> 00:40:12,750
time-consuming to to learn these new

00:40:09,940 --> 00:40:15,789
tools you may not have time on a

00:40:12,750 --> 00:40:17,950
billable client project to to learn

00:40:15,789 --> 00:40:18,640
something brand new if you're new to B

00:40:17,950 --> 00:40:21,190
hat

00:40:18,640 --> 00:40:24,279
I also think also think it's fun to to

00:40:21,190 --> 00:40:27,510
get creative so I do want to take this

00:40:24,279 --> 00:40:30,160
opportunity to introduce a new B hats

00:40:27,510 --> 00:40:33,430
extension it's a B hat extension that I

00:40:30,160 --> 00:40:36,460
have released under my my joke github

00:40:33,430 --> 00:40:41,650
account for faux Al Gore this is the

00:40:36,460 --> 00:40:44,289
behalf say extension this is a extension

00:40:41,650 --> 00:40:47,349
that uses the say command that's present

00:40:44,289 --> 00:40:51,069
on on most UNIX systems to say out loud

00:40:47,349 --> 00:40:53,859
your B hat tests as they run so I'm

00:40:51,069 --> 00:41:02,400
going to switch get branches here I'll

00:40:53,859 --> 00:41:02,400
do the B hat oh I need a tea

00:41:22,960 --> 00:41:27,520
it's another risky live demo and this

00:41:25,850 --> 00:41:30,230
sir

00:41:27,520 --> 00:41:34,040
give a nice elevated meal with testing

00:41:30,230 --> 00:41:36,560
at example.com given I fill in edit name

00:41:34,040 --> 00:41:38,570
with the test account 1 given I fill in

00:41:36,560 --> 00:41:41,300
edit past past 1 with some random pass

00:41:38,570 --> 00:41:43,850
given I fill in edit past past 2 with

00:41:41,300 --> 00:41:47,030
some random path given I press create

00:41:43,850 --> 00:41:48,770
new account when I visit then I should

00:41:47,030 --> 00:42:22,840
feed test account one in the block views

00:41:48,770 --> 00:42:22,840
block well I thought it is a home page

00:42:25,490 --> 00:42:28,590
[Music]

00:42:30,130 --> 00:42:37,370
so so why would you actually use this

00:42:32,960 --> 00:42:39,320
this again is a joke or novelty b-hat

00:42:37,370 --> 00:42:41,360
extension I kind of missed the culture

00:42:39,320 --> 00:42:44,360
of novelty or joke modules that we had

00:42:41,360 --> 00:42:47,540
in Drupal in Drupal 6 and Drupal 7 the

00:42:44,360 --> 00:42:49,910
bad judgment module the misery module I

00:42:47,540 --> 00:42:52,550
want to introduce some some joke D hat

00:42:49,910 --> 00:42:55,280
extensions and yes this isn't meant for

00:42:52,550 --> 00:42:57,890
normal usage I think it does make two

00:42:55,280 --> 00:43:01,910
helpful points it makes the point that

00:42:57,890 --> 00:43:03,980
you can write ridiculous be head steps

00:43:01,910 --> 00:43:06,800
that really aren't friendly to your

00:43:03,980 --> 00:43:08,900
clients if you hear these steps spoken a

00:43:06,800 --> 00:43:12,800
lot if you hear spoken aloud blocks

00:43:08,900 --> 00:43:14,870
views block whose new block one that's a

00:43:12,800 --> 00:43:16,820
sign that this is a ridiculous test this

00:43:14,870 --> 00:43:19,520
is not something that I would want to

00:43:16,820 --> 00:43:23,360
show to it to my end client I would much

00:43:19,520 --> 00:43:25,340
rather show them this scenario another

00:43:23,360 --> 00:43:28,010
thing I helped is I think this helps

00:43:25,340 --> 00:43:31,160
highlight is the concept of user roles I

00:43:28,010 --> 00:43:33,560
found that one one problematic pattern I

00:43:31,160 --> 00:43:35,930
get into with with writing B hat test is

00:43:33,560 --> 00:43:36,590
it's really temple tempting to just

00:43:35,930 --> 00:43:38,360
write every

00:43:36,590 --> 00:43:40,910
the administrative user because the

00:43:38,360 --> 00:43:42,530
administrative user can use that I can

00:43:40,910 --> 00:43:44,090
do anything you're not going to run into

00:43:42,530 --> 00:43:46,460
a permission there but the whole point

00:43:44,090 --> 00:43:49,010
here is thinking about who is actually

00:43:46,460 --> 00:43:52,520
doing these things so if I set different

00:43:49,010 --> 00:43:53,960
voices for these different user accounts

00:43:52,520 --> 00:43:57,830
if I set

00:43:53,960 --> 00:44:00,290
Fiona awake that's a local if I set

00:43:57,830 --> 00:44:02,750
Fiona to be the administrator and

00:44:00,290 --> 00:44:04,160
cello's to be the moderator or any of

00:44:02,750 --> 00:44:06,170
the voices that you can get them to say

00:44:04,160 --> 00:44:08,090
command I can reinforce myself that

00:44:06,170 --> 00:44:10,250
these are different these are different

00:44:08,090 --> 00:44:13,490
people these different people have

00:44:10,250 --> 00:44:17,240
different expectations so again this is

00:44:13,490 --> 00:44:19,100
this is actually out on the internet if

00:44:17,240 --> 00:44:21,430
you do want to add this to your project

00:44:19,100 --> 00:44:24,800
you can do so it is registered on

00:44:21,430 --> 00:44:28,580
packages just composer require Flo Al

00:44:24,800 --> 00:44:33,880
Gore slash B hats a extension and you'll

00:44:28,580 --> 00:44:33,880
be you'll be good to go thanks everyone

00:44:38,800 --> 00:44:43,160
of course later this week we've got

00:44:41,120 --> 00:44:45,920
contributor sprints and I think we've

00:44:43,160 --> 00:44:49,310
got a few more minutes here for for

00:44:45,920 --> 00:44:55,370
questions yes please use the microphone

00:44:49,310 --> 00:44:58,670
at the center after beehad fills out a

00:44:55,370 --> 00:45:00,230
form it just everything disappears just

00:44:58,670 --> 00:45:03,170
swipes everything is there any way to

00:45:00,230 --> 00:45:05,590
save that form so you can go in and look

00:45:03,170 --> 00:45:08,330
and see all your fields filled out

00:45:05,590 --> 00:45:10,130
interesting I think I want to make sure

00:45:08,330 --> 00:45:14,210
I understand the question are you saying

00:45:10,130 --> 00:45:16,340
is it possible to to see visually the

00:45:14,210 --> 00:45:18,080
form filled out video it submitted I'd

00:45:16,340 --> 00:45:19,550
be like a breakpoint before it hit save

00:45:18,080 --> 00:45:21,200
and then you can go and look for that

00:45:19,550 --> 00:45:23,960
word well it's important to remember

00:45:21,200 --> 00:45:26,480
that the the browser simulation is not

00:45:23,960 --> 00:45:29,660
necessarily using you're probably not

00:45:26,480 --> 00:45:32,180
using your own browser it's using a

00:45:29,660 --> 00:45:34,310
simulated browser but I'm not certain

00:45:32,180 --> 00:45:35,870
what you screenshotting tools would use

00:45:34,310 --> 00:45:37,400
like you can take screenshots at the end

00:45:35,870 --> 00:45:40,820
result I'm not sure if you took a

00:45:37,400 --> 00:45:43,010
screenshot like Midway if it would show

00:45:40,820 --> 00:45:46,100
the form fields being filled up but it

00:45:43,010 --> 00:45:48,650
might anyone in the room know if if you

00:45:46,100 --> 00:45:49,870
took a screenshot before pressing save

00:45:48,650 --> 00:46:02,560
what would happen

00:45:49,870 --> 00:46:04,240
I haven't gotten that far great yeah so

00:46:02,560 --> 00:46:05,010
we got an answer from from the room here

00:46:04,240 --> 00:46:08,380
browserstack

00:46:05,010 --> 00:46:08,950
will will let you do that okay one more

00:46:08,380 --> 00:46:11,890
one more

00:46:08,950 --> 00:46:15,670
yeah um and in that one slide you had

00:46:11,890 --> 00:46:17,680
word you mentioned or it looks at the

00:46:15,670 --> 00:46:19,540
taxonomy vocabularies available and

00:46:17,680 --> 00:46:22,330
there's four listed yeah is there any

00:46:19,540 --> 00:46:24,700
way to say and I should not see any

00:46:22,330 --> 00:46:26,380
other taxonomy terms in case somebody

00:46:24,700 --> 00:46:28,330
created one and you didn't want another

00:46:26,380 --> 00:46:31,030
that's all you wanted yeah you have

00:46:28,330 --> 00:46:34,450
probably need to write a custom step

00:46:31,030 --> 00:46:38,320
there to say something like and there

00:46:34,450 --> 00:46:40,690
there might be a pre-written step for

00:46:38,320 --> 00:46:44,650
something as abstract as like and there

00:46:40,690 --> 00:46:46,300
are X rows in the table like that that

00:46:44,650 --> 00:46:47,860
might be a pre-written good app but I

00:46:46,300 --> 00:46:50,050
would I would guess you would probably

00:46:47,860 --> 00:46:51,870
have to write your own step two to count

00:46:50,050 --> 00:46:57,340
the exact number of rows in the table

00:46:51,870 --> 00:46:59,400
okay thank you hi first things I really

00:46:57,340 --> 00:47:03,040
enjoyed your presentation oh thank you

00:46:59,400 --> 00:47:06,790
I'm having the essentially the Drupal 5

00:47:03,040 --> 00:47:08,530
problem okay which is to say Drupal 5

00:47:06,790 --> 00:47:10,390
does not work until somebody tells you

00:47:08,530 --> 00:47:14,010
when you're a newbie you must download

00:47:10,390 --> 00:47:16,180
CCK and views sure so it sounds like

00:47:14,010 --> 00:47:20,080
context drivers and extensions are

00:47:16,180 --> 00:47:22,960
crucial to having a kind experience with

00:47:20,080 --> 00:47:25,600
b-hat yeah is there a resource for where

00:47:22,960 --> 00:47:27,370
to go to get the crucial specific ones

00:47:25,600 --> 00:47:29,470
that we're going to use for 80% of our

00:47:27,370 --> 00:47:30,850
drupal things sure I'll take those and

00:47:29,470 --> 00:47:33,130
what they mean I'll take this

00:47:30,850 --> 00:47:36,030
opportunity to to plug a Pantheon

00:47:33,130 --> 00:47:39,000
repository this is a repository that

00:47:36,030 --> 00:47:43,240
that's an example of how you can use

00:47:39,000 --> 00:47:46,060
composer Drupal 8 Pantheon altogether

00:47:43,240 --> 00:47:48,280
with with github and and because this is

00:47:46,060 --> 00:47:52,870
a continuous integration example we want

00:47:48,280 --> 00:47:56,890
to show some tests so we have a behalf -

00:47:52,870 --> 00:47:59,110
Pantheon demo file here that is using in

00:47:56,890 --> 00:48:02,180
this case just two contexts the Drupal

00:47:59,110 --> 00:48:04,849
context and the minke context

00:48:02,180 --> 00:48:07,279
so that will get you pretty far pretty

00:48:04,849 --> 00:48:09,740
fast if you can use if you can start

00:48:07,279 --> 00:48:11,599
from this example and it's just further

00:48:09,740 --> 00:48:14,359
the plug give you if you stop behind the

00:48:11,599 --> 00:48:17,270
Pantheon booth demo you'll see it in

00:48:14,359 --> 00:48:19,520
action it's a different example

00:48:17,270 --> 00:48:22,960
repository but it shows the behead stuff

00:48:19,520 --> 00:48:26,059
actually actually running okay thanks

00:48:22,960 --> 00:48:27,859
hi thanks for the presentation sure so

00:48:26,059 --> 00:48:29,660
the question is is it worth doing

00:48:27,859 --> 00:48:34,069
schedule monitoring writing behave

00:48:29,660 --> 00:48:35,990
scrat's script schooling so you're

00:48:34,069 --> 00:48:38,839
asking would it be worthwhile to execute

00:48:35,990 --> 00:48:40,760
a be a test on a schedule to get verify

00:48:38,839 --> 00:48:45,950
that your site is continuing to run

00:48:40,760 --> 00:48:50,750
right maybe and the reason I hesitate is

00:48:45,950 --> 00:48:52,819
because I I'm hesitant about executing

00:48:50,750 --> 00:48:54,710
b-hat tests against a live site because

00:48:52,819 --> 00:48:56,299
some of your behalf scenarios might do

00:48:54,710 --> 00:48:58,400
destructive thing as they might right

00:48:56,299 --> 00:48:59,960
still eat real content or they might it

00:48:58,400 --> 00:49:01,609
might be add content that you don't want

00:48:59,960 --> 00:49:05,630
in fact some analytics as well so yeah

00:49:01,609 --> 00:49:07,690
so so if your if your be had tests your

00:49:05,630 --> 00:49:09,770
beheads has don't do anything observable

00:49:07,690 --> 00:49:11,750
but you know like know the point of

00:49:09,770 --> 00:49:13,549
behead tests or part of the point is to

00:49:11,750 --> 00:49:15,650
do things that are observable right then

00:49:13,549 --> 00:49:18,319
it may be safe to run them against a

00:49:15,650 --> 00:49:20,720
live site so so technically yes you

00:49:18,319 --> 00:49:23,990
absolutely can execute b-hat tests

00:49:20,720 --> 00:49:25,640
against a live site but it may not be a

00:49:23,990 --> 00:49:27,559
good idea to do so depending on the

00:49:25,640 --> 00:49:29,089
specific tests that you have you can do

00:49:27,559 --> 00:49:31,849
in different environments like at stage

00:49:29,089 --> 00:49:36,109
pre probably get on yeah yeah just

00:49:31,849 --> 00:49:39,140
curious thank you mm-hmm why I'm writing

00:49:36,109 --> 00:49:41,720
be a test for a site a triple seven site

00:49:39,140 --> 00:49:43,670
that has a lot of content sort as

00:49:41,720 --> 00:49:46,700
entities and the triple extension seems

00:49:43,670 --> 00:49:49,549
to mainly help you with nodes yeah so

00:49:46,700 --> 00:49:52,039
where's a good place to go for templates

00:49:49,549 --> 00:49:55,520
for customizing you know creating that

00:49:52,039 --> 00:50:00,680
custom logic to support creating short

00:49:55,520 --> 00:50:02,480
uh so there's the the concept of these

00:50:00,680 --> 00:50:05,900
context the things that actually define

00:50:02,480 --> 00:50:07,460
your steps so yeah it would be great if

00:50:05,900 --> 00:50:10,010
the the drupal extension just had

00:50:07,460 --> 00:50:12,770
generic entity handling rather than like

00:50:10,010 --> 00:50:15,540
node specific or user specific handling

00:50:12,770 --> 00:50:17,550
so the I guess the Drupal community

00:50:15,540 --> 00:50:19,980
the answer is like open an issue on

00:50:17,550 --> 00:50:22,080
github engage with the maintainer and

00:50:19,980 --> 00:50:24,150
see if you can get that added to the

00:50:22,080 --> 00:50:25,770
whole extension and then everyone can

00:50:24,150 --> 00:50:29,370
benefit from it if you're just looking

00:50:25,770 --> 00:50:32,190
to add custom functionality to your own

00:50:29,370 --> 00:50:34,680
project the way I've done so for this

00:50:32,190 --> 00:50:38,760
this demonstration specifically is I've

00:50:34,680 --> 00:50:43,170
used the concept of sub context let me

00:50:38,760 --> 00:50:47,490
make this bigger here basically it again

00:50:43,170 --> 00:50:50,940
a simple PHP class that's extending this

00:50:47,490 --> 00:50:54,450
Drupal sub context base and then I've

00:50:50,940 --> 00:50:56,490
got some well here is where I did all

00:50:54,450 --> 00:50:58,260
the messy work of adding those those

00:50:56,490 --> 00:51:02,910
breakpoints and a few other things that

00:50:58,260 --> 00:51:05,730
made the demo more demo friendly but but

00:51:02,910 --> 00:51:07,770
basically you might find it's easiest to

00:51:05,730 --> 00:51:09,810
use a sub context like this to add

00:51:07,770 --> 00:51:15,420
additional Drupal functionality specific

00:51:09,810 --> 00:51:17,970
to your site sure hi how would you

00:51:15,420 --> 00:51:25,200
separate the tasks between a custom

00:51:17,970 --> 00:51:27,480
modules in your tuple side it may be it

00:51:25,200 --> 00:51:30,090
may be difficult to draw a a clear line

00:51:27,480 --> 00:51:32,460
between what behavior is expected only

00:51:30,090 --> 00:51:35,580
of the the controls and what behavior is

00:51:32,460 --> 00:51:37,560
expected of your site only and the

00:51:35,580 --> 00:51:40,520
reason I say that is to go back to those

00:51:37,560 --> 00:51:43,080
different types of testing unit testing

00:51:40,520 --> 00:51:45,120
integration testing and system testing

00:51:43,080 --> 00:51:47,190
from the perspective of system testing

00:51:45,120 --> 00:51:50,400
you don't know exactly where the

00:51:47,190 --> 00:51:54,450
boundary is between workbench moderation

00:51:50,400 --> 00:51:57,270
module and yours add-on customization of

00:51:54,450 --> 00:51:59,250
workbench moderation module with system

00:51:57,270 --> 00:52:02,130
testing you only have the system in

00:51:59,250 --> 00:52:04,680
front of you it may not be clear exactly

00:52:02,130 --> 00:52:06,060
where the boundaries are so if what

00:52:04,680 --> 00:52:08,160
we're talking about is an individual

00:52:06,060 --> 00:52:10,560
client side and it could be helpful

00:52:08,160 --> 00:52:12,720
conceptually to have a directory of

00:52:10,560 --> 00:52:14,490
feature files that are just validating

00:52:12,720 --> 00:52:17,100
what's what you think is the core

00:52:14,490 --> 00:52:18,780
behavior the control behavior separate

00:52:17,100 --> 00:52:21,150
from behavior that you've really

00:52:18,780 --> 00:52:22,490
customized that to me like that's

00:52:21,150 --> 00:52:24,390
something you could do for your own

00:52:22,490 --> 00:52:27,570
organization but on a technical level

00:52:24,390 --> 00:52:29,369
the head is just seeing a group of site

00:52:27,570 --> 00:52:31,229
it doesn't it doesn't necessarily

00:52:29,369 --> 00:52:33,180
where the boundaries are between what

00:52:31,229 --> 00:52:33,690
the behavior was when the control is

00:52:33,180 --> 00:52:36,029
enabled

00:52:33,690 --> 00:52:39,029
and what the behavior is because you've

00:52:36,029 --> 00:52:39,509
done some customization Thank You

00:52:39,029 --> 00:52:44,549
pendexter

00:52:39,509 --> 00:52:46,819
true so you mentioned a b-hat running on

00:52:44,549 --> 00:52:49,619
a production like environment yes also

00:52:46,819 --> 00:52:52,650
doing things or it's like adding users

00:52:49,619 --> 00:52:54,599
and content and things ideally you would

00:52:52,650 --> 00:52:57,299
want to like staging environment where

00:52:54,599 --> 00:52:58,920
you have your latest live content maybe

00:52:57,299 --> 00:53:01,559
you run that if you have a large

00:52:58,920 --> 00:53:03,690
database it gigs and gigs that could be

00:53:01,559 --> 00:53:05,759
a heavy operation as you know I'll run

00:53:03,690 --> 00:53:07,859
it every time testing is there an easy

00:53:05,759 --> 00:53:09,869
way short of restoring a backup and

00:53:07,859 --> 00:53:13,289
doing a reset to kind of get rid of

00:53:09,869 --> 00:53:15,630
cleanup be hats mess sure I don't import

00:53:13,289 --> 00:53:17,489
mmm so there are a number of different

00:53:15,630 --> 00:53:20,099
strategies you can implement there I've

00:53:17,489 --> 00:53:22,200
talked to some agencies that using

00:53:20,099 --> 00:53:25,170
Pantheon have an automated script that

00:53:22,200 --> 00:53:27,930
on a nightly basis copy is the the

00:53:25,170 --> 00:53:30,239
database from live down to a multi dev

00:53:27,930 --> 00:53:31,769
that exists only to have a smaller

00:53:30,239 --> 00:53:33,989
database like they copy the full

00:53:31,769 --> 00:53:35,940
database from live to the multi dev and

00:53:33,989 --> 00:53:41,579
then they run a script that just like

00:53:35,940 --> 00:53:43,589
drops a ton of nodes thereby greatly

00:53:41,579 --> 00:53:45,690
reducing the size of the database and

00:53:43,589 --> 00:53:47,819
then they and their automated tests can

00:53:45,690 --> 00:53:51,869
grab that database not so not the full

00:53:47,819 --> 00:53:53,339
live database the trimmed-down database

00:53:51,869 --> 00:53:55,700
from a multi tail so you could do that

00:53:53,339 --> 00:53:59,369
another way you can think about it is

00:53:55,700 --> 00:54:00,779
the given step is where you should do

00:53:59,369 --> 00:54:03,119
any setup that you need so if you're

00:54:00,779 --> 00:54:06,119
writing a scenario that depends on the

00:54:03,119 --> 00:54:08,190
fact that there are ten nodes on the

00:54:06,119 --> 00:54:10,710
home page then then you probably have a

00:54:08,190 --> 00:54:13,079
step like given there are ten nodes on

00:54:10,710 --> 00:54:15,390
the home page and and then you can

00:54:13,079 --> 00:54:19,200
fulfill that expectation however you

00:54:15,390 --> 00:54:22,289
want in PHP you might use like rush de

00:54:19,200 --> 00:54:24,839
Ville to generate ten new nodes you

00:54:22,289 --> 00:54:28,499
might just go through all the forms

00:54:24,839 --> 00:54:31,609
directly in HTML and make ten new nodes

00:54:28,499 --> 00:54:34,920
that way so I guess like the correct

00:54:31,609 --> 00:54:36,930
answer from the B hat perspective is the

00:54:34,920 --> 00:54:39,930
given step is where you do whatever

00:54:36,930 --> 00:54:42,479
setup you want in whatever way you want

00:54:39,930 --> 00:54:42,760
I think in practice to make it fast

00:54:42,479 --> 00:54:45,070
if you

00:54:42,760 --> 00:54:47,410
wants a production like database that's

00:54:45,070 --> 00:54:48,970
still smaller than your gigs and gigs

00:54:47,410 --> 00:54:51,130
real production data if it's probably

00:54:48,970 --> 00:54:52,570
best to just have like a dot sequel file

00:54:51,130 --> 00:54:55,330
sitting somewhere that you can grab and

00:54:52,570 --> 00:55:01,030
quickly throw into your your production

00:54:55,330 --> 00:55:03,820
like site yes so I have a question about

00:55:01,030 --> 00:55:07,330
UI testing so if it makes sense to use

00:55:03,820 --> 00:55:09,760
b-hat with UI testing over selenium or

00:55:07,330 --> 00:55:12,850
something like that how would you set up

00:55:09,760 --> 00:55:14,980
a specific test for different break

00:55:12,850 --> 00:55:16,840
points so let's just say you wanted to

00:55:14,980 --> 00:55:19,270
test on Chrome but at two different

00:55:16,840 --> 00:55:23,770
screen sizes how would you organize that

00:55:19,270 --> 00:55:29,050
yeah I think that maybe a line item in

00:55:23,770 --> 00:55:33,300
this table for different mink contexts

00:55:29,050 --> 00:55:33,300
of the the understanding of breakpoints

00:55:33,330 --> 00:55:40,570
window resizing here so so the very very

00:55:37,840 --> 00:55:44,020
simple gute doesn't have the concept of

00:55:40,570 --> 00:55:46,210
window resizing but selenium does so I

00:55:44,020 --> 00:55:48,430
think that would be that like the means

00:55:46,210 --> 00:55:55,870
through which you you conceptualize of

00:55:48,430 --> 00:55:56,930
different device breakpoints all right

00:55:55,870 --> 00:56:05,350
well thank you everyone

00:55:56,930 --> 00:56:05,350

YouTube URL: https://www.youtube.com/watch?v=jPOLB-Yen4c


