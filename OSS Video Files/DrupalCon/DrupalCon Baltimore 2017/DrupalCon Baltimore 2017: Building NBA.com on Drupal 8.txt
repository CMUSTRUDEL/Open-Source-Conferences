Title: DrupalCon Baltimore 2017: Building NBA.com on Drupal 8
Publication date: 2017-04-25
Playlist: DrupalCon Baltimore 2017
Description: 
	Turner and the NBA reimagined and relaunched their entire digital presence in under Â a year, bringing their new concept to the web, mobile, apps and connected devices in time for the 2016-2017 season. On the backend, D8 is both ingesting data and driving content, feeding those platforms, and driving the web and mobile experience. A panel of the architects and developers will discuss the project, including the technologies used (D8, Angular2, Elasticsearch) and the challenges they faced.



Not-quite-headless D8

Drupal 8 DevOps in AWS

Feeds for stats and other data

Live events and live scoring systems

Angular2 on the bleeding edge

Integration with various external data and content systems

Media importing and media asset management

Quick tips and tricks on how to architect a site this intricate and complex

Q&A



This session is for:

Developers on large projects

Site architects looking to see how others approach large projects

It will cover:

An overview of NBA.com and why Drupal 8 was chosen

How Drupal 8 interacts with other systems and stack components

A high-level overview of what was used to build the site and why they were chosen (Paragraphs module, Angular 2, etc)

Attendees will learn:

What worked (and what to avoid)

Tips and tricks on architecting a complex site build
Captions: 
	00:00:00,120 --> 00:00:03,659
all right good morning everyone and

00:00:01,380 --> 00:00:04,950
welcome to your first session of Drupal

00:00:03,659 --> 00:00:07,620
con Baltimore

00:00:04,950 --> 00:00:10,170
I'm Josh Malkin this is Toby Hagler

00:00:07,620 --> 00:00:14,969
we'll be talking about building a

00:00:10,170 --> 00:00:17,460
platform for MBA comm on Drupal 8 the

00:00:14,969 --> 00:00:20,310
theme of the latest incarnation of MBA

00:00:17,460 --> 00:00:23,550
comm was and Confused being nothing

00:00:20,310 --> 00:00:25,769
between the fan and the game and you'll

00:00:23,550 --> 00:00:30,300
see that theme repeated throughout the

00:00:25,769 --> 00:00:31,529
presentation so for this morning's

00:00:30,300 --> 00:00:33,420
session we're going to talk about four

00:00:31,529 --> 00:00:35,399
key areas that really help us meet this

00:00:33,420 --> 00:00:38,309
goal first of all it's important to know

00:00:35,399 --> 00:00:40,410
that nba.com is more than just a desktop

00:00:38,309 --> 00:00:43,910
website it's more than tablet and mobile

00:00:40,410 --> 00:00:47,120
it needs to help support other devices

00:00:43,910 --> 00:00:49,440
PlayStation and Roku Apple TV Smart TVs

00:00:47,120 --> 00:00:51,329
it's all about providing a very

00:00:49,440 --> 00:00:56,070
consistent digital experience for the

00:00:51,329 --> 00:00:58,530
fan and content is king on nba.com we

00:00:56,070 --> 00:01:02,820
have to integrate live scoring data

00:00:58,530 --> 00:01:06,210
editorial content live video edited down

00:01:02,820 --> 00:01:08,670
video clips and of course the video is

00:01:06,210 --> 00:01:12,390
very very crucial it's everywhere on the

00:01:08,670 --> 00:01:14,280
site yeah video and content it needs to

00:01:12,390 --> 00:01:15,810
be something that editors can be able to

00:01:14,280 --> 00:01:17,580
bring all of these things in a very

00:01:15,810 --> 00:01:19,110
fast-paced and efficient way

00:01:17,580 --> 00:01:21,509
editors have to be able to knock down

00:01:19,110 --> 00:01:23,610
the wall between the fan and the game

00:01:21,509 --> 00:01:26,610
and gets the content to them as quickly

00:01:23,610 --> 00:01:31,700
as possible and serving something like

00:01:26,610 --> 00:01:34,979
basketball the site has to be fast from

00:01:31,700 --> 00:01:37,560
editorial performance to front-end

00:01:34,979 --> 00:01:40,259
performance and server side Drupal

00:01:37,560 --> 00:01:46,320
performance everything has to get there

00:01:40,259 --> 00:01:47,850
as quickly as possible so there's a lot

00:01:46,320 --> 00:01:50,189
of different pieces that make up nba.com

00:01:47,850 --> 00:01:52,530
there's live scores there's game and

00:01:50,189 --> 00:01:55,799
team data there's editorial content

00:01:52,530 --> 00:01:59,130
there's video in that those are crucial

00:01:55,799 --> 00:02:00,750
things to the website there are some

00:01:59,130 --> 00:02:02,579
services that are just going to handle

00:02:00,750 --> 00:02:06,329
these things better than Drupal can like

00:02:02,579 --> 00:02:08,310
live scoring video processing plus

00:02:06,329 --> 00:02:10,800
that's just kind of where it lives as

00:02:08,310 --> 00:02:12,069
for some of this stuff originates a lot

00:02:10,800 --> 00:02:13,599
of this stuff gets reused

00:02:12,069 --> 00:02:16,269
it's indicated through other Turner

00:02:13,599 --> 00:02:17,920
systems so it's important that those

00:02:16,269 --> 00:02:19,810
things continue to live where they've

00:02:17,920 --> 00:02:21,219
always lived because it's where other

00:02:19,810 --> 00:02:24,209
systems are going to need it besides

00:02:21,219 --> 00:02:27,510
Drupal but the nice thing is Drupal 8

00:02:24,209 --> 00:02:32,319
specifically plays really really nicely

00:02:27,510 --> 00:02:34,480
as a multi-tiered content stack it works

00:02:32,319 --> 00:02:35,980
really well in the content ecosystem it

00:02:34,480 --> 00:02:38,739
doesn't necessarily mean that everything

00:02:35,980 --> 00:02:40,750
has to be managed in Drupal it can play

00:02:38,739 --> 00:02:43,030
well with others it's a good team

00:02:40,750 --> 00:02:45,370
players one of the was one of the themes

00:02:43,030 --> 00:02:47,079
of Drupal 8 was that getting off of the

00:02:45,370 --> 00:02:49,090
Drupal island when we try to integrate

00:02:47,079 --> 00:02:50,709
with Symphony trying to incorporate

00:02:49,090 --> 00:02:51,969
other things and so that's just one of

00:02:50,709 --> 00:02:54,129
the things that Drupal 8 does really

00:02:51,969 --> 00:02:57,040
well so we try to let Drupal play to its

00:02:54,129 --> 00:02:58,810
strengths so all this is designed to

00:02:57,040 --> 00:03:00,669
seamlessly bring the game closer to the

00:02:58,810 --> 00:03:02,620
fan regardless before the content

00:03:00,669 --> 00:03:04,090
originates or lives which we're going to

00:03:02,620 --> 00:03:09,129
show through the rest of this

00:03:04,090 --> 00:03:10,810
presentation so yeah so what are the

00:03:09,129 --> 00:03:13,079
initial thoughts was you know we're

00:03:10,810 --> 00:03:15,129
going to do decoupled or headless Drupal

00:03:13,079 --> 00:03:17,259
we knew we were going to have to rely

00:03:15,129 --> 00:03:19,509
heavily on Drupal themed components

00:03:17,259 --> 00:03:23,799
though so it made sense to let Drupal

00:03:19,509 --> 00:03:25,269
take at least some of the theme work you

00:03:23,799 --> 00:03:28,569
know just as much as the site does it

00:03:25,269 --> 00:03:30,189
knew about anyway in most cases Drupal

00:03:28,569 --> 00:03:32,979
is going to be responsible for rendering

00:03:30,189 --> 00:03:34,889
about 60 or 70 percent of any given page

00:03:32,979 --> 00:03:37,449
on the site and so you see in this slide

00:03:34,889 --> 00:03:39,310
it's kind of color-coded to where maybe

00:03:37,449 --> 00:03:43,030
some of content is going to originate

00:03:39,310 --> 00:03:43,859
from so the render stack basically looks

00:03:43,030 --> 00:03:47,769
like this

00:03:43,859 --> 00:03:50,049
Drupal renders the the content on the

00:03:47,769 --> 00:03:53,349
page that it knows about it renders this

00:03:50,049 --> 00:03:55,719
in origin then the page travels through

00:03:53,349 --> 00:03:57,669
the CDN the CDN is going to be

00:03:55,719 --> 00:04:00,340
responsible for merging edge site

00:03:57,669 --> 00:04:02,919
include fragments on the edge and hand

00:04:00,340 --> 00:04:05,409
that on in a very efficient manner and

00:04:02,919 --> 00:04:07,810
then in live content other external

00:04:05,409 --> 00:04:10,659
content other external data is going to

00:04:07,810 --> 00:04:15,159
be assembled into the page you know

00:04:10,659 --> 00:04:16,840
using angular angular 2 apps also you

00:04:15,159 --> 00:04:19,359
want to keep in mind the fact that PHP

00:04:16,840 --> 00:04:22,150
is essentially single threaded so the

00:04:19,359 --> 00:04:24,310
use of ESI and angular 2 to help let us

00:04:22,150 --> 00:04:25,190
assemble these things let's just do so

00:04:24,310 --> 00:04:27,850
in a very

00:04:25,190 --> 00:04:30,020
effectively in a very effective manner

00:04:27,850 --> 00:04:33,020
we're able to use multi-threading

00:04:30,020 --> 00:04:34,160
essentially since PHP is responsible

00:04:33,020 --> 00:04:36,590
maybe for building some of these other

00:04:34,160 --> 00:04:38,510
fragments at different times were able

00:04:36,590 --> 00:04:43,430
to offload a lot of that out of the

00:04:38,510 --> 00:04:46,940
initial thread all right and we started

00:04:43,430 --> 00:04:51,080
developing Drupal guck or Drupal to come

00:04:46,940 --> 00:04:55,640
mba.com on Drupal 8 in late 2015 early

00:04:51,080 --> 00:05:01,070
2016 and none of the technologies we

00:04:55,640 --> 00:05:03,590
wanted to use were actually done so the

00:05:01,070 --> 00:05:05,390
theme of this slide is pretty much

00:05:03,590 --> 00:05:09,260
nothing between us and abject failure

00:05:05,390 --> 00:05:12,650
because Drupal wasn't even in alpha yet

00:05:09,260 --> 00:05:13,970
when we got started PHP 7 was not quite

00:05:12,650 --> 00:05:17,720
out of the gate

00:05:13,970 --> 00:05:25,040
angular 2 was in alpha and had some big

00:05:17,720 --> 00:05:26,600
breaking changes after that and AWS

00:05:25,040 --> 00:05:32,540
wasn't playing great with docker yet at

00:05:26,600 --> 00:05:35,270
the time and the modules for Redis and

00:05:32,540 --> 00:05:39,890
some other things weren't ready for

00:05:35,270 --> 00:05:42,440
Drupal yet either at the time so it was

00:05:39,890 --> 00:05:45,350
very very interesting world developing

00:05:42,440 --> 00:05:47,240
while all of the technologies we were

00:05:45,350 --> 00:05:52,490
building on we're also being developed

00:05:47,240 --> 00:05:53,810
yeah so with all of these technologies

00:05:52,490 --> 00:05:55,280
now that now that we've got these in

00:05:53,810 --> 00:05:56,990
place we kind of work through the kinks

00:05:55,280 --> 00:05:59,900
of getting things things to work

00:05:56,990 --> 00:06:01,760
together that let us focus on on the

00:05:59,900 --> 00:06:03,950
editorial experience and the content

00:06:01,760 --> 00:06:05,930
management aspects of building in Viacom

00:06:03,950 --> 00:06:08,540
so that way we were able to bring a

00:06:05,930 --> 00:06:11,510
finely curated game experience to the

00:06:08,540 --> 00:06:13,400
fan so it's important to note that we

00:06:11,510 --> 00:06:15,890
didn't want to limit ourselves to just

00:06:13,400 --> 00:06:19,550
the traditional page or ever there

00:06:15,890 --> 00:06:22,940
quotes so much of that is it you know so

00:06:19,550 --> 00:06:26,450
much of what's on NBA is fluid in that

00:06:22,940 --> 00:06:29,600
what Drupal renders initially and what

00:06:26,450 --> 00:06:32,210
the final page is that fans receive are

00:06:29,600 --> 00:06:33,430
not going to be the same thing there's

00:06:32,210 --> 00:06:35,660
going to be continuing and continuing

00:06:33,430 --> 00:06:36,750
enhancements to that page along the

00:06:35,660 --> 00:06:40,380
stack

00:06:36,750 --> 00:06:42,210
for rendering that content the site's

00:06:40,380 --> 00:06:45,680
not made up of you know a traditional

00:06:42,210 --> 00:06:48,660
set of node pages and views and terms

00:06:45,680 --> 00:06:50,640
literally anything should be able to be

00:06:48,660 --> 00:06:52,860
placed anywhere that make sense on the

00:06:50,640 --> 00:06:54,560
site given the context of what the fan

00:06:52,860 --> 00:06:57,590
is looking at at that given time

00:06:54,560 --> 00:07:00,660
regardless of where it comes from and

00:06:57,590 --> 00:07:02,190
that really is the the in keeping with

00:07:00,660 --> 00:07:04,200
the themes that nothing should be

00:07:02,190 --> 00:07:06,510
standing between the fan and getting to

00:07:04,200 --> 00:07:11,310
the content no matter where it comes

00:07:06,510 --> 00:07:13,200
from so to do this one of the things

00:07:11,310 --> 00:07:15,750
that was one of the tools that was in

00:07:13,200 --> 00:07:19,050
our arsenal is you know we made heavy

00:07:15,750 --> 00:07:20,370
use of the paragraphs module in a lot of

00:07:19,050 --> 00:07:22,080
ways this frees up the editors from

00:07:20,370 --> 00:07:24,419
having to think about things like

00:07:22,080 --> 00:07:26,970
templates and layout and being

00:07:24,419 --> 00:07:29,820
constrained to those you know very

00:07:26,970 --> 00:07:30,990
limiting concepts in a lot of ways it

00:07:29,820 --> 00:07:32,850
gives them a lot of power to add

00:07:30,990 --> 00:07:35,280
whatever piece of content makes sense

00:07:32,850 --> 00:07:38,730
time so paragraphs leads to

00:07:35,280 --> 00:07:41,729
componentized content these components

00:07:38,730 --> 00:07:45,180
then let us render pieces of content

00:07:41,729 --> 00:07:49,260
either directly into the page or to

00:07:45,180 --> 00:07:50,700
reuse later as ESI fragments so now each

00:07:49,260 --> 00:07:52,830
piece of content can be rendered at the

00:07:50,700 --> 00:07:54,240
appropriate point in the page assembly

00:07:52,830 --> 00:07:57,229
whether it's you know Drupal rendering

00:07:54,240 --> 00:07:59,310
the page or ESI tacking that on later

00:07:57,229 --> 00:08:01,620
you know pulling things in with

00:07:59,310 --> 00:08:04,340
JavaScript fragments so there's a

00:08:01,620 --> 00:08:07,320
there's very much this modular layout

00:08:04,340 --> 00:08:10,669
concept that you can mix and match

00:08:07,320 --> 00:08:15,150
content at will based on how content

00:08:10,669 --> 00:08:18,630
relates to each other so the next big

00:08:15,150 --> 00:08:23,940
concept that we had to come up with for

00:08:18,630 --> 00:08:27,720
mba.com was our content collections our

00:08:23,940 --> 00:08:30,380
editors work very very fast to keep up

00:08:27,720 --> 00:08:34,710
with the games and they can't

00:08:30,380 --> 00:08:37,710
meticulously go through and curate every

00:08:34,710 --> 00:08:40,320
collection of content they want but they

00:08:37,710 --> 00:08:43,020
don't want to lose the power to do so so

00:08:40,320 --> 00:08:45,089
we developed the content collections

00:08:43,020 --> 00:08:49,740
which kind of combines the functionality

00:08:45,089 --> 00:08:50,250
of a node queue and views the editors

00:08:49,740 --> 00:08:57,420
are

00:08:50,250 --> 00:09:00,870
able to select a number of or in number

00:08:57,420 --> 00:09:03,570
of content items they want pins to the

00:09:00,870 --> 00:09:06,390
top of a collection and then which is

00:09:03,570 --> 00:09:07,880
kind of the note queue type part and

00:09:06,390 --> 00:09:11,640
then the views type functionality

00:09:07,880 --> 00:09:14,910
they're then able below that to say and

00:09:11,640 --> 00:09:18,620
I also want to load anything that's

00:09:14,910 --> 00:09:22,200
tagged with these four taxonomy terms

00:09:18,620 --> 00:09:24,240
but maybe there's a sponsored section of

00:09:22,200 --> 00:09:27,150
content they don't want to include and

00:09:24,240 --> 00:09:30,060
it can actually exclude other content or

00:09:27,150 --> 00:09:31,640
other taxonomy terms as well so they're

00:09:30,060 --> 00:09:34,410
able to get really fine grained control

00:09:31,640 --> 00:09:37,530
but still have the content show up as

00:09:34,410 --> 00:09:46,560
its published and not have to be

00:09:37,530 --> 00:09:48,630
manually hand-holding a node queue and

00:09:46,560 --> 00:09:50,940
then video of course is very important

00:09:48,630 --> 00:09:53,700
and this is one of those places where we

00:09:50,940 --> 00:09:58,260
had to have Drupal be a good neighbor to

00:09:53,700 --> 00:10:00,900
other systems Turner Broadcasting is at

00:09:58,260 --> 00:10:03,240
its core a broadcast company we handle

00:10:00,900 --> 00:10:06,750
video we handle lots of it we have

00:10:03,240 --> 00:10:09,660
existing systems that handle video so

00:10:06,750 --> 00:10:11,490
our challenge here was to make sure the

00:10:09,660 --> 00:10:14,850
Drupal can hold onto some of the

00:10:11,490 --> 00:10:18,540
metadata about video and make the Drupal

00:10:14,850 --> 00:10:21,120
ecosystem aware that a video exists but

00:10:18,540 --> 00:10:24,750
play nice with that being handled with

00:10:21,120 --> 00:10:29,480
our outside encoding systems and storage

00:10:24,750 --> 00:10:32,190
on our high availability CDN because

00:10:29,480 --> 00:10:34,080
honestly the scale of video that we're

00:10:32,190 --> 00:10:37,920
serving out Drupal would fall over if it

00:10:34,080 --> 00:10:41,100
had to handle all of it that's

00:10:37,920 --> 00:10:44,940
integrations um League Passyunk rich I

00:10:41,100 --> 00:10:48,540
just just add I forgot what we were

00:10:44,940 --> 00:10:50,670
gonna say about that so yeah so so there

00:10:48,540 --> 00:10:53,190
are several types of videos that they

00:10:50,670 --> 00:10:55,200
come into plays there's other a lot of

00:10:53,190 --> 00:10:55,730
video clips I mean man you see that you

00:10:55,200 --> 00:10:57,769
know

00:10:55,730 --> 00:10:59,360
that foul last night that was terrible

00:10:57,769 --> 00:11:00,889
you know it was just that that kind of

00:10:59,360 --> 00:11:05,269
thing that's the thing that fans want to

00:11:00,889 --> 00:11:07,040
see all the way to watching watching

00:11:05,269 --> 00:11:09,980
live games this was actually last

00:11:07,040 --> 00:11:13,040
night's game in mosaic view when you can

00:11:09,980 --> 00:11:15,529
watch the game you can keep the camera

00:11:13,040 --> 00:11:20,209
on the leader for each player for each

00:11:15,529 --> 00:11:23,209
team and get you know even the goal shot

00:11:20,209 --> 00:11:25,100
right so you can you can watch video in

00:11:23,209 --> 00:11:28,010
a lot different different ways all the

00:11:25,100 --> 00:11:31,760
way to League Pass which is a pay

00:11:28,010 --> 00:11:33,949
service that NPA provides I think

00:11:31,760 --> 00:11:36,290
there's some some television cable

00:11:33,949 --> 00:11:38,389
entitlements involved and so all of that

00:11:36,290 --> 00:11:41,570
integrates to let the fan truly get

00:11:38,389 --> 00:11:43,190
immersed in video in keeping with you

00:11:41,570 --> 00:11:49,940
know having nothing between the fan and

00:11:43,190 --> 00:11:52,730
the game so in order to bring all of

00:11:49,940 --> 00:11:54,110
this content to the fan one of the most

00:11:52,730 --> 00:11:56,269
important things is the editorial

00:11:54,110 --> 00:11:58,760
experience so basketball games are

00:11:56,269 --> 00:12:01,730
fast-moving and the face of the game can

00:11:58,760 --> 00:12:04,310
change in a split second so just as live

00:12:01,730 --> 00:12:06,680
games can change momentum the editorial

00:12:04,310 --> 00:12:08,959
staff has to kind of keep pace just as

00:12:06,680 --> 00:12:10,760
fast right and so really nothing should

00:12:08,959 --> 00:12:13,579
stand between the editors and bringing

00:12:10,760 --> 00:12:15,199
the game to the fans so to that point we

00:12:13,579 --> 00:12:17,120
dedicated a pretty serious chunk of

00:12:15,199 --> 00:12:20,420
manpower to the editorial experience

00:12:17,120 --> 00:12:23,060
itself not just to the front the fan

00:12:20,420 --> 00:12:25,490
facings website but to the editorial

00:12:23,060 --> 00:12:28,430
experience so we had we even had

00:12:25,490 --> 00:12:31,060
developers sitting in a control room at

00:12:28,430 --> 00:12:34,279
Twitter during your during launch

00:12:31,060 --> 00:12:35,959
whereas these games are going on and as

00:12:34,279 --> 00:12:38,449
things are occurring you were able to

00:12:35,959 --> 00:12:40,459
react things in real time to help make

00:12:38,449 --> 00:12:43,100
improvements on the fly so in many ways

00:12:40,459 --> 00:12:47,149
the editorial UX was just as key to the

00:12:43,100 --> 00:12:49,130
project as the website itself so you

00:12:47,149 --> 00:12:50,389
know editorial experiences it's it's so

00:12:49,130 --> 00:12:52,970
important that we're still making

00:12:50,389 --> 00:12:56,440
continuous improvements just as we keep

00:12:52,970 --> 00:12:56,440
adding more features to the website

00:12:59,290 --> 00:13:03,790
so so but you know one of the one of the

00:13:01,570 --> 00:13:05,080
key things that we that we use for the

00:13:03,790 --> 00:13:08,170
editorial experience of course is the

00:13:05,080 --> 00:13:10,090
use of paragraphs for layout so

00:13:08,170 --> 00:13:11,440
paragraphs you know I don't know how

00:13:10,090 --> 00:13:13,600
many people are actually familiar with

00:13:11,440 --> 00:13:16,360
the paragraphs module and use it for a

00:13:13,600 --> 00:13:18,850
lot of content layout but it's pretty

00:13:16,360 --> 00:13:21,180
powerful so it's essentially you think

00:13:18,850 --> 00:13:24,040
of it as a container of field of data

00:13:21,180 --> 00:13:26,980
that lets editors pick from a variety of

00:13:24,040 --> 00:13:30,400
content types that they can swap in and

00:13:26,980 --> 00:13:31,570
out on the page so yeah this is one of

00:13:30,400 --> 00:13:33,850
those things that you know you have a

00:13:31,570 --> 00:13:36,010
lot of field of data you know and lets

00:13:33,850 --> 00:13:37,870
you based on the context of the page

00:13:36,010 --> 00:13:41,710
you're trying to build you can arrange

00:13:37,870 --> 00:13:43,600
things on a one-off basis because

00:13:41,710 --> 00:13:46,000
editors really shouldn't care what an

00:13:43,600 --> 00:13:47,200
entity's type is they just want it and

00:13:46,000 --> 00:13:49,630
they want to be able to drop it in

00:13:47,200 --> 00:13:52,420
quickly so paragraphs lets you drop

00:13:49,630 --> 00:13:54,940
content in you can nest paragraphs if

00:13:52,420 --> 00:13:58,630
you want you can drag and move things

00:13:54,940 --> 00:14:00,760
around but essentially it just lets edit

00:13:58,630 --> 00:14:03,730
errs have that content at their

00:14:00,760 --> 00:14:05,680
fingertips we even used a lot of

00:14:03,730 --> 00:14:08,110
paragraph fields for configurations so

00:14:05,680 --> 00:14:10,330
each individual block on the website for

00:14:08,110 --> 00:14:13,150
instance you know it can have a lot of

00:14:10,330 --> 00:14:15,790
tweaks made for it letting them you know

00:14:13,150 --> 00:14:18,310
rapidly adapt to the contents needs a

00:14:15,790 --> 00:14:20,080
lot of people asking why no panels well

00:14:18,310 --> 00:14:22,270
quite simply it's just because it wasn't

00:14:20,080 --> 00:14:25,360
ready in early 2016 for what we wanted

00:14:22,270 --> 00:14:28,090
to do but beyond that the editorial

00:14:25,360 --> 00:14:33,310
staff wanted a very simple and minimal

00:14:28,090 --> 00:14:35,200
UI they desired speed over power because

00:14:33,310 --> 00:14:36,610
that was yeah that's just kind of the

00:14:35,200 --> 00:14:42,910
ultimate thing that editorial staff

00:14:36,610 --> 00:14:46,210
needs so in keeping with this fast pace

00:14:42,910 --> 00:14:48,160
right editors need media at their

00:14:46,210 --> 00:14:51,070
fingertips and so we developed a couple

00:14:48,160 --> 00:14:53,800
of things that were really powerful

00:14:51,070 --> 00:14:57,130
tools one of which was the content bin

00:14:53,800 --> 00:14:59,170
which will we'll see in a second and the

00:14:57,130 --> 00:15:03,970
ability to embed media and syndicate

00:14:59,170 --> 00:15:05,440
content so in this screenshot which you

00:15:03,970 --> 00:15:08,320
see here is just a typical note edit

00:15:05,440 --> 00:15:10,760
page we have a content bin

00:15:08,320 --> 00:15:12,490
it's a drawer that slides in and out

00:15:10,760 --> 00:15:16,910
just using a little bit of JavaScript

00:15:12,490 --> 00:15:20,710
but what's in that content bin he uses

00:15:16,910 --> 00:15:23,060
views in to be able to search for

00:15:20,710 --> 00:15:25,610
different media entities and other

00:15:23,060 --> 00:15:27,950
pieces of content so just using a little

00:15:25,610 --> 00:15:30,140
bit of custom theme magic we're able to

00:15:27,950 --> 00:15:32,930
kind of show and hide the content bin on

00:15:30,140 --> 00:15:36,650
any node edit form and then just using

00:15:32,930 --> 00:15:39,980
super simple drag-and-drop API html5

00:15:36,650 --> 00:15:42,590
markup we're able to make those media

00:15:39,980 --> 00:15:45,520
entities draggable out of the content

00:15:42,590 --> 00:15:49,310
bin and directly into the WYSIWYG so

00:15:45,520 --> 00:15:51,020
there's no custom WYSIWYG plugins

00:15:49,310 --> 00:15:52,520
there's nothing really that all that

00:15:51,020 --> 00:15:56,180
fancy it's just it just kind of worked

00:15:52,520 --> 00:16:00,230
because of the dragon drop api and then

00:15:56,180 --> 00:16:02,840
we make use of the embed module the

00:16:00,230 --> 00:16:07,910
embed module and the embed entities

00:16:02,840 --> 00:16:09,170
module both will let you embed any sort

00:16:07,910 --> 00:16:12,670
of entity on the website whether it's

00:16:09,170 --> 00:16:15,950
another node a media file or whatever

00:16:12,670 --> 00:16:17,690
and it keeps those things as fueled the

00:16:15,950 --> 00:16:19,310
data so that even though you're

00:16:17,690 --> 00:16:21,950
embedding things directly into the

00:16:19,310 --> 00:16:23,600
WYSIWYG it's completely possible it's

00:16:21,950 --> 00:16:25,400
not just dropping a bunch of markup in

00:16:23,600 --> 00:16:28,130
there so you're able to an editor is

00:16:25,400 --> 00:16:35,240
able to find what they want drag it into

00:16:28,130 --> 00:16:37,760
the WYSIWYG and in go what's more is the

00:16:35,240 --> 00:16:39,440
content bin has another tab to let you

00:16:37,760 --> 00:16:41,450
search for content upstream it doesn't

00:16:39,440 --> 00:16:42,800
necessarily have to live in Drupal so

00:16:41,450 --> 00:16:45,230
one of the things we did was the same

00:16:42,800 --> 00:16:47,270
content bin can now allow an editor to

00:16:45,230 --> 00:16:50,060
search for content in an external media

00:16:47,270 --> 00:16:52,850
management system something that you

00:16:50,060 --> 00:16:55,670
know and you know imports from what Yeti

00:16:52,850 --> 00:16:58,240
images Yeti is a really good example so

00:16:55,670 --> 00:17:01,580
you know a lot of like a lot of upstream

00:16:58,240 --> 00:17:04,910
syndication systems let you know so you

00:17:01,580 --> 00:17:08,480
can you can search based on keywords and

00:17:04,910 --> 00:17:10,730
a few other things so you you get a

00:17:08,480 --> 00:17:13,699
paginate it overlay that lets you choose

00:17:10,730 --> 00:17:15,709
which images or images to import when

00:17:13,699 --> 00:17:18,830
you import these the they're made

00:17:15,709 --> 00:17:20,770
immediately available in Drupal so when

00:17:18,830 --> 00:17:22,940
you when you select this awesome dunk

00:17:20,770 --> 00:17:23,920
you import it it's going to be at the

00:17:22,940 --> 00:17:27,280
top of your content

00:17:23,920 --> 00:17:30,490
right away the nice thing is because the

00:17:27,280 --> 00:17:31,960
system editors never actually lose their

00:17:30,490 --> 00:17:33,580
place so it's not like they're having to

00:17:31,960 --> 00:17:35,440
go and fetch something else in another

00:17:33,580 --> 00:17:37,300
page and then has to come back and save

00:17:35,440 --> 00:17:39,670
changes it's all it's all happening

00:17:37,300 --> 00:17:41,290
right there in the interface so these

00:17:39,670 --> 00:17:44,170
media items they get pulled in is just

00:17:41,290 --> 00:17:46,000
regular media file entities directly in

00:17:44,170 --> 00:17:48,940
Drupal so that way the next time you

00:17:46,000 --> 00:17:53,470
need it on another story it's already in

00:17:48,940 --> 00:17:57,610
Drupal in the content bin alright so we

00:17:53,470 --> 00:18:02,050
also started very early on with angular

00:17:57,610 --> 00:18:05,500
2 game pages in particular need a lot of

00:18:02,050 --> 00:18:08,350
data from a lot of places and it doesn't

00:18:05,500 --> 00:18:10,780
make sense to grab live game data that's

00:18:08,350 --> 00:18:12,850
stored in an external system pipe it

00:18:10,780 --> 00:18:15,180
through Drupal on every page load and

00:18:12,850 --> 00:18:19,300
push it out to the users it's going to

00:18:15,180 --> 00:18:21,490
take us forever so we went back and

00:18:19,300 --> 00:18:24,850
forth with a bunch of Inc front-end

00:18:21,490 --> 00:18:30,360
frameworks ended up settling on angular

00:18:24,850 --> 00:18:34,120
2 which we briefly regretted early on

00:18:30,360 --> 00:18:36,910
until they got to release candidate 6

00:18:34,120 --> 00:18:39,100
which fixed all of the problems that we

00:18:36,910 --> 00:18:43,540
had been talking with the angular team

00:18:39,100 --> 00:18:46,780
about mostly that it was early on pretty

00:18:43,540 --> 00:18:50,650
much monolithic single page huge app

00:18:46,780 --> 00:18:54,670
focused but it just did a really good

00:18:50,650 --> 00:18:56,700
job of being able to pull content from

00:18:54,670 --> 00:18:59,680
our structured data systems for live

00:18:56,700 --> 00:19:03,490
data being able to get updated content

00:18:59,680 --> 00:19:05,710
from Drupal being able to go out to our

00:19:03,490 --> 00:19:08,170
other media systems to grab video

00:19:05,710 --> 00:19:13,330
content it just worked really well for

00:19:08,170 --> 00:19:15,460
us and the Redux model of data storage

00:19:13,330 --> 00:19:17,860
mean I both need to talk a little bit on

00:19:15,460 --> 00:19:19,630
this one so what are the one of the

00:19:17,860 --> 00:19:21,730
things that you run into anytime you're

00:19:19,630 --> 00:19:23,860
dealing with live data especially you

00:19:21,730 --> 00:19:26,260
know client-side assembly fetching live

00:19:23,860 --> 00:19:27,580
data can be very taxing so until a score

00:19:26,260 --> 00:19:29,500
changes there's no need to keep

00:19:27,580 --> 00:19:31,060
requesting the same data over and over

00:19:29,500 --> 00:19:32,980
again just because a user's

00:19:31,060 --> 00:19:35,180
click-through to another game right so

00:19:32,980 --> 00:19:38,870
the the data that you

00:19:35,180 --> 00:19:41,300
you pull in using angular gets put into

00:19:38,870 --> 00:19:42,680
a local data store this data store is

00:19:41,300 --> 00:19:46,520
going to travel with you throughout the

00:19:42,680 --> 00:19:48,110
site so angular stores this data in

00:19:46,520 --> 00:19:51,080
local storage it carries it across

00:19:48,110 --> 00:19:53,630
multiple pages it also shares the same

00:19:51,080 --> 00:19:55,160
data with other angular apps so if if

00:19:53,630 --> 00:19:57,800
you're on a if you're on the home page

00:19:55,160 --> 00:19:59,990
for instance it's going to load up the

00:19:57,800 --> 00:20:02,150
entire schedule of games for that day

00:19:59,990 --> 00:20:04,370
along with any scoring data that it

00:20:02,150 --> 00:20:07,970
knows about then when you go to a game

00:20:04,370 --> 00:20:10,100
you go to the Thunder game and you want

00:20:07,970 --> 00:20:13,520
to watch that video the same data is

00:20:10,100 --> 00:20:14,900
carried over for that that game schedule

00:20:13,520 --> 00:20:16,460
information as well as the scoring

00:20:14,900 --> 00:20:18,440
information and so if you have multiple

00:20:16,460 --> 00:20:20,720
apps on the side or even multiple apps

00:20:18,440 --> 00:20:22,430
on the same page they're all sharing the

00:20:20,720 --> 00:20:24,670
same bit of data so there's no need to

00:20:22,430 --> 00:20:28,520
go and fetch it every single time

00:20:24,670 --> 00:20:30,620
also when one app says hey the scores

00:20:28,520 --> 00:20:32,180
change let me update the score then it's

00:20:30,620 --> 00:20:37,040
immediately available to all any other

00:20:32,180 --> 00:20:39,320
angular app on the page so that's just

00:20:37,040 --> 00:20:41,000
one more way that this kind of keeps the

00:20:39,320 --> 00:20:43,220
fan closer to the to the live game

00:20:41,000 --> 00:20:52,640
experience and allows them to seamlessly

00:20:43,220 --> 00:20:53,960
track games say I think we've mostly

00:20:52,640 --> 00:20:57,980
covered right here but here's just an

00:20:53,960 --> 00:21:02,420
example of where the Redux model comes

00:20:57,980 --> 00:21:04,940
into play if you look at the left hand

00:21:02,420 --> 00:21:08,270
side of that screenshot this is a game

00:21:04,940 --> 00:21:13,160
page playing a live game and when the

00:21:08,270 --> 00:21:15,710
user came into this page the schedule

00:21:13,160 --> 00:21:17,720
was able to render very quickly on this

00:21:15,710 --> 00:21:20,090
new page load because all the data to

00:21:17,720 --> 00:21:21,410
build it was already in the local data

00:21:20,090 --> 00:21:25,970
store we didn't have to make any

00:21:21,410 --> 00:21:27,860
additional API or data calls because the

00:21:25,970 --> 00:21:31,370
page already had the information it

00:21:27,860 --> 00:21:34,640
needed and that also means that when you

00:21:31,370 --> 00:21:39,500
have that brief flash of out of date

00:21:34,640 --> 00:21:42,170
data on a new rendering that it's a

00:21:39,500 --> 00:21:44,840
couple seconds old instead of however

00:21:42,170 --> 00:21:47,410
old the cached version of your page on

00:21:44,840 --> 00:21:47,410
the server is

00:21:48,720 --> 00:21:54,750
okay so this actually gets into the part

00:21:51,250 --> 00:21:57,550
wall I'll be speaking a little bit more

00:21:54,750 --> 00:22:00,000
early on we started on this before

00:21:57,550 --> 00:22:04,240
Drupal started the whole API first

00:22:00,000 --> 00:22:06,670
initiative and early Drupal 8 didn't

00:22:04,240 --> 00:22:13,060
have a whole lot available when it came

00:22:06,670 --> 00:22:15,280
to powerful api's so and we also decided

00:22:13,060 --> 00:22:17,860
we didn't want sequel queries getting

00:22:15,280 --> 00:22:22,360
between the fan in the game and

00:22:17,860 --> 00:22:27,580
generating our content so we have set it

00:22:22,360 --> 00:22:31,030
up so that we actually Deema normalize

00:22:27,580 --> 00:22:34,150
all of our data as it's updated and push

00:22:31,030 --> 00:22:37,470
it into an elasticsearch instance which

00:22:34,150 --> 00:22:40,420
is the backing store for our content API

00:22:37,470 --> 00:22:43,150
this allows us to build as many

00:22:40,420 --> 00:22:48,220
different micro-services as we want and

00:22:43,150 --> 00:22:52,810
need for various types of api's we have

00:22:48,220 --> 00:22:56,920
a standard JSON output content API that

00:22:52,810 --> 00:23:00,760
we built and actually have already

00:22:56,920 --> 00:23:03,190
created our version API version 2 API

00:23:00,760 --> 00:23:06,400
which sits alongside it and this has

00:23:03,190 --> 00:23:09,520
also allowed other teams within our

00:23:06,400 --> 00:23:14,010
development group to spin a Facebook

00:23:09,520 --> 00:23:20,880
instant articles service in nodejs a an

00:23:14,010 --> 00:23:24,850
apple News Service and Google amp

00:23:20,880 --> 00:23:27,700
service all without bloating our Drupal

00:23:24,850 --> 00:23:29,200
codebase and all of these things can

00:23:27,700 --> 00:23:33,460
depend on the denormalized data

00:23:29,200 --> 00:23:37,530
structure in elasticsearch and get very

00:23:33,460 --> 00:23:40,120
fast results and because Drupal is

00:23:37,530 --> 00:23:42,430
updating the data in elasticsearch every

00:23:40,120 --> 00:23:44,550
time there's a change it stays up to

00:23:42,430 --> 00:23:44,550
date

00:23:47,370 --> 00:23:54,520
all right and then the cloud we actually

00:23:50,650 --> 00:23:58,300
this is was our first foray into hosting

00:23:54,520 --> 00:24:04,180
anything in AWS and our first foray into

00:23:58,300 --> 00:24:09,070
docker and previously within Turner we

00:24:04,180 --> 00:24:16,180
were very siloed and we had a database

00:24:09,070 --> 00:24:17,950
group we have server ops we have other

00:24:16,180 --> 00:24:20,860
operations teams we get a few people

00:24:17,950 --> 00:24:25,210
that used to be siloed for that in here

00:24:20,860 --> 00:24:30,510
Jane but we've moved more towards a

00:24:25,210 --> 00:24:33,310
DevOps infrastructure and workflow and

00:24:30,510 --> 00:24:35,410
going into docker n AWS has really

00:24:33,310 --> 00:24:40,020
allowed us to become the masters of our

00:24:35,410 --> 00:24:44,230
own destiny and respond quickly and

00:24:40,020 --> 00:24:47,380
really tune the infrastructure of the

00:24:44,230 --> 00:24:49,720
site and be able to develop both the

00:24:47,380 --> 00:24:58,450
infrastructure and the code to work with

00:24:49,720 --> 00:25:00,310
each other and so estate doctor it

00:24:58,450 --> 00:25:03,400
allows us to run the same Drupal

00:25:00,310 --> 00:25:06,790
infrastructure with the same version of

00:25:03,400 --> 00:25:10,500
Linux the same version of PHP the same

00:25:06,790 --> 00:25:12,760
version of nginx everything on the local

00:25:10,500 --> 00:25:15,520
development stack as we're running in

00:25:12,760 --> 00:25:21,730
production we don't have to worry about

00:25:15,520 --> 00:25:23,910
a developer's npm version being older or

00:25:21,730 --> 00:25:28,420
newer than the one we have in prod and

00:25:23,910 --> 00:25:30,520
it will really allows us to miss some of

00:25:28,420 --> 00:25:33,880
those or not even have to think about

00:25:30,520 --> 00:25:35,830
some of those version mismatches you get

00:25:33,880 --> 00:25:39,130
when you you're doing local development

00:25:35,830 --> 00:25:41,610
in a more traditional sense also allows

00:25:39,130 --> 00:25:44,410
us to control our compute density and

00:25:41,610 --> 00:25:48,510
spin up or down as many or a few

00:25:44,410 --> 00:25:51,490
containers as we need to serve the

00:25:48,510 --> 00:25:53,200
traffic that we're getting docker also

00:25:51,490 --> 00:25:58,330
makes continuing continuous integration

00:25:53,200 --> 00:25:59,350
very easy and we use docker compose to

00:25:58,330 --> 00:26:04,150
build our local

00:25:59,350 --> 00:26:05,500
environments which is helpful we don't

00:26:04,150 --> 00:26:09,330
have too much time to go into the

00:26:05,500 --> 00:26:11,530
intricacies of serving Drupal on AWS

00:26:09,330 --> 00:26:12,970
probably divert deserves its own

00:26:11,530 --> 00:26:17,350
complete session which there was

00:26:12,970 --> 00:26:18,940
actually little saddens that none of

00:26:17,350 --> 00:26:23,799
them that there actually weren't any

00:26:18,940 --> 00:26:26,140
Drupal and AWS sessions this year but if

00:26:23,799 --> 00:26:30,010
any maybe next year but if anybody is

00:26:26,140 --> 00:26:32,710
interested in sharing thoughts you can

00:26:30,010 --> 00:26:34,659
come up to us afterwards and if there's

00:26:32,710 --> 00:26:38,549
enough interest maybe we can get

00:26:34,659 --> 00:26:38,549
together and put it put together a box

00:26:40,919 --> 00:26:48,100
alright and another thing everything

00:26:44,500 --> 00:26:50,440
about this has been making things fast

00:26:48,100 --> 00:26:54,730
we want to serve our content faster and

00:26:50,440 --> 00:27:01,120
edit our content fast and we want users

00:26:54,730 --> 00:27:02,919
getting to the game fast so so yeah

00:27:01,120 --> 00:27:05,110
often times that means you have to

00:27:02,919 --> 00:27:06,669
develop fast - you know there's a

00:27:05,110 --> 00:27:08,770
tentpole event coming out there's

00:27:06,669 --> 00:27:11,440
there's some some thing has broken and

00:27:08,770 --> 00:27:13,030
you've got to get things up fast so just

00:27:11,440 --> 00:27:16,750
as kind of a bonus slide we wanted to

00:27:13,030 --> 00:27:19,360
talk really quickly about or get

00:27:16,750 --> 00:27:21,070
branching strategies that we used to

00:27:19,360 --> 00:27:23,230
help us do a lot of fast-paced

00:27:21,070 --> 00:27:25,600
development not lose track before we are

00:27:23,230 --> 00:27:26,950
not introduced a lot of things into

00:27:25,600 --> 00:27:28,539
introduction that we don't want so

00:27:26,950 --> 00:27:30,250
because of the fast pace of development

00:27:28,539 --> 00:27:33,039
and the need to keep our mainline

00:27:30,250 --> 00:27:36,039
branches pure and as free is of untested

00:27:33,039 --> 00:27:39,580
or unapproved changes as possible we use

00:27:36,039 --> 00:27:41,289
what we dove to continue flow it's kind

00:27:39,580 --> 00:27:42,850
of a derivation of wonderful Oh Azure

00:27:41,289 --> 00:27:45,010
get branching strategies and so if

00:27:42,850 --> 00:27:46,530
you're familiar with things like let get

00:27:45,010 --> 00:27:48,789
flow for instance we threw that out

00:27:46,530 --> 00:27:51,460
because I just was going to cut it for

00:27:48,789 --> 00:27:54,460
what we need we have a very widely

00:27:51,460 --> 00:27:57,909
distributed team and things you know

00:27:54,460 --> 00:27:59,830
move very quickly and so things like

00:27:57,909 --> 00:28:01,870
tentpole events you know like the

00:27:59,830 --> 00:28:03,460
all-star game for instance it's a very

00:28:01,870 --> 00:28:04,870
good use case because if you have

00:28:03,460 --> 00:28:06,940
development going on you know one

00:28:04,870 --> 00:28:07,830
developer may be doing a couple of bug

00:28:06,940 --> 00:28:10,140
fixes here

00:28:07,830 --> 00:28:12,419
Aran's and future enhancements but it's

00:28:10,140 --> 00:28:14,610
all the while also working on some

00:28:12,419 --> 00:28:17,220
parallel work in a separate ethic branch

00:28:14,610 --> 00:28:19,769
a sec essentially that may last for

00:28:17,220 --> 00:28:21,710
several months and so the ability to get

00:28:19,769 --> 00:28:24,269
things out in integration testing

00:28:21,710 --> 00:28:27,120
without interfering with the rest of

00:28:24,269 --> 00:28:29,640
development is really critical so the

00:28:27,120 --> 00:28:31,140
analogy we would try to use very

00:28:29,640 --> 00:28:34,080
frequently is that if you have an

00:28:31,140 --> 00:28:36,390
integration mainline branch a staging or

00:28:34,080 --> 00:28:38,909
a QA mainline branch and a production

00:28:36,390 --> 00:28:40,289
mainline branch these things never never

00:28:38,909 --> 00:28:44,130
intersect they're running in parallel

00:28:40,289 --> 00:28:47,460
and as a developer works on a particular

00:28:44,130 --> 00:28:48,990
feature they pull it in for master they

00:28:47,460 --> 00:28:51,480
do a whole lot of work to make things

00:28:48,990 --> 00:28:54,539
better and they'll merge that into

00:28:51,480 --> 00:28:56,610
integration first so that that's up on

00:28:54,539 --> 00:28:59,490
the integration server you're able to

00:28:56,610 --> 00:29:00,779
test it someone says oh no no no look

00:28:59,490 --> 00:29:03,149
that creates a regression with this

00:29:00,779 --> 00:29:04,649
other feature here yeah you know instead

00:29:03,149 --> 00:29:07,139
of having to worry about pulling that

00:29:04,649 --> 00:29:08,190
back out because you know you think

00:29:07,139 --> 00:29:10,169
about it and once you dump something

00:29:08,190 --> 00:29:13,889
into the river trying to get it back out

00:29:10,169 --> 00:29:15,299
stuff let's face it so that's okay you

00:29:13,889 --> 00:29:17,130
can let that go in the integration

00:29:15,299 --> 00:29:19,889
environment because that's a transient

00:29:17,130 --> 00:29:21,419
mainline branch anyway but once you get

00:29:19,889 --> 00:29:23,610
it working in integration and you're

00:29:21,419 --> 00:29:26,460
happy with it then you move it on to you

00:29:23,610 --> 00:29:29,639
merge the same feature branch back into

00:29:26,460 --> 00:29:31,230
the QA branch the QA branch then is what

00:29:29,639 --> 00:29:32,880
the QA team is actually doing all of

00:29:31,230 --> 00:29:35,370
their testing with theirs combination of

00:29:32,880 --> 00:29:38,130
automated and manual testing that occurs

00:29:35,370 --> 00:29:40,580
there and everything that's there is

00:29:38,130 --> 00:29:43,710
assumed to be ready for production

00:29:40,580 --> 00:29:45,659
once QA is signed off on it then that

00:29:43,710 --> 00:29:46,490
feature branch has merged a third and

00:29:45,659 --> 00:29:49,980
final time

00:29:46,490 --> 00:29:52,649
into the master branch to the production

00:29:49,980 --> 00:29:55,230
branch at that point then it's ready for

00:29:52,649 --> 00:29:58,799
production and you can absolutely trust

00:29:55,230 --> 00:30:00,809
that anything that's in master doesn't

00:29:58,799 --> 00:30:04,080
need to be re-evaluated for any kind of

00:30:00,809 --> 00:30:06,059
further QA it's ready to go now the key

00:30:04,080 --> 00:30:07,710
thing to this is that you never merge a

00:30:06,059 --> 00:30:10,230
mainline branch into your future branch

00:30:07,710 --> 00:30:12,630
oh there's a master right so in get flow

00:30:10,230 --> 00:30:14,700
oftentimes the process is you know you

00:30:12,630 --> 00:30:16,799
create a branch from develop you make

00:30:14,700 --> 00:30:18,149
some changes you try to merge it back in

00:30:16,799 --> 00:30:21,360
through a pull request and you get a

00:30:18,149 --> 00:30:23,700
merge conflict a big yellow exclamation

00:30:21,360 --> 00:30:25,590
point that just ruined your day and so a

00:30:23,700 --> 00:30:27,900
lot of times the the fix is real simple

00:30:25,590 --> 00:30:30,630
right you just merge developed back into

00:30:27,900 --> 00:30:31,920
your feature branch resolve the merge

00:30:30,630 --> 00:30:33,360
conflicts locally and push it back up

00:30:31,920 --> 00:30:34,950
well the problem is you've now

00:30:33,360 --> 00:30:37,470
introduced a whole lot of unknown

00:30:34,950 --> 00:30:39,360
changes to your feature branch so that

00:30:37,470 --> 00:30:41,280
feature branch couldn't go into QA or

00:30:39,360 --> 00:30:43,440
stage so we worked out a lot of other

00:30:41,280 --> 00:30:51,480
ways to resolve merge conflicts that

00:30:43,440 --> 00:30:55,440
keeps things very unidirectional all

00:30:51,480 --> 00:30:57,690
right and I don't know if there's a lot

00:30:55,440 --> 00:31:02,940
of other performance geeks in the room

00:30:57,690 --> 00:31:05,460
I personally stay up awake at night

00:31:02,940 --> 00:31:09,000
thinking about not only milliseconds but

00:31:05,460 --> 00:31:11,040
nanoseconds so some things that we

00:31:09,000 --> 00:31:14,910
discovered to help make through pallate

00:31:11,040 --> 00:31:19,140
faster number one run PHP seven and make

00:31:14,910 --> 00:31:23,160
sure you turn off cache on up cache even

00:31:19,140 --> 00:31:25,200
though the underlying performance of PHP

00:31:23,160 --> 00:31:28,230
seven is greatly improved and there's

00:31:25,200 --> 00:31:31,919
some up caching like things built into

00:31:28,230 --> 00:31:34,080
the core of PHP seven in practice app

00:31:31,919 --> 00:31:39,299
cache still about doubles the

00:31:34,080 --> 00:31:42,270
performance of PHP seven another another

00:31:39,299 --> 00:31:44,370
key thing is get cache get get temporary

00:31:42,270 --> 00:31:46,890
and transient data out of sequel if it's

00:31:44,370 --> 00:31:50,090
not content if it's not config you don't

00:31:46,890 --> 00:31:52,830
want it in there there's no need to have

00:31:50,090 --> 00:31:54,140
you know anonymous page requests you

00:31:52,830 --> 00:31:56,910
know essentially writing to the database

00:31:54,140 --> 00:31:59,850
so get that out of sequel as much as

00:31:56,910 --> 00:32:03,870
possible also you want to right-size

00:31:59,850 --> 00:32:07,620
your caching my best example of this is

00:32:03,870 --> 00:32:08,370
if you've got a block that lists related

00:32:07,620 --> 00:32:11,179
content

00:32:08,370 --> 00:32:14,250
and you've got maybe five different

00:32:11,179 --> 00:32:16,380
derivatives of that block for five

00:32:14,250 --> 00:32:18,480
different main content sections and

00:32:16,380 --> 00:32:23,309
you've got about a hundred pieces of

00:32:18,480 --> 00:32:27,030
content in each of those if you just use

00:32:23,309 --> 00:32:30,600
the defaults and let your cache context

00:32:27,030 --> 00:32:34,960
be the URL you're going to be rendering

00:32:30,600 --> 00:32:37,240
and caching 500 separate copies

00:32:34,960 --> 00:32:44,620
of something that you only really have

00:32:37,240 --> 00:32:48,130
five different varieties of so it's very

00:32:44,620 --> 00:32:51,010
important that as you're getting into

00:32:48,130 --> 00:32:53,440
tuning your performance learn how to

00:32:51,010 --> 00:32:57,520
create your own cash context learn how

00:32:53,440 --> 00:33:00,160
to create your own cash keys and when

00:32:57,520 --> 00:33:03,100
your cash Keys should be cleared as the

00:33:00,160 --> 00:33:07,240
related content changes and you're going

00:33:03,100 --> 00:33:09,880
to save yourself a lot of time in the

00:33:07,240 --> 00:33:13,780
page rendering yeah speaking of speaking

00:33:09,880 --> 00:33:15,130
of page rendering just in time or you

00:33:13,780 --> 00:33:17,950
know assembling content before it's

00:33:15,130 --> 00:33:19,390
appropriate is really crucial too so you

00:33:17,950 --> 00:33:20,770
know let's let group will render the

00:33:19,390 --> 00:33:22,840
things that it knows about don't let

00:33:20,770 --> 00:33:24,760
Drupal spin a whole lot of time worrying

00:33:22,840 --> 00:33:27,610
about things that live outside of Drupal

00:33:24,760 --> 00:33:30,610
you can use you can use Akamai or

00:33:27,610 --> 00:33:32,980
varnish or any number of seeding ends

00:33:30,610 --> 00:33:35,410
that support edge site includes to pull

00:33:32,980 --> 00:33:36,820
things in for you the symbol on the edge

00:33:35,410 --> 00:33:38,560
it's going to be much faster than

00:33:36,820 --> 00:33:40,840
letting Drupal go and fetch those things

00:33:38,560 --> 00:33:42,660
and try to merge it into the page it

00:33:40,840 --> 00:33:45,010
also eliminates a lot of cache issues

00:33:42,660 --> 00:33:48,130
when you when you use edge set includes

00:33:45,010 --> 00:33:50,010
because you can serve a cached page from

00:33:48,130 --> 00:33:52,350
Drupal and then conditionally add

00:33:50,010 --> 00:33:56,560
content based on user preferences

00:33:52,350 --> 00:33:58,480
geolocation and that sort of thing too a

00:33:56,560 --> 00:34:00,970
cached page so Drupal is just serving

00:33:58,480 --> 00:34:03,940
the cache page ESI adds things

00:34:00,970 --> 00:34:06,010
conditionally you know and then delivers

00:34:03,940 --> 00:34:09,000
that to the user which then of course

00:34:06,010 --> 00:34:11,920
you know angular and other JavaScript

00:34:09,000 --> 00:34:15,820
magic will finish the page for you it

00:34:11,920 --> 00:34:17,800
adds the polish horizontal database

00:34:15,820 --> 00:34:20,950
scaling is also something that we've put

00:34:17,800 --> 00:34:24,550
a lot of work into that in and of itself

00:34:20,950 --> 00:34:27,520
isn't necessarily a performance booster

00:34:24,550 --> 00:34:29,500
you can also scale vertically but

00:34:27,520 --> 00:34:32,770
especially if you're moving into the

00:34:29,500 --> 00:34:35,890
cloud vertically scaling your databases

00:34:32,770 --> 00:34:38,380
gets very very expensive before we

00:34:35,890 --> 00:34:44,440
started working on horizontal database

00:34:38,380 --> 00:34:47,230
scaling I think about 75% of what we

00:34:44,440 --> 00:34:48,800
were spending in AWS was just on a

00:34:47,230 --> 00:34:52,970
really really

00:34:48,800 --> 00:34:55,850
big Aurora DB instance and so

00:34:52,970 --> 00:34:58,370
unfortunately horizontal database

00:34:55,850 --> 00:35:02,570
scaling is easier said than done in

00:34:58,370 --> 00:35:05,780
Drupal 8 we had to do a lot of work as

00:35:02,570 --> 00:35:09,080
Toby mentioned earlier to get the all

00:35:05,780 --> 00:35:12,830
the transients data out of sequel so

00:35:09,080 --> 00:35:14,240
that our web containers which we'll talk

00:35:12,830 --> 00:35:17,750
about the splitting of containers in a

00:35:14,240 --> 00:35:20,360
minute but so the public traffic isn't

00:35:17,750 --> 00:35:23,330
trying to write to the database which

00:35:20,360 --> 00:35:25,370
allows us to take those containers that

00:35:23,330 --> 00:35:28,390
are serving to the public I just point

00:35:25,370 --> 00:35:32,660
them to a read only database and

00:35:28,390 --> 00:35:35,930
Amazon's Aurora DB gives us a endpoint

00:35:32,660 --> 00:35:38,630
that will automatically scale across

00:35:35,930 --> 00:35:41,990
read replicas which makes things very

00:35:38,630 --> 00:35:45,400
nice there I guess I'll go ahead and

00:35:41,990 --> 00:35:48,650
talk about the role separation as well

00:35:45,400 --> 00:35:52,490
we also wanted to fire kind of firewall

00:35:48,650 --> 00:35:56,180
the different tasks that Drupal does so

00:35:52,490 --> 00:35:59,810
that if the editors are doing something

00:35:56,180 --> 00:36:02,210
really heavy we got a couple dozen

00:35:59,810 --> 00:36:05,000
editors in there fast and furious adding

00:36:02,210 --> 00:36:07,670
new content adding new videos that

00:36:05,000 --> 00:36:10,790
they're not taking up all of our compute

00:36:07,670 --> 00:36:14,200
space from the fans that are trying to

00:36:10,790 --> 00:36:18,220
get to the new content for the game and

00:36:14,200 --> 00:36:21,890
I don't know if you've ever dealt with

00:36:18,220 --> 00:36:23,900
cron tasks in Drupal Drupal cron can get

00:36:21,890 --> 00:36:27,110
really heavy so we actually separated

00:36:23,900 --> 00:36:30,890
out a third role of a utility container

00:36:27,110 --> 00:36:34,450
that will run all of the Drupal cron

00:36:30,890 --> 00:36:38,090
tasks that's where we will put out API

00:36:34,450 --> 00:36:41,840
endpoints for other internal systems to

00:36:38,090 --> 00:36:46,160
push content into Drupal and anything

00:36:41,840 --> 00:36:50,030
automated and back indy that doesn't

00:36:46,160 --> 00:36:52,910
actually interact with users we put on

00:36:50,030 --> 00:36:55,940
that separate thing so that we're not

00:36:52,910 --> 00:36:58,880
bogging again not bogging down the

00:36:55,940 --> 00:37:00,680
compute that is serving the fan with

00:36:58,880 --> 00:37:02,140
automated tasks that they don't care

00:37:00,680 --> 00:37:04,160
about

00:37:02,140 --> 00:37:06,980
you know earlier when we're talking

00:37:04,160 --> 00:37:09,470
about getting cash and other data out of

00:37:06,980 --> 00:37:10,670
the database trying to horizontally

00:37:09,470 --> 00:37:14,480
scale one of the things that really

00:37:10,670 --> 00:37:18,380
helped was we actually even moved PHP

00:37:14,480 --> 00:37:20,690
sessions out of the database into Redis

00:37:18,380 --> 00:37:22,670
and that was that was a was a

00:37:20,690 --> 00:37:24,470
particularly interesting lift and we

00:37:22,670 --> 00:37:27,080
learned a lot about service decoration

00:37:24,470 --> 00:37:32,330
that that probably alone deserves

00:37:27,080 --> 00:37:34,760
another session but so so once we were

00:37:32,330 --> 00:37:36,320
able to move PHP sessions out of the

00:37:34,760 --> 00:37:39,619
database because even anonymous users

00:37:36,320 --> 00:37:41,210
still can potentially trigger a session

00:37:39,619 --> 00:37:43,099
that gets written to the database that

00:37:41,210 --> 00:37:44,810
was sort of the last key piece to being

00:37:43,099 --> 00:37:47,930
able to put the database into read-only

00:37:44,810 --> 00:37:50,330
mode so most of what you see on nba.com

00:37:47,930 --> 00:37:53,720
is actually getting served from a read

00:37:50,330 --> 00:37:56,750
only database another interesting point

00:37:53,720 --> 00:37:59,599
is the the Redis sessions module that we

00:37:56,750 --> 00:38:03,560
did I could potentially let you extend

00:37:59,599 --> 00:38:06,050
to using other PHP session a session

00:38:03,560 --> 00:38:09,280
handling systems using a lot of the

00:38:06,050 --> 00:38:12,950
built-in Symphony native session handler

00:38:09,280 --> 00:38:14,660
plugins so you could use the stock PHP

00:38:12,950 --> 00:38:18,980
session management again you can use

00:38:14,660 --> 00:38:22,250
file systems you can use MongoDB you can

00:38:18,980 --> 00:38:24,859
use memcache all of these things based

00:38:22,250 --> 00:38:26,570
on service declarations and using the

00:38:24,859 --> 00:38:28,630
the Redis session module is sort of a

00:38:26,570 --> 00:38:31,790
template I've actually been talking to

00:38:28,630 --> 00:38:33,980
sasha dear as most people going to know

00:38:31,790 --> 00:38:36,260
him who maintains the Redis module about

00:38:33,980 --> 00:38:38,210
helping with maintaining the Redis

00:38:36,260 --> 00:38:40,760
module as a result some of this work

00:38:38,210 --> 00:38:42,589
that we've been doing and contributing

00:38:40,760 --> 00:38:45,530
back the read of sessions module as a

00:38:42,589 --> 00:38:47,599
drop-in replacement for session handling

00:38:45,530 --> 00:38:49,490
and drupal the other nice thing is it

00:38:47,599 --> 00:38:51,470
does keep all of the optimizations that

00:38:49,490 --> 00:38:53,690
Drupal is made over the last couple of

00:38:51,470 --> 00:38:57,200
major versions including session

00:38:53,690 --> 00:38:59,390
migration session deletion preventing

00:38:57,200 --> 00:39:01,550
anonymous users from creating sessions

00:38:59,390 --> 00:39:04,400
that get saved and so on so that sort of

00:39:01,550 --> 00:39:06,170
thing is something that it is quite

00:39:04,400 --> 00:39:09,250
literally just they drop in you enable

00:39:06,170 --> 00:39:12,550
the module and you're immediately using

00:39:09,250 --> 00:39:14,930
sessions out of rest

00:39:12,550 --> 00:39:18,319
alright and here we've got a nice little

00:39:14,930 --> 00:39:21,440
graph of some performance changes that

00:39:18,319 --> 00:39:23,420
have happened over time on site you

00:39:21,440 --> 00:39:27,530
ignore the big green blob at the

00:39:23,420 --> 00:39:30,859
beginning that was kind of happening as

00:39:27,530 --> 00:39:33,770
we were importing all of our data from

00:39:30,859 --> 00:39:35,599
our legacy CMS blowing it all the way

00:39:33,770 --> 00:39:39,589
importing again blowing it away

00:39:35,599 --> 00:39:43,520
importing again but the first really

00:39:39,589 --> 00:39:47,210
interesting thing is after the big green

00:39:43,520 --> 00:39:49,040
blob falls off and we go up that one

00:39:47,210 --> 00:39:51,560
little spike and then back now there

00:39:49,040 --> 00:39:53,450
were a few performance there was some

00:39:51,560 --> 00:39:58,880
bad performing code that got put out and

00:39:53,450 --> 00:40:01,910
then fixed and then you see that third

00:39:58,880 --> 00:40:06,579
little spike there that's actually when

00:40:01,910 --> 00:40:10,130
we went live and went from an average of

00:40:06,579 --> 00:40:14,839
50 to 100 requests a minute from all of

00:40:10,130 --> 00:40:16,780
our QA testing up to depending on the

00:40:14,839 --> 00:40:20,150
time of day anywhere between 2 and 6

00:40:16,780 --> 00:40:24,140
thousand requests per second that make

00:40:20,150 --> 00:40:30,619
it through to our origin after all of

00:40:24,140 --> 00:40:32,839
our Akamai offload so we were actually

00:40:30,619 --> 00:40:37,490
very pleasantly surprised that we got

00:40:32,839 --> 00:40:41,960
just about a 25% bump in our response

00:40:37,490 --> 00:40:43,609
time there things kind of go along we

00:40:41,960 --> 00:40:46,670
weren't very happy with our performance

00:40:43,609 --> 00:40:48,770
there we made a few tweaks and we

00:40:46,670 --> 00:40:50,420
actually upside that first fall off we

00:40:48,770 --> 00:40:53,079
up sized our database and started

00:40:50,420 --> 00:40:57,109
spending way too much money on Aurora DB

00:40:53,079 --> 00:40:59,569
and then go along and that first drop

00:40:57,109 --> 00:41:03,589
before the end of daylight savings time

00:40:59,569 --> 00:41:07,970
we turned on off cash thanks to James

00:41:03,589 --> 00:41:13,150
over there and also made our first set

00:41:07,970 --> 00:41:17,569
of pulling things that Drupal doesn't

00:41:13,150 --> 00:41:20,839
easily and automatically move out of the

00:41:17,569 --> 00:41:23,839
database when you turn on a Redis module

00:41:20,839 --> 00:41:26,190
or a memcache module and that got us

00:41:23,839 --> 00:41:29,609
down to about 250 milliseconds

00:41:26,190 --> 00:41:31,289
and through various code releases that

00:41:29,609 --> 00:41:33,329
may be released something that wasn't

00:41:31,289 --> 00:41:37,130
very well optimized and re optimizing

00:41:33,329 --> 00:41:42,089
we've hovered around 250 milliseconds

00:41:37,130 --> 00:41:47,880
since then but we've got another round

00:41:42,089 --> 00:41:50,010
of improvements coming soon for the just

00:41:47,880 --> 00:41:54,030
a few more tweaks that should hopefully

00:41:50,010 --> 00:41:56,609
be pulling us down to consistently

00:41:54,030 --> 00:42:00,740
staying right about 150 milliseconds on

00:41:56,609 --> 00:42:00,740
a response which makes me very happy

00:42:04,740 --> 00:42:11,010
so as Toby mentioned we wanted to get

00:42:07,859 --> 00:42:13,230
our cash out of sequel and we learned

00:42:11,010 --> 00:42:18,930
that sequel is not the best place to

00:42:13,230 --> 00:42:23,160
store cash and about halfway through our

00:42:18,930 --> 00:42:25,410
optimizations we were looking at New

00:42:23,160 --> 00:42:31,579
Relic if you don't have it get it or

00:42:25,410 --> 00:42:34,349
another high performance profiling

00:42:31,579 --> 00:42:35,250
application and service it will save

00:42:34,349 --> 00:42:37,200
your life

00:42:35,250 --> 00:42:39,869
because you don't know what to fix and

00:42:37,200 --> 00:42:41,819
let you know what's happening in

00:42:39,869 --> 00:42:45,480
production there's going to be problems

00:42:41,819 --> 00:42:47,369
in production that will never occur on

00:42:45,480 --> 00:42:49,109
your other environments just because of

00:42:47,369 --> 00:42:51,480
the scale of traffic you're getting and

00:42:49,109 --> 00:42:54,510
it really changes the landscape but

00:42:51,480 --> 00:42:57,990
about halfway through optimizations we

00:42:54,510 --> 00:43:02,369
saw that the most time we were spending

00:42:57,990 --> 00:43:06,890
talking to sequel was that the

00:43:02,369 --> 00:43:10,260
dependency injection container queries

00:43:06,890 --> 00:43:14,789
were taking more time than looking up

00:43:10,260 --> 00:43:17,250
nodes running views loading the home

00:43:14,789 --> 00:43:21,980
page anything

00:43:17,250 --> 00:43:25,829
and thanks to a document we found on

00:43:21,980 --> 00:43:27,049
platform s H's website so thanks to you

00:43:25,829 --> 00:43:31,380
guys if there's any of you in the room

00:43:27,049 --> 00:43:34,770
we were able to take the dependency

00:43:31,380 --> 00:43:37,730
injection container and move it into the

00:43:34,770 --> 00:43:39,080
chain fast backend which means about

00:43:37,730 --> 00:43:41,530
99.9

00:43:39,080 --> 00:43:44,660
in several more nine percent of the time

00:43:41,530 --> 00:43:46,610
it's being served from local memory and

00:43:44,660 --> 00:43:48,260
so there's no network requests that have

00:43:46,610 --> 00:43:52,970
to be made and it gets that dependency

00:43:48,260 --> 00:43:56,000
injection container very fast and it

00:43:52,970 --> 00:43:57,320
will also use Redis now for consistency

00:43:56,000 --> 00:43:59,690
of that container if it doesn't have it

00:43:57,320 --> 00:44:05,210
it'll go grab it from Redis and put it

00:43:59,690 --> 00:44:06,830
back into local memory not going to

00:44:05,210 --> 00:44:11,420
really go into this in detail we just

00:44:06,830 --> 00:44:14,090
really included a a sample configuration

00:44:11,420 --> 00:44:16,700
for reticent here so that if anybody

00:44:14,090 --> 00:44:20,170
wants to see how to set it up you can go

00:44:16,700 --> 00:44:23,900
download the slides probably by tomorrow

00:44:20,170 --> 00:44:27,440
and have something to get started with

00:44:23,900 --> 00:44:30,620
for getting all of those caching pieces

00:44:27,440 --> 00:44:33,410
and transient data out of sequel in into

00:44:30,620 --> 00:44:37,970
something that works a little bit better

00:44:33,410 --> 00:44:42,050
for that yes we also promise we're going

00:44:37,970 --> 00:44:47,540
to try to blog more about this yes all

00:44:42,050 --> 00:44:49,400
right so does it have any questions if

00:44:47,540 --> 00:44:52,640
there's a microphone right here in the

00:44:49,400 --> 00:44:54,950
end of the audit or in the room and that

00:44:52,640 --> 00:45:00,230
will help with getting those questions

00:44:54,950 --> 00:45:01,850
recorded for posterity so when a bug

00:45:00,230 --> 00:45:03,530
comes out or a new feature happens

00:45:01,850 --> 00:45:04,970
obviously sometimes you might need to

00:45:03,530 --> 00:45:07,430
clear the cache and there's so many

00:45:04,970 --> 00:45:09,680
different layers of caching what is your

00:45:07,430 --> 00:45:12,950
I guess cache clearing strategy when you

00:45:09,680 --> 00:45:16,340
have that many hits all the time um so

00:45:12,950 --> 00:45:20,990
our strategy is we clear cache as little

00:45:16,340 --> 00:45:24,500
as possible and try to only clear the

00:45:20,990 --> 00:45:28,700
cache that needs clearing that can

00:45:24,500 --> 00:45:31,010
present some challenges if you are

00:45:28,700 --> 00:45:33,740
needing to clear some of your code

00:45:31,010 --> 00:45:39,860
caches or your CSS or your JavaScript

00:45:33,740 --> 00:45:43,340
cache one thing we do is each build we

00:45:39,860 --> 00:45:48,440
take a hash of all of our code and pop

00:45:43,340 --> 00:45:50,660
it into a setting in the database so

00:45:48,440 --> 00:45:53,540
that we can check it and we doing our

00:45:50,660 --> 00:45:56,870
post deploy we will

00:45:53,540 --> 00:45:58,910
we'll compare the previous hash in the

00:45:56,870 --> 00:46:01,280
current hash to see if any code has

00:45:58,910 --> 00:46:04,610
changed if the code has changed we clear

00:46:01,280 --> 00:46:08,510
all the code caches we also make sure

00:46:04,610 --> 00:46:12,380
any time we update the PHP in a module

00:46:08,510 --> 00:46:15,230
or update any CSS or JavaScript that's

00:46:12,380 --> 00:46:17,960
included by a library that we update the

00:46:15,230 --> 00:46:20,870
versions of either the module or the

00:46:17,960 --> 00:46:23,390
libraries and Drupal will automatically

00:46:20,870 --> 00:46:26,900
handle clearing those caches for us

00:46:23,390 --> 00:46:29,990
it'll put it'll if you're serving the

00:46:26,900 --> 00:46:33,760
files individually it'll put a little

00:46:29,990 --> 00:46:37,700
version decorator that will cache bust

00:46:33,760 --> 00:46:40,730
or it'll again clear the container

00:46:37,700 --> 00:46:42,980
injection and module is cache if you're

00:46:40,730 --> 00:46:47,860
in other caches it's kind of knowing

00:46:42,980 --> 00:46:51,020
your site and if you're using brush or

00:46:47,860 --> 00:46:53,690
Drupal console to clear caches just

00:46:51,020 --> 00:46:56,630
learning which caches need to be cleared

00:46:53,690 --> 00:46:59,150
when and as you get a better picture of

00:46:56,630 --> 00:47:00,800
that automate as much of it as you can

00:46:59,150 --> 00:47:03,650
so that when something needs to be

00:47:00,800 --> 00:47:10,640
cleared on a build you clear that cache

00:47:03,650 --> 00:47:14,690
on that build thanks guys thanks for a

00:47:10,640 --> 00:47:16,280
great session and we had a recently a

00:47:14,690 --> 00:47:18,020
project where we were a lot of

00:47:16,280 --> 00:47:20,800
developers a lot of continuation in

00:47:18,020 --> 00:47:22,640
continuous deployment how did you handle

00:47:20,800 --> 00:47:23,960
configuration management because we've

00:47:22,640 --> 00:47:26,660
been seeing a lot of issues where people

00:47:23,960 --> 00:47:31,400
didn't get updated configuration or

00:47:26,660 --> 00:47:36,130
overrode stuff we use the features

00:47:31,400 --> 00:47:38,840
module which is much more like

00:47:36,130 --> 00:47:44,000
configuration management in Drupal 8

00:47:38,840 --> 00:47:47,390
than it is any previous iteration of

00:47:44,000 --> 00:47:50,570
features but that really helps us split

00:47:47,390 --> 00:47:53,420
the configuration management out into

00:47:50,570 --> 00:47:56,750
the modules that that configuration is

00:47:53,420 --> 00:47:58,190
appropriate to now there is at least in

00:47:56,750 --> 00:48:00,170
the version we have I don't know if it's

00:47:58,190 --> 00:48:02,750
been fixed since then I haven't checked

00:48:00,170 --> 00:48:07,270
them there's any updates lately do you

00:48:02,750 --> 00:48:09,530
do run a little bit of a risk of getting

00:48:07,270 --> 00:48:11,450
duplicate configuration between modules

00:48:09,530 --> 00:48:15,250
so you got to keep an eye out for that

00:48:11,450 --> 00:48:17,630
and make sure that you're not creating a

00:48:15,250 --> 00:48:21,140
shame yeah mole file in multiple places

00:48:17,630 --> 00:48:23,930
because it gets confused but that's

00:48:21,140 --> 00:48:27,590
really helped us keep that separate and

00:48:23,930 --> 00:48:30,200
reduce the collisions you know one thing

00:48:27,590 --> 00:48:31,970
that we've also talked about there's

00:48:30,200 --> 00:48:33,830
other sort of an emerging best practice

00:48:31,970 --> 00:48:36,170
with using features and configuration

00:48:33,830 --> 00:48:38,450
management is that for the course of

00:48:36,170 --> 00:48:40,160
development it's best to store all of

00:48:38,450 --> 00:48:43,010
your configuration for a particular

00:48:40,160 --> 00:48:46,730
feature in an exported features module

00:48:43,010 --> 00:48:49,460
and that's that's the same exact you

00:48:46,730 --> 00:48:51,110
know CMI yeah mole files it just it

00:48:49,460 --> 00:48:53,450
keeps it there but when you're getting

00:48:51,110 --> 00:48:55,400
ready to go from making the leap from

00:48:53,450 --> 00:48:57,140
your staging environment where you've q8

00:48:55,400 --> 00:48:59,930
everything and you're happy with with

00:48:57,140 --> 00:49:02,690
everything do a single pickup of the

00:48:59,930 --> 00:49:03,950
entire CMI and drop that into production

00:49:02,690 --> 00:49:05,930
and that's something that could be

00:49:03,950 --> 00:49:07,220
easily automated as well but yeah that's

00:49:05,930 --> 00:49:08,690
sort of the direction that we're going

00:49:07,220 --> 00:49:11,360
for here and it's kind of an emerging

00:49:08,690 --> 00:49:12,770
best practice on a lot of other feet you

00:49:11,360 --> 00:49:14,660
know there's a there's a blog post about

00:49:12,770 --> 00:49:16,400
you know using features in CMI and how

00:49:14,660 --> 00:49:19,670
they kind of work together and so you

00:49:16,400 --> 00:49:21,560
you can do the the fine-tuning of

00:49:19,670 --> 00:49:24,020
configuration management using features

00:49:21,560 --> 00:49:25,070
and then when you're happy with the

00:49:24,020 --> 00:49:27,140
entire site and it's just a matter of

00:49:25,070 --> 00:49:27,680
picking up that and dropping it in

00:49:27,140 --> 00:49:32,060
production

00:49:27,680 --> 00:49:34,190
thank you quickly hey guys thanks for

00:49:32,060 --> 00:49:37,550
all the good information I have a

00:49:34,190 --> 00:49:40,010
question about strategy for setting

00:49:37,550 --> 00:49:42,140
metrics for your speed testing so a

00:49:40,010 --> 00:49:44,540
couple of years ago there was a study

00:49:42,140 --> 00:49:46,580
about Walmart and when they optimize

00:49:44,540 --> 00:49:48,770
speed on their site they found that

00:49:46,580 --> 00:49:49,850
dropping the speed I want to say it's

00:49:48,770 --> 00:49:54,500
two seconds it might have been two

00:49:49,850 --> 00:49:58,760
milliseconds had a result of increased

00:49:54,500 --> 00:50:00,590
sales and increased cart by just a

00:49:58,760 --> 00:50:01,940
ridiculous amount so I was wondering if

00:50:00,590 --> 00:50:04,220
you guys had any metrics that you were

00:50:01,940 --> 00:50:06,590
looking at bounce rate or user

00:50:04,220 --> 00:50:14,360
engagement or sales or anything like

00:50:06,590 --> 00:50:17,450
that um we we do I don't have all of

00:50:14,360 --> 00:50:19,750
that data ready in my head right now but

00:50:17,450 --> 00:50:27,510
we definitely looked

00:50:19,750 --> 00:50:30,520
how it affects the end user and been

00:50:27,510 --> 00:50:36,070
more so than even that though we just

00:50:30,520 --> 00:50:43,680
focus on what our worst behaviors are

00:50:36,070 --> 00:50:43,680
and try to improve those ok thanks hey

00:50:43,890 --> 00:50:48,460
guys thanks a lot I'm curious a little

00:50:46,900 --> 00:50:52,390
to hear a little bit more about your

00:50:48,460 --> 00:50:54,520
kind of ESI strategy and maybe I have a

00:50:52,390 --> 00:50:56,230
couple questions maybe what kind of cash

00:50:54,520 --> 00:50:58,090
offload from origin you've been able to

00:50:56,230 --> 00:51:00,849
achieve and if there have been any

00:50:58,090 --> 00:51:03,599
concerns about maybe the ways you've

00:51:00,849 --> 00:51:07,030
used ESI leading to like vendor lock-in

00:51:03,599 --> 00:51:08,970
having to use a certain CDN let's say

00:51:07,030 --> 00:51:16,510
I'll actually address the vendor lock-in

00:51:08,970 --> 00:51:20,910
piece first changing vendors is always

00:51:16,510 --> 00:51:23,980
painful once you've chosen a vendor if

00:51:20,910 --> 00:51:26,619
you're going to take advantage of the

00:51:23,980 --> 00:51:30,099
reasons you chose that vendor then

00:51:26,619 --> 00:51:32,740
you're going to get vendor lock-in and

00:51:30,099 --> 00:51:34,960
being if you don't want to do fear

00:51:32,740 --> 00:51:37,380
driven development that's a mistake that

00:51:34,960 --> 00:51:40,410
our group has made a lot in the past and

00:51:37,380 --> 00:51:43,270
we've suffered severe limitations

00:51:40,410 --> 00:51:44,830
because we were afraid to take advantage

00:51:43,270 --> 00:51:46,869
of the technology we had at our

00:51:44,830 --> 00:51:53,950
fingertips because what if we wanted to

00:51:46,869 --> 00:52:01,750
change so that's my take on that and as

00:51:53,950 --> 00:52:04,150
far as the ESI were we since it's very

00:52:01,750 --> 00:52:06,609
similar to the way that you would do

00:52:04,150 --> 00:52:09,369
something if you want an angular app in

00:52:06,609 --> 00:52:12,640
your page you you take a block or

00:52:09,369 --> 00:52:16,839
whatever other piece of content you

00:52:12,640 --> 00:52:20,410
create a endpoint or a route in Drupal

00:52:16,839 --> 00:52:23,920
that will serve the HTML that you want

00:52:20,410 --> 00:52:26,230
to go in that place and then when you're

00:52:23,920 --> 00:52:29,050
rendering a page your template for that

00:52:26,230 --> 00:52:32,440
thing is just the code for the es I

00:52:29,050 --> 00:52:34,359
include that Akamai or varnish or

00:52:32,440 --> 00:52:39,460
every other service would come back to

00:52:34,359 --> 00:52:41,079
Drupal and get one one way to think

00:52:39,460 --> 00:52:42,970
about it is if you were to take a block

00:52:41,079 --> 00:52:44,470
add bunch of fields to it for

00:52:42,970 --> 00:52:47,260
configuration you know some sort of like

00:52:44,470 --> 00:52:49,359
set of settings for that block then

00:52:47,260 --> 00:52:51,910
place the block on the page you could

00:52:49,359 --> 00:52:55,450
you could designate for every country

00:52:51,910 --> 00:52:57,339
code for instance use this separate

00:52:55,450 --> 00:53:00,640
fragment and so we do a lot of geocoding

00:52:57,339 --> 00:53:01,900
because NBA is world wide and so we want

00:53:00,640 --> 00:53:03,910
to be able to show different content to

00:53:01,900 --> 00:53:05,319
different countries based on where

00:53:03,910 --> 00:53:08,770
you're at so if you're in Canada for

00:53:05,319 --> 00:53:10,599
instance you might get a block at the

00:53:08,770 --> 00:53:12,250
top of the page that's dedicated to

00:53:10,599 --> 00:53:13,690
content about you know Canadian players

00:53:12,250 --> 00:53:17,160
or something that might be of more

00:53:13,690 --> 00:53:20,109
interest so you could use blocks to use

00:53:17,160 --> 00:53:22,180
sort of the what you can manage which

00:53:20,109 --> 00:53:23,619
fragments are going to get displayed all

00:53:22,180 --> 00:53:25,200
in the UI so you don't have to do a

00:53:23,619 --> 00:53:28,060
whole lot of communicative weeks later

00:53:25,200 --> 00:53:29,530
as you you know deploy to other

00:53:28,060 --> 00:53:32,349
countries you start creating you know

00:53:29,530 --> 00:53:33,849
content for other countries and then you

00:53:32,349 --> 00:53:36,430
know you can just manipulate that in

00:53:33,849 --> 00:53:37,900
that block configuration and then the

00:53:36,430 --> 00:53:41,290
template for that block is essentially

00:53:37,900 --> 00:53:43,329
just pulling together the es I include

00:53:41,290 --> 00:53:45,040
the the edge that include front you know

00:53:43,329 --> 00:53:47,260
with the appropriate fragment from your

00:53:45,040 --> 00:53:53,220
configuration and it's all conditional

00:53:47,260 --> 00:53:58,630
based on the geo-targeting ESI code

00:53:53,220 --> 00:54:01,839
thanks guys thanks for the took have two

00:53:58,630 --> 00:54:05,260
questions first one I'm curious what

00:54:01,839 --> 00:54:06,780
made you choose angular 2 over the other

00:54:05,260 --> 00:54:12,339
front-end frameworks

00:54:06,780 --> 00:54:19,270
um I mean in the end we we did a lot of

00:54:12,339 --> 00:54:24,750
comparison we were kind of hanging right

00:54:19,270 --> 00:54:27,190
on balance between angular and react and

00:54:24,750 --> 00:54:29,520
we were coming up on the deadline where

00:54:27,190 --> 00:54:34,119
we had to choose and had to start

00:54:29,520 --> 00:54:37,690
developing and just kind of on gut went

00:54:34,119 --> 00:54:40,140
with angular yeah early on there was

00:54:37,690 --> 00:54:42,700
there was sort of a there was sort of a

00:54:40,140 --> 00:54:44,500
game is the right word but it was

00:54:42,700 --> 00:54:46,370
basically fine and angular developer

00:54:44,500 --> 00:54:48,080
make them ripe

00:54:46,370 --> 00:54:49,670
something in react and find a react

00:54:48,080 --> 00:54:52,280
developer and make them write something

00:54:49,670 --> 00:54:53,810
in angular2 and depending on how well

00:54:52,280 --> 00:54:55,910
they were able to pick up the nuances of

00:54:53,810 --> 00:54:59,000
the new language that was going to help

00:54:55,910 --> 00:55:01,220
influence and because angular 2 was a

00:54:59,000 --> 00:55:03,650
little bit easier to pick up because it

00:55:01,220 --> 00:55:06,980
has some things from angular but a lot

00:55:03,650 --> 00:55:08,030
of concepts from react it was it was one

00:55:06,980 --> 00:55:10,520
of those things that was kind of the the

00:55:08,030 --> 00:55:11,960
push over the edge a little method I had

00:55:10,520 --> 00:55:17,030
actually forgotten we did the bake-off

00:55:11,960 --> 00:55:18,830
yeah also it also helps to note that we

00:55:17,030 --> 00:55:20,390
actually did spend a little bit of time

00:55:18,830 --> 00:55:23,150
talking with some of the Google

00:55:20,390 --> 00:55:25,760
developers of angular 2 and you'll find

00:55:23,150 --> 00:55:28,310
that angular 4 which is out now has

00:55:25,760 --> 00:55:30,200
baked in a lot of the things that we ran

00:55:28,310 --> 00:55:32,300
into and they use that kind of fine-tune

00:55:30,200 --> 00:55:35,600
development of angular 4 about that

00:55:32,300 --> 00:55:41,000
recently yeah thanks and second one do

00:55:35,600 --> 00:55:44,000
guys use preview so like preview of no

00:55:41,000 --> 00:55:46,370
content no condom yeah I'm just curious

00:55:44,000 --> 00:55:48,590
if you had any issues working with

00:55:46,370 --> 00:55:51,890
preview and micro-services and front and

00:55:48,590 --> 00:55:53,750
framework yeah we had a number of issues

00:55:51,890 --> 00:55:56,120
with you that was that was one of the

00:55:53,750 --> 00:55:59,480
things that we spent a lot of time early

00:55:56,120 --> 00:56:01,360
on trying to get you know like like the

00:55:59,480 --> 00:56:03,920
preview of an article page for instance

00:56:01,360 --> 00:56:06,290
right so editors are working fast plays

00:56:03,920 --> 00:56:09,220
they don't want to save it yet so they

00:56:06,290 --> 00:56:11,600
will want to preview that so we actually

00:56:09,220 --> 00:56:14,050
we had a lot of trouble getting preview

00:56:11,600 --> 00:56:15,830
to work with all of these other pieces

00:56:14,050 --> 00:56:17,450
there were just a lot of things that

00:56:15,830 --> 00:56:19,130
were interfering we probably revisit it

00:56:17,450 --> 00:56:21,230
now so yeah resolved a lot of other

00:56:19,130 --> 00:56:23,870
issues but one of the one of the things

00:56:21,230 --> 00:56:26,090
too to preview is I react we use a

00:56:23,870 --> 00:56:28,910
little bit of like workbench moderation

00:56:26,090 --> 00:56:31,400
to have editorial workflow so an editor

00:56:28,910 --> 00:56:32,960
will make a change and it'll actually

00:56:31,400 --> 00:56:35,390
save it as a draft and then they can

00:56:32,960 --> 00:56:36,910
just view the draft yeah so that way

00:56:35,390 --> 00:56:39,860
they're getting a much more lives

00:56:36,910 --> 00:56:42,850
representation of that page and just

00:56:39,860 --> 00:56:47,360
another note on preview from our journey

00:56:42,850 --> 00:56:50,200
not only on nba.com but also work we've

00:56:47,360 --> 00:56:54,860
done with preview on the NBA team sites

00:56:50,200 --> 00:56:59,240
find out what level of preview your

00:56:54,860 --> 00:56:59,960
editors need sometimes not even what

00:56:59,240 --> 00:57:03,200
they want

00:56:59,960 --> 00:57:06,320
what they need because the more you have

00:57:03,200 --> 00:57:09,800
to preview you almost end up with a

00:57:06,320 --> 00:57:13,010
hockey stick graph of effort when you

00:57:09,800 --> 00:57:16,310
start having to preview the home page

00:57:13,010 --> 00:57:20,510
with all of the articles that are saved

00:57:16,310 --> 00:57:24,020
in a draft state it can become quite a

00:57:20,510 --> 00:57:26,660
mess and a whole other level of content

00:57:24,020 --> 00:57:30,160
management just to manage your previews

00:57:26,660 --> 00:57:32,930
so the simpler you can keep your preview

00:57:30,160 --> 00:57:35,200
where it still meets your editors needs

00:57:32,930 --> 00:57:41,330
is very important

00:57:35,200 --> 00:57:44,240
six-month so this is going to be a kind

00:57:41,330 --> 00:57:46,520
of a vague and broad question but what

00:57:44,240 --> 00:57:48,560
were some of the big aha moments you

00:57:46,520 --> 00:57:50,839
guys had while developing the site where

00:57:48,560 --> 00:57:53,660
the lightbulb went off and the clouds

00:57:50,839 --> 00:57:55,339
parted and just something something

00:57:53,660 --> 00:57:57,920
major having for you something a lot of

00:57:55,339 --> 00:58:03,770
those yeah one of the biggest ones up up

00:57:57,920 --> 00:58:06,650
in my head is cash context there again

00:58:03,770 --> 00:58:09,320
there's a few out of the box and they

00:58:06,650 --> 00:58:17,150
seem they're the ones that you always

00:58:09,320 --> 00:58:21,730
need but they're very broad and writing

00:58:17,150 --> 00:58:24,290
your own can make a giant difference and

00:58:21,730 --> 00:58:26,420
not only the performance of your site

00:58:24,290 --> 00:58:29,420
but when your content becomes available

00:58:26,420 --> 00:58:32,359
because if they're too narrow stuff

00:58:29,420 --> 00:58:35,150
doesn't get updated that's one of the

00:58:32,359 --> 00:58:37,369
biggest ones another one is listen to

00:58:35,150 --> 00:58:39,410
your editorial staff yeah let them

00:58:37,369 --> 00:58:42,589
dictate what their because they think of

00:58:39,410 --> 00:58:45,920
your editorial staff as a consumer of

00:58:42,589 --> 00:58:48,440
your product right so getting prototype

00:58:45,920 --> 00:58:51,320
code in front of in the hands of an

00:58:48,440 --> 00:58:54,680
editor is going to let you fail early

00:58:51,320 --> 00:58:57,440
you know fail fast they're going to know

00:58:54,680 --> 00:58:58,910
that you know all this this thing is

00:58:57,440 --> 00:59:01,790
great you can drag and drop all this

00:58:58,910 --> 00:59:03,619
stuff that's really slow it's not it's a

00:59:01,790 --> 00:59:06,410
little bit sluggish I want to shave like

00:59:03,619 --> 00:59:08,900
a millisecond off of that time you know

00:59:06,410 --> 00:59:11,540
and so you know iterating with your

00:59:08,900 --> 00:59:13,430
editorial staff as quickly as possible I

00:59:11,540 --> 00:59:15,319
think is really key on

00:59:13,430 --> 00:59:18,109
previous life actually worked in a

00:59:15,319 --> 00:59:20,240
newsroom you know I was looking at

00:59:18,109 --> 00:59:21,589
journalism and I got into web

00:59:20,240 --> 00:59:23,930
development and then Drupal development

00:59:21,589 --> 00:59:26,569
working with newspapers and other

00:59:23,930 --> 00:59:28,970
editorial staff editors think completely

00:59:26,569 --> 00:59:31,400
different than developers and so working

00:59:28,970 --> 00:59:33,230
with them one on one getting their

00:59:31,400 --> 00:59:36,290
feedback is that was that was a really

00:59:33,230 --> 00:59:37,700
key moment and that really changed the

00:59:36,290 --> 00:59:41,030
game course in a lot of ways how we

00:59:37,700 --> 00:59:43,220
built the head Minotaur yet one one

00:59:41,030 --> 00:59:44,720
quick follow-up question what is one

00:59:43,220 --> 01:00:00,170
incident that would show up on the

00:59:44,720 --> 01:00:02,329
nba.com development blooper reel things

01:00:00,170 --> 01:00:06,349
were surprisingly smooth given the good

01:00:02,329 --> 01:00:10,730
effort yeah I mean obviously you know op

01:00:06,349 --> 01:00:14,319
cash was a yeah some choice words I

01:00:10,730 --> 01:00:16,670
think we had when that was discovered I

01:00:14,319 --> 01:00:22,250
I think I think another one you know

01:00:16,670 --> 01:00:25,869
along the lines of caching was storing

01:00:22,250 --> 01:00:29,510
user specific cash in between pages

01:00:25,869 --> 01:00:32,180
instead of static - for instance when

01:00:29,510 --> 01:00:33,910
you should be using static - you mean it

01:00:32,180 --> 01:00:36,410
causes a lot of issues if you have

01:00:33,910 --> 01:00:38,480
multiple administrators logged in the

01:00:36,410 --> 01:00:39,650
same user suddenly you start getting a

01:00:38,480 --> 01:00:42,230
lot of cash collision because it's

01:00:39,650 --> 01:00:43,849
trying to share that in the database so

01:00:42,230 --> 01:00:46,849
if you use you know triple static cash

01:00:43,849 --> 01:00:48,740
for instance it makes me laugh alot

01:00:46,849 --> 01:00:54,109
easier that was another thing we found

01:00:48,740 --> 01:00:56,809
as a performance issue thank you hello

01:00:54,109 --> 01:00:58,670
thanks for the great presentation my

01:00:56,809 --> 01:01:01,250
question circles around you talked about

01:00:58,670 --> 01:01:02,960
using local cache for some of the

01:01:01,250 --> 01:01:05,480
displays and I was wondering what was

01:01:02,960 --> 01:01:09,170
your strategy for updating dates because

01:01:05,480 --> 01:01:10,730
you showed an example of the live event

01:01:09,170 --> 01:01:12,950
page something in the windows cause

01:01:10,730 --> 01:01:15,049
changes this is supposed to change in

01:01:12,950 --> 01:01:18,109
real time so what was the strategy for

01:01:15,049 --> 01:01:19,880
that I talked about the strategy for

01:01:18,109 --> 01:01:21,870
hating life yeah well how are you

01:01:19,880 --> 01:01:26,460
updating the live scores in the look

01:01:21,870 --> 01:01:31,230
cash we pushing it out um yeah so in

01:01:26,460 --> 01:01:37,530
angular2 you developed services for each

01:01:31,230 --> 01:01:42,470
data source and between the services and

01:01:37,530 --> 01:01:45,090
our angular components they're aware of

01:01:42,470 --> 01:01:49,130
kind of how time-sensitive that date

01:01:45,090 --> 01:01:56,700
that particular piece of data is so

01:01:49,130 --> 01:02:00,510
something like the entire schedule for

01:01:56,700 --> 01:02:02,460
the season we're not going to be

01:02:00,510 --> 01:02:04,200
updating that every 10 seconds we're not

01:02:02,460 --> 01:02:07,590
going to be looking at that feed on

01:02:04,200 --> 01:02:09,630
every page load I think we may look at

01:02:07,590 --> 01:02:13,710
it every 10 15 minutes to pull a new

01:02:09,630 --> 01:02:18,660
copy in but things like live scoring for

01:02:13,710 --> 01:02:20,610
the game that is live right now we go

01:02:18,660 --> 01:02:24,300
and check every few seconds and it's

01:02:20,610 --> 01:02:27,630
really just in how you configure your

01:02:24,300 --> 01:02:30,510
services another another good strategy

01:02:27,630 --> 01:02:33,120
for doing live scoring too is if you

01:02:30,510 --> 01:02:35,550
have a service that is capable of like

01:02:33,120 --> 01:02:38,010
establishing a WebSocket then the

01:02:35,550 --> 01:02:39,420
browser can make a WebSocket connection

01:02:38,010 --> 01:02:41,580
and it keeps that connection open

01:02:39,420 --> 01:02:42,780
between you and the service it's a

01:02:41,580 --> 01:02:46,680
little bit trickier if you're bouncing

01:02:42,780 --> 01:02:48,120
between page and page but it's a really

01:02:46,680 --> 01:02:50,700
common strategy for live scoring to

01:02:48,120 --> 01:02:53,100
where you you keep a socket connection

01:02:50,700 --> 01:02:54,510
open and during during times of no

01:02:53,100 --> 01:02:56,640
transmission then it's just it's just

01:02:54,510 --> 01:02:59,250
open but nothing's happening so it's a

01:02:56,640 --> 01:03:01,740
very low bandwidth thing and then when

01:02:59,250 --> 01:03:04,770
the service the scoring service sees

01:03:01,740 --> 01:03:07,580
that a new score has updated its able to

01:03:04,770 --> 01:03:10,020
say hey everybody who's listening

01:03:07,580 --> 01:03:12,540
broadcast out the news the new score and

01:03:10,020 --> 01:03:14,370
so my browser then gets that ping from

01:03:12,540 --> 01:03:17,160
the open web sockets that the live score

01:03:14,370 --> 01:03:18,690
is updated updated in the page and then

01:03:17,160 --> 01:03:21,660
update that score in the local data

01:03:18,690 --> 01:03:24,330
store and then you can also use like a

01:03:21,660 --> 01:03:27,120
long pole effect so you know if say

01:03:24,330 --> 01:03:28,530
after 15 seconds I haven't received

01:03:27,120 --> 01:03:30,570
anything from that WebSocket

01:03:28,530 --> 01:03:32,520
communication let me go double-check and

01:03:30,570 --> 01:03:34,140
make a new request in

01:03:32,520 --> 01:03:37,020
the websocket so those are some other

01:03:34,140 --> 01:03:40,590
strategies to watch for me well thanks

01:03:37,020 --> 01:03:42,420
and so yes we're almost 5 minutes

01:03:40,590 --> 01:03:43,980
overtime so I think with that and we've

01:03:42,420 --> 01:03:46,710
run out of lines I think that's a good

01:03:43,980 --> 01:03:49,640
time to cut off the questions so thank

01:03:46,710 --> 01:03:49,640
you very much everybody

01:03:51,980 --> 01:03:59,220
and if you're injured on forget to check

01:03:56,490 --> 01:04:02,370
out Toby's other session at the opposite

01:03:59,220 --> 01:04:04,730
end of today on Dungeons and Dragons in

01:04:02,370 --> 01:04:04,730
Drupal

01:04:43,619 --> 01:04:48,380

YouTube URL: https://www.youtube.com/watch?v=4GvOdhm_eog


