Title: DrupalCon Portland 2013: DRUPAL 8 PLUGIN SYSTEM DEEP DIVE
Publication date: 2013-05-28
Playlist: DrupalCon Portland - May 2013
Description: 
	The Drupal 8 plugin system provides a new set of options within Drupal for discovery, instantiation and invocation beyond what traditional hooks have provided in past version of Drupal core. The plugin system provides the underlying structure to allow classes to sit in place of what has often been multiple disconnected hooks. Many subsystems in Drupal have been converted to plugins including blocks, entities field widgets and more. We'll discuss many of these at some level and try to communicate what appropriate plugin system usage looks like, what tools already exist, how to leverage them, and where to get more information on building your own plugin types.

A larger discussion around plugin discovery and annotations specifically will be had including discovery decorators and their interactions with the Managers and Factory interfaces. This topic is quite nuanced and many details will be conveyed to the audience including a couple different points of view.
Captions: 
	00:00:00,079 --> 00:00:06,899
okay how's that yeah all right so we're

00:00:05,370 --> 00:00:09,420
a couple minutes past we still got some

00:00:06,899 --> 00:00:10,889
people filing in here so we're just

00:00:09,420 --> 00:00:12,950
going to go ahead and get started and

00:00:10,889 --> 00:00:15,360
other people can catch up or whatever

00:00:12,950 --> 00:00:19,199
this is the Drupal 8 plugin deep dive

00:00:15,360 --> 00:00:22,199
session and so very quickly we wanted to

00:00:19,199 --> 00:00:24,359
introduce ourselves I'm Chris Vander

00:00:22,199 --> 00:00:26,550
water I'm with Commerce guys lead up

00:00:24,359 --> 00:00:29,340
over there i'm also the initiative owner

00:00:26,550 --> 00:00:32,550
for the Drupal 8 blocks and layouts

00:00:29,340 --> 00:00:34,500
initiative all that everybody introduced

00:00:32,550 --> 00:00:36,059
themselves well I also do James

00:00:34,500 --> 00:00:37,260
gilliland real quick he's not on the

00:00:36,059 --> 00:00:40,680
panel today because he couldn't make it

00:00:37,260 --> 00:00:42,210
to dribble con but he was going to if he

00:00:40,680 --> 00:00:45,270
had made it here I've left him up here

00:00:42,210 --> 00:00:47,280
because he was significant in the

00:00:45,270 --> 00:00:55,860
development of the plug-in system so

00:00:47,280 --> 00:00:57,870
he's still up there great music hi I'm

00:00:55,860 --> 00:01:01,140
Alex Brownstein I'm a software engineer

00:00:57,870 --> 00:01:03,930
for aquia I work for octo or office of

00:01:01,140 --> 00:01:09,360
the CTO and that actually gives me a lot

00:01:03,930 --> 00:01:12,780
of time to work on Drupal 8 quart I'm

00:01:09,360 --> 00:01:14,640
Tim Plunkett I work at Stanford Graduate

00:01:12,780 --> 00:01:22,619
School of Business as developer and I'm

00:01:14,640 --> 00:01:24,869
on the views and core team so I've got a

00:01:22,619 --> 00:01:26,280
handful of slides here that I'm just

00:01:24,869 --> 00:01:29,189
going to kind of walk through real

00:01:26,280 --> 00:01:32,130
quickly and this is an attempt at a

00:01:29,189 --> 00:01:35,689
visual explanation of what plugins

00:01:32,130 --> 00:01:38,340
really is I gave this same talk

00:01:35,689 --> 00:01:40,350
drupalcamp dallas and it went really

00:01:38,340 --> 00:01:41,909
really long because i had definitions

00:01:40,350 --> 00:01:43,290
for everything so we're not going to do

00:01:41,909 --> 00:01:46,049
that we're going to talk about the

00:01:43,290 --> 00:01:47,549
Drupal like specific stuff here and then

00:01:46,049 --> 00:01:51,750
acknowledge what's really just like

00:01:47,549 --> 00:01:54,240
plain old PHP as Larry Garfield says and

00:01:51,750 --> 00:01:56,250
will kind of take it from there our

00:01:54,240 --> 00:01:57,810
attempt here is probably going to be to

00:01:56,250 --> 00:01:59,729
spend like the first half telling you

00:01:57,810 --> 00:02:02,130
what this is and then maybe the last

00:01:59,729 --> 00:02:03,750
half doing question and answer and maybe

00:02:02,130 --> 00:02:06,090
showing some code examples or things

00:02:03,750 --> 00:02:08,369
like that so this is very much designed

00:02:06,090 --> 00:02:11,760
to be an interactive session start

00:02:08,369 --> 00:02:12,880
getting your questions ready so really

00:02:11,760 --> 00:02:15,430
quickly will run

00:02:12,880 --> 00:02:16,540
just kind of a glossary of terms we have

00:02:15,430 --> 00:02:19,120
a whole bunch of things that we throw

00:02:16,540 --> 00:02:20,800
around when we start talking about about

00:02:19,120 --> 00:02:22,960
plugins and we have plugin types and

00:02:20,800 --> 00:02:26,170
managers and discovery and factory and

00:02:22,960 --> 00:02:28,180
mappers and plugins themselves and all

00:02:26,170 --> 00:02:30,100
of this can be kind of daunting so I've

00:02:28,180 --> 00:02:32,770
tried to put it together into what I'm

00:02:30,100 --> 00:02:34,930
hoping will be a fairly concise visual

00:02:32,770 --> 00:02:37,660
representation of how this code flows

00:02:34,930 --> 00:02:39,760
and we'll talk about it what really is

00:02:37,660 --> 00:02:44,410
specific to Drupal and what would have

00:02:39,760 --> 00:02:46,510
worked anywhere anyhow right so the

00:02:44,410 --> 00:02:47,380
first and really one of the most

00:02:46,510 --> 00:02:49,450
important things that we're going to

00:02:47,380 --> 00:02:53,530
talk about here is the manager the

00:02:49,450 --> 00:02:55,570
manager is a class it does some stuff it

00:02:53,530 --> 00:02:57,400
does three major things and can be used

00:02:55,570 --> 00:02:59,170
as a really great place to attach

00:02:57,400 --> 00:03:02,350
various helper functions for your

00:02:59,170 --> 00:03:04,780
plug-in types if you dig through say the

00:03:02,350 --> 00:03:06,400
entity types manager it has all sorts of

00:03:04,780 --> 00:03:08,860
helpers on it for getting the

00:03:06,400 --> 00:03:12,100
controllers and various other things

00:03:08,860 --> 00:03:14,530
like that one of the responsibilities of

00:03:12,100 --> 00:03:16,960
the managers to do discovery discovery

00:03:14,530 --> 00:03:18,990
is the clear Drupal ISM in what we're

00:03:16,960 --> 00:03:23,920
doing here Drupal has an awful lot of

00:03:18,990 --> 00:03:26,080
configurable pneus in it and plugins is

00:03:23,920 --> 00:03:29,200
really kind of an answer to that in many

00:03:26,080 --> 00:03:30,940
ways plugins is defined like designed to

00:03:29,200 --> 00:03:34,180
replace what we've traditionally thought

00:03:30,940 --> 00:03:35,800
of as being info hooks so any sort of

00:03:34,180 --> 00:03:40,690
info hook that you might have in your

00:03:35,800 --> 00:03:44,260
own contribs in Drupal 8 yet and I'll

00:03:40,690 --> 00:03:49,000
get to that topic could likely be

00:03:44,260 --> 00:03:52,300
replaced with plugins so discoveries job

00:03:49,000 --> 00:03:54,490
is to go out and discover plugins if

00:03:52,300 --> 00:03:56,380
you've ever implemented an info hook you

00:03:54,490 --> 00:03:57,730
functionally done what discovery is

00:03:56,380 --> 00:04:00,700
trying to do through a different

00:03:57,730 --> 00:04:03,520
mechanism and so there is this metadata

00:04:00,700 --> 00:04:06,040
out there which it finds and parses and

00:04:03,520 --> 00:04:07,660
brings back one way or another there's

00:04:06,040 --> 00:04:09,520
some really cool stuff around metadata

00:04:07,660 --> 00:04:11,260
that tim has worked very very hard on

00:04:09,520 --> 00:04:12,850
and we'll show you that if we have time

00:04:11,260 --> 00:04:14,790
and what it's meant to do and how you

00:04:12,850 --> 00:04:18,299
can do some really cool stuff with it

00:04:14,790 --> 00:04:20,099
but for purposes of kind of the

00:04:18,299 --> 00:04:24,060
low-level conversation that we've

00:04:20,099 --> 00:04:26,370
started here you know it's the info hook

00:04:24,060 --> 00:04:28,259
implementation and unlike the way

00:04:26,370 --> 00:04:30,360
previous versions of Drupal have done

00:04:28,259 --> 00:04:32,849
this where a single module might have

00:04:30,360 --> 00:04:34,909
many of these sitting in its info hook

00:04:32,849 --> 00:04:38,220
implementation each one of these

00:04:34,909 --> 00:04:39,750
generally stands alone and we'll cover

00:04:38,220 --> 00:04:41,129
that topic a little bit as well you

00:04:39,750 --> 00:04:44,970
don't feel free to jump in on visit

00:04:41,129 --> 00:04:48,569
anytime once the meta data is returned

00:04:44,970 --> 00:04:50,159
back to discovery we have a methodology

00:04:48,569 --> 00:04:52,740
through which we can wrap decorators

00:04:50,159 --> 00:04:55,919
around the discovery mechanism in the

00:04:52,740 --> 00:04:58,229
metadata that comes back we are in

00:04:55,919 --> 00:05:02,449
process of kind of disassembling some of

00:04:58,229 --> 00:05:05,969
those right now in favor of more direct

00:05:02,449 --> 00:05:09,330
establishment of what we want to happen

00:05:05,969 --> 00:05:11,520
inside the manager so a great example of

00:05:09,330 --> 00:05:20,159
this is who and here is used an ultra

00:05:11,520 --> 00:05:24,240
hook amen brother okay yeah so yeah yeah

00:05:20,159 --> 00:05:26,219
exactly um so we have an alter decorator

00:05:24,240 --> 00:05:28,889
that takes all of the various collected

00:05:26,219 --> 00:05:30,840
in metadata and gives you an ultra hook

00:05:28,889 --> 00:05:32,699
for it and we're probably going to kill

00:05:30,840 --> 00:05:35,520
that before it's all out and you'll be

00:05:32,699 --> 00:05:37,139
able to just in your manager do that and

00:05:35,520 --> 00:05:39,840
we're going to provide a default manager

00:05:37,139 --> 00:05:41,729
that does that and if you want to use it

00:05:39,840 --> 00:05:43,349
then great the default manager works for

00:05:41,729 --> 00:05:46,770
you another example of this might be

00:05:43,349 --> 00:05:51,539
cashing or derivatives which is a topic

00:05:46,770 --> 00:05:53,490
that we may lightly cover but this this

00:05:51,539 --> 00:05:55,379
concept exists at least where we're

00:05:53,490 --> 00:05:57,569
likely to reduce it down as much as

00:05:55,379 --> 00:05:59,849
possible in favor of letting the manager

00:05:57,569 --> 00:06:01,650
handle most of that which means probably

00:05:59,849 --> 00:06:03,569
just derivatives as a decorator but

00:06:01,650 --> 00:06:08,610
we'll see what actually happens come

00:06:03,569 --> 00:06:11,129
release and then we have a factory this

00:06:08,610 --> 00:06:12,539
again is the managers responsibility the

00:06:11,129 --> 00:06:14,340
the three things that will be close to

00:06:12,539 --> 00:06:16,680
the manager are all its responsibilities

00:06:14,340 --> 00:06:19,349
and the factory is really just plain old

00:06:16,680 --> 00:06:21,479
PHP who hears done enough oo that you've

00:06:19,349 --> 00:06:23,759
ever written a factory for instantiating

00:06:21,479 --> 00:06:28,649
classes yeah this is it is exact same

00:06:23,759 --> 00:06:31,320
thing and so the manager can either use

00:06:28,649 --> 00:06:33,720
a factory class that exists

00:06:31,320 --> 00:06:35,760
where it can be a factory class itself

00:06:33,720 --> 00:06:38,220
I'm not going to get into that topic

00:06:35,760 --> 00:06:41,100
because it's mildly contentious but it

00:06:38,220 --> 00:06:43,710
can happen and what happens from there

00:06:41,100 --> 00:06:47,550
is you instantiate a plug-in woohoo or

00:06:43,710 --> 00:06:49,710
perhaps multiple plugins and this is

00:06:47,550 --> 00:06:52,200
again plain old PHP we are just

00:06:49,710 --> 00:06:54,570
instantiating a class generally speaking

00:06:52,200 --> 00:06:58,110
all plugins of a type are instantiated

00:06:54,570 --> 00:07:01,290
the same way there are some plug-in

00:06:58,110 --> 00:07:02,910
types in Drupal who code around this in

00:07:01,290 --> 00:07:04,620
certain ways we probably won't cover

00:07:02,910 --> 00:07:06,350
that topic unless some of those people

00:07:04,620 --> 00:07:09,450
are here and want to discuss it further

00:07:06,350 --> 00:07:12,750
but we will show you some examples of

00:07:09,450 --> 00:07:15,180
exactly how this happens and most

00:07:12,750 --> 00:07:18,030
importantly plugin and metadata for

00:07:15,180 --> 00:07:21,150
virtually all not all but virtually all

00:07:18,030 --> 00:07:24,600
plugins in Drupal 8 right now those are

00:07:21,150 --> 00:07:26,790
the same class so the class that you are

00:07:24,600 --> 00:07:30,980
instantiating also has the metadata on

00:07:26,790 --> 00:07:34,110
it in the form of annotations okay and

00:07:30,980 --> 00:07:36,120
finally there's this thing called a

00:07:34,110 --> 00:07:39,600
mapper the mappers really just business

00:07:36,120 --> 00:07:41,760
logic you can hand say an array of

00:07:39,600 --> 00:07:44,010
values to it and it can parse that array

00:07:41,760 --> 00:07:46,950
of values and determine which plugin

00:07:44,010 --> 00:07:49,890
configured how should be handed back to

00:07:46,950 --> 00:07:53,190
you and we do have an example of that

00:07:49,890 --> 00:07:56,600
actually in core at this point yeah it

00:07:53,190 --> 00:08:08,030
is we have one that is actively used now

00:07:56,600 --> 00:08:10,650
archiver yeah I am gay chicks and so

00:08:08,030 --> 00:08:12,540
quick code example and we were really

00:08:10,650 --> 00:08:14,220
close to the end of my slides so we are

00:08:12,540 --> 00:08:16,380
going to be digging into questions real

00:08:14,220 --> 00:08:18,000
quick here um I have two managers here I

00:08:16,380 --> 00:08:20,760
just grabbed code snippets from two

00:08:18,000 --> 00:08:22,020
different managers this one doesn't

00:08:20,760 --> 00:08:23,760
actually work this way if you look in

00:08:22,020 --> 00:08:25,860
head right now i reformatted it so that

00:08:23,760 --> 00:08:28,740
it would fit on my slide but this is the

00:08:25,860 --> 00:08:30,720
block manager and that is the entirety

00:08:28,740 --> 00:08:34,289
of the code in the block manager from

00:08:30,720 --> 00:08:36,030
class beginning to class end it has one

00:08:34,289 --> 00:08:39,120
function that's the construct method

00:08:36,030 --> 00:08:40,800
wherein it sets the various discovery

00:08:39,120 --> 00:08:42,300
and discovery decorators it needs and

00:08:40,800 --> 00:08:45,209
sets the particular factory

00:08:42,300 --> 00:08:48,209
needs their methods implemented on the

00:08:45,209 --> 00:08:50,430
managers which are in the interface that

00:08:48,209 --> 00:08:52,290
do the active discovery when you asked

00:08:50,430 --> 00:08:54,480
for it and do the class instantiation

00:08:52,290 --> 00:08:56,040
when you asked for it and mapping if you

00:08:54,480 --> 00:08:59,100
ever have need for that we aren't really

00:08:56,040 --> 00:09:02,190
going to cover that today but I want you

00:08:59,100 --> 00:09:04,260
to be aware that it exists and by

00:09:02,190 --> 00:09:07,709
contrast this is the archiver manager

00:09:04,260 --> 00:09:09,600
it's a little bit larger it uses the

00:09:07,709 --> 00:09:11,399
create instance method here which you

00:09:09,600 --> 00:09:12,959
may or may not be able to read the font

00:09:11,399 --> 00:09:15,690
was a little bit smaller for this one

00:09:12,959 --> 00:09:17,480
because there's more code and it also

00:09:15,690 --> 00:09:20,490
has to get instance these are the two

00:09:17,480 --> 00:09:24,470
the two methods that do factory

00:09:20,490 --> 00:09:27,600
instantiation and napping accordingly so

00:09:24,470 --> 00:09:30,240
with that there are a whole bunch of

00:09:27,600 --> 00:09:32,579
plugin managers in court on these are

00:09:30,240 --> 00:09:36,899
all but one of them excluding the test

00:09:32,579 --> 00:09:39,600
ones editors there's two editor managers

00:09:36,899 --> 00:09:41,190
and I didn't really feel like trying to

00:09:39,600 --> 00:09:43,589
differentiate them on the screen but

00:09:41,190 --> 00:09:48,329
there are two and they're used for

00:09:43,589 --> 00:09:50,760
totally different things whoa the Edit

00:09:48,329 --> 00:09:51,959
module is what for inline editing and

00:09:50,760 --> 00:09:54,209
they're going to rename it the in-place

00:09:51,959 --> 00:09:56,730
editor module and the other ones editor

00:09:54,209 --> 00:09:57,779
which is for WYSIWYG and yeah they both

00:09:56,730 --> 00:09:59,279
have the same quite they both have

00:09:57,779 --> 00:10:00,300
editor manager it's one of the more

00:09:59,279 --> 00:10:03,300
confusing things when you're debugging

00:10:00,300 --> 00:10:11,130
so they'll fix it but this is that's a

00:10:03,300 --> 00:10:15,000
good list so so we wrote this just the

00:10:11,130 --> 00:10:17,190
system actually like a year ago it got

00:10:15,000 --> 00:10:21,390
in maybe at this point something like

00:10:17,190 --> 00:10:23,399
that and we had no clue whether core was

00:10:21,390 --> 00:10:26,100
really going to use it obviously core

00:10:23,399 --> 00:10:28,050
did and this actually this isn't even

00:10:26,100 --> 00:10:30,930
every plug-in type if we go through here

00:10:28,050 --> 00:10:32,670
views plugins and views handlers are to

00:10:30,930 --> 00:10:37,220
plug-in managers that actually handle

00:10:32,670 --> 00:10:37,220
multiple plug-in types 22

00:10:42,570 --> 00:10:47,320
it's a lot it's a double digit number

00:10:45,400 --> 00:10:49,990
which would like double what i have on

00:10:47,320 --> 00:10:51,280
screen here and so they did some

00:10:49,990 --> 00:10:53,290
interesting things there so that they

00:10:51,280 --> 00:10:54,760
only had to write one manager and they

00:10:53,290 --> 00:10:58,780
can get away with some some cool stuff

00:10:54,760 --> 00:11:00,700
there so within all of these you have

00:10:58,780 --> 00:11:02,020
quite a list of cool stuff to kind of

00:11:00,700 --> 00:11:04,180
dig through and see how people went

00:11:02,020 --> 00:11:05,500
amended it not everybody implemented

00:11:04,180 --> 00:11:07,300
stuff the way I would have wanted them

00:11:05,500 --> 00:11:10,050
to but plenty are implemented very

00:11:07,300 --> 00:11:12,580
nicely and work very well I'm sure

00:11:10,050 --> 00:11:14,490
contributing that make me unhappy too

00:11:12,580 --> 00:11:20,800
but who cares we have an awesome system

00:11:14,490 --> 00:11:23,910
so um with that I think yeah no no

00:11:20,800 --> 00:11:26,610
you're on this panel but you can't talk

00:11:23,910 --> 00:11:31,030
so there's also some that aren't on here

00:11:26,610 --> 00:11:34,570
yet like for example image effects are

00:11:31,030 --> 00:11:38,050
not on this list but could be actions

00:11:34,570 --> 00:11:40,810
text filters text filters my name said

00:11:38,050 --> 00:11:43,570
yay I guess I didn't pull from head

00:11:40,810 --> 00:11:45,220
sorry so yes if anyone here is you know

00:11:43,570 --> 00:11:48,100
inspire to wanna kind of convert

00:11:45,220 --> 00:11:49,750
whatever is left in core that can use

00:11:48,100 --> 00:11:51,160
plugins that isn't you know there's a

00:11:49,750 --> 00:11:54,160
code sprint Friday and there's another

00:11:51,160 --> 00:11:56,680
four weeks before code freeze yeah which

00:11:54,160 --> 00:11:59,770
takes us back to in tow hooks right so

00:11:56,680 --> 00:12:01,630
um actually some of these I don't even

00:11:59,770 --> 00:12:02,980
know if all of these were necessarily in

00:12:01,630 --> 00:12:09,340
fact some of these are new things some

00:12:02,980 --> 00:12:10,660
aren't okay so a lot of they said a lot

00:12:09,340 --> 00:12:14,760
of this stuff is new to Korres so the

00:12:10,660 --> 00:12:18,340
conditions and constraints and rest for

00:12:14,760 --> 00:12:21,190
type data see cater but like so filled

00:12:18,340 --> 00:12:23,710
for matters and field which 'it's were

00:12:21,190 --> 00:12:26,500
the one thing i know in d 7 is was my

00:12:23,710 --> 00:12:28,360
least favorite info hooks but blocks

00:12:26,500 --> 00:12:30,430
anything where you have an info hook and

00:12:28,360 --> 00:12:33,190
then you have another hook that it

00:12:30,430 --> 00:12:35,800
called so hook block info hook block

00:12:33,190 --> 00:12:38,790
view oakfield format our info field for

00:12:35,800 --> 00:12:41,320
my review but yeah a lot of these were

00:12:38,790 --> 00:12:44,670
we're all in faux hawks I don't think or

00:12:41,320 --> 00:12:47,190
their new code to begin with and I think

00:12:44,670 --> 00:12:50,550
there's only the two or three info hooks

00:12:47,190 --> 00:12:52,350
left that would even make sense it as of

00:12:50,550 --> 00:12:55,230
the stands right now the only info hooks

00:12:52,350 --> 00:12:59,820
will probably ship with will be a hook

00:12:55,230 --> 00:13:01,380
menu or its derivatives and hook library

00:12:59,820 --> 00:13:03,750
info because we're not going to make our

00:13:01,380 --> 00:13:09,690
JavaScript things into plugins because

00:13:03,750 --> 00:13:11,130
that makes no sense okay so that's

00:13:09,690 --> 00:13:12,870
actually the end of the slides I have

00:13:11,130 --> 00:13:15,120
I'm just going to start pulling up code

00:13:12,870 --> 00:13:17,520
and hopefully digging through stuff but

00:13:15,120 --> 00:13:19,800
really I think I want to open it up for

00:13:17,520 --> 00:13:21,630
questions it is there anybody who's

00:13:19,800 --> 00:13:24,780
actively working with plugins right now

00:13:21,630 --> 00:13:27,750
in contributing into stuff I'd just come

00:13:24,780 --> 00:13:29,940
up to the mic yeah and and we'll start

00:13:27,750 --> 00:13:32,760
answering questions I really I'm going

00:13:29,940 --> 00:13:34,830
to bring up probably I mean blocks is

00:13:32,760 --> 00:13:36,360
what I know best but we have an awful

00:13:34,830 --> 00:13:38,520
lot of knowledge up here with regard to

00:13:36,360 --> 00:13:39,810
some of these various plugins systems so

00:13:38,520 --> 00:13:41,370
we can show some cool stuff if you have

00:13:39,810 --> 00:13:44,970
questions just come up to the mic but

00:13:41,370 --> 00:13:47,420
you have to come up to the mic really

00:13:44,970 --> 00:13:47,420
come on

00:13:52,690 --> 00:13:59,050
so I was trying to help out with the

00:13:55,030 --> 00:14:02,470
responsive toolbar and initially it only

00:13:59,050 --> 00:14:04,480
took links in that top level toolbar and

00:14:02,470 --> 00:14:07,720
now it can take render elements and I

00:14:04,480 --> 00:14:09,940
was feeling pretty good and then someone

00:14:07,720 --> 00:14:12,610
said oh but you should really have naked

00:14:09,940 --> 00:14:18,430
a plug-in and do blocks and I said oh I

00:14:12,610 --> 00:14:20,650
have no idea how to do that and so I'm

00:14:18,430 --> 00:14:23,350
hoping to to get some answers from this

00:14:20,650 --> 00:14:27,750
session and for a specific question for

00:14:23,350 --> 00:14:31,090
you can you name one module maybe two

00:14:27,750 --> 00:14:34,210
that would be a good model to work off

00:14:31,090 --> 00:14:36,760
of something not too complicated that

00:14:34,210 --> 00:14:39,730
gives me an idea how i can get started

00:14:36,760 --> 00:14:43,240
and plugins something i can emulate the

00:14:39,730 --> 00:14:44,980
tour module tou are they provide tips

00:14:43,240 --> 00:14:47,950
plugins so for anyone who hasn't seen

00:14:44,980 --> 00:14:50,170
the module it lets you it uses the

00:14:47,950 --> 00:14:51,730
joyride jquery plugin and it shows you

00:14:50,170 --> 00:14:55,360
like what different parts of your page

00:14:51,730 --> 00:14:57,850
do and each of those that you can

00:14:55,360 --> 00:14:59,920
provide these tips they're called and

00:14:57,850 --> 00:15:02,590
that the tour module it's since it's so

00:14:59,920 --> 00:15:04,810
it's new code and it's very one purpose

00:15:02,590 --> 00:15:07,300
it has really really clear steps you can

00:15:04,810 --> 00:15:09,450
see what does what and there's not all

00:15:07,300 --> 00:15:11,820
this baggage from like previous systems

00:15:09,450 --> 00:15:13,990
you know i mean the blocks and views are

00:15:11,820 --> 00:15:15,970
really good examples for doing hard

00:15:13,990 --> 00:15:17,170
things but that's after you've already

00:15:15,970 --> 00:15:18,610
figured out the baseline so i'd

00:15:17,170 --> 00:15:21,130
recommend using the tips plugin manager

00:15:18,610 --> 00:15:24,550
in the tour module as an example okay

00:15:21,130 --> 00:15:28,120
thanks that wasn't on my radar another

00:15:24,550 --> 00:15:30,190
one worth looking at this is easily the

00:15:28,120 --> 00:15:33,010
simplest plugin conversion in all of

00:15:30,190 --> 00:15:37,870
core was archiver's who in here is

00:15:33,010 --> 00:15:44,410
familiar with archiver yeah we can unzip

00:15:37,870 --> 00:15:45,850
crap who knew right I ran into this

00:15:44,410 --> 00:15:48,550
because one of my co-workers was using

00:15:45,850 --> 00:15:51,100
it on a Drupal 7 system and I was like

00:15:48,550 --> 00:15:52,930
how are you doing that so I went and I

00:15:51,100 --> 00:15:54,550
figured out what he was doing and I was

00:15:52,930 --> 00:15:56,710
like that's an info hook we need to

00:15:54,550 --> 00:15:58,720
replace it and the whole thing was

00:15:56,710 --> 00:15:59,980
already classes if you go and you look

00:15:58,720 --> 00:16:02,470
at the code that's in Drupal 8 in the

00:15:59,980 --> 00:16:04,780
code that's in Drupal 7 it didn't change

00:16:02,470 --> 00:16:06,370
it's the same code we just threw away

00:16:04,780 --> 00:16:09,310
the info hook and put a manager in place

00:16:06,370 --> 00:16:12,370
literally that's what the conversion was

00:16:09,310 --> 00:16:14,350
um no other conversion has been that

00:16:12,370 --> 00:16:17,080
simple but this was all already classes

00:16:14,350 --> 00:16:20,320
and objects and like I said from the

00:16:17,080 --> 00:16:23,350
factory forward it's plain old PHP so c

00:16:20,320 --> 00:16:26,950
HX actually did that conversion and it

00:16:23,350 --> 00:16:28,630
would I mean it stupid simple so if you

00:16:26,950 --> 00:16:30,160
want like it before after look at that

00:16:28,630 --> 00:16:33,760
in Drupal 7 look at it in Drupal 8

00:16:30,160 --> 00:16:38,710
you're gonna be like okay it's very very

00:16:33,760 --> 00:16:40,600
straightforward and obvious um in

00:16:38,710 --> 00:16:43,060
addition to that I believe it's possible

00:16:40,600 --> 00:16:46,200
to use a manager to invoke hooks right

00:16:43,060 --> 00:16:48,520
to still have hood base plugins you

00:16:46,200 --> 00:16:51,250
wouldn't want that problem with but but

00:16:48,520 --> 00:16:54,190
you probably could just in addition all

00:16:51,250 --> 00:16:56,650
right um my question was about the heart

00:16:54,190 --> 00:17:00,850
work I had some interesting discussions

00:16:56,650 --> 00:17:05,080
about plugins out with Tim on IRC say

00:17:00,850 --> 00:17:06,640
you have an entity that I'm going to

00:17:05,080 --> 00:17:09,670
make this abstract team so don't worry

00:17:06,640 --> 00:17:11,710
that uses a plug-in to do something but

00:17:09,670 --> 00:17:12,970
it also needs to use configuration for

00:17:11,710 --> 00:17:15,790
that particular plugin because the

00:17:12,970 --> 00:17:17,320
plug-in itself contains logic and if you

00:17:15,790 --> 00:17:19,900
save the entity you only want to specify

00:17:17,320 --> 00:17:22,720
its uses that plug-in and this is the

00:17:19,900 --> 00:17:27,060
configuration it's probably use case

00:17:22,720 --> 00:17:30,250
that is going to be required a lot in

00:17:27,060 --> 00:17:32,620
contribu give a short demonstration or

00:17:30,250 --> 00:17:36,400
an overview of schema of how that should

00:17:32,620 --> 00:17:41,050
be done in a good way I mean we can walk

00:17:36,400 --> 00:17:43,660
through blogs No can I try plugging in

00:17:41,050 --> 00:17:46,780
real quick I mean I don't think it's

00:17:43,660 --> 00:17:50,040
going to work but you're gonna see the

00:17:46,780 --> 00:17:50,040
screen so everyone tell me if it works

00:17:54,420 --> 00:18:08,050
huh it's very drupal blue too bad sorry

00:18:02,920 --> 00:18:13,990
um yeah so okay yeah I'll talk while you

00:18:08,050 --> 00:18:15,610
do that so the block block module got

00:18:13,990 --> 00:18:18,220
ported and then it got rewritten and

00:18:15,610 --> 00:18:20,800
then I got rewritten again and like

00:18:18,220 --> 00:18:24,120
three times and you know like 200 plus K

00:18:20,800 --> 00:18:26,470
each time it is a really good example of

00:18:24,120 --> 00:18:28,090
there was a really good example of that

00:18:26,470 --> 00:18:30,130
what you just described an entity that

00:18:28,090 --> 00:18:32,650
needs a plug-in to do a thing and it

00:18:30,130 --> 00:18:33,910
wants to store it etc but the block

00:18:32,650 --> 00:18:36,820
module has been around for a little

00:18:33,910 --> 00:18:38,950
while and it has a lot of baggage so

00:18:36,820 --> 00:18:41,410
it's not a real concise example of that

00:18:38,950 --> 00:18:43,630
but just the other last weekend I was

00:18:41,410 --> 00:18:46,270
working on porting the action module to

00:18:43,630 --> 00:18:49,870
make it not useless and but not like

00:18:46,270 --> 00:18:51,520
quite as crazy as rules and it actually

00:18:49,870 --> 00:18:53,460
followed the same exact architecture

00:18:51,520 --> 00:18:56,500
that we use for blocks where you have a

00:18:53,460 --> 00:18:59,860
entity that needs configuration for to

00:18:56,500 --> 00:19:01,120
store for its plug-in and now that we

00:18:59,860 --> 00:19:02,860
have two of them I mean it's not in

00:19:01,120 --> 00:19:05,320
court yet it will be but now that we

00:19:02,860 --> 00:19:08,770
have two of them I think we can take

00:19:05,320 --> 00:19:11,920
some steps to make that easier and more

00:19:08,770 --> 00:19:14,470
obvious and documented so oh I have this

00:19:11,920 --> 00:19:16,150
set up what do I you know I just extend

00:19:14,470 --> 00:19:18,370
this base class instead of figuring out

00:19:16,150 --> 00:19:19,720
again from scratch because I ended up

00:19:18,370 --> 00:19:27,970
doing the same exact things from the

00:19:19,720 --> 00:19:28,990
from each example so okay well no yeah

00:19:27,970 --> 00:19:30,640
let's take another question will come

00:19:28,990 --> 00:19:36,310
back to the archivist are the action

00:19:30,640 --> 00:19:39,790
stuff hello I would like to ask you to

00:19:36,310 --> 00:19:42,100
go briefly about standard like discovery

00:19:39,790 --> 00:19:45,160
decorators and factories that are used

00:19:42,100 --> 00:19:47,910
and what are they aim for if you can

00:19:45,160 --> 00:19:50,470
what the factories in what yeah

00:19:47,910 --> 00:19:53,440
discovery other discovery okay yeah yeah

00:19:50,470 --> 00:19:55,330
so there are two too many types of

00:19:53,440 --> 00:19:58,960
discovery right now just the info hook

00:19:55,330 --> 00:20:01,060
and the annotations right all right oh

00:19:58,960 --> 00:20:04,269
yeah those 14 tests okay right now

00:20:01,060 --> 00:20:07,269
there's a there's a discovery class that

00:20:04,269 --> 00:20:09,249
just uses like module of alcohol so that

00:20:07,269 --> 00:20:10,899
you don't have to actually do any

00:20:09,249 --> 00:20:12,700
conversions and you can leave your info

00:20:10,899 --> 00:20:14,679
hooks in place but the resulting code

00:20:12,700 --> 00:20:16,959
will be plugins not just procedural

00:20:14,679 --> 00:20:18,729
functions that's the one the other one

00:20:16,959 --> 00:20:20,919
is the static discovery and that's

00:20:18,729 --> 00:20:23,469
mostly just for tests and you just hand

00:20:20,919 --> 00:20:26,559
it a list of like this maps to this

00:20:23,469 --> 00:20:27,789
class and that's it's not intelligent it

00:20:26,559 --> 00:20:29,529
doesn't do anything you just it's for

00:20:27,789 --> 00:20:31,989
testing purposes the third and then

00:20:29,529 --> 00:20:34,659
actually you know useful one is this

00:20:31,989 --> 00:20:37,839
annotated class discovery and that's the

00:20:34,659 --> 00:20:41,109
thing that we mentioned it haven't shown

00:20:37,839 --> 00:20:42,969
yet which is how to your plug-in will

00:20:41,109 --> 00:20:48,099
have this metadata that gets read out

00:20:42,969 --> 00:20:49,869
and processed and stored and we'll get

00:20:48,099 --> 00:20:51,219
there I guess but so those are those the

00:20:49,869 --> 00:20:54,579
three kinds of discovery really you're

00:20:51,219 --> 00:20:56,229
just going to use annotated classes the

00:20:54,579 --> 00:20:59,289
info Hans basically just repeat

00:20:56,229 --> 00:21:01,179
backwards compatibility factories we

00:20:59,289 --> 00:21:03,489
have two main kinds of factories

00:21:01,179 --> 00:21:06,519
excluding the like specialized ones the

00:21:03,489 --> 00:21:08,799
one is just a calls new dollar class and

00:21:06,519 --> 00:21:13,179
dollar classes a string and that's it

00:21:08,799 --> 00:21:15,459
the other one calls a method and passes

00:21:13,179 --> 00:21:17,589
it the dependency injection container

00:21:15,459 --> 00:21:19,179
and you can use that to do all your

00:21:17,589 --> 00:21:21,489
dependency injection stuff and that's

00:21:19,179 --> 00:21:24,429
called container factory but they what

00:21:21,489 --> 00:21:29,950
that went in like yeah two weeks ago

00:21:24,429 --> 00:21:32,409
some stop using the internet so we can

00:21:29,950 --> 00:21:34,029
work on them yeah container factories is

00:21:32,409 --> 00:21:37,239
recent to course so now you get your

00:21:34,029 --> 00:21:39,989
plugins can have services injected into

00:21:37,239 --> 00:21:46,959
them please don't do that don't well

00:21:39,989 --> 00:21:48,279
views doesn't so yeah yeah I don't know

00:21:46,959 --> 00:21:55,499
if I answered in your actual question

00:21:48,279 --> 00:21:55,499
yes in the decorators decorators yeah

00:21:56,169 --> 00:22:01,460
yeah so the the decorators that we

00:21:58,940 --> 00:22:03,650
currently have are we have certain an

00:22:01,460 --> 00:22:05,450
altar decorator so that's basically once

00:22:03,650 --> 00:22:06,799
you once you read for example let's say

00:22:05,450 --> 00:22:08,919
you're using the annotated class

00:22:06,799 --> 00:22:10,940
discovery and you get back the the

00:22:08,919 --> 00:22:13,549
values of the annotations from the class

00:22:10,940 --> 00:22:16,700
it invokes you know altar hoax so that

00:22:13,549 --> 00:22:22,520
modules can can alter that we also have

00:22:16,700 --> 00:22:24,049
a cache decorator so that's and oh oh

00:22:22,520 --> 00:22:26,659
sorry a very important one we have a

00:22:24,049 --> 00:22:30,230
derivative decorator so the idea behind

00:22:26,659 --> 00:22:33,799
derivatives is let's say you have

00:22:30,230 --> 00:22:35,720
something like a menu block and you want

00:22:33,799 --> 00:22:37,820
but but you're so you know so in your

00:22:35,720 --> 00:22:39,289
system has a bunch of different menus

00:22:37,820 --> 00:22:40,669
you know you have the main menu the

00:22:39,289 --> 00:22:43,280
administration menu the tools menu

00:22:40,669 --> 00:22:45,650
whatever user menu whatever custom menus

00:22:43,280 --> 00:22:47,330
there are out there so you only have you

00:22:45,650 --> 00:22:52,640
have a single class called menu block

00:22:47,330 --> 00:22:55,159
but for every menu that is administrator

00:22:52,640 --> 00:22:57,200
configured you sort of expose in the

00:22:55,159 --> 00:22:58,700
blocks you I a separate block so that's

00:22:57,200 --> 00:23:00,049
the use case for derivatives any

00:22:58,700 --> 00:23:01,820
anything like that it's not just four

00:23:00,049 --> 00:23:04,929
blocks that that same use case exists in

00:23:01,820 --> 00:23:07,970
other plugins right yeah so if if

00:23:04,929 --> 00:23:10,760
discovery within plugins for places info

00:23:07,970 --> 00:23:15,950
hooks derivatives replace for each loops

00:23:10,760 --> 00:23:17,809
within info hooks so that's another kind

00:23:15,950 --> 00:23:19,789
of decorator that's and used one thing

00:23:17,809 --> 00:23:21,919
that Chris mentioned is that we're

00:23:19,789 --> 00:23:24,289
currently in progress of setting up a

00:23:21,919 --> 00:23:26,150
base class so you know now that we have

00:23:24,289 --> 00:23:27,950
all of these different managers when the

00:23:26,150 --> 00:23:29,750
plug-in system first went in we weren't

00:23:27,950 --> 00:23:32,240
sure how similar the different core

00:23:29,750 --> 00:23:35,210
managers would end up being so now that

00:23:32,240 --> 00:23:38,390
we have like 20 or so plugin managers in

00:23:35,210 --> 00:23:39,710
core we see how similar they are and so

00:23:38,390 --> 00:23:41,539
we're actually working to make them more

00:23:39,710 --> 00:23:43,220
similar to each other and then instead

00:23:41,539 --> 00:23:45,049
of them duplicating all those decisions

00:23:43,220 --> 00:23:47,480
like instead of 18 of the 20 core

00:23:45,049 --> 00:23:49,850
managers saying we want annotated class

00:23:47,480 --> 00:23:51,770
discovery with an altered decorator and

00:23:49,850 --> 00:23:53,960
a cache decorator and you know so in

00:23:51,770 --> 00:23:55,010
such and such that we can have a base

00:23:53,960 --> 00:23:56,419
class that sort of makes all those

00:23:55,010 --> 00:23:59,809
decisions and once we do that then

00:23:56,419 --> 00:24:01,460
there's also some argument for moving

00:23:59,809 --> 00:24:02,720
away from the decorator architecture and

00:24:01,460 --> 00:24:04,250
putting some of that logic directly on

00:24:02,720 --> 00:24:05,690
the manager there's there some pros and

00:24:04,250 --> 00:24:07,040
cons of each approach so it may be the

00:24:05,690 --> 00:24:07,680
case that that same functionality that

00:24:07,040 --> 00:24:10,220
currently exists

00:24:07,680 --> 00:24:12,660
decorator's will move to just

00:24:10,220 --> 00:24:14,970
functionality on the base manager class

00:24:12,660 --> 00:24:20,580
if depending on how the issue queue

00:24:14,970 --> 00:24:24,690
debate goes on that okay thank you who

00:24:20,580 --> 00:24:27,060
has ever used the trigger module okay

00:24:24,690 --> 00:24:28,830
you've used it more than I have the

00:24:27,060 --> 00:24:30,690
trigger module is removed from Drupal 8

00:24:28,830 --> 00:24:33,270
and it was the only thing that really

00:24:30,690 --> 00:24:35,790
actually used the action module and

00:24:33,270 --> 00:24:38,700
action modules just like dumb down rules

00:24:35,790 --> 00:24:41,250
module so but the idea was you have an

00:24:38,700 --> 00:24:44,670
info hook called hook action info and

00:24:41,250 --> 00:24:46,860
you provide a list of actions and it's

00:24:44,670 --> 00:24:49,620
sort of it's not exactly use but it's

00:24:46,860 --> 00:24:52,350
like on the content listing or the admin

00:24:49,620 --> 00:24:54,720
people you can block users and publish

00:24:52,350 --> 00:24:58,350
nodes and whatnot so you just have a

00:24:54,720 --> 00:25:00,600
list here and you know in Drupal style

00:24:58,350 --> 00:25:03,660
just a massive array and so the node

00:25:00,600 --> 00:25:05,520
public action is a is one of the actions

00:25:03,660 --> 00:25:07,770
and this is also met it's in the name of

00:25:05,520 --> 00:25:09,570
the function it should call later it

00:25:07,770 --> 00:25:12,060
only works on nodes it publishes your

00:25:09,570 --> 00:25:13,800
content it's not configurable and then

00:25:12,060 --> 00:25:16,050
this stuff is still let just left over

00:25:13,800 --> 00:25:18,840
from trigger module and the actual

00:25:16,050 --> 00:25:22,110
function is node published action and it

00:25:18,840 --> 00:25:24,000
takes a node and it sets it status to

00:25:22,110 --> 00:25:25,200
published and then it writes the

00:25:24,000 --> 00:25:27,390
watchdog and it doesn't actually even

00:25:25,200 --> 00:25:30,360
call safe save has managed somewhere

00:25:27,390 --> 00:25:38,130
else but that's the basic setup of just

00:25:30,360 --> 00:25:40,610
plain actions so yeah so the words like

00:25:38,130 --> 00:25:47,840
that tab

00:25:40,610 --> 00:25:53,900
oh yeah this there you go can you guys

00:25:47,840 --> 00:25:56,809
see that yeah that's blurry is it like

00:25:53,900 --> 00:26:04,070
fuzzy and then stop and then fuzzy and

00:25:56,809 --> 00:26:05,960
stop well okay let's see yeah just just

00:26:04,070 --> 00:26:12,980
feel free to hijack that one I just

00:26:05,960 --> 00:26:17,450
bring it like 20 I hope 20 more how's

00:26:12,980 --> 00:26:21,290
that all right i'm gonna make that go

00:26:17,450 --> 00:26:23,750
away whatever okay cool so instead of

00:26:21,290 --> 00:26:28,580
having so the equivalent of this

00:26:23,750 --> 00:26:32,330
function and it's info hook is all

00:26:28,580 --> 00:26:36,290
contained right here so you're in this

00:26:32,330 --> 00:26:38,720
published node class has a method that

00:26:36,290 --> 00:26:41,990
takes an entity sets its status and call

00:26:38,720 --> 00:26:47,299
save and instead of having an info hook

00:26:41,990 --> 00:26:49,520
it's right here so you have your ID you

00:26:47,299 --> 00:26:53,330
have a label that gets translated and it

00:26:49,520 --> 00:26:57,410
works on nodes and that's that's it so

00:26:53,330 --> 00:27:01,040
instead of having to write out an

00:26:57,410 --> 00:27:02,960
annotation class yeah yeah so so yeah

00:27:01,040 --> 00:27:05,150
right so instead of every time you want

00:27:02,960 --> 00:27:09,169
to add a new action before you had to go

00:27:05,150 --> 00:27:11,450
find your node hook and add a new like

00:27:09,169 --> 00:27:12,919
10 lines to this and then go somewhere

00:27:11,450 --> 00:27:15,770
else and put another procedural function

00:27:12,919 --> 00:27:18,620
now you can just drop in a file and it

00:27:15,770 --> 00:27:20,950
just gets picked up and this is the info

00:27:18,620 --> 00:27:23,750
hook per half and this is the rest of it

00:27:20,950 --> 00:27:26,690
so you'll notice this says at action

00:27:23,750 --> 00:27:29,870
this is a annotation and we use doctrine

00:27:26,690 --> 00:27:33,070
to parse our annotations and this just

00:27:29,870 --> 00:27:35,690
maps to another class that is hidden

00:27:33,070 --> 00:27:41,540
right here called Drupal core annotation

00:27:35,690 --> 00:27:45,290
action so this is just this provides the

00:27:41,540 --> 00:27:48,080
default values as well as documentation

00:27:45,290 --> 00:27:50,600
so this shows you what you can and

00:27:48,080 --> 00:27:52,820
should use to create a new action and

00:27:50,600 --> 00:27:54,140
how to document it so you know the

00:27:52,820 --> 00:27:57,740
plugin ID if you mean

00:27:54,140 --> 00:27:59,510
readable name and a URL so now you know

00:27:57,740 --> 00:28:01,220
you can use a URL and if you don't

00:27:59,510 --> 00:28:05,870
specify one it'll give it an actually

00:28:01,220 --> 00:28:11,480
empty string right and then the action

00:28:05,870 --> 00:28:13,400
manager we is that's okay so we use

00:28:11,480 --> 00:28:15,380
annotated classes and then we have an

00:28:13,400 --> 00:28:17,330
alter hook and then we're using this

00:28:15,380 --> 00:28:20,510
thing called container factory and

00:28:17,330 --> 00:28:27,710
that's the factory just looks like this

00:28:20,510 --> 00:28:30,650
container yeah and it just it just calls

00:28:27,710 --> 00:28:35,360
a create method with the impasses in the

00:28:30,650 --> 00:28:37,160
dependency injection container and you

00:28:35,360 --> 00:28:38,990
mentioned earlier that you can the

00:28:37,160 --> 00:28:41,960
managers are where you put useful

00:28:38,990 --> 00:28:43,610
methods so for example you know very

00:28:41,960 --> 00:28:46,610
often you want to get a list of all your

00:28:43,610 --> 00:28:48,020
actions but more often than that you

00:28:46,610 --> 00:28:50,390
want to get all the actions for a

00:28:48,020 --> 00:28:52,070
specific type so I want all the node

00:28:50,390 --> 00:28:55,460
actions now so I just tack on a new

00:28:52,070 --> 00:28:57,680
method get definitions by type it just

00:28:55,460 --> 00:29:00,890
gets all the definitions and then uses a

00:28:57,680 --> 00:29:03,260
ray filter in a anonymous function and

00:29:00,890 --> 00:29:05,900
and filters it all out so then in you

00:29:03,260 --> 00:29:13,580
know in code somewhere else you'd just

00:29:05,900 --> 00:29:16,730
be like you know this is there we go vim

00:29:13,580 --> 00:29:21,040
mode in an IDE it's tricky Matt you just

00:29:16,730 --> 00:29:24,130
be like manager get definitions by type

00:29:21,040 --> 00:29:26,390
node and then you'd have all of your

00:29:24,130 --> 00:29:33,320
it'd just be like calling the info hook

00:29:26,390 --> 00:29:35,960
yourself okay so yeah there for you now

00:29:33,320 --> 00:29:37,580
everything about plugins the actual

00:29:35,960 --> 00:29:46,010
question that was about configurable

00:29:37,580 --> 00:29:47,390
plugins so action there we go so this is

00:29:46,010 --> 00:29:50,000
going a little off topic because it's

00:29:47,390 --> 00:29:52,820
config entity so we have these concept

00:29:50,000 --> 00:29:54,080
of configuration entities like a view or

00:29:52,820 --> 00:29:58,730
an image style and it gets written out

00:29:54,080 --> 00:30:00,440
to yamo and this is this is the the

00:29:58,730 --> 00:30:02,870
entity that has the configuration of a

00:30:00,440 --> 00:30:06,440
plug-in so this one has an ID as a label

00:30:02,870 --> 00:30:10,090
has eut etc and then it has a plug-in

00:30:06,440 --> 00:30:17,720
and an actual let's see if this cool

00:30:10,090 --> 00:30:19,850
action action there we go so this is the

00:30:17,720 --> 00:30:22,879
yam will file for that configured plugin

00:30:19,850 --> 00:30:25,909
it knows this is what plug-in to call

00:30:22,879 --> 00:30:27,889
it's in English you know it's it works

00:30:25,909 --> 00:30:33,159
on a note a more complex one would be

00:30:27,889 --> 00:30:35,779
like where to go you don't have it oh

00:30:33,159 --> 00:30:41,570
right you didn't install you didn't

00:30:35,779 --> 00:30:45,470
reinstall Drupal okay well yeah these

00:30:41,570 --> 00:30:47,330
know it's not worth it the sum of these

00:30:45,470 --> 00:30:49,909
actions are configured in a way that you

00:30:47,330 --> 00:30:55,870
can just do this and you'll just have

00:30:49,909 --> 00:31:01,429
settings it's like oh yeah am I thinking

00:30:55,870 --> 00:31:03,169
block block right it looks like this

00:31:01,429 --> 00:31:05,269
where you just have a setting to write

00:31:03,169 --> 00:31:08,600
and then this gets this whole array gets

00:31:05,269 --> 00:31:09,919
passed to the plug-in so you use the one

00:31:08,600 --> 00:31:10,970
system to store the configuration for

00:31:09,919 --> 00:31:12,830
the other one and it just gets

00:31:10,970 --> 00:31:17,779
instantiated when you need it like in

00:31:12,830 --> 00:31:20,299
each organism so like the important the

00:31:17,779 --> 00:31:22,279
important point on that is that the the

00:31:20,299 --> 00:31:25,610
config entity in this case actually has

00:31:22,279 --> 00:31:27,889
a settings property and only this stuff

00:31:25,610 --> 00:31:29,830
in the settings property the array that

00:31:27,889 --> 00:31:31,789
sits in there is what's used to actually

00:31:29,830 --> 00:31:33,980
bootstrap and configure the plug-in

00:31:31,789 --> 00:31:36,559
right you don't want to pass the whole

00:31:33,980 --> 00:31:38,210
entity in there are a whole bunch of

00:31:36,559 --> 00:31:40,190
reasons for that that we could spend

00:31:38,210 --> 00:31:45,639
literally hours discussing much less

00:31:40,190 --> 00:31:50,000
days we have but the the point being

00:31:45,639 --> 00:31:52,759
like those settings are there isolated

00:31:50,000 --> 00:31:54,169
from everything else in the entity in

00:31:52,759 --> 00:31:57,379
the case of block like blocks a really

00:31:54,169 --> 00:31:59,870
good example because the region that a

00:31:57,379 --> 00:32:02,570
block exists in and it's wait aren't

00:31:59,870 --> 00:32:03,980
really things that matter to the plugin

00:32:02,570 --> 00:32:05,509
there are things that matter when it's

00:32:03,980 --> 00:32:07,429
rendered on screen when you're dealing

00:32:05,509 --> 00:32:10,669
with a whole bunch of block entities

00:32:07,429 --> 00:32:13,519
their various configuration but it's not

00:32:10,669 --> 00:32:14,960
at the same level as say how many users

00:32:13,519 --> 00:32:17,299
are we going to show in the who's online

00:32:14,960 --> 00:32:17,950
block right that's something the plug-in

00:32:17,299 --> 00:32:20,679
cares

00:32:17,950 --> 00:32:22,330
out and so I mean this is something that

00:32:20,679 --> 00:32:24,159
you kind of have to go over it with a

00:32:22,330 --> 00:32:25,980
fine-tooth comb when you run into one of

00:32:24,159 --> 00:32:28,000
these and make sure that you're really

00:32:25,980 --> 00:32:31,029
appropriately separating your entity

00:32:28,000 --> 00:32:33,700
from your plug-in configuration and it

00:32:31,029 --> 00:32:40,000
can be quite tricky but it's it's also

00:32:33,700 --> 00:32:43,210
well worth it in the end so do you pass

00:32:40,000 --> 00:32:45,010
out of the settings when creating a

00:32:43,210 --> 00:32:47,710
plug-in like creating a plug-in instance

00:32:45,010 --> 00:32:52,450
or only when the plugin actually needs

00:32:47,710 --> 00:32:54,429
it because that then you have so a lot

00:32:52,450 --> 00:32:56,679
of you could potentially end up with a

00:32:54,429 --> 00:32:58,330
lot of instances of the same plug-in but

00:32:56,679 --> 00:33:03,610
every one of them would have their own

00:32:58,330 --> 00:33:05,200
few configuration show because ok so in

00:33:03,610 --> 00:33:07,510
views a view is just a wrapper around

00:33:05,200 --> 00:33:09,820
displace see if your page display if

00:33:07,510 --> 00:33:11,919
your block display of a fee display and

00:33:09,820 --> 00:33:15,580
those are all plugins and the idea was

00:33:11,919 --> 00:33:17,679
if you want to just display a block on

00:33:15,580 --> 00:33:19,990
your page you don't want to have to load

00:33:17,679 --> 00:33:23,080
the entire page display of that view

00:33:19,990 --> 00:33:25,840
that's used somewhere else so we added a

00:33:23,080 --> 00:33:30,909
little layer to lazily instantiate them

00:33:25,840 --> 00:33:32,590
and I named it plug-in bag named after

00:33:30,909 --> 00:33:35,169
the symphony stuff that was like a

00:33:32,590 --> 00:33:36,639
parameter bag it's like a bag it's a

00:33:35,169 --> 00:33:39,039
collection that the order doesn't matter

00:33:36,639 --> 00:33:46,200
and you just reach in and then it's like

00:33:39,039 --> 00:33:51,490
Mary Poppins you know so that it sits

00:33:46,200 --> 00:33:57,580
yeah so this is the action bank and the

00:33:51,490 --> 00:34:00,940
action bag that sounds awesome where's

00:33:57,580 --> 00:34:03,909
my other class okay so in my entity in

00:34:00,940 --> 00:34:05,169
whoa in the construct all it does is

00:34:03,909 --> 00:34:07,990
just call parent construct and then

00:34:05,169 --> 00:34:10,270
stores my bag and I pass in the plug-in

00:34:07,990 --> 00:34:11,889
manager I pass in the plug-in and I

00:34:10,270 --> 00:34:14,730
passed in the configuration I know about

00:34:11,889 --> 00:34:18,069
so that's basically taking that file and

00:34:14,730 --> 00:34:20,589
saying okay here's what I know and go

00:34:18,069 --> 00:34:23,139
forth and give me plugins later so

00:34:20,589 --> 00:34:25,240
action bag in its constructor takes the

00:34:23,139 --> 00:34:28,330
plugin manager it takes a list of

00:34:25,240 --> 00:34:30,130
possible instance IDs that it may event

00:34:28,330 --> 00:34:32,920
we instantiate and then any

00:34:30,130 --> 00:34:34,360
configuration needed and stores it for

00:34:32,920 --> 00:34:37,090
later and then when it comes time to

00:34:34,360 --> 00:34:45,750
initialize it calls manager create

00:34:37,090 --> 00:34:48,430
instance with the configuration in short

00:34:45,750 --> 00:34:50,350
until the entity in this case the

00:34:48,430 --> 00:34:53,200
configuration entity needs the plug-in

00:34:50,350 --> 00:34:55,540
it doesn't exist and then once it needs

00:34:53,200 --> 00:34:57,130
it it instantiates it and does pass the

00:34:55,540 --> 00:35:01,480
entirety of the configuration that the

00:34:57,130 --> 00:35:05,220
plugin needs at that point but if you

00:35:01,480 --> 00:35:07,420
aren't necessarily going to be using

00:35:05,220 --> 00:35:09,250
config entities and plugins in

00:35:07,420 --> 00:35:12,430
conjunction all the time it's likely to

00:35:09,250 --> 00:35:15,910
happen a lot but it's it I'm getting

00:35:12,430 --> 00:35:17,890
feedback it's not okay it's you it's

00:35:15,910 --> 00:35:19,690
it's not something that absolutely has

00:35:17,890 --> 00:35:22,120
to be done by any stretch of the

00:35:19,690 --> 00:35:26,320
imagination there are there are plenty

00:35:22,120 --> 00:35:28,210
of ways to do it without it's also very

00:35:26,320 --> 00:35:30,760
likely that you're going to end up with

00:35:28,210 --> 00:35:33,130
a a configuration entity that might

00:35:30,760 --> 00:35:36,460
actually compose many plugins together

00:35:33,130 --> 00:35:39,550
if usual rules will do that page views

00:35:36,460 --> 00:35:40,930
does that yeah I mean they're only maybe

00:35:39,550 --> 00:35:44,770
for that they would like this right now

00:35:40,930 --> 00:35:46,360
where you have a plugin views filters

00:35:44,770 --> 00:35:50,110
and forth like a text format

00:35:46,360 --> 00:35:52,960
configuration do that is a contains

00:35:50,110 --> 00:35:54,850
filter plugins now so it's there is a

00:35:52,960 --> 00:35:56,350
model there's a lot of code there that

00:35:54,850 --> 00:35:58,510
you can like copy and paste rom and read

00:35:56,350 --> 00:36:00,820
and learn but do you think we can now

00:35:58,510 --> 00:36:02,620
take the steps to codify that and and

00:36:00,820 --> 00:36:08,140
make it easier to do that and can

00:36:02,620 --> 00:36:10,260
trigger on that is actually going to

00:36:08,140 --> 00:36:12,490
come down to you as a developer

00:36:10,260 --> 00:36:16,410
identifying what's relevant to the

00:36:12,490 --> 00:36:16,410
entity what's relevant to the plugin

00:36:16,440 --> 00:36:19,950
next question

00:36:23,960 --> 00:36:31,020
actually while while we wait for more

00:36:27,150 --> 00:36:32,550
people to come to the mic just here's

00:36:31,020 --> 00:36:34,440
show of hands who here is familiar with

00:36:32,550 --> 00:36:37,770
what configure nities are and why we

00:36:34,440 --> 00:36:39,630
have them and what purpose they serve ok

00:36:37,770 --> 00:36:41,339
I'd say that was like a dozen people

00:36:39,630 --> 00:36:46,460
less than 10 persuade less than ten

00:36:41,339 --> 00:36:48,930
percent ok so there was a question at an

00:36:46,460 --> 00:36:51,000
sort of an earlier call about sort of

00:36:48,930 --> 00:36:52,800
when when to use config entities when to

00:36:51,000 --> 00:36:56,240
use plugins and sort of what that whole

00:36:52,800 --> 00:36:58,880
distinction is so here's a quick summary

00:36:56,240 --> 00:37:00,839
so when the configuration system went in

00:36:58,880 --> 00:37:02,910
we just had this concept of

00:37:00,839 --> 00:37:05,040
configuration files so you know great we

00:37:02,910 --> 00:37:06,780
have you know and we could get rid of

00:37:05,040 --> 00:37:08,520
things like variable the variable table

00:37:06,780 --> 00:37:10,020
and variable get and variable set so if

00:37:08,520 --> 00:37:12,599
you want to store something like the

00:37:10,020 --> 00:37:14,790
site front page you put that in system

00:37:12,599 --> 00:37:16,950
dot or a system that sightings at yamo

00:37:14,790 --> 00:37:20,490
so that's a one that's a single

00:37:16,950 --> 00:37:22,109
configuration file but then we also sort

00:37:20,490 --> 00:37:24,180
of know that we have some configuration

00:37:22,109 --> 00:37:26,369
files that get that sort of follow a

00:37:24,180 --> 00:37:28,290
particular pattern but that the specific

00:37:26,369 --> 00:37:29,640
instances get created depending on what

00:37:28,290 --> 00:37:32,849
the user does so for example for image

00:37:29,640 --> 00:37:35,730
styles you know if the user adds a a

00:37:32,849 --> 00:37:37,230
large image style that's a whole set of

00:37:35,730 --> 00:37:38,760
configuration and then if they and then

00:37:37,230 --> 00:37:39,960
if the administrator adds a medium image

00:37:38,760 --> 00:37:41,970
style that's a whole nother set of

00:37:39,960 --> 00:37:44,579
configuration and so on its own same for

00:37:41,970 --> 00:37:46,020
views right every view you make so

00:37:44,579 --> 00:37:47,220
there's this idea of like there's a

00:37:46,020 --> 00:37:49,170
particular kind of schema of

00:37:47,220 --> 00:37:50,790
configuration like that defines an image

00:37:49,170 --> 00:37:52,710
style in the abstract and then there's

00:37:50,790 --> 00:37:56,430
the specific instances of like a large

00:37:52,710 --> 00:37:57,359
edge style a medium image style and at

00:37:56,430 --> 00:37:59,010
first those were just sort of

00:37:57,359 --> 00:38:00,299
configuration files that weren't treated

00:37:59,010 --> 00:38:03,359
in a special way but for various reasons

00:38:00,299 --> 00:38:06,619
it actually became really useful to

00:38:03,359 --> 00:38:09,660
codify those kinds of configurations as

00:38:06,619 --> 00:38:13,349
entities they're instantiated objects

00:38:09,660 --> 00:38:17,339
that gets stored which is pretty much

00:38:13,349 --> 00:38:19,020
what entities are so so that's the

00:38:17,339 --> 00:38:21,240
config anity system so configure nity

00:38:19,020 --> 00:38:22,980
represents basically a piece of

00:38:21,240 --> 00:38:24,180
configuration that gets stored and that

00:38:22,980 --> 00:38:26,940
can be that can exist in multiple

00:38:24,180 --> 00:38:31,470
instantiations in contrast a plug-in is

00:38:26,940 --> 00:38:33,150
a piece of behavior it exists you

00:38:31,470 --> 00:38:35,290
instantiate it within a particular

00:38:33,150 --> 00:38:37,780
request to accomplish some action

00:38:35,290 --> 00:38:39,940
and then it you know once the process

00:38:37,780 --> 00:38:42,730
stops it's out of memory and it's not

00:38:39,940 --> 00:38:45,700
stored so for example if you look at an

00:38:42,730 --> 00:38:46,810
image effect you know you you as part of

00:38:45,700 --> 00:38:49,090
an image style you're going to

00:38:46,810 --> 00:38:51,480
instantiate like a resize effect but

00:38:49,090 --> 00:38:55,510
what your intention that in PHP code

00:38:51,480 --> 00:38:57,670
telling you to run and then and then you

00:38:55,510 --> 00:38:58,780
don't need that effect object anymore so

00:38:57,670 --> 00:39:00,580
there's the distinction between for

00:38:58,780 --> 00:39:02,650
example the the configuration that

00:39:00,580 --> 00:39:04,330
represents an image style and each

00:39:02,650 --> 00:39:07,150
plug-in that represents an image effect

00:39:04,330 --> 00:39:08,890
and so it's really like sort of a unit

00:39:07,150 --> 00:39:10,630
of configuration storage versus a unit

00:39:08,890 --> 00:39:13,840
of behavior that you pass configuration

00:39:10,630 --> 00:39:17,970
to and that's a really good example of a

00:39:13,840 --> 00:39:21,310
config entity that is it's got in

00:39:17,970 --> 00:39:22,630
plugins that it's configuring yeah so

00:39:21,310 --> 00:39:24,640
when it's when it's an end to one

00:39:22,630 --> 00:39:26,950
scituate or 12 n situation like you know

00:39:24,640 --> 00:39:29,290
an image style contains an N image

00:39:26,950 --> 00:39:32,260
effects or review contains and displays

00:39:29,290 --> 00:39:36,190
or a text format contains and filters it

00:39:32,260 --> 00:39:37,980
is pretty easy to conceptualize about

00:39:36,190 --> 00:39:40,390
what you know what goes in which one

00:39:37,980 --> 00:39:41,860
with things like block it becomes a bit

00:39:40,390 --> 00:39:43,350
harder because the way our current block

00:39:41,860 --> 00:39:45,250
system works you know one block

00:39:43,350 --> 00:39:46,960
configure nity one unit of block

00:39:45,250 --> 00:39:49,180
configuration storage maps to a single

00:39:46,960 --> 00:39:50,620
block plugin so now you have a

00:39:49,180 --> 00:39:53,260
one-to-one relationship it becomes a

00:39:50,620 --> 00:39:55,110
little harder to reason about which goes

00:39:53,260 --> 00:39:57,610
where but you follow the same sort of

00:39:55,110 --> 00:39:59,710
principles of what represents the unit

00:39:57,610 --> 00:40:01,870
of storage and what represents the the

00:39:59,710 --> 00:40:04,690
behavior and one way to start thinking

00:40:01,870 --> 00:40:06,850
about that separation is to think what

00:40:04,690 --> 00:40:09,090
other situations can that plug-in be

00:40:06,850 --> 00:40:11,500
useful for so for example in core

00:40:09,090 --> 00:40:13,240
currently blocks are stored as

00:40:11,500 --> 00:40:14,680
individual units of configuration each

00:40:13,240 --> 00:40:17,380
block is stored as its own configuration

00:40:14,680 --> 00:40:20,050
entity it's some configuration file but

00:40:17,380 --> 00:40:24,430
maybe panels wants to introduce a

00:40:20,050 --> 00:40:26,740
concept of displays that store multiple

00:40:24,430 --> 00:40:29,620
block configurations as pains within a

00:40:26,740 --> 00:40:31,030
single unit of configuration so if you

00:40:29,620 --> 00:40:32,890
start thinking in terms of like okay so

00:40:31,030 --> 00:40:35,650
now like the behavior of rendering a

00:40:32,890 --> 00:40:39,040
block can be potentially via con trai

00:40:35,650 --> 00:40:40,600
black panels be the configuration for

00:40:39,040 --> 00:40:42,220
each for that plug-in or for a set of

00:40:40,600 --> 00:40:45,070
those plugins can actually be stored in

00:40:42,220 --> 00:40:46,450
a different config anity that's where

00:40:45,070 --> 00:40:48,250
sort of separating those two becomes

00:40:46,450 --> 00:40:49,029
useful because then as long as the block

00:40:48,250 --> 00:40:51,099
plug and only

00:40:49,029 --> 00:40:52,539
axon passed in configuration rather than

00:40:51,099 --> 00:40:55,449
making assumptions about how that

00:40:52,539 --> 00:40:57,099
configuration is stored it allows a

00:40:55,449 --> 00:40:58,929
module like panels to allow the

00:40:57,099 --> 00:41:00,459
configurations of blocks to be stored in

00:40:58,929 --> 00:41:03,039
a different way than what court defines

00:41:00,459 --> 00:41:04,390
us then what court provides and that's

00:41:03,039 --> 00:41:06,939
really useful when you start talking

00:41:04,390 --> 00:41:08,559
about if you've got a situation where

00:41:06,939 --> 00:41:10,539
you're you're building a plug-in that

00:41:08,559 --> 00:41:13,359
you know is going to be useful outside

00:41:10,539 --> 00:41:15,039
of your own circumstances you can build

00:41:13,359 --> 00:41:17,079
a single manager that makes the

00:41:15,039 --> 00:41:20,259
assumptions you need made for your

00:41:17,079 --> 00:41:22,599
implementation but if you if you take

00:41:20,259 --> 00:41:24,219
take care of your plugins appropriately

00:41:22,599 --> 00:41:25,630
then someone else can come along and

00:41:24,219 --> 00:41:27,939
reuse them in a completely different

00:41:25,630 --> 00:41:29,739
situation so in the case of blocks yes

00:41:27,939 --> 00:41:31,390
core currently has this block manager

00:41:29,739 --> 00:41:33,130
that assumes a one-to-one relationship

00:41:31,390 --> 00:41:36,039
between block entities and block plugins

00:41:33,130 --> 00:41:38,559
but it's not a requirement to be using

00:41:36,039 --> 00:41:39,939
it you could go out and do something

00:41:38,559 --> 00:41:41,769
totally different we also have a

00:41:39,939 --> 00:41:44,890
condition system that could be done the

00:41:41,769 --> 00:41:46,929
same way and frankly actions yeah that

00:41:44,890 --> 00:41:49,329
was the the logic behind the actions

00:41:46,929 --> 00:41:50,799
plugins versus the config is that rules

00:41:49,329 --> 00:41:53,949
is obviously going to run and reuse

00:41:50,799 --> 00:41:55,779
these and not have to rewrite all of it

00:41:53,949 --> 00:41:57,249
again so you know i mean the rules

00:41:55,779 --> 00:41:59,349
module completely duplicates what's in

00:41:57,249 --> 00:42:02,140
core because it's inadequate and now

00:41:59,349 --> 00:42:04,179
ideally it will be able to just swap out

00:42:02,140 --> 00:42:06,309
the parts it doesn't like and the rest

00:42:04,179 --> 00:42:08,589
will you write in action and will work

00:42:06,309 --> 00:42:12,309
anywhere which brings us to an

00:42:08,589 --> 00:42:13,719
interesting topic these managers within

00:42:12,309 --> 00:42:15,099
core at least all the managers are

00:42:13,719 --> 00:42:17,109
actually registered within the

00:42:15,099 --> 00:42:18,489
dependency injection container anybody

00:42:17,109 --> 00:42:20,469
in the room have the foggiest clue what

00:42:18,489 --> 00:42:21,789
I'm talking about their dependency

00:42:20,469 --> 00:42:25,479
injection container okay that's that's

00:42:21,789 --> 00:42:26,769
not that's not trivial so the dependency

00:42:25,479 --> 00:42:29,529
injection container currently knows

00:42:26,769 --> 00:42:32,559
about like basically any class within

00:42:29,529 --> 00:42:34,719
the system that's likely to be asked for

00:42:32,559 --> 00:42:37,719
on its own and needs to have some sort

00:42:34,719 --> 00:42:40,179
of dependency fulfilled in the case of

00:42:37,719 --> 00:42:42,669
most plug-in managers they currently

00:42:40,179 --> 00:42:44,499
need a list of all of them modules that

00:42:42,669 --> 00:42:47,319
exist because they're using the

00:42:44,499 --> 00:42:49,119
annotation based discovery system and so

00:42:47,319 --> 00:42:52,419
they get that injected into them when

00:42:49,119 --> 00:42:54,549
you ask for one but because they exist

00:42:52,419 --> 00:42:56,469
in the dependency injection container by

00:42:54,549 --> 00:42:59,709
virtue of that fact it actually means

00:42:56,469 --> 00:43:00,530
you could replace the V say the block

00:42:59,709 --> 00:43:03,950
manager

00:43:00,530 --> 00:43:05,870
your own class that may do different

00:43:03,950 --> 00:43:07,400
things this gives you a level of

00:43:05,870 --> 00:43:08,990
flexibility in core that you've not

00:43:07,400 --> 00:43:11,960
really had before because you can

00:43:08,990 --> 00:43:15,830
replace course actual implementation the

00:43:11,960 --> 00:43:17,480
code that is making these decisions you

00:43:15,830 --> 00:43:18,920
know if you if you take that and go

00:43:17,480 --> 00:43:21,340
really crazy with it I'm not suggesting

00:43:18,920 --> 00:43:24,560
this I'm just going crazy for a moment

00:43:21,340 --> 00:43:26,480
you could look at say the entity system

00:43:24,560 --> 00:43:28,940
and throw away the entity manager which

00:43:26,480 --> 00:43:32,690
is likely a really bad idea but you

00:43:28,940 --> 00:43:35,030
could write and and then you know you

00:43:32,690 --> 00:43:37,640
could get at your entities or their

00:43:35,030 --> 00:43:39,410
controllers or something like that in in

00:43:37,640 --> 00:43:41,870
different ways and through different

00:43:39,410 --> 00:43:44,240
methodologies it is unlikely that you

00:43:41,870 --> 00:43:47,540
need to do that more likely you'll end

00:43:44,240 --> 00:43:49,280
up creating new managers for existing

00:43:47,540 --> 00:43:50,960
plug-in types when you just need a

00:43:49,280 --> 00:43:51,950
slightly different implementation but

00:43:50,960 --> 00:43:54,080
the old one needs to continue

00:43:51,950 --> 00:43:56,960
functioning as well there are a lot of

00:43:54,080 --> 00:43:58,910
possibilities there and while we're

00:43:56,960 --> 00:44:01,430
talking about the swap ability of this

00:43:58,910 --> 00:44:04,130
the altar decorator that we have talked

00:44:01,430 --> 00:44:05,780
about with regard to the metadata when

00:44:04,130 --> 00:44:08,780
that comes back it actually comes back

00:44:05,780 --> 00:44:12,440
with the class that it's going to invoke

00:44:08,780 --> 00:44:15,320
which means that if you use the altar

00:44:12,440 --> 00:44:18,110
decorator people could actually swap out

00:44:15,320 --> 00:44:20,750
your plug in class whole hog so if we

00:44:18,110 --> 00:44:23,090
use the menu block example if you aren't

00:44:20,750 --> 00:44:25,400
say thrilled with the output that menu

00:44:23,090 --> 00:44:27,680
block has and you wanted to change the

00:44:25,400 --> 00:44:30,050
output completely you could extend the

00:44:27,680 --> 00:44:31,730
menu block class to some custom class

00:44:30,050 --> 00:44:35,000
use the altar decorator to put it in

00:44:31,730 --> 00:44:36,730
place for menu blocks and then from

00:44:35,000 --> 00:44:39,410
there you would be in a position to

00:44:36,730 --> 00:44:41,120
completely rewrite the output of all

00:44:39,410 --> 00:44:44,480
many blocks on the entire system

00:44:41,120 --> 00:44:47,690
simultaneously just write a write a

00:44:44,480 --> 00:44:50,180
single method override our build right

00:44:47,690 --> 00:44:52,130
and so this is this is a level of power

00:44:50,180 --> 00:44:53,510
that I don't know if the front Enders

00:44:52,130 --> 00:44:55,310
are likely to use it I know the

00:44:53,510 --> 00:44:56,390
developers are likely to use it but I

00:44:55,310 --> 00:44:59,690
don't know if the front Enders are

00:44:56,390 --> 00:45:02,330
likely to use it but really whole hog

00:44:59,690 --> 00:45:04,190
and since that class contains everything

00:45:02,330 --> 00:45:06,080
it contains the configuration form the

00:45:04,190 --> 00:45:08,000
validation for that form the submission

00:45:06,080 --> 00:45:09,440
for that form all of that stuff you

00:45:08,000 --> 00:45:10,960
really have the whole world at your

00:45:09,440 --> 00:45:13,630
fingertips there you can just

00:45:10,960 --> 00:45:17,050
replace it yeah for the menu black

00:45:13,630 --> 00:45:18,760
example you know a module like a module

00:45:17,050 --> 00:45:20,970
like menu block would of course follow

00:45:18,760 --> 00:45:23,860
best practices and make sure that all

00:45:20,970 --> 00:45:26,170
HTML markup that was output was done via

00:45:23,860 --> 00:45:28,840
a template right so for front-end

00:45:26,170 --> 00:45:30,790
developers to customize the mark-up of a

00:45:28,840 --> 00:45:32,530
menu block it would be overriding a

00:45:30,790 --> 00:45:34,410
template just like normal theming but

00:45:32,530 --> 00:45:37,030
the example that Chris was giving was uh

00:45:34,410 --> 00:45:39,280
like let's say the you know something

00:45:37,030 --> 00:45:41,020
more not necessarily the markup but

00:45:39,280 --> 00:45:42,880
let's say the the renderer a structure

00:45:41,020 --> 00:45:45,190
or some of the internal logic that the

00:45:42,880 --> 00:45:47,200
menu block implements for whatever

00:45:45,190 --> 00:45:49,450
reason you decide isn't doesn't suit

00:45:47,200 --> 00:45:50,650
your needs then that would be the kind

00:45:49,450 --> 00:45:51,880
of functionality you could replace with

00:45:50,650 --> 00:45:54,190
the class it's not that's not a tool

00:45:51,880 --> 00:45:57,550
that's meant for deeming it would be

00:45:54,190 --> 00:45:59,170
more to rent for changing the actual

00:45:57,550 --> 00:46:02,100
sort of functionality of the menu block

00:45:59,170 --> 00:46:04,420
but any plugin manager that implements

00:46:02,100 --> 00:46:07,870
alterations like this you're going to

00:46:04,420 --> 00:46:11,170
have that ability on so I mean and the

00:46:07,870 --> 00:46:13,990
vast majority of them do so you can do

00:46:11,170 --> 00:46:17,230
some really all avail I don't know if

00:46:13,990 --> 00:46:19,210
the type data does oh wow I that's true

00:46:17,230 --> 00:46:21,910
okay all that all the annotated ones now

00:46:19,210 --> 00:46:24,880
have alters type data still uses info

00:46:21,910 --> 00:46:27,100
hooks for some other reasons we'll fix

00:46:24,880 --> 00:46:31,530
that if you want to come help fix that

00:46:27,100 --> 00:46:33,730
find us on friday which is tomorrow um

00:46:31,530 --> 00:46:35,920
what are you pulling up now I was just

00:46:33,730 --> 00:46:37,300
showing that you could take over when

00:46:35,920 --> 00:46:39,610
you block and decide that they don't get

00:46:37,300 --> 00:46:42,400
a form anymore you could do the hood do

00:46:39,610 --> 00:46:44,110
that you could totally do that no form

00:46:42,400 --> 00:46:46,420
for you yeah one of the other things

00:46:44,110 --> 00:46:48,700
that we we haven't really touched on at

00:46:46,420 --> 00:46:53,260
all is that plugins actually have this

00:46:48,700 --> 00:46:55,360
notion of contextual ax t and so there

00:46:53,260 --> 00:46:58,300
are a set of base classes which you can

00:46:55,360 --> 00:47:00,550
extend and use which make your plugins

00:46:58,300 --> 00:47:04,900
context-aware and at that point they're

00:47:00,550 --> 00:47:08,470
actually consuming various objects say

00:47:04,900 --> 00:47:10,720
like a node or a string or a user or

00:47:08,470 --> 00:47:14,350
something like that and so you can

00:47:10,720 --> 00:47:16,840
actually define what sort of constraints

00:47:14,350 --> 00:47:20,220
are on that object and so like can you

00:47:16,840 --> 00:47:20,220
pull up the node type condition

00:47:23,160 --> 00:47:32,260
yeah so just look at the annotation so

00:47:29,920 --> 00:47:34,600
in this annotation there's actually an

00:47:32,260 --> 00:47:37,330
array of contexts it currently says node

00:47:34,600 --> 00:47:39,460
note is just the name that I chose for

00:47:37,330 --> 00:47:42,850
it there but underneath node it actually

00:47:39,460 --> 00:47:44,590
specifies the type of type data that it

00:47:42,850 --> 00:47:47,890
is and any constraints on that so it

00:47:44,590 --> 00:47:50,410
says we are going to having entity type

00:47:47,890 --> 00:47:52,660
data and the constraint of entity type

00:47:50,410 --> 00:47:54,130
node so you can only pass notes through

00:47:52,660 --> 00:47:56,710
here if you handed it a user it would

00:47:54,130 --> 00:48:00,370
actually like throw an exception and say

00:47:56,710 --> 00:48:03,670
you can't do that so what's really cool

00:48:00,370 --> 00:48:05,770
about this is that this this gives us

00:48:03,670 --> 00:48:07,300
kind of a if you've you see tools or

00:48:05,770 --> 00:48:09,580
panels or anything like that this gives

00:48:07,300 --> 00:48:11,500
us the the same sort of structure rules

00:48:09,580 --> 00:48:13,120
does these same sort of things where

00:48:11,500 --> 00:48:15,970
there are certain conditions or certain

00:48:13,120 --> 00:48:18,940
blocks or certain actions that only work

00:48:15,970 --> 00:48:22,210
if you have a note available or they

00:48:18,940 --> 00:48:24,790
only work on a node and so for example

00:48:22,210 --> 00:48:27,730
you can't very well show a node title if

00:48:24,790 --> 00:48:29,440
you don't have a node so why would we

00:48:27,730 --> 00:48:33,100
give you a block to show a node title

00:48:29,440 --> 00:48:35,110
right these sorts of things the only

00:48:33,100 --> 00:48:39,160
plugins in core that are using it right

00:48:35,110 --> 00:48:41,470
now is conditions we are likely to give

00:48:39,160 --> 00:48:43,420
blocks the ability to do it but might

00:48:41,470 --> 00:48:45,970
not have an implementation of it in core

00:48:43,420 --> 00:48:47,650
but the base system for doing it does

00:48:45,970 --> 00:48:49,990
have test coverage so we can do that

00:48:47,650 --> 00:48:54,300
with with pretty good surety of of

00:48:49,990 --> 00:48:58,390
what's going on there we got a question

00:48:54,300 --> 00:49:00,960
so with all these classes being used

00:48:58,390 --> 00:49:02,980
throughout system and modules

00:49:00,960 --> 00:49:04,990
incorporating some of the base classes

00:49:02,980 --> 00:49:07,570
are there any visual tools that would

00:49:04,990 --> 00:49:09,670
just give us a snapshot of what some

00:49:07,570 --> 00:49:12,610
modules are using and all the methods

00:49:09,670 --> 00:49:13,840
available Dungey office I mean this is

00:49:12,610 --> 00:49:17,140
not an endorsement I don't work for

00:49:13,840 --> 00:49:20,440
jetbrains but get phpstorm it's worth it

00:49:17,140 --> 00:49:24,760
or IntelliJ which is its big brother the

00:49:20,440 --> 00:49:27,580
same thing but yeah I'm a vim guy but

00:49:24,760 --> 00:49:29,590
I'm using phpstorm now because it's just

00:49:27,580 --> 00:49:31,060
there's too much there's I mean you know

00:49:29,590 --> 00:49:33,850
API dr. Claude org I pulled this up

00:49:31,060 --> 00:49:34,500
earlier shows you what these are all the

00:49:33,850 --> 00:49:38,490
config Andy

00:49:34,500 --> 00:49:41,190
and stuff but it is hard to see and it's

00:49:38,490 --> 00:49:42,540
hard to discover like or what is this

00:49:41,190 --> 00:49:45,540
module doing because I mean the file

00:49:42,540 --> 00:49:50,970
structure structure is verbose to say

00:49:45,540 --> 00:49:52,770
the least and you've been working really

00:49:50,970 --> 00:49:54,870
hard to trim that down lately yeah I

00:49:52,770 --> 00:49:58,530
deleted two levels of directories but

00:49:54,870 --> 00:50:00,090
it's still like eight yeah so that's

00:49:58,530 --> 00:50:02,100
that's worth talking you can see it up

00:50:00,090 --> 00:50:04,680
here at the top this is in core modules

00:50:02,100 --> 00:50:08,010
node lib Drupal node plugin condition

00:50:04,680 --> 00:50:12,630
node type those are directories that's a

00:50:08,010 --> 00:50:14,790
lot yeah I mean it's it's it's psi 0

00:50:12,630 --> 00:50:16,950
most of it is p sr 0 and some of it is

00:50:14,790 --> 00:50:19,440
our convention so that we are protecting

00:50:16,950 --> 00:50:21,120
against namespace clashes I mean we want

00:50:19,440 --> 00:50:25,890
to do all this work and then have it not

00:50:21,120 --> 00:50:26,970
work and contribute to our at the

00:50:25,890 --> 00:50:30,570
keynote this morning he kind of talked

00:50:26,970 --> 00:50:34,230
about that you know where it's for the

00:50:30,570 --> 00:50:37,380
best I swear it is so um so when

00:50:34,230 --> 00:50:39,870
annotations went in I was I was very

00:50:37,380 --> 00:50:43,320
adamant that we needed to know about who

00:50:39,870 --> 00:50:45,840
was the owner right what what module or

00:50:43,320 --> 00:50:49,200
subsystem declared this plugin type

00:50:45,840 --> 00:50:51,930
exists and then what plug-in type is it

00:50:49,200 --> 00:50:54,180
because a single subsystem or module

00:50:51,930 --> 00:50:58,350
could declare multiples say I don't know

00:50:54,180 --> 00:51:00,150
views and so when when you look at that

00:50:58,350 --> 00:51:02,700
you want to know that this is a views

00:51:00,150 --> 00:51:04,320
field this is views cash you don't just

00:51:02,700 --> 00:51:06,510
want to know this is cash because guess

00:51:04,320 --> 00:51:08,730
what everybody and their dog might have

00:51:06,510 --> 00:51:13,020
a cash plugin tight so you can't just

00:51:08,730 --> 00:51:14,820
squat the cash namespace right and so I

00:51:13,020 --> 00:51:16,200
was very adamant that we had to have

00:51:14,820 --> 00:51:18,720
these two directories worth of

00:51:16,200 --> 00:51:22,800
separation tim has worked really hard on

00:51:18,720 --> 00:51:24,570
giving us better annotations so you've

00:51:22,800 --> 00:51:26,220
seen the action annotation and it's

00:51:24,570 --> 00:51:28,680
that's default the entity type

00:51:26,220 --> 00:51:30,950
annotation is a really great example of

00:51:28,680 --> 00:51:33,840
this it sets default controllers and

00:51:30,950 --> 00:51:37,050
some default like base keys and things

00:51:33,840 --> 00:51:39,240
like that for various things and so it's

00:51:37,050 --> 00:51:41,490
really smart stuff but we didn't have

00:51:39,240 --> 00:51:44,460
that initially we just had an at plug-in

00:51:41,490 --> 00:51:46,060
annotation which basically gave you an

00:51:44,460 --> 00:51:48,370
annotation as an

00:51:46,060 --> 00:51:50,980
ray that you could then treat kind of

00:51:48,370 --> 00:51:53,770
like you might have an info hooks array

00:51:50,980 --> 00:51:57,040
and that sort of stuff but because we

00:51:53,770 --> 00:51:59,920
have we have these annotations now we

00:51:57,040 --> 00:52:01,720
could in a worst-case scenario if two

00:51:59,920 --> 00:52:04,090
different plug-in types ended up in the

00:52:01,720 --> 00:52:06,250
same cache directory they should have

00:52:04,090 --> 00:52:08,080
different annotation classes on them so

00:52:06,250 --> 00:52:09,550
we'll still have a separation even if we

00:52:08,080 --> 00:52:12,850
don't have one that's separated by

00:52:09,550 --> 00:52:14,020
directory so we're still being paranoid

00:52:12,850 --> 00:52:18,360
we've just figured out how to be

00:52:14,020 --> 00:52:18,360
paranoid without as many directories

00:52:18,540 --> 00:52:22,330
also two of those directories as Tim

00:52:21,010 --> 00:52:24,490
mentioned come from just sort of having

00:52:22,330 --> 00:52:25,600
to follow PS r0 standard just because

00:52:24,490 --> 00:52:26,950
that's sort of the only standard that's

00:52:25,600 --> 00:52:30,310
available now but there is an issue in

00:52:26,950 --> 00:52:32,920
the queue to move to a what may end up

00:52:30,310 --> 00:52:35,710
becoming a PSR for standard is it a four

00:52:32,920 --> 00:52:38,650
or five will be well the timing that's

00:52:35,710 --> 00:52:40,270
up which one lands first but but it's

00:52:38,650 --> 00:52:42,370
currently a proposal but basically

00:52:40,270 --> 00:52:44,230
allows it's sort of a new autoloading

00:52:42,370 --> 00:52:45,790
standard that's proposed by by different

00:52:44,230 --> 00:52:47,590
PHP projects that allows shallower

00:52:45,790 --> 00:52:49,360
directories for use cases like we have

00:52:47,590 --> 00:52:51,940
so potentially will will be able to get

00:52:49,360 --> 00:52:53,680
to directory shallower for all our for

00:52:51,940 --> 00:52:58,110
all classes implemented by modules not

00:52:53,680 --> 00:53:02,260
just plugins yeah the f was a framework

00:52:58,110 --> 00:53:05,200
interoperability group i think if the

00:53:02,260 --> 00:53:06,660
google does a thing but yeah PS are for

00:53:05,200 --> 00:53:08,800
if you're interested in that kind of

00:53:06,660 --> 00:53:11,110
it's pretty it's a pretty interesting

00:53:08,800 --> 00:53:13,660
read if the google does the thing i'm

00:53:11,110 --> 00:53:15,780
waiting for your browser yeah it's it's

00:53:13,660 --> 00:53:20,470
on github it's which is cool too and

00:53:15,780 --> 00:53:22,510
mailing lists and whatnot but yeah so

00:53:20,470 --> 00:53:25,270
we've thrown an awful lot at you from

00:53:22,510 --> 00:53:27,670
the perspective of what's sitting here

00:53:25,270 --> 00:53:29,110
I'm I think like what would what would

00:53:27,670 --> 00:53:30,730
be good that we haven't really done yet

00:53:29,110 --> 00:53:32,280
and we don't have a lot of time left is

00:53:30,730 --> 00:53:36,280
can we just let's just pull up the

00:53:32,280 --> 00:53:40,990
plug-in manager interface real quick the

00:53:36,280 --> 00:53:43,840
plugin manager interface is I mean yeah

00:53:40,990 --> 00:53:46,780
so discovery and the manager are really

00:53:43,840 --> 00:53:49,390
the two clear Drupal isms here there are

00:53:46,780 --> 00:53:51,710
four methods on the manager that we're

00:53:49,390 --> 00:53:54,260
going to talk about

00:53:51,710 --> 00:53:56,359
no man on the manager interface it's

00:53:54,260 --> 00:53:59,630
just remember oh yeah okay all right

00:53:56,359 --> 00:54:02,300
nope even better okay so it implements

00:53:59,630 --> 00:54:05,780
yeah I guess pull up base or pull up

00:54:02,300 --> 00:54:07,670
those interfaces one of the two so is

00:54:05,780 --> 00:54:10,220
the plugin manager interface actually

00:54:07,670 --> 00:54:11,599
extends three other interfaces the

00:54:10,220 --> 00:54:13,720
factory interface the discovery

00:54:11,599 --> 00:54:17,960
interface in the mapper interface and

00:54:13,720 --> 00:54:19,820
these have one one and two accordingly

00:54:17,960 --> 00:54:22,430
so the discovery interface has two

00:54:19,820 --> 00:54:24,650
methods the factory interface house one

00:54:22,430 --> 00:54:26,780
and the mapper interface has one and so

00:54:24,650 --> 00:54:29,720
discovery is as you might suspect

00:54:26,780 --> 00:54:32,030
responsible for discovery and it has the

00:54:29,720 --> 00:54:34,430
methods of get definitions and get

00:54:32,030 --> 00:54:36,230
definition and so you can get individual

00:54:34,430 --> 00:54:39,380
plug-in definitions or you can get all

00:54:36,230 --> 00:54:42,500
of them simultaneously the factory

00:54:39,380 --> 00:54:44,570
oftentimes calls the get definition for

00:54:42,500 --> 00:54:45,470
whatever ID was passed to it and it

00:54:44,570 --> 00:54:47,270
finds out the class and that

00:54:45,470 --> 00:54:50,690
instantiates that class and hands it off

00:54:47,270 --> 00:54:53,960
to you and then as I said the mapper is

00:54:50,690 --> 00:54:56,480
kind of a clear use case for specific

00:54:53,960 --> 00:55:00,050
business logic that you're you might

00:54:56,480 --> 00:55:02,000
have we were using it in lieu of config

00:55:00,050 --> 00:55:04,310
entities for a while until those landed

00:55:02,000 --> 00:55:07,810
and we convert it over to them the

00:55:04,310 --> 00:55:10,580
archiver manager is using it for

00:55:07,810 --> 00:55:12,500
determining which archiver to use so you

00:55:10,580 --> 00:55:14,630
handed a file name and it goes oh that's

00:55:12,500 --> 00:55:16,400
a zip file and then it loads up does it

00:55:14,630 --> 00:55:19,220
plug in and unzips it and gives you

00:55:16,400 --> 00:55:22,849
stuff right so that's that's kind of the

00:55:19,220 --> 00:55:25,580
idea there but managers really at their

00:55:22,849 --> 00:55:27,650
core are just these four methods get

00:55:25,580 --> 00:55:30,050
definition get definitions create

00:55:27,650 --> 00:55:32,510
instance get instance that's all that

00:55:30,050 --> 00:55:33,770
has to be in a manager and actually

00:55:32,510 --> 00:55:35,330
there are some managers that don't even

00:55:33,770 --> 00:55:36,800
implement all of that because they

00:55:35,330 --> 00:55:38,690
extend the base manager class that we

00:55:36,800 --> 00:55:42,140
provided which tries to give you some

00:55:38,690 --> 00:55:45,980
same defaults so we've tried to keep

00:55:42,140 --> 00:55:48,560
these as simple as possible the one

00:55:45,980 --> 00:55:50,420
thing I would encourage you to do is if

00:55:48,560 --> 00:55:53,270
you find yourself writing a custom

00:55:50,420 --> 00:55:56,080
factory class stop and go am I ever

00:55:53,270 --> 00:55:59,390
going to reuse this if the answer is no

00:55:56,080 --> 00:56:02,089
right your logic in the managers create

00:55:59,390 --> 00:56:04,219
instance it will solve a lot of

00:56:02,089 --> 00:56:07,019
headaches for you in the long term

00:56:04,219 --> 00:56:08,670
and and one other point I just want to

00:56:07,019 --> 00:56:10,170
come back to with the question around

00:56:08,670 --> 00:56:12,239
you know like there's a lot of classes

00:56:10,170 --> 00:56:14,339
in Drupal 8 and how do we sort of you

00:56:12,239 --> 00:56:15,900
know navigate them either you know if we

00:56:14,339 --> 00:56:16,920
don't want to use phpstorm or if we want

00:56:15,900 --> 00:56:20,219
to navigate them some way other than

00:56:16,920 --> 00:56:21,299
through phpstorm and that's that's a

00:56:20,219 --> 00:56:23,880
question that's a broader than just

00:56:21,299 --> 00:56:25,170
plugins plugins is just one area in

00:56:23,880 --> 00:56:27,170
which we're using object oriented

00:56:25,170 --> 00:56:29,219
programming with in Drupal 8 we're using

00:56:27,170 --> 00:56:31,079
object-oriented interpolate and lots of

00:56:29,219 --> 00:56:32,910
other areas so we have a lot of classes

00:56:31,079 --> 00:56:35,369
and a lot of interfaces and so I think

00:56:32,910 --> 00:56:37,049
it's it's sort of a community challenge

00:56:35,369 --> 00:56:38,999
so I guess I point it's on you know

00:56:37,049 --> 00:56:42,059
challenge all of us to find out to find

00:56:38,999 --> 00:56:45,539
out how we can improve our documentation

00:56:42,059 --> 00:56:47,279
on do improve you know tools and and

00:56:45,539 --> 00:56:48,599
sort of what are the best practices that

00:56:47,279 --> 00:56:51,150
you know if we're before becoming an

00:56:48,599 --> 00:56:54,059
object-oriented project you know how do

00:56:51,150 --> 00:56:55,349
we make that friendly for people yeah I

00:56:54,059 --> 00:56:57,930
hate to turn this into like an

00:56:55,349 --> 00:57:00,719
advertisement for JetBrains but project

00:56:57,930 --> 00:57:02,489
is really good it is really really good

00:57:00,719 --> 00:57:04,109
so if you haven't stopped by their booth

00:57:02,489 --> 00:57:06,839
they are here and they have yo-yos I

00:57:04,109 --> 00:57:10,109
would encourage you to their products

00:57:06,839 --> 00:57:13,289
reasonably priced and has been really

00:57:10,109 --> 00:57:19,499
helpful in development of d8 just so you

00:57:13,289 --> 00:57:22,759
know yeah that's time so we'll be here

00:57:19,499 --> 00:57:27,170
and available to answer questions but

00:57:22,759 --> 00:57:27,170

YouTube URL: https://www.youtube.com/watch?v=T5y3dJYHb_A


