Title: DrupalCon Portland 2013: HIGH PERFORMANCE DRUPAL WITH MARIADB (A MYSQL BRANCH)
Publication date: 2013-05-28
Playlist: DrupalCon Portland - May 2013
Description: 
	Behind every successful Drupal website, there exists a well tuned database. It is no secret that a default configured MySQL will not get you far in the long term, hence the art of performance tuning MySQL for Drupal at scale.

MariaDB is a backwards compatible, drop-in replacement to MySQL, that has gained much momentum in recent times, and tends to be the default in many distributions of choice now. With its additional feature set, one can take advantage of the better query optimizer, more performant key caches, an opensource threadpool for multiple connections with short running queries and binary log group commit for when your database needs grow beyond a single instance to a replicated one. Learn about cases of using GIS with Drupal & MariaDB.

Learn how to take advantage of the new features in MariaDB, to get Drupal to scale. The talk will also touch on new developments around MariaDB Galera Cluster and how that can be used for read/write scaling of Drupal.

In conclusion there will also be a case study featuring a popular site with over 50,000 entries, scaling better with MariaDB.

As an aside, Drupal was one of the first few opensource projects that recommended MariaDB alongside MySQL so this is a great turn of events overall.
Captions: 
	00:00:00,000 --> 00:00:06,540
thank you all for coming it is the last

00:00:04,140 --> 00:00:12,780
talked up today and I'm in between you

00:00:06,540 --> 00:00:15,630
and your beer I'm here to talk to you a

00:00:12,780 --> 00:00:18,990
little bit about Drupal at high

00:00:15,630 --> 00:00:22,080
performance especially when you're using

00:00:18,990 --> 00:00:28,859
the mysql database and here's an

00:00:22,080 --> 00:00:32,880
alternative called Maria DB okay is this

00:00:28,859 --> 00:00:34,800
better this Mike doesn't seem to like we

00:00:32,880 --> 00:00:42,719
come longer so it seems left to bend oh

00:00:34,800 --> 00:00:46,860
is this better okay okay so first things

00:00:42,719 --> 00:00:49,920
first how many of you here use MySQL if

00:00:46,860 --> 00:00:53,969
you I was gonna save you don't use it

00:00:49,920 --> 00:00:55,770
you should fill up your head okay how

00:00:53,969 --> 00:00:59,579
many of you have heard of Maria DB

00:00:55,770 --> 00:01:03,690
before that's good how many of you here

00:00:59,579 --> 00:01:06,000
use Maria TV okay so a bunch of you

00:01:03,690 --> 00:01:08,430
already use Maria DB so that is there is

00:01:06,000 --> 00:01:10,710
likelihood that you may not learn many

00:01:08,430 --> 00:01:13,470
new things because you're already part

00:01:10,710 --> 00:01:16,080
of the maury TV community however i'm

00:01:13,470 --> 00:01:18,390
here to also help you maybe make more

00:01:16,080 --> 00:01:20,490
use of maria DB and if you are using

00:01:18,390 --> 00:01:24,479
maria DB on the site and would like a

00:01:20,490 --> 00:01:27,509
case study please send me an email so a

00:01:24,479 --> 00:01:30,600
little bit about me I am Colin Charles

00:01:27,509 --> 00:01:34,680
you can email me at Colin at Maria DB

00:01:30,600 --> 00:01:38,280
org I'm also active on the twitter if

00:01:34,680 --> 00:01:45,090
you are on Twitter consider sending me a

00:01:38,280 --> 00:01:48,420
tweet say hi i am the meridia begat

00:01:45,090 --> 00:01:50,700
money program I should probably tell you

00:01:48,420 --> 00:01:54,869
that sky SQL and Monty program have

00:01:50,700 --> 00:01:57,180
agreed to merge about a month ago so I

00:01:54,869 --> 00:02:00,869
guess very soon I'll be the Marie do big

00:01:57,180 --> 00:02:04,140
guy at Sky SQL however if you have been

00:02:00,869 --> 00:02:07,129
familiar with the MySQL world and

00:02:04,140 --> 00:02:09,899
realize that MySQL was then purchased by

00:02:07,129 --> 00:02:12,330
Sun and Sun meant was then purchased by

00:02:09,899 --> 00:02:13,890
Oracle you might be thinking is this

00:02:12,330 --> 00:02:16,500
marae debriefing safe

00:02:13,890 --> 00:02:19,080
for me to continue using and yes it is

00:02:16,500 --> 00:02:21,810
because Maria DB is actually governed by

00:02:19,080 --> 00:02:27,030
a foundation very much like the Drupal

00:02:21,810 --> 00:02:30,360
foundation so there can never be one and

00:02:27,030 --> 00:02:35,420
one controlling entity buying over maria

00:02:30,360 --> 00:02:38,340
DB so consider this mysql done right i

00:02:35,420 --> 00:02:42,510
used to work at mysql a be for a very

00:02:38,340 --> 00:02:45,569
long time making mysql and then i joined

00:02:42,510 --> 00:02:48,860
son when they acquired us but I left as

00:02:45,569 --> 00:02:51,420
soon as Oracle I proposed acquires fun I

00:02:48,860 --> 00:02:54,480
have worked on the Fedora project as

00:02:51,420 --> 00:02:59,570
well I was on the very first fesco board

00:02:54,480 --> 00:03:03,080
anybody who use fedora wow it's cool and

00:02:59,570 --> 00:03:08,790
I used to also work on openoffice.org

00:03:03,080 --> 00:03:10,860
anybody is that Wow okay so I was

00:03:08,790 --> 00:03:13,110
responsible for some of the presentation

00:03:10,860 --> 00:03:18,320
module in openoffice and even i use

00:03:13,110 --> 00:03:21,440
keynote today my history with Drupal I

00:03:18,320 --> 00:03:24,420
have to admit I've spent more time on

00:03:21,440 --> 00:03:27,329
mediawiki and wordpress schemas and

00:03:24,420 --> 00:03:29,280
helping those projects then I've helped

00:03:27,329 --> 00:03:32,970
Drupal which is sad because I've

00:03:29,280 --> 00:03:35,660
actually known Drupal since 2005 where I

00:03:32,970 --> 00:03:38,610
was introduced to civic CRM and a

00:03:35,660 --> 00:03:41,880
aspiration tech advocacy day in San

00:03:38,610 --> 00:03:43,920
Francisco I really wish to contribute

00:03:41,880 --> 00:03:46,590
more to Drupal but I'm not a front end

00:03:43,920 --> 00:03:52,140
guy so I guess soon I'll be contributing

00:03:46,590 --> 00:03:53,280
stuff on the back end this is the rough

00:03:52,140 --> 00:03:57,660
agenda of what we're going to discuss

00:03:53,280 --> 00:03:59,370
today and i have approximately 15

00:03:57,660 --> 00:04:01,590
minutes to do that with some questions

00:03:59,370 --> 00:04:04,320
i'm not sure if we should do questions

00:04:01,590 --> 00:04:08,459
and answers before after but let's try

00:04:04,320 --> 00:04:11,120
to take it after all so for most of this

00:04:08,459 --> 00:04:14,630
talk I'm going to reference marini be 10

00:04:11,120 --> 00:04:17,760
which is currently software that is not

00:04:14,630 --> 00:04:20,250
G a release so I'm going to mention some

00:04:17,760 --> 00:04:23,729
stuff that is only available in alpha

00:04:20,250 --> 00:04:27,630
release but it will be GA in like at the

00:04:23,729 --> 00:04:30,690
end of july so it's almost as good as

00:04:27,630 --> 00:04:32,820
being GA and we run it in production and

00:04:30,690 --> 00:04:37,260
we know customers that run in production

00:04:32,820 --> 00:04:39,750
as well so I'm guessing you're you as a

00:04:37,260 --> 00:04:42,840
Drupal user would have great experience

00:04:39,750 --> 00:04:44,880
with marini be because on the 4th screen

00:04:42,840 --> 00:04:47,700
of set up a database it says set up

00:04:44,880 --> 00:04:50,070
mysql maury DB or equivalent so you've

00:04:47,700 --> 00:04:52,170
probably already seen this word Maria DB

00:04:50,070 --> 00:04:54,360
but you just maybe not take an action a

00:04:52,170 --> 00:04:55,800
handful of you have maybe about ten

00:04:54,360 --> 00:04:58,140
percent of you have taken action which

00:04:55,800 --> 00:05:00,030
is great hopefully at the end of this

00:04:58,140 --> 00:05:02,370
talk the rest of you will take action

00:05:00,030 --> 00:05:07,560
and convert from mysql to mariadb as

00:05:02,370 --> 00:05:09,060
well it has also been recommended in the

00:05:07,560 --> 00:05:12,600
Drupal documentation as part of the

00:05:09,060 --> 00:05:15,780
requirements alongside MySQL it is used

00:05:12,600 --> 00:05:20,550
in tests but which means Drupal core

00:05:15,780 --> 00:05:24,000
runs well against Maria d be ii ager and

00:05:20,550 --> 00:05:26,610
barracuda also has marae to be available

00:05:24,000 --> 00:05:30,270
for it and we received our first bug

00:05:26,610 --> 00:05:32,340
from a drupal user during the 5 3 series

00:05:30,270 --> 00:05:36,450
days so we received our first bug from a

00:05:32,340 --> 00:05:38,910
drupal user i would say about a year and

00:05:36,450 --> 00:05:40,710
a half ago so we've definitely had users

00:05:38,910 --> 00:05:42,870
saying hey we have you know bugs that

00:05:40,710 --> 00:05:45,570
the query didn't materialize in a

00:05:42,870 --> 00:05:48,630
similar way as it did in mysql so we've

00:05:45,570 --> 00:05:51,780
and we spent time since then making

00:05:48,630 --> 00:05:55,890
maria ADB's query optimizer even better

00:05:51,780 --> 00:05:58,230
and we naturally have some bugs when we

00:05:55,890 --> 00:06:03,740
were kicking the tires on improving the

00:05:58,230 --> 00:06:06,180
query optimizer so what is maria DB

00:06:03,740 --> 00:06:11,210
marie DB is a community of a branch of

00:06:06,180 --> 00:06:14,100
mysql very much like drupal is a

00:06:11,210 --> 00:06:17,070
community-oriented project it is not

00:06:14,100 --> 00:06:18,780
backed by any one company it is it is

00:06:17,070 --> 00:06:22,080
you know governed by a foundation is

00:06:18,780 --> 00:06:24,450
also a feature enhanced MySQL but I

00:06:22,080 --> 00:06:26,520
guess we I want to make clear that it's

00:06:24,450 --> 00:06:29,160
not a patch set against MySQL any longer

00:06:26,520 --> 00:06:31,590
if for some absurd reason MySQL isn't

00:06:29,160 --> 00:06:33,510
developed in the future we're happy to

00:06:31,590 --> 00:06:36,570
continue developing Maria DB we have

00:06:33,510 --> 00:06:38,430
lots of core developers who know what

00:06:36,570 --> 00:06:41,540
we're doing so it doesn't make a

00:06:38,430 --> 00:06:44,030
difference if mysql is divided

00:06:41,540 --> 00:06:46,520
or not but I also don't want to say that

00:06:44,030 --> 00:06:48,770
we're a fork because we merge with MySQL

00:06:46,520 --> 00:06:51,530
on a monthly basis so we're still a

00:06:48,770 --> 00:06:55,520
branch with a huge amount of different

00:06:51,530 --> 00:06:57,710
code and different features inside we

00:06:55,520 --> 00:06:59,900
are also fully 100% compatible with

00:06:57,710 --> 00:07:02,300
MySQL we are a drop-in replacement and

00:06:59,900 --> 00:07:04,280
we have feature complete to the T so if

00:07:02,300 --> 00:07:07,640
mysql has something we will have the

00:07:04,280 --> 00:07:09,860
same thing and again i cannot reiterate

00:07:07,640 --> 00:07:11,900
more how important it is to be governed

00:07:09,860 --> 00:07:17,570
by the maria DB foundation as opposed to

00:07:11,900 --> 00:07:20,380
be governed by a corporation and the

00:07:17,570 --> 00:07:23,360
aims of maria DB are really really

00:07:20,380 --> 00:07:25,700
important we are one hundred percent

00:07:23,360 --> 00:07:28,130
compatible drop-in replacement this

00:07:25,700 --> 00:07:31,400
means today if you uninstall mysql

00:07:28,130 --> 00:07:33,920
install more adb it'll just work all the

00:07:31,400 --> 00:07:36,590
on this data is the same this is true

00:07:33,920 --> 00:07:40,370
even for innodb the on the wire protocol

00:07:36,590 --> 00:07:44,420
is exactly the same if you are migrating

00:07:40,370 --> 00:07:46,760
from mysql 51 to 55 like Maury DB 55 you

00:07:44,420 --> 00:07:49,340
should run mysql underscore upgrade but

00:07:46,760 --> 00:07:53,510
if you are migrating from mysql 5 5 25

00:07:49,340 --> 00:07:56,150
tumor a DB 5 530 where it's a it's a

00:07:53,510 --> 00:08:00,140
similar major version you probably don't

00:07:56,150 --> 00:08:03,140
even need to run mysql upgrade our focus

00:08:00,140 --> 00:08:06,650
is really to make stable releases we

00:08:03,140 --> 00:08:08,270
don't believe in releasing software we

00:08:06,650 --> 00:08:10,100
like to have a schedule we like to say

00:08:08,270 --> 00:08:12,980
we like to create one new release every

00:08:10,100 --> 00:08:14,870
six to nine months but if if it's not

00:08:12,980 --> 00:08:17,060
stable or if there are bugs I have their

00:08:14,870 --> 00:08:19,550
regressions we do not want to release it

00:08:17,060 --> 00:08:21,200
we will hold back a release to make sure

00:08:19,550 --> 00:08:23,480
the software is perfect because our aim

00:08:21,200 --> 00:08:27,740
is to be used in data centers large data

00:08:23,480 --> 00:08:31,400
centers and we really increase the tests

00:08:27,740 --> 00:08:33,110
and the QA cases available for Marie a

00:08:31,400 --> 00:08:35,660
DB our code coverage is actually pretty

00:08:33,110 --> 00:08:38,540
good now we have way more test cases

00:08:35,660 --> 00:08:41,330
than any other MySQL branch or MySQL

00:08:38,540 --> 00:08:43,669
itself also we have way more features so

00:08:41,330 --> 00:08:46,190
you have more test cases naturally and

00:08:43,669 --> 00:08:47,960
we obviously aim to have no regressions

00:08:46,190 --> 00:08:50,240
that means if you are we all every time

00:08:47,960 --> 00:08:52,460
you make a push we test upgrades from

00:08:50,240 --> 00:08:53,600
mysql to mariadb previous version am

00:08:52,460 --> 00:08:54,050
really be to the current version of

00:08:53,600 --> 00:08:57,740
maria do

00:08:54,050 --> 00:09:00,459
we have intensive test suite the other

00:08:57,740 --> 00:09:03,500
thing is we're one hundred percent gplv2

00:09:00,459 --> 00:09:05,870
we have no enterprise product no

00:09:03,500 --> 00:09:09,440
commercial extensions nothing of that

00:09:05,870 --> 00:09:13,730
sort we are GPL to the core however if

00:09:09,440 --> 00:09:15,380
you want to embed things against a lib

00:09:13,730 --> 00:09:18,350
mysql client and you want to have

00:09:15,380 --> 00:09:21,800
commercial software we also provide lgpl

00:09:18,350 --> 00:09:24,500
c and java client libraries so there you

00:09:21,800 --> 00:09:27,380
don't have to get an OEM license or pay

00:09:24,500 --> 00:09:28,670
anyone for that I did not include that

00:09:27,380 --> 00:09:30,680
in the slides because it's not directly

00:09:28,670 --> 00:09:32,990
important to the Drupal community but we

00:09:30,680 --> 00:09:34,820
found at least one person outside at the

00:09:32,990 --> 00:09:36,890
expo hall saying that this was something

00:09:34,820 --> 00:09:40,519
that they could they could use so I'm

00:09:36,890 --> 00:09:43,430
mentioning it now we also have Maria

00:09:40,519 --> 00:09:46,940
captain's from many different companies

00:09:43,430 --> 00:09:50,120
companies like swing search linkedin sky

00:09:46,940 --> 00:09:52,910
SQL haha we were different companies

00:09:50,120 --> 00:09:55,459
before taobao out of china facebook

00:09:52,910 --> 00:09:58,839
percona coda ship and a whole bunch more

00:09:55,459 --> 00:10:01,040
companies and if you follow the maria

00:09:58,839 --> 00:10:03,110
discuss mailing lists and the maury

00:10:01,040 --> 00:10:05,300
developers mailing lists you end our

00:10:03,110 --> 00:10:08,440
bugs tree you'll realize that google is

00:10:05,300 --> 00:10:10,790
also taken a great interest in maria DB

00:10:08,440 --> 00:10:17,029
why they are taking an interest is

00:10:10,790 --> 00:10:18,410
speculation up to you now marie DB is

00:10:17,029 --> 00:10:20,329
filled with a whole bunch of features

00:10:18,410 --> 00:10:21,740
and the last time i talked about all the

00:10:20,329 --> 00:10:23,149
features without even going through

00:10:21,740 --> 00:10:27,170
practical examples it took a good eight

00:10:23,149 --> 00:10:28,610
hour course I I have one hour and I have

00:10:27,170 --> 00:10:31,130
to respect your time so I'm going to

00:10:28,610 --> 00:10:34,220
only focus on the maury to be features

00:10:31,130 --> 00:10:36,949
that benefit Drupal users not all the

00:10:34,220 --> 00:10:40,070
Marie to be features in fact i took a

00:10:36,949 --> 00:10:43,399
list of all our features and i pasted it

00:10:40,070 --> 00:10:49,820
into Wordle and it came up with this tag

00:10:43,399 --> 00:10:52,579
cloud how web 20 of me and it's a lot of

00:10:49,820 --> 00:10:56,660
features i mean we spent a lot of years

00:10:52,579 --> 00:10:58,519
engineering ready by now but i think the

00:10:56,660 --> 00:11:01,760
one most important thing is that our

00:10:58,519 --> 00:11:04,550
default storage engine is extra DB we

00:11:01,760 --> 00:11:06,640
can switch to in ODB but we always want

00:11:04,550 --> 00:11:10,360
to generally have extra DB

00:11:06,640 --> 00:11:11,920
round X 0 DB is generally it has a lot

00:11:10,360 --> 00:11:13,750
less checkpointing so smoother

00:11:11,920 --> 00:11:16,930
checkpointing on the graph on the left

00:11:13,750 --> 00:11:20,790
and it has a lot less flashing to disk

00:11:16,930 --> 00:11:24,310
with a lot more stable performance so

00:11:20,790 --> 00:11:28,380
here you can see the slides with extra

00:11:24,310 --> 00:11:30,940
DB in green is really good extra d be

00:11:28,380 --> 00:11:36,240
showing you generally stable performance

00:11:30,940 --> 00:11:38,740
that's increasing not you know jigsaws

00:11:36,240 --> 00:11:40,180
the other thing that you should probably

00:11:38,740 --> 00:11:43,180
notice that oracle has been in

00:11:40,180 --> 00:11:46,780
developing in ODB a lot so kudos oracle

00:11:43,180 --> 00:11:48,370
we have taken in ODB from 5-6 because

00:11:46,780 --> 00:11:52,030
there's more more features inside

00:11:48,370 --> 00:11:54,790
compared to the 55 release however we

00:11:52,030 --> 00:11:56,770
are just waiting for extra DB to include

00:11:54,790 --> 00:11:59,490
the bitmap checking so that we can have

00:11:56,770 --> 00:12:02,980
better immediate backup snapshots and

00:11:59,490 --> 00:12:05,740
why is it only be important to you why

00:12:02,980 --> 00:12:07,480
is extra DB important to you because

00:12:05,740 --> 00:12:10,030
extra DBS features that a no debe de

00:12:07,480 --> 00:12:13,390
itself doesn't have like fast in 0 DB

00:12:10,030 --> 00:12:19,050
restarts how many of you run Drupal in

00:12:13,390 --> 00:12:22,330
the cloud ok so the cloud is inherently

00:12:19,050 --> 00:12:25,270
today I have a slave I don't have enough

00:12:22,330 --> 00:12:27,610
I have too much capacity I tagged slave

00:12:25,270 --> 00:12:30,160
down I add another one tomorrow and I

00:12:27,610 --> 00:12:34,540
get / dotted and I take it down again

00:12:30,160 --> 00:12:36,970
etc we have fast in olivieri starts

00:12:34,540 --> 00:12:39,580
which basically pre populates the inner

00:12:36,970 --> 00:12:41,470
DB buffer pool and this is great for

00:12:39,580 --> 00:12:43,150
your cloud environments because it will

00:12:41,470 --> 00:12:46,270
pre-populate the buffer pool to a state

00:12:43,150 --> 00:12:49,390
right before shutdown with sequential i

00:12:46,270 --> 00:12:52,210
oh so you get a fully warmed up server

00:12:49,390 --> 00:12:56,980
with a warm buffer pool in minutes

00:12:52,210 --> 00:12:59,650
rather than hours a days this is hugely

00:12:56,980 --> 00:13:02,320
important for cloud we also improve

00:12:59,650 --> 00:13:04,240
single core performance which is

00:13:02,320 --> 00:13:07,920
something you get in the cloud regularly

00:13:04,240 --> 00:13:11,020
because you just fire up an instance so

00:13:07,920 --> 00:13:12,550
we improved signal-caller performance as

00:13:11,020 --> 00:13:15,760
well as multi-threaded performance we

00:13:12,550 --> 00:13:18,580
make use of ram better than we would in

00:13:15,760 --> 00:13:20,410
stock in 0 DB so for all intents and

00:13:18,580 --> 00:13:24,009
purposes you can consider extra

00:13:20,410 --> 00:13:26,649
be to be a better nodb and actually be

00:13:24,009 --> 00:13:29,230
is jointly really developed by us at

00:13:26,649 --> 00:13:33,790
maria DB as well as the folk at Percona

00:13:29,230 --> 00:13:35,889
who developer kona extra TV and they

00:13:33,790 --> 00:13:41,800
developed wonderful backup software as

00:13:35,889 --> 00:13:43,060
well so these are some of the

00:13:41,800 --> 00:13:46,449
interesting features that we've been

00:13:43,060 --> 00:13:50,259
shipping inside of mer ADV that will

00:13:46,449 --> 00:13:53,379
benefit a drupal user maury to be 51 we

00:13:50,259 --> 00:13:55,449
released in February of 2010 keep in

00:13:53,379 --> 00:14:01,569
mind that oracle announced the purchase

00:13:55,449 --> 00:14:04,149
of mysql a son in april of 2009 so we

00:14:01,569 --> 00:14:06,730
didn't have a lot of time we had to you

00:14:04,149 --> 00:14:08,980
know leave the company start start the

00:14:06,730 --> 00:14:12,250
new build system etc create new test

00:14:08,980 --> 00:14:13,899
cases and so on so the most important

00:14:12,250 --> 00:14:16,360
features that we focused on was one with

00:14:13,899 --> 00:14:19,000
stable elimination table elimination is

00:14:16,360 --> 00:14:22,209
basically anchor modeling so if you have

00:14:19,000 --> 00:14:25,240
a highly normalized tables you can now

00:14:22,209 --> 00:14:27,279
instead of querying when you when you

00:14:25,240 --> 00:14:29,380
write a query instead of touching each

00:14:27,279 --> 00:14:31,540
and every table sometimes you can derive

00:14:29,380 --> 00:14:33,490
the answer without touching the tables

00:14:31,540 --> 00:14:35,050
and Ike remodeling is not something you

00:14:33,490 --> 00:14:38,980
get commonly inside of open source

00:14:35,050 --> 00:14:42,519
databases we also included the most

00:14:38,980 --> 00:14:44,079
important new storage engine extra DB we

00:14:42,519 --> 00:14:46,060
included a whole bunch of the storage

00:14:44,079 --> 00:14:47,800
engines which I will which I don't

00:14:46,060 --> 00:14:50,170
consider important enough to mention

00:14:47,800 --> 00:14:52,389
here today and we've had this wonderful

00:14:50,170 --> 00:14:55,569
thing called pool of threads or a thread

00:14:52,389 --> 00:14:57,519
pool so in February of 2010 we've had a

00:14:55,569 --> 00:14:59,829
thread pool I have a whole slide

00:14:57,519 --> 00:15:04,439
eddicated thread pool so let's move on

00:14:59,829 --> 00:15:08,889
from that Maury db5 two came out in

00:15:04,439 --> 00:15:12,610
November of 2010 as well this is based

00:15:08,889 --> 00:15:14,500
on marietv 51 here we gave you more

00:15:12,610 --> 00:15:17,379
instrumentation now you can do things

00:15:14,500 --> 00:15:19,809
like show client in dec statistics show

00:15:17,379 --> 00:15:21,790
client user statistics so you can start

00:15:19,809 --> 00:15:24,339
monitoring what users are doing how your

00:15:21,790 --> 00:15:26,319
indexes are performing and so on today

00:15:24,339 --> 00:15:28,329
you have something called a performance

00:15:26,319 --> 00:15:31,300
schema that you can use as well inside

00:15:28,329 --> 00:15:33,160
of mysql 55 and greater however the

00:15:31,300 --> 00:15:34,180
performance schema has overhead close to

00:15:33,160 --> 00:15:36,640
even ten percent

00:15:34,180 --> 00:15:38,410
well running overhead whereas the

00:15:36,640 --> 00:15:40,360
extended user statistics have no

00:15:38,410 --> 00:15:41,920
overhead so this is something you can

00:15:40,360 --> 00:15:45,550
consider if you're running Drupal at

00:15:41,920 --> 00:15:47,080
scale as well I have dedicated slides

00:15:45,550 --> 00:15:48,820
for both the segmented my eyes and key

00:15:47,080 --> 00:15:51,870
cash as well as the time authentication

00:15:48,820 --> 00:15:57,250
plugin so we'll move on from that

00:15:51,870 --> 00:15:58,720
marietv 53 was based on 52 and it may

00:15:57,250 --> 00:16:01,089
sound like we were very lazy in the

00:15:58,720 --> 00:16:02,830
whole of 2011 but this is probably the

00:16:01,089 --> 00:16:05,770
biggest change of the optimizer we made

00:16:02,830 --> 00:16:09,520
it took like 12 men years of work so we

00:16:05,770 --> 00:16:11,830
released it in February of 2012 and it

00:16:09,520 --> 00:16:16,330
was still based on the five of one code

00:16:11,830 --> 00:16:18,670
base 51 base and here we had huge

00:16:16,330 --> 00:16:20,760
changes to the optimizer joint changes

00:16:18,670 --> 00:16:23,800
like you know block nested loop joins

00:16:20,760 --> 00:16:27,399
past joins classic ash join batch key

00:16:23,800 --> 00:16:30,820
access we had materialized views come is

00:16:27,399 --> 00:16:33,160
to come in 53 we have disk access

00:16:30,820 --> 00:16:36,279
changes like multi range read all these

00:16:33,160 --> 00:16:38,830
changes benefit your queries without you

00:16:36,279 --> 00:16:40,630
having to do anything for them you may

00:16:38,830 --> 00:16:42,459
have to turn them on via the ad ad

00:16:40,630 --> 00:16:44,800
optimizer switch but you don't have to

00:16:42,459 --> 00:16:49,300
do anything else so if you're writing

00:16:44,800 --> 00:16:51,580
your regular queries chances are if you

00:16:49,300 --> 00:16:54,370
test against maria DB it should run

00:16:51,580 --> 00:16:57,700
better query execution time should be

00:16:54,370 --> 00:16:59,560
faster and we also included something

00:16:57,700 --> 00:17:02,650
called micro second position because

00:16:59,560 --> 00:17:05,770
nowadays when you run queries you get

00:17:02,650 --> 00:17:09,760
them return sometimes in 0.00 seconds or

00:17:05,770 --> 00:17:11,110
0.01 seconds that's not enough when

00:17:09,760 --> 00:17:13,209
you're running with today's Hardware

00:17:11,110 --> 00:17:14,770
because today's Ottaway so much faster

00:17:13,209 --> 00:17:18,730
so we have micro second position to tell

00:17:14,770 --> 00:17:20,020
you how many tenths of a second you your

00:17:18,730 --> 00:17:21,910
query is coming back in so you can

00:17:20,020 --> 00:17:25,270
actually improve query performance that

00:17:21,910 --> 00:17:29,140
way as well we improved replication

00:17:25,270 --> 00:17:33,360
tremendously how many of you here run a

00:17:29,140 --> 00:17:36,250
master-slave environment awesome so

00:17:33,360 --> 00:17:37,900
master-slave environments you know we

00:17:36,250 --> 00:17:40,090
have enabled things like group com it as

00:17:37,900 --> 00:17:44,710
well I have a whole slide a decade of

00:17:40,090 --> 00:17:46,660
that as well progress reporting when you

00:17:44,710 --> 00:17:48,000
do an altar a table or a load data

00:17:46,660 --> 00:17:49,800
infile sometimes the old

00:17:48,000 --> 00:17:52,020
table can take you several seconds

00:17:49,800 --> 00:17:54,090
sometimes it take you five minutes you

00:17:52,020 --> 00:17:58,500
can go get a cup of coffee sometimes it

00:17:54,090 --> 00:18:01,290
can take you months all the tables to

00:17:58,500 --> 00:18:02,820
take you months are no fun so we

00:18:01,290 --> 00:18:04,200
included a progress report so now it

00:18:02,820 --> 00:18:05,520
will actually tell you how long it's

00:18:04,200 --> 00:18:07,620
going to take you and if you're doing

00:18:05,520 --> 00:18:10,050
load data infile fire like your ETL

00:18:07,620 --> 00:18:11,460
operations you can also see progress

00:18:10,050 --> 00:18:13,020
reporting as to how long it's going to

00:18:11,460 --> 00:18:15,530
take so you can figure out if I get a

00:18:13,020 --> 00:18:18,360
cup of coffee I go away for the weekend

00:18:15,530 --> 00:18:19,860
but one of the other cool features that

00:18:18,360 --> 00:18:20,970
we're starting to implement and you'll

00:18:19,860 --> 00:18:22,380
stop seeing is that we're building

00:18:20,970 --> 00:18:24,270
building blocks is that if you are

00:18:22,380 --> 00:18:25,950
running in shared hosting environments

00:18:24,270 --> 00:18:28,680
or in cloud environments and your unlike

00:18:25,950 --> 00:18:31,440
an ops person with MySQL you could

00:18:28,680 --> 00:18:33,600
always do kill hard threadid or kill

00:18:31,440 --> 00:18:35,670
soft threadid so soft would you know not

00:18:33,600 --> 00:18:38,580
not kill like running process that would

00:18:35,670 --> 00:18:41,130
damage the database we now allow you to

00:18:38,580 --> 00:18:44,220
do things like kill hard user and

00:18:41,130 --> 00:18:46,710
specify user name so if you're running

00:18:44,220 --> 00:18:50,580
in a multi-tenant environment and you

00:18:46,710 --> 00:18:53,010
have one user having drupal instance

00:18:50,580 --> 00:18:55,140
with module that is clearly using too

00:18:53,010 --> 00:18:58,110
many queries that's affecting all the

00:18:55,140 --> 00:19:00,810
other users you can just go kill hard

00:18:58,110 --> 00:19:03,360
user user name you can of course

00:19:00,810 --> 00:19:05,280
schedule lists put it inside the event

00:19:03,360 --> 00:19:08,330
scheduler which we have inside of Maria

00:19:05,280 --> 00:19:13,110
DB which is also inside of MySQL or

00:19:08,330 --> 00:19:17,520
trigger it against fraud so I think the

00:19:13,110 --> 00:19:22,740
kill user is actually pretty useful for

00:19:17,520 --> 00:19:23,970
here Marie to be 55 is when people

00:19:22,740 --> 00:19:26,100
actually really started getting

00:19:23,970 --> 00:19:27,600
interested in Maria DB there's anybody

00:19:26,100 --> 00:19:32,360
here use anything all of them ready to

00:19:27,600 --> 00:19:35,760
be 55 no so all of you started with 55

00:19:32,360 --> 00:19:38,430
but for the ones that did start Marie to

00:19:35,760 --> 00:19:41,250
be 55 came out in april of 2012 so it's

00:19:38,430 --> 00:19:43,410
out for a little over a year now we were

00:19:41,250 --> 00:19:46,110
we obviously took a long time to release

00:19:43,410 --> 00:19:48,570
it because we had to merge 53 big

00:19:46,110 --> 00:19:51,750
changes in the optimizer and then we had

00:19:48,570 --> 00:19:53,340
to add some new features as well we

00:19:51,750 --> 00:19:56,910
included a more efficient thread pool

00:19:53,340 --> 00:19:58,679
and I want to talk clearly a little bit

00:19:56,910 --> 00:20:00,450
more about that I have a slide still on

00:19:58,679 --> 00:20:01,510
the thread pool which I'll show you nice

00:20:00,450 --> 00:20:03,910
pretty graph

00:20:01,510 --> 00:20:06,550
well thread pool is open source if you

00:20:03,910 --> 00:20:08,500
use MySQL and you want to use the thread

00:20:06,550 --> 00:20:10,570
pool we have to buy MySQL enterprise we

00:20:08,500 --> 00:20:12,400
said that's not right we must make it

00:20:10,570 --> 00:20:14,350
open source for you so that's what we

00:20:12,400 --> 00:20:15,730
did we made an open source more

00:20:14,350 --> 00:20:18,880
efficient thread pool compared to what

00:20:15,730 --> 00:20:21,130
we had in murray to be 51 we will sink

00:20:18,880 --> 00:20:23,890
with a non-blocking client library so

00:20:21,130 --> 00:20:26,050
you can start operations in threads and

00:20:23,890 --> 00:20:27,760
let it let the result travel back to you

00:20:26,050 --> 00:20:31,680
when it actually is ready to come back

00:20:27,760 --> 00:20:34,750
to you this again has no great

00:20:31,680 --> 00:20:36,840
performance in terms of PHP but if

00:20:34,750 --> 00:20:39,100
you're running mysql on the command line

00:20:36,840 --> 00:20:42,210
you can actually do things like you know

00:20:39,100 --> 00:20:46,000
show status on many machines for example

00:20:42,210 --> 00:20:48,160
the no Jas people because nodejs is very

00:20:46,000 --> 00:20:50,050
a synchronous they decide to make

00:20:48,160 --> 00:20:52,870
something called Maria SQL so there's a

00:20:50,050 --> 00:20:57,250
very fast nodejs driver out there but

00:20:52,870 --> 00:21:00,760
again not relevant to this crowd we also

00:20:57,250 --> 00:21:04,180
included limit rose examined this is

00:21:00,760 --> 00:21:07,270
kind of useful because sometimes you

00:21:04,180 --> 00:21:09,970
have silly users that say we want to do

00:21:07,270 --> 00:21:12,490
a select star from t1 and just let it

00:21:09,970 --> 00:21:15,000
run now you can actually say you want to

00:21:12,490 --> 00:21:18,160
limit it to how many rows its examined

00:21:15,000 --> 00:21:21,220
so we we use condition push down to

00:21:18,160 --> 00:21:23,410
actually not just read the first like

00:21:21,220 --> 00:21:25,150
you know that this example has 10,000

00:21:23,410 --> 00:21:28,300
rows not just read the first 10,000 rows

00:21:25,150 --> 00:21:30,040
but to use the optimizer to see what the

00:21:28,300 --> 00:21:32,530
optimizer was going to see and then let

00:21:30,040 --> 00:21:35,230
the optimizer limit 10,000 rows so

00:21:32,530 --> 00:21:37,390
you're not just getting a head of 10,000

00:21:35,230 --> 00:21:41,280
or a tale of 10,000 when you're actually

00:21:37,390 --> 00:21:43,660
getting what you should be getting I

00:21:41,280 --> 00:21:47,020
have a slide dedicated to swing

00:21:43,660 --> 00:21:49,570
and we also include extended keys for

00:21:47,020 --> 00:21:53,050
nodb which we are now extending so that

00:21:49,570 --> 00:21:56,220
you can also use in taki DB and inner DB

00:21:53,050 --> 00:21:58,390
has secondary keys and they contain

00:21:56,220 --> 00:22:02,080
user-defined columns as well as primary

00:21:58,390 --> 00:22:04,630
key columns the optimizer now uses uses

00:22:02,080 --> 00:22:07,180
it finally so the less and less rows are

00:22:04,630 --> 00:22:09,730
examined so when you do and explain on a

00:22:07,180 --> 00:22:11,500
query you will now see that the

00:22:09,730 --> 00:22:13,420
reference strategy will change from

00:22:11,500 --> 00:22:14,800
constant to now and you'll see that

00:22:13,420 --> 00:22:17,680
joint performance can go up

00:22:14,800 --> 00:22:21,160
anywhere between 0 to 2.5 times

00:22:17,680 --> 00:22:23,290
improvement in performance so external

00:22:21,160 --> 00:22:25,090
keys is something that you will never

00:22:23,290 --> 00:22:32,800
have to touch but will improve your

00:22:25,090 --> 00:22:35,080
performance anyway Murray db10 this is

00:22:32,800 --> 00:22:37,390
generally what most of my examples are

00:22:35,080 --> 00:22:39,190
based on where we're horribly

00:22:37,390 --> 00:22:42,210
embarrassed to tell you that it took us

00:22:39,190 --> 00:22:45,340
about a year to merge Murray to be 55

00:22:42,210 --> 00:22:48,790
but we can with 55 compared against

00:22:45,340 --> 00:22:50,860
mysql 55 and at last comparison we have

00:22:48,790 --> 00:22:53,130
over 1 million lines of extra code and

00:22:50,860 --> 00:22:56,020
the diff stands at 61 megabytes in size

00:22:53,130 --> 00:22:58,420
that means we have a huge huge chunk of

00:22:56,020 --> 00:23:01,390
changes and that actually comes back

00:22:58,420 --> 00:23:04,120
into features 56 the code has been have

00:23:01,390 --> 00:23:07,450
any refactored we should make a sporting

00:23:04,120 --> 00:23:10,540
256 very very hard it would probably

00:23:07,450 --> 00:23:12,250
take us another year to do the merge so

00:23:10,540 --> 00:23:14,740
instead of doing that we decided we'll

00:23:12,250 --> 00:23:17,230
continue on with maury to be 55 we will

00:23:14,740 --> 00:23:19,090
back part all the features from mysql 56

00:23:17,230 --> 00:23:22,540
and we'll continue adding new features

00:23:19,090 --> 00:23:25,440
that benefit users so for all intents

00:23:22,540 --> 00:23:35,830
and purposes you will maury bb10 is

00:23:25,440 --> 00:23:38,320
mysql 56 maury DB 11 will be mysql 57 so

00:23:35,830 --> 00:23:42,370
in 10 dot 0 we took a bunch of new

00:23:38,320 --> 00:23:45,010
features we took inner DB from mysql

00:23:42,370 --> 00:23:47,230
pretty stock we took the performance

00:23:45,010 --> 00:23:49,870
schema from mysql also pretty stock

00:23:47,230 --> 00:23:51,370
online operations is actually pretty

00:23:49,870 --> 00:23:53,560
cool because finally you can do things

00:23:51,370 --> 00:23:55,510
like online alter table which is

00:23:53,560 --> 00:23:57,490
something that you couldn't do before

00:23:55,510 --> 00:24:00,040
which would take a your database

00:23:57,490 --> 00:24:02,230
potentially offline and could be very

00:24:00,040 --> 00:24:04,210
long operation which is probably what

00:24:02,230 --> 00:24:08,470
made no SQL database is generally quite

00:24:04,210 --> 00:24:11,650
popular we also reimplemented something

00:24:08,470 --> 00:24:14,710
so now for example now will be the

00:24:11,650 --> 00:24:15,880
default in your daytime columns we're

00:24:14,710 --> 00:24:19,150
also including things like global

00:24:15,880 --> 00:24:20,800
transaction ID but not not the actual

00:24:19,150 --> 00:24:23,020
implementation that you get inside of

00:24:20,800 --> 00:24:24,910
mysql 56 because we think that is a

00:24:23,020 --> 00:24:27,670
buggy implementation so we are improving

00:24:24,910 --> 00:24:28,570
it and we're also giving true parallel

00:24:27,670 --> 00:24:35,710
replication

00:24:28,570 --> 00:24:39,159
in the slave threads but what what other

00:24:35,710 --> 00:24:40,720
things can benefit a Drupal user Multi

00:24:39,159 --> 00:24:43,059
social application is definitely one of

00:24:40,720 --> 00:24:46,179
them if you are already running in a

00:24:43,059 --> 00:24:47,950
master-slave environment you are likely

00:24:46,179 --> 00:24:51,610
also thinking about partitioning your

00:24:47,950 --> 00:24:53,019
data or what is now called sharding now

00:24:51,610 --> 00:24:54,250
if you have many now if you have many

00:24:53,019 --> 00:24:55,750
different masters and you want to

00:24:54,250 --> 00:24:57,940
actually synchronize the data back again

00:24:55,750 --> 00:24:59,769
Multi social applications allow you to

00:24:57,940 --> 00:25:03,039
replicate many masses back into a single

00:24:59,769 --> 00:25:05,049
slave now you can run your ETL and a

00:25:03,039 --> 00:25:07,240
little quick analytical queries or bi

00:25:05,049 --> 00:25:09,580
tools against that one slave this has

00:25:07,240 --> 00:25:12,759
been a long-standing feature request for

00:25:09,580 --> 00:25:15,759
mysql which we now have inside of maury

00:25:12,759 --> 00:25:18,250
DB this is not available inside of mysql

00:25:15,759 --> 00:25:21,340
56 it's unlikely to be available in 57

00:25:18,250 --> 00:25:23,019
either remember I told you about the

00:25:21,340 --> 00:25:27,100
building blocks as well now you can

00:25:23,019 --> 00:25:29,500
explain on running threads you can do

00:25:27,100 --> 00:25:32,019
show explain for threadid so the show

00:25:29,500 --> 00:25:33,759
explain for maybe two or three and

00:25:32,019 --> 00:25:36,159
you'll actually give you the explain of

00:25:33,759 --> 00:25:38,379
a running query previously you had to

00:25:36,159 --> 00:25:40,330
actually do explain before you run the

00:25:38,379 --> 00:25:43,600
query now you can do it on running

00:25:40,330 --> 00:25:45,340
queries as well probably something again

00:25:43,600 --> 00:25:49,330
very useful when you have long running

00:25:45,340 --> 00:25:52,740
queries we also have per thread memory

00:25:49,330 --> 00:25:55,149
usage again useful if you are in a

00:25:52,740 --> 00:25:57,220
multi-tenant environment where you can

00:25:55,149 --> 00:25:59,740
now do you can either query the

00:25:57,220 --> 00:26:02,500
information schema and then kill things

00:25:59,740 --> 00:26:05,649
based on users exceeding certain amounts

00:26:02,500 --> 00:26:07,480
of memory for example or and even show

00:26:05,649 --> 00:26:10,899
status will show you how much memory is

00:26:07,480 --> 00:26:15,059
being used so more useful features for

00:26:10,899 --> 00:26:15,059
people in these kind of environments

00:26:15,120 --> 00:26:21,970
anybody here use Cassandra for big data

00:26:19,169 --> 00:26:25,590
okay I see at least one person put up

00:26:21,970 --> 00:26:27,820
your hand we're kind of deciding to do

00:26:25,590 --> 00:26:29,169
think that Murray DB is more of a data

00:26:27,820 --> 00:26:32,830
platform now as opposed to just

00:26:29,169 --> 00:26:34,330
accessing sequel so very soon well

00:26:32,830 --> 00:26:37,179
actually this is already something you

00:26:34,330 --> 00:26:39,580
can do today you can query instead of

00:26:37,179 --> 00:26:42,370
using cql you can query a cassandra

00:26:39,580 --> 00:26:45,220
cluster from maria DB

00:26:42,370 --> 00:26:48,040
so there are no applications out there

00:26:45,220 --> 00:26:50,740
but if you are considering writing a new

00:26:48,040 --> 00:26:52,870
module that maybe wants to also have big

00:26:50,740 --> 00:26:56,410
data querying or you want to keep track

00:26:52,870 --> 00:26:57,940
of logged in users in real time you

00:26:56,410 --> 00:27:00,309
might want to stall that kind of details

00:26:57,940 --> 00:27:03,400
inside a Cassandra and then query it

00:27:00,309 --> 00:27:05,770
from Maria DB the benefit of this is you

00:27:03,400 --> 00:27:09,160
don't have to ever write cql you can do

00:27:05,770 --> 00:27:11,740
it with regular SQL so you can extend it

00:27:09,160 --> 00:27:15,190
Drupal relatively easily to do this for

00:27:11,740 --> 00:27:16,840
you in your new modules we're also

00:27:15,190 --> 00:27:19,480
working on a key value store called

00:27:16,840 --> 00:27:21,100
leveldb many of you have probably never

00:27:19,480 --> 00:27:23,260
heard of it or used it but it actually

00:27:21,100 --> 00:27:26,080
comes inside of your standard Chrome

00:27:23,260 --> 00:27:27,490
browsers as part of index DB so if you

00:27:26,080 --> 00:27:30,970
are using Chrome you already have a

00:27:27,490 --> 00:27:32,740
certain embedded copy of leveldb and we

00:27:30,970 --> 00:27:36,360
figured that at some stage people want

00:27:32,740 --> 00:27:36,360
to access key value stores as well

00:27:37,170 --> 00:27:43,780
dynamic columns is the building block

00:27:39,160 --> 00:27:46,059
for how we end up doing the Cassandra

00:27:43,780 --> 00:27:48,070
storage engine here you can start

00:27:46,059 --> 00:27:50,380
different sets of columns for every row

00:27:48,070 --> 00:27:52,600
in the table this is very very much no

00:27:50,380 --> 00:27:56,110
SQL like this is great for an e-commerce

00:27:52,600 --> 00:27:57,940
store for example and there are

00:27:56,110 --> 00:28:00,910
definitely commerce related applications

00:27:57,940 --> 00:28:04,030
that currently ours that are you know

00:28:00,910 --> 00:28:07,270
satisfied by drupal however now you can

00:28:04,030 --> 00:28:12,490
have different attributes to each item

00:28:07,270 --> 00:28:14,470
we did use this as a base for building

00:28:12,490 --> 00:28:16,960
the Cassandra storage engine and we

00:28:14,470 --> 00:28:18,700
wanted to join the rest of the world so

00:28:16,960 --> 00:28:21,400
that now you can actually request a row

00:28:18,700 --> 00:28:25,320
and get it returned back to you in JSON

00:28:21,400 --> 00:28:28,059
format JSON is becoming a popular

00:28:25,320 --> 00:28:30,429
interchange format and we expect that

00:28:28,059 --> 00:28:33,280
this should be relatively useful in the

00:28:30,429 --> 00:28:35,350
future and with Drupal 8 coming out

00:28:33,280 --> 00:28:37,990
where you will also be able to query

00:28:35,350 --> 00:28:41,770
things against MongoDB this might be a

00:28:37,990 --> 00:28:43,150
very good bridge again oh and you can

00:28:41,770 --> 00:28:45,190
name dynamic columns this is a

00:28:43,150 --> 00:28:47,860
limitation we introduce dynamic columns

00:28:45,190 --> 00:28:52,060
in 53 but we've only allowed you to

00:28:47,860 --> 00:28:55,210
finally name them in 10 0 anybody is

00:28:52,060 --> 00:28:56,320
still using my eyes em everybody switch

00:28:55,210 --> 00:28:58,899
to no TV no

00:28:56,320 --> 00:29:01,990
there are a couple hands going up my

00:28:58,899 --> 00:29:05,320
eyes M has major major bottlenecks it's

00:29:01,990 --> 00:29:07,360
it's great for bulk inserts but it has

00:29:05,320 --> 00:29:09,909
major read bottlenecks and that's

00:29:07,360 --> 00:29:12,700
largely because it's affected by the key

00:29:09,909 --> 00:29:15,789
buffer this is something that Drupal

00:29:12,700 --> 00:29:18,580
users who are currently on my xem know

00:29:15,789 --> 00:29:21,039
and feel the pain of you can use

00:29:18,580 --> 00:29:23,019
segmented my Zemke caches you can add

00:29:21,039 --> 00:29:25,929
this as an option in your mind at CNF

00:29:23,019 --> 00:29:27,340
and have up to 64 segments to improve

00:29:25,929 --> 00:29:30,279
performance of up to two hundred fifty

00:29:27,340 --> 00:29:35,559
percent based on more threads that are

00:29:30,279 --> 00:29:37,269
started so this slide shows queries per

00:29:35,559 --> 00:29:39,399
second as well as the threads that are

00:29:37,269 --> 00:29:40,779
going so the moment you start hitting

00:29:39,399 --> 00:29:44,200
eight threads you start seeing great

00:29:40,779 --> 00:29:47,470
performance already my advice though is

00:29:44,200 --> 00:29:49,419
to obviously migrate to in ODB which we

00:29:47,470 --> 00:29:51,970
ship as extra DB because you do not want

00:29:49,419 --> 00:29:57,279
to be running my eyes em but if you are

00:29:51,970 --> 00:29:59,049
using mais them this is invaluable we

00:29:57,279 --> 00:30:02,049
also have batch key access speed ups and

00:29:59,049 --> 00:30:03,519
this is an example from southern

00:30:02,049 --> 00:30:06,220
commerce product that you can extend

00:30:03,519 --> 00:30:09,669
from Drupal showing you increased

00:30:06,220 --> 00:30:12,970
performance with regular joins and batch

00:30:09,669 --> 00:30:16,509
key access joins so anywhere between 3

00:30:12,970 --> 00:30:22,360
to 10 times the performance for this

00:30:16,509 --> 00:30:24,370
particular query another really cool

00:30:22,360 --> 00:30:28,210
thing is that some queries finally

00:30:24,370 --> 00:30:29,860
materialized many users of MySQL note

00:30:28,210 --> 00:30:32,200
that some queries just do not work you

00:30:29,860 --> 00:30:35,350
rewrite them as joins because

00:30:32,200 --> 00:30:37,809
sub-queries never materialized of course

00:30:35,350 --> 00:30:40,389
we've seen many modules and extensions

00:30:37,809 --> 00:30:42,700
also have the use of sub queries which

00:30:40,389 --> 00:30:45,429
then trashes the server because the

00:30:42,700 --> 00:30:47,019
server attempts to rewrite them or maybe

00:30:45,429 --> 00:30:50,019
never materializes them which makes

00:30:47,019 --> 00:30:53,710
things really slow for you now we

00:30:50,019 --> 00:30:56,340
materialized sub queries this is a run

00:30:53,710 --> 00:31:01,360
on a data set of about 30 gigabytes

00:30:56,340 --> 00:31:04,000
using DVT three you can see that from

00:31:01,360 --> 00:31:07,210
slow to faster or impossible to much

00:31:04,000 --> 00:31:09,159
faster usually inside of several Drupal

00:31:07,210 --> 00:31:10,130
modules that we've tested you actually

00:31:09,159 --> 00:31:11,780
get slow

00:31:10,130 --> 00:31:14,780
returns because it does eventually

00:31:11,780 --> 00:31:17,540
materialize but it's really slow however

00:31:14,780 --> 00:31:19,400
with Maria DB the sub queries do

00:31:17,540 --> 00:31:22,280
materialize and they're much faster and

00:31:19,400 --> 00:31:25,790
we have a sub query cache as well so we

00:31:22,280 --> 00:31:28,940
do cash the results now mysql 56 also

00:31:25,790 --> 00:31:32,000
has a sub query optimizer that can

00:31:28,940 --> 00:31:35,210
generally optimize most sub queries but

00:31:32,000 --> 00:31:40,520
ours is a little better plus it has the

00:31:35,210 --> 00:31:42,650
cash if you are using replication you do

00:31:40,520 --> 00:31:45,410
realize that if you want to have the d

00:31:42,650 --> 00:31:47,900
in acid the durability you need to you

00:31:45,410 --> 00:31:49,460
need to enable sync binlog equals 1 as

00:31:47,900 --> 00:31:52,220
well as energy be flush log at ron's i

00:31:49,460 --> 00:31:55,520
can come in equals 1 if you do that with

00:31:52,220 --> 00:31:57,410
mysql you get the green line flat

00:31:55,520 --> 00:32:00,800
performance you don't get any through

00:31:57,410 --> 00:32:04,340
any increased throughput however if you

00:32:00,800 --> 00:32:06,410
do it with maria DB your transactions a

00:32:04,340 --> 00:32:08,690
second continue it continually increase

00:32:06,410 --> 00:32:11,450
even when you have many more concurrent

00:32:08,690 --> 00:32:13,940
clients with relatively good standing

00:32:11,450 --> 00:32:15,920
which is the blue one up there now you

00:32:13,940 --> 00:32:19,450
might be wondering what the other orange

00:32:15,920 --> 00:32:22,370
and yellow ones are and that is Facebook

00:32:19,450 --> 00:32:24,260
this benchmark was not performed by any

00:32:22,370 --> 00:32:28,370
more any of us it was performed by Mark

00:32:24,260 --> 00:32:29,900
Callahan who worked at Facebook he made

00:32:28,370 --> 00:32:31,550
they arguably probably one the largest

00:32:29,900 --> 00:32:33,590
uses a group coming out that they

00:32:31,550 --> 00:32:36,560
created a Facebook version 1 and version

00:32:33,590 --> 00:32:38,810
2 of the patch as well but with Maury DB

00:32:36,560 --> 00:32:40,970
we did a much better job and it's in

00:32:38,810 --> 00:32:43,430
production code now so it's been in

00:32:40,970 --> 00:32:45,530
maury DB since 53 and if you happen to

00:32:43,430 --> 00:32:48,500
use the percona server variant it's also

00:32:45,530 --> 00:32:52,340
inside of 55 they've posted our group

00:32:48,500 --> 00:32:53,930
commit so if you are if you are using

00:32:52,340 --> 00:32:55,580
replication and you if you are running

00:32:53,930 --> 00:32:57,740
Drupal at scale you will definitely have

00:32:55,580 --> 00:33:02,930
a slave you probably want to turn this

00:32:57,740 --> 00:33:06,230
on the thread pool i think is probably

00:33:02,930 --> 00:33:07,940
the most useful for drupal users you

00:33:06,230 --> 00:33:11,030
have many many short running queries

00:33:07,940 --> 00:33:12,980
every time you load a page that doesn't

00:33:11,030 --> 00:33:15,560
hit the cash or whenever you make a

00:33:12,980 --> 00:33:18,980
change if you have many many concurrent

00:33:15,560 --> 00:33:21,590
clients or users you will want to

00:33:18,980 --> 00:33:24,050
definitely turn the third pool on why is

00:33:21,590 --> 00:33:27,530
this important when you have short run

00:33:24,050 --> 00:33:30,170
queries instead of opening up one thread

00:33:27,530 --> 00:33:32,090
per connection you now can make use of a

00:33:30,170 --> 00:33:35,990
pool of threads that keep on getting

00:33:32,090 --> 00:33:37,490
reused one of the things that is bad for

00:33:35,990 --> 00:33:40,130
performance is that if you don't have

00:33:37,490 --> 00:33:41,720
enough cash threads you will actually

00:33:40,130 --> 00:33:45,650
launch too many new threads and it will

00:33:41,720 --> 00:33:47,870
cause your OS contention issues you just

00:33:45,650 --> 00:33:50,360
turn this on by having an option in your

00:33:47,870 --> 00:33:53,330
minor CNF thread underscore handling

00:33:50,360 --> 00:33:57,440
equals pool of threads restart the

00:33:53,330 --> 00:34:00,560
server and that green line there is my

00:33:57,440 --> 00:34:03,130
mysql with maria DB with concurrent

00:34:00,560 --> 00:34:07,790
clients with pool of threads enabled and

00:34:03,130 --> 00:34:10,190
the orange version is one without pool

00:34:07,790 --> 00:34:12,140
of threads enabled my suggestion is turn

00:34:10,190 --> 00:34:14,780
this on if you are running a Drupal

00:34:12,140 --> 00:34:16,550
website at at scale you will find that

00:34:14,780 --> 00:34:18,800
this is very useful because as you have

00:34:16,550 --> 00:34:24,080
more concurrent clients you want more

00:34:18,800 --> 00:34:26,090
oltp threshold this is one feature that

00:34:24,080 --> 00:34:29,330
you can get inside of MySQL enterprise

00:34:26,090 --> 00:34:36,830
ie something you pay for or inside of

00:34:29,330 --> 00:34:38,570
Maria db5 five or more a DB 10 if you

00:34:36,830 --> 00:34:41,150
have ever wanted to authenticate against

00:34:38,570 --> 00:34:43,400
the Pam server and we are now working

00:34:41,150 --> 00:34:46,820
actively to authenticate against ldap as

00:34:43,400 --> 00:34:52,400
well as Active Directory we now allow

00:34:46,820 --> 00:34:53,810
you to do this as well with the Pamela

00:34:52,400 --> 00:34:57,620
sent occasion plugin which we introduced

00:34:53,810 --> 00:34:59,270
inside of your ad b-52 this is something

00:34:57,620 --> 00:35:01,790
again you don't have to pay us for it's

00:34:59,270 --> 00:35:05,240
completely free and I think one of the

00:35:01,790 --> 00:35:07,400
cool features that i played with is

00:35:05,240 --> 00:35:09,500
integrating it with google authenticator

00:35:07,400 --> 00:35:11,150
so Google Authenticator is something you

00:35:09,500 --> 00:35:13,670
can download on your android phone and

00:35:11,150 --> 00:35:16,190
possibly even your iPhone which will

00:35:13,670 --> 00:35:17,960
generate sequence numbers for you you

00:35:16,190 --> 00:35:20,870
can turn you can configure it to work

00:35:17,960 --> 00:35:22,640
with Pam and it can also be it can be

00:35:20,870 --> 00:35:24,320
two-factor authentication for you so you

00:35:22,640 --> 00:35:27,080
can now instead of just logging in

00:35:24,320 --> 00:35:31,100
regularly to Drupal you can provide one

00:35:27,080 --> 00:35:32,960
extra form of login which is a code that

00:35:31,100 --> 00:35:36,350
is generated that's valid for like one

00:35:32,960 --> 00:35:37,700
minute every time it's generated so many

00:35:36,350 --> 00:35:39,650
people get hacked

00:35:37,700 --> 00:35:42,130
over time because of weak passwords are

00:35:39,650 --> 00:35:44,300
using passwords over Wi-Fi and so on

00:35:42,130 --> 00:35:46,400
two-factor authentication will ensure

00:35:44,300 --> 00:35:51,710
that you don't get hacked unless your

00:35:46,400 --> 00:35:55,190
phone gets stolen as well anybody here

00:35:51,710 --> 00:35:59,390
useful text search all right a bunch of

00:35:55,190 --> 00:36:03,320
you anybody here use Fink's before also

00:35:59,390 --> 00:36:05,930
a bunch of you now you can do full text

00:36:03,320 --> 00:36:10,460
search wit Sphinx and you can also have

00:36:05,930 --> 00:36:11,810
your regular database there however we

00:36:10,460 --> 00:36:14,089
have a storage engine for Sphinx that

00:36:11,810 --> 00:36:16,970
will connect directly to the string

00:36:14,089 --> 00:36:21,710
search d so you can specify queries

00:36:16,970 --> 00:36:23,950
using regular SQL again and you can let

00:36:21,710 --> 00:36:27,760
strings do what it's good good at doing

00:36:23,950 --> 00:36:30,109
indexing searching sorting filtering etc

00:36:27,760 --> 00:36:31,910
so let's things do what it's good at

00:36:30,109 --> 00:36:35,030
because things is optimized for these

00:36:31,910 --> 00:36:37,099
tasks there is no performance overhead

00:36:35,030 --> 00:36:40,310
except if it's traveling over a network

00:36:37,099 --> 00:36:42,829
that will be network latency but if it's

00:36:40,310 --> 00:36:44,720
running locally you should have no

00:36:42,829 --> 00:36:47,000
performance overhead and you can also

00:36:44,720 --> 00:36:49,280
join the search tables later with other

00:36:47,000 --> 00:36:51,260
mysql table so if you have if you make a

00:36:49,280 --> 00:36:52,369
query and the return results that is

00:36:51,260 --> 00:36:55,069
something you want to join with you know

00:36:52,369 --> 00:36:56,390
TV or my sm something you can totally do

00:36:55,069 --> 00:36:57,770
this is one of the beauties of the

00:36:56,390 --> 00:37:01,069
storage engine interface is that you can

00:36:57,770 --> 00:37:03,560
join tables from other other databases

00:37:01,069 --> 00:37:05,560
or in the postgres well this is now

00:37:03,560 --> 00:37:07,579
called the foreign data wrappers and

00:37:05,560 --> 00:37:13,130
we've called it the storage engine

00:37:07,579 --> 00:37:17,240
interface for a long time now anybody

00:37:13,130 --> 00:37:20,300
here use drupal with maps anybody

00:37:17,240 --> 00:37:25,819
building location-aware apps all right a

00:37:20,300 --> 00:37:28,040
bunch of you mysql sucks at GIS mysql

00:37:25,819 --> 00:37:30,410
can allow you to find out the minimum

00:37:28,040 --> 00:37:33,200
boundary regions and tell you how to get

00:37:30,410 --> 00:37:35,050
in a rectangle rectangular side tell you

00:37:33,200 --> 00:37:37,579
this is one line and this is one mine

00:37:35,050 --> 00:37:40,430
last I checked you needed to check maps

00:37:37,579 --> 00:37:42,500
inside and when we start up Maury DB we

00:37:40,430 --> 00:37:44,900
said we will never touch two spaces one

00:37:42,500 --> 00:37:47,420
space is embedded and better the

00:37:44,900 --> 00:37:49,640
embedded war is won by SQLite and we

00:37:47,420 --> 00:37:51,470
will never touch GIS because it's we

00:37:49,640 --> 00:37:53,420
think it's one by post GIS

00:37:51,470 --> 00:37:55,670
how we found a customer that wanted to

00:37:53,420 --> 00:37:58,580
pay for this feature and we ended up

00:37:55,670 --> 00:38:01,580
developing it so now we are full open GS

00:37:58,580 --> 00:38:04,310
support inside of Maria DB since 53 and

00:38:01,580 --> 00:38:07,310
has full SQL geometry types so you can

00:38:04,310 --> 00:38:10,940
tell you how to get from Martin Luther

00:38:07,310 --> 00:38:13,670
King to the lloyd center not via just

00:38:10,940 --> 00:38:16,640
lines but an actual route you can now

00:38:13,670 --> 00:38:18,470
store that inside of Maria TV using the

00:38:16,640 --> 00:38:22,130
st prefix and you can also do geometric

00:38:18,470 --> 00:38:24,170
operations on them so i think this is

00:38:22,130 --> 00:38:25,849
actually pretty useful and we're working

00:38:24,170 --> 00:38:28,220
with the folk at openstreetmap to start

00:38:25,849 --> 00:38:30,230
looking at maria DB now as well like

00:38:28,220 --> 00:38:33,680
ironically that's a sky SQL engine knows

00:38:30,230 --> 00:38:37,820
who's doing it in his spare time anybody

00:38:33,680 --> 00:38:40,990
hosting on SSDs now all right a bunch of

00:38:37,820 --> 00:38:44,720
you anybody hosting on fusion-io cards

00:38:40,990 --> 00:38:48,830
also at least one person put out the

00:38:44,720 --> 00:38:52,220
answer awesome so juvenile cards are

00:38:48,830 --> 00:38:53,599
much faster than your SD cards we have

00:38:52,220 --> 00:38:57,290
already started working with fusion-io

00:38:53,599 --> 00:38:59,210
and we now support atomic rights much

00:38:57,290 --> 00:39:02,210
better performance than you'd get inside

00:38:59,210 --> 00:39:03,920
of in od be using fusion iOS direct FS

00:39:02,210 --> 00:39:06,500
direct FS is not a file system that's

00:39:03,920 --> 00:39:08,540
fully in production yet but if you using

00:39:06,500 --> 00:39:10,910
fusion-io with things like XFS as well

00:39:08,540 --> 00:39:13,820
you get amazing performance so if you

00:39:10,910 --> 00:39:15,800
are worried about Maury DB or nodb would

00:39:13,820 --> 00:39:19,280
actually be that we ship not using up

00:39:15,800 --> 00:39:21,530
your SSD to its fullest rest assured we

00:39:19,280 --> 00:39:23,270
are using the SSDs to its fullest we're

00:39:21,530 --> 00:39:25,339
not using fusion io crowds to its

00:39:23,270 --> 00:39:26,750
fullest but we're using it about seventy

00:39:25,339 --> 00:39:29,660
percent of the way already and we're

00:39:26,750 --> 00:39:32,180
improving it regularly because the word

00:39:29,660 --> 00:39:34,250
literally started a few months ago and

00:39:32,180 --> 00:39:36,530
we managed to have a first release in

00:39:34,250 --> 00:39:40,730
April which fusion-io was very happy

00:39:36,530 --> 00:39:41,960
about so if you are most of you are

00:39:40,730 --> 00:39:43,609
probably using spinning disk at the

00:39:41,960 --> 00:39:45,950
moment but the next generation which is

00:39:43,609 --> 00:39:48,349
not far off will be probably all the

00:39:45,950 --> 00:39:54,500
cities because it's getting cheaper and

00:39:48,349 --> 00:39:55,880
cheaper and more reliable as well so we

00:39:54,500 --> 00:39:58,670
believe that Mario DB is already a

00:39:55,880 --> 00:40:00,260
superset of features we're going to

00:39:58,670 --> 00:40:05,390
merge in two steps you're going to get

00:40:00,260 --> 00:40:07,190
10 0 3 or 4 as GA 1003 is likely to be

00:40:05,390 --> 00:40:11,780
we'll end up being the ga and you look

00:40:07,190 --> 00:40:15,350
at 10 11 or two or three and by the time

00:40:11,780 --> 00:40:18,740
you have 10 1x you have the complete

00:40:15,350 --> 00:40:21,410
equivalent to mysql 56 so all practical

00:40:18,740 --> 00:40:24,140
purposes ten one will be a full drop-in

00:40:21,410 --> 00:40:26,930
replacement to mysql 56 we're lucky

00:40:24,140 --> 00:40:29,810
because it takes people time to use a

00:40:26,930 --> 00:40:31,700
new release of mysql and 56 only became

00:40:29,810 --> 00:40:33,620
GA in january and they're still huge

00:40:31,700 --> 00:40:37,790
amounts of bugs been reported to make it

00:40:33,620 --> 00:40:39,410
get fixed we're also integrating some

00:40:37,790 --> 00:40:42,050
other storage engines which could be of

00:40:39,410 --> 00:40:44,120
interest to the Drupal community one of

00:40:42,050 --> 00:40:46,160
them is talc ed beat ltd v when open

00:40:44,120 --> 00:40:48,110
source a month ago as well you might be

00:40:46,160 --> 00:40:50,150
wondering why everything happens a month

00:40:48,110 --> 00:40:53,450
ago april is traditionally when we have

00:40:50,150 --> 00:40:55,010
a huge MySQL conference happens in santa

00:40:53,450 --> 00:40:58,730
clara we like to make announcements

00:40:55,010 --> 00:41:01,430
there so talking to be instead of using

00:40:58,730 --> 00:41:04,940
b-trees uses fractal tree indexes it

00:41:01,430 --> 00:41:06,500
also has great great insert speed there

00:41:04,940 --> 00:41:08,510
there are benchmarks that are published

00:41:06,500 --> 00:41:10,400
today on planet mysql that show great

00:41:08,510 --> 00:41:12,830
insert performance even compared to the

00:41:10,400 --> 00:41:14,900
archive storage engine it has a great

00:41:12,830 --> 00:41:16,730
compression again something that's

00:41:14,900 --> 00:41:19,400
compared to the archive storage engine

00:41:16,730 --> 00:41:20,690
and it has online scheme of flexibility

00:41:19,400 --> 00:41:22,460
what does that mean you can do hot

00:41:20,690 --> 00:41:24,190
schema changes and online changes if you

00:41:22,460 --> 00:41:29,690
use talkie DB because they've extended

00:41:24,190 --> 00:41:30,890
that feature inside of talk EDB also if

00:41:29,690 --> 00:41:33,530
you're using this as these it's got

00:41:30,890 --> 00:41:34,790
amazing an answer compression talkie DB

00:41:33,530 --> 00:41:37,490
was probably always an interesting

00:41:34,790 --> 00:41:40,040
storage engine but it never really made

00:41:37,490 --> 00:41:42,170
it into mainline rady be because it was

00:41:40,040 --> 00:41:43,610
not open source and many people don't

00:41:42,170 --> 00:41:46,700
want to use something that's not open

00:41:43,610 --> 00:41:49,220
source it is now so totally check out

00:41:46,700 --> 00:41:51,890
sake DB think the other important thing

00:41:49,220 --> 00:41:53,750
about sake DB is that it is also like a

00:41:51,890 --> 00:41:56,060
drop-in replacement for nodb so it

00:41:53,750 --> 00:41:57,670
doesn't have weird features like the

00:41:56,060 --> 00:42:01,160
aria storage engine that we ship as well

00:41:57,670 --> 00:42:07,010
so i have tested taki DB to run against

00:42:01,160 --> 00:42:08,420
drupal it runs fine including tests we

00:42:07,010 --> 00:42:09,920
also include another storage engine

00:42:08,420 --> 00:42:11,480
called the connect storage engine which

00:42:09,920 --> 00:42:13,550
can now allow you to read write or

00:42:11,480 --> 00:42:15,590
update to many different formats and

00:42:13,550 --> 00:42:19,880
probably the most interesting different

00:42:15,590 --> 00:42:23,550
format that is odbc because now you can

00:42:19,880 --> 00:42:26,490
using the Kinect engine to say Oracle or

00:42:23,550 --> 00:42:28,080
any other database it supports odbc and

00:42:26,490 --> 00:42:30,750
then get return result sets and then

00:42:28,080 --> 00:42:34,100
join it again and display this kind of

00:42:30,750 --> 00:42:36,750
data back out to your web app in Drupal

00:42:34,100 --> 00:42:39,540
so again more glue code that you need to

00:42:36,750 --> 00:42:41,880
write at the back but the database is

00:42:39,540 --> 00:42:45,630
giving you more so that you have you can

00:42:41,880 --> 00:42:46,710
still use your favorite front end how

00:42:45,630 --> 00:42:48,990
many of you've heard of Marie to be

00:42:46,710 --> 00:42:52,050
galera cluster before or Percona extra

00:42:48,990 --> 00:42:56,010
DB cluster okay mo hands go up when I

00:42:52,050 --> 00:42:58,560
say Percona actually cluster awesome so

00:42:56,010 --> 00:43:01,410
it is based on the same in 0 DB that you

00:42:58,560 --> 00:43:03,630
really know how to use in 0 DB for what

00:43:01,410 --> 00:43:05,520
its worth has its quirks but it's also

00:43:03,630 --> 00:43:07,620
really well known how to work around

00:43:05,520 --> 00:43:09,150
those quirks this is something that many

00:43:07,620 --> 00:43:10,440
other database systems don't have

00:43:09,150 --> 00:43:13,680
because people don't know how to work

00:43:10,440 --> 00:43:15,060
around your quirks Marie tubular cluster

00:43:13,680 --> 00:43:17,730
we believe is really made for today's

00:43:15,060 --> 00:43:20,610
environments it is fully synchronous

00:43:17,730 --> 00:43:23,460
replication it is read as well as right

00:43:20,610 --> 00:43:25,140
scalable you can have multi master

00:43:23,460 --> 00:43:27,450
topology something you could not do it

00:43:25,140 --> 00:43:30,690
MySQL before but should be able to do

00:43:27,450 --> 00:43:34,110
once GT ID works well and it guarantees

00:43:30,690 --> 00:43:36,240
no lag or loss transactions overhead to

00:43:34,110 --> 00:43:38,970
have synchronous replication in a in the

00:43:36,240 --> 00:43:41,820
same data center is less than 300

00:43:38,970 --> 00:43:44,130
milliseconds at the worst case in all

00:43:41,820 --> 00:43:49,890
benchmarks and real-world use cases that

00:43:44,130 --> 00:43:51,840
we've had so far so generally to Drupal

00:43:49,890 --> 00:43:53,640
your multi master cluster will just look

00:43:51,840 --> 00:43:56,610
like one big database with multiple

00:43:53,640 --> 00:43:58,920
entry points but generally speaking you

00:43:56,610 --> 00:44:02,130
will have many different databases in

00:43:58,920 --> 00:44:04,320
the cluster and your clients can connect

00:44:02,130 --> 00:44:07,440
to any node you can have obviously

00:44:04,320 --> 00:44:09,480
several loads galera handles to the node

00:44:07,440 --> 00:44:11,910
provisioning automatically it has a load

00:44:09,480 --> 00:44:13,830
balancer as well and a demon and the

00:44:11,910 --> 00:44:15,840
replication is completely synchronous it

00:44:13,830 --> 00:44:18,270
is not a synchronous so when when you

00:44:15,840 --> 00:44:20,100
try when you commit a transaction to one

00:44:18,270 --> 00:44:22,230
node you are guaranteed to have

00:44:20,100 --> 00:44:24,600
committed that same transaction to at

00:44:22,230 --> 00:44:27,300
least one other note as well if not all

00:44:24,600 --> 00:44:30,570
the nodes synchronous replication should

00:44:27,300 --> 00:44:32,280
make sure it's on all the nodes but of

00:44:30,570 --> 00:44:32,849
course today you're running things in a

00:44:32,280 --> 00:44:35,220
cloud based on

00:44:32,849 --> 00:44:38,039
environment so you may have other

00:44:35,220 --> 00:44:40,319
concerns as well which I will address in

00:44:38,039 --> 00:44:41,819
the next slide but first I need to tell

00:44:40,319 --> 00:44:43,769
you one very important thing if you're

00:44:41,819 --> 00:44:47,339
running galera cluster because it is

00:44:43,769 --> 00:44:49,289
quorum based if there are failures fifty

00:44:47,339 --> 00:44:51,390
percent does not constitute a quorum so

00:44:49,289 --> 00:44:53,640
if you have these two machines that is

00:44:51,390 --> 00:44:56,430
not enough the minimum configuration for

00:44:53,640 --> 00:44:59,940
galera cluster is three machines so that

00:44:56,430 --> 00:45:05,210
you have more more when it comes to this

00:44:59,940 --> 00:45:08,160
to detecting a quorum so if at all you

00:45:05,210 --> 00:45:10,859
you see that there's a failure gatherer

00:45:08,160 --> 00:45:13,589
decides that it cannot come in any more

00:45:10,859 --> 00:45:20,489
transactions it will now just pass it on

00:45:13,589 --> 00:45:22,319
to the next node all transactions are

00:45:20,489 --> 00:45:26,279
processed independently of each cluster

00:45:22,319 --> 00:45:28,650
node and you can replace transaction

00:45:26,279 --> 00:45:30,989
right sets at commit time right before

00:45:28,650 --> 00:45:34,009
the comment and if there are any

00:45:30,989 --> 00:45:36,029
conflicts cluster white conflicts are

00:45:34,009 --> 00:45:38,609
informed and the victim will have to do

00:45:36,029 --> 00:45:42,450
a rollback but generally speaking this

00:45:38,609 --> 00:45:44,130
is how galera works and it's pretty good

00:45:42,450 --> 00:45:45,869
because it's been around now for more

00:45:44,130 --> 00:45:48,359
than a couple of years but it only

00:45:45,869 --> 00:45:50,039
gained fame when actually DB cluster

00:45:48,359 --> 00:45:53,759
came out and then later on galera

00:45:50,039 --> 00:45:56,519
cluster came up you may be using

00:45:53,759 --> 00:45:58,170
replication regularly my suggestion is

00:45:56,519 --> 00:46:00,539
always make sure you're using a modern

00:45:58,170 --> 00:46:02,249
mysql server or a DB server with a group

00:46:00,539 --> 00:46:04,410
covet in the binary log turned on that

00:46:02,249 --> 00:46:06,029
means single in log equals one it'll be

00:46:04,410 --> 00:46:08,999
flush log a transaction coming equals

00:46:06,029 --> 00:46:12,119
one if you want to have automated

00:46:08,999 --> 00:46:16,109
failover with regular replication use

00:46:12,119 --> 00:46:17,789
something like mha and then after that

00:46:16,109 --> 00:46:19,229
while you're at it turn on semi

00:46:17,789 --> 00:46:21,930
synchronous replication something that

00:46:19,229 --> 00:46:23,249
has been around since mysql 55 why Simon

00:46:21,930 --> 00:46:24,660
synchronous replication important

00:46:23,249 --> 00:46:26,819
because when you make a transaction

00:46:24,660 --> 00:46:28,739
commits you know that with semi segredos

00:46:26,819 --> 00:46:32,160
replication at least one slave got it

00:46:28,739 --> 00:46:34,499
and with the way mha works it will

00:46:32,160 --> 00:46:37,200
require that it finds the latest slave

00:46:34,499 --> 00:46:39,119
and then merges the bin logs the

00:46:37,200 --> 00:46:41,609
differential relay logs between all the

00:46:39,119 --> 00:46:44,759
other slaves so mha will allow you to

00:46:41,609 --> 00:46:47,310
run replication and have very low to

00:46:44,759 --> 00:46:49,380
zero downtime where downtime is

00:46:47,310 --> 00:46:54,780
in less than 30 seconds if you have a

00:46:49,380 --> 00:46:58,890
master fail I give a talk on mha as well

00:46:54,780 --> 00:47:03,020
I gave one about three weeks ago you can

00:46:58,890 --> 00:47:05,970
also reference that up there as well

00:47:03,020 --> 00:47:10,110
another very common thing that we get is

00:47:05,970 --> 00:47:12,090
oh I'm in the cloud I have some nodes in

00:47:10,110 --> 00:47:14,220
Oregon and I also want to have some

00:47:12,090 --> 00:47:17,280
nodes in North Virginia and I want to

00:47:14,220 --> 00:47:19,500
have some more nodes in Singapore galera

00:47:17,280 --> 00:47:22,350
works wonderful over multiple

00:47:19,500 --> 00:47:23,850
geographies you can get mysql with

00:47:22,350 --> 00:47:26,880
regular replication as well as marine

00:47:23,850 --> 00:47:29,820
regular application to work with things

00:47:26,880 --> 00:47:31,560
like semi sink as well but with galera

00:47:29,820 --> 00:47:33,360
what you want to do is synchronous in

00:47:31,560 --> 00:47:35,670
one data center so synchronous say in

00:47:33,360 --> 00:47:37,410
Oregon but over the way you may use

00:47:35,670 --> 00:47:39,420
something like time-delayed replication

00:47:37,410 --> 00:47:41,400
or a synchronous replication to the next

00:47:39,420 --> 00:47:44,070
data center and then you have your

00:47:41,400 --> 00:47:45,330
application decide logically where it

00:47:44,070 --> 00:47:47,040
should be serving things so your load

00:47:45,330 --> 00:47:50,160
balancer will always say okay maybe I

00:47:47,040 --> 00:47:52,400
want this this this this users come from

00:47:50,160 --> 00:47:57,150
this IP so this IP will be served from

00:47:52,400 --> 00:47:59,850
one data center again we've done this

00:47:57,150 --> 00:48:03,990
relatively well across so far up to four

00:47:59,850 --> 00:48:10,380
data centers all using the Amazon ec2

00:48:03,990 --> 00:48:13,020
and it's turned out to be fine there are

00:48:10,380 --> 00:48:15,510
so many benchmarks out there that if I

00:48:13,020 --> 00:48:17,460
if I tell you one benchmark you will

00:48:15,510 --> 00:48:19,200
probably go and try and get another

00:48:17,460 --> 00:48:21,660
vendor to tell you another benchmark and

00:48:19,200 --> 00:48:24,180
they may all be just lies my suggestion

00:48:21,660 --> 00:48:26,070
is fine the benchmark you can repeat so

00:48:24,180 --> 00:48:27,480
every time we do benchmarks we publish

00:48:26,070 --> 00:48:29,190
them on launch pad so that you can

00:48:27,480 --> 00:48:31,860
download it and runs this bench yourself

00:48:29,190 --> 00:48:33,120
and if you can't find a benchmark you

00:48:31,860 --> 00:48:36,060
can repeat create your own benchmarks

00:48:33,120 --> 00:48:38,490
because benchmarks are very just

00:48:36,060 --> 00:48:40,020
statistic oriented but your workload is

00:48:38,490 --> 00:48:41,940
very different from what you get out of

00:48:40,020 --> 00:48:44,910
this bench for example so run your own

00:48:41,940 --> 00:48:47,250
benchmarks but the one good thing we've

00:48:44,910 --> 00:48:48,870
done is by as publishing benchmarks is

00:48:47,250 --> 00:48:51,120
that Oracle now notice is that we exist

00:48:48,870 --> 00:48:54,870
so Oracle also performs benchmarks

00:48:51,120 --> 00:48:56,520
against us so it's it's I believe the

00:48:54,870 --> 00:48:58,920
old marketing adage is never ever

00:48:56,520 --> 00:49:00,610
compared yourself to your competitor

00:48:58,920 --> 00:49:03,190
especially the smaller than you

00:49:00,610 --> 00:49:07,540
we're really small but apparently Oracle

00:49:03,190 --> 00:49:10,440
now compares against us too now as a

00:49:07,540 --> 00:49:13,840
Drupal user security is very important a

00:49:10,440 --> 00:49:16,030
few days ago I installed Drupal straight

00:49:13,840 --> 00:49:17,770
out of a boon to 1204 I think or

00:49:16,030 --> 00:49:19,420
something and the first thing you do

00:49:17,770 --> 00:49:21,430
when you get into the admin panel as it

00:49:19,420 --> 00:49:23,500
tells you there is a newer version of

00:49:21,430 --> 00:49:25,650
Drupal available please download it

00:49:23,500 --> 00:49:28,180
because this will improve your security

00:49:25,650 --> 00:49:29,980
now my scale used to be like that too

00:49:28,180 --> 00:49:32,310
every time we get a security release we

00:49:29,980 --> 00:49:34,390
would make a release out within 48 hours

00:49:32,310 --> 00:49:36,250
however now articles move to a more

00:49:34,390 --> 00:49:38,860
critical patch update phase so they

00:49:36,250 --> 00:49:40,720
release major security fixes once every

00:49:38,860 --> 00:49:43,840
three months and the Korean use new cv

00:49:40,720 --> 00:49:46,570
bulks for those we and maria DB are very

00:49:43,840 --> 00:49:48,850
committed to security and we release bug

00:49:46,570 --> 00:49:52,270
fixes in less than 48 hours it's our

00:49:48,850 --> 00:49:53,800
general commitment to all users this is

00:49:52,270 --> 00:49:54,910
what's made us really popular with linux

00:49:53,800 --> 00:49:57,450
distributions which is why they're

00:49:54,910 --> 00:49:59,320
shifting to using more adb as a default

00:49:57,450 --> 00:50:02,230
another thing is we don't like

00:49:59,320 --> 00:50:04,420
regressions we do testing heavily so

00:50:02,230 --> 00:50:06,610
imagine if suddenly you decide that you

00:50:04,420 --> 00:50:08,470
have a partition tables because you have

00:50:06,610 --> 00:50:11,230
large amounts of data that is stored

00:50:08,470 --> 00:50:13,360
inside Drupal maybe using vuze lots of

00:50:11,230 --> 00:50:15,700
large use partition archive data and

00:50:13,360 --> 00:50:17,110
then suddenly you also depend on the

00:50:15,700 --> 00:50:19,540
query cache but then when you did a

00:50:17,110 --> 00:50:22,150
minor upgrade that feature went away the

00:50:19,540 --> 00:50:23,590
query cache is disabled you should never

00:50:22,150 --> 00:50:24,730
ever do that in a running release you

00:50:23,590 --> 00:50:26,890
should say it's going to be deprecated

00:50:24,730 --> 00:50:29,140
in like the next in the next major

00:50:26,890 --> 00:50:30,400
release we don't like regressions so we

00:50:29,140 --> 00:50:33,040
ensure that you don't get these

00:50:30,400 --> 00:50:34,860
regressions inside of Maria DB and we

00:50:33,040 --> 00:50:38,770
introduce new features really carefully

00:50:34,860 --> 00:50:41,890
may be an option like reflex looks very

00:50:38,770 --> 00:50:43,870
hot now but after maybe three or four

00:50:41,890 --> 00:50:46,660
releases later you find out that this

00:50:43,870 --> 00:50:50,260
reflex option was really not well tested

00:50:46,660 --> 00:50:53,380
bug and we never introduced this one

00:50:50,260 --> 00:50:57,360
little feature for the you know DB

00:50:53,380 --> 00:50:59,440
adapter checkpoint option so again stuff

00:50:57,360 --> 00:51:01,270
you have to be really careful with what

00:50:59,440 --> 00:51:03,610
you do and we don't just do blind merges

00:51:01,270 --> 00:51:05,410
of MySQL we actually pay close attention

00:51:03,610 --> 00:51:07,300
to make sure that nothing wrong key is

00:51:05,410 --> 00:51:11,820
going on we don't want we want to make

00:51:07,300 --> 00:51:11,820
sure you get the best maria DB out there

00:51:12,290 --> 00:51:16,910
so we love we love the community we love

00:51:15,110 --> 00:51:20,570
working with the community here are some

00:51:16,910 --> 00:51:22,370
stats humblebrag slides of lots of

00:51:20,570 --> 00:51:23,990
English downloads we have you know huge

00:51:22,370 --> 00:51:26,540
amounts of downloads we have great

00:51:23,990 --> 00:51:29,090
active mailing lists we're part of

00:51:26,540 --> 00:51:30,830
google summer of code in 2013 we have

00:51:29,090 --> 00:51:32,710
lots of active user groups none in

00:51:30,830 --> 00:51:34,900
Portland but some in San Francisco

00:51:32,710 --> 00:51:37,400
Murray TV is clearly gaining popularity

00:51:34,900 --> 00:51:39,350
Wikipedia migrated the entire English

00:51:37,400 --> 00:51:42,440
Wikipedia tumor a DB so that gave us

00:51:39,350 --> 00:51:44,540
some very good press fedora and opensuse

00:51:42,440 --> 00:51:47,990
ship Murray DBS default so now if you do

00:51:44,540 --> 00:51:49,810
yum install MySQL you actually get more

00:51:47,990 --> 00:51:52,640
a DB server kind of counterintuitive

00:51:49,810 --> 00:51:54,050
because you could be expecting mysql but

00:51:52,640 --> 00:51:56,450
then suddenly you got Maury DB server

00:51:54,050 --> 00:52:00,170
but that goes to show the fact that we

00:51:56,450 --> 00:52:02,780
are drop-in replacement many other Linux

00:52:00,170 --> 00:52:04,280
distributions have also followed suit we

00:52:02,780 --> 00:52:07,040
have many many stories in the knowledge

00:52:04,280 --> 00:52:10,610
base like limelight networks and Nimbus

00:52:07,040 --> 00:52:14,110
they actually moved from they use talk

00:52:10,610 --> 00:52:18,200
pdb as well as Maury DB pay boxes is a

00:52:14,110 --> 00:52:20,870
actually does stuff with credit cards so

00:52:18,200 --> 00:52:22,580
they're like square but in France they

00:52:20,870 --> 00:52:26,380
handle like thirty or forty percent of

00:52:22,580 --> 00:52:29,420
all credit card transactions in France

00:52:26,380 --> 00:52:31,910
so I have a little slide of deployments

00:52:29,420 --> 00:52:34,280
that we've had a few stories craigslist

00:52:31,910 --> 00:52:38,260
for example is fully maria DB and

00:52:34,280 --> 00:52:40,940
mongodb and and sphinx back so they keep

00:52:38,260 --> 00:52:43,880
archive data in MongoDB but current data

00:52:40,940 --> 00:52:46,340
inside of maria DB mozilla has moved

00:52:43,880 --> 00:52:48,140
from petronas patched 512 Maury be 55

00:52:46,340 --> 00:52:51,760
mainly because they like some query

00:52:48,140 --> 00:52:54,080
optimizations for some of the databases

00:52:51,760 --> 00:52:57,350
spam experts was actually the biggest

00:52:54,080 --> 00:52:59,360
migrator from the earliest migrator as

00:52:57,350 --> 00:53:03,230
well to maria debe de migrated thousands

00:52:59,360 --> 00:53:05,600
of servers from mysql to mariadb so we

00:53:03,230 --> 00:53:07,460
were very happy to have them they

00:53:05,600 --> 00:53:12,440
started with 300 servers and now they're

00:53:07,460 --> 00:53:15,740
in the thousands travelblog.org is a

00:53:12,440 --> 00:53:17,570
Drupal based site that now daily

00:53:15,740 --> 00:53:19,220
optimization time has dropped from 24

00:53:17,570 --> 00:53:20,750
minutes to four minutes so radio is

00:53:19,220 --> 00:53:23,600
clearly doing something right web

00:53:20,750 --> 00:53:25,490
hosting companies also like us slashgear

00:53:23,600 --> 00:53:26,090
says that you know he saved so much in

00:53:25,490 --> 00:53:28,160
infrastructure

00:53:26,090 --> 00:53:30,710
also because he runs on the cloud so

00:53:28,160 --> 00:53:32,480
he's doing more with less so there are

00:53:30,710 --> 00:53:35,000
many more of these success stories as

00:53:32,480 --> 00:53:37,700
well pay box is probably the coolest

00:53:35,000 --> 00:53:40,130
because for me anyway because i sat in a

00:53:37,700 --> 00:53:41,690
cab in france and you can see the your

00:53:40,130 --> 00:53:43,280
card is being served by pay box so when

00:53:41,690 --> 00:53:46,130
you swipe your amex at the end of the

00:53:43,280 --> 00:53:49,730
ride it's actually being served using

00:53:46,130 --> 00:53:51,830
really be a very commonly asked question

00:53:49,730 --> 00:53:53,720
is if i were to change across the maury

00:53:51,830 --> 00:53:55,250
DB would my existing mysql databases

00:53:53,720 --> 00:53:58,190
work without issue is there anything i

00:53:55,250 --> 00:54:00,800
need to consider watch out for yes it'll

00:53:58,190 --> 00:54:03,650
work fine actually be really is a better

00:54:00,800 --> 00:54:05,270
nodb you can uninstall mysql install

00:54:03,650 --> 00:54:08,060
them ready be and it will just work if

00:54:05,270 --> 00:54:11,090
it doesn't just work file a bug let us

00:54:08,060 --> 00:54:14,090
know today if you do apt-get install or

00:54:11,090 --> 00:54:16,610
apt get update or yum update or young or

00:54:14,090 --> 00:54:19,010
zipper update you you get upgrades in

00:54:16,610 --> 00:54:20,570
situ so that's in-place upgrades so you

00:54:19,010 --> 00:54:24,740
will have downtime naturally during the

00:54:20,570 --> 00:54:26,690
upgrade but that's it common migration

00:54:24,740 --> 00:54:28,850
tactics include upgrading a slave which

00:54:26,690 --> 00:54:30,470
you can later promote to a master so

00:54:28,850 --> 00:54:31,790
there's no downtime there in fact you

00:54:30,470 --> 00:54:33,320
can run performance to make sure that

00:54:31,790 --> 00:54:35,630
the slave is performing potentially

00:54:33,320 --> 00:54:37,490
better than your master and if you're

00:54:35,630 --> 00:54:39,950
upgrading the gallery you just add a

00:54:37,490 --> 00:54:42,740
node first get it to replicate create

00:54:39,950 --> 00:54:46,870
your gallery cluster externally and then

00:54:42,740 --> 00:54:46,870
you know kill off the old replicants a

00:54:46,930 --> 00:54:51,410
very very other common question is is

00:54:49,700 --> 00:54:53,630
this stuff supported yes it is supported

00:54:51,410 --> 00:54:59,000
you can buy support from every mysql

00:54:53,630 --> 00:55:00,440
vendor except oracle murray to be

00:54:59,000 --> 00:55:02,570
supported for five years from the date

00:55:00,440 --> 00:55:04,790
of release and this is a commitment we

00:55:02,570 --> 00:55:07,640
have for security as well as minor

00:55:04,790 --> 00:55:09,110
feature updates many hosting companies

00:55:07,640 --> 00:55:10,130
are getting on the bandwagon and i think

00:55:09,110 --> 00:55:12,170
the next thing we need to work on is

00:55:10,130 --> 00:55:15,680
make a huge long list of who supports it

00:55:12,170 --> 00:55:17,600
and in what regions but why 'try for

00:55:15,680 --> 00:55:19,370
example announced that they love maury d

00:55:17,600 --> 00:55:22,460
receive table performance and made a

00:55:19,370 --> 00:55:24,530
press release some time ago as well i'm

00:55:22,460 --> 00:55:26,060
sitting at the sky SQL booth like I

00:55:24,530 --> 00:55:27,620
spent the whole day today talking about

00:55:26,060 --> 00:55:30,860
Maury DB so I'm surprised I'm still

00:55:27,620 --> 00:55:32,870
talking now and we are back by the

00:55:30,860 --> 00:55:36,620
foundation just like the Drupal

00:55:32,870 --> 00:55:39,410
foundation so any tuning tips and I'd

00:55:36,620 --> 00:55:42,260
saving the best for last

00:55:39,410 --> 00:55:44,240
you should use MySQL and EMS this is a

00:55:42,260 --> 00:55:46,760
new driver you cannot you can just do

00:55:44,240 --> 00:55:49,130
pakil install MySQL and EMS and this one

00:55:46,760 --> 00:55:50,960
does replication load balancing as well

00:55:49,130 --> 00:55:52,970
as rewrite splitting it's pretty cool

00:55:50,960 --> 00:55:55,819
should definitely check it out anybody

00:55:52,970 --> 00:55:57,440
here running that no you should

00:55:55,819 --> 00:55:58,819
definitely update to this if you are

00:55:57,440 --> 00:56:02,329
going to use galera cluster as well

00:55:58,819 --> 00:56:05,000
highly recommended that you use this use

00:56:02,329 --> 00:56:08,059
extra DB please please if you have still

00:56:05,000 --> 00:56:12,079
on my eyes m ditch it transactions are

00:56:08,059 --> 00:56:14,660
the way to go we ship a more sane my dad

00:56:12,079 --> 00:56:16,460
CNF so by default when you install more

00:56:14,660 --> 00:56:18,859
adb it should be ready for you to run

00:56:16,460 --> 00:56:20,660
but always configure your my dad CNF

00:56:18,859 --> 00:56:22,250
it's amazing how many times you we find

00:56:20,660 --> 00:56:24,380
people never having configured my dad

00:56:22,250 --> 00:56:26,510
CNF now there are tools available for

00:56:24,380 --> 00:56:29,210
you to help help config the sky scale at

00:56:26,510 --> 00:56:31,460
calm or tools of percona calm both will

00:56:29,210 --> 00:56:35,180
allow you to configure a mild CNF based

00:56:31,460 --> 00:56:37,760
on the kind of load you have use your

00:56:35,180 --> 00:56:39,799
application benefit from binary group

00:56:37,760 --> 00:56:41,930
log commit so user application seriously

00:56:39,799 --> 00:56:44,359
there are a couple of scripts tuning

00:56:41,930 --> 00:56:47,240
premier and mysql tuner they are pretty

00:56:44,359 --> 00:56:49,160
ok tools for you to try if you don't

00:56:47,240 --> 00:56:51,170
know how to configure your my dad CNF or

00:56:49,160 --> 00:56:53,630
other options even operating system

00:56:51,170 --> 00:56:56,180
options for kona toolkit is

00:56:53,630 --> 00:56:58,880
indispensable download it if you use

00:56:56,180 --> 00:57:02,000
mysql seriously you must at least use PT

00:56:58,880 --> 00:57:03,920
mysql summary or PT query digest to see

00:57:02,000 --> 00:57:06,559
what's wrong why your queries doing what

00:57:03,920 --> 00:57:08,809
they're doing PT mysql summary used to

00:57:06,559 --> 00:57:11,720
be called MySQL report there is a fairly

00:57:08,809 --> 00:57:13,970
old document circulating from I think

00:57:11,720 --> 00:57:17,210
tagged one consulting on how you could

00:57:13,970 --> 00:57:18,380
have you know configure mysql that

00:57:17,210 --> 00:57:21,520
document needs to be updated because

00:57:18,380 --> 00:57:23,900
lots of these tools have changed so i

00:57:21,520 --> 00:57:25,970
guess i'm going to have many blog posts

00:57:23,900 --> 00:57:28,099
from this particular talk i'm going to

00:57:25,970 --> 00:57:29,299
expand on this and we have lots of

00:57:28,099 --> 00:57:32,720
knowledge inside the knowledge base as

00:57:29,299 --> 00:57:34,490
well we have a whole bunch of resources

00:57:32,720 --> 00:57:37,010
if you have a bug marie de vida org

00:57:34,490 --> 00:57:39,380
slash 0 as a good place if you want to

00:57:37,010 --> 00:57:42,020
talk about Ray DB that's Marie Marie D

00:57:39,380 --> 00:57:45,200
we discuss or me developers we're on

00:57:42,020 --> 00:57:48,440
Facebook's or like us we're on twitter

00:57:45,200 --> 00:57:51,710
you can follow us you can Plus us on

00:57:48,440 --> 00:57:53,250
google+ you want to chat with any of us

00:57:51,710 --> 00:57:55,830
just jump on hash marie

00:57:53,250 --> 00:57:58,760
on freenode were like always there

00:57:55,830 --> 00:58:01,250
because we kind of work in a distributed

00:57:58,760 --> 00:58:05,040
environment I'm based in Malaysia

00:58:01,250 --> 00:58:07,020
sometimes and we have people all around

00:58:05,040 --> 00:58:09,510
the world so you can always find answers

00:58:07,020 --> 00:58:11,430
to your questions and the knowledge base

00:58:09,510 --> 00:58:12,690
it's indispensable I suggest always

00:58:11,430 --> 00:58:14,310
reading it if you have a question go

00:58:12,690 --> 00:58:16,890
there because chances already been

00:58:14,310 --> 00:58:26,190
answered and I have time for questions

00:58:16,890 --> 00:58:28,380
any questions oh there's a Mike do you

00:58:26,190 --> 00:58:30,270
have any plans to put Maria to be and

00:58:28,380 --> 00:58:32,190
like really simple one-click graphical

00:58:30,270 --> 00:58:35,310
installers like ma'am / ramp to help

00:58:32,190 --> 00:58:39,090
increase adoption right we have a

00:58:35,310 --> 00:58:40,560
one-click installer for Windows that we

00:58:39,090 --> 00:58:42,810
also ship with that also comes with

00:58:40,560 --> 00:58:44,520
Heidi SQL so you get a nice gooey as

00:58:42,810 --> 00:58:45,690
well it's not a one-click installer I

00:58:44,520 --> 00:58:49,020
mean you have to press next next next

00:58:45,690 --> 00:58:50,640
but we also have but but we we do want

00:58:49,020 --> 00:58:53,070
to do that if anybody's interested in

00:58:50,640 --> 00:58:55,050
wamp or jam or something we would love

00:58:53,070 --> 00:58:57,150
to work with them all day should switch

00:58:55,050 --> 00:58:58,380
over to us but we don't have direct

00:58:57,150 --> 00:59:00,210
plans to actually have such a

00:58:58,380 --> 00:59:01,950
distribution because we figure most of

00:59:00,210 --> 00:59:04,200
our efforts should be focused on the

00:59:01,950 --> 00:59:07,470
UNIX asst and this cloud deployment

00:59:04,200 --> 00:59:09,120
platforms which is we're not the

00:59:07,470 --> 00:59:10,940
developers may not be using it but

00:59:09,120 --> 00:59:13,350
that's where the deployments happen so

00:59:10,940 --> 00:59:15,150
but it might be something that even you

00:59:13,350 --> 00:59:18,530
would like to work on incredibly lazy

00:59:15,150 --> 00:59:21,660
you just like the panel for windows or

00:59:18,530 --> 00:59:25,730
Macintosh for me up okay man okay we'll

00:59:21,660 --> 00:59:29,060
look into that brew install more ADB

00:59:25,730 --> 00:59:32,730
game client tools like PHP my admin or

00:59:29,060 --> 00:59:34,710
workbench so PHP my admin works with

00:59:32,730 --> 00:59:37,050
Maria DB if you go to PHP mind means

00:59:34,710 --> 00:59:39,990
website it tells you mysql maury to be a

00:59:37,050 --> 00:59:42,660
drizzle so yes we fully work with PHP my

00:59:39,990 --> 00:59:43,920
admin we highly recommend you use it

00:59:42,660 --> 00:59:46,170
they've improved the interface now to

00:59:43,920 --> 00:59:48,180
include things like monitoring and PHP

00:59:46,170 --> 00:59:49,920
myadmin makes use of our GS extensions

00:59:48,180 --> 00:59:51,990
because it also does do display

00:59:49,920 --> 00:59:53,340
geospatial information now as well so

00:59:51,990 --> 00:59:55,440
PHP my admin for all intents and

00:59:53,340 --> 00:59:57,540
purposes works really well do we have an

00:59:55,440 --> 01:00:00,390
alternative to work bench work bench

00:59:57,540 --> 01:00:02,760
also works with this stuff however we

01:00:00,390 --> 01:00:06,640
ship Heidi SQL inside of the windows

01:00:02,760 --> 01:00:09,190
version and I believe sky SQL cells

01:00:06,640 --> 01:00:11,620
sequel yog they call it some tangled

01:00:09,190 --> 01:00:14,620
something what is it calls scious ql

01:00:11,620 --> 01:00:17,530
something so sequel yog is another

01:00:14,620 --> 01:00:19,420
option so no we don't we don't plan to

01:00:17,530 --> 01:00:20,880
make any GUI tools ourselves from the

01:00:19,420 --> 01:00:22,990
server side but they are definitely

01:00:20,880 --> 01:00:25,180
alternatives and if you are using a Mac

01:00:22,990 --> 01:00:27,580
there it's like a really beautiful Coco

01:00:25,180 --> 01:00:30,250
application available that looks like a

01:00:27,580 --> 01:00:32,230
potentially Windows machine or okay

01:00:30,250 --> 01:00:34,030
windows we should hide esq else if you

01:00:32,230 --> 01:00:36,280
download maria DB it comes with Heidi

01:00:34,030 --> 01:00:38,470
SQL by default Heidi SQL supports all

01:00:36,280 --> 01:00:41,500
our extensions including virtual columns

01:00:38,470 --> 01:00:43,300
dynamic columns and so on so download it

01:00:41,500 --> 01:00:48,340
and give it a go because Heidi SQL is

01:00:43,300 --> 01:00:49,750
actually pretty good yes does Maria TB

01:00:48,340 --> 01:00:52,090
do anything to improve the performance

01:00:49,750 --> 01:00:55,330
of temporary files that are being

01:00:52,090 --> 01:00:57,190
written to disk right so we definitely

01:00:55,330 --> 01:00:58,480
improve temporary file performance

01:00:57,190 --> 01:01:00,360
because we don't use my eyes I'm

01:00:58,480 --> 01:01:03,280
internally for temporary tables we use

01:01:00,360 --> 01:01:05,200
Aria Aria something like eight times

01:01:03,280 --> 01:01:07,090
performance improvement over my eyes m

01:01:05,200 --> 01:01:09,550
and it gives you the one added benefit

01:01:07,090 --> 01:01:12,520
of its being crash safe so in the event

01:01:09,550 --> 01:01:13,900
that your mysql server crashes my exam

01:01:12,520 --> 01:01:17,320
will take a long time to recover that

01:01:13,900 --> 01:01:19,860
even though it's temporary data but Aria

01:01:17,320 --> 01:01:22,570
doesn't arielle will be instant recovery

01:01:19,860 --> 01:01:27,820
so yes we have him we have worked on

01:01:22,570 --> 01:01:29,470
that as well a few members on my team

01:01:27,820 --> 01:01:31,270
that work with Acquia dev desktop are

01:01:29,470 --> 01:01:34,210
you working with them at all to

01:01:31,270 --> 01:01:37,420
integrate maria into their releases as

01:01:34,210 --> 01:01:39,760
well i believe that there are some talks

01:01:37,420 --> 01:01:43,380
from Sky SQL and Acquia to maybe

01:01:39,760 --> 01:01:46,510
integrate more Acquia dev desk but we

01:01:43,380 --> 01:01:48,430
stop here dev desktop yeah we add we are

01:01:46,510 --> 01:01:50,350
team really we have not worked on this

01:01:48,430 --> 01:01:52,390
per se but we would definitely like to

01:01:50,350 --> 01:01:54,850
have more partnerships and integrations

01:01:52,390 --> 01:02:02,440
so something that will do as a to-do

01:01:54,850 --> 01:02:04,800
list ok any other questions Oh either

01:02:02,440 --> 01:02:08,800
thanks for the talk be good to see more

01:02:04,800 --> 01:02:11,020
documentation on calorie galera gal

01:02:08,800 --> 01:02:14,260
gather a cluster all right some of the

01:02:11,020 --> 01:02:15,670
config files don't really launch the

01:02:14,260 --> 01:02:20,559
cluster right away and there's a lot of

01:02:15,670 --> 01:02:22,420
errors so ok so kbrasso gene org

01:02:20,559 --> 01:02:24,400
some documentation but yeah I agree

01:02:22,420 --> 01:02:26,890
we're definitely short on documentation

01:02:24,400 --> 01:02:28,569
for that and I'm a chave and like I'm

01:02:26,890 --> 01:02:31,079
kind of embarrassed that to recommend

01:02:28,569 --> 01:02:32,979
you to look at my slide back for mha but

01:02:31,079 --> 01:02:34,630
yeah we need to definitely improve

01:02:32,979 --> 01:02:37,299
documentation and it's something we will

01:02:34,630 --> 01:02:38,650
definitely work on and if you if you

01:02:37,299 --> 01:02:40,420
find that there is a problem with the

01:02:38,650 --> 01:02:42,339
file why don't you just go to the

01:02:40,420 --> 01:02:44,049
knowledge base and open a question and

01:02:42,339 --> 01:02:46,749
say hey this this file doesn't work or

01:02:44,049 --> 01:02:49,689
just report a bug because yeah I think

01:02:46,749 --> 01:02:52,539
where we can do pretty well with writing

01:02:49,689 --> 01:02:53,859
code and stuff but it seems like we're

01:02:52,539 --> 01:02:56,170
pretty bad with writing documentation

01:02:53,859 --> 01:02:57,489
and the foundation has kind of improved

01:02:56,170 --> 01:02:59,459
that because we have hired a

01:02:57,489 --> 01:03:02,199
documentation writer at the foundation

01:02:59,459 --> 01:03:04,479
we I sincerely hope it will improve our

01:03:02,199 --> 01:03:07,499
documentation but I also take that as an

01:03:04,479 --> 01:03:13,359
action item to point him to improving it

01:03:07,499 --> 01:03:18,910
thank you any other questions all right

01:03:13,359 --> 01:03:20,140
oh you have a question yes I believe we

01:03:18,910 --> 01:03:22,329
had some problems with the Drupal

01:03:20,140 --> 01:03:24,069
website like a couple of days ago but it

01:03:22,329 --> 01:03:26,739
will be it'll be on SlideShare as well

01:03:24,069 --> 01:03:31,739
as on the website so i upload everything

01:03:26,739 --> 01:03:35,109
to SlideShare the user name is bite but

01:03:31,739 --> 01:03:37,329
yeah I'm standing right between you and

01:03:35,109 --> 01:03:43,239
your beer there's apparently beer at the

01:03:37,329 --> 01:03:44,559
expo hall any other questions if all

01:03:43,239 --> 01:03:46,769
right well thank you very much for

01:03:44,559 --> 01:03:46,769
listening

01:03:48,940 --> 01:03:51,000

YouTube URL: https://www.youtube.com/watch?v=OK7zoFtneFY


