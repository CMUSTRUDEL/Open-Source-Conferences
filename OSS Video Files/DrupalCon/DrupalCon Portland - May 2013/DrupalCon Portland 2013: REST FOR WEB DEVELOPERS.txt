Title: DrupalCon Portland 2013: REST FOR WEB DEVELOPERS
Publication date: 2013-05-28
Playlist: DrupalCon Portland - May 2013
Description: 
	REST is a term filled with hype and promise, but is it anything more than JSON and pretty URLs? This session tells you everything you need to know about working with REST and implementing it yourself, with a quick tour through verbs, headers, status codes and content types. There will be real examples of making requests using different verbs and data formats, and how to cope when things go wrong (it happens, even in REST!). Expect lots of examples and practical advice in this session that will help developers, architects and technical leads alike.
Captions: 
	00:00:00,000 --> 00:00:05,130
good afternoon how nice to see you all I

00:00:02,419 --> 00:00:07,589
am very excited about giving this talk

00:00:05,130 --> 00:00:10,620
but it wasn't quite expecting so many

00:00:07,589 --> 00:00:13,799
people so i can only say thank you very

00:00:10,620 --> 00:00:15,900
much for coming along this afternoon i'm

00:00:13,799 --> 00:00:18,960
going to be talking about rest and this

00:00:15,900 --> 00:00:22,859
session is aimed very generally at web

00:00:18,960 --> 00:00:24,750
developers i may as well say now before

00:00:22,859 --> 00:00:27,210
it becomes any more obvious that i'm not

00:00:24,750 --> 00:00:29,279
a drupal expert i'm a rest expert that's

00:00:27,210 --> 00:00:33,290
what i do i love api's I care about

00:00:29,279 --> 00:00:36,480
api's and I spend most of my time in

00:00:33,290 --> 00:00:40,469
either straight PHP or any one of the

00:00:36,480 --> 00:00:42,180
other PHP frameworks so um in a great

00:00:40,469 --> 00:00:43,980
many things none of them involve Drupal

00:00:42,180 --> 00:00:45,899
basically the only thing I knew about

00:00:43,980 --> 00:00:49,789
Drupal before i came to drupalcon is

00:00:45,899 --> 00:00:52,140
that I like to drink with Drupal people

00:00:49,789 --> 00:00:58,620
so is very pleased when they accepted my

00:00:52,140 --> 00:01:00,989
talk awesome so um I have some giveaways

00:00:58,620 --> 00:01:03,180
for you and I will do that right at the

00:01:00,989 --> 00:01:05,220
end of the session when I take questions

00:01:03,180 --> 00:01:06,479
have you asked me a question and you're

00:01:05,220 --> 00:01:07,950
in the first two people to ask me a

00:01:06,479 --> 00:01:10,290
question I will give you a copy of my

00:01:07,950 --> 00:01:12,210
book if you have questions at any other

00:01:10,290 --> 00:01:14,790
point during the session I am totally

00:01:12,210 --> 00:01:16,140
happy to take interruptions but to get

00:01:14,790 --> 00:01:17,880
my attention you should go to the

00:01:16,140 --> 00:01:19,470
microphone because you can't ask me a

00:01:17,880 --> 00:01:21,299
question until you get there so don't

00:01:19,470 --> 00:01:22,619
raise your hand go to the mic and that

00:01:21,299 --> 00:01:24,570
way the people listening to the

00:01:22,619 --> 00:01:28,259
recording will hear it as well as

00:01:24,570 --> 00:01:34,079
everybody behind you in the room so here

00:01:28,259 --> 00:01:36,750
we go rest rest is all about data the

00:01:34,079 --> 00:01:40,290
acronym stands for representational

00:01:36,750 --> 00:01:44,450
state transfer and it's pretty much what

00:01:40,290 --> 00:01:48,320
it says on the tin right so we deal in

00:01:44,450 --> 00:01:51,119
transferring representations of data

00:01:48,320 --> 00:01:53,939
everything is a representation of a

00:01:51,119 --> 00:01:58,229
resource or of a collection and we

00:01:53,939 --> 00:02:01,020
probably represent it in JSON in XML

00:01:58,229 --> 00:02:03,180
maybe you serialize your PHP or you like

00:02:01,020 --> 00:02:06,450
yeah Mille or Klingon or I don't really

00:02:03,180 --> 00:02:10,470
care but you represent your data any way

00:02:06,450 --> 00:02:11,240
that you want to everything in your

00:02:10,470 --> 00:02:15,770
system

00:02:11,240 --> 00:02:18,560
is a resource so a user is a resource an

00:02:15,770 --> 00:02:20,840
article is a resource a comment is a

00:02:18,560 --> 00:02:23,990
resource would consider everything as a

00:02:20,840 --> 00:02:26,780
resource and we transfer representations

00:02:23,990 --> 00:02:30,800
of it when you're getting lists of

00:02:26,780 --> 00:02:33,680
resources we call those collections like

00:02:30,800 --> 00:02:35,780
most very hyped technologies it's mostly

00:02:33,680 --> 00:02:37,940
about the words so a thing you should

00:02:35,780 --> 00:02:39,320
say the word resource and for any kind

00:02:37,940 --> 00:02:46,010
of the list you should say the word

00:02:39,320 --> 00:02:51,230
collection now your arrest expert rest

00:02:46,010 --> 00:02:53,390
is not just about pretty urls you do

00:02:51,230 --> 00:02:56,690
need to have really good routing to do

00:02:53,390 --> 00:03:00,230
rest well but the urls are very

00:02:56,690 --> 00:03:03,080
important they tell a story I have some

00:03:00,230 --> 00:03:06,830
example urls on this slide so you can

00:03:03,080 --> 00:03:10,670
guess that the top example / articles is

00:03:06,830 --> 00:03:15,080
a collection of articles you might guess

00:03:10,670 --> 00:03:18,590
at articles / 2756 is an individual

00:03:15,080 --> 00:03:22,430
article resource you're all with me so

00:03:18,590 --> 00:03:24,950
far this is excellent also you will see

00:03:22,430 --> 00:03:27,290
these sub resources so I have a specific

00:03:24,950 --> 00:03:30,890
article resource which has a comments

00:03:27,290 --> 00:03:32,720
collection associated with it so rather

00:03:30,890 --> 00:03:34,670
than getting all the comments in the

00:03:32,720 --> 00:03:37,130
world ever and filtering for this

00:03:34,670 --> 00:03:41,600
article we can make them available as a

00:03:37,130 --> 00:03:43,190
sub resource of our article and then as

00:03:41,600 --> 00:03:45,350
an example I've got a finally an

00:03:43,190 --> 00:03:48,650
independent and individual comment

00:03:45,350 --> 00:03:52,010
resource so those URLs create too much

00:03:48,650 --> 00:03:55,190
describe the data that exists at those

00:03:52,010 --> 00:03:57,950
URLs and thinking of data being at the

00:03:55,190 --> 00:04:01,240
URL is a really good way to think about

00:03:57,950 --> 00:04:01,240
how this works

00:04:02,239 --> 00:04:08,780
typically when we talk about the web we

00:04:05,160 --> 00:04:11,520
are talking about using rest with HTTP

00:04:08,780 --> 00:04:13,500
that means that this talk is about rest

00:04:11,520 --> 00:04:16,019
and it's going to involve quite a lot of

00:04:13,500 --> 00:04:19,769
HTTP because that's the example that I'm

00:04:16,019 --> 00:04:22,770
using HTTP is an awesome format it has

00:04:19,769 --> 00:04:26,010
lots and lots of features that make

00:04:22,770 --> 00:04:29,669
implementing elegant data transfer very

00:04:26,010 --> 00:04:32,310
very easy so I am going to talk to you

00:04:29,669 --> 00:04:35,220
about verbs and how we use those in a

00:04:32,310 --> 00:04:37,979
restful api i'm going to talk about

00:04:35,220 --> 00:04:39,840
status codes why they are so important

00:04:37,979 --> 00:04:42,450
and under what conditions i will hunt

00:04:39,840 --> 00:04:45,660
you down and kill you and i'm going to

00:04:42,450 --> 00:04:48,360
talk about headers and i want to talk

00:04:45,660 --> 00:04:50,790
about how those fit in also in the

00:04:48,360 --> 00:04:53,010
context of a browser and also of a

00:04:50,790 --> 00:04:56,610
mobile device so I've got some examples

00:04:53,010 --> 00:05:00,150
for all of those things will start with

00:04:56,610 --> 00:05:05,010
verbs verbs define the operations that

00:05:00,150 --> 00:05:07,740
we perform on our resource so we use the

00:05:05,010 --> 00:05:11,100
same URL regardless of whether we are

00:05:07,740 --> 00:05:15,390
reading a resource creating one changing

00:05:11,100 --> 00:05:18,030
one deleting one and the verb tells us

00:05:15,390 --> 00:05:19,740
which of those things we're doing as web

00:05:18,030 --> 00:05:23,550
developers you already know about get

00:05:19,740 --> 00:05:25,470
and post I'm going to add two more into

00:05:23,550 --> 00:05:31,169
that list for you and that's the put and

00:05:25,470 --> 00:05:32,970
delete verbs when we use the get verb on

00:05:31,169 --> 00:05:34,650
a connection that will fetch all the

00:05:32,970 --> 00:05:36,810
resources in the collections so we'll

00:05:34,650 --> 00:05:40,800
get representation representations of

00:05:36,810 --> 00:05:42,810
each resource in a collection if you do

00:05:40,800 --> 00:05:45,000
a get request to a single resource

00:05:42,810 --> 00:05:47,160
you'll just get the representation of

00:05:45,000 --> 00:05:49,110
that resource and the representations

00:05:47,160 --> 00:05:52,289
are the same regardless of whether it

00:05:49,110 --> 00:05:56,810
appears in a collection or as an

00:05:52,289 --> 00:06:00,360
individual resource we use the post verb

00:05:56,810 --> 00:06:02,430
to create a new resource so you make a

00:06:00,360 --> 00:06:04,440
representation of the resource you craft

00:06:02,430 --> 00:06:06,150
together whatever representation

00:06:04,440 --> 00:06:10,470
language you're going to use and you

00:06:06,150 --> 00:06:13,110
post it to the collection that the new

00:06:10,470 --> 00:06:15,270
resource will live inside so it's a bit

00:06:13,110 --> 00:06:17,670
like doing an insert on a mysql table

00:06:15,270 --> 00:06:20,190
you just send the data without the

00:06:17,670 --> 00:06:23,490
primary key and the database comes back

00:06:20,190 --> 00:06:26,370
and gives you the last insert ID and in

00:06:23,490 --> 00:06:28,770
this case the date the breast server

00:06:26,370 --> 00:06:34,020
will come i can give you the URL where

00:06:28,770 --> 00:06:37,320
that resource will exist we use put to

00:06:34,020 --> 00:06:40,020
change a record so you would get a

00:06:37,320 --> 00:06:42,930
resource change it as you need to and

00:06:40,020 --> 00:06:46,020
then use the put verb to put it back

00:06:42,930 --> 00:06:49,380
where it belongs I have create in

00:06:46,020 --> 00:06:52,740
brackets because you can put a new

00:06:49,380 --> 00:06:55,050
record to a known you are i if the

00:06:52,740 --> 00:06:57,540
client gets to make the decision about

00:06:55,050 --> 00:07:00,720
what the uri will be that's not often

00:06:57,540 --> 00:07:05,160
the case hence the brackets guess what

00:07:00,720 --> 00:07:07,650
the delete verb does right so you have a

00:07:05,160 --> 00:07:09,840
resource at a particular URI you want to

00:07:07,650 --> 00:07:14,490
delete it make a request with the delete

00:07:09,840 --> 00:07:17,310
verb good you're keeping up let's talk

00:07:14,490 --> 00:07:20,640
about status codes status codes are the

00:07:17,310 --> 00:07:22,890
headline news they come back with the

00:07:20,640 --> 00:07:28,050
response from a server and they tell you

00:07:22,890 --> 00:07:31,680
what happened typically these are the

00:07:28,050 --> 00:07:36,060
most common ones 200 means everything is

00:07:31,680 --> 00:07:42,630
okay most frameworks CMS's and other

00:07:36,060 --> 00:07:45,720
tools will emit a 200 by default if I

00:07:42,630 --> 00:07:48,540
make a request to your API and there's

00:07:45,720 --> 00:07:51,870
something wrong and you send me an HTML

00:07:48,540 --> 00:07:53,550
error message and a 200 status code that

00:07:51,870 --> 00:07:57,450
is the moment I will hunt you down and

00:07:53,550 --> 00:07:59,820
kill you I integrate with a lot of other

00:07:57,450 --> 00:08:03,750
people's api's i'm just getting less and

00:07:59,820 --> 00:08:06,240
less tolerant as i get older the 201

00:08:03,750 --> 00:08:08,760
status is something that you will see in

00:08:06,240 --> 00:08:11,310
restful services because we are posting

00:08:08,760 --> 00:08:13,770
a new resource representation to a

00:08:11,310 --> 00:08:15,930
collection and creating a record you are

00:08:13,770 --> 00:08:18,480
going to see full on examples of this

00:08:15,930 --> 00:08:19,980
soon but it was quite cody so I thought

00:08:18,480 --> 00:08:22,950
we could do the story first and then I

00:08:19,980 --> 00:08:27,080
would drown you with code so the created

00:08:22,950 --> 00:08:27,080
tells you that something was created

00:08:30,510 --> 00:08:40,419
right the 204 response is one that you

00:08:36,010 --> 00:08:41,890
do sometimes see and it's literally 200

00:08:40,419 --> 00:08:44,380
everything's cool and I have

00:08:41,890 --> 00:08:47,740
intentionally sent you empty body

00:08:44,380 --> 00:08:49,450
content this is used for example when

00:08:47,740 --> 00:08:51,750
you delete something right if you

00:08:49,450 --> 00:08:56,339
request the server deletes something I

00:08:51,750 --> 00:09:01,029
did delete it I have nothing to tell you

00:08:56,339 --> 00:09:02,860
quick it's gone so it's not really a 200

00:09:01,029 --> 00:09:05,680
because if you saw 200 with a blank body

00:09:02,860 --> 00:09:08,290
you might be confused and we us use 204

00:09:05,680 --> 00:09:12,040
for that specific case anything

00:09:08,290 --> 00:09:17,200
beginning with a 2 is good news anything

00:09:12,040 --> 00:09:19,779
beginning with a 3 is yes but there's

00:09:17,200 --> 00:09:23,740
something we need to talk about so the

00:09:19,779 --> 00:09:26,050
example here that I've given is 3044 not

00:09:23,740 --> 00:09:29,320
modified you would use this with

00:09:26,050 --> 00:09:32,860
something like a last modified or an

00:09:29,320 --> 00:09:35,740
e-tag header where you've requested the

00:09:32,860 --> 00:09:37,390
resource you've received the resource it

00:09:35,740 --> 00:09:40,209
had some information about its version

00:09:37,390 --> 00:09:42,520
in it next time you request the resource

00:09:40,209 --> 00:09:45,130
you send information about which version

00:09:42,520 --> 00:09:48,490
you have if you have the current version

00:09:45,130 --> 00:09:50,560
the server says 304 and it doesn't lead

00:09:48,490 --> 00:09:52,540
to send you anything else you just use

00:09:50,560 --> 00:09:54,820
the version that you have so that saves

00:09:52,540 --> 00:09:57,910
repeat transmission of data that does

00:09:54,820 --> 00:10:03,100
not change often very very useful for

00:09:57,910 --> 00:10:06,160
sites which need to scale anything

00:10:03,100 --> 00:10:10,360
beginning with a 4 means you did

00:10:06,160 --> 00:10:13,180
something wrong the 400 bad request is

00:10:10,360 --> 00:10:14,709
kind of lean on specific I really know

00:10:13,180 --> 00:10:18,730
what's going on here so you probably

00:10:14,709 --> 00:10:21,010
sent our data or the server was stupid

00:10:18,730 --> 00:10:24,670
and didn't understand some combination

00:10:21,010 --> 00:10:26,830
of that the 404 is specifically you

00:10:24,670 --> 00:10:28,660
asked me for a record that wasn't found

00:10:26,830 --> 00:10:31,390
so literally did to get requests on

00:10:28,660 --> 00:10:33,970
something and it doesn't exist it is not

00:10:31,390 --> 00:10:35,410
there so those are the common status

00:10:33,970 --> 00:10:37,930
codes and there are many many more

00:10:35,410 --> 00:10:39,190
there's a fabulous Wikipedia page if

00:10:37,930 --> 00:10:40,540
you want to lose the rest of the session

00:10:39,190 --> 00:10:43,300
reading that status codes you should

00:10:40,540 --> 00:10:46,710
look it up right now and it has a very

00:10:43,300 --> 00:10:48,850
improbably large list of Slater's codes

00:10:46,710 --> 00:10:50,290
the things that you need to know are you

00:10:48,850 --> 00:10:52,510
should go there and you should use the

00:10:50,290 --> 00:10:55,420
right status code even if it's as simple

00:10:52,510 --> 00:10:57,820
as 400 something went wrong 200

00:10:55,420 --> 00:11:00,130
everything's cool that's a good start

00:10:57,820 --> 00:11:02,770
there are status codes covering all

00:11:00,130 --> 00:11:06,399
kinds of things from redirects to

00:11:02,770 --> 00:11:08,290
problems with you must authenticate your

00:11:06,399 --> 00:11:10,390
authentication is invalid this record

00:11:08,290 --> 00:11:12,820
doesn't exist anymore this record was

00:11:10,390 --> 00:11:15,250
updated since you last used it and so on

00:11:12,820 --> 00:11:17,709
so there's lots that you can do there to

00:11:15,250 --> 00:11:20,080
make your api's more informative to the

00:11:17,709 --> 00:11:23,440
user the more information that you can

00:11:20,080 --> 00:11:26,050
give to whoever or whatever is consuming

00:11:23,440 --> 00:11:28,630
your API the less likely they are to

00:11:26,050 --> 00:11:31,270
open support tickets and the more likely

00:11:28,630 --> 00:11:36,880
you will make it to the pub that's the

00:11:31,270 --> 00:11:40,029
aim of the game let's talk about HTTP

00:11:36,880 --> 00:11:42,640
headers this is something which because

00:11:40,029 --> 00:11:44,200
we don't see headers when we are working

00:11:42,640 --> 00:11:45,790
with the browser the browser handles

00:11:44,200 --> 00:11:49,150
that side of things and we really only

00:11:45,790 --> 00:11:52,690
see the body as web developers sometimes

00:11:49,150 --> 00:11:57,070
we don't pay quite enough attention to

00:11:52,690 --> 00:11:59,500
this aspect so have some example request

00:11:57,070 --> 00:12:01,209
headers a lot of my code examples will

00:11:59,500 --> 00:12:03,279
look like this if you are a long way

00:12:01,209 --> 00:12:05,320
back in this room you probably can't

00:12:03,279 --> 00:12:07,300
read the code samples in which case feel

00:12:05,320 --> 00:12:09,310
free to download the slides they're

00:12:07,300 --> 00:12:11,050
linked from the footer of Lorna Jane net

00:12:09,310 --> 00:12:15,180
and that also on the session page for

00:12:11,050 --> 00:12:18,580
this session on the conference website

00:12:15,180 --> 00:12:21,910
if you make a jiff a general get request

00:12:18,580 --> 00:12:24,760
to Lorna Jane dot net using this this

00:12:21,910 --> 00:12:26,860
was made by curl I'm not going to do a

00:12:24,760 --> 00:12:28,360
big tangential rant about curl but if

00:12:26,860 --> 00:12:31,839
you'd like one please see me in the bar

00:12:28,360 --> 00:12:34,140
later we send some headers and in this

00:12:31,839 --> 00:12:37,899
case we're just sending three headers

00:12:34,140 --> 00:12:40,570
we're sending the user agent which says

00:12:37,899 --> 00:12:43,120
what it was that made the request this

00:12:40,570 --> 00:12:45,130
is totally unreliable you can send any

00:12:43,120 --> 00:12:48,070
user agent you like using most of the

00:12:45,130 --> 00:12:51,720
tools all of these headers are as

00:12:48,070 --> 00:12:56,710
trustable as get post or cookie

00:12:51,720 --> 00:12:58,900
ie they are not the host header saying

00:12:56,710 --> 00:13:02,170
which domain D request was made to and

00:12:58,900 --> 00:13:03,700
the accept header this is a horrible

00:13:02,170 --> 00:13:06,970
example of an accept header and you'll

00:13:03,700 --> 00:13:08,920
find out why in a moment here are the

00:13:06,970 --> 00:13:11,650
response headers which come back if you

00:13:08,920 --> 00:13:14,230
hit Lorna Jane dotnet you get some

00:13:11,650 --> 00:13:16,510
information about my web server and the

00:13:14,230 --> 00:13:18,220
Apache version the PHP version where you

00:13:16,510 --> 00:13:21,370
can ping back to if you're linking to

00:13:18,220 --> 00:13:24,690
one of my wildly popular blog posts some

00:13:21,370 --> 00:13:27,310
caching information the content type

00:13:24,690 --> 00:13:31,420
you've just made a request to a website

00:13:27,310 --> 00:13:33,220
and the content is in HTML that's good

00:13:31,420 --> 00:13:36,850
and the rest will start to look at

00:13:33,220 --> 00:13:40,360
things which are not HTML when the body

00:13:36,850 --> 00:13:44,860
is not HTML the content type shouldn't

00:13:40,360 --> 00:13:46,810
be either some dates as a varnish header

00:13:44,860 --> 00:13:50,920
in there i'm running wordpress so i'm

00:13:46,810 --> 00:13:54,370
running varnish in front of it we

00:13:50,920 --> 00:13:56,830
negotiate content format using those

00:13:54,370 --> 00:14:01,000
pair those twin headers their sisters

00:13:56,830 --> 00:14:03,580
really a content type and an accept so

00:14:01,000 --> 00:14:07,450
when you make the request you say I

00:14:03,580 --> 00:14:10,540
accept this format or this list of

00:14:07,450 --> 00:14:13,810
formats this slide shows the example

00:14:10,540 --> 00:14:16,360
that my browser sends this is a stand of

00:14:13,810 --> 00:14:19,080
chrome header and if this is the accept

00:14:16,360 --> 00:14:27,030
had a default chrome installation sends

00:14:19,080 --> 00:14:31,480
saying I understand HTML XHTML and well

00:14:27,030 --> 00:14:33,870
XML and failing that star slash star

00:14:31,480 --> 00:14:36,730
whatever else you've got I'll have that

00:14:33,870 --> 00:14:39,730
so that's why curl sends the star slash

00:14:36,730 --> 00:14:42,730
star curl does not understand every file

00:14:39,730 --> 00:14:44,710
format ever invented it's just trying to

00:14:42,730 --> 00:14:49,630
get you something that you can work with

00:14:44,710 --> 00:14:51,400
to pass this accept header you need to

00:14:49,630 --> 00:14:55,000
think of this header as a series of

00:14:51,400 --> 00:14:58,000
comma separated values here's the header

00:14:55,000 --> 00:14:59,830
again so we split the comma separated

00:14:58,000 --> 00:15:03,790
value we Smith this string on comma

00:14:59,830 --> 00:15:06,970
separated values which give us some

00:15:03,790 --> 00:15:10,750
types and some which have an extra q

00:15:06,970 --> 00:15:12,970
thing in the queue is a measure of

00:15:10,750 --> 00:15:15,640
preference the default is one and

00:15:12,970 --> 00:15:19,110
anything less than 1 is less preferred

00:15:15,640 --> 00:15:24,370
so you can say I really want XHTML and

00:15:19,110 --> 00:15:27,580
if you have xml okay and as a fallback

00:15:24,370 --> 00:15:29,410
okay plain text but it's point five so

00:15:27,580 --> 00:15:32,530
you can you can not just send a list but

00:15:29,410 --> 00:15:34,510
also send information about really what

00:15:32,530 --> 00:15:37,240
you want and what you'll settle for so

00:15:34,510 --> 00:15:39,370
that's those different things in

00:15:37,240 --> 00:15:42,190
addition to accept we also have except

00:15:39,370 --> 00:15:44,650
language accept-encoding and accept

00:15:42,190 --> 00:15:47,770
character set so for different kinds of

00:15:44,650 --> 00:15:49,780
clients that will understand all want

00:15:47,770 --> 00:15:52,960
the content in different versions or

00:15:49,780 --> 00:15:56,890
different encodings you can you can do

00:15:52,960 --> 00:15:59,280
things like this it's everyone okay so

00:15:56,890 --> 00:15:59,280
far

00:16:03,090 --> 00:16:07,630
that's good this is the point of which I

00:16:05,470 --> 00:16:10,029
got really bored and telling you about

00:16:07,630 --> 00:16:11,710
all the wonderful HTTP textbook things I

00:16:10,029 --> 00:16:13,240
wrote the textbook I have some to give

00:16:11,710 --> 00:16:15,250
away and you can read that your leisure

00:16:13,240 --> 00:16:18,250
I'd now like to show you some examples

00:16:15,250 --> 00:16:21,790
of how I really use these kinds of

00:16:18,250 --> 00:16:26,920
services all of my examples use github

00:16:21,790 --> 00:16:29,560
has anyone here used github that's quite

00:16:26,920 --> 00:16:32,320
a lot of hands good well done so good

00:16:29,560 --> 00:16:34,000
have have a really good API it covers

00:16:32,320 --> 00:16:36,550
things we're familiar with because we're

00:16:34,000 --> 00:16:38,950
developers and they also have

00:16:36,550 --> 00:16:41,290
implemented quite a good restful

00:16:38,950 --> 00:16:44,890
platform so that's why I really like it

00:16:41,290 --> 00:16:48,339
as an example here i'm making a get

00:16:44,890 --> 00:16:52,180
request to the collection of issues on

00:16:48,339 --> 00:16:53,500
my demo repo I'm Lorna Jane on github

00:16:52,180 --> 00:16:56,710
feel free to click around so you can see

00:16:53,500 --> 00:16:58,360
this on the web I maybe get requests I

00:16:56,710 --> 00:17:00,460
send the user agent the host header and

00:16:58,360 --> 00:17:02,560
the accept header spot there's an

00:17:00,460 --> 00:17:06,790
additional header in this request and

00:17:02,560 --> 00:17:09,569
it's an authorization header github uses

00:17:06,790 --> 00:17:12,579
something called a wharf where you

00:17:09,569 --> 00:17:15,720
negotiate with github to a court acquire

00:17:12,579 --> 00:17:20,800
an authorization that's an access token

00:17:15,720 --> 00:17:23,020
so authorization name of token and then

00:17:20,800 --> 00:17:27,220
your access token here and you send this

00:17:23,020 --> 00:17:31,150
as a header so we're not cluttering up

00:17:27,220 --> 00:17:33,670
our restful requests and responses with

00:17:31,150 --> 00:17:36,040
usernames passwords who knows what else

00:17:33,670 --> 00:17:39,250
chucked in as query parameters or

00:17:36,040 --> 00:17:41,980
somewhere in the body rest clears the

00:17:39,250 --> 00:17:44,980
out of the way it uses the envelope

00:17:41,980 --> 00:17:48,100
format of HTTP to wrap that into a

00:17:44,980 --> 00:17:49,750
header it's part of the request but it's

00:17:48,100 --> 00:17:52,030
the address on the outside of the

00:17:49,750 --> 00:17:55,540
envelope not the birthday card that's on

00:17:52,030 --> 00:17:58,900
the inside it separates our content from

00:17:55,540 --> 00:18:01,450
the negotiation and the metadata so

00:17:58,900 --> 00:18:02,770
that's an OAuth header it's worth

00:18:01,450 --> 00:18:04,690
getting into this if you're going to

00:18:02,770 --> 00:18:07,870
work with github because they allow 60

00:18:04,690 --> 00:18:09,760
requests per hour per IP unless you're

00:18:07,870 --> 00:18:14,050
authenticated try running a workshop

00:18:09,760 --> 00:18:14,460
with that going on you get like 1500 an

00:18:14,050 --> 00:18:16,740
hour

00:18:14,460 --> 00:18:19,260
oh you're gonna get some headers with

00:18:16,740 --> 00:18:23,100
examples so the response to my request

00:18:19,260 --> 00:18:25,440
for a collection of issues this is the

00:18:23,100 --> 00:18:28,230
headers I make the get request and the

00:18:25,440 --> 00:18:31,410
response comes back the first line says

00:18:28,230 --> 00:18:33,780
200 okay we're doing something right

00:18:31,410 --> 00:18:35,880
this is good news we get some

00:18:33,780 --> 00:18:39,210
information about the server the date

00:18:35,880 --> 00:18:43,260
the content type this is very important

00:18:39,210 --> 00:18:46,110
if a response or a request actually has

00:18:43,260 --> 00:18:49,080
any body associated with it so when

00:18:46,110 --> 00:18:51,630
you're making a request a post request

00:18:49,080 --> 00:18:54,240
or a pot request will have some body

00:18:51,630 --> 00:18:57,690
data it therefore needs a content header

00:18:54,240 --> 00:18:59,990
any response will usually have some body

00:18:57,690 --> 00:19:02,940
data it needs a content-type header

00:18:59,990 --> 00:19:06,120
because otherwise how do you know how to

00:19:02,940 --> 00:19:08,370
unpack the body this is really important

00:19:06,120 --> 00:19:11,670
if I if I week make a request to your

00:19:08,370 --> 00:19:14,520
API and like my accept header says I

00:19:11,670 --> 00:19:15,720
want JSON if you send me well if you

00:19:14,520 --> 00:19:17,520
send me Jason I still need a

00:19:15,720 --> 00:19:20,400
content-type header but if you've sent

00:19:17,520 --> 00:19:22,110
me XML then I really need a content-type

00:19:20,400 --> 00:19:24,420
header because if you have the wrong

00:19:22,110 --> 00:19:27,750
version of PHP it segfaults when you

00:19:24,420 --> 00:19:30,360
json decode nonsense so we need to be

00:19:27,750 --> 00:19:33,660
really careful about sending the correct

00:19:30,360 --> 00:19:35,910
metadata in this case github is sending

00:19:33,660 --> 00:19:38,160
me chase on github actually only

00:19:35,910 --> 00:19:42,620
supports JSON sometimes that's

00:19:38,160 --> 00:19:42,620
acceptable it depends on the application

00:19:42,800 --> 00:19:47,220
stater the semi another status header

00:19:44,970 --> 00:19:50,130
we've got some caching information we've

00:19:47,220 --> 00:19:53,130
got a last modified and an e-tag we've

00:19:50,130 --> 00:19:56,610
got some ex auth scopes that's a github

00:19:53,130 --> 00:20:00,270
specific thing saying what what stuff I

00:19:56,610 --> 00:20:02,040
can do with my access token I know it's

00:20:00,270 --> 00:20:06,180
github specific because the header

00:20:02,040 --> 00:20:09,510
starts with an X dash it is valid in

00:20:06,180 --> 00:20:11,730
HTTP to use any header you like you can

00:20:09,510 --> 00:20:13,550
invent your own so long as the client

00:20:11,730 --> 00:20:15,900
and the server understand them

00:20:13,550 --> 00:20:17,730
occasionally things go wrong in between

00:20:15,900 --> 00:20:20,700
if you have deep packet inspection but

00:20:17,730 --> 00:20:23,610
in general in HTTP specification terms

00:20:20,700 --> 00:20:26,530
it's completely valid however it's

00:20:23,610 --> 00:20:30,010
conventional to prefix your invented

00:20:26,530 --> 00:20:34,180
with X dash just so everybody knows that

00:20:30,010 --> 00:20:36,160
they are custom to your application what

00:20:34,180 --> 00:20:38,860
else I got in here Oh the last line is a

00:20:36,160 --> 00:20:40,660
content length which helps you know if

00:20:38,860 --> 00:20:42,760
you have correctly passed it and if it's

00:20:40,660 --> 00:20:47,260
all arrived and so on so that's a good

00:20:42,760 --> 00:20:49,330
one we've made a get request we saw that

00:20:47,260 --> 00:20:51,970
we've made we've got the response this

00:20:49,330 --> 00:20:54,160
was the headers this is the body of the

00:20:51,970 --> 00:20:56,050
response it's actually a really edited

00:20:54,160 --> 00:20:58,650
body of the response and even then I

00:20:56,050 --> 00:21:04,570
think the text size is still a bit small

00:20:58,650 --> 00:21:10,290
this returns us the URL this is how we

00:21:04,570 --> 00:21:13,030
identify this issue it has a unique URL

00:21:10,290 --> 00:21:17,170
we will be making requests to this with

00:21:13,030 --> 00:21:20,950
different verbs there's a link to the

00:21:17,170 --> 00:21:23,200
comments URL that's an associated

00:21:20,950 --> 00:21:25,480
collection so it's a collection of

00:21:23,200 --> 00:21:28,960
comments that relates to this URL and

00:21:25,480 --> 00:21:32,200
the resource includes information on how

00:21:28,960 --> 00:21:34,750
to get there we call this hypermedia as

00:21:32,200 --> 00:21:37,150
you can see it's a bit like hyperlinks

00:21:34,750 --> 00:21:40,870
isn't nearly as complicated or trendiest

00:21:37,150 --> 00:21:43,090
probably it can be made to sound so yes

00:21:40,870 --> 00:21:45,760
a link to another place or you can find

00:21:43,090 --> 00:21:48,180
things there is a title it's broken and

00:21:45,760 --> 00:21:52,320
a body this thing does not work

00:21:48,180 --> 00:21:52,320
representing a typical bug report

00:21:55,380 --> 00:22:01,240
if you look at the user line you can see

00:21:58,900 --> 00:22:04,990
that I chopped a bunch a bunch of JSON

00:22:01,240 --> 00:22:07,059
out of here inside there was actually a

00:22:04,990 --> 00:22:09,880
whole representation of my user details

00:22:07,059 --> 00:22:11,530
on github which wouldn't fit on the

00:22:09,880 --> 00:22:13,360
screen but it meant that if you were

00:22:11,530 --> 00:22:15,730
showing a list of issues you could see

00:22:13,360 --> 00:22:18,429
who opened the issue you could link to

00:22:15,730 --> 00:22:20,470
my account it's got my avatar and so on

00:22:18,429 --> 00:22:22,000
so that's all included in the issue

00:22:20,470 --> 00:22:23,710
because you probably don't want to show

00:22:22,000 --> 00:22:26,670
the issue without showing additional

00:22:23,710 --> 00:22:29,620
information whether or not you include

00:22:26,670 --> 00:22:31,480
that information or link to it with some

00:22:29,620 --> 00:22:35,080
kind of hypermedia it's completely up to

00:22:31,480 --> 00:22:37,570
you I'll pause to say something about

00:22:35,080 --> 00:22:40,270
hypermedia they it literally is just

00:22:37,570 --> 00:22:42,610
hyperlinks right if you are doing a page

00:22:40,270 --> 00:22:44,770
that represented drupalcon you might

00:22:42,610 --> 00:22:48,250
have some hyperlinks to the individual

00:22:44,770 --> 00:22:50,080
talks if you're doing it in an API give

00:22:48,250 --> 00:22:52,240
me some hypermedia to the torque

00:22:50,080 --> 00:22:55,090
resources or maybe a list a collection

00:22:52,240 --> 00:22:58,390
of talks it's exactly the same thing and

00:22:55,090 --> 00:23:03,220
actually the design of the user journey

00:22:58,390 --> 00:23:05,440
through an API using these links is very

00:23:03,220 --> 00:23:08,500
much in a parallel to the way that we

00:23:05,440 --> 00:23:11,170
understand the way our web users use it

00:23:08,500 --> 00:23:13,300
so whether it's another application that

00:23:11,170 --> 00:23:16,179
consumes your API whether you shook your

00:23:13,300 --> 00:23:17,950
own mobile app with thinking about this

00:23:16,179 --> 00:23:21,630
design where would they need to go from

00:23:17,950 --> 00:23:24,309
here which data needs to be included

00:23:21,630 --> 00:23:26,590
using hypermedia means that clients can

00:23:24,309 --> 00:23:29,020
navigate for themselves they can grab

00:23:26,590 --> 00:23:31,570
the issue resource and follow the

00:23:29,020 --> 00:23:33,730
comments property use the value of that

00:23:31,570 --> 00:23:36,250
to find where the comments should be as

00:23:33,730 --> 00:23:38,260
an API provider this means that once in

00:23:36,250 --> 00:23:39,910
a while you can break your URLs because

00:23:38,260 --> 00:23:43,240
people are not concatenating things

00:23:39,910 --> 00:23:47,980
together with IDs I try never to return

00:23:43,240 --> 00:23:49,570
IDs like raw IDs from a restful api

00:23:47,980 --> 00:23:52,150
because it leads to be booking cuttin

00:23:49,570 --> 00:23:54,670
ating things together when actually all

00:23:52,150 --> 00:23:55,990
the links they need are here and if not

00:23:54,670 --> 00:24:00,340
I've missed something and they should

00:23:55,990 --> 00:24:01,900
tell me ok let's talk about a post

00:24:00,340 --> 00:24:03,160
request this is a little bit more

00:24:01,900 --> 00:24:06,010
interesting than the get request because

00:24:03,160 --> 00:24:06,490
we get to send some data this is a post

00:24:06,010 --> 00:24:09,400
request

00:24:06,490 --> 00:24:10,750
I'm going to create an issue no I'm

00:24:09,400 --> 00:24:12,790
going to create a comment that's right

00:24:10,750 --> 00:24:14,440
the comments really small and simple and

00:24:12,790 --> 00:24:17,050
fitted on my slide so I'm going to put a

00:24:14,440 --> 00:24:19,960
comment a new comment against the issue

00:24:17,050 --> 00:24:23,440
that you just saw so I make a post

00:24:19,960 --> 00:24:26,200
request to the collection of where the

00:24:23,440 --> 00:24:28,780
comments go for this issue I'm sending

00:24:26,200 --> 00:24:32,320
some headers user agent host accept

00:24:28,780 --> 00:24:34,660
header content type I'm sending a

00:24:32,320 --> 00:24:37,210
content type because i'm sending body

00:24:34,660 --> 00:24:39,400
data if you send body data please send

00:24:37,210 --> 00:24:40,929
the content type there's my

00:24:39,400 --> 00:24:42,940
authorization token again this is not a

00:24:40,929 --> 00:24:47,140
valid github token by the way because

00:24:42,940 --> 00:24:48,670
I'm crazy but not that crazy all my

00:24:47,140 --> 00:24:50,710
slides are in text-based market so I

00:24:48,670 --> 00:24:55,179
make it all and then I do a find replace

00:24:50,710 --> 00:24:58,690
and just scramble my key content-length

00:24:55,179 --> 00:25:01,570
37 and on the last line you can see the

00:24:58,690 --> 00:25:05,050
JSON that i sent the only required field

00:25:01,570 --> 00:25:07,300
for a comment is the body of the comment

00:25:05,050 --> 00:25:10,240
it knows who i am i'm logged in it's got

00:25:07,300 --> 00:25:11,770
my access token so all i need to do is

00:25:10,240 --> 00:25:14,710
just stick some words in there and i can

00:25:11,770 --> 00:25:18,220
send it so mass can get hub to create a

00:25:14,710 --> 00:25:22,230
comment and the response comes back 2 m1

00:25:18,220 --> 00:25:25,360
created so that's good news it's

00:25:22,230 --> 00:25:28,720
acknowledging that a new resource was

00:25:25,360 --> 00:25:31,360
made in response to my request content

00:25:28,720 --> 00:25:34,240
type application JSON cool so I know how

00:25:31,360 --> 00:25:37,929
to understand the body what else I got a

00:25:34,240 --> 00:25:42,429
location header a redirect header came

00:25:37,929 --> 00:25:46,090
back with my created acknowledgment this

00:25:42,429 --> 00:25:49,270
is a redirect to the URL of the new

00:25:46,090 --> 00:25:52,540
comment resource so it's very common to

00:25:49,270 --> 00:25:54,730
get a 201 and a redirect so you pose to

00:25:52,540 --> 00:25:57,760
the collection and you'll get redirected

00:25:54,730 --> 00:26:00,690
to the new record it's quite an elegant

00:25:57,760 --> 00:26:03,660
way of doing things and it's very common

00:26:00,690 --> 00:26:07,200
content-length etag cache control

00:26:03,660 --> 00:26:11,320
standard HTTP things so the body

00:26:07,200 --> 00:26:14,020
contains the new comment there's the URL

00:26:11,320 --> 00:26:15,850
with a new comment the URL of the issue

00:26:14,020 --> 00:26:17,740
in the API that it relates to I've

00:26:15,850 --> 00:26:19,270
chopped the URLs so that you would have

00:26:17,740 --> 00:26:19,690
some idea of what the more interesting

00:26:19,270 --> 00:26:22,990
end

00:26:19,690 --> 00:26:25,000
would look like again I shot my user

00:26:22,990 --> 00:26:26,649
record but it's still in there so you

00:26:25,000 --> 00:26:28,600
can see who made this comment link

00:26:26,649 --> 00:26:30,539
through to the URL there avatar any

00:26:28,600 --> 00:26:34,840
other information that you want

00:26:30,539 --> 00:26:36,820
sometimes don't and the body so so far

00:26:34,840 --> 00:26:39,639
so good we have fetch data from github

00:26:36,820 --> 00:26:41,980
and we have posted dated github and rest

00:26:39,639 --> 00:26:43,559
is all about working with data you

00:26:41,980 --> 00:26:46,450
already know how to work with databases

00:26:43,559 --> 00:26:47,860
and typically this is just it goes in

00:26:46,450 --> 00:26:51,039
your storage layer and the fact that

00:26:47,860 --> 00:26:53,529
actually some of this data is somewhere

00:26:51,039 --> 00:26:58,240
else over an HTTP request doesn't matter

00:26:53,529 --> 00:27:02,019
to most of your application the put

00:26:58,240 --> 00:27:06,220
request we use put to update things and

00:27:02,019 --> 00:27:08,830
to use pot first you must use get so you

00:27:06,220 --> 00:27:10,509
do get you fetch the record make

00:27:08,830 --> 00:27:13,860
whatever change you need to do so that

00:27:10,509 --> 00:27:17,649
now you have a new representation and

00:27:13,860 --> 00:27:19,299
then put it and you put it back where

00:27:17,649 --> 00:27:21,340
you got it from think of tidying up in

00:27:19,299 --> 00:27:24,129
your bedroom right you get something

00:27:21,340 --> 00:27:27,909
change it put it back to the same URL

00:27:24,129 --> 00:27:29,320
with a put verb with your request so you

00:27:27,909 --> 00:27:32,679
grab it you get the JSON representation

00:27:29,320 --> 00:27:35,409
change the JSON representation put back

00:27:32,679 --> 00:27:39,480
to the original location and the

00:27:35,409 --> 00:27:42,159
response comes back with a 200 okay and

00:27:39,480 --> 00:27:44,549
it just sends us the new version of the

00:27:42,159 --> 00:27:47,019
resource because we're still on the same

00:27:44,549 --> 00:27:49,450
URL so it just sends the same the same

00:27:47,019 --> 00:27:57,940
version of the resource with the updated

00:27:49,450 --> 00:28:01,299
e-tags and last modified and so on which

00:27:57,940 --> 00:28:05,080
would be lovely except github to

00:28:01,299 --> 00:28:07,120
actually use put um they're a really

00:28:05,080 --> 00:28:09,429
good example for uh a restful service

00:28:07,120 --> 00:28:11,470
but they don't implement put the

00:28:09,429 --> 00:28:16,240
implement patch now this is interesting

00:28:11,470 --> 00:28:17,409
this its controversial actually I'm

00:28:16,240 --> 00:28:20,950
going to explain you to anyway good

00:28:17,409 --> 00:28:23,559
excellent the github use patch patch

00:28:20,950 --> 00:28:25,629
deals with incremental changes right you

00:28:23,559 --> 00:28:27,490
know what a diff is a new diff and you

00:28:25,629 --> 00:28:28,990
get just the changes and you patch and

00:28:27,490 --> 00:28:31,730
you apply those small changes to the

00:28:28,990 --> 00:28:36,500
existing thing this is the same thing

00:28:31,730 --> 00:28:40,070
in HTTP pure rest says you must only

00:28:36,500 --> 00:28:42,260
deal in whole representations that you

00:28:40,070 --> 00:28:44,710
know there can be no data validation

00:28:42,260 --> 00:28:48,950
there can be no violation you must take

00:28:44,710 --> 00:28:51,080
the entity and put the entity and never

00:28:48,950 --> 00:28:53,810
diverge well in the real world that's

00:28:51,080 --> 00:28:55,940
not terribly useful so hatch allows us

00:28:53,810 --> 00:28:58,820
to just change for example the email

00:28:55,940 --> 00:29:00,620
address on a very large user record you

00:28:58,820 --> 00:29:04,160
might not want to get the whole

00:29:00,620 --> 00:29:08,240
representation of an article to change

00:29:04,160 --> 00:29:10,430
the title or add a tag so patch let's

00:29:08,240 --> 00:29:14,150
has work around this and github uses it

00:29:10,430 --> 00:29:15,560
so in in the hope that I won't blind

00:29:14,150 --> 00:29:19,880
anyone with science here's the plat

00:29:15,560 --> 00:29:23,360
request all I'm going to do here is make

00:29:19,880 --> 00:29:26,510
a change by sending a new body to the

00:29:23,360 --> 00:29:30,200
comment i just made so there's the URL

00:29:26,510 --> 00:29:32,570
of where the comment went user agent

00:29:30,200 --> 00:29:34,880
hosts accept header content type because

00:29:32,570 --> 00:29:36,440
i'm sending body authorization because i

00:29:34,880 --> 00:29:38,450
need to be logged in as me to edit my

00:29:36,440 --> 00:29:40,730
own comments exactly as i would be on

00:29:38,450 --> 00:29:42,830
the website when i'm testing this i do

00:29:40,730 --> 00:29:44,930
it with github open in my browser in the

00:29:42,830 --> 00:29:46,490
other window and i make the request or

00:29:44,930 --> 00:29:48,860
refresh the page and I go oh yeah cool

00:29:46,490 --> 00:29:51,260
good and that's literally how this works

00:29:48,860 --> 00:29:54,230
if you have the mobile client for github

00:29:51,260 --> 00:29:55,400
or like I use it on the tablet that's

00:29:54,230 --> 00:29:57,590
what it's using is the API

00:29:55,400 --> 00:30:01,370
behind-the-scenes probably their website

00:29:57,590 --> 00:30:04,340
consumes it as well so I send just what

00:30:01,370 --> 00:30:05,930
i want to change in this case I'm just

00:30:04,340 --> 00:30:09,260
changing the wording of the comment I

00:30:05,930 --> 00:30:13,760
have improved my comment back comes the

00:30:09,260 --> 00:30:16,520
response 200 okay and that includes as

00:30:13,760 --> 00:30:18,950
the body the full representation of the

00:30:16,520 --> 00:30:23,510
new comment just for completeness I

00:30:18,950 --> 00:30:26,330
guess so that's patch just just changing

00:30:23,510 --> 00:30:30,380
a single a single entry rather than

00:30:26,330 --> 00:30:34,300
having to collect change and then put

00:30:30,380 --> 00:30:38,120
back a whole record I quite like put

00:30:34,300 --> 00:30:41,570
patch is not widely supported but

00:30:38,120 --> 00:30:44,750
definitely part of rest conversations

00:30:41,570 --> 00:30:50,690
now so I really wanted to include it

00:30:44,750 --> 00:30:52,670
you easy okay the delete request guess

00:30:50,690 --> 00:30:55,210
what does you send the delete verb and

00:30:52,670 --> 00:30:57,410
name the thing that you want to delete

00:30:55,210 --> 00:30:58,820
Afghan of course I have to send my

00:30:57,410 --> 00:31:00,590
authorization header because you can

00:30:58,820 --> 00:31:03,320
only do you can only delete my comment

00:31:00,590 --> 00:31:05,870
on github if you're logged in as me and

00:31:03,320 --> 00:31:10,010
back comes the response to a for no

00:31:05,870 --> 00:31:12,050
content there's nothing to send me right

00:31:10,010 --> 00:31:13,880
the resource is not there and I asked

00:31:12,050 --> 00:31:17,440
for it not to be there so it comes back

00:31:13,880 --> 00:31:20,570
to 0 for no content and that's a 200 but

00:31:17,440 --> 00:31:22,550
deliberately content length 0 if you are

00:31:20,570 --> 00:31:25,760
working with github be aware that you if

00:31:22,550 --> 00:31:28,730
you are ever sending post put or patch

00:31:25,760 --> 00:31:31,250
with empty body for some reason starring

00:31:28,730 --> 00:31:37,130
repos works like this you do need to

00:31:31,250 --> 00:31:40,310
send the content length of 0 so I have

00:31:37,130 --> 00:31:43,220
gone through examples of all the four

00:31:40,310 --> 00:31:45,440
and a bit verbs for verbs I would have

00:31:43,220 --> 00:31:47,420
liked to have used and patch because

00:31:45,440 --> 00:31:51,050
github uses it and it's an important

00:31:47,420 --> 00:31:55,240
topic in rest I want to talk a bit more

00:31:51,050 --> 00:31:59,420
now about making the most of HTTP and

00:31:55,240 --> 00:32:01,700
about some of the Allied architecture

00:31:59,420 --> 00:32:03,950
decisions that you will see and I think

00:32:01,700 --> 00:32:06,110
these apply whether you are implementing

00:32:03,950 --> 00:32:07,850
and publishing your own restful service

00:32:06,110 --> 00:32:09,500
or whether you just want to integrate

00:32:07,850 --> 00:32:15,410
with something which already publishes

00:32:09,500 --> 00:32:19,210
data over rest you saw the authorization

00:32:15,410 --> 00:32:23,990
header it's a very tidy way of

00:32:19,210 --> 00:32:26,150
exchanging identity credentials when

00:32:23,990 --> 00:32:29,180
working with a restful service because

00:32:26,150 --> 00:32:33,250
all of the details are in the header you

00:32:29,180 --> 00:32:36,290
have a couple of options you can use

00:32:33,250 --> 00:32:39,680
basic off if you want to this is a very

00:32:36,290 --> 00:32:41,770
mature well understood well supported

00:32:39,680 --> 00:32:45,800
platform you already know how it works

00:32:41,770 --> 00:32:47,540
why not apply it to your API as a web

00:32:45,800 --> 00:32:50,600
developer you have most of the skills

00:32:47,540 --> 00:32:53,600
you already need to work with api's all

00:32:50,600 --> 00:32:56,120
of them different kinds of AP is so use

00:32:53,600 --> 00:32:57,210
the basic off actually probably use

00:32:56,120 --> 00:33:01,740
digest

00:32:57,210 --> 00:33:04,950
same thing but encrypted passing things

00:33:01,740 --> 00:33:07,919
in the headers using tokens why would I

00:33:04,950 --> 00:33:11,340
use a token over using your actual user

00:33:07,919 --> 00:33:13,919
credentials well it's because lots of

00:33:11,340 --> 00:33:17,100
things are now logging into Twitter

00:33:13,919 --> 00:33:20,039
github flickr as me most of them are on

00:33:17,100 --> 00:33:23,970
my phone some of them are our clients on

00:33:20,039 --> 00:33:25,799
a tablet they might be exchanging data

00:33:23,970 --> 00:33:27,960
when i post a flickr for example the

00:33:25,799 --> 00:33:30,470
photos appear on facebook there are lots

00:33:27,960 --> 00:33:34,830
and lots of things accessing my accounts

00:33:30,470 --> 00:33:38,490
using a token means that if i don't want

00:33:34,830 --> 00:33:41,490
just that to have access anymore i can

00:33:38,490 --> 00:33:44,220
revoke one token because every single

00:33:41,490 --> 00:33:46,049
integration point has its own token so

00:33:44,220 --> 00:33:48,090
whether you follow a formal process such

00:33:46,049 --> 00:33:50,520
as our or whether you're rolling your

00:33:48,090 --> 00:33:53,970
own tokens it's a very good way of

00:33:50,520 --> 00:33:55,409
revoking access for something without

00:33:53,970 --> 00:33:57,240
the user having to change their

00:33:55,409 --> 00:33:59,820
credentials and then update every other

00:33:57,240 --> 00:34:03,510
thing that uses it it's a very very

00:33:59,820 --> 00:34:06,210
sound approach I could talk for an hour

00:34:03,510 --> 00:34:10,950
about OAuth and again I'm gonna try not

00:34:06,210 --> 00:34:12,419
to but find me in the bar um I wharf in

00:34:10,950 --> 00:34:15,899
30 seconds why did I think this was a

00:34:12,419 --> 00:34:18,000
good idea okay so there is so much I

00:34:15,899 --> 00:34:20,359
want to tell you about OAuth and a wolf

00:34:18,000 --> 00:34:22,619
handles the relationship between you

00:34:20,359 --> 00:34:24,510
something which has your data and

00:34:22,619 --> 00:34:27,629
something else that you'd like to have

00:34:24,510 --> 00:34:30,990
some potentially limited access to your

00:34:27,629 --> 00:34:33,290
data if you give your username and

00:34:30,990 --> 00:34:36,300
password to your Flickr mobile phone app

00:34:33,290 --> 00:34:38,149
then that app perhaps might use your

00:34:36,300 --> 00:34:42,359
credentials to login to Flickr

00:34:38,149 --> 00:34:44,700
impersonating you a wolf gets around

00:34:42,359 --> 00:34:48,450
that and sort of deals with the fact

00:34:44,700 --> 00:34:50,460
that there are three players there's you

00:34:48,450 --> 00:34:52,020
as Flickr and then there's the app and

00:34:50,460 --> 00:34:55,320
you kind of all get together and you say

00:34:52,020 --> 00:34:57,390
you take a Flickr ok I'd really like you

00:34:55,320 --> 00:35:00,270
to grant them access please to my data

00:34:57,390 --> 00:35:03,210
for this app when the app access is

00:35:00,270 --> 00:35:07,020
flickr Victor knows it's the app and not

00:35:03,210 --> 00:35:10,640
you that access might be restricted in

00:35:07,020 --> 00:35:13,250
scope it might be read only two

00:35:10,640 --> 00:35:16,190
does read only it might be limited for

00:35:13,250 --> 00:35:20,510
time it might only be valid for a month

00:35:16,190 --> 00:35:22,549
or however long it takes if you decide

00:35:20,510 --> 00:35:25,609
that the app that you downloaded from

00:35:22,549 --> 00:35:27,230
who knows where turns out not to be all

00:35:25,609 --> 00:35:29,299
that prep you tible and it's polluting

00:35:27,230 --> 00:35:32,839
your Twitter stream you can revoke the

00:35:29,299 --> 00:35:35,599
token without necessarily having to

00:35:32,839 --> 00:35:38,569
revoke your users access or any other

00:35:35,599 --> 00:35:40,220
access to that same provider so that's

00:35:38,569 --> 00:35:42,049
what our office for is for giving

00:35:40,220 --> 00:35:44,599
something else access to your data that

00:35:42,049 --> 00:35:48,309
lives on a particular provider and

00:35:44,599 --> 00:35:51,609
you'll see a lot about OAuth a wolf one

00:35:48,309 --> 00:35:55,460
should not be touch with a bargepole a

00:35:51,609 --> 00:35:57,079
wolf to finally made it into a real spec

00:35:55,460 --> 00:35:58,609
that bears no resemblance to the way

00:35:57,079 --> 00:36:01,760
that people actually implement it but I

00:35:58,609 --> 00:36:03,829
worth two is really really good all you

00:36:01,760 --> 00:36:07,430
need to know is that you will generate

00:36:03,829 --> 00:36:10,880
tokens and you will use SSL so do oo off

00:36:07,430 --> 00:36:13,880
to do it over HTTPS good implementation

00:36:10,880 --> 00:36:16,130
that was much quicker than tell you the

00:36:13,880 --> 00:36:18,950
whole story okay let's talk about

00:36:16,130 --> 00:36:20,930
caching headers you already know a lot

00:36:18,950 --> 00:36:23,599
about caching headers because you cash

00:36:20,930 --> 00:36:28,039
assets on websites basically the same

00:36:23,599 --> 00:36:30,680
things apply it's very important to get

00:36:28,039 --> 00:36:32,660
caching correct because when your mobile

00:36:30,680 --> 00:36:35,019
app goes in the top ten for your country

00:36:32,660 --> 00:36:37,910
then your back-end is going to fall over

00:36:35,019 --> 00:36:40,130
caching headers will help you to make

00:36:37,910 --> 00:36:44,289
the most of your hardware and reduce the

00:36:40,130 --> 00:36:46,579
load for everybody the expires header

00:36:44,289 --> 00:36:48,559
gives them from the cut their client

00:36:46,579 --> 00:36:51,920
information about how long it can keep a

00:36:48,559 --> 00:36:54,259
particular piece of content we use e tag

00:36:51,920 --> 00:36:55,640
or last modified to check that

00:36:54,259 --> 00:36:58,880
something's changed so you saw the

00:36:55,640 --> 00:37:01,160
example with the 304 header when I make

00:36:58,880 --> 00:37:04,099
a request and I retrieve some content it

00:37:01,160 --> 00:37:07,220
comes with an e-tag or a last modified

00:37:04,099 --> 00:37:10,670
date when I request the same endpoint

00:37:07,220 --> 00:37:13,490
the same URI in the future I send as a

00:37:10,670 --> 00:37:16,970
header the if modified since or the

00:37:13,490 --> 00:37:20,240
e-tag if it hasn't changed the server

00:37:16,970 --> 00:37:23,890
just sends me a 304 that's very very

00:37:20,240 --> 00:37:26,319
quick using rest Oh

00:37:23,890 --> 00:37:29,680
something like our PC or soap which is

00:37:26,319 --> 00:37:32,859
all post requests means that things like

00:37:29,680 --> 00:37:35,319
the reverse proxy caches varnish and so

00:37:32,859 --> 00:37:38,140
on can help you in terms of caching

00:37:35,319 --> 00:37:40,180
because if it's just a get request and

00:37:38,140 --> 00:37:44,079
all of that all of the responses will be

00:37:40,180 --> 00:37:46,450
the same then you can cash it a post

00:37:44,079 --> 00:37:49,869
request can't be cached because it's not

00:37:46,450 --> 00:37:52,779
a safe operation so rest recognizes that

00:37:49,869 --> 00:37:55,420
get is always safe and we can probably

00:37:52,779 --> 00:37:57,609
cash that I mentioned right at the start

00:37:55,420 --> 00:37:59,829
by bran van in front of my wordpress

00:37:57,609 --> 00:38:02,079
installation there's no personalization

00:37:59,829 --> 00:38:05,740
on my site only person you can log in is

00:38:02,079 --> 00:38:07,420
me so when I write a blog post quite

00:38:05,740 --> 00:38:08,710
often I do see a spike of traffic

00:38:07,420 --> 00:38:10,299
varnish can just handle that for me

00:38:08,710 --> 00:38:12,220
everybody's seeing exactly the same

00:38:10,299 --> 00:38:14,109
thing don't need to wait for WordPress

00:38:12,220 --> 00:38:18,250
to do its thing and generate some output

00:38:14,109 --> 00:38:20,230
will just cash it and send it the other

00:38:18,250 --> 00:38:22,059
advantage of the caching headers I'm not

00:38:20,230 --> 00:38:23,650
sure how I got to a varnish tangent but

00:38:22,059 --> 00:38:26,230
the other advantage of the caching

00:38:23,650 --> 00:38:28,569
headers is that it allows us to detect

00:38:26,230 --> 00:38:31,240
changes in version when we are trying to

00:38:28,569 --> 00:38:36,960
do an update you can clearly see that

00:38:31,240 --> 00:38:40,180
this get change things put is not atomic

00:38:36,960 --> 00:38:42,640
the caching headers help us with that so

00:38:40,180 --> 00:38:44,799
when we send the put we can send what

00:38:42,640 --> 00:38:48,039
our last modified timestamp was or we

00:38:44,799 --> 00:38:50,380
can send re tag the server can then make

00:38:48,039 --> 00:38:54,250
a decision about whether our version can

00:38:50,380 --> 00:38:57,960
overwrite or not and there's a 409

00:38:54,250 --> 00:39:00,069
conflict status code which would say

00:38:57,960 --> 00:39:02,200
generally no I don't think that's a good

00:39:00,069 --> 00:39:04,690
idea for the most of the time it's fine

00:39:02,200 --> 00:39:06,970
but it would allow us if your

00:39:04,690 --> 00:39:09,490
application needs to know that there was

00:39:06,970 --> 00:39:11,380
a race condition we can detect it and

00:39:09,490 --> 00:39:19,210
that's an additional side effect of

00:39:11,380 --> 00:39:21,700
these caching headers I want to talk in

00:39:19,210 --> 00:39:24,039
general about restful services just as I

00:39:21,700 --> 00:39:26,349
kind of wrap up this talk I want to try

00:39:24,039 --> 00:39:31,210
and place them in the in the wider world

00:39:26,349 --> 00:39:34,480
of the web and of mobile when to use

00:39:31,210 --> 00:39:38,200
rest there's two provisos here rest

00:39:34,480 --> 00:39:40,510
lends itself very well to data-driven

00:39:38,200 --> 00:39:43,240
allocations so if you are mostly working

00:39:40,510 --> 00:39:45,550
with data I work on an open source

00:39:43,240 --> 00:39:47,170
project called joined in it is a list of

00:39:45,550 --> 00:39:49,570
events the events have talks and the

00:39:47,170 --> 00:39:51,880
talks all have feedback have comments on

00:39:49,570 --> 00:39:53,500
them you can kind of imagine that this

00:39:51,880 --> 00:39:56,500
database has about five tables set it

00:39:53,500 --> 00:40:00,640
right it's really really data-driven so

00:39:56,500 --> 00:40:02,290
it lends itself very well to a restful

00:40:00,640 --> 00:40:04,930
model because it's just representing

00:40:02,290 --> 00:40:07,000
data you're sort of products and orders

00:40:04,930 --> 00:40:12,030
and that kind of thing again small

00:40:07,000 --> 00:40:14,680
things if you have very batch driven

00:40:12,030 --> 00:40:17,530
functional sort of I'm try not to say

00:40:14,680 --> 00:40:19,660
paradigm the functional paradigm kind of

00:40:17,530 --> 00:40:23,770
applications then rest is less of a good

00:40:19,660 --> 00:40:27,640
selection the other limiting factor for

00:40:23,770 --> 00:40:31,150
when you can choose rest is when it is

00:40:27,640 --> 00:40:33,970
understood or could be understood rest

00:40:31,150 --> 00:40:37,210
is not widely used in every aspect of

00:40:33,970 --> 00:40:39,579
the web community yet I would say more

00:40:37,210 --> 00:40:42,460
so for mobile less so perhaps for

00:40:39,579 --> 00:40:44,710
traditional web and if you are integrate

00:40:42,460 --> 00:40:47,619
your building a REST API to integrate

00:40:44,710 --> 00:40:52,150
with somebody else particularly if they

00:40:47,619 --> 00:40:52,869
are I'm going to insult somebody and no

00:40:52,150 --> 00:40:54,250
there isn't the way around this

00:40:52,869 --> 00:40:56,500
particularly if they are Java or.net

00:40:54,250 --> 00:41:01,810
developers they may not be able to

00:40:56,500 --> 00:41:03,579
understand rest so the tool support is

00:41:01,810 --> 00:41:06,550
less good they like soap because there's

00:41:03,579 --> 00:41:09,569
a button and then their thing does a

00:41:06,550 --> 00:41:09,569
thing right

00:41:10,090 --> 00:41:14,270
this is a really scientific explanation

00:41:12,680 --> 00:41:17,570
of the problems with integrating with

00:41:14,270 --> 00:41:19,760
other communities within web scripting

00:41:17,570 --> 00:41:21,980
languages and the mobile space you will

00:41:19,760 --> 00:41:23,450
find rest as well supported Drupal

00:41:21,980 --> 00:41:26,750
obviously going way more in that

00:41:23,450 --> 00:41:29,060
direction moving forward but that can

00:41:26,750 --> 00:41:31,190
sometimes be a limiting choice I'm a

00:41:29,060 --> 00:41:32,620
consultant I'm an expert on rest I work

00:41:31,190 --> 00:41:35,420
with lots and lots of people and

00:41:32,620 --> 00:41:37,130
sometimes they build RPC services so

00:41:35,420 --> 00:41:38,660
it's about trying to understand the

00:41:37,130 --> 00:41:42,200
problem and make the best

00:41:38,660 --> 00:41:43,940
recommendations that you can if you are

00:41:42,200 --> 00:41:48,950
going to design a restful service then

00:41:43,940 --> 00:41:50,900
these are my parting tips try to

00:41:48,950 --> 00:41:52,670
remember that we are modif we are

00:41:50,900 --> 00:41:56,390
modeling everything in terms of

00:41:52,670 --> 00:42:00,020
resources everything's a resource every

00:41:56,390 --> 00:42:02,960
operation is you dictate which one is

00:42:00,020 --> 00:42:04,820
happening by using a verb and all of the

00:42:02,960 --> 00:42:09,020
metadata which is not part of the

00:42:04,820 --> 00:42:14,180
resource get sent in the header if you

00:42:09,020 --> 00:42:18,290
have a verb in your URL you are doing it

00:42:14,180 --> 00:42:21,250
wrong when you're designing any kind of

00:42:18,290 --> 00:42:27,430
service please consider the failure case

00:42:21,250 --> 00:42:30,080
to API providers users look like idiots

00:42:27,430 --> 00:42:33,380
they're not I promise they just haven't

00:42:30,080 --> 00:42:38,090
read the instructions so consider what

00:42:33,380 --> 00:42:41,810
happens when things go wrong the measure

00:42:38,090 --> 00:42:44,150
of how good your service is is how it

00:42:41,810 --> 00:42:47,990
treats someone when they've done the

00:42:44,150 --> 00:42:50,420
wrong thing that's a measure of

00:42:47,990 --> 00:42:52,100
robustness of reliability and again

00:42:50,420 --> 00:42:55,730
keeps the support tickets down and you

00:42:52,100 --> 00:42:58,970
can go to the pub you have decisions to

00:42:55,730 --> 00:43:01,130
make about how much data to return are

00:42:58,970 --> 00:43:03,260
you going to return every field

00:43:01,130 --> 00:43:06,890
available to be associated with this

00:43:03,260 --> 00:43:09,140
resource because when you do a list of

00:43:06,890 --> 00:43:13,730
articles or products or whatever it is

00:43:09,140 --> 00:43:15,800
that's going to be a lot of data or are

00:43:13,730 --> 00:43:18,530
you going to offer a more abbreviated

00:43:15,800 --> 00:43:20,480
format with the option perhaps as a sub

00:43:18,530 --> 00:43:23,609
resource or by passing a query parameter

00:43:20,480 --> 00:43:26,680
to get more day

00:43:23,609 --> 00:43:28,720
sometimes you might choose to send less

00:43:26,680 --> 00:43:32,700
data making more available somewhere

00:43:28,720 --> 00:43:34,900
else a good example is blog articles

00:43:32,700 --> 00:43:36,609
because all of the fields are small

00:43:34,900 --> 00:43:38,920
apart from the body which is humongous

00:43:36,609 --> 00:43:41,109
you don't want that when you returning a

00:43:38,920 --> 00:43:44,920
collection you might even publish it as

00:43:41,109 --> 00:43:47,470
a separate sub resource sometimes you'll

00:43:44,920 --> 00:43:51,880
want to do the exact opposite and pull

00:43:47,470 --> 00:43:54,190
some on some related resource into your

00:43:51,880 --> 00:43:55,839
current representation and the example

00:43:54,190 --> 00:43:57,970
is the issues in the comments with the

00:43:55,839 --> 00:44:00,579
user resource nested inside it that we

00:43:57,970 --> 00:44:03,520
saw the github you never want to display

00:44:00,579 --> 00:44:05,230
an issue without saying who logged it or

00:44:03,520 --> 00:44:07,450
a comment without saying who made this

00:44:05,230 --> 00:44:08,800
comment so you'll always want to nest

00:44:07,450 --> 00:44:11,800
that data even though they're probably

00:44:08,800 --> 00:44:13,900
stored in different database tables so

00:44:11,800 --> 00:44:16,420
those are the kinds of decisions that

00:44:13,900 --> 00:44:20,170
you will want to make when you come to

00:44:16,420 --> 00:44:21,880
publish your own api's I'm hoping that

00:44:20,170 --> 00:44:23,680
this has given you an overview whether

00:44:21,880 --> 00:44:25,660
you will be publishing your own or

00:44:23,680 --> 00:44:28,030
whether you'll be integrating with

00:44:25,660 --> 00:44:31,780
restful services elsewhere on the web of

00:44:28,030 --> 00:44:33,339
what's going on and why it's done the

00:44:31,780 --> 00:44:36,040
way it is what are we trying to achieve

00:44:33,339 --> 00:44:38,290
with these new and unfamiliar verbs

00:44:36,040 --> 00:44:41,020
what's with the pretty you are else so

00:44:38,290 --> 00:44:45,339
hopefully I've given you some overview

00:44:41,020 --> 00:44:49,210
at that point now i do have 15 minutes

00:44:45,339 --> 00:44:51,280
left i am going to take questions the

00:44:49,210 --> 00:44:56,210
first two that i take or get a copy of

00:44:51,280 --> 00:45:02,830
the book the microphone is there

00:44:56,210 --> 00:45:05,210
run excuse me what happens if you put an

00:45:02,830 --> 00:45:09,500
incomplete object does it delete the

00:45:05,210 --> 00:45:12,170
fields does it delete the fields or the

00:45:09,500 --> 00:45:14,270
values that it does not contain or does

00:45:12,170 --> 00:45:17,060
it save them in the system nor does that

00:45:14,270 --> 00:45:18,830
depend entirely on your API okay when

00:45:17,060 --> 00:45:21,500
you put an incomplete record what should

00:45:18,830 --> 00:45:23,510
happen depends on your application I

00:45:21,500 --> 00:45:25,160
mean in true restful terms it should

00:45:23,510 --> 00:45:26,869
reject it because it's a bad

00:45:25,160 --> 00:45:28,940
representation if they're optional

00:45:26,869 --> 00:45:30,890
fields you probably would write some

00:45:28,940 --> 00:45:32,869
business logic that just works skipped

00:45:30,890 --> 00:45:34,480
over them you decide if you want to know

00:45:32,869 --> 00:45:35,930
them or leave their old values

00:45:34,480 --> 00:45:38,390
technically I think you should probably

00:45:35,930 --> 00:45:42,050
know them but cool come here and get a

00:45:38,390 --> 00:45:44,540
book next question I'm a little confused

00:45:42,050 --> 00:45:45,950
on the jargon okay just because I work

00:45:44,540 --> 00:45:47,810
with a lot of other developers that are

00:45:45,950 --> 00:45:50,000
lot smarter than me or I guess more

00:45:47,810 --> 00:45:51,440
knowledgeable on this one of the

00:45:50,000 --> 00:45:55,160
developers I work with the other day

00:45:51,440 --> 00:45:58,130
said I've never built a REST API before

00:45:55,160 --> 00:46:00,320
but I've built a restful one and based

00:45:58,130 --> 00:46:02,270
on your presentation I'm trying to think

00:46:00,320 --> 00:46:03,589
that's the same thing I think it's the

00:46:02,270 --> 00:46:06,260
same thing but I'd like to give you some

00:46:03,589 --> 00:46:09,280
advice when you're publishing a restful

00:46:06,260 --> 00:46:12,320
api you should always advertise it as an

00:46:09,280 --> 00:46:13,760
HTTP web service and that way the

00:46:12,320 --> 00:46:18,250
religious zealots won't hunt you down

00:46:13,760 --> 00:46:18,250
and kill you come and get a bug

00:46:18,880 --> 00:46:25,930
yeah I made an application using angular

00:46:23,119 --> 00:46:29,839
and it actually put out a request for

00:46:25,930 --> 00:46:33,289
XML and I had acceptance criteria where

00:46:29,839 --> 00:46:35,239
I wanted to get back application XML and

00:46:33,289 --> 00:46:37,369
i right that was the correct way to do

00:46:35,239 --> 00:46:40,099
it and we had issues delivering it where

00:46:37,369 --> 00:46:43,900
it was actually put on iis server which

00:46:40,099 --> 00:46:48,589
would return a text xml return so far

00:46:43,900 --> 00:46:51,200
yes like there's there's two schools of

00:46:48,589 --> 00:46:54,769
thought I consider application XML to be

00:46:51,200 --> 00:46:57,980
the correct way to represent it if I is

00:46:54,769 --> 00:46:59,720
thinks it's text xml then you probably

00:46:57,980 --> 00:47:04,489
just need to pander to that it's

00:46:59,720 --> 00:47:10,579
whatever works sorry more questions yay

00:47:04,489 --> 00:47:13,819
um we question um how's a good approach

00:47:10,579 --> 00:47:17,390
for handling relationships let's say we

00:47:13,819 --> 00:47:20,470
have our people are related to like

00:47:17,390 --> 00:47:24,220
workplaces is it a good or a bad

00:47:20,470 --> 00:47:27,589
practice to include all the work places

00:47:24,220 --> 00:47:29,180
in the return for a person okay so this

00:47:27,589 --> 00:47:31,460
is a really good question and it's about

00:47:29,180 --> 00:47:32,660
publishing do you want a nest related

00:47:31,460 --> 00:47:35,839
data or do you just want to make it

00:47:32,660 --> 00:47:38,210
available and if you would normally want

00:47:35,839 --> 00:47:40,099
to see the list of workplaces every time

00:47:38,210 --> 00:47:43,069
you retrieve that user record and nest

00:47:40,099 --> 00:47:44,960
them by all means if typically you might

00:47:43,069 --> 00:47:46,910
want to and you might not I would

00:47:44,960 --> 00:47:49,160
recommend that you publish a collection

00:47:46,910 --> 00:47:53,089
as like a sub resource to that person

00:47:49,160 --> 00:47:54,799
record so if every time you requested

00:47:53,089 --> 00:47:56,930
the person you would have to request the

00:47:54,799 --> 00:47:59,150
workplaces collection that adds quite a

00:47:56,930 --> 00:48:02,599
lot of overhead especially for a mobile

00:47:59,150 --> 00:48:04,249
client because the connection overhead

00:48:02,599 --> 00:48:05,989
can be horrible if you're on a slow if

00:48:04,249 --> 00:48:08,269
you're on a slow connection so then I

00:48:05,989 --> 00:48:09,799
would nest it if you sometimes need and

00:48:08,269 --> 00:48:12,589
sometimes don't I probably would try and

00:48:09,799 --> 00:48:16,789
keep them separate okay perfect i said

00:48:12,589 --> 00:48:19,119
it depends but thanks well questions why

00:48:16,789 --> 00:48:22,549
don't you need to perform a get request

00:48:19,119 --> 00:48:24,019
first when you perform a patch you don't

00:48:22,549 --> 00:48:26,480
need to perform a cat request when you

00:48:24,019 --> 00:48:27,920
perform a patch well i guess you

00:48:26,480 --> 00:48:29,599
probably do need to know which fields

00:48:27,920 --> 00:48:31,800
are there but you know which record you

00:48:29,599 --> 00:48:33,510
need to update you need to do it

00:48:31,800 --> 00:48:35,370
really for a put so that you've got a

00:48:33,510 --> 00:48:37,590
representation to edit whereas with a

00:48:35,370 --> 00:48:39,930
patch you're just sending a thing so you

00:48:37,590 --> 00:48:46,470
don't need the template of the previous

00:48:39,930 --> 00:48:48,630
version I was delighted to see her

00:48:46,470 --> 00:48:50,730
examples of with the github API cuz I

00:48:48,630 --> 00:48:54,860
was just working with it in the last two

00:48:50,730 --> 00:48:57,410
weeks and I have a question about

00:48:54,860 --> 00:49:00,330
selecting libraries and whether whether

00:48:57,410 --> 00:49:02,190
when you interact with the service do

00:49:00,330 --> 00:49:05,130
you choose if the HP library like one of

00:49:02,190 --> 00:49:09,270
the ones that github recommends more

00:49:05,130 --> 00:49:12,270
features on and if so any tips on

00:49:09,270 --> 00:49:14,280
evaluating libraries org or maybe you

00:49:12,270 --> 00:49:17,310
just interact send your own restaurant I

00:49:14,280 --> 00:49:19,500
do everything from curl right um it

00:49:17,310 --> 00:49:21,660
depends it depends usually what the

00:49:19,500 --> 00:49:23,190
application I'm building it into is so

00:49:21,660 --> 00:49:26,130
some of the frameworks have very good

00:49:23,190 --> 00:49:27,900
support for restful api is sometimes

00:49:26,130 --> 00:49:29,190
it's worth pulling in one of the wrapper

00:49:27,900 --> 00:49:32,670
libraries like you say github has

00:49:29,190 --> 00:49:35,430
user-contributed PHP libraries typically

00:49:32,670 --> 00:49:38,400
if I have the choice i'll use the

00:49:35,430 --> 00:49:40,100
package HTTP extension in PHP it's fast

00:49:38,400 --> 00:49:43,020
it's easy to use as well supported

00:49:40,100 --> 00:49:45,540
that's fairly rare I guess not many of

00:49:43,020 --> 00:49:46,950
you use pekel but there's a cool client

00:49:45,540 --> 00:49:49,980
called guzzle as well which might help

00:49:46,950 --> 00:49:52,140
to evaluate I literally set a tiny task

00:49:49,980 --> 00:49:53,280
and three things I want to try and try

00:49:52,140 --> 00:49:54,840
and do all three in an afternoon and the

00:49:53,280 --> 00:50:00,240
one that makes me swear the least that's

00:49:54,840 --> 00:50:02,610
the one thank you for presentation I

00:50:00,240 --> 00:50:06,060
would like to talk about semantics so in

00:50:02,610 --> 00:50:08,280
your example we have one we get help and

00:50:06,060 --> 00:50:10,620
comments of the issue so when we want to

00:50:08,280 --> 00:50:14,880
see all comments of the issue X we call

00:50:10,620 --> 00:50:18,120
issue / x / comments right and we get a

00:50:14,880 --> 00:50:20,370
list of the comments with IDs so I want

00:50:18,120 --> 00:50:24,570
them to get the full object of the

00:50:20,370 --> 00:50:29,400
comment ID so i will call issue / x /

00:50:24,570 --> 00:50:31,410
comment / white right but how it

00:50:29,400 --> 00:50:33,900
confirms with the thing that its sub

00:50:31,410 --> 00:50:36,420
resource but then i can provide also

00:50:33,900 --> 00:50:38,940
resource that will be just slash comment

00:50:36,420 --> 00:50:43,110
/ y okay so what you would normally see

00:50:38,940 --> 00:50:43,510
is under issues / x / comments it's a

00:50:43,110 --> 00:50:45,490
collect

00:50:43,510 --> 00:50:48,610
and the resources will each have their

00:50:45,490 --> 00:50:53,740
own uri or URL field which just goes to

00:50:48,610 --> 00:50:55,870
/ comments / why so those individual

00:50:53,740 --> 00:50:59,470
resources would normally but they do

00:50:55,870 --> 00:51:03,400
blunden belong under / comments but they

00:50:59,470 --> 00:51:05,500
also belong under / issues / x /

00:51:03,400 --> 00:51:08,860
comments but when you see the list of

00:51:05,500 --> 00:51:11,440
resources I wonder if I have it if you

00:51:08,860 --> 00:51:14,410
when you see the list of resources then

00:51:11,440 --> 00:51:16,720
you will see each one of them contains

00:51:14,410 --> 00:51:19,210
this URL field which is the first in

00:51:16,720 --> 00:51:22,780
this example and that is where you will

00:51:19,210 --> 00:51:26,440
find the comment at that URL do it to

00:51:22,780 --> 00:51:29,260
your question yeah so as I understand I

00:51:26,440 --> 00:51:32,880
will need to implement still / comments

00:51:29,260 --> 00:51:37,870
/ y and then in your oil I usually don't

00:51:32,880 --> 00:51:41,140
/ comments returns this so the resource

00:51:37,870 --> 00:51:42,760
which is a comment appears in multiple

00:51:41,140 --> 00:51:49,510
collections because it's applicable to

00:51:42,760 --> 00:51:51,040
multiple collections okay okay I say

00:51:49,510 --> 00:51:52,660
this is one of the best sessions i'm

00:51:51,040 --> 00:51:54,430
lieutenant all week it's it's really

00:51:52,660 --> 00:51:56,020
been excellent thank you if you don't

00:51:54,430 --> 00:52:00,010
like to leave that comment on my

00:51:56,020 --> 00:52:03,190
feedback nothing so github has this

00:52:00,010 --> 00:52:06,430
custom / patch so to simile they allow

00:52:03,190 --> 00:52:08,710
customers to be created I've worked with

00:52:06,430 --> 00:52:10,300
soap where you can get a wisdom back

00:52:08,710 --> 00:52:12,130
telling you what you can do on the

00:52:10,300 --> 00:52:15,370
server how can you find out what verbs

00:52:12,130 --> 00:52:17,290
are available on RS no you can't rest

00:52:15,370 --> 00:52:20,440
we'll have a company in documentation

00:52:17,290 --> 00:52:23,470
patch technically is a custom verb

00:52:20,440 --> 00:52:25,870
because it's not part of a spec but it's

00:52:23,470 --> 00:52:27,700
widely used by lots of different api's

00:52:25,870 --> 00:52:30,670
to perform exactly this sort of diff

00:52:27,700 --> 00:52:32,920
patch thing and rest doesn't come with a

00:52:30,670 --> 00:52:35,380
wisdom or equivalent what you will get

00:52:32,920 --> 00:52:38,020
is usually good hypermedia from some

00:52:35,380 --> 00:52:41,680
kind of starting point and usually good

00:52:38,020 --> 00:52:42,610
documentation often interactive did that

00:52:41,680 --> 00:52:45,480
answer your questions you have to

00:52:42,610 --> 00:52:48,010
request the documentation you can ya get

00:52:45,480 --> 00:52:51,010
hubs docs is actually quite good but

00:52:48,010 --> 00:52:53,020
yeah there isn't a machine discoverable

00:52:51,010 --> 00:52:53,760
documentation and if you are interested

00:52:53,020 --> 00:52:55,920
in this

00:52:53,760 --> 00:52:57,900
then look up something called how which

00:52:55,920 --> 00:53:00,960
is a standardized way of adding

00:52:57,900 --> 00:53:03,840
hypermedia in so that things can spider

00:53:00,960 --> 00:53:05,070
you're like start for a point and find

00:53:03,840 --> 00:53:06,570
all the related resources and

00:53:05,070 --> 00:53:08,340
collections and sort of find their way

00:53:06,570 --> 00:53:10,200
around I typically find that most

00:53:08,340 --> 00:53:12,120
clients need a custom implementation

00:53:10,200 --> 00:53:14,610
anyway it's like not knowing what the

00:53:12,120 --> 00:53:17,670
database tables are called just you get

00:53:14,610 --> 00:53:21,960
a rep you guess and but hopefully that

00:53:17,670 --> 00:53:24,840
helps okay thank you my pleasure hey I

00:53:21,960 --> 00:53:26,400
just have a couple questions when is it

00:53:24,840 --> 00:53:28,830
appropriate to use query string

00:53:26,400 --> 00:53:31,470
parameters in your URL versus like a

00:53:28,830 --> 00:53:32,880
resource aboard / that's a really good

00:53:31,470 --> 00:53:35,370
question when is it appropriate to use

00:53:32,880 --> 00:53:38,460
query parameters when you they are

00:53:35,370 --> 00:53:41,550
you're making a get request and those

00:53:38,460 --> 00:53:43,770
parameters are separate from the

00:53:41,550 --> 00:53:48,810
resource identifier so we're going to

00:53:43,770 --> 00:53:51,540
have like issue / 42 and anything extra

00:53:48,810 --> 00:53:54,360
like you want the verbose representation

00:53:51,540 --> 00:53:56,910
of this resource or sometimes people

00:53:54,360 --> 00:53:59,490
support the format as well as a query

00:53:56,910 --> 00:54:00,690
parameter instead of just the accept

00:53:59,490 --> 00:54:02,340
because not everyone understands how to

00:54:00,690 --> 00:54:03,540
use except not all client-side

00:54:02,340 --> 00:54:06,270
JavaScript libraries know how to use

00:54:03,540 --> 00:54:08,790
except so anything which is extra

00:54:06,270 --> 00:54:10,760
information specific to the resource or

00:54:08,790 --> 00:54:12,720
collection so it's not really metadata

00:54:10,760 --> 00:54:18,930
specific to the resource of collection

00:54:12,720 --> 00:54:22,650
but don't do issues 42 / verbose / yes /

00:54:18,930 --> 00:54:24,780
the other dot XML write those things go

00:54:22,650 --> 00:54:27,900
somewhere else okay that's the question

00:54:24,780 --> 00:54:30,420
yes the other question I had was all

00:54:27,900 --> 00:54:32,790
these examples are obviously focusing on

00:54:30,420 --> 00:54:35,130
string based or textual based data going

00:54:32,790 --> 00:54:37,140
back up or what about binary situations

00:54:35,130 --> 00:54:38,940
is there anything rest can do there or

00:54:37,140 --> 00:54:40,800
do you need them I mean yes there's no

00:54:38,940 --> 00:54:43,140
reason why you shouldn't do for example

00:54:40,800 --> 00:54:44,520
images this way because we're not we're

00:54:43,140 --> 00:54:46,800
not version controlling them we're

00:54:44,520 --> 00:54:48,540
saying please give me a representation

00:54:46,800 --> 00:54:51,030
of a resource there's no reason why that

00:54:48,540 --> 00:54:53,070
shouldn't be jpg please accept this

00:54:51,030 --> 00:54:54,690
representation riversource no reason why

00:54:53,070 --> 00:54:56,370
that shouldn't be jpg so I the same

00:54:54,690 --> 00:54:59,760
principles would apply if you want to

00:54:56,370 --> 00:55:02,490
work that way thank you my pleasure Wow

00:54:59,760 --> 00:55:05,430
am I done I like it when this happens

00:55:02,490 --> 00:55:06,900
cool excellent so I am going to say

00:55:05,430 --> 00:55:08,760
thank you very much

00:55:06,900 --> 00:55:12,059
this is the book though I was giving

00:55:08,760 --> 00:55:14,010
away b2b Web Services is my newest book

00:55:12,059 --> 00:55:16,049
so i'm still like super excited because

00:55:14,010 --> 00:55:18,150
i have an o'reilly animal book i came

00:55:16,049 --> 00:55:20,160
here a year ago not quite two ausgang

00:55:18,150 --> 00:55:21,839
met the O'Reilly people told them I

00:55:20,160 --> 00:55:23,250
wanted to write this book and back in

00:55:21,839 --> 00:55:27,650
Portland and I'm holding in my hands

00:55:23,250 --> 00:55:27,650
this is the place where magic is made

00:55:36,099 --> 00:55:39,920
so that's it please leave me some

00:55:38,329 --> 00:55:42,079
feedback I am completely new to

00:55:39,920 --> 00:55:43,400
drupalcon and it's been amazing and if

00:55:42,079 --> 00:55:45,440
you would like to get in touch with me I

00:55:43,400 --> 00:55:47,210
do a lot of API consultancy and training

00:55:45,440 --> 00:55:49,490
or if you just want to read my blog send

00:55:47,210 --> 00:55:51,710
me an email whatever that'd be lovely my

00:55:49,490 --> 00:55:54,010
details are there thank you so much for

00:55:51,710 --> 00:55:54,010

YouTube URL: https://www.youtube.com/watch?v=SSkZZLpaqdI


