Title: Automatic Updates Initiative Keynote Q&A   DrupalCon North America 2021
Publication date: 2021-05-27
Playlist: DrupalCon North America 2021
Description: 
	Provide a secure system for auto updates, lower the cost of maintaining a Drupal site, improving the security, lower the barrier to entry
Captions: 
	00:00:01,680 --> 00:00:06,160
about your character

00:00:03,439 --> 00:00:07,440
oh this is a great this is a good filler

00:00:06,160 --> 00:00:10,719
good question darren

00:00:07,440 --> 00:00:14,000
um so yeah so the the picture is not

00:00:10,719 --> 00:00:16,560
actual it is the character i believe is

00:00:14,000 --> 00:00:18,160
um her name is venom i forget whether

00:00:16,560 --> 00:00:20,800
she's dc or marvel

00:00:18,160 --> 00:00:22,880
um but that's it's not actually a video

00:00:20,800 --> 00:00:25,119
game character it's a real life little

00:00:22,880 --> 00:00:25,920
figurine model and there's a great story

00:00:25,119 --> 00:00:30,560
behind this

00:00:25,920 --> 00:00:32,399
um so back in 2013 um

00:00:30,560 --> 00:00:34,239
i had before i started the acquia i'd

00:00:32,399 --> 00:00:37,680
been contributing for co to core

00:00:34,239 --> 00:00:41,520
for maybe a year and a half and i did

00:00:37,680 --> 00:00:44,559
a patch review of a 400

00:00:41,520 --> 00:00:47,600
plus kilobyte patch to convert the

00:00:44,559 --> 00:00:49,760
drupal 7 block system um

00:00:47,600 --> 00:00:51,280
and all the blocks and core to the new

00:00:49,760 --> 00:00:53,440
plugin api

00:00:51,280 --> 00:00:56,840
um and after so i did this patch review

00:00:53,440 --> 00:00:58,000
i spent 120 total hours reviewing the

00:00:56,840 --> 00:01:01,120
code um

00:00:58,000 --> 00:01:04,080
in this 400k patch and so eve schedule

00:01:01,120 --> 00:01:05,360
the maintainer of cck and the field api

00:01:04,080 --> 00:01:07,040
told me that he was going to build a

00:01:05,360 --> 00:01:08,479
statue of me

00:01:07,040 --> 00:01:10,159
um which you know was great and i

00:01:08,479 --> 00:01:10,720
laughed the time that was in january and

00:01:10,159 --> 00:01:12,640
then

00:01:10,720 --> 00:01:14,720
four months later at triple con portland

00:01:12,640 --> 00:01:16,240
um he came up to me and said well we

00:01:14,720 --> 00:01:18,080
looked into building the statue but it

00:01:16,240 --> 00:01:20,080
turns out the cost was kind of

00:01:18,080 --> 00:01:21,680
prohibitive to build it at you know a

00:01:20,080 --> 00:01:23,280
real life scale

00:01:21,680 --> 00:01:25,280
um so we had to miniaturize it and he

00:01:23,280 --> 00:01:27,040
presented me this actual figurine so it

00:01:25,280 --> 00:01:29,759
is it is still

00:01:27,040 --> 00:01:31,200
on my desk it could be james i'm like i

00:01:29,759 --> 00:01:32,240
wasn't actually familiar with it um i

00:01:31,200 --> 00:01:35,280
think it's just

00:01:32,240 --> 00:01:36,000
the uh you know the the gun slinging and

00:01:35,280 --> 00:01:37,920
and her

00:01:36,000 --> 00:01:39,280
lasso and our whip there was very

00:01:37,920 --> 00:01:41,680
appropriate since um

00:01:39,280 --> 00:01:42,320
i love it hurting is a lot of what i do

00:01:41,680 --> 00:01:45,520
so yep

00:01:42,320 --> 00:01:47,280
but there's that's why it's my icon

00:01:45,520 --> 00:01:49,200
um yeah i've never even heard that story

00:01:47,280 --> 00:01:52,240
either thanks darren good question

00:01:49,200 --> 00:01:55,520
uh yeah the the sprint peter is from

00:01:52,240 --> 00:01:58,240
drupal dev days seged um in

00:01:55,520 --> 00:02:00,079
in 2014 where and it's the entity field

00:01:58,240 --> 00:02:00,799
api chart since it was eve that gave me

00:02:00,079 --> 00:02:03,520
the statute

00:02:00,799 --> 00:02:04,560
so um that's those are all of the the

00:02:03,520 --> 00:02:07,280
beta blockers

00:02:04,560 --> 00:02:09,520
for drupal 8's entity field api that we

00:02:07,280 --> 00:02:11,360
were working on at that sprint

00:02:09,520 --> 00:02:13,520
we have another casual question before

00:02:11,360 --> 00:02:16,160
we start off i last time i got a haircut

00:02:13,520 --> 00:02:16,160
was in the summer

00:02:19,040 --> 00:02:23,840
pandemic life yeah

00:02:24,160 --> 00:02:29,520
um all right we're almost at the

00:02:26,640 --> 00:02:32,640
official start time

00:02:29,520 --> 00:02:36,480
um plenty of folk

00:02:32,640 --> 00:02:38,239
um so i think maybe we'll get started

00:02:36,480 --> 00:02:40,800
here

00:02:38,239 --> 00:02:41,360
um i'm gonna try and moderate a little

00:02:40,800 --> 00:02:44,560
bit

00:02:41,360 --> 00:02:47,760
uh you you got the introduction from

00:02:44,560 --> 00:02:49,120
over on um the actual keynote itself in

00:02:47,760 --> 00:02:50,720
terms of who's involved in this

00:02:49,120 --> 00:02:53,120
initiative and of course

00:02:50,720 --> 00:02:54,160
um if you're here we would also love for

00:02:53,120 --> 00:02:57,760
you to be involved

00:02:54,160 --> 00:02:59,200
as well um uh we can repost some of the

00:02:57,760 --> 00:03:01,920
links if you need them to

00:02:59,200 --> 00:03:03,440
the open social contribution tables or

00:03:01,920 --> 00:03:04,800
to the drupal slack with the auto

00:03:03,440 --> 00:03:06,480
updates channel

00:03:04,800 --> 00:03:08,080
um we'll make sure to get you everything

00:03:06,480 --> 00:03:09,200
that you need but yeah thank you for

00:03:08,080 --> 00:03:12,319
joining us

00:03:09,200 --> 00:03:13,920
jumping right into questions um so jess

00:03:12,319 --> 00:03:15,519
you captured this one because it was us

00:03:13,920 --> 00:03:18,080
during the main stage

00:03:15,519 --> 00:03:20,400
um will the auto update system require

00:03:18,080 --> 00:03:22,000
the web server to be able to write files

00:03:20,400 --> 00:03:25,519
that it's then going to execute

00:03:22,000 --> 00:03:25,519
this is via brian weaver

00:03:25,599 --> 00:03:31,040
who wants to tackle the actual file uh

00:03:29,200 --> 00:03:32,959
so yeah they'll this will be a

00:03:31,040 --> 00:03:35,760
requirement

00:03:32,959 --> 00:03:37,680
for hosting providers that want to

00:03:35,760 --> 00:03:39,840
integrate this they'll

00:03:37,680 --> 00:03:41,200
have to you know find a solution that

00:03:39,840 --> 00:03:43,440
works for them

00:03:41,200 --> 00:03:45,280
and maybe mean applying an update in a

00:03:43,440 --> 00:03:48,159
different environment and moving it over

00:03:45,280 --> 00:03:49,680
we will not support core it does not

00:03:48,159 --> 00:03:52,000
directly support like

00:03:49,680 --> 00:03:53,760
dev stage product different environments

00:03:52,000 --> 00:03:57,680
it only deals with one

00:03:53,760 --> 00:04:00,480
particular drupal site so for the long

00:03:57,680 --> 00:04:01,599
tail of sites that you know really i

00:04:00,480 --> 00:04:04,400
think part of the

00:04:01,599 --> 00:04:06,400
partially the main focus of our or sites

00:04:04,400 --> 00:04:10,080
that we're really trying to go after

00:04:06,400 --> 00:04:12,400
um are not only i guess the ones that

00:04:10,080 --> 00:04:14,560
we're directly supporting

00:04:12,400 --> 00:04:16,479
for the use case we will require the

00:04:14,560 --> 00:04:18,720
file system to be writable

00:04:16,479 --> 00:04:20,079
um but there will be events you know

00:04:18,720 --> 00:04:21,359
before the update so you could

00:04:20,079 --> 00:04:23,840
potentially

00:04:21,359 --> 00:04:25,120
um change that you know through a module

00:04:23,840 --> 00:04:27,520
through custom code

00:04:25,120 --> 00:04:29,680
as far as making it writable just for

00:04:27,520 --> 00:04:31,600
the brief part of the update record

00:04:29,680 --> 00:04:32,800
right now the plan is court not support

00:04:31,600 --> 00:04:34,080
that directly

00:04:32,800 --> 00:04:35,840
that will be one of the readiness

00:04:34,080 --> 00:04:38,240
checkers to make sure that

00:04:35,840 --> 00:04:39,280
um you know the file system can be

00:04:38,240 --> 00:04:41,759
written to

00:04:39,280 --> 00:04:43,440
and hosting providers can also or you

00:04:41,759 --> 00:04:46,639
know anybody can write

00:04:43,440 --> 00:04:48,080
new readiness checkers say if you know

00:04:46,639 --> 00:04:49,040
if you have custom code that gets around

00:04:48,080 --> 00:04:51,280
that somehow

00:04:49,040 --> 00:04:52,800
you could also probably write a custom

00:04:51,280 --> 00:04:54,639
readiness checker to check

00:04:52,800 --> 00:04:56,720
you know the status that you need for

00:04:54,639 --> 00:04:58,720
your file system

00:04:56,720 --> 00:05:01,280
and i'm pretty sure um the contributed

00:04:58,720 --> 00:05:03,280
the drupal 7 tarball attributed module

00:05:01,280 --> 00:05:05,120
already includes a checker to verify

00:05:03,280 --> 00:05:07,600
that the file system is writable

00:05:05,120 --> 00:05:08,639
um to make sure that the updates can be

00:05:07,600 --> 00:05:11,120
downloaded so

00:05:08,639 --> 00:05:12,400
we'll probably include that um that

00:05:11,120 --> 00:05:14,400
checker in core as well

00:05:12,400 --> 00:05:16,240
um and then the the core automatic

00:05:14,400 --> 00:05:18,639
updater would enable it by default

00:05:16,240 --> 00:05:20,160
for the long tail sites that don't um as

00:05:18,639 --> 00:05:23,120
ted said build out their own

00:05:20,160 --> 00:05:24,800
um workflows but then obviously a more

00:05:23,120 --> 00:05:26,560
advanced hosting platform will not want

00:05:24,800 --> 00:05:28,960
the file system to be writable but can

00:05:26,560 --> 00:05:30,639
integrate with using the apis that are

00:05:28,960 --> 00:05:31,759
available including the readiness checks

00:05:30,639 --> 00:05:33,680
like you can also

00:05:31,759 --> 00:05:37,039
um the readiness checks are extensible

00:05:33,680 --> 00:05:39,360
so hosting providers can add their own

00:05:37,039 --> 00:05:40,800
awesome great um and i was remiss i'm

00:05:39,360 --> 00:05:42,080
sorry i forgot to mention of course at

00:05:40,800 --> 00:05:43,759
the beginning of this session if there's

00:05:42,080 --> 00:05:45,280
anyone in the audience who

00:05:43,759 --> 00:05:47,680
needs captioning for this panel

00:05:45,280 --> 00:05:49,280
discussion um and i'll place this in the

00:05:47,680 --> 00:05:52,080
chat as well so it's not

00:05:49,280 --> 00:05:53,520
invisible uh you can caption using the

00:05:52,080 --> 00:05:55,360
tip in the main event q

00:05:53,520 --> 00:05:57,440
a feature for enabling chrome

00:05:55,360 --> 00:05:58,880
accessibility live captioning

00:05:57,440 --> 00:06:00,800
um so let me go ahead and post that

00:05:58,880 --> 00:06:02,880
there there's a related question to this

00:06:00,800 --> 00:06:05,360
conversation about hosting providers

00:06:02,880 --> 00:06:07,360
um so do the major drupal platform

00:06:05,360 --> 00:06:08,639
providers so if folks like awkwary or

00:06:07,360 --> 00:06:10,720
pampeon

00:06:08,639 --> 00:06:13,759
have plans to support auto updates

00:06:10,720 --> 00:06:13,759
within their environments

00:06:15,600 --> 00:06:19,440
so we have people from awkwary here we

00:06:17,680 --> 00:06:20,560
have people from pantheon working on the

00:06:19,440 --> 00:06:23,360
initiative

00:06:20,560 --> 00:06:24,400
i guess we can you know say more about

00:06:23,360 --> 00:06:26,479
we've been working

00:06:24,400 --> 00:06:28,400
with our cloud team on how we can

00:06:26,479 --> 00:06:30,560
support this and what parts

00:06:28,400 --> 00:06:34,080
um it's definitely you know when we're

00:06:30,560 --> 00:06:35,759
looking at adding automatic updates to

00:06:34,080 --> 00:06:37,680
our platform we're planning on

00:06:35,759 --> 00:06:39,520
leveraging this that probably would not

00:06:37,680 --> 00:06:41,520
be the same way that i cite say on

00:06:39,520 --> 00:06:44,800
shared hosting would leverage this

00:06:41,520 --> 00:06:45,600
but we'll we'll use um we will use this

00:06:44,800 --> 00:06:49,840
system

00:06:45,600 --> 00:06:49,840
that's the plan currently

00:06:50,639 --> 00:06:55,199
speaking as a small site maintainer for

00:06:53,360 --> 00:06:58,160
a drupal campsite that's hosted on

00:06:55,199 --> 00:06:59,039
aquarius dev cloud platform it would be

00:06:58,160 --> 00:07:02,160
really nice if

00:06:59,039 --> 00:07:04,400
if if it was supported so um

00:07:02,160 --> 00:07:06,160
it makes life easier for for event

00:07:04,400 --> 00:07:09,360
organizers

00:07:06,160 --> 00:07:12,080
yeah and and definitely um you know

00:07:09,360 --> 00:07:13,759
it's it's in a it's in a hosting

00:07:12,080 --> 00:07:15,199
provider's best interest to support it

00:07:13,759 --> 00:07:16,960
because if shared hosting

00:07:15,199 --> 00:07:19,039
has automatic updates available but then

00:07:16,960 --> 00:07:21,120
the big hosting providers don't that

00:07:19,039 --> 00:07:22,479
that would be a competitive disadvantage

00:07:21,120 --> 00:07:24,800
so there's definitely incentive and

00:07:22,479 --> 00:07:27,199
making sure that once core supports this

00:07:24,800 --> 00:07:28,960
we can as well for for customers with

00:07:27,199 --> 00:07:32,240
much you know

00:07:28,960 --> 00:07:35,360
broader needs yeah and they're superbly

00:07:32,240 --> 00:07:36,479
i'll go ahead now go ahead i was just

00:07:35,360 --> 00:07:37,840
going to say there's some related

00:07:36,479 --> 00:07:39,840
questions here about

00:07:37,840 --> 00:07:41,680
oh well gosh would enterprise skill

00:07:39,840 --> 00:07:43,360
hosting and people with their own ci and

00:07:41,680 --> 00:07:44,960
cd pipelines be

00:07:43,360 --> 00:07:47,280
getting some kind of advantage from this

00:07:44,960 --> 00:07:50,080
feature and certainly those audiences

00:07:47,280 --> 00:07:52,000
um can use the whatever best practices

00:07:50,080 --> 00:07:53,680
they've already implemented for managing

00:07:52,000 --> 00:07:54,639
their own updates and continue to do

00:07:53,680 --> 00:07:56,879
that

00:07:54,639 --> 00:07:58,000
but that said there are elements of this

00:07:56,879 --> 00:07:59,759
that perhaps they may want

00:07:58,000 --> 00:08:01,280
to use and it's being built so that it's

00:07:59,759 --> 00:08:03,440
going to be extensible

00:08:01,280 --> 00:08:05,280
both to enable these hosting providers

00:08:03,440 --> 00:08:06,000
to to kind of hook into it and make sure

00:08:05,280 --> 00:08:07,360
it works

00:08:06,000 --> 00:08:09,360
the way that they need it to work

00:08:07,360 --> 00:08:10,800
perhaps they need to extend readiness

00:08:09,360 --> 00:08:11,520
checks to some other elements of what

00:08:10,800 --> 00:08:13,280
they're doing

00:08:11,520 --> 00:08:15,199
or perhaps they want to use part of this

00:08:13,280 --> 00:08:17,360
system but not the whole thing

00:08:15,199 --> 00:08:19,120
in you know their built-in ci cd

00:08:17,360 --> 00:08:20,720
pipelines or in their built-in dev stage

00:08:19,120 --> 00:08:22,319
prod processes

00:08:20,720 --> 00:08:24,000
there might be a way that they want to

00:08:22,319 --> 00:08:25,919
use some or all

00:08:24,000 --> 00:08:27,919
of what's going on here so we're hoping

00:08:25,919 --> 00:08:30,960
to make it um

00:08:27,919 --> 00:08:33,519
a flexible architecture um but yes that

00:08:30,960 --> 00:08:36,399
primary audience is we want all of the

00:08:33,519 --> 00:08:38,479
um all of the sort of set and forget

00:08:36,399 --> 00:08:40,479
site owners out there to be able to to

00:08:38,479 --> 00:08:41,360
really do that to actually be able to

00:08:40,479 --> 00:08:43,200
get their

00:08:41,360 --> 00:08:44,800
patch and security updates without

00:08:43,200 --> 00:08:47,760
having to um

00:08:44,800 --> 00:08:49,200
attend quite so closely so you could

00:08:47,760 --> 00:08:52,320
also potentially like

00:08:49,200 --> 00:08:53,920
if you have a system for that you use

00:08:52,320 --> 00:08:55,600
for applying updates now you could

00:08:53,920 --> 00:08:57,760
potentially integrate

00:08:55,600 --> 00:09:00,560
the composer integration with our php

00:08:57,760 --> 00:09:02,640
tuff library to add to that system

00:09:00,560 --> 00:09:04,800
basically if you added the dependency in

00:09:02,640 --> 00:09:07,279
the composer integration plugin

00:09:04,800 --> 00:09:08,080
you would get secure downloads by

00:09:07,279 --> 00:09:09,279
default

00:09:08,080 --> 00:09:10,560
if you use this so you would have to

00:09:09,279 --> 00:09:11,760
change very little of your current

00:09:10,560 --> 00:09:14,160
workflow for

00:09:11,760 --> 00:09:15,680
applying updates but you know for some

00:09:14,160 --> 00:09:18,160
people that may be the most

00:09:15,680 --> 00:09:19,600
important part of this initiative is a

00:09:18,160 --> 00:09:22,640
more secure composer

00:09:19,600 --> 00:09:26,320
to make sure that the sources are

00:09:22,640 --> 00:09:26,320
you know are much harder to compromise

00:09:30,640 --> 00:09:34,720
another question that came from the main

00:09:32,080 --> 00:09:36,240
stage was how close are we to

00:09:34,720 --> 00:09:38,320
getting this initiative ready for

00:09:36,240 --> 00:09:41,040
inclusion in drupal 10.

00:09:38,320 --> 00:09:42,640
um what's what's sort of our subjective

00:09:41,040 --> 00:09:43,360
feeling about how we're how we're coming

00:09:42,640 --> 00:09:45,279
along here

00:09:43,360 --> 00:09:47,279
do you want the pessimistic release

00:09:45,279 --> 00:09:48,160
manager answer or do you want the

00:09:47,279 --> 00:09:51,839
optimistic

00:09:48,160 --> 00:09:54,720
engineering answer

00:09:51,839 --> 00:09:56,560
i want both kind of i want to arrange

00:09:54,720 --> 00:09:59,760
right

00:09:56,560 --> 00:10:02,480
so uh i would say we

00:09:59,760 --> 00:10:03,760
this this initiative um we didn't really

00:10:02,480 --> 00:10:05,519
cover it in the keynote

00:10:03,760 --> 00:10:06,880
but it's worth noting that this

00:10:05,519 --> 00:10:10,880
initiative already includes

00:10:06,880 --> 00:10:12,560
years of work um in 2017 and 2018 there

00:10:10,880 --> 00:10:14,399
was a lot of

00:10:12,560 --> 00:10:16,079
thought leadership and planning done

00:10:14,399 --> 00:10:17,200
especially by peter roland and david

00:10:16,079 --> 00:10:19,519
strauss

00:10:17,200 --> 00:10:21,519
in 2019 the european commission

00:10:19,519 --> 00:10:24,320
sponsored the development of the drupal

00:10:21,519 --> 00:10:27,040
7 updater that's available for tarballs

00:10:24,320 --> 00:10:29,440
um the the drupal 7 updater it doesn't

00:10:27,040 --> 00:10:32,959
obviously include composer integration

00:10:29,440 --> 00:10:34,720
um and it it doesn't include the sort of

00:10:32,959 --> 00:10:37,200
like

00:10:34,720 --> 00:10:38,800
safe update staging um that ted was

00:10:37,200 --> 00:10:40,959
discussing at this point

00:10:38,800 --> 00:10:42,720
but it does include um this is something

00:10:40,959 --> 00:10:45,200
that peter actually wanted us to mention

00:10:42,720 --> 00:10:46,880
it does include package signature

00:10:45,200 --> 00:10:49,920
verification already using

00:10:46,880 --> 00:10:53,360
um a php port of the

00:10:49,920 --> 00:10:54,079
csig signatures so it's not the full

00:10:53,360 --> 00:10:55,680
tough spec

00:10:54,079 --> 00:10:57,839
that is available now um so that

00:10:55,680 --> 00:11:00,880
happened in 2019

00:10:57,839 --> 00:11:02,640
we we spent a bunch of time this year um

00:11:00,880 --> 00:11:04,160
because there were there's discovery

00:11:02,640 --> 00:11:06,560
that we did around seasig

00:11:04,160 --> 00:11:08,399
um we there there's some problems that

00:11:06,560 --> 00:11:08,640
we ran into and when we were developing

00:11:08,399 --> 00:11:10,399
it

00:11:08,640 --> 00:11:12,079
that tough solves for us and so that's

00:11:10,399 --> 00:11:14,640
why we're building that out now

00:11:12,079 --> 00:11:17,279
um so that's like like thinking about

00:11:14,640 --> 00:11:20,480
the timeline on that we've um

00:11:17,279 --> 00:11:20,480
i think that

00:11:21,120 --> 00:11:24,160
there's a lot there is a lot of work

00:11:22,800 --> 00:11:26,480
left in this initiative like

00:11:24,160 --> 00:11:27,519
um of the things you know you saw ted

00:11:26,480 --> 00:11:29,680
slides a lot of

00:11:27,519 --> 00:11:32,240
a lot of this right now is still

00:11:29,680 --> 00:11:35,440
theoretical or very early prototypes

00:11:32,240 --> 00:11:37,360
uh and uh we want obviously we want this

00:11:35,440 --> 00:11:39,920
to be as secure as possible we want it

00:11:37,360 --> 00:11:42,000
also to be as stable as possible because

00:11:39,920 --> 00:11:44,160
something else that you know an update

00:11:42,000 --> 00:11:45,839
system can do is it not only can it um

00:11:44,160 --> 00:11:47,040
be a security attack vector

00:11:45,839 --> 00:11:49,040
but it's also just a really great

00:11:47,040 --> 00:11:50,399
mechanism to break a site right

00:11:49,040 --> 00:11:52,160
this is why we've spent so much time

00:11:50,399 --> 00:11:53,120
thinking about the running strikes api

00:11:52,160 --> 00:11:54,800
and so forth

00:11:53,120 --> 00:11:56,959
um so we really want to be careful

00:11:54,800 --> 00:12:00,639
before you release it in core

00:11:56,959 --> 00:12:03,760
um i think that you know i

00:12:00,639 --> 00:12:07,680
it would it i a stretch goal

00:12:03,760 --> 00:12:08,720
would be to get um the experimental core

00:12:07,680 --> 00:12:11,760
integration done

00:12:08,720 --> 00:12:13,040
by the deadline for 9-3 i think that's

00:12:11,760 --> 00:12:16,079
ambitious right now

00:12:13,040 --> 00:12:16,560
um you know they even even with all of

00:12:16,079 --> 00:12:18,240
the

00:12:16,560 --> 00:12:19,440
the great contributors who are spending

00:12:18,240 --> 00:12:20,720
a lot of time on this initiative right

00:12:19,440 --> 00:12:22,079
now i think that's that's

00:12:20,720 --> 00:12:24,639
there's still a lot of work left to be

00:12:22,079 --> 00:12:25,680
done um because you know all of this is

00:12:24,639 --> 00:12:27,360
brand new code

00:12:25,680 --> 00:12:28,800
and and for the especially for the

00:12:27,360 --> 00:12:30,160
composer integration parts

00:12:28,800 --> 00:12:32,240
we're doing things that haven't really

00:12:30,160 --> 00:12:33,920
been done before um

00:12:32,240 --> 00:12:36,000
for securing updates and making them

00:12:33,920 --> 00:12:38,160
compatible with the cms we're also

00:12:36,000 --> 00:12:40,160
you know sort of solving the problem of

00:12:38,160 --> 00:12:41,040
composer updates and drupal modules at

00:12:40,160 --> 00:12:43,600
the same time

00:12:41,040 --> 00:12:45,279
right like right now core doesn't even

00:12:43,600 --> 00:12:47,600
acknowledge the fact that

00:12:45,279 --> 00:12:48,560
composer exists for the most part or at

00:12:47,600 --> 00:12:51,279
least the

00:12:48,560 --> 00:12:52,000
module system doesn't write so um we

00:12:51,279 --> 00:12:55,360
have to solve

00:12:52,000 --> 00:12:57,200
all of those problems as well um while

00:12:55,360 --> 00:12:59,200
still supporting tarballs for the people

00:12:57,200 --> 00:13:01,200
who are using tarball sites still so

00:12:59,200 --> 00:13:04,240
that yeah there's a lot of stuff to do

00:13:01,200 --> 00:13:06,079
um but on the other hand we do because

00:13:04,240 --> 00:13:08,000
the automatic update system isn't

00:13:06,079 --> 00:13:10,000
just a feature per se it is like a

00:13:08,000 --> 00:13:11,680
security hardening

00:13:10,000 --> 00:13:13,600
we might be able to continue to work on

00:13:11,680 --> 00:13:16,800
it in

00:13:13,600 --> 00:13:19,120
9 4 and 10 0 simultaneously so even

00:13:16,800 --> 00:13:20,720
even if it's not ready by that

00:13:19,120 --> 00:13:22,959
deprecation deadline that dries

00:13:20,720 --> 00:13:24,639
presented yesterday in october

00:13:22,959 --> 00:13:26,399
um there is still a chance that we could

00:13:24,639 --> 00:13:28,560
get something done um

00:13:26,399 --> 00:13:29,600
a year from now even if it gets more

00:13:28,560 --> 00:13:31,920
demonstrable

00:13:29,600 --> 00:13:34,320
thank you jess i was wondering if we

00:13:31,920 --> 00:13:36,320
could work on it in 9.4

00:13:34,320 --> 00:13:38,160
uh even though it's you know that

00:13:36,320 --> 00:13:41,199
deadline to purchase for 10.0

00:13:38,160 --> 00:13:43,120
yeah for most things um like we can't

00:13:41,199 --> 00:13:45,519
introduce some deprecations

00:13:43,120 --> 00:13:47,120
um so like things like deprecating the

00:13:45,519 --> 00:13:47,680
the tarball downloader we wouldn't be

00:13:47,120 --> 00:13:50,959
able to do

00:13:47,680 --> 00:13:52,320
any more in 94 because of the

00:13:50,959 --> 00:13:54,639
the difficulty that causes for dribble

00:13:52,320 --> 00:13:57,760
10 updates but for the rest of it

00:13:54,639 --> 00:14:01,360
um you know unlike most features

00:13:57,760 --> 00:14:03,360
this is you know this is this isn't just

00:14:01,360 --> 00:14:05,040
new minor release development this is

00:14:03,360 --> 00:14:07,199
this is fundamental

00:14:05,040 --> 00:14:09,519
um security stability of drupal's

00:14:07,199 --> 00:14:11,040
platform so

00:14:09,519 --> 00:14:12,560
i hope that was kind of long-winded i

00:14:11,040 --> 00:14:13,199
wanted to give you some context for how

00:14:12,560 --> 00:14:15,040
much

00:14:13,199 --> 00:14:16,560
just like when we say oh it's we talked

00:14:15,040 --> 00:14:17,920
about all of this and then it's still

00:14:16,560 --> 00:14:19,120
going to take a really long time you

00:14:17,920 --> 00:14:20,880
know then we talk about it for five

00:14:19,120 --> 00:14:22,880
years but hopefully but i would say also

00:14:20,880 --> 00:14:23,839
the timeline is probably dependent on

00:14:22,880 --> 00:14:26,079
you know

00:14:23,839 --> 00:14:27,680
uh or could be not only accelerated or

00:14:26,079 --> 00:14:29,120
the timeline obviously is like how many

00:14:27,680 --> 00:14:30,959
people are contributing so if you're

00:14:29,120 --> 00:14:33,839
interested in contributing

00:14:30,959 --> 00:14:34,639
you know you could affect that timeline

00:14:33,839 --> 00:14:38,079
so

00:14:34,639 --> 00:14:39,920
yeah absolutely um and and we definitely

00:14:38,079 --> 00:14:42,000
right now we need more diversity right

00:14:39,920 --> 00:14:43,519
now in the in terms of

00:14:42,000 --> 00:14:45,760
funding the initiative right now the

00:14:43,519 --> 00:14:47,440
drupal association is investing a lot

00:14:45,760 --> 00:14:49,279
um pantheon is making a pretty dedicated

00:14:47,440 --> 00:14:49,760
investment and acquia's investment in

00:14:49,279 --> 00:14:52,320
this

00:14:49,760 --> 00:14:52,880
is huge right now um it'd be really

00:14:52,320 --> 00:14:55,920
great

00:14:52,880 --> 00:14:57,360
to to get more companies um who can give

00:14:55,920 --> 00:14:58,720
us some developer time to make this

00:14:57,360 --> 00:15:00,720
happen because

00:14:58,720 --> 00:15:02,320
um you know it acquia could decide

00:15:00,720 --> 00:15:03,920
tomorrow that ted and i need to solve

00:15:02,320 --> 00:15:05,440
some aqueous problem and that would also

00:15:03,920 --> 00:15:08,560
affect the timeline so

00:15:05,440 --> 00:15:08,560
so we we need you

00:15:09,600 --> 00:15:13,120
yes absolutely um we have a couple of

00:15:12,240 --> 00:15:15,519
related

00:15:13,120 --> 00:15:16,399
sort of composer questions here um one

00:15:15,519 --> 00:15:18,000
of which is

00:15:16,399 --> 00:15:20,079
perhaps a little bit of a softball here

00:15:18,000 --> 00:15:21,120
from damien but on a scale of one to one

00:15:20,079 --> 00:15:23,920
million

00:15:21,120 --> 00:15:25,120
um how much does composer 2 make this

00:15:23,920 --> 00:15:26,959
whole thing easier

00:15:25,120 --> 00:15:28,880
and and more feasible like what what was

00:15:26,959 --> 00:15:29,600
so significant about composer 2's

00:15:28,880 --> 00:15:32,480
release

00:15:29,600 --> 00:15:33,440
in making this possible and um and why

00:15:32,480 --> 00:15:35,839
is that important

00:15:33,440 --> 00:15:37,199
um to to being able to do this and even

00:15:35,839 --> 00:15:39,440
the project browser initiative that it

00:15:37,199 --> 00:15:42,160
was proposed

00:15:39,440 --> 00:15:43,199
so the memory requirements are huge or

00:15:42,160 --> 00:15:45,759
the the

00:15:43,199 --> 00:15:46,480
lowered memory requirements so we want

00:15:45,759 --> 00:15:49,759
to do this

00:15:46,480 --> 00:15:52,639
um you know in a web request um

00:15:49,759 --> 00:15:53,519
so that is probably even if all the

00:15:52,639 --> 00:15:55,519
other stuff that we're

00:15:53,519 --> 00:15:56,880
getting solved and composer two didn't

00:15:55,519 --> 00:15:58,320
happen i think probably the memory

00:15:56,880 --> 00:16:00,320
requirements would stop it almost

00:15:58,320 --> 00:16:03,279
hosting in composer one

00:16:00,320 --> 00:16:05,279
um and then i think just generally the

00:16:03,279 --> 00:16:08,399
way composer is written

00:16:05,279 --> 00:16:10,639
um we would not have access to the

00:16:08,399 --> 00:16:14,320
downloads in the way that we do

00:16:10,639 --> 00:16:16,240
in composer 2. so we could potentially

00:16:14,320 --> 00:16:17,600
make a system in composer 1 probably

00:16:16,240 --> 00:16:18,480
that we would have access to the

00:16:17,600 --> 00:16:21,920
downloads

00:16:18,480 --> 00:16:23,600
after the fact but composer two it's

00:16:21,920 --> 00:16:25,519
gonna be easier for us to sort of get

00:16:23,600 --> 00:16:26,639
in the chain of like the download of the

00:16:25,519 --> 00:16:30,800
packages

00:16:26,639 --> 00:16:32,320
to um uh to protect against like denial

00:16:30,800 --> 00:16:33,600
of service attacks where somebody would

00:16:32,320 --> 00:16:36,320
send like a strength like

00:16:33,600 --> 00:16:37,680
in the stream for particular packages or

00:16:36,320 --> 00:16:39,360
metadata

00:16:37,680 --> 00:16:41,040
so that we can cut you know the top what

00:16:39,360 --> 00:16:43,360
part of the tough requirement is

00:16:41,040 --> 00:16:44,399
for the test specification like all the

00:16:43,360 --> 00:16:46,160
files that are

00:16:44,399 --> 00:16:48,079
targets in the update framework you know

00:16:46,160 --> 00:16:50,800
how long they're supposed to be

00:16:48,079 --> 00:16:51,920
and if that stream exceeds that then you

00:16:50,800 --> 00:16:53,440
don't you know you don't

00:16:51,920 --> 00:16:55,759
you don't finish downloading check the

00:16:53,440 --> 00:16:58,959
house you just abort that point

00:16:55,759 --> 00:17:02,720
um so the flexibility um

00:16:58,959 --> 00:17:06,079
that uh and that we're really getting

00:17:02,720 --> 00:17:07,760
in in the composer right now so we may

00:17:06,079 --> 00:17:09,360
actually be dependent on like the point

00:17:07,760 --> 00:17:11,439
release of composer but like

00:17:09,360 --> 00:17:12,720
jess said with the timeline um that

00:17:11,439 --> 00:17:15,280
we're looking at that probably

00:17:12,720 --> 00:17:18,079
won't be an issue um or it'll be an

00:17:15,280 --> 00:17:18,880
issue but by that time it'll be fine um

00:17:18,079 --> 00:17:21,280
so yeah

00:17:18,880 --> 00:17:23,679
not not possible in composer one

00:17:21,280 --> 00:17:23,679
probably

00:17:23,760 --> 00:17:27,120
yeah and you know just in general

00:17:25,760 --> 00:17:28,880
composer two is just

00:17:27,120 --> 00:17:30,240
so much more practical for everything

00:17:28,880 --> 00:17:32,880
related to

00:17:30,240 --> 00:17:33,679
um smaller site owners shared hosting

00:17:32,880 --> 00:17:35,760
that whole thing

00:17:33,679 --> 00:17:37,440
um adam it seemed like maybe you had

00:17:35,760 --> 00:17:39,039
some comments there related to composer

00:17:37,440 --> 00:17:40,559
as well did you want to jump in i mean i

00:17:39,039 --> 00:17:43,280
would second what ted said

00:17:40,559 --> 00:17:45,039
where um the memory requirements of

00:17:43,280 --> 00:17:48,559
composer one are probably

00:17:45,039 --> 00:17:49,360
a problem for us and it's also i mean i

00:17:48,559 --> 00:17:51,280
haven't

00:17:49,360 --> 00:17:53,520
i don't you know with composer 2 being

00:17:51,280 --> 00:17:54,799
out and not painful to use or not as

00:17:53,520 --> 00:17:56,480
painful i don't want to freaking touch

00:17:54,799 --> 00:18:00,240
composer one anyway

00:17:56,480 --> 00:18:03,200
so um i don't know if composer one has

00:18:00,240 --> 00:18:05,120
the apis that we're using it maybe it

00:18:03,200 --> 00:18:06,799
does maybe it doesn't either way we did

00:18:05,120 --> 00:18:08,880
need to make a few small changes to

00:18:06,799 --> 00:18:10,559
composer two and those changes only got

00:18:08,880 --> 00:18:12,400
merged into composer two anyway to get

00:18:10,559 --> 00:18:14,799
this to work so

00:18:12,400 --> 00:18:16,080
i i don't know why we would want to mess

00:18:14,799 --> 00:18:18,160
with composer one

00:18:16,080 --> 00:18:19,360
anyhow let's let's just bury it drupal

00:18:18,160 --> 00:18:22,400
10 also won't

00:18:19,360 --> 00:18:23,200
support composer one keep in mind great

00:18:22,400 --> 00:18:25,840
let's bury it

00:18:23,200 --> 00:18:25,840
so there we go

00:18:27,120 --> 00:18:30,960
awesome um so then the second sort of

00:18:29,440 --> 00:18:32,559
composer related packet it's kind of

00:18:30,960 --> 00:18:34,240
combination composer tough and drupal

00:18:32,559 --> 00:18:36,559
the door question so peter

00:18:34,240 --> 00:18:38,240
asks you so what is how is drupal.org

00:18:36,559 --> 00:18:38,960
actually integrating with these composer

00:18:38,240 --> 00:18:41,039
packages

00:18:38,960 --> 00:18:42,559
to create this sort of tough signing

00:18:41,039 --> 00:18:43,600
when it comes to third party packages

00:18:42,559 --> 00:18:45,440
that drupal.org

00:18:43,600 --> 00:18:47,360
isn't hosting directly how is that

00:18:45,440 --> 00:18:49,280
working and and how are we managing that

00:18:47,360 --> 00:18:51,200
oh i would love to tell you about that

00:18:49,280 --> 00:18:52,400
wait go ahead ted no i was just

00:18:51,200 --> 00:18:55,200
wondering if like uh

00:18:52,400 --> 00:18:57,280
david or neil is on it around if they

00:18:55,200 --> 00:19:00,880
yeah

00:18:57,280 --> 00:19:01,360
we can answer it i think the people here

00:19:00,880 --> 00:19:02,720
may

00:19:01,360 --> 00:19:04,559
they might have if they might have some

00:19:02,720 --> 00:19:08,559
more thoughts but uh why don't you

00:19:04,559 --> 00:19:11,919
why don't you kick it off ted come here

00:19:08,559 --> 00:19:14,240
so yeah i'm neil uh drum one of the

00:19:11,919 --> 00:19:15,760
uh people on the drupal.org engineering

00:19:14,240 --> 00:19:19,039
team

00:19:15,760 --> 00:19:22,559
uh so yeah we

00:19:19,039 --> 00:19:24,080
are architecting uh david schuster has

00:19:22,559 --> 00:19:27,520
done a lot of thought here

00:19:24,080 --> 00:19:31,039
uh architecting a

00:19:27,520 --> 00:19:32,919
server which will uh once a package has

00:19:31,039 --> 00:19:37,360
requested any composer

00:19:32,919 --> 00:19:40,080
packages.org or drupal.org package

00:19:37,360 --> 00:19:42,160
put it in a queue and get it signed uh

00:19:40,080 --> 00:19:45,280
we're signing on behalf of

00:19:42,160 --> 00:19:47,520
packages so uh

00:19:45,280 --> 00:19:49,520
there is a little bit of a handoff there

00:19:47,520 --> 00:19:51,919
and

00:19:49,520 --> 00:19:54,000
uh we want to build this in a way that

00:19:51,919 --> 00:19:55,679
we can

00:19:54,000 --> 00:19:57,600
shift the whole infrastructure over to

00:19:55,679 --> 00:20:02,080
packages.org if we build something

00:19:57,600 --> 00:20:04,640
that works with their infrastructure

00:20:02,080 --> 00:20:05,600
and yeah the actual signing itself will

00:20:04,640 --> 00:20:08,640
be

00:20:05,600 --> 00:20:10,559
mostly python code since the tough

00:20:08,640 --> 00:20:11,840
reference implementation that we'll use

00:20:10,559 --> 00:20:15,200
is is python

00:20:11,840 --> 00:20:16,159
and yeah it's just stringing together a

00:20:15,200 --> 00:20:21,120
bunch of

00:20:16,159 --> 00:20:24,960
cues and http requests

00:20:21,120 --> 00:20:26,320
yes i think one thing sorry go ahead

00:20:24,960 --> 00:20:28,159
okay well the only thing i want to say

00:20:26,320 --> 00:20:30,640
is like you know in case it's not

00:20:28,159 --> 00:20:32,320
clear like part one of the requirements

00:20:30,640 --> 00:20:34,159
of the composer integration is that we

00:20:32,320 --> 00:20:35,280
need to be able to validate packages

00:20:34,159 --> 00:20:36,880
that are coming from

00:20:35,280 --> 00:20:39,039
places on the internet that are not d

00:20:36,880 --> 00:20:41,120
auto so we are going to be checking

00:20:39,039 --> 00:20:43,280
you know partially this happens on the

00:20:41,120 --> 00:20:46,880
as neil mentioned on the server side

00:20:43,280 --> 00:20:48,080
with of d.o and it'll also happen with

00:20:46,880 --> 00:20:49,679
composer where we will

00:20:48,080 --> 00:20:51,440
validate stuff that comes from the rest

00:20:49,679 --> 00:20:52,640
of the internet from packages and stuff

00:20:51,440 --> 00:20:55,440
like that

00:20:52,640 --> 00:20:57,679
yeah and we're we're validating every

00:20:55,440 --> 00:20:59,919
http request that composer makes

00:20:57,679 --> 00:21:00,960
so downloading the composer metadata

00:20:59,919 --> 00:21:04,799
downloading

00:21:00,960 --> 00:21:07,039
the uh file the tar walls themselves

00:21:04,799 --> 00:21:08,799
uh the there might be like a

00:21:07,039 --> 00:21:12,080
bootstrapping where

00:21:08,799 --> 00:21:14,480
uh the initial method data about

00:21:12,080 --> 00:21:15,600
the packages or throughput or repository

00:21:14,480 --> 00:21:18,080
says yes everything's

00:21:15,600 --> 00:21:20,159
signed with tough signatures are over on

00:21:18,080 --> 00:21:21,600
this server

00:21:20,159 --> 00:21:23,840
yeah so we'll go into a little bit of

00:21:21,600 --> 00:21:26,720
this more in the technical overview but

00:21:23,840 --> 00:21:28,559
one thing i mean kind of the basic of

00:21:26,720 --> 00:21:30,640
the need for the update framework

00:21:28,559 --> 00:21:32,480
is that we really can't trust for

00:21:30,640 --> 00:21:34,480
different hosting providers

00:21:32,480 --> 00:21:36,320
um they're i guess they're called the

00:21:34,480 --> 00:21:38,240
tls change so there

00:21:36,320 --> 00:21:40,480
if we could trust always that they could

00:21:38,240 --> 00:21:43,280
make secure requests we wouldn't need

00:21:40,480 --> 00:21:44,880
a lot of this but um you know for

00:21:43,280 --> 00:21:45,360
different posting it's it's really hard

00:21:44,880 --> 00:21:48,000
to tell

00:21:45,360 --> 00:21:48,799
if we can trust that so drupal

00:21:48,000 --> 00:21:51,919
eventually will

00:21:48,799 --> 00:21:54,400
ship with this root.json file that is

00:21:51,919 --> 00:21:56,000
the update framework specifies and that

00:21:54,400 --> 00:21:58,320
will have a set of keys

00:21:56,000 --> 00:22:00,159
and we can we can update those keys and

00:21:58,320 --> 00:22:04,240
rotate them but basically

00:22:00,159 --> 00:22:06,320
we're kind of pushing the trust onto the

00:22:04,240 --> 00:22:07,360
org infrastructure for making requests

00:22:06,320 --> 00:22:09,919
so instead of like

00:22:07,360 --> 00:22:11,679
every drupal site making a request to

00:22:09,919 --> 00:22:14,960
download something and having to

00:22:11,679 --> 00:22:16,799
have to trust that request um it's

00:22:14,960 --> 00:22:18,880
like what sort of a smaller point of

00:22:16,799 --> 00:22:20,640
trust of like something making a request

00:22:18,880 --> 00:22:22,799
and signing it is the drupal

00:22:20,640 --> 00:22:24,840
and work infrastructure not your

00:22:22,799 --> 00:22:28,720
particular site in your particular

00:22:24,840 --> 00:22:28,720
hosting that's my understanding

00:22:28,799 --> 00:22:32,799
thanks all um we have a question from

00:22:31,520 --> 00:22:34,799
ben here

00:22:32,799 --> 00:22:36,480
um so there's a lot of sites that are

00:22:34,799 --> 00:22:37,840
applying patches

00:22:36,480 --> 00:22:39,919
and there's you know the composer

00:22:37,840 --> 00:22:40,640
patches plug-in what kind of thought has

00:22:39,919 --> 00:22:42,799
gone into

00:22:40,640 --> 00:22:45,520
how you handle updates if there's

00:22:42,799 --> 00:22:48,640
patched files and those sorts of things

00:22:45,520 --> 00:22:49,600
we i mean i would i could just gotten

00:22:48,640 --> 00:22:52,240
very far in that

00:22:49,600 --> 00:22:53,200
oh you have okay i mean so everything

00:22:52,240 --> 00:22:55,200
i'm about to say

00:22:53,200 --> 00:22:57,039
has not been tested so this is all

00:22:55,200 --> 00:22:58,799
theoretical based on just my rooting

00:22:57,039 --> 00:23:01,200
around the guts of this stuff

00:22:58,799 --> 00:23:01,919
but the way i understand how like the

00:23:01,200 --> 00:23:05,440
patcher i

00:23:01,919 --> 00:23:07,280
think everybody uses is uh c c wigan's

00:23:05,440 --> 00:23:10,480
composer patches

00:23:07,280 --> 00:23:12,720
and the way i understand that

00:23:10,480 --> 00:23:15,039
plugin works is it only applies to

00:23:12,720 --> 00:23:16,000
patches after composer has downloaded a

00:23:15,039 --> 00:23:17,679
thing

00:23:16,000 --> 00:23:19,200
so what will have what happens is tough

00:23:17,679 --> 00:23:20,400
sits between those two points where

00:23:19,200 --> 00:23:23,120
composer does the download

00:23:20,400 --> 00:23:24,720
touch checks it and then release poser

00:23:23,120 --> 00:23:25,840
and the other plugins to do whatever it

00:23:24,720 --> 00:23:28,720
wants

00:23:25,840 --> 00:23:30,559
that's what i think it would do i have

00:23:28,720 --> 00:23:32,159
to confirm that that's what it would do

00:23:30,559 --> 00:23:33,600
um but it definitely needs to work with

00:23:32,159 --> 00:23:36,799
patches so

00:23:33,600 --> 00:23:40,159
that that would be my guess there

00:23:36,799 --> 00:23:43,520
but it does need to i think also the the

00:23:40,159 --> 00:23:46,000
like the composer patches will probably

00:23:43,520 --> 00:23:47,760
need to it may need to add its own

00:23:46,000 --> 00:23:48,640
integration for the composer staging

00:23:47,760 --> 00:23:51,120
plugin

00:23:48,640 --> 00:23:52,640
um i see travis joined so maybe he can

00:23:51,120 --> 00:23:56,799
speak to this but i was gonna

00:23:52,640 --> 00:23:59,520
um briefly say um you know we

00:23:56,799 --> 00:24:00,480
the what what happens what what's going

00:23:59,520 --> 00:24:03,039
to happen right now

00:24:00,480 --> 00:24:04,880
is that um all of the effects get

00:24:03,039 --> 00:24:07,600
downloaded in a temporary directory

00:24:04,880 --> 00:24:07,919
and then copied over so that instead of

00:24:07,600 --> 00:24:10,480
um

00:24:07,919 --> 00:24:11,520
having to wait for the entire composer

00:24:10,480 --> 00:24:14,559
dependency

00:24:11,520 --> 00:24:16,320
evaluation and so forth you the files

00:24:14,559 --> 00:24:17,679
only get copied once we're sure

00:24:16,320 --> 00:24:20,480
that first of all there weren't any

00:24:17,679 --> 00:24:22,159
errors in the composer build process

00:24:20,480 --> 00:24:24,080
and also that all the packages were

00:24:22,159 --> 00:24:24,640
downloaded and signatures matched and so

00:24:24,080 --> 00:24:27,600
forth

00:24:24,640 --> 00:24:28,640
um so if if the patches don't apply then

00:24:27,600 --> 00:24:30,720
the build would fail

00:24:28,640 --> 00:24:32,000
and so at that point um i think that

00:24:30,720 --> 00:24:33,600
composer patches will want

00:24:32,000 --> 00:24:35,840
to ensure that the updates are not

00:24:33,600 --> 00:24:37,440
copied over and inform the user

00:24:35,840 --> 00:24:39,440
um that they have a patch that no longer

00:24:37,440 --> 00:24:42,559
applies following the update

00:24:39,440 --> 00:24:46,480
so that's something i can see out there

00:24:42,559 --> 00:24:50,240
yeah if i can offer

00:24:46,480 --> 00:24:54,080
another perspective on the same answer

00:24:50,240 --> 00:24:57,039
the question of patches

00:24:54,080 --> 00:24:59,440
is a matter of just the ordinary

00:24:57,039 --> 00:25:03,600
composer stuff

00:24:59,440 --> 00:25:08,000
the composer staging

00:25:03,600 --> 00:25:10,480
which is the part of the process that

00:25:08,000 --> 00:25:12,240
kind of moves the composer updating work

00:25:10,480 --> 00:25:15,200
outside the live

00:25:12,240 --> 00:25:16,400
active directory and then moves it back

00:25:15,200 --> 00:25:19,840
in when it's all done

00:25:16,400 --> 00:25:22,880
so that failures won't bork

00:25:19,840 --> 00:25:23,679
the live site and long running composer

00:25:22,880 --> 00:25:26,960
commands

00:25:23,679 --> 00:25:32,000
won't take your site down or offline

00:25:26,960 --> 00:25:35,919
for their duration this composer stager

00:25:32,000 --> 00:25:37,360
doesn't unlike the composer tough

00:25:35,919 --> 00:25:40,400
integration which is

00:25:37,360 --> 00:25:42,000
literally a composer plugin the stager

00:25:40,400 --> 00:25:44,320
is a completely separate tool

00:25:42,000 --> 00:25:45,200
it doesn't get in the composer's innards

00:25:44,320 --> 00:25:48,080
it doesn't

00:25:45,200 --> 00:25:48,880
really have any effect whatsoever on

00:25:48,080 --> 00:25:53,120
things

00:25:48,880 --> 00:25:56,640
like your custom installer paths

00:25:53,120 --> 00:25:59,840
or patches or anything else

00:25:56,640 --> 00:26:02,559
that you may be using that affects your

00:25:59,840 --> 00:26:06,880
ordinary composer

00:26:02,559 --> 00:26:09,679
workflow and functionality and so

00:26:06,880 --> 00:26:10,720
for that reason you can consider that

00:26:09,679 --> 00:26:14,799
effectively

00:26:10,720 --> 00:26:18,880
irrelevant um in other words

00:26:14,799 --> 00:26:19,600
it if you do it now it will continue to

00:26:18,880 --> 00:26:22,400
just kind of

00:26:19,600 --> 00:26:22,400
work the same

00:26:23,679 --> 00:26:27,679
they way in the chat that there's maybe

00:26:25,679 --> 00:26:29,919
a problem with photos and patches like

00:26:27,679 --> 00:26:31,600
failing silently so obviously we'll need

00:26:29,919 --> 00:26:34,320
to

00:26:31,600 --> 00:26:36,480
i mean right now we're not in we're not

00:26:34,320 --> 00:26:38,080
working any improvements to the composer

00:26:36,480 --> 00:26:38,960
patch flip but we may need to look at

00:26:38,080 --> 00:26:40,799
that

00:26:38,960 --> 00:26:42,880
obviously that's you know not acceptable

00:26:40,799 --> 00:26:44,960
for an update to

00:26:42,880 --> 00:26:46,480
to should apply a patch but it doesn't

00:26:44,960 --> 00:26:47,120
for some reason and just to totally

00:26:46,480 --> 00:26:49,600
ignore it

00:26:47,120 --> 00:26:50,799
keep in mind that core does not support

00:26:49,600 --> 00:26:53,600
the notion of of

00:26:50,799 --> 00:26:55,440
having core patched and the core will

00:26:53,600 --> 00:26:56,880
include a readiness check that verifies

00:26:55,440 --> 00:26:59,919
that core is not patched

00:26:56,880 --> 00:27:01,520
that it matches um so

00:26:59,919 --> 00:27:03,600
for for the long tail site

00:27:01,520 --> 00:27:06,320
implementation

00:27:03,600 --> 00:27:06,720
by default that readiness check will say

00:27:06,320 --> 00:27:08,799
hey

00:27:06,720 --> 00:27:10,799
you're not ready for an update um and

00:27:08,799 --> 00:27:12,640
then if someone you know for for many

00:27:10,799 --> 00:27:13,120
site owners that do need to run patches

00:27:12,640 --> 00:27:16,000
against

00:27:13,120 --> 00:27:17,679
core or against contrib um that that

00:27:16,000 --> 00:27:19,200
tool will probably need to

00:27:17,679 --> 00:27:21,840
or whatever tools they're using will

00:27:19,200 --> 00:27:25,120
need to turn that readiness check

00:27:21,840 --> 00:27:28,880
off and replace it with their own

00:27:25,120 --> 00:27:32,000
relevant verification

00:27:28,880 --> 00:27:35,279
the remark that patches

00:27:32,000 --> 00:27:38,960
fail if or patching fails

00:27:35,279 --> 00:27:39,440
if the linux patch or gnu patch or

00:27:38,960 --> 00:27:42,880
whatever

00:27:39,440 --> 00:27:47,039
is not installed in the shell uh

00:27:42,880 --> 00:27:50,399
does kind of point back to that fact

00:27:47,039 --> 00:27:52,320
that those details are not going to be

00:27:50,399 --> 00:27:53,039
changed whatsoever by the composer

00:27:52,320 --> 00:27:56,880
staging

00:27:53,039 --> 00:27:58,720
operations if if you

00:27:56,880 --> 00:28:00,320
already have if it's already silently

00:27:58,720 --> 00:28:01,840
failing on your

00:28:00,320 --> 00:28:04,240
current live application it will

00:28:01,840 --> 00:28:07,440
continue to silently fail when you stage

00:28:04,240 --> 00:28:09,840
updates if it is not

00:28:07,440 --> 00:28:11,360
failing silently if it's throwing errors

00:28:09,840 --> 00:28:12,640
when there are patch failures on the

00:28:11,360 --> 00:28:16,000
live application

00:28:12,640 --> 00:28:17,120
it will behave the same way in the in

00:28:16,000 --> 00:28:20,159
the staging

00:28:17,120 --> 00:28:23,840
operations it will cause them to fail to

00:28:20,159 --> 00:28:26,640
really uh innards wise

00:28:23,840 --> 00:28:29,039
really it's it's a lift and shift it

00:28:26,640 --> 00:28:32,080
just copies your whole

00:28:29,039 --> 00:28:35,760
active application active

00:28:32,080 --> 00:28:37,679
directory into a temp directory

00:28:35,760 --> 00:28:38,880
and then it just goes into that temp

00:28:37,679 --> 00:28:41,520
directory

00:28:38,880 --> 00:28:42,240
and performs your composer update or

00:28:41,520 --> 00:28:45,360
other

00:28:42,240 --> 00:28:45,840
composer commands and then r syncs it

00:28:45,360 --> 00:28:50,480
back

00:28:45,840 --> 00:28:50,480
into the live or active directory

00:28:52,080 --> 00:28:56,080
cool so you know unfortunately we've

00:28:54,720 --> 00:28:58,880
sort of reached the end of our time and

00:28:56,080 --> 00:29:01,440
i do still see some great questions here

00:28:58,880 --> 00:29:02,960
youtubers five more minutes right don't

00:29:01,440 --> 00:29:04,640
we oh do we oh god

00:29:02,960 --> 00:29:05,679
i got yes or four minutes now but maybe

00:29:04,640 --> 00:29:06,720
we can get like one or two more

00:29:05,679 --> 00:29:08,399
questions in

00:29:06,720 --> 00:29:10,960
but probably should be perfect let's do

00:29:08,399 --> 00:29:13,039
that so

00:29:10,960 --> 00:29:15,679
related to additional sort of questions

00:29:13,039 --> 00:29:17,360
about i don't know if patches is totally

00:29:15,679 --> 00:29:19,279
an edge case considering how common it

00:29:17,360 --> 00:29:21,279
can be but other sorts of cases

00:29:19,279 --> 00:29:22,320
what about updates that include um

00:29:21,279 --> 00:29:24,840
database updates

00:29:22,320 --> 00:29:28,080
um how do you handle sort of an upbeat

00:29:24,840 --> 00:29:30,000
situation and how would you handle

00:29:28,080 --> 00:29:31,279
the config that might go along with it

00:29:30,000 --> 00:29:32,960
particularly if you need to connect that

00:29:31,279 --> 00:29:35,919
configuration somewhere

00:29:32,960 --> 00:29:37,440
um so the the second part the committing

00:29:35,919 --> 00:29:40,000
changes or whatever

00:29:37,440 --> 00:29:41,520
that's the responsibility of the person

00:29:40,000 --> 00:29:43,440
building out the workflow

00:29:41,520 --> 00:29:44,960
so if your workflow currently involves a

00:29:43,440 --> 00:29:46,640
commit before deployment

00:29:44,960 --> 00:29:48,399
presumably that will be the same case

00:29:46,640 --> 00:29:49,600
when you integrate on the automatic

00:29:48,399 --> 00:29:52,240
updater but

00:29:49,600 --> 00:29:54,080
uh for for the the first part the

00:29:52,240 --> 00:29:57,120
database updates

00:29:54,080 --> 00:29:58,720
we have a policy right now that that

00:29:57,120 --> 00:30:00,799
anything that includes an update hook

00:29:58,720 --> 00:30:03,840
should be include deferred

00:30:00,799 --> 00:30:05,840
to a minor release if possible we avoid

00:30:03,840 --> 00:30:06,720
having any hook update and or post

00:30:05,840 --> 00:30:09,760
updates

00:30:06,720 --> 00:30:13,039
in patch releases in general um and

00:30:09,760 --> 00:30:14,720
in security releases uh because you know

00:30:13,039 --> 00:30:18,799
they're they're disruptive

00:30:14,720 --> 00:30:20,480
um so as much as is possible we we want

00:30:18,799 --> 00:30:22,320
like we just want to prevent that

00:30:20,480 --> 00:30:24,799
situation from existing

00:30:22,320 --> 00:30:27,360
but should there be a security update

00:30:24,799 --> 00:30:29,760
that does require a database update

00:30:27,360 --> 00:30:30,559
um in that situation um we would we

00:30:29,760 --> 00:30:32,159
would need to

00:30:30,559 --> 00:30:33,520
we can't figure that out before we

00:30:32,159 --> 00:30:34,559
download the update we have to check

00:30:33,520 --> 00:30:36,000
afterward

00:30:34,559 --> 00:30:38,000
to see whether the schema version is

00:30:36,000 --> 00:30:39,120
different um and then that that's

00:30:38,000 --> 00:30:40,960
another thing that might need to be

00:30:39,120 --> 00:30:42,480
configurable on a case-by-case basis

00:30:40,960 --> 00:30:43,120
like if you're on shared hosting you

00:30:42,480 --> 00:30:46,000
have

00:30:43,120 --> 00:30:47,760
100 200 nodes no big deal you can run

00:30:46,000 --> 00:30:49,200
any database update in production that's

00:30:47,760 --> 00:30:51,120
fine you don't care

00:30:49,200 --> 00:30:53,279
but if you have a million nodes on your

00:30:51,120 --> 00:30:55,120
site you can't run a hook update and

00:30:53,279 --> 00:30:56,960
safely and so you might need to schedule

00:30:55,120 --> 00:30:58,480
it um so that's another thing where the

00:30:56,960 --> 00:30:59,679
readiness checks come in and that's also

00:30:58,480 --> 00:31:02,320
another thing where

00:30:59,679 --> 00:31:02,720
um the the enterprise use cases will

00:31:02,320 --> 00:31:05,840
need

00:31:02,720 --> 00:31:07,679
to you know take advantage of our apis

00:31:05,840 --> 00:31:09,840
to write the appropriate workflow for

00:31:07,679 --> 00:31:09,840
them

00:31:13,760 --> 00:31:19,840
all right let's see here

00:31:17,360 --> 00:31:19,840
so

00:31:20,399 --> 00:31:23,679
one more question i think

00:31:24,000 --> 00:31:27,200
i think we've got and we've got quite a

00:31:26,159 --> 00:31:31,279
few good ones here

00:31:27,200 --> 00:31:32,640
uh um how will site owners be able to

00:31:31,279 --> 00:31:35,039
manage it if they have their own

00:31:32,640 --> 00:31:36,559
internal libraries particularly if

00:31:35,039 --> 00:31:38,640
they're using a private packages

00:31:36,559 --> 00:31:40,399
is that going to have problems doing say

00:31:38,640 --> 00:31:41,039
validation of packages or something like

00:31:40,399 --> 00:31:44,240
that

00:31:41,039 --> 00:31:46,000
um we did discuss this in in one of our

00:31:44,240 --> 00:31:47,840
thought sessions about this and we kind

00:31:46,000 --> 00:31:50,080
of recognized that

00:31:47,840 --> 00:31:51,600
um there will be packages in the tool

00:31:50,080 --> 00:31:53,519
chain that we have that may not be

00:31:51,600 --> 00:31:54,000
signed um we have to allow that case to

00:31:53,519 --> 00:31:57,200
exist

00:31:54,000 --> 00:31:59,279
um because um you know

00:31:57,200 --> 00:32:00,320
your your own custom code on your site

00:31:59,279 --> 00:32:02,399
is part of your

00:32:00,320 --> 00:32:03,440
composer bill presumably and we can't we

00:32:02,399 --> 00:32:05,679
can't sign that for you

00:32:03,440 --> 00:32:07,360
so um it won't it won't prevent it from

00:32:05,679 --> 00:32:08,880
what can we we just sort of recognize

00:32:07,360 --> 00:32:10,480
that we have to allow that circumstance

00:32:08,880 --> 00:32:14,159
to happen

00:32:10,480 --> 00:32:16,399
yeah and these are all signed on a per

00:32:14,159 --> 00:32:18,240
composer repository basis so if you're

00:32:16,399 --> 00:32:21,360
using a private packages

00:32:18,240 --> 00:32:22,000
uh that could have the same signing

00:32:21,360 --> 00:32:23,919
support

00:32:22,000 --> 00:32:26,320
as part of its infrastructure in the

00:32:23,919 --> 00:32:28,240
future

00:32:26,320 --> 00:32:29,760
yeah so yeah you might have to do some

00:32:28,240 --> 00:32:31,360
work on your side if you're running a

00:32:29,760 --> 00:32:34,799
credit package

00:32:31,360 --> 00:32:37,039
um but also i think for some

00:32:34,799 --> 00:32:38,080
sites that do that they may you know if

00:32:37,039 --> 00:32:40,640
you trust

00:32:38,080 --> 00:32:41,840
your hosting and your connection to the

00:32:40,640 --> 00:32:44,320
private packages

00:32:41,840 --> 00:32:44,960
much more than we can you know trust any

00:32:44,320 --> 00:32:47,039
generic

00:32:44,960 --> 00:32:48,000
drupal or any generic hosting where

00:32:47,039 --> 00:32:49,679
somebody might be

00:32:48,000 --> 00:32:51,760
then that might be an acceptable risk

00:32:49,679 --> 00:32:57,120
for you for your connection to your

00:32:51,760 --> 00:32:58,640
particular private packages

00:32:57,120 --> 00:33:00,320
i'm going to ask one more super

00:32:58,640 --> 00:33:02,559
hopefully quick question um

00:33:00,320 --> 00:33:04,080
and matt thank you for posting thanks to

00:33:02,559 --> 00:33:05,600
the core conversation

00:33:04,080 --> 00:33:07,440
and if you could drop in the

00:33:05,600 --> 00:33:08,159
contribution or slacklinks as well that

00:33:07,440 --> 00:33:11,760
would be great

00:33:08,159 --> 00:33:12,880
but quickly um how much control will

00:33:11,760 --> 00:33:16,559
site owners have

00:33:12,880 --> 00:33:18,080
about um you know choices to make on

00:33:16,559 --> 00:33:20,799
this process like can they

00:33:18,080 --> 00:33:24,240
exclude paths that they're using for

00:33:20,799 --> 00:33:26,320
development purposes or different like

00:33:24,240 --> 00:33:28,320
how componentized and configurable do we

00:33:26,320 --> 00:33:31,440
expect this to be for folks use

00:33:28,320 --> 00:33:33,840
use cases i think

00:33:31,440 --> 00:33:35,120
one thing that i don't think core really

00:33:33,840 --> 00:33:38,640
can support is like

00:33:35,120 --> 00:33:41,120
having my thought is having like modules

00:33:38,640 --> 00:33:43,440
that are not installed via composer

00:33:41,120 --> 00:33:45,200
so um if you have that then your

00:33:43,440 --> 00:33:46,159
composer lock is not accurately

00:33:45,200 --> 00:33:48,320
reflecting

00:33:46,159 --> 00:33:49,840
you know what the current state of the

00:33:48,320 --> 00:33:51,360
site is so determining whether

00:33:49,840 --> 00:33:52,480
something's compatible with the next

00:33:51,360 --> 00:33:53,600
version of core that we're going to

00:33:52,480 --> 00:33:56,320
install

00:33:53,600 --> 00:33:57,919
or if it requires a dependency update

00:33:56,320 --> 00:33:59,360
that that particular module

00:33:57,919 --> 00:34:01,120
would be compatible will be really

00:33:59,360 --> 00:34:04,559
dangerous so i think

00:34:01,120 --> 00:34:06,799
um i think one thing that we

00:34:04,559 --> 00:34:07,760
will have to implement is a way to

00:34:06,799 --> 00:34:11,440
exclude

00:34:07,760 --> 00:34:12,720
things in from the composer staging

00:34:11,440 --> 00:34:14,480
process

00:34:12,720 --> 00:34:16,399
so i don't know if travis can talk to

00:34:14,480 --> 00:34:18,879
that but basically you don't want to

00:34:16,399 --> 00:34:20,879
copy over your site's default files

00:34:18,879 --> 00:34:23,919
because files may be added

00:34:20,879 --> 00:34:24,800
as content while you know you're doing

00:34:23,919 --> 00:34:26,720
the update

00:34:24,800 --> 00:34:28,639
and you don't want to copy them back

00:34:26,720 --> 00:34:31,760
also that could be a huge

00:34:28,639 --> 00:34:33,440
a huge number of files so we'll have to

00:34:31,760 --> 00:34:34,399
support sort of a common use case and

00:34:33,440 --> 00:34:36,240
probably have a

00:34:34,399 --> 00:34:37,760
similar api or certain configuration

00:34:36,240 --> 00:34:39,520
where you can say also

00:34:37,760 --> 00:34:41,520
you know when you're copying over this

00:34:39,520 --> 00:34:42,960
is not considered this is not composer

00:34:41,520 --> 00:34:49,839
controlled

00:34:42,960 --> 00:34:49,839
this particular folder

00:34:51,119 --> 00:34:55,440
i think um to sort of help us wrap up

00:34:53,679 --> 00:34:57,440
i'd encourage everyone

00:34:55,440 --> 00:34:58,960
who if who's interested in learning more

00:34:57,440 --> 00:35:01,119
about how this works

00:34:58,960 --> 00:35:03,440
um to come to our technical overview

00:35:01,119 --> 00:35:05,280
later this afternoon

00:35:03,440 --> 00:35:06,560
it wasn't linked to the update email but

00:35:05,280 --> 00:35:08,000
they've met said they will mention

00:35:06,560 --> 00:35:09,680
in the chat and it is listed on the

00:35:08,000 --> 00:35:11,440
automatic updates page um

00:35:09,680 --> 00:35:13,359
the title is automatic updates

00:35:11,440 --> 00:35:14,720
initiative technical overview and where

00:35:13,359 --> 00:35:16,800
you can help so we'll we'll

00:35:14,720 --> 00:35:18,560
talk more this afternoon about some

00:35:16,800 --> 00:35:21,040
implementation details and where we're

00:35:18,560 --> 00:35:21,040
heading next

00:35:22,960 --> 00:35:27,119
we appreciate it and i'll see you at the

00:35:24,160 --> 00:35:27,119
contributions later today

00:35:28,640 --> 00:35:31,680
thanks for all the questions thank you

00:35:35,880 --> 00:35:38,880

YouTube URL: https://www.youtube.com/watch?v=vUCxvRF9nHE


