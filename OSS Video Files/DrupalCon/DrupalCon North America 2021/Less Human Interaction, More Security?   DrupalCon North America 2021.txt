Title: Less Human Interaction, More Security?   DrupalCon North America 2021
Publication date: 2021-05-27
Playlist: DrupalCon North America 2021
Description: 
	Can you have a more secure and up-to-date website while spending less time updating it? Yes, you can!
Captions: 
	00:00:00,000 --> 00:00:03,840
i hope i am not now please give it a

00:00:01,680 --> 00:00:07,520
thumbs up that would help

00:00:03,840 --> 00:00:10,800
so hello everyone thank you for

00:00:07,520 --> 00:00:12,400
virtually attending this talk um before

00:00:10,800 --> 00:00:14,160
i begin

00:00:12,400 --> 00:00:16,560
i want to point out that the

00:00:14,160 --> 00:00:19,680
presentation here is not directly

00:00:16,560 --> 00:00:20,560
related to the strategic initiative for

00:00:19,680 --> 00:00:23,600
drupal core

00:00:20,560 --> 00:00:24,480
called automated updates even though it

00:00:23,600 --> 00:00:27,920
touches on

00:00:24,480 --> 00:00:29,119
some of the same topics i also want to

00:00:27,920 --> 00:00:31,279
highlight that i am

00:00:29,119 --> 00:00:32,640
super excited about this strategic

00:00:31,279 --> 00:00:36,079
initiative even though

00:00:32,640 --> 00:00:37,760
not even just the words automated and

00:00:36,079 --> 00:00:40,879
updates in the same sentence

00:00:37,760 --> 00:00:41,680
it's amazing but the fact that it's a

00:00:40,879 --> 00:00:44,559
strategic

00:00:41,680 --> 00:00:45,360
initiative for drupal core also very

00:00:44,559 --> 00:00:49,840
exciting

00:00:45,360 --> 00:00:53,120
and important so even though this talk

00:00:49,840 --> 00:00:55,760
is not about the initiative i want to

00:00:53,120 --> 00:00:58,960
encourage everyone to check it out

00:00:55,760 --> 00:00:59,600
talk to the wonderful smart and talented

00:00:58,960 --> 00:01:02,079
people that

00:00:59,600 --> 00:01:03,520
contribute to this initiative and if you

00:01:02,079 --> 00:01:05,680
get the chance yourself

00:01:03,520 --> 00:01:06,799
please help make the initiative a

00:01:05,680 --> 00:01:08,000
success

00:01:06,799 --> 00:01:12,400
through the various forms of

00:01:08,000 --> 00:01:14,960
contribution one can do

00:01:12,400 --> 00:01:16,400
also this is my first session actually

00:01:14,960 --> 00:01:19,680
on drupalcon

00:01:16,400 --> 00:01:22,560
north america so i hope you all

00:01:19,680 --> 00:01:23,360
will find my accent exotic but hopefully

00:01:22,560 --> 00:01:26,720
also

00:01:23,360 --> 00:01:31,040
understandable this accent and myself

00:01:26,720 --> 00:01:34,400
we are from trondheim in norway

00:01:31,040 --> 00:01:37,520
where i work as a at a drupal

00:01:34,400 --> 00:01:39,200
consultancy company called new media

00:01:37,520 --> 00:01:41,439
we specialize actually in drupal

00:01:39,200 --> 00:01:42,479
commerce making tailor-made solutions

00:01:41,439 --> 00:01:45,520
for

00:01:42,479 --> 00:01:48,640
large retail chains online only brands

00:01:45,520 --> 00:01:50,560
and everything between those

00:01:48,640 --> 00:01:52,720
and i also want to point out that this

00:01:50,560 --> 00:01:55,280
talk will be about

00:01:52,720 --> 00:01:57,240
different aspects of automation and it

00:01:55,280 --> 00:01:58,880
will several times mention the service

00:01:57,240 --> 00:02:02,880
violinist.io

00:01:58,880 --> 00:02:04,799
and i have to say that there are

00:02:02,880 --> 00:02:06,000
maybe objectively good reasons for doing

00:02:04,799 --> 00:02:08,800
so but

00:02:06,000 --> 00:02:12,000
even though even so i have to mention i

00:02:08,800 --> 00:02:14,640
am also the founder of this service

00:02:12,000 --> 00:02:15,920
but before we look at that service and

00:02:14,640 --> 00:02:19,760
before we talk about

00:02:15,920 --> 00:02:22,480
automation let's just set the stage for

00:02:19,760 --> 00:02:25,040
why we want to do that because

00:02:22,480 --> 00:02:26,239
this talk is not only about automation

00:02:25,040 --> 00:02:30,000
as a concept

00:02:26,239 --> 00:02:31,040
it's also about security specifically

00:02:30,000 --> 00:02:34,319
security and

00:02:31,040 --> 00:02:36,080
open source i just realized

00:02:34,319 --> 00:02:38,480
there's a caption thing that i can

00:02:36,080 --> 00:02:38,480
enable

00:02:43,440 --> 00:02:49,920
and now open source software has an

00:02:46,720 --> 00:02:50,720
interesting aspects with regards to

00:02:49,920 --> 00:02:53,760
security

00:02:50,720 --> 00:02:56,720
uh which is security announcements

00:02:53,760 --> 00:02:58,560
uh for people in favor of closed source

00:02:56,720 --> 00:03:00,480
ecosystems this probably sounds

00:02:58,560 --> 00:03:02,480
laughable just the fact that one

00:03:00,480 --> 00:03:03,840
announces a security problem

00:03:02,480 --> 00:03:06,239
and the fact that the code is open

00:03:03,840 --> 00:03:07,200
source this might lead to people

00:03:06,239 --> 00:03:09,120
thinking

00:03:07,200 --> 00:03:11,440
that every security announcement will

00:03:09,120 --> 00:03:13,599
reveal the nature of the security hall

00:03:11,440 --> 00:03:14,640
and make it easy to reverse engineer and

00:03:13,599 --> 00:03:17,360
exploit

00:03:14,640 --> 00:03:18,959
this might not be the case however at

00:03:17,360 --> 00:03:21,760
all actually

00:03:18,959 --> 00:03:23,599
but it does highlight one aspect and

00:03:21,760 --> 00:03:25,599
that is the time factor

00:03:23,599 --> 00:03:27,200
the time factor is important as a site

00:03:25,599 --> 00:03:29,840
owner it's

00:03:27,200 --> 00:03:31,440
important to discover a security update

00:03:29,840 --> 00:03:34,319
fast

00:03:31,440 --> 00:03:35,920
and react fast as attacks might be

00:03:34,319 --> 00:03:39,200
automated within hours of the

00:03:35,920 --> 00:03:41,280
vulnerability being published

00:03:39,200 --> 00:03:43,519
and many here probably know about and

00:03:41,280 --> 00:03:46,159
remember drupage

00:03:43,519 --> 00:03:48,000
where there were automated attacks on

00:03:46,159 --> 00:03:49,920
the internet within hours of the

00:03:48,000 --> 00:03:52,239
security release

00:03:49,920 --> 00:03:53,599
in addition to this security releases

00:03:52,239 --> 00:03:55,840
quite often trigger

00:03:53,599 --> 00:03:57,200
targeted manual attacks which also could

00:03:55,840 --> 00:04:00,400
happen within a short

00:03:57,200 --> 00:04:02,640
period of time

00:04:00,400 --> 00:04:04,080
so here we have set the stage basically

00:04:02,640 --> 00:04:07,120
security releases

00:04:04,080 --> 00:04:09,680
they happen and automated attacks that's

00:04:07,120 --> 00:04:11,200
happening right now in general attacks

00:04:09,680 --> 00:04:14,239
they happen all the time

00:04:11,200 --> 00:04:17,040
and they're most likely automated

00:04:14,239 --> 00:04:18,079
so as we see attacks are being automated

00:04:17,040 --> 00:04:20,720
in my opinion

00:04:18,079 --> 00:04:23,440
there really really are no other options

00:04:20,720 --> 00:04:26,320
for securing our sites

00:04:23,440 --> 00:04:28,000
the solution is even more automation so

00:04:26,320 --> 00:04:30,880
let's combat automation with even

00:04:28,000 --> 00:04:30,880
more automation

00:04:31,120 --> 00:04:34,400
so what we want to do is in this talk

00:04:34,000 --> 00:04:37,600
and

00:04:34,400 --> 00:04:38,800
generally identify the manual steps site

00:04:37,600 --> 00:04:40,960
owner takes

00:04:38,800 --> 00:04:42,720
and we want to automate them and i'm not

00:04:40,960 --> 00:04:45,120
talking about automate some of them

00:04:42,720 --> 00:04:46,160
we're going to automate all of them 100

00:04:45,120 --> 00:04:49,440
of them

00:04:46,160 --> 00:04:50,880
so for this talk i want to focus on how

00:04:49,440 --> 00:04:53,600
a manual process

00:04:50,880 --> 00:04:55,520
looks for a new drupal security release

00:04:53,600 --> 00:04:56,479
and then go through what automating all

00:04:55,520 --> 00:04:59,600
parts of it

00:04:56,479 --> 00:05:01,199
might look like but before we do that

00:04:59,600 --> 00:05:03,919
let's look at a very simplified model

00:05:01,199 --> 00:05:07,199
for automated updates it consists of

00:05:03,919 --> 00:05:07,199
just one step

00:05:07,280 --> 00:05:11,280
discover plus patch the main reason i

00:05:09,680 --> 00:05:13,120
mentioned this here

00:05:11,280 --> 00:05:15,440
is that the automated update initiative

00:05:13,120 --> 00:05:17,840
is developing exactly this

00:05:15,440 --> 00:05:20,240
what this approach means is this have

00:05:17,840 --> 00:05:22,639
the security part in the code base

00:05:20,240 --> 00:05:24,560
now sorry have the discovery part of the

00:05:22,639 --> 00:05:28,240
security release in the pros

00:05:24,560 --> 00:05:29,120
code base then use this very same code

00:05:28,240 --> 00:05:31,520
base

00:05:29,120 --> 00:05:32,479
to also download and self patch or

00:05:31,520 --> 00:05:36,080
possibly

00:05:32,479 --> 00:05:40,000
swap the update to the code base

00:05:36,080 --> 00:05:42,080
so with this one-step model there are

00:05:40,000 --> 00:05:44,720
no external services and no waiting for

00:05:42,080 --> 00:05:46,639
a continuous integration pipeline

00:05:44,720 --> 00:05:47,840
and if you're interested in this

00:05:46,639 --> 00:05:50,560
approach for

00:05:47,840 --> 00:05:51,680
your site or for your clients i will

00:05:50,560 --> 00:05:53,120
encourage you to

00:05:51,680 --> 00:05:54,880
check out the automated updates

00:05:53,120 --> 00:05:56,400
initiative where this is

00:05:54,880 --> 00:05:58,639
at the moment looking like it will be a

00:05:56,400 --> 00:06:00,639
very fine and robust solution

00:05:58,639 --> 00:06:01,919
for for a lot of use cases and for a lot

00:06:00,639 --> 00:06:05,199
of types of sites

00:06:01,919 --> 00:06:08,560
and it's actually also already possible

00:06:05,199 --> 00:06:10,800
to to have this with the automatic

00:06:08,560 --> 00:06:13,600
automatic updates i think it's called

00:06:10,800 --> 00:06:13,600
country module

00:06:13,840 --> 00:06:17,759
but for the purpose of this talk however

00:06:16,240 --> 00:06:20,960
i will divide this

00:06:17,759 --> 00:06:22,960
this manual process i'm talking about

00:06:20,960 --> 00:06:24,080
of rolling out a secured and up-to-date

00:06:22,960 --> 00:06:28,080
site internal

00:06:24,080 --> 00:06:31,919
with three steps these are the steps

00:06:28,080 --> 00:06:35,039
it's discover patch and deploy

00:06:31,919 --> 00:06:37,360
as we can see three steps is uh three

00:06:35,039 --> 00:06:39,759
times as many steps as the

00:06:37,360 --> 00:06:40,800
just the ones that we just looked at but

00:06:39,759 --> 00:06:43,919
we are not

00:06:40,800 --> 00:06:46,720
in this case using three steps as an

00:06:43,919 --> 00:06:51,120
approach to make it harder for ourselves

00:06:46,720 --> 00:06:51,120
uh we are using it for

00:06:52,000 --> 00:06:57,039
mainly three reasons we want to make

00:06:54,720 --> 00:06:58,800
sure the changes needed for the security

00:06:57,039 --> 00:07:00,720
release is checked into our version

00:06:58,800 --> 00:07:02,960
control system

00:07:00,720 --> 00:07:04,880
we want to make sure that the project is

00:07:02,960 --> 00:07:07,199
tested built and deployed

00:07:04,880 --> 00:07:09,120
according to the continuous integration

00:07:07,199 --> 00:07:10,960
and continuous deployment pipelines we

00:07:09,120 --> 00:07:13,039
have for the project

00:07:10,960 --> 00:07:14,479
and we want the same transparency for

00:07:13,039 --> 00:07:17,360
our updates as for

00:07:14,479 --> 00:07:19,039
our regular code check-ins but again if

00:07:17,360 --> 00:07:20,639
your project or website does not have a

00:07:19,039 --> 00:07:23,599
version control system

00:07:20,639 --> 00:07:25,280
or maybe you don't have a continuous

00:07:23,599 --> 00:07:27,840
deployment process

00:07:25,280 --> 00:07:29,759
the one-step method of discover plus

00:07:27,840 --> 00:07:30,000
patch might be totally sufficient for

00:07:29,759 --> 00:07:32,479
your

00:07:30,000 --> 00:07:34,319
needs and even though i would argue that

00:07:32,479 --> 00:07:36,479
version control and

00:07:34,319 --> 00:07:38,160
continuous deployment pipelines are now

00:07:36,479 --> 00:07:41,039
actually within reach for

00:07:38,160 --> 00:07:42,960
projects of every size i understand that

00:07:41,039 --> 00:07:45,919
some might have simpler needs

00:07:42,960 --> 00:07:47,759
and then i would say consider the rest

00:07:45,919 --> 00:07:49,199
of this talk maybe as an inspiration for

00:07:47,759 --> 00:07:53,039
your next project where you

00:07:49,199 --> 00:07:54,879
maybe will implement these tools

00:07:53,039 --> 00:07:57,440
so now we're going to go through the

00:07:54,879 --> 00:08:01,680
through these three steps

00:07:57,440 --> 00:08:03,759
the first step we call discovery

00:08:01,680 --> 00:08:05,360
and for many people this is indeed a

00:08:03,759 --> 00:08:07,199
manual process

00:08:05,360 --> 00:08:08,800
they are following security accounts on

00:08:07,199 --> 00:08:09,840
twitter maybe or they subscribe to

00:08:08,800 --> 00:08:14,000
newsletters

00:08:09,840 --> 00:08:16,160
or feeds or maybe someone

00:08:14,000 --> 00:08:18,400
are combining them into some sort of a

00:08:16,160 --> 00:08:20,240
slack notification system or a pushover

00:08:18,400 --> 00:08:21,840
notification system

00:08:20,240 --> 00:08:24,319
or maybe you actually just turned on

00:08:21,840 --> 00:08:26,400
update notifications on your website for

00:08:24,319 --> 00:08:28,639
example your drupal sites

00:08:26,400 --> 00:08:30,479
the approaches here are similar but they

00:08:28,639 --> 00:08:32,479
share one crucial thing

00:08:30,479 --> 00:08:33,599
and that is that someone has to react to

00:08:32,479 --> 00:08:35,279
something and this is the very

00:08:33,599 --> 00:08:38,839
definition of manual

00:08:35,279 --> 00:08:41,519
namely someone has to do something

00:08:38,839 --> 00:08:44,720
manually

00:08:41,519 --> 00:08:46,320
the next step is to patch depending on

00:08:44,720 --> 00:08:47,519
your workflow this could mean one of

00:08:46,320 --> 00:08:49,040
many things

00:08:47,519 --> 00:08:50,800
maybe you apply a patch to your code

00:08:49,040 --> 00:08:53,040
base and commit that to your source

00:08:50,800 --> 00:08:54,480
control system

00:08:53,040 --> 00:08:56,320
maybe you apply a patch through your

00:08:54,480 --> 00:08:59,440
package manager

00:08:56,320 --> 00:09:01,279
or maybe you update your framework for

00:08:59,440 --> 00:09:03,360
example drupal

00:09:01,279 --> 00:09:06,560
maybe you do this by starting a script

00:09:03,360 --> 00:09:09,120
that does things for you

00:09:06,560 --> 00:09:10,959
but either way many people are forced

00:09:09,120 --> 00:09:14,080
here to intervene in some way

00:09:10,959 --> 00:09:17,839
clicking a button or starting a script

00:09:14,080 --> 00:09:21,200
or running a command for example

00:09:17,839 --> 00:09:23,200
the third step to our description of a

00:09:21,200 --> 00:09:25,440
process here is to deploy

00:09:23,200 --> 00:09:27,680
now the deploy step might for some

00:09:25,440 --> 00:09:28,560
people mean dragging files into an ftp

00:09:27,680 --> 00:09:30,320
folder

00:09:28,560 --> 00:09:31,920
or logging into a server and running a

00:09:30,320 --> 00:09:34,160
command

00:09:31,920 --> 00:09:36,000
those are typical manual steps and then

00:09:34,160 --> 00:09:38,560
some might already have this

00:09:36,000 --> 00:09:39,440
fully automated i would say out of these

00:09:38,560 --> 00:09:41,360
three

00:09:39,440 --> 00:09:43,440
steps i'm describing this might be the

00:09:41,360 --> 00:09:45,279
most common to have automated

00:09:43,440 --> 00:09:46,800
but of course not everyone has it

00:09:45,279 --> 00:09:48,720
automated and we will look at

00:09:46,800 --> 00:09:50,399
a simple example of automating it in

00:09:48,720 --> 00:09:52,480
this talk

00:09:50,399 --> 00:09:55,519
and those were the three steps in the

00:09:52,480 --> 00:09:58,720
model we have for this presentation

00:09:55,519 --> 00:10:01,519
and now let's talk about automation

00:09:58,720 --> 00:10:03,519
i i personally i love automation i love

00:10:01,519 --> 00:10:06,000
it so much i have probably

00:10:03,519 --> 00:10:07,519
written scripts for things i ended up

00:10:06,000 --> 00:10:09,279
doing just once

00:10:07,519 --> 00:10:11,040
and some of you probably do the same

00:10:09,279 --> 00:10:13,600
thing

00:10:11,040 --> 00:10:15,120
which means you spend hours on something

00:10:13,600 --> 00:10:16,399
that might save you a minute every other

00:10:15,120 --> 00:10:18,880
week

00:10:16,399 --> 00:10:20,240
for example i have now written three

00:10:18,880 --> 00:10:21,600
different versions of a script to

00:10:20,240 --> 00:10:24,640
automate booking

00:10:21,600 --> 00:10:27,120
accord to play squash at my gym

00:10:24,640 --> 00:10:28,800
uh i don't play it nowadays let's say

00:10:27,120 --> 00:10:32,000
that it's because of corona

00:10:28,800 --> 00:10:33,760
but i used to play it about once a week

00:10:32,000 --> 00:10:35,600
and it would take me about a minute to

00:10:33,760 --> 00:10:37,440
go into the website and book a court

00:10:35,600 --> 00:10:39,040
manually

00:10:37,440 --> 00:10:40,800
so let's just think about the hours i

00:10:39,040 --> 00:10:41,600
have spent writing three different

00:10:40,800 --> 00:10:44,399
versions

00:10:41,600 --> 00:10:46,320
to automate this process now means

00:10:44,399 --> 00:10:48,240
probably in 28 years i might

00:10:46,320 --> 00:10:49,360
start saving a couple of minutes and

00:10:48,240 --> 00:10:51,040
this and that's

00:10:49,360 --> 00:10:52,640
only if i stop at only three different

00:10:51,040 --> 00:10:56,079
versions

00:10:52,640 --> 00:10:57,600
anyway let's instead now talk about how

00:10:56,079 --> 00:11:01,279
much time you can save

00:10:57,600 --> 00:11:02,959
with automation

00:11:01,279 --> 00:11:05,680
and i want to talk about that in the

00:11:02,959 --> 00:11:07,440
context of our three simplified steps

00:11:05,680 --> 00:11:10,079
for a security release process

00:11:07,440 --> 00:11:11,360
which we are seeing here for the second

00:11:10,079 --> 00:11:13,760
time

00:11:11,360 --> 00:11:15,279
so this is where we want to end up at

00:11:13,760 --> 00:11:17,680
the conclusion of this talk

00:11:15,279 --> 00:11:18,560
we want automated discovery we want

00:11:17,680 --> 00:11:21,760
automatic

00:11:18,560 --> 00:11:25,279
automatic patching and we want automatic

00:11:21,760 --> 00:11:28,959
deployment let's start with the

00:11:25,279 --> 00:11:31,360
step number one automated discovery

00:11:28,959 --> 00:11:33,120
i think many people feel like they have

00:11:31,360 --> 00:11:35,600
automated discovery

00:11:33,120 --> 00:11:36,399
because they are automatically notified

00:11:35,600 --> 00:11:39,200
somehow

00:11:36,399 --> 00:11:41,120
and in some way that is correct however

00:11:39,200 --> 00:11:44,000
if we imagine

00:11:41,120 --> 00:11:45,200
automation as a chain that is just

00:11:44,000 --> 00:11:48,720
supposed

00:11:45,200 --> 00:11:51,120
to execute one step after another

00:11:48,720 --> 00:11:52,959
automatically it comes to a stop here

00:11:51,120 --> 00:11:53,519
and the reason is that the receiver of

00:11:52,959 --> 00:11:56,560
this

00:11:53,519 --> 00:11:57,600
granted automated discovery is a human

00:11:56,560 --> 00:11:59,519
and humans are

00:11:57,600 --> 00:12:01,680
usually not something you can automate

00:11:59,519 --> 00:12:04,160
and attach logic to

00:12:01,680 --> 00:12:04,800
at least not to my knowledge so what you

00:12:04,160 --> 00:12:07,040
want

00:12:04,800 --> 00:12:07,920
from your discovery automation is to

00:12:07,040 --> 00:12:10,560
notify

00:12:07,920 --> 00:12:11,600
a robot to notify a machine and they can

00:12:10,560 --> 00:12:14,240
start

00:12:11,600 --> 00:12:16,000
doing things based on this right away

00:12:14,240 --> 00:12:17,680
there are many ways to achieve this but

00:12:16,000 --> 00:12:18,440
in this presentation i'm going to talk

00:12:17,680 --> 00:12:21,680
about

00:12:18,440 --> 00:12:23,839
violinist.io violinist.io has

00:12:21,680 --> 00:12:26,399
this first part of automated discovery

00:12:23,839 --> 00:12:29,279
built in with no setup necessary

00:12:26,399 --> 00:12:31,120
the discovery process is automated and

00:12:29,279 --> 00:12:33,200
your projects are swiftly queued

00:12:31,120 --> 00:12:34,800
if an affected package is released for

00:12:33,200 --> 00:12:36,320
your projects

00:12:34,800 --> 00:12:38,639
and as an extension to this i want to

00:12:36,320 --> 00:12:40,560
highlight two somewhat exclusive

00:12:38,639 --> 00:12:42,800
features of violinists that makes the

00:12:40,560 --> 00:12:44,560
service more automatic in the discovery

00:12:42,800 --> 00:12:47,360
phase and more reliable

00:12:44,560 --> 00:12:48,880
than other security updaters and the

00:12:47,360 --> 00:12:51,600
first one is about the fact that

00:12:48,880 --> 00:12:53,360
automated php security tools are not

00:12:51,600 --> 00:12:55,519
automatic

00:12:53,360 --> 00:12:57,120
php projects generally get their

00:12:55,519 --> 00:13:00,160
security advisories from the

00:12:57,120 --> 00:13:03,360
canonical database for this it's called

00:13:00,160 --> 00:13:06,079
the php security advisories database

00:13:03,360 --> 00:13:06,560
and most large php projects contribute

00:13:06,079 --> 00:13:08,639
their

00:13:06,560 --> 00:13:10,880
advisories here like drupal symphony

00:13:08,639 --> 00:13:13,760
magento typo3 and so on

00:13:10,880 --> 00:13:16,160
and many projects and the composer tools

00:13:13,760 --> 00:13:19,440
utilize this as part of

00:13:16,160 --> 00:13:21,760
this so-called discovery automation

00:13:19,440 --> 00:13:23,279
and there is even a plug-in to make it

00:13:21,760 --> 00:13:25,680
impossible to install packages with

00:13:23,279 --> 00:13:28,800
non-security vulnerabilities

00:13:25,680 --> 00:13:30,880
however additions to this database are

00:13:28,800 --> 00:13:33,760
added by humans

00:13:30,880 --> 00:13:36,079
people like you or me uh which are

00:13:33,760 --> 00:13:37,839
creating pull requests with advisories

00:13:36,079 --> 00:13:40,639
which in turn must wait for another

00:13:37,839 --> 00:13:42,959
human to get merged into the database

00:13:40,639 --> 00:13:44,399
and now i know this because based on one

00:13:42,959 --> 00:13:46,000
of the metrics on github i'm actually

00:13:44,399 --> 00:13:47,680
the number one contributor to the

00:13:46,000 --> 00:13:49,440
database i just found out

00:13:47,680 --> 00:13:51,279
and i can tell you right now several of

00:13:49,440 --> 00:13:52,160
the drupal security advisories have been

00:13:51,279 --> 00:13:54,959
added

00:13:52,160 --> 00:13:56,160
days after they were published this is

00:13:54,959 --> 00:13:58,480
also why

00:13:56,160 --> 00:13:59,920
violinist uses the drupal.org api to

00:13:58,480 --> 00:14:02,959
query for security updates

00:13:59,920 --> 00:14:06,160
at runtime and so it can discover

00:14:02,959 --> 00:14:09,120
that a new version is a security release

00:14:06,160 --> 00:14:10,000
literally seconds after it was published

00:14:09,120 --> 00:14:11,519
and one other

00:14:10,000 --> 00:14:13,839
interesting piece i would add about

00:14:11,519 --> 00:14:15,120
violinist.io in this context is

00:14:13,839 --> 00:14:17,920
advisories about

00:14:15,120 --> 00:14:19,680
drupal contributed projects now in the

00:14:17,920 --> 00:14:20,800
world of composer as many of you

00:14:19,680 --> 00:14:24,480
probably know

00:14:20,800 --> 00:14:25,120
that means the same version in this

00:14:24,480 --> 00:14:29,040
slide

00:14:25,120 --> 00:14:31,519
that is the version 110 can exist in two

00:14:29,040 --> 00:14:33,519
different code bases

00:14:31,519 --> 00:14:35,279
but they're referring to different

00:14:33,519 --> 00:14:38,320
releases and one of them has a secure

00:14:35,279 --> 00:14:42,240
release and the other does not

00:14:38,320 --> 00:14:45,519
so this is simply impossible to use

00:14:42,240 --> 00:14:47,199
with the general uh php security

00:14:45,519 --> 00:14:50,320
advisories database this is

00:14:47,199 --> 00:14:51,760
actually detected by bioluminist uh

00:14:50,320 --> 00:14:53,360
quite exclusively and benefited the

00:14:51,760 --> 00:14:54,240
automated security updates we are

00:14:53,360 --> 00:14:56,880
talking about here

00:14:54,240 --> 00:14:58,959
and a fun anecdote here is that i once

00:14:56,880 --> 00:15:01,120
got all of the drupal country

00:14:58,959 --> 00:15:03,279
security advisories added to the php

00:15:01,120 --> 00:15:05,920
security advisories database

00:15:03,279 --> 00:15:07,199
and quote both broke the internet at

00:15:05,920 --> 00:15:10,079
least the php part

00:15:07,199 --> 00:15:13,519
for about half a day so now it's not in

00:15:10,079 --> 00:15:15,440
there anymore anyway all of these

00:15:13,519 --> 00:15:17,920
these two exclusive parts are of course

00:15:15,440 --> 00:15:19,839
open source as well

00:15:17,920 --> 00:15:21,760
our next next step in our process is

00:15:19,839 --> 00:15:22,880
automated patching there are several

00:15:21,760 --> 00:15:24,959
tools for

00:15:22,880 --> 00:15:26,240
automating the patch part of the process

00:15:24,959 --> 00:15:28,240
and some of them

00:15:26,240 --> 00:15:30,240
might literally patch your live systems

00:15:28,240 --> 00:15:32,480
for example some might do automated

00:15:30,240 --> 00:15:35,199
commits to your version control system

00:15:32,480 --> 00:15:35,680
and some will create a merge request for

00:15:35,199 --> 00:15:38,839
you

00:15:35,680 --> 00:15:40,240
and violinist dot io is in the latter

00:15:38,839 --> 00:15:43,680
category

00:15:40,240 --> 00:15:46,480
in my not so objective opinion

00:15:43,680 --> 00:15:47,360
there are several advantages to this for

00:15:46,480 --> 00:15:49,040
example

00:15:47,360 --> 00:15:50,480
this means you can run your whole chain

00:15:49,040 --> 00:15:53,600
of continuous integration

00:15:50,480 --> 00:15:55,199
even on these automated patches and if

00:15:53,600 --> 00:15:56,000
you wanted that also means you can

00:15:55,199 --> 00:15:58,480
basically turn

00:15:56,000 --> 00:16:00,560
on and off the automation of it all

00:15:58,480 --> 00:16:02,399
since the automation just

00:16:00,560 --> 00:16:03,839
does the same job as a human so if you

00:16:02,399 --> 00:16:04,639
wanted to replace the automation with a

00:16:03,839 --> 00:16:07,120
human again

00:16:04,639 --> 00:16:08,800
you can do that the other good part is

00:16:07,120 --> 00:16:10,720
that you're able to transparently see

00:16:08,800 --> 00:16:12,560
what the automation has done

00:16:10,720 --> 00:16:15,759
since it follows the same pattern as

00:16:12,560 --> 00:16:17,920
your regular code checkings

00:16:15,759 --> 00:16:19,759
and the final piece in the puzzle of

00:16:17,920 --> 00:16:21,440
automated patching is merging these

00:16:19,759 --> 00:16:23,360
merge requests automatically

00:16:21,440 --> 00:16:24,800
which can be done with several tools for

00:16:23,360 --> 00:16:29,839
example github actions

00:16:24,800 --> 00:16:29,839
mergerify kodiak gitlab ci and so on

00:16:30,480 --> 00:16:37,839
the last step to the automated process

00:16:34,079 --> 00:16:37,839
is to automate the deployments

00:16:37,920 --> 00:16:42,560
automated deployments or continuous

00:16:40,320 --> 00:16:44,639
deployment is a space where we have many

00:16:42,560 --> 00:16:46,240
existing solutions and it's fairly

00:16:44,639 --> 00:16:47,839
common to already have this in place as

00:16:46,240 --> 00:16:49,839
i mentioned earlier

00:16:47,839 --> 00:16:51,519
and you can use any of the services

00:16:49,839 --> 00:16:53,360
pictured and several

00:16:51,519 --> 00:16:55,120
probably dozens more and i will not

00:16:53,360 --> 00:16:57,199
cover this in depth as i'm sure there

00:16:55,120 --> 00:16:58,160
are entire conferences dedicated to the

00:16:57,199 --> 00:17:01,199
subjects

00:16:58,160 --> 00:17:03,199
but the gist of it is one has to deploy

00:17:01,199 --> 00:17:05,439
the security updates and

00:17:03,199 --> 00:17:06,319
a continuous deployment approach to

00:17:05,439 --> 00:17:08,959
deployment

00:17:06,319 --> 00:17:09,919
would cover the automation part of it in

00:17:08,959 --> 00:17:12,959
our

00:17:09,919 --> 00:17:12,959
three-step model here

00:17:13,120 --> 00:17:19,919
this slide says its demo time

00:17:16,799 --> 00:17:20,240
that's going to be exciting and uh it's

00:17:19,919 --> 00:17:23,919
not

00:17:20,240 --> 00:17:25,679
a 100 live demo since looking at

00:17:23,919 --> 00:17:27,280
different versions of loading animations

00:17:25,679 --> 00:17:30,320
are not very inspiring

00:17:27,280 --> 00:17:34,799
so instead i will do like a semi uh

00:17:30,320 --> 00:17:36,799
live demo which means i will start

00:17:34,799 --> 00:17:38,880
a demo in the background and explain

00:17:36,799 --> 00:17:41,039
something with pictures

00:17:38,880 --> 00:17:41,919
while it hopefully completes while i'm

00:17:41,039 --> 00:17:43,679
talking so

00:17:41,919 --> 00:17:45,440
that's going to be very exciting to see

00:17:43,679 --> 00:17:47,280
if that happens

00:17:45,440 --> 00:17:49,200
so first we're just going to look at an

00:17:47,280 --> 00:17:50,720
example site that i have set up for this

00:17:49,200 --> 00:17:53,120
talk

00:17:50,720 --> 00:17:54,960
it's a very standard drupal site almost

00:17:53,120 --> 00:17:58,320
like it is out of the box

00:17:54,960 --> 00:18:01,200
except it has a version 9 1

00:17:58,320 --> 00:18:01,919
2 installed which is an old version of

00:18:01,200 --> 00:18:05,360
drupal

00:18:01,919 --> 00:18:07,520
that has a security update available

00:18:05,360 --> 00:18:08,400
so what we want to do is to add this

00:18:07,520 --> 00:18:10,799
project which

00:18:08,400 --> 00:18:11,600
is hosted on gitlab on this address to

00:18:10,799 --> 00:18:15,840
violinist

00:18:11,600 --> 00:18:17,760
which we're doing in this tab

00:18:15,840 --> 00:18:20,080
and in the background now i hope that

00:18:17,760 --> 00:18:22,400
this is going to

00:18:20,080 --> 00:18:23,520
give us an amazing result and then i'm

00:18:22,400 --> 00:18:27,280
going to

00:18:23,520 --> 00:18:31,120
kind of explain what it's going to do

00:18:27,280 --> 00:18:31,120
in my slides here

00:18:34,240 --> 00:18:38,640
so let's first look at the different

00:18:36,160 --> 00:18:40,640
moving parts of this um

00:18:38,640 --> 00:18:42,480
project that i'm demoing right now the

00:18:40,640 --> 00:18:46,320
website that we just saw

00:18:42,480 --> 00:18:49,520
is has its code hosted on gitlab

00:18:46,320 --> 00:18:50,799
and it has automated tests running on

00:18:49,520 --> 00:18:52,720
gitlab ci

00:18:50,799 --> 00:18:54,960
it's running unit tests static analysis

00:18:52,720 --> 00:18:56,880
and integration tests

00:18:54,960 --> 00:18:59,360
and all of the commits to the main

00:18:56,880 --> 00:19:02,960
branch are deployed automatically by

00:18:59,360 --> 00:19:02,960
another gitlab ci job

00:19:03,039 --> 00:19:06,880
and we also have a gitlab ci job to

00:19:05,360 --> 00:19:10,160
enable

00:19:06,880 --> 00:19:10,480
auto merge on merge requests when they

00:19:10,160 --> 00:19:12,400
are

00:19:10,480 --> 00:19:15,120
security related and they come from

00:19:12,400 --> 00:19:15,120
violinists

00:19:15,760 --> 00:19:20,160
so just to explain the pipeline i'm

00:19:19,360 --> 00:19:22,960
going to show

00:19:20,160 --> 00:19:23,679
kind of a demo on how we're picturing

00:19:22,960 --> 00:19:25,840
this working

00:19:23,679 --> 00:19:27,840
if a human was doing something on this

00:19:25,840 --> 00:19:30,240
site

00:19:27,840 --> 00:19:30,960
so here we're looking at the same site a

00:19:30,240 --> 00:19:33,200
video of me

00:19:30,960 --> 00:19:34,880
editing it earlier we can see at this

00:19:33,200 --> 00:19:36,880
point it's called rush site install

00:19:34,880 --> 00:19:39,280
and we create a pull request to change

00:19:36,880 --> 00:19:41,919
it to be called my site

00:19:39,280 --> 00:19:43,440
and we can see the merge request has all

00:19:41,919 --> 00:19:44,799
the tests passed

00:19:43,440 --> 00:19:47,280
which means we can click the merge

00:19:44,799 --> 00:19:49,200
button as we did and then we can see

00:19:47,280 --> 00:19:51,760
that there is a pipeline starting

00:19:49,200 --> 00:19:52,799
and we're expecting expecting this

00:19:51,760 --> 00:19:55,440
pipeline

00:19:52,799 --> 00:19:56,640
to deploy this change all the way to the

00:19:55,440 --> 00:19:58,880
production server

00:19:56,640 --> 00:20:00,559
all the way on the internet and

00:19:58,880 --> 00:20:02,799
hopefully that deploy will

00:20:00,559 --> 00:20:05,039
then change our site name so we can see

00:20:02,799 --> 00:20:07,120
here that the deploy is finished

00:20:05,039 --> 00:20:08,640
there was a change imported in config

00:20:07,120 --> 00:20:12,400
about

00:20:08,640 --> 00:20:15,280
most likely the site name and so let's

00:20:12,400 --> 00:20:17,520
jump over to our site here and we can

00:20:15,280 --> 00:20:21,760
refresh the front page

00:20:17,520 --> 00:20:24,799
and it's changed its name to my site

00:20:21,760 --> 00:20:26,320
so there was no human intervention

00:20:24,799 --> 00:20:29,520
required to deploy this

00:20:26,320 --> 00:20:31,440
that's a very good start our next step

00:20:29,520 --> 00:20:33,200
now is automating the update of drupal

00:20:31,440 --> 00:20:37,679
core

00:20:33,200 --> 00:20:42,000
so this project is using composer

00:20:37,679 --> 00:20:45,120
uh for managing its dependencies so for

00:20:42,000 --> 00:20:46,080
uh finding and updating new versions

00:20:45,120 --> 00:20:50,080
we're going to

00:20:46,080 --> 00:20:50,080
use the service linus.io

00:20:50,159 --> 00:20:53,200
so in here we see what we saw earlier it

00:20:52,480 --> 00:20:56,000
was

00:20:53,200 --> 00:20:56,960
running an old version of drupal and

00:20:56,000 --> 00:20:59,600
there's a new

00:20:56,960 --> 00:21:01,440
security release available and in

00:20:59,600 --> 00:21:03,919
violinist style we can

00:21:01,440 --> 00:21:05,200
just add our project in there and tell

00:21:03,919 --> 00:21:06,799
it to

00:21:05,200 --> 00:21:08,400
monitor it and see if there's any

00:21:06,799 --> 00:21:11,520
updates and then

00:21:08,400 --> 00:21:13,679
of course update it for us so what we're

00:21:11,520 --> 00:21:15,280
expecting now is violinist.io to pick

00:21:13,679 --> 00:21:16,799
this up and then create a merge request

00:21:15,280 --> 00:21:18,400
for us

00:21:16,799 --> 00:21:20,480
and that's happened at least in this

00:21:18,400 --> 00:21:24,159
video so we jump back to

00:21:20,480 --> 00:21:26,559
gitlab here and we can see there's a

00:21:24,159 --> 00:21:27,360
merge request here that is security

00:21:26,559 --> 00:21:32,400
related

00:21:27,360 --> 00:21:32,400
it's a very good step number two

00:21:37,760 --> 00:21:42,559
and now i'm trying to go to the next

00:21:39,600 --> 00:21:42,559
video okay

00:21:42,840 --> 00:21:48,640
and as we saw

00:21:46,080 --> 00:21:49,120
earlier when we clicked the button merge

00:21:48,640 --> 00:21:51,840
it

00:21:49,120 --> 00:21:53,280
would automatically trigger a deploy to

00:21:51,840 --> 00:21:55,039
the production server but

00:21:53,280 --> 00:21:57,440
clicking a button is the very definition

00:21:55,039 --> 00:21:59,840
of manual clicking things we don't want

00:21:57,440 --> 00:22:02,320
that so to automate this

00:21:59,840 --> 00:22:02,960
we've added a gitlab ci step that is

00:22:02,320 --> 00:22:05,840
going to

00:22:02,960 --> 00:22:07,120
automatically enable automatic merging

00:22:05,840 --> 00:22:08,559
for us

00:22:07,120 --> 00:22:10,159
so right now we're looking at that

00:22:08,559 --> 00:22:11,520
running and we can see now that all of a

00:22:10,159 --> 00:22:15,360
sudden it's now

00:22:11,520 --> 00:22:19,200
set to be merged automatically and that

00:22:15,360 --> 00:22:21,760
is based on we have defined a rule that

00:22:19,200 --> 00:22:23,679
if it's a security update from violinist

00:22:21,760 --> 00:22:27,600
we want

00:22:23,679 --> 00:22:29,679
automatic merge requests to be enabled

00:22:27,600 --> 00:22:31,919
so automatic merging of merge requests

00:22:29,679 --> 00:22:37,919
be enabled

00:22:31,919 --> 00:22:37,919
so now that automatic merging is enabled

00:22:39,039 --> 00:22:42,400
you want to see the next video

00:22:43,280 --> 00:22:47,600
uh we now expect after it will merge

00:22:46,720 --> 00:22:49,600
automatically

00:22:47,600 --> 00:22:51,360
that also the deploy will happen

00:22:49,600 --> 00:22:52,799
automatically

00:22:51,360 --> 00:22:54,640
and all of that without clicking

00:22:52,799 --> 00:22:55,679
anything so we can see here it was

00:22:54,640 --> 00:22:59,039
merged because the

00:22:55,679 --> 00:23:01,120
automatic merge was enabled and but as a

00:22:59,039 --> 00:23:02,559
consequence it also started the deploy

00:23:01,120 --> 00:23:04,880
job

00:23:02,559 --> 00:23:06,559
and this should get automatically now

00:23:04,880 --> 00:23:08,240
deployed to our production server and

00:23:06,559 --> 00:23:09,200
we're going to see how that goes here we

00:23:08,240 --> 00:23:12,880
are back at the

00:23:09,200 --> 00:23:15,360
production server and

00:23:12,880 --> 00:23:16,320
there we go here is the live site

00:23:15,360 --> 00:23:19,440
updated

00:23:16,320 --> 00:23:21,120
to the latest version of drupal and

00:23:19,440 --> 00:23:22,240
there was no human intervention

00:23:21,120 --> 00:23:24,960
whatsoever

00:23:22,240 --> 00:23:25,600
and of course granted in this demo there

00:23:24,960 --> 00:23:28,720
was one

00:23:25,600 --> 00:23:32,080
human intervention and it was me

00:23:28,720 --> 00:23:34,799
adding the project to violinist io but

00:23:32,080 --> 00:23:36,720
of course if a security update were to

00:23:34,799 --> 00:23:40,559
come out next wednesday for example

00:23:36,720 --> 00:23:43,679
i could be asleep and

00:23:40,559 --> 00:23:47,360
in the meantime my live environment

00:23:43,679 --> 00:23:49,840
would be updated with the latest version

00:23:47,360 --> 00:23:52,240
with the proper commits in place and all

00:23:49,840 --> 00:23:55,840
the integration tests run on the proper

00:23:52,240 --> 00:23:58,000
deployment run so

00:23:55,840 --> 00:24:00,640
very exciting to see what happened in

00:23:58,000 --> 00:24:00,640
the background

00:24:00,720 --> 00:24:04,559
we can see here at violinists that while

00:24:03,679 --> 00:24:06,080
i was talking

00:24:04,559 --> 00:24:08,320
it found out there was one update

00:24:06,080 --> 00:24:10,720
available

00:24:08,320 --> 00:24:12,960
so now we are expecting this to create a

00:24:10,720 --> 00:24:15,039
merge request

00:24:12,960 --> 00:24:16,559
seemingly it didn't do that but that's

00:24:15,039 --> 00:24:20,559
only because

00:24:16,559 --> 00:24:23,520
it actually did do that and it was

00:24:20,559 --> 00:24:25,840
enabled automatic merge on it and it was

00:24:23,520 --> 00:24:28,240
automatically merged

00:24:25,840 --> 00:24:30,320
and as we are speaking actually it's

00:24:28,240 --> 00:24:33,200
being deployed

00:24:30,320 --> 00:24:34,320
and now it's done deploying so very

00:24:33,200 --> 00:24:37,440
exciting

00:24:34,320 --> 00:24:41,360
let's go back to this one and see

00:24:37,440 --> 00:24:44,480
what version of drupal we're now using

00:24:41,360 --> 00:24:48,799
and we are now up to date

00:24:44,480 --> 00:24:48,799
with no human intervention whatsoever

00:24:49,120 --> 00:24:57,120
so with that relief

00:24:52,159 --> 00:24:57,120
that it all worked let's jump back here

00:24:59,440 --> 00:25:03,120
and i will enable some captions

00:25:06,799 --> 00:25:12,640
and let's uh summarize uh

00:25:10,320 --> 00:25:14,720
what we saw in the demo so in the demo

00:25:12,640 --> 00:25:15,520
we automated all of the steps that we

00:25:14,720 --> 00:25:17,840
want

00:25:15,520 --> 00:25:19,279
we now have automated discovery this

00:25:17,840 --> 00:25:21,679
happens automatically by

00:25:19,279 --> 00:25:23,600
a very friendly robot called violinist

00:25:21,679 --> 00:25:24,960
and then there is the patching it's also

00:25:23,600 --> 00:25:28,080
part of the same process

00:25:24,960 --> 00:25:30,159
and the same friendly robot violinist

00:25:28,080 --> 00:25:31,600
and then there is the deployment so we

00:25:30,159 --> 00:25:33,760
took away the human element

00:25:31,600 --> 00:25:36,559
of clicking the merge button by

00:25:33,760 --> 00:25:38,720
automatically enabling the auto merge

00:25:36,559 --> 00:25:39,760
and lastly we have automated deployments

00:25:38,720 --> 00:25:42,559
in place

00:25:39,760 --> 00:25:45,200
when this automated merge has landed in

00:25:42,559 --> 00:25:48,640
the main branch

00:25:45,200 --> 00:25:50,640
so to summarize this talk in this talk

00:25:48,640 --> 00:25:53,120
we have looked at a simplified model of

00:25:50,640 --> 00:25:56,000
security updates in an application

00:25:53,120 --> 00:25:58,320
it consists of discovery patching and

00:25:56,000 --> 00:26:01,840
deployment

00:25:58,320 --> 00:26:04,880
and we have now achieved automation

00:26:01,840 --> 00:26:06,640
in all of these areas and this

00:26:04,880 --> 00:26:08,720
can in turn lead to a more secure

00:26:06,640 --> 00:26:11,120
application with less amount of work

00:26:08,720 --> 00:26:12,400
and it can lead to a shorter time frame

00:26:11,120 --> 00:26:15,600
for what we can call

00:26:12,400 --> 00:26:17,679
time to patch which drastically reduces

00:26:15,600 --> 00:26:20,480
the risk of a disclosed vulnerability to

00:26:17,679 --> 00:26:20,480
be exploited

00:26:20,880 --> 00:26:24,159
i'm going to show some example numbers

00:26:22,559 --> 00:26:26,159
here on the screen from a scenario

00:26:24,159 --> 00:26:27,919
where a company is doing manual security

00:26:26,159 --> 00:26:29,600
updates instead of automatic like we

00:26:27,919 --> 00:26:32,080
have seen so for example

00:26:29,600 --> 00:26:33,919
the discovery phase could be a person

00:26:32,080 --> 00:26:35,760
subscribing to security updates they

00:26:33,919 --> 00:26:38,000
might be asleep maybe

00:26:35,760 --> 00:26:39,440
there's a six hour delay for for them to

00:26:38,000 --> 00:26:40,400
discover it and then there's the

00:26:39,440 --> 00:26:42,320
patching phase

00:26:40,400 --> 00:26:43,919
maybe they're not in front of a computer

00:26:42,320 --> 00:26:45,120
maybe they have to be within the company

00:26:43,919 --> 00:26:47,120
network

00:26:45,120 --> 00:26:48,720
maybe they have to run an extensive test

00:26:47,120 --> 00:26:50,960
seat or something like that maybe

00:26:48,720 --> 00:26:52,880
there's a one-hour delay there as well

00:26:50,960 --> 00:26:54,559
and the deployment phase could be for

00:26:52,880 --> 00:26:55,440
example someone else is in charge of

00:26:54,559 --> 00:26:56,960
deployments

00:26:55,440 --> 00:26:58,960
and they might not be in front of the

00:26:56,960 --> 00:27:01,360
computer and maybe there's

00:26:58,960 --> 00:27:02,880
a one-hour delay there as well well and

00:27:01,360 --> 00:27:04,240
all of a sudden we have a total of eight

00:27:02,880 --> 00:27:06,240
hours delay and this

00:27:04,240 --> 00:27:08,080
in some cases can be enough to assume

00:27:06,240 --> 00:27:09,039
your system is compromised in the worst

00:27:08,080 --> 00:27:11,919
cases

00:27:09,039 --> 00:27:13,279
and in some cases this can also involve

00:27:11,919 --> 00:27:16,640
somewhere between one and

00:27:13,279 --> 00:27:18,240
four hours of engineer time and here are

00:27:16,640 --> 00:27:20,799
some example numbers from a company

00:27:18,240 --> 00:27:22,960
using automation the discovery phase

00:27:20,799 --> 00:27:25,440
i've actually seen violinist.io

00:27:22,960 --> 00:27:26,960
creating merge requests hours before an

00:27:25,440 --> 00:27:28,559
announcement came because the release

00:27:26,960 --> 00:27:32,840
itself was available

00:27:28,559 --> 00:27:35,919
but let's say there are 15 minutes

00:27:32,840 --> 00:27:38,720
of 15 minutes uh delay

00:27:35,919 --> 00:27:39,840
before you get the automated discovery

00:27:38,720 --> 00:27:41,520
then there's the patching

00:27:39,840 --> 00:27:42,880
this is already in progress as part of

00:27:41,520 --> 00:27:44,640
the discovery so there's

00:27:42,880 --> 00:27:46,480
zero minutes and then there's the

00:27:44,640 --> 00:27:49,120
deployment could vary

00:27:46,480 --> 00:27:50,880
based on how your pipelines are set up

00:27:49,120 --> 00:27:54,000
but let's say 30 minutes and

00:27:50,880 --> 00:27:55,120
at least in total less than one hour and

00:27:54,000 --> 00:27:58,000
the best part

00:27:55,120 --> 00:27:58,559
of course zero hours of engineer time

00:27:58,000 --> 00:28:02,320
and

00:27:58,559 --> 00:28:06,399
zero clicks so this is

00:28:02,320 --> 00:28:09,520
uh to me why this is such a no-brainer

00:28:06,399 --> 00:28:11,360
and more secure applications

00:28:09,520 --> 00:28:13,520
less tedious work less unbelievable

00:28:11,360 --> 00:28:15,520
hours more happy clients happier

00:28:13,520 --> 00:28:16,880
employees happier wrapper management all

00:28:15,520 --> 00:28:18,399
these things

00:28:16,880 --> 00:28:20,240
now there are several solutions

00:28:18,399 --> 00:28:22,880
providing this for you today

00:28:20,240 --> 00:28:23,520
and in my very very subjective opinion

00:28:22,880 --> 00:28:26,399
the best one

00:28:23,520 --> 00:28:27,520
is violinist.io i'm going to wrap up

00:28:26,399 --> 00:28:30,559
this presentation

00:28:27,520 --> 00:28:32,799
with listing a few points that

00:28:30,559 --> 00:28:33,919
hopefully will convince you to choose

00:28:32,799 --> 00:28:35,679
violinist

00:28:33,919 --> 00:28:36,960
and i will just highlight a few of them

00:28:35,679 --> 00:28:38,720
is that violins support

00:28:36,960 --> 00:28:40,640
all major version control system

00:28:38,720 --> 00:28:42,000
providers including cell phones at

00:28:40,640 --> 00:28:44,559
gitlab

00:28:42,000 --> 00:28:46,320
balance this native php and composer

00:28:44,559 --> 00:28:48,320
tool not a general update tool

00:28:46,320 --> 00:28:50,000
and violinist has first class support

00:28:48,320 --> 00:28:51,200
for drupal and for drupal security

00:28:50,000 --> 00:28:52,880
updates

00:28:51,200 --> 00:28:54,559
i've also included some links here in

00:28:52,880 --> 00:28:54,960
the resources that you can click on if

00:28:54,559 --> 00:28:57,520
you

00:28:54,960 --> 00:28:58,000
check out the slides afterwards and then

00:28:57,520 --> 00:29:01,600
i will just

00:28:58,000 --> 00:29:04,559
say thank you and if i

00:29:01,600 --> 00:29:07,840
have one minute's time maybe to answer

00:29:04,559 --> 00:29:07,840
some questions i will look through it

00:29:09,919 --> 00:29:14,640
okay let's see maybe one question

00:29:17,520 --> 00:29:21,760
sour beer yes mike o'hara i agree

00:29:23,279 --> 00:29:27,679
it sounds too good to be true what's the

00:29:24,960 --> 00:29:31,200
catch there is no catch

00:29:27,679 --> 00:29:31,200
great answer from me there

00:29:34,799 --> 00:29:37,760
okay i can't

00:29:39,279 --> 00:29:42,880
i can't find any questions so with that

00:29:42,159 --> 00:29:44,720
all

00:29:42,880 --> 00:29:46,240
my time is also up so i will just say

00:29:44,720 --> 00:29:49,520
thank you so much for

00:29:46,240 --> 00:29:51,039
listening to this and just send me a

00:29:49,520 --> 00:29:53,039
message or an email if you have any

00:29:51,039 --> 00:29:55,840
question whatsoever

00:29:53,039 --> 00:29:55,840

YouTube URL: https://www.youtube.com/watch?v=9B-aseyP21s


