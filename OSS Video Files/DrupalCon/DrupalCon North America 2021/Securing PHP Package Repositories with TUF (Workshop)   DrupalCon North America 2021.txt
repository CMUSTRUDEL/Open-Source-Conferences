Title: Securing PHP Package Repositories with TUF (Workshop)   DrupalCon North America 2021
Publication date: 2021-05-27
Playlist: DrupalCon North America 2021
Description: 
	Learn how the community can use TUF to secure end-users of PHP package repositories even if the repositories are eventually breached.
Captions: 
	00:00:04,400 --> 00:00:08,720
okay

00:00:05,120 --> 00:00:11,120
i think we've just hit um quarter past

00:00:08,720 --> 00:00:12,880
so we'll go ahead and start the session

00:00:11,120 --> 00:00:14,240
so um

00:00:12,880 --> 00:00:16,160
good day to everyone thanks for joining

00:00:14,240 --> 00:00:18,720
us my name's joshua luck

00:00:16,160 --> 00:00:19,920
i am a software engineer at vmware

00:00:18,720 --> 00:00:23,439
working in the open source

00:00:19,920 --> 00:00:24,400
technology center with me today is

00:00:23,439 --> 00:00:26,720
marina moore

00:00:24,400 --> 00:00:28,720
who is a phd student at nyu in the

00:00:26,720 --> 00:00:31,359
secure assistance lab

00:00:28,720 --> 00:00:32,160
and um we were supposed to be joined by

00:00:31,359 --> 00:00:34,480
trishank

00:00:32,160 --> 00:00:36,079
karthik koopasamy but unfortunately he

00:00:34,480 --> 00:00:36,960
wasn't able to make it today so i will

00:00:36,079 --> 00:00:39,600
be trying to

00:00:36,960 --> 00:00:40,079
present his content with uh less of the

00:00:39,600 --> 00:00:42,840
charm

00:00:40,079 --> 00:00:44,559
and wit but hopefully as much of the

00:00:42,840 --> 00:00:47,280
accuracy

00:00:44,559 --> 00:00:49,200
so what are we here to talk about today

00:00:47,280 --> 00:00:51,440
we're here to talk about

00:00:49,200 --> 00:00:53,520
securing content repositories uh with

00:00:51,440 --> 00:00:54,800
stuff or package repositories as that's

00:00:53,520 --> 00:00:57,840
like title says

00:00:54,800 --> 00:00:59,840
um so what is what is the problem that

00:00:57,840 --> 00:01:02,079
we're trying to solve here

00:00:59,840 --> 00:01:02,879
part of the problem is that our

00:01:02,079 --> 00:01:04,640
computers

00:01:02,879 --> 00:01:06,479
are pulling content from a variety of

00:01:04,640 --> 00:01:08,000
sources uh they're usually doing that in

00:01:06,479 --> 00:01:10,840
a semi-automated fashion

00:01:08,000 --> 00:01:12,400
without we're well with little no user

00:01:10,840 --> 00:01:14,960
interaction um

00:01:12,400 --> 00:01:16,080
so as software engineers as developers

00:01:14,960 --> 00:01:18,159
um we have

00:01:16,080 --> 00:01:19,119
our operating systems app store dev

00:01:18,159 --> 00:01:20,640
tooling

00:01:19,119 --> 00:01:22,960
probably one of our package manager

00:01:20,640 --> 00:01:24,799
ecosystems um

00:01:22,960 --> 00:01:26,000
for reusable components we'll have

00:01:24,799 --> 00:01:28,000
containers configuration

00:01:26,000 --> 00:01:30,240
management and all sorts going on in our

00:01:28,000 --> 00:01:32,560
machine that's all trying to pull

00:01:30,240 --> 00:01:34,560
content from remote repositories and

00:01:32,560 --> 00:01:38,159
keep you up to date

00:01:34,560 --> 00:01:39,920
um and the way the state of the art way

00:01:38,159 --> 00:01:42,399
to get those that content into those

00:01:39,920 --> 00:01:44,479
repositories uh is to use a robot

00:01:42,399 --> 00:01:45,840
so we like to have robots do borrow and

00:01:44,479 --> 00:01:48,960
automated repetitive

00:01:45,840 --> 00:01:51,119
tasks um and we entrust those robots

00:01:48,960 --> 00:01:52,159
to do much of our content publishing and

00:01:51,119 --> 00:01:55,200
this is really

00:01:52,159 --> 00:01:56,640
a good thing uh robots will retrieve the

00:01:55,200 --> 00:02:00,000
key from a storage system

00:01:56,640 --> 00:02:01,200
um sign a release and uh

00:02:00,000 --> 00:02:03,600
publish that release to a content

00:02:01,200 --> 00:02:05,840
repository with little to no

00:02:03,600 --> 00:02:07,360
uh human interaction in the best case

00:02:05,840 --> 00:02:08,399
and this is brilliant it gives us a

00:02:07,360 --> 00:02:12,080
single auditable

00:02:08,399 --> 00:02:13,520
point of contact for understanding uh

00:02:12,080 --> 00:02:17,840
what's happened in the system and it

00:02:13,520 --> 00:02:21,440
removes uh the majority of human error

00:02:17,840 --> 00:02:25,120
but the state of the art

00:02:21,440 --> 00:02:28,959
today is really still not good enough

00:02:25,120 --> 00:02:31,280
um we we've developed this uh

00:02:28,959 --> 00:02:32,959
trend of devops and what we really need

00:02:31,280 --> 00:02:34,080
is to insert some security in there and

00:02:32,959 --> 00:02:37,040
have dev set ups

00:02:34,080 --> 00:02:38,800
so we know that malicious parties can

00:02:37,040 --> 00:02:40,879
insert themselves into this process and

00:02:38,800 --> 00:02:43,280
even non-malicious parties but

00:02:40,879 --> 00:02:45,040
um you know accidents happen developer

00:02:43,280 --> 00:02:47,360
error is well understood to be

00:02:45,040 --> 00:02:48,840
a problem so what do we do when

00:02:47,360 --> 00:02:51,599
something goes wrong with this

00:02:48,840 --> 00:02:53,840
automation

00:02:51,599 --> 00:02:54,920
and of course the situation is much

00:02:53,840 --> 00:02:58,480
worse for

00:02:54,920 --> 00:03:02,959
non-state-of-the-art systems and

00:02:58,480 --> 00:03:06,560
it's easy to forget but especially

00:03:02,959 --> 00:03:08,159
as open source folks we um

00:03:06,560 --> 00:03:10,000
we can forget that there's a lot of

00:03:08,159 --> 00:03:11,360
systems out there that are

00:03:10,000 --> 00:03:14,879
using software engineering practices

00:03:11,360 --> 00:03:18,640
from a long time ago

00:03:14,879 --> 00:03:21,599
so um just how real is this problem

00:03:18,640 --> 00:03:22,959
um and what exactly are some of these

00:03:21,599 --> 00:03:24,000
problems like you know the previous

00:03:22,959 --> 00:03:26,480
slide had a

00:03:24,000 --> 00:03:28,000
uh an ominous looking figure in the

00:03:26,480 --> 00:03:29,120
background but

00:03:28,000 --> 00:03:30,640
what the sort of things that can go

00:03:29,120 --> 00:03:32,480
wrong well of course we've got some

00:03:30,640 --> 00:03:33,519
horror stories just to make sure that

00:03:32,480 --> 00:03:36,080
everyone

00:03:33,519 --> 00:03:37,599
is uh as frightened about this as we are

00:03:36,080 --> 00:03:40,159
before we start to talk about

00:03:37,599 --> 00:03:41,360
how we propose to solve the problem so

00:03:40,159 --> 00:03:45,200
the first theory story

00:03:41,360 --> 00:03:47,760
is that um in 2012

00:03:45,200 --> 00:03:48,480
uh there was a piece of malware called

00:03:47,760 --> 00:03:52,239
flame

00:03:48,480 --> 00:03:55,920
and um this was a

00:03:52,239 --> 00:03:57,680
very sophisticated piece of malware it

00:03:55,920 --> 00:03:59,200
was able to avoid detection for a long

00:03:57,680 --> 00:04:00,720
time partly because it was

00:03:59,200 --> 00:04:02,319
fairly targeted but partly because they

00:04:00,720 --> 00:04:05,280
had done a lot of clever things

00:04:02,319 --> 00:04:07,680
um one of which was that the malicious

00:04:05,280 --> 00:04:09,120
programs in question were signed by

00:04:07,680 --> 00:04:11,439
certificates which made them appear to

00:04:09,120 --> 00:04:12,879
originate from microsoft this is

00:04:11,439 --> 00:04:14,239
a good way to avoid detection by

00:04:12,879 --> 00:04:16,959
appearing to be software written by the

00:04:14,239 --> 00:04:21,199
operating system vendor

00:04:16,959 --> 00:04:24,720
and they done a bunch of

00:04:21,199 --> 00:04:28,320
clever legwork to

00:04:24,720 --> 00:04:29,680
understand how to signed

00:04:28,320 --> 00:04:31,120
i also appeared to be from microsoft

00:04:29,680 --> 00:04:33,280
even though clearly this software was

00:04:31,120 --> 00:04:35,120
not developed by microsoft so they had

00:04:33,280 --> 00:04:36,880
found that a piece of microsoft software

00:04:35,120 --> 00:04:38,479
uh the terminal server software

00:04:36,880 --> 00:04:40,320
had a licensing mechanism which would

00:04:38,479 --> 00:04:43,360
issue a certificate to say you know

00:04:40,320 --> 00:04:47,680
just put this uh entity is

00:04:43,360 --> 00:04:47,680
able to use this software and um

00:04:48,000 --> 00:04:51,360
this licensing this certificate issuing

00:04:50,080 --> 00:04:53,199
mechanism uh

00:04:51,360 --> 00:04:55,040
was erroneously granting code signing

00:04:53,199 --> 00:04:56,000
privileges as well as the usual

00:04:55,040 --> 00:04:59,199
privileges to

00:04:56,000 --> 00:05:02,479
indicate that a license was um

00:04:59,199 --> 00:05:05,199
granted and so the

00:05:02,479 --> 00:05:06,000
uh the attackers leveraged this and a

00:05:05,199 --> 00:05:08,880
very novel

00:05:06,000 --> 00:05:10,400
um what is called a collision attack and

00:05:08,880 --> 00:05:11,440
this is a type of attack against a

00:05:10,400 --> 00:05:13,759
hashing algorithm

00:05:11,440 --> 00:05:15,039
which um where you where you feed it

00:05:13,759 --> 00:05:16,479
some different input and generate the

00:05:15,039 --> 00:05:18,160
same output

00:05:16,479 --> 00:05:19,840
and the hashing algorithm in question

00:05:18,160 --> 00:05:22,160
mg5 was uh

00:05:19,840 --> 00:05:23,039
theoretically susceptible to this at the

00:05:22,160 --> 00:05:26,479
time but

00:05:23,039 --> 00:05:26,960
this was a very prominent example of

00:05:26,479 --> 00:05:29,120
this

00:05:26,960 --> 00:05:30,560
technique being used in practice and

00:05:29,120 --> 00:05:33,759
they were able to use this

00:05:30,560 --> 00:05:35,039
uh collision attack to manipulate the

00:05:33,759 --> 00:05:37,680
certificate

00:05:35,039 --> 00:05:38,720
to prolong the life cycle and to

00:05:37,680 --> 00:05:40,000
increase the

00:05:38,720 --> 00:05:41,440
places that this could be used to make

00:05:40,000 --> 00:05:42,479
it much more useful for the malware

00:05:41,440 --> 00:05:43,919
officers

00:05:42,479 --> 00:05:46,160
and then the other clever thing they did

00:05:43,919 --> 00:05:48,400
is that they uh used this

00:05:46,160 --> 00:05:49,360
certificate to perform them or and some

00:05:48,400 --> 00:05:50,880
other techniques to form a

00:05:49,360 --> 00:05:54,000
man-in-the-middle attack against

00:05:50,880 --> 00:05:55,919
the windows update system itself so you

00:05:54,000 --> 00:05:58,479
had software signed by microsoft

00:05:55,919 --> 00:05:59,120
being uh appearing to be signed by

00:05:58,479 --> 00:06:00,560
microsoft

00:05:59,120 --> 00:06:02,639
being shared by microsoft's update

00:06:00,560 --> 00:06:03,360
mechanism and that's how this software

00:06:02,639 --> 00:06:05,520
propagated

00:06:03,360 --> 00:06:08,720
uh amongst other systems so it's a

00:06:05,520 --> 00:06:10,319
really clever sophisticated attack

00:06:08,720 --> 00:06:11,919
what lessons do you think we might take

00:06:10,319 --> 00:06:16,080
away from this well um

00:06:11,919 --> 00:06:18,479
for me the the big ones are that

00:06:16,080 --> 00:06:19,680
um managing security keys is actually

00:06:18,479 --> 00:06:22,800
quite difficult

00:06:19,680 --> 00:06:25,840
even for experts and the mistakes

00:06:22,800 --> 00:06:28,160
happen uh and

00:06:25,840 --> 00:06:30,319
we need to have a plan for dealing with

00:06:28,160 --> 00:06:33,199
these kinds of mistakes

00:06:30,319 --> 00:06:33,759
um so our next scary story is to talk

00:06:33,199 --> 00:06:37,039
about

00:06:33,759 --> 00:06:40,160
c-cleaner this is a utility for

00:06:37,039 --> 00:06:43,840
cleaning up window systems

00:06:40,160 --> 00:06:46,840
and in 2018 so a few years later

00:06:43,840 --> 00:06:48,160
it was discovered to have a back door

00:06:46,840 --> 00:06:50,720
and

00:06:48,160 --> 00:06:53,120
uh somewhere in the order of 2.2 million

00:06:50,720 --> 00:06:56,960
downloads of this corrupted version were

00:06:53,120 --> 00:06:59,120
distributed um and

00:06:56,960 --> 00:07:00,639
a relatively small number of those 1.65

00:06:59,120 --> 00:07:03,440
million uh

00:07:00,639 --> 00:07:04,240
phoned home so this malicious software

00:07:03,440 --> 00:07:06,400
installed on

00:07:04,240 --> 00:07:07,680
users computers was connecting to a

00:07:06,400 --> 00:07:09,360
server on the internet

00:07:07,680 --> 00:07:11,120
um but there was clearly some kind of

00:07:09,360 --> 00:07:12,319
algorithm going on for it to decide

00:07:11,120 --> 00:07:15,680
whether to connect

00:07:12,319 --> 00:07:16,479
uh back to its um what we call command

00:07:15,680 --> 00:07:19,919
and control

00:07:16,479 --> 00:07:21,039
server uh and then of those 1.65 million

00:07:19,919 --> 00:07:24,160
that phoned home

00:07:21,039 --> 00:07:25,759
only 40 of those were targeted with a

00:07:24,160 --> 00:07:28,880
second stage attack so

00:07:25,759 --> 00:07:29,599
the way modern malware is developed is

00:07:28,880 --> 00:07:31,360
that it

00:07:29,599 --> 00:07:33,360
effectively has an extensibility

00:07:31,360 --> 00:07:36,000
mechanism built in so it can reach out

00:07:33,360 --> 00:07:37,120
uh to a kind of control server to

00:07:36,000 --> 00:07:38,240
determine

00:07:37,120 --> 00:07:40,560
you know whether it should take any

00:07:38,240 --> 00:07:43,440
actions and it can also download updates

00:07:40,560 --> 00:07:45,280
uh and extension uh kind of plug-ins to

00:07:43,440 --> 00:07:48,479
extend the features of the thing

00:07:45,280 --> 00:07:49,440
and so 40 of those 1.65 million that

00:07:48,479 --> 00:07:51,440
phoned home

00:07:49,440 --> 00:07:52,800
were targeted with a second stage and

00:07:51,440 --> 00:07:55,199
this resulted in

00:07:52,800 --> 00:07:57,120
around 11 kind of high-tech it companies

00:07:55,199 --> 00:07:58,560
being infiltrated

00:07:57,120 --> 00:08:01,199
and that's really significant that was a

00:07:58,560 --> 00:08:04,560
highly targeted attack with uh

00:08:01,199 --> 00:08:06,879
quite significant targets

00:08:04,560 --> 00:08:08,479
and the way they got into the ccleaner

00:08:06,879 --> 00:08:10,560
um

00:08:08,479 --> 00:08:12,800
systems is that they there are some

00:08:10,560 --> 00:08:15,120
leaked credentials that enabled the

00:08:12,800 --> 00:08:16,319
malicious party to access some remote

00:08:15,120 --> 00:08:17,680
desktop software on their build

00:08:16,319 --> 00:08:19,120
infrastructure

00:08:17,680 --> 00:08:21,360
and then they were really clever about

00:08:19,120 --> 00:08:22,960
it they only um

00:08:21,360 --> 00:08:24,319
used this remote access outside of the

00:08:22,960 --> 00:08:25,520
core working hours of the company that

00:08:24,319 --> 00:08:26,879
developed the software so they were less

00:08:25,520 --> 00:08:30,319
likely to be detected

00:08:26,879 --> 00:08:33,360
and they were able to uh propagate their

00:08:30,319 --> 00:08:36,159
attack and you know

00:08:33,360 --> 00:08:36,800
generate this uh highly targeted attack

00:08:36,159 --> 00:08:41,519
which was

00:08:36,800 --> 00:08:42,959
quite successful so what what lessons

00:08:41,519 --> 00:08:45,120
can we think can we take away from that

00:08:42,959 --> 00:08:48,959
one well i think a really

00:08:45,120 --> 00:08:53,360
um important lesson is that

00:08:48,959 --> 00:08:55,279
in software security we continually uh

00:08:53,360 --> 00:08:56,800
are kind of flummoxed by the fact that

00:08:55,279 --> 00:08:57,920
an attacker really only needs to find

00:08:56,800 --> 00:08:59,680
one for

00:08:57,920 --> 00:09:00,959
um and we have to be able to defend

00:08:59,680 --> 00:09:02,800
against multiple

00:09:00,959 --> 00:09:04,640
so in this instance you know some leaked

00:09:02,800 --> 00:09:06,880
credentials uh

00:09:04,640 --> 00:09:10,160
and um are publicly visible with my

00:09:06,880 --> 00:09:10,160
desktop system were all it took

00:09:11,040 --> 00:09:14,480
and of course it gets a little bit worse

00:09:12,959 --> 00:09:17,519
because it leads on to

00:09:14,480 --> 00:09:18,880
scary story number three in 2019

00:09:17,519 --> 00:09:21,839
one of the world's largest computer

00:09:18,880 --> 00:09:23,519
makers unwittingly installed malicious

00:09:21,839 --> 00:09:24,640
software on thousands of this customer's

00:09:23,519 --> 00:09:27,120
computer

00:09:24,640 --> 00:09:28,959
and it's highly suspected that the

00:09:27,120 --> 00:09:30,240
original compromise of jesus was through

00:09:28,959 --> 00:09:32,640
the c-cleaner

00:09:30,240 --> 00:09:34,240
attack the c-cleaner poisoned the well

00:09:32,640 --> 00:09:37,440
and enabled a very patient

00:09:34,240 --> 00:09:41,200
and sophisticated attacker to

00:09:37,440 --> 00:09:43,760
um do some more damage so half a million

00:09:41,200 --> 00:09:45,360
su systems were compromised 600 of those

00:09:43,760 --> 00:09:48,959
were targeted

00:09:45,360 --> 00:09:51,200
um so another kind of fairly targeted

00:09:48,959 --> 00:09:53,279
attack

00:09:51,200 --> 00:09:54,959
one of the interesting things about this

00:09:53,279 --> 00:09:55,920
attack is that the malicious file that

00:09:54,959 --> 00:09:59,040
was delivered

00:09:55,920 --> 00:10:01,120
was signed with a legitimate certificate

00:09:59,040 --> 00:10:02,160
it was delivered from an official asus

00:10:01,120 --> 00:10:04,800
update server

00:10:02,160 --> 00:10:05,600
so it had all the appearances of an

00:10:04,800 --> 00:10:09,040
authentic

00:10:05,600 --> 00:10:11,200
um piece of software exactly how

00:10:09,040 --> 00:10:14,000
uh the malicious certificate was

00:10:11,200 --> 00:10:17,040
attained it's not certain although

00:10:14,000 --> 00:10:18,640
the ccleaner kind of attack is

00:10:17,040 --> 00:10:20,160
expected to be how they got their foot

00:10:18,640 --> 00:10:22,480
in the door so to say

00:10:20,160 --> 00:10:24,079
um but one of the problems is run into

00:10:22,480 --> 00:10:25,920
is that this certificate was used to

00:10:24,079 --> 00:10:26,720
sign a lot of legitimate files and when

00:10:25,920 --> 00:10:29,680
i say a lot

00:10:26,720 --> 00:10:31,200
they were on the order uh of about 3 000

00:10:29,680 --> 00:10:33,839
files that were

00:10:31,200 --> 00:10:35,360
or you know 3 000 things were signed

00:10:33,839 --> 00:10:38,399
with this certificate

00:10:35,360 --> 00:10:40,480
so it was a really

00:10:38,399 --> 00:10:41,600
difficult situation to recover from if

00:10:40,480 --> 00:10:45,120
they just revoked

00:10:41,600 --> 00:10:46,720
that certificate there are 3 000 things

00:10:45,120 --> 00:10:48,320
that their customers are using that are

00:10:46,720 --> 00:10:51,839
suddenly invalidated by this

00:10:48,320 --> 00:10:53,120
certificate propagation um

00:10:51,839 --> 00:10:55,360
so what lessons can we take away from

00:10:53,120 --> 00:10:57,920
this one well

00:10:55,360 --> 00:10:59,519
i think clearly we learned that it's not

00:10:57,920 --> 00:11:02,640
enough just to sign

00:10:59,519 --> 00:11:06,320
software um and we also learn again that

00:11:02,640 --> 00:11:06,320
key management's really hard um

00:11:07,040 --> 00:11:10,480
and then scary story number four i'm not

00:11:08,560 --> 00:11:14,320
gonna go into too much detail on

00:11:10,480 --> 00:11:17,040
uh it's a very recent one and it was

00:11:14,320 --> 00:11:18,480
even more sophisticated than the

00:11:17,040 --> 00:11:21,120
previous three

00:11:18,480 --> 00:11:21,120
and uh

00:11:21,760 --> 00:11:25,760
it wouldn't strictly be solved by tough

00:11:24,640 --> 00:11:27,360
alone which is why i'm not going to go

00:11:25,760 --> 00:11:31,040
into too much detail but i think it

00:11:27,360 --> 00:11:32,959
indicates that these types of attack

00:11:31,040 --> 00:11:36,320
continue to happen and these

00:11:32,959 --> 00:11:42,959
sophisticated attackers continue to find

00:11:36,320 --> 00:11:45,600
effectively the gaps in the in the fence

00:11:42,959 --> 00:11:46,959
so when we start talking about um

00:11:45,600 --> 00:11:48,399
signing software and securing content

00:11:46,959 --> 00:11:50,800
repositories and things

00:11:48,399 --> 00:11:52,320
uh we are we often hear people say well

00:11:50,800 --> 00:11:55,279
why not just use tls so

00:11:52,320 --> 00:11:58,160
or when i just use gpg to sign a thing

00:11:55,279 --> 00:12:01,519
um tls is a fine protocol that

00:11:58,160 --> 00:12:04,000
um enables secure communication between

00:12:01,519 --> 00:12:05,680
two devices uh it's the little padlock

00:12:04,000 --> 00:12:07,519
on your browser when you're

00:12:05,680 --> 00:12:08,959
navigating the majority of the web

00:12:07,519 --> 00:12:10,000
nowadays which has been a real kind of

00:12:08,959 --> 00:12:14,000
uptick in

00:12:10,000 --> 00:12:17,200
um secure traffic but tls

00:12:14,000 --> 00:12:18,079
keys are stored in uh effectively on the

00:12:17,200 --> 00:12:19,440
server

00:12:18,079 --> 00:12:22,079
uh on one of the devices during the

00:12:19,440 --> 00:12:25,040
communication in memory

00:12:22,079 --> 00:12:25,360
and you know they sign uh automatically

00:12:25,040 --> 00:12:28,800
to

00:12:25,360 --> 00:12:31,680
when the communication is initiated and

00:12:28,800 --> 00:12:33,279
this is good but it's not going to stop

00:12:31,680 --> 00:12:34,800
a serious attacker it's

00:12:33,279 --> 00:12:36,399
kind of analogous to placing your key

00:12:34,800 --> 00:12:39,760
under the door

00:12:36,399 --> 00:12:41,760
um you've got the lock there but uh

00:12:39,760 --> 00:12:42,800
finding the key to get in is is fairly

00:12:41,760 --> 00:12:45,839
easy if you're

00:12:42,800 --> 00:12:49,120
um if you're knowledgeable or have

00:12:45,839 --> 00:12:52,560
time um gpg

00:12:49,120 --> 00:12:54,000
has its own set of problems uh

00:12:52,560 --> 00:12:56,560
one of which is that it's really

00:12:54,000 --> 00:12:59,040
difficult to use and um

00:12:56,560 --> 00:13:01,360
one of the things i i started referring

00:12:59,040 --> 00:13:02,639
to gpg as kind of a security toolbox

00:13:01,360 --> 00:13:04,480
there's a bunch of tools there but you

00:13:02,639 --> 00:13:06,079
still need to understand how those tools

00:13:04,480 --> 00:13:07,600
interplay and how to build a secure

00:13:06,079 --> 00:13:09,600
system with those tools

00:13:07,600 --> 00:13:10,959
so it's not just enough just to it's not

00:13:09,600 --> 00:13:12,639
enough just to sign some content with

00:13:10,959 --> 00:13:15,839
gpg you need to think about

00:13:12,639 --> 00:13:19,600
how do i securely distribute my

00:13:15,839 --> 00:13:21,360
gpg key anyone who's

00:13:19,600 --> 00:13:23,120
fairly involved in open source probably

00:13:21,360 --> 00:13:24,880
knows about the web of trust and there's

00:13:23,120 --> 00:13:26,720
been uh particularly over the covered

00:13:24,880 --> 00:13:28,720
period there's been a bunch of

00:13:26,720 --> 00:13:30,079
questions about how effective that

00:13:28,720 --> 00:13:32,000
system really is

00:13:30,079 --> 00:13:33,600
um you also need to be able to revoke

00:13:32,000 --> 00:13:37,760
keys uh

00:13:33,600 --> 00:13:39,600
define um trusted keys for your system

00:13:37,760 --> 00:13:42,000
and and even if you get all of that

00:13:39,600 --> 00:13:45,199
right uh simple signing of artifacts

00:13:42,000 --> 00:13:49,839
provides you some security properties

00:13:45,199 --> 00:13:53,040
but probably doesn't provide enough

00:13:49,839 --> 00:13:54,560
so what lesson can we learn from all of

00:13:53,040 --> 00:13:56,720
these horror stories

00:13:54,560 --> 00:13:58,160
well um tough has a really great

00:13:56,720 --> 00:14:00,560
security principle which is compromise

00:13:58,160 --> 00:14:02,240
resilience

00:14:00,560 --> 00:14:03,600
and this really is about two things

00:14:02,240 --> 00:14:06,720
which are indicated by this

00:14:03,600 --> 00:14:08,959
image it's about making ourselves

00:14:06,720 --> 00:14:10,000
a harder target so this is the notion of

00:14:08,959 --> 00:14:12,800
defense and depth

00:14:10,000 --> 00:14:14,560
and as you can see this castle's got a

00:14:12,800 --> 00:14:15,920
moat around the edge

00:14:14,560 --> 00:14:17,839
and it's actually got a castle around

00:14:15,920 --> 00:14:18,560
the edge as well so you can hide in your

00:14:17,839 --> 00:14:20,880
big castle

00:14:18,560 --> 00:14:22,639
on the inside and you can defend the

00:14:20,880 --> 00:14:26,800
exterior castle with your

00:14:22,639 --> 00:14:29,600
you know um sophisticated weaponry

00:14:26,800 --> 00:14:30,480
and someone who's trying to attack you

00:14:29,600 --> 00:14:34,240
in this castle

00:14:30,480 --> 00:14:35,440
they have to breach three defenses

00:14:34,240 --> 00:14:38,480
before they can

00:14:35,440 --> 00:14:42,000
do anything so

00:14:38,480 --> 00:14:44,800
um the other important lesson i think

00:14:42,000 --> 00:14:45,279
from the horror stories is that um we

00:14:44,800 --> 00:14:46,880
need to

00:14:45,279 --> 00:14:48,800
acknowledge that we cannot prevent a

00:14:46,880 --> 00:14:50,480
compromise we need to be able to

00:14:48,800 --> 00:14:52,399
mitigate the impact of a compromise so

00:14:50,480 --> 00:14:53,839
effectively we need to have a plan

00:14:52,399 --> 00:14:56,639
a mechanism for recovering from a

00:14:53,839 --> 00:14:57,279
compromise and to make these horror

00:14:56,639 --> 00:15:00,320
stories

00:14:57,279 --> 00:15:01,600
and my kind of lessons more concrete i'm

00:15:00,320 --> 00:15:03,360
going to hand over to my colleague

00:15:01,600 --> 00:15:06,399
marina who's going to

00:15:03,360 --> 00:15:08,160
talk to us about the solution great

00:15:06,399 --> 00:15:10,000
thank you

00:15:08,160 --> 00:15:11,199
so yeah now that we know that this is

00:15:10,000 --> 00:15:13,120
this is a big problem

00:15:11,199 --> 00:15:16,160
what do we do about it so if you go to

00:15:13,120 --> 00:15:18,800
the the next slide

00:15:16,160 --> 00:15:20,240
so i talked today about the update

00:15:18,800 --> 00:15:22,079
framework or tuff

00:15:20,240 --> 00:15:23,279
which is a framework for secure software

00:15:22,079 --> 00:15:25,519
updates

00:15:23,279 --> 00:15:27,760
um that we both work on that was really

00:15:25,519 --> 00:15:31,199
designed with this compromise resilience

00:15:27,760 --> 00:15:32,959
in mind it um

00:15:31,199 --> 00:15:34,639
it really focuses on key management and

00:15:32,959 --> 00:15:35,360
revocation as kind of first-class

00:15:34,639 --> 00:15:37,680
principles

00:15:35,360 --> 00:15:39,600
of the system in order to make sure that

00:15:37,680 --> 00:15:40,959
they are designed in from the beginning

00:15:39,600 --> 00:15:43,120
and it makes it as easy to use as

00:15:40,959 --> 00:15:45,440
possible while also providing

00:15:43,120 --> 00:15:46,880
all of these security principles and so

00:15:45,440 --> 00:15:50,079
i think i'll start by going into

00:15:46,880 --> 00:15:52,000
some of the principles behind tough and

00:15:50,079 --> 00:15:54,079
kind of its philosophy around

00:15:52,000 --> 00:15:55,120
how to secure the software distribution

00:15:54,079 --> 00:15:57,680
systems

00:15:55,120 --> 00:15:58,720
so if you go to the next slide the first

00:15:57,680 --> 00:16:00,320
principle

00:15:58,720 --> 00:16:01,839
is the idea of a separation of

00:16:00,320 --> 00:16:04,160
responsibilities

00:16:01,839 --> 00:16:05,040
um as as all the examples that joshua

00:16:04,160 --> 00:16:07,440
went over

00:16:05,040 --> 00:16:09,360
really illustrate if you only have a

00:16:07,440 --> 00:16:09,839
single source of truth a single source

00:16:09,360 --> 00:16:11,920
of

00:16:09,839 --> 00:16:13,440
information that can be compromised and

00:16:11,920 --> 00:16:15,040
if that happens you know then your whole

00:16:13,440 --> 00:16:16,880
system is compromised

00:16:15,040 --> 00:16:19,040
so instead what tough focus is on is

00:16:16,880 --> 00:16:20,560
this idea of separating

00:16:19,040 --> 00:16:22,160
the different responsibilities into

00:16:20,560 --> 00:16:23,920
different people to different computers

00:16:22,160 --> 00:16:26,160
to different keys

00:16:23,920 --> 00:16:27,519
so that um the compromise of any one of

00:16:26,160 --> 00:16:28,240
these things doesn't compromise the

00:16:27,519 --> 00:16:30,639
whole system

00:16:28,240 --> 00:16:32,480
and each person is only responsible for

00:16:30,639 --> 00:16:35,680
their subset of the system

00:16:32,480 --> 00:16:38,079
um and so if you go to the next slide

00:16:35,680 --> 00:16:39,440
the um the big way this this works in

00:16:38,079 --> 00:16:42,880
tough is through the use of

00:16:39,440 --> 00:16:44,639
four main roles the root role

00:16:42,880 --> 00:16:46,000
is like the root of trust for the whole

00:16:44,639 --> 00:16:48,000
system this is the

00:16:46,000 --> 00:16:49,279
um you know the most most important most

00:16:48,000 --> 00:16:52,720
secure

00:16:49,279 --> 00:16:54,800
system piece of the system and

00:16:52,720 --> 00:16:56,240
it's where this is the one thing you

00:16:54,800 --> 00:16:58,720
have to actually establish trust in and

00:16:56,240 --> 00:17:00,160
then from there you can chain trust

00:16:58,720 --> 00:17:02,560
and kind of bootstrap the trust for the

00:17:00,160 --> 00:17:04,480
rest of the system

00:17:02,560 --> 00:17:06,640
the next role is the timestamp role

00:17:04,480 --> 00:17:08,240
which provides a notion of timeliness

00:17:06,640 --> 00:17:10,240
and this notion of timeliness is really

00:17:08,240 --> 00:17:12,160
important when you look at

00:17:10,240 --> 00:17:14,240
key revocation and timeliness of

00:17:12,160 --> 00:17:16,079
information because

00:17:14,240 --> 00:17:17,600
the state of the repository today might

00:17:16,079 --> 00:17:18,480
not be the same state that it has

00:17:17,600 --> 00:17:20,079
tomorrow

00:17:18,480 --> 00:17:22,240
and you know if a compromise is

00:17:20,079 --> 00:17:23,360
discovered today

00:17:22,240 --> 00:17:25,600
or tomorrow or whatever you want to make

00:17:23,360 --> 00:17:27,120
sure that the signature of today is no

00:17:25,600 --> 00:17:28,000
longer valid and then the users can

00:17:27,120 --> 00:17:30,559
detect

00:17:28,000 --> 00:17:32,720
kind of that change in the state the

00:17:30,559 --> 00:17:35,200
snapshot role has kind of a similar

00:17:32,720 --> 00:17:36,400
idea of the idea of consistency to make

00:17:35,200 --> 00:17:37,840
sure that you see

00:17:36,400 --> 00:17:40,960
all the packages that are currently

00:17:37,840 --> 00:17:42,640
valid in a consistent state

00:17:40,960 --> 00:17:44,559
and finally the targets role is what

00:17:42,640 --> 00:17:46,400
provides the actual content integrity

00:17:44,559 --> 00:17:49,280
this is this is very similar to

00:17:46,400 --> 00:17:50,080
um to like the actual signature on the

00:17:49,280 --> 00:17:52,400
package

00:17:50,080 --> 00:17:53,360
which provides information about like

00:17:52,400 --> 00:17:56,480
that you know

00:17:53,360 --> 00:17:59,120
the secure hash or of the content itself

00:17:56,480 --> 00:18:01,840
and other information

00:17:59,120 --> 00:18:02,400
and this is the targets um using the

00:18:01,840 --> 00:18:03,919
idea of

00:18:02,400 --> 00:18:05,520
separation of responsibilities is

00:18:03,919 --> 00:18:07,280
actually not just one

00:18:05,520 --> 00:18:09,440
entity it's actually split into many

00:18:07,280 --> 00:18:11,039
different entities each of which sign

00:18:09,440 --> 00:18:13,600
the packages that they're responsible

00:18:11,039 --> 00:18:15,919
for so for example if your

00:18:13,600 --> 00:18:17,440
microsoft you might have one target

00:18:15,919 --> 00:18:19,760
responsible for like the microsoft

00:18:17,440 --> 00:18:21,360
office suite and another responsible for

00:18:19,760 --> 00:18:23,760
like the windows team but these would be

00:18:21,360 --> 00:18:24,400
separate entities just trusted for their

00:18:23,760 --> 00:18:27,840
own

00:18:24,400 --> 00:18:30,240
subset of the system so the next

00:18:27,840 --> 00:18:33,280
principle if you go to the next slide

00:18:30,240 --> 00:18:35,840
is the idea of threshold signatures

00:18:33,280 --> 00:18:38,240
so even within each of these separated

00:18:35,840 --> 00:18:39,840
roles and responsibilities

00:18:38,240 --> 00:18:41,520
there are cases when you'll want more

00:18:39,840 --> 00:18:43,280
than one

00:18:41,520 --> 00:18:45,679
you know set of verification on these

00:18:43,280 --> 00:18:47,120
files this is especially important for

00:18:45,679 --> 00:18:50,080
things like the root role

00:18:47,120 --> 00:18:51,600
which is a really um kind of security

00:18:50,080 --> 00:18:53,280
sensitive role where you really want to

00:18:51,600 --> 00:18:55,760
make sure

00:18:53,280 --> 00:18:56,640
that it is well protected and so this is

00:18:55,760 --> 00:18:58,400
done using

00:18:56,640 --> 00:18:59,760
threshold signatures and the idea here

00:18:58,400 --> 00:19:01,280
is that basically

00:18:59,760 --> 00:19:03,280
you have to have two different people in

00:19:01,280 --> 00:19:04,640
two different um you know two different

00:19:03,280 --> 00:19:07,760
cities two different continents

00:19:04,640 --> 00:19:10,640
both sign the same piece of metadata

00:19:07,760 --> 00:19:12,160
to provide the double security and this

00:19:10,640 --> 00:19:13,200
is really similar to

00:19:12,160 --> 00:19:14,559
you know the idea like you know those

00:19:13,200 --> 00:19:16,000
nuclear bunkers where you had the two

00:19:14,559 --> 00:19:17,919
different keys that were

00:19:16,000 --> 00:19:19,200
more than arms width apart as

00:19:17,919 --> 00:19:21,200
illustrated here

00:19:19,200 --> 00:19:23,200
so you'd require two people or a very

00:19:21,200 --> 00:19:26,799
clever one person with a

00:19:23,200 --> 00:19:27,919
with a long stick to um to churn both of

00:19:26,799 --> 00:19:30,240
them

00:19:27,919 --> 00:19:30,960
so if you go to the next slide our next

00:19:30,240 --> 00:19:34,160
principle

00:19:30,960 --> 00:19:36,080
is minimizing risk with offline keys

00:19:34,160 --> 00:19:38,640
this really goes back to the idea that

00:19:36,080 --> 00:19:38,960
um like in tls when those keys are cert

00:19:38,640 --> 00:19:41,760
are

00:19:38,960 --> 00:19:43,280
stored on servers the keys are only as

00:19:41,760 --> 00:19:44,640
protected as the server that they're

00:19:43,280 --> 00:19:47,600
stored on

00:19:44,640 --> 00:19:48,160
and so what we allow with taf and we

00:19:47,600 --> 00:19:52,080
encourage

00:19:48,160 --> 00:19:54,480
is for people to store their more

00:19:52,080 --> 00:19:56,320
security sensitive keys offline and the

00:19:54,480 --> 00:19:58,000
idea is that it's in it's on some device

00:19:56,320 --> 00:20:00,320
like a yuba key or

00:19:58,000 --> 00:20:01,280
some other external device and then

00:20:00,320 --> 00:20:02,880
that's never

00:20:01,280 --> 00:20:05,039
on the internet can be stored in a

00:20:02,880 --> 00:20:07,760
safety deposit box

00:20:05,039 --> 00:20:10,000
and an attacker wouldn't be able to get

00:20:07,760 --> 00:20:11,679
to that key without some actual

00:20:10,000 --> 00:20:13,360
like physically finding this device with

00:20:11,679 --> 00:20:14,880
the key on it which then makes it a lot

00:20:13,360 --> 00:20:18,320
harder for them to

00:20:14,880 --> 00:20:21,840
infiltrate your system from from afar

00:20:18,320 --> 00:20:21,840
if you go to the next slide

00:20:23,039 --> 00:20:26,480
um the final principle is this idea of

00:20:25,039 --> 00:20:28,960
delegations

00:20:26,480 --> 00:20:31,039
this is kind of how that separations of

00:20:28,960 --> 00:20:34,320
responsibilities is put together

00:20:31,039 --> 00:20:35,280
the idea is that instead of um instead

00:20:34,320 --> 00:20:36,720
of saying okay

00:20:35,280 --> 00:20:38,880
this is a signing key that you can use

00:20:36,720 --> 00:20:40,240
for any package ever you say this is a

00:20:38,880 --> 00:20:41,840
signing key that should be used for this

00:20:40,240 --> 00:20:43,280
particular package

00:20:41,840 --> 00:20:45,440
and this or this particular set of

00:20:43,280 --> 00:20:46,960
packages that

00:20:45,440 --> 00:20:49,520
you actually have control over and

00:20:46,960 --> 00:20:51,520
should be responsible for signing

00:20:49,520 --> 00:20:53,520
and the idea of this kind of tree of

00:20:51,520 --> 00:20:54,000
delegations that you can set up using

00:20:53,520 --> 00:20:57,440
tuff

00:20:54,000 --> 00:20:59,919
is that any one you know leaf of that

00:20:57,440 --> 00:21:02,159
tree any one person with a key

00:20:59,919 --> 00:21:03,600
if that key happens to be compromised

00:21:02,159 --> 00:21:05,520
then only the things that they're

00:21:03,600 --> 00:21:07,360
responsible for signing are compromised

00:21:05,520 --> 00:21:09,760
and that can't be used to kind of

00:21:07,360 --> 00:21:11,440
extend into an attack on any package

00:21:09,760 --> 00:21:13,280
that you might install

00:21:11,440 --> 00:21:16,400
and so it really kind of narrows the

00:21:13,280 --> 00:21:17,600
scope of any compromise going back to

00:21:16,400 --> 00:21:19,679
that idea

00:21:17,600 --> 00:21:22,080
of compromised resilience all right so

00:21:19,679 --> 00:21:23,679
if you go to the next slide

00:21:22,080 --> 00:21:25,200
how do we put this all together what

00:21:23,679 --> 00:21:28,000
what what yeah

00:21:25,200 --> 00:21:29,600
how does it actually work so we use all

00:21:28,000 --> 00:21:31,039
these principles to design kind of a

00:21:29,600 --> 00:21:33,600
basically a set of

00:21:31,039 --> 00:21:35,760
steps and principles to use in order to

00:21:33,600 --> 00:21:37,679
secure

00:21:35,760 --> 00:21:39,360
a distribution system a framework as we

00:21:37,679 --> 00:21:41,760
call it which kind of describes how you

00:21:39,360 --> 00:21:44,320
can use these principles in practice

00:21:41,760 --> 00:21:45,600
to make sure that um all of these things

00:21:44,320 --> 00:21:47,600
work together

00:21:45,600 --> 00:21:48,880
and there's also this focus on invisible

00:21:47,600 --> 00:21:50,480
usability so

00:21:48,880 --> 00:21:52,559
with all these principles with all these

00:21:50,480 --> 00:21:54,559
things happening behind the scenes

00:21:52,559 --> 00:21:56,720
it it can be a little bit complicated to

00:21:54,559 --> 00:21:58,159
get you know all the steps that happen

00:21:56,720 --> 00:21:59,919
but the beautiful thing about code is

00:21:58,159 --> 00:22:01,840
that we can write that code once

00:21:59,919 --> 00:22:02,960
and then people just have to run it and

00:22:01,840 --> 00:22:04,480
they don't have to understand every

00:22:02,960 --> 00:22:06,159
single detail of what's happening

00:22:04,480 --> 00:22:07,760
unless something goes wrong and if

00:22:06,159 --> 00:22:09,280
there's actually an attack

00:22:07,760 --> 00:22:11,039
and you know a malicious software or

00:22:09,280 --> 00:22:12,080
something like that they might notice

00:22:11,039 --> 00:22:13,280
that um

00:22:12,080 --> 00:22:15,600
there's a warning or that it won't

00:22:13,280 --> 00:22:17,919
install but unless that happens

00:22:15,600 --> 00:22:19,919
it just says okay you're verified go

00:22:17,919 --> 00:22:22,080
ahead and install

00:22:19,919 --> 00:22:23,679
and even on the developer side it's

00:22:22,080 --> 00:22:24,720
mostly just you know running a script

00:22:23,679 --> 00:22:28,240
and uploading

00:22:24,720 --> 00:22:30,559
a signature to attach to this metadata

00:22:28,240 --> 00:22:32,559
which is really as simple as possible

00:22:30,559 --> 00:22:35,440
with just a little bit of upfront

00:22:32,559 --> 00:22:39,039
configuration to decide those delegation

00:22:35,440 --> 00:22:40,559
trees and other kind of trusts set up

00:22:39,039 --> 00:22:42,080
for a lot more detail about how these

00:22:40,559 --> 00:22:44,080
things work and um

00:22:42,080 --> 00:22:45,360
what the actual steps to take to put

00:22:44,080 --> 00:22:47,360
these all together

00:22:45,360 --> 00:22:48,559
i encourage anyone interested to look at

00:22:47,360 --> 00:22:50,960
our specification

00:22:48,559 --> 00:22:53,039
which is linked here i'm happy to add

00:22:50,960 --> 00:22:55,440
that to chat or whatever as well

00:22:53,039 --> 00:22:56,320
um because it goes into the actual

00:22:55,440 --> 00:22:58,559
step-by-step

00:22:56,320 --> 00:22:59,440
of these are the things that you know

00:22:58,559 --> 00:23:00,880
these are the things that you must

00:22:59,440 --> 00:23:02,240
include in these different roles in

00:23:00,880 --> 00:23:03,760
these different pieces

00:23:02,240 --> 00:23:05,440
and this is the steps the client should

00:23:03,760 --> 00:23:07,280
do to actually verify

00:23:05,440 --> 00:23:08,880
all those things that you do because

00:23:07,280 --> 00:23:10,720
having all this stuff on one end is only

00:23:08,880 --> 00:23:14,000
useful if it's actually verified

00:23:10,720 --> 00:23:16,640
on the other end all right so if you go

00:23:14,000 --> 00:23:18,960
to the next slide

00:23:16,640 --> 00:23:20,720
next we're going to look at some some

00:23:18,960 --> 00:23:23,520
cases where this is actually been used

00:23:20,720 --> 00:23:25,039
in practice and some kind of lessons

00:23:23,520 --> 00:23:27,039
learned there and

00:23:25,039 --> 00:23:28,880
you know what this means for everyone

00:23:27,039 --> 00:23:31,600
here

00:23:28,880 --> 00:23:32,000
the first case study which i'll go over

00:23:31,600 --> 00:23:35,200
is

00:23:32,000 --> 00:23:38,559
obtain so if you go to the next slide

00:23:35,200 --> 00:23:42,000
the modern automobile is um

00:23:38,559 --> 00:23:44,400
on the next slide sorry is a collection

00:23:42,000 --> 00:23:45,600
of a lot of the different computers it's

00:23:44,400 --> 00:23:49,039
actually um

00:23:45,600 --> 00:23:50,640
everything from the radio to the

00:23:49,039 --> 00:23:53,279
engine to the airbags are actually

00:23:50,640 --> 00:23:55,840
controlled by these little computers

00:23:53,279 --> 00:23:57,279
and computers mean software which means

00:23:55,840 --> 00:23:58,240
that you'll want updates to this

00:23:57,279 --> 00:24:00,880
software

00:23:58,240 --> 00:24:02,559
if anything any bugs are discovered or

00:24:00,880 --> 00:24:05,120
anything like that

00:24:02,559 --> 00:24:05,840
and so so they require updates and so

00:24:05,120 --> 00:24:08,159
they require

00:24:05,840 --> 00:24:09,279
some security so what we've done if you

00:24:08,159 --> 00:24:11,200
go to the next slide

00:24:09,279 --> 00:24:13,520
is design a variant of tough for

00:24:11,200 --> 00:24:14,960
automobiles which is called obtain

00:24:13,520 --> 00:24:16,640
because it has some slight differences

00:24:14,960 --> 00:24:19,440
from from tough um

00:24:16,640 --> 00:24:20,400
kind of unique to this automotive space

00:24:19,440 --> 00:24:21,760
um

00:24:20,400 --> 00:24:23,760
because cars are very different than

00:24:21,760 --> 00:24:26,159
computers in certain ways such as their

00:24:23,760 --> 00:24:28,559
ability for each computer on the car

00:24:26,159 --> 00:24:29,279
to access the actual internet and the

00:24:28,559 --> 00:24:30,559
network

00:24:29,279 --> 00:24:32,960
so they have to do some kind of inner

00:24:30,559 --> 00:24:34,799
vehicle communication

00:24:32,960 --> 00:24:35,840
and they also don't have the sense of

00:24:34,799 --> 00:24:37,039
because of the lack of network

00:24:35,840 --> 00:24:39,120
connections

00:24:37,039 --> 00:24:40,799
they often don't have a good sense of a

00:24:39,120 --> 00:24:41,679
secure source of time so they don't

00:24:40,799 --> 00:24:44,000
really know

00:24:41,679 --> 00:24:45,120
exactly that you have timeliness becomes

00:24:44,000 --> 00:24:48,559
a little bit trickier

00:24:45,120 --> 00:24:51,200
in this space so after looking at all of

00:24:48,559 --> 00:24:54,400
those issues if you go to the next slide

00:24:51,200 --> 00:24:58,720
we have standardized obtain

00:24:54,400 --> 00:25:01,760
into a ieee stow standard which is now

00:24:58,720 --> 00:25:02,640
in the linux foundation um and the

00:25:01,760 --> 00:25:04,720
version

00:25:02,640 --> 00:25:06,799
1.1.0 was released at the beginning of

00:25:04,720 --> 00:25:07,279
this year it was originally standardized

00:25:06,799 --> 00:25:09,200
um

00:25:07,279 --> 00:25:11,760
sometime last year and this is just kind

00:25:09,200 --> 00:25:12,880
of formalizing this idea of how you can

00:25:11,760 --> 00:25:15,760
use tough

00:25:12,880 --> 00:25:17,039
in auto automobiles if you go to the

00:25:15,760 --> 00:25:18,480
next slide

00:25:17,039 --> 00:25:20,799
it's also in addition to being

00:25:18,480 --> 00:25:24,159
standardized it's been used in practice

00:25:20,799 --> 00:25:26,400
um of course it's been integrated into

00:25:24,159 --> 00:25:27,919
automotive grade linux which is the open

00:25:26,400 --> 00:25:30,559
source

00:25:27,919 --> 00:25:32,080
operating system and encode for

00:25:30,559 --> 00:25:33,520
automotive ecu's and

00:25:32,080 --> 00:25:35,360
i don't know if ecu's are just those

00:25:33,520 --> 00:25:37,120
little computers on cars

00:25:35,360 --> 00:25:40,000
stands for electronic control unit just

00:25:37,120 --> 00:25:41,919
a small little computer

00:25:40,000 --> 00:25:44,320
and it's been adopted as well by many

00:25:41,919 --> 00:25:46,559
major auto companies

00:25:44,320 --> 00:25:47,600
and the statistic that we like to cite

00:25:46,559 --> 00:25:50,640
is that in the next

00:25:47,600 --> 00:25:53,760
few years about a third of us of cars

00:25:50,640 --> 00:25:56,320
on new cars sorry on u.s roads will use

00:25:53,760 --> 00:25:56,960
um obtained to some degree or another to

00:25:56,320 --> 00:26:01,120
secure

00:25:56,960 --> 00:26:02,640
um some of those computing devices

00:26:01,120 --> 00:26:04,159
all right if you and then next slide i

00:26:02,640 --> 00:26:06,640
think i'll pass it off

00:26:04,159 --> 00:26:07,440
to joshua to talk about our next case

00:26:06,640 --> 00:26:09,919
study yeah

00:26:07,440 --> 00:26:11,279
so one place that we are actively

00:26:09,919 --> 00:26:14,240
integrating turf today

00:26:11,279 --> 00:26:14,559
is the python package index and so this

00:26:14,240 --> 00:26:17,840
is

00:26:14,559 --> 00:26:18,400
a similar scenario to php repositories

00:26:17,840 --> 00:26:21,039
and

00:26:18,400 --> 00:26:22,480
uh very near and dear to my heart

00:26:21,039 --> 00:26:23,039
because it's one of the things my team

00:26:22,480 --> 00:26:26,000
and i

00:26:23,039 --> 00:26:27,279
spend our time working on um and another

00:26:26,000 --> 00:26:28,799
reason i really like the

00:26:27,279 --> 00:26:30,960
pipe ui case studies because it really

00:26:28,799 --> 00:26:32,960
demonstrates the flexibility of tough

00:26:30,960 --> 00:26:34,240
which enables kind of adoption

00:26:32,960 --> 00:26:37,279
interfaces so

00:26:34,240 --> 00:26:38,880
uh along with my own team a lot of the

00:26:37,279 --> 00:26:39,520
work particularly on the server side is

00:26:38,880 --> 00:26:42,960
being

00:26:39,520 --> 00:26:44,400
done by trail of bits under contract to

00:26:42,960 --> 00:26:46,799
the python software foundation

00:26:44,400 --> 00:26:48,240
and so we've got really good kind of

00:26:46,799 --> 00:26:51,360
broad collaboration going on

00:26:48,240 --> 00:26:54,799
uh in the finest open source sense

00:26:51,360 --> 00:26:56,880
and so here's a um

00:26:54,799 --> 00:26:58,240
fairly uh i guess intimidating looking

00:26:56,880 --> 00:26:59,520
diagram but one of the nice things about

00:26:58,240 --> 00:27:00,159
it is it demonstrates a bunch of the

00:26:59,520 --> 00:27:01,600
things

00:27:00,159 --> 00:27:03,600
happening in tufts that marina talked

00:27:01,600 --> 00:27:05,279
about so you can see that the green

00:27:03,600 --> 00:27:08,320
boxes represent online

00:27:05,279 --> 00:27:10,640
and offline keys sorry these are keys

00:27:08,320 --> 00:27:12,799
that are kept in a lockbox or a safe or

00:27:10,640 --> 00:27:14,080
you know generally not available on a

00:27:12,799 --> 00:27:18,720
computer

00:27:14,080 --> 00:27:20,320
um and they provide this extra level of

00:27:18,720 --> 00:27:23,039
security and they

00:27:20,320 --> 00:27:26,399
kind of delegate uh authority to some

00:27:23,039 --> 00:27:29,840
online keys to perform some signing

00:27:26,399 --> 00:27:31,200
and this is um this is the phase we're

00:27:29,840 --> 00:27:34,000
implementing today which is

00:27:31,200 --> 00:27:35,600
effectively trying to add what i call or

00:27:34,000 --> 00:27:38,399
you might call repository signing

00:27:35,600 --> 00:27:39,520
to pipeline and what will happen here is

00:27:38,399 --> 00:27:41,760
that each time someone

00:27:39,520 --> 00:27:44,000
uploads a python package to powerpi it

00:27:41,760 --> 00:27:47,360
gets signed by the repository

00:27:44,000 --> 00:27:50,559
and this gives some integrity protection

00:27:47,360 --> 00:27:52,240
against kind of uh militia

00:27:50,559 --> 00:27:54,000
malicious attacks but also incomplete

00:27:52,240 --> 00:27:57,120
data um

00:27:54,000 --> 00:27:58,399
and uh accidental kind of integrity

00:27:57,120 --> 00:28:02,080
errors

00:27:58,399 --> 00:28:04,159
and what security promises this provides

00:28:02,080 --> 00:28:06,799
really is helps defending against

00:28:04,159 --> 00:28:08,159
man-in-the-middle attacks and uh what

00:28:06,799 --> 00:28:10,559
you might call malicious mirrors

00:28:08,159 --> 00:28:12,000
so once this is deployed you'll know

00:28:10,559 --> 00:28:13,360
that when you've downloaded a python

00:28:12,000 --> 00:28:15,679
package whether it was from

00:28:13,360 --> 00:28:17,120
pipeline directly or a you know like a

00:28:15,679 --> 00:28:18,480
regional mirror or a corporate mirror or

00:28:17,120 --> 00:28:20,880
something it was

00:28:18,480 --> 00:28:22,960
the same package that the upstream

00:28:20,880 --> 00:28:25,520
package repository had

00:28:22,960 --> 00:28:27,279
originally signed it also adds a bunch

00:28:25,520 --> 00:28:28,720
of my security features that we talked

00:28:27,279 --> 00:28:30,159
about like not having a single point of

00:28:28,720 --> 00:28:30,799
failure providing that compromise

00:28:30,159 --> 00:28:34,080
resistant

00:28:30,799 --> 00:28:36,240
resilience and the tough is a core

00:28:34,080 --> 00:28:39,679
property of tough

00:28:36,240 --> 00:28:41,279
and this deployment delega demonstrates

00:28:39,679 --> 00:28:42,480
the delegation model in practice

00:28:41,279 --> 00:28:44,480
one of the interesting things about it

00:28:42,480 --> 00:28:46,240
here is that it's less about

00:28:44,480 --> 00:28:47,679
providing additional security properties

00:28:46,240 --> 00:28:50,559
and the delegations are

00:28:47,679 --> 00:28:52,799
effectively a performance mechanism and

00:28:50,559 --> 00:28:55,760
pipeli has tens of thousands of software

00:28:52,799 --> 00:28:57,600
packages on and so if we had a

00:28:55,760 --> 00:28:59,039
single metadata file listing tens of

00:28:57,600 --> 00:29:00,159
thousands of packages and that got

00:28:59,039 --> 00:29:03,360
updated every time

00:29:00,159 --> 00:29:06,320
more packages were added that would

00:29:03,360 --> 00:29:06,720
be fairly laborious to download each

00:29:06,320 --> 00:29:09,760
time

00:29:06,720 --> 00:29:10,240
the repository stay changed so this bins

00:29:09,760 --> 00:29:11,919
to

00:29:10,240 --> 00:29:14,799
numbered bins delegation that you can

00:29:11,919 --> 00:29:17,760
see at the bottom of the diagram here

00:29:14,799 --> 00:29:19,840
enables fewer files to be downloaded and

00:29:17,760 --> 00:29:22,080
the files are updated less frequently

00:29:19,840 --> 00:29:23,840
and so that's kind of a nice

00:29:22,080 --> 00:29:26,320
demonstration of some of the

00:29:23,840 --> 00:29:27,200
versatility of stuff i think that it can

00:29:26,320 --> 00:29:31,120
scale well

00:29:27,200 --> 00:29:32,640
and it can be deployed in kind of phases

00:29:31,120 --> 00:29:34,880
and i speak about phases because what

00:29:32,640 --> 00:29:36,960
we're hoping to do next is implement

00:29:34,880 --> 00:29:38,840
the so-called maximum security model so

00:29:36,960 --> 00:29:42,159
both of these

00:29:38,840 --> 00:29:43,840
pipe designs are

00:29:42,159 --> 00:29:45,840
available on the internet as peps so

00:29:43,840 --> 00:29:47,760
python enhancement proposals there's pet

00:29:45,840 --> 00:29:48,640
458 which is the previous slide i talked

00:29:47,760 --> 00:29:51,039
about

00:29:48,640 --> 00:29:52,480
and then there's pet 480 which is uh

00:29:51,039 --> 00:29:53,279
what we hope to work on next with this

00:29:52,480 --> 00:29:56,000
slide

00:29:53,279 --> 00:29:56,960
and where this extends the security by

00:29:56,000 --> 00:29:58,480
allowing to the

00:29:56,960 --> 00:30:01,039
developer to choose to sign for their

00:29:58,480 --> 00:30:03,120
own packages using the validation model

00:30:01,039 --> 00:30:04,640
and then you know that what you have

00:30:03,120 --> 00:30:06,320
kind of downloaded and installed

00:30:04,640 --> 00:30:08,720
is what the developer originally

00:30:06,320 --> 00:30:09,919
intended to publish

00:30:08,720 --> 00:30:12,000
so it reduces the trust on the

00:30:09,919 --> 00:30:15,039
repository um

00:30:12,000 --> 00:30:18,320
and some of the resistance

00:30:15,039 --> 00:30:21,440
uh to this kind of system is that

00:30:18,320 --> 00:30:22,720
um citing you know managing signing keys

00:30:21,440 --> 00:30:25,120
we've already said that kind of

00:30:22,720 --> 00:30:26,799
can be quite difficult and a lot of open

00:30:25,120 --> 00:30:29,039
source developers are not interested in

00:30:26,799 --> 00:30:30,880
doing that they just want to write their

00:30:29,039 --> 00:30:33,840
software and share it

00:30:30,880 --> 00:30:34,640
um but trishank did some interesting

00:30:33,840 --> 00:30:37,600
research that

00:30:34,640 --> 00:30:39,520
indicated uh using numbers from around

00:30:37,600 --> 00:30:41,039
2016 i did that

00:30:39,520 --> 00:30:43,279
if we could encourage the top one

00:30:41,039 --> 00:30:45,360
percent of um

00:30:43,279 --> 00:30:46,399
packages to be signed that would account

00:30:45,360 --> 00:30:48,640
for 73

00:30:46,399 --> 00:30:51,120
of the downloads on pipeli so you can

00:30:48,640 --> 00:30:52,880
see that with um

00:30:51,120 --> 00:30:54,240
we'd have to convince relatively few

00:30:52,880 --> 00:30:55,120
developers to sign their package and

00:30:54,240 --> 00:30:56,559
that would be

00:30:55,120 --> 00:30:58,159
a significant security left for the

00:30:56,559 --> 00:31:01,200
system

00:30:58,159 --> 00:31:04,320
uh you can also see in this slide the

00:31:01,200 --> 00:31:06,159
more of the delegation techniques that

00:31:04,320 --> 00:31:08,799
marina already talked about

00:31:06,159 --> 00:31:09,840
the um the claimed and recently claimed

00:31:08,799 --> 00:31:12,080
delegations

00:31:09,840 --> 00:31:12,880
are actually providing some security

00:31:12,080 --> 00:31:16,080
properties

00:31:12,880 --> 00:31:18,080
uh what's happening there is that

00:31:16,080 --> 00:31:19,279
when someone originally signs and

00:31:18,080 --> 00:31:22,320
uploads their package

00:31:19,279 --> 00:31:23,760
uh it's kind of that delegation is done

00:31:22,320 --> 00:31:27,679
through an online key

00:31:23,760 --> 00:31:30,320
um and this is mainly to prevent

00:31:27,679 --> 00:31:31,519
uh some kind of operator having to

00:31:30,320 --> 00:31:33,840
frequently

00:31:31,519 --> 00:31:35,120
uh sign every time a new delegation

00:31:33,840 --> 00:31:36,720
happens

00:31:35,120 --> 00:31:38,480
you know going and getting the uh

00:31:36,720 --> 00:31:39,840
offline key out of the safe deposit box

00:31:38,480 --> 00:31:41,919
plugging it into the system and

00:31:39,840 --> 00:31:43,279
kind of signing that delegation instead

00:31:41,919 --> 00:31:45,600
this

00:31:43,279 --> 00:31:47,279
phase is thing so your original

00:31:45,600 --> 00:31:47,919
delegation can be signed up by an online

00:31:47,279 --> 00:31:49,919
key

00:31:47,919 --> 00:31:51,679
and then periodically say once a month

00:31:49,919 --> 00:31:54,480
an operator can come along and

00:31:51,679 --> 00:31:55,919
authorize a bunch of delegations with an

00:31:54,480 --> 00:31:58,399
offline key

00:31:55,919 --> 00:31:59,200
increase that security that protection

00:31:58,399 --> 00:32:00,880
by

00:31:59,200 --> 00:32:02,960
being protected by an offline key

00:32:00,880 --> 00:32:03,519
without making too significant overhead

00:32:02,960 --> 00:32:07,039
for

00:32:03,519 --> 00:32:07,039
the people operating infrastructure

00:32:07,200 --> 00:32:11,120
um so that's kind of

00:32:11,360 --> 00:32:15,120
a high level overview like a

00:32:12,559 --> 00:32:17,600
scatterbrained overview of

00:32:15,120 --> 00:32:18,240
the pipe ui model this is actively being

00:32:17,600 --> 00:32:20,080
developed

00:32:18,240 --> 00:32:22,960
uh worked on today and uh and because

00:32:20,080 --> 00:32:25,840
the python enhancement proposals are

00:32:22,960 --> 00:32:26,960
um publicly available it also provides

00:32:25,840 --> 00:32:30,000
really nice

00:32:26,960 --> 00:32:31,840
kind of demonstration of

00:32:30,000 --> 00:32:33,039
how to deploy stuff in practice how to

00:32:31,840 --> 00:32:35,200
integrate it into

00:32:33,039 --> 00:32:37,679
other systems and then for our final

00:32:35,200 --> 00:32:41,200
case study i'll head back to marina

00:32:37,679 --> 00:32:43,039
and he's going to talk a bit about david

00:32:41,200 --> 00:32:45,760
all right so yeah i'll talk about next

00:32:43,039 --> 00:32:49,039
how stuff has been integrated into

00:32:45,760 --> 00:32:51,919
the datadog core integrations

00:32:49,039 --> 00:32:53,120
for use in um secure software updates

00:32:51,919 --> 00:32:55,039
and kind of the big thing i want to

00:32:53,120 --> 00:32:56,960
highlight here is the way

00:32:55,039 --> 00:32:59,039
tough can be integrated with in toto

00:32:56,960 --> 00:33:00,720
which is a another system from kind of a

00:32:59,039 --> 00:33:02,880
broader supply chain

00:33:00,720 --> 00:33:04,399
security model so tough focus is on this

00:33:02,880 --> 00:33:06,559
secure distribution

00:33:04,399 --> 00:33:07,600
aspect of the supply chain but there's

00:33:06,559 --> 00:33:10,960
also you know

00:33:07,600 --> 00:33:12,640
you know code signing and ci cd systems

00:33:10,960 --> 00:33:16,320
and all these other pieces

00:33:12,640 --> 00:33:18,000
of the the pipeline that i'm sure

00:33:16,320 --> 00:33:20,080
you're aware of and in total is one of

00:33:18,000 --> 00:33:22,559
the methods to help secure

00:33:20,080 --> 00:33:23,200
all of these other pieces and so this is

00:33:22,559 --> 00:33:26,240
the way that

00:33:23,200 --> 00:33:28,399
um datadog uses tough as well as tough

00:33:26,240 --> 00:33:31,519
to kind of distribute that in toto

00:33:28,399 --> 00:33:32,320
metadata to provide end-to-end developer

00:33:31,519 --> 00:33:33,440
signings so

00:33:32,320 --> 00:33:36,240
you know the code that's written by the

00:33:33,440 --> 00:33:38,559
developer can be verified every step of

00:33:36,240 --> 00:33:40,720
the way by the person who then downloads

00:33:38,559 --> 00:33:41,760
that software which is this very cool

00:33:40,720 --> 00:33:44,720
end-to-end

00:33:41,760 --> 00:33:46,000
model for supply chain security and if

00:33:44,720 --> 00:33:47,840
you go to the next slide

00:33:46,000 --> 00:33:49,760
there's a diagram of kind of how this

00:33:47,840 --> 00:33:50,399
all fits together and you'll recognize

00:33:49,760 --> 00:33:52,159
some of these

00:33:50,399 --> 00:33:54,640
these roles from tough that we've talked

00:33:52,159 --> 00:33:55,360
about a kind of a similar delegation

00:33:54,640 --> 00:33:58,640
pattern

00:33:55,360 --> 00:33:59,519
to the one we saw for for pipi with the

00:33:58,640 --> 00:34:01,600
addition

00:33:59,519 --> 00:34:02,799
of kind of this in toto metadata which

00:34:01,600 --> 00:34:06,320
then provides

00:34:02,799 --> 00:34:08,639
that additional piece of securing

00:34:06,320 --> 00:34:10,159
the entire supply chain and providing

00:34:08,639 --> 00:34:11,599
attestations about

00:34:10,159 --> 00:34:14,000
everything that happened from when the

00:34:11,599 --> 00:34:15,359
developer wrote the code all the way to

00:34:14,000 --> 00:34:17,599
when it was actually packaged and

00:34:15,359 --> 00:34:21,679
released to you as the

00:34:17,599 --> 00:34:23,280
the downloader user of this code um

00:34:21,679 --> 00:34:24,720
yeah and it does this through use of

00:34:23,280 --> 00:34:26,800
delegations again

00:34:24,720 --> 00:34:28,159
to all these different roles a very

00:34:26,800 --> 00:34:30,079
variety of different

00:34:28,159 --> 00:34:31,280
target scrolls for these different

00:34:30,079 --> 00:34:33,200
wheels which is just the different

00:34:31,280 --> 00:34:35,280
packages

00:34:33,200 --> 00:34:37,040
um as well there's a lot more

00:34:35,280 --> 00:34:38,480
information trishank wrote a great blog

00:34:37,040 --> 00:34:40,320
post about this integration

00:34:38,480 --> 00:34:41,839
it's available at this link which can

00:34:40,320 --> 00:34:43,679
provide a lot more information this is

00:34:41,839 --> 00:34:46,960
just kind of a high-level overview

00:34:43,679 --> 00:34:50,240
of how this all works so that's that

00:34:46,960 --> 00:34:50,240
you have the the next slide

00:34:50,639 --> 00:34:54,320
i think we have a couple of minutes left

00:34:52,240 --> 00:34:55,760
so quickly go over some conclusions and

00:34:54,320 --> 00:34:57,359
you should have time for

00:34:55,760 --> 00:34:58,960
for questions so if you own by the way

00:34:57,359 --> 00:34:59,920
if you haven't yet feel free to post any

00:34:58,960 --> 00:35:03,440
questions in the q

00:34:59,920 --> 00:35:06,640
a as i go over the next couple of slides

00:35:03,440 --> 00:35:09,040
um a few so the next slide is just

00:35:06,640 --> 00:35:10,320
very quickly i'd like to acknowledge all

00:35:09,040 --> 00:35:10,800
of the wonderful people who make this

00:35:10,320 --> 00:35:13,280
work

00:35:10,800 --> 00:35:14,560
um as with any project we didn't we

00:35:13,280 --> 00:35:15,680
didn't do all this ourselves

00:35:14,560 --> 00:35:17,680
there are a lot of wonderful people

00:35:15,680 --> 00:35:19,520
behind the scenes in all of these

00:35:17,680 --> 00:35:21,839
different communities making it happen

00:35:19,520 --> 00:35:22,960
especially our rtf maintainers and all

00:35:21,839 --> 00:35:25,200
the people

00:35:22,960 --> 00:35:26,079
in the python and octane communities

00:35:25,200 --> 00:35:28,079
that really

00:35:26,079 --> 00:35:30,480
make this work happen on the day-to-day

00:35:28,079 --> 00:35:31,599
basis so thank you to everyone here and

00:35:30,480 --> 00:35:33,200
everyone who

00:35:31,599 --> 00:35:35,359
i didn't have room for on the slide as

00:35:33,200 --> 00:35:37,760
well and then if you go to the next

00:35:35,359 --> 00:35:37,760
slide

00:35:37,920 --> 00:35:41,280
um we have time some questions so feel

00:35:40,079 --> 00:35:43,200
free to ask us anything

00:35:41,280 --> 00:35:45,200
or email us if you have any questions as

00:35:43,200 --> 00:35:45,760
well there's also various other ways to

00:35:45,200 --> 00:35:48,640
find us

00:35:45,760 --> 00:35:51,119
there's the the our tough website we're

00:35:48,640 --> 00:35:52,960
available on the cloud native slack

00:35:51,119 --> 00:35:55,920
because tough is a graduated project

00:35:52,960 --> 00:35:57,680
actually of the the cncf and so we

00:35:55,920 --> 00:36:00,160
um are available kind of on those

00:35:57,680 --> 00:36:01,920
ecosystems as well

00:36:00,160 --> 00:36:04,079
and also if you're really interested in

00:36:01,920 --> 00:36:04,800
this topic i'd encourage you to attend

00:36:04,079 --> 00:36:08,480
another talk

00:36:04,800 --> 00:36:11,599
later today about kind of a

00:36:08,480 --> 00:36:13,280
a project to integrate tough into to

00:36:11,599 --> 00:36:15,599
drupal projects so

00:36:13,280 --> 00:36:16,480
that that is another exciting thing to

00:36:15,599 --> 00:36:19,599
to look into

00:36:16,480 --> 00:36:20,400
if you're interested um yeah so then

00:36:19,599 --> 00:36:22,640
i'll

00:36:20,400 --> 00:36:27,839
flip over to the q a and see see what we

00:36:22,640 --> 00:36:27,839
have there

00:36:28,560 --> 00:36:33,760
all right i'll just go in time order i

00:36:32,240 --> 00:36:36,800
guess

00:36:33,760 --> 00:36:37,680
um can you use this to sign and later

00:36:36,800 --> 00:36:39,760
validate

00:36:37,680 --> 00:36:42,640
your final build artifacts as well or

00:36:39,760 --> 00:36:46,720
just individual packages that are hosted

00:36:42,640 --> 00:36:48,240
externally um yes i think you can use it

00:36:46,720 --> 00:36:49,200
you can use it internally as well you

00:36:48,240 --> 00:36:51,359
just run

00:36:49,200 --> 00:36:53,040
the same thing kind of on your your

00:36:51,359 --> 00:36:55,599
local build artifacts and in fact we

00:36:53,040 --> 00:36:57,119
actually have a whole system

00:36:55,599 --> 00:36:59,280
in place to make sure that you download

00:36:57,119 --> 00:37:01,839
the correct packages from the correct

00:36:59,280 --> 00:37:04,160
external repositories if you're using

00:37:01,839 --> 00:37:05,520
more than one repository um

00:37:04,160 --> 00:37:07,359
because i'm sure some of you heard of

00:37:05,520 --> 00:37:08,720
like the dependency confusion

00:37:07,359 --> 00:37:10,000
so we really focus on making sure that

00:37:08,720 --> 00:37:12,240
you correct you download the correct

00:37:10,000 --> 00:37:16,560
packages from the correct locations

00:37:12,240 --> 00:37:16,560
to prevent any of that kind of confusion

00:37:16,880 --> 00:37:25,119
um you could jump in just for it anytime

00:37:21,520 --> 00:37:26,480
as well i'll tell them um

00:37:25,119 --> 00:37:28,560
we'll tough to be used in voting systems

00:37:26,480 --> 00:37:32,480
anytime soon i don't know

00:37:28,560 --> 00:37:34,560
uh i'm not entirely certain how

00:37:32,480 --> 00:37:36,160
what's i mean i'm kind of skeptical of

00:37:34,560 --> 00:37:37,599
digital voting systems anyway so

00:37:36,160 --> 00:37:39,200
i guess i'm probably maybe not the best

00:37:37,599 --> 00:37:40,880
person to answer this question but one

00:37:39,200 --> 00:37:41,280
of the reasons i did want to jump in

00:37:40,880 --> 00:37:44,320
here

00:37:41,280 --> 00:37:48,880
is somewhat related to voting is

00:37:44,320 --> 00:37:52,480
um kind of legal documents like

00:37:48,880 --> 00:37:53,440
city statutes and uh things like that

00:37:52,480 --> 00:37:54,640
where

00:37:53,440 --> 00:37:56,160
you kind of want to know that you're

00:37:54,640 --> 00:37:58,320
referring to the latest version of that

00:37:56,160 --> 00:37:59,520
document when you are referring to it um

00:37:58,320 --> 00:38:01,440
and you want to know that it hasn't been

00:37:59,520 --> 00:38:01,920
tampered with when you're referring to

00:38:01,440 --> 00:38:04,079
that

00:38:01,920 --> 00:38:05,680
and so there's a project called the open

00:38:04,079 --> 00:38:09,520
law library

00:38:05,680 --> 00:38:11,760
um which is using tough and to

00:38:09,520 --> 00:38:12,800
effectively provide a content repository

00:38:11,760 --> 00:38:16,079
of legal

00:38:12,800 --> 00:38:17,440
documents and have the protections of

00:38:16,079 --> 00:38:19,040
tough offers of

00:38:17,440 --> 00:38:21,760
you know integrity protection and

00:38:19,040 --> 00:38:23,440
consistency and freshness so that's

00:38:21,760 --> 00:38:25,200
um it doesn't directly answer your

00:38:23,440 --> 00:38:26,079
question but i think it shows that tough

00:38:25,200 --> 00:38:27,920
is

00:38:26,079 --> 00:38:29,440
like pretty versatile which is why i

00:38:27,920 --> 00:38:31,599
tend to say tough

00:38:29,440 --> 00:38:33,520
for protecting against uh for protecting

00:38:31,599 --> 00:38:34,560
content repositories rather than

00:38:33,520 --> 00:38:36,079
you know its name to the update

00:38:34,560 --> 00:38:37,440
framework it was designed for protecting

00:38:36,079 --> 00:38:39,119
software update systems but it's

00:38:37,440 --> 00:38:42,960
demonstrated that it is

00:38:39,119 --> 00:38:46,320
more versatile than just that

00:38:42,960 --> 00:38:47,440
um so hopefully yeah not a direct answer

00:38:46,320 --> 00:38:51,760
if your question but

00:38:47,440 --> 00:38:53,599
an interesting anecdote anyway

00:38:51,760 --> 00:38:54,800
all right so the next one we have is

00:38:53,599 --> 00:38:56,800
what is the relationship

00:38:54,800 --> 00:38:58,720
between tough and total will we still be

00:38:56,800 --> 00:39:01,359
vulnerable to supply chain attacks if we

00:38:58,720 --> 00:39:05,040
implement tough without nintendo

00:39:01,359 --> 00:39:06,720
um so yes and no

00:39:05,040 --> 00:39:08,160
so there are a lot of different pieces

00:39:06,720 --> 00:39:09,680
to the software supply chain

00:39:08,160 --> 00:39:11,200
tough really focuses on that

00:39:09,680 --> 00:39:14,720
distribution piece

00:39:11,200 --> 00:39:17,280
and so on its own if say your

00:39:14,720 --> 00:39:18,160
soft if your um your code repository for

00:39:17,280 --> 00:39:20,480
example

00:39:18,160 --> 00:39:22,160
is compromised and then is properly

00:39:20,480 --> 00:39:24,320
signed and uploaded using tough

00:39:22,160 --> 00:39:25,920
um tough on its own won't detect that

00:39:24,320 --> 00:39:28,240
your code repository

00:39:25,920 --> 00:39:29,680
was compromised so you'll need you know

00:39:28,240 --> 00:39:31,599
other things for those other pieces

00:39:29,680 --> 00:39:33,520
of the supply chain and what entota

00:39:31,599 --> 00:39:34,320
really focuses on is kind of linking all

00:39:33,520 --> 00:39:37,040
those pieces

00:39:34,320 --> 00:39:38,560
of your supply chain security together

00:39:37,040 --> 00:39:39,680
um

00:39:38,560 --> 00:39:42,000
to make sure that you're actually doing

00:39:39,680 --> 00:39:46,079
all of these different pieces

00:39:42,000 --> 00:39:47,520
yeah so the relationship is um

00:39:46,079 --> 00:39:49,839
effectively that their sister projects

00:39:47,520 --> 00:39:53,680
both came from the secure systems lab at

00:39:49,839 --> 00:39:55,520
nyu and they share some um

00:39:53,680 --> 00:39:57,839
effectively like an envelope format for

00:39:55,520 --> 00:39:59,280
providing metadata that is signed

00:39:57,839 --> 00:40:01,119
um which is a separate kind of

00:39:59,280 --> 00:40:03,359
attractive development now but

00:40:01,119 --> 00:40:04,880
um they share a lot of the same ideas

00:40:03,359 --> 00:40:08,240
and principles

00:40:04,880 --> 00:40:09,599
um and one of our co-maintainers on

00:40:08,240 --> 00:40:11,680
tough

00:40:09,599 --> 00:40:13,280
has referred to tough as kind of

00:40:11,680 --> 00:40:14,480
protecting the edge of the supply chain

00:40:13,280 --> 00:40:16,960
graph which i think is

00:40:14,480 --> 00:40:18,880
is quite nice so if someone gets in and

00:40:16,960 --> 00:40:19,359
compromises marina indicated if someone

00:40:18,880 --> 00:40:20,960
gets in

00:40:19,359 --> 00:40:22,480
earlier in the supply chain compromises

00:40:20,960 --> 00:40:24,240
things you can still

00:40:22,480 --> 00:40:25,920
end up with a package that is signed and

00:40:24,240 --> 00:40:28,480
appears to be legitimate

00:40:25,920 --> 00:40:29,920
and so the combination of the two as

00:40:28,480 --> 00:40:32,240
datadog did

00:40:29,920 --> 00:40:33,440
and talked about intersex blog post is a

00:40:32,240 --> 00:40:35,760
very powerful combination

00:40:33,440 --> 00:40:35,760
actually

00:40:35,880 --> 00:40:38,960
[Music]

00:40:36,960 --> 00:40:40,560
all right and then the next one um this

00:40:38,960 --> 00:40:42,079
one's really interesting does tough

00:40:40,560 --> 00:40:44,319
does the tough system create an

00:40:42,079 --> 00:40:45,920
opportunity for malicious actors to wait

00:40:44,319 --> 00:40:46,720
for an opportunity when an update is

00:40:45,920 --> 00:40:48,560
critical

00:40:46,720 --> 00:40:50,839
and intentionally poison the process

00:40:48,560 --> 00:40:53,599
like a denial of service for critical

00:40:50,839 --> 00:40:55,040
updates um so denial of service

00:40:53,599 --> 00:40:56,720
denial service attacks aren't like

00:40:55,040 --> 00:40:58,319
directly covered by tough because

00:40:56,720 --> 00:41:00,079
without control of the entire network

00:40:58,319 --> 00:41:01,680
it's hard to actually prevent

00:41:00,079 --> 00:41:03,599
you know any denial of service but what

00:41:01,680 --> 00:41:05,680
tuff does do is provide

00:41:03,599 --> 00:41:06,720
um kind of like it can detect the denial

00:41:05,680 --> 00:41:09,839
of service attack

00:41:06,720 --> 00:41:11,119
um and so it makes sure that if

00:41:09,839 --> 00:41:13,040
if you're not seeing the latest

00:41:11,119 --> 00:41:15,280
information available on the repository

00:41:13,040 --> 00:41:16,720
you will know about it

00:41:15,280 --> 00:41:18,720
and it also specifically protects

00:41:16,720 --> 00:41:20,560
against things like freeze attacks which

00:41:18,720 --> 00:41:22,000
make it so that you don't see

00:41:20,560 --> 00:41:23,680
the most up-to-date version of a

00:41:22,000 --> 00:41:25,599
particular package that

00:41:23,680 --> 00:41:28,160
might have a vulnerability that was just

00:41:25,599 --> 00:41:28,160
discovered

00:41:29,040 --> 00:41:34,880
um i hope that answered that that

00:41:32,839 --> 00:41:37,680
question

00:41:34,880 --> 00:41:39,520
um is there a quick start guide for um

00:41:37,680 --> 00:41:40,560
on how on the ground developers can use

00:41:39,520 --> 00:41:42,160
stuff

00:41:40,560 --> 00:41:44,000
so i think there's kind of two answers

00:41:42,160 --> 00:41:46,079
here the tough specification

00:41:44,000 --> 00:41:47,520
i think has a lot of the details of this

00:41:46,079 --> 00:41:48,079
but i would also encourage anyone

00:41:47,520 --> 00:41:51,599
interested

00:41:48,079 --> 00:41:53,359
to read the pep 458 and pep 480s

00:41:51,599 --> 00:41:54,880
guides because i think they have a lot

00:41:53,359 --> 00:41:57,599
more detail about

00:41:54,880 --> 00:41:59,040
some of the design decisions and other

00:41:57,599 --> 00:42:02,079
pieces that were used by

00:41:59,040 --> 00:42:03,200
pipi um when implementing tough which i

00:42:02,079 --> 00:42:05,200
think could be really useful

00:42:03,200 --> 00:42:06,800
at least as a reference when when doing

00:42:05,200 --> 00:42:08,160
this elsewhere

00:42:06,800 --> 00:42:10,400
and if you have any other good quick

00:42:08,160 --> 00:42:13,760
start suggestions yeah

00:42:10,400 --> 00:42:16,880
we do have if you are um

00:42:13,760 --> 00:42:18,480
relatively comfortable with python

00:42:16,880 --> 00:42:20,079
so we have a reference implementation of

00:42:18,480 --> 00:42:21,760
tough which is effectively

00:42:20,079 --> 00:42:23,200
you know we don't make changes to the

00:42:21,760 --> 00:42:25,119
specification without

00:42:23,200 --> 00:42:27,839
having some confidence that they're like

00:42:25,119 --> 00:42:29,200
reasonable input reasonable to implement

00:42:27,839 --> 00:42:30,960
and so the reference implementation

00:42:29,200 --> 00:42:33,040
provides kind of both

00:42:30,960 --> 00:42:35,280
an example of how to implement tough but

00:42:33,040 --> 00:42:36,160
also uh has a symbiotic relationship

00:42:35,280 --> 00:42:38,480
with

00:42:36,160 --> 00:42:40,000
the specification and in the reference

00:42:38,480 --> 00:42:42,800
implementation

00:42:40,000 --> 00:42:43,280
we have a quick start which uses some

00:42:42,800 --> 00:42:46,319
simple

00:42:43,280 --> 00:42:48,000
command line wrappers for the reference

00:42:46,319 --> 00:42:51,440
implementation to kind of

00:42:48,000 --> 00:42:53,440
instantiate a repository and fetch some

00:42:51,440 --> 00:42:54,960
file from that repository and then

00:42:53,440 --> 00:42:55,440
there's also a tutorial that goes

00:42:54,960 --> 00:42:58,960
through

00:42:55,440 --> 00:43:01,440
some of the reference implementation

00:42:58,960 --> 00:43:02,240
kind of library functions and shows you

00:43:01,440 --> 00:43:05,760
how to

00:43:02,240 --> 00:43:09,280
use the python to generate the metadata

00:43:05,760 --> 00:43:09,280
and fetch it and so that's

00:43:10,079 --> 00:43:14,160
that's very hands-on obviously and gives

00:43:12,480 --> 00:43:14,800
you a good idea of what the metadata

00:43:14,160 --> 00:43:17,280
looks like

00:43:14,800 --> 00:43:18,880
um at least json formatted metadata

00:43:17,280 --> 00:43:22,240
looks like in practice

00:43:18,880 --> 00:43:24,079
and um yeah so

00:43:22,240 --> 00:43:26,240
that's i think that's a fairly good good

00:43:24,079 --> 00:43:29,359
place to get started

00:43:26,240 --> 00:43:31,359
yeah definitely all right so considering

00:43:29,359 --> 00:43:32,079
the drupal automatic updates use case in

00:43:31,359 --> 00:43:33,839
particular

00:43:32,079 --> 00:43:35,520
will be enough to implement tough but

00:43:33,839 --> 00:43:37,359
not in total what kind of

00:43:35,520 --> 00:43:41,520
vulnerabilities would be subject to

00:43:37,359 --> 00:43:42,960
if we do tough only so i think

00:43:41,520 --> 00:43:44,800
the tricky thing about security is i

00:43:42,960 --> 00:43:46,319
don't think any any single thing is ever

00:43:44,800 --> 00:43:48,240
really enough when it comes to the

00:43:46,319 --> 00:43:50,160
security of your system

00:43:48,240 --> 00:43:51,839
um i do think that i do for sure you

00:43:50,160 --> 00:43:54,480
know i work on this project i really

00:43:51,839 --> 00:43:57,760
think that tough will help

00:43:54,480 --> 00:44:00,880
with a lot of the more common situations

00:43:57,760 --> 00:44:02,400
uh that being said i think

00:44:00,880 --> 00:44:04,240
anything that happens kind of before the

00:44:02,400 --> 00:44:06,640
distribution and packaging

00:44:04,240 --> 00:44:08,640
um isn't actually covered by tough and

00:44:06,640 --> 00:44:10,560
so you have to do other things

00:44:08,640 --> 00:44:11,839
as well as this to make sure that the

00:44:10,560 --> 00:44:13,520
whole system is secure

00:44:11,839 --> 00:44:15,119
but i guess you could do that embedding

00:44:13,520 --> 00:44:17,040
yourself as a developer

00:44:15,119 --> 00:44:20,000
who does the packaging of software if

00:44:17,040 --> 00:44:20,000
you want to do it manually

00:44:20,640 --> 00:44:26,079
yeah that's right so you get um if you

00:44:24,160 --> 00:44:27,280
have tough but not in total then you

00:44:26,079 --> 00:44:30,400
know that uh

00:44:27,280 --> 00:44:33,280
the update you downloaded is what the

00:44:30,400 --> 00:44:34,000
author or repository intended to publish

00:44:33,280 --> 00:44:36,800
um

00:44:34,000 --> 00:44:37,119
and you have a reasonable amount you

00:44:36,800 --> 00:44:38,400
have

00:44:37,119 --> 00:44:40,640
fairly good confidence that it hasn't

00:44:38,400 --> 00:44:42,240
been tampered with and it is the latest

00:44:40,640 --> 00:44:45,119
version available

00:44:42,240 --> 00:44:45,599
um but you you can't know through tough

00:44:45,119 --> 00:44:47,119
alone

00:44:45,599 --> 00:44:49,119
that for example one of your

00:44:47,119 --> 00:44:52,319
contributors

00:44:49,119 --> 00:44:53,599
didn't integrate some malicious uh or

00:44:52,319 --> 00:44:55,839
you know their account wasn't used to

00:44:53,599 --> 00:45:00,400
integrate some kind of malicious change

00:44:55,839 --> 00:45:00,400
um so in toto can

00:45:00,480 --> 00:45:04,000
provide additional security properties

00:45:02,400 --> 00:45:06,160
um you can do things

00:45:04,000 --> 00:45:07,200
like require that uh all of your

00:45:06,160 --> 00:45:10,640
developers

00:45:07,200 --> 00:45:12,240
are signing their commits um and that

00:45:10,640 --> 00:45:13,920
those commit signatures are verified by

00:45:12,240 --> 00:45:15,119
a system that kind of

00:45:13,920 --> 00:45:17,040
then signs an additional piece of

00:45:15,119 --> 00:45:18,319
metadata to say yes well all of the

00:45:17,040 --> 00:45:21,520
commits were assigned

00:45:18,319 --> 00:45:24,000
by authors that we trust and so

00:45:21,520 --> 00:45:24,960
you know it all layers up the security

00:45:24,000 --> 00:45:28,880
of the defense and

00:45:24,960 --> 00:45:29,440
principles um more like a security onion

00:45:28,880 --> 00:45:31,680
than the

00:45:29,440 --> 00:45:33,280
uh kind of concentric castles with notes

00:45:31,680 --> 00:45:33,680
once you start adding a bunch of parties

00:45:33,280 --> 00:45:37,520
with

00:45:33,680 --> 00:45:39,920
in toto um

00:45:37,520 --> 00:45:41,760
and then we have another question i

00:45:39,920 --> 00:45:45,599
think we're still good for a few minutes

00:45:41,760 --> 00:45:47,440
um how does tough interact with the idea

00:45:45,599 --> 00:45:48,400
or project of reproducible builds if at

00:45:47,440 --> 00:45:52,240
all

00:45:48,400 --> 00:45:55,839
um not a huge amount

00:45:52,240 --> 00:46:00,480
actually um i mean reproducible

00:45:55,839 --> 00:46:02,240
builds are an amazing uh

00:46:00,480 --> 00:46:04,960
thing for security particularly in open

00:46:02,240 --> 00:46:07,920
source software um

00:46:04,960 --> 00:46:09,200
from an update system perspective uh you

00:46:07,920 --> 00:46:11,440
can

00:46:09,200 --> 00:46:13,200
i have seen people do clever things like

00:46:11,440 --> 00:46:14,800
we know our

00:46:13,200 --> 00:46:16,720
we know our software's kind of binary

00:46:14,800 --> 00:46:19,920
reproducible so we can

00:46:16,720 --> 00:46:21,359
uh there's a linux distribution called

00:46:19,920 --> 00:46:24,640
clear linux

00:46:21,359 --> 00:46:26,960
uh and they do binary diffing of the

00:46:24,640 --> 00:46:29,599
updates um because they're kind of

00:46:26,960 --> 00:46:33,359
binary boost will build so they can just

00:46:29,599 --> 00:46:35,200
uh when the soft when the binary changes

00:46:33,359 --> 00:46:37,200
that is effectively the updates right so

00:46:35,200 --> 00:46:38,880
they can do really efficient updates

00:46:37,200 --> 00:46:41,280
through binary gifting

00:46:38,880 --> 00:46:42,240
and but that's not really interacting

00:46:41,280 --> 00:46:44,319
with tough at all

00:46:42,240 --> 00:46:45,760
um there are there are some

00:46:44,319 --> 00:46:47,520
collaborations

00:46:45,760 --> 00:46:49,359
between the reproducible build project

00:46:47,520 --> 00:46:53,359
and the toto project

00:46:49,359 --> 00:46:55,680
and you can find um

00:46:53,359 --> 00:46:56,480
for example the debian project who uh

00:46:55,680 --> 00:46:57,920
really

00:46:56,480 --> 00:47:00,640
like behind a lot of the reproducible

00:46:57,920 --> 00:47:03,200
builds work are looking at using in toto

00:47:00,640 --> 00:47:04,800
to uh add some verification on top of

00:47:03,200 --> 00:47:06,240
reproducible build so you can do things

00:47:04,800 --> 00:47:09,200
like say

00:47:06,240 --> 00:47:10,000
w packages reproducible we'll build it

00:47:09,200 --> 00:47:11,920
on

00:47:10,000 --> 00:47:13,200
uh x different systems so each of those

00:47:11,920 --> 00:47:14,160
will sign a little bit of international

00:47:13,200 --> 00:47:15,440
link metadata

00:47:14,160 --> 00:47:17,920
and then when the user installs this

00:47:15,440 --> 00:47:20,800
debian package they can see that

00:47:17,920 --> 00:47:22,640
it was the same uh contents were

00:47:20,800 --> 00:47:25,119
reproduced by three different

00:47:22,640 --> 00:47:26,000
rebuilders with this in total metadata

00:47:25,119 --> 00:47:28,079
and and have

00:47:26,000 --> 00:47:29,200
a strong level of confidence that the

00:47:28,079 --> 00:47:30,720
thing they've installed hasn't been

00:47:29,200 --> 00:47:34,240
tampered with

00:47:30,720 --> 00:47:37,520
um and you

00:47:34,240 --> 00:47:38,559
i couldn't tell you exactly uh any links

00:47:37,520 --> 00:47:39,599
off the top of my head but you'll

00:47:38,559 --> 00:47:41,520
definitely find some

00:47:39,599 --> 00:47:43,359
information about that on the net as

00:47:41,520 --> 00:47:44,559
well uh cubes os which is a very

00:47:43,359 --> 00:47:47,200
security conscious

00:47:44,559 --> 00:47:48,400
um workspace operating system they are

00:47:47,200 --> 00:47:50,880
they have been playing around with

00:47:48,400 --> 00:47:53,839
in total a bit recently as well so um

00:47:50,880 --> 00:47:53,839
yeah there's definitely

00:47:54,240 --> 00:47:57,040
some um

00:47:58,160 --> 00:48:01,920
some not even overlap but some synergy i

00:48:00,640 --> 00:48:03,920
guess

00:48:01,920 --> 00:48:05,760
between these projects and their ideals

00:48:03,920 --> 00:48:06,960
but no direct interaction i think

00:48:05,760 --> 00:48:09,200
between tough and

00:48:06,960 --> 00:48:10,079
reproducible pills work yeah i think

00:48:09,200 --> 00:48:11,760
they're more like just

00:48:10,079 --> 00:48:13,119
you know different stages of the same

00:48:11,760 --> 00:48:15,839
pipeline so

00:48:13,119 --> 00:48:15,839
you should do both

00:48:16,559 --> 00:48:20,319
the short answer yeah more security is

00:48:19,440 --> 00:48:24,079
more better

00:48:20,319 --> 00:48:28,559
yep um

00:48:24,079 --> 00:48:34,480
okay i think we're out of questions

00:48:28,559 --> 00:48:37,200
um so we are a few minutes early

00:48:34,480 --> 00:48:38,400
but i won't keep you unnecessarily if

00:48:37,200 --> 00:48:42,079
there aren't any more questions

00:48:38,400 --> 00:48:43,520
um we'll uh thank you

00:48:42,079 --> 00:48:46,400
very much for your attention and you're

00:48:43,520 --> 00:48:47,839
interested in tough and uh

00:48:46,400 --> 00:48:49,680
yeah i'm really looking forward to

00:48:47,839 --> 00:48:52,240
seeing uh

00:48:49,680 --> 00:48:54,160
drupal in tough and uh so definitely

00:48:52,240 --> 00:48:56,640
recommend you check out the

00:48:54,160 --> 00:48:57,760
automatic updates initiative talk which

00:48:56,640 --> 00:49:01,119
is happening

00:48:57,760 --> 00:49:05,200
uh real soon now i think in like an hour

00:49:01,119 --> 00:49:05,200
yeah if i converted it

00:49:05,280 --> 00:49:08,319
alrighty thank you very much thank you

00:49:07,359 --> 00:49:17,839
everyone

00:49:08,319 --> 00:49:17,839
have a good comfort

00:49:56,559 --> 00:49:58,640

YouTube URL: https://www.youtube.com/watch?v=m3g4eSimgiY


