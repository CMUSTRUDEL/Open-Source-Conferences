Title: DrupalCon Denver 2012: OPEN STANDARDS AND DOCUMENT ORIENTED STORAGE
Publication date: 2013-03-28
Playlist: DrupalCon Denver - March 2012
Description: 
	Among the goals of Drupal8 is support for UUID's which seems to be well under way. Another topic of interest are further advances in supporting any kind of storage layer, specifically those emerging under the NoSQL umbrella. In this context there are two standards that are of interested: PHPCR and CMIS. PHPCR defines a standardized API for CMS storage with multiple implementations already under way, that heavily draws from the JCR standard. CMIS on the other hand standardizes a communication protocol. Both solutions also define import/export standards which at the very least could help in letting users more easily migrate their data, between servers. But also migrate from JCR/CMIS compatible solutions of which there exists many open source and proprietary products. The goal if this core conversation is to explore the relevance of these standards for Drupal. http://phpcr.github.com/slides.html
Captions: 
	                              so hi everyone we are going to start                               it's just a little bit best one we                               picked a really wrong title for this                               session so don't be too afraid but that                               we are going to basically talk about the                               way forward for auntie T storage and                               integral                                                            talk is about so I'm Daniel new I'm the                               CTO of Commerce guys and I'm going to                                leave the floor to look at miss for the                                first part we are going to leave we are                                trying we are going to try to do that in                                half an hour so a quarter of our age and                                try to have the floor open for questions                                for half an hour more we do have a                                strategy coming forward there but i'm                                going to leave to let Lucas talk about                                the stuff he has been working on since                                the past couple of years okay so I'm                                going to talk to you guys about                                something called PHP CR which is a                                specification for content management                                system storage ap is and yeah just bear                                with me we I'm going to explain a little                                bit how how it works what you can do                                with it and then damianos blue going to                                talk about how all of that can start to                                trickle into Drupal potentially okay                                normally for this talk I it takes me                                about one hour to do it so I'm going to                                do it in                                                               couple slides we didn't throw them out                                because we do want to give people the                                opportunity to maybe stop me if they                                think that something should be                                elaborated on and also just to make                                people aware that these slides exist so                                if they want to go back and I can check                                him out actually now if you have your                                laptop open you can go to peach pcr                                g.com and there is a link to the most of                                the slides that you see on this talk                                except for the stuff that diamond is                                going to talk                                so with further without further ado                                let's start so if you're a designing                                call management system you have very                                specific needs for your data storage and                                one of the specific needs is the fact                                that your data is going to be                                unstructured and so it will not be a                                natural fit for relational database and                                obviously today there are not a lot of                                so-called no SQL solutions which are                                sort of a perfect fit for that and with                                Drupal                                                                  that with you know the option of at                                least putting some of your data into                                MongoDB for example so you know that                                could be an obvious choice the problem                                however is that most of these no SQL                                solutions are not really meant to then                                also have maintained a tree structure or                                let alone a graph of these different                                pieces of content and they're sort of                                like a sub community within the no SQL                                world called graph databases which then                                try to address this however for the most                                part they're optimized more for like                                mapping like a social graph or something                                like that not really for managing larger                                pieces of data now the other thing that                                you want with the current mention ISM                                you want to be able to version your data                                you also want to be able to you know                                really closely managed the permissions                                on your data and things like that and in                                the end you want to have a system that                                is still workable for a normal human                                being without being confused and that's                                actually one of the historic sort of                                issues with many of the continent with                                system especially in PHP world is that                                their API is for storage are more like                                accidents that you know you know you fix                                and then you keep going and you fix and                                you keep going there was never really                                really the moment where people said this                                is the domain that we're trying to solve                                and this is the API we're going to use                                to solve that problem domain but more                                like okay we have this and then we add                                that okay no we have to refactor this                                and that what's why these api's become                                very complex and you know again I'm not                                a Drupal expert but what I hear about                                you know having an entity API in a field                                API and you know all of that sounds a                                little very accidental rather than                                 really designed                                 and you know with a clear concept in                                 mind now this is what what peach pcr                                 tries to solve and I highlighted                                 something here it's a standardized API                                 soap each pcr is not an implementation                                 of a storage API it's just the                                 definition of the API and that is very                                 very significant because one of the                                 biggest problems that you could try to                                 solve with a storage API is being the                                 perfect solution for everybody it's not                                 possible it's simply not possible what                                 you can do is you can define an API that                                 addresses a specific problem domain and                                 then let people have different                                 implementations of that API that are                                 optimized for different use cases so for                                 some use cases it might make sense to                                 have a separate table for each no type                                 but if you do that certain questions                                 will become really hard to implement                                 other questions will become very easy to                                 implement now if you're trying to do a                                 general purpose solution and you can                                 only go one way or the other or you go                                 in the direction of an API which allows                                 you to then have different                                 implementations that are optimized but                                 the higher level code that is using that                                 API remains the same so just quickly PHP                                 CR is actually based on the java country                                 tour repository specification which has                                 been around for over a decade now the                                 java guys are actually really really                                 happy with what we're doing so we                                 actually met up with the lead of the jcr                                 specification and it's been excited that                                 the next version of jcr will actually                                 include PHP CR which i think is                                 unprecedented like java specification                                 containing PHP see our PHP interfaces as                                 European I don't have to worry that much                                 about IP stuff or software patents but                                 indirectly becoming part of the jcr                                 specification also means that we will be                                 part of the same legal umbrella which                                 means that for people in the u.s. that                                 unfortunately do have to worry about                                 that that they're also covered in that                                 regard                                 one of the key things if you have a                                 specification like this is you want to                                 have multiple implementations and we                                 already have multiple implementations                                 being worked on one is Jackalope which                                 is implemented purely in PHP the other                                 one is called Midgard which is                                 implemented in C with Jackalope we have                                 an additional concept for transport                                 which actually we have multiple                                 transports being worked on the reference                                 implementation is the one using Java                                 jackrabbit and the great thing because                                 javadekar it already has all the                                 features implement of JC are you know                                 really made it very easy to get all                                 these features really quickly to be able                                 to play around with them and scale up to                                 let's say like to set up with hundred                                 gigabytes of data and you know work with                                 that sort of data set but we do need to                                 have a pure PHP implementation that's                                 just you know PHP and some relational                                 database that's what the doctoring dbl                                 transport layer is for and in theory                                 there could be once we have that working                                 it should be very easily possible to do                                 one based on DVD as well now here's just                                 a high-level overview of the features so                                 with peach pcr you get tree traversal so                                 you can you know look up the path you                                 can get its parents you can get its                                 children you can also optionally get a                                 uuid for any node and then directly find                                 notes based on the uuid and you can                                 reference other nodes based on the uuid                                 there's also a full text search api                                 there's versioning in there there's a                                 some of the features may be optional so                                 there's a capability discovery API which                                 lets you figure out what is actually                                 supported like is versioning supported                                 in this implementation or not there's                                 XML import and export and as a matter of                                 fact peach pcr essentially specifies in                                 XML database so you can take any XML                                 document and drop it into PHP CR without                                 having to do any changes to the data                                 itself there's also support for locking                                 in transactions and also for permission                                 control and finally also observation                                 which is sort of like triggers are for a                                 relational database I think I have to go                                 faster                                 so really so you have a document storage                                 API that is perfectly fit for tree                                 structures actually a graphs notes                                 basically are identified by the name and                                 their parent path and a little example                                 here so if you have a node store it                                 under my path under water fish then                                 actually that path is constructed from                                 the parent path and the node name fish                                 and so what is important here to                                 understand is that every node must have                                 a parent and every note must have a name                                 however you can actually have multiple                                 nodes under the same path which again is                                 something that is necessary for XML                                 compatibility but in practice I usually                                 disable that because it's not something                                 that you want to use on a node you can                                 have any number of properties you have a                                 couple examples of different types that                                 are supported so string boolean long                                 double date and all that references and                                 weak references are very important                                 concepts on the difference between the                                 two is that with the reference you're                                 basically maintaining referential                                 integrity so you cannot remove a note                                 that is being referenced but if you have                                 a weak reference that can actually point                                 it to nothing so that you can pick and                                 choose what you want to use what's great                                 though is that in peach VCR the                                 referring nodes has a list of you first                                 so you can always you know go it's sort                                 of bi-directional there's another                                 concept called primary node types every                                 note must have a primary node type and                                 with the node type it sort of as a like                                 a schema definition so you can mandate                                 specific properties you can mandate the                                 node types of children and things like                                 that and the important bit here is that                                 and you must choose a note and you                                 cannot change that than primary node                                 type after you created a note however                                 there's another concept called mix-ins                                 and with these you can you can add and                                 remove these later on so one example of                                 this is referenceable you have that on                                 the next slide so once you make a note                                 referenceable it automatic gets a uuid                                 and but you can also remove that Mixon                                 later on if you decide that it shouldn't                                 be referenceable and more and then the                                 you a uuid is removed in the same way                                 you can work with versioning when you                                 just make a note version of all after                                 it's been created and you can make it                                 remove that later on as well and you can                                 add your own mixing types and primary                                 node types and you can extend from                                 existing ones or from your own defined                                 ones there's another call sub concept                                 called workspaces I'm going to jump over                                 that because it's not so critical here's                                 a like a very bird's-eye overview how                                 you work with peach pcr basically you                                 have a repository you log into that                                 repository which gives you a session and                                 then on that session you can get node                                 instances and then get the properties of                                 these nodes and then interact with them                                 via the workspace you can get some other                                 objects as well for the full text search                                 capabilities and versioning I have a                                 bunch of code examples I'm going to                                 gloss over them but they exist what the                                 key thing i want to say here though is                                 that you see these first seven lines                                 this is all that is specific for one                                 implementation all the code examples                                 after that are generic so they should                                 work with any implementation of the                                 standard so here just you know crud                                 operations tree traversal versioning                                 restoring previous versions searching                                 there are different api's for that so                                 there's one that's sort of SQL ish                                 there's one that is object oriented and                                 we have a fluent interface on the object                                 oriented model as well the other                                 important thing is that if you have a                                 standard you need to ensure that people                                 are actually compliant to that so this                                 is the testitude running against Jack                                 Rabbit this is a test run it dude                                 running against the document database                                 abstraction layer implementations as you                                 see that that one doesn't have all the                                 features yet but the Midgard one                                 implementation also works against the                                 same test to to really ensure compliance                                 and I think that's absolutely critical                                 to have                                 there's also a similar to what you can                                 have with a noir M we have a simple                                 solution to make to basically allow you                                 to map objects to PHP see our nodes so                                 you but I'm not going to go into details                                 on that but that's a pretty pretty nice                                 solution that i'm using my daily work                                 quite extensively so the conclusion is                                 that really peach pcr tries to address                                 the problem domain of a content                                 management system it doesn't try to be a                                 general-purpose database so if you as an                                 example if you're creating a web store                                 you may not want to put your orders in                                 inventory into peach pcr because you                                 might be doing aggregate queries on that                                 like you're going to ask questions like                                 how many t-shirts has this person                                 ordered in the last month and these are                                 the type of careers you can effectively                                 answered with relational database but                                 not so much with PHP CR however when                                 you're talking about you know organizing                                 your products into categories and things                                 like that that's a perfect fit for PHP                                 CR and so again the key point here is                                 that peach BCR really is focused on the                                 CMS problem domain and you can mix and                                 match different database solutions also                                 key value stores for some situations                                 might make more sense than peach pcr and                                 yeah really just use the tool that is                                 ideal for whatever use case you're                                 trying to solve and I think that's yeah                                 some more information more information                                 contributors so we have quite a number                                 of people working on this although I                                 should admit that one-third of these                                 people were actually coworkers of mine a                                 bunch of companies involved bunch of                                 projects looking into that midgard and                                 simply to have adopted peach pcr typo                                  have something that diverged a couple                                 years ago but they might come back nuku                                 is a reimplement ation of the junior                                 Corps and they're also looking at peach                                 pcr in the future easy publisher looking                                 into it and I hoped rupal as well or                                 links more links and so sorry I was a                                 little too fast so maybe we should just                                 open the floor for questions                                 right after this part because you might                                 have some or maybe you are dead already                                 any questions for that part so I'm going                                 to do I'm going to go into trying to                                 figure out what does this mean for                                 Drupal and this is all this basically                                 all started in London in London I gave a                                 conversation about document-oriented                                 storage it was a first approach of what                                 needs to happen to actually refactor the                                 way we store entities in triple because                                 from experience and we have right now we                                 have an architecture that we have not                                 really planned for in terms of storage                                 the architecture itself really looks                                 like that so the color scheme is from                                 messy to less messy so we have as you                                 know we have this concept of entity                                 controller that in Drupal                                                loading and it is integral eight of                                 hopefully support the world crud                                 operations and this entity controller is                                 basically going to store some of the                                 properties of an entity but not all of                                 them it's going basically to store is                                 responsible for only the part of the                                 entities that is taught in the base                                 table of the entity so it's responsible                                 for that's the system that is                                 responsible for maintaining that that                                 data in the node table incidentally also                                 in the node revision table in the user                                 table etc on the other side we have the                                 field API and the field API is                                 responsible for storing and managing                                 everything that is the field so it                                 realized it is it has been nicely                                 designed in the sense that the way we                                 store the fields is actually pluggable                                 so you have this notion of fuel storage                                 that is perfect and that is responsible                                 for storing the field so prime that it's                                 not those no those are not too                                 independent things there is one system                                 in the middle which is entity felt query                                 which is our querying language for                                 entities that actually needs                                 no about boss and depending on the use                                 case and depending on of the entity                                 filled query you try you are trying to                                 execute either antiquary is going to                                 execute the query directly through the                                 HC sequel database or it's going to                                 delegate the query to the field storage                                 and the field storage needs to know boss                                 because it needs to be able to to                                 execute the query that applies boss on                                 properties of the base level and                                 unfilled and the privacy that it's not                                 designed to do that so what what's                                 happening is that when we have the                                 implementations of the field storage we                                 have in country especially the MongoDB                                 implementation are basically boss a fuel                                 storage and an entity storage at the                                 same time we don't in the MongoDB                                 implementation we don't store only                                 fields we stop the war entity object so                                 that we can actually execute entity feed                                 query on boss properties of the base                                 table and unfilled so that's the current                                 state of the game so during my talk in                                 london i was convinced that we would                                 have to re-implement a fill storage by                                 ourselves now that we looked a little                                 bit into PHP CR and way less convincing                                 that and i think that peach pcr could                                 long term satisfied most of the most of                                 our needs in terms of entity storage                                 probably not all of our needs but we can                                 work with a PHP see our community to                                 have that implemented and so PHP CR is a                                 potential long-term solution for entity                                 storage mechanism the problem is we                                 don't have that much time so                                 the code freeze for Drupal                                      something like eight months away it's                                 basically the end of the year so we                                 don't have a lot of time and especially                                 we don't have the time to work both on                                 the PHP see outside and on the Drupal                                 site at the same time to make sure that                                 they satisfy needs so what I suggest is                                 that we go into a strategy with a set of                                 steps and the first tab is actually to                                 clean up what we have right now so the                                 architecture I suggest is that we remove                                 that dual storage and unifies the                                 storage into a single entity storage so                                 I suggest that removes the field ap is a                                 fuel storage part and move both                                 properties and feel storage into a                                 single unified interface interface that                                 is pluggable so that you can replace it                                 with other implementation and but the                                 idea of this first step is absolutely                                 not to touch the data model we are not                                 going to touch anything about how stuff                                 is taught using the sequel                                 implementation that I still going to be                                 stored in a base table and in a one                                 table preferred for for all the fields                                 in the fields data the only thing that I                                 suggest is that we unify that into                                 narrow focus storage interface that is                                 specific to storing what looks like a                                 group or entity meaning something that                                 has some of them are property of                                 vegetable and some of them are fields so                                 I'm not suggesting we implement I'm not                                 suggesting at this point we implement a                                 generic document-oriented storage not at                                 this step just suggesting we clean the                                 mess we have from                                                     that using the consistent interface the                                 problem that to do that we have to do a                                 couple of things first and there are a                                 couple of prerequisites for this step                                 especially the way we currently the way                                 the taxonomy term entity isn't                                 implemented is so very messy it hurts                                 and there are two things we really need                                 to fix before being able to unify the                                 storage first thing is that the term                                 yaki actually needs to be filled it in                                 Drupal                                                                   doesn't store data that some things that                                 want to extend an entity and does                                 install data in a field is wrong we                                 learned that right so every module that                                 was in tuple six every module was trying                                 to implement its own storage separately                                 the idea that the field is a primary way                                 of stirring something that extend an                                 entity in Drupal                                                    doesn't do that cost of the Yaqui                                 between terms in a separate table that                                 is not Affeldt so we need to be to make                                 that a field which has some interesting                                 consequences the second thing is that in                                 for taxonomy terms we currently stores a                                 VI d of the vocabulary not the actual                                 machine name of the vocabulary which                                 means that the storage for core is                                 actually completely inconsistent is that                                 the storage for such taxonomy term is                                 completing inconsistent and it means                                 that you cannot actually do an entity                                 field query on a taxonomy term filtered                                 by banned by the bundle of the taxonomy                                 term that's not supported that just                                 doesn't work because texting me terms                                 are not stock properties I should store                                 the bundle name directly into the                                 vestibule of the entity and instead of                                 that they store the ID of the vocabulary                                 so we need to fix to fix that couple of                                 things before being able to implement                                 step one so step one is really the only                                 things that i want for drupal                                            is if we have time let's try to do                                 something like that so the the possible                                 step two is to adopt PHP CR and when you                                 look at it the the                                 the architecture is really really                                 similar to this one basically the the                                 box are the same the idea is to just                                 move the responsibility for dogs                                 elsewhere so in step one we had this box                                 that is the aunt Ida storage interface                                 basically that that maps to a PHP PHP                                 see our session or workspace we have                                 this box that is our entity field query                                 query language that actually maps well                                 really well to pitch VCR types of                                 queries all to the affluent setup phase                                 provided by the query builder these                                 things that we have that is the                                 documents tour in support that maps                                 really well to pitch pcr implementations                                 or Jackalope transport and Jack Arab is                                 has a sequel based implementation that                                 we could use that is going to store the                                 data differently than our current                                 implementation but that should be all                                 right but that should be all right for                                 most of the small use cases but to be                                 able to do that there are a couple of                                 prerequisites which some of them might                                 make it impossible for the parade on the                                 Drupal site we are going to need to come                                 up with a mapping between our concepts                                 and it isn't filled in to pitch pcr into                                 a pitch pcr schema so into a pcr                                 notion of node versus properties and                                 also the PHP see obstacle implementation                                 the Jackalope sequel implementation is                                 currently built on top of doctrine dbl                                 dbl so in so either we adopt doctrine                                 DBA are as a replacement for DB TNG                                 which is a large endeavor or we                                 implement the secret permutation of                                 jacket up on top of dbt ng which should                                 actually be easier to do so that's for                                 the Drupal side but there are also                                 some stuff that we might want to                                 consider helping on the ph pcr jacket                                 upside first thing is that the jacket                                 obstacle implementation is not very                                 scalable it's even less scalable in most                                 use cases and our current cycle                                 implementation which is a challenge so                                 we might so we probably need to work on                                 improving the scalability of this                                 implementation my ballpark figure is                                 that for something that is less than                                                                                                     nodes or entities in a website the                                 sequel implementation should have the                                 same scalability aspects than the                                 current secret storage we have so that's                                 my benchmark might rent brackets to do                                 not worse than what we have in call                                 right now for sites that as that have                                 less than ten tens of thousands of nodes                                 there is also one of the things that we                                 might consider is implement having an                                 implementation of peach pcr that stores                                 that stores note per the different note                                 / the / type on different tables meaning                                 that we could have a user table a node                                 table etc right now the implementation                                 stores every object you put it in a                                 single table which is going to freak                                 people out it's not necessarily bad in                                 terms of performance but it's definitely                                 going to freak people out and generally                                 we as everything we adopt from elsewhere                                 we should really consider heavily                                 contributing to the those external                                 project I'm actually that price for                                 follow that would apply for this but                                 I'll also apply to all the components we                                 have including for included from                                 symphony the Drupal core contributors                                 really needs to become Symphony core                                 contributors because if we don't do that                                 that's never going to                                 work there are a couple of other steps                                 we can't we can take and one of them i                                 would like to emphasis is search one of                                 the nice thing about peach pci that you                                 get full text search across all the                                 fields of your entity by default the                                 problem is that this is specified in the                                 peach pcr specification but it's not                                 currently implemented its equal and the                                 nice thing is that we have a super nice                                 sequel base full text search                                 implementations that scores a search                                 module we could take this implementation                                 and contribute that back as a full text                                 search implementation for Jackalope                                 witches hpc our reference implementation                                 so that's definitely something we could                                 do and we could remove most of the code                                 from the search module and stop                                 contributing and stopped maintaining it                                 just by ourselves and adding a larger                                 community of people maintaining it a                                 couple of other fun stuff we could do if                                 we have time but the in a nutshell see                                 the thing I want to emphasis here is                                 that there is absolutely no way we                                 manage to adopt peach if the full PHP CR                                 migrate everything to pitch pcr in                                 Drupal                                                                 but if we can come up altogether and                                 clean the api is that that type of stuff                                 is possible for drupal                                                think that already would be amazing so                                 that's about what i wanted to say we                                 have a couple of resources for jacket up                                 the to RSC channels the is a github                                 project for PHP CR and the reference to                                 the specifications so that's the only                                 thing i wanted to know i wanted to say                                 at this point we are going i would like                                 a bunch of us on friday to come out                                 together and start working on the first                                 step i think that if we have the right                                 people in the room the first step could                                 actually be implemented by friday night                                 and that would be amazing so that we can                                 move on with our lives and                                 building the rest so if you are willing                                 to join me on Friday to sprint on on                                 that part and get a set of patches                                 together that would be amazing and it's                                 now                                                               questions                                 hi so it sounds like having this kind of                                 implementation in place would make it                                 trivial in order to export content from                                 one website and import it into another                                 website even if that website wasn't                                 necessarily a Drupal site but was                                 supporting jcr is that kind of something                                 we have on the radar and that's not true                                 okay that's not true GCR and peach PCR                                 is a storage specification so it specify                                 an API to access a storage layer so it's                                 basically the same as saying it would be                                 basically the same as saying because                                 those two systems are implemented on top                                 of my sequel database it's trivial to                                 exchange data between the two that's not                                 true the way you store data is not not                                 doesn't really have an impact on the way                                 you exchange data but there are                                 specifications that could be used for                                 that and one of them is seems as well SI                                 mas ah and that's specifications for                                 external exchange between systems the                                 fact that two systems are built on top                                 of GC RPG pcr doesn't means that they                                 are going to be able to exchange right                                 but once once the interface is in place                                 that you could it would be your only                                 would have to write that part that you                                 would have to build an interface to see                                 in my ass yes so that's more in the                                 focus of CM is that was in we were                                 planning initially I'm talking about sea                                 mas but finally we decided that we it's                                 too boring that was kind of interesting                                 to me this looks very good one of the                                 key questions are help though one of the                                 limitations with Drupal sites that use                                  their back-end great now is                                 there's a lot of cross entity queries                                 that become very complicated to do the                                 canonical example is you know artist and                                 album and                                 track for like music CDs and you want to                                 pull data from all three entity types                                 and you can do that fairly easily by                                 just hitting SQL directly in views and                                 if you have mongery back end you can't                                 actually do that kind of query how does                                 jcr handle that kind of problem space                                 where you have these complex multi                                 entity queries so I think that what you                                 are describing is an assertion of Jones                                 yeah that joins or abusive relationships                                 and a PHP CR as Giants okay how does it                                 Emily like that then for no SQL database                                 that's the program is no sequel database                                 so it so it doesn't fully abstract that                                 then well it does but it's the you don't                                 have to concern yourself with it because                                 you're using the API so how they                                 implement that is then the job of                                 whoever implements you know that                                 specific implementation and yeah it's                                 possible to do it and there might be you                                 know some work to do and again it might                                 mean that some peach pcr implementations                                 are better at answering specific                                 questions than others but the key thing                                 is that you can choose which one is the                                 right one for your use case and that is                                 something that is currently not possible                                 okay thank you hi I'm curious about the                                 workspaces and I think when your slides                                 compared workspaces to get or svn                                 branches and the way I've been thinking                                 about how content editors have to deal                                 with content currently in Drupal is                                 similar to Dreamweaver check in check                                 out which I had used for managing code                                 years and years ago because when you                                 edit a node you go in and edit if                                 someone else goes and edit those two                                 forms both can't submit is there an                                 implementation currently that that uses                                 that get or svn concepts that you                                 mentioned to make that part of content                                 editing easier okay so workspaces are                                 the idea what works is basically gives                                 you a separate like data tree that you                                 can use and you can merge data from one                                 workspace to another and so you could                                 have one for like draft and                                    for production staging development and                                 sort of so you can move data between                                 these things it's in a way so yeah it is                                 similar to get or subversion in that                                 sense but really just you know being                                 able to merge data from one work space                                 to another there's another like the                                 versioning concept there's two actually                                 two different types of versioning there                                 there's a simple versioning which is                                 just a linear version history there's                                 full versioning which actually allows                                 you to have branches and tag versions                                 but I wouldn't really use that for                                 modeling like a draft workflow and                                 probably not the right right tool to use                                 for that because only the latest version                                 or the top version would be indexes part                                 for this full-text search api and so you                                 know would kind of be weird like in the                                 in your work when you're looking at the                                 draft data you couldn't I would sort of                                 yeah it wouldn't really play well with                                 the full text search but if you have                                 separate workspaces then for these they                                 have separate full-text search indexes                                 and it would work just fine okay and and                                 what about branching for multiple                                 editors say a newspaper site that is                                 preparing for two possible outcomes of                                 an election would it be appropriate to                                 use one work space for one potential                                 outcome and another work space for                                 another potential outcome that would                                 probably not be practical so in theory                                 it's up to the implementation how it                                 implements the workspaces however it's                                 very hot like most implementations of                                 jcr and I think that's also going to be                                 our reality will actually do when you                                 create a workspace you can clone an                                 existing work space but it actually will                                 copy the entire data in theory you could                                 have copy-on-write but so it wouldn't                                 really be practical because you know if                                 you have like                                                          you know you clone that just to handle                                 one election switch that wouldn't work                                 well but for that use case yeah it might                                 make sense to them have your draft                                 workspace and then to use full                                 versioning to have two different                                 branches and then one that when the                                 election is done you basically say okay                                 now I'm going to put this version at                                 up and you say this is actually the the                                 current active version Denton okay thank                                 you yes oh I guess that I guess that's a                                 way to rephrase that is that as far as                                 the API is concerned workspace is a                                 right object to do that but it's not                                 magic so right now it doesn't most of                                 the implementation of that I'm not going                                 to be really practical for any of those                                 use cases now even believe that the                                 specification doesn't even describe                                 merging work spit that data between the                                 road space it does okay um I'm mistaken                                 then okay next okay um first of all I'd                                 like to mention i really like the                                 proposal it sounds like a really good                                 plan in particular for aiming it to                                 enable                                                                  sounds reasonable in regards to storage                                 I think unifying entity band food                                 storage is really something that that                                 needs to happen and it has some                                 consequences for like we won't have any                                 mixed entities to watch more so we                                 basically have to live with that                                 assumption that we have a single storage                                 back and entity type and I really think                                 this is a same assumption to make and we                                 really should go that way and it also                                 partly plays into some discussions we                                 recently had the entity API boss where                                 we were thinking about unifying fields                                 and properties on the entity API level                                 such that the entity by only has a                                 notion of properties which then the                                 defeat API basically build up more to                                 implement defeats so how do you think                                 about the regulation between poverty's                                 feeds and though that in the gutters                                 thought so just to just to reply to the                                 first question                                 yes the assumption that we are making                                 here is that the storage is going to be                                 parented to type not perfect anymore                                 that said I have I don't know if there                                 is really a use case of a finger storage                                 or failed so i think it's not a                                 practical a really a practical that                                 doesn't have any practical consequence                                 on the other hand having the ability to                                 completely store entities in a different                                 storage including a remote storage has a                                 lot of practical implications and that's                                 really desirable so yeah that's that                                 compromise we are going to need to make                                 for the second questions and i don't                                 believe i believe there is a lot of                                 things to do in terms of of that time                                 alone and yes unifying everything that                                 removing the company difference of                                 context of concept between properties of                                 the base table and fields is this orb or                                 long-term no doubt about that and I                                 don't put but I don't believe that this                                 cleanup is related to any of that in a                                 way we can do that those are two                                 different two independent discussions to                                 have but yes I think it would be                                 desirable to have only one concept that                                 is a field I mean that is what we                                 currently called the field meaning it                                 has a way to store it it has a format in                                 test for my others it has widgets to                                 edit it etc and if we have that under a                                 single API it would make the lives of                                 everyone way easier there are a couple                                 of things to consider around data                                 consistency and the ability to have                                 unique keys on films and stuff like that                                 that is currently not possible but that                                 we would need to to to talk about during                                 that migration but I think overall it's                                 desert one there are other stuff that                                 could be desirable we could remove                                 completely the notion of fields for                                 example we could make everything                                 entities in a way and have a way to say                                 that this entity is actually has                                 actually a parent to this other entity                                 which means that the nesting as we do                                 for fields right now could be done by                                 nesting entities that also something we                                 could consider so many fun stuffs that                                 we could do the idea is that there are                                 steps that                                 are realistic to do before Drupal                                      released and there are steps that are                                 going we are going to dream about for                                 generations so I would like to have                                 something really real income about about                                 all that so that we can build fancy                                 stuff in country later just had a                                 question regarding the database back-end                                 and have you guys considered having                                 multiple simultaneous backends so an SQL                                 one hand the MongoDB one and having ad                                 normalizer is it may be at the entity                                 controller level and so that you can                                 have really really fast queries and also                                 have all the complexity of the joints                                 that you need and so just wanted to take                                 a little bit to that so that's exactly                                 the vision the way I see it you are                                 going to pick a storage per entity type                                 and the storage can be as specific to                                 your use case as you want so you could                                 have very specific storage that is the                                 anomalies the normalizing the data in a                                 specific way that is adapted to your use                                 case the idea that there is no generic                                 way of storing the data that is going to                                 work for every type of query so we                                 should not talk about we should not care                                 about that at all it is that we are                                 unifying the storage into a consistent                                 API so that you can do whatever type of                                 storage is the correct one for your use                                 case okay thank you maybe I can quickly                                 elaborate that so really the vision is                                 that right now we have the Jackalope                                 which has three implementations or three                                 different storage systems integrated so                                 Jack Rabbit which is you know java                                 implementation of jcr which you know                                 based we know clustering and all that is                                 really fancy and really I mean it scales                                 awesomely                                                               the database abstraction layer                                          into a relational database and there's                                 you know very early work for a MongoDB                                 one that can be                                                          be a hybrid one that uses long will be                                 for some stuff relational for others and                                 then there's the midcard one which is                                 implementing scene also use the sequel                                 database                                 now the great really the thing is that                                 we want to see I want to see bazillion                                 implementations for for every specific                                 use case and when you have you know you                                 look at performance issues in your                                 installation or you're looking at the                                 setup you look at the the things that                                 you can offer like obviously a shared                                 host user will not be able to use                                 jackrabbit obviously so they have some                                 constraints and features that they have                                 available and they have some                                 requirements in terms of performance and                                 you will find you will look for the one                                 that most closely matches that and if                                 you then still need to do more work                                 these are open source implementations so                                 you can still fork them and change them                                 but all the modules on top is to keep                                 working right and that's right now like                                 a lot of modules they're doing                                 optimizations by running SQL queries                                 right that's what they do and that                                 basically kills the entire idea of being                                 allowing people to do optimizations on                                 the lower level like you cannot just                                 like when you start like changing your                                 data model around to fix data then you                                 know modules break and and and so you                                 don't do that or you rewrite the modules                                 and when we have those clean separations                                 all of this is now possible you have                                 like a huge new dimensional optimization                                 potential on the topic of unifying                                 properties and fields does that mean                                  changing sticky and front page two                                  fields that could perhaps be disabled or                                  a given content type yeah great that                                  right now in our data mode in the                                  concept or data model of Drupal there is                                  absolutely no point in those properties                                  with stones of a stable I concept Teresa                                  is absolutely no point so if we can                                  unify that we should mm-hm and going to                                  be slightly hard and perhaps a little                                  fuzzier what about URL aliases and menu                                  links with the concept of revisions                                  there there could be a case where you                                  have a published version of a node and a                                  version that you want to be published at                                  some time in the future which could                                  result in the URL alias changing right                                  now there isn't a clean way to do that                                  because the relationship is between the                                  URL alias and the node                                  and not the revision so should things                                  like URL aliases menu links have a                                  storage that relates to the revision                                  basically a field based storage in                                  addition to the storage and the actual                                  URL alias or patty aliens table that                                  does the work of aliasing separate from                                  the storage of the data so that two                                  different questions they think the first                                  one is a west should those thing be                                  stored in the first place currencies are                                  stored in the database and they don't                                  map really well to add to either the                                  configuration storage of the entity                                  storage so those are part of the fuzzy                                  thing we don't really know where to put                                  there is actually an issue about moving                                  menu links to entities which would make                                  a lot of sense and the other question is                                  about where hope we can relate those to                                  something else and yeah in many ways the                                  stirrings your yes of a node inside the                                  node so as you failed would make a ton                                  of sense from that would you worry                                  across that and how do you make sure                                  that there is only one unique URL yes                                  ever so they are there are questions                                  regarding all of that the easiest way                                  would probably be to make references in                                  that case because nesting everything                                  under a single document is kind of gross                                  too so at one point you really want                                  different documents if the things you                                  are manipulating is different in nature                                  so I don't have a precise answer for any                                  of those okay that really needs to be to                                  be studied but those are really really                                  good questions especially you are                                  already asked aliases because as you                                  point out so they are dependent                                  dependent on the content which means                                  that it makes absolutely no sense to                                  stores at as configuration so I didn't                                  explain that before but I'm actually                                  also the competition so I'm the lead of                                  the simply to cmf initiative and we're                                  trying to blow away Drupal no but so                                  we are we also using PHP see are there                                  and one of the concepts that we're                                  working on is that we will we the idea                                  is that one you have your content and                                  you organize content in a tree structure                                  that makes sense for the content and                                  then second you have any number of                                  reference structures that reference that                                  content that can be representations for                                  your different websites so four                                  different languages for different output                                  formats you just reference the the                                  content nodes but you can have you                                  totally separate that and so in this                                  this is like very minimal amount of data                                  because really just building a tree of                                  references to the actual content so it's                                  very easy you know to move that around                                  and and maintain it that sort of thing                                  and also prepare different versions of                                  that all those trees to be used at will                                  but really the ideas there then you can                                  have like on your french website you may                                  not have all the content translated yet                                  so you may you know change the tree                                  structure a little bit here and there                                  but you know it's possible the same                                  thing for your mobile website you might                                  have a flatter structure leave out some                                  pieces and that's all possible so that's                                  what that's how we are using PHP CR I                                  don't know how that maps to what Drupal                                  is doing today but if that could be a                                  model that you could use in the future                                  okay thank you so one thing I was                                  unclear on with PHP CR in the mia you're                                  saying that we'd lose / field storage                                  I'm not entirely sure I read the soap                                  worth well trade off but that's for                                  another time does it still support /                                  type storage like right now you can put                                  users in SQL and no it's in MongoDB is                                  that something that you would be able to                                  do well as that's independent of peach                                  pcr it's really a question of the Drupal                                  plan to add up that and it's basically                                  the question you ask is on this thing so                                  on this thing was my vision is that                                  storage should be per entity type so you                                  have a possibly one different storage                                  per entity type including some remote                                  storage for some type of entities and so                                  that we move from per file storage into                                  per entity type storage ok so you'd                                  still be able to do you know I've got                                  five entity types in store them in five                                  different types of data storage yeah you                                  could store some of them in Seaport some                                  of them in read-only file summons some                                  of them curry Twitter or figure directly                                  some of them are stolen MongoDB etc ok                                  good a quick question on the GCR                                         you mean PPC our storage can be swapped                                  with any storage that supported GCR                                      like a frasco is having ask jas are                                     combined so yeah there are there a bunch                                  of different implementations of jcr                                  Jackrabbit is the reference                                  implementation there's another one                                  called mode shape and so and so forth                                  however and that's difference to CMS jcr                                  and peach pcr they define an API that                                  you used inside your applications but it                                  does not specify a transport protocol so                                  it does not so when we're talking to the                                  integration that we have with Jackalope                                  talking to Jack Rabbit that's using open                                  source yet you know proprietary in the                                  sense that it was developed by the                                  jacquard guys api called avex which                                  works over HTTP so alfresco does not                                  implement that same API so we can't just                                  use we can't just put alfresco behind                                  Jackalope we would have to do a little                                  bit of work to expose that it's possible                                  but and maybe cmas can actually help                                  there and you know we can look into                                  these sort of things and since we kind                                  of glossed over cmas i guess i'll                                  explain a little bit about it like Cena                                  is really to me as more of like it's a                                  specification for the protocol whereas                                  jcr is an API that you use in your side                                  your applications one of the interesting                                  thing is that there's actually there's a                                  project called Apache chemistry which                                  can basically                                  or was created for the jcr                                  implementations to turn them or it can                                  basically take any jc-rs store and                                  provided this are exposed as a seamless                                  repository and we could do something                                  similar for for peach VCR as well and                                  then maybe based on that we can have                                  some generic solution to be able to call                                  into any peach pcr implementation or any                                  jcr implementation so things like that                                  can happen but they're probably not                                  going to be like super performance and                                  but there could be ways of like just                                  saying I just want to you know get some                                  of this data in there as well right you                                  know so you can you know call into stuff                                  as needed but you probably in the end                                  like really your your key data that you                                  want to use all the time you probably                                  want to have a little bit closer                                  together hi there um adobe cq                                          successfully uses the jcr repository                                  backend have you guys looked into any                                  other big CMS's that are successful                                  using it to see a model and how they                                  scale the workspaces and other issues                                  that running into because I can foresee                                  us running into that similar issue or                                  many similar issues because it's the                                  same business problem we're solving                                  right yeah yeah we are and we actually                                  very expect there a couple Java                                  condominium system that are built on top                                  of jack rabbit so adobe CRX is one of                                  them Magnolia is another one it was CMS                                  is another one the last two are                                  open-source CRX obviously isn't and                                  we're actually really closely talk                                  talking to these people and also I mean                                  we've pushed actually a couple patches                                  into jackrabbit we're improving                                  Jackrabbit as part of what we're doing                                  improving the HTTP interface the daleks                                  interface and we're also talking about                                  you know advancing Jackrabbit to have                                  faceting support and things like that                                  which actually hippos TMX our CMS always                                  provides and so it does also enable and                                  see you could if tuple adopts peach pcr                                  you could have an installation that                                  actually has CRX talking to Jack Rabbit                                  and then and drupal talking to the same                                  jackrabbit instance however and that's                                  again that's something that Tamiya                                  you mentioned obviously you can like the                                  way that CRX might you know store                                  translated content might be very                                  different than how Drupal decide so it                                  you know might not like work perfectly                                  and there might be some work to do in                                  there but in theory it's sort of                                  possible and of course also and I think                                  that touches also on your question a                                  little bit we can you look at how                                  they're using Jackrabbit how they are                                  storing translated content and you know                                  learn from there one of the resources                                  are linked is it blog post by David                                  Miller he's the lead of the jcr                                  specification and also obviously works                                  for Adobe so he's active on CRX and the                                  the block was called David's model where                                  he has like seven points where he talks                                  about things that he learned as he was                                  you know in his experience working with                                  JC are in the real world so there's a                                  lot of experience that Drupal could then                                  also draw upon and you as a Christian no                                  big conceptual questions just how far                                  along in development is this like are                                  there active you want PHP examples like                                  working that you can go out and download                                  and get an example of and running so the                                  symphony to cmf project aims to have a                                  first release this summer there is                                  already sandbox which actually already                                  has inline editing that's way cooler                                  than anything that Drupal has and in                                  some back adding capabilities and things                                  like that so yeah you can play with that                                  however peach pci really also work                                  standalone we have a tutorial that you                                  know you can go through that's linked on                                  peach be sorry github com again like the                                  best implementation at the moment uses                                  jackrabbit but you know running jack                                  crab is really easy you download a jar                                  you type java does char name of jar and                                  jack rabbit is running okay so it's it's                                  easy to get going with that and but                                  actually what we like we're finishing up                                  some of the api's at the moment but the                                  that we were most working on at the                                  moment is the doctrine database                                  abstraction layer implementation and                                  actually just the other day we finally                                  managed to get our sandbox working with                                  the database abstraction their                                  implementation so if you don't if you                                  you know insist or not using java at all                                  you can also play around with the                                  docking database abstraction layer                                  implementation already how far along is                                  the MongoDB implementation very very                                  very very very rough and so the guy that                                  worked on it he did a lot last summer                                  and he was pretty much on par with the                                  database abstraction their                                  implementation and then since then he                                  hasn't done much and he is he told me                                  that he wants to work on it and over                                  spring again actually men of the many of                                  the things that we have to solve is part                                  of the docking database abstraction                                  there are things that actually also help                                  the MongoDB one and but yeah right now                                  it's not something that we were we're                                  really pouring on our resources we are                                  more focused in the doctoring database                                  abstraction everyone okay thank you                                  already mentioned translation and I                                  wonder whether they pitch pcr interfaces                                  and api already handles storing                                  translated content anyway such that it's                                  part of the interface so that's actually                                  one of these things that I that really                                  surprised me so jcr does not cover                                  internationalization which i think is a                                  oversight i think it should be in there                                  but they don't have it in there and                                  therefore peach pcr does not have it                                  either i mentioned that there is this                                  peach pcr odm so that i can or m                                         pcr and there we've integrated                                  internationalisation so they're actually                                  it's a pluggable system so you can                                  implement different strategies we                                  provide two strategies out of the box                                  one is basically so yeah I don't write                                  ooh explain without showing a slide so                                  when you're mapping out like you have                                  with PG crm you basically have plain PHP                                  objects and then you can write mapping                                  information how which field should be                                  stored which type they are and in that                                  when you're when you're specifying this                                  mapping you can optionally also say this                                  is                                  the translatable field and this is a                                  translatable field and then you can pick                                  a strategy and based on the strategy it                                  will either store all the translated                                  feels as a child node so so when you're                                  storing an object would you know store                                  it on the path X and then for every                                  lokale that you've translated this node                                  in you will have a child you know / en /                                  f r / de with all the fields that are                                  translatable and the other option is you                                  that we've already implemented as well                                  is that you can have store them on the                                  main node and then just like for example                                  if you have a field title then it would                                  be stored as title underscore yan title                                  underscore F R now the cool thing with a                                  PHP CRM there's like a method find                                  translation for example so you say                                  here's my path name and the locale and                                  then it will get that object populated                                  all the properties for that locale now                                  you can manipulate that data and then                                  say bind translation en and then when                                  you persist that then you're going to                                  persist that as English so it really                                  it's a really cool system to work with                                  translations however obviously this like                                  this odm approach really wants you to                                  have fixed object like PHP classes which                                  wouldn't work so well if you're saying                                  like you want to give somebody an                                  interface where you can say these are                                  you know my like my new node type and                                  you know these are the properties you                                  would have to generate a PHP class which                                  is I guess a no-no in duple and so maybe                                  there could be a middle ground for doing                                  still doing something similar to that                                  but so that's basically the strategy we                                  have at the moment for the symphony cmf                                  project we have these two different                                  strategies for storing translations and                                  you can really easily pick the one that                                  works best for you and you could plug in                                  one that you prefer if you want to do                                  something different so in a nutshell                                  it's not that different than what we                                  have right now in Drupal                                  and it's basically you have the same                                  program in every type of document                                  oriented database which is that yeah you                                  have different ways of nesting the                                  language and deciding where you put the                                  localization and there is different best                                  practices so allows the same issue of                                  you handle translation and different                                  multilingual content in surrounds it run                                  so there are stuff we could get inspired                                  with in terms of API in the odm project                                  but in terms of storage we are basically                                  on our own we just need to pick our                                  practice okay so thank you very much                                  everyone so there is a mandatory slide I                                  have to show the thing so well happen
YouTube URL: https://www.youtube.com/watch?v=--JaDRQjDc4


