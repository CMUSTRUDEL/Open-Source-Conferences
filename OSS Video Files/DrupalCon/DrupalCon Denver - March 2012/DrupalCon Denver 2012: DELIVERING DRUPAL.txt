Title: DrupalCon Denver 2012: DELIVERING DRUPAL
Publication date: 2013-03-28
Playlist: DrupalCon Denver - March 2012
Description: 
	Brutal truth: as a community, Drupal's understanding is pathetically behind much of the world when it comes to devops and deployment. Most shops, and even many larger companies with dedicated Drupal teams, use one-off, unstructured, error-prone systems to get code from development to production. This is not OK. In my experience, these problems are cast under the umbrella of project management. As such, solutions tend to come in two forms:
Better project tracking software.
Better human communication.
Those things are important, but they really miss the big picture. At the end of the day, what matters is getting code from development to production - "delivering" it. Doing that properly means demystifying and solidifying the steps in that process, which entails tools like Git, Jenkins, Puppet/Chef, and Capistrano. Or, in a word: Devops. Building a system that can deliver code in a way that informs and includes all the relevant stakeholders, from developers to product owners, requires the right tools linked with the right mentality. In this session, we'll explore tools and mentality together.

Questions answered by this session: 
How do we make deployments easier and less risky?
How should I use (Git, Jenkins, build/make systems, configuration management) to make my organization's development workflow more effective?
What are the benefits of automated testing to Drupal sites we work on, and how can we effectively integrate it into our development workflow?
Captions: 
	                              alright my clock tells me it's                                      we'll get this last slot session on the                               last day of drupalcon started thank                               somebody for coming my name's Sam Boyer                               I've been a drupal developer for I don't                               even know five years something like that                               I maintain panels and see tools with                               Earl miles and I'm also your friendly                               get administrator on drupal.org all your                                pushes are belong to me and recently                                what's that Oh speak up alright move                                that around a little bit more recently I                                have been shifting my focus kind of                                further down and down into the the stack                                of the Drupal world towards the DevOps                                side of things which is what we're here                                to talk about today so um who's heard of                                continuous delivery ah continuous                                integration but continuous delivery good                                show hands all right who's like actually                                taken serious steps towards implementing                                continuous delivery that's this is this                                is good because this is about what I was                                expecting yeah we generally in in our                                community are somewhat somewhat under                                aware of a lot of the best practices                                around around software delivery we we                                tend to kind of muscle things out so the                                goal of this talk is to give a general                                overview of some of the principles in                                continuous delivery and I'm going to try                                to mix sort of the forest and the trees                                the high-level concepts as well as some                                practical applications to give you a                                sense of how to how to apply these ideas                                because the first thing to say is it's                                really really hard to do like full-on                                continuous delivery it's a major                                commitment and you can get a lot of                                value out of it if you if you do parts                                of it but still it's it takes a lot                                alright so DevOps I'm going to steal a                                quote here at its heart DevOps focuses                                on enabling rapid reliable releases to                                users through stronger collaboration                                between everybody involved in the                                solution to delivery lifecycle one of                                the important results of this                                collaboration is the application of                                agile practices to the work of                                operations in particular aggressive                                automation of the build deployed test                                and release processes for hardware and                                system environments so let me just                                highlight those those words on there                                because really that's the key thing                                along with aggressive automation Jess                                humble is the author of the book                                continuous delivery he works for thought                                works I'll steal more things from him                                later in the presentation but there's                                sort of a really the thought leader in                                this entire space but this is a really                                important sort of overall concept and                                I'm starting at the concept level here                                the idea is that if we can aggressively                                seriously automate most of the steps                                between when your code gets committed to                                when it's actually deployed everything                                works better and realistically those                                processes tend to be billed deploy test                                and release so as I mentioned we are                                generally not that knowledgeable in this                                community about about these kinds of                                practices so I kind of have a                                proposition for how i see it if you're                                not familiar with the website clients                                from hell become familiar with the                                website clients from hell because your                                life will be better for it but yeah a                                client can you just get rid of this hear                                me the lorem ipsum client yeah just fill                                it with dummy text that doesn't mean                                anything in this proposition we all are                                a little bit like the clients because we                                know the end goal that we want we want                                that dummy text that doesn't mean                                anything but we are kind of vacuously                                unaware of many of the                                the best practices out there so apart                                from just insulting everyone in the room                                there's an actual point to that though                                which is that it's it's not just about                                saying that we're not really aware of                                how many of these things are supposed to                                work there's actually like there are                                really useful crutches that we rely on                                and I want to talk about those so when                                we think about what our sites actually                                 are a Drupal site we tend to sort of                                 think of it as my site it's it's the                                 production version of it it's got the                                 set of features and and and and modules                                 installed on whatever on it that's their                                 right now in reality though no                                 production site is well okay unless                                 you're making changes on production in                                 which case yeah so unless you make                                 continues on production really any                                 production site is much better properly                                 understood as the end point of a process                                 that involves a lot of different                                 environments in that code and the                                 database and everything else in a ton of                                 different states you've got development                                 instances and then staging instances                                 maybe some test instances but whatever                                 it is we are we are relying on a crutch                                 when we when we when we think of a site                                 is actually just being one version so                                 there's differences across these these                                 various instances I mean simple things                                 like for example you probably don't want                                 to send emails to your users from your                                 deb instances you don't want to use your                                 production memcache boxes from your from                                 your test instance but when we when we                                 don't think of when we when we think of                                 a site as just that you know any single                                 production thing and we don't consider                                 all of the other pieces there we're                                 doing ourselves a disservice because                                 it's not magic by which code gets from                                 one place to another in this process                                 it's often a deliberate and often if we                                 haven't been really careful and planned                                 'full about how that process works a                                 difficult process to get code from                                 development out actually on a production                                 so the reason that I say it's a useful                                 crutch is that I don't actually want to                                 think about all those things                                 when I'm thinking about making new                                 different changes and updates to my site                                 I would prefer to think of it in fact as                                 a single unified system that is you know                                 simple and them to think about the                                 process of getting coated or whatever                                 that's true for me as an engineer it's                                 true for project managers especially who                                 you know don't necessarily understand                                 the rest part of the process but by                                 being able to think of by allowing                                 ourselves to think of this n site as the                                 sort of simple contain little box that's                                 not at the end of a long process we make                                 it much easier to be smart about the new                                 features we're trying to plan so really                                 DevOps is about those steps that get the                                 code from development all the way                                 through the stages and on to your final                                 production site and it's important                                 because we need devops in order to                                 deliver on that promise that we make to                                 ourselves every time that we rely on the                                 crutch that says the end site is all                                 that really matters and not everything                                 in between we we're promising to                                 ourselves that it's not that hard to get                                 new code changes out and if it is that                                 hard to get new code changes out then we                                 shift our own expectations well like                                 yeah sure we can get this up next week                                 because you're in the thinking mind set                                 of well it's not that complicated than                                 it actually comes time to do it it's                                 much more difficult so there's this                                 distinction that they that they make in                                 continuous delivery where it's just                                 basically what I'm saying there's notion                                 of something being dead complete you                                 know your developer said it's done maybe                                 even it passed the test versus it                                 actually being life or my preferred way                                 of saying it done versus done done the                                 most dangerous place for code to be is                                 somewhere between done that is dev                                 complete and done done actually deployed                                 code that's in between these two places                                 we don't really know if it works yet I                                 mean we think it works all of our tests                                 pass for super smart and so obviously                                 we're not going to do anything wrong but                                 at the end of the day like when it's                                 between done and done done it's still in                                 our minds as a developer you still have                                 to think about this code because you're                                 not totally sure that it's actually                                 going to work and that's taking up brain                                 space taking a brain space that could be                                 dedicated on working                                 on that new feature that you actually                                 should be at a rating on so there's this                                 cognitive wait that's occupied for for                                 code in between additionally if you have                                 to come back to some feature you know                                 once you've actually sent it off and                                 it's past your basic tests you want to                                 be able to move on to the next thing if                                 you have to like interrupt your day to                                 work on something that came back or even                                 worse like two weeks later because the                                 code has been laying dormant not                                 actually deployed and you just figured                                 out that something went wrong you have                                 to go through the process of recreating                                 everything they wanted to to generating                                 that that new feature in the first place                                 which is not good so continuous                                 deliveries answer to this basic problem                                 is we should construct pipelines clear                                 systems by which code moves through each                                 stage from development to production and                                 that we should lock those steps into a                                 structured and semi automated process                                 Here I am stealing from Joe's humble                                 again so the idea here is that whenever                                 code whatever new code is written it                                 starts we start here at the commit stage                                 in the commit stage we might make some                                 very simple analyses we look at the code                                 just to ensure you know you can do                                 things like run code sniffer and show                                 that it passes PHP Lance whatever but                                 some very brief immediate tests and then                                 after that there's a series of other                                 tests that we need to go through so                                 acceptance testing which can encompass a                                 more exhaustive test suite it can                                 encompass the automated acceptance                                 testing it can encompass well a lot of                                 different things but the commit stage to                                 go the commit stage is to get immediate                                 feedback to your developers saying yes                                 there is nothing flagrantly wrong with                                 this code it should take no more than                                    minutes no more than                                                 back to that acceptance stage can take a                                 longer period of time but after you pass                                 the the large full test suite that you                                 have in your acceptance stage at that                                 point you can pass along to in the lower                                 lower right there that's uat user                                 acceptance testing you might have some                                 performance testing or capacity testing                                 thing that you're doing but at this                                 point if you've passed a few past                                 acceptance testing that code is ready to                                 deploy and in fact it should be deployed                                 if at all possible which has if you're                                 thinking about that it's like wait I                                 should deploy simply because the code is                                 there as opposed to because we're ready                                 to put some new feature rap yes key                                 concept may be number one the whole idea                                 is that if you are deploying constantly                                 then there's really not a lot of risk                                 and deployments and deployments or I                                 mean I can't think of any other time in                                 my life as a coder when I am hire                                 stressed than when I am engaging in some                                 complicated deployment so taking the                                 risk and the stress of deployments is                                 really worth doing if we automate this                                 whole process or at the very least to                                 clearly identify all of the different                                 things that we want to accomplish in the                                 process between having code committed on                                 the one hand and then deploying its                                 production there is much less gray area                                 far fewer dark corners that code can sit                                 in for a week or two until you realized                                 oh wait it didn't pass this test I have                                 to come back to it and disrupt my entire                                 schedule so oh                                 sorry so the notion of the deployment                                 pipeline is is that for any given                                 project that we have we articulate these                                 different stages that we want to have                                 and and we move code through in a                                 structured way I'm sorry Mike no it's                                 just first up on me for a second now                                 fortunately and this looks much less                                 pretty because it's actually real there                                 are there's actually a lot of software                                 out there to help with this this is a                                 screenshot of the of the continuous                                 integration plugin or continuous                                 delivery plugin for Jenkins there is in                                 fact a Jenkins plugin that can capture                                 this and if you look at what's being                                 shown up here on the top this is the                                 basic steps that that a project goes                                 through fast test followed by some                                 acceptance tests and run at the same                                 time as second set of acceptance tests                                 then you want to back up a production                                 and at that point you can do user                                 acceptance tests and then eventually you                                 have a deployment on the bottom it shows                                 the state of an individual revision                                 that's coming to the pipeline so imagine                                 that we have the archetype on top and                                 then on the bottom on the bottom a new                                 new revisions been pushed in to to code                                 it's triggered off the initial test the                                 past test pest and                                                  developer got their immediate feedback                                 and then it started kicking off builds                                 and and and running the additional tests                                 the key though is that it's not just                                 about running tests it's also about                                 potentially letting users interact with                                 the system which is why you know we have                                 this automatic versus manual approval                                 stage we can teach computers to do                                 certain things but there's also plenty                                 of things where we need to bring some                                 other person into the process what if                                 you actually have a QA team that's great                                 if it's just you know the person sitting                                 next to you that's also ok the key thing                                 though is identifying that we actually                                 want to have that that step and then                                 having a tool like Jenkins help us with                                 capturing that whole workflow where code                                 moves through we've done our automated                                 test now we know it's time for humans to                                 come in and do their work and they can                                 actually come in check something off it                                 says yes it's good and it can pass along                                 to the next stage and eventually you get                                 to the point where it's passed all tests                                 human and and human and computer and                                 with a single button you can deploy to                                 production so one last sort of                                 high-level piece before I try to move in                                 a more concrete and Drupal related                                 aspects to this this is usually the                                 weirdest thing for people when they hear                                 about continuous delivery continuous                                 deliveries conventional wisdom says you                                 don't have anything other than main line                                 you don't use feature branches so                                 there's reasons for this divergence is                                 risky and this is one of those things                                 that I mean back when I was advocating                                 for get for Drupal you can have feature                                 branches you can toss any feature                                 branches off you can work on something                                 you can throw it away and and that                                 sounds great and fine if you think about                                 it you're intentionally creating a                                 divergence in that situation and                                 whenever on a project where you're                                 working with a team you've created a                                 virgin's every time every additional                                 commit that you make is much more                                 likelihood that they'll be some conflict                                 some some system level conflict with                                 what has been worked on at mainline and                                 that's something that you'll have to                                 resolve later on which again comes down                                 to one of those instances where I've                                 worked on some code and then here we are                                 two weeks later when I try to merge it                                 and I've forgotten everything that I've                                 done and then there's a conflict and I                                 have to resolve it then when you switch                                 off of your your your main conversation                                 space essentially branches our                                 conversation spaces then you have this                                 risk that that you might have to do                                 nasty nasty pre-integration later also                                 complicates that whole deployment                                 pipeline view I mean again if we if we                                 go back to hear you kind of have to have                                 a whole nother one of these for each one                                 of your different branches if you're                                 going to have different branches it's                                 like cific and think about this I mean                                 the whole notion of the feature branches                                 it's never going to get deployed it will                                 eventually be merged in then half of                                 this doesn't make sense there's no way                                 that we would ever be deploying the                                 production or deploying your feature                                 branch to production the purpose of a                                 feature branch so some drawbacks I am                                 not completely convinced that you should                                 not branch as I will say but so one of                                 the ways that you get around the fact                                 that well gee maybe you have maybe                                 there's a maybe there's some features                                 that we ought to or we ought to do this                                 deployment even though the feature isn't                                 necessarily ready to be shown to people                                 yet you use these concept of either                                 feature toggles or branching by                                 abstraction which is essentially saying                                 write a layer into your code where                                 whatever feature it is that you're                                 working on whatever user-facing thing                                 that you're working on is actually                                 attached to some very simple like I mean                                 for Drupal it's a variable set or                                 something like that now you know it's                                 it's a global com variable that says                                 turn this on or turn this off and if you                                 do that then you can have your code out                                 there and you can deploy it safely and                                 users will never see it until you're                                 actually ready to until you're actually                                 ready to turn it on for them Facebook                                 has one of their guys has been quoted as                                 saying that they have their next six                                 months of code is running on production                                 right now like the next six months of                                 features are already deployed they use                                 feature toggles to mask that from the                                 users they actually use a lot more than                                 just that                                 the other option is branching by                                 abstraction which is just the notion                                 that in your architecture itself you                                 create a couple of abstraction layers                                 which goes hand in hand with feature                                 toggles generally like you create some                                 abstraction layers or feature toggles                                 choose which one of the layers you                                 ultimately selects and work through but                                 these are ways to allow you to work on                                 and commit code while all staying in the                                 very same type consolidated conversation                                 space you're not creating the Virgin                                 TSA's and at the same time not have                                 features show be shown to users but                                 either way that the overall goal here is                                 that we are deploying as often as                                 possible and the fact that we are                                 deploying has little to nothing to do                                 with whether or not a given features                                 being turned on today being able to                                 separate those two things is is great if                                 you can so yeah ponder on this really                                 how different would it be if in your own                                 organization you did not use branches I                                 mean what what changes would you                                 actually have to make and and given that                                 this is the the suggestion of many of                                 the continuous delivery gurus like the                                 gravity of what they're saying they are                                 really saying in order for us to have                                 good tight effective software                                 development processes we need to keep                                 our conversations very focused                                 uncontained and letting people wander                                 off into their own feature branch domain                                 not necessarily the best idea okay                                 so let's talking about actually doing                                 this with Drupal because some of the                                 pipeline's that I showed already and and                                 certainly some of the ideas that are put                                 out by Jess humble and his company                                 thought works I mean I would say that                                 they tend to be oriented towards larger                                 more static teams and more static                                 projects and as a result many of the                                 things aren't that directly applicable                                 to that directly applicable to Drupal                                 and the kind of context that we tend to                                 work in might also you know just be that                                 well a lot of us come from actually show                                 of hands how many started with Drupal is                                 a hobbyist that's at least a third of                                 the people in the room in a situation                                 where a third of people have started as                                 hobbyists like the idea of a deployment                                 pipeline for a hobbyist is insane so                                 it's entirely reasonable you know that                                 that you have to go through some steps                                 and and change in thinking but since so                                 many of us come out of that kind of                                 mentality we often slide into much                                 simpler workflows so talking about                                 actually doing this and starting to                                 achieve continuous delivery with Drupal                                 first of all Jenkins in the middle                                 always everybody needs Jenkins period                                 end of story set one up like today if                                 you're not running a Jenkins instance                                 already for your company or your small                                 organization or whatever like get one of                                 those set up and start by moving every                                 DevOps you type process that you have                                 into it things that are cron jobs move                                 those into move those into Jenkins                                 you'll be able to add more things later                                 but at minimum pulling cron jobs which                                 are running some important parts of i                                 don't know like polling feeds from                                 external location that you need for some                                 website that you're running sure                                 something like that even moving those                                 things into jenkins helps you have a                                 single dashboard where you get the                                 overall state of Monsieur platform it                                 functions as a as a state DEP state                                 dashboard for your um                                 for your whole company or project set up                                 notifications like like crazy you can do                                 a lot with this you can connect with                                 it's got a built in IRC bot which can                                 spew things out you can connect with                                 there's a hue bot plugin for it ki baat                                 is github super sexy nodejs no jest but                                 you can connect with with Jabbar and you                                 can have it send scads and scads and                                 scads of emails but either way what you                                 want to do with notifications is help                                 create this rich information environment                                 for your developers and for other people                                 as well that say this is exactly what                                 the state of our code is because again                                 it's it's that gray space in between dun                                 and dun dun where you're at risk so the                                 more that you can do to clearly explain                                 the state that that transition area code                                 is in the more that you can that's the                                 more that you're moving towards a                                 continuous delivery mindset there's also                                 plenty of plugins that you can play                                 around with jenkins PHP org lists a lot                                 of them that sites maintained by                                 Sebastian Bergman who is the author                                 phpunit and like basically every other                                 useful PHP code analysis thing out there                                 not all these are necessarily that                                 Drupal useful but still some of them                                 even so there's there's um there's                                 there's what is it called PHP PHP LLC                                 PHP lines of code but it does some                                 interesting analysis and they're like                                 for example how how many the average                                 number of lines of code in your classes                                 things like that even information that                                 isn't like directly strategically useful                                 to to some overall goal that you've                                 defined can be handy to have if only                                 because we like looking at graphs and                                 like I said rich information environment                                 helps people to feel connected and tuned                                 into the process of producing the code                                 and moving it through the overall                                 pipeline right so back the very                                 beginning I highlighted those some of                                 those words and in that quote from Jess                                 humble and really what it's about                                 is building testing and deploying these                                 the three things that you do over and                                 over again in one form or another when                                 you're working towards continuous                                 delivery and everybody's process is                                 going to look a little bit different but                                 it's going to be these pieces over and                                 over again so building is about taking                                 what's in version control and oh yeah if                                 you're not using version control also                                 yeah there's that you can't even have a                                 conversation if you're not using person                                 control ah so it takes what's in virtual                                 control and creates some kind of deploy                                 package something you can send out to an                                 environment where it's actually seen it                                 also ensures that the deployment target                                 exists I'm sorry too I had that phrase                                 better before and I tweaked it                                 forget it uh ensuring a deployment                                 target exists the whole pipeline thing                                 is about we've got lots of environments                                 we get environments that we develop in                                 environments that we test an environment                                 that we do this that and the other you                                 need to make sure that that environment                                 is actually available that might mean if                                 you've got that might be knighting a                                 nuvi host or something like that so that                                 when you you know drop code into place                                 it's actually web accessible it can be                                 seen it could mean a lot more as I'll                                 talk about more later when we get into                                 the sort of more complex things that you                                 can do with it but if there's an actual                                 discrete pipeline step and if you google                                 around and you and you look at various                                 continuous delivery things you'll often                                 see things listed as like a build step                                 usually what's happening there is things                                 like generating binaries which is                                 obviously not a concern for Drupal but                                 it is it is more pertinent if you're                                 working on a distro of course since the                                 thing that you're pushing the version                                 control is your make file and not the                                 entire build site so you need your your                                 CI server to to go from that make file                                 and actually build up a deployables                                 local environments need building too and                                 this is this is actually one of the this                                 is one of the areas that's that's                                 trickiest with Drupal it's the                                 difference between sorry it's the                                 difference between our local                                 environments and and the deployment                                 environments that were the deployed                                 target environments whether however we                                 can start production are we like cloning                                 from get and doing that really not a                                 good idea are we using Capistrano or                                 something like that to move code out one                                 of the ways you can help with this                                 though is if you use thing or aunt style                                 tasks or also rake or fake or fake style                                 tasks those are sort of two families                                 there let me just do quick show of hands                                 actually because I'm curious heard of                                 thing ants rake how about pake or fake                                 yeah that's what I thought so thing is a                                 build system in PHP which is basically                                 structured after aunt it uses the same                                 type of xml-based build files and                                 everything rake of course is a ruby make                                 system pagan fake are both styled after                                 rake but they're in PHP so there's                                 there's a fair bit of you will quickly                                 find yourself wandering into Ruby                                 territory as you start working with with                                 continuous delivery the other part of                                 building though course is that you have                                 to figure out where you're going to get                                 your canonical data sources from since                                 as we all know any Drupal site is                                 basically database plus code we have to                                 figure out where does the data source                                 come from if I'm going to build a test                                 environment which database dump do I use                                 if I'm going to refresh my local                                 environment am I going to pull that down                                 from from production can we do some                                 things with deploy its it's something                                 that has to be sorted out based on your                                 very specific situation but the big                                 thing to do when you're when you're                                 figuring it out is to ponder on and                                 document the when how and why for                                 generating your database times your your                                 artifacts and example on Drupal adoro we                                 have daily jobs which which creates                                 specialized particular sanitized dumps                                 that that have there even a few                                 different versions of the sanitized                                 dumps that serve different purposes                                 those are generated and then we use them                                 for a bunch of difference use them for a                                 bunch of different tasks Jenkins can and                                 should produce these artifacts for you                                 but as part of your your process for                                 figuring out what your build pipeline                                 looks like you need to basically tell                                 Jenkins to do it like I said Jenkins can                                 do basically everything for you so when                                 in doubt put it in Jenkins and then                                 here's a little tip of who sort of stage                                 file proxy yeah all right super cool                                 I've had some problems with it but the                                 principle is not hard to understand you                                 install stage file proxy on on a site                                 and you tell it the proxy such that it's                                 a download from it every time you                                 request a file from that site it will go                                 and grab the file from the orig                                 one which means no more copying files                                 directories around no more having to                                 have like four gigs of space for every                                 instance it just grabs the files that                                 you need on demand from production                                 basically awesome idea and makes the                                 whole the whole problem of moving files                                 around basically irrelevant there are                                 some limitations to it and need some                                 love and it hasn't hasn't moved much                                 recently but it's very good all right so                                 you also have deploying which I kind of                                 encompass with releasing the idea behind                                 of deploys you're getting the latest                                 code database everything whatever out to                                 some existing environment that's already                                 out there and you need to be using this                                 at the very least for whatever staging                                 environment you've set up that last                                 stage before you actually deploy to                                 production you definitely need to be be                                 using your deploy process for it because                                 this is the thing that tests whether or                                 not your deployment of production will                                 function properly so features X                                 portables and maybe deploy your friends                                 features and X portables obviously help                                 you with expressing things in code so                                 that's much easier to send out since                                 it's in version control deploys a much                                 is a much more complicated question                                 again I'm curious is anybody actually                                 used deploy to not move code like from a                                 staging server to like a Content staging                                 server to a production server but like                                 use deploy to move content like from dev                                 to to an integration server and then                                 somewhere further along yeah to okay                                 interesting yeah it's it's it's not                                 something that I've tried but ultimately                                 when you're actually running the                                 deployment again Jenkins is your central                                 central piece and you're going to ask it                                 to kick off capistrano or some similar                                 system maybe just deploy it's none of                                 them in here                                 no all right don't use just deploy that                                 never mind it's a terrible idea just                                 deploys address extension that marks on                                 Obama road which is basically similar to                                 Capistrano but you know tailored for a                                 tailored for PHP and for and for Drupal                                 and you have your test steps this is                                 where a lot of us get tripped up so                                 there are lots of different philosophies                                 and approaches to testing and I'm                                 clearly not going to like del way and                                 explore all them here but test-driven                                 development behavior driven development                                 either way pick your approach there are                                 a lot of factors that go into that which                                 is which is more appropriate for your                                 particular case but your essential tools                                 that you're looking at our the built-in                                 simple test that we have in Drupal which                                 is fraught with problems or phpunit and                                 then selenium to do your your webinar                                 action test the basic ones that most of                                 us have heard of the limitations with                                 simple tests are many generally speaking                                 phpunit when I'm writing a set of tests                                 for like a client site I generally don't                                 put those put those in simple tests I                                 generally write external PHP unit tests                                 which run there's also much better                                 phpunit integration with jenkins so we                                 can read its output and you know give                                 you your nice your nice feedback as                                 things proceed through your pipeline                                 some tools you may not have heard of                                 though capybara cucumber and then the                                 hat and mink I on the left there you                                 have your Ruby tools and on the right                                 you've got your PHP versions copy bar                                 and cucumber are very very well accepted                                 by hat and mink are sort of newer                                 projects that I have not spent anything                                 like I've read the code and that's it I                                 haven't actually run with them but they                                 serve exactly the same ideal purpose                                 copy bars is kind of a test runner and                                 cucumber as a behavior driven                                 development framework who's heard of                                 behavior driven development Wow okay I                                 don't have a super good summary of that                                 whereas test-driven development is more                                 oriented towards a developer's view and                                 engineers view of of what problem is                                 being solved behavior driven development                                 says let's start with behavior that the                                 user is going to enact define all the                                 conditions and different ways that it                                 can the things can go and then have our                                 tests conform to the users behavior                                 really really useful if you are using                                 agile methodologies clearly which are                                 very you know geared towards user                                 stories and everything else behavior                                 driven development goes hand in hand                                 with a user stories based approach to                                 planning your work so I mean the simple                                 example is just something like fact many                                 of the canonical examples are user goes                                 to an ATM and you would go through and                                 behavior driven development and say                                 things like all right given that given                                 that the user you're given that the                                 person has enough money in their account                                 and they have the pin code and this and                                 that in the other and by by laying at                                 all the given that's and therefore is                                 you clearly lay out all the sort of                                 different paths of possibilities all the                                 different all the different routes that                                 your code ultimately has to support but                                 you express that in a clear narrative                                 language which is understandable to                                 engineers but also like folks who are                                 not at all part of your engineering team                                 so it creates a platform for dialogue                                 about what your tests should actually be                                 testing for which again makes the whole                                 process where we're trying to involve                                 folks who are not just engineers but                                 acceptance folks like if they can look                                 at the same test and understand what                                 they're testing excommunication a lot                                 better so cucumber as a framework for                                 rum for creating behavior driven                                 development tests mahat and mink are our                                 PHP versions behind cucumber are both                                 Ruby                                 what can get tricky though with tests so                                 time and scheduling is a really big deal                                 again if the whole goal here is that we                                 have a humming happy project system                                 where code goes in and then it moves                                 clearly through a series of steps and                                 then ultimately gets deployed as quickly                                 as humanly possible well if you've got a                                 test suite which takes like three hours                                 to run then you're going to have a                                 problem because if every commit triggers                                 the test suite then what you have to                                 wait another three hours to commit and                                 send something up that immediately throw                                 sand in the gears so when thinking about                                 how to create your pipeline this is the                                 the importance of we're called a few                                 different things but i like to call them                                 smoke tests just quick immediate tests                                 which are run the rule of thumb is no                                 more than ten minutes in preferably less                                 than five quick tests which are run that                                 ensure that nothing is actually on fire                                 hence smoke tests and and that lets your                                 developers move on to something else                                 when when while the the the full-on test                                 suite is right the way that that I'm                                 preemptively answering this question                                 because this is the one that always gets                                 asked so the way that a test suite                                 should operate though is you go through                                 the smoke tests smoke tests a great ok                                 this is functioning mr. developer you go                                 on continue what you're doing the commit                                 then continues on through a chain and                                 you know maybe goes into a queue for                                 three hours longer tests at that point                                 by the time that those tests are                                 finished and everything's past you've                                 got like ten more commits that have come                                 in so those are queued up behind the way                                 that the system ought to operate and                                 does when it's functioning properly is                                 alright we finished we finished with one                                 commit that we were testing now let's go                                 back and grab all                                                      them all together it's basically no way                                 around it so but it tends to be good                                 enough solution then if that suite of                                 tests breaks you don't exactly know                                 which of those ten commits it is that                                 broke it but if you're iterating rapidly                                 and everybody is is kind of on the same                                 page and communicating well because                                 we're all in the same branch and                                 everything like that it's really not                                 very hard to figure out which                                                                                                    specific now useful advice for for any                                 project regardless of its size since                                 DevOps tends to change a lot but                                 actually that's not even safer because                                 besides your simple Drupal projects not                                 talking about distributions not talking                                 about something but like I've got                                 complex multiple servers or anything                                 like that just basic drupal site the                                 first thing that you want to do is                                 course decide if you want to use                                 branches so I generally I generally                                 don't recommend that people try to go                                 with the the people try to go with the                                 single branch route and Drupal them for                                 one thing those those alternative                                 options that allow you to like you know                                 keep features out feature toggles are a                                 hard thing to do in Drupal just in                                 general the frame the system is not very                                 amenable to it so decide if you want to                                 use branches you're not actually                                 physically sketch out your pipeline lay                                 out all the different stages that things                                 are going to pass through with your                                 commit stage what are your initial smoke                                 tests that what's your larger test suite                                 that's being run through who is doing                                 the user acceptance tests what are those                                 and where they getting that information                                 from and at what point can we deploy                                 this and then who's responsible for                                 actually clicking the button once all of                                 the indicators have gone green and                                 Jenkins saying this commune is ready to                                 go so doing that entails that you have                                 to figure out what the build and deploy                                 strategy is for each individual                                 environment in the simplest case you                                 really don't have to do much building                                 four for most sites I mean what it                                 basically comes down to is you have a                                 version control repository you're going                                 to clone that done locally and you're                                 going to grab a database dump from                                 somewhere so you do still have to figure                                 out you just love to figure out what I'm                                 were your weird database times are                                 coming from and that's where the tools                                 that I mentioned before fing or aunt or                                 whatever can actually help you is you                                 can write some simple build tools which                                 will grab a database dump down and                                 and and loaded up locally and if you                                 create that logic and you store it in                                 your repository then those can be the                                 exact same tools which Jenkins will then                                 later use when it's setting up your test                                 environments or whatever other                                 environments you may need I'm sorry                                 that's clearly I'm very well put                                 together thing I apologize your                                 repository I've been up and down through                                 this and if you came to my dog                                 presentation last year this might seem a                                 little weird that I would be advocating                                 that you have only one repository but                                 still some folks when they look at this                                 they say but we should have like one                                 repository over here where we're keeping                                 track of all of our our build                                 instructions and and whatever else now                                 you want one repository and in top-level                                 sub directories you've got triple itself                                 you've got your tests and then you have                                 any build information any build scripts                                 that might be necessary to do those                                 things like grab the database grab a                                 files directory do do things like that                                 here is one of my favorites how many                                 people put settings PHP in version                                 control usually that that would be a                                 good thing but I'm actually about to                                 advocate that you do put settings that                                 PHP in version control all right so I                                 cannot think of a single situation that                                 this would not work and work well for                                 and scale well so in your settings that                                 PHP file you should define general                                 settings which are applicable to the                                 site regardless of what environment it's                                 actually n I don't know simple examples                                 being like                                 yeah I'm blanking on simple examples                                 well under the door example we use right                                 okay the mechanism by which we pick                                 which the mechanism by which we select                                 which viewer is used for for code so                                 like when you go to Jubal code org                                 that's all controlled by a plugin and                                 that plugin which one is used is                                 determined by a variable setting                                 therefore we have a variable in settings                                 that PHP that hard codes it and make                                 sure that we use the gate web ones so                                 that it will point you to Drupal co.org                                 and everything will be hunky-dory that                                 information is the type of thing you put                                  in settings that PHP that's going to be                                  true regardless of which environment                                  you're in because you're never testing                                  something else you always want all your                                  environments to look you want the                                  environments look the same at that level                                  you then from settings that PHP include                                  a settings that local that PHP which is                                  not in kit so this is the file that you                                  actually set up when you create a new                                  environment and in that file you put                                  your database connection information                                  other other specific things like that                                  database connections you know like                                  memcache bins which ones you there                                  perhaps cash settings things like that                                  and then optionally you specify a role                                  which is to say something like dev or                                  test or or stage or prod and then what                                  you have is a set of other files                                  settings dot roll that PHP like settings                                  that dev settings that prod settings dot                                  etc which is stored and get and they are                                  you store settings which are specific to                                  way to the way that that environment                                  should behave so for example in a                                  settings dev PHP that's the perfect                                  place to it's the perfect place to set                                  the setting to ensure that no mail will                                  ever leave this server that it always                                  you know dead ends right back in because                                  no Devon sins should as a general rule                                  ever be ever be ever be sending mail so                                  this lets you respect these these role                                  concept these environments concepts and                                  bris and and and manage that inside of                                  urgent role which is closest thing to                                  your engineers so that's where you undo                                  it but still                                  your global settings PHP you can have                                  your local which isn't in get so you                                  don't have your database connection                                  strings anywhere which is obviously                                  crucial but then you can still have have                                  / environment settings it's also useful                                  to do things this way because when you                                  granulate things at the level of the                                  level of a file as opposed to just like                                  you know PHP logic inside of a file it's                                  much easier to do tricky things with                                  like configuration management once you                                  get into more complex situations so the                                  basic system that I described before                                  really only applicable if you are                                  working on a very simple site if you are                                  to the point where you have like a wet                                  bed and a database socks or multiple web                                  heads in the database box or even more                                  than that then you should be using                                  configuration management and that's a                                  whole other layer to to introduce into                                  this by the time you get to that point                                  you should have your repository that was                                  laid out the way I described you've got                                  Drupal and tests and build information                                  whatever and then you have another                                  repository which you in which you've got                                  puppet chef whatever configuration                                  management system that you want which is                                  laying out how all of your different all                                  of you control based machines work                                  you've got the configuration for your                                  web head you've got the configuration                                  for your database box you've got the                                  configuration for I don't know your                                  solar box whatever you have and if                                  you've gotten the point where you need                                  configuration management then then                                  you've gotten to the point where you                                  need to have people instead of                                  developing in whatever local environment                                  you can throw together you need to you                                  need to start seriously looking at                                  switching over to using local virtual                                  machines at that point you can use a                                  tool like vagrant vagran is a is a ruby                                  library for working with virtualbox to                                  set up very easily set up in provision                                  virtual machines so you can use the                                  exact same configuration management                                  system that you use to provision your                                  production boxes and all those                                  production environments to provision the                                  local VMs that people are working in so                                  at this point what you've done is you've                                  gone well beyond                                  well beyond what well beyond simply                                  ensuring that like oh we've got the same                                  database in the same files that oh we                                  are in exactly identical environments                                  these virtual machines have been                                  provisioned in exactly the same way and                                  we know that they're exactly the same as                                  the way that the production ones work so                                  you can say goodbye to all those                                  problems of oh wait I had a different my                                  sequel version or PHP version or                                  something like that that's locked out                                  it's far more complex that actually set                                  up though it is however what we're doing                                  for dublado work so yeah I won't talk a                                  little bit about that because it kind of                                  illustrates how how a lot of these                                  pieces pieces can fit together the                                  system we would like to put together for                                  drupal.org okay who's tried to actually                                  do work on drew blood org and like get                                  ahold of the code base and contribute                                  yeah it's it's hell it's it's absolutely                                  awful like I mentioned I'm the get                                  maintainer for for drupal it'll work it                                  took months for me to even get the the                                  proper testing environment setup again                                  after we launched and I do not have a                                  functioning local test environment for                                  drupal.org I do not it's that bad and                                  the way that we the way that we're                                  ultimately advocating that that this                                  would work is that we have because we                                  already use some configuration                                  management to manage certain pieces of                                  the drupal org infrastructure we want to                                  shift the rest of it over to there so                                  it's all controlled by one single                                  configuration management system and we                                  then can utilize those same that same                                  configuration management information                                  which provisions are production boxes to                                  provision all of our test boxes and and                                  all of our all of our staging                                  environments so we can be absolutely                                  sure that that when we deploy to staging                                  it is exactly like deploying to                                  production there's not nothing different                                  is going to happen we can trust our                                  deployments and again you know it's                                  perfectly reasonable then to say alright                                  we've deployed to staging back in the                                  context of our pipeline you deploy to                                  staging that means that deployment                                  production is going to work great off we                                  go                                  but beyond that it's also a system for                                  people to be able to get their local                                  instances set up if if we can make                                  progress on this then I we will                                  eventually get to the point where the                                  steps required to work on drupal.org                                  will be nothing more than download                                  vagrant download virtualbox clone one                                  repository and then run vagrant up and                                  about four hours later it'll be ready to                                  download like                                                           will have on your local machine at that                                  point like for VMS running a web head                                  database server the get server and anna                                  solar server all of them will be                                  connected and talking to each other and                                  the exact way that the production                                  environment works and you'll be able to                                  go into those boxes and edit code                                  directly on I like functioning local                                  copy of Drupal it'll work that's been                                  all insulated from you know sending                                  emails or anything like that using some                                  of these techniques that I've described                                  but you'll be in that magical place                                  where you have your own function and                                  copy that you can safely break there is                                  nothing better than being able to safely                                  break stuff when it comes to learning                                  about about how a large complex system                                  works but when you get to the point                                  where you have an environment as complex                                  as a as as drupal adore you have to have                                  you have to have the sort of full stack                                  system to think about it from my                                  perspective right like if somebody here                                  were to set up their own local version                                  of Drupal at org I know how complex it                                  is and I know the likelihood that                                  there's some peace which someone has                                  probably broken in there so my ability                                  to trust whether or not the changes that                                  you have actually worked locally is like                                  marginal at best I basically have to go                                  through my whole own entire testing                                  process if however I know that you've                                  worked off of this system that we've set                                  up which has been provisioned properly                                  and just works and is correct it                                  drastically lowers the amount of time                                  and energy that I have to invest in                                  ensuring that your that your tests are                                  the chera that your code is actually                                  correct so you know from there we we                                  start defining a                                  we start defining a pipeline for duplo                                  or go deployment pipeline for drupal org                                  and that I think might be one of the                                  ways in which we could actually push                                  back on some of this highly engineer                                  centric approaches to things that we                                  have because the user acceptance testing                                  can be all of you essentially we get to                                  the point where some feature is has been                                  worked on it's been pushed up it moves                                  to the pipeline it passes the automated                                  tests it's automatically deployed to an                                  environment where people can poke at it                                  they can look at these features and say                                  yeah this works and no it doesn't then                                  they can actually push it back but we                                  have a structured way of having that                                  conversations right now it's very very                                  difficult to tend to be very difficult                                  to to get people to to contribute to                                  those conversations and I would tend to                                  say only because multiple art from let's                                  stipulating that everybody thinks                                  through blood work is awesome and they                                  want to work on it all the time the fact                                  that we do everything in such one-off                                  ways makes it really hard for people to                                  know where to listen and what to pay                                  attention to and where their energy                                  should be focused in order to be most                                  helpful you solve some of these basic                                  coordination problems by agreeing on                                  what your process looks like and people                                  can spend a lot more energy working on                                  actually making stuff happen as opposed                                  to figuring out how to make something                                  happen so end of the day though good                                  enough is what's most important there                                  are reams and reams and reams of stuff                                  written on continuous delivery and I                                  would seriously encourage you to go have                                  a look at it like I said we make this                                  sort of promised to ourselves about how                                  we think that our site works and unless                                  we have systems like this in place and                                  we end up shooting ourselves in the foot                                  so read about it research it I'm you                                  know happy to talk about these things at                                  any time but end of the day it's really                                  easy to get overwhelmed so take out the                                  pieces that you can do most easily and                                  stick with what's good enough thanks                                  questions please use the mic if you do                                  Sam in that last scenario you described                                  with the role based machines using                                  vagrant to provision local VMs what kind                                  of system requirements would you be                                  looking at the local machine to be                                  running for VMS at one time to do drew                                  blood or cry for example i've run i've                                  run for VMS on this thing and it hasn't                                  actually been that bad but i mean it it                                  depends that is the type of thing that                                  you generally need something with the                                  power of a desktop workstation and you                                  usually can't run on a teensy little                                  laptop so we've been we've been just                                  exploring some alternate methods so that                                  we're not eliminating anybody who                                  doesn't have a hugely powerful machine                                  from being able to work on Aundre blood                                  work but you can pare down you know the                                  memory usage and stuffs you can                                  configure how much how much memory is                                  allocated to each VM but yeah there's                                  their limitations next question hi thank                                  you for your presentation I'm just                                  wondering if you could please elaborate                                  on your on why you think that using get                                  to deploy like let's say a live branch                                  is a bad idea it's some                                  it's not it's it's it's not that it's a                                  terrible idea it's that it it can lead                                  to laziness and and often does maybe                                  maybe the best way that I would put it                                  is the situations where I tend to see                                  people using it as a mechanism for                                  deployment are also the situations where                                  people like tend to just be sort of                                  dallying around near their production                                  code and whoops I accidentally made a                                  change in production and hey a whole                                  bunch of things broke there are concrete                                  reasons though I mean like there is                                  going to be a window of time in which in                                  which your code is not fully updated                                  because get takes much longer to update                                  the the standard practice for doing                                  deployments is basically you swing a                                  symlink which is what Capistrano does                                  you take some package version of the                                  code you drop it into place in some sub                                  directory and then you swing whatever                                  symlink was pointing to the old                                  production code over to the new                                  production code and that way it is                                  instantaneous that all the new code is                                  is slotted into place so that's that can                                  actually become fairly important for for                                  you know be a six or seven second window                                  and if you get a bunch of requests                                  during that period of time then you have                                  some weird cash issues that happen                                  there's a cascading series of effects                                  that can occur so the symlink swing is                                  is is best so if the site is small                                  enough and that and deploying that way                                  is very fast like less than a second and                                  use and you have a process like you have                                  a deaf branch in a staging branch and a                                  live branch and and a branch that is in                                  between the live and the staging and you                                  make sure that everything is I mean for                                  me that's what I've been doing for our                                  website and that has worked for us                                  perfectly but I didn't know if there was                                  something else that could go wrong if                                  it's good enough it's good enough there                                  there are there are some small things                                  that can go wrong like I said they can                                  turn into a sort of giant thundering                                  herd generally speaking it's it's it's                                  finds its it's good enough at                                  dysfunction                                  yep hi hi my name is Steven so somewhat                                  related to that but with get and the                                  manual approval process or acceptance                                  testing would something like Garrett or                                  get a light or ketosis something like                                  that fit in that spot or could it be                                  used elsewhere what do you think of that                                  about those serves potentially yes I                                  mean Garrett Garrett assumes a garret                                  assumes a particular workflow and it's                                  representing things in version control                                  that a lot of continuous delivery                                  advocates would would say or not a good                                  idea like you know you can commit to an                                  incremental place and then it requires a                                  whole bunch of people to consents in                                  order to actually like send it to the                                  real place inside a version control                                  which is is not you know technically                                  part of the part of part of the the I                                  can't think of a condescending word that                                  I want to use the official mandate of                                  continuous delivery you could use it                                  like that but that's also what like I                                  said you know there is this this is                                  Jenkins plugin which provides the view                                  into the pipeline and can help you                                  control all those stages that that is                                  designed to do the same thing it is the                                  same principle though and if you were to                                  choose to construct your system are on                                  that like I'm sure that you could do                                  that just as well I tend to prefer to I                                  tend to prefer to just put as much as I                                  possibly can in Jenkins because it like                                  i said it becomes a dashboard for sort                                  of the state of your entire operation                                  and the more information that you have                                  there the better there is there is                                  garrett jenkins integration but i                                  haven't done much with it all right now                                  Patrick's going to beat me up no no                                  thanks for getting this conversation                                  started I'll see I'm just really excited                                  that                                  use people warned of the mic I was just                                  gonna say like one thing I want to end                                  one thing i want to emphasize is i was                                  really worried that some people might be                                  listening to this and being like whoa                                  this is way over our heads this is way                                  above us this is way too complicated we                                  just want to make small sites the great                                  part about this is that like I guess the                                  comparison would be like when someone                                  explains Drupal bootstrap to you and if                                  you don't understand everything that's                                  going on that doesn't mean Oh drupal's                                  way too complicated for me because we                                  keep it's an application that we keep in                                  code and we share easily and no one                                  needs to understand and the big push                                  with DevOps is that that your                                  infrastructure your tool chains                                  everything you're using is there that's                                  encode as well and not only does that                                  give you the security of knowing that                                  hey if they're like our data center                                  blows up we can just bring it back it                                  also means this tool chain is in code                                  and we can share it and have a common                                  like platform for discussion and share                                  processes together and you don't need to                                  understand what how it's all working                                  just someone has to have set it up some                                  people need to a set it up and then you                                  back initiate so it's it's icy awesome                                  applications and just like sharing                                  processes it opens in an open source                                  community so that's true too yeah yeah                                  don't let go yeah I just hopefully no                                  one's intimidated I saw a lot of people                                  walking out right after except write the                                  word that is not too much for large or                                  small no it's it's there are there                                  discrete pieces they're definitely fits                                  that you can tackle and and thank you                                  for thank you for saying that I have                                  this I have this hope that if we can put                                  together that that drupal org system                                  that i described that actually this talk                                  is nice that system be fantastic and not                                  just for drupal.org but because i think                                  about it right like theirs theirs we                                  have a place to share drupal code but we                                  don't have anywhere which is Drupal it                                  or you know we push all of our code up                                  there but we don't have anywhere we can                                  actually like collaborate together on                                  running a site on like what these                                  practices might look like it to have a                                  space like drupal.org be something                                  that's managed by these processes where                                  we can work these kinks out and and                                  folks can like optionally jump in and                                  learn about how this works and then take                                  some of those best practices back to the                                  places that they're actually employed                                  like that could have amazing effects in                                  the community because we can develop                                  some best practices out in out of the                                  public space so yeah                                  hey Sam please talk it was great um so                                  in seven now there's a get ignore file                                  with the settings that PHP actually it's                                  wild carded i just looked setting                                  startup PHP yeah are you suggesting we                                  had core I a balut Lee am I did not                                  endorse the placement of that get ignore                                  file nor do I think it's a good idea now                                  I don't like it either because i had to                                  get ignore a lot and so I'm hacking                                  court all the time too yeah yeah no it                                  was it was like you what do you do just                                  like replace it when update okay thanks                                  hmm i don't think this is the same                                  question he just asked but if it is tell                                  me the settings that PHP goes into get                                  but settings not local that PHP you do a                                  PHP require once inside of settings that                                  piece yes i'm sorry i mean i tried to                                  put the cut out there and it wasn't                                  working well in your settings that PHP                                  it should basically look like settings                                  you want to set at the top then there's                                  a require once settings that local that                                  PHP then there is a like if dollar role                                  is set which should be set in settings                                  that local and that file exists then                                  require the role based file okay make                                  sense yeah it does so then on every                                  different machine settings doubt or my                                  local copy the production copy there                                  will be a settings down local yes and                                  that's and that's the file that you have                                  to set up manually got it i right and                                  that ends up being yeah i didn't i                                  didn't circle back to this point that                                  ends up being much easier to like to                                  mess around with in like a configuration                                  management system it's way way way                                  harder to like write a reg ex or                                  something that replaces a database                                  string inside of settings that PHP from                                  your config from your config management                                  it's really easy though to do something                                  like since your config management                                  systems are going to be aware of what                                  role that's deploying to whole idea with                                  them it can do something like actually                                  it could even do something like if you                                  wanted to go this way instead of                                  expecting but it's much easier for it to                                  have a bunch of like settings that                                  locals which have been stored somewhere                                  in like a separate secure repository                                  which it then drops into place depending                                  on what                                  roll it's looking at and so you can have                                  your database connection strings                                  actually stored somewhere and then it                                  just drops it right in and you don't                                  have to muck around with the internals                                  of any files perfect okay thanks yep I                                  wanted to ask you a little bit more                                  about configuration management so in one                                  repo build directory and inside there is                                  directories for each of your site types                                  is it best to extrapolate out those like                                  Etsy that's going to be common to have                                  like almost a fourth one of like a base                                  a web database yes varnish and then my                                  second question is once you start                                  getting into web server database and how                                  should we be laying those files in just                                  like straight up file paths of so when                                  you could check it out from root and it                                  would lay right down and vos not sure                                  well let me let me just the first one um                                  wait I got so distracted by the second                                  one that I forgot the first of all was                                  the first game the first one is it best                                  to X take the things that are caught so                                  a web server in a database server you                                  have a separate configurations within                                  that build directory is it best to take                                  things that are going to be common                                  between those two machines like ntp                                  settings and stuff like that and get                                  into a yeah a good configuration                                  management system I mean like use                                  puppets chef either way I don't I don't                                  care but those are those are the big                                  systems which are kind of out there                                  today there are a few others but either                                  one of them will allow you to create                                  like a class hierarchy of no definitions                                  which can inherit from one another so                                  you can have like a base from which web                                  inherits from which like a webs web                                  staging inherits whatever and and you                                  you you can create a nice structure                                  whether were those things actually                                  passed down so yeah you should be                                  replicating that in our version control                                  you should yes that there should be                                  we're restoring the configs what's that                                  where we're storing we're replicating                                  that abstraction in our version control                                  system where the configs are stored yes                                  you have you've got your you got your                                  repository which contains a Drupal site                                  gets test and it's build stuff then you                                  got a separate repository which yeah                                  that's okay that's our next right                                  separate repository which is for your                                  config management and follows all the                                  rules there are plenty of rules and                                  structures about how those are supposed                                  to be laid out okay                                  about those but yeah and so the second                                  question was was so if there's like web                                  server and I'm running redhat should                                  there'd like just be at see you know                                  whatever the settings are at the HPD                                  comp like subdirectories all within that                                  sort of like web server top end or                                  what's kind of the best way of keeping                                  all these configs inside a repo that's                                  we could it's a long answer to that                                  question so we should we should let in                                  the next person go sorry it's two                                  questions you speak a local so the mike                                  lee shore is two questions so jenkins                                  you or actually three jenkins used to be                                  called hudson did it yes is it possible                                  now here's the real question is it                                  possible to install Jenkins on a system                                  that doesn't have a qualified domain                                  name yeah so localhost no problem okay                                  good and vagrant doesn't have anything                                  to do with Jenkins no bigger'n is a                                  separate system is everything okay yeah                                  thanks a quick question I don't expect a                                  full answer at the whole question of                                  what to do what arrangement to do with                                  the Drupal distribution itself how you                                  organize that in gear now there should                                  it be a sub-module whether that question                                  it's a big question but it would be                                  really cool if that information could be                                  updated because when i read the drupal                                  docs you know there's some really cool                                  ideas but i don't know which one to use                                  exactly why so who is unsure whether                                  drupal should be a sub-module do you                                  have any specific recommendation and                                  apart from that it would be cool to                                  discuss that later yeah um yeah it's                                  it's it's complex the simplest answer                                  and you know good enough yeah that's                                  right that is is that which is that is                                  and that is largely why I said like one                                  repo sub-modules complicated you know I                                  I wanted to work on dog I don't know                                  time to work on any more it could have                                  introduced the possibility of us using                                  more complex repo clusters and stuff                                  like that but without some consolidated                                  tool like that my recommendation is that                                  you you know pull out the tarball of                                  core and then drop your tar balls in a                                  place and you just have that in a                                  subdirectory inside of one single                                  repository that's strong with your test                                  in your build system it actually it's                                  it's almost it can get even more                                  complicated for forging                                  begins to have multiple repositories                                  like people might be able to handle it                                  but your CI server might even end up                                  getting more confused if you've got like                                  you know test the stuff over here and                                  build stuff over here but then the                                  actual stuff it's testing and like a                                  separate repository can be very awkward                                  to get it to like look at multiple                                  repositories at once okay okay good you                                  know so again about the settings file                                  yeah so does every server including                                  production have a settings dot local                                  every that every functioning server will                                  look like settings dot PHP settings that                                  local dot PHP and then a series of like                                  settings dot settings that dev dot PHP                                  settings that product PHP settings that                                  stage that PHP and it will it will read                                  settings that PHP and settings that                                  local PHP always and then we'll read one                                  and only one of the role files okay and                                  so what that leads to is I think the way                                  that I've been doing it forever is just                                  wrong okay because I've been setting up                                  you know my site is example.com hmm when                                  it gets to production i've been using                                  default yeah oh that's right sorry yeah                                  don't don't use multi site for                                  environments that's what i've been doing                                  so like dev example.com like a home you                                  know for my local machine and i would                                  have a multi-site for that so that is                                  not the right way that would you there                                  are I mean it is not a way that I would                                  recommend that anybody do and it is a                                  case where I feel like the benefits to                                  doing it are not enough to offset the                                  weirdness that it can cause in the long                                  term especially one a technique like                                  this works you know sort of just as well                                  all you have to do is just keep a                                  settings that local HP somewhere that                                  you can copy into every local dev                                  instance you have because it's probably                                  it going to be almost the same in each                                  case except the database name so yeah                                  alright cool thanks yep                                  so my company has a lot of non Drupal                                  project projects so they've settled on                                  Team city as a continuous integration                                  tool okay I heard of that and it seems                                  to be working well enough for the Drupal                                  project I'm working on but we're really                                  not all the way there with our                                  continuous deployment we really just                                  have Deb to testing are there certain                                  things about Jenkins you think will be                                  better for us I'm true specifically for                                  Apple later on I mean since I don't know                                  teamcity I you know I couldn't I                                  couldn't speak specifically unlike                                     product versus the other all I can say                                  is is really just that like Jenkins has                                  the clear support of I mean it is the                                  leading CI server in the open source                                  pace and it gets the attention and you                                  will get probably the same I can make                                  the same the same not tightly causally                                  linked argument that you make about open                                  source in general which is that you're                                  going to get benefits because everybody                                  in the Drupal community is looking at                                  Jenkins so if there's ever going to be                                  you know specific plugins that pop up                                  for it it's going to be for Jenkins an                                  opportunity alright thanks and great                                  talk yep thanks for buddy
YouTube URL: https://www.youtube.com/watch?v=TTDvpMXBSvM


