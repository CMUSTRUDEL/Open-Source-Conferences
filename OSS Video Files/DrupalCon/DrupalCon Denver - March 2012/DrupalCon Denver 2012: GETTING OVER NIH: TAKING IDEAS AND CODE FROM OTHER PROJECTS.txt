Title: DrupalCon Denver 2012: GETTING OVER NIH: TAKING IDEAS AND CODE FROM OTHER PROJECTS
Publication date: 2013-03-28
Playlist: DrupalCon Denver - March 2012
Description: 
	Drupal has historically suffered from NIH syndrome: we've been, for the most part, unwilling to take code or ideas from others. Instead, we have a record of reinventing things ourselves. While this has always only been a trend and never a hard-and-fast rule, we're beginning to see a cultural shift toward getting over NIH. This session will start by looking at where we've already incorporated code (KSES, jQuery, and now parts of Symfony) and the rationale behind their inclusions. Then it will move on to look at other potential targets for inclusion, and in a broader sense, what ideas and insights we can gain from other projects (while there's definitely a lot that can be talked about here, there won't be time to go too in-depth with lessons we can learn from others -- but we'll take a look at what it means to be taking ideas from others). Lastly, we'll look at the broader impacts of this cultural shift on Drupal's community and philosophy.

Questions answered by this session: 
Why have we historically been averse to using code from others?
Even though we have a problem with this, Drupal does have some external code. Which code? Why?
Where else can we look for inspiration?
How can we be inspired by them?
What broader implications does this have on Drupal's community, culture, and philosophy?
Captions: 
	                              hello everybody I'm going to get started                               there's not a lot of people here I did                               not foresee a lot of people coming so                               you and the back can scoot forward if                               you'd like you don't have to i'm going                               to talk today about something called not                               invented here syndrome i'll start off                               with a short amount about myself my name                               is Dmytro Gaskin as you can see up there                                and hopefully you saw in the program I                                am a drupal developer I've been                                programming with Drupal for about five                                years now and appearing at Drupal cons                                for four or so and today I'm going to                                talk about not invented here or neat for                                short so you may ask what is not                                invented here or knee or knit depending                                on how you want to say it not invented                                here is basically when a project or a                                company our group doesn't want to use                                things that were not invented here that                                is to say they like to you know come up                                with their own solutions for things it's                                talked a lot about in corporate settings                                you know how companies like to come up                                with their own tools their own systems                                but it's also important for us to talk                                about it in free software like drupal                                where you know we could be using we                                could be leveraging a lot more other                                projects than we are now this last                                bullet point i'll come back to later but                                basically there's sort of a difference                                between integrating with other people's                                code that that is to say sort of working                                with optionally versus building on top                                of other people's code so i'm going to                                talk about when we build on top of other                                people's code or rather when we don't                                and instead we invented ourselves so not                                invented here is sort of a problem                                here's one one thing that can come from                                that problem reinventing the wheel it's                                it's a little problematic as you can see                                it doesn't always work I wouldn't want                                to ride that bicycle but I'm gonna so                                I'm going to look at there's so what the                                way I went about making this                                presentation was                                I thought you know okay it's a big                                problem in the Drupal community right                                well it turns out there's that's a sort                                of question is it a problem I asked a                                couple of my my friends within the                                community and about what they thought of                                it and about like three of three or four                                responses thought it wasn't a problem                                and I disagreed and I still disagree                                even given their justification however                                I'm just sort of going to explore this                                problem and hopefully we can reach a                                conclusion so the question is do we                                suffer from me or not invented here I'll                                go through a cup you examples of not                                invented here or what may be classified                                as that and we'll see you know do we                                suffer from this problem all right start                                off with the first example hooks or the                                hook system so it could be argued that                                it's a it's a version of the observer or                                the mediator design pattern it could                                also be argued that it's not and however                                one thing that's not arguable is that it                                we completely uniquely implement this                                you know this design pattern has been                                implemented for years and years and                                years into and all sorts of different                                systems various different ways but sort                                of not nobody does it like drupal and we                                decided to invent it ourselves so you                                know if you if you have some some                                knowledge of the observer of the                                mediator pattern you might recognize                                aspect of it in our hook system however                                that doesn't necessarily mean that                                that's you know what it is and that your                                knowledge will completely apply to this                                another example is the xml RPC library                                this was originally known as i XR i                                forget what that stands for i was just                                looking it up earlier but there was this                                xml-rpc library sort of the one the main                                one for PHP that we pulled into Drupal I                                think                                                                 pulling it into Drupal                                completely rewrote it from scratch and                                it's had several releases since it just                                had one in                                                         release and we haven't been able to pull                                 in any of those updates because now our                                 code is not compatible with their code                                 yeah so basically we haven't                                 incorporated their updates since                                         we're stuck with this old version if                                 there's old version were to have a                                 security hole we would fall you know it                                 would it would be a problem and we'd                                 have to fix that problem instead of you                                 know letting them fix it letting them do                                 the work another problem with something                                 like this is that you know if you have                                 learned how to use this this library and                                 then you come to Drupal and you want to                                 write some xmlrpc code you know you're                                 kind of out of luck you have to learn                                 something new so kind of begs the                                 question why did we do this well I'll                                 get to that later I still have a few                                 more examples there's this function the                                 filter XSS function this was also this                                 is not originally Drupal code this came                                 from a different place it came from a                                 library called que SES which then became                                 filter XSS again we rewrite it for                                 Drupal in this case you know it's the                                 fact that you you can't park your                                 knowledge over like if you learn this                                 library and then came to Drupal I                                 wouldn't say that's such a big problem                                 because it's literally one function so                                 you know it's and it's pretty easy to                                 use it's one function with two                                 parameters one of which is optional but                                 I didn't have room on the slide we                                 rewrote it for Drupal and as it says                                 there it's now on maintain it has been                                 unmaintained for about                                              there was a and pretty much now it's                                 become like the XS s filtering library                                 for most PHP applications wordpress uses                                 it I think joomla uses it tons and tons                                 of you know smaller PHP applications                                 also use it                                 and and I think                                                        security hole in it and so you know did                                 it fail this one job which was                                 protecting people from cross-site                                 scripting attacks and but due to the                                 fact that we rewrote it ourselves it                                 didn't affect us at all so you know                                 there was there is some some benefit to                                 to writing our writing and rewriting                                 things ourselves or writing things                                 ourselves simple test um so you see here                                 these are samples simple test results                                 with simple test symbol test is another                                 case of where we pulled in some                                 third-party code but there is there was                                 a prop or there wasn't really a problem                                 but we started sort of at first we were                                 just using simple test and we had a very                                 light wrapper on top then we started                                 doing more and more and more of our own                                 code on top of simple test to the point                                 where using simple test itself sort of                                 became useless because we were doing so                                 much of our own stuff on top of that and                                 then I'll take guilt for this or I'll                                 admit guilt for this sort of starting                                 this effort to rewrite simple test                                 completely just for Drupal and now it's                                 a problem because you know if simple                                 test is one of the probably two or three                                 ways that people test.php and if you                                 learn simple tests or another one of                                 those ways but say you learn simple                                 tests and you come to Drupal and you                                 turn on the simple test module and it's                                 not simple test and you know that                                 knowledge that you gained learning how                                 to use similar us now you need to learn                                 something new so that's you know we're                                 putting people through unnecessary work                                 here I think it'd be you know we could                                 gain more developers gain more traction                                 if we used code from others because                                 other people would already have that                                 knowledge and you know you could come                                 into a project knowing simple tests and                                 be able to write tests instead of having                                 to learn something new just for Drupal                                 all right next one jQuery jQuery we                                 pretty much succeed                                 you know we just we use jQuery verbatim                                 we even use some jQuery libraries on top                                 of that you know cookie form you can see                                 them there we also use a library called                                 far tastic which was actually written                                 for Drupal funnily enough it was written                                 for Drupal and there is now in color                                 quicker and Drake jquery UI which we                                 don't use instead we use our own thing                                 which is right now it's so it's                                 separately maintained and it has it is                                 used outside of Drupal however it's                                 definitely not the only jquery color                                 picker solution so along with you know                                 just using jQuery we had to write jQuery                                 code on top of that but our jQuery code                                 still feels like PHP code it doesn't                                 really feel like fluent JavaScript so if                                 you were some sort of you know if you                                 were a JavaScript programmer you came in                                 it wouldn't be the most intuitive thing                                 to you know to help out and to pitch in                                 because you're what you're sort of                                 reading is java script written like PHP                                 and that's you know that's problematic                                 because you know again we want to be                                 able to have as many people helping us                                 out as possible as many new developers                                 coming in the project to get started                                 with Drupal it means you have to learn                                 all these new things this is a bit more                                 of a historical won the X template                                 library was used before we had PHP in                                 our templates we actually went through a                                 couple of iterations on the theme system                                 one of them where we had theme engines                                 and X template was the main engine and                                 use I believe we did bring this actually                                 in as is but unfortunately later it                                 became unsupported the maintainer of                                 text template just dropped it and we                                 sort of we got bitten by that because                                 now we were stuck with this pretty big                                 library that was unsupported that you                                 know we weren't the biggest fans of we                                 could have still used it and maintained                                 it but that's extra maintenance work for                                 us and we really want to do that we can                                 spend our time doing other things                                 and next thing is our database layer our                                 database layer has gone through quite a                                 few different revisions we started out                                 using pair database compatibility                                 actually that was like way back in the                                 dark ages Lee said after that we moved                                 off and we used our own compatibility                                 layer where we simply swapped out a                                 function name depending on what database                                 you are using not the greatest solution                                 and you know that definitely all you                                 need to know is or you basically like                                 you used sequel but if you wanted to use                                 any sort of database compatibility layer                                 or rather you know query builder or                                 whatever well you couldn't instead we                                 wrote our own we did base it off of PDO                                 so if you know p do the PHP database                                 library then no it doesn't get you very                                 far actually um we still wrote something                                 on top of it so oh look there's the                                 author right he just stepped in our                                 guilty of not invented here syndrome                                 because other solutions didn't do exist                                 so as he likes to point out it is not an                                 in fact exactly the same doctrine is a                                 sort of database compatibility layer                                 that's also an ORM but it does sort of                                 focus on the same problem space so you                                 know well Larry's not necessarily                                 completely guilty you know it is a                                 problem he will admit that we do use a                                 couple of other libraries just doing                                 minor things for example archive to our                                 library that down you know unzips files                                 when you download them from the                                 downloader and the PHP password hashing                                 library which we also use successfully                                 so you know clearly we have had some                                 success incorporating other people's                                 code so maybe it's not a problem other                                 things we have pluggable subsystems so                                 these don't really solve the problem of                                 not invented here but they do leave the                                 opportunity open for somebody to create                                 a live                                 worried that you know integrates with                                 other systems however I think that oops                                 that's supposed to say utilization on                                 until ization you know that that's not                                 really the solution because we still had                                 to invent whatever lies under those                                 pluggable areas and just integrating                                 with the library's not the same really                                 as you know using it fully because the                                 knowledge still doesn't transfer and you                                 know just because you know how to use                                 say what's in like four sessions Redis                                 cash just because you know how to use                                 that like sure that'll help you a bit                                 but for example if you want to use it                                 you've got to write the compatibility                                 layer with Drupal you still got to learn                                 that there we do support our measly list                                 of two open standards I'm sure there are                                 others but open ID which is currently on                                 the layout of the internet and RF RF RDF                                 sorry RDF so these are examples of where                                 we have used ideas from other people you                                 know and incorporated them in our own                                 code base I think that these are you                                 know good examples for us to look to on                                 how we can continue integrating that                                 another sort of problem area for us is                                 using outside idea or not using outside                                 ideas rather so we've ignored best                                 practices such as you know encapsulation                                 abstract interfaces also you know                                 Global's and that's when we ignore                                 outside ideas like that then it makes it                                 harder for other people who come into                                 the project to sort of grasp on into to                                 build you to build using Drupal because                                 they you know they have a different                                 knowledge base they have to learn                                 something new but if that's not enough                                 to convince you there are still                                 questions is it a problem so so these                                 are sort of a couple of reasons why it                                 is a problem it does take time and                                 energy to build our own solution and                                 then we have we have the responsibility                                 of maintaining it so you know it's we                                 could be spending that time building                                 more components                                 top of those systems instead of just                                 building those systems or maintaining                                 those systems it also raises the                                 learning curve so if you learn one                                 system you know for example you learn                                 simple tests like the simple test not                                 Drupal simple test and then came to                                 Drupal you know that knowledge doesn't                                 completely transfer sure the basic                                 concept of what is a test and how does                                 it work does but you've gotta you know                                 you still have something to learn in                                 fact quite a bit to learn there is                                 another side of it however there are                                 some benefits and we have had some                                 successes with writing our own stuff to                                 unmaintained projects like in the case                                 of X template could you know that say                                 you know that that did that did hurt us                                 so maybe you know writing our own thing                                 which we did was the right solution and                                 we could end up creating more work for                                 ourselves in terms of integrating other                                 code like it could be more more work to                                 integrate other code rather than to                                 rewrite it ourselves however that's not                                 I don't think that's that justified of                                 an argument in itself because you still                                 fall can fall victim to other problems                                 such as then later having to maintain                                 that code or having to deal with                                 security issues which could go either                                 way so if there is a security problem in                                 it and the maintainer zuv whatever                                 outside library you're using don't fix                                 it then that's you know that's a big                                 problem and so that's one of the                                 arguments for writing your own code                                 because we do have a very very big and                                 very active security team however if                                 that you know that other project is                                 responsible then you can also then we                                 can also save ourselves a lot of work                                 and then of course you have to deal with                                 stuff like ugly code ugly interfaces do                                 we want to be using that or do we want                                 to just write our own um so however as I                                 said like I don't think these are enough                                 reason for us to believe that you know                                 it's a it's just a bad thing like I                                 think or rather it's a good thing I                                 think it is a problem that we've written                                 so much ourselves and with that let's                                 look at why this is a problem so here's                                 the it's a problem faced                                 there are I think sort of two categories                                 of issues the self-taught coders or                                 other cultural issues so as you can see                                 like when when when Drupal like drupal                                 came from a background of people who                                 taught themselves to code and people who                                 are hackers not really people who you                                 know learn to be programmers in school                                 and learned you know learn their list of                                 design patterns that kind of thing and                                 in fact people have sort of been                                 antagonizing that and saying like no we                                 want to keep our code base approachable                                 and we want to be it like we want to                                 have something that somebody can you                                 know spend a weekend you know digging                                 really deep in a Drupal without having                                 to have a huge amount of computer                                 science background and said they can                                 just you know they can look at this                                 maybe it's a pile of hacks maybe it's                                 clean code we don't know because we're                                 not computer scientists there's also you                                 know we have been burned in the past as                                 a keep returning to X template we have                                 been burned in the past by outside code                                 and so now that makes it sort of less                                 incentivizing for us to want to continue                                 are adding more code also there there                                 were other issues in the past that                                 prevented us from using sort of more                                 outside code ecosystem issues so the PHP                                 ecosystem wasn't there that is to say                                 most of the third party code sucked                                 anyway so you know we could look to it                                 to integrate something else to that                                 solved at one of our problems but it                                 sucked so we couldn't use it and you                                 know that's an interesting sort of point                                 of contention there like if it sucks                                 should we still use it because its third                                 party code and we don't have to maintain                                 it ourselves and it sort of requires a                                 case-by-case evaluation but it could go                                 either way and we could experiment with                                 writing our own solutions and                                 there's a sort of mentality among Drupal                                 developers of really liking to                                 experiment when the when the internet                                 like was sort of still I mean sure it                                 was it was moving but it's moving now i                                 would say faster than ever before                                 however so well yes so that's why we                                 sort of we've had that mentality of you                                 know let's do Stewart ourselves because                                 you know we couldn't we like to try                                 things out we're just hackers hacking                                 our hacking our way through things and                                 the other code sucks anyway but I think                                 that's changing and so where are we                                 headed I think we're headed towards more                                 integration and more than that more you                                 too utilization of other systems so the                                 web is moving faster than ever and we                                 have to team together to succeed a great                                 example of this is how we've been                                 teaming up with the symphony team I'll                                 show that in a couple of slides but                                 we've been we've been working together                                 with the symphony team now you know                                 they're helping us write code we're                                 helping them write code and the things                                 like symphony the PHP ecosystem is                                 finally matured to where it has good                                 quality software our developer base has                                 been shifting to now where there are                                 people like Larry who you know are                                 champions of the let's use design                                 patterns instead of hacks and people are                                 more sort of cognizant to these things                                 and they want to move in this direction                                 more so we've had it sort of cultural                                 changes and Drupal                                                       really big and to come into it like not                                 you know at least for me it's like                                 drupal                                                                                                                                           top of other or rather building for                                 future versions on how other components                                 would help in the sense that you know it                                 would be easier to understand what is                                 Drupal as opposed to what is something                                 else instead of having to understand                                 this humongous monster that is Drupal                                 there's also actually an interesting                                 parallel                                 with how assembly like people used to                                 write in assembly languages first they                                 you know before that you know they did                                 the punch cards but they there's sort of                                 this movement from lower level the                                 higher level so now people are writing                                 in higher-level languages like PHP or                                 ruby or stuff like that and so I think                                 the Drupal community has sort of moved                                 in a similar direction where we're no                                 longer interested in just building you                                 know these lower level parts but instead                                 interested in building bigger stuff and                                 just and building on top of other                                 people's things where we can let                                 somebody else handle the lower level                                 parts and instead we're more interested                                 in focusing on the bigger things in a                                 sense we're growing up as you know                                 people did with programming languages as                                 trees did from that picture you saw                                 earlier so one you know one one big                                 place we've done this is a symphony so                                 we have integrated plenty of front of                                 third-party components I think this is                                 by far the biggest one we've                                 incorporated and in the most fundamental                                 way I mean you could argue that our you                                 know for example cross-site scripting                                 filtering is pretty fundamental but it's                                 you know takes up nowhere near as much                                 good as Symphony is going to help us out                                 with it's saving us time and energy and                                 maintenance like there's a whole team                                 dedicated to Symphony that's here at                                 rubicon but mostly dedicated to symphony                                 that's you know they're they're the ones                                 taking the time into developing symphony                                 into maintaining it you know pushing out                                 better better versions security updates                                 that sort of thing so we don't have to                                 work on that instead we can focus on                                 building on top of symphony and building                                 you know you know all sorts of crazy                                 things so we can you know pull parts of                                 Drupal out and make them rely on                                 external components like symphonies so                                 instead we could spend our time writing                                 bigger and better things all right                                 there's still a bunch of outstanding                                 issues not everybody thinks it's a good                                 idea some people think it's too radical                                 of a change as with any culture our                                 culture shift slowly and you know are we                                 has our culture shifted enough to a                                 point where we can integrate something                                 as big as Symphony yet or are we still                                 taking those baby steps in order to you                                 know build up our sort of our ability to                                 our ability to do that our developers                                 becoming or rather have they become yet                                 enough sort of wanting to use more like                                 less experimenting themselves and more                                 using other people's components have                                 people really gotten to the point where                                 they want to start building higher level                                 things I haven't start using for example                                 design patterns or is that too radical                                 to change and then the last question                                 that's my own question is is Drupal                                   approachable so I mentioned earlier like                                 a big thing has been we want to maintain                                 approachable code and something that                                 someone could just pick up on the                                 weekend and start hacking on and I think                                 that you know we've already sort of                                 crossed that threshold with Drupal                                       to the point where you know I can't pick                                 up triple seven in a weekend I can't                                 spend three months and learn drupal                                   i'm still battling with drupal                                          to figure out because there's like so                                 much new stuff added that I can't figure                                 every little part out like it could in                                 Drupal                                                                 already crossed that line with triple                                 seven and now it's just a matter of sort                                 of recognizing that and realizing that                                 okay we've already crossed the                                 approachability leiden that should make                                 it the decision easier if anything about                                 whether or not we want to can start and                                 continue integrating others code all                                 right that that's it and that's a little                                 bit shorter than I imagined it would be                                 but thank you for coming and thanks to                                 these people for helping out                                 questions no questions now if you could                                 step up to the mic think like the                                 natural follow-up question is like you                                 know what's next what can we for those                                 interested in kind of pursuing these                                 things and experimenting around                                 different ways we could pull things out                                 or chop things off or add things giving                                 ideas or you know as there are                                 additional bobster how can people get                                 involved in the discussion more I guess                                 that's a very good question and it's a                                 very hard question because you know as I                                 said you know we're sort of in the                                 process of a cultural shift and it's not                                 just that we can just start adding                                 things we've fully worked at this point                                 in our continuing to work on this you                                 know are we ready to be adding things                                 maybe we are I'm in that case it's                                 pretty much a matter of just finding                                 like something that you want to add and                                 adding it are you know proposing it was                                 in suggestions so I can't you know give                                 you a definitive answer but then I mean                                 pretty much do what you want see if                                 people like it and people might hate you                                 but it's worth a try this actually came                                 up yesterday in the core conversation                                 around the theming and let me tell you                                 that was an interesting conversation but                                 the kind of general consensus in the                                 room was that we are basically going to                                 have to scrap a lot of how we built the                                 theme layer and kind of start over and I                                 made the observation that the symphony                                 framework does actually include a                                 templating framework when it's called                                 twig and so this might be a really good                                 opportunity to to kind of push more of                                 this kind of code you know you know                                 outside coat utilization that could                                 probably actually really solve a huge                                 problem that we've been having with the                                 theme layer I think the real question                                 going forward is                                 how do we convince a community of very                                 very invested stakeholders who have                                 vested in some case nearly a decade of                                 their life into writing this thing to                                 kind of get over the ego vector and say                                 well you know what maybe we didn't do                                 this the best way maybe there's a                                 learning opportunity here and I think                                 that's I think that's the big hurdle is                                 kind of getting people to realize hey                                 you know what we don't know everything                                 let's let's play around and see we can                                 find that might actually solve our                                 problems a little better than we did                                 yeah I mean I definitely totally agree                                 with that I think the only thing is like                                 people almost have the feeling like okay                                 we got it wrong the first time that's                                 okay so let's try again and instead of                                 letting you know like somebody else try                                 again he's already solved a problem you                                 know we should try again and I don't                                 think that's the solution I think that                                 yeah we need to sort of recognize it                                 maybe other people already have solved                                 the problem already will solve the                                 problem for us just want to speak just                                 not nearly as deep a cultural problem                                 but um one area where I think we are                                 going to need to look outside and kind                                 of broken record on this this drupalcon                                 is at the JavaScript framework level the                                 client-side frameworks where as we look                                 more and more toward services we're                                 going to need to have a really great                                 robust JavaScript framework layer that                                 works flawlessly with Drupal I got a                                 horse in the race the backbone module I                                 think backbones perfect I think that's                                 one where there's just no there's no                                 reason why we'd want to make it                                 ourselves great ones exist you know so I                                 guess there's two sides to it there's                                 there's refactoring existing code then                                 there's as the new problem space is open                                 up really looking aggressively and I                                 think the contrib space is really                                 wonderful for that so if anything we do                                 have a pretty robust it's a culture of                                 you know taking things that were                                 investing about the outside into the                                 contrabass maybe just about being very                                 conscious about developing them in a way                                 that they're really robust API modules                                 yeah i mean i agree there that                                 contributes definitely been sort of more                                 open to using other people's code for                                 stuff then core has it could be any                                 number of reasons mostly /                                 a factor of the fact that could rip                                 moves so fast and is able to do that but                                 I do think yeah I mean it's it's a good                                 opportunity to you know to start                                 exploring other other places that we can                                 use other people's code and yeah i mean                                 that's definitely javascript framework                                 is could be something huge that we                                 probably don't want to be writing                                 ourselves before you speak first guy on                                 the slide there is right standing at the                                 mic thank you very much to him for                                 giving me many ideas for this talk to                                 answer the earlier question about where                                 to get involved in this in this                                 discussion
YouTube URL: https://www.youtube.com/watch?v=ABu0WOibWVI


