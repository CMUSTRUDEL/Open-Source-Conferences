Title: DrupalCon Austin 2014: CONTENT STAGING IN DRUPAL 8
Publication date: 2014-06-05
Playlist: DrupalCon Austin - June 2014
Description: 
	Speakers: dixon_
Drupal 8 has made significant improvements towards the ability to stage configuration. But what about content staging? Has it gotten easier in Drupal 8?

The technical challenges faced with regards to content staging are mainly synchronization and content dependency management.

This session is targeted towards site builders and we will dive deep into the inner workings of the content staging solution that's being built for Drupal 8 and what improvements it brings to sites owners that need to stage or replicate content across sites.

Further, site builders will learn how this solution also applies to broader and sometimes more exciting use cases - content sharing and filtered replication across networks of sites and applications.

Scenarios that will be explored:

Traditional content staging
Editorial hub powering a network of light front-end sites
Captions: 
	00:00:00,000 --> 00:00:05,490
okay and I think it's time to get

00:00:02,700 --> 00:00:09,330
started can you guys hear me all right

00:00:05,490 --> 00:00:11,250
yeah good excellent welcome to my

00:00:09,330 --> 00:00:13,980
presentation here today we're going to

00:00:11,250 --> 00:00:18,119
talk about content staging in Drupal 8

00:00:13,980 --> 00:00:20,760
specifically I submitted this session on

00:00:18,119 --> 00:00:22,260
the advanced site building because well

00:00:20,760 --> 00:00:25,920
we're not going to talk too much code

00:00:22,260 --> 00:00:27,779
I'm definitely going to cover some some

00:00:25,920 --> 00:00:30,090
components that were using to build the

00:00:27,779 --> 00:00:33,690
solution and some sort of intricate

00:00:30,090 --> 00:00:38,430
principles around this so so that's what

00:00:33,690 --> 00:00:39,690
we're going to talk about today in a

00:00:38,430 --> 00:00:43,379
little bit more detail we're going to

00:00:39,690 --> 00:00:46,320
cover what content staging is why we do

00:00:43,379 --> 00:00:48,840
content staging some of the reasons

00:00:46,320 --> 00:00:50,940
behind that we're going to also cover

00:00:48,840 --> 00:00:52,379
what we want from a Content staging

00:00:50,940 --> 00:00:54,510
solution in Drupal 8 we're going to

00:00:52,379 --> 00:00:58,949
cover some of the lessons we learn from

00:00:54,510 --> 00:01:01,710
Drupal 7 and how it's being built in

00:00:58,949 --> 00:01:03,510
Drupal 8 with the emphasis of being

00:01:01,710 --> 00:01:06,330
built because this is not a solution

00:01:03,510 --> 00:01:08,820
that is ready to use yet it's actively

00:01:06,330 --> 00:01:10,650
being built and some of what we're going

00:01:08,820 --> 00:01:14,790
to talk about here today it's not yet

00:01:10,650 --> 00:01:17,970
built so definitely a work left to do on

00:01:14,790 --> 00:01:20,189
this but I'm still excited to present

00:01:17,970 --> 00:01:22,670
these ideas to you guys and hopefully

00:01:20,189 --> 00:01:24,930
and for those of you that are interested

00:01:22,670 --> 00:01:27,570
now reach out to me during the code

00:01:24,930 --> 00:01:29,189
sprints here on Friday and we can sort

00:01:27,570 --> 00:01:31,590
of we can build a solution together that

00:01:29,189 --> 00:01:34,920
would be very exciting we also going to

00:01:31,590 --> 00:01:37,110
talk about some reusable protocols you

00:01:34,920 --> 00:01:38,610
will understand what I'm talking about

00:01:37,110 --> 00:01:40,070
that when I when I will come to that and

00:01:38,610 --> 00:01:42,450
then we're going to jump to some

00:01:40,070 --> 00:01:44,729
conclusions at the end I would have

00:01:42,450 --> 00:01:47,340
hoped to get a demo together for you

00:01:44,729 --> 00:01:49,610
guys today but as I said we're in very

00:01:47,340 --> 00:01:52,290
early stage development here so

00:01:49,610 --> 00:01:56,960
unfortunately we won't be able to do

00:01:52,290 --> 00:02:00,719
that so first Who am I I'm d Coulson

00:01:56,960 --> 00:02:04,049
Dixon on drupal.org on Twitter you'll

00:02:00,719 --> 00:02:05,909
find me under at Dickinson simply I'm a

00:02:04,049 --> 00:02:10,489
web technologist I love everything about

00:02:05,909 --> 00:02:13,470
the web about open source I am a

00:02:10,489 --> 00:02:16,200
passionate Drupal contributor I

00:02:13,470 --> 00:02:19,170
contributed core as well as maintain a

00:02:16,200 --> 00:02:22,110
couple of modules as well I maintain the

00:02:19,170 --> 00:02:24,810
uuid module and the deploy model both

00:02:22,110 --> 00:02:28,590
being used for content staging solutions

00:02:24,810 --> 00:02:32,160
in Drupal 7 I'm from Sweden I currently

00:02:28,590 --> 00:02:35,760
live and work in the UK so that's that's

00:02:32,160 --> 00:02:39,420
that's just short about me so let's dive

00:02:35,760 --> 00:02:40,920
into it what is content staging I'm

00:02:39,420 --> 00:02:44,040
first going to start by asking questions

00:02:40,920 --> 00:02:46,830
how many of you are doing some sort of

00:02:44,040 --> 00:02:48,750
content staging or advanced content

00:02:46,830 --> 00:02:53,070
staging workflows or anything like that

00:02:48,750 --> 00:02:55,170
at this moment ok great and how many of

00:02:53,070 --> 00:02:58,950
you are looking to build something or

00:02:55,170 --> 00:03:02,970
want to explore these possibilities ok

00:02:58,950 --> 00:03:04,950
that's great awesome so content staging

00:03:02,970 --> 00:03:07,500
is different things to different people

00:03:04,950 --> 00:03:10,290
and we're not going to cover too much of

00:03:07,500 --> 00:03:11,790
the editorial aspects of content

00:03:10,290 --> 00:03:13,590
workflow or content staging in this

00:03:11,790 --> 00:03:17,370
presentation we're going to cover the

00:03:13,590 --> 00:03:21,570
technical principles of how a system

00:03:17,370 --> 00:03:24,690
like this would work under the hood the

00:03:21,570 --> 00:03:26,489
editorial part that will be covered by

00:03:24,690 --> 00:03:28,590
other modules by other solutions they

00:03:26,489 --> 00:03:31,920
can sort of talk on to this so we're

00:03:28,590 --> 00:03:34,560
going to cover the technical aspects the

00:03:31,920 --> 00:03:38,310
simplest example is you have a stage

00:03:34,560 --> 00:03:39,900
site a production copy of that site your

00:03:38,310 --> 00:03:44,820
editors they sit on the staging site

00:03:39,900 --> 00:03:47,370
they do the content and then you do a

00:03:44,820 --> 00:03:50,489
push from stage to production that's the

00:03:47,370 --> 00:03:52,950
absolutely simplest example of content

00:03:50,489 --> 00:03:56,160
staging there are also solutions where

00:03:52,950 --> 00:03:58,230
you stage content on only on the

00:03:56,160 --> 00:04:00,450
production side there are other

00:03:58,230 --> 00:04:02,010
solutions for this so they depart we're

00:04:00,450 --> 00:04:03,750
going to cover here today is for when

00:04:02,010 --> 00:04:06,420
you have sort of a multi-server

00:04:03,750 --> 00:04:09,750
environment going a little bit more of a

00:04:06,420 --> 00:04:12,360
advanced example is a merge workflow or

00:04:09,750 --> 00:04:15,750
or where you want to call it where we

00:04:12,360 --> 00:04:18,560
basically have clones of your site the

00:04:15,750 --> 00:04:21,630
editorial one two and three for instance

00:04:18,560 --> 00:04:26,180
where editorial teams they work on

00:04:21,630 --> 00:04:28,610
individual updates can be big updates

00:04:26,180 --> 00:04:30,470
can be small updates and then they sort

00:04:28,610 --> 00:04:32,419
of come together they be merged into

00:04:30,470 --> 00:04:35,840
stage and then further push to

00:04:32,419 --> 00:04:41,110
production this is a a workflow that

00:04:35,840 --> 00:04:43,490
very well applies to the WF tools module

00:04:41,110 --> 00:04:45,889
it's a module being developed for for

00:04:43,490 --> 00:04:49,490
for drupal 7 there is very excited in

00:04:45,889 --> 00:04:51,620
the back there basically how that works

00:04:49,490 --> 00:04:53,750
is that you spin up copies of off of

00:04:51,620 --> 00:04:55,729
your production website where you can do

00:04:53,750 --> 00:04:58,460
big changes or small changes you can do

00:04:55,729 --> 00:04:59,990
code changes individually these changes

00:04:58,460 --> 00:05:03,949
might sit there and be reviewed for

00:04:59,990 --> 00:05:06,650
months and months and then later emerged

00:05:03,949 --> 00:05:10,340
to stage so this is another example of

00:05:06,650 --> 00:05:13,430
how you can do content staging another

00:05:10,340 --> 00:05:16,220
model is what I choose to call a hub

00:05:13,430 --> 00:05:19,160
spoke model I know a few companies that

00:05:16,220 --> 00:05:21,110
they use and deploy sort of solutions

00:05:19,160 --> 00:05:24,020
like this where they have one central

00:05:21,110 --> 00:05:25,910
editorial site that has no public

00:05:24,020 --> 00:05:28,669
content that's what they that's where

00:05:25,910 --> 00:05:30,560
they sit and work with in collections of

00:05:28,669 --> 00:05:34,159
content if you may and then they push

00:05:30,560 --> 00:05:37,099
these bits and pieces of content out to

00:05:34,159 --> 00:05:40,760
their front end web sites so these are

00:05:37,099 --> 00:05:46,280
all sort of separate websites and driven

00:05:40,760 --> 00:05:49,970
by a central editorial site other

00:05:46,280 --> 00:05:53,409
examples is not necessarily see if we

00:05:49,970 --> 00:05:53,409
can get it to change here

00:05:59,320 --> 00:06:01,950
it's

00:06:03,529 --> 00:06:06,740
sorry about that

00:06:22,130 --> 00:06:29,820
let's go through this again shall we

00:06:25,130 --> 00:06:32,310
there you go another mole is just a

00:06:29,820 --> 00:06:34,110
simple sort of ring or network model

00:06:32,310 --> 00:06:37,980
where you don't necessarily necessarily

00:06:34,110 --> 00:06:40,230
have any any staging site but you

00:06:37,980 --> 00:06:45,450
sharing content across the network of

00:06:40,230 --> 00:06:47,730
sites so not necessarily sort of a

00:06:45,450 --> 00:06:49,260
staging solution but it's definitely an

00:06:47,730 --> 00:06:51,360
interesting solution that I've seen

00:06:49,260 --> 00:06:54,270
people do they share content across

00:06:51,360 --> 00:06:57,210
websites the sort of stage or replicate

00:06:54,270 --> 00:07:00,300
content if you may so this is just some

00:06:57,210 --> 00:07:03,420
some different examples why do we do

00:07:00,300 --> 00:07:06,960
content staging some companies they have

00:07:03,420 --> 00:07:09,690
a specific workflows where they simply

00:07:06,960 --> 00:07:12,360
can't log into production or or they

00:07:09,690 --> 00:07:15,750
want to preview content in very specific

00:07:12,360 --> 00:07:19,890
ways Drupal hasn't been very good at

00:07:15,750 --> 00:07:22,230
providing full site full site previews

00:07:19,890 --> 00:07:24,300
so this is often why you separate stage

00:07:22,230 --> 00:07:26,100
and production into two separate sites

00:07:24,300 --> 00:07:31,140
or installations where you can do sort

00:07:26,100 --> 00:07:34,530
of full site previews other reasons our

00:07:31,140 --> 00:07:36,630
for better security some companies they

00:07:34,530 --> 00:07:39,630
don't want their editorial teams to sit

00:07:36,630 --> 00:07:42,960
on production and edit content so they

00:07:39,630 --> 00:07:44,790
put their staging site inside their

00:07:42,960 --> 00:07:46,650
corporate network behind firewalls

00:07:44,790 --> 00:07:49,920
that's where they sit and work on

00:07:46,650 --> 00:07:52,140
relations and and edits and then they

00:07:49,920 --> 00:07:54,480
when the content is ready they push it

00:07:52,140 --> 00:07:58,440
from within their corporate network out

00:07:54,480 --> 00:08:02,070
to the production site so for increased

00:07:58,440 --> 00:08:05,430
security that's one other reason then it

00:08:02,070 --> 00:08:08,160
can be legal reasons as well maybe you

00:08:05,430 --> 00:08:10,380
have a type of content on your website

00:08:08,160 --> 00:08:12,750
that simply is not geared to be changed

00:08:10,380 --> 00:08:15,780
live in production maybe needs very

00:08:12,750 --> 00:08:19,050
extensive legal reviews sometimes can

00:08:15,780 --> 00:08:20,790
take months so content changes might sit

00:08:19,050 --> 00:08:22,080
there and on a staging site for months

00:08:20,790 --> 00:08:25,020
while it's being reviewed and approved

00:08:22,080 --> 00:08:29,900
and and so on that's also one of the

00:08:25,020 --> 00:08:29,900
reasons why why we do content staging

00:08:33,870 --> 00:08:42,039
but no matter why you do content staging

00:08:37,029 --> 00:08:43,750
or how you do it it all sort of is based

00:08:42,039 --> 00:08:46,230
on the same principles its content

00:08:43,750 --> 00:08:49,209
staging some call it content sharing

00:08:46,230 --> 00:08:51,220
content replication or content

00:08:49,209 --> 00:08:54,610
syndication between different

00:08:51,220 --> 00:08:56,279
environments so it's all sort of the

00:08:54,610 --> 00:08:59,140
same principle no matter how you

00:08:56,279 --> 00:09:01,060
configure your workflow or what the

00:08:59,140 --> 00:09:03,279
reasons are it's it's built on the same

00:09:01,060 --> 00:09:04,810
underlying principles it's just called a

00:09:03,279 --> 00:09:08,050
little bit different quite different

00:09:04,810 --> 00:09:12,610
people so what do we want from from a

00:09:08,050 --> 00:09:14,290
solution in Drupal 8 um we don't we

00:09:12,610 --> 00:09:17,890
don't just want to build a sort of

00:09:14,290 --> 00:09:20,320
content staging system we want to we

00:09:17,890 --> 00:09:22,360
want to build a generic or more loosely

00:09:20,320 --> 00:09:26,050
coupled system where it's going to be

00:09:22,360 --> 00:09:27,820
easier to to support the various

00:09:26,050 --> 00:09:30,279
configurations of the various ways that

00:09:27,820 --> 00:09:33,790
you want to share or replicate or staged

00:09:30,279 --> 00:09:37,690
content the solution that we built in

00:09:33,790 --> 00:09:40,029
Drupal 7 was very much a pure content

00:09:37,690 --> 00:09:42,579
staging solution people try to sort of

00:09:40,029 --> 00:09:46,420
bend it and use it for other sorts of

00:09:42,579 --> 00:09:50,800
ways but so we want we want to create a

00:09:46,420 --> 00:09:53,350
more loosely coupled system here and as

00:09:50,800 --> 00:09:55,449
I briefly mentioned we of course wants

00:09:53,350 --> 00:09:57,880
to we want to learn from from the Drupal

00:09:55,449 --> 00:10:00,279
7 implementation of the uid module they

00:09:57,880 --> 00:10:03,940
deploy module and the workflow tools

00:10:00,279 --> 00:10:06,190
module as well so what we want to take

00:10:03,940 --> 00:10:08,440
our experience from the those modules

00:10:06,190 --> 00:10:15,519
and and sort of improve and and build

00:10:08,440 --> 00:10:18,339
upon that as well and in in more detail

00:10:15,519 --> 00:10:20,709
and I'm going to cover and going to

00:10:18,339 --> 00:10:22,630
cover this in more detail as we go but

00:10:20,709 --> 00:10:27,100
one of the lessons that we've had is

00:10:22,630 --> 00:10:29,110
that we need revisions everywhere why do

00:10:27,100 --> 00:10:31,720
we why do we need that we need that for

00:10:29,110 --> 00:10:34,990
things like detecting conflicts if you

00:10:31,720 --> 00:10:38,170
have a merged workflow or or anything

00:10:34,990 --> 00:10:40,060
like that then the previous solutions

00:10:38,170 --> 00:10:43,310
that we built with the deployment hasn't

00:10:40,060 --> 00:10:44,990
been very good at detecting

00:10:43,310 --> 00:10:47,630
conflict so we want conflict detection

00:10:44,990 --> 00:10:50,240
we also want an easier way of dealing

00:10:47,630 --> 00:10:53,330
with dependencies dependencies being if

00:10:50,240 --> 00:10:54,770
you want to move around and node you

00:10:53,330 --> 00:10:56,540
need to know what the dependencies of

00:10:54,770 --> 00:11:02,360
that node is for instance the author

00:10:56,540 --> 00:11:05,210
user or or taxonomy tags or other node

00:11:02,360 --> 00:11:07,310
reference references those are all

00:11:05,210 --> 00:11:09,380
dependencies and we need to manage these

00:11:07,310 --> 00:11:12,550
dependencies as we move all of these

00:11:09,380 --> 00:11:16,400
nodes around or other types of entities

00:11:12,550 --> 00:11:19,010
and we also want to support ad hoc

00:11:16,400 --> 00:11:22,040
replication or ad hoc pushes or

00:11:19,010 --> 00:11:24,890
continuous replication of content

00:11:22,040 --> 00:11:27,950
between our environments and content

00:11:24,890 --> 00:11:30,290
staging is usually seen as the sort of

00:11:27,950 --> 00:11:32,210
ad hoc push when I'm done that's what I

00:11:30,290 --> 00:11:34,370
want to push push there are use cases

00:11:32,210 --> 00:11:36,710
where you want to have a continuous

00:11:34,370 --> 00:11:37,910
replication of your content across your

00:11:36,710 --> 00:11:42,190
environment so that's also something

00:11:37,910 --> 00:11:44,300
that we want to support also

00:11:42,190 --> 00:11:46,130
bi-directional replication of

00:11:44,300 --> 00:11:47,870
bi-directional content sharing between

00:11:46,130 --> 00:11:50,000
environments would also be very

00:11:47,870 --> 00:11:54,140
interesting to to support with this

00:11:50,000 --> 00:11:55,820
model maybe that's something that you

00:11:54,140 --> 00:11:58,010
most likely want when when you have a

00:11:55,820 --> 00:12:00,230
network of sites that that is sharing

00:11:58,010 --> 00:12:03,589
content across each other and of course

00:12:00,230 --> 00:12:07,100
we want this all to be driven by a REST

00:12:03,589 --> 00:12:08,900
API that's it that's a good way of doing

00:12:07,100 --> 00:12:10,760
it that's how we did it in in Drupal 7

00:12:08,900 --> 00:12:14,450
so so these are the things we're going

00:12:10,760 --> 00:12:15,440
to cover and how is it being built we're

00:12:14,450 --> 00:12:18,050
going to walk through a couple of

00:12:15,440 --> 00:12:21,980
modules here the core modules that we're

00:12:18,050 --> 00:12:25,480
utilizing or the serialization module

00:12:21,980 --> 00:12:29,030
and the restful webservices module and

00:12:25,480 --> 00:12:30,290
in addition to those core modules the

00:12:29,030 --> 00:12:33,380
first module that we're going to talk

00:12:30,290 --> 00:12:36,140
about is the multi version module on top

00:12:33,380 --> 00:12:38,209
of that we're extending the restful web

00:12:36,140 --> 00:12:42,320
services with what I used to call a

00:12:38,209 --> 00:12:46,190
relaxed web service module yeah sorry

00:12:42,320 --> 00:12:48,010
about that and then lastly but not least

00:12:46,190 --> 00:12:51,140
we're going to cover the deploy model

00:12:48,010 --> 00:12:56,390
that's going to work together with all

00:12:51,140 --> 00:12:57,170
of these modules so first multi version

00:12:56,390 --> 00:12:59,839
module

00:12:57,170 --> 00:13:01,940
the purpose of this module it's sort of

00:12:59,839 --> 00:13:05,930
the sits in the bottom of this stack

00:13:01,940 --> 00:13:08,779
really and its first purpose is to track

00:13:05,930 --> 00:13:11,540
all update sequences in order to make

00:13:08,779 --> 00:13:14,269
dependency management a lot easier so

00:13:11,540 --> 00:13:15,860
we're tracking in in what order and all

00:13:14,269 --> 00:13:19,070
the changes that are being done to

00:13:15,860 --> 00:13:22,000
entities and we we track all of these

00:13:19,070 --> 00:13:26,240
sequences and in what order they happen

00:13:22,000 --> 00:13:29,199
because then one of the most challenging

00:13:26,240 --> 00:13:31,850
things in in Drupal 7 would deploy was

00:13:29,199 --> 00:13:34,940
what was in the module called entity

00:13:31,850 --> 00:13:38,300
dependency because when you have a

00:13:34,940 --> 00:13:41,079
notice as I explained earlier to an to

00:13:38,300 --> 00:13:44,300
deal with these dependencies we had to

00:13:41,079 --> 00:13:48,380
parse them recursively and build a graph

00:13:44,300 --> 00:13:50,300
of how these dependencies come together

00:13:48,380 --> 00:13:54,050
and in what order were going to deal

00:13:50,300 --> 00:13:56,480
with them and graphing and recursive

00:13:54,050 --> 00:13:59,329
dependency management is that's very

00:13:56,480 --> 00:14:01,550
difficult to deal with so the solution

00:13:59,329 --> 00:14:04,040
here is that this track in what order

00:14:01,550 --> 00:14:07,640
everything is happening and then we can

00:14:04,040 --> 00:14:09,680
simply replay the whole order or part of

00:14:07,640 --> 00:14:12,110
that order a lot easier we don't need to

00:14:09,680 --> 00:14:15,350
change with ordering of our dependencies

00:14:12,110 --> 00:14:17,029
we just need to understand what are the

00:14:15,350 --> 00:14:20,410
dependencies of an entity and then we

00:14:17,029 --> 00:14:23,300
can just replay that in in a sequence

00:14:20,410 --> 00:14:25,430
multi version module also provides

00:14:23,300 --> 00:14:29,959
revision support for all content

00:14:25,430 --> 00:14:32,089
entities this is quite a significant

00:14:29,959 --> 00:14:35,560
change but it's possible now with the

00:14:32,089 --> 00:14:40,490
entity API in Drupal 8 we have revision

00:14:35,560 --> 00:14:44,899
generic revision support for entities so

00:14:40,490 --> 00:14:47,769
and we since last week a core patch got

00:14:44,899 --> 00:14:52,360
committed where the schema generation is

00:14:47,769 --> 00:14:55,100
dynamic so it's not up to each entity to

00:14:52,360 --> 00:14:58,010
to define its kima it's derived from

00:14:55,100 --> 00:14:59,870
metadata about that entity so the schema

00:14:58,010 --> 00:15:02,690
generation is dynamic which makes these

00:14:59,870 --> 00:15:05,269
things a lot easier and we are working

00:15:02,690 --> 00:15:08,209
on a patch for core that we will depend

00:15:05,269 --> 00:15:09,890
on on Friday which is also going to be

00:15:08,209 --> 00:15:10,520
crucial for this where where you can

00:15:09,890 --> 00:15:13,960
extend

00:15:10,520 --> 00:15:16,730
entities with more bass properties and

00:15:13,960 --> 00:15:19,130
bass property is not being configurable

00:15:16,730 --> 00:15:20,990
fields as we know from cck and so on but

00:15:19,130 --> 00:15:22,640
we can extend entities with with more

00:15:20,990 --> 00:15:26,570
bass property so that's also going to be

00:15:22,640 --> 00:15:30,200
crucial and then last but not least

00:15:26,570 --> 00:15:32,750
we're tracking we're tracking revision

00:15:30,200 --> 00:15:37,250
trees in a way very similar to how get

00:15:32,750 --> 00:15:43,190
is tracking revisions and we do this to

00:15:37,250 --> 00:15:44,990
support the conflict detection and with

00:15:43,190 --> 00:15:46,640
the primary use case being for instance

00:15:44,990 --> 00:15:48,680
the merge workflow us as we talked about

00:15:46,640 --> 00:15:52,100
earlier let's say if you work on the

00:15:48,680 --> 00:15:54,020
editorial environment one you work on

00:15:52,100 --> 00:15:56,000
maybe know that one two three and four

00:15:54,020 --> 00:15:57,770
you doing change it to those and then on

00:15:56,000 --> 00:16:00,320
editorial environment three for instance

00:15:57,770 --> 00:16:06,320
you also make a change to node number

00:16:00,320 --> 00:16:09,110
two and in the Drupal 7 version of of

00:16:06,320 --> 00:16:12,500
deploy then we weren't really able to

00:16:09,110 --> 00:16:15,320
detect conflicts whatever change that

00:16:12,500 --> 00:16:17,210
got the player deployed last that was

00:16:15,320 --> 00:16:20,180
the revision of one there was not an

00:16:17,210 --> 00:16:23,240
easy way to detect these conflicts or or

00:16:20,180 --> 00:16:25,430
to deal with them in any way so this is

00:16:23,240 --> 00:16:27,590
why we're tracking revision trees for

00:16:25,430 --> 00:16:31,520
for all entities so that we can more

00:16:27,590 --> 00:16:34,190
easily detect where conflicts are

00:16:31,520 --> 00:16:36,410
happening so that's the purpose of multi

00:16:34,190 --> 00:16:37,640
version module we're doing a few more

00:16:36,410 --> 00:16:40,220
things that I'm going to talk about the

00:16:37,640 --> 00:16:43,010
revisions in a little bit more detail

00:16:40,220 --> 00:16:45,290
how that's actually being done in the

00:16:43,010 --> 00:16:51,260
Drupal 7 version we had uuid s4

00:16:45,290 --> 00:16:53,840
revisions uuid support for IDs or in

00:16:51,260 --> 00:16:55,880
core there are not any uu IDs for

00:16:53,840 --> 00:16:59,440
revision which is a good thing because

00:16:55,880 --> 00:17:02,980
we don't want you I these provisions

00:16:59,440 --> 00:17:06,290
revisions in this case is a hash string

00:17:02,980 --> 00:17:10,520
calculated from the actual changes of an

00:17:06,290 --> 00:17:13,459
oven entity so this way it's easier for

00:17:10,520 --> 00:17:18,110
each server in the network staging or

00:17:13,459 --> 00:17:20,180
production or your editorial sites to to

00:17:18,110 --> 00:17:22,250
detect conflict without doing needing to

00:17:20,180 --> 00:17:24,049
do deep inspection of an entity or

00:17:22,250 --> 00:17:26,149
without needing to ask

00:17:24,049 --> 00:17:28,429
the network your other editorial sites

00:17:26,149 --> 00:17:30,590
what did he change what was your last

00:17:28,429 --> 00:17:32,929
revision a lot of network calls to sort

00:17:30,590 --> 00:17:37,580
of figure that out so we have a

00:17:32,929 --> 00:17:39,230
consistent hashing mechanism that where

00:17:37,580 --> 00:17:41,720
the revision is just the hash of the

00:17:39,230 --> 00:17:45,320
changes the parameters that the hash is

00:17:41,720 --> 00:17:47,779
taking is if it's deleted or not I what

00:17:45,320 --> 00:17:50,210
about the current sequence ID is the

00:17:47,779 --> 00:17:54,860
previous or the old revision and then

00:17:50,210 --> 00:17:58,580
the normalized entity am used by the

00:17:54,860 --> 00:18:02,090
serialization ap either and the the

00:17:58,580 --> 00:18:05,950
string that we're doing the md5 hash of

00:18:02,090 --> 00:18:09,799
is a JSON representation of that entity

00:18:05,950 --> 00:18:13,489
and looking just at the at a simple

00:18:09,799 --> 00:18:15,440
entity and it's JSON format how we're

00:18:13,489 --> 00:18:18,259
tracking the relation trees is done in

00:18:15,440 --> 00:18:21,129
the revisions info field and there you

00:18:18,259 --> 00:18:23,480
can see the the hash just two examples

00:18:21,129 --> 00:18:26,029
we're also having a field or a base

00:18:23,480 --> 00:18:28,100
property that the displays the local

00:18:26,029 --> 00:18:29,539
sequence number it's important for

00:18:28,100 --> 00:18:31,970
various reasons and then we have another

00:18:29,539 --> 00:18:33,350
flag there which you might think is a

00:18:31,970 --> 00:18:36,460
little bit strange but that's a flag

00:18:33,350 --> 00:18:40,100
saying if the entity is deleted or not

00:18:36,460 --> 00:18:45,529
strange that's strange because we're

00:18:40,100 --> 00:18:47,869
changing the semantics of of the entity

00:18:45,529 --> 00:18:52,580
storage we're doing more crap instead of

00:18:47,869 --> 00:18:54,739
crud crud stands for create read update

00:18:52,580 --> 00:18:56,869
delete that's the traditional model of

00:18:54,739 --> 00:18:59,419
how how how Drupal is dealing with

00:18:56,869 --> 00:19:01,489
entity storage instead we're doing

00:18:59,419 --> 00:19:05,779
something that is often referred to as

00:19:01,489 --> 00:19:08,889
crap create read archive and purge that

00:19:05,779 --> 00:19:13,309
means that entities are never deleted

00:19:08,889 --> 00:19:17,539
that just archived and then later maybe

00:19:13,309 --> 00:19:21,320
being purged so every change to an

00:19:17,539 --> 00:19:24,859
entity is a new revision even a delete

00:19:21,320 --> 00:19:27,799
is a new revision that just happens to

00:19:24,859 --> 00:19:29,720
be more more as deleted this is how get

00:19:27,799 --> 00:19:32,779
is doing it when you delete the filing

00:19:29,720 --> 00:19:37,440
gate it's actually not removing the file

00:19:32,779 --> 00:19:39,299
itself it's saved as a new relation

00:19:37,440 --> 00:19:42,179
that happens to be more tests marked as

00:19:39,299 --> 00:19:43,590
deleted so we're changing the semantics

00:19:42,179 --> 00:19:45,929
of the entity storage here a little bit

00:19:43,590 --> 00:19:47,940
then we need to do this in order to

00:19:45,929 --> 00:19:51,659
handle conflicts in order to handle

00:19:47,940 --> 00:19:53,639
conflicts where one version on editorial

00:19:51,659 --> 00:19:55,980
environment three maybe was deleted and

00:19:53,639 --> 00:19:58,230
in another environment we did an update

00:19:55,980 --> 00:20:00,990
to that node when that comes together on

00:19:58,230 --> 00:20:03,149
the staging environment we need to be

00:20:00,990 --> 00:20:04,980
able to take decisions of how to deal

00:20:03,149 --> 00:20:07,679
with this conflict so that's why we

00:20:04,980 --> 00:20:09,750
can't sort of wipe the entity way

00:20:07,679 --> 00:20:15,539
because then we don't have anything we

00:20:09,750 --> 00:20:17,519
can take decisions on so so that's

00:20:15,539 --> 00:20:19,139
that's how we're changing the D

00:20:17,519 --> 00:20:21,899
semantics and then you can run

00:20:19,139 --> 00:20:25,049
compaction yobs as i call it on cron

00:20:21,899 --> 00:20:28,529
where we are purging away actually

00:20:25,049 --> 00:20:30,990
deleting entities on on cron they do

00:20:28,529 --> 00:20:33,029
take up a lot of space of course in your

00:20:30,990 --> 00:20:36,360
database if you know we always going to

00:20:33,029 --> 00:20:38,669
store all entities so a compaction job

00:20:36,360 --> 00:20:44,730
can if you want to actually delete them

00:20:38,669 --> 00:20:47,360
or purged deleted revisions yeah a

00:20:44,730 --> 00:20:47,360
question

00:21:04,279 --> 00:21:11,849
so so the question was is it possible

00:21:08,039 --> 00:21:14,549
during the compaction 22 not delete but

00:21:11,849 --> 00:21:16,710
store it in a archive database on a

00:21:14,549 --> 00:21:18,539
separate database if you have if there

00:21:16,710 --> 00:21:22,830
are legal things why you might need to

00:21:18,539 --> 00:21:26,460
store deleted things yes it is and

00:21:22,830 --> 00:21:29,429
that's it's not built in inherently into

00:21:26,460 --> 00:21:32,159
the system but Drupal 8 is very nice for

00:21:29,429 --> 00:21:34,259
you in this respect because and I will

00:21:32,159 --> 00:21:36,589
actually cover how the compaction things

00:21:34,259 --> 00:21:39,539
is bit a little bit later but it's all

00:21:36,589 --> 00:21:41,519
we have basically a compaction manager

00:21:39,539 --> 00:21:43,830
which is in the dependency injection

00:21:41,519 --> 00:21:47,719
container you can swap out that

00:21:43,830 --> 00:21:50,129
compaction manager with the with the

00:21:47,719 --> 00:21:52,200
symphony stack that we're using for this

00:21:50,129 --> 00:21:54,539
swap out the compaction manager and

00:21:52,200 --> 00:21:57,179
instead of deleting you push it to a

00:21:54,539 --> 00:21:58,859
different storage so it's not inherently

00:21:57,179 --> 00:22:00,479
built into the system but it's supported

00:21:58,859 --> 00:22:04,249
by drupal 8 through the dependency

00:22:00,479 --> 00:22:06,570
injection container which is very nice

00:22:04,249 --> 00:22:07,950
ok we're going to cover some some

00:22:06,570 --> 00:22:11,729
components that we used to build this

00:22:07,950 --> 00:22:16,369
and we have a sequence index to track

00:22:11,729 --> 00:22:18,269
all the update sequences that's that's

00:22:16,369 --> 00:22:20,279
bundled together in a service that

00:22:18,269 --> 00:22:24,359
implements the sequence index interface

00:22:20,279 --> 00:22:27,899
and injected into this into this service

00:22:24,359 --> 00:22:30,389
is a key value factory interface because

00:22:27,899 --> 00:22:33,239
we store all of the sequence in the key

00:22:30,389 --> 00:22:35,879
value store that is provided by drupal 8

00:22:33,239 --> 00:22:37,169
because tracking all sequences they're

00:22:35,879 --> 00:22:39,809
going to be a lot of them on your side

00:22:37,169 --> 00:22:41,669
so storing them in the key value store

00:22:39,809 --> 00:22:43,169
makes sense you can swap that out if you

00:22:41,669 --> 00:22:46,289
don't want to use MySQL you can use

00:22:43,169 --> 00:22:50,700
Redis or or anything else they want it's

00:22:46,289 --> 00:22:54,359
where the sequence index service that's

00:22:50,700 --> 00:22:58,469
wrapped if you may buy a new entity

00:22:54,359 --> 00:23:00,989
storage controller that is using a

00:22:58,469 --> 00:23:02,580
genetic trait because the storage

00:23:00,989 --> 00:23:05,070
controller the changes that we're doing

00:23:02,580 --> 00:23:08,190
the semantics that we're changing around

00:23:05,070 --> 00:23:10,500
do more crap instead of crud and it's

00:23:08,190 --> 00:23:12,779
actually storage agnostic where we

00:23:10,500 --> 00:23:15,539
bundle everything into trade so for

00:23:12,779 --> 00:23:18,419
instance the MongoDB storage controller

00:23:15,539 --> 00:23:19,529
can just reapply this trait and and get

00:23:18,419 --> 00:23:22,830
all the benefits of what we're doing

00:23:19,529 --> 00:23:25,649
here and then to what we just covered

00:23:22,830 --> 00:23:27,480
here and there are two other services

00:23:25,649 --> 00:23:30,480
important services that we have a

00:23:27,480 --> 00:23:32,580
conflict manager and a compaction

00:23:30,480 --> 00:23:34,769
manager at both that are dealing with

00:23:32,580 --> 00:23:36,179
conflict and and and the compaction

00:23:34,769 --> 00:23:38,850
things that we just talked about and

00:23:36,179 --> 00:23:42,539
these these you can swap out in it in

00:23:38,850 --> 00:23:44,340
the in the container if you want to so

00:23:42,539 --> 00:23:46,320
that's that's multi version module

00:23:44,340 --> 00:23:48,419
that's essentially what it's doing and

00:23:46,320 --> 00:23:50,639
it's doing a lot of the heavy lifting of

00:23:48,419 --> 00:23:53,100
tracking revision trees conflicts and

00:23:50,639 --> 00:23:56,399
compaction so it's it's sort of a very

00:23:53,100 --> 00:23:59,940
fundamental low level module that's

00:23:56,399 --> 00:24:02,429
important for this back second we have

00:23:59,940 --> 00:24:07,080
the relaxed module which provides an

00:24:02,429 --> 00:24:09,299
extension to the rest module basically

00:24:07,080 --> 00:24:13,470
provides a new JSON API we're not using

00:24:09,299 --> 00:24:14,850
the core endpoints or the core JSON

00:24:13,470 --> 00:24:17,070
endpoints because they are not very well

00:24:14,850 --> 00:24:19,500
geared toward towards what we want to do

00:24:17,070 --> 00:24:21,269
here so we use the plugin framework that

00:24:19,500 --> 00:24:24,210
the rest model is doing but we provide a

00:24:21,269 --> 00:24:27,120
new set of endpoints endpoints for all

00:24:24,210 --> 00:24:30,330
content entities and file attachments or

00:24:27,120 --> 00:24:33,139
file entities as they are then we also

00:24:30,330 --> 00:24:36,779
provide a couple of endpoints for

00:24:33,139 --> 00:24:38,879
certain administrative tasks we make

00:24:36,779 --> 00:24:42,179
comparing revisions we need to do that

00:24:38,879 --> 00:24:45,059
while we're staging content we can start

00:24:42,179 --> 00:24:49,799
and stop replications either ad hoc or

00:24:45,059 --> 00:24:51,000
continuous replications and there are n

00:24:49,799 --> 00:24:53,460
points for for a few other

00:24:51,000 --> 00:24:55,529
administrative task as well you can for

00:24:53,460 --> 00:24:59,460
instance trigger compaction over the

00:24:55,529 --> 00:25:01,919
REST API etc and there's going to be a

00:24:59,460 --> 00:25:03,210
dress plug in 4 for dealing with all of

00:25:01,919 --> 00:25:05,190
these things as well so you don't need

00:25:03,210 --> 00:25:06,659
to use the rest api you will have this

00:25:05,190 --> 00:25:12,120
same set of functionality available

00:25:06,659 --> 00:25:14,639
through drush so we have a document

00:25:12,120 --> 00:25:17,250
resource the generic resource that is

00:25:14,639 --> 00:25:18,850
dealing with the content entities and

00:25:17,250 --> 00:25:20,980
this is implementing

00:25:18,850 --> 00:25:24,280
the plug-in system provided by the rest

00:25:20,980 --> 00:25:27,820
module we as I said have a separate

00:25:24,280 --> 00:25:32,140
endpoint for attachments all extending

00:25:27,820 --> 00:25:34,930
the rest resource base it's a very nice

00:25:32,140 --> 00:25:38,400
API by the way and it's easy to write

00:25:34,930 --> 00:25:42,520
new endpoints so so that's very exciting

00:25:38,400 --> 00:25:46,750
we also have a vault document end point

00:25:42,520 --> 00:25:50,170
where we can push multiple entities

00:25:46,750 --> 00:25:53,590
multiple content entities at once in the

00:25:50,170 --> 00:25:56,380
Drupal 7 version if you were pushing in

00:25:53,590 --> 00:25:59,080
1 push a hundred nodes or a hundred

00:25:56,380 --> 00:26:01,600
entities they updated that was a hundred

00:25:59,080 --> 00:26:05,230
HTTP calls back and forth for every

00:26:01,600 --> 00:26:06,850
single document the no more network

00:26:05,230 --> 00:26:08,710
communication you have obviously the

00:26:06,850 --> 00:26:10,930
higher the risk is that somewhere along

00:26:08,710 --> 00:26:13,810
the line it will fail so we do provide

00:26:10,930 --> 00:26:16,690
an end point for pushing in multiple

00:26:13,810 --> 00:26:20,740
document at once so one HTTP call for

00:26:16,690 --> 00:26:24,610
pushing 50 nodes or however many you

00:26:20,740 --> 00:26:29,140
want to push at once then we also have

00:26:24,610 --> 00:26:31,570
an endpoint for for showing the sequence

00:26:29,140 --> 00:26:33,640
at the update sequence that we talked

00:26:31,570 --> 00:26:37,150
about before basically an endpoint to

00:26:33,640 --> 00:26:39,220
show all the changes in your database or

00:26:37,150 --> 00:26:41,230
among your entities into that database

00:26:39,220 --> 00:26:43,120
and this is going to be important i'm

00:26:41,230 --> 00:26:44,410
going to cover how the replication is

00:26:43,120 --> 00:26:47,110
actually going to work it a little bit

00:26:44,410 --> 00:26:50,770
later and then an end point for

00:26:47,110 --> 00:26:53,170
comparing comparing revisions what what

00:26:50,770 --> 00:26:57,340
revisions our target site and source

00:26:53,170 --> 00:26:59,740
site missing between each other etc so

00:26:57,340 --> 00:27:02,620
in practice how is the replication

00:26:59,740 --> 00:27:04,210
working on a technical level so there

00:27:02,620 --> 00:27:06,850
are a few there are a few network calls

00:27:04,210 --> 00:27:09,940
that we need to do here first add the

00:27:06,850 --> 00:27:12,010
source and target they have each a uuid

00:27:09,940 --> 00:27:17,710
so the source inventory can be

00:27:12,010 --> 00:27:19,360
identified is universally and when you

00:27:17,710 --> 00:27:22,230
want to push from the source site to the

00:27:19,360 --> 00:27:27,160
target site first we ask target site at

00:27:22,230 --> 00:27:32,320
what sequence number did I last do the

00:27:27,160 --> 00:27:34,179
push and and so we do a

00:27:32,320 --> 00:27:36,159
so we're storing that's a checkpoint on

00:27:34,179 --> 00:27:38,440
the target sites and then when we have

00:27:36,159 --> 00:27:44,289
that answer then we can get the changes

00:27:38,440 --> 00:27:47,919
since that sequence from the source site

00:27:44,289 --> 00:27:49,750
and this can be all the changes or we

00:27:47,919 --> 00:27:52,620
can apply filter to this so i only want

00:27:49,750 --> 00:27:56,169
the changes since this timestamp for

00:27:52,620 --> 00:27:58,299
node articles you can apply filter to

00:27:56,169 --> 00:28:00,220
this not going to cover the

00:27:58,299 --> 00:28:03,519
implementation details of this because

00:28:00,220 --> 00:28:05,980
it's not all done but basically we ask

00:28:03,519 --> 00:28:09,669
here what is your last changes that you

00:28:05,980 --> 00:28:13,870
don't have then we pass this result

00:28:09,669 --> 00:28:17,860
these changes to the rebbe revision beef

00:28:13,870 --> 00:28:20,500
and put on the target site to ask among

00:28:17,860 --> 00:28:22,389
these changes that you don't have what

00:28:20,500 --> 00:28:25,000
revisions don't you have because some of

00:28:22,389 --> 00:28:27,159
the reasons you might already have so we

00:28:25,000 --> 00:28:29,860
get a div and we collect all of those

00:28:27,159 --> 00:28:33,490
missing revisions from the source site

00:28:29,860 --> 00:28:37,029
and those are the revisions that we push

00:28:33,490 --> 00:28:42,009
in with just one network all to the bulk

00:28:37,029 --> 00:28:45,039
Doc's endpoint so it's it's a little bit

00:28:42,009 --> 00:28:47,529
more sort of communication initially to

00:28:45,039 --> 00:28:49,389
figure out what relations you need to

00:28:47,529 --> 00:28:51,909
deploy but once you deploy them it's one

00:28:49,389 --> 00:28:54,129
network also the stack here is very

00:28:51,909 --> 00:28:56,679
quick to go through and it's less

00:28:54,129 --> 00:29:02,860
fragile if you may compared to the

00:28:56,679 --> 00:29:06,009
Drupal 7 setup and then last we we save

00:29:02,860 --> 00:29:08,679
the checkpoint on the on the target site

00:29:06,009 --> 00:29:12,519
so that we can redo this again and just

00:29:08,679 --> 00:29:19,570
get the changes that we've done since

00:29:12,519 --> 00:29:22,240
last push and then last but not least we

00:29:19,570 --> 00:29:24,220
have the deploy model a deploy model in

00:29:22,240 --> 00:29:27,789
this case it's just going to be a simple

00:29:24,220 --> 00:29:30,100
UI simple user interface on top of this

00:29:27,789 --> 00:29:32,590
to manage your replication so to manage

00:29:30,100 --> 00:29:35,409
your deployment plans as we call them

00:29:32,590 --> 00:29:37,840
and it's also going to provide you with

00:29:35,409 --> 00:29:40,870
a user interface to manage your

00:29:37,840 --> 00:29:43,299
conflicts your revision collisions and

00:29:40,870 --> 00:29:46,090
so on so this is going to be quite a

00:29:43,299 --> 00:29:48,820
thin lightweight module on top of the

00:29:46,090 --> 00:29:52,809
other modules that we that we just

00:29:48,820 --> 00:29:54,669
covered so that's basically the stack of

00:29:52,809 --> 00:29:56,049
modules that that we're going to use to

00:29:54,669 --> 00:29:59,650
build all of these various solutions

00:29:56,049 --> 00:30:04,029
that were covered and I'm going to spend

00:29:59,650 --> 00:30:06,400
a little bit of talk of time to to talk

00:30:04,029 --> 00:30:08,980
about some reusable protocols here and

00:30:06,400 --> 00:30:11,260
as I said the revision and the conflict

00:30:08,980 --> 00:30:14,620
detection detection module is taken from

00:30:11,260 --> 00:30:17,289
gate how get is doing it and also from

00:30:14,620 --> 00:30:19,690
from couchdb they do something very

00:30:17,289 --> 00:30:21,970
similar here in in pushing content

00:30:19,690 --> 00:30:24,730
around various nodes we're not using

00:30:21,970 --> 00:30:27,820
couch to be in any way we just sort of

00:30:24,730 --> 00:30:30,340
reusing the ideas here and the

00:30:27,820 --> 00:30:32,950
replication protocol the various steps

00:30:30,340 --> 00:30:36,520
they will go through to do replication

00:30:32,950 --> 00:30:39,760
it's also taken from couch to be and the

00:30:36,520 --> 00:30:41,020
API looks very very much the same as

00:30:39,760 --> 00:30:42,520
couch with me again we're not using

00:30:41,020 --> 00:30:45,039
couch to be for anything we're just

00:30:42,520 --> 00:30:47,529
reusing this protocol because why

00:30:45,039 --> 00:30:53,799
reinvent them if someone already solved

00:30:47,529 --> 00:30:56,710
the problem for us and and reusing these

00:30:53,799 --> 00:30:59,200
api specification this protocol will end

00:30:56,710 --> 00:31:00,899
the framework to unexpected use cases

00:30:59,200 --> 00:31:03,730
that i think can be quite exciting and

00:31:00,899 --> 00:31:05,950
that otherwise would not be possible for

00:31:03,730 --> 00:31:09,370
instance we have couch to be two

00:31:05,950 --> 00:31:11,950
compatible ap is quite exciting then you

00:31:09,370 --> 00:31:13,390
can use things like pouch dB at portable

00:31:11,950 --> 00:31:16,210
couch to be which is a javascript

00:31:13,390 --> 00:31:18,669
implementation you can write very thin

00:31:16,210 --> 00:31:20,380
front-end sites that natively can

00:31:18,669 --> 00:31:24,220
communicate with your site through this

00:31:20,380 --> 00:31:26,350
sort of standard REST API if you may why

00:31:24,220 --> 00:31:29,860
invent our own REST API when we can

00:31:26,350 --> 00:31:33,399
expose our Drupal data through a unified

00:31:29,860 --> 00:31:36,010
API that more software can can talk to

00:31:33,399 --> 00:31:39,010
there's also touch DB which is

00:31:36,010 --> 00:31:42,700
compatible with this api specification

00:31:39,010 --> 00:31:45,909
as well touch to be is a is a local

00:31:42,700 --> 00:31:48,190
database for smartphones so they can

00:31:45,909 --> 00:31:49,870
communicate with this same API that

00:31:48,190 --> 00:31:51,880
we're providing it's the same

00:31:49,870 --> 00:31:55,360
specification that we're exposing our

00:31:51,880 --> 00:31:58,020
Drupal entities through so so so that's

00:31:55,360 --> 00:31:58,020
quite exciting

00:31:58,850 --> 00:32:05,540
I would have liked it give you guys a

00:32:00,920 --> 00:32:08,360
demo but it's not done so you know

00:32:05,540 --> 00:32:10,130
reached out to me on on friday during

00:32:08,360 --> 00:32:12,560
the code sprint and i can show you the

00:32:10,130 --> 00:32:14,720
code i have we have test coverage so we

00:32:12,560 --> 00:32:16,520
can walk through how these tests are you

00:32:14,720 --> 00:32:18,890
know walking through all of these

00:32:16,520 --> 00:32:20,240
network calls and and doing replication

00:32:18,890 --> 00:32:23,150
and so on so we can sit down and look at

00:32:20,240 --> 00:32:25,760
that and we need help to build this so

00:32:23,150 --> 00:32:28,460
please step up and and you know start

00:32:25,760 --> 00:32:32,750
contributing if you're interested in in

00:32:28,460 --> 00:32:34,250
a solution for Drupal 8 so so that's

00:32:32,750 --> 00:32:36,530
we're going to do it on friday i'm going

00:32:34,250 --> 00:32:39,470
to be here also on friday saturday and

00:32:36,530 --> 00:32:41,270
sunday for the extended code sprint so

00:32:39,470 --> 00:32:43,760
anytime reach out to me and we can have

00:32:41,270 --> 00:32:46,820
a look so i'm going to jump straight to

00:32:43,760 --> 00:32:50,240
some some conclusion here as we as we

00:32:46,820 --> 00:32:52,040
can see the stack that i presented here

00:32:50,240 --> 00:32:55,520
is not a straight port of the Drupal 7

00:32:52,040 --> 00:32:59,270
modules we've taken a lot of concepts

00:32:55,520 --> 00:33:02,600
and we improved on them and made them

00:32:59,270 --> 00:33:05,480
fit better for for how Drupal 8 is doing

00:33:02,600 --> 00:33:07,280
things and we're going to provide here a

00:33:05,480 --> 00:33:10,190
very loosely coupled system that will

00:33:07,280 --> 00:33:12,260
cover more use cases we can do the

00:33:10,190 --> 00:33:15,490
simple workflow we can do merge workflow

00:33:12,260 --> 00:33:18,950
we can replicate content in a ring etc

00:33:15,490 --> 00:33:20,840
and the system will also lend itself to

00:33:18,950 --> 00:33:23,420
some unexpected use cases I think when

00:33:20,840 --> 00:33:26,990
we re using API specifications and so on

00:33:23,420 --> 00:33:29,030
and more importantly we implementing as

00:33:26,990 --> 00:33:30,920
I just said battle-tested protocols here

00:33:29,030 --> 00:33:33,650
we know that these things work while

00:33:30,920 --> 00:33:35,900
reinvent them ourselves drupal 8 have

00:33:33,650 --> 00:33:37,820
sort of gone with that with that concept

00:33:35,900 --> 00:33:40,970
all the way from reusing symphony and so

00:33:37,820 --> 00:33:45,980
on so why we reinvent the api

00:33:40,970 --> 00:33:47,570
specification and that's it really i

00:33:45,980 --> 00:33:50,210
don't have much more to present here

00:33:47,570 --> 00:33:52,100
today this is the stack so i'm very

00:33:50,210 --> 00:33:53,180
excited to present this to you guys and

00:33:52,100 --> 00:33:54,980
reach out to me if you have any

00:33:53,180 --> 00:33:57,620
questions or anything we do have quite a

00:33:54,980 --> 00:33:59,840
bit of time for questions so please step

00:33:57,620 --> 00:34:01,250
up to to the middle here and hopefully

00:33:59,840 --> 00:34:05,530
you can have a good discussions around

00:34:01,250 --> 00:34:05,530
some of these things here thank you

00:34:09,909 --> 00:34:14,270
first question yeah I just wanted to say

00:34:12,379 --> 00:34:16,520
first that I thought this talk would be

00:34:14,270 --> 00:34:19,429
might be interesting but this artist was

00:34:16,520 --> 00:34:23,679
blown away this is really really really

00:34:19,429 --> 00:34:27,649
interesting great and I think it's

00:34:23,679 --> 00:34:31,250
really promising in terms of moving this

00:34:27,649 --> 00:34:33,379
stack into enterprise publishing these

00:34:31,250 --> 00:34:37,789
really interesting implications from

00:34:33,379 --> 00:34:41,389
what it is and the get hash versioning

00:34:37,789 --> 00:34:44,030
of revisions is a very interesting

00:34:41,389 --> 00:34:46,399
solution I one of the areas that I'm

00:34:44,030 --> 00:34:48,319
that I've been trying to think through

00:34:46,399 --> 00:34:49,789
it's kind of like on top of the stack

00:34:48,319 --> 00:34:54,879
that you're talking about but it has to

00:34:49,789 --> 00:34:58,730
do with um with as your as you're moving

00:34:54,879 --> 00:35:01,640
content around between different site

00:34:58,730 --> 00:35:07,339
instances then one of the problems

00:35:01,640 --> 00:35:09,859
becomes representing really what the

00:35:07,339 --> 00:35:12,289
differences are between the different

00:35:09,859 --> 00:35:14,150
versions of the site so we've got you've

00:35:12,289 --> 00:35:15,680
got we've got content out on a staging

00:35:14,150 --> 00:35:19,789
site and it's going through a pipeline

00:35:15,680 --> 00:35:22,910
getting to production and you know we've

00:35:19,789 --> 00:35:25,760
got to go and kind of visually or

00:35:22,910 --> 00:35:28,250
manually go through to like look at

00:35:25,760 --> 00:35:30,770
what's out on showcase to say is the

00:35:28,250 --> 00:35:32,599
change that we really want what's going

00:35:30,770 --> 00:35:35,569
out there and then when we go live did

00:35:32,599 --> 00:35:39,500
that actually be so all that all that

00:35:35,569 --> 00:35:44,150
base work that goes around nailing down

00:35:39,500 --> 00:35:46,579
some way to handle revisions is its I

00:35:44,150 --> 00:35:47,839
think it's well for us it's again it's a

00:35:46,579 --> 00:35:49,190
really big deal right now trying to

00:35:47,839 --> 00:35:51,440
think through how how you would make

00:35:49,190 --> 00:35:55,309
that work and on Drupal 7 where it

00:35:51,440 --> 00:35:58,010
stands and so having like a kind of a

00:35:55,309 --> 00:36:00,609
solid ground to stand on and what you're

00:35:58,010 --> 00:36:04,849
proposing and that would allow us to

00:36:00,609 --> 00:36:07,490
build solutions that will just simply

00:36:04,849 --> 00:36:09,500
resolve that so editors can just look at

00:36:07,490 --> 00:36:10,789
this stuff across and verify that it's

00:36:09,500 --> 00:36:11,900
all about it's awesome stuff that's

00:36:10,789 --> 00:36:15,109
really great i'm really looking forward

00:36:11,900 --> 00:36:17,750
to it yeah thanks thanks thanks a lot um

00:36:15,109 --> 00:36:18,910
my question is largely around them we do

00:36:17,750 --> 00:36:23,810
a lot of

00:36:18,910 --> 00:36:26,990
hey call we do decent bit of licensing

00:36:23,810 --> 00:36:28,700
of our content to providers who you know

00:36:26,990 --> 00:36:31,490
how we haven't you heard the word Drupal

00:36:28,700 --> 00:36:33,589
in their life have you thought any about

00:36:31,490 --> 00:36:35,420
or had any instances of dealing with you

00:36:33,589 --> 00:36:37,070
know metadata changes like we've changed

00:36:35,420 --> 00:36:39,280
this this might work this way anything

00:36:37,070 --> 00:36:42,140
like that it would make it just less

00:36:39,280 --> 00:36:44,540
Drupal dependent not that I don't want

00:36:42,140 --> 00:36:46,460
to build everything in Drupal metadata

00:36:44,540 --> 00:36:50,390
around the specific content you mean or

00:36:46,460 --> 00:36:52,040
yeah yeah so I mean obviously you could

00:36:50,390 --> 00:36:53,990
provide a JSON feed and say peerless

00:36:52,040 --> 00:36:57,950
good luck do whatever you want with it

00:36:53,990 --> 00:36:59,540
yeah so I mean there are different a

00:36:57,950 --> 00:37:02,240
couple of different ways you can do that

00:36:59,540 --> 00:37:04,790
you can of course attach metadata around

00:37:02,240 --> 00:37:06,770
the content pieces themselves you

00:37:04,790 --> 00:37:08,839
provide additional fields on your

00:37:06,770 --> 00:37:11,030
entities and so on then but then

00:37:08,839 --> 00:37:13,480
interpolate is also going to be very

00:37:11,030 --> 00:37:16,220
easy to just provide your own custom

00:37:13,480 --> 00:37:19,070
rest interface or your custom rest

00:37:16,220 --> 00:37:21,619
endpoint where where you provide a JSON

00:37:19,070 --> 00:37:24,050
feed or or an RSS feed or whatever you

00:37:21,619 --> 00:37:27,530
want to deal with your metadata changes

00:37:24,050 --> 00:37:29,930
to say licensing check in here yeah in

00:37:27,530 --> 00:37:32,089
between yeah so licensing change for

00:37:29,930 --> 00:37:33,500
this piece of content go here and then

00:37:32,089 --> 00:37:36,619
you give the rest endpoint for the

00:37:33,500 --> 00:37:38,240
content editor changed and you can do

00:37:36,619 --> 00:37:40,760
that so that would be sort of a very

00:37:38,240 --> 00:37:42,140
custom extension on top of the core rest

00:37:40,760 --> 00:37:44,359
module where you provide your own

00:37:42,140 --> 00:37:46,400
endpoint or your own API if you may

00:37:44,359 --> 00:37:48,349
write to deal with those things and then

00:37:46,400 --> 00:37:52,099
and then that feed I guess could point

00:37:48,349 --> 00:37:55,040
you in to the API endpoints provided by

00:37:52,099 --> 00:38:02,030
this framework maybe okay yeah oh thanks

00:37:55,040 --> 00:38:03,619
thank you hi I was wondering in terms of

00:38:02,030 --> 00:38:05,359
communication between the different

00:38:03,619 --> 00:38:08,359
servers and everything in a scenario

00:38:05,359 --> 00:38:11,510
where the network blips something blips

00:38:08,359 --> 00:38:15,520
and halfway through your process things

00:38:11,510 --> 00:38:18,410
fall apart what thought has gone into

00:38:15,520 --> 00:38:21,530
wrapping these communications into a

00:38:18,410 --> 00:38:23,420
transaction type thought or being able

00:38:21,530 --> 00:38:26,060
to roll back or even if you deploy

00:38:23,420 --> 00:38:27,800
something and then decide whoops wasn't

00:38:26,060 --> 00:38:30,440
ready kind of rolling back from that

00:38:27,800 --> 00:38:31,530
standpoint replaying sequences in

00:38:30,440 --> 00:38:33,540
reverse order stuff

00:38:31,530 --> 00:38:35,580
like that yeah very interesting that

00:38:33,540 --> 00:38:38,070
you're asking and and I I didn't cover

00:38:35,580 --> 00:38:39,470
the details around that because there

00:38:38,070 --> 00:38:44,820
are still some details to figure out but

00:38:39,470 --> 00:38:48,120
basically and if if you do a bulk

00:38:44,820 --> 00:38:51,480
document input where you push in 20

00:38:48,120 --> 00:38:54,840
documents at once you maybe maybe the

00:38:51,480 --> 00:38:58,140
network drops then that didn't happen at

00:38:54,840 --> 00:38:59,520
all or if it drops halfway through then

00:38:58,140 --> 00:39:01,620
you're never going to come to the point

00:38:59,520 --> 00:39:03,780
where we save the sequence number

00:39:01,620 --> 00:39:07,110
because the sequence number is saved at

00:39:03,780 --> 00:39:10,320
the very end and and the way that the

00:39:07,110 --> 00:39:12,450
storage controller works here is that

00:39:10,320 --> 00:39:14,730
we're only allowing the storage

00:39:12,450 --> 00:39:18,060
controller to lift or query entities

00:39:14,730 --> 00:39:21,780
that has a sequence ID so even you can

00:39:18,060 --> 00:39:23,220
even save revisions but if you never

00:39:21,780 --> 00:39:26,010
come to the point where we save the

00:39:23,220 --> 00:39:29,400
sequence number then the storage

00:39:26,010 --> 00:39:32,040
controller will never query them and the

00:39:29,400 --> 00:39:34,500
entity query API or the entity field

00:39:32,040 --> 00:39:36,780
query API will not either query them

00:39:34,500 --> 00:39:39,450
because we would do some extensions to

00:39:36,780 --> 00:39:42,990
how the entity query API is working so

00:39:39,450 --> 00:39:44,790
if there are no sequence number then the

00:39:42,990 --> 00:39:48,000
relations will never be picked up so

00:39:44,790 --> 00:39:52,920
that's sort of one way of dealing with

00:39:48,000 --> 00:39:55,230
that scenario so that's yeah we will be

00:39:52,920 --> 00:39:57,000
able to quite nicely handle those sort

00:39:55,230 --> 00:39:58,970
of when when the network drops or if

00:39:57,000 --> 00:40:01,770
something else breaks along the way

00:39:58,970 --> 00:40:05,910
that's awesome I also just want to say i

00:40:01,770 --> 00:40:07,800
use the Drupal 7 stack today and I

00:40:05,910 --> 00:40:10,200
didn't know that any of this was being

00:40:07,800 --> 00:40:11,940
worked on and so I just want to say

00:40:10,200 --> 00:40:16,470
thank you and this is great you're

00:40:11,940 --> 00:40:17,610
welcome thank you my use case I was

00:40:16,470 --> 00:40:19,890
interested in this talk because my

00:40:17,610 --> 00:40:22,830
excuse cases we have a you know

00:40:19,890 --> 00:40:25,050
developer a public site and we're

00:40:22,830 --> 00:40:28,470
developing some new components for that

00:40:25,050 --> 00:40:30,090
plug site between a team so you know

00:40:28,470 --> 00:40:31,710
this guy is working on a bunch of blocks

00:40:30,090 --> 00:40:33,210
and theming that block and do all sorts

00:40:31,710 --> 00:40:36,480
of stuff and I'm working on another one

00:40:33,210 --> 00:40:38,640
someone's doing a view you know Drupal 8

00:40:36,480 --> 00:40:42,630
has the new configuration exports which

00:40:38,640 --> 00:40:44,869
is awesome but our only thing less was

00:40:42,630 --> 00:40:46,789
content does this work in the same

00:40:44,869 --> 00:40:48,650
a where you can move blocks and things

00:40:46,789 --> 00:40:50,029
like that around where you can just push

00:40:48,650 --> 00:40:53,630
everything at once and merge everything

00:40:50,029 --> 00:40:56,690
together does that make sense yeah so

00:40:53,630 --> 00:40:58,940
yes with it will definitely we will

00:40:56,690 --> 00:41:01,700
definitely be able to support a wide

00:40:58,940 --> 00:41:05,150
variety of use cases and what's very

00:41:01,700 --> 00:41:06,920
nice in Drupal 8 is that that we didn't

00:41:05,150 --> 00:41:09,680
have in Drupal 7 is that we have a very

00:41:06,920 --> 00:41:11,779
distinct line between what's content and

00:41:09,680 --> 00:41:14,569
what's configuration because we have we

00:41:11,779 --> 00:41:16,880
have two base classes or two base types

00:41:14,569 --> 00:41:19,369
of entities we have config entities with

00:41:16,880 --> 00:41:21,829
content entities so there's a very fine

00:41:19,369 --> 00:41:23,509
line this stack will deal with

00:41:21,829 --> 00:41:26,089
everything there are content entities

00:41:23,509 --> 00:41:28,670
there is one entity in core that is

00:41:26,089 --> 00:41:31,970
neither at the moment and that's menu

00:41:28,670 --> 00:41:35,509
links that's neither a config entity or

00:41:31,970 --> 00:41:40,160
a a Content entity work is being done to

00:41:35,509 --> 00:41:42,710
to deal with that scenario and there's

00:41:40,160 --> 00:41:45,529
also so that work is being done in corte

00:41:42,710 --> 00:41:47,990
to solve that I plan to work on some of

00:41:45,529 --> 00:41:51,079
the things on on Friday it's going to be

00:41:47,990 --> 00:41:54,230
crucial there's also another another

00:41:51,079 --> 00:41:57,109
situation around blocks we're going to

00:41:54,230 --> 00:41:58,369
also deal with at this this weekend we

00:41:57,109 --> 00:42:00,680
actually have a meeting scheduled for

00:41:58,369 --> 00:42:02,809
this and that's dealing with config

00:42:00,680 --> 00:42:04,339
dependencies because we have some

00:42:02,809 --> 00:42:08,509
interesting scenarios in court at the

00:42:04,339 --> 00:42:11,720
moment where config depend on content

00:42:08,509 --> 00:42:14,329
and content depend on config which is

00:42:11,720 --> 00:42:16,489
which is a bit messy have blocks being

00:42:14,329 --> 00:42:18,769
the best the best example here the

00:42:16,489 --> 00:42:21,019
placement of a block that's

00:42:18,769 --> 00:42:23,720
configuration but the block itself is

00:42:21,019 --> 00:42:25,730
quite content it's like how do you deal

00:42:23,720 --> 00:42:28,160
with these dependencies and and so on so

00:42:25,730 --> 00:42:30,559
there are still a few you know Kingston

00:42:28,160 --> 00:42:32,839
we need to sort out in in that respect

00:42:30,559 --> 00:42:35,119
but it'll take us a lot further than

00:42:32,839 --> 00:42:39,140
then in Drupal 7 state awesome thank you

00:42:35,119 --> 00:42:42,079
I want to preface this by saying that we

00:42:39,140 --> 00:42:43,759
are shameful you still on d6 and I'm not

00:42:42,079 --> 00:42:45,349
familiar with the uuid module before

00:42:43,759 --> 00:42:48,440
today so I don't know if this solves any

00:42:45,349 --> 00:42:49,970
of that but we rely on production being

00:42:48,440 --> 00:42:53,359
our source for all of our noo tidies

00:42:49,970 --> 00:42:55,249
meaning we have to have production be

00:42:53,359 --> 00:42:56,900
the incrementing state for our noo

00:42:55,249 --> 00:43:00,440
tidies they can't come from anywhere

00:42:56,900 --> 00:43:02,360
but we don't want users to necessarily

00:43:00,440 --> 00:43:03,860
develop content on production would

00:43:02,360 --> 00:43:05,420
rather have them somewhere else but

00:43:03,860 --> 00:43:08,300
because of that requirement because the

00:43:05,420 --> 00:43:09,830
way we do translation our node ID our

00:43:08,300 --> 00:43:11,750
revision ID and then we actually

00:43:09,830 --> 00:43:14,450
implemented another feature to track the

00:43:11,750 --> 00:43:16,610
translations source version ID because

00:43:14,450 --> 00:43:18,950
that was important the way we do this so

00:43:16,610 --> 00:43:22,780
my question is is there any way that you

00:43:18,950 --> 00:43:26,990
can recommend to have some kind of

00:43:22,780 --> 00:43:30,590
globally unique node ID generator that

00:43:26,990 --> 00:43:33,130
can be used across dev test staging

00:43:30,590 --> 00:43:36,080
production so that I don't have to

00:43:33,130 --> 00:43:37,730
develop everything in production so

00:43:36,080 --> 00:43:41,960
that's that's exactly what the UID

00:43:37,730 --> 00:43:45,430
module is doing ok for you said you were

00:43:41,960 --> 00:43:48,470
using Drupal 6 yes I think there are

00:43:45,430 --> 00:43:53,770
deploy module for Drupal 6 implements

00:43:48,470 --> 00:43:57,230
its own uuid functionality and there is

00:43:53,770 --> 00:44:00,020
there is a Drupal 6 version of you ID

00:43:57,230 --> 00:44:03,860
module dave is the Drupal 6 version of

00:44:00,020 --> 00:44:07,010
your ID module yeah so the yeah there is

00:44:03,860 --> 00:44:09,080
a version I actually don't I maintain

00:44:07,010 --> 00:44:11,990
the UID module but I've never looked at

00:44:09,080 --> 00:44:13,960
the Drupal 6 version actually because

00:44:11,990 --> 00:44:16,700
Drupal 7 version was a complete rewrite

00:44:13,960 --> 00:44:18,770
so have a look at that ok you know maybe

00:44:16,700 --> 00:44:21,710
that will help take you at least a few

00:44:18,770 --> 00:44:22,940
steps on the way so so that's that's

00:44:21,710 --> 00:44:26,150
essentially what that module is for

00:44:22,940 --> 00:44:28,250
providing universally unique IDs and and

00:44:26,150 --> 00:44:32,630
ways to deal with notes and entities

00:44:28,250 --> 00:44:35,120
around that ok thank you welcome many

00:44:32,630 --> 00:44:37,790
questions that's great my question

00:44:35,120 --> 00:44:39,320
actually is you've talked about kind of

00:44:37,790 --> 00:44:41,690
the big picture multi server

00:44:39,320 --> 00:44:44,900
environments things like that is there

00:44:41,690 --> 00:44:50,390
any discussion or talk about this

00:44:44,900 --> 00:44:52,820
working on a smaller use case of the

00:44:50,390 --> 00:44:54,350
concurrent editing problem ok you get

00:44:52,820 --> 00:44:56,090
into an ode to people at it at the same

00:44:54,350 --> 00:44:58,010
time you get a system process that edits

00:44:56,090 --> 00:44:59,810
at the same time as a user and you get

00:44:58,010 --> 00:45:02,720
that dreaded message of its been edited

00:44:59,810 --> 00:45:04,520
you can't do this is there any kind of

00:45:02,720 --> 00:45:06,680
work I mean this looks like it could be

00:45:04,520 --> 00:45:08,690
something that would solve that problem

00:45:06,680 --> 00:45:10,700
by being able to you know in the

00:45:08,690 --> 00:45:13,700
background resolve those con

00:45:10,700 --> 00:45:16,730
clicks and just make it work yeah unless

00:45:13,700 --> 00:45:19,099
there's a on resolvable conflict yeah

00:45:16,730 --> 00:45:20,510
it's a very good use case I haven't I

00:45:19,099 --> 00:45:23,599
haven't thought much about that

00:45:20,510 --> 00:45:25,430
particular instance but it's it would

00:45:23,599 --> 00:45:28,730
definitely be possible because we do

00:45:25,430 --> 00:45:32,510
have we control the entity storage with

00:45:28,730 --> 00:45:34,250
the solution right and we have we have a

00:45:32,510 --> 00:45:37,010
revision tree that looks very much like

00:45:34,250 --> 00:45:41,420
it so you will be able to save two

00:45:37,010 --> 00:45:44,359
revisions the revisions are hashed so so

00:45:41,420 --> 00:45:47,060
you can see you know if you do if you do

00:45:44,359 --> 00:45:48,320
the same edit if you say to two

00:45:47,060 --> 00:45:49,849
different people and we need to change

00:45:48,320 --> 00:45:50,900
the title of this article they're going

00:45:49,849 --> 00:45:53,450
to change this set to the same thing

00:45:50,900 --> 00:45:57,740
then the hatch will be the same so we're

00:45:53,450 --> 00:46:00,410
no conflict and but then we also track

00:45:57,740 --> 00:46:02,480
all the revisions so we would be able to

00:46:00,410 --> 00:46:04,270
sort of say okay there was conflict here

00:46:02,480 --> 00:46:09,170
and then we can bring up both relations

00:46:04,270 --> 00:46:11,119
and sort of deal with that it's good use

00:46:09,170 --> 00:46:14,020
case we definitely make sense to

00:46:11,119 --> 00:46:14,020
incorporate that I think

00:46:24,870 --> 00:46:30,280
so just to repeat the question will

00:46:27,310 --> 00:46:32,580
there be you I to to to compare and and

00:46:30,280 --> 00:46:36,190
and look at these different revisions

00:46:32,580 --> 00:46:37,390
yes someone has to write it I would

00:46:36,190 --> 00:46:40,300
probably write it if someone else

00:46:37,390 --> 00:46:43,600
doesn't and it most likely will be

00:46:40,300 --> 00:46:45,340
written in the deploy model itself maybe

00:46:43,600 --> 00:46:49,750
we're going to take that out to sort of

00:46:45,340 --> 00:46:51,400
maybe more generic revision diff module

00:46:49,750 --> 00:46:54,510
maybe that makes sense I haven't got

00:46:51,400 --> 00:46:57,640
that far in the in the process yet but

00:46:54,510 --> 00:46:59,380
yes we definitely need a UI for for

00:46:57,640 --> 00:47:01,270
these sorts of things to really leverage

00:46:59,380 --> 00:47:02,680
all the sort of drown work that we're

00:47:01,270 --> 00:47:04,390
doing here to track relations and so on

00:47:02,680 --> 00:47:10,030
so the goal is to provide a UI

00:47:04,390 --> 00:47:11,770
definitely yes more questions hi first

00:47:10,030 --> 00:47:14,260
of all this looks really really awesome

00:47:11,770 --> 00:47:17,140
very good stuff I remember looking at

00:47:14,260 --> 00:47:21,340
something very much like this on Drupal

00:47:17,140 --> 00:47:22,870
7 3 or 4 years ago and and not having a

00:47:21,340 --> 00:47:24,700
good answer when someone asked me how do

00:47:22,870 --> 00:47:26,620
you do this and this looks like the

00:47:24,700 --> 00:47:28,390
answer so it's good to finally have

00:47:26,620 --> 00:47:33,820
something that does this in Drupal great

00:47:28,390 --> 00:47:35,380
thanks um my question was about how to

00:47:33,820 --> 00:47:37,870
handle kind of some of the slightly more

00:47:35,380 --> 00:47:39,700
unusual fields that you might get on an

00:47:37,870 --> 00:47:42,300
entity on an entity so you might have

00:47:39,700 --> 00:47:44,610
large binary files for instance

00:47:42,300 --> 00:47:48,220
replicating those out across multiple

00:47:44,610 --> 00:47:49,750
sites and keeping a full version history

00:47:48,220 --> 00:47:52,660
for those sounds like it could be

00:47:49,750 --> 00:47:54,010
expensive or it could be slow is the is

00:47:52,660 --> 00:47:56,110
there a kind of way of maybe doing a

00:47:54,010 --> 00:47:58,090
special case I know and get for instance

00:47:56,110 --> 00:48:00,910
as things like get an X which you can

00:47:58,090 --> 00:48:03,610
use for kind of storing binary files off

00:48:00,910 --> 00:48:05,410
on s3 or some kind of other storage so

00:48:03,610 --> 00:48:07,330
that you don't actually have to keep a

00:48:05,410 --> 00:48:09,300
full history of that binary file in the

00:48:07,330 --> 00:48:11,500
repository do you think there's a

00:48:09,300 --> 00:48:16,270
potential use for something like that in

00:48:11,500 --> 00:48:19,990
this kind of system so the the file

00:48:16,270 --> 00:48:22,180
entities in core and we first of all we

00:48:19,990 --> 00:48:25,540
will have separate endpoints for for

00:48:22,180 --> 00:48:27,520
files and have quite a nice way to deal

00:48:25,540 --> 00:48:29,680
with them we do deal with some

00:48:27,520 --> 00:48:31,630
restrictions around that being the HTTP

00:48:29,680 --> 00:48:35,740
protocol because we're deploying these

00:48:31,630 --> 00:48:38,320
things over HTTP so when you base 64 and

00:48:35,740 --> 00:48:40,660
coda file you know there are size

00:48:38,320 --> 00:48:43,960
limitations to that on how much you can

00:48:40,660 --> 00:48:45,880
transport over HTTP so first of all that

00:48:43,960 --> 00:48:49,570
is some restrictions that we're dealing

00:48:45,880 --> 00:48:51,670
with if you have very large files that

00:48:49,570 --> 00:48:54,400
you want to replicate you're probably

00:48:51,670 --> 00:48:56,740
looking at another solution I think like

00:48:54,400 --> 00:48:58,900
have them centrally on an Amazon s3 or

00:48:56,740 --> 00:49:03,190
something like that and and then and

00:48:58,900 --> 00:49:09,430
then just just deploy the entity itself

00:49:03,190 --> 00:49:11,830
without the basics for encoding but so

00:49:09,430 --> 00:49:13,420
so the revisions of the entities that's

00:49:11,830 --> 00:49:16,690
just the metadata that we're storing

00:49:13,420 --> 00:49:19,960
that that Drupal is touring how Drupal

00:49:16,690 --> 00:49:22,180
is storing files on disk it's not

00:49:19,960 --> 00:49:24,730
something it's transparent to the system

00:49:22,180 --> 00:49:26,650
and I think when you save in new

00:49:24,730 --> 00:49:29,760
revisions of a new revision of the file

00:49:26,650 --> 00:49:32,770
it saves a completely new file on disk

00:49:29,760 --> 00:49:36,580
so we're not doing anything specific to

00:49:32,770 --> 00:49:38,980
deal with the actual file on disk that's

00:49:36,580 --> 00:49:41,560
done dealt with like in the normal way

00:49:38,980 --> 00:49:43,330
through the Drupal API okay but if you

00:49:41,560 --> 00:49:45,790
have large files you're probably looking

00:49:43,330 --> 00:49:50,080
at a different solution anyhow amazon s3

00:49:45,790 --> 00:49:52,660
or something like that thanks more

00:49:50,080 --> 00:49:54,520
questions great we have a little bit

00:49:52,660 --> 00:49:57,070
more time of thing so go on I think this

00:49:54,520 --> 00:50:00,130
will probably be a short one but so

00:49:57,070 --> 00:50:03,670
there's the end point for a bulk pushing

00:50:00,130 --> 00:50:06,760
of the entities themselves but before

00:50:03,670 --> 00:50:09,369
that you have to pull in the sequence

00:50:06,760 --> 00:50:11,980
numbers on your target site is there a

00:50:09,369 --> 00:50:13,869
bulk way to do that or are you doing a

00:50:11,980 --> 00:50:16,380
whole bunch of network calls to pull

00:50:13,869 --> 00:50:18,970
that in know so so the the change

00:50:16,380 --> 00:50:22,510
endpoint or the sequence number endpoint

00:50:18,970 --> 00:50:24,550
we list everything since your last

00:50:22,510 --> 00:50:28,750
change so there will be a long list of

00:50:24,550 --> 00:50:30,730
sequin numbers so that's sort of dealt

00:50:28,750 --> 00:50:33,609
with in bulk as well for multiple

00:50:30,730 --> 00:50:35,890
entities for all entities yes so that's

00:50:33,609 --> 00:50:40,990
for all entity types it's great awesome

00:50:35,890 --> 00:50:43,600
yeah this looks really automated which

00:50:40,990 --> 00:50:46,000
is cool but what is the conflict

00:50:43,600 --> 00:50:47,920
resolution strategy let's say when the

00:50:46,000 --> 00:50:48,430
human human being has to be in wolf when

00:50:47,920 --> 00:50:50,620
there is a car

00:50:48,430 --> 00:50:55,600
wait between different revisions or

00:50:50,620 --> 00:50:59,080
stays of the contents so Adam at the

00:50:55,600 --> 00:51:02,080
moment the winning the winning conflict

00:50:59,080 --> 00:51:04,240
will will be we're using the same

00:51:02,080 --> 00:51:06,820
concept as couchdb is doing here and

00:51:04,240 --> 00:51:10,000
there will always be we'll always store

00:51:06,820 --> 00:51:13,350
both religions but the winning one will

00:51:10,000 --> 00:51:17,470
simply be the one that has the highest

00:51:13,350 --> 00:51:18,930
hexadecimal hash value because and why

00:51:17,470 --> 00:51:22,180
are we doing that it's just that we can

00:51:18,930 --> 00:51:24,430
consistently take decisions on multiple

00:51:22,180 --> 00:51:26,710
servers we can take a consistent

00:51:24,430 --> 00:51:29,680
decision without doing more network

00:51:26,710 --> 00:51:32,380
network also each server in the network

00:51:29,680 --> 00:51:34,630
can take their own decision and it will

00:51:32,380 --> 00:51:37,470
be consistent across all servers if the

00:51:34,630 --> 00:51:39,700
if the conflict is replicated in other

00:51:37,470 --> 00:51:41,620
editorial environments and so on so that

00:51:39,700 --> 00:51:43,180
will be the winning revision but then

00:51:41,620 --> 00:51:46,120
we'll store the fact that there was a

00:51:43,180 --> 00:51:48,280
conflict here and then then we will be

00:51:46,120 --> 00:51:49,960
able to provide a user interface where

00:51:48,280 --> 00:51:52,210
you can say this revision was

00:51:49,960 --> 00:51:55,330
conflicting with this and and then it's

00:51:52,210 --> 00:51:58,690
up to you really how to merge them maybe

00:51:55,330 --> 00:52:01,200
you you just pick one of them doing the

00:51:58,690 --> 00:52:04,810
actual merging will be very challenging

00:52:01,200 --> 00:52:06,730
to implement it is possible because we

00:52:04,810 --> 00:52:09,450
do have a nice serialization API so we

00:52:06,730 --> 00:52:11,800
can do a JSON merge of the Jason

00:52:09,450 --> 00:52:14,800
serialized entities and then we can

00:52:11,800 --> 00:52:16,690
potentially sort of reesei that that

00:52:14,800 --> 00:52:18,430
will be very challenging so most likely

00:52:16,690 --> 00:52:20,080
will be sort of a user interface where

00:52:18,430 --> 00:52:22,030
you can just pick the revisions but

00:52:20,080 --> 00:52:24,400
there always has to be winning revision

00:52:22,030 --> 00:52:26,410
for the quadruple to be able to continue

00:52:24,400 --> 00:52:28,780
to operate so that would be just the

00:52:26,410 --> 00:52:30,400
highest hexadecimal value of the hash so

00:52:28,780 --> 00:52:33,760
that it's consistent across all servers

00:52:30,400 --> 00:52:36,460
on my second question how do you deal

00:52:33,760 --> 00:52:38,050
with content dependences in terms of

00:52:36,460 --> 00:52:39,790
pushing stuff so let's say you push a

00:52:38,050 --> 00:52:43,300
note or an entity and then there are

00:52:39,790 --> 00:52:45,130
further dependences like this page a tax

00:52:43,300 --> 00:52:47,890
file attachment something else is

00:52:45,130 --> 00:52:50,140
everything be packaged or I you kind of

00:52:47,890 --> 00:52:51,640
starting the transaction and then figure

00:52:50,140 --> 00:52:54,220
out there are more dependent system you

00:52:51,640 --> 00:52:57,610
start initiating more transactions so if

00:52:54,220 --> 00:52:59,620
you do a partial deployment where I just

00:52:57,610 --> 00:53:01,960
want to deploy one node then we need to

00:52:59,620 --> 00:53:03,700
detect all the dependencies

00:53:01,960 --> 00:53:07,660
so that we have to sort of recursively

00:53:03,700 --> 00:53:09,130
go through so we need to before we do

00:53:07,660 --> 00:53:10,810
the push we need to figure out all the

00:53:09,130 --> 00:53:13,630
dependencies so we're not figuring

00:53:10,810 --> 00:53:15,310
anything out as we go on during the

00:53:13,630 --> 00:53:17,380
network also we need to figure out all

00:53:15,310 --> 00:53:19,300
the dependencies but we don't need to

00:53:17,380 --> 00:53:21,790
deal with the ordering just that's all

00:53:19,300 --> 00:53:23,859
in the sequence index so then we say we

00:53:21,790 --> 00:53:26,050
have all of these dependencies now then

00:53:23,859 --> 00:53:27,790
just in just look in the sequence index

00:53:26,050 --> 00:53:29,619
in what order they were created or

00:53:27,790 --> 00:53:33,359
updated there will be the order that

00:53:29,619 --> 00:53:37,180
will also work on the on the target site

00:53:33,359 --> 00:53:38,650
thank you so yeah so that's that's why

00:53:37,180 --> 00:53:40,750
the sequence index is very very

00:53:38,650 --> 00:53:42,640
important here we don't need to do fancy

00:53:40,750 --> 00:53:44,800
graphing of all the dependencies to

00:53:42,640 --> 00:53:45,940
recursively figure out in what order to

00:53:44,800 --> 00:53:50,650
deal with things because that was a big

00:53:45,940 --> 00:53:53,619
hassle in in in Drupal 7 yep next

00:53:50,650 --> 00:53:55,630
question hi I know there are a couple of

00:53:53,619 --> 00:53:57,250
drupal shops sitter as they say chasing

00:53:55,630 --> 00:53:59,589
head on Drupal 8 and they already have

00:53:57,250 --> 00:54:01,810
production sites running one of the

00:53:59,589 --> 00:54:04,869
arguments against doing that is that the

00:54:01,810 --> 00:54:08,050
upgrade path is totally unclear between

00:54:04,869 --> 00:54:09,640
alphas or betas but this presents an

00:54:08,050 --> 00:54:11,109
entering interesting opportunity I'm

00:54:09,640 --> 00:54:13,560
thinking about doing a small production

00:54:11,109 --> 00:54:17,109
site in Drupal 8 and I'm wondering about

00:54:13,560 --> 00:54:19,810
the possibility of you know using this

00:54:17,109 --> 00:54:23,380
as a way of like moving content from a

00:54:19,810 --> 00:54:25,480
current alpha to a new alpha or beta you

00:54:23,380 --> 00:54:28,270
Jesus with the idea of a demo today but

00:54:25,480 --> 00:54:30,250
how close is it you know is it to being

00:54:28,270 --> 00:54:32,980
able to do that and is that an approach

00:54:30,250 --> 00:54:34,690
that you think might be viable it's

00:54:32,980 --> 00:54:38,830
definitely an approach that would be

00:54:34,690 --> 00:54:43,300
interesting to explore it will be

00:54:38,830 --> 00:54:45,910
difficult for you when when the entities

00:54:43,300 --> 00:54:47,470
themselves are changing of course when

00:54:45,910 --> 00:54:49,030
the format of the entity stem cells are

00:54:47,470 --> 00:54:51,880
changing I know that people are using

00:54:49,030 --> 00:54:54,730
the d7 version of deploy to do actual

00:54:51,880 --> 00:54:56,410
upgrades I've had people reach out to me

00:54:54,730 --> 00:54:57,550
with questions around that so it's

00:54:56,410 --> 00:54:59,770
definitely something that is worth

00:54:57,550 --> 00:55:02,589
exploring I think it would probably do a

00:54:59,770 --> 00:55:05,770
very good job at it if the change is

00:55:02,589 --> 00:55:09,760
between head and Drupal 8 head and

00:55:05,770 --> 00:55:12,130
Drupal 8 head later on are not too

00:55:09,760 --> 00:55:15,220
significant and so it's definitely

00:55:12,130 --> 00:55:15,910
something that's worth testing and big

00:55:15,220 --> 00:55:18,190
part

00:55:15,910 --> 00:55:20,140
have more most of the end points I

00:55:18,190 --> 00:55:21,609
shouldn't say mode but maybe half of the

00:55:20,140 --> 00:55:24,880
end points are already implemented and

00:55:21,609 --> 00:55:26,500
working in the Drupal 8 version so the

00:55:24,880 --> 00:55:31,780
replication protocol is not tied

00:55:26,500 --> 00:55:33,910
together yet though but yeah I can't say

00:55:31,780 --> 00:55:36,819
you know give you a timeline maybe when

00:55:33,910 --> 00:55:38,650
it will be done but it won't be too long

00:55:36,819 --> 00:55:41,920
the goal is definitely to have it done

00:55:38,650 --> 00:55:46,740
before we go into RC release candidates

00:55:41,920 --> 00:55:49,180
in Drupal 8 yeah great thank you welcome

00:55:46,740 --> 00:55:51,579
okay we're slowly running out of time

00:55:49,180 --> 00:55:52,930
and many great questions and thank you

00:55:51,579 --> 00:55:54,400
all for coming and reach out to me if

00:55:52,930 --> 00:55:57,630
you have any questions on Twitter or

00:55:54,400 --> 00:55:57,630

YouTube URL: https://www.youtube.com/watch?v=yGNr6sYevew


