Title: DrupalCon Austin 2014: DEPENDENCY INJECTION
Publication date: 2014-06-03
Playlist: DrupalCon Austin - June 2014
Description: 
	Speakers: fabpot
Drupal 8 is about some fundamental changes in the way the platform is built: from OOP everywhere to Twig as a templating system. Amongst all these changes, one of them is the usage of the Dependency Injection design pattern. This pattern greatly improves the decoupling and the testability of your code, and it will make Drupal evolutions easier in the future.

During the talk, I'm going to introduce Dependency Injection with real-world examples and then, we are going to learn more about the Symfony Dependency Injection Container which powers Drupal 8.

Don't be afraid, big words do not necessarily mean complexity!
Captions: 
	00:00:00,000 --> 00:00:07,880
so we're going to start so today I want

00:00:04,110 --> 00:00:11,040
to talk about dependency injection it's

00:00:07,880 --> 00:00:14,040
as you will see in a minute this is a

00:00:11,040 --> 00:00:17,039
very simple concept very simple to

00:00:14,040 --> 00:00:20,160
understand but this is probably very

00:00:17,039 --> 00:00:23,689
difficult to apply on your project it is

00:00:20,160 --> 00:00:26,930
very difficult to know when and how to

00:00:23,689 --> 00:00:29,340
actually use dependency injection so

00:00:26,930 --> 00:00:33,899
this session is going to be very

00:00:29,340 --> 00:00:37,500
technical but I'm not going to be to

00:00:33,899 --> 00:00:40,590
dive too deep into the dependency

00:00:37,500 --> 00:00:42,570
injection container of symphony I won't

00:00:40,590 --> 00:00:45,390
take a lot of time just talking about

00:00:42,570 --> 00:00:48,780
dependency injection what it is how you

00:00:45,390 --> 00:00:51,719
can use it why this is a good ID stuff

00:00:48,780 --> 00:00:54,719
like that which means that if you have

00:00:51,719 --> 00:00:57,270
any questions any time please interrupt

00:00:54,719 --> 00:00:59,309
me as a question I want to be sure that

00:00:57,270 --> 00:01:01,170
everyone really understand what

00:00:59,309 --> 00:01:03,809
dependency injection is by the end of

00:01:01,170 --> 00:01:08,060
the session this is a very important

00:01:03,809 --> 00:01:10,350
topic for Drupal 8 because everything is

00:01:08,060 --> 00:01:12,119
using dependency injection is Jupiter

00:01:10,350 --> 00:01:14,909
Drupal 8 not other thing but a lot of

00:01:12,119 --> 00:01:18,000
things really and if you are a developer

00:01:14,909 --> 00:01:21,659
at some point you're going to be using

00:01:18,000 --> 00:01:23,700
some kind of dependency injection so

00:01:21,659 --> 00:01:27,180
dependency injection this is a design

00:01:23,700 --> 00:01:29,579
pattern that is pretty well known this

00:01:27,180 --> 00:01:32,220
is a very simple concept it's kind of

00:01:29,579 --> 00:01:34,740
hard to explain because as we will see

00:01:32,220 --> 00:01:38,310
in a minute this is a stupid thing

00:01:34,740 --> 00:01:40,439
really really simple but you need to

00:01:38,310 --> 00:01:45,899
understand how to use it to really

00:01:40,439 --> 00:01:49,649
understand all the benefits so the first

00:01:45,899 --> 00:01:51,320
thing we need to talk about is we need

00:01:49,649 --> 00:01:54,450
to talk about a simple example that

00:01:51,320 --> 00:02:00,149
everyone can understand so I'm going to

00:01:54,450 --> 00:02:05,360
talk about a web app with a user and in

00:02:00,149 --> 00:02:09,119
many apps you need to manage user

00:02:05,360 --> 00:02:12,209
preferences the credentials using

00:02:09,119 --> 00:02:14,610
I'm long way to the user whatever so we

00:02:12,209 --> 00:02:18,540
start with this very simple class a user

00:02:14,610 --> 00:02:21,319
class of course when I'm talking about

00:02:18,540 --> 00:02:24,420
dependency injection I'm talking about

00:02:21,319 --> 00:02:26,340
rnt programming object-oriented

00:02:24,420 --> 00:02:28,620
programming right so if you are not

00:02:26,340 --> 00:02:31,230
using objects you can't we talk about

00:02:28,620 --> 00:02:35,790
dependency injection so we have this

00:02:31,230 --> 00:02:38,370
user object with a language property and

00:02:35,790 --> 00:02:40,920
we have a set language to be able to set

00:02:38,370 --> 00:02:42,690
the user language we probably also have

00:02:40,920 --> 00:02:44,250
a gather whatever and a bunch of other

00:02:42,690 --> 00:02:45,900
methods but that's not really

00:02:44,250 --> 00:02:49,620
interesting for what we are talking

00:02:45,900 --> 00:02:51,269
about so this is a user class and as

00:02:49,620 --> 00:02:57,900
this is a web app we need a way to

00:02:51,269 --> 00:03:00,870
actually store this information from one

00:02:57,900 --> 00:03:03,599
request to the next one right HTTP being

00:03:00,870 --> 00:03:05,489
stateless we need a way to store this

00:03:03,599 --> 00:03:09,680
information and we can't do that by

00:03:05,489 --> 00:03:12,629
using the PHP session storage right

00:03:09,680 --> 00:03:15,780
first this is how you can use the class

00:03:12,629 --> 00:03:19,500
crazy we create a new user and we set

00:03:15,780 --> 00:03:24,510
the long way to whatever what so this is

00:03:19,500 --> 00:03:27,930
a session storage class pretty easy so

00:03:24,510 --> 00:03:30,959
basically we have a set method it takes

00:03:27,930 --> 00:03:33,660
a key and value and it uses the default

00:03:30,959 --> 00:03:36,900
PHP session mechanism to actually store

00:03:33,660 --> 00:03:38,549
the value into the session right and as

00:03:36,900 --> 00:03:42,030
you can see in the constructor we are

00:03:38,549 --> 00:03:43,980
studying musician and before we are

00:03:42,030 --> 00:03:45,840
setting the session name which is the

00:03:43,980 --> 00:03:47,940
cookie name that you're going to have in

00:03:45,840 --> 00:03:50,970
your browser's right and you can

00:03:47,940 --> 00:03:54,660
configure that cookie name that session

00:03:50,970 --> 00:03:59,540
name via the constructor and there is a

00:03:54,660 --> 00:04:02,790
default value for it right ok so now I

00:03:59,540 --> 00:04:05,940
have two different classes the session

00:04:02,790 --> 00:04:09,239
storage one and a user one and the user

00:04:05,940 --> 00:04:14,430
class needs a session storage to be able

00:04:09,239 --> 00:04:18,150
to civilize to store to save its

00:04:14,430 --> 00:04:20,609
information in the session one way to do

00:04:18,150 --> 00:04:21,859
that is by creating a session storage

00:04:20,609 --> 00:04:26,990
object

00:04:21,859 --> 00:04:28,879
in the user constructor like this so in

00:04:26,990 --> 00:04:32,419
the constructor i'll create the session

00:04:28,879 --> 00:04:35,150
storage and then in the set language i'm

00:04:32,419 --> 00:04:37,400
storing the language in the session

00:04:35,150 --> 00:04:39,909
right language being the key and the

00:04:37,400 --> 00:04:47,270
long edge path to the method the value

00:04:39,909 --> 00:04:51,050
is enough and using that is exactly the

00:04:47,270 --> 00:04:53,960
same as before it's not more complex i

00:04:51,050 --> 00:04:56,449
have two objects but using the user

00:04:53,960 --> 00:04:58,310
class is as easy as before I'm trained

00:04:56,449 --> 00:05:00,889
as user and then i'm setting the

00:04:58,310 --> 00:05:03,500
language i have no idea what's going on

00:05:00,889 --> 00:05:06,680
behind the scene right and i don't care

00:05:03,500 --> 00:05:08,379
actually i want to create a user and i

00:05:06,680 --> 00:05:10,909
want to set to be able to set a language

00:05:08,379 --> 00:05:13,909
everything else is not that important

00:05:10,909 --> 00:05:21,889
from a user perspective from a developer

00:05:13,909 --> 00:05:26,960
perspective ok so it is very easy to use

00:05:21,889 --> 00:05:30,319
I don't need to understand the

00:05:26,960 --> 00:05:34,639
implementation details but it's very odd

00:05:30,319 --> 00:05:36,440
to customize it's very odd to customize

00:05:34,639 --> 00:05:39,680
because everything is art coded error

00:05:36,440 --> 00:05:41,990
right if I want to send the session name

00:05:39,680 --> 00:05:44,000
for instance remember there is this

00:05:41,990 --> 00:05:46,129
argument for the session storage

00:05:44,000 --> 00:05:50,199
constructor which is the session name I

00:05:46,129 --> 00:05:54,319
count so very easy to use very odd to

00:05:50,199 --> 00:05:57,199
customize there is another way to do the

00:05:54,319 --> 00:06:00,169
exact same thing instead of creating the

00:05:57,199 --> 00:06:03,349
object in the constructor I can also

00:06:00,169 --> 00:06:06,650
inject an instance of the session

00:06:03,349 --> 00:06:08,889
storage into the user constructor like

00:06:06,650 --> 00:06:08,889
this

00:06:10,550 --> 00:06:16,460
so now if I want to use the user class

00:06:13,820 --> 00:06:20,840
if I want to create an instance of the

00:06:16,460 --> 00:06:23,000
user class it's a bit more difficult so

00:06:20,840 --> 00:06:25,610
this nice it's very easy to customize

00:06:23,000 --> 00:06:28,190
but it's slightly more difficult to use

00:06:25,610 --> 00:06:31,460
right because before being able to

00:06:28,190 --> 00:06:34,190
create the user object I need to create

00:06:31,460 --> 00:06:37,670
a session storage one so that I can

00:06:34,190 --> 00:06:41,230
inject it into the user so more complex

00:06:37,670 --> 00:06:44,720
to use but very easy to customize and

00:06:41,230 --> 00:06:49,970
that's dependence injection there is

00:06:44,720 --> 00:06:53,330
nothing more another story okay so

00:06:49,970 --> 00:07:00,100
dependency injection big word very easy

00:06:53,330 --> 00:07:06,590
to understand nothing fancy really right

00:07:00,100 --> 00:07:09,170
so the difference is not really big but

00:07:06,590 --> 00:07:11,600
it changes everything in the way you can

00:07:09,170 --> 00:07:14,030
interact with the object in the way you

00:07:11,600 --> 00:07:19,760
can change things in the way you can

00:07:14,030 --> 00:07:21,200
customize things so I think dependency

00:07:19,760 --> 00:07:24,320
injection okay this is a design pattern

00:07:21,200 --> 00:07:27,260
but it's more about being a best

00:07:24,320 --> 00:07:31,460
practice really that enables you to do a

00:07:27,260 --> 00:07:33,050
lot of different things okay so let's

00:07:31,460 --> 00:07:36,200
see and let's talk about all the

00:07:33,050 --> 00:07:40,910
benefits we are from injecting our

00:07:36,200 --> 00:07:43,580
dependency into our objects so if i want

00:07:40,910 --> 00:07:46,790
to change so i'm going to talk about the

00:07:43,580 --> 00:07:50,470
first example the very first one and i'm

00:07:46,790 --> 00:07:53,060
going to explain why this is really bad

00:07:50,470 --> 00:07:57,110
even if it's much easier for the user

00:07:53,060 --> 00:07:59,720
it's rebadow a bunch of region so the

00:07:57,110 --> 00:08:02,090
first one let's say that I want to

00:07:59,720 --> 00:08:04,910
change the session name right the cookie

00:08:02,090 --> 00:08:08,870
name this is how can do that with the

00:08:04,910 --> 00:08:13,820
first example I can just our code the

00:08:08,870 --> 00:08:15,920
name here in the user class right is it

00:08:13,820 --> 00:08:19,140
good enough

00:08:15,920 --> 00:08:21,720
probably not right because it is out cut

00:08:19,140 --> 00:08:25,550
it air so I can't configure it from the

00:08:21,720 --> 00:08:32,130
outside there is no way to actually

00:08:25,550 --> 00:08:33,810
change this value and of course if I

00:08:32,130 --> 00:08:37,440
want to use the session storage for

00:08:33,810 --> 00:08:40,800
other objects I will need to duplicate

00:08:37,440 --> 00:08:43,890
this value everywhere so if I want to

00:08:40,800 --> 00:08:46,140
change the session name I will need to

00:08:43,890 --> 00:08:48,690
change all the classes depending on the

00:08:46,140 --> 00:08:50,370
session storage right so whenever I'm

00:08:48,690 --> 00:08:52,200
creating a new session storage instance

00:08:50,370 --> 00:08:54,960
I will need to change the value of the

00:08:52,200 --> 00:08:58,020
session name that's not a big deal here

00:08:54,960 --> 00:09:01,820
I'm talking about 12 classes and one

00:08:58,020 --> 00:09:06,450
argument but if if you think about

00:09:01,820 --> 00:09:09,960
having a much bigger app with tens of

00:09:06,450 --> 00:09:13,470
classes and tens of arguments it's

00:09:09,960 --> 00:09:17,010
naturally scalable right so this is not

00:09:13,470 --> 00:09:21,600
possible there is one way to slightly

00:09:17,010 --> 00:09:23,760
improve things here instead of outgoing

00:09:21,600 --> 00:09:26,790
decision in ear as a constructor

00:09:23,760 --> 00:09:30,960
argument what i can do is i can create a

00:09:26,790 --> 00:09:35,250
global constant it is much better much

00:09:30,960 --> 00:09:37,350
better because now i can configure i can

00:09:35,250 --> 00:09:40,590
change the value of the session name

00:09:37,350 --> 00:09:45,690
from the outside right so it's not i'll

00:09:40,590 --> 00:09:51,410
cut it anymore into the user class is it

00:09:45,690 --> 00:09:51,410
better really now why

00:09:52,670 --> 00:09:57,650
it's very difficult to test now right

00:09:55,100 --> 00:10:01,250
that's one thing that is really

00:09:57,650 --> 00:10:03,770
difficult because if you need to define

00:10:01,250 --> 00:10:07,430
a constant its global so you can change

00:10:03,770 --> 00:10:13,370
the value by definition so you can't

00:10:07,430 --> 00:10:17,030
simulate how your user behaves depending

00:10:13,370 --> 00:10:19,250
on the value of this concept right it's

00:10:17,030 --> 00:10:23,090
not a big deal ear but you can probably

00:10:19,250 --> 00:10:25,640
find examples where you want to change

00:10:23,090 --> 00:10:29,150
the value and see how to use ur BF

00:10:25,640 --> 00:10:32,660
depending on the value of this variable

00:10:29,150 --> 00:10:34,940
so it's very odd to test and this is

00:10:32,660 --> 00:10:38,530
global so if i want to differentiation

00:10:34,940 --> 00:10:42,130
storage with two different session name

00:10:38,530 --> 00:10:45,200
whatever it's not really possible right

00:10:42,130 --> 00:10:48,200
so it's a bit better because now we can

00:10:45,200 --> 00:10:52,100
configure things from the outside but

00:10:48,200 --> 00:10:54,740
it's not it's not enough so the next

00:10:52,100 --> 00:10:59,690
step and everything I'm talking about

00:10:54,740 --> 00:11:03,110
here is people wanting to find a way to

00:10:59,690 --> 00:11:06,200
actually make this work without using

00:11:03,110 --> 00:11:09,010
dependency injection and as you will see

00:11:06,200 --> 00:11:11,920
you you can find a lot of ways around

00:11:09,010 --> 00:11:14,840
dependency injection but all those

00:11:11,920 --> 00:11:18,290
possibilities are actually very bad IDs

00:11:14,840 --> 00:11:21,140
so that's why I want to talk about all

00:11:18,290 --> 00:11:24,230
these possibilities because at some

00:11:21,140 --> 00:11:26,210
point you will think that this is a good

00:11:24,230 --> 00:11:30,339
option instead of injecting dependencies

00:11:26,210 --> 00:11:33,939
it's never ever the right choice

00:11:30,339 --> 00:11:38,850
so now I can pass the session name as an

00:11:33,939 --> 00:11:42,990
argument for decision that the user

00:11:38,850 --> 00:11:46,959
constructor so it's better than before

00:11:42,990 --> 00:11:49,420
because now it's not global anymore now

00:11:46,959 --> 00:11:52,149
i'm passing the value from the outside

00:11:49,420 --> 00:11:56,379
so i can change it truly easily so it's

00:11:52,149 --> 00:12:04,439
more testable but still it's not very

00:11:56,379 --> 00:12:04,439
good to understand why sorry

00:12:05,570 --> 00:12:14,460
yeah sure but the biggest problem here

00:12:10,080 --> 00:12:17,279
is about separation of concerns right

00:12:14,460 --> 00:12:20,520
the session name has nothing to do with

00:12:17,279 --> 00:12:22,440
the user class right so here I just have

00:12:20,520 --> 00:12:25,350
one argument to the constructor but

00:12:22,440 --> 00:12:28,020
think about having more arguments in

00:12:25,350 --> 00:12:31,020
this constructor arguments for the user

00:12:28,020 --> 00:12:34,440
class and arguments for the session

00:12:31,020 --> 00:12:37,890
storage class right I'm going to have a

00:12:34,440 --> 00:12:41,070
mix of arguments some are for the user

00:12:37,890 --> 00:12:43,950
some for decision storage right so the

00:12:41,070 --> 00:12:45,390
separation of concerns is really

00:12:43,950 --> 00:12:48,779
something important when you are

00:12:45,390 --> 00:12:54,570
thinking about how to create your

00:12:48,779 --> 00:13:03,600
classes so it's better than before but

00:12:54,570 --> 00:13:05,730
not still good enough okay um so one

00:13:03,600 --> 00:13:10,830
thing you can do this is next step

00:13:05,730 --> 00:13:13,830
really is instead of passing one

00:13:10,830 --> 00:13:15,990
argument at a time I can just pass a

00:13:13,830 --> 00:13:17,910
bunch of arguments for the session

00:13:15,990 --> 00:13:20,370
storage right so I have all not argument

00:13:17,910 --> 00:13:22,380
my arguments for the user and then

00:13:20,370 --> 00:13:24,750
probably has the last argument and

00:13:22,380 --> 00:13:27,690
pathogen array with all the arguments

00:13:24,750 --> 00:13:30,420
for the session storage that way there

00:13:27,690 --> 00:13:33,870
is a clear difference between the

00:13:30,420 --> 00:13:39,360
arguments for the user and arguments for

00:13:33,870 --> 00:13:42,750
the session storage so this is a bit

00:13:39,360 --> 00:13:46,260
better but still not enough because the

00:13:42,750 --> 00:13:49,890
subversion of concerns because again you

00:13:46,260 --> 00:13:51,900
have add credit song we have added more

00:13:49,890 --> 00:13:54,180
complexity really now I need to create

00:13:51,900 --> 00:13:56,579
an array and it remember that the

00:13:54,180 --> 00:13:59,390
session name is named the key is named

00:13:56,579 --> 00:14:02,100
so I'm adding a bunch of complexity

00:13:59,390 --> 00:14:04,370
which means that I'm going to need some

00:14:02,100 --> 00:14:07,290
clear documentation about how it works

00:14:04,370 --> 00:14:10,440
it's not really clear what is this

00:14:07,290 --> 00:14:13,110
storage options what are the keys that I

00:14:10,440 --> 00:14:14,670
can actually pass hi it's going to be

00:14:13,110 --> 00:14:16,680
used by the session storage class so

00:14:14,670 --> 00:14:17,520
it's a bunch of questions I need to be

00:14:16,680 --> 00:14:20,160
able to answer

00:14:17,520 --> 00:14:22,980
fast so whenever you need to document

00:14:20,160 --> 00:14:25,740
something either is a problem somewhere

00:14:22,980 --> 00:14:28,140
the name is probably not a good one orge

00:14:25,740 --> 00:14:31,590
abstraction is to merge whatever but

00:14:28,140 --> 00:14:34,260
there's a problem so it's again better

00:14:31,590 --> 00:14:46,410
than a previous solution but not good

00:14:34,260 --> 00:14:50,430
enough so if you use dependency

00:14:46,410 --> 00:14:55,850
injection if you instead inject the

00:14:50,430 --> 00:14:59,100
storage all those problems do not exist

00:14:55,850 --> 00:15:01,020
you do not have any problem because you

00:14:59,100 --> 00:15:04,110
can do whatever you want by creating a

00:15:01,020 --> 00:15:08,840
new station storage object I am passing

00:15:04,110 --> 00:15:11,610
the value here it's from an argument

00:15:08,840 --> 00:15:15,450
from session storage so the separation

00:15:11,610 --> 00:15:18,660
of concerns is really good and I can do

00:15:15,450 --> 00:15:20,580
whatever I want really right so that's

00:15:18,660 --> 00:15:26,010
why I dependency injection is really

00:15:20,580 --> 00:15:30,030
something you want to use and of course

00:15:26,010 --> 00:15:32,520
using that I can see some other problems

00:15:30,030 --> 00:15:36,290
right let's say that now I want to store

00:15:32,520 --> 00:15:40,110
my sessions in Mexico or memcache G

00:15:36,290 --> 00:15:43,220
alreadies whatever I can't write because

00:15:40,110 --> 00:15:47,250
again I need to change my user class and

00:15:43,220 --> 00:15:50,150
if you think about it at some point I'm

00:15:47,250 --> 00:15:52,880
thinking about moving to memcache d and

00:15:50,150 --> 00:15:57,570
i'm changing the user class for that

00:15:52,880 --> 00:15:59,010
again it's not simple right if i want to

00:15:57,570 --> 00:16:01,340
change something about a session storage

00:15:59,010 --> 00:16:03,840
I need to change a session storage

00:16:01,340 --> 00:16:05,790
classes I want to change the

00:16:03,840 --> 00:16:08,130
configuration of those session storage

00:16:05,790 --> 00:16:10,970
classes I don't want to change all the

00:16:08,130 --> 00:16:16,080
classes depending on my session storage

00:16:10,970 --> 00:16:18,540
right and of course if you are walking

00:16:16,080 --> 00:16:20,560
on a very big project with many

00:16:18,540 --> 00:16:23,560
developers

00:16:20,560 --> 00:16:25,300
if there is one team there is

00:16:23,560 --> 00:16:28,750
responsible for everything related to

00:16:25,300 --> 00:16:33,250
decisions they can do whatever they want

00:16:28,750 --> 00:16:35,500
if you are not depending on or if you

00:16:33,250 --> 00:16:40,450
are not up cutting things into your

00:16:35,500 --> 00:16:42,400
design right so again the user team the

00:16:40,450 --> 00:16:44,650
team responsible for the user classes

00:16:42,400 --> 00:16:47,050
they don't care about what you're doing

00:16:44,650 --> 00:16:50,140
with your session but if you are using

00:16:47,050 --> 00:16:54,010
some app putting names like the session

00:16:50,140 --> 00:16:57,640
storage class name here then you have a

00:16:54,010 --> 00:17:00,010
tight tightly coupled class hierarchy

00:16:57,640 --> 00:17:03,370
right it's not good you can't really

00:17:00,010 --> 00:17:04,780
work on two different aspects on your

00:17:03,370 --> 00:17:08,709
own if you are using dependency

00:17:04,780 --> 00:17:10,930
injection no big deal right you can't

00:17:08,709 --> 00:17:14,050
change the decision storage class name

00:17:10,930 --> 00:17:16,240
no big deal I don't care because at some

00:17:14,050 --> 00:17:17,770
point someone is going to do the work of

00:17:16,240 --> 00:17:20,970
you know adding the glue between

00:17:17,770 --> 00:17:24,880
everything and this team responsible for

00:17:20,970 --> 00:17:27,040
creating the glue is going to use the

00:17:24,880 --> 00:17:32,500
right class name and inject it into the

00:17:27,040 --> 00:17:34,840
user model so instead of our Kadena

00:17:32,500 --> 00:17:38,860
storage dependency inside the user class

00:17:34,840 --> 00:17:41,200
you need to inject it I'm going to tell

00:17:38,860 --> 00:17:44,170
you that a bunch of times today because

00:17:41,200 --> 00:17:50,640
it's so simple but you know you need to

00:17:44,170 --> 00:17:54,310
really grasp why this is important and

00:17:50,640 --> 00:17:57,429
smart people can do that it's the next

00:17:54,310 --> 00:18:01,090
step right instead of using dependency

00:17:57,429 --> 00:18:03,040
injection you can think of using a

00:18:01,090 --> 00:18:05,410
global registry like that this is a

00:18:03,040 --> 00:18:12,370
design pattern so it must be really cool

00:18:05,410 --> 00:18:16,030
good to use actually it's very parity so

00:18:12,370 --> 00:18:19,480
here ever registry and I'm studying the

00:18:16,030 --> 00:18:21,640
storage inside one key in the registry

00:18:19,480 --> 00:18:24,429
which means that now in the constructor

00:18:21,640 --> 00:18:27,340
I can get it from the registry and if

00:18:24,429 --> 00:18:29,530
you think about it it's exactly the same

00:18:27,340 --> 00:18:31,750
as dependency injection in the sense

00:18:29,530 --> 00:18:32,160
that you can configure you can change

00:18:31,750 --> 00:18:35,280
the

00:18:32,160 --> 00:18:40,560
and session session storage class name

00:18:35,280 --> 00:18:46,440
you can do everything but why it's not a

00:18:40,560 --> 00:18:50,700
good idea yeah sure again we are adding

00:18:46,440 --> 00:18:57,390
yet another layer of abstraction right

00:18:50,700 --> 00:19:01,410
so we are just adding complexity for no

00:18:57,390 --> 00:19:04,320
benefits I can think about something

00:19:01,410 --> 00:19:08,520
that you can do with that that I can't

00:19:04,320 --> 00:19:11,850
do with dependency injection but now we

00:19:08,520 --> 00:19:15,240
have a registry which means that my user

00:19:11,850 --> 00:19:18,390
class now depends on another layer of

00:19:15,240 --> 00:19:21,480
abstraction right it's slower less

00:19:18,390 --> 00:19:24,000
testable it's not really easy to

00:19:21,480 --> 00:19:29,880
understand and again we have some are

00:19:24,000 --> 00:19:31,620
coded conventions between in the system

00:19:29,880 --> 00:19:35,160
right because now I need to know that

00:19:31,620 --> 00:19:37,290
decision storage is stored into the

00:19:35,160 --> 00:19:39,420
session storage key in the registry

00:19:37,290 --> 00:19:41,610
right so this is again something that

00:19:39,420 --> 00:19:45,900
you need to document that people need to

00:19:41,610 --> 00:19:49,260
understand and if you are if you want to

00:19:45,900 --> 00:19:52,830
change the session storage name in the

00:19:49,260 --> 00:19:56,610
registry you to change a bunch of other

00:19:52,830 --> 00:19:57,870
classes and related classes really so

00:19:56,610 --> 00:20:02,400
it's more complex than dependency

00:19:57,870 --> 00:20:04,790
injection no benefits so please you can

00:20:02,400 --> 00:20:08,970
take a picture use dependency injection

00:20:04,790 --> 00:20:11,640
it's real easy and it solves many

00:20:08,970 --> 00:20:15,810
problems the first version of the slide

00:20:11,640 --> 00:20:19,230
set it solves all your problems I think

00:20:15,810 --> 00:20:23,100
it's more or less true but it actually

00:20:19,230 --> 00:20:27,530
solves many many problems so don't try

00:20:23,100 --> 00:20:31,070
to be smaller than dependency injection

00:20:27,530 --> 00:20:31,070
it's not going to work

00:20:32,429 --> 00:20:38,380
okay so now if I'm talking about

00:20:36,429 --> 00:20:40,570
dependency injection so this is the

00:20:38,380 --> 00:20:42,850
second version of the class using

00:20:40,570 --> 00:20:45,309
dependency injection you can configure

00:20:42,850 --> 00:20:47,110
things the way you want really so if you

00:20:45,309 --> 00:20:50,830
want to use a different station name

00:20:47,110 --> 00:20:54,670
easy to do if you want to use a session

00:20:50,830 --> 00:20:56,470
storage on mem cache is it to do as well

00:20:54,670 --> 00:20:58,210
and as you can see this the user class

00:20:56,470 --> 00:21:03,220
is exactly the same as before it does

00:20:58,210 --> 00:21:04,960
not change anymore if you want to test a

00:21:03,220 --> 00:21:06,550
user class and you don't want to use a

00:21:04,960 --> 00:21:10,330
session because you know when you are

00:21:06,550 --> 00:21:11,830
using PHP unit on the command line you

00:21:10,330 --> 00:21:13,300
don't have any session so it doesn't

00:21:11,830 --> 00:21:16,150
make sense so I need a specific

00:21:13,300 --> 00:21:21,300
implementation that for instance uses

00:21:16,150 --> 00:21:21,300
arrays instead of using session from PHP

00:21:22,679 --> 00:21:29,890
that's something really also useful if

00:21:27,720 --> 00:21:31,390
the implementation the default

00:21:29,890 --> 00:21:34,540
implementation you are using is slow

00:21:31,390 --> 00:21:37,960
right if my station storage class is

00:21:34,540 --> 00:21:40,330
actually actually makes and HTTP call to

00:21:37,960 --> 00:21:43,620
another service for instance in your

00:21:40,330 --> 00:21:46,840
unit test you don't want to make HTTP

00:21:43,620 --> 00:21:49,059
calls so you can just use this simple

00:21:46,840 --> 00:21:53,140
implementation that is really fast for

00:21:49,059 --> 00:21:56,470
your unit tests and of course it would

00:21:53,140 --> 00:21:59,230
be even better if you use interfaces

00:21:56,470 --> 00:22:02,770
right so the next level is using

00:21:59,230 --> 00:22:05,740
interfaces so right now if you have a

00:22:02,770 --> 00:22:09,880
look at the class the constructor take a

00:22:05,740 --> 00:22:12,220
storage argument what is the storage I

00:22:09,880 --> 00:22:14,500
have no idea right so you can actually

00:22:12,220 --> 00:22:17,260
inject whatever you want you can inject

00:22:14,500 --> 00:22:22,870
a string and object Const and an array

00:22:17,260 --> 00:22:24,429
whatever of course PHP is going to tell

00:22:22,870 --> 00:22:27,220
you that there is an error when

00:22:24,429 --> 00:22:30,670
executing the code but it's too late

00:22:27,220 --> 00:22:34,000
right so using interfaces is going to

00:22:30,670 --> 00:22:35,470
solve a bunch of other problems not

00:22:34,000 --> 00:22:40,110
really related to dependency injection

00:22:35,470 --> 00:22:42,630
but very useful still so now I'm

00:22:40,110 --> 00:22:45,580
creating this interface session storage

00:22:42,630 --> 00:22:47,920
interface a very simple one

00:22:45,580 --> 00:22:51,790
it's just about getting stuff out of the

00:22:47,920 --> 00:22:56,050
storage or settings stuff in the storage

00:22:51,790 --> 00:22:59,890
right and now this is the final version

00:22:56,050 --> 00:23:03,460
of my class right now i explicitly say

00:22:59,890 --> 00:23:06,190
that in form a user to work i need an

00:23:03,460 --> 00:23:08,020
instance of session storage interface

00:23:06,190 --> 00:23:09,550
and i don't care about the

00:23:08,020 --> 00:23:11,740
implementation i don't care if the

00:23:09,550 --> 00:23:14,290
session are stored in memcache de

00:23:11,740 --> 00:23:19,270
readies or applying Petrie sessions

00:23:14,290 --> 00:23:22,720
that's not my concern I just want

00:23:19,270 --> 00:23:25,900
something I can use to get value from

00:23:22,720 --> 00:23:28,690
and set value that's all everything else

00:23:25,900 --> 00:23:31,030
is an implementation detail I don't need

00:23:28,690 --> 00:23:35,590
to care about and don't want to care

00:23:31,030 --> 00:23:38,920
about that's very useful if you want to

00:23:35,590 --> 00:23:41,590
test your class because now instead of

00:23:38,920 --> 00:23:46,960
creating a specific implementation of

00:23:41,590 --> 00:23:50,260
the session storage focused on testing I

00:23:46,960 --> 00:23:55,390
can just ask PP unit to create a mark

00:23:50,260 --> 00:23:58,600
for this interface right and then i can

00:23:55,390 --> 00:24:01,630
set ok when if i can say whenever i want

00:23:58,600 --> 00:24:04,090
to get this value please return these

00:24:01,630 --> 00:24:07,900
hours of value whenever i want to set a

00:24:04,090 --> 00:24:11,410
value do whatever right so by marking an

00:24:07,900 --> 00:24:13,660
interface you can totally replace an

00:24:11,410 --> 00:24:15,640
implementation you don't care you don't

00:24:13,660 --> 00:24:18,970
care about so when i'm testing the user

00:24:15,640 --> 00:24:20,920
class I don't care about the details of

00:24:18,970 --> 00:24:22,780
the implementation of the session

00:24:20,920 --> 00:24:29,860
storage i am going to using production i

00:24:22,780 --> 00:24:33,520
do care about what or how my user class

00:24:29,860 --> 00:24:36,970
behave when the session storage give me

00:24:33,520 --> 00:24:40,360
this value or this or the value how my

00:24:36,970 --> 00:24:43,060
class behaves if the language is an

00:24:40,360 --> 00:24:45,520
empty string for instance or if this is

00:24:43,060 --> 00:24:48,190
not a valid language i want two people

00:24:45,520 --> 00:24:49,600
to test that but how decision storage is

00:24:48,190 --> 00:24:53,530
actually going to store that information

00:24:49,600 --> 00:24:54,679
I don't care and my tests they do not

00:24:53,530 --> 00:24:58,409
care as well

00:24:54,679 --> 00:25:00,359
so the coupling is also something that

00:24:58,409 --> 00:25:03,720
you have for free when using dependency

00:25:00,359 --> 00:25:08,720
injection so dependency injection is

00:25:03,720 --> 00:25:13,139
really about clean code which means

00:25:08,720 --> 00:25:15,570
reusable I can reuse my session storage

00:25:13,139 --> 00:25:18,450
classes really easily I have one

00:25:15,570 --> 00:25:21,239
interface get set that's all I can

00:25:18,450 --> 00:25:23,340
reduce it whenever I need a session

00:25:21,239 --> 00:25:25,649
storage from one project to the next one

00:25:23,340 --> 00:25:30,090
it's testable because i have this

00:25:25,649 --> 00:25:32,039
interface it's pluggable i can inject my

00:25:30,090 --> 00:25:34,710
session storage more than once in many

00:25:32,039 --> 00:25:37,489
different objects which means that this

00:25:34,710 --> 00:25:41,460
object is i can actually be shared

00:25:37,489 --> 00:25:43,619
amongst a bunch of other objects it's

00:25:41,460 --> 00:25:48,119
loosely coupled right so it's all about

00:25:43,619 --> 00:25:50,279
separation of concerns so this is the

00:25:48,119 --> 00:25:53,149
dependent the definition of dependency

00:25:50,279 --> 00:25:55,590
injection from a java container actually

00:25:53,149 --> 00:25:59,309
dependency injection is where components

00:25:55,590 --> 00:26:01,739
components being classes mostly in PHP

00:25:59,309 --> 00:26:05,639
so we're components are given their

00:26:01,739 --> 00:26:08,159
dependencies class instances through

00:26:05,639 --> 00:26:14,009
their constructors methods are directly

00:26:08,159 --> 00:26:15,960
into fields so I have talked about how

00:26:14,009 --> 00:26:18,840
you can inject your dependency in two

00:26:15,960 --> 00:26:21,599
constructors but that's just one way to

00:26:18,840 --> 00:26:24,720
do dependency injection you can also use

00:26:21,599 --> 00:26:27,720
setter injection so instead of injecting

00:26:24,720 --> 00:26:31,169
my dependency into the constructor I can

00:26:27,720 --> 00:26:35,759
create a setter and method that takes a

00:26:31,169 --> 00:26:39,330
storage or directly into some properties

00:26:35,759 --> 00:26:45,210
right I don't like the last one actually

00:26:39,330 --> 00:26:48,989
nobody does in PHP probably because you

00:26:45,210 --> 00:26:51,899
know in a setter I can't check things I

00:26:48,989 --> 00:26:54,330
can do a bunch of things with a getter

00:26:51,899 --> 00:26:57,690
with a property you can't really do

00:26:54,330 --> 00:27:01,200
anything so and actually I check triple

00:26:57,690 --> 00:27:04,070
8 and property injection is not used

00:27:01,200 --> 00:27:06,359
anywhere in the core so it's all about

00:27:04,070 --> 00:27:08,130
constructor injection or setter

00:27:06,359 --> 00:27:10,650
injection

00:27:08,130 --> 00:27:17,370
so how do you choose between those two

00:27:10,650 --> 00:27:22,230
kind of injection first I think I really

00:27:17,370 --> 00:27:25,170
like constructor injection because your

00:27:22,230 --> 00:27:29,540
objects are usable right after creating

00:27:25,170 --> 00:27:33,510
them right if the storage is a required

00:27:29,540 --> 00:27:35,550
dependency for my user class it's better

00:27:33,510 --> 00:27:38,970
to inject it into the constructor

00:27:35,550 --> 00:27:41,010
because whenever I create a user object

00:27:38,970 --> 00:27:43,590
whenever I get a user object from

00:27:41,010 --> 00:27:46,770
someone i know that the storage has been

00:27:43,590 --> 00:27:49,770
set so i can use it right away if not i

00:27:46,770 --> 00:27:52,860
need to remember to actually set the

00:27:49,770 --> 00:27:56,550
dependency so most of the time you need

00:27:52,860 --> 00:27:59,670
to use constructor injection right so

00:27:56,550 --> 00:28:01,950
setter injection is great when you want

00:27:59,670 --> 00:28:05,490
to inject some optional dependency for

00:28:01,950 --> 00:28:07,500
instance and a logger and your class

00:28:05,490 --> 00:28:12,870
works without the logger but if you

00:28:07,500 --> 00:28:17,520
inject a logger it looks stuff like and

00:28:12,870 --> 00:28:21,810
setter injection is also useful when you

00:28:17,520 --> 00:28:25,500
have class a depending on Class B and

00:28:21,810 --> 00:28:27,240
Class B needs clays Class A so if you

00:28:25,500 --> 00:28:29,910
are using constructor injection doesn't

00:28:27,240 --> 00:28:32,700
work right source using the setter ear

00:28:29,910 --> 00:28:35,700
two sailors can practice circular

00:28:32,700 --> 00:28:37,890
reference right I'm not saying this is a

00:28:35,700 --> 00:28:44,930
good thing to do but that's one way you

00:28:37,890 --> 00:28:48,060
can fix it I think there's yeah

00:28:44,930 --> 00:28:50,760
sometimes but I think it's a bad smell

00:28:48,060 --> 00:28:56,790
but anyway if you have a lot of

00:28:50,760 --> 00:28:59,250
different arguments so if you're the

00:28:56,790 --> 00:29:03,180
number of arguments is really huge you

00:28:59,250 --> 00:29:05,130
can probably use setter injection for

00:29:03,180 --> 00:29:07,050
some of them but again I think it's bad

00:29:05,130 --> 00:29:10,080
smell it means that your object is doing

00:29:07,050 --> 00:29:13,530
too much so you probably need to create

00:29:10,080 --> 00:29:18,830
a bunch of other places and an separate

00:29:13,530 --> 00:29:25,130
things really any questions

00:29:18,830 --> 00:29:27,860
yeah it's not really bad practice but in

00:29:25,130 --> 00:29:31,279
the PDP world we like to have getters

00:29:27,860 --> 00:29:33,860
and setters because then you can easily

00:29:31,279 --> 00:29:35,679
change the implementation and what's

00:29:33,860 --> 00:29:38,799
going on in the Gator or the setter

00:29:35,679 --> 00:29:43,809
which you come to with the property

00:29:38,799 --> 00:29:48,830
right and so if you want to track that I

00:29:43,809 --> 00:29:51,590
don't know I have no idea really here

00:29:48,830 --> 00:29:55,700
but actually property injection is used

00:29:51,590 --> 00:29:58,730
in symphony sorry about that so for very

00:29:55,700 --> 00:30:01,570
simple stuff so for instance for in the

00:29:58,730 --> 00:30:04,549
HTTP foundation component the request

00:30:01,570 --> 00:30:10,580
when you want to access the query string

00:30:04,549 --> 00:30:12,710
or yeah stuff from the request we are

00:30:10,580 --> 00:30:15,529
doing that by using what we call

00:30:12,710 --> 00:30:18,610
parameter bags parameter back instances

00:30:15,529 --> 00:30:23,440
and they're injected via properties but

00:30:18,610 --> 00:30:27,559
it means it really makes refactoring

00:30:23,440 --> 00:30:29,330
difficult because you can't you can't

00:30:27,559 --> 00:30:31,820
change anything right you just have a

00:30:29,330 --> 00:30:36,970
property if you have methods you can add

00:30:31,820 --> 00:30:36,970
a bunch of stuff in there so that's why

00:30:39,399 --> 00:30:49,720
what do you mean we don't have it in PHP

00:30:43,850 --> 00:30:49,720
not yet what do you mean

00:30:49,850 --> 00:30:54,460
we did yeah

00:30:55,430 --> 00:31:00,680
ah yeah i think i can add a bunch of

00:30:58,130 --> 00:31:02,810
slides about trying to work around

00:31:00,680 --> 00:31:05,720
dependency injection bit more yeah I

00:31:02,810 --> 00:31:08,750
mean it's it adds complexity underscore

00:31:05,720 --> 00:31:12,350
underscore set if you are using that

00:31:08,750 --> 00:31:14,830
that's probably bad smell as well I mean

00:31:12,350 --> 00:31:18,530
it means that then you don't have

00:31:14,830 --> 00:31:20,750
occupation anymore in IDEs you don't

00:31:18,530 --> 00:31:23,900
know what you can access or what you

00:31:20,750 --> 00:31:28,010
can't access it it means that you need

00:31:23,900 --> 00:31:32,660
to document things a lot so that's a

00:31:28,010 --> 00:31:34,670
bunch of problems that you know happens

00:31:32,660 --> 00:31:38,480
just before just because you are using

00:31:34,670 --> 00:31:41,300
you know this kind of ugly abstraction

00:31:38,480 --> 00:31:43,700
really and the performance is really the

00:31:41,300 --> 00:31:48,580
same as using methods so why not using

00:31:43,700 --> 00:31:48,580
methods then no

00:31:55,100 --> 00:31:59,360
but on this end stories you can bring

00:31:57,500 --> 00:32:03,850
interface and make sure that you always

00:31:59,360 --> 00:32:03,850
get sure that time

00:32:06,500 --> 00:32:13,630
yep yep anyway

00:32:19,460 --> 00:32:26,179
default okay so the question is can we

00:32:26,840 --> 00:32:33,809
so you are using dependency injection

00:32:30,120 --> 00:32:36,679
but you want default implementation if

00:32:33,809 --> 00:32:43,980
you don't inject anything so basically

00:32:36,679 --> 00:32:48,500
in the in too yeah so here I say storage

00:32:43,980 --> 00:32:51,090
equal no so you can inject me a storage

00:32:48,500 --> 00:32:54,389
implementation or if it is no I'm

00:32:51,090 --> 00:32:57,840
creating a new one for you yeah yeah

00:32:54,389 --> 00:33:04,980
that's something I can add as a bad

00:32:57,840 --> 00:33:08,460
practice really yeah because you know if

00:33:04,980 --> 00:33:12,289
you are if this is a possibility users

00:33:08,460 --> 00:33:17,629
are going to use that obviously always

00:33:12,289 --> 00:33:17,629
so you're back to square one really

00:33:19,039 --> 00:33:25,080
sometimes it makes sense and if you have

00:33:23,070 --> 00:33:28,860
a look at symphony we have quite a few

00:33:25,080 --> 00:33:31,500
examples of that but mainly for backward

00:33:28,860 --> 00:33:34,080
compatibility right because at some

00:33:31,500 --> 00:33:36,929
point we won't yet another dependency it

00:33:34,080 --> 00:33:39,929
was not the case in previous versions so

00:33:36,929 --> 00:33:42,090
we make it optional and we create a

00:33:39,929 --> 00:33:44,490
sensible default if you don't pass it so

00:33:42,090 --> 00:33:47,789
if we are talking about pepper

00:33:44,490 --> 00:33:52,039
compatibility can be useful but from day

00:33:47,789 --> 00:33:52,039
one probably not probably not

00:33:57,690 --> 00:34:06,820
yeah factories sure sure sure factories

00:34:04,330 --> 00:34:09,520
this is the exact same thing as the

00:34:06,820 --> 00:34:13,869
registry it's yet another layer on top

00:34:09,520 --> 00:34:16,629
of simple objects last question because

00:34:13,869 --> 00:34:19,210
as T I've a better flights really maybe

00:34:16,629 --> 00:34:21,220
code smell to do both a constructor and

00:34:19,210 --> 00:34:23,379
a setter and getter or a setter like

00:34:21,220 --> 00:34:26,679
would that be bad too yeah sure sure it

00:34:23,379 --> 00:34:28,869
would be okay to do that it's okay but

00:34:26,679 --> 00:34:30,639
you need a strong reason to do that well

00:34:28,869 --> 00:34:32,649
you're allowing maybe someone else later

00:34:30,639 --> 00:34:35,679
on to overwrite the particular storage

00:34:32,649 --> 00:34:37,869
you have and you're defining the classes

00:34:35,679 --> 00:34:40,780
construction you know so the thing is

00:34:37,869 --> 00:34:42,700
then it's free out to understand what's

00:34:40,780 --> 00:34:45,099
going on behind the scene because you

00:34:42,700 --> 00:34:47,409
created user object with some kind of

00:34:45,099 --> 00:34:49,000
implementation and then later on for

00:34:47,409 --> 00:34:50,230
whatever reason someone sent the

00:34:49,000 --> 00:34:53,409
implementation and you don't understand

00:34:50,230 --> 00:34:55,960
what's going on so yeah not really

00:34:53,409 --> 00:34:57,880
comfortable with that okay but sure as

00:34:55,960 --> 00:34:59,380
you can see I've talked about a bunch of

00:34:57,880 --> 00:35:02,200
things you can do to work around

00:34:59,380 --> 00:35:05,440
dependency injection and you guys have a

00:35:02,200 --> 00:35:06,880
bunch of other ideas really but at the

00:35:05,440 --> 00:35:11,050
end of the day I think that you know

00:35:06,880 --> 00:35:13,210
trying to just use dependency injection

00:35:11,050 --> 00:35:16,900
and I know it's not fun it's too easy

00:35:13,210 --> 00:35:20,050
really right we are developers we lack

00:35:16,900 --> 00:35:23,550
complex things that only us can

00:35:20,050 --> 00:35:25,540
understand really but sometimes

00:35:23,550 --> 00:35:29,619
simplicity is really better than

00:35:25,540 --> 00:35:31,330
anything else okay so now let's talk

00:35:29,619 --> 00:35:33,730
about it slightly more complex example

00:35:31,330 --> 00:35:38,859
let's say that I'm creating a framework

00:35:33,730 --> 00:35:42,580
yeah after than a bit of time really a

00:35:38,859 --> 00:35:47,740
very simple one just does one two three

00:35:42,580 --> 00:35:50,830
four five six objects so every time I

00:35:47,740 --> 00:35:52,960
create a new project based on this

00:35:50,830 --> 00:35:55,390
framework I need to do this

00:35:52,960 --> 00:35:56,770
bootstrapping code really right I need

00:35:55,390 --> 00:35:58,359
to create the request object and

00:35:56,770 --> 00:36:01,210
integrate the response object I need to

00:35:58,359 --> 00:36:04,240
create a storage the user some cash the

00:36:01,210 --> 00:36:06,940
routing whatever right but I don't want

00:36:04,240 --> 00:36:07,750
to copy and paste this code from one

00:36:06,940 --> 00:36:11,680
project

00:36:07,750 --> 00:36:14,800
x1 I want to abstract that right how can

00:36:11,680 --> 00:36:18,070
I do that first simple let's create an

00:36:14,800 --> 00:36:20,380
application class right so now it's very

00:36:18,070 --> 00:36:21,850
easy to use again for every single

00:36:20,380 --> 00:36:25,440
project I can just create a new

00:36:21,850 --> 00:36:29,110
application and work with that object

00:36:25,440 --> 00:36:32,530
can you see a problem here you start

00:36:29,110 --> 00:36:35,890
with those glasses now uh-huh yeah

00:36:32,530 --> 00:36:38,140
basically we are back to square one we

00:36:35,890 --> 00:36:40,810
have all the problems we had before I

00:36:38,140 --> 00:36:43,620
can't change the implementation I can't

00:36:40,810 --> 00:36:46,690
configure my framework anymore right and

00:36:43,620 --> 00:36:49,810
you can imagine passing a config object

00:36:46,690 --> 00:36:54,100
a config array of whatever you can think

00:36:49,810 --> 00:36:56,500
of to work around this problem all the

00:36:54,100 --> 00:36:59,620
things I've talked about really but this

00:36:56,500 --> 00:37:06,610
is bad right so there must be a better

00:36:59,620 --> 00:37:11,680
way than doing that right and that's a

00:37:06,610 --> 00:37:14,290
dependency injection container ok so

00:37:11,680 --> 00:37:18,250
I've been talking about dependency

00:37:14,290 --> 00:37:20,350
injection for half an hour and this is a

00:37:18,250 --> 00:37:24,790
very first time I'm talking about a

00:37:20,350 --> 00:37:28,660
container right so dependency injection

00:37:24,790 --> 00:37:32,470
is totally different from a dependency

00:37:28,660 --> 00:37:35,670
injection container you don't need a

00:37:32,470 --> 00:37:44,280
container to use dependency injection

00:37:35,670 --> 00:37:48,190
right copy that a lot of time and people

00:37:44,280 --> 00:37:51,670
often make confusion between dependency

00:37:48,190 --> 00:37:54,460
injection and using a container it's two

00:37:51,670 --> 00:37:58,210
different things they do not solve the

00:37:54,460 --> 00:38:01,570
same problem a container is only useful

00:37:58,210 --> 00:38:05,800
if you have a bunch of objects that you

00:38:01,570 --> 00:38:09,010
want to manage in a standard way that's

00:38:05,800 --> 00:38:12,970
all so please use dependency injection

00:38:09,010 --> 00:38:16,980
now and at some point if you need a

00:38:12,970 --> 00:38:21,010
container you can it's not a requirement

00:38:16,980 --> 00:38:24,000
so a container is something that you

00:38:21,010 --> 00:38:27,430
can use to describe your objects and

00:38:24,000 --> 00:38:30,130
their dependencies it's also a way to

00:38:27,430 --> 00:38:33,010
instantiate those objects and to

00:38:30,130 --> 00:38:36,730
configure them I'm going to talk about

00:38:33,010 --> 00:38:40,420
the on-demand part later on so it's

00:38:36,730 --> 00:38:46,240
about being able to bootstrap your

00:38:40,420 --> 00:38:50,290
object graph somehow so talking about

00:38:46,240 --> 00:38:54,490
our user and session storage so in this

00:38:50,290 --> 00:38:58,560
design we have two objects user and

00:38:54,490 --> 00:39:01,480
session storage one interface and two

00:38:58,560 --> 00:39:07,750
arguments the session name and a session

00:39:01,480 --> 00:39:09,760
class right so a container is able to

00:39:07,750 --> 00:39:11,860
say okay if you want the user class I

00:39:09,760 --> 00:39:13,990
know that user class depends on a

00:39:11,860 --> 00:39:17,230
session storage interface implementation

00:39:13,990 --> 00:39:20,200
I have one session storage and I know

00:39:17,230 --> 00:39:22,360
that this session storage class is going

00:39:20,200 --> 00:39:26,950
to be used because this is the value of

00:39:22,360 --> 00:39:30,610
the session name argument and I need to

00:39:26,950 --> 00:39:32,980
inject a session name and again oh sorry

00:39:30,610 --> 00:39:34,480
it's mixed up really here I have the

00:39:32,980 --> 00:39:36,790
name of decision to inject into the

00:39:34,480 --> 00:39:41,050
session storage so the container knows

00:39:36,790 --> 00:39:44,680
everything about your classes how to

00:39:41,050 --> 00:39:48,520
interact and how to create those objects

00:39:44,680 --> 00:39:50,260
for you the next slide is about a very

00:39:48,520 --> 00:39:52,570
simple example with pimple pimple is

00:39:50,260 --> 00:39:55,270
very simple dependency injection

00:39:52,570 --> 00:40:01,510
container I wrote many years ago really

00:39:55,270 --> 00:40:03,340
and it's about android lines of code so

00:40:01,510 --> 00:40:06,550
if you have time please have a look at

00:40:03,340 --> 00:40:09,160
the code you will see that creating a

00:40:06,550 --> 00:40:11,710
dependency injection container is not a

00:40:09,160 --> 00:40:14,800
huge amount of work it's not all about

00:40:11,710 --> 00:40:16,690
magic everywhere it's it can be really

00:40:14,800 --> 00:40:19,210
simple and if you have a look at pimple

00:40:16,690 --> 00:40:24,010
ever look at pimple version one not

00:40:19,210 --> 00:40:27,190
version to version one was written for

00:40:24,010 --> 00:40:29,140
this dog actually many years ago it's a

00:40:27,190 --> 00:40:31,270
very simple example on how you can

00:40:29,140 --> 00:40:34,390
create a dependency injection container

00:40:31,270 --> 00:40:34,730
people version 2 is actually optimized

00:40:34,390 --> 00:40:38,000
for

00:40:34,730 --> 00:40:40,640
performance and I think I look at look

00:40:38,000 --> 00:40:42,470
at the code is probably more difficult

00:40:40,640 --> 00:40:44,300
it's free complex to understand works

00:40:42,470 --> 00:40:47,720
what's going on because everything has

00:40:44,300 --> 00:40:52,700
been optimized for performance whereas

00:40:47,720 --> 00:40:55,010
people one was created for just for

00:40:52,700 --> 00:40:59,359
people to learn about what the container

00:40:55,010 --> 00:41:01,850
is and how you can implement one so but

00:40:59,359 --> 00:41:04,340
whatever the container is using it sorry

00:41:01,850 --> 00:41:07,430
about two different steps the first one

00:41:04,340 --> 00:41:10,330
is about configuring the container which

00:41:07,430 --> 00:41:13,820
means that above the gray line here

00:41:10,330 --> 00:41:17,990
nothing happens no objects are created

00:41:13,820 --> 00:41:19,820
it's only about how to configure your

00:41:17,990 --> 00:41:21,890
objects so you are just configuring the

00:41:19,820 --> 00:41:24,680
container here in pimple you are

00:41:21,890 --> 00:41:27,410
configuring the container via animals

00:41:24,680 --> 00:41:31,070
functions that's one way to do that it's

00:41:27,410 --> 00:41:33,380
not the way with symphony but that works

00:41:31,070 --> 00:41:38,210
pretty well right and as you can see if

00:41:33,380 --> 00:41:40,820
you are and then using the user is as

00:41:38,210 --> 00:41:43,220
simple as you can get it's as simple as

00:41:40,820 --> 00:41:46,220
before when we were not using dependency

00:41:43,220 --> 00:41:48,980
injection right here I say okay I want a

00:41:46,220 --> 00:41:53,330
user from the container and I don't care

00:41:48,980 --> 00:41:55,400
about how this user needs to be created

00:41:53,330 --> 00:41:56,990
I don't care about the dependencies I

00:41:55,400 --> 00:41:59,390
don't care about how you need to

00:41:56,990 --> 00:42:05,060
configure it I just want to work with

00:41:59,390 --> 00:42:09,619
the user object that's all right and as

00:42:05,060 --> 00:42:11,690
you can see the user in the container is

00:42:09,619 --> 00:42:13,850
defined as an asst function is creating

00:42:11,690 --> 00:42:17,119
user it's inject the session storage and

00:42:13,850 --> 00:42:19,369
a session storage is created and we

00:42:17,119 --> 00:42:22,040
inject the session name so I forgot to

00:42:19,369 --> 00:42:24,560
use the session class name error but you

00:42:22,040 --> 00:42:26,500
get dat first step we configured

00:42:24,560 --> 00:42:29,030
dependency injection container in

00:42:26,500 --> 00:42:31,160
various ways really this is just one

00:42:29,030 --> 00:42:37,460
example and then we can use the

00:42:31,160 --> 00:42:43,310
container some rules very important once

00:42:37,460 --> 00:42:45,940
actually objects must not be aware of

00:42:43,310 --> 00:42:50,270
the container

00:42:45,940 --> 00:42:54,140
if you inject the container into your

00:42:50,270 --> 00:42:58,010
classes it is the exact same thing as

00:42:54,140 --> 00:43:00,740
using a registry right you are adding

00:42:58,010 --> 00:43:05,089
complexity because now you can't use

00:43:00,740 --> 00:43:08,150
your class without the container so your

00:43:05,089 --> 00:43:13,750
object must not be aware of the

00:43:08,150 --> 00:43:19,220
container there is some exceptions in

00:43:13,750 --> 00:43:22,339
PHP mostly for performance reasons so if

00:43:19,220 --> 00:43:24,170
I want to create my user by default the

00:43:22,339 --> 00:43:26,690
container is going to inject my station

00:43:24,170 --> 00:43:29,720
storage but let's say that I can do a

00:43:26,690 --> 00:43:31,280
bunch of things with my user object

00:43:29,720 --> 00:43:36,170
without using the session storage and

00:43:31,280 --> 00:43:40,099
the session storage is really is really

00:43:36,170 --> 00:43:45,140
slow to create in this case you might

00:43:40,099 --> 00:43:47,660
want to lazy load or two lazy create the

00:43:45,140 --> 00:43:50,630
dependency so injecting the container is

00:43:47,660 --> 00:43:52,220
one way to do that right you can check

00:43:50,630 --> 00:43:54,640
the container which is that nothing is

00:43:52,220 --> 00:43:57,230
created and the first time you need

00:43:54,640 --> 00:44:01,609
decision storage you ask the container

00:43:57,230 --> 00:44:04,640
to create the dependency right but again

00:44:01,609 --> 00:44:06,290
that that's a bad smell really and in

00:44:04,640 --> 00:44:07,880
Symphony the symphony dependency

00:44:06,290 --> 00:44:10,490
injection container that Drupal 8 is

00:44:07,880 --> 00:44:12,770
actually using we have a feature that

00:44:10,490 --> 00:44:15,230
allows you to lazy load those

00:44:12,770 --> 00:44:16,490
dependencies via proxies so it's built

00:44:15,230 --> 00:44:18,799
in I'm not going to talk about that

00:44:16,490 --> 00:44:24,079
because it too advanced but that's a

00:44:18,799 --> 00:44:26,119
possibility you can do so if your

00:44:24,079 --> 00:44:28,880
objects are not aware of the container

00:44:26,119 --> 00:44:34,130
it means that a container is able to

00:44:28,880 --> 00:44:37,390
manage any PHP objects any PHP classes

00:44:34,130 --> 00:44:39,890
the only thing is that those classes

00:44:37,390 --> 00:44:45,530
must use dependency injection of course

00:44:39,890 --> 00:44:48,200
if not there is no point right and if

00:44:45,530 --> 00:44:50,180
you have a look at a drupal version 8

00:44:48,200 --> 00:44:53,089
you will see that the dependency

00:44:50,180 --> 00:44:55,940
injection configure all the symphony

00:44:53,089 --> 00:44:59,069
objects all the Drupal ones but also

00:44:55,940 --> 00:45:01,170
some zend framework ones

00:44:59,069 --> 00:45:03,839
and the zen femoral classes were not

00:45:01,170 --> 00:45:05,420
designed to work with the symphony

00:45:03,839 --> 00:45:08,729
dependency injection container and

00:45:05,420 --> 00:45:11,190
that's not a problem because this is

00:45:08,729 --> 00:45:15,089
just about a bunch of classes with

00:45:11,190 --> 00:45:16,469
dependencies and that's all so the

00:45:15,089 --> 00:45:18,660
symphony dependency injection container

00:45:16,469 --> 00:45:23,670
is actually able to create those objects

00:45:18,660 --> 00:45:28,619
right so never inject the container into

00:45:23,670 --> 00:45:30,089
your object once more and last but not

00:45:28,619 --> 00:45:32,309
least because you know when you have a

00:45:30,089 --> 00:45:36,150
new toy you want to play with it as much

00:45:32,309 --> 00:45:39,479
as possible but it's not always a good

00:45:36,150 --> 00:45:45,209
idea so a container does not manage all

00:45:39,479 --> 00:45:47,910
your objects far from it a good rule of

00:45:45,209 --> 00:45:51,269
thumb is that a container manages global

00:45:47,910 --> 00:45:52,769
objects and if you read symphony

00:45:51,269 --> 00:45:54,930
documentation we are not talking about

00:45:52,769 --> 00:45:59,819
objects we are talking about services

00:45:54,930 --> 00:46:01,890
and a container and I like to think

00:45:59,819 --> 00:46:05,329
about the symphony dependency injection

00:46:01,890 --> 00:46:08,099
container as being a service container

00:46:05,329 --> 00:46:13,410
it's a way to manage all your global

00:46:08,099 --> 00:46:17,699
objects I don't have some example so for

00:46:13,410 --> 00:46:21,380
instance a database connection is a good

00:46:17,699 --> 00:46:23,999
example it's a global object right

00:46:21,380 --> 00:46:27,959
probably an object you need just want

00:46:23,999 --> 00:46:30,420
instance of a logger you just need one

00:46:27,959 --> 00:46:32,190
logger it's different from a single turn

00:46:30,420 --> 00:46:34,680
I'm not saying that you can only create

00:46:32,190 --> 00:46:37,259
one instead of it but the dependency

00:46:34,680 --> 00:46:41,309
injection container is only going to

00:46:37,259 --> 00:46:43,499
create one the first time you get the

00:46:41,309 --> 00:46:46,199
dependency and then is going to give you

00:46:43,499 --> 00:46:51,440
the same the same instance over and over

00:46:46,199 --> 00:46:51,440
again sorry

00:46:55,350 --> 00:47:00,430
everything is injected in symfony really

00:46:58,570 --> 00:47:03,430
so everything is using the dependency

00:47:00,430 --> 00:47:05,350
injection container really yeah it means

00:47:03,430 --> 00:47:07,060
that everything is really decoupled so

00:47:05,350 --> 00:47:09,550
it means for instance that so in

00:47:07,060 --> 00:47:13,200
Symphony we have a web propeller which

00:47:09,550 --> 00:47:16,150
is a toolbar at the bottom of your

00:47:13,200 --> 00:47:18,430
website it gives you a bunch of

00:47:16,150 --> 00:47:21,550
information about the number of requests

00:47:18,430 --> 00:47:23,440
you add the sequel request you add in

00:47:21,550 --> 00:47:27,190
your project and a bunch of other things

00:47:23,440 --> 00:47:28,750
really we have the same version the same

00:47:27,190 --> 00:47:31,360
class is the same controllers the same

00:47:28,750 --> 00:47:33,760
templates work for symphony they work

00:47:31,360 --> 00:47:35,560
for sale X another framework they also

00:47:33,760 --> 00:47:37,570
work for Drupal 8 so you're going to

00:47:35,560 --> 00:47:39,580
have the same web devel to bar we have

00:47:37,570 --> 00:47:40,930
we seen tony and for a bunch of other

00:47:39,580 --> 00:47:47,260
project just because we are using

00:47:40,930 --> 00:47:52,180
dependency injection everywhere but so

00:47:47,260 --> 00:47:57,130
but a container does not manage your

00:47:52,180 --> 00:48:00,280
model objects so a user a product blog

00:47:57,130 --> 00:48:03,370
post other things that you can have many

00:48:00,280 --> 00:48:05,230
instances off right as if you want to

00:48:03,370 --> 00:48:07,300
store a product and you want to start

00:48:05,230 --> 00:48:08,770
more than one product in the dependency

00:48:07,300 --> 00:48:14,110
injection container that's probably a

00:48:08,770 --> 00:48:16,090
bad idea it's not a global and again

00:48:14,110 --> 00:48:20,200
most of the time you don't need a

00:48:16,090 --> 00:48:24,970
container to use dependency injection so

00:48:20,200 --> 00:48:28,240
um so I dived into Drupal 8 code and

00:48:24,970 --> 00:48:31,000
here are some example on some services

00:48:28,240 --> 00:48:32,590
that you have in triple eight so Drupal

00:48:31,000 --> 00:48:34,270
8 is using the symphony dependency

00:48:32,590 --> 00:48:36,400
injection container and for the

00:48:34,270 --> 00:48:39,550
configuration it chooses yema so

00:48:36,400 --> 00:48:43,840
symphony can use xml y ml and plain PHP

00:48:39,550 --> 00:48:45,910
and drupal 8 decided to use yellow so

00:48:43,840 --> 00:48:51,250
this diverse simple example you have a

00:48:45,910 --> 00:48:55,090
JSON sir ization class and ear there is

00:48:51,250 --> 00:48:57,430
how you can configure it from Drupal so

00:48:55,090 --> 00:48:59,260
I'm just saying that it's an instance of

00:48:57,430 --> 00:49:01,540
this class there is no dependencies no

00:48:59,260 --> 00:49:04,300
arguments whatever so if you want to get

00:49:01,540 --> 00:49:08,320
this service agent

00:49:04,300 --> 00:49:10,960
and service then something is going to

00:49:08,320 --> 00:49:12,670
create an instance of Jason the JSON

00:49:10,960 --> 00:49:17,250
class without passing any arguments

00:49:12,670 --> 00:49:21,100
right probably because they are not and

00:49:17,250 --> 00:49:25,210
from this description to the code that

00:49:21,100 --> 00:49:28,330
actually creates the object we have a

00:49:25,210 --> 00:49:31,420
build pipeline somehow we have a bunch

00:49:28,330 --> 00:49:35,560
of compiler passes which means that in

00:49:31,420 --> 00:49:37,660
Drupal 8 you don't really read this file

00:49:35,560 --> 00:49:40,780
over and over again it's just about the

00:49:37,660 --> 00:49:45,190
very first request because then the

00:49:40,780 --> 00:49:49,780
container is damped as a PHP file is

00:49:45,190 --> 00:49:52,240
compared down to plain PHP so this is

00:49:49,780 --> 00:49:54,520
what is actually created behind the

00:49:52,240 --> 00:49:57,280
scene so as you can see we return a new

00:49:54,520 --> 00:49:59,770
instance of the JSON object and you can

00:49:57,280 --> 00:50:01,780
see that we are actually storing this

00:49:59,770 --> 00:50:04,330
instance somewhere which means that the

00:50:01,780 --> 00:50:07,320
second time you want to get this service

00:50:04,330 --> 00:50:10,360
you're going to have the exact same

00:50:07,320 --> 00:50:13,590
instance of this object it's not going

00:50:10,360 --> 00:50:16,090
to create a new instance of this object

00:50:13,590 --> 00:50:18,580
this is just one way of doing things you

00:50:16,090 --> 00:50:20,830
can also ask simply to create a new

00:50:18,580 --> 00:50:23,350
object every time you get the service

00:50:20,830 --> 00:50:25,930
from the container but there are exactly

00:50:23,350 --> 00:50:30,430
zero example in Drupal and zero example

00:50:25,930 --> 00:50:32,260
in symphony so in in practice it does

00:50:30,430 --> 00:50:34,870
not exist really because if you want a

00:50:32,260 --> 00:50:36,250
new instance every time probably means

00:50:34,870 --> 00:50:38,260
that it's not a global object by

00:50:36,250 --> 00:50:40,240
definition and probably means that it

00:50:38,260 --> 00:50:42,220
it's not something that you want to

00:50:40,240 --> 00:50:47,980
store or you want to use the container

00:50:42,220 --> 00:50:51,400
for a slightly more interesting example

00:50:47,980 --> 00:50:54,280
so here I have a state so the class is

00:50:51,400 --> 00:50:57,850
state and it takes one argument so this

00:50:54,280 --> 00:51:01,660
is an array and air you see the at sign

00:50:57,850 --> 00:51:04,480
at key value this is a convention saying

00:51:01,660 --> 00:51:07,390
that I want the key value service to the

00:51:04,480 --> 00:51:11,500
injected ear so it means that the state

00:51:07,390 --> 00:51:14,440
class takes a key value argument which

00:51:11,500 --> 00:51:17,170
is another service right and if we have

00:51:14,440 --> 00:51:17,770
a look at implementation I mean what is

00:51:17,170 --> 00:51:20,530
generally

00:51:17,770 --> 00:51:22,480
Bay symphony you can see that we create

00:51:20,530 --> 00:51:25,180
a new object of state and we inject so

00:51:22,480 --> 00:51:27,940
we are getting the value the instance of

00:51:25,180 --> 00:51:30,880
the key value right so in symphony all

00:51:27,940 --> 00:51:33,250
the services have a name and if you want

00:51:30,880 --> 00:51:35,790
to get a service you need to know the

00:51:33,250 --> 00:51:38,590
name and this is how you can do that I

00:51:35,790 --> 00:51:42,820
mean it's done automatically for you

00:51:38,590 --> 00:51:46,090
actually and so we also have a way to

00:51:42,820 --> 00:51:48,610
configure things so if you have a look

00:51:46,090 --> 00:51:51,070
the first argument here a person

00:51:48,610 --> 00:51:52,870
something person means that we need to

00:51:51,070 --> 00:51:54,610
replace this with the value of this

00:51:52,870 --> 00:52:02,560
parameter and this is not an object

00:51:54,610 --> 00:52:05,170
actually sees an array sorry yeah okay

00:52:02,560 --> 00:52:07,360
so when you create an instance of an

00:52:05,170 --> 00:52:10,060
object sometimes you need to configure

00:52:07,360 --> 00:52:12,280
it somehow so you need to it you can use

00:52:10,060 --> 00:52:14,650
setter injections or whatever so here

00:52:12,280 --> 00:52:16,780
this is another example the URL

00:52:14,650 --> 00:52:20,440
generator you can use to generate a URL

00:52:16,780 --> 00:52:22,600
for any route in your a Drupal 8 website

00:52:20,440 --> 00:52:24,190
so there is a class there are a bunch of

00:52:22,600 --> 00:52:26,050
argument not all of them there are

00:52:24,190 --> 00:52:27,970
potentially here and you have calls

00:52:26,050 --> 00:52:30,490
which means that what's in phone is

00:52:27,970 --> 00:52:33,250
going to do is going to create the

00:52:30,490 --> 00:52:39,970
instance of the generator and there is

00:52:33,250 --> 00:52:42,270
going to call some methods on the new

00:52:39,970 --> 00:52:45,430
instance and then return to instance and

00:52:42,270 --> 00:52:48,550
here as you can see there is a question

00:52:45,430 --> 00:52:52,390
mark so this is ad ? which is that this

00:52:48,550 --> 00:52:55,660
is an optional dependency as you can see

00:52:52,390 --> 00:52:59,830
we check that it actually exists before

00:52:55,660 --> 00:53:02,710
injecting it right not going to dive to

00:52:59,830 --> 00:53:05,860
merge into this today but we have a

00:53:02,710 --> 00:53:09,820
bunch of documentation about that we can

00:53:05,860 --> 00:53:11,800
also use factories right so air we have

00:53:09,820 --> 00:53:14,650
a connection and the connection is about

00:53:11,800 --> 00:53:18,090
to create a bunch of connections and ear

00:53:14,650 --> 00:53:22,690
this is the default one so we are using

00:53:18,090 --> 00:53:24,700
this get connection static method on the

00:53:22,690 --> 00:53:26,470
database class and we pass a default

00:53:24,700 --> 00:53:28,240
argument and if you have a look at a

00:53:26,470 --> 00:53:30,770
Drupal 8 you will see that there are

00:53:28,240 --> 00:53:32,720
also ones with with the

00:53:30,770 --> 00:53:35,180
same code accepted argument is different

00:53:32,720 --> 00:53:37,460
right so I have more than one connection

00:53:35,180 --> 00:53:40,310
so I need to use a factory and this is

00:53:37,460 --> 00:53:42,410
Heidi's actually generated so we call

00:53:40,310 --> 00:53:44,180
user func the static method and we pass

00:53:42,410 --> 00:53:46,460
the argument so there is another one

00:53:44,180 --> 00:53:48,800
which is database those slave and the

00:53:46,460 --> 00:53:50,870
arguments slave right so you can that's

00:53:48,800 --> 00:53:55,390
how you can have more than one object on

00:53:50,870 --> 00:53:55,390
the same of the same class for instance

00:53:56,590 --> 00:54:02,000
you can also use other services so here

00:54:00,260 --> 00:54:04,970
this is the same as before we are using

00:54:02,000 --> 00:54:11,150
a factory but we are using another

00:54:04,970 --> 00:54:14,060
service to create my instances right so

00:54:11,150 --> 00:54:16,130
here I am getting a service which is a

00:54:14,060 --> 00:54:19,010
factory and then I'm calling a method on

00:54:16,130 --> 00:54:31,190
this factory that is going to create the

00:54:19,010 --> 00:54:33,200
object I want yeah nobody's lost so area

00:54:31,190 --> 00:54:36,020
I'm saying okay to create the cash

00:54:33,200 --> 00:54:39,290
default service this is an instance of

00:54:36,020 --> 00:54:41,120
the cash back and interface so I don't

00:54:39,290 --> 00:54:43,700
know what kind of implementation i'm

00:54:41,120 --> 00:54:45,980
going to have but for this default

00:54:43,700 --> 00:54:48,140
argument the cash factory service is

00:54:45,980 --> 00:54:54,980
about to give you one by calling the get

00:54:48,140 --> 00:54:56,840
method right like this so is that how

00:54:54,980 --> 00:54:58,820
you were able to pass an interface which

00:54:56,840 --> 00:55:06,380
can't be instantiated because yep

00:54:58,820 --> 00:55:08,630
factory exactly yeah oh by the way the

00:55:06,380 --> 00:55:10,640
fact that we are still using class air

00:55:08,630 --> 00:55:14,030
means that when we generate the PHP code

00:55:10,640 --> 00:55:16,040
we are also generating a bunch of PHP

00:55:14,030 --> 00:55:18,380
dogs which means that you're going to

00:55:16,040 --> 00:55:21,020
have auto completion in ids like

00:55:18,380 --> 00:55:22,550
phpstorm netbeans and stuff like that so

00:55:21,020 --> 00:55:25,970
that's why it's kind of important to

00:55:22,550 --> 00:55:27,290
actually have the right class here you

00:55:25,970 --> 00:55:29,990
can put whatever you want you can put

00:55:27,290 --> 00:55:35,650
fubar but it's not that interesting for

00:55:29,990 --> 00:55:38,360
auto completion ok you can have aliases

00:55:35,650 --> 00:55:40,040
so it's just a way to link one service

00:55:38,360 --> 00:55:42,020
to another one that's a great way for

00:55:40,040 --> 00:55:44,210
instance you have a bunch of different

00:55:42,020 --> 00:55:46,580
options you have a bunch of

00:55:44,210 --> 00:55:48,800
storage configuration storage but the

00:55:46,580 --> 00:55:53,359
default one is going to be this one

00:55:48,800 --> 00:55:56,690
right so this so in the code you want to

00:55:53,359 --> 00:55:59,410
use only this config da storage service

00:55:56,690 --> 00:56:01,670
but behind the scene it's really easy to

00:55:59,410 --> 00:56:06,470
change the implementation but just

00:56:01,670 --> 00:56:08,960
changing the aliens right I'm running

00:56:06,470 --> 00:56:10,760
out of time you're really so this so

00:56:08,960 --> 00:56:14,930
these lights are not really important

00:56:10,760 --> 00:56:17,300
but you can also make some services

00:56:14,930 --> 00:56:19,760
private it's not the case in Drupal

00:56:17,300 --> 00:56:21,470
actually but I think does should be

00:56:19,760 --> 00:56:24,440
private which means that you can't get

00:56:21,470 --> 00:56:26,720
them and that's pretty important because

00:56:24,440 --> 00:56:29,270
here I really want the developers to use

00:56:26,720 --> 00:56:32,390
the conflicted storage service and

00:56:29,270 --> 00:56:36,050
behind the scene Google is going to use

00:56:32,390 --> 00:56:38,660
one of the many different ones so you

00:56:36,050 --> 00:56:42,170
don't so saying public force means that

00:56:38,660 --> 00:56:45,020
you can't get those services right and

00:56:42,170 --> 00:56:46,580
actually if you are doing that I think a

00:56:45,020 --> 00:56:49,510
bunch of services should be private in

00:56:46,580 --> 00:56:53,150
Drupal actually Symphony is also able to

00:56:49,510 --> 00:56:58,780
optimize the container that is done as a

00:56:53,150 --> 00:57:01,010
plane PHP file you're tired as well

00:56:58,780 --> 00:57:04,220
there are so many things I can talk

00:57:01,010 --> 00:57:05,960
about really so this one abstract true

00:57:04,220 --> 00:57:08,270
means that this is something that

00:57:05,960 --> 00:57:11,000
container the trade is naturally a

00:57:08,270 --> 00:57:13,280
service this is just a pattern that you

00:57:11,000 --> 00:57:15,050
want to reuse a bunch of times right so

00:57:13,280 --> 00:57:18,200
it's abstract in the sense that you

00:57:15,050 --> 00:57:19,940
can't really get this service but then

00:57:18,200 --> 00:57:22,280
you can say okay the logo factory the

00:57:19,940 --> 00:57:25,099
parent is container tread so it's going

00:57:22,280 --> 00:57:27,560
to actually import all the configuration

00:57:25,099 --> 00:57:30,950
here they are so basically it's going to

00:57:27,560 --> 00:57:32,270
call the set container here right so if

00:57:30,950 --> 00:57:35,180
you have a look at the implementation it

00:57:32,270 --> 00:57:36,710
creates the local channel factory this

00:57:35,180 --> 00:57:38,420
is the class you have the first line and

00:57:36,710 --> 00:57:41,089
because it in ur it's from container

00:57:38,420 --> 00:57:45,800
trade it calls that container and it

00:57:41,089 --> 00:57:47,750
ejects the container itself so in Drupal

00:57:45,800 --> 00:57:50,750
there are many ways you can use the

00:57:47,750 --> 00:57:53,000
dependency injection container so there

00:57:50,750 --> 00:57:55,030
is this Drupal class and then you can

00:57:53,000 --> 00:57:57,520
say service and give the name

00:57:55,030 --> 00:57:59,860
returns service you want there are some

00:57:57,520 --> 00:58:03,880
shortcuts for some very important

00:57:59,860 --> 00:58:07,060
services last one is actually same as

00:58:03,880 --> 00:58:12,270
the settlement but whenever you are

00:58:07,060 --> 00:58:14,050
using those methods feel bad right

00:58:12,270 --> 00:58:17,680
because it's not using dependency

00:58:14,050 --> 00:58:19,480
injection anymore so it's mostly for all

00:58:17,680 --> 00:58:21,400
the procedural code that is still

00:58:19,480 --> 00:58:24,130
interpolate so not everything is going

00:58:21,400 --> 00:58:26,710
to be migrated to objects at some point

00:58:24,130 --> 00:58:28,630
you might need something and you are not

00:58:26,710 --> 00:58:30,940
in an object so you can't really inject

00:58:28,630 --> 00:58:33,940
the dependencies you need then you can

00:58:30,940 --> 00:58:40,900
use this but if you are using this in a

00:58:33,940 --> 00:58:44,380
class mmm that's a no-go really so at

00:58:40,900 --> 00:58:48,160
some point someone need to bootstrap and

00:58:44,380 --> 00:58:50,560
look at the container right at some

00:58:48,160 --> 00:58:54,910
point someone need to say drupal service

00:58:50,560 --> 00:58:57,160
something your rights if not it's not

00:58:54,910 --> 00:58:59,800
going to work so that's done by drupal

00:58:57,160 --> 00:59:01,900
corner boot and that's where the

00:58:59,800 --> 00:59:03,730
container is actually created that's

00:59:01,900 --> 00:59:06,100
where it is dumped as a plain PHP file

00:59:03,730 --> 00:59:08,350
and that's where we get the colonel and

00:59:06,100 --> 00:59:09,760
we under a request so if you want to

00:59:08,350 --> 00:59:11,050
learn more about how it works behind the

00:59:09,760 --> 00:59:16,780
scene you can have a look at the put

00:59:11,050 --> 00:59:19,390
method of triple colonel okay i'm not

00:59:16,780 --> 00:59:21,910
going to talk about that so some

00:59:19,390 --> 00:59:24,630
advanced topic have not talked about

00:59:21,910 --> 00:59:27,520
compiler pass these tags lazy services

00:59:24,630 --> 00:59:30,430
that's really advanced topics you don't

00:59:27,520 --> 00:59:31,990
really need to dig into now if you're

00:59:30,430 --> 00:59:33,640
not familiar with dependency injection

00:59:31,990 --> 00:59:35,410
in the container we have plenty of

00:59:33,640 --> 00:59:36,910
documentation so there's just a link

00:59:35,410 --> 00:59:41,230
where you can go to get more information

00:59:36,910 --> 00:59:43,530
about that and I think that's all for

00:59:41,230 --> 00:59:43,530
today

00:59:56,709 --> 01:00:02,079

YouTube URL: https://www.youtube.com/watch?v=U6hq4qNT4_0


