Title: DrupalCon Austin 2014: LAYOUT DESIGN PATTERNS
Publication date: 2014-06-04
Playlist: DrupalCon Austin - June 2014
Description: 
	Speakers: pixelwhip
Most current CSS methodologies, such as SMACSS or BEM, revolve around one core concept--components must look and behave the same no matter where they are placed in a layout. Despite layouts being a fundamental aspect of responsive design, more attention is paid to components than layouts. In this session, we'll focus on reusable solutions to common layout problems by beginning with foundation CSS layout concepts and building up to specific techniques for implementing complex layouts in Drupal.

TOPICS INCLUDE:

CSS

Naming conventions
Isolation vs Float
Intrinsic Ratios
GRIDS

Semantic grid systems
Asymmetric vs Symmetric grids
DRUPAL THEMING

Page layout vs the System Block
Creating custom layouts for Panels and Display Suite
You will come away with; a deeper understanding of CSS layout models; what to look for when choosing the most appropriate grid framework for a project; techniques for creating reusable layouts in Drupal themes. All of which will enable you to solve any layout problem with confidence.

Slides: http://pixelwhip.github.io/layout-design-patterns

John Ferris is Lead Front-end Developer at Aten Design Group. He has implemented many complex responsive layouts for clients such as wri.org and cpr.org. He has spoken at past conferences on topics such as writing maintainable CSS in Drupal and Photoshop best practices for web designers.
Captions: 
	00:00:00,000 --> 00:00:09,120
okay can everyone hear me all right yes

00:00:05,100 --> 00:00:13,469
no cool all right I'm going to get

00:00:09,120 --> 00:00:16,770
started this is layout design patterns

00:00:13,469 --> 00:00:24,320
and my name is Jon Farriss you can find

00:00:16,770 --> 00:00:28,470
me on Twitter at pixel underscore whip I

00:00:24,320 --> 00:00:30,529
work for at Design Group design strategy

00:00:28,470 --> 00:00:35,030
and development shop in Denver Colorado

00:00:30,529 --> 00:00:37,050
and we do a lot of work with

00:00:35,030 --> 00:00:41,420
organizations doing good work around the

00:00:37,050 --> 00:00:47,420
world a lot of these organizations are

00:00:41,420 --> 00:00:51,899
fairly large they have a lot of content

00:00:47,420 --> 00:00:54,719
a lot of them are sharing reports and

00:00:51,899 --> 00:00:57,690
data different agencies around the world

00:00:54,719 --> 00:01:01,559
and so the sites that we typically work

00:00:57,690 --> 00:01:05,820
on are fairly complex rich in content

00:01:01,559 --> 00:01:09,390
like reports with related graphs we do a

00:01:05,820 --> 00:01:13,830
lot of mapping a lot of stuff like that

00:01:09,390 --> 00:01:17,610
and our sites all the sites we work on

00:01:13,830 --> 00:01:20,280
our responsive so with a lot of content

00:01:17,610 --> 00:01:24,689
and doing responsive design we end up

00:01:20,280 --> 00:01:27,900
with usually some pretty complex layout

00:01:24,689 --> 00:01:30,990
challenges a lot of problems to solve so

00:01:27,900 --> 00:01:34,650
I spent a lot of my day trying to figure

00:01:30,990 --> 00:01:36,360
out how to get you know content in the

00:01:34,650 --> 00:01:40,259
right place on the page so it's still

00:01:36,360 --> 00:01:41,670
readable and usable so it's a lot of

00:01:40,259 --> 00:01:47,820
thick of time about how things are going

00:01:41,670 --> 00:01:51,600
to rearrange and whatnot and as I'm

00:01:47,820 --> 00:01:55,649
solving these different problems day to

00:01:51,600 --> 00:02:00,240
day I find myself you know attacking the

00:01:55,649 --> 00:02:01,890
same problem over and over just give you

00:02:00,240 --> 00:02:08,879
an example this is a site we worked on

00:02:01,890 --> 00:02:11,520
for a colorado public radio i guess in

00:02:08,879 --> 00:02:14,390
its simplest form there's i guess what

00:02:11,520 --> 00:02:17,010
you could call a sidebar

00:02:14,390 --> 00:02:21,360
along the right-hand side and then main

00:02:17,010 --> 00:02:23,580
content but really when you look at this

00:02:21,360 --> 00:02:29,370
it's just you know it's just two columns

00:02:23,580 --> 00:02:33,270
of content and again when we look at the

00:02:29,370 --> 00:02:36,360
smaller pieces we have this kind of

00:02:33,270 --> 00:02:39,750
marquee at the top it has navigation it

00:02:36,360 --> 00:02:42,000
changes the story that's two columns we

00:02:39,750 --> 00:02:47,010
have the latest news and a featured news

00:02:42,000 --> 00:02:49,110
story two columns again and these

00:02:47,010 --> 00:02:51,390
problems are typically recursive so we

00:02:49,110 --> 00:02:54,870
have within that navigation there's two

00:02:51,390 --> 00:02:58,110
columns along the right hand rail we

00:02:54,870 --> 00:03:01,590
have it's called an on-air block it

00:02:58,110 --> 00:03:03,780
shows like whatever is currently playing

00:03:01,590 --> 00:03:08,310
on one of their three different radio

00:03:03,780 --> 00:03:10,410
stations and yeah whoever the host is at

00:03:08,310 --> 00:03:13,380
the time what's on their playing or what

00:03:10,410 --> 00:03:15,960
what's showed their hosting again two

00:03:13,380 --> 00:03:20,850
columns so it's the same problem over

00:03:15,960 --> 00:03:25,260
and over which is in itself a design

00:03:20,850 --> 00:03:27,930
pattern and all a design pattern is is

00:03:25,260 --> 00:03:35,120
common solutions to reoccurring problems

00:03:27,930 --> 00:03:38,010
within a given context the idea itself

00:03:35,120 --> 00:03:40,170
didn't come from computer science or

00:03:38,010 --> 00:03:47,640
graphic design it actually came from

00:03:40,170 --> 00:03:50,459
architecture an architect and professor

00:03:47,640 --> 00:03:54,959
at Berkeley University and and

00:03:50,459 --> 00:04:00,030
Christopher Alexander in the 70s came up

00:03:54,959 --> 00:04:03,150
with this theory that a lot of the great

00:04:00,030 --> 00:04:04,920
places in the world places that you know

00:04:03,150 --> 00:04:07,680
you feel alive in that you want to live

00:04:04,920 --> 00:04:09,180
in you want to be in at those places

00:04:07,680 --> 00:04:11,810
weren't necessarily designed by

00:04:09,180 --> 00:04:15,090
architects they are probably designed by

00:04:11,810 --> 00:04:18,780
you know farmer who built his barn or

00:04:15,090 --> 00:04:20,609
built his house not a classically

00:04:18,780 --> 00:04:24,560
trained architect you just built it out

00:04:20,609 --> 00:04:29,720
of these reusable patterns

00:04:24,560 --> 00:04:32,690
kind of like rules of thumb and so 1979

00:04:29,720 --> 00:04:34,550
he published this book the timeless way

00:04:32,690 --> 00:04:36,590
building that described this theory and

00:04:34,550 --> 00:04:38,419
if you ever get your hands on one of

00:04:36,590 --> 00:04:41,690
these books there I think they're pretty

00:04:38,419 --> 00:04:43,669
fascinating reads the timeless way of

00:04:41,690 --> 00:04:47,290
building describes this theory itself

00:04:43,669 --> 00:04:49,669
and pattern language is kind of a

00:04:47,290 --> 00:04:51,560
complementary to that and which it

00:04:49,669 --> 00:04:53,889
describes actual like individual

00:04:51,560 --> 00:04:56,480
patterns for solving these problems like

00:04:53,889 --> 00:04:58,190
start it starts on a grand scale like

00:04:56,480 --> 00:05:00,139
this is how we deal with problems on a

00:04:58,190 --> 00:05:01,880
region you know like what's their

00:05:00,139 --> 00:05:04,010
appropriate size for a city how far

00:05:01,880 --> 00:05:07,700
should it be from another city how many

00:05:04,010 --> 00:05:12,110
towns should be in between all the way

00:05:07,700 --> 00:05:13,910
down recursively down to like where do

00:05:12,110 --> 00:05:17,180
you put the lights in your kitchen what

00:05:13,910 --> 00:05:20,000
do you hang on your walls so find a lot

00:05:17,180 --> 00:05:24,100
of similarities when i'm doing layout

00:05:20,000 --> 00:05:28,789
design that recursive nature of things

00:05:24,100 --> 00:05:30,610
in 1994 this is probably where most

00:05:28,789 --> 00:05:34,789
people have heard about design patterns

00:05:30,610 --> 00:05:39,200
this theory was applied to computer

00:05:34,789 --> 00:05:45,430
science by for developers in Silicon

00:05:39,200 --> 00:05:51,350
Valley all about how to design software

00:05:45,430 --> 00:05:54,710
using object oriented programming again

00:05:51,350 --> 00:05:56,990
it was applied to user interfaces

00:05:54,710 --> 00:06:01,220
there's a pretty cool site unfortunately

00:05:56,990 --> 00:06:03,800
it's it's pretty outdated now that UI

00:06:01,220 --> 00:06:07,610
patterns dot-com I believe I don't think

00:06:03,800 --> 00:06:10,430
its dorg but it describes these problems

00:06:07,610 --> 00:06:14,150
as they relate to user interfaces you

00:06:10,430 --> 00:06:15,620
know like if you have a breadcrumb what

00:06:14,150 --> 00:06:17,450
problem are you solving with the

00:06:15,620 --> 00:06:19,400
breadcrumb you know it doesn't matter

00:06:17,450 --> 00:06:21,289
what it looks like or anything it's

00:06:19,400 --> 00:06:27,020
about the purpose of it and the problem

00:06:21,289 --> 00:06:30,500
in its solving Luke Wroblewski roads a

00:06:27,020 --> 00:06:33,500
blog post about multi-device layout

00:06:30,500 --> 00:06:35,810
patterns which is layout as it applies

00:06:33,500 --> 00:06:38,560
to you know your tablet your phone how

00:06:35,810 --> 00:06:42,470
it breaks down a different screen so

00:06:38,560 --> 00:06:44,720
Brad Frost wrote about it responsive

00:06:42,470 --> 00:06:49,820
navigation patterns these are patterns

00:06:44,720 --> 00:06:51,890
specific to you know how do you deal

00:06:49,820 --> 00:06:54,500
with complex navigations on a small

00:06:51,890 --> 00:06:57,110
screen and like what the different

00:06:54,500 --> 00:06:59,780
options are if you haven't read either

00:06:57,110 --> 00:07:01,130
those definitely go check them out but

00:06:59,780 --> 00:07:04,640
today we're we're going to talk about

00:07:01,130 --> 00:07:09,110
just lay out in general and sort of the

00:07:04,640 --> 00:07:12,680
more fundamental concepts I think of CSS

00:07:09,110 --> 00:07:16,400
and how we can solve these problems so

00:07:12,680 --> 00:07:21,170
what is the layout layout provides a

00:07:16,400 --> 00:07:24,440
structure to your screen essentially

00:07:21,170 --> 00:07:27,230
what it is is a bunch of containers that

00:07:24,440 --> 00:07:28,790
you put things in imagine a lot of you

00:07:27,230 --> 00:07:30,110
were probably in John albums session

00:07:28,790 --> 00:07:32,870
before this he's talking about

00:07:30,110 --> 00:07:37,490
components layout to where you put your

00:07:32,870 --> 00:07:40,730
components again layouts are recursive

00:07:37,490 --> 00:07:42,200
you have layouts within layouts you know

00:07:40,730 --> 00:07:44,930
here we have the overall page structure

00:07:42,200 --> 00:07:47,090
of the layout inside that you probably

00:07:44,930 --> 00:07:48,860
have a node if your nodes complex it has

00:07:47,090 --> 00:07:52,570
layout it might have its own sidebar

00:07:48,860 --> 00:07:55,070
header image off to the side whatever

00:07:52,570 --> 00:07:57,710
but it's all defined by the mark-up of

00:07:55,070 --> 00:08:01,130
the page so the order your markup is

00:07:57,710 --> 00:08:04,640
super important what elements are next

00:08:01,130 --> 00:08:08,270
to each other is important and we kind

00:08:04,640 --> 00:08:11,480
of manipulate it with CSS these are like

00:08:08,270 --> 00:08:13,760
all the CSS properties there are these

00:08:11,480 --> 00:08:16,850
are the main ones that deal with layout

00:08:13,760 --> 00:08:22,850
itself so when you're creating your

00:08:16,850 --> 00:08:25,070
layouts and CSS I find it easy to

00:08:22,850 --> 00:08:27,260
organize things if I keep these

00:08:25,070 --> 00:08:31,040
properties kind of bundled together and

00:08:27,260 --> 00:08:33,289
not intermixed with like your typography

00:08:31,040 --> 00:08:36,320
your font colors and background colors

00:08:33,289 --> 00:08:38,750
or border colors key border width in

00:08:36,320 --> 00:08:42,020
here because that does affect layout but

00:08:38,750 --> 00:08:44,349
your border style and bored of color

00:08:42,020 --> 00:08:44,349
don't

00:08:44,570 --> 00:08:53,600
so let's let's look at some actual

00:08:47,310 --> 00:08:56,550
patterns just start off super simple and

00:08:53,600 --> 00:09:00,120
one that called constrained elements and

00:08:56,550 --> 00:09:01,680
again these patterns like I would love

00:09:00,120 --> 00:09:04,860
to actually if anyone's interested in

00:09:01,680 --> 00:09:05,850
this stuff sit and talk and collaborate

00:09:04,860 --> 00:09:09,240
on some of this stuff and actually

00:09:05,850 --> 00:09:11,610
document it but everything you'll see

00:09:09,240 --> 00:09:13,970
here is just stuff that I've found in my

00:09:11,610 --> 00:09:16,320
day-to-day working stuff that I'm doing

00:09:13,970 --> 00:09:19,260
over and over again so I'd love to chat

00:09:16,320 --> 00:09:22,050
about it afterwards but so constrained

00:09:19,260 --> 00:09:24,560
elements give an element a defined width

00:09:22,050 --> 00:09:27,149
to prevent it from expanding too wide

00:09:24,560 --> 00:09:29,550
it's super simple it's it's one

00:09:27,149 --> 00:09:35,149
properties max width or width or

00:09:29,550 --> 00:09:37,890
whatever so here we have just super long

00:09:35,149 --> 00:09:40,790
bit of text measures a little bit too

00:09:37,890 --> 00:09:45,870
long for for it to be easily readable

00:09:40,790 --> 00:09:48,230
simple solution just add like a max

00:09:45,870 --> 00:09:52,110
width to it so it doesn't get too wide

00:09:48,230 --> 00:09:55,380
so that's pretty straightforward here's

00:09:52,110 --> 00:10:00,000
another example of the same problem this

00:09:55,380 --> 00:10:04,410
is a site that kenwood worth our vp of

00:10:00,000 --> 00:10:07,380
design just did for create upstate which

00:10:04,410 --> 00:10:11,459
was a design conference up in Syracuse

00:10:07,380 --> 00:10:13,890
New York and using the same the same

00:10:11,459 --> 00:10:17,820
constrained pattern we typically use a

00:10:13,890 --> 00:10:20,399
class like it's the L with a dash dash

00:10:17,820 --> 00:10:23,550
is a naming convention we use kind of

00:10:20,399 --> 00:10:25,350
came from smacks but this class is

00:10:23,550 --> 00:10:28,829
applied to each of these like horizontal

00:10:25,350 --> 00:10:30,690
regions to keep all that content from

00:10:28,829 --> 00:10:33,180
spilling out and bleeding all the way to

00:10:30,690 --> 00:10:36,570
the edge of the page so if we wrap it

00:10:33,180 --> 00:10:39,300
and you know some some outer div or

00:10:36,570 --> 00:10:41,279
whatever we can apply like background or

00:10:39,300 --> 00:10:44,399
color to let it spill out but our

00:10:41,279 --> 00:10:46,860
content is constrained in the middle so

00:10:44,399 --> 00:10:49,339
this is something we use all over the

00:10:46,860 --> 00:10:49,339
place actually

00:10:49,880 --> 00:10:56,510
this leads us to our next pattern which

00:10:52,010 --> 00:10:58,310
is rows of relevant content divide the

00:10:56,510 --> 00:11:01,040
screen in two rows of relevant content

00:10:58,310 --> 00:11:02,810
such that the hierarchy and content

00:11:01,040 --> 00:11:06,530
relationships are preserved across

00:11:02,810 --> 00:11:11,170
different screen sizes back to that same

00:11:06,530 --> 00:11:15,470
example we've divided the page up into

00:11:11,170 --> 00:11:19,310
horizontal rows so that when you do

00:11:15,470 --> 00:11:21,290
shrink it down on a mobile site that all

00:11:19,310 --> 00:11:22,670
your content in that row that's relevant

00:11:21,290 --> 00:11:27,410
to each other you know the time is

00:11:22,670 --> 00:11:30,200
relevant to the location and all that

00:11:27,410 --> 00:11:32,870
kind of maintains its relationship down

00:11:30,200 --> 00:11:38,600
and so like more of a linear format on a

00:11:32,870 --> 00:11:41,720
mobile phone using the same concept on

00:11:38,600 --> 00:11:47,240
this is a begin the colorado public

00:11:41,720 --> 00:11:49,640
radio site one thing you know if you

00:11:47,240 --> 00:11:52,670
look on the right hand side it looks

00:11:49,640 --> 00:11:54,860
like there's just one long side bar down

00:11:52,670 --> 00:12:02,480
the side and then one long piece of main

00:11:54,860 --> 00:12:04,940
content what we realized is that if that

00:12:02,480 --> 00:12:07,310
were one side bar and we just did the

00:12:04,940 --> 00:12:10,100
simple wrap that around at the bottom

00:12:07,310 --> 00:12:11,900
all of a sudden on the mobile phone the

00:12:10,100 --> 00:12:14,750
ad was at the bottom of the page and

00:12:11,900 --> 00:12:17,540
sponsors don't want to buy ads that are

00:12:14,750 --> 00:12:19,970
at the bottom of the page so what we

00:12:17,540 --> 00:12:24,380
ended up doing is splitting that up into

00:12:19,970 --> 00:12:27,770
horizontal rows so that you know the ad

00:12:24,380 --> 00:12:29,570
could wrap right underneath the main

00:12:27,770 --> 00:12:31,100
featured image we get the on-air block

00:12:29,570 --> 00:12:34,580
up there which is important to a lot of

00:12:31,100 --> 00:12:36,230
people and that kind of hierarchy of the

00:12:34,580 --> 00:12:42,860
page the important stuff is at the top

00:12:36,230 --> 00:12:45,470
is maintained this next one layout

00:12:42,860 --> 00:12:48,890
modifiers has a lot to do with naming

00:12:45,470 --> 00:12:50,720
conventions so following a naming

00:12:48,890 --> 00:12:53,690
convention for class for classes

00:12:50,720 --> 00:12:59,589
intended to modify layout so what does

00:12:53,690 --> 00:13:02,070
that mean here's a simple layout it's a

00:12:59,589 --> 00:13:05,850
one container

00:13:02,070 --> 00:13:09,800
we have just three dudes in it primary

00:13:05,850 --> 00:13:13,080
secondary and tertiary and depending on

00:13:09,800 --> 00:13:15,360
what class we apply to that outer

00:13:13,080 --> 00:13:21,090
wrapper it's going to adjust the whole

00:13:15,360 --> 00:13:24,660
layout so we'd see we can do three

00:13:21,090 --> 00:13:29,010
columns change the class and we can do

00:13:24,660 --> 00:13:32,040
the sidebars after we can flip it over

00:13:29,010 --> 00:13:35,820
but the sidebars before I'll just with

00:13:32,040 --> 00:13:37,500
changing this one class or do a triptych

00:13:35,820 --> 00:13:40,350
with the main content in the middle and

00:13:37,500 --> 00:13:47,550
each of the tertiary and secondary

00:13:40,350 --> 00:13:50,820
content to either side so that L dash

00:13:47,550 --> 00:13:53,670
dash naming convention that's something

00:13:50,820 --> 00:13:57,120
we use a lot on like very generic

00:13:53,670 --> 00:14:01,830
layouts that we can reuse a like

00:13:57,120 --> 00:14:06,630
throughout the site I find like generic

00:14:01,830 --> 00:14:10,200
layout doesn't always apply to to every

00:14:06,630 --> 00:14:12,960
context so sometimes we have you know an

00:14:10,200 --> 00:14:16,200
article note or an event or project or

00:14:12,960 --> 00:14:19,710
whatever that has kind of its own

00:14:16,200 --> 00:14:21,240
regions in it so apply the same general

00:14:19,710 --> 00:14:23,640
solution using a slightly different

00:14:21,240 --> 00:14:25,980
naming convention in which we use

00:14:23,640 --> 00:14:28,770
whatever the component is so in this

00:14:25,980 --> 00:14:32,910
case it's article component with the

00:14:28,770 --> 00:14:35,610
teaser and style the each of the regions

00:14:32,910 --> 00:14:37,880
underneath that and you probably notice

00:14:35,610 --> 00:14:40,920
that I'm using the direct child selector

00:14:37,880 --> 00:14:43,050
that's very intentional it's like I said

00:14:40,920 --> 00:14:47,220
layouts are recursive if you have

00:14:43,050 --> 00:14:48,630
something like say a sidebar and you're

00:14:47,220 --> 00:14:49,410
using that throughout your page you

00:14:48,630 --> 00:14:53,760
probably have a lot of different

00:14:49,410 --> 00:14:55,980
sidebars you don't want styles from like

00:14:53,760 --> 00:14:58,770
a macro lay out a large layout leading

00:14:55,980 --> 00:15:02,100
down into those micro layouts so this

00:14:58,770 --> 00:15:04,860
specificity is very intentional in that

00:15:02,100 --> 00:15:08,000
it it actually keeps styles from

00:15:04,860 --> 00:15:08,000
bleeding into other styles

00:15:09,840 --> 00:15:17,670
so another one that I use quite often

00:15:12,980 --> 00:15:19,410
call the gutter Pole and that's position

00:15:17,670 --> 00:15:23,160
in element by pulling it into the gutter

00:15:19,410 --> 00:15:26,240
established by its parent container so

00:15:23,160 --> 00:15:28,500
here's an example of another article

00:15:26,240 --> 00:15:30,420
just have a bunch of paragraphs with the

00:15:28,500 --> 00:15:33,540
block quote in it and if we want to pull

00:15:30,420 --> 00:15:38,490
that that blockquote out off to the side

00:15:33,540 --> 00:15:39,930
to emphasize it or whatever first give

00:15:38,490 --> 00:15:43,200
it a defined wit so it's not just

00:15:39,930 --> 00:15:47,310
filling the whole area float it to the

00:15:43,200 --> 00:15:49,620
left and then add some negative left

00:15:47,310 --> 00:15:51,810
margin to pull it off into the side you

00:15:49,620 --> 00:15:54,120
notice that when you float something all

00:15:51,810 --> 00:15:57,330
that text kind of collapses out of it

00:15:54,120 --> 00:16:00,450
takes it out of the flow and just pulls

00:15:57,330 --> 00:16:04,050
it along with it so we can use that to

00:16:00,450 --> 00:16:08,160
our advantage on say like an article

00:16:04,050 --> 00:16:11,190
layout or something this is this is like

00:16:08,160 --> 00:16:13,170
a you know a teaser for a book and this

00:16:11,190 --> 00:16:17,190
is what you'd see you know on the mobile

00:16:13,170 --> 00:16:19,620
and your mobile device where you don't

00:16:17,190 --> 00:16:22,260
want the text squishing around the image

00:16:19,620 --> 00:16:27,420
of the book or whatever so if we want to

00:16:22,260 --> 00:16:31,410
apply that same principle to this first

00:16:27,420 --> 00:16:33,570
we'll add some padding to the the outer

00:16:31,410 --> 00:16:38,310
container itself to kind of create this

00:16:33,570 --> 00:16:41,520
gutter then we'll float the image off to

00:16:38,310 --> 00:16:43,710
the left to give it a width and then

00:16:41,520 --> 00:16:47,790
pull that off and decide and then you've

00:16:43,710 --> 00:16:51,060
created this thus gutter all of the the

00:16:47,790 --> 00:16:53,400
content is now going to left a line even

00:16:51,060 --> 00:16:55,170
if it because we're pulling it into that

00:16:53,400 --> 00:16:59,160
gutter and we've set padding on the

00:16:55,170 --> 00:17:01,290
container that now any of the elements

00:16:59,160 --> 00:17:03,570
say there's our summary gets super long

00:17:01,290 --> 00:17:05,100
that's not going to wrap underneath our

00:17:03,570 --> 00:17:09,390
cover it's just going to continue down

00:17:05,100 --> 00:17:15,480
and align nicely so that that gets used

00:17:09,390 --> 00:17:17,130
a lot you can do say if if like your

00:17:15,480 --> 00:17:20,280
markup if you wanted the title to come

00:17:17,130 --> 00:17:23,180
before the image and the image so the

00:17:20,280 --> 00:17:25,220
image was in the middle but on

00:17:23,180 --> 00:17:27,670
large larger screen like this you still

00:17:25,220 --> 00:17:30,260
want it to the side you could actually

00:17:27,670 --> 00:17:31,640
after you pull that out in fact you

00:17:30,260 --> 00:17:33,620
don't even need to pull it out but you

00:17:31,640 --> 00:17:35,690
could absolutely position it you just

00:17:33,620 --> 00:17:40,310
need to make sure that you set like a

00:17:35,690 --> 00:17:45,710
min min height on your content based on

00:17:40,310 --> 00:17:49,120
how big your image is going to be so

00:17:45,710 --> 00:17:52,070
that's good or pull another way we can

00:17:49,120 --> 00:17:53,930
exploit the margins I guess one thing I

00:17:52,070 --> 00:17:58,670
did want to point or did want to point

00:17:53,930 --> 00:18:02,810
out is that an advantage of this you can

00:17:58,670 --> 00:18:05,090
do it completely fluid but one advantage

00:18:02,810 --> 00:18:08,630
to doing it this way is that you can

00:18:05,090 --> 00:18:12,170
have a fixed width gutter and the rest

00:18:08,630 --> 00:18:14,990
can be fluid so your images on the side

00:18:12,170 --> 00:18:17,720
it's not going to get awkwardly large or

00:18:14,990 --> 00:18:23,660
small but you can still expand and

00:18:17,720 --> 00:18:25,850
contract that so margin overflow allow

00:18:23,660 --> 00:18:28,010
an element to overflow its container by

00:18:25,850 --> 00:18:33,380
applying negative margins to both the

00:18:28,010 --> 00:18:36,440
left and right sides so this is a just

00:18:33,380 --> 00:18:39,470
an example block that you might have on

00:18:36,440 --> 00:18:44,240
your site we have a block title the big

00:18:39,470 --> 00:18:47,090
red thing if we apply negative margins

00:18:44,240 --> 00:18:51,530
to the outside of that that'll actually

00:18:47,090 --> 00:18:53,990
grow the width of the element so we can

00:18:51,530 --> 00:18:58,460
kind of exploit that and create this

00:18:53,990 --> 00:19:01,010
kind of wrap in a round effect that you

00:18:58,460 --> 00:19:05,840
see here another place that this is

00:19:01,010 --> 00:19:08,960
useful say we have three columns of text

00:19:05,840 --> 00:19:14,180
I don't know hope you guys can see those

00:19:08,960 --> 00:19:16,820
guys on the utter the outer sides so we

00:19:14,180 --> 00:19:18,560
have these three elements all of them

00:19:16,820 --> 00:19:20,990
have a width all of them have padding

00:19:18,560 --> 00:19:24,770
they're all floated just set to like

00:19:20,990 --> 00:19:27,530
thirty three percent of the width to

00:19:24,770 --> 00:19:30,380
create three columns if we add the

00:19:27,530 --> 00:19:32,570
negative margins to each side that'll

00:19:30,380 --> 00:19:34,740
pull them out and kind of compensate for

00:19:32,570 --> 00:19:39,480
those those outer

00:19:34,740 --> 00:19:42,260
that outer padding advantage this you

00:19:39,480 --> 00:19:44,580
don't have to there's a little bit more

00:19:42,260 --> 00:19:46,170
cross browser support because you don't

00:19:44,580 --> 00:19:51,540
have to do like into child or anything

00:19:46,170 --> 00:19:53,280
like that or like first child last child

00:19:51,540 --> 00:19:58,950
first child is pretty well supported but

00:19:53,280 --> 00:20:03,590
less child is not supported and I ate so

00:19:58,950 --> 00:20:03,590
it kind of compensates for for that

00:20:04,400 --> 00:20:09,870
another interesting one is intrinsic

00:20:07,080 --> 00:20:11,820
ratios so this one's kind of hard to

00:20:09,870 --> 00:20:14,690
explain but when the aspect ratio of an

00:20:11,820 --> 00:20:17,340
element is known the target sizes not

00:20:14,690 --> 00:20:20,809
use padding and absolute positioning to

00:20:17,340 --> 00:20:23,429
preserve the aspect ratio of an element

00:20:20,809 --> 00:20:28,880
so this is better explain with an

00:20:23,429 --> 00:20:28,880
example so we have YouTube video here

00:20:29,480 --> 00:20:36,290
youtube videos when you embed them

00:20:31,559 --> 00:20:38,850
typically iframes when a browser

00:20:36,290 --> 00:20:41,429
interprets an iframe it doesn't

00:20:38,850 --> 00:20:44,550
necessarily know the aspect ratio of it

00:20:41,429 --> 00:20:49,200
whereas like if you if you add an image

00:20:44,550 --> 00:20:51,000
to browser the browser knows based on

00:20:49,200 --> 00:20:53,610
the file like what the height and width

00:20:51,000 --> 00:20:56,070
is and it can figure out how to properly

00:20:53,610 --> 00:20:59,040
scale things if you do like max width or

00:20:56,070 --> 00:21:03,090
whatever not so much with them with an

00:20:59,040 --> 00:21:05,220
iframe so what happens if the column

00:21:03,090 --> 00:21:10,880
that are our video is in gets shrunk

00:21:05,220 --> 00:21:13,800
down our video luckily doesn't like

00:21:10,880 --> 00:21:18,540
squeeze or scale awkwardly but it does

00:21:13,800 --> 00:21:23,400
crop off the edges so we can fix that by

00:21:18,540 --> 00:21:26,550
exploiting the fact that if you set top

00:21:23,400 --> 00:21:28,170
or bottom padding as a percentage it's

00:21:26,550 --> 00:21:32,790
actually a percentage of the width of

00:21:28,170 --> 00:21:36,990
the element not the height so knowing

00:21:32,790 --> 00:21:39,510
that most YouTube videos are think the

00:21:36,990 --> 00:21:44,010
ratio is somewhere around like sixty

00:21:39,510 --> 00:21:45,620
five point two five percent height to

00:21:44,010 --> 00:21:50,160
width

00:21:45,620 --> 00:21:53,040
we can add that 65.2 5% to the top of

00:21:50,160 --> 00:21:57,030
the container and then absolutely

00:21:53,040 --> 00:21:59,100
position the video itself and set the

00:21:57,030 --> 00:22:02,330
height to a hundred percent height and

00:21:59,100 --> 00:22:05,070
one hundred percent width which

00:22:02,330 --> 00:22:06,660
collapses the actual height of the

00:22:05,070 --> 00:22:08,960
element because it's absolutely

00:22:06,660 --> 00:22:13,110
positioned there's nothing there to

00:22:08,960 --> 00:22:20,640
create any Content area but our paddings

00:22:13,110 --> 00:22:32,460
still there so so now we can adjust that

00:22:20,640 --> 00:22:36,260
to fit wherever so grid systems are kind

00:22:32,460 --> 00:22:39,180
of a large pattern in themselves

00:22:36,260 --> 00:22:41,160
essentially we divide the screen into a

00:22:39,180 --> 00:22:43,770
series of vertical columns to facilitate

00:22:41,160 --> 00:22:49,740
your organization and alignment of

00:22:43,770 --> 00:22:54,870
components just to give an example this

00:22:49,740 --> 00:22:58,560
is the indianapolis museum Modern Art's

00:22:54,870 --> 00:23:01,470
a 12 column grid you can see how things

00:22:58,560 --> 00:23:05,010
are aligning to it I'm not going to get

00:23:01,470 --> 00:23:07,590
into just why grids are awesome in

00:23:05,010 --> 00:23:09,750
themselves I think there's plenty of

00:23:07,590 --> 00:23:15,230
that out there if you want to read about

00:23:09,750 --> 00:23:17,670
it ordering disorder by khoi vinh and

00:23:15,230 --> 00:23:21,120
practical guide to designing for the web

00:23:17,670 --> 00:23:23,010
by mark bolton are both great definitely

00:23:21,120 --> 00:23:25,410
check those out what I am more

00:23:23,010 --> 00:23:29,540
interested in are those underlying

00:23:25,410 --> 00:23:29,540
patterns to actually implementing grids

00:23:29,750 --> 00:23:34,920
so here's basic one the gutter grid for

00:23:33,450 --> 00:23:36,780
each grid unit in the grid system

00:23:34,920 --> 00:23:39,060
include a gutter to help space content

00:23:36,780 --> 00:23:42,870
I'm sure you're all very familiar with

00:23:39,060 --> 00:23:46,890
this both this site and this pattern so

00:23:42,870 --> 00:23:48,960
we have a gutter a bunch of columns I'm

00:23:46,890 --> 00:23:52,290
sorry we have a grid with a bunch of

00:23:48,960 --> 00:23:54,750
columns and gutters in between it just

00:23:52,290 --> 00:23:57,680
helps us space the content so our text

00:23:54,750 --> 00:23:57,680
doesn't run into each other

00:23:57,820 --> 00:24:01,520
one thing that we've been doing more

00:23:59,930 --> 00:24:05,300
often lately in it I don't see a whole

00:24:01,520 --> 00:24:06,860
lot of but is the gutter lyst grid so

00:24:05,300 --> 00:24:10,510
exclude the gutters from the grid unit

00:24:06,860 --> 00:24:12,650
instead use empty columns as gutters

00:24:10,510 --> 00:24:17,330
we've been using this on most of our

00:24:12,650 --> 00:24:19,810
projects lately it typically it requires

00:24:17,330 --> 00:24:23,270
more columns a like a lot of grids are

00:24:19,810 --> 00:24:26,510
you know 12 or 16 columns our gutter

00:24:23,270 --> 00:24:31,190
lyst grids are you know we started with

00:24:26,510 --> 00:24:33,170
24 we're actually using 23 column grids

00:24:31,190 --> 00:24:37,130
and if anyone wants to know why I can

00:24:33,170 --> 00:24:40,520
explain that but essentially more

00:24:37,130 --> 00:24:44,480
columns smaller space and that helps

00:24:40,520 --> 00:24:47,300
kind of with the sizing of gutters as a

00:24:44,480 --> 00:24:49,160
front end developer I find those much

00:24:47,300 --> 00:24:51,890
easier to work with than having to deal

00:24:49,160 --> 00:24:57,800
with those like we saw earlier the the

00:24:51,890 --> 00:24:59,090
intricacies of outer paddings I don't

00:24:57,800 --> 00:25:05,770
know what our designers think about it

00:24:59,090 --> 00:25:08,000
ken can answer that so symmetric grid

00:25:05,770 --> 00:25:13,010
construct the grid from equal with grid

00:25:08,000 --> 00:25:16,760
units in same example saying equal equal

00:25:13,010 --> 00:25:20,480
grid units we have 24 columns here

00:25:16,760 --> 00:25:22,160
they're all the same width again this

00:25:20,480 --> 00:25:27,710
other example this is our most grids

00:25:22,160 --> 00:25:30,710
grids are asymmetric grid so construct

00:25:27,710 --> 00:25:32,900
the grid from very varied with grit

00:25:30,710 --> 00:25:37,760
units designed specifically for the

00:25:32,900 --> 00:25:41,630
content this one I think to implement a

00:25:37,760 --> 00:25:44,240
whole grid system has been challenging

00:25:41,630 --> 00:25:48,470
in the past but now with SAS and grid

00:25:44,240 --> 00:25:51,200
frameworks this is way more plausible to

00:25:48,470 --> 00:25:55,570
actually implement to give an example of

00:25:51,200 --> 00:25:58,850
this this is from Mark Bolton's

00:25:55,570 --> 00:26:00,710
unfortunately not forth coming book it

00:25:58,850 --> 00:26:02,240
gets a book he had been working on for a

00:26:00,710 --> 00:26:05,240
while and just announced that he's not

00:26:02,240 --> 00:26:08,260
actually going to finish it which is a

00:26:05,240 --> 00:26:08,260
bit sad but understandable

00:26:08,770 --> 00:26:15,220
so you see here that we don't have equal

00:26:12,640 --> 00:26:19,150
columns there's actually it's like a

00:26:15,220 --> 00:26:24,340
four column grid on top of a I think

00:26:19,150 --> 00:26:27,130
five or three column grid not sure but

00:26:24,340 --> 00:26:29,920
anyways the the idea here is that the

00:26:27,130 --> 00:26:32,740
grid itself is designed specifically for

00:26:29,920 --> 00:26:34,690
the content you know the D equal column

00:26:32,740 --> 00:26:37,750
grid the twelve columns and the 16

00:26:34,690 --> 00:26:39,850
column grid I think those are born more

00:26:37,750 --> 00:26:44,620
out of necessity and ease of

00:26:39,850 --> 00:26:47,740
implementation than anything whereas I

00:26:44,620 --> 00:26:51,160
think an ideal is actually designing

00:26:47,740 --> 00:26:53,830
your grid around the content like do you

00:26:51,160 --> 00:26:58,120
have an ad on your site that needs to be

00:26:53,830 --> 00:27:01,900
you know 310 pixels or whatever ads have

00:26:58,120 --> 00:27:03,970
to be so design your grid around that

00:27:01,900 --> 00:27:09,250
element and everything else is a ratio

00:27:03,970 --> 00:27:10,390
of that kind of fixed point so that's

00:27:09,250 --> 00:27:14,700
something we actually haven't

00:27:10,390 --> 00:27:19,510
implemented anything in that yet but I

00:27:14,700 --> 00:27:22,630
definitely want to and I think hopefully

00:27:19,510 --> 00:27:24,760
I've lit a fire under the designers to

00:27:22,630 --> 00:27:30,700
actually go out and explore some of

00:27:24,760 --> 00:27:33,100
these other grids so another pattern

00:27:30,700 --> 00:27:35,740
with grid systems is the class-based

00:27:33,100 --> 00:27:37,960
grid system so allein elements to the

00:27:35,740 --> 00:27:42,970
grid by applying a system of predefined

00:27:37,960 --> 00:27:46,960
classes to markup you probably recognize

00:27:42,970 --> 00:27:50,220
this from 9-6 tgs or bootstrap or

00:27:46,960 --> 00:27:53,140
foundation and the idea here is that

00:27:50,220 --> 00:27:56,110
your grid system is kind of contained in

00:27:53,140 --> 00:27:58,090
all these predefined classes that you

00:27:56,110 --> 00:28:02,500
apply to your markup to get the desired

00:27:58,090 --> 00:28:08,290
results so this example from foundation

00:28:02,500 --> 00:28:11,620
we have I think it's can't read like

00:28:08,290 --> 00:28:17,440
large dash ten columns large stash eight

00:28:11,620 --> 00:28:21,040
columns and so on and so forth this is

00:28:17,440 --> 00:28:22,269
good for quick prototyping it's very

00:28:21,040 --> 00:28:24,519
handy for that because you can

00:28:22,269 --> 00:28:26,200
have this grid structure that you can

00:28:24,519 --> 00:28:30,039
already work with and you just start

00:28:26,200 --> 00:28:32,019
slapping classes everywhere slapping

00:28:30,039 --> 00:28:34,479
classes everywhere implies that you

00:28:32,019 --> 00:28:36,369
actually have good solid control over

00:28:34,479 --> 00:28:38,499
the markup and I'm sure a lot of us in

00:28:36,369 --> 00:28:42,729
here no that's not always the case with

00:28:38,499 --> 00:28:46,409
Drupal so it can be tricky in some cases

00:28:42,729 --> 00:28:51,639
to implement with Drupal consistently

00:28:46,409 --> 00:28:56,759
there used to be issues with I guess the

00:28:51,639 --> 00:29:00,299
semantics nison in these classes in that

00:28:56,759 --> 00:29:03,070
you would have classes like I think

00:29:00,299 --> 00:29:06,459
bootstrap used to use span so like span

00:29:03,070 --> 00:29:08,139
8 or span for that kind of applied to

00:29:06,459 --> 00:29:10,509
the desktop version of the sites and

00:29:08,139 --> 00:29:13,539
then when you shrunk that down you know

00:29:10,509 --> 00:29:17,889
what does span 8 mean on a mobile device

00:29:13,539 --> 00:29:19,269
like do you still have 12 columns is it

00:29:17,889 --> 00:29:25,959
an 8 column grid like what does that

00:29:19,269 --> 00:29:27,549
mean now so there I think both bootstrap

00:29:25,959 --> 00:29:30,820
and foundation have implemented this

00:29:27,549 --> 00:29:33,099
idea of like different systems of

00:29:30,820 --> 00:29:37,359
classes for the different grids so that

00:29:33,099 --> 00:29:39,579
you know if you have small you know

00:29:37,359 --> 00:29:41,769
these classes prefix with small meant

00:29:39,579 --> 00:29:46,839
like this applies to whatever your

00:29:41,769 --> 00:29:52,089
mobile breakpoint is again this stuff's

00:29:46,839 --> 00:29:54,729
good for for prototyping the alternative

00:29:52,089 --> 00:29:57,279
is a semantic grid system so allein

00:29:54,729 --> 00:29:59,079
elements to the grid by applying layout

00:29:57,279 --> 00:30:03,909
properties to selectors using a grid

00:29:59,079 --> 00:30:07,329
framework so the difference here is here

00:30:03,909 --> 00:30:09,659
we're applying the the properties

00:30:07,329 --> 00:30:12,249
directly to whatever selector we want

00:30:09,659 --> 00:30:14,079
before we're taking these predefined

00:30:12,249 --> 00:30:20,349
classes and applying them to whatever

00:30:14,079 --> 00:30:23,409
markup we had this is I find this much

00:30:20,349 --> 00:30:25,029
more flexible you only get the styles

00:30:23,409 --> 00:30:27,249
that you actually need because you're

00:30:25,029 --> 00:30:29,219
applying them where you need them so

00:30:27,249 --> 00:30:33,879
it's it's more efficient in that respect

00:30:29,219 --> 00:30:35,600
and it also opens up like the underlying

00:30:33,879 --> 00:30:39,620
math to the grid so

00:30:35,600 --> 00:30:44,390
so say if we're adding this mix in to

00:30:39,620 --> 00:30:48,169
something like okay span eight columns

00:30:44,390 --> 00:30:50,600
starting at the first column that's

00:30:48,169 --> 00:30:53,150
going to set like the appropriate width

00:30:50,600 --> 00:30:55,070
and margin on things but a lot of these

00:30:53,150 --> 00:30:59,059
frameworks provide that underlying math

00:30:55,070 --> 00:31:02,299
so you can apply those wits like you

00:30:59,059 --> 00:31:04,850
know four columns of a 12 column grid is

00:31:02,299 --> 00:31:09,980
thirty-three percent we could apply that

00:31:04,850 --> 00:31:12,710
to you know text and dinning or padding

00:31:09,980 --> 00:31:19,250
or margin whatever we want doesn't have

00:31:12,710 --> 00:31:22,340
to be just like margin and width so

00:31:19,250 --> 00:31:24,260
these are just examples this is all

00:31:22,340 --> 00:31:28,130
three of these are different frameworks

00:31:24,260 --> 00:31:30,409
there's singularity which is co

00:31:28,130 --> 00:31:33,940
maintained by Sam Richards I'm sure a

00:31:30,409 --> 00:31:37,970
lot of you know from Pierce snug UGG

00:31:33,940 --> 00:31:43,880
Suzy is another alternative and Zen

00:31:37,970 --> 00:31:46,159
grids which is John Albin's project I'm

00:31:43,880 --> 00:31:48,980
not going to get into like which ones

00:31:46,159 --> 00:31:51,260
better or whatever I think they're all

00:31:48,980 --> 00:31:56,539
great if someone wants to know what I

00:31:51,260 --> 00:31:57,830
think this week we can talk later but

00:31:56,539 --> 00:32:00,340
essentially all these it's just

00:31:57,830 --> 00:32:06,260
different syntax they do the same thing

00:32:00,340 --> 00:32:10,669
and each has its own own features so one

00:32:06,260 --> 00:32:13,190
of those features is like a float layout

00:32:10,669 --> 00:32:15,650
so this is kind of what we already

00:32:13,190 --> 00:32:19,309
looked at before where you just your

00:32:15,650 --> 00:32:21,190
floating floating elements like one

00:32:19,309 --> 00:32:23,659
after another so create a column or

00:32:21,190 --> 00:32:27,710
create columns by floating series of

00:32:23,659 --> 00:32:30,169
elements with pre-defined widths so just

00:32:27,710 --> 00:32:34,520
an example of that again we have three

00:32:30,169 --> 00:32:38,270
elements give them each with of

00:32:34,520 --> 00:32:43,039
thirty-three percent float them left and

00:32:38,270 --> 00:32:47,900
then you have your columns and you can

00:32:43,039 --> 00:32:49,159
add padding within those that works in a

00:32:47,900 --> 00:32:53,109
lot of cases

00:32:49,159 --> 00:32:53,109
it works really well use it all the time

00:32:54,279 --> 00:33:03,409
that is what's Susi used to be built on

00:33:00,019 --> 00:33:05,090
singularity used to be built on it and

00:33:03,409 --> 00:33:10,669
then added the option for the next

00:33:05,090 --> 00:33:12,529
pattern which is isolation so it's very

00:33:10,669 --> 00:33:14,960
similar but given a series of floated

00:33:12,529 --> 00:33:17,419
elements give each a negative trailing

00:33:14,960 --> 00:33:20,389
margin in order to reset the orientation

00:33:17,419 --> 00:33:22,129
of the following element so again this

00:33:20,389 --> 00:33:25,009
is another one that's hard to explain in

00:33:22,129 --> 00:33:29,109
words better with an example so this is

00:33:25,009 --> 00:33:31,729
what we we had before now we have each

00:33:29,109 --> 00:33:37,789
of these elements thirty-three percent

00:33:31,729 --> 00:33:40,340
wide offloaded if we add you know left

00:33:37,789 --> 00:33:43,450
margin to say the secondary it's going

00:33:40,340 --> 00:33:47,229
to push everything to the right

00:33:43,450 --> 00:33:50,139
isolation gets over that that fact by

00:33:47,229 --> 00:33:54,830
adding negative margin to each element

00:33:50,139 --> 00:33:58,419
so that it pulls the following element

00:33:54,830 --> 00:34:03,200
back to I guess you'd call it the origin

00:33:58,419 --> 00:34:06,470
so now we have three elements they're

00:34:03,200 --> 00:34:08,480
all you know four columns four columns

00:34:06,470 --> 00:34:11,450
wide or stacked on top of each other but

00:34:08,480 --> 00:34:14,149
now they have a consistent kind of base

00:34:11,450 --> 00:34:16,129
starting point so if we had left margin

00:34:14,149 --> 00:34:18,980
to any of them it's going to push them

00:34:16,129 --> 00:34:21,319
over so now we've isolated that primary

00:34:18,980 --> 00:34:24,440
element from the rest of them so that it

00:34:21,319 --> 00:34:26,569
can freely move back and forth without

00:34:24,440 --> 00:34:30,289
affecting the position of others this is

00:34:26,569 --> 00:34:35,119
what allows you to do a lot of like

00:34:30,289 --> 00:34:37,010
column rearranging and whatnot so we can

00:34:35,119 --> 00:34:39,399
do quite a few different things some of

00:34:37,010 --> 00:34:41,690
these grid systems offer the ability to

00:34:39,399 --> 00:34:45,109
define the direction which these are

00:34:41,690 --> 00:34:48,440
floated which is good for just like

00:34:45,109 --> 00:34:52,069
right-to-left language implementations

00:34:48,440 --> 00:34:53,960
but it's also good for just kind of

00:34:52,069 --> 00:34:57,819
giving you a little bit extra power on

00:34:53,960 --> 00:35:00,330
manipulate manipulating the markup or

00:34:57,819 --> 00:35:04,530
the CSS

00:35:00,330 --> 00:35:06,720
so here what we're doing is we have say

00:35:04,530 --> 00:35:10,860
the primary element is eight columns

00:35:06,720 --> 00:35:13,860
wide secondary element is I don't know

00:35:10,860 --> 00:35:16,320
for secondary element is floated to the

00:35:13,860 --> 00:35:20,160
right and the primary element is floated

00:35:16,320 --> 00:35:23,280
to the left so the tertiary element can

00:35:20,160 --> 00:35:24,960
just clear the left column therefore

00:35:23,280 --> 00:35:26,490
it's actually it's just clearing the

00:35:24,960 --> 00:35:29,460
primary element but it's going to wrap

00:35:26,490 --> 00:35:31,290
around the secondary so allows the

00:35:29,460 --> 00:35:35,700
secondary to actually kind of run past

00:35:31,290 --> 00:35:37,830
the tertiary element and that that

00:35:35,700 --> 00:35:40,920
actually comes in handy in a lot of

00:35:37,830 --> 00:35:45,300
places it's how we were able to do on

00:35:40,920 --> 00:35:48,210
that CPR site like get those that on air

00:35:45,300 --> 00:35:54,510
block to kind of wrap around some of the

00:35:48,210 --> 00:35:56,160
news stuff so that that kind of sums up

00:35:54,510 --> 00:36:02,700
some of some of the basic design

00:35:56,160 --> 00:36:05,250
patterns I've got more but wanted to get

00:36:02,700 --> 00:36:07,830
into some actual Drupal specific stuff

00:36:05,250 --> 00:36:12,170
and how do you actually let where do you

00:36:07,830 --> 00:36:15,570
apply this layout stuff to Drupal I

00:36:12,170 --> 00:36:20,120
think there's kind of two main patterns

00:36:15,570 --> 00:36:23,130
with Drupal one is simply template files

00:36:20,120 --> 00:36:24,450
there's these will probably be the main

00:36:23,130 --> 00:36:28,590
Simplot files that you're actually

00:36:24,450 --> 00:36:33,780
dealing with layout in terms of like

00:36:28,590 --> 00:36:36,330
actual core drupal views could probably

00:36:33,780 --> 00:36:39,360
be included in here but views is like in

00:36:36,330 --> 00:36:42,870
itself you know one view is like six

00:36:39,360 --> 00:36:44,160
different templates so it's kind of a

00:36:42,870 --> 00:36:49,470
crapshoot as to where you would actually

00:36:44,160 --> 00:36:51,900
mess with layout and view so you have

00:36:49,470 --> 00:36:54,540
the page template and page template

00:36:51,900 --> 00:36:59,490
you'd probably be applying layout to

00:36:54,540 --> 00:37:02,730
your actual Regents so your regions have

00:36:59,490 --> 00:37:04,050
a bunch of blocks in them so like some

00:37:02,730 --> 00:37:06,720
of these classes that we were looking at

00:37:04,050 --> 00:37:11,040
earlier we'd apply those two regions

00:37:06,720 --> 00:37:13,580
themselves nodes like corn oats don't

00:37:11,040 --> 00:37:16,340
have the concept of regions

00:37:13,580 --> 00:37:19,250
so you'll just be kind of creating

00:37:16,340 --> 00:37:22,820
regions in a template just by defining

00:37:19,250 --> 00:37:26,390
markup and manually sticking in whatever

00:37:22,820 --> 00:37:32,150
field you want in there and user profile

00:37:26,390 --> 00:37:34,460
essentially the same thing as a node so

00:37:32,150 --> 00:37:37,100
one thing to help manage this I don't

00:37:34,460 --> 00:37:40,850
know if anyone here does set of

00:37:37,100 --> 00:37:42,770
curiosity how many people like edit a

00:37:40,850 --> 00:37:48,230
lot of templates when their team in a

00:37:42,770 --> 00:37:55,210
Drupal site not too many what you guys

00:37:48,230 --> 00:38:00,140
do instead you display sweet panels cool

00:37:55,210 --> 00:38:03,290
okay we actually used to use a lot of

00:38:00,140 --> 00:38:06,080
display sweet but we've gone back to

00:38:03,290 --> 00:38:08,000
doing node templates and I think the

00:38:06,080 --> 00:38:10,430
secret sauce and that is steam hook

00:38:08,000 --> 00:38:13,850
suggestions which again I don't want to

00:38:10,430 --> 00:38:15,740
get too deep into this but i just want

00:38:13,850 --> 00:38:18,440
to point it out if you don't know what

00:38:15,740 --> 00:38:20,390
theme hook suggestions are find them

00:38:18,440 --> 00:38:22,400
figure them out and use them they're

00:38:20,390 --> 00:38:25,580
great but essentially it allows you to

00:38:22,400 --> 00:38:27,260
add create whatever reusable template

00:38:25,580 --> 00:38:30,470
you want so a lot of people get away

00:38:27,260 --> 00:38:33,200
from like editing node templates because

00:38:30,470 --> 00:38:35,510
it's like uh doing the same thing to

00:38:33,200 --> 00:38:37,760
every template and you just redo

00:38:35,510 --> 00:38:40,700
everything like theme hook suggestions

00:38:37,760 --> 00:38:42,590
will allow you to say like I want notes

00:38:40,700 --> 00:38:46,400
from this content type in this content

00:38:42,590 --> 00:38:52,760
type and ones on this page to use this

00:38:46,400 --> 00:38:56,270
layout so go to why do you have used

00:38:52,760 --> 00:39:00,200
panels like i mentioned displace wheat I

00:38:56,270 --> 00:39:02,390
think the other alternative to this kind

00:39:00,200 --> 00:39:08,270
of basic template approach is using

00:39:02,390 --> 00:39:15,590
CTools layouts I'm a big fan of panels

00:39:08,270 --> 00:39:17,450
just because of the layout model I think

00:39:15,590 --> 00:39:22,690
the big the big difference here like so

00:39:17,450 --> 00:39:25,800
comparing a panels layout to like

00:39:22,690 --> 00:39:30,820
creating layouts in a page template

00:39:25,800 --> 00:39:33,970
is it like I'm sorry so in a page

00:39:30,820 --> 00:39:37,860
template you have a bunch of Regents

00:39:33,970 --> 00:39:41,320
those regions are defined by your theme

00:39:37,860 --> 00:39:43,630
so you have one theme and you have

00:39:41,320 --> 00:39:45,250
however many layouts that's not going to

00:39:43,630 --> 00:39:47,530
change from page to page you know you

00:39:45,250 --> 00:39:50,380
can just not put some regions in there

00:39:47,530 --> 00:39:52,480
but it gets kind of weird to maintain

00:39:50,380 --> 00:39:55,420
when you have a just a ton of regions

00:39:52,480 --> 00:39:56,470
named whatever and you're kind of using

00:39:55,420 --> 00:40:00,130
them in different places in different

00:39:56,470 --> 00:40:03,910
layouts what I like about ctools layouts

00:40:00,130 --> 00:40:07,140
is you actually define what regions you

00:40:03,910 --> 00:40:13,840
want / template so you have a layout and

00:40:07,140 --> 00:40:16,540
say I have a like a sidebar layout say

00:40:13,840 --> 00:40:18,700
okay in this template I have sidebar

00:40:16,540 --> 00:40:22,150
region and I have a constant region and

00:40:18,700 --> 00:40:24,280
then you can put whatever in that these

00:40:22,150 --> 00:40:26,620
layouts can be used so they can be used

00:40:24,280 --> 00:40:28,960
in panels and panels is great because

00:40:26,620 --> 00:40:31,000
you can put whatever the hell you want

00:40:28,960 --> 00:40:33,400
and a panel it doesn't have to be a

00:40:31,000 --> 00:40:36,180
block it could be a view it could be a

00:40:33,400 --> 00:40:41,200
node it could be individual fields

00:40:36,180 --> 00:40:43,480
display sweet it's a little less

00:40:41,200 --> 00:40:47,440
flexible I mean you could put anything

00:40:43,480 --> 00:40:49,000
that's an entity but essentially you're

00:40:47,440 --> 00:40:50,620
just dealing with fields and you can get

00:40:49,000 --> 00:40:53,020
blocks in there by making a block of

00:40:50,620 --> 00:40:57,210
field or make it a view of field which

00:40:53,020 --> 00:41:00,670
to me started feeling a little dirty

00:40:57,210 --> 00:41:04,540
Omega 4x personally I haven't used it

00:41:00,670 --> 00:41:06,340
but from what i understand it uses see

00:41:04,540 --> 00:41:08,800
two layouts i'm sure there's people in

00:41:06,340 --> 00:41:12,430
here that use it then can i validate

00:41:08,800 --> 00:41:17,380
that claim so actually creating your own

00:41:12,430 --> 00:41:19,390
layouts super easy for basic files

00:41:17,380 --> 00:41:22,540
needed you have your include file which

00:41:19,390 --> 00:41:28,840
defines your regions and just points to

00:41:22,540 --> 00:41:31,720
other files you have your your thumb now

00:41:28,840 --> 00:41:34,060
your P&G with the layout looks out like

00:41:31,720 --> 00:41:36,390
the CSS that it's applied to it and the

00:41:34,060 --> 00:41:38,779
template so look at those real quick

00:41:36,390 --> 00:41:41,349
sidebar after

00:41:38,779 --> 00:41:46,489
again like I was just saying this has

00:41:41,349 --> 00:41:48,579
two regions content inside bar I get a

00:41:46,489 --> 00:41:54,319
little careless with my name in their

00:41:48,579 --> 00:41:56,829
main and content or the same thing so

00:41:54,319 --> 00:42:00,049
this defines the title like the user

00:41:56,829 --> 00:42:03,829
friendly name your layout category that

00:42:00,049 --> 00:42:07,279
it's in in the interface the icon is the

00:42:03,829 --> 00:42:09,679
thumbnail the theme is actually the

00:42:07,279 --> 00:42:12,109
theme hook so whatever this is is going

00:42:09,679 --> 00:42:15,219
to be the name of your the prefix of

00:42:12,109 --> 00:42:18,169
your template file so in this case

00:42:15,219 --> 00:42:21,289
sidebar underscore after our template

00:42:18,169 --> 00:42:27,409
file is going to be sidebar dash after

00:42:21,289 --> 00:42:30,499
dot TPL dot PHP what CSS it uses you can

00:42:27,409 --> 00:42:33,679
actually use different CSS for admin

00:42:30,499 --> 00:42:36,709
screens which is handy and then the

00:42:33,679 --> 00:42:38,239
actual regions so again you're just

00:42:36,709 --> 00:42:39,949
whatever regions you need in your

00:42:38,239 --> 00:42:41,329
template you can define them and they

00:42:39,949 --> 00:42:45,589
don't have to be the same as anything

00:42:41,329 --> 00:42:48,890
else so here's just the thumbnail pretty

00:42:45,589 --> 00:42:51,079
straightforward apologize for the crappy

00:42:48,890 --> 00:42:55,549
syntax highlighting for some reason

00:42:51,079 --> 00:43:02,779
highlight j/s thinks that these PHP tags

00:42:55,549 --> 00:43:04,009
within HTML are HTML comments so but i'm

00:43:02,779 --> 00:43:06,890
sure you guys all know what a template

00:43:04,009 --> 00:43:10,939
looks like and it doesn't exactly look

00:43:06,890 --> 00:43:16,249
like that and then you have your your

00:43:10,939 --> 00:43:17,959
CSS and this is super basic I mean

00:43:16,249 --> 00:43:19,999
usually the CSS is a little bit more

00:43:17,959 --> 00:43:23,269
complicated than that but for

00:43:19,999 --> 00:43:24,979
illustration purposes so I like the fact

00:43:23,269 --> 00:43:27,079
that you can use these templates in

00:43:24,979 --> 00:43:31,279
different places it provides a

00:43:27,079 --> 00:43:32,869
consistent interface it's consistent

00:43:31,279 --> 00:43:35,119
from a front-end perspective you can

00:43:32,869 --> 00:43:41,929
reuse these layouts across different

00:43:35,119 --> 00:43:46,069
sites it's pretty good so I guess in

00:43:41,929 --> 00:43:48,529
closing just like faded design patterns

00:43:46,069 --> 00:43:50,520
can be applied to multiple contexts like

00:43:48,529 --> 00:43:52,980
we just saw

00:43:50,520 --> 00:43:55,770
the idea with the design pattern is that

00:43:52,980 --> 00:44:02,130
it's super general and it can block can

00:43:55,770 --> 00:44:05,450
apply to different things and design

00:44:02,130 --> 00:44:08,730
patterns are not actually designed

00:44:05,450 --> 00:44:10,440
design patterns are observed so you

00:44:08,730 --> 00:44:12,150
don't go out there and figure out like

00:44:10,440 --> 00:44:15,000
I'm going to create a pattern you like

00:44:12,150 --> 00:44:17,600
as you're working and you find yourself

00:44:15,000 --> 00:44:19,920
doing the same thing over and over like

00:44:17,600 --> 00:44:21,630
really I'm just floating columns you

00:44:19,920 --> 00:44:23,880
know the width is changing the spacing

00:44:21,630 --> 00:44:25,680
is changing but it's the same thing and

00:44:23,880 --> 00:44:27,360
that can kind of help you create like

00:44:25,680 --> 00:44:30,600
you know if you're using SAS it can help

00:44:27,360 --> 00:44:32,880
you kind of create your mix-ins and find

00:44:30,600 --> 00:44:36,390
out how to like actually rearrange your

00:44:32,880 --> 00:44:39,540
code and what not but Dad I encourage

00:44:36,390 --> 00:44:40,920
you to just as you're working you know

00:44:39,540 --> 00:44:45,090
and you notice these things write them

00:44:40,920 --> 00:44:46,860
down keep a notebook document them

00:44:45,090 --> 00:44:48,840
somewhere like I said I'm interested in

00:44:46,860 --> 00:44:51,330
collaborating with anyone that's

00:44:48,840 --> 00:44:53,580
interested and you know writing these

00:44:51,330 --> 00:44:55,640
down and getting like just a community

00:44:53,580 --> 00:44:58,020
feedback and actually testing to see if

00:44:55,640 --> 00:45:04,890
you know is this a good pattern does it

00:44:58,020 --> 00:45:08,360
really apply so that that's it if you

00:45:04,890 --> 00:45:10,800
don't mind go to the go to the site and

00:45:08,360 --> 00:45:13,230
fill in the survey this first time I've

00:45:10,800 --> 00:45:16,860
given this talk so like to know if it's

00:45:13,230 --> 00:45:19,040
interesting or useful dinner you that's

00:45:16,860 --> 00:45:19,040
it

00:45:25,410 --> 00:45:28,860
any questions

00:45:34,490 --> 00:45:41,869
because there were there were a number

00:45:37,970 --> 00:45:43,820
of places where you you showed something

00:45:41,869 --> 00:45:45,710
and you might have liked the HTML or

00:45:43,820 --> 00:45:50,570
something but you didn't have the CSS

00:45:45,710 --> 00:45:53,330
shown on the slide um is there a way to

00:45:50,570 --> 00:45:55,400
get a hold of the CSS that you used in

00:45:53,330 --> 00:46:00,200
each of the examples there actually is

00:45:55,400 --> 00:46:02,720
no CSS it's all though so I know I

00:46:00,200 --> 00:46:09,500
actually already these slides are all up

00:46:02,720 --> 00:46:13,070
on github and if you go to the the same

00:46:09,500 --> 00:46:16,310
URL there's a link to it and you can see

00:46:13,070 --> 00:46:19,190
it in there I apologize for it not being

00:46:16,310 --> 00:46:20,960
very clean and organized you mentioned

00:46:19,190 --> 00:46:25,960
with the gutter Lestrade you're using a

00:46:20,960 --> 00:46:28,580
23 column grid you kind of oh yeah so

00:46:25,960 --> 00:46:31,940
what you want to know about the 23

00:46:28,580 --> 00:46:36,140
column grid yeah whoo so since you're

00:46:31,940 --> 00:46:41,140
using gutters at orsolya your columns as

00:46:36,140 --> 00:46:45,260
it gutters if you have a 23 column grid

00:46:41,140 --> 00:46:47,960
so to two columns or like 211 unit

00:46:45,260 --> 00:46:50,540
columns you'd have one left over for the

00:46:47,960 --> 00:46:52,430
gutter in the middle which is 23 so

00:46:50,540 --> 00:46:58,460
you'd have you know three columns would

00:46:52,430 --> 00:47:02,330
be seven units each four columns five

00:46:58,460 --> 00:47:04,369
units so it actually worked out nice but

00:47:02,330 --> 00:47:07,119
when a yeah when our designer said it

00:47:04,369 --> 00:47:12,859
its twenty three column grid enlighten

00:47:07,119 --> 00:47:16,700
you think it'd never work yeah but it

00:47:12,859 --> 00:47:19,460
works at the end you gave the example of

00:47:16,700 --> 00:47:21,980
the sidebar after dot I NC and the dot

00:47:19,460 --> 00:47:23,960
TPL files mm-hmm I wasn't clear how do

00:47:21,980 --> 00:47:25,820
you get to use actually that so you

00:47:23,960 --> 00:47:29,270
write that ein see file what's the next

00:47:25,820 --> 00:47:31,190
step ok well it kind of depends on where

00:47:29,270 --> 00:47:35,410
you're using it you can either define

00:47:31,190 --> 00:47:37,850
your layouts in the theme or in a module

00:47:35,410 --> 00:47:40,760
syntax is pretty much the same but if

00:47:37,850 --> 00:47:43,040
you're defining them in your theme you

00:47:40,760 --> 00:47:44,990
just create a layouts folder and each

00:47:43,040 --> 00:47:46,970
layout will have its own folder so you'd

00:47:44,990 --> 00:47:49,580
have a folder called sidebar after

00:47:46,970 --> 00:47:52,580
and then in your dot info file in the

00:47:49,580 --> 00:47:55,570
theme I don't know what the syntax is

00:47:52,580 --> 00:47:58,400
off hand but i think it's like plugins

00:47:55,570 --> 00:48:01,130
layout something just like you were

00:47:58,400 --> 00:48:04,400
adding a CSS file or a javascript file

00:48:01,130 --> 00:48:10,790
very similar I find that the easiest

00:48:04,400 --> 00:48:13,250
easiest way to do it in your in your

00:48:10,790 --> 00:48:16,040
slides you talked about class naming

00:48:13,250 --> 00:48:17,870
conventions based on the like the

00:48:16,040 --> 00:48:20,710
specifics of the layout versus class

00:48:17,870 --> 00:48:25,580
names specific to the content view modes

00:48:20,710 --> 00:48:27,530
and I think both both require different

00:48:25,580 --> 00:48:29,720
ways of implementing them so I guess

00:48:27,530 --> 00:48:31,640
which one do you have the motor have you

00:48:29,720 --> 00:48:32,840
had the most traction with and kind of

00:48:31,640 --> 00:48:35,570
prefer to use or is it kind of like a

00:48:32,840 --> 00:48:39,230
hybrid of both it's pretty much a hybrid

00:48:35,570 --> 00:48:42,140
like anytime I'm doing layout on like a

00:48:39,230 --> 00:48:45,410
note or a content type I'll use that

00:48:42,140 --> 00:48:49,460
like article dash dash whatever and if

00:48:45,410 --> 00:48:52,790
it's save the node like if that layout

00:48:49,460 --> 00:48:54,680
applies to multiple content types I'll

00:48:52,790 --> 00:48:56,570
come up with like a generic name other

00:48:54,680 --> 00:48:59,660
than article or you can't get much

00:48:56,570 --> 00:49:04,690
Jeanette more generic an article but and

00:48:59,660 --> 00:49:07,190
then for the l dash those those get used

00:49:04,690 --> 00:49:09,110
throughout the site more on the page

00:49:07,190 --> 00:49:12,020
level and like the larger level stuff

00:49:09,110 --> 00:49:14,390
but I use it for sidebars and whatnot so

00:49:12,020 --> 00:49:16,700
I guess more specifically if you want to

00:49:14,390 --> 00:49:19,340
use the same or the same or similar

00:49:16,700 --> 00:49:21,050
layouts across multiple content types do

00:49:19,340 --> 00:49:23,060
you just chain selectors together or do

00:49:21,050 --> 00:49:27,260
you try to force the classes you want a

00:49:23,060 --> 00:49:29,690
butterfly that layout I can make that

00:49:27,260 --> 00:49:33,670
decision at the time we don't have a

00:49:29,690 --> 00:49:36,890
good solid rule for it but I typically

00:49:33,670 --> 00:49:40,580
err on the side of like a component like

00:49:36,890 --> 00:49:44,030
thinking that yes technically this could

00:49:40,580 --> 00:49:46,940
be used on another part of the site but

00:49:44,030 --> 00:49:48,950
I'd also like this particular opponent

00:49:46,940 --> 00:49:51,950
to be component to be completely

00:49:48,950 --> 00:49:55,070
independent of everything else so I'm

00:49:51,950 --> 00:49:57,520
fine with a little duplication there ok

00:49:55,070 --> 00:49:57,520
thank you

00:49:57,690 --> 00:50:03,430
yeah you said responsive video I think

00:50:01,600 --> 00:50:06,010
you said you were making the top and the

00:50:03,430 --> 00:50:09,430
bottom padding a percentage of the width

00:50:06,010 --> 00:50:11,020
is that right yeah so it's just a you do

00:50:09,430 --> 00:50:14,950
one or the other it doesn't matter which

00:50:11,020 --> 00:50:18,640
one but uh so you would say top padding

00:50:14,950 --> 00:50:21,610
is like whatever the aspect ratio of

00:50:18,640 --> 00:50:24,700
whatever you're trying to whatever the

00:50:21,610 --> 00:50:28,180
aspect ratio of the video is yes so of

00:50:24,700 --> 00:50:32,530
like your iframe so for an example like

00:50:28,180 --> 00:50:34,690
if it's a like 16 by 9 or something like

00:50:32,530 --> 00:50:37,290
that like global what would your top

00:50:34,690 --> 00:50:37,290
padding be

00:50:46,990 --> 00:50:54,880
I can't read that up there but it would

00:50:49,360 --> 00:50:59,320
be that point yeah 56.25 okay so you

00:50:54,880 --> 00:51:05,800
just divide the the height by the width

00:50:59,320 --> 00:51:10,780
okay great thanks you're talking about

00:51:05,800 --> 00:51:12,340
that the isolation method um is there

00:51:10,780 --> 00:51:14,590
somewhere I could read more about that

00:51:12,340 --> 00:51:18,280
I'm not sure I'm fully comprehending how

00:51:14,590 --> 00:51:23,680
to implement that or yes that's have you

00:51:18,280 --> 00:51:33,300
ever used in the theme okay that is

00:51:23,680 --> 00:51:33,300
actually credit John Albin with that I

00:51:34,860 --> 00:51:38,850
can't see what i'm typing so

00:51:44,830 --> 00:51:56,460
probably not something you want to type

00:51:47,030 --> 00:51:58,710
in on a live demo but yeah

00:51:56,460 --> 00:52:00,990
so responsive designs dirty little

00:51:58,710 --> 00:52:10,339
secret I think has a good explanation of

00:52:00,990 --> 00:52:10,339

YouTube URL: https://www.youtube.com/watch?v=kc8qQnQ52NA


