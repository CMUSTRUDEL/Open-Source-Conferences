Title: DrupalCon Austin 2014: UNDERSTANDING XHPROF: PINPOINTING WHY YOUR SITE IS SLOW AND HOW TO FIX IT
Publication date: 2014-06-04
Playlist: DrupalCon Austin - June 2014
Description: 
	Speakers: ezra-g
Stop guessing about why your site isn't meeting performance goals. XHProf is the tool that can tell you precisely where time is spent generating a page so that you can focus on surgically targeted fixes rather than taking shots in the dark. But how should you navigate its complex UI and turn that pile of data into actionable recommendations to improve site performance?
This session demystifies XHProf with a mix of conceptual grounding and hands-on exploration.

This session will cover:

- What is XHProf and how is it different from other performance/scalability tools?
- Navigating XHProf's complex UI
- How to recognize common patterns when profiling Drupal applications
- Moving beyond common assumptions and misconceptions about performance and identifying and quantifying specific performance issues
- How to be your project's hero by generating a remediation plan that identifies which aspects of your application are slow, proposed remdiations and quantifies the performance gains you'll implement
Captions: 
	00:00:00,140 --> 00:00:05,790
alright let's go ahead and get started

00:00:02,010 --> 00:00:07,410
yeah so everyone thanks for coming my

00:00:05,790 --> 00:00:09,090
name's Ezra Gilda's game and this

00:00:07,410 --> 00:00:11,490
session is understanding XH prof

00:00:09,090 --> 00:00:14,880
pinpointing why your site is slow and

00:00:11,490 --> 00:00:17,609
how to fix it um so how many people will

00:00:14,880 --> 00:00:19,740
have heard of XH prof already that makes

00:00:17,609 --> 00:00:22,170
sense because you're in this room and

00:00:19,740 --> 00:00:24,359
it's it's in big letters on both sides

00:00:22,170 --> 00:00:26,880
of the room too but how many people have

00:00:24,359 --> 00:00:30,000
used XH prof before okay and how many

00:00:26,880 --> 00:00:31,050
people feel like they used it but they

00:00:30,000 --> 00:00:32,520
weren't really sure what they were

00:00:31,050 --> 00:00:34,710
looking at but it seemed like there was

00:00:32,520 --> 00:00:36,750
definitely a lot of numbers yeah a few

00:00:34,710 --> 00:00:39,809
hands you're correct there are a lot of

00:00:36,750 --> 00:00:43,500
numbers so hopefully with the session

00:00:39,809 --> 00:00:45,149
will will help you understand xhp even

00:00:43,500 --> 00:00:46,860
matter and how many people have never

00:00:45,149 --> 00:00:52,230
used it before but really are excited to

00:00:46,860 --> 00:00:53,879
use it yes very exciting great so what

00:00:52,230 --> 00:00:55,320
problem we try and solve the problem

00:00:53,879 --> 00:00:58,440
we're trying to solve is slow websites

00:00:55,320 --> 00:01:00,649
or web applications so of course when

00:00:58,440 --> 00:01:03,359
your site takes a long time to load

00:01:00,649 --> 00:01:04,979
unhappy users are going to leave also if

00:01:03,359 --> 00:01:06,689
your server can't sustain a lot of

00:01:04,979 --> 00:01:10,890
concurrent people using your application

00:01:06,689 --> 00:01:12,090
and it's going to crash it seems like

00:01:10,890 --> 00:01:13,350
we're right next to the kitchen in this

00:01:12,090 --> 00:01:16,799
room so if you're hearing some of that

00:01:13,350 --> 00:01:17,880
clanking I apologize yeah so every

00:01:16,799 --> 00:01:20,520
second count this is a pretty

00:01:17,880 --> 00:01:23,210
well-documented phenomenon on the web

00:01:20,520 --> 00:01:27,740
but user abandonment tends to increase

00:01:23,210 --> 00:01:30,570
as time for your page load increases so

00:01:27,740 --> 00:01:33,119
you want to make sure that that is that

00:01:30,570 --> 00:01:35,600
page load time is low so what is x h

00:01:33,119 --> 00:01:38,549
prof tell us about it tells us about

00:01:35,600 --> 00:01:40,350
page execution time so that means time

00:01:38,549 --> 00:01:42,630
spent by the server generating the page

00:01:40,350 --> 00:01:45,149
that's sent to the web browser or for

00:01:42,630 --> 00:01:48,420
serving to a mobile app and it's the API

00:01:45,149 --> 00:01:52,110
endpoint hmm exit prof can also measure

00:01:48,420 --> 00:01:53,520
memory and cpu usage it does not measure

00:01:52,110 --> 00:01:55,680
the amount of clanking happening

00:01:53,520 --> 00:01:59,080
directly behind the podium

00:01:55,680 --> 00:02:00,610
alright so there are a few things that

00:01:59,080 --> 00:02:02,890
x-ray prof doesn't measure that are also

00:02:00,610 --> 00:02:04,420
relevant to to performance that we

00:02:02,890 --> 00:02:06,310
should just identify and understand that

00:02:04,420 --> 00:02:09,280
we're not going to discuss so one is

00:02:06,310 --> 00:02:10,960
time to first byte that's when the user

00:02:09,280 --> 00:02:12,250
makes a request and then they were

00:02:10,960 --> 00:02:14,290
waiting for the server to start

00:02:12,250 --> 00:02:18,490
responding and sending data that

00:02:14,290 --> 00:02:20,590
certainly is a big factor of in users

00:02:18,490 --> 00:02:22,930
perception of page execution time or

00:02:20,590 --> 00:02:25,480
page load time but it's not necessarily

00:02:22,930 --> 00:02:27,790
something we see from XH prov we don't

00:02:25,480 --> 00:02:29,050
see page render time so that's the time

00:02:27,790 --> 00:02:31,930
that the browser spends actually

00:02:29,050 --> 00:02:33,910
rendering the page based on HTML and CSS

00:02:31,930 --> 00:02:35,770
and other assets that are sent back so

00:02:33,910 --> 00:02:37,780
you could ship those assets out super

00:02:35,770 --> 00:02:39,130
fast but if the page isn't simple than

00:02:37,780 --> 00:02:42,270
efficient way it can still take a long

00:02:39,130 --> 00:02:44,350
time to generate in the client browser

00:02:42,270 --> 00:02:46,060
if you want to look at render time there

00:02:44,350 --> 00:02:47,709
are some great tools for that chrome

00:02:46,060 --> 00:02:50,170
devtools and why slow are both really

00:02:47,709 --> 00:02:52,300
good tools and so there's a lot of

00:02:50,170 --> 00:02:54,130
factors including those that i just

00:02:52,300 --> 00:02:56,350
mentioned that are part of the users

00:02:54,130 --> 00:02:57,940
overall perception of performance which

00:02:56,350 --> 00:02:59,470
can sometimes be different than the way

00:02:57,940 --> 00:03:01,570
that the site or the server is actually

00:02:59,470 --> 00:03:03,010
performing and of course the users

00:03:01,570 --> 00:03:07,300
perception of performance is really

00:03:03,010 --> 00:03:08,590
important wow I don't know if that's

00:03:07,300 --> 00:03:10,840
getting captured on the recording but

00:03:08,590 --> 00:03:12,580
there's quite a quite a cacophony of

00:03:10,840 --> 00:03:14,290
sound happening in this room so

00:03:12,580 --> 00:03:15,370
designing optimistically this is

00:03:14,290 --> 00:03:16,840
something that I'm not going to talk

00:03:15,370 --> 00:03:18,730
about in detail in this presentation but

00:03:16,840 --> 00:03:20,890
i highly recommend that everybody go out

00:03:18,730 --> 00:03:25,360
and check this presentation out by mike

00:03:20,890 --> 00:03:26,860
kryger of instagram and it's it's a few

00:03:25,360 --> 00:03:29,140
different really simple concepts on how

00:03:26,860 --> 00:03:32,560
they designed to make the application up

00:03:29,140 --> 00:03:33,790
here to perform more quickly even though

00:03:32,560 --> 00:03:36,730
that you know technically it's not

00:03:33,790 --> 00:03:39,970
necessarily sending data as any more

00:03:36,730 --> 00:03:42,010
quickly than another app all right so

00:03:39,970 --> 00:03:43,660
our goal with XH profits to reduce page

00:03:42,010 --> 00:03:45,100
execution time improve the user

00:03:43,660 --> 00:03:47,200
experience and also improve the

00:03:45,100 --> 00:03:48,940
concurrency and efficient that the

00:03:47,200 --> 00:03:51,670
server can serve with the given set of

00:03:48,940 --> 00:03:53,560
server resources we also want to avoid

00:03:51,670 --> 00:03:55,570
speculation so this is a big problem

00:03:53,560 --> 00:03:58,299
when it comes to performance issues on a

00:03:55,570 --> 00:04:00,790
site you know I know that I certainly

00:03:58,299 --> 00:04:02,470
when I've heard folks talk about looking

00:04:00,790 --> 00:04:05,049
at a site oftentimes you'll hear just

00:04:02,470 --> 00:04:06,400
what ends up being speculation and this

00:04:05,049 --> 00:04:08,770
kind of makes sense right like when we

00:04:06,400 --> 00:04:10,390
think about why there might be a pro

00:04:08,770 --> 00:04:12,160
we tend to think about past things that

00:04:10,390 --> 00:04:13,720
we've seen and sometimes those you know

00:04:12,160 --> 00:04:14,890
the past things that we've seen will be

00:04:13,720 --> 00:04:16,750
related to what we're dealing with now

00:04:14,890 --> 00:04:18,130
but not that's not always the case so

00:04:16,750 --> 00:04:20,470
you'll hear a lot of maybe it's this

00:04:18,130 --> 00:04:22,360
maybe it's that and the issue with

00:04:20,470 --> 00:04:24,040
speculation is that then you can spend a

00:04:22,360 --> 00:04:26,020
bunch of time on an investigation that

00:04:24,040 --> 00:04:28,480
is fruitless it doesn't turn up results

00:04:26,020 --> 00:04:30,640
that are useful you might also even

00:04:28,480 --> 00:04:31,690
spend time working on remediations that

00:04:30,640 --> 00:04:32,920
you think are going to improve

00:04:31,690 --> 00:04:34,690
performance and then you find out

00:04:32,920 --> 00:04:37,150
actually that those remediations were

00:04:34,690 --> 00:04:39,040
not effective you'll also hear really

00:04:37,150 --> 00:04:40,750
vague problem descriptions and this is

00:04:39,040 --> 00:04:44,470
kind of my number one pet peeve things

00:04:40,750 --> 00:04:46,300
like views is slow and XH prof. really

00:04:44,470 --> 00:04:49,240
lets us dig in and get much more

00:04:46,300 --> 00:04:50,860
granular about what we're seeing we want

00:04:49,240 --> 00:04:53,070
to avoid those kinds of misconceptions

00:04:50,860 --> 00:04:56,950
so like views or buy it I'm good and

00:04:53,070 --> 00:04:59,530
panels are bad right be smart and coming

00:04:56,950 --> 00:05:01,690
is kind of the message here so tools

00:04:59,530 --> 00:05:03,430
like views and panels empower you to do

00:05:01,690 --> 00:05:06,670
inefficient things they're very powerful

00:05:03,430 --> 00:05:08,620
tools if you want to put 60 inefficient

00:05:06,670 --> 00:05:11,170
listings in a single page views and

00:05:08,620 --> 00:05:13,360
panels are great tools to do that but

00:05:11,170 --> 00:05:14,980
it's not a negative aspect of views and

00:05:13,360 --> 00:05:16,930
panels that that's possible it's just a

00:05:14,980 --> 00:05:19,000
side effect of having a powerful tool on

00:05:16,930 --> 00:05:21,400
the flip side views and panels both

00:05:19,000 --> 00:05:24,400
provide a range of really powerful

00:05:21,400 --> 00:05:26,050
configurable caching that that can

00:05:24,400 --> 00:05:28,270
actually help you improve performance on

00:05:26,050 --> 00:05:30,580
your site and make it easier to do that

00:05:28,270 --> 00:05:32,380
than many other tools so the views and

00:05:30,580 --> 00:05:34,540
you know the views query and render cash

00:05:32,380 --> 00:05:37,210
panels pain caches and there's some

00:05:34,540 --> 00:05:39,820
add-on modules like panels hashcash all

00:05:37,210 --> 00:05:41,950
of those are really useful tools that

00:05:39,820 --> 00:05:43,240
can really help you improve the

00:05:41,950 --> 00:05:46,930
performance of your site if you know how

00:05:43,240 --> 00:05:48,610
to use them wisely so an example kind of

00:05:46,930 --> 00:05:50,470
a problem statement that ideally we'll

00:05:48,610 --> 00:05:52,060
be able to produce after working with XH

00:05:50,470 --> 00:05:53,890
prof is something that's more specific

00:05:52,060 --> 00:05:55,480
right so whereas maybe before we said

00:05:53,890 --> 00:05:57,250
that some part of the site was slow or

00:05:55,480 --> 00:05:58,810
some feature is slow we really want to

00:05:57,250 --> 00:06:00,640
get to the level of detail like this

00:05:58,810 --> 00:06:02,140
statement here right and any loads are

00:06:00,640 --> 00:06:03,850
slow because when we load entities we

00:06:02,140 --> 00:06:06,190
load field X which is also which also

00:06:03,850 --> 00:06:08,560
loads y data which spends e time in the

00:06:06,190 --> 00:06:10,570
database and on top of that page a loads

00:06:08,560 --> 00:06:12,640
a thousand entities of type X so now we

00:06:10,570 --> 00:06:14,440
have a really specific root cause and a

00:06:12,640 --> 00:06:16,510
little later in this presentation will

00:06:14,440 --> 00:06:18,580
actually look at a few specific examples

00:06:16,510 --> 00:06:19,370
of issues that were identified with XH

00:06:18,580 --> 00:06:23,630
prof and the

00:06:19,370 --> 00:06:25,910
to those issues all right so just to

00:06:23,630 --> 00:06:27,680
recap we're going to use X agecroft to

00:06:25,910 --> 00:06:29,570
pinpoint the root cause of performance

00:06:27,680 --> 00:06:31,460
problems and develop a surgical

00:06:29,570 --> 00:06:35,110
remediation plan so we can go in and fix

00:06:31,460 --> 00:06:37,760
the exact problem that we're facing

00:06:35,110 --> 00:06:39,350
alright so how many so we did a show of

00:06:37,760 --> 00:06:41,360
hands before but it sounds like many

00:06:39,350 --> 00:06:43,760
people have seen this UI before this is

00:06:41,360 --> 00:06:45,710
like this is about half of the XH prof.

00:06:43,760 --> 00:06:51,500
you why this is the left side which is

00:06:45,710 --> 00:06:53,930
which is the best side I mean there's

00:06:51,500 --> 00:06:59,300
just really useful information on that

00:06:53,930 --> 00:07:02,870
side why that was so funny I think I'm

00:06:59,300 --> 00:07:04,729
really fighting the easily distracted by

00:07:02,870 --> 00:07:05,660
sound anyway so here are the things that

00:07:04,729 --> 00:07:07,639
we're good to see here that are

00:07:05,660 --> 00:07:10,850
important to see the number of function

00:07:07,639 --> 00:07:12,620
calls so for example in this example you

00:07:10,850 --> 00:07:15,169
can see this the function P do statement

00:07:12,620 --> 00:07:18,560
executes was called 366 times with our

00:07:15,169 --> 00:07:21,889
request the wall time which is the

00:07:18,560 --> 00:07:23,389
basically the well we'll talk about Walt

00:07:21,889 --> 00:07:25,700
I'm actually in a second but we have

00:07:23,389 --> 00:07:27,680
this idea of exclusive and inclusive and

00:07:25,700 --> 00:07:30,889
exclusive which will define we've got

00:07:27,680 --> 00:07:33,110
memory usage and cpu time so for

00:07:30,889 --> 00:07:34,849
inclusive and exclusive this is a really

00:07:33,110 --> 00:07:37,039
important idea and I think that for me

00:07:34,849 --> 00:07:38,510
once I understood this idea and how to

00:07:37,039 --> 00:07:40,669
see this in the UI that was like a

00:07:38,510 --> 00:07:43,039
turning point in my understanding of XH

00:07:40,669 --> 00:07:45,680
prov so exclusive time tells us about

00:07:43,039 --> 00:07:47,840
the time spent in this function only and

00:07:45,680 --> 00:07:49,789
inclusive time tells you about the time

00:07:47,840 --> 00:07:51,349
spent in a current function and all the

00:07:49,789 --> 00:07:54,770
child functions that are called after

00:07:51,349 --> 00:07:57,440
that function so CPU time in Walt I'm

00:07:54,770 --> 00:08:00,320
super simple CPU time anybody want to

00:07:57,440 --> 00:08:04,160
guess right time spent by the CPU

00:08:00,320 --> 00:08:06,530
shocking wall time is time spent include

00:08:04,160 --> 00:08:09,289
you know by the CPU plus time spent with

00:08:06,530 --> 00:08:11,270
disk i/o so if cpu time and Walt I'm

00:08:09,289 --> 00:08:12,860
don't match and there's a discrepancy

00:08:11,270 --> 00:08:15,229
there there's a good chance that you're

00:08:12,860 --> 00:08:20,750
waiting for the disk you're waiting to

00:08:15,229 --> 00:08:22,220
write a file or read a file somewhere so

00:08:20,750 --> 00:08:25,789
what are the kinds of things that we're

00:08:22,220 --> 00:08:28,219
going to find with XH prov and many of

00:08:25,789 --> 00:08:29,900
these are not specific to Drupal but

00:08:28,219 --> 00:08:30,400
many of them are also dribble specific

00:08:29,900 --> 00:08:32,320
kinds of thing

00:08:30,400 --> 00:08:35,409
and as you're profiling in Drupal it's

00:08:32,320 --> 00:08:36,880
useful to be able to recognize some kind

00:08:35,409 --> 00:08:39,190
of drupal ism things for example an

00:08:36,880 --> 00:08:40,360
entity load so that it's more easy for

00:08:39,190 --> 00:08:42,180
you to recognize in the future when

00:08:40,360 --> 00:08:44,470
you're profiling on a Drupal site so

00:08:42,180 --> 00:08:46,420
right we might find a function that's

00:08:44,470 --> 00:08:49,330
called many times unnecessarily and

00:08:46,420 --> 00:08:51,700
really often not always but often or it

00:08:49,330 --> 00:08:55,089
easy remediation there is to add a

00:08:51,700 --> 00:08:58,690
static cash we might find slow queries

00:08:55,089 --> 00:09:00,850
right and so one approach to you know

00:08:58,690 --> 00:09:02,350
understanding those further is to run

00:09:00,850 --> 00:09:04,000
the page again with a developed query

00:09:02,350 --> 00:09:06,250
log and use the built-in explained

00:09:04,000 --> 00:09:08,770
feature you can actually run a my sequel

00:09:06,250 --> 00:09:11,040
explained on a query and get information

00:09:08,770 --> 00:09:13,480
about why that corey takes a long time

00:09:11,040 --> 00:09:14,770
you might find many fast queries but

00:09:13,480 --> 00:09:18,940
there's so many of them they stack up

00:09:14,770 --> 00:09:21,940
and then you deal with resource

00:09:18,940 --> 00:09:23,380
contention in the database this is a

00:09:21,940 --> 00:09:24,940
really interesting thing and this is

00:09:23,380 --> 00:09:26,890
this is a little bit more of a drupal

00:09:24,940 --> 00:09:28,990
ism because of the way the drupal builds

00:09:26,890 --> 00:09:31,180
database queries but what I what I've

00:09:28,990 --> 00:09:34,089
put on the screenshot is output from

00:09:31,180 --> 00:09:35,890
devel query log on the top and then X H

00:09:34,089 --> 00:09:37,930
profit output on the bottom and so you

00:09:35,890 --> 00:09:39,790
can see that there's this database query

00:09:37,930 --> 00:09:42,910
that has so many clauses right these are

00:09:39,790 --> 00:09:44,440
note access clauses in this query so

00:09:42,910 --> 00:09:46,540
many of them that I couldn't fit them in

00:09:44,440 --> 00:09:49,330
a single screen shot however the query

00:09:46,540 --> 00:09:51,550
still executes sin 85 milliseconds so is

00:09:49,330 --> 00:09:53,110
this query a problem or not well it

00:09:51,550 --> 00:09:54,760
turns out that the actually the

00:09:53,110 --> 00:09:57,040
performance impact of this query has

00:09:54,760 --> 00:09:58,570
tends to be on actually assembling the

00:09:57,040 --> 00:10:00,100
query rather than executing that and

00:09:58,570 --> 00:10:02,860
what it mean what that means is that

00:10:00,100 --> 00:10:05,680
often in Drupal we put queries together

00:10:02,860 --> 00:10:07,990
in an object-oriented way so or just

00:10:05,680 --> 00:10:09,820
through assembly rather than writing out

00:10:07,990 --> 00:10:12,010
a direct database query so the note

00:10:09,820 --> 00:10:13,839
access system for example will go

00:10:12,010 --> 00:10:16,020
request all the node access parameters

00:10:13,839 --> 00:10:19,170
that affect a given query and they'll

00:10:16,020 --> 00:10:21,339
concatenate them into a string and then

00:10:19,170 --> 00:10:22,750
eventually that gets concatenated into a

00:10:21,339 --> 00:10:25,660
string and actually the process of

00:10:22,750 --> 00:10:27,339
assembling that query can take longer in

00:10:25,660 --> 00:10:29,200
terms of execution time than running it

00:10:27,339 --> 00:10:30,459
so that's a handy thing to know and

00:10:29,200 --> 00:10:32,230
that's that's another example of

00:10:30,459 --> 00:10:36,279
something that you wouldn't see just by

00:10:32,230 --> 00:10:38,589
looking at the slow query log so we

00:10:36,279 --> 00:10:40,120
might find excessive entity loads or we

00:10:38,589 --> 00:10:44,150
might find excessive calls to memcache

00:10:40,120 --> 00:10:45,800
set and get what is excessive mean right

00:10:44,150 --> 00:10:48,290
well it depends right you need to

00:10:45,800 --> 00:10:50,000
understand the specific application that

00:10:48,290 --> 00:10:51,290
you're working on to understand what

00:10:50,000 --> 00:10:53,030
excessive beans and what an appropriate

00:10:51,290 --> 00:10:55,280
remediation is going to be so for

00:10:53,030 --> 00:10:57,530
example if there's data that you

00:10:55,280 --> 00:10:59,690
definitely need within a request then

00:10:57,530 --> 00:11:02,120
your strategy should be make it easier

00:10:59,690 --> 00:11:04,340
to compute that data if there's data

00:11:02,120 --> 00:11:05,960
that you don't eat within a request no

00:11:04,340 --> 00:11:07,910
reason to optimize the process of

00:11:05,960 --> 00:11:09,320
getting that data like you know this is

00:11:07,910 --> 00:11:11,360
another case where if you just want to

00:11:09,320 --> 00:11:13,010
optimize database queries you can spend

00:11:11,360 --> 00:11:14,660
a whole great long time optimizing

00:11:13,010 --> 00:11:16,340
database queries but if it turns out

00:11:14,660 --> 00:11:17,870
that you there was another path where

00:11:16,340 --> 00:11:19,400
you didn't even have to make that query

00:11:17,870 --> 00:11:21,080
in the first place well I spend time

00:11:19,400 --> 00:11:22,670
optimizing it right we want to conserve

00:11:21,080 --> 00:11:26,360
developer time and make the most

00:11:22,670 --> 00:11:28,820
efficient remediations we can you might

00:11:26,360 --> 00:11:30,770
find page blocking calls this is such a

00:11:28,820 --> 00:11:32,180
such a common one so if you have a site

00:11:30,770 --> 00:11:34,520
that makes a request to a third-party

00:11:32,180 --> 00:11:36,830
API and it does that within the page

00:11:34,520 --> 00:11:38,420
request cycle let's say you need to get

00:11:36,830 --> 00:11:40,460
information from a third-party API to

00:11:38,420 --> 00:11:42,740
display information about a user just as

00:11:40,460 --> 00:11:44,210
an example then you're going to spend

00:11:42,740 --> 00:11:46,100
time and the users going to have to sit

00:11:44,210 --> 00:11:48,290
there and wait and that's what you can

00:11:46,100 --> 00:11:50,330
see in this in this little screen shot

00:11:48,290 --> 00:11:52,160
from an ex h prof ron you can see that

00:11:50,330 --> 00:11:55,040
there's this soap client do request and

00:11:52,160 --> 00:11:59,690
it's taking off basically almost half a

00:11:55,040 --> 00:12:01,490
second 467 milliseconds to make that

00:11:59,690 --> 00:12:02,750
request meanwhile that's time the user

00:12:01,490 --> 00:12:05,060
sitting there waiting for the page to

00:12:02,750 --> 00:12:06,710
execute if we can queue that and have it

00:12:05,060 --> 00:12:09,320
run somewhere outside the page request

00:12:06,710 --> 00:12:12,020
then it's going to be it's going to be

00:12:09,320 --> 00:12:13,340
more more performant just so you know

00:12:12,020 --> 00:12:15,260
that there's a little bit of counting

00:12:13,340 --> 00:12:17,030
going on of you people in the session so

00:12:15,260 --> 00:12:23,150
if you're wondering why so much pointing

00:12:17,030 --> 00:12:24,800
at you that is probably why great so we

00:12:23,150 --> 00:12:28,040
might find excessive calls to a watchdog

00:12:24,800 --> 00:12:29,750
which is the Drupal system log notices

00:12:28,040 --> 00:12:33,500
can slow down your site so if you have a

00:12:29,750 --> 00:12:35,090
lot of kind of PHP code that you really

00:12:33,500 --> 00:12:36,530
mean to go back and fix one day but it's

00:12:35,090 --> 00:12:38,600
not causing any critical errors it's

00:12:36,530 --> 00:12:40,640
just causing notices those notices in

00:12:38,600 --> 00:12:42,830
the process of writing them to the

00:12:40,640 --> 00:12:45,080
database when they occur can actually

00:12:42,830 --> 00:12:47,330
build up and incrementally add to your

00:12:45,080 --> 00:12:51,140
page execution time so fix those notices

00:12:47,330 --> 00:12:52,760
it's another thing we might find views

00:12:51,140 --> 00:12:54,140
in panels render time so we talked about

00:12:52,760 --> 00:12:55,110
this a little bit a little bit earlier

00:12:54,140 --> 00:12:57,750
but

00:12:55,110 --> 00:12:59,579
when you're rendering the view it may be

00:12:57,750 --> 00:13:01,380
that the process of rendering the view

00:12:59,579 --> 00:13:03,560
is actually more expensive than anything

00:13:01,380 --> 00:13:05,910
else so I think often times we hear that

00:13:03,560 --> 00:13:07,740
views gets a bad rap for assembling

00:13:05,910 --> 00:13:10,529
inefficient database queries which is

00:13:07,740 --> 00:13:12,060
sometimes true but very often the time

00:13:10,529 --> 00:13:14,209
that you spend with views and incur

00:13:12,060 --> 00:13:16,860
performance penalty actually comes from

00:13:14,209 --> 00:13:19,860
rendering the view you know theming the

00:13:16,860 --> 00:13:22,140
results rather than running the query we

00:13:19,860 --> 00:13:23,760
may also find a snail riding a turtle

00:13:22,140 --> 00:13:27,540
because somebody thought that would be a

00:13:23,760 --> 00:13:28,740
good thing to add to a website if you if

00:13:27,540 --> 00:13:32,100
you find this you want to just take it

00:13:28,740 --> 00:13:35,010
out all right so how do we get started

00:13:32,100 --> 00:13:36,420
with XH prov I'm not going to redo pages

00:13:35,010 --> 00:13:39,200
and pages of documentation because that

00:13:36,420 --> 00:13:41,399
would not be a smart use of our time but

00:13:39,200 --> 00:13:44,250
there's a few different ways in general

00:13:41,399 --> 00:13:45,690
if you want to install XH prov on you

00:13:44,250 --> 00:13:47,940
and you're running brew on Mac you can

00:13:45,690 --> 00:13:50,430
do brew & Spell XH prof there's a really

00:13:47,940 --> 00:13:53,339
handy Drupal XH prof module which is a

00:13:50,430 --> 00:13:55,950
very easy way and convenient way to do X

00:13:53,339 --> 00:13:58,380
800 lat profiling in your site there's

00:13:55,950 --> 00:14:00,779
also this handy single file tool which

00:13:58,380 --> 00:14:02,730
is great if you want to share an x h

00:14:00,779 --> 00:14:04,860
prof run file and have someone else look

00:14:02,730 --> 00:14:08,880
at the results of that you found in your

00:14:04,860 --> 00:14:11,220
ear own XH prof analysis so we want to

00:14:08,880 --> 00:14:13,019
avoid having bad data in our in our X H

00:14:11,220 --> 00:14:14,160
prof. runs so there's a few things that

00:14:13,019 --> 00:14:15,930
you're going to want to do before you

00:14:14,160 --> 00:14:17,070
you know you get started to make sure

00:14:15,930 --> 00:14:19,649
that the data you're looking at is

00:14:17,070 --> 00:14:21,839
useful so first of all if you have a

00:14:19,649 --> 00:14:23,640
menu rebuild and a registry rebuild with

00:14:21,839 --> 00:14:25,620
in Drupal it within a page request that

00:14:23,640 --> 00:14:26,699
you're profiling the page is going to be

00:14:25,620 --> 00:14:28,740
slow and there's going to be a lot of

00:14:26,699 --> 00:14:30,810
extra processing going on in that page

00:14:28,740 --> 00:14:33,510
that is not going to be useful to you

00:14:30,810 --> 00:14:35,310
because it's it's definitely not common

00:14:33,510 --> 00:14:38,279
to have a registry rebuild happen within

00:14:35,310 --> 00:14:39,990
an end users page request cycle in

00:14:38,279 --> 00:14:41,910
general you want to leave the develop

00:14:39,990 --> 00:14:43,769
query log off since that that can also

00:14:41,910 --> 00:14:45,449
add some incremental overhead if you

00:14:43,769 --> 00:14:47,310
want to come back and turn it on to an

00:14:45,449 --> 00:14:48,709
analyze a query that's great but in

00:14:47,310 --> 00:14:51,570
general I recommend turning it off

00:14:48,709 --> 00:14:53,600
another one is X debug definitely turn

00:14:51,570 --> 00:14:56,490
this off make sure it's completely off

00:14:53,600 --> 00:15:01,440
this really can add a non-trivial amount

00:14:56,490 --> 00:15:02,820
of time to your cheer wall time and you

00:15:01,440 --> 00:15:04,260
know I've certainly made the mistake of

00:15:02,820 --> 00:15:05,740
not leaving it on and then spend time

00:15:04,260 --> 00:15:08,260
looking at results in them only

00:15:05,740 --> 00:15:09,850
find out that I didn't disable a XD bug

00:15:08,260 --> 00:15:12,310
in my environment and it's definitely a

00:15:09,850 --> 00:15:14,230
bummer when that happens another thing

00:15:12,310 --> 00:15:16,810
that I think is sometimes easy to

00:15:14,230 --> 00:15:18,670
overlook is you want to test as an end

00:15:16,810 --> 00:15:21,280
user with the same level of permissions

00:15:18,670 --> 00:15:22,720
that that you're optimizing for so if

00:15:21,280 --> 00:15:24,790
you login as user one or another

00:15:22,720 --> 00:15:26,980
administrator on your site there's that

00:15:24,790 --> 00:15:28,570
that user is going to be bypassing a lot

00:15:26,980 --> 00:15:30,250
of the permission and access checking

00:15:28,570 --> 00:15:32,500
control that will happen behind the

00:15:30,250 --> 00:15:34,510
scenes and that stuff that you want to

00:15:32,500 --> 00:15:36,280
see because that's likely stuff that's

00:15:34,510 --> 00:15:39,610
contributing to page execution time and

00:15:36,280 --> 00:15:41,800
stuff you want to optimize you also want

00:15:39,610 --> 00:15:43,000
to know which caches are in place so one

00:15:41,800 --> 00:15:45,640
thing that can really throw off your

00:15:43,000 --> 00:15:47,140
investigation is if you keep profiling a

00:15:45,640 --> 00:15:49,330
site you could look at the same page and

00:15:47,140 --> 00:15:51,250
get you know widely different results

00:15:49,330 --> 00:15:53,050
each time and sometimes that can happen

00:15:51,250 --> 00:15:54,130
when you're hitting a you know various

00:15:53,050 --> 00:15:56,380
different caches and you're not sure

00:15:54,130 --> 00:15:59,320
which ones you're hitting so there's a

00:15:56,380 --> 00:16:01,330
handy script again by marks on bottom to

00:15:59,320 --> 00:16:02,830
disable the views and panels or the

00:16:01,330 --> 00:16:04,990
rather the views caches on your site

00:16:02,830 --> 00:16:07,210
there's also the views cash audit tool

00:16:04,990 --> 00:16:08,860
and rush that's useful but this is a

00:16:07,210 --> 00:16:10,780
handy little script and that will

00:16:08,860 --> 00:16:11,980
disable all your views caches and that's

00:16:10,780 --> 00:16:14,140
a great way to just make sure you're

00:16:11,980 --> 00:16:16,120
getting more consistent results so that

00:16:14,140 --> 00:16:17,530
you can hit the same page again and not

00:16:16,120 --> 00:16:20,980
have to worry about whether you're

00:16:17,530 --> 00:16:22,810
seeing a cash drawer on cached page same

00:16:20,980 --> 00:16:25,480
four panels and pain caching and then

00:16:22,810 --> 00:16:28,480
there's other kinds of caches mmm

00:16:25,480 --> 00:16:31,360
Scrooge McDuck alright so let's do a

00:16:28,480 --> 00:16:35,130
really quick demo before we talk about

00:16:31,360 --> 00:16:35,130
some more access prof scenarios

00:16:38,329 --> 00:16:43,189
okay so I have a local installation of

00:16:40,999 --> 00:16:46,129
drupal commons here and i've done some

00:16:43,189 --> 00:16:48,769
stuff to it to make it slower and i've

00:16:46,129 --> 00:16:52,089
also enabled the XH prof module I've

00:16:48,769 --> 00:16:55,279
granted the access devel information

00:16:52,089 --> 00:16:56,779
permission to regular and authenticated

00:16:55,279 --> 00:16:58,389
users so that you don't have to be an

00:16:56,779 --> 00:17:00,920
administrator to see this information

00:16:58,389 --> 00:17:03,079
and that's nice because the XH prof

00:17:00,920 --> 00:17:05,029
module when it's enabled and set to

00:17:03,079 --> 00:17:07,429
profile every request has this handy

00:17:05,029 --> 00:17:09,409
little XH prof output URL on the bottom

00:17:07,429 --> 00:17:11,449
and so all you have to do is click that

00:17:09,409 --> 00:17:13,939
URL at the bottom of a page and you'll

00:17:11,449 --> 00:17:16,189
see the run information for for that

00:17:13,939 --> 00:17:19,370
page so let's refresh this page and see

00:17:16,189 --> 00:17:22,669
if it's fast spoiler it takes a few

00:17:19,370 --> 00:17:24,409
seconds right that's not ideal so this

00:17:22,669 --> 00:17:26,539
is this is the first example I'm

00:17:24,409 --> 00:17:28,490
actually going to just copy this link

00:17:26,539 --> 00:17:30,440
and open it in a different browser

00:17:28,490 --> 00:17:31,909
window so that i get the administrative

00:17:30,440 --> 00:17:33,850
theme so over here i'm logged in as the

00:17:31,909 --> 00:17:35,899
administrator but it's the same site i

00:17:33,850 --> 00:17:39,409
could have just clicked that link and

00:17:35,899 --> 00:17:41,059
read it as that end user so this is our

00:17:39,409 --> 00:17:42,830
first XH profit report that we're

00:17:41,059 --> 00:17:45,409
looking at right and on the top you can

00:17:42,830 --> 00:17:48,799
see the total wall time total cpu time

00:17:45,409 --> 00:17:52,250
they're pretty similar and we're seeing

00:17:48,799 --> 00:17:53,809
the the top 100 functions so one thing

00:17:52,250 --> 00:17:56,120
we could do just to take a look around

00:17:53,809 --> 00:17:59,000
here is we could start by looking at

00:17:56,120 --> 00:18:00,740
inclusive wall time and this is a handy

00:17:59,000 --> 00:18:03,200
way if you want to just look kind of top

00:18:00,740 --> 00:18:04,700
down and see is there any point in the

00:18:03,200 --> 00:18:07,639
request where there's a significant

00:18:04,700 --> 00:18:10,010
drop-off in time right and so you can

00:18:07,639 --> 00:18:11,929
see pretty quickly as we scroll down

00:18:10,010 --> 00:18:15,260
there's this big drop-off where we have

00:18:11,929 --> 00:18:17,120
1.7 seconds down 2.9 seconds right and

00:18:15,260 --> 00:18:19,429
that's right after we run the comments

00:18:17,120 --> 00:18:21,500
posts innate function so that seems like

00:18:19,429 --> 00:18:23,120
a suspect we could also sort by

00:18:21,500 --> 00:18:29,000
exclusive wall time so let's go ahead

00:18:23,120 --> 00:18:30,350
and do that and if we sort by exclusive

00:18:29,000 --> 00:18:32,659
wall time we can now see that there's

00:18:30,350 --> 00:18:36,440
one call to comments posts in it and

00:18:32,659 --> 00:18:37,639
that one call takes 1.7 seconds so we

00:18:36,440 --> 00:18:40,639
know that this is something we want to

00:18:37,639 --> 00:18:42,919
take a look at right so comments posts

00:18:40,639 --> 00:18:44,659
in it and if we click that name of that

00:18:42,919 --> 00:18:47,539
function we can see the call path that

00:18:44,659 --> 00:18:49,700
resulted in this function it was called

00:18:47,539 --> 00:18:50,090
by user func array if we click that as

00:18:49,700 --> 00:18:52,190
the

00:18:50,090 --> 00:18:55,520
function basically what we're seeing is

00:18:52,190 --> 00:18:58,429
a Drupal hook implementation and

00:18:55,520 --> 00:19:00,350
invocation so module invoke all all

00:18:58,429 --> 00:19:02,720
modules that info cook in it are being

00:19:00,350 --> 00:19:06,140
run which is taking us to the function

00:19:02,720 --> 00:19:09,890
comments posts in it so let's take a

00:19:06,140 --> 00:19:11,870
look at commons posts in it this is an

00:19:09,890 --> 00:19:13,490
example but you can see that comments

00:19:11,870 --> 00:19:16,340
posted it does some really inefficient

00:19:13,490 --> 00:19:17,659
stuff and the comment is add magic to

00:19:16,340 --> 00:19:19,520
sauce I don't know what that means I'm

00:19:17,659 --> 00:19:20,690
not sure who this developer was but we

00:19:19,520 --> 00:19:24,440
probably want to remove them and their

00:19:20,690 --> 00:19:25,940
code from the project so if we go ahead

00:19:24,440 --> 00:19:28,760
and let's just do a before-and-after

00:19:25,940 --> 00:19:30,740
right so if we go back to this non

00:19:28,760 --> 00:19:33,220
administrative user haven't made any

00:19:30,740 --> 00:19:36,020
changes yet I can go ahead and refresh

00:19:33,220 --> 00:19:39,260
it's still taking you know it still

00:19:36,020 --> 00:19:40,640
takes a little bit of time so let's now

00:19:39,260 --> 00:19:44,659
go ahead and remove this problematic

00:19:40,640 --> 00:19:46,190
code and i'll actually just clear the

00:19:44,659 --> 00:19:47,390
cache since we're actually no i'm not

00:19:46,190 --> 00:19:49,789
gonna clear the cache I'm just going to

00:19:47,390 --> 00:19:53,419
comment out the code here so we're going

00:19:49,789 --> 00:19:55,640
to return and so now this code is not

00:19:53,419 --> 00:19:59,690
being run and we can refresh the page

00:19:55,640 --> 00:20:01,429
and it does load much it seems to load

00:19:59,690 --> 00:20:04,190
much faster but let's confirm that so

00:20:01,429 --> 00:20:08,090
I'll open this new XH prof run and we

00:20:04,190 --> 00:20:10,070
can compare it to the old one so now we

00:20:08,090 --> 00:20:13,669
see that the inclusive wall time was one

00:20:10,070 --> 00:20:18,340
second whereas before it was 1.7 seconds

00:20:13,669 --> 00:20:18,340
let's see somewhere around there right

00:20:19,559 --> 00:20:25,860
before it was 2.7 seconds so we saved

00:20:22,980 --> 00:20:28,860
about 1.7 seconds of all time and we can

00:20:25,860 --> 00:20:32,190
say by looking here write comments post

00:20:28,860 --> 00:20:34,740
in it we can search and just see that

00:20:32,190 --> 00:20:37,110
that function is not even showing up in

00:20:34,740 --> 00:20:38,669
this in this list of functions so we

00:20:37,110 --> 00:20:40,999
don't have to speculate we can say

00:20:38,669 --> 00:20:45,029
comments posts in it we saw right here

00:20:40,999 --> 00:20:49,139
that it was responsible for too far back

00:20:45,029 --> 00:20:52,139
right here that it was responsible for

00:20:49,139 --> 00:20:56,850
1.7 seconds of inclusive of all time or

00:20:52,139 --> 00:20:59,850
better yet exclusive full time and now

00:20:56,850 --> 00:21:02,639
when we removed it we lost 1.7 seconds

00:20:59,850 --> 00:21:04,230
from the page request the page execution

00:21:02,639 --> 00:21:05,909
and we see that that function is no

00:21:04,230 --> 00:21:07,529
longer called so we can pretty

00:21:05,909 --> 00:21:10,200
definitively say that this function was

00:21:07,529 --> 00:21:12,090
the problem so this is a little bit of a

00:21:10,200 --> 00:21:13,559
you know this is an example where it's

00:21:12,090 --> 00:21:15,659
it's unlikely that you'll have something

00:21:13,559 --> 00:21:17,940
a block of code that's quite that bad

00:21:15,659 --> 00:21:19,980
but in fact you actually will see

00:21:17,940 --> 00:21:21,659
different different issues where there

00:21:19,980 --> 00:21:23,909
is something that is very clear that

00:21:21,659 --> 00:21:25,350
it's a performance problem but it wasn't

00:21:23,909 --> 00:21:28,220
you know wasn't clear that developer

00:21:25,350 --> 00:21:30,690
when they wrote that that bit of code

00:21:28,220 --> 00:21:32,580
and we saved a whole bunch of time

00:21:30,690 --> 00:21:35,070
guessing we didn't have to speculate we

00:21:32,580 --> 00:21:36,779
went right to the problem so obviously

00:21:35,070 --> 00:21:38,549
that's a simple example now a little

00:21:36,779 --> 00:21:39,929
later I want to walk through some real

00:21:38,549 --> 00:21:42,090
world examples of things that we found

00:21:39,929 --> 00:21:46,019
by the XH prof and what the remediations

00:21:42,090 --> 00:21:47,580
were for those issues but first I want

00:21:46,019 --> 00:21:49,950
to talk about how to deal with when the

00:21:47,580 --> 00:21:51,570
site is slow right often you'll you'll

00:21:49,950 --> 00:21:54,480
get a request that oh my goodness the

00:21:51,570 --> 00:21:55,820
site is slow what do we do and there's a

00:21:54,480 --> 00:21:58,169
lot of urgency around that request

00:21:55,820 --> 00:21:59,759
performance is you know very important

00:21:58,169 --> 00:22:01,889
and understandably folks get a little

00:21:59,759 --> 00:22:04,350
panicked when performances is not good

00:22:01,889 --> 00:22:05,700
on their site in general we want to

00:22:04,350 --> 00:22:08,549
measure performance we want to

00:22:05,700 --> 00:22:10,619
understand what exactly is going on on

00:22:08,549 --> 00:22:12,690
the site in a more specific way and so

00:22:10,619 --> 00:22:15,539
one thing that I like to do is to

00:22:12,690 --> 00:22:17,220
develop a plan around what are our goals

00:22:15,539 --> 00:22:19,470
for performance on the site that's very

00:22:17,220 --> 00:22:21,509
specific and the reason for that is that

00:22:19,470 --> 00:22:23,970
it allows us to identify when we've

00:22:21,509 --> 00:22:25,259
reached success and because we've

00:22:23,970 --> 00:22:27,179
defined what success looks like in

00:22:25,259 --> 00:22:29,720
advance so there's no because otherwise

00:22:27,179 --> 00:22:33,210
you can tune until the cows come home

00:22:29,720 --> 00:22:36,049
and you won't know if you're done so

00:22:33,210 --> 00:22:39,330
I like to have is success as defined by

00:22:36,049 --> 00:22:41,279
execution time on a specific page logged

00:22:39,330 --> 00:22:44,690
in a specific user under specific

00:22:41,279 --> 00:22:47,940
conditions so we can say you know user

00:22:44,690 --> 00:22:50,100
Steve will log in to this page under

00:22:47,940 --> 00:22:51,630
this condition and it will take one

00:22:50,100 --> 00:22:53,130
second or less to execute the page

00:22:51,630 --> 00:22:54,720
that's how we know when we've reached

00:22:53,130 --> 00:22:57,059
our performance goal and that's a very

00:22:54,720 --> 00:22:58,980
specific goal two people can look at the

00:22:57,059 --> 00:23:00,720
page execution time and agree either

00:22:58,980 --> 00:23:03,120
it's one second or below or it's not

00:23:00,720 --> 00:23:05,250
right there's no gray area there and it

00:23:03,120 --> 00:23:07,140
also by quantifying things in this way

00:23:05,250 --> 00:23:08,340
we can actually quantify our

00:23:07,140 --> 00:23:11,940
improvements that we've made on a

00:23:08,340 --> 00:23:14,190
page-by-page basis so at the end of you

00:23:11,940 --> 00:23:16,500
know we could do before and after for

00:23:14,190 --> 00:23:18,779
all of those conditions and say look for

00:23:16,500 --> 00:23:20,669
users with this role on this page we

00:23:18,779 --> 00:23:22,500
consistently improve page execution time

00:23:20,669 --> 00:23:24,419
by for example two seconds or fifty

00:23:22,500 --> 00:23:27,600
percent or whatever it was for that page

00:23:24,419 --> 00:23:29,669
and that's that's a really appreciable

00:23:27,600 --> 00:23:32,809
thing for you and ideally for for the

00:23:29,669 --> 00:23:34,799
stakeholders that you're working for on

00:23:32,809 --> 00:23:36,809
sometimes when you'll have more than one

00:23:34,799 --> 00:23:38,460
person working on a site and recording

00:23:36,809 --> 00:23:39,539
observations whether it's in the same

00:23:38,460 --> 00:23:41,490
environment or a different environment

00:23:39,539 --> 00:23:43,140
it can be really handy to have a

00:23:41,490 --> 00:23:45,600
structured way to write down your

00:23:43,140 --> 00:23:48,330
observations and so I like to just do a

00:23:45,600 --> 00:23:50,669
simple Google spreadsheet where I record

00:23:48,330 --> 00:23:52,140
the date the environment the user that

00:23:50,669 --> 00:23:54,450
was logged in the path that we're

00:23:52,140 --> 00:23:57,750
looking at the execution time that we

00:23:54,450 --> 00:23:59,309
saw if you have a URL to the XH prof run

00:23:57,750 --> 00:24:01,679
file so you can see specific results

00:23:59,309 --> 00:24:03,779
that's always can be the person who

00:24:01,679 --> 00:24:05,490
observed that and then the notes and the

00:24:03,779 --> 00:24:07,049
reason for that is just if you're

00:24:05,490 --> 00:24:08,850
looking at even if it's just three

00:24:07,049 --> 00:24:10,620
different pages if you're looking at the

00:24:08,850 --> 00:24:12,450
page tweaking some settings trying to

00:24:10,620 --> 00:24:14,789
disable caches you're going to load that

00:24:12,450 --> 00:24:16,649
page many times and it's likely that you

00:24:14,789 --> 00:24:19,529
will forget the exact set of conditions

00:24:16,649 --> 00:24:21,539
that you used to profile that page and

00:24:19,529 --> 00:24:23,970
what the results were and so it can be

00:24:21,539 --> 00:24:25,320
really handy to just have this kind of

00:24:23,970 --> 00:24:27,990
as a scratch pad either just for

00:24:25,320 --> 00:24:30,570
yourself or shared across a team of

00:24:27,990 --> 00:24:34,289
people working on a site to help improve

00:24:30,570 --> 00:24:38,250
performance all right so some case

00:24:34,289 --> 00:24:40,289
examples and these are things that we

00:24:38,250 --> 00:24:42,149
found mostly things that we found

00:24:40,289 --> 00:24:43,130
working on the common scene or other

00:24:42,149 --> 00:24:46,070
things that we found

00:24:43,130 --> 00:24:49,190
as we related to that so the first

00:24:46,070 --> 00:24:50,360
example does anybody anybody want to

00:24:49,190 --> 00:24:52,010
take a guess of what we're seeing here

00:24:50,360 --> 00:24:56,570
that there's there's one thing that at

00:24:52,010 --> 00:24:58,100
least to me really stands out we've got

00:24:56,570 --> 00:25:00,290
I'll give you a start right we've got

00:24:58,100 --> 00:25:03,740
the function C tools token content type

00:25:00,290 --> 00:25:06,770
content types it's called 84 times and

00:25:03,740 --> 00:25:09,980
it takes 2.8 seconds of inclusive of all

00:25:06,770 --> 00:25:11,330
time from that function on down so does

00:25:09,980 --> 00:25:13,040
anything stand out to anybody about

00:25:11,330 --> 00:25:16,060
about what we're seeing here maybe

00:25:13,040 --> 00:25:16,060
something that seems a little unusual

00:25:16,630 --> 00:25:24,950
yeah yeah so you're spending over a

00:25:23,270 --> 00:25:27,290
second localizing strings right that's

00:25:24,950 --> 00:25:29,000
the T function in Drupal is the is the

00:25:27,290 --> 00:25:30,110
function that we use to localize strings

00:25:29,000 --> 00:25:32,390
in the UI and make sure that they're

00:25:30,110 --> 00:25:34,910
translatable so that seems like a long

00:25:32,390 --> 00:25:38,090
time and in fact it is a long time one

00:25:34,910 --> 00:25:40,610
second out of 2.8 seconds is definitely

00:25:38,090 --> 00:25:42,440
non-trivial for this code path and also

00:25:40,610 --> 00:25:46,790
the number of calls right we're calling

00:25:42,440 --> 00:25:50,090
t100 over 128,000 times that is too many

00:25:46,790 --> 00:25:52,760
times to be calling t you probably don't

00:25:50,090 --> 00:25:55,280
have 120,000 strings on your on your UI

00:25:52,760 --> 00:25:57,549
if you do you could consider a more

00:25:55,280 --> 00:25:59,529
simple UI

00:25:57,549 --> 00:26:01,690
just a little bit of advice that's not a

00:25:59,529 --> 00:26:03,669
UX session but I'll put that out there

00:26:01,690 --> 00:26:05,139
so this was a real world example that's

00:26:03,669 --> 00:26:07,419
the souple note if you want to look at

00:26:05,139 --> 00:26:09,249
the details but this was actually a very

00:26:07,419 --> 00:26:11,529
simple issue to fix right we just needed

00:26:09,249 --> 00:26:14,350
to add a static cash to see tools right

00:26:11,529 --> 00:26:15,869
adding that static cash we could see the

00:26:14,350 --> 00:26:18,460
results of that right we eliminated

00:26:15,869 --> 00:26:20,649
128,000 calls to t in this particular

00:26:18,460 --> 00:26:23,619
environment we reduced page execution

00:26:20,649 --> 00:26:25,509
time by two seconds which was I think

00:26:23,619 --> 00:26:27,610
two seconds out of almost a three second

00:26:25,509 --> 00:26:30,580
page load we significantly reduce the

00:26:27,610 --> 00:26:32,710
memory footprint and the fix was really

00:26:30,580 --> 00:26:35,080
simple right now this is another example

00:26:32,710 --> 00:26:36,309
I would never have speculated oh we're

00:26:35,080 --> 00:26:38,320
probably calling T a lot of times they

00:26:36,309 --> 00:26:41,739
need to add a static cash but with XH

00:26:38,320 --> 00:26:43,059
prof it's very easy to dig in see that

00:26:41,739 --> 00:26:44,409
you know it sticks out almost like a

00:26:43,059 --> 00:26:46,480
sort of thumb once you're used to

00:26:44,409 --> 00:26:47,980
looking at that data and and come up

00:26:46,480 --> 00:26:51,580
with a really surgical remediation

00:26:47,980 --> 00:26:53,379
that's that's actually very easy any

00:26:51,580 --> 00:26:57,840
questions about that specific example

00:26:53,379 --> 00:27:00,429
before we move on static ashes all right

00:26:57,840 --> 00:27:02,249
here's another static cash example and

00:27:00,429 --> 00:27:05,169
I'll just talk through this one

00:27:02,249 --> 00:27:06,730
basically we have the Drupal node access

00:27:05,169 --> 00:27:09,279
grant system which is how we determine

00:27:06,730 --> 00:27:11,559
whether a given user has access to

00:27:09,279 --> 00:27:16,359
perform a given action on a specific

00:27:11,559 --> 00:27:18,039
piece of content and we and the list of

00:27:16,359 --> 00:27:20,289
grants that they have which is like you

00:27:18,039 --> 00:27:23,259
can see this but not that basically it

00:27:20,289 --> 00:27:25,239
never changes within a page request yet

00:27:23,259 --> 00:27:27,609
we do compute it multiple times within a

00:27:25,239 --> 00:27:29,799
page request so in Drupal core so this

00:27:27,609 --> 00:27:32,769
is another example where a simple static

00:27:29,799 --> 00:27:34,629
hash really improves performance and

00:27:32,769 --> 00:27:36,249
it's also another example of a system

00:27:34,629 --> 00:27:38,139
where I think you know the node access

00:27:36,249 --> 00:27:39,970
system definitely balances a lot of

00:27:38,139 --> 00:27:42,039
factors to produce it makes it possible

00:27:39,970 --> 00:27:44,409
for you to configure access control in a

00:27:42,039 --> 00:27:46,629
complex system so in some ways it's not

00:27:44,409 --> 00:27:48,609
as performant as a system that maybe you

00:27:46,629 --> 00:27:49,899
wrote completely from scratch that's

00:27:48,609 --> 00:27:51,639
always kind of the trade-off that we

00:27:49,899 --> 00:27:54,129
deal with with a assembled system like

00:27:51,639 --> 00:27:55,749
drupal but there's still things that we

00:27:54,129 --> 00:27:57,429
can do to improve performance there so

00:27:55,749 --> 00:27:59,350
rather than rewriting the whole note

00:27:57,429 --> 00:28:01,029
access system for example or just

00:27:59,350 --> 00:28:04,149
tossing it out we were able to make a

00:28:01,029 --> 00:28:07,080
surgical improvement I think Eric web

00:28:04,149 --> 00:28:10,480
worked on this issue yeah thanks Eric

00:28:07,080 --> 00:28:15,250
benefiting all Drupal core users

00:28:10,480 --> 00:28:18,050
another issue let's let's open that up

00:28:15,250 --> 00:28:19,970
it's open up the drew blood or URL so

00:28:18,050 --> 00:28:24,080
avoid unnecessary entity loads and group

00:28:19,970 --> 00:28:26,900
reference fields this is another one

00:28:24,080 --> 00:28:28,670
where basically we identified a code

00:28:26,900 --> 00:28:30,830
path in organic groups that under some

00:28:28,670 --> 00:28:33,710
very extreme conditions that happen on

00:28:30,830 --> 00:28:36,080
almost no sites but did happen under the

00:28:33,710 --> 00:28:38,270
site that we were looking at if you have

00:28:36,080 --> 00:28:39,890
a node reference field or an entity

00:28:38,270 --> 00:28:41,660
reference field that references a large

00:28:39,890 --> 00:28:45,230
number of groups like seven thousand of

00:28:41,660 --> 00:28:47,210
them that that can be not performant and

00:28:45,230 --> 00:28:48,770
the reason for that it turned out was

00:28:47,210 --> 00:28:50,660
simply that we were loading all the

00:28:48,770 --> 00:28:52,520
reference entities anytime we loaded the

00:28:50,660 --> 00:28:54,500
containing entity so in this case we

00:28:52,520 --> 00:28:56,510
head up users users reference groups

00:28:54,500 --> 00:28:59,150
users could be part of 7000 groups

00:28:56,510 --> 00:29:00,620
anytime we say you're logged in and you

00:28:59,150 --> 00:29:02,390
want to look at a list of seven users

00:29:00,620 --> 00:29:04,640
for each of those seven users we close

00:29:02,390 --> 00:29:06,800
the load the user account and all seven

00:29:04,640 --> 00:29:10,130
thousand of that users groups that was

00:29:06,800 --> 00:29:11,360
not performing right and we could have

00:29:10,130 --> 00:29:12,830
added more servers we could have there's

00:29:11,360 --> 00:29:15,920
lots of things we might have done but in

00:29:12,830 --> 00:29:17,990
fact it was very it was relatively easy

00:29:15,920 --> 00:29:24,200
to write a patch to just not load those

00:29:17,990 --> 00:29:27,100
entities so that was that was a pretty

00:29:24,200 --> 00:29:27,100
useful remediation

00:29:31,570 --> 00:29:36,280
so this is a more detailed example of

00:29:34,390 --> 00:29:38,710
the problem statement that i generalize

00:29:36,280 --> 00:29:40,600
earlier so in a site with 43 thousand

00:29:38,710 --> 00:29:42,160
users where each user's group and can

00:29:40,600 --> 00:29:44,080
reference other groups the users trusted

00:29:42,160 --> 00:29:46,420
contacts we experience page execution

00:29:44,080 --> 00:29:47,620
times of 15 to 20 seconds apparently

00:29:46,420 --> 00:29:49,840
resulting from large numbers of Manatee

00:29:47,620 --> 00:29:53,950
loads and then I went on to describe the

00:29:49,840 --> 00:29:55,630
code path that that made that happen and

00:29:53,950 --> 00:29:57,790
then the fact that we observed that when

00:29:55,630 --> 00:29:59,830
we change the code path we went from 15

00:29:57,790 --> 00:30:02,050
to 20 seconds to 1 to 2 seconds of page

00:29:59,830 --> 00:30:05,280
execution time and this is a patch that

00:30:02,050 --> 00:30:05,280
was committed to organic groups

00:30:10,690 --> 00:30:15,009
alright and so the last one is

00:30:12,619 --> 00:30:18,830
optimizing note access query building so

00:30:15,009 --> 00:30:20,720
this is another one where on part of

00:30:18,830 --> 00:30:23,119
that little black out to LA where we

00:30:20,720 --> 00:30:25,539
switch between context here this is

00:30:23,119 --> 00:30:25,539
another one where

00:30:44,300 --> 00:30:49,010
great

00:30:46,130 --> 00:30:51,830
so this is another one where we were

00:30:49,010 --> 00:30:54,320
able to optimize performance of the note

00:30:51,830 --> 00:30:56,930
access system and the way that we

00:30:54,320 --> 00:30:58,220
assemble grants right and so it's a

00:30:56,930 --> 00:31:00,080
little bit and you could say that this

00:30:58,220 --> 00:31:02,210
is an edge case just in that it only

00:31:00,080 --> 00:31:04,610
happens on sites with outrageous numbers

00:31:02,210 --> 00:31:06,020
of you know aegis amounts of content but

00:31:04,610 --> 00:31:09,860
it's still important for Drupal to scale

00:31:06,020 --> 00:31:11,240
to that number of sites and so I'm

00:31:09,860 --> 00:31:17,930
trying to find the ultimate patch that

00:31:11,240 --> 00:31:19,820
we committed here so another another

00:31:17,930 --> 00:31:22,490
great Eric web patch and as you can see

00:31:19,820 --> 00:31:24,560
it's a relatively simple change to the

00:31:22,490 --> 00:31:27,260
way that we assemble note access grants

00:31:24,560 --> 00:31:28,610
we defined a new API function and in the

00:31:27,260 --> 00:31:30,740
scheme of things like it's not a super

00:31:28,610 --> 00:31:33,500
long patch but this patch had a really

00:31:30,740 --> 00:31:34,640
significant performance improvement and

00:31:33,500 --> 00:31:36,530
it was another case where we took a

00:31:34,640 --> 00:31:37,850
system that folks I think it's easy to

00:31:36,530 --> 00:31:39,320
say oh that just doesn't perform well

00:31:37,850 --> 00:31:41,240
and we made it perform better by

00:31:39,320 --> 00:31:47,750
specifically looking at the challenges

00:31:41,240 --> 00:31:49,790
to scaling that system so those are the

00:31:47,750 --> 00:31:51,050
case examples i wanted to show i'm happy

00:31:49,790 --> 00:31:52,910
to take questions and folks have

00:31:51,050 --> 00:31:54,770
questions about XH prof or performance

00:31:52,910 --> 00:31:57,290
or other things we've also got some

00:31:54,770 --> 00:32:05,930
super smart people in the audience that

00:31:57,290 --> 00:32:07,220
may or may not troll hi yeah yeah so the

00:32:05,930 --> 00:32:09,230
question was is there a reason that I

00:32:07,220 --> 00:32:11,060
like to use the XH prof module instead

00:32:09,230 --> 00:32:14,420
of axh profit support that comes with

00:32:11,060 --> 00:32:16,160
devel really I just like that the XH

00:32:14,420 --> 00:32:19,220
prof module puts that handy little link

00:32:16,160 --> 00:32:21,110
in the footer and it's super easy to

00:32:19,220 --> 00:32:23,360
just download the module and turn it on

00:32:21,110 --> 00:32:24,680
and configure it I think they both work

00:32:23,360 --> 00:32:28,030
great it's just kind of a matter of

00:32:24,680 --> 00:32:28,030
personal preference as far as I can tell

00:32:28,600 --> 00:32:33,049
develop what's a link at the bottom

00:32:30,550 --> 00:32:36,889
wowza

00:32:33,049 --> 00:32:55,489
all right is that so we have maintained

00:32:36,889 --> 00:32:56,659
errs of develoment room this is getting

00:32:55,489 --> 00:32:58,999
hard to repeat you wanna speak to them

00:32:56,659 --> 00:33:04,610
okay so yeah and I can summarize I think

00:32:58,999 --> 00:33:09,619
everything you're getting at mush that's

00:33:04,610 --> 00:33:12,019
Mark's not about bug so so the develop

00:33:09,619 --> 00:33:14,320
ort and are the extra frost important to

00:33:12,019 --> 00:33:16,789
velvet does is it it handles the

00:33:14,320 --> 00:33:18,289
enabling and disabling it does give you

00:33:16,789 --> 00:33:20,480
the link at the bottom but then it

00:33:18,289 --> 00:33:22,279
requires you to set up the the original

00:33:20,480 --> 00:33:24,139
you I so when you when you go to the

00:33:22,279 --> 00:33:26,210
Facebook project for XH prof there's the

00:33:24,139 --> 00:33:28,850
XH prof PHP extension and there's a

00:33:26,210 --> 00:33:30,980
small little PHP app and that that is

00:33:28,850 --> 00:33:32,570
like the original UI and it works fine

00:33:30,980 --> 00:33:35,720
but it's just another thing to have to

00:33:32,570 --> 00:33:38,419
set up it's very fast I actually

00:33:35,720 --> 00:33:40,789
generally use that myself because it's

00:33:38,419 --> 00:33:43,340
very fast but the reason I wrote the xhr

00:33:40,789 --> 00:33:45,080
off module was if you're going to use it

00:33:43,340 --> 00:33:47,539
in production and it has a few nice

00:33:45,080 --> 00:33:48,950
options for like setting it to like

00:33:47,539 --> 00:33:50,899
sending a sampling interval like you can

00:33:48,950 --> 00:33:52,820
set it to run on every like 300 requests

00:33:50,899 --> 00:33:55,460
so you can get some good data in

00:33:52,820 --> 00:33:58,009
production it also lets you have that

00:33:55,460 --> 00:33:59,840
you I available and you can act it with

00:33:58,009 --> 00:34:01,909
Drupal access control so you don't feel

00:33:59,840 --> 00:34:03,019
like set up a new be host or whatever

00:34:01,909 --> 00:34:05,600
but if you're local and you already know

00:34:03,019 --> 00:34:08,859
how to use the old facebook you I it

00:34:05,600 --> 00:34:08,859
doesn't really matter you use it over

00:34:11,710 --> 00:34:20,169
motion is going to come up the magnet I

00:34:13,730 --> 00:34:20,169
by exit GUI I don't think yes we'll see

00:34:26,190 --> 00:34:33,400
yes so and yet another GUI for this

00:34:29,919 --> 00:34:37,450
stuff xho is the name of the project and

00:34:33,400 --> 00:34:40,510
the URL of the project so you set that

00:34:37,450 --> 00:34:42,520
up on your web server and it analyzes

00:34:40,510 --> 00:34:46,330
run information so that's kind of the

00:34:42,520 --> 00:34:49,240
front end and the way you get runs to be

00:34:46,330 --> 00:34:50,740
recorded is you go to php.ini and

00:34:49,240 --> 00:34:52,929
there's two lines that you have to put

00:34:50,740 --> 00:34:55,890
in there that are in the project I think

00:34:52,929 --> 00:34:59,470
eyes are scrolling through it now it's

00:34:55,890 --> 00:35:02,140
prepend and append in php.ini and then

00:34:59,470 --> 00:35:06,610
you get your run information so you know

00:35:02,140 --> 00:35:09,370
the advantage is if you include the

00:35:06,610 --> 00:35:12,130
stuff within if Drupal is the thing that

00:35:09,370 --> 00:35:13,480
is starting profiling then you're going

00:35:12,130 --> 00:35:15,310
to miss the beginning of your request

00:35:13,480 --> 00:35:18,520
because it takes a while for a Drupal to

00:35:15,310 --> 00:35:21,100
star trek to instruct H your prof x 8

00:35:18,520 --> 00:35:24,070
prov to start recording so you get more

00:35:21,100 --> 00:35:27,970
stuff in your run and the second thing

00:35:24,070 --> 00:35:29,500
is that this is a nice gooey that works

00:35:27,970 --> 00:35:33,310
for things that are outside of Drupal

00:35:29,500 --> 00:35:37,120
and you know the Facebook GUI is really

00:35:33,310 --> 00:35:39,280
dated marks is better than that this

00:35:37,120 --> 00:35:45,190
might even be better than the next H

00:35:39,280 --> 00:35:48,520
prof. module in my opinion Oh Eric de

00:35:45,190 --> 00:35:50,080
roun de uses the different one maybe

00:35:48,520 --> 00:35:51,550
what we should do is just like collect a

00:35:50,080 --> 00:35:54,220
list of all the different XH prof you is

00:35:51,550 --> 00:35:56,350
that you can use I can ok can I just

00:35:54,220 --> 00:35:57,640
augment what so I Malaysia said link

00:35:56,350 --> 00:35:59,530
you're in session it's right go ahead I

00:35:57,640 --> 00:36:00,730
just augment what much just said if

00:35:59,530 --> 00:36:02,080
we're talking about doing a lot more

00:36:00,730 --> 00:36:03,970
symphony stuff will be doing a lot more

00:36:02,080 --> 00:36:06,520
stuff in Drupal 8 where we maybe not

00:36:03,970 --> 00:36:08,770
using Drupal so having something that

00:36:06,520 --> 00:36:11,860
has a GUI that's not relying on Drupal

00:36:08,770 --> 00:36:13,120
might be good idea but what I actually

00:36:11,860 --> 00:36:15,700
wanted to ask was about visualization

00:36:13,120 --> 00:36:18,010
tools sure is there any are there any

00:36:15,700 --> 00:36:22,480
ways to visualize the data the way if

00:36:18,010 --> 00:36:23,710
you like graph is with X to bug ya lumps

00:36:22,480 --> 00:36:24,670
and so I think it depends on what you're

00:36:23,710 --> 00:36:26,920
trying to accomplish I know that

00:36:24,670 --> 00:36:28,870
visualization you know just immediately

00:36:26,920 --> 00:36:31,420
jump at the problem immediately ya know

00:36:28,870 --> 00:36:33,850
all used are to do box plots and things

00:36:31,420 --> 00:36:35,860
like that I'm using data

00:36:33,850 --> 00:36:38,350
I think it sort of depends on the kind

00:36:35,860 --> 00:36:41,410
of visualizations you want to do mark do

00:36:38,350 --> 00:36:43,810
you want to say any more about that you

00:36:41,410 --> 00:36:45,160
want to say it into the mic so the

00:36:43,810 --> 00:36:47,920
original Facebook you I if you have

00:36:45,160 --> 00:36:50,620
graph is installed there's a little link

00:36:47,920 --> 00:36:52,300
at the top to see a I don't know what

00:36:50,620 --> 00:36:54,090
that plot is called but where it puts

00:36:52,300 --> 00:36:56,440
everything in boxes yeah the call graph

00:36:54,090 --> 00:36:58,420
some people find it useful I've honestly

00:36:56,440 --> 00:37:03,130
never found it useful because I can just

00:36:58,420 --> 00:37:05,560
sort and see that big number maybe this

00:37:03,130 --> 00:37:07,180
experience but because I ever everyone's

00:37:05,560 --> 00:37:08,440
problems like I really think about arms

00:37:07,180 --> 00:37:10,210
like maybe I do need to look at this big

00:37:08,440 --> 00:37:11,530
thing of circles and I look at it it's

00:37:10,210 --> 00:37:17,070
like nope this old me exactly what I

00:37:11,530 --> 00:37:19,680
could see in the sorted graph hi there

00:37:17,070 --> 00:37:21,850
you had mentioned disabling XD bug

00:37:19,680 --> 00:37:24,670
before you run this and so I'm curious

00:37:21,850 --> 00:37:27,010
does that mean disabling it in I and I

00:37:24,670 --> 00:37:28,660
or just not turning on a bookmarklet if

00:37:27,010 --> 00:37:30,460
you use that to sable it and then listen

00:37:28,660 --> 00:37:32,830
for it in your IDE yeah you want to make

00:37:30,460 --> 00:37:35,410
sure like if you go to the PHP info

00:37:32,830 --> 00:37:36,850
status page which Drupal exposes an

00:37:35,410 --> 00:37:39,160
admin report status you want to make

00:37:36,850 --> 00:37:46,090
sure there's nothing about x.x debug

00:37:39,160 --> 00:37:48,850
inner okay I'm curious how do you track

00:37:46,090 --> 00:37:50,020
your changes over time like it is it the

00:37:48,850 --> 00:37:52,450
way you showed where you just keep

00:37:50,020 --> 00:37:54,760
opening tabs and making fixes or do you

00:37:52,450 --> 00:37:56,770
actually personally I like to save the

00:37:54,760 --> 00:37:59,230
run file if there's a salient part of

00:37:56,770 --> 00:38:00,790
the run file that is useful to me that

00:37:59,230 --> 00:38:03,100
might take a screenshot of it and then I

00:38:00,790 --> 00:38:05,050
put it in that spreadsheet format that I

00:38:03,100 --> 00:38:06,820
that I just personally like to use and

00:38:05,050 --> 00:38:08,290
that way i can see oh this page with

00:38:06,820 --> 00:38:11,560
this user under this set of conditions

00:38:08,290 --> 00:38:13,240
on tuesday was significantly improved

00:38:11,560 --> 00:38:15,940
from the previous friday after we did x

00:38:13,240 --> 00:38:17,050
y and z um I think it's just a matter of

00:38:15,940 --> 00:38:18,520
personal preference how you want to

00:38:17,050 --> 00:38:21,190
document that I know they're you know

00:38:18,520 --> 00:38:22,660
there's tools like New Relic for example

00:38:21,190 --> 00:38:25,090
which will take aggregate data and

00:38:22,660 --> 00:38:26,620
present that as a graph over time and

00:38:25,090 --> 00:38:28,180
that's you know that's another nice way

00:38:26,620 --> 00:38:30,060
to drag it I just like you know

00:38:28,180 --> 00:38:32,200
personally my preference is to just have

00:38:30,060 --> 00:38:34,540
somewhere where I record the specific

00:38:32,200 --> 00:38:37,060
page execution time for the same set of

00:38:34,540 --> 00:38:40,450
conditions in different different

00:38:37,060 --> 00:38:42,640
instances yeah so if you're using a

00:38:40,450 --> 00:38:43,810
cloud hosting for example like Pantheon

00:38:42,640 --> 00:38:45,820
or whatever that comes with a whole

00:38:43,810 --> 00:38:47,230
layer of caching that's that's in front

00:38:45,820 --> 00:38:49,720
of anything that you're doing

00:38:47,230 --> 00:38:52,119
your code you talk about how you would

00:38:49,720 --> 00:38:53,950
if you're if you're developing those

00:38:52,119 --> 00:38:55,750
locally and testing locally and then

00:38:53,950 --> 00:38:58,240
you're hosting on a very different

00:38:55,750 --> 00:39:00,880
platform and you're not using like a

00:38:58,240 --> 00:39:04,900
paid service to do to do your profiling

00:39:00,880 --> 00:39:06,430
how do you take what you take things

00:39:04,900 --> 00:39:07,780
that you see on your live site and then

00:39:06,430 --> 00:39:09,550
translate them and how you test them

00:39:07,780 --> 00:39:11,200
locally or on a different environment

00:39:09,550 --> 00:39:12,970
yeah i think that environmental

00:39:11,200 --> 00:39:14,530
variables like that can always be tricky

00:39:12,970 --> 00:39:18,640
like you might you know for example if

00:39:14,530 --> 00:39:20,260
you have memcache running on your on

00:39:18,640 --> 00:39:21,640
your production server but not on your

00:39:20,260 --> 00:39:24,280
local server you might see different

00:39:21,640 --> 00:39:26,830
results as a result of that I think it

00:39:24,280 --> 00:39:28,150
sort of depends on each case but there's

00:39:26,830 --> 00:39:30,850
a there's a few ways to deal with that

00:39:28,150 --> 00:39:33,340
one is to run a virtualized version of

00:39:30,850 --> 00:39:34,840
your server another is you can have you

00:39:33,340 --> 00:39:36,940
know there's tools like Megalodon or

00:39:34,840 --> 00:39:40,150
just chef recipes that allow you to

00:39:36,940 --> 00:39:42,070
recreate the same set of hosting stack

00:39:40,150 --> 00:39:45,850
locally I'm not sure specifically if

00:39:42,070 --> 00:39:47,050
Pantheon offers that but there's you

00:39:45,850 --> 00:39:48,910
know there's tools like that I think

00:39:47,050 --> 00:39:50,980
that some hosting providers let you run

00:39:48,910 --> 00:39:53,950
XH Prof in production that's the thing

00:39:50,980 --> 00:39:55,240
that I nowak whea has as a beta it's not

00:39:53,950 --> 00:40:00,340
like officially there but it's something

00:39:55,240 --> 00:40:02,770
that you can it's enabled on all servers

00:40:00,340 --> 00:40:04,510
but it's somehow it's in so so yeah if

00:40:02,770 --> 00:40:07,720
you can run in production that's great

00:40:04,510 --> 00:40:11,109
but in general it's it does depend based

00:40:07,720 --> 00:40:12,310
on those factors it just is there a

00:40:11,109 --> 00:40:15,100
better answer to that than the one I

00:40:12,310 --> 00:40:16,690
gave I feel like it's it's that's the

00:40:15,100 --> 00:40:22,270
truth it's not a super satisfying answer

00:40:16,690 --> 00:40:24,730
family the only other thing I would say

00:40:22,270 --> 00:40:26,710
to that is that we can easily I think we

00:40:24,730 --> 00:40:29,320
will easily overestimate the need for

00:40:26,710 --> 00:40:31,000
that there are environmental differences

00:40:29,320 --> 00:40:32,830
yet i can say like them it as a

00:40:31,000 --> 00:40:34,390
performance engineer I do like ninety

00:40:32,830 --> 00:40:38,109
nine percent of my profiling on my

00:40:34,390 --> 00:40:39,460
macbook air and it I can usually tell

00:40:38,109 --> 00:40:41,740
like it doesn't matter if it's the same

00:40:39,460 --> 00:40:42,790
speed or if it's slower or faster I'd

00:40:41,740 --> 00:40:44,290
only cares that you're looking at

00:40:42,790 --> 00:40:47,170
relative performance so I can see like

00:40:44,290 --> 00:40:49,690
if I made a thousand queries and that

00:40:47,170 --> 00:40:52,090
was quick on my macbook I know that a

00:40:49,690 --> 00:40:53,800
thousand queries is is more worried than

00:40:52,090 --> 00:40:55,090
I need to be making and so I just look

00:40:53,800 --> 00:40:56,560
at more like the number and what's

00:40:55,090 --> 00:40:58,420
happening in like what Ezra was talking

00:40:56,560 --> 00:41:00,410
to earlier where you have to like reason

00:40:58,420 --> 00:41:02,300
about your performance profile and

00:41:00,410 --> 00:41:04,280
think about like is this is what I'm

00:41:02,300 --> 00:41:06,230
seeing here what I expect to be

00:41:04,280 --> 00:41:07,820
happening and if it is that it's usually

00:41:06,230 --> 00:41:09,620
fine but usually you can find outliers

00:41:07,820 --> 00:41:11,930
like that without having to deal with

00:41:09,620 --> 00:41:14,360
the the environmental differences yeah

00:41:11,930 --> 00:41:21,320
mark also hosts 99% of client sites on

00:41:14,360 --> 00:41:22,640
his macbook air yeah mark mark as the

00:41:21,320 --> 00:41:26,450
cloud is bucket all right any other

00:41:22,640 --> 00:41:34,370
questions don't be shy yeah please step

00:41:26,450 --> 00:41:35,720
up to the mic which requires traversing

00:41:34,370 --> 00:41:42,290
the conference center for folks at home

00:41:35,720 --> 00:41:46,900
I was just specifically curious what the

00:41:42,290 --> 00:41:50,600
overhead 4 X 8 prov is in relative to

00:41:46,900 --> 00:41:53,000
running standard environments I think

00:41:50,600 --> 00:41:54,890
it's it's small it's some small

00:41:53,000 --> 00:41:56,450
incremental amount of overhead I don't

00:41:54,890 --> 00:41:59,150
know what the percentages specifically

00:41:56,450 --> 00:42:01,130
but it's it's it's not so significant

00:41:59,150 --> 00:42:02,630
that but it this way if you eat if

00:42:01,130 --> 00:42:04,550
you're working on a performance issue

00:42:02,630 --> 00:42:06,680
it's probably significantly greater than

00:42:04,550 --> 00:42:09,100
the incremental overhead that xhr off is

00:42:06,680 --> 00:42:09,100
going to add

00:42:11,500 --> 00:42:14,830
yeah it is large enough that you don't

00:42:13,270 --> 00:42:17,410
leave it on for ever for every request

00:42:14,830 --> 00:42:19,360
in production that's why it so mark

00:42:17,410 --> 00:42:21,370
mentioned sampling the sampling rate

00:42:19,360 --> 00:42:24,640
earlier but the sampling rate means is

00:42:21,370 --> 00:42:26,530
it's just you know you can run XH prof

00:42:24,640 --> 00:42:28,150
on one out of every five hundred

00:42:26,530 --> 00:42:29,890
requests or every three hundred requests

00:42:28,150 --> 00:42:31,930
and that way you get data that's from

00:42:29,890 --> 00:42:35,980
production but you're not impacting

00:42:31,930 --> 00:42:40,180
every single request on your site excuse

00:42:35,980 --> 00:42:43,030
me yeah the CPU flag adds the most

00:42:40,180 --> 00:42:45,190
overhead Duke so you can turn that off

00:42:43,030 --> 00:42:46,810
and i think that the XH prof module does

00:42:45,190 --> 00:42:51,190
that for you now automatically doesn't

00:42:46,810 --> 00:42:52,780
it it's an option great I was just

00:42:51,190 --> 00:42:54,550
largely going to agree with you yes as

00:42:52,780 --> 00:42:56,560
long as the as long as you aren't

00:42:54,550 --> 00:42:59,080
profiling a page the impact of XH prof

00:42:56,560 --> 00:43:04,360
is essentially zero so turn it on so you

00:42:59,080 --> 00:43:08,200
have it when you need it it's all Jeff

00:43:04,360 --> 00:43:09,820
hi azor Ahai um sorry I don't know your

00:43:08,200 --> 00:43:14,080
name but I'm going to reference your

00:43:09,820 --> 00:43:16,990
question about production profiling and

00:43:14,080 --> 00:43:19,320
I this is a talk about XH prof but tools

00:43:16,990 --> 00:43:22,390
like New Relic I think are more valuable

00:43:19,320 --> 00:43:24,220
for production monitoring and profiling

00:43:22,390 --> 00:43:26,560
because what you're looking for is

00:43:24,220 --> 00:43:29,230
aggregate data in those types of

00:43:26,560 --> 00:43:31,650
environments like I can profile locally

00:43:29,230 --> 00:43:33,880
to get an idea of what's happening

00:43:31,650 --> 00:43:36,970
specifically on the thing I'm looking at

00:43:33,880 --> 00:43:40,050
but over time I might want to see things

00:43:36,970 --> 00:43:43,300
that surface that I may not be aware of

00:43:40,050 --> 00:43:44,890
one of the the best examples i have of

00:43:43,300 --> 00:43:48,340
that is when we were working on a client

00:43:44,890 --> 00:43:52,870
site it's a really big community with

00:43:48,340 --> 00:43:57,250
forums and lots of comments and the text

00:43:52,870 --> 00:43:59,740
filter to process the comments was slow

00:43:57,250 --> 00:44:03,820
but not so slow we would have noticed it

00:43:59,740 --> 00:44:05,680
on any individual profile right but in

00:44:03,820 --> 00:44:08,680
aggregate with New Relic we saw over

00:44:05,680 --> 00:44:11,620
time that this one method was running a

00:44:08,680 --> 00:44:13,480
lot and we wouldn't have just stumbled

00:44:11,620 --> 00:44:16,300
into it and we wouldn't have known that

00:44:13,480 --> 00:44:18,330
in aggregate it was one of the most

00:44:16,300 --> 00:44:21,790
expensive things happening on the site

00:44:18,330 --> 00:44:23,770
without something that aggregates a lot

00:44:21,790 --> 00:44:24,970
of profile data together so that we can

00:44:23,770 --> 00:44:31,330
see what happens

00:44:24,970 --> 00:44:33,820
time with it yeah thanks Jeff all right

00:44:31,330 --> 00:44:35,619
any other questions so thanks everybody

00:44:33,820 --> 00:44:37,210
for coming please do submit session

00:44:35,619 --> 00:44:39,369
feedback to drupalcon and feel free to

00:44:37,210 --> 00:44:41,140
submit it to me this is definitely a

00:44:39,369 --> 00:44:43,720
it's like a complex technical topic

00:44:41,140 --> 00:44:45,070
right but hopefully I based on your

00:44:43,720 --> 00:44:49,349
feedback I can get better at explaining

00:44:45,070 --> 00:44:49,349

YouTube URL: https://www.youtube.com/watch?v=QYffQTujIV0


