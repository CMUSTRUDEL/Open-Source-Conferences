Title: DrupalCon Austin 2014: UNDERSTANDING THE DRUPAL 8 PLUGIN SYSTEM
Publication date: 2014-06-04
Playlist: DrupalCon Austin - June 2014
Description: 
	Speakers: helior
Drupal 8 introduces a new, yet familiar sub-system for extending and managing Drupal's default behavior: it's The Plugin System. If you've ever developed for Views or CTools than these concepts will probably already be familiar to you. The plugin architecture provides you with a common interface that allows you to easily extend and swap out functionality without having to re-implement boiler-plate code, all while keep all your logic in one place instead of scattered around info hooks and procedural callbacks.

This session is aimed at developers who are learning Drupal 8's new architecture and sub-systems. As a prerequisite, you should only need to know basic object-oriented programming.

In this session you will:

Learn how to identify where plugins exist (find opportunities to extend Drupal)
Learn how to create a module that provides a plugin for Drupal core
Know enough about Dependency Injection, Service Containers, Annotations, and PSR-0 to go a very long way
Learn how to define your own plugin type
Learn how to build a user interface to manage your own plugin-based sub-system
Captions: 
	00:00:00,000 --> 00:00:06,299
we talking about Drupal 8 plug-in system

00:00:03,859 --> 00:00:07,830
people here how many I've actually

00:00:06,299 --> 00:00:10,040
worked in Drupal 8 like deviled with the

00:00:07,830 --> 00:00:12,269
code and may be updated their modules

00:00:10,040 --> 00:00:13,349
awesome so hopefully a lot of this would

00:00:12,269 --> 00:00:15,599
be familiar with you and I'll be

00:00:13,349 --> 00:00:18,210
exposing son internal information that

00:00:15,599 --> 00:00:20,689
might help you up and if not maybe will

00:00:18,210 --> 00:00:25,769
be too much information I think usually

00:00:20,689 --> 00:00:31,920
like this so awkward have to like lean

00:00:25,769 --> 00:00:35,460
forward all right i'll do my best cool

00:00:31,920 --> 00:00:38,280
so um this is me I'm Peller guys haven't

00:00:35,460 --> 00:00:40,140
met me before um I've been working in

00:00:38,280 --> 00:00:43,020
Drupal four maybe five or six years I

00:00:40,140 --> 00:00:45,750
currently work at nbcuniversal and my

00:00:43,020 --> 00:00:48,539
handler is a pretty easy hellier at a

00:00:45,750 --> 00:00:52,020
most social media sites and drupal as

00:00:48,539 --> 00:00:54,090
well I haven't actually contributed

00:00:52,020 --> 00:00:55,739
anything meaningful to Drupal 8 I just

00:00:54,090 --> 00:00:58,020
kind of dabbled in it maybe a couple

00:00:55,739 --> 00:01:01,109
months ago I know my findings about some

00:00:58,020 --> 00:01:03,510
pretty cool stuff to share with you but

00:01:01,109 --> 00:01:06,510
it is a fairly technical I guess just by

00:01:03,510 --> 00:01:08,340
its nature plugins are itself just PHP

00:01:06,510 --> 00:01:10,320
classes and so there's a lot of dry

00:01:08,340 --> 00:01:13,170
technical information involved in there

00:01:10,320 --> 00:01:15,240
so just a fair bit of warning um when I

00:01:13,170 --> 00:01:18,479
prepare these slides I had in mind that

00:01:15,240 --> 00:01:20,189
everyone here is very nerdy and can

00:01:18,479 --> 00:01:22,920
handle a lot of the PHP talk so if

00:01:20,189 --> 00:01:24,630
anything that is the disclaimer here and

00:01:22,920 --> 00:01:26,159
the prerequisite that hopefully you guys

00:01:24,630 --> 00:01:30,990
understand at least the basics of the

00:01:26,159 --> 00:01:33,600
object oriented PHP and a and php5 so

00:01:30,990 --> 00:01:36,150
yeah just drop in a quick overview so

00:01:33,600 --> 00:01:39,119
you guys know to expect here um I'll

00:01:36,150 --> 00:01:42,420
explain what plugins are at least in the

00:01:39,119 --> 00:01:45,720
scope of Drupal 8 and I'll talk about

00:01:42,420 --> 00:01:47,549
why it's so important to discuss the

00:01:45,720 --> 00:01:49,200
just conversation of why creating

00:01:47,549 --> 00:01:52,170
plugins as opposed to just creating

00:01:49,200 --> 00:01:54,869
custom hooks or just going to town with

00:01:52,170 --> 00:01:56,399
with whatever kind of mechanism why it's

00:01:54,869 --> 00:01:59,340
all important and what the benefits are

00:01:56,399 --> 00:02:02,130
and also i'll drop in and talk about

00:01:59,340 --> 00:02:05,130
some critical tripoli concepts that are

00:02:02,130 --> 00:02:07,799
in itself requirements to understand the

00:02:05,130 --> 00:02:10,500
plug-in system a quick preview to that

00:02:07,799 --> 00:02:11,290
is i'll be talking about PSR for a

00:02:10,500 --> 00:02:14,469
notation

00:02:11,290 --> 00:02:18,879
and service containers and dependency

00:02:14,469 --> 00:02:20,890
injection and after we get through with

00:02:18,879 --> 00:02:23,590
that I'll do a quick little demo of what

00:02:20,890 --> 00:02:25,719
it is to actually write some plugins and

00:02:23,590 --> 00:02:28,569
I'll Devon with a few different plugin

00:02:25,719 --> 00:02:31,019
systems and show you some other concepts

00:02:28,569 --> 00:02:33,700
that are baked into what it is to define

00:02:31,019 --> 00:02:37,540
plugins and then create derivations of

00:02:33,700 --> 00:02:40,500
them etc etc and then the most important

00:02:37,540 --> 00:02:42,879
part well if if you don't intend on

00:02:40,500 --> 00:02:44,049
creating your own plugin system maybe

00:02:42,879 --> 00:02:47,620
you can drop off at that point after

00:02:44,049 --> 00:02:49,750
step 4 but step 5 here in this case is

00:02:47,620 --> 00:02:52,150
going to be talking about the internals

00:02:49,750 --> 00:02:55,450
of the plugin system on how it actually

00:02:52,150 --> 00:02:58,359
works internally what are the classes

00:02:55,450 --> 00:03:01,359
that are used to bake together the

00:02:58,359 --> 00:03:03,760
discoverability of plugins what we're

00:03:01,359 --> 00:03:06,370
using to map certain instances to this

00:03:03,760 --> 00:03:09,810
or that and how to basically set up your

00:03:06,370 --> 00:03:12,489
thing from the ground up and I'll do

00:03:09,810 --> 00:03:15,069
another demo of creating your own

00:03:12,489 --> 00:03:16,389
plug-in type now I'm a thing with

00:03:15,069 --> 00:03:17,829
creating plug-in types you see a lot of

00:03:16,389 --> 00:03:21,010
them in Drupal and usually wrapped

00:03:17,829 --> 00:03:23,590
around user interfaces and those are

00:03:21,010 --> 00:03:27,849
baked in with configuration entity and

00:03:23,590 --> 00:03:29,229
it's very similar to to config bags and

00:03:27,849 --> 00:03:30,699
then also just having plugins in the

00:03:29,229 --> 00:03:32,409
side so it's kind of confusing the lines

00:03:30,699 --> 00:03:34,030
are pretty thin so I try my best to

00:03:32,409 --> 00:03:35,620
avoid talking about configuration

00:03:34,030 --> 00:03:37,150
entities because they will get confusing

00:03:35,620 --> 00:03:39,519
and they're basically a talk within

00:03:37,150 --> 00:03:41,440
themselves but i'll create a plug-in

00:03:39,519 --> 00:03:43,209
type and it's going to be basically

00:03:41,440 --> 00:03:45,699
headless and you'll see a few lines of

00:03:43,209 --> 00:03:47,919
code there of how to define your plug-in

00:03:45,699 --> 00:03:49,569
side where to discover other plugins

00:03:47,919 --> 00:03:52,030
that are implemented and then how to

00:03:49,569 --> 00:03:54,370
actually use it but the business logic

00:03:52,030 --> 00:03:56,799
that you decide to do with them the I

00:03:54,370 --> 00:03:58,269
guess the business logic system itself

00:03:56,799 --> 00:04:03,819
that would be an exercise for you guys

00:03:58,269 --> 00:04:07,389
to to do on your end so moving on what

00:04:03,819 --> 00:04:09,489
is a plugin the way I define plugins at

00:04:07,389 --> 00:04:11,530
least within the scope of Drupal 8 is a

00:04:09,489 --> 00:04:13,629
discrete class that executes an

00:04:11,530 --> 00:04:16,120
operation within the context of a given

00:04:13,629 --> 00:04:17,280
scope as a means to extend drupal's

00:04:16,120 --> 00:04:19,560
functionality

00:04:17,280 --> 00:04:21,389
so we think of extending drupal's

00:04:19,560 --> 00:04:23,610
functionality in many ways with hey I'm

00:04:21,389 --> 00:04:33,960
going to invoke a hook or I'm going to

00:04:23,610 --> 00:04:35,460
implement a hook sorry sorry so yeah a

00:04:33,960 --> 00:04:37,230
plug-in is a discrete class that

00:04:35,460 --> 00:04:40,380
executes an operation within the context

00:04:37,230 --> 00:04:43,020
of a given scope when I say within a

00:04:40,380 --> 00:04:45,450
given scope um there's always the evils

00:04:43,020 --> 00:04:48,090
of with in Drupal there's there's

00:04:45,450 --> 00:04:50,850
anything you can do in almost any place

00:04:48,090 --> 00:04:52,590
and that can have some confusion with

00:04:50,850 --> 00:04:54,120
you know developers that are not really

00:04:52,590 --> 00:04:56,310
sure with where to put in our code so

00:04:54,120 --> 00:04:57,990
oftentimes you put in some some crazy

00:04:56,310 --> 00:05:01,230
stuff inside of like hooking it or a

00:04:57,990 --> 00:05:03,300
hook page build or whatnot but the idea

00:05:01,230 --> 00:05:06,330
what the plugin is that it kind of

00:05:03,300 --> 00:05:09,300
enforces the best practice of only doing

00:05:06,330 --> 00:05:11,760
a thing within a small scope maybe

00:05:09,300 --> 00:05:14,100
within a method and you're only given

00:05:11,760 --> 00:05:15,450
certain parameters to work with and if

00:05:14,100 --> 00:05:18,419
there's anything else that's outside of

00:05:15,450 --> 00:05:19,650
that a global for instance you might

00:05:18,419 --> 00:05:21,479
start to feel a little uncomfortable

00:05:19,650 --> 00:05:24,390
doing that because now you're pulling in

00:05:21,479 --> 00:05:26,490
objects out of thin air and you start to

00:05:24,390 --> 00:05:29,250
feel kind of a strange cringy filling

00:05:26,490 --> 00:05:30,840
but within plugins just a whole good

00:05:29,250 --> 00:05:33,630
behavior here the best practice is that

00:05:30,840 --> 00:05:36,150
you have limited scope and limited to

00:05:33,630 --> 00:05:38,550
what you can actually do and moving on

00:05:36,150 --> 00:05:41,750
to that plugins themselves they should

00:05:38,550 --> 00:05:44,250
really only do one thing and do it well

00:05:41,750 --> 00:05:46,140
kind of like a UNIX philosophy or you

00:05:44,250 --> 00:05:48,690
have one utility that just does this one

00:05:46,140 --> 00:05:50,970
operation gets a simple input sent out

00:05:48,690 --> 00:05:52,350
simple output and that's it and it sends

00:05:50,970 --> 00:05:54,510
it up to the next thing that does its

00:05:52,350 --> 00:05:56,580
job really well um you should kind of

00:05:54,510 --> 00:05:58,410
treat plugins in such ways well where

00:05:56,580 --> 00:06:00,660
you're not trying to achieve too much

00:05:58,410 --> 00:06:02,280
within some sort of an implementation or

00:06:00,660 --> 00:06:04,110
you know you have all your logic within

00:06:02,280 --> 00:06:07,220
a method as if it was a controller that

00:06:04,110 --> 00:06:10,260
has a lot of application specific stuff

00:06:07,220 --> 00:06:12,000
plugin should be abstracted a plug-in

00:06:10,260 --> 00:06:13,919
should be something that can take in

00:06:12,000 --> 00:06:17,280
configuration and then do stuff with it

00:06:13,919 --> 00:06:19,650
but not too much and then also I mean

00:06:17,280 --> 00:06:21,210
since you can pass in um you know plugin

00:06:19,650 --> 00:06:23,700
so you can't pass in configurations

00:06:21,210 --> 00:06:25,490
within plugins on you have this idea of

00:06:23,700 --> 00:06:27,229
every instance could have different

00:06:25,490 --> 00:06:30,110
fig it could have different states and

00:06:27,229 --> 00:06:32,060
regardless of what the states are the

00:06:30,110 --> 00:06:34,280
plug-in can handled operations within

00:06:32,060 --> 00:06:37,310
them and so you have a sense of

00:06:34,280 --> 00:06:38,930
reusability and you can have a single

00:06:37,310 --> 00:06:41,240
class that you've created a single

00:06:38,930 --> 00:06:43,280
plug-in and use it across different

00:06:41,240 --> 00:06:45,020
places on a site or even better we use

00:06:43,280 --> 00:06:46,880
it across different sites within all of

00:06:45,020 --> 00:06:48,289
your projects because just passing the

00:06:46,880 --> 00:06:53,210
different configurations do things with

00:06:48,289 --> 00:06:54,770
it so yeah I'm kind of a visual guy so

00:06:53,210 --> 00:06:56,539
I'd like to see what plugins are at

00:06:54,770 --> 00:06:58,669
least in a practical sense where you've

00:06:56,539 --> 00:07:01,250
seen them so I'll show you a few

00:06:58,669 --> 00:07:03,380
screenshots of a Drupal 8 interface to

00:07:01,250 --> 00:07:04,520
kind of get you familiar with with what

00:07:03,380 --> 00:07:06,680
plugins are and how you could identify

00:07:04,520 --> 00:07:08,270
them and keep in mind those three

00:07:06,680 --> 00:07:11,449
principles about plugins that they're in

00:07:08,270 --> 00:07:13,580
stantial configurable reusable they do

00:07:11,449 --> 00:07:16,610
one thing one thing well and that

00:07:13,580 --> 00:07:19,849
they're limited within scope so here you

00:07:16,610 --> 00:07:22,159
see on the block cui where everything on

00:07:19,849 --> 00:07:24,409
the right well is essentially an

00:07:22,159 --> 00:07:26,090
instance of a plug-in search forum user

00:07:24,409 --> 00:07:29,620
login each one of these are implementing

00:07:26,090 --> 00:07:32,570
a block type or just the block in itself

00:07:29,620 --> 00:07:34,190
in Drupal 8 you can configure these and

00:07:32,570 --> 00:07:37,099
instantiate them it's not like drupal 7

00:07:34,190 --> 00:07:39,500
we can only use one block per region you

00:07:37,099 --> 00:07:41,690
can pull these in and add state to them

00:07:39,500 --> 00:07:44,060
basically adding congratulations to it

00:07:41,690 --> 00:07:45,110
and they're very narrow in scope you

00:07:44,060 --> 00:07:47,840
know it supposed to have content within

00:07:45,110 --> 00:07:51,349
a single block another example of

00:07:47,840 --> 00:07:53,570
plugins are field types themselves field

00:07:51,349 --> 00:07:55,479
types prior to the triple-a were

00:07:53,570 --> 00:07:57,710
implemented by several different hooks

00:07:55,479 --> 00:07:59,000
but still conceptually it supposed to be

00:07:57,710 --> 00:08:02,719
a single thing you're describing a

00:07:59,000 --> 00:08:05,389
schema validation etc etc and each one

00:08:02,719 --> 00:08:07,400
of these plugins or you know field types

00:08:05,389 --> 00:08:10,930
can be used across different sites it's

00:08:07,400 --> 00:08:14,449
not like it's application specific

00:08:10,930 --> 00:08:19,280
likewise with field widgets and fueled

00:08:14,449 --> 00:08:21,289
for matters actions themselves so take

00:08:19,280 --> 00:08:22,490
for account a limited scope each one of

00:08:21,289 --> 00:08:24,440
these actions are supposed to be

00:08:22,490 --> 00:08:26,030
expecting just a single user or just a

00:08:24,440 --> 00:08:28,759
single node right it's only supposed to

00:08:26,030 --> 00:08:31,069
do operate one single thing so again

00:08:28,759 --> 00:08:32,479
it's a small in scope it does one thing

00:08:31,069 --> 00:08:35,829
and one thing well and can be used

00:08:32,479 --> 00:08:35,829
across two different projects

00:08:36,180 --> 00:08:41,310
here we have image effects also

00:08:38,039 --> 00:08:43,680
implemented as plugins input filters

00:08:41,310 --> 00:08:45,450
right they process text and they do as

00:08:43,680 --> 00:08:48,180
very specific thing and they pass it on

00:08:45,450 --> 00:08:50,040
to the next input filter and this is

00:08:48,180 --> 00:08:52,610
kind of similar to input formats however

00:08:50,040 --> 00:08:54,570
the formats are configuration bags

00:08:52,610 --> 00:08:56,370
configuration entity which basically

00:08:54,570 --> 00:08:59,580
houses all the configuration that you

00:08:56,370 --> 00:09:01,890
would pass into input filters so that

00:08:59,580 --> 00:09:03,779
self is kind of like a container but the

00:09:01,890 --> 00:09:05,850
input filter itself is the plug-in and

00:09:03,779 --> 00:09:08,970
which it uses to process and text and

00:09:05,850 --> 00:09:11,310
out dribble eight we have a ckeditor or

00:09:08,970 --> 00:09:14,070
ckeditor buttons so each one of those

00:09:11,310 --> 00:09:16,770
are implemented as plugins and entity

00:09:14,070 --> 00:09:19,770
types etc etc so you see that plugins

00:09:16,770 --> 00:09:22,110
are everywhere and if you can see this

00:09:19,770 --> 00:09:23,940
with your binoculars you can see that

00:09:22,110 --> 00:09:25,770
there's a lot of plugins interpolate and

00:09:23,940 --> 00:09:27,540
you have a little bubble off into the

00:09:25,770 --> 00:09:30,360
top left those are actually view plugins

00:09:27,540 --> 00:09:32,910
so since they're baked in as classes

00:09:30,360 --> 00:09:35,820
your plug-in types can be extended and

00:09:32,910 --> 00:09:37,110
build other sub plug-in types with them

00:09:35,820 --> 00:09:38,130
so you'd be familiar with all the

00:09:37,110 --> 00:09:40,560
different views plugins that are

00:09:38,130 --> 00:09:43,260
available that's essentially it and

00:09:40,560 --> 00:09:45,209
almost everything here that you see in

00:09:43,260 --> 00:09:47,700
Drupal 8 interfaces are baked in as

00:09:45,209 --> 00:09:49,620
plugins and you might be a thinking to

00:09:47,700 --> 00:09:53,550
yourself all this seems really really

00:09:49,620 --> 00:09:55,410
familiar to me and rightly so a lot of

00:09:53,550 --> 00:09:57,420
these in the past have been implemented

00:09:55,410 --> 00:10:01,470
before with some sort of the info hook

00:09:57,420 --> 00:10:03,150
hook whatever info but now essentially

00:10:01,470 --> 00:10:05,580
that has been deprecated for the most

00:10:03,150 --> 00:10:08,279
part in Drupal 8 and we have different

00:10:05,580 --> 00:10:09,839
means of discovering these different

00:10:08,279 --> 00:10:12,120
instances discovering these different

00:10:09,839 --> 00:10:17,430
plugins and that's all thanks to the

00:10:12,120 --> 00:10:18,959
plugin system so yeah so before we move

00:10:17,430 --> 00:10:20,579
on to the actual how to create plugins

00:10:18,959 --> 00:10:24,270
I'll basically talk about the benefits

00:10:20,579 --> 00:10:27,570
of them one thing I really like about

00:10:24,270 --> 00:10:29,520
Drupal 8 is a that the definition of a

00:10:27,570 --> 00:10:32,010
plug-in and the implementation are all

00:10:29,520 --> 00:10:34,230
baked in together if you had ever

00:10:32,010 --> 00:10:36,089
implemented a block you know that you

00:10:34,230 --> 00:10:37,829
have to have a hook block info and then

00:10:36,089 --> 00:10:40,050
a hook block view and then a hook block

00:10:37,829 --> 00:10:42,420
etc etc and all these different

00:10:40,050 --> 00:10:48,000
procedural functions described is one

00:10:42,420 --> 00:10:49,529
thing and it gets kind of hairy and it's

00:10:48,000 --> 00:10:50,130
a little more difficult to work with

00:10:49,529 --> 00:10:52,140
this by

00:10:50,130 --> 00:10:53,670
if you're providing more blocks within

00:10:52,140 --> 00:10:56,220
those hooks because then you have to do

00:10:53,670 --> 00:10:59,160
switch cases and it gets pretty ugly but

00:10:56,220 --> 00:11:01,650
in Drupal 8 since every plugin is

00:10:59,160 --> 00:11:04,650
defined as a as a class we can use

00:11:01,650 --> 00:11:06,090
actually annotations to describe and you

00:11:04,650 --> 00:11:08,310
know declare what each one of our

00:11:06,090 --> 00:11:09,960
plug-in types do without having to have

00:11:08,310 --> 00:11:11,250
a mess of code all over the place so

00:11:09,960 --> 00:11:14,490
i'll talk more about annotations and

00:11:11,250 --> 00:11:16,260
weather so cool secondly plugins are

00:11:14,490 --> 00:11:18,450
lazy loading this is one thing I never

00:11:16,260 --> 00:11:20,220
really liked is that if I had to do some

00:11:18,450 --> 00:11:23,160
sort of operation or needed to have some

00:11:20,220 --> 00:11:24,300
globally accessible service or whatnot I

00:11:23,160 --> 00:11:25,980
would have to include it inside of the

00:11:24,300 --> 00:11:27,510
module file and I made me feel

00:11:25,980 --> 00:11:29,940
uncomfortable because that's a lot of

00:11:27,510 --> 00:11:31,950
PHP code that gets cached and has to get

00:11:29,940 --> 00:11:34,050
loaded up but as far as Drupal 8 is

00:11:31,950 --> 00:11:36,390
concerned your plugins won't exist

00:11:34,050 --> 00:11:37,830
they'll know about them as far as where

00:11:36,390 --> 00:11:39,480
the definitions are and where to find it

00:11:37,830 --> 00:11:41,970
but don't actually load the code until

00:11:39,480 --> 00:11:43,860
actually uses it so they are lazy loaded

00:11:41,970 --> 00:11:45,360
and the more plugins you a 10 there's no

00:11:43,860 --> 00:11:46,710
performance cost at all because they're

00:11:45,360 --> 00:11:50,400
just dormant in your code which is

00:11:46,710 --> 00:11:54,090
really cool and also code is unified I

00:11:50,400 --> 00:11:56,880
mentioned already the block infos and

00:11:54,090 --> 00:11:59,850
hook block whatever fields were also a

00:11:56,880 --> 00:12:01,770
huge pain in that sense whenever you

00:11:59,850 --> 00:12:03,690
wanted to create a fuel type or field

00:12:01,770 --> 00:12:05,040
widget or field for matter you'd have to

00:12:03,690 --> 00:12:06,840
write seven or eight different plugins

00:12:05,040 --> 00:12:09,570
to describe just this one thing and

00:12:06,840 --> 00:12:11,340
again if your module provided multiple

00:12:09,570 --> 00:12:13,560
types of these you'd have to you know

00:12:11,340 --> 00:12:15,210
mess with cases switch cases and so that

00:12:13,560 --> 00:12:17,370
gets kind of area as well but in this

00:12:15,210 --> 00:12:20,670
case all the code is unified inside PHP

00:12:17,370 --> 00:12:23,130
class methods so you don't have that

00:12:20,670 --> 00:12:25,380
that that's separation and you don't

00:12:23,130 --> 00:12:28,320
have to do weird stuff to pass in state

00:12:25,380 --> 00:12:29,490
across all of these different methods or

00:12:28,320 --> 00:12:34,170
all these different hooks that you would

00:12:29,490 --> 00:12:36,750
apply and just by the fact that plugins

00:12:34,170 --> 00:12:39,420
RX are implemented as classes you get

00:12:36,750 --> 00:12:41,370
the object-oriented aspect of it where

00:12:39,420 --> 00:12:45,090
all your your your plugins are

00:12:41,370 --> 00:12:46,500
extendable I like some of the the

00:12:45,090 --> 00:12:49,380
widgets and the field types that are

00:12:46,500 --> 00:12:51,930
provided by Drupal core but it's really

00:12:49,380 --> 00:12:53,670
difficult to say I like these this image

00:12:51,930 --> 00:12:55,080
type or this image widget but I would

00:12:53,670 --> 00:12:57,780
like to add just one little thing to it

00:12:55,080 --> 00:12:59,970
it's not a thing to just extend it and

00:12:57,780 --> 00:13:00,940
apply your own button to it or apply an

00:12:59,970 --> 00:13:03,340
extra validate

00:13:00,940 --> 00:13:05,260
to it you literally have to re-implement

00:13:03,340 --> 00:13:07,180
the entire field type or re-implement

00:13:05,260 --> 00:13:09,160
the entire widget and pass in all

00:13:07,180 --> 00:13:11,050
different validation and all the

00:13:09,160 --> 00:13:13,300
different hooks and it's just got awful

00:13:11,050 --> 00:13:15,040
but what's your bullet you could extend

00:13:13,300 --> 00:13:18,340
that class and just provide in your own

00:13:15,040 --> 00:13:19,990
extra things with it and still get the

00:13:18,340 --> 00:13:22,270
benefit of all the existing validation

00:13:19,990 --> 00:13:24,310
on and all the existing you know for

00:13:22,270 --> 00:13:27,400
matters that exist for it so there's a

00:13:24,310 --> 00:13:30,340
big one there with ruiz ability because

00:13:27,400 --> 00:13:32,230
of course they are classes and also

00:13:30,340 --> 00:13:35,530
because they're PHP classes we can now

00:13:32,230 --> 00:13:37,060
leverage interfaces where we can say hey

00:13:35,530 --> 00:13:39,640
you know this plug-in type that's

00:13:37,060 --> 00:13:42,010
provided is supposed to implement set

00:13:39,640 --> 00:13:44,710
number of methods and that's a contract

00:13:42,010 --> 00:13:47,140
essentially so if you have any kind of

00:13:44,710 --> 00:13:48,610
plug-in that are implementing a plug-in

00:13:47,140 --> 00:13:49,600
type you can rest assure that they're

00:13:48,610 --> 00:13:51,310
going to have the methods that are

00:13:49,600 --> 00:13:53,830
promised within the interfaces so

00:13:51,310 --> 00:13:55,030
there's no guessing of like a you know

00:13:53,830 --> 00:13:56,920
it's as this plug and support this

00:13:55,030 --> 00:13:59,350
operation do I have to check for this if

00:13:56,920 --> 00:14:01,270
method exists it's going to be there so

00:13:59,350 --> 00:14:03,550
a little bit of developers out there

00:14:01,270 --> 00:14:05,860
that's a good thing and because

00:14:03,550 --> 00:14:07,960
everything is using a similar interfaces

00:14:05,860 --> 00:14:10,050
this implies the fact that you can

00:14:07,960 --> 00:14:12,070
actually swap these classes around

00:14:10,050 --> 00:14:14,530
because they all you know basically

00:14:12,070 --> 00:14:15,880
provide the same inputs and they give

00:14:14,530 --> 00:14:18,070
out the same outputs they have the

00:14:15,880 --> 00:14:19,330
unified interface so what's to keep us

00:14:18,070 --> 00:14:22,030
from actually swapping out these

00:14:19,330 --> 00:14:24,580
operations so yeah plugins are now

00:14:22,030 --> 00:14:26,680
swappable and you can move them around

00:14:24,580 --> 00:14:30,760
and interchangeably so that's a great

00:14:26,680 --> 00:14:32,830
thing and reusable across different

00:14:30,760 --> 00:14:34,660
projects this is very true because of

00:14:32,830 --> 00:14:36,310
course all of this logic is baked into

00:14:34,660 --> 00:14:39,490
plugins and shouldn't necessarily be

00:14:36,310 --> 00:14:41,770
tied into application logic you can use

00:14:39,490 --> 00:14:43,870
them within different sites it doesn't

00:14:41,770 --> 00:14:45,100
have a application logic baked into them

00:14:43,870 --> 00:14:47,500
if anything you'd be passing in

00:14:45,100 --> 00:14:49,450
configurations to them and I feel that

00:14:47,500 --> 00:14:52,570
the plug-in system kind of enforces or

00:14:49,450 --> 00:14:55,780
encourages that kind of pattern so kudos

00:14:52,570 --> 00:14:58,150
to you but you could have always done

00:14:55,780 --> 00:15:01,630
this in Drupal 7 and in some cases in

00:14:58,150 --> 00:15:05,050
Drupal 6 as well using t tools actually

00:15:01,630 --> 00:15:07,209
a very involved in c tools and just its

00:15:05,050 --> 00:15:09,249
mechanics with having plugins and

00:15:07,209 --> 00:15:11,699
you know having classes as ways of

00:15:09,249 --> 00:15:13,809
implementing these plugins and of course

00:15:11,699 --> 00:15:14,889
if you're careful with the way you're

00:15:13,809 --> 00:15:16,629
implementing these things you could

00:15:14,889 --> 00:15:18,369
always you know capture these these

00:15:16,629 --> 00:15:20,079
plug-in types into your own custom

00:15:18,369 --> 00:15:22,839
module that can be reused across

00:15:20,079 --> 00:15:25,269
different sites in your team or even

00:15:22,839 --> 00:15:26,920
with interest different projects and

00:15:25,269 --> 00:15:28,929
basically passing in the configuration

00:15:26,920 --> 00:15:34,600
state into these plugins to do different

00:15:28,929 --> 00:15:36,850
stuff so moving on a core concepts that

00:15:34,600 --> 00:15:39,910
are baked into Drupal 8 that are kind of

00:15:36,850 --> 00:15:41,199
a necessity to understand when we're

00:15:39,910 --> 00:15:42,490
looking into how to implement these

00:15:41,199 --> 00:15:44,769
plugins so we're talking about

00:15:42,490 --> 00:15:47,980
dependency injection service containers

00:15:44,769 --> 00:15:49,029
annotations and PS are for I was in an

00:15:47,980 --> 00:15:51,040
assumption at first that I had to learn

00:15:49,029 --> 00:15:52,540
symphony in order to understand your

00:15:51,040 --> 00:15:53,769
blade and so I spent some time in there

00:15:52,540 --> 00:15:55,209
for a while and realize there's a lot of

00:15:53,769 --> 00:15:58,029
stuff in here that not necessarily

00:15:55,209 --> 00:16:00,490
applicable it's really good stuff to

00:15:58,029 --> 00:16:02,379
know but it boils down to really these

00:16:00,490 --> 00:16:03,369
four concepts that are required and then

00:16:02,379 --> 00:16:05,019
everything else just kind of becomes

00:16:03,369 --> 00:16:08,529
Triple isms that are using these

00:16:05,019 --> 00:16:10,689
concepts as helpers so first one we'll

00:16:08,529 --> 00:16:12,399
talk about is PSR for which is an auto

00:16:10,689 --> 00:16:15,009
loading standard if you're not already

00:16:12,399 --> 00:16:18,149
familiar with what PSR is it's a PHP

00:16:15,009 --> 00:16:19,839
specification request essentially

00:16:18,149 --> 00:16:22,809
representatives of all the PHP

00:16:19,839 --> 00:16:24,129
frameworks get together and they discuss

00:16:22,809 --> 00:16:26,259
what are some patterns that we can use

00:16:24,129 --> 00:16:29,139
across the board where we can work

00:16:26,259 --> 00:16:31,749
intraoperatively and you know foster

00:16:29,139 --> 00:16:34,720
these standards p sr 0 was the first

00:16:31,749 --> 00:16:37,720
autoloading standard and up to maybe a

00:16:34,720 --> 00:16:39,790
week ago I think Drupal 8 converted at

00:16:37,720 --> 00:16:44,439
least all the module code and to using

00:16:39,790 --> 00:16:46,269
PSR for what that is is basically a way

00:16:44,439 --> 00:16:47,799
for autoloaders to know where to find

00:16:46,269 --> 00:16:49,179
your classes so there has to be some

00:16:47,799 --> 00:16:51,850
sort of a structure in which everything

00:16:49,179 --> 00:16:53,980
follows on part one of this is having to

00:16:51,850 --> 00:16:56,649
fully qualify namespace and it should be

00:16:53,980 --> 00:16:58,749
in the format of your vendor namespace

00:16:56,649 --> 00:17:01,179
and then a sudden and namespace and then

00:16:58,749 --> 00:17:03,189
finally the class thing and secondly

00:17:01,179 --> 00:17:04,959
your directory structure is supposed to

00:17:03,189 --> 00:17:07,929
match at least the sub namespace for

00:17:04,959 --> 00:17:11,169
this plugin so given an example say we

00:17:07,929 --> 00:17:12,909
have a class called my block and the

00:17:11,169 --> 00:17:16,179
fully qualified name space for this is

00:17:12,909 --> 00:17:19,000
Drupal my module plugin block my block

00:17:16,179 --> 00:17:20,169
and within this class name is just

00:17:19,000 --> 00:17:22,269
called my blog

00:17:20,169 --> 00:17:26,350
it's encapsulated with the namespace of

00:17:22,269 --> 00:17:29,889
drupal module plugin block previously in

00:17:26,350 --> 00:17:31,749
the Drupal 7 below we had to prefix all

00:17:29,889 --> 00:17:33,129
our classes and all of our modules with

00:17:31,749 --> 00:17:35,289
the module name and that worked out

00:17:33,129 --> 00:17:36,940
pretty well it prevented namespace

00:17:35,289 --> 00:17:40,149
clashes but this is a much more elegant

00:17:36,940 --> 00:17:42,190
way of achieving the same thing so given

00:17:40,149 --> 00:17:44,320
this class how can the autoloader find

00:17:42,190 --> 00:17:45,609
it it depends on where you put it so

00:17:44,320 --> 00:17:47,799
here would be the directory structure

00:17:45,609 --> 00:17:50,049
that's baked into it within your modules

00:17:47,799 --> 00:17:52,149
directory here my module exists and you

00:17:50,049 --> 00:17:54,399
have a source directory and in there

00:17:52,149 --> 00:17:55,720
that's where the sub namespace is kind

00:17:54,399 --> 00:17:57,519
of mapped with the directory structure

00:17:55,720 --> 00:18:00,970
there so we have plug-in block and

00:17:57,519 --> 00:18:02,769
finally my blog PHP there's different

00:18:00,970 --> 00:18:04,269
variants of this and of course there's a

00:18:02,769 --> 00:18:07,119
lot more explanation to this I have a

00:18:04,269 --> 00:18:09,340
couple links at the bottom for PHP fig

00:18:07,119 --> 00:18:11,649
org and you can see all the different

00:18:09,340 --> 00:18:14,440
PSRs that specifically this PSR for

00:18:11,649 --> 00:18:16,779
which describes it and more germane to

00:18:14,440 --> 00:18:18,999
Drupal actually is another link that

00:18:16,779 --> 00:18:21,009
talks about how Drupal uses it all the

00:18:18,999 --> 00:18:22,389
pros and cons and possibly links to

00:18:21,009 --> 00:18:24,519
other issues where there's a lot of

00:18:22,389 --> 00:18:27,460
strong and why we should Porsche it and

00:18:24,519 --> 00:18:30,009
to use it at all and also as a reminder

00:18:27,460 --> 00:18:31,690
we have sprint on Friday so there's a

00:18:30,009 --> 00:18:33,909
lot of issues and the plugin system

00:18:31,690 --> 00:18:36,129
about two pages full so if you want to

00:18:33,909 --> 00:18:39,489
jump in a follow drupal mentoring on

00:18:36,129 --> 00:18:42,639
twitter check out austin 2014 triple org

00:18:39,489 --> 00:18:47,549
slash sprints and see what you can do to

00:18:42,639 --> 00:18:53,019
help make this all possible for everyone

00:18:47,549 --> 00:18:54,909
anyway annotations um so annotations is

00:18:53,019 --> 00:18:57,220
essentially just metadata inside of doc

00:18:54,909 --> 00:19:00,340
blocks a lot of people call it doc box

00:18:57,220 --> 00:19:02,470
just multi-line comments but actually

00:19:00,340 --> 00:19:03,970
they're not a regular comment is in a

00:19:02,470 --> 00:19:05,320
sense of a single line comment so you

00:19:03,970 --> 00:19:07,509
have your double slashes in front and so

00:19:05,320 --> 00:19:09,730
that's cool and that's actually ignored

00:19:07,509 --> 00:19:11,470
by alpha code cache and we could also

00:19:09,730 --> 00:19:14,109
have multi line comments with the you

00:19:11,470 --> 00:19:16,119
know the forward slash and splat but

00:19:14,109 --> 00:19:20,109
again that's still ignored by opcode

00:19:16,119 --> 00:19:22,690
cash but sometime around I think PHP 5.1

00:19:20,109 --> 00:19:26,289
on a reflector class had the ability to

00:19:22,690 --> 00:19:29,349
actually a introspect and read its own

00:19:26,289 --> 00:19:30,450
doc blocks which is what we have to

00:19:29,349 --> 00:19:32,760
describe a lot of our

00:19:30,450 --> 00:19:36,240
and so that kind of opens up the ability

00:19:32,760 --> 00:19:37,980
to have something that's parsable inside

00:19:36,240 --> 00:19:40,230
of the doc blocks and pull things in and

00:19:37,980 --> 00:19:41,910
you've seen this a lot before these

00:19:40,230 --> 00:19:44,520
markers where you have an at symbol so

00:19:41,910 --> 00:19:47,610
like at deprecated at to do a pram at

00:19:44,520 --> 00:19:50,070
return those all markers now with the

00:19:47,610 --> 00:19:51,980
page B 5.1 with a reflector class we can

00:19:50,070 --> 00:19:54,150
actually read those in and par stuff and

00:19:51,980 --> 00:19:57,780
essentially that's what annotations are

00:19:54,150 --> 00:20:00,360
not necessarily code it is just

00:19:57,780 --> 00:20:02,760
basically declaring certain values so

00:20:00,360 --> 00:20:05,790
your parameterizing your markers and

00:20:02,760 --> 00:20:08,190
this is a custom a marker so at my

00:20:05,790 --> 00:20:13,110
plugin name and i can pass an arbitrary

00:20:08,190 --> 00:20:14,790
list of a values and keys and so yeah

00:20:13,110 --> 00:20:17,100
the annotations can find that within the

00:20:14,790 --> 00:20:19,320
code and this is essentially how a lot

00:20:17,100 --> 00:20:20,910
of the classes can define themselves you

00:20:19,320 --> 00:20:22,500
don't have to have a separate info hook

00:20:20,910 --> 00:20:25,100
you can just have that all baked into

00:20:22,500 --> 00:20:27,510
the comments so very easy very simple

00:20:25,100 --> 00:20:29,040
there's very interesting slide deck I'm

00:20:27,510 --> 00:20:31,290
how to share a link at the bottom on

00:20:29,040 --> 00:20:32,910
slideshare net that describes the the

00:20:31,290 --> 00:20:34,290
history of annotations all the different

00:20:32,910 --> 00:20:38,790
annotation engines that exists in

00:20:34,290 --> 00:20:42,690
activity and a wider so cool so yeah

00:20:38,790 --> 00:20:46,350
that's it annotations moving on to a

00:20:42,690 --> 00:20:47,820
dependency injection what you know

00:20:46,350 --> 00:20:49,320
people describe this as an inversion of

00:20:47,820 --> 00:20:51,900
control and I really didn't get what

00:20:49,320 --> 00:20:54,120
that meant for a long time so here's an

00:20:51,900 --> 00:20:55,950
example and this is actually a problem

00:20:54,120 --> 00:20:58,290
that I struggled for a while with some

00:20:55,950 --> 00:21:01,080
my own previous projects say i have a

00:20:58,290 --> 00:21:04,020
class named some class and inside of the

00:21:01,080 --> 00:21:05,310
constructor i'm using another class to

00:21:04,020 --> 00:21:07,050
kind of help me do some stuff and so

00:21:05,310 --> 00:21:10,410
inside of constructor i initialize a

00:21:07,050 --> 00:21:13,140
handler so this handler is a new handler

00:21:10,410 --> 00:21:14,820
and so there you go i instantiate my son

00:21:13,140 --> 00:21:17,460
class and then inside of it does some

00:21:14,820 --> 00:21:19,590
stuff with this handler but safe for

00:21:17,460 --> 00:21:21,540
whatever reason someone else needs to

00:21:19,590 --> 00:21:23,970
use this some class and extend it and do

00:21:21,540 --> 00:21:26,730
some other stuff and within extending it

00:21:23,970 --> 00:21:29,520
they need to modify the handler that's

00:21:26,730 --> 00:21:31,770
instantiating but the problem is is that

00:21:29,520 --> 00:21:33,270
this handler is actually instantiated

00:21:31,770 --> 00:21:35,820
and adult a lot of different places

00:21:33,270 --> 00:21:37,350
within this class and so now in order

00:21:35,820 --> 00:21:38,880
for them to do a simple extension they

00:21:37,350 --> 00:21:40,410
have to look for all the different

00:21:38,880 --> 00:21:43,350
methods that are instantiating these

00:21:40,410 --> 00:21:45,810
classes over I those and implement their

00:21:43,350 --> 00:21:47,100
own or instantiate their own handler and

00:21:45,810 --> 00:21:50,520
this gets very frustrating and very

00:21:47,100 --> 00:21:52,590
difficult to to to basically manage the

00:21:50,520 --> 00:21:55,250
inversion of control here is basically

00:21:52,590 --> 00:21:58,380
described that the calling user is

00:21:55,250 --> 00:22:01,080
instead defining what the dependencies

00:21:58,380 --> 00:22:03,240
are so in my some class if I had written

00:22:01,080 --> 00:22:05,010
in such way we're in the constructor I'm

00:22:03,240 --> 00:22:07,770
just accepting the handler object and

00:22:05,010 --> 00:22:09,510
then I just simply assign it within then

00:22:07,770 --> 00:22:13,350
that means that the calling user can

00:22:09,510 --> 00:22:15,450
just invoke their own or instantiate

00:22:13,350 --> 00:22:18,420
their own handler and pass that into my

00:22:15,450 --> 00:22:20,460
some class so now who has control it's

00:22:18,420 --> 00:22:22,980
not my class anymore it's the developer

00:22:20,460 --> 00:22:24,870
so that's all of what dependency

00:22:22,980 --> 00:22:28,710
injection is in a net there's nothing

00:22:24,870 --> 00:22:30,030
more to it and there's a link posted at

00:22:28,710 --> 00:22:34,080
the bottom that kind of describes this

00:22:30,030 --> 00:22:35,760
with using better examples but yeah

00:22:34,080 --> 00:22:38,130
that's essentially what dependency

00:22:35,760 --> 00:22:41,340
injection is if this ever confused you

00:22:38,130 --> 00:22:43,850
now you know moving on to this though is

00:22:41,340 --> 00:22:46,650
something called service containers

00:22:43,850 --> 00:22:48,240
service containers they do something

00:22:46,650 --> 00:22:50,850
pretty cool where they auto instantiate

00:22:48,240 --> 00:22:52,920
these classes for you but they have to

00:22:50,850 --> 00:22:54,120
be service oriented implying that they

00:22:52,920 --> 00:22:55,950
don't have states they don't have

00:22:54,120 --> 00:22:57,510
configuration baked in there just

00:22:55,950 --> 00:23:00,780
classes that do things and they do

00:22:57,510 --> 00:23:01,920
things in a global scope and the thing

00:23:00,780 --> 00:23:04,110
with serves containers is that you can

00:23:01,920 --> 00:23:07,050
register all the dependent classes

00:23:04,110 --> 00:23:08,910
within them so for instance on the

00:23:07,050 --> 00:23:11,700
example that we had with the handler and

00:23:08,910 --> 00:23:13,320
some class you basically set up like

00:23:11,700 --> 00:23:15,060
this handler equals new handler

00:23:13,320 --> 00:23:17,820
incidence equals some class of whatever

00:23:15,060 --> 00:23:20,610
passing and the handler into that but

00:23:17,820 --> 00:23:22,380
instead of having to provide all the

00:23:20,610 --> 00:23:24,090
classes that are dependence because keep

00:23:22,380 --> 00:23:26,340
in mind new handler probably had

00:23:24,090 --> 00:23:28,080
dependencies of its own and those

00:23:26,340 --> 00:23:30,150
classes that it depends on probably had

00:23:28,080 --> 00:23:31,830
dependencies of its own so you could

00:23:30,150 --> 00:23:34,010
imagine you would have to instantiate a

00:23:31,830 --> 00:23:35,790
lot of classes and pass them all in

00:23:34,010 --> 00:23:38,160
until you could actually have the

00:23:35,790 --> 00:23:40,380
instance that you want so the idea here

00:23:38,160 --> 00:23:43,260
is that within service containers we can

00:23:40,380 --> 00:23:46,470
define what those dependencies are so in

00:23:43,260 --> 00:23:48,870
my case with the some class inside of my

00:23:46,470 --> 00:23:50,669
module services gamma file is where I

00:23:48,870 --> 00:23:52,889
can basically describe my service

00:23:50,669 --> 00:23:54,899
and I'm providing a machine named my

00:23:52,889 --> 00:23:56,519
module dot some class and I'm defining

00:23:54,899 --> 00:23:58,320
where the class can be found to what the

00:23:56,519 --> 00:24:00,840
namespace is and I'm passing in the

00:23:58,320 --> 00:24:02,909
arguments and my arguments are pointing

00:24:00,840 --> 00:24:04,139
to something called at handler which is

00:24:02,909 --> 00:24:06,600
the machine name of the dependent

00:24:04,139 --> 00:24:08,639
service container and the thing with

00:24:06,600 --> 00:24:10,379
this is that somewhere out there there

00:24:08,639 --> 00:24:13,019
is a handler service that's being

00:24:10,379 --> 00:24:14,429
described that it will in turn describe

00:24:13,019 --> 00:24:17,009
its own dependencies and it's just like

00:24:14,429 --> 00:24:20,909
daisy chaining across the board and when

00:24:17,009 --> 00:24:23,039
I want to instantiate a some class all I

00:24:20,909 --> 00:24:25,169
have to do now is say Drupal give me the

00:24:23,039 --> 00:24:27,330
service my module that's some class and

00:24:25,169 --> 00:24:30,389
it will go ahead and do the

00:24:27,330 --> 00:24:33,090
instantiation for me in fact reading off

00:24:30,389 --> 00:24:36,029
the services files triple will generate

00:24:33,090 --> 00:24:38,519
PHP code that has all this all these

00:24:36,029 --> 00:24:39,899
instantiate errs inside of an array so

00:24:38,519 --> 00:24:41,789
it's pretty tricky how does it's pretty

00:24:39,899 --> 00:24:44,249
cool actually and there's a link at the

00:24:41,789 --> 00:24:46,440
bottom basically talking about pimple

00:24:44,249 --> 00:24:47,700
which is a library of PHP that does the

00:24:46,440 --> 00:24:49,830
surfs container stuff and it kind of

00:24:47,700 --> 00:24:51,679
talks about like how the mechanisms are

00:24:49,830 --> 00:24:54,149
like what it's actually doing internally

00:24:51,679 --> 00:24:56,909
but yeah so instead of you having to

00:24:54,149 --> 00:24:59,850
instantiate all your classes on your own

00:24:56,909 --> 00:25:02,039
you can just register them and then call

00:24:59,850 --> 00:25:06,090
it in at the very end using Drupal that

00:25:02,039 --> 00:25:07,950
services and this is ok because defining

00:25:06,090 --> 00:25:10,049
what classes you're going to depend on

00:25:07,950 --> 00:25:12,149
isn't necessarily a runtime decision

00:25:10,049 --> 00:25:13,889
it's something that you can have baked

00:25:12,149 --> 00:25:15,749
in and registered and if you ever had to

00:25:13,889 --> 00:25:17,399
have the same class but have different

00:25:15,749 --> 00:25:21,389
dependencies you can just register

00:25:17,399 --> 00:25:23,070
another service itself so yeah that's

00:25:21,389 --> 00:25:29,340
how I can accentuate things with service

00:25:23,070 --> 00:25:31,710
contains very cool so quick review talk

00:25:29,340 --> 00:25:35,129
about what plugins are um basically what

00:25:31,710 --> 00:25:37,350
their benefits of using them and what

00:25:35,129 --> 00:25:39,840
the the use cases are for having the

00:25:37,350 --> 00:25:42,720
different instances configurations and

00:25:39,840 --> 00:25:45,809
when i briefed through some of the core

00:25:42,720 --> 00:25:48,359
concepts using Drupal 8 and now it's

00:25:45,809 --> 00:25:51,200
time for some demos so we've been

00:25:48,359 --> 00:25:51,200
looking at some source code

00:25:51,860 --> 00:26:00,160
so I made up this sucks

00:26:03,520 --> 00:26:07,590
they're this real quick

00:26:19,710 --> 00:26:22,710
this

00:26:27,230 --> 00:26:32,290
it does not support oh that's cool

00:26:29,840 --> 00:26:32,290
awesome

00:26:33,760 --> 00:26:37,020
cool that mean

00:26:43,350 --> 00:26:49,549
alrighty so here I have a demo module

00:26:46,740 --> 00:26:53,490
called pilot and as we mentioned before

00:26:49,549 --> 00:26:55,350
/ PSR for we have all our plugin

00:26:53,490 --> 00:26:57,539
implementations or all of our classes so

00:26:55,350 --> 00:26:59,549
basically the autoloaders can find them

00:26:57,539 --> 00:27:01,110
inside of the source directory you

00:26:59,549 --> 00:27:06,660
notice inside of the module I don't have

00:27:01,110 --> 00:27:09,120
any info hooks at all and everything is

00:27:06,660 --> 00:27:10,830
just found within source plug-in

00:27:09,120 --> 00:27:13,110
directory and then all the different

00:27:10,830 --> 00:27:14,580
plug-in types that are out there so what

00:27:13,110 --> 00:27:16,860
differentiates a class from a plugin

00:27:14,580 --> 00:27:19,320
essentially it's a class that's within a

00:27:16,860 --> 00:27:22,500
certain namespace and that implements a

00:27:19,320 --> 00:27:25,440
specific interface so I'll start off

00:27:22,500 --> 00:27:27,480
with the image effects on plug-in type

00:27:25,440 --> 00:27:30,000
so this is what's desaturating or

00:27:27,480 --> 00:27:34,530
resizing your images and we have

00:27:30,000 --> 00:27:37,020
something called pics allies so first

00:27:34,530 --> 00:27:39,720
off it's inside of the directory source

00:27:37,020 --> 00:27:41,190
plugin image effect and then my plugin

00:27:39,720 --> 00:27:43,950
name is called pixel eyes so therefore

00:27:41,190 --> 00:27:46,850
there's my class it's extending the

00:27:43,950 --> 00:27:48,900
image effect base which is implementing

00:27:46,850 --> 00:27:50,580
configurable image effect interface

00:27:48,900 --> 00:27:52,350
which just means that hey I have this

00:27:50,580 --> 00:27:54,600
image effect but i also have a way of

00:27:52,350 --> 00:27:56,730
basically to find configurations for it

00:27:54,600 --> 00:27:59,159
so that means i can implement stuff like

00:27:56,730 --> 00:28:02,520
default configuration and get form and

00:27:59,159 --> 00:28:03,780
valid a former etc etc what's very

00:28:02,520 --> 00:28:05,760
important is that i'm defining this

00:28:03,780 --> 00:28:11,270
class within a certain namespace a large

00:28:05,760 --> 00:28:11,270
enough by the way let's get bigger

00:28:11,480 --> 00:28:18,510
uh-huh it's on github post a link to it

00:28:15,030 --> 00:28:20,730
on the comments of the talk so yeah the

00:28:18,510 --> 00:28:23,820
namespace is Drupal pilot so that's the

00:28:20,730 --> 00:28:25,500
vendor namespace the sub namespace would

00:28:23,820 --> 00:28:27,559
be plug-in image effect because that's

00:28:25,500 --> 00:28:30,659
what the image module to find it to be

00:28:27,559 --> 00:28:32,220
for every class that I use I have to go

00:28:30,659 --> 00:28:33,809
ahead and say hey use this one so that

00:28:32,220 --> 00:28:37,010
way I can out you know it's basically a

00:28:33,809 --> 00:28:40,610
shortcut so again assuming PHP X

00:28:37,010 --> 00:28:42,380
with us and the info hook that would

00:28:40,610 --> 00:28:44,750
have been is actually now within an

00:28:42,380 --> 00:28:45,980
annotation sure how my description but

00:28:44,750 --> 00:28:48,440
the most important part is I have an

00:28:45,980 --> 00:28:50,210
image effect marker that describes hey

00:28:48,440 --> 00:28:52,190
this is my identifier this is my ID

00:28:50,210 --> 00:28:53,840
pilot pic slice and this is a label that

00:28:52,190 --> 00:28:55,970
I want and we're even using a

00:28:53,840 --> 00:28:57,680
translation marker that says this string

00:28:55,970 --> 00:28:59,720
right here is translatable so pass it

00:28:57,680 --> 00:29:02,870
through the T function do your thing so

00:28:59,720 --> 00:29:04,280
the ID label description and and just

00:29:02,870 --> 00:29:08,090
with this I should have it available in

00:29:04,280 --> 00:29:09,740
the UI of course the thing is with the

00:29:08,090 --> 00:29:12,380
contract that I'm implementing a

00:29:09,740 --> 00:29:16,100
specific interface I have to provide the

00:29:12,380 --> 00:29:18,590
apply effect and I could I could have

00:29:16,100 --> 00:29:21,260
extended something like a desaturate or

00:29:18,590 --> 00:29:23,900
resize and do some additional stuff to

00:29:21,260 --> 00:29:25,460
it but this is just extending off the

00:29:23,900 --> 00:29:27,710
image effect base which essentially does

00:29:25,460 --> 00:29:31,520
nothing in here I'm just going to be

00:29:27,710 --> 00:29:33,590
pixel izing an image and I'm saying how

00:29:31,520 --> 00:29:34,940
much saw one pixel eyes it by and what I

00:29:33,590 --> 00:29:38,360
want to use advanced controls for this

00:29:34,940 --> 00:29:41,510
pixelization and here is a quick form

00:29:38,360 --> 00:29:43,640
API insert a shin so we have get form so

00:29:41,510 --> 00:29:47,060
that's essentially its and I will show

00:29:43,640 --> 00:29:49,990
you what that looks like in the UI so we

00:29:47,060 --> 00:29:56,380
have the image style let's add a style

00:29:49,990 --> 00:29:58,610
call that blah and because i had this

00:29:56,380 --> 00:30:01,600
information inside of the annotation i

00:29:58,610 --> 00:30:04,520
should be able to see it here pixel eyes

00:30:01,600 --> 00:30:07,250
awesome so let's add this since i'm

00:30:04,520 --> 00:30:09,140
implementing the configurable was it

00:30:07,250 --> 00:30:12,050
configurable image effect interface i

00:30:09,140 --> 00:30:15,530
have the opportunity to add in form so

00:30:12,050 --> 00:30:16,610
say pixel size 40 would be fine I don't

00:30:15,530 --> 00:30:19,220
want to use advanced pixilation

00:30:16,610 --> 00:30:21,920
pixelization effects go ahead and add it

00:30:19,220 --> 00:30:26,090
boom so that's saved and to a config

00:30:21,920 --> 00:30:29,170
insti and let's go over to the article

00:30:26,090 --> 00:30:34,970
display image and say we're going to

00:30:29,170 --> 00:30:37,460
going to use that image effect blahs in

00:30:34,970 --> 00:30:42,130
there go ahead and update that and then

00:30:37,460 --> 00:30:42,130
say let's add some content

00:30:42,490 --> 00:30:55,630
some article content to be attacked

00:30:46,660 --> 00:30:58,010
stuffs adding an image Super Mario so

00:30:55,630 --> 00:31:00,110
this Super Mario image is actually very

00:30:58,010 --> 00:31:03,170
realistic rendition of Mario where yoshi

00:31:00,110 --> 00:31:05,960
is a dinosaur and Mario is a pudgy fat

00:31:03,170 --> 00:31:07,670
guy let's go ahead and save and publish

00:31:05,960 --> 00:31:10,880
this and see what it looks like through

00:31:07,670 --> 00:31:15,290
our pixelization a it's what we're used

00:31:10,880 --> 00:31:18,260
to pixel eyes Mario pretty cool huh and

00:31:15,290 --> 00:31:20,810
all I had to do is apply effect method

00:31:18,260 --> 00:31:22,610
essentially and this is all contained

00:31:20,810 --> 00:31:24,020
within a single file so no hooks

00:31:22,610 --> 00:31:26,300
elsewhere it's not cluttering up any of

00:31:24,020 --> 00:31:27,950
the module file it's just just by Fiat

00:31:26,300 --> 00:31:31,040
just because it exists inside the same

00:31:27,950 --> 00:31:33,950
space it will be picked up so this is a

00:31:31,040 --> 00:31:36,950
essentially a simple plug-in that just

00:31:33,950 --> 00:31:38,950
does this one thing however if you guys

00:31:36,950 --> 00:31:41,510
are familiar with the would see tools

00:31:38,950 --> 00:31:44,360
there was an opportunity to create house

00:31:41,510 --> 00:31:47,180
plugins for instance those one class or

00:31:44,360 --> 00:31:50,480
one plug-in type that handled all of the

00:31:47,180 --> 00:31:52,280
blocks or those one plug-in type that

00:31:50,480 --> 00:31:54,830
handled all the relationships between

00:31:52,280 --> 00:31:56,810
entities but it had a mechanism to

00:31:54,830 --> 00:31:58,460
basically look through everything set a

00:31:56,810 --> 00:32:01,610
schema find relationships between things

00:31:58,460 --> 00:32:03,800
and it can create spawn child plugins

00:32:01,610 --> 00:32:06,170
based on what it found through some sort

00:32:03,800 --> 00:32:08,180
of a traversable set of data and so now

00:32:06,170 --> 00:32:10,010
we have child plugins and there's

00:32:08,180 --> 00:32:11,510
several of them with their own instances

00:32:10,010 --> 00:32:14,090
however it's still using one single

00:32:11,510 --> 00:32:15,500
class to do all the operation and Drupal

00:32:14,090 --> 00:32:19,430
8 we call that derivations or

00:32:15,500 --> 00:32:22,880
derivatives so I have another image

00:32:19,430 --> 00:32:24,890
effect called color eyes and this is a

00:32:22,880 --> 00:32:29,030
super simple and basically just applying

00:32:24,890 --> 00:32:31,960
a tint based off a list of colors that I

00:32:29,030 --> 00:32:34,360
had to find prior so say for instance

00:32:31,960 --> 00:32:38,840
and I'll jump into the molecule file

00:32:34,360 --> 00:32:41,720
here's an array of colors so I have lime

00:32:38,840 --> 00:32:43,430
and hot pink imagine if this was a

00:32:41,720 --> 00:32:44,330
configuration that you built yourself or

00:32:43,430 --> 00:32:46,669
you can just add another

00:32:44,330 --> 00:32:50,179
add another color and then with that

00:32:46,669 --> 00:32:53,029
data our plugin for colorization can

00:32:50,179 --> 00:32:54,350
just basically pull that end and apply

00:32:53,029 --> 00:32:58,159
the effect that you provide it with the

00:32:54,350 --> 00:33:00,019
states right so the thing that defines

00:32:58,159 --> 00:33:03,580
this plug-in from being a derivative is

00:33:00,019 --> 00:33:06,289
that we have a derivative right here

00:33:03,580 --> 00:33:08,620
parameter and which we're defining where

00:33:06,289 --> 00:33:11,149
our classes to do the derivatives itself

00:33:08,620 --> 00:33:13,970
and that can be found inside a plug-in

00:33:11,149 --> 00:33:17,029
derivative and this is what's basically

00:33:13,970 --> 00:33:18,830
it's a glorified for each and for each

00:33:17,029 --> 00:33:20,360
one of the data that we have stored in

00:33:18,830 --> 00:33:23,139
the database or as you can see I just

00:33:20,360 --> 00:33:25,610
had it as an array it's going to derive

00:33:23,139 --> 00:33:27,470
the annotation data that we would have

00:33:25,610 --> 00:33:29,809
had inside of each one of these classes

00:33:27,470 --> 00:33:33,289
and auto generate for us and all we're

00:33:29,809 --> 00:33:35,690
really doing is a passing in an ID a

00:33:33,289 --> 00:33:37,789
label and then the color and going and

00:33:35,690 --> 00:33:40,309
return that is here all my derivatives

00:33:37,789 --> 00:33:43,669
and going back to the original plugin

00:33:40,309 --> 00:33:47,450
it's just reading that data in through

00:33:43,669 --> 00:33:50,450
the plug-in definition so my derivative

00:33:47,450 --> 00:33:52,220
class is providing the values for the

00:33:50,450 --> 00:33:54,769
for the plugin definition of all these

00:33:52,220 --> 00:33:56,529
child plugins so just with this one

00:33:54,769 --> 00:33:59,090
class I'm able to do multiple things

00:33:56,529 --> 00:34:03,309
I'll hop back over to the image style

00:33:59,090 --> 00:34:05,779
blah and add in a colorized to hot pink

00:34:03,309 --> 00:34:07,789
so here again we have colorized to lime

00:34:05,779 --> 00:34:09,859
color is a hot pink and this is coming

00:34:07,789 --> 00:34:11,540
through through the derivatives which is

00:34:09,859 --> 00:34:14,300
again the for our glorified for each

00:34:11,540 --> 00:34:16,550
loop and i'll say i want this hot pink

00:34:14,300 --> 00:34:23,359
and there we have now a hot paint

00:34:16,550 --> 00:34:28,270
pixelized image so updating style now we

00:34:23,359 --> 00:34:28,270
have a pinkish pics lies Mario cool

00:34:29,300 --> 00:34:35,340
so jumping into something simpler

00:34:32,210 --> 00:34:37,710
something very common is how to define a

00:34:35,340 --> 00:34:39,330
block and many of you have defined

00:34:37,710 --> 00:34:41,760
blocks before with hook block info hook

00:34:39,330 --> 00:34:43,260
block view and hook block etc etc this

00:34:41,760 --> 00:34:45,000
is all the code that's necessary to

00:34:43,260 --> 00:34:47,220
define the block and again following the

00:34:45,000 --> 00:34:48,780
same patterns it uses annotations to

00:34:47,220 --> 00:34:51,150
discover where all these plugins are and

00:34:48,780 --> 00:34:53,280
what they do all I needs is an ID and I

00:34:51,150 --> 00:34:55,500
have been label and then again you know

00:34:53,280 --> 00:34:56,760
really just extending the block base and

00:34:55,500 --> 00:34:58,620
then whatever it is that you're doing

00:34:56,760 --> 00:35:00,210
here I guess you're your custom logic

00:34:58,620 --> 00:35:02,490
you can just over I the methods that are

00:35:00,210 --> 00:35:04,140
necessary in this case and the method

00:35:02,490 --> 00:35:08,610
build I'm just providing a little

00:35:04,140 --> 00:35:12,270
snowman in the markup and so if we jump

00:35:08,610 --> 00:35:15,240
into the block layout and say I'm going

00:35:12,270 --> 00:35:18,990
to drop the where is the snowman there

00:35:15,240 --> 00:35:21,060
you go ad in an instance of the snowman

00:35:18,990 --> 00:35:22,440
if I had implements in some

00:35:21,060 --> 00:35:25,050
configuration I can go ahead and drop

00:35:22,440 --> 00:35:27,300
that in I did not I'll go and save this

00:35:25,050 --> 00:35:31,850
and put it inside of the content of the

00:35:27,300 --> 00:35:35,790
page so save that and there's my block I

00:35:31,850 --> 00:35:38,310
think that's a sure I've come back over

00:35:35,790 --> 00:35:42,150
here boom we have an indifferent snowman

00:35:38,310 --> 00:35:47,340
on the page now so very very easy to

00:35:42,150 --> 00:35:49,980
implement a block cool stuff so yeah

00:35:47,340 --> 00:35:57,980
those are some examples of how you can

00:35:49,980 --> 00:36:04,310
implement plugins a we did this already

00:35:57,980 --> 00:36:04,310
yes so now for the even drier section

00:36:05,069 --> 00:36:11,140
plug-in system internals okay so if you

00:36:09,369 --> 00:36:13,299
are a developer who wants you to find

00:36:11,140 --> 00:36:16,380
some new systems this would be important

00:36:13,299 --> 00:36:19,150
to you basically everything that is a

00:36:16,380 --> 00:36:22,089
managing a plug-in system is a plug-in

00:36:19,150 --> 00:36:24,069
manager and the responsibilities of this

00:36:22,089 --> 00:36:26,829
plugin manager are basically it's a

00:36:24,069 --> 00:36:28,569
twofold first off you want to find where

00:36:26,829 --> 00:36:29,799
all your plugins exist where all the

00:36:28,569 --> 00:36:31,179
other modules are providing these

00:36:29,799 --> 00:36:33,309
plugins and then you want to instantiate

00:36:31,179 --> 00:36:36,339
them so essentially the discovery phase

00:36:33,309 --> 00:36:39,479
and the factory phase and then there's

00:36:36,339 --> 00:36:42,099
also an optional phase called the mapper

00:36:39,479 --> 00:36:45,699
which would be if for whatever reason at

00:36:42,099 --> 00:36:47,380
runtime you don't know what you want to

00:36:45,699 --> 00:36:50,049
call so you need some sort of mechanism

00:36:47,380 --> 00:36:51,339
that says hey dynamic data come here let

00:36:50,049 --> 00:36:52,779
me figure out what you want to do and

00:36:51,339 --> 00:36:54,669
then i can find what what class i'm

00:36:52,779 --> 00:36:56,919
supposed to be instantiated and go ahead

00:36:54,669 --> 00:36:59,650
and pass that to you and that is what

00:36:56,919 --> 00:37:02,169
the mapper does so um first off the

00:36:59,650 --> 00:37:04,299
discovery classes that are you know that

00:37:02,169 --> 00:37:06,489
are provided interval for the the

00:37:04,299 --> 00:37:08,589
plug-in manager on all it's really

00:37:06,489 --> 00:37:12,029
implementing is get definition and get

00:37:08,589 --> 00:37:14,529
definitions so in a sense this is

00:37:12,029 --> 00:37:16,269
finding all of the plugins that exists

00:37:14,529 --> 00:37:17,909
and it has very different mechanisms to

00:37:16,269 --> 00:37:20,890
do this and talk about each one of those

00:37:17,909 --> 00:37:22,929
again the factory is just it's a way of

00:37:20,890 --> 00:37:25,419
instantiating so the only method that it

00:37:22,929 --> 00:37:27,009
implements is the crate instance where

00:37:25,419 --> 00:37:29,109
we provide what the plugin ID is and

00:37:27,009 --> 00:37:32,380
then we can provide a states as well the

00:37:29,109 --> 00:37:34,419
configuration and then the mapper is get

00:37:32,380 --> 00:37:36,069
instance whereas I don't know what the

00:37:34,419 --> 00:37:37,809
instances but here's some configuration

00:37:36,069 --> 00:37:39,729
here are some options you figure it out

00:37:37,809 --> 00:37:41,349
and then come back to me and give it to

00:37:39,729 --> 00:37:44,349
the factory so then I could create the

00:37:41,349 --> 00:37:46,449
instance and go to town with it so the

00:37:44,349 --> 00:37:48,549
plugin manager all encompassing is

00:37:46,449 --> 00:37:51,249
really just implementing each one of

00:37:48,549 --> 00:37:53,289
these interfaces so now you have to just

00:37:51,249 --> 00:37:55,689
deal with one class not necessarily

00:37:53,289 --> 00:37:57,939
three different classes on so for

00:37:55,689 --> 00:38:00,009
instance you instantiated a mapper or

00:37:57,939 --> 00:38:01,630
and sorry you instantiate it a manager I

00:38:00,009 --> 00:38:04,269
mean you're saying hey get all the

00:38:01,630 --> 00:38:06,880
definitions the plug-in manager itself

00:38:04,269 --> 00:38:09,099
doesn't have to re-implement what get

00:38:06,880 --> 00:38:11,380
definitions means instead you can just

00:38:09,099 --> 00:38:13,059
assign the discovery property within it

00:38:11,380 --> 00:38:15,669
to a discovery class and just kind of

00:38:13,059 --> 00:38:17,290
proxy to get definitions itself so when

00:38:15,669 --> 00:38:19,000
I say manager get definitions

00:38:17,290 --> 00:38:20,920
what is doing is calling the discovery

00:38:19,000 --> 00:38:24,670
class to get the definitions for it and

00:38:20,920 --> 00:38:27,640
just passing that along the discovery

00:38:24,670 --> 00:38:29,410
classes that are available are static

00:38:27,640 --> 00:38:31,270
discovery which is hey I'm just going to

00:38:29,410 --> 00:38:33,790
give you straight up all the different

00:38:31,270 --> 00:38:35,830
plugins that I want you to have and this

00:38:33,790 --> 00:38:37,180
is kind of cool for testing so you don't

00:38:35,830 --> 00:38:39,730
have to implement plugins just say

00:38:37,180 --> 00:38:41,350
here's an array of data go to town yeah

00:38:39,730 --> 00:38:44,050
mole discovery which is what you often

00:38:41,350 --> 00:38:47,230
see with the basically every llamo file

00:38:44,050 --> 00:38:50,560
that is endurable many links many

00:38:47,230 --> 00:38:53,310
routers contextual menus services

00:38:50,560 --> 00:38:56,620
themselves etc etc those are essentially

00:38:53,310 --> 00:38:58,630
providing data for plugins and the way

00:38:56,620 --> 00:39:01,090
the systems will find them is by looking

00:38:58,630 --> 00:39:02,470
through all the llamo files and hook

00:39:01,090 --> 00:39:05,230
discovery which is what we're all used

00:39:02,470 --> 00:39:06,460
to is something hook info and at this

00:39:05,230 --> 00:39:08,490
point I'm not even sure if that's

00:39:06,460 --> 00:39:11,500
available anymore haven't checked that

00:39:08,490 --> 00:39:13,570
might have been deprecated not sure but

00:39:11,500 --> 00:39:15,730
hey but the most common one is the

00:39:13,570 --> 00:39:17,740
annotation discovery which is where we

00:39:15,730 --> 00:39:20,320
put in these annotations baked into our

00:39:17,740 --> 00:39:22,060
classes and that's what most people are

00:39:20,320 --> 00:39:23,770
doing and it looks really cool so maybe

00:39:22,060 --> 00:39:26,410
that's the method that you want to try

00:39:23,770 --> 00:39:28,600
so on what does it look like when you're

00:39:26,410 --> 00:39:30,720
actually pulling in this data inside of

00:39:28,600 --> 00:39:33,550
the constructor for your plug-in manager

00:39:30,720 --> 00:39:35,830
you can do this say the discovery

00:39:33,550 --> 00:39:38,740
property it's going to be an annotated

00:39:35,830 --> 00:39:40,660
class discovery how do I find the stuff

00:39:38,740 --> 00:39:42,100
well the first parameter is here's the

00:39:40,660 --> 00:39:44,710
subdirectory that you should be looking

00:39:42,100 --> 00:39:46,240
in for the namespace and here's a list

00:39:44,710 --> 00:39:48,250
of all namespaces you should be looking

00:39:46,240 --> 00:39:51,550
at essentially this is all the modules

00:39:48,250 --> 00:39:53,650
that are enabled and then how do i know

00:39:51,550 --> 00:39:55,240
which marker i should be looking for

00:39:53,650 --> 00:39:57,910
well that's where you would have to

00:39:55,240 --> 00:39:59,830
implement an annotation class and you

00:39:57,910 --> 00:40:01,960
just specify what the name spaces for

00:39:59,830 --> 00:40:03,730
that so Drupal core annotations actions

00:40:01,960 --> 00:40:06,910
in this case will be looking for

00:40:03,730 --> 00:40:08,950
anything with an axe action a marker

00:40:06,910 --> 00:40:10,990
inside of the doc blocks and assuming

00:40:08,950 --> 00:40:12,700
it's within a certain namespace damn it

00:40:10,990 --> 00:40:14,710
finds all the plugins so again this is

00:40:12,700 --> 00:40:17,140
what differentiates a standard class as

00:40:14,710 --> 00:40:20,950
being a standard class or a plugin that

00:40:17,140 --> 00:40:23,500
can be used hook discovery this is

00:40:20,950 --> 00:40:25,750
basically invoking a module in book so

00:40:23,500 --> 00:40:27,670
if I'm saying hey here all the modules

00:40:25,750 --> 00:40:29,680
that exists and I'm in

00:40:27,670 --> 00:40:32,020
kien element info it's basically calling

00:40:29,680 --> 00:40:33,190
out hook elements info or looking for

00:40:32,020 --> 00:40:34,000
everything that implements that so

00:40:33,190 --> 00:40:37,390
that's something that you're very

00:40:34,000 --> 00:40:38,710
familiar with yeah Mel discovery this is

00:40:37,390 --> 00:40:40,390
the file name that you want to look for

00:40:38,710 --> 00:40:41,859
and again these are all the modules that

00:40:40,390 --> 00:40:43,750
are enabled so lift through all those

00:40:41,859 --> 00:40:45,910
directories and grab all the stuff and

00:40:43,750 --> 00:40:47,859
then static directory us that static

00:40:45,910 --> 00:40:49,930
discovery which is again just passing in

00:40:47,859 --> 00:40:54,520
an array only really useful for testing

00:40:49,930 --> 00:40:55,660
and on top of the existing discovery

00:40:54,520 --> 00:40:58,720
classes there's something called

00:40:55,660 --> 00:41:01,420
decorators which is a lot like ultra

00:40:58,720 --> 00:41:05,220
hooks will jump and teach one of these

00:41:01,420 --> 00:41:08,410
so a derivative discovery decorator

00:41:05,220 --> 00:41:12,430
which is supposed to be trying to

00:41:08,410 --> 00:41:15,250
remember for every a plug-in type that

00:41:12,430 --> 00:41:16,900
you define if your plugins are providing

00:41:15,250 --> 00:41:18,670
a derivative class within the

00:41:16,900 --> 00:41:20,980
annotations I'll go ahead and pull in

00:41:18,670 --> 00:41:23,440
those classes and find all this sub or

00:41:20,980 --> 00:41:25,839
child plugins that exist for that plugin

00:41:23,440 --> 00:41:27,490
so if you need to that or wanted to

00:41:25,839 --> 00:41:29,710
provide that functionality inside the

00:41:27,490 --> 00:41:33,010
constructor of the plug-in manager you

00:41:29,710 --> 00:41:34,180
would pass this in ultra decorator again

00:41:33,010 --> 00:41:36,549
this is invoking something that's very

00:41:34,180 --> 00:41:38,950
familiar to most of us which is calling

00:41:36,549 --> 00:41:42,130
out hook action info alter or whatever

00:41:38,950 --> 00:41:44,319
hope they pass in for the discovery and

00:41:42,130 --> 00:41:46,540
then a process decorator would be

00:41:44,319 --> 00:41:49,210
something like hey I have all the

00:41:46,540 --> 00:41:51,549
plugins that I want even through the the

00:41:49,210 --> 00:41:52,990
discovery decorators now I once you

00:41:51,549 --> 00:41:55,480
process each one of these hooks to

00:41:52,990 --> 00:41:58,030
provide some defaults or maybe massage

00:41:55,480 --> 00:42:00,339
the data a little bit and i want you to

00:41:58,030 --> 00:42:02,049
call this callback to be responsible for

00:42:00,339 --> 00:42:04,660
doing that this is where you would

00:42:02,049 --> 00:42:06,220
provide that and then a catch decorator

00:42:04,660 --> 00:42:08,559
which is a kind of interesting way of

00:42:06,220 --> 00:42:10,000
thinking of this if we're passing in all

00:42:08,559 --> 00:42:12,430
of the plugins that have been discovered

00:42:10,000 --> 00:42:14,170
how do we catch them we can patch it in

00:42:12,430 --> 00:42:16,240
through this discovery our decorator

00:42:14,170 --> 00:42:18,520
which is a cache and instead of pulling

00:42:16,240 --> 00:42:20,440
in plugins directly from Drupal source

00:42:18,520 --> 00:42:22,690
code on it would just pull it in

00:42:20,440 --> 00:42:24,819
directly from cash so here you define

00:42:22,690 --> 00:42:26,200
what your cache key is and it would be

00:42:24,819 --> 00:42:28,540
in charge of just cashing that on the

00:42:26,200 --> 00:42:32,109
fly as it's discovering it so all of

00:42:28,540 --> 00:42:34,390
these I guess processes to find plugins

00:42:32,109 --> 00:42:37,299
or even to find things that are defined

00:42:34,390 --> 00:42:39,780
in like info hooks something that you've

00:42:37,299 --> 00:42:41,850
all been familiar with but now we have

00:42:39,780 --> 00:42:45,140
classes that basically walk us through

00:42:41,850 --> 00:42:48,300
the process without us having to do much

00:42:45,140 --> 00:42:50,760
so that's the discovery phase now the

00:42:48,300 --> 00:42:52,310
factory classes on what we have

00:42:50,760 --> 00:42:54,900
available are just the default factory

00:42:52,310 --> 00:42:56,940
container factory reflection and widget

00:42:54,900 --> 00:42:58,380
factory and in a sense what this looks

00:42:56,940 --> 00:43:00,000
like when you're implementing it is you

00:42:58,380 --> 00:43:02,160
call the plug-in manager and say hey

00:43:00,000 --> 00:43:03,750
create the instance here's the plug-in

00:43:02,160 --> 00:43:05,250
ID that I want because now that I've

00:43:03,750 --> 00:43:07,080
discovered all the plugins I have

00:43:05,250 --> 00:43:09,360
machining and I'm going to pass this

00:43:07,080 --> 00:43:13,320
plug-in ID and pass in some states based

00:43:09,360 --> 00:43:14,820
on whatever money applications doing I I

00:43:13,320 --> 00:43:16,920
look at in terms of this when you

00:43:14,820 --> 00:43:19,230
instantiate the class it kind of is

00:43:16,920 --> 00:43:21,270
broken down into two pieces how you

00:43:19,230 --> 00:43:24,630
instantiate something and then the

00:43:21,270 --> 00:43:26,970
arguments they pass into it given that

00:43:24,630 --> 00:43:29,310
kind of context now all the plug-in

00:43:26,970 --> 00:43:31,080
factories that exist or factory plugins

00:43:29,310 --> 00:43:33,360
that exists a kind of make more sense

00:43:31,080 --> 00:43:35,670
for instance the default factory this is

00:43:33,360 --> 00:43:38,280
literally just calling new whatever the

00:43:35,670 --> 00:43:39,900
class name is so that's a pretty

00:43:38,280 --> 00:43:41,850
straightforward operation and passing

00:43:39,900 --> 00:43:44,100
them be fixed arguments that you that

00:43:41,850 --> 00:43:46,500
you require in your plug-in type so

00:43:44,100 --> 00:43:48,270
that's very simple but if you want to do

00:43:46,500 --> 00:43:50,970
something different like instantiate

00:43:48,270 --> 00:43:52,260
your plugins with the container factory

00:43:50,970 --> 00:43:54,470
just like we talked about the service

00:43:52,260 --> 00:43:56,130
containers there's a class for that and

00:43:54,470 --> 00:43:58,410
internally this is what it would be

00:43:56,130 --> 00:44:00,240
calling in the plug in class create

00:43:58,410 --> 00:44:02,600
method and just pulling in the drupal

00:44:00,240 --> 00:44:05,310
container object and which we can then

00:44:02,600 --> 00:44:07,470
grab in the ID that we want and pass in

00:44:05,310 --> 00:44:09,150
some state into that so yet again a

00:44:07,470 --> 00:44:12,120
different way of instantiating this

00:44:09,150 --> 00:44:14,130
plug-in the widget factory is something

00:44:12,120 --> 00:44:16,890
that's used with the field widgets in a

00:44:14,130 --> 00:44:19,710
sense if you ever needed to have an

00:44:16,890 --> 00:44:22,050
instantiate ER with custom parameters

00:44:19,710 --> 00:44:24,450
this would be I guess a nice way to

00:44:22,050 --> 00:44:26,070
follow suit we're in this case it's not

00:44:24,450 --> 00:44:28,020
just pulling in the config plug-in and

00:44:26,070 --> 00:44:29,790
the plug-in definition instead it's

00:44:28,020 --> 00:44:32,100
passing in the field definitions and

00:44:29,790 --> 00:44:34,980
then the config settings so it's it's

00:44:32,100 --> 00:44:36,690
doing its own thing here not necessarily

00:44:34,980 --> 00:44:38,760
useful probably for your own custom code

00:44:36,690 --> 00:44:41,340
to you know extend upon it but it is a

00:44:38,760 --> 00:44:43,320
good example to see how you can I guess

00:44:41,340 --> 00:44:46,800
have a different way of instantiating

00:44:43,320 --> 00:44:48,120
with the custom parameters and the

00:44:46,800 --> 00:44:50,350
reflection factory which is actually

00:44:48,120 --> 00:44:51,850
pretty interesting on the

00:44:50,350 --> 00:44:54,070
dynamic part here is that instead of

00:44:51,850 --> 00:44:56,230
having a fixed set of arguments it's a

00:44:54,070 --> 00:44:58,240
dynamic set so a reflection class would

00:44:56,230 --> 00:45:00,160
basically pull in the class and find out

00:44:58,240 --> 00:45:03,010
what arguments exist for it in the the

00:45:00,160 --> 00:45:05,170
function signature and based on what you

00:45:03,010 --> 00:45:07,570
pass in as configuration it would go

00:45:05,170 --> 00:45:09,820
ahead and pull in these IDs into the

00:45:07,570 --> 00:45:11,980
parameter or into the the plug-in itself

00:45:09,820 --> 00:45:13,780
dynamically and this is kind of helpful

00:45:11,980 --> 00:45:15,100
for any kind of plug-in that you have an

00:45:13,780 --> 00:45:17,470
X number of parameters that can be

00:45:15,100 --> 00:45:20,350
coming in this is especially used in

00:45:17,470 --> 00:45:22,270
something like autocomplete we can have

00:45:20,350 --> 00:45:25,360
n number of parameters being passed in

00:45:22,270 --> 00:45:26,980
or even and I think entity relations

00:45:25,360 --> 00:45:28,480
where you can have again different

00:45:26,980 --> 00:45:30,880
parameters to define like what these

00:45:28,480 --> 00:45:32,290
relationships are so reflection factory

00:45:30,880 --> 00:45:35,830
is really good for that dynamic

00:45:32,290 --> 00:45:37,240
arguments and then the macro class which

00:45:35,830 --> 00:45:39,580
is the optional part getting in the

00:45:37,240 --> 00:45:42,100
instance the way this works is that

00:45:39,580 --> 00:45:44,200
you're not really defining which class

00:45:42,100 --> 00:45:46,990
you're instantiated nor are you defining

00:45:44,200 --> 00:45:49,540
what arguments to pass in but you do

00:45:46,990 --> 00:45:52,780
have a set of options based on I don't

00:45:49,540 --> 00:45:54,160
know the state of your application what

00:45:52,780 --> 00:45:56,560
it will do is they'll grab in some

00:45:54,160 --> 00:45:58,480
options and i'll go through some logic

00:45:56,560 --> 00:46:00,550
phase let's say hey figure out what

00:45:58,480 --> 00:46:02,590
class would be most appropriate to do

00:46:00,550 --> 00:46:04,240
the process that i want to do one

00:46:02,590 --> 00:46:05,680
example would be the archiver where

00:46:04,240 --> 00:46:08,920
there's many different mechanisms to all

00:46:05,680 --> 00:46:10,990
require something zip or tar.gz how do

00:46:08,920 --> 00:46:12,910
we know which one to use based on

00:46:10,990 --> 00:46:14,680
configurations are passing in it would

00:46:12,910 --> 00:46:16,350
decide what class is most appropriate to

00:46:14,680 --> 00:46:18,610
handle such thing so for instance

00:46:16,350 --> 00:46:19,870
looking at the extension of a file and

00:46:18,610 --> 00:46:21,550
then it would know oh you know this is a

00:46:19,870 --> 00:46:23,830
dot zip file so I'm going to use the zip

00:46:21,550 --> 00:46:25,690
an archiver another example of this

00:46:23,830 --> 00:46:27,520
would be on say for instance you have a

00:46:25,690 --> 00:46:30,970
rest server and you want to process

00:46:27,520 --> 00:46:32,500
basically the response of a request at

00:46:30,970 --> 00:46:33,910
runtime you don't know what class is

00:46:32,500 --> 00:46:36,580
most appropriate but you can look at the

00:46:33,910 --> 00:46:38,200
the content type that the requester is

00:46:36,580 --> 00:46:40,450
accepting and you can say hey you know

00:46:38,200 --> 00:46:42,250
this guy wants to have JSON format so

00:46:40,450 --> 00:46:43,600
let's pull in the JSON class and this

00:46:42,250 --> 00:46:46,210
will happen on runtime so you don't

00:46:43,600 --> 00:46:49,300
necessarily have to have strange if-else

00:46:46,210 --> 00:46:51,490
conditions inside your application the

00:46:49,300 --> 00:46:54,100
mapper class should be able to handle

00:46:51,490 --> 00:46:55,570
that instead so once it has a logic and

00:46:54,100 --> 00:46:57,880
figure out what it needs it figures out

00:46:55,570 --> 00:47:00,070
what the plugin ID is and then you can

00:46:57,880 --> 00:47:01,280
just pass that into the factory so this

00:47:00,070 --> 00:47:03,440
create instance now

00:47:01,280 --> 00:47:04,940
the ID and again he can pass in the

00:47:03,440 --> 00:47:08,240
options to define whatever

00:47:04,940 --> 00:47:10,580
configurations need thereafter um so

00:47:08,240 --> 00:47:16,450
that is in a nut all you really need ah

00:47:10,580 --> 00:47:21,230
I went back to far too many concepts

00:47:16,450 --> 00:47:22,930
okay that is all plugin manager is but

00:47:21,230 --> 00:47:25,820
again keep in mind this is headless

00:47:22,930 --> 00:47:27,350
you're basically Polian plugin data so

00:47:25,820 --> 00:47:28,430
once you have that data it's up to you

00:47:27,350 --> 00:47:29,780
if you wanted to have some sort of

00:47:28,430 --> 00:47:31,520
interface that goes along with it and

00:47:29,780 --> 00:47:33,950
again that's the fancy part that you can

00:47:31,520 --> 00:47:36,020
decide what you want to do with and then

00:47:33,950 --> 00:47:38,030
of course the instantiation which is a

00:47:36,020 --> 00:47:39,980
very boring and simple thing but again

00:47:38,030 --> 00:47:41,420
there's no different mechanisms of doing

00:47:39,980 --> 00:47:44,600
it based on certain use cases and

00:47:41,420 --> 00:47:46,010
whatever is part of a Drupal pretty much

00:47:44,600 --> 00:47:48,740
helps you get there at least half of the

00:47:46,010 --> 00:47:51,920
way so I'll go ahead and create a demo

00:47:48,740 --> 00:47:54,140
of doing a plug-in manager in a sense

00:47:51,920 --> 00:47:57,920
this is what the relationships look like

00:47:54,140 --> 00:47:59,990
we have a person plug-in manager which

00:47:57,920 --> 00:48:01,730
is the additional plug-in type that I've

00:47:59,990 --> 00:48:04,160
created which is a really lame example

00:48:01,730 --> 00:48:06,650
it's extending the default plugin

00:48:04,160 --> 00:48:08,210
manager and that itself is implementing

00:48:06,650 --> 00:48:10,880
a lot of interfaces in which you can see

00:48:08,210 --> 00:48:12,710
in the green dotted lines it implements

00:48:10,880 --> 00:48:15,140
the mapper interface factory interface

00:48:12,710 --> 00:48:16,730
and discovery interface of course and

00:48:15,140 --> 00:48:18,860
then it also implements the plug-in

00:48:16,730 --> 00:48:20,750
manager base itself so it has now a

00:48:18,860 --> 00:48:23,780
contract in which there's certain number

00:48:20,750 --> 00:48:25,880
of methods that the plug-in manager is

00:48:23,780 --> 00:48:27,890
supposed to implement luckily the

00:48:25,880 --> 00:48:30,350
default plug-in manager handles almost

00:48:27,890 --> 00:48:31,760
all of them and the person plugin

00:48:30,350 --> 00:48:33,740
manager really only needs to add in

00:48:31,760 --> 00:48:35,840
additional things that the default

00:48:33,740 --> 00:48:38,240
plugin manager does not provide such as

00:48:35,840 --> 00:48:39,680
a cash back end if I wanted to or ultra

00:48:38,240 --> 00:48:41,870
hooks if that's what I wanted to do as

00:48:39,680 --> 00:48:43,520
well so when you define your own plug-in

00:48:41,870 --> 00:48:45,950
types there's really not a whole lot of

00:48:43,520 --> 00:48:47,540
custom code you have to write but there

00:48:45,950 --> 00:48:53,920
is a bit of boilerplate stuff that you

00:48:47,540 --> 00:48:53,920
need to do so let's drop into code again

00:48:54,820 --> 00:49:04,980
and we'll talk about each one of these

00:48:57,990 --> 00:49:08,430
alright so it starts off with a purse

00:49:04,980 --> 00:49:11,450
and plug-in manager actually let's take

00:49:08,430 --> 00:49:14,250
a step back I'm defining the system in

00:49:11,450 --> 00:49:15,869
which I have a plug-in type that's

00:49:14,250 --> 00:49:17,940
supposed to do certain operations in

00:49:15,869 --> 00:49:20,340
this case it's just something simple

00:49:17,940 --> 00:49:22,320
like get a person and there's really

00:49:20,340 --> 00:49:25,650
only three parameters in which i play

00:49:22,320 --> 00:49:27,780
with a person's name their age and then

00:49:25,650 --> 00:49:30,420
how they do their greeting assuming

00:49:27,780 --> 00:49:31,680
they're like multilingual or whatever so

00:49:30,420 --> 00:49:34,920
this is an interface in which all the

00:49:31,680 --> 00:49:39,210
plugins will would basically extend I

00:49:34,920 --> 00:49:40,740
will provide a person base which is a

00:49:39,210 --> 00:49:41,970
class and again these classes don't

00:49:40,740 --> 00:49:43,650
necessarily have to exist in any

00:49:41,970 --> 00:49:46,590
specific place you define what these

00:49:43,650 --> 00:49:48,270
namespaces are but in here in this case

00:49:46,590 --> 00:49:51,270
I'm just using Drupal pilot plugin

00:49:48,270 --> 00:49:54,570
because that's a bit intuitive my class

00:49:51,270 --> 00:49:56,580
person base is extending the plugin base

00:49:54,570 --> 00:49:58,740
which again provides a lot of other

00:49:56,580 --> 00:50:01,320
stuff for us but I'm implementing the

00:49:58,740 --> 00:50:02,940
person interface so again this is what

00:50:01,320 --> 00:50:04,350
differentiates a class from a plug-in

00:50:02,940 --> 00:50:06,210
type is that it's implementing a

00:50:04,350 --> 00:50:08,400
specific interface and here I'm just

00:50:06,210 --> 00:50:10,320
providing the default get name it's just

00:50:08,400 --> 00:50:12,600
going to grab the definition and grab

00:50:10,320 --> 00:50:13,890
the name property I get age I'm grabbing

00:50:12,600 --> 00:50:16,170
it from the definition grabbing the each

00:50:13,890 --> 00:50:18,540
property and then the greeting simple

00:50:16,170 --> 00:50:21,200
hello my name is this and I am this many

00:50:18,540 --> 00:50:24,030
years old so very very straight forward

00:50:21,200 --> 00:50:26,280
so that defines I guess the skeleton of

00:50:24,030 --> 00:50:29,070
what my plugins would look like now I

00:50:26,280 --> 00:50:30,900
need to define a manager to basically

00:50:29,070 --> 00:50:32,820
handle doing the discoverability of

00:50:30,900 --> 00:50:35,400
these plugins and all the instantiating

00:50:32,820 --> 00:50:37,980
of these plugins so now I jump into the

00:50:35,400 --> 00:50:39,150
person plug-in manager PHP file so this

00:50:37,980 --> 00:50:42,300
is now three files that we're working

00:50:39,150 --> 00:50:43,560
with again I providing the namespace

00:50:42,300 --> 00:50:46,050
triple pilot plugin because that's

00:50:43,560 --> 00:50:48,090
intuitive all of these used stuff is

00:50:46,050 --> 00:50:50,270
just as a shortcut for not having to

00:50:48,090 --> 00:50:53,369
define the classes over and over again

00:50:50,270 --> 00:50:54,750
but in my person plug-in manager I'm

00:50:53,369 --> 00:50:57,150
extending the default plugin manager

00:50:54,750 --> 00:50:59,700
which itself is in charge of really

00:50:57,150 --> 00:51:01,310
pulling in or implementing a lot of the

00:50:59,700 --> 00:51:04,980
methods that are that are necessary

00:51:01,310 --> 00:51:06,540
since we are extending or implementing a

00:51:04,980 --> 00:51:09,359
certain interface so that handles a lot

00:51:06,540 --> 00:51:10,619
of it I'll go ahead and move this over

00:51:09,359 --> 00:51:14,070
so we can see one of the code as

00:51:10,619 --> 00:51:15,780
possible normally all you wouldn't want

00:51:14,070 --> 00:51:17,310
to do is just called a parent

00:51:15,780 --> 00:51:18,930
constructor which is a default plug-in

00:51:17,310 --> 00:51:22,470
manager which does a lot of stuff to it

00:51:18,930 --> 00:51:24,510
we pass in what sub game space we are

00:51:22,470 --> 00:51:27,540
expecting their plugins to exist in so

00:51:24,510 --> 00:51:30,090
in this case plug in person the

00:51:27,540 --> 00:51:31,710
namespace that's passed in which is all

00:51:30,090 --> 00:51:33,060
the different modules that are enabled

00:51:31,710 --> 00:51:35,670
at the time where all the different

00:51:33,060 --> 00:51:37,410
places where i can find plugins module

00:51:35,670 --> 00:51:38,880
handler which is just a boilerplate that

00:51:37,410 --> 00:51:43,650
describes all the different modules that

00:51:38,880 --> 00:51:46,950
exist and in this case something that is

00:51:43,650 --> 00:51:48,900
special i am using annotations to find

00:51:46,950 --> 00:51:52,500
all my plug-in types so i'm saying hey

00:51:48,900 --> 00:51:54,690
where's my annotation classes internally

00:51:52,500 --> 00:51:57,300
so it's not so opaque as to what's

00:51:54,690 --> 00:52:00,119
happening the default plugin manager is

00:51:57,300 --> 00:52:02,520
doing this it's defining a discovery

00:52:00,119 --> 00:52:04,260
property and it's setting that to the

00:52:02,520 --> 00:52:06,810
annotation discovery and so this is

00:52:04,260 --> 00:52:09,530
where the the sub namespace and the

00:52:06,810 --> 00:52:12,570
annotation path actually goes to work

00:52:09,530 --> 00:52:16,230
they'll find all the markers that have

00:52:12,570 --> 00:52:18,750
at person under this directory using

00:52:16,230 --> 00:52:20,369
that class and then I'm again

00:52:18,750 --> 00:52:22,140
reassigning discovery but this time

00:52:20,369 --> 00:52:24,510
passing it through a derivative

00:52:22,140 --> 00:52:26,250
discovery decorator in this case it's a

00:52:24,510 --> 00:52:30,690
container drew discovery decorator and

00:52:26,250 --> 00:52:34,380
which if I had any person classes that

00:52:30,690 --> 00:52:38,070
defined a derivative class in itself it

00:52:34,380 --> 00:52:42,060
can go ahead and spawn child plugins and

00:52:38,070 --> 00:52:43,470
then I'm defining the the factory which

00:52:42,060 --> 00:52:44,730
is just a default container factory

00:52:43,470 --> 00:52:46,500
don't have to do anything special and

00:52:44,730 --> 00:52:48,359
then also just providing the module

00:52:46,500 --> 00:52:50,880
handler but this is what the default

00:52:48,359 --> 00:52:53,040
plug-in manager does just for visibility

00:52:50,880 --> 00:52:55,500
but in a sense this is all I really had

00:52:53,040 --> 00:52:57,359
to do the only custom parts that I

00:52:55,500 --> 00:52:59,670
wanted for myself is I wanted to provide

00:52:57,359 --> 00:53:02,430
an ability to have a hook pilot person

00:52:59,670 --> 00:53:04,280
info to be invoked so I can go ahead and

00:53:02,430 --> 00:53:05,780
change up the info if

00:53:04,280 --> 00:53:07,160
another module that wanted to do that so

00:53:05,780 --> 00:53:09,140
this is where I would invoke that and

00:53:07,160 --> 00:53:10,760
since I wanted this stuff cashed in the

00:53:09,140 --> 00:53:13,880
back end I'll go ahead and implement

00:53:10,760 --> 00:53:17,930
this set cash back end and provide a

00:53:13,880 --> 00:53:19,520
cache key in there itself so that is a

00:53:17,930 --> 00:53:21,590
plug-in type that is a manager and

00:53:19,520 --> 00:53:23,870
that's essentially on all I need to do

00:53:21,590 --> 00:53:25,460
all the heavy lifting is really provided

00:53:23,870 --> 00:53:27,230
through the default plug-in manager to

00:53:25,460 --> 00:53:28,640
to get all the definitions to

00:53:27,230 --> 00:53:31,100
instantiate the definitions or

00:53:28,640 --> 00:53:32,810
instantiate the plugins rather but I did

00:53:31,100 --> 00:53:34,640
mention something about annotations a

00:53:32,810 --> 00:53:37,520
custom annotation so there's one extra

00:53:34,640 --> 00:53:41,720
thing that we have to do inside of our

00:53:37,520 --> 00:53:44,180
source directory we have annotations and

00:53:41,720 --> 00:53:45,740
then a person dot PHP class and this is

00:53:44,180 --> 00:53:49,040
very very simple well we're extending

00:53:45,740 --> 00:53:50,510
the the plug-in annotation and this is

00:53:49,040 --> 00:53:52,490
where we define what our default

00:53:50,510 --> 00:53:54,800
parameters would be for like I guess the

00:53:52,490 --> 00:53:56,210
hook info what we're all used to and in

00:53:54,800 --> 00:53:58,700
this case I'm just looking for an ID a

00:53:56,210 --> 00:54:02,480
name in an age and providing some

00:53:58,700 --> 00:54:05,240
defaults also in here and with this now

00:54:02,480 --> 00:54:08,060
i can use doctrine to basically find all

00:54:05,240 --> 00:54:11,000
of the classes or all my plugins looking

00:54:08,060 --> 00:54:15,620
for that hat person marker inside of the

00:54:11,000 --> 00:54:17,870
code and one last thing is that since we

00:54:15,620 --> 00:54:19,850
provided a plug-in manager and this is

00:54:17,870 --> 00:54:22,310
itself a global service in which we can

00:54:19,850 --> 00:54:25,160
use globally we basically register it as

00:54:22,310 --> 00:54:27,710
a service so I give it the machine aim

00:54:25,160 --> 00:54:30,740
of plug-in manager pilot up person right

00:54:27,710 --> 00:54:32,540
I say where the class is and i define

00:54:30,740 --> 00:54:35,360
basically what my arguments are but I

00:54:32,540 --> 00:54:36,950
don't necessarily have to redefine what

00:54:35,360 --> 00:54:38,990
my arguments are I can just reference

00:54:36,950 --> 00:54:41,000
the parents which is the default plug-in

00:54:38,990 --> 00:54:42,860
manager and so will use whatever it

00:54:41,000 --> 00:54:44,780
defined as its arguments so I don't have

00:54:42,860 --> 00:54:46,640
to do anything other than just say hey

00:54:44,780 --> 00:54:48,710
here's my parents and whatever arguments

00:54:46,640 --> 00:54:53,150
you pass to it I want you to pass it to

00:54:48,710 --> 00:54:55,270
me so those are all the four components

00:54:53,150 --> 00:54:59,270
that we need to actually generate this

00:54:55,270 --> 00:55:02,180
in this module I'm providing person

00:54:59,270 --> 00:55:05,990
plugins so this is what other modules

00:55:02,180 --> 00:55:07,790
would be doing essentially the the

00:55:05,990 --> 00:55:09,950
annotation portion of this app person

00:55:07,790 --> 00:55:12,530
i'm defining the ID the name and the age

00:55:09,950 --> 00:55:14,450
and I'm not necessarily doing anything

00:55:12,530 --> 00:55:16,550
within the class itself because the

00:55:14,450 --> 00:55:17,200
defaults are fine the defaults that I'm

00:55:16,550 --> 00:55:19,150
putting in

00:55:17,200 --> 00:55:21,970
bass are just completely fine for Bob at

00:55:19,150 --> 00:55:23,349
least four day dave is going to say

00:55:21,970 --> 00:55:25,990
something a little different say hey my

00:55:23,349 --> 00:55:28,390
name is this but again the whole idea of

00:55:25,990 --> 00:55:30,760
having your gear your plugins

00:55:28,390 --> 00:55:32,740
parameterised and having all your info

00:55:30,760 --> 00:55:35,170
baked in together is all right here

00:55:32,740 --> 00:55:37,839
through the annotations so we have those

00:55:35,170 --> 00:55:40,480
two plugins other modules can provide

00:55:37,839 --> 00:55:45,220
their own plugins as well and to

00:55:40,480 --> 00:55:48,579
actually pull this in we'll look at form

00:55:45,220 --> 00:55:50,290
that I have which does the collection of

00:55:48,579 --> 00:55:54,940
these things so we'll get this stuff out

00:55:50,290 --> 00:55:56,140
of the way all right so given that now

00:55:54,940 --> 00:55:58,510
we have the class for the plugin manager

00:55:56,140 --> 00:56:00,700
and all the additional boilerplate stuff

00:55:58,510 --> 00:56:03,790
that was necessary we can now actually

00:56:00,700 --> 00:56:06,490
use the plugin manager using a service

00:56:03,790 --> 00:56:08,200
container so I'm saying hey I want the

00:56:06,490 --> 00:56:10,359
manager and grab that from the drupal

00:56:08,200 --> 00:56:12,790
service container here's the machine

00:56:10,359 --> 00:56:15,849
name that I defined within the the

00:56:12,790 --> 00:56:17,770
services ama file with that it would

00:56:15,849 --> 00:56:20,619
figure out all the different classes

00:56:17,770 --> 00:56:22,390
that it needs to instantiate and do its

00:56:20,619 --> 00:56:24,460
whole dependency injection thing and

00:56:22,390 --> 00:56:26,770
which case it would basically

00:56:24,460 --> 00:56:28,450
instantiate the class for me so now this

00:56:26,770 --> 00:56:31,690
is a manager class the plug-in manager

00:56:28,450 --> 00:56:34,869
that I've created I want to collect all

00:56:31,690 --> 00:56:37,450
the plugins so I say hey manager get all

00:56:34,869 --> 00:56:39,190
the definitions and here I'm just you

00:56:37,450 --> 00:56:42,430
know printing are all of these onto the

00:56:39,190 --> 00:56:46,030
page and I want to pull in an incident

00:56:42,430 --> 00:56:46,930
specifically so um in this case you

00:56:46,030 --> 00:56:49,900
would probably want to do something

00:56:46,930 --> 00:56:51,250
fancy like a UI where user can click

00:56:49,900 --> 00:56:52,780
through things or whatnot and you have a

00:56:51,250 --> 00:56:54,280
list of all these plugins in which you

00:56:52,780 --> 00:56:56,230
could probably attach configurations to

00:56:54,280 --> 00:56:58,569
them or whatever but once your logic

00:56:56,230 --> 00:57:00,790
defines what which plugin you want to

00:56:58,569 --> 00:57:02,380
load in you can go ahead and just create

00:57:00,790 --> 00:57:04,599
the instance and pass in the machine

00:57:02,380 --> 00:57:06,790
name that you want and now that we have

00:57:04,599 --> 00:57:09,099
the instance the actual plug-in type

00:57:06,790 --> 00:57:11,410
with optional configurations within it

00:57:09,099 --> 00:57:12,670
we can do stuff with it in this case I'm

00:57:11,410 --> 00:57:15,599
just calling out the greeting so it's

00:57:12,670 --> 00:57:20,470
going to say hello my name is whatever

00:57:15,599 --> 00:57:23,790
and that it is all so let's not eat to

00:57:20,470 --> 00:57:23,790
the page that's providing that

00:57:39,290 --> 00:57:47,510
alright so in this second I was able to

00:57:45,220 --> 00:57:50,780
discover where all my plugins are

00:57:47,510 --> 00:57:53,540
through annotations I was also given the

00:57:50,780 --> 00:57:55,040
opportunity to have derivatives child

00:57:53,540 --> 00:57:56,540
plugins for everything that's

00:57:55,040 --> 00:57:58,970
instantiated or everything that's

00:57:56,540 --> 00:58:00,110
defined as a plug-in of person and in

00:57:58,970 --> 00:58:01,520
the end I'm really just collecting it

00:58:00,110 --> 00:58:03,650
and cash in it and now I'm just

00:58:01,520 --> 00:58:06,350
explaining it right here and which I've

00:58:03,650 --> 00:58:07,820
only found two plugins Bob and Dave and

00:58:06,350 --> 00:58:13,040
you have all the plugin definitions in

00:58:07,820 --> 00:58:15,440
here secondly if you remember I pulled

00:58:13,040 --> 00:58:17,870
in an instance a specific instance Bob

00:58:15,440 --> 00:58:20,330
and under saying get the greeting from

00:58:17,870 --> 00:58:22,550
Bob so come back over here and I'm

00:58:20,330 --> 00:58:25,040
printing that out itself hello my name

00:58:22,550 --> 00:58:26,720
is Bob and I'm 26 years old and i pulled

00:58:25,040 --> 00:58:30,260
into that data from the annotations that

00:58:26,720 --> 00:58:33,920
I defined so again this is very very

00:58:30,260 --> 00:58:35,600
simple and boil down to its simplicity

00:58:33,920 --> 00:58:37,100
which now you can define like what

00:58:35,600 --> 00:58:39,320
you're you i would look like or what

00:58:37,100 --> 00:58:40,940
your business logic or what the purpose

00:58:39,320 --> 00:58:42,980
of your system is to pull in this data

00:58:40,940 --> 00:58:45,110
but now you're pulling in these classes

00:58:42,980 --> 00:58:46,970
figuring out a way which to pull in like

00:58:45,110 --> 00:58:48,350
which specific plug-in ID and then doing

00:58:46,970 --> 00:58:50,720
stuff with it so it's up to you to

00:58:48,350 --> 00:58:52,940
decide what it is you're going to do so

00:58:50,720 --> 00:58:55,040
very simple stuff three lines and i was

00:58:52,940 --> 00:59:01,030
able to have a plug-in system or at

00:58:55,040 --> 00:59:06,070
least actually working with it so yeah

00:59:01,030 --> 00:59:06,070
way so my final thoughts

00:59:11,480 --> 00:59:16,130
there's a lot of them implication that

00:59:13,850 --> 00:59:19,010
comes in with plug-in types we're just

00:59:16,130 --> 00:59:22,100
building plugins in general and a lot of

00:59:19,010 --> 00:59:24,050
it is at least through my eyes a way of

00:59:22,100 --> 00:59:25,850
segmenting out operations

00:59:24,050 --> 00:59:28,580
functionalities and to their own little

00:59:25,850 --> 00:59:31,550
silos in which they belong it's really

00:59:28,580 --> 00:59:34,850
easy to have any different opportunity

00:59:31,550 --> 00:59:37,210
to to drop in code and do stuff with for

00:59:34,850 --> 00:59:39,800
instance hook you know or a hook page

00:59:37,210 --> 00:59:41,780
preprocess page or hug page alter or

00:59:39,800 --> 00:59:43,100
whatnot and it gets pretty crazy in

00:59:41,780 --> 00:59:45,200
which all the opportunities you have to

00:59:43,100 --> 00:59:47,540
do some really wild stuff and it becomes

00:59:45,200 --> 00:59:50,000
unmanageable and becomes very far away

00:59:47,540 --> 00:59:53,119
from I guess the metaphor of life and

00:59:50,000 --> 00:59:55,690
how we think of things when you think of

00:59:53,119 --> 00:59:58,130
how certain operations in life can be

00:59:55,690 --> 01:00:02,180
separated out into smaller segments in

00:59:58,130 --> 01:00:03,680
Sedona Silas you can swap out actual

01:00:02,180 --> 01:00:05,420
mechanisms to do things and your code

01:00:03,680 --> 01:00:08,570
should actually follow suit as much as

01:00:05,420 --> 01:00:10,130
possible to real life metaphors I think

01:00:08,570 --> 01:00:12,109
that would keep you more aligned with

01:00:10,130 --> 01:00:14,119
the reality of writing code and doing

01:00:12,109 --> 01:00:16,760
things that are more I guess friendly

01:00:14,119 --> 01:00:19,760
for the product owners or just the way a

01:00:16,760 --> 01:00:22,790
system works and again plugins just kind

01:00:19,760 --> 01:00:24,859
of follow a certain best practice that

01:00:22,790 --> 01:00:26,119
encourage you to do better code and not

01:00:24,859 --> 01:00:28,850
necessarily just like mash things

01:00:26,119 --> 01:00:30,770
together I envision a lot of the

01:00:28,850 --> 01:00:33,290
development moving forward to be not

01:00:30,770 --> 01:00:34,760
just using like a big blob of custom

01:00:33,290 --> 01:00:37,040
code in your site but really just

01:00:34,760 --> 01:00:38,930
abstracting as much as possible very

01:00:37,040 --> 01:00:42,380
specific operations into plug-in types

01:00:38,930 --> 01:00:44,390
in which then you can nurture in which

01:00:42,380 --> 01:00:46,010
you can then extend upon because you'll

01:00:44,390 --> 01:00:47,690
have these different instances the same

01:00:46,010 --> 01:00:49,490
code used over and over again and now

01:00:47,690 --> 01:00:51,050
you have more eyes and more use cases on

01:00:49,490 --> 01:00:52,790
it in which you can discover bugs and

01:00:51,050 --> 01:00:55,130
really put more care into the code that

01:00:52,790 --> 01:00:58,609
you put in so I feel this is a good a

01:00:55,130 --> 01:01:00,320
kind of segue into a happy way of coding

01:00:58,609 --> 01:01:02,650
or at least a better work-life balance

01:01:00,320 --> 01:01:06,470
and sense what do you think about it so

01:01:02,650 --> 01:01:08,359
anyway those me please evaluate this

01:01:06,470 --> 01:01:11,490
session there's a link at the very

01:01:08,359 --> 01:01:12,900
bottom for you to do so and if

01:01:11,490 --> 01:01:15,860
i'ma go ahead and taking questions now

01:01:12,900 --> 01:01:15,860
thank you

01:01:31,960 --> 01:01:38,890
I had this this might be a little room

01:01:35,890 --> 01:01:41,740
entery given the depth that you just

01:01:38,890 --> 01:01:44,770
covered in this subject I'm honestly not

01:01:41,740 --> 01:01:48,700
I'm still not sure I get quite what an

01:01:44,770 --> 01:01:54,460
interface is or what it's meant to

01:01:48,700 --> 01:01:56,859
accomplish so in Drupal 7 um it's all

01:01:54,460 --> 01:02:00,369
functional which means that there's no

01:01:56,859 --> 01:02:02,710
contract in which a certain function has

01:02:00,369 --> 01:02:04,150
to do something there's no guarantee as

01:02:02,710 --> 01:02:06,160
what the input or what the output is

01:02:04,150 --> 01:02:08,589
other than the arguments that are passed

01:02:06,160 --> 01:02:11,490
in but with an interface of PHP class

01:02:08,589 --> 01:02:14,520
interface you define what are required

01:02:11,490 --> 01:02:17,530
methods that a class needs to implement

01:02:14,520 --> 01:02:19,300
so anything that is implementing an

01:02:17,530 --> 01:02:21,910
interface if you don't have those

01:02:19,300 --> 01:02:23,680
methods within it a PHP will fail you

01:02:21,910 --> 01:02:25,180
know say no there's an error we cannot

01:02:23,680 --> 01:02:26,650
process because the method that is

01:02:25,180 --> 01:02:28,990
supposed to be implementing this

01:02:26,650 --> 01:02:31,000
interface is not doing its contractual

01:02:28,990 --> 01:02:32,650
agreements so this would include the

01:02:31,000 --> 01:02:35,050
parameters that you pass in the type of

01:02:32,650 --> 01:02:38,440
parameters you pass in and then also

01:02:35,050 --> 01:02:41,609
just the existence of the methods so

01:02:38,440 --> 01:02:44,560
that is how a method or a class can

01:02:41,609 --> 01:02:45,820
implement an interface by providing the

01:02:44,560 --> 01:02:47,589
methods and also ensuring that the

01:02:45,820 --> 01:02:49,380
arguments that it's accepting are the

01:02:47,589 --> 01:02:53,680
same that the interface had defined

01:02:49,380 --> 01:02:56,200
thank you thanks for this wonderful talk

01:02:53,680 --> 01:02:57,940
was really great to get a in-depth

01:02:56,200 --> 01:02:59,859
discussion of plugins and see how they

01:02:57,940 --> 01:03:01,420
operate thank you so much for that I

01:02:59,859 --> 01:03:05,080
feel like I'm still trying to wrap my

01:03:01,420 --> 01:03:08,770
head around like what the architectural

01:03:05,080 --> 01:03:11,890
reason for using annotations is it seems

01:03:08,770 --> 01:03:14,369
like we're taking comments and now using

01:03:11,890 --> 01:03:18,070
them almost like properties on on

01:03:14,369 --> 01:03:19,450
objects or like static variables I'm

01:03:18,070 --> 01:03:21,970
just trying to understand why we would

01:03:19,450 --> 01:03:23,619
start using comments in what seemed to

01:03:21,970 --> 01:03:25,359
be almost almost like we're doing the

01:03:23,619 --> 01:03:26,349
programming in the comments yes so if

01:03:25,359 --> 01:03:29,950
you could elaborate on that I appreciate

01:03:26,349 --> 01:03:31,330
so 11 it's not it's not code inside of

01:03:29,950 --> 01:03:33,880
the annotations it's kind of like saying

01:03:31,330 --> 01:03:35,560
oh we have llamo files now we have

01:03:33,880 --> 01:03:36,730
code inside a llamo files which is not

01:03:35,560 --> 01:03:39,010
necessarily the case it's all

01:03:36,730 --> 01:03:41,440
declarative basically provide a value

01:03:39,010 --> 01:03:44,620
and a key and that's all annotations are

01:03:41,440 --> 01:03:47,590
doing why use those because it's baked

01:03:44,620 --> 01:03:49,360
into the class it's a convenience but

01:03:47,590 --> 01:03:50,920
maybe it does make it harder to debug

01:03:49,360 --> 01:03:52,390
because where these values coming from

01:03:50,920 --> 01:03:54,400
and I have to dig deep into like what

01:03:52,390 --> 01:03:55,840
doctrine is doing to grab that data but

01:03:54,400 --> 01:03:57,790
you don't have to use annotations is

01:03:55,840 --> 01:03:59,440
completely optional you could continue

01:03:57,790 --> 01:04:00,760
using info hooks hopefully they're not

01:03:59,440 --> 01:04:02,290
deprecated at this point I haven't

01:04:00,760 --> 01:04:04,450
checked but there are different

01:04:02,290 --> 01:04:05,710
mechanisms of discovery annotations is

01:04:04,450 --> 01:04:09,370
just one of them and one of the more

01:04:05,710 --> 01:04:10,630
popular ones the the slide link or the

01:04:09,370 --> 01:04:13,570
link that's in that slide in particular

01:04:10,630 --> 01:04:16,870
has a another slide deck that describes

01:04:13,570 --> 01:04:18,880
why annotations are useful and kind of

01:04:16,870 --> 01:04:20,470
defense both sides of the argument so

01:04:18,880 --> 01:04:25,210
looking into that would probably lighten

01:04:20,470 --> 01:04:28,900
things up you thank you hello Hillier

01:04:25,210 --> 01:04:30,550
thank you for giving us talk I watched a

01:04:28,900 --> 01:04:33,010
YouTube video you give it a talk in a

01:04:30,550 --> 01:04:35,440
different camp and this is a much better

01:04:33,010 --> 01:04:39,610
version of the presentation but that's

01:04:35,440 --> 01:04:43,750
great oh no I'm we're talking nation I'm

01:04:39,610 --> 01:04:46,090
conflicted though I i could see plugins

01:04:43,750 --> 01:04:48,820
as a solution being a great solution for

01:04:46,090 --> 01:04:51,310
plugging into an existing bit of

01:04:48,820 --> 01:04:54,790
architecture some things like file from

01:04:51,310 --> 01:04:58,900
field for matters and blocks and things

01:04:54,790 --> 01:05:01,870
like that what I'm not getting is the

01:04:58,900 --> 01:05:06,070
cross section between using a plug-in

01:05:01,870 --> 01:05:08,620
for the solution and using an entity for

01:05:06,070 --> 01:05:11,920
that same kind solving that same kind of

01:05:08,620 --> 01:05:13,690
problem can you explain like where it

01:05:11,920 --> 01:05:16,180
conflicts with entities and how to

01:05:13,690 --> 01:05:18,550
resolve that problem there's a lot of

01:05:16,180 --> 01:05:23,290
overlap actually with the config

01:05:18,550 --> 01:05:25,420
entities and entities in a sense are

01:05:23,290 --> 01:05:27,250
basically a collection of configuration

01:05:25,420 --> 01:05:29,710
and it would use plugins to do things

01:05:27,250 --> 01:05:31,870
with it right so think of plugins as

01:05:29,710 --> 01:05:34,210
being the operational part of things to

01:05:31,870 --> 01:05:35,890
do singular actions to process data to

01:05:34,210 --> 01:05:37,840
do stuff but doesn't actually hold data

01:05:35,890 --> 01:05:40,060
if anything these plugins could have

01:05:37,840 --> 01:05:42,310
configuration that modify how it does

01:05:40,060 --> 01:05:45,190
things but doesn't necessarily store a

01:05:42,310 --> 01:05:47,290
node it doesn't persist any kind of

01:05:45,190 --> 01:05:49,720
tutti i need to think of entities is

01:05:47,290 --> 01:05:51,430
being basically like if it has a table

01:05:49,720 --> 01:05:53,410
record right if there's a row inside the

01:05:51,430 --> 01:05:54,880
database then it would be an entity but

01:05:53,410 --> 01:05:57,490
plugins don't necessarily operate that

01:05:54,880 --> 01:06:00,339
way so for me that is the distinction in

01:05:57,490 --> 01:06:02,020
between where plugins work processing

01:06:00,339 --> 01:06:04,000
data and entities would be basically

01:06:02,020 --> 01:06:06,250
persisting data and having like you know

01:06:04,000 --> 01:06:07,359
load functions and the whole crud stack

01:06:06,250 --> 01:06:11,770
that's baked into that and everything

01:06:07,359 --> 01:06:13,690
else that goes along with it yeah that

01:06:11,770 --> 01:06:17,470
helped a bit that makes blocks more

01:06:13,690 --> 01:06:19,300
confusing yes I can kind of help clarify

01:06:17,470 --> 01:06:23,950
that if that helps a little bit on with

01:06:19,300 --> 01:06:27,579
an example okay um so think about views

01:06:23,950 --> 01:06:29,319
in the views you I you assemble you take

01:06:27,579 --> 01:06:31,720
a bunch of different filters in a bunch

01:06:29,319 --> 01:06:33,069
of different fields and you have several

01:06:31,720 --> 01:06:36,040
the spaceman you put them all together

01:06:33,069 --> 01:06:38,950
to make one thing right so each of those

01:06:36,040 --> 01:06:41,890
individual little things each kind of

01:06:38,950 --> 01:06:44,589
filter that you add is defined by a

01:06:41,890 --> 01:06:46,930
plugin the plug-in contains the metadata

01:06:44,589 --> 01:06:50,109
about it a definition of what the thing

01:06:46,930 --> 01:06:52,390
is and then an API for how to how to do

01:06:50,109 --> 01:06:54,369
the thing but what it doesn't contain is

01:06:52,390 --> 01:06:56,770
what you just configured in your view

01:06:54,369 --> 01:07:00,069
and so what happens when you configure a

01:06:56,770 --> 01:07:01,780
view is that the specific instances the

01:07:00,069 --> 01:07:03,880
specific configuration data from many

01:07:01,780 --> 01:07:06,579
different plugins is saved in one

01:07:03,880 --> 01:07:08,770
configuration entity so the entity is

01:07:06,579 --> 01:07:10,530
essentially just providing the storage

01:07:08,770 --> 01:07:14,140
for the thing that you just configured

01:07:10,530 --> 01:07:15,970
similarly with blocks um if I have like

01:07:14,140 --> 01:07:17,280
a you know his snowman block I thought

01:07:15,970 --> 01:07:21,099
there was a very cute example by the way

01:07:17,280 --> 01:07:22,720
if I have a snowman block that that

01:07:21,099 --> 01:07:26,020
doesn't actually create a block on my

01:07:22,720 --> 01:07:28,390
site what that does is it says okay

01:07:26,020 --> 01:07:31,089
block API I have this block available

01:07:28,390 --> 01:07:33,520
use it how you see fit as the block API

01:07:31,089 --> 01:07:35,680
and then what where the entity part of

01:07:33,520 --> 01:07:37,450
that comes in is when you are

01:07:35,680 --> 01:07:40,359
configuring an a site and you place an

01:07:37,450 --> 01:07:43,540
instance of that block somewhere so

01:07:40,359 --> 01:07:45,310
you're not actually the the instance of

01:07:43,540 --> 01:07:46,900
the block is you can have many of them

01:07:45,310 --> 01:07:48,099
right interpolate that's one of the new

01:07:46,900 --> 01:07:50,380
pieces of functionality that's available

01:07:48,099 --> 01:07:51,819
so you can take your snowman block and

01:07:50,380 --> 01:07:52,930
you can put it in the header and you can

01:07:51,819 --> 01:07:54,220
put in the footer and you can put five

01:07:52,930 --> 01:07:56,560
them in the sidebar if you want to and

01:07:54,220 --> 01:07:59,079
configure specific things with each of

01:07:56,560 --> 01:08:01,329
those then those block instances

01:07:59,079 --> 01:08:03,039
be stored as configuration entities and

01:08:01,329 --> 01:08:04,599
the configuration system to be deployed

01:08:03,039 --> 01:08:06,069
to other sites or whatever so that's

01:08:04,599 --> 01:08:08,380
where the sting shin is entities are

01:08:06,069 --> 01:08:10,630
about data whereas the plugin is about

01:08:08,380 --> 01:08:12,759
defining an API for something in the way

01:08:10,630 --> 01:08:14,589
the way in which you can create things

01:08:12,759 --> 01:08:15,700
that is not necessarily coupled but

01:08:14,589 --> 01:08:21,549
that's how that you interact frequently

01:08:15,700 --> 01:08:25,119
in in kora so would it be fair to say

01:08:21,549 --> 01:08:27,489
the only responsibility a plugin has in

01:08:25,119 --> 01:08:31,690
regards to entities is creating their

01:08:27,489 --> 01:08:34,389
instances and then whatever however that

01:08:31,690 --> 01:08:37,150
entity stores its configuration if it's

01:08:34,389 --> 01:08:40,089
a Content entity or or a configuration

01:08:37,150 --> 01:08:41,529
entity it does what it does we may need

01:08:40,089 --> 01:08:43,900
to take this conversation up the sides

01:08:41,529 --> 01:08:45,009
week okay really yeah that's why

01:08:43,900 --> 01:08:48,909
specifically I didn't want to talk about

01:08:45,009 --> 01:08:51,969
configuration entities because hi-yah

01:08:48,909 --> 01:08:55,679
thank you for your talk I had a question

01:08:51,969 --> 01:08:59,909
about when you are instantiating a

01:08:55,679 --> 01:09:03,460
plug-in type the annotation is there a

01:08:59,909 --> 01:09:05,920
like this something tell you if your

01:09:03,460 --> 01:09:09,609
syntax is incorrect or does it just fail

01:09:05,920 --> 01:09:11,440
silently specifically were like when

01:09:09,609 --> 01:09:13,659
your annotation is incorrect like with

01:09:11,440 --> 01:09:15,279
the curly braces or you know within like

01:09:13,659 --> 01:09:17,560
the comments about that yes instead of

01:09:15,279 --> 01:09:19,389
like a look back info you have like your

01:09:17,560 --> 01:09:21,400
annotation yeah because the doctrine

01:09:19,389 --> 01:09:22,989
does its own processing its parsing the

01:09:21,400 --> 01:09:24,429
string and it does it something so in

01:09:22,989 --> 01:09:26,230
there has its own validators and you'll

01:09:24,429 --> 01:09:27,429
get error saying hey this is not

01:09:26,230 --> 01:09:29,049
formatted correctly you're missing a

01:09:27,429 --> 01:09:30,969
comma or maybe you have this other thing

01:09:29,049 --> 01:09:32,739
that's not closed out so it will do that

01:09:30,969 --> 01:09:37,830
for you through all the errors and one

01:09:32,739 --> 01:09:37,830

YouTube URL: https://www.youtube.com/watch?v=rQy4GXcypw8


