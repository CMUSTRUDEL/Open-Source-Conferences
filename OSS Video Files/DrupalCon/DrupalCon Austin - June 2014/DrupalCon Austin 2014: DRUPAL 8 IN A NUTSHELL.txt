Title: DrupalCon Austin 2014: DRUPAL 8 IN A NUTSHELL
Publication date: 2014-06-05
Playlist: DrupalCon Austin - June 2014
Description: 
	Speakers: kim.pepperboztek
This is a session for developers, who want to get their hands dirty in Drupal 8 site development but don't know where to start.

Drupal 8 is a radical departure from any previous releases of Drupal. Despite what you may have heard, there is no need for alarm!

In this session, we will look at a range of the most common Drupal developer tasks: how you did them in Drupal 7, and how you will now do them in Drupal 8 - with code examples!

Fortunately, if you learn the core design patterns, you can "learn once and apply everywhere."â„¢

About the presenters:

Kim Pepper (kim.pepper) is a a top-50 contributor to Drupal 8 core, Technical Director and co-founder of PreviousNext, and enjoys long walks by the beach.
Boris Gordon (boztek) is a long-time Drupal developer, and previous DrupalCon presenter on Drupal 8, and enjoys rare coffee table books on industrial design.
Captions: 
	00:00:00,000 --> 00:00:07,919
we might get started thank you all for

00:00:03,540 --> 00:00:10,590
coming I'll introduce myself first I'm

00:00:07,919 --> 00:00:13,110
Kim papa co-founder and technical

00:00:10,590 --> 00:00:15,320
director of previous next we're a Drupal

00:00:13,110 --> 00:00:17,970
shop that's based in Sydney Australia

00:00:15,320 --> 00:00:21,260
i'm boris Gordon I work for previousnext

00:00:17,970 --> 00:00:24,269
I'm a senior developer there in Sydney

00:00:21,260 --> 00:00:27,560
so just to make sure everyone's in the

00:00:24,269 --> 00:00:30,240
right room this is a session for

00:00:27,560 --> 00:00:33,899
developers we're not going to be looking

00:00:30,240 --> 00:00:36,660
at any triple a site building or any of

00:00:33,899 --> 00:00:37,829
the user interface changes you don't

00:00:36,660 --> 00:00:43,670
actually even show these screenshots

00:00:37,829 --> 00:00:46,079
from the user interface of Drupal 8 and

00:00:43,670 --> 00:00:47,879
while we're going to try and give you an

00:00:46,079 --> 00:00:50,219
overview of all of the changes that are

00:00:47,879 --> 00:00:51,809
in Drupal 8 we might be able to cover

00:00:50,219 --> 00:00:56,640
cover everything because there is quite

00:00:51,809 --> 00:01:00,239
a lot of things going on should add that

00:00:56,640 --> 00:01:02,670
there was an emerging pattern that

00:01:00,239 --> 00:01:05,820
emerged putting this session together we

00:01:02,670 --> 00:01:07,920
kind of found that there was a theme I

00:01:05,820 --> 00:01:12,210
guess which is basically if you learn

00:01:07,920 --> 00:01:14,280
one of these if you learn one of the

00:01:12,210 --> 00:01:16,320
concepts in Drupal 8 you can really

00:01:14,280 --> 00:01:20,400
apply it everywhere and even including

00:01:16,320 --> 00:01:26,490
things outside of Drupal soon let's get

00:01:20,400 --> 00:01:28,530
started all right so there are some

00:01:26,490 --> 00:01:31,829
major architectural changes going on in

00:01:28,530 --> 00:01:35,189
Drupal 8 it's a big move to object

00:01:31,829 --> 00:01:39,650
oriented PHP the minimum version

00:01:35,189 --> 00:01:44,130
requirement for Drupal latest PHP 5.4

00:01:39,650 --> 00:01:46,020
with that there's PSR for was brought in

00:01:44,130 --> 00:01:48,869
we've brought in a whole bunch of

00:01:46,020 --> 00:01:53,009
external library so we're using symphony

00:01:48,869 --> 00:01:56,219
and others and there's major changes to

00:01:53,009 --> 00:01:59,040
the routing the entity api's we've got

00:01:56,219 --> 00:02:00,930
configuration in there we've got plugins

00:01:59,040 --> 00:02:03,590
and even changes to the front end with

00:02:00,930 --> 00:02:03,590
things like twin

00:02:05,420 --> 00:02:10,860
but you don't need to be afraid so what

00:02:07,860 --> 00:02:13,349
we're going to do is basically it try to

00:02:10,860 --> 00:02:16,860
explain some of these changes from the

00:02:13,349 --> 00:02:18,780
perspective of Drupal 7 site development

00:02:16,860 --> 00:02:21,450
so if your drupal site developer

00:02:18,780 --> 00:02:22,950
wondering what the change is again how

00:02:21,450 --> 00:02:28,290
they can impact you then this is the

00:02:22,950 --> 00:02:29,670
session for you so just a quick question

00:02:28,290 --> 00:02:34,019
out of the audience who is actually

00:02:29,670 --> 00:02:37,739
installed Drupal 8 already Wow ok so

00:02:34,019 --> 00:02:41,130
about half of you and if you looked at

00:02:37,739 --> 00:02:45,049
any of the kind of coding or module

00:02:41,130 --> 00:02:48,299
changes in that yeah a few of you okay

00:02:45,049 --> 00:02:50,040
as anyone in here actually come from

00:02:48,299 --> 00:02:56,280
working with another framework like

00:02:50,040 --> 00:03:01,769
symphony or zend framework right all

00:02:56,280 --> 00:03:05,880
right so so basically the message is

00:03:01,769 --> 00:03:07,019
that if you drupal 8 is basically going

00:03:05,880 --> 00:03:09,329
to teach you to be a better developer

00:03:07,019 --> 00:03:12,780
and participate in the wider PHP

00:03:09,329 --> 00:03:15,120
community we're essentially shedding a

00:03:12,780 --> 00:03:17,930
lot of the dribble isms that we have in

00:03:15,120 --> 00:03:22,139
Drupal 7 and we're embracing more of a

00:03:17,930 --> 00:03:24,269
standard way of working with PHP and

00:03:22,139 --> 00:03:26,370
improve interoperability with other

00:03:24,269 --> 00:03:29,280
projects as well so that's some in your

00:03:26,370 --> 00:03:31,380
see later I don't think juries mentioned

00:03:29,280 --> 00:03:34,880
any ski know where we're almost standard

00:03:31,380 --> 00:03:37,380
of standardizing on things like symphony

00:03:34,880 --> 00:03:38,310
and essentially learning drupal 8 is

00:03:37,380 --> 00:03:45,079
going to make you a better developer

00:03:38,310 --> 00:03:48,660
generally so first of all we've embraced

00:03:45,079 --> 00:03:50,370
composer so we're local and the the idea

00:03:48,660 --> 00:03:52,440
that we're pulling in external libraries

00:03:50,370 --> 00:03:55,560
so there's a bunch of them listed up

00:03:52,440 --> 00:03:57,569
here that's just a sample of them but

00:03:55,560 --> 00:03:58,859
the real change is this this change in

00:03:57,569 --> 00:04:00,540
the whole peer-to-peer community there's

00:03:58,859 --> 00:04:04,139
a PHP Renaissance I know if you've heard

00:04:00,540 --> 00:04:06,000
that term thrown around before but it's

00:04:04,139 --> 00:04:08,760
essentially the first time that drupal's

00:04:06,000 --> 00:04:12,780
actually truly leveraged using external

00:04:08,760 --> 00:04:15,470
and open source projects so in i think

00:04:12,780 --> 00:04:16,660
in drupal 7 there was only jquery

00:04:15,470 --> 00:04:19,650
shipping

00:04:16,660 --> 00:04:23,890
and one other library that was kind of

00:04:19,650 --> 00:04:25,120
modified to be used in drupal simple

00:04:23,890 --> 00:04:28,390
test was brought in but we pretty much

00:04:25,120 --> 00:04:31,690
 it and use it for own purposes

00:04:28,390 --> 00:04:33,760
now we're using at least 11 or 12

00:04:31,690 --> 00:04:36,970
external projects multiple libraries

00:04:33,760 --> 00:04:40,830
from those those projects from symphony

00:04:36,970 --> 00:04:43,270
components alone 13 or 14 components and

00:04:40,830 --> 00:04:47,680
similarly using a lot of JavaScript

00:04:43,270 --> 00:04:50,880
libraries now as well we use it with

00:04:47,680 --> 00:04:54,400
embraced modern PHP so essentially with

00:04:50,880 --> 00:04:58,300
me using my original slice at psi 0

00:04:54,400 --> 00:05:00,970
actually PSR for now which was only in

00:04:58,300 --> 00:05:05,610
last week which is a nice space and

00:05:00,970 --> 00:05:08,700
convention for autoloading PHP classes

00:05:05,610 --> 00:05:11,230
and this is a part of that

00:05:08,700 --> 00:05:13,570
interoperability thing so one of the

00:05:11,230 --> 00:05:15,370
motivations behind that is we can easily

00:05:13,570 --> 00:05:16,900
pull in these external libraries and

00:05:15,370 --> 00:05:19,650
just use them so that's part of

00:05:16,900 --> 00:05:23,170
motivation behind behind that standard

00:05:19,650 --> 00:05:25,000
so for the those of you haven't seen

00:05:23,170 --> 00:05:27,130
object-oriented code before it's pretty

00:05:25,000 --> 00:05:30,130
basic essentially what we've got is we

00:05:27,130 --> 00:05:33,160
need to we need to follow the PSL for

00:05:30,130 --> 00:05:34,840
standard so just went up here so

00:05:33,160 --> 00:05:38,770
essentially we're putting our file under

00:05:34,840 --> 00:05:42,700
a source directory and we named class a

00:05:38,770 --> 00:05:44,740
file the same as our class name we give

00:05:42,700 --> 00:05:47,470
it a name space which is basically just

00:05:44,740 --> 00:05:52,240
making sure we're isolating it from our

00:05:47,470 --> 00:05:55,090
other comb and we can actually tell PHP

00:05:52,240 --> 00:05:57,480
that we're using other classes we just

00:05:55,090 --> 00:06:00,160
define a class with this class keyword

00:05:57,480 --> 00:06:02,200
and we can extend or implement

00:06:00,160 --> 00:06:04,770
interfaces and essentially just our code

00:06:02,200 --> 00:06:07,690
is wrapped inside inside this class so

00:06:04,770 --> 00:06:10,360
so in Drupal 7 modules you might

00:06:07,690 --> 00:06:13,090
remember we have to essentially prepend

00:06:10,360 --> 00:06:15,880
the module name to each of our functions

00:06:13,090 --> 00:06:18,280
and this is sort of achieving a similar

00:06:15,880 --> 00:06:20,410
similar goal keeping it encapsulated

00:06:18,280 --> 00:06:22,240
without we can use whatever name we want

00:06:20,410 --> 00:06:25,380
and it doesn't not going to collide with

00:06:22,240 --> 00:06:28,500
with other modules

00:06:25,380 --> 00:06:29,730
okay so dependency injection might have

00:06:28,500 --> 00:06:31,530
been something that's new to you I'm

00:06:29,730 --> 00:06:33,960
just going to give you a brief overview

00:06:31,530 --> 00:06:36,720
of what that is it's something that's a

00:06:33,960 --> 00:06:37,820
very common pattern in Drupal it is it's

00:06:36,720 --> 00:06:41,400
an object oriented design pattern

00:06:37,820 --> 00:06:43,980
essentially and essentially what it does

00:06:41,400 --> 00:06:46,350
is achieves inversion of control swap

00:06:43,980 --> 00:06:50,220
ability of the dependencies that we have

00:06:46,350 --> 00:06:52,470
inside our classes it's basically a

00:06:50,220 --> 00:06:57,450
fancy way of saying don't call out to

00:06:52,470 --> 00:06:59,520
some code some rigid reusable code

00:06:57,450 --> 00:07:03,630
library but have isolated call

00:06:59,520 --> 00:07:06,900
components calling so like calling

00:07:03,630 --> 00:07:10,860
framework code internally this basically

00:07:06,900 --> 00:07:13,350
provides better modularity and the way

00:07:10,860 --> 00:07:15,150
it's implemented in Drupal 8 is it's

00:07:13,350 --> 00:07:18,540
pretty pretty easy to understand it's

00:07:15,150 --> 00:07:20,490
just explicitly declaring the code that

00:07:18,540 --> 00:07:22,650
you're going to call out to in a

00:07:20,490 --> 00:07:24,660
constructor so almost saying it's an

00:07:22,650 --> 00:07:26,550
example of that yeah so this is

00:07:24,660 --> 00:07:29,280
essentially what dependency injection is

00:07:26,550 --> 00:07:31,200
all we're doing is we've got a class and

00:07:29,280 --> 00:07:33,210
you can see in the constructor we're

00:07:31,200 --> 00:07:35,490
just passing in the database connection

00:07:33,210 --> 00:07:37,350
so when that class gets created it

00:07:35,490 --> 00:07:41,400
passes that that database connection in

00:07:37,350 --> 00:07:43,860
we save it to a protected property of

00:07:41,400 --> 00:07:46,110
the class now we're using this key word

00:07:43,860 --> 00:07:47,910
to signify the sister class and then we

00:07:46,110 --> 00:07:50,250
were actually caught doing the database

00:07:47,910 --> 00:07:52,440
query we we use that data base

00:07:50,250 --> 00:07:54,960
connection from the class itself so the

00:07:52,440 --> 00:07:57,150
property on the class so right rather

00:07:54,960 --> 00:08:00,360
than when we're going to use a database

00:07:57,150 --> 00:08:02,640
code rather than calling up to some some

00:08:00,360 --> 00:08:05,310
global external thing we always go

00:08:02,640 --> 00:08:07,860
through the dependency that's been

00:08:05,310 --> 00:08:10,410
injected to us and so and that's that's

00:08:07,860 --> 00:08:12,990
really all there is to it um and this

00:08:10,410 --> 00:08:15,570
gives us the ability to use things like

00:08:12,990 --> 00:08:17,070
test doubles are to test our test our

00:08:15,570 --> 00:08:18,600
class and isolation because we can

00:08:17,070 --> 00:08:20,760
provide different versions of that

00:08:18,600 --> 00:08:23,160
dependency essentially what we're doing

00:08:20,760 --> 00:08:26,750
we're we're loosely coupling dart code

00:08:23,160 --> 00:08:28,980
so it means that it's easier to swap out

00:08:26,750 --> 00:08:30,300
different implementations of you

00:08:28,980 --> 00:08:33,839
especially if we're using things like

00:08:30,300 --> 00:08:36,580
interfaces ok so two dependency

00:08:33,839 --> 00:08:38,620
injection container

00:08:36,580 --> 00:08:41,080
is essentially something that just wires

00:08:38,620 --> 00:08:45,070
all these of these classes together for

00:08:41,080 --> 00:08:47,770
you and instantiates them so we're using

00:08:45,070 --> 00:08:50,440
the symphony to dependency injection

00:08:47,770 --> 00:08:53,560
container in triple-a and what that

00:08:50,440 --> 00:08:55,450
means is that essentially that takes

00:08:53,560 --> 00:08:57,340
care of creating all of our objects for

00:08:55,450 --> 00:09:00,850
us so we're not having to call you know

00:08:57,340 --> 00:09:02,410
you my class that you just assume that

00:09:00,850 --> 00:09:05,800
everything is there and all plugged in

00:09:02,410 --> 00:09:07,680
for you yeah so this is to sort of

00:09:05,800 --> 00:09:10,120
address like some of the overhead of

00:09:07,680 --> 00:09:13,570
decoupling these components into little

00:09:10,120 --> 00:09:15,100
pieces it makes the the act of creating

00:09:13,570 --> 00:09:17,680
them in injecting the dependencies a

00:09:15,100 --> 00:09:19,660
little bit laborious so we've got a kind

00:09:17,680 --> 00:09:21,220
of way to deal with that we can wire it

00:09:19,660 --> 00:09:23,110
together with some configuration and

00:09:21,220 --> 00:09:26,050
we'll or see an example of that I think

00:09:23,110 --> 00:09:27,460
yeah so in the steps to take are

00:09:26,050 --> 00:09:30,520
basically first of all you just write

00:09:27,460 --> 00:09:33,040
your class using the stand at the PSR

00:09:30,520 --> 00:09:36,460
for standard and then you just need to

00:09:33,040 --> 00:09:38,410
create a services yeah mph I'll in your

00:09:36,460 --> 00:09:42,310
module group so you name it with the

00:09:38,410 --> 00:09:44,230
name of your module and then declare the

00:09:42,310 --> 00:09:48,280
service in that so this would be an

00:09:44,230 --> 00:09:50,770
example of the services container

00:09:48,280 --> 00:09:54,670
essentially we're just specifying a

00:09:50,770 --> 00:09:57,700
unique name for the service so it's it's

00:09:54,670 --> 00:10:00,850
it's uniquely identified we specify the

00:09:57,700 --> 00:10:04,030
class and then any arguments that are

00:10:00,850 --> 00:10:05,410
passing in so in our example the only

00:10:04,030 --> 00:10:07,180
argument that we're taking in is the

00:10:05,410 --> 00:10:09,220
actual database connection and that

00:10:07,180 --> 00:10:10,870
database connection is just a reference

00:10:09,220 --> 00:10:14,410
to another service definition that might

00:10:10,870 --> 00:10:24,010
live say in dribble cause services llamo

00:10:14,410 --> 00:10:26,080
file so what's exciting about Drupal 8 I

00:10:24,010 --> 00:10:28,870
think is is that we've got a whole bunch

00:10:26,080 --> 00:10:31,900
of new ways to extend it so if you are

00:10:28,870 --> 00:10:34,450
used to Drupal 7 the way that you would

00:10:31,900 --> 00:10:36,880
extend code and Drupal 7 was essentially

00:10:34,450 --> 00:10:39,340
just drive module that that's the way

00:10:36,880 --> 00:10:41,610
that you did most things but it's pretty

00:10:39,340 --> 00:10:43,750
exciting in Drupal 8 we've now got a

00:10:41,610 --> 00:10:46,209
number of different ways we've got much

00:10:43,750 --> 00:10:49,329
more granular ways to

00:10:46,209 --> 00:10:52,660
to extend group of functionality and one

00:10:49,329 --> 00:10:54,670
of them is services so you could see we

00:10:52,660 --> 00:10:56,589
could easily swap out what database

00:10:54,670 --> 00:11:00,910
we're using with something else so we

00:10:56,589 --> 00:11:03,730
could replace a MySQL database service

00:11:00,910 --> 00:11:07,179
with maybe a MongoDB one so we've got a

00:11:03,730 --> 00:11:08,439
lot more loosely coupled software so we

00:11:07,179 --> 00:11:11,619
can actually swap out some of these

00:11:08,439 --> 00:11:17,769
services another way is plugins which

00:11:11,619 --> 00:11:19,089
we'll get into a little bit later so now

00:11:17,769 --> 00:11:21,639
we're going to just look at some some

00:11:19,089 --> 00:11:23,259
practical examples of code in Drupal 8

00:11:21,639 --> 00:11:24,610
so we're going to walk through some of

00:11:23,259 --> 00:11:27,879
the things that you would commonly do

00:11:24,610 --> 00:11:30,610
when writing code for Drupal 7 and the

00:11:27,879 --> 00:11:36,639
first one is basically routing pages and

00:11:30,610 --> 00:11:38,529
forms so first step is just to actually

00:11:36,639 --> 00:11:42,519
look at what does hook menu in Drupal 7

00:11:38,529 --> 00:11:47,529
actually do essentially it does quite a

00:11:42,519 --> 00:11:49,929
lot they all tend to get combined

00:11:47,529 --> 00:11:52,389
together but essentially we're handling

00:11:49,929 --> 00:11:53,920
roots so that means that where you know

00:11:52,389 --> 00:11:57,850
when a request comes in at a particular

00:11:53,920 --> 00:12:01,209
URL you know call some some code and

00:11:57,850 --> 00:12:02,889
return the output of that but we're also

00:12:01,209 --> 00:12:06,910
doing things like creating default menu

00:12:02,889 --> 00:12:11,350
items in there we're also doing things

00:12:06,910 --> 00:12:13,839
like creating local actions and like so

00:12:11,350 --> 00:12:16,660
local actions are the sort of sub tabs

00:12:13,839 --> 00:12:19,480
that you see in the page and local local

00:12:16,660 --> 00:12:22,299
tasks which are like the the link at the

00:12:19,480 --> 00:12:23,799
top which might be like plus a content

00:12:22,299 --> 00:12:26,980
or something like that their local task

00:12:23,799 --> 00:12:28,360
so that was all handled in hook menu so

00:12:26,980 --> 00:12:30,819
this is one of the more out like

00:12:28,360 --> 00:12:34,209
immediately visible changes splitting

00:12:30,819 --> 00:12:36,069
those those two concerns apart so I

00:12:34,209 --> 00:12:38,949
think we'll look at our routing first

00:12:36,069 --> 00:12:41,259
yep all right so this would be your

00:12:38,949 --> 00:12:43,689
classic example in Drupal 7 and you've

00:12:41,259 --> 00:12:47,319
got hook menu there you're returning a

00:12:43,689 --> 00:12:48,910
rake is Drupal loves of rays and you

00:12:47,319 --> 00:12:50,170
know essentially just defining a page

00:12:48,910 --> 00:12:50,470
call back there that's the name of the

00:12:50,170 --> 00:12:53,770
funk

00:12:50,470 --> 00:12:56,710
we call and then our function just

00:12:53,770 --> 00:12:58,630
return a string pretty simple example

00:12:56,710 --> 00:13:02,860
but useful just to demonstrate what the

00:12:58,630 --> 00:13:07,480
difference is in Drupal 8 so creating a

00:13:02,860 --> 00:13:09,220
new page call back in triple-a we're not

00:13:07,480 --> 00:13:13,200
using hook menu were essentially first

00:13:09,220 --> 00:13:16,120
creating a standard PHP class and then

00:13:13,200 --> 00:13:18,580
creating a route definition in a new

00:13:16,120 --> 00:13:20,950
file which is essentially in your module

00:13:18,580 --> 00:13:23,050
directory and again we prefix it with

00:13:20,950 --> 00:13:30,870
the module name and it's just routing

00:13:23,050 --> 00:13:33,880
yamel so this is our controller class

00:13:30,870 --> 00:13:36,250
essentially here it's a it's a pretty

00:13:33,880 --> 00:13:39,580
standard class the main thing to note is

00:13:36,250 --> 00:13:42,460
that we're extending controller base so

00:13:39,580 --> 00:13:46,180
this is a built-in helper class for

00:13:42,460 --> 00:13:48,100
creating controller out controllers and

00:13:46,180 --> 00:13:49,540
then all you need is a simple public

00:13:48,100 --> 00:13:53,230
function that's just going to return our

00:13:49,540 --> 00:13:54,790
our content and you can see I'm just

00:13:53,230 --> 00:13:56,140
returning a render array so it's a

00:13:54,790 --> 00:14:00,250
standard Brenda array like we saw in

00:13:56,140 --> 00:14:03,970
Drupal 7 nothing too complicated and

00:14:00,250 --> 00:14:07,240
then the route definition so we actually

00:14:03,970 --> 00:14:11,230
every route in Drupal 8 has a unique key

00:14:07,240 --> 00:14:14,500
so this is the top the top part we don't

00:14:11,230 --> 00:14:16,930
we're no longer identifying all our

00:14:14,500 --> 00:14:18,700
routes in the system by path we're using

00:14:16,930 --> 00:14:23,320
the the key that we've defined in the

00:14:18,700 --> 00:14:26,230
young file and then we've got some other

00:14:23,320 --> 00:14:28,890
configuration here we specify under

00:14:26,230 --> 00:14:31,420
defaults that we've got a Content

00:14:28,890 --> 00:14:33,280
callback that lives and we could

00:14:31,420 --> 00:14:35,080
actually specify that just the part the

00:14:33,280 --> 00:14:37,150
class name and the function name that

00:14:35,080 --> 00:14:40,120
that's going to get called in that rack

00:14:37,150 --> 00:14:42,790
gets called and we can also add some

00:14:40,120 --> 00:14:44,740
requirements and simple one is just to

00:14:42,790 --> 00:14:46,360
add a permission requirement that you

00:14:44,740 --> 00:14:50,050
need to have set permission to access

00:14:46,360 --> 00:14:53,350
that route so by our splitting out or

00:14:50,050 --> 00:14:56,440
decoupling the the route ID from the

00:14:53,350 --> 00:14:58,480
path we can do things like actually

00:14:56,440 --> 00:15:00,010
change the path but keep all links that

00:14:58,480 --> 00:15:03,950
have been generated using that route ID

00:15:00,010 --> 00:15:08,870
which is pretty cool and then also

00:15:03,950 --> 00:15:11,180
can respond to the same same URL we've

00:15:08,870 --> 00:15:13,580
say different different request headers

00:15:11,180 --> 00:15:19,270
a different context so or even different

00:15:13,580 --> 00:15:22,700
HTTP methods get or post or accepting

00:15:19,270 --> 00:15:25,190
taking responding with JSON versus HTML

00:15:22,700 --> 00:15:26,480
or all in the same path so so you can

00:15:25,190 --> 00:15:29,270
you can lock it down and say okay we'll

00:15:26,480 --> 00:15:31,430
only I'll only take get requests on here

00:15:29,270 --> 00:15:35,360
so so if someone tries to send a post

00:15:31,430 --> 00:15:38,660
it'll just reject it so essentially this

00:15:35,360 --> 00:15:41,300
is the core reason why the core reason

00:15:38,660 --> 00:15:44,180
why Symphony was added in the symphony

00:15:41,300 --> 00:15:46,460
routing system was basically to support

00:15:44,180 --> 00:15:49,550
the web services initiative so that we

00:15:46,460 --> 00:15:51,590
could actually serve off the same routes

00:15:49,550 --> 00:15:54,920
we could actually serve json or xml

00:15:51,590 --> 00:16:03,320
content without actually having to to to

00:15:54,920 --> 00:16:05,420
have different URLs so there is a lot

00:16:03,320 --> 00:16:07,640
provided by that control the base class

00:16:05,420 --> 00:16:09,530
so you might know that your old friends

00:16:07,640 --> 00:16:13,160
in drupal 7 were all of the the

00:16:09,530 --> 00:16:15,140
procedural global functions so there are

00:16:13,160 --> 00:16:17,060
listed on the left so we've essentially

00:16:15,140 --> 00:16:19,130
because we want to be our own and Drupal

00:16:17,060 --> 00:16:22,700
8 we've got object-oriented equivalence

00:16:19,130 --> 00:16:24,560
of those so essentially the t function

00:16:22,700 --> 00:16:28,150
is replaced by a function that's

00:16:24,560 --> 00:16:30,200
available from the base class called t

00:16:28,150 --> 00:16:31,850
but all of the things that you would

00:16:30,200 --> 00:16:33,620
normally expect are there and you notice

00:16:31,850 --> 00:16:35,480
that instead of doing things like

00:16:33,620 --> 00:16:37,210
creating urls by using a path we're

00:16:35,480 --> 00:16:41,200
always using the route name now

00:16:37,210 --> 00:16:43,850
internally so that's one key key change

00:16:41,200 --> 00:16:46,850
and we've got access to some some new

00:16:43,850 --> 00:16:49,970
things like the config and that kind of

00:16:46,850 --> 00:16:51,680
thing so basically we've got we've got

00:16:49,970 --> 00:16:57,920
mappings between the old and the new

00:16:51,680 --> 00:16:59,680
available for us yeah and and and I

00:16:57,920 --> 00:17:01,640
guess one of the main reasons around

00:16:59,680 --> 00:17:06,260
making sure that we're actually using

00:17:01,640 --> 00:17:09,170
these these functions in from the base

00:17:06,260 --> 00:17:11,110
classes that our our code is now unit

00:17:09,170 --> 00:17:12,760
testable we're not calling out to any

00:17:11,110 --> 00:17:14,770
Global procedural functions inside our

00:17:12,760 --> 00:17:16,390
code which means that we can test that

00:17:14,770 --> 00:17:34,270
code in isolation of the rest of the

00:17:16,390 --> 00:17:36,460
system yes I know you can you can create

00:17:34,270 --> 00:17:38,590
multiple you can create one controller

00:17:36,460 --> 00:17:41,470
class and they'd have multiple functions

00:17:38,590 --> 00:17:45,429
on that so you'll have one class in one

00:17:41,470 --> 00:17:48,280
gamble file and you map the map to the

00:17:45,429 --> 00:17:53,290
method in that class in the ML file like

00:17:48,280 --> 00:17:55,030
this yeah that's correct I might just

00:17:53,290 --> 00:17:56,770
say people of this sessions getting

00:17:55,030 --> 00:17:58,270
recorded through the mic so if you've

00:17:56,770 --> 00:18:01,179
got questions they might live it to the

00:17:58,270 --> 00:18:03,690
end and will speak through the mic and

00:18:01,179 --> 00:18:09,250
that way we can get your questions on

00:18:03,690 --> 00:18:11,140
there so there is there is a pattern

00:18:09,250 --> 00:18:13,120
that we're going to be using so how do

00:18:11,140 --> 00:18:14,530
we actually depend inject dependencies

00:18:13,120 --> 00:18:17,559
into our controller so we looked at

00:18:14,530 --> 00:18:19,960
dependency injection before we had that

00:18:17,559 --> 00:18:23,799
services llaman file in the root of the

00:18:19,960 --> 00:18:25,360
module but that's going to be a lot if

00:18:23,799 --> 00:18:27,700
you've got a lot of controller outs

00:18:25,360 --> 00:18:30,580
that's going to be a lot of farm

00:18:27,700 --> 00:18:32,830
services that you need to contain so the

00:18:30,580 --> 00:18:35,880
way to get around this in in Drupal 8

00:18:32,830 --> 00:18:40,299
was what's called factory pattern so

00:18:35,880 --> 00:18:41,860
instead of the container so the

00:18:40,299 --> 00:18:45,210
dependency injection container creating

00:18:41,860 --> 00:18:48,130
all our controllers we just have this

00:18:45,210 --> 00:18:50,260
sort of self-creation mechanism so

00:18:48,130 --> 00:18:53,080
there's a public static function called

00:18:50,260 --> 00:18:54,820
create that has the container and that

00:18:53,080 --> 00:18:56,860
gets called externally and then

00:18:54,820 --> 00:18:59,770
essentially all that does is called like

00:18:56,860 --> 00:19:02,320
new on itself that's what that return

00:18:59,770 --> 00:19:04,240
new static means so we still get the

00:19:02,320 --> 00:19:07,929
benefit of using dependency injection we

00:19:04,240 --> 00:19:09,580
can we can still inject any of that

00:19:07,929 --> 00:19:12,070
dependencies that we need like database

00:19:09,580 --> 00:19:14,919
connection or whatever else it might be

00:19:12,070 --> 00:19:17,230
and this is just a simple pattern that

00:19:14,919 --> 00:19:20,220
you need to know in order to have your

00:19:17,230 --> 00:19:20,220
controllers do that

00:19:21,510 --> 00:19:25,560
that's it for controllers so forms are

00:19:24,150 --> 00:19:28,740
very similar so if you're familiar with

00:19:25,560 --> 00:19:31,320
drupal 7 you might be familiar with

00:19:28,740 --> 00:19:34,920
drupal gate form which you'd normally

00:19:31,320 --> 00:19:37,020
call from under your own you put it into

00:19:34,920 --> 00:19:39,840
hook menu and have a call you your own

00:19:37,020 --> 00:19:44,460
form function from that it's actually a

00:19:39,840 --> 00:19:47,670
lot cleaner in in Drupal 8 now we've got

00:19:44,460 --> 00:19:49,620
a class that you create where all of the

00:19:47,670 --> 00:19:52,230
form functions are self-contained it's

00:19:49,620 --> 00:19:54,780
and essentially all we need to do is

00:19:52,230 --> 00:19:56,540
hook up a ramp definition in the same

00:19:54,780 --> 00:20:00,050
file that we're using for our controller

00:19:56,540 --> 00:20:02,580
and just specify that it's a form yeah a

00:20:00,050 --> 00:20:05,370
more like self documenting approach

00:20:02,580 --> 00:20:08,130
actually and we can use things like IDE

00:20:05,370 --> 00:20:10,860
or other tools to to give us an idea of

00:20:08,130 --> 00:20:12,570
where we're not not overriding a method

00:20:10,860 --> 00:20:14,070
or there's a method to override as

00:20:12,570 --> 00:20:17,400
opposed to having to read through the

00:20:14,070 --> 00:20:19,980
API pages or comments so it's um it's

00:20:17,400 --> 00:20:22,680
more consistent and and better better

00:20:19,980 --> 00:20:26,940
developer experience yeah so this is an

00:20:22,680 --> 00:20:28,650
example of a form in Drupal 8 so you

00:20:26,940 --> 00:20:30,480
might notice the first thing at the top

00:20:28,650 --> 00:20:33,180
is that we're extending again from a

00:20:30,480 --> 00:20:35,310
base class at form-based this is a

00:20:33,180 --> 00:20:37,920
helper class that you would use in all

00:20:35,310 --> 00:20:39,930
of your phones form base actually

00:20:37,920 --> 00:20:42,360
implements an interface called form

00:20:39,930 --> 00:20:46,200
interface that says that anything that

00:20:42,360 --> 00:20:48,120
that that implements this interface must

00:20:46,200 --> 00:20:50,970
have these methods on it so the first

00:20:48,120 --> 00:20:53,310
one is get for my D so that's a unique

00:20:50,970 --> 00:20:54,900
name for your form in Drupal 7 this is

00:20:53,310 --> 00:20:56,970
the name of your form builder function

00:20:54,900 --> 00:20:59,820
so it's not a magical kind of mechanism

00:20:56,970 --> 00:21:03,450
anymore we can explicitly define what

00:20:59,820 --> 00:21:05,520
the unique idea of our form is and then

00:21:03,450 --> 00:21:06,780
we've got the standard kind of functions

00:21:05,520 --> 00:21:08,730
that you would expect they're not

00:21:06,780 --> 00:21:10,560
magical names in terms of putting you

00:21:08,730 --> 00:21:12,540
know like underscore submit or

00:21:10,560 --> 00:21:15,930
underscore validate on it we've got one

00:21:12,540 --> 00:21:17,910
there for building the form i should say

00:21:15,930 --> 00:21:20,940
that the the form api hasn't really

00:21:17,910 --> 00:21:22,590
changed much in drupal 8 it's still the

00:21:20,940 --> 00:21:25,440
same bunch of arrays you still do

00:21:22,590 --> 00:21:27,600
exactly the same thing except now it's

00:21:25,440 --> 00:21:30,559
inside your building that inside

00:21:27,600 --> 00:21:32,940
an object-oriented class not PHP object

00:21:30,559 --> 00:21:35,700
and we've got methods there for

00:21:32,940 --> 00:21:37,919
submitting the form there's also a

00:21:35,700 --> 00:21:39,690
validate form which is optional that you

00:21:37,919 --> 00:21:46,710
can implement which is also part of the

00:21:39,690 --> 00:21:48,780
form base okay and then to hook that up

00:21:46,710 --> 00:21:53,730
into our route so we want to have that

00:21:48,780 --> 00:21:56,190
that form be visible through a URL it's

00:21:53,730 --> 00:21:57,600
very similar to our controller example

00:21:56,190 --> 00:21:59,880
in the beginning the main thing you

00:21:57,600 --> 00:22:04,260
might notice point is that we've

00:21:59,880 --> 00:22:06,360
actually got a a different key so the

00:22:04,260 --> 00:22:08,490
other one said control our content this

00:22:06,360 --> 00:22:10,169
one actually says form not just not make

00:22:08,490 --> 00:22:12,390
sure that it goes through the usual form

00:22:10,169 --> 00:22:15,210
building functions when we're calling

00:22:12,390 --> 00:22:20,850
that route but pretty much identical to

00:22:15,210 --> 00:22:22,289
the other the other example okay so one

00:22:20,850 --> 00:22:25,590
of the big changes that hook menu is

00:22:22,289 --> 00:22:30,600
actually completely removed now so no

00:22:25,590 --> 00:22:32,250
menu in Drupal 8 so what was what's left

00:22:30,600 --> 00:22:35,309
over we've still got a few things that

00:22:32,250 --> 00:22:37,169
weren't actually that we're all in menu

00:22:35,309 --> 00:22:38,850
well thankfully they've all been split

00:22:37,169 --> 00:22:43,470
out so they're all in there all managed

00:22:38,850 --> 00:22:46,080
independently or separately now so yeah

00:22:43,470 --> 00:22:47,460
we've got default many links local tasks

00:22:46,080 --> 00:22:53,940
and local actions so let's have a look

00:22:47,460 --> 00:22:57,919
at those so they've all be not moved to

00:22:53,940 --> 00:23:03,450
y ml files so this is consistent again

00:22:57,919 --> 00:23:05,549
you can see there can you see again yeah

00:23:03,450 --> 00:23:09,110
so essentially yet like all yellow files

00:23:05,549 --> 00:23:11,970
we've got a unique key for our menu link

00:23:09,110 --> 00:23:14,909
and you might notice that we're actually

00:23:11,970 --> 00:23:17,130
specifying the routes that were actually

00:23:14,909 --> 00:23:19,440
using in there by their unique key as

00:23:17,130 --> 00:23:22,830
well so we're not using paths again

00:23:19,440 --> 00:23:24,840
we've got a way to identify that and

00:23:22,830 --> 00:23:26,700
again it's so that just means that we've

00:23:24,840 --> 00:23:29,130
got one more level of abstraction around

00:23:26,700 --> 00:23:31,730
the actual URL so if we change it once

00:23:29,130 --> 00:23:34,200
if it get changed throughout the system

00:23:31,730 --> 00:23:36,059
and you can see you can see you've got

00:23:34,200 --> 00:23:37,559
our keys in there for weight to be able

00:23:36,059 --> 00:23:39,600
to move things around those sorts of

00:23:37,559 --> 00:23:45,350
things so this creates default default

00:23:39,600 --> 00:23:47,580
are and your iMessages menu it yeah

00:23:45,350 --> 00:23:49,770
local actions are the same that's like

00:23:47,580 --> 00:23:53,040
the you know the plus add new content

00:23:49,770 --> 00:23:55,770
type thing again unique keys there and

00:23:53,040 --> 00:23:59,460
we're actually specifying the route name

00:23:55,770 --> 00:24:01,049
and also what route they actually appear

00:23:59,460 --> 00:24:07,850
on so that's the page that you want to

00:24:01,049 --> 00:24:12,090
see them on and similarly local tasks

00:24:07,850 --> 00:24:13,470
near the tabs that you see on page so

00:24:12,090 --> 00:24:16,850
you can see a consistent pattern there

00:24:13,470 --> 00:24:16,850
around how we're using routing

00:24:24,919 --> 00:24:31,320
so so basically this is the ability of

00:24:29,969 --> 00:24:33,869
these routes we can actually mention

00:24:31,320 --> 00:24:37,409
this earlier so you can you can actually

00:24:33,869 --> 00:24:40,320
have the same route respond to return

00:24:37,409 --> 00:24:43,049
different results based off some some

00:24:40,320 --> 00:24:44,279
things like the accept header or the

00:24:43,049 --> 00:24:48,809
method that you're actually trying to

00:24:44,279 --> 00:24:50,039
get I listen to there's some

00:24:48,809 --> 00:24:52,799
documentation there if you want to go

00:24:50,039 --> 00:24:58,259
and have a look and we'll provide links

00:24:52,799 --> 00:25:01,440
at this in the slides all right so next

00:24:58,259 --> 00:25:05,309
up is the configuration system and this

00:25:01,440 --> 00:25:09,509
is going to effectively replace the

00:25:05,309 --> 00:25:12,960
variables table plus features or

00:25:09,509 --> 00:25:14,940
miraculous CTools exploitable 'he's it's

00:25:12,960 --> 00:25:16,919
kind of inspired by that but it's all

00:25:14,940 --> 00:25:20,039
been brought together into a consistent

00:25:16,919 --> 00:25:23,519
API and it's going to open up easy

00:25:20,039 --> 00:25:26,309
deployability and and just just

00:25:23,519 --> 00:25:32,309
consistency in general so let's a look

00:25:26,309 --> 00:25:34,200
at that so in Drupal 7 we had pretty

00:25:32,309 --> 00:25:36,269
much just one one way to configure

00:25:34,200 --> 00:25:39,210
things which was the variables table

00:25:36,269 --> 00:25:42,659
plus we could access that through

00:25:39,210 --> 00:25:44,669
settings PHP as well for overrides but

00:25:42,659 --> 00:25:47,639
it was a pretty simple system and you

00:25:44,669 --> 00:25:49,710
had to kind of you know put serialized

00:25:47,639 --> 00:25:53,369
arrays into it and it was a bit ugly and

00:25:49,710 --> 00:25:54,839
um and was getting news for a lot of

00:25:53,369 --> 00:25:57,479
different things in other things are

00:25:54,839 --> 00:26:00,149
kind of being merged into one one thing

00:25:57,479 --> 00:26:02,190
and that's actually been cleaned up a

00:26:00,149 --> 00:26:04,409
lot in triple-a so we've separated some

00:26:02,190 --> 00:26:09,419
of those things into into different

00:26:04,409 --> 00:26:13,679
api's so first up is kind of like the

00:26:09,419 --> 00:26:15,629
simple config stuff so that might be

00:26:13,679 --> 00:26:17,249
what you would normally use if you're

00:26:15,629 --> 00:26:20,940
writing a custom module you want to make

00:26:17,249 --> 00:26:23,159
you may want to save your settings then

00:26:20,940 --> 00:26:25,679
you can use drupal config so the top the

00:26:23,159 --> 00:26:27,629
example is your I guess if you if you're

00:26:25,679 --> 00:26:30,059
in procedural code but you could

00:26:27,629 --> 00:26:31,149
actually dependency in use dependency

00:26:30,059 --> 00:26:33,549
injection if you

00:26:31,149 --> 00:26:36,399
in the controller to pass in a config

00:26:33,549 --> 00:26:40,419
factory so you don't actually have to

00:26:36,399 --> 00:26:44,499
call that that / Drupal config function

00:26:40,419 --> 00:26:47,409
at the top and yeah essentially you just

00:26:44,499 --> 00:26:49,299
got some pretty basic functions that are

00:26:47,409 --> 00:26:51,519
getting caught on that so getting set on

00:26:49,299 --> 00:26:55,779
that so that's for your your classic

00:26:51,519 --> 00:26:57,820
current basic settings stuff so the way

00:26:55,779 --> 00:26:59,440
the way it works is that you there's

00:26:57,820 --> 00:27:00,789
other sessions I should mention on on

00:26:59,440 --> 00:27:02,320
some of this stuff that you might have

00:27:00,789 --> 00:27:04,839
seen those videos available we won't go

00:27:02,320 --> 00:27:07,440
into too deep diver not on the config

00:27:04,839 --> 00:27:10,839
system here but essentially you've got a

00:27:07,440 --> 00:27:13,989
active store which is where all of your

00:27:10,839 --> 00:27:15,519
current config lives in a living system

00:27:13,989 --> 00:27:20,259
and the concept is that you've got a

00:27:15,519 --> 00:27:21,909
staging store as well so if you working

00:27:20,259 --> 00:27:24,759
locally and you're developing some

00:27:21,909 --> 00:27:27,519
changes you can export that config push

00:27:24,759 --> 00:27:29,859
it up to you know production server and

00:27:27,519 --> 00:27:32,889
load that config into your your active

00:27:29,859 --> 00:27:35,979
store so that that is imported and

00:27:32,889 --> 00:27:38,799
exported using Yammer and we've got

00:27:35,979 --> 00:27:40,570
things like a we've got the UI and in

00:27:38,799 --> 00:27:42,339
Drupal 8 to be able to do that and tools

00:27:40,570 --> 00:27:45,669
like a diff to be able to see ok what is

00:27:42,339 --> 00:27:47,289
actually changed so that's changed a

00:27:45,669 --> 00:27:49,389
couple of times and ease in the database

00:27:47,289 --> 00:27:52,029
at the moment but that actually doesn't

00:27:49,389 --> 00:27:54,369
matter well it was in files the active

00:27:52,029 --> 00:27:56,109
store but it's on it's different in the

00:27:54,369 --> 00:27:59,379
database but it's still the same process

00:27:56,109 --> 00:28:01,869
there's an export and import system and

00:27:59,379 --> 00:28:04,389
because it's all loosely coupled with

00:28:01,869 --> 00:28:06,460
services it'll be a lot of people who

00:28:04,389 --> 00:28:08,379
might want to swap out the conflict

00:28:06,460 --> 00:28:11,200
active store with something like Redis

00:28:08,379 --> 00:28:12,460
or some other kind of key value store

00:28:11,200 --> 00:28:14,320
that they can use in a production

00:28:12,460 --> 00:28:19,419
environment that's going to be more

00:28:14,320 --> 00:28:22,450
performant thinner than a database okay

00:28:19,419 --> 00:28:23,950
so what you typically do for building a

00:28:22,450 --> 00:28:27,159
module you might use your module

00:28:23,950 --> 00:28:30,399
settings form that's not there anymore

00:28:27,159 --> 00:28:32,159
in Drupal 8 instead you would create

00:28:30,399 --> 00:28:34,629
your form class but instead of just

00:28:32,159 --> 00:28:37,210
extending form base you can extend a

00:28:34,629 --> 00:28:40,179
class called conflict form base and that

00:28:37,210 --> 00:28:40,960
gives you a few helper functions so this

00:28:40,179 --> 00:28:43,779
is just

00:28:40,960 --> 00:28:47,049
example where you would essentially what

00:28:43,779 --> 00:28:49,690
you need to do is build your form and

00:28:47,049 --> 00:28:51,820
then just before you return just called

00:28:49,690 --> 00:28:53,679
parent build phone and what that does

00:28:51,820 --> 00:28:56,049
like the system settings form function

00:28:53,679 --> 00:29:01,529
in Drupal 7 just adds things like us

00:28:56,049 --> 00:29:04,299
submit submit button to the form and

00:29:01,529 --> 00:29:06,850
with what theme to use just a few basic

00:29:04,299 --> 00:29:09,370
things and then when you're saving when

00:29:06,850 --> 00:29:12,340
you submit your form again you save your

00:29:09,370 --> 00:29:16,270
config before you return and then you'd

00:29:12,340 --> 00:29:18,700
call parent submit form and what that

00:29:16,270 --> 00:29:21,100
would do is basically do things like you

00:29:18,700 --> 00:29:22,210
know show you a message that says you

00:29:21,100 --> 00:29:24,580
know you form your settings have been

00:29:22,210 --> 00:29:26,110
changed it's not doing a hell of a lot

00:29:24,580 --> 00:29:28,649
but it's just going to be take out some

00:29:26,110 --> 00:29:32,020
of that stuff that you do every time I

00:29:28,649 --> 00:29:33,789
should note that in Drupal 7 system

00:29:32,020 --> 00:29:35,860
settings form actually just copied all

00:29:33,789 --> 00:29:38,820
your form values and save them as

00:29:35,860 --> 00:29:41,590
variables to the to the variables tab

00:29:38,820 --> 00:29:44,020
that isn't the case currently in Drupal

00:29:41,590 --> 00:29:49,870
8 you kind of have to do the config

00:29:44,020 --> 00:29:53,830
stuff yourself yeah so this is basically

00:29:49,870 --> 00:29:56,830
calling the parent build stuff all right

00:29:53,830 --> 00:29:59,710
complex confi all right so this is where

00:29:56,830 --> 00:30:02,950
our configuration entities come in so

00:29:59,710 --> 00:30:04,779
these are things like views rules all

00:30:02,950 --> 00:30:07,149
the stuff that we we would store in in

00:30:04,779 --> 00:30:10,120
custom tables and then use things like

00:30:07,149 --> 00:30:13,630
CTools explodable 'he's to to to help us

00:30:10,120 --> 00:30:17,679
deploy them we have a core API now to to

00:30:13,630 --> 00:30:19,690
handle that and it's a consistent we

00:30:17,679 --> 00:30:22,690
don't need per module work around

00:30:19,690 --> 00:30:25,059
everyone can use the same system and and

00:30:22,690 --> 00:30:28,500
it has has two interesting features one

00:30:25,059 --> 00:30:31,059
is that we can treat them like entities

00:30:28,500 --> 00:30:33,340
when we're dealing with them and then of

00:30:31,059 --> 00:30:35,770
course we can export them just like the

00:30:33,340 --> 00:30:39,850
the simple configure and deploy them

00:30:35,770 --> 00:30:42,429
yeah and I should say that this is all

00:30:39,850 --> 00:30:46,390
shared all across course so we're using

00:30:42,429 --> 00:30:49,539
the same API for everything so things

00:30:46,390 --> 00:30:52,809
like fields node types block types image

00:30:49,539 --> 00:30:54,100
styles views guilty' formats all of that

00:30:52,809 --> 00:30:57,820
is using the same

00:30:54,100 --> 00:31:00,039
api they're all config entities and

00:30:57,820 --> 00:31:03,460
we've actually got a unified entity API

00:31:00,039 --> 00:31:05,830
so content we've got a concept of

00:31:03,460 --> 00:31:08,020
content entities which would be your

00:31:05,830 --> 00:31:11,590
notes and those kinds of things and

00:31:08,020 --> 00:31:14,169
config entities and we've essentially

00:31:11,590 --> 00:31:18,850
got a unified API routes around that so

00:31:14,169 --> 00:31:20,500
the same the same functions calling on

00:31:18,850 --> 00:31:22,780
those objects so it's going to actually

00:31:20,500 --> 00:31:24,640
be a huge developer experience

00:31:22,780 --> 00:31:27,700
improvement because it's going to be

00:31:24,640 --> 00:31:30,220
consistency there around how things work

00:31:27,700 --> 00:31:34,450
and if you learn at once you can apply

00:31:30,220 --> 00:31:35,980
that everywhere again configuration

00:31:34,450 --> 00:31:37,330
docks are available and suggest you go

00:31:35,980 --> 00:31:43,230
have a look they're getting fleshed out

00:31:37,330 --> 00:31:46,179
at the moment sir I should also add that

00:31:43,230 --> 00:31:49,570
the workflows for how you actually do

00:31:46,179 --> 00:31:52,419
deployments aren't really prescribed in

00:31:49,570 --> 00:31:54,940
Drupal 8 essentially that I think will

00:31:52,419 --> 00:31:57,299
evolve once people start building sites

00:31:54,940 --> 00:31:59,799
and finding new ways to do deployments

00:31:57,299 --> 00:32:03,070
there has been some discussion about how

00:31:59,799 --> 00:32:06,940
this would work such as you know

00:32:03,070 --> 00:32:09,520
committing your staging config to a repo

00:32:06,940 --> 00:32:13,870
and then then doing a git push and then

00:32:09,520 --> 00:32:15,970
pulling it on the server but core

00:32:13,870 --> 00:32:18,789
doesn't really tell you what to do it's

00:32:15,970 --> 00:32:20,470
just essentially providing the API and I

00:32:18,789 --> 00:32:23,530
think all of those stuff all of those

00:32:20,470 --> 00:32:25,270
tools will evolve in contrary in the

00:32:23,530 --> 00:32:27,370
coming years there's simply some videos

00:32:25,270 --> 00:32:29,679
online of people doing different

00:32:27,370 --> 00:32:33,309
versions of it or if you want to check

00:32:29,679 --> 00:32:36,640
out the brush 7 presentation by most

00:32:33,309 --> 00:32:40,830
flights men from this conference to see

00:32:36,640 --> 00:32:40,830
how it might be done with with drush

00:32:41,970 --> 00:32:47,679
also the configures actually got

00:32:45,000 --> 00:32:51,250
translates for a multilingual support so

00:32:47,679 --> 00:32:53,710
I'm using schemers to define what all

00:32:51,250 --> 00:32:55,270
the keys in our config are so that we

00:32:53,710 --> 00:32:56,380
can actually provide translations for

00:32:55,270 --> 00:33:00,460
all of those so you can actually have

00:32:56,380 --> 00:33:01,570
multiple versions of confit so as I

00:33:00,460 --> 00:33:03,190
mentioned before instead of just using

00:33:01,570 --> 00:33:05,060
the variables table for everything we've

00:33:03,190 --> 00:33:08,520
tried to split out some of

00:33:05,060 --> 00:33:12,030
the core concept so if you're if you're

00:33:08,520 --> 00:33:14,940
using the variables table just to store

00:33:12,030 --> 00:33:17,820
some temporary state so an example might

00:33:14,940 --> 00:33:20,340
be you know a menu rebuild is needed

00:33:17,820 --> 00:33:23,370
there's a new API for that just called

00:33:20,340 --> 00:33:29,430
state so you can you can just set that

00:33:23,370 --> 00:33:33,000
and it's meant for simple cases and this

00:33:29,430 --> 00:33:36,450
there's also a settings API so that's

00:33:33,000 --> 00:33:38,010
essentially just calling a direct

00:33:36,450 --> 00:33:40,320
wrapper around the settings like PHP

00:33:38,010 --> 00:33:42,240
file so if you ever previously were just

00:33:40,320 --> 00:33:45,090
using variable get and assuming that the

00:33:42,240 --> 00:33:46,680
settings PHP file was overriding what

00:33:45,090 --> 00:33:48,570
was in your config now you can actually

00:33:46,680 --> 00:33:50,310
just access that directly with the

00:33:48,570 --> 00:33:57,080
settings that you and the conferees

00:33:50,310 --> 00:33:57,080
still there so yeah okay so plugins

00:34:12,619 --> 00:34:19,500
so I think you should always you can

00:34:17,250 --> 00:34:21,690
basically inject anything that I've got

00:34:19,500 --> 00:34:23,970
here where I'm calling static like

00:34:21,690 --> 00:34:25,230
static functions like drupal consider

00:34:23,970 --> 00:34:27,210
those that leash they can be a

00:34:25,230 --> 00:34:29,820
dependency injected they're still

00:34:27,210 --> 00:34:32,460
procedural code and Drupal 8 so anything

00:34:29,820 --> 00:34:34,830
that's in your module file is not PSR

00:34:32,460 --> 00:34:38,460
for essentially but if you're creating a

00:34:34,830 --> 00:34:40,109
controller or form then that is object

00:34:38,460 --> 00:34:45,720
oriented and you should be dependency

00:34:40,109 --> 00:34:47,460
injecting all of this stuff so the the

00:34:45,720 --> 00:34:50,669
answer I guess is that there's two ways

00:34:47,460 --> 00:34:55,040
of doing it and you should choose one

00:34:50,669 --> 00:34:57,839
way if you in the right context moment

00:34:55,040 --> 00:35:00,119
okay so plugins are there was a great

00:34:57,839 --> 00:35:01,650
session yesterday on plugins um if

00:35:00,119 --> 00:35:04,290
you're interested in we won't go into

00:35:01,650 --> 00:35:05,640
too much depth now but just to give

00:35:04,290 --> 00:35:08,240
people who I didn't see that just an

00:35:05,640 --> 00:35:12,270
idea about what plug-in is all about

00:35:08,240 --> 00:35:14,400
essentially we're not using hook info

00:35:12,270 --> 00:35:18,300
anymore for a whole bunch of things so

00:35:14,400 --> 00:35:22,290
previously you know we would be you know

00:35:18,300 --> 00:35:24,060
defining you know providing some default

00:35:22,290 --> 00:35:28,440
settings for things using hook infos

00:35:24,060 --> 00:35:30,089
it's all declarative stuff and that

00:35:28,440 --> 00:35:35,369
those are pretty much all been replaced

00:35:30,089 --> 00:35:36,960
by plugins so anytime we wanted to have

00:35:35,369 --> 00:35:40,099
our module be extensible by other

00:35:36,960 --> 00:35:42,900
modules our main core way to do it was

00:35:40,099 --> 00:35:44,460
things like registration hook so hope ya

00:35:42,900 --> 00:35:46,560
hook something info and and that's what

00:35:44,460 --> 00:35:48,540
we're really replacing with the plug-in

00:35:46,560 --> 00:35:53,280
system if you've ever used C tools

00:35:48,540 --> 00:35:56,330
plugins it's a modernized version of

00:35:53,280 --> 00:36:02,330
that but definitely inspired by that

00:35:56,330 --> 00:36:04,830
yeah so yeah so basically if you have

00:36:02,330 --> 00:36:06,839
previously we're using random hooks and

00:36:04,830 --> 00:36:11,250
now we're actually using real objects

00:36:06,839 --> 00:36:13,190
and interfaces and again this is spread

00:36:11,250 --> 00:36:16,410
throughout course a plugins of thing

00:36:13,190 --> 00:36:18,030
being taken on and replaced a whole lot

00:36:16,410 --> 00:36:20,670
of inconsistent ways we were doing

00:36:18,030 --> 00:36:21,380
things all across ripple seven they're

00:36:20,670 --> 00:36:24,800
all in

00:36:21,380 --> 00:36:27,080
now a nice consistent API so the obvious

00:36:24,800 --> 00:36:28,700
place where this is improved is that

00:36:27,080 --> 00:36:31,550
you'd be familiar with as a Drupal 7

00:36:28,700 --> 00:36:33,380
developer is registering a block so you

00:36:31,550 --> 00:36:36,320
register a block in a nympho hook and

00:36:33,380 --> 00:36:38,510
then when you need to view that block

00:36:36,320 --> 00:36:40,580
you only have one hook available in your

00:36:38,510 --> 00:36:43,070
module so you need up a switch statement

00:36:40,580 --> 00:36:46,310
and then if you have by blocks you have

00:36:43,070 --> 00:36:47,750
5 f's else's or switches and so it's a

00:36:46,310 --> 00:36:51,770
bit unwieldly so now we have a nice

00:36:47,750 --> 00:36:53,690
clean system we can have 11 plugin 13

00:36:51,770 --> 00:36:56,120
yeah yeah so this is it so basically

00:36:53,690 --> 00:36:59,000
this is how a block would be done in

00:36:56,120 --> 00:37:02,360
Drupal 7 hook like info view but to

00:36:59,000 --> 00:37:05,180
figure those kinds of things so

00:37:02,360 --> 00:37:08,180
interpolate essentially all of a single

00:37:05,180 --> 00:37:09,350
blocks can figure on your code is all in

00:37:08,180 --> 00:37:13,970
one class so it's nice and

00:37:09,350 --> 00:37:16,160
self-contained and that basically means

00:37:13,970 --> 00:37:19,940
that it's just going to be easier to

00:37:16,160 --> 00:37:22,280
work with it supports well its uses

00:37:19,940 --> 00:37:23,480
interfaces so again we've got good IDE

00:37:22,280 --> 00:37:26,180
support if you're using something like

00:37:23,480 --> 00:37:28,250
phpstorm something like that you're

00:37:26,180 --> 00:37:33,590
going to be able to make sure that your

00:37:28,250 --> 00:37:35,750
classes calling the right functions and

00:37:33,590 --> 00:37:37,640
this is just a simple example but this

00:37:35,750 --> 00:37:41,180
is how you write a block now in triple-a

00:37:37,640 --> 00:37:43,160
so you might notice that we're using PHP

00:37:41,180 --> 00:37:45,920
annotations so we've got a block

00:37:43,160 --> 00:37:48,830
annotation type we just need to provide

00:37:45,920 --> 00:37:53,750
an ID an admin label and a category for

00:37:48,830 --> 00:37:56,360
it and we're basically just extending

00:37:53,750 --> 00:37:58,310
block base and so the annotation just

00:37:56,360 --> 00:38:01,130
get discovered by drupal it knows that

00:37:58,310 --> 00:38:02,710
it's block that can put it into you know

00:38:01,130 --> 00:38:08,300
the list of blocks that are available

00:38:02,710 --> 00:38:09,620
and then because we're extending block

00:38:08,300 --> 00:38:11,360
bags we need to implement certain

00:38:09,620 --> 00:38:14,120
methods in order to to work with that

00:38:11,360 --> 00:38:16,100
block so block build blocks a block and

00:38:14,120 --> 00:38:18,020
figure all of those are defined in the

00:38:16,100 --> 00:38:20,270
interface block base gives us some nice

00:38:18,020 --> 00:38:22,340
helper methods in there to make it

00:38:20,270 --> 00:38:25,900
simple a center after bright boilerplate

00:38:22,340 --> 00:38:28,900
code for everything and and that's it

00:38:25,900 --> 00:38:28,900
yes

00:38:35,650 --> 00:38:41,900
you will always need to write build so

00:38:39,230 --> 00:38:43,300
block base might give you some helper

00:38:41,900 --> 00:38:45,790
methods and it might give you some

00:38:43,300 --> 00:38:47,930
support for things that are optional but

00:38:45,790 --> 00:38:49,580
you're always going to want to build a

00:38:47,930 --> 00:38:52,040
block because otherwise you wouldn't get

00:38:49,580 --> 00:38:53,900
anything back so that will probably one

00:38:52,040 --> 00:38:56,810
where it's in the interface but not in

00:38:53,900 --> 00:38:59,120
the base class so the basic pattern is

00:38:56,810 --> 00:39:02,510
to satisfy the interface and then

00:38:59,120 --> 00:39:04,580
sometimes you'll have default sensible

00:39:02,510 --> 00:39:07,190
defaults in a base class that you can

00:39:04,580 --> 00:39:09,800
override but optional so I think a form

00:39:07,190 --> 00:39:13,220
validation was was one example there's a

00:39:09,800 --> 00:39:16,460
validate form method in the interface

00:39:13,220 --> 00:39:22,730
but the base class provides just always

00:39:16,460 --> 00:39:24,500
passing validation so okay so so again

00:39:22,730 --> 00:39:26,270
advantages that we've got base classes

00:39:24,500 --> 00:39:29,480
we're working with objects we've got

00:39:26,270 --> 00:39:32,030
inheritance and we've got one file per

00:39:29,480 --> 00:39:33,470
plugins so we're not having to kind of

00:39:32,030 --> 00:39:36,440
squeeze a whole bunch and logic into

00:39:33,470 --> 00:39:39,230
switch statements if you've got a single

00:39:36,440 --> 00:39:43,670
a single module that's got multiple

00:39:39,230 --> 00:39:46,370
block types okay so as I said before

00:39:43,670 --> 00:39:48,440
there's lots and lots of plugins plug

00:39:46,370 --> 00:39:50,900
into being used for everything in Drupal

00:39:48,440 --> 00:39:55,150
8 so things like image styles widgets

00:39:50,900 --> 00:39:59,900
for matters views heavily users plugins

00:39:55,150 --> 00:40:03,140
phenotypes and essentially you know once

00:39:59,900 --> 00:40:04,870
you once you kind of understand plugins

00:40:03,140 --> 00:40:11,150
you'll be able to apply that throughout

00:40:04,870 --> 00:40:12,710
anything that you're doing okay so we're

00:40:11,150 --> 00:40:18,720
going to just briefly look at entities

00:40:12,710 --> 00:40:23,770
and fields that's a field enter Tiana

00:40:18,720 --> 00:40:25,600
in case you didn't get it so I mean

00:40:23,770 --> 00:40:28,840
there's been a whole whole lot of

00:40:25,600 --> 00:40:31,780
cleanup within the entity API and the

00:40:28,840 --> 00:40:34,570
fields API and it was a great session by

00:40:31,780 --> 00:40:35,830
fargo i think was on tuesday so

00:40:34,570 --> 00:40:37,600
encouraging if you're interested in

00:40:35,830 --> 00:40:40,210
looking deeper go and have a look on

00:40:37,600 --> 00:40:43,450
youtube and find her it could have a

00:40:40,210 --> 00:40:46,570
great session on the api changes and

00:40:43,450 --> 00:40:48,190
basically in drupal 7 custom entities

00:40:46,570 --> 00:40:50,230
were pretty painful and they were quite

00:40:48,190 --> 00:40:52,090
difficult to even though there was

00:40:50,230 --> 00:40:53,590
suddenly there was this some api that

00:40:52,090 --> 00:40:57,190
you could use you could go and build

00:40:53,590 --> 00:41:00,730
your own entities there was still quite

00:40:57,190 --> 00:41:02,110
a lot of work you needed to do and most

00:41:00,730 --> 00:41:05,380
people would typically avoided them

00:41:02,110 --> 00:41:07,750
they'll basically half-finished was the

00:41:05,380 --> 00:41:09,610
problem and you should definitely check

00:41:07,750 --> 00:41:12,580
out favorite photos our presentation but

00:41:09,610 --> 00:41:14,380
up finishing the entity API was a goal

00:41:12,580 --> 00:41:16,660
of Drupal 8 and seems to have gone very

00:41:14,380 --> 00:41:21,250
well yeah so entities are first class

00:41:16,660 --> 00:41:24,130
objects now with interfaces instead of a

00:41:21,250 --> 00:41:26,320
bunch of hooks and classes can be

00:41:24,130 --> 00:41:31,120
swapped we've got a common and a

00:41:26,320 --> 00:41:33,250
consistent API around that now we've

00:41:31,120 --> 00:41:35,830
also got some new field types so these

00:41:33,250 --> 00:41:38,350
ones are all in core now so link email

00:41:35,830 --> 00:41:42,550
comment I'll comment it's still being

00:41:38,350 --> 00:41:44,290
worked on things like entity reference

00:41:42,550 --> 00:41:46,840
so I mean that's hugely powerful if

00:41:44,290 --> 00:41:48,940
you're doing you know data modeling and

00:41:46,840 --> 00:41:50,260
Drupal to be able to use that that's all

00:41:48,940 --> 00:41:52,270
that's all built in we're actually using

00:41:50,260 --> 00:41:56,440
it to dereference for a lot of things in

00:41:52,270 --> 00:41:58,120
Drupal core now and and part of the

00:41:56,440 --> 00:42:00,450
mobile initiative was to add things like

00:41:58,120 --> 00:42:06,010
telephone support so that you can have

00:42:00,450 --> 00:42:11,530
telephone fields there we go in for time

00:42:06,010 --> 00:42:14,110
so basically just we've got a new

00:42:11,530 --> 00:42:16,060
concept which is you might have known

00:42:14,110 --> 00:42:18,930
that interval 7 you've got things like

00:42:16,060 --> 00:42:21,340
display modes now you've actually got

00:42:18,930 --> 00:42:23,470
support for creating those directly and

00:42:21,340 --> 00:42:25,360
Drupal 8 and also additionally you've

00:42:23,470 --> 00:42:25,900
got four modes so you can actually have

00:42:25,360 --> 00:42:28,360
multiple

00:42:25,900 --> 00:42:30,190
forms for a single entity so if you

00:42:28,360 --> 00:42:32,230
think of things like the registration

00:42:30,190 --> 00:42:33,850
form you might want to have when a user

00:42:32,230 --> 00:42:35,950
signs up you want to only show a couple

00:42:33,850 --> 00:42:37,450
of fields but then when they go and edit

00:42:35,950 --> 00:42:39,580
their profile you can have a whole lot

00:42:37,450 --> 00:42:41,260
more they're called four modes now so

00:42:39,580 --> 00:42:45,040
it's nice clean way of doing that and

00:42:41,260 --> 00:42:47,320
dribble a the properties are treated

00:42:45,040 --> 00:42:48,760
consistently as fields now as well so

00:42:47,320 --> 00:42:52,960
you can use widgets and format is on

00:42:48,760 --> 00:42:56,680
them yep okay so these are all plugins

00:42:52,960 --> 00:42:58,270
so we're using those api's and we've got

00:42:56,680 --> 00:43:00,730
first class objects so if anyone's

00:42:58,270 --> 00:43:03,880
familiar with the Drupal 7 way of doing

00:43:00,730 --> 00:43:05,410
it now you can do it in the dribble a

00:43:03,880 --> 00:43:07,120
bow down the bottom which is a hell of a

00:43:05,410 --> 00:43:09,730
lot cleaner I never really I always had

00:43:07,120 --> 00:43:11,860
to check what the actual syntax was when

00:43:09,730 --> 00:43:16,450
when accessing that so it's a lot

00:43:11,860 --> 00:43:21,400
cleaner the api's cleaned up one long so

00:43:16,450 --> 00:43:23,110
yeah yeah so if you don't use a

00:43:21,400 --> 00:43:25,000
multi-value it'll give you the first one

00:43:23,110 --> 00:43:26,380
if it is a multi value or you can just

00:43:25,000 --> 00:43:32,380
use square brackets to access a

00:43:26,380 --> 00:43:33,850
particular one okay I just a few changes

00:43:32,380 --> 00:43:35,230
where I go too much into the front end

00:43:33,850 --> 00:43:37,270
stuff but i think the significant

00:43:35,230 --> 00:43:41,080
changes are around that we've swapped

00:43:37,270 --> 00:43:42,730
out PHP templates for twig there's been

00:43:41,080 --> 00:43:44,470
a couple of sessions on Twitter which

00:43:42,730 --> 00:43:47,650
you might have seen already but

00:43:44,470 --> 00:43:49,390
essentially it's just a simple name

00:43:47,650 --> 00:43:51,940
change if you've got your template file

00:43:49,390 --> 00:43:56,050
you just rename it to with the HTML that

00:43:51,940 --> 00:43:57,190
wig at the end and I think one of the

00:43:56,050 --> 00:43:59,890
big benefits is that we can actually

00:43:57,190 --> 00:44:01,990
enforce like a clean design or outer so

00:43:59,890 --> 00:44:04,450
we're not actually calling PHP code from

00:44:01,990 --> 00:44:09,610
our template files anymore and it's a

00:44:04,450 --> 00:44:11,890
simpler simplest syntax so this doesn't

00:44:09,610 --> 00:44:14,590
go see Martin session yeah is there a

00:44:11,890 --> 00:44:18,520
session I think it allowed I was very

00:44:14,590 --> 00:44:21,100
loud down so basically we've just got

00:44:18,520 --> 00:44:23,710
simple printing out variables we've got

00:44:21,100 --> 00:44:25,780
some if end if statements which is

00:44:23,710 --> 00:44:27,700
basically a you know we've got some

00:44:25,780 --> 00:44:29,590
shortcuts we've got loops those kinds of

00:44:27,700 --> 00:44:33,340
things we're not executing any PHP in

00:44:29,590 --> 00:44:36,250
there and one of the big things for for

00:44:33,340 --> 00:44:38,030
module developers is that the theme

00:44:36,250 --> 00:44:41,720
function is actually being deprecated

00:44:38,030 --> 00:44:44,450
was being removed in Drupal 8 so if you

00:44:41,720 --> 00:44:46,640
were calling theme inside your module

00:44:44,450 --> 00:44:47,960
code in Drupal 7 essentially what you're

00:44:46,640 --> 00:44:50,000
doing is you're creating you're turning

00:44:47,960 --> 00:44:51,770
it into a string and then from then on

00:44:50,000 --> 00:44:54,920
anything that's kind of wants to access

00:44:51,770 --> 00:44:56,840
it afterwards can't really modify the

00:44:54,920 --> 00:45:00,530
data structure it's too late it's

00:44:56,840 --> 00:45:02,990
already turned into a string so what

00:45:00,530 --> 00:45:05,800
what was the greed is it just encourage

00:45:02,990 --> 00:45:10,100
using render arrays as much as possible

00:45:05,800 --> 00:45:13,340
so now it's the only way you can do it

00:45:10,100 --> 00:45:16,340
so instead of calling theme and then

00:45:13,340 --> 00:45:17,480
calling a thief function you just return

00:45:16,340 --> 00:45:19,310
to render array and you can actually

00:45:17,480 --> 00:45:21,110
pass in what theme function you want to

00:45:19,310 --> 00:45:27,770
call you can do this in Drupal 7 now

00:45:21,110 --> 00:45:30,020
it's just enforced in Drupal 8 another

00:45:27,770 --> 00:45:34,190
important thing is that triple out j/s

00:45:30,020 --> 00:45:35,990
and dribble add CSS are gone we actually

00:45:34,190 --> 00:45:38,870
have to declare the dependencies now

00:45:35,990 --> 00:45:43,000
with that with a libraries the libraries

00:45:38,870 --> 00:45:45,800
API so that's again is in a yamel file

00:45:43,000 --> 00:45:47,270
so basically there's two steps first

00:45:45,800 --> 00:45:50,570
thing is you declare your dependencies

00:45:47,270 --> 00:45:51,830
and then the second step is on the page

00:45:50,570 --> 00:45:53,930
that you actually use it so you

00:45:51,830 --> 00:45:56,360
returning a form array or render array

00:45:53,930 --> 00:45:58,550
you use the attached function in your

00:45:56,360 --> 00:46:01,340
render array to specify what library to

00:45:58,550 --> 00:46:03,200
include and the main reason for that is

00:46:01,340 --> 00:46:05,630
basically performance improvement on the

00:46:03,200 --> 00:46:08,480
front end so instead of loading jQuery

00:46:05,630 --> 00:46:10,340
on every single page load you only load

00:46:08,480 --> 00:46:12,710
it now on the pages that actually need

00:46:10,340 --> 00:46:15,800
it so it's been giving a huge reduction

00:46:12,710 --> 00:46:18,350
in that there's actually work still

00:46:15,800 --> 00:46:21,920
going on to integrate with acetic which

00:46:18,350 --> 00:46:25,880
is like a another way to try and try and

00:46:21,920 --> 00:46:28,880
optimize these files forever so this is

00:46:25,880 --> 00:46:30,170
an example of in your module you just

00:46:28,880 --> 00:46:32,680
create this libraries file and all

00:46:30,170 --> 00:46:38,090
you're saying is that your module

00:46:32,680 --> 00:46:40,580
depends on jQuery or quadruple so that

00:46:38,090 --> 00:46:42,560
that that's your library definition for

00:46:40,580 --> 00:46:45,410
your module and then again when you're

00:46:42,560 --> 00:46:47,430
when you're returning a form array you

00:46:45,410 --> 00:46:50,250
would just specify that you're going to

00:46:47,430 --> 00:46:53,609
at your library and specify the name of

00:46:50,250 --> 00:46:57,710
your library and that's it so that will

00:46:53,609 --> 00:47:01,829
load your javascript in your CSS okay so

00:46:57,710 --> 00:47:05,220
just a few final thoughts to wrap up I

00:47:01,829 --> 00:47:07,140
think the main takeaways I want you to

00:47:05,220 --> 00:47:10,530
have if you're not familiar with Drupal

00:47:07,140 --> 00:47:12,119
8 is that there's a lot of complexity

00:47:10,530 --> 00:47:13,710
now under the hood so there's been a

00:47:12,119 --> 00:47:17,040
whole lot of code Adam we've got

00:47:13,710 --> 00:47:18,720
external libraries there's a whole lot

00:47:17,040 --> 00:47:22,619
of functionality going on under there

00:47:18,720 --> 00:47:26,309
now I mean I changes to the routing how

00:47:22,619 --> 00:47:28,770
forms work we were using plugins

00:47:26,309 --> 00:47:32,280
everywhere got a whole new configuration

00:47:28,770 --> 00:47:35,550
API and totally revamped entity and

00:47:32,280 --> 00:47:37,230
field ap is but I think and dress

00:47:35,550 --> 00:47:40,500
dimension this in his keynote the other

00:47:37,230 --> 00:47:42,359
day we do even though we've got some

00:47:40,500 --> 00:47:45,180
simple increased complexity under the

00:47:42,359 --> 00:47:48,540
hood I think we've actually got a much

00:47:45,180 --> 00:47:51,180
more simplified developer experience the

00:47:48,540 --> 00:47:53,880
the API is going to be a lot easier to

00:47:51,180 --> 00:47:56,609
work with and because there's less kind

00:47:53,880 --> 00:47:58,109
of magic going on a lot more explicit

00:47:56,609 --> 00:48:01,349
declaration of what you actually need to

00:47:58,109 --> 00:48:06,720
do and consistency across across

00:48:01,349 --> 00:48:08,250
everywhere else and yeah so I guess

00:48:06,720 --> 00:48:10,799
we've got we've got any time for

00:48:08,250 --> 00:48:13,140
questions if you will have questions

00:48:10,799 --> 00:48:18,990
just come up and use the mic so we can

00:48:13,140 --> 00:48:22,020
record you as I'm on my way back I just

00:48:18,990 --> 00:48:25,380
just worked out perfectly when when you

00:48:22,020 --> 00:48:27,569
were demonstrating extending the

00:48:25,380 --> 00:48:29,760
controller base and the replacement to

00:48:27,569 --> 00:48:33,660
hook menu there's a bit I didn't quite

00:48:29,760 --> 00:48:36,540
get and one of your functions took as an

00:48:33,660 --> 00:48:39,000
argument it it said connection and then

00:48:36,540 --> 00:48:41,690
database what was that about what was

00:48:39,000 --> 00:48:44,760
that accomplishing that was to show how

00:48:41,690 --> 00:48:47,640
dependency injection might work so some

00:48:44,760 --> 00:48:50,990
something rather than calling out to a

00:48:47,640 --> 00:48:53,400
database function you would actually

00:48:50,990 --> 00:48:54,839
inject the dependency into the object

00:48:53,400 --> 00:48:57,930
that's going to make that call and that

00:48:54,839 --> 00:48:59,910
lets you do things like if I'm writing a

00:48:57,930 --> 00:49:03,720
test for that class that that can

00:48:59,910 --> 00:49:06,270
that controller fast I can have a dummy

00:49:03,720 --> 00:49:09,180
a dummy object that gives me gives me

00:49:06,270 --> 00:49:11,369
results that I that I want and I can

00:49:09,180 --> 00:49:14,309
test her class in isolation without

00:49:11,369 --> 00:49:15,750
actually having a database so that's one

00:49:14,309 --> 00:49:17,880
that was what that was meant to

00:49:15,750 --> 00:49:20,849
illustrate it so cadet connection was

00:49:17,880 --> 00:49:22,920
the name of the class okay but I mean

00:49:20,849 --> 00:49:24,420
it's just the way that it's the way that

00:49:22,920 --> 00:49:26,339
its name does cook it's it's the

00:49:24,420 --> 00:49:28,440
database connection so it's a pretty

00:49:26,339 --> 00:49:30,299
common pattern in triple-a just to call

00:49:28,440 --> 00:49:32,520
that connection database instead of

00:49:30,299 --> 00:49:34,109
connection so yes that was type hinting

00:49:32,520 --> 00:49:37,940
actually which I think we didn't really

00:49:34,109 --> 00:49:42,000
explain see if you haven't seen 00 p PHP

00:49:37,940 --> 00:49:43,470
you can actually enforce a type of an

00:49:42,000 --> 00:49:45,180
object that you're accepting so you can

00:49:43,470 --> 00:49:47,190
say so that the variable that we're

00:49:45,180 --> 00:49:48,869
accepting was got database but the type

00:49:47,190 --> 00:49:51,299
was connections we're only going to

00:49:48,869 --> 00:49:59,190
accept connection or children of

00:49:51,299 --> 00:50:01,440
connection objects okay thank you I have

00:49:59,190 --> 00:50:04,589
two questions the first one there with

00:50:01,440 --> 00:50:06,450
the menu rotor or the new changes what

00:50:04,589 --> 00:50:10,020
about wild cards are the working the

00:50:06,450 --> 00:50:15,690
same as ruble seven they work slightly

00:50:10,020 --> 00:50:20,160
differently so in in Drupal 8 you can

00:50:15,690 --> 00:50:22,170
have placeholders so you can do the same

00:50:20,160 --> 00:50:25,380
thing it's got the same kinds of things

00:50:22,170 --> 00:50:28,650
there although there was something that

00:50:25,380 --> 00:50:31,470
was a little bit complicated which is we

00:50:28,650 --> 00:50:33,900
don't have the automatic path extensions

00:50:31,470 --> 00:50:37,380
you know when you can you can add extra

00:50:33,900 --> 00:50:39,869
parameters to the end of your URL and

00:50:37,380 --> 00:50:42,569
they get converted to arguments so I

00:50:39,869 --> 00:50:44,730
think for most of those situations you

00:50:42,569 --> 00:50:47,940
would use a query string instead now so

00:50:44,730 --> 00:50:51,569
you could still do things like node /

00:50:47,940 --> 00:50:55,079
and then put node ID or an Oden as a

00:50:51,569 --> 00:50:57,809
parameter and you can use curly braces

00:50:55,079 --> 00:51:00,089
to find that that's a parameter but it

00:50:57,809 --> 00:51:00,720
would only take it only take arguments

00:51:00,089 --> 00:51:03,150
that have

00:51:00,720 --> 00:51:05,430
note and then a number it's not going to

00:51:03,150 --> 00:51:06,600
take no more number and then / something

00:51:05,430 --> 00:51:08,940
else else something else something else

00:51:06,600 --> 00:51:12,030
that's just a limitation of what the

00:51:08,940 --> 00:51:13,550
symphony routing system supported and

00:51:12,030 --> 00:51:15,330
actually create a whole bunch of

00:51:13,550 --> 00:51:17,310
complexity the way that we were doing it

00:51:15,330 --> 00:51:19,860
before and I think most of those

00:51:17,310 --> 00:51:21,690
symphony documentation is good for that

00:51:19,860 --> 00:51:23,580
topic as well so you could look look

00:51:21,690 --> 00:51:26,160
that up there as well okay I'm the

00:51:23,580 --> 00:51:28,320
become one is is there any change or any

00:51:26,160 --> 00:51:31,530
new things related to performance and

00:51:28,320 --> 00:51:34,500
gosh and I don't know different kind of

00:51:31,530 --> 00:51:37,740
aggregation they are cash anything was

00:51:34,500 --> 00:51:41,070
thought differently to make it easier

00:51:37,740 --> 00:51:43,380
for things to be cashed yeah there was

00:51:41,070 --> 00:51:46,170
there's been a lot of stuff added in

00:51:43,380 --> 00:51:48,450
terms of caching so i should say that at

00:51:46,170 --> 00:51:50,310
this stage in the Drupal 8 cycles that's

00:51:48,450 --> 00:51:53,250
the kind of area that's being worked on

00:51:50,310 --> 00:51:54,900
still so there's still performance

00:51:53,250 --> 00:51:56,870
optimizations going and I probably

00:51:54,900 --> 00:52:01,280
continue to go in till the final release

00:51:56,870 --> 00:52:06,450
but there is caching API in Drupal core

00:52:01,280 --> 00:52:08,100
and and mostly yeah so basically that's

00:52:06,450 --> 00:52:09,840
an extensible system as well so you can

00:52:08,100 --> 00:52:12,960
actually case you can call the triple

00:52:09,840 --> 00:52:14,940
cash or and you can replace the casing

00:52:12,960 --> 00:52:18,180
subsystems with different cache pins and

00:52:14,940 --> 00:52:19,470
those kinds of things so you could cut

00:52:18,180 --> 00:52:20,910
it you can do the same sort of thing in

00:52:19,470 --> 00:52:22,500
Drupal 7 but it's just it's

00:52:20,910 --> 00:52:26,220
object-oriented now it's in a cleaner

00:52:22,500 --> 00:52:28,670
way it's it's a nicer way to do it okay

00:52:26,220 --> 00:52:28,670
thank you

00:52:31,080 --> 00:52:36,310
so with the movement away from the hook

00:52:34,870 --> 00:52:39,100
system in a lot of places and

00:52:36,310 --> 00:52:41,710
definitions in llamo files what happens

00:52:39,100 --> 00:52:44,320
to alter hooks although hooks haven't

00:52:41,710 --> 00:52:48,280
gone away they're still there so that's

00:52:44,320 --> 00:52:50,920
still there was some talk about moving

00:52:48,280 --> 00:52:52,180
everything to Symphony events I think

00:52:50,920 --> 00:52:56,590
that was probably just a bridge too far

00:52:52,180 --> 00:52:58,900
in terms of the changes so we're still

00:52:56,590 --> 00:53:01,060
got hooks we've still got older hooks

00:52:58,900 --> 00:53:03,190
they're still in there I think it was

00:53:01,060 --> 00:53:05,650
the kinds of things that that moved away

00:53:03,190 --> 00:53:08,560
from hooks were those kind of metadata

00:53:05,650 --> 00:53:11,290
type hooks so like you know hook block

00:53:08,560 --> 00:53:15,100
info wasn't was just really providing

00:53:11,290 --> 00:53:17,260
some definition of a block but they're

00:53:15,100 --> 00:53:19,710
still hooks still widely used and

00:53:17,260 --> 00:53:23,950
they're still a way that you can extend

00:53:19,710 --> 00:53:30,670
and musical voltar to modify forms and

00:53:23,950 --> 00:53:33,660
those kinds of things you mentioned that

00:53:30,670 --> 00:53:35,830
theme was deprecated the theme function

00:53:33,660 --> 00:53:39,340
but in the render array you still have

00:53:35,830 --> 00:53:42,370
the theme parameter and so you're still

00:53:39,340 --> 00:53:43,900
defining theme underscore item list or

00:53:42,370 --> 00:53:46,510
theme underscore whatever right that

00:53:43,900 --> 00:53:49,960
still is how you create a theme to a

00:53:46,510 --> 00:53:52,000
template sign way templates only so if

00:53:49,960 --> 00:53:53,650
my module wants to provide two or three

00:53:52,000 --> 00:53:56,470
different themes I'm I need to put the

00:53:53,650 --> 00:53:58,420
twit I need to yeah so you would still

00:53:56,470 --> 00:54:01,210
do it the way that you do in Drupal 7 so

00:53:58,420 --> 00:54:04,650
you've got your theme registry right so

00:54:01,210 --> 00:54:08,020
you define what your theme functions are

00:54:04,650 --> 00:54:09,940
the difference is that you and that

00:54:08,020 --> 00:54:12,040
they're called theme books right so you

00:54:09,940 --> 00:54:14,020
basically say these are my theme theme

00:54:12,040 --> 00:54:15,910
hooks that I've got and you specify what

00:54:14,020 --> 00:54:18,160
template each theme hook uses and what

00:54:15,910 --> 00:54:19,600
variables it uses that's it's pretty

00:54:18,160 --> 00:54:22,870
much to sign the differences that used

00:54:19,600 --> 00:54:25,660
to be able to write a function to render

00:54:22,870 --> 00:54:27,130
that that as the theming function you

00:54:25,660 --> 00:54:28,930
can't you can't do that anymore you need

00:54:27,130 --> 00:54:32,110
to have a template so those template

00:54:28,930 --> 00:54:36,150
files then go in the module yeah that's

00:54:32,110 --> 00:54:36,150
part of your module okay great thanks

00:54:37,470 --> 00:54:42,850
I'm not trying to be mean in public so

00:54:40,900 --> 00:54:45,550
this is coming from a good place your

00:54:42,850 --> 00:54:47,620
example for dependency injection your

00:54:45,550 --> 00:54:48,850
database type int should be or your

00:54:47,620 --> 00:54:52,030
connection type in it should be an

00:54:48,850 --> 00:54:53,140
interface right rather than yeah that's

00:54:52,030 --> 00:54:55,000
kind of that your intention there that's

00:54:53,140 --> 00:54:58,960
nicely a class correct correct correct

00:54:55,000 --> 00:55:00,850
correct I misspoke yeah that's fine so

00:54:58,960 --> 00:55:02,700
my real question is do you know as all

00:55:00,850 --> 00:55:04,780
these base classes that are abstract and

00:55:02,700 --> 00:55:06,820
kind of inheritance is a really really

00:55:04,780 --> 00:55:08,740
rubbish model of composition in certain

00:55:06,820 --> 00:55:10,330
circumstances yes is there plans to sort

00:55:08,740 --> 00:55:11,920
of move to using traipse rather than

00:55:10,330 --> 00:55:14,080
yeah actually we're actually using

00:55:11,920 --> 00:55:18,670
traits for a lot of things down that's

00:55:14,080 --> 00:55:20,530
that came fairly light only in the last

00:55:18,670 --> 00:55:22,990
six months if we started moving things

00:55:20,530 --> 00:55:28,690
over to using traits so you might have

00:55:22,990 --> 00:55:31,570
seen at e function the move to this T so

00:55:28,690 --> 00:55:33,400
that moved over that's moved two traits

00:55:31,570 --> 00:55:35,320
now because a lot of the base classes

00:55:33,400 --> 00:55:37,660
are using that so anything that's common

00:55:35,320 --> 00:55:39,820
so anything that's informed base that is

00:55:37,660 --> 00:55:43,680
common is new being moved after traits

00:55:39,820 --> 00:55:43,680
yep good point

00:55:51,940 --> 00:55:54,000

YouTube URL: https://www.youtube.com/watch?v=i4bSPV1Gle4


