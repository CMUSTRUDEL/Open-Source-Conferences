Title: DrupalCon Austin 2014: GO CONTINUOUS DELIVERY: MASTERING AND AUTOMATING COMPLEX DEVOPS
Publication date: 2014-06-04
Playlist: DrupalCon Austin - June 2014
Description: 
	Speakers: rgristrophAugust1914
We will show a complex and intimidating DevOps problem, involving multiple steps of integration, delivery, and even content staging. We will walk through a configuration of the open source Go Continuous Delivery system ( http://www.go.cd/ ) to implement the process in an understandable and managable way.

The audience will see an incredibly complex problem addressed in a series of simple understandable steps, as we walk through a build configuration that deploys Drupal sites using phing, drush, and other tools -- possibility of calling out to Jenkins as another way to manage tasks. We will watch a multistep process with multiple steps of testing and approval, and a separate path for content staging as separate from code, deploy a complex Drupal site.

Continuous Integration and Continuous Delivery will be implemented, producing a build process reliable enough so that the decision to release becomes a business rather than a technical decision.
Captions: 
	00:00:00,000 --> 00:00:08,400
my name is Michael godec and I work with

00:00:03,000 --> 00:00:11,880
thought works and this is I'm robbers

00:00:08,400 --> 00:00:14,580
trough I work with acquia and I we both

00:00:11,880 --> 00:00:19,619
had kind of a lot of we both had a lot

00:00:14,580 --> 00:00:21,930
of experience with various large DevOps

00:00:19,619 --> 00:00:24,330
and continuous deployment and just big

00:00:21,930 --> 00:00:27,510
managing big projects over long periods

00:00:24,330 --> 00:00:32,270
of time I think that leads into they see

00:00:27,510 --> 00:00:35,460
what what we're talking about here so

00:00:32,270 --> 00:00:37,890
they're the session slides are currently

00:00:35,460 --> 00:00:40,710
available so if you directly if you'd

00:00:37,890 --> 00:00:45,300
like to follow the slides on your laptop

00:00:40,710 --> 00:00:46,680
or on an iPad then if you click through

00:00:45,300 --> 00:00:47,760
to that link great and we're not going

00:00:46,680 --> 00:00:49,590
to click through to that link you're

00:00:47,760 --> 00:00:53,910
going to copy that link right through

00:00:49,590 --> 00:00:58,820
your fingers thoughtworks calm /

00:00:53,910 --> 00:01:01,109
insights / blog / drupalcon Austin and

00:00:58,820 --> 00:01:03,000
from there there's a link to these same

00:01:01,109 --> 00:01:04,920
slides you can download those in year

00:01:03,000 --> 00:01:08,189
they're available to you here also on

00:01:04,920 --> 00:01:12,330
that same session notes slide there's

00:01:08,189 --> 00:01:15,299
there's a whole series of of links

00:01:12,330 --> 00:01:17,909
that's in that that are all background

00:01:15,299 --> 00:01:19,950
material to this discussion all kinds of

00:01:17,909 --> 00:01:21,810
stuff that we would really love to talk

00:01:19,950 --> 00:01:24,509
about but there's only that there's not

00:01:21,810 --> 00:01:25,799
that much time really here so a lot of

00:01:24,509 --> 00:01:27,960
the stuff that we would want to talk

00:01:25,799 --> 00:01:32,820
about that we can't is on there and that

00:01:27,960 --> 00:01:34,049
includes the the history of the go

00:01:32,820 --> 00:01:37,979
project that we're going to be talking

00:01:34,049 --> 00:01:40,290
about and go it go is not go language

00:01:37,979 --> 00:01:42,360
Google's language go that's not what

00:01:40,290 --> 00:01:44,579
we're talking about here go language is

00:01:42,360 --> 00:01:47,700
awesome it's really very interesting but

00:01:44,579 --> 00:01:51,810
it's not our topic here go is a is a

00:01:47,700 --> 00:01:53,670
software build delivery tool that's been

00:01:51,810 --> 00:01:55,950
around for a very long time it's got a

00:01:53,670 --> 00:01:57,479
great hit again the history of it is on

00:01:55,950 --> 00:02:00,530
that slide so I'd encourage you to go

00:01:57,479 --> 00:02:02,640
through and read that there's a link on

00:02:00,530 --> 00:02:04,320
making the case for continuous

00:02:02,640 --> 00:02:07,140
integration what that's about Martin

00:02:04,320 --> 00:02:10,860
Fowler's post back from the boy back

00:02:07,140 --> 00:02:13,460
when the case for continuous delivery is

00:02:10,860 --> 00:02:17,120
an extension of continuous integration

00:02:13,460 --> 00:02:19,340
and other posts and related topics so

00:02:17,120 --> 00:02:22,100
really it would give reading for the

00:02:19,340 --> 00:02:26,840
days and weeks to come to fill out the

00:02:22,100 --> 00:02:30,050
context of this larger discussion of how

00:02:26,840 --> 00:02:32,000
we reliably deliver software from the

00:02:30,050 --> 00:02:34,730
point of the conception of an idea of a

00:02:32,000 --> 00:02:37,370
requirement to its delivery to

00:02:34,730 --> 00:02:40,580
successful delivery and timely delivery

00:02:37,370 --> 00:02:46,610
through to production so that's the

00:02:40,580 --> 00:02:55,610
background get into the session notes so

00:02:46,610 --> 00:02:59,150
here we are we like watch time all right

00:02:55,610 --> 00:03:02,090
so welcome again the official launch of

00:02:59,150 --> 00:03:09,440
the session right here you know who we

00:03:02,090 --> 00:03:11,150
are at this point so all right so this

00:03:09,440 --> 00:03:13,760
session is about build automation tools

00:03:11,150 --> 00:03:16,550
but in order really to understand these

00:03:13,760 --> 00:03:19,760
tools we need to talk about why we use

00:03:16,550 --> 00:03:22,150
them build automation is a component of

00:03:19,760 --> 00:03:26,210
a practice called continuous delivery or

00:03:22,150 --> 00:03:29,810
CD so we need to have some context of

00:03:26,210 --> 00:03:32,600
what CD is and why we use it continuous

00:03:29,810 --> 00:03:35,510
integration would just be a subset of CD

00:03:32,600 --> 00:03:39,110
right see the continuous integration

00:03:35,510 --> 00:03:43,040
requires CI but it's it involves a lot

00:03:39,110 --> 00:03:46,070
more than just then what CI does in the

00:03:43,040 --> 00:03:47,930
introduction of des humbles book right

00:03:46,070 --> 00:03:49,880
here which is the most awesome book on

00:03:47,930 --> 00:03:52,550
continuous delivery and we actually have

00:03:49,880 --> 00:03:55,040
two copies of this book to give away to

00:03:52,550 --> 00:03:57,620
whoever's got the coolest tweets that

00:03:55,040 --> 00:04:02,510
come out of this and the tweet handles

00:03:57,620 --> 00:04:03,890
go CD hashtag is go CD and we got two

00:04:02,510 --> 00:04:09,620
copies of this book and we've got a copy

00:04:03,890 --> 00:04:12,920
also the thought works anthology with

00:04:09,620 --> 00:04:15,590
once on software development so get some

00:04:12,920 --> 00:04:19,100
tweets up so in the beginning of this

00:04:15,590 --> 00:04:21,350
book just humble rights he refers us to

00:04:19,100 --> 00:04:23,300
this industrial consultant Edward Deming

00:04:21,350 --> 00:04:25,090
whose work in the 1970s explaining the

00:04:23,300 --> 00:04:27,460
Japanese method to American

00:04:25,090 --> 00:04:29,770
managers revolutionized thinking about

00:04:27,460 --> 00:04:33,070
the manufacturing process and so JS

00:04:29,770 --> 00:04:36,250
writes that Demmings work in the 1980s

00:04:33,070 --> 00:04:39,669
70s and 80s is the foundation of what CD

00:04:36,250 --> 00:04:41,080
practice in software is today so what

00:04:39,669 --> 00:04:44,169
better place to start than the opening

00:04:41,080 --> 00:04:46,360
paragraphs of deming's 1985 book back in

00:04:44,169 --> 00:04:48,790
the reagan administration right before

00:04:46,360 --> 00:04:50,650
our whole era of software he wrote a

00:04:48,790 --> 00:04:54,340
book called quality and competitive

00:04:50,650 --> 00:04:56,050
position because it sets really exactly

00:04:54,340 --> 00:05:00,280
the right context to understand why we

00:04:56,050 --> 00:05:05,620
value software build pipelines so here's

00:05:00,280 --> 00:05:07,060
Deming so I'm going to I'm reading a

00:05:05,620 --> 00:05:09,010
couple of paragraphs from this if you

00:05:07,060 --> 00:05:10,900
don't recognize the name Edward imming

00:05:09,010 --> 00:05:15,580
some point you should at least check out

00:05:10,900 --> 00:05:17,110
the Wikipedia page on it the aim of this

00:05:15,580 --> 00:05:19,389
book is to illustrate with simple

00:05:17,110 --> 00:05:22,600
examples that productivity increases

00:05:19,389 --> 00:05:25,060
with improvement of quality low quality

00:05:22,600 --> 00:05:27,880
means high costs and loss of competitive

00:05:25,060 --> 00:05:29,650
position some folklore folklore has it

00:05:27,880 --> 00:05:31,810
that in America quality and production

00:05:29,650 --> 00:05:34,389
are incompatible that you can't have

00:05:31,810 --> 00:05:36,669
both a plant manager will usually tell

00:05:34,389 --> 00:05:39,039
it that it is either are in his

00:05:36,669 --> 00:05:41,200
experience if he pushes quality he falls

00:05:39,039 --> 00:05:44,169
behind in production if he pushes

00:05:41,200 --> 00:05:46,120
production quality suffers this will be

00:05:44,169 --> 00:05:48,550
his experience when he knows not what

00:05:46,120 --> 00:05:51,340
quality actually is or how to achieve it

00:05:48,550 --> 00:05:53,349
a clear concise answer came forth in a

00:05:51,340 --> 00:05:56,349
meeting with 22 production workers in

00:05:53,349 --> 00:05:58,750
response to my question why is it that

00:05:56,349 --> 00:06:03,340
productivity increases as quality

00:05:58,750 --> 00:06:05,500
improves less rework there's no better

00:06:03,340 --> 00:06:07,930
answer these people know how important

00:06:05,500 --> 00:06:09,729
quality is to their jobs they know that

00:06:07,930 --> 00:06:11,500
quality is achieved by improvement of

00:06:09,729 --> 00:06:13,210
the process improvement of the process

00:06:11,500 --> 00:06:15,760
increases uniformity of the output of

00:06:13,210 --> 00:06:18,510
product reduces reworking mistakes

00:06:15,760 --> 00:06:21,430
reduces waste of manpower machine time

00:06:18,510 --> 00:06:23,710
materials and thus increases output with

00:06:21,430 --> 00:06:25,419
less effort other benefits of improved

00:06:23,710 --> 00:06:27,550
quality or lower costs better

00:06:25,419 --> 00:06:29,950
competitive position happier people on

00:06:27,550 --> 00:06:32,080
the job more jobs to better competitive

00:06:29,950 --> 00:06:33,520
position of the company these are some

00:06:32,080 --> 00:06:35,830
of the lessons that management must

00:06:33,520 --> 00:06:38,020
learn and act on reduction of waste

00:06:35,830 --> 00:06:38,360
transfers man-hours and machine hours

00:06:38,020 --> 00:06:40,129
the

00:06:38,360 --> 00:06:42,050
manufacturer of defectives into the

00:06:40,129 --> 00:06:45,259
manufacturers of additional good product

00:06:42,050 --> 00:06:48,080
in fact the capacity of the production

00:06:45,259 --> 00:06:49,280
line is increased the benefits of better

00:06:48,080 --> 00:06:52,129
quality through improvement of the

00:06:49,280 --> 00:06:54,590
processor thus not just better quality

00:06:52,129 --> 00:06:56,360
and the long-range improvement of market

00:06:54,590 --> 00:06:58,280
position that goes along with it but

00:06:56,360 --> 00:07:00,490
better productivity a much better profit

00:06:58,280 --> 00:07:03,379
as well improved morale of the workforce

00:07:00,490 --> 00:07:05,180
they now see management is making some

00:07:03,379 --> 00:07:11,449
effort themselves and not blaming all

00:07:05,180 --> 00:07:14,569
faults on the production workers all

00:07:11,449 --> 00:07:17,569
right so what you're trying to achieve

00:07:14,569 --> 00:07:20,139
in your use of build automation tools is

00:07:17,569 --> 00:07:23,599
to have your team spend less time on

00:07:20,139 --> 00:07:26,560
rework leaving more time available for

00:07:23,599 --> 00:07:29,270
client work I think that's pretty clear

00:07:26,560 --> 00:07:32,270
there are other goals and measures for

00:07:29,270 --> 00:07:33,469
example in continuous delivery one of

00:07:32,270 --> 00:07:37,550
the things one of the measures you're

00:07:33,469 --> 00:07:40,159
trying to get to is making the decision

00:07:37,550 --> 00:07:44,300
to release a business decision rather

00:07:40,159 --> 00:07:46,849
than a technical one in other words when

00:07:44,300 --> 00:07:48,349
you have a release candidate that plays

00:07:46,849 --> 00:07:50,599
the stories that a client wants to see

00:07:48,349 --> 00:07:52,190
go live then at that point you really

00:07:50,599 --> 00:07:55,849
shouldn't be having to go back to devs

00:07:52,190 --> 00:07:57,740
to say is this really ready right and

00:07:55,849 --> 00:08:00,440
you shouldn't really have to engage the

00:07:57,740 --> 00:08:02,240
devs time or much of it in order to

00:08:00,440 --> 00:08:04,250
release that at that point because at

00:08:02,240 --> 00:08:08,180
that point it should be ready to release

00:08:04,250 --> 00:08:11,180
and it should be releasable ideally with

00:08:08,180 --> 00:08:12,680
just a click of a button with no

00:08:11,180 --> 00:08:15,529
interaction whatsoever with the

00:08:12,680 --> 00:08:18,169
production system it's fully automated

00:08:15,529 --> 00:08:22,039
and with a rollback plan that's it's

00:08:18,169 --> 00:08:24,949
similarly simple right we have it easy

00:08:22,039 --> 00:08:28,779
safe rollback options these are

00:08:24,949 --> 00:08:32,650
fundamental concepts of the of

00:08:28,779 --> 00:08:32,650
objectives of continuous delivery

00:08:35,600 --> 00:08:40,800
you know in this sense all of the effort

00:08:38,490 --> 00:08:42,900
of build automation is like a musician's

00:08:40,800 --> 00:08:45,150
rehearsal in that way when it comes time

00:08:42,900 --> 00:08:47,430
to walk out on the stage all your

00:08:45,150 --> 00:08:53,940
technical issues really should be

00:08:47,430 --> 00:08:57,380
resolved at that point so the rest of

00:08:53,940 --> 00:09:00,810
the session is focused on dev stuff and

00:08:57,380 --> 00:09:02,220
so we're going to drill down into code

00:09:00,810 --> 00:09:05,220
and config we're going to do concepts

00:09:02,220 --> 00:09:07,020
code in configuration and hopefully

00:09:05,220 --> 00:09:08,850
leave you at what being able to walk out

00:09:07,020 --> 00:09:11,580
of here with it that with the idea that

00:09:08,850 --> 00:09:14,670
you actually can implement this stuff

00:09:11,580 --> 00:09:18,870
it's like high sounding but it's

00:09:14,670 --> 00:09:20,580
actually possible to work into it but we

00:09:18,870 --> 00:09:22,080
want to make sure you don't lose the

00:09:20,580 --> 00:09:24,180
bigger picture and the ultimate measure

00:09:22,080 --> 00:09:26,280
that the reason that you're doing this

00:09:24,180 --> 00:09:28,980
stuff is to get to where you can have

00:09:26,280 --> 00:09:30,690
more frequent deliveries successful

00:09:28,980 --> 00:09:32,010
deliveries with less rework and so

00:09:30,690 --> 00:09:35,160
that's a measure that you want to keep

00:09:32,010 --> 00:09:37,800
putting out in front of yourself to try

00:09:35,160 --> 00:09:39,470
to evaluate whether the kind of effort

00:09:37,800 --> 00:09:45,300
you're putting into build automation or

00:09:39,470 --> 00:09:46,860
yielding those kind of results so DevOps

00:09:45,300 --> 00:09:48,930
are the foundation of all of this that's

00:09:46,860 --> 00:09:53,430
kind of underground so let's start with

00:09:48,930 --> 00:09:56,940
that so I'm going to run through a few

00:09:53,430 --> 00:09:59,550
slides that are going to kind of review

00:09:56,940 --> 00:10:01,980
the basics of what of what we call

00:09:59,550 --> 00:10:03,840
DevOps the name comes from you know

00:10:01,980 --> 00:10:06,900
portmanteau of development operations

00:10:03,840 --> 00:10:10,530
which and traditionally were sort of two

00:10:06,900 --> 00:10:14,250
siloed departments an idea that they

00:10:10,530 --> 00:10:15,540
have to work together and i'm sure most

00:10:14,250 --> 00:10:19,470
of you familiar it is kind of a buzz

00:10:15,540 --> 00:10:21,980
word / movement that has kind of grown

00:10:19,470 --> 00:10:24,000
over the last five years or so but

00:10:21,980 --> 00:10:26,430
beneath the height there are some like

00:10:24,000 --> 00:10:28,830
good general principles and i think as

00:10:26,430 --> 00:10:30,420
we read through them they they also echo

00:10:28,830 --> 00:10:34,050
all the way back to to dimming

00:10:30,420 --> 00:10:37,680
principles so one of these principles is

00:10:34,050 --> 00:10:40,710
configuration is code and the idea was

00:10:37,680 --> 00:10:43,620
we figured out how to track changes in

00:10:40,710 --> 00:10:45,510
amazingly complex systems in software

00:10:43,620 --> 00:10:46,560
this is a very use of version control

00:10:45,510 --> 00:10:48,750
and

00:10:46,560 --> 00:10:51,720
and testing and and other things so if

00:10:48,750 --> 00:10:53,610
we can express all other whatever else

00:10:51,720 --> 00:10:55,710
we can express as code we may be able to

00:10:53,610 --> 00:10:58,230
apply those same principles to so if we

00:10:55,710 --> 00:11:00,300
can express our infrastructure and

00:10:58,230 --> 00:11:03,029
server configuration and cluster

00:11:00,300 --> 00:11:04,620
configuration and so on as code then we

00:11:03,029 --> 00:11:06,630
can put them in version control then we

00:11:04,620 --> 00:11:11,190
can write tests against new

00:11:06,630 --> 00:11:14,640
configurations and and so on another

00:11:11,190 --> 00:11:18,240
general principle is automation but not

00:11:14,640 --> 00:11:20,490
automation just to save jobs or not

00:11:18,240 --> 00:11:23,130
automation to save small repeatable

00:11:20,490 --> 00:11:25,560
amounts of time you might spend a week

00:11:23,130 --> 00:11:27,450
automating something that you do once a

00:11:25,560 --> 00:11:29,730
week for a couple of years and maybe it

00:11:27,450 --> 00:11:31,589
only saves you five minutes each time

00:11:29,730 --> 00:11:33,540
you do it and if you add that up it

00:11:31,589 --> 00:11:35,760
doesn't really look like it's paying you

00:11:33,540 --> 00:11:37,410
off and save time the reason why is the

00:11:35,760 --> 00:11:39,570
five minutes each time you do it and it

00:11:37,410 --> 00:11:41,550
works that's not the time you're trying

00:11:39,570 --> 00:11:43,980
to save the time you're trying to save

00:11:41,550 --> 00:11:47,070
is from the one time that you didn't do

00:11:43,980 --> 00:11:49,410
it exactly like everything else and the

00:11:47,070 --> 00:11:50,790
hours or days that it took you to figure

00:11:49,410 --> 00:11:54,450
out that that was the source of the

00:11:50,790 --> 00:11:57,930
problem and fix it so automation is

00:11:54,450 --> 00:12:00,800
about exactly reproducing things not

00:11:57,930 --> 00:12:04,170
necessarily just speeding them up

00:12:00,800 --> 00:12:07,650
another general principle is is to put

00:12:04,170 --> 00:12:10,560
metrics on anything you can and usually

00:12:07,650 --> 00:12:12,510
in the world of DevOps and continuous

00:12:10,560 --> 00:12:16,050
integration this means things like

00:12:12,510 --> 00:12:19,200
logging new relic metrics and so on and

00:12:16,050 --> 00:12:23,970
furthermore it doesn't make much sense

00:12:19,200 --> 00:12:26,130
to keep this information as silo most of

00:12:23,970 --> 00:12:28,220
the use of this comes from pushing this

00:12:26,130 --> 00:12:32,550
throughout your dev organization so that

00:12:28,220 --> 00:12:35,400
as as far back in the changes you can go

00:12:32,550 --> 00:12:36,780
to subcontractor does if you pasta if

00:12:35,400 --> 00:12:38,550
possible you want them to be able to see

00:12:36,780 --> 00:12:41,220
your historical performance graphs for

00:12:38,550 --> 00:12:43,980
instance and know whether your your

00:12:41,220 --> 00:12:51,990
project is is overall getting a slower

00:12:43,980 --> 00:12:54,240
or faster and and so that's those that

00:12:51,990 --> 00:12:56,490
DevOps slice continuous integration

00:12:54,240 --> 00:13:00,089
thing the idea of continuous delivery is

00:12:56,490 --> 00:13:02,790
can we can we apply that to

00:13:00,089 --> 00:13:05,309
two more like just as we took the idea

00:13:02,790 --> 00:13:06,949
of configuration as code and then we're

00:13:05,309 --> 00:13:10,620
able to apply these principles to it

00:13:06,949 --> 00:13:12,769
what if we we go we go further and

00:13:10,620 --> 00:13:15,240
higher up in the business so that and

00:13:12,769 --> 00:13:17,279
instead of say software unit tests

00:13:15,240 --> 00:13:19,230
failing and the general principle being

00:13:17,279 --> 00:13:21,029
that the committer sees that as quickly

00:13:19,230 --> 00:13:23,670
as possible I can fix it as quickly as

00:13:21,029 --> 00:13:26,360
possible what if we push that also up to

00:13:23,670 --> 00:13:29,189
say business requirements so that

00:13:26,360 --> 00:13:32,339
project managers and client interfacing

00:13:29,189 --> 00:13:34,649
people are also seeing the results of

00:13:32,339 --> 00:13:36,749
some sort of test you know quickly and

00:13:34,649 --> 00:13:43,170
reacting to them and have a process

00:13:36,749 --> 00:13:46,800
around that and I think that that leads

00:13:43,170 --> 00:13:57,180
into what sort of goals of what go is is

00:13:46,800 --> 00:13:59,490
trying to achieve cool so the the agile

00:13:57,180 --> 00:14:01,439
manifesto was that's what but twelve

00:13:59,490 --> 00:14:04,980
years back something like that or longer

00:14:01,439 --> 00:14:06,449
the very first print the very first

00:14:04,980 --> 00:14:09,959
principle that stated in the agile

00:14:06,449 --> 00:14:11,879
manifesto is this our highest priority

00:14:09,959 --> 00:14:14,040
is dissatisfied the customer through

00:14:11,879 --> 00:14:17,040
early and continuous delivery of

00:14:14,040 --> 00:14:18,629
valuable software and some of the people

00:14:17,040 --> 00:14:21,149
that were they actually penned that

00:14:18,629 --> 00:14:22,709
thing on the board martin fowler was the

00:14:21,149 --> 00:14:27,329
one that supposedly wrote that up on the

00:14:22,709 --> 00:14:30,779
whiteboard at the time were engaged in

00:14:27,329 --> 00:14:35,329
they took that principle and they said

00:14:30,779 --> 00:14:35,329
okay now we need to build some tools to

00:14:35,509 --> 00:14:42,800
implement this principle in practice and

00:14:38,389 --> 00:14:45,240
so starting back in 99 2000 before

00:14:42,800 --> 00:14:47,790
Jenkins arose hudson and before Hudson

00:14:45,240 --> 00:14:50,819
there was this project called cruise

00:14:47,790 --> 00:14:54,059
control which was really the first build

00:14:50,819 --> 00:14:57,089
automation tool in our modern history

00:14:54,059 --> 00:15:01,410
and it was an open source project that

00:14:57,089 --> 00:15:05,579
was run by thought works and Hudson came

00:15:01,410 --> 00:15:08,879
along than Hudson fork to Jenkins around

00:15:05,579 --> 00:15:11,939
somewhere in there I thought works took

00:15:08,879 --> 00:15:12,920
go to become a enterprise product where

00:15:11,939 --> 00:15:16,670
they were looking for a

00:15:12,920 --> 00:15:17,839
to fund the development so it became

00:15:16,670 --> 00:15:20,329
licensed product and it's been a

00:15:17,839 --> 00:15:23,060
licensed products for the last eight

00:15:20,329 --> 00:15:25,519
years or so and it was just open sourced

00:15:23,060 --> 00:15:27,200
this spring right now it's an open

00:15:25,519 --> 00:15:29,060
source project again in this way it's

00:15:27,200 --> 00:15:31,040
back in the fold but it's a code base

00:15:29,060 --> 00:15:33,170
that's been under active development for

00:15:31,040 --> 00:15:35,269
over 15 years and it's a really really

00:15:33,170 --> 00:15:40,940
cool enterprise tool and now it's just

00:15:35,269 --> 00:15:44,180
on deck for you right there there go

00:15:40,940 --> 00:15:47,510
consists of like Jenkins it consists of

00:15:44,180 --> 00:15:50,209
a server managing many agents you'll

00:15:47,510 --> 00:15:53,329
typically install agents on development

00:15:50,209 --> 00:15:56,839
VMs and they're the agents are doing the

00:15:53,329 --> 00:15:58,519
real work go server is the your

00:15:56,839 --> 00:16:00,290
interface to the agents where you

00:15:58,519 --> 00:16:02,899
configure and monitor your build

00:16:00,290 --> 00:16:05,800
pipelines and so go has a number of

00:16:02,899 --> 00:16:08,540
important features baked in such as

00:16:05,800 --> 00:16:10,970
support for trusted artifacts we'll talk

00:16:08,540 --> 00:16:15,920
about what that means built-in fan and

00:16:10,970 --> 00:16:17,779
support for dependency management and

00:16:15,920 --> 00:16:19,850
these are things that maybe you could

00:16:17,779 --> 00:16:21,199
accomplish in Jenkins but you'd have to

00:16:19,850 --> 00:16:22,670
do it with a lot of plugins and glue

00:16:21,199 --> 00:16:24,440
code and stuff like that a lot of this

00:16:22,670 --> 00:16:26,750
stuff is baked right in to go right out

00:16:24,440 --> 00:16:28,850
of the box this part go also has a

00:16:26,750 --> 00:16:30,589
plug-in architecture but there's a lot

00:16:28,850 --> 00:16:33,769
of features that are built right in with

00:16:30,589 --> 00:16:37,370
go you can deploy any version at any

00:16:33,769 --> 00:16:38,810
time it's interesting concept go really

00:16:37,370 --> 00:16:41,570
stands out when you get into modeling

00:16:38,810 --> 00:16:45,370
conflicts complex workflows and managing

00:16:41,570 --> 00:16:45,370
dependencies between software builds

00:16:45,910 --> 00:16:52,070
then you the whole idea is to surface

00:16:49,640 --> 00:16:55,040
your surface problems and breaks as

00:16:52,070 --> 00:16:56,390
close to the commits as you possibly can

00:16:55,040 --> 00:16:58,610
and do it all the way through the

00:16:56,390 --> 00:17:00,079
pipeline not just with devs but with qas

00:16:58,610 --> 00:17:03,769
and business analysts all the way

00:17:00,079 --> 00:17:06,850
through to production release go has it

00:17:03,769 --> 00:17:09,350
has a very nice and end visualization

00:17:06,850 --> 00:17:13,030
auditing features implementing a lot of

00:17:09,350 --> 00:17:16,490
the metrics that Robert was speaking of

00:17:13,030 --> 00:17:18,919
such as doing a build compare where you

00:17:16,490 --> 00:17:21,709
can diff both commit messages and actual

00:17:18,919 --> 00:17:23,360
files between two arbitrary builds so

00:17:21,709 --> 00:17:25,380
you can get to the bottom of war problem

00:17:23,360 --> 00:17:29,100
is pretty quickly

00:17:25,380 --> 00:17:31,380
and go has more fine-grained permissions

00:17:29,100 --> 00:17:33,840
model than Jenkins with a per user group

00:17:31,380 --> 00:17:35,970
and / pipeline authorization one

00:17:33,840 --> 00:17:38,760
distinction is that Jenkins has this

00:17:35,970 --> 00:17:40,560
master only mode that may be many people

00:17:38,760 --> 00:17:42,300
especially starting out use where you

00:17:40,560 --> 00:17:44,670
don't use agents everything's done in

00:17:42,300 --> 00:17:47,280
the server go doesn't have that kind of

00:17:44,670 --> 00:17:48,900
model that you always have agents that

00:17:47,280 --> 00:17:52,040
are actually doing work and go server

00:17:48,900 --> 00:17:55,710
that's driving all that kind of work so

00:17:52,040 --> 00:17:57,900
conceptually that's where it is let's

00:17:55,710 --> 00:17:59,850
what we're going to do right now we're

00:17:57,900 --> 00:18:02,400
just going to drill right down now

00:17:59,850 --> 00:18:05,370
actually into how you what what a

00:18:02,400 --> 00:18:07,350
pipeline is conceptually step by step

00:18:05,370 --> 00:18:08,520
and how you implement it and that's what

00:18:07,350 --> 00:18:10,350
I want you to be able to walk away from

00:18:08,520 --> 00:18:13,020
here is the is to say that you

00:18:10,350 --> 00:18:17,040
understand at least how this stuff fits

00:18:13,020 --> 00:18:19,560
together and it's not that hard to do so

00:18:17,040 --> 00:18:21,660
there's six key concepts that we're

00:18:19,560 --> 00:18:25,380
going to go through in the next 15-20

00:18:21,660 --> 00:18:27,660
minutes what are building materials and

00:18:25,380 --> 00:18:30,510
how you declare them how to set up build

00:18:27,660 --> 00:18:33,450
stages how to set up jobs for each build

00:18:30,510 --> 00:18:36,530
stage how to match up your agents with

00:18:33,450 --> 00:18:40,140
your jobs how to configure tasks and

00:18:36,530 --> 00:18:43,380
what build artifacts are and how you use

00:18:40,140 --> 00:18:46,080
them trusted artifacts so with these six

00:18:43,380 --> 00:18:48,420
concepts you can build a go pipeline you

00:18:46,080 --> 00:18:51,720
can go to add to the the open source

00:18:48,420 --> 00:18:53,880
site Godot CD download the server or

00:18:51,720 --> 00:19:00,480
download the clients install the agents

00:18:53,880 --> 00:19:02,490
and start configuring your server some

00:19:00,480 --> 00:19:04,560
of the goals that we have in our build

00:19:02,490 --> 00:19:07,470
process that are not like go specific

00:19:04,560 --> 00:19:11,160
but things that we're looking for in in

00:19:07,470 --> 00:19:13,970
CD practice is we want to be able to

00:19:11,160 --> 00:19:17,820
build our software out on production and

00:19:13,970 --> 00:19:21,150
preview it completely built on the

00:19:17,820 --> 00:19:22,740
server before and be able to preview it

00:19:21,150 --> 00:19:25,200
before we release it to cut it over

00:19:22,740 --> 00:19:27,180
right so we don't find out about

00:19:25,200 --> 00:19:30,150
problems afterwards in the end we want

00:19:27,180 --> 00:19:32,910
to have 0 town downtown releases and we

00:19:30,150 --> 00:19:34,800
want to have really simple rollbacks so

00:19:32,910 --> 00:19:36,450
whether you can achieve all of those in

00:19:34,800 --> 00:19:38,370
your scenario it depends on what you're

00:19:36,450 --> 00:19:38,850
actually trying to do but those are some

00:19:38,370 --> 00:19:42,540
of the goals

00:19:38,850 --> 00:19:47,190
or trying to achieve in improving our

00:19:42,540 --> 00:19:51,510
deployment process so yeah out of this

00:19:47,190 --> 00:19:54,050
this the set of principles the build

00:19:51,510 --> 00:19:56,880
materials build stages setting up jobs

00:19:54,050 --> 00:19:58,800
figuring out agents configuring tasks

00:19:56,880 --> 00:20:01,200
and this thing of these trusted

00:19:58,800 --> 00:20:02,640
artifacts right this is one of the key

00:20:01,200 --> 00:20:04,860
takeaways that we want to leave you with

00:20:02,640 --> 00:20:07,260
is this is that conceptually understand

00:20:04,860 --> 00:20:09,330
the difference between a build material

00:20:07,260 --> 00:20:11,520
and build artifact because they can be

00:20:09,330 --> 00:20:14,360
kind of similar things but they serve a

00:20:11,520 --> 00:20:16,350
really different purpose right and so

00:20:14,360 --> 00:20:18,420
build material is what you're pushing

00:20:16,350 --> 00:20:20,070
into the build process and an artifact

00:20:18,420 --> 00:20:21,360
is something that's coming out and so

00:20:20,070 --> 00:20:27,180
we'll cover that over a couple different

00:20:21,360 --> 00:20:28,560
angles as we go through the the first

00:20:27,180 --> 00:20:29,880
thing that you're going to do when you

00:20:28,560 --> 00:20:32,280
set up a build pipeline you get a

00:20:29,880 --> 00:20:34,620
download ghost server and you start a

00:20:32,280 --> 00:20:35,640
pipeline and the first thing you're

00:20:34,620 --> 00:20:38,010
going to do is you're going to tell the

00:20:35,640 --> 00:20:39,150
pipeline what your source code is what

00:20:38,010 --> 00:20:42,780
are the building materials that are

00:20:39,150 --> 00:20:45,510
going into this and so here's a build

00:20:42,780 --> 00:20:47,490
material screen from go server in which

00:20:45,510 --> 00:20:49,880
you just in this case we're using get

00:20:47,490 --> 00:20:53,670
its supports SBN a number of different

00:20:49,880 --> 00:20:55,170
version version control systems and so

00:20:53,670 --> 00:20:57,540
here you're just going to declare your

00:20:55,170 --> 00:20:59,970
your your build materials your source

00:20:57,540 --> 00:21:02,040
materials so that go knows about it and

00:20:59,970 --> 00:21:05,310
go will take care of a lot of the

00:21:02,040 --> 00:21:07,350
management of polling these resources

00:21:05,310 --> 00:21:09,930
for changes taking off builds when the

00:21:07,350 --> 00:21:13,380
resources change getting the right

00:21:09,930 --> 00:21:15,090
version branch getting right branch it's

00:21:13,380 --> 00:21:17,160
pretty straightforward but it's a

00:21:15,090 --> 00:21:18,450
fundamental concept to start with to say

00:21:17,160 --> 00:21:22,380
this is this these are the materials

00:21:18,450 --> 00:21:25,020
that are going into your pipeline the

00:21:22,380 --> 00:21:28,230
most fundamental build pipeline screen

00:21:25,020 --> 00:21:31,950
and go is your this is your pipeline

00:21:28,230 --> 00:21:33,360
general options right and and in that

00:21:31,950 --> 00:21:35,640
there's not a lot of attributes right

00:21:33,360 --> 00:21:37,530
here the key one is this checkbox that

00:21:35,640 --> 00:21:39,770
it's automatic pipeline scheduling and

00:21:37,530 --> 00:21:42,510
so once you've got build materials

00:21:39,770 --> 00:21:45,180
declared and you check off this checkbox

00:21:42,510 --> 00:21:46,410
in your pipeline now you now whenever a

00:21:45,180 --> 00:21:49,290
commit is pushed to one of those

00:21:46,410 --> 00:21:50,760
materials you'll automatically get your

00:21:49,290 --> 00:21:52,169
your pipeline will kick off

00:21:50,760 --> 00:21:54,869
automatically from there

00:21:52,169 --> 00:21:56,480
right so that's the first step for in

00:21:54,869 --> 00:21:59,100
the context of you're looking at even

00:21:56,480 --> 00:22:01,499
continuous integration where you want to

00:21:59,100 --> 00:22:03,659
see a build kick off as a result of a

00:22:01,499 --> 00:22:10,109
commit to code this is all you have to

00:22:03,659 --> 00:22:12,359
do to get it going so we all have the

00:22:10,109 --> 00:22:15,029
concept of these build stages right

00:22:12,359 --> 00:22:17,369
we're using the commit stage commit

00:22:15,029 --> 00:22:19,289
stage QA stage showcase stage production

00:22:17,369 --> 00:22:20,789
stage maybe you have other stages maybe

00:22:19,289 --> 00:22:22,830
you want to have a release candidate

00:22:20,789 --> 00:22:25,049
after showcase before production

00:22:22,830 --> 00:22:27,659
whatever works maybe you call the commit

00:22:25,049 --> 00:22:29,820
stage the dev stage but you generally

00:22:27,659 --> 00:22:33,169
most of us were moving software through

00:22:29,820 --> 00:22:36,840
these different stages in order to

00:22:33,169 --> 00:22:38,309
isolate the builds a different level so

00:22:36,840 --> 00:22:39,629
people can look at them evaluate them

00:22:38,309 --> 00:22:48,509
and decide whether they really want to

00:22:39,629 --> 00:22:50,340
go forward into production so really one

00:22:48,509 --> 00:22:54,450
of the biggest obstacles we had in

00:22:50,340 --> 00:22:57,299
before we did our build pipelines was we

00:22:54,450 --> 00:23:00,269
had this anti pattern of all of these

00:22:57,299 --> 00:23:02,159
discussions between devs and qas and qas

00:23:00,269 --> 00:23:05,369
and the dbas and the product owners

00:23:02,159 --> 00:23:07,649
about actually what was on the QA server

00:23:05,369 --> 00:23:09,509
at this point right so we'd have to like

00:23:07,649 --> 00:23:12,269
have these conference calls and we'd say

00:23:09,509 --> 00:23:14,190
well QA we just put the features in from

00:23:12,269 --> 00:23:16,619
that story that we were doing it's on QA

00:23:14,190 --> 00:23:19,080
now but it doesn't have this other there

00:23:16,619 --> 00:23:20,609
was these inconsistencies in what it was

00:23:19,080 --> 00:23:22,799
and we ended up having to talk about

00:23:20,609 --> 00:23:25,440
that a lot there was a lot of discussion

00:23:22,799 --> 00:23:27,840
around it after we got our pipeline in

00:23:25,440 --> 00:23:31,379
all that kind of noise level just really

00:23:27,840 --> 00:23:33,659
dropped down to where now it's just like

00:23:31,379 --> 00:23:35,820
really we just post an email out to the

00:23:33,659 --> 00:23:38,039
group to say you know this is what's on

00:23:35,820 --> 00:23:40,109
QA right now and there's a really really

00:23:38,039 --> 00:23:42,809
high level of confidence about everybody

00:23:40,109 --> 00:23:44,580
knowing that that testers are testing

00:23:42,809 --> 00:23:46,799
what they think they're testing and

00:23:44,580 --> 00:23:48,749
testers are not testing stuff that the

00:23:46,799 --> 00:23:50,730
devs already know is broken that we were

00:23:48,749 --> 00:23:52,590
doing that a lot before right where the

00:23:50,730 --> 00:23:54,570
tester time was being wasted because

00:23:52,590 --> 00:23:56,549
they're testing stuff and I would say

00:23:54,570 --> 00:23:58,139
yeah we know about that and it said we

00:23:56,549 --> 00:23:59,820
got it's in the next ferry all right

00:23:58,139 --> 00:24:03,359
that's the kind of stuff you're trying

00:23:59,820 --> 00:24:05,190
to like dry out out of your build so it

00:24:03,359 --> 00:24:07,860
brought us some stability

00:24:05,190 --> 00:24:10,710
that's a concept of build stages here's

00:24:07,860 --> 00:24:12,810
build stages in go right so we go into

00:24:10,710 --> 00:24:14,370
go and we just knock out these four

00:24:12,810 --> 00:24:17,370
records right here very simple

00:24:14,370 --> 00:24:19,950
configuration where we model our stages

00:24:17,370 --> 00:24:21,390
right and the we have the trigger type

00:24:19,950 --> 00:24:22,710
which says whether the thing runs

00:24:21,390 --> 00:24:24,420
automatically and success from the

00:24:22,710 --> 00:24:29,550
previous one because the stages are a

00:24:24,420 --> 00:24:32,190
succession of progression and but we

00:24:29,550 --> 00:24:35,330
actually we don't we do something a

00:24:32,190 --> 00:24:37,650
little more refined than this because

00:24:35,330 --> 00:24:41,100
actually when we talk about build stages

00:24:37,650 --> 00:24:42,960
there really are to disambiguate the

00:24:41,100 --> 00:24:46,050
terms there really are deployment

00:24:42,960 --> 00:24:49,110
instances we have these VMs that we have

00:24:46,050 --> 00:24:52,520
a commit via Mac you a vm a showcase vm

00:24:49,110 --> 00:24:55,200
a productions server right and our

00:24:52,520 --> 00:24:57,720
stages are actually more granular than

00:24:55,200 --> 00:25:01,470
just the commit stage we actually have

00:24:57,720 --> 00:25:03,840
three stages for each deployment

00:25:01,470 --> 00:25:06,720
instance and that's that we build the

00:25:03,840 --> 00:25:09,750
software and then we test the software

00:25:06,720 --> 00:25:12,510
and then we release the software right

00:25:09,750 --> 00:25:16,230
pretty straightforward and so when we

00:25:12,510 --> 00:25:19,740
model that in go and it ends up looking

00:25:16,230 --> 00:25:21,240
more like this right and so you probably

00:25:19,740 --> 00:25:23,700
can't really see much there so let's

00:25:21,240 --> 00:25:26,880
drill down into just one of those

00:25:23,700 --> 00:25:29,370
deployment instances and so here and go

00:25:26,880 --> 00:25:33,390
it's as the same screen jism din right

00:25:29,370 --> 00:25:36,660
where we have three stages that are that

00:25:33,390 --> 00:25:40,830
that are the progression of deploying on

00:25:36,660 --> 00:25:43,380
to the showcase vm and so again we build

00:25:40,830 --> 00:25:45,450
the software and then after we built it

00:25:43,380 --> 00:25:48,240
we test it and by having tests in a

00:25:45,450 --> 00:25:50,280
separate stage from build that allows us

00:25:48,240 --> 00:25:52,800
to rerun the tests against the same

00:25:50,280 --> 00:25:54,840
build right without having to rebuild it

00:25:52,800 --> 00:25:56,280
pretty simple concept but it's that's

00:25:54,840 --> 00:25:59,040
why you want to break stuff out in

00:25:56,280 --> 00:26:01,650
stages and then by separating the

00:25:59,040 --> 00:26:03,810
release out from as a separate stage

00:26:01,650 --> 00:26:06,090
that is that's been really really useful

00:26:03,810 --> 00:26:09,390
to us because what happens is say we do

00:26:06,090 --> 00:26:12,540
built we push code onto QA and the QA

00:26:09,390 --> 00:26:15,000
and the dev say no we pushed we push

00:26:12,540 --> 00:26:16,740
code into we push commits and then that

00:26:15,000 --> 00:26:19,049
automatically builds on the commit stage

00:26:16,740 --> 00:26:21,029
or the dev stage and then the dev

00:26:19,049 --> 00:26:23,070
a this feature is ready to go we're

00:26:21,029 --> 00:26:25,259
going to push it to QA and so we build

00:26:23,070 --> 00:26:27,149
it out onto the end of the next stage we

00:26:25,259 --> 00:26:30,809
just kick it off into the QA stage and

00:26:27,149 --> 00:26:33,149
we run the QA build state bill QA build

00:26:30,809 --> 00:26:35,340
and then we run the QA tests and there's

00:26:33,149 --> 00:26:36,720
more tests on QA automated test than

00:26:35,340 --> 00:26:39,779
there are on deaf they're different

00:26:36,720 --> 00:26:42,960
tests and more tests and if the tests

00:26:39,779 --> 00:26:44,879
break at that point then we don't push

00:26:42,960 --> 00:26:47,549
that we don't release that onto the QA

00:26:44,879 --> 00:26:49,470
server and so even though QA server has

00:26:47,549 --> 00:26:51,389
a very small community of maybe one or

00:26:49,470 --> 00:26:53,460
two people that are testing it it means

00:26:51,389 --> 00:26:56,070
that we're not pushing stuff in their

00:26:53,460 --> 00:26:57,359
face that were then we're going back and

00:26:56,070 --> 00:26:58,379
saying oh I'm sorry we shouldn't have

00:26:57,359 --> 00:27:00,480
pushed that out there because he

00:26:58,379 --> 00:27:01,980
actually it wasn't quite ready yet so by

00:27:00,480 --> 00:27:04,350
breaking out release in disciplines

00:27:01,980 --> 00:27:07,049
stage simple concept the release stage

00:27:04,350 --> 00:27:08,399
is very small set of tasks but it's very

00:27:07,049 --> 00:27:10,200
helpful to break it out into a separate

00:27:08,399 --> 00:27:12,330
stage and it's really awesome and

00:27:10,200 --> 00:27:13,950
production because we do the same thing

00:27:12,330 --> 00:27:16,080
in prod where we build the software on

00:27:13,950 --> 00:27:18,179
the production server we test it on the

00:27:16,080 --> 00:27:19,739
production server but and but it's

00:27:18,179 --> 00:27:23,009
sitting out there ready to release but

00:27:19,739 --> 00:27:27,840
not released that really gives you gives

00:27:23,009 --> 00:27:30,899
one a good set of confidence so so

00:27:27,840 --> 00:27:34,049
here's like a checkpoint in the so what

00:27:30,899 --> 00:27:37,440
we've covered so far are build materials

00:27:34,049 --> 00:27:39,210
how you configure them stages right

00:27:37,440 --> 00:27:41,340
pipeline of pipelines like a container

00:27:39,210 --> 00:27:43,499
for stages and in the trigger

00:27:41,340 --> 00:27:45,330
configuration how you kickoff how you

00:27:43,499 --> 00:27:48,359
configure go to kick off your build

00:27:45,330 --> 00:27:49,169
automatically from commits so now what

00:27:48,359 --> 00:27:52,879
we're going to do is we're going to

00:27:49,169 --> 00:27:56,070
drill down into what our jobs tasks and

00:27:52,879 --> 00:27:57,600
artifact configuration what you're

00:27:56,070 --> 00:28:00,690
looking at right here is the postcard

00:27:57,600 --> 00:28:02,669
view of go pipelines so when you've got

00:28:00,690 --> 00:28:04,559
go server and you build out a number of

00:28:02,669 --> 00:28:07,889
different pipelines then this is your

00:28:04,559 --> 00:28:11,999
first interface into the end of the

00:28:07,889 --> 00:28:18,210
pipelines okay so let's just keep moving

00:28:11,999 --> 00:28:22,320
here so a pipeline is it is a container

00:28:18,210 --> 00:28:24,600
first stages all right a progression of

00:28:22,320 --> 00:28:27,809
events that you're going to go through

00:28:24,600 --> 00:28:32,490
to get to production stages or

00:28:27,809 --> 00:28:36,120
containers for jobs right jobs are

00:28:32,490 --> 00:28:38,880
or they can jobs in the same stage run

00:28:36,120 --> 00:28:40,590
in parallel so they have to be things

00:28:38,880 --> 00:28:44,220
that are functionally independent of one

00:28:40,590 --> 00:28:45,929
another all the jobs in a particular

00:28:44,220 --> 00:28:49,950
stage have to succeed in order for the

00:28:45,929 --> 00:28:52,350
state stage to succeed to run a job go

00:28:49,950 --> 00:28:55,170
server is going to find an agent to run

00:28:52,350 --> 00:28:57,840
the job right so go nothing happens on

00:28:55,170 --> 00:28:59,460
ghost server really go server it is just

00:28:57,840 --> 00:29:00,780
the metadata that you configure to do

00:28:59,460 --> 00:29:02,940
all this stuff out there in your world

00:29:00,780 --> 00:29:05,160
of VMs and the agent is where all the

00:29:02,940 --> 00:29:07,559
heavy-lifting happens and so one of the

00:29:05,160 --> 00:29:11,970
concepts is that go is going to give you

00:29:07,559 --> 00:29:16,980
a really flexible way of managing agents

00:29:11,970 --> 00:29:21,210
so that you can model some pretty cool

00:29:16,980 --> 00:29:23,070
stuff go gos gos go finds a suitable

00:29:21,210 --> 00:29:25,350
agent for your job we'll talk about how

00:29:23,070 --> 00:29:28,170
you configure that and it hands the job

00:29:25,350 --> 00:29:31,350
off to the agent to execute and go

00:29:28,170 --> 00:29:34,190
matches jobs to agents based on

00:29:31,350 --> 00:29:36,270
resources that you define in the job and

00:29:34,190 --> 00:29:38,520
that's what's highlighted in the lower

00:29:36,270 --> 00:29:41,700
part of that there's resources and so we

00:29:38,520 --> 00:29:45,660
tagged these jobs as being like CentOS

00:29:41,700 --> 00:29:50,190
and QA and website and then the other

00:29:45,660 --> 00:29:52,020
one is centos dev and store and so we're

00:29:50,190 --> 00:29:53,940
going to go is going to find agents that

00:29:52,020 --> 00:29:56,429
have the same resources that are mapped

00:29:53,940 --> 00:29:59,010
in order to figure out which agent is

00:29:56,429 --> 00:30:00,750
qualified to run that job going through

00:29:59,010 --> 00:30:02,760
and so that's one of those concepts it's

00:30:00,750 --> 00:30:04,559
like when you if you walked into go

00:30:02,760 --> 00:30:06,809
server on your own that one would

00:30:04,559 --> 00:30:08,550
probably take you a while to like read

00:30:06,809 --> 00:30:11,670
through the documentation to like figure

00:30:08,550 --> 00:30:13,950
it out it's very simple concept so there

00:30:11,670 --> 00:30:15,210
you have it from there what we're doing

00:30:13,950 --> 00:30:18,450
in this stage is we're actually building

00:30:15,210 --> 00:30:21,030
two websites in parallel that end up

00:30:18,450 --> 00:30:23,400
being to the user one website right we

00:30:21,030 --> 00:30:25,140
have a drupal commerce store drupal

00:30:23,400 --> 00:30:28,170
commerce site and a website they're

00:30:25,140 --> 00:30:29,670
separate builds but and we keep them as

00:30:28,170 --> 00:30:34,050
separate code bases because they have a

00:30:29,670 --> 00:30:36,059
lot of differences but we build them in

00:30:34,050 --> 00:30:37,890
parallel because they were there always

00:30:36,059 --> 00:30:41,400
work together and we keep the api's and

00:30:37,890 --> 00:30:44,100
interfaces synced up this way so here's

00:30:41,400 --> 00:30:45,530
the agent view and go server so this is

00:30:44,100 --> 00:30:47,510
the other side where you

00:30:45,530 --> 00:30:50,390
you install these agents out on VMS

00:30:47,510 --> 00:30:52,070
right and then you register the agent

00:30:50,390 --> 00:30:54,440
that you installed with ghost server and

00:30:52,070 --> 00:30:56,570
when you installed the agent you gave it

00:30:54,440 --> 00:30:58,100
some resource tags and that's what's

00:30:56,570 --> 00:31:00,170
listed on the right hand side here and

00:30:58,100 --> 00:31:02,450
so it's pretty simple goes go server is

00:31:00,170 --> 00:31:04,070
going to go out into it's known agents

00:31:02,450 --> 00:31:05,750
and it's going to find one available

00:31:04,070 --> 00:31:08,570
that has the same tags as how you tag

00:31:05,750 --> 00:31:14,390
the jobs and then it's then your your

00:31:08,570 --> 00:31:16,990
job is handed off to the agent so a

00:31:14,390 --> 00:31:20,600
pipeline is a container four stages

00:31:16,990 --> 00:31:22,910
stages are containers for jobs and so

00:31:20,600 --> 00:31:25,130
maybe it's no big surprise to get to the

00:31:22,910 --> 00:31:28,960
next step to say that jobs are really

00:31:25,130 --> 00:31:32,210
just containers for tasks right and

00:31:28,960 --> 00:31:33,950
tasks are just stuff that you do right

00:31:32,210 --> 00:31:36,320
this is where a task is where you some

00:31:33,950 --> 00:31:37,820
command gets executed and so now we're

00:31:36,320 --> 00:31:39,800
finally getting to where you're doing

00:31:37,820 --> 00:31:42,200
stuff right so if you're just doing

00:31:39,800 --> 00:31:44,870
stuff interactively if you ssh into

00:31:42,200 --> 00:31:46,700
servers and you run bash scripts and you

00:31:44,870 --> 00:31:49,310
do different things to do in your in

00:31:46,700 --> 00:31:51,080
your deployments then building a

00:31:49,310 --> 00:31:54,020
pipeline is just taking all that stuff

00:31:51,080 --> 00:31:56,450
and wrapping it up in tasks in this in a

00:31:54,020 --> 00:31:57,680
proper order and bundling them up in

00:31:56,450 --> 00:32:00,110
jobs and putting them in a pipeline

00:31:57,680 --> 00:32:01,430
right so you're doing this stuff anyway

00:32:00,110 --> 00:32:03,410
if you're doing deployments you're doing

00:32:01,430 --> 00:32:04,900
all this stuff the pipeline is just a

00:32:03,410 --> 00:32:07,520
way of ordering it so you get

00:32:04,900 --> 00:32:08,840
reproducibility right which is one of

00:32:07,520 --> 00:32:11,150
the core goals that we're getting to in

00:32:08,840 --> 00:32:17,480
this not to save time but it gets it

00:32:11,150 --> 00:32:20,120
right so so the this ghost server is

00:32:17,480 --> 00:32:22,580
like confirming metadata setting the

00:32:20,120 --> 00:32:26,900
stage you know and configuring tasks is

00:32:22,580 --> 00:32:28,460
the script that really runs the show so

00:32:26,900 --> 00:32:31,010
let's just keep drilling down into this

00:32:28,460 --> 00:32:32,300
so here's the stage that we were just

00:32:31,010 --> 00:32:35,420
looking at this is the task

00:32:32,300 --> 00:32:37,940
configuration and the task configuration

00:32:35,420 --> 00:32:40,070
dialog and go server for a particular

00:32:37,940 --> 00:32:43,010
task and this task does something you're

00:32:40,070 --> 00:32:44,960
probably all familiar with copy right so

00:32:43,010 --> 00:32:46,970
that's all it is is copying and in this

00:32:44,960 --> 00:32:49,040
case it's as saying take the build

00:32:46,970 --> 00:32:51,590
properties file that's appropriate for

00:32:49,040 --> 00:32:53,690
this environment and make it the build

00:32:51,590 --> 00:32:56,120
properties file that the job is actually

00:32:53,690 --> 00:32:57,620
going to use a pretty basic concept

00:32:56,120 --> 00:32:59,480
right we take the dev properties file

00:32:57,620 --> 00:33:00,770
and we say make it build prop

00:32:59,480 --> 00:33:05,120
and that's we're going to run the next

00:33:00,770 --> 00:33:07,610
part on and then the next task is what's

00:33:05,120 --> 00:33:10,370
actually going to build our site and in

00:33:07,610 --> 00:33:15,320
this case we're using thing thing is is

00:33:10,370 --> 00:33:17,480
a apache ant for PHP and there's a

00:33:15,320 --> 00:33:19,430
primer there's a primer for it by low

00:33:17,480 --> 00:33:21,800
abaht the link to it is in the session

00:33:19,430 --> 00:33:23,060
notes so you can go down to that if

00:33:21,800 --> 00:33:24,860
you're not familiar with it or even if

00:33:23,060 --> 00:33:26,390
you are read through it it gives you all

00:33:24,860 --> 00:33:28,190
the essential details of how you get

00:33:26,390 --> 00:33:30,410
started in thing you don't have to use

00:33:28,190 --> 00:33:33,350
thing you could use rush make you can

00:33:30,410 --> 00:33:35,770
use bash scripts whatever it is that

00:33:33,350 --> 00:33:37,910
works for you to drive your process

00:33:35,770 --> 00:33:41,270
that's what we're wrapping up here we're

00:33:37,910 --> 00:33:45,160
using thing again most these build

00:33:41,270 --> 00:33:49,040
automation frameworks they're either a

00:33:45,160 --> 00:33:51,320
target based or product based apache ant

00:33:49,040 --> 00:33:53,840
and Fang or target based systems and

00:33:51,320 --> 00:33:56,150
make as a product based system and you

00:33:53,840 --> 00:33:58,220
kind of look at which one you want to

00:33:56,150 --> 00:33:59,660
use probably the best choice is the

00:33:58,220 --> 00:34:02,210
devil you know right there I don't know

00:33:59,660 --> 00:34:05,690
which one really is better but I like

00:34:02,210 --> 00:34:07,280
thing in that way and but thing is it's

00:34:05,690 --> 00:34:12,050
easier to get started with I think then

00:34:07,280 --> 00:34:15,710
make its kind of easier to like change

00:34:12,050 --> 00:34:18,550
how things work in order but as you the

00:34:15,710 --> 00:34:21,860
project grows larger these thing aunt

00:34:18,550 --> 00:34:23,630
projects become kind of like cryptic and

00:34:21,860 --> 00:34:25,190
difficult to manage that's usually the

00:34:23,630 --> 00:34:27,040
biggest complaint about target based

00:34:25,190 --> 00:34:31,610
systems as opposed to do and make stuff

00:34:27,040 --> 00:34:34,130
but anyway so here is we're drilling

00:34:31,610 --> 00:34:37,160
down into that particular fing task

00:34:34,130 --> 00:34:38,480
right and so the command is just what

00:34:37,160 --> 00:34:40,880
you would do type on the command line

00:34:38,480 --> 00:34:45,440
user bin thing we give the whole path

00:34:40,880 --> 00:34:47,990
because and um and then the actual

00:34:45,440 --> 00:34:50,150
arguments the dash f just says what file

00:34:47,990 --> 00:34:52,550
it is that you're going to be loading

00:34:50,150 --> 00:34:55,280
which is build that XML because thing is

00:34:52,550 --> 00:34:56,780
all in XML based and within that file

00:34:55,280 --> 00:34:59,360
you're going to run a target called

00:34:56,780 --> 00:35:02,090
deploy dev and that's it that's your

00:34:59,360 --> 00:35:04,760
command right and so we have two tasks

00:35:02,090 --> 00:35:06,680
copy property file and kick off this

00:35:04,760 --> 00:35:08,030
thing file and that builds the website

00:35:06,680 --> 00:35:10,460
and you're done with the go

00:35:08,030 --> 00:35:12,850
configuration of task for building this

00:35:10,460 --> 00:35:17,590
website right

00:35:12,850 --> 00:35:20,140
so just so to kind of clarify it all we

00:35:17,590 --> 00:35:22,360
can drill down into the thing task

00:35:20,140 --> 00:35:24,640
itself that we just called this is that

00:35:22,360 --> 00:35:26,320
deploy dev task so this is the kind of

00:35:24,640 --> 00:35:28,720
code it looks at so you have you know

00:35:26,320 --> 00:35:31,030
you have some setup properties you have

00:35:28,720 --> 00:35:33,970
some environmental setup stuff that

00:35:31,030 --> 00:35:35,560
you're doing we're deploying php.ini and

00:35:33,970 --> 00:35:38,950
we're cleaning up the dock rude and

00:35:35,560 --> 00:35:41,080
we're deploying some stuff but then the

00:35:38,950 --> 00:35:42,790
main thing is that within this I aside

00:35:41,080 --> 00:35:44,380
from the setup and the cleanup we're

00:35:42,790 --> 00:35:46,750
calling and or drilling down to another

00:35:44,380 --> 00:35:48,190
target called deploy website so it's

00:35:46,750 --> 00:35:50,410
just kind of classic procedural

00:35:48,190 --> 00:35:52,630
encapsulation of stuff and so if we

00:35:50,410 --> 00:35:54,940
drill down into deploy a website this is

00:35:52,630 --> 00:35:57,790
our next target then this is a stuff as

00:35:54,940 --> 00:35:59,590
Drupal devs where it probably ought to

00:35:57,790 --> 00:36:01,560
start to look familiar if you're doing

00:35:59,590 --> 00:36:04,630
any kind of automated build at all where

00:36:01,560 --> 00:36:07,780
the put we deploy Drupal core we deploy

00:36:04,630 --> 00:36:10,210
sites all we deploy sites default all

00:36:07,780 --> 00:36:12,550
our file system and we run drush site

00:36:10,210 --> 00:36:17,520
install okay so we're doing a build from

00:36:12,550 --> 00:36:19,900
0 right 0 database are all in code and

00:36:17,520 --> 00:36:24,160
so then that's kind of like the setup

00:36:19,900 --> 00:36:26,020
block for the for that and the point is

00:36:24,160 --> 00:36:27,400
not that you do exactly this you could

00:36:26,020 --> 00:36:29,200
do something simple or different

00:36:27,400 --> 00:36:30,700
whatever but the idea is this is where

00:36:29,200 --> 00:36:32,890
you're building a Drupal site we're

00:36:30,700 --> 00:36:35,550
wrapping it up and thing you can again

00:36:32,890 --> 00:36:38,500
you could do it in bash if you wanted to

00:36:35,550 --> 00:36:43,360
so you know just to like take away the

00:36:38,500 --> 00:36:48,750
magic this if the pipeline is a rapper

00:36:43,360 --> 00:36:51,460
four stages and stages are represent

00:36:48,750 --> 00:36:54,340
asks or rapper four commands which in

00:36:51,460 --> 00:36:56,710
our case were doing thing and in this

00:36:54,340 --> 00:36:58,780
case thing to a large extent is serving

00:36:56,710 --> 00:37:01,090
not entirely but it's serving as a

00:36:58,780 --> 00:37:04,030
rapper Ford rush right so if you're

00:37:01,090 --> 00:37:05,920
using dress then all we're doing is like

00:37:04,030 --> 00:37:08,620
putting all of these layers and layers

00:37:05,920 --> 00:37:11,080
of layers around it so you have a really

00:37:08,620 --> 00:37:13,300
clean way of automating and we and

00:37:11,080 --> 00:37:15,970
repeating what it is you're doing anyway

00:37:13,300 --> 00:37:18,340
and so this is our fing target for doing

00:37:15,970 --> 00:37:23,440
dress aight install in this bait this is

00:37:18,340 --> 00:37:25,650
based on there's a thing file thing task

00:37:23,440 --> 00:37:27,510
dot PHP which you can get out

00:37:25,650 --> 00:37:30,630
there are somewhere in the world that is

00:37:27,510 --> 00:37:33,720
the plug-in Ford rush to thing right and

00:37:30,630 --> 00:37:39,359
so now you can and that's also in the

00:37:33,720 --> 00:37:41,220
build in the session notes so pulling

00:37:39,359 --> 00:37:43,760
back out of the you know that base level

00:37:41,220 --> 00:37:47,039
dress level back into this build website

00:37:43,760 --> 00:37:49,230
thing target now this is the block this

00:37:47,039 --> 00:37:51,599
whole site build block in which we're

00:37:49,230 --> 00:37:54,660
actually building the site and so in our

00:37:51,599 --> 00:37:57,690
case we're using primarily features to

00:37:54,660 --> 00:37:59,609
deliver our stuff whatever you're using

00:37:57,690 --> 00:38:01,640
if you're not using if you can get

00:37:59,609 --> 00:38:04,680
config it management to work I couldn't

00:38:01,640 --> 00:38:07,410
when I tried but whatever you're using

00:38:04,680 --> 00:38:08,849
to build your site out of code then this

00:38:07,410 --> 00:38:12,059
is that block in here and so what we're

00:38:08,849 --> 00:38:14,520
doing is were we have targets to enable

00:38:12,059 --> 00:38:17,849
the contribs that we need enable the

00:38:14,520 --> 00:38:19,770
custom modules enable menu blocks build

00:38:17,849 --> 00:38:21,680
our taxonomy build our views build our

00:38:19,770 --> 00:38:26,460
blocks build our permissions and users

00:38:21,680 --> 00:38:28,559
burn in some some content and set our

00:38:26,460 --> 00:38:30,359
theme okay so now you've got a Drupal

00:38:28,559 --> 00:38:33,390
site and that it's just all a matter of

00:38:30,359 --> 00:38:35,039
like wrapping up the details and then we

00:38:33,390 --> 00:38:37,380
have some cleanup at the end we're

00:38:35,039 --> 00:38:41,579
deploying some varnish and Retta

00:38:37,380 --> 00:38:42,809
settings and then clearing caches one of

00:38:41,579 --> 00:38:44,339
the choices that you're making when

00:38:42,809 --> 00:38:45,690
you're building a pipeline at a certain

00:38:44,339 --> 00:38:48,059
point you've got to make these decisions

00:38:45,690 --> 00:38:49,440
about what belongs in server

00:38:48,059 --> 00:38:51,000
configuration and what belongs in your

00:38:49,440 --> 00:38:52,200
build pipeline because your build

00:38:51,000 --> 00:38:54,450
pipelines and stuff that could be

00:38:52,200 --> 00:38:56,430
changing incrementally like like your

00:38:54,450 --> 00:38:58,140
build is a recipe and when you push

00:38:56,430 --> 00:39:01,049
commits then you're changing the recipe

00:38:58,140 --> 00:39:03,150
and usually we think about our code but

00:39:01,049 --> 00:39:05,520
actually well it is all code but your

00:39:03,150 --> 00:39:08,609
Redis like if you if you've got a Redis

00:39:05,520 --> 00:39:10,559
caching and you make changes to connect

00:39:08,609 --> 00:39:13,849
configuration do you want that in the

00:39:10,559 --> 00:39:16,049
server built right and varnish or in

00:39:13,849 --> 00:39:17,640
puppet chef however you're managing that

00:39:16,049 --> 00:39:18,960
or do you want it in your build that's

00:39:17,640 --> 00:39:23,849
kind of a decision that you'll be making

00:39:18,960 --> 00:39:26,039
going through but in the really in the

00:39:23,849 --> 00:39:27,690
core of this one of the key things in

00:39:26,039 --> 00:39:29,670
this build website is like we build the

00:39:27,690 --> 00:39:31,829
whole site out but then in that we have

00:39:29,670 --> 00:39:35,130
this target called saved database and

00:39:31,829 --> 00:39:36,770
what that does is that it takes the the

00:39:35,130 --> 00:39:39,210
bill before we've written any

00:39:36,770 --> 00:39:41,849
environment specific values that

00:39:39,210 --> 00:39:44,220
appropriate for dev we've got this clean

00:39:41,849 --> 00:39:46,200
build nobody's ever touched it we know

00:39:44,220 --> 00:39:48,119
exactly what's in it and we must take a

00:39:46,200 --> 00:39:51,750
database dump of it at that point and

00:39:48,119 --> 00:39:54,150
then from there what we could do in go

00:39:51,750 --> 00:39:57,690
this is introducing the concept of a go

00:39:54,150 --> 00:40:01,140
trusted artifact all right we take that

00:39:57,690 --> 00:40:03,660
database dump and we go into this go

00:40:01,140 --> 00:40:07,320
build artifact configuration you can see

00:40:03,660 --> 00:40:11,130
were in job configuration on the

00:40:07,320 --> 00:40:13,950
artifacts tab and then we in there we

00:40:11,130 --> 00:40:16,740
tell go server what to look for as a

00:40:13,950 --> 00:40:18,390
product of this build of this job right

00:40:16,740 --> 00:40:20,640
we're saying this job is going to

00:40:18,390 --> 00:40:23,430
produce a file that that you need to

00:40:20,640 --> 00:40:26,130
keep track of for us to make a trusted

00:40:23,430 --> 00:40:29,099
artifact and so if this if at the end of

00:40:26,130 --> 00:40:31,560
the job there's not a commit stage DB

00:40:29,099 --> 00:40:34,260
zip in the scripts directory then the

00:40:31,560 --> 00:40:37,980
job will fail right if it's there ghost

00:40:34,260 --> 00:40:39,900
server will will upload it from the vm

00:40:37,980 --> 00:40:41,670
whatever vm it happened to run on it'll

00:40:39,900 --> 00:40:44,400
upload it to go server and keep track of

00:40:41,670 --> 00:40:48,089
it for the rest of the pipeline so if we

00:40:44,400 --> 00:40:52,470
did this on the commit stage dev then in

00:40:48,089 --> 00:40:55,230
the next stage QA in this will declare a

00:40:52,470 --> 00:40:56,730
fetch artifact task right the other

00:40:55,230 --> 00:40:59,609
taught that the other task we were just

00:40:56,730 --> 00:41:03,720
talking about or simple like copy task a

00:40:59,609 --> 00:41:07,230
thing call well this is a go specific

00:41:03,720 --> 00:41:09,030
task called fetch artifact and in and

00:41:07,230 --> 00:41:11,190
you just put that in this in the stack

00:41:09,030 --> 00:41:13,530
of tasks that are in the job along with

00:41:11,190 --> 00:41:15,300
the other stuff you're doing and what

00:41:13,530 --> 00:41:20,010
that and here's the configuration for it

00:41:15,300 --> 00:41:22,470
so here you just tell go you say in the

00:41:20,010 --> 00:41:24,390
same pipeline that what's that's what it

00:41:22,470 --> 00:41:25,770
means when the pipeline is blank that

00:41:24,390 --> 00:41:27,990
implies that you can actually fetch

00:41:25,770 --> 00:41:30,180
tasks from other pipelines but probably

00:41:27,990 --> 00:41:32,130
besides your own which gets into some

00:41:30,180 --> 00:41:33,420
really cool complicated stuff but in

00:41:32,130 --> 00:41:37,020
this case we're just saying within the

00:41:33,420 --> 00:41:40,470
same build pipeline just go back to the

00:41:37,020 --> 00:41:42,960
previous stage dev build right and in

00:41:40,470 --> 00:41:46,800
that build go to the job called build

00:41:42,960 --> 00:41:50,460
dev site and from that stage from that

00:41:46,800 --> 00:41:52,630
job then get us that trusted artifact

00:41:50,460 --> 00:41:55,720
called commit stage

00:41:52,630 --> 00:42:00,520
zip right and so go we'll go we'll

00:41:55,720 --> 00:42:03,040
manage this so that if you run dev and

00:42:00,520 --> 00:42:04,390
then you somebody and you run it again

00:42:03,040 --> 00:42:05,890
you get another commit so you have

00:42:04,390 --> 00:42:08,380
another instance on dev so the dev

00:42:05,890 --> 00:42:10,840
server deployed instance is yet another

00:42:08,380 --> 00:42:12,190
build from what it is you did before but

00:42:10,840 --> 00:42:14,020
you're in go server and you want you

00:42:12,190 --> 00:42:15,760
want to push the previous build out to

00:42:14,020 --> 00:42:17,920
QA not the latest thing that the devs

00:42:15,760 --> 00:42:19,660
are doing but one or two commits back

00:42:17,920 --> 00:42:23,230
you've got all those each one of those

00:42:19,660 --> 00:42:28,420
is its own pipeline and so when you push

00:42:23,230 --> 00:42:30,990
from dev to QA then go will guarantee

00:42:28,420 --> 00:42:33,910
you that the artifact that you created

00:42:30,990 --> 00:42:36,580
with the recipe on that build pipeline

00:42:33,910 --> 00:42:38,770
exactly what that code was will reliably

00:42:36,580 --> 00:42:40,510
to be delivered to wherever it is it

00:42:38,770 --> 00:42:42,760
your building QA so it's really cool you

00:42:40,510 --> 00:42:44,530
don't have to do any glue at all to make

00:42:42,760 --> 00:42:46,780
all that happen you get a trusted

00:42:44,530 --> 00:42:49,420
artifact simply by configuring a couple

00:42:46,780 --> 00:42:52,810
dialogues and it's a really really

00:42:49,420 --> 00:42:57,430
awesome powerful way in order to bring

00:42:52,810 --> 00:43:00,730
stability to the build process so here's

00:42:57,430 --> 00:43:03,940
kind of the dis conceptually the

00:43:00,730 --> 00:43:07,270
distinction between build materials and

00:43:03,940 --> 00:43:09,340
build artifacts this we had a good

00:43:07,270 --> 00:43:12,130
question off a Twitter from general

00:43:09,340 --> 00:43:13,690
redneck there at the back and kind of

00:43:12,130 --> 00:43:15,880
having wrapped up the deep dive through

00:43:13,690 --> 00:43:18,340
building the pipeline might be a good

00:43:15,880 --> 00:43:20,440
place to address that he's asking how

00:43:18,340 --> 00:43:23,620
easy it is to automate building projects

00:43:20,440 --> 00:43:25,480
that are already complete into these

00:43:23,620 --> 00:43:29,500
pipelines and jobs i mean observing that

00:43:25,480 --> 00:43:31,930
most of the time your your your

00:43:29,500 --> 00:43:36,160
continuous delivery kind of evolves as

00:43:31,930 --> 00:43:37,420
the project evolves if you take go and

00:43:36,160 --> 00:43:39,400
you're applying it to something that's

00:43:37,420 --> 00:43:41,920
already live i mean you're going to run

00:43:39,400 --> 00:43:44,310
into any special issues there well we're

00:43:41,920 --> 00:43:46,720
going to step back and answer kind of a

00:43:44,310 --> 00:43:48,670
related question first and then that one

00:43:46,720 --> 00:43:50,230
and that is that if you already have an

00:43:48,670 --> 00:43:51,820
existing jenkins infant struct

00:43:50,230 --> 00:43:53,250
infrastructure that's already running

00:43:51,820 --> 00:43:56,140
and doing like continuous integration

00:43:53,250 --> 00:43:58,930
you could take the existing Jenkin

00:43:56,140 --> 00:44:02,590
builds that you have and just configure

00:43:58,930 --> 00:44:04,510
it as a goat ask and say tell go just to

00:44:02,590 --> 00:44:06,070
kick off your jenkins job and wrap

00:44:04,510 --> 00:44:10,980
jenkins

00:44:06,070 --> 00:44:15,340
in a larger delivery pipeline but the

00:44:10,980 --> 00:44:19,920
with a an existing site you're you're

00:44:15,340 --> 00:44:22,510
delivering it somehow today right and so

00:44:19,920 --> 00:44:26,530
whatever it is that you're doing to

00:44:22,510 --> 00:44:28,750
deliver it today you're having either

00:44:26,530 --> 00:44:32,860
you know on the most rudimentary basis

00:44:28,750 --> 00:44:35,500
what you're doing is you're you're like

00:44:32,860 --> 00:44:36,640
SSH into a production server and copying

00:44:35,500 --> 00:44:39,550
a bunch of files into a production

00:44:36,640 --> 00:44:44,050
directory and doing like maybe you're

00:44:39,550 --> 00:44:46,210
forced to do a DB update and your then

00:44:44,050 --> 00:44:49,420
you have content and if they login to

00:44:46,210 --> 00:44:50,680
admin and whatever you're doing well the

00:44:49,420 --> 00:44:52,090
logging into a minute whatever you're

00:44:50,680 --> 00:44:55,480
doing as long as you're not going

00:44:52,090 --> 00:44:58,630
through admin you can script that as

00:44:55,480 --> 00:45:00,580
tasks one way or the other it it depends

00:44:58,630 --> 00:45:02,770
on how sophisticated you are in your

00:45:00,580 --> 00:45:05,140
current process to see how easy it's

00:45:02,770 --> 00:45:07,660
going to be to do and go if you're if

00:45:05,140 --> 00:45:09,940
you're already if your code is in get

00:45:07,660 --> 00:45:11,680
and you already kind of if you already

00:45:09,940 --> 00:45:15,340
built it somewhere other than production

00:45:11,680 --> 00:45:16,690
before production then yeah sure it's

00:45:15,340 --> 00:45:20,680
not actually going to be that difficult

00:45:16,690 --> 00:45:25,870
to create a simple go build pipeline

00:45:20,680 --> 00:45:27,550
you're probably going to be managing a

00:45:25,870 --> 00:45:30,460
database dump you have this whole issue

00:45:27,550 --> 00:45:33,160
of like how are you going to get your

00:45:30,460 --> 00:45:35,020
production database into your next build

00:45:33,160 --> 00:45:36,580
and so you're going to do like a

00:45:35,020 --> 00:45:42,390
database dump from production and you're

00:45:36,580 --> 00:45:44,830
going to do a wash and scrub to to

00:45:42,390 --> 00:45:47,290
remove stuff that's in the database that

00:45:44,830 --> 00:45:49,690
you can't that you can't have in non

00:45:47,290 --> 00:45:51,760
production environments and then you're

00:45:49,690 --> 00:45:56,200
going to have to get a delivery back out

00:45:51,760 --> 00:46:01,300
there so it's it's hard to really answer

00:45:56,200 --> 00:46:03,010
it in a single way but she's okay if I

00:46:01,300 --> 00:46:06,240
elaborate on that a little bit yeah

00:46:03,010 --> 00:46:09,370
Absalom so I think with the question duh

00:46:06,240 --> 00:46:12,790
Rob asked it wasn't why I intended but

00:46:09,370 --> 00:46:15,100
it's a very good one you could actually

00:46:12,790 --> 00:46:17,530
manage that using something like your

00:46:15,100 --> 00:46:19,569
artifacts if you created a database

00:46:17,530 --> 00:46:21,779
artifact from production on your lap

00:46:19,569 --> 00:46:26,049
build then you could use that in your

00:46:21,779 --> 00:46:29,319
development as a you know washing scrub

00:46:26,049 --> 00:46:31,329
database with that said my question was

00:46:29,319 --> 00:46:34,660
actually intended along the lines of we

00:46:31,329 --> 00:46:38,319
have several projects going on at one

00:46:34,660 --> 00:46:44,069
time is there a way to make a template

00:46:38,319 --> 00:46:47,049
project so to speak so that you can

00:46:44,069 --> 00:46:50,319
release so that you can quickly make

00:46:47,049 --> 00:46:52,959
this set up this pipeline the entire

00:46:50,319 --> 00:46:55,239
project as an entire continuous

00:46:52,959 --> 00:46:58,479
integration system without having to go

00:46:55,239 --> 00:47:00,789
through and manually create the build in

00:46:58,479 --> 00:47:03,130
go every single time for every single

00:47:00,789 --> 00:47:05,979
project oh yeah well since sure yeah go

00:47:03,130 --> 00:47:07,779
configuration is XML and so go power

00:47:05,979 --> 00:47:10,239
users are like they don't use

00:47:07,779 --> 00:47:12,519
necessarily the admitting or face at all

00:47:10,239 --> 00:47:15,160
and go they just take their XML files

00:47:12,519 --> 00:47:18,549
and and and go and run away with that

00:47:15,160 --> 00:47:20,440
and so for sure you can create pipeline

00:47:18,549 --> 00:47:21,849
templates and then you can build a

00:47:20,440 --> 00:47:24,400
pipeline from template that's built

00:47:21,849 --> 00:47:27,999
right into the core of go and then you

00:47:24,400 --> 00:47:30,519
can go beyond that again by just doing

00:47:27,999 --> 00:47:32,769
stuff with the XML where you can take an

00:47:30,519 --> 00:47:35,109
existing pipeline and grab the XML

00:47:32,769 --> 00:47:37,079
locally and go change the markup and and

00:47:35,109 --> 00:47:39,249
then push it out there is a new pipeline

00:47:37,079 --> 00:47:42,039
absolutely all that stuff's so we

00:47:39,249 --> 00:47:44,349
appreciate it but you know one of the

00:47:42,039 --> 00:47:45,459
one I wanted one of the things that you

00:47:44,349 --> 00:47:48,089
mentioned there right at the beginning

00:47:45,459 --> 00:47:51,940
of the question was about taking that

00:47:48,089 --> 00:47:53,680
production database database dump and

00:47:51,940 --> 00:47:55,630
bringing it back and you refer to it as

00:47:53,680 --> 00:48:00,039
an art as this artifact from production

00:47:55,630 --> 00:48:02,559
and it's actually it's like an important

00:48:00,039 --> 00:48:04,209
concept in the sense that in the

00:48:02,559 --> 00:48:06,549
continent continuous delivery an

00:48:04,209 --> 00:48:09,009
artifact is a process is a product of

00:48:06,549 --> 00:48:12,579
your build process and so it can only

00:48:09,009 --> 00:48:14,680
really come from dev forward right

00:48:12,579 --> 00:48:16,989
something that's coming if you're taking

00:48:14,680 --> 00:48:19,779
a database dump from production then

00:48:16,989 --> 00:48:22,390
it's effectively a build material it's

00:48:19,779 --> 00:48:24,009
one of the sources of your build that

00:48:22,390 --> 00:48:25,359
someone of the source materials that

00:48:24,009 --> 00:48:27,549
you're going to push into the build and

00:48:25,359 --> 00:48:29,289
so it's a it's a really really important

00:48:27,549 --> 00:48:32,079
concept and it's kind of easy to like

00:48:29,289 --> 00:48:33,359
for it to be kind of fuzzy in between

00:48:32,079 --> 00:48:36,029
the in

00:48:33,359 --> 00:48:39,299
in like compiled software and like Java

00:48:36,029 --> 00:48:41,130
projects in continuous delivery the idea

00:48:39,299 --> 00:48:43,289
is to build all your binaries in the dev

00:48:41,130 --> 00:48:45,839
stage and never build them again so you

00:48:43,289 --> 00:48:48,749
have a contract that all your binaries

00:48:45,839 --> 00:48:50,099
are exactly what you said they were at

00:48:48,749 --> 00:48:52,559
the beginning of the pipeline for each

00:48:50,099 --> 00:48:54,269
built and for us and that kind of world

00:48:52,559 --> 00:49:03,690
looks like the database is sort of like

00:48:54,269 --> 00:49:04,890
our binary in that way so we could go

00:49:03,690 --> 00:49:10,619
forward into thing or we could go

00:49:04,890 --> 00:49:11,999
forward into questions just anytime with

00:49:10,619 --> 00:49:15,180
questions if you want to jump out at

00:49:11,999 --> 00:49:18,420
this point so what we've got here is

00:49:15,180 --> 00:49:20,549
this is like a thin call stack so now

00:49:18,420 --> 00:49:22,950
instead of looking at think ode right

00:49:20,549 --> 00:49:25,559
this is more the conceptual view of our

00:49:22,950 --> 00:49:28,619
entire build and thing right and it

00:49:25,559 --> 00:49:32,309
starts fro so and go we just have that

00:49:28,619 --> 00:49:34,380
one task that says deploy dev and then

00:49:32,309 --> 00:49:37,619
when we when that call go when that task

00:49:34,380 --> 00:49:39,900
execute then this whole stack of thing

00:49:37,619 --> 00:49:42,299
targets runs through in our case right

00:49:39,900 --> 00:49:45,900
just to give you an example and to end

00:49:42,299 --> 00:49:47,519
and so the the yellow on green targets

00:49:45,900 --> 00:49:50,220
that you see here that's your Drupal

00:49:47,519 --> 00:49:52,410
site built and so that all the white on

00:49:50,220 --> 00:49:54,720
white targets they're kind of like we

00:49:52,410 --> 00:49:56,730
could turn those into a template so they

00:49:54,720 --> 00:49:58,440
would be the basis for pretty much any

00:49:56,730 --> 00:50:00,720
build that you do in your style right

00:49:58,440 --> 00:50:02,309
it's going to be the DevOps stuff that

00:50:00,720 --> 00:50:04,440
you need to do in the context of your

00:50:02,309 --> 00:50:06,720
specific build and then your world is

00:50:04,440 --> 00:50:07,799
this the Drupal build stuff however

00:50:06,720 --> 00:50:09,029
you're going to do it whether using

00:50:07,799 --> 00:50:11,460
features however you're going to get

00:50:09,029 --> 00:50:13,559
your stuff out there database dumps from

00:50:11,460 --> 00:50:14,940
production as materials whatever it is

00:50:13,559 --> 00:50:17,519
it's kind of going to go in here and

00:50:14,940 --> 00:50:19,079
then that save database target that's

00:50:17,519 --> 00:50:23,009
where we're cutting our artifact and

00:50:19,079 --> 00:50:25,589
then we come over and release in our

00:50:23,009 --> 00:50:29,279
case what we're doing is every single

00:50:25,589 --> 00:50:31,920
build on dev QA stage production is its

00:50:29,279 --> 00:50:35,309
own document root and then we and it's

00:50:31,920 --> 00:50:37,319
time-stamped right so when we delivered

00:50:35,309 --> 00:50:41,130
a production then we're just sitting out

00:50:37,319 --> 00:50:42,960
there with this new document root with

00:50:41,130 --> 00:50:45,809
its own database with the completed

00:50:42,960 --> 00:50:46,390
fully completed site ready to cut over

00:50:45,809 --> 00:50:48,670
that

00:50:46,390 --> 00:50:50,740
we can go and automate it run automated

00:50:48,670 --> 00:50:52,720
test against and we can inspect it

00:50:50,740 --> 00:50:54,609
through a private URL manual it's right

00:50:52,720 --> 00:50:57,809
there in production and when we cut over

00:50:54,609 --> 00:51:01,299
to production all we have to do is

00:50:57,809 --> 00:51:03,880
change the symlink to current from to

00:51:01,299 --> 00:51:06,670
from the existing production site to the

00:51:03,880 --> 00:51:08,740
next doc route / and so you can figure

00:51:06,670 --> 00:51:11,079
from there if we're going to roll back

00:51:08,740 --> 00:51:13,990
it's just a matter of rewriting the

00:51:11,079 --> 00:51:17,170
symlink the caveat in this of course is

00:51:13,990 --> 00:51:19,000
you've got if you've got you've got

00:51:17,170 --> 00:51:21,880
product you've got data that can only

00:51:19,000 --> 00:51:24,579
possibly exist in production that got

00:51:21,880 --> 00:51:27,069
written there by users like a second

00:51:24,579 --> 00:51:28,420
before you cut over right so that's not

00:51:27,069 --> 00:51:29,950
going to be in your build and it's not

00:51:28,420 --> 00:51:31,869
going to be in this next database over

00:51:29,950 --> 00:51:33,880
and so the other part that we have in

00:51:31,869 --> 00:51:36,880
the script is that the actual deployment

00:51:33,880 --> 00:51:38,589
process is that we would we build the

00:51:36,880 --> 00:51:41,760
pre-release and then we'll run the

00:51:38,589 --> 00:51:45,519
cutover then we put production into

00:51:41,760 --> 00:51:49,140
maintenance mode we sequel sync of the

00:51:45,519 --> 00:51:52,000
handful of tables that are actually only

00:51:49,140 --> 00:51:53,529
updated in production we seek will sink

00:51:52,000 --> 00:51:55,390
those to this other database that's out

00:51:53,529 --> 00:51:57,549
there running and then we cut over and

00:51:55,390 --> 00:52:00,369
then we're back up and since the site's

00:51:57,549 --> 00:52:01,720
running behind and varnish it's like you

00:52:00,369 --> 00:52:03,309
know there's very few you or there's not

00:52:01,720 --> 00:52:07,059
there many URLs that are not going to be

00:52:03,309 --> 00:52:08,980
that are going to be going to the back

00:52:07,059 --> 00:52:10,900
end at that point anyway so it's like

00:52:08,980 --> 00:52:15,069
zero it's a totally seamless zero time

00:52:10,900 --> 00:52:18,460
downtime release so when we get to the

00:52:15,069 --> 00:52:20,559
QA stage this is the call stack of thing

00:52:18,460 --> 00:52:22,660
targets in QA and the thing that you'll

00:52:20,559 --> 00:52:24,849
notice is that one is we have this other

00:52:22,660 --> 00:52:26,799
pink target deploy a website QA stage

00:52:24,849 --> 00:52:29,920
that's where we're fetching the artifact

00:52:26,799 --> 00:52:33,130
from dev and we're loading that database

00:52:29,920 --> 00:52:35,099
on QA so when we start QA not only is it

00:52:33,130 --> 00:52:37,150
faster for the build because we're not

00:52:35,099 --> 00:52:39,339
repeating all the steps of building the

00:52:37,150 --> 00:52:42,039
site but we also have an absolute

00:52:39,339 --> 00:52:45,160
guarantee that the database on QA is

00:52:42,039 --> 00:52:47,470
exactly what we left off with on on dev

00:52:45,160 --> 00:52:49,539
and then you'll notice that they that

00:52:47,470 --> 00:52:52,359
yellow on green target said all right

00:52:49,539 --> 00:52:53,470
which is the Drupal e stuff there's not

00:52:52,359 --> 00:52:55,420
that much stuff there because it's

00:52:53,470 --> 00:52:57,609
already done that's what's in that's

00:52:55,420 --> 00:52:59,170
what we got in the artifact and so here

00:52:57,609 --> 00:52:59,559
all we're doing is we're loading in more

00:52:59,170 --> 00:53:02,439
con

00:52:59,559 --> 00:53:04,329
in our case right those automated stuff

00:53:02,439 --> 00:53:06,430
coming in content and then because we've

00:53:04,329 --> 00:53:10,719
touched the database again by adding

00:53:06,430 --> 00:53:12,609
content then we have yet another we

00:53:10,719 --> 00:53:14,439
create a second artifact for the QA

00:53:12,609 --> 00:53:18,369
stage because now we have a new database

00:53:14,439 --> 00:53:21,130
and we save that out and so when we go

00:53:18,369 --> 00:53:22,900
to the showcase stage now you'll see

00:53:21,130 --> 00:53:24,819
that there's absolutely no yellow on

00:53:22,900 --> 00:53:27,939
green stuff here all of the Drupal site

00:53:24,819 --> 00:53:31,089
build stuff it's already done so when we

00:53:27,939 --> 00:53:32,979
deliver to showcase we cut over to say

00:53:31,089 --> 00:53:35,349
this is our release candidate this is

00:53:32,979 --> 00:53:37,390
what we're going to show to the to the

00:53:35,349 --> 00:53:39,489
product owners to say is this what you

00:53:37,390 --> 00:53:41,199
want is this ready for release when we

00:53:39,489 --> 00:53:42,939
deliver there we're not touching

00:53:41,199 --> 00:53:44,619
anything in terms of the Drupal build

00:53:42,939 --> 00:53:47,170
all we're doing is we're taking that

00:53:44,619 --> 00:53:49,150
trusted artifact and we're loading that

00:53:47,170 --> 00:53:50,859
database and then we're wrapping it up

00:53:49,150 --> 00:53:52,119
with all the other DevOps stuff that we

00:53:50,859 --> 00:53:54,369
have to do it actually deliver this

00:53:52,119 --> 00:53:56,289
thing so our contract that what's on

00:53:54,369 --> 00:53:58,749
showcase is what we think it is it's

00:53:56,289 --> 00:54:01,509
pretty solid and then when we go to

00:53:58,749 --> 00:54:04,869
production we actually do exactly the

00:54:01,509 --> 00:54:07,029
same thing again right so it put the

00:54:04,869 --> 00:54:10,689
again what when we release the

00:54:07,029 --> 00:54:12,400
production the the level of confidence

00:54:10,689 --> 00:54:14,199
that what we're actually going to put

00:54:12,400 --> 00:54:15,849
out on cut on production is what we

00:54:14,199 --> 00:54:25,469
think we're delivering it's pretty high

00:54:15,849 --> 00:54:25,469
at this point so more questions

00:54:32,710 --> 00:54:38,099
there's a mic we can repeat or you can

00:54:35,710 --> 00:54:38,099
go to the mic

00:54:45,770 --> 00:54:53,810
I think I had a question about how do

00:54:51,440 --> 00:54:56,660
you effectively or can you explain a

00:54:53,810 --> 00:55:01,700
little bit of the steps that you take to

00:54:56,660 --> 00:55:03,860
sync data from like if you have you say

00:55:01,700 --> 00:55:07,640
you're pushing up your database from

00:55:03,860 --> 00:55:11,150
development how do you sync the existing

00:55:07,640 --> 00:55:13,820
data that's in production to that rolled

00:55:11,150 --> 00:55:16,220
up database yeah I wonder if you can

00:55:13,820 --> 00:55:20,270
explain a little bit of the steps sure

00:55:16,220 --> 00:55:21,710
yet there it's it's pretty it's it's not

00:55:20,270 --> 00:55:23,840
that complicated in the end really

00:55:21,710 --> 00:55:26,540
because there's a thing target that

00:55:23,840 --> 00:55:29,900
implements some drush sequel sink or

00:55:26,540 --> 00:55:31,640
sequel tasks right and then the drudge

00:55:29,900 --> 00:55:33,800
just runs a few sequel statements and

00:55:31,640 --> 00:55:39,430
those in the sequel statement is are

00:55:33,800 --> 00:55:42,890
just insert statements from the

00:55:39,430 --> 00:55:45,800
production database to the to be

00:55:42,890 --> 00:55:48,080
production database right and so we do

00:55:45,800 --> 00:55:49,910
this like on our website that we just

00:55:48,080 --> 00:55:52,910
have a few tables where we have with our

00:55:49,910 --> 00:55:55,760
comments are in discus and we don't have

00:55:52,910 --> 00:55:57,560
user contributed content we have our

00:55:55,760 --> 00:55:59,600
stuff is editorially from the back end

00:55:57,560 --> 00:56:01,130
but and so there's just a few things

00:55:59,600 --> 00:56:02,630
we're capturing in the website but we

00:56:01,130 --> 00:56:05,720
also have a triple commerce site in

00:56:02,630 --> 00:56:08,330
which you have whole stack of tables

00:56:05,720 --> 00:56:09,980
that the data could only exist in

00:56:08,330 --> 00:56:11,300
production right the ordered all the

00:56:09,980 --> 00:56:12,710
order data and everything that goes with

00:56:11,300 --> 00:56:15,470
it and we do the same thing for that

00:56:12,710 --> 00:56:18,080
it's just a stack of statements that

00:56:15,470 --> 00:56:20,000
that sink the data from one database to

00:56:18,080 --> 00:56:23,030
another in a moment of time at point of

00:56:20,000 --> 00:56:26,660
cut over so that every release has its

00:56:23,030 --> 00:56:29,570
own database that gives you it gives you

00:56:26,660 --> 00:56:31,760
a really strong audit history of exactly

00:56:29,570 --> 00:56:37,960
what it is you had it at a previous

00:56:31,760 --> 00:56:41,000
point in time it's fast it's reliable

00:56:37,960 --> 00:56:44,260
okay yeah I was just asking because we

00:56:41,000 --> 00:56:48,620
have a really complicated drupal

00:56:44,260 --> 00:56:52,780
installing you know every time we have

00:56:48,620 --> 00:56:55,280
to run stuff on to production we have to

00:56:52,780 --> 00:56:59,180
just basically run all the update hooks

00:56:55,280 --> 00:57:00,890
that need to be run directly there right

00:56:59,180 --> 00:57:03,710
yeah the idea of running update hooks on

00:57:00,890 --> 00:57:05,119
a production database to me is like we

00:57:03,710 --> 00:57:08,000
definitely need to talk about this

00:57:05,119 --> 00:57:10,160
because you know it's just really a

00:57:08,000 --> 00:57:12,319
matter of time yeah it takes a little

00:57:10,160 --> 00:57:14,180
right no I mean it's a matter of time

00:57:12,319 --> 00:57:16,670
until you get you know knocked up the

00:57:14,180 --> 00:57:19,550
side of the head by it right yeah the

00:57:16,670 --> 00:57:23,050
other question I'm sorry yeah the other

00:57:19,550 --> 00:57:28,790
question I had is you mentioned having

00:57:23,050 --> 00:57:34,040
different builds on on each environment

00:57:28,790 --> 00:57:37,460
it like build test and then release so

00:57:34,040 --> 00:57:40,900
the way you do it is it do you on each

00:57:37,460 --> 00:57:45,380
environment you have like separate

00:57:40,900 --> 00:57:49,339
install stories each one of those steps

00:57:45,380 --> 00:57:51,589
different the vm or how do you manage

00:57:49,339 --> 00:57:54,950
that yes there's there's a separate vm

00:57:51,589 --> 00:57:59,270
for each stage right so that so the each

00:57:54,950 --> 00:58:02,180
each each stage vm is a is a replica of

00:57:59,270 --> 00:58:04,880
production other than resources it has

00:58:02,180 --> 00:58:06,559
less memory and processors but otherwise

00:58:04,880 --> 00:58:09,260
we manage them exactly the same as

00:58:06,559 --> 00:58:12,950
production so the the build test and

00:58:09,260 --> 00:58:15,049
release are each each separate BM no no

00:58:12,950 --> 00:58:16,790
but they because that's where we're just

00:58:15,049 --> 00:58:18,920
disambiguate the term stage right

00:58:16,790 --> 00:58:21,020
because we use the stage to mean the the

00:58:18,920 --> 00:58:23,089
deployment instance the vm that we're

00:58:21,020 --> 00:58:25,280
running on and we're using the stade the

00:58:23,089 --> 00:58:29,119
concept stage and go to say each of

00:58:25,280 --> 00:58:34,280
these steps so a deployment instance is

00:58:29,119 --> 00:58:36,230
a vm QA and then on QA we have an agent

00:58:34,280 --> 00:58:39,799
that runt that goes through each of the

00:58:36,230 --> 00:58:42,680
three stages build the software test the

00:58:39,799 --> 00:58:45,500
software and then if the tests pass then

00:58:42,680 --> 00:58:47,540
release it on that vm so that the

00:58:45,500 --> 00:58:50,750
publicly available or the available URL

00:58:47,540 --> 00:58:52,369
for our QA site then becomes the new

00:58:50,750 --> 00:59:01,750
build at that point in time once we run

00:58:52,369 --> 00:59:04,640
release right yes okay yeah okay so

00:59:01,750 --> 00:59:06,799
first off just a clarification so all of

00:59:04,640 --> 00:59:09,360
these deployment the deployments that

00:59:06,799 --> 00:59:12,180
actually you actually look at

00:59:09,360 --> 00:59:14,010
are all of those being viewed from a vm

00:59:12,180 --> 00:59:15,780
so there's not actually it's not living

00:59:14,010 --> 00:59:17,430
directly on the server it's the

00:59:15,780 --> 00:59:20,460
deployment is living in a vm that you're

00:59:17,430 --> 00:59:22,020
looking at the deployments actually I'm

00:59:20,460 --> 00:59:25,260
not sure if I really fully understand

00:59:22,020 --> 00:59:27,600
the question the the the the go agents

00:59:25,260 --> 00:59:29,010
are installed on the vm that you're

00:59:27,600 --> 00:59:32,760
going to build the software on you're

00:59:29,010 --> 00:59:35,010
going to build the website on and so

00:59:32,760 --> 00:59:36,840
each deployment instance is a vm it has

00:59:35,010 --> 00:59:39,930
its URL that's where you're going to

00:59:36,840 --> 00:59:41,460
view it test it poke it brought it is

00:59:39,930 --> 00:59:43,620
that what you mean yeah so I was just

00:59:41,460 --> 00:59:45,000
trying to clarify that kind of a more

00:59:43,620 --> 00:59:46,410
traditional deployment is that it

00:59:45,000 --> 00:59:49,380
everything lives directly in the file

00:59:46,410 --> 00:59:52,980
system you have your services installed

00:59:49,380 --> 00:59:54,900
on the operating system directly and so

00:59:52,980 --> 00:59:57,390
it's being it's running from that file

00:59:54,900 --> 00:59:59,810
system you're you're building your

00:59:57,390 --> 01:00:04,530
document root your website document root

00:59:59,810 --> 01:00:06,860
you know like in VAR lib my websites and

01:00:04,530 --> 01:00:09,810
then you're building out each instance

01:00:06,860 --> 01:00:12,530
from there right and then the rest of

01:00:09,810 --> 01:00:15,270
the server is just you know your basic

01:00:12,530 --> 01:00:16,860
your basic server what packages how your

01:00:15,270 --> 01:00:20,040
apache conf all that stuff that how

01:00:16,860 --> 01:00:22,920
that's done ok so I'm just coming from

01:00:20,040 --> 01:00:25,140
the background we've got a Jenkins set

01:00:22,920 --> 01:00:27,810
up running and so we've got one build

01:00:25,140 --> 01:00:30,240
server and then everything is like once

01:00:27,810 --> 01:00:33,840
it builds all the files the files for

01:00:30,240 --> 01:00:35,850
the project it syncs it over to the

01:00:33,840 --> 01:00:37,890
actual right yeah you can you can

01:00:35,850 --> 01:00:39,870
actually do that model we don't we don't

01:00:37,890 --> 01:00:42,230
install the agent on production for

01:00:39,870 --> 01:00:45,320
example we only install our agents on

01:00:42,230 --> 01:00:49,020
pre-production instances and so on

01:00:45,320 --> 01:00:51,030
commit QA showcase then the agents

01:00:49,020 --> 01:00:53,580
building right on that server but when

01:00:51,030 --> 01:00:55,950
we do production then what we do is we

01:00:53,580 --> 01:00:58,440
run the agent on the showcase same the

01:00:55,950 --> 01:01:01,800
same instances showcase we run the agent

01:00:58,440 --> 01:01:05,460
there but then we run it we like run it

01:01:01,800 --> 01:01:07,530
at through ssh over to the production

01:01:05,460 --> 01:01:08,850
server so that with the agents not on

01:01:07,530 --> 01:01:11,250
the production server but we're building

01:01:08,850 --> 01:01:13,530
we actually build on the production

01:01:11,250 --> 01:01:17,670
server we don't we don't as you say we

01:01:13,530 --> 01:01:19,620
don't build on one server and then push

01:01:17,670 --> 01:01:22,980
the stuff over to the other server we

01:01:19,620 --> 01:01:26,390
actually run the agent via SSH

01:01:22,980 --> 01:01:29,940
on the remote server in that case

01:01:26,390 --> 01:01:31,619
there's kind of disadvantages of doing

01:01:29,940 --> 01:01:33,930
that because that means that production

01:01:31,619 --> 01:01:35,730
is different in the production scripts

01:01:33,930 --> 01:01:37,080
are a little different and that's the

01:01:35,730 --> 01:01:39,390
one thing you really want to avoid it

01:01:37,080 --> 01:01:41,280
you want to have as much as possible you

01:01:39,390 --> 01:01:43,380
want to have production be absolute

01:01:41,280 --> 01:01:45,480
because the smallest thing eventually is

01:01:43,380 --> 01:01:47,880
going to is going to is going to break

01:01:45,480 --> 01:01:49,680
right you want you want the stuff to be

01:01:47,880 --> 01:01:52,109
as repeatable the same all the way

01:01:49,680 --> 01:01:53,520
through okay and then my final question

01:01:52,109 --> 01:01:55,590
is you kind of mentioned in passing

01:01:53,520 --> 01:01:57,780
being able to integrate go with an

01:01:55,590 --> 01:01:59,580
existing Jenkins setup yeah could you

01:01:57,780 --> 01:02:02,460
elaborate on that a little bit yeah you

01:01:59,580 --> 01:02:05,490
did the that kicking off kicking off the

01:02:02,460 --> 01:02:10,369
Jenkins build it would just be a goat

01:02:05,490 --> 01:02:12,750
goat ask right so it would just be the

01:02:10,369 --> 01:02:15,869
command and the parameters that Jenkins

01:02:12,750 --> 01:02:17,730
needs in order to run and then you know

01:02:15,869 --> 01:02:20,040
if Jenkins is producing an artifact you

01:02:17,730 --> 01:02:21,960
can tell go about what that artifact is

01:02:20,040 --> 01:02:23,700
and it gets passed down the pipeline all

01:02:21,960 --> 01:02:26,130
the way through and so that way you get

01:02:23,700 --> 01:02:28,920
to to take existing infrastructure not

01:02:26,130 --> 01:02:31,290
have to rewrite it in order to get it

01:02:28,920 --> 01:02:34,710
and go and then get it in a context

01:02:31,290 --> 01:02:38,130
where you have more infrastructure

01:02:34,710 --> 01:02:40,140
around the whole process from the

01:02:38,130 --> 01:02:43,710
initial commit all the way through to

01:02:40,140 --> 01:02:44,820
point deployment on production so you

01:02:43,710 --> 01:02:46,410
can take it beyond continuous

01:02:44,820 --> 01:02:49,950
integration and take it to continuous

01:02:46,410 --> 01:02:51,950
delivery just to just add to that I

01:02:49,950 --> 01:02:55,440
think a lot of people who use Jenkins

01:02:51,950 --> 01:02:58,350
often overlook the fact that has a REST

01:02:55,440 --> 01:03:01,070
API as well as a command line interface

01:02:58,350 --> 01:03:03,750
kind of address for for Jenkins which

01:03:01,070 --> 01:03:06,869
you know makes it relatively accessible

01:03:03,750 --> 01:03:09,590
in terms of it integrating and calling

01:03:06,869 --> 01:03:09,590
it from something else

01:03:10,220 --> 01:03:17,869
hi first thanks very much for your

01:03:12,680 --> 01:03:20,660
presentation is there a is there a model

01:03:17,869 --> 01:03:24,680
that that go can support where the

01:03:20,660 --> 01:03:26,720
agents are not all right well let me get

01:03:24,680 --> 01:03:30,470
back to actual principle like can you

01:03:26,720 --> 01:03:33,980
spin up a new vm with go in order to

01:03:30,470 --> 01:03:36,680
like or does the agent have to pre exist

01:03:33,980 --> 01:03:38,960
so for like is there something where if

01:03:36,680 --> 01:03:41,210
go does not find a matching agent it

01:03:38,960 --> 01:03:44,960
triggers a puppet process that we're a

01:03:41,210 --> 01:03:48,230
vagrant process that spins up a vm runs

01:03:44,960 --> 01:03:50,599
puppet puts the agent on puppet or on

01:03:48,230 --> 01:03:52,340
the on the vm immediately runs the tests

01:03:50,599 --> 01:03:55,460
and then shuts it down for example like

01:03:52,340 --> 01:03:59,180
if you can script it you can do it yeah

01:03:55,460 --> 01:04:02,960
i mean it's probably not a workflow that

01:03:59,180 --> 01:04:04,849
i've seen but again all the things you

01:04:02,960 --> 01:04:06,859
described are all scriptable so not

01:04:04,849 --> 01:04:09,770
necessarily a good fit for go but

01:04:06,859 --> 01:04:11,570
definitely well it works if you can it's

01:04:09,770 --> 01:04:14,060
a pretty it's pretty complex scenario

01:04:11,570 --> 01:04:15,290
where you like i can say it's in the

01:04:14,060 --> 01:04:16,609
world of cloud computing it's not that

01:04:15,290 --> 01:04:18,710
it's not that complex any you're right

01:04:16,609 --> 01:04:21,410
you're right and if you it's not it's

01:04:18,710 --> 01:04:23,119
not that it's a bad it's it's it's um it

01:04:21,410 --> 01:04:25,070
may not be common practice but it's as

01:04:23,119 --> 01:04:27,589
good a fit as it is in jenkins you can

01:04:25,070 --> 01:04:30,140
certainly do a plugin which attaches to

01:04:27,589 --> 01:04:33,530
any clout api and says hey there should

01:04:30,140 --> 01:04:35,359
be at least this many bm's processing

01:04:33,530 --> 01:04:37,580
this and if the backlog gets so much

01:04:35,359 --> 01:04:41,420
start five more like all that sort of

01:04:37,580 --> 01:04:43,130
sort of things you definitely can do so

01:04:41,420 --> 01:04:45,589
it's like a typical thing would be where

01:04:43,130 --> 01:04:48,050
or your deployment involves some sort of

01:04:45,589 --> 01:04:50,960
a massive amount of processing like

01:04:48,050 --> 01:04:53,780
giant tests or hey do processing before

01:04:50,960 --> 01:04:55,099
you kick something out okay cool thanks

01:04:53,780 --> 01:04:57,650
you're kind of a more enthusiastic

01:04:55,099 --> 01:05:00,410
answer is to say if your if your use

01:04:57,650 --> 01:05:03,260
case was that you're a hosting provider

01:05:00,410 --> 01:05:07,339
and you want to provide you want to put

01:05:03,260 --> 01:05:10,490
go as as like software as a service

01:05:07,339 --> 01:05:12,349
infrastructure for part of your offering

01:05:10,490 --> 01:05:14,180
then yeah you've got a use case where

01:05:12,349 --> 01:05:16,310
you you like actually you're not going

01:05:14,180 --> 01:05:18,020
to know what you're going to need right

01:05:16,310 --> 01:05:19,490
it's going to be kind of done on the fly

01:05:18,020 --> 01:05:21,260
cuz I'm thinking of it more in the terms

01:05:19,490 --> 01:05:23,940
of how an IT shop does their stuff

01:05:21,260 --> 01:05:28,680
internally but yeah you could you could

01:05:23,940 --> 01:05:33,060
um you know go deployment as software as

01:05:28,680 --> 01:05:34,830
a service for a hosting company right or

01:05:33,060 --> 01:05:42,000
IT department that that's that

01:05:34,830 --> 01:05:45,240
complicated sure all right your version

01:05:42,000 --> 01:05:48,690
control system do you have a bunch for

01:05:45,240 --> 01:05:52,200
each stage in that build process and how

01:05:48,690 --> 01:05:54,510
does it trigger the process to kick off

01:05:52,200 --> 01:05:57,120
to you have like get hooks that do all

01:05:54,510 --> 01:05:58,230
that that's all built in to go so we

01:05:57,120 --> 01:06:00,810
don't have to really think about it we

01:05:58,230 --> 01:06:02,730
just in go we just declare the materials

01:06:00,810 --> 01:06:06,570
we just say here's this get repository

01:06:02,730 --> 01:06:09,570
and we check out like put click off a

01:06:06,570 --> 01:06:12,630
checkbox that says pull this for changes

01:06:09,570 --> 01:06:13,890
and so then you're done right so you can

01:06:12,630 --> 01:06:17,060
do that in the first five minutes and

01:06:13,890 --> 01:06:19,830
then when you push a commit into that

01:06:17,060 --> 01:06:22,050
into that repository on the proper

01:06:19,830 --> 01:06:24,330
branch and go we'll kick off your build

01:06:22,050 --> 01:06:29,250
so you have a you have a bunch for each

01:06:24,330 --> 01:06:31,530
stage basically we do not know I mean

01:06:29,250 --> 01:06:32,760
typically for a build pipeline the whole

01:06:31,530 --> 01:06:34,890
build pipelines going to be built from

01:06:32,760 --> 01:06:38,520
the same stage or the same branch

01:06:34,890 --> 01:06:40,740
because by definition the pipeline is a

01:06:38,520 --> 01:06:43,560
single recipe that you're trying to move

01:06:40,740 --> 01:06:44,940
down into production and so if you're

01:06:43,560 --> 01:06:46,830
talking about different branches you're

01:06:44,940 --> 01:06:47,790
talking about different recipes in which

01:06:46,830 --> 01:06:50,480
case you're talking about different

01:06:47,790 --> 01:06:52,620
builds you could have you could have

01:06:50,480 --> 01:06:55,670
different pipelines for different

01:06:52,620 --> 01:06:58,080
branches right so you could have your

01:06:55,670 --> 01:07:00,210
master branch and you could have a

01:06:58,080 --> 01:07:02,360
feature branch that and you could have

01:07:00,210 --> 01:07:05,250
both of those running as pipelines or

01:07:02,360 --> 01:07:07,800
you could have the branch be

01:07:05,250 --> 01:07:10,860
configurable part of the pipeline so

01:07:07,800 --> 01:07:13,830
that for any particular pipeline run you

01:07:10,860 --> 01:07:16,100
know pipeline run number 6 22 could be

01:07:13,830 --> 01:07:19,560
from master and 6 23 could be from

01:07:16,100 --> 01:07:21,150
features with whatever works for their

01:07:19,560 --> 01:07:22,980
what you know one of the things we found

01:07:21,150 --> 01:07:24,360
is really cool and continuous continuous

01:07:22,980 --> 01:07:25,860
delivery one of the things you're cuttin

01:07:24,360 --> 01:07:28,320
you want to do is you're trying to do is

01:07:25,860 --> 01:07:30,090
cut down the cycle time between when you

01:07:28,320 --> 01:07:33,020
get a feature and when you deliver it to

01:07:30,090 --> 01:07:35,550
production and we're we're very small

01:07:33,020 --> 01:07:37,329
organization or team that's working on

01:07:35,550 --> 01:07:40,359
this and we

01:07:37,329 --> 01:07:42,430
start we were doing get get flow before

01:07:40,359 --> 01:07:44,979
we did the pipeline but once we had the

01:07:42,430 --> 01:07:48,089
pipeline up then we found that because

01:07:44,979 --> 01:07:50,920
we were delivering like stuff every day

01:07:48,089 --> 01:07:54,249
that we could get rid of our feature

01:07:50,920 --> 01:07:57,700
branch and just we only have master now

01:07:54,249 --> 01:07:58,839
because it's granular enough for us now

01:07:57,700 --> 01:08:00,729
that's not going to work for everybody

01:07:58,839 --> 01:08:03,069
in every case but it was kind of

01:08:00,729 --> 01:08:04,839
granular enough the fact that this our

01:08:03,069 --> 01:08:07,660
stuff was actually getting through the

01:08:04,839 --> 01:08:09,969
pipelines fast enough that it wasn't

01:08:07,660 --> 01:08:12,099
that complicated if we had like

01:08:09,969 --> 01:08:13,869
different things happening at the same

01:08:12,099 --> 01:08:16,210
time and that really simplified things

01:08:13,869 --> 01:08:22,150
for us a lot being able to take it down

01:08:16,210 --> 01:08:23,770
that way okay thanks yeah this question

01:08:22,150 --> 01:08:25,960
is really for you rob as kind of a

01:08:23,770 --> 01:08:28,299
follow-up to a couple questions ago and

01:08:25,960 --> 01:08:30,339
the commentary about how this could be

01:08:28,299 --> 01:08:33,099
something that a hosting company might

01:08:30,339 --> 01:08:35,529
potentially be able to offer where does

01:08:33,099 --> 01:08:37,540
something like continuous delivery fit

01:08:35,529 --> 01:08:39,940
in with aqueous offerings right now

01:08:37,540 --> 01:08:41,109
especially given that you know one of

01:08:39,940 --> 01:08:42,670
the things that's kind of powerful

01:08:41,109 --> 01:08:45,639
especially for you know somebody like an

01:08:42,670 --> 01:08:47,139
enterprise cloud user is kind of the

01:08:45,639 --> 01:08:49,060
fact that there are multiple you know

01:08:47,139 --> 01:08:50,710
environments available all on the same

01:08:49,060 --> 01:08:52,540
cloud for making you know consistency

01:08:50,710 --> 01:08:53,589
between those environments I mean I

01:08:52,540 --> 01:08:55,509
could see how you could cobble this

01:08:53,589 --> 01:08:57,639
together with the existing cloud API but

01:08:55,509 --> 01:08:58,900
is there any kind of future thought for

01:08:57,639 --> 01:09:00,279
how you might make this a little bit

01:08:58,900 --> 01:09:02,290
more accessible through you know ah

01:09:00,279 --> 01:09:04,480
Korea's offerings or either of you know

01:09:02,290 --> 01:09:05,980
of anybody else who's doing you know

01:09:04,480 --> 01:09:10,599
that sort of thing in the hosting space

01:09:05,980 --> 01:09:12,909
um i guess i guess the so they the

01:09:10,599 --> 01:09:16,630
current state of the art on most of the

01:09:12,909 --> 01:09:18,310
big projects you know does fall under

01:09:16,630 --> 01:09:23,520
the cobble things together with the claw

01:09:18,310 --> 01:09:25,569
api thing and that that I that's

01:09:23,520 --> 01:09:27,400
unfortunately kind of the state of the

01:09:25,569 --> 01:09:29,770
art across hosting a lot of the times

01:09:27,400 --> 01:09:31,449
and so like if you look at some of the

01:09:29,770 --> 01:09:36,670
various things like you know sike

01:09:31,449 --> 01:09:38,739
factory and and other you look at at any

01:09:36,670 --> 01:09:40,750
big segment of industry which which has

01:09:38,739 --> 01:09:43,960
which has the problem of managing a lot

01:09:40,750 --> 01:09:46,179
of sites often parts of everything we've

01:09:43,960 --> 01:09:48,909
talked about I've sort of been embedded

01:09:46,179 --> 01:09:49,260
into some more specific product like

01:09:48,909 --> 01:09:51,360
site

01:09:49,260 --> 01:09:52,920
factory and so on and so in some ways I

01:09:51,360 --> 01:09:54,840
think a lot of this is sort of a

01:09:52,920 --> 01:09:57,080
generalization of it and it could be

01:09:54,840 --> 01:10:02,370
like a more broadly applicable

01:09:57,080 --> 01:10:06,150
applicable thing down the road um so so

01:10:02,370 --> 01:10:10,950
but I don't know where the the future is

01:10:06,150 --> 01:10:13,040
is is really going obviously i think you

01:10:10,950 --> 01:10:15,690
know if you had a specific project the

01:10:13,040 --> 01:10:17,820
the best thing is to kind of look at

01:10:15,690 --> 01:10:22,940
what you actually have to do with your

01:10:17,820 --> 01:10:25,650
own with your own project and and try to

01:10:22,940 --> 01:10:27,180
stay as as close as reasonably possible

01:10:25,650 --> 01:10:28,800
to what other people who have the same

01:10:27,180 --> 01:10:31,260
problems are doing that you can live off

01:10:28,800 --> 01:10:34,230
their work I think that's gonna like

01:10:31,260 --> 01:10:37,740
curve you toward using something like go

01:10:34,230 --> 01:10:41,370
and you know burying jobs and tasks in

01:10:37,740 --> 01:10:44,340
it that talk to Claude api's and I and

01:10:41,370 --> 01:10:46,740
now I mean I've I don't think a Korea

01:10:44,340 --> 01:10:49,770
has anything like in the pipe no there's

01:10:46,740 --> 01:10:51,660
there's nothing like that we've talked

01:10:49,770 --> 01:10:53,100
about offering like a hosted jinkins or

01:10:51,660 --> 01:10:54,600
something that comes to go like wrapped

01:10:53,100 --> 01:10:56,970
in a pretty GUI or whatever but there's

01:10:54,600 --> 01:10:58,800
there's like you know I don't think

01:10:56,970 --> 01:11:00,840
anyone's working on that except for

01:10:58,800 --> 01:11:02,640
specific you know big projects

01:11:00,840 --> 01:11:06,330
integrated with other things like site

01:11:02,640 --> 01:11:07,860
factory this is that ya know I mean I

01:11:06,330 --> 01:11:09,690
was just the questions coming from a

01:11:07,860 --> 01:11:11,040
perspective of there are some benefits

01:11:09,690 --> 01:11:13,260
that we could reap with a you know a

01:11:11,040 --> 01:11:15,660
smaller team but with you know kind of

01:11:13,260 --> 01:11:17,850
minimal support available for any kind

01:11:15,660 --> 01:11:20,100
of DevOps in operation it's kind of

01:11:17,850 --> 01:11:21,510
called my spare time um you know as

01:11:20,100 --> 01:11:23,040
curious if they're you know kind of

01:11:21,510 --> 01:11:24,720
anything available that might kind of

01:11:23,040 --> 01:11:26,940
ease the process without eating too much

01:11:24,720 --> 01:11:29,730
into you know combat teams maintenance

01:11:26,940 --> 01:11:31,410
of you know this tool which which allows

01:11:29,730 --> 01:11:33,540
us to get a bunch of benefits yeah and

01:11:31,410 --> 01:11:36,150
citizens and so that's a you know

01:11:33,540 --> 01:11:40,050
there's a bit of commitment when you add

01:11:36,150 --> 01:11:41,430
an additional tool into your workflow

01:11:40,050 --> 01:11:43,200
you know how many different things do

01:11:41,430 --> 01:11:45,810
you want to manage so I think as you

01:11:43,200 --> 01:11:47,940
look at go and does it you know belong

01:11:45,810 --> 01:11:49,500
as part of your project try to look for

01:11:47,940 --> 01:11:51,360
other things that it could replace so

01:11:49,500 --> 01:11:54,240
you reduce the number of total tools

01:11:51,360 --> 01:11:55,830
that that you're maintaining like try

01:11:54,240 --> 01:11:57,140
not to add trying to add one thing and

01:11:55,830 --> 01:12:02,310
take away two things

01:11:57,140 --> 01:12:04,830
Thanks there was also a I guess one last

01:12:02,310 --> 01:12:07,140
question and well a couple more there

01:12:04,830 --> 01:12:09,450
Chris Luther had a question that I think

01:12:07,140 --> 01:12:12,600
would be maybe kind of a good summary

01:12:09,450 --> 01:12:14,760
question that was um just kind of where

01:12:12,600 --> 01:12:16,680
does go stand in the compared to other

01:12:14,760 --> 01:12:19,680
tools like any mentioned specifically

01:12:16,680 --> 01:12:22,350
Travis CI bamboo and Jenkins I think

01:12:19,680 --> 01:12:25,700
we've we've kind of touched on that one

01:12:22,350 --> 01:12:30,210
through all the other questions but the

01:12:25,700 --> 01:12:31,830
the the basic role is is is this goes a

01:12:30,210 --> 01:12:34,740
little bit more ambitious and reaching

01:12:31,830 --> 01:12:36,810
into more of the overall process most of

01:12:34,740 --> 01:12:39,780
those tools sort of deal with things

01:12:36,810 --> 01:12:42,300
inside the dev team and the idea of go

01:12:39,780 --> 01:12:44,070
is that it might replace those tools or

01:12:42,300 --> 01:12:46,760
call those tools but it's also going to

01:12:44,070 --> 01:12:49,680
reach out more into like your your total

01:12:46,760 --> 01:12:52,890
business process that that people like

01:12:49,680 --> 01:12:55,140
um like business people are going to

01:12:52,890 --> 01:12:57,570
look at the screen see green and make a

01:12:55,140 --> 01:12:59,610
decision whether or not to deploy based

01:12:57,570 --> 01:13:03,110
on business reasons like do we want this

01:12:59,610 --> 01:13:05,820
to go out instead of code reasons think

01:13:03,110 --> 01:13:08,910
right d trade on that sure that one of

01:13:05,820 --> 01:13:12,030
the biggest problems in software

01:13:08,910 --> 01:13:13,770
development is the siloing of efforts

01:13:12,030 --> 01:13:17,700
between different kinds of teams that

01:13:13,770 --> 01:13:20,010
devs devs are not desert desert devs and

01:13:17,700 --> 01:13:22,020
QA Zork UAE's and business analysts or

01:13:20,010 --> 01:13:23,700
business analysts and so the whole agile

01:13:22,020 --> 01:13:25,680
movement for over a decade now we've

01:13:23,700 --> 01:13:27,690
been trying to emphasize and bring

01:13:25,680 --> 01:13:29,430
together how you get people actually

01:13:27,690 --> 01:13:31,850
working together all the time on the

01:13:29,430 --> 01:13:34,200
same software in a meaningful way and

01:13:31,850 --> 01:13:37,050
one of the things I think that you can

01:13:34,200 --> 01:13:40,170
really do by building out automated

01:13:37,050 --> 01:13:44,070
build infrastructure is in particular as

01:13:40,170 --> 01:13:46,020
specific example is to bring the BA the

01:13:44,070 --> 01:13:50,550
person who's actually negotiating with

01:13:46,020 --> 01:13:52,730
product owners into the build process in

01:13:50,550 --> 01:13:55,620
a meaningful way that's measurable

01:13:52,730 --> 01:13:57,870
that's what's missing right when we do

01:13:55,620 --> 01:13:59,100
continuous integration and the kind of a

01:13:57,870 --> 01:14:01,050
kind of testing that's done in

01:13:59,100 --> 01:14:03,450
continuous integration that's meaningful

01:14:01,050 --> 01:14:05,520
for devs but it's difficult to map that

01:14:03,450 --> 01:14:07,410
to the actual deliverables that were

01:14:05,520 --> 01:14:09,930
promised to a client at a point in time

01:14:07,410 --> 01:14:10,920
right and so there's kind of like faith

01:14:09,930 --> 01:14:12,630
based thing that

01:14:10,920 --> 01:14:14,699
we're doing the testing and the testing

01:14:12,630 --> 01:14:17,190
means we're good but does the testing

01:14:14,699 --> 01:14:18,989
really mean that when we try to deliver

01:14:17,190 --> 01:14:20,670
the client is going to sign off and it's

01:14:18,989 --> 01:14:23,730
going to go to production that's hard to

01:14:20,670 --> 01:14:26,510
measure and so what we want to do is we

01:14:23,730 --> 01:14:29,730
want to take the beeees role which is to

01:14:26,510 --> 01:14:32,040
make sure that the devs understand what

01:14:29,730 --> 01:14:34,350
the what the business on the product

01:14:32,040 --> 01:14:36,810
owners are actually asking for in a

01:14:34,350 --> 01:14:39,630
particular iteration and make sure the

01:14:36,810 --> 01:14:41,850
devs built that but then what we're

01:14:39,630 --> 01:14:43,350
proposing and that's what jazz writes

01:14:41,850 --> 01:14:45,630
about in this book and this way is he

01:14:43,350 --> 01:14:47,790
saying the BDD testing the business

01:14:45,630 --> 01:14:50,550
driven development testing is really

01:14:47,790 --> 01:14:53,610
like the most useful framework that

01:14:50,550 --> 01:14:57,090
they've found in the in trying to close

01:14:53,610 --> 01:14:59,280
that gap in continuous delivery and for

01:14:57,090 --> 01:15:00,660
our well it's be had for PHP right so

01:14:59,280 --> 01:15:03,570
and that's what we use we have these

01:15:00,660 --> 01:15:06,600
b-hat tests and so the proposal is if

01:15:03,570 --> 01:15:08,760
you can get the BA the person who's

01:15:06,600 --> 01:15:11,310
actually negotiating requirements and

01:15:08,760 --> 01:15:12,630
and the person who's saying that the dev

01:15:11,310 --> 01:15:14,880
team is actually delivering these

01:15:12,630 --> 01:15:17,090
requirements to translate those

01:15:14,880 --> 01:15:20,460
requirements into domain-specific

01:15:17,090 --> 01:15:22,980
language tests so for example if you've

01:15:20,460 --> 01:15:26,550
promised the JSON API from the foot went

01:15:22,980 --> 01:15:28,650
from the website then the BA one of the

01:15:26,550 --> 01:15:32,010
beeees roles is to say is to write a B

01:15:28,650 --> 01:15:35,820
hat test that just says as an api user

01:15:32,010 --> 01:15:40,380
at this end point the result will be

01:15:35,820 --> 01:15:42,840
valid JSON and these JSON elements will

01:15:40,380 --> 01:15:46,770
not be no a contract that you have for

01:15:42,840 --> 01:15:48,929
that right there right so the if you

01:15:46,770 --> 01:15:53,340
translate it if the BA translates that

01:15:48,929 --> 01:15:55,500
stuff into executable automated tests

01:15:53,340 --> 01:15:57,330
that they can understand is not being a

01:15:55,500 --> 01:16:00,239
technical person and then they put that

01:15:57,330 --> 01:16:03,090
in as a gateway to delivery now the BA

01:16:00,239 --> 01:16:05,219
is actually technically involved not

01:16:03,090 --> 01:16:07,350
just like philosophically touchy-feely

01:16:05,219 --> 01:16:09,060
going to meetings involved in delivering

01:16:07,350 --> 01:16:13,380
software they actually have a technical

01:16:09,060 --> 01:16:16,380
role in writing the gate right so that

01:16:13,380 --> 01:16:19,530
in it defense dev because if they's if

01:16:16,380 --> 01:16:20,910
those tests are broken then that's there

01:16:19,530 --> 01:16:23,580
was to be a it was supposed to like

01:16:20,910 --> 01:16:24,530
clarify that it that on the domain level

01:16:23,580 --> 01:16:26,270
on

01:16:24,530 --> 01:16:29,030
product level on the stories that were

01:16:26,270 --> 01:16:30,440
promising deliver to deliver that they

01:16:29,030 --> 01:16:33,500
have a role of putting this right in the

01:16:30,440 --> 01:16:37,099
pipeline awesome stuff it really is can

01:16:33,500 --> 01:16:39,920
change the way teams work so give one

01:16:37,099 --> 01:16:41,449
one more question tiring so one of the

01:16:39,920 --> 01:16:43,400
things with website builds as opposed to

01:16:41,449 --> 01:16:45,199
web applications is there's very often

01:16:43,400 --> 01:16:51,409
not only does it work right but does it

01:16:45,199 --> 01:16:53,809
look right I was in a talk they were

01:16:51,409 --> 01:16:55,940
using a tool that if screenshots to

01:16:53,809 --> 01:16:59,320
basically say if you broke into styling

01:16:55,940 --> 01:16:59,320

YouTube URL: https://www.youtube.com/watch?v=Xbs7kz_g9do


