Title: DrupalCon Amsterdam 2014: Models & Service Layers; Hemoglobin & Hobgoblins
Publication date: 2014-09-30
Playlist: DrupalCon Amsterdam - September 2014
Description: 
	Speakers: rosstuck
Models, sure. That’s all part of MVC. Those are the objects that hold your business logic. Except…do they really? In PHP, the norm is to have an anemic domain model. Even if you want to move away from that (whatever it is), how do you do it? In this talk, we’ll look at different schools of thought for managing your code’s truly important parts and the impact on related areas like testing or form libraries. We'll also discuss making your framework unimportant and integrating different systems, no matter what they're written in.

From plain models to service layers, DDD to CQRS, we’ll try to apply them to an average application using PHP libraries and see where they stand up or fall down. There’s no magic elixar for designing good models but sometimes all you need is a little iron in your diet.
Captions: 
	00:00:00,000 --> 00:00:04,140
walk onto my talk models and service

00:00:02,250 --> 00:00:05,549
layers hemoglobin and hobgoblins and I

00:00:04,140 --> 00:00:08,069
promise by the end of it the title will

00:00:05,549 --> 00:00:11,130
make sense my name is Ross tuck and my

00:00:08,069 --> 00:00:12,420
job is to keep you awake after lunch so

00:00:11,130 --> 00:00:14,730
a little bit about myself by way of

00:00:12,420 --> 00:00:18,359
introduction I'm an independent engineer

00:00:14,730 --> 00:00:20,189
coach consultant you can find me on

00:00:18,359 --> 00:00:22,050
Twitter and freenode as creatively well

00:00:20,189 --> 00:00:24,140
stuck I also have a website and a blog

00:00:22,050 --> 00:00:26,250
you get the idea okay

00:00:24,140 --> 00:00:27,810
so I'm here today to talk about a topic

00:00:26,250 --> 00:00:28,939
that's important for web developers no

00:00:27,810 --> 00:00:32,430
matter who you are what you do

00:00:28,939 --> 00:00:33,600
specifically hemoglobin now if you're

00:00:32,430 --> 00:00:35,040
not familiar with hemoglobin it's a

00:00:33,600 --> 00:00:37,079
substance in your blood and I mean you

00:00:35,040 --> 00:00:40,320
specifically in the 8th row you have it

00:00:37,079 --> 00:00:42,090
in your blood if you don't have enough

00:00:40,320 --> 00:00:43,469
of it or it doesn't work properly you

00:00:42,090 --> 00:00:45,600
probably have a medical condition known

00:00:43,469 --> 00:00:47,460
as anemia because hemoglobins job is to

00:00:45,600 --> 00:00:48,989
carry iron throughout the body if you

00:00:47,460 --> 00:00:51,329
don't have enough iron you're kind of

00:00:48,989 --> 00:00:54,059
pale and sickly looking it's not a good

00:00:51,329 --> 00:00:56,760
look but this disease isn't limited to

00:00:54,059 --> 00:00:58,829
just people in Parseltongue objects can

00:00:56,760 --> 00:01:01,440
be anemic too except instead of iron

00:00:58,829 --> 00:01:03,719
they're missing behavior or logic this

00:01:01,440 --> 00:01:05,880
is what makes strong objects let me give

00:01:03,719 --> 00:01:07,619
you an example this is a model like

00:01:05,880 --> 00:01:09,090
you'd see in any PHP application you

00:01:07,619 --> 00:01:11,810
know that right away for two reasons one

00:01:09,090 --> 00:01:13,799
I labeled it in the top left corner -

00:01:11,810 --> 00:01:15,689
it's made up entirely of getters and

00:01:13,799 --> 00:01:17,040
setters you know exactly what the

00:01:15,689 --> 00:01:18,900
internal structure of this object looks

00:01:17,040 --> 00:01:21,360
like it's got a name it's got a status

00:01:18,900 --> 00:01:23,040
it's got a bunch of tasks all right it

00:01:21,360 --> 00:01:25,170
is basically a big data container

00:01:23,040 --> 00:01:26,729
there's no behavior here I mean sure in

00:01:25,170 --> 00:01:28,470
a modern PHP framework maybe you've got

00:01:26,729 --> 00:01:30,540
an adder not just to get her in a center

00:01:28,470 --> 00:01:32,670
but for all intents and purposes you

00:01:30,540 --> 00:01:33,869
could replace this with this and you'd

00:01:32,670 --> 00:01:36,150
be the same - a little bit of

00:01:33,869 --> 00:01:37,290
type-checking this is generally regarded

00:01:36,150 --> 00:01:39,570
to be a bad thing

00:01:37,290 --> 00:01:40,920
TM but no one will believe you if you

00:01:39,570 --> 00:01:42,780
say something about objects unless you

00:01:40,920 --> 00:01:45,450
bring a Martin Fowler quote so I pick

00:01:42,780 --> 00:01:46,920
this one says in essence the problem

00:01:45,450 --> 00:01:48,329
with anemic domain models is that they

00:01:46,920 --> 00:01:50,549
incur all of the costs of a domain model

00:01:48,329 --> 00:01:51,960
without yielding any of the benefits in

00:01:50,549 --> 00:01:53,250
other words you sat down and thought up

00:01:51,960 --> 00:01:55,170
what all the models in your application

00:01:53,250 --> 00:01:56,700
were you thought up what their

00:01:55,170 --> 00:01:58,619
properties were how they're connected to

00:01:56,700 --> 00:02:00,869
each other and so on and so forth but

00:01:58,619 --> 00:02:02,130
you didn't put actually anything in

00:02:00,869 --> 00:02:04,649
there to enforce that or actually even

00:02:02,130 --> 00:02:06,869
use it really in any way which is kind

00:02:04,649 --> 00:02:08,700
of a waste this leads to the unfortunate

00:02:06,869 --> 00:02:11,980
conclusion that our industry standard is

00:02:08,700 --> 00:02:14,360
an anti-pattern

00:02:11,980 --> 00:02:16,190
now an important note before we go any

00:02:14,360 --> 00:02:19,340
further I am for all intents and

00:02:16,190 --> 00:02:21,080
purposes an idiot okay I am out here

00:02:19,340 --> 00:02:22,760
with some sort of divine revelation

00:02:21,080 --> 00:02:24,650
about how to build your code because

00:02:22,760 --> 00:02:26,720
guess what I'm still figuring it out to

00:02:24,650 --> 00:02:30,200
what I want to offer you today instead

00:02:26,720 --> 00:02:32,000
of advice is a buffet I want to show you

00:02:30,200 --> 00:02:33,380
a line you can walk down and sample

00:02:32,000 --> 00:02:35,780
several different ways of building your

00:02:33,380 --> 00:02:37,160
application and maybe you like some of

00:02:35,780 --> 00:02:38,960
them maybe you don't like any good

00:02:37,160 --> 00:02:40,820
buffet this is essentially judgment free

00:02:38,960 --> 00:02:42,740
you can decide if you like it or you

00:02:40,820 --> 00:02:43,970
don't and we're also not going to talk

00:02:42,740 --> 00:02:45,770
about if it's good or bad and we're not

00:02:43,970 --> 00:02:47,150
going to go really in depth with any one

00:02:45,770 --> 00:02:48,770
thing you're just going to try a little

00:02:47,150 --> 00:02:50,060
bit of each one so that at the end of

00:02:48,770 --> 00:02:51,560
the day you'll know enough to go further

00:02:50,060 --> 00:02:54,920
on your own and hopefully make it at

00:02:51,560 --> 00:02:56,060
your own house okay I'm also not going

00:02:54,920 --> 00:02:58,010
to talk too much about the models

00:02:56,060 --> 00:02:59,510
themselves a lot of what I'm going to

00:02:58,010 --> 00:03:00,770
discuss is often associated with the

00:02:59,510 --> 00:03:02,420
main driven design which is really

00:03:00,770 --> 00:03:04,310
really awesome but today I'm going to

00:03:02,420 --> 00:03:05,690
talk about the stuff around the models

00:03:04,310 --> 00:03:07,730
instead I'm going to focus on

00:03:05,690 --> 00:03:11,000
integration over implementation of

00:03:07,730 --> 00:03:12,170
strong domain models okay now because

00:03:11,000 --> 00:03:14,000
I'm going to show you several different

00:03:12,170 --> 00:03:15,350
ways of building something it helps if I

00:03:14,000 --> 00:03:17,840
have a common set up so that you can

00:03:15,350 --> 00:03:19,100
follow its evolution so I want to stick

00:03:17,840 --> 00:03:21,590
with us to do list thing because it's

00:03:19,100 --> 00:03:23,840
bonkers simple it has a name it has a

00:03:21,590 --> 00:03:26,480
status and it has zero or more tasks

00:03:23,840 --> 00:03:28,580
okay and the tasks themselves are even

00:03:26,480 --> 00:03:33,260
simpler they have a description and a

00:03:28,580 --> 00:03:34,100
priority everybody with me okay now I'm

00:03:33,260 --> 00:03:36,080
going to show you how to build this

00:03:34,100 --> 00:03:38,390
stuff using an ORM that's totally not

00:03:36,080 --> 00:03:40,810
doctor into a promise and a framework

00:03:38,390 --> 00:03:43,640
that's absolutely not symphony - okay

00:03:40,810 --> 00:03:44,810
okay there's some flavor that in here

00:03:43,640 --> 00:03:46,760
but you can build anything and

00:03:44,810 --> 00:03:48,140
everything I show you from scratch in

00:03:46,760 --> 00:03:52,520
some it's something else

00:03:48,140 --> 00:03:53,780
Drupal whatever you want okay so I'm

00:03:52,520 --> 00:03:56,270
going to start off with kind of a crud

00:03:53,780 --> 00:03:58,250
application that's how we build most PHP

00:03:56,270 --> 00:03:59,540
stuff today right and we're going to

00:03:58,250 --> 00:04:00,920
begin in the controller because that's

00:03:59,540 --> 00:04:02,870
where most of the action is when you do

00:04:00,920 --> 00:04:05,150
crud so we're gonna have this add task

00:04:02,870 --> 00:04:06,950
action it takes an HTTP request as its

00:04:05,150 --> 00:04:08,989
first parameter and what we're going to

00:04:06,950 --> 00:04:10,970
do is create a new task and attach it to

00:04:08,989 --> 00:04:12,170
an existing to-do list and this is the

00:04:10,970 --> 00:04:13,700
example we'll use throughout the rest of

00:04:12,170 --> 00:04:15,590
the presentation okay so I'm going to

00:04:13,700 --> 00:04:16,669
take my time with this code the first

00:04:15,590 --> 00:04:18,820
thing we're going to do is we need to

00:04:16,669 --> 00:04:20,470
create a new task right

00:04:18,820 --> 00:04:22,090
and here I'm just going to get the desk

00:04:20,470 --> 00:04:23,620
I'm going to set some stuff on it this

00:04:22,090 --> 00:04:25,960
is really simple I know in real life

00:04:23,620 --> 00:04:27,400
you'd have some validation or something

00:04:25,960 --> 00:04:29,560
like that here you probably using a form

00:04:27,400 --> 00:04:31,270
library or serializer but it basically

00:04:29,560 --> 00:04:34,540
boils down the same thing it's on the

00:04:31,270 --> 00:04:36,370
same layer of code next I'm going to

00:04:34,540 --> 00:04:38,020
take a to do repository and I'm going to

00:04:36,370 --> 00:04:39,340
look for the existing to-do list inside

00:04:38,020 --> 00:04:41,830
of it so we're going to do a find buy ID

00:04:39,340 --> 00:04:44,830
there if the to-do list doesn't exist we

00:04:41,830 --> 00:04:47,560
throw an exception a 404 and then we set

00:04:44,830 --> 00:04:48,760
the to-do list on the task this should

00:04:47,560 --> 00:04:51,910
be your first hint by the way that

00:04:48,760 --> 00:04:54,340
something is bass-ackwards because right

00:04:51,910 --> 00:04:55,780
if the task belongs to the to-do list

00:04:54,340 --> 00:04:58,300
then why are we putting the to-do list

00:04:55,780 --> 00:04:59,050
on task I mean it makes sense when you

00:04:58,300 --> 00:05:00,280
think about it from a database

00:04:59,050 --> 00:05:02,050
perspective because this is a

00:05:00,280 --> 00:05:03,820
parent/child kind of relationship and

00:05:02,050 --> 00:05:06,370
you know that you need the parent ID on

00:05:03,820 --> 00:05:07,930
the child row but that's the database

00:05:06,370 --> 00:05:09,250
concern it doesn't really blow all the

00:05:07,930 --> 00:05:12,570
way up here and what's basically UI

00:05:09,250 --> 00:05:14,740
logic but we'll talk about that later

00:05:12,570 --> 00:05:16,150
after we set the whole thing up we need

00:05:14,740 --> 00:05:17,440
to save it we'll use a repository for

00:05:16,150 --> 00:05:19,030
that they just flushes it to the

00:05:17,440 --> 00:05:20,830
database and then we'll have some

00:05:19,030 --> 00:05:22,990
application specific concerns like

00:05:20,830 --> 00:05:25,480
updating an audit log maybe we send a

00:05:22,990 --> 00:05:28,090
new email and then finally redirect the

00:05:25,480 --> 00:05:29,320
user back to the Edit Page okay

00:05:28,090 --> 00:05:30,670
so I'll let you look at that real quick

00:05:29,320 --> 00:05:37,630
because we're going to slice the nicest

00:05:30,670 --> 00:05:39,970
a lot everybody good goal each now your

00:05:37,630 --> 00:05:42,190
first impression is probably correct all

00:05:39,970 --> 00:05:43,690
right and this is not just the stead X

00:05:42,190 --> 00:05:45,340
although those are important too I mean

00:05:43,690 --> 00:05:46,930
I can't even fit the closing bracket on

00:05:45,340 --> 00:05:48,850
the bottom of the slide for God's sake

00:05:46,930 --> 00:05:51,250
all right but there's some real

00:05:48,850 --> 00:05:52,570
technical concerns here the model is

00:05:51,250 --> 00:05:53,770
thoroughly anemic which we've already

00:05:52,570 --> 00:05:56,560
talked about as being kind of you know

00:05:53,770 --> 00:05:58,450
bad it is hard to maintain this code

00:05:56,560 --> 00:05:59,530
will only grow in complexity it's only

00:05:58,450 --> 00:06:02,320
going to get worse as we add more

00:05:59,530 --> 00:06:03,640
concerns it is clearly not testable

00:06:02,320 --> 00:06:05,290
there are way too many collaborators

00:06:03,640 --> 00:06:06,520
there's no clear point to the object

00:06:05,290 --> 00:06:08,320
it's going to be a real pain to write

00:06:06,520 --> 00:06:11,050
anything but an integration test for and

00:06:08,320 --> 00:06:12,430
then finally the person who's written it

00:06:11,050 --> 00:06:13,780
has clearly never heard of the single

00:06:12,430 --> 00:06:17,020
responsibility principle in their life

00:06:13,780 --> 00:06:18,490
okay now in defensive crud

00:06:17,020 --> 00:06:20,410
for all the bashing on it there are some

00:06:18,490 --> 00:06:22,510
good things here all right

00:06:20,410 --> 00:06:25,180
crud is a very very low barrier to entry

00:06:22,510 --> 00:06:26,770
if you can normalize a database you can

00:06:25,180 --> 00:06:27,650
build a crud application it's that

00:06:26,770 --> 00:06:30,410
simple

00:06:27,650 --> 00:06:31,880
it's also easy to follow provided that

00:06:30,410 --> 00:06:33,949
you can keep the entire domain and all

00:06:31,880 --> 00:06:35,180
its rules in your head because there's

00:06:33,949 --> 00:06:36,380
nothing in the code outside of maybe

00:06:35,180 --> 00:06:38,000
your form validation that's going to

00:06:36,380 --> 00:06:40,090
help you get any of this right it's not

00:06:38,000 --> 00:06:42,530
encoded anywhere in the design and

00:06:40,090 --> 00:06:44,419
sometimes all you really want is data

00:06:42,530 --> 00:06:45,500
entry I mean it's not as often as we

00:06:44,419 --> 00:06:47,540
think it is in the industry but

00:06:45,500 --> 00:06:49,040
sometimes it really really is so I might

00:06:47,540 --> 00:06:51,199
have some kind of really fancy insurance

00:06:49,040 --> 00:06:53,900
calculator that's well designed well

00:06:51,199 --> 00:06:55,550
tested but it maybe need some actuary

00:06:53,900 --> 00:06:57,229
tables that are updated in a database

00:06:55,550 --> 00:06:59,060
once a year and for that updating of the

00:06:57,229 --> 00:07:00,860
tables why not build a crud application

00:06:59,060 --> 00:07:03,169
it's simple it's easy it's not important

00:07:00,860 --> 00:07:05,300
to my business and then finally crud

00:07:03,169 --> 00:07:07,520
isn't always a developers fault if you

00:07:05,300 --> 00:07:09,650
have a bad project manager or a subpar

00:07:07,520 --> 00:07:11,270
UX person who just hands you designs

00:07:09,650 --> 00:07:13,010
that are nothing but overview pages and

00:07:11,270 --> 00:07:14,750
edit forms you have very little choice

00:07:13,010 --> 00:07:16,550
but to build a crud application in my

00:07:14,750 --> 00:07:18,500
experience all right

00:07:16,550 --> 00:07:19,940
but I think we can do better and I think

00:07:18,500 --> 00:07:21,260
one of the ways that we can do better is

00:07:19,940 --> 00:07:24,380
by adding something called a service

00:07:21,260 --> 00:07:26,570
layer to this application now service is

00:07:24,380 --> 00:07:28,910
like the most overused term in all of IT

00:07:26,570 --> 00:07:31,160
right now I mean we got a service layer

00:07:28,910 --> 00:07:32,570
a service container or web service a

00:07:31,160 --> 00:07:33,710
service oriented architecture domain

00:07:32,570 --> 00:07:34,880
service stateless server software

00:07:33,710 --> 00:07:38,479
service platform service whatever source

00:07:34,880 --> 00:07:40,250
of name delivery service Alondra so we

00:07:38,479 --> 00:07:41,720
have a lot of services is what I'm

00:07:40,250 --> 00:07:44,000
saying so I want to be really clear

00:07:41,720 --> 00:07:45,050
about what I'm talking about here I'm

00:07:44,000 --> 00:07:47,330
talking about something called an

00:07:45,050 --> 00:07:49,729
application service not God another

00:07:47,330 --> 00:07:51,139
service all right but this is basically

00:07:49,729 --> 00:07:53,330
just a service layer and I'm going to

00:07:51,139 --> 00:07:55,639
use the two interchangeably the reason I

00:07:53,330 --> 00:07:56,990
like the term application service I

00:07:55,639 --> 00:07:58,820
picked it up from this book implementing

00:07:56,990 --> 00:08:00,800
domain driven design is that it

00:07:58,820 --> 00:08:03,680
emphasizes the role of this service

00:08:00,800 --> 00:08:05,599
layer as being tying different concerns

00:08:03,680 --> 00:08:07,130
together to create what's essentially

00:08:05,599 --> 00:08:09,620
the application and we'll talk about

00:08:07,130 --> 00:08:11,690
that again a bit later the way it works

00:08:09,620 --> 00:08:12,800
in practice though with an MVC app is

00:08:11,690 --> 00:08:14,270
that you just have a model and a

00:08:12,800 --> 00:08:15,590
controller normally and the service

00:08:14,270 --> 00:08:17,479
layer kind of buts in there like an

00:08:15,590 --> 00:08:19,669
unwelcome house guest all right and you

00:08:17,479 --> 00:08:20,060
might be thinking okay Ross why would we

00:08:19,669 --> 00:08:21,710
do that

00:08:20,060 --> 00:08:24,039
I mean if three layers didn't cut it why

00:08:21,710 --> 00:08:26,599
is for going to magically be better well

00:08:24,039 --> 00:08:28,099
if we turn to the good book you'll find

00:08:26,599 --> 00:08:30,380
a chapter here written by a guy named

00:08:28,099 --> 00:08:32,750
Randy Stafford who Fowler asked to write

00:08:30,380 --> 00:08:34,909
about service layers and in there he

00:08:32,750 --> 00:08:37,310
highlights two main reasons to build a

00:08:34,909 --> 00:08:38,900
service layer the first one is that you

00:08:37,310 --> 00:08:40,099
have multiple user interfaces that

00:08:38,900 --> 00:08:42,380
consume the same

00:08:40,099 --> 00:08:43,669
domain logic right and that might not

00:08:42,380 --> 00:08:45,649
have been too common when the book is

00:08:43,669 --> 00:08:47,630
written I don't know I wasn't there but

00:08:45,649 --> 00:08:49,819
I would argue that for us today this is

00:08:47,630 --> 00:08:51,920
practically the norm like how many of

00:08:49,819 --> 00:08:53,870
you here have a website and a REST API

00:08:51,920 --> 00:08:57,319
that let you do some of the same things

00:08:53,870 --> 00:08:59,480
or you have a website and a cron job or

00:08:57,319 --> 00:09:01,130
a command line admin interface that's

00:08:59,480 --> 00:09:03,680
consuming the same logic or a queue

00:09:01,130 --> 00:09:05,779
worker from gear man or Beanstalk these

00:09:03,680 --> 00:09:08,990
are all different interfaces consuming

00:09:05,779 --> 00:09:10,970
the same domain logic he also hints at

00:09:08,990 --> 00:09:13,040
the idea that it's good for in between

00:09:10,970 --> 00:09:14,889
logic or stuff that doesn't really fit

00:09:13,040 --> 00:09:17,480
in the controller or in the model like

00:09:14,889 --> 00:09:18,980
database transactions you don't want to

00:09:17,480 --> 00:09:20,480
duplicate those in every single control

00:09:18,980 --> 00:09:21,949
or they don't belong there but they

00:09:20,480 --> 00:09:24,560
don't really fit in the model either

00:09:21,949 --> 00:09:26,000
that's a persistence concern so an

00:09:24,560 --> 00:09:27,980
application service can be a good place

00:09:26,000 --> 00:09:29,060
to put that stuff and then finally

00:09:27,980 --> 00:09:30,769
there's another reason you might hear

00:09:29,060 --> 00:09:32,509
bandied about on Twitter or conference

00:09:30,769 --> 00:09:34,639
always these days which is that

00:09:32,509 --> 00:09:36,800
application services help you decouple

00:09:34,639 --> 00:09:38,839
your domain model from the underlying

00:09:36,800 --> 00:09:42,199
framework because clearly frameworks are

00:09:38,839 --> 00:09:45,199
the source of all evil in PHP all right

00:09:42,199 --> 00:09:46,970
but for all intents and purposes this is

00:09:45,199 --> 00:09:48,740
kind of true like me personally when I'm

00:09:46,970 --> 00:09:50,750
building an application I tend to base

00:09:48,740 --> 00:09:52,790
the controller and the view entirely on

00:09:50,750 --> 00:09:54,920
whatever framework I'm using because

00:09:52,790 --> 00:09:56,240
it's easy it's the most productive it's

00:09:54,920 --> 00:09:58,850
also the least important part of my code

00:09:56,240 --> 00:10:01,189
the service layer itself sometimes has

00:09:58,850 --> 00:10:04,689
components or libraries from this

00:10:01,189 --> 00:10:08,720
framework or from another mood lighting

00:10:04,689 --> 00:10:11,470
romantic anyways so we have that stuff

00:10:08,720 --> 00:10:14,240
in here and it uses a couple components

00:10:11,470 --> 00:10:16,819
event dispatchers or validation library

00:10:14,240 --> 00:10:18,439
something like that and then finally the

00:10:16,819 --> 00:10:20,870
model itself is decoupled from the rest

00:10:18,439 --> 00:10:22,970
of this mess usually maybe except for a

00:10:20,870 --> 00:10:24,740
couple value object libraries or a

00:10:22,970 --> 00:10:26,569
couple validators something like that

00:10:24,740 --> 00:10:28,339
all right so it's kind of a standalone

00:10:26,569 --> 00:10:30,050
piece now it's a whole lot of

00:10:28,339 --> 00:10:32,509
jibber-jabber let's talk about actually

00:10:30,050 --> 00:10:34,320
building a simple service layer all

00:10:32,509 --> 00:10:36,990
right

00:10:34,320 --> 00:10:39,839
so an easy way to go about doing this is

00:10:36,990 --> 00:10:41,550
as a quick rule of thumb just think

00:10:39,839 --> 00:10:43,740
about what code would I want to reuse if

00:10:41,550 --> 00:10:45,149
I had multiple user interfaces I would

00:10:43,740 --> 00:10:47,070
say in the case of our giant controller

00:10:45,149 --> 00:10:48,449
here it's probably the stuff about you

00:10:47,070 --> 00:10:50,399
know setting it up and then the

00:10:48,449 --> 00:10:51,540
Associated objects with it so what I'm

00:10:50,399 --> 00:10:53,490
going to do is basically an extract

00:10:51,540 --> 00:10:54,810
class refactoring and I'm going to pull

00:10:53,490 --> 00:10:57,690
this out I'm going to put it in a new

00:10:54,810 --> 00:10:59,160
class called to service and it's going

00:10:57,690 --> 00:11:00,300
to have a method called add tasks and

00:10:59,160 --> 00:11:02,880
I'm going to require all the different

00:11:00,300 --> 00:11:04,470
pieces here as formal parameters all

00:11:02,880 --> 00:11:06,810
right by the way incidentally to do

00:11:04,470 --> 00:11:08,459
service is a really crappy name for

00:11:06,810 --> 00:11:09,720
service please name these actually after

00:11:08,459 --> 00:11:12,089
something that's maybe related to your

00:11:09,720 --> 00:11:14,670
domain like reminders or journal or

00:11:12,089 --> 00:11:16,470
something like that but I'm lazy anyways

00:11:14,670 --> 00:11:18,209
so we're going to have this in here so

00:11:16,470 --> 00:11:20,160
there's no way that you can invoke this

00:11:18,209 --> 00:11:22,620
method incorrectly because it requires

00:11:20,160 --> 00:11:24,509
everything explicitly alright and then

00:11:22,620 --> 00:11:27,180
we'll just dump that code in here did a

00:11:24,509 --> 00:11:28,440
simple little service layer now you'll

00:11:27,180 --> 00:11:30,089
notice that we also took a fair number

00:11:28,440 --> 00:11:31,920
of the collaborators along with us like

00:11:30,089 --> 00:11:33,600
the repository the auto log stuff like

00:11:31,920 --> 00:11:35,399
that I would usually inject this year

00:11:33,600 --> 00:11:37,199
through the constructor with whatever di

00:11:35,399 --> 00:11:38,430
layer you're using you know if you've

00:11:37,199 --> 00:11:42,630
got a factory class that builds your

00:11:38,430 --> 00:11:44,550
application same thing alright so we've

00:11:42,630 --> 00:11:46,410
got that in there now one of the things

00:11:44,550 --> 00:11:47,819
I would normally do as well here is if

00:11:46,410 --> 00:11:49,680
you've got different collaborators that

00:11:47,819 --> 00:11:52,170
you're using in the service layer I

00:11:49,680 --> 00:11:54,510
would begin encapsulating all access to

00:11:52,170 --> 00:11:56,040
any of those ok and this might seem like

00:11:54,510 --> 00:11:57,389
a little bit overdone or a bit over

00:11:56,040 --> 00:11:59,160
engineered but it has some serious

00:11:57,389 --> 00:12:01,860
benefits because you know what's

00:11:59,160 --> 00:12:03,180
accessing what now right so if we cut

00:12:01,860 --> 00:12:04,680
back to our controller having done this

00:12:03,180 --> 00:12:06,180
refactoring you'll find that it's

00:12:04,680 --> 00:12:08,670
already a lot more high-level and it

00:12:06,180 --> 00:12:10,589
reads better now I'm finding a to-do

00:12:08,670 --> 00:12:12,569
list by ID I throw a 4 or 4 if it's not

00:12:10,589 --> 00:12:14,610
there I add a task to it and I redirect

00:12:12,569 --> 00:12:16,860
the user this is a lot simpler this is

00:12:14,610 --> 00:12:18,600
easy to follow right and if we add an

00:12:16,860 --> 00:12:21,000
extra concern like some extra piece of

00:12:18,600 --> 00:12:24,269
logging or whatever then it's not going

00:12:21,000 --> 00:12:26,250
to mess the controller up so this also

00:12:24,269 --> 00:12:28,019
begins to enable other things like if we

00:12:26,250 --> 00:12:30,149
wanted to build a super hipster command

00:12:28,019 --> 00:12:32,189
line task management application then

00:12:30,149 --> 00:12:33,689
that's pretty much peanuts now right we

00:12:32,189 --> 00:12:35,370
just dump it in there because the

00:12:33,689 --> 00:12:37,800
important code is all inside this

00:12:35,370 --> 00:12:40,720
service class

00:12:37,800 --> 00:12:42,910
now this is also in very very simple

00:12:40,720 --> 00:12:44,950
applications a decent point to begin go

00:12:42,910 --> 00:12:46,360
ahead and drawing up the rest of the

00:12:44,950 --> 00:12:48,280
code and in terms of don't repeat

00:12:46,360 --> 00:12:50,020
yourself so stuff like it's not found

00:12:48,280 --> 00:12:51,550
exception if we want that thrown

00:12:50,020 --> 00:12:53,500
everywhere you could conceivably go

00:12:51,550 --> 00:12:55,090
ahead and begin putting that inside the

00:12:53,500 --> 00:12:57,610
service layer so you could do something

00:12:55,090 --> 00:12:58,810
like a find by ID dump the exception in

00:12:57,610 --> 00:13:01,690
there and you didn't have to modify the

00:12:58,810 --> 00:13:03,400
entire application now keep in mind once

00:13:01,690 --> 00:13:05,710
you start doing this that no trace of

00:13:03,400 --> 00:13:08,680
your user interface layer should exist

00:13:05,710 --> 00:13:10,360
inside the service layer all right so

00:13:08,680 --> 00:13:12,490
we're not using an HTTP exception here

00:13:10,360 --> 00:13:17,530
anymore we're using a specific named

00:13:12,490 --> 00:13:19,480
exception okay now if we turn back to

00:13:17,530 --> 00:13:20,860
the same UI code again here it's once

00:13:19,480 --> 00:13:22,870
again a little bit simpler we try and

00:13:20,860 --> 00:13:25,120
find something by ID we add a task to it

00:13:22,870 --> 00:13:26,980
and we redirect user that's a step

00:13:25,120 --> 00:13:28,720
forward okay

00:13:26,980 --> 00:13:30,220
now you might be asking what why don't

00:13:28,720 --> 00:13:32,580
we go ahead and move this find by ID

00:13:30,220 --> 00:13:35,860
stuff into the add task method as well

00:13:32,580 --> 00:13:37,420
well that's true you could but you begin

00:13:35,860 --> 00:13:40,480
to sort of close off some doors at this

00:13:37,420 --> 00:13:42,010
point for example if on the command line

00:13:40,480 --> 00:13:45,520
interface I want it to refer to it by

00:13:42,010 --> 00:13:47,950
name rather than ID you know I still

00:13:45,520 --> 00:13:49,660
have to pass it in there instead so you

00:13:47,950 --> 00:13:52,990
want your user interface your service

00:13:49,660 --> 00:13:56,320
layer to be close to your use cases but

00:13:52,990 --> 00:14:01,150
not too close now that Joe makes sense

00:13:56,320 --> 00:14:02,410
oops okay so we have that stuff here all

00:14:01,150 --> 00:14:05,410
right now that's not the only way to go

00:14:02,410 --> 00:14:07,480
about doing it though for example we

00:14:05,410 --> 00:14:09,400
could instead of passing around the

00:14:07,480 --> 00:14:11,020
object itself that we want to modify we

00:14:09,400 --> 00:14:13,030
could also pass around the ID instead

00:14:11,020 --> 00:14:15,190
and this is just as good we could say

00:14:13,030 --> 00:14:17,500
find ID by name and then we pass that

00:14:15,190 --> 00:14:18,820
into the service layer as well usually

00:14:17,500 --> 00:14:20,290
you would do this as some sort of value

00:14:18,820 --> 00:14:21,970
object so you get really strict type

00:14:20,290 --> 00:14:23,770
checking and this is a great maneuver as

00:14:21,970 --> 00:14:25,450
well if you want some extra isolation so

00:14:23,770 --> 00:14:27,340
it depends a little bit of what you want

00:14:25,450 --> 00:14:30,760
to do but whether you use objects or

00:14:27,340 --> 00:14:32,380
whether you use IDs just be consistent

00:14:30,760 --> 00:14:36,460
on what your service layer accepts pick

00:14:32,380 --> 00:14:38,260
one pick the other but not both okay now

00:14:36,460 --> 00:14:40,120
this is going to feel really really

00:14:38,260 --> 00:14:42,340
crazy because you're like why am I just

00:14:40,120 --> 00:14:44,980
taking this stuff and then wrapping it

00:14:42,340 --> 00:14:46,870
with one-line functions again what's

00:14:44,980 --> 00:14:48,370
what's the benefit of this and the

00:14:46,870 --> 00:14:50,080
easiest benefit that I can show you

00:14:48,370 --> 00:14:52,600
without getting into anything deeper

00:14:50,080 --> 00:14:54,490
we're going to is that it makes it

00:14:52,600 --> 00:14:56,290
really simple to add extra behavior

00:14:54,490 --> 00:14:58,360
without having to modify several callers

00:14:56,290 --> 00:15:00,250
so I could add a cache to this method

00:14:58,360 --> 00:15:03,490
without having to go hunt and peck or

00:15:00,250 --> 00:15:04,990
everywhere in the application now that's

00:15:03,490 --> 00:15:07,330
a lot of technical advantages let's talk

00:15:04,990 --> 00:15:08,920
about some indirect ones as well I think

00:15:07,330 --> 00:15:10,390
this has had a great effect on the

00:15:08,920 --> 00:15:12,190
readability of the code every class

00:15:10,390 --> 00:15:14,530
feels more high-level they're easier to

00:15:12,190 --> 00:15:16,180
isolate they're easier to test there's

00:15:14,530 --> 00:15:17,590
also a certain level of jr. protection

00:15:16,180 --> 00:15:18,850
here you've got this great big interface

00:15:17,590 --> 00:15:20,590
running down to the middle of the

00:15:18,850 --> 00:15:21,880
application and that means that you

00:15:20,590 --> 00:15:23,650
could divide up your team a little bit

00:15:21,880 --> 00:15:25,660
easier a little bit better you could

00:15:23,650 --> 00:15:27,250
also for example you know change

00:15:25,660 --> 00:15:28,060
something on one side without having it

00:15:27,250 --> 00:15:29,770
break something on the other side

00:15:28,060 --> 00:15:32,320
hopefully at least you're having the

00:15:29,770 --> 00:15:34,780
beginnings of that here it's also got a

00:15:32,320 --> 00:15:37,810
great element of discoverability if I'm

00:15:34,780 --> 00:15:39,190
looking at a crud application for the

00:15:37,810 --> 00:15:41,380
first time I'm just looking at your

00:15:39,190 --> 00:15:43,330
database tables basically I don't really

00:15:41,380 --> 00:15:45,610
know what your application does I don't

00:15:43,330 --> 00:15:47,050
know what it allows you to do whereas if

00:15:45,610 --> 00:15:51,130
I look at the method signatures on your

00:15:47,050 --> 00:15:52,240
service I have a pretty good idea so at

00:15:51,130 --> 00:15:53,830
this point you might be thinking hey

00:15:52,240 --> 00:15:55,440
mission accomplished we're basically

00:15:53,830 --> 00:15:57,400
done we've built a simple service layer

00:15:55,440 --> 00:15:59,800
there's just one little detail we need

00:15:57,400 --> 00:16:02,680
to wrap up but our model is still what's

00:15:59,800 --> 00:16:05,560
the technical term dumb as a box of

00:16:02,680 --> 00:16:07,090
rocks we've done absolutely nothing to

00:16:05,560 --> 00:16:10,300
help our model which is what we started

00:16:07,090 --> 00:16:11,740
with this kind of a premise here so I

00:16:10,300 --> 00:16:13,150
hate to go Return of the King on you but

00:16:11,740 --> 00:16:16,120
that's a fake ending we're not even a

00:16:13,150 --> 00:16:19,120
third of the way through yet okay so

00:16:16,120 --> 00:16:21,520
this leads the question where is my

00:16:19,120 --> 00:16:23,650
logic every application has some level

00:16:21,520 --> 00:16:26,140
of business logic and if it's not in the

00:16:23,650 --> 00:16:27,940
model then where is it well what happens

00:16:26,140 --> 00:16:29,980
usually in PHP is you start using

00:16:27,940 --> 00:16:33,010
service classes and that begins to leech

00:16:29,980 --> 00:16:34,720
the logic out of the model all right so

00:16:33,010 --> 00:16:36,610
I would argue that this stuff right here

00:16:34,720 --> 00:16:38,230
is an important chunk of business logic

00:16:36,610 --> 00:16:39,760
it doesn't look like it because it's

00:16:38,230 --> 00:16:41,050
composed of just setters but it's really

00:16:39,760 --> 00:16:42,940
an implicit way of saying some really

00:16:41,050 --> 00:16:44,770
important things like what is the

00:16:42,940 --> 00:16:46,690
relationship between a task and a to-do

00:16:44,770 --> 00:16:48,310
list what are the required things that I

00:16:46,690 --> 00:16:49,870
have to give in order to create a task

00:16:48,310 --> 00:16:51,790
you know it has to be a description and

00:16:49,870 --> 00:16:53,290
priority that's important stuff here but

00:16:51,790 --> 00:16:54,520
you can't see it because it's in the

00:16:53,290 --> 00:16:56,620
form of setters

00:16:54,520 --> 00:16:57,940
all right so if we turn once again back

00:16:56,620 --> 00:16:59,470
to the good book you'll find a

00:16:57,940 --> 00:17:02,650
description of what it is we've written

00:16:59,470 --> 00:17:04,870
it says organizes business logic by

00:17:02,650 --> 00:17:06,910
procedures where each procedure handles

00:17:04,870 --> 00:17:09,610
a single request from the presentation

00:17:06,910 --> 00:17:11,709
that's close to what we've done except

00:17:09,610 --> 00:17:12,490
it's not talking about a domain model is

00:17:11,709 --> 00:17:14,500
talking about something called

00:17:12,490 --> 00:17:16,300
transaction scripts which are kind of a

00:17:14,500 --> 00:17:17,560
halfway point like on one end of a scale

00:17:16,300 --> 00:17:19,420
you've got crud on the other end you've

00:17:17,560 --> 00:17:20,860
got domain model and transaction scripts

00:17:19,420 --> 00:17:22,839
are this nice little place in the middle

00:17:20,860 --> 00:17:25,120
all right and that's not a bad place to

00:17:22,839 --> 00:17:26,470
be actually I mean transaction scripts

00:17:25,120 --> 00:17:27,850
are very simple I mean you've seen how

00:17:26,470 --> 00:17:29,590
we can implement one in just a couple

00:17:27,850 --> 00:17:31,210
minutes and they're definitely more

00:17:29,590 --> 00:17:33,640
flexible than a crud application at

00:17:31,210 --> 00:17:35,560
least the problem with the transaction

00:17:33,640 --> 00:17:37,060
script is that they don't scale flight

00:17:35,560 --> 00:17:38,410
as well and I don't mean performance

00:17:37,060 --> 00:17:40,350
scaling which I'm actually not that

00:17:38,410 --> 00:17:42,400
interested in I'm talking about

00:17:40,350 --> 00:17:43,990
complexity scaling like as our

00:17:42,400 --> 00:17:45,700
application gets harder and more

00:17:43,990 --> 00:17:47,800
complicated and adds more features it

00:17:45,700 --> 00:17:51,130
will get Messier and it will have more

00:17:47,800 --> 00:17:52,090
concerns to deal with so if that's the

00:17:51,130 --> 00:17:54,220
kind of stuff that we're worried about

00:17:52,090 --> 00:17:57,160
being in a model what belongs in the

00:17:54,220 --> 00:17:59,470
service layer then well if it's not this

00:17:57,160 --> 00:18:01,390
stuff then I would argue it's this stuff

00:17:59,470 --> 00:18:03,540
this is the kind of thing that you might

00:18:01,390 --> 00:18:05,650
want to put in a service layer okay

00:18:03,540 --> 00:18:07,900
ultimately a service layer is meant to

00:18:05,650 --> 00:18:10,120
be about orchestration this is the key

00:18:07,900 --> 00:18:12,310
word here it is not meant to do anything

00:18:10,120 --> 00:18:14,320
on its own it is meant to tie together a

00:18:12,310 --> 00:18:16,870
bunch of different concerns that are

00:18:14,320 --> 00:18:18,820
standalone but tie them together into an

00:18:16,870 --> 00:18:21,550
application and that's why I like the

00:18:18,820 --> 00:18:22,330
term application service personally all

00:18:21,550 --> 00:18:24,460
right

00:18:22,330 --> 00:18:26,770
so things like database transactions

00:18:24,460 --> 00:18:28,630
security may being notifications or

00:18:26,770 --> 00:18:29,890
logging perhaps even bulk operations if

00:18:28,630 --> 00:18:32,140
you want to get fancy these are things

00:18:29,890 --> 00:18:34,390
you could conceivably put inside of a

00:18:32,140 --> 00:18:36,400
inside of a service layer the key

00:18:34,390 --> 00:18:38,380
pattern here is facade we are not adding

00:18:36,400 --> 00:18:40,660
behavior to any of these models we're

00:18:38,380 --> 00:18:42,220
just tying them together right so you've

00:18:40,660 --> 00:18:44,860
often heard the term fat model skinny

00:18:42,220 --> 00:18:47,740
controller think fat model skinny

00:18:44,860 --> 00:18:48,850
service layer as well all right so with

00:18:47,740 --> 00:18:50,530
that stuff in mind let's do some

00:18:48,850 --> 00:18:52,420
rethinking about what it is we've built

00:18:50,530 --> 00:18:53,830
if we look at our service here you can

00:18:52,420 --> 00:18:55,600
kind of break the stuff down into two

00:18:53,830 --> 00:18:57,880
categories we have write methods which

00:18:55,600 --> 00:18:59,890
change something like add tasks and we

00:18:57,880 --> 00:19:02,050
have read methods like find by ID find

00:18:59,890 --> 00:19:03,910
by latest list and the reads outnumber

00:19:02,050 --> 00:19:04,430
the writes so let's give them attention

00:19:03,910 --> 00:19:07,240
first

00:19:04,430 --> 00:19:12,350
so we're going to remodel our reading by

00:19:07,240 --> 00:19:13,850
refactoring our repository again okay so

00:19:12,350 --> 00:19:16,040
if we look back at our service layer

00:19:13,850 --> 00:19:18,110
here this is this is pretty simple code

00:19:16,040 --> 00:19:20,720
it's easy to follow but this stuff right

00:19:18,110 --> 00:19:22,490
here is basically adding behavior all

00:19:20,720 --> 00:19:24,080
right we want to try and make our

00:19:22,490 --> 00:19:25,760
service layer as thin as possible and

00:19:24,080 --> 00:19:28,130
this doesn't really belong here so we

00:19:25,760 --> 00:19:29,480
need to get it out I mean the question

00:19:28,130 --> 00:19:31,220
is where should it go we're clearly

00:19:29,480 --> 00:19:33,230
using some sort of like repository or

00:19:31,220 --> 00:19:34,730
database layer here which doesn't throw

00:19:33,230 --> 00:19:36,260
exceptions when something is not found

00:19:34,730 --> 00:19:38,480
so how are we going to shoehorn that

00:19:36,260 --> 00:19:40,610
behavior in I mean it's not like we can

00:19:38,480 --> 00:19:42,860
just go in and you know create objects

00:19:40,610 --> 00:19:45,920
that work how we think they should oh

00:19:42,860 --> 00:19:47,720
wait we can so let's try that for a

00:19:45,920 --> 00:19:50,300
change all right so let's create an

00:19:47,720 --> 00:19:51,740
interface to do repository these are the

00:19:50,300 --> 00:19:52,960
methods that are important on it these

00:19:51,740 --> 00:19:56,000
are the ones we're going to use all

00:19:52,960 --> 00:19:57,350
right so we'll start off with that and

00:19:56,000 --> 00:19:59,510
we're just going to go ahead and create

00:19:57,350 --> 00:20:02,390
a to-do database repository that

00:19:59,510 --> 00:20:03,710
implements that interface okay and then

00:20:02,390 --> 00:20:05,150
we're gonna have a fine by D and we'll

00:20:03,710 --> 00:20:07,610
basically plot the exact same code in

00:20:05,150 --> 00:20:09,620
there that's again a simple extra

00:20:07,610 --> 00:20:11,300
extract class refactoring alright and

00:20:09,620 --> 00:20:12,800
this feels better it's much more

00:20:11,300 --> 00:20:14,900
consistent here it's only in one place

00:20:12,800 --> 00:20:16,850
it's only in one way now you might be

00:20:14,900 --> 00:20:18,410
thinking that's cool Ross but I'm not

00:20:16,850 --> 00:20:19,670
made of time or money I don't have time

00:20:18,410 --> 00:20:20,690
to run around with a raw database

00:20:19,670 --> 00:20:22,340
connection and do all this object

00:20:20,690 --> 00:20:24,650
mapping myself that does not interest me

00:20:22,340 --> 00:20:26,390
I'm busy doing it with doctorin or

00:20:24,650 --> 00:20:27,980
propell or whatever it is you know that

00:20:26,390 --> 00:20:29,620
you want and that doesn't throw

00:20:27,980 --> 00:20:31,840
exceptions so how can I make that happen

00:20:29,620 --> 00:20:35,720
well you want to know how to fix that

00:20:31,840 --> 00:20:37,760
boom fixed all right all we did was

00:20:35,720 --> 00:20:39,350
instead of using their repository

00:20:37,760 --> 00:20:40,850
directly we wrapped it in our repository

00:20:39,350 --> 00:20:43,010
and I know you're thinking like the

00:20:40,850 --> 00:20:45,890
repository section that's crazy

00:20:43,010 --> 00:20:48,170
but honestly it's a matter of not which

00:20:45,890 --> 00:20:49,400
object it is it's a matter of interfaces

00:20:48,170 --> 00:20:52,070
yeah that's what we really care about

00:20:49,400 --> 00:20:53,570
and this is the interface that we care

00:20:52,070 --> 00:20:55,580
about the to do repository is the

00:20:53,570 --> 00:20:58,250
important interface in the circumstance

00:20:55,580 --> 00:21:00,200
all right this is doctrines repository

00:20:58,250 --> 00:21:02,000
interface and it is a very very good

00:21:00,200 --> 00:21:04,010
interface for doctrine I like doctrine a

00:21:02,000 --> 00:21:05,870
lot that is not a knock on it but

00:21:04,010 --> 00:21:07,940
between this interface and this

00:21:05,870 --> 00:21:09,800
interface this is the one I want to

00:21:07,940 --> 00:21:11,360
support this is the one I deal with and

00:21:09,800 --> 00:21:12,870
this is the one I care about so that's

00:21:11,360 --> 00:21:15,030
what you should be using

00:21:12,870 --> 00:21:17,100
all right so if we cut back to the to do

00:21:15,030 --> 00:21:20,940
service having made these changes but a

00:21:17,100 --> 00:21:22,170
Bing but a boom much simpler now finally

00:21:20,940 --> 00:21:23,640
this list is a little bit more

00:21:22,170 --> 00:21:25,940
complicated because you can make an

00:21:23,640 --> 00:21:28,020
argument that this stuff right here is

00:21:25,940 --> 00:21:30,750
orchestration we are orchestrating how a

00:21:28,020 --> 00:21:33,750
cash and a repository behave in unison

00:21:30,750 --> 00:21:35,370
but at the same time it kind of doesn't

00:21:33,750 --> 00:21:36,750
make sense though because the service

00:21:35,370 --> 00:21:38,610
class is meant to tie things together

00:21:36,750 --> 00:21:40,320
and this is still kind of adding

00:21:38,610 --> 00:21:42,000
behavior which is not what we want just

00:21:40,320 --> 00:21:43,500
think about it from a unit test point of

00:21:42,000 --> 00:21:44,160
view again here we would be testing two

00:21:43,500 --> 00:21:47,490
different things

00:21:44,160 --> 00:21:49,020
all right so boom let's extract that

00:21:47,490 --> 00:21:51,480
code let's bring it to the repository or

00:21:49,020 --> 00:21:53,070
cleaner much simpler you could also go a

00:21:51,480 --> 00:21:54,660
step further here though because we're

00:21:53,070 --> 00:21:55,920
using a single interface for this stuff

00:21:54,660 --> 00:21:57,480
that's separate from a concrete

00:21:55,920 --> 00:21:59,400
implementation I could do something like

00:21:57,480 --> 00:22:00,809
this I could create a caching to do

00:21:59,400 --> 00:22:03,300
repository which is basically a

00:22:00,809 --> 00:22:05,700
decorator object it takes an actual back

00:22:03,300 --> 00:22:07,320
actual inner repository which could be

00:22:05,700 --> 00:22:10,230
the database one a block one whatever

00:22:07,320 --> 00:22:13,200
you want and just encapsulate that okay

00:22:10,230 --> 00:22:14,670
and that seems like a lot of objects so

00:22:13,200 --> 00:22:16,679
how would we tie this together well do

00:22:14,670 --> 00:22:18,120
it in your data and your di layer so you

00:22:16,679 --> 00:22:19,920
might start off with like a doctrine

00:22:18,120 --> 00:22:21,179
repository you put your own wrapper

00:22:19,920 --> 00:22:23,640
around that to get the interface you

00:22:21,179 --> 00:22:24,929
want and then you have a caching thing

00:22:23,640 --> 00:22:26,670
on top of that which you can turn on or

00:22:24,929 --> 00:22:27,570
off if you so choose and then you

00:22:26,670 --> 00:22:29,760
encapsulate the whole thing with a

00:22:27,570 --> 00:22:31,200
service all right and I know that sounds

00:22:29,760 --> 00:22:33,270
crazy all right it looks totally

00:22:31,200 --> 00:22:35,070
over-engineered but if you go in for me

00:22:33,270 --> 00:22:37,350
and you go home and try it I guarantee

00:22:35,070 --> 00:22:40,170
you'll notice a couple things one unit

00:22:37,350 --> 00:22:42,090
testing gets a lot lot easier too you

00:22:40,170 --> 00:22:44,280
have a lot more composability in turning

00:22:42,090 --> 00:22:46,290
like features on and off and three

00:22:44,280 --> 00:22:49,890
you'll never want to go back to the old

00:22:46,290 --> 00:22:51,720
way promise ok if you ever have doubts

00:22:49,890 --> 00:22:54,330
about this just remember the inverse

00:22:51,720 --> 00:22:57,150
biggie wall which is commonly stated as

00:22:54,330 --> 00:23:00,059
moe classes Moe decoupling and reduced

00:22:57,150 --> 00:23:03,660
overall design issues admittedly not as

00:23:00,059 --> 00:23:05,610
catchy but ok now in particular finder

00:23:03,660 --> 00:23:08,280
methods do proliferate at a crazy rate

00:23:05,610 --> 00:23:09,630
especially if your database objects are

00:23:08,280 --> 00:23:10,950
too big so you may have a design issue

00:23:09,630 --> 00:23:13,380
you want to go in and shrink those back

00:23:10,950 --> 00:23:14,910
down again but a different way of doing

00:23:13,380 --> 00:23:17,040
it would be to consider something like a

00:23:14,910 --> 00:23:19,260
criteria pattern so instead of like

00:23:17,040 --> 00:23:21,090
individual search methods you have one

00:23:19,260 --> 00:23:22,740
that takes multiple parameters to kind

00:23:21,090 --> 00:23:24,779
of describe the search you want to do

00:23:22,740 --> 00:23:26,490
that's the common advice anyways but it

00:23:24,779 --> 00:23:28,289
turns out that building your criteria a

00:23:26,490 --> 00:23:30,720
pattern thing here from scratch is

00:23:28,289 --> 00:23:31,590
surprisingly difficult so you might want

00:23:30,720 --> 00:23:32,909
to use something like doctor and

00:23:31,590 --> 00:23:36,210
criteria in order to give you a head

00:23:32,909 --> 00:23:37,620
start but it's not that bad now we still

00:23:36,210 --> 00:23:40,020
need to do something about improving the

00:23:37,620 --> 00:23:41,279
writing in our application but let's

00:23:40,020 --> 00:23:42,450
take a brief interlude here and talk

00:23:41,279 --> 00:23:44,190
about what probably seems like an

00:23:42,450 --> 00:23:45,720
extreme proliferation classes in our

00:23:44,190 --> 00:23:47,250
application at this point because it's

00:23:45,720 --> 00:23:49,649
it's really going all over the place

00:23:47,250 --> 00:23:52,890
right especially we're only focusing on

00:23:49,649 --> 00:23:54,659
one object right now the to-do list but

00:23:52,890 --> 00:23:56,909
that's already got a service it's got a

00:23:54,659 --> 00:23:58,770
repository and as we continue to add

00:23:56,909 --> 00:24:00,270
stuff like a task without our I need a

00:23:58,770 --> 00:24:02,730
service it will need a repository as

00:24:00,270 --> 00:24:03,990
well you'll need tags and then you just

00:24:02,730 --> 00:24:05,220
melt some cheese on top of this sucker

00:24:03,990 --> 00:24:07,890
and you've got a big steamin pile

00:24:05,220 --> 00:24:09,750
lasagna code okay which if you've never

00:24:07,890 --> 00:24:12,029
worked a little zhonya code it is the

00:24:09,750 --> 00:24:14,549
worst type of code all right it is the

00:24:12,029 --> 00:24:15,840
opposite of spaghetti code where you

00:24:14,549 --> 00:24:17,309
basically have so many layers that are

00:24:15,840 --> 00:24:18,659
stacked up on top of each other that if

00:24:17,309 --> 00:24:20,090
you want to modify anything you have to

00:24:18,659 --> 00:24:23,390
cut through all of them at the same time

00:24:20,090 --> 00:24:25,320
true story I once worked on a on an

00:24:23,390 --> 00:24:27,510
application where if you wanted to add a

00:24:25,320 --> 00:24:29,429
new field from the database level all

00:24:27,510 --> 00:24:31,230
the way up to the user interface then

00:24:29,429 --> 00:24:35,809
you had to modify the code in seven

00:24:31,230 --> 00:24:39,299
different places it was the worst okay

00:24:35,809 --> 00:24:40,980
so don't ever build this please instead

00:24:39,299 --> 00:24:42,419
try and reason about what you're doing

00:24:40,980 --> 00:24:44,159
don't just follow some template because

00:24:42,419 --> 00:24:46,500
some guy at a conference told you what

00:24:44,159 --> 00:24:48,390
to do one way you could approach this

00:24:46,500 --> 00:24:49,799
differently is to be more intelligent

00:24:48,390 --> 00:24:52,140
about how you design your models

00:24:49,799 --> 00:24:54,330
something the DVD guys do a lot is

00:24:52,140 --> 00:24:56,010
create aggregates which is basically

00:24:54,330 --> 00:24:58,200
where you have an aggregate root that's

00:24:56,010 --> 00:25:00,029
the to-do list in this case and it

00:24:58,200 --> 00:25:02,850
basically manages the lifecycle of

00:25:00,029 --> 00:25:04,590
models that only make sense when used by

00:25:02,850 --> 00:25:05,850
it so you might have a single to do

00:25:04,590 --> 00:25:07,620
service here with lots of collaborators

00:25:05,850 --> 00:25:09,600
like a repository an audit log whatever

00:25:07,620 --> 00:25:11,669
but you're talking about a group of

00:25:09,600 --> 00:25:13,260
models rather than an individual one and

00:25:11,669 --> 00:25:16,559
this can cut down on what seems like a

00:25:13,260 --> 00:25:17,789
crazy number classes now over time you

00:25:16,559 --> 00:25:19,260
might be tempted to keep making these

00:25:17,789 --> 00:25:21,000
bigger and bigger like you say well all

00:25:19,260 --> 00:25:22,710
to-do lists are actually done by a user

00:25:21,000 --> 00:25:25,559
so this all belongs into the user

00:25:22,710 --> 00:25:27,299
service technically but that's probably

00:25:25,559 --> 00:25:30,210
too big all right you want to keep it a

00:25:27,299 --> 00:25:31,889
bit smaller so take the user service one

00:25:30,210 --> 00:25:33,600
way the to do service another there and

00:25:31,889 --> 00:25:35,130
if they have to communicate with each

00:25:33,600 --> 00:25:35,580
other that's okay

00:25:35,130 --> 00:25:37,080
you can

00:25:35,580 --> 00:25:40,080
have references between them or

00:25:37,080 --> 00:25:41,940
something like that but don't just like

00:25:40,080 --> 00:25:43,560
tie them together because that are that

00:25:41,940 --> 00:25:46,260
way in the database I mean the user

00:25:43,560 --> 00:25:48,690
could be split off in the future to a an

00:25:46,260 --> 00:25:50,010
external REST API or something and then

00:25:48,690 --> 00:25:54,420
you're kind of what's the technical term

00:25:50,010 --> 00:25:55,170
screwed okay so if you're going to do

00:25:54,420 --> 00:25:56,490
this and you're going to let them

00:25:55,170 --> 00:25:58,070
communicate between each other you know

00:25:56,490 --> 00:26:00,180
it goes really really well here

00:25:58,070 --> 00:26:02,280
interfaces interfaces go great with

00:26:00,180 --> 00:26:05,160
everything don't just pass the raw user

00:26:02,280 --> 00:26:08,160
pass in a value object pass in an ID

00:26:05,160 --> 00:26:09,810
pass in some kind of alternate

00:26:08,160 --> 00:26:11,970
implementation of a user something more

00:26:09,810 --> 00:26:13,860
specific to the to do list whatever you

00:26:11,970 --> 00:26:14,340
want all right but interfaces are your

00:26:13,860 --> 00:26:16,440
friend

00:26:14,340 --> 00:26:18,630
I remember that services aren't only for

00:26:16,440 --> 00:26:20,130
entities they're basically facades and

00:26:18,630 --> 00:26:22,320
facades are meant to simplify any

00:26:20,130 --> 00:26:24,630
interface so the scale can differ

00:26:22,320 --> 00:26:28,350
anywhere from like it's one class to ten

00:26:24,630 --> 00:26:30,990
classes to 20 classes to whatever all

00:26:28,350 --> 00:26:33,210
right just remember the quality of

00:26:30,990 --> 00:26:35,130
implementation matters if you have a

00:26:33,210 --> 00:26:37,440
really crappy service layer that nobody

00:26:35,130 --> 00:26:39,120
likes working with I guarantee you your

00:26:37,440 --> 00:26:41,160
colleagues will find you in a back alley

00:26:39,120 --> 00:26:43,520
one night and stab you with a shiv made

00:26:41,160 --> 00:26:48,090
from the plastic of your own keyboard

00:26:43,520 --> 00:26:50,370
don't be that guy so with that in mind

00:26:48,090 --> 00:26:52,530
let's talk about remodeling the writing

00:26:50,370 --> 00:26:54,330
in our application when we last left

00:26:52,530 --> 00:26:55,620
that stuff we are here on the add task

00:26:54,330 --> 00:26:57,540
method and we were talking about how

00:26:55,620 --> 00:27:00,630
this stuff right here is the business

00:26:57,540 --> 00:27:02,340
logic in our application okay so we're

00:27:00,630 --> 00:27:04,410
going to bring that stuff to the model

00:27:02,340 --> 00:27:05,580
where it rightfully belongs all right

00:27:04,410 --> 00:27:07,110
and that can be pretty straightforward

00:27:05,580 --> 00:27:09,120
again we're just going to have a method

00:27:07,110 --> 00:27:11,160
add tasks we pass these things into it

00:27:09,120 --> 00:27:12,420
and it's set up now and the important

00:27:11,160 --> 00:27:14,640
thing is that we both set up the task

00:27:12,420 --> 00:27:17,940
and we do the binding to the to-do list

00:27:14,640 --> 00:27:20,220
here okay now it is still possible to

00:27:17,940 --> 00:27:22,740
build this thing incorrectly inside the

00:27:20,220 --> 00:27:25,230
model so the task should still enforce

00:27:22,740 --> 00:27:26,670
its own integrity so we could require it

00:27:25,230 --> 00:27:28,320
with a constructor that way you can't

00:27:26,670 --> 00:27:31,380
instantiate it unless you have the

00:27:28,320 --> 00:27:34,350
required stuff now that's great in

00:27:31,380 --> 00:27:36,510
theory but there is a catch here many of

00:27:34,350 --> 00:27:38,820
your own rooms still need a reference on

00:27:36,510 --> 00:27:40,530
the child object the task that refers to

00:27:38,820 --> 00:27:42,300
the parent because they can't magically

00:27:40,530 --> 00:27:43,890
figure out that one is you know the

00:27:42,300 --> 00:27:46,770
child or the other they need the ID the

00:27:43,890 --> 00:27:48,330
reference etcetera etc so if you have to

00:27:46,770 --> 00:27:49,890
do this then you can pass it in

00:27:48,330 --> 00:27:54,299
the constructor you can hide it in some

00:27:49,890 --> 00:27:56,190
way that's okay it's a lesser sin but if

00:27:54,299 --> 00:27:57,929
you do do this do not compound your

00:27:56,190 --> 00:28:01,049
mistake by putting a getter and a setter

00:27:57,929 --> 00:28:03,630
for the to-do list on the task all right

00:28:01,049 --> 00:28:05,279
because that way lies madness all right

00:28:03,630 --> 00:28:08,549
so we're just pretending it's not there

00:28:05,279 --> 00:28:10,320
now once we turn back to the service

00:28:08,549 --> 00:28:12,029
having done this again it reads a little

00:28:10,320 --> 00:28:14,789
bit shorter it's a little bit more

00:28:12,029 --> 00:28:17,010
compact and it feels more like this is

00:28:14,789 --> 00:28:18,330
about orchestration right we're now

00:28:17,010 --> 00:28:20,309
tying together a bunch of different

00:28:18,330 --> 00:28:21,779
concerns the domain model is one of them

00:28:20,309 --> 00:28:23,789
but we're also tying together these

00:28:21,779 --> 00:28:25,590
other things and again that emphasizes

00:28:23,789 --> 00:28:27,260
the idea that this class is what brings

00:28:25,590 --> 00:28:31,769
stuff together to make an application

00:28:27,260 --> 00:28:33,120
okay so this also paves the way once we

00:28:31,769 --> 00:28:35,190
have these things in place to begin

00:28:33,120 --> 00:28:37,230
adding real business logic to your

00:28:35,190 --> 00:28:39,360
models and by real business logic I mean

00:28:37,230 --> 00:28:41,220
the type of BS examples you only see in

00:28:39,360 --> 00:28:42,990
talks like this like if I'm more than

00:28:41,220 --> 00:28:45,120
ten tasks we'll change the status to

00:28:42,990 --> 00:28:47,429
unrealistic who has these problems in

00:28:45,120 --> 00:28:50,490
your life I don't know but we'll pretend

00:28:47,429 --> 00:28:51,870
that this is a valid one a good hint

00:28:50,490 --> 00:28:53,970
that you're on the right track though is

00:28:51,870 --> 00:28:55,679
when you can write meaningful tests for

00:28:53,970 --> 00:28:57,179
your models if you can write your unit

00:28:55,679 --> 00:28:58,440
tests that actually cover something

00:28:57,179 --> 00:29:00,360
inside your models it means there's

00:28:58,440 --> 00:29:00,960
logic in there so you're on the right

00:29:00,360 --> 00:29:03,659
track

00:29:00,960 --> 00:29:05,070
okay but you won't be doing this long

00:29:03,659 --> 00:29:06,600
before you notice that you have some

00:29:05,070 --> 00:29:08,789
problems making everything work together

00:29:06,600 --> 00:29:10,440
I mean the model is the boss the model

00:29:08,789 --> 00:29:13,350
should be in charge but the model also

00:29:10,440 --> 00:29:16,049
has a very limited scope so right now

00:29:13,350 --> 00:29:17,850
we're fixing that by for example

00:29:16,049 --> 00:29:20,309
mentioning every single concern here

00:29:17,850 --> 00:29:21,929
inside the to do list service class so

00:29:20,309 --> 00:29:23,399
we just have another list if we wanted

00:29:21,929 --> 00:29:24,690
to add some extra piece of logging or

00:29:23,399 --> 00:29:26,370
whatever it would have to be injected

00:29:24,690 --> 00:29:29,399
here and put at the bottom the class as

00:29:26,370 --> 00:29:30,269
well so that's only going to grow over

00:29:29,399 --> 00:29:32,100
time it's going to add more

00:29:30,269 --> 00:29:34,649
collaborators more complexity so on and

00:29:32,100 --> 00:29:36,870
so forth also what happens when we have

00:29:34,649 --> 00:29:38,580
conditional logic inside of our models

00:29:36,870 --> 00:29:40,559
like how are we going to send an email

00:29:38,580 --> 00:29:41,909
every time we get over ten tasks for

00:29:40,559 --> 00:29:44,610
example are we going to like duplicate

00:29:41,909 --> 00:29:46,230
that check here inside the study that's

00:29:44,610 --> 00:29:48,570
silly that's the opposite of everything

00:29:46,230 --> 00:29:50,100
we've been trying to do and then finally

00:29:48,570 --> 00:29:51,750
what happens if you have to communicate

00:29:50,100 --> 00:29:53,100
like over a network like send these

00:29:51,750 --> 00:29:56,100
things automatically to a printer or

00:29:53,100 --> 00:29:57,419
whatever that's that's like async that

00:29:56,100 --> 00:29:59,250
could be really really hard to do and

00:29:57,419 --> 00:30:00,390
the service shouldn't be necessarily

00:29:59,250 --> 00:30:03,120
caring about that

00:30:00,390 --> 00:30:07,470
so we need something new something

00:30:03,120 --> 00:30:09,299
better something event ear yes the main

00:30:07,470 --> 00:30:10,380
events that would work now if you're not

00:30:09,299 --> 00:30:11,790
familiar with the main events they're a

00:30:10,380 --> 00:30:13,890
really really common pattern that you're

00:30:11,790 --> 00:30:15,330
pricing and jQuery you know that thing

00:30:13,890 --> 00:30:18,210
that runs in browsers

00:30:15,330 --> 00:30:19,770
it's an observer and we're just going to

00:30:18,210 --> 00:30:21,929
use it in a fashion you might not have

00:30:19,770 --> 00:30:23,610
seen before all right so I'm going to

00:30:21,929 --> 00:30:25,350
throw a couple new lines of code here on

00:30:23,610 --> 00:30:28,350
the screen at once don't flip out or

00:30:25,350 --> 00:30:30,600
anything all right here we go we're

00:30:28,350 --> 00:30:32,520
gonna have this raised method and then

00:30:30,600 --> 00:30:34,470
we're going to toss in a new task added

00:30:32,520 --> 00:30:35,700
event and that's going to take whatever

00:30:34,470 --> 00:30:37,980
the important things were that just

00:30:35,700 --> 00:30:39,270
changed okay so let's talk about the

00:30:37,980 --> 00:30:41,640
event first because that's the easiest

00:30:39,270 --> 00:30:44,160
thing here it's really just a message

00:30:41,640 --> 00:30:46,200
okay we're going to pass these things in

00:30:44,160 --> 00:30:47,490
here through the constructor and then

00:30:46,200 --> 00:30:48,990
we're going to probably put some getters

00:30:47,490 --> 00:30:50,820
on here so you can read it but it is

00:30:48,990 --> 00:30:52,950
basically a simple immutable little

00:30:50,820 --> 00:30:54,360
message object it is no real logic of

00:30:52,950 --> 00:30:56,130
its own and that might seem kind of hip

00:30:54,360 --> 00:30:57,360
hip hip equivocal is the word I'm

00:30:56,130 --> 00:30:58,620
looking for it might seem kind of

00:30:57,360 --> 00:31:00,690
hypocritical because I've been to

00:30:58,620 --> 00:31:01,799
ranting about an e me the whole time but

00:31:00,690 --> 00:31:05,309
think about this more like a data

00:31:01,799 --> 00:31:06,600
structure than an actual object okay so

00:31:05,309 --> 00:31:08,880
we're going to set up this task added

00:31:06,600 --> 00:31:10,710
event now that's pretty straightforward

00:31:08,880 --> 00:31:13,860
but what about this raise method what is

00:31:10,710 --> 00:31:15,120
that thing a moe bobber well we take the

00:31:13,860 --> 00:31:17,340
to-do list here we're going to add a few

00:31:15,120 --> 00:31:19,559
more lines of code bear with me we're

00:31:17,340 --> 00:31:21,570
going to have a pending events array all

00:31:19,559 --> 00:31:23,730
right starts off empty and the raise

00:31:21,570 --> 00:31:27,059
method just depends an event to that

00:31:23,730 --> 00:31:28,530
array and then finally we have an extra

00:31:27,059 --> 00:31:31,950
method here release events sometimes

00:31:28,530 --> 00:31:34,230
called DQ or collect all right and it

00:31:31,950 --> 00:31:35,940
just returns a copy of whatever events

00:31:34,230 --> 00:31:37,890
are in there and then resets it so it

00:31:35,940 --> 00:31:40,860
kind of like unloads all the pending

00:31:37,890 --> 00:31:43,130
events it returns this stuff all right

00:31:40,860 --> 00:31:45,299
now the only thing a good point here

00:31:43,130 --> 00:31:47,340
this is an excellent use case for a

00:31:45,299 --> 00:31:49,049
trait it's not enough code for a base

00:31:47,340 --> 00:31:50,370
class certainly doesn't justify it but

00:31:49,049 --> 00:31:52,049
it's just enough you don't want to

00:31:50,370 --> 00:31:54,720
duplicate it everywhere so trait would

00:31:52,049 --> 00:31:55,740
be a good move here now the only thing

00:31:54,720 --> 00:31:57,330
we're missing at this point is a

00:31:55,740 --> 00:31:59,549
dispatcher because we're not going to

00:31:57,330 --> 00:32:00,840
bind every single listener to every

00:31:59,549 --> 00:32:03,090
single model that'd be hugely

00:32:00,840 --> 00:32:04,410
inefficient and total waste all right so

00:32:03,090 --> 00:32:06,690
we're going to take a dispatcher here

00:32:04,410 --> 00:32:08,640
now we would probably do that inside the

00:32:06,690 --> 00:32:10,350
service layer so we would kick out all

00:32:08,640 --> 00:32:11,030
these individual concerns like the auto

00:32:10,350 --> 00:32:12,290
logged

00:32:11,030 --> 00:32:14,780
learn stuff like that and we would just

00:32:12,290 --> 00:32:16,370
replace that stuff with dispatching

00:32:14,780 --> 00:32:17,900
these events and then things like

00:32:16,370 --> 00:32:20,600
sending the email for example could be

00:32:17,900 --> 00:32:22,160
relegated out of the service and into an

00:32:20,600 --> 00:32:23,870
email listener object where it just

00:32:22,160 --> 00:32:25,760
waits for whatever the proper event is

00:32:23,870 --> 00:32:26,510
and then triggers the same stuff all

00:32:25,760 --> 00:32:28,190
right

00:32:26,510 --> 00:32:29,510
and this is really really loosely

00:32:28,190 --> 00:32:32,810
coupled at this point it might seem like

00:32:29,510 --> 00:32:34,370
a lot of boilerplate but at the same

00:32:32,810 --> 00:32:35,840
time you can reuse these listener

00:32:34,370 --> 00:32:36,920
classes for all sorts of things they

00:32:35,840 --> 00:32:39,170
often have a common set of dependencies

00:32:36,920 --> 00:32:40,670
and the listener classes themselves are

00:32:39,170 --> 00:32:42,050
meant to be thin they're kind of like

00:32:40,670 --> 00:32:43,490
controllers in their own right so

00:32:42,050 --> 00:32:45,010
they're just referring the work off to

00:32:43,490 --> 00:32:47,570
something else that's actually doing it

00:32:45,010 --> 00:32:51,170
okay so this works out really really

00:32:47,570 --> 00:32:52,880
well then and now we can also begin to

00:32:51,170 --> 00:32:55,310
dispatch multiple events if we want for

00:32:52,880 --> 00:32:56,720
example you can send 0s with the method

00:32:55,310 --> 00:32:58,610
you can send lots of events with the

00:32:56,720 --> 00:33:00,170
method and it's easy to tie this stuff

00:32:58,610 --> 00:33:02,390
together just add events when you need

00:33:00,170 --> 00:33:04,670
them so there are a couple nice things

00:33:02,390 --> 00:33:06,290
about domain events as a whole we get to

00:33:04,670 --> 00:33:07,640
keep the logic here in the model where

00:33:06,290 --> 00:33:10,850
it belongs which has been a central

00:33:07,640 --> 00:33:12,230
theme it prevents a big ball of mud from

00:33:10,850 --> 00:33:13,790
appearing within our service so as we

00:33:12,230 --> 00:33:15,410
get more collaborators and more little

00:33:13,790 --> 00:33:17,030
bits of logic that accumulate there over

00:33:15,410 --> 00:33:19,000
time we've now reduced that to kind of a

00:33:17,030 --> 00:33:21,110
fixed amount of functionality and

00:33:19,000 --> 00:33:22,640
individually the pieces are all thin and

00:33:21,110 --> 00:33:24,170
easy to test if I'm writing unit tests

00:33:22,640 --> 00:33:26,540
for the model I check that it raises the

00:33:24,170 --> 00:33:28,490
events if I'm testing the service layer

00:33:26,540 --> 00:33:29,870
then I'm checking that the events get

00:33:28,490 --> 00:33:31,550
the floor from one thing to another and

00:33:29,870 --> 00:33:33,530
then if I'm testing the listeners here

00:33:31,550 --> 00:33:35,030
I'm testing that they pass them off to

00:33:33,530 --> 00:33:37,120
the appropriate collaborators every

00:33:35,030 --> 00:33:39,440
piece here is really really small and

00:33:37,120 --> 00:33:41,450
it's also a great way to communicate

00:33:39,440 --> 00:33:43,010
over a network because you can simply

00:33:41,450 --> 00:33:45,110
serialize these little immutable data

00:33:43,010 --> 00:33:46,640
structures pump them off over a network

00:33:45,110 --> 00:33:48,560
for whatever piece of communication and

00:33:46,640 --> 00:33:50,480
then have things happen out of process

00:33:48,560 --> 00:33:52,850
that's one of the reasons why we only

00:33:50,480 --> 00:33:54,140
pass scalars or simple value objects

00:33:52,850 --> 00:33:56,630
here instead because you can't change

00:33:54,140 --> 00:33:58,540
those you don't let events change in the

00:33:56,630 --> 00:34:00,650
past unless you have a time machine

00:33:58,540 --> 00:34:02,480
there's some less nice things about

00:34:00,650 --> 00:34:04,210
domain events though and they basically

00:34:02,480 --> 00:34:07,070
all boil down to exactly the same thing

00:34:04,210 --> 00:34:08,570
humans hate debugging events especially

00:34:07,070 --> 00:34:10,580
if it's an event on an event on an event

00:34:08,570 --> 00:34:12,260
on an event in practice that doesn't

00:34:10,580 --> 00:34:13,490
happen nearly as often as you fear but

00:34:12,260 --> 00:34:14,810
if you are going to use the main events

00:34:13,490 --> 00:34:17,030
it's worth spending a few hours to build

00:34:14,810 --> 00:34:18,200
into development logging maybe some

00:34:17,030 --> 00:34:19,520
debug commands you can see whatever

00:34:18,200 --> 00:34:21,530
listeners are just kind of hanging there

00:34:19,520 --> 00:34:22,880
waiting for stuff to happen that gives

00:34:21,530 --> 00:34:23,590
you a much better overview of the system

00:34:22,880 --> 00:34:26,660
as a whole

00:34:23,590 --> 00:34:28,040
okay so we've been talking an awful lot

00:34:26,660 --> 00:34:29,510
about how to get the model on the

00:34:28,040 --> 00:34:30,920
service layer communication right but

00:34:29,510 --> 00:34:32,960
that's only half of the integration

00:34:30,920 --> 00:34:34,190
story here we also need to talk about

00:34:32,960 --> 00:34:37,220
how to consume the stuff from our

00:34:34,190 --> 00:34:40,490
controller and view alright so let's

00:34:37,220 --> 00:34:43,010
talk about that now the big danger that

00:34:40,490 --> 00:34:45,050
we have at this point here is that we

00:34:43,010 --> 00:34:46,640
are allowing full fledged access to the

00:34:45,050 --> 00:34:48,620
model in all the controllers

00:34:46,640 --> 00:34:50,030
we are just returning the entire model

00:34:48,620 --> 00:34:52,160
and letting you do whatever you want

00:34:50,030 --> 00:34:53,450
with it and in most cases that's going

00:34:52,160 --> 00:34:55,760
to go correctly we're going to pass it

00:34:53,450 --> 00:34:59,060
back into the task into the task service

00:34:55,760 --> 00:35:00,620
and you know add the task but if you

00:34:59,060 --> 00:35:02,540
have a new developer who's just coming

00:35:00,620 --> 00:35:03,950
to the project for example and they only

00:35:02,540 --> 00:35:05,660
follow their autocomplete they're like

00:35:03,950 --> 00:35:06,950
oh this is like a database map or I get

00:35:05,660 --> 00:35:08,450
the thing back and oh wait there's an

00:35:06,950 --> 00:35:10,040
ADD task method here and I just invoke

00:35:08,450 --> 00:35:11,930
that directly and oh I want to rename

00:35:10,040 --> 00:35:14,150
something too and oh wait I need to pass

00:35:11,930 --> 00:35:16,400
it in to save and there's like more ways

00:35:14,150 --> 00:35:17,900
to get this wrong than there are to get

00:35:16,400 --> 00:35:20,900
it right and that's the sign of a bad

00:35:17,900 --> 00:35:22,970
API so let's try and think about this in

00:35:20,900 --> 00:35:24,410
a different fashion all right because

00:35:22,970 --> 00:35:27,080
right now what we have is essentially

00:35:24,410 --> 00:35:28,670
some implicit communication or maybe

00:35:27,080 --> 00:35:30,410
even coupling between the model and the

00:35:28,670 --> 00:35:32,240
controller if you change one it's

00:35:30,410 --> 00:35:33,920
possible to maybe break the other the

00:35:32,240 --> 00:35:35,660
service layer is not being a good layer

00:35:33,920 --> 00:35:37,670
here it is basically letting the model

00:35:35,660 --> 00:35:39,560
run around and poke its nose into

00:35:37,670 --> 00:35:41,090
different places in the application

00:35:39,560 --> 00:35:44,210
where it doesn't belong alright it's

00:35:41,090 --> 00:35:46,370
like a bad puppy so you should instead

00:35:44,210 --> 00:35:50,450
do as a wise man once said and keep them

00:35:46,370 --> 00:35:53,030
separated at the hips so one of the ways

00:35:50,450 --> 00:35:54,890
we can do that is beginning to isolate

00:35:53,030 --> 00:35:56,060
these things from each other so we can

00:35:54,890 --> 00:35:58,640
bring in something into play called a

00:35:56,060 --> 00:35:59,900
view model if you're into mvvm stuff

00:35:58,640 --> 00:36:01,640
that's different than what I'm talking

00:35:59,900 --> 00:36:03,380
about here don't worry about it all

00:36:01,640 --> 00:36:05,900
right so it's a really really simple

00:36:03,380 --> 00:36:07,430
pattern all we do is instead of passing

00:36:05,900 --> 00:36:09,920
back the to-do list and the find by ID

00:36:07,430 --> 00:36:11,240
method we're going to wrap that in some

00:36:09,920 --> 00:36:13,370
other little simple object and I'm

00:36:11,240 --> 00:36:15,920
calling it a to-do DTO here which is

00:36:13,370 --> 00:36:17,630
short for data transfer object all right

00:36:15,920 --> 00:36:19,670
it's just transferring data it's again

00:36:17,630 --> 00:36:21,890
more like a message or a little thing

00:36:19,670 --> 00:36:23,690
like that okay and it's only going to

00:36:21,890 --> 00:36:25,910
give you a subset of the functionality

00:36:23,690 --> 00:36:27,770
here and it could be a decorator it

00:36:25,910 --> 00:36:30,410
could be copying stade it could be built

00:36:27,770 --> 00:36:31,460
by a cron job doesn't matter okay it's

00:36:30,410 --> 00:36:33,440
totally different thing and it's usually

00:36:31,460 --> 00:36:35,540
pretty much logic lists it might have a

00:36:33,440 --> 00:36:35,950
queue helper methods but that's kind of

00:36:35,540 --> 00:36:40,119
where it

00:36:35,950 --> 00:36:41,710
tops okay now another way of thinking

00:36:40,119 --> 00:36:43,359
about view models is also to bring

00:36:41,710 --> 00:36:45,640
structure to things that you often have

00:36:43,359 --> 00:36:49,000
implicitly like who here has ever had to

00:36:45,640 --> 00:36:51,280
build a crazy report out of some 14 line

00:36:49,000 --> 00:36:53,740
SQL query with a thousand joins in there

00:36:51,280 --> 00:36:56,290
right it happens all the stinking time

00:36:53,740 --> 00:36:59,020
and usually pass that back as some sort

00:36:56,290 --> 00:37:01,210
of data array that's totally untyped and

00:36:59,020 --> 00:37:02,559
you format it in one particular template

00:37:01,210 --> 00:37:04,930
and nobody can read or understand any

00:37:02,559 --> 00:37:06,790
more so a better way of doing that might

00:37:04,930 --> 00:37:08,559
be to actually put some form put some

00:37:06,790 --> 00:37:10,510
structure in that thing you know so

00:37:08,559 --> 00:37:12,190
create an annual goal report object that

00:37:10,510 --> 00:37:13,900
expects something in a particular format

00:37:12,190 --> 00:37:16,059
put your helper methods in there write

00:37:13,900 --> 00:37:17,790
unit tests for it right if you can do

00:37:16,059 --> 00:37:20,319
that kind of thing right here for a

00:37:17,790 --> 00:37:22,329
shapeless blob of data you can do the

00:37:20,319 --> 00:37:24,460
same thing for your models it's a really

00:37:22,329 --> 00:37:26,339
really powerful concept but at the end

00:37:24,460 --> 00:37:28,809
of the day it ain't rocket science okay

00:37:26,339 --> 00:37:30,730
so what I think is more interesting is

00:37:28,809 --> 00:37:34,569
if we reverse it and we used eto is not

00:37:30,730 --> 00:37:36,700
for output but for input instead which

00:37:34,569 --> 00:37:38,410
leads to us going commando by which I'm

00:37:36,700 --> 00:37:40,390
clearly referring to the 1980s onward

00:37:38,410 --> 00:37:43,720
Schwarzenegger classic all right case

00:37:40,390 --> 00:37:45,010
anybody is wondering now this is almost

00:37:43,720 --> 00:37:46,990
the same thing but in the opposite

00:37:45,010 --> 00:37:48,640
direction we're going to create a simple

00:37:46,990 --> 00:37:50,319
little message object which is called a

00:37:48,640 --> 00:37:51,549
command and I'm super lazy in this

00:37:50,319 --> 00:37:53,319
scenario and I'm just using public

00:37:51,549 --> 00:37:54,849
properties you might want a static

00:37:53,319 --> 00:37:56,670
factory or some getters and setters in

00:37:54,849 --> 00:37:58,630
real life but as I said I'm really lazy

00:37:56,670 --> 00:38:00,609
okay so I have this little command

00:37:58,630 --> 00:38:02,619
object and I'm going to fill it in in

00:38:00,609 --> 00:38:04,329
the controller all right so I'm just

00:38:02,619 --> 00:38:06,369
binding all that data from the request

00:38:04,329 --> 00:38:07,990
directly to it and at first glance this

00:38:06,369 --> 00:38:10,210
might seem like more lines of code than

00:38:07,990 --> 00:38:12,130
you we had in previous examples but it's

00:38:10,210 --> 00:38:14,559
simpler code and if you were using a

00:38:12,130 --> 00:38:17,829
serializer or using a form library this

00:38:14,559 --> 00:38:19,119
would be peanuts right so we're going to

00:38:17,829 --> 00:38:20,470
fill that command object in and then

00:38:19,119 --> 00:38:22,630
we're going to dump it into the deduce

00:38:20,470 --> 00:38:24,369
service but not into an ADD task method

00:38:22,630 --> 00:38:26,700
we're going to dump it into an execute

00:38:24,369 --> 00:38:29,049
method instead okay

00:38:26,700 --> 00:38:30,609
now the way this whole thing works as a

00:38:29,049 --> 00:38:32,890
flow is that the controller fills this

00:38:30,609 --> 00:38:34,480
message in it dumps it in the service

00:38:32,890 --> 00:38:36,760
and the service acts kind of like a

00:38:34,480 --> 00:38:38,589
router all right there's one Handler

00:38:36,760 --> 00:38:40,690
object out there for every command just

00:38:38,589 --> 00:38:43,000
one Handler okay but there's a whole

00:38:40,690 --> 00:38:44,740
list of them and the services job is act

00:38:43,000 --> 00:38:46,750
like a matchmaker and find this command

00:38:44,740 --> 00:38:47,950
soulmate you know the one hand where it

00:38:46,750 --> 00:38:49,330
was meant to be with

00:38:47,950 --> 00:38:52,120
all right so it pipes it on through to

00:38:49,330 --> 00:38:55,270
there all right now how does it do that

00:38:52,120 --> 00:38:57,310
well we replace the add task method with

00:38:55,270 --> 00:38:58,630
the execute as I said but it needs an

00:38:57,310 --> 00:39:01,180
actual strategy for doing that

00:38:58,630 --> 00:39:02,740
to be honest with you I don't care I

00:39:01,180 --> 00:39:04,630
mean you could do it get class in the

00:39:02,740 --> 00:39:06,340
command and map it in an array you could

00:39:04,630 --> 00:39:08,290
have command get name and then have that

00:39:06,340 --> 00:39:10,270
be the name of the handler you could

00:39:08,290 --> 00:39:11,410
have the command execute itself fowler

00:39:10,270 --> 00:39:12,700
likes this as long as there's no

00:39:11,410 --> 00:39:14,710
dependencies you know that you actually

00:39:12,700 --> 00:39:16,810
need extra which there always are but

00:39:14,710 --> 00:39:19,540
anyways this is this is you know

00:39:16,810 --> 00:39:21,970
whatever strategy works best for you and

00:39:19,540 --> 00:39:24,550
your framework I don't care all right

00:39:21,970 --> 00:39:26,170
so what goes in a handler then well it's

00:39:24,550 --> 00:39:27,580
basically everything that's left over

00:39:26,170 --> 00:39:29,200
which in this case turns out to be not

00:39:27,580 --> 00:39:32,050
much we just look it up in the

00:39:29,200 --> 00:39:33,730
repository we add the tasks and maybe we

00:39:32,050 --> 00:39:35,980
dispatch the demand vents but that's

00:39:33,730 --> 00:39:37,510
pretty much it and this might seem like

00:39:35,980 --> 00:39:39,220
a lot of warmer plate but the entire

00:39:37,510 --> 00:39:41,860
service now is completely reusable

00:39:39,220 --> 00:39:43,810
completely composable and this stuff can

00:39:41,860 --> 00:39:46,480
again have some more dependencies so you

00:39:43,810 --> 00:39:49,380
could use the same handler for multiple

00:39:46,480 --> 00:39:52,960
operations multiple actions easy-peasy

00:39:49,380 --> 00:39:54,490
alright so the once you start doing this

00:39:52,960 --> 00:39:56,140
for a while you realize that well this

00:39:54,490 --> 00:39:57,640
works the to-do list service but we

00:39:56,140 --> 00:40:00,250
could actually extend this further I

00:39:57,640 --> 00:40:01,990
could have instead of like a different

00:40:00,250 --> 00:40:04,090
command dispatching thing for every

00:40:01,990 --> 00:40:06,250
single service I could have one generic

00:40:04,090 --> 00:40:08,440
command bus for all right operations in

00:40:06,250 --> 00:40:09,850
my class in my entire application I mean

00:40:08,440 --> 00:40:11,440
you still probably services or something

00:40:09,850 --> 00:40:12,940
like that for doing the reads but the

00:40:11,440 --> 00:40:15,100
command bus can handle all the writes

00:40:12,940 --> 00:40:18,030
and you just need one really because

00:40:15,100 --> 00:40:20,140
it's all routing under the hood now

00:40:18,030 --> 00:40:22,450
there's a really really smart guy named

00:40:20,140 --> 00:40:24,580
Benjamin Everly who wrote a couple years

00:40:22,450 --> 00:40:26,500
ago that if you have a service layer he

00:40:24,580 --> 00:40:29,020
likes having this kind of command

00:40:26,500 --> 00:40:30,580
dispatcher interface and the reason for

00:40:29,020 --> 00:40:32,800
that is that it's really really simple

00:40:30,580 --> 00:40:35,380
because the interface is just one method

00:40:32,800 --> 00:40:36,730
so you can easily extract that into an

00:40:35,380 --> 00:40:38,110
interface and then write your own

00:40:36,730 --> 00:40:40,300
implementations of it you can have a

00:40:38,110 --> 00:40:42,190
whatever works for your application here

00:40:40,300 --> 00:40:44,100
but you could also create something that

00:40:42,190 --> 00:40:47,080
lazy loads from your di layer directly

00:40:44,100 --> 00:40:49,210
you can add validation behavior here as

00:40:47,080 --> 00:40:51,070
a decorator again so like if the command

00:40:49,210 --> 00:40:52,570
is not valid in some way then you throw

00:40:51,070 --> 00:40:54,820
an exception otherwise you pass it on

00:40:52,570 --> 00:40:57,560
down the chain and so if I want you know

00:40:54,820 --> 00:40:59,240
like specifically symfony validation on

00:40:57,560 --> 00:41:01,850
command I can just drop some annotations

00:40:59,240 --> 00:41:03,170
on here and I'm done the possibilities

00:41:01,850 --> 00:41:04,910
are practically endless you can do

00:41:03,170 --> 00:41:06,080
anything and everything you want with it

00:41:04,910 --> 00:41:07,610
all right because it's a very very

00:41:06,080 --> 00:41:09,170
simple interface some other

00:41:07,610 --> 00:41:11,000
possibilities I've seen in your life

00:41:09,170 --> 00:41:13,280
logging log every single command that

00:41:11,000 --> 00:41:15,830
comes through database transactions or

00:41:13,280 --> 00:41:17,120
good fit if you've got a unit of work so

00:41:15,830 --> 00:41:18,350
you can inspect the identity map on

00:41:17,120 --> 00:41:20,090
something you can do the domain

00:41:18,350 --> 00:41:21,500
dispatching the main event dispatching

00:41:20,090 --> 00:41:23,030
the capture all that changed entities

00:41:21,500 --> 00:41:26,240
and send their domain of its in their

00:41:23,030 --> 00:41:28,760
events out alright so lots and lots and

00:41:26,240 --> 00:41:31,420
lots of possibilities here so commands

00:41:28,760 --> 00:41:34,880
in general fewer dependencies per class

00:41:31,420 --> 00:41:36,770
more layers but simple layers and very

00:41:34,880 --> 00:41:39,200
very easy to test we're really cutting

00:41:36,770 --> 00:41:41,270
this stuff down to its core now this

00:41:39,200 --> 00:41:42,740
isn't this is not an either/or scenario

00:41:41,270 --> 00:41:45,830
though I can use view models and

00:41:42,740 --> 00:41:48,260
commands at the same time in fact that

00:41:45,830 --> 00:41:49,730
will give us complete isolation here so

00:41:48,260 --> 00:41:51,320
every time I want to make a right I

00:41:49,730 --> 00:41:52,640
would shoot a command into the service

00:41:51,320 --> 00:41:54,730
layer and every time I want to make a

00:41:52,640 --> 00:41:56,780
read then I would get a view model back

00:41:54,730 --> 00:41:57,980
this is really cool and one of the

00:41:56,780 --> 00:42:00,260
things I like the most about this

00:41:57,980 --> 00:42:02,360
approach for PHP is especially is that

00:42:00,260 --> 00:42:04,480
it gives us crud for the framework but

00:42:02,360 --> 00:42:07,340
domain model for the chewy Center and

00:42:04,480 --> 00:42:08,660
that's because frankly there's a dirty

00:42:07,340 --> 00:42:10,250
secret that a lot of people won't tell

00:42:08,660 --> 00:42:12,500
you about when you start doing DDD stuff

00:42:10,250 --> 00:42:14,510
like this which is that your average PHP

00:42:12,500 --> 00:42:16,460
framework really really likes you to

00:42:14,510 --> 00:42:19,010
have getter setter based models I mean

00:42:16,460 --> 00:42:21,080
things like forms templates validators

00:42:19,010 --> 00:42:22,820
they all love getter setter based models

00:42:21,080 --> 00:42:24,140
because they can do mat a very easy meta

00:42:22,820 --> 00:42:26,780
programming and figure out how to

00:42:24,140 --> 00:42:28,670
operate with that on the other hand

00:42:26,780 --> 00:42:30,440
we've got a service layer in place I can

00:42:28,670 --> 00:42:33,040
use the domain model for things like

00:42:30,440 --> 00:42:35,480
tough logic capturing semantics testing

00:42:33,040 --> 00:42:40,100
that's a better fit so I can get more

00:42:35,480 --> 00:42:42,410
the best of both worlds approach ok so

00:42:40,100 --> 00:42:44,630
if you're using commands and view models

00:42:42,410 --> 00:42:47,570
here at the same time over time you

00:42:44,630 --> 00:42:49,940
begin to might maybe possibly notice

00:42:47,570 --> 00:42:51,560
that they'll start to diverge you'll see

00:42:49,940 --> 00:42:53,030
that maybe your commands are sending in

00:42:51,560 --> 00:42:54,230
fewer properties than your view models

00:42:53,030 --> 00:42:55,610
or reading or that they don't really

00:42:54,230 --> 00:42:57,830
begin to resemble each other very much

00:42:55,610 --> 00:42:59,840
that can be a natural flow of your

00:42:57,830 --> 00:43:01,460
application or it could be a sign that

00:42:59,840 --> 00:43:05,180
perhaps the modeling is actually

00:43:01,460 --> 00:43:06,920
different for commands and for you

00:43:05,180 --> 00:43:09,010
which leads us to the last section of

00:43:06,920 --> 00:43:13,550
our talk a really hot buzzword right now

00:43:09,010 --> 00:43:15,200
see QRS now see QRS is kind of hard to

00:43:13,550 --> 00:43:17,810
show you because on the surface it looks

00:43:15,200 --> 00:43:18,920
the same this is the exact same

00:43:17,810 --> 00:43:22,130
controller I showed you in the last

00:43:18,920 --> 00:43:25,100
example what's different here is the

00:43:22,130 --> 00:43:27,890
concept of seek us or command query

00:43:25,100 --> 00:43:29,630
separation this wasn't discovered

00:43:27,890 --> 00:43:32,060
invented what have you prefer by a guy

00:43:29,630 --> 00:43:34,190
called Bertrand Meyer very famous Oh

00:43:32,060 --> 00:43:36,650
appear and he theorized that all

00:43:34,190 --> 00:43:38,540
operations any method you call can be

00:43:36,650 --> 00:43:41,480
classified as one of two things

00:43:38,540 --> 00:43:44,780
it is either command which changes data

00:43:41,480 --> 00:43:46,940
but returns nothing new or query which

00:43:44,780 --> 00:43:49,160
reads data but changes nothing in the

00:43:46,940 --> 00:43:50,660
process of doing so and don't confuse

00:43:49,160 --> 00:43:51,890
the terms command inquiry with like the

00:43:50,660 --> 00:43:53,780
command pattern we saw in the last

00:43:51,890 --> 00:43:56,060
section or query like a database query

00:43:53,780 --> 00:43:57,650
he means any method call whatsoever

00:43:56,060 --> 00:44:00,200
all right he says that these are two

00:43:57,650 --> 00:44:01,010
different things if you like rest then

00:44:00,200 --> 00:44:04,550
think about it like the difference

00:44:01,010 --> 00:44:06,500
between a get in a post okay now a few

00:44:04,550 --> 00:44:09,110
years later and by that I mean a lot of

00:44:06,500 --> 00:44:10,640
years later back in 2009 or 2010 a guy

00:44:09,110 --> 00:44:12,260
named Greg Young came up with this idea

00:44:10,640 --> 00:44:15,070
of CQRS

00:44:12,260 --> 00:44:18,740
or command query responsibility

00:44:15,070 --> 00:44:20,360
separation and his insight was that if

00:44:18,740 --> 00:44:21,620
you look at your average model then you

00:44:20,360 --> 00:44:23,240
can see that many of the methods here

00:44:21,620 --> 00:44:25,160
already break down along the same lines

00:44:23,240 --> 00:44:26,810
so we have a rename and add tasks and

00:44:25,160 --> 00:44:29,510
those are commands and the stuff on the

00:44:26,810 --> 00:44:30,790
bottom or are naturally queries but what

00:44:29,510 --> 00:44:33,230
if these are actually two different

00:44:30,790 --> 00:44:35,360
responsibilities as in terms of single

00:44:33,230 --> 00:44:37,430
responsibility principle well then you

00:44:35,360 --> 00:44:39,220
would have two models one that covers

00:44:37,430 --> 00:44:42,380
the reads and one that covers the writes

00:44:39,220 --> 00:44:43,850
all right so you might actually split it

00:44:42,380 --> 00:44:45,950
into two different objects like this

00:44:43,850 --> 00:44:47,120
where the top one is making the changes

00:44:45,950 --> 00:44:48,950
and throwing domain events for that

00:44:47,120 --> 00:44:50,330
stuff and then the bottom one there

00:44:48,950 --> 00:44:51,860
could be multiple read models is

00:44:50,330 --> 00:44:53,630
receiving those demand events and

00:44:51,860 --> 00:44:56,960
updating itself in order to generate

00:44:53,630 --> 00:44:58,190
like new visualizations on the fly okay

00:44:56,960 --> 00:45:00,530
so if you're having a hard time

00:44:58,190 --> 00:45:02,300
picturing this think about my to-do list

00:45:00,530 --> 00:45:03,620
application where the marketing guys

00:45:02,300 --> 00:45:04,940
come in and they say hey we would really

00:45:03,620 --> 00:45:06,740
like to have this feature where for

00:45:04,940 --> 00:45:09,560
every to-do list I can easily see all

00:45:06,740 --> 00:45:11,930
the users who were ever involved with

00:45:09,560 --> 00:45:14,450
this to-do list in any way shape or form

00:45:11,930 --> 00:45:16,460
you'd be like holy crap that's that's

00:45:14,450 --> 00:45:17,240
actually kind of hard to figure out and

00:45:16,460 --> 00:45:19,790
it's kind of

00:45:17,240 --> 00:45:21,590
norman's intensive and you know we sort

00:45:19,790 --> 00:45:23,690
of did a lot of work and separating the

00:45:21,590 --> 00:45:25,850
two things out so just slapping a get

00:45:23,690 --> 00:45:29,900
participating users method on here it's

00:45:25,850 --> 00:45:31,820
kind of screwing the pooch so CQRS gives

00:45:29,900 --> 00:45:33,470
us an alternative to that what we could

00:45:31,820 --> 00:45:35,210
do is create a to-do list model on top

00:45:33,470 --> 00:45:37,460
where we just you know make the changes

00:45:35,210 --> 00:45:39,170
themselves we add the tasks but the

00:45:37,460 --> 00:45:41,420
stuff on the bottom that could be

00:45:39,170 --> 00:45:43,790
generated from a cron job we could be

00:45:41,420 --> 00:45:44,570
doing it over an API we could be you

00:45:43,790 --> 00:45:47,180
know building these things

00:45:44,570 --> 00:45:49,310
asynchronously it doesn't matter right

00:45:47,180 --> 00:45:50,750
we can build that view in any way we

00:45:49,310 --> 00:45:53,330
prefer it could be a combination of data

00:45:50,750 --> 00:45:56,750
base stuff and remote API stuff doesn't

00:45:53,330 --> 00:45:58,190
matter all right in practice this often

00:45:56,750 --> 00:45:59,690
means that you have like an ORM entity

00:45:58,190 --> 00:46:01,730
for the stuff on top because the right

00:45:59,690 --> 00:46:03,290
model is the one with the logic and this

00:46:01,730 --> 00:46:06,650
one in the bottom is maybe an SQL query

00:46:03,290 --> 00:46:08,150
or some combination of data okay the

00:46:06,650 --> 00:46:11,480
important concept here is that read and

00:46:08,150 --> 00:46:12,980
write are two different systems like a

00:46:11,480 --> 00:46:14,810
user in a shopping cart they have a

00:46:12,980 --> 00:46:16,610
relationship with each other one uses

00:46:14,810 --> 00:46:18,530
the other probably but you want to bring

00:46:16,610 --> 00:46:20,660
that same kind of split into play here

00:46:18,530 --> 00:46:23,180
what does this do to the surrounding

00:46:20,660 --> 00:46:26,540
classes well a lot of it looks the same

00:46:23,180 --> 00:46:28,460
actually command pattern is often used

00:46:26,540 --> 00:46:29,660
here already with secure s like many

00:46:28,460 --> 00:46:31,670
people think that they're part of the

00:46:29,660 --> 00:46:33,440
same thing so you would often have a

00:46:31,670 --> 00:46:35,000
handler like this you would often have a

00:46:33,440 --> 00:46:38,359
service for doing reads like this and

00:46:35,000 --> 00:46:40,160
they would be side by side identical to

00:46:38,359 --> 00:46:42,770
the previous examples the difference

00:46:40,160 --> 00:46:44,869
here is that the repository on the top

00:46:42,770 --> 00:46:46,160
and their posit or in the bottom are two

00:46:44,869 --> 00:46:47,900
different repositories the one on the

00:46:46,160 --> 00:46:49,550
top does the right models and it usually

00:46:47,900 --> 00:46:51,800
has only very simple finder functions

00:46:49,550 --> 00:46:53,450
usually just defined by ID and the one

00:46:51,800 --> 00:46:56,210
on the bottom is you know got more

00:46:53,450 --> 00:46:57,650
complex query stuff okay and they return

00:46:56,210 --> 00:46:59,560
two different models one returns the

00:46:57,650 --> 00:47:01,670
right model one returns a read model and

00:46:59,560 --> 00:47:04,369
this has some surprising effects

00:47:01,670 --> 00:47:06,380
throughout your application consider

00:47:04,369 --> 00:47:08,390
this code we do this all the time we

00:47:06,380 --> 00:47:10,580
create a new to-do list we save it and

00:47:08,390 --> 00:47:12,650
then we get the database ID back from it

00:47:10,580 --> 00:47:15,310
so we can redirect the user to a URL

00:47:12,650 --> 00:47:18,560
with that ID in write pretty standard

00:47:15,310 --> 00:47:21,859
this will not work if you take CQRS

00:47:18,560 --> 00:47:24,290
seriously why because the actual writing

00:47:21,859 --> 00:47:27,350
of a new to-do list is a command and

00:47:24,290 --> 00:47:28,520
commands can't return state all right

00:47:27,350 --> 00:47:29,840
even an auto gem

00:47:28,520 --> 00:47:32,390
created ID that you're setting on a

00:47:29,840 --> 00:47:34,640
model you passed in here is extra state

00:47:32,390 --> 00:47:37,580
it is maybe sideloading return value but

00:47:34,640 --> 00:47:39,740
it is basically doing that okay so you

00:47:37,580 --> 00:47:41,810
cannot do this instead what you most

00:47:39,740 --> 00:47:43,340
often see is people using you you IDs

00:47:41,810 --> 00:47:45,740
because these are unique they're

00:47:43,340 --> 00:47:47,360
generated by the client the rest of the

00:47:45,740 --> 00:47:49,220
stuff can pass it in and it still knows

00:47:47,360 --> 00:47:52,010
what the ID is at the end of the day I

00:47:49,220 --> 00:47:55,640
would redirect the user back to you know

00:47:52,010 --> 00:47:56,300
a URL with the UUID in it instead so

00:47:55,640 --> 00:47:57,470
there are a lot of different

00:47:56,300 --> 00:48:00,200
possibilities are ways to work around

00:47:57,470 --> 00:48:03,110
this but the the work of generating that

00:48:00,200 --> 00:48:04,370
ID is now in a different place this is

00:48:03,110 --> 00:48:05,630
really a low level so maybe can get a

00:48:04,370 --> 00:48:08,480
better picture of it here if i zoom out

00:48:05,630 --> 00:48:10,070
this is a diagram i straight-up stole

00:48:08,480 --> 00:48:11,720
from martin fowler's website because if

00:48:10,070 --> 00:48:14,090
i was trying to do it again i would just

00:48:11,720 --> 00:48:17,180
be duplicating it so straight up stole

00:48:14,090 --> 00:48:19,910
it alright what he says here is that in

00:48:17,180 --> 00:48:21,260
general you have a command model what i

00:48:19,910 --> 00:48:23,030
call a right model here on the bottom

00:48:21,260 --> 00:48:24,950
and a user comes along and makes a

00:48:23,030 --> 00:48:26,660
change in the UI alright and that goes

00:48:24,950 --> 00:48:28,700
in right here which is basically our

00:48:26,660 --> 00:48:30,380
command bus that gets piped into a

00:48:28,700 --> 00:48:31,850
handler that makes some changes on the

00:48:30,380 --> 00:48:34,550
model and then that stuff gets saved to

00:48:31,850 --> 00:48:36,140
the database sometime later the same

00:48:34,550 --> 00:48:37,340
user or different user comes along and

00:48:36,140 --> 00:48:39,350
makes a read and that goes through the

00:48:37,340 --> 00:48:40,760
query model over the read model right

00:48:39,350 --> 00:48:41,630
and that comes back out and gets

00:48:40,760 --> 00:48:44,330
displayed in the UI

00:48:41,630 --> 00:48:46,010
now Fowler says that in this case the

00:48:44,330 --> 00:48:47,900
query model in the command model are

00:48:46,010 --> 00:48:49,370
communicating with each other through

00:48:47,900 --> 00:48:51,530
the database like they have an agreement

00:48:49,370 --> 00:48:53,450
or contract about what those tables in

00:48:51,530 --> 00:48:55,760
the database look like but they are

00:48:53,450 --> 00:48:57,860
still two different systems one of the

00:48:55,760 --> 00:48:59,480
cool things about CQRS and one of the

00:48:57,860 --> 00:49:01,730
things that might make this split a

00:48:59,480 --> 00:49:03,440
little bit easier to visualize is the

00:49:01,730 --> 00:49:05,330
fact that we could actually use two

00:49:03,440 --> 00:49:08,120
different databases here we could use

00:49:05,330 --> 00:49:09,890
like MySQL here for the integrity for

00:49:08,120 --> 00:49:12,830
financial transactions and we could use

00:49:09,890 --> 00:49:14,300
Redis here in order to do it and deliver

00:49:12,830 --> 00:49:15,590
that in the most high-speed way possible

00:49:14,300 --> 00:49:17,870
or we could do it the other way around

00:49:15,590 --> 00:49:19,490
or we could have like one write database

00:49:17,870 --> 00:49:21,800
there's always one consistent write

00:49:19,490 --> 00:49:23,870
database but we could have in any number

00:49:21,800 --> 00:49:26,480
of read databases all right

00:49:23,870 --> 00:49:27,980
however you want to do that now how does

00:49:26,480 --> 00:49:29,630
that stuff replicate between there

00:49:27,980 --> 00:49:32,030
because there is no magical Redis to my

00:49:29,630 --> 00:49:33,740
scroll adapter that I found yet well the

00:49:32,030 --> 00:49:35,150
most common ways domain events you know

00:49:33,740 --> 00:49:36,650
the right model fires them the read

00:49:35,150 --> 00:49:39,110
model listens to them and updates its

00:49:36,650 --> 00:49:40,940
own projection but it's not the only way

00:49:39,110 --> 00:49:41,550
I mean you could use DB views like we

00:49:40,940 --> 00:49:43,980
had in the first

00:49:41,550 --> 00:49:47,130
example you could use a big honking cue

00:49:43,980 --> 00:49:49,770
I don't care but the main events are the

00:49:47,130 --> 00:49:51,780
number one way that people use if you'd

00:49:49,770 --> 00:49:53,130
like to try and put this into action the

00:49:51,780 --> 00:49:54,810
Benjamin ever League I mentioned earlier

00:49:53,130 --> 00:49:57,480
total man crush

00:49:54,810 --> 00:49:59,850
he wrote a CQRS library or rather

00:49:57,480 --> 00:50:01,050
reported it from C sharp and you can

00:49:59,850 --> 00:50:03,690
take a look at that that was kind of the

00:50:01,050 --> 00:50:05,670
original one in PHP the guys over at

00:50:03,690 --> 00:50:07,710
candidate labs here in the Netherlands

00:50:05,670 --> 00:50:10,140
wrote a new one recently more for event

00:50:07,710 --> 00:50:12,210
sourcing maybe called Broadway it is

00:50:10,140 --> 00:50:14,790
really good and I'm still reading it but

00:50:12,210 --> 00:50:16,470
I like the look of this a lot and then

00:50:14,790 --> 00:50:19,070
finally Greg Young the guy who coined

00:50:16,470 --> 00:50:21,510
the term CQRS in the first place has a

00:50:19,070 --> 00:50:23,460
couple hundred lines example that he

00:50:21,510 --> 00:50:24,990
feels illustrates the principles of the

00:50:23,460 --> 00:50:27,240
whole thing it's written in c-sharp but

00:50:24,990 --> 00:50:30,360
we're all big grownups here we can we

00:50:27,240 --> 00:50:32,820
can handle that okay now what are the

00:50:30,360 --> 00:50:34,410
pros and cons of CQRS because there are

00:50:32,820 --> 00:50:36,810
serious ones let's let's talk about the

00:50:34,410 --> 00:50:38,610
crop mccollins here first it is a big

00:50:36,810 --> 00:50:40,230
mental leap it is a very different style

00:50:38,610 --> 00:50:42,930
of modeling than what we're used to and

00:50:40,230 --> 00:50:44,460
if your team is not ready for that that

00:50:42,930 --> 00:50:47,220
could cause some problems it may not be

00:50:44,460 --> 00:50:49,230
the best thing to roll out it is usually

00:50:47,220 --> 00:50:51,780
like pretty much always going to be more

00:50:49,230 --> 00:50:54,780
lines of code arguably simpler code but

00:50:51,780 --> 00:50:56,450
more lines more pieces and in my opinion

00:50:54,780 --> 00:50:58,590
that is not necessarily for every domain

00:50:56,450 --> 00:51:00,360
Judy de Haan who is a really

00:50:58,590 --> 00:51:02,130
well-respected Oh appear you know that

00:51:00,360 --> 00:51:03,480
because the sidebar on his web site has

00:51:02,130 --> 00:51:06,870
like forty recommendations about how

00:51:03,480 --> 00:51:08,640
awesome he is he says that unless your

00:51:06,870 --> 00:51:11,190
domain has an inherent race condition

00:51:08,640 --> 00:51:13,710
you probably don't need CQRS that's his

00:51:11,190 --> 00:51:15,540
take on it at least but often what you

00:51:13,710 --> 00:51:17,640
see in applications that do use it is

00:51:15,540 --> 00:51:20,010
that it's mixed like one high-speed

00:51:17,640 --> 00:51:22,590
section of the application is using CQRS

00:51:20,010 --> 00:51:24,180
and another one is using crud to just

00:51:22,590 --> 00:51:25,820
fill in database stuff right so it's not

00:51:24,180 --> 00:51:29,940
an all-or-nothing approach

00:51:25,820 --> 00:51:31,890
now what are the pros of using CQRS well

00:51:29,940 --> 00:51:33,630
it is easy to scale and this time I do

00:51:31,890 --> 00:51:35,370
mean it in the performance sense like

00:51:33,630 --> 00:51:37,410
because you would now have eventually

00:51:35,370 --> 00:51:38,460
eventual consistency in your application

00:51:37,410 --> 00:51:40,620
you can control the speed at which

00:51:38,460 --> 00:51:42,240
changes replicate users it's very

00:51:40,620 --> 00:51:44,130
powerful it's a great way if you're

00:51:42,240 --> 00:51:47,550
under a lot of pressure love speed

00:51:44,130 --> 00:51:48,690
alright it also bears complexity well

00:51:47,550 --> 00:51:50,370
and I mean that if you have a very

00:51:48,690 --> 00:51:52,650
complicated domain model this can be a

00:51:50,370 --> 00:51:54,270
useful way to model it or to picture it

00:51:52,650 --> 00:51:56,490
it allows you to separate these things

00:51:54,270 --> 00:51:57,990
into smaller chunks and it makes certain

00:51:56,490 --> 00:51:58,500
allowances that were traditionally very

00:51:57,990 --> 00:52:01,079
hard

00:51:58,500 --> 00:52:02,369
it has great support for doing a sink

00:52:01,079 --> 00:52:04,349
which is more and more important all the

00:52:02,369 --> 00:52:05,910
time and it is probably the single best

00:52:04,349 --> 00:52:06,990
pattern we have for implementing event

00:52:05,910 --> 00:52:08,849
sourcing right now

00:52:06,990 --> 00:52:10,349
I'll been sourcing you might not have

00:52:08,849 --> 00:52:13,859
heard of it's still kind of making the

00:52:10,349 --> 00:52:15,029
rounds it it's kind of side the scope of

00:52:13,859 --> 00:52:16,319
this talk but I'll talk about it briefly

00:52:15,029 --> 00:52:17,940
because it goes really really well

00:52:16,319 --> 00:52:19,589
secure s like many people think they're

00:52:17,940 --> 00:52:21,270
often the same thing

00:52:19,589 --> 00:52:23,010
the fundamental idea here is that

00:52:21,270 --> 00:52:24,839
instead of storing the current state in

00:52:23,010 --> 00:52:27,029
the database like name is equal to Ross

00:52:24,839 --> 00:52:28,170
age is equal to 29 hat is equal to

00:52:27,029 --> 00:52:31,319
fedora

00:52:28,170 --> 00:52:32,670
instead I would store the domain events

00:52:31,319 --> 00:52:35,490
that were triggered leading up to the

00:52:32,670 --> 00:52:39,180
current state so I would have like Ross

00:52:35,490 --> 00:52:41,069
was born Ross went to school Ross got

00:52:39,180 --> 00:52:42,510
his first hat or all you know and then

00:52:41,069 --> 00:52:44,190
if I wanted to know what the current

00:52:42,510 --> 00:52:45,750
state of things they are I would take

00:52:44,190 --> 00:52:47,279
all those events out of the database and

00:52:45,750 --> 00:52:48,779
I would replay them on top of the model

00:52:47,279 --> 00:52:50,430
one after the other and you might think

00:52:48,779 --> 00:52:52,829
that's really really slow but in

00:52:50,430 --> 00:52:55,049
practice it's not and by doing this you

00:52:52,829 --> 00:52:57,119
actually enable a whole lot of really

00:52:55,049 --> 00:52:58,470
powerful amazing stuff like if your

00:52:57,119 --> 00:53:00,299
performance obsessed you can kind of

00:52:58,470 --> 00:53:02,190
offset all the differences here by using

00:53:00,299 --> 00:53:04,289
it to generate snapshots like every ten

00:53:02,190 --> 00:53:07,559
events you know do something you know

00:53:04,289 --> 00:53:08,730
record a quick load version it's not

00:53:07,559 --> 00:53:10,829
often necessary and kind of

00:53:08,730 --> 00:53:13,680
controversial but you can do it it is

00:53:10,829 --> 00:53:14,670
amazing for debugging right how did the

00:53:13,680 --> 00:53:15,960
clients screw it up this time

00:53:14,670 --> 00:53:17,599
let me look in the database and see

00:53:15,960 --> 00:53:19,049
everything you did that led up to it

00:53:17,599 --> 00:53:20,579
audit logs

00:53:19,049 --> 00:53:22,500
if you've ever built an application with

00:53:20,579 --> 00:53:24,210
a real audit log you know how hard that

00:53:22,500 --> 00:53:26,880
is and here it's basically something you

00:53:24,210 --> 00:53:28,799
get for free it is a goldmine for

00:53:26,880 --> 00:53:31,380
business intelligence all right you can

00:53:28,799 --> 00:53:34,140
see and and follow user flows whenever

00:53:31,380 --> 00:53:36,000
any time in the past or maybe projected

00:53:34,140 --> 00:53:37,079
in the future I don't know I have a

00:53:36,000 --> 00:53:38,520
theory personally you might be able to

00:53:37,079 --> 00:53:39,869
use this cap style to overcome network

00:53:38,520 --> 00:53:41,339
partitions because you can bundle the

00:53:39,869 --> 00:53:43,829
demand up Vince up on one side and then

00:53:41,339 --> 00:53:45,059
send them over at a later date I've seen

00:53:43,829 --> 00:53:47,849
some people talk about using this to

00:53:45,059 --> 00:53:49,980
build self-healing patches where you

00:53:47,849 --> 00:53:51,869
change like a calculation object and you

00:53:49,980 --> 00:53:53,490
replay the events that occurred

00:53:51,869 --> 00:53:55,859
previously and you get a new outcome

00:53:53,490 --> 00:53:57,660
which is the correct one all right

00:53:55,859 --> 00:53:59,200
that's kind of bonkers but think about

00:53:57,660 --> 00:54:01,299
it afterwards it'll make sense

00:53:59,200 --> 00:54:02,200
or you could google it or you can ask me

00:54:01,299 --> 00:54:03,460
in the hallway and I'll point you to

00:54:02,200 --> 00:54:06,369
some really smart people who know a lot

00:54:03,460 --> 00:54:08,859
about it okay so that's all the time I

00:54:06,369 --> 00:54:10,990
have for you today I just want to leave

00:54:08,859 --> 00:54:13,210
you with this quote from Emerson he says

00:54:10,990 --> 00:54:15,730
a foolish consistency is the hobgoblin

00:54:13,210 --> 00:54:17,619
of little minds that might sound like

00:54:15,730 --> 00:54:18,640
Emerson's trying to insult your I am and

00:54:17,619 --> 00:54:20,920
I assure you that's absolutely not the

00:54:18,640 --> 00:54:22,329
case what Emerson was trying to say is

00:54:20,920 --> 00:54:24,099
that you should believe whatever the

00:54:22,329 --> 00:54:26,500
best thing to believe is today and

00:54:24,099 --> 00:54:28,839
tomorrow if new facts come to light or

00:54:26,500 --> 00:54:30,940
new discovery is made you should switch

00:54:28,839 --> 00:54:32,680
over and believe whatever that points to

00:54:30,940 --> 00:54:34,210
instead and you shouldn't feel bad about

00:54:32,680 --> 00:54:36,190
changing your mind because you are

00:54:34,210 --> 00:54:36,760
believing whatever the best thing is day

00:54:36,190 --> 00:54:39,940
to day

00:54:36,760 --> 00:54:42,760
I mean NIT we often call this strong

00:54:39,940 --> 00:54:44,230
opinions weekly held but maybe a better

00:54:42,760 --> 00:54:48,520
way to put it as strong techniques

00:54:44,230 --> 00:54:50,290
weekly held when we're using PHP 3 it

00:54:48,520 --> 00:54:52,510
was a lot of a procedural and imperative

00:54:50,290 --> 00:54:55,299
code and it wasn't pretty but it got the

00:54:52,510 --> 00:54:57,369
job done in PHP 4 to 5 we were began

00:54:55,299 --> 00:54:59,140
doing simple ello I mean lots of

00:54:57,369 --> 00:55:02,410
inheritance and again not all of it good

00:54:59,140 --> 00:55:04,089
but better and PHP 5.3 and up we're

00:55:02,410 --> 00:55:05,619
living in the era of composer man I mean

00:55:04,089 --> 00:55:08,380
it's it's all about tying stuff together

00:55:05,619 --> 00:55:10,450
and making it work and pretty soon we'll

00:55:08,380 --> 00:55:12,339
be in PHP 7 and I don't know what that

00:55:10,450 --> 00:55:14,170
means yet but I think it's going to be

00:55:12,339 --> 00:55:17,380
pretty cool some of what I'm talking

00:55:14,170 --> 00:55:18,790
about today might seem crazy but try it

00:55:17,380 --> 00:55:20,230
in little doses not the whole thing at

00:55:18,790 --> 00:55:22,690
once if you want the most bang for your

00:55:20,230 --> 00:55:24,069
buck and you're building credence try

00:55:22,690 --> 00:55:25,510
building a little transaction script

00:55:24,069 --> 00:55:27,940
thing I think you'll like what it does

00:55:25,510 --> 00:55:29,589
if you want to go a step further roll

00:55:27,940 --> 00:55:30,849
out your first domain events I really

00:55:29,589 --> 00:55:33,490
think you'll like with that what that

00:55:30,849 --> 00:55:35,230
does to your code all I can do is assure

00:55:33,490 --> 00:55:38,710
you at the end of the day people are

00:55:35,230 --> 00:55:42,990
doing this it is working for them and it

00:55:38,710 --> 00:55:42,990
can work for you too thank you very much

00:55:44,980 --> 00:55:53,080
I have no idea what time it is but the

00:55:51,430 --> 00:55:54,369
middle wink here Sean McCool's blog is a

00:55:53,080 --> 00:55:55,960
great place to get more info

00:55:54,369 --> 00:55:57,850
thank you very much these people thanks

00:55:55,960 --> 00:56:00,990
to these people and I'd appreciate your

00:55:57,850 --> 00:56:00,990

YouTube URL: https://www.youtube.com/watch?v=ajhqScWECMo


