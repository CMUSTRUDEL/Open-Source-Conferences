Title: DrupalCon Amsterdam 2014: The SPDY Sandwich: Superfly Sites with Nginx and Varnish
Publication date: 2014-09-30
Playlist: DrupalCon Amsterdam - September 2014
Description: 
	Speakers: joe-boperinko
We're all putting in lots of effort to 'make the web faster', and DevOps practitioners are especially interested in using tools to make their sites superfast. Nginx and Varnish are go-to performance tools to make your site fly, but with some cross-over in what they can do, and important capability differences in that cross-over zone, how can you get the best out of them?

This talk will look at using Nginx and Varnish together with SPDY in a 'SPDY sandwich' (Nginx Â» Varnish Â» Nginx) to reduce the latency of web pages, and to improve web security. With some overview of the technologies involved, their strengths and benefits, weakenesses and limitations, we'll focus on putting them all together and getting benchmarks for the potential performance paybacks.

The session will cover:

Nginx, I got you (I feel good)
Varnish - Bring it on â€¦ Bring it on
Superbad, Superslick, SPDY - What, why, how?
Get on the Good Foot - Everything in SSL/TLS, and encryption ciphers
Get it together - the SPDY sandwich
The Payback - testing it all
Barney Hanlon (@shrikeh) originally proposed the 'SPDY Sandwich'. This session is an in-depth look at set-up and configuration, with special attention given to performance benchmarks.

About the Speakers

Olli Erinko and Joe Baker are developers at WunderKraut, with experience in DevOps roles on large, high performance sites for the UK Ministry of Justice, Oxfam International, Uusi Suomi, Puheenvuoro and Tekla.

Wunderkraut is Europe's largest Drupal service provider, employs one of the largest Drupal development teams worldwide and delivers measurable client happiness and business value.
Captions: 
	00:00:00,000 --> 00:00:05,160
welcome everyone thanks coming along do

00:00:03,270 --> 00:00:06,870
a talk at drupalcon they said that's a

00:00:05,160 --> 00:00:08,340
really good idea and learn stuff and

00:00:06,870 --> 00:00:12,150
then you got to stand up here and look

00:00:08,340 --> 00:00:15,269
at all these faceless so we're going to

00:00:12,150 --> 00:00:17,900
talk about a speedy sandwich superfly

00:00:15,269 --> 00:00:21,810
sites with engine X and varnish to

00:00:17,900 --> 00:00:25,590
introduce us this is ollie and I'm Joe

00:00:21,810 --> 00:00:27,060
we work for window kraut this weekend is

00:00:25,590 --> 00:00:30,210
the first time I've ever met Ollie in

00:00:27,060 --> 00:00:32,730
pub in person we work in different

00:00:30,210 --> 00:00:39,540
places all these in Finland I'm working

00:00:32,730 --> 00:00:42,989
in the UK we both the developers and

00:00:39,540 --> 00:00:45,660
both have an interest in performance and

00:00:42,989 --> 00:00:47,460
security with the sites that we work on

00:00:45,660 --> 00:00:50,039
and that's hence why we where are we

00:00:47,460 --> 00:00:52,469
working on this presenting this talk

00:00:50,039 --> 00:00:55,520
sorry so it's a plan of what we're going

00:00:52,469 --> 00:00:57,629
to be talking about to the afternoon

00:00:55,520 --> 00:01:01,890
five main things we can talk about

00:00:57,629 --> 00:01:04,680
engine X itself and why engine X is our

00:01:01,890 --> 00:01:06,810
go-to tool for website performance and

00:01:04,680 --> 00:01:09,780
when you got it you feel good and we can

00:01:06,810 --> 00:01:12,689
then talk about varnish why varnish is

00:01:09,780 --> 00:01:14,340
such a good caching tool and we'll do it

00:01:12,689 --> 00:01:16,259
such so effectively that will be able to

00:01:14,340 --> 00:01:18,920
cope with really big traffic spikes and

00:01:16,259 --> 00:01:22,070
we can just expect people to bring it on

00:01:18,920 --> 00:01:25,229
and then we have turned to SSL and TLS

00:01:22,070 --> 00:01:27,630
getting on the good foot in the post

00:01:25,229 --> 00:01:30,150
Edward Snowden world all communications

00:01:27,630 --> 00:01:31,890
should be secure always and by default

00:01:30,150 --> 00:01:34,530
and so we need to get on the good foot

00:01:31,890 --> 00:01:36,960
and then the fourth i'm going to talk

00:01:34,530 --> 00:01:39,259
about is speedy itself which i guess is

00:01:36,960 --> 00:01:43,380
what most of you are most interested in

00:01:39,259 --> 00:01:44,970
superbad super slick speedy just and the

00:01:43,380 --> 00:01:47,310
response when you talked about SSL is of

00:01:44,970 --> 00:01:50,460
course there's computation consequences

00:01:47,310 --> 00:01:52,770
and latency surely you know ssl at the

00:01:50,460 --> 00:01:56,640
last minute if we absolutely have to but

00:01:52,770 --> 00:01:58,020
can we make things fast under TLS itself

00:01:56,640 --> 00:02:00,659
and that's where speedy comes into play

00:01:58,020 --> 00:02:02,520
and I'm fourthly finally sorry we get to

00:02:00,659 --> 00:02:04,110
the speedy sandwich which is our

00:02:02,520 --> 00:02:05,850
suggestion of a way of putting this all

00:02:04,110 --> 00:02:07,439
together to get the best of everything

00:02:05,850 --> 00:02:08,789
we would have talked about so far and

00:02:07,439 --> 00:02:10,470
then hopefully will they show you

00:02:08,789 --> 00:02:12,270
something about the payback for that

00:02:10,470 --> 00:02:17,010
so I'm gonna hand on to only now he's

00:02:12,270 --> 00:02:20,700
going to talk about some engine X so hey

00:02:17,010 --> 00:02:23,760
engine X what it can do it's a web

00:02:20,700 --> 00:02:28,370
server iOS proxy static file kasher and

00:02:23,760 --> 00:02:31,440
load balancer mail proxy ssl/tls

00:02:28,370 --> 00:02:34,860
terminator so what we're interested

00:02:31,440 --> 00:02:36,930
hearing is the web server pot the static

00:02:34,860 --> 00:02:42,360
file caching and the SSL termination

00:02:36,930 --> 00:02:45,240
itself as a web server it it serves the

00:02:42,360 --> 00:02:47,790
static content very fast it's light

00:02:45,240 --> 00:02:53,240
consumption doesn't use that much memory

00:02:47,790 --> 00:02:53,240
or Hardware other hardware resources and

00:02:54,500 --> 00:02:59,700
it's using Evan based process model

00:02:57,840 --> 00:03:01,380
which generally requires a lot less

00:02:59,700 --> 00:03:09,750
memory than the process based service

00:03:01,380 --> 00:03:16,769
like Apache and then it was originally

00:03:09,750 --> 00:03:19,410
designed us a to be deployed alongside

00:03:16,769 --> 00:03:23,010
Apache so that the static content like

00:03:19,410 --> 00:03:25,350
HTML CSS and JavaScript and images can

00:03:23,010 --> 00:03:28,560
be handled by engine x over the course

00:03:25,350 --> 00:03:30,170
of the development the Internet's added

00:03:28,560 --> 00:03:36,780
integration with other applications

00:03:30,170 --> 00:03:39,570
through the use of fast TGI using it it

00:03:36,780 --> 00:03:42,660
uses openssl in a standard module to

00:03:39,570 --> 00:03:47,190
support SSL termination and despite

00:03:42,660 --> 00:03:51,330
heartbleed it's a good thing engine X

00:03:47,190 --> 00:03:53,730
SSL module supports important features

00:03:51,330 --> 00:03:57,630
to make it as best they can get their

00:03:53,730 --> 00:04:00,870
session resumption osep stapling strict

00:03:57,630 --> 00:04:03,600
Transport Security and that's basically

00:04:00,870 --> 00:04:08,510
what all that will be using engine x4

00:04:03,600 --> 00:04:08,510
here and then there's varnish

00:04:09,270 --> 00:04:17,580
it's a reverse proxy cache sometimes

00:04:14,490 --> 00:04:21,570
also called n HT to http as accelerator

00:04:17,580 --> 00:04:24,630
it's focused exclusively on HTTP so

00:04:21,570 --> 00:04:28,410
we'll have to use engine X for the SSL

00:04:24,630 --> 00:04:32,760
termination there and it can be used as

00:04:28,410 --> 00:04:40,010
a load balancer it's very good at what

00:04:32,760 --> 00:04:45,330
it does and only at what it does there's

00:04:40,010 --> 00:04:47,100
it's a key value store it puts

00:04:45,330 --> 00:04:49,560
everything into ram and lets the OS

00:04:47,100 --> 00:04:53,280
decide what to keep in the RAM and what

00:04:49,560 --> 00:04:54,900
to write to the disk but and that the OS

00:04:53,280 --> 00:04:56,720
has a better overview of the whole

00:04:54,900 --> 00:04:59,400
machine resources and requirements and

00:04:56,720 --> 00:05:03,510
this takes away the double buffering

00:04:59,400 --> 00:05:07,620
issues it's designed for modern

00:05:03,510 --> 00:05:10,230
equipment for example 64-bit multi-core

00:05:07,620 --> 00:05:12,390
machines with plenty of memory so

00:05:10,230 --> 00:05:15,720
there's an assumption that your hardware

00:05:12,390 --> 00:05:18,690
is up to the job that being said it's

00:05:15,720 --> 00:05:21,150
still making an efficient use of the

00:05:18,690 --> 00:05:23,670
hardware and we'll we'll run happily on

00:05:21,150 --> 00:05:28,380
a mediocre platform there's no real need

00:05:23,670 --> 00:05:33,150
for bleeding edge do I need to say

00:05:28,380 --> 00:05:36,600
anything about that one it's fast the

00:05:33,150 --> 00:05:40,200
advantage of using varnish can be seen

00:05:36,600 --> 00:05:45,530
in the cpu CPU usage as well and here's

00:05:40,200 --> 00:05:50,100
a graph of a site without using varnish

00:05:45,530 --> 00:05:53,970
the CPU usage spikes up two hundred

00:05:50,100 --> 00:05:58,260
percent at a few hundred concurrent

00:05:53,970 --> 00:06:03,210
users whereas with Moorish well it's

00:05:58,260 --> 00:06:07,320
around fifty percent and there's a lot

00:06:03,210 --> 00:06:10,020
of stuff said about varnish so in

00:06:07,320 --> 00:06:13,560
previous Drupal cons for example in

00:06:10,020 --> 00:06:18,419
Copenhagen 2010 poll Henning Henning

00:06:13,560 --> 00:06:20,550
comp held an awesome session unworn ish

00:06:18,419 --> 00:06:23,340
and he's the lead designer and developer

00:06:20,550 --> 00:06:34,510
of varnish

00:06:23,340 --> 00:06:37,830
then ssl by joe so in the good old days

00:06:34,510 --> 00:06:40,810
we knew he was watching us we thought

00:06:37,830 --> 00:06:43,389
and he was being watched we thought that

00:06:40,810 --> 00:06:45,820
when the Wall fell down that the

00:06:43,389 --> 00:06:48,850
watching was over that our site as it

00:06:45,820 --> 00:06:51,400
were was watching the bad guys but

00:06:48,850 --> 00:06:54,280
Edward Snowden changed all that and now

00:06:51,400 --> 00:06:57,100
we know that what we thought were the

00:06:54,280 --> 00:06:59,190
friendly security agencies have in fact

00:06:57,100 --> 00:07:03,160
been harvesting vast amounts of data

00:06:59,190 --> 00:07:06,220
ostensibly to pursue criminals and

00:07:03,160 --> 00:07:08,229
terrorists but in the process as we know

00:07:06,220 --> 00:07:12,370
consuming data from everyone pretty much

00:07:08,229 --> 00:07:14,770
indiscriminately even as it turns out

00:07:12,370 --> 00:07:19,810
jacking directly into the hard lines to

00:07:14,770 --> 00:07:21,729
get at the data and over the last decade

00:07:19,810 --> 00:07:26,700
or so we become even more aware of the

00:07:21,729 --> 00:07:29,800
increase of cybercrime far too few sites

00:07:26,700 --> 00:07:34,390
far far too few sites yes that's why I

00:07:29,800 --> 00:07:35,770
said use SSL when you can go around the

00:07:34,390 --> 00:07:37,720
whole pretty much of the Amazon store

00:07:35,770 --> 00:07:41,530
and it's not until you get to payment

00:07:37,720 --> 00:07:43,090
pretty much that Amazon implement SSR so

00:07:41,530 --> 00:07:45,340
all of your browsing history is

00:07:43,090 --> 00:07:48,789
accessible if someone wants to to really

00:07:45,340 --> 00:07:50,140
get into it which you know it might be

00:07:48,789 --> 00:07:52,840
fine if you're looking at compilation

00:07:50,140 --> 00:07:58,360
dvd's of funny cats but who should have

00:07:52,840 --> 00:08:00,850
the right to access that information to

00:07:58,360 --> 00:08:02,500
be part of the process of changing you

00:08:00,850 --> 00:08:03,910
I'm sure you know this but Google have

00:08:02,500 --> 00:08:08,490
decided that they're going to change

00:08:03,910 --> 00:08:13,590
well they are changing the their own

00:08:08,490 --> 00:08:19,090
PageRank algorithm to privileged https

00:08:13,590 --> 00:08:21,100
so sites which previously sites with ssl

00:08:19,090 --> 00:08:23,950
will get higher rankings now than they

00:08:21,100 --> 00:08:26,800
than they used to and so Google a part

00:08:23,950 --> 00:08:30,700
of the kind of the social change they're

00:08:26,800 --> 00:08:32,860
hoping and and good for them very

00:08:30,700 --> 00:08:34,659
important but the big question for

00:08:32,860 --> 00:08:35,500
anyone interested in DevOps of courses

00:08:34,659 --> 00:08:40,870
is

00:08:35,500 --> 00:08:42,340
LS fast yet there was a great talk just

00:08:40,870 --> 00:08:44,980
a few months ago back in June at the

00:08:42,340 --> 00:08:49,300
velocity conference by Ilya gregorich

00:08:44,980 --> 00:08:52,060
from google I highly recommend viewing

00:08:49,300 --> 00:08:54,640
his his YouTube video of his talk and if

00:08:52,060 --> 00:08:56,320
you go to that site is TLS Farsi 8.com

00:08:54,640 --> 00:08:58,330
there's loads of resources there

00:08:56,320 --> 00:09:00,460
including his slides and links to all

00:08:58,330 --> 00:09:01,480
kinds of really useful stuff and what

00:09:00,460 --> 00:09:03,790
we're going to talk about here it is a

00:09:01,480 --> 00:09:07,270
summary of the far more detailed work

00:09:03,790 --> 00:09:09,760
that they've been been doing there but

00:09:07,270 --> 00:09:12,600
the too long didn't read of his talk in

00:09:09,760 --> 00:09:15,880
essence is that TLS has exactly one

00:09:12,600 --> 00:09:17,830
performance problem not enough sites are

00:09:15,880 --> 00:09:20,500
using it everything else can be

00:09:17,830 --> 00:09:21,610
optimized and that's kind of what we're

00:09:20,500 --> 00:09:23,620
going to talk about now we're going to

00:09:21,610 --> 00:09:27,190
try and give a fairly detailed view of

00:09:23,620 --> 00:09:29,860
how we can get a one round-trip time

00:09:27,190 --> 00:09:33,490
handshake how we can go about

00:09:29,860 --> 00:09:35,890
eliminating the latency in a validation

00:09:33,490 --> 00:09:42,660
process and make TLS as fast as it can

00:09:35,890 --> 00:09:44,760
be the process of establishing and

00:09:42,660 --> 00:09:47,200
communicating over an encrypted Channel

00:09:44,760 --> 00:09:48,339
introduces additional computational cost

00:09:47,200 --> 00:09:51,550
as you'll know first there's the

00:09:48,339 --> 00:09:53,410
asymmetric public key encryption which

00:09:51,550 --> 00:09:56,260
is used during the TLS handshake itself

00:09:53,410 --> 00:09:58,180
and then once the shared secret key is

00:09:56,260 --> 00:10:00,910
established symmetric encryption takes

00:09:58,180 --> 00:10:03,250
over the good news is that modern

00:10:00,910 --> 00:10:06,640
hardware and up-to-date software made

00:10:03,250 --> 00:10:09,610
great improvements to help minimize the

00:10:06,640 --> 00:10:11,770
costs and what once previously you would

00:10:09,610 --> 00:10:14,200
assign to it extra additional hardware

00:10:11,770 --> 00:10:16,240
to do the encryption work particular it

00:10:14,200 --> 00:10:20,770
can now be done pretty efficiently by

00:10:16,240 --> 00:10:23,320
the CPU two examples here Adam Langley

00:10:20,770 --> 00:10:26,410
from google on our production front-end

00:10:23,320 --> 00:10:30,010
machines ssl/tls accounts for less than

00:10:26,410 --> 00:10:31,990
1% of the cpu load less than 10

00:10:30,010 --> 00:10:35,920
kilobytes of memory per connection and

00:10:31,990 --> 00:10:38,830
less than 2% of network overhead many

00:10:35,920 --> 00:10:41,440
people believe that ssl/tls takes a lot

00:10:38,830 --> 00:10:42,970
of CPU time but we hope that the

00:10:41,440 --> 00:10:47,140
preceding numbers will help to dispel

00:10:42,970 --> 00:10:49,420
that obviously Google have the financial

00:10:47,140 --> 00:10:50,860
and human resources

00:10:49,420 --> 00:10:52,750
a lot of effort into that and there's

00:10:50,860 --> 00:10:55,000
probably more advanced than most of us

00:10:52,750 --> 00:10:58,000
can hope to achieve but certainly this

00:10:55,000 --> 00:11:01,930
is achievable and then similarly from

00:10:58,000 --> 00:11:04,240
doug beaver facebook we've deployed TLS

00:11:01,930 --> 00:11:06,430
at a large scale using both hardware and

00:11:04,240 --> 00:11:08,560
software load balancers we found that

00:11:06,430 --> 00:11:11,170
modern software best based TLS

00:11:08,560 --> 00:11:14,290
implementations running on commodity

00:11:11,170 --> 00:11:16,930
cpus standard cpus are fast enough to

00:11:14,290 --> 00:11:18,640
hand or heavy HTTPS traffic load without

00:11:16,930 --> 00:11:23,110
needing to resort to dedicated

00:11:18,640 --> 00:11:24,790
cryptographic hardware so this is what

00:11:23,110 --> 00:11:26,380
I'm going to cover in the next 10-15

00:11:24,790 --> 00:11:28,000
minutes or so we're going to just talk

00:11:26,380 --> 00:11:31,690
about briefly what's going on at the TLS

00:11:28,000 --> 00:11:34,150
handshake stage itself where there are

00:11:31,690 --> 00:11:36,580
additional computational costs and round

00:11:34,150 --> 00:11:39,250
trip times going on we can look look

00:11:36,580 --> 00:11:41,080
then at one way of eliminating one of

00:11:39,250 --> 00:11:45,460
the round trips which is TLS session

00:11:41,080 --> 00:11:49,060
resumption which is effective for repeat

00:11:45,460 --> 00:11:50,560
users and then we look at TLS false

00:11:49,060 --> 00:11:53,800
starts which is a way we can eliminate

00:11:50,560 --> 00:11:58,420
another round trip if possible for first

00:11:53,800 --> 00:12:00,850
time users and then we'll look at OCSP

00:11:58,420 --> 00:12:02,980
stapling where with any luck this

00:12:00,850 --> 00:12:05,050
sometimes as a third round trip involved

00:12:02,980 --> 00:12:07,510
and we can eliminate that one as well or

00:12:05,050 --> 00:12:11,650
at least make it very efficient and then

00:12:07,510 --> 00:12:14,280
some final goodness on the top HTTP

00:12:11,650 --> 00:12:17,830
strict Transport Transport Security

00:12:14,280 --> 00:12:20,200
where we can use a server configuration

00:12:17,830 --> 00:12:22,570
to tell the browser tell the client

00:12:20,200 --> 00:12:26,140
directly to use ssl/tls without a need

00:12:22,570 --> 00:12:27,910
to negotiate what's available and then a

00:12:26,140 --> 00:12:32,430
brief mention of cipher Suites towards

00:12:27,910 --> 00:12:34,750
the end so the TLS handshake itself

00:12:32,430 --> 00:12:36,670
before the client and the server can

00:12:34,750 --> 00:12:38,830
begin exchanging application data over

00:12:36,670 --> 00:12:41,500
TLS the encrypted tunnel has to be

00:12:38,830 --> 00:12:43,330
negotiated so the clients and the server

00:12:41,500 --> 00:12:45,790
have to agree on the version of TLS

00:12:43,330 --> 00:12:47,710
they're going to lose they've got to

00:12:45,790 --> 00:12:51,460
choose the cipher Suites and if

00:12:47,710 --> 00:12:53,860
necessary verify the certificates and of

00:12:51,460 --> 00:12:56,140
course each of those steps requires new

00:12:53,860 --> 00:12:58,690
packet round trips between the client

00:12:56,140 --> 00:13:00,970
and the server which adds startup

00:12:58,690 --> 00:13:02,960
latency to all TLS connections so in

00:13:00,970 --> 00:13:05,090
essence the first step is the client

00:13:02,960 --> 00:13:07,400
asking of the server send me your

00:13:05,090 --> 00:13:10,490
certificates the server's responding

00:13:07,400 --> 00:13:12,980
here it is thirdly the client lens isn't

00:13:10,490 --> 00:13:15,560
that is good I'd like to use this cipher

00:13:12,980 --> 00:13:19,210
and the server's then responding okay

00:13:15,560 --> 00:13:23,960
let's go and then finally we can do the

00:13:19,210 --> 00:13:25,700
encrypted application data so you can

00:13:23,960 --> 00:13:28,430
seen that there are the tears

00:13:25,700 --> 00:13:30,830
connections require two full round trips

00:13:28,430 --> 00:13:33,770
for a full handshake and of course

00:13:30,830 --> 00:13:36,140
there's the CPU resources to verify and

00:13:33,770 --> 00:13:38,540
can we compute all that for the ensuing

00:13:36,140 --> 00:13:40,490
session the good news is we don't have

00:13:38,540 --> 00:13:44,450
to repeat the full handshake in every

00:13:40,490 --> 00:13:48,470
case and that's where we talk about TLS

00:13:44,450 --> 00:13:50,240
session resumption with session

00:13:48,470 --> 00:13:53,500
resumption if the client has previously

00:13:50,240 --> 00:13:56,030
communicated with the server then

00:13:53,500 --> 00:13:58,790
abbreviated handshake can be used and

00:13:56,030 --> 00:13:59,900
that requires just one round trip to

00:13:58,790 --> 00:14:03,290
allow the client and the server to

00:13:59,900 --> 00:14:05,510
reduce the CPU overhead by using

00:14:03,290 --> 00:14:07,670
previously negotiated parameters for the

00:14:05,510 --> 00:14:11,900
session for the security session itself

00:14:07,670 --> 00:14:13,940
hence TLS session resumption by using

00:14:11,900 --> 00:14:16,250
session identifiers then you can remove

00:14:13,940 --> 00:14:19,550
that round trip as well as the overhead

00:14:16,250 --> 00:14:22,310
of public key cryptography which is used

00:14:19,550 --> 00:14:24,700
to negotiate the shared secret key so

00:14:22,310 --> 00:14:27,770
you can set up a secure connection

00:14:24,700 --> 00:14:29,210
establish it very quickly and have no

00:14:27,770 --> 00:14:31,790
loss of security because you've already

00:14:29,210 --> 00:14:38,090
negotiated the security in previous

00:14:31,790 --> 00:14:40,550
sessions in practice most web

00:14:38,090 --> 00:14:42,260
applications attempts more established

00:14:40,550 --> 00:14:43,790
multiple connections the same house to

00:14:42,260 --> 00:14:46,790
fetch resources and parallel as you'll

00:14:43,790 --> 00:14:48,350
know but that so that means that session

00:14:46,790 --> 00:14:50,720
resumption is a kind of a must-have

00:14:48,350 --> 00:14:55,760
optimization and to reduce latency

00:14:50,720 --> 00:14:57,380
computational costs from both sides most

00:14:55,760 --> 00:14:59,090
modern browsers intentionally wait for

00:14:57,380 --> 00:15:01,160
the first TLS connection to complete

00:14:59,090 --> 00:15:03,830
before opening new connections to the

00:15:01,160 --> 00:15:07,040
same server so subsequent TLS

00:15:03,830 --> 00:15:09,710
connections can use reuse the SSL

00:15:07,040 --> 00:15:14,060
session parameters to avoid that costly

00:15:09,710 --> 00:15:17,330
handshake there's two ways of doing it

00:15:14,060 --> 00:15:19,220
now you can use session identifiers and

00:15:17,330 --> 00:15:22,960
that's where the shared state is held on

00:15:19,220 --> 00:15:25,940
the server the server assigns session ID

00:15:22,960 --> 00:15:28,580
it will cache the parameters and the

00:15:25,940 --> 00:15:32,000
client will respond with a session ID

00:15:28,580 --> 00:15:33,980
and the session can then be resumed but

00:15:32,000 --> 00:15:35,870
that means server itself has to store

00:15:33,980 --> 00:15:39,320
the cache of all of those sessions and

00:15:35,870 --> 00:15:41,510
if you've got a site that's handling a

00:15:39,320 --> 00:15:44,060
lot of users then that means a large

00:15:41,510 --> 00:15:46,390
session cache which may be absolutely

00:15:44,060 --> 00:15:50,300
reasonable in your use case completely

00:15:46,390 --> 00:15:51,950
but not necessarily you do have to be of

00:15:50,300 --> 00:15:54,070
course careful about how you expire the

00:15:51,950 --> 00:15:56,600
sessions and rotate things and securely

00:15:54,070 --> 00:15:58,640
the second way of doing it which won't

00:15:56,600 --> 00:16:00,770
of course require that massive session

00:15:58,640 --> 00:16:03,530
cache on the service server end is to

00:16:00,770 --> 00:16:06,890
use session tickets where the shared

00:16:03,530 --> 00:16:12,410
state is on the client itself there the

00:16:06,890 --> 00:16:14,630
server encrypts parameters it's it's an

00:16:12,410 --> 00:16:17,030
opaque ticket and the client sends that

00:16:14,630 --> 00:16:19,040
opaque ticket back and the server can

00:16:17,030 --> 00:16:22,010
decrypt the ticket and then resume the

00:16:19,040 --> 00:16:24,560
session so that yeah the shared state is

00:16:22,010 --> 00:16:28,990
then on the client itself and making

00:16:24,560 --> 00:16:31,400
things far more efficient the smart and

00:16:28,990 --> 00:16:33,260
cryptographically conscious of you will

00:16:31,400 --> 00:16:35,720
be aware that potentially opens a

00:16:33,260 --> 00:16:37,700
security hole and so tickets need to be

00:16:35,720 --> 00:16:40,510
session things need to be rotated

00:16:37,700 --> 00:16:44,060
regularly to make sure that security

00:16:40,510 --> 00:16:46,040
isn't compromised in fact Adam Langley

00:16:44,060 --> 00:16:47,450
on the Imperial violet blog says session

00:16:46,040 --> 00:16:49,850
ticket keys have to be distributed to

00:16:47,450 --> 00:16:51,260
all front-end machines without being

00:16:49,850 --> 00:16:56,000
written to any kind of persistent

00:16:51,260 --> 00:16:57,350
storage and frequently rotated and

00:16:56,000 --> 00:16:58,790
that's what this is this looks like in

00:16:57,350 --> 00:17:01,970
practice if you send an openness so

00:16:58,790 --> 00:17:06,640
request to a proprietary connector

00:17:01,970 --> 00:17:09,260
you'll see the session ID in some of the

00:17:06,640 --> 00:17:13,220
response and the session ticket you can

00:17:09,260 --> 00:17:16,900
see there at the bottom ok so that's

00:17:13,220 --> 00:17:19,640
great for return users it doesn't help

00:17:16,900 --> 00:17:21,590
where the visitors coming to the server

00:17:19,640 --> 00:17:23,750
for the first time or if the previous

00:17:21,590 --> 00:17:27,920
session has expired and that's where we

00:17:23,750 --> 00:17:29,450
need TLS false start CLS false start

00:17:27,920 --> 00:17:32,390
change the way the TLS handshake

00:17:29,450 --> 00:17:36,530
protocol happens but what it does do is

00:17:32,390 --> 00:17:39,530
it alters the timing of the the protocol

00:17:36,530 --> 00:17:42,170
handshake of the moment at which the

00:17:39,530 --> 00:17:44,210
application data itself can be sent it

00:17:42,170 --> 00:17:47,210
seems to make in kind of intuitive sense

00:17:44,210 --> 00:17:50,330
that once the client key exchange record

00:17:47,210 --> 00:17:52,370
is agreed the server already knows the

00:17:50,330 --> 00:17:55,280
encryption key and it can begin

00:17:52,370 --> 00:17:56,390
transmitting the application data the

00:17:55,280 --> 00:17:58,520
rest of the handshake is kind of

00:17:56,390 --> 00:18:00,950
confirming that nobody's tampered with

00:17:58,520 --> 00:18:03,230
the handshake records and so that can be

00:18:00,950 --> 00:18:05,810
done in parallel now as a result false

00:18:03,230 --> 00:18:08,860
start as it's called allows you to keep

00:18:05,810 --> 00:18:10,760
the TLS handshake down to one round trip

00:18:08,860 --> 00:18:12,410
regardless of whether performing a full

00:18:10,760 --> 00:18:17,080
or abbreviated handshake you can still

00:18:12,410 --> 00:18:19,730
be still be used I in practice though

00:18:17,080 --> 00:18:23,590
even though TLS false starts is

00:18:19,730 --> 00:18:27,560
generally backwards compatible with all

00:18:23,590 --> 00:18:31,190
clients and servers enabling by default

00:18:27,560 --> 00:18:34,880
has been problematic and you may need

00:18:31,190 --> 00:18:37,820
some poorly implemented servers so as a

00:18:34,880 --> 00:18:42,050
result modern browsers kind of get

00:18:37,820 --> 00:18:43,580
around it or have to check that it's in

00:18:42,050 --> 00:18:46,510
place well actually I think I've got a

00:18:43,580 --> 00:18:50,660
little graph yeah sorry that in a second

00:18:46,510 --> 00:18:54,350
yep so to deploy false start in chrome

00:18:50,660 --> 00:18:59,110
and firefox they require NPN to

00:18:54,350 --> 00:19:01,850
advertise protocol is available and also

00:18:59,110 --> 00:19:06,770
requires an appropriately secure cipher

00:19:01,850 --> 00:19:09,920
suite is chosen in nor enables forward

00:19:06,770 --> 00:19:11,390
security Safari just wants that last

00:19:09,920 --> 00:19:14,860
element it just wants to have a good

00:19:11,390 --> 00:19:18,560
cipher suite that supports for security

00:19:14,860 --> 00:19:20,780
Internet Explorer has a combination of a

00:19:18,560 --> 00:19:24,080
black list of known sites that break

00:19:20,780 --> 00:19:25,910
when TLS false starts enabled and it

00:19:24,080 --> 00:19:27,440
also had a timeout built into it to

00:19:25,910 --> 00:19:31,610
repeat the handshake if the TLS false

00:19:27,440 --> 00:19:34,900
start fails so in practice what you need

00:19:31,610 --> 00:19:39,880
to do to implement it is to have NPN and

00:19:34,900 --> 00:19:39,880
had a good cipher Suites and in place

00:19:41,690 --> 00:19:46,740
yeah so that's what this looks like in

00:19:44,610 --> 00:19:53,220
practice so you see on this little graph

00:19:46,740 --> 00:19:54,870
here the top where is standard HTTP no

00:19:53,220 --> 00:19:58,230
ssl involved here at all and you can see

00:19:54,870 --> 00:20:03,360
the response time there the second line

00:19:58,230 --> 00:20:05,400
is a poorly built server doing SSL badly

00:20:03,360 --> 00:20:07,740
and essentially got three round-trips

00:20:05,400 --> 00:20:10,980
going on there and we don't need one the

00:20:07,740 --> 00:20:14,400
third row is SSL properly implemented in

00:20:10,980 --> 00:20:15,900
NJ next one point five point seven the

00:20:14,400 --> 00:20:17,430
MTU record you don't need to worry about

00:20:15,900 --> 00:20:22,530
too much but that's about fixing the

00:20:17,430 --> 00:20:23,970
size of the CLS record but the important

00:20:22,530 --> 00:20:26,100
bit is the final line there where you

00:20:23,970 --> 00:20:30,300
can see that we back down to one

00:20:26,100 --> 00:20:31,740
round-trip extra and by comparing the

00:20:30,300 --> 00:20:33,510
top row in the bottom row you can see

00:20:31,740 --> 00:20:36,530
the only things is different is that one

00:20:33,510 --> 00:20:40,410
roundtrip so the overhead are

00:20:36,530 --> 00:20:42,510
implementing TLS is reduced down to as

00:20:40,410 --> 00:20:48,000
low as it can possibly go with false

00:20:42,510 --> 00:20:49,950
starts so in short just turn on NPN or

00:20:48,000 --> 00:20:52,620
enable NPN and choose a good cipher

00:20:49,950 --> 00:20:57,720
suite and you should be good to go which

00:20:52,620 --> 00:21:00,300
means yeah good to go right ocsp

00:20:57,720 --> 00:21:03,870
stapling so the last element in the

00:21:00,300 --> 00:21:07,560
stage is is ocsp online certificate

00:21:03,870 --> 00:21:09,510
status protocol that's a protocol for

00:21:07,560 --> 00:21:11,340
checking if the ssl certificate itself

00:21:09,510 --> 00:21:12,990
is still valid or whether it's been

00:21:11,340 --> 00:21:16,220
revoked and what happens there is the

00:21:12,990 --> 00:21:19,740
browser sends a request to an ocsp URL

00:21:16,220 --> 00:21:21,810
to find out stages of the certificates

00:21:19,740 --> 00:21:25,610
and receives a response back containing

00:21:21,810 --> 00:21:28,920
the validity parameters which of course

00:21:25,610 --> 00:21:30,690
introduces some significant problems one

00:21:28,920 --> 00:21:32,700
is that it's compromised your security

00:21:30,690 --> 00:21:36,630
because you've already asked a third

00:21:32,700 --> 00:21:39,390
party whether this site is valid or not

00:21:36,630 --> 00:21:41,100
and so privacy is being compromised it

00:21:39,390 --> 00:21:44,100
could potentially put a heavy load on a

00:21:41,100 --> 00:21:46,260
CA server and it also adds of course an

00:21:44,100 --> 00:21:51,340
extra round trip time none of which you

00:21:46,260 --> 00:21:54,730
want so yes the privacy of the ocsp

00:21:51,340 --> 00:21:57,640
contact the ca to confirm certificate

00:21:54,730 --> 00:22:02,920
validity CA knows what websites being

00:21:57,640 --> 00:22:08,560
accessed and who's access to yes okay so

00:22:02,920 --> 00:22:09,910
OCSP stapling then is a way of trying to

00:22:08,560 --> 00:22:13,510
cut down on on all of those three

00:22:09,910 --> 00:22:17,770
problems and essentially what happens is

00:22:13,510 --> 00:22:22,000
that the server itself queries the ocsp

00:22:17,770 --> 00:22:24,760
server directly and caches that response

00:22:22,000 --> 00:22:30,030
and the response then can be stapled

00:22:24,760 --> 00:22:32,950
hence the term to the TLS ssl handshake

00:22:30,030 --> 00:22:36,640
it becomes part of these to get status

00:22:32,950 --> 00:22:38,680
request response and as a result the ca

00:22:36,640 --> 00:22:42,160
servers are not burdened with the

00:22:38,680 --> 00:22:44,890
requests the privacy issue is is dealt

00:22:42,160 --> 00:22:46,450
with and bright browser no longer needs

00:22:44,890 --> 00:22:49,630
it then disclose the users browsing

00:22:46,450 --> 00:22:52,630
habits to a third party but it also

00:22:49,630 --> 00:22:54,550
means of course there's one less dns tcp

00:22:52,630 --> 00:22:57,270
connects and responds in the middle of

00:22:54,550 --> 00:23:00,550
the process so put all those together

00:22:57,270 --> 00:23:02,380
and you've got a great thing do you need

00:23:00,550 --> 00:23:03,280
to bear in mind oh sorry yes so that's

00:23:02,380 --> 00:23:05,620
what it would look like if you were

00:23:03,280 --> 00:23:07,060
implementing it in in engine X it's very

00:23:05,620 --> 00:23:10,360
simple just a couple of lines in your

00:23:07,060 --> 00:23:12,930
engine X configuration and in the same

00:23:10,360 --> 00:23:15,520
response same request we showed it go

00:23:12,930 --> 00:23:20,680
this is what you would see in the middle

00:23:15,520 --> 00:23:21,460
of that response data there we go do

00:23:20,680 --> 00:23:23,350
bear in mind if you're going to

00:23:21,460 --> 00:23:25,930
implementing it that OCSP stapling does

00:23:23,350 --> 00:23:27,670
increase your certificate size so you

00:23:25,930 --> 00:23:32,920
know whether that will be a problem for

00:23:27,670 --> 00:23:36,910
you the final elements are here really

00:23:32,920 --> 00:23:39,400
is a HTTP strict Transport Security HST

00:23:36,910 --> 00:23:42,430
s and what this does is it converts the

00:23:39,400 --> 00:23:47,980
origin server your server to an HTTPS

00:23:42,430 --> 00:23:50,370
only destination what that does of

00:23:47,980 --> 00:23:54,370
course is it eliminates the unnecessary

00:23:50,370 --> 00:23:56,200
conversion HTTP to HTTPS all those

00:23:54,370 --> 00:23:57,940
redirects and it's just the

00:23:56,200 --> 00:23:59,410
responsibility for that to the client

00:23:57,940 --> 00:24:02,080
itself takes away from the server is

00:23:59,410 --> 00:24:04,750
back on the client and the client the

00:24:02,080 --> 00:24:07,780
browser will automatically rewrite

00:24:04,750 --> 00:24:11,290
all the links to HTTPS and it does that

00:24:07,780 --> 00:24:14,350
by instructing the user agent to enforce

00:24:11,290 --> 00:24:18,400
several rules or requests the origin

00:24:14,350 --> 00:24:21,430
should be sent to https all insecure

00:24:18,400 --> 00:24:23,710
links and client requests should be

00:24:21,430 --> 00:24:25,390
automatically converted to https on the

00:24:23,710 --> 00:24:29,110
client before the request is actually

00:24:25,390 --> 00:24:30,970
sense if there's a certificate error

00:24:29,110 --> 00:24:32,830
then the error messages Thrones the

00:24:30,970 --> 00:24:35,830
browser and the client isn't allowed to

00:24:32,830 --> 00:24:39,640
view the site I can't circumvent the

00:24:35,830 --> 00:24:45,040
warning and it can also set a maximum

00:24:39,640 --> 00:24:46,600
age cache which you can set some some

00:24:45,040 --> 00:24:53,500
large thing like you know a whole year

00:24:46,600 --> 00:24:56,200
365 days and they just before we finish

00:24:53,500 --> 00:24:58,570
talking yes so this is what you would do

00:24:56,200 --> 00:25:00,610
in in your engine X configuration you

00:24:58,570 --> 00:25:05,590
would simply add the header that says

00:25:00,610 --> 00:25:07,510
use strict Transport Security and a

00:25:05,590 --> 00:25:11,040
quick last mention about cipher Suites

00:25:07,510 --> 00:25:11,040
before we try and put this all together

00:25:12,630 --> 00:25:17,730
so when choosing your cipher Suites just

00:25:15,250 --> 00:25:21,370
make sure that what you're doing is

00:25:17,730 --> 00:25:23,710
looking towards ensuring forward

00:25:21,370 --> 00:25:31,960
security so don't use SSL version 2 or 3

00:25:23,710 --> 00:25:34,000
use TLS version 11.12 concept of for

00:25:31,960 --> 00:25:35,440
securities is quite a simple one really

00:25:34,000 --> 00:25:38,650
the client and the server negotiate a

00:25:35,440 --> 00:25:40,980
key right then which never hits the wine

00:25:38,650 --> 00:25:43,750
is destroyed at the end of the session

00:25:40,980 --> 00:25:46,420
so with Ford security of an attacker

00:25:43,750 --> 00:25:49,240
gets hold of the private key it will not

00:25:46,420 --> 00:25:54,270
be able to decrypt past communications

00:25:49,240 --> 00:25:56,290
hence your being and secure forward

00:25:54,270 --> 00:25:59,020
private key is only used to sign the

00:25:56,290 --> 00:26:04,780
difficult and shake so that doesn't need

00:25:59,020 --> 00:26:06,130
the premaster key and yeah do you think

00:26:04,780 --> 00:26:08,740
about backwards compatibility that when

00:26:06,130 --> 00:26:09,760
you're doing this there's lots of

00:26:08,740 --> 00:26:13,300
different ways of implementing your

00:26:09,760 --> 00:26:16,040
cipher suites which can ensure more or

00:26:13,300 --> 00:26:19,440
less backwards compatibility

00:26:16,040 --> 00:26:21,570
for help out there there is there's

00:26:19,440 --> 00:26:24,000
plenty websites which will tell you good

00:26:21,570 --> 00:26:28,950
cipher Suites to use Mozilla keep track

00:26:24,000 --> 00:26:32,610
of a wiki of the latest that you need to

00:26:28,950 --> 00:26:35,640
know for implementing CLS and they offer

00:26:32,610 --> 00:26:38,040
a really good backwards compatible side

00:26:35,640 --> 00:26:39,390
sweet but it is huge the bottom link

00:26:38,040 --> 00:26:45,360
there will will give you something else

00:26:39,390 --> 00:26:47,970
as an alternative so just to summarize

00:26:45,360 --> 00:26:50,190
the ssl/tls stuff is a checklist of what

00:26:47,970 --> 00:26:52,800
you might want to do to achieve a one

00:26:50,190 --> 00:26:53,850
round-trip time implement false starts

00:26:52,800 --> 00:26:57,330
and that will give you one round-trip

00:26:53,850 --> 00:26:58,350
time for new visitors implement session

00:26:57,330 --> 00:27:00,540
resumption that'll give you one

00:26:58,350 --> 00:27:04,770
round-trip time for returning visitors

00:27:00,540 --> 00:27:07,560
and implement OCSP stapling and then

00:27:04,770 --> 00:27:11,160
there'll be no se SP process blocking

00:27:07,560 --> 00:27:18,780
the request so we're going to look now

00:27:11,160 --> 00:27:21,150
at speedy itself okay so some brief

00:27:18,780 --> 00:27:29,400
history the first document definition of

00:27:21,150 --> 00:27:33,420
HTTP was a version 0.9 in 94 1991 and

00:27:29,400 --> 00:27:36,390
the one were the version 1.1 was being

00:27:33,420 --> 00:27:39,930
worked on through the mid nineties many

00:27:36,390 --> 00:27:42,120
browsers were HTTP 1.1 compliant before

00:27:39,930 --> 00:27:46,830
it was agreed as the standard in June of

00:27:42,120 --> 00:27:50,910
1999 and the 1.1 is the version that

00:27:46,830 --> 00:27:53,880
dominates Internet traffic today by the

00:27:50,910 --> 00:27:56,190
middle of last decade rich media became

00:27:53,880 --> 00:27:59,520
such a significant feature of websites

00:27:56,190 --> 00:28:03,900
that it became clear that HTTP 1.1 was

00:27:59,520 --> 00:28:06,570
inadequate for the modern web and people

00:28:03,900 --> 00:28:09,060
started thinking about its successes in

00:28:06,570 --> 00:28:10,740
november two thousand nine google then

00:28:09,060 --> 00:28:14,960
published a project they'd been working

00:28:10,740 --> 00:28:19,350
on ended making a two times faster web

00:28:14,960 --> 00:28:21,720
which they called speedy since then

00:28:19,350 --> 00:28:23,150
speedy has been developed substantially

00:28:21,720 --> 00:28:26,580
as a protocol and the current version

00:28:23,150 --> 00:28:28,620
3.1 is substantially different one from

00:28:26,580 --> 00:28:31,460
what was originally

00:28:28,620 --> 00:28:34,200
published as of july two thousand twelve

00:28:31,460 --> 00:28:36,210
the group working on speedy has said

00:28:34,200 --> 00:28:41,270
that it's working toward standardization

00:28:36,210 --> 00:28:44,610
and the first draft of HTTP version 2 is

00:28:41,270 --> 00:28:47,460
taking speedy as the basis and working

00:28:44,610 --> 00:28:54,570
forward from there in a similar manner

00:28:47,460 --> 00:28:58,400
to HTTP 1.1 whilst HTTP version 2 is

00:28:54,570 --> 00:29:00,630
being developed the early versions

00:28:58,400 --> 00:29:03,630
version that a speedy is being deployed

00:29:00,630 --> 00:29:06,300
and most modern browsers now support the

00:29:03,630 --> 00:29:08,309
speedy protocol with some notable

00:29:06,300 --> 00:29:12,360
exceptions that will mention in due

00:29:08,309 --> 00:29:15,080
course some of the best known uses of

00:29:12,360 --> 00:29:21,179
speedy at the moment are Google Twitter

00:29:15,080 --> 00:29:23,480
Facebook max CDN and cloud front there's

00:29:21,179 --> 00:29:27,559
plenty of others of course but that's

00:29:23,480 --> 00:29:31,950
there's too many to mention really

00:29:27,559 --> 00:29:33,960
speedy is it allows the the goal of the

00:29:31,950 --> 00:29:36,030
speedy is to reduce web page load time

00:29:33,960 --> 00:29:38,490
it achieves this in three primary ways

00:29:36,030 --> 00:29:40,290
it allows the client and service

00:29:38,490 --> 00:29:42,660
compress the requests and response

00:29:40,290 --> 00:29:47,190
headers to cut down on bandwidth usage

00:29:42,660 --> 00:29:50,070
usage it adds a session layer between

00:29:47,190 --> 00:29:52,290
HTTP and SSL that supports concurrent

00:29:50,070 --> 00:29:56,400
interleaved streams over single TCP

00:29:52,290 --> 00:29:58,500
connection it allows the server to

00:29:56,400 --> 00:30:00,929
actively push resources to the client

00:29:58,500 --> 00:30:02,429
that it knows that the client will need

00:30:00,929 --> 00:30:08,550
without waiting for the client to

00:30:02,429 --> 00:30:11,480
request them speedy requires the use of

00:30:08,550 --> 00:30:15,420
SSL and doesn't support plain TCP

00:30:11,480 --> 00:30:18,540
there's some advantages on the server

00:30:15,420 --> 00:30:22,250
side compared to https speedy requests

00:30:18,540 --> 00:30:25,470
consume less resources or CPU and memory

00:30:22,250 --> 00:30:29,429
on the server and compared to http

00:30:25,470 --> 00:30:33,120
spirit consumes less memory but just a

00:30:29,429 --> 00:30:36,200
bit more CPU this may be a good or bad

00:30:33,120 --> 00:30:39,270
thing or completely irrelevant to you

00:30:36,200 --> 00:30:41,960
depending on which resource your server

00:30:39,270 --> 00:30:41,960
is limited by

00:30:46,080 --> 00:30:51,460
all of these benefits are dependent on

00:30:49,480 --> 00:30:56,110
the network and website deployment

00:30:51,460 --> 00:30:58,690
conditions though there's browser

00:30:56,110 --> 00:31:03,040
support most good modern browsers

00:30:58,690 --> 00:31:11,250
support speedy but not all of them for

00:31:03,040 --> 00:31:18,309
example Safari doesn't support it at all

00:31:11,250 --> 00:31:20,020
in the version 7 ie11 has only partial

00:31:18,309 --> 00:31:23,170
support and earlier versions don't

00:31:20,020 --> 00:31:26,350
support speedy at all the next version

00:31:23,170 --> 00:31:30,580
of Safari that's pakist would packaged

00:31:26,350 --> 00:31:38,260
with yo semite will apparently by all

00:31:30,580 --> 00:31:40,570
reports support speedy there's bandwidth

00:31:38,260 --> 00:31:44,200
and round trip time to take into account

00:31:40,570 --> 00:31:46,380
as well speedy benefits are found to be

00:31:44,200 --> 00:31:51,010
larger when there's less bandwidth and

00:31:46,380 --> 00:31:52,809
longer round-trip times because there

00:31:51,010 --> 00:31:55,300
are three times and bandwidth determined

00:31:52,809 --> 00:31:56,740
amount of time page load spend in the

00:31:55,300 --> 00:32:00,160
network relative to computation

00:31:56,740 --> 00:32:02,290
computation speedy provides minimal

00:32:00,160 --> 00:32:07,020
important improvements under good

00:32:02,290 --> 00:32:10,350
networking conditions so the biggest

00:32:07,020 --> 00:32:12,700
point here would be mobile verizon

00:32:10,350 --> 00:32:15,130
because mobile networks usually aren't

00:32:12,700 --> 00:32:19,020
that great and getting the most out of

00:32:15,130 --> 00:32:19,020
the bandwidth there is a good thing

00:32:25,549 --> 00:32:29,960
yeah multiple origins speedy can

00:32:28,429 --> 00:32:33,080
multiplex the resources from the same

00:32:29,960 --> 00:32:34,940
origin but most website requests and

00:32:33,080 --> 00:32:40,909
responses are spread throughout multiple

00:32:34,940 --> 00:32:44,799
origins so we lose a bit of the impact

00:32:40,909 --> 00:32:49,789
that speedy has on it has on our site

00:32:44,799 --> 00:32:52,129
browser processing once the browser

00:32:49,789 --> 00:32:54,289
receives the page resources from a

00:32:52,129 --> 00:32:58,279
speedy enabled server it must process

00:32:54,289 --> 00:33:01,149
them so a slow browser well it it will

00:32:58,279 --> 00:33:03,889
limit the gains from speedy traffic and

00:33:01,149 --> 00:33:06,200
then there's packet loss if packet loss

00:33:03,889 --> 00:33:09,970
is high speedy may actually hurt the

00:33:06,200 --> 00:33:13,009
situation a single connection SN speedy

00:33:09,970 --> 00:33:15,470
will suffer significantly under high

00:33:13,009 --> 00:33:17,090
packet loss situations because it

00:33:15,470 --> 00:33:23,330
aggressively reduces the congestion

00:33:17,090 --> 00:33:25,730
window compared to HTTP which reduces

00:33:23,330 --> 00:33:29,899
the congestion window only on one of its

00:33:25,730 --> 00:33:32,450
parallel connections however packet loss

00:33:29,899 --> 00:33:33,710
occurs more often when concurrent TCP

00:33:32,450 --> 00:33:37,159
connections are competing with each

00:33:33,710 --> 00:33:39,049
other so Speedy's approach of

00:33:37,159 --> 00:33:41,359
multiplexing on fewer connections may

00:33:39,049 --> 00:33:44,929
actually help mitigate mitigate packet

00:33:41,359 --> 00:33:52,399
loss and then getting it all together

00:33:44,929 --> 00:33:55,009
the speedy sandwich and yeah getting

00:33:52,399 --> 00:33:58,159
speedy to work with MJ x is actually as

00:33:55,009 --> 00:34:04,570
simple as compiling it with the with

00:33:58,159 --> 00:34:04,570
https speedy module and you're done

00:34:08,310 --> 00:34:12,220
so having told you all that finally we

00:34:10,720 --> 00:34:16,200
get to the thing that we we said we

00:34:12,220 --> 00:34:18,609
propose as a way of doing all this and

00:34:16,200 --> 00:34:20,919
yeah this is called the speedy sandwich

00:34:18,609 --> 00:34:23,379
it's not our name I have to admit I

00:34:20,919 --> 00:34:25,990
heard of first about this idea from this

00:34:23,379 --> 00:34:29,859
guy Barney Hanlon at drupalcamp London

00:34:25,990 --> 00:34:32,139
back in March I think it was but took it

00:34:29,859 --> 00:34:33,429
away as an idea he just did a hand

00:34:32,139 --> 00:34:35,320
waving kind of thing I took it we took

00:34:33,429 --> 00:34:36,669
it away as an idea and worked it up into

00:34:35,320 --> 00:34:38,230
a real server to see what we can

00:34:36,669 --> 00:34:40,780
actually do with it whether it was as

00:34:38,230 --> 00:34:43,270
good as he suggested it was but the idea

00:34:40,780 --> 00:34:45,879
of the speedy sandwich is this your

00:34:43,270 --> 00:34:49,720
original request comes in and it passes

00:34:45,879 --> 00:34:52,570
to a front-end engineers which has four

00:34:49,720 --> 00:34:55,030
tasks the first task is what we've been

00:34:52,570 --> 00:34:58,900
talking about it does the speedbit an

00:34:55,030 --> 00:35:00,580
SSL termination I don't think actually

00:34:58,900 --> 00:35:02,530
mentioned but speedy has to be an SSL

00:35:00,580 --> 00:35:05,109
one of the one of the image that great

00:35:02,530 --> 00:35:07,900
so one of the aspects of speeding has

00:35:05,109 --> 00:35:09,369
them has to be an SSL the front engine X

00:35:07,900 --> 00:35:12,580
because as we said right at the

00:35:09,369 --> 00:35:14,740
beginning is brilliant at a static file

00:35:12,580 --> 00:35:17,920
caching we get the front end to do the

00:35:14,740 --> 00:35:21,550
static file caching engineers can push

00:35:17,920 --> 00:35:24,580
out a static stack assets unbelievably

00:35:21,550 --> 00:35:26,380
fast if we give this engine excess

00:35:24,580 --> 00:35:28,480
access to the doc roots it can handle

00:35:26,380 --> 00:35:29,890
those static file caches poorly and

00:35:28,480 --> 00:35:31,390
faster than varnish could get them out

00:35:29,890 --> 00:35:34,270
of RAM because it's got access to the

00:35:31,390 --> 00:35:35,859
file handles themselves maybe not in the

00:35:34,270 --> 00:35:38,560
first time but because it's that it's

00:35:35,859 --> 00:35:43,080
cashing them three four five requests to

00:35:38,560 --> 00:35:43,080
the same image certainly very very good

00:35:43,170 --> 00:35:48,910
it can also it should also go and do the

00:35:45,550 --> 00:35:51,010
G zipping on the front end so there's no

00:35:48,910 --> 00:35:53,770
need for varnish itself to handle gzip

00:35:51,010 --> 00:35:59,050
content just let the top layer deal with

00:35:53,770 --> 00:36:00,820
that and then help the Internet's to the

00:35:59,050 --> 00:36:04,060
caching with some good PageSpeed

00:36:00,820 --> 00:36:05,470
implementations PageSpeed is user agent

00:36:04,060 --> 00:36:07,810
aware so it can make sure that the right

00:36:05,470 --> 00:36:10,140
version of what's being requested is

00:36:07,810 --> 00:36:13,060
being put out to the right user agents

00:36:10,140 --> 00:36:15,220
that then passes on to varnish which is

00:36:13,060 --> 00:36:17,500
the middle of the sandwich which does

00:36:15,220 --> 00:36:19,599
what virus does best it caches the

00:36:17,500 --> 00:36:22,059
dynamic pages and it does it blindingly

00:36:19,599 --> 00:36:23,859
asked and it can do some cookie

00:36:22,059 --> 00:36:26,109
normalization varnishes very good at

00:36:23,859 --> 00:36:28,660
normalizing the cookie system so that's

00:36:26,109 --> 00:36:31,660
that's a good thing for it to do and

00:36:28,660 --> 00:36:34,509
then the final element of the final

00:36:31,660 --> 00:36:37,359
bread layer in the sandwich I'm English

00:36:34,509 --> 00:36:40,930
we like are savages is another way of

00:36:37,359 --> 00:36:45,279
engine X and that does the dynamic pages

00:36:40,930 --> 00:36:47,309
so it can talk to the php-fpm at the

00:36:45,279 --> 00:36:49,599
back and you might want to do some

00:36:47,309 --> 00:36:51,489
general PageSpeed optimizations you may

00:36:49,599 --> 00:36:53,170
not have to but you might want to things

00:36:51,489 --> 00:36:55,029
like collapsing white space very simple

00:36:53,170 --> 00:36:58,029
elementary things like that and then

00:36:55,029 --> 00:36:59,950
push it onto the back to php-fpm which

00:36:58,029 --> 00:37:01,690
is running your Drupal application which

00:36:59,950 --> 00:37:03,400
of course doesn't have to be PHP can be

00:37:01,690 --> 00:37:05,410
whatever is on the back but engine X is

00:37:03,400 --> 00:37:11,170
talking to you but that's the idea with

00:37:05,410 --> 00:37:13,569
the speedy sandwich so here just to

00:37:11,170 --> 00:37:17,680
round off we'll get to what we think

00:37:13,569 --> 00:37:21,339
looks like the payback so a few screen

00:37:17,680 --> 00:37:23,140
captures for you this is a request these

00:37:21,339 --> 00:37:24,579
are all requests by exactly the same

00:37:23,140 --> 00:37:28,450
server but served in a different way so

00:37:24,579 --> 00:37:30,999
this is to a a know speedy sandwich an

00:37:28,450 --> 00:37:33,190
SSL sandwich doing exactly the same job

00:37:30,999 --> 00:37:35,859
but no speedy on the front and you can

00:37:33,190 --> 00:37:38,469
see here we've done all the stuff we

00:37:35,859 --> 00:37:40,239
talked about so far with TLS

00:37:38,469 --> 00:37:41,769
optimization so the ssl connection on

00:37:40,239 --> 00:37:44,979
the very first row is as small as it can

00:37:41,769 --> 00:37:47,950
be but then all the the other page

00:37:44,979 --> 00:37:48,969
elements are flowing in our one after

00:37:47,950 --> 00:37:53,940
each other in a classic kind of

00:37:48,969 --> 00:37:58,329
waterfall way in which they come down

00:37:53,940 --> 00:37:59,589
implements speedy and that changes so

00:37:58,329 --> 00:38:00,940
they come almost parallel with each

00:37:59,589 --> 00:38:02,680
other completely parallel you see the

00:38:00,940 --> 00:38:04,450
almost vertical line there as soon as

00:38:02,680 --> 00:38:06,640
the ssl connection has been dealt with

00:38:04,450 --> 00:38:08,680
then all of the arrest the page assets

00:38:06,640 --> 00:38:11,589
come in dramatically that blue line on

00:38:08,680 --> 00:38:14,619
the right hand side is the page

00:38:11,589 --> 00:38:17,049
completed which on the previous one

00:38:14,619 --> 00:38:23,650
sorry is the right-hand edge of the page

00:38:17,049 --> 00:38:24,729
so 1.9 seconds roughly a long way and

00:38:23,650 --> 00:38:27,329
then with speedy that comes in

00:38:24,729 --> 00:38:30,759
dramatically to one and a half seconds

00:38:27,329 --> 00:38:31,810
so he shaved off twenty twenty percent

00:38:30,759 --> 00:38:33,640
or so

00:38:31,810 --> 00:38:34,990
and then prevent the speedy sandwich

00:38:33,640 --> 00:38:37,120
which with all the goodness that we

00:38:34,990 --> 00:38:41,890
talked about and what you end up with is

00:38:37,120 --> 00:38:43,750
this you can see far less assets being

00:38:41,890 --> 00:38:46,870
passed across and all the speedy

00:38:43,750 --> 00:38:48,790
goodness everything is collapsed down as

00:38:46,870 --> 00:38:49,960
much as it possibly can be PageSpeed is

00:38:48,790 --> 00:38:52,990
doing a great job of pushing everything

00:38:49,960 --> 00:38:56,080
together full on cashing from engine X

00:38:52,990 --> 00:38:58,630
and the PageSpeed page load time comes

00:38:56,080 --> 00:39:00,340
down even further and we're just a

00:38:58,630 --> 00:39:02,200
marginally over a second here on this

00:39:00,340 --> 00:39:05,740
some completely uncashed browser

00:39:02,200 --> 00:39:07,930
requesting this I've done some load

00:39:05,740 --> 00:39:10,150
tests as well it's quite hard to do load

00:39:07,930 --> 00:39:12,790
test because speedy such a new protocol

00:39:10,150 --> 00:39:16,540
term load testing with it is not easy

00:39:12,790 --> 00:39:19,780
but we've done our best so a ramp test

00:39:16,540 --> 00:39:22,030
here I lampe up five concurrent users

00:39:19,780 --> 00:39:24,040
all the way to 50 current users every 30

00:39:22,030 --> 00:39:26,260
seconds so you can see there this is

00:39:24,040 --> 00:39:29,110
this is what the test looks like when

00:39:26,260 --> 00:39:31,000
it's being implemented the number of

00:39:29,110 --> 00:39:34,510
hits can currently earn simultaneous

00:39:31,000 --> 00:39:37,450
hits per second maxing out at what's

00:39:34,510 --> 00:39:39,610
that just over 350 isn't it so with a

00:39:37,450 --> 00:39:41,410
know speedy server I'm afraid these next

00:39:39,610 --> 00:39:45,130
couple of them graphs aren't in the same

00:39:41,410 --> 00:39:46,780
scale but you can see it's this highly

00:39:45,130 --> 00:39:48,670
optimized server ali's bought himself a

00:39:46,780 --> 00:39:55,180
massive server you just like showing off

00:39:48,670 --> 00:39:58,000
boys with toys SSL or TLS sandwich is

00:39:55,180 --> 00:40:01,510
very very fast but there's quite a bit a

00:39:58,000 --> 00:40:04,900
bit of fluctuation in the response time

00:40:01,510 --> 00:40:08,020
page response time implement the speedy

00:40:04,900 --> 00:40:13,630
sandwich and it's much much more

00:40:08,020 --> 00:40:16,030
consistent and the average page response

00:40:13,630 --> 00:40:17,710
time is less than a third of a second

00:40:16,030 --> 00:40:20,980
the fact is only just more than a

00:40:17,710 --> 00:40:24,310
quarter of a second there on that ramp

00:40:20,980 --> 00:40:27,220
test to show this in distributions here

00:40:24,310 --> 00:40:31,300
with without speedy ninety-five percent

00:40:27,220 --> 00:40:34,480
of requests are taking just over half a

00:40:31,300 --> 00:40:36,250
second we implement the speedy sandwich

00:40:34,480 --> 00:40:39,160
ninety-five percent of requests there

00:40:36,250 --> 00:40:41,710
are taking what's that's that's point

00:40:39,160 --> 00:40:44,400
for of a second so you know we're

00:40:41,710 --> 00:40:46,770
shaving off fifteen twenty percent

00:40:44,400 --> 00:40:51,680
which is astounding considering we're

00:40:46,770 --> 00:40:54,960
doing things on SSL so just to summarize

00:40:51,680 --> 00:40:57,090
we talked about how we think using yes

00:40:54,960 --> 00:40:59,880
the speedy sandwich can make things make

00:40:57,090 --> 00:41:01,770
your site's superfly we talked about why

00:40:59,880 --> 00:41:04,920
we think engine axis is such a great

00:41:01,770 --> 00:41:08,310
tool our group our go-to tool for very

00:41:04,920 --> 00:41:10,140
very fast web sites why varnishes should

00:41:08,310 --> 00:41:13,680
be implemented because it's a stupidly

00:41:10,140 --> 00:41:16,170
fast reverse proxy cache why everything

00:41:13,680 --> 00:41:17,580
should be in SSL and TLS these days it's

00:41:16,170 --> 00:41:22,440
vitally important it's installed by

00:41:17,580 --> 00:41:26,480
default everywhere why speedy is the

00:41:22,440 --> 00:41:29,220
verge of the next generation of HTTP

00:41:26,480 --> 00:41:32,400
what Google are doing and how it's been

00:41:29,220 --> 00:41:35,100
taken on by the HTTP working group and

00:41:32,400 --> 00:41:37,980
then finally a proposition of putting it

00:41:35,100 --> 00:41:40,910
together in a speedy sandwich so there

00:41:37,980 --> 00:41:40,910
we go we thank you

00:41:46,260 --> 00:41:54,069
questions yeah there's a microphone

00:41:52,900 --> 00:41:56,770
there's some of mine passing that

00:41:54,069 --> 00:41:59,829
microphone across maybe not understand

00:41:56,770 --> 00:42:01,900
oh sorry I didn't I didn't realize it

00:41:59,829 --> 00:42:04,950
was why I didn't sorry you just talk

00:42:01,900 --> 00:42:04,950
really loudly so everyone can hear

00:42:30,940 --> 00:42:39,940
okay I'm I haven't actually looked that

00:42:34,329 --> 00:42:45,579
much into micro caching the first thing

00:42:39,940 --> 00:42:48,520
is the first question was why not why

00:42:45,579 --> 00:42:51,970
not use micro caching instead of varnish

00:42:48,520 --> 00:42:53,829
and do we understand I'm actually I

00:42:51,970 --> 00:42:58,660
haven't tested micro caching enough to

00:42:53,829 --> 00:43:05,380
know to give any meaningful answer to

00:42:58,660 --> 00:43:13,240
that and yeah so I don't know it might

00:43:05,380 --> 00:43:16,710
be better ask for the ssl keys can you

00:43:13,240 --> 00:43:16,710
actually repeat the question

00:43:24,360 --> 00:43:39,440
so they can send a candidate them so if

00:43:35,830 --> 00:43:42,190
you want to protect yourself from the

00:43:39,440 --> 00:43:42,190
Anastasia

00:43:43,210 --> 00:43:46,260
that's a big problem

00:43:46,289 --> 00:43:52,319
true that is a big problem but I don't

00:43:50,279 --> 00:43:54,979
actually see that that be getting fixed

00:43:52,319 --> 00:43:54,979
anytime soon

00:44:02,360 --> 00:44:12,000
termination are there any suggestions

00:44:07,100 --> 00:44:16,100
issues an i as an i7 aerial

00:44:12,000 --> 00:44:16,100
communications of doing multiple main

00:44:17,610 --> 00:44:28,260
no actually you can use a wild

00:44:23,760 --> 00:44:28,260
terminator and just everything

00:44:45,100 --> 00:44:52,210
not I'm where I want to talk about it

00:44:48,300 --> 00:44:55,290
send after research in general I'm

00:44:52,210 --> 00:45:00,190
wondering why would you make anjanette

00:44:55,290 --> 00:45:02,640
do Jesus whereas if you did it with

00:45:00,190 --> 00:45:02,640
polish

00:45:09,210 --> 00:45:16,960
that's a good suggestion that's a good

00:45:11,319 --> 00:45:20,589
suggestion yeah actually I think in our

00:45:16,960 --> 00:45:24,160
latest test box where we were actually

00:45:20,589 --> 00:45:27,819
doing the GG tipping in engine X before

00:45:24,160 --> 00:45:35,410
varnish so varnish would get the digit

00:45:27,819 --> 00:45:38,319
stuff to serve out oh yeah yeah that was

00:45:35,410 --> 00:45:45,880
yeah there's you think that was the

00:45:38,319 --> 00:45:48,120
latest version of our test any other

00:45:45,880 --> 00:45:51,380
questions

00:45:48,120 --> 00:45:51,380
another back yes

00:46:01,090 --> 00:46:10,390
okay I'm how do we detect if a browser

00:46:04,930 --> 00:46:13,630
supports spdy with again of course um

00:46:10,390 --> 00:46:19,170
that's because the initial handshake has

00:46:13,630 --> 00:46:22,960
the NPN alternative protocols in it so

00:46:19,170 --> 00:46:26,320
we're just saying that we're supporting

00:46:22,960 --> 00:46:29,770
speedy and we prefer your you speedy but

00:46:26,320 --> 00:46:31,810
then if the browser doesn't understand

00:46:29,770 --> 00:46:47,700
speedy then it'll just fall back and use

00:46:31,810 --> 00:46:47,700
regular regular SSL yeah yeah

00:46:51,029 --> 00:47:01,509
so basically with the set up anyone who

00:46:53,470 --> 00:47:04,200
can use speedy will you speedy so sign

00:47:01,509 --> 00:47:04,200
up shout

00:47:11,660 --> 00:47:15,349
no if you want to do anything like this

00:47:13,309 --> 00:47:17,450
on the mainstream you speedy for now

00:47:15,349 --> 00:47:20,980
it's HTTP to isn't isn't far enough

00:47:17,450 --> 00:47:20,980
develops but it's going forward

00:47:28,390 --> 00:47:31,230
anyone else

00:47:34,260 --> 00:47:38,150
well in that case thank you very much

00:47:35,880 --> 00:47:38,150
for coming

00:48:05,430 --> 00:48:15,420
would you be separating out the entrance

00:48:08,050 --> 00:48:15,420
of volunteer I would actually

00:48:17,910 --> 00:48:28,289
and varnish yep ending on slow down and

00:48:21,750 --> 00:48:30,059
then have to connect seduce young Brogan

00:48:28,289 --> 00:48:33,440
together xsplit to all the other back

00:48:30,059 --> 00:48:36,270
end and if youÃ­ve doing single

00:48:33,440 --> 00:48:39,359
configurational reading words we use the

00:48:36,270 --> 00:48:41,280
second iteration of saying those are the

00:48:39,359 --> 00:48:42,750
engine exes it just seems a bit

00:48:41,280 --> 00:48:44,700
understand why you're doing this is a

00:48:42,750 --> 00:48:47,099
much acceleration of operations and you

00:48:44,700 --> 00:48:49,200
can pick a change in X today that's joke

00:48:47,099 --> 00:48:52,230
well but if you're running south and

00:48:49,200 --> 00:48:55,380
then set installation is there any way

00:48:52,230 --> 00:48:58,470
to reuse the same engine X instance to

00:48:55,380 --> 00:49:00,750
do both the front and catching bass

00:48:58,470 --> 00:49:03,210
acceptable of the sort of front enemies

00:49:00,750 --> 00:49:05,640
internet operations as well as the back

00:49:03,210 --> 00:49:06,990
ends pitch count again on a single

00:49:05,640 --> 00:49:13,430
server essentially it is the same

00:49:06,990 --> 00:49:13,430

YouTube URL: https://www.youtube.com/watch?v=CoI6yS20IY8


