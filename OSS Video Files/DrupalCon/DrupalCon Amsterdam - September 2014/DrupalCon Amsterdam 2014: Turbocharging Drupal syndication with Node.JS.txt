Title: DrupalCon Amsterdam 2014: Turbocharging Drupal syndication with Node.JS
Publication date: 2014-09-30
Playlist: DrupalCon Amsterdam - September 2014
Description: 
	Speakers: kvirta
You can get far by caching Drupal's content feeds. There are a lot of caching layers available. But when you need a bit of intelligence to your caching layer, drowning deep into the world of Varnish VCL configurations isn't the only option.

We went from trying to optimize Drupal's ability to deliver JSON-feeds out with MongoDB field storage and SOLR backed Views with a Varnish caching layer to a performance-optimized standalone Node.JS/MongoDB stack.

In this presentation we'll show a real-world case, where Drupal's content is optimized and indexed to MongoDB and then delivered out in JSON with astonishing speeds with a very simple Node.JS layer.

The setup serves most of the video content to Finland's biggest media corporation, Sanoma. It's the sole source of video content to their online TV service, Ruutu.fi.

The same setup could be used for serving as a backend for high-volume Javascript applications, replicating a lot of content around the world or optimizing the UX of a Drupal site by adding super-fast asynchronous APIs.

In the presentation we'll look at the architecture, the development phases, performance optimizations and lessons learnt in storing complicated data structures to Drupal and MongoDB. We'll also look at the current development efforts in getting the system in shape for Drupal 8 upgrade in the near future.
Captions: 
	00:00:00,000 --> 00:00:15,660
we could be starting it's one o'clock

00:00:08,160 --> 00:00:18,480
now so let's go so I'm here to talk

00:00:15,660 --> 00:00:21,480
about turbocharging your Drupal

00:00:18,480 --> 00:00:25,710
syndication with node.js that's going to

00:00:21,480 --> 00:00:27,720
be a bit of a story from Bob but were

00:00:25,710 --> 00:00:31,199
what our requirements and what we went

00:00:27,720 --> 00:00:35,340
with them and where we're aiming next so

00:00:31,199 --> 00:00:39,420
it's a bit of a case study more but

00:00:35,340 --> 00:00:46,260
we'll go into somewhat into details as

00:00:39,420 --> 00:00:49,950
well so what I expect you to already

00:00:46,260 --> 00:00:52,579
know or but I won't it be explaining is

00:00:49,950 --> 00:00:56,219
that you should be understanding

00:00:52,579 --> 00:00:59,879
something from of PHP and JavaScript as

00:00:56,219 --> 00:01:04,229
well some understanding of triples

00:00:59,879 --> 00:01:08,299
internals and some modules will talk

00:01:04,229 --> 00:01:15,450
about them a bit and some idea on how

00:01:08,299 --> 00:01:17,460
especially no SQL solar work I don't

00:01:15,450 --> 00:01:19,320
know if I'm gonna even mention one if I

00:01:17,460 --> 00:01:22,080
don't know why i say that in the slide

00:01:19,320 --> 00:01:26,430
anyway good to know one it works anyway

00:01:22,080 --> 00:01:32,070
you might need it some other thing what

00:01:26,430 --> 00:01:35,490
I try to help you learn is a how can you

00:01:32,070 --> 00:01:38,250
use node.js in real life to accelerate

00:01:35,490 --> 00:01:41,939
your content delivery now I've seen some

00:01:38,250 --> 00:01:46,560
node.js presentations before i think i

00:01:41,939 --> 00:01:48,600
was in one in drupalcon munich it was

00:01:46,560 --> 00:01:51,110
kind of a side track from delivering

00:01:48,600 --> 00:01:54,990
content from Drupal so it kind of didn't

00:01:51,110 --> 00:01:57,329
explain anything about delivering

00:01:54,990 --> 00:02:01,460
content of trouble with no chase so

00:01:57,329 --> 00:02:04,890
we're going to talk about just that and

00:02:01,460 --> 00:02:07,320
then we're going to talk about why why

00:02:04,890 --> 00:02:10,470
do you need to accelerate your content

00:02:07,320 --> 00:02:13,520
delivery we have some specific needs and

00:02:10,470 --> 00:02:15,920
I think they should be

00:02:13,520 --> 00:02:19,970
common especially in these kind of

00:02:15,920 --> 00:02:22,540
situations and then we're going to

00:02:19,970 --> 00:02:28,460
briefly touch on how no.js scales

00:02:22,540 --> 00:02:30,410
compared to drupal it's comparing apples

00:02:28,460 --> 00:02:36,680
to oranges but still you'll get the idea

00:02:30,410 --> 00:02:39,080
on what it's all about my name is Carla

00:02:36,680 --> 00:02:45,200
widest width I work for XO which is

00:02:39,080 --> 00:02:48,770
right there on top and about the

00:02:45,200 --> 00:02:52,330
accelerated on the slide we're about 70

00:02:48,770 --> 00:02:54,590
people based mostly in Finland currently

00:02:52,330 --> 00:02:59,440
I've been working with Drupal since

00:02:54,590 --> 00:03:03,380
professionally since 2007 and I remember

00:02:59,440 --> 00:03:06,320
evaluating triple three back in the day

00:03:03,380 --> 00:03:08,030
before we decided to build our own CMS

00:03:06,320 --> 00:03:10,280
which is always a bad decision don't do

00:03:08,030 --> 00:03:20,170
that especially these days you shouldn't

00:03:10,280 --> 00:03:20,170
ever build your own CMS arm the project

00:03:21,520 --> 00:03:29,870
but we will end ended up with all this

00:03:26,650 --> 00:03:34,790
information I'm trying to deliver to you

00:03:29,870 --> 00:03:38,690
is a is a service built for neelanand

00:03:34,790 --> 00:03:42,230
which is a finished TV broadcaster it's

00:03:38,690 --> 00:03:44,030
owned by sonoma son of my owns a bunch

00:03:42,230 --> 00:03:46,820
of TV channels in Finland but they also

00:03:44,030 --> 00:03:50,270
on our they also operate here in

00:03:46,820 --> 00:03:52,760
Netherlands they own SBS I don't know

00:03:50,270 --> 00:03:55,820
how big or small it is here but it's

00:03:52,760 --> 00:03:58,850
apparently being being a not not that

00:03:55,820 --> 00:04:01,310
good of an investment so far but anyway

00:03:58,850 --> 00:04:03,320
our system is used only in the finished

00:04:01,310 --> 00:04:09,670
operations we have some talks about

00:04:03,320 --> 00:04:09,670
whether it could work in in SBS as well

00:04:10,630 --> 00:04:19,459
the platform is used to run their video

00:04:16,100 --> 00:04:21,710
service online basically that's that's a

00:04:19,459 --> 00:04:26,210
catch up it was originally a catch-up

00:04:21,710 --> 00:04:27,320
service so they present you at basically

00:04:26,210 --> 00:04:29,990
sell and use

00:04:27,320 --> 00:04:32,570
of ads and show it show that their TV

00:04:29,990 --> 00:04:36,260
content for seven or 14 days catch up on

00:04:32,570 --> 00:04:39,490
online on like video on demand and now

00:04:36,260 --> 00:04:42,080
later on they are at their subscription

00:04:39,490 --> 00:04:45,170
optical svod which is subscription

00:04:42,080 --> 00:04:47,000
video-on-demand that means that you pay

00:04:45,170 --> 00:04:49,930
to get a subscription and then you can

00:04:47,000 --> 00:04:52,550
usually for a way longer period the

00:04:49,930 --> 00:04:55,700
contracts are usually two or three years

00:04:52,550 --> 00:05:03,020
so you can look at the content whenever

00:04:55,700 --> 00:05:08,900
it's more like Netflix in that way they

00:05:03,020 --> 00:05:10,880
also stream live sports and essentially

00:05:08,900 --> 00:05:13,390
what this dream is the Finnish Finnish

00:05:10,880 --> 00:05:17,740
ice hockey league which in Finland is

00:05:13,390 --> 00:05:23,110
probably able to soccer here in the

00:05:17,740 --> 00:05:26,120
Netherlands fins really like their spots

00:05:23,110 --> 00:05:28,940
that it's it's been watched quite a lot

00:05:26,120 --> 00:05:31,010
and it's quite expensive i would say i'm

00:05:28,940 --> 00:05:33,290
not a fan of ice hockey for some reason

00:05:31,010 --> 00:05:37,010
i guess I'm kind of a bad thing in that

00:05:33,290 --> 00:05:39,020
way but i wouldn't pay what what people

00:05:37,010 --> 00:05:40,400
have to pay to watch it but well I

00:05:39,020 --> 00:05:46,450
didn't then again I don't have to pay

00:05:40,400 --> 00:05:50,420
for watching all right the architecture

00:05:46,450 --> 00:05:55,640
arm all right we have a video content

00:05:50,420 --> 00:05:59,450
management system that Drupal 7 there's

00:05:55,640 --> 00:06:01,430
a linear TV programming which is they

00:05:59,450 --> 00:06:03,350
call it linear TV that's that's the TV

00:06:01,430 --> 00:06:06,350
you have home that you can you know turn

00:06:03,350 --> 00:06:11,060
the channel on a linear TV programming

00:06:06,350 --> 00:06:13,340
as well as uploaded content come that

00:06:11,060 --> 00:06:15,980
are fed to the system so basically

00:06:13,340 --> 00:06:19,850
linear TV works in a way this coming

00:06:15,980 --> 00:06:23,440
from a from their ERP system to the to

00:06:19,850 --> 00:06:26,180
the content management and what it does

00:06:23,440 --> 00:06:28,700
for that content is it delivers it

00:06:26,180 --> 00:06:33,100
downstream where there's multiple

00:06:28,700 --> 00:06:35,720
clients their websites they're basically

00:06:33,100 --> 00:06:37,220
affiliate sites and and all that son of

00:06:35,720 --> 00:06:40,880
mais a big corporation so they have a

00:06:37,220 --> 00:06:41,210
lot of newspapers and magazines and

00:06:40,880 --> 00:06:43,610
stuff

00:06:41,210 --> 00:06:47,030
they all want to use videos so they use

00:06:43,610 --> 00:06:50,449
this platform mostly for that there are

00:06:47,030 --> 00:06:55,660
iOS clients there's small TV apps and

00:06:50,449 --> 00:06:58,759
stuff like that on the downstream of

00:06:55,660 --> 00:07:01,460
videos the system only handles metadata

00:06:58,759 --> 00:07:03,650
so when we get an uploaded video we you

00:07:01,460 --> 00:07:05,090
can upload videos there most of the

00:07:03,650 --> 00:07:07,069
videos don't come uploaded they come

00:07:05,090 --> 00:07:09,229
from an automatic system which is their

00:07:07,069 --> 00:07:11,569
production video production system we

00:07:09,229 --> 00:07:14,060
handle the metadata obviously so we

00:07:11,569 --> 00:07:16,099
don't we don't handle video files into

00:07:14,060 --> 00:07:17,930
Apple we just you know you upload it and

00:07:16,099 --> 00:07:20,690
then we pass it on we don't touch it

00:07:17,930 --> 00:07:22,849
anymore it's it's going to be no video

00:07:20,690 --> 00:07:24,229
binary handling system from there which

00:07:22,849 --> 00:07:28,849
is also build players but it's not

00:07:24,229 --> 00:07:31,220
deauville the CMS handles all the

00:07:28,849 --> 00:07:34,060
metadata which is where it's where it

00:07:31,220 --> 00:07:37,159
shows whether it's within a product

00:07:34,060 --> 00:07:40,030
connected to a product who owns the

00:07:37,159 --> 00:07:43,849
video what's the description was the

00:07:40,030 --> 00:07:46,009
images that it has to stop image that

00:07:43,849 --> 00:07:50,210
kind of stuff and the rights the rights

00:07:46,009 --> 00:07:52,159
are obviously very important so that the

00:07:50,210 --> 00:07:55,159
privilege is that how long you can watch

00:07:52,159 --> 00:07:57,680
it and where and stuff like that it also

00:07:55,159 --> 00:08:01,940
handles resolutions and bit rates and

00:07:57,680 --> 00:08:05,270
stuff like that videos are streamed from

00:08:01,940 --> 00:08:10,219
from multiple streaming locations as

00:08:05,270 --> 00:08:13,580
directed by by the CMS they currently

00:08:10,219 --> 00:08:16,550
stream from ellen has own videos

00:08:13,580 --> 00:08:19,639
trimmings streamer basically they have

00:08:16,550 --> 00:08:22,940
really well they have couple of servers

00:08:19,639 --> 00:08:25,849
that can stream content not that good

00:08:22,940 --> 00:08:28,729
these days i think and and then all the

00:08:25,849 --> 00:08:31,610
live content and the high really popular

00:08:28,729 --> 00:08:33,770
content are coming from Akamai biggest

00:08:31,610 --> 00:08:37,039
they only can stream i think twenty

00:08:33,770 --> 00:08:39,890
gigabits per second and last Friday they

00:08:37,039 --> 00:08:42,289
were running at 32 so you can't do that

00:08:39,890 --> 00:08:46,000
with you know twenty as a limit so you

00:08:42,289 --> 00:08:46,000
have to stream it from Akamai

00:08:48,070 --> 00:08:56,589
especially the live ice hockey the

00:08:51,699 --> 00:08:56,589
finals for instance are hugely popular

00:08:57,430 --> 00:09:04,490
so this is how it originally kind of

00:09:01,250 --> 00:09:05,750
looked is what we were thinking that

00:09:04,490 --> 00:09:06,980
there's a video content management

00:09:05,750 --> 00:09:09,320
system here and then we just you know

00:09:06,980 --> 00:09:14,480
stream content to the two sides that

00:09:09,320 --> 00:09:18,139
we're there at that point the Drupal in

00:09:14,480 --> 00:09:19,550
the middle is focusing solely on content

00:09:18,139 --> 00:09:23,420
management so it's not delivering any

00:09:19,550 --> 00:09:31,579
HTML it's only it's delivering JSON

00:09:23,420 --> 00:09:34,550
feeds out to the downstream and and it's

00:09:31,579 --> 00:09:36,860
a it's well headless triple if you if

00:09:34,550 --> 00:09:39,980
you want that's that's been a boss word

00:09:36,860 --> 00:09:42,790
lately I think it well you only you only

00:09:39,980 --> 00:09:46,790
use the admin side that's that's okay

00:09:42,790 --> 00:09:50,690
there are custom modules for integrating

00:09:46,790 --> 00:09:54,649
to the TV ERP system which is a I think

00:09:50,690 --> 00:09:56,149
built in 1997 so I'm just not going to

00:09:54,649 --> 00:10:02,889
comment anything on the system but we

00:09:56,149 --> 00:10:07,089
get xml from that system and it gives us

00:10:02,889 --> 00:10:10,339
dinner TV programming like 3-4 months

00:10:07,089 --> 00:10:14,750
Ford so we might get quite a lot of

00:10:10,339 --> 00:10:17,209
broadcasts and TV dates and stuff then

00:10:14,750 --> 00:10:18,889
the Drupal also uses a custom module for

00:10:17,209 --> 00:10:20,630
controlling the binary video binary

00:10:18,889 --> 00:10:22,550
management system which is which

00:10:20,630 --> 00:10:24,649
controls the actual video files so

00:10:22,550 --> 00:10:26,680
triple tells them on which name on which

00:10:24,649 --> 00:10:29,000
streamer and why and blah blah blah and

00:10:26,680 --> 00:10:33,019
I'm the binary management system does

00:10:29,000 --> 00:10:35,000
what it's told and then what Drupal does

00:10:33,019 --> 00:10:39,560
is it needs to be it makes the videos

00:10:35,000 --> 00:10:41,269
ready it checks that they actually are

00:10:39,560 --> 00:10:44,810
on the streamer and then creates an ode

00:10:41,269 --> 00:10:47,630
to mark the video to be able to be

00:10:44,810 --> 00:10:51,050
played so it's kind of a ready media

00:10:47,630 --> 00:10:52,490
node so that's that's the signal that

00:10:51,050 --> 00:10:54,459
you can play the video it's on the

00:10:52,490 --> 00:10:57,019
streamer

00:10:54,459 --> 00:10:59,239
especially for news clips and stuff

00:10:57,019 --> 00:11:01,189
going to that's essential so that when

00:10:59,239 --> 00:11:03,019
when it's finally went through

00:11:01,189 --> 00:11:08,209
conversion and went to the streamer then

00:11:03,019 --> 00:11:11,329
we know that you can make a play and so

00:11:08,209 --> 00:11:16,399
yeah we had this and everything went

00:11:11,329 --> 00:11:19,100
great and then we got some more down

00:11:16,399 --> 00:11:22,729
stream clients and then some more and

00:11:19,100 --> 00:11:25,759
then couple more and when we realized

00:11:22,729 --> 00:11:34,459
that no we really can't serve this all

00:11:25,759 --> 00:11:37,160
with a whip with Drupal so it's not like

00:11:34,459 --> 00:11:41,720
we didn't think of this at all when we

00:11:37,160 --> 00:11:46,279
started we built the Drupal 7 on MongoDB

00:11:41,720 --> 00:11:48,129
field storage and it was standing on on

00:11:46,279 --> 00:11:50,689
a fast database in a sense because

00:11:48,129 --> 00:11:53,209
MongoDB field storage stores that field

00:11:50,689 --> 00:11:56,449
information into MongoDB as you know and

00:11:53,209 --> 00:11:58,399
it only be because of its nature can can

00:11:56,449 --> 00:12:02,480
store them in a kind of a more sensible

00:11:58,399 --> 00:12:06,949
way than Maya skill so it's faster with

00:12:02,480 --> 00:12:08,539
that and also the use the fees that we

00:12:06,949 --> 00:12:13,639
were running they were done with views

00:12:08,539 --> 00:12:15,199
and an adjacent output module and they

00:12:13,639 --> 00:12:25,910
were coming from a solar back end so

00:12:15,199 --> 00:12:27,709
that it won't burn in the database about

00:12:25,910 --> 00:12:32,959
the field storage though I have to say

00:12:27,709 --> 00:12:35,269
that it it's faster and it's not really

00:12:32,959 --> 00:12:37,819
combat compatible with views unless you

00:12:35,269 --> 00:12:39,679
use it with ef queues and if use

00:12:37,819 --> 00:12:41,359
although they work well with my skill

00:12:39,679 --> 00:12:45,169
they don't work that well with MongoDB

00:12:41,359 --> 00:12:47,359
I'd say that it's we moved away from

00:12:45,169 --> 00:12:50,509
from one way to be filled stories at

00:12:47,359 --> 00:12:53,149
some point i would say that unless you

00:12:50,509 --> 00:12:57,139
really know what you need to do with

00:12:53,149 --> 00:12:59,179
views there's no kind of sudden urge of

00:12:57,139 --> 00:13:01,339
creating new views then you might be

00:12:59,179 --> 00:13:04,039
able to pull it off with normally be

00:13:01,339 --> 00:13:06,050
real stories but we didn't so i can

00:13:04,039 --> 00:13:08,839
recommend it

00:13:06,050 --> 00:13:10,850
and then there were lots like some

00:13:08,839 --> 00:13:13,399
serious box in this is a boo-boo Leon's

00:13:10,850 --> 00:13:16,519
didn't work at all and and then there

00:13:13,399 --> 00:13:18,970
were there were all sorts of different

00:13:16,519 --> 00:13:22,850
trouble between the modules that go to

00:13:18,970 --> 00:13:26,029
mongodb from EF qu z fq small arabian

00:13:22,850 --> 00:13:28,149
field storage and so on there is a chain

00:13:26,029 --> 00:13:31,040
of modules and then you have to be

00:13:28,149 --> 00:13:36,200
jumping between issue cues in Drupal too

00:13:31,040 --> 00:13:38,060
dark and when we move it the database

00:13:36,200 --> 00:13:40,040
back to my MySQL the Moscow almost

00:13:38,060 --> 00:13:42,709
crashed immediately we had to we had to

00:13:40,040 --> 00:13:45,850
move it on SSD disk so it's actually it

00:13:42,709 --> 00:13:50,839
did help quite a lot on the performance

00:13:45,850 --> 00:13:53,329
but even though it did help big feeds

00:13:50,839 --> 00:13:56,209
coming from Drupal always it's always

00:13:53,329 --> 00:13:59,360
kind of a problem the storage doesn't

00:13:56,209 --> 00:14:01,220
make a difference at some point it's not

00:13:59,360 --> 00:14:04,100
about the stories the storage isn't that

00:14:01,220 --> 00:14:07,459
the problem so you get to the point

00:14:04,100 --> 00:14:11,000
where the the field API is just too

00:14:07,459 --> 00:14:13,160
extensible to be fast because you'd have

00:14:11,000 --> 00:14:16,040
to you'd have to cash it we'll talk

00:14:13,160 --> 00:14:21,260
about that a bit later but if you run

00:14:16,040 --> 00:14:23,420
the field API it's going to run it's

00:14:21,260 --> 00:14:27,079
going to run all the cooks so it has

00:14:23,420 --> 00:14:30,740
fetched hooks it has lured hooks it had

00:14:27,079 --> 00:14:32,870
it has you know you hooks and stuff it's

00:14:30,740 --> 00:14:35,329
going to run all the hooks for all the

00:14:32,870 --> 00:14:39,140
fields that you load and when you have

00:14:35,329 --> 00:14:43,430
40 fields per item and 1,000 items per

00:14:39,140 --> 00:14:48,500
list you're going to be calling it quite

00:14:43,430 --> 00:14:50,360
a lot all the hooks and when you get to

00:14:48,500 --> 00:14:57,649
that point it's going to get really slow

00:14:50,360 --> 00:14:59,180
you just can't get around it and at this

00:14:57,649 --> 00:15:06,290
point i think i know what you're

00:14:59,180 --> 00:15:08,149
thinking hey you know just we all have

00:15:06,290 --> 00:15:10,970
heard of this let's just put one each on

00:15:08,149 --> 00:15:14,480
top of it get it over with we can just

00:15:10,970 --> 00:15:16,720
you know cash it well that's kind of

00:15:14,480 --> 00:15:20,510
hiding your problem there but even

00:15:16,720 --> 00:15:22,820
though you could do that the down stream

00:15:20,510 --> 00:15:25,610
clients they have specific needs for the

00:15:22,820 --> 00:15:30,920
integration feeds when you're

00:15:25,610 --> 00:15:32,870
downloading some content from somewhere

00:15:30,920 --> 00:15:34,339
you only want the content you need to

00:15:32,870 --> 00:15:35,899
import otherwise you have a lot of

00:15:34,339 --> 00:15:37,670
strapped condom they just need to go to

00:15:35,899 --> 00:15:39,110
that takes quite a lot of time

00:15:37,670 --> 00:15:42,620
especially when you have a Drupal

00:15:39,110 --> 00:15:45,020
downstream as well so you want to have

00:15:42,620 --> 00:15:52,790
only the things that have changed since

00:15:45,020 --> 00:15:55,430
your last fetch and basically what we

00:15:52,790 --> 00:15:59,899
needed to do is allow the down stream

00:15:55,430 --> 00:16:03,709
clients to get the feed by the lat the

00:15:59,899 --> 00:16:05,540
seconds of last last import so whatever

00:16:03,709 --> 00:16:08,630
seconds they gave we gave everything

00:16:05,540 --> 00:16:10,910
that's newer than that and then the

00:16:08,630 --> 00:16:13,579
downstream plants were happy now them

00:16:10,910 --> 00:16:15,620
using seconds in the URL and we changing

00:16:13,579 --> 00:16:17,930
the page based on those seconds makes it

00:16:15,620 --> 00:16:24,649
really hard to cash because it changes

00:16:17,930 --> 00:16:29,240
kind of like you know every second so we

00:16:24,649 --> 00:16:30,949
couldn't cash it well so we just we knew

00:16:29,240 --> 00:16:33,980
that we had to come up with some other

00:16:30,949 --> 00:16:36,350
idea of how can we serve the down stream

00:16:33,980 --> 00:16:38,390
clients well and still be able to cope

00:16:36,350 --> 00:16:43,610
with the with all the all the traffic

00:16:38,390 --> 00:16:46,839
coming in so we decided to index outside

00:16:43,610 --> 00:16:46,839
of triple

00:16:51,769 --> 00:16:58,050
first of all we did have a we did have

00:16:55,110 --> 00:17:03,629
some solar indication indexing already

00:16:58,050 --> 00:17:06,630
in place so we used solar 44 for the

00:17:03,629 --> 00:17:08,039
views back end by search api at that

00:17:06,630 --> 00:17:12,990
point they I think they were just

00:17:08,039 --> 00:17:16,650
combining their chimas but Apache Solr

00:17:12,990 --> 00:17:20,480
integration which enables us to index

00:17:16,650 --> 00:17:24,209
all content to an external so our server

00:17:20,480 --> 00:17:26,189
seemed to fit the bill well so we index

00:17:24,209 --> 00:17:30,320
this stuff to solar and then we decided

00:17:26,189 --> 00:17:38,760
please to put it out with the simple

00:17:30,320 --> 00:17:42,390
REST API but there was a certain small

00:17:38,760 --> 00:17:44,370
problem because for some reason and when

00:17:42,390 --> 00:17:47,250
you think about it it's it's kind of an

00:17:44,370 --> 00:17:49,740
obvious thing the customer wanted to

00:17:47,250 --> 00:17:58,940
list the video feeds or the list of

00:17:49,740 --> 00:18:04,350
videos especially to the clients live by

00:17:58,940 --> 00:18:06,539
popularity obviously so their videos the

00:18:04,350 --> 00:18:09,630
news videos went viral and they wanted

00:18:06,539 --> 00:18:12,929
us to make sure that we always show the

00:18:09,630 --> 00:18:15,630
most popular video first that means that

00:18:12,929 --> 00:18:20,490
we have to update so that we can order

00:18:15,630 --> 00:18:22,110
in solar we have to update the documents

00:18:20,490 --> 00:18:25,020
constantly now if you know anything

00:18:22,110 --> 00:18:27,960
about solar is that solar really doesn't

00:18:25,020 --> 00:18:30,779
index fast it doesn't do that that's not

00:18:27,960 --> 00:18:32,789
its thing it indexes slow and it

00:18:30,779 --> 00:18:35,100
searches fast that's that's how it has

00:18:32,789 --> 00:18:36,990
our dust things so when you get to the

00:18:35,100 --> 00:18:39,480
point when you have to add some feel

00:18:36,990 --> 00:18:42,179
their index so which we tried different

00:18:39,480 --> 00:18:46,020
approaches with we we're looking for

00:18:42,179 --> 00:18:49,169
solutions of two core like sorting by

00:18:46,020 --> 00:18:52,110
other core of and we would just index

00:18:49,169 --> 00:18:54,600
the other core of solar and stuff like

00:18:52,110 --> 00:18:57,720
that and and then adding without

00:18:54,600 --> 00:19:00,720
indexing a field that wouldn't make it

00:18:57,720 --> 00:19:06,850
index and everything else and

00:19:00,720 --> 00:19:08,560
well nothing worked so eventually we

00:19:06,850 --> 00:19:11,920
just decided that we're going to go with

00:19:08,560 --> 00:19:16,150
mongodb because it has a diff it has a

00:19:11,920 --> 00:19:19,420
similar document or even more flexible

00:19:16,150 --> 00:19:23,740
document storage mechanism because it's

00:19:19,420 --> 00:19:27,490
a noise skill server and you can index

00:19:23,740 --> 00:19:29,920
very fast well at least even if you have

00:19:27,490 --> 00:19:32,260
a lot of keys bong Revilla will index so

00:19:29,920 --> 00:19:36,460
that it's not a problem even though your

00:19:32,260 --> 00:19:37,900
index pretty much constantly now we get

00:19:36,460 --> 00:19:40,480
to the point where i'm going to say that

00:19:37,900 --> 00:19:42,340
2.6 has a problem because it lock it

00:19:40,480 --> 00:19:45,460
locks the whole collection and not just

00:19:42,340 --> 00:19:47,740
a single document and that's due to the

00:19:45,460 --> 00:19:49,710
whole updating constantly thing but

00:19:47,740 --> 00:19:53,500
that's going to go away in 2.8 i hope

00:19:49,710 --> 00:19:56,190
but it still was way better than solar

00:19:53,500 --> 00:19:56,190
in that so

00:20:00,450 --> 00:20:09,780
so then we were here we had this you

00:20:05,370 --> 00:20:18,030
know one would he be there's our REST

00:20:09,780 --> 00:20:25,260
API delivering content outside this part

00:20:18,030 --> 00:20:27,690
here is done by a drupal module we use

00:20:25,260 --> 00:20:31,050
to index content straight to the market

00:20:27,690 --> 00:20:32,010
MongoDB now it uses a straight

00:20:31,050 --> 00:20:34,260
connection to the monday before

00:20:32,010 --> 00:20:36,750
performance reasons we don't use an API

00:20:34,260 --> 00:20:38,370
to do that even though we have been

00:20:36,750 --> 00:20:42,150
pondering on that and it kind of would

00:20:38,370 --> 00:20:43,980
make sense in architectural sense it

00:20:42,150 --> 00:20:45,930
would look quite a bit better if it

00:20:43,980 --> 00:20:50,090
would use an API but currently it

00:20:45,930 --> 00:20:52,740
connects straight to the manga DB and

00:20:50,090 --> 00:20:57,540
index is all Drupal content it works

00:20:52,740 --> 00:21:01,770
similarly as us this Apache Solr search

00:20:57,540 --> 00:21:03,750
integration but it has it's slightly a

00:21:01,770 --> 00:21:07,380
bit well it's a bit different obviously

00:21:03,750 --> 00:21:10,710
indexes into MongoDB n and it tries to

00:21:07,380 --> 00:21:13,020
do it fast and without errors we've had

00:21:10,710 --> 00:21:18,860
our share of problems with that indexing

00:21:13,020 --> 00:21:22,680
as well it also d normalizes the data

00:21:18,860 --> 00:21:27,570
for for you know optimized distribution

00:21:22,680 --> 00:21:30,930
so when we have a layer of different

00:21:27,570 --> 00:21:33,420
content types that all contribute to the

00:21:30,930 --> 00:21:34,980
video which is the end user sees just a

00:21:33,420 --> 00:21:36,600
single video they don't dare not they

00:21:34,980 --> 00:21:38,190
don't care about episode and the

00:21:36,600 --> 00:21:40,230
connection to the season and stuff they

00:21:38,190 --> 00:21:42,930
just want to see which sees in which the

00:21:40,230 --> 00:21:46,290
episode and then the video so we deem d

00:21:42,930 --> 00:21:50,670
normalize the data so that it's optimal

00:21:46,290 --> 00:21:52,620
to deliver from the MongoDB out and this

00:21:50,670 --> 00:21:55,970
is a content module but it's currently

00:21:52,620 --> 00:21:58,920
in a sandbox it's waiting approval

00:21:55,970 --> 00:22:01,710
because the guys decided that it's a

00:21:58,920 --> 00:22:04,440
good idea for the father for the guy who

00:22:01,710 --> 00:22:07,560
doesn't have create project rights and

00:22:04,440 --> 00:22:10,230
dribble the dog to do it but well it's

00:22:07,560 --> 00:22:13,040
their call I guess it's going to be in

00:22:10,230 --> 00:22:13,040
the queue for a while

00:22:13,110 --> 00:22:21,610
then we get to the delivery and

00:22:15,309 --> 00:22:25,809
distribution would you step beef here we

00:22:21,610 --> 00:22:28,240
have our data optimized for delivery in

00:22:25,809 --> 00:22:30,790
the DB and we want to deliver it

00:22:28,240 --> 00:22:33,580
out fast but we also want some kind of a

00:22:30,790 --> 00:22:35,559
handle to touch it while we deliver it

00:22:33,580 --> 00:22:37,510
all so that we can see we can handle the

00:22:35,559 --> 00:22:40,030
timestamps we can search we can use

00:22:37,510 --> 00:22:43,809
different sorting different content

00:22:40,030 --> 00:22:48,850
owners different hidden tax and stuff

00:22:43,809 --> 00:22:55,929
like that and here comes snow jas to the

00:22:48,850 --> 00:22:59,860
rescue nodejs and here's a kind of brief

00:22:55,929 --> 00:23:01,150
introduction to know Jess that's good

00:22:59,860 --> 00:23:05,620
JavaScript running on the servers

00:23:01,150 --> 00:23:09,309
there's nothing kind of more magic to it

00:23:05,620 --> 00:23:12,580
it's just JavaScript on the server it's

00:23:09,309 --> 00:23:19,210
it's run by prams javascript engine the

00:23:12,580 --> 00:23:21,190
v8 engine and it's a non-blocking

00:23:19,210 --> 00:23:24,549
event-based that's the javascript is and

00:23:21,190 --> 00:23:28,299
and when when you only use it correctly

00:23:24,549 --> 00:23:30,190
it's blazing fast and when I say blazing

00:23:28,299 --> 00:23:32,620
fast I just mean that it's about eight

00:23:30,190 --> 00:23:38,320
times as fast to run as PHP code on the

00:23:32,620 --> 00:23:41,830
server and that that helps to make that

00:23:38,320 --> 00:23:46,210
that and this non blocking thing so you

00:23:41,830 --> 00:23:48,850
can do things in parallel it makes it

00:23:46,210 --> 00:23:50,620
really fast for certain things I'm not

00:23:48,850 --> 00:23:52,750
sure how good it is with really

00:23:50,620 --> 00:23:55,440
complicated things like running Drupal I

00:23:52,750 --> 00:23:59,980
think PHP is probably just fine for that

00:23:55,440 --> 00:24:04,510
but it makes quite a bit of a difference

00:23:59,980 --> 00:24:09,250
in performance and here i have this

00:24:04,510 --> 00:24:12,570
scientific calculations of the requests

00:24:09,250 --> 00:24:15,070
per second if you want to really know

00:24:12,570 --> 00:24:18,700
requests per second with drupal dropped

00:24:15,070 --> 00:24:22,350
under one at some point even though we

00:24:18,700 --> 00:24:25,660
had some proper hardware running it and

00:24:22,350 --> 00:24:28,780
with with the node.js back in request

00:24:25,660 --> 00:24:30,810
second run from 800 to three thousand

00:24:28,780 --> 00:24:35,710
requests per second that we can deliver

00:24:30,810 --> 00:24:37,600
but the offer we have and now if you

00:24:35,710 --> 00:24:39,730
want to get that that kind of numbers

00:24:37,600 --> 00:24:42,880
from Drupal you need to have quite a lot

00:24:39,730 --> 00:24:44,230
of servers or some caching which means

00:24:42,880 --> 00:24:45,910
that you're not delivering it from

00:24:44,230 --> 00:24:54,520
Drupal this is coming straight from

00:24:45,910 --> 00:24:57,070
node.js and the response times in well

00:24:54,520 --> 00:25:01,560
in Drupal they went over a minute at

00:24:57,070 --> 00:25:04,630
some point to get that list out and in

00:25:01,560 --> 00:25:08,970
the know Jace back end there from 80

00:25:04,630 --> 00:25:12,280
milliseconds to maybe 150 milliseconds

00:25:08,970 --> 00:25:14,400
something online so there's the

00:25:12,280 --> 00:25:14,400
difference

00:25:16,880 --> 00:25:22,470
and now when we're running no jazz we

00:25:20,160 --> 00:25:26,250
didn't use originally any node.js

00:25:22,470 --> 00:25:30,230
framework we started which is the really

00:25:26,250 --> 00:25:32,730
simple implementation I would say now

00:25:30,230 --> 00:25:35,700
now thinking about it i would say that

00:25:32,730 --> 00:25:42,660
we could have probably used a framework

00:25:35,700 --> 00:25:49,460
it wouldn't have hindered our speed or

00:25:42,660 --> 00:25:51,720
something like that that much and

00:25:49,460 --> 00:25:54,360
because currently mon woody be is the

00:25:51,720 --> 00:25:56,880
bottleneck so when we get to the limits

00:25:54,360 --> 00:25:59,280
of this that platforms performance it's

00:25:56,880 --> 00:26:01,260
it's not within the noche assets within

00:25:59,280 --> 00:26:05,940
the DB which can't handle that

00:26:01,260 --> 00:26:09,710
this curity numbers at some point also

00:26:05,940 --> 00:26:12,360
we don't use a fronting engine X

00:26:09,710 --> 00:26:18,230
requests are go they go straight from a

00:26:12,360 --> 00:26:21,860
from a from an f5 to the servers and

00:26:18,230 --> 00:26:24,450
they get served by noches itself

00:26:21,860 --> 00:26:27,150
listening to the port and it handles

00:26:24,450 --> 00:26:31,110
them by pros are signaling so it uses

00:26:27,150 --> 00:26:33,780
the soft programs which are separate so

00:26:31,110 --> 00:26:37,950
if we don't kill any other programs warm

00:26:33,780 --> 00:26:41,580
if we fail with something but it it

00:26:37,950 --> 00:26:43,590
could be I think again we probably at

00:26:41,580 --> 00:26:45,420
some point we're going to put engine X

00:26:43,590 --> 00:26:46,800
in front I'm not sure how much that's

00:26:45,420 --> 00:26:48,390
going to slow it down we were supposed

00:26:46,800 --> 00:26:53,190
to test it last week but didn't have

00:26:48,390 --> 00:26:56,550
time if you have any experiencing how

00:26:53,190 --> 00:26:57,870
much slower node.js is what engine X up

00:26:56,550 --> 00:27:00,890
front I've what would be really

00:26:57,870 --> 00:27:00,890
interested in hearing that

00:27:02,970 --> 00:27:09,750
and it's running on currently that the

00:27:06,990 --> 00:27:12,090
setup is running on three nodes they

00:27:09,750 --> 00:27:14,159
share a momentary replica set across

00:27:12,090 --> 00:27:19,289
those three notes and it's from the boy

00:27:14,159 --> 00:27:22,710
on f5 Lord pal answer that three nodes

00:27:19,289 --> 00:27:29,940
are all pretty sturdy day I think they

00:27:22,710 --> 00:27:33,690
have eight CPUs and 32 gigs of ram the

00:27:29,940 --> 00:27:37,500
code itself is it's very simple it's

00:27:33,690 --> 00:27:39,150
from very simple to pretty simple the

00:27:37,500 --> 00:27:44,549
different backends they're all separate

00:27:39,150 --> 00:27:46,919
services are set in n.o jet and they

00:27:44,549 --> 00:27:48,450
just mostly what they do is pass content

00:27:46,919 --> 00:27:50,640
dolls from the manga DB that's what we

00:27:48,450 --> 00:27:52,919
do we have we have the content optimized

00:27:50,640 --> 00:27:56,909
for delivery in the MongoDB so we just

00:27:52,919 --> 00:27:59,190
pass it out as fast as we can there are

00:27:56,909 --> 00:28:00,990
filters that we validate obviously so if

00:27:59,190 --> 00:28:04,770
you use some filters we validate them we

00:28:00,990 --> 00:28:09,630
also can do some other processing I'll

00:28:04,770 --> 00:28:12,900
mention that in oh yeah I think I don't

00:28:09,630 --> 00:28:19,620
have the slider for that so it does

00:28:12,900 --> 00:28:24,390
other stuff like it can validate

00:28:19,620 --> 00:28:26,640
security tokens and it it validates your

00:28:24,390 --> 00:28:29,429
session it validates your subscription

00:28:26,640 --> 00:28:31,320
and can deliver a security token for

00:28:29,429 --> 00:28:36,030
viewing protected streams like the ice

00:28:31,320 --> 00:28:38,309
hockey so that means that we can run on

00:28:36,030 --> 00:28:41,789
top of the node.js platform we can run

00:28:38,309 --> 00:28:44,070
iOS clients the samsung TV find android

00:28:41,789 --> 00:28:46,740
client as windows form clients without

00:28:44,070 --> 00:28:48,299
anything else there's no other back back

00:28:46,740 --> 00:28:50,190
end for them say they just list the

00:28:48,299 --> 00:28:53,370
videos from there and you can they can

00:28:50,190 --> 00:28:54,990
log into the know chase there's a

00:28:53,370 --> 00:28:56,850
there's a single sign on server behind

00:28:54,990 --> 00:28:59,010
it but but the noches can deliver their

00:28:56,850 --> 00:29:06,330
that credentials there and give you a

00:28:59,010 --> 00:29:07,559
session and it also stores the user

00:29:06,330 --> 00:29:11,940
rights and the product information

00:29:07,559 --> 00:29:13,799
locally so that the user the user

00:29:11,940 --> 00:29:15,690
subscription information is coming from

00:29:13,799 --> 00:29:16,380
the sales platform which is a different

00:29:15,690 --> 00:29:20,160
system also

00:29:16,380 --> 00:29:22,710
gather it's something horribly far away

00:29:20,160 --> 00:29:27,930
in horribly jealous I haven't seen it I

00:29:22,710 --> 00:29:29,760
don't want to touch it and then we

00:29:27,930 --> 00:29:31,980
deliver I think ice hockey live

00:29:29,760 --> 00:29:34,680
statistics for all the clients that

00:29:31,980 --> 00:29:36,720
currently viewing the stream you have

00:29:34,680 --> 00:29:39,990
the video there and you have them in the

00:29:36,720 --> 00:29:45,660
statistics under it will you deliver the

00:29:39,990 --> 00:29:47,850
statistics obviously and then we handle

00:29:45,660 --> 00:29:50,760
extensive logging for the whole platform

00:29:47,850 --> 00:29:52,950
which is basically that we have a single

00:29:50,760 --> 00:29:55,980
place where we log because the videos go

00:29:52,950 --> 00:29:58,800
through a number of systems before they

00:29:55,980 --> 00:30:00,570
arrive at their destination so when we

00:29:58,800 --> 00:30:03,240
want to log them all in one place so we

00:30:00,570 --> 00:30:05,520
can see from the video when you go to

00:30:03,240 --> 00:30:07,680
the Drupal and you can open the log the

00:30:05,520 --> 00:30:09,270
log comes from outside Drupal but you

00:30:07,680 --> 00:30:16,650
can see from the log where the video was

00:30:09,270 --> 00:30:21,090
in ways now currently the bottleneck is

00:30:16,650 --> 00:30:28,710
a small Arabia said so it's it's doing

00:30:21,090 --> 00:30:31,200
really well the node.js here when if we

00:30:28,710 --> 00:30:33,270
get the moma DB to be like super fast at

00:30:31,200 --> 00:30:34,890
some point we might hit the next limit

00:30:33,270 --> 00:30:38,210
that we might hit would be the TCP

00:30:34,890 --> 00:30:40,770
connections on Linux we actually

00:30:38,210 --> 00:30:43,170
optimize them quite a bit at some point

00:30:40,770 --> 00:30:44,970
because when you when you run when you

00:30:43,170 --> 00:30:46,590
try to deliver three and a half thousand

00:30:44,970 --> 00:30:48,960
requests per second or like three

00:30:46,590 --> 00:30:50,910
thousand requests per second you are

00:30:48,960 --> 00:30:52,710
bound to have quite a lot of TCP

00:30:50,910 --> 00:30:55,170
connections often at the same time so

00:30:52,710 --> 00:30:57,600
you have to optimize those socket

00:30:55,170 --> 00:31:02,990
numbers and stuff like that in linux

00:30:57,600 --> 00:31:02,990
linux won't by default server that many

00:31:04,460 --> 00:31:10,500
it's just a glimpse of the API

00:31:07,320 --> 00:31:13,590
documentation we have as you can see

00:31:10,500 --> 00:31:17,520
there are different filters and order by

00:31:13,590 --> 00:31:19,440
and you can limit the times and then

00:31:17,520 --> 00:31:23,670
there's some versions popularity from

00:31:19,440 --> 00:31:25,380
version 2 and stuff like that we're

00:31:23,670 --> 00:31:27,510
trying to serve the customers which are

00:31:25,380 --> 00:31:29,700
the users of the API as well as we can

00:31:27,510 --> 00:31:35,060
so that we try to keep the documentation

00:31:29,700 --> 00:31:39,170
of the data at all times for the notice

00:31:35,060 --> 00:31:42,870
we're using the cluster NPM mode module

00:31:39,170 --> 00:31:45,780
the the ones of you have used knowledge

00:31:42,870 --> 00:31:47,970
as you know that by default the main

00:31:45,780 --> 00:31:49,800
program will all only hang around in one

00:31:47,970 --> 00:31:51,960
core so if you have multiple coercing

00:31:49,800 --> 00:31:56,280
into cluster so if you can start it

00:31:51,960 --> 00:31:58,200
start wanting in every core and then we

00:31:56,280 --> 00:32:00,540
use forever to keep it running even

00:31:58,200 --> 00:32:03,420
though it might crash if it has some bad

00:32:00,540 --> 00:32:06,510
input from somewhere which is usually

00:32:03,420 --> 00:32:08,550
the sm-liiga that the ice hockey league

00:32:06,510 --> 00:32:12,360
statistics server that used to give

00:32:08,550 --> 00:32:13,860
really crappy XM else to it and if we

00:32:12,360 --> 00:32:19,260
weren't careful careful with them it

00:32:13,860 --> 00:32:23,550
might actually crash the back end but

00:32:19,260 --> 00:32:27,240
for the note for them for the generic

00:32:23,550 --> 00:32:31,950
node.js for PHP programmer it's quite a

00:32:27,240 --> 00:32:34,080
change I would say that it might look

00:32:31,950 --> 00:32:38,580
like well I've been doing JavaScript

00:32:34,080 --> 00:32:41,640
quite a long time so it's okay I can

00:32:38,580 --> 00:32:42,990
program JavaScript but it's not quite

00:32:41,640 --> 00:32:44,520
the same thing when you're doing it in

00:32:42,990 --> 00:32:48,210
the back end and you have to do quite a

00:32:44,520 --> 00:32:50,940
lot of things with it they're not there

00:32:48,210 --> 00:32:53,520
this just in front and it's mostly like

00:32:50,940 --> 00:32:56,460
events happening and you doing some dome

00:32:53,520 --> 00:32:58,590
alterations based on that or ajak singh

00:32:56,460 --> 00:33:00,930
something from the back end but in

00:32:58,590 --> 00:33:03,270
node.js you really have to do parallel

00:33:00,930 --> 00:33:05,490
programming so all the function calls

00:33:03,270 --> 00:33:08,880
all the all the calls from different

00:33:05,490 --> 00:33:11,130
systems they are running a synchronous

00:33:08,880 --> 00:33:13,550
incra nervously so you have to handle

00:33:11,130 --> 00:33:16,230
that somehow you have to understand that

00:33:13,550 --> 00:33:17,340
they return when they return and when

00:33:16,230 --> 00:33:19,200
they return you have to have

00:33:17,340 --> 00:33:21,840
delete whatever they returned at that

00:33:19,200 --> 00:33:23,280
point and you're not in that part of the

00:33:21,840 --> 00:33:26,880
code at that point you're already

00:33:23,280 --> 00:33:29,520
running something else so there are n

00:33:26,880 --> 00:33:33,330
p.m. model modules to help it like

00:33:29,520 --> 00:33:37,110
promises that's I think that makes quite

00:33:33,330 --> 00:33:39,450
clean to handle the synchronous function

00:33:37,110 --> 00:33:44,610
calls but other than that I would say

00:33:39,450 --> 00:33:47,700
that even though it might be a bit hard

00:33:44,610 --> 00:33:49,680
for a PHP programmer it's also pretty

00:33:47,700 --> 00:33:53,190
eye-opening on what you can actually do

00:33:49,680 --> 00:33:56,610
with programming languages especially

00:33:53,190 --> 00:34:01,350
like you know if you've been in in PHP

00:33:56,610 --> 00:34:04,590
for for a long time during the lifetime

00:34:01,350 --> 00:34:07,350
of the project which it's it's been live

00:34:04,590 --> 00:34:09,090
for like 18 months now we've been

00:34:07,350 --> 00:34:10,950
building it longer than that like two

00:34:09,090 --> 00:34:16,820
and a half years and the previous system

00:34:10,950 --> 00:34:19,440
as well before that both know Jess and

00:34:16,820 --> 00:34:21,840
mongodb they have evolved quite of it i

00:34:19,440 --> 00:34:27,000
would say that moon baby maybe even more

00:34:21,840 --> 00:34:28,680
than node.js MongoDB has added they have

00:34:27,000 --> 00:34:32,300
added quite a lot of new features that

00:34:28,680 --> 00:34:38,480
we all all all have liked quite a lot

00:34:32,300 --> 00:34:40,530
like connecting or using to array

00:34:38,480 --> 00:34:45,170
indexes at the same time for a curry

00:34:40,530 --> 00:34:48,120
which helps quite a lot if you have like

00:34:45,170 --> 00:34:51,390
you have to combine two tags and then

00:34:48,120 --> 00:34:54,170
search based on that and have an index

00:34:51,390 --> 00:34:59,130
because obviously want to have an index

00:34:54,170 --> 00:35:03,350
and as I mentioned earlier only be 2.6

00:34:59,130 --> 00:35:08,090
is out now but 2.8 is rumoured or

00:35:03,350 --> 00:35:11,640
announced to have document level looking

00:35:08,090 --> 00:35:13,920
so we would much like to see what that

00:35:11,640 --> 00:35:15,710
will do for our lot blocking times

00:35:13,920 --> 00:35:18,150
because currently looking times are

00:35:15,710 --> 00:35:20,840
quite high especially with high load

00:35:18,150 --> 00:35:24,060
because we update a lot of content

00:35:20,840 --> 00:35:27,030
constantly due to the popularity and

00:35:24,060 --> 00:35:30,300
also due to the actual think actual

00:35:27,030 --> 00:35:38,480
thing that stuff changes quite a lot

00:35:30,300 --> 00:35:38,480
constantly what we have planned for next

00:35:38,660 --> 00:35:48,750
we have some stuff cooking up here we

00:35:47,100 --> 00:35:51,540
thinking of separating different node.js

00:35:48,750 --> 00:35:53,760
services fully so that we might be able

00:35:51,540 --> 00:35:56,820
to move them to different servers at

00:35:53,760 --> 00:35:58,950
some point there's beautiful there's a

00:35:56,820 --> 00:36:00,330
bit of a day that's like highly critical

00:35:58,950 --> 00:36:01,920
services and then there are certain

00:36:00,330 --> 00:36:04,290
services that that don't have to be

00:36:01,920 --> 00:36:07,820
served within milliseconds because

00:36:04,290 --> 00:36:10,650
seconds is fine so for instance

00:36:07,820 --> 00:36:14,100
currently they released a Windows Phone

00:36:10,650 --> 00:36:15,330
Windows Phone client which probably here

00:36:14,100 --> 00:36:16,980
doesn't seem like it would change

00:36:15,330 --> 00:36:20,460
anything because Windows who uses

00:36:16,980 --> 00:36:24,150
windows forms anyway but in Finland from

00:36:20,460 --> 00:36:26,190
some reason we had this thing called

00:36:24,150 --> 00:36:28,980
nokia previously much software bought it

00:36:26,190 --> 00:36:31,410
the phone services but friends for some

00:36:28,980 --> 00:36:33,210
reason still use quite a bit of Nokia

00:36:31,410 --> 00:36:37,260
phones which I'll our windows forms

00:36:33,210 --> 00:36:39,120
Windows Phone phones so that means that

00:36:37,260 --> 00:36:42,930
we get a lot of traffic when we have a

00:36:39,120 --> 00:36:46,520
working client for that so does love

00:36:42,930 --> 00:36:48,750
traffic coming from the different mobile

00:36:46,520 --> 00:36:51,270
mobile applications we have one

00:36:48,750 --> 00:36:54,150
backbone.js front end and we have

00:36:51,270 --> 00:36:56,790
different servers and new new consumers

00:36:54,150 --> 00:37:01,170
of our API are coming constantly trip

00:36:56,790 --> 00:37:04,530
with from within their cooperation so we

00:37:01,170 --> 00:37:08,150
might want to be able to even scale more

00:37:04,530 --> 00:37:10,470
so moving the node.js services out

00:37:08,150 --> 00:37:14,630
differentiating them so that we can have

00:37:10,470 --> 00:37:14,630
them on different servers that's good

00:37:15,260 --> 00:37:20,880
also moving actual normally result from

00:37:18,360 --> 00:37:22,800
the node.js servers would be good and

00:37:20,880 --> 00:37:26,010
especially if we get them to something

00:37:22,800 --> 00:37:29,700
that's really I like fast with IO like

00:37:26,010 --> 00:37:31,880
max i opes thing is that sounds

00:37:29,700 --> 00:37:31,880
promising

00:37:32,339 --> 00:37:37,109
I might want to mention that there's a

00:37:35,039 --> 00:37:39,119
there's a front end that the front end

00:37:37,109 --> 00:37:40,829
rupal I mentioned earlier there's a

00:37:39,119 --> 00:37:43,759
Drupal 7 front end for this for the

00:37:40,829 --> 00:37:46,319
actual site that that's used by browsers

00:37:43,759 --> 00:37:49,859
that's not built by us it actually it's

00:37:46,319 --> 00:37:51,329
actually built by unda card I didn't get

00:37:49,859 --> 00:37:57,450
paid for mentioning their name by the

00:37:51,329 --> 00:38:01,019
way and that one's doing rush hours with

00:37:57,450 --> 00:38:04,279
30 servers so we we run with tree on the

00:38:01,019 --> 00:38:06,960
background so that's kind of the

00:38:04,279 --> 00:38:10,229
difference and they have varnish on on

00:38:06,960 --> 00:38:12,569
top actually a couple of fun I think at

00:38:10,229 --> 00:38:14,549
least or at least one varnish server

00:38:12,569 --> 00:38:16,259
which caches all the content so that it

00:38:14,549 --> 00:38:18,150
even doesn't get that much back in

00:38:16,259 --> 00:38:21,839
traffic they can handle I think about a

00:38:18,150 --> 00:38:26,309
hundred logins per second when people

00:38:21,839 --> 00:38:28,049
are logging in to their and and that's

00:38:26,309 --> 00:38:30,569
they I mean that it's not their fault

00:38:28,049 --> 00:38:35,279
it's just to policing that good with

00:38:30,569 --> 00:38:38,390
high performance stuff then there's some

00:38:35,279 --> 00:38:41,039
triple optimizations that we're doing

00:38:38,390 --> 00:38:43,680
we're moving the integrations outside

00:38:41,039 --> 00:38:47,759
Drupal for clarity so instead of modules

00:38:43,680 --> 00:38:52,469
we would like to use an API with kind of

00:38:47,759 --> 00:38:54,809
the custom custom video integration

00:38:52,469 --> 00:38:58,109
stuff outside rupal and then just use

00:38:54,809 --> 00:39:00,559
the API so we created the module which I

00:38:58,109 --> 00:39:05,009
find or that there wasn't one already

00:39:00,559 --> 00:39:10,769
that fakes the Drupal 8 REST API on

00:39:05,009 --> 00:39:15,359
seven it's kind of handy if you maybe

00:39:10,769 --> 00:39:18,930
want to move to eight at some point we

00:39:15,359 --> 00:39:21,119
also released that but that was even

00:39:18,930 --> 00:39:23,400
released was a mother guy who also

00:39:21,119 --> 00:39:25,650
didn't have project creation rights in a

00:39:23,400 --> 00:39:29,099
triple to Doric so that's also in

00:39:25,650 --> 00:39:35,660
sandbox wedding a pool let's see when

00:39:29,099 --> 00:39:35,660
that comes out and that's pretty much it

00:39:36,839 --> 00:39:47,759
that's my presentation thank you now if

00:39:45,930 --> 00:39:49,380
you have questions please use the mic

00:39:47,759 --> 00:39:53,279
there apparently they're recording the

00:39:49,380 --> 00:39:57,950
whole thing that doesn't work there so

00:39:53,279 --> 00:39:57,950
you try to walk there and then ask

00:40:07,510 --> 00:40:15,220
hi can you hear me yeah can you talk a

00:40:12,010 --> 00:40:18,430
bit about the mongodb index error module

00:40:15,220 --> 00:40:21,160
that you wrote up I think conceptually

00:40:18,430 --> 00:40:25,090
the idea is that content would be

00:40:21,160 --> 00:40:29,800
created on using the standard Drupal GUI

00:40:25,090 --> 00:40:31,690
and then it updates a MongoDB yeah it

00:40:29,800 --> 00:40:32,830
works similarly if you have used if you

00:40:31,690 --> 00:40:35,410
have if you have used the soul or

00:40:32,830 --> 00:40:37,390
indexing solar services for instance

00:40:35,410 --> 00:40:40,030
like a patisserie search integration

00:40:37,390 --> 00:40:41,560
module it just stores the same content

00:40:40,030 --> 00:40:43,420
you have stored in Drupal outside

00:40:41,560 --> 00:40:45,220
whenever you change it the moment he

00:40:43,420 --> 00:40:48,130
works in similar ways so it doesn't

00:40:45,220 --> 00:40:49,990
touch Drupal's storing mechanism it just

00:40:48,130 --> 00:40:54,280
hooks it and then stores the stuff

00:40:49,990 --> 00:40:57,120
outside of triple for easier access it

00:40:54,280 --> 00:41:00,250
doesn't you know it's not that

00:40:57,120 --> 00:41:06,040
spectacular module at all it just stores

00:41:00,250 --> 00:41:07,930
stuff outside triple into a MongoDB it's

00:41:06,040 --> 00:41:09,640
just a replica of VR drupal's condon but

00:41:07,930 --> 00:41:14,700
it obviously stores it in a slightly

00:41:09,640 --> 00:41:18,820
different way so because it yeah yeah

00:41:14,700 --> 00:41:21,400
thank you you mentioned in the start

00:41:18,820 --> 00:41:25,030
that you are trying to surf content

00:41:21,400 --> 00:41:27,670
based on popularity and if all the

00:41:25,030 --> 00:41:30,040
clients connected note years do they

00:41:27,670 --> 00:41:33,490
also write back to the MongoDB or do

00:41:30,040 --> 00:41:36,570
they provide that data back to the to do

00:41:33,490 --> 00:41:39,820
poisons actually there is a back end for

00:41:36,570 --> 00:41:43,120
popularity that counts the videos and it

00:41:39,820 --> 00:41:45,400
goes to two different there's it this a

00:41:43,120 --> 00:41:47,890
separate service that that handles that

00:41:45,400 --> 00:41:50,050
data it goes outside to a statistics

00:41:47,890 --> 00:41:52,420
server that handles the statistics that

00:41:50,050 --> 00:41:56,500
they use for selling ads to the content

00:41:52,420 --> 00:41:57,340
but they have I think currently they

00:41:56,500 --> 00:41:59,260
were listening they're tracking

00:41:57,340 --> 00:42:00,970
mechanisms they had eight I think

00:41:59,260 --> 00:42:03,880
they've added now one more I don't know

00:42:00,970 --> 00:42:07,060
why but they have I think nine tracking

00:42:03,880 --> 00:42:10,750
systems that track people using using

00:42:07,060 --> 00:42:13,750
videos but one one of them is within the

00:42:10,750 --> 00:42:16,270
node.js platform so yeah we do right

00:42:13,750 --> 00:42:18,470
right the video counts there and we use

00:42:16,270 --> 00:42:22,840
that information to

00:42:18,470 --> 00:42:22,840
change the popularity yeah thanks

00:42:29,420 --> 00:42:36,790
right hello I I was just wondering you

00:42:33,890 --> 00:42:40,930
use any test framework for the note gets

00:42:36,790 --> 00:42:44,510
back end then if you do what what primo

00:42:40,930 --> 00:42:46,400
tears what test framework for migration

00:42:44,510 --> 00:42:48,440
testing or unit testing or we don't

00:42:46,400 --> 00:42:51,950
April for unit testing we don't use

00:42:48,440 --> 00:42:54,079
anything currently the code base it's

00:42:51,950 --> 00:42:58,930
pretty simple and we could use it not a

00:42:54,079 --> 00:43:01,160
bad idea at all but the system works is

00:42:58,930 --> 00:43:03,049
running in different three different

00:43:01,160 --> 00:43:04,460
environments so there's a dev

00:43:03,049 --> 00:43:07,099
environment as their staging environment

00:43:04,460 --> 00:43:09,079
and then this production one we have the

00:43:07,099 --> 00:43:11,990
staging and the production environments

00:43:09,079 --> 00:43:14,930
are constantly tested by by a bunch of

00:43:11,990 --> 00:43:16,460
Python scripts that some of them are

00:43:14,930 --> 00:43:19,640
just Python scripts and some of them run

00:43:16,460 --> 00:43:22,099
selenium all are run by Jenkins server

00:43:19,640 --> 00:43:24,980
so I think the question testing is it's

00:43:22,099 --> 00:43:28,040
done by that and it basically what it

00:43:24,980 --> 00:43:30,260
does is it tests that the system works

00:43:28,040 --> 00:43:32,720
in in staging and in production it just

00:43:30,260 --> 00:43:35,240
twice to see that nothing has stopped

00:43:32,720 --> 00:43:38,000
from it from you know currently running

00:43:35,240 --> 00:43:40,190
so if there's a let's say a pause in new

00:43:38,000 --> 00:43:42,740
videos that's eight hours we know that

00:43:40,190 --> 00:43:44,720
we need to alarm people because there's

00:43:42,740 --> 00:43:48,829
never a pause of eight hours in new

00:43:44,720 --> 00:43:51,400
videos even during Christmas all right

00:43:48,829 --> 00:43:51,400
thanks

00:43:54,740 --> 00:44:00,560
europe via sleep powering quite a big

00:43:57,470 --> 00:44:03,950
site with a lot of traffic would it make

00:44:00,560 --> 00:44:10,280
sense to use no dey Jes to speed up

00:44:03,950 --> 00:44:13,340
smaller sites well it depends on the

00:44:10,280 --> 00:44:16,220
requirements obviously so I would it

00:44:13,340 --> 00:44:18,500
depends on how slow how small and how

00:44:16,220 --> 00:44:20,480
can can you serve it with with Drupal

00:44:18,500 --> 00:44:22,790
it's extra hassle if you have to content

00:44:20,480 --> 00:44:25,940
in Drupal and you can serve it with

00:44:22,790 --> 00:44:27,740
Drupal let's say head less rupal to to

00:44:25,940 --> 00:44:29,960
the to the front end I would say that

00:44:27,740 --> 00:44:33,710
why not use just Drupal for it if that's

00:44:29,960 --> 00:44:37,280
okay obviously there the average

00:44:33,710 --> 00:44:38,840
response times are in Drupal even though

00:44:37,280 --> 00:44:41,869
there would be no traffic they're still

00:44:38,840 --> 00:44:43,810
pretty high so if you if you fetch a lot

00:44:41,869 --> 00:44:46,640
of content it's going to take a while so

00:44:43,810 --> 00:44:48,680
that that might be helped with noches

00:44:46,640 --> 00:44:51,830
but I think this is something that that

00:44:48,680 --> 00:44:53,560
needs to be used I think well I say that

00:44:51,830 --> 00:44:56,450
this is something that i would use in

00:44:53,560 --> 00:44:59,770
situations where i'd really definitely

00:44:56,450 --> 00:45:02,770
need the performance of the back end

00:44:59,770 --> 00:45:02,770
thanks

00:45:04,570 --> 00:45:09,550
why didn't you go look for something

00:45:06,760 --> 00:45:11,890
that's more suited for your needs than

00:45:09,550 --> 00:45:14,200
grupal because it seems to me that you

00:45:11,890 --> 00:45:16,690
you could actually just find a content

00:45:14,200 --> 00:45:18,340
management system that might do stuff on

00:45:16,690 --> 00:45:21,250
MongoDB in the first place so you didn't

00:45:18,340 --> 00:45:24,780
have to do the conversion to MongoDB or

00:45:21,250 --> 00:45:29,860
just use symphony instead because the

00:45:24,780 --> 00:45:32,140
symphony tiffany well Oh symphony isn't

00:45:29,860 --> 00:45:35,590
isn't the solution here I mean symphony

00:45:32,140 --> 00:45:37,810
isn't if you use symphony I think

00:45:35,590 --> 00:45:40,960
properly I think it kind of you know

00:45:37,810 --> 00:45:44,920
with alikes to have an SQL database

00:45:40,960 --> 00:45:52,720
behind it to fully use its capabilities

00:45:44,920 --> 00:45:54,700
and and symphonies I'd say slow as well

00:45:52,720 --> 00:45:56,560
any way you can you can't deliver that

00:45:54,700 --> 00:45:59,470
you can content out with that so you

00:45:56,560 --> 00:46:02,620
still have to have the node.js there so

00:45:59,470 --> 00:46:06,430
building a CMS on noches because there

00:46:02,620 --> 00:46:08,250
are no proper CM sec noches like if you

00:46:06,430 --> 00:46:11,920
seen ghosts which is thinking out the

00:46:08,250 --> 00:46:15,940
best cm is in node.js that's like

00:46:11,920 --> 00:46:19,210
WordPress one in functionality it's it's

00:46:15,940 --> 00:46:21,040
like it's so far away from Drupal these

00:46:19,210 --> 00:46:23,710
days so it is it's not a thing and

00:46:21,040 --> 00:46:26,530
besides what I what I kind of you know

00:46:23,710 --> 00:46:28,720
didn't focus on this this presentation

00:46:26,530 --> 00:46:31,480
is that obviously the video content

00:46:28,720 --> 00:46:33,280
management system is it serves a lot of

00:46:31,480 --> 00:46:35,640
journalists and it serves a lot of

00:46:33,280 --> 00:46:37,600
content owners it says a lot of

00:46:35,640 --> 00:46:41,260
production companies they need to have

00:46:37,600 --> 00:46:43,810
user groups detailed user rights they

00:46:41,260 --> 00:46:45,610
need to be able to you know configure

00:46:43,810 --> 00:46:47,860
the groups and user rights and

00:46:45,610 --> 00:46:50,050
everything in detail and tubal offers

00:46:47,860 --> 00:46:52,480
that I'll be box so you don't really use

00:46:50,050 --> 00:46:54,460
it this is a headless thing you actually

00:46:52,480 --> 00:46:58,690
use the content management system yeah I

00:46:54,460 --> 00:47:00,640
used yeah well I don't use it for

00:46:58,690 --> 00:47:04,960
serving content but I use the content

00:47:00,640 --> 00:47:08,320
management system itself extensively in

00:47:04,960 --> 00:47:10,780
the behind behind you know behind what

00:47:08,320 --> 00:47:12,940
you can see so if you use and the iOS

00:47:10,780 --> 00:47:16,410
client you can't see anything but but

00:47:12,940 --> 00:47:19,410
but in the background the two police

00:47:16,410 --> 00:47:22,130
used quite a lot thank you that makes

00:47:19,410 --> 00:47:22,130
more sense now

00:47:27,269 --> 00:47:33,409
anyone else okay that's it then thank

00:47:31,259 --> 00:47:33,409

YouTube URL: https://www.youtube.com/watch?v=VmTd6hITVVA


