Title: DrupalCon Amsterdam 2014: Dependency Injection
Publication date: 2014-09-30
Playlist: DrupalCon Amsterdam - September 2014
Description: 
	Speakers: fabpot
Drupal 8 is about some fundamental changes in the way the platform is built: from OOP everywhere to Twig as a templating system. Amongst all these changes, one of them is the usage of the Dependency Injection design pattern. This pattern greatly improves the decoupling and the testability of your code, and it will make Drupal evolutions easier in the future.

During the talk, I'm going to introduce Dependency Injection with real-world examples and then, we are going to learn more about the Symfony Dependency Injection Container which powers Drupal 8.

Don't be afraid, big words do not necessarily mean complexity!
Captions: 
	00:00:00,620 --> 00:00:06,170
okay hi everyone welcome to this session

00:00:04,130 --> 00:00:09,420
so today I'm going to talk about

00:00:06,170 --> 00:00:11,670
dependency injection the dependency

00:00:09,420 --> 00:00:14,990
injection is a design pattern it's a

00:00:11,670 --> 00:00:18,449
very very simple concept to understand

00:00:14,990 --> 00:00:20,910
but it's very hard to explain probably

00:00:18,449 --> 00:00:22,830
because you need to use it a lot to

00:00:20,910 --> 00:00:25,890
really understand the benefits of using

00:00:22,830 --> 00:00:27,269
dependency injection so the first part

00:00:25,890 --> 00:00:29,310
of the talk is going to be about

00:00:27,269 --> 00:00:31,380
dependency injection the design pattern

00:00:29,310 --> 00:00:34,380
so that everyone really understand

00:00:31,380 --> 00:00:35,910
what's what is it about and the second

00:00:34,380 --> 00:00:37,770
part of the talk is more about the

00:00:35,910 --> 00:00:40,739
dependency injection container that you

00:00:37,770 --> 00:00:45,719
get when you are using symphony or when

00:00:40,739 --> 00:00:47,460
you will be using Drupal 8 so first when

00:00:45,719 --> 00:00:48,989
I'm talking about the container that's

00:00:47,460 --> 00:00:51,690
something I'm going to introduce later

00:00:48,989 --> 00:00:54,480
on in decision but the very first part

00:00:51,690 --> 00:00:58,350
is really about just what is dependency

00:00:54,480 --> 00:00:59,969
injection the first thing is that

00:00:58,350 --> 00:01:01,550
dependency injection is a design pattern

00:00:59,969 --> 00:01:03,840
that you can use when you are doing

00:01:01,550 --> 00:01:06,090
object-oriented programming so you can't

00:01:03,840 --> 00:01:09,860
use dependency injection if you are just

00:01:06,090 --> 00:01:14,220
using functions so you need some classes

00:01:09,860 --> 00:01:17,909
so to make things clearer hopefully I'm

00:01:14,220 --> 00:01:19,770
going to talk about this user class when

00:01:17,909 --> 00:01:22,140
you are managing a web application you

00:01:19,770 --> 00:01:24,979
need a user at some point so a user is

00:01:22,140 --> 00:01:28,500
something that you can implement you

00:01:24,979 --> 00:01:33,930
store some user preferences like its

00:01:28,500 --> 00:01:36,900
language for instance and because the

00:01:33,930 --> 00:01:39,540
HTTP protocol is stateless you need to

00:01:36,900 --> 00:01:40,350
also have a way to store those

00:01:39,540 --> 00:01:42,899
preferences

00:01:40,350 --> 00:01:45,750
so here the long way that the user from

00:01:42,899 --> 00:01:48,360
one requires to the next one so we need

00:01:45,750 --> 00:01:51,659
two different objects one to be able to

00:01:48,360 --> 00:01:54,329
represent the user preferences this is

00:01:51,659 --> 00:01:58,500
this class and the other one which could

00:01:54,329 --> 00:02:01,610
be a way to store all the Preferences

00:01:58,500 --> 00:02:04,049
from one request to the next one so

00:02:01,610 --> 00:02:06,840
using this user class is crazy

00:02:04,049 --> 00:02:09,660
you create a user and you set a language

00:02:06,840 --> 00:02:14,050
for instance right so to be able to

00:02:09,660 --> 00:02:18,340
store this information into between HT

00:02:14,050 --> 00:02:20,950
request we can use PHP sessions so error

00:02:18,340 --> 00:02:22,900
errors the session storage so this is a

00:02:20,950 --> 00:02:26,740
class that you can use to actually store

00:02:22,900 --> 00:02:29,230
things in a session a very simple one it

00:02:26,740 --> 00:02:32,500
takes one argument for the constructor

00:02:29,230 --> 00:02:34,240
and the cookie name with a default value

00:02:32,500 --> 00:02:35,950
it started session when you create a

00:02:34,240 --> 00:02:39,190
session storage object and then you can

00:02:35,950 --> 00:02:41,710
set things on the storage and of course

00:02:39,190 --> 00:02:44,340
there is probably a get method to be

00:02:41,710 --> 00:02:47,740
able to get back things from the storage

00:02:44,340 --> 00:02:49,840
so now I have this problem I have two

00:02:47,740 --> 00:02:52,150
different objects two different

00:02:49,840 --> 00:02:53,710
responsibilities one is about managing

00:02:52,150 --> 00:02:58,050
the user preferences and the other one

00:02:53,710 --> 00:03:02,320
is about storing things into a session

00:02:58,050 --> 00:03:04,360
dollar different but the user needs a

00:03:02,320 --> 00:03:07,330
session storage to be able to work

00:03:04,360 --> 00:03:12,070
properly when used in a web application

00:03:07,330 --> 00:03:16,210
so there is how I can use both objects

00:03:12,070 --> 00:03:18,489
into one convenient package so error in

00:03:16,210 --> 00:03:22,209
the constructor of the user class I

00:03:18,489 --> 00:03:24,700
create a session storage and whenever I

00:03:22,209 --> 00:03:28,030
set the language instead of storing it

00:03:24,700 --> 00:03:33,820
locally into the user a user property I

00:03:28,030 --> 00:03:37,209
set it in the in the storage from the

00:03:33,820 --> 00:03:39,489
user perspective this is exactly the

00:03:37,209 --> 00:03:41,440
same as before if you want to use the

00:03:39,489 --> 00:03:44,230
user you create a new user

00:03:41,440 --> 00:03:46,420
you said language everything happens

00:03:44,230 --> 00:03:48,970
being seen so you are not aware that

00:03:46,420 --> 00:03:56,770
this user object is actually using a

00:03:48,970 --> 00:04:02,010
session storage okay so it's very easy

00:03:56,770 --> 00:04:04,959
to use but it's very hard to customize

00:04:02,010 --> 00:04:07,209
so another way would be to actually

00:04:04,959 --> 00:04:09,850
inject the dependency into the user

00:04:07,209 --> 00:04:12,519
object so instead of creating the

00:04:09,850 --> 00:04:15,160
storage object in the user constructor

00:04:12,519 --> 00:04:19,750
here you can see that the storage is

00:04:15,160 --> 00:04:22,360
injected into the constructor now if you

00:04:19,750 --> 00:04:25,240
look at the code it's very easy to

00:04:22,360 --> 00:04:27,790
customize because I can inject any kind

00:04:25,240 --> 00:04:30,460
of storage I don't care about which

00:04:27,790 --> 00:04:33,520
one you are going to inject but it's

00:04:30,460 --> 00:04:35,620
slightly more difficult to use now if I

00:04:33,520 --> 00:04:37,570
want to create a user I need to

00:04:35,620 --> 00:04:39,730
understand first I need to create a

00:04:37,570 --> 00:04:41,680
session storage and then I need to

00:04:39,730 --> 00:04:44,200
inject a session storage into the user

00:04:41,680 --> 00:04:48,220
object before being able to set the

00:04:44,200 --> 00:04:50,950
language or get the language whatever so

00:04:48,220 --> 00:04:54,160
from a design perspective it's much

00:04:50,950 --> 00:04:56,800
better to use this solution but from a

00:04:54,160 --> 00:04:59,170
user perspective the developer who is

00:04:56,800 --> 00:05:00,850
going to use your user object it's

00:04:59,170 --> 00:05:04,030
slightly more difficult to use because

00:05:00,850 --> 00:05:06,100
now you need to be aware of all the

00:05:04,030 --> 00:05:08,940
dependencies that you need to be able to

00:05:06,100 --> 00:05:12,930
create a user object

00:05:08,940 --> 00:05:15,820
this slide is dependency injection

00:05:12,930 --> 00:05:19,120
so that's dependency injection nothing

00:05:15,820 --> 00:05:22,450
more very easy to understand very easy

00:05:19,120 --> 00:05:24,940
to actually use if you want the biggest

00:05:22,450 --> 00:05:26,890
problem being that it's a bit more

00:05:24,940 --> 00:05:29,440
difficult to use and that's the biggest

00:05:26,890 --> 00:05:31,540
problem and that's why at some point

00:05:29,440 --> 00:05:33,910
people don't really use dependency

00:05:31,540 --> 00:05:39,970
injection because it makes things harder

00:05:33,910 --> 00:05:42,640
for the end user so again the difference

00:05:39,970 --> 00:05:45,520
between the two different slides the two

00:05:42,640 --> 00:05:49,170
different user classes is subtle but

00:05:45,520 --> 00:05:52,750
very important in one case I create the

00:05:49,170 --> 00:05:54,550
storage object within the constructor

00:05:52,750 --> 00:05:58,120
when using the dependency injection

00:05:54,550 --> 00:06:01,990
pattern I inject it into the constructor

00:05:58,120 --> 00:06:04,930
instead so this is a design pattern this

00:06:01,990 --> 00:06:06,310
is a good practice but just

00:06:04,930 --> 00:06:10,630
understanding that this is a good press

00:06:06,310 --> 00:06:13,240
practice is not enough why why is it

00:06:10,630 --> 00:06:16,480
really something that is useful and why

00:06:13,240 --> 00:06:22,390
it's it is much better to actually use

00:06:16,480 --> 00:06:24,760
dependency injection so I want to show

00:06:22,390 --> 00:06:28,090
you why this is really important and so

00:06:24,760 --> 00:06:29,860
that you can see the benefits so the

00:06:28,090 --> 00:06:32,560
first thing I want to do so I'm going to

00:06:29,860 --> 00:06:35,470
take the first example trying to figure

00:06:32,560 --> 00:06:37,120
out how I can customize the session

00:06:35,470 --> 00:06:40,690
storage without using dependency

00:06:37,120 --> 00:06:41,590
injection so the first thing I want to

00:06:40,690 --> 00:06:43,840
be able to do is to

00:06:41,590 --> 00:06:46,240
to session cookie name remember a

00:06:43,840 --> 00:06:48,070
decision storage class text a session

00:06:46,240 --> 00:06:50,890
name so this is the cookie name really

00:06:48,070 --> 00:06:54,040
as a first argument so here instead of

00:06:50,890 --> 00:06:56,650
using a default one I want to name it

00:06:54,040 --> 00:06:58,260
session right so this is one way to do

00:06:56,650 --> 00:07:01,180
that

00:06:58,260 --> 00:07:07,650
can you see a problem here why this is

00:07:01,180 --> 00:07:07,650
not a very good idea yeah

00:07:09,930 --> 00:07:19,199
yeah so yeah so basically it's very hard

00:07:15,449 --> 00:07:22,110
to customize that from the outside of

00:07:19,199 --> 00:07:25,289
the user class right so if I want to be

00:07:22,110 --> 00:07:28,139
able to configure the session name from

00:07:25,289 --> 00:07:31,800
the outside so creating a configuration

00:07:28,139 --> 00:07:33,630
file or storing the name in a variable

00:07:31,800 --> 00:07:35,460
outside of the user object that's not

00:07:33,630 --> 00:07:37,979
possible so everything is article it so

00:07:35,460 --> 00:07:40,380
the way you can configure the session

00:07:37,979 --> 00:07:45,300
storage is Arkadiy into the user class

00:07:40,380 --> 00:07:48,150
that's not really flexible enough so one

00:07:45,300 --> 00:07:50,820
way to fix that would be to create a

00:07:48,150 --> 00:07:53,669
constant right so they're different from

00:07:50,820 --> 00:07:55,889
a variable but that works so now I can

00:07:53,669 --> 00:07:58,740
say okay there is this constant and this

00:07:55,889 --> 00:08:00,150
is the session name and now I can change

00:07:58,740 --> 00:08:03,150
the session name if I want from the

00:08:00,150 --> 00:08:06,000
outside of the user class that's one way

00:08:03,150 --> 00:08:09,060
to do that but this is a global constant

00:08:06,000 --> 00:08:11,460
so if I want to be able to test my user

00:08:09,060 --> 00:08:15,150
class with different storage strategies

00:08:11,460 --> 00:08:17,000
with different cookie names I can't what

00:08:15,150 --> 00:08:22,440
this is constant so you can change the

00:08:17,000 --> 00:08:25,080
value anymore so instead of doing that

00:08:22,440 --> 00:08:26,909
you can inject the session name into the

00:08:25,080 --> 00:08:30,330
constructor of the user class right so

00:08:26,909 --> 00:08:34,740
here I passed the session string as an

00:08:30,330 --> 00:08:37,890
argument to the constructor class that

00:08:34,740 --> 00:08:40,890
works but what if I need to pass more

00:08:37,890 --> 00:08:42,900
variables but if I have more things to

00:08:40,890 --> 00:08:46,470
configure on the session storage object

00:08:42,900 --> 00:08:48,810
is going to add more arguments to the

00:08:46,470 --> 00:08:50,700
constructor and what if the user class

00:08:48,810 --> 00:08:53,220
itself has some arguments I'm going to

00:08:50,700 --> 00:08:55,350
be able I'm going to mix and match the

00:08:53,220 --> 00:08:58,550
arguments for the user class and the one

00:08:55,350 --> 00:09:04,670
from for the session storage class so

00:08:58,550 --> 00:09:04,670
it's possible but it's not optimal okay

00:09:05,000 --> 00:09:10,680
so instead of passing all the arguments

00:09:07,890 --> 00:09:13,380
one after the other you can also create

00:09:10,680 --> 00:09:16,140
an array so here I've kradin ray and

00:09:13,380 --> 00:09:18,810
this ray is about all the options that

00:09:16,140 --> 00:09:20,279
you can pass to the session storage it's

00:09:18,810 --> 00:09:23,400
a bit better because there is only one

00:09:20,279 --> 00:09:27,090
argument used to pass

00:09:23,400 --> 00:09:33,210
decision storage constructor arguments

00:09:27,090 --> 00:09:36,900
but still it's not good enough right the

00:09:33,210 --> 00:09:38,490
user class should not be aware of how

00:09:36,900 --> 00:09:39,660
you want to configure the station

00:09:38,490 --> 00:09:43,410
storage right

00:09:39,660 --> 00:09:45,060
I want the objects to be decoupled I

00:09:43,410 --> 00:09:49,860
don't want to use a class to know

00:09:45,060 --> 00:09:52,350
anything about the session storage okay

00:09:49,860 --> 00:09:54,480
and for to be able to fix all those

00:09:52,350 --> 00:09:56,790
problems you can just use dependency

00:09:54,480 --> 00:09:58,440
injection so the right way is to create

00:09:56,790 --> 00:10:01,770
the object first the session storage

00:09:58,440 --> 00:10:03,450
object first you configure it in any way

00:10:01,770 --> 00:10:08,010
it's really up to you and then you

00:10:03,450 --> 00:10:10,770
inject it into the user class so it

00:10:08,010 --> 00:10:20,820
solves all the problems except that it's

00:10:10,770 --> 00:10:22,970
a bit more complex use okay yeah okay so

00:10:20,820 --> 00:10:29,280
now I want to talk about some other

00:10:22,970 --> 00:10:32,640
solutions that work kinda but are less

00:10:29,280 --> 00:10:33,870
interesting than dependency injection so

00:10:32,640 --> 00:10:38,370
instead of using dependency injection

00:10:33,870 --> 00:10:41,190
you can create register class so you

00:10:38,370 --> 00:10:44,280
have this global object where you store

00:10:41,190 --> 00:10:47,490
all the dependencies right so you create

00:10:44,280 --> 00:10:50,010
your session storage you set it into the

00:10:47,490 --> 00:10:52,110
registry and then from the user

00:10:50,010 --> 00:10:54,420
constructor you get it from the

00:10:52,110 --> 00:10:58,170
registries which means that from the

00:10:54,420 --> 00:11:00,810
user perspective you can just create the

00:10:58,170 --> 00:11:02,850
user and choose it as before you don't

00:11:00,810 --> 00:11:06,920
need to be aware that the user is

00:11:02,850 --> 00:11:06,920
actually depending on decision storage

00:11:07,400 --> 00:11:14,040
it's bad for many reasons but the main

00:11:11,310 --> 00:11:17,940
one is you are adding yet another layer

00:11:14,040 --> 00:11:20,400
for nothing just using dependency

00:11:17,940 --> 00:11:22,170
injection is much better so it doesn't

00:11:20,400 --> 00:11:25,530
solve anything since the not the right

00:11:22,170 --> 00:11:29,310
solution is more complex for no added

00:11:25,530 --> 00:11:32,850
benefit so using dependency injection is

00:11:29,310 --> 00:11:34,440
much better in this case so dependency

00:11:32,850 --> 00:11:35,200
injection is it's something that is

00:11:34,440 --> 00:11:38,190
really

00:11:35,200 --> 00:11:42,850
to understand it solves many problems

00:11:38,190 --> 00:11:45,490
and and yeah there there's no need to

00:11:42,850 --> 00:11:47,800
actually reinvent the wheel and and the

00:11:45,490 --> 00:11:52,300
registry pattern is is not one way to

00:11:47,800 --> 00:11:54,010
solve this specific problem okay so if

00:11:52,300 --> 00:11:57,190
you are using dependency injection

00:11:54,010 --> 00:11:58,720
everything becomes natural very easy if

00:11:57,190 --> 00:12:02,110
I want to change the session storage

00:11:58,720 --> 00:12:04,810
let's say I want to store my session in

00:12:02,110 --> 00:12:06,700
memcache D for instance I can just swap

00:12:04,810 --> 00:12:10,330
the dependency create a memcache D

00:12:06,700 --> 00:12:13,380
session storage and then inject it in

00:12:10,330 --> 00:12:15,880
the user the user doesn't care about

00:12:13,380 --> 00:12:20,830
which kind of session storage you are

00:12:15,880 --> 00:12:23,820
actually injecting injecting for testing

00:12:20,830 --> 00:12:28,780
you can create an array session storage

00:12:23,820 --> 00:12:30,580
problem are very easy to do of course

00:12:28,780 --> 00:12:33,640
the next stage would be to create an

00:12:30,580 --> 00:12:36,280
interface so instead of you know

00:12:33,640 --> 00:12:39,130
injecting any kind of object you create

00:12:36,280 --> 00:12:41,560
a session storage interface there is a

00:12:39,130 --> 00:12:43,930
simple one with a get method set methods

00:12:41,560 --> 00:12:46,750
so this is a contract between the user

00:12:43,930 --> 00:12:49,600
class and the session storage right so

00:12:46,750 --> 00:12:51,190
now if I have a look at the constructor

00:12:49,600 --> 00:12:53,520
of the user class you can see that I've

00:12:51,190 --> 00:12:56,950
added the session storage interface int

00:12:53,520 --> 00:12:58,720
so this is the contract so it means that

00:12:56,950 --> 00:13:00,820
now you can inject any class

00:12:58,720 --> 00:13:04,360
implementing this interface so any class

00:13:00,820 --> 00:13:06,540
with a get method and a set method will

00:13:04,360 --> 00:13:06,540
work

00:13:10,510 --> 00:13:17,800
okay and of course the big benefit of

00:13:15,940 --> 00:13:19,690
using interfaces means that if you are

00:13:17,800 --> 00:13:22,779
using PHP unit for instance you can get

00:13:19,690 --> 00:13:25,029
a mock so instead of creating a mock

00:13:22,779 --> 00:13:27,010
yourself you can ask people you need to

00:13:25,029 --> 00:13:29,500
create one for you so if you don't want

00:13:27,010 --> 00:13:32,529
to actually create a session and if you

00:13:29,500 --> 00:13:33,760
want to unit test this user class you

00:13:32,529 --> 00:13:36,639
don't have any session you don't have

00:13:33,760 --> 00:13:38,170
any HTTP requests so you can ask PHP

00:13:36,639 --> 00:13:40,750
unit to create a map for you and then

00:13:38,170 --> 00:13:43,630
you can easily test your user class

00:13:40,750 --> 00:13:46,079
without any dependency on a session

00:13:43,630 --> 00:13:50,430
storage everyone

00:13:46,079 --> 00:13:54,399
so it helps building clean code really

00:13:50,430 --> 00:13:59,079
your car is going to be reusable right

00:13:54,399 --> 00:14:01,029
so the session storage is reusable

00:13:59,079 --> 00:14:04,480
without the user class and the user

00:14:01,029 --> 00:14:07,720
class is reusable without using the same

00:14:04,480 --> 00:14:09,899
always the same session storage testable

00:14:07,720 --> 00:14:11,980
because you can rely on interfaces

00:14:09,899 --> 00:14:13,720
pluggable so you can change the

00:14:11,980 --> 00:14:16,810
dependency with whatever you want and

00:14:13,720 --> 00:14:18,610
lose the couple I have one user object

00:14:16,810 --> 00:14:20,560
it's single responsibility is to

00:14:18,610 --> 00:14:23,440
actually manage the user preferences and

00:14:20,560 --> 00:14:26,410
then there is decision storage it's only

00:14:23,440 --> 00:14:30,550
responsibility is to manage the storage

00:14:26,410 --> 00:14:34,990
of things so it's all about the

00:14:30,550 --> 00:14:37,029
separation of concerns this is a

00:14:34,990 --> 00:14:39,490
definition of dependency injection it

00:14:37,029 --> 00:14:41,199
comes from a Java library actually so

00:14:39,490 --> 00:14:45,250
dependency injection is where components

00:14:41,199 --> 00:14:46,930
a component being an object really are

00:14:45,250 --> 00:14:49,569
given their dependency through their

00:14:46,930 --> 00:14:51,699
constructor that's what I've shown you

00:14:49,569 --> 00:14:55,630
but also methods are directly into

00:14:51,699 --> 00:14:57,610
fields properties so there there's three

00:14:55,630 --> 00:15:00,190
different ways to actually inject

00:14:57,610 --> 00:15:03,399
dependencies into your object the first

00:15:00,190 --> 00:15:07,300
one is the constructor injection this is

00:15:03,399 --> 00:15:09,180
probably the most useful injection but

00:15:07,300 --> 00:15:12,670
you can also use some setters or

00:15:09,180 --> 00:15:15,310
directly into properties I don't have

00:15:12,670 --> 00:15:19,480
the last one so that's probably not

00:15:15,310 --> 00:15:22,069
really a good practice in PHP I really

00:15:19,480 --> 00:15:25,800
like the constructor argument

00:15:22,069 --> 00:15:26,490
Injection because your object are usable

00:15:25,800 --> 00:15:29,579
right away

00:15:26,490 --> 00:15:31,110
so when you create a new user object you

00:15:29,579 --> 00:15:32,940
know that you need to inject a storage

00:15:31,110 --> 00:15:34,740
so you can use the user object right

00:15:32,940 --> 00:15:36,990
away if you are using setter injection

00:15:34,740 --> 00:15:40,860
you need to remember to actually call

00:15:36,990 --> 00:15:42,329
the setter before being able to use the

00:15:40,860 --> 00:15:45,389
object so the setter injection is

00:15:42,329 --> 00:15:48,389
interesting for optional dependencies so

00:15:45,389 --> 00:15:52,019
if for instance you want to log when a

00:15:48,389 --> 00:15:54,990
user changes is preferences for instance

00:15:52,019 --> 00:15:56,130
you can inject a logger but as you don't

00:15:54,990 --> 00:15:57,899
want to log in the production

00:15:56,130 --> 00:15:59,730
environment for instance you can use a

00:15:57,899 --> 00:16:01,649
setter injection so if there is one

00:15:59,730 --> 00:16:05,370
logger injected you are using it if not

00:16:01,649 --> 00:16:09,839
you are just doing nothing setter

00:16:05,370 --> 00:16:12,509
injection is also better when you have a

00:16:09,839 --> 00:16:14,639
very long list of dependencies for one

00:16:12,509 --> 00:16:18,029
object instead of having you know tens

00:16:14,639 --> 00:16:20,190
of arguments for the constructor but

00:16:18,029 --> 00:16:22,199
then again it probably means that your

00:16:20,190 --> 00:16:24,630
object is doing too much so it's

00:16:22,199 --> 00:16:26,939
probably a good sign that you need to

00:16:24,630 --> 00:16:31,079
actually couple your you're a bit more

00:16:26,939 --> 00:16:33,600
it's also the only way to actually break

00:16:31,079 --> 00:16:36,360
circular references so if object a

00:16:33,600 --> 00:16:38,939
depend on object B and B depends on a

00:16:36,360 --> 00:16:40,529
you can use you cannot choose a

00:16:38,939 --> 00:16:43,110
constructor injection so you can use

00:16:40,529 --> 00:16:46,279
setter injection but that's very that's

00:16:43,110 --> 00:16:48,810
a very edge case so most of the time

00:16:46,279 --> 00:16:54,720
using constructor injection is is the

00:16:48,810 --> 00:16:57,060
will go okay so this is dependency

00:16:54,720 --> 00:16:58,410
injection um so if you have any question

00:16:57,060 --> 00:17:02,610
at this point if something is not clear

00:16:58,410 --> 00:17:03,990
please please ask any questions now it's

00:17:02,610 --> 00:17:10,610
going to be a bit more complex in a

00:17:03,990 --> 00:17:14,220
minute so it's clear for everyone yes

00:17:10,610 --> 00:17:23,010
that's a yes or yes or no that's a yes

00:17:14,220 --> 00:17:24,600
thank you okay so as you might know I'm

00:17:23,010 --> 00:17:26,549
the creator of symphony so I like to

00:17:24,600 --> 00:17:30,150
create frameworks so let's create a

00:17:26,549 --> 00:17:32,130
small framework a very small one so when

00:17:30,150 --> 00:17:34,110
talking about the web you have a request

00:17:32,130 --> 00:17:34,980
you have a response you have some kind

00:17:34,110 --> 00:17:36,720
of chooser you

00:17:34,980 --> 00:17:38,760
position storage you have some cash you

00:17:36,720 --> 00:17:41,940
have some routing so you have a bunch of

00:17:38,760 --> 00:17:44,549
objects classes and there is how I can

00:17:41,940 --> 00:17:46,380
create marriage more framework so I

00:17:44,549 --> 00:17:49,140
create a request object I create the

00:17:46,380 --> 00:17:53,760
response object the user the care two

00:17:49,140 --> 00:17:55,950
routing and then I'm using them so to be

00:17:53,760 --> 00:17:58,320
able to bootstrap a page I need to

00:17:55,950 --> 00:18:01,260
create those one two three four five six

00:17:58,320 --> 00:18:04,679
different objects and as you can see

00:18:01,260 --> 00:18:07,940
I've used dependency injection here yes

00:18:04,679 --> 00:18:13,169
yes so that's fine

00:18:07,940 --> 00:18:16,169
it works but I don't want to force my

00:18:13,169 --> 00:18:19,169
users so developers using my framework

00:18:16,169 --> 00:18:21,720
to actually copy and paste this piece of

00:18:19,169 --> 00:18:23,720
code on every single page so I need to

00:18:21,720 --> 00:18:28,380
abstract that into something that is

00:18:23,720 --> 00:18:30,540
easier to use so what I what I've done

00:18:28,380 --> 00:18:33,299
is that I have abstracted that I have

00:18:30,540 --> 00:18:37,110
moved everything into an application

00:18:33,299 --> 00:18:40,049
class right so now it's much easier to

00:18:37,110 --> 00:18:42,600
bootstrap the process just create an

00:18:40,049 --> 00:18:45,390
application and then in the constructor

00:18:42,600 --> 00:18:47,669
everything is actually created right so

00:18:45,390 --> 00:18:49,290
it's much easier for the developer using

00:18:47,669 --> 00:18:51,660
my framework to actually bootstrap the

00:18:49,290 --> 00:18:54,900
page instead of knowing all the details

00:18:51,660 --> 00:18:57,120
about all the object that needs to be

00:18:54,900 --> 00:19:01,230
created I've done everything for them

00:18:57,120 --> 00:19:11,280
into this application class can you spot

00:19:01,230 --> 00:19:13,620
the problem here so basically we are

00:19:11,280 --> 00:19:15,630
back to square one if you have a look at

00:19:13,620 --> 00:19:18,270
the class we are not using dependency

00:19:15,630 --> 00:19:20,190
injection anymore right because the

00:19:18,270 --> 00:19:22,380
creation of all those object are done

00:19:20,190 --> 00:19:27,290
into the constructor of my application

00:19:22,380 --> 00:19:30,870
place so if I want to tweak to tweak the

00:19:27,290 --> 00:19:32,700
configuration of my framework it's not

00:19:30,870 --> 00:19:34,890
possible anymore if I want to change the

00:19:32,700 --> 00:19:37,110
session ID if I want to change the path

00:19:34,890 --> 00:19:39,900
for for the cache it's not possible

00:19:37,110 --> 00:19:42,179
anymore right this is the exact problem

00:19:39,900 --> 00:19:43,200
solved by dependency injection then here

00:19:42,179 --> 00:19:45,840
I'm stopped

00:19:43,200 --> 00:19:48,840
I cannot fix that because the first

00:19:45,840 --> 00:19:51,419
version it was it was not that easy for

00:19:48,840 --> 00:19:54,600
users to actually use my code but it was

00:19:51,419 --> 00:19:56,549
very flexible now by using this

00:19:54,600 --> 00:19:59,879
application class it's much it's it is

00:19:56,549 --> 00:20:06,210
much easier to use my code but it's not

00:19:59,879 --> 00:20:08,789
flexible anymore in this case we need

00:20:06,210 --> 00:20:11,549
what we call a container so a container

00:20:08,789 --> 00:20:14,759
a service a dependency injection

00:20:11,549 --> 00:20:17,580
container in an object that knows how to

00:20:14,759 --> 00:20:21,269
create your objects how to configure

00:20:17,580 --> 00:20:24,450
them it knows about the dependencies of

00:20:21,269 --> 00:20:28,190
all your objects and knows how to create

00:20:24,450 --> 00:20:31,559
and configure them when you need them so

00:20:28,190 --> 00:20:37,259
basically a container is an object able

00:20:31,559 --> 00:20:40,710
to create the graph or of your objects

00:20:37,259 --> 00:20:42,600
that you need in a given application so

00:20:40,710 --> 00:20:44,700
let's have a look at the previous

00:20:42,600 --> 00:20:46,950
example so I have this user class it

00:20:44,700 --> 00:20:49,590
depends on a session storage interface

00:20:46,950 --> 00:20:52,110
one implementation is decision storage

00:20:49,590 --> 00:20:54,929
for instance and I want to be able to

00:20:52,110 --> 00:20:57,960
change the session storage class name

00:20:54,929 --> 00:21:01,590
and also the session name so here I have

00:20:57,960 --> 00:21:04,639
two classes two objects user and session

00:21:01,590 --> 00:21:07,740
storage and two ways to actually

00:21:04,639 --> 00:21:14,639
configure those object the session name

00:21:07,740 --> 00:21:16,860
and a session class so using a container

00:21:14,639 --> 00:21:18,629
so this is a small example using pimple

00:21:16,860 --> 00:21:22,679
pimple is a small dependency injection

00:21:18,629 --> 00:21:25,080
container written in PHP it's about 100

00:21:22,679 --> 00:21:28,230
lines of code so it's not a big library

00:21:25,080 --> 00:21:30,389
this is just one file actually and it's

00:21:28,230 --> 00:21:32,009
enough to actually manage all the

00:21:30,389 --> 00:21:33,499
dependency that you have in your code so

00:21:32,009 --> 00:21:37,320
that's not something that is used by

00:21:33,499 --> 00:21:41,700
Drupal but that's yet another container

00:21:37,320 --> 00:21:45,570
that I wrote so here I create a

00:21:41,700 --> 00:21:47,039
container I create two parameters the

00:21:45,570 --> 00:21:50,220
first one is a session class the second

00:21:47,039 --> 00:21:53,970
one is session name and then I define

00:21:50,220 --> 00:21:57,119
two objects the first one is the user

00:21:53,970 --> 00:21:59,700
class so the definition is done via an

00:21:57,119 --> 00:22:02,220
anonymous function and the second one is

00:21:59,700 --> 00:22:06,480
the definition for decision storage

00:22:02,220 --> 00:22:08,100
so above the line this is about the

00:22:06,480 --> 00:22:10,380
creation of the container so this is a

00:22:08,100 --> 00:22:12,570
description of my objects and how to

00:22:10,380 --> 00:22:14,700
configure them and the second part so

00:22:12,570 --> 00:22:16,860
below the line is how you can use the

00:22:14,700 --> 00:22:20,310
container so as you can as you can see

00:22:16,860 --> 00:22:24,960
if I want to get the user I'm asking the

00:22:20,310 --> 00:22:27,600
user from the container so from a user

00:22:24,960 --> 00:22:29,730
perspective this is exactly the same as

00:22:27,600 --> 00:22:32,850
the very first slide so instead of

00:22:29,730 --> 00:22:35,870
saying new user I'm asking a container

00:22:32,850 --> 00:22:38,790
to give me a user and I don't care about

00:22:35,870 --> 00:22:41,880
the dependencies anymore I don't care if

00:22:38,790 --> 00:22:44,220
the user object as a session storage as

00:22:41,880 --> 00:22:50,040
a dependency I just ask I'm just asking

00:22:44,220 --> 00:22:54,900
for the chooser the user object from the

00:22:50,040 --> 00:22:57,180
container so yeah just to be clear sort

00:22:54,900 --> 00:23:00,630
of before above-the-line

00:22:57,180 --> 00:23:02,520
it is just about configuring the

00:23:00,630 --> 00:23:05,280
dependency injection container so

00:23:02,520 --> 00:23:08,400
describing the relationships between all

00:23:05,280 --> 00:23:11,040
the objects so above the line there is

00:23:08,400 --> 00:23:12,780
nothing created so there is no user

00:23:11,040 --> 00:23:15,690
object there is no session storage and

00:23:12,780 --> 00:23:19,140
the very first time I'm asking for a

00:23:15,690 --> 00:23:21,630
user then a container is actually

00:23:19,140 --> 00:23:23,310
creating a user object it knows that to

00:23:21,630 --> 00:23:25,800
create to be able to create a user it

00:23:23,310 --> 00:23:27,930
needs a session search so it creates a

00:23:25,800 --> 00:23:31,320
user session storage first getting a

00:23:27,930 --> 00:23:34,230
session name returning it and then and

00:23:31,320 --> 00:23:37,290
the user object can be created so I have

00:23:34,230 --> 00:23:42,180
abstracted how to create how the objects

00:23:37,290 --> 00:23:45,780
that I have in my application so some

00:23:42,180 --> 00:23:50,130
rules about containers the first one

00:23:45,780 --> 00:23:51,900
very important one objects must not be

00:23:50,130 --> 00:23:56,130
aware of the container so never ever

00:23:51,900 --> 00:23:58,470
inject the container into your objects

00:23:56,130 --> 00:24:05,340
if you are doing that you are using a

00:23:58,470 --> 00:24:09,180
container the wrong way so each object

00:24:05,340 --> 00:24:12,930
each each class should be aware of their

00:24:09,180 --> 00:24:14,690
dependencies but should not be aware of

00:24:12,930 --> 00:24:17,810
the container

00:24:14,690 --> 00:24:20,030
that's easy to understand if you are

00:24:17,810 --> 00:24:22,190
injecting a container it's much more

00:24:20,030 --> 00:24:24,260
complex to actually replace the

00:24:22,190 --> 00:24:26,540
implementation of one of the dependency

00:24:24,260 --> 00:24:28,670
when you are doing testing for instance

00:24:26,540 --> 00:24:30,890
and then if you are injecting the

00:24:28,670 --> 00:24:33,710
container you don't you do not really

00:24:30,890 --> 00:24:37,040
know which dependencies are going to be

00:24:33,710 --> 00:24:41,180
used within the object and of course you

00:24:37,040 --> 00:24:42,710
are coupling your domain objects to the

00:24:41,180 --> 00:24:45,050
container that you can that you are

00:24:42,710 --> 00:24:47,120
using so you will not be able to replace

00:24:45,050 --> 00:24:49,760
the container with another

00:24:47,120 --> 00:24:52,550
implementation so object must not be

00:24:49,760 --> 00:24:55,310
aware of the container which means that

00:24:52,550 --> 00:24:58,400
a container is able to manage any Petri

00:24:55,310 --> 00:25:00,680
objects you don't need anything special

00:24:58,400 --> 00:25:03,160
to support a container of course your

00:25:00,680 --> 00:25:09,350
classes should use dependency injection

00:25:03,160 --> 00:25:10,880
but that's all yeah so never ever inject

00:25:09,350 --> 00:25:17,540
a container into your objects there are

00:25:10,880 --> 00:25:21,110
some exceptions for instance if you want

00:25:17,540 --> 00:25:23,090
to lazy load a dependency so when I

00:25:21,110 --> 00:25:24,620
create a user object

00:25:23,090 --> 00:25:26,150
I need a session storage which means

00:25:24,620 --> 00:25:28,250
that to be able to create a user object

00:25:26,150 --> 00:25:31,700
I need to create a session storage even

00:25:28,250 --> 00:25:34,130
if I don't need it now which means that

00:25:31,700 --> 00:25:35,780
if you don't use the user setter for

00:25:34,130 --> 00:25:38,960
instance if you don't set the language

00:25:35,780 --> 00:25:41,540
you will have created a decision storage

00:25:38,960 --> 00:25:44,570
without choosing it so that's a waste of

00:25:41,540 --> 00:25:46,130
resources and sometimes if we are

00:25:44,570 --> 00:25:48,830
talking about a connection to a database

00:25:46,130 --> 00:25:52,610
if we are talking about an object that

00:25:48,830 --> 00:25:55,820
calls a web service at construction time

00:25:52,610 --> 00:26:00,740
of or whatever it can be really a V in

00:25:55,820 --> 00:26:03,770
this case is a good the only way to

00:26:00,740 --> 00:26:05,270
actually do that is to inject the

00:26:03,770 --> 00:26:06,500
container so you just inject the

00:26:05,270 --> 00:26:09,020
container which is just about the

00:26:06,500 --> 00:26:11,060
description of the dependencies and the

00:26:09,020 --> 00:26:12,950
very first time you need to actually use

00:26:11,060 --> 00:26:15,260
the session storage you get it from the

00:26:12,950 --> 00:26:22,340
container so this is how you can lazy

00:26:15,260 --> 00:26:24,680
load object if you need to so I won't

00:26:22,340 --> 00:26:26,000
talk about that too but if you are using

00:26:24,680 --> 00:26:26,970
the symphony dependency injection

00:26:26,000 --> 00:26:28,770
container

00:26:26,970 --> 00:26:30,840
there is another way to actually lazy

00:26:28,770 --> 00:26:32,159
load the dependency so you don't need to

00:26:30,840 --> 00:26:33,870
inject the container to do that with

00:26:32,159 --> 00:26:37,669
with Symphony the recent versions of

00:26:33,870 --> 00:26:41,309
system Symphony okay

00:26:37,669 --> 00:26:46,470
so something else a container does not

00:26:41,309 --> 00:26:50,669
manage all your objects far from it so a

00:26:46,470 --> 00:26:55,340
container manages global objects so what

00:26:50,669 --> 00:27:01,559
we call services so an object that is

00:26:55,340 --> 00:27:04,830
sending emails is a good case so it all

00:27:01,559 --> 00:27:08,159
the objects that you need only one

00:27:04,830 --> 00:27:12,210
instance off so a database connection is

00:27:08,159 --> 00:27:15,210
good example a user when we are talking

00:27:12,210 --> 00:27:18,630
about an HTTP request you you're going

00:27:15,210 --> 00:27:20,280
to have only one user a request for

00:27:18,630 --> 00:27:23,760
instance a logger for instance is good

00:27:20,280 --> 00:27:25,730
example but the container is not

00:27:23,760 --> 00:27:29,700
something that you want to use for your

00:27:25,730 --> 00:27:33,179
model object so a product a blog post an

00:27:29,700 --> 00:27:39,360
article they cannot be managed by a

00:27:33,179 --> 00:27:41,039
container or so okay so remember most of

00:27:39,360 --> 00:27:43,470
the time you don't need a container to

00:27:41,039 --> 00:27:45,390
use dependency injection you can use

00:27:43,470 --> 00:27:48,059
dependency injection today without any

00:27:45,390 --> 00:27:51,630
container but as soon as you need to

00:27:48,059 --> 00:27:53,610
manage a large number of objects then

00:27:51,630 --> 00:27:58,080
it's nice to be able to wrap everything

00:27:53,610 --> 00:27:59,700
with a container okay so that's all for

00:27:58,080 --> 00:28:02,240
dependency injection and what a

00:27:59,700 --> 00:28:05,820
container is now I'm going to talk about

00:28:02,240 --> 00:28:08,640
the implementation in symphony and again

00:28:05,820 --> 00:28:12,900
this is what Drupal version 8 is going

00:28:08,640 --> 00:28:15,299
to use for managing all the dependencies

00:28:12,900 --> 00:28:17,940
and all the object you couple objects of

00:28:15,299 --> 00:28:22,020
deployment so I have some small examples

00:28:17,940 --> 00:28:24,600
here so this is an example of how you

00:28:22,020 --> 00:28:27,390
can configure the container so the

00:28:24,600 --> 00:28:32,120
symphony dependency injection container

00:28:27,390 --> 00:28:34,260
can be configured via PHP or XML or

00:28:32,120 --> 00:28:36,270
general files so here you have an

00:28:34,260 --> 00:28:38,390
example this is a general files and in

00:28:36,270 --> 00:28:42,350
Drupal

00:28:38,390 --> 00:28:46,190
all the the container description is

00:28:42,350 --> 00:28:50,750
done via general facts so the first line

00:28:46,190 --> 00:28:52,700
air is the name of the the object that

00:28:50,750 --> 00:28:59,000
you want to store into the container and

00:28:52,700 --> 00:29:01,670
there is only one required attribute

00:28:59,000 --> 00:29:05,930
which is the class name so that when you

00:29:01,670 --> 00:29:08,390
want to get JSON theorization object and

00:29:05,930 --> 00:29:11,150
the container knows how to create so it

00:29:08,390 --> 00:29:18,860
just instantiate the json class from

00:29:11,150 --> 00:29:20,720
this namespace from this definition the

00:29:18,860 --> 00:29:23,420
the symphony container is actually

00:29:20,720 --> 00:29:27,860
working in two different ways the first

00:29:23,420 --> 00:29:30,140
one is by actually creating everything

00:29:27,860 --> 00:29:33,550
on the fly which means that it reads the

00:29:30,140 --> 00:29:37,610
Yemen file and then it introspect

00:29:33,550 --> 00:29:42,530
all the arguments and creates the object

00:29:37,610 --> 00:29:47,600
on the fly the second one is by building

00:29:42,530 --> 00:29:50,300
a PHP class and optimizing how to create

00:29:47,600 --> 00:29:54,650
other services so that's how it's done

00:29:50,300 --> 00:29:56,060
in in Drupal so based on all the

00:29:54,650 --> 00:29:58,700
configuration that you've done for the

00:29:56,060 --> 00:30:01,120
container Symphony is actually going to

00:29:58,700 --> 00:30:04,430
dump a PHP class representing your

00:30:01,120 --> 00:30:08,800
configuration able to create your object

00:30:04,430 --> 00:30:12,860
so this is how symphony is going to dump

00:30:08,800 --> 00:30:17,060
or to convert your configuration file to

00:30:12,860 --> 00:30:19,550
PHP so there is a production function

00:30:17,060 --> 00:30:22,700
method which is going to be called if

00:30:19,550 --> 00:30:25,910
you call container get and name service

00:30:22,700 --> 00:30:27,200
agent Jason and as you can see this is

00:30:25,910 --> 00:30:30,020
pretty straightforward

00:30:27,200 --> 00:30:31,970
there is no overhead you know using the

00:30:30,020 --> 00:30:35,810
container this way there is no overhead

00:30:31,970 --> 00:30:38,450
if you would have created the dependency

00:30:35,810 --> 00:30:40,970
yourself you you would have written the

00:30:38,450 --> 00:30:45,020
exact same code so you return a new

00:30:40,970 --> 00:30:47,300
instance of the JSON object or there is

00:30:45,020 --> 00:30:49,820
something I forgot to mention so as a

00:30:47,300 --> 00:30:52,970
container is

00:30:49,820 --> 00:30:56,960
mostly managing global objects object

00:30:52,970 --> 00:31:01,039
that you need only one instance of by

00:30:56,960 --> 00:31:04,820
default if you are not configuring it in

00:31:01,039 --> 00:31:07,369
any other way by default you always get

00:31:04,820 --> 00:31:09,229
the same instance of the object so every

00:31:07,369 --> 00:31:11,539
time I'm calling this method I'm going

00:31:09,229 --> 00:31:13,999
to have the same instance of the JSON

00:31:11,539 --> 00:31:18,460
class right that's why we are actually

00:31:13,999 --> 00:31:23,169
storing the instance into this property

00:31:18,460 --> 00:31:25,369
of course we can manage arguments

00:31:23,169 --> 00:31:28,729
constructor arguments so this is another

00:31:25,369 --> 00:31:31,749
example from Drupal 8 you can see that

00:31:28,729 --> 00:31:35,320
we take one argument and the add

00:31:31,749 --> 00:31:40,519
convention means that we want to inject

00:31:35,320 --> 00:31:43,519
the key value dependency into the state

00:31:40,519 --> 00:31:45,139
object so somewheres in the

00:31:43,519 --> 00:31:47,899
configuration there is another object

00:31:45,139 --> 00:31:50,119
with the key value name and the key

00:31:47,899 --> 00:31:52,909
value name and the key value object is

00:31:50,119 --> 00:31:55,220
configured there so if you want to get a

00:31:52,909 --> 00:31:57,499
state object from the container the

00:31:55,220 --> 00:31:59,419
first thing Sintra is going to do is to

00:31:57,499 --> 00:32:02,809
create a key value 1 to be able to

00:31:59,419 --> 00:32:04,960
inject it into the state constructor and

00:32:02,809 --> 00:32:08,179
as you can see this is how it's done

00:32:04,960 --> 00:32:11,599
so we create a new state instance and

00:32:08,179 --> 00:32:13,729
then we get a new key value object to be

00:32:11,599 --> 00:32:15,639
able to inject it so again this is

00:32:13,729 --> 00:32:19,940
exactly what you would have done

00:32:15,639 --> 00:32:26,989
yourself if you want to create a state

00:32:19,940 --> 00:32:30,549
object okay so this is yet another

00:32:26,989 --> 00:32:32,840
example so here the module under

00:32:30,549 --> 00:32:36,200
constructor takes two arguments the

00:32:32,840 --> 00:32:39,470
first one is a list of modules and

00:32:36,200 --> 00:32:43,070
second one is an instance of - bootstrap

00:32:39,470 --> 00:32:46,909
so the first one is actually the

00:32:43,070 --> 00:32:48,889
convention to be able to make it a

00:32:46,909 --> 00:32:52,070
parameter which means that container

00:32:48,889 --> 00:32:54,919
that modules is actually a value that is

00:32:52,070 --> 00:32:58,129
configured that is set elsewhere in a

00:32:54,919 --> 00:33:01,970
Drupal code so it's not this string that

00:32:58,129 --> 00:33:02,930
is going to be injected into the module

00:33:01,970 --> 00:33:06,380
and learn

00:33:02,930 --> 00:33:10,430
but the value of this parameter on the

00:33:06,380 --> 00:33:14,570
container so you can make things more

00:33:10,430 --> 00:33:16,760
complex so here we have some class we

00:33:14,570 --> 00:33:20,230
have some arguments and the last two

00:33:16,760 --> 00:33:25,460
lines is how you can inject dependencies

00:33:20,230 --> 00:33:29,510
with setters methods so here the URL

00:33:25,460 --> 00:33:32,780
generator is actually taking a bunch of

00:33:29,510 --> 00:33:34,490
arguments and then after the object is

00:33:32,780 --> 00:33:36,380
created Symphony is going to call the

00:33:34,490 --> 00:33:41,600
set request method and the set context

00:33:36,380 --> 00:33:44,000
method with those other services and

00:33:41,600 --> 00:33:48,830
this is Heights compelled by the

00:33:44,000 --> 00:33:50,390
symphony container yeah I'm not going to

00:33:48,830 --> 00:33:52,310
talk about that too much but as you can

00:33:50,390 --> 00:33:55,370
see we create the object and then we

00:33:52,310 --> 00:33:58,250
inject some other dependency that with

00:33:55,370 --> 00:34:03,890
the request one and request context one

00:33:58,250 --> 00:34:06,200
they are methods actually the slides are

00:34:03,890 --> 00:34:07,850
a bit also I think it's it's I'm pretty

00:34:06,200 --> 00:34:12,770
sure it it's very different now if you

00:34:07,850 --> 00:34:16,190
have a look at droid there is another

00:34:12,770 --> 00:34:18,110
way so sometimes instead of calling the

00:34:16,190 --> 00:34:21,620
constructor you can have some kind of

00:34:18,110 --> 00:34:24,680
factories so a factory is an object able

00:34:21,620 --> 00:34:27,110
to create other objects right so air to

00:34:24,680 --> 00:34:29,630
be able to create a database connection

00:34:27,110 --> 00:34:32,000
we are not instantiating the connection

00:34:29,630 --> 00:34:34,520
class directly instead we are calling a

00:34:32,000 --> 00:34:37,280
static method get connection on a

00:34:34,520 --> 00:34:39,470
database class

00:34:37,280 --> 00:34:46,190
so this is how you can do that with a

00:34:39,470 --> 00:34:53,360
factory and this is how it's converted

00:34:46,190 --> 00:34:55,760
to plain PHP and of course so here you

00:34:53,360 --> 00:34:58,670
have a database slave so this is the

00:34:55,760 --> 00:35:01,100
exact same definition as before so using

00:34:58,670 --> 00:35:03,110
the same factory but different arguments

00:35:01,100 --> 00:35:05,630
so this connection class is probably

00:35:03,110 --> 00:35:08,980
going to return a different object based

00:35:05,630 --> 00:35:08,980
on the arguments

00:35:09,620 --> 00:35:17,700
you can create an object via factory

00:35:15,540 --> 00:35:19,950
that is actually service so instead of a

00:35:17,700 --> 00:35:21,980
factory class here I'm using a factory

00:35:19,950 --> 00:35:26,910
service so again this is an example in

00:35:21,980 --> 00:35:30,570
in Drupal so we have a cache factory

00:35:26,910 --> 00:35:33,210
service which is defined elsewhere in

00:35:30,570 --> 00:35:34,920
Drupal and then we call we are calling

00:35:33,210 --> 00:35:36,720
the get method with the default argument

00:35:34,920 --> 00:35:38,940
it's going to return a cache back-end

00:35:36,720 --> 00:35:46,140
interface object so that's the cache

00:35:38,940 --> 00:35:50,360
default object okay we also have what we

00:35:46,140 --> 00:35:55,320
call aliases so Elias is a way to rename

00:35:50,360 --> 00:35:57,750
a service to another name so so

00:35:55,320 --> 00:35:59,970
sometimes like for the database

00:35:57,750 --> 00:36:02,310
connections you have several different

00:35:59,970 --> 00:36:04,200
connections with names but there is a

00:36:02,310 --> 00:36:06,870
default one and you want to name a

00:36:04,200 --> 00:36:08,130
default one connection a short name so

00:36:06,870 --> 00:36:10,380
you can use an alias

00:36:08,130 --> 00:36:13,680
so error for instance when you get the

00:36:10,380 --> 00:36:16,650
config that storage object it actually

00:36:13,680 --> 00:36:19,740
gets the config that storage that active

00:36:16,650 --> 00:36:21,930
service so from a user perspective you

00:36:19,740 --> 00:36:23,880
are only using the config storage but

00:36:21,930 --> 00:36:29,270
behind the scene we can easily switch

00:36:23,880 --> 00:36:29,270
from one storage strategy to another one

00:36:31,640 --> 00:36:40,620
okay yeah so when using aliases like

00:36:37,500 --> 00:36:42,330
this you don't want our your user to use

00:36:40,620 --> 00:36:44,580
the country that storage that active you

00:36:42,330 --> 00:36:48,900
want your user to actually use the

00:36:44,580 --> 00:36:51,330
config that storage service directly so

00:36:48,900 --> 00:36:53,880
the config that storage that active

00:36:51,330 --> 00:36:56,460
should be private and that's possible if

00:36:53,880 --> 00:36:59,300
I say public force it means that the

00:36:56,460 --> 00:37:02,550
conflict that storage that active

00:36:59,300 --> 00:37:04,650
service is going to be created by the

00:37:02,550 --> 00:37:06,930
container but you can't get it from the

00:37:04,650 --> 00:37:14,970
outside so it's only available for

00:37:06,930 --> 00:37:17,490
injection into other services the last

00:37:14,970 --> 00:37:19,470
time I look at these I think that the

00:37:17,490 --> 00:37:22,030
public force was not there so that's

00:37:19,470 --> 00:37:26,710
something that should be fixed in Drupal

00:37:22,030 --> 00:37:30,400
if it's not already done it's it's kind

00:37:26,710 --> 00:37:33,190
of important because when you set public

00:37:30,400 --> 00:37:35,220
falls it means that we know that nobody

00:37:33,190 --> 00:37:37,450
is going to get it from the container

00:37:35,220 --> 00:37:40,150
which means that Symphony is going to

00:37:37,450 --> 00:37:42,310
optimize the code even more and then you

00:37:40,150 --> 00:37:44,830
can do when public is true so whenever

00:37:42,310 --> 00:37:47,500
you can set public force it's a great

00:37:44,830 --> 00:37:52,440
way to optimize the dumped container and

00:37:47,500 --> 00:37:58,660
the PHP one okay we also have some

00:37:52,440 --> 00:38:01,390
abstract services this one is not a very

00:37:58,660 --> 00:38:04,150
good example it's a very bad one

00:38:01,390 --> 00:38:07,450
actually because can cities so an

00:38:04,150 --> 00:38:09,220
abstract an abstract service is a

00:38:07,450 --> 00:38:13,090
service that you can use as a template

00:38:09,220 --> 00:38:15,369
for other services so here when I want

00:38:13,090 --> 00:38:18,490
to create a service that actually means

00:38:15,369 --> 00:38:21,220
the service container as a dependency

00:38:18,490 --> 00:38:25,200
which is really bad I can just enter it

00:38:21,220 --> 00:38:27,910
from this container that straight

00:38:25,200 --> 00:38:30,790
abstract service so the way you can do

00:38:27,910 --> 00:38:32,800
that is by using parent so here I have a

00:38:30,790 --> 00:38:34,540
logger factory and the parent is the

00:38:32,800 --> 00:38:36,580
container thread which means that it's

00:38:34,540 --> 00:38:41,410
going to call set container and inject

00:38:36,580 --> 00:38:48,609
the container into this object so should

00:38:41,410 --> 00:38:51,190
also probably fixed in Drupal okay if

00:38:48,609 --> 00:38:54,450
you have a look at Drupal you can get

00:38:51,190 --> 00:38:57,040
services from the container via those

00:38:54,450 --> 00:38:58,630
different possibilities so you can call

00:38:57,040 --> 00:39:02,050
Drupal get container to get the

00:38:58,630 --> 00:39:06,940
container and then get any service or

00:39:02,050 --> 00:39:12,450
there is the service method as well or

00:39:06,940 --> 00:39:15,460
some shortcuts like URL generator again

00:39:12,450 --> 00:39:18,640
please refrain from using those

00:39:15,460 --> 00:39:20,740
shortcuts it's much better if possible

00:39:18,640 --> 00:39:23,380
to actually inject the dependency

00:39:20,740 --> 00:39:25,390
instead of relying on those shortcuts

00:39:23,380 --> 00:39:28,540
they are really practical because it

00:39:25,390 --> 00:39:31,839
means that whenever you are in your code

00:39:28,540 --> 00:39:34,750
you can just get some services from the

00:39:31,839 --> 00:39:36,250
container but remember it's always much

00:39:34,750 --> 00:39:43,560
better to be able to inject

00:39:36,250 --> 00:39:52,180
instead of relying on the container okay

00:39:43,560 --> 00:39:54,220
okay okay okay so I've just talked about

00:39:52,180 --> 00:39:56,800
the basics about the symphony in

00:39:54,220 --> 00:39:59,740
dependency injection container today I

00:39:56,800 --> 00:40:03,040
won't talk about more advanced topics

00:39:59,740 --> 00:40:07,300
because if you are using Drupal you're

00:40:03,040 --> 00:40:11,230
not going to use those on a regular

00:40:07,300 --> 00:40:14,950
basis I think you will never ever create

00:40:11,230 --> 00:40:17,980
a compiler pass yourself probably not

00:40:14,950 --> 00:40:26,260
you will probably use tags tags is a way

00:40:17,980 --> 00:40:29,500
to inject okay so yeah difficult so what

00:40:26,260 --> 00:40:32,620
is the tag you can tag some services so

00:40:29,500 --> 00:40:35,020
a tag is just name for instance we have

00:40:32,620 --> 00:40:38,890
a tag to say this is a kernel listener

00:40:35,020 --> 00:40:45,670
for instance or this is a twig extension

00:40:38,890 --> 00:40:48,520
and when so let's let's say let's say

00:40:45,670 --> 00:40:50,140
that we have some trig extensions so we

00:40:48,520 --> 00:40:52,170
have the twig environment the twig

00:40:50,140 --> 00:40:56,500
environment is the main object

00:40:52,170 --> 00:40:59,530
responsible for actually rendering the

00:40:56,500 --> 00:41:02,050
templates and you can add some

00:40:59,530 --> 00:41:08,020
extensions extensions to add some

00:41:02,050 --> 00:41:10,720
filters some tags whatever but as a twig

00:41:08,020 --> 00:41:15,600
environment is an object managed by the

00:41:10,720 --> 00:41:20,350
container how can I inject some external

00:41:15,600 --> 00:41:22,060
third-party or custom extensions so you

00:41:20,350 --> 00:41:26,950
need a way to be able to do that and

00:41:22,060 --> 00:41:28,810
that's what tags are for so you create

00:41:26,950 --> 00:41:31,510
your service the service is the

00:41:28,810 --> 00:41:34,210
extension that you want register and you

00:41:31,510 --> 00:41:37,770
add the twig tag and just by adding a

00:41:34,210 --> 00:41:41,440
twig tag Symphony is going to be able to

00:41:37,770 --> 00:41:44,290
get a listing of all and the services

00:41:41,440 --> 00:41:46,360
tagged with the twig tag and inject

00:41:44,290 --> 00:41:49,420
those extensions into the twig

00:41:46,360 --> 00:41:52,569
environment so that that's how you can

00:41:49,420 --> 00:41:55,930
and easily make the injection

00:41:52,569 --> 00:41:57,940
configurable from the outside and lazy

00:41:55,930 --> 00:42:00,460
services I've talked about lazy services

00:41:57,940 --> 00:42:02,589
before so it's available as of sinfully

00:42:00,460 --> 00:42:04,720
2.4 which means that it's available in

00:42:02,589 --> 00:42:07,150
in Drupal and that's a great way to

00:42:04,720 --> 00:42:13,180
avoid injecting that the container if

00:42:07,150 --> 00:42:16,359
you have some performance problems ok so

00:42:13,180 --> 00:42:20,380
that's all for today if you have any

00:42:16,359 --> 00:42:22,180
questions about dependency injection the

00:42:20,380 --> 00:42:27,010
container that we have in Symphony or

00:42:22,180 --> 00:42:29,440
Drupal 8 usage of the container the free

00:42:27,010 --> 00:42:32,670
to ask yeah so I think there is a

00:42:29,440 --> 00:42:32,670
microphone somewhere

00:42:38,490 --> 00:42:44,310
so we use a dynamic dependency injection

00:42:41,970 --> 00:42:50,670
a lot in grouper because we are using

00:42:44,310 --> 00:42:52,650
plugins I'm here right here so for

00:42:50,670 --> 00:42:55,530
example we have to access API in Drupal

00:42:52,650 --> 00:42:57,869
and developers extend that by

00:42:55,530 --> 00:42:59,820
implementing an action plug-in and of

00:42:57,869 --> 00:43:01,650
course the the action API doesn't know

00:42:59,820 --> 00:43:03,780
what the plug-in has to receive as

00:43:01,650 --> 00:43:06,330
dependencies so what we are using in

00:43:03,780 --> 00:43:08,970
Drupal is having a static create method

00:43:06,330 --> 00:43:11,550
that receives the container and then

00:43:08,970 --> 00:43:13,140
picks out whatever services it needs for

00:43:11,550 --> 00:43:15,720
example that action might want to send

00:43:13,140 --> 00:43:17,010
out an email so pick out the email

00:43:15,720 --> 00:43:18,810
service from the container and then

00:43:17,010 --> 00:43:21,180
invoke the constructor with all this

00:43:18,810 --> 00:43:23,130
arguments it needs I don't know where

00:43:21,180 --> 00:43:26,820
that pattern came from is that something

00:43:23,130 --> 00:43:28,890
you're doing in Symphony as well oh yeah

00:43:26,820 --> 00:43:30,930
we have to do that in group because we

00:43:28,890 --> 00:43:32,810
don't know beforehand what dependencies

00:43:30,930 --> 00:43:39,150
will be needed because we are so dynamic

00:43:32,810 --> 00:43:41,220
yeah yeah I don't know that part of the

00:43:39,150 --> 00:43:44,490
code that well so it's been difficult to

00:43:41,220 --> 00:43:48,390
answer but tags and compiler passes are

00:43:44,490 --> 00:43:52,619
probably one way I'm not sure it's going

00:43:48,390 --> 00:43:54,869
to work in your specific case but the

00:43:52,619 --> 00:43:57,690
main idea would be yeah yeah because

00:43:54,869 --> 00:44:01,130
what you are injecting is actually not

00:43:57,690 --> 00:44:05,369
you are not injecting services right

00:44:01,130 --> 00:44:08,160
because those objects have parameters

00:44:05,369 --> 00:44:11,430
they can have you can have more than one

00:44:08,160 --> 00:44:14,160
instances of those objects is that

00:44:11,430 --> 00:44:17,040
correct yes so the objects themselves

00:44:14,160 --> 00:44:20,010
are appliance actually I saw the code

00:44:17,040 --> 00:44:23,250
and the first time I saw the car

00:44:20,010 --> 00:44:26,339
that's only it's not possible and then I

00:44:23,250 --> 00:44:28,830
understood why you're doing that and

00:44:26,339 --> 00:44:32,730
honestly I don't have any better

00:44:28,830 --> 00:44:35,670
solution so it looks good enough yeah I

00:44:32,730 --> 00:44:39,450
mean good enough is enough

00:44:35,670 --> 00:44:44,700
oh yeah that that's something very

00:44:39,450 --> 00:44:48,990
important design patterns and best

00:44:44,700 --> 00:44:51,240
practices are great but you can break

00:44:48,990 --> 00:44:57,990
them you can you know escape from them

00:44:51,240 --> 00:45:01,799
that's that's fine is to store instances

00:44:57,990 --> 00:45:04,260
of objects yeah so what if I want to you

00:45:01,799 --> 00:45:07,890
know keep an instance in multiple

00:45:04,260 --> 00:45:11,450
requests you keep an instance in

00:45:07,890 --> 00:45:14,160
multiple requests Drupal use

00:45:11,450 --> 00:45:16,530
serialization for that and there is a

00:45:14,160 --> 00:45:19,079
big problem with that so when you're

00:45:16,530 --> 00:45:21,980
talking about several requests you are

00:45:19,079 --> 00:45:25,280
talking about several HTTP requests or

00:45:21,980 --> 00:45:30,299
several requests within one HTML request

00:45:25,280 --> 00:45:32,910
several requests so you store you

00:45:30,299 --> 00:45:35,520
serialized objects from one request to

00:45:32,910 --> 00:45:42,059
the next one yes that's correct yes and

00:45:35,520 --> 00:45:45,799
why well in form submission and Drupal

00:45:42,059 --> 00:45:49,290
have a form component in which we store

00:45:45,799 --> 00:45:54,589
the ultra channel request and originally

00:45:49,290 --> 00:45:57,240
input by the user to next request okay

00:45:54,589 --> 00:45:59,760
but that's that's kind of independent

00:45:57,240 --> 00:46:02,160
from the container because the container

00:45:59,760 --> 00:46:05,849
is really about all the global object so

00:46:02,160 --> 00:46:07,829
object that do not depend on what is

00:46:05,849 --> 00:46:11,040
submitted by the user so it should not

00:46:07,829 --> 00:46:12,510
be it should not be depending on the

00:46:11,040 --> 00:46:14,819
request for instance so that's something

00:46:12,510 --> 00:46:17,690
that we fix in symphony and that was

00:46:14,819 --> 00:46:20,970
fixed also in Drupal 8 the request

00:46:17,690 --> 00:46:23,099
coming from the user is actually not a

00:46:20,970 --> 00:46:26,880
service right so that's why we have the

00:46:23,099 --> 00:46:30,839
request stack object now so if if you

00:46:26,880 --> 00:46:33,210
are servicing the object that represent

00:46:30,839 --> 00:46:34,920
what the user is a minute that's fine I

00:46:33,210 --> 00:46:36,390
mean that's a totally different concern

00:46:34,920 --> 00:46:41,720
so it's not something that you can store

00:46:36,390 --> 00:46:41,720
in the container anyway so thank you

00:46:44,400 --> 00:46:47,880
any other questions

00:46:49,830 --> 00:46:58,380
okay so just a small one more thing if

00:46:55,050 --> 00:47:02,130
you are doing Drupal 8 and you're

00:46:58,380 --> 00:47:06,540
probably developing a Drupal apps and

00:47:02,130 --> 00:47:09,840
I've been working on a profiler for the

00:47:06,540 --> 00:47:12,720
last six months or so and I've created

00:47:09,840 --> 00:47:13,380
Drupal extension so if you want to give

00:47:12,720 --> 00:47:17,100
it a try

00:47:13,380 --> 00:47:19,260
and give me some feedback it could be

00:47:17,100 --> 00:47:22,620
really good for me so this is propeller

00:47:19,260 --> 00:47:26,010
like exit pro-4x debug slightly

00:47:22,620 --> 00:47:28,530
different with a different UI so if you

00:47:26,010 --> 00:47:32,460
want to give it a go it's free we are in

00:47:28,530 --> 00:47:34,820
private beta so yeah that's all thank

00:47:32,460 --> 00:47:34,820

YouTube URL: https://www.youtube.com/watch?v=GF0EWdsPfZ4


