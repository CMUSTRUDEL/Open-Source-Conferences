Title: DrupalCon Amsterdam 2014: The Case (or not) for PostgreSQL
Publication date: 2014-09-30
Playlist: DrupalCon Amsterdam - September 2014
Description: 
	Speakers: mradcliffe
PostgreSQL is an open-source database, which implements ANSI SQL standards closely. As a community, we support running Drupal on PostgreSQL. Over the past several years I made a commitment to try my best to learn PostgreSQL as a MySQL user in contrib.

However all is not well.

The pgsql (and sqlite) database driver support has always been spotty in core and contrib. The majority of Drupal web sites are run off the mysql driver, and many do not see the need to maintain support for alternative databases which implement SQL (or nosql).

I will talk about and show the state of the pgsql driver including:

What it would take to move pgsql out of core and what are the implications for the future of Drupal;
Or what it would take to maintain pgsql in Drupal 8 and beyond including mention of current issues and initiatives such as the testbot improvements;

Note

Drupal 8 is evolving and decisions are made every week. If as a community we move forward with pgsql, this session will still be relevant although the session description will be updated to reflect changes in topic or direction.
Captions: 
	00:00:00,530 --> 00:00:06,420
so it's a it's great to be here my name

00:00:04,319 --> 00:00:09,660
is Matthew Radcliffe and Radcliffe on

00:00:06,420 --> 00:00:12,210
drupal.org a little bit about myself I

00:00:09,660 --> 00:00:14,099
was first introduced to the postgres

00:00:12,210 --> 00:00:21,029
sequel database management system with

00:00:14,099 --> 00:00:22,650
pro stress c28 distracting sorry I've

00:00:21,029 --> 00:00:25,529
been around the community for several

00:00:22,650 --> 00:00:27,359
years you may have seen me around at

00:00:25,529 --> 00:00:29,550
some triple cons and the North America I

00:00:27,359 --> 00:00:32,880
was at Munich but generally can I keep

00:00:29,550 --> 00:00:36,390
to myself so I first introduced with

00:00:32,880 --> 00:00:41,280
postgres CQ 18 and doing an ERP

00:00:36,390 --> 00:00:43,649
migration from Oracle aid in 2007 I it

00:00:41,280 --> 00:00:45,360
really influenced me at that point as to

00:00:43,649 --> 00:00:47,940
start taking into consideration other

00:00:45,360 --> 00:00:50,610
database management systems and so in

00:00:47,940 --> 00:00:53,010
when I approached the drupal module

00:00:50,610 --> 00:00:55,559
development I tried my best to support

00:00:53,010 --> 00:00:58,020
as many database management systems as

00:00:55,559 --> 00:01:00,449
possible I concern myself a hobbyist

00:00:58,020 --> 00:01:05,040
contributor when it comes to PG sequel

00:01:00,449 --> 00:01:08,189
and postgres equal I'm not a database

00:01:05,040 --> 00:01:12,330
administrator but I've learned a lot

00:01:08,189 --> 00:01:14,700
just with hacking encore over the years

00:01:12,330 --> 00:01:17,880
it is my first time to speak at a large

00:01:14,700 --> 00:01:19,740
conference I don't often get up to speak

00:01:17,880 --> 00:01:23,850
I prefer to kind of sit back in the

00:01:19,740 --> 00:01:25,369
background and code but this this

00:01:23,850 --> 00:01:30,360
discussion needed to be hat again so

00:01:25,369 --> 00:01:35,100
here we go try my best this session this

00:01:30,360 --> 00:01:38,460
core conversation is gonna go as follows

00:01:35,100 --> 00:01:39,960
will briefly review the past I'll say

00:01:38,460 --> 00:01:42,000
briefly because we don't want to i get

00:01:39,960 --> 00:01:45,509
hung up on on the past situations and

00:01:42,000 --> 00:01:49,380
then detail what the current situation

00:01:45,509 --> 00:01:53,310
is with the PG sequel driver for people

00:01:49,380 --> 00:01:55,649
who want to work on things now and and

00:01:53,310 --> 00:01:59,430
so go over the issues and then we'll

00:01:55,649 --> 00:02:03,329
look at reviewing options for removing

00:01:59,430 --> 00:02:04,770
from core and and then finally at that

00:02:03,329 --> 00:02:06,979
point I'd like to open up the

00:02:04,770 --> 00:02:09,119
conversation to looking at the future of

00:02:06,979 --> 00:02:10,250
post West sequel and database

00:02:09,119 --> 00:02:14,930
abstraction

00:02:10,250 --> 00:02:16,700
in future triple versions here we are

00:02:14,930 --> 00:02:19,910
again this isn't really the first time

00:02:16,700 --> 00:02:24,110
we've had this discussion over the years

00:02:19,910 --> 00:02:27,170
we've postgres equal has been has worked

00:02:24,110 --> 00:02:30,590
on and off again people have it's not it

00:02:27,170 --> 00:02:34,820
doesn't satisfy the 8020 argument of of

00:02:30,590 --> 00:02:37,100
whether of users so the majority of

00:02:34,820 --> 00:02:41,390
users use a my sequel or my sequel like

00:02:37,100 --> 00:02:43,820
database management system we have bugs

00:02:41,390 --> 00:02:45,650
in Drupal 7 and some people consider

00:02:43,820 --> 00:02:49,870
them critical bugs enough to just not

00:02:45,650 --> 00:02:52,130
use postgres sequel right now unless

00:02:49,870 --> 00:02:55,010
someone has made a commit in the last

00:02:52,130 --> 00:02:58,190
hour postgresql driver is completely

00:02:55,010 --> 00:03:01,430
broken interpolate so yeah just it's a

00:02:58,190 --> 00:03:03,200
no-go you can't use it so the question

00:03:01,430 --> 00:03:07,580
is should we continue to support

00:03:03,200 --> 00:03:09,640
progressive cool and and why should we

00:03:07,580 --> 00:03:12,920
supported if we are going to support it

00:03:09,640 --> 00:03:18,709
and this kind of leads into database

00:03:12,920 --> 00:03:21,019
abstraction in general and database

00:03:18,709 --> 00:03:22,970
abstraction izzy is a challenge it's

00:03:21,019 --> 00:03:25,640
hard to get right I'm not sure if there

00:03:22,970 --> 00:03:27,860
is any framework out there that

00:03:25,640 --> 00:03:29,810
implements date of a database

00:03:27,860 --> 00:03:34,250
abstraction a database abstraction layer

00:03:29,810 --> 00:03:35,989
perfectly and it's a challenge not just

00:03:34,250 --> 00:03:38,480
with databases but with platforms in

00:03:35,989 --> 00:03:40,820
general and programming languages

00:03:38,480 --> 00:03:46,239
standardized libraries frameworks there

00:03:40,820 --> 00:03:51,200
are all complicated system they all have

00:03:46,239 --> 00:03:53,690
issues that need to be solved and the

00:03:51,200 --> 00:03:56,420
cost to port or maintain you know

00:03:53,690 --> 00:04:03,350
platforms and standardized libraries and

00:03:56,420 --> 00:04:10,840
database systems is is pretty high sorry

00:04:03,350 --> 00:04:12,829
I say I Milan so a frameworks Davis

00:04:10,840 --> 00:04:15,950
abstraction layer makes it possible for

00:04:12,829 --> 00:04:19,030
us as developers to choose a suitable

00:04:15,950 --> 00:04:21,799
database to use for applications and

00:04:19,030 --> 00:04:22,420
each sequel implementation as we know is

00:04:21,799 --> 00:04:24,160
unique

00:04:22,420 --> 00:04:29,230
powerful and implements the sequel

00:04:24,160 --> 00:04:31,120
standard in a certain way and and so

00:04:29,230 --> 00:04:33,580
many but many database abstraction

00:04:31,120 --> 00:04:35,290
layers only implement the most common

00:04:33,580 --> 00:04:37,690
concepts and so this is the first

00:04:35,290 --> 00:04:40,930
problem is that i call it the common

00:04:37,690 --> 00:04:45,340
denominator problem and that we often

00:04:40,930 --> 00:04:47,440
see database abstraction layer is going

00:04:45,340 --> 00:04:51,280
for that that database agnostic approach

00:04:47,440 --> 00:04:53,070
and this leads to the first criticism of

00:04:51,280 --> 00:04:57,990
database abstraction layers in general

00:04:53,070 --> 00:05:01,060
being that they're no good many people

00:04:57,990 --> 00:05:02,650
not many but i jokingly say that

00:05:01,060 --> 00:05:04,600
database abstraction layers has made

00:05:02,650 --> 00:05:09,160
some people very angry and has been

00:05:04,600 --> 00:05:12,870
widely regarded as a bad move but in

00:05:09,160 --> 00:05:12,870
defense of database abstraction layers

00:05:13,020 --> 00:05:21,640
we you it's not just about the you know

00:05:20,200 --> 00:05:24,400
whether you support one system or

00:05:21,640 --> 00:05:29,220
another you have code reuse and other

00:05:24,400 --> 00:05:29,220
benefits to to using a database

00:05:29,550 --> 00:05:35,830
abstraction layer and so the common

00:05:33,520 --> 00:05:38,140
denominator or the database ed agnostic

00:05:35,830 --> 00:05:43,720
approach is just one way of implementing

00:05:38,140 --> 00:05:45,910
it back in 2006 i believe we have a the

00:05:43,720 --> 00:05:49,690
the four types of database abstraction

00:05:45,910 --> 00:05:53,770
layers that was defined but in a blog

00:05:49,690 --> 00:05:56,920
post and one is just providing access to

00:05:53,770 --> 00:06:00,100
a database to is providing a common

00:05:56,920 --> 00:06:02,370
interface to different software 3 is

00:06:00,100 --> 00:06:04,750
actually writing portable code so that

00:06:02,370 --> 00:06:07,930
you know you can you can make that

00:06:04,750 --> 00:06:11,200
intelligent choice and four is just is

00:06:07,930 --> 00:06:15,730
the object relational mapping or arm or

00:06:11,200 --> 00:06:19,090
m so in our case i would consider drupal

00:06:15,730 --> 00:06:22,030
still type 2 in that our code is in

00:06:19,090 --> 00:06:26,320
portable in all cases and where it is

00:06:22,030 --> 00:06:28,120
implemented the specifications are pre

00:06:26,320 --> 00:06:31,470
game just in general you know we've gone

00:06:28,120 --> 00:06:37,200
with that database agnostic approach

00:06:31,470 --> 00:06:39,870
rails active record implements an ORM if

00:06:37,200 --> 00:06:46,740
you're not familiar with that doctrines

00:06:39,870 --> 00:06:48,840
dbl also elements in RM so the the next

00:06:46,740 --> 00:06:53,580
issue with database abstraction layers

00:06:48,840 --> 00:06:57,060
is that and this is very particular to

00:06:53,580 --> 00:06:58,290
Drupal is that frameworks implement them

00:06:57,060 --> 00:07:00,480
for a completely different reason than

00:06:58,290 --> 00:07:02,520
we implement them you know if you think

00:07:00,480 --> 00:07:04,950
about architecture and as a developer

00:07:02,520 --> 00:07:07,110
and you're you're coming up with a

00:07:04,950 --> 00:07:08,880
solution to a problem from the ground up

00:07:07,110 --> 00:07:10,740
you're going to make those architectural

00:07:08,880 --> 00:07:14,400
decisions when developing and then

00:07:10,740 --> 00:07:16,560
choose the best tool for the job and so

00:07:14,400 --> 00:07:20,660
abstraction layers president frameworks

00:07:16,560 --> 00:07:24,780
are really suited for that purpose

00:07:20,660 --> 00:07:27,450
there's but when you deal with Drupal

00:07:24,780 --> 00:07:29,310
which it comes out of the box we have to

00:07:27,450 --> 00:07:31,140
think about you know we've basically

00:07:29,310 --> 00:07:35,090
were forced into thinking things in a

00:07:31,140 --> 00:07:37,770
database agnostic approach and so our

00:07:35,090 --> 00:07:41,150
architectural decisions are probably

00:07:37,770 --> 00:07:46,340
different than what you would get with

00:07:41,150 --> 00:07:48,840
doctrine or rails as a framework and

00:07:46,340 --> 00:07:51,229
finally the third challenge of database

00:07:48,840 --> 00:07:55,400
abstraction is of course business value

00:07:51,229 --> 00:08:00,030
is there value in having support for

00:07:55,400 --> 00:08:03,960
different systems the primary value is

00:08:00,030 --> 00:08:05,910
code reuse and it saves time to use a

00:08:03,960 --> 00:08:09,030
database abstraction layer in in most

00:08:05,910 --> 00:08:10,830
cases but you know some customers want

00:08:09,030 --> 00:08:12,690
the best they can get from their system

00:08:10,830 --> 00:08:15,300
so it when they're evaluating a system

00:08:12,690 --> 00:08:16,620
they're going to say well drupal may

00:08:15,300 --> 00:08:18,210
have performance issues because it's

00:08:16,620 --> 00:08:19,860
using database agnostic approach and

00:08:18,210 --> 00:08:24,330
that's maybe I should just go over the

00:08:19,860 --> 00:08:28,530
custom solution and for this reason we

00:08:24,330 --> 00:08:30,690
see more recently backdrop has dropped

00:08:28,530 --> 00:08:34,110
support for both postgres sequel and

00:08:30,690 --> 00:08:38,010
sequel light and they were considering

00:08:34,110 --> 00:08:40,779
getting rid of what database abstraction

00:08:38,010 --> 00:08:44,730
layer they had in core

00:08:40,779 --> 00:08:49,870
and in invasive they evaluated and such

00:08:44,730 --> 00:08:52,389
it did not have enough business value so

00:08:49,870 --> 00:08:54,970
with that in mind I kind of you know as

00:08:52,389 --> 00:08:56,680
I research that and I've been looking at

00:08:54,970 --> 00:08:59,319
postre a single driver for a couple

00:08:56,680 --> 00:09:02,319
years I've developed my kind of my

00:08:59,319 --> 00:09:05,170
criteria for keeping postgres eagle in

00:09:02,319 --> 00:09:07,240
court or not or room or removing it and

00:09:05,170 --> 00:09:09,730
that is we should remove a pro stress

00:09:07,240 --> 00:09:11,709
sequel driver support from court if it

00:09:09,730 --> 00:09:14,259
provides small value to the dribble

00:09:11,709 --> 00:09:15,879
community and if it is given low

00:09:14,259 --> 00:09:17,230
priority to fix critical and

00:09:15,879 --> 00:09:22,809
architectural issues with a storage

00:09:17,230 --> 00:09:24,939
interface and I think you know I'll do

00:09:22,809 --> 00:09:26,740
is I'll approach this you know both of

00:09:24,939 --> 00:09:29,139
these these things throughout the next

00:09:26,740 --> 00:09:32,290
slides well first let's take a kind of a

00:09:29,139 --> 00:09:34,149
look at the past and I guess holly is in

00:09:32,290 --> 00:09:36,699
here but I hope she's listening and

00:09:34,149 --> 00:09:38,769
she'll watch this later so what what is

00:09:36,699 --> 00:09:43,029
postgres signal if you're even if you

00:09:38,769 --> 00:09:45,160
are unaware it is an ancient strict free

00:09:43,029 --> 00:09:47,230
open-source relational database

00:09:45,160 --> 00:09:50,019
management system it's been around for

00:09:47,230 --> 00:09:53,889
decades it follows strict typing and

00:09:50,019 --> 00:09:55,509
standards adherence as only an open

00:09:53,889 --> 00:09:59,459
source database management system would

00:09:55,509 --> 00:10:01,930
do and it's free and open source so it's

00:09:59,459 --> 00:10:06,309
it's got the postgres sequel open source

00:10:01,930 --> 00:10:07,839
license which is managed by the postgres

00:10:06,309 --> 00:10:11,980
t'kul development group so it's it's

00:10:07,839 --> 00:10:14,110
pure open source software maria DB is

00:10:11,980 --> 00:10:16,720
probably the only other one other than

00:10:14,110 --> 00:10:20,860
central light being in the public domain

00:10:16,720 --> 00:10:24,879
so we first got post-race equal in

00:10:20,860 --> 00:10:27,040
Drupal for and and this was of course if

00:10:24,879 --> 00:10:29,740
you're not aware of what we were doing

00:10:27,040 --> 00:10:34,540
back then we just basically had okay you

00:10:29,740 --> 00:10:37,389
can you can do queries right and then in

00:10:34,540 --> 00:10:39,759
this involved over this high over time

00:10:37,389 --> 00:10:42,129
so in Drupal 6 we got the schema API so

00:10:39,759 --> 00:10:44,949
we could then you know provide a generic

00:10:42,129 --> 00:10:47,139
type for column management and table

00:10:44,949 --> 00:10:49,750
management and then finally in Drupal 7

00:10:47,139 --> 00:10:51,939
we you know we got that the next step

00:10:49,750 --> 00:10:53,020
and database abstraction with the DB T

00:10:51,939 --> 00:10:56,520
and G

00:10:53,020 --> 00:11:00,340
and a real abstraction layer and so

00:10:56,520 --> 00:11:02,620
postgres equals Hughes has evolved over

00:11:00,340 --> 00:11:07,210
time now you know there is high hopes

00:11:02,620 --> 00:11:10,060
back in in Drupal for Andrew po5 that we

00:11:07,210 --> 00:11:12,840
would start you know we start increasing

00:11:10,060 --> 00:11:17,050
the user base of Drupal to include

00:11:12,840 --> 00:11:19,840
postrecital users but in in my mind it

00:11:17,050 --> 00:11:23,890
really has evolved into basically a

00:11:19,840 --> 00:11:26,290
litmus test for whether in alternative

00:11:23,890 --> 00:11:29,950
database system can be used with Drupal

00:11:26,290 --> 00:11:33,730
and that's pretty much the reason it's

00:11:29,950 --> 00:11:36,430
still in core and I'm going to say that

00:11:33,730 --> 00:11:40,120
that test has consistently failed we

00:11:36,430 --> 00:11:44,440
know that most critical is broken or our

00:11:40,120 --> 00:11:48,730
driver is broken you know say we failed

00:11:44,440 --> 00:11:52,810
you know why did we fail well for one

00:11:48,730 --> 00:11:54,850
postgres sequel is strict and so if you

00:11:52,810 --> 00:11:57,370
only test against the database system

00:11:54,850 --> 00:11:58,330
with the you know lucid options of up

00:11:57,370 --> 00:12:00,370
standards you're going to run into

00:11:58,330 --> 00:12:02,860
things like the autocomplete body and

00:12:00,370 --> 00:12:06,180
this is was present for a while

00:12:02,860 --> 00:12:09,100
interpolate if you would go to user /

00:12:06,180 --> 00:12:13,750
autocomplete it would load the access

00:12:09,100 --> 00:12:16,140
callback for user / % users so the the

00:12:13,750 --> 00:12:18,940
user access callback which would then

00:12:16,140 --> 00:12:21,640
try and do a user load on the string

00:12:18,940 --> 00:12:24,430
autocomplete this is garbage we should

00:12:21,640 --> 00:12:28,080
not be trying to to load a user with us

00:12:24,430 --> 00:12:32,710
destroyed I / a shrink if that database

00:12:28,080 --> 00:12:35,170
schema says it should be an integer so

00:12:32,710 --> 00:12:37,830
this was a bug in in menu get item or in

00:12:35,170 --> 00:12:40,390
the menu routing system somewhere I

00:12:37,830 --> 00:12:47,290
believe it's no longer the case in

00:12:40,390 --> 00:12:50,320
Drupal 8 and but in our defense we have

00:12:47,290 --> 00:12:53,020
lacked the tools such as automated

00:12:50,320 --> 00:12:57,700
testing to discover these failures and

00:12:53,020 --> 00:12:59,950
fix them so it's really you know we

00:12:57,700 --> 00:13:04,330
failed but you know we really didn't

00:12:59,950 --> 00:13:07,560
give it a chance so it's kinda

00:13:04,330 --> 00:13:12,310
depressing no we failed whatever

00:13:07,560 --> 00:13:13,779
the current state of of Drupal of the

00:13:12,310 --> 00:13:17,170
Drupal database abstraction layer is

00:13:13,779 --> 00:13:21,699
it's pretty much almost a straight port

00:13:17,170 --> 00:13:25,060
from Drupal 7 we've added some some some

00:13:21,699 --> 00:13:27,850
methods on classes we brought views into

00:13:25,060 --> 00:13:30,490
core which deals heavily with with

00:13:27,850 --> 00:13:32,290
querying databases and then finally

00:13:30,490 --> 00:13:34,149
we've the only other changes we've

00:13:32,290 --> 00:13:37,540
abstracted storage in the way were

00:13:34,149 --> 00:13:39,670
handling schema management away from the

00:13:37,540 --> 00:13:42,459
database drivers and into systems like

00:13:39,670 --> 00:13:47,829
cash and config and entities and field

00:13:42,459 --> 00:13:51,639
storage and with these things we get to

00:13:47,829 --> 00:13:54,100
how PG sequels implementing implementing

00:13:51,639 --> 00:13:58,389
them and the the way is implementing

00:13:54,100 --> 00:14:01,540
them is poorly so really we can boil

00:13:58,389 --> 00:14:03,310
that down to kind of one decision in the

00:14:01,540 --> 00:14:08,740
last couple years and that was the issue

00:14:03,310 --> 00:14:12,250
11 6744 and is not a bad decision and we

00:14:08,740 --> 00:14:17,410
decided that and the crux of this issue

00:14:12,250 --> 00:14:19,480
was ok we have a cash system and we

00:14:17,410 --> 00:14:21,519
don't necessarily want to always have a

00:14:19,480 --> 00:14:23,769
storage storage for that cash system in

00:14:21,519 --> 00:14:26,380
fact why would we want to create

00:14:23,769 --> 00:14:28,510
database tables for cash if we're not

00:14:26,380 --> 00:14:31,959
going to use the database for cash so

00:14:28,510 --> 00:14:34,569
the what happens in in in the cash

00:14:31,959 --> 00:14:38,560
database back-end is it it will try and

00:14:34,569 --> 00:14:40,980
delete and query for for the cash and if

00:14:38,560 --> 00:14:43,720
it receives an exception it will then

00:14:40,980 --> 00:14:45,459
try and see if it can create the table

00:14:43,720 --> 00:14:48,790
and if it's if we're using the database

00:14:45,459 --> 00:14:52,389
back-end and we're doing this in a

00:14:48,790 --> 00:14:55,839
transaction so the the the main issue

00:14:52,389 --> 00:14:58,839
there is that postgres sequel will just

00:14:55,839 --> 00:15:01,329
roll back and stop and whereas my sequel

00:14:58,839 --> 00:15:04,569
or oracle should will do implicit

00:15:01,329 --> 00:15:08,920
commits a couple other issues with our

00:15:04,569 --> 00:15:10,360
storage system is more recently this was

00:15:08,920 --> 00:15:13,420
fixed for a postgres signal but there's

00:15:10,360 --> 00:15:15,130
a follow-up bug for sequel server is we

00:15:13,420 --> 00:15:19,480
have the content entity database storage

00:15:15,130 --> 00:15:20,240
class and so we this is another good

00:15:19,480 --> 00:15:22,760
thing

00:15:20,240 --> 00:15:25,130
we have removed drupal right record and

00:15:22,760 --> 00:15:26,270
that was doing you know we've deprecated

00:15:25,130 --> 00:15:28,700
that I'm not sure if it's actually

00:15:26,270 --> 00:15:31,010
removed but it's defecated and so they

00:15:28,700 --> 00:15:35,060
just had a lot of logic for how to

00:15:31,010 --> 00:15:37,220
handle cereal fields in in drills so we

00:15:35,060 --> 00:15:39,500
basically if you remember dribble right

00:15:37,220 --> 00:15:42,470
record you send it in an object just a

00:15:39,500 --> 00:15:44,980
standard class object and what would

00:15:42,470 --> 00:15:47,209
happen is we would just unset call

00:15:44,980 --> 00:15:50,540
properties and then send that to the

00:15:47,209 --> 00:15:52,580
database so this is kind of like you

00:15:50,540 --> 00:15:56,060
know it's not great you know we want to

00:15:52,580 --> 00:15:58,580
use an entity and call save on it and

00:15:56,060 --> 00:16:01,790
then have that go to wherever storage is

00:15:58,580 --> 00:16:03,709
necessary either config and in the

00:16:01,790 --> 00:16:07,940
config storage system or into the

00:16:03,709 --> 00:16:09,320
continent a storage system and and so

00:16:07,940 --> 00:16:14,270
we're not handling cereal fields

00:16:09,320 --> 00:16:17,149
properly and in sequel server and to

00:16:14,270 --> 00:16:19,430
digress basically if you do an update in

00:16:17,149 --> 00:16:22,040
sequel server you cannot you put the

00:16:19,430 --> 00:16:24,050
primary keys and try and set the values

00:16:22,040 --> 00:16:27,050
of primary keys and so that that

00:16:24,050 --> 00:16:30,079
actually we found that the the new

00:16:27,050 --> 00:16:33,529
sequel serve module maintainer has you

00:16:30,079 --> 00:16:36,709
know found that out just last week so we

00:16:33,529 --> 00:16:39,470
created an issue for that so the the

00:16:36,709 --> 00:16:41,690
other thing is we currently don't have

00:16:39,470 --> 00:16:45,020
an official testing infrastructure for

00:16:41,690 --> 00:16:49,839
for postgres sequel on QA dr. Fludd org

00:16:45,020 --> 00:16:52,370
so anything we're doing is is untested

00:16:49,839 --> 00:16:54,589
I'll get to that moment it's not quite

00:16:52,370 --> 00:16:58,100
untested anything that the rest of core

00:16:54,589 --> 00:17:00,079
is doing is untested and also you know

00:16:58,100 --> 00:17:03,350
we're missing functionality because we

00:17:00,079 --> 00:17:05,480
have because we have a broken driver you

00:17:03,350 --> 00:17:08,209
know we were lacking things that are

00:17:05,480 --> 00:17:10,250
really cool that postgres users want and

00:17:08,209 --> 00:17:12,740
that's a schema support you know we only

00:17:10,250 --> 00:17:16,370
support the public schema we don't

00:17:12,740 --> 00:17:17,420
support a JSON type we there's school

00:17:16,370 --> 00:17:21,770
things that those were like post you

00:17:17,420 --> 00:17:23,660
guys and we don't support that one of

00:17:21,770 --> 00:17:26,300
the reasons why you might want a schema

00:17:23,660 --> 00:17:29,390
other than public is to reduce your

00:17:26,300 --> 00:17:31,940
vulnerability for PCI compliance and

00:17:29,390 --> 00:17:32,700
just a if you're really stickler for

00:17:31,940 --> 00:17:34,700
four

00:17:32,700 --> 00:17:39,750
you want permissions to be set up for

00:17:34,700 --> 00:17:41,910
applications accessing a database to

00:17:39,750 --> 00:17:43,590
remark on the testing infrastructure we

00:17:41,910 --> 00:17:46,610
were making really good progress last

00:17:43,590 --> 00:17:49,680
year you know Jeremy Thorson over there

00:17:46,610 --> 00:17:50,940
had the goal to provide test you know we

00:17:49,680 --> 00:17:53,130
had this goal to provide testing

00:17:50,940 --> 00:17:55,050
infrastructure for platforms languages

00:17:53,130 --> 00:17:57,300
and database systems so not just

00:17:55,050 --> 00:18:01,800
postgres sequence equal light but also

00:17:57,300 --> 00:18:04,130
testing against PHP 53 54 or 55 and you

00:18:01,800 --> 00:18:08,550
know who knows other other platforms

00:18:04,130 --> 00:18:09,960
operating systems and so really you know

00:18:08,550 --> 00:18:11,760
after some good progress or you're

00:18:09,960 --> 00:18:15,210
running the difficulties because our

00:18:11,760 --> 00:18:18,030
testing infrastructure from Drupal 7

00:18:15,210 --> 00:18:19,620
just wasn't going to cut it so that kind

00:18:18,030 --> 00:18:20,700
of morphed into the goal of let's just

00:18:19,620 --> 00:18:23,580
riorca tech they're testing

00:18:20,700 --> 00:18:25,890
infrastructure will work was lost but

00:18:23,580 --> 00:18:28,110
and so we had to start over for a

00:18:25,890 --> 00:18:31,380
postgres sequel and I think within the

00:18:28,110 --> 00:18:36,000
last three months since Austin is that

00:18:31,380 --> 00:18:38,460
three months four months we've we've

00:18:36,000 --> 00:18:40,440
really made some strides there for being

00:18:38,460 --> 00:18:43,260
able to handle different database

00:18:40,440 --> 00:18:47,010
systems in and platforms and spin things

00:18:43,260 --> 00:18:49,860
up so kind of exciting realm of things

00:18:47,010 --> 00:18:52,050
is yes you can help even if you have

00:18:49,860 --> 00:18:58,320
never used post vesicle or sequel light

00:18:52,050 --> 00:19:00,570
before just for we're going to a little

00:18:58,320 --> 00:19:04,160
straw poll here raise your hand if you

00:19:00,570 --> 00:19:06,390
have ever participated in a course print

00:19:04,160 --> 00:19:08,880
also if you hit if you have not raised

00:19:06,390 --> 00:19:10,680
your hand I highly suggest that you come

00:19:08,880 --> 00:19:13,920
on friday if you need any help

00:19:10,680 --> 00:19:17,850
whatsoever core mentors you know we're

00:19:13,920 --> 00:19:20,880
happy to help out raise your hand if you

00:19:17,850 --> 00:19:22,830
have worked on postgres sequel sequel

00:19:20,880 --> 00:19:29,670
light or in an alternative driver at a

00:19:22,830 --> 00:19:30,840
coarse print Oh five people and I was

00:19:29,670 --> 00:19:34,380
going to include his next little

00:19:30,840 --> 00:19:36,990
question but I that I think that we'd

00:19:34,380 --> 00:19:40,560
get the same number of hands but up

00:19:36,990 --> 00:19:42,630
until yesterday I had never worked on a

00:19:40,560 --> 00:19:44,040
driver issue with anybody else in the

00:19:42,630 --> 00:19:46,720
same room

00:19:44,040 --> 00:19:48,130
it can be a little depressing when

00:19:46,720 --> 00:19:52,180
you're only you're the only one working

00:19:48,130 --> 00:19:54,070
on drivers just just because there are

00:19:52,180 --> 00:19:58,930
other issues going on other movements

00:19:54,070 --> 00:20:00,250
that have more momentum so one of the

00:19:58,930 --> 00:20:03,370
things is if you've never installed

00:20:00,250 --> 00:20:04,810
postgres sequel or sequel light do it

00:20:03,370 --> 00:20:07,300
you know get it on your development

00:20:04,810 --> 00:20:10,270
environment I think any anyone who's

00:20:07,300 --> 00:20:13,540
working with core especially if you're

00:20:10,270 --> 00:20:16,420
reviewing things should have have these

00:20:13,540 --> 00:20:19,420
drivers have database systems set up on

00:20:16,420 --> 00:20:20,980
their development environment and it

00:20:19,420 --> 00:20:22,660
used to be kind of difficult you know I

00:20:20,980 --> 00:20:26,890
don't you know who knows how to set up

00:20:22,660 --> 00:20:30,580
postgres sequel here are a lot of people

00:20:26,890 --> 00:20:32,350
okay well that's not not only good poll

00:20:30,580 --> 00:20:33,640
but a lot of people don't you know

00:20:32,350 --> 00:20:37,120
that's the complaint I don't know most

00:20:33,640 --> 00:20:39,010
critical are so to make it easy for you

00:20:37,120 --> 00:20:41,200
and for people who don't know how to to

00:20:39,010 --> 00:20:44,110
do it I Eve you know we have vagrant we

00:20:41,200 --> 00:20:46,000
have puppet we have you have methods of

00:20:44,110 --> 00:20:47,830
solving that problem it's solved now in

00:20:46,000 --> 00:20:49,810
the last couple of years thanks to the

00:20:47,830 --> 00:20:53,320
DevOps movement so I have an environment

00:20:49,810 --> 00:20:56,650
if if you want to use it it's

00:20:53,320 --> 00:20:58,270
debian-based you know whatever i'm not a

00:20:56,650 --> 00:21:00,040
debian fan particularly but you know

00:20:58,270 --> 00:21:04,530
that's kind of what i worked off of

00:21:00,040 --> 00:21:09,220
someone else's Drupal 8 dev environment

00:21:04,530 --> 00:21:11,920
so with that said we have one meta issue

00:21:09,220 --> 00:21:15,220
about supporting postgres sequel and so

00:21:11,920 --> 00:21:19,030
that's that heading up there and a

00:21:15,220 --> 00:21:22,900
couple of issues the first one is just

00:21:19,030 --> 00:21:25,690
briefly our index key length is too long

00:21:22,900 --> 00:21:28,090
so if you try and create a field that

00:21:25,690 --> 00:21:31,000
has a really long name by default Drupal

00:21:28,090 --> 00:21:36,100
is going to use the field name as the

00:21:31,000 --> 00:21:39,460
key and so in pro so X equal it's

00:21:36,100 --> 00:21:40,720
limited to 63 characters and so if you

00:21:39,460 --> 00:21:43,300
have a really long name it's going to

00:21:40,720 --> 00:21:47,410
try and use its can truncate it and

00:21:43,300 --> 00:21:49,000
trying to and possibly try and use an

00:21:47,410 --> 00:21:52,390
index that's already exists and you're

00:21:49,000 --> 00:21:55,090
going to get an error so there is a path

00:21:52,390 --> 00:21:57,880
for that probably needs to be reviewed

00:21:55,090 --> 00:21:59,620
yeah the patch actually needs work you

00:21:57,880 --> 00:22:03,430
discovered yesterday doesn't pass our

00:21:59,620 --> 00:22:06,370
tests the next issue which is now in

00:22:03,430 --> 00:22:09,250
green needs to be committed is our

00:22:06,370 --> 00:22:11,350
transaction handling but this could you

00:22:09,250 --> 00:22:12,940
know if we wanted to start thinking

00:22:11,350 --> 00:22:15,960
about the future of storage there there

00:22:12,940 --> 00:22:18,370
are follow ups for this and the

00:22:15,960 --> 00:22:21,190
transaction inlay is all about handling

00:22:18,370 --> 00:22:23,980
the the faking out and handling implicit

00:22:21,190 --> 00:22:26,910
commits in Postgres equal so what what

00:22:23,980 --> 00:22:29,950
the patch does is it wraps all queries

00:22:26,910 --> 00:22:31,870
that are in a transaction in a save

00:22:29,950 --> 00:22:35,080
point to emulate the behavior of my

00:22:31,870 --> 00:22:36,490
sequel might be a little performance

00:22:35,080 --> 00:22:39,130
issues on this but I haven't really

00:22:36,490 --> 00:22:42,310
noticed too much on on recent versions

00:22:39,130 --> 00:22:46,590
of postgres or current status is our TBC

00:22:42,310 --> 00:22:46,590
unless someone's committing it right now

00:22:48,000 --> 00:22:55,060
they would do that wouldn't they and and

00:22:52,870 --> 00:22:58,600
the reason is so this is our current

00:22:55,060 --> 00:23:00,520
blogger if you have this patch are the

00:22:58,600 --> 00:23:03,490
postgres sequel test spot that ricardo

00:23:00,520 --> 00:23:06,570
tomorrow is has has up on his personal

00:23:03,490 --> 00:23:09,700
site will reveal that we have 208 other

00:23:06,570 --> 00:23:12,520
exceptions going on instead of not being

00:23:09,700 --> 00:23:18,850
able to find any so so this issue really

00:23:12,520 --> 00:23:20,680
is the the first thing to solve you know

00:23:18,850 --> 00:23:24,130
other issues that are important in our

00:23:20,680 --> 00:23:25,240
case sensitivity on column names and

00:23:24,130 --> 00:23:27,910
again these are some of the issues that

00:23:25,240 --> 00:23:31,660
are in them in the meta the next one

00:23:27,910 --> 00:23:33,370
would be the the the goal of providing

00:23:31,660 --> 00:23:34,330
test box for everyone on the new

00:23:33,370 --> 00:23:35,590
infrastructure so that's really

00:23:34,330 --> 00:23:39,850
important so it's not related to

00:23:35,590 --> 00:23:41,620
postgres but you know as I was making

00:23:39,850 --> 00:23:42,910
this you know editing these slides I

00:23:41,620 --> 00:23:44,590
noticed that that we're going to have

00:23:42,910 --> 00:23:46,870
Sprint's related to the test bottom

00:23:44,590 --> 00:23:49,930
infrastructure and the goal of getting

00:23:46,870 --> 00:23:52,870
it all set up this week so you should

00:23:49,930 --> 00:23:55,920
probably learn more about that at Jeremy

00:23:52,870 --> 00:23:57,640
and Ricardo session tomorrow at 1045

00:23:55,920 --> 00:24:01,290
modernizing the test block feature

00:23:57,640 --> 00:24:01,290
drupal.org automated testing

00:24:03,250 --> 00:24:07,400
finally you know feature wise if you

00:24:05,480 --> 00:24:11,120
wanted to work on non-public schemas

00:24:07,400 --> 00:24:13,370
there's an issue for that another issue

00:24:11,120 --> 00:24:15,260
that slipped by is is all the other

00:24:13,370 --> 00:24:18,860
drivers in date I think I think secretly

00:24:15,260 --> 00:24:20,990
did this maybe they have a dummy one but

00:24:18,860 --> 00:24:23,480
the other drivers in core implemented

00:24:20,990 --> 00:24:25,730
that the coffee table method and this

00:24:23,480 --> 00:24:29,120
was not done in the postgres single

00:24:25,730 --> 00:24:31,400
driver for whatever reason the there is

00:24:29,120 --> 00:24:37,130
no reason to use copy table in core and

00:24:31,400 --> 00:24:40,870
so I think CH x has said that we

00:24:37,130 --> 00:24:44,330
possibly could remove it but I mean

00:24:40,870 --> 00:24:47,020
contribute it so there might be a valid

00:24:44,330 --> 00:24:52,280
reason just to implement it in Postgres

00:24:47,020 --> 00:24:54,800
finally the file list view in Drupal 8

00:24:52,280 --> 00:24:58,160
is broken because of an ambiguous column

00:24:54,800 --> 00:25:01,040
and this is not to deal with the file

00:24:58,160 --> 00:25:04,100
system but more to do with views so

00:25:01,040 --> 00:25:08,390
there's a an issue going on deep within

00:25:04,100 --> 00:25:13,520
views and on what it's doing group I it

00:25:08,390 --> 00:25:19,370
has to do with file managed and file

00:25:13,520 --> 00:25:21,200
usage if i recall correctly so this is a

00:25:19,370 --> 00:25:23,720
this is kind of exciting you know we

00:25:21,200 --> 00:25:25,510
have we're on the brink of just having

00:25:23,720 --> 00:25:30,800
post mistake will work for the most part

00:25:25,510 --> 00:25:32,800
and being having it testable so let's

00:25:30,800 --> 00:25:38,120
talk about the not so distant future of

00:25:32,800 --> 00:25:40,040
Drupal 8 and beyond and I think we

00:25:38,120 --> 00:25:42,080
should ask ourselves is should we

00:25:40,040 --> 00:25:44,420
continue to use postgres equal as a

00:25:42,080 --> 00:25:46,370
litmus test for drupal's database

00:25:44,420 --> 00:25:48,950
abstraction layer and supporting

00:25:46,370 --> 00:25:52,460
alternative drivers and truthful and if

00:25:48,950 --> 00:25:55,280
it we do want two remaining core can we

00:25:52,460 --> 00:25:57,320
actually prioritize our driver

00:25:55,280 --> 00:26:02,210
alternative drivers so they're not

00:25:57,320 --> 00:26:03,710
having to play catch-up but first let's

00:26:02,210 --> 00:26:05,330
look at just what it would take to

00:26:03,710 --> 00:26:07,460
remove press restaurant core in and

00:26:05,330 --> 00:26:16,310
maybe you know remove you know moving it

00:26:07,460 --> 00:26:16,970
to contribute Ville is you know we have

00:26:16,310 --> 00:26:19,400
that database

00:26:16,970 --> 00:26:21,409
gnostic approach so we we haven't

00:26:19,400 --> 00:26:26,750
optimized our architecture for my sequel

00:26:21,409 --> 00:26:29,780
and Michael like drivers we have PHP

00:26:26,750 --> 00:26:34,370
things in our code we're working around

00:26:29,780 --> 00:26:37,880
PHP quirks like null and default being

00:26:34,370 --> 00:26:40,580
different in Postgres sequel we could be

00:26:37,880 --> 00:26:42,020
using my sequel specific features we

00:26:40,580 --> 00:26:43,820
could remove the hacks that are

00:26:42,020 --> 00:26:46,220
increasing our code complexity that

00:26:43,820 --> 00:26:47,960
we've added over the years and finally

00:26:46,220 --> 00:26:51,200
we could just start analyzing all our

00:26:47,960 --> 00:26:53,870
queries to see what we can do better for

00:26:51,200 --> 00:26:55,789
my sequel in my sequel like such as

00:26:53,870 --> 00:27:00,799
you're more ADV that's that's why I mean

00:26:55,789 --> 00:27:06,530
by my secret like so backdrop CMS

00:27:00,799 --> 00:27:07,880
already did this it wasn't that hard but

00:27:06,530 --> 00:27:11,480
we have to ask ourselves the question is

00:27:07,880 --> 00:27:14,900
is when my sequel and and Maria or or

00:27:11,480 --> 00:27:18,080
the other forks start really branching

00:27:14,900 --> 00:27:21,320
in and features what will happen then in

00:27:18,080 --> 00:27:22,850
in terms of how we support things and

00:27:21,320 --> 00:27:27,260
what we will probably be in a similar

00:27:22,850 --> 00:27:29,030
situation the next benefit of removing

00:27:27,260 --> 00:27:32,150
from corey's that control he doesn't

00:27:29,030 --> 00:27:35,480
have the same constraints of score I

00:27:32,150 --> 00:27:38,270
mean we can rewrite everything we can

00:27:35,480 --> 00:27:43,520
extend classes and Drupal 8 gives us as

00:27:38,270 --> 00:27:47,299
power specifically say checks Krell they

00:27:43,520 --> 00:27:51,610
worked on issue 2 to basically give us a

00:27:47,299 --> 00:27:54,380
mechanism for overriding storage classes

00:27:51,610 --> 00:27:56,120
so we can we can rewrite or we can

00:27:54,380 --> 00:27:58,039
extend the cash towards the entity

00:27:56,120 --> 00:28:01,820
stores the field storage all the storage

00:27:58,039 --> 00:28:04,520
and and get rid of or redo the way that

00:28:01,820 --> 00:28:06,320
entities are saving things and you know

00:28:04,520 --> 00:28:08,210
all the contributors are going to have

00:28:06,320 --> 00:28:13,220
to do this to some extent Oracle sequel

00:28:08,210 --> 00:28:15,020
server MongoDB specifically and I think

00:28:13,220 --> 00:28:17,590
it's it probably is increasing our

00:28:15,020 --> 00:28:22,370
burden on security just because we're

00:28:17,590 --> 00:28:24,470
rewriting subsystems of Drupal and and

00:28:22,370 --> 00:28:26,949
we're just kind of we might be changing

00:28:24,470 --> 00:28:30,169
the way things are behaving

00:28:26,949 --> 00:28:33,259
but this is possible we love altar you

00:28:30,169 --> 00:28:35,649
know we love to do this I love to do it

00:28:33,259 --> 00:28:38,329
is everyone else love rewriting things

00:28:35,649 --> 00:28:44,449
extending classes I like I've done it I

00:28:38,329 --> 00:28:46,519
think some other cases the Installer we

00:28:44,449 --> 00:28:49,159
could look at making it better we won't

00:28:46,519 --> 00:28:52,129
be hacking the installer I don't think

00:28:49,159 --> 00:28:54,169
we should do it but again some of the

00:28:52,129 --> 00:28:56,929
reasons why we have our transaction

00:28:54,169 --> 00:29:03,169
problems is because of the Drupal

00:28:56,929 --> 00:29:05,059
installation lastly we don't need to

00:29:03,169 --> 00:29:08,119
test all of Drupal if it's hanging trip

00:29:05,059 --> 00:29:10,399
and we can focus on just testing what we

00:29:08,119 --> 00:29:13,879
need to we can basically storage only

00:29:10,399 --> 00:29:16,669
tests take a set of queries and shove it

00:29:13,879 --> 00:29:21,799
through all the methods that we're

00:29:16,669 --> 00:29:24,649
trying to so to emulate things like the

00:29:21,799 --> 00:29:27,319
the cereal fields being set in a certain

00:29:24,649 --> 00:29:29,749
way to emulate durable sending an array

00:29:27,319 --> 00:29:33,919
when in we should be expecting a string

00:29:29,749 --> 00:29:35,329
are on our column definition and and

00:29:33,919 --> 00:29:39,379
this is very similar to how doctrines

00:29:35,329 --> 00:29:41,839
dbl have unit tests and you know if

00:29:39,379 --> 00:29:44,119
you're not aware of of that project you

00:29:41,839 --> 00:29:46,819
know it has unit tests for both my

00:29:44,119 --> 00:29:49,279
sequel and postgres and sequel white and

00:29:46,819 --> 00:29:51,129
it runs about 30 minutes for for all

00:29:49,279 --> 00:29:53,569
those tests and it does my sequel about

00:29:51,129 --> 00:29:59,049
three times and postgres about three

00:29:53,569 --> 00:30:01,069
times for the various versions so the

00:29:59,049 --> 00:30:04,099
these tests are going to acquire

00:30:01,069 --> 00:30:06,919
infrastructure and if you're rejecting

00:30:04,099 --> 00:30:09,919
contribs you really need to have testing

00:30:06,919 --> 00:30:12,469
infrastructure available to us to in

00:30:09,919 --> 00:30:17,329
order to test these things maybe that

00:30:12,469 --> 00:30:22,369
means going to github and then and

00:30:17,329 --> 00:30:25,699
working with Travis CI so what just a

00:30:22,369 --> 00:30:27,349
risk of going down some risks moving

00:30:25,699 --> 00:30:30,469
indigent ribs is we're playing catch-up

00:30:27,349 --> 00:30:32,749
and we're moving from core isn't going

00:30:30,469 --> 00:30:34,249
to change that it is kind of difficult

00:30:32,749 --> 00:30:36,399
to change for that's that's up for

00:30:34,249 --> 00:30:36,399
debate

00:30:37,450 --> 00:30:41,240
the whole idea that we're supporting

00:30:39,650 --> 00:30:44,990
querying against tables that don't

00:30:41,240 --> 00:30:46,790
exists is weird it's kind of hard to

00:30:44,990 --> 00:30:49,690
change our are complete you know just

00:30:46,790 --> 00:30:53,360
start rethinking our storage doing that

00:30:49,690 --> 00:30:56,890
I mean that would take a lot of work in

00:30:53,360 --> 00:30:59,270
addition to maintaining a contributor

00:30:56,890 --> 00:31:02,810
again we have to work around this in

00:30:59,270 --> 00:31:04,640
decrease performance we run to the

00:31:02,810 --> 00:31:09,170
content entity database storage systems

00:31:04,640 --> 00:31:11,440
where issue where you know when you

00:31:09,170 --> 00:31:15,290
update in Postgres ago when you update a

00:31:11,440 --> 00:31:17,390
primary key field or or sorry just a

00:31:15,290 --> 00:31:19,880
sequence field your you want to set

00:31:17,390 --> 00:31:22,850
default sequel the sequel default type

00:31:19,880 --> 00:31:26,720
and the way you do that in PHP is

00:31:22,850 --> 00:31:28,700
different from the my sequel PHP driver

00:31:26,720 --> 00:31:32,900
and the postgres sequel of the driver so

00:31:28,700 --> 00:31:34,220
we have you know certain PHP issues and

00:31:32,900 --> 00:31:38,230
again we might run into the same things

00:31:34,220 --> 00:31:41,870
in my sequel with my secret later on

00:31:38,230 --> 00:31:45,010
yeah we're playing catch-up so we're

00:31:41,870 --> 00:31:45,010
still going to be playing catch-up and

00:31:45,640 --> 00:31:49,970
we're just gonna have to make more

00:31:47,510 --> 00:31:52,460
workarounds and possibly decrease

00:31:49,970 --> 00:31:54,860
performance of your more so if you were

00:31:52,460 --> 00:31:57,620
using post-crescent sequel in core or

00:31:54,860 --> 00:32:04,250
sorry as a user would you still use it

00:31:57,620 --> 00:32:05,840
if it was in can trim no no it's going

00:32:04,250 --> 00:32:08,000
to be more difficult to introduce things

00:32:05,840 --> 00:32:09,680
like the JSON schema type we're going to

00:32:08,000 --> 00:32:16,220
have to have cooperate with a lot of

00:32:09,680 --> 00:32:19,190
contribs they'll have to write if you

00:32:16,220 --> 00:32:24,230
want to have chase on storage and have a

00:32:19,190 --> 00:32:25,730
JSON field type you would have to coat

00:32:24,230 --> 00:32:28,070
around the case where you install that

00:32:25,730 --> 00:32:32,150
on my sequel if you want it to be a good

00:32:28,070 --> 00:32:34,580
contributor I don't like installing

00:32:32,150 --> 00:32:38,510
having my module fail when it's used on

00:32:34,580 --> 00:32:40,610
in different situations but yeah you

00:32:38,510 --> 00:32:41,840
know things like post GIS you know it's

00:32:40,610 --> 00:32:46,340
going to be difficult to implement those

00:32:41,840 --> 00:32:47,040
things in control I in my opinion as we

00:32:46,340 --> 00:32:49,080
you know we

00:32:47,040 --> 00:32:50,940
don't have we're not in court we can't

00:32:49,080 --> 00:32:54,120
provide fallbacks rather for other

00:32:50,940 --> 00:33:00,240
drivers but we know we could probably

00:32:54,120 --> 00:33:02,160
get that into contribu- you know

00:33:00,240 --> 00:33:04,410
removing from core would further

00:33:02,160 --> 00:33:09,750
marginalize the postrecital user base

00:33:04,410 --> 00:33:12,270
however small and it is i think you know

00:33:09,750 --> 00:33:13,740
we don't see many postgres seagull users

00:33:12,270 --> 00:33:18,270
because the experience of using

00:33:13,740 --> 00:33:22,920
postrecital is not great and I wouldn't

00:33:18,270 --> 00:33:25,080
want to use a driver that that has these

00:33:22,920 --> 00:33:27,600
issues so i probably wouldn't install

00:33:25,080 --> 00:33:30,240
Drupal on postgres c41 and we see that

00:33:27,600 --> 00:33:33,120
again and again as postgresql

00:33:30,240 --> 00:33:35,310
enthusiasts try install Drupal because

00:33:33,120 --> 00:33:38,340
it supported find out that it's really

00:33:35,310 --> 00:33:40,920
is it's broken in many cases and then

00:33:38,340 --> 00:33:43,140
just stop you know stop using postgres

00:33:40,920 --> 00:33:50,010
too cool for that project and use my

00:33:43,140 --> 00:33:51,690
signal so this is discouraging for users

00:33:50,010 --> 00:33:55,590
it's discouraging for for people who

00:33:51,690 --> 00:33:56,970
work on the issues I asked you know

00:33:55,590 --> 00:33:59,880
where I was working on a core issue and

00:33:56,970 --> 00:34:01,710
i asked the postrecital user friend of

00:33:59,880 --> 00:34:04,050
mine to review and he got frustrated

00:34:01,710 --> 00:34:07,530
with the whole process and used some

00:34:04,050 --> 00:34:09,120
language that i can't repeat that was

00:34:07,530 --> 00:34:12,929
kind of disappointing to hear from him

00:34:09,120 --> 00:34:15,510
actually so it's difficult to regain

00:34:12,929 --> 00:34:18,210
trust and rebuild confidence once it has

00:34:15,510 --> 00:34:20,550
been lost no just from a consumer

00:34:18,210 --> 00:34:22,050
standpoint if you usually if you have a

00:34:20,550 --> 00:34:24,720
bad experience in a restaurant you

00:34:22,050 --> 00:34:27,810
probably don't go there again so that's

00:34:24,720 --> 00:34:32,370
all that's left are altruist and

00:34:27,810 --> 00:34:35,280
dabblers and that's that's really not

00:34:32,370 --> 00:34:38,060
gonna you're really not going to see

00:34:35,280 --> 00:34:44,280
there's no really need for post-crescent

00:34:38,060 --> 00:34:47,520
in gerbil in that case but if we want to

00:34:44,280 --> 00:34:48,990
do it how do we get there well one again

00:34:47,520 --> 00:34:52,710
it's pretty easy to remove a postgresql

00:34:48,990 --> 00:34:54,419
support we have the patch but i also

00:34:52,710 --> 00:34:56,639
like to see some responsibilities taken

00:34:54,419 --> 00:35:01,380
for our failure of

00:34:56,639 --> 00:35:02,579
not supporting postgres and maybe a blog

00:35:01,380 --> 00:35:04,500
post or something from the drupal

00:35:02,579 --> 00:35:07,079
association say hey here's the situation

00:35:04,500 --> 00:35:09,119
we don't want to lead you into false

00:35:07,079 --> 00:35:11,299
pretenses here's what we're doing we're

00:35:09,119 --> 00:35:15,900
going to move into can't rib and

00:35:11,299 --> 00:35:19,980
possibly help the contributors or of any

00:35:15,900 --> 00:35:23,010
database system with infrastructure and

00:35:19,980 --> 00:35:24,990
testing and then I think we we should

00:35:23,010 --> 00:35:27,390
keep the dialogue open for a Drupal 9 in

00:35:24,990 --> 00:35:29,130
case as we look at database abstraction

00:35:27,390 --> 00:35:30,599
and our database abstraction layer and

00:35:29,130 --> 00:35:34,109
how we're improving it and how we're

00:35:30,599 --> 00:35:37,799
improving our storage for for ideas and

00:35:34,109 --> 00:35:43,170
that that leads me to the the not so 22

00:35:37,799 --> 00:35:45,690
beyond there's been one proposal of

00:35:43,170 --> 00:35:48,470
keeping the database agnostic driver for

00:35:45,690 --> 00:35:52,980
for tests and making it more strict and

00:35:48,470 --> 00:35:55,319
and then basically I think say checks

00:35:52,980 --> 00:35:58,289
came up with his proposal and then then

00:35:55,319 --> 00:36:01,410
having more performance drivers do

00:35:58,289 --> 00:36:06,089
specific things for sequel light

00:36:01,410 --> 00:36:07,680
postgres equal probably not secure I'm

00:36:06,089 --> 00:36:10,109
not sure what you can do there maybe you

00:36:07,680 --> 00:36:14,789
can pair it off with some other driver

00:36:10,109 --> 00:36:16,740
of some sort and then also for my sequel

00:36:14,789 --> 00:36:23,670
we probably you can do it would want to

00:36:16,740 --> 00:36:27,059
do it for kona and so this really takes

00:36:23,670 --> 00:36:31,789
into this approach I think we first

00:36:27,059 --> 00:36:37,410
discuss right after triple con Austin

00:36:31,789 --> 00:36:40,049
and in this year and it's based on the

00:36:37,410 --> 00:36:42,900
our current functional QA approach so

00:36:40,049 --> 00:36:44,400
you know we have our simple tests and

00:36:42,900 --> 00:36:46,619
we've run them and run them against a

00:36:44,400 --> 00:36:49,829
database agnostic driver and that's how

00:36:46,619 --> 00:36:52,589
we do our our thing so this would be

00:36:49,829 --> 00:36:57,059
more code to maintain but it does fit

00:36:52,589 --> 00:36:59,460
the criteria of having of prioritizing

00:36:57,059 --> 00:37:02,880
our database drivers if we're going to

00:36:59,460 --> 00:37:05,789
do that there's a there's a session

00:37:02,880 --> 00:37:09,420
about this very thing tomorrow in this

00:37:05,789 --> 00:37:10,230
room at one about the future of Drupal

00:37:09,420 --> 00:37:13,710
functional testing

00:37:10,230 --> 00:37:17,790
I think the when we discuss how we're

00:37:13,710 --> 00:37:20,490
how we're going to how we're going to

00:37:17,790 --> 00:37:23,130
proceed with this approach it really

00:37:20,490 --> 00:37:28,950
depends on our how we're going to

00:37:23,130 --> 00:37:32,270
proceed with testing in general lastly

00:37:28,950 --> 00:37:35,250
we could switch to doctrine / DBA oh

00:37:32,270 --> 00:37:37,890
they support more than just those three

00:37:35,250 --> 00:37:40,200
drivers they support Oracle although

00:37:37,890 --> 00:37:45,119
they only have tests for my sequel pro

00:37:40,200 --> 00:37:48,150
square sequence a white dbl has code

00:37:45,119 --> 00:37:52,230
that's technically discouraged a lot of

00:37:48,150 --> 00:37:56,070
our patches for doing work arounds we

00:37:52,230 --> 00:37:59,220
revolve usually at first go into string

00:37:56,070 --> 00:38:01,380
replaces in reg ex and we discourage

00:37:59,220 --> 00:38:07,140
that although that's up for debate

00:38:01,380 --> 00:38:12,810
because a lot of drivers do that outside

00:38:07,140 --> 00:38:14,580
drivel and in our sin in our defense our

00:38:12,810 --> 00:38:15,690
database abstraction layer has some

00:38:14,580 --> 00:38:17,840
things that are kind of nice the

00:38:15,690 --> 00:38:21,300
transaction system the storage

00:38:17,840 --> 00:38:24,500
abstraction so it may be another

00:38:21,300 --> 00:38:28,109
approach would be it to take doctrine

00:38:24,500 --> 00:38:30,720
doctrines kind of set up and split all

00:38:28,109 --> 00:38:34,320
of our drivers away from core or have

00:38:30,720 --> 00:38:36,990
you know Drupal / DB al and then have

00:38:34,320 --> 00:38:39,810
just a specific team working on database

00:38:36,990 --> 00:38:44,010
abstraction you know this again this is

00:38:39,810 --> 00:38:49,770
probably not for 8.1 we have to solve

00:38:44,010 --> 00:38:53,130
other issues like composer I think this

00:38:49,770 --> 00:38:55,140
this has some you know again we have to

00:38:53,130 --> 00:38:59,880
look at what we're doing for testing for

00:38:55,140 --> 00:39:01,650
that in any case I think you know go go

00:38:59,880 --> 00:39:04,260
back in the future of progress equal

00:39:01,650 --> 00:39:06,240
rest in that must be prioritized or else

00:39:04,260 --> 00:39:08,280
history will repeat itself when ye

00:39:06,240 --> 00:39:10,920
testing infrastructure we need to be a

00:39:08,280 --> 00:39:12,750
little less selfish about our patches

00:39:10,920 --> 00:39:17,070
and taking other systems for a spin and

00:39:12,750 --> 00:39:18,720
that that's not just for postgres and we

00:39:17,070 --> 00:39:21,180
need to make our database abstraction

00:39:18,720 --> 00:39:21,980
layer and storage protection layer more

00:39:21,180 --> 00:39:25,820
maintainable

00:39:21,980 --> 00:39:28,460
and so in my opinion if I think we're on

00:39:25,820 --> 00:39:30,740
the right track we have the initiative

00:39:28,460 --> 00:39:34,880
set up to improve our testing

00:39:30,740 --> 00:39:37,190
infrastructure if we are prioritizing

00:39:34,880 --> 00:39:38,810
Protus crests equal then then that meets

00:39:37,190 --> 00:39:42,290
my criteria and I think it we should

00:39:38,810 --> 00:39:44,300
keep it in core but if we don't

00:39:42,290 --> 00:39:46,250
prioritize it then by all means let's

00:39:44,300 --> 00:39:48,050
let's get it let's let's remove it we

00:39:46,250 --> 00:39:53,540
you know if we're not going to

00:39:48,050 --> 00:39:54,619
prioritize it let's get it out so with

00:39:53,540 --> 00:39:56,750
that I'd like to kind of open the

00:39:54,619 --> 00:39:59,450
conversation up and in case we want to

00:39:56,750 --> 00:40:02,600
talk about questions about postgres

00:39:59,450 --> 00:40:04,820
sequel currently or the future of

00:40:02,600 --> 00:40:08,570
database abstraction if you want to talk

00:40:04,820 --> 00:40:14,300
about what we can do in our storage and

00:40:08,570 --> 00:40:16,220
our storage layer and if you are not

00:40:14,300 --> 00:40:20,210
busy you can fill out the session

00:40:16,220 --> 00:40:25,970
evaluation while you're at it yes please

00:40:20,210 --> 00:40:27,770
use the microphone so first first a

00:40:25,970 --> 00:40:32,630
couple of comments and then maybe a

00:40:27,770 --> 00:40:34,250
question comment first in Drupal 7 you

00:40:32,630 --> 00:40:35,540
know we talked about the dismal state of

00:40:34,250 --> 00:40:39,170
the postgres driver it is actually

00:40:35,540 --> 00:40:40,940
mostly usable with a few patches I'm one

00:40:39,170 --> 00:40:43,340
of those crazy people who has production

00:40:40,940 --> 00:40:45,830
sites you know running high traffic

00:40:43,340 --> 00:40:47,690
sites running on postgres and running

00:40:45,830 --> 00:40:49,310
quite well I've got one site in

00:40:47,690 --> 00:40:50,450
particular that's got over 20,000 nodes

00:40:49,310 --> 00:40:52,280
and it runs really really well on

00:40:50,450 --> 00:40:54,290
postgres so don't don't think because

00:40:52,280 --> 00:40:56,240
it's not perfect and because you know

00:40:54,290 --> 00:40:57,710
the postgres drivers second certainly

00:40:56,240 --> 00:41:00,790
been a second-class citizen that is not

00:40:57,710 --> 00:41:03,650
possible to run on postgres at all it is

00:41:00,790 --> 00:41:05,390
the second comment is with regards to

00:41:03,650 --> 00:41:06,380
testing I'll give you a preview of some

00:41:05,390 --> 00:41:08,090
of the things Jeremy is going to be

00:41:06,380 --> 00:41:09,980
talking about tomorrow I want to give

00:41:08,090 --> 00:41:11,359
away all the secrets but we have done a

00:41:09,980 --> 00:41:13,220
lot of work over the past three or four

00:41:11,359 --> 00:41:14,690
months to revamp the testing

00:41:13,220 --> 00:41:15,950
infrastructure I'm one of the people who

00:41:14,690 --> 00:41:17,720
signed up and said hey I want to make

00:41:15,950 --> 00:41:19,730
sure the postgres runs better and so

00:41:17,720 --> 00:41:22,040
I've got got sucked into the in the test

00:41:19,730 --> 00:41:24,050
bot world and learning things I never

00:41:22,040 --> 00:41:25,190
thought I was going to get into but but

00:41:24,050 --> 00:41:28,830
you know we

00:41:25,190 --> 00:41:29,970
but my point there is that the only way

00:41:28,830 --> 00:41:32,310
we're going to be able to know what's

00:41:29,970 --> 00:41:34,380
the right path whether to improve it in

00:41:32,310 --> 00:41:36,660
core or take it out of core is to

00:41:34,380 --> 00:41:38,130
measure to have a measurement of what's

00:41:36,660 --> 00:41:39,930
failing and what's not failing and that

00:41:38,130 --> 00:41:43,080
comes back to testing so the testing is

00:41:39,930 --> 00:41:45,270
obviously an important part of that so I

00:41:43,080 --> 00:41:46,470
guess my question is is it questioned

00:41:45,270 --> 00:41:49,140
everybody in the room who else is

00:41:46,470 --> 00:41:51,660
willing to step up and help you testing

00:41:49,140 --> 00:41:53,700
help you know get get some of these

00:41:51,660 --> 00:41:57,150
issues fixed it so that we can get them

00:41:53,700 --> 00:41:58,470
committed or or as everybody consigned

00:41:57,150 --> 00:42:00,360
to the fact that it's always going to be

00:41:58,470 --> 00:42:01,320
a second-class citizens I'll just I'll

00:42:00,360 --> 00:42:03,060
just leave that out there for you to

00:42:01,320 --> 00:42:05,610
think about I don't need it so a

00:42:03,060 --> 00:42:07,860
question is is anybody willing to in

00:42:05,610 --> 00:42:11,370
this room even with the limited number

00:42:07,860 --> 00:42:13,500
of people we have this room onto to do a

00:42:11,370 --> 00:42:15,960
little bit more effort in their core

00:42:13,500 --> 00:42:17,670
development and take postgres it equal

00:42:15,960 --> 00:42:25,590
for a spin work on some issues and

00:42:17,670 --> 00:42:28,800
patches and just in general you know

00:42:25,590 --> 00:42:31,350
whether we should be treating pro stress

00:42:28,800 --> 00:42:35,490
equals a second-class citizen and I'll

00:42:31,350 --> 00:42:38,640
start I think that if with the

00:42:35,490 --> 00:42:41,250
improvements that we're making a we

00:42:38,640 --> 00:42:43,260
probably aren't going to be treating

00:42:41,250 --> 00:42:45,240
postgres sequence equal light as second

00:42:43,260 --> 00:42:47,510
second class citizens and if we think

00:42:45,240 --> 00:42:49,470
about the future we could probably start

00:42:47,510 --> 00:42:52,740
thinking about all the database

00:42:49,470 --> 00:42:58,620
management systems as as equal just to

00:42:52,740 --> 00:43:02,700
the some extent you want to can you step

00:42:58,620 --> 00:43:04,920
up to the mic please and make sure i'm

00:43:02,700 --> 00:43:07,050
not i wasn't sure if the mic picked up

00:43:04,920 --> 00:43:08,670
everything that you had to say like I

00:43:07,050 --> 00:43:12,200
mean I heard it but i'm not sure if the

00:43:08,670 --> 00:43:15,360
mic picked it up I just wanted to say

00:43:12,200 --> 00:43:18,870
squirrel light is a requirement for

00:43:15,360 --> 00:43:21,630
Drupal 8 we can't run tests without its

00:43:18,870 --> 00:43:26,970
collide so it's a first class citizen

00:43:21,630 --> 00:43:30,030
post gray is a questionable actually so

00:43:26,970 --> 00:43:35,910
I think the

00:43:30,030 --> 00:43:40,560
actually what needs the described estate

00:43:35,910 --> 00:43:46,710
it's a there's no features or profit

00:43:40,560 --> 00:43:51,360
that posterior could provide most of

00:43:46,710 --> 00:43:54,990
that there's no big crowd around because

00:43:51,360 --> 00:43:58,290
people doesn't understand the features

00:43:54,990 --> 00:44:03,180
the profits the what bhaskar could get

00:43:58,290 --> 00:44:10,320
could bring also post Gray has an object

00:44:03,180 --> 00:44:13,290
model oh so it's a plus one for country

00:44:10,320 --> 00:44:17,010
because we could ever write in Drupal 8

00:44:13,290 --> 00:44:23,510
a lot of storage begins to make them

00:44:17,010 --> 00:44:29,910
really fast for one post gray so what so

00:44:23,510 --> 00:44:37,470
I'd like to hear apropos any proposal

00:44:29,910 --> 00:44:40,340
how we can allow storage driver that

00:44:37,470 --> 00:44:45,000
supports just simple operations in core

00:44:40,340 --> 00:44:48,420
to provide altering of controllers at

00:44:45,000 --> 00:44:51,470
least providing authoring of control

00:44:48,420 --> 00:44:57,590
pivotal roles you could save entity by

00:44:51,470 --> 00:45:01,740
using a variety storage controller to

00:44:57,590 --> 00:45:09,840
reusing the storage model of paws gray

00:45:01,740 --> 00:45:12,290
you can make a clone of records so it's

00:45:09,840 --> 00:45:16,380
a different storage model for entity

00:45:12,290 --> 00:45:18,450
right to summarize way when you said the

00:45:16,380 --> 00:45:22,350
first thing you mentioned was that there

00:45:18,450 --> 00:45:24,960
is little value to having progressive

00:45:22,350 --> 00:45:27,630
going in core right now and the reason

00:45:24,960 --> 00:45:29,310
why is that one single light we depend a

00:45:27,630 --> 00:45:33,540
lot heavier unsecured light so it has

00:45:29,310 --> 00:45:35,400
value to core developers I think you

00:45:33,540 --> 00:45:38,100
know just in terms of core development

00:45:35,400 --> 00:45:41,370
that's that's true right now we we don't

00:45:38,100 --> 00:45:43,250
have much value for other than being as

00:45:41,370 --> 00:45:46,550
I said a litmus test

00:45:43,250 --> 00:45:49,340
what's possible but I think we we could

00:45:46,550 --> 00:45:51,140
have value inn in Postgres sequel but

00:45:49,340 --> 00:45:54,770
again you said yeah you you think that

00:45:51,140 --> 00:45:57,640
it should be in contribu and then as we

00:45:54,770 --> 00:46:03,110
go and I think that's perfectly valid

00:45:57,640 --> 00:46:05,750
scenario the second thing you said was

00:46:03,110 --> 00:46:07,130
is that one of those values i think is

00:46:05,750 --> 00:46:10,280
what you're saying it was one of the

00:46:07,130 --> 00:46:13,010
values is to to use post is to be able

00:46:10,280 --> 00:46:15,280
to use postgres equal as a document

00:46:13,010 --> 00:46:18,560
storage in the document storage model i

00:46:15,280 --> 00:46:21,770
think actually there's talking with

00:46:18,560 --> 00:46:25,250
Damian Turner so I can't pronounce his

00:46:21,770 --> 00:46:27,320
name with Commerce guys and he was

00:46:25,250 --> 00:46:31,610
mentioning it he wants to work this week

00:46:27,320 --> 00:46:33,680
on on trying to use postgres sequel as

00:46:31,610 --> 00:46:38,080
it as a dot in a kind of a document

00:46:33,680 --> 00:46:42,310
storage model by supporting the case on

00:46:38,080 --> 00:46:45,680
this week yes I yeah I was like oh okay

00:46:42,310 --> 00:46:48,230
yeah maybe just wants to play around and

00:46:45,680 --> 00:46:51,860
and look at the possibilities if you're

00:46:48,230 --> 00:46:54,230
not familiar if we supported the you

00:46:51,860 --> 00:46:56,840
know if we had a table that stores in

00:46:54,230 --> 00:46:59,720
json we could do things like storing the

00:46:56,840 --> 00:47:02,270
entity you know in JSON and then

00:46:59,720 --> 00:47:07,790
querying the properties of that JSON

00:47:02,270 --> 00:47:10,270
object I think maybe I'm not to to

00:47:07,790 --> 00:47:13,660
experience with with doing queries on

00:47:10,270 --> 00:47:19,940
with the JSON typing in Postgres sequel

00:47:13,660 --> 00:47:24,190
91 I think we're dying to but yeah it

00:47:19,940 --> 00:47:27,080
that has a lot of value as a end user if

00:47:24,190 --> 00:47:28,850
we were to keep supporting that it's a

00:47:27,080 --> 00:47:32,990
little harder to get that supporting

00:47:28,850 --> 00:47:36,860
contribute in my opinion and last one

00:47:32,990 --> 00:47:40,910
thing when i mention it's a post greek

00:47:36,860 --> 00:47:46,970
community we looks interconnected from

00:47:40,910 --> 00:47:52,520
them they very open and wish to help

00:47:46,970 --> 00:47:57,350
drupal to both driver and storage and

00:47:52,520 --> 00:48:02,690
I need conference was great some days

00:47:57,350 --> 00:48:06,470
ago home so they said the Drupal should

00:48:02,690 --> 00:48:11,080
use object model and they wish to help

00:48:06,470 --> 00:48:14,750
so it's another resource another value

00:48:11,080 --> 00:48:17,570
so you're talking with the with the

00:48:14,750 --> 00:48:19,820
postgres cynical community recently and

00:48:17,570 --> 00:48:24,350
they were suggesting that we switch our

00:48:19,820 --> 00:48:28,760
whole storage model to to being document

00:48:24,350 --> 00:48:30,050
object the document object model has its

00:48:28,760 --> 00:48:34,790
advantages it also has its disadvantages

00:48:30,050 --> 00:48:37,820
as its denormalized but and the other

00:48:34,790 --> 00:48:39,920
thing you mentioned was was that the the

00:48:37,820 --> 00:48:42,560
community was offering to help us in the

00:48:39,920 --> 00:48:45,530
dribble community accomplish that so

00:48:42,560 --> 00:48:47,060
that that is a really cool proposal

00:48:45,530 --> 00:48:49,540
because you know in the past we you know

00:48:47,060 --> 00:48:51,770
we you know some of the comments that

00:48:49,540 --> 00:48:54,020
some core developers have had is that

00:48:51,770 --> 00:48:57,710
where is the postgres sequel users why

00:48:54,020 --> 00:49:00,380
aren't they in the issues and so it

00:48:57,710 --> 00:49:03,110
would be really awesome to see and have

00:49:00,380 --> 00:49:05,680
that discussion and and in in the issue

00:49:03,110 --> 00:49:09,290
queue about about ways we can improve

00:49:05,680 --> 00:49:11,630
dribble for for the know in the as we

00:49:09,290 --> 00:49:14,270
start changing or you know as we start

00:49:11,630 --> 00:49:16,250
thinking about triple 9 I think that

00:49:14,270 --> 00:49:19,420
would be the appropriate discussion

00:49:16,250 --> 00:49:23,150
there or how we could do it in

00:49:19,420 --> 00:49:27,730
contribute ache it'd be a really big

00:49:23,150 --> 00:49:27,730
module in contribute at

00:49:32,490 --> 00:49:37,170
so you're thinking about you know how

00:49:34,560 --> 00:49:39,600
the you know to start with maybe having

00:49:37,170 --> 00:49:41,820
keeping the core driver as is and then

00:49:39,600 --> 00:49:43,860
then working on a controller I think

00:49:41,820 --> 00:49:50,940
that's great anybody else interesting

00:49:43,860 --> 00:49:55,440
that one other comment I wanted to make

00:49:50,940 --> 00:49:57,930
about about one of the the pros of not

00:49:55,440 --> 00:50:06,890
splitting you know the postgres driver

00:49:57,930 --> 00:50:09,270
often to contribute pelant postgres is

00:50:06,890 --> 00:50:10,680
is not necessarily with core but there

00:50:09,270 --> 00:50:13,080
are a lot of third-party modules that

00:50:10,680 --> 00:50:15,300
that I'll be obviously don't care about

00:50:13,080 --> 00:50:17,000
anything but but mysql and I'm afraid

00:50:15,300 --> 00:50:20,310
that if we split the driver off into a

00:50:17,000 --> 00:50:21,240
contribute then makes other modules I'll

00:50:20,310 --> 00:50:23,580
I don't have to worry about it anymore

00:50:21,240 --> 00:50:25,619
it's not in core that's not really yeah

00:50:23,580 --> 00:50:26,790
if I write a sequel query that doesn't

00:50:25,619 --> 00:50:27,930
work on post Chris I don't have to worry

00:50:26,790 --> 00:50:29,160
about that because because postgres

00:50:27,930 --> 00:50:30,750
isn't in the core anymore and that's

00:50:29,160 --> 00:50:32,700
that's one thing we should also think

00:50:30,750 --> 00:50:35,190
about right so the yeah the fear there's

00:50:32,700 --> 00:50:36,510
a fear that if we remove it from core

00:50:35,190 --> 00:50:38,490
it's not going to receive the same

00:50:36,510 --> 00:50:42,000
attention from other contributors and

00:50:38,490 --> 00:50:44,490
i'll counter that with examples of from

00:50:42,000 --> 00:50:46,940
the contribs base we have MongoDB driver

00:50:44,490 --> 00:50:50,850
we have a sequel server driver and

00:50:46,940 --> 00:50:55,050
control is still open to supporting

00:50:50,850 --> 00:50:58,590
those types of of scenarios the database

00:50:55,050 --> 00:51:03,180
systems and yeah it's going to depend on

00:50:58,590 --> 00:51:04,859
the contribu an ultra sand developer

00:51:03,180 --> 00:51:08,100
you're going to say yeah that's great i

00:51:04,859 --> 00:51:11,880
all and i'll try and support it and do

00:51:08,100 --> 00:51:14,010
my best but some people will forget i

00:51:11,880 --> 00:51:18,359
mean i think that's that's i mean that's

00:51:14,010 --> 00:51:19,770
how it is for other contributors so I

00:51:18,359 --> 00:51:21,150
think there's an I mean an easy answer

00:51:19,770 --> 00:51:23,190
to make any first-class citizen right

00:51:21,150 --> 00:51:25,260
which is that the tests run on all the

00:51:23,190 --> 00:51:27,540
supported database backends and you

00:51:25,260 --> 00:51:29,930
don't get patches committed if there's

00:51:27,540 --> 00:51:31,920
failures on any of those I mean that's

00:51:29,930 --> 00:51:34,740
unfortunately I mean not having had the

00:51:31,920 --> 00:51:36,210
infrastructure it's been you know

00:51:34,740 --> 00:51:38,940
preventing that I think I think in a way

00:51:36,210 --> 00:51:40,200
it's sort of like unfortunately it would

00:51:38,940 --> 00:51:41,460
have been an easy technical solution

00:51:40,200 --> 00:51:42,960
especially if they've been implemented

00:51:41,460 --> 00:51:45,540
while ago we had it through the whole

00:51:42,960 --> 00:51:48,630
cycle but the same thing with contribs

00:51:45,540 --> 00:51:50,070
like if you turn on test spot for

00:51:48,630 --> 00:51:52,350
contribute all the patches are tested

00:51:50,070 --> 00:51:54,900
against all the database drivers which

00:51:52,350 --> 00:51:56,790
should be the default than why you would

00:51:54,900 --> 00:51:59,040
get a lot better I mean as a contribute

00:51:56,790 --> 00:52:01,320
and they included stuff for whatever

00:51:59,040 --> 00:52:04,110
reason broke on postgres you know even

00:52:01,320 --> 00:52:05,340
for a trivial reason it's just yeah I'm

00:52:04,110 --> 00:52:08,520
not going to test every single patch

00:52:05,340 --> 00:52:11,220
locally I'm post grass or even test my

00:52:08,520 --> 00:52:13,740
modules if that's not you know not the

00:52:11,220 --> 00:52:15,690
stack I actually deploy on so be nice

00:52:13,740 --> 00:52:18,000
just to have it automated feedback and I

00:52:15,690 --> 00:52:22,320
think that would dramatically improve

00:52:18,000 --> 00:52:26,490
the quality of support yeah so I I don't

00:52:22,320 --> 00:52:28,470
think it's I I guess for me it looks I

00:52:26,490 --> 00:52:30,420
mean the hard part is that we're in a

00:52:28,470 --> 00:52:33,150
bit of a hole until we could get to the

00:52:30,420 --> 00:52:35,250
point where every it passed on all those

00:52:33,150 --> 00:52:38,220
all the tests pass on all those drivers

00:52:35,250 --> 00:52:40,440
and that's and that's sort of the hard

00:52:38,220 --> 00:52:42,440
part if we got there we would I think we

00:52:40,440 --> 00:52:45,180
would be good be easier to maintain

00:52:42,440 --> 00:52:47,400
their be relatively little friction

00:52:45,180 --> 00:52:50,010
maintaining a long run once we got to it

00:52:47,400 --> 00:52:54,390
being supported all and tested on all

00:52:50,010 --> 00:52:55,950
for every passport went in I think I

00:52:54,390 --> 00:53:00,450
think the mic picked it all that that

00:52:55,950 --> 00:53:01,530
went up so yeah I think that the tests

00:53:00,450 --> 00:53:04,770
having a testing infrastructure

00:53:01,530 --> 00:53:06,330
available for for for all database

00:53:04,770 --> 00:53:10,250
systems is is going to be really

00:53:06,330 --> 00:53:13,770
important going forward and it just as a

00:53:10,250 --> 00:53:17,030
just for for for all the other

00:53:13,770 --> 00:53:17,030
contributor Ivers as well

00:53:20,710 --> 00:53:26,359
down that that point I think that is one

00:53:24,200 --> 00:53:28,309
of the first steps to getting these

00:53:26,359 --> 00:53:29,930
other database supported and I know

00:53:28,309 --> 00:53:31,549
there is some core contributors that

00:53:29,930 --> 00:53:34,309
want it to work on these other databases

00:53:31,549 --> 00:53:36,559
because i was talking to son he was

00:53:34,309 --> 00:53:40,640
talking about having it work on other

00:53:36,559 --> 00:53:42,529
databases so there's people in core that

00:53:40,640 --> 00:53:44,299
are interested in supporting them I

00:53:42,529 --> 00:53:46,789
think once we get that test

00:53:44,299 --> 00:53:51,049
infrastructure there is core developers

00:53:46,789 --> 00:53:53,450
that want to see it happen yeah so yeah

00:53:51,049 --> 00:53:55,309
there is support for using and being

00:53:53,450 --> 00:54:00,380
able to test against all database

00:53:55,309 --> 00:54:01,970
systems so yeah I think the important

00:54:00,380 --> 00:54:04,250
thing right now is getting that testing

00:54:01,970 --> 00:54:06,890
infrastructure finished and at least we

00:54:04,250 --> 00:54:10,490
have right now we can see what else is

00:54:06,890 --> 00:54:13,400
failing and it's fairly close to Drupal

00:54:10,490 --> 00:54:16,010
7 there's some some critical issues you

00:54:13,400 --> 00:54:17,809
probably want to either patch out you

00:54:16,010 --> 00:54:20,180
know as drew place release I think we

00:54:17,809 --> 00:54:22,069
can continue supporting especially if we

00:54:20,180 --> 00:54:26,839
get the transaction issue committed

00:54:22,069 --> 00:54:32,630
which it probably will be it's our GBC

00:54:26,839 --> 00:54:34,660
so it'd be great if it's before beta but

00:54:32,630 --> 00:54:34,660
uh

00:54:39,140 --> 00:54:44,990
so maybe a show of hands what do people

00:54:42,830 --> 00:54:48,680
think about keeping postgres equal in

00:54:44,990 --> 00:54:55,790
core for Drupal 8 at least 48 point zero

00:54:48,680 --> 00:55:00,680
point zero that's a lot of hands maybe

00:54:55,790 --> 00:55:03,650
our population is skewed I don't know if

00:55:00,680 --> 00:55:05,630
we you haven't new so the anybody

00:55:03,650 --> 00:55:06,920
reviewing this video could you you know

00:55:05,630 --> 00:55:08,690
you probably take that into your account

00:55:06,920 --> 00:55:14,090
but the majority that room says we

00:55:08,690 --> 00:55:17,810
should keep in core again 8.1 maybe if

00:55:14,090 --> 00:55:19,670
we if we're seeing that we're not really

00:55:17,810 --> 00:55:23,540
making progress maybe we'll remove it in

00:55:19,670 --> 00:55:26,540
8.1 or 8.2 probably safer 48.2 as I

00:55:23,540 --> 00:55:36,020
think my grade comes in an 8.1 if i

00:55:26,540 --> 00:55:39,560
recall correctly or summary no I the

00:55:36,020 --> 00:55:42,320
other issue all our my great stuff is

00:55:39,560 --> 00:55:52,040
probably broken that's another big thing

00:55:42,320 --> 00:55:53,930
I guess that's it thank you i'll try and

00:55:52,040 --> 00:55:55,190
get the slides up I'm if you want to

00:55:53,930 --> 00:55:59,000
read all the blog post there's a

00:55:55,190 --> 00:56:02,210
reference to the slide with links in the

00:55:59,000 --> 00:56:05,470
last page here but I'm not going to bore

00:56:02,210 --> 00:56:05,470
you with bibliography

00:56:08,640 --> 00:56:10,700

YouTube URL: https://www.youtube.com/watch?v=XaWwzqGIyV8


