Title: Palantir Presents:  What Developers Can Expect From Drupal 8
Publication date: 2014-08-06
Playlist: Drupal Association Webcasts
Description: 
	Palantir Presents:  What Developers Can Expect From Drupal 8
Captions: 
	00:00:00,380 --> 00:00:12,679
okay thanks everyone for joining us and

00:00:04,220 --> 00:00:15,410
today we are talking about what

00:00:12,679 --> 00:00:20,340
developers can expect from Drupal 8 and

00:00:15,410 --> 00:00:22,500
our host today is um George danette and

00:00:20,340 --> 00:00:24,900
layered Garfield from palantir and we're

00:00:22,500 --> 00:00:27,720
really excited to have these guys join

00:00:24,900 --> 00:00:30,119
us um we're excited to have you

00:00:27,720 --> 00:00:31,949
attending as well and it looks like we

00:00:30,119 --> 00:00:34,469
have people from all over someone from

00:00:31,949 --> 00:00:37,610
Scotland someone from the west coast

00:00:34,469 --> 00:00:40,559
East Coasters so thanks for joining us

00:00:37,610 --> 00:00:42,300
today if you're listening from your

00:00:40,559 --> 00:00:44,700
computer make sure that you select the

00:00:42,300 --> 00:00:46,550
mic and speaker audio option just to

00:00:44,700 --> 00:00:49,379
make sure that you're hearing us okay

00:00:46,550 --> 00:00:52,530
just to let you know you'll remain muted

00:00:49,379 --> 00:00:55,379
during the call and if you have any

00:00:52,530 --> 00:00:58,890
questions as we go along we're using the

00:00:55,379 --> 00:01:02,070
Q&A window for go to webinars I'll stop

00:00:58,890 --> 00:01:03,840
Larry and ask questions if there's a

00:01:02,070 --> 00:01:05,489
good stopping point but definitely

00:01:03,840 --> 00:01:09,030
there'll be time at the end to ask

00:01:05,489 --> 00:01:11,700
further follow-up questions and then

00:01:09,030 --> 00:01:13,830
also please make sure to check out our

00:01:11,700 --> 00:01:17,189
post webinar survey and fill that out

00:01:13,830 --> 00:01:21,960
for us so we can better tailor the

00:01:17,189 --> 00:01:23,009
webinars to what our audience needs just

00:01:21,960 --> 00:01:26,970
a little bit about the drupal

00:01:23,009 --> 00:01:28,710
association and it's our mission to

00:01:26,970 --> 00:01:32,130
foster and support the Drupal community

00:01:28,710 --> 00:01:34,979
so they can collaborate together as we

00:01:32,130 --> 00:01:37,140
innovate the project there's so many

00:01:34,979 --> 00:01:39,659
ways that we can help the community the

00:01:37,140 --> 00:01:41,610
drupal association helps host drupal.org

00:01:39,659 --> 00:01:44,100
and we're building a tech team to

00:01:41,610 --> 00:01:46,590
improve the site we provide grants for

00:01:44,100 --> 00:01:48,360
community members to fund ways that grow

00:01:46,590 --> 00:01:51,600
communities and further the project like

00:01:48,360 --> 00:01:53,640
starting new camps and areas or running

00:01:51,600 --> 00:01:57,299
a multi-city roadshow and evangelizing

00:01:53,640 --> 00:01:59,159
drupal we also host triple cons which

00:01:57,299 --> 00:02:01,049
bring thousands together to work on the

00:01:59,159 --> 00:02:03,450
project and bond it's a community and

00:02:01,049 --> 00:02:07,020
this year will be in austin as well as

00:02:03,450 --> 00:02:09,030
Amsterdam we provide scholarships to

00:02:07,020 --> 00:02:11,970
help community members around the globe

00:02:09,030 --> 00:02:13,110
attend the events and also this is

00:02:11,970 --> 00:02:19,190
funded through our membership

00:02:13,110 --> 00:02:21,990
and our partners so some upcoming events

00:02:19,190 --> 00:02:23,390
we have our Drupal con Austin coming up

00:02:21,990 --> 00:02:26,370
you can see the link at the bottom

00:02:23,390 --> 00:02:29,250
that's coming up in the next few weeks

00:02:26,370 --> 00:02:30,780
actually in June we have triple global

00:02:29,250 --> 00:02:34,170
training days which is a really cool

00:02:30,780 --> 00:02:37,290
program where um either community

00:02:34,170 --> 00:02:40,680
members or triple training shops can

00:02:37,290 --> 00:02:44,250
host free or low-cost inter 2-tuple

00:02:40,680 --> 00:02:46,880
trainings and we had a really successful

00:02:44,250 --> 00:02:48,870
year so far 25 different countries

00:02:46,880 --> 00:02:51,930
participating in over 40 companies

00:02:48,870 --> 00:02:55,440
hosting and this is a really great way

00:02:51,930 --> 00:02:57,900
to grow your community really talk about

00:02:55,440 --> 00:03:01,290
Drupal and get new developers excited

00:02:57,900 --> 00:03:04,290
about it and you know obviously build

00:03:01,290 --> 00:03:07,320
the momentum for the project our next

00:03:04,290 --> 00:03:09,360
webinar is May thirteenth odd we're

00:03:07,320 --> 00:03:11,640
talking about how to hire great Drupal

00:03:09,360 --> 00:03:16,860
talent and you can check out more

00:03:11,640 --> 00:03:18,720
webinars on that link listed and of

00:03:16,860 --> 00:03:20,630
course we couldn't do anything without

00:03:18,720 --> 00:03:23,580
our supporting partners thank you

00:03:20,630 --> 00:03:26,400
Palantir for for hosting this webinar

00:03:23,580 --> 00:03:29,820
and giving us some information on what's

00:03:26,400 --> 00:03:32,250
happening with your plate and we

00:03:29,820 --> 00:03:35,790
couldn't do anything can do what we do

00:03:32,250 --> 00:03:41,370
without them so thank you so much um I'm

00:03:35,790 --> 00:03:50,010
going to introduce our speakers now we

00:03:41,370 --> 00:03:52,709
have switch it over we have George

00:03:50,010 --> 00:03:56,489
that's going to start and then Larry

00:03:52,709 --> 00:03:59,310
will take over and without further ado

00:03:56,489 --> 00:04:03,150
George if you want to begin sure

00:03:59,310 --> 00:04:05,760
absolutely so welcome to what to expect

00:04:03,150 --> 00:04:07,350
from Drupal 8 for developers Larry is

00:04:05,760 --> 00:04:09,950
going to be leading the bulk of this

00:04:07,350 --> 00:04:12,750
presentation I just had a few words

00:04:09,950 --> 00:04:15,269
wanted to start out with as part of the

00:04:12,750 --> 00:04:17,700
introduction just talking a little bit

00:04:15,269 --> 00:04:20,160
about palantir net we're a boutique web

00:04:17,700 --> 00:04:22,770
firm based in Chicago we create engaging

00:04:20,160 --> 00:04:24,870
online experiences for clients who value

00:04:22,770 --> 00:04:27,240
of accessible sustainable best practices

00:04:24,870 --> 00:04:29,789
and human centered approaches to process

00:04:27,240 --> 00:04:31,919
strategy user experience design

00:04:29,789 --> 00:04:34,740
development quality assurance training

00:04:31,919 --> 00:04:36,330
and support we're deeply invested in the

00:04:34,740 --> 00:04:37,680
drivel project and community and we're

00:04:36,330 --> 00:04:40,199
strong supporters of the drupal

00:04:37,680 --> 00:04:41,669
association and its mission in addition

00:04:40,199 --> 00:04:43,919
to being sporting partners of the group

00:04:41,669 --> 00:04:46,080
Association palantir also gives back to

00:04:43,919 --> 00:04:47,789
the Drupal community providing support

00:04:46,080 --> 00:04:49,740
for and helping to organize community

00:04:47,789 --> 00:04:51,660
events like local regional camps and

00:04:49,740 --> 00:04:53,970
sprints we also believe in giving back

00:04:51,660 --> 00:04:56,009
to the Drupal project and our team

00:04:53,970 --> 00:04:59,069
includes several leading contributors to

00:04:56,009 --> 00:05:00,960
quadruple software like Larry as well as

00:04:59,069 --> 00:05:03,569
prominent module maintainer zan Drupal

00:05:00,960 --> 00:05:04,830
security team members if you like what

00:05:03,569 --> 00:05:06,780
you hear today and want to learn more

00:05:04,830 --> 00:05:08,340
Palantir offers training programs

00:05:06,780 --> 00:05:10,289
tailored to the needs of in-house

00:05:08,340 --> 00:05:12,150
developer teams as well as consulting

00:05:10,289 --> 00:05:16,979
their development support and of course

00:05:12,150 --> 00:05:19,889
we also work and end design strategy and

00:05:16,979 --> 00:05:23,130
development projects our goal is to make

00:05:19,889 --> 00:05:24,569
of the experience building a website and

00:05:23,130 --> 00:05:27,539
the experience of using a website

00:05:24,569 --> 00:05:30,180
enjoyable and transformative for all by

00:05:27,539 --> 00:05:31,770
making good both inside and out so

00:05:30,180 --> 00:05:35,669
without further ado I'm going to pass

00:05:31,770 --> 00:05:41,460
things off to Larry thank you all right

00:05:35,669 --> 00:05:42,719
hello everyone this session is so me my

00:05:41,460 --> 00:05:45,750
name's Larry Garfield my senior

00:05:42,719 --> 00:05:48,169
architect here at palantir for drupal

00:05:45,750 --> 00:05:50,280
aids i have been the web services lead

00:05:48,169 --> 00:05:52,710
so I'm running the web services or

00:05:50,280 --> 00:05:54,810
whiskey initiative I am also the Drupal

00:05:52,710 --> 00:05:56,310
representative to the PHP framework and

00:05:54,810 --> 00:05:59,310
trop ability group that's kind of the

00:05:56,310 --> 00:06:01,380
United Nations of PHP you can take that

00:05:59,310 --> 00:06:04,680
all the good Adam bad implications that

00:06:01,380 --> 00:06:07,889
has I'm an advisor to the drupal

00:06:04,680 --> 00:06:10,590
association so hello and general purpose

00:06:07,889 --> 00:06:14,550
lovable patent this talk is going to be

00:06:10,590 --> 00:06:19,650
a fairly code centric and kind of dense

00:06:14,550 --> 00:06:23,069
that I goal here is to give a an

00:06:19,650 --> 00:06:26,280
overview of enough of Drupal 8 model

00:06:23,069 --> 00:06:27,599
development so that when you then go and

00:06:26,280 --> 00:06:29,069
do it yourself you recognize the

00:06:27,599 --> 00:06:31,289
patterns so that we're going to go

00:06:29,069 --> 00:06:33,690
through a lot of code I don't expect

00:06:31,289 --> 00:06:35,370
people to memorize all the code and

00:06:33,690 --> 00:06:38,460
every ap I'm talking about that's not

00:06:35,370 --> 00:06:41,009
the point the point is to get a feel for

00:06:38,460 --> 00:06:43,830
it and and recognize the patterns

00:06:41,009 --> 00:06:46,110
so when you go to play with yourself you

00:06:43,830 --> 00:06:48,479
will have a good idea of what to be

00:06:46,110 --> 00:06:51,719
looking for that's it if you would like

00:06:48,479 --> 00:06:54,689
to play along at home there's a link

00:06:51,719 --> 00:06:57,809
here to these slides that presenting

00:06:54,689 --> 00:07:00,689
straight from bit ly / palantir dash da

00:06:57,809 --> 00:07:01,800
detectives and the sample code that

00:07:00,689 --> 00:07:04,559
we're going to be walking through is all

00:07:01,800 --> 00:07:07,110
in a module called pugs because we are

00:07:04,559 --> 00:07:10,710
drupal and ripples all about hugging and

00:07:07,110 --> 00:07:12,149
that link is there as well so if you

00:07:10,710 --> 00:07:13,439
want to play at home they play along at

00:07:12,149 --> 00:07:16,949
home that's fine or just follow along

00:07:13,439 --> 00:07:19,589
the slides here so I'm assuming most

00:07:16,949 --> 00:07:22,860
people are existing Drupal 7 developers

00:07:19,589 --> 00:07:25,110
you already know Drupal and so you've

00:07:22,860 --> 00:07:27,330
got the sense of I've heard rupal eat is

00:07:25,110 --> 00:07:28,770
going to be so different it's completely

00:07:27,330 --> 00:07:31,020
rewritten how am I ever going to learn

00:07:28,770 --> 00:07:35,729
this whole thing and the thing to

00:07:31,020 --> 00:07:37,919
remember is that a lot of things have

00:07:35,729 --> 00:07:39,529
improved but a lot of the concepts are

00:07:37,919 --> 00:07:42,930
the same a lot of the overall

00:07:39,529 --> 00:07:44,490
architectural concepts in Drupal 8 are

00:07:42,930 --> 00:07:48,779
the same as they've been for years it's

00:07:44,490 --> 00:07:51,240
just expressed in a new more consistent

00:07:48,779 --> 00:07:54,089
or industry standard vocabulary at the

00:07:51,240 --> 00:07:57,509
code level so there are a lot of new

00:07:54,089 --> 00:08:00,059
looking api's but the concepts behind

00:07:57,509 --> 00:08:02,699
them are really the same ones that you

00:08:00,059 --> 00:08:04,379
should be used to at this point and the

00:08:02,699 --> 00:08:06,419
idea of those new concepts is they

00:08:04,379 --> 00:08:09,419
really do make life easier in the long

00:08:06,419 --> 00:08:12,209
run for developers because there's more

00:08:09,419 --> 00:08:15,360
consistency in the API it's easier to

00:08:12,209 --> 00:08:18,569
test code and so forth so we'll have

00:08:15,360 --> 00:08:20,249
some examples of this again we're only

00:08:18,569 --> 00:08:23,370
going to kind of scratch the surface and

00:08:20,249 --> 00:08:25,769
sub a foundation because this is only

00:08:23,370 --> 00:08:28,669
our long talk well we have I have done

00:08:25,769 --> 00:08:33,329
this as a four-hour training before so

00:08:28,669 --> 00:08:37,409
this is the teaser version so let's

00:08:33,329 --> 00:08:39,839
start with just enough theory so this is

00:08:37,409 --> 00:08:43,560
what a PHP for application looks like

00:08:39,839 --> 00:08:45,510
you have PHP boots up and you have bunch

00:08:43,560 --> 00:08:47,399
of super Global's that get created you

00:08:45,510 --> 00:08:51,899
know dollar get dollar posts and so

00:08:47,399 --> 00:08:53,430
forth and your PHP script runs and it

00:08:51,899 --> 00:08:54,390
does some combination of calling the

00:08:53,430 --> 00:08:56,730
header function

00:08:54,390 --> 00:08:59,550
to define header strings for the

00:08:56,730 --> 00:09:00,780
response and printing out text and you

00:08:59,550 --> 00:09:03,150
hope that you get it in the right order

00:09:00,780 --> 00:09:07,500
because we don't everything breaks in

00:09:03,150 --> 00:09:08,840
annoying ways and that's the problem is

00:09:07,500 --> 00:09:12,480
that's not actually how the web works

00:09:08,840 --> 00:09:16,800
the web works more like this we have a

00:09:12,480 --> 00:09:20,490
request come in and that's over http and

00:09:16,800 --> 00:09:22,290
HTTP requests of some kind and your

00:09:20,490 --> 00:09:25,890
server does whatever it's going to do

00:09:22,290 --> 00:09:28,950
and it responds with a response which is

00:09:25,890 --> 00:09:32,130
a message from an HTTP that response

00:09:28,950 --> 00:09:35,670
that request this is subtly but

00:09:32,130 --> 00:09:38,850
importantly different because you're

00:09:35,670 --> 00:09:40,080
sending it back and forth msgs not bunch

00:09:38,850 --> 00:09:45,450
of strings that you hope are in the

00:09:40,080 --> 00:09:46,710
right order and you know one of the

00:09:45,450 --> 00:09:49,380
things we wanted to do for tuple eight

00:09:46,710 --> 00:09:54,780
was shift from the old ph before mindset

00:09:49,380 --> 00:09:56,220
to a modern and php5 HTTP mindset i'm

00:09:54,780 --> 00:10:00,510
actually using the web the way the web

00:09:56,220 --> 00:10:03,780
was designed to be used and long story

00:10:00,510 --> 00:10:06,360
short short we found another open source

00:10:03,780 --> 00:10:08,940
project called symphony who's had a

00:10:06,360 --> 00:10:13,950
component called HTTP kernel which was

00:10:08,940 --> 00:10:16,050
modeling exactly that concept in NT HP

00:10:13,950 --> 00:10:18,510
of request comes in response goes out

00:10:16,050 --> 00:10:21,390
and this was essentially what we were

00:10:18,510 --> 00:10:23,010
looking to build anyway so hey they've

00:10:21,390 --> 00:10:27,930
already built it let's use it open

00:10:23,010 --> 00:10:31,610
source for the win this is the entirety

00:10:27,930 --> 00:10:34,410
of that of that Colonel interface it's

00:10:31,610 --> 00:10:37,610
an interface with a single method called

00:10:34,410 --> 00:10:40,680
handle that takes in a request and

00:10:37,610 --> 00:10:43,230
returns response and everything else

00:10:40,680 --> 00:10:45,390
that happens inside that is your

00:10:43,230 --> 00:10:48,360
application your application lives

00:10:45,390 --> 00:10:51,600
inside that method and various other sub

00:10:48,360 --> 00:10:53,400
calls from it that takes the information

00:10:51,600 --> 00:10:56,460
of the request and returns response and

00:10:53,400 --> 00:11:00,480
that's a very powerful model to work

00:10:56,460 --> 00:11:03,750
with Drupal is what happens inside that

00:11:00,480 --> 00:11:06,960
handle method the particular colonel

00:11:03,750 --> 00:11:07,800
implementation that Drupal 8 is using is

00:11:06,960 --> 00:11:10,110
east

00:11:07,800 --> 00:11:12,420
implementation used by Symphony as well

00:11:10,110 --> 00:11:16,560
as as well as a number of other projects

00:11:12,420 --> 00:11:19,410
and it looks kind of like this so you

00:11:16,560 --> 00:11:21,899
have a request come in and then the

00:11:19,410 --> 00:11:24,420
eighth request event of fires events

00:11:21,899 --> 00:11:26,220
think object oriented hooks essentially

00:11:24,420 --> 00:11:31,079
or other hooks are a procedural version

00:11:26,220 --> 00:11:32,579
of an event model and you can think of

00:11:31,079 --> 00:11:35,279
the request event is like hook request

00:11:32,579 --> 00:11:37,440
alter essentially and a lot of stuff

00:11:35,279 --> 00:11:41,310
happens there like access control and

00:11:37,440 --> 00:11:43,589
routing then there's a controller event

00:11:41,310 --> 00:11:45,450
so part of the purpose of the request

00:11:43,589 --> 00:11:47,640
event is to find a controller which will

00:11:45,450 --> 00:11:51,110
be the piece of code that handles that

00:11:47,640 --> 00:11:53,970
particular request think Paige call back

00:11:51,110 --> 00:11:56,579
the controller events is essentially a

00:11:53,970 --> 00:11:58,140
controller alter in practice we're not

00:11:56,579 --> 00:12:00,260
really using it odds of you ever

00:11:58,140 --> 00:12:04,560
touching it yourself are pretty minimal

00:12:00,260 --> 00:12:06,630
and then the controller runs the

00:12:04,560 --> 00:12:09,209
controller as i said is essentially the

00:12:06,630 --> 00:12:11,010
same idea as a page call back it's the

00:12:09,209 --> 00:12:15,380
particular piece of code that is

00:12:11,010 --> 00:12:19,800
responsible for a particular request and

00:12:15,380 --> 00:12:22,230
that can be in theory a function and

00:12:19,800 --> 00:12:26,579
method of an object method a static

00:12:22,230 --> 00:12:29,220
class anonymous function in practice in

00:12:26,579 --> 00:12:33,450
drupal that is 99.9 percent of the time

00:12:29,220 --> 00:12:38,310
a method of an object that controller

00:12:33,450 --> 00:12:40,410
can return a response itself or some

00:12:38,310 --> 00:12:43,860
other valued and in Google's case you'll

00:12:40,410 --> 00:12:47,910
usually be returning something else and

00:12:43,860 --> 00:12:49,529
it s some kind of intermediary if you

00:12:47,910 --> 00:12:53,250
don't return respond so there is a view

00:12:49,529 --> 00:12:55,290
event which only fires if you're not

00:12:53,250 --> 00:12:57,390
don't already have a response its job is

00:12:55,290 --> 00:13:02,540
to take whatever you return like say our

00:12:57,390 --> 00:13:02,540
render array and turn that into a

00:13:03,589 --> 00:13:09,779
response so that's where the page thing

00:13:06,660 --> 00:13:12,690
happens is in that event then there's a

00:13:09,779 --> 00:13:15,600
response event again quick response

00:13:12,690 --> 00:13:18,209
alter in essence and that response gets

00:13:15,600 --> 00:13:20,960
get sent and then it's a terminate event

00:13:18,209 --> 00:13:24,920
think okay exit so the pipeline

00:13:20,960 --> 00:13:27,170
is similar to what we're used to but it

00:13:24,920 --> 00:13:28,850
has a much better set of places to hook

00:13:27,170 --> 00:13:31,820
in and the overall flow is a lot more

00:13:28,850 --> 00:13:36,560
flexible to mention these things called

00:13:31,820 --> 00:13:40,190
controllers and I said we used to think

00:13:36,560 --> 00:13:45,560
of these as page callbacks on its they

00:13:40,190 --> 00:13:47,240
live in the same place conceptually so

00:13:45,560 --> 00:13:52,300
this is your simplest possible

00:13:47,240 --> 00:13:54,980
controller it's a method of a class and

00:13:52,300 --> 00:13:57,560
returns a response object if you're not

00:13:54,980 --> 00:14:00,430
familiar with it this is PHP 5.3 and

00:13:57,560 --> 00:14:03,380
later code so classes are named spaced

00:14:00,430 --> 00:14:05,180
so we're saying the symphony component

00:14:03,380 --> 00:14:07,760
HTTP foundation response that is the

00:14:05,180 --> 00:14:10,100
full name of the class since we declare

00:14:07,760 --> 00:14:13,160
that up here at the top of file we can

00:14:10,100 --> 00:14:15,050
just say all right response and we're

00:14:13,160 --> 00:14:17,870
going to return the entire body of an

00:14:15,050 --> 00:14:19,790
HTML page and then that's the end of it

00:14:17,870 --> 00:14:21,560
there's no theming that happens we have

00:14:19,790 --> 00:14:26,000
complete control over their spots that

00:14:21,560 --> 00:14:28,100
goes back also important to note hello

00:14:26,000 --> 00:14:32,450
the hello method is the controller not

00:14:28,100 --> 00:14:34,840
the class the class is sometimes called

00:14:32,450 --> 00:14:37,370
the controller class but it is just a

00:14:34,840 --> 00:14:39,350
place to hold the actual controller the

00:14:37,370 --> 00:14:44,270
controller is the caller is that the

00:14:39,350 --> 00:14:46,010
method so this is the trivial case but

00:14:44,270 --> 00:14:49,040
you can also do something more

00:14:46,010 --> 00:14:52,670
interesting like return JSON data so

00:14:49,040 --> 00:14:56,530
there's a JSON response class which is a

00:14:52,670 --> 00:14:59,810
subclass of response and we pass it some

00:14:56,530 --> 00:15:00,890
nested array of data which has google

00:14:59,810 --> 00:15:04,000
developers we should be familiar with

00:15:00,890 --> 00:15:07,210
and it will render that into Jason and

00:15:04,000 --> 00:15:09,710
set the proper HTTP headers and

00:15:07,210 --> 00:15:12,620
formatted correctly and all of that kind

00:15:09,710 --> 00:15:14,900
of fun stuff and all of that is taken

00:15:12,620 --> 00:15:16,550
care of for us this also means if you

00:15:14,900 --> 00:15:20,350
had to do anything other than return

00:15:16,550 --> 00:15:24,470
pages in Drupal 7 you probably run into

00:15:20,350 --> 00:15:26,060
the fun hacks you had to do where you

00:15:24,470 --> 00:15:28,580
would print something yourself and then

00:15:26,060 --> 00:15:31,370
return null or you would print something

00:15:28,580 --> 00:15:34,370
yourself and then call exit please don't

00:15:31,370 --> 00:15:36,740
do that although kind of

00:15:34,370 --> 00:15:38,450
AXA go away if you return a response you

00:15:36,740 --> 00:15:40,760
have complete control over what gets

00:15:38,450 --> 00:15:43,550
sent back and the theming system is

00:15:40,760 --> 00:15:45,410
completely bypassed for most cases you

00:15:43,550 --> 00:15:47,120
don't need that but for those cases

00:15:45,410 --> 00:15:49,760
where you want to do more powerful more

00:15:47,120 --> 00:15:57,260
robust interfaces or powerful and more

00:15:49,760 --> 00:15:58,880
robust systems that is really nice there

00:15:57,260 --> 00:16:01,580
are other things you can do with the

00:15:58,880 --> 00:16:04,850
response and subclasses thereof so for

00:16:01,580 --> 00:16:06,050
example there's a string response so

00:16:04,850 --> 00:16:10,010
let's say we want to get back a lot of

00:16:06,050 --> 00:16:12,320
data create a stream response and set

00:16:10,010 --> 00:16:14,900
its header you have type CSV so we're

00:16:12,320 --> 00:16:18,470
going to return a CSV file again no

00:16:14,900 --> 00:16:21,500
theming involved then instead of trying

00:16:18,470 --> 00:16:23,120
to build up one gigantic string that is

00:16:21,500 --> 00:16:26,420
the entire CSV file which could be

00:16:23,120 --> 00:16:31,070
several megabytes in size we're going to

00:16:26,420 --> 00:16:34,520
set this callback function which this is

00:16:31,070 --> 00:16:36,589
an anonymous function in PHP 5.3 if

00:16:34,520 --> 00:16:38,060
you're not completely familiar with this

00:16:36,589 --> 00:16:39,529
syntax that's fine don't worry about

00:16:38,060 --> 00:16:44,690
that for now you won't be using it very

00:16:39,529 --> 00:16:48,320
often but the idea is this function here

00:16:44,690 --> 00:16:50,240
will get called later when we're

00:16:48,320 --> 00:16:53,600
actually generating the output which

00:16:50,240 --> 00:16:55,580
means this lots of data variable however

00:16:53,600 --> 00:16:58,070
big it is we are only going to have one

00:16:55,580 --> 00:16:59,600
record of it in memory at a time rather

00:16:58,070 --> 00:17:01,730
than building up the entire string we're

00:16:59,600 --> 00:17:03,230
just going to stream out our data set

00:17:01,730 --> 00:17:06,199
this is really good if you're doing

00:17:03,230 --> 00:17:08,800
exports or rest responses or generating

00:17:06,199 --> 00:17:11,449
a CSV file or various other things

00:17:08,800 --> 00:17:13,250
because this keeps you from blowing out

00:17:11,449 --> 00:17:17,870
the memory on your server which is

00:17:13,250 --> 00:17:19,880
generally a good thing in actual

00:17:17,870 --> 00:17:22,339
practice most of the time your

00:17:19,880 --> 00:17:24,170
controller will return a string in which

00:17:22,339 --> 00:17:29,179
case the system knows aha the string is

00:17:24,170 --> 00:17:31,309
the body of a page or a render array

00:17:29,179 --> 00:17:35,720
render arrays are still around I

00:17:31,309 --> 00:17:37,220
apologize but it controller the

00:17:35,720 --> 00:17:39,500
Praetorians a render array that render

00:17:37,220 --> 00:17:42,890
array will get rendered as the body of

00:17:39,500 --> 00:17:45,770
the overall page one important thing to

00:17:42,890 --> 00:17:48,140
note here is it's rendered as the whole

00:17:45,770 --> 00:17:51,670
page if the request is for

00:17:48,140 --> 00:17:55,160
HTML if the request from the browser is

00:17:51,670 --> 00:18:00,530
not for HTML but for say an AJAX call

00:17:55,160 --> 00:18:02,690
back or a modal dialogue then that body

00:18:00,530 --> 00:18:06,470
of the page comes back wrapped up

00:18:02,690 --> 00:18:08,930
differently which means every single

00:18:06,470 --> 00:18:11,570
page in Drupal can be rendered in a

00:18:08,930 --> 00:18:13,850
modal popup or can be loaded

00:18:11,570 --> 00:18:15,830
asynchronously from the server and just

00:18:13,850 --> 00:18:18,500
place into an existing page just by

00:18:15,830 --> 00:18:19,790
varying the accept header in the request

00:18:18,500 --> 00:18:22,450
that's something you could never do

00:18:19,790 --> 00:18:29,330
before in Drupal and is seriously cool

00:18:22,450 --> 00:18:32,300
you can also have parameters just like

00:18:29,330 --> 00:18:38,110
in page callbacks from the request so if

00:18:32,300 --> 00:18:41,890
we have a request to hello world from to

00:18:38,110 --> 00:18:45,410
notice we've got these bracketed

00:18:41,890 --> 00:18:48,260
placeholders here that maps to these

00:18:45,410 --> 00:18:50,930
variables and notice they're not in the

00:18:48,260 --> 00:18:53,060
same order they match up by name not

00:18:50,930 --> 00:18:56,050
like order so I can move these around to

00:18:53,060 --> 00:19:00,620
whatever I want and nothing breaks and

00:18:56,050 --> 00:19:02,660
then we can use those values in a render

00:19:00,620 --> 00:19:06,740
array we also can have access to the

00:19:02,660 --> 00:19:07,910
whole request if we want to in usual

00:19:06,740 --> 00:19:10,130
practice you will not need it I

00:19:07,910 --> 00:19:12,190
recommend against gap getting requests

00:19:10,130 --> 00:19:15,110
unless you need to access something like

00:19:12,190 --> 00:19:18,670
query parameters if you just need

00:19:15,110 --> 00:19:18,670
placeholders don't bother with a request

00:19:22,180 --> 00:19:29,240
then we tell the system about this

00:19:26,270 --> 00:19:32,660
controller with a llamo file this is

00:19:29,240 --> 00:19:35,690
roughly equivalent to a hook menu hook

00:19:32,660 --> 00:19:38,210
menu in Drupal 7 did about seven

00:19:35,690 --> 00:19:40,190
different things and that's a problem so

00:19:38,210 --> 00:19:43,240
as we'll see we've taken hook menu and

00:19:40,190 --> 00:19:46,040
ripped it apart into a lot of different

00:19:43,240 --> 00:19:48,800
single-purpose tools which at first

00:19:46,040 --> 00:19:51,800
blush seems like oh great more work in

00:19:48,800 --> 00:19:54,200
practice gives a lot more flexibility in

00:19:51,800 --> 00:19:55,730
terms of building and rebuilding the

00:19:54,200 --> 00:20:00,290
system so it makes a lot easier to

00:19:55,730 --> 00:20:01,549
reconfigure Drupal as needed important

00:20:00,290 --> 00:20:03,470
notes here

00:20:01,549 --> 00:20:06,499
so this is the route name every route

00:20:03,470 --> 00:20:08,840
has a machine name which is by

00:20:06,499 --> 00:20:11,119
convention module name dot something

00:20:08,840 --> 00:20:14,210
meaningful that something meaningful

00:20:11,119 --> 00:20:16,759
should not simply be the path it's a

00:20:14,210 --> 00:20:20,389
meaningful machine name not a descriptor

00:20:16,759 --> 00:20:22,639
of the path the path begins with a

00:20:20,389 --> 00:20:26,830
leading / and is the URL at which this

00:20:22,639 --> 00:20:31,369
rap should appear with placeholders

00:20:26,830 --> 00:20:35,239
under defaults we can specify default

00:20:31,369 --> 00:20:37,700
values for these placeholders as well as

00:20:35,239 --> 00:20:39,350
a couple of other special values that

00:20:37,700 --> 00:20:42,169
begin with an underscore in this case

00:20:39,350 --> 00:20:44,389
for saying the content callback that is

00:20:42,169 --> 00:20:47,059
the controller that handles the body the

00:20:44,389 --> 00:20:49,129
page is the class Drupal my module

00:20:47,059 --> 00:20:52,519
controller hello controller and the

00:20:49,129 --> 00:20:54,080
method hello world which if I didn't

00:20:52,519 --> 00:21:00,169
have a type of my slides would be dis

00:20:54,080 --> 00:21:04,549
method under requirements anything that

00:21:00,169 --> 00:21:07,220
doesn't have a leading underscore is a

00:21:04,549 --> 00:21:09,109
regular expression for these values so

00:21:07,220 --> 00:21:11,570
you can have a route that matches only

00:21:09,109 --> 00:21:14,119
if a placeholder is a string or only if

00:21:11,570 --> 00:21:17,179
it's an integer or only if it's an

00:21:14,119 --> 00:21:18,710
integer between 1 and 5 or only if it is

00:21:17,179 --> 00:21:21,919
one of these possible these three

00:21:18,710 --> 00:21:24,559
possible strings and if that test

00:21:21,919 --> 00:21:27,470
doesn't pass you'll the system will

00:21:24,559 --> 00:21:30,499
generate a 404 not found for you so all

00:21:27,470 --> 00:21:32,840
of that can be taken care of you can

00:21:30,499 --> 00:21:34,999
also specify other requirements for

00:21:32,840 --> 00:21:38,749
access control for example underscore

00:21:34,999 --> 00:21:40,129
permission access content that means the

00:21:38,749 --> 00:21:43,639
user has to have the access content

00:21:40,129 --> 00:21:44,749
permission to get this route there are

00:21:43,639 --> 00:21:46,879
you can actually have multiple

00:21:44,749 --> 00:21:49,190
requirements specified which means

00:21:46,879 --> 00:21:53,239
unlike in Drupal 7 where you had only a

00:21:49,190 --> 00:21:54,919
single access callback / menu item you

00:21:53,239 --> 00:21:56,629
could have multiple access checks /

00:21:54,919 --> 00:21:59,690
route and that the system handles

00:21:56,629 --> 00:22:06,220
negotiation of those so that's another

00:21:59,690 --> 00:22:09,039
nice thing feature so you probably think

00:22:06,220 --> 00:22:10,780
point all right enough is enough theory

00:22:09,039 --> 00:22:14,140
what what can we actually do for reals

00:22:10,780 --> 00:22:17,950
and so we're going to go through a

00:22:14,140 --> 00:22:19,270
fairly simple module here and there's a

00:22:17,950 --> 00:22:22,030
couple things I want to keep want you to

00:22:19,270 --> 00:22:24,390
keep in mind overall the way you

00:22:22,030 --> 00:22:27,460
approach Drupal is a two-step process

00:22:24,390 --> 00:22:30,100
first build a tool that saw can solve

00:22:27,460 --> 00:22:32,679
the problem you have and then wire it

00:22:30,100 --> 00:22:34,230
into the system don't just write code

00:22:32,679 --> 00:22:38,080
that solves the problem you're facing

00:22:34,230 --> 00:22:39,549
build a tool and then connect it in you

00:22:38,080 --> 00:22:41,679
should be used to this from the idea of

00:22:39,549 --> 00:22:44,049
a right a module and then you can use a

00:22:41,679 --> 00:22:48,090
module to configurate it's that the same

00:22:44,049 --> 00:22:53,140
concept taking down another level so

00:22:48,090 --> 00:22:54,909
that same idea of build a module put it

00:22:53,140 --> 00:22:56,980
in place rather than just vomiting

00:22:54,909 --> 00:22:59,320
custom code in a hard coding custom

00:22:56,980 --> 00:23:02,200
coding place that applies down at the

00:22:59,320 --> 00:23:04,659
individual component level now put

00:23:02,200 --> 00:23:07,690
another way in most cases what you'll do

00:23:04,659 --> 00:23:10,539
is extend a base class or implements an

00:23:07,690 --> 00:23:12,039
interface you show you have a class that

00:23:10,539 --> 00:23:14,890
extends something or implements an

00:23:12,039 --> 00:23:17,169
interface and then you'll tell Drupal

00:23:14,890 --> 00:23:19,360
about it and Drupal takes care of it

00:23:17,169 --> 00:23:22,539
from there which again should be fairly

00:23:19,360 --> 00:23:24,549
familiar as the idea of write a hook

00:23:22,539 --> 00:23:27,309
with the right name and drupal we'll

00:23:24,549 --> 00:23:30,010
figure it out same idea here you write a

00:23:27,309 --> 00:23:32,620
class telugu people about it usually

00:23:30,010 --> 00:23:38,679
explicitly and Google will take care of

00:23:32,620 --> 00:23:40,390
it in that telling process could take

00:23:38,679 --> 00:23:42,370
different forms depending on what it is

00:23:40,390 --> 00:23:46,120
you're telling it about and we'll see a

00:23:42,370 --> 00:23:47,799
couple of those in a moment so how do i

00:23:46,120 --> 00:23:49,960
define a module how do I tell Drupal I

00:23:47,799 --> 00:23:54,669
got a model well this couldn't get

00:23:49,960 --> 00:23:57,429
easier you have an info tamil file yamel

00:23:54,669 --> 00:24:00,070
is a configuration text file format that

00:23:57,429 --> 00:24:03,610
we're using all over Drupal now for

00:24:00,070 --> 00:24:05,230
routing files info files and so forth

00:24:03,610 --> 00:24:07,390
this is essentially the same as the info

00:24:05,230 --> 00:24:10,419
files we were using a Drupal 7 and a

00:24:07,390 --> 00:24:12,210
Drupal 6 10 of 25 except it's now Annie

00:24:10,419 --> 00:24:15,039
Amal instead of our own custom format

00:24:12,210 --> 00:24:17,380
that's it all you need is the info file

00:24:15,039 --> 00:24:19,720
that you don't need adopt module file

00:24:17,380 --> 00:24:22,330
anymore and

00:24:19,720 --> 00:24:26,309
you know that module shows up in modules

00:24:22,330 --> 00:24:28,750
page done so that couldn't be easier

00:24:26,309 --> 00:24:31,270
then you have just the code you actually

00:24:28,750 --> 00:24:35,710
going to use so for example let's put a

00:24:31,270 --> 00:24:41,200
page at a URL so we're going to create a

00:24:35,710 --> 00:24:43,140
file in called a hugs controller we're

00:24:41,200 --> 00:24:46,270
going to have a module called hugs and

00:24:43,140 --> 00:24:48,580
it's going to live in the slash modules

00:24:46,270 --> 00:24:50,230
directory in triple seven earlier we

00:24:48,580 --> 00:24:51,789
would have said never ever put modules

00:24:50,230 --> 00:24:54,580
in / modules because that's where core

00:24:51,789 --> 00:24:56,080
modules go in google 8 this is where you

00:24:54,580 --> 00:25:00,580
put them core modules have moved off to

00:24:56,080 --> 00:25:04,030
another directory so just roll with that

00:25:00,580 --> 00:25:06,640
but you have multiple called hugs inside

00:25:04,030 --> 00:25:08,710
of which we have an SRC directory which

00:25:06,640 --> 00:25:13,000
is where all of your object oriented

00:25:08,710 --> 00:25:15,940
code lives and the namespace of your

00:25:13,000 --> 00:25:18,130
code is going to be Drupal hugs that's

00:25:15,940 --> 00:25:20,440
the name of the module and then whatever

00:25:18,130 --> 00:25:26,169
else and that whatever else maps

00:25:20,440 --> 00:25:28,750
directly to the file name so this is the

00:25:26,169 --> 00:25:31,960
class hugs controller hugs controller in

00:25:28,750 --> 00:25:34,299
the controller subdirectory sub

00:25:31,960 --> 00:25:38,200
namespace from our module one to one

00:25:34,299 --> 00:25:40,840
mapping and we're going to extend from

00:25:38,200 --> 00:25:45,760
this controller base class which has

00:25:40,840 --> 00:25:48,100
some nice utilities for us and we've got

00:25:45,760 --> 00:25:50,020
our controller method called hug it's

00:25:48,100 --> 00:25:53,580
going to take two parameters to and from

00:25:50,020 --> 00:25:56,320
and we're going to just format a string

00:25:53,580 --> 00:25:58,120
using the t function our team method

00:25:56,320 --> 00:26:01,720
works the exact same way is the t

00:25:58,120 --> 00:26:03,909
function or used to accept because as a

00:26:01,720 --> 00:26:05,500
myth it's a method on the base class on

00:26:03,909 --> 00:26:08,679
controller base and there's other

00:26:05,500 --> 00:26:10,659
utility methods there that let us make

00:26:08,679 --> 00:26:12,309
it testable if you use functions inside

00:26:10,659 --> 00:26:15,250
of a class you cannot unit test the

00:26:12,309 --> 00:26:16,960
class period and a lot of work has gone

00:26:15,250 --> 00:26:21,760
into Drupal 8 to make it possible to

00:26:16,960 --> 00:26:24,100
unit test more code and so that you'll

00:26:21,760 --> 00:26:27,760
see a lot of utility methods like that

00:26:24,100 --> 00:26:29,950
that bridge to older systems but the

00:26:27,760 --> 00:26:31,140
logic of T is pretty much the same so

00:26:29,950 --> 00:26:33,220
we're just going to make a string and

00:26:31,140 --> 00:26:39,159
return that string and

00:26:33,220 --> 00:26:42,900
done and we tell drupal about it in our

00:26:39,159 --> 00:26:47,350
hugs that routing file in the module

00:26:42,900 --> 00:26:48,850
give it a path of / hug from two again

00:26:47,350 --> 00:26:51,549
notice the order here the order on the

00:26:48,850 --> 00:26:54,970
previous slide don't matter or they're

00:26:51,549 --> 00:26:56,110
not connected we're going to not give

00:26:54,970 --> 00:26:58,450
defaults for these we're going to

00:26:56,110 --> 00:27:01,720
specifier our content callback which is

00:26:58,450 --> 00:27:03,340
that method we just defined and we're

00:27:01,720 --> 00:27:06,309
going to give the page of static title

00:27:03,340 --> 00:27:10,690
of hug and require the access content

00:27:06,309 --> 00:27:15,659
permission and when we do that we go to

00:27:10,690 --> 00:27:18,460
our site / hug / from two and we format

00:27:15,659 --> 00:27:21,000
Larry sends hugs to droop lacan because

00:27:18,460 --> 00:27:25,419
drew pecan is huggable he's friendly and

00:27:21,000 --> 00:27:27,120
that's a page right one method one file

00:27:25,419 --> 00:27:29,980
to tell Drupal about it when you're done

00:27:27,120 --> 00:27:35,700
pretty much the same level of effort as

00:27:29,980 --> 00:27:41,950
in Drupal 7 with hook menu entry and the

00:27:35,700 --> 00:27:43,929
callback the codes just moved around so

00:27:41,950 --> 00:27:47,320
how do we make content t-mobile how do

00:27:43,929 --> 00:27:51,820
we make it more fancy than just a

00:27:47,320 --> 00:27:53,860
hard-coded string so for that the theme

00:27:51,820 --> 00:27:56,799
system the registration for it has not

00:27:53,860 --> 00:27:59,679
changed radically it's still a hook

00:27:56,799 --> 00:28:02,280
theme hopes are still around and they

00:27:59,679 --> 00:28:06,429
still you're still returning an array of

00:28:02,280 --> 00:28:08,919
definitions so the template so the theme

00:28:06,429 --> 00:28:12,220
is called hug paid the template file for

00:28:08,919 --> 00:28:15,909
is hug a page and we have two parameters

00:28:12,220 --> 00:28:16,780
to that's theme key from and to so this

00:28:15,909 --> 00:28:19,330
should be very familiar if you've

00:28:16,780 --> 00:28:21,070
written in Drupal 7 one other thing to

00:28:19,330 --> 00:28:24,460
note here this syntax may look a bit

00:28:21,070 --> 00:28:27,220
weird we've got this just a short

00:28:24,460 --> 00:28:31,120
bracket wrentham typing out array this

00:28:27,220 --> 00:28:32,559
is the PHP 5.4 array syntax I use it on

00:28:31,120 --> 00:28:36,280
all of my slides because it's shorter

00:28:32,559 --> 00:28:38,280
and so saves your one slides um you are

00:28:36,280 --> 00:28:40,809
free to use that or not as you'd like

00:28:38,280 --> 00:28:43,960
they are syntactically identical both

00:28:40,809 --> 00:28:45,789
this format this format for a raise the

00:28:43,960 --> 00:28:46,950
template itself however has changed

00:28:45,789 --> 00:28:50,580
dramatically

00:28:46,950 --> 00:28:56,250
drupal 7 we use PHP template in Drupal 8

00:28:50,580 --> 00:28:58,740
using something called 28 and these twig

00:28:56,250 --> 00:29:01,019
templates go in a templates directory in

00:28:58,740 --> 00:29:02,970
our module and our names whatever the

00:29:01,019 --> 00:29:07,080
thing he is or a bit of the template

00:29:02,970 --> 00:29:10,980
name is dot HTML dot twig and they look

00:29:07,080 --> 00:29:16,610
like this note in here we've got these

00:29:10,980 --> 00:29:20,220
trans and entrance variables or markers

00:29:16,610 --> 00:29:22,769
what this means is the values between

00:29:20,220 --> 00:29:25,440
these two studio tags should be

00:29:22,769 --> 00:29:28,500
translated effectively it's the same as

00:29:25,440 --> 00:29:32,130
calling T on it but it's now in HTML

00:29:28,500 --> 00:29:34,470
markup so all of the display here is at

00:29:32,130 --> 00:29:37,590
the hands of the themer you can push a

00:29:34,470 --> 00:29:40,200
lot of logic off to the template safely

00:29:37,590 --> 00:29:42,269
that you used to have to do either in

00:29:40,200 --> 00:29:43,470
your code or inter pre-process a lot of

00:29:42,269 --> 00:29:46,950
that can now just push out to the

00:29:43,470 --> 00:29:49,649
template where it belongs and now these

00:29:46,950 --> 00:29:51,480
double curly brace means print variable

00:29:49,649 --> 00:29:52,950
so we've got from and two or the

00:29:51,480 --> 00:29:55,769
variables we have we're going to print

00:29:52,950 --> 00:29:57,419
from n to because these are inside

00:29:55,769 --> 00:30:03,539
translation tags they will automatically

00:29:57,419 --> 00:30:07,649
get escapes for us and then we can

00:30:03,539 --> 00:30:09,870
simply modify our controller to say you

00:30:07,649 --> 00:30:11,610
take those parameters pass them along

00:30:09,870 --> 00:30:13,529
through the fein layer and we're done

00:30:11,610 --> 00:30:16,610
notice here the controller is really

00:30:13,529 --> 00:30:20,940
really small that's a good thing and

00:30:16,610 --> 00:30:24,750
here's our output so we have to be from

00:30:20,940 --> 00:30:27,240
its us with a strong tag and the two is

00:30:24,750 --> 00:30:28,139
an e/m tag and we're done and if you

00:30:27,240 --> 00:30:30,419
look at the source there would be a

00:30:28,139 --> 00:30:32,340
section tag around if you don't want

00:30:30,419 --> 00:30:34,440
that markup cool use whatever mark if

00:30:32,340 --> 00:30:36,559
you want or let your theme or use

00:30:34,440 --> 00:30:38,760
whatever markup he or she wants because

00:30:36,559 --> 00:30:44,710
they are the ones who should be deciding

00:30:38,760 --> 00:30:46,419
that that's their job so

00:30:44,710 --> 00:30:48,940
well and good how do we make Google

00:30:46,419 --> 00:30:52,029
configurable after all that is the point

00:30:48,940 --> 00:30:53,529
go Drupal is configuration this gets

00:30:52,029 --> 00:30:56,559
into the new configuration management

00:30:53,529 --> 00:30:59,020
system in duple 7 the way we would do

00:30:56,559 --> 00:31:01,779
this is for simple things you'd use

00:30:59,020 --> 00:31:03,279
variable get and variable set and for

00:31:01,779 --> 00:31:06,390
complex things you would roll your own

00:31:03,279 --> 00:31:09,360
table in SQL and you're on your own

00:31:06,390 --> 00:31:12,159
neither of these is a good solution

00:31:09,360 --> 00:31:17,590
least of all for deployability and also

00:31:12,159 --> 00:31:19,659
for performance so for drupal's 8 we

00:31:17,590 --> 00:31:22,510
have a new configuration system that

00:31:19,659 --> 00:31:25,990
lets you define configuration objects

00:31:22,510 --> 00:31:29,409
these configuration objects are encoded

00:31:25,990 --> 00:31:30,940
in yellow and you can interact with

00:31:29,409 --> 00:31:34,450
those objects directly without having to

00:31:30,940 --> 00:31:38,590
deal with SQL or loading and so forth

00:31:34,450 --> 00:31:41,200
and using that common API lets the core

00:31:38,590 --> 00:31:44,169
system automate a ton of things like

00:31:41,200 --> 00:31:45,850
take all your configuration and dump it

00:31:44,169 --> 00:31:47,740
out to yamo which means you can check

00:31:45,850 --> 00:31:50,409
those files in to get and do your

00:31:47,740 --> 00:31:52,390
configuration deployment that way this

00:31:50,409 --> 00:31:53,830
is way better than trying to shoehorn

00:31:52,390 --> 00:31:57,190
everything into features which was never

00:31:53,830 --> 00:32:00,190
designed to that anyway so we start off

00:31:57,190 --> 00:32:03,880
with in our hugs module we have a config

00:32:00,190 --> 00:32:06,399
directory an install directory and a

00:32:03,880 --> 00:32:08,049
settings not the Amal file and this can

00:32:06,399 --> 00:32:11,950
be any number so I can have a hug

00:32:08,049 --> 00:32:13,570
settings I could have a hug stats you

00:32:11,950 --> 00:32:15,580
some other setting for a different form

00:32:13,570 --> 00:32:18,970
potentially in this case I'm just going

00:32:15,580 --> 00:32:22,779
to define a single property default

00:32:18,970 --> 00:32:24,399
count and give it a value of three if we

00:32:22,779 --> 00:32:29,010
wanted something more complex it's just

00:32:24,399 --> 00:32:31,240
a bigger llamo file we then also need to

00:32:29,010 --> 00:32:37,330
tell Drupal what the structure of that

00:32:31,240 --> 00:32:39,640
file is with a schema I'll be honest I

00:32:37,330 --> 00:32:42,039
don't fully grok all of the pieces of

00:32:39,640 --> 00:32:44,440
this but this is a standard yamel schema

00:32:42,039 --> 00:32:47,020
format and mostly this is for

00:32:44,440 --> 00:32:49,750
translation the system will work without

00:32:47,020 --> 00:32:52,870
these I believe but you want to tell the

00:32:49,750 --> 00:32:55,000
system which values are translatable

00:32:52,870 --> 00:32:57,100
strings and then you can even translate

00:32:55,000 --> 00:32:59,610
configuration values we're not going to

00:32:57,100 --> 00:33:02,980
get into that here but

00:32:59,610 --> 00:33:04,450
that's why that's there Larry sorry to

00:33:02,980 --> 00:33:08,260
interrupt you we have what question

00:33:04,450 --> 00:33:13,020
really quickly um for the hug page

00:33:08,260 --> 00:33:17,380
template is it hug underscore page or

00:33:13,020 --> 00:33:20,950
huge underscore page dot TPL for the

00:33:17,380 --> 00:33:24,670
template deny pacheco i don't know if it

00:33:20,950 --> 00:33:26,920
was a typo or maybe through the the

00:33:24,670 --> 00:33:30,400
question it was a typo regardless is it

00:33:26,920 --> 00:33:36,090
is it just the beginning part or with

00:33:30,400 --> 00:33:40,390
the dot TPL for the template ok so the

00:33:36,090 --> 00:33:42,850
you specify the templates name in the

00:33:40,390 --> 00:33:44,470
theme hook which in the ninety-eight

00:33:42,850 --> 00:33:47,920
percent case is the same as a theme key

00:33:44,470 --> 00:33:54,630
name and then your template file will be

00:33:47,920 --> 00:33:56,590
that same string dot HTML twig

00:33:54,630 --> 00:33:58,450
technically we still support multiple

00:33:56,590 --> 00:33:59,950
fee mentions I don't think anyone's

00:33:58,450 --> 00:34:03,520
going to use a different key mention but

00:33:59,950 --> 00:34:05,430
in theory that's possible that's why

00:34:03,520 --> 00:34:14,860
there's a little bit of separation there

00:34:05,430 --> 00:34:16,930
great thank you alright so now let's

00:34:14,860 --> 00:34:18,790
look at our form and you can look at

00:34:16,930 --> 00:34:22,210
this and go oh my god wall of a wall of

00:34:18,790 --> 00:34:25,440
code not quite forms in Drupal 8 are you

00:34:22,210 --> 00:34:28,540
going to define with another class and

00:34:25,440 --> 00:34:31,840
by convention they live in the form

00:34:28,540 --> 00:34:33,430
namespace of your module that's not a

00:34:31,840 --> 00:34:34,540
hard requirement just like controllers

00:34:33,430 --> 00:34:37,000
could live anywhere by putting them

00:34:34,540 --> 00:34:40,120
under controller is the convention just

00:34:37,000 --> 00:34:42,250
for nice organization and everything

00:34:40,120 --> 00:34:46,990
here should map cleanly to something you

00:34:42,250 --> 00:34:48,850
remember from Drupal 7 so we're going to

00:34:46,990 --> 00:34:50,800
extend to there's a form interface we

00:34:48,850 --> 00:34:52,510
have to implement in practice you're

00:34:50,800 --> 00:34:54,370
going to usually either usually extend

00:34:52,510 --> 00:34:56,590
either form base or config form base

00:34:54,370 --> 00:34:59,020
config form base is the equivalent of

00:34:56,590 --> 00:35:02,020
the system settings form function from

00:34:59,020 --> 00:35:03,940
earlier Drupal versions we have a method

00:35:02,020 --> 00:35:07,810
that you regard to influence that

00:35:03,940 --> 00:35:10,910
returns your form ID and then a build

00:35:07,810 --> 00:35:12,410
form method which is

00:35:10,910 --> 00:35:18,319
actually exactly the same to build

00:35:12,410 --> 00:35:21,049
functions from from Drupal 7 form array

00:35:18,319 --> 00:35:24,289
itself is still a bunch of nested arrays

00:35:21,049 --> 00:35:25,640
and that really hasn't changed your it's

00:35:24,289 --> 00:35:29,680
just the structure around how you define

00:35:25,640 --> 00:35:32,589
them that's changed so we have a number

00:35:29,680 --> 00:35:37,309
type which is a html5 number field

00:35:32,589 --> 00:35:39,890
that's new in that interpolate title

00:35:37,309 --> 00:35:43,099
we're going to give it a title for this

00:35:39,890 --> 00:35:45,710
form elements translate that again this

00:35:43,099 --> 00:35:50,119
T utility method and provide the default

00:35:45,710 --> 00:35:52,220
value here there's a utility method for

00:35:50,119 --> 00:35:54,980
called config it's part of the forum

00:35:52,220 --> 00:35:57,859
base it gets us that hugs dot settings

00:35:54,980 --> 00:36:00,619
file we just defined our that hugs on

00:35:57,859 --> 00:36:01,880
settings object we justified so straight

00:36:00,619 --> 00:36:04,119
out of the gate as soon as you install

00:36:01,880 --> 00:36:07,460
module its default value will be 3 and

00:36:04,119 --> 00:36:10,640
so you get the default count property it

00:36:07,460 --> 00:36:12,470
will be 3 if you had more properties and

00:36:10,640 --> 00:36:14,930
you're in that particular settings

00:36:12,470 --> 00:36:20,900
object that config object you would

00:36:14,930 --> 00:36:23,450
specify those and yeah get those value

00:36:20,900 --> 00:36:26,510
as well and then you return the parents

00:36:23,450 --> 00:36:29,450
built form which is the same as calling

00:36:26,510 --> 00:36:31,970
Drupal settings form in the past gives

00:36:29,450 --> 00:36:34,460
you all the automation and then your

00:36:31,970 --> 00:36:37,400
spit form method is your you know your

00:36:34,460 --> 00:36:40,700
form submit call back in which we just

00:36:37,400 --> 00:36:42,799
grabbed that config object again set the

00:36:40,700 --> 00:36:46,970
value that the user submitted and save

00:36:42,799 --> 00:36:49,970
it and we're done now we have to tell

00:36:46,970 --> 00:36:53,119
Drupal about it again remember create an

00:36:49,970 --> 00:36:55,869
intelligible about it we're going to

00:36:53,119 --> 00:36:58,339
create a path admin config system hugs

00:36:55,869 --> 00:37:01,609
here's the wrap machine name give it a

00:36:58,339 --> 00:37:04,730
title and we're going to specify

00:37:01,609 --> 00:37:07,819
underscore for this time which says this

00:37:04,730 --> 00:37:10,490
page this route should get should give a

00:37:07,819 --> 00:37:14,299
form which form the form defined by this

00:37:10,490 --> 00:37:16,010
class and that will wire everything up

00:37:14,299 --> 00:37:18,829
for you of course we also want this to

00:37:16,010 --> 00:37:22,050
show up in the menu and so that's now a

00:37:18,829 --> 00:37:24,030
menu links yellow file

00:37:22,050 --> 00:37:25,590
the implementation behind this is

00:37:24,030 --> 00:37:29,370
currently changing but the syntax should

00:37:25,590 --> 00:37:32,100
be the same again we give it a title

00:37:29,370 --> 00:37:34,560
give it a description tell it the route

00:37:32,100 --> 00:37:37,830
name that this many linked maps to and

00:37:34,560 --> 00:37:40,710
its parent Drupal 7 would try and figure

00:37:37,830 --> 00:37:43,110
out the parentage based on the hierarchy

00:37:40,710 --> 00:37:45,000
of Link's based on the path that ended

00:37:43,110 --> 00:37:47,310
up being very convoluted and very

00:37:45,000 --> 00:37:53,670
complicated and more trouble than it's

00:37:47,310 --> 00:37:55,110
worth so now you specify it manually we

00:37:53,670 --> 00:37:56,760
defined a new permission there so we

00:37:55,110 --> 00:37:58,710
have to have a permission hook this

00:37:56,760 --> 00:38:04,250
hasn't changed at all since Drupal 7

00:37:58,710 --> 00:38:08,490
it's the exact same thing so now we have

00:38:04,250 --> 00:38:13,200
that's configuration page in the menu

00:38:08,490 --> 00:38:14,910
and here's the form with the form

00:38:13,200 --> 00:38:17,070
element we defined its title and so

00:38:14,910 --> 00:38:19,590
forth our saved configuration button is

00:38:17,070 --> 00:38:21,780
there automatically and if you're on

00:38:19,590 --> 00:38:23,250
chrome the browser will lock the same

00:38:21,780 --> 00:38:25,050
two integers and not that you enter

00:38:23,250 --> 00:38:28,080
anything else Firefox currently doesn't

00:38:25,050 --> 00:38:29,730
support number elements so it will not

00:38:28,080 --> 00:38:31,860
but Drupal will still in force that on

00:38:29,730 --> 00:38:36,710
the back end so that's all automated for

00:38:31,860 --> 00:38:39,150
you that's creating and saving values

00:38:36,710 --> 00:38:42,990
for configuration so what do we do with

00:38:39,150 --> 00:38:46,170
that now so let's go back to our

00:38:42,990 --> 00:38:49,920
controller and enhance it a little bit

00:38:46,170 --> 00:38:52,470
and add a count parameter and we'll say

00:38:49,920 --> 00:38:54,690
the count parameter lets us specify how

00:38:52,470 --> 00:38:57,570
often or how many times someone gets

00:38:54,690 --> 00:39:00,990
hugged if count specified will use that

00:38:57,570 --> 00:39:03,810
if not we'll call a config utility

00:39:00,990 --> 00:39:06,270
method get our settings file and get

00:39:03,810 --> 00:39:07,860
that default so whatever the default is

00:39:06,270 --> 00:39:15,710
we'll use it unless the user specifies

00:39:07,860 --> 00:39:15,710
one in the path and we

00:39:15,980 --> 00:39:21,570
the routing definition file so we add

00:39:18,930 --> 00:39:24,150
this extra parameter and let's give it a

00:39:21,570 --> 00:39:26,640
default value of zero zero because

00:39:24,150 --> 00:39:29,040
that's going to be false so that will if

00:39:26,640 --> 00:39:32,070
the user does not specify account will

00:39:29,040 --> 00:39:35,270
get zero and then the controller will

00:39:32,070 --> 00:39:37,490
say oh it's false therefore I will use

00:39:35,270 --> 00:39:40,850
whatever the default is in the system

00:39:37,490 --> 00:39:44,160
will also restrict it to being numeric

00:39:40,850 --> 00:39:48,090
so if someone puts in you know Larry /

00:39:44,160 --> 00:39:52,080
droop Lacan / Bob it will give a 4 or 4

00:39:48,090 --> 00:39:54,810
which is what we want we have to update

00:39:52,080 --> 00:39:57,480
the theme with a new theme key and we

00:39:54,810 --> 00:40:02,370
can even specify plural alternative in

00:39:57,480 --> 00:40:04,140
case that's the count variable is plural

00:40:02,370 --> 00:40:05,490
exact same things the format plural

00:40:04,140 --> 00:40:07,680
function in PHP between out do it

00:40:05,490 --> 00:40:11,970
directly in template to show different

00:40:07,680 --> 00:40:15,750
strings and there we go we don't specify

00:40:11,970 --> 00:40:18,090
anything in the URL then cleary hub

00:40:15,750 --> 00:40:20,910
streebek on three times if we do

00:40:18,090 --> 00:40:28,650
specifying a value than that values

00:40:20,910 --> 00:40:30,840
instead done slow so how about blocks to

00:40:28,650 --> 00:40:33,540
talk about blocks we need to first talk

00:40:30,840 --> 00:40:38,460
about something called plugins plugins

00:40:33,540 --> 00:40:40,110
are the new hotness they are if you've

00:40:38,460 --> 00:40:42,270
you see tools plugins the same kind of

00:40:40,110 --> 00:40:44,610
idea but much better implemented a

00:40:42,270 --> 00:40:49,050
plugin is a swappable user-defined piece

00:40:44,610 --> 00:40:51,690
of functionality a plug-in type be a

00:40:49,050 --> 00:40:55,680
category of plugins so all plugins

00:40:51,690 --> 00:40:58,410
belong to a plug-in type and discovery

00:40:55,680 --> 00:41:01,290
is the process of finding and cataloging

00:40:58,410 --> 00:41:04,400
all the variable a variable available I

00:41:01,290 --> 00:41:07,350
can I can talk plugins of a given type

00:41:04,400 --> 00:41:12,560
put another way you can think of this as

00:41:07,350 --> 00:41:15,180
a plug-in type it defines an interface a

00:41:12,560 --> 00:41:19,050
plug-in is a class that implements that

00:41:15,180 --> 00:41:20,550
interface and discovery is finding all

00:41:19,050 --> 00:41:23,190
plugins that are implement that

00:41:20,550 --> 00:41:24,990
interface it doesn't actually use PHP

00:41:23,190 --> 00:41:27,530
infants object or other mechanisms for

00:41:24,990 --> 00:41:30,080
that but conceptually it's the same idea

00:41:27,530 --> 00:41:32,840
really we're just abstracting and

00:41:30,080 --> 00:41:34,700
automating common oil practices so make

00:41:32,840 --> 00:41:38,120
it really easy to slop these into the

00:41:34,700 --> 00:41:39,890
system in a way that lets vui have

00:41:38,120 --> 00:41:42,260
control over which ones get used rather

00:41:39,890 --> 00:41:44,600
than the developer and that is really

00:41:42,260 --> 00:41:47,210
really important because extensibility

00:41:44,600 --> 00:41:50,750
in triple seven was kind of lame to be

00:41:47,210 --> 00:41:53,060
honest we had info hooks and that was

00:41:50,750 --> 00:41:55,370
about it anything else every module that

00:41:53,060 --> 00:41:57,200
its own thing a lot of modules leverage

00:41:55,370 --> 00:41:59,420
T tools plugins but to be perfectly

00:41:57,200 --> 00:42:01,520
honest II tools plugins are a nightmare

00:41:59,420 --> 00:42:04,040
from a developer perspective because

00:42:01,520 --> 00:42:06,590
they are trying to reimplement

00:42:04,040 --> 00:42:08,750
object-oriented ideas using nothing but

00:42:06,590 --> 00:42:12,320
page before functions and it's really

00:42:08,750 --> 00:42:14,540
gross i sorry it's gross and so there's

00:42:12,320 --> 00:42:16,400
really no commonality between different

00:42:14,540 --> 00:42:19,030
systems you learn one system you have to

00:42:16,400 --> 00:42:24,520
learn another system differently in

00:42:19,030 --> 00:42:27,590
Drupal 8 if you want a user-configurable

00:42:24,520 --> 00:42:30,470
thing you use plugins that's just your

00:42:27,590 --> 00:42:32,080
go-to tool if you want to define a new

00:42:30,470 --> 00:42:35,030
type of plugin you define an interface

00:42:32,080 --> 00:42:36,290
you have a manager class which we're not

00:42:35,030 --> 00:42:38,480
gonna get into too much detail and

00:42:36,290 --> 00:42:40,730
that's it and then modules can just slot

00:42:38,480 --> 00:42:42,430
their way into it which it really

00:42:40,730 --> 00:42:45,230
creates a learn once apply everywhere

00:42:42,430 --> 00:42:47,660
model which is what you want because

00:42:45,230 --> 00:42:50,030
that makes it a lot easier to pick up

00:42:47,660 --> 00:42:51,980
new parts of the system once you find

00:42:50,030 --> 00:42:53,780
this pattern in one place once you're

00:42:51,980 --> 00:42:56,240
comfortable with it in one place it

00:42:53,780 --> 00:42:58,520
applies to a whole lot of systems all

00:42:56,240 --> 00:43:00,440
over Drupal we're using the same plug-in

00:42:58,520 --> 00:43:03,140
architecture this is just a sampling of

00:43:00,440 --> 00:43:06,920
the systems that are now plugins which

00:43:03,140 --> 00:43:09,830
means they're a class with discovery

00:43:06,920 --> 00:43:13,610
mechanisms and you're done so let's look

00:43:09,830 --> 00:43:16,010
at locks in particular plugins if in

00:43:13,610 --> 00:43:18,770
most cases their class does need to be

00:43:16,010 --> 00:43:20,450
in a specific directory so there are

00:43:18,770 --> 00:43:23,660
actually multiple discovery mechanisms

00:43:20,450 --> 00:43:26,420
the most common is annotations which is

00:43:23,660 --> 00:43:29,600
this block here and so we're going to

00:43:26,420 --> 00:43:32,930
say blocks have to live in the plug plug

00:43:29,600 --> 00:43:35,720
in block directory plugin block main

00:43:32,930 --> 00:43:40,740
space and then their name for their

00:43:35,720 --> 00:43:43,980
class is block here call

00:43:40,740 --> 00:43:47,100
annotation it's a way of providing

00:43:43,980 --> 00:43:49,880
metadata about a class right on the

00:43:47,100 --> 00:43:52,710
class this is not PHP syntax it's a

00:43:49,880 --> 00:43:55,500
common extension that's used by a number

00:43:52,710 --> 00:44:01,470
of projects Drupal Symphony doctrines

00:43:55,500 --> 00:44:03,630
and a whole bunch of others phpunit so

00:44:01,470 --> 00:44:07,050
it's not documentation think of this as

00:44:03,630 --> 00:44:10,950
an info hook that is put right on the

00:44:07,050 --> 00:44:13,320
class rather than put somewhere else and

00:44:10,950 --> 00:44:15,740
so it has a machine name as everything

00:44:13,320 --> 00:44:20,000
does it has a translatable

00:44:15,740 --> 00:44:22,920
administrative label as a category and

00:44:20,000 --> 00:44:26,160
then we're sending a base class again

00:44:22,920 --> 00:44:28,590
and the only method we have to implement

00:44:26,160 --> 00:44:30,780
is build or we return our regular array

00:44:28,590 --> 00:44:33,119
it is whatever the output is for that

00:44:30,780 --> 00:44:38,400
block this is the entirety of a block

00:44:33,119 --> 00:44:42,150
and that gives us this on our blocks

00:44:38,400 --> 00:44:44,340
config page we have this new hug status

00:44:42,150 --> 00:44:46,350
block we're going to add note that

00:44:44,340 --> 00:44:49,170
blocks are not you could define them

00:44:46,350 --> 00:44:53,040
once and use them once they are you

00:44:49,170 --> 00:44:55,260
define a class and then it gets

00:44:53,040 --> 00:44:58,230
instantiated a whole bunch of times and

00:44:55,260 --> 00:45:00,690
can be placed on a page multiple times

00:44:58,230 --> 00:45:02,460
just like class and objects each

00:45:00,690 --> 00:45:06,030
instance is an object of that block

00:45:02,460 --> 00:45:09,900
class so if we click that this link here

00:45:06,030 --> 00:45:12,330
hug status and we get this nice pop up

00:45:09,900 --> 00:45:13,800
with the block configuration we can

00:45:12,330 --> 00:45:15,180
place it into a region this should all

00:45:13,800 --> 00:45:19,040
be familiar from previous triple

00:45:15,180 --> 00:45:22,410
versions and we now have that block

00:45:19,040 --> 00:45:23,850
sitting on the side of the page and we

00:45:22,410 --> 00:45:25,170
can make multiple of those and put them

00:45:23,850 --> 00:45:27,600
in different places if we were so

00:45:25,170 --> 00:45:32,280
inclined let's make this a little bit

00:45:27,600 --> 00:45:33,990
fancier and provide some configuration

00:45:32,280 --> 00:45:36,690
so we still need the annotation are

00:45:33,990 --> 00:45:38,609
skipping it for space reasons but we're

00:45:36,690 --> 00:45:40,200
going to add three methods here default

00:45:38,609 --> 00:45:43,380
configuration block form and block

00:45:40,200 --> 00:45:45,710
submit if you've used views plugins the

00:45:43,380 --> 00:45:47,700
past it should be very very familiar

00:45:45,710 --> 00:45:49,380
we're going to give our default

00:45:47,700 --> 00:45:52,650
configuration which is there's one key

00:45:49,380 --> 00:45:53,970
called enabled which which is true we're

00:45:52,650 --> 00:45:56,310
going to have a block form

00:45:53,970 --> 00:46:00,540
just like the block build method before

00:45:56,310 --> 00:46:03,450
where we're going to add a checkbox for

00:46:00,540 --> 00:46:05,609
enabled or not block submit just writes

00:46:03,450 --> 00:46:08,730
back to that configuration to the disk

00:46:05,609 --> 00:46:12,800
configuration array and then build can

00:46:08,730 --> 00:46:15,300
leverage that to vary its output and so

00:46:12,800 --> 00:46:17,640
we get this nice additional checkbox

00:46:15,300 --> 00:46:19,530
here if you want to override the entire

00:46:17,640 --> 00:46:21,240
settings form completely you can you

00:46:19,530 --> 00:46:25,740
should not do so in most cases but is

00:46:21,240 --> 00:46:29,240
potentially there to do so I'm going to

00:46:25,740 --> 00:46:32,099
try and go a little bit faster services

00:46:29,240 --> 00:46:34,560
this is something new in Drupal 8 that

00:46:32,099 --> 00:46:36,810
when you think about it seems weird of

00:46:34,560 --> 00:46:37,830
firsts and unfamiliar but in practice is

00:46:36,810 --> 00:46:42,540
something you should've been doing

00:46:37,830 --> 00:46:47,760
anyway just with functions so a service

00:46:42,540 --> 00:46:50,280
is an object that does something not is

00:46:47,760 --> 00:46:52,890
something does something it is a it is a

00:46:50,280 --> 00:46:56,070
doer object these doer objects are

00:46:52,890 --> 00:46:57,810
stateless meaning they are not going to

00:46:56,070 --> 00:46:59,430
change their internal values once

00:46:57,810 --> 00:47:03,000
they're created if you call a method on

00:46:59,430 --> 00:47:05,700
a service object that does not change

00:47:03,000 --> 00:47:08,190
the service object it may write to a

00:47:05,700 --> 00:47:10,609
database it may return a value but the

00:47:08,190 --> 00:47:13,380
service object itself does not change

00:47:10,609 --> 00:47:15,450
that's something you want in most cases

00:47:13,380 --> 00:47:17,849
because it makes testing a lot easier it

00:47:15,450 --> 00:47:20,790
also makes bugs harder to get started to

00:47:17,849 --> 00:47:23,220
creep in and in practice you will

00:47:20,790 --> 00:47:25,170
generally only have one of them this

00:47:23,220 --> 00:47:27,510
does not make them a singleton they do

00:47:25,170 --> 00:47:30,150
not enforce this themselves but in

00:47:27,510 --> 00:47:32,849
practice a something that's only going

00:47:30,150 --> 00:47:34,589
to exist once in your system is a good

00:47:32,849 --> 00:47:35,910
candidate for a service that's in

00:47:34,589 --> 00:47:38,070
contrast to plugins where you may

00:47:35,910 --> 00:47:41,700
instantiate multiple blocks or multiple

00:47:38,070 --> 00:47:42,839
widgets or multiple image for matters so

00:47:41,700 --> 00:47:45,240
you don't wanna make those services

00:47:42,839 --> 00:47:47,400
services you want only the one of one

00:47:45,240 --> 00:47:51,119
instance of at any given time so that's

00:47:47,400 --> 00:47:53,490
a good candidate for service so let's

00:47:51,119 --> 00:47:55,170
have a service called hug tracker that

00:47:53,490 --> 00:47:57,720
tracks information about the hugging

00:47:55,170 --> 00:48:00,589
state on a site this is just a plain old

00:47:57,720 --> 00:48:03,630
PHP class nothing special about at all

00:48:00,589 --> 00:48:05,940
we have an ad hug method and a get last

00:48:03,630 --> 00:48:09,390
recipient method and receiving

00:48:05,940 --> 00:48:12,510
at to the state system the state system

00:48:09,390 --> 00:48:14,190
is a key value store in Drupal similar

00:48:12,510 --> 00:48:17,960
to variable get variable set but

00:48:14,190 --> 00:48:21,359
designed for not configuration but

00:48:17,960 --> 00:48:23,069
values that should not be deployed so

00:48:21,359 --> 00:48:25,020
that things like the last time cron ran

00:48:23,069 --> 00:48:27,480
whether the site is in maintenance mode

00:48:25,020 --> 00:48:30,450
things like that which you really don't

00:48:27,480 --> 00:48:32,609
want to deploy from continent from a

00:48:30,450 --> 00:48:35,040
devta stage into production but you

00:48:32,609 --> 00:48:36,119
still want to track and this is a good

00:48:35,040 --> 00:48:38,520
light-weight way to track that

00:48:36,119 --> 00:48:40,380
information in this case we're just

00:48:38,520 --> 00:48:42,390
tracking two values actually one value

00:48:40,380 --> 00:48:46,230
the name of the last person to be hugged

00:48:42,390 --> 00:48:48,270
and we're taking that state system as an

00:48:46,230 --> 00:48:50,220
injected dependency meaning we're

00:48:48,270 --> 00:48:52,290
passing it into a constructor if someone

00:48:50,220 --> 00:48:54,119
says dependency injection what they mean

00:48:52,290 --> 00:48:59,400
is you pass stuff into the constructor

00:48:54,119 --> 00:49:03,089
that's all it means with Intel Drupal

00:48:59,400 --> 00:49:06,720
about it in a yellow file as yeah as

00:49:03,089 --> 00:49:09,480
always helicopter services not camel we

00:49:06,720 --> 00:49:11,760
have top-level ki called services here's

00:49:09,480 --> 00:49:14,300
the machine name of the service here is

00:49:11,760 --> 00:49:16,500
the class that we just wrote and

00:49:14,300 --> 00:49:18,240
arguments are here are the other

00:49:16,500 --> 00:49:20,880
services that you should pass into the

00:49:18,240 --> 00:49:23,310
constructor so now when we ask the

00:49:20,880 --> 00:49:26,520
service container for hey give me the

00:49:23,310 --> 00:49:29,670
hug hug tracker service Drupal will go

00:49:26,520 --> 00:49:32,069
out find this class instantiate it and

00:49:29,670 --> 00:49:36,089
pass whatever the object is for the

00:49:32,069 --> 00:49:37,920
state service into it and all of that

00:49:36,089 --> 00:49:41,880
happens for us without having to do it

00:49:37,920 --> 00:49:45,869
manual now let's go back to the

00:49:41,880 --> 00:49:49,410
controller and again wala text but it's

00:49:45,869 --> 00:49:51,420
fairly bite-sized the controller based

00:49:49,410 --> 00:49:54,240
implements an interface for us called

00:49:51,420 --> 00:49:58,109
container injection interface which

00:49:54,240 --> 00:49:59,849
means if there is a create method we're

00:49:58,109 --> 00:50:02,450
going to get the contained think of the

00:49:59,849 --> 00:50:04,710
container as a giant array of services

00:50:02,450 --> 00:50:08,099
it's really what it is it's giant array

00:50:04,710 --> 00:50:09,630
of service objects and rather than

00:50:08,099 --> 00:50:11,369
Drupal creating an instance of this

00:50:09,630 --> 00:50:14,250
class for us we're going to create that

00:50:11,369 --> 00:50:15,660
instance by saying alright create a new

00:50:14,250 --> 00:50:19,040
instance of whatever this class is

00:50:15,660 --> 00:50:20,810
that's what static means and pass

00:50:19,040 --> 00:50:23,390
as its first parameter to its

00:50:20,810 --> 00:50:25,610
constructor whatever that hug tracker

00:50:23,390 --> 00:50:28,820
service is and then we save it to a

00:50:25,610 --> 00:50:30,590
variable and that's all there is to it

00:50:28,820 --> 00:50:32,720
and in terms of making this service

00:50:30,590 --> 00:50:35,780
available to us if we wanted multiple we

00:50:32,720 --> 00:50:39,590
would just add another parameter here

00:50:35,780 --> 00:50:41,060
and save it and so forth and then the

00:50:39,590 --> 00:50:42,560
only change we're making down here in

00:50:41,060 --> 00:50:45,290
our controller is every time someone

00:50:42,560 --> 00:50:47,540
gets hugged we call the hug tracker and

00:50:45,290 --> 00:50:51,050
add a hug to it so whoever was just

00:50:47,540 --> 00:50:52,400
hugged we're going to record having the

00:50:51,050 --> 00:50:55,370
service separate from the state system

00:50:52,400 --> 00:50:57,950
lets us very how it gets stored we could

00:50:55,370 --> 00:50:59,960
potentially use entities or nodes to

00:50:57,950 --> 00:51:01,640
store this information instead if we

00:50:59,960 --> 00:51:03,110
wanted to get really fancy but that

00:51:01,640 --> 00:51:04,520
would not change this code and that's

00:51:03,110 --> 00:51:10,750
what we want the hug tracker contains

00:51:04,520 --> 00:51:14,000
our business logic and then on our block

00:51:10,750 --> 00:51:15,980
we can do the same thing we implements

00:51:14,000 --> 00:51:19,460
the block the plug-in version of that

00:51:15,980 --> 00:51:21,290
interface have a create method which is

00:51:19,460 --> 00:51:22,760
the same idea that has a few extra

00:51:21,290 --> 00:51:24,770
parameters for it we just have to pass

00:51:22,760 --> 00:51:29,410
through it's a little bit annoying but

00:51:24,770 --> 00:51:32,000
and we deal so pass in all of those

00:51:29,410 --> 00:51:34,910
parameters that are part of the plug-in

00:51:32,000 --> 00:51:37,550
system and that same service say the

00:51:34,910 --> 00:51:41,510
same service and then in our build

00:51:37,550 --> 00:51:43,520
method we say alright if we're enabled

00:51:41,510 --> 00:51:46,520
then we say who the last person to be

00:51:43,520 --> 00:51:48,830
hugged was by just grabbing that last

00:51:46,520 --> 00:51:51,530
recipients out of the service now notice

00:51:48,830 --> 00:51:54,230
this code is really readable because oh

00:51:51,530 --> 00:51:56,090
hog tracker guessed yet last for sipping

00:51:54,230 --> 00:51:57,740
it so I know exactly what I'm getting

00:51:56,090 --> 00:51:59,930
back I don't need to guess I'm the

00:51:57,740 --> 00:52:02,360
method itself says what my business

00:51:59,930 --> 00:52:04,850
logic is that's a good thing if you

00:52:02,360 --> 00:52:05,990
don't need to document that method

00:52:04,850 --> 00:52:08,540
because the method name itself

00:52:05,990 --> 00:52:10,340
documented that's good you still want to

00:52:08,540 --> 00:52:17,330
document things in general but your code

00:52:10,340 --> 00:52:19,880
should read nicely and now when we

00:52:17,330 --> 00:52:21,860
display our blog the last person will be

00:52:19,880 --> 00:52:25,310
hugged was drew pecan so we say do pecan

00:52:21,860 --> 00:52:26,540
is the last person hugged obviously your

00:52:25,310 --> 00:52:28,430
business logic could be a little bit

00:52:26,540 --> 00:52:30,230
more complex than that I would hope but

00:52:28,430 --> 00:52:33,250
hey if hugging is all you're doing with

00:52:30,230 --> 00:52:33,250
your site more power to you

00:52:33,720 --> 00:52:43,300
how about content is our last section

00:52:40,170 --> 00:52:46,510
working with content what how does that

00:52:43,300 --> 00:52:48,780
API look like a Drupal well drupal 7

00:52:46,510 --> 00:52:53,680
introduces thing called entities and

00:52:48,780 --> 00:52:55,570
Drupal 7 the API was a third baked if

00:52:53,680 --> 00:52:58,090
we're being polite it was thrown into

00:52:55,570 --> 00:53:00,700
the last second had barely worked an

00:52:58,090 --> 00:53:03,940
entity API module in country was used

00:53:00,700 --> 00:53:07,570
and consistently also had some issues

00:53:03,940 --> 00:53:09,460
with it mostly around complexity so that

00:53:07,570 --> 00:53:12,820
has been totally revamped for Drupal 8

00:53:09,460 --> 00:53:14,740
and it's much nicer all content an

00:53:12,820 --> 00:53:17,800
entity it can be anything that is a

00:53:14,740 --> 00:53:19,780
storable horrible idea with objects that

00:53:17,800 --> 00:53:22,060
is we can store it and load it the same

00:53:19,780 --> 00:53:24,760
thing again with an object think nodes

00:53:22,060 --> 00:53:27,160
users and so forth there are two kinds

00:53:24,760 --> 00:53:30,910
content entities which generally are

00:53:27,160 --> 00:53:33,790
filled and configuration entities which

00:53:30,910 --> 00:53:36,100
are a useful layer on top of the

00:53:33,790 --> 00:53:38,740
configuration system you will probably

00:53:36,100 --> 00:53:42,010
not interact with those directly but

00:53:38,740 --> 00:53:43,360
those were used say when you have that

00:53:42,010 --> 00:53:46,420
block and we were editing its

00:53:43,360 --> 00:53:47,920
configuration by just setting values on

00:53:46,420 --> 00:53:49,810
the configuration that's actually

00:53:47,920 --> 00:53:52,570
configuration object behind the scene

00:53:49,810 --> 00:53:55,810
that data could save to a configuration

00:53:52,570 --> 00:53:59,050
entity and saved just like any other

00:53:55,810 --> 00:54:02,590
configuration object and therefore that

00:53:59,050 --> 00:54:07,660
is deploying block configuration is now

00:54:02,590 --> 00:54:09,940
deployables and as I mentioned the API

00:54:07,660 --> 00:54:11,590
actually works now and there's those

00:54:09,940 --> 00:54:15,250
still some things changing it that the

00:54:11,590 --> 00:54:17,200
basic API is quite nice as far as

00:54:15,250 --> 00:54:18,130
content densities go this is the list

00:54:17,200 --> 00:54:19,870
you should be used to right now if

00:54:18,130 --> 00:54:22,000
you've worked with Drupal nodes users

00:54:19,870 --> 00:54:24,720
terms files comments I've got a couple

00:54:22,000 --> 00:54:27,550
of others now and about a dozen

00:54:24,720 --> 00:54:28,540
configuration entities there are some

00:54:27,550 --> 00:54:30,910
stuff you can do with configuration

00:54:28,540 --> 00:54:32,260
entities like I don't know if we're at

00:54:30,910 --> 00:54:37,060
the point yet where we can do a view of

00:54:32,260 --> 00:54:38,950
use but people are working on that so

00:54:37,060 --> 00:54:42,130
let's create a node let's create an

00:54:38,950 --> 00:54:43,960
article with a title and a body and a

00:54:42,130 --> 00:54:46,150
couple of tags

00:54:43,960 --> 00:54:48,640
our taxonomy terms which are another

00:54:46,150 --> 00:54:50,349
entity and so if you've worked with a

00:54:48,640 --> 00:54:52,540
Drupal 7 you know term reference is

00:54:50,349 --> 00:54:54,430
actually a reference field to these

00:54:52,540 --> 00:55:00,150
other term entities that part hasn't

00:54:54,430 --> 00:55:05,560
changed conceptually so let's make a new

00:55:00,150 --> 00:55:08,320
route at node / node / hug this

00:55:05,560 --> 00:55:10,990
placeholder is using the name of the

00:55:08,320 --> 00:55:12,910
entity node which means we will

00:55:10,990 --> 00:55:17,589
automatically try and up cast that

00:55:12,910 --> 00:55:19,510
integer to an actual node object that

00:55:17,589 --> 00:55:21,430
logic is going to change that is patch

00:55:19,510 --> 00:55:24,160
and curate now to make it not depend on

00:55:21,430 --> 00:55:25,300
the machine name here but instead depend

00:55:24,160 --> 00:55:28,150
on the type hints in the controller

00:55:25,300 --> 00:55:29,560
which we'll see in a second which is a

00:55:28,150 --> 00:55:32,410
good thing to make it possible to have

00:55:29,560 --> 00:55:37,540
multiple nodes in the same path

00:55:32,410 --> 00:55:39,760
automatically up cast so let's give it a

00:55:37,540 --> 00:55:41,170
new controller method node hug st.

00:55:39,760 --> 00:55:42,670
permission we could if we wanted to

00:55:41,170 --> 00:55:51,070
restrict this to being an integer

00:55:42,670 --> 00:55:53,380
probably should have and now let's play

00:55:51,070 --> 00:55:56,349
with that object so we've got a node

00:55:53,380 --> 00:55:58,720
it's been up cast for us by magic we're

00:55:56,349 --> 00:56:00,700
going to specify syntactically that has

00:55:58,720 --> 00:56:05,200
to be a node there's nodes are all

00:56:00,700 --> 00:56:07,630
entities are not class objects and that

00:56:05,200 --> 00:56:09,490
way if something goes wrong teach people

00:56:07,630 --> 00:56:12,150
yell at us very clearly with what we did

00:56:09,490 --> 00:56:15,460
wrong rather rather than waiting for Oh

00:56:12,150 --> 00:56:18,490
property called on non-object go figure

00:56:15,460 --> 00:56:20,589
it out yourself because it's an object

00:56:18,490 --> 00:56:23,349
we have methods on it that makes sense

00:56:20,589 --> 00:56:27,570
so for example node is published will

00:56:23,349 --> 00:56:31,690
return true or false node get owner

00:56:27,570 --> 00:56:34,869
returns the user object that is the

00:56:31,690 --> 00:56:36,460
author of that node and that object

00:56:34,869 --> 00:56:39,310
because it's an entity we can call

00:56:36,460 --> 00:56:42,010
methods on and get its label labeled is

00:56:39,310 --> 00:56:45,040
the abstracted form of no title or term

00:56:42,010 --> 00:56:47,490
name or user account name all of them

00:56:45,040 --> 00:56:51,900
are now called label so the the

00:56:47,490 --> 00:56:51,900
interface for it is very consistent

00:56:52,859 --> 00:56:57,330
additional

00:56:54,090 --> 00:57:00,030
if you want to get fields out of a an

00:56:57,330 --> 00:57:04,170
entity that API is that syntax is

00:57:00,030 --> 00:57:05,550
greatly simplified body here get this

00:57:04,170 --> 00:57:09,420
looks like it should just be a bunch of

00:57:05,550 --> 00:57:11,070
objects but this is weird these are not

00:57:09,420 --> 00:57:13,260
actually direct references there are no

00:57:11,070 --> 00:57:16,050
there's no body property sitting on the

00:57:13,260 --> 00:57:19,230
node object we're using the PHP magic

00:57:16,050 --> 00:57:21,840
get and set methods which means you

00:57:19,230 --> 00:57:24,420
could also say node method get you know

00:57:21,840 --> 00:57:27,750
property body this is a shorthand for it

00:57:24,420 --> 00:57:30,930
which is a lot nicer and if you do not

00:57:27,750 --> 00:57:34,170
specify the offsets of all fields are

00:57:30,930 --> 00:57:36,060
multi value of course as in Drupal 7 but

00:57:34,170 --> 00:57:38,880
you don't specify an offset we assume

00:57:36,060 --> 00:57:41,700
you mean the zero with one this is

00:57:38,880 --> 00:57:44,640
really really nice because if you know a

00:57:41,700 --> 00:57:46,320
field is multi value you can specify the

00:57:44,640 --> 00:57:50,820
value you want or you can iterate over

00:57:46,320 --> 00:57:52,860
it if you know it only has one value

00:57:50,820 --> 00:57:56,130
then you can just use it as if it were

00:57:52,860 --> 00:57:57,510
single value if later on it becomes

00:57:56,130 --> 00:58:00,290
multi value because you've changed some

00:57:57,510 --> 00:58:02,640
configuration the syntax doesn't break

00:58:00,290 --> 00:58:04,980
because we're just going to assume oh

00:58:02,640 --> 00:58:06,240
you meant zero worth value the first

00:58:04,980 --> 00:58:09,240
value which is what you would have had

00:58:06,240 --> 00:58:10,950
anyway so this is a lot cursor a lot

00:58:09,240 --> 00:58:13,680
more robust a lot easier to read than

00:58:10,950 --> 00:58:17,270
dealing with the field erase structure

00:58:13,680 --> 00:58:19,890
in Drupal 7 which to me is a nightmare

00:58:17,270 --> 00:58:24,950
so we're going to grab out the body

00:58:19,890 --> 00:58:27,630
value and the format for that field and

00:58:24,950 --> 00:58:29,190
run filter on it check mark up really

00:58:27,630 --> 00:58:30,300
should be turned into a service someone

00:58:29,190 --> 00:58:33,500
please do that we just haven't gotten

00:58:30,300 --> 00:58:36,240
there yet that I hope will still change

00:58:33,500 --> 00:58:38,730
we can also as I said iterate over a

00:58:36,240 --> 00:58:41,000
field because it's multi value and each

00:58:38,730 --> 00:58:47,700
of these tags are going to be an

00:58:41,000 --> 00:58:49,260
individual term reference field for any

00:58:47,700 --> 00:58:50,970
field that is a reference which means

00:58:49,260 --> 00:58:52,920
entity reference term reference and I

00:58:50,970 --> 00:58:55,590
think that's it at this point there is

00:58:52,920 --> 00:58:57,660
an entity property which gets us the

00:58:55,590 --> 00:59:02,280
actual entity that that term points to

00:58:57,660 --> 00:59:06,540
so this is get me the name of all the

00:59:02,280 --> 00:59:07,290
terms on this note in one line of really

00:59:06,540 --> 00:59:09,840
simple code

00:59:07,290 --> 00:59:12,300
this would be way harder and Drupal 7

00:59:09,840 --> 00:59:14,460
the syntax for this not fit on this

00:59:12,300 --> 00:59:16,680
slide but not fit on one slide if we

00:59:14,460 --> 00:59:19,260
were doing this in Drupal 7 this is a

00:59:16,680 --> 00:59:22,710
much easier to read much cursor much

00:59:19,260 --> 00:59:26,760
more maintainable syntax so now we've

00:59:22,710 --> 00:59:29,900
got our array of terms then we're just

00:59:26,760 --> 00:59:29,900
going to make another message and

00:59:30,020 --> 00:59:34,410
concatenate that message to our

00:59:32,190 --> 00:59:35,670
formatted value of the body not because

00:59:34,410 --> 00:59:37,950
that's a good thing to do but because

00:59:35,670 --> 00:59:40,950
it's simple enough to fit on a slide you

00:59:37,950 --> 00:59:43,770
can also return a title for the page

00:59:40,950 --> 00:59:44,940
dynamically rather than specifying it

00:59:43,770 --> 00:59:46,680
statically in the route so in this case

00:59:44,940 --> 00:59:48,930
we're going to say note label which

00:59:46,680 --> 00:59:51,810
means the no title and then specify it's

00:59:48,930 --> 00:59:56,130
a bundle bundle is the generic word for

00:59:51,810 --> 01:00:02,250
node type so in for taxonomy terms

00:59:56,130 --> 01:00:03,540
bundle would be the vocabulary users

01:00:02,250 --> 01:00:06,240
don't have a bundle for nodes of the

01:00:03,540 --> 01:00:07,470
node type again common word common

01:00:06,240 --> 01:00:10,740
method common interface which you can

01:00:07,470 --> 01:00:11,670
therefore use on any type of entity so

01:00:10,740 --> 01:00:13,770
if you want to write code that applies

01:00:11,670 --> 01:00:14,850
to all entities that becomes a lot

01:00:13,770 --> 01:00:17,070
easier is you don't need to do that

01:00:14,850 --> 01:00:18,780
weird you know get me the callback

01:00:17,070 --> 01:00:22,650
function that would get me the title if

01:00:18,780 --> 01:00:25,040
this is a entity of this type that's

01:00:22,650 --> 01:00:32,390
just gone it's just encapsulated in 200

01:00:25,040 --> 01:00:34,050
and we're done so print that and

01:00:32,390 --> 01:00:38,370
technically some of this should be done

01:00:34,050 --> 01:00:43,520
on a template but whatever and here's

01:00:38,370 --> 01:00:46,620
our output we're at node / 1 / hugs and

01:00:43,520 --> 01:00:49,830
everyone hug name of the user that was

01:00:46,620 --> 01:00:52,800
the author of this node because the

01:00:49,830 --> 01:00:57,030
tappings and here's the body for it and

01:00:52,800 --> 01:00:58,770
here's a node title and a type again not

01:00:57,030 --> 01:01:01,350
the most useful example of what you want

01:00:58,770 --> 01:01:06,960
to do but it shows how the entity API

01:01:01,350 --> 01:01:08,160
works and what the syntax is for it all

01:01:06,960 --> 01:01:11,549
right

01:01:08,160 --> 01:01:13,619
that is your taste of Drupal 8 once

01:01:11,549 --> 01:01:15,720
again I want to reiterate build a tool

01:01:13,619 --> 01:01:18,480
wire it up that's the pattern throughout

01:01:15,720 --> 01:01:21,359
the entire system build a tool wire it

01:01:18,480 --> 01:01:23,940
up if you get into that habit then it

01:01:21,359 --> 01:01:26,280
will get in Drupal 8 actually fairly

01:01:23,940 --> 01:01:28,049
straightforward and fairly easy the way

01:01:26,280 --> 01:01:30,089
you wire something up on the way you

01:01:28,049 --> 01:01:32,430
tell people about it can vary but the

01:01:30,089 --> 01:01:35,990
general approach the same the biggest

01:01:32,430 --> 01:01:39,450
difference is are you telling Drupal

01:01:35,990 --> 01:01:42,180
about something or you telling people

01:01:39,450 --> 01:01:43,770
where to put something if you're killing

01:01:42,180 --> 01:01:45,990
the Drupal about something it's probably

01:01:43,770 --> 01:01:47,970
going to be an annotation because you're

01:01:45,990 --> 01:01:50,579
describing here's the thing and here's

01:01:47,970 --> 01:01:52,170
what you need to know about it if you're

01:01:50,579 --> 01:01:53,880
saying here's the thing and here's where

01:01:52,170 --> 01:01:56,569
you should put it then it's probably

01:01:53,880 --> 01:01:59,819
going to be in a llamo file a routing

01:01:56,569 --> 01:02:03,089
file to services file menu links and so

01:01:59,819 --> 01:02:05,430
forth they're all here pay Drupal here's

01:02:03,089 --> 01:02:07,319
where you should put this thing because

01:02:05,430 --> 01:02:11,250
that is all technically configuration

01:02:07,319 --> 01:02:14,460
that means you can change almost all of

01:02:11,250 --> 01:02:17,250
that if you want to without technically

01:02:14,460 --> 01:02:18,960
hacking core there are different ways of

01:02:17,250 --> 01:02:22,470
going about that I'm not going to get

01:02:18,960 --> 01:02:25,260
into here just for time reasons but then

01:02:22,470 --> 01:02:27,599
you have a much better control over the

01:02:25,260 --> 01:02:29,359
system much more flexible system now

01:02:27,599 --> 01:02:32,059
because you have this separation between

01:02:29,359 --> 01:02:34,440
building something and wiring something

01:02:32,059 --> 01:02:36,210
just like turning on and off modules in

01:02:34,440 --> 01:02:39,720
the past same idea just taken to the

01:02:36,210 --> 01:02:43,049
next level some good general guidelines

01:02:39,720 --> 01:02:44,910
for developing Drupal 8 smaller classes

01:02:43,049 --> 01:02:47,400
are super 20 small classes and smaller

01:02:44,910 --> 01:02:50,490
methods you want very small bite-sized

01:02:47,400 --> 01:02:53,640
pieces small bite-sized pieces are

01:02:50,490 --> 01:02:56,970
easier to read easier to test easy to

01:02:53,640 --> 01:03:01,319
reuse don't worry about breaking things

01:02:56,970 --> 01:03:03,270
up into two smaller piece you can do

01:03:01,319 --> 01:03:04,740
that but better to have things more

01:03:03,270 --> 01:03:07,650
fine-grained than less it's more

01:03:04,740 --> 01:03:10,559
flexible at way an easier to test your

01:03:07,650 --> 01:03:12,119
controllers should be very simple your

01:03:10,559 --> 01:03:15,000
controller should not be doing heavy

01:03:12,119 --> 01:03:17,849
heavy business logic that's the job of a

01:03:15,000 --> 01:03:19,500
service pull a service into your

01:03:17,849 --> 01:03:21,430
controller and then your controller just

01:03:19,500 --> 01:03:23,680
access bridge from

01:03:21,430 --> 01:03:26,020
incoming requests to hear throw some

01:03:23,680 --> 01:03:27,579
values out of the request at a service

01:03:26,020 --> 01:03:32,470
let the service do its thing and return

01:03:27,579 --> 01:03:36,520
a response that you want your business

01:03:32,470 --> 01:03:39,599
logic to live off in services your forms

01:03:36,520 --> 01:03:42,130
your controllers should all be simple

01:03:39,599 --> 01:03:44,950
one thing to note I spent a great deal

01:03:42,130 --> 01:03:47,650
of time in Drupal 7 building a robust

01:03:44,950 --> 01:03:49,750
powerful easy-to-use database layer for

01:03:47,650 --> 01:03:51,099
talking to an SQL database which we did

01:03:49,750 --> 01:03:53,349
not touch in the slightest in this

01:03:51,099 --> 01:03:55,480
entire presentation there is a good

01:03:53,349 --> 01:03:57,579
chance that as a module developer you

01:03:55,480 --> 01:04:01,089
will almost never write a SQL query

01:03:57,579 --> 01:04:03,099
yourself that's a good thing if you do

01:04:01,089 --> 01:04:04,869
so it means you're bypassing all of

01:04:03,099 --> 01:04:07,480
google's automation and all of people's

01:04:04,869 --> 01:04:10,359
ability to handle configuration and

01:04:07,480 --> 01:04:13,510
deployment for you to handle saving

01:04:10,359 --> 01:04:17,079
content for you to handle hey I want to

01:04:13,510 --> 01:04:19,750
swap out SQL for mongodb or memcache or

01:04:17,079 --> 01:04:21,940
not memcache for content but you know I

01:04:19,750 --> 01:04:24,790
want to use memcache for caching I want

01:04:21,940 --> 01:04:27,270
to use Redis for my key value store for

01:04:24,790 --> 01:04:30,130
the services or the estate service I

01:04:27,270 --> 01:04:31,599
want to use MongoDB my content if you're

01:04:30,130 --> 01:04:33,880
running directly to the database you

01:04:31,599 --> 01:04:36,520
can't do that go through these ap is

01:04:33,880 --> 01:04:38,530
which means they're now swappable if

01:04:36,520 --> 01:04:40,119
you're running SQL I'd say there's a

01:04:38,530 --> 01:04:45,010
ninety percent chance you're doing it

01:04:40,119 --> 01:04:47,140
wrong also if you find yourself unable

01:04:45,010 --> 01:04:49,270
to write unit tests not simple test but

01:04:47,140 --> 01:04:54,339
PHP unit tests which we didn't go into

01:04:49,270 --> 01:04:56,710
for time reasons then odds are you're

01:04:54,339 --> 01:04:58,839
doing it wrong if you find that writing

01:04:56,710 --> 01:05:01,930
a test with PHP unit is hard because

01:04:58,839 --> 01:05:03,099
there lots of dependencies probably

01:05:01,930 --> 01:05:05,319
that's a sign you should break it up if

01:05:03,099 --> 01:05:08,559
you have code that's really easy to test

01:05:05,319 --> 01:05:10,450
and verify its right odds are your code

01:05:08,559 --> 01:05:12,640
is right in the first place not a

01:05:10,450 --> 01:05:15,099
guarantee but that's a good guideline of

01:05:12,640 --> 01:05:16,690
if it's easy to test you're probably on

01:05:15,099 --> 01:05:19,210
the right track if it's hard to test

01:05:16,690 --> 01:05:21,099
you're probably doing it wrong which

01:05:19,210 --> 01:05:22,869
means even if you're not doing full-on

01:05:21,099 --> 01:05:24,220
test-driven development of write your

01:05:22,869 --> 01:05:27,130
tests first and then do everything else

01:05:24,220 --> 01:05:29,020
honestly I don't do that either but if

01:05:27,130 --> 01:05:30,730
you find yourself struggling with your

01:05:29,020 --> 01:05:33,280
tests because you they're hard to write

01:05:30,730 --> 01:05:34,720
that's your sign to yourself oh I should

01:05:33,280 --> 01:05:36,670
go and prove this

01:05:34,720 --> 01:05:39,010
and you'll make the code easier for me

01:05:36,670 --> 01:05:40,330
to test and probably find some bugs in

01:05:39,010 --> 01:05:48,130
the process that's been my experience

01:05:40,330 --> 01:05:50,770
and that in a nutshell is Drupal 8 if

01:05:48,130 --> 01:05:52,920
this is a taste has not been enough for

01:05:50,770 --> 01:05:57,060
you as George said earlier we do offer

01:05:52,920 --> 01:05:59,109
training classes we've done this as a

01:05:57,060 --> 01:06:00,270
four-hour training we're looking to do

01:05:59,109 --> 01:06:03,040
an eight hour version of it as well

01:06:00,270 --> 01:06:05,349
we've open to presenting at conferences

01:06:03,040 --> 01:06:07,660
as well as internal training for

01:06:05,349 --> 01:06:10,680
companies in clients so that's something

01:06:07,660 --> 01:06:14,619
that interests you to get in touch and

01:06:10,680 --> 01:06:18,400
with that do we have any questions we do

01:06:14,619 --> 01:06:20,890
have one question um Larry in symphony

01:06:18,400 --> 01:06:24,400
Colin get on the container returns an

01:06:20,890 --> 01:06:27,849
instance of that service is this not the

01:06:24,400 --> 01:06:30,599
case with the container here the

01:06:27,849 --> 01:06:33,040
container we're using is the symphony

01:06:30,599 --> 01:06:37,030
service container using their service

01:06:33,040 --> 01:06:39,700
container directly so when you call get

01:06:37,030 --> 01:06:41,320
you're getting back that service object

01:06:39,700 --> 01:06:42,550
and if it already exists you're getting

01:06:41,320 --> 01:06:44,230
back the one that's already been created

01:06:42,550 --> 01:06:46,240
if it doesn't exist it's going to get

01:06:44,230 --> 01:06:48,760
created for you without you having to

01:06:46,240 --> 01:06:50,260
worry about it so yeah if you already

01:06:48,760 --> 01:06:52,270
understand how these symphony service

01:06:50,260 --> 01:06:59,250
container works ours is the exact same

01:06:52,270 --> 01:07:04,000
container great any other questions Oh

01:06:59,250 --> 01:07:07,960
Drupal 8 or palantir yes back in create

01:07:04,000 --> 01:07:12,060
method example something new static

01:07:07,960 --> 01:07:14,830
container I get something was used in

01:07:12,060 --> 01:07:19,060
Symphony container get something would

01:07:14,830 --> 01:07:21,369
return an instance of something okay let

01:07:19,060 --> 01:07:23,740
me go back to that slide because I think

01:07:21,369 --> 01:07:25,150
I'd make more sense of play we just go a

01:07:23,740 --> 01:07:30,599
little bit fast a little bit slower

01:07:25,150 --> 01:07:30,599
through that straw example great see

01:07:32,250 --> 01:07:38,970
here we go so container get

01:07:39,480 --> 01:07:43,680
this method is a static method so it's

01:07:41,970 --> 01:07:46,400
called statically on the hug hugs

01:07:43,680 --> 01:07:49,250
controller class and it's past the

01:07:46,400 --> 01:07:52,980
container this is the symphony container

01:07:49,250 --> 01:07:55,560
the get method on that container returns

01:07:52,980 --> 01:07:58,890
an instance of whatever this service is

01:07:55,560 --> 01:08:00,150
the hug hug track tractor service we are

01:07:58,890 --> 01:08:03,450
simply passing down as the first

01:08:00,150 --> 01:08:07,140
parameter to a call to create an

01:08:03,450 --> 01:08:09,330
instance of hugs controller so this

01:08:07,140 --> 01:08:12,800
could be written as the turn you could

01:08:09,330 --> 01:08:16,589
do this as you know tracker equals

01:08:12,800 --> 01:08:19,620
container get whatever and then return

01:08:16,589 --> 01:08:22,710
new hugs controller with one parameter

01:08:19,620 --> 01:08:25,859
that is tracker this is just the common

01:08:22,710 --> 01:08:26,970
all in one style at coors using because

01:08:25,859 --> 01:08:30,150
there's really no reason to have the

01:08:26,970 --> 01:08:35,910
temporary variable for that and static

01:08:30,150 --> 01:08:39,569
is PHP 5.3 code for whatever class I'm

01:08:35,910 --> 01:08:42,120
in use that it's like self in earlier

01:08:39,569 --> 01:08:43,710
versions but it works correctly so yeah

01:08:42,120 --> 01:08:45,870
this is the symphony container it is

01:08:43,710 --> 01:08:47,339
returning that service we're just

01:08:45,870 --> 01:08:50,190
passing that service directly to the

01:08:47,339 --> 01:08:51,870
constructor of hug controller does that

01:08:50,190 --> 01:08:54,569
make more sense to whoever asked that

01:08:51,870 --> 01:09:00,720
question yes thank you very much good

01:08:54,569 --> 01:09:02,069
any other questions we have one do you

01:09:00,720 --> 01:09:04,230
think that Drupal 8 will have a core

01:09:02,069 --> 01:09:08,609
user module that scales for enterprise

01:09:04,230 --> 01:09:10,290
usage a core user module of scales for

01:09:08,609 --> 01:09:11,520
enterprise usage I suppose that depends

01:09:10,290 --> 01:09:14,640
on what you mean by scales for

01:09:11,520 --> 01:09:17,460
enterprise usage google has been able to

01:09:14,640 --> 01:09:19,140
hook into say ldap for user

01:09:17,460 --> 01:09:20,670
authentication for a very long time and

01:09:19,140 --> 01:09:23,190
to the best of my knowledge that still

01:09:20,670 --> 01:09:25,259
works in probably very similar to the

01:09:23,190 --> 01:09:29,339
same way I haven't worked with that part

01:09:25,259 --> 01:09:31,980
of system directly you know obviously

01:09:29,339 --> 01:09:33,839
Drupal has been able to handle having

01:09:31,980 --> 01:09:37,080
millions of users in the system before

01:09:33,839 --> 01:09:40,620
drupal.org has been running with over a

01:09:37,080 --> 01:09:42,420
million users for some time now can you

01:09:40,620 --> 01:09:44,779
clarify what you mean by enterprise

01:09:42,420 --> 01:09:47,850
levels of user management's I'm not sure

01:09:44,779 --> 01:09:52,470
what that means specifically

01:09:47,850 --> 01:09:54,450
um you want to go to another question or

01:09:52,470 --> 01:09:58,200
that person no in the context of cachet

01:09:54,450 --> 01:10:05,220
being busted when a user logs in Oh for

01:09:58,200 --> 01:10:06,890
caching purposes um so let me go into a

01:10:05,220 --> 01:10:12,690
bit about what we're doing with cashing

01:10:06,890 --> 01:10:17,250
in Drupal 7 and earlier we have a page

01:10:12,690 --> 01:10:22,980
cache we have a ton of low-level caches

01:10:17,250 --> 01:10:24,930
and we have sort of render caching which

01:10:22,980 --> 01:10:28,980
is rendering the caching the render

01:10:24,930 --> 01:10:30,390
arrays and the page cache works for

01:10:28,980 --> 01:10:33,510
anonymous users and is completely

01:10:30,390 --> 01:10:39,000
disabled for authenticated users because

01:10:33,510 --> 01:10:40,530
the content could vary and then the

01:10:39,000 --> 01:10:43,350
render cash in practice and Drupal 7

01:10:40,530 --> 01:10:45,180
almost no one used because it was all

01:10:43,350 --> 01:10:47,610
opt-in and you had to do very special

01:10:45,180 --> 01:10:51,870
things to make it work and block caching

01:10:47,610 --> 01:10:54,060
didn't work out the time and so on so in

01:10:51,870 --> 01:10:56,400
practice Drupal 7 earlier you had to had

01:10:54,060 --> 01:10:59,040
good performance with page cache on or

01:10:56,400 --> 01:11:01,340
you hope you have okay performance with

01:10:59,040 --> 01:11:03,900
page caching off friend is logged in

01:11:01,340 --> 01:11:07,890
that basic model has been changed

01:11:03,900 --> 01:11:11,370
dramatically in Drupal AIDS however most

01:11:07,890 --> 01:11:13,020
of the reasons why the partial page

01:11:11,370 --> 01:11:15,120
caching and render kadrik and so forth

01:11:13,020 --> 01:11:18,770
that didn't work so well is because of

01:11:15,120 --> 01:11:22,080
Global's because when you had Drupal say

01:11:18,770 --> 01:11:25,020
get a formatter that was or a view

01:11:22,080 --> 01:11:27,570
plugin that was creating a output that

01:11:25,020 --> 01:11:30,450
required a CSS file it called Drupal add

01:11:27,570 --> 01:11:32,580
CSS which is a global function words in

01:11:30,450 --> 01:11:36,050
a global variable that you need a

01:11:32,580 --> 01:11:38,910
certain CSS file if that gets cached

01:11:36,050 --> 01:11:40,950
next request that output is cash but not

01:11:38,910 --> 01:11:42,450
the fact that you need to CSS file so

01:11:40,950 --> 01:11:45,480
the CSS file is missing and your page

01:11:42,450 --> 01:11:47,190
breaks which is why in practice you

01:11:45,480 --> 01:11:51,090
couldn't really do any good rendered

01:11:47,190 --> 01:11:53,460
level cashing in Drupal 8 all of those

01:11:51,090 --> 01:11:55,950
Drupal add functions are either gone or

01:11:53,460 --> 01:11:57,840
being removed you should not use that

01:11:55,950 --> 01:12:00,360
instead you will be specifying those in

01:11:57,840 --> 01:12:01,650
the render arrays which means we can

01:12:00,360 --> 01:12:04,710
actually do automatic

01:12:01,650 --> 01:12:08,670
caching of parts of the page so this is

01:12:04,710 --> 01:12:13,080
still active working progress but the

01:12:08,670 --> 01:12:16,170
idea is if you login and most of the

01:12:13,080 --> 01:12:18,120
page is still the same as it would have

01:12:16,170 --> 01:12:22,050
been for an anonymous user or for some

01:12:18,120 --> 01:12:24,540
other authenticated user then most of it

01:12:22,050 --> 01:12:26,910
will already be rendered and not have to

01:12:24,540 --> 01:12:30,000
resend everything as I still a work in

01:12:26,910 --> 01:12:31,590
progress and a lot of it is just

01:12:30,000 --> 01:12:33,330
swirling out all the places where we

01:12:31,590 --> 01:12:35,610
have Global's and global state and

01:12:33,330 --> 01:12:37,740
getting rid of them and working out with

01:12:35,610 --> 01:12:40,350
those communication channels but that's

01:12:37,740 --> 01:12:43,230
the intent there it's not quite full-on

01:12:40,350 --> 01:12:45,540
ESI at this point long term that's where

01:12:43,230 --> 01:12:50,880
we want to go I'm feeling a lot of

01:12:45,540 --> 01:12:52,350
that's gonna end up in contribs in Ewing

01:12:50,880 --> 01:12:55,020
to line up the dominoes and get the

01:12:52,350 --> 01:12:57,870
pipeline in place so that contributing

01:12:55,020 --> 01:13:01,350
like ESI as the bait way the page is

01:12:57,870 --> 01:13:03,590
built and that's that kind of thing is

01:13:01,350 --> 01:13:06,290
how we hope to really improve the

01:13:03,590 --> 01:13:10,020
performance for the typical

01:13:06,290 --> 01:13:11,880
authenticated user by being smarter

01:13:10,020 --> 01:13:15,060
about the information we have a smarter

01:13:11,880 --> 01:13:16,680
about what content is on pages where and

01:13:15,060 --> 01:13:18,320
how it gets built so that we can

01:13:16,680 --> 01:13:21,600
intelligently cash it rather than

01:13:18,320 --> 01:13:23,670
leaving that entirely to the module

01:13:21,600 --> 01:13:25,020
developer or the site builder to try and

01:13:23,670 --> 01:13:27,240
figure it out and adjust themselves

01:13:25,020 --> 01:13:28,400
because no one ever did that and so

01:13:27,240 --> 01:13:33,150
we're trying to automate that process

01:13:28,400 --> 01:13:34,590
said answer your question yes um two

01:13:33,150 --> 01:13:36,500
more questions and then I you know I

01:13:34,590 --> 01:13:39,210
want to be cognizant of everybody's time

01:13:36,500 --> 01:13:44,210
there's a question do you think that

01:13:39,210 --> 01:13:46,800
Drupal 8 will support all Drupal 7 hooks

01:13:44,210 --> 01:13:49,410
well Drupal 8 support all Drupal 7 hooks

01:13:46,800 --> 01:13:51,270
no a huge number of hooks have been

01:13:49,410 --> 01:13:53,670
removed because they either don't make

01:13:51,270 --> 01:13:57,500
sense anymore or they've been replaced

01:13:53,670 --> 01:14:00,420
by plugins or they've been replaced by

01:13:57,500 --> 01:14:02,790
something else so hooks as a concept

01:14:00,420 --> 01:14:05,280
still exist they are the only place that

01:14:02,790 --> 01:14:07,200
you should have procedural code another

01:14:05,280 --> 01:14:09,000
general rule if you are writing a

01:14:07,200 --> 01:14:13,260
function that is not a hook you're doing

01:14:09,000 --> 01:14:14,190
it wrong Oaks are still functions um

01:14:13,260 --> 01:14:18,119
that's the only procedural code you'll

01:14:14,190 --> 01:14:19,739
have if something was an info hook in

01:14:18,119 --> 01:14:22,469
the past it's probably going to be

01:14:19,739 --> 01:14:24,780
plug-in now like the block system had

01:14:22,469 --> 01:14:26,909
five or six hooks none of those exist

01:14:24,780 --> 01:14:29,090
anymore there's just hate you have a

01:14:26,909 --> 01:14:31,489
plug-in make it class you're done and

01:14:29,090 --> 01:14:34,110
that's kind of the approach there so

01:14:31,489 --> 01:14:37,289
definitely not all hooks from Drupal 7

01:14:34,110 --> 01:14:38,989
would still exist many do hook theme or

01:14:37,289 --> 01:14:40,980
permission and so forth are still there

01:14:38,989 --> 01:14:42,690
some still worked in essentially the

01:14:40,980 --> 01:14:47,699
same way others have been tweaked a

01:14:42,690 --> 01:14:50,150
little um but yeah that many hooks have

01:14:47,699 --> 01:14:53,130
gone away and that's a good thing great

01:14:50,150 --> 01:14:56,599
last question will Drupal 8 also support

01:14:53,130 --> 01:14:59,119
PHP template in addition to twig in

01:14:56,599 --> 01:15:01,320
theory it does support that right now in

01:14:59,119 --> 01:15:03,599
practice I don't think anyone is

01:15:01,320 --> 01:15:05,699
actually verifying that it stays working

01:15:03,599 --> 01:15:08,760
because I don't think anyone really

01:15:05,699 --> 01:15:13,190
wants to use it if you have a theme in

01:15:08,760 --> 01:15:15,659
Drupal 7 that's using PHP templates I

01:15:13,190 --> 01:15:18,210
would recommend rebuilding it in twig

01:15:15,659 --> 01:15:21,090
anyway not just for the syntax but

01:15:18,210 --> 01:15:22,230
because so much of the default market

01:15:21,090 --> 01:15:24,900
but the system has changed to be

01:15:22,230 --> 01:15:27,119
responsive and to take advantage of the

01:15:24,900 --> 01:15:30,329
fact that we now only are carrying about

01:15:27,119 --> 01:15:31,320
modern browsers ie9 it up that you're

01:15:30,329 --> 01:15:35,400
going to want to take advantage of that

01:15:31,320 --> 01:15:38,699
anyway I couldn't actually tell you off

01:15:35,400 --> 01:15:42,000
hand if you know a PHP template theme

01:15:38,699 --> 01:15:44,099
from people seven how easy it is to try

01:15:42,000 --> 01:15:45,269
and use PHP template in Drupal 8 for it

01:15:44,099 --> 01:15:47,070
there will still be some things that

01:15:45,269 --> 01:15:52,949
change in fact there will be some

01:15:47,070 --> 01:15:54,710
raikage so yeah in theory it's supported

01:15:52,949 --> 01:15:59,039
in practice I wouldn't bother with it

01:15:54,710 --> 01:16:02,489
okay great thank you um I'm going to

01:15:59,039 --> 01:16:04,909
switch back over to my slides now Thank

01:16:02,489 --> 01:16:04,909
You Larry

01:16:11,620 --> 01:16:17,510
thank you everyone for participating and

01:16:14,300 --> 01:16:20,150
that was a really great webinar we had a

01:16:17,510 --> 01:16:22,010
lot of positive feedback and we

01:16:20,150 --> 01:16:24,290
appreciate your time Larry and George

01:16:22,010 --> 01:16:26,210
putting this together and we know this

01:16:24,290 --> 01:16:28,130
is only the tip of the iceberg there's

01:16:26,210 --> 01:16:31,130
so much more coming up with Drupal 8 and

01:16:28,130 --> 01:16:32,600
we're really excited to see that just a

01:16:31,130 --> 01:16:34,700
really quick reminder again we have

01:16:32,600 --> 01:16:37,910
triple call in austin coming up in June

01:16:34,700 --> 01:16:41,120
we have global training days a great

01:16:37,910 --> 01:16:43,880
opportunity to get your Drupal training

01:16:41,120 --> 01:16:45,740
company showcased and really participate

01:16:43,880 --> 01:16:48,320
and get back to the community wherever

01:16:45,740 --> 01:16:52,340
you are and again we have our next

01:16:48,320 --> 01:16:54,200
webinar in May May thirteenth about how

01:16:52,340 --> 01:16:56,870
to hire great cheerful talent you can

01:16:54,200 --> 01:16:59,630
see all other listed webinars coming up

01:16:56,870 --> 01:17:01,430
and palantir is also sponsoring true

01:16:59,630 --> 01:17:03,860
count Austin so come by and talk to us

01:17:01,430 --> 01:17:05,930
at our booth we're happy to answer

01:17:03,860 --> 01:17:09,110
questions about Drupal 8 there as well

01:17:05,930 --> 01:17:11,120
awesome and I also wanted to add in

01:17:09,110 --> 01:17:12,500
when's your plate is released and I know

01:17:11,120 --> 01:17:16,600
a lot of people were asking this

01:17:12,500 --> 01:17:19,820
question there will be very in-depth

01:17:16,600 --> 01:17:23,180
conversations and training sessions from

01:17:19,820 --> 01:17:25,820
various sources on really how to utilize

01:17:23,180 --> 01:17:29,060
that and I'm sure palantir again will be

01:17:25,820 --> 01:17:32,390
a part of that as well I just wanted to

01:17:29,060 --> 01:17:34,400
mention that we have dupla sociation

01:17:32,390 --> 01:17:36,440
organization membership as well as an

01:17:34,400 --> 01:17:38,840
individual membership these are the

01:17:36,440 --> 01:17:42,290
these are the things that also help fund

01:17:38,840 --> 01:17:44,000
more scholarships grants and our servers

01:17:42,290 --> 01:17:47,060
to make sure that we have everything

01:17:44,000 --> 01:17:48,970
that we can do for our community and so

01:17:47,060 --> 01:17:52,070
much support as many people as possible

01:17:48,970 --> 01:17:53,750
so thank you to everyone that

01:17:52,070 --> 01:17:56,350
participated we had really great

01:17:53,750 --> 01:17:58,970
attendance and great questions from our

01:17:56,350 --> 01:18:01,460
attendees and also again thank you to

01:17:58,970 --> 01:18:03,980
Larry and George from palantir please

01:18:01,460 --> 01:18:06,170
feel free to get in contact with them if

01:18:03,980 --> 01:18:09,290
you have any follow-up questions or you

01:18:06,170 --> 01:18:12,020
can also call email me Lauren at

01:18:09,290 --> 01:18:14,960
associations at your beloved org and i

01:18:12,020 --> 01:18:20,389
can forward those questions on to the

01:18:14,960 --> 01:18:22,449
guys thank you guys thank you take care

01:18:20,389 --> 01:18:22,449

YouTube URL: https://www.youtube.com/watch?v=pkmzdIlvMU0


