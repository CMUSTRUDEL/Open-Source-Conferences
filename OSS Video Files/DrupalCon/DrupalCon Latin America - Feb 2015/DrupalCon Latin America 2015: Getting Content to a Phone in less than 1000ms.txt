Title: DrupalCon Latin America 2015: Getting Content to a Phone in less than 1000ms
Publication date: 2015-02-10
Playlist: DrupalCon Latin America - Feb 2015
Description: 
	Speakers: iamcarrico
We must get the content to the user, and we must do it fast. In a world constantly moving, getting a site loaded in under 1000ms is key to keeping users on your site, and engaged with your content. This is not a new idea, and the 1000ms barrier has been written about, presented, talked about in web circles for a while now--- but how do we actually do it?

Working on a Drupal site, how can we decrease bloat on a page, to get our site delivered to the user quickly and efficiently. What steps can we take to decrease that first hit, so a page is available as soon as possible, especially for a mobile user.

This talk will go over the tech, and the basics of the TCP protocol so you understand where the lag is in presenting a web page. It will describe the modules any frontend developer can use to help in presenting their content, and frontend techniques that can be applied by advanced themes to make your site the fastest on the net.
Captions: 
	00:00:00,000 --> 00:00:05,879
hello welcome to getting content to a

00:00:04,890 --> 00:00:10,740
phone in less than a thousand

00:00:05,879 --> 00:00:12,000
milliseconds my name is Ian Jericho I am

00:00:10,740 --> 00:00:13,620
what I referred to as a back into

00:00:12,000 --> 00:00:14,790
front-end development so I do all of the

00:00:13,620 --> 00:00:17,220
things on the back end to make the

00:00:14,790 --> 00:00:18,720
front-end awesome that includes DevOps

00:00:17,220 --> 00:00:20,939
performance content strategy things

00:00:18,720 --> 00:00:25,619
along that lines you can find me on

00:00:20,939 --> 00:00:28,619
drupal.org at I am carrico or github a

00:00:25,619 --> 00:00:33,270
time Carrico or twitter at IM Carrico or

00:00:28,619 --> 00:00:37,290
my website I am caricom pretty much fits

00:00:33,270 --> 00:00:41,489
online that's my username and I work at

00:00:37,290 --> 00:00:43,920
four kitchens so first of all what this

00:00:41,489 --> 00:00:45,950
session is about it's all about what

00:00:43,920 --> 00:00:48,180
affects the front end performance

00:00:45,950 --> 00:00:50,399
guidelines to better page loading as

00:00:48,180 --> 00:00:54,719
well as the protocols that we utilize

00:00:50,399 --> 00:00:57,989
things like HTTP TCP SPDY or speedy

00:00:54,719 --> 00:00:59,730
affects our slight you can find all of

00:00:57,989 --> 00:01:03,270
these slides they're all up on github at

00:00:59,730 --> 00:01:05,820
imc co / 1000 milliseconds you can also

00:01:03,270 --> 00:01:09,350
file tweet this out later and I'll do it

00:01:05,820 --> 00:01:09,350
at the end of the presentation as well

00:01:09,380 --> 00:01:17,549
so first of all why is this so important

00:01:12,240 --> 00:01:19,590
that we have fast sites large companies

00:01:17,549 --> 00:01:22,920
like Google Amazon being have done many

00:01:19,590 --> 00:01:24,570
studies into user behavior when sites

00:01:22,920 --> 00:01:27,060
are fast or if they're artificially

00:01:24,570 --> 00:01:29,430
slowed down in any way shape or form we

00:01:27,060 --> 00:01:33,930
find that when our sites are slower

00:01:29,430 --> 00:01:35,700
bounce rates increase drastically we

00:01:33,930 --> 00:01:37,829
have mental context switching happens

00:01:35,700 --> 00:01:39,869
after about a second so if a user is

00:01:37,829 --> 00:01:42,119
looking at their phone and clicks on it

00:01:39,869 --> 00:01:44,369
and says I want to go to this page and

00:01:42,119 --> 00:01:45,509
it takes over a second then instead of

00:01:44,369 --> 00:01:47,820
thing about the content on your site

00:01:45,509 --> 00:01:51,380
they're thinking about did i leave the

00:01:47,820 --> 00:01:54,119
gas on or is the oven still running or

00:01:51,380 --> 00:01:56,430
what do i need to get for my girlfriend

00:01:54,119 --> 00:02:00,079
boyfriend partner etc for Valentine's

00:01:56,430 --> 00:02:00,079
Day which is coming up

00:02:01,369 --> 00:02:06,240
there are many countries that are mostly

00:02:03,540 --> 00:02:10,679
using old devices now in the United

00:02:06,240 --> 00:02:13,500
States I think we are at almost is it

00:02:10,679 --> 00:02:16,140
forty percent of the internet usage is

00:02:13,500 --> 00:02:17,640
anmol devices everywhere else around the

00:02:16,140 --> 00:02:20,190
world it's much higher than that I think

00:02:17,640 --> 00:02:23,940
India is close to fifty five percent I

00:02:20,190 --> 00:02:27,000
could be wrong with that but if we're

00:02:23,940 --> 00:02:31,709
working with international work we have

00:02:27,000 --> 00:02:33,510
to work with mobile devices and we can't

00:02:31,709 --> 00:02:34,830
just rely that 4g is going to roll out

00:02:33,510 --> 00:02:38,040
everywhere across the globe and solve

00:02:34,830 --> 00:02:39,299
this problem for us there are multiple

00:02:38,040 --> 00:02:41,130
reasons for this not least of which is

00:02:39,299 --> 00:02:44,069
it's not gonna happen anytime soon guys

00:02:41,130 --> 00:02:49,440
sorry it's not even all over the US

00:02:44,069 --> 00:02:54,150
right now and it won't be enough to

00:02:49,440 --> 00:02:55,200
solve our problems so first of all well

00:02:54,150 --> 00:02:57,080
we're talk about front end performance

00:02:55,200 --> 00:02:59,280
the first rule that you need to remember

00:02:57,080 --> 00:03:01,560
this is by far the most important rule

00:02:59,280 --> 00:03:05,250
is that all of these rules are more like

00:03:01,560 --> 00:03:07,829
guidelines there are very few steadfast

00:03:05,250 --> 00:03:10,880
if you do this your site will be faster

00:03:07,829 --> 00:03:14,100
the one I always pull out is gzip

00:03:10,880 --> 00:03:15,780
coating which if you do on your site

00:03:14,100 --> 00:03:18,900
your site will generally load faster

00:03:15,780 --> 00:03:22,170
except if for whatever reason it would

00:03:18,900 --> 00:03:26,480
be faster to load in a single Packer

00:03:22,170 --> 00:03:29,970
response therefore causing unneeded in

00:03:26,480 --> 00:03:32,609
gzip eng which is a very very rare

00:03:29,970 --> 00:03:34,560
stance but even dead vegetables like

00:03:32,609 --> 00:03:36,329
jeezy pain also have their little

00:03:34,560 --> 00:03:42,410
footnotes of except in certain

00:03:36,329 --> 00:03:45,600
situations so with that in mind test

00:03:42,410 --> 00:03:47,579
everything everything you do needs to be

00:03:45,600 --> 00:03:49,260
test you need to look at when you're

00:03:47,579 --> 00:03:50,940
starting to look at upping the

00:03:49,260 --> 00:03:52,230
performance of your site do a baseline

00:03:50,940 --> 00:03:54,390
set of tests know where you're starting

00:03:52,230 --> 00:03:57,299
at so when you start changing things

00:03:54,390 --> 00:03:59,670
whether your aggregation g zipping

00:03:57,299 --> 00:04:01,769
silver configurations what have you you

00:03:59,670 --> 00:04:04,079
can see how much it is helping your site

00:04:01,769 --> 00:04:05,609
or if it's helping at all sometimes you

00:04:04,079 --> 00:04:08,400
might do something you think else will

00:04:05,609 --> 00:04:10,200
definitely help performance and you

00:04:08,400 --> 00:04:14,160
might actually hurts it in some places

00:04:10,200 --> 00:04:15,720
so make sure you are testing constantly

00:04:14,160 --> 00:04:18,450
there are a bunch of tools for this

00:04:15,720 --> 00:04:21,390
online you have webpagetest weiss loaves

00:04:18,450 --> 00:04:23,700
bade speed chromes devtools Casper Jas

00:04:21,390 --> 00:04:25,560
all of these are various tools I can do

00:04:23,700 --> 00:04:29,670
various different forms of front-end

00:04:25,560 --> 00:04:31,410
testing I love webpagetest they can test

00:04:29,670 --> 00:04:33,540
your site from multiple locations across

00:04:31,410 --> 00:04:36,900
the globe with multiple browsers and

00:04:33,540 --> 00:04:39,930
os's so you can quickly launch a test

00:04:36,900 --> 00:04:42,180
that will load your site five times from

00:04:39,930 --> 00:04:44,700
chrome in amsterdam and then another

00:04:42,180 --> 00:04:48,630
five times with Internet Explorer in New

00:04:44,700 --> 00:04:51,750
York and other five times with Firefox

00:04:48,630 --> 00:04:54,900
and rio de janeiro what have you so you

00:04:51,750 --> 00:04:58,230
can test internationally quite quite

00:04:54,900 --> 00:04:59,910
simply PageSpeed and why slow are both

00:04:58,230 --> 00:05:02,490
browser extensions you can load up and

00:04:59,910 --> 00:05:05,990
will give you instant information about

00:05:02,490 --> 00:05:05,990
things that will help your performance

00:05:07,370 --> 00:05:12,440
the important thing we're talking about

00:05:09,360 --> 00:05:14,790
testing is that if all of your users are

00:05:12,440 --> 00:05:18,600
let's say your entire user bases in

00:05:14,790 --> 00:05:20,550
Brazil and they all use IE 8 do not test

00:05:18,600 --> 00:05:22,680
from Amsterdam with chrome because

00:05:20,550 --> 00:05:24,300
that's not to your user base test with

00:05:22,680 --> 00:05:25,350
what your users are using so look at

00:05:24,300 --> 00:05:28,320
your Google Analytics or whatever

00:05:25,350 --> 00:05:30,060
analytics program you're looking at find

00:05:28,320 --> 00:05:32,130
out what browsers are being used where

00:05:30,060 --> 00:05:35,250
they're being utilized from and test

00:05:32,130 --> 00:05:37,410
according to that not according to what

00:05:35,250 --> 00:05:40,950
other people use so when it comes to

00:05:37,410 --> 00:05:42,480
this every single site will have a

00:05:40,950 --> 00:05:44,190
different set of testing requirements

00:05:42,480 --> 00:05:48,240
depending on where your site is and what

00:05:44,190 --> 00:05:49,770
your user base is you could easily go

00:05:48,240 --> 00:05:51,690
into an entire presentation just on

00:05:49,770 --> 00:05:53,580
automated front-end testing in fact

00:05:51,690 --> 00:05:54,960
Chris rupal has done it and instead of

00:05:53,580 --> 00:05:57,780
going deeply into all of those tools

00:05:54,960 --> 00:05:59,910
right now there's a presentation on the

00:05:57,780 --> 00:06:02,640
links here it's from drupalcon Hampshire

00:05:59,910 --> 00:06:04,620
am called automated front-end testing go

00:06:02,640 --> 00:06:06,000
watch that later it is fantastic he goes

00:06:04,620 --> 00:06:08,100
over all the tools and has great code

00:06:06,000 --> 00:06:13,800
examples on how to automate your front

00:06:08,100 --> 00:06:15,570
end testing to be beautiful so the first

00:06:13,800 --> 00:06:18,390
thing we're going to try to do when we

00:06:15,570 --> 00:06:21,060
once to load a page fast is to remove

00:06:18,390 --> 00:06:23,940
render blocking resources so the idea

00:06:21,060 --> 00:06:26,030
here is to at the very least make it

00:06:23,940 --> 00:06:28,760
seem like your site is loading very

00:06:26,030 --> 00:06:30,830
quickly ask yourself what is the render

00:06:28,760 --> 00:06:32,930
blocking resource it's kind of to see

00:06:30,830 --> 00:06:37,190
but we have a picture of Gandalf the

00:06:32,930 --> 00:06:38,450
Grey and the Balrog and the ball rod is

00:06:37,190 --> 00:06:40,490
trying to get past this tiny little

00:06:38,450 --> 00:06:41,990
bridge and Gandalf the Grey as our

00:06:40,490 --> 00:06:45,230
render blocking resourcing saying you

00:06:41,990 --> 00:06:48,770
shall not pass it is something in the

00:06:45,230 --> 00:06:50,630
header usually things like CSS files or

00:06:48,770 --> 00:06:52,760
JavaScript in the header that the

00:06:50,630 --> 00:06:55,910
browser will wait until that loads

00:06:52,760 --> 00:06:59,270
before loads the rest of the page so if

00:06:55,910 --> 00:07:01,700
we have five very large CSS files before

00:06:59,270 --> 00:07:04,130
the page will even display all five of

00:07:01,700 --> 00:07:06,850
those CSS files in these load we want to

00:07:04,130 --> 00:07:09,500
try to eliminate that as best we can

00:07:06,850 --> 00:07:12,620
it's kind of the technical houses

00:07:09,500 --> 00:07:16,130
working this is the very basic version

00:07:12,620 --> 00:07:19,030
of how a browser build a web page in a

00:07:16,130 --> 00:07:21,440
browser courtesy of either your goreck

00:07:19,030 --> 00:07:24,920
so we have our network connection which

00:07:21,440 --> 00:07:27,410
we create a network connection to server

00:07:24,920 --> 00:07:31,190
and then our network will grab the HTML

00:07:27,410 --> 00:07:32,780
and our CSS I have the HTML it starts

00:07:31,190 --> 00:07:35,090
create the Dom which I'm sure we're all

00:07:32,780 --> 00:07:37,850
very familiar with and from the CSS it

00:07:35,090 --> 00:07:40,810
creates the CSS on or the CSS object

00:07:37,850 --> 00:07:44,870
model or the psalm so I refer to it as

00:07:40,810 --> 00:07:47,600
it is not until both the DOM and a CSS

00:07:44,870 --> 00:07:50,810
object model is put together before it

00:07:47,600 --> 00:07:53,870
will create your render tree and paint

00:07:50,810 --> 00:07:55,280
anything so before anything can display

00:07:53,870 --> 00:07:58,190
on a page for goes from white to

00:07:55,280 --> 00:08:00,890
anything else you must have both the

00:07:58,190 --> 00:08:02,870
HTML and CSS so if we can reduce the

00:08:00,890 --> 00:08:05,540
amount of time that it takes to get

00:08:02,870 --> 00:08:09,020
either one of these two files the better

00:08:05,540 --> 00:08:11,450
can be there's also this kind of a site

00:08:09,020 --> 00:08:13,730
note javascript is also in there but

00:08:11,450 --> 00:08:16,220
javascript will not necessarily block it

00:08:13,730 --> 00:08:17,780
unless it's in the header of the file

00:08:16,220 --> 00:08:19,510
without a a secret of fur tag which

00:08:17,780 --> 00:08:24,320
we're going to get to a little bit later

00:08:19,510 --> 00:08:25,430
as in right now so our first thing we do

00:08:24,320 --> 00:08:28,190
to eliminate these render blocking

00:08:25,430 --> 00:08:29,960
resources is with JavaScript move all of

00:08:28,190 --> 00:08:32,000
our JavaScript to the footer this is the

00:08:29,960 --> 00:08:33,230
quickest and easiest way the farther it

00:08:32,000 --> 00:08:36,860
is in the footer won't block our

00:08:33,230 --> 00:08:39,310
rendering everything is happier you can

00:08:36,860 --> 00:08:41,680
also start utilizing a sink and defer

00:08:39,310 --> 00:08:44,080
both actually very well supported it

00:08:41,680 --> 00:08:46,510
will instead of blocking a resource it

00:08:44,080 --> 00:08:48,640
will load it asynchronously or defer the

00:08:46,510 --> 00:08:50,950
execution of the code asynchronously so

00:08:48,640 --> 00:08:53,680
that it will not block the rendering of

00:08:50,950 --> 00:08:58,690
a page defer is actually fully support

00:08:53,680 --> 00:09:01,720
in Drupal 7 and I a sink is not yet you

00:08:58,690 --> 00:09:04,420
can also in line critical CSS so any CSS

00:09:01,720 --> 00:09:06,400
that is important it needs to run

00:09:04,420 --> 00:09:07,870
immediately while the page is loading or

00:09:06,400 --> 00:09:09,550
any JavaScript sorry needs to load

00:09:07,870 --> 00:09:12,670
immediately while the page is loading

00:09:09,550 --> 00:09:14,380
just in line it don't add it to an

00:09:12,670 --> 00:09:19,900
external file put it directly in the

00:09:14,380 --> 00:09:21,550
file an HTML to do the moving your dubs

00:09:19,900 --> 00:09:23,410
through the footer and using both async

00:09:21,550 --> 00:09:25,930
and defer the magic module does all this

00:09:23,410 --> 00:09:27,310
magically you can enable the magic

00:09:25,930 --> 00:09:28,380
module click a single button and all the

00:09:27,310 --> 00:09:33,120
JavaScript will be in the footer

00:09:28,380 --> 00:09:35,170
immediately that includes all of your

00:09:33,120 --> 00:09:37,210
libraries jquery everything of that

00:09:35,170 --> 00:09:39,610
nature there's also an option to leave

00:09:37,210 --> 00:09:41,589
jquery and drupal once and some other

00:09:39,610 --> 00:09:43,240
Drupal core code in the header which

00:09:41,589 --> 00:09:46,690
will be required if you're using a

00:09:43,240 --> 00:09:48,310
WYSIWYG if you're using chk editor it's

00:09:46,690 --> 00:09:52,900
not required anymore but if using

00:09:48,310 --> 00:09:57,160
WYSIWYG it will be when it comes to CSS

00:09:52,900 --> 00:09:59,920
we have a similar idea we want to inline

00:09:57,160 --> 00:10:02,260
critical CSS so any CSS set is required

00:09:59,920 --> 00:10:05,890
for a user to view the page immediately

00:10:02,260 --> 00:10:08,350
is enlightened it's a lot of tools to do

00:10:05,890 --> 00:10:10,690
this a lot of tools and grunting gulps I

00:10:08,350 --> 00:10:14,830
can help do this there are two different

00:10:10,690 --> 00:10:18,490
ways of enlightening your CSS you can

00:10:14,830 --> 00:10:21,850
either take the CSS that's required to

00:10:18,490 --> 00:10:24,220
view a mobile size viewport or like

00:10:21,850 --> 00:10:28,020
anything above the fold and inline that

00:10:24,220 --> 00:10:30,040
or you can also optionally inline

00:10:28,020 --> 00:10:32,410
manually things that are important the

00:10:30,040 --> 00:10:34,600
header the footer or the header the

00:10:32,410 --> 00:10:38,400
content area things that are required at

00:10:34,600 --> 00:10:40,720
the very beginning both work fairly well

00:10:38,400 --> 00:10:42,190
the rest of CSS we can load

00:10:40,720 --> 00:10:46,180
asynchronously with something called

00:10:42,190 --> 00:10:47,709
load CSS this will asynchronously load

00:10:46,180 --> 00:10:49,600
all the rest of CSS is required for the

00:10:47,709 --> 00:10:51,610
page after the emotional paint has

00:10:49,600 --> 00:10:52,720
already happened so you can quickly and

00:10:51,610 --> 00:10:55,300
easily

00:10:52,720 --> 00:10:57,370
display a page and then have in the

00:10:55,300 --> 00:11:00,310
background everything else be loading in

00:10:57,370 --> 00:11:02,290
and if you use load CSS it will still

00:11:00,310 --> 00:11:08,139
keep it in your browser cache which is

00:11:02,290 --> 00:11:10,660
great there is no out of the drop out of

00:11:08,139 --> 00:11:12,879
the box Drupal solution for this yet I

00:11:10,660 --> 00:11:15,550
look forward to all y'all contributing

00:11:12,879 --> 00:11:16,990
something that can do this it's a little

00:11:15,550 --> 00:11:19,180
more complex than just moving something

00:11:16,990 --> 00:11:20,410
to the footer but there's a lot of grunt

00:11:19,180 --> 00:11:28,420
and gulp tools that will help with this

00:11:20,410 --> 00:11:30,089
as well so if we go back to our here our

00:11:28,420 --> 00:11:32,829
little chart here of how the browser

00:11:30,089 --> 00:11:34,779
builds everything obviously we need the

00:11:32,829 --> 00:11:37,779
HTML and CSS but it's also reliant on

00:11:34,779 --> 00:11:39,819
the network the network is the one layer

00:11:37,779 --> 00:11:42,069
that will always hamper our website

00:11:39,819 --> 00:11:43,810
lowing so when we're talking about

00:11:42,069 --> 00:11:46,779
loading a page we use something called

00:11:43,810 --> 00:11:52,629
we use the HTTP protocol which is based

00:11:46,779 --> 00:11:54,970
on TCP and when we talk about TCP the

00:11:52,629 --> 00:11:57,819
issue that is always comes to mind is

00:11:54,970 --> 00:12:02,079
actually i use apollo 13 as a reference

00:11:57,819 --> 00:12:03,939
but it's a great scene where houston is

00:12:02,079 --> 00:12:05,680
trying to talk to the Apollo 13 module

00:12:03,939 --> 00:12:08,379
dis landing and they're saying Odyssey

00:12:05,680 --> 00:12:10,360
this is Houston do you read and they're

00:12:08,379 --> 00:12:12,730
waiting a long time because there are a

00:12:10,360 --> 00:12:13,899
far far distance away not really saying

00:12:12,730 --> 00:12:16,000
much they're not sending a lot of data

00:12:13,899 --> 00:12:18,189
doesn't matter that they need to encrypt

00:12:16,000 --> 00:12:19,509
this orgy zip it or what have you it's

00:12:18,189 --> 00:12:22,149
just a matter of that it's traveling a

00:12:19,509 --> 00:12:24,519
very long distance the moon back so

00:12:22,149 --> 00:12:25,629
there is a delay there the same sort of

00:12:24,519 --> 00:12:27,850
principle applies when we're building

00:12:25,629 --> 00:12:29,259
website it's not necessary to the

00:12:27,850 --> 00:12:34,360
connection that's the issue when we're

00:12:29,259 --> 00:12:37,149
building websites it's the latency so we

00:12:34,360 --> 00:12:41,290
have two charts here our top chart is

00:12:37,149 --> 00:12:44,829
the page load time for a basic site and

00:12:41,290 --> 00:12:46,059
as page and compared to speed of

00:12:44,829 --> 00:12:50,550
connections we have one megabit per

00:12:46,059 --> 00:12:52,990
second two three four five as our speed

00:12:50,550 --> 00:12:54,790
increases we hit a point of diminishing

00:12:52,990 --> 00:12:57,250
returns it doesn't necessarily load that

00:12:54,790 --> 00:12:59,709
much faster once you hit three to five

00:12:57,250 --> 00:13:01,480
megabits per second its speed isn't a

00:12:59,709 --> 00:13:03,160
factor here however we talk about

00:13:01,480 --> 00:13:06,100
latency the amount of time that it takes

00:13:03,160 --> 00:13:09,779
for a packet to go from

00:13:06,100 --> 00:13:12,339
users computer to your server and back

00:13:09,779 --> 00:13:17,410
the more and more we decrease latency it

00:13:12,339 --> 00:13:19,300
is direct course some correlation to

00:13:17,410 --> 00:13:23,019
page load time so the more that we can

00:13:19,300 --> 00:13:27,790
decrease our latency we have a direct

00:13:23,019 --> 00:13:29,620
effect in loading our page faster a good

00:13:27,790 --> 00:13:31,480
way to think about this is a single

00:13:29,620 --> 00:13:34,319
round trip we're talking about a

00:13:31,480 --> 00:13:37,800
fiber-based connection or Google Fiber

00:13:34,319 --> 00:13:41,920
when a page a TCP connection is created

00:13:37,800 --> 00:13:44,050
you have an initial DNS lookup works as

00:13:41,920 --> 00:13:45,880
ok i want to go to google com what's the

00:13:44,050 --> 00:13:49,269
IP address for this takes about 40

00:13:45,880 --> 00:13:51,399
milliseconds more or less then you have

00:13:49,269 --> 00:13:53,889
a TCP connection is created so this is

00:13:51,399 --> 00:13:56,560
when your client goes your user goes

00:13:53,889 --> 00:13:58,870
okay I need a web page from you guys and

00:13:56,560 --> 00:14:04,329
the web page says okay what do you need

00:13:58,870 --> 00:14:06,550
if you're using TLS or HTTPS that a lot

00:14:04,329 --> 00:14:07,779
on an extra six hundred to 120

00:14:06,550 --> 00:14:11,860
milliseconds pen and how your servers

00:14:07,779 --> 00:14:13,750
configured of back and force of okay I

00:14:11,860 --> 00:14:15,850
want this web page cool this is a

00:14:13,750 --> 00:14:20,649
security protocol awesome this is mikey

00:14:15,850 --> 00:14:22,180
cools is our key ok we're good and then

00:14:20,649 --> 00:14:23,939
finally we have the HTTP request with a

00:14:22,180 --> 00:14:27,579
client can finally go ok give me

00:14:23,939 --> 00:14:30,160
index.html and that takes another 60

00:14:27,579 --> 00:14:33,730
milliseconds so all of these round trips

00:14:30,160 --> 00:14:37,060
just to grab an initial page or initial

00:14:33,730 --> 00:14:40,120
response from a server takes between 220

00:14:37,060 --> 00:14:41,800
and 280 milliseconds not bad we have a

00:14:40,120 --> 00:14:44,230
lot of wiggle room to get it under a

00:14:41,800 --> 00:14:48,519
thousand milliseconds with that our

00:14:44,230 --> 00:14:51,220
problem is wireless LTE will take about

00:14:48,519 --> 00:14:54,970
100 milliseconds to go from a phone to

00:14:51,220 --> 00:14:57,699
your server and back so that puts us up

00:14:54,970 --> 00:15:01,439
to 400 500 milliseconds just to get an

00:14:57,699 --> 00:15:01,439
initial response back from the server

00:15:01,800 --> 00:15:07,589
with 3g that's up to 200 milliseconds so

00:15:05,880 --> 00:15:10,260
just to get an initial response back

00:15:07,589 --> 00:15:13,110
just the server setting back the doctype

00:15:10,260 --> 00:15:16,769
at the very beginning will take 800 to

00:15:13,110 --> 00:15:18,360
1,000 milliseconds so for us to load a

00:15:16,769 --> 00:15:20,850
site in less than a thousand

00:15:18,360 --> 00:15:23,880
milliseconds on a 3g connection using

00:15:20,850 --> 00:15:29,100
https you have to return the site in the

00:15:23,880 --> 00:15:30,720
first pack of response so there are a

00:15:29,100 --> 00:15:32,250
lot of ways that we can work with our

00:15:30,720 --> 00:15:34,170
latency issues the first and most

00:15:32,250 --> 00:15:39,480
obvious our content delivery network CDN

00:15:34,170 --> 00:15:41,160
s delivery of data is limited by the

00:15:39,480 --> 00:15:42,720
speed of light we can't go any faster

00:15:41,160 --> 00:15:48,149
than that and generally by ralphs the

00:15:42,720 --> 00:15:49,560
cable is about speed of light roughly so

00:15:48,149 --> 00:15:52,500
we're going to put our content closer to

00:15:49,560 --> 00:15:56,610
the user physically closer we'll make it

00:15:52,500 --> 00:16:01,050
a little bit faster so you know my user

00:15:56,610 --> 00:16:04,200
base is in Bogota and Texas and New York

00:16:01,050 --> 00:16:07,110
City have a CDN that has contents and

00:16:04,200 --> 00:16:09,390
servers in New York City austin and

00:16:07,110 --> 00:16:14,190
bogota don't put one in Amsterdam

00:16:09,390 --> 00:16:15,630
because that will make it slower the

00:16:14,190 --> 00:16:18,480
other thing we can do is reduce

00:16:15,630 --> 00:16:19,890
redirects so we go back to that chart

00:16:18,480 --> 00:16:22,170
where we have all these back and forth

00:16:19,890 --> 00:16:24,779
just great initial connection well if we

00:16:22,170 --> 00:16:28,050
are redirecting our site to be something

00:16:24,779 --> 00:16:30,510
else then immediately that increases by

00:16:28,050 --> 00:16:32,399
another connection these be made so I

00:16:30,510 --> 00:16:34,410
really don't say reduce redirect we just

00:16:32,399 --> 00:16:36,480
remove redirects get rid of them as best

00:16:34,410 --> 00:16:39,290
as you can links that gets shared out

00:16:36,480 --> 00:16:45,870
should always be the full address

00:16:39,290 --> 00:16:47,640
redirects are very very bad and we also

00:16:45,870 --> 00:16:49,680
would like to respond everything in the

00:16:47,640 --> 00:16:51,060
first packet response so what this means

00:16:49,680 --> 00:16:53,430
is that we need to respond with an

00:16:51,060 --> 00:16:56,520
entire complete web page that the site

00:16:53,430 --> 00:17:01,860
can load with the CSS object model and

00:16:56,520 --> 00:17:06,650
the dub the HTML in according to RFC 69

00:17:01,860 --> 00:17:10,659
28 10 packets of data which is about

00:17:06,650 --> 00:17:13,059
14.6 kilobytes including headers

00:17:10,659 --> 00:17:15,369
this is our ultimate goal is to have all

00:17:13,059 --> 00:17:19,329
our sites load in the first packet

00:17:15,369 --> 00:17:25,539
response a good example this happening

00:17:19,329 --> 00:17:28,209
in the real world is my blog a CBS / I'm

00:17:25,539 --> 00:17:31,779
caricom will always load in the first

00:17:28,209 --> 00:17:33,340
pack response no matter what it has a

00:17:31,779 --> 00:17:36,309
actually we'll get into all the rest of

00:17:33,340 --> 00:17:38,739
it but it loads all of the HTML in line

00:17:36,309 --> 00:17:41,379
the first time and every time else it

00:17:38,739 --> 00:17:45,970
will load it but it loads everything

00:17:41,379 --> 00:17:48,220
else asynchronously we also have some

00:17:45,970 --> 00:17:52,570
tricks that we can do with HTTP 1.1 or

00:17:48,220 --> 00:17:57,989
what we are referred to as just HTTP the

00:17:52,570 --> 00:18:00,849
first one is called domain charting so a

00:17:57,989 --> 00:18:03,460
modern browser will create six TCP

00:18:00,849 --> 00:18:06,279
connections to download files for each

00:18:03,460 --> 00:18:09,009
domain so that means it can download six

00:18:06,279 --> 00:18:11,710
files see at the same time at any point

00:18:09,009 --> 00:18:13,659
times we grab the index.html your CSS

00:18:11,710 --> 00:18:15,340
files your other CSS files euro CSS

00:18:13,659 --> 00:18:18,519
files you have CSS files yes I know how

00:18:15,340 --> 00:18:20,649
Drupal does its aggregation however you

00:18:18,519 --> 00:18:24,669
can kind of beat this by using the main

00:18:20,649 --> 00:18:27,909
charting so having domain ww1 your

00:18:24,669 --> 00:18:29,830
domain com WR domain com and although

00:18:27,909 --> 00:18:33,249
they all lead to the same server it will

00:18:29,830 --> 00:18:35,409
mean that the your browser one set of

00:18:33,249 --> 00:18:36,999
having six connections can have 12 or 18

00:18:35,409 --> 00:18:38,889
so if you have a lot of resources that

00:18:36,999 --> 00:18:40,379
need to load you can have multiple

00:18:38,889 --> 00:18:44,859
different domains that will

00:18:40,379 --> 00:18:46,749
synchronously load all those files we

00:18:44,859 --> 00:18:47,859
also do concatenation this is built into

00:18:46,749 --> 00:18:51,820
Drupal where we put all our files

00:18:47,859 --> 00:18:53,259
together we instead of going getting six

00:18:51,820 --> 00:18:54,519
files which will require six TCP

00:18:53,259 --> 00:18:56,739
connections will require more and more

00:18:54,519 --> 00:18:59,889
back and forth try to send only one

00:18:56,739 --> 00:19:04,299
which will less latency less back and

00:18:59,889 --> 00:19:06,340
forth faster website we also have

00:19:04,299 --> 00:19:08,529
spriting which is the same ideas

00:19:06,340 --> 00:19:09,999
concatenation except with images where

00:19:08,529 --> 00:19:12,070
we put all our images in a single file

00:19:09,999 --> 00:19:13,989
and with CSS but the correct one in

00:19:12,070 --> 00:19:16,359
place so instead of grabbing 20 small

00:19:13,989 --> 00:19:18,970
files we grab one big one which again

00:19:16,359 --> 00:19:21,820
cuts on TCP connections cuts down

00:19:18,970 --> 00:19:24,200
latency faster website

00:19:21,820 --> 00:19:28,970
we also have inlining of assets instead

00:19:24,200 --> 00:19:32,269
of loading all of our CSS files with you

00:19:28,970 --> 00:19:34,070
know every single file is a single is an

00:19:32,269 --> 00:19:39,860
LTS be request more back and forth in

00:19:34,070 --> 00:19:41,240
line the necessary resources and the

00:19:39,860 --> 00:19:42,769
most important thing you remember is

00:19:41,240 --> 00:19:44,779
that the fast request that you'll ever

00:19:42,769 --> 00:19:46,580
make is the one that you don't if

00:19:44,779 --> 00:19:48,799
there's something you don't need on your

00:19:46,580 --> 00:19:51,110
site you shouldn't be loading it so if

00:19:48,799 --> 00:19:53,679
you have a good example I saw a while

00:19:51,110 --> 00:19:56,750
back because there was a site that

00:19:53,679 --> 00:19:59,840
loaded like six different sprites for

00:19:56,750 --> 00:20:02,929
their six different subdomains on every

00:19:59,840 --> 00:20:04,100
single one of those domains it was you

00:20:02,929 --> 00:20:06,409
don't need to do that you only load the

00:20:04,100 --> 00:20:07,610
one relative to that domain was because

00:20:06,409 --> 00:20:08,870
they put everything together that

00:20:07,610 --> 00:20:10,220
they're making all these actually

00:20:08,870 --> 00:20:16,220
requests are never actually sewn on the

00:20:10,220 --> 00:20:19,250
page don't do that these are all tricks

00:20:16,220 --> 00:20:21,350
with HP 1.1 but luckily Google has been

00:20:19,250 --> 00:20:24,649
selling a lot of work in what's called

00:20:21,350 --> 00:20:27,700
the speedy protocol spdy or HTTP 2.0 as

00:20:24,649 --> 00:20:33,429
it will be called once it's finalized

00:20:27,700 --> 00:20:36,259
speedy HD 10 ish it's like Speed Racer

00:20:33,429 --> 00:20:39,080
it's a lot faster so Google did a lot of

00:20:36,259 --> 00:20:40,789
research into how to all these issues

00:20:39,080 --> 00:20:43,429
we're having wyd latency is causing such

00:20:40,789 --> 00:20:49,360
an issue and they created a new protocol

00:20:43,429 --> 00:20:52,309
called speeding and what is it it uses

00:20:49,360 --> 00:20:54,889
multiplex streams so it's a fancy way of

00:20:52,309 --> 00:20:56,899
saying with HTTP 1.1 we have to create a

00:20:54,889 --> 00:20:58,970
new TCP connection for every file that

00:20:56,899 --> 00:21:01,730
we want to use instead it reuses the

00:20:58,970 --> 00:21:03,769
same TCP connection and downloads

00:21:01,730 --> 00:21:05,960
everything in a single screen so instead

00:21:03,769 --> 00:21:07,820
of having to create six connections and

00:21:05,960 --> 00:21:09,440
go back and forth six times great all

00:21:07,820 --> 00:21:11,120
those connections it will use a single

00:21:09,440 --> 00:21:13,309
connection thus reducing the amount of

00:21:11,120 --> 00:21:14,960
light and see that's required and the

00:21:13,309 --> 00:21:18,639
multiplex streams will allow multiple

00:21:14,960 --> 00:21:20,539
files to go all on the same connection

00:21:18,639 --> 00:21:21,860
because everything's going along the

00:21:20,539 --> 00:21:24,789
same connection it also allows her

00:21:21,860 --> 00:21:27,440
request prioritization so you can say

00:21:24,789 --> 00:21:30,980
main.css is more important than trivial

00:21:27,440 --> 00:21:33,350
CSS and it will make sure that main dot

00:21:30,980 --> 00:21:35,139
CSS always loads first over anything

00:21:33,350 --> 00:21:39,080
else

00:21:35,139 --> 00:21:41,240
my favorite part it allows for currently

00:21:39,080 --> 00:21:44,389
when we are loading web page with HTTP

00:21:41,240 --> 00:21:46,490
1.1 the server will go ok give me index

00:21:44,389 --> 00:21:49,429
at HTML it will grab it it'll start

00:21:46,490 --> 00:21:52,009
parsing it and go okay i need main dot

00:21:49,429 --> 00:21:57,110
CSS and it'll say okay IE main dot CSS

00:21:52,009 --> 00:21:58,940
now with speedy instead of the clients

00:21:57,110 --> 00:22:00,980
always having to go and request assets

00:21:58,940 --> 00:22:02,929
the server can push it so i can say here

00:22:00,980 --> 00:22:06,080
is index.html and you're also want any

00:22:02,929 --> 00:22:07,700
main dot CSS and scripts jas and it will

00:22:06,080 --> 00:22:12,259
start sending that along without another

00:22:07,700 --> 00:22:15,049
need for a full request being made it'll

00:22:12,259 --> 00:22:16,940
also removes redundant headers so if you

00:22:15,049 --> 00:22:18,710
looked in chrome and looked at the

00:22:16,940 --> 00:22:19,700
headers that are sent back and forth

00:22:18,710 --> 00:22:22,249
between the server that's extra data

00:22:19,700 --> 00:22:24,139
that's being sent back and forth speedy

00:22:22,249 --> 00:22:27,110
will change that by only sending headers

00:22:24,139 --> 00:22:28,789
that have changed so if you all have the

00:22:27,110 --> 00:22:30,320
same headers of this is my you know

00:22:28,789 --> 00:22:31,730
cookie or what have you it doesn't need

00:22:30,320 --> 00:22:35,450
to be sent back and forth every time it

00:22:31,730 --> 00:22:36,799
will only be sent once it also

00:22:35,450 --> 00:22:38,720
compresses the headers so there's basic

00:22:36,799 --> 00:22:40,549
gzip compression to make sure that

00:22:38,720 --> 00:22:44,509
headers are compressed therefore less

00:22:40,549 --> 00:22:46,730
data a little bit faster certainly with

00:22:44,509 --> 00:22:48,110
HP 2 point 0 / speedy we're going to

00:22:46,730 --> 00:22:52,249
have you doing different tricks than we

00:22:48,110 --> 00:22:54,740
would with a cv 1.1 do not use the main

00:22:52,249 --> 00:22:57,409
charting you're going to find a trend on

00:22:54,740 --> 00:22:59,330
this one because we're using a single

00:22:57,409 --> 00:23:01,490
TCP connection it will actually hurt

00:22:59,330 --> 00:23:04,249
your speed if you are sharding domains

00:23:01,490 --> 00:23:05,509
because instead of using a single TCP

00:23:04,249 --> 00:23:08,029
request we're going to be creating more

00:23:05,509 --> 00:23:12,440
and more with speeding you can utilize

00:23:08,029 --> 00:23:16,039
only one concatenation can hurt

00:23:12,440 --> 00:23:17,840
performance so this was kind of a mind

00:23:16,039 --> 00:23:19,999
boggle for me when I first heard it but

00:23:17,840 --> 00:23:23,059
if your concatenate your files together

00:23:19,999 --> 00:23:24,409
and let's say one of your files gets

00:23:23,059 --> 00:23:25,940
changed fairly frequently cuz it's code

00:23:24,409 --> 00:23:27,559
that's being altered on the site by

00:23:25,940 --> 00:23:29,299
developers every day and your

00:23:27,559 --> 00:23:30,980
concatenate in your files then every

00:23:29,299 --> 00:23:33,350
single time one of those minor changes

00:23:30,980 --> 00:23:35,869
made the whole file will be sent over

00:23:33,350 --> 00:23:37,690
and over and over again with speedy it's

00:23:35,869 --> 00:23:40,610
better to leave all your files separate

00:23:37,690 --> 00:23:42,919
because then you know jquery which will

00:23:40,610 --> 00:23:45,379
never change will always be cash always

00:23:42,919 --> 00:23:47,330
be stored while you know your scripts

00:23:45,379 --> 00:23:47,660
for this one slider that you're using on

00:23:47,330 --> 00:23:49,580
your home

00:23:47,660 --> 00:23:50,660
page which changes every single day

00:23:49,580 --> 00:23:52,820
because the client can't make up their

00:23:50,660 --> 00:23:57,740
mind can change all at once and only

00:23:52,820 --> 00:23:59,720
send a small bit of data you can all

00:23:57,740 --> 00:24:01,970
start using server pushed for important

00:23:59,720 --> 00:24:03,770
assets so things that are required CSS

00:24:01,970 --> 00:24:06,620
files JavaScript files things of that

00:24:03,770 --> 00:24:12,640
nature can be immediately pushed to the

00:24:06,620 --> 00:24:15,260
client that last bit I've been trying to

00:24:12,640 --> 00:24:17,990
figure out if a speedy module would be a

00:24:15,260 --> 00:24:20,870
good idea or not and it's in research

00:24:17,990 --> 00:24:24,380
I'm thinking it will probably hold off

00:24:20,870 --> 00:24:25,700
till Drupal 8 to do because speedy isn't

00:24:24,380 --> 00:24:29,320
going to be a protocol that we're all

00:24:25,700 --> 00:24:31,610
using probably for another five years

00:24:29,320 --> 00:24:36,200
you think Drupal 8 taking a long time to

00:24:31,610 --> 00:24:38,210
get out so a case study to kind of look

00:24:36,200 --> 00:24:41,900
into all of these things working in

00:24:38,210 --> 00:24:46,370
unity is HTTPS I'm caricom that's my

00:24:41,900 --> 00:24:51,500
blog so it uses speedy deliver

00:24:46,370 --> 00:24:53,360
everything it has a custom CDN it's a

00:24:51,500 --> 00:24:55,970
long story and I wrote a blog post on

00:24:53,360 --> 00:24:58,190
wide as a custom CDN but I none of the

00:24:55,970 --> 00:25:02,930
rest of seedings that I want but it has

00:24:58,190 --> 00:25:07,490
servers in Singapore Amsterdam and New

00:25:02,930 --> 00:25:10,550
York and once dome digitalocean opens a

00:25:07,490 --> 00:25:14,090
server in Latin America I will do it but

00:25:10,550 --> 00:25:16,550
I can't afford anything but that all the

00:25:14,090 --> 00:25:19,790
DNS has been moved to route 53 so that

00:25:16,550 --> 00:25:21,440
route 53 will send each user depending

00:25:19,790 --> 00:25:25,700
upon their location to the correct

00:25:21,440 --> 00:25:28,580
server it in lines all of the critical

00:25:25,700 --> 00:25:32,480
CSS actually all of the CSS on the first

00:25:28,580 --> 00:25:36,770
page load and then it will load the rest

00:25:32,480 --> 00:25:38,750
of CSS asynchronously the results last

00:25:36,770 --> 00:25:43,310
time I checked the PageSpeed score was

00:25:38,750 --> 00:25:45,710
98 the weis low scores 98 pingdom gives

00:25:43,310 --> 00:25:48,380
me a score of 93 with 75 milliseconds

00:25:45,710 --> 00:25:52,880
load time and web page test lows between

00:25:48,380 --> 00:25:54,740
400 800 milliseconds load time very fast

00:25:52,880 --> 00:25:57,070
no matter where I put it across the

00:25:54,740 --> 00:25:57,070
globe

00:25:57,130 --> 00:26:03,110
so what's next for that never stop

00:26:01,010 --> 00:26:06,650
improving there's always gonna be

00:26:03,110 --> 00:26:07,880
changes new ideas new techniques there

00:26:06,650 --> 00:26:09,590
are a lot of great people doing some

00:26:07,880 --> 00:26:14,690
great work to speed up sites a little

00:26:09,590 --> 00:26:17,270
better finally one question haven't

00:26:14,690 --> 00:26:19,330
asked a decent bit is who is actually

00:26:17,270 --> 00:26:22,340
responsible for performance in a team

00:26:19,330 --> 00:26:24,380
who is it that needs to bear this burden

00:26:22,340 --> 00:26:27,920
and make sure that everything is

00:26:24,380 --> 00:26:29,330
performance on a site and the answer

00:26:27,920 --> 00:26:30,770
really is everyone must think about it

00:26:29,330 --> 00:26:32,780
it can't be something that's an

00:26:30,770 --> 00:26:36,380
afterthought it can't be something that

00:26:32,780 --> 00:26:38,000
is 0 this in the last three days of the

00:26:36,380 --> 00:26:40,610
project we're going to fix all the

00:26:38,000 --> 00:26:44,420
performance issues that's going to be a

00:26:40,610 --> 00:26:46,580
nightmare so really the entire team must

00:26:44,420 --> 00:26:51,500
have the data to be making the right

00:26:46,580 --> 00:26:53,150
choices performance wise what this well

00:26:51,500 --> 00:26:54,800
then the performance expert whoever that

00:26:53,150 --> 00:26:56,150
is needs to give the right information

00:26:54,800 --> 00:26:59,150
to the team if they need to give them

00:26:56,150 --> 00:27:03,140
okay designer you need to know that if

00:26:59,150 --> 00:27:05,090
we load this image that is 500 megabytes

00:27:03,140 --> 00:27:07,100
on the homepage that changes every page

00:27:05,090 --> 00:27:09,320
load it's going to be a terrible idea we

00:27:07,100 --> 00:27:13,640
need to you know load smaller image of

00:27:09,320 --> 00:27:16,060
sizes things of that nature but also go

00:27:13,640 --> 00:27:18,290
back to our automated testing slides of

00:27:16,060 --> 00:27:20,330
automated testing as we set up where

00:27:18,290 --> 00:27:21,260
everyone can see the impact of decisions

00:27:20,330 --> 00:27:24,260
that they've made on the code

00:27:21,260 --> 00:27:26,420
immediately we're on a merged to master

00:27:24,260 --> 00:27:28,280
something automated tests can run from

00:27:26,420 --> 00:27:30,620
web page chess or Pingdom or what have

00:27:28,280 --> 00:27:34,580
you that can say oh no in this last

00:27:30,620 --> 00:27:36,590
commit our performance went from you

00:27:34,580 --> 00:27:38,000
know loading in 800 milliseconds to now

00:27:36,590 --> 00:27:39,260
it's two seconds like we need to

00:27:38,000 --> 00:27:40,760
reevaluate what happened here and look

00:27:39,260 --> 00:27:42,770
back at it but everyone needs to have

00:27:40,760 --> 00:27:45,320
that data and be able to do it so they

00:27:42,770 --> 00:27:46,580
can know when decisions that they're

00:27:45,320 --> 00:27:49,910
making our effective informants of the

00:27:46,580 --> 00:27:50,930
site and really it comes down to it

00:27:49,910 --> 00:27:53,000
needs to be easy it needs to be

00:27:50,930 --> 00:27:56,630
something that every developer can run a

00:27:53,000 --> 00:27:58,640
grunt command a gulp command go to their

00:27:56,630 --> 00:28:00,740
Jenkins server or whatever you have set

00:27:58,640 --> 00:28:02,690
up for CI or going to set up for the I

00:28:00,740 --> 00:28:04,940
after this presentation and click a

00:28:02,690 --> 00:28:06,590
button and see this is what's going on

00:28:04,940 --> 00:28:08,750
right now it can't be something that's

00:28:06,590 --> 00:28:09,639
difficult or no one's going to be using

00:28:08,750 --> 00:28:11,769
it and then

00:28:09,639 --> 00:28:14,079
also and we're going to have a hundred

00:28:11,769 --> 00:28:18,219
megabyte javascript file I don't know if

00:28:14,079 --> 00:28:20,679
that's possible and with that are there

00:28:18,219 --> 00:28:22,299
any questions that has i'm going to hand

00:28:20,679 --> 00:28:25,989
off the mic so that we can record this

00:28:22,299 --> 00:28:27,700
thank you well talking about this beauty

00:28:25,989 --> 00:28:29,709
protocol what do you think is going to

00:28:27,700 --> 00:28:31,570
happen to the edge x calls you know

00:28:29,709 --> 00:28:35,820
because when when I'm talking about

00:28:31,570 --> 00:28:38,619
performance using HTTP 11 1 dot 1 and

00:28:35,820 --> 00:28:40,329
most of objects calls are not on during

00:28:38,619 --> 00:28:44,139
the page load they they're they're made

00:28:40,329 --> 00:28:46,679
after that and what do you think is

00:28:44,139 --> 00:28:51,399
going to be the future the next steps

00:28:46,679 --> 00:28:54,820
when loading Ajax calls not seem you'll

00:28:51,399 --> 00:28:59,289
stay si mutinous simultaneously I don't

00:28:54,820 --> 00:29:03,309
know and still get the full performance

00:28:59,289 --> 00:29:04,809
from speedy I don't think there's going

00:29:03,309 --> 00:29:07,059
to be a difference and here's why

00:29:04,809 --> 00:29:09,459
because Ajax holes will happen after the

00:29:07,059 --> 00:29:11,679
base bit as long as you're using the

00:29:09,459 --> 00:29:14,079
right the same domain it was the exact

00:29:11,679 --> 00:29:16,089
same TCP connection so speedy will keep

00:29:14,079 --> 00:29:17,709
your connection alive for a good amount

00:29:16,089 --> 00:29:22,269
of time provide your server setup

00:29:17,709 --> 00:29:23,409
correctly so really it it won't it will

00:29:22,269 --> 00:29:24,789
only make those requests a little bit

00:29:23,409 --> 00:29:26,799
faster because you won't need to create

00:29:24,789 --> 00:29:29,379
a new TCP protocol but again going back

00:29:26,799 --> 00:29:33,969
make sure using the same domain if

00:29:29,379 --> 00:29:35,229
you're using a bunch of Ajax requests to

00:29:33,969 --> 00:29:36,369
five different domains after your page

00:29:35,229 --> 00:29:40,200
those are going to be slowed down

00:29:36,369 --> 00:29:40,200
dramatically every time

00:29:43,220 --> 00:29:49,110
thanks for the presentation really good

00:29:45,810 --> 00:29:52,740
I was wondering about your website I am

00:29:49,110 --> 00:29:55,320
carico calm because you know I loaded

00:29:52,740 --> 00:29:58,440
and of course it's super fast but then

00:29:55,320 --> 00:30:03,240
you have no images your fonts are very

00:29:58,440 --> 00:30:07,860
few your CSS is very basic you had like

00:30:03,240 --> 00:30:10,650
almos no header and you know I I wonder

00:30:07,860 --> 00:30:12,240
you know how how will be if you have a

00:30:10,650 --> 00:30:14,820
very different example you know

00:30:12,240 --> 00:30:19,410
something likes loaded with images a lot

00:30:14,820 --> 00:30:20,790
of styles big header you name it I love

00:30:19,410 --> 00:30:22,200
this question because every single time

00:30:20,790 --> 00:30:26,670
we give the presentation someone points

00:30:22,200 --> 00:30:29,070
it out immediately um you're right i am

00:30:26,670 --> 00:30:30,540
not a designer I actually a lot of work

00:30:29,070 --> 00:30:33,510
to make sure my web fonts are loading

00:30:30,540 --> 00:30:38,250
very fast their part reason why i use my

00:30:33,510 --> 00:30:40,230
custom CDN however there are a lot of

00:30:38,250 --> 00:30:43,680
things you can do so if you look at the

00:30:40,230 --> 00:30:45,660
first response it's still sub 8

00:30:43,680 --> 00:30:48,480
kilobytes i think which actually do a

00:30:45,660 --> 00:30:50,430
lot of wiggle room I've been working on

00:30:48,480 --> 00:30:53,340
the four kitchens website to do a

00:30:50,430 --> 00:30:54,890
similar thing ironically enough web

00:30:53,340 --> 00:31:00,120
fonts are what's holding me up right now

00:30:54,890 --> 00:31:02,690
because they're weird however as long as

00:31:00,120 --> 00:31:05,310
what you're doing is called with Ajax

00:31:02,690 --> 00:31:07,320
unloaded asynchronously you can do the

00:31:05,310 --> 00:31:09,420
exact same thing so the same principle

00:31:07,320 --> 00:31:12,360
so apply it's the reason I show my blogs

00:31:09,420 --> 00:31:15,270
is a relatively simple example of all

00:31:12,360 --> 00:31:17,430
these principles in play but you know

00:31:15,270 --> 00:31:19,920
load your JavaScript asynchronously load

00:31:17,430 --> 00:31:22,380
your images asynchronously load your ads

00:31:19,920 --> 00:31:24,540
this is a big one it adds should always

00:31:22,380 --> 00:31:26,430
be load a seriously images are already

00:31:24,540 --> 00:31:28,800
loaded asynchronously your page load

00:31:26,430 --> 00:31:33,390
will not be altered if you're loading a

00:31:28,800 --> 00:31:35,280
bunch of images so while it is a simple

00:31:33,390 --> 00:31:37,260
example the the principal's still

00:31:35,280 --> 00:31:38,490
directly apply and there's still a bunch

00:31:37,260 --> 00:31:41,760
of tools out there that can help you do

00:31:38,490 --> 00:31:43,410
the same thing but yes it is hard to do

00:31:41,760 --> 00:31:45,690
it especially on a big drupal site I

00:31:43,410 --> 00:31:49,049
understand

00:31:45,690 --> 00:31:51,750
oh just curiosity you said you our site

00:31:49,049 --> 00:31:54,210
is already using this pd does it require

00:31:51,750 --> 00:31:56,370
a special library JavaScript you are

00:31:54,210 --> 00:32:00,720
plugging on the browser how does it work

00:31:56,370 --> 00:32:05,480
today not at all so Chrome and Mozilla

00:32:00,720 --> 00:32:09,000
both support speedy out of the box the

00:32:05,480 --> 00:32:11,009
server has to be set up specifically so

00:32:09,000 --> 00:32:13,470
i'm using engine X with speedy built

00:32:11,009 --> 00:32:15,330
into it and a lot of things aren't

00:32:13,470 --> 00:32:16,679
finished in the next version so I don't

00:32:15,330 --> 00:32:18,240
have so proportioned minds yet because

00:32:16,679 --> 00:32:21,240
when I built this it wasn't part of the

00:32:18,240 --> 00:32:23,970
internet extension it's shockingly not

00:32:21,240 --> 00:32:28,740
that hard to set up and it will default

00:32:23,970 --> 00:32:30,629
to a regular HTTP 1.1 HTTPS if it the

00:32:28,740 --> 00:32:32,580
browser doesn't have it so there's a

00:32:30,629 --> 00:32:39,090
really smart protocols make sure that's

00:32:32,580 --> 00:32:41,009
loading as fast as possible it's if you

00:32:39,090 --> 00:32:43,440
are have your own infrastructure it is

00:32:41,009 --> 00:32:45,629
really simple both apache and engine

00:32:43,440 --> 00:32:47,669
acts have extensions to use speedy right

00:32:45,629 --> 00:32:52,620
now and they're both very well featured

00:32:47,669 --> 00:32:56,480
actually any other questions don't be

00:32:52,620 --> 00:32:56,480
shy okay

00:32:58,450 --> 00:33:05,659
so we we recently implemented CDN and

00:33:03,159 --> 00:33:07,159
I'd really like what you say at the end

00:33:05,659 --> 00:33:09,110
you know who is responsible for this

00:33:07,159 --> 00:33:12,200
because we get a lot of pushback from

00:33:09,110 --> 00:33:14,779
the editors in our sights they want the

00:33:12,200 --> 00:33:18,289
biggest huge picture that they can find

00:33:14,779 --> 00:33:20,929
and you know super 10 megabytes videos

00:33:18,289 --> 00:33:24,140
and etc right there's a lot of times

00:33:20,929 --> 00:33:27,140
it's always push back and we implemented

00:33:24,140 --> 00:33:32,240
the CDN we put a lot of work it we pay

00:33:27,140 --> 00:33:34,520
for it right jet the ink you know the

00:33:32,240 --> 00:33:37,340
speeded and other ink and create the

00:33:34,520 --> 00:33:40,429
increment in the loading performance was

00:33:37,340 --> 00:33:43,610
not that we expected i mean we I mean we

00:33:40,429 --> 00:33:45,740
fine tune in fine-tuning finally we

00:33:43,610 --> 00:33:48,289
perhaps way you know gained twenty

00:33:45,740 --> 00:33:49,909
percent in speed something like that so

00:33:48,289 --> 00:33:54,260
at some point I was wondering you know

00:33:49,909 --> 00:33:56,779
is to what extent you you invest so much

00:33:54,260 --> 00:34:00,049
on that and if you were like all the way

00:33:56,779 --> 00:34:02,870
with akamai right and ten thousand

00:34:00,049 --> 00:34:04,340
dollars a month for the CDM perhaps you

00:34:02,870 --> 00:34:09,770
know is it is it worth how you balance

00:34:04,340 --> 00:34:12,139
that out so I mean obviously that's a

00:34:09,770 --> 00:34:16,010
business question of what is it worth um

00:34:12,139 --> 00:34:19,280
I always look at it is what is the

00:34:16,010 --> 00:34:22,250
distance between you and your users so

00:34:19,280 --> 00:34:25,760
if all of your users are in a single

00:34:22,250 --> 00:34:28,730
country there isn't going to be much of

00:34:25,760 --> 00:34:30,679
a gain by using a CDN the biggest case

00:34:28,730 --> 00:34:32,089
you're going to get is generally CDNs

00:34:30,679 --> 00:34:33,980
are set up to be a lot faster response

00:34:32,089 --> 00:34:37,520
time but if you're using something like

00:34:33,980 --> 00:34:38,750
say pantheon or aqua is hosting their

00:34:37,520 --> 00:34:40,490
actually set up to do that already as

00:34:38,750 --> 00:34:42,740
well so you're not going to get a huge

00:34:40,490 --> 00:34:44,810
performance boost where you get huge

00:34:42,740 --> 00:34:47,750
boost is when you're brought your

00:34:44,810 --> 00:34:50,659
audience is in geographically diverse

00:34:47,750 --> 00:34:53,179
locations so if you have an

00:34:50,659 --> 00:34:58,280
international audience then it's a huge

00:34:53,179 --> 00:35:00,230
building there are trying to member

00:34:58,280 --> 00:35:01,640
there's a site i use a while ago of

00:35:00,230 --> 00:35:05,630
looking at the ping times between

00:35:01,640 --> 00:35:07,030
servers and it is shocking how long it

00:35:05,630 --> 00:35:10,030
takes to

00:35:07,030 --> 00:35:12,790
a painting to go from New York to

00:35:10,030 --> 00:35:16,020
Australia because you're crossing three

00:35:12,790 --> 00:35:19,420
oceans to get there usually for a

00:35:16,020 --> 00:35:22,240
country an ocean and a/c to get to

00:35:19,420 --> 00:35:24,250
Australia it's a long distance like no

00:35:22,240 --> 00:35:26,860
matter what that is going to take some

00:35:24,250 --> 00:35:35,530
time even going literally at the speed

00:35:26,860 --> 00:35:38,230
of light you totally right because if we

00:35:35,530 --> 00:35:41,320
look at the numbers overall you don't

00:35:38,230 --> 00:35:43,330
see the impact but you know I'm looking

00:35:41,320 --> 00:35:47,530
at for example our numbers in South

00:35:43,330 --> 00:35:50,560
Africa in the in in the Latin see we

00:35:47,530 --> 00:35:53,260
went from 300 milliseconds 23

00:35:50,560 --> 00:35:56,320
milliseconds because there is a survey

00:35:53,260 --> 00:35:57,790
right there in Cape Town and yeah of

00:35:56,320 --> 00:35:59,950
course in the overall picture of our

00:35:57,790 --> 00:36:03,450
analytics doesn't look that much because

00:35:59,950 --> 00:36:03,450
we had a lot of traffic from the states

00:36:05,550 --> 00:36:14,940
awesome any more questions bueller

00:36:08,980 --> 00:36:18,840
bueller okay then as final thoughts oh

00:36:14,940 --> 00:36:18,840
no what did I just do

00:36:29,230 --> 00:36:32,520
okay that was weird

00:36:33,070 --> 00:36:39,020
ealier gorrik who is a performance

00:36:36,020 --> 00:36:42,770
engineer for google has a fantastic book

00:36:39,020 --> 00:36:45,230
on web performance go read it it goes

00:36:42,770 --> 00:36:48,590
into all of the protocols and like why

00:36:45,230 --> 00:36:50,420
what we do matters it's fantastic and

00:36:48,590 --> 00:36:55,460
isn't the very hard readings is a great

00:36:50,420 --> 00:36:58,160
job my slides again are at imc co dot

00:36:55,460 --> 00:36:59,840
slash 1000 milliseconds they're also

00:36:58,160 --> 00:37:02,470
also on github so you can go to my

00:36:59,840 --> 00:37:06,940
github I am Carrico they're all there

00:37:02,470 --> 00:37:06,940

YouTube URL: https://www.youtube.com/watch?v=8YQpe7n4p7U


