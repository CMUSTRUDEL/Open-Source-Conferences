Title: DrupalCon Latin America 2015: Drupal in the Post-PHP-Renaissance World
Publication date: 2015-02-11
Playlist: DrupalCon Latin America - Feb 2015
Description: 
	Speakers: EclipseGc
As the PHP renaissance continues to change how developers work with PHP, Drupal has made significant strides toward adopting PHP’s new best practices in both code and interoperability. New groups focussed on the interoperability of disparate PHP projects have begun to get traction producing such standards as PSR-0 and PSR-4 while others work to model a reusable request/response layer. The interoperability awareness of PHP projects and frameworks has never been higher, and projects working to adopt and contribute to that interoperable future have an opportunity to contribute to the future standards of PHP in an unprecedented way.

Drupal carries with it a significant existing install base, and componentization could lead to use in non-Drupal installs. Formally componentizing Drupal’s existing code base further and making individual components available to the non-Drupal world will spread our influence far and wide. In this talk I’ll elaborate on:

Building PHP Components
Componentizing Drupal
The future of modules
Component Interoperability
Stack PHP & PHP FIG
Expanding Drupal’s reach into the 82% of the web that is run by PHP
Captions: 
	00:00:01,680 --> 00:00:06,459
Drupal post-PHP-Renaissance. We're really here to talk about what this

00:00:06,459 --> 00:00:11,260
Drupal thing looks like as the PHP movement starts to really get their act together.

00:00:11,260 --> 00:00:15,490
Quickly, I'll talk a little bit about me in case you don't know me.

00:00:15,490 --> 00:00:19,150
I'm Kris Vanderwater. I am currently the developer evangelist over

00:00:19,150 --> 00:00:24,660
at Acquia. I go by eclipsegc just about everywhere. I've

00:00:24,660 --> 00:00:27,900
never run into that user name that it's not me.

00:00:27,900 --> 00:00:31,330
I'm one of the co-maintainers for Chaos Tools, which is actually very near and dear to my

00:00:31,330 --> 00:00:36,950
heart, but that's a completely separate talk, and I maintain a little-known module called

00:00:36,950 --> 00:00:41,930
Context Admin, which is also near and dear to my heart.

00:00:41,930 --> 00:00:48,050
The purposes of this talk, really: I want to talk a little bit about Drupal's history

00:00:48,050 --> 00:00:52,100
because I think it's really important to know where we've come from in order to clearly

00:00:52,100 --> 00:00:57,149
identify where we're going. I'm going to compare that to what PHP, just

00:00:57,149 --> 00:01:03,989
generically, was doing around the same time, and then I want to spend a little bit of time

00:01:03,989 --> 00:01:10,989
kind of framing those two things against each other to bring some cohesion to the picture.

00:01:13,430 --> 00:01:17,390
That's what I just said. Yeah, so I want to relate all of this history

00:01:17,390 --> 00:01:24,390
to where we are today, why we're here, and where I think we're going.

00:01:25,310 --> 00:01:29,530
I have a couple things I want you to consider as I give this talk because I think it's really

00:01:29,530 --> 00:01:34,700
important to have in mind the same sort of things that I had in mind when I wrote it.

00:01:34,700 --> 00:01:39,729
First of all, I want you to give serious consideration to to where PHP in general is going.

00:01:39,729 --> 00:01:44,740
If you aren't out there doing PHP separately from Drupal, that might not be completely

00:01:44,740 --> 00:01:48,670
obvious right away. I hope that I'm going to give you enough of

00:01:48,670 --> 00:01:52,729
a working knowledge of that that it becomes more obvious.

00:01:52,729 --> 00:01:59,729
Second is: What's going to become of existing PHP-based projects that aren't embracing PHP's

00:02:00,200 --> 00:02:07,200
emerging best standards, like best practices. With all of that said, I want you to seriously

00:02:08,200 --> 00:02:15,200
consider: What is Drupal? We'll have this conversation again, if not

00:02:15,930 --> 00:02:20,529
here, although we will, elsewhere because this is going to be ongoing topic sort of

00:02:20,529 --> 00:02:23,219
stuff. Let's talk about Drupal's history a little

00:02:23,219 --> 00:02:26,919
bit. Introduction of modules.

00:02:26,919 --> 00:02:32,939
Does anybody know when modules was introduced? No takers?

00:02:32,939 --> 00:02:35,590
Okay. Got some very knowledgeable people in the

00:02:35,590 --> 00:02:42,459
room, so ... Okay. We've got a 2002.

00:02:42,459 --> 00:02:49,459
For purposes of today, the beginning, when I say "in the beginning," that is May 18 of

00:02:49,709 --> 00:02:52,900
2000. That is the first commit to the Drupal Git

00:02:52,900 --> 00:02:58,569
repository. In the beginning there weren't any modules,

00:02:58,569 --> 00:03:05,569
but by Saturday, December 23 of 2000, we had this little bit of code.

00:03:06,949 --> 00:03:13,949
Now, this is module execute, and you'll see that it does this wonderful thing with globals,

00:03:16,049 --> 00:03:21,129
and here's my favorite part: It returns a string.

00:03:21,129 --> 00:03:24,999
If that thing doesn't exist, it returns an empty string.

00:03:24,999 --> 00:03:31,999
Anybody want to guess why? -It just went directly to the page.

00:03:32,620 --> 00:03:35,239
-It went directly to the page, that's right. All of these things rendered directly to the

00:03:35,239 --> 00:03:38,489
page. That's exactly what it is.

00:03:38,489 --> 00:03:44,269
If you didn't have the thing, you got an empty string.

00:03:44,269 --> 00:03:51,269
By Saturday, May 5 of 2001, we had this familiar-looking code, which is the first incarnation of module

00:03:53,120 --> 00:03:56,119
invoke. You'll see that it checks to see if a function

00:03:56,119 --> 00:04:03,119
exists with this hook-naming thing that we do, and passes two parameters to it.

00:04:03,159 --> 00:04:06,260
Apparently we didn't have getArgs or something at that point. I don't know.

00:04:06,260 --> 00:04:13,260
I don't know PHP well enough at that time period to know, but I believe at this point

00:04:14,109 --> 00:04:20,019
we could return things other than strings. By the way, happy Cinco de Mayo.

00:04:20,019 --> 00:04:26,740
It's May 5, right? You know, it was a good gift for all of us.

00:04:26,740 --> 00:04:31,620
I want you to just kind of look at what first went in versus what sits in Drupal 7 today

00:04:31,620 --> 00:04:35,810
because they're really not all that different. They do a lot of the same things.

00:04:35,810 --> 00:04:40,800
There's a little bit more elegance built in here and a few things to build your own auto-loading

00:04:40,800 --> 00:04:44,729
abstractions and stuff like that in case you want to put your hooks into a different file

00:04:44,729 --> 00:04:49,979
name and those sorts of things, because that's what module hook makes you able to do.

00:04:49,979 --> 00:04:53,330
But by and large, these are really similar functions.

00:04:53,330 --> 00:05:00,330
That's 14 years' worth of difference, right? We haven't really progressed a heck of a lot.

00:05:01,419 --> 00:05:06,349
Our solution to begin with was actually kind of okay.

00:05:06,349 --> 00:05:13,349
However, it did introduce a few problems. Has anybody ever wanted a module name space

00:05:13,370 --> 00:05:15,250
and not been able to get it? Yeah?

00:05:15,250 --> 00:05:20,389
It's happened to a few of us. Some of us in the room have done even worse

00:05:20,389 --> 00:05:25,770
things than want that. I'm going to tell you a sad story.

00:05:25,770 --> 00:05:27,539
Once upon a time, there was a module named Dashboard.

00:05:27,539 --> 00:05:34,189
Has anybody ever used the dashboard module? No, probably not because I think it only went

00:05:34,189 --> 00:05:38,139
as far as Drupal 6. The reason it only went as far as Drupal 6

00:05:38,139 --> 00:05:45,139
is because there were some mockups for the Drupal 7 stuff that included a dashboard,

00:05:46,830 --> 00:05:52,430
so some asshole built a proof of concept and stuck it in there and called it dashboard

00:05:52,430 --> 00:05:57,610
module. I was that asshole, by the way.

00:05:57,610 --> 00:06:03,639
It was only a proof of concept, but they put it into core and the next thing I know I've

00:06:03,639 --> 00:06:10,639
killed the dashboard module. Yeah, the end, right?

00:06:11,669 --> 00:06:18,430
There's not a lot more to say. Sorry, all right?

00:06:18,430 --> 00:06:25,430
Well, yeah. I am sorry. This persisted outside because we went on

00:06:27,189 --> 00:06:30,689
to have OO class names as a problem space, right?

00:06:30,689 --> 00:06:35,330
You can't just have a views class. No, you cannot have that.

00:06:35,330 --> 00:06:39,860
You can't have a database class. Larry's got that, right?

00:06:39,860 --> 00:06:43,719
That's not yours to have. Someone else already has it.

00:06:43,719 --> 00:06:50,379
Whose class is it anyway? You declare class Query.

00:06:50,379 --> 00:06:54,539
All hell breaks loose because Larry already did that.

00:06:54,539 --> 00:06:57,779
This isn't actually a Drupal problem, right? This is a PHP problem.

00:06:57,779 --> 00:07:00,960
You just can't have that class name because someone else already has it.

00:07:00,960 --> 00:07:07,960
If you want to include some external PHP library into Drupal and it has a query class, good

00:07:08,090 --> 00:07:15,090
luck, right? Have fun with that.

00:07:16,680 --> 00:07:20,439
Everything we've talked about up until this moment, this still defines Drupal 7 as it

00:07:20,439 --> 00:07:23,590
exists today. All these things are pretty well true.

00:07:23,590 --> 00:07:30,039
We've gotten around some of these class naming difficulties with custom PSR0 and 4 class

00:07:30,039 --> 00:07:36,229
autoloader module things and stuff like that, but generic Drupal 7.

00:07:36,229 --> 00:07:39,590
Everything I've just said is totally true for it, right?

00:07:39,590 --> 00:07:44,370
Let's look at PHP roughly through the same kind of time frame.

00:07:44,370 --> 00:07:50,759
The '99 to 2000 time frame, it was really hard to nail down an exact date.

00:07:50,759 --> 00:07:57,629
Git commits, they're kind of a sure thing. PHP history is a little less sure of a thing,

00:07:57,629 --> 00:08:04,419
but there was a developer meeting around PHP, and at this meeting they began the concept

00:08:04,419 --> 00:08:06,840
of PEAR. Anybody in the room use PEAR?

00:08:06,840 --> 00:08:13,840
Yeah? A few of you? Okay. Stig S. Bakken, is that right? I don't know.

00:08:16,590 --> 00:08:20,659
If Larry doesn't know, I sure don't know. He founds the PEAR project around the same

00:08:20,659 --> 00:08:26,409
time frame and begins moving this thing forward. Now, PEAR is essentially a structured library

00:08:26,409 --> 00:08:32,450
for open-source PHP code, right? It looks really similar to a lot of other

00:08:32,450 --> 00:08:36,810
things that we've begun to use today, but it had a few problems.

00:08:36,810 --> 00:08:41,510
No, I guess I get to that later. Why did we invent modules and not embrace

00:08:41,510 --> 00:08:45,480
PEAR if they're already doing this? Oh no, it is now.

00:08:45,480 --> 00:08:49,250
We have kind of a historical not-invented-here syndrome within Drupal, and we're beginning

00:08:49,250 --> 00:08:52,699
to get over that. We're beginning to contribute the things that

00:08:52,699 --> 00:08:58,360
we do to the wider PHP world, but for a very long time, if we didn't make it, we didn't

00:08:58,360 --> 00:09:05,360
use it. Classic not-invented-here.

00:09:05,779 --> 00:09:12,519
I actually have some questions about how aware people were of PEAR in this same time frame,

00:09:12,519 --> 00:09:19,519
because we introduced modules in the same year, right?

00:09:20,589 --> 00:09:23,910
These things are parallel. Did you have a comment or just saying you

00:09:23,910 --> 00:09:28,180
were aware? -I do have a comment, actually.

00:09:28,180 --> 00:09:31,510
-Yeah, go. -Just for the irony factor, if you go back

00:09:31,510 --> 00:09:36,130
to the ancient, ancient Drupal code-base, we used the PEAR database layer and then ripped

00:09:36,130 --> 00:09:40,190
it out and wrote our own. Having used PEAR DB before, that was a good

00:09:40,190 --> 00:09:47,190
decision. -Yeah, I actually learned that at Amsterdam.

00:09:47,529 --> 00:09:50,740
We have done some PEAR things, but we didn't just outright adopt it.

00:09:50,740 --> 00:09:57,209
We did our own thing, which I think has probably been an enabling factor, but PEAR requires

00:09:57,209 --> 00:10:01,920
this peer-review process. There were a lot of restrictions in order

00:10:01,920 --> 00:10:08,920
to get something actually up and running within PEAR, and kind of the death knell, if you

00:10:09,329 --> 00:10:14,009
will, was that it was only really at its most useful if you had root access to the box that

00:10:14,009 --> 00:10:19,610
you were doing this stuff on, and hopefully you didn't.

00:10:19,610 --> 00:10:26,089
This wasn't the best of scenarios. Having looked at PHP around the same time

00:10:26,089 --> 00:10:30,759
frame as Drupal's introduction of modules, let's look at it today.

00:10:30,759 --> 00:10:37,759
Today we're doing 5.3 namespacing. This is good because now we have namespaces

00:10:38,180 --> 00:10:41,370
for things, like in Drupal 8 we have this Drupal component namespace.

00:10:41,370 --> 00:10:46,029
We have a Drupal core namespace. We even have a Symfony HTP kernel namespace,

00:10:46,029 --> 00:10:51,889
and that's because these various projects--Drupal, Symfony, others--are now namespacing their

00:10:51,889 --> 00:10:56,610
classes, which of course means that if I have a query class and you have a query class,

00:10:56,610 --> 00:10:59,880
that's not a problem if we namespace them, right?

00:10:59,880 --> 00:11:04,410
I can call the thing something that makes sense instead of literally namespacing it

00:11:04,410 --> 00:11:09,649
as "my module_query," which is what we did. Composer.

00:11:09,649 --> 00:11:16,610
Who in the room is using Composer? Anybody? Yeah, I got a few hands.

00:11:16,610 --> 00:11:22,350
For those of you not really using Composer yet, Composer provides a number of things.

00:11:22,350 --> 00:11:27,079
It's class autoloading by namespace, so it will actually find the directory that your

00:11:27,079 --> 00:11:33,959
namespace is tied to, and then when you say "new some class name," it knows what directory

00:11:33,959 --> 00:11:39,269
to go to to find your classes. It also does package management, so you can

00:11:39,269 --> 00:11:45,920
create a new composer package and say, "I depend upon this thing over there," some other

00:11:45,920 --> 00:11:50,949
package, and it will grab those packages for you and assemble it all together.

00:11:50,949 --> 00:11:55,519
From talks with Fabien Potencier, he tells me that it's actually a more capable package

00:11:55,519 --> 00:12:02,519
management software than apt-get is. I'm no pro on apt-get, so I don't know.

00:12:04,380 --> 00:12:08,550
It's definitely not as strict as PEAR. If you have been through this process at all,

00:12:08,550 --> 00:12:14,009
you throw something up on GitHub, go to Packagist, and you're like, "Hey, here's my repo. Done."

00:12:14,009 --> 00:12:16,459
Right? That's really pretty much all there is to

00:12:16,459 --> 00:12:22,310
it as long as you conform to the standard. It's really wide adoption because of this.

00:12:22,310 --> 00:12:26,620
If it's easy to use and it does good things for you, strangely enough, people start using

00:12:26,620 --> 00:12:31,860
it, and so Composer is everywhere. It's even in Drupal 8 at this point.

00:12:31,860 --> 00:12:38,860
This has kind of lead to a situation where we have all of these interoperable components.

00:12:39,079 --> 00:12:43,339
Namespaces allows for overlapping names. You can now take that external library that

00:12:43,339 --> 00:12:47,180
I told you "good luck" with earlier, and you can include it into Drupal, and as long as

00:12:47,180 --> 00:12:53,769
it's namespaced its classes, no problem. All of a sudden, something that was a total

00:12:53,769 --> 00:12:59,790
pain of a problem is now just simply gone. Use that external library.

00:12:59,790 --> 00:13:06,790
Have fun with it. Yeah, I said that.

00:13:08,569 --> 00:13:11,750
Obviously this leads to the same sort of things we've seen in Drupal for a really long time,

00:13:11,750 --> 00:13:18,750
where people can actively contribute to a project and push it forward.

00:13:19,310 --> 00:13:23,050
I want to talk about FIG. Who in here is familiar with PHP-FIG?

00:13:23,050 --> 00:13:26,019
Okay, like four people. All right.

00:13:26,019 --> 00:13:29,720
PHP-FIG is the Framework Interoperability Group.

00:13:29,720 --> 00:13:34,850
This is a group of people who are really dedicated to creating standards that any PHP project

00:13:34,850 --> 00:13:38,160
can embrace, right? Drupal has embraced a lot of them.

00:13:38,160 --> 00:13:42,720
Symfony has embraced a ton of them. All of these different standards are coming

00:13:42,720 --> 00:13:44,589
about. The first one you may have heard of is maybe

00:13:44,589 --> 00:13:47,310
PSR-0. Anybody, PSR-0?

00:13:47,310 --> 00:13:52,500
This is a class autoloading standard. We have PSR-1, which is a basic coding standard.

00:13:52,500 --> 00:13:59,180
Drupal's like, "Nah, screw that." PSR-2, same story, different verse.

00:13:59,180 --> 00:14:03,310
Logger interface. Believe it or not, Drupal conforms to this

00:14:03,310 --> 00:14:06,889
one. Thank you, Larry.

00:14:06,889 --> 00:14:11,699
You re-wrote Watchdog to actually conform to the PSR-3, right?

00:14:11,699 --> 00:14:16,190
-A couple of us did. -Yeah, cool.

00:14:16,190 --> 00:14:20,500
PSR-4 improved autoloading. I'm not sure I can claim this, but I'm going

00:14:20,500 --> 00:14:23,269
to try, okay? People can try to prove me wrong, and maybe

00:14:23,269 --> 00:14:27,350
they will. I'm pretty sure Drupal 8 pushed forward the

00:14:27,350 --> 00:14:32,610
adoption of PSR-4 within Composer more so than any other project, and we may have been

00:14:32,610 --> 00:14:37,500
the first PSR-4 compliant project in the world. I'm not sure about it.

00:14:37,500 --> 00:14:43,569
-At our signs, probably. -Well, we did push forward Composer autoloading

00:14:43,569 --> 00:14:48,769
getting PSR-4. -The composer PSR-4 support was written by

00:14:48,769 --> 00:14:55,769
a Drupal developer. -There are some more PSRs out there.

00:14:56,319 --> 00:15:01,839
You should talk with Larry if you want to know about 5, 6, and especially 7, which is

00:15:01,839 --> 00:15:08,300
super cool. -Are you paid to support them?

00:15:08,300 --> 00:15:09,139
-No. StackPHP.

00:15:09,139 --> 00:15:16,139
Who knows what that is? Larry. Okay. All right. Great.

00:15:17,310 --> 00:15:21,089
StackPHP. So, we're teaching. That's what we're doing

00:15:21,089 --> 00:15:25,120
today. Stack is essentially a group of people attempting

00:15:25,120 --> 00:15:28,810
to collaborate around Symfony's HTP kernel, right?

00:15:28,810 --> 00:15:33,100
This isn't people who are stuck using this code.

00:15:33,100 --> 00:15:38,269
These are people actively opting in to using someone else's code, someone who published

00:15:38,269 --> 00:15:43,939
their code independently, someone who they have no control over, and they're saying,

00:15:43,939 --> 00:15:48,410
"This is a standard we can get behind and use."

00:15:48,410 --> 00:15:55,350
What it means is that any framework that begins using this and using it properly can actually

00:15:55,350 --> 00:16:01,949
interoperate to a certain degree with their various routing layers.

00:16:01,949 --> 00:16:06,379
Finally, component libraries. This should be kind of self-evident with the

00:16:06,379 --> 00:16:11,310
rest of the conversation thus far, but there are lots of different component libraries

00:16:11,310 --> 00:16:18,310
out there: Symfony components, Doctrine, Zend... That's what the ZF is.

00:16:18,569 --> 00:16:24,600
This is quickly leading us to this interoperable vision of PHP where you just say, "I want

00:16:24,600 --> 00:16:28,370
a little bit of this. I want a little bit of that. I will write the glue code in between

00:16:28,370 --> 00:16:33,500
that makes this thing work." Does that sound familiar to anybody?

00:16:33,500 --> 00:16:38,310
Has anybody in the room been doing something similar to that for the last, I don't know,

00:16:38,310 --> 00:16:43,930
5, 10 years, maybe less? So, Drupal. Let's talk about Drupal. Drupal

00:16:43,930 --> 00:16:47,920
8, specifically. Drupal 8 at this point is really a mixture

00:16:47,920 --> 00:16:54,550
of modules and PHP components, okay? We also still have kind of some procedural

00:16:54,550 --> 00:16:58,569
approaches within our code base. We've eliminated a lot of it, but you can't

00:16:58,569 --> 00:17:04,339
ever completely get rid of that, and we've worked really hard to eliminate the low-hanging

00:17:04,339 --> 00:17:08,470
fruit that made a lot of sense, and some things that were much more difficult to eliminate,

00:17:08,470 --> 00:17:12,910
like a routing layer. A lot of these things have been converted

00:17:12,910 --> 00:17:19,910
into stateless services, which is to say it's a good thing.

00:17:21,040 --> 00:17:26,590
We have our own PHP components at this point. Drupal 8 literally has an entire directory

00:17:26,590 --> 00:17:33,260
just full of PHP code that we intend to make publicly available for people outside of Drupal

00:17:33,260 --> 00:17:40,260
to use. We don't have it exposed yet, but we're close.

00:17:44,280 --> 00:17:48,540
Drupal just has a single Git repository. We need a subtree split, which isn't actually

00:17:48,540 --> 00:17:52,510
separate Git repositories. It's still one, but you get to treat it like

00:17:52,510 --> 00:17:58,320
it's multiple. Having talked about all of that, I want to

00:17:58,320 --> 00:18:02,820
talk a little bit about what I believe the future of Drupal is, and I believe very sincerely

00:18:02,820 --> 00:18:09,640
that Drupal is going to be a standardized collection of PHP components.

00:18:09,640 --> 00:18:15,310
Share-able with the PHP world at large. If you are using some project and you want

00:18:15,310 --> 00:18:22,310
to use Drupal's utility or plug-ins, something near and dear to my heart, that should be

00:18:23,340 --> 00:18:29,650
very achievable in the near future, just like Symfony.

00:18:29,650 --> 00:18:31,520
You can pick and choose the pieces of Symfony you want.

00:18:31,520 --> 00:18:38,520
You don't have to use full stack, right? See? I even enumerated those. Look at that.

00:18:40,880 --> 00:18:45,150
Sorry, I went through these slides a while ago. My bad.

00:18:45,150 --> 00:18:49,250
Which all leads to this notion of a Drupal second approach.

00:18:49,250 --> 00:18:53,760
I think we should code for Drupal second, right?

00:18:53,760 --> 00:18:57,520
Write something that works. Solve the case and then build an adapter around

00:18:57,520 --> 00:19:03,040
it to Drupal. You've been doing that for a long time with

00:19:03,040 --> 00:19:10,040
every API you had to work with, somebody else's module that you liked what it did, but it

00:19:10,060 --> 00:19:14,870
didn't integrate with CCK properly, whatever. We've been actively doing these sorts of things

00:19:14,870 --> 00:19:18,450
for a long time. I think if we were to begin doing it more

00:19:18,450 --> 00:19:23,580
publicly, releasing more components, we would get more buy-in.

00:19:23,580 --> 00:19:30,580
Yeah, that should be obvious from what I said. Really, though, maybe it's not obvious because

00:19:33,410 --> 00:19:40,410
what are modules, right? Yeah, I said that.

00:19:43,090 --> 00:19:46,100
Create a PHP-native solution. Write a Drupal adapter.

00:19:46,100 --> 00:19:50,450
You start doing this, the code that you're producing is going to have to be higher quality

00:19:50,450 --> 00:19:52,540
because you're going to write all the unit tests for it.

00:19:52,540 --> 00:19:56,620
You're going to host that stuff, maybe on Drupal, maybe on GitHub.

00:19:56,620 --> 00:19:59,020
Somewhere you're going to have Travis Integration to it.

00:19:59,020 --> 00:20:04,630
You're going to have all of this stuff just at your fingertips to begin actively testing

00:20:04,630 --> 00:20:11,630
what you build, and then building adapters. Who in here has ever built an adapter class,

00:20:11,670 --> 00:20:16,850
like one class wrapping another so that it can communicate with some different layer?

00:20:16,850 --> 00:20:23,020
Yeah. It's not hard. Usually it's like, "Oh, they named it that. I named it this. Let's

00:20:23,020 --> 00:20:27,310
call that method here." These things are usually fairly simple to

00:20:27,310 --> 00:20:34,310
do, especially if you're in charge of writing that generic code layer.

00:20:34,760 --> 00:20:38,510
If we do this, though, you have to ask the question, like what happens to modules?

00:20:38,510 --> 00:20:45,510
Are modules even a thing? I think for Drupal 8, obviously they are,

00:20:46,590 --> 00:20:50,150
but we have to start making these decisions. What is a module?

00:20:50,150 --> 00:20:55,290
Do we do packages of modules still? Because that gets more complicated when you

00:20:55,290 --> 00:21:01,540
start looking at external dependencies or delivering this stuff together.

00:21:01,540 --> 00:21:07,840
Does anybody know what this is? Not Larry. What is it?

00:21:07,840 --> 00:21:09,810
-A Composer file. -It's a composer JSON file. That's exactly

00:21:09,810 --> 00:21:16,810
what it is. That is its name. That's its description.

00:21:17,450 --> 00:21:23,880
There are its authors, its requirements, other things it depends upon, how it can autoload

00:21:23,880 --> 00:21:26,700
its classes. Does this look like anything to anybody else?

00:21:26,700 --> 00:21:30,720
-Yeah. -Yeah? Does it look like, I don't know, an

00:21:30,720 --> 00:21:35,440
info file? It has all the exact same features, point

00:21:35,440 --> 00:21:42,440
for point, and many, many more, I'll mention. -But it's not Drupal.

00:21:44,560 --> 00:21:50,740
-It's not Drupal, that's true. It's not all roses.

00:21:50,740 --> 00:21:55,050
We do have modules that are beginning to depend upon PHP components, and that's kind of a

00:21:55,050 --> 00:21:58,530
hard nut to crack. We have Composer Manager, which has gotten

00:21:58,530 --> 00:22:02,290
rewritten since the last time I gave this presentation, and it's better than it's ever

00:22:02,290 --> 00:22:05,310
been before, and I think that there are some really great things happening with it.

00:22:05,310 --> 00:22:10,580
Does anybody use Composer Manager? Have you used it recently?

00:22:10,580 --> 00:22:15,250
Okay. It hooks into Drush now, so when you do an

00:22:15,250 --> 00:22:20,680
EN against your module, it finds the Composer dependencies, downloads them, and installs

00:22:20,680 --> 00:22:22,640
them. -[inaudible]

00:22:22,640 --> 00:22:29,640
Yeah, it's super cool. It's super cool. Thank you, Boyan Zivanovic.

00:22:30,990 --> 00:22:36,380
All my suggestions are worthless after talking about that one.

00:22:36,380 --> 00:22:40,140
I was doing this through hook_requirements for a while, so that you had to actively go

00:22:40,140 --> 00:22:46,000
and download this. I don't think that's required anymore.

00:22:46,000 --> 00:22:49,660
Yeah, no. This is kind of the money shot of the Drupal

00:22:49,660 --> 00:22:53,240
8 story, though, is that Drupal 8 is really in a transitional stage.

00:22:53,240 --> 00:22:58,100
It's not one way or the other. It has a collection of PHP components.

00:22:58,100 --> 00:23:01,520
It still has this notion of Drupal modules. It still has hooks.

00:23:01,520 --> 00:23:07,120
It's got event dispatching. It's got all of these parallel systems, so

00:23:07,120 --> 00:23:10,850
we're going to have to figure that out, bottom line.

00:23:10,850 --> 00:23:16,550
But I think it's still a good thing. This is kind of an interesting point.

00:23:16,550 --> 00:23:21,270
The first time I gave this presentation was actually in Munich, and someone asked me about

00:23:21,270 --> 00:23:24,950
upstream dependencies, because obviously we've had a few of those.

00:23:24,950 --> 00:23:31,950
We were depending upon Guzzle and Symfony and Sam Boyer and a bunch of things.

00:23:33,390 --> 00:23:38,650
I looked at him and I said, "Well, that's a fair point, but it's not really any different

00:23:38,650 --> 00:23:43,310
than what you have today." Has anybody in the room ever used panels?

00:23:43,310 --> 00:23:46,090
Okay. Has anybody in the room who's ever used panels

00:23:46,090 --> 00:23:49,230
filed a panels bug? Okay.

00:23:49,230 --> 00:23:52,650
Of those of you filing panels bugs, have you ever been told, "That's not a panels bug.

00:23:52,650 --> 00:23:55,620
That's a page manager bug"? Yeah?

00:23:55,620 --> 00:23:58,580
Okay. Same problem.

00:23:58,580 --> 00:24:02,200
These are detangling the dependencies of how modules interact.

00:24:02,200 --> 00:24:06,580
The same thing's going to happen within this new componentized future.

00:24:06,580 --> 00:24:10,590
Okay. Same problems, different implementation. Yeah?

00:24:10,590 --> 00:24:17,590
-What I saw from Symfony2 when I worked with Symfony is that between versions things get

00:24:23,530 --> 00:24:30,530
really different. Things get really different. How do we deal with that kind of discrepancy?

00:24:35,660 --> 00:24:42,660
-It's funny you should ask, because I really think that build process and version pinning

00:24:43,450 --> 00:24:47,620
must be the day. That's what you have to do going forward.

00:24:47,620 --> 00:24:51,290
Anybody using Drush Make? If you're using Drush Make, and you're pinning

00:24:51,290 --> 00:24:57,220
dev versions, shame on you. If you're getting it from Git, and you haven't

00:24:57,220 --> 00:25:03,540
tagged a particular commit, shame on you. The next guy who comes behind you and builds

00:25:03,540 --> 00:25:07,700
this, if you're collaborating with some other team of developers and they try to run your

00:25:07,700 --> 00:25:11,670
build, and I've committed something to CTools since then, man, they are so screwed.

00:25:11,670 --> 00:25:15,430
Right? Maybe. CTools is actually pretty good about it, but

00:25:15,430 --> 00:25:20,330
there are plenty of modules that aren't. A great example: This one sucks. I'm sorry.

00:25:20,330 --> 00:25:26,790
I'm not picking on you. Rules 2.4 totally screwed me over, right?

00:25:26,790 --> 00:25:32,680
I couldn't even do DB update. It was done, over. I had to figure out how to downgrade

00:25:32,680 --> 00:25:35,720
to 2.3 and figure it out. These things happen.

00:25:35,720 --> 00:25:39,520
It just happens. That's a widely used module that I can pick

00:25:39,520 --> 00:25:43,340
on because it probably happened to some of you in the room, and you're going to remember

00:25:43,340 --> 00:25:48,420
it. I was pinning versions, right?

00:25:48,420 --> 00:25:51,530
When I did my upgrade, it was like, "Oh, well that ain't going to work."

00:25:51,530 --> 00:25:56,960
So, I backed off Rules. No big deal. The same thing's going to happen here, so

00:25:56,960 --> 00:26:01,700
when we begin doing build processes that depend upon Composer components or whatever we do

00:26:01,700 --> 00:26:06,970
in the future, it has the exact same abilities that Drush Make does, and you should definitely

00:26:06,970 --> 00:26:11,100
pin versions. It's the only way to do this sanely, and Composer

00:26:11,100 --> 00:26:14,720
even has a couple of extra things. That Composer lock file, if you've dealt with

00:26:14,720 --> 00:26:17,220
it at all. Composer lock file is actually a great thing

00:26:17,220 --> 00:26:21,730
because it means that everybody gets the same version of everything all the time.

00:26:21,730 --> 00:26:25,650
When I build the project that you're working on, and someone else builds it, and anybody

00:26:25,650 --> 00:26:30,850
else builds it, we're all collaborating against the same thing always.

00:26:30,850 --> 00:26:37,090
Suffice it to say, yeah, it's a potential problem, but there is a solution to it, right?

00:26:37,090 --> 00:26:43,700
Licensing. Wow, do I even want to talk about that?

00:26:43,700 --> 00:26:47,780
Most of the PHP components that you might run into today are typically MIT.

00:26:47,780 --> 00:26:51,300
There are a couple out there that are BSD, but most of them are MIT.

00:26:51,300 --> 00:26:58,300
Anybody, not Larry, know what Drupal is? I guess I'm showing you.

00:26:58,990 --> 00:27:02,990
It's GPL2+, right? That means that anything we've ever committed

00:27:02,990 --> 00:27:09,990
to the Drupal repository is GPL2+. Period. If we start serving up different components

00:27:10,170 --> 00:27:16,790
as being their own thing, it's still GPL2+. If it's on Drupal.org, it's GPL2+.

00:27:16,790 --> 00:27:23,790
There may be some nuance to that. How does this relate to the Drupal second

00:27:26,410 --> 00:27:33,410
thing? You know, I guess you can make your own components,

00:27:33,640 --> 00:27:40,640
the license that makes sense to you. I personally, and I'm definitely in the minority

00:27:41,130 --> 00:27:45,150
here, but I personally would encourage you to make GPL components.

00:27:45,150 --> 00:27:50,030
I think that this has some really interesting security ramifications, and in this day when

00:27:50,030 --> 00:27:55,320
we continue to run into security issues and privacy issues, that having the strongest

00:27:55,320 --> 00:27:57,980
license for that on our side is probably a good thing.

00:27:57,980 --> 00:28:03,190
It does limit the upside potential of your component in terms of who might adopt it because

00:28:03,190 --> 00:28:06,890
there are some people out there who just want to use the code, and they don't want to be

00:28:06,890 --> 00:28:10,240
forced to give it back, whatever they may use with it.

00:28:10,240 --> 00:28:17,240
If you go MIT, MIT and GPL can coexist in terms of what you might do on the Drupal side

00:28:18,120 --> 00:28:23,270
of this equation. Symfony is an MIT library. So is Guzzle. So

00:28:23,270 --> 00:28:30,270
are most of the things in the Composer file. Core versus root. What did I say here? Meh.

00:28:32,940 --> 00:28:36,530
All right. This is the internet.

00:28:36,530 --> 00:28:39,660
Anybody know what percentage of it we occupy? -Where's all the clouds?

00:28:39,660 --> 00:28:43,230
I know, right? -It is a cloud [inaudible] tubes.

00:28:43,230 --> 00:28:49,860
-It's tubes, yeah. It's a series of tubes. Drupal occupies about 2% of the web.

00:28:49,860 --> 00:28:55,420
That is the number that we claim, and at least for the portion of the web that Acquia bothers

00:28:55,420 --> 00:29:01,890
to crawl, it is fairly true, and they crawl a very significant portion of it.

00:29:01,890 --> 00:29:08,880
This is WordPress, okay? Between Drupal and WordPress, we occupy a

00:29:08,880 --> 00:29:14,000
quarter of the web. Anybody happen to know how much of it is PHP,

00:29:14,000 --> 00:29:19,120
that rest, the 75%? Not Larry.

00:29:19,120 --> 00:29:26,120
-[inaudible] -PHP. Period. 5?

00:29:26,440 --> 00:29:33,440
-10? 5 to 10? Maybe more. -It's 57%. Between Drupal, WordPress, and

00:29:33,990 --> 00:29:40,990
PHP at large, we run 82% of the web. We being PHP. Yeah, 82. There's the number

00:29:45,420 --> 00:29:52,420
with exclamations and everything. That's 28 times what Drupal runs all by itself.

00:29:58,010 --> 00:30:05,010
This is the group of people I'm talking about getting involved with.

00:30:07,540 --> 00:30:12,800
Here's kind of my breakdown of the whole talk. Drupal has built and maintained a really great

00:30:12,800 --> 00:30:19,090
working solution for the last 14 years before PHP had anything worth considering, okay?

00:30:19,090 --> 00:30:22,340
We did a pretty good job. It served us well.

00:30:22,340 --> 00:30:27,170
But they clearly caught up. They have a technically capable, similar solution

00:30:27,170 --> 00:30:31,790
that does everything ours does and, frankly, more.

00:30:31,790 --> 00:30:38,030
If we were to adopt this, I think, and this is just me hypothesizing, but I think that

00:30:38,030 --> 00:30:42,310
the more components we create, the greater adoption of Drupal components we're going

00:30:42,310 --> 00:30:48,290
to see. If DBTNG were a separate component, I could

00:30:48,290 --> 00:30:52,290
see someone using that because they preferred it over Doctrine, maybe.

00:30:52,290 --> 00:30:56,740
Plug-ins, utility, whatever. If they have a problem with one of those things,

00:30:56,740 --> 00:30:59,560
if they need to learn it inside and out, who are they going to call?

00:30:59,560 --> 00:31:04,570
Right? They're going to call us, obviously. They're

00:31:04,570 --> 00:31:10,880
going to call the Drupal community in order to come solve their learning or support needs

00:31:10,880 --> 00:31:17,880
for a Drupal component. I think this is a very clear sort of response

00:31:20,600 --> 00:31:25,210
to what the PHP world has done is to simply like, if you can't beat them, join them.

00:31:25,210 --> 00:31:29,830
Clear future. We join them. We do what they do. We contribute

00:31:29,830 --> 00:31:34,260
to their same ethos and work flow. We're going to get a lot of really interesting

00:31:34,260 --> 00:31:37,640
benefits out of it. I want to bring these back up.

00:31:37,640 --> 00:31:41,510
Where is PHP going? What will happen to PHP projects that don't

00:31:41,510 --> 00:31:47,660
adopt what the rest of PHP is doing? And more importantly, what is Drupal?

00:31:47,660 --> 00:31:51,690
I'm just going to leave you with my answer to this last one, okay?

00:31:51,690 --> 00:31:56,710
My answer to "What is Drupal?" is really simple. Drupal is a community. Drupal is the people

00:31:56,710 --> 00:32:00,510
at this event. Drupal is not necessarily a collection of

00:32:00,510 --> 00:32:07,510
software, though we may think that it is sometimes. Increasingly as we abstract and pull apart

00:32:08,150 --> 00:32:14,710
that collection of software to operate independently, what Drupal really is is the community that

00:32:14,710 --> 00:32:19,980
builds that software. These are just kind of my thoughts about what's

00:32:19,980 --> 00:32:26,080
happening here within PHP, in the Drupal world. I'd be happy to entertain any questions you

00:32:26,080 --> 00:32:28,830
have. I have no idea how fast or slow I went.

00:32:28,830 --> 00:32:35,830
-You have 20 minutes. -Yeah, okay. So a little fast. Not too bad.

00:32:35,980 --> 00:32:37,920
Questions, anybody? And I won't exclude Larry. -For other popular open-source PHP platforms,

00:32:37,920 --> 00:32:44,920
CMSes, whatever you want to call them, are they doing the same things Drupal's doing

00:32:47,400 --> 00:32:54,400
right now or considering it? -Well, I think, like looking at our largest

00:32:55,710 --> 00:33:01,860
rival, WordPress, they couldn't care less, as best as I can tell.

00:33:01,860 --> 00:33:08,860
Having recently walked through some of their new OO code, I had to put it down because

00:33:11,220 --> 00:33:18,220
Larry has drilled into me way too many dependency injection and things like that.

00:33:18,540 --> 00:33:22,220
-I taught you too well. -Larry's taught me too well. I can't look

00:33:22,220 --> 00:33:26,100
at WordPress's code. That's not to deride them, obviously.

00:33:26,100 --> 00:33:29,190
They've done a really good job at what they do, right?

00:33:29,190 --> 00:33:34,240
-Well, we were there too just a couple years ago.

00:33:34,240 --> 00:33:39,910
-Yeah. About three of them. I could look through most of Drupal 7's code base and feel the

00:33:39,910 --> 00:33:46,370
same way. Like I said, it's not to deride them, but

00:33:46,370 --> 00:33:50,340
that's not a priority for them. They're busy taking over the world in a completely

00:33:50,340 --> 00:33:54,600
different way. If there's one to talk about it's probably

00:33:54,600 --> 00:34:01,600
Laravel, which is definitely component-based and moving forward there.

00:34:03,580 --> 00:34:08,339
I think what's more interesting to see than the... Drupal's an interesting beast of its

00:34:08,339 --> 00:34:13,299
own, so we'll put it aside, but if you look at the Wordpresses of the world, of which

00:34:13,299 --> 00:34:16,559
there aren't really many, they aren't really moving towards this at all.

00:34:16,559 --> 00:34:20,639
But we're seeing all these little micro frameworks and things like that pop up, like Laravel,

00:34:20,639 --> 00:34:25,750
Silex, those sorts of things, and they're all embracing this. Yeah, Larry.

00:34:25,750 --> 00:34:29,019
-Can I disagree with you? -Yeah, disagree away. No, you may not.

00:34:29,019 --> 00:34:29,200
-From what I'm seeing in the PHP community, there are three classes of project: Projects

00:34:29,200 --> 00:34:36,200
that are based on or trying to move toward this modern componentized model, projects

00:34:37,250 --> 00:34:44,250
that are in the process of dying, and WordPress. -Okay.

00:34:50,419 --> 00:34:56,750
-So, phpBB is now based on Symfony. -Right.

00:34:56,750 --> 00:34:57,339
-EZ Publish? Now based on Symfony. Laravel, using Symfony components. Zend framework and

00:34:57,339 --> 00:35:04,339
Symfony are both shifting toward being component libraries with some glue as an afterthought.

00:35:04,789 --> 00:35:11,480
This is actually a very broad trend among projects that [inaudible].

00:35:11,480 --> 00:35:16,380
-Yeah, well, and I think it's interesting to just put WordPress in their own category

00:35:16,380 --> 00:35:23,279
because they're definitely not dying. I think long-term, what they've really succeeded

00:35:23,279 --> 00:35:28,930
at is being hyper user-friendly. Now, having used WordPress pretty extensively

00:35:28,930 --> 00:35:32,900
over the course of the last 10 months, I don't understand that analogy.

00:35:32,900 --> 00:35:36,509
People say that all the time. I don't really see it as being particularly more friendly

00:35:36,509 --> 00:35:41,529
than most of the Drupal stuff I do on a day-to-day basis, but it's definitely got a simpler concept

00:35:41,529 --> 00:35:46,730
that you can bootstrap sooner. Maybe that's where they're succeeding, but

00:35:46,730 --> 00:35:53,730
they're quickly attempting to infringe on Drupal's space around typical structured data

00:35:53,730 --> 00:35:57,289
sort of processes. They haven't cracked that nut yet. I don't

00:35:57,289 --> 00:36:00,599
know why. Well, I do know why. It's because it needs

00:36:00,599 --> 00:36:04,460
sort of a migration process. It's going to be utter hell for them.

00:36:04,460 --> 00:36:11,460
They still have, obviously, a huge user base, and that's not going to go away quickly no

00:36:11,690 --> 00:36:17,380
matter what the technical underpinnings of their solution.

00:36:17,380 --> 00:36:23,289
To characterize, is anybody not adopting this or WordPress is dying? Maybe that's totally

00:36:23,289 --> 00:36:28,759
fair. But a lot of projects have figured it out.

00:36:28,759 --> 00:36:35,710
I mean, phpBB. For so long, they've had a really great forum, but they've had serious

00:36:35,710 --> 00:36:42,079
security issues on and off forever, and they're getting really serious about their code base.

00:36:42,079 --> 00:36:47,210
They're adopting this componentized solution. I think they could be a really serious contender

00:36:47,210 --> 00:36:54,210
going forward on the forum side, which, interesting note, Drupal started as a forum.

00:36:57,140 --> 00:37:00,900
I guess take that information and do with it what you will.

00:37:00,900 --> 00:37:02,049
Other questions? Yeah.

00:37:02,049 --> 00:37:08,200
-You mentioned components versus modules going on beyond [inaudible], something like that.

00:37:08,200 --> 00:37:15,200
How do you see that shift now where there would be maybe some type of module wrapper

00:37:16,910 --> 00:37:23,910
also on DIO, and then you would run in Composer to pull down the external dependency, something

00:37:25,619 --> 00:37:28,069
like that? -Totally. Totally something like that.

00:37:28,069 --> 00:37:34,609
Or we move to a situation where modules are Composer-able, which they kind of already

00:37:34,609 --> 00:37:36,349
are. There are some things you can do to Composer

00:37:36,349 --> 00:37:41,130
to make modules be Composer-able. You can do a Composer install and end up with

00:37:41,130 --> 00:37:47,119
Drupal modules, but I would like to see us actually embrace real, legitimate Composer

00:37:47,119 --> 00:37:52,900
support and essentially turn Drupal.org into our own Packagist install for that sort of

00:37:52,900 --> 00:37:57,480
stuff. But there is some nuance to doing that, and

00:37:57,480 --> 00:38:00,980
what it actually means on the code side, because a Drupal module?

00:38:00,980 --> 00:38:07,980
It runs in Drupal, thus Drupal module, right? So, I guess what I'm really advocating is

00:38:08,339 --> 00:38:12,779
that we begin seriously thinking about what it looks like for it not to run in Drupal.

00:38:12,779 --> 00:38:16,640
If we happen to be running the same routing system as everybody else, which, by the way,

00:38:16,640 --> 00:38:23,130
we largely do, then what's holding us back from writing code that Laravel could adopt,

00:38:23,130 --> 00:38:30,130
right? Or Silex or any of these things. I mean, if we build it, will they come, so

00:38:31,420 --> 00:38:34,920
to speak? -Sure, if it's good.

00:38:34,920 --> 00:38:38,980
-Yeah. That's actually the reason I talk about licensing, because I think the answer is "sure,

00:38:38,980 --> 00:38:43,210
if it's good." If we build something worthwhile and worth

00:38:43,210 --> 00:38:50,210
using, we've got 14 years of history showing that people will absolutely come and use it.

00:38:52,660 --> 00:38:59,170
I guess the bottom line to that one is I really hope that we get to a point where I can just

00:38:59,170 --> 00:39:04,369
add a require statement for CTools, and boom, I've got it.

00:39:04,369 --> 00:39:11,369
That's what I'd like to see happening. Other questions?

00:39:11,650 --> 00:39:18,069
No other questions? -What, if any... Are there downsides to this?

00:39:18,069 --> 00:39:24,869
Are there potential hazards to Drupal taking this approach [inaudible]

00:39:24,869 --> 00:39:31,869
-I don't know. I feel like... -What am I not thinking that I should be thinking

00:39:37,710 --> 00:39:39,390
in asking you about? -I think that that's a totally fair question,

00:39:39,390 --> 00:39:43,240
and I don't actually have an answer, so maybe it's like, "I don't know. Let's think about

00:39:43,240 --> 00:39:45,450
it." What are the downsides?

00:39:45,450 --> 00:39:49,720
I think... -What would be barriers to adoption to keep

00:39:49,720 --> 00:39:54,109
the Drupal community from deciding, "Yeah, this is the [inaudible]"?

00:39:54,109 --> 00:39:59,259
-Yeah, I think there are some really obvious ones right off the bat. We have certain things

00:39:59,259 --> 00:40:02,460
that aren't componentized yet that should be.

00:40:02,460 --> 00:40:09,460
We have other legacy code within Drupal that's going to be really hard to pull out.

00:40:11,069 --> 00:40:16,980
Case in point: Form, right? Form API is a big deal, and we've made some really cool

00:40:16,980 --> 00:40:20,509
changes to it in Drupal 8. If you haven't played with it yet, Form State

00:40:20,509 --> 00:40:24,609
is its own object, which is a ton easier to deal with than it's ever been before, but

00:40:24,609 --> 00:40:28,089
I digress. But you know, Symfony has their own form component,

00:40:28,089 --> 00:40:32,869
which some Symfony form component maintainers sat down with Drupal form component maintainers

00:40:32,869 --> 00:40:36,009
and convinced them that they could totally switch to Symfony's.

00:40:36,009 --> 00:40:40,940
Nobody attempted that because it's going to be a really big thing, and we already did

00:40:40,940 --> 00:40:47,299
a lot in 8, but I think Form holds this back for all of 8, no doubt.

00:40:47,299 --> 00:40:53,390
Until we decide to remove Form, we are going to be building Drupal-specific code.

00:40:53,390 --> 00:40:57,829
I think really clearly that's obvious to me. Unless you build something that doesn't need

00:40:57,829 --> 00:41:04,829
forms, in which case, okay, whatever. That would be interesting code.

00:41:06,180 --> 00:41:11,249
I think it's stuff like that. It'll be interesting. It's happened. I'm sure

00:41:11,249 --> 00:41:14,460
it's happened. Does anybody know of a module that doesn't

00:41:14,460 --> 00:41:21,460
have a form? -[inaudible] don't have forms.

00:41:23,019 --> 00:41:27,819
-Okay. I'm not saying there are no downsides. I think there totally are some downsides that

00:41:27,819 --> 00:41:33,059
we probably haven't run into yet. There have been downsides to adopting every

00:41:33,059 --> 00:41:35,089
component that we adopted except for Guzzle, right?

00:41:35,089 --> 00:41:42,089
Guzzle was like, what? We removed something on the order of like 25 billion cyclomatic

00:41:45,369 --> 00:41:51,660
complexity points for Drupal HTP request and replaced it with something that had 100% test

00:41:51,660 --> 00:41:58,660
coverage? That's a big win. There were downsides to adopting Symfony routing.

00:41:58,910 --> 00:42:05,410
There were downsides to adopting YAML, downsides to adopting any of these things.

00:42:05,410 --> 00:42:09,960
But again, I guess I would go back to the site-building analogy.

00:42:09,960 --> 00:42:14,710
You make these sorts of decisions every time you pick the modules you want to use for a

00:42:14,710 --> 00:42:18,660
customer. You write glue code to make stuff work.

00:42:18,660 --> 00:42:24,009
I guess, going back to my "What is Drupal?" statement, Drupal from a code perspective

00:42:24,009 --> 00:42:27,900
might be a collection of components with a little bit of glue code to make it all work

00:42:27,900 --> 00:42:31,240
together, right? -That's what I was thinking throughout most

00:42:31,240 --> 00:42:37,559
of this talk was, okay, in a post singular Drupal world where Drupal just becomes a series

00:42:37,559 --> 00:42:40,529
of components, what would Flag module look like?

00:42:40,529 --> 00:42:43,880
-Right. -What I'm seeing is: Well, we might replace

00:42:43,880 --> 00:42:50,880
the form system with some other component. Okay, that's fine. We still need another component

00:42:56,099 --> 00:42:59,450
that does Entity-like objects because that's really one of the major [inaudible]

00:42:59,450 --> 00:43:04,390
-Yep. -That's what it does.

00:43:04,390 --> 00:43:11,390
-Yeah. Totally. -I've argued before that what makes Drupal

00:43:18,509 --> 00:43:18,599
Drupal, Drupal's value-add in this new PHP era is our Entity system, Views, and the community.

00:43:18,599 --> 00:43:18,650
-Yeah. -Those are the things that we really can't

00:43:18,650 --> 00:43:18,720
outsource. Really strong concept modeling, really strong concept assembly, and a really

00:43:18,720 --> 00:43:19,349
strong community. -Well, I would...

00:43:19,349 --> 00:43:23,970
-Anything else is a commodity we can outsource. -Yeah. I would even argue that the Entity

00:43:23,970 --> 00:43:29,999
system... Doctrine's Entity-type thing? It's pretty good.

00:43:29,999 --> 00:43:35,779
-No, it isn't. I hate Doctrine. -I hate our existing Entity system, right?

00:43:35,779 --> 00:43:40,519
I mean, so what? In terms of code doing the thing you need

00:43:40,519 --> 00:43:46,980
it to do, Doctrine can totally do it. So can Drupal's Entity system. So can, gosh,

00:43:46,980 --> 00:43:53,289
there are a half dozen PHP-based solutions for that problem space, right?

00:43:53,289 --> 00:43:57,910
I'm sure there are even a few Views-like things, though I would never want to give Views up,

00:43:57,910 --> 00:44:01,660
and if I'm not willing to give up Views, I'm not willing to give up entities, right?

00:44:01,660 --> 00:44:07,079
Simple math. Do I agree? Yeah, but I'm going to move all

00:44:07,079 --> 00:44:09,589
the code away and say mostly it's the community, right?

00:44:09,589 --> 00:44:15,910
I think Drupal's big add are the people sitting in this room, the people building Drupal,

00:44:15,910 --> 00:44:19,109
building it's contrib, implementing it, teaching others.

00:44:19,109 --> 00:44:23,499
That's what Drupal has over every other PHP anything, right?

00:44:23,499 --> 00:44:30,499
In fact, it's what Drupal has over almost every open-source anything, right?

00:44:31,799 --> 00:44:37,289
The top ten open-source projects in the world, right? In terms of scale and a number of other

00:44:37,289 --> 00:44:44,289
items. That, to me, is our big value-add, and the

00:44:45,390 --> 00:44:50,039
code that we do it on top of should be as good as possible, but I think what we do with

00:44:50,039 --> 00:44:57,039
that code, to a certain degree, could really increase the adoption of Drupal as a whole.

00:44:58,079 --> 00:45:02,349
My point here is to encourage you to look at this for yourself, decide whether you think

00:45:02,349 --> 00:45:07,980
I'm right or whether I'm wrong, and help get Drupal there when you decide I'm right because

00:45:07,980 --> 00:45:12,450
I think you will. Anyways, I'm going to let you go a little

00:45:12,450 --> 00:45:15,859
bit early. If you have other questions, feel free to hunt me down. I think it's a little

00:45:15,859 --> 00:45:21,059
early. Unlike what people fear. Oh, two more questions? Sure. Go, Joseph.

00:45:21,059 --> 00:45:28,059
-I'm wondering how far are we at recovering systems [inaudible]. The second one is: We're

00:45:40,170 --> 00:45:47,170
trying to align our processes with the wider PHP world. We're working on getting Drupal

00:46:07,720 --> 00:46:08,440
to work into a pool request-based workflow system, which I find very interesting, but

00:46:08,440 --> 00:46:09,549
specifically for the Drupal Core workflows, we came up with a solution that brings in

00:46:09,549 --> 00:46:10,009
the patchwork flow and the pool request working, which I'm very curious about how this will

00:46:10,009 --> 00:46:15,499
translate to the wider PHP world because the way that Kata pool requests work don't really

00:46:15,499 --> 00:46:17,680
match the way that we work collaboratively on issues.

00:46:17,680 --> 00:46:17,710
-Yeah, I agree. -I'd really like to see us share the experience

00:46:17,710 --> 00:46:17,740
that we get into aligning those processes also with the others.

00:46:17,740 --> 00:46:22,950
-Yeah, I'm going to hit your first question, which was how far along are we on this process,

00:46:22,950 --> 00:46:26,150
which is to say it depends upon what component of Drupal you look at.

00:46:26,150 --> 00:46:33,150
If you're looking at actions, not so far, right? It's tied to forms, which might be

00:46:35,160 --> 00:46:42,160
an argument in favor of our conversation earlier today, but if you look at anything sitting

00:46:43,779 --> 00:46:49,450
in the Drupal component directory, all of that stuff is intended to just have a Composer

00:46:49,450 --> 00:46:56,450
file dropped on it and be put out on the Git subtree.

00:46:56,460 --> 00:47:00,900
There are at least a good dozen chunks of code sitting in there that are ready for the

00:47:00,900 --> 00:47:04,140
rest of the world to begin using. We just haven't made them widely available

00:47:04,140 --> 00:47:09,150
yet. That is by far the minority of Drupal, and

00:47:09,150 --> 00:47:15,759
so I would guess I'd say not very far. We've begun to dip our toe into the waters

00:47:15,759 --> 00:47:18,910
and see what that looks like. In terms of your second question, I guess

00:47:18,910 --> 00:47:22,869
I would respond with I'm not just talking about Core.

00:47:22,869 --> 00:47:28,470
Core definitely has its own workflow problems, but if you look at modules as a whole, what

00:47:28,470 --> 00:47:35,099
we call modules today, there's really nothing preventing individual module maintainers if

00:47:35,099 --> 00:47:42,099
they have the technical underpinnings from a support system from adopting a very GitHub-similar

00:47:42,099 --> 00:47:46,650
approach that the rest of the PHP world could just tie right into.

00:47:46,650 --> 00:47:53,450
Whether they would or not, whether us all being located on Drupal.org is a barrier to

00:47:53,450 --> 00:47:59,230
entry for that, I think is a completely valid conversation to have, but it's one that is

00:47:59,230 --> 00:48:04,670
due probably a good two, three hours of conversation all by itself, so I'm not going to get into

00:48:04,670 --> 00:48:09,369
that except to say that there are probably solutions, technical in nature, that could

00:48:09,369 --> 00:48:13,809
be implemented to help smooth that transition to some degree.

00:48:13,809 --> 00:48:20,809
I don't know, maybe we implement log-in with your GitHub ID on Drupal.org, right?

00:48:22,119 --> 00:48:25,920
That might be a quick solution. It might not be.

00:48:25,920 --> 00:48:30,259
Maybe there's a legal reason not to do that. I don't know, but I'm just saying.

00:48:30,259 --> 00:48:35,069
There are options. Any other questions? Yeah.

00:48:35,069 --> 00:48:42,069
-You talk about [inaudible] use as components [inaudible]

00:48:46,930 --> 00:48:53,480
To clarify, I think that that is a good strategy for Drupal 8.

00:48:53,480 --> 00:48:58,739
For Drupal 9, ideally I'd love to see you just writing what we consider modules today,

00:48:58,739 --> 00:49:03,829
but having them actually be generic PHP components that Drupal can just use.

00:49:03,829 --> 00:49:10,829
-So, one of the things that Drupal suffers right now [inaudible] you see that three or

00:49:21,079 --> 00:49:28,079
four modules do the same thing. It is very hard for them to merge.

00:49:29,059 --> 00:49:29,200
-Right. -I am wondering if we suffer from that one

00:49:29,200 --> 00:49:29,230
component. -Absolutely.

00:49:29,230 --> 00:49:32,739
Absolutely, but I think, you know, they do the exact same things we do.

00:49:32,739 --> 00:49:39,210
If you have Packagist--okay, little story. I wanted to do a Redis store for API calls

00:49:39,210 --> 00:49:45,109
I was doing in the recent past, so I went to Packagist and I looked up Redis, and there

00:49:45,109 --> 00:49:51,049
were probably a dozen different Redis components. One of them had 3.5 million installs, and

00:49:51,049 --> 00:49:55,029
no one else was close to that, so guess which one I picked?

00:49:55,029 --> 00:50:02,029
They do the exact same things we do in terms of, if you will, letting market forces determine

00:50:04,019 --> 00:50:07,539
where it goes. We went CCK. Why did we go CCK? Because it

00:50:07,539 --> 00:50:14,539
was the solution everyone was using. Core has a lot of the same sort of solutions.

00:50:16,109 --> 00:50:21,529
We may not have adopted the same schema, which is a different topic, but everything else

00:50:21,529 --> 00:50:27,829
is pretty CCK in nature. They're doing the exact same things, which

00:50:27,829 --> 00:50:32,589
is just to say before you go writing something, see if something like that exists.

00:50:32,589 --> 00:50:37,029
When I was looking at WordPress's code, as I mentioned their OO layers recently, I was

00:50:37,029 --> 00:50:41,509
actually looking at some oEmbed code that they had written from scratch because oEmbed

00:50:41,509 --> 00:50:46,700
is kind of cool. What's WordPress doing? They wrote their entire own class structure

00:50:46,700 --> 00:50:49,680
for it. So, I went to Packagist, and I'm like "oEmbed."

00:50:49,680 --> 00:50:51,460
It comes back with a half-dozen different ones.

00:50:51,460 --> 00:50:53,930
I picked one at random. It was the wrong one.

00:50:53,930 --> 00:50:59,380
I picked another one later. It was really good, you know, and it took

00:50:59,380 --> 00:51:05,579
me like 30 minutes to write a filter for Drupal 8 that just made oEmbed work around that.

00:51:05,579 --> 00:51:09,589
Literally, I wrote a filter plug, and that's what I did.

00:51:09,589 --> 00:51:13,859
It's no big deal. This is why I say Drupal second, you know?

00:51:13,859 --> 00:51:18,170
Find the component or build the component, write the adapter layer.

00:51:18,170 --> 00:51:22,359
In my case, it was a filter. It was a text filter. No big deal.

00:51:22,359 --> 00:51:26,690
-This concept of Drupal second, is that something that you coined...

00:51:26,690 --> 00:51:30,910
-I pulled it from Chris Pliakas, who is another Acquian who's doing a ton.

00:51:30,910 --> 00:51:34,960
He actually, I think, was the guy who started Composer Manager.

00:51:34,960 --> 00:51:39,130
He gave it away to people who he felt were going to take better care of it than he could,

00:51:39,130 --> 00:51:44,299
but he's been doing a lot of really cool work at Acquia around various components and things

00:51:44,299 --> 00:51:46,339
like that. He was the first person to ever say it to

00:51:46,339 --> 00:51:51,339
me, so I stole it from him, which he told me, "Feel free to steal it."

00:51:51,339 --> 00:51:58,339
Yeah, it's mine. It's totally mine. -It would finally [inaudible]

00:51:59,299 --> 00:52:01,690
-On what? -[inaudible]

00:52:01,690 --> 00:52:08,690
-Oh, I don't know. I'll start writing things. I don't know.

00:52:09,470 --> 00:52:15,650
You know what? Actually, Chris has a great post on acquia.com in the blogs.

00:52:15,650 --> 00:52:22,650
If you hit me up afterwards I'll find 

00:52:27,160 --> 00:52:32,499
it for you. -Okay. Actually this is the same concept that

00:52:32,499 --> 00:52:33,579
-Yeah, well he's a really smart guy. -He was basically saying, though, there's

00:52:33,579 --> 00:52:35,749
going to be a transition period where Drupal 7 and Drupal 8 really coexist, and no one

00:52:35,749 --> 00:52:40,119
is going to want to maintain two different modules, so it really, really, really makes

00:52:40,119 --> 00:52:46,190
sense to extract all the business logic into libraries...

00:52:46,190 --> 00:52:50,249
-Yeah. -...and just write around it.

00:52:50,249 --> 00:52:54,119
-It makes great business sense. If you were maintaining a Drupal 7 wrapper

00:52:54,119 --> 00:52:58,710
and a Drupal 8 wrapper, your code path to maintain would be dramatically smaller than

00:52:58,710 --> 00:53:02,700
if you're maintaining completely separate modules or different versions of the same

00:53:02,700 --> 00:53:05,619
module, where all the code and logic is right there.

00:53:05,619 --> 00:53:12,430
Okay. Go write a PHP component that does the thing you need. Write objects. Make your Drupal

00:53:12,430 --> 00:53:17,970
7 one dependent upon xautoload or Krautoload or whatever it is that you like to use over

00:53:17,970 --> 00:53:23,180
there. No big deal, right? Solved.

00:53:23,180 --> 00:53:27,589
If you want to write a backward compatibility layer, this becomes much easier because your

00:53:27,589 --> 00:53:33,130
code is not changing. You're just writing layers.

00:53:33,130 --> 00:53:37,739
Drupal 9 comes out. What do you do? You write a new layer.

00:53:37,739 --> 00:53:41,980
You don't rewrite all of your hooks, right? Or maybe you do, but there's much less code

00:53:41,980 --> 00:53:46,739
sitting in them. This is the same notion over and over and

00:53:46,739 --> 00:53:50,609
over again. All right. I think we're out of time. Out

00:53:50,609 --> 00:53:53,640

YouTube URL: https://www.youtube.com/watch?v=ParWErP0hSI


