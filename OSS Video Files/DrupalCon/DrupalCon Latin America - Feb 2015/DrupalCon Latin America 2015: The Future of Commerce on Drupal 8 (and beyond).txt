Title: DrupalCon Latin America 2015: The Future of Commerce on Drupal 8 (and beyond)
Publication date: 2015-02-11
Playlist: DrupalCon Latin America - Feb 2015
Description: 
	Speakers: rszrama
Drupal Commerce was developed from the ground up on Drupal 7, both benefiting from and contributing to the development of the Entity API, Views, and Rules modules. It redefined what Drupal can do in the eCommerce space, empowering businesses to sell physical products, event registrations, reservations, and digital products. Its ecosystem of contributed modules supports recurring billing with all of its complexities in addition to complex tax, multilingual, multi-currency, and omnichannel configurations.

Moving forward to Drupal 8, we're reevaluating our feature set and architecture to make Commerce easier to use and to develop for. Starting with sprints at DrupalCon Austin and in Paris during the Summer of 2014, we began developing a generic set of libraries solving price and address management to share with the rest of the PHP community. These libraries are then used by our Drupal 8 modules along with a fresh implementation of the various entity types and subsystems that make up the Drupal Commerce framework.

In this session, you will learn about:

The generic PHP libraries we are developing for handling prices, taxes, discounts, and addresses and our efforts to see them adopted by other PHP based eCommerce projects
The key features of Drupal 8 we’re taking advantage of
How changes to our architecture and user interfaces address the most common frustrations developers and merchants have with
Drupal Commerce 1.x frustrations, and how we’ve addressed them
What Commerce 2.x is capable of today and how our roadmap compares to the Drupal 8 release schedule
Let’s talk architecture, look at a demo, get excited, and start bidding on our first eCommerce projects powered by Drupal 8.
Captions: 
	00:00:01,730 --> 00:00:03,189
Alright, we'll go ahead and get started.

00:00:03,189 --> 00:00:08,010
You have come to the Future of Commerce on Drupal 8 and beyond

00:00:08,010 --> 00:00:08,809
presentation.

00:00:08,809 --> 00:00:11,809
I am Ryan Szrama with Commerce Guys.

00:00:11,809 --> 00:00:16,940
I am a longtime community members starting with Ubercart on Drupal 5 and even

00:00:16,940 --> 00:00:17,660
did some stuff

00:00:17,660 --> 00:00:21,830
before that. My first blog was on Drupal 4.7

00:00:21,830 --> 00:00:25,460
and I got my first ever freelance contract by putting up a two-page blog

00:00:25,460 --> 00:00:26,150
post about

00:00:26,150 --> 00:00:29,189
QuickBooks integration so it's always been about e-commerce and it's

00:00:29,189 --> 00:00:29,990
been fun and I've

00:00:30,900 --> 00:00:33,260
grown and learned about through being a part of the Drupal community.

00:00:34,600 --> 00:00:36,290
For commerce

00:00:36,290 --> 00:00:40,120
2.X on Drupal 8 we've actually brought in a co-maintainer

00:00:40,120 --> 00:00:44,239
Bojan Zivanovic, who cannot be here so I'm presenting on his behalf,

00:00:45,200 --> 00:00:48,710
is the co-maintainer for Commerce 2 with special focus on

00:00:48,710 --> 00:00:51,280
the PHP libraries is that we are developing

00:00:51,280 --> 00:00:54,360
outside of our Drupal modules and then

00:00:54,360 --> 00:00:58,030
I'm more focused on the actual Drupal side with entity development and all

00:00:58,030 --> 00:00:58,850
that kind of stuff.

00:00:59,500 --> 00:01:02,280
But we are both employees at Commerce Guys.

00:01:02,800 --> 00:01:06,520
Bojan works remotely from Serbia. I work remotely from South Carolina,

00:01:06,520 --> 00:01:07,500
probably very similar

00:01:08,200 --> 00:01:09,500
states.

00:01:11,000 --> 00:01:14,189
We are the creators of both Platform.SH

00:01:14,189 --> 00:01:19,119
and Drupal Commerce which was born in

00:01:19,119 --> 00:01:23,240
late 2010 or early 2011, finally launching at DrupalCon London.

00:01:23,900 --> 00:01:27,700
So it has been around for a while and our vision since

00:01:27,700 --> 00:01:28,340
the beginning

00:01:28,340 --> 00:01:31,880
has been for Drupal Commerce to be the number one open source

00:01:31,880 --> 00:01:33,240
e-commerce platform

00:01:33,240 --> 00:01:34,400
in the world.

00:01:34,400 --> 00:01:36,400
Its very visionary because its supposed to be.

00:01:36,400 --> 00:01:40,409
But we've always said that we power truly flexible e-commerce because

00:01:41,100 --> 00:01:44,299
because we're built on Drupal anything can be altered nothing has to

00:01:44,300 --> 00:01:45,211
be hard coded.

00:01:45,340 --> 00:01:49,080
A lot of what we do depends on rules and views and other things that can be

00:01:49,090 --> 00:01:50,890
overridden, disabled, changed,

00:01:50,890 --> 00:01:54,950
et cetera and I'll just start now by by providing that sort of an introduction

00:01:54,950 --> 00:01:55,630
I'm not sure

00:01:55,630 --> 00:01:59,930
by show of hands has anybody here never used Drupal Commerce on a project?

00:01:59,930 --> 00:02:02,000
It's new to a few people? 

00:02:03,000 --> 00:02:04,000
The big idea behind

00:02:04,600 --> 00:02:07,619
Drupal Commerce is that was built from scratch on Drupal 7

00:02:07,619 --> 00:02:11,110
to take full advantage of Drupal's entity API.

00:02:11,600 --> 00:02:12,810
So the fact that

00:02:12,810 --> 00:02:16,810
in Drupal 7 anything can be fieldable, anything can have multiple types

00:02:16,810 --> 00:02:18,330
and you can display them

00:02:18,330 --> 00:02:21,420
in a variety of different ways including

00:02:21,420 --> 00:02:26,010
using views for any type of entity. We build everything around the system

00:02:26,010 --> 00:02:29,610
so all of our administrative lists like product lists, orders,

00:02:29,610 --> 00:02:33,140
line items, all that stuff, are built using views so anything can be

00:02:33,140 --> 00:02:35,350
customized from the user interface and of course

00:02:35,350 --> 00:02:40,040
exported to code or altered by whatever module you used to maintain your project.

00:02:40,040 --> 00:02:45,220
But both the front end and the back end and even forms. So in Drupal Commerce

00:02:45,220 --> 00:02:45,750
on

00:02:45,750 --> 00:02:49,230
D7, we contributed a patch to views to allow

00:02:49,230 --> 00:02:52,709
views to render a form so you can actually customize the shopping cart

00:02:52,709 --> 00:02:55,620
form in the same way you customize the shopping cart block

00:02:55,620 --> 00:03:00,209
among other things that you use views for. We also use rules for all of our

00:03:00,209 --> 00:03:01,130
business logic

00:03:01,130 --> 00:03:05,470
I'm so determining pricing, determining schedules, product availability, and

00:03:06,400 --> 00:03:09,370
payment method applicability for any different

00:03:09,370 --> 00:03:13,019
order are you may be based on country have different payment options are

00:03:13,019 --> 00:03:14,000
shipping options.

00:03:14,000 --> 00:03:17,700
All of that business logic is handled via the rules module

00:03:17,700 --> 00:03:21,030
although you can use equivalent Drupal hooks

00:03:21,030 --> 00:03:22,300
to do the same things. 

00:03:24,900 --> 00:03:28,120
The big idea here is that we wanted to hard code no business logic

00:03:28,120 --> 00:03:31,489
so that you didn't have to undo something that in code

00:03:31,489 --> 00:03:35,209
in order to make Drupal Commerce work for your particular client to use case.

00:03:35,209 --> 00:03:38,720
If anybody used Ubercart before on D6 or 5  

00:03:38,720 --> 00:03:40,100
you might be familiar with the fact that 

00:03:40,700 --> 00:03:42,300
everything had to be a product

00:03:42,400 --> 00:03:44,739
and the node was a product and so you had to have a node

00:03:44,739 --> 00:03:48,329
whether there was actually any need to display product data or not.

00:03:48,900 --> 00:03:50,000
such as

00:03:51,000 --> 00:03:52,000
an event ticket

00:03:52,300 --> 00:03:54,000
Like buying your ticket for DrupalCon,

00:03:54,540 --> 00:03:56,920
it doesn't necessarily need a standalone product page

00:03:57,380 --> 00:04:00,920
its just a skew that then gets added to the cart by some other form.

00:04:01,620 --> 00:04:05,600
So we tried to roll back a lot of the hard coded things like that

00:04:05,620 --> 00:04:07,650
and both data model and the business logic

00:04:07,880 --> 00:04:09,280
in Drupal Commerce.

00:04:09,540 --> 00:04:12,700
Then we also rely on essential contributed modules

00:04:12,940 --> 00:04:17,020
that really round out the feature set. So we really tried to be minimalistic in

00:04:17,030 --> 00:04:19,600
what we included in the core feature set of Commerce.

00:04:20,320 --> 00:04:23,400
For example there is no shipping module in the core of Commerce, it's a

00:04:23,430 --> 00:04:24,710
stand-alone project.

00:04:24,710 --> 00:04:28,930
There is no PayPal or Authorized.net module or any other payment module

00:04:28,930 --> 00:04:32,099
because the core framework is really just about defining the

00:04:32,099 --> 00:04:36,380
basic systems and interfaces you need to do business online and then

00:04:36,380 --> 00:04:39,180
all of the modules and that we have for Drupal commerce

00:04:39,180 --> 00:04:40,479
there are several hundred

00:04:40,480 --> 00:04:43,620
offer payment method integration, shipping integration,

00:04:44,200 --> 00:04:47,729
different ways to promote and discount your products

00:04:47,729 --> 00:04:50,369
integrate with third-party services like MailChimp

00:04:50,830 --> 00:04:53,490
or other mailing services are marketing services.

00:04:53,490 --> 00:04:57,300
In some of these, we consider is essential contribs these are the ones that that we

00:04:57,310 --> 00:04:58,099
maintain

00:04:58,099 --> 00:05:01,180
we put them into commerce kickstart, which is a distribution

00:05:01,780 --> 00:05:03,780
and we're making sure they're being maintained, kept up to date,

00:05:04,100 --> 00:05:06,660
certainly addressing any security issues,

00:05:07,500 --> 00:05:11,760
and where possible, working with other community members to keep these up to

00:05:11,770 --> 00:05:13,599
date and keep them on moving forward

00:05:13,599 --> 00:05:17,710
and you know at the end of the day and we believe we're doing something right

00:05:17,710 --> 00:05:18,300
because

00:05:18,340 --> 00:05:22,000
we're up to about 55,000 sites reporting into Drupal.org

00:05:22,010 --> 00:05:26,220
as using Drupal Commerce. Of course, not all those who live sites because

00:05:26,220 --> 00:05:29,380
Drupal.org statistics include development sites as well

00:05:29,380 --> 00:05:33,320
or maybe sites that use parts of the module but don't actually represent live

00:05:33,320 --> 00:05:34,020
stores.

00:05:34,020 --> 00:05:37,080
But, in any event, there are thousands of sites that are using Drupal Commerce to

00:05:37,080 --> 00:05:38,310
power their online business.

00:05:38,310 --> 00:05:42,200
And I'm sure there are many represented in this room here, including myself. I use it

00:05:42,200 --> 00:05:44,470
to sell cheese on the Internet.

00:05:44,470 --> 00:05:47,390
so there's plenty of use cases out there.

00:05:47,390 --> 00:05:49,540
But as I said, Commerce Kickstart

00:05:49,550 --> 00:05:53,200
is actually a distribution of Drupal that was built to round out

00:05:53,200 --> 00:05:57,349
the user experience for Drupal Commerce because out of the box it's

00:05:57,349 --> 00:05:58,280
really bare-bones.  

00:05:58,280 --> 00:06:00,740
It's just a teaser list and that's it.

00:06:00,760 --> 00:06:03,940
There's really nothing look at when you install commerce itself.

00:06:04,600 --> 00:06:08,520
We said first of all we wanted to optimize the store

00:06:08,580 --> 00:06:10,349
administrator user experience.

00:06:10,349 --> 00:06:14,849
Because bare-bones commerce out of the box requires you to do things like

00:06:15,450 --> 00:06:19,870
manager product skews in one place and then your product displays in another

00:06:20,180 --> 00:06:24,620
and link them together via a reference field within kick-start we have

00:06:24,630 --> 00:06:25,330
the in line

00:06:25,330 --> 00:06:30,250
entity form module that can actually let you edit both entities on one form 

00:06:31,020 --> 00:06:32,960
A few other things like using

00:06:33,110 --> 00:06:36,590
a new module we wrote called the Views Mega Role model,

00:06:36,590 --> 00:06:38,480
which lets you look at a view. This one is 

00:06:38,490 --> 00:06:42,020
orders and you can actually expand

00:06:42,020 --> 00:06:46,580
any row to include a summary of the order and update the order status.

00:06:46,949 --> 00:06:50,580
you know just things like that make the the admin UX just a little better.

00:06:50,580 --> 00:06:54,660
In all of these modules that we use the inline entity form

00:06:54,660 --> 00:06:58,190
entity referencing views bulk operations for commerce

00:06:58,190 --> 00:07:01,250
the views Mega Role those are all stand alone

00:07:01,250 --> 00:07:04,910
projects that you can use outside of Commerce and so if you have an existing

00:07:04,910 --> 00:07:08,160
Drupal Commerce site and want to optimize the administrator

00:07:08,160 --> 00:07:12,110
user experience you could look at commerce kickstart find the modules

00:07:12,110 --> 00:07:15,930
put them into your project in and you not have to worry about using the full

00:07:15,930 --> 00:07:16,849
distribution.

00:07:16,849 --> 00:07:22,180
On the front end, we also created a fully responsive theme including "Add To

00:07:22,180 --> 00:07:24,080
Cart" forms and "Check Out" and everything

00:07:24,080 --> 00:07:28,680
and optimize product pages with a few best practices, big pretty images

00:07:28,680 --> 00:07:32,180
and a fully functioning

00:07:32,180 --> 00:07:35,720
faceted Product Search that was built using

00:07:35,720 --> 00:07:38,830
the Search API, Facet API, Views

00:07:39,800 --> 00:07:42,780
and can connect it to solar on the back end if you want to

00:07:42,789 --> 00:07:46,909
and for this video, just some neat things like

00:07:46,909 --> 00:07:50,840
added support for price field facets so you could have

00:07:50,840 --> 00:07:54,190
a range of prices that you're searching for that kinda thing.

00:07:54,190 --> 00:07:58,500
It also demonstrates how to create a search index

00:07:58,659 --> 00:08:04,210
for using Search API that combines both product data and node data,

00:08:04,210 --> 00:08:07,289
if you're using a node to display product information

00:08:07,289 --> 00:08:11,400
that's essential. So you can look into here to see how we constructed that index,

00:08:11,569 --> 00:08:13,500
if you're curious.

00:08:13,880 --> 00:08:18,600
Then finally we also built into the back end what we call the marketplace 

00:08:18,600 --> 00:08:23,680
which is just an easy way to find all of those models that I've mentioned that either integrate with

00:08:23,690 --> 00:08:27,300
third party services who have partnered with us to make sure that the

00:08:27,300 --> 00:08:29,659
integrations are robust and supported

00:08:29,660 --> 00:08:34,260
and then we also link to a variety of community contributed modules

00:08:34,270 --> 00:08:37,310
that would also improve the store UX.

00:08:37,310 --> 00:08:40,650
Once again, we like to see the graph going up.

00:08:40,650 --> 00:08:42,850
There are about thirteen thousand or so

00:08:42,860 --> 00:08:46,699
sites reporting usage of commerce kickstart and that's

00:08:46,699 --> 00:08:50,290
probably more weighted toward demonstration sites and test sites

00:08:50,290 --> 00:08:54,139
then commerce itself. But there are a fair number of

00:08:54,139 --> 00:08:57,250
examples even in our showcase on DrupalCommerce.org

00:08:57,250 --> 00:09:01,089
where people successfully took the distribution but a different theme on it

00:09:01,089 --> 00:09:03,220
and then were able two launch a store very quickly.

00:09:03,220 --> 00:09:07,470
We have positive indicators that what we're

00:09:07,470 --> 00:09:08,759
doing its is useful,

00:09:08,759 --> 00:09:11,990
we're headed in the right direction and this talk is all about the things

00:09:11,990 --> 00:09:13,410
that we believe we can do better

00:09:13,410 --> 00:09:14,910
on Drupal 8.

00:09:15,160 --> 00:09:17,160
Are there any questions

00:09:17,160 --> 00:09:21,199
(I can pause here) about Drupal Commerce itself or Commerce Kickstart

00:09:21,199 --> 00:09:22,279
the distribution,

00:09:22,279 --> 00:09:25,779
or should I just jump right in?

00:09:27,180 --> 00:09:29,700
I would be happy to answer more afterwards.

00:09:29,720 --> 00:09:34,960
If you have any other questions you can always go to DrupalCommerce.org

00:09:34,960 --> 00:09:37,280
and read the documentation that Josh has produced

00:09:37,290 --> 00:09:40,620
or find Questions and Answers there or even

00:09:40,620 --> 00:09:45,649
there's a a pretty vibrant group of folks in the Drupal Stack Exchange.

00:09:45,649 --> 00:09:49,509
If you go to Drupal.StackExchange.com that answers a lot of Drupal

00:09:49,509 --> 00:09:51,459
Commerce related questions, myself included

00:09:51,459 --> 00:09:54,790
so Drupal Commerce 2.X

00:09:54,790 --> 00:09:58,439
is going to be on Drupal 8 and one of the first 

00:09:58,439 --> 00:10:01,189
questions that comes up when we start talking about D8 is

00:10:01,189 --> 00:10:05,470
"When will Drupal Commerce be ready?" and its impossible to say. It is 

00:10:05,470 --> 00:10:08,519
dependent on Drupal 8 being ready.

00:10:08,519 --> 00:10:11,750
The good news is that we'll have fewer dependencies we have to wait for

00:10:11,750 --> 00:10:15,300
before we can consider Drupal Commerce ready for use.

00:10:15,300 --> 00:10:19,100
I'm not sure who was following along progress during the Drupal 7 development

00:10:19,100 --> 00:10:19,699
cycle

00:10:19,699 --> 00:10:23,790
but we actually were writing Drupal Commerce at the same time that Views

00:10:23,790 --> 00:10:26,850
was unstable and Rules was in alpha

00:10:26,850 --> 00:10:30,149
and the Entity API was changing on a weekly basis and so we're

00:10:30,149 --> 00:10:33,240
always having to rush to keep up with the changes.

00:10:33,240 --> 00:10:36,670
That's not the case in Drupal 8 because Views is in Core,

00:10:36,670 --> 00:10:40,610
and we are not going to have a hard dependency on rules anymore.

00:10:40,610 --> 00:10:45,300
It will enhance your ability to customize the store but

00:10:45,300 --> 00:10:48,930
we've decided that time we won't hold up the release of Drupal Commerce

00:10:48,930 --> 00:10:49,629
for

00:10:49,629 --> 00:10:53,819
a release of Rules. The Entity API is much more robust

00:10:53,819 --> 00:10:55,990
in Drupal 8 then it was in Drupal 7.

00:10:55,990 --> 00:10:59,529
A lot better tools means we'll have a Drupal Commerce release a lot sooner

00:10:59,529 --> 00:11:02,650
after the Drupal 8 release

00:11:02,650 --> 00:11:05,380
but I don't have like a date. I tell

00:11:05,380 --> 00:11:08,770
my sales people not to sell

00:11:08,770 --> 00:11:12,130
any Drupal 8 project until at least the second half of this year.

00:11:12,130 --> 00:11:15,480
We probably wouldn't be able to launch anything until early next year that

00:11:15,480 --> 00:11:18,980
depends on a lot of other contributed modules in the Drupal space.

00:11:18,980 --> 00:11:22,590
But to start Drupal Commerce 2.X development

00:11:22,590 --> 00:11:26,520
we actually gathered a crew in our office in Paris

00:11:26,520 --> 00:11:30,460
I'm to host a sprint that was really a based around validating the

00:11:30,460 --> 00:11:31,330
architecture

00:11:31,330 --> 00:11:36,770
of the core commerce framework itself but also our strategy of using stand-alone

00:11:36,770 --> 00:11:38,330
PHP libraries

00:11:38,330 --> 00:11:41,820
and using composer to pull those into Drupal and

00:11:41,820 --> 00:11:45,030
as dependencies for the modules themselves and

00:11:45,030 --> 00:11:48,090
we actually had a variety of contributors from other

00:11:48,090 --> 00:11:50,050
e-commerce projects,

00:11:50,050 --> 00:11:52,660
a few other Drupal guys and also the

00:11:52,670 --> 00:11:54,920
creator of Symfony himself Fabien Potencier

00:11:54,920 --> 00:11:58,230
came by to give us his input and

00:11:58,230 --> 00:12:01,260
the one bit of feedback that I remember verbatim

00:12:01,260 --> 00:12:04,680
was that he said, "I'm glad I'm not developing an e-commerce solution. This

00:12:04,680 --> 00:12:06,030
sounds really hard."

00:12:06,030 --> 00:12:10,170
He was very helpful in just helping us understand

00:12:10,170 --> 00:12:13,780
how to create our libraries in such a way that not only

00:12:13,780 --> 00:12:16,550
are they useful to us but they're also useful to Symfony

00:12:16,550 --> 00:12:19,650
and therefore other Symfony based e-commerce projects

00:12:19,650 --> 00:12:23,110
such as Sonata. He's from the Sonata project

00:12:23,110 --> 00:12:27,460
and we had a few other Symfony based products represented as well

00:12:27,460 --> 00:12:30,880
and have seen uptake in

00:12:30,880 --> 00:12:34,980
collaboration from other PHP based e-commerce developers which has been a

00:12:34,980 --> 00:12:36,050
huge win for us.

00:12:36,050 --> 00:12:39,700
So once again we are starting from scratch

00:12:39,700 --> 00:12:42,830
with a clean repository much like we did on Drupal 7

00:12:42,830 --> 00:12:45,890
and that is because everything is different.

00:12:45,890 --> 00:12:47,180
The difference between

00:12:47,220 --> 00:12:51,040
Drupal 7 code and Drupal 8 code is as stark,

00:12:51,040 --> 00:12:56,240
as big as the difference between Drupal 7 code and Drupal 4.6. It's

00:12:56,240 --> 00:12:57,670
really different

00:12:57,670 --> 00:13:02,050
We're starting from scratch to take the opportunity to

00:13:02,050 --> 00:13:05,120
re architect around the new 

00:13:05,120 --> 00:13:06,730
concepts and

00:13:06,730 --> 00:13:10,860
programming models and whatnot that you have been Drupal 8

00:13:10,860 --> 00:13:13,920
simply because we're using object-oriented programming now with

00:13:13,920 --> 00:13:18,290
name spaces and dependencies and Smyfony components and a variety of other things

00:13:18,290 --> 00:13:20,910
that we wanted to make sure we're making the best use of them

00:13:20,910 --> 00:13:25,389
instead of carrying forward our old hooks and our old data structures

00:13:25,389 --> 00:13:29,529
We started by reviewing the Entity

00:13:29,529 --> 00:13:33,600
model so our Entity diagram for commerce 1.X looks like this.

00:13:33,600 --> 00:13:37,380
We have 5 Entity types we define in Commerce. The order, the

00:13:37,380 --> 00:13:38,660
product, the line-item,

00:13:38,660 --> 00:13:42,800
the payment transaction and the customer profile. We define a few different field

00:13:42,800 --> 00:13:46,389
types like the product reference field, the customer profile reference field,

00:13:46,389 --> 00:13:51,070
and the price field and that's it. That's all the core of Commerce 1.X

00:13:51,070 --> 00:13:52,459
defines at the box.

00:13:52,459 --> 00:13:56,180
We also decided that entities are 

00:13:56,180 --> 00:13:59,510
easier and cheaper to define now thanks to the

00:13:59,510 --> 00:14:03,209
patterns we can follow in Drupal 8 and so we decided to

00:14:03,209 --> 00:14:05,529
add a few more into the types to the mix.

00:14:05,529 --> 00:14:08,670
This is a little bit out-of-date but the gist is

00:14:08,670 --> 00:14:12,269
we won't be including variance as a stand-alone

00:14:12,269 --> 00:14:16,089
Entity type and will actually have one or two other payment related entity

00:14:16,089 --> 00:14:17,069
types in Core.

00:14:17,069 --> 00:14:20,870
The big idea is that you have a store entity through which

00:14:20,870 --> 00:14:24,389
everything is managed so products belong to you a store

00:14:24,389 --> 00:14:27,360
and this would hold your global configuration for the site like store

00:14:27,360 --> 00:14:28,260
logos,

00:14:28,260 --> 00:14:31,420
email addresses, contact information and that sort of stuff.

00:14:31,420 --> 00:14:35,709
So my products would be related to that. Orders would also be related to

00:14:35,709 --> 00:14:38,380
stores. You can end up with the multi-store scenario where

00:14:38,380 --> 00:14:42,230
access control is governed by what store product an order belonged to.

00:14:42,230 --> 00:14:46,120
We'll be using a payment transactions but then separately payment

00:14:46,120 --> 00:14:47,130
allocations that

00:14:47,130 --> 00:14:51,319
sorta divvy up you may be one large transaction to the invoices

00:14:51,319 --> 00:14:56,149
that actually covers. We also have an entity type already in commerce

00:14:56,149 --> 00:15:00,089
that we're using to represent your card on file data.

00:15:00,089 --> 00:15:04,699
So the payment tokens that you use to process recurring transactions are card

00:15:04,699 --> 00:15:05,670
on file payments

00:15:05,670 --> 00:15:10,180
and a few other things going on.

00:15:10,180 --> 00:15:14,279
Other basic ones remain product orders, customer profiles, payment

00:15:14,279 --> 00:15:15,779
transactions, and line items.

00:15:15,779 --> 00:15:19,070
But we're gonna change the way that some of those work together.

00:15:19,070 --> 00:15:23,060
Also thanks to the fact that Drupal 8 now has the entity reference

00:15:23,060 --> 00:15:24,060
field in core

00:15:24,060 --> 00:15:28,690
which was developed for Drupal Commerce on D7, we no longer have our custom

00:15:28,690 --> 00:15:30,709
reference fields to relate these together just

00:15:30,709 --> 00:15:34,570
entity reference fields. No more customer profile reference field or line-item

00:15:34,570 --> 00:15:39,310
reference field or anything like that. So the first big

00:15:39,310 --> 00:15:42,570
entity change that we brought is to really

00:15:42,570 --> 00:15:47,589
implement a hierarchical product model that does not depend on nodes for

00:15:47,589 --> 00:15:48,959
displaying products.

00:15:48,959 --> 00:15:53,380
I'm not sure how familiar everyone is with products on Drupal 7

00:15:53,380 --> 00:15:57,310
in commerce, but whenever you define a product entity it doesn't have

00:15:57,310 --> 00:16:01,540
a front-end URL by default. You have to create that by

00:16:01,540 --> 00:16:06,560
creating a node and in associating that node to a skew or a set of skews

00:16:06,560 --> 00:16:11,019
using a product reference or entity reference field. Then we look at the

00:16:11,019 --> 00:16:15,519
the products that you referenced and we will create the hierarchy on the fly

00:16:15,529 --> 00:16:19,600
as part of the Add to Cart forms logic. So if you have a product with

00:16:19,600 --> 00:16:21,470
attributes like sizes of a shirt.

00:16:21,470 --> 00:16:25,410
You would reference the individual skews and in the Add to Cart form knows that

00:16:25,410 --> 00:16:27,990
you should render this group of products on the Add to Cart form

00:16:27,990 --> 00:16:32,100
with a select list for choosing a size. It's pretty simple

00:16:32,100 --> 00:16:35,649
but it makes you have to manage a

00:16:35,649 --> 00:16:36,519
lot more data

00:16:36,519 --> 00:16:40,019
at the point display. So it would be nice, for example, if I could

00:16:40,019 --> 00:16:43,440
just reference the parent product and have it include

00:16:43,440 --> 00:16:47,870
every product in the group. That's one thing that we probably

00:16:47,870 --> 00:16:49,760
could implement in Commerce 1 but

00:16:49,760 --> 00:16:54,010
nobody has done it yet. It also would be nice if we didn't need nodes at all.

00:16:54,010 --> 00:16:57,110
So the idea here is that in Drupal 7

00:16:57,110 --> 00:17:00,899
we continue to use nodes as product displays because nodes were still very

00:17:00,899 --> 00:17:04,079
important. You needed if you wanted to have comments.

00:17:04,079 --> 00:17:07,280
A lot of other models were still built around a node based

00:17:10,110 --> 00:17:13,830
node based content model it and we didn't feel comfortable at the time,

00:17:13,830 --> 00:17:15,120
this was 2010,

00:17:15,120 --> 00:17:19,490
just abandoning nodes entirely. But we knew that products still needed to be a

00:17:19,490 --> 00:17:21,120
stand-alone entity type,

00:17:21,120 --> 00:17:24,960
and we still needed to define individual variations of our product as unique skews

00:17:24,960 --> 00:17:26,760
for accounting and fulfillment purposes.

00:17:26,760 --> 00:17:29,810
But now we believe that

00:17:29,810 --> 00:17:33,120
Entity API has advanced such that we don't need nodes anymore

00:17:33,120 --> 00:17:37,640
as an intermediate layer and we will instead support products

00:17:37,640 --> 00:17:38,400
having their own

00:17:38,400 --> 00:17:42,000
URL on the front end, your product slash 1 product slash 2. 

00:17:42,000 --> 00:17:45,430
That similar to pathauto you'd be able to create

00:17:45,430 --> 00:17:50,030
URL tokens for those. What we want is to be able to define

00:17:50,030 --> 00:17:54,070
a hierarchy for my product type, and choose at which point in a hierarchy

00:17:54,070 --> 00:17:55,880
should a unique URL be created. 

00:17:55,880 --> 00:17:59,580
I might have a URL that lets me choose the color of 

00:17:59,580 --> 00:18:02,650
my shirt and the size or for the same products

00:18:02,650 --> 00:18:06,100
or product group I could support both

00:18:06,100 --> 00:18:09,350
the combined interface and stand-alone interfaces if I wanted to.

00:18:09,350 --> 00:18:13,230
We haven't actually programmed that all yet but we have designed it, have the user

00:18:13,230 --> 00:18:14,480
interface marked up

00:18:14,480 --> 00:18:18,360
and this is where we're headed. The big win here is for

00:18:18,360 --> 00:18:22,310
the bulk creation and management of group of skews

00:18:22,310 --> 00:18:25,330
because right now you have to manually enter in

00:18:25,330 --> 00:18:29,390
all of the different variations and reference them. What we would prefer

00:18:29,390 --> 00:18:30,100
to do

00:18:30,100 --> 00:18:33,150
is to define the hierarchy in create a new group and have a

00:18:33,150 --> 00:18:36,820
automatically create all of the different skews beneath it and

00:18:36,820 --> 00:18:37,290
manage ...

00:18:37,290 --> 00:18:41,610
oh there goes my ... and just long enough that it went to sleep ...

00:18:41,610 --> 00:18:46,409
sorry ...

00:18:46,409 --> 00:18:50,110
and public and take a second come back now ... naturally

00:18:52,320 --> 00:18:55,440
Are there any questions about products while this is coming back up?

00:18:56,580 --> 00:18:58,060
Yeah?

00:18:59,700 --> 00:19:01,700
I'll repeat the questions.

00:19:31,010 --> 00:19:33,760
The question was, "How might we make

00:19:33,760 --> 00:19:38,500
Commerce 2.X on Drupal 8 more friendly out of the box

00:19:38,500 --> 00:19:42,030
since we aren't dependent on this note base configuration?"

00:19:42,030 --> 00:19:45,210
Immediately, just by the fact that

00:19:45,210 --> 00:19:49,270
every product will have a URL by default as far as a merchant is concerned

00:19:49,270 --> 00:19:53,180
they're adding a product page and once they do that it has a URL

00:19:53,180 --> 00:19:57,840
they don't have to manage references or any other

00:19:57,850 --> 00:20:01,700
content type configuration or anything.

00:20:01,700 --> 00:20:04,970
I'm not sure that will have like a a catalog out of the box

00:20:04,970 --> 00:20:08,860
although since Views is in Core we could have a disabled

00:20:08,860 --> 00:20:12,080
view that could be enabled or something like that.

00:20:12,080 --> 00:20:16,080
I'm not sure just how rich the out-of-the-box experience would be.

00:20:16,080 --> 00:20:20,020
I'm certainly open to feedback on anything you think might

00:20:20,020 --> 00:20:23,780
enrich the product catalog management experience

00:20:23,780 --> 00:20:27,150
and be broadly applicable to a majority of users.

00:20:27,150 --> 00:20:30,540
It's kind of hard to know because

00:20:30,540 --> 00:20:34,300
a lot of different vertical markets have very different needs out of their product

00:20:34,300 --> 00:20:35,660
model 

00:20:35,660 --> 00:20:38,180
If anything, it would make the most sense

00:20:38,190 --> 00:20:41,560
to optimize for a physical base product catalog

00:20:41,560 --> 00:20:44,210
and I wouldn't have a problem even having multiple different

00:20:44,210 --> 00:20:45,580
types of catalog views

00:20:45,580 --> 00:20:48,750
but maybe I would be best as even a standalone module

00:20:48,750 --> 00:20:52,320
because you could change it faster.

00:20:52,320 --> 00:20:56,580
But that's it so far. Any other questions that

00:20:56,580 --> 00:21:03,580
would be related to products?

00:21:07,450 --> 00:21:12,920
Please repeat

00:21:12,920 --> 00:21:16,500
The question is about that data mining and business intelligence

00:21:16,500 --> 00:21:19,570
and plug-ins. To be honest, we

00:21:19,570 --> 00:21:21,930
certainly aren't thinking there yet it's as we're just building up the core

00:21:21,930 --> 00:21:26,030
framework. The Drupal Commerce on

00:21:26,030 --> 00:21:30,040
Drupal 7 has the Jirafe module now available which provides

00:21:30,040 --> 00:21:34,290
good intelligence about usage of the Website so it has your

00:21:34,290 --> 00:21:38,650
conversion funnels, your conversion rate optimization and a nice dashboard.

00:21:38,650 --> 00:21:41,950
It shows what products convert more and all that kind of stuff.

00:21:41,950 --> 00:21:46,830
I would look into that. It's Jirafe with a J so J-I-R-A-F-E

00:21:46,830 --> 00:21:51,590
and that might be a good place to start.

00:21:51,590 --> 00:21:54,840
Another thing that we want to do, beyond just making it easier to

00:21:54,840 --> 00:21:58,710
build out your product catalog and manage your product database, is actually

00:21:58,710 --> 00:21:59,150
have

00:21:59,150 --> 00:22:04,450
more opinions about check out user experience. Commerce 1.X basically

00:22:04,520 --> 00:22:09,500
we didn't do much to support check out best practices

00:22:09,500 --> 00:22:14,280
beyond allowing you to choose between anonymous or authenticated only checkout

00:22:14,280 --> 00:22:17,380
so there's no reason for us not to have that.

00:22:17,380 --> 00:22:21,000
At least it would be a block so it could be moved around or disabled.

00:22:21,760 --> 00:22:26,380
To bring more conversion oriented tools like this to

00:22:26,380 --> 00:22:27,810
the core framework be useful

00:22:27,810 --> 00:22:31,710
but also and we want to be able to actually support

00:22:31,710 --> 00:22:35,600
multivariate testing or split a/b testing on the checkout form,

00:22:35,600 --> 00:22:40,220
or even just multiple check out paths based on the product that's being purchased.

00:22:40,220 --> 00:22:44,070
Just to explain a little further,

00:22:44,070 --> 00:22:48,090
in Drupal Commerce right now you have one checkout form configuration

00:22:48,090 --> 00:22:52,150
and you can alter it using an alter hook but it's really kind of flakey. It's

00:22:52,150 --> 00:22:53,730
not the best system for

00:22:53,730 --> 00:22:57,330
creating a different at checkout experience

00:22:57,330 --> 00:23:01,150
whether because you want to do A B testing or because you have a

00:23:01,150 --> 00:23:02,870
different check out workflow for

00:23:03,929 --> 00:23:06,759
your b2b customers verses b2c.

00:23:06,759 --> 00:23:09,839
Whatever it is that we just want to support that.

00:23:09,840 --> 00:23:11,120
The way that we'll do that

00:23:11,129 --> 00:23:14,240
is ideally by using Drupal's form modes

00:23:14,240 --> 00:23:18,669
I'm not sure how familiar we are with Drupal 8, but in Drupal 7 you have

00:23:18,669 --> 00:23:19,480
the concept of

00:23:19,480 --> 00:23:23,720
view modes where any node for example could be displayed as a teaser

00:23:23,720 --> 00:23:28,540
or as a full-page or as its search results or an RSS entry

00:23:28,540 --> 00:23:34,640
Drupal 8 extends this concept of different ways to display the rendered content

00:23:34,649 --> 00:23:38,159
to supporting different ways to display the edit form.

00:23:38,159 --> 00:23:42,960
Since the checkout form is really just an order edit form that may or may not

00:23:42,960 --> 00:23:46,680
you have multiple steps, we believe that we can use

00:23:46,700 --> 00:23:50,809
form modes to define both the backend order editing

00:23:50,809 --> 00:23:54,120
interface and the front end check out

00:23:54,120 --> 00:23:57,679
workflows, and have the check out module

00:23:57,679 --> 00:24:01,750
give you some sort of mechanism to choose our indicate which particular

00:24:01,750 --> 00:24:05,210
form mode should be used for this current user. 

00:24:05,210 --> 00:24:08,190
I do believe it's going to be possible but again I haven't actually researched

00:24:08,210 --> 00:24:09,389
it yet and tried to implement it.

00:24:09,389 --> 00:24:13,080
If anybody has worked with form modes I'd love to hear about your experience

00:24:13,080 --> 00:24:16,509
but the idea would be to not have to maintain

00:24:16,509 --> 00:24:20,600
anymore our drag-and-drop checkout form builder but just build that all into the

00:24:20,600 --> 00:24:22,009
form modes interface

00:24:22,009 --> 00:24:25,629
and have one less thing that's unique to commerce and

00:24:25,629 --> 00:24:30,870
just be more natively using Drupal concepts. We're also going to

00:24:30,870 --> 00:24:37,379
be more controlled around how orders can be updated

00:24:37,379 --> 00:24:41,929
from status to status. Right now in commerce and

00:24:41,929 --> 00:24:45,049
Ubercart before it, we basically just implemented

00:24:45,049 --> 00:24:49,259
order status updates as a select list so any administrator can go in

00:24:49,259 --> 00:24:53,120
and change a value in select list in and say, "This order is now cancelled", 

00:24:53,120 --> 00:24:54,389
"This order is now complete".

00:24:54,389 --> 00:24:57,480
but there is no check and balance that

00:24:57,480 --> 00:25:01,299
insures that this order was paid for or that a refund was issued

00:25:01,299 --> 00:25:05,519
So when we're dealing with with an order has a very complex workflow

00:25:05,519 --> 00:25:08,990
that needs to be more defined and controlled

00:25:08,990 --> 00:25:13,029
with state transitions that actually control moving from one status to

00:25:13,029 --> 00:25:13,770
another

00:25:13,770 --> 00:25:18,230
and don't support invalid transitions so you wouldn't be able to move

00:25:18,230 --> 00:25:23,440
from a completed order to a canceled order without first going through our V-Fund step

00:25:23,440 --> 00:25:27,840
that sort of thing. The model or paradigm that I'm following here is ...

00:25:27,840 --> 00:25:30,860
has anybody used JIRA for project management?

00:25:30,860 --> 00:25:35,490
In JIRA every project can have any number of types of

00:25:35,490 --> 00:25:39,160
issues and the issue has an assigned workflow

00:25:39,160 --> 00:25:43,450
and in this work flow you define the steps, you define the state transitions,

00:25:43,450 --> 00:25:46,990
you give them a name. So as a developer I come in and say "start progress"

00:25:46,990 --> 00:25:51,480
and it moves to the "in progress" status. Then I can either stop progress or

00:25:51,480 --> 00:25:57,840
complete it or mark as done. These buttons actually give me a user interface

00:25:59,240 --> 00:26:03,990
text to put on the button that you'd used to initiate a state transition.

00:26:03,990 --> 00:26:08,060
There might be in this transition some intermediate form we

00:26:08,060 --> 00:26:10,130
have to put in additional information or

00:26:10,130 --> 00:26:13,550
explain why you're reopening a closed issue or that kind of stuff.

00:26:13,550 --> 00:26:16,830
This sort of functionality is what we are

00:26:16,830 --> 00:26:21,080
now implementing for orders so that no longer can you just randomly move an

00:26:21,080 --> 00:26:22,440
order from one state to another

00:26:22,440 --> 00:26:26,160
nor would you be able to sort of daisy chained together

00:26:26,160 --> 00:26:29,590
via Rules, a bunch of different order status updates because

00:26:29,590 --> 00:26:33,210
that actually gets you into trouble on Commerce 1.X

00:26:33,210 --> 00:26:37,090
because it's really difficult, through Rules, to manage the

00:26:37,090 --> 00:26:39,110
dependencies have one state automatically

00:26:39,110 --> 00:26:42,250
moving to another, to another, to another.

00:26:42,250 --> 00:26:45,810
This is already

00:26:45,810 --> 00:26:48,980
being worked on in a workflow module. I don't think it's on Drupal.org yet

00:26:48,980 --> 00:26:52,310
I think I might just be in Pedro Cambra's Get Hub

00:26:52,310 --> 00:26:55,860
but we'll be continuing to flush this out ideally as a stand-alone

00:26:55,860 --> 00:26:59,950
entity work flow module. One of which does already exist on Drupal 7 so we're

00:26:59,950 --> 00:27:03,900
pursuing either reusing that or making this part of the road map for that project.

00:27:03,910 --> 00:27:07,170
Then we will implement it specifically for orders and I have a

00:27:07,170 --> 00:27:09,930
hunch that will also implement it for line items because

00:27:09,930 --> 00:27:13,690
oftentimes the order status is derived from

00:27:13,690 --> 00:27:16,840
the line-item statuses. So an order is

00:27:16,840 --> 00:27:20,360
shipped whenever all other line items have been actually shipped.

00:27:20,360 --> 00:27:23,560
In the case of a back ordered product,

00:27:23,560 --> 00:27:26,530
you wouldn't mark the order is complete until all of the

00:27:26,530 --> 00:27:29,600
products have come into the warehouse and shipped out and so on

00:27:29,600 --> 00:27:33,390
I'm really excited about this because

00:27:33,390 --> 00:27:39,670
there are a lot of things that aren't easy with the way order statuses work in Commerce 1.

00:27:39,670 --> 00:27:43,020
I have a blog post about it that I haven't published for like six months

00:27:43,020 --> 00:27:43,980
so shame on me.

00:27:43,980 --> 00:27:47,120
I'll make sure I do that them after this conference.

00:27:47,120 --> 00:27:52,410
Finally, well not finally, we do want to support Discounts In Core.

00:27:52,410 --> 00:27:57,040
this is the current commerce discount user interface which I'm not a huge fan of

00:27:57,040 --> 00:28:01,050
but the concept is good which is

00:28:01,050 --> 00:28:05,540
just throwing a merchant at the rules user interface is a losing strategy

00:28:05,540 --> 00:28:09,910
for happy customers. None of our merchants are

00:28:09,910 --> 00:28:13,710
equipped to navigate the rules UI and not break something

00:28:13,710 --> 00:28:18,360
and manage the discounts that way. The discounts module in Commerce 1.X

00:28:18,360 --> 00:28:22,280
provides a simpler user interface with the ability to still

00:28:22,280 --> 00:28:26,290
use some condition, and it also integrates with the coupon module and a

00:28:26,290 --> 00:28:27,220
few other things.

00:28:27,220 --> 00:28:31,320
We're pursuing better opportunities to support Discounts In Core.

00:28:31,330 --> 00:28:38,540
And finally, because of the addition of the store entity to the core of Commerce 2.X

00:28:38,540 --> 00:28:41,880
we'll support both multi-store and multi-vendor scenarios out of the box.

00:28:42,770 --> 00:28:46,720
Right now there's the Commerce marketplace module that facilitate some of

00:28:46,720 --> 00:28:50,280
this. For example, in Commerce 1

00:28:50,280 --> 00:28:55,510
you cannot easily use different payment credentials

00:28:55,510 --> 00:28:59,680
if you had a multi-vendor website where I was supplying my PayPal credentials

00:28:59,680 --> 00:29:03,890
and wanted customers buying from me to summit into my PayPal account

00:29:03,890 --> 00:29:07,490
that's actually a little bit difficult in Commerce 1 and does require

00:29:07,490 --> 00:29:09,470
the Commerce marketplace module

00:29:09,470 --> 00:29:13,070
to provide both a user interface where merchants can

00:29:13,070 --> 00:29:17,740
enter their their credentials but also hack around some limitations

00:29:17,740 --> 00:29:19,230
in the payment method API to

00:29:19,230 --> 00:29:22,290
make that work. Another big thing though is,

00:29:22,290 --> 00:29:25,400
and we're not sure how far we're going to go down this rabbit hole,

00:29:25,400 --> 00:29:28,570
is that to a multi-store or a multi-seller website

00:29:28,570 --> 00:29:33,230
needs to decide what it should do when customers try to order products

00:29:33,230 --> 00:29:36,670
from multiple vendors. Should it be two separate shopping carts,

00:29:36,670 --> 00:29:39,970
should it just all be one, who actually gets paid, who's

00:29:39,970 --> 00:29:44,470
responsible for fulfillment? We have an answer all those questions to decide

00:29:44,470 --> 00:29:47,860
just how much will support in Core and how much will depend on contributed

00:29:47,860 --> 00:29:48,640
modules for.

00:29:48,640 --> 00:29:51,840
But again, if that's a discussion that's relevant to you

00:29:51,840 --> 00:29:55,840
Bojan would be more than happy to discuss that. I'm happy to discuss that.

00:29:55,850 --> 00:29:59,340
At the very least, we'll have the datatypes

00:29:59,340 --> 00:30:02,920
in the core of Commerce that we need to support any scenario.

00:30:02,920 --> 00:30:06,100
But when it comes to systems and interfaces we're not quite decided.

00:30:06,100 --> 00:30:09,980
As far as actual progress goes ...

00:30:09,980 --> 00:30:13,460
I'm not sure if I should try this live or not ...

00:30:17,360 --> 00:30:20,300
Looking at Drupal 8 right now

00:30:20,310 --> 00:30:23,980
I do have a commerce menu item where I can come and access my store

00:30:23,980 --> 00:30:28,340
but because the resolution is so low, its using the sidebars so it's not gonna look great up here

00:30:28,340 --> 00:30:32,350
You can create orders, you can create products, they have no

00:30:32,350 --> 00:30:35,290
fields and no information on them that's useful but

00:30:35,290 --> 00:30:38,740
the entities are there the pattern it's been set so that we can continue to

00:30:38,740 --> 00:30:40,280
define all of our entity types.

00:30:40,280 --> 00:30:44,130
Then you can also do some configuration like

00:30:44,130 --> 00:30:48,080
manage your currencies and import currency settings

00:30:48,080 --> 00:30:52,520
import tax settings, number formats and the like

00:30:52,520 --> 00:30:55,830
and also set your store information which is where you manager store

00:30:55,830 --> 00:30:57,310
entities in their fields.

00:30:57,310 --> 00:31:00,600
This is the current status of things.

00:31:00,600 --> 00:31:04,330
There's no front end work yet as far as add to cart form or checkout form goes

00:31:04,330 --> 00:31:08,400
and that's kind of on me. So I'll be looking to do that in the next few months

00:31:08,400 --> 00:31:12,650
and hopefully have a great demo for DrupalCon LA. Are there any

00:31:12,650 --> 00:31:16,390
feature related questions as it pertains to the

00:31:16,390 --> 00:31:23,390
the development of Commerce on Drupal 8 right now? 

00:31:23,390 --> 00:31:24,950
Ok let's talk about

00:31:24,950 --> 00:31:29,270
what may be actually the most exciting part of Drupal Commerce on Drupal 8.

00:31:29,760 --> 00:31:36,820
Whenever we got wind that Drupal 8 was adopting Smyfony

00:31:36,820 --> 00:31:41,580
and that there'd be Composer as a core concept now for managing a Drupal site,

00:31:41,580 --> 00:31:46,740
that got our gears going where we realize we have the opportunity now to

00:31:46,750 --> 00:31:51,210
move functionality from our modules out into stand-alone libraries

00:31:51,210 --> 00:31:52,130
where

00:31:52,130 --> 00:31:55,160
we can still depend on them in our modules will be can also

00:31:55,160 --> 00:31:58,700
invite other projects to collaborate around them and influence the

00:31:58,700 --> 00:32:00,400
development of other projects

00:32:00,400 --> 00:32:03,870
and basically collaborate around the essential things for doing business

00:32:03,870 --> 00:32:04,800
online

00:32:04,800 --> 00:32:09,760
that that aren't specific to Drupal and certainly don't need to be specific to our solution.

00:32:09,770 --> 00:32:15,780
We started out by researching the deficiencies in our own software,

00:32:15,780 --> 00:32:20,480
we looked into pre-existing price management and currency management

00:32:20,480 --> 00:32:21,400
libraries,

00:32:21,400 --> 00:32:25,320
pre-existing e-commerce bundles for Symfony even some non Symfony

00:32:25,320 --> 00:32:29,890
and even on PHP based applications to see who is solving things like

00:32:29,890 --> 00:32:33,040
locale specific currency formatting, locale management,

00:32:33,040 --> 00:32:37,720
address formatting and validation, price management in currency management,

00:32:37,720 --> 00:32:41,030
all that stuff. Bojan Zivanovich,

00:32:41,030 --> 00:32:44,030
I mentioned previously, is our Commerce 2.X

00:32:44,030 --> 00:32:47,710
maintainer, my co-maintainer in Drupal Commerce now in general,

00:32:47,710 --> 00:32:51,640
and he's also an e-commerce machine and he just hammered out this research

00:32:51,640 --> 00:32:55,530
over the course of a couple weeks and basically identified

00:32:55,530 --> 00:32:59,860
some age-old tax management issues as deficiencies that we could address

00:32:59,860 --> 00:33:01,480
in generic solutions,

00:33:01,480 --> 00:33:05,920
a price management API that does actually really have an API

00:33:05,920 --> 00:33:09,420
right now if you're manipulating prices in Drupal Commerce

00:33:09,420 --> 00:33:12,770
you have to really interface or interact with

00:33:12,770 --> 00:33:16,790
the data array of a price field to set your price components in

00:33:16,790 --> 00:33:19,850
we just never really finished the API around that.

00:33:19,850 --> 00:33:23,060
Also, every new point point release of Drupal Commerce brings with it yet another

00:33:23,060 --> 00:33:24,030
currency

00:33:24,030 --> 00:33:27,410
that we didn't support previously in terms of formatting it

00:33:27,410 --> 00:33:32,730
appropriately for that locale. But even with every currency covered we still wouldn't

00:33:32,730 --> 00:33:36,510
accommodate the fact that each country may render the same

00:33:36,510 --> 00:33:40,340
currency differently. So the Euro looks differently from country to country

00:33:40,340 --> 00:33:43,440
around europe much like the peso is going to be rendered differently from

00:33:43,440 --> 00:33:45,430
forming standpoint from country to country,

00:33:45,430 --> 00:33:49,310
and the dollar between the US and Canada and

00:33:49,310 --> 00:33:54,660
Australia ...we don't have support that right now in our Currency API.

00:33:54,660 --> 00:33:56,520
We also have really

00:33:56,530 --> 00:34:00,740
abused the address field implementation for managing addresses

00:34:00,740 --> 00:34:04,669
and Bojan has actually improved it based on our library work

00:34:04,669 --> 00:34:08,780
but it was difficult again to customize address formats to know in

00:34:08,780 --> 00:34:10,290
advance which countries

00:34:10,290 --> 00:34:13,819
require you to select a state, which ones depend on the postal code,

00:34:13,819 --> 00:34:18,109
where is different fields optional, all that kinda stuff and and also

00:34:18,109 --> 00:34:21,990
we identified as a weakness not something to do with our code but to do with

00:34:21,990 --> 00:34:22,879
our community

00:34:22,879 --> 00:34:26,990
which was we had a a real inability to collaborate with other PHP app

00:34:26,990 --> 00:34:31,409
developers that are doing e-commerce because all of our logic and

00:34:31,409 --> 00:34:34,359
all of our knowledge that we've amassed over the

00:34:34,359 --> 00:34:36,470
last six or seven years of doing e-commerce

00:34:36,470 --> 00:34:41,179
was locked away in our Drupal modules, so not useful to any other project.

00:34:41,179 --> 00:34:44,179
We want to fix those things. We proposed

00:34:44,179 --> 00:34:47,679
stand-alone solutions for internationalization which is managing

00:34:47,679 --> 00:34:48,500
locales

00:34:48,500 --> 00:34:51,849
and then also managing number formatting for each locale

00:34:51,849 --> 00:34:55,819
and then additionally, extending that to currency formatting its locale specific.

00:34:55,819 --> 00:34:59,309
We also proposed to you solved once and for all

00:34:59,309 --> 00:35:02,589
address form generation, validation and

00:35:02,589 --> 00:35:06,339
locale specific formatting for every country in the world.

00:35:06,339 --> 00:35:09,430
Lofty goal. We

00:35:09,430 --> 00:35:13,270
also proposed to support territory grouping for the sake of simplifying

00:35:13,270 --> 00:35:15,930
taxing, shipping, payment selection, all that stuff.

00:35:15,930 --> 00:35:19,299
Also, as far as we can,

00:35:19,299 --> 00:35:23,099
encapsulate tax rate management and price calculation and manipulation

00:35:23,099 --> 00:35:24,280
and stand-alone libraries.

00:35:24,280 --> 00:35:28,250
I'm not sure how relevant European style

00:35:28,250 --> 00:35:31,270
VAT management is to Latin American stores but

00:35:31,270 --> 00:35:34,490
I'm definitely happy to talk about that afterwards.

00:35:34,490 --> 00:35:39,059
We knew that we didn't want to just create, based on Bojan's research,

00:35:39,059 --> 00:35:42,430
again, presenting on behalf of him, we did know that we weren't going to

00:35:42,430 --> 00:35:43,210
just produce

00:35:43,210 --> 00:35:47,010
a set of interfaces that other applications had to develop in

00:35:47,010 --> 00:35:50,740
provide all of the logic and data for. We also wanted to bundle in

00:35:50,740 --> 00:35:54,750
unprecedented data, like all of the address formatting rules for every

00:35:54,750 --> 00:35:55,799
country in the world. That's

00:35:55,799 --> 00:36:00,039
unprecedented for any e-commerce library anywhere as far as we know.

00:36:00,040 --> 00:36:03,630
We also decided we wanted minimal dependencies so we weren't going to

00:36:03,630 --> 00:36:04,190
create these

00:36:04,190 --> 00:36:07,770
as Symfony bundles and make them dependent on other things,

00:36:07,770 --> 00:36:11,349
certainly weren't going to make them dependent on Drupal or its APIs.

00:36:11,349 --> 00:36:15,880
We certainly are striving for simple API's with clear documentation

00:36:15,880 --> 00:36:18,170
and examples for everything

00:36:18,170 --> 00:36:21,140
and full test coverage so that's a very high goal.

00:36:21,140 --> 00:36:25,200
This is interesting, in doing the address library

00:36:25,200 --> 00:36:30,440
our test coverage is has turned up actual bugs in the data source that

00:36:30,440 --> 00:36:31,040
we were using

00:36:31,040 --> 00:36:34,090
and we have been improving our data source there now

00:36:34,090 --> 00:36:37,620
consuming for all of our address rules. It's been fun to see

00:36:37,620 --> 00:36:38,400
how that's worked out.

00:36:38,400 --> 00:36:41,970
Finally, we wanted these to be usable by any PHP based

00:36:41,970 --> 00:36:46,610
e-commerce application. So we started with Commerce Guys Intl

00:36:46,610 --> 00:36:49,730
and this was a PHP 5.4 

00:36:49,730 --> 00:36:54,860
internationalization library powered by data from CLDR which manages

00:36:54,860 --> 00:36:58,290
number formatting rules for every country in locale in the world.

00:36:58,290 --> 00:37:01,820
We built a library

00:37:01,820 --> 00:37:05,500
and we set it up to manage countries, currencies, languages, et cetera.

00:37:05,500 --> 00:37:08,810
and also have number formatting rules and currency formatting rules for

00:37:08,810 --> 00:37:09,320
everywhere.

00:37:09,320 --> 00:37:12,980
It was so good that Symfony is actually

00:37:12,980 --> 00:37:16,110
adopting are internationalization

00:37:16,110 --> 00:37:20,680
library into the core Symfony itself in future versions and even now in

00:37:20,680 --> 00:37:22,350
the current long-term support version.

00:37:22,350 --> 00:37:25,610
They've been accepting patches from Bojan which is a huge win.

00:37:25,610 --> 00:37:29,230
so what we're not just feeding off of Symfony we're also feeding back into

00:37:29,230 --> 00:37:33,500
Symfony so really creating a very healthy partnership. So

00:37:33,500 --> 00:37:36,540
the CLDR project

00:37:36,540 --> 00:37:41,190
lets us know exactly how to render the dollar, the euro, the peso, any

00:37:41,190 --> 00:37:42,460
currency that can have

00:37:42,460 --> 00:37:45,870
different formatting for different regions the proper way for

00:37:45,870 --> 00:37:47,040
every country in the world.

00:37:47,040 --> 00:37:50,570
That's already done and we've already used it to improve

00:37:50,570 --> 00:37:53,660
the currency definitions in Commerce 1.X.

00:37:53,660 --> 00:37:57,730
Then we have the pricing library which provides a price

00:37:57,730 --> 00:38:02,080
object where we are managing the storage, the formatting display, et cetra, of

00:38:02,080 --> 00:38:06,640
a price which in commerce is defined as a numeric amount with the currency

00:38:06,640 --> 00:38:07,100
code.

00:38:07,100 --> 00:38:10,720
Right now we just support rending that in one format for

00:38:10,720 --> 00:38:14,480
each currency. Here it will be locale specific currency formatting

00:38:14,480 --> 00:38:18,360
with additional class methods for managing 

00:38:18,360 --> 00:38:22,740
manipulating the price in tracking changes to our price object over time.

00:38:22,740 --> 00:38:26,310
So exactly what in Commerce 1.X we use components for.

00:38:26,310 --> 00:38:30,230
There's a bit of a holy grail goal here

00:38:30,230 --> 00:38:34,700
which is to also be able to properly apply discounts relative the

00:38:34,700 --> 00:38:36,059
taxes and that sort of thing

00:38:36,059 --> 00:38:39,690
but that that maybe stretching a bit far for generic library.

00:38:39,690 --> 00:38:43,130
Then the one I thought was most exciting was the addressing library.

00:38:43,710 --> 00:38:47,359
We found a data set from the Android SDK

00:38:47,359 --> 00:38:51,349
that Google let us reformat and re-license.

00:38:51,349 --> 00:38:55,410
I can't remember the license BSD or something. They let us reformat it from

00:38:55,410 --> 00:39:00,319
their giant flat file into Json files, put it out on an MIT license and now use

00:39:00,319 --> 00:39:01,220
that to do

00:39:01,220 --> 00:39:04,579
form generation and validation through Symfony's

00:39:04,579 --> 00:39:07,789
form generators and validators.

00:39:07,789 --> 00:39:10,920
Also do locale specific

00:39:10,920 --> 00:39:13,970
ordering of the elements on the address form

00:39:13,970 --> 00:39:16,839
and then rendering when you actually printed out for display on the screen

00:39:16,839 --> 00:39:18,270
versus print it out for

00:39:18,270 --> 00:39:22,700
I'm usage on a label so all that stuff the dataset had that knowledge

00:39:22,700 --> 00:39:26,589
and we've now convert that into Json files that were consuming by this

00:39:26,589 --> 00:39:27,319
library

00:39:27,319 --> 00:39:31,289
to build all address forms for Commerce and now we're getting other

00:39:31,289 --> 00:39:34,970
e-commerce projects to use the same library and build into it again

00:39:34,970 --> 00:39:37,980
just the power of the community is going to drive

00:39:37,980 --> 00:39:38,980
its accuracy

00:39:38,980 --> 00:39:43,589
and its features that over time. Being able to get

00:39:43,589 --> 00:39:46,700
that was a huge win. Bojan written about it on the Drupal Commerce blog.

00:39:46,700 --> 00:39:50,329
This solves so many problems for so many people

00:39:50,329 --> 00:39:54,799
that we really can't wait to start using it now and we've already begun to

00:39:54,799 --> 00:39:58,319
use this data set to improve oliver address formatting rules

00:39:58,319 --> 00:40:01,640
for address field on Drupal Commerce 1.X.

00:40:01,640 --> 00:40:05,619
This is just one example

00:40:05,619 --> 00:40:08,849
where and the

00:40:08,849 --> 00:40:12,089
address form that's generated. One is dependent on the country

00:40:12,089 --> 00:40:14,579
because you have different fields that are going to be required for each

00:40:14,579 --> 00:40:15,140
country.

00:40:15,140 --> 00:40:19,200
Some countries have provinces and cities you have to select, 

00:40:19,200 --> 00:40:19,789
some don't.

00:40:19,789 --> 00:40:23,039
I'm in some cases the postal code might be all that you need to submit an

00:40:23,039 --> 00:40:23,900
address form

00:40:23,900 --> 00:40:27,309
that kinda thing. 

00:40:27,309 --> 00:40:30,250
How it's rendered might actually differ based on the language you're using

00:40:30,250 --> 00:40:31,520
to build the form.

00:40:31,520 --> 00:40:35,869
In this case, this is a Chinese address rendered in English so

00:40:35,869 --> 00:40:39,470
they have the address go from specific to broad so

00:40:39,470 --> 00:40:43,500
my name, followed by my company, my street address, district/city/province

00:40:43,500 --> 00:40:47,440
and postal code and that's maybe more traditional Western

00:40:47,440 --> 00:40:50,740
ordering of the address fields. But

00:40:50,740 --> 00:40:54,240
if you're doing the same form in Chinese, it would actually reverse

00:40:54,240 --> 00:40:57,750
and the postal code/province/city and district

00:40:57,750 --> 00:41:01,910
you're selecting them in reverse order. For Japanese addresses you also have

00:41:01,910 --> 00:41:06,080
to select a title.  So not just my first and last name

00:41:06,080 --> 00:41:09,440
but am I mr, mrs, doctor, et cetera so all of these

00:41:09,440 --> 00:41:12,980
different requirements from each country for each locale

00:41:12,980 --> 00:41:16,650
are already working in the address in library in being used by live projects

00:41:16,650 --> 00:41:17,120
right now.

00:41:17,120 --> 00:41:20,700
So super super exciting.

00:41:20,700 --> 00:41:23,780
Huge kudos to Bojan for driving that forward and

00:41:23,780 --> 00:41:27,060
also to Damien Artutial for finding the dataset

00:41:27,060 --> 00:41:31,340
and convincing people to let you license that and we distributed am

00:41:31,340 --> 00:41:35,420
an injury had his own library and this is just handling grouping territories

00:41:35,420 --> 00:41:36,700
together so for example

00:41:36,700 --> 00:41:39,720
you might have one payment method for any country in the EU

00:41:39,720 --> 00:41:43,390
but a different payment method for all international orders or the same might

00:41:43,390 --> 00:41:45,490
apply to Latin American countries were using their

00:41:45,490 --> 00:41:49,800
pay you as a payment method for only specific countries in South America but

00:41:49,800 --> 00:41:50,920
then internationally

00:41:50,920 --> 00:41:55,120
using some other payment methods like PayPal. But it also let's us

00:41:55,120 --> 00:41:56,050
do fun things

00:41:56,050 --> 00:42:01,960
like prepare international tax zones.

00:42:01,960 --> 00:42:05,160
I've heard that taxes in Columbia can be

00:42:05,160 --> 00:42:08,780
difficult to implement and report on after the fact. Its even worse

00:42:08,780 --> 00:42:09,480
elsewhere

00:42:09,480 --> 00:42:12,640
In the US we're a total mess.

00:42:12,640 --> 00:42:16,220
But even in the US where VAT is supposed to be simpler to account for,

00:42:16,220 --> 00:42:20,260
you literally have a German VAT that applies to any German address

00:42:20,260 --> 00:42:25,050
but also five postal codes in Austria. I'm which means you have

00:42:25,050 --> 00:42:27,450
to know that when you're calculating tax for the order

00:42:27,450 --> 00:42:30,910
and you have to know the inverse. So if you're calculating

00:42:30,910 --> 00:42:35,100
Austrian VAT it applies to Austria except those five postal codes.

00:42:35,100 --> 00:42:39,390
The good thing is all of these texts or groupings are predefined and

00:42:39,390 --> 00:42:40,680
don't change that often.

00:42:40,680 --> 00:42:46,010
So, the PHP library, the zone ??? of the tax library

00:42:46,010 --> 00:42:49,820
codifies this knowledge, and we'll crowd source it and get

00:42:49,820 --> 00:42:53,100
these other people that are developing other solutions that are specific to

00:42:53,100 --> 00:42:53,960
different markets

00:42:53,960 --> 00:42:57,070
to contribute to these definitions and help us keep them up-to-date,

00:42:57,070 --> 00:43:03,190
and help us make better use of them in our own software.

00:43:03,190 --> 00:43:07,320
We feel like we're doing something right. When ever we put out the

00:43:07,320 --> 00:43:08,520
addressing library for

00:43:08,520 --> 00:43:11,590
a bright shining moment, we were the top trending developer and on Github 

00:43:11,590 --> 00:43:15,200
because all these libraries are hosted on Github.

00:43:15,200 --> 00:43:18,980
You can go find them, float???? them, contribute to them and we'd be more than

00:43:18,980 --> 00:43:20,270
happy to have you use them

00:43:20,270 --> 00:43:24,440
whether it's in a Drupal project or not. We're already seeing collaboration

00:43:24,440 --> 00:43:25,920
on the tax library from

00:43:25,920 --> 00:43:29,300
and other systems like FoxyCart and,

00:43:29,300 --> 00:43:32,880
there's a new one, Kong, recently that started to adopt the library.

00:43:32,880 --> 00:43:36,610
I'm so we're getting good participation and expect to see that continue to grow.

00:43:36,610 --> 00:43:41,460
Before I move on, are there any questions about the libraries or

00:43:41,460 --> 00:43:48,460
where those stand or what we're up to with those?

00:43:56,110 --> 00:43:59,630
So the question is: Since these are all hosted on Github

00:43:59,630 --> 00:44:01,000
as stand-alone libraries,

00:44:01,000 --> 00:44:05,820
how do we get them into Drupal? Right now the installation process requires

00:44:05,820 --> 00:44:07,230
the composer manager

00:44:07,230 --> 00:44:11,880
module, which is a standalone module for Drupal 8 that basically reads all of

00:44:11,880 --> 00:44:13,490
your contributed modules,

00:44:13,490 --> 00:44:16,720
looking for a composer.json file

00:44:16,720 --> 00:44:23,600
and then updates the composer.json in your Drupal 8 directory to

00:44:23,600 --> 00:44:26,380
include all of the necessary dependencies. It does

00:44:26,390 --> 00:44:29,540
a bit dependency negotiation to make sure there aren't any duplicates

00:44:29,540 --> 00:44:32,820
but then ultimately when you run your composer update, it's putting all of

00:44:32,820 --> 00:44:33,869
those dependencies

00:44:33,869 --> 00:44:41,322
in the one vendor directory that Drupal 8 is using to fetch all of the other

00:44:41,350 --> 00:44:44,280
libraries and components that it's depending on. It's a bit of a

00:44:44,280 --> 00:44:45,450
manual process right now.

00:44:45,450 --> 00:44:48,670
Ideally that will become more automatic because it's a bit of a stretch to

00:44:48,670 --> 00:44:50,600
require everyone running this to also

00:44:50,600 --> 00:44:53,869
install composer and do the updates and that kind of stuff

00:44:53,869 --> 00:44:58,480
but that's where things stand right now. Any other questions about libraries

00:44:58,480 --> 00:44:59,410
before I move on?

00:44:59,410 --> 00:45:04,820
Bojan Zivanovic is leading development on these giving 

00:45:04,820 --> 00:45:09,020
Drupal a great name in other open source communities

00:45:09,020 --> 00:45:12,260
and also finding good partners to collaborate around them so huge

00:45:12,260 --> 00:45:13,119
kudos to him.

00:45:13,119 --> 00:45:16,859
Finally, at CommerceGuys

00:45:16,859 --> 00:45:21,030
we're not just concerned about improving the data model

00:45:21,030 --> 00:45:22,800
behind our models themselves

00:45:22,800 --> 00:45:26,130
but also improving the tooling that we have to build and deliver

00:45:26,130 --> 00:45:27,400
commerce projects.

00:45:27,400 --> 00:45:31,359
We believe that commerce projects are somewhat unique

00:45:31,359 --> 00:45:35,399
in the Drupal realm in the sense that they are exposed to more rapid changes,

00:45:35,410 --> 00:45:38,550
they often times have more rigorous and more involved

00:45:38,550 --> 00:45:43,580
testing processes and you also have to

00:45:43,580 --> 00:45:47,470
very often respond to the midnight whims of your merchants that want

00:45:47,470 --> 00:45:49,859
to see a new type of discount or promotion or whatever

00:45:49,859 --> 00:45:52,910
deployed immediately the next day so they can run a sale or something.

00:45:52,910 --> 00:45:56,460
We ask ourselves the questions a lot:

00:45:56,460 --> 00:46:00,150
How do we actually manage and scale

00:46:00,150 --> 00:46:04,190
complex e-commerce applications especially when the code bases

00:46:04,190 --> 00:46:08,820
stretch across Drupal.org, Github, public repositories, private repositories,

00:46:08,820 --> 00:46:12,370
site-specific ??? How do we actually manage that so that we don't take down

00:46:12,370 --> 00:46:14,420
someone's store right when they're ready to take

00:46:14,420 --> 00:46:19,140
a sale live? Additionally, how can we continue to deliver new features

00:46:19,140 --> 00:46:21,820
without disrupting existing shopping sessions?

00:46:21,820 --> 00:46:25,760
The last thing you want is to you take the site down for maintenance,

00:46:25,760 --> 00:46:28,530
roll out a new update when someone is in the middle of

00:46:28,530 --> 00:46:30,240
putting in their credit card information.

00:46:33,380 --> 00:46:37,440
Merchants are often non-technical almost always non-technical,

00:46:37,460 --> 00:46:41,090
but they still want to be able to do QA and see a live preview

00:46:41,090 --> 00:46:44,970
of the code changes that we're making in an exact replica of

00:46:44,970 --> 00:46:46,180
their live environment

00:46:46,180 --> 00:46:49,790
and oftentimes that includes all of the data, whether it's

00:46:49,790 --> 00:46:53,580
products, users, customer profiles, et cetera, that's just kind of what they

00:46:53,580 --> 00:46:54,370
mean and so

00:46:54,370 --> 00:46:57,690
these sorts of things are not

00:46:57,690 --> 00:47:01,140
specific e-commerce. Any Drupal project is going to have similar requirements,

00:47:01,140 --> 00:47:04,550
but we found it to be especially true for our commerce projects.

00:47:04,550 --> 00:47:07,930
So answering those questions drives a lot of our philosophy and approach to

00:47:07,930 --> 00:47:12,000
platform.SH, which is our Drupal based platform as a service

00:47:12,000 --> 00:47:15,900
that manages your code base via a ???? file.

00:47:15,900 --> 00:47:20,880
You can pull in any project from D.0, from Github, from

00:47:20,880 --> 00:47:22,200
private repositories,

00:47:22,200 --> 00:47:26,510
using project-specific SSH key, you can apply patches and

00:47:26,510 --> 00:47:30,410
manage your code base with a lot more transparency into what is actually

00:47:30,410 --> 00:47:32,090
compiled into the project.

00:47:32,090 --> 00:47:35,310
I can look at my project.make file and see all other

00:47:35,310 --> 00:47:36,650
contributed modules that

00:47:36,650 --> 00:47:39,840
Josh is added since the last time we rolled out

00:47:39,840 --> 00:47:43,600
a new version of a customer website. Then once you do that

00:47:43,600 --> 00:47:47,960
do you commit a change in push it up to platform. It actually rebuild the entire

00:47:47,960 --> 00:47:49,600
environment but doesn't go down,

00:47:49,600 --> 00:47:53,300
it puts the pending HTTP request in a bit of a loop

00:47:53,300 --> 00:47:57,580
while it rebuilds the environment and deploys it.

00:47:57,580 --> 00:48:00,870
Customers might see a bit of a lag but nobody's actually losing a session or

00:48:00,870 --> 00:48:01,530
the site's not

00:48:01,530 --> 00:48:05,090
apparently going down even while you're rolling out new features

00:48:05,090 --> 00:48:09,750
in real time. There are a few other things that

00:48:09,750 --> 00:48:13,870
platform brings to the table. Related to QA, we have

00:48:13,870 --> 00:48:18,570
a branching strategy where any branch you create in your repository

00:48:18,570 --> 00:48:21,830
has a live environment for someone to do QA on.

00:48:21,830 --> 00:48:24,810
You can branch in any number of ways that you want to.

00:48:24,810 --> 00:48:28,240
We maintain be a parent-child relationship between your branches so

00:48:28,240 --> 00:48:28,750
you can

00:48:28,750 --> 00:48:33,560
create any number of workflows for developing, testing and deploying new

00:48:33,560 --> 00:48:34,800
changes to live site.

00:48:34,800 --> 00:48:38,109
We've also optimized it

00:48:38,109 --> 00:48:41,619
both for Drupal in commerce projects

00:48:41,619 --> 00:48:45,420
and for bare-bones Symfony projects, deploying a different tool

00:48:45,420 --> 00:48:48,180
stack depending on what type of project you're identifying

00:48:48,180 --> 00:48:51,420
your application as. So in

00:48:51,420 --> 00:48:54,540
your Git repository you have these YAML configuration files

00:48:54,540 --> 00:48:59,350
where you say I'm Drupal 8 verses Drupal 7 and Git composer, and Drush

00:48:59,350 --> 00:49:00,770
a few other tools at the box

00:49:00,770 --> 00:49:04,310
or say you're Symfony and then you get composer and know Drush, know anything

00:49:04,310 --> 00:49:04,760
else

00:49:04,760 --> 00:49:08,150
and the ideas that your actually managing,

00:49:08,150 --> 00:49:12,250
the services that using including PHP, Maria DB, solar, et cetera

00:49:12,250 --> 00:49:15,619
from these configuration files so you can actually deploy

00:49:15,619 --> 00:49:19,080
a whole new feature set, a whole new service to your live site.

00:49:19,080 --> 00:49:23,050
From an e-commerce standpoint, that might mean turning on a faceted search

00:49:23,050 --> 00:49:26,420
powered by Solar but you'd want to test that downstream,

00:49:26,420 --> 00:49:30,300
enable the solar service, configure it, tweak it and then immediately roll out

00:49:30,300 --> 00:49:33,240
the infrastructure change to the live web site at the same time as you roll

00:49:33,240 --> 00:49:35,000
out the coding configuration change.

00:49:35,000 --> 00:49:39,119
That's what Platform.SH enables you to do. If anybody is interested in

00:49:39,119 --> 00:49:42,270
try it, I'm happy to hand out free voucher codes.

00:49:42,270 --> 00:49:45,380
That's all that we're up to,

00:49:45,380 --> 00:49:48,850
to support Drupal Commerce and e-commerce in general

00:49:48,850 --> 00:49:53,040
on Drupal 8 it involves the framework itself

00:49:53,040 --> 00:49:56,170
in the Drupal modules, it involves stand-alone libraries, 

00:49:56,170 --> 00:49:59,430
and it involves improving that the tools and processes that we use to actually

00:49:59,430 --> 00:50:01,040
manage these projects together.

00:50:01,040 --> 00:50:05,300
If there are any questions I am happy to field them now, otherwise we can

00:50:05,300 --> 00:50:10,579
go find more coffee.

00:50:10,579 --> 00:50:15,230
Yeah?

00:50:15,230 --> 00:50:19,180
Do we have any data about market penetration? No, not particularly.

00:50:19,180 --> 00:50:22,470
I only have a few examples of stores that I know that have launched,

00:50:22,470 --> 00:50:25,710
I know that the lush website just launched in Brazil

00:50:25,710 --> 00:50:28,950
now it's been started in London and rolled out through local partner

00:50:28,950 --> 00:50:32,430
in Brazil. That's the party the largest one that I know about and

00:50:32,430 --> 00:50:35,690
just a handful of other smaller projects that we see come in.

00:50:40,240 --> 00:50:43,059
I'm happy to hang around and take questions after the session is

00:50:43,059 --> 00:50:43,790
over if you're

00:50:43,790 --> 00:50:46,809
camera-shy or whatever am but thanks very much for your attention,

00:50:46,809 --> 00:50:47,920

YouTube URL: https://www.youtube.com/watch?v=YdBHpbOs1ZU


