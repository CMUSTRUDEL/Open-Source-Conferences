Title: DrupalCon Latin America 2015: Design Systems and Drupal
Publication date: 2015-02-10
Playlist: DrupalCon Latin America - Feb 2015
Description: 
	Speakers: Crell
Modern Web design demands visual systems that ensure content is delivered to our myriad devices, from smartphones to tablets to desktop displays and beyond, in usable ways. It requires thinking in terms of content that gets presented, often in a variety of different ways, rather than simply presentation.

Drupal has for years handled content independent of a particular design, in a sort of platonic content ideal. That makes designing for a Drupal development project is a perfect fit for design systems-thinking and results in greater efficiency and better quality. Using a smart design systems approach paired with good content strategy results in a project that fits amazingly well with Drupal's own design and capabilities... if we can recognize how to unify them.

In this session, Larry Garfield, Palantir's Senior Architect and Community Lead, will provide practical examples for how modern, modular design systems and practices can map directly to Drupal’s Views module, view modes, image styles, panels and other common site building tools. You’ll walk away with information that will help you leverage Drupal’s strengths through leading edge Web design, to see design systems, content strategy, and Drupal as a unified worldview that results in better sites, faster, and with more consistency.
Captions: 
	00:00:01,439 --> 00:00:08,200
Welcome, everyone. Hola. This session is Design Systems and Drupal.

00:00:08,200 --> 00:00:12,579
My name is Larry Garfield. You may know me online as Crell

00:00:12,579 --> 00:00:15,309
If you want to make fun of me during this session on Twitter, that's where you do so.

00:00:15,309 --> 00:00:19,320
I highly encourage it. I'm a senior architect with Palantir.net.

00:00:19,320 --> 00:00:23,890
We're a web development firm based in Chicago, working mostly but not exclusively with Drupal.

00:00:23,890 --> 00:00:29,920
We also do some Symfony work and Silex work. For Drupal 8, I'm the web services initiative

00:00:29,920 --> 00:00:35,929
lead, Drupal representative to the Framework Interoperability Group, advisor to the Drupal

00:00:35,929 --> 00:00:38,320
Association, and general purpose loveable pedant.

00:00:38,320 --> 00:00:44,679
My colleagues at Palantir will tell you the second half of that is very true.

00:00:44,679 --> 00:00:49,249
I'm a developer. I write codes. What am I here doing a design talk?

00:00:49,249 --> 00:00:56,249
Well, Drupal and design do fit very well together if you're thinking in systems, not in pages.

00:00:57,670 --> 00:00:59,969
That's it. That's the entire talk. Systems, not pages.

00:00:59,969 --> 00:01:06,969
You can all leave now. All right, let's try a little bit more detail.

00:01:07,000 --> 00:01:10,150
Why systems? What is a design system?

00:01:10,150 --> 00:01:15,280
Well, first of all, you want consistency. Consistency in your aesthetics.

00:01:15,280 --> 00:01:19,280
If you're building a site, you want your artwork and your art direction to be consistent across

00:01:19,280 --> 00:01:23,680
the whole site. You want your user interface to be consistent.

00:01:23,680 --> 00:01:29,850
You want visual cues on one page to be the same as visual cues on another page.

00:01:29,850 --> 00:01:35,340
That allows users to learn your site once and not have to relearn what you're doing

00:01:35,340 --> 00:01:37,840
every page. It makes it much easier for them to use, much

00:01:37,840 --> 00:01:42,890
easier to find content on. They can identify patterns in your design

00:01:42,890 --> 00:01:49,890
and leverage that to understand your site. It provides better efficiency.

00:01:50,000 --> 00:01:56,420
Who has built sites that have some 5,000 to 10,000 pages at some point?

00:01:56,420 --> 00:02:01,120
A couple of people? Did you do 5,000 or 10,000 different designs?

00:02:01,120 --> 00:02:04,470
I hope not. That could be very inefficient.

00:02:04,470 --> 00:02:09,090
That's a huge waste. Design systems lets you build sites that will

00:02:09,090 --> 00:02:12,560
scale to any arbitrary number pages and still look good.

00:02:12,560 --> 00:02:19,560
It also means a good design system will inform your design as the site grows because your

00:02:20,200 --> 00:02:23,250
site is going to live beyond you, at least you hope so.

00:02:23,250 --> 00:02:25,980
You're not going to build a site that the client is going to throw away a month after

00:02:25,980 --> 00:02:28,520
you finish it. You want it to live beyond you.

00:02:28,520 --> 00:02:32,050
It's going to evolve over time, and you want it to be able to evolve naturally.

00:02:32,050 --> 00:02:38,319
You want to give it natural paths for the design to evolve without having to come back

00:02:38,319 --> 00:02:41,100
to you. You don't want to have to come back and write

00:02:41,100 --> 00:02:44,890
more CSS every time you want to add a page to the site.

00:02:44,890 --> 00:02:48,459
That's wasteful. What is a system? We're talking about this

00:02:48,459 --> 00:02:52,900
system thing. A system is a set of interconnected parts

00:02:52,900 --> 00:02:58,270
forming a complex whole. Interconnected parts forming a complex whole.

00:02:58,270 --> 00:03:05,220
Individual pieces that we assemble into a larger vision.

00:03:05,220 --> 00:03:10,160
In design, generally this consists of elements, components, and templates.

00:03:10,160 --> 00:03:15,020
Those are those interconnected pieces that we're going to assemble.

00:03:15,020 --> 00:03:21,349
Elements are your basic HTML. Your headers, your block quotes, your paragraphs, your forms.

00:03:21,349 --> 00:03:27,170
That's your lowest level atomic piece that you're going to design.

00:03:27,170 --> 00:03:33,110
From those, you'll build components. Components are your page header, your page

00:03:33,110 --> 00:03:36,760
footer. If you have a hero element. I'm not sure if

00:03:36,760 --> 00:03:41,280
that term is used in Latin America, the big image at the top of the page.

00:03:41,280 --> 00:03:45,140
It's often called a hero image. Your navigation.

00:03:45,140 --> 00:03:51,140
These are larger chunks of design that you're going to build up out of your elements, but

00:03:51,140 --> 00:03:56,819
those are still independent chunks, independent components that you can reuse, and you'll

00:03:56,819 --> 00:04:03,080
use those to build up templates for your homepage, for your landing page, for an event page,

00:04:03,080 --> 00:04:09,190
a listing page, the full thing you see in a browser is built out of.

00:04:09,190 --> 00:04:12,849
It's not a painting. It's not a poster that you've put together.

00:04:12,849 --> 00:04:19,849
It is composed out of these smaller pieces. A common name for this idea is atomic design,

00:04:19,970 --> 00:04:25,120
where you've got an atomic sized piece here. Think atom.

00:04:25,120 --> 00:04:32,120
You assemble into larger chunks, larger combinations, building molecules out of them, and larger

00:04:32,540 --> 00:04:37,600
and larger, and you assemble your site and your design that way.

00:04:37,600 --> 00:04:43,740
That complex whole, well in most cases, is a CMS-driven website.

00:04:43,740 --> 00:04:49,790
Who's built a CMS-driven website? Why do any of you not have your hands up?

00:04:49,790 --> 00:04:56,790
We are at a DrupalCon. Drupal is a complex whole built out of individual

00:04:58,080 --> 00:05:05,080
components, and Drupal actually fits this model of design extremely well.

00:05:05,130 --> 00:05:11,050
Let's have a look at an example of this. We're going to walk through an actual site.

00:05:11,050 --> 00:05:18,050
This is PRI.org. PRI is one of the major public radio networks in the United States. Actually,

00:05:18,410 --> 00:05:22,419
across the United States and Europe, I believe. Public Radio International.

00:05:22,419 --> 00:05:29,419
This is a site that Palantir built about a year and a half ago or so, I believe.

00:05:29,710 --> 00:05:36,710
They wanted to have all of their content from all of their various affiliate programs aggregated

00:05:36,930 --> 00:05:43,930
up onto one big site. Mind you, this is a public radio's website,

00:05:43,930 --> 00:05:48,930
so we're going to have a lot of audio content, but also transcripts, so generally you'll

00:05:48,930 --> 00:05:54,639
have an article that has a text version and an audio version that go together.

00:05:54,639 --> 00:05:58,180
So how do we build this site? How do we assemble this?

00:05:58,180 --> 00:06:02,199
Well, let's start at the beginning. If you're doing design, you're going to start

00:06:02,199 --> 00:06:08,259
with the basics: Your color palette, your font treatment, the mood you want the site

00:06:08,259 --> 00:06:11,680
to have. As I said, I'm not a designer, so I can't

00:06:11,680 --> 00:06:16,500
go into this in detail other than you can figure this kind of stuff out with your client,

00:06:16,500 --> 00:06:20,460
with the design, with your product owner independent of Drupal.

00:06:20,460 --> 00:06:24,120
These things should exist on their own. What fonts are you going to use?

00:06:24,120 --> 00:06:30,199
How are you going to style your text? Note here saying H1s will always look like

00:06:30,199 --> 00:06:33,740
this. An H3 will always look like this.

00:06:33,740 --> 00:06:38,199
An ordered list will always have its bullet points aligned this way.

00:06:38,199 --> 00:06:41,850
Why that way instead of further indented or further outdented?

00:06:41,850 --> 00:06:45,080
Because that's what we decided to do for all of this site.

00:06:45,080 --> 00:06:49,770
That's not done per page. That is done for the entire site, and you

00:06:49,770 --> 00:06:56,770
can build that in CSS very quickly, very easily. You can start to see the patterns emerging

00:06:57,130 --> 00:07:04,130
you're going to have across the whole site. Number two: Get to know your content.

00:07:05,740 --> 00:07:10,120
We're building a content management system. We're building a content-drive site.

00:07:10,120 --> 00:07:13,889
Why are people coming to your site? They're coming for content.

00:07:13,889 --> 00:07:17,320
What is your content? I don't know. It depends on your site.

00:07:17,320 --> 00:07:21,130
That's a question you need to figure out before you start designing.

00:07:21,130 --> 00:07:25,320
If your first step in design is to jump into Photoshop before you figure out your content,

00:07:25,320 --> 00:07:30,270
you are doing it wrong. Know your content first.

00:07:30,270 --> 00:07:37,139
In this case for PRI, they had really only one major content type, a couple of secondary

00:07:37,139 --> 00:07:39,530
ones, but one primary content type called the story.

00:07:39,530 --> 00:07:46,530
The story has the story's title, date it was published, a section that it's from, an author,

00:07:46,919 --> 00:07:50,940
the program, because they've got different radio programs that a story could be coming

00:07:50,940 --> 00:07:55,100
from, body text, images, various other bits and pieces.

00:07:55,100 --> 00:07:59,160
This is conceptually the breakdown of their content.

00:07:59,160 --> 00:08:02,630
Most sites will have a couple of these. You're not going to just have one, but this

00:08:02,630 --> 00:08:09,130
is a good example for us to work with. So now you know what your content structure

00:08:09,130 --> 00:08:15,030
is going to be in the abstract. Now, let's put that into a design.

00:08:15,030 --> 00:08:21,110
Let's start combining those color palettes and other elements and create components to

00:08:21,110 --> 00:08:27,710
represent that content. We're building from the bottom up here.

00:08:27,710 --> 00:08:32,060
Let's start with the header. We're going to show a story on a page that's

00:08:32,060 --> 00:08:34,789
somewhere on the site. We don't know where. We don't know the whole site, but somewhere

00:08:34,789 --> 00:08:41,240
there will be a page that shows an individual story, and it's going to have a header, and

00:08:41,240 --> 00:08:44,660
we want that header to have the date. We've got our date here.

00:08:44,660 --> 00:08:49,490
The author. We've got our author here. The title. The program. In this case, it's

00:08:49,490 --> 00:08:55,300
the World, their particular program. And the section: Arts, culture, and media.

00:08:55,300 --> 00:09:00,060
So we know all of these pieces that are going to appear on the page are coming out of our

00:09:00,060 --> 00:09:03,290
content. We've accounted for them. We know where they're

00:09:03,290 --> 00:09:05,790
coming from. We know that users will be able to enter them.

00:09:05,790 --> 00:09:12,790
This as advertising-driven site, so we're going to need an ad block of some kind.

00:09:13,820 --> 00:09:20,820
We're going to have lede image. That's a large image of something related to the story

00:09:26,300 --> 00:09:30,050
and a caption credit down here and the actual caption text.

00:09:30,050 --> 00:09:35,330
This is part of our header. And we're also going to have some share links.

00:09:35,330 --> 00:09:38,560
Think this through. Are those user editable? Is that something the content editor is going

00:09:38,560 --> 00:09:43,110
to be editing? Probably not, but we still account for it in the design.

00:09:43,110 --> 00:09:50,110
It's part of the design level component. We put these pieces together, and we start

00:09:50,149 --> 00:09:56,200
to get the page. We start to get our story page.

00:09:56,200 --> 00:09:58,690
Here's that header we just described all the pieces of.

00:09:58,690 --> 00:10:03,630
Here's the image, the caption. We're just assembling the various pieces we're

00:10:03,630 --> 00:10:07,470
defining. This is the entire story here, and if you

00:10:07,470 --> 00:10:12,529
go through--I'm not going to go through every piece--everything on this page in this column

00:10:12,529 --> 00:10:18,180
here, we can map to a chunk of our content, into a field in our content, and those are

00:10:18,180 --> 00:10:25,180
the pieces we just described. And keep doing it. Just make more of them.

00:10:26,250 --> 00:10:31,269
So let's have a look at the home page because clients always want to see the home page first.

00:10:31,269 --> 00:10:34,560
Even though it doesn't make sense to design that first, they want the home page first.

00:10:34,560 --> 00:10:39,180
Whatever. Ask again. Why are people coming to the site?

00:10:39,180 --> 00:10:45,220
What do they want to see on your homepage? People are coming to this site to read stories.

00:10:45,220 --> 00:10:48,860
That is why they're coming to the site. They don't want to see a message from the

00:10:48,860 --> 00:10:52,260
editor. They don't want to see a nice, big splashy

00:10:52,260 --> 00:10:56,839
picture of the offices that you work out of. Not relevant.

00:10:56,839 --> 00:11:00,149
Users are coming here for stories. They're coming here for content.

00:11:00,149 --> 00:11:04,600
Make that primary. Again, these are the bits and pieces of a

00:11:04,600 --> 00:11:09,019
story we have to work with. How can we express that? What are the important

00:11:09,019 --> 00:11:12,310
pieces of that that we can show on the home page?

00:11:12,310 --> 00:11:18,670
Let's whittle it down to the title, date, the section, program, lede text and image,

00:11:18,670 --> 00:11:24,019
and a share count so we know how popular our story is.

00:11:24,019 --> 00:11:29,360
And let's define a way of looking at a story, a component that represents a story called

00:11:29,360 --> 00:11:33,950
a lead feature. All right, we're going to make it horizontally

00:11:33,950 --> 00:11:40,950
aligned, and we're going to show the title, the date, the section, program, lede text,

00:11:41,050 --> 00:11:45,040
lede image, share count. We've accounted for every piece.

00:11:45,040 --> 00:11:50,040
We have nothing in the design where we're like, "So where does that actually come from?"

00:11:50,040 --> 00:11:54,750
We know all of these are part of the content, and that's something we can calculate.

00:11:54,750 --> 00:11:58,079
We know these sort of things, so we don't have extra flotsam floating around the design

00:11:58,079 --> 00:12:02,790
to look pretty that's not actually going to be usable.

00:12:02,790 --> 00:12:07,300
What's another way of looking at it? How about this squared feature design?

00:12:07,300 --> 00:12:14,300
Here we're still showing the same title, date and section, lede image, share count, but

00:12:14,420 --> 00:12:19,300
this time no lede text. All the same pieces from the content.

00:12:19,300 --> 00:12:21,519
We still know where all of this data is coming from.

00:12:21,519 --> 00:12:25,390
All of this content we can account for. We're just showing it in a different way.

00:12:25,390 --> 00:12:30,860
This is a different lens onto that story object, that story content we have.

00:12:30,860 --> 00:12:34,620
Can we look at it another way? Sure.

00:12:34,620 --> 00:12:38,790
Illustrated lists. Same idea. We're going to show the same fields,

00:12:38,790 --> 00:12:42,570
but show it horizontally like this instead of vertically.

00:12:42,570 --> 00:12:49,260
Again, all of these pieces we can account for. It's the same pieces of content in every

00:12:49,260 --> 00:12:55,589
one of these cases. In some cases, we'll have less space, so in

00:12:55,589 --> 00:13:00,890
a compact version we just show the section image and title and we drop off the other

00:13:00,890 --> 00:13:04,510
pieces, but we still know where all of this content is coming from.

00:13:04,510 --> 00:13:10,430
It's still the same content powering it. Finally, we can go even smaller. It's hard

00:13:10,430 --> 00:13:16,100
to read from here, but you don't need to. It's just title, date, section.

00:13:16,100 --> 00:13:19,829
All of these are just different ways of assembling that same piece of content.

00:13:19,829 --> 00:13:22,880
They're different lenses onto that same piece of content.

00:13:22,880 --> 00:13:28,390
Different representations of that same piece of content, and we have designed these individual

00:13:28,390 --> 00:13:34,290
components, which we can now mix and match. We can now assemble these into a complete

00:13:34,290 --> 00:13:40,839
page. So we have our lede up here. We have our smaller

00:13:40,839 --> 00:13:44,380
square features here. We can go down the entire page, in fact.

00:13:44,380 --> 00:13:51,260
This is the entire home page, and we have that lede image, our lead feature component

00:13:51,260 --> 00:13:57,220
we designed. We have a couple of these square features,

00:13:57,220 --> 00:14:01,450
all the same design, just different content in them. We don't do custom design for each

00:14:01,450 --> 00:14:08,010
article. We've got our illustrated list compact here.

00:14:08,010 --> 00:14:14,260
We've got then full illustrated lists here. And that's the entire page. This entire home

00:14:14,260 --> 00:14:19,589
page is just a bunch of stories shown in different ways.

00:14:19,589 --> 00:14:24,420
Just showing the same content in different ways over and over again.

00:14:24,420 --> 00:14:29,040
This gives us a lot of flexibility. We can pour whatever content we want into

00:14:29,040 --> 00:14:33,050
the site, and this design will still work with us.

00:14:33,050 --> 00:14:40,050
So here are those various pieces. That seems like a lot of work, but it gets

00:14:41,630 --> 00:14:44,139
easier. In fact, the more you do it, the easier it

00:14:44,139 --> 00:14:47,730
gets. Let's look at a listing page, say the landing

00:14:47,730 --> 00:14:53,720
page for a given section, so the politics and society section of the site.

00:14:53,720 --> 00:14:59,510
All right, we've got some custom header stuff here for that section, but that's going to

00:14:59,510 --> 00:15:06,510
be the same for every section, but notice this looks familiar. This looks familiar.

00:15:08,110 --> 00:15:13,269
This is the exact same component as on the home page.

00:15:13,269 --> 00:15:17,010
This main body area here. That is an illustrated list.

00:15:17,010 --> 00:15:23,600
The design for that section is exactly the same as the illustrated list on the home page.

00:15:23,600 --> 00:15:28,880
That means it's less work for you to design, it's less work to implement, it's less work

00:15:28,880 --> 00:15:33,920
for content editors to think about, and it's easier for users using the site.

00:15:33,920 --> 00:15:38,149
Oh, this looks the same. It probably is the same. In fact, it is.

00:15:38,149 --> 00:15:45,149
And then there's our especially compact list over on the side, and we even have down here

00:15:45,440 --> 00:15:51,860
our compact illustrated list as well. So the same components, just rearranged differently,

00:15:51,860 --> 00:15:56,930
give us a completely different template, but we still only have to do the work of styling

00:15:56,930 --> 00:16:02,130
each of these ones. I'm sure some of you are wondering what are

00:16:02,130 --> 00:16:05,769
we talking about Drupal for? What are we talking about this for? What does this have to do

00:16:05,769 --> 00:16:09,839
with Drupal? Well, what is Drupal?

00:16:09,839 --> 00:16:13,949
A content management system. Building systems is what Drupal is really,

00:16:13,949 --> 00:16:17,350
really good at. That's why we use it.

00:16:17,350 --> 00:16:22,040
If we didn't want that, we would just hand-roll a bunch of HTML pages like it was in the 1990's.

00:16:22,040 --> 00:16:29,040
Who actually wants to go back to the 1990's web? Didn't think so.

00:16:30,959 --> 00:16:34,079
For the type and color treatment, Drupal doesn't actually care.

00:16:34,079 --> 00:16:41,079
You have pretty much complete freedom here. As for your content, Drupal knows content.

00:16:44,570 --> 00:16:48,269
In the fancy lingo these days, this is content strategy.

00:16:48,269 --> 00:16:52,310
Understand your content and what you're trying to do with it. Understand what your users

00:16:52,310 --> 00:16:57,800
want out of it. This is actually really, really close to what

00:16:57,800 --> 00:17:03,220
we were just talking about. The story, as we model it in Drupal, looks

00:17:03,220 --> 00:17:08,029
an awful lot like what we had in the design. In fact, these should be designed together

00:17:08,029 --> 00:17:12,199
so that they complement each other, so we have that parallel between what we're going

00:17:12,199 --> 00:17:15,929
to model in Drupal and what we're showing on the site. Those need to go together.

00:17:15,929 --> 00:17:22,769
If you have a bunch of stuff on the page that has no corresponding structure in Drupal,

00:17:22,769 --> 00:17:29,769
how are you going to fill in that content? You're not. So don't set yourself up for that.

00:17:30,539 --> 00:17:37,539
How do you map this out in Drupal? Good planning. At Palantir, we've developed something we

00:17:39,700 --> 00:17:43,639
called build spec. It's basically a very structured Google spreadsheet

00:17:43,639 --> 00:17:47,919
that we use to pre-plan all of the buttons we're going to push in Drupal.

00:17:47,919 --> 00:17:52,220
Drupal makes it really easy to build out a content model by pushing buttons.

00:17:52,220 --> 00:17:59,149
The slides will be online later, so you don't need to write down the link right now.

00:17:59,149 --> 00:18:01,979
But you want to plan out what you're going to be doing.

00:18:01,979 --> 00:18:08,119
You want to plan out what structure you want to build in Drupal before you actually push

00:18:08,119 --> 00:18:11,309
buttons. It's much easier to change before you start

00:18:11,309 --> 00:18:16,029
pushing buttons. Build spec, as I said, it's really just a

00:18:16,029 --> 00:18:19,879
glorified spreadsheet with some automation in it.

00:18:19,879 --> 00:18:24,289
So in this case, these are the various fields we're going to define and their settings.

00:18:24,289 --> 00:18:30,149
We can think through, "Oh, should this field be multi-value?" Yes, no, maybe. That can

00:18:30,149 --> 00:18:32,859
sometimes be hard to change after you start entering content.

00:18:32,859 --> 00:18:36,669
Think it through first. Do we want to limit this text field to a certain

00:18:36,669 --> 00:18:40,979
number of characters? Do we want to allow certain types of images

00:18:40,979 --> 00:18:44,210
in this image field? This lets us very, very easily think through

00:18:44,210 --> 00:18:49,940
that kind of question and say "What does the design need? What does the content need? Therefore,

00:18:49,940 --> 00:18:56,940
what do we make Drupal do?" Then, map those into our content types. In

00:18:57,779 --> 00:19:02,609
this case, we have a basic page, general page, and then story.

00:19:02,609 --> 00:19:09,609
Story has these fields on it. And then we can push that into Drupal.

00:19:12,369 --> 00:19:17,789
Once you have your build spec defined, there are actually people who built automated tools

00:19:17,789 --> 00:19:22,809
to partially just import that spreadsheet straight into Drupal, but you can do this

00:19:22,809 --> 00:19:26,149
in an afternoon of button pushing once you know what buttons you want to push.

00:19:26,149 --> 00:19:33,149
So we've got our title, date, section, our lede text, body text, lede image, and so on.

00:19:35,249 --> 00:19:41,190
Note we're separating the lede text and body text. We almost never use the built in split teaser

00:19:41,190 --> 00:19:45,389
and body that Drupal uses. Honestly, I think that's a terrible thing.

00:19:45,389 --> 00:19:50,340
It works for blogs and basically nothing else. Give yourself the freedom to have completely

00:19:50,340 --> 00:19:54,249
separate text if you want to. If you want it to be the same, users can copy

00:19:54,249 --> 00:20:01,249
and paste a bit or you can do other trickery with it, but make that independent.

00:20:04,309 --> 00:20:11,309
And then, you get your nice, ugly Drupal 7 edit form, but with all of those same fields

00:20:12,080 --> 00:20:15,249
on it. So there's our image, body, and so on and

00:20:15,249 --> 00:20:18,669
so on. Now we've got our content structured, defined

00:20:18,669 --> 00:20:22,039
in Drupal, and we can start entering content. And we can enter content.

00:20:22,039 --> 00:20:27,009
Since we know this is not going to change now, at least we hope not, we can start entering

00:20:27,009 --> 00:20:30,470
content while we're still building out the rest of the site as long as you have your

00:20:30,470 --> 00:20:34,729
content model figured out early. That's the important part.

00:20:34,729 --> 00:20:40,889
All right. Now that we've got our content, let's start building those components and

00:20:40,889 --> 00:20:45,799
those templates in Drupal. Can Drupal do that? Well, yes.

00:20:45,799 --> 00:20:52,799
A component, if we just described it, is a visual representation of your content.

00:20:53,759 --> 00:20:59,899
Visual representations of content in Drupal are these things called view modes.

00:20:59,899 --> 00:21:06,899
So a view mode is a component. Huzzah! Not called that, but pretty much.

00:21:07,259 --> 00:21:11,700
You can configure a given view mode in Drupal. Say, all right, I want this field to show

00:21:11,700 --> 00:21:13,580
this way. I want its header or not.

00:21:13,580 --> 00:21:15,509
I want it to show if it's an image, this particular size.

00:21:15,509 --> 00:21:20,460
I want it to have a link or not. You're defining a component here.

00:21:20,460 --> 00:21:27,460
You're defining a window onto a piece of content. You can think of each of these fields as an

00:21:28,570 --> 00:21:32,639
element, sometimes a bit more complex than that if it does a lot of markup, but conceptually

00:21:32,639 --> 00:21:38,289
element, component. Some fields we can even hide entirely, like

00:21:38,289 --> 00:21:42,239
the full-page version. We're not going to show the lede text at all.

00:21:42,239 --> 00:21:48,279
Period. And then, that shows up on your page.

00:21:48,279 --> 00:21:55,090
This is news from tomorrow. It took people a moment.

00:21:55,090 --> 00:22:01,799
And all of those elements are here, and this component is the full-page version of your

00:22:01,799 --> 00:22:08,799
article. You add some CSS and HTML.

00:22:09,190 --> 00:22:14,159
I'm not a front-end developer, so I'm not going to show code for that, but you can have

00:22:14,159 --> 00:22:21,109
a template that targets a specific view mode. In this case, node in full mode. You can also

00:22:21,109 --> 00:22:25,879
target a specific view mode and a specific node type just by proper naming.

00:22:25,879 --> 00:22:32,049
Add CSS to taste, and you get the design you want.

00:22:32,049 --> 00:22:35,739
Here's your component. We've used Drupal to say these are the fields

00:22:35,739 --> 00:22:42,179
to expose to the template, then we've used our template and our CSS to design it out

00:22:42,179 --> 00:22:47,479
the way we want, to make it look visually the way we want.

00:22:47,479 --> 00:22:53,529
And keep doing it. Who's worked with image styles in Drupal?

00:22:53,529 --> 00:22:57,659
Most of you. Image styles are pretty much exactly the same

00:22:57,659 --> 00:23:01,419
as view modes, just for images. It's the same concept.

00:23:01,419 --> 00:23:04,739
Given this image, what lens do I want to use on it?

00:23:04,739 --> 00:23:11,259
I want a lens that says scale it to 145 x 82 pixels.

00:23:11,259 --> 00:23:14,119
I want a lens that will reduce it to gray scale.

00:23:14,119 --> 00:23:19,690
I want a lens that whatever. And you just create these image styles, view

00:23:19,690 --> 00:23:26,690
modes for images that you can then use. You can then define your own view modes.

00:23:28,090 --> 00:23:31,229
Drupal 7 Core does not let you do that. Drupal 8 Core does.

00:23:31,229 --> 00:23:36,759
In Drupal 7, there is a module called entity view mode from Dave Reid, because what isn't

00:23:36,759 --> 00:23:42,009
from Dave Reid, that lets you define custom view modes in the UI.

00:23:42,009 --> 00:23:45,429
They're all exportable. So we'll create an illustrated list view mode

00:23:45,429 --> 00:23:52,429
that applies to stories, and we'll configure that view mode--here's an illustrated list--to

00:23:53,969 --> 00:24:00,479
show the section, date, lede image. In this case, the image is going to link to

00:24:00,479 --> 00:24:04,489
the actual content itself. We're going to use that illustrated list image

00:24:04,489 --> 00:24:09,739
style we've just defined, and we're going to hide the image caption, the credit, the

00:24:09,739 --> 00:24:16,739
body, and so on and so on. Tip: If you're showing an image as part of

00:24:16,830 --> 00:24:22,229
content on its own page, don't make it a link because it's going to go to this page you're

00:24:22,229 --> 00:24:27,090
already on, and that's useless. If it's on any other page, make it a link

00:24:27,090 --> 00:24:32,349
because I guarantee you users click on pictures, so make the picture go where they probably

00:24:32,349 --> 00:24:39,349
mean to go, which is to the content. Now that we have this lens, this view mode

00:24:45,659 --> 00:24:49,580
on our story called illustrated list, where are we going to put it?

00:24:49,580 --> 00:24:55,070
Well, we can theme it the same way that we themed the full-page version a moment ago.

00:24:55,070 --> 00:24:58,419
We just have a template and CSS that goes with it, and that applies to that one chunk

00:24:58,419 --> 00:25:02,340
of content. How do we get that onto the page?

00:25:02,340 --> 00:25:07,719
Everyone's best friend Views. Views is a design tool.

00:25:07,719 --> 00:25:10,429
Never thought you'd hear someone say that, did you?

00:25:10,429 --> 00:25:13,999
Views is a design tool. It is for content assembly.

00:25:13,999 --> 00:25:19,809
It is for taking content and building it up with business rules.

00:25:19,809 --> 00:25:22,049
What are those business rules? It depends on your site.

00:25:22,049 --> 00:25:24,379
Up to you. Maybe it's chronological. Maybe it's things

00:25:24,379 --> 00:25:31,179
that are flagged. Whatever. Not everyone realizes it, but in Views, by

00:25:31,179 --> 00:25:35,869
default Views pulls out individual fields from a piece of content, but you can change

00:25:35,869 --> 00:25:40,019
it to show the entire content in a certain view mode.

00:25:40,019 --> 00:25:46,409
So let's tell it we're going to make a view of illustrated list representations of content,

00:25:46,409 --> 00:25:51,509
and now we can't specify individual fields because we're going to show the entire piece

00:25:51,509 --> 00:25:56,690
of content rendered in that way. We're going to show a specific number of them,

00:25:56,690 --> 00:26:03,690
let's say six, and we're going to filter it to just show published stories, and we're

00:26:07,090 --> 00:26:10,779
going to show them chronologically. You want different business rules, you push

00:26:10,779 --> 00:26:15,869
different buttons. But there you go.

00:26:15,869 --> 00:26:22,869
We have now assembled a view of content, a view of story nodes that will be shown in

00:26:23,809 --> 00:26:27,429
illustrated list format. We've already defined the illustrated list

00:26:27,429 --> 00:26:34,429
format, and so it ends up looking like that, and here's other stories rendered the same

00:26:34,690 --> 00:26:38,779
way. Sometimes people ask about performance.

00:26:38,779 --> 00:26:42,549
You know, does it cost more in performance to load the entire node?

00:26:42,549 --> 00:26:48,299
As of Drupal 7, no it doesn't, because if you are pulling even one field other than

00:26:48,299 --> 00:26:54,349
the title, Views will do a full node load anyway, but it's going to load all of the

00:26:54,349 --> 00:27:00,159
nodes at once because it can do that now. The performance is basically going to be the

00:27:00,159 --> 00:27:04,019
same either way. If you're showing a single content type, there's

00:27:04,019 --> 00:27:08,789
almost never a reason to use fields. Pretty much if you're building a table is

00:27:08,789 --> 00:27:12,570
the only reason. Otherwise, view modes is a much more sustainable

00:27:12,570 --> 00:27:19,489
way of building a site. Now that we've got that view defined, how

00:27:19,489 --> 00:27:26,479
do we build that together into a page? I look at these designs, and the first word

00:27:26,479 --> 00:27:31,190
that comes to mind is panels. Not everybody likes panels, but panels is

00:27:31,190 --> 00:27:37,489
excellent for this kind of work. Panels is an excellent design tool because

00:27:37,489 --> 00:27:44,489
here I've got a view of, let's say, stories with a certain flag, chronologically, limit

00:27:46,149 --> 00:27:53,149
one, shown in the feature item view mode. Make a panel pane out of that, stick it into

00:27:53,919 --> 00:27:58,700
a panel. Here I've got a series of stories shown in

00:27:58,700 --> 00:28:05,229
the square feature format, so I have a view that pulls out, say, one from each of these

00:28:05,229 --> 00:28:12,229
sections, and I place those onto the page. Here I've got the illustrated list compact

00:28:13,950 --> 00:28:16,929
version. Depending on my business rules, I could make

00:28:16,929 --> 00:28:23,929
this one view or six different views, whatever makes sense, and put that onto the page.

00:28:24,299 --> 00:28:29,049
This, it's a list, of course it's a view that I can put onto the page.

00:28:29,049 --> 00:28:36,049
I look at this and say this is trivially panels. The section page? Same thing.

00:28:38,769 --> 00:28:45,769
This is that same view. It's the same view showing the same view mode as we had before.

00:28:48,889 --> 00:28:55,879
This is just another view. All right, we want different logic here for,

00:28:55,879 --> 00:29:01,179
say, this pulls from all sections, this pulls from one section? Okay.

00:29:01,179 --> 00:29:05,710
We edit our view. It creates two different displays, gives them slightly different rules

00:29:05,710 --> 00:29:09,259
for how they filter, but they're still the same thing.

00:29:09,259 --> 00:29:12,379
But what about performance? All these views we're loading.

00:29:12,379 --> 00:29:17,169
One of the nice things with panels: You can cache any of these independently of each other

00:29:17,169 --> 00:29:24,169
in panels, so you can make this page really, really fast and really, really easy to build

00:29:25,729 --> 00:29:32,729
and really consistent and easy to assemble. What happens if we want to make these responsive?

00:29:34,960 --> 00:29:37,739
What's going to happen to this page when it becomes responsive when we need to try and

00:29:37,739 --> 00:29:41,919
shrink it down? Do we just do another design? No.

00:29:41,919 --> 00:29:46,359
We've already broken the site up, already broken the page up into pieces.

00:29:46,359 --> 00:29:53,359
The markup and the CSS for this illustrated list element here, this illustrated list component,

00:29:55,690 --> 00:30:00,669
it's probably going to start looking ugly at a different size than these are going to

00:30:00,669 --> 00:30:04,879
start looking ugly. So when that particular piece gets too small,

00:30:04,879 --> 00:30:11,879
we use a media query, a break point, on just that piece and reformat just that view mode,

00:30:13,119 --> 00:30:19,599
and these will then break at the same place. Maybe at a different place, we want to break

00:30:19,599 --> 00:30:23,409
this list into two, so it's three and three instead of six across.

00:30:23,409 --> 00:30:26,460
Is that going to be the same place as this? I doubt it.

00:30:26,460 --> 00:30:30,440
Are we going to want to move these around, maybe hide some of them at different break

00:30:30,440 --> 00:30:35,059
points probably, same as these? I doubt it.

00:30:35,059 --> 00:30:39,839
Will the overall structure of the page break and start to get ugly at the same size as

00:30:39,839 --> 00:30:44,179
all of these others? Almost certainly not.

00:30:44,179 --> 00:30:51,179
With component-based design, with a design system, we can say this piece has these break points,

00:30:51,839 --> 00:30:58,839
this piece has these break points, the entire layout has these break points, and the site

00:30:59,759 --> 00:31:04,169
will just work itself out. Design in the browser really helps for this.

00:31:04,169 --> 00:31:08,049
You can just say: What is the design going to look like at a given pixel size?

00:31:08,049 --> 00:31:11,089
I don't know. Every individual piece will do its best to

00:31:11,089 --> 00:31:16,190
look good, and the overall layout will do its best to look good.

00:31:16,190 --> 00:31:23,190
So we may have effectively, then, 15 different places where the design shifts depending on

00:31:23,429 --> 00:31:28,979
the screen width, and they all look good, and we didn't have to design 15 different

00:31:28,979 --> 00:31:32,700
versions of the site. We designed one version of the site using

00:31:32,700 --> 00:31:38,349
components, using individual view modes, using individual pieces that we can assemble and

00:31:38,349 --> 00:31:43,929
move around and rearrange. How about when someone goes to create a new

00:31:43,929 --> 00:31:49,649
type of page on the site and they want to have a list of articles on it, a list of stories?

00:31:49,649 --> 00:31:54,889
They can use Views and slap a new illustrated list into that page with different logic,

00:31:54,889 --> 00:31:59,099
and it looks good from day one. You don't need to go back and design a new

00:31:59,099 --> 00:32:01,950
page. You just assemble it out of the pieces you

00:32:01,950 --> 00:32:05,129
already have. I want to change the layout of the home page

00:32:05,129 --> 00:32:12,129
and, say, put the feed up at the top. Okay. Just move stuff around in panels. Everything

00:32:12,269 --> 00:32:16,109
still works. This is the power that components give you.

00:32:16,109 --> 00:32:20,580
You can rearrange them. You can have them respond differently to the

00:32:20,580 --> 00:32:26,070
environment independently of each other. For the developers in the room, decoupled

00:32:26,070 --> 00:32:32,339
components. Same concept at the design level, independent pieces that you assemble into

00:32:32,339 --> 00:32:39,339
a greater whole. In short, Drupal is a very designer-friendly

00:32:39,549 --> 00:32:46,109
CMS if you're designing in systems. If you try to design whole pages as a big

00:32:46,109 --> 00:32:51,299
image in Photoshop and then map that into Drupal, you are in for a world of pain.

00:32:51,299 --> 00:32:55,769
I've worked with a lot of designers who try and do that, and I am in for a world of pain,

00:32:55,769 --> 00:32:59,979
and I don't always get the ability to make them feel the pain instead.

00:32:59,979 --> 00:33:06,399
If I have designers that can think in systems, it becomes really easy to build a site in

00:33:06,399 --> 00:33:09,379
Drupal. Drupal is a very design-friendly CMS. It's

00:33:09,379 --> 00:33:14,889
just picky about who its friends are. Most importantly, understand your content

00:33:14,889 --> 00:33:18,969
abstractly. Don't think of your content as what appears

00:33:18,969 --> 00:33:23,940
on the page. What is a story conceptually? What makes up

00:33:23,940 --> 00:33:30,169
a story conceptually? That content model, I can now express on a

00:33:30,169 --> 00:33:32,889
page. You don't start with the picture.

00:33:32,889 --> 00:33:37,149
You start with the content and then make a picture of the content.

00:33:37,149 --> 00:33:42,139
For more information on this, there is a blog post I did a couple weeks back. It goes into

00:33:42,139 --> 00:33:46,259
this in a lot more detail. Again, slides will be online shortly after

00:33:46,259 --> 00:33:52,089
the session. I'll be tweeting them. If you find that it's hard to build a design

00:33:52,089 --> 00:33:58,399
using Drupal, it's not actually Drupal's fault. It means you're not doing design systems.

00:33:58,399 --> 00:34:03,789
If you're not doing design systems, you should be. Welcome to 2015.

00:34:03,789 --> 00:34:08,270
Some executive wanted this thing to appear on the page and didn't explain why. You don't

00:34:08,270 --> 00:34:12,399
know why. Well, that's because it's a bad design.

00:34:12,399 --> 00:34:17,740
If the design element doesn't fit, it doesn't nod to your content, you probably don't need

00:34:17,740 --> 00:34:24,740
it, and the executive, you need to be able to tell them it doesn't actually fit the system.

00:34:25,319 --> 00:34:29,240
Because it's pretty is not a design system. We're not making posters.

00:34:29,240 --> 00:34:34,450
We're not making paintings. We're making content-driven websites.

00:34:34,450 --> 00:34:40,460
A system is a system. It is a series of components working together

00:34:40,460 --> 00:34:46,190
to form a complex whole. You want to use that same system for the entire

00:34:46,190 --> 00:34:50,970
project. The designers, the site builders, the coders should

00:34:50,970 --> 00:34:55,980
all be using that same mental model, that same design system, that same ubiquitous language

00:34:55,980 --> 00:35:02,099
across the entire site. This is something that should be done collaboratively.

00:35:02,099 --> 00:35:07,380
Do not have the designers design something and drop it on the desk of the developers

00:35:07,380 --> 00:35:09,960
and say, "Here, go build this." That never works.

00:35:09,960 --> 00:35:14,440
Has that ever actually worked for anyone? Does that work well?

00:35:14,440 --> 00:35:18,910
Didn't think so. If the designers and the developers are working

00:35:18,910 --> 00:35:24,990
together, though, they can create a design system that mirrors the content structure

00:35:24,990 --> 00:35:29,700
in Drupal, and then you can do most of your work by pushing buttons and slapping some

00:35:29,700 --> 00:35:33,609
CSS on it. And that becomes most of your job, is push

00:35:33,609 --> 00:35:37,450
buttons and slap some CSS on it, and you can go home at 5 o'clock and hang out with your

00:35:37,450 --> 00:35:41,440
friends or with your family rather than staying there all night trying to make this design

00:35:41,440 --> 00:35:45,720
pixel perfect because the designer thinks that somehow matters.

00:35:45,720 --> 00:35:50,690
And isn't that what we all want, to actually go home at 5 o'clock and hang out with our

00:35:50,690 --> 00:35:57,519
family and friends? I agree.

00:35:57,519 --> 00:36:04,491
Thank you. So I've got a fair bit of time for questions,

00:36:04,510 --> 00:36:11,510
so if you have questions, raise your hand. We'll run a microphone around.

00:36:13,190 --> 00:36:20,190
Back there. -Great presentation, Larry. Is there an easy

00:36:26,690 --> 00:36:33,690
way to get Drupal to give me a list of one node rendered in all the different view modes

00:36:34,789 --> 00:36:40,760
so that my CSS designer doesn't have to go and try to find them in all the different

00:36:40,760 --> 00:36:44,349
systems? -I do not know of one off the top of my head.

00:36:44,349 --> 00:36:51,349
There is something called the style guide module, which, it doesn't work at that level.

00:36:51,690 --> 00:36:57,549
It gives you another list, a paragraph, a table, an ordered list, and all those pieces

00:36:57,549 --> 00:37:03,180
so you know, "Oh, I forgot to theme the message box. I should go do that."

00:37:03,180 --> 00:37:09,059
I don't know of one that gives you all of those view modes, but it doesn't sound like

00:37:09,059 --> 00:37:11,390
a hard module to write. That would actually be really useful. Thank

00:37:11,390 --> 00:37:14,809
you for volunteering. -[inaudible]

00:37:14,880 --> 00:37:19,119
-What's that? -[inaudible]

00:37:19,160 --> 00:37:25,599
-All right. So someone's already working on it. We'll hopefully have a boff at the codes

00:37:26,180 --> 00:37:33,150
[inaudible]. -In our company, we start a project with requirements,

00:37:33,340 --> 00:37:40,340
after that a [inaudible], after that prototyping. We evaluate the user experience, and after

00:37:40,369 --> 00:37:47,369
that we start the site building. I believe doing this step is very important to define

00:37:50,019 --> 00:37:57,019
the whole development. I would like to know is there a methodology to develop or to make

00:38:00,000 --> 00:38:07,000
the site building in a better way. -Can you repeat the last part of the question,

00:38:10,960 --> 00:38:14,460
please? -[inaudible] methodology to make the site

00:38:14,460 --> 00:38:18,740
building in a better way? -How do you convince people to work this way

00:38:18,740 --> 00:38:22,829
instead of design and then dump design, is that what you're asking?

00:38:26,480 --> 00:38:30,180
-Okay. I am talking about the work process. We started with functionality features, requirements,

00:38:30,180 --> 00:38:37,180
and after that we start the [inaudible] and after that we start to evaluate the scenarios

00:38:41,400 --> 00:38:46,940
using prototyping. -Okay.

00:38:51,460 --> 00:38:58,460
-After those tasks, we started to define how can we model that in Drupal and use a site-building

00:38:59,940 --> 00:39:03,180
methodology that we developed? -Okay.

00:39:03,180 --> 00:39:10,180
-I would like to know is the methodology to develop good site building?

00:39:10,470 --> 00:39:16,779
-Sorry. That last sentence, I'm having a hard time understanding. I apologize.

00:39:16,779 --> 00:39:23,410
-All right. Is there an established methodology to do this kind of philosophy applied for

00:39:23,410 --> 00:39:29,869
site building? -Okay. What we do is the build spec, and that

00:39:29,869 --> 00:39:34,910
is something that ideally is a collaboration between the development team and the design

00:39:34,910 --> 00:39:41,099
team, so whoever the designer is is thinking about content and thinking about fields as

00:39:41,099 --> 00:39:45,809
they're putting together the design. They're thinking about: This is this view

00:39:45,809 --> 00:39:49,890
mode of this content type. They are thinking about that as they're designing,

00:39:49,890 --> 00:39:55,859
and then we can model that in the build spec and then give feedback right there, and think,

00:39:55,859 --> 00:40:00,680
"All right, mapping things out in the spreadsheet, we've come up with this question, this question,

00:40:00,680 --> 00:40:03,519
this question, and this makes no sense at all."

00:40:03,519 --> 00:40:05,690
Go back to the designer. We haven't touched Drupal yet.

00:40:05,690 --> 00:40:10,670
Go back to the designer. "Here are the potential issues we're seeing. We want your feedback."

00:40:10,670 --> 00:40:16,930
You want that feedback loop between the development team and the design team, and then once you've

00:40:16,930 --> 00:40:23,930
got that figured out, dump all that into Drupal. That's roughly the process that we follow

00:40:25,420 --> 00:40:32,420
at Palantir. -And your design team is in the same building

00:40:36,150 --> 00:40:38,269
as the developers or do you work in [inaudible] -The question for the recording is: Are we

00:40:38,269 --> 00:40:41,089
working with an in-house design team or outside design teams?

00:40:41,089 --> 00:40:44,869
We do a little of each. When we have an internal design team, we go

00:40:44,869 --> 00:40:49,039
through this process and it works very well. I actually like working with our in-house

00:40:49,039 --> 00:40:54,630
designers. They get design systems. Other times, we are working with an outside

00:40:54,630 --> 00:41:01,630
design firm, and we have to factor in additional time to reverse engineer their design and

00:41:01,849 --> 00:41:06,890
try and figure out how to map it into Drupal, and its almost always a poor fit.

00:41:06,890 --> 00:41:10,349
The designers, even if they're at separate companies, designers and the developers should

00:41:10,349 --> 00:41:16,299
be working together from the beginning. If you have designers go off and make design

00:41:16,299 --> 00:41:20,069
and give that to the developers, it doesn't matter if its one company or two, you will

00:41:20,069 --> 00:41:23,420
have problems. You will have a disconnect, guaranteed.

00:41:23,420 --> 00:41:27,990
It's one reason why I prefer to work with our in-house design team than a third party

00:41:27,990 --> 00:41:34,180
design company because we have a tighter feedback loop and can have that kind of interaction

00:41:34,180 --> 00:41:37,910
to figure these kind of things out. Over here, yeah.

00:41:37,910 --> 00:41:44,910
-To follow up on that, when you're not working with your internal design team, you have a

00:41:47,210 --> 00:41:52,619
process of governance model where you suggest everything to be done in advance by the creative

00:41:52,619 --> 00:41:59,190
agencies in a way that you're going to maximize this when you finally get to the point of

00:41:59,190 --> 00:42:06,190
designing and using Drupal for that? -It varies with the client. Sometimes we have

00:42:07,039 --> 00:42:12,799
the ability to push back on the design and say, like one common line that I like using,

00:42:12,799 --> 00:42:17,259
"If we have this piece on the page here, this is going to take 40 hours to do. If we move

00:42:17,259 --> 00:42:22,329
it here, that will take 2 hours to do. Client, which one do you want?"

00:42:22,329 --> 00:42:25,650
Sometimes we can do that, sometimes we can't. Sometimes the client will want the 40-hour

00:42:25,650 --> 00:42:28,490
version. They may not want to pay for it, but they'll

00:42:28,490 --> 00:42:32,359
want the 40-hour version. Other times, the designs have been approved

00:42:32,359 --> 00:42:36,970
by five levels of management before we're even hired, and then we have to take the time

00:42:36,970 --> 00:42:41,750
and reverse engineer the designs, and that is unfortunately something we have a great

00:42:41,750 --> 00:42:45,470
deal of experience in, but that would be a totally different talk, and I'm not even the

00:42:45,470 --> 00:42:49,039
best person to give that talk. A lot of it comes down to looking through

00:42:49,039 --> 00:42:54,349
the designs, finding the commonalities, and saying, "All right. This thing and this thing

00:42:54,349 --> 00:43:01,349
look almost the same. Let's assume they're the same, and that's the same view mode."

00:43:02,619 --> 00:43:06,440
Depending on the design, that could be fairly simple to do, it could be really hard to do.

00:43:06,440 --> 00:43:11,769
It really varies widely. We had a project where we were given five

00:43:11,769 --> 00:43:18,769
or seven designs, and the themers on the project took maybe four days to reverse engineer all

00:43:19,309 --> 00:43:22,490
of that into: All right, what are the design components we're going to have?

00:43:22,490 --> 00:43:27,700
We had another client that dropped 180 PDFs on us.

00:43:27,700 --> 00:43:32,099
It took a lot longer than four days to figure out what to do with that.

00:43:32,099 --> 00:43:35,460
I wish I had a magic bullet for that one. The only magic bullet is work with the design

00:43:35,460 --> 00:43:42,460
team from the beginning. -A quick question...

00:43:42,490 --> 00:43:49,490
-Oh, microphone, microphone. -Have you found the use of living style guides

00:43:50,329 --> 00:43:57,329
a part of this method, a part of this workflow? -Living style guides. We are using those more

00:43:57,980 --> 00:44:00,630
and more. -Like the tiles thing and...

00:44:00,630 --> 00:44:05,250
-Yeah, style tiles and stuff like that. That's not a formal part of our process, but

00:44:05,250 --> 00:44:08,680
we have used those at various times. Again, it depends on whether we're doing our own

00:44:08,680 --> 00:44:15,269
design or building someone else's. We were actually experimenting recently with

00:44:15,269 --> 00:44:21,980
using a static site generator as a prototyping tool, and now that Drupal 8 will be using

00:44:21,980 --> 00:44:27,920
Twig, there are tools like Sculpin. That is a static site generator for PHP that also

00:44:27,920 --> 00:44:31,210
uses Twig. We we're actually working right now to try

00:44:31,210 --> 00:44:36,109
and come up with a set of Twig templates for Scupin so we can do a lot of that prototyping

00:44:36,109 --> 00:44:38,660
in the actual code that will turn into the Drupal site.

00:44:38,660 --> 00:44:43,980
That's something that is still fairly new. We're still working on that, but it looks

00:44:43,980 --> 00:44:48,930
promising. Hopefully in six to eight months we'll be

00:44:48,930 --> 00:44:55,930
able to present on that. -Hi. Code branching is a very important part

00:45:01,359 --> 00:45:08,359
of our development process. How would you integrate branching with this methodology?

00:45:09,390 --> 00:45:14,509
-Branching as in different branches for different parts of the content build out?

00:45:14,509 --> 00:45:18,359
-Yeah, exactly. Yeah. -My honest recommendation for that: You start

00:45:18,359 --> 00:45:24,440
the project when you spin up the Drupal site, you do all of the build at once for everything

00:45:24,440 --> 00:45:30,480
you can just button-push coming out of the build spec at once, dump it all into Features,

00:45:30,480 --> 00:45:36,539
and that's sprint one. If you do this kind of planned out approach,

00:45:36,539 --> 00:45:41,490
I recommend don't do Agile for building out the content types.

00:45:41,490 --> 00:45:43,990
Don't wait and build out content types over time.

00:45:43,990 --> 00:45:47,819
Just build them all at once. Drupal likes it when you do that because you

00:45:47,819 --> 00:45:51,740
can think it through and realize, "Oh, this field's here. I can share with this content

00:45:51,740 --> 00:45:57,529
here, and then that will make it easier to build views out of them, for example."

00:45:57,529 --> 00:46:03,299
We don't always do this, but my recommendation is... The last Drupal project that I was on

00:46:03,299 --> 00:46:09,589
from the beginning, our deliverable at the end of sprint one was the content model and

00:46:09,589 --> 00:46:15,259
a fully built site with all the buttons pushed, all the views built, all the panels laid out,

00:46:15,259 --> 00:46:21,130
all the content types defined with some dummy content using Bartik.

00:46:21,130 --> 00:46:24,380
Our front end team was working on the theme separately, but our actual deliverable was

00:46:24,380 --> 00:46:29,640
just we did the site build, and then you can iterate from there and theme it, tweak the

00:46:29,640 --> 00:46:36,640
views, tweak your panel layouts and so forth. Always, always, always dump it to Features,

00:46:36,890 --> 00:46:43,359
which also means one person dumps to Features because Features doesn't like it when multiple

00:46:43,359 --> 00:46:46,490
people edit the same thing at the same time in different branches.

00:46:46,490 --> 00:46:51,789
It really doesn't like that. The actual solution to make that better: There's

00:46:51,789 --> 00:46:55,750
a talk in here earlier on the Drupal 8 configuration system.

00:46:55,750 --> 00:46:57,990
I'll be talking about it tomorrow during the keynote as well.

00:46:57,990 --> 00:47:03,319
That's the real answer, is to use that. For now, do the whole build at once, use Features

00:47:03,319 --> 00:47:08,509
for everything where possible, and if you need to modify a feature, only one person

00:47:08,509 --> 00:47:15,509
touches them at a time. -Great talk. Not to derail it too far, but

00:47:18,359 --> 00:47:22,730
no mention of UX in this design process, so if you could address that, or what do you

00:47:22,730 --> 00:47:28,789
guys do, or anything? -I skipped over why you would want to lay

00:47:28,789 --> 00:47:34,740
out an illustrated list in a certain way. That's where the UX comes in.

00:47:34,740 --> 00:47:39,779
What different styles do you want to have? Should we put one big story on the front page

00:47:39,779 --> 00:47:44,849
or 50 small stories? That's part of the UX.

00:47:44,849 --> 00:47:48,130
That's a hardcore design topic, so I'm not going to get into that too much.

00:47:48,130 --> 00:47:54,339
I don't actually work in that field anymore. I used to, but I haven't in a long time.

00:47:54,339 --> 00:47:59,230
I'm skipping over a lot here about the designers doing the kind of UX thinking and, "All right,

00:47:59,230 --> 00:48:03,079
we've got these story objects. How do users want to use them?"

00:48:03,079 --> 00:48:06,799
Do they want to see short versions? Do they want to see long versions?

00:48:06,799 --> 00:48:11,619
Are we going to have two different versions of the title, a short title and a long title?

00:48:11,619 --> 00:48:16,799
Maybe. In some cases you will, and then in your list

00:48:16,799 --> 00:48:21,130
versions you'll use a short title, and on the page itself, you'll use the long title.

00:48:21,130 --> 00:48:25,109
Completely legitimate thing to do if that fits your usability.

00:48:25,109 --> 00:48:29,869
Mostly here I'm looking at the components that come out of that process and how you're

00:48:29,869 --> 00:48:35,069
going to assemble those, but absolutely thinking through why we want a given design component,

00:48:35,069 --> 00:48:40,710
what users are going to get out of it is a prerequisite for the how that I'm talking about

00:48:40,710 --> 00:48:43,589
here. Any other questions?

00:48:43,589 --> 00:48:50,589
-I speak Spanish. I will try to speak good English.

00:48:50,809 --> 00:48:57,809
-I think I have a translation here. Let me see if it will work.

00:48:57,809 --> 00:48:59,809
-Okay. [Spanish]

00:49:20,880 --> 00:49:27,849
-The translating team is really good.

00:49:27,849 --> 00:49:33,240
So the question for the English speakers in the room is: How long does this take and what

00:49:33,240 --> 00:49:39,059
does it cost? Basically. That can vary widely.

00:49:39,059 --> 00:49:46,059
If we start working on a design, and the client wants to change things eight times, it will

00:49:46,569 --> 00:49:52,509
take longer. If they have very specific requirements around

00:49:52,509 --> 00:49:56,690
five different people have to sign off on it, it will take longer.

00:49:56,690 --> 00:50:02,990
If they have a content model that makes sense from the get-go, it can go fairly fast.

00:50:02,990 --> 00:50:09,990
I would say that overall at Palantir our projects tend to last three to six months once contract

00:50:10,769 --> 00:50:16,839
is signed. That can vary widely depending on if we're

00:50:16,839 --> 00:50:19,839
doing discovery, whether or not we're doing design.

00:50:19,839 --> 00:50:24,230
If we're doing discovery and design, and the client doesn't actually know what they want,

00:50:24,230 --> 00:50:29,579
that can be six months on its own or it could be a month and a half if the client is responsive.

00:50:29,579 --> 00:50:33,589
So it's really hard to make a general statement about that.

00:50:33,589 --> 00:50:38,920
As far as cost, I don't have a breakdown about what this part of a project would cost, but

00:50:38,920 --> 00:50:45,779
I will say it's cheaper than trying to shoehorn a bad design or non-systemic design into Drupal

00:50:45,779 --> 00:50:50,609
at the last minute. It saves you a lot of time and a lot of aggravation

00:50:50,609 --> 00:50:55,920
in the second half of the project to do this kind of up-front thinking.

00:50:55,920 --> 00:50:59,650
Even if the design is weird and doesn't really belong in Drupal, do this kind of thinking

00:50:59,650 --> 00:51:05,809
up front, and you can make it work, and I have had designs that I look at like, "Why

00:51:05,809 --> 00:51:10,289
are you even using Drupal in the first place?" But by using this kind of process, we can

00:51:10,289 --> 00:51:14,220
make it work and no one had to stay in the office until 9 o'clock.

00:51:14,220 --> 00:51:21,220
I can't give an exact answer, but on the whole, doing it this way saves money over not doing

00:51:21,349 --> 00:51:26,369
it this way. Over here.

00:51:37,040 --> 00:51:44,040
A couple over this side. -Hello, Larry. I am the menu man, do you remember?

00:51:50,069 --> 00:51:56,509
Yesterday. -Okay. I didn't talk about menus here at all,

00:51:56,509 --> 00:52:03,509
actually. I know, I know. -My question is: Do you recommend, these things

00:52:04,970 --> 00:52:11,970
you said, is it better to use the template 100% or is there a kind of percent with templates

00:52:19,349 --> 00:52:26,349
or design from zero from the paper on the design tools, illustrator and Photoshop, for example? 

00:52:27,289 --> 00:52:34,289
-When you say templates, do you mean having a stock form of a page, like having a...

00:52:35,970 --> 00:52:42,930
-Yes. Well, for the client. Is it better for the time you can work. Do you recommend that

00:52:42,930 --> 00:52:48,890
100%? -That really depends on the client.

00:52:48,890 --> 00:52:53,730
Most of the clients that we work with at Palantir have a very custom design, so we don't really

00:52:53,730 --> 00:52:59,079
have much in the way of pre-built templates that we will always go to unless you tell

00:52:59,079 --> 00:53:02,359
us otherwise. That's because we work mostly with large institutional

00:53:02,359 --> 00:53:08,400
non-profits: universities, museums, hospitals. If you're dealing mostly with small businesses,

00:53:08,400 --> 00:53:14,499
then having a set of stock templates you can pour design objects into can be a big time

00:53:14,499 --> 00:53:21,499
saver, and in fact, panels lets you define additional templates, as they call them layout

00:53:21,980 --> 00:53:27,730
plug-ins, which are really just a template and attached CSS.

00:53:27,730 --> 00:53:32,779
If you have a collection of those pre-built, you can use those.

00:53:32,779 --> 00:53:35,819
If you control the design, you can steer towards that to save money.

00:53:35,819 --> 00:53:42,819
-What about the client for... Sometimes they want an original design. What is the difference

00:53:47,440 --> 00:53:54,440
or the advantage or disadvantage for original design with Drupal?

00:53:57,410 --> 00:54:04,059
-That also can vary. You can do something that has a very unique font and color treatment

00:54:04,059 --> 00:54:09,490
but uses a very traditional layout. Most sites, honestly, most of the pages are

00:54:09,490 --> 00:54:13,859
a blob of content in the middle, stuff on the sides, stuff on the top.

00:54:13,859 --> 00:54:18,720
That is most sites. For example, we use the Zen Grids theming

00:54:18,720 --> 00:54:25,720
system, the Zen-based theme for Drupal, and it comes with a bunch of panels, plug-ins

00:54:27,829 --> 00:54:31,809
that are fully responsive out of the box. We usually go to those first.

00:54:31,809 --> 00:54:38,109
We can write new ones, if not, but very often it will be enough, and then by focusing on

00:54:38,109 --> 00:54:45,109
the component and making the component look good for that client and make the font and

00:54:45,289 --> 00:54:49,450
color treatment unique to that client, it's still content in the middle and stuff on the

00:54:49,450 --> 00:54:51,839
side. It's still most pages, and so we can save

00:54:51,839 --> 00:54:54,839
time and money that way. It's really hard to give a generic answer,

00:54:54,839 --> 00:54:59,869
since it can vary so widely by the client. Some are okay with just pulling a commercial

00:54:59,869 --> 00:55:02,819
theme off the shelf from companies that sell them.

00:55:02,819 --> 00:55:09,819
Ours usually want a very custom design, so that's what I'm used to.

00:55:09,999 --> 00:55:15,489
-Thank you very much. -I think this is our last question.

00:55:15,489 --> 00:55:21,019
-Hello, Larry. From your experience, what do you think Drupal is missing from their

00:55:21,019 --> 00:55:28,019
design system. I mean, what is Drupal lacking when you do some system like this.

00:55:29,980 --> 00:55:35,480
-I'm not sure I follow the question. -From your perspective, your experience...

00:55:35,480 --> 00:55:40,079
-What could Drupal do better? -What could Drupal do better?

00:55:40,079 --> 00:55:47,079
-Okay. -I will list two things. One is be much more

00:55:47,670 --> 00:55:53,499
explicit about its support for these tools. Image styles and view modes are conceptually

00:55:53,499 --> 00:55:58,249
the exact same thing, but we don't talk about them as the same thing.

00:55:58,249 --> 00:56:04,430
We don't talk about design systems. We don't explicitly build for these tools.

00:56:04,430 --> 00:56:10,309
This is kind of an emergent design in Drupal. It's not something that anyone's sat down

00:56:10,309 --> 00:56:13,599
and deliberately built a design system friendly CMS.

00:56:13,599 --> 00:56:20,599
It just kind of evolved that way. Starting with what's consciously and explicitly

00:56:20,900 --> 00:56:26,410
acknowledged, this approach and push view modes more.

00:56:26,410 --> 00:56:33,049
Push design components more. Unify the terminology between image styles

00:56:33,049 --> 00:56:36,869
and view modes and things like that I think would help.

00:56:36,869 --> 00:56:40,640
The other, and we tried to do this for Drupal 8. We didn't quite make it, but it will be

00:56:40,640 --> 00:56:45,130
in contrib, is build panels directly into Core.

00:56:45,130 --> 00:56:50,180
One of the things that makes panels annoying and difficult to use in Drupal 7 is it hacks

00:56:50,180 --> 00:56:55,440
around Core's internal design. The internal design in Drupal 8 has changed

00:56:55,440 --> 00:57:00,319
dramatically, in a very large part to try and make it easier to do what panels does.

00:57:00,319 --> 00:57:02,710
We did not get as far with that as I would have liked.

00:57:02,710 --> 00:57:08,809
There are still a lot of pieces of the way Drupal works internally that don't quite fit

00:57:08,809 --> 00:57:14,670
this model, but can be bent to that model. I would like to see us try and just make this

00:57:14,670 --> 00:57:21,130
approach of design components pulled into a template explicit and a very deliberate

00:57:21,130 --> 00:57:24,529
part of the architecture. Right now it's not as deliberate as I think

00:57:24,529 --> 00:57:28,950
it should be, but that's for 8.1 or Drupal 9.

00:57:28,950 --> 00:57:31,909

YouTube URL: https://www.youtube.com/watch?v=7-BZTvFXETg


