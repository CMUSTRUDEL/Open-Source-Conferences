Title: DrupalCon Latin America 2015: I Want it All and I Want it Now: Configuration Management and CI
Publication date: 2015-02-11
Playlist: DrupalCon Latin America - Feb 2015
Description: 
	Speakers: dobrzyns
How fast can you get all the changes to production? Theoretically, in only the time necessary to deploy the code. How often though do pushes turn into nail biting, hair pulling, obscenity screaming, hours-long events? How often does one hear, “But it works on my machine!” Nail biting, hair pulling, hour-long pushes, be gone! Let the excuse “it worked on my machine” ring no more!

It takes time to develop the tools for configuration management and CI. Switching midstream, especially for a busy development shop is hard. Let Promet (through their Build Manager) share their experiences, the tools they use, and the open source tools they have developed -- all to make development and deployments easier for you!

This session will cover:

Why configuration management and CI matter (and make your life easier)
Automated testing
How to get the process for change rolling
Tools for configuration management and CI
Intended Audience:

Managers
Developers
DevOpsers
Captions: 
	00:00:01,290 --> 00:00:07,819
Hola. Me llamo Doug. Hablo un poquito Español. So that's about the extent you'll hear of

00:00:07,819 --> 00:00:13,429
it in this presentation. This is "I Want it All and I Want It Now:

00:00:13,429 --> 00:00:17,450
Configuration Management and CI." If this isn't what you wanted, you're stuck

00:00:17,450 --> 00:00:20,860
here now because I will watch you and glare at you as you leave.

00:00:20,860 --> 00:00:25,860
No, I won't actually, so if you want to leave... Hopefully you're in the right spot.

00:00:25,860 --> 00:00:32,020
I'll go ahead and start with a little bit about myself.

00:00:32,020 --> 00:00:38,120
Like I said, I'm Doug Dobrzynski. I am build manager and a Drupal developer

00:00:38,120 --> 00:00:43,220
at Promet Source. We're based out of Chicago, Illinois in the

00:00:43,220 --> 00:00:48,670
United States. In the past, I actually got started with Drupal

00:00:48,670 --> 00:00:55,670
at the university I attended where I actually became the student manager of the web help

00:00:56,670 --> 00:01:03,670
desk, taking care of hiring students, ticketing, managing all that allocation, the workflow.

00:01:04,320 --> 00:01:10,140
It started out with me begging for help because I alone as a student could not be the web

00:01:10,140 --> 00:01:17,140
help desk, growing it to, at one point, having eight other students working under me.

00:01:17,250 --> 00:01:21,680
I've actually made websites, though, since fifth grade.

00:01:21,680 --> 00:01:28,680
Although you might think I major in CS, computer science, I actually was a history major and

00:01:29,110 --> 00:01:34,409
a Russian, Central, and Easter European studies concentration, so it goes to show there are

00:01:34,409 --> 00:01:41,409
many paths to technology and Drupal, and it's more about passion and where you want to go.

00:01:42,750 --> 00:01:48,119
I wanted to get a little bit of an idea of who you are first as an audience.

00:01:48,119 --> 00:01:53,600
How many of you are developers? So most of you.

00:01:53,600 --> 00:01:59,990
How many of you are sys admins? So there's some overlap of roles.

00:01:59,990 --> 00:02:06,990
How many are project managers? Some more overlap, not uncommon.

00:02:07,770 --> 00:02:12,900
How many are upper management or are in more leadership roles?

00:02:12,900 --> 00:02:18,930
Several more as well, so a fairly good mix with a lot of overlap, which will be very

00:02:18,930 --> 00:02:23,379
good, I think you'll find. So I wanted to start by saying, "Why does

00:02:23,379 --> 00:02:30,230
this topic even matter?" Why is configuration management and CI important?

00:02:30,230 --> 00:02:36,409
How many have played the "What's on staging? What's on production? Who knows?" game?

00:02:36,409 --> 00:02:40,909
How many of you have been in that situation, trying to figure out what's on production

00:02:40,909 --> 00:02:45,040
versus staging versus in development? So several.

00:02:45,040 --> 00:02:49,029
How many have had times where you've had to play deployment roulette?

00:02:49,029 --> 00:02:53,680
Oh, it worked this time in production. It worked this time. Oh, this deployment blew

00:02:53,680 --> 00:02:57,540
up. Any of you experiencing that?

00:02:57,580 --> 00:03:06,160
A couple more as well. How many have had or heard or said, "but it

00:03:06,480 --> 00:03:13,400
worked on my machine"? So that's a lot more common.

00:03:13,400 --> 00:03:20,400
And how many have played the "well, it was fixed at one point" game?

00:03:21,209 --> 00:03:25,689
So several more now, I think. Throughout those most, if not all, of your

00:03:25,689 --> 00:03:28,859
hands went up. This is why this matters.

00:03:28,859 --> 00:03:35,069
This is why configuration and CI matters, to help deal and hopefully alleviate these

00:03:35,069 --> 00:03:42,069
problems or, at the very least, reduce them. I want to get started with a little bit more

00:03:42,709 --> 00:03:49,709
theory to think about what it even is, so let's start with configuration management.

00:03:52,299 --> 00:03:59,299
Here's one definition: "Configuration management is a critical cornerstone of IT automation,

00:03:59,569 --> 00:04:06,290
providing tools that allow you to centrally manage the packages, configuration files,

00:04:06,290 --> 00:04:12,430
process state, firewall rules and other settings that equip servers to do their assigned jobs."

00:04:16,480 --> 00:04:23,450
"Configuration management is the management of configuration items, which are the things

00:04:23,450 --> 00:04:30,030
that you care about, the things that are essential for delivering an automated business service."

00:04:35,140 --> 00:04:42,660
"Configuration management is unique identification, controlled storage, change control, and status

00:04:42,720 --> 00:04:48,720
reporting of selected intermediate work products, product components, and products during the

00:04:48,720 --> 00:04:58,860
life of a system." The IEEE Institute of Electrical and Electronics

00:04:58,940 --> 00:05:05,940
Engineers way back in 1987 in their guide to software configuration management actually

00:05:06,580 --> 00:05:13,580
included these four components: identification, control, status accounting, and audit review.

00:05:15,100 --> 00:05:23,860
So this isn't a new concept. "Software configuration management (SCM, or

00:05:24,100 --> 00:05:32,020
just plain CM, configuration management) is any organizational framework--that is, a discipline--for

00:05:32,790 --> 00:05:38,350
managing the evolution of computer systems through all stages of systems development."

00:05:38,350 --> 00:05:42,790
Okay, who's confused? Anyone in here confused, because I am and

00:05:42,790 --> 00:05:49,080
I'm supposed to be talking about this. As you can see, there is some debate and variation

00:05:49,080 --> 00:05:52,970
over exactly what configuration management is.

00:05:52,970 --> 00:05:58,360
If you decide to take on configuration management as a company, this is something that you will

00:05:58,360 --> 00:06:02,330
have to think about. What does configuration management mean to

00:06:02,330 --> 00:06:06,090
us? Come to an agreed upon definition so that

00:06:06,090 --> 00:06:12,670
you're all talking about the same thing, and maybe identify certain parts of it that are

00:06:12,670 --> 00:06:18,970
important, or more important, to your business aspect.

00:06:18,970 --> 00:06:25,380
For our intents and purposes, I'm going to define it as setup of the infrastructure used

00:06:25,380 --> 00:06:31,310
in order to get your software from the beginning, that is from programmers and developers, to

00:06:31,310 --> 00:06:38,310
the end, that is the customers. I think it's really important in there to

00:06:39,390 --> 00:06:45,870
define it not as just the infrastructure setup, but why are you setting up that infrastructure?

00:06:45,870 --> 00:06:50,300
What's your ultimate goal so that you don't forget where you're going and are blindly

00:06:50,300 --> 00:06:55,580
going down a path and then say, "Oh, maybe this isn't exactly what we wanted"?

00:06:55,580 --> 00:07:00,940
It's always good to keep that end-point in mind, that you need to deliver a product,

00:07:00,940 --> 00:07:06,680
that developers may have pieces of the code, and somehow you need to get that together

00:07:06,680 --> 00:07:13,680
and out to the client and be able to have that consistent.

00:07:15,000 --> 00:07:20,990
Why should I even adopt CM? The beginning questions where everyone almost

00:07:20,990 --> 00:07:25,930
ended up raising their hands, thinking about those scenarios, are part of the reason.

00:07:25,930 --> 00:07:32,740
Puppet Labs actually outlines three reasons for CM.

00:07:32,740 --> 00:07:37,750
Not automating configuration management causes pain.

00:07:37,750 --> 00:07:43,250
So if you look at this as setting up servers, if someone's going in and manually setting

00:07:43,250 --> 00:07:48,340
up your servers, all your VMs, it's going to take time.

00:07:48,340 --> 00:07:55,340
They'll probably forget something. If they're supposed to set up five servers by tomorrow,

00:07:55,360 --> 00:08:01,750
chances are the developers or the client is going to go to use that server the next day

00:08:01,750 --> 00:08:06,430
and something will be missing. Something will not be working.

00:08:06,430 --> 00:08:13,430
It might be, "Oh, we forgot to set up DNS on this. Oh, the package installs actually

00:08:13,639 --> 00:08:19,710
failed," or "Oh, we forgot a package." Then you have to go back. If it's gone to

00:08:19,710 --> 00:08:25,650
your client, and you didn't even catch that, that's embarrassing. Your client's not going

00:08:25,650 --> 00:08:30,130
to be happy. It's frustrating for developers who say, "Okay,

00:08:30,130 --> 00:08:35,569
here's all the work. Let's push this out to a QA server," and now it doesn't work.

00:08:35,569 --> 00:08:39,110
They can't push it out. Now QA's delayed.

00:08:39,110 --> 00:08:43,819
The project manager's probably going to start worrying and say, "Oh, we have this much time

00:08:43,819 --> 00:08:49,730
to do QA, but we don't have somewhere to QA in it. When is this going to happen now?"

00:08:49,730 --> 00:08:55,589
Relatedly, everyone benefits from automated configuration manager.

00:08:55,589 --> 00:08:59,040
The clients don't go to a server and find errors.

00:08:59,040 --> 00:09:05,459
If you're setting up a server for the client's technical person to use, they don't go in

00:09:05,459 --> 00:09:11,449
then and find issues with it. Your developers are able to push more consistently

00:09:11,449 --> 00:09:15,449
without issues. QA can get it somewhere where they can actually

00:09:15,449 --> 00:09:20,009
QA. It makes people happier, and in that process,

00:09:20,009 --> 00:09:25,370
it saves time and gives you time to do other things that you want to do.

00:09:25,370 --> 00:09:32,370
Now you can work on improvements and innovations. Now what maybe took hours or maybe even days

00:09:32,790 --> 00:09:38,350
to set up X servers, you can automate, get done in half a day.

00:09:38,350 --> 00:09:44,920
Now you have time to say, "Oh, what else can we do? What can we do to improve our company?

00:09:44,920 --> 00:09:50,110
What can we do to be even better?" And you can deliver things faster to your

00:09:50,110 --> 00:09:56,059
client. What are some tools out there?

00:09:56,059 --> 00:10:03,059
I'm not going to go into a lot of depth in this, but Puppet, Chef, Ansible, and SaltStack

00:10:03,399 --> 00:10:07,339
are probably the four that you'll hear most often.

00:10:07,339 --> 00:10:14,029
I tried to find some metrics in relation in the Drupal community to how these were used.

00:10:14,029 --> 00:10:21,029
I didn't have much luck, so I searched any community, just what are some metrics on the

00:10:21,439 --> 00:10:25,019
use of these? Which are most popular?

00:10:25,019 --> 00:10:31,059
The bottom line is metrics are hard. I won't go into details on how it's measured,

00:10:31,059 --> 00:10:33,019
you know. Do you measure downloads?

00:10:33,019 --> 00:10:37,269
Do you measure installs? How do you measure that?

00:10:37,269 --> 00:10:41,040
Do you trust people to report? How do you get enough people to report to

00:10:41,040 --> 00:10:46,240
get a good picture? There's an article that I'll link to, a blog

00:10:46,240 --> 00:10:53,240
post on some of these challenges of getting metrics, which configuration management systems

00:10:53,499 --> 00:10:56,920
are out there. But some of the four ones that you'll want

00:10:56,920 --> 00:11:03,860
to look at: Puppet, Chef, Ansible, SaltStack. I can say from anecdotal experience, from

00:11:03,860 --> 00:11:10,389
what I've seen in talking to people within the Drupal community, Puppet and Chef are

00:11:10,389 --> 00:11:17,389
probably the most common. So then it becomes a question of which do

00:11:17,809 --> 00:11:22,680
you use? These are questions that have been asked before,

00:11:22,680 --> 00:11:26,649
and there are some pretty good answers out there, so I'm going to just share a couple

00:11:26,649 --> 00:11:32,670
of them. This comes from a blog post on just Puppet

00:11:32,670 --> 00:11:36,629
versus Chef. If you want to get into some really interesting

00:11:36,629 --> 00:11:43,209
debate, just Google "Puppet versus Chef," and you can go down a mine hole of information

00:11:43,209 --> 00:11:50,209
and comments, but one of them ultimately concluded: "If you have time to try them both, then do.

00:11:50,360 --> 00:11:56,949
It's a bit of a case of horses for courses and you may be surprised. Doing one is light

00:11:56,949 --> 00:12:03,199
years better than doing neither, so if you're agonizing over the decision, just stop, toss

00:12:03,199 --> 00:12:10,199
a coin, and get going today." Bottom line: Something is better than nothing.

00:12:10,619 --> 00:12:20,439
Similarly, in a book "Taste Test" that compares all four that I mentioned, Matt Jaynes says,

00:12:20,749 --> 00:12:27,550
"Just using any of these tools is a huge win. Having scripted, documented, replicatable

00:12:27,550 --> 00:12:33,559
servers can speed up your development and operations dramatically."

00:12:33,559 --> 00:12:37,079
Ideally you would want to pick probably a couple.

00:12:37,079 --> 00:12:41,480
Try them out in your situation. Try them out on your projects.

00:12:41,480 --> 00:12:46,990
Set a stake. "We're going to implement this to this state

00:12:46,990 --> 00:12:53,990
on this project by this day using no more than this hours" and see how far you can get

00:12:54,410 --> 00:12:59,300
with that. You may get there; you may not, but it'll

00:12:59,300 --> 00:13:03,860
give you a good idea. It may be, "This isn't the right tool for

00:13:03,860 --> 00:13:08,920
us." It might be, "Maybe this is more than we can

00:13:08,920 --> 00:13:14,029
chew off in this time." It might be, "Maybe we don't have the resources

00:13:14,029 --> 00:13:21,029
to do this." Moving on then from CI, starting again back

00:13:21,649 --> 00:13:28,649
with the theory: What the heck is CI even? When talking about CI, of course you have

00:13:28,790 --> 00:13:35,790
to look at Martin Fowler's blog post on CI. So Martin Fowler defines CI as "a software

00:13:36,850 --> 00:13:43,509
development practice, where members of a team integrate their work frequently. Usually each

00:13:43,509 --> 00:13:50,509
person integrates at least daily, leading to multiple integrations per day. Each integration

00:13:51,179 --> 00:13:58,179
is verified by an automated build (including test) to detect integration errors as quickly

00:13:58,600 --> 00:14:05,139
as possible." Let's go ahead and break that down a little

00:14:05,139 --> 00:14:11,809
bit more. There are only four aspects required for CI:

00:14:11,809 --> 00:14:18,809
version control, build script, some sort of feedback mechanism, and a process for integrating

00:14:19,079 --> 00:14:23,929
source code. Obviously you're going to want your items,

00:14:23,929 --> 00:14:30,929
your configuration, your development into a version control repository, a single version

00:14:31,439 --> 00:14:37,639
control repository. I want to add, I was explaining this to someone.

00:14:37,639 --> 00:14:40,519
They're like, "Yeah, we have that first step met."

00:14:40,519 --> 00:14:45,050
I'm like, "Okay. Point me to your version control repository."

00:14:45,050 --> 00:14:49,730
And their like, "Well, it's on every developer's computer."

00:14:49,730 --> 00:14:58,850
Having a single version control repository isn't the same as using a version control system individually.

00:15:00,179 --> 00:15:05,379
Using it individually, every single developer could track changes they made, and they could

00:15:05,379 --> 00:15:10,610
say, "Yeah, I made these changes. I made these changes. I made these changes," but there's

00:15:10,610 --> 00:15:16,699
no way to track what's being merged, and at that point, the project managers, when they're

00:15:16,699 --> 00:15:22,569
trying to get a picture of what's done or what changed, or you're trying to debug what

00:15:22,569 --> 00:15:27,929
might have happened, what are the changes in this time frame, it's going to take a lot

00:15:27,929 --> 00:15:34,929
of time to get your developers to report that. You might run into, then, "Well, I'll leave

00:15:35,199 --> 00:15:40,519
out this one detail because it doesn't seem important and it's embarrassing," and it might

00:15:40,519 --> 00:15:46,389
turn out that's the one detail you needed. So you want to have a single version repository,

00:15:46,389 --> 00:15:49,869
the master where you know this is where everything's going.

00:15:49,869 --> 00:15:56,639
This is the state that we can use. You're going to want to have a build script,

00:15:56,639 --> 00:16:03,239
some way to create your system. In this case, once you have a server set up,

00:16:03,239 --> 00:16:09,980
you're going to want to get Drupal, get it installed, get the right modules enabled.

00:16:09,980 --> 00:16:14,239
If you're maybe doing updates and changes, you're going to want to get all those changes

00:16:14,239 --> 00:16:18,160
applied, and you're going to want to script that.

00:16:18,160 --> 00:16:24,239
You don't want to have to go in and say, "Okay, I need this change, this change, this change.

00:16:24,239 --> 00:16:30,920
Oh, this change requires I go into the UI and change all of these pieces."

00:16:30,920 --> 00:16:36,009
You're going to want to automate that so that, A., you don't miss pieces. It's more reliable

00:16:36,009 --> 00:16:43,009
that way, and, B., it saves time. You have that automation once. You run it.

00:16:45,429 --> 00:16:48,850
Feedback mechanism. When you're doing tests, you want some way

00:16:48,850 --> 00:16:54,639
to know a test failed. When you integrate the code, say, whether

00:16:54,940 --> 00:17:03,480
it's on after GitHub, or if you have an integration server, you want to know when those are failing.

00:17:04,110 --> 00:17:10,990
So someone's code that they're trying to merge in has issues with code that already exists,

00:17:10,990 --> 00:17:17,089
you want to know when that's going to fail. Ideally you want to send that out in some

00:17:17,089 --> 00:17:24,089
way, whether it be e-mail, a text message, a notification, in a chat, you'll want to

00:17:24,390 --> 00:17:30,440
think about what are the best mechanisms to get this out and who do I want to get this

00:17:30,440 --> 00:17:34,590
out to? One thing to be really careful in your feedback

00:17:34,590 --> 00:17:41,590
mechanisms is information overload. How many of you get GitHub notifications for

00:17:42,210 --> 00:17:48,520
every single project or notifications for every single ticket updated, even if you were

00:17:48,520 --> 00:17:54,210
the one who made that change? What happens when you get those e-mail notifications

00:17:54,210 --> 00:17:59,740
and you just see a ton of them? You don't see them. They disappear.

00:17:59,740 --> 00:18:06,740
So you want to find the right amount. It's probably not a good idea to send... If

00:18:08,040 --> 00:18:15,040
tests are failing all the time for every individual developer's PRs, you might not want to send

00:18:16,730 --> 00:18:21,950
that out to all developers because they're going to start saying, "Not me, not me, not

00:18:21,950 --> 00:18:27,150
me, not me. I don't need to pay attention. There's one there that I did see that was

00:18:27,150 --> 00:18:31,150
me. There's another one that was me, but none of the first ones were me, so I'm not going

00:18:31,150 --> 00:18:35,670
to pay attention." You're defeating your purpose of getting feedback

00:18:35,670 --> 00:18:42,010
fast. You want that process for integrating your

00:18:42,010 --> 00:18:46,910
code, making sure there aren't conflicting changes, making sure that when you put all

00:18:46,910 --> 00:18:53,540
of the different pieces together, they fit and don't break.

00:18:53,540 --> 00:19:00,200
Martin Fowler goes into a lot more depth into some practices.

00:19:00,200 --> 00:19:07,200
These entail the pieces that I talked about. You'll see a lot of the same items here.

00:19:07,990 --> 00:19:12,390
Like I mentioned, you want that single source repository.

00:19:12,390 --> 00:19:19,390
You want to automate the build, automate tests. You want frequent integration.

00:19:20,030 --> 00:19:26,940
Your developers ideally should be making daily commits and pushing these, and then all those

00:19:26,940 --> 00:19:32,450
commits should be merged together, say, on an integration machine.

00:19:32,450 --> 00:19:39,450
If you're looking at cases where a developer is not committing daily and pushing that,

00:19:39,950 --> 00:19:45,390
that could be one of two things, usually. There's probably an edge case that I'm not

00:19:45,390 --> 00:19:52,390
thinking of, but it's either, A., they're doing a ton of work, and in three days they're

00:19:53,500 --> 00:20:00,500
going to push eight new features, or their tasks are too big.

00:20:02,780 --> 00:20:07,270
They're too big or too complex, and there's some problem there.

00:20:07,270 --> 00:20:10,420
You might need to break it up into a smaller piece.

00:20:10,420 --> 00:20:16,750
It's easier to complete and test a smaller piece, and it might also be that what they're

00:20:16,750 --> 00:20:21,610
running into actually is something that's really complex.

00:20:21,610 --> 00:20:28,610
Maybe it's a bug that could take way more time, and it's raising a red flag, "Hey, this

00:20:30,160 --> 00:20:35,260
probably is going to affect our timeline. We're supposed to have this one piece of functionality

00:20:35,260 --> 00:20:42,260
done, and it's not coming." So if you are expecting daily commits, frequent

00:20:42,980 --> 00:20:49,420
pushes, and all of a sudden those slow down, that's a good sign that something's not right

00:20:49,420 --> 00:20:55,530
and raises these red flags in the project earlier rather than finding out later, "Yeah,

00:20:55,530 --> 00:21:00,810
I'm doing work. Yeah, I'm doing work. So wait, what were you actually doing the past four

00:21:00,810 --> 00:21:07,810
weeks?" which can put project managers and technical leads in a really tough spot.

00:21:09,350 --> 00:21:15,900
Another key item is if the build breaks, fix it immediately.

00:21:15,900 --> 00:21:21,190
If it's an integration where there are multiple people working on the code, it's probably

00:21:21,190 --> 00:21:26,830
good to stop work and get together and resolve that. In fact, you actually should do

00:21:26,830 --> 00:21:30,170
that. You shouldn't continue work while the integration

00:21:30,170 --> 00:21:36,080
build is broken, because that means you're working against something that's broken, and

00:21:36,080 --> 00:21:42,330
when it gets fixed, you may have to go back and change what you implemented, whether it's

00:21:42,330 --> 00:21:49,070
a new feature or a bug fix, or you may break the build again and have to spend more time

00:21:49,070 --> 00:21:52,720
fixing the build. If it's someone who... If you're

00:21:52,720 --> 00:21:59,720
running tests on every PR and it breaks the build, then that person should go back and

00:22:00,610 --> 00:22:05,610
look at their PRC. "What did I do to break the build?"

00:22:05,610 --> 00:22:11,100
The other thing is you'll want to keep the build fast.

00:22:11,100 --> 00:22:16,760
Projects get complex, so you may find that you have to break this up, look at different

00:22:16,760 --> 00:22:23,610
ways, whether it's throwing more resources at it or not running all the tests all the

00:22:23,610 --> 00:22:28,270
time. I was working on a project where we were running

00:22:28,270 --> 00:22:33,480
TravisCI with a bunch of tests, and it was a huge project.

00:22:33,480 --> 00:22:39,890
We were building the site from scratch all the time, so site install plus enable all

00:22:39,890 --> 00:22:46,890
the modules being used, enable all of the feature modules, do a bunch of configuration

00:22:47,390 --> 00:22:54,390
then, and run all the tests, and it got to where it was taking 30 to 40 minutes.

00:22:55,280 --> 00:23:01,200
That's too long for a single person. It's slowing down your rapid feedback time,

00:23:01,200 --> 00:23:07,130
and then you may say, "Okay, I completed this task," and before you can even get it to

00:23:07,130 --> 00:23:14,130
development initially, where someone can take a look at it, you're waiting maybe

00:23:14,310 --> 00:23:21,310
40 minutes for a two-line fix, that maybe you didn't have to run all these tests on

00:23:21,540 --> 00:23:28,540
just the PR. You'll want to work in a clone of production.

00:23:29,000 --> 00:23:35,220
This should be fairly standard practice now. You don't want to work in an environment that's

00:23:35,220 --> 00:23:40,610
not like production. This becomes especially important on staging

00:23:40,610 --> 00:23:45,810
or pre-prod, wherever your clients are looking at it and approving.

00:23:45,810 --> 00:23:50,570
You want that to match production. You don't want to push to production and then

00:23:50,570 --> 00:23:57,570
find out, "Oh, maybe there was this one difference that was important."

00:23:58,660 --> 00:24:04,120
Like I've hit on before, you want reports and transparencies, so ideally you would be

00:24:04,120 --> 00:24:11,120
able to say, "Exactly these changes were pushed to the integration server at this point. These

00:24:11,980 --> 00:24:18,000
are the changes that are on staging right now. These are the differences from this time

00:24:18,000 --> 00:24:25,000
to this time. Here are the tests that are failing. Oh, look. Developer B's tests fail

00:24:25,110 --> 00:24:32,110
every single time. Maybe we should look at this," and it's going to improve your process.

00:24:32,750 --> 00:24:37,700
You can get feedback for helping your developers, improving that.

00:24:37,700 --> 00:24:44,000
You can save time because your project manager doesn't have to come every single day, maybe

00:24:44,000 --> 00:24:51,000
multiple times, and say, "What's on staging? What's on development? What's done?

00:24:52,190 --> 00:24:57,800
What's not done?" And then another key that you'll probably

00:24:57,800 --> 00:25:04,800
see over and over is automate your deployment. Ideally you want to get where you can say

00:25:06,720 --> 00:25:12,290
maybe dev is built automatically when code is merged into the main line. At this

00:25:12,290 --> 00:25:18,430
point it's cut and release, and we say, "Deploy staging with this version."

00:25:18,430 --> 00:25:24,490
Then you can say, "Okay, deploy that version that's on staging to reduction," and the goal

00:25:24,490 --> 00:25:31,490
is to get to a one-step deployment with as much automation as you can.

00:25:34,140 --> 00:25:40,160
So hopefully you should have some answers right now to, "Why should I even adopt CI?"

00:25:40,160 --> 00:25:44,610
It reduces your risks. You catch errors sooner.

00:25:44,610 --> 00:25:49,740
There's less chance of these errors making it to production and your client calling and

00:25:49,740 --> 00:25:56,740
saying, "Why isn't this right?" It also reduces repetitive manual processes.

00:25:57,670 --> 00:26:01,570
This saves time. Your developers can actually be doing what

00:26:01,570 --> 00:26:06,400
they're paid to do rather than running a bunch of commands or doing a bunch of pointing and

00:26:06,400 --> 00:26:10,320
clicking or setting up servers, whatever it may be.

00:26:10,320 --> 00:26:17,320
They can work on other, more valuable tasks. You can generate deployable software at any

00:26:17,740 --> 00:26:23,870
time and any place, so you shouldn't have to wait to get software out.

00:26:23,870 --> 00:26:29,750
You should be able to say, "Okay, this is good to go. We're going to deploy it," obviously

00:26:29,750 --> 00:26:36,750
going through approval channels. You have a lot of QA done ahead of time.

00:26:37,460 --> 00:26:43,720
It enables better project visibility. You know when things are breaking.

00:26:43,720 --> 00:26:50,720
You know when you break things unintentionally. To have one example of project visibility,

00:26:52,730 --> 00:26:59,730
I actually was working on one page, or one specific view, and that was used on a few

00:27:00,850 --> 00:27:07,850
sections of the site. I push it, and all of a sudden, our home page

00:27:08,370 --> 00:27:13,860
tests are breaking. Every single landing page test is breaking.

00:27:13,860 --> 00:27:19,950
This affected one section. This other part shouldn't be breaking.

00:27:19,950 --> 00:27:26,610
If you had QA done, hopefully you would have had a thorough enough manual QA process, if

00:27:26,610 --> 00:27:32,430
you're still doing that, to check other areas of the site, not just what work was being

00:27:32,430 --> 00:27:37,100
done, but this was no time other than to write these tests initially.

00:27:37,100 --> 00:27:41,400
I know everything's breaking. This saved us embarrassment.

00:27:41,400 --> 00:27:46,060
We didn't even get it to development or QA. I saw that I broke the build.

00:27:46,060 --> 00:27:52,650
I went back and looked and said, "Oh, I only used one equal sign instead of two and set

00:27:52,650 --> 00:27:57,840
the view name on every single page." This is an example of something that could

00:27:57,840 --> 00:28:03,300
have been really embarrassing. If this were a hot fix, and we're pushing

00:28:03,300 --> 00:28:07,080
this one thing, you want this to production rapidly,

00:28:07,080 --> 00:28:12,290
you go through QA, your QA person looks at the pages that's on,

00:28:12,290 --> 00:28:16,640
doesn't look at any other pages, you push it for production,

00:28:16,640 --> 00:28:23,640
your client's not going to be very happy if half their site breaks, and that's feedback.

00:28:23,710 --> 00:28:29,650
I get the notification that I broke the build. I go and fix it.

00:28:29,650 --> 00:28:32,740
It's only me. I'm the only one looking at it.

00:28:32,740 --> 00:28:37,680
It saves this time from other people, and I know automatically without having to go

00:28:37,680 --> 00:28:44,680
in QA first, which is something I would say probably not a lot of developers are fans

00:28:44,900 --> 00:28:49,190
of. As that example shows, you can establish greater

00:28:49,190 --> 00:28:54,010
confidence in your software product from your development team. When you have these tests

00:28:54,010 --> 00:29:01,010
in place, you can know, "This didn't break, all these other things that we're testing,

00:29:01,570 --> 00:29:08,350
and we didn't even have to look at this manually." You can say with a much greater chance, "My

00:29:08,350 --> 00:29:15,350
changes aren't going to affect other places or break unintended things."

00:29:17,700 --> 00:29:24,700
What are some tools out there? There are a ton of CI tools out there.

00:29:25,560 --> 00:29:30,350
You can get into continuous delivery and deployment tools.

00:29:30,350 --> 00:29:34,970
These are probably some of the more well-known ones and more used tools.

00:29:34,970 --> 00:29:40,870
There's TravisCI, Jenkins, Bamboo, Hudson, CruiseControl.

00:29:40,870 --> 00:29:47,220
If you want to know even more, I strongly suggest looking at the Wikipedia page.

00:29:47,220 --> 00:29:53,250
They have a fairly good comparison, at least as a starting point, of "these are all the

00:29:53,250 --> 00:30:02,230
tools out there," and it's huge. Now let's take a step back a little.

00:30:02,710 --> 00:30:06,850
You may be asking, "Why did we go through all this theory? Why did we got through all

00:30:06,850 --> 00:30:12,200
this justification? Isn't this supposed to be you telling us how to do it?"

00:30:12,200 --> 00:30:17,780
Yes and no. In a way, I am, because this is what you have

00:30:17,780 --> 00:30:23,240
to go through as a company when you want to start building this culture of configuration

00:30:23,240 --> 00:30:27,900
management and CI. You have to define these aspects.

00:30:27,900 --> 00:30:32,820
Look at all the tools out there. Look at what do we want to accomplish? What's

00:30:32,820 --> 00:30:37,650
all the work it entails? And get people on the same page.

00:30:37,650 --> 00:30:44,290
You have to motivate people. There may be a project manager who's like,

00:30:44,290 --> 00:30:50,130
"Look, yes, that's sounds all nice and fancy and cool and all that jazz, but I need my

00:30:50,130 --> 00:30:56,530
project. We don't have time to do this." And you can go through and give these

00:30:56,530 --> 00:31:03,530
justifications, explain, "This is why it matters." Yes, it may take more time up front. Actually,

00:31:04,640 --> 00:31:09,740
it probably will take more time up front, especially if you haven't done this as a company

00:31:09,740 --> 00:31:16,150
on any projects, but you can look at "here's what it offers."

00:31:16,150 --> 00:31:22,130
I can offer you greater assurance that my code, that my changes didn't break the front

00:31:22,130 --> 00:31:29,130
page, and I can save you time now that the QA wouldn't have to go in and just say, "There's

00:31:29,700 --> 00:31:33,250
no front page," which is a waste of the QA time.

00:31:33,250 --> 00:31:40,130
So you're saving resources on that project. If you haven't noticed, it's a lot more about

00:31:40,130 --> 00:31:47,130
just the tools that you use or maybe the process that your developers implement.

00:31:48,500 --> 00:31:55,500
I've seen cases where they say, "Hey, developer A, this is admin A. Work together. Make CI

00:31:55,750 --> 00:32:00,840
happen." No other company involvement.

00:32:00,840 --> 00:32:04,830
You can probably guess it doesn't always go so well.

00:32:04,830 --> 00:32:09,480
It's really something that you need to build up as a culture and as a practice and get

00:32:09,480 --> 00:32:15,480
everyone on board to know why this is important and to help hold each other accountable and

00:32:15,480 --> 00:32:19,580
help each other. If you have other people working with you

00:32:19,580 --> 00:32:26,580
as well that are supportive, it's a lot better than pounding away at it as a single person

00:32:26,690 --> 00:32:31,880
and saying, "I'm running into this problem. I'm running into this problem. I'm not making

00:32:31,880 --> 00:32:38,880
much progress" or, "I'm doing all this cool stuff and I'm helping, and nobody else cares."

00:32:39,090 --> 00:32:46,090
All of a sudden, that person starts getting unhappy, they become frustrated, and they leave

00:32:46,460 --> 00:32:52,890
Like I just said, in probably the book on

00:32:52,890 --> 00:32:58,090
continuous integration called "Continuous Integration: Improving Software Quality and

00:32:58,090 --> 00:33:03,790
Reducing Risk," CI is not just a technical implementation.

00:33:03,790 --> 00:33:08,490
It is also an organizational and cultural implementation.

00:33:08,490 --> 00:33:15,490
People often resist change, and the best approach for an organization may be to add these automated

00:33:16,030 --> 00:33:27,290
mechanisms to the process piece by piece. This leads into my advice for you, advice

00:33:27,540 --> 00:33:33,309
to think about as you're looking at using configuration management and CI.

00:33:33,309 --> 00:33:40,309
I kept it actually really simple and have found that you can get overwhelmed in a lot

00:33:40,570 --> 00:33:47,570
of it, which is kind of ironic and maybe hypocritical that I threw all this theory at you and probably

00:33:47,630 --> 00:33:53,160
overwhelmed some of you, but the key is start somewhere.

00:33:53,160 --> 00:33:59,670
Look at one piece you can do and say, "Oh, this is something we can do now."

00:33:59,670 --> 00:34:06,670
Hey, we hired this new person who knows Chef. Let's have them use Chef to configure all

00:34:07,020 --> 00:34:13,960
of our servers. Talk about it.

00:34:13,960 --> 00:34:18,570
Get other people involved. Like I've hit on, it's not just about the

00:34:18,570 --> 00:34:22,869
tools that you're using. It's not just about the technical aspects.

00:34:22,869 --> 00:34:29,740
It's about culture and people communicating and building that trust and getting it going

00:34:29,740 --> 00:34:36,740
as a company. It's not just a few people doing CI.

00:34:37,480 --> 00:34:43,990
Make it a priority. This should probably be an obvious one, but

00:34:43,990 --> 00:34:50,990
it's something that takes time and dedication. If you say, "Okay, yeah, we'll use CI," it's

00:34:51,830 --> 00:34:58,070
probably not going to happen. I used "make" very importantly here.

00:34:58,070 --> 00:35:02,420
It's important not just to say, "Yes, this is a priority."

00:35:02,420 --> 00:35:09,420
There's work involved in making it a priority. Maybe you have to take on less work to have

00:35:10,350 --> 00:35:15,170
some more time to implement this. Maybe you bring on another resource.

00:35:15,170 --> 00:35:22,170
You have to take action as well to get this started, get this implemented.

00:35:22,170 --> 00:35:27,850
Making it a priority also means involving other people and getting them the time.

00:35:27,850 --> 00:35:33,350
It's probably not going to go very well if you throw this on one person and say, "You

00:35:33,350 --> 00:35:42,690
have X hours to make this happen." Relatedly, allow time.

00:35:43,580 --> 00:35:49,060
Not just time as in priority for people to do it, but time for this to come.

00:35:49,060 --> 00:35:53,520
Don't expect, you know, that silver magic bullet.

00:35:53,520 --> 00:36:00,270
It's going to not happen at once. You may start making small, incremental improvements,

00:36:00,270 --> 00:36:03,560
so there's a lot to do. There's a lot of things you can go.

00:36:03,560 --> 00:36:10,560
You may look at, "This is where I want to be down the line," and lose sight of what

00:36:10,790 --> 00:36:15,250
you're actually doing. You can say, "I want to be all the way in

00:36:15,250 --> 00:36:21,060
California when it's sunny." If you're aware of Chicago weather, it's snowy,

00:36:21,060 --> 00:36:26,030
and I'm missing the fact that, "Hey, the sidewalks are cleaned now."

00:36:26,030 --> 00:36:33,030
If you don't forget that, it takes time for things to change.

00:36:35,210 --> 00:36:41,470
One way you can get started that Promet's actually worked on is what we've called the

00:36:41,470 --> 00:36:47,619
Drupal 7 framework. It's an easy way to start a Drupal project.

00:36:47,619 --> 00:36:52,610
What we've dubbed the "Promet way," it's by no means the only way.

00:36:52,610 --> 00:36:59,130
It's a way that we've started using. So working locally to get started, you'll

00:36:59,130 --> 00:37:06,130
have to have Composer, but once you have Composer, it is two steps, two commands to get a working

00:37:07,240 --> 00:37:14,240
installation of Drupal. You use Composer, create-project, promet/drupal7-framework

00:37:15,690 --> 00:37:20,580
pointing to the GitHub repo, and then your project name.

00:37:20,580 --> 00:37:27,580
That will get all of Drupal and several modules that are fairly common on every project, including

00:37:29,280 --> 00:37:34,660
Views, items like that. Then you run vagrant up, which, if some of

00:37:34,660 --> 00:37:41,660
you are familiar, we use vagrant to create a VM instance locally to have the site.

00:37:41,790 --> 00:37:50,070
With those two commands, you can have Drupal locally working, and you have several key

00:37:50,430 --> 00:37:55,020
modules you need. There's no need to go download Drupal, get

00:37:55,020 --> 00:38:02,020
a virtual machine, do all of that. I'm going to dive in a bit deeper into several

00:38:03,450 --> 00:38:10,450
pieces that the Drupal 7 framework pulls together. These are all open source tools that we have

00:38:10,840 --> 00:38:17,640
that either exist in the community or we have built on or used.

00:38:17,640 --> 00:38:22,760
We use what we're calling Drupal Tangler. This actually uses Composer to manage your

00:38:22,760 --> 00:38:29,360
dependencies and get the all files in the correct Drupal structure.

00:38:29,360 --> 00:38:34,940
So getting your modules and sites/all/modules, getting your themes and sites/all/themes.

00:38:34,940 --> 00:38:41,940
The nice thing with using Composer... How many have actually used Composer or are familiar?

00:38:42,980 --> 00:38:49,430
For those of you who haven't or have used

00:38:49,430 --> 00:38:54,750
Composer and do code reviews, have you ever had that instance where you're reviewing someone's

00:38:54,750 --> 00:39:01,750
code, and they had to implement some functionality, and it's maybe 10, 50 lines of code buried

00:39:04,730 --> 00:39:08,250
in 5 modules files, and you're trying to review that code.

00:39:08,250 --> 00:39:12,790
Have any of you been in that situation? How fun is it?

00:39:12,790 --> 00:39:19,790
How easy is it to review their work? -[inaudible]

00:39:21,240 --> 00:39:28,220
-Yeah, so there's a lot to grab, a lot of line. It's difficult. It takes a long time.

00:39:28,220 --> 00:39:35,220
By using Composer to manage your dependencies, you have one line that you have to change

00:39:35,840 --> 00:39:42,840
or one line that you add to say, "I want to add this module" in your composer.json, and

00:39:42,890 --> 00:39:49,890
then it will also modify the composer.lock, which locks the dependencies, the versions,

00:39:50,369 --> 00:39:55,690
the hashes used. The nice thing is GitHub hides the lock file,

00:39:55,690 --> 00:40:01,240
so all you see is that one-line change and then all of their change, so it makes it a

00:40:01,240 --> 00:40:05,380
lot easier for review. It also makes it a lot easier because now

00:40:05,380 --> 00:40:10,210
you don't have to go and download all these modules.

00:40:10,210 --> 00:40:16,420
It's also much better for version constraints. How many have taken on a support project,

00:40:16,420 --> 00:40:22,460
saw that all their modules were outdated, done updates, and then find out, "Oh, they

00:40:22,460 --> 00:40:28,540
actually didn't want to update that one module"? This can help you on that because you can

00:40:28,540 --> 00:40:35,540
say, "Use this very specific version or only use minor releases," and then you can look

00:40:36,390 --> 00:40:43,390
and say, "Oh, this is pinned to version 7.x.1.2. There's a reason it's pinned to that."

00:40:45,490 --> 00:40:48,619
It saves you time there. It makes updating a lot easier.

00:40:48,619 --> 00:40:56,659
You can see what changed from version to version in one file or looking at the composer.lock

00:40:57,000 --> 00:41:02,750
file. It uses Drupal Libraries Installer Plugin

00:41:02,750 --> 00:41:09,750
to get libraries that you may need and place those into sites/all/libraries.

00:41:10,410 --> 00:41:17,410
We use Drupal Settings Compile to load configuration from an arbitrary directory on a server instead

00:41:17,700 --> 00:41:24,700
of templating settings.php or versioning database configuration.

00:41:25,890 --> 00:41:32,890
We use Drupal Drop Ship, which actually uses a fork of Kraftwagen Manifest to create a

00:41:33,140 --> 00:41:40,140
reusable deployment composed of manifests. Is anyone in here familiar with manifests?

00:41:42,190 --> 00:41:49,190
Kraftwagen Manifest? It's actually really hard to find a good definition

00:41:49,530 --> 00:41:55,619
of Kraftwagen Manifest. The goal of Kraftwagen Manifest is to provide

00:41:55,619 --> 00:42:02,619
an idempotent deployment, a deployment that has the same results every time, but you basically

00:42:04,119 --> 00:42:11,119
define a manifest, name it, give it some information, and then you define what that manifest does.

00:42:13,260 --> 00:42:20,260
The way we use manifest, one that's a really good way is configuration that might be different

00:42:21,690 --> 00:42:28,690
on development servers or locally versus production. So one good example of this would be commerce

00:42:32,210 --> 00:42:35,250
settings. You want to make sure that you are always

00:42:35,250 --> 00:42:41,100
using the production, the live commerce client on production.

00:42:41,100 --> 00:42:46,340
You do not want to accidentally change that back to dev and maybe cost them thousands

00:42:46,340 --> 00:42:53,340
of dollars, so this defines a Kraftwagen Manifest using environment variables to make sure that

00:42:54,840 --> 00:42:59,119
those settings are always right on every deployment on production.

00:42:59,119 --> 00:43:08,839
Relatedly, make sure then that, once you define them, that it sets up test settings on development

00:43:09,330 --> 00:43:14,830
staging, development integration server as well as locally.

00:43:14,830 --> 00:43:21,270
My advice is if you start doing this, if you look closer there's a default end file which

00:43:21,270 --> 00:43:28,270
you can copy and then override. Set your defaults to non-production settings.

00:43:28,670 --> 00:43:34,100
That will save you a lot of time and is generally a safer thing to do.

00:43:34,100 --> 00:43:41,100
You can also use it to, say, configure, "How do we handle e-mail on development settings?"

00:43:41,530 --> 00:43:47,490
You don't want to actually be sending e-mails when you're testing.

00:43:47,490 --> 00:43:53,880
This is something that we've learned the hard way, but it's you'd think would be something every

00:43:53,880 --> 00:43:58,359
developer would set up. I set up development environment, this site

00:43:58,359 --> 00:44:03,960
sends e-mails. Maybe we shouldn't send e-mails to everyone

00:44:03,960 --> 00:44:10,960
on the college campus with an e-mail address when we're testing the e-mail send function.

00:44:14,840 --> 00:44:19,980
If you want to learn more about it, there's a whole blog series that we have.

00:44:19,980 --> 00:44:25,270
We're actually right about at time. I want to make sure we have some time for

00:44:27,140 --> 00:44:37,210
questions. -Have you noticed that there's been a lot

00:44:37,210 --> 00:44:44,210
of presentations and activity around Ansible in the Drupal community more lately? There's

00:44:45,740 --> 00:44:51,450
been a book written that includes Drupal playbooks and stuff like that.

00:44:51,450 --> 00:44:58,450
I agree that if someone in the group knows Chef or whatever, start where you can and

00:44:58,750 --> 00:45:03,480
that's it. It doesn't matter, really. But Ansible seems to be a much easier approach.

00:45:03,480 --> 00:45:09,700
I don't know if you'll agree with that or not. Anyway, to discuss.

00:45:09,700 --> 00:45:15,540
-I have noticed that it is becoming more popular. I haven't worked with it.

00:45:15,540 --> 00:45:21,330
We've used Chef, since that's what we have done and what we've known, and sometimes your

00:45:21,330 --> 00:45:26,170
reason for using something may be. That's why.

00:45:26,170 --> 00:45:46,190
Any other questions, thoughts? -When you want to talk your manager into getting

00:45:46,369 --> 00:45:56,729
into this and convincing them, it's not very easy to convince them with your words unless

00:45:56,960 --> 00:46:03,770
you have enough power to do that. What I think may be very, very useful is to

00:46:03,770 --> 00:46:09,470
know worst cases or bad cases that have happened to you.

00:46:09,470 --> 00:46:16,119
Do you know of any that may be of particular interest in the situation?

00:46:16,119 --> 00:46:22,680
In that case you can just prepare a good, very detailed argumentation of why you are

00:46:22,680 --> 00:46:29,570
proposing going with this methodology, which is the right thing, of course.

00:46:29,570 --> 00:46:35,420
-That's a really big question. -Like a serious situation or an accident,

00:46:35,420 --> 00:46:50,300
a serious accident [inaudible] -Before it's gone manual?

00:46:50,580 --> 00:46:59,640
-[inaudible] There must have been cases where someone at some time [inaudible]

00:47:00,080 --> 00:47:05,369
-I can actually give one example, and then I'll have Andy give another.

00:47:05,369 --> 00:47:12,369
So in the very, very early stages with just using build scripts, nothing nearly this complex,

00:47:13,109 --> 00:47:20,109
say everything needs to be in code, we used build script to get the correct settings on

00:47:20,830 --> 00:47:27,830
dev versus staging versus production. Someone decided that's too slow.

00:47:28,750 --> 00:47:34,700
We don't have time to make sure we define all these things.

00:47:34,700 --> 00:47:40,750
The client comes and is like, "Okay, we need to do updates."

00:47:40,750 --> 00:47:47,750
So we do updates, and their whole site breaks and, even worse, we were getting inconsistent

00:47:49,530 --> 00:47:54,020
results. Sometimes it would take one action, and sometimes

00:47:54,020 --> 00:48:00,020
it would do something else, and we ended up finding one thing that was breaking, which

00:48:00,020 --> 00:48:06,520
actually was the home page, was happening once every ten times.

00:48:06,520 --> 00:48:11,920
This was because he decided we aren't going to use a build script. We aren't going to

00:48:11,920 --> 00:48:16,560
make sure we're defining releases and have a proper channel for QA.

00:48:16,560 --> 00:48:21,210
It's client wants this on staging to review now, so go in and cherry pick some stuff,

00:48:21,210 --> 00:48:28,210
and only that developer knows. I had to spend three months going through

00:48:28,710 --> 00:48:35,710
this project to fix it just so we could do updates, just so we could run updates, and

00:48:37,790 --> 00:48:44,340
in the process I found out that there was missing work.

00:48:44,340 --> 00:48:48,810
If that's not an argument for process... One example.

00:48:48,810 --> 00:48:55,460
Andy, do you have another? -So Dougie and I work together.

00:48:55,460 --> 00:49:00,720
One argument that we had for it, we actually had one of those projects that was pretty

00:49:00,720 --> 00:49:02,619
risky. It had a very tight timeline.

00:49:02,619 --> 00:49:09,619
It had two teams, a very large client team and a Promet team working together, and it

00:49:10,550 --> 00:49:17,550
had a drop-dead deadline with a very complex e-commerce build.

00:49:17,570 --> 00:49:23,040
We decided to add the extra time to build test cases for every single feature, for every

00:49:23,040 --> 00:49:28,540
single item. Yeah, in the beginning it was a little frustrating

00:49:28,540 --> 00:49:33,210
because everything took a little bit longer, but in the last month of that project when

00:49:33,210 --> 00:49:39,450
you had 20 developers working on this thing and they had to run the build themselves to

00:49:39,450 --> 00:49:42,700
make sure that things didn't break, that really saved our bacon.

00:49:42,700 --> 00:49:48,290
There's no way we would have been able to deliver if every one of the developers would

00:49:48,290 --> 00:49:52,910
have to build this thing from scratch, make sure it runs on their machine before they

00:49:52,910 --> 00:49:56,540
deployed it, and you had an automated test running all the test cases.

00:49:56,540 --> 00:50:03,099
Yes, it did take longer, but when you're working on larger teams, it does save your bacon.

00:50:03,099 --> 00:50:12,779
So there's one case for it. Any other questions, thoughts?

00:50:13,130 --> 00:50:17,420
-Demo. -Demo?

00:50:17,420 --> 00:50:34,240
You guys want to see a demo here? We'll see how this goes, since this is completely

00:50:34,280 --> 00:50:37,180
for Andy's humor.

00:51:23,400 --> 00:51:25,400
Like I said, this is all open source.

00:51:32,560 --> 00:51:43,400
I'm going to go ahead and find that command just to save my typing time.

00:51:52,830 --> 00:52:03,930
We'll see how this goes. Just doing Composer, create-project.

00:52:04,910 --> 00:52:11,910
That's the path to the repository on GitHub, and I'm going to call it DrupalCon,

00:52:23,530 --> 00:52:30,530
and we'll see if it'll actually go.

00:52:33,120 --> 00:52:36,360
And it looks... My internet.

00:52:46,109 --> 00:52:53,109
It looks like, because I don't have internet, it's not going to go.

00:52:57,210 --> 00:53:04,210
I won't troubleshoot that in front of you, but I actually did do that in preparation,

00:53:04,869 --> 00:53:08,619
debating doing the live demo, and it does work.

00:53:08,619 --> 00:53:12,890
It creates that directory in the folder that I was in

00:53:12,890 --> 00:53:19,880
with, in this case, DrupalCon as a name, has all the projects, run vagrant up, and there you go.

00:53:22,540 --> 00:53:29,090
It always fails in live demo, especially when

00:53:29,090 --> 00:53:36,090
you don't prep it. Any other questions, thoughts?

00:53:37,700 --> 00:53:44,700
-My WiFi is not working either. I think it's... -Okay.

00:53:47,380 --> 00:53:48,730
-Yeah, it's not working. -Yeah, it's the WiFi, but unfortunately I

00:53:49,480 --> 00:53:56,480
can't show you the magic.

00:54:03,640 --> 00:54:06,640
If there aren't any last questions, I'll go

00:54:06,900 --> 00:54:12,490
ahead and put up my contact. I'm dobrzyns on Drupal.

00:54:12,490 --> 00:54:19,349
My Twitter handle is kind of long. I should figure out something better, but if you want

00:54:19,349 --> 00:54:25,230
you can find these slides and all the links and resources in there.

00:54:25,230 --> 00:54:30,030
I'll be around at this time as well. I have some business cards if you want

00:54:30,030 --> 00:54:35,380
to come up, chat about this, have more questions. Feel free to try this out.

00:54:35,380 --> 00:54:37,859
Check it out. Check out Drupal 7 Framework.

00:54:37,859 --> 00:54:42,320
See if it's something that you like. Provide some feedback for us.

00:54:42,320 --> 00:54:45,330
Maybe there are some ways that we can improve it.

00:54:45,330 --> 00:54:50,400
We're happy to entertain those and work with the community as well.

00:54:50,400 --> 00:54:52,220

YouTube URL: https://www.youtube.com/watch?v=s6JVUA3tatc


