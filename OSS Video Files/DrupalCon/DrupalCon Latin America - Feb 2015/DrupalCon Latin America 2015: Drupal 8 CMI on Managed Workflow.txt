Title: DrupalCon Latin America 2015: Drupal 8 CMI on Managed Workflow
Publication date: 2015-02-10
Playlist: DrupalCon Latin America - Feb 2015
Description: 
	Speakers: populist mbyrnes
The Drupal 8 Configuration Management Initiative (CMI) is a straight up game changer for Drupal development and deployment. As much as we all love doing it live, no longer will this kind of human powered configuration replay in production be necessary. Instead, developers will be able to natively export their configuration to code and deploy that configuration to production using the CMI tools.
Captions: 
	00:00:00,350 --> 00:00:06,240
All right, all right. Welcome. Everyone, can I get the energy up?

00:00:06,240 --> 00:00:13,110
Hello, my name is Matt Cheney. I work at Pantheon Systems making awesome

00:00:13,110 --> 00:00:18,060
development and hosting platform for Drupal sites. 

00:00:18,060 --> 00:00:20,060
-[Spanish]

00:00:25,400 --> 00:00:32,300
-And we're super excited to be here.

00:00:32,300 --> 00:00:35,329
-Si. -We were chatting earlier. I think between

00:00:35,329 --> 00:00:39,309
us, we've been to almost every Latin American country.

00:00:39,309 --> 00:00:45,960
We've been down to Latin America 15, 20 times between us and are excited to bring some energy

00:00:45,960 --> 00:00:52,469
to Bogota and teach you all a little bit about one of my favorite topics, which is the Drupal

00:00:52,469 --> 00:00:58,100
8 CMI system. We're going to give you sort of an overview

00:00:58,100 --> 00:01:04,250
from Molly about some of the problem spaces that she's seen in terms of using configuration

00:01:04,250 --> 00:01:11,250
in the UI and how that can get messed up when you deploy it to a production site, and then

00:01:11,310 --> 00:01:18,310
I'm going to talk about some of the explicit interfaces and other kinds of screens and

00:01:19,439 --> 00:01:25,680
technologies to actually use this yourself. We'll conclude with a live demonstration using

00:01:25,680 --> 00:01:31,350
the conference WiFi and the latest Drupal 8 beta, so cross your fingers.

00:01:31,360 --> 00:01:36,729
-We do have a tether back up. -And we'll tethering off of phones, but we

00:01:36,729 --> 00:01:42,509
did it earlier and it was pretty awesome. Hopefully all joy. Then we'll do some wrap-up

00:01:42,509 --> 00:01:47,590
questions and some other stuff, but the hope is you leave here in the next 50 minutes with

00:01:47,590 --> 00:01:53,539
an understanding of how CMI works in Drupal 8, some of the reasons you'd want to use it,

00:01:53,539 --> 00:01:58,810
and a really clear demonstration about how you can take this stuff for yourself and have

00:01:58,810 --> 00:02:05,810
a really good time with it. -[Spanish] 

00:02:30,230 --> 00:02:35,260
in relationship to configuration management. This is basically about keeping the chaos

00:02:35,260 --> 00:02:39,910
out of the codebase. I've worked in Drupal through being a content

00:02:39,910 --> 00:02:44,880
editor, through being a project manager, and now running large accounts with many different

00:02:44,880 --> 00:02:47,840
sites. One of the big themes that I've seen over

00:02:47,840 --> 00:02:51,440
the years is that, when you have a system like Drupal and you have a lot of different

00:02:51,440 --> 00:02:56,470
people doing a lot of different things, there can be a tendency towards things that you

00:02:56,470 --> 00:03:01,790
can't always control, so configuration management, as it's been built out in Drupal 8, is an

00:03:01,790 --> 00:03:07,400
amazing solution to a lot of the problem spaces that we've seen in previous versions of Drupal.

00:03:07,400 --> 00:03:13,150
Coming from sort of the business side and the content side, I'm really excited to see

00:03:13,150 --> 00:03:18,720
how this all plays out when people start to use it more.

00:03:18,720 --> 00:03:24,250
To talk through kind of the past experiences, I'm going to talk a little bit about what

00:03:24,250 --> 00:03:31,230
it was like before modern configuration management. This is sort of the we're getting ready to launch,

00:03:31,230 --> 00:03:38,230
we have our stuff on the dev site, and we want to push it up to the live. [Spanish]

00:03:40,110 --> 00:03:43,070
Well, there was a mixture of things.

00:03:43,070 --> 00:03:46,830
You could push up some of the code, but there were certain things in the configuration that

00:03:46,830 --> 00:03:52,890
would have to be switched manually, so communication, process, and documentation, and actually people

00:03:52,890 --> 00:03:57,690
working together was a big part of making some of the changes from a dev site in Drupal

00:03:57,690 --> 00:04:02,870
to go all the way up to the live site. This worked well for many people, and people

00:04:02,870 --> 00:04:09,870
had their systems and their ways of doing things, but at times it definitely could have

00:04:10,870 --> 00:04:15,720
some issues. I don't know if anyone's ever had the experience

00:04:15,720 --> 00:04:20,260
of putting their site in maintenance mode and making a whole bunch of changes on the

00:04:20,260 --> 00:04:24,560
live site after they've seen it on dev. Has anyone ever had this experience in Drupal?

00:04:24,560 --> 00:04:29,760
No? Hands? It's a real race against the clock.

00:04:29,760 --> 00:04:36,760
You're trying to get everything done. You're going sort of [Spanish] 

00:04:45,300 --> 00:04:52,270
so it's very, very stressful, as many of you guys know and hard to always get everything right.

00:04:52,270 --> 00:04:57,170
What were we doing detras de la cortina de la maintenance window?

00:04:57,170 --> 00:05:04,170
Well, there were a lot of .txt files, okay? TXT, all of the configurations from Views.

00:05:05,250 --> 00:05:10,780
People would export them, save little Zip folders of what the configurations were to

00:05:10,780 --> 00:05:14,430
do. That was a big part of it. Views, obviously.

00:05:14,430 --> 00:05:21,430
Familiar with Views? Yeah, si, okay. Bueno. So many amazing options in the Views module,

00:05:22,100 --> 00:05:25,840
but if you're changing a feature and you want to push up the view, you really have to get

00:05:25,840 --> 00:05:30,290
those exports. Another one that I remember a lot was taking

00:05:30,290 --> 00:05:35,389
screenshots of the block window. We would go to the blocks page and just take

00:05:35,389 --> 00:05:39,480
a big screenshot of what all of the settings were and make sure that that was e-mailed

00:05:39,480 --> 00:05:42,900
to the whole team before we would go ahead and do launches.

00:05:42,900 --> 00:05:49,900
These were all tactics of managing configuration on sites and platforms prior to where we are

00:05:52,270 --> 00:05:58,190
now and where we'll be seeing some of the magic coming up in the demo.

00:05:58,190 --> 00:06:03,680
This is obviously from my perspective. I was managing close to 300 sites at one point,

00:06:03,680 --> 00:06:09,290
and so this was a huge pain point for me, so when I started to hear the inklings of

00:06:09,290 --> 00:06:12,680
configuration management coming out, it was extremely, extremely exciting.

00:06:12,680 --> 00:06:17,440
What were some of the things that could go wrong?

00:06:17,440 --> 00:06:24,440
There are a lot of boxes to check in Drupal, and as many of you guys know, modules put

00:06:24,850 --> 00:06:31,810
boxes in different places in the admin interface, so there could be a box in settings and not

00:06:31,810 --> 00:06:37,220
a box in another section of the site, and if you don't know where that box is or you

00:06:37,220 --> 00:06:43,510
check the wrong box, that could be an issue for your site and for the stability.

00:06:43,510 --> 00:06:50,510
Like that elephant. [Spanish]

00:06:59,720 --> 00:07:06,660
Yeah, there could definitely be a lot of collisions. I'm going to tell a little story about one

00:07:06,660 --> 00:07:11,220
of my favorite collisions that I had with a configuration issue.

00:07:11,220 --> 00:07:16,630
Is anyone familiar with this setting in Views or this type of a query? Anyone? Okay.

00:07:16,630 --> 00:07:23,630
For those of you who aren't familiar, what this does is essentially makes a query to

00:07:23,910 --> 00:07:29,870
search everything on the site in a particular value and then randomize which thing you're

00:07:29,870 --> 00:07:34,930
going to pull up and show in the view. As many of you guys may know, that is a very

00:07:34,930 --> 00:07:41,930
expensive or caro query for the database, so we had a site launch and someone was setting

00:07:44,600 --> 00:07:50,900
up a view and thought it would be really nice if it randomly showed a message from a music

00:07:50,900 --> 00:07:54,979
fan. Except the site had something like 200,000

00:07:54,979 --> 00:08:01,979
users, and the messages were upwards of several hundred thousand, so every time the page was

00:08:03,760 --> 00:08:09,100
loading, it was going and picking up a global random, and it actually caused the site to

00:08:09,100 --> 00:08:12,080
go down. No one knew what was going on, and then we

00:08:12,080 --> 00:08:17,910
went and audited all the configuration in real time, chased down the queries, and solved

00:08:17,910 --> 00:08:21,360
this. We were able to put some cache settings on

00:08:21,360 --> 00:08:25,660
the individual block, but the sort of moral of this story in the configuration is it only

00:08:25,660 --> 00:08:31,510
takes one check box of something that sounds like a good idea in your system that someone

00:08:31,510 --> 00:08:36,479
makes on the live site that could actually cause your site to be unstable, so it's definitely

00:08:36,479 --> 00:08:41,379
about governance, but it's also about systems that make it easy for you to stabilize your

00:08:41,379 --> 00:08:45,600
configuration and propagate them through different environments.

00:08:45,600 --> 00:08:52,350
What is kind of the overall shift that's happened here?

00:08:52,350 --> 00:08:57,920
We've moved in the internet from a bunch of static sites, and now we're in this much more

00:08:57,920 --> 00:09:04,600
dynamic system where one check box can dynamically generate a list from a database as opposed

00:09:04,600 --> 00:09:07,129
to just a static list that we're putting up on the site.

00:09:07,129 --> 00:09:13,069
With these kind of larger systems with many more variables, many more levers, many more check

00:09:13,069 --> 00:09:19,119
boxes, it's really, really important to have processes and things in place that can help

00:09:19,119 --> 00:09:24,119
us stabilize and track all of these different variables.

00:09:24,119 --> 00:09:29,019
Just to speak a little bit about this shift, I know Dries talked about the shift from pull

00:09:29,019 --> 00:09:32,670
to push, which I think is a shift that's coming in the future, the shift that we've kind of

00:09:32,670 --> 00:09:38,949
been through in the last 10 years is sort of shifting from a truly static web, where

00:09:38,949 --> 00:09:43,059
people are updating their files with FTP, it's the same HTML over and over again, to

00:09:43,059 --> 00:09:47,660
a dynamic web where actually the markup is being generated and coming through the dynamic

00:09:47,660 --> 00:09:51,949
databases. So this big shift has definitely led to an

00:09:51,949 --> 00:09:58,949
increase in a lot of the sort of potential energy... Well, kinetic energy in the system.

00:10:00,079 --> 00:10:07,079
If you guys look at this example from physics, we've gone from a system that has lower kinetic 

00:10:08,119 --> 00:10:14,179
energy to much, much higher kinetic energy with all of the different variations.

00:10:14,179 --> 00:10:20,730
That's definitely, I think, a big part of why it's important to learn and understand

00:10:20,730 --> 00:10:25,129
the configuration management, because, again, we are trying to launch and create more stable

00:10:25,129 --> 00:10:28,379
sites. I'm just going to walk through a little bit

00:10:28,379 --> 00:10:32,990
about how I've seen the evolution of Drupal through these different phases, because I

00:10:32,990 --> 00:10:39,050
think that there have been so many baselines that have kind of come out of the different

00:10:39,050 --> 00:10:42,240
versions that have led us to where we are now.

00:10:42,240 --> 00:10:47,929
I think Drupal 4 and Drupal 5 were really about finding these dynamic systems and understanding

00:10:47,929 --> 00:10:50,459
how they work together. There was a lot of work done on Views, a lot

00:10:50,459 --> 00:10:55,589
of work done on some of the underpinnings of the configuration that we all know today

00:10:55,589 --> 00:11:00,980
as part of Drupal. And then as we got into Drupal 6, there were

00:11:00,980 --> 00:11:03,709
larger sites that were using it, a lot of distributions.

00:11:03,709 --> 00:11:10,470
There were platforms, centrally managed sites, techniques for managing install profiles so

00:11:10,470 --> 00:11:13,910
that you could have configurations that could be spun up in multiple places.

00:11:13,910 --> 00:11:18,240
We had tools like Aegir come out where you could kind of spin up different sites.

00:11:18,240 --> 00:11:21,399
People were starting to think about ways in which you could make the configuration more

00:11:21,399 --> 00:11:25,679
standard across different versions or different instances of Drupal.

00:11:25,679 --> 00:11:30,929
And then, of course, a big focus on process of management, so dev shops all working together.

00:11:30,929 --> 00:11:34,740
How do we launch our sites? Getting our lists together, getting our .txt

00:11:34,740 --> 00:11:38,800
files, so the real business process was also sort of a big part of that.

00:11:38,800 --> 00:11:45,800
Moving on to Drupal 7, we definitely have a pretty robust way of managing configuration.

00:11:46,519 --> 00:11:51,920
There have been some integrations with some other tool sets, things like Jenkins, which

00:11:51,920 --> 00:11:56,429
I think we'll touch on a little bit later, as well as automation of pushing code up through

00:11:56,429 --> 00:11:59,959
the environments. But we still have sort of the central issue

00:11:59,959 --> 00:12:04,480
of the fact that some of the modules like Features, which we'll talk through later,

00:12:04,480 --> 00:12:11,480
are kind of bolted on to Drupal 7 almost after the fact as opposed to being built in from

00:12:11,480 --> 00:12:16,420
the ground up, which, as we're going to see a little bit later, the Drupal 8 CMI really

00:12:16,420 --> 00:12:23,420
is integrated into the core of Drupal. That's Drupal 7, and then now we have Drupal 8.

00:12:25,009 --> 00:12:29,790
I've actually been working on a Drupal 8 project.

00:12:29,790 --> 00:12:34,959
We're doing some work on beta, and I was talking to the developer, and I was like, "Do you

00:12:34,959 --> 00:12:40,480
have any thoughts on how it's going with CMI and what that process has been like?" and

00:12:40,480 --> 00:12:46,769
he said, "It just works. It's just great." I was like, "Really? Okay, great."

00:12:46,769 --> 00:12:53,239
And it's true. I mean, having these systems baked into the core has made a big impact

00:12:53,239 --> 00:13:00,110
in our ability to tackle and manage this migration from Drupal 6 to D8, with memorial Sloan Kettering,

00:13:00,110 --> 00:13:05,879
so we're really excited to see that through in the coming months, and it's been amazing

00:13:05,879 --> 00:13:12,369
to just see how the system that everyone's worked so hard on is actually kind of coming

00:13:12,369 --> 00:13:16,230
out into the world. This is definitely really exciting.

00:13:16,230 --> 00:13:21,629
Lastly, I feel like, again, it's just working for developers.

00:13:21,629 --> 00:13:27,619
We're starting to see the CMI architecture that's now under Drupal 8 I think empowering

00:13:27,619 --> 00:13:32,239
and improving the developer experience and being able to bring in developers from other

00:13:32,239 --> 00:13:36,339
programming groups, like the larger PHP community can kind of come in with some of the standardizations

00:13:36,339 --> 00:13:41,059
and some of the processes that they already know, and we're seeing really great tools

00:13:41,059 --> 00:13:47,429
for module development, like Drupal Console. That was developed by David and Jesus, so

00:13:47,429 --> 00:13:51,160
I think we're really seeing a lot of that as well.

00:13:51,160 --> 00:13:56,160
Hopefully that is a good kind of background of introductions of why configuration management

00:13:56,160 --> 00:14:02,259
is really important, especially from the non-developer side of things, and I will turn it over to

00:14:02,259 --> 00:14:06,639
Mr. Cheney over here to talk through the ins and outs.

00:14:06,639 --> 00:14:13,549
-Awesome. Thank you, Molly. To take a step back and talk about what the

00:14:13,549 --> 00:14:18,540
technical problem is that Molly's talking about with her work, that there's sort of,

00:14:18,540 --> 00:14:25,540
in Drupal, there are two pillars of the CMS. There's the configuration, which is the content

00:14:25,540 --> 00:14:32,540
types, the image styles, fields, views. It's the settings that you configure to make

00:14:33,189 --> 00:14:38,619
the site function the way that you want. Then there's also the content.

00:14:38,619 --> 00:14:44,009
These are the blog posts and the user accounts and the comments and the things that are being

00:14:44,009 --> 00:14:50,910
added on a regular basis by users. What's really difficult about this is that

00:14:50,910 --> 00:14:56,509
the configuration is something that you usually do in development, because you're trying out

00:14:56,509 --> 00:14:59,259
things. You want them to work correctly.

00:14:59,259 --> 00:15:05,809
The content is something that usually you do in production, because your editors are

00:15:05,809 --> 00:15:12,809
adding content, your users are commenting. These are two really different things in Drupal,

00:15:13,189 --> 00:15:19,189
but they sort of function together. The problem here is that Drupal doesn't really

00:15:19,189 --> 00:15:23,679
care about those two differences on a data level.

00:15:23,679 --> 00:15:29,359
These are all the tables in a Drupal site, or my particular Drupal site.

00:15:29,359 --> 00:15:36,160
Some of these tables, as you can see, are content tables. Some are configuration tables,

00:15:36,160 --> 00:15:42,369
but there's no real way to identify which one is configuration and which one is content.

00:15:42,369 --> 00:15:48,949
This makes it really difficult to do the kind of process that Molly and I have been talking

00:15:48,949 --> 00:15:55,949
about with being able to use something like CMI to put configuration into code and have

00:15:56,379 --> 00:16:01,689
it work in production, because an easy solution, you might think, is you could just copy the

00:16:01,689 --> 00:16:07,439
database, but doing that, of course, loses your blog posts and your user accounts.

00:16:07,439 --> 00:16:13,999
Trying to copy just specific tables within the database, while maybe possible, gets to

00:16:13,999 --> 00:16:18,489
be really difficult and is something that typically isn't done.

00:16:18,489 --> 00:16:23,189
This is the problem. Luckily, for a lot of us in this room, we

00:16:23,189 --> 00:16:30,069
have the Features Module. This was created in 2009 for Drupal 6, and

00:16:30,069 --> 00:16:36,259
it was basically designed to do a few different things, but the thing, I think, that it gets

00:16:36,259 --> 00:16:42,970
the most use for is to actually try to export active configuration to code.

00:16:42,970 --> 00:16:46,100
I assume a lot of us in the room have used Features.

00:16:46,100 --> 00:16:50,259
I've used it a lot. It gets a little bit of a bad rap because

00:16:50,259 --> 00:16:56,829
it can get a little complicated, but I think it's really helpful for a lot of people because

00:16:56,829 --> 00:17:03,829
it solves this problem of having configuration in dev and needing to reliably put it to production,

00:17:04,569 --> 00:17:08,549
but here it is. It was a game changer for Drupal.

00:17:08,549 --> 00:17:14,539
This is the UI for it, and this really ushered in a world of what's called feature-driven

00:17:14,539 --> 00:17:21,500
development, where developers who are disciplined enough were able to only configure on dev

00:17:21,500 --> 00:17:26,309
and push all of their stuff up with Features. It generally works. I mean, I've seen it work

00:17:26,309 --> 00:17:31,169
on big projects. It has some problems, but it is a good solution

00:17:31,169 --> 00:17:38,169
for what it was. The problem here is that Features Module wasn't

00:17:39,900 --> 00:17:45,400
intended for the sole purpose of storing configuration. That's something that it does,

00:17:46,210 --> 00:17:53,210
but it was really used to package up a sort of feature, like a blog system or an image gallery, and

00:17:53,559 --> 00:17:59,179
it was developed initially for Open Atrium, which is a very excellent Drupal distribution,

00:17:59,179 --> 00:18:04,210
and sort of found its life with configuration storage.

00:18:04,210 --> 00:18:10,090
Because it's a contributed project, it can only do so much stuff to Drupal.

00:18:10,090 --> 00:18:15,500
There are a lot of hooks it can use and stuff it can integrate with, but it's limited.

00:18:15,500 --> 00:18:20,690
It's not Core. It can't enforce standards that everyone follows, and so if you see and

00:18:20,690 --> 00:18:27,190
work with Features Module, it has to treat individual other contrib modules like Views

00:18:27,190 --> 00:18:32,519
differently than it might treat other kinds of stuff, and that creates inconsistencies

00:18:32,519 --> 00:18:38,240
because not only do you have different kinds of code doing the configuration export, but

00:18:38,240 --> 00:18:44,159
as contrib changes in different ways how it exports its config, Features has to try to

00:18:44,159 --> 00:18:50,080
keep up, and it gets a little crazy. Plus Drupal 7 also has some just straight

00:18:50,080 --> 00:18:57,080
up limitations with how it's structured, including not having unique identifiers for lots of

00:18:57,169 --> 00:19:03,500
things that you might want to use unique identifiers for, and so Features has to work around it.

00:19:03,500 --> 00:19:10,500
On my Star Trek picture--I love Star Trek--this is Commander Worf. He's in front of the Klingon

00:19:10,730 --> 00:19:15,700
high council apologizing for some actions at Khitomer.

00:19:15,700 --> 00:19:21,620
But I think what's really interesting about Klingons is that Klingons, when they get dishonored,

00:19:21,620 --> 00:19:28,620
that dishonor will extend for seven generations, and I feel now with Drupal and Drupal 8, we

00:19:28,860 --> 00:19:35,860
can be free of some of these assumptions, and we can have it.

00:19:37,510 --> 00:19:42,799
This was sort of the world that we lived in, and now we get to a point where we want to

00:19:42,799 --> 00:19:48,840
remove those sins and get that honor, and we have this pinball wizard named Greg Dunlap

00:19:48,840 --> 00:19:55,840
who was a lead architect for the CMI system, and that in March of 2011 Drupal 8 was sort

00:19:56,080 --> 00:19:59,070
of getting spec'd out, people starting to work,

00:19:59,070 --> 00:20:04,309
Greg was really passionate about doing this configuration management stuff, worked with

00:20:04,309 --> 00:20:08,970
David Strauss and a number of other, really, brains in the Drupal community.

00:20:08,970 --> 00:20:14,820
Got Dries to bless the process as a full-fledged initiative, and this was one of the first

00:20:14,820 --> 00:20:20,259
initiatives to actually get done where they actually built CMI, got it into Core, and

00:20:20,259 --> 00:20:25,080
then everybody else got to use it. It's been several years where CMI has been

00:20:25,080 --> 00:20:29,230
worked on and improved, and that's been really great.

00:20:29,230 --> 00:20:32,880
But I think the design decisions here were also really important.

00:20:32,880 --> 00:20:38,509
That one of the really important mantras for Drupal 8 is try to use code that's invented

00:20:38,509 --> 00:20:45,509
elsewhere that's really good and try to look at systems beyond just Drupal to solve problems.

00:20:45,679 --> 00:20:49,889
One of the things that was very important in Drupal 8 is to use a standard kind of file.

00:20:49,889 --> 00:20:55,389
We ended up with YAML files, which are used by Symfony, which will work really well, obviously,

00:20:55,389 --> 00:21:00,980
in our Drupal 8 world and that we can sort of take that approach in a very similar way

00:21:00,980 --> 00:21:06,240
to have configuration. We also took a lot of inspiration from the

00:21:06,240 --> 00:21:11,419
Jenkins system, which is a really great continuous integration sort of workflow management kind of

00:21:11,419 --> 00:21:15,779
of tool, and one of the great things that Jenkins has--it's one of the few projects

00:21:15,779 --> 00:21:22,779
that does--is that you can do configuration in Jenkins in the GUI as an end user to make

00:21:23,029 --> 00:21:28,710
some decisions, and then it will write that configuration out to code in a way that can

00:21:28,710 --> 00:21:34,789
be saved, end versioned, and deployed. That is really the key sort of process of

00:21:34,789 --> 00:21:38,169
CMI. You don't want it to be a developer only tool.

00:21:38,169 --> 00:21:43,419
You want it to be something that end users who are just admins of a site can do config

00:21:43,419 --> 00:21:48,710
changes but still use the power of version control, and that's what Jenkins does.

00:21:48,710 --> 00:21:55,710
It also takes this concept of declarative configuration, where instead of how Features

00:21:59,200 --> 00:22:05,649
works, where it sort of tries to push in a data type that could have some overrides or

00:22:05,649 --> 00:22:11,730
some issues with what's in the database, and it tries to sort of reconcile those two, Drupal

00:22:11,730 --> 00:22:17,240
8 CMI is very specific. It has a YAML file. It says, "This is the

00:22:17,240 --> 00:22:20,850
setting that we will use." Very straightforward.

00:22:20,850 --> 00:22:27,850
If we look at one of these files for CMI, we can see exactly what I'm talking about.

00:22:28,440 --> 00:22:32,309
This is the YAML file for the system site settings.

00:22:32,309 --> 00:22:39,009
It contains the name of the site, e-mail of the site, front page, and some other settings.

00:22:39,009 --> 00:22:44,830
And that when you have this YAML file, and you tell Drupal 8, "Use this for configuration,"

00:22:44,830 --> 00:22:48,820
it'll just say, "Let's use this name, this e-mail."

00:22:48,820 --> 00:22:53,740
There's no reconciling overrides. There's no dealing with that kind of stuff.

00:22:53,740 --> 00:23:00,740
It's very clean and very, very, very easy. In order to actually use configuration management,

00:23:00,899 --> 00:23:07,860
and I'll do a demo of it, but the really basic starting point is there's a module in

00:23:07,860 --> 00:23:14,610
Drupal called configuration management, lives at admin, config, development, configuration.

00:23:14,610 --> 00:23:20,120
It's something you can all try now if you have a Drupal 8 site on your laptop or one

00:23:20,120 --> 00:23:22,429
of your servers. If you want, we had Pantheon have free Drupal

00:23:22,429 --> 00:23:25,889
8 at pantheon.com/drupal8. You can try it there.

00:23:25,889 --> 00:23:29,769
But it's really straightforward. You just go to the configuration management

00:23:29,769 --> 00:23:36,019
interface, and you get something that looks like this, and what you can do with this is

00:23:36,019 --> 00:23:41,450
some really basic options. You can import, you can export, and you can

00:23:41,450 --> 00:23:45,730
synchronize, and you can do it for all the config or a single value, but the process

00:23:45,730 --> 00:23:50,399
is the same. Basically, you go to your development site,

00:23:50,399 --> 00:23:56,049
make a config change like changing the site name, and then you can then go to the single

00:23:56,049 --> 00:24:02,740
value export, and you can say, "Export me that system site information."

00:24:02,740 --> 00:24:08,529
You'll see here, we have that YAML file we just got, and it kicks it out as a bunch

00:24:08,529 --> 00:24:11,259
of text. You can do this with Drush and some other

00:24:11,259 --> 00:24:17,960
stuff I'll show as well, but the idea is that Drupal will give you this configuration file.

00:24:17,960 --> 00:24:23,519
Then you go to your live server and go to the same kind of screen, but using the import

00:24:23,519 --> 00:24:28,129
function, and then you actually go ahead and import that config.

00:24:28,129 --> 00:24:33,289
You paste it in, hit "import," and it will actually go and import that to your site,

00:24:33,289 --> 00:24:40,289
so you get this kind of synchronization screen where you have the old version and the new

00:24:41,019 --> 00:24:46,120
version of what's happening, so you'll see here the name of the site is changing from

00:24:46,120 --> 00:24:51,610
end-point "blah" to this CMI demo, which is really great.

00:24:51,610 --> 00:24:56,830
That's something that works for single settings like the name of the site, but it also can

00:24:56,830 --> 00:25:03,419
work for larger configuration sets like a whole blogging system on your site.

00:25:03,419 --> 00:25:05,960
A lot of us might make sites where we have publishing.

00:25:05,960 --> 00:25:12,960
We make blog posts, and we want to export the content type for the blog, let's say.

00:25:13,480 --> 00:25:18,149
We can do this in Drupal 7 using Features Module. It looks like this.

00:25:18,149 --> 00:25:22,259
A lot of different code. We've got five different files to make that

00:25:22,259 --> 00:25:29,259
work, and there's a lot of white space and a lot of different arrays that Drupal 7 loves,

00:25:31,730 --> 00:25:36,659
and it's not particularly readable. It's prone to a lot of sort of issues with

00:25:36,659 --> 00:25:40,419
white space that might cause weird diffs in version control.

00:25:40,419 --> 00:25:43,759
It's something that, if you look at it, it can be a little bit different.

00:25:43,759 --> 00:25:50,090
It's not crazy. I mean, it works, but it's still a lot to deal with, and this is just

00:25:50,090 --> 00:25:53,980
for a simple blog. If you're building out a larger system, you

00:25:53,980 --> 00:25:58,549
start getting a lot of code really quickly. Drupal 8 makes this a lot better.

00:25:58,549 --> 00:26:03,379
We just have these two files for the node type and then the blog field.

00:26:03,379 --> 00:26:09,139
These are pretty straightforward YAML files where you can see those same kind of values,

00:26:09,139 --> 00:26:15,120
and this is something that you can then just import into the UI or embed in your module

00:26:15,120 --> 00:26:17,100
code. Obviously this will get a little more crazy

00:26:17,100 --> 00:26:24,100
as you do more expansive stuff, but the process is the same: Take your dev site, do all the

00:26:24,379 --> 00:26:31,379
development you want, export that development into YAML files, do with Drush as I mentioned,

00:26:31,419 --> 00:26:38,419
then take that with the YAML file and dump it into an import function on your live site,

00:26:39,929 --> 00:26:46,929
and then you can have a happy dance party because we should dance for CMI.

00:26:48,210 --> 00:26:55,210
Let's watch this happen. I'll do a demo so we can all see the magic.

00:27:03,960 --> 00:27:10,960
What I've done here is I've actually set up a Drupal 8 site on my Pantheon instance.

00:27:11,809 --> 00:27:17,629
I haven't done anything but install it, export the config, and add the trusted header information

00:27:17,629 --> 00:27:23,820
to it, so it's pretty much a fresh install, and I've got a dev version, which is right

00:27:23,820 --> 00:27:28,289
here. I also have a test version and a live version

00:27:28,289 --> 00:27:35,029
as well. To actually get into the configuration management,

00:27:35,029 --> 00:27:41,070
you go into your admin side of things, and you jump into the configuration management

00:27:41,070 --> 00:27:48,070
section, which is right down here, and you get to that same kind of screen that you wanted

00:27:50,999 --> 00:27:56,580
to see. This is a little bit of craziness, so just

00:27:56,580 --> 00:27:59,289
ignore that. So what we can do is we can do really interesting

00:27:59,289 --> 00:28:02,999
stuff. Like I showed you before, we can go in and

00:28:02,999 --> 00:28:09,649
if we wanted to make, say, a change to the site information, we could say "my updated

00:28:09,649 --> 00:28:16,490
demo." We can go ahead and hit "save" to that, and

00:28:16,490 --> 00:28:23,490
then back on that export screen we can do the export from the system settings.

00:28:26,049 --> 00:28:33,049
That's basically what I showed you before, not terribly crazy.

00:28:35,360 --> 00:28:39,710
You can do this between different environments. You can do it from your local laptop to an

00:28:39,710 --> 00:28:44,259
integration server. You can do it from dev to production.

00:28:44,259 --> 00:28:50,169
You can do pretty much whatever you want, and then Drupal will sort of take that real

00:28:50,169 --> 00:28:55,879
configuration, do a little bit of generation on the back end, and then we can go and paste

00:28:55,879 --> 00:29:00,080
that like before. It's pretty cool.

00:29:00,080 --> 00:29:04,940
That's sort of cool, but let's do some more really awesome stuff.

00:29:04,940 --> 00:29:09,600
One of the things we promised as part of this talk is to show you how you can do this with

00:29:09,600 --> 00:29:13,600
a managed workflow. Hopefully you see sort of the basic idea:

00:29:13,600 --> 00:29:17,980
Import/export. One of the things that I'm really hot on these

00:29:17,980 --> 00:29:24,649
days is actually using feature branches in version control to deal with different features.

00:29:24,649 --> 00:29:31,220
It's a very, I think, pro way to do development, and it's something that Drupal 8 makes actually

00:29:31,220 --> 00:29:34,889
really real. The idea is that for every feature you want

00:29:34,889 --> 00:29:40,730
to build on your site, you can create another copy of your site on a different branch, and

00:29:40,730 --> 00:29:46,570
you can do that configuration. I've set up two branches on this site.

00:29:46,570 --> 00:29:49,370
One is for the site name, and the other is for the blog.

00:29:49,370 --> 00:29:54,480
What I'll do is I'll just go in and show you the blog thing because that's the coolest.

00:29:54,480 --> 00:30:00,480
We'll go visit the blog site, and this is basically a copy of the dev site that I just

00:30:00,480 --> 00:30:07,480
showed you, but it's based off of a different feature branch.

00:30:08,059 --> 00:30:12,279
What becomes really awesome is that I can go to this site. See it's got a different

00:30:12,279 --> 00:30:19,149
URL. It's blog-my-awesome-bogota-d8-demo. I'm doing this with Pantheon's multi-dev tool,

00:30:19,149 --> 00:30:25,460
but you can do this with any kind of Git repository that deals with feature branches.

00:30:25,460 --> 00:30:32,100
What I can do is, as a developer, I have a task to create a blog for my site, so I can

00:30:32,100 --> 00:30:39,100
go in and make a pretty straightforward blog and call it "Blog Post," my genius in a blog

00:30:41,850 --> 00:30:48,389
post, and go ahead and save that. That's just going to create a standard, content

00:30:48,389 --> 00:30:55,389
type with a body field. Nothing too crazy. Now what I can do is I can go into my configuration

00:30:58,980 --> 00:31:05,919
management interface, same as before, and instead of just getting that little piece

00:31:05,919 --> 00:31:12,919
of system settings, I can actually go ahead and get the... You can see some of the different

00:31:13,460 --> 00:31:18,360
blog stuff that's changed that tells you, "Hey, you've made some changes. Maybe you

00:31:18,360 --> 00:31:25,039
should go and export them." I can go to this export list and one-by-one

00:31:25,039 --> 00:31:29,559
I can go grab the content field and the content type.

00:31:29,559 --> 00:31:33,879
This, of course, is a lot of clicking in Drupal's UI.

00:31:33,879 --> 00:31:40,379
As a developer, this can be a little bit crazy, so one thing that's really awesome is that

00:31:40,379 --> 00:31:47,379
all of the CMI stuff works with Drush. So you can do all of these kinds of commands

00:31:48,299 --> 00:31:53,779
that I'm showing you using Drush instead. You need to use Drush version 7, which is

00:31:53,779 --> 00:32:00,779
what works with Drupal 8, and I've got a few different sites here, so I'll run Drush 7

00:32:02,669 --> 00:32:09,669
on the site, and I'll show you the different options that you can do.

00:32:11,600 --> 00:32:15,100
I think there's five or six different options you can do. They're right down here.

00:32:15,100 --> 00:32:21,690
I'll cover these a bit more in just a minute, but the idea is that you can use the import

00:32:21,690 --> 00:32:25,549
and export stuff on the command line, which is really awesome.

00:32:25,549 --> 00:32:30,840
One thing that's also really awesome is that you could also do full exports of your configuration.

00:32:30,840 --> 00:32:36,779
If you're doing a blog system, for example, and you have a content type and multiple fields

00:32:36,779 --> 00:32:42,690
and an image style and some other settings, instead of having to export each one individually,

00:32:42,690 --> 00:32:49,690
you can just run this config-export, and that will actually go and dump all of the configuration

00:32:52,379 --> 00:32:59,259
into your specific configuration directory. Drupal 8, when you set it up, will give you

00:32:59,259 --> 00:33:05,110
a directory for your configuration. By default it lives in the file system, but

00:33:05,110 --> 00:33:09,980
to do really cool stuff with the managed workflow, you need to put it in the actual Git root

00:33:09,980 --> 00:33:15,940
so that you can do the export. What happens with this is it sort of chugs

00:33:15,940 --> 00:33:22,110
through and says, "Dump all of those types of things to the system."

00:33:24,780 --> 00:33:26,620
Uh oh. 

00:33:29,140 --> 00:33:31,060
Cross my fingers.

00:33:38,080 --> 00:33:40,040
Oh, my internet went down.

00:33:45,980 --> 00:33:47,980
Sorry, the internet had a little bit of craziness.

00:33:48,519 --> 00:33:53,330
It'll actually prompt you to say, "Yes, I do want to export all my configuration," and

00:33:53,330 --> 00:33:58,399
you'll see here configuration successfully exported to site's default config, which is

00:33:58,399 --> 00:34:04,629
what I want. I can go back on my site, and this is a cool

00:34:04,629 --> 00:34:07,299
little feature. It will actually show me that there are these

00:34:07,299 --> 00:34:12,490
files that have been changed on that branch, and I can actually go ahead and commit this.

00:34:12,490 --> 00:34:17,530
"My Great Blog System." And I can actually go ahead, and in a single

00:34:17,530 --> 00:34:24,320
commit put into version control all of that config that I've been working on, and that's

00:34:24,320 --> 00:34:30,800
something that then other developers can look at because it's in the Git history, it's something

00:34:30,800 --> 00:34:37,280
that can be automatically tested by continuous integration systems, and it's something that

00:34:37,280 --> 00:34:41,920
can be easily rolled back if there's a problem. One of the things that Molly mentioned is

00:34:41,920 --> 00:34:47,460
when you're doing a lot of clicking of buttons from screenshots, if you click the wrong button,

00:34:47,460 --> 00:34:51,330
the site will go down. The only way to undo it is to un-click that

00:34:51,330 --> 00:34:54,400
button. Within version control, you can roll back

00:34:54,400 --> 00:34:58,260
to the previous version. That's very powerful.

00:34:58,260 --> 00:35:03,540
What becomes really great is now I'm back on my development site, and I have the ability

00:35:03,540 --> 00:35:10,540
to merge my changes back into the dev branch. The idea here is that I'm done with my blog

00:35:14,040 --> 00:35:16,100
feature branch. It looks good.

00:35:16,100 --> 00:35:19,740
I've showed it to my friends. They think it looks good, so now we actually

00:35:19,740 --> 00:35:24,630
want to put it to the dev branch and then put it live.

00:35:24,630 --> 00:35:30,900
I can go do a quick merge operation to basically say, "Take that commit that I have right here

00:35:30,900 --> 00:35:35,800
and pull that from the blog feature branch to the master branch," and it'll actually

00:35:35,800 --> 00:35:40,410
go and successfully merge it into master. If there are conflicts it'll resolve them,

00:35:40,410 --> 00:35:44,350
as Git does. Now if you go back to dev, you'll actually

00:35:44,350 --> 00:35:51,350
see that configuration line that's right there so that you can do it, which is really cool.

00:35:52,040 --> 00:35:56,720
You'll see in just a sec. "My Great Blog System" was brought in today,

00:35:56,720 --> 00:35:59,620
and everyone working on my project can see that.

00:35:59,620 --> 00:36:06,620
If I actually now want to go and get this into my site, I need to use the last option

00:36:07,540 --> 00:36:13,280
that I was showing you, which is that synchronize option, because right now that configuration

00:36:13,280 --> 00:36:20,280
just lives in that file system. You need to actually tell Drupal that you

00:36:23,390 --> 00:36:27,310
want to put it into the system. There are two ways that you can do this, and

00:36:27,310 --> 00:36:32,630
I'll show both of them. The first way is: You can go into the UI,

00:36:32,630 --> 00:36:37,660
and you can run that synchronize operation. That's something that gives you some visual

00:36:37,660 --> 00:36:44,660
feedback, as you'll see, and makes it pretty easy to actually do it.

00:36:47,020 --> 00:36:52,020
You'll see under "synchronize," it's detected that I have these different field changes

00:36:52,020 --> 00:36:57,370
for the different values, and if I go ahead and hit "import," it's actually going to go

00:36:57,370 --> 00:37:03,080
and tell my Drupal site, "Let's go take all that configuration, let's put it into the

00:37:03,080 --> 00:37:10,080
Drupal database, and let's have that ability to actually use that functionality on my live

00:37:10,830 --> 00:37:15,780
site." It runs through that kind of work, and remember

00:37:15,780 --> 00:37:22,780
I'm making a blog content type, so our hope is that once it's finished we'll be able to

00:37:23,280 --> 00:37:30,280
actually allow users who want to use the blog system to be able, under "shortcuts," to add

00:37:32,660 --> 00:37:39,660
content, and they now will have the ability on this dev site to add a blog post with no

00:37:40,590 --> 00:37:47,590
configuration on dev. Is that cool? Good?

00:37:47,840 --> 00:37:54,160
This is a legitimate game-changer for development. My prediction is that most of you in this

00:37:54,160 --> 00:38:00,390
room will end up doing this kind of process for most of your deployments, and this will

00:38:00,390 --> 00:38:05,520
make Drupal more reliable, more testable, more scalable, and will allow more people

00:38:05,520 --> 00:38:12,520
to work on projects. What also is really cool is that you can also

00:38:12,830 --> 00:38:18,520
do this with Drush. I'll go ahead and move my code from dev to

00:38:18,520 --> 00:38:24,200
the test environment because I now want to have a really good test of what's going on.

00:38:24,200 --> 00:38:28,830
I could even pull in the files and database from my live environment, so I get that really

00:38:28,830 --> 00:38:35,830
good "this is what it's going to look like." Then what you can do is within Drush, there's

00:38:37,530 --> 00:38:44,530
another option to actually do the config import, which will actually do that same synchronization

00:38:46,970 --> 00:38:51,070
process, but instead it will actually do the import instead of the export.

00:38:51,070 --> 00:38:56,820
That way, for folks that are really used to Drush-driven kind of development, you can

00:38:56,820 --> 00:39:03,820
just go ahead and do those imports. We'll wait for that to be authored. The internet's

00:39:07,150 --> 00:39:14,150
being crazy. Okay. Let's try that again. Okay.

00:39:21,110 --> 00:39:26,740
And you just run that config-import command, which is the one at the very bottom here.

00:39:26,740 --> 00:39:33,500
What that's going to do, is it's going to say, "Take everything in my file system that's

00:39:33,500 --> 00:39:36,740
configuration, and go ahead and synchronize it all up."

00:39:36,740 --> 00:39:43,740
It may prompt us for a little bit of confirmation before it does it, similar to what just happened

00:39:45,870 --> 00:39:50,740
if the internet holds out on us. What makes this really powerful is this is

00:39:50,740 --> 00:39:55,350
something that you can script, this is something you can write tests against, and this is something

00:39:55,350 --> 00:39:59,790
that you can quickly do. Because, like Dries said in his keynote that

00:39:59,790 --> 00:40:05,970
the user experience of products is going to drive their adoption and ultimately success,

00:40:05,970 --> 00:40:10,270
and I assure you with Drupal, the developer experience is going to make the difference

00:40:10,270 --> 00:40:14,660
between people who are successful and use Drupal and people who give up.

00:40:14,660 --> 00:40:19,530
Drupal is already hard enough, so having stuff like this that makes it really easy to just

00:40:19,530 --> 00:40:25,760
work on a blog system, do the configuration, then import it is really excellent.

00:40:25,760 --> 00:40:32,760
Let's cross our fingers. This is the last one to show you, and then you can actually do it.

00:40:38,350 --> 00:40:39,620
There are some other options you can do with

00:40:39,620 --> 00:40:44,240
Drush as well, so there is a lot of power, and there is some stuff I'll talk about in

00:40:44,240 --> 00:40:47,030
just a second. What I'm showing you right now is just how

00:40:47,030 --> 00:40:52,010
Drupal Core does CMI. There are a number of contributed modules

00:40:52,010 --> 00:40:57,870
that I'll show that actually extend CMI further. I think the CMI system was well designed.

00:40:57,870 --> 00:41:02,820
I think the people who designed it had a lot of experience, and so I feel we're in a good

00:41:02,820 --> 00:41:08,100
place, but people are just starting to use CMI for their sites, and there will be a lot

00:41:08,100 --> 00:41:13,670
of additional use cases and additional kinds of things that people will build.

00:41:13,670 --> 00:41:18,400
If you see someone give a presentation like this next year or the following year, there

00:41:18,400 --> 00:41:22,240
will be even more cool stuff to see, which I think is really awesome.

00:41:22,240 --> 00:41:28,340
You'll see here, doing the import, we have all of those items, and we can actually go

00:41:28,340 --> 00:41:33,530
ahead and do that configuration, and it'll do exactly the same kind of synchronization

00:41:33,530 --> 00:41:37,370
we just did. So if I was to go after this finishes to my

00:41:37,370 --> 00:41:42,640
test site, I'd be able to see that log as well, and of course I would repeat that live

00:41:42,640 --> 00:41:46,890
to actually deploy that. This is the future, from my view, of how Drupal

00:41:46,890 --> 00:41:51,100
development will be done on managed workflow in big sites.

00:41:51,100 --> 00:41:55,100
That's sort of cool. I 100% recommend people try this out.

00:41:55,100 --> 00:41:56,770
If you find issues, you put them in the issue queue.

00:41:56,770 --> 00:42:00,080
If you have a good experience with it, write a blog post about it.

00:42:00,080 --> 00:42:07,080
If you're getting the word out about how CMI works, it's going to be really important for people and everything like that.

00:42:12,800 --> 00:42:19,760
All right. Let's go ahead and close this out.

00:42:23,140 --> 00:42:30,140
All right, so that was the crazy demo.

00:42:30,140 --> 00:42:32,140
I have a really cool slide in right after this.

00:42:34,270 --> 00:42:37,240
I think we'll do about 10 more minutes.

00:42:37,240 --> 00:42:41,820
The stuff I really want to show is to do... There's a couple fancy things you can do that

00:42:41,820 --> 00:42:47,270
goes beyond the demo, and then there are some contrib modules, and then we can do some questions,

00:42:47,270 --> 00:42:51,470
but we're here all week also and are happy to chat with this kind of stuff or sit down

00:42:51,470 --> 00:42:55,590
with you if you're building something to actually try out.

00:42:55,590 --> 00:43:00,890
Hopefully that was cool, the demo. Otherwise I can blame the conference WiFi.

00:43:00,890 --> 00:43:04,450
Sorry, for One Direction fans. I put that in, sort of really weird.

00:43:04,450 --> 00:43:07,680
Okay. So let's talk about really sort of fancy things

00:43:07,680 --> 00:43:13,380
that you can do with CMI. I talked about the Drush commands that you

00:43:13,380 --> 00:43:16,970
can use. There are the six commands that are existing

00:43:16,970 --> 00:43:20,180
right now. There may be more in the future.

00:43:20,180 --> 00:43:25,240
Again, you need to use Drush 7, so if you're using Drush 6 and it doesn't work, you need

00:43:25,240 --> 00:43:30,110
to use Drush 7. This is from drushcommands.com, so you can

00:43:30,110 --> 00:43:35,030
sort of see what's happening. The import and export are the most helpful

00:43:35,030 --> 00:43:38,550
because they do the CMI stuff, but you can do setting and getting of information and

00:43:38,550 --> 00:43:45,550
that kind of stuff. You also have an API to do those kinds of

00:43:45,750 --> 00:43:52,000
get and sets of CMI values with inside of Drupal, so this is the basic syntax to get

00:43:52,000 --> 00:43:56,590
a particular value. This is the kind of thing that will replace

00:43:56,590 --> 00:44:02,320
variable get, variable set, so if you're updating your modules or writing new modules for Drupal

00:44:02,320 --> 00:44:08,280
8, the configuration API is what you're going to use to access a lot of that data that you

00:44:08,280 --> 00:44:12,660
will want to be storing in CMI. That's the get operation, of course.

00:44:12,660 --> 00:44:18,310
As you might imagine, there's also a set and a save operation where you can actually go

00:44:18,310 --> 00:44:25,310
ahead and update those values. There also are some values that you may not

00:44:26,900 --> 00:44:31,300
want to have in the CMI. Drupal has a few things like the last time

00:44:31,300 --> 00:44:37,770
chron is run or the private key of the site that maybe you want different, maybe not,

00:44:37,770 --> 00:44:42,940
and that you can actually create these sort of state options that use the same kind of

00:44:42,940 --> 00:44:48,160
API, but isn't governed by the export. So if you were to export all the settings

00:44:48,160 --> 00:44:52,910
of your site, you wouldn't get the last time chron is run because that's not something

00:44:52,910 --> 00:44:58,710
that makes sense to push to dev or test. You can use the state API to handle that kind

00:44:58,710 --> 00:45:04,070
of stuff. You also have the ability to override specific

00:45:04,070 --> 00:45:10,340
configuration items in settings.php, so if you have API keys that you want to switch

00:45:10,340 --> 00:45:13,700
out for a dev or a test instance, you can do that.

00:45:13,700 --> 00:45:18,380
If you want to just change something for system maintenance or the site name or any option

00:45:18,380 --> 00:45:25,380
you want, you can just, in the settings array, do some overrides there, and that's really great.

00:45:25,880 --> 00:45:29,120
Other than that, there are some questions

00:45:29,120 --> 00:45:35,070
potentially, so start thinking about them. There are a few I think we preemptively know

00:45:35,070 --> 00:45:42,070
people care about, so we're interested in... Aside from us earlier, who's actually dancing

00:45:42,690 --> 00:45:49,690
to CMI? There's the answer right there. If you're wondering: "Hey, this sounds really

00:45:51,070 --> 00:45:56,520
awesome in Drupal 8, but I have to work on Drupal 7. That's where my experience is."

00:45:56,520 --> 00:46:03,520
If you want to know about how to get this in Drupal 7, there's a version of it that

00:46:03,980 --> 00:46:07,550
is called configuration management that works in a similar way.

00:46:07,550 --> 00:46:12,480
Drupal 7 has some differences, obviously, so it's not exactly the same, but it has some

00:46:12,480 --> 00:46:18,850
of the same approaches and is worth checking out if you live in a Drupal 7 version.

00:46:18,850 --> 00:46:24,330
Also, as you might guess, when I'm just setting the site name as the site name, that doesn't

00:46:24,330 --> 00:46:29,270
necessarily reflect a multilingual environment, which is, you know, very relevant for Drupal

00:46:29,270 --> 00:46:35,990
sites, and one thing that you can sort of see with the YAML files is when you're dealing

00:46:35,990 --> 00:46:42,070
with a multilingual site, the YAML files actually do the language prefects up here, so you can

00:46:42,070 --> 00:46:45,300
have different settings for different language types as well.

00:46:45,300 --> 00:46:51,300
There will probably be more contrib kind of work to make this even easier, but CMI is

00:46:51,300 --> 00:46:55,970
aware of the different languages your sites have, and you can have different configuration

00:46:55,970 --> 00:47:01,560
for different languages in pretty much the same way, which is awesome.

00:47:01,560 --> 00:47:06,970
If you're wondering about Features and what that's going to look like in Drupal 8, here's

00:47:06,970 --> 00:47:11,570
the quote. It's a little washed-out, but it's from Mike Potter, who's the Features maintainer.

00:47:11,570 --> 00:47:16,950
Features will exist for Drupal 8, but it'll really revert back to more of what it was

00:47:16,950 --> 00:47:22,270
trying to do in the first place, which is be a way to package functionality, like image

00:47:22,270 --> 00:47:29,270
galleries and blogging systems instead of being a sort of CRUD, C-R-U-D, operation for

00:47:30,320 --> 00:47:35,440
different Drupal configuration, so a lot of the Features code is going to go away, the

00:47:35,440 --> 00:47:41,850
UI will get a refresh, and you'll be able to use Features with CMI to actually package

00:47:41,850 --> 00:47:45,900
up the kinds of grouped functionality that Features promised.

00:47:45,900 --> 00:47:52,900
My hope, especially in the Drupal distribution space, which is very near and dear to my heart,

00:47:53,060 --> 00:47:59,440
that Features on Drupal 8 with CMI will give a lot of power and make a lot of reusable

00:47:59,440 --> 00:48:03,100
stuff. Because we've probably all made an image gallery

00:48:03,100 --> 00:48:10,100
or a blog post before, it would be great to reuse that kind of stuff.

00:48:10,180 --> 00:48:13,500
Also, as I mentioned, there are some really great contrib modules.

00:48:13,500 --> 00:48:19,920
If you're like, "Hey CMI is good. What can I do to extend?" there's a few modules here

00:48:19,920 --> 00:48:25,450
and more coming, obviously, all the time. There's an option called configuration read

00:48:25,450 --> 00:48:31,580
only mode, which is really awesome, to basically say, "Okay. If I can put my configuration

00:48:31,580 --> 00:48:38,580
in dev, push it to test and then live, I want that to be the way I do my site development,

00:48:38,650 --> 00:48:43,610
so let me, on the live site, lock down the ability to make any changes."

00:48:43,610 --> 00:48:47,850
So if you install this reconfiguration read only module, and you try to change the site

00:48:47,850 --> 00:48:52,800
name on the live site, it'll say, "No, no. You need to change it on the dev site," and

00:48:52,800 --> 00:48:57,740
that enforces a kind of best practice, and that's pretty awesome.

00:48:57,740 --> 00:49:02,030
There's also config inspector that lets you do a deeper dive into the different config

00:49:02,030 --> 00:49:07,700
files so you can have some visualizations and how all that works.

00:49:07,700 --> 00:49:11,830
Configuration log that will actually push out the different config changes that are

00:49:11,830 --> 00:49:18,110
happening, so you can see that kind of development pattern, and then configuration tools, which

00:49:18,110 --> 00:49:23,160
is getting a lot of development that actually allows you to push out those configuration

00:49:23,160 --> 00:49:28,750
changes to an external Git repository and sort of auto-commit each change, so that you

00:49:28,750 --> 00:49:32,060
don't even have to do the export side of the equation.

00:49:32,060 --> 00:49:37,750
You just configure your site, and every time you hit "save" of a setting, it will automatically

00:49:37,750 --> 00:49:44,750
export and push out that change to a Git repository. That's really awesome, because this creates

00:49:45,500 --> 00:49:50,400
a very accountable track history of what's done, and this creates a situation where you

00:49:50,400 --> 00:49:54,480
can sort of roll back stuff easily. These are just four modules.

00:49:54,480 --> 00:49:58,930
There are others in Drupal at work. There will be more in the future, and so if

00:49:58,930 --> 00:50:03,940
this CMI system is something that's interesting to you, maybe during the code sprint check

00:50:03,940 --> 00:50:08,440
out some of these modules, look at some of the issue queues, and sort of see where help

00:50:08,440 --> 00:50:14,540
is because the more of this stuff we build the better CMI will be.

00:50:14,540 --> 00:50:18,860
Other than that, we're happy to take a few questions from people, but we absolutely appreciate

00:50:18,860 --> 00:50:25,860
your attention to our very important presentation. -[Spanish]

00:50:34,660 --> 00:50:41,660
-So does anyone have a quick question or two? -I know this is a great problem, but do you know how does Drupal 8 treat the content staging problem?

00:50:43,380 --> 00:50:50,380
-The question is how does Drupal 8 treat the content staging problem?

00:50:50,830 --> 00:50:57,260
This is a problem that's similar to configuration in that maybe when you're writing a blog post,

00:50:57,260 --> 00:51:01,430
you don't want to have it on your live site. You want to have it on the test site so that

00:51:01,430 --> 00:51:08,430
you can push all of the content at once. CMI isn't that same system.

00:51:08,930 --> 00:51:13,890
There may be some kinds of solutions for that that could look like that, but I don't know

00:51:13,890 --> 00:51:18,620
a ton about it. Maybe someone in the room would be more helpful.

00:51:18,620 --> 00:51:20,920
-That's a really good question because I think people could sometimes get confused whether

00:51:20,920 --> 00:51:27,270
CMI or content staging are the same thing, and they're not the same thing.

00:51:27,270 --> 00:51:30,610
-There is a project called [inaudible] -Yeah.

00:51:30,610 --> 00:51:36,680
-[inaudible] -I think that as D8 becomes more mature, we'll

00:51:36,680 --> 00:51:40,560
see more people that look at some of these patterns and try to figure it out, but content

00:51:40,560 --> 00:51:44,540
staging is a super hard problem for sure. -There is some work that can be done in content

00:51:44,540 --> 00:51:49,340
staging by using some of the workflow modules, so you can actually stage your content on

00:51:49,340 --> 00:51:54,740
the live site through different states, like different drafts or unpublished states, and

00:51:54,740 --> 00:51:58,180
I've seen that handled a lot on Drupal 7 sites. I think you could do similar things in Drupal

00:51:58,180 --> 00:52:04,620
8 to handle that. -So I was just going to clarify quickly, if

00:52:04,620 --> 00:52:07,090
that's okay. Drupal 8 Core does have UUIDs, as mentioned,

00:52:07,090 --> 00:52:12,120
for all of its both content and configuration entities, so while Drupal 8 core itself does

00:52:12,120 --> 00:52:17,280
not provide content staging, the functionality is there in Core for contrib to build out

00:52:17,280 --> 00:52:21,820
sophisticated, fully featured content staging solutions, and a lot of work is already being

00:52:21,820 --> 00:52:28,820
done on that in contrib projects, even though Drupal 8 is not out yet.

00:52:28,820 --> 00:52:35,820
-Thank you. Next question? Here in the front. -I see that this is a huge step for our Drupal

00:52:38,250 --> 00:52:45,250
content and configuration management, and this is really cool, and I'd like to question

00:52:46,510 --> 00:52:53,420
something related to rolling back changes because I see that CMI is intelligent enough

00:52:53,420 --> 00:52:59,760
to see that, just like Features, you have a new YAML file with new configuration and

00:52:59,760 --> 00:53:05,030
that doesn't match what is on the database, and you just start creating stuff.

00:53:05,030 --> 00:53:12,030
If I roll back changes on version control, is it likewise intelligent to remove all this

00:53:12,690 --> 00:53:17,300
stuff from the database once I synchronize that stuff again?

00:53:17,300 --> 00:53:23,600
-The question is: Rolling back changes, what's the best practice for if I roll back changes

00:53:23,600 --> 00:53:28,980
dealing with updating my site to where it should be?

00:53:28,980 --> 00:53:35,820
I would say that the straightforward way to roll back changes is to... You can just use Git.

00:53:35,820 --> 00:53:41,900
For example, if I wanted to roll back this change, I would just Git revert this particular

00:53:41,900 --> 00:53:48,900
value, and after I do the Git revert, I then rerun my Drush command to do a config import,

00:53:50,730 --> 00:53:56,000
and then Drupal will look at the config as it is once it's reverted, and it will then

00:53:56,000 --> 00:54:00,400
import that particular state. Any of the database and those kinds of things

00:54:00,400 --> 00:54:05,270
are going to be handled automatically by Drupal because, when you do the code import off the

00:54:05,270 --> 00:54:10,780
reverted state, it shows you the config that was just there, and that becomes sort of the

00:54:10,780 --> 00:54:15,260
process that you go through. Because the YAML files are declarative configuration,

00:54:15,260 --> 00:54:20,540
if I revert this commit, I'll see the config version that existed before, and then Drupal

00:54:20,540 --> 00:54:27,540
can easily update that. Does that seem like a good answer?

00:54:28,000 --> 00:54:28,780
Awesome. -On the... Hello?

00:54:29,380 --> 00:54:31,740
-Yeah. -In the company I currently work for, we use

00:54:31,740 --> 00:54:38,080
Features because we are still on Drupal 7, and our deployment workflow uses Jenkins,

00:54:38,080 --> 00:54:43,670
and it reverts all our features on the moment of the deploy and that works perfectly, so

00:54:43,670 --> 00:54:50,670
do you see any way I could do that with config import but without having problems with the

00:54:51,520 --> 00:54:54,930
questions they made about losing configuration or something?

00:54:54,930 --> 00:54:59,810
-Yeah. The question is if we're working in an environment where we're using Jenkins to

00:54:59,810 --> 00:55:06,200
do deploys, and in Drupal 7 we can do a Features revert, one thing that I could absolutely

00:55:06,200 --> 00:55:11,020
see is when you do a deployment, there are some options that you'd probably do, like

00:55:11,020 --> 00:55:17,090
running off a .php and clearing the caches. I could easily see a third option here for

00:55:17,090 --> 00:55:21,460
Drupal 8 that says "run config import" as well, and that would be the kind of thing

00:55:21,460 --> 00:55:25,640
you could put into a Jenkins installation, especially with the Drush support. It's pretty

00:55:25,640 --> 00:55:31,160
straightforward. I think a lot of people will do that, and

00:55:31,160 --> 00:55:36,680
it's awesome you're doing that right now. -Aside from settings.php, is there any way

00:55:36,680 --> 00:55:42,660
to do environment-specific settings, like, say, this API key in test and a different

00:55:42,660 --> 00:55:47,410
one in live, that sort of thing? -Yeah, so it depends a little bit on how you

00:55:47,410 --> 00:55:54,350
architect it. The settings.php, as you mentioned, allows you to do sort of different kinds of

00:55:54,350 --> 00:55:57,720
versions. You could also store those values as different

00:55:57,720 --> 00:56:02,940
values in CMI. You could have a dev API key value and a live

00:56:02,940 --> 00:56:08,930
API key value, and then you can switch. There are a few different solutions for understanding

00:56:08,930 --> 00:56:13,360
if you're on the live environment or not. There's a habitat module that's pretty neat.

00:56:13,360 --> 00:56:19,240
Pantheon will pass you a PHP variable you can check, but really it can just come

00:56:19,240 --> 00:56:25,570
down to detect if I'm on live or not and then switch, but I could see some config stuff

00:56:25,570 --> 00:56:30,560
that could integrate with a module like habitat or environment, where you could sort of be

00:56:30,560 --> 00:56:37,080
able to quickly do the kind of stuff you might do in Drupal 7 like disable UI modules in

00:56:37,080 --> 00:56:40,910
production. You could also switch to using public API

00:56:40,910 --> 00:56:47,890
keys, and that could be a great solution. Oh, yes.

00:56:47,890 --> 00:56:54,890
-One of the things that we have is we create a field type, so the client several months

00:56:56,430 --> 00:57:00,600
after says, "I don't want this field type anymore," so with Features we have the problem

00:57:00,600 --> 00:57:06,080
that Features doesn't remove field types. We have to update hooks and that stuff.

00:57:06,080 --> 00:57:12,670
I don't know if with the new configuration management we have this problem solved in a standardized

00:57:12,670 --> 00:57:18,290
way or we have to do the same thing? -Yeah, so the question is: It looks good to

00:57:18,290 --> 00:57:23,600
add stuff; If I'm trying to remove configuration, like a field type, Features makes it a little

00:57:23,600 --> 00:57:25,250
difficult. The answer is Drupal 8 actually makes that

00:57:25,250 --> 00:57:27,990
really easy. The field type is gone. It can remove it,

00:57:27,990 --> 00:57:31,950
and then you won't have to worry about that, which will hopefully make your process of

00:57:31,950 --> 00:57:37,100
updating a little easier. -Adding something else to Carlo's question

00:57:37,100 --> 00:57:44,100
is that sometimes we need to edit check boxes or select lists, which have content which

00:57:47,810 --> 00:57:54,810
have these options, so is there a way to edit the feature without modifying all the content?

00:58:02,300 --> 00:58:09,300
We got some warnings when we needed to edit, for example, an option that will not belong

00:58:12,830 --> 00:58:18,720
anymore to the content. I don't know if I'm clear with the question.

00:58:18,720 --> 00:58:24,090
-Yeah, so the question here: You're looking to change settings that are related to pieces

00:58:24,090 --> 00:58:28,330
of content, like some options on a node or something like that?

00:58:28,330 --> 00:58:31,960
-Mm-hmm. -And you want those settings to be able to

00:58:31,960 --> 00:58:36,290
propagate. I would say there's definitely a little bit

00:58:36,290 --> 00:58:42,260
of a blurry line there between content and configuration, like if the node is published

00:58:42,260 --> 00:58:49,050
or not, is something that's currently stored as a content item but sort of looks like configuration,

00:58:49,050 --> 00:58:55,020
and I think it's going to depend on the way the modules are implemented, how they store

00:58:55,020 --> 00:58:59,890
that kind of stuff. There are definitely ways you can use CMI

00:58:59,890 --> 00:59:04,620
to do settings for pieces of content individually, because one of the things that Jess and I

00:59:04,620 --> 00:59:09,390
both said was that each piece of content has a UUID associated with it.

00:59:09,390 --> 00:59:16,390
So you could have some settings that say, "For this UUID of content, have this kind of configuration,"

00:59:16,720 --> 00:59:21,000
and that's some stuff that could exist in configuration management and would use the

00:59:21,000 --> 00:59:28,000
kind of process that I showed. -All right. Next question here. There's this

00:59:28,470 --> 00:59:35,470
very ugly thing in Features that needs review, right? This ugly state. I haven't wrapped

00:59:36,370 --> 00:59:42,900
my head around it in full to exactly understand what the case is. What I kind of know is that

00:59:42,900 --> 00:59:47,740
there are like three things that are compared there, and depending on how they differ, that

00:59:47,740 --> 00:59:54,740
can be the state that draws Features [inaudible]. My question is will this new system get us

00:59:57,300 --> 01:00:02,190
rid of the ugly place? -Yeah, so the question is Features has a needs

01:00:02,190 --> 01:00:09,190
review and an overridden state that is definitely the bane of people using Features.

01:00:09,650 --> 01:00:15,470
The answer is that CMI will make that problem go away. That because we're using declarative

01:00:15,470 --> 01:00:19,450
information, there's really no ability to have an overridden feature.

01:00:19,450 --> 01:00:24,400
I mean, you can change stuff in the database, and then you'd have to sync it, but the kind

01:00:24,400 --> 01:00:31,300
of conflicts that Features gives are not as much of an issue because you have a very explicit

01:00:31,300 --> 01:00:34,800
definition. This is the name of the site. It is going

01:00:34,800 --> 01:00:40,080
to be this and only this, and so the idea of needing review wouldn't really exist because

01:00:40,080 --> 01:00:44,080
it's only this config that you're explicitly telling it to do.

01:00:44,080 --> 01:00:50,350
That's one of the reasons why, when the CI got architechted, it took the approach that Jenkins did to have

01:00:50,350 --> 01:00:54,640
declarative configuration, so there only is this one kind of configuration.

01:00:54,640 --> 01:00:58,570
You can get stuff where you're changing the database, but the code is still different,

01:00:58,570 --> 01:01:03,290
and that's where it shows up in yellow to say it sort of needs to be synced or dealt

01:01:03,290 --> 01:01:06,100
with, but it's not going to have the same kind of craziness you're used to.

01:01:06,100 --> 01:01:13,100
Hopefully it will be a lot better. Yeah, maybe two more questions.

01:01:17,010 --> 01:01:24,010
-Sure, mine is sort of a followup. One of the problems that we've run into with Features was how

01:01:25,960 --> 01:01:31,320
to organize them and what structure to organize them in, because a lot of times we found that

01:01:31,320 --> 01:01:34,730
two different features would be trying to control the same bit of configuration like

01:01:34,730 --> 01:01:37,710
the same field used across content types, for example.

01:01:37,710 --> 01:01:40,110
-Yeah. -That sort of a thing. So this YAML style

01:01:40,110 --> 01:01:44,180
configuration, will it help to move away from that?

01:01:44,180 --> 01:01:51,110
-Yeah. The question is dealing with how packaging features configuration in multiple modules

01:01:51,110 --> 01:01:55,180
creates some conflicts. A lot of that is going to be much easier in

01:01:55,180 --> 01:01:58,180
Drupal 8. Part of it is that all of the configuration

01:01:58,180 --> 01:02:04,450
lives at a standard path, you know? You can specify it, like sites, default, config,

01:02:04,450 --> 01:02:08,910
so that as you kick config into that, it's going to go right into that one directory,

01:02:08,910 --> 01:02:12,810
so it all lives in one place, which is very helpful.

01:02:12,810 --> 01:02:19,200
However, when you create modules, you can provide configuration files that default for

01:02:19,200 --> 01:02:23,630
those modules, but you shouldn't have to have the same kind of competition.

01:02:23,630 --> 01:02:27,720
If you're dealing with two features in the same way, you can definitely have a conflict,

01:02:27,720 --> 01:02:30,850
but because it's all sort of in one place, it won't give you that needs review, we're

01:02:30,850 --> 01:02:35,480
in crazy mode kind of thing. It will be a little cleaner, and it's also

01:02:35,480 --> 01:02:40,650
something that you can audit because you can look at that config file and see what actually

01:02:40,650 --> 01:02:44,090
is there when you do the export, and that becomes really awesome.

01:02:44,090 --> 01:02:50,900
-Yeah, I would just add one thing that I think the base system of D8 CMI configuration has

01:02:50,900 --> 01:02:57,900
been re-architected, obviously, as Matt said, but it's not going to solve team workflow

01:02:57,960 --> 01:03:02,260
architecture level problems, so it's not going to be a cure-all.

01:03:02,260 --> 01:03:06,080
You still have to go in there and figure out how you're architecting your site and how

01:03:06,080 --> 01:03:12,530
you're building your functionality and who's owning what in part of your team, so this

01:03:12,530 --> 01:03:16,720
is definitely going to make it easier, but that other stuff still obviously has to happen.

01:03:16,720 --> 01:03:23,720
-Hi. My question is, I know that this is not very related with the configuration management,

01:03:24,910 --> 01:03:31,910
but is there a way in Drupal 8 to synchronize from production to contents created back to

01:03:33,660 --> 01:03:38,990
test or dev environments? -Gotcha. So the question is: Is there a way

01:03:38,990 --> 01:03:44,660
to take content from Drupal 8 and dump that back to dev or test?

01:03:44,660 --> 01:03:49,280
The answer here is going to depend a little bit on the content, but one thing that CMI

01:03:49,280 --> 01:03:55,730
makes really easy is, because CMI stores all the configuration and code, you can just do

01:03:55,730 --> 01:04:02,730
a straight database dump from your live site to your dev site and then run a config import

01:04:03,520 --> 01:04:07,540
after that. So it will take your dev config, push it into

01:04:07,540 --> 01:04:13,280
your site against your live data, and that's something that that workflow I think will

01:04:13,280 --> 01:04:18,390
be very common. That if I want to refresh my dev site, I can just pull the database

01:04:18,390 --> 01:04:23,950
from live, copy the files, and then do an import, so I'll have my current config and

01:04:23,950 --> 01:04:27,230
my production data. And that's something I think a lot of us will

01:04:27,230 --> 01:04:31,270
do, and it will solve the problem of it worked on dev but not in production, and that will

01:04:31,270 --> 01:04:35,110
be the better world in which we all want to live.

01:04:35,110 --> 01:04:36,940
Other than that, Molly and I are here all week.

01:04:36,940 --> 01:04:40,540
We're happy to keep chatting about this. There's some coffee and other stuff before

01:04:40,540 --> 01:04:43,110
more sessions. We want to be respectful, but thank you all

01:04:43,110 --> 01:04:44,980

YouTube URL: https://www.youtube.com/watch?v=RIPN-d58yrg


