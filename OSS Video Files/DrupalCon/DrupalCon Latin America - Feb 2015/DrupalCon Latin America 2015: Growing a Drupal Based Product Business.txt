Title: DrupalCon Latin America 2015: Growing a Drupal Based Product Business
Publication date: 2015-02-11
Playlist: DrupalCon Latin America - Feb 2015
Description: 
	Speakers: rszrama
Building a complex Drupal website is hard, but growing a Drupal based product business is even harder. It's not because we don't have good tools to prototype, build, and even sell Software-as-a-Service. Drupal allows us to do all that and more! However, the bigger challenge can be actually deciding what to build and then keeping it simple enough to succeed.

Commerce Guys is now over five years old, and we've learned some good and some hard lessons along the way. In this session, I'll share those lessons along with some of the product development principles behind the lean startup movement and the sales principles described in Predictable Revenue that will help your next business succeed.

We'd all love to "make money in our sleep," but the first step is actually building something people will want to use while we do.
Captions: 
	00:00:00,799 --> 00:00:04,170
Since we have a small enough room, I have to speak into the microphone even though there's

00:00:04,170 --> 00:00:09,030
only like 10 of us here because they're recording, but I can introduce myself personally and

00:00:09,030 --> 00:00:14,519
just find out who is here. I'm Ryan Szrama, the CTO for Commerce at Commerce

00:00:14,519 --> 00:00:17,259
Guys. We are a Drupal company with two business

00:00:17,259 --> 00:00:21,859
units, Platform.sh being the hosting platform and then, of course, the Drupal Commerce business

00:00:21,859 --> 00:00:27,159
where we build and deliver Drupal-based eCommerce products and services.

00:00:27,159 --> 00:00:30,069
In the room, I know there are some business owners.

00:00:30,069 --> 00:00:34,620
Who actually drives the strategy of a business here either in a technical capacity or a business

00:00:34,620 --> 00:00:36,079
capacity? Just a few?

00:00:36,079 --> 00:00:40,789
Someone, yeah? Are we developers mostly?

00:00:40,789 --> 00:00:43,100
Yeah? Okay, cool.

00:00:43,100 --> 00:00:49,160
Good to have you. This is only the second time in my life that

00:00:49,160 --> 00:00:53,379
I've made it into South America. I have been to Ecuador as well, and I still

00:00:53,379 --> 00:00:57,769
carry around my llama purse that I bought 13 years ago as my laptop bag.

00:00:57,769 --> 00:01:02,899
It's sentimental. I love being here, and it's certainly been

00:01:02,899 --> 00:01:08,120
a pleasure so far to eat and drink and explore Bogota.

00:01:08,120 --> 00:01:14,190
To introduce myself personally, I am married, father of two, and really all that my family

00:01:14,190 --> 00:01:18,650
gets to enjoy and eat and the house we get to live in is all thanks to Drupal.

00:01:18,650 --> 00:01:22,120
My career basically began at the point that I discovered Drupal.

00:01:22,120 --> 00:01:29,120
Prior to that, I was selling blenders on eBay. I started actually writing an eCommerce product

00:01:31,220 --> 00:01:38,220
for Drupal called Ubercart, which may be familiar because it started in Drupal 5 back in 2006,

00:01:39,590 --> 00:01:45,510
and there was no business behind it, but we had a cool logo and a lot of character.

00:01:45,510 --> 00:01:51,480
We really just kind of did services here and there but mostly just embraced the Drupal

00:01:51,480 --> 00:01:56,290
community and learned what it looked like to build an eCommerce system in the community,

00:01:56,290 --> 00:02:01,610
which basically looks like a lot of feature creep or scope creep because everyone has

00:02:01,610 --> 00:02:05,760
an idea about what it could do differently or better.

00:02:05,760 --> 00:02:10,460
It wasn't bad, though, because I learned a lot and got to learn from some of the best

00:02:10,460 --> 00:02:16,730
people in the Drupal community, like Dries and Larry and Eaton and Earl Miles, who created

00:02:16,730 --> 00:02:22,770
Views, and Moshe, who did the Migrate module. All these guys really kind of helped me learn

00:02:22,770 --> 00:02:27,240
and grow as a developer and then also as a business person.

00:02:27,240 --> 00:02:34,240
In 2009 at DrupalCon DC, I decided to actually build a business around Drupal-based eCommerce.

00:02:34,860 --> 00:02:37,670
At the time it was Ubercart and I had two partners.

00:02:37,670 --> 00:02:42,760
We signed the paperwork in our hotel room in Washington, DC and officially launched

00:02:42,760 --> 00:02:47,050
the business there. Quickly at the end of that year, we had a

00:02:47,050 --> 00:02:51,140
successful eCommerce project with a French company called AF83.

00:02:51,140 --> 00:02:54,990
Did anybody go to DrupalCon Paris? Josh, you did? Yeah?

00:02:54,990 --> 00:03:00,150
AF83 were some of the organizers, and they had a Drupal team, about 45 Ruby on Rails

00:03:00,150 --> 00:03:03,900
people, and 15 Drupal people. Their Drupal people came out.

00:03:03,900 --> 00:03:07,990
We merged to create Commerce Guys, headquartered in Paris.

00:03:07,990 --> 00:03:13,069
Now we have offices in London and in Ann Arbor, Michigan in the US.

00:03:13,069 --> 00:03:18,819
The whole point behind merging and joining forces was to raise venture capital to build

00:03:18,819 --> 00:03:23,990
Drupal-based eCommerce products and deliver services as well.

00:03:23,990 --> 00:03:30,990
The money was spent, at least initially, scaling the team, so hiring sales staff and some project

00:03:31,500 --> 00:03:34,770
management. Then over time, we were able to use more of

00:03:34,770 --> 00:03:38,970
the money building out our own products using Drupal or for Drupal.

00:03:38,970 --> 00:03:44,890
Of course it all began with Drupal Commerce. That was launched in 2010 to basically replace

00:03:44,890 --> 00:03:51,890
Ubercart as a more flexible framework on which we could deliver websites but also build products.

00:03:53,060 --> 00:03:57,750
Before I talk about the specific products that we've tried and failed to develop or

00:03:57,750 --> 00:04:01,950
are developing and have launched, I want to just take a step back and think about the

00:04:01,950 --> 00:04:08,950
different categories of Drupal products. I'm not really sure what a Drupal-based product

00:04:11,770 --> 00:04:15,459
looks like to you. Once category that I think we're all familiar

00:04:15,459 --> 00:04:22,409
with would be the full Drupal platform. This is where Drupal developers create a hosting

00:04:22,409 --> 00:04:28,610
and development platform for Drupal developers, and it's oriented around optimizing development

00:04:28,610 --> 00:04:34,599
workflows and DevOps and introducing tool sets like Drush and Drush Make, which is at

00:04:34,599 --> 00:04:37,680
the heart of platform to manage your code base.

00:04:37,680 --> 00:04:42,610
Really, these are tools that you could never actually build with Drupal, but all of them

00:04:42,610 --> 00:04:46,249
host Drupal websites and other types of sites, like WordPress.

00:04:46,249 --> 00:04:50,669
We host bare-bones Symfony applications and others.

00:04:50,669 --> 00:04:55,740
This is one product category that I won't really be talking about in this session because,

00:04:55,740 --> 00:05:00,550
honestly, to build something like this requires vast amounts of money.

00:05:00,550 --> 00:05:05,349
I know that Acquia has raised some $75 million today.

00:05:05,349 --> 00:05:10,559
Pantheon has raised about 30. Commerce Guys has raised about 10.

00:05:10,559 --> 00:05:14,819
Just the scale of money you need to be able to hire engineers and have them build a big

00:05:14,819 --> 00:05:21,819
platform over the course of many years, it's very expensive, and it's not personally interesting.

00:05:25,610 --> 00:05:28,770
I like to run lean. I'm more a fan of bootstrapping and the Lean

00:05:28,770 --> 00:05:32,400
Startup, so we'll get to where I see Drupal being useful for that.

00:05:32,400 --> 00:05:37,800
The next type of product category is really deeply integrated tools, where there's a third-party

00:05:37,800 --> 00:05:44,159
tool that would have applicability to Drupal users, but because it's not integrated well,

00:05:44,159 --> 00:05:51,159
it's just not used by our community. Does anybody know Volacci or Automatr?

00:05:51,349 --> 00:05:56,089
I'm not sure how far their reach extends. Volacci was really the first Drupal business

00:05:56,089 --> 00:06:00,419
to specialize in SEO, in content marketing, in search engine marketing.

00:06:00,419 --> 00:06:05,729
They really specialized in that but wanted to escape the never-ending cycle of services

00:06:05,729 --> 00:06:09,499
delivery and get into product development, where they could have recurring revenue and

00:06:09,499 --> 00:06:15,119
predictable sales. They found an automated marketing solution,

00:06:15,119 --> 00:06:18,389
and they deeply integrated it into Drupal and called it Automatr.

00:06:18,389 --> 00:06:22,949
I think for about 500 bucks a month or wherever they start, you end up with really robust

00:06:22,949 --> 00:06:27,559
marketing tools built into the back-end of Drupal, integrated into Rules, into your Views

00:06:27,559 --> 00:06:31,759
displays and all that stuff. You can basically customize the whole front-end

00:06:31,759 --> 00:06:35,779
experience of the website based on what you know about your visitors and your customers.

00:06:35,779 --> 00:06:41,830
Acquia Lift is a similar tool that Acquia has developed for site personalization.

00:06:41,830 --> 00:06:47,199
I'm sure that there are others that I'm missing. Getting closer to where I have a personal

00:06:47,199 --> 00:06:51,610
interest is Node Squirrel. Has anybody heard of this?

00:06:51,610 --> 00:06:56,580
This is basically a module with a value-added service so that the people who created the

00:06:56,580 --> 00:07:02,759
Backup and Migrate module... Ever used that to backup our site database and download schedule-automated

00:07:02,759 --> 00:07:05,639
backups? They actually created a service called Node

00:07:05,639 --> 00:07:10,669
Squirrel, where in the module itself, you put in your API key, and you can automatically

00:07:10,669 --> 00:07:15,339
backup your entire Drupal site off-site to their Cloud servers.

00:07:15,339 --> 00:07:20,149
It gives you redundant backups that are off-site, so if your web server goes down and your backups

00:07:20,149 --> 00:07:24,229
aren't destroyed with it. I think there are some other interesting workflow

00:07:24,229 --> 00:07:27,149
opportunities. Imagine, for example, a development project

00:07:27,149 --> 00:07:30,819
where you create a site, you back it up to Node Squirrel, and then somebody else is able

00:07:30,819 --> 00:07:36,499
to restore your precise version of the site using Node Squirrel into their local environment.

00:07:36,499 --> 00:07:40,080
That can be kind of interesting. What they've done is they've taken a module

00:07:40,080 --> 00:07:44,599
that they developed and maintained and actually put a business model right into the module

00:07:44,599 --> 00:07:47,759
itself, and it's actually a very valuable service.

00:07:47,759 --> 00:07:54,759
It's actually doing really well. Then we come to what Commerce Guys has actually

00:07:55,679 --> 00:07:59,999
done one of and a few other folks have really gone big on, and that's Drupal distributions.

00:07:59,999 --> 00:08:04,169
We probably don't think of Drupal distributions as products because you don't have to pay

00:08:04,169 --> 00:08:07,289
for them. We all know that we can go to Drupal.org and

00:08:07,289 --> 00:08:12,360
download the RedHen profile, the Commerce Kickstart, Open Atrium.

00:08:12,360 --> 00:08:16,589
There's not an inherent business model to a distribution.

00:08:16,589 --> 00:08:20,849
One thing you could decide to do is host a distribution and charge someone to maybe access

00:08:20,849 --> 00:08:24,960
a locked-down version of Open Atrium, or if you consider Pantheon, they actually let you

00:08:24,960 --> 00:08:28,809
one-click install a variety of installation profiles.

00:08:28,809 --> 00:08:31,999
I happen to know that they make decent money doing so because we're an affiliate and we

00:08:31,999 --> 00:08:37,919
actually get money from Pantheon on a monthly basis based on our referrals for people that

00:08:37,919 --> 00:08:42,149
are using Kickstart. There is money to be made, but the distributions

00:08:42,149 --> 00:08:45,970
themselves don't have an inherent business model, and historically they've been more

00:08:45,970 --> 00:08:52,209
of a lead generate tool for a service business than something that someone just made a lot

00:08:52,209 --> 00:08:56,310
of money on. I'll talk about our experience at Commerce

00:08:56,310 --> 00:09:01,300
Guys when I get to that slide. Finally, and this is what I believe to be

00:09:01,300 --> 00:09:06,810
the most exciting opportunity for Drupal-based product businesses, you have the Drupal-based

00:09:06,810 --> 00:09:10,610
software as a service. This company here is BioRAFT.

00:09:10,610 --> 00:09:14,970
I met the owners at DrupalCon Barcelona in 2007.

00:09:14,970 --> 00:09:17,860
They're still going strong. They're actually hiring and growing very rapidly

00:09:17,860 --> 00:09:21,300
right now. What they did is they decided that Drupal

00:09:21,300 --> 00:09:27,000
would be the perfect essentially application portal to service a market that they knew,

00:09:27,000 --> 00:09:33,959
which was laboratories, so laboratory compliance and testing and accounting, everything that

00:09:33,959 --> 00:09:38,920
goes into running a medical or research laboratory. They have used Drupal to create an application

00:09:38,920 --> 00:09:43,810
portal for them, and you can even see it in the word here, in the marketing.

00:09:43,810 --> 00:09:46,959
BioRAFT Modules. Every new feature that they put into their

00:09:46,959 --> 00:09:52,949
platform is actually a module that an individual user of the system can turn on and off.

00:09:52,949 --> 00:09:57,230
They actually developed this on the backs of live customer engagements.

00:09:57,230 --> 00:10:01,970
They have, I think, a dozen or so modules right now, and each one of those modules was

00:10:01,970 --> 00:10:07,329
funded directly by a user of their portal. They had to develop some up front, of course,

00:10:07,329 --> 00:10:11,170
to attract customers. You sign a contract.

00:10:11,170 --> 00:10:14,889
"I like your platform. If it did this one thing, I would be able to use it."

00:10:14,889 --> 00:10:19,029
"Okay, we'll write that module for you and then make it available to every other user

00:10:19,029 --> 00:10:21,389
on the platform." They're actually very open about that.

00:10:21,389 --> 00:10:25,870
I can't recall if it's in this particular screenshot, but they talk a lot about that

00:10:25,870 --> 00:10:30,759
fact that this is community-developed software that's helping all of their customers do better

00:10:30,759 --> 00:10:34,730
at their business. When you pay to have something developed,

00:10:34,730 --> 00:10:37,839
it is then available to the other customers as well.

00:10:37,839 --> 00:10:43,310
I think this is a very exciting strategy for Drupal-based product development, and I'll

00:10:43,310 --> 00:10:48,980
talk more about why later on in the presentation. At this point, is there anybody that can think

00:10:48,980 --> 00:10:55,980
of maybe a product or a product category that I've forgotten or missed?

00:10:56,319 --> 00:10:59,139
No worries if you can't. Carlos?

00:10:59,139 --> 00:11:01,350
No? Okay.

00:11:01,350 --> 00:11:07,560
I nailed it, everything. Let's talk about what Commerce Guys products

00:11:07,560 --> 00:11:13,339
have been, and my experience on the inside has been building Drupal-based products.

00:11:13,339 --> 00:11:18,620
First of all, the products we never launched. It's very unlikely that you've heard of either

00:11:18,620 --> 00:11:22,470
one of these. The first one was a product called Checkout

00:11:22,470 --> 00:11:25,540
Monitoring. We actually owned, for a while anyways, the

00:11:25,540 --> 00:11:31,209
domain checkoutmonitoring.com, and we announced it at DrupalCon San Francisco, and then we

00:11:31,209 --> 00:11:38,209
proceeded to never develop it at all. The idea behind this product was we're the

00:11:38,560 --> 00:11:42,069
maintainers of Drupal Commerce, we're at San Francisco to talk about this, to talk about

00:11:42,069 --> 00:11:46,759
the future of eCommerce on Drupal, and we're trying to think about value-added services

00:11:46,759 --> 00:11:51,519
that we can bring that maybe directly extend our module somehow, much like the Node Squirrel

00:11:51,519 --> 00:11:55,569
option that I showed earlier. The idea was that you would have essentially

00:11:55,569 --> 00:12:01,189
an uptime monitor for your checkout form. If it ever went down or somebody ever encountered

00:12:01,189 --> 00:12:05,240
unexpected errors, you would get an immediate text message that says, "Oh, this checkout

00:12:05,240 --> 00:12:08,420
form is broken," or "This coupon code that you thought was valid is not working."

00:12:08,420 --> 00:12:10,990
Something to that effect. It's a decent idea, and it could have worked

00:12:10,990 --> 00:12:15,850
its way into some sort of an analytic conversion rate management solution, but we ultimately

00:12:15,850 --> 00:12:18,879
just never invested any time into developing it.

00:12:18,879 --> 00:12:23,209
Our CTO, Damien Tournoud, was just completely busy on client work, so there was really no

00:12:23,209 --> 00:12:28,490
product vision, no resources available, and we eventually just stopped talking about it,

00:12:28,490 --> 00:12:30,720
which is a shame because we actually did have some early traction.

00:12:30,720 --> 00:12:34,610
We did one thing really right with this product, which was before we started building it we

00:12:34,610 --> 00:12:39,670
started advertising it, which seems counterintuitive, but there's no point in us building this if

00:12:39,670 --> 00:12:43,639
nobody even would ever want to use it. We did a massive mailing list at DrupalCon

00:12:43,639 --> 00:12:47,160
San Francisco. We didn't do much to market it, but we had

00:12:47,160 --> 00:12:51,060
a mailing list of hundreds of people that were interested in being notified when this

00:12:51,060 --> 00:12:55,329
solution became available. Even though this product didn't launch, that

00:12:55,329 --> 00:12:59,050
was still something we did right. Positive lessons from everything.

00:12:59,050 --> 00:13:03,519
The next thing was Silhouette, and I actually was really excited about this product too,

00:13:03,519 --> 00:13:05,870
but it never launched. It got a little bit further, though, in the

00:13:05,870 --> 00:13:10,129
sense that we hired somebody to actually plan it out and build the product.

00:13:10,129 --> 00:13:14,470
Randy Fay worked for us for a while. I think Randy Fay probably has a good reputation

00:13:14,470 --> 00:13:17,500
in Latin America. You don't know him?

00:13:17,500 --> 00:13:20,149
Oh, man. Randy... Oh, right.

00:13:20,149 --> 00:13:24,050
You live in Houston. Randy, he lives in Colorado, and once upon

00:13:24,050 --> 00:13:27,850
a time he rode his bicycle from the top of Canada down to the bottom of South America,

00:13:27,850 --> 00:13:32,839
but he said, "By the time I got to Argentina, I was tired," so instead of continuing on,

00:13:32,839 --> 00:13:37,480
they lived in Buenos Aires and for six months just worked on Drupal projects from a laptop.

00:13:37,480 --> 00:13:41,629
He's a really incredible guy. He's really good.

00:13:41,629 --> 00:13:45,509
I love Randy. Randy came in, and he specced out this product

00:13:45,509 --> 00:13:51,569
Silhouette, which is a PCI compliance assistance tool, the idea being it's impossible for Drupal

00:13:51,569 --> 00:13:58,569
Commerce as an application to be PCI certified because Drupal just by its very nature contradicts the requirements of PCI regulations

00:14:05,430 --> 00:14:09,540
if you wanted to use it to actually retain credit card information.

00:14:09,540 --> 00:14:12,279
That's why Drupal Commerce products do not retain credit card data.

00:14:12,279 --> 00:14:16,399
They use card-on-file mechanisms, off-site payment solutions, etc.

00:14:16,399 --> 00:14:20,279
What we would do at Silhouette was somebody would go to the checkout form and redirect

00:14:20,279 --> 00:14:26,689
to our payment server where we would then request the HTML from the Drupal site, present

00:14:26,689 --> 00:14:31,259
it from our proxy server so that it looked like it came from the customer's actual website,

00:14:31,259 --> 00:14:33,129
but you could securely put in credit card information.

00:14:33,129 --> 00:14:37,649
We would pass it straight to the payment gateway, and then you would go back to the Drupal site

00:14:37,649 --> 00:14:41,689
not even knowing that's what happened. That's why we called it Silhouette.

00:14:41,689 --> 00:14:47,970
The idea there was just to mitigate some of the requirements around payment data transmission.

00:14:47,970 --> 00:14:53,680
What was great about this was that Randy spent a fair amount of time speccing out the complete

00:14:53,680 --> 00:14:56,199
solution. This was the most detailed product plan we

00:14:56,199 --> 00:14:58,680
ever had. It spelled out exactly how we would build

00:14:58,680 --> 00:15:02,589
it, exactly how we would market it. I was really excited about it, but then we

00:15:02,589 --> 00:15:07,959
got this premature legal insecurity because somebody saw somewhere that someone had patent

00:15:07,959 --> 00:15:13,220
pending on a similar service. Paypal is interested in this, and these other

00:15:13,220 --> 00:15:18,079
companies are doing it, so the rationale was literally: "Well, we don't want to get sued

00:15:18,079 --> 00:15:22,610
or have to suffer a trademark or patent thing later on, so let's just not do it," which

00:15:22,610 --> 00:15:27,779
is really the wrong attitude. First of all, that's purely hypothetical.

00:15:27,779 --> 00:15:30,949
What we were doing, most likely, would have been different from what anybody else was

00:15:30,949 --> 00:15:33,470
doing because we aren't stealing anything from them.

00:15:33,470 --> 00:15:37,579
We actually came up with the idea on our own anyways, and if you get to a point where somebody's

00:15:37,579 --> 00:15:41,920
suing you because you have copied them and have threatened their market, that means you're

00:15:41,920 --> 00:15:45,870
doing something right. You've actually made it a big enough business

00:15:45,870 --> 00:15:51,189
to become a threat anyways, so really I would never scuttle a future product because I thought

00:15:51,189 --> 00:15:54,209
somebody might not like the fact that I was developing it.

00:15:54,209 --> 00:16:00,559
What we did right there was we did very carefully plan out and document and prepare to build

00:16:00,559 --> 00:16:02,459
the product. Ultimately we didn't move forward.

00:16:02,459 --> 00:16:05,899
Kind of sad. Randy left as a result because he didn't have

00:16:05,899 --> 00:16:11,389
any interesting work to do then, and we carried on and switched our focus to Commerce Kickstart 2.

00:16:11,389 --> 00:16:14,209
The idea behind Commerce Kickstart 2 was to

00:16:14,209 --> 00:16:18,629
take Drupal Commerce and a variety of contributed modules and turn Drupal into an eCommerce

00:16:18,629 --> 00:16:23,959
application that would compare head-to-head with a solution like Magento or Zen Cart or

00:16:23,959 --> 00:16:28,410
PrestaShop or the other Open Source eCommerce solutions.

00:16:28,410 --> 00:16:33,100
Kickstart 2 is very good for the Drupal community because it showed how to build a lot of different

00:16:33,100 --> 00:16:38,949
things using Drupal Commerce, like faceted search interfaces, fancy product catalogs,

00:16:38,949 --> 00:16:44,879
responsive checkout forms, and also we used a lot of Views customizations on the back-end,

00:16:44,879 --> 00:16:48,230
developed a lot of modules that are now used outside of Commerce Kickstart.

00:16:48,230 --> 00:16:52,970
Really, it was good in many ways for the community, and it was also good for our business because

00:16:52,970 --> 00:16:57,759
it actually did open up a new revenue opportunity for us that we did not necessarily consider

00:16:57,759 --> 00:17:01,079
ahead of time. It's a Drupal distribution.

00:17:01,079 --> 00:17:05,200
Like I said earlier, distributions have no inherent business model or value, but what

00:17:05,200 --> 00:17:09,770
we discovered was that thousands of people were using Commerce Kickstart either to learn

00:17:09,770 --> 00:17:16,770
how to use Drupal Commerce or to actually launch real stores.

00:17:17,180 --> 00:17:21,580
I can think of a few dozen examples of stores that took Commerce Kickstart, implemented

00:17:21,580 --> 00:17:27,910
a new theme, and launched a site and brought great value to the merchant for very little

00:17:27,910 --> 00:17:33,230
overhead or little up-front cost. We were able to basically take this market

00:17:33,230 --> 00:17:38,810
of users and developers and begin to bring in third-party service providers like Authorize.Net,

00:17:38,810 --> 00:17:45,810
Lingotek, Fastly, MailUp, and a variety of other services.

00:17:45,970 --> 00:17:50,150
They do something essential to eCommerce, whether it's email or payment or fulfillment

00:17:50,150 --> 00:17:54,540
or security, and we then help them market directly to our users.

00:17:54,540 --> 00:17:59,660
As a result, they would pay us marketing money. They would pay us integration costs.

00:17:59,660 --> 00:18:05,620
By the end of it all, I would say that Commerce Kickstart, while it hasn't been profitable,

00:18:05,620 --> 00:18:11,890
was at least a break-even proposition, but it did cost us much more and take much longer

00:18:11,890 --> 00:18:17,830
to develop than we ever anticipated. At the end of the day, it's not actually the

00:18:17,830 --> 00:18:22,240
best solution for launching most new Drupal Commerce sites.

00:18:22,240 --> 00:18:27,680
It's good if you really fit 95% of the features it implements, but in general it's better

00:18:27,680 --> 00:18:33,960
as a recipe tool, a demonstration tool, maybe a sales tool, but not necessarily a development

00:18:33,960 --> 00:18:37,780
tool, which is what we actually still need internally.

00:18:37,780 --> 00:18:42,900
It's good that it broke even, and when I say break even, I would estimate that we probably

00:18:42,900 --> 00:18:49,000
spent $300,000 or $400,000 over the course of its life cycle employing developers full-time

00:18:49,000 --> 00:18:55,130
for 6 to 12 months to really build it, customize it, design it, do usability testing, all that

00:18:55,130 --> 00:18:58,000
kind of stuff. We spent a lot of money developing it, and

00:18:58,000 --> 00:19:01,230
at the end of the day break even, but not something that you would ever build a business

00:19:01,230 --> 00:19:03,430
on. That's what we're talking about is actually

00:19:03,430 --> 00:19:08,440
growing a Drupal-based product business, not making neat tools that kind of pay for themselves

00:19:08,440 --> 00:19:13,450
but don't really get you anywhere. The next thing in the Commerce Guys product

00:19:13,450 --> 00:19:18,040
catalog was Platform.sh. This is great... Nevermind, that's not this

00:19:18,040 --> 00:19:21,030
bullet point. It's great for that reason, too.

00:19:21,030 --> 00:19:25,840
It's a very technical product that implements and really enforces what we consider to be

00:19:25,840 --> 00:19:30,710
best practices Drupal development. Not only does it do that using Drush Make

00:19:30,710 --> 00:19:37,710
files and a build process that supports automated testing and other things, but we even kind

00:19:38,470 --> 00:19:43,020
of made a technical leap in allowing the same Git repository that controls your Drupal site

00:19:43,020 --> 00:19:50,020
to also control the configuration of your services, so PHP, MariaDB, Solar, etc.

00:19:51,500 --> 00:19:55,780
The memory limits, the extension, and other configurations you can manage directly from

00:19:55,780 --> 00:20:00,230
your Git repository, so whenever you push a commit up to your platform, it actually

00:20:00,230 --> 00:20:05,030
recreates your entire environment, services included, and rebuilds the Drupal code base,

00:20:05,030 --> 00:20:12,030
and then it makes the site available again. I couldn't think of a simpler word for that.

00:20:16,160 --> 00:20:20,670
It also cost more and took a lot longer to develop than expected.

00:20:20,670 --> 00:20:27,670
We started announcing it at DrupalCon Munich, which I think was 2012, and we didn't really

00:20:28,120 --> 00:20:34,540
open it to the public until June 2014, so just last year.

00:20:34,540 --> 00:20:39,050
Two years after we expected it to be available, it was available for self service.

00:20:39,050 --> 00:20:45,210
We put our first enterprise customer on it at the end of May.

00:20:45,210 --> 00:20:49,320
It took two years longer than expected, and it was much more technically complex, and

00:20:49,320 --> 00:20:54,200
I think another thing is we rebuilt it twice before we launched it, not helpful for getting

00:20:54,200 --> 00:20:57,470
to market. At the end of the day, though, it's a very

00:20:57,470 --> 00:21:02,580
strong platform and it does drive recurring revenue to our business, which is really the

00:21:02,580 --> 00:21:06,860
foundation of Commerce Guys future growth and honestly the only reason an investor is

00:21:06,860 --> 00:21:13,170
going to give you money anyways. It's still a long ways off from breaking even

00:21:13,170 --> 00:21:17,750
not only because we had all of our three years of development costs, but even going forward

00:21:17,750 --> 00:21:22,960
we still have to support a team of Python engineers and a support staff and a sales

00:21:22,960 --> 00:21:25,210
force. It's just all really expensive.

00:21:25,210 --> 00:21:30,530
That said, Platform.sh is, for me, the most interesting aspect of Commerce Guys's future

00:21:30,530 --> 00:21:37,530
as a product business simply because it has a natural in-built recurring revenue model

00:21:38,060 --> 00:21:43,480
and it's just a robust tool that it does lend itself well toward enterprise projects and

00:21:43,480 --> 00:21:48,590
the like. You pay a lot of money to have solid platforms.

00:21:48,590 --> 00:21:52,880
A few lessons learned from these. I'm going to put them all up on the screen.

00:21:52,880 --> 00:21:59,560
First of all, if you want to build a Drupal-based product, you have to start building it.

00:21:59,560 --> 00:22:03,450
I can't think of many good reasons not to at least prototype something because prototyping

00:22:03,450 --> 00:22:09,780
is cheap for us in Drupal. For various reasons, it was managing developer

00:22:09,780 --> 00:22:13,710
time, managing resources, we just never made it happen.

00:22:13,710 --> 00:22:17,240
There comes a time when you have to decide: "Well, I think I'm just going to go ahead

00:22:17,240 --> 00:22:20,830
and try something." I think that many of us want to have some

00:22:20,830 --> 00:22:25,580
sort of a product that is generating recurring revenue and giving us more opportunities for

00:22:25,580 --> 00:22:29,080
the future. Really, you just kind of have to start.

00:22:29,080 --> 00:22:33,180
I actually started a little side project on the airplane down here just because I've been

00:22:33,180 --> 00:22:36,620
thinking about it for months and months. I finally said, "All right, I've got an hour.

00:22:36,620 --> 00:22:41,210
I'm just going to start building this." Once you begin to make progress, that sort

00:22:41,210 --> 00:22:46,790
of breeds its own sense of motivation. The other thing is to solve a simple problem

00:22:46,790 --> 00:22:51,890
first and then build complexity only if you need to.

00:22:51,890 --> 00:22:57,610
For both Commerce Kickstart and for Platform.sh, we were solving very complicated problems

00:22:57,610 --> 00:23:01,830
and we were solving them before even having anyone using them, before even knowing who

00:23:01,830 --> 00:23:05,070
would use them or why. I mentioned Checkout Monitoring had a very

00:23:05,070 --> 00:23:09,200
clear value proposition and had people that were interested in learning more about it

00:23:09,200 --> 00:23:13,460
upon its launch. For Commerce Kickstart and Platform, neither

00:23:13,460 --> 00:23:16,610
of those was the case. There were both full solutions that had to

00:23:16,610 --> 00:23:20,280
be developed over the course of years and then launched, and hopefully somebody would

00:23:20,280 --> 00:23:27,280
find them useful. If we had gone to market with a simpler solution

00:23:27,460 --> 00:23:31,090
first, we could've scaled our development maybe more intelligently, maybe come to market

00:23:31,090 --> 00:23:34,360
faster. When I think about the future of Drupal-based

00:23:34,360 --> 00:23:39,660
products, I'm thinking about things that really drive toward simplicity, not change your life

00:23:39,660 --> 00:23:44,430
all in one fell swoop and do anything imaginable under the sun for an eCommerce project or

00:23:44,430 --> 00:23:47,950
something. Also, I think, like I said already, there's

00:23:47,950 --> 00:23:50,530
a better way to leverage the tools that we have.

00:23:50,530 --> 00:23:54,880
Even with Commerce Kickstart, we use the Features module to manage the configuration of all

00:23:54,880 --> 00:23:58,570
of the different parts of Commerce Kickstart, and we didn't even leverage that in the best

00:23:58,570 --> 00:24:02,910
way that we could have. It backfires because once somebody uses Commerce

00:24:02,910 --> 00:24:07,550
Kickstart to build a site, if they customize any of these components that are wrapped up

00:24:07,550 --> 00:24:12,330
in Features, they can no longer really update from one version of Commerce Kickstart 2 to

00:24:12,330 --> 00:24:17,280
the next without probably undoing something or at least not getting new changes.

00:24:17,280 --> 00:24:21,010
I think there are better ways to use the tools that we have, and I think that a lot of the

00:24:21,010 --> 00:24:26,010
things that Dries mentioned in his keynote with respect to Drupal 8 really push Drupal

00:24:26,010 --> 00:24:31,570
forward as, in my opinion, the ideal application framework.

00:24:31,570 --> 00:24:38,120
Has anybody here built a Ruby on Rails application? No Ruby developers?

00:24:38,120 --> 00:24:41,980
I've tried. Back before I got into Drupal, I actually

00:24:41,980 --> 00:24:47,190
was looking into Ruby because my boss, who tasked me with creating Ubercart, was interested

00:24:47,190 --> 00:24:50,240
in it. We ultimately went in Drupal because we wanted

00:24:50,240 --> 00:24:57,220
more out of the box, but Ruby on Rails is kind of a darling in the startup community

00:24:57,220 --> 00:25:03,000
because it makes it really easy to scaffold a web application or a new API.

00:25:03,000 --> 00:25:07,940
I live in Greenville, South Carolina, and there's a startup accelerator there, and every

00:25:07,940 --> 00:25:13,160
other startup that comes through is based on Ruby on Rails because they can create an

00:25:13,160 --> 00:25:17,600
API in minutes and then throw a Bootstrap theme in front of it and start collecting

00:25:17,600 --> 00:25:21,260
data and doing something with it really, really fast.

00:25:21,260 --> 00:25:25,640
It's a very fast, rapid prototyping tool that does a lot of the scaffolding for you.

00:25:25,640 --> 00:25:30,010
Part of the reason it's so good at that is because basically once some people started

00:25:30,010 --> 00:25:36,250
doing that, a lot of people sort of piled on and also used Ruby on Rails as a web application

00:25:36,250 --> 00:25:39,920
development tool. Just by having more people doing the same

00:25:39,920 --> 00:25:44,910
thing on it, the tooling got better and better and it got easier and easier over time.

00:25:44,910 --> 00:25:49,160
I think that Drupal 8 is really putting the Drupal community in a position to where we

00:25:49,160 --> 00:25:55,520
can really replace Ruby on Rails and perhaps Node.js in some places as a go-to tool for

00:25:55,520 --> 00:25:59,970
creating new web applications. What are we good at in Drupal?

00:25:59,970 --> 00:26:03,550
First of all, rapid prototyping, even through the user interfaces, is something that we

00:26:03,550 --> 00:26:07,680
do better than any other tool. You can quickly create your data model, quickly

00:26:07,680 --> 00:26:13,460
create your different presentation layers, and quickly create a web service or REST API

00:26:13,460 --> 00:26:19,360
based on what you've just done. One of my ideas that I haven't just built

00:26:19,360 --> 00:26:23,810
it yet is called Like Shed, and the idea is it's just a storage container for the things

00:26:23,810 --> 00:26:29,600
that you like on the internet using maybe perhaps a browser plugin to record anytime

00:26:29,600 --> 00:26:33,730
I hit a Facebook "like" button or retweet something that has a link in it or upvote

00:26:33,730 --> 00:26:37,090
a link on Reddit. It just puts all of these into one sentiment

00:26:37,090 --> 00:26:42,420
storehouse where I can manage all of the things that I like on the internet, a bit similar

00:26:42,420 --> 00:26:48,180
to like a Delicious or a bookmarking service, but it's actually based more around non-tangible

00:26:48,180 --> 00:26:55,180
actions that you might take. Anyway, if I wanted to right now I could prototype

00:26:55,210 --> 00:27:00,300
that by creating a content type that has a URL and a user ID that has views that show

00:27:00,300 --> 00:27:04,030
all of the things that are in my Like Shed, and then it has a REST API where I could then

00:27:04,030 --> 00:27:08,100
integrate that into other websites and then maybe start selling myself products based

00:27:08,100 --> 00:27:13,280
on the things that I like all over the internet. I can literally build that all in Drupal without

00:27:13,280 --> 00:27:17,280
writing a single line of code, and I can export it all to Features and then manage it as a

00:27:17,280 --> 00:27:18,930
product. I can do that.

00:27:18,930 --> 00:27:22,400
I personally wouldn't adopt that approach, but I could if I just wanted to prototype

00:27:22,400 --> 00:27:27,280
it and prove the model. We're really good at that in Drupal.

00:27:27,280 --> 00:27:33,040
Another thing that we're really good at is managing code and configuration in our VCS

00:27:33,040 --> 00:27:38,310
and also testing changes before deployment because we have these platforms as a service

00:27:38,310 --> 00:27:43,380
that enforce best practices for DevOps, and we also have modules like Features that let

00:27:43,380 --> 00:27:49,450
us export configuration into code and manage it in our source code repository.

00:27:49,450 --> 00:27:54,570
We're really good at this in Drupal. I'm not sure what the equivalents are in other

00:27:54,570 --> 00:27:59,340
communities, but this does play into our ability to rapidly prototype and manage a Drupal-based

00:27:59,340 --> 00:28:03,060
product. Finally, we're also really good about access

00:28:03,060 --> 00:28:07,250
control. The Drupal role system and permission system

00:28:07,250 --> 00:28:10,280
and then a variety of other modules and things that have been built on top of that, such

00:28:10,280 --> 00:28:15,430
as content access, access control lists, organic groups, and a variety of other things make

00:28:15,430 --> 00:28:21,350
us an ideal tool for giving privilege access to certain pieces of content on the site and

00:28:21,350 --> 00:28:26,180
then licensing out access to that content to different consumers of the web service,

00:28:26,180 --> 00:28:31,050
and, thanks to Drupal Commerce, even billing for usage of these services and access to

00:28:31,050 --> 00:28:34,310
these APIs. We're really good at this in Drupal, which

00:28:34,310 --> 00:28:41,310
is why products like BioRAFT are so cool because they're basically taking all of Drupal's strengths

00:28:42,320 --> 00:28:49,110
and using Drupal to build a product that solves problems that they've surfaced in their target

00:28:49,110 --> 00:28:52,450
market. It kind of depends on either having clients

00:28:52,450 --> 00:28:57,370
or having personal experience in the market you're trying to target, so you know the problems,

00:28:57,370 --> 00:29:01,820
the pain points, and can have access to people to propose solutions.

00:29:01,820 --> 00:29:07,120
Assuming you can find those either through sales or personal relationships, building

00:29:07,120 --> 00:29:13,130
the platform out to solve those problems using Drupal is a very rational course of action

00:29:13,130 --> 00:29:16,350
and, in my opinion, it's a very strong course of action.

00:29:16,350 --> 00:29:23,230
I actually consult for a friend's business where there's no content management requirement

00:29:23,230 --> 00:29:28,150
in his product. There's really not much of anything that you

00:29:28,150 --> 00:29:33,280
would typically think of as a Drupal feature. I thought, "Well, maybe we could build this

00:29:33,280 --> 00:29:38,660
out using Node.js and Express, and let's just make a custom node app to serve up all of

00:29:38,660 --> 00:29:42,710
your content and reports, analytics." I began doing it, and I was like, "Wait a

00:29:42,710 --> 00:29:47,870
minute. How do you even manage user accounts here? What about an interface for resetting

00:29:47,870 --> 00:29:51,580
your password? Okay, how about email solutions and so on and so forth?"

00:29:51,580 --> 00:29:55,520
All of these things that I take for granted in Drupal I realized I didn't want to have

00:29:55,520 --> 00:29:58,630
to build from scratch. I said, "Look, just build it using Drupal

00:29:58,630 --> 00:30:03,080
and get all of this for free, and because we can alter anything you can certainly alter

00:30:03,080 --> 00:30:08,200
the stuff out that is not relevant to your business or just not enable those modules."

00:30:08,200 --> 00:30:14,250
Basically, it lets you, want you have a solution you want to develop, quickly build it and

00:30:14,250 --> 00:30:17,730
then start selling it. Additionally, BioRAFT is cool because they

00:30:17,730 --> 00:30:23,590
were able to introduce features based on customer demand and use the Drupal API to role them

00:30:23,590 --> 00:30:27,980
out in a modular fashion. Picture, if you will, you maintain a distribution

00:30:27,980 --> 00:30:32,230
that represents your product, and you make sure that it's upgradable from release to

00:30:32,230 --> 00:30:36,300
release to release, and every time a new release comes out, maybe it has a new module in it

00:30:36,300 --> 00:30:39,840
that you can then turn on for your customers, but you don't give them access to the back

00:30:39,840 --> 00:30:41,850
end. You just say, "Look, if you want to enable

00:30:41,850 --> 00:30:47,130
this module, that's an extra $50 a month." You do that for them, and it's just using

00:30:47,130 --> 00:30:54,130
the Drupal tools and concepts to charge for the additional features that you're developing

00:30:56,580 --> 00:31:01,380
and rolling out for your customers. What's also cool about this is that they followed

00:31:01,380 --> 00:31:03,850
customer demand. They didn't just imagine they knew what everybody

00:31:03,850 --> 00:31:06,740
in their market needed. They waited until somebody had signaled "I

00:31:06,740 --> 00:31:10,460
will pay for this," and then developed it and then turned it on for them without impacting

00:31:10,460 --> 00:31:15,140
all of the other users of their software. I really think that they provide an example

00:31:15,140 --> 00:31:19,990
for anyone to follow, and I think that this is true even if your market is much simpler

00:31:19,990 --> 00:31:25,370
in their requirements than medical testing laboratories, handling bio-hazardous material

00:31:25,370 --> 00:31:29,110
or something. For example, I haven't fully fleshed this

00:31:29,110 --> 00:31:34,360
out, but one of my strategies for the future is to never build a Drupal website ever again.

00:31:34,360 --> 00:31:38,860
I'm tired of building websites where I go get Drupal and I grab some modules and I throw

00:31:38,860 --> 00:31:40,770
them up on someone's server and say, "Hey, good luck with that."

00:31:40,770 --> 00:31:43,360
Maybe once in a while I'll check in and make sure everything is up-to-date.

00:31:43,360 --> 00:31:49,350
Instead, my wife actually needs a website for her doula business.

00:31:49,350 --> 00:31:55,810
She's a labor coach and assists women in delivery, so she wants to be able to share her stories,

00:31:55,810 --> 00:32:00,740
market to pregnant moms in our area, so she needs just really simple content management

00:32:00,740 --> 00:32:03,510
functionality. Instead of just building her that site, I'm

00:32:03,510 --> 00:32:08,320
going to create for her a distribution that I just begin to maintain as my own product,

00:32:08,320 --> 00:32:11,930
my own Drupal distribution, that if anybody else in my family needs a website, they're

00:32:11,930 --> 00:32:15,530
getting that and not something that I'm building from scratch and then having to maintain for

00:32:15,530 --> 00:32:18,500
them. I really came to that conclusion at Drupalgeddon.

00:32:18,500 --> 00:32:24,600
You guys know the phrase Drupalgeddon, where Drupal 7.3.2 had this really bad security

00:32:24,600 --> 00:32:28,280
fix in it, so you had to go and update all of your sites immediately.

00:32:28,280 --> 00:32:31,710
I realized I had one friend over on HostGator, not in source control.

00:32:31,710 --> 00:32:36,130
I had two of my own websites on Digital Ocean, one of them still on Rackspace, and a few

00:32:36,130 --> 00:32:42,210
here, there, and everywhere, two on Pantheon, and I think I had one on Platform.sh as well.

00:32:42,210 --> 00:32:46,770
It was insane to have to go through and update all of these different sites in all manner

00:32:46,770 --> 00:32:51,780
of different fashions. I realized that I could treat even my own

00:32:51,780 --> 00:32:57,520
personal customers as my target market for somebody that wants a product that delivers

00:32:57,520 --> 00:33:03,780
a simple content editing experience and simple brochureware site, for example.

00:33:03,780 --> 00:33:08,790
We're actually going to take this philosophy to create a new foundation within Commerce

00:33:08,790 --> 00:33:14,190
Guys for the work that we're doing. As I mentioned before, Kickstart 2 is not

00:33:14,190 --> 00:33:21,190
a sufficient starting point for our majority customer, which is someone with a B2B website,

00:33:22,470 --> 00:33:28,350
a digital commerce website, or in many cases just someone that has a lot of different services

00:33:28,350 --> 00:33:32,400
they integrate with on the back end and that don't even use the website itself to administer

00:33:32,400 --> 00:33:37,850
their product catalog or orders or customers. There's too much that you have to turn off,

00:33:37,850 --> 00:33:41,440
and because of the way we built the features and because of the way we manage the project,

00:33:41,440 --> 00:33:45,760
it's hard to take Commerce Kickstart 2 and turn select things off and replace them with

00:33:45,760 --> 00:33:50,520
other modules. It's just not the best experience.

00:33:50,520 --> 00:33:57,520
We're going to start from scratch with essentially a new internally managed distribution of Drupal

00:33:57,840 --> 00:34:01,940
that actually gives us a launching point for these projects.

00:34:01,940 --> 00:34:06,890
Instead of taking the Kickstart 2 approach where we just imagine what would every B2B

00:34:06,890 --> 00:34:13,379
website in the world want out of our platform, we will build it up over time as clients demand

00:34:13,379 --> 00:34:19,149
new features, implement them in our internally managed distribution, and ideally begin to

00:34:19,149 --> 00:34:23,639
sell what are called managed eCommerce engagements. That's where, instead of paying you $50,000

00:34:23,639 --> 00:34:29,919
to build a custom eCommerce website, somebody pays you a smaller amount on a monthly basis

00:34:29,919 --> 00:34:34,080
and some percentage of sales, and the trade-off for them is they don't have to make as big

00:34:34,080 --> 00:34:40,820
of an up-front investment, and your revenue is basically tied to their success.

00:34:40,820 --> 00:34:45,830
For an eCommerce company, that's a much better long-term strategy than starting every month

00:34:45,830 --> 00:34:50,820
at $0 dollars in sales, having to hit--at Commerce Guys, I can't even remember--a few

00:34:50,820 --> 00:34:55,500
hundred thousand dollars in new engagements on a monthly basis, and just starting over

00:34:55,500 --> 00:35:00,140
from scratch every single month. If you can begin to amass a pool of clients

00:35:00,140 --> 00:35:05,970
that are based on recurring revenue that you can actually improve their website and drive

00:35:05,970 --> 00:35:10,590
new business to them and, therefore, profiting more yourself, it creates a much better symbiotic

00:35:10,590 --> 00:35:14,210
relationship. We'll be doing this internally.

00:35:14,210 --> 00:35:18,730
Ultimately, we will want to narrow our focus in the future.

00:35:18,730 --> 00:35:22,880
Once we have the base functionality covered... Anybody can do this.

00:35:22,880 --> 00:35:25,910
Commerce Guys is doing this. I'll be doing it for my personal websites,

00:35:25,910 --> 00:35:30,000
blogs, and that kind of thing. You can do it for any of your customers as

00:35:30,000 --> 00:35:34,200
well. Eventually, we'll have all of the usual things

00:35:34,200 --> 00:35:41,200
covered, like pretty invoice emails, faceted search, again, a turn-key solution for that.

00:35:41,280 --> 00:35:45,750
Then we can choose to narrow our focus and create a solution for a specific vertical

00:35:45,750 --> 00:35:48,570
market. Right now, I can say that one of my ideal

00:35:48,570 --> 00:35:55,570
ones is private content websites where somebody is selling white papers or analysis reports

00:35:57,300 --> 00:36:01,230
or even just access to content on the website itself.

00:36:01,230 --> 00:36:05,750
We've had many different customers that do that, and they all need the same things.

00:36:05,750 --> 00:36:11,680
It's the Commerce modules with commerce license or the Content Access module with the Commerce

00:36:11,680 --> 00:36:15,660
License File module. You put it all together and there is in there

00:36:15,660 --> 00:36:21,970
a turn-key solution that you can actually market as a software, as a service for analyst

00:36:21,970 --> 00:36:26,870
companies to sell their white papers. Once you do that, it actually becomes easier

00:36:26,870 --> 00:36:30,000
to sell because you actually have a target that you're throwing darts at instead of just

00:36:30,000 --> 00:36:33,080
saying, "Well, I'm just going to do any eCommerce project."

00:36:33,080 --> 00:36:38,540
You can't really build a sales campaign around any eCommerce because you need some target

00:36:38,540 --> 00:36:45,000
and some way to narrow your focus so that you can actually chart your effectiveness

00:36:45,000 --> 00:36:50,480
as a sales force. I actually have already been doing this.

00:36:50,480 --> 00:36:55,340
Like I said, I have my friend's company Bellweather, where he is building an application portal

00:36:55,340 --> 00:36:59,350
for power companies. Because he was an energy analyst, he developed

00:36:59,350 --> 00:37:05,890
a new model for weather normalization, which is just a part of the energy forecasting process.

00:37:05,890 --> 00:37:10,100
He wanted some way to deliver his analysis to his customers.

00:37:10,100 --> 00:37:14,520
I said, "Oh, great. Here's Drupal. I can rapidly prototype for you an application dashboard

00:37:14,520 --> 00:37:18,280
that only people from these companies have access to and us. Since I know how to use

00:37:18,280 --> 00:37:22,630
Drush Make, and I know how to create a distribution, I know how to write modules, you can manage

00:37:22,630 --> 00:37:26,860
all of this in source code and turn it on turn-key for every single one of your customers

00:37:26,860 --> 00:37:32,630
on their own version of the site and keep them all up to date as you go."

00:37:32,630 --> 00:37:35,260
It's actually happening. It's very similar to BioRAFT, although I don't

00:37:35,260 --> 00:37:38,830
know exactly how they manage individual customer portals.

00:37:38,830 --> 00:37:42,840
The strategy I advised them on was just one Drupal site per customer.

00:37:42,840 --> 00:37:47,080
You could do it a variety of ways depending on the type of product you're building.

00:37:47,080 --> 00:37:49,970
It's basically proven the model. I think it's worked.

00:37:49,970 --> 00:37:55,650
I think it's working for Bellweather, and what's making it work is not building something

00:37:55,650 --> 00:38:00,520
and hoping somebody will then come and find it and use it, but rather going out there.

00:38:00,520 --> 00:38:05,410
I had them call every utility they could think of and find somebody who needed their tool

00:38:05,410 --> 00:38:10,140
or something similar, and eventually they closed a couple of projects around tracking

00:38:10,140 --> 00:38:15,240
outages for power companies and delivering better weather forecasts and things like that.

00:38:15,240 --> 00:38:19,550
Very similar to BioRAFT and, really, my preferred strategy for growing a Drupal-based product

00:38:19,550 --> 00:38:24,350
business. The reason being--these are the resources

00:38:24,350 --> 00:38:30,320
I would recommend for you to learn more--is because it's iterative, it's based on direct

00:38:30,320 --> 00:38:33,020
customer feedback, and it's bootstrapped. It's running lean.

00:38:33,020 --> 00:38:40,020
The idea here is a guy named Ash Maurya created "Running Lean," which is his paradigm for

00:38:41,350 --> 00:38:44,340
iterating your way from plan A to a plan that works.

00:38:44,340 --> 00:38:49,920
He says you start every new product that you're developing by identifying a problem and then

00:38:49,920 --> 00:38:53,720
proposing a solution, finding enough people to say, "Yes, I would appreciate this solution

00:38:53,720 --> 00:38:58,140
to this problem," then you develop the solution and then figure out how to market it, which

00:38:58,140 --> 00:39:02,920
is, "How much do I sell it for? Who do I sell it to? How do I reach those customers?" and

00:39:02,920 --> 00:39:06,780
all that. In this book, he literally goes through from

00:39:06,780 --> 00:39:11,830
the very beginning all the steps that you would need to build, grow, scale a product

00:39:11,830 --> 00:39:16,170
business, and it's specifically written around software as a service businesses, although

00:39:16,170 --> 00:39:20,940
it's applicable to other types of products. He even did something funny, which was he

00:39:20,940 --> 00:39:26,010
used this book itself as an example. Before ever writing the book, he actually

00:39:26,010 --> 00:39:29,270
created a landing page where he said, "I'm writing about this. Who want's an advance

00:39:29,270 --> 00:39:31,810
copy?" He basically committed to himself that once

00:39:31,810 --> 00:39:35,690
he could convince 1,000 people to join his mailing list, then he would begin writing

00:39:35,690 --> 00:39:37,800
the book, but he wouldn't write it all at once.

00:39:37,800 --> 00:39:41,920
He'd write chapter by chapter by chapter, get feedback on each chapter as he went, and

00:39:41,920 --> 00:39:48,300
finally end up with an end product that was first published himself as a PDF eBook and

00:39:48,300 --> 00:39:51,820
then eventually got picked up by O'Reilly. Now he's on second edition, and he's begun

00:39:51,820 --> 00:39:58,350
to develop a whole set of products that are based around his "Running Lean" paradigm.

00:39:58,350 --> 00:40:05,350
One word here is that, though I am part of a venture-backed startup, I do much prefer,

00:40:06,840 --> 00:40:10,470
at least right now, the lean startup method, which is to not just go raise venture capital

00:40:10,470 --> 00:40:16,380
and try to build something. The potential for a misalignment is high.

00:40:16,380 --> 00:40:20,970
Once of the things he says is running lean is not about being cheap and trying to develop

00:40:20,970 --> 00:40:25,940
a product without ever investing any money, but it's about being efficient with resources

00:40:25,940 --> 00:40:29,790
you have but also not bringing in external investment prematurely.

00:40:29,790 --> 00:40:33,350
He has, really close to the beginning of this book--and I highly recommend it if you're

00:40:33,350 --> 00:40:38,180
at all interested in building a product business--he basically shows on a graph where you have

00:40:38,180 --> 00:40:40,810
the different steps in the life cycle of the product.

00:40:40,810 --> 00:40:44,400
I already mentioned them. Identifying a problem, developing your solution

00:40:44,400 --> 00:40:48,510
that would fit that problem, then finding a product market fit, and then once you know

00:40:48,510 --> 00:40:54,730
that you have a product that solves a specific problem, then you scale it.

00:40:54,730 --> 00:40:58,810
It's at that point that you're actually ready to go and just basically take money to invest

00:40:58,810 --> 00:41:01,110
in reaching the market that you already know exists.

00:41:01,110 --> 00:41:05,230
You've already proven the product is valuable and worthwhile, but it's at that point that

00:41:05,230 --> 00:41:09,520
you want to start scaling out your resources because if you do it earlier, the money works

00:41:09,520 --> 00:41:14,690
against you because your investors are looking for a return at the wrong time.

00:41:14,690 --> 00:41:19,680
When you're still needing to rule out products and rule out solutions and rule out strategies,

00:41:19,680 --> 00:41:24,480
somebody's looking to see you growing successively year over year.

00:41:24,480 --> 00:41:27,150
I really recommend this book, and I also recommend this tool.

00:41:27,150 --> 00:41:29,850
It's the lean canvas. You can try it out.

00:41:29,850 --> 00:41:34,390
I think it's still free at leanstack.com. What it does is it gives you a one-page business

00:41:34,390 --> 00:41:40,720
model where you can sit down and identify from the top left around what problem are

00:41:40,720 --> 00:41:44,960
you solving, what's your solution, how do you identify success for people that are using

00:41:44,960 --> 00:41:49,710
your solution, what is therefore your unique value proposition, which is somehow a combination

00:41:49,710 --> 00:41:53,590
of all these things, and before you embark on building this product, what is it that

00:41:53,590 --> 00:41:56,960
gives you your unfair advantage? Why would somebody buy your solution to this

00:41:56,960 --> 00:42:01,369
problem over somebody else's? This is something that's hard to reproduce,

00:42:01,369 --> 00:42:05,690
ideally, so you aren't disrupted once you begin to prove a market.

00:42:05,690 --> 00:42:10,970
Then he also has segments that deal with: Who are my customers, what are the channels

00:42:10,970 --> 00:42:15,190
through which I'll reach them, and what are my revenue streams once I can reach them?

00:42:15,190 --> 00:42:20,490
This is a one-page business model that's a good practice for you even in evaluating the

00:42:20,490 --> 00:42:22,720
different things that you think you might want to build.

00:42:22,720 --> 00:42:25,440
If you're anything like me, I have a notebook full of product ideas.

00:42:25,440 --> 00:42:30,710
Something comes to me, I write it down. Eventually I'll get around to basically making

00:42:30,710 --> 00:42:34,760
a canvas for each one, and then I can decide which one do I invest my time in.

00:42:34,760 --> 00:42:38,270
It's going to be the one that looks best on paper, ideally.

00:42:38,270 --> 00:42:42,760
Also, it's going to be the one that I have an immediate revenue opportunity for.

00:42:42,760 --> 00:42:49,360
With Bellweather, it was power companies needed a service, so the tool came second and then

00:42:49,360 --> 00:42:55,890
the actual product can be developed from there. Another thing to bear in mind...

00:42:55,890 --> 00:43:01,270
Does anybody read Paul Graham? He's part of Y Combinator. It's a startup

00:43:01,270 --> 00:43:05,760
accelerator in California. He has a really good blog post that I recommend.

00:43:05,760 --> 00:43:10,280
It's called "Do Things That Don't Scale." The idea is that when you're building a product

00:43:10,280 --> 00:43:16,990
out from scratch, you have to be willing to basically use yourself and your time and your

00:43:16,990 --> 00:43:20,720
resources in ways that wouldn't scale. They wouldn't be right.

00:43:20,720 --> 00:43:23,560
Once you have your product market fit, you wouldn't continue to do things that don't

00:43:23,560 --> 00:43:28,430
scale while you're trying to scale because that's kind of counter-productive.

00:43:28,430 --> 00:43:33,150
In the beginning, you could actually take your business model, and you could accomplish

00:43:33,150 --> 00:43:37,700
it without building a single thing. In the case of Bellweather, the first customer

00:43:37,700 --> 00:43:42,950
wanted to correlate the number of customers without power per hour.

00:43:42,950 --> 00:43:48,930
At 9 a.m. on June 2, 2010, how many people didn't have power?

00:43:48,930 --> 00:43:54,610
Correlate that to wind speed and precipitation and then basically determine how weather influences

00:43:54,610 --> 00:44:00,270
power outages over time. The analyst that developed this whole model,

00:44:00,270 --> 00:44:06,070
he is hand generating the reports using R, which is a programming language, from scratch,

00:44:06,070 --> 00:44:10,330
putting the results into a Word document, printing it as a PDF, and emailing it to the

00:44:10,330 --> 00:44:13,520
customer. Obviously could not do that for a dozen different

00:44:13,520 --> 00:44:17,500
customers, but because he has only one, until he can do all that automated through some

00:44:17,500 --> 00:44:24,210
web system, he can do that and make his 1500 bucks a month because he's able to do so.

00:44:24,210 --> 00:44:28,690
Just because you have the grand vision on paper doesn't mean you can't begin doing things

00:44:28,690 --> 00:44:31,510
up front that don't scale. I've heard of things...

00:44:31,510 --> 00:44:35,050
I think it was Stripe. Paul Graham talks about it in that article.

00:44:35,050 --> 00:44:38,450
They would literally hand enter credit card data...

00:44:38,450 --> 00:44:40,840
No, I know what it was. They were promising that whenever you sign

00:44:40,840 --> 00:44:46,420
up for Stripe, you would get a merchant account, and it wasn't that Stripe had integrated with

00:44:46,420 --> 00:44:50,610
some merchant account provisioning API. They would literally just take the customer's

00:44:50,610 --> 00:44:55,480
information and very quickly go enter it into a form and create these merchant accounts

00:44:55,480 --> 00:44:59,050
for their customers. For the customer, they wouldn't know that

00:44:59,050 --> 00:45:03,010
it was just the founder of the company doing it by hand, but that's how they were able

00:45:03,010 --> 00:45:07,000
to get new business and then automate it over time to scale.

00:45:07,000 --> 00:45:11,150
Finally, there's a resource called "Predictable Revenue."

00:45:11,150 --> 00:45:17,440
"Predictable Revenue" is basically a crash course on creating a winning sales strategy.

00:45:17,440 --> 00:45:21,930
If you have a product and you want to take it to market, this book tells you exactly

00:45:21,930 --> 00:45:28,850
how to do that from scratch with no assumptions whatsoever about what you know about sales.

00:45:28,850 --> 00:45:34,350
It's written by the guy who took Salesforce.com from $0 in recurring revenue to $100 million

00:45:34,350 --> 00:45:40,110
in annual recurring revenue. He basically identifies all of the key activities

00:45:40,110 --> 00:45:46,090
and all of the types of people you would need to have to scale out a new business.

00:45:46,090 --> 00:45:49,230
He does it in such a way that it's broken down.

00:45:49,230 --> 00:45:51,119
It's very clear. It's very useful.

00:45:51,119 --> 00:45:56,710
He talks about a strategy called lead prospecting, which is essentially the web 2.0 equivalent

00:45:56,710 --> 00:46:01,730
of cold calling, but cold calling still works. If you know what your target market is, you

00:46:01,730 --> 00:46:06,980
can get a phone book and you can call people. He starts even there and just basically provides

00:46:06,980 --> 00:46:11,350
the strategy that took Salesforce to $100 million in revenue.

00:46:11,350 --> 00:46:16,270
It actually has worked out wildly successfully for a successful Drupal company you may have

00:46:16,270 --> 00:46:19,270
heard of. In fact, I see at least one shirt here.

00:46:19,270 --> 00:46:24,560
On the front page of predictablerevenue.com, Acquia is a prime case study because Acquia

00:46:24,560 --> 00:46:27,850
has essentially reproduced the exact same success.

00:46:27,850 --> 00:46:32,580
Acquia's revenue is powered by the "Predictable Revenue" methodology, and it's also taken

00:46:32,580 --> 00:46:36,800
them up to essentially $100 million in annual revenue.

00:46:36,800 --> 00:46:40,200
Highly recommended. In fact, Tim Bertrand writes articles about

00:46:40,200 --> 00:46:43,160
this. Acquia--one of their strategies is to give

00:46:43,160 --> 00:46:45,820
back more. Dries was telling me this is part of their

00:46:45,820 --> 00:46:47,910
DNA. They want to give back more, and that extends

00:46:47,910 --> 00:46:51,600
to every area of their business, not just contributing to the Drupal software, but even

00:46:51,600 --> 00:46:55,270
educating all of us on how they do what they do.

00:46:55,270 --> 00:47:00,900
Tim's article around how they're using this model to sell their products and services

00:47:00,900 --> 00:47:04,180
is very enlightening, and I highly recommend you take advantage of that.

00:47:04,180 --> 00:47:07,750
They even share sales numbers. They sell their strategies.

00:47:07,750 --> 00:47:11,240
We know exactly what Acquia has done to generate their success.

00:47:11,240 --> 00:47:14,780
The good news is it's literally not rocket science.

00:47:14,780 --> 00:47:19,380
It's just discipline. The tools and methodologies in both "Running

00:47:19,380 --> 00:47:22,410
Lean" and "Predictable Revenue" will give you your start.

00:47:22,410 --> 00:47:26,119
Granted, Acquia raised a bunch of money to do what they've done to scale so quickly,

00:47:26,119 --> 00:47:30,609
but I think for many of us the draw is more of a lifestyle business where we can build

00:47:30,609 --> 00:47:37,609
and maintain a product that supports our lifestyle. It doesn't necessarily make us a public company.

00:47:43,190 --> 00:47:47,540
As I said before, I really believe that Drupal 8 will be the ideal platform for creating

00:47:47,540 --> 00:47:51,910
new web applications. I feel strongly about this, one, because of

00:47:51,910 --> 00:47:57,880
configuration management, which Dries talked about, which gives us a better way to manage

00:47:57,880 --> 00:48:02,230
all of the things that we configure and put into code, but also because of the RESTful

00:48:02,230 --> 00:48:08,100
web services module in core giving us much better REST API support out of the box than

00:48:08,100 --> 00:48:11,150
we've ever had in Drupal 7. If you're considering:

00:48:11,150 --> 00:48:13,440
"Do I want to build a Drupal-based product?" "Maybe."

00:48:13,440 --> 00:48:16,330
"Will it have an API?" "Yeah, maybe."

00:48:16,330 --> 00:48:20,420
Maybe the one thing for you to do would be to start learning Drupal 8 now and plan to

00:48:20,420 --> 00:48:24,700
prototype it on Drupal 8 instead of either using Drupal 7 or building it from scratch

00:48:24,700 --> 00:48:28,820
in some other framework. As with the Ruby on Rails community, the more

00:48:28,820 --> 00:48:33,720
of us that decide Drupal can be this tool for our products, then the better the tooling

00:48:33,720 --> 00:48:39,410
will get and the simpler it will be for all of us to continue to do this sort of thing.

00:48:39,410 --> 00:48:42,880
That is the gist of my presentation. We've got five minutes or so here to take

00:48:42,880 --> 00:48:49,880
questions if there are any, including secrets about Commerce Guys if you want to know numbers

00:48:50,150 --> 00:48:57,150
or the dirty details. I'm happy to dish.

00:48:57,220 --> 00:49:01,500
In that case, I will make myself available afterwards if anybody wants to talk or brainstorm

00:49:01,500 --> 00:49:05,000
or discuss ideas. Also, Josh is going to be talking about conversion

00:49:05,000 --> 00:49:09,880
rate optimization in not just Drupal Commerce but also just in general.

00:49:09,880 --> 00:49:15,150
That will be in some other room in 15 minutes. Across the hall in 20 minutes at 2:15, and

00:49:15,150 --> 00:49:19,240
then if you're interested in the future of Drupal Commerce on Drupal 8, I'll be presenting

00:49:19,240 --> 00:49:25,990
that on behalf of Bojan Zivanovic after the coffee break somewhere else.

00:49:25,990 --> 00:49:28,690
Upstairs somewhere, I think. -It's in the same room.

00:49:28,690 --> 00:49:31,380
-Oh, great. Fantastic. Thanks a lot for your time.

00:49:31,380 --> 00:49:33,260

YouTube URL: https://www.youtube.com/watch?v=ZKUJdbNaUKY


