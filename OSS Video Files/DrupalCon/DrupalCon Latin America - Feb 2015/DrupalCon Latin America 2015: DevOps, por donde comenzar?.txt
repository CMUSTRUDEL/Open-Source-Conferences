Title: DrupalCon Latin America 2015: DevOps, por donde comenzar?
Publication date: 2015-02-10
Playlist: DrupalCon Latin America - Feb 2015
Description: 
	Speakers: sebas5384
The principles of Devops culture are based in the Lean thinking, the art of identify and know how to find waste, so now a days, in order to delivery high quality software Devops is a must, and needs to grow into your organization increasing performance. And thanks to Gene Kim study ( video ), that’s a fact.

Not just thinking about software here, we need to consider the human brains making that are doing the same thing, again, and this time, … hopefully right.
We need disciplines and tools to automate processes like testing, deploying and why not, providing your entire local and remote infrastructure, to ensure quality.

But!, finding the right ones to start with, can hinder your journey to implement them. Because they aren’t for all the cases, like, for example, maybe Jenkins (can be some other CI or CD tool) isn't fit for your organization's yet, … or not, you’ll see.

So if you are getting started in this Devops world, don’t worry about the many big tools, focus in the culture, and I’ll be showing you how to install and use some easy tools to start get out going right away, like we did.

Some of those tools are:

Services with deploy workflows, like Pantheon, BeanstalkApp, etc..
Hipchat, Slack or/and IRC clients.
Ubuntu Juju, using the Drupal charm. ( see this )
Vagrant and Ansible.
Linux containers.
Also I’ll talk about my vision of a future, where having a top notch environment with great performance for a Drupal project, is not only achieved through specialized hosting services. We can just share, and contribute, using all our knowledge and make open source tools that help us deliver easy and fast reliable working software to our clients.
Captions: 
	00:00:00,000 --> 00:00:07,000
Well, I'll start. We are already late, we should start. 

00:00:08,650 --> 00:00:15,650
Who here knows DevOps? Maybe you already heard of it. Who is here to learn DevOps? Very good. 

00:00:22,050 --> 00:00:29,050
My talk will be on teaching you how to start with DevOps. 

00:00:30,039 --> 00:00:35,700
DevOps is a very long process, it takes more than a year, it is a difficult process. 

00:00:35,700 --> 00:00:42,360
This talk is for you to skip the experiences we had in implementing DevOps less than a year ago and

00:00:42,360 --> 00:00:49,360
to show you a little about where it comes from and what DevOps is exactly. 

00:00:50,809 --> 00:00:57,809
To begin with my name is Sebastian Ferrari, I work at the shop as CIO. 

00:00:59,550 --> 00:01:06,550
I am co-founder also since we started the shop. 

00:01:08,500 --> 00:01:15,500
And I wanted to make an announcement before I touch on some issues and some brands, and it might be a little confusing. 

00:01:18,710 --> 00:01:24,830
I'm not here to make any kind of propaganda. I'll talk about some SaaS, and about some service software.

00:01:24,830 --> 00:01:31,049
Not that those are really the best in the market, it is simply just a recommendation.

00:01:31,049 --> 00:01:36,630
Some we have already tested. We have had problems with other software so we have changed them. 

00:01:36,630 --> 00:01:43,610
I'll talk a little about that. 

00:01:43,610 --> 00:01:49,590
The thing is, why use SaaS, why, and I will also talk about software as a service.

00:01:49,590 --> 00:01:55,060
because the goal here is for you to focus on your business and not focus on how to make all

00:01:55,060 --> 00:02:00,530
the infrastructure, how to automate all processes and all that kind of stuff.

00:02:00,530 --> 00:02:07,180
Sometimes it's better and cheaper to pay your way out for a service as part of what you know how to do,

00:02:07,180 --> 00:02:14,080
which is your business. Another thing, sorry for my Spanish, haven't practiced it for some time.

00:02:14,080 --> 00:02:21,080
I have been living in Brazil for 8 years so it is a little rough. 

00:02:26,650 --> 00:02:33,650
One of the reasons why we use SaaS is because we want to have a Lean Startup. 

00:02:34,610 --> 00:02:41,610
And one of the principles of being a Lean Startup is to use resources that will decrease any

00:02:42,260 --> 00:02:49,040
waste and any kind of pleasure you have in your operation. 

00:02:49,040 --> 00:02:54,319
Who knows Lean Startup here? For those of you who don't know it, there is a book called Lean Startup that is very good.

00:02:54,319 --> 00:03:01,319
It will open your mind to many things. 

00:03:03,230 --> 00:03:09,180
By adopting new things one has to accept some risk, because they are new things that you don't know about, not everyone knows how it works.

00:03:09,180 --> 00:03:15,370
You run a little risk, but the issue is that the risk is one of the patterns that we have for success.

00:03:15,370 --> 00:03:22,370
If you don't take risks, as the saying goes, no risk no win.

00:03:22,450 --> 00:03:27,420
And that goes for innovation. 

00:03:27,420 --> 00:03:34,420
So if you want to innovate you have to take risks and try to reduce it as much as you can.

00:03:35,239 --> 00:03:39,720
And how do you do that? From the experiences of others, so you don't fall back into the same problem.

00:03:39,720 --> 00:03:46,720
Here I will begin to explain a little about why go for DevOps.

00:03:47,480 --> 00:03:54,480
At first, as we were working with Drupal and other technologies, we found ourselves in a kind of chaos. 

00:03:54,989 --> 00:04:01,989
All machines were different, we had problems with bugs that appeared from nowhere 

00:04:02,890 --> 00:04:07,060
and did not know because my machine was running, well, that kind of thing. 

00:04:07,060 --> 00:04:12,230
And we didn't know exactly how those machines were working.

00:04:12,230 --> 00:04:17,540
How that machine was running at that time. 

00:04:17,540 --> 00:04:24,449
And the problem is that all projects have an intrinsic dependence between their infrastructure and their configuration and the installation of their software. 

00:04:24,449 --> 00:04:35,199
Sometimes, when we wanted to make a new deploy and a new server, we didn't know exactly how to re-create all that environment. 

00:04:35,199 --> 00:04:36,199


00:04:37,000 --> 00:04:44,000
I will present some of the problems to see if you understand. 

00:04:46,440 --> 00:04:53,220
We have some of the Top 10 Problems. One of them is the most common of all, the one that says - it works on my machine.

00:04:53,220 --> 00:05:00,220
You sent it to production and bye-bye, forget it. Now the problem is different. 

00:05:01,100 --> 00:05:08,100
It's no longer your problem. And it is because you have differences between environments. 

00:05:08,669 --> 00:05:15,669
And I'm talking about local environments, your environment with DevOps. Where you develop. It is explained quite well. 

00:05:20,300 --> 00:05:27,300
It works on my machine. Lack of standardization of the solutions implemented. 

00:05:28,380 --> 00:05:34,139
Each time you create a new project how you recreate everything again, and we have to learn everything all over again.

00:05:34,139 --> 00:05:39,550
If you have a slightly larger company, sometimes these differences come up

00:05:39,550 --> 00:05:46,550
and you don't take advantage of them. It is important to standardize a bit. 

00:05:46,550 --> 00:05:51,740
There is waste from accumulated experiences between projects. This is what I have just said. 

00:05:51,740 --> 00:05:55,419
There are many experiences that we are learning from, and sometimes, if there is lack of communication

00:05:55,419 --> 00:06:02,419
between the teams, the other one does not know how to solve it. As in the company

00:06:03,729 --> 00:06:10,729
are already solved. High cost for re-creating infrastructure. It is this.

00:06:11,530 --> 00:06:18,530
I am this guy, and this is the client. And it's always the same, the guy goes and spends to create new machines and make installation and configuration, etc.

00:06:21,410 --> 00:06:27,600
And it's always the same. 

00:06:27,600 --> 00:06:33,169
And for us it is like throwing money to the floor because today there's no reason to do such things any more.

00:06:33,169 --> 00:06:39,949
Today we can automate everything. Some of the things that happen

00:06:39,949 --> 00:06:46,949
 often is how the infrastructure is not so well known by developers.

00:06:46,960 --> 00:06:53,960
Sometimes re-factoring or maintenance and development generate bugs and delays. 

00:06:54,210 --> 00:06:59,360
Every time we do something in the system, we fear it will break, because it is not automated.

00:06:59,360 --> 00:07:06,060
We have no way of knowing if what I just did is going to break one over there.

00:07:06,060 --> 00:07:11,479
But the client is an expert at this. He will always be that thing you never saw that is not working.

00:07:11,479 --> 00:07:18,479
We somehow guarantee that. This happens a lot.

00:07:21,830 --> 00:07:28,830
You have a new functionality but is dressed-up as a bug. 

00:07:31,130 --> 00:07:36,500
And maintenance seems to be in a spaceship and it no longer knows how to fix things, they don't know how to maintain it. 

00:07:36,500 --> 00:07:42,220
And sometimes you have to hire specialists who know what to do

00:07:42,220 --> 00:07:47,660
and centralize that type of knowledge, and that's where that type A knowledge is created. 

00:07:47,660 --> 00:07:54,660
That guy knows, that guru with an aura. 

00:07:56,680 --> 00:08:03,680
Only he knows how to handle that kind of servers, that sort of thing. Deploy is expensive, dangerous, slow and low in frequency. That is crucial.

00:08:04,840 --> 00:08:09,030
The expensive deploy should not be expensive. Deploy should be fully frequent, it should be.

00:08:09,030 --> 00:08:16,030
Every day you should do at least three deploys. 

00:08:16,139 --> 00:08:23,069
You can feel it kind of like that.  Whenever someone says let's do a deploy, call your wife and say today I cannot go home, I don't get home. 

00:08:23,069 --> 00:08:30,069
You know that everyone understands that deploy is like that.

00:08:37,039 --> 00:08:42,570
High cost for replicating environments.

00:08:42,570 --> 00:08:48,690
Sometimes we want to measure how far will our application go. Before putting it in the air.

00:08:48,690 --> 00:08:53,740
And the problem is that that infrastructure is very expensive, it's a super-production infrastructure. 

00:08:53,740 --> 00:08:59,310
And to replicate that, to do a load test you can take twice as much as before, because now you're going to want

00:08:59,310 --> 00:09:05,170
to do it much better. That type of environment replication, I'm not just talking about installations. 

00:09:05,170 --> 00:09:12,170
A new person comes into the project. You have to leave the whole environment

00:09:13,810 --> 00:09:19,589
and pull, configure, and that takes a long time and that's where it makes a difference. 

00:09:19,589 --> 00:09:26,589
It shouldn't be surgery. That's not Foget science that comes back again. 

00:09:29,440 --> 00:09:36,440
There is no monitoring for deploy, it's like walking around in impunity and suddenly you find yourself

00:09:37,700 --> 00:09:44,080
with FNA. It's fallen and you don't know where it's coming from. 

00:09:44,080 --> 00:09:51,080
Monitoring by deploy is very important. It's like driving on the street with no light. You don't know what's ahead.

00:09:51,080 --> 00:09:57,540
You have no way of preventing that. Many times we use New Railing,

00:09:57,540 --> 00:10:04,540
I'm not making propaganda, the thing is that we use it, that's good. But there are other ones, there are other good ones too.

00:10:05,450 --> 00:10:12,450
And sometimes we see that they are like that. dadadadadada and you know they need things.

00:10:13,100 --> 00:10:20,100
But you see it ahead. you see it coming. Such visibility is worth a lot of money. 

00:10:22,700 --> 00:10:29,250
Another crucial thing and that's what I'm going to touch upon the issue of culture. 

00:10:29,250 --> 00:10:34,220
The teams have no freedom at times against the infrastructure team. 

00:10:34,220 --> 00:10:40,320
You see the return, so tiny, I would like to install a baby world but you're crazy, baby, 

00:10:40,320 --> 00:10:47,320
nobody knows him here, it's not proven. It is horrible. This kind of theater should not exist.

00:10:47,810 --> 00:10:54,490
There should be more teamwork. We are going to try to have like a baby here, but we will learn together. 

00:10:54,490 --> 00:11:01,490
The joke always worked well in DEV, now the problem is with the operations team. 

00:11:05,040 --> 00:11:12,040
The struggle between the teams then starts. 

00:11:13,959 --> 00:11:19,010
Hours spent on repetitive tasks, where human error tends to grow exponentially

00:11:19,010 --> 00:11:24,269
due to the technical debt. This explains exactly why we need DevOps. 

00:11:24,269 --> 00:11:29,560
We need to automate anything where man can go wrong. 

00:11:29,560 --> 00:11:34,200
But we can not waste any more time on that. The client can not continue paying for DevOps, 

00:11:34,200 --> 00:11:38,920
go and install everything new, configure it, and see if there are any problems or discover any problems ahead.

00:11:38,920 --> 00:11:45,279
We have to be more efficient.

00:11:45,279 --> 00:11:50,310
Human hour should be exploited to create and not to do repetitive work. We have the machine for that. 

00:11:50,310 --> 00:11:56,519
And so it does it better for us. Because they always do the same. 

00:11:56,519 --> 00:12:03,519
You know that kind of problem and you go through these problems. Nobody wants to say, no. 

00:12:07,040 --> 00:12:14,040
And if you are well, I introduce you to DevOps. DevOps is not a person, not an office, not a tool that I am going to use.

00:12:16,899 --> 00:12:22,470
It's not that I am going to use the DevOps tools, it is not that. DevOps before DevOps originated from an event called DevOps Base. 

00:12:22,470 --> 00:12:29,240
And it was an event where developers

00:12:29,240 --> 00:12:34,839
and part of operations, infrastructure met to discuss and present things

00:12:34,839 --> 00:12:41,050
about automation and how they solved the problems together. 

00:12:41,050 --> 00:12:48,050
and that was a password that was shared with everyone and that was DevOps. Then DevOps was seen more as a movement,

00:12:48,700 --> 00:12:55,700
as a culture, you can call it a methodology. 

00:12:57,029 --> 00:13:02,110
It is teamwork, it is teamwork. It is one of the parts to be agile. It is the art of increasing efficiency and quality.

00:13:02,110 --> 00:13:09,110
That is very important. As I said, it is a movement and it is a revolution.

00:13:09,540 --> 00:13:15,410
Now I am going to explain a little why it is a revolution. 

00:13:15,410 --> 00:13:20,570
To make it very clear, the person in operations is the person in charge of infrastructure. 

00:13:20,570 --> 00:13:26,630
They are the people who are responsible when the site goes down, when the portal or something falls, 

00:13:26,630 --> 00:13:32,430
the first thing they do is call the operations team. They don't call the developers.

00:13:32,430 --> 00:13:36,850
That happens later, after everyone started finger-pointing.

00:13:36,850 --> 00:13:42,459
One guy says, it was him, it was him, it was the developer, no it was operations. And the client is waiting

00:13:42,459 --> 00:13:49,459
to have it repaired. DevOps on the larger scale, involves some areas. 

00:13:53,199 --> 00:14:00,199
The development area, the ​​Q&A area, and involves the part of automated tests, and the part

00:14:00,589 --> 00:14:07,589
operations. Encompasses all of that. 

00:14:12,959 --> 00:14:19,959
I tried to summarize a bit, about why DevOps, and it is because automating everything has value for the client. If I stand reconfiguring the cache, I'm not adding value.

00:14:20,079 --> 00:14:25,240
I am adding value when I do a deploy and give my client code.

00:14:25,240 --> 00:14:30,430
There I am adding value. I automate everything  125 00: 14: 30.430 -> 00: 14: 34.260 that has no value to the client increases efficiency, quality and predictability of deliveries.

00:14:34,260 --> 00:14:40,250
We work in a market where predictability is crucial. 

00:14:40,250 --> 00:14:43,730
We need to anticipate when it is more or less when we can deliver things.

00:14:43,730 --> 00:14:49,910
When do you want it to happen. Such foresight is the ideal and is what gives us greater assertiveness

00:14:49,910 --> 00:14:56,910
for our estimates. This is the DevOps cycle. It's on the phone. 

00:15:08,449 --> 00:15:14,130
It all starts here. First, we plan, if you are agile here, or something related to agile.

00:15:14,130 --> 00:15:21,130
Why not, please begin to see how it is. We started planning together with the team,

00:15:23,100 --> 00:15:30,100
everyone together and after that we start to encode. Then we make the first release, almost the first release.

00:15:31,339 --> 00:15:37,829
After, we make the release, if all went well. 

00:15:37,829 --> 00:15:43,459
Here we can have not only automated tests, we have exploration/scan tests, for example. 

00:15:43,459 --> 00:15:47,889
We generate the release, do the deploy, operations will take care if we need

00:15:47,889 --> 00:15:54,889
a Varnish in this upcoming deploy, they have to take care of that. 

00:15:56,389 --> 00:16:03,389
And then monitoring. And there it is, it's an operating cycle. 

00:16:06,639 --> 00:16:13,639
But it is very nice to talk about how it works, but we will make it work. 

00:16:16,940 --> 00:16:23,940
Each year there is a DevOps status report from Puppet Labs. I will show you that later on, I have a link with all reports they provide every year.

00:16:26,259 --> 00:16:32,350
 And every year they have the same results. 

00:16:32,350 --> 00:16:39,350
They deliver 30 times more frequently in the same time.

00:16:39,470 --> 00:16:45,110
If in a week you deliver once, now you are going to go to 30 times a week. 

00:16:45,110 --> 00:16:50,560
That's great, because you're delivering value to your client faster. 

00:16:50,560 --> 00:16:57,560
And you can measure if what you delivered is really giving value to him. 

00:16:59,399 --> 00:17:05,699
It's good for you and good for him. This is one of the reasons why we are using DevOps. 

00:17:05,699 --> 00:17:12,699
Because previously we were here, our estimates were there, and with DevOps now we have 8,000 times faster, 8,000 times faster. 

00:17:12,730 --> 00:17:19,730
That is shouting-out-loud. It is loud. And every year is the same. The bugs decrease to 50%.

00:17:23,059 --> 00:17:30,059
 That's one of the things, sometimes many of the bugs are generated by bad configuration,

00:17:35,190 --> 00:17:41,720
production, or stage, or something like that. Or even locally, if it works on your machine and I sent to production. 

00:17:41,720 --> 00:17:48,720
Sometimes many bugs appear in production and not in the room where it was tested.

00:17:48,890 --> 00:17:55,890
DevOps decreases that pretty much. And we must remember that the bugs are exponential. 

00:17:57,010 --> 00:18:03,480
They are more expensive with the passage of time. 

00:18:03,480 --> 00:18:08,850
If you have a bug and a day goes by, it is much more expensive now. The more time goes by, the more expensive it is to fix. 

00:18:08,850 --> 00:18:15,850
And, where do you start? This is the reason for this talk. 

00:18:19,419 --> 00:18:24,750
First, most important thing is culture and principles. But that does not only come with DevOps, it is something about

00:18:24,750 --> 00:18:30,570
AG. But culture is very important because DevOps can put forth all the tools,

00:18:30,570 --> 00:18:35,890
but if there is no culture to understand that there are risks, there are moments

00:18:35,890 --> 00:18:40,640
where things are not going to work the way it is expected, 

00:18:40,640 --> 00:18:46,789
we must have a conscious team on these challenges, and work together to move forward.

00:18:46,789 --> 00:18:53,789
Improve, not simply do, in Brazil there is, there is a guy, 

00:18:55,549 --> 00:19:00,110
a guy says mimimimi, the guy is always complaining. Ah, why doesn't it work, tararara?

00:19:00,110 --> 00:19:06,730
But it's not only that, you have to help people, you have to help your partner,

00:19:06,730 --> 00:19:12,650
to get through those barriers. Because it's not easy, it is not so easy either. 

00:19:12,650 --> 00:19:18,980
Also one of the cultures that comes from Ansi vault, is to stop doing that CCH on your machine,

00:19:18,980 --> 00:19:22,049
come in and do a lot of things and you do not tell anyone. 

00:19:22,049 --> 00:19:27,470
Then, nobody knows what it is that happened. What is the configuration that's on the server and so on. 

00:19:27,470 --> 00:19:34,470
The best is to do an install monit, who knows what Install Monit is here? Install Monit is like a Puppet, don't know if you know Puppet.

00:19:35,460 --> 00:19:42,460
It is a configuration system. Helps to configure automated machines.

00:19:43,220 --> 00:19:50,000
And it is in code, then I can version it, so I can send it to operations. 

00:19:50,000 --> 00:19:57,000
Only by seeing this you can see that all is well. 

00:19:57,160 --> 00:20:04,160
As I said, DevOps does the Lean and Agile part. 

00:20:05,530 --> 00:20:11,990
It is not a new thing, it's just a bit where two teams that have problems, which is the operations team and the

00:20:11,990 --> 00:20:17,950
developers, had some relationship problems. That is why it is DevOps. 

00:20:17,950 --> 00:20:23,770
But first comes everything about the Lean and Agile, which is detecting waste and generating processes to increase

00:20:23,770 --> 00:20:30,770
efficiency. Focus on value, is the art of detecting waste. 

00:20:31,890 --> 00:20:36,360
And how is waste detected? The first thing we need to do is map, we need to find the waste. 

00:20:36,360 --> 00:20:43,360
This is a map of string volume mapping. 

00:20:45,840 --> 00:20:52,840
It is a map where I have here what creates value and here is total waste. And this is time.

00:20:54,159 --> 00:20:58,880
Whenever you have your developers or your client waiting, and that kind of stuff is not adding value.

00:20:58,880 --> 00:21:04,340
So you need to map this. 

00:21:04,340 --> 00:21:10,159
And this comes from the Toyota system, from the factories when Link was created. 

00:21:10,159 --> 00:21:16,480
What do you have to map? Where is the waste? 

00:21:16,480 --> 00:21:23,480
Grab a piece of paper and go out into the factories along the entire manufacturing line.

00:21:23,780 --> 00:21:29,580
Here it took so long, the equipment was standing here for so long, etc.

00:21:29,580 --> 00:21:35,480
And likewise, by measuring how long it took, it is doing everything in focus. For value, how much time for value, how much time for waste.

00:21:35,480 --> 00:21:39,970
To detect such waste, together with your team think about how to solve these problems.

00:21:39,970 --> 00:21:46,970
And here comes the automation culture. 

00:21:48,809 --> 00:21:54,380
And also comes the Toyota system, here is the Jidoka. Jidoka means automation

00:21:54,380 --> 00:21:59,500
with a human touch. It is not simply clumsy automation. It is always automating, automating.

00:21:59,500 --> 00:22:04,539
I remain in poor shape simply automating, automating, generating waste. 

00:22:04,539 --> 00:22:10,809
No, it must have a human touch. What is automated is exactly an example of Jidoka. 

00:22:10,809 --> 00:22:16,840
And this picture shows it well enough. 

00:22:16,840 --> 00:22:23,840
You have the other, which is on the other side of the machine saying it is automating, and this one says, stop. 

00:22:24,250 --> 00:22:30,510
And this one is now doing, this person is the overload. 

00:22:30,510 --> 00:22:37,130
This person is now overloaded with, not only doing something, and selecting, etc. 

00:22:37,130 --> 00:22:42,400
So it's not a job that is team oriented. To that Jidoka says it is going to have a machine that says: 

00:22:42,400 --> 00:22:48,470
"Look, we have a problem and we all, the entire line, everyone has to focus on that to solve this problem."

00:22:48,470 --> 00:22:55,470
That's a priority at this time. One of the tools to start is GitFlow,

00:22:57,320 --> 00:23:04,320
GitHooks, to automate with Mit, for example. 

00:23:06,110 --> 00:23:10,530
It is a pre-mit for example that runs a process to detect problems in the code, that sort of thing.

00:23:10,530 --> 00:23:17,530
Or even that is automated for the repository. Build Scripts to generate the builds. Beanstalkapp, we were using this. 

00:23:19,710 --> 00:23:26,710
You have Acquia, Pantheon in good quantity. 

00:23:30,960 --> 00:23:37,960
We are now using StriderCD, it is a very innovative delivery tool, brings many new concepts.

00:23:42,600 --> 00:23:49,450
And you have CircleCI which is quite similar to StriderCD, it is an open source.

00:23:49,450 --> 00:23:56,450
You can download it, change it, make plugins, you can exit the curve. CodeShip also.

00:23:58,100 --> 00:24:03,490
Vagrant, so you can automate your environments. Ansi vault, as I said. 

00:24:03,490 --> 00:24:10,400
Ubuntu Juju, which I will talk about later. 

00:24:10,400 --> 00:24:17,400
Padumts is the question we raised about compartments automated, using DVD, and so on. 

00:24:19,370 --> 00:24:26,370
We used Cucumber as an engine for that and have Behat, which is a version of Cucumber, for example, but in PHP. 

00:24:29,020 --> 00:24:34,700
Some basic practices to start having some environments. 

00:24:34,700 --> 00:24:41,700
You have your local environment, which is considered unstable, because you're working on it all the time. 

00:24:43,860 --> 00:24:50,179
Constant integration is a DEV environment where all the developers have that environment in common for integrations. 

00:24:50,179 --> 00:24:57,179
QA, which is a validation environment where there is a

00:24:59,110 --> 00:25:04,520
person or some kind of automated process. It runs on top of that environment to be able to test that last push that comes, for example. 

00:25:04,520 --> 00:25:11,520
Stage is one of the only environments that

00:25:13,500 --> 00:25:20,500
does the production and brings it to the Stage environment and

00:25:20,520 --> 00:25:26,809
does all the tests and performs the merging of that application.

00:25:26,809 --> 00:25:32,049
What we do at that time with Stage is to try to foresee the future a bit. We try to control the future a bit. 

00:25:32,049 --> 00:25:36,340
What will happen when I put all my new things into production? What will happen? 

00:25:36,340 --> 00:25:42,360
Is the site going to fall, is performance going to drop? Will we have a problem with another future event we were not seeing?

00:25:42,360 --> 00:25:47,529
You'll have to know if you're in production,

00:25:47,529 --> 00:25:52,750
have testing that you don't have in other environments. And you'll not be taking all of

00:25:52,750 --> 00:25:59,750
the database production for all environments, that's crazy. 

00:25:59,779 --> 00:26:05,740
And there you have the production environment, which is the most important room, it's where the client is watching.

00:26:05,740 --> 00:26:11,929
This is a small example of a workflow we had. We did daily deploys.

00:26:11,929 --> 00:26:18,309
 It's something different, we have some other columns. But it's just so

00:26:18,309 --> 00:26:24,730
you have an idea about ​​what a workflow is, where deploys are made daily. 

00:26:24,730 --> 00:26:30,789
We have many things to do, impediments, unlikely things that are being done. 

00:26:30,789 --> 00:26:37,789
Things to tests, tests in progress, things solved, things that go to the client. 

00:26:38,779 --> 00:26:45,659
The client approves it, it's all good, it's approved, everything that is done is automatic. 

00:26:45,659 --> 00:26:52,659
It's something that enters, tutututu, goes, another one enters and goes, another enters and goes. And another important thing is these numbers that are the limits.

00:26:52,860 --> 00:26:59,860
 Sometimes having more than four tests, made at the same time is very bad,

00:27:00,429 --> 00:27:05,710
because you have people not focused on solving a problem that sometimes are inside one of the biggest problems.

00:27:05,710 --> 00:27:11,480
 So sometimes you need to focus a little. 235 00: 27: 11,480 -> 00: 27: 14,860 It's like a hose, a water hose. When you put your finger on it, you push a little, you limit a bit, it comes out faster.

00:27:14,860 --> 00:27:21,860
 It's the same concept.  Continuous delivery reduces the risk greatly. 

00:27:25,820 --> 00:27:32,820
This graph shows the difference quite well as Waterfall does not fit. 

00:27:35,130 --> 00:27:38,010
Every time you do a deploy here you are decreasing the risk slightly because you're seeing what's happening right now.

00:27:38,010 --> 00:27:43,870
One is expecting a huge amount of time to see exactly what is happening.

00:27:43,870 --> 00:27:49,110
But the longer it takes, the more things you have to put in the air. 

00:27:49,110 --> 00:27:56,110
Then you have more risk. The culture of monitoring, as I said, if you're not monitoring it's like driving at night with the lights off.

00:27:56,640 --> 00:28:03,270
 Just that, you can not drive like that.

00:28:03,270 --> 00:28:09,010
 You can not have your production environment without any monitoring. 

00:28:09,010 --> 00:28:14,279
How is your CPU? Did they run some kind of tests at some point? Did they do some kind of monitoring to see if all was well?  245 00: 28: 14.279 -> 00: 28: 19.049 Maybe your SaaS is in a free fall, and you're not seeing it.

00:28:19,049 --> 00:28:25,090
 You will notice it at 4 in the morning when they call you.

00:28:25,090 --> 00:28:32,090
Look, the site fell because there was peak audience, something. 

00:28:32,720 --> 00:28:39,720
Monitoring is one of the things we use, and we used before and use now. 

00:28:40,159 --> 00:28:45,840
Pingdom is a rather basic one. 

00:28:45,840 --> 00:28:52,840
ServerCheck.in is a very good one too that was made by someone who made some Ansi Vault rolls for Drupal, I highly recommend it. 

00:28:55,690 --> 00:29:02,690
NewRelic, Nagios is well known in opensource. Zabbix. JMeter to do load tests. BlazeMeter,

00:29:04,340 --> 00:29:10,940
you can do all the automated tests on your machine, all the automated load tests

00:29:10,940 --> 00:29:16,299
on your machine and then you go to BlazeMeter, and BlazeMeter is responsible for implementing all load tests.

00:29:16,299 --> 00:29:23,299
One does not depend on the ability of the machine and measure twit, because they can cut you off.

00:29:24,100 --> 00:29:30,419
 Sending a million requisitions to the site, I'm going to cut you off, and there

00:29:30,419 --> 00:29:35,890
you drop the test below. Blitz is also one very much like BlazeMeter. 

00:29:35,890 --> 00:29:39,470
I don't know how to find the difference, but anyway, we use BlazeMeter and it works quite well.

00:29:39,470 --> 00:29:44,320
Google Analytics also helps to do that, to measure, and sometimes

00:29:44,320 --> 00:29:49,720
we see that in one area people are not using it and sometimes it's not even working,

00:29:49,720 --> 00:29:54,559
that's why no one is entering. 

00:29:54,559 --> 00:29:59,549
For that reason Google Analytics is also important to see, it's a pretty good tool. 

00:29:59,549 --> 00:30:06,500
The Tracker is a product that we are now launching in February, which is to do that, to track more easily.

00:30:06,500 --> 00:30:12,549
And program here, the Google Analytics code measures and the person only has to click a button.

00:30:12,549 --> 00:30:19,549
 The culture of sharing is super important because everyone on the team has the same responsibility.

00:30:21,179 --> 00:30:24,919
We practice shared responsibility. 

00:30:24,919 --> 00:30:28,669
Because what happens is that we must all have the same goal. What is that? 

00:30:28,669 --> 00:30:35,340
It's the project. It's not type A, because I have the responsibility to do just that. 

00:30:35,340 --> 00:30:38,990
No, sometimes you have to think a little and say, no, I have as much responsibility as the guy in operations.

00:30:38,990 --> 00:30:43,520
 And this guy has to understand that I also have the same responsibility. 

00:30:43,520 --> 00:30:48,529
We need to share that kind of responsibility and we need to have constant communication.

00:30:48,529 --> 00:30:55,529
 We need constant integrations. 

00:30:55,590 --> 00:31:01,649
We need pair programming, code review, things that unite teams. A single team achieves more.

00:31:01,649 --> 00:31:08,649
And coaching, coaching is super important. To share code, finally, GitHub, BeanstalkApp, are also a repository, Acquia too.

00:31:10,429 --> 00:31:17,429
Teamwork agreements, super important.

00:31:18,250 --> 00:31:23,260
It will be an absurd difference. Teamwork agreements are important, one day you call

00:31:23,260 --> 00:31:28,260
your development team, you sit them down, put them in a room and agree that we need to make agreements.

00:31:28,260 --> 00:31:32,820
They do not necessarily have to be the best at this time, they need to be the final ones for ever.

00:31:32,820 --> 00:31:39,559
It is simply a way to start, we need agreements. 

00:31:39,559 --> 00:31:46,559
And those agreements are, for example, when I do, before pushing the button, I gotta run all the automated.

00:31:46,669 --> 00:31:53,669
That is a kind of agreement that has to be done. And some tools to have that constant communication

00:31:54,090 --> 00:32:01,090
is Slack, HipChat, are now we are using Hall, and IRC, IRC works quite well for many years.

00:32:01,250 --> 00:32:08,029
 Integrated notifications also, these integrated notifications integrate with Slack.

00:32:08,029 --> 00:32:15,029
 They are chat tools for communication. They are chats where you have rooms and finally,

00:32:20,440 --> 00:32:25,539
 it depends on how you are going to organize it. 

00:32:25,539 --> 00:32:31,880
And the issue is that sometimes when someone makes a push, in the same chat, a farshot notification appears telling you something.

00:32:31,880 --> 00:32:36,860
 Everyone knows, at this point everyone knows what happened. 

00:32:36,860 --> 00:32:41,860
Everyone can say it broke, everyone can go and sit next to it and try

00:32:41,860 --> 00:32:48,860
to help and solve the problem. And experience, I will talk a little about the experience

00:32:52,760 --> 00:32:59,760
I have the know-how that we have been learning over time. One thing is trust.

00:33:02,549 --> 00:33:08,870
We need to trust, your client has to trust you, and you have to trust your team, you need to trust people.

00:33:08,870 --> 00:33:14,559
 Therefore, agreements are very important. 

00:33:14,559 --> 00:33:18,460
Agreements are a way to turn and see when not trust also. 

00:33:18,460 --> 00:33:22,710
Because if you see that a person is breaking all the agreements, you say, I can not trust this person. 

00:33:22,710 --> 00:33:27,950
This person can not even fullfill an agreement. Then, trust is very important. 

00:33:27,950 --> 00:33:32,110
It is not easy to win the trust of the client. It can take you more than two, three, four years, it can take you a long time.

00:33:32,110 --> 00:33:38,299
And this trust is often lost because of this operations team that has that security paranoia.

00:33:38,299 --> 00:33:45,299
Sometimes it happens that they fail to resolve security.

00:33:45,740 --> 00:33:51,049
They don't know exactly how to resolve it.

00:33:51,049 --> 00:33:58,049
So you better cut it off, get something new, better let's leave it, whatever, limit it before putting in anything else, try something together, they cut it off.

00:33:58,330 --> 00:34:02,929
 So it is a poorly resolved safety, it limits innovation and generates unnecessary paranoia.

00:34:02,929 --> 00:34:09,929
One process to move forward and improve is the Kaizen and Kaikaku.

00:34:12,129 --> 00:34:19,129
Let me explain a little what the difference is. There is what is called curve J.

00:34:23,530 --> 00:34:30,530
Every time you do a deploy, your skill will drop a bit. 

00:34:30,540 --> 00:34:37,540
Let's assume that we will take Ansi Vault to do automations of server configurations.

00:34:37,750 --> 00:34:42,050
And your team will suddenly begin to fall.

00:34:42,050 --> 00:34:49,050
Because they don't know how to use it, they have problems. It's normal. You will have that curve J.

00:34:49,450 --> 00:34:55,020
And this is more Kaikaku, Kaikaku is a revolution. It is making a big change.

00:34:55,020 --> 00:34:58,980
From one day to another you implement such a large change that your team can no longer be more productive, because it is a big, big change.

00:34:58,980 --> 00:35:05,980
Kaizen is a bit to the contrary, it is to take small steps. 

00:35:06,220 --> 00:35:13,220
With these small steps is how the delivery takes place, decreasing. 

00:35:14,790 --> 00:35:21,790
You have to measure a little. Sometimes Kaikaku may be your only solution at this time. 

00:35:22,450 --> 00:35:27,480
Sometimes you need a definite issue, we need to make a definite change, we can no longer continue like this.

00:35:27,480 --> 00:35:33,230
And we have no more time, we need to change now. Sometimes this can save your life.

00:35:33,230 --> 00:35:40,230
You can be here. If you are here, your client is not going to be very happy. 

00:35:42,710 --> 00:35:49,710
Let's go back a bit here. One of the challenges we have is Acquia, is to offer Acquia to our clients. 

00:35:56,800 --> 00:36:02,630
Because they see it as it is, it's a big change in their infrastructure,

00:36:02,630 --> 00:36:06,310
 which is a very specialized thing, imagine, there is a company that we work withj and Drupal is simply the site.

00:36:06,310 --> 00:36:10,800
They have the entire infrastructure with the help of other things.

00:36:10,800 --> 00:36:15,950
 So for them it is, having another supplier, another account, 

00:36:15,950 --> 00:36:20,770
other people to talk to, anyway. It's kind of their point of view, it's a little bad.

00:36:20,770 --> 00:36:26,060
But it is not because they don't understand. They say, ah, is a big change,

00:36:26,060 --> 00:36:33,060
and with the risk, it is very expensive. Indeed, sometimes it is not. But it can take you a year.

00:36:33,980 --> 00:36:38,490
And it can take you about a year to do all the implementation

00:36:38,490 --> 00:36:45,490
of the best practices, and processes. That number is a number that we did a course on

00:36:46,780 --> 00:36:53,780
with Mary and Tom Poppendieck, who made the link from Toyota for development.

00:36:57,750 --> 00:37:02,690
What happens is that in development, we have a very large difference with the manufacturing link.

00:37:02,690 --> 00:37:07,790
In manufacture you have the new product without letting it out, if it is different then beep, beep, beep, it is a problem.

00:37:07,790 --> 00:37:13,200
 In our case it is completely the opposite. 

00:37:13,200 --> 00:37:16,940
We have variations, all deploys are a little different. 

00:37:16,940 --> 00:37:23,940
We are always adding different things. We are constantly changing.

00:37:24,320 --> 00:37:31,320
What they did was to build all the principles of the Toyota process, and bring that over to development. 

00:37:31,530 --> 00:37:38,530
Development is a process of further exploration. We have many risks. 

00:37:42,680 --> 00:37:49,680
And sometimes, who works with Agile here? If you want to implement Agile with your client constantly, 

00:37:50,970 --> 00:37:56,510
It might be in the same problem as when you want to implement DevOps with other clients. It's the same challenge.

00:37:56,510 --> 00:38:02,310
The same struggle. Just have to go there and explain and show another view, show him numbers,

00:38:02,310 --> 00:38:08,040
because he does not trust you. Imagine, you're arriving at a company that has years

00:38:08,040 --> 00:38:13,869
in the market and you tell him that he is doing everything wrong. 

00:38:13,869 --> 00:38:20,869
It's not so easy. For that we must speak about it. Another important one is Eat your Own Food. Eat your own food.

00:38:22,400 --> 00:38:26,829
How do you know if your food is Ok? You have to eat it sometimes. If you don't eat it sometimes, don't know how it is.

00:38:26,829 --> 00:38:31,750
And that happens a lot when we want to offer some kind of solution to this client,

00:38:31,750 --> 00:38:38,079
 we say: you can install Vault Ansi there, and automate everything, etc.

00:38:38,079 --> 00:38:44,280
Before telling your client, you have to use it in your business. 

00:38:44,280 --> 00:38:49,690
See where it's wrong, where it's good, where you can improve. Learn a little, we have more experience.

00:38:49,690 --> 00:38:53,950
Then Ok, you ate your own food, you go ahead and offer: look, now that

00:38:53,950 --> 00:39:00,950
I ate, everything is just great, I can offer it. 

00:39:04,020 --> 00:39:11,020
A little of my view on DevOps, where we are going. It is an industrial revolution.

00:39:12,720 --> 00:39:19,720
And I say this because there are many people, I'm talking about sometimes, I forgot the word. 

00:39:23,349 --> 00:39:29,140
Floors, imagine a building, sometimes there are floors and floors of people who work doing exactly the same thing always. 

00:39:29,140 --> 00:39:34,270
All day long. They are people who are gurus and go, install and configure and they are always doing the same thing.

00:39:34,270 --> 00:39:39,490
We can now automate all that and put those people who are always doing the same thing, to create something.

00:39:39,490 --> 00:39:45,310
 To do something different. To improve those processes, and so on.

00:39:45,310 --> 00:39:50,820
 It's like what happened to an industrial revolution. 

00:39:50,820 --> 00:39:54,470
They put the machines to do things, and had to take away the humans, and that was seen as

00:39:54,470 --> 00:39:57,630
a bad thing, but in the end it was a good thing. 

00:39:57,630 --> 00:40:04,630
Because instead of having people doing a mechanical job, you have a free person to do something creative. 

00:40:06,339 --> 00:40:11,270
And it is a revolution of the exchange of intellectual property. 

00:40:11,270 --> 00:40:17,950
To use Ansi Vault for example, as I said, it's the configuration, installation, experience, it is the know-how that is in code.

00:40:17,950 --> 00:40:23,760
And I can give that, put it opensource, put it together and others may

00:40:23,760 --> 00:40:28,940
use that kind of experience within their own companies, without having to

00:40:28,940 --> 00:40:33,760
have all that knowledge. Without having to read an entire Varnish book, without

00:40:33,760 --> 00:40:39,170
having to read an entire Ready book, to see how it works. If we can generate

00:40:39,170 --> 00:40:43,650
all that type of automation and deliver it in a way that's easy to use, all those people

00:40:43,650 --> 00:40:50,650
don't need to understand everything. 

00:40:52,430 --> 00:40:59,430
We use Juju now, it's been a while since we have been fighting together with Janelo to leave it impeccable.

00:41:00,550 --> 00:41:07,550
And we are working with the Juju team together to make the first Drupal charm, which has been recommended by Unt. 

00:41:08,569 --> 00:41:13,119
And I want to see inside. And inside there are a number of things. There are AgentX configurations

00:41:13,119 --> 00:41:20,119
with Perucio configurations, you have best practices for installing and organizing your Drupal,

00:41:21,290 --> 00:41:26,400
finally, a number of things that Drupal already installs. 

00:41:26,400 --> 00:41:32,270
Push, with the standard version, and you can change it, and reinstalls for those using SaaS, finally, a number of things that

00:41:32,270 --> 00:41:39,270
you always have to do. As I said, it is a product of Canonical together with Unubuntu.

00:41:39,910 --> 00:41:46,910
It has an interface that is very good. This is like Appstore, where do I have my apps,

00:41:50,030 --> 00:41:57,030
which are services. And these are the charms, 

00:41:57,230 --> 00:42:01,369
which are recipes, and these recipes are made by the community. 

00:42:01,369 --> 00:42:07,430
And sometimes by Canonica you will see, made by the people who are specialists in the way of seeing. 

00:42:07,430 --> 00:42:10,910
Using all the experience and all the techniques of the persons who specialize in TV world, in my project I need to know how they work exactly.

00:42:10,910 --> 00:42:17,400
And he has an architecture oriented relationship. 

00:42:17,400 --> 00:42:23,200
The relationship comes in more than him and the relationship between Drupals is always the same. 

00:42:23,200 --> 00:42:28,290
It is what happens when we say I will put in one more, I'll put in a Drupal. 

00:42:28,290 --> 00:42:34,760
You create a database here, put in a lighthouse, the signs, you go to Drupal, create a settings file, you give it all the data, and it is always the same.

00:42:34,760 --> 00:42:39,740
That kind of relationship is what we have to automate. 

00:42:39,740 --> 00:42:46,140
When I create a relationship with the other charm automatically it knows what to do. 

00:42:46,140 --> 00:42:50,210
And this charm does not even know it is Drupal. 

00:42:50,210 --> 00:42:56,300
It only knows it has a relationship with a database and requires a database to deliver the apps. 

00:42:56,300 --> 00:43:00,960
When we want to escalate, we can say, I want more machines from this service.

00:43:00,960 --> 00:43:06,220
This is simply a representation of services. You have several units in vertical, several units are multiple machines when you want to escalate.

00:43:06,220 --> 00:43:12,290
All of this is also automated, and have to use a Varnish or something like that to escalate.

00:43:12,290 --> 00:43:19,290
 It depends on the type of user you have. 

00:43:19,440 --> 00:43:24,300
Varnish is well known. Create a relationship of Varnish with Drupal, and automatically you know what you have to do, how to configure, etc.

00:43:24,300 --> 00:43:31,300
 This gives us some freedom in choosing our supplier and infrastructure.

00:43:36,180 --> 00:43:43,180
Because, here, I think my battery ran out. Let's continue.

00:43:59,710 --> 00:44:06,710
You can take all of this, everything I have just done, and all is exported in Llamo, which is very easy to read.

00:44:10,660 --> 00:44:17,660
And I can take this and run the script exactly as I just

00:44:18,109 --> 00:44:25,109
exported and send it to Amazon, HP Cloud or IBM Softlayer, or Busar, 

00:44:30,670 --> 00:44:37,670
or Ocean, any type of supplier using openstake, for example. 

00:44:38,000 --> 00:44:43,270
You can use Linux Container which is a new paradigm, anyone that does not know Linux Container is going to have his head explode when he knows what it is.

00:44:43,270 --> 00:44:50,270
 This is why Container Linux is

00:44:52,630 --> 00:44:56,869
so we have all the production infrastructure in our local machine. 

00:44:56,869 --> 00:45:02,609
And have various types of structures, all on my local machine. 

00:45:02,609 --> 00:45:09,609
And have all of them always in versions and configured the same way.

00:45:10,349 --> 00:45:17,349
That saves me the environment difference problems, as for example. We had other slides, don't know what happened. Now we go to Q&A..

00:45:42,480 --> 00:45:49,480
- The first question is how to compare the Juju that has a nice interface, 

00:45:50,869 --> 00:45:57,869
but how to compare that with making a single Ansi Vault and Ciao playbook. That is the question that I have. 

00:46:00,170 --> 00:46:07,170
Two, the Canban diagram we had is agile but I wonder, why does it speak of flash, ready to flash, etc.

00:46:09,410 --> 00:46:16,410
there are some listings, but there is a hand-off

00:46:19,680 --> 00:46:26,680
between internal verification, the flash, the testing, then there is another status that is the

00:46:29,069 --> 00:46:36,069
What about the first. The first is simply why use Juju if I make a playbook and that's it.

00:46:46,670 --> 00:46:53,670
Juju is not a configuration system like Ansi Vault. Juju is an orchestrator, it is different. 

00:46:59,510 --> 00:47:04,760
Because Ansi Vault can only be used inside that charm. Indeed, the charm of

00:47:04,760 --> 00:47:10,020
Better still, Drupal's charm we have today, uses Ansi Vault, and uses Rolls that were made especially for Drupal. 

00:47:10,020 --> 00:47:17,020
And we have the Roll, which is Ingnex's recipe, the garet of

00:47:19,650 --> 00:47:26,650
the community. Simply, this charm will have Ingenex, will have Perucio's configuration,

00:47:29,430 --> 00:47:33,950
it will have all that kind of stuff, and I was selecting Roll, all were configured and put inside a charm.

00:47:33,950 --> 00:47:40,650
 At the end of the day what you have is a selection

00:47:40,650 --> 00:47:45,800
the best or the easiest to use. And you should see how well it served us.

00:47:45,800 --> 00:47:52,800
And it's all thinking, it was the charm and change, I will show you. 

00:48:07,309 --> 00:48:12,069
Within this charm of Mas Kiely, e.g., it was Mas Keily's team and all the people who came out of Mas Kiely's system in Unubuntu. 

00:48:12,069 --> 00:48:19,069
 They made a recipe in Python and that's the way they did it. 

00:48:21,900 --> 00:48:28,900
In Drupal's charm what are we doing, this was using Ansi Vault.

00:48:29,809 --> 00:48:36,550
 Perfectly, instead of using Ansi Vault, we could use Puppet, could use

00:48:36,550 --> 00:48:43,550
Chef, could use Vez, could use all kinds of things. And the other question was about. 

00:49:15,690 --> 00:49:20,700
That is a problem we are having today that we are already solving as follows. 

00:49:20,700 --> 00:49:27,240
With Drupal it is a bit difficult to have that kind of development, everything tested. 

00:49:27,240 --> 00:49:32,079
Doing it in Drupal is very difficult. But it is not hard to do, but it is difficult because it takes a long time to do the entire Drupal boot.. 

00:49:32,079 --> 00:49:39,079
Well, that's production, pfff. 

00:49:39,720 --> 00:49:45,420
In the market today we can not do the whole system tested, because of the technology we are using.

00:49:45,420 --> 00:49:52,420
 What we are using this the DVD, the developer itself

00:49:56,390 --> 00:50:02,829
it has to create everything in Gerking to test it. The same developer has to make the automated test. 

00:50:02,829 --> 00:50:09,829
That's the best, it is what is recommended. Is what works best. 

00:50:11,980 --> 00:50:15,720
But the problem is that sometimes your developer does not know how to do the automated test.

00:50:15,720 --> 00:50:20,530
Sometimes you need to have a QA engineer who knows how to make automated tests

00:50:20,530 --> 00:50:24,690
and works as paid programming until your team starts to level out and everyone knows how to do things.

00:50:24,690 --> 00:50:31,609
 What happens to us is pretty much that. We had,

00:50:31,609 --> 00:50:37,099
we have two people in charge of QA, we have other teams. 

00:50:37,099 --> 00:50:44,089
And they take care of going, the team will show them how make the first tests. 

00:50:44,089 --> 00:50:47,579
Once the development team is doing their own tests before even going through a QA column, and is tested.

00:50:47,579 --> 00:50:54,579
Sometimes you have exploratory tests. But then, there are other things because who measures that, who measures.

00:51:07,280 --> 00:51:14,280
At the end, if what we are doing

00:51:17,809 --> 00:51:24,809
is good or not, you have to do it before. Do the break log before. Yes. 

00:51:43,339 --> 00:51:49,050
This is why you have to monitor. You have to monitor because for example if you are doing track

00:51:49,050 --> 00:51:53,690
is to monitor whether what we doing is providing some value. 

00:51:53,690 --> 00:52:00,690
I'll give you a common example, the AGlobal is what makes it, it's a giant portal in Brazil, it has a television channel.

00:52:01,380 --> 00:52:08,380
What they do before even sending a request,

00:52:08,790 --> 00:52:12,710
is to tell the development team, how long it takes. 

00:52:12,710 --> 00:52:17,410
What they do is the minimum possible, which is a button, for example, if they want to do a feature to print all pages.

00:52:17,410 --> 00:52:21,170
They make a button that does nothing and all it does is measure the click.

00:52:21,170 --> 00:52:27,240
 They measure the click, validate the hypothesis and see if it is really worth it or not. 

00:52:27,240 --> 00:52:34,240
That's what they do. That is why I'm talking before entering the VEGGlobe, before entering

00:52:35,420 --> 00:52:41,349
production so that developers to start developing, you have to validate that a little better.

00:52:41,349 --> 00:52:48,349
More than anything, first, I loved what you said about industrial revolution,

00:52:59,950 --> 00:53:06,950
It seems to be a very appropriate analogy, I do not know how appropriate it would be

00:53:07,270 --> 00:53:14,270
to speak of revolution, because of the kinds of things that are being done with this DevOps in this type of revolution.

00:53:14,450 --> 00:53:21,450
The question is whether Docker has been used and what experiences they have had. 

00:53:21,540 --> 00:53:28,540
If that is what they did, or a recommendation.

00:53:34,640 --> 00:53:41,640
When I heard about Linux Container, specifically LXC, I discovered Docker, and I started using Docker before using Juju.

00:53:43,990 --> 00:53:50,369
I just saw a problem before using Docker,

00:53:50,369 --> 00:53:55,240
there was no orchestration tool for Docker. 

00:53:55,240 --> 00:54:00,619
And that to me was a big problem because I could not walk carrying a lot of pictures and be making a script that unifies all in order.

00:54:00,619 --> 00:54:07,290
It was an additional job. We started doing a Docker program 

00:54:07,290 --> 00:54:14,150
and a Hooks program that you took from one container to another, you know, and there I found Juju.

00:54:14,150 --> 00:54:21,150
What for, if it is already there. And I have a great experience about that because

00:54:22,240 --> 00:54:27,210
to be an orchestrator is not easy. You have to, imagine the part of operations, for instance,

00:54:27,210 --> 00:54:34,020
networks, dealing with networks is sometimes very difficult. We use Docker sometimes, but

00:54:34,020 --> 00:54:40,319
sometimes it's good for specific things, more when we work with Note, this is a

00:54:40,319 --> 00:54:47,319
JavaScript type. Docker is easier for that. 

00:54:48,940 --> 00:54:55,940
Because it integrates very well with Delibro tools, because I say, before DevOps runs all the tests of this build I just made, of this new push.

00:54:56,109 --> 00:55:03,109
It is the push, a build is generated, and the build runs on top of an image that I specify.

00:55:04,660 --> 00:55:10,520
Then you are in a container with a picture

00:55:10,520 --> 00:55:17,109
that I specified, ready to enter the explanation, and then I run all the tests, that sort of thing.

00:55:17,109 --> 00:55:22,020
We were using Docker, but Juju resolves our problems quite nicely.

00:55:22,020 --> 00:55:28,109
Because Docker is still not sure how it will fit into that sort of thing.

00:55:28,109 --> 00:55:32,329
And we must understand that our clients are also a little scared.

00:55:32,329 --> 00:55:39,329
Because, imagine that they have great incapacity to create machines sometimes.

00:55:42,589 --> 00:55:46,520
They are installed, we want a machine for this, a machine for that, we sometimes have clients who say nothing.

00:55:46,520 --> 00:55:52,130
They create machines like crazy. 

00:55:52,130 --> 00:55:56,740
Imagine that I have to maintain all these machines, it's crazy. Because they don't know that

00:55:56,740 --> 00:56:01,079
there are a number of tools to automate such things.

00:56:01,079 --> 00:56:08,079
 Imagine implementing Docker, it is very difficult, it is a big step.

00:56:12,660 --> 00:56:18,220
The experience I had with this is that every time I got a very big thing, the client was frightened and everything was worse.

00:56:18,220 --> 00:56:25,220
Sometimes it's a little slower and that, Juju gives you the freedom to use Linux Containers

00:56:26,740 --> 00:56:33,089
or use a virtual machine right there, or use Amazon or use whatever you want. 

00:56:33,089 --> 00:56:40,089
No matter where you are. The issue is that Docker is specific for containers. 

00:56:49,319 --> 00:56:54,780
In distributed development teams, the configurations on many systems are at the

00:56:54,780 --> 00:57:01,180
databases and at least in Drupal, it is being resolved in Drupal 8 with configurations in files, it is resolved with consoles, and so on.

00:57:01,180 --> 00:57:07,520
But there are other systems in which the configurations are all in the databases.

00:57:07,520 --> 00:57:13,770
Is there a methodology or a service where DevOps

00:57:13,770 --> 00:57:20,770
helps us share the configurations that I have? 

00:57:24,130 --> 00:57:31,130
Say WordPress, any other, Jungle, whatever. They took me out of Drupal jungle. 

00:57:35,299 --> 00:57:42,299
Is there a methodology in DevOps that helps us solve this so that I can share my configurations with other developers?

00:57:43,589 --> 00:57:50,589
In the case of specific Drupal there are several talks that you will see, e.g., Victor's lecture,

00:57:54,799 --> 00:58:01,799
or Renato's which is about best practices on deployment that will clarify a lot.

00:58:03,329 --> 00:58:07,950
Today with Drupal, if you can do that. You can take all the configurations and put them in code. 

00:58:07,950 --> 00:58:14,339
Moreover, Victor makes a pro-file where you have everything, you do a full build of your Drupal, without sitting in a bank before.

00:58:14,339 --> 00:58:21,339
What is what usually happens?

00:58:21,900 --> 00:58:25,849
You're always carrying a database everywhere. The idea is not to have that sort of thing. 

00:58:25,849 --> 00:58:32,849
And that is something that does not come, it's not something new, it is a very old idea that is the subject of having a stateless application.

00:58:34,430 --> 00:58:41,430
Why is it so easy to make automated tests

00:58:42,770 --> 00:58:49,770
with this type of things and managing several instances, like a stateless application? 

00:58:50,109 --> 00:58:54,030
It does not have a database. What they have is an automated process to be able to start, to be able to build, to make the build. 

00:58:54,030 --> 00:59:01,030
I don't know how to give you a perfect answer for that

00:59:01,589 --> 00:59:08,589
because it is a problem that we are also coping with. But never, outside Drupal and Wordpress,

00:59:08,920 --> 00:59:14,450
I think I never had to deal with that problem, because I never used anything as similar as

00:59:14,450 --> 00:59:20,230
the database, I have configurations in the database, that sort of thing. 

00:59:20,230 --> 00:59:27,230
What I can say is that it tries not to do it. For example, Ruz, before, it was not so integrated

00:59:27,670 --> 00:59:32,089
with Configuration Management or Features, that sort of thing. 

00:59:32,089 --> 00:59:37,990
By doing Ruz, sometimes you could find logic in the database. I have to walk around with that logic everywhere, and it is not

00:59:37,990 --> 00:59:43,069
the application any more. And it's a little harder to do maintenance on it

00:59:43,069 --> 00:59:47,569
because sometimes it is faster to find a code than to find in a system

00:59:47,569 --> 00:59:54,569
that is all configurations like the Drupal uses. 

00:59:54,880 --> 01:00:01,880
La buena práctica es poner todo en código. Es una manera, porque necesitas versionarlo. No puedes versionar un banco de datos, es una locura.

01:00:02,390 --> 01:00:09,390
Gracias, cuáles serían las mejores prácticas para nosotros desarrolladores,

01:00:11,950 --> 01:00:18,640
para testers, para anticipar problemas que puedan introducir sistemas de cache como Varnish o Memcash. 

01:00:18,640 --> 01:00:25,640
Eso es uno de los por qué porque estamos usando Juju. Porque yo quiero tener casi,

01:00:29,040 --> 01:00:35,799
 exactamente el ambiente de producción dentro de mi máquina local. O lo quiero tener

01:00:35,799 --> 01:00:38,869
en otro lado, solamente lo quiero testear, quiero ver qué es lo que pasa cuándo haga

01:00:38,869 --> 01:00:45,869
el deploy. A ver cómo se va a comportar con nuestras reglas de Varnish. 

01:00:47,230 --> 01:00:50,400
Nosotros tuvimos ese tipo de problema. Y tenemos problemas con otras cosas como CDE, en fin, otro tipo de cosas.

01:00:50,400 --> 01:00:57,400
 La mejor cosa que pudimos hacer es utilizar Juju, porque para mí orquestar

01:00:59,470 --> 01:01:04,200
una topología tan grande de producción, es algo que no lo puedo andar cargando para todos lados, es una cosa costosa.

01:01:04,200 --> 01:01:11,010
 Y de una vez, ciao. Juju es una de las cosas tan importantes

01:01:11,010 --> 01:01:16,760
ahora, siendo recomendada en varias empresas grandes, y eso porque realmente está solucionando un gran número de problemas.

01:01:16,760 --> 01:01:23,760
Hablando de Juju, aprovechando. Hoy voy a iniciar un jacatón

01:01:28,150 --> 01:01:33,630
para terminar ese charm de Drupal, hoy funciona y eso, pero el charm hace más de que hace simplemente un deploy de un Drupal.

01:01:33,630 --> 01:01:39,020
Le puedes especificar un repositorio y él agarra y

01:01:39,020 --> 01:01:46,020
te importa un proyecto dentro de las configuraciones del charm. Es muy fácil iniciar un nuevo

01:01:47,190 --> 01:01:51,579
proyecto sin tener nada. Simplemente agarras y les dices: agarra el proyecto de este repositorio y ya se arma toda la infraestructura.

01:01:51,579 --> 01:01:58,579
Voy a hacer hoy un jacatón para explicar más

01:02:01,079 --> 01:02:08,079
sobre cómo funciona para quién quiere saber y el jueves a a ser solamente sprints, 

01:02:10,589 --> 01:02:17,589
vamos a sentarnos y tratar de terminar y voy a explicar cómo funciona mejor el charm específicamente.

01:02:19,450 --> 01:02:24,119
Y otra cosa es que Unubuntu está patrocinando este evento exactamente por ese tipo de cosas

01:02:24,119 --> 01:02:28,349
quieren incentivar a que todo ese conocimiento que nosotros tenemos de mejores prácticas

01:02:28,349 --> 01:02:33,670
para la infraestructura estén en un lugar dónde todo el mundo pueda compartir. 

01:02:33,670 --> 01:02:39,069
Es un poco de mi visión, no es cosa que andan diciendo por ahí. Porque lo que pasa muchas veces es que nosotros trabajamos con Drupal.

01:02:39,069 --> 01:02:46,069
Y con Drupal si bien no trabaja de una manera preocupándote

01:02:46,240 --> 01:02:51,260
siempre por la legalidad y el performance y todo ese tipo de cosas, puedes perder un

01:02:51,260 --> 01:02:56,270
poco la línea y ahí vas a tener que recurrir a alguien que sepa como escalar tu aplicación

01:02:56,270 --> 01:03:00,760
o sepa dejarla rápido mínimo que esté no performáticamente bien. 

01:03:00,760 --> 01:03:05,079
Una cosa es que tu aplicación se performática y otra tener un tiempo de respuesta rápido. 

01:03:05,079 --> 01:03:12,079
Son cosas muy diferentes. Por eso se generan esos cesh absurdos, es una HTML prácticamente. 

01:03:16,270 --> 01:03:23,270
Ese tipo de restricción que está pasando hoy, solamente Acquia sabe cómo dejar los sites súper rápidos, y configurar.

01:03:23,530 --> 01:03:27,460
Cuál es el mejor configurador de Rays para Drupal. 

01:03:27,460 --> 01:03:32,190
Tenéis que ir buscando de alguien que dice, hay varias páginas que dicen eso. Podríamos centralizar eso y automatizar y dejarlo en un lugar solo.

01:03:32,190 --> 01:03:36,150
Podemos generar una red de conocimientos.

01:03:36,150 --> 01:03:43,150
Por ejemplo, cuál es la mejor configuración de Maskiel. 

01:03:44,950 --> 01:03:50,480
Hay un o dos posts en Drupal.org que hablan de eso y hay todo este pingado por todos lados, pero no hay algo que sea fácil de automatizar.

01:03:50,480 --> 01:03:53,720
 Tenéis siempre que agarrar el código, ponerlo y configurarlos,

01:03:53,720 --> 01:04:00,720
pero tiene que hacerlo vos. Y eso es desperdicio. No, porque es muy exploratorio. 

01:04:14,030 --> 01:04:21,030
Sí. Sí, pero lo que pasa es que. Sí, pero ese problema de tuning realmente. 

01:04:30,109 --> 01:04:34,720
Cada vez que nosotros vendemos un servicio decimos nosotros te turnamos tu aplicación Drupal. 

01:04:34,720 --> 01:04:41,720
Es un proceso totalmente probatorio nuevo. Pero, siempre sabemos más o menos dónde tenemos que modificar la configuración.

01:04:41,980 --> 01:04:47,339
Y si yo te doy eso de una manera que es un formulario, dónde tienes unos campos, dónde

01:04:47,339 --> 01:04:53,700
vos vas a modificar, y te puedo decir hasta, este es muy importante. 

01:04:53,700 --> 01:05:00,700
Te estoy compartiendo ese tipo de conocimiento. Te facilita más ese tipo de tuning detallado específicamente para esa aplicación. 

01:05:02,420 --> 01:05:08,690
No te soluciona todo el problema. Por eso es automatización con un toque humano.

01:05:08,690 --> 01:05:15,690
Nunca va a ser perfecto, tampoco no es bueno debe ser todo automatizado.

01:05:21,900 --> 01:05:28,420
Qué tan complejo es montar la metodología de bugs en un ambiente de trabajo que tiene diferentes infraestructuras. 

01:05:28,420 --> 01:05:33,010
Digamos diferentes gustos a nivel de desarrollo. No sé, digamos

01:05:33,010 --> 01:05:40,010
que estamos hablando de Juju y a la mejor de propiamente de la plataforma. 

01:05:42,089 --> 01:05:49,089
Pero si se tiene Windows, Map. Qué tan complejo es llegar a tener una infraestructura completa. 

01:05:52,430 --> 01:05:59,430
Cuando empecé con Juju en Tacher fue un caicao. Llegué y dije ya estudié Juju, ya sé cómo funciona, pero todo el equipo no sabía.

01:05:59,809 --> 01:06:03,980
No sabían qué era Linux Container. Fue un shock muy grande. 

01:06:03,980 --> 01:06:09,130
Y eso hizo que las personas no sabían qué, cómo, no sabían, no tenían Linux Mint.

01:06:09,130 --> 01:06:14,670
Otra persona tenia Unubuntu, la versión no sé qué, otra persona tenía una Mac,

01:06:14,670 --> 01:06:21,670
 otra persona tenía Windows, y ahí va. Pero comenzamos a ser los pocos. 

01:06:22,339 --> 01:06:28,099
Entonces comenzamos por Vagrant, por ejemplo, comenzamos con Vagrant, con Ansi Vault. 

01:06:28,099 --> 01:06:31,900
No, empezamos con Vagrant Bash, después con Ansi Vault. Ahí todo el mundo comenzó a entender que

01:06:31,900 --> 01:06:36,200
existe una etapa de aprovisionamiento, de que si tienen problemas para probarlos. 

01:06:36,200 --> 01:06:41,849
Y que existe todo un proceso de automatización que se puede, que es rápido de manosear.

01:06:41,849 --> 01:06:48,849
Después que salimos de eso, de esa independencia del sistema DevOps, ese fue el momento con Vagrant.

01:06:49,819 --> 01:06:56,819
Puedes tener un Linux, el mismo Linux que todo tu equipo está trabajando en cualquier

01:06:57,119 --> 01:06:59,880
tipo de sistema operacional, puedes trabajar en Windows, puedes trabajar en cualquier otro.

01:06:59,880 --> 01:07:06,599
Si vos usas un server en tu servidor de producción, vos tener que hacer tu aplicación en aquél.

01:07:06,599 --> 01:07:13,190
Porque la aplicación es todo eso. Es la infraestructura, es todo. Imagina una aplicación sin infraestructura.

01:07:13,190 --> 01:07:20,190
Y una estructura sola sin aplicación, no es bueno también. Ellos se complementan.

01:07:21,030 --> 01:07:27,920
Tienen que andar juntos también. Lo que hicimos fue usar Vagrant con Ansi Vault y después

01:07:27,920 --> 01:07:34,920

YouTube URL: https://www.youtube.com/watch?v=qSELC0t_dLA


