Title: DrupalCon Latin America 2015: Drupal 8 Console (scaffolding module generator)
Publication date: 2015-02-10
Playlist: DrupalCon Latin America - Feb 2015
Description: 
	Speakers: jmolivasdmouse
Every modern framework nowadays provides a scaffolding tool code generator for speeding up the process of starting a new project and avoid early repetitive tasks.

The purpose of this project is to leverage the Symfony Console Component to provide a CLI tool to automate the creation of drupal 8 modules by generating the directory structure for a module, routing, controllers, forms, services, plugins and required configuration files.

It supports adding services using Dependency Injection on class generation.

What is out of the box?

Generates module and info files.
Generates PSR-4 compliant directory structure for a module.
Register routes on YML files and map to PHP Classes (controller, form, service).
Create classes adding namespaces, uses and also the extend and implements keywords when required.
Support adding services using Dependency Injection on class generation.
During this session you will learn about the concepts and components introduced on Drupal 8 and by the end you will have the basic knowledge required for writing a Drupal 8 module.

Some topics that will be mentioned on this session

HTTP Request/Response
Composer
Annotations
Namespaces
Services
Service Container
Dependency Injection
Routing
Controller
This session will include a demo of https://drupal.org/project/console (scaffolding module generator)

Who will benefit of using an automatic code module generator ?

Module Maintainers & Developers
Create & Migrate contributed modules to Drupal 8.
Drupal Trainers & Consultors
Train developers on Drupal 8.
Drupal Shops
Reduce module development time for Drupal 8.
Captions: 
	00:00:00,080 --> 00:00:07,080
Let's kick off this chat. Originally this session was proposed as Scaffolding module generator

00:00:09,429 --> 00:00:16,429
but since we proposed the chat and reached the date of DrupalCon many things changed in the project.

00:00:18,680 --> 00:00:24,640
It has has evolved beyond a code generation tool.

00:00:24,640 --> 00:00:31,060
So we believe a more appropriate name for the talk would be

00:00:31,060 --> 00:00:37,840
something like Accelerating the development process for Drupal 8 using Drupal Console.

00:00:37,840 --> 00:00:44,190
Drupal Console is the name of a project that we will discuss today. 

00:00:44,190 --> 00:00:51,190
Some of you have probably begun to work with or have worked with Drupal 8 or with Synphony. You will see some concepts of Synphony in Drupal 8 and how they relate. 8 00: 00: 53.390 -> 00: 01: 00.390 About us. Let's talk a little bit about us.

00:01:00,390 --> 00:01:07,390
I am David Flores, work at Indaba in Mexico City.

00:01:07,450 --> 00:01:12,570
These are my Github accounts and depositories where you can follow some of the things I'm working on.

00:01:12,570 --> 00:01:17,710
My Twitter account. And also another thing we do besides making code,

00:01:17,710 --> 00:01:24,710
 sometimes we speak in a Podcast called DruPodCast. 

00:01:25,130 --> 00:01:28,900
The podcast are in Spanish and we try to invite people who are around Drupal, or who have anything to do with Drupal.

00:01:28,900 --> 00:01:35,900
 Not necessarily those who develop the CMS. 

00:01:36,310 --> 00:01:42,040
If you know someone who would like to be invited, reach us at or send a message to our Twitter account and we will gladly invite them.

00:01:42,040 --> 00:01:46,960
My name is Jesus Manuel Olivas, I work for BlinkReaction and as you can see, my links are also there.

00:01:46,960 --> 00:01:53,690
My blog in which I try to occasionally write. 

00:01:53,690 --> 00:01:59,270
My Github account where they can see the code that I have,

00:01:59,270 --> 00:02:06,030
 and my Twitter account is jmolivas and, along with David, I am part of DruPodCast.

00:02:06,030 --> 00:02:13,030
You can find me at jmolivas or DruPodCast. What is Drupal Console?

00:02:16,350 --> 00:02:21,390
Or what is the console? As we call it in Spanish. Some of you perhaps have begun exploring Drupal 8 and for those who haven't,

00:02:21,390 --> 00:02:27,870
we will mention in this chat that there are new many things and concepts

00:02:27,870 --> 00:02:32,170
that you will have to learn before working with Drupal 8.

00:02:32,170 --> 00:02:39,170
 We believe that Drupal 8 is a little more technically advanced than its predecessors.

00:02:39,810 --> 00:02:43,780
Because writing a module in Drupal 8 is more complicated. Right, and besides, all these concepts that you have to learn will not only be useful in the Drupal world,

00:02:43,780 --> 00:02:48,319


00:02:48,319 --> 00:02:53,209
but anywhere, be it, making Synphony, Larabe, making Rails, or Jango.

00:02:53,209 --> 00:02:59,989
The concepts are completely the same. You can apply them anywhere.

00:02:59,989 --> 00:03:04,130
 What makes Drupal 8 a bit more complicated?  

00:03:04,130 --> 00:03:09,270
Technically, with previous versions it's that, to generate a module it involves a lot of Boilerplate code, or code,

00:03:09,270 --> 00:03:15,300
we can't find the definition in Spanish, Base Code or Initial Code. To add business logic.

00:03:15,300 --> 00:03:21,380
Then starting a module in Drupal 8 requires a lot of manual work and many repetitive tasks that we need to do multiple times.

00:03:21,380 --> 00:03:26,810
And this creates opportunities for errors.

00:03:26,810 --> 00:03:33,810
The project starts by taking a component called Synphony Console,

00:03:35,860 --> 00:03:42,860
which provides the interface in console mode, in Selei mode, which allows us to ask questions,

00:03:44,959 --> 00:03:51,290
allows us to interact with the user in a very simple way. 

00:03:51,290 --> 00:03:56,090
We decided that if Drupal 8 was taking advantage of other components in Synphony, 

00:03:56,090 --> 00:04:01,819
we decided to also take advantage when typing commands 

00:04:01,819 --> 00:04:07,060
when we generated the code, which was our main goal. we took the console and integrated with Drupal.

00:04:07,060 --> 00:04:12,090
 Right, as he commented, practically this project takes advantage of the Synphony component  to generate or to interact with our installation of Drupal 8.

00:04:12,090 --> 00:04:19,090
We could say that the console is a new addition to Proudly Found Elsewhere.

00:04:19,589 --> 00:04:26,589
If you recall the concepts of Not Invented Here or Ni Syndrome,

00:04:29,180 --> 00:04:34,620
where you had to leave behind all those practices of Ni Syndrome,

00:04:34,620 --> 00:04:39,270
or Not Invented Here and take advantage of components that exist.

00:04:39,270 --> 00:04:46,270
This console allows that, the project allows it. And this tool not only generates the code

00:04:46,289 --> 00:04:53,289
that you need as is initially was. Because the console is already script, it already has many contributions,

00:04:54,240 --> 00:04:59,199
it already has a lot of added functionality, it allows us to develop faster in the console, 

00:04:59,199 --> 00:05:03,789
develop new commands, develop new generators,

00:05:03,789 --> 00:05:10,219
new integrations in a simpler way and only we are focusing on developing

00:05:10,219 --> 00:05:15,960
what is going to be useful for Drupal 8 and are not developing Console. 

00:05:15,960 --> 00:05:22,339
We are simply taking advantage of it. We applying development to your applications, not your tools.

00:05:22,339 --> 00:05:29,339
Who started this? Initially it was us two, Jesus and me. 

00:05:31,939 --> 00:05:38,469
We started to talk about around August. Now we have two more people that are aiding in the upkeep all this code we are making.

00:05:38,469 --> 00:05:45,469
New ideas, new commands.

00:05:45,779 --> 00:05:51,909
On of them is here with us, Omar. The other is in London at the moment.

00:05:51,909 --> 00:05:56,469
He could not come. But, as David says the two of us are doing it, Omar is helping us,

00:05:56,469 --> 00:06:03,469
but you could blame this person for the project. Doing a bit of history, I love to tell this story.

00:06:04,119 --> 00:06:08,610
The project was conceived in Drupal Camp Costa Rica in 2013, around September.

00:06:08,610 --> 00:06:15,610
While David and I talked with Larry Garfield about Drupal 8, the components that were coming out.

00:06:15,939 --> 00:06:22,149
At one point Larry said:

00:06:22,149 --> 00:06:25,330
someone should make the component for the Synphony console. And that's when we decided, well, we can do this.

00:06:25,330 --> 00:06:29,559
And for all this we had been working for two months, three months talking about what we should do.

00:06:29,559 --> 00:06:34,259
i which we were exploring Drupal 8 changes.

00:06:34,259 --> 00:06:40,759
And when we realized it was so hard to be rewriting and rewriting the same task,

00:06:40,759 --> 00:06:46,779
That's where we realized it could be a very useful tool.

00:06:46,779 --> 00:06:50,740
Right, it started as a Pet Project, we could say one Side Project that we used to learn Drupal 8. 

00:06:50,740 --> 00:06:54,369
And from there, we were interested in the project, we have had people who contribute and the end.

00:06:54,369 --> 00:06:59,649
 We have explained a little about what project is, but you could ask why,

00:06:59,649 --> 00:07:03,929
How could this be important to me? I think everyone knows this, right?

00:07:03,929 --> 00:07:10,889
It's the classic curve, the classical chart, that we show new people

00:07:10,889 --> 00:07:16,860
that are in Drupal so that they get scared and think twice if they will learn that SMS. 

00:07:16,860 --> 00:07:23,860
And as we all know, Drupal is a little more complex than other SMS. 

00:07:24,169 --> 00:07:28,360
Even worse is that, Drupal 8 is not only more complex than previous versions. This is the curve chart for the Drupal 8 message.

00:07:28,360 --> 00:07:35,360
If you already knew how to program in modules in Drupal 7, Drupal 6, here comes Drupal 8 and start everything over at square one.

00:07:36,240 --> 00:07:42,279
And, why do we start from scratch?

00:07:42,279 --> 00:07:49,149
What is it that makes Drupal 8 more technically complex than other versions? 

00:07:49,149 --> 00:07:56,149
The inlay, the insertion of new concepts in Drupal 8 has also made the code more complex.

00:07:56,509 --> 00:08:02,009
Now we have more capabilities to connect Drupal to other systems.

00:08:02,009 --> 00:08:06,990
To extend Drupal even further than we already do now.

00:08:06,990 --> 00:08:12,929
For this reason it is more complex. And there are many new concepts that are beyond the scope of Drupal as such. 

00:08:12,929 --> 00:08:17,719
Not that Synphony does more than Drupal 8.

00:08:17,719 --> 00:08:24,059
We will see new components, new concepts like NameSpace, Services, we do not want to comment further and them not use them.

00:08:24,059 --> 00:08:28,529
Drivers, annotations, and that's what makes it a bit trickier.

00:08:28,529 --> 00:08:32,940
But that, another one of the reasons that Drupal 8 is more complex is because we have to write more code than previous versions.

00:08:32,940 --> 00:08:38,450
For example, to write a simple page,

00:08:38,450 --> 00:08:43,950
read two arguments of a URL takes a service or two service container services.

00:08:43,950 --> 00:08:48,120
We need seven lines of code to register the route and 55 lines of code to generate the controller class.

00:08:48,120 --> 00:08:55,120
Well, it does not seem like much, but what if we want to create an entity? 

00:08:55,600 --> 00:09:00,450
If someone has tried to generate a content entity in Drupal 7, you have to make a lot of hooks.

00:09:00,450 --> 00:09:06,090
Here we have to make a few, 14 files, update routes,

00:09:06,090 --> 00:09:13,090
 do a lot of things in order for our organization to be available.

00:09:13,250 --> 00:09:20,250
14 files and hundreds of lines of code. 

00:09:21,430 --> 00:09:27,520
We have a problem. How can we solve it? How can the project help us? 

00:09:27,520 --> 00:09:34,520
What makes the Console Out of the Box  once you install it? 

00:09:35,320 --> 00:09:40,770
We have several generators already available, and you can also extend them. You can create your own. 

00:09:40,770 --> 00:09:47,770
The code it generates is already compatible with standard auto-loading using Drupal 8 PSR-4.

00:09:48,320 --> 00:09:53,080
It also records some configuration files, some routes that are written in YML files.

00:09:53,080 --> 00:09:58,770
Already available for you. It records services, it records, for example, if we want controller and to use a service the service container,

00:09:58,770 --> 00:10:02,970
it takes that service and injects it into our controller.

00:10:02,970 --> 00:10:08,460
As we mentioned. It handles repetitive and even boring tasks. 

00:10:08,460 --> 00:10:15,460
And you can generate a margin of error. 

00:10:16,610 --> 00:10:20,130
Sure, that's not what we look for when we are developing a product, when we are developing a module,

00:10:20,130 --> 00:10:25,690
 we are not interested in worrying about where the name space came from, where was the class.

00:10:25,690 --> 00:10:29,690
That's not important. What concerns us is completing the logic, which is the really difficult part.

00:10:29,690 --> 00:10:36,330
 As mentioned the project initially began as a module generator .

00:10:36,330 --> 00:10:40,370
 But in the course of developing it, we started to interact with Drupal.

00:10:40,370 --> 00:10:47,370
 We need to check if the recently registered route is properly registered. 

00:10:47,950 --> 00:10:54,890
If the service we are trying to generate really was... was actually recorded.

00:10:54,890 --> 00:10:59,990
The project, we could say that is divided into two categories or into two groups. 

00:10:59,990 --> 00:11:05,070
The code generators and commands that interact with the installation of Drupal. 

00:11:05,070 --> 00:11:11,910
In this case we have commands that list configurations. 

00:11:11,910 --> 00:11:18,910
Commands that interact with the installation of Drupal, be it, revising the status of service routes and commands that generate code review. 

00:11:19,480 --> 00:11:26,480
Right now these are our main aspects of commands and this could possibly change somewhat over time.

00:11:26,980 --> 00:11:32,800
 Based on the imperfections of SMI, in the end they said.  There is no tool to move contents of a Drupal installation to another.

00:11:32,800 --> 00:11:38,470
 We talked a bit about how that could perhaps be a good feature for the tool;

00:11:38,470 --> 00:11:43,350
moving contents of a Drupal instance to another.

00:11:43,350 --> 00:11:47,200
So, if you ever know of any feature that could be interesting, let us know.

00:11:47,200 --> 00:11:51,540
 And who would benefit from using a tool like this? 

00:11:51,540 --> 00:11:56,490
As I mentioned at the beginning, we created this tool to learn Drupal 8, to know what was happening.

00:11:56,490 --> 00:12:00,660
To type a command, then you have to know what will be generated.

00:12:00,660 --> 00:12:06,100
We then have to understand each of the pieces that we put into the generators.

00:12:06,100 --> 00:12:09,750
 Let me interject. Fortunately, the documentation was not up to date. 

00:12:09,750 --> 00:12:15,540
The documentation was not up-to-date in the code. So they had to read the code and documentation.

00:12:15,540 --> 00:12:22,540
 Initially it was a tool designed for learning, like the people doing training,

00:12:22,880 --> 00:12:28,120
people doing consulting on how to develop for Drupal 8

00:12:28,120 --> 00:12:33,530
This tool could be very useful because you could easily teach the necessary code,

00:12:33,530 --> 00:12:39,800
the skeleton needed to start developing a module. 

00:12:39,800 --> 00:12:45,760
People, for example, developers obviously, because they can create modules in a faster way

00:12:45,760 --> 00:12:51,040
 and agencies because they can reduce the time of development of their projects.

00:12:51,040 --> 00:12:55,930
Speaking a little about what the tool makes, there are some similar projects against a project called Module Builder,

00:12:55,930 --> 00:13:00,730
 which generates the scaffolding for modules. Right now it does this for up to Drupal 8.

00:13:00,730 --> 00:13:06,900
It has some things it already generates for Drupal 8, it was mainly for Drupal 7

00:13:06,900 --> 00:13:10,380
and I think also generated some things for Drupal 6. Exactly.

00:13:10,380 --> 00:13:16,630
When we started the project, there was already a code generation tool.

00:13:16,630 --> 00:13:23,630
 It was written in Bash. There's the link. It is the third. 

00:13:23,910 --> 00:13:30,350
But it is a little hard to contribute to a project written in Bash.

00:13:30,350 --> 00:13:36,010
There is another project called Drupal Module Upgrader that allows you to upgrade or migrate your module from Drupal 7 to Drupal 8.

00:13:36,010 --> 00:13:41,820
It does not generate the code from scratch. Based on a Drupal 7 project, it converts it to Drupal 8

00:13:41,820 --> 00:13:46,720
 and there is another tool we found recently. 

00:13:46,720 --> 00:13:50,440
It is a generator for Drupal 8 and it too is written in the Synphony component, 

00:13:50,440 --> 00:13:56,460
but it generates modules for Drupal 6, 7, and 8 if I'm not mistaken. 6, 7, and 8 for Drupal 8 generate very few things.

00:13:56,460 --> 00:14:03,460
 For Drupal 7, it seems that it does have quite enough scaffolding, enough skeletons that are now available.

00:14:04,610 --> 00:14:11,610
The difference with some other projects like those we just mentioned.

00:14:16,660 --> 00:14:20,330
One is that we are using programs that have oriented objects.

00:14:20,330 --> 00:14:26,330
We are taking advantage of all the components provided by Synphony and other projects.

00:14:26,330 --> 00:14:31,910
If you are interested in the packages we are using, you can go to the repository and review them.

00:14:31,910 --> 00:14:38,910
 And another reason very, very... even though very different projects, that we have no plan to support, earlier versions of Drupal.

00:14:39,350 --> 00:14:46,350
 These are the links where you can find the project. 

00:14:49,840 --> 00:14:56,390
We have a page link, which is DrupalConsole.com, 

00:14:56,390 --> 00:15:02,680
where we are normally updating the commands that are already there and commands that are available for the console.

00:15:02,680 --> 00:15:07,600
 But what if you want to contribute? Everybody wants to contribute.

00:15:07,600 --> 00:15:14,600
Of Course. If you have a Drupal account, Drupal username, we have the project Drupal.org/project/console.

00:15:17,529 --> 00:15:24,529
And if you don't have an account with Drupal, if you are Github users, can also find it on Github,

00:15:24,850 --> 00:15:31,850
 send a request, and we will follow up with the code that we are generating.

00:15:36,510 --> 00:15:42,760
About the documentation, we have a documentation book that is still in the working process. 

00:15:42,760 --> 00:15:46,630
It is not a finished project, it is constantly being revised. You can find it, we'll share the link.

00:15:46,630 --> 00:15:50,810
And also, if you have any questions about the project you can enter the chat. 

00:15:50,810 --> 00:15:57,810
We use a tool called Gitter for chat, for interaction, so feel free to ask questions. 

00:15:58,750 --> 00:16:05,740
Let's talk a little bit about what this is about and watch some demos. How do we download the project?

00:16:05,740 --> 00:16:10,440
There are three ways to do it. The first is using the installer, we are not going to explain the instructions in detail because we are going to show you a video of how it works.

00:16:10,440 --> 00:16:14,160


00:16:14,160 --> 00:16:19,910
The first is installer, the second is... we could say is using a poser. 

00:16:19,910 --> 00:16:24,650
And the third could be manually. Which do we recommend? 

00:16:24,650 --> 00:16:31,650
We advise using the installer, since the installer performs a system check. 

00:16:32,839 --> 00:16:38,560
And if something is missing, it will tell you. Let's see a video of how the installer is installed. And... you explain it, please.

00:16:38,560 --> 00:16:45,560
 We are using a PHP installer.  So, you need to have PHP and SLI active, and simply run the purge command.

00:16:46,930 --> 00:16:53,930
 It runs on Linux and Mac.

00:16:56,810 --> 00:17:02,170
If any of you uses Windows, we do not use Windows and we have not tested it on Windows.

00:17:02,170 --> 00:17:06,509
We do not know where support for using Windows comes from. 

00:17:06,509 --> 00:17:13,509
And if someone uses Windows and wants to do the test, please contact us anytime and we will approve it.

00:17:16,639 --> 00:17:23,589
Once this process ends, we have a binary, which we can now run either as PHP, binary name,

00:17:23,589 --> 00:17:30,589
 or allowing execution permission for UNIX. 

00:17:30,749 --> 00:17:34,580
Another option is, once you have the installer, if we want to move or run the console from anywhere in our system,

00:17:34,580 --> 00:17:39,990
 what we can do is move it. 

00:17:39,990 --> 00:17:45,679
We can move it to a binary directory as UserLocalBin or UserBin where it is available in your pac 

00:17:45,679 --> 00:17:52,009
so that you don't have to download it in each Drupal installation you run. 

00:17:52,009 --> 00:17:59,009
It would be like making a global installation for the project. Once you have installed, how are we going to update it?

00:18:02,080 --> 00:18:07,580
 We constantly make releases, then there is a need to update it. 

00:18:07,580 --> 00:18:14,580
We have created a command to update the project. It's just as easy as running. 

00:18:14,710 --> 00:18:20,429
This command is extremely useful because we are constantly adding new features or fixing bugs in existing commands.

00:18:20,429 --> 00:18:26,960
We have a problem because we try to keep the console synchronized to the beta version of Drupal 8 and this is the 6th. 

00:18:26,960 --> 00:18:33,960
183 00: 18: 35.279 -> 00: 18: 38.499 But in that moment is when 7 is released, when surely other things are going to break and need to be rearranged.

00:18:38,499 --> 00:18:44,429
Then, if you run this command, it is the update, with this, you automatically have the next version downloaded.

00:18:44,429 --> 00:18:51,429
 It's simple.  What commands do we have available?

00:18:53,789 --> 00:18:58,360
 We have a list of commands, we will not mention them all. 

00:18:58,360 --> 00:19:02,100
We will mention that we can generate controller codes, pull the content, give configuration. 

00:19:02,100 --> 00:19:09,100
Rest courses if you want to use you own resources to API to generate configuration forms, plug-ins, services.

00:19:12,730 --> 00:19:18,539
 We even have a command that generates commands. 

00:19:18,539 --> 00:19:22,299
If you want to generate a command, make integration into your modiolus, we have a command that generates commands.

00:19:22,299 --> 00:19:28,529
Let's see how some of them function. We will spend the most basic, which would be how to generate a module.

00:19:28,529 --> 00:19:35,039
How to generate it is implementing, for example, by listing the modules.

00:19:35,039 --> 00:19:40,490
The Drupal generate module. Drupal is an alias, call it what you want. 

00:19:40,490 --> 00:19:45,740
Because the interaction is one such module name. The pair where we want to put it. 

00:19:45,740 --> 00:19:50,820
What is the description we want you to call the module? The package. 

00:19:50,820 --> 00:19:54,529
And finally we ask whether we want to configure the module. Lastly, we ask if we want to confirm the generation.

00:19:54,529 --> 00:19:59,169
We say yes and it gives us a report of the files it has generated. 

00:19:59,169 --> 00:20:06,169
In this case we will see the contents thereof. Next, we will install the module. 

00:20:07,659 --> 00:20:13,600
We have generated a module called Example. We use the command module to enable it and we will go to the site. 

00:20:13,600 --> 00:20:20,519
As you can see, all the commands are simple, interactive,

00:20:20,519 --> 00:20:24,649
they ask questions, which you simply respond to with the name,

00:20:24,649 --> 00:20:28,559
with the description, the PAT, with the attributes that want to add, in case they are a form one entity.

00:20:28,559 --> 00:20:35,559
It is very easy to follow a command. 

00:20:36,929 --> 00:20:42,519
In future versions we plan to have a little more information about what you are asking.

00:20:42,519 --> 00:20:49,519
 Name of a control, what is a control.  Exactly, we are planning a version with a code output.

00:20:53,570 --> 00:21:00,239
 In this case we can see that the module has been enabled and generates two files.

00:21:00,239 --> 00:21:03,690
It generates two files, a call file, the on that makes the module discovered in Drupal 8

00:21:03,690 --> 00:21:10,690
 and it generates the point module, which we only have one implemented. 

00:21:12,789 --> 00:21:19,639
Let's see the code that we generated. This is the file linfo.llamo and this is the .module.

00:21:19,639 --> 00:21:26,639
How to create a module generate module. What other command do we have? How to generate a service.

00:21:27,299 --> 00:21:34,299
Another concept that will find often in Drupal 8 is services. 

00:21:35,860 --> 00:21:41,119
This command allows them to generate a service. What we are making is a list of services registered in this installation of Drupal.

00:21:41,119 --> 00:21:46,259
 Let's use a PipeGrip to tell us, find the service that we generated.

00:21:46,259 --> 00:21:51,809
 Ask the name of the module in which that service will be put, in which that service will be provided.

00:21:51,809 --> 00:21:56,779
 And it starts asking us for the data they need to register that service.

00:21:56,779 --> 00:22:02,489
 It even allows us to add services that already exist in the service container or the new service Drupal installation we are adding.

00:22:02,489 --> 00:22:07,669


00:22:07,669 --> 00:22:12,119
Once we configure the generation, we see again that it has generated two files.

00:22:12,119 --> 00:22:18,340
A file, services.llamo, in which the service registry and a class is done. 

00:22:18,340 --> 00:22:22,950
A PHP class, which contains the definition of the menu. 

00:22:22,950 --> 00:22:28,450
We can see the call file that is the record of the service and the service code. 

00:22:28,450 --> 00:22:31,710
If you noticed, it already does the import, makes the uses of all the classes we need, if you need to extend them,

00:22:31,710 --> 00:22:37,889
if they need to do something else, it generates it for us as well. 

00:22:37,889 --> 00:22:41,369
And now we will confirm that the service we've created has really been registered in our Drupal installation.

00:22:41,369 --> 00:22:47,009
 We know it's called Example, we do it in a container of a book installer to list the services.

00:22:47,009 --> 00:22:51,549
 We realize that it is not there.  We have to make it...

00:22:51,549 --> 00:22:58,179
If we had programs with the cache in earlier versions of Drupal, here many more caches. 

00:22:58,179 --> 00:23:05,179
Before you blame someone, blame the cache first. 

00:23:06,529 --> 00:23:10,619
And we can see that the service has been successfully registered because we see the service name and the class to which it has been registered as a service.

00:23:10,619 --> 00:23:17,619
 Next command, now a little bit of how to generate a controller.

00:23:18,700 --> 00:23:25,669
Go ahead David. In the same way that the command service module asks us where you create this controller,

00:23:25,669 --> 00:23:30,529
everything will be in examples mode. 

00:23:30,529 --> 00:23:36,139
We start asking questions about what we plan to call our driver, if we want to create a base class of unit tests for this class.

00:23:36,139 --> 00:23:43,139
It allows us to include services as well. 

00:23:44,059 --> 00:23:51,059
It is the fourth question. It also allows us to add pates that turn into Drupal paths that point to this controller.

00:23:53,739 --> 00:23:59,549
 In this case we have created a route that responds to a URL argument, it will read it, we will show you on the controller.

00:23:59,549 --> 00:24:06,549
We can see that, in the controller...

00:24:09,570 --> 00:24:16,570
No, no, it doesn't do it for this. For routes no. Not always. Just for drivers.

00:24:19,440 --> 00:24:24,690
We can see the URL running, reading the Drupal parameters on top, and showing it.

00:24:24,690 --> 00:24:31,690
We will generate another controller. We will show that the path we have created exists in the system.

00:24:34,289 --> 00:24:41,090
We use ReadyBug command and it shows us that the route has been registered and that's the Pat it respond to.

00:24:41,090 --> 00:24:46,749
We can see the definition of the route too, using the route document.

00:24:46,749 --> 00:24:53,749
 This command is very useful for learning too. 

00:24:54,210 --> 00:24:59,989
If you are go a URL inyour Drupal installation and want to do something like what you see on screen,

00:24:59,989 --> 00:25:05,850
The easiest way to find that code is generating to a multistep form or, I don't know, a View, what you want to do 

00:25:05,850 --> 00:25:12,850
 would be go to the URL, search the URL you are watching and see what class is solving that code. 

00:25:13,929 --> 00:25:19,940
We will generate a new driver.

00:25:19,940 --> 00:25:22,909
 And in this driver we will reuse the service we have created.

00:25:22,909 --> 00:25:28,220
 A new method has been added to the service which took an ID and shows the title of the module.

00:25:28,220 --> 00:25:33,779
 We added a location, we define the route. 

00:25:33,779 --> 00:25:37,159
In the route we can define placeholders that will be the arguments that we will add from the URL. 

00:25:37,159 --> 00:25:41,600
In this case it is called N ID. It asks if we want to generate a test. 

00:25:41,600 --> 00:25:46,220
Let's say no to make the output less verbose. We consume a service. Exactly, the service that we generated.

00:25:46,220 --> 00:25:51,309
We confirm the generation and we can see the result again. Let's see how the code that is generated is used.

00:25:51,309 --> 00:25:58,309
As David commented, at the time that a service is added to the service container the Console project is responsible for exactly defining the class.

00:25:59,029 --> 00:26:04,109


00:26:04,109 --> 00:26:08,909
 If the class needs to extend or implement another class, we can see the perfectly generated code

00:26:08,909 --> 00:26:13,210
is responsible for the whole Use Statement. 

00:26:13,210 --> 00:26:19,629
It is responsible for extracting the service, the service container, passing it to the constructor and it opens a property for you.

00:26:19,629 --> 00:26:26,629
 As we can see, all you have to do here is call our service.

00:26:28,769 --> 00:26:35,769
Let's see the result of the generation of the command. The default output is that we have to implement a method.

00:26:37,239 --> 00:26:41,700
 A method for the next parameter, which is parameter N ID.

00:26:41,700 --> 00:26:48,700
 The only thing we are going to do is return to our controller class and insert some code.

00:26:49,249 --> 00:26:56,249
 This code is responsible for the decoupling, the logic for extracting the title and  simply using a service we can bring the title of Nod.

00:26:59,139 --> 00:27:06,139
 Let's talk a little bit of a command that is also quite interesting.

00:27:08,070 --> 00:27:15,070
 Generate a configuration form.

00:27:19,609 --> 00:27:26,609
This command lets us, in question form, add all the fields that we need.

00:27:28,960 --> 00:27:35,960
It asks us, just like the driver asks, for the name of the form. 

00:27:37,059 --> 00:27:40,999
It asks us if we want to generate a structure in which we can continue to write each of the fields that our form will have.

00:27:40,999 --> 00:27:47,999
The label, the field type that it is going to be. 

00:27:48,749 --> 00:27:54,909
The description, and allows us to add as many as you want. In this case I think there are three.

00:27:54,909 --> 00:28:00,919
Event, event name, and date. To display a date type field. 

00:28:00,919 --> 00:28:07,919
We can select the types of fields using the arrows and we will add a final one. 

00:28:09,340 --> 00:28:15,519
I do not know if, at the time, we appreciated that every time it asks the name of the module, it has an auto-complete.

00:28:15,519 --> 00:28:19,149
So we can, if we do not remember our module is called, we can do auto-complete when you are describing our module.

00:28:19,149 --> 00:28:24,759
 Also in the field types, for example. 

00:28:24,759 --> 00:28:31,759
We can see that you have generated the route. The path points to a class, which is the form.

00:28:32,659 --> 00:28:39,429
 We will reconstruct data of the routes so that the new route is recorded in our Drupal installation.

00:28:39,429 --> 00:28:45,659
And we can see how we carry the form and it is exactly the fields we should define.

00:28:45,659 --> 00:28:52,659
What this command also did was give us the option to keep anything since showing the form,

00:28:53,820 --> 00:28:59,629
it is in a configuration file IML.

00:28:59,629 --> 00:29:03,330
It is stored. You no longer have to do anything. 

00:29:03,330 --> 00:29:07,820
What you should do is validate it. But we add the method to validate it. Let's make a method where they have to put their validations.

00:29:07,820 --> 00:29:14,820
 Let's see how the code looks a little this.  This code is responsible for saving the configuration management system.

00:29:25,710 --> 00:29:32,710
 Another thing that we use a lot in Drupal 8 is a plug-in block.

00:29:34,320 --> 00:29:41,320
 The treatment is the same, we use the necessary command. 

00:29:45,779 --> 00:29:52,779
We ask the module name, the name of the class. One of the interesting features of the plugs is that now we can add forms will even to our plugs.

00:29:52,940 --> 00:29:58,049


00:29:58,049 --> 00:30:04,970
 Again in structure form, we add the fields with the types of fields and we will see, once

00:30:04,970 --> 00:30:09,059
 the code is generated, we can see that the values ​​we enter in our form,

00:30:09,059 --> 00:30:16,059
or our form will be deployed at the time of assigning the block in a region.

00:30:18,320 --> 00:30:25,320
It is a report of what has happened. We can see the plug-in code. 

00:30:28,090 --> 00:30:33,190
And as we discussed it is responsible for adding the IUs, class, creating the class in the corresponding directory.

00:30:33,190 --> 00:30:39,090
 Adding the appropriate name space. 

00:30:39,090 --> 00:30:44,580
Defining all the methods that need to implement for this to work. Also something I don't think we have discussed is if, now, it returns to the portion of code...

00:30:44,580 --> 00:30:51,580
The city of directories that were created in three commands that we have executed.

00:30:52,580 --> 00:30:59,580
The markup dibs were removed, but for each eliminated each dip there is a new folder.

00:30:59,929 --> 00:31:06,929
And we go back to rebuild the cache. Once you have rebuilt the cache, we can see that, and reload our page.

00:31:08,210 --> 00:31:12,159
 We can see that what we've created.

00:31:12,159 --> 00:31:19,159
 Then we will capture some fields, save our block, and assign it to a region. 

00:31:21,879 --> 00:31:28,879
We did not do it in the first sale, but in the second. 

00:31:32,039 --> 00:31:39,039
And once we have finished, we refresh our home page and we can see the block with what we have introduced.

00:31:45,450 --> 00:31:52,450
Drupalcon and the year. Like he said, we also have generators rest, but let's not talk about this right now.

00:31:55,859 --> 00:32:00,129
Omar will discuss this in this in his chat. 

00:32:00,129 --> 00:32:07,129
Which is at 3:45. One of the commands that generates the most code is the content entity. 

00:32:09,399 --> 00:32:13,559
Let's see how this happens. There are some commands that have less interaction and generate more code.

00:32:13,559 --> 00:32:20,559
The module name, the name of the class of our identity, and ready.

00:32:25,119 --> 00:32:32,119
Hundreds of lines of code and template files, classes, current IMLs. 

00:32:35,309 --> 00:32:40,210
Routes added in the configuration file of the route. 

00:32:40,210 --> 00:32:44,779
Let's see some of the generated classes. For example, let's start browsing the directory. 

00:32:44,779 --> 00:32:51,779
We see a quantity of file directories. The identity class looked something like this.

00:32:53,509 --> 00:32:59,929
We define using annotations that it is a entity type plug-in. The table base definition.

00:32:59,929 --> 00:33:06,929
This class extends to another class. We can see even methods to make a crut. 

00:33:11,049 --> 00:33:16,830
Let's see how this works. This is the route that is generating and, unfortunately, when we generate an identity of content, we have to see if it is a module that is already currently installed.

00:33:16,830 --> 00:33:21,929


00:33:21,929 --> 00:33:27,099
 What we will do is uninstall the module and install it again so that new identity registers.

00:33:27,099 --> 00:33:31,359
It would be interesting to look for a more practical way to do this and add it to the project.

00:33:31,359 --> 00:33:38,359
We have installed the module again and as we refresh in the browser path we can see how a list of the new identity module appears.

00:33:38,529 --> 00:33:44,690


00:33:44,690 --> 00:33:51,690
 There is none, we will capture one. 

00:33:55,820 --> 00:34:00,159
It allows us to add identities, it allows us to see a list of identities that have been added. 

00:34:00,159 --> 00:34:07,159
We can see the list, we can change it, we can do it directly. 

00:34:12,600 --> 00:34:16,840
What we will do now is, this identity, we configure it in a way that we can add fields.

00:34:16,840 --> 00:34:23,490
We're going go to the to manage field section and we will do the part to add a new field.

00:34:23,490 --> 00:34:29,100
Simple text field. And once we add this, we will add a new identity and see the integration it has with views.

00:34:29,100 --> 00:34:32,240
By adding this identity we have added the integration part with views. We can see how to create a new view that displays the data in this new identity.

00:34:32,240 --> 00:34:38,409


00:34:38,409 --> 00:34:45,409
Something very important as you generate this code is that it is not giving any logic.

00:34:48,230 --> 00:34:55,230
It's just that we are generating the base.

00:34:56,190 --> 00:35:01,070
By then we had a person, a person was telling us that code generators were very bad.

00:35:01,070 --> 00:35:05,990
 Sometimes they enter unnecessary code. 

00:35:05,990 --> 00:35:11,630
But in reality we are not generating logic or code that will not use it. 

00:35:11,630 --> 00:35:18,630
It's just like a template. Like a base from which you start to write all your logic. 

00:35:20,050 --> 00:35:24,020
Even in the development of the tool we've had times when the documentation is not exact and we had to update it.

00:35:24,020 --> 00:35:31,020
 It has also been part of the learning process. 

00:35:31,020 --> 00:35:37,970
As we can see again. This tool only generates the base code or scaffolding or the blueprints, or whatever you want to call.

00:35:37,970 --> 00:35:43,560
 So that you, from that generated code can add the module logic that is being generated.

00:35:43,560 --> 00:35:50,360


00:35:50,360 --> 00:35:57,360
Let's save this view, we will not do anything, just show the data we have introduced in our new identity.

00:36:04,210 --> 00:36:11,210
We talked only about commands that generate content, but we have other types of commands.

00:36:12,990 --> 00:36:19,990
 As we commented, when generating new code, the interactions are generating a module. They need features like seeing if the route is already defined, if the service is defined.

00:36:24,040 --> 00:36:31,040


00:36:32,580 --> 00:36:37,310
 If we installed it, we uninstalled it. 

00:36:37,310 --> 00:36:43,490
There are also processes for migrations, commands that allow us to run migrations from the console. 

00:36:43,490 --> 00:36:50,490
All these types of commands have emerged out of necessity of interaction. 

00:36:50,830 --> 00:36:57,050
If you begin to use the console and you think of new command that allows you to move something in views,

00:36:57,050 --> 00:37:04,050
 or move something to wherever in Drupal, you can write us to talk about integration.

00:37:04,290 --> 00:37:11,290
 A very practical mode, when you are developing, is the interactive mode.

00:37:14,790 --> 00:37:21,790
The interactive mode allows you to simply execute nothing but the commands. 

00:37:22,930 --> 00:37:28,200
We have been asked for an integration of Drush, so, in order to use Drush in a very easy way without having to leave the project. 

00:37:28,200 --> 00:37:34,500
We created our own command called Drush that runs Drush.

00:37:34,500 --> 00:37:40,300
 Then you may be generating code and that would be a task that the console can not do, you can run it directly from here.

00:37:40,300 --> 00:37:45,370
 

00:37:45,370 --> 00:37:51,780
There is an issue to generate Drush integration with the console, in fact it is in the project.

00:37:51,780 --> 00:37:57,860
If someone wants to do before heading out to do it, we can run Console, Drush, and then only Console and only Drush.

00:37:57,860 --> 00:38:04,860
Without leaving the scope, in the same work flow line.

00:38:08,490 --> 00:38:15,490
 From there you can run both. 

00:38:16,440 --> 00:38:21,850
At the end we will see the debug config. Let's change it during the upload.

00:38:21,850 --> 00:38:27,170
This video what it is supposed to do is show us the configuration that is in the system and we could see a detail of this configuration.

00:38:27,170 --> 00:38:34,170
 For example, all the registered configurations on our Drupal installation and it shows us the values ​​that are assigned to that configuration.

00:38:34,300 --> 00:38:37,670


00:38:37,670 --> 00:38:44,670
Once you share the link. There are other new commands to which have been added as interaction with modules that allow us to, in a way, enable or disable modules.

00:38:48,810 --> 00:38:54,990


00:38:54,990 --> 00:38:59,920
 What we see now is a module called webfiler, which this project already has as an interaction with the console. 

00:38:59,920 --> 00:39:04,680
This module is a contribution from a person who is in Italy.

00:39:04,680 --> 00:39:10,400
 We will enable the module so that you can see that once we use this module, new commands will appear. 

00:39:10,400 --> 00:39:14,510
We downloaded the module.

00:39:14,510 --> 00:39:21,510
 The module appears in the directory with trip, and the downloaded module. 

00:39:22,000 --> 00:39:29,000
Once we have this, we will run Drupal only to list the commands. 

00:39:33,250 --> 00:39:40,250
We can see the first two groups are network and router. After enabling the profiler module we will check that new commands appear.

00:39:41,200 --> 00:39:47,090
So if you have an integration and add commands in your module, the project will take care of automatically detecting them and put them directly available in your Drupal installation. 

00:39:47,090 --> 00:39:53,090


00:39:53,090 --> 00:39:57,160
What we wil do now is move on to the instance of Drupal.

00:39:57,160 --> 00:40:04,160
Refresh. We have seen that nothing happens.

00:40:05,850 --> 00:40:12,850
Unfortunately we have to first return to rebuild the cache, and two or three refreshes.

00:40:16,740 --> 00:40:21,930
There is an issue that still has that module it does not appear with the first cone. 

00:40:21,930 --> 00:40:28,930
For interest cache we have different cache options.

00:40:31,130 --> 00:40:38,130
In this case we will select O and again we will use a command called list that does not show us anything. 

00:40:40,160 --> 00:40:45,470
What we will do is go back to the Drupal installation, refresh two or three times. 

00:40:45,470 --> 00:40:52,470
Realizing that something has failed. We have been shown an error message. Without refreshing it has been enabled. 

00:40:54,170 --> 00:41:00,680
This module provides a component that displays all the information that passes since you load a page. 

00:41:00,680 --> 00:41:06,970
In the life cycle of PHP, from making a request to making a response.

00:41:06,970 --> 00:41:12,560
 Another thing that allows us is that it lists all judgments for us, just like the URL that were executed as we the listed that page.

00:41:12,560 --> 00:41:18,140
 If we have multiple views, multiple blocks, that's where you will see the judgments were ran.

00:41:18,140 --> 00:41:24,340
 As we look to make a list we look at two new records in the profiler.

00:41:24,340 --> 00:41:31,340
What we do here is to hang a benchmark.

00:41:31,650 --> 00:41:38,650
Let's hit our website for 50 facilities. We can see that there are problems. 

00:41:39,220 --> 00:41:43,120
What will happen is what this benchmark will do is load our site 50 times and once you've done that, we will make a list of profiler list again.

00:41:43,120 --> 00:41:48,230
 Let's see how all these interactions have turned out.

00:41:48,230 --> 00:41:55,230
 Once it is 100% complete, it will show a result with related values to the status of these requests.

00:41:55,910 --> 00:42:02,910
 And once we've done that, we will take the list to see.

00:42:05,630 --> 00:42:12,630
 What if we want to see more? We can change the limit and we can see all the data.

00:42:15,290 --> 00:42:22,050
 Even this command has benchmark list and export. 

00:42:22,050 --> 00:42:25,780
We will not show export at this time but it allows you to export the information that is registered in the profile web.

00:42:25,780 --> 00:42:32,420
 There you can detect with this information, where a bottleneck, where is a judgment that is very slow, or some other fault when loading a page.

00:42:32,420 --> 00:42:39,420


00:42:41,060 --> 00:42:48,060
 As I commented if you want to contribute or create a module or a command to your module.

00:42:58,520 --> 00:43:02,460
 We have created a command called using generate command.

00:43:02,460 --> 00:43:09,460
What does generate a command do? A class of command, which is a PHP class, in which we can begin to add the necessary logic.

00:43:16,540 --> 00:43:22,680
 We have shown some of the commands that we have, but we want you to contribute, and how can you contribute?

00:43:22,680 --> 00:43:29,120
 There are different ways to contribute.

00:43:29,120 --> 00:43:34,510
 One is writing an integration as already discussed. 

00:43:34,510 --> 00:43:41,420
The other is writing documentation of the console. We have a depository in Gitapp. 

00:43:41,420 --> 00:43:45,780
We are opening sections or we are improving sections that we already have from documentation on how to write a command, how to use the console, how to install,

00:43:45,780 --> 00:43:52,780
 and, obviously, contributing to the console.

00:43:53,570 --> 00:43:58,440
 If you begin to test the code and detect that there is an error, that there is a standard that is not being met, missing documentation in a piece of code that we are generating, you can easily contribute from Gitapp or from Drupal.org.

00:43:58,440 --> 00:44:04,410


00:44:04,410 --> 00:44:11,230


00:44:11,230 --> 00:44:17,060
 They can help with the code, they can help with documentation and can help with translations.

00:44:17,060 --> 00:44:24,060


00:44:26,540 --> 00:44:33,250
A feature that was developed in this period of what got the session started until it became Drupal with that of Bogota, was to translate all messages and each of the helps for each command.

00:44:33,250 --> 00:44:38,470
 As you can detect, we have a link where you do not need an ID to contribute.

00:44:38,470 --> 00:44:43,450
 No need to know how to write code, they are are text files which need to be translated.

00:44:43,450 --> 00:44:47,870


00:44:47,870 --> 00:44:54,870
Another way to help is talking about the console, using Twitter perhaps, making a mention of Drupal Console.

00:44:56,090 --> 00:45:02,640
 And speaking when the project, sending, if you liked the project, did not like the project, what you would change.

00:45:02,640 --> 00:45:09,640
How to contribute, we have some requirements. 

00:45:09,700 --> 00:45:16,700
They need Git, Composer, Box and Drupal 8. Let's do this quickly. 

00:45:17,150 --> 00:45:24,150
The way to contribute is on a fork, cloning it, and, within Composer, have a development installation on your machine.

00:45:24,840 --> 00:45:28,670
Speaking of contributions, we will demonstrate that the most important part of this project is the people who have contributed.

00:45:28,670 --> 00:45:35,670
 You can see these that have been built. 

00:45:36,550 --> 00:45:43,550
They will recognize some of those who we have here on this page and we invite you to contribute. 

00:45:46,010 --> 00:45:53,010
We will be in the field of Sprints. If you want to contribute and do not know how, just look us up and ask us how.

00:45:53,980 --> 00:45:59,510
And we will be exchanging commits through decals.

00:45:59,510 --> 00:46:05,700
As much for Drupal which is like the console. And, which is what continues with that of the console.

00:46:05,700 --> 00:46:10,610
We are trying to keep the Roadmap, as David commented, in sync with beta releases, RC in it's own time and some others.

00:46:10,610 --> 00:46:17,610
 Another task is to improve the translations, update the documentation, detecting errors, fix them, merge the pull requests from people who are contributing, and making a broader, more verbose output code similar to what you can see on module samples, 428 00: 46: 17.740 -> 00: 46: 22,900

00:46:22,900 --> 00:46:29,900


00:46:32,700 --> 00:46:36,650
 

00:46:36,650 --> 00:46:41,140
with links to the APPIS or to information in the documentation to find out what is generating the code.

00:46:41,140 --> 00:46:46,930
And finally, I do not know if we have time for questions. And

00:46:46,930 --> 00:46:53,930
or I wanted to add one thing in previous slide, almost 50%, 60%, 70% are Spanish-speaking Latinos and the console is not in Spanish. 

00:46:58,960 --> 00:47:04,960
There are only a few translations. So we could start there in those sprints.

00:47:04,960 --> 00:47:11,870
 And a few more, feel free to interrupt us, jumping ahead during Drupal.com. 

00:47:11,870 --> 00:47:16,330
If they see us walking down the aisle and have any questions, feel free, and you can also find us on Twitter and I'm sharing the link which will update the presentation right at this moment to show the two videos that are missing.

00:47:16,330 --> 00:47:23,330


00:47:24,810 --> 00:47:31,810
 Questions?  - Hi thanks.

00:47:40,040 --> 00:47:47,040
I have two questions. Why didn't it make sense to migrate to business from Drupal 7 to modules for Drupal 7 to Drupal 8 modules?.

00:47:50,630 --> 00:47:56,170
 And the second question is why they were not integrated with Drush?

00:47:56,170 --> 00:48:03,170
 The obvious question. The first is because there was a project that used similar practices.

00:48:04,680 --> 00:48:11,680
Pass the logic module from Drupal 7 to Drupal 8.

00:48:12,240 --> 00:48:19,240
 One, there is a module that they are already making, another is that there is not a similarity per say.

00:48:19,970 --> 00:48:25,960
 The concepts remain the same.  In a block, it is a ship. 

00:48:25,960 --> 00:48:32,960
But at a code level, there is no similarity. So I have not fully reviewed the code that is in the module player, but there are many things that will stay as incomplete, or you will seek to pass them through hooks already in Drupal 8

00:48:34,270 --> 00:48:39,550


00:48:39,550 --> 00:48:46,550
The best way to carry your module is to write well in Drupal 8 and that will help them for future releases.

00:48:50,800 --> 00:48:57,800
 

00:48:58,140 --> 00:49:03,310
And why not Drush, because basically the basis of our project is as mentioned using third-party components not invent our tools, but making an application and as we discussed a pattern of objects.

00:49:03,310 --> 00:49:10,310


00:49:10,780 --> 00:49:17,190
We are using twig, the generated code that you see in all those PHP files were done by twig.

00:49:17,190 --> 00:49:23,240
 So if they are front end, they might even help us write twig and review it and help us.

00:49:23,240 --> 00:49:30,240
- My question is I saw a few commands that are used for example CLEARCAST and, for example, Instarm and SideModel.

00:49:38,000 --> 00:49:45,000
So those are their own implementations on your console, or are you using Drush at some point? 

00:49:48,000 --> 00:49:55,000
It has no dependence Drush.

00:49:55,270 --> 00:50:02,270
 - The other question is when you are generating contended in x format, it brings a form and certain fields and a block.

00:50:05,560 --> 00:50:12,560
That generation is possible to make it through the user interface, the administrator, as is.

00:50:15,580 --> 00:50:22,580
 What would be the advantage of doing it from your console if there is already something visual?

00:50:25,500 --> 00:50:32,500
The speed. 

00:50:34,980 --> 00:50:40,200
Fields we are adding on a form are not fields of a node, but are the fields of a form where you go to save the form to your module.

00:50:40,200 --> 00:50:47,200
You generate a form where your module will ask for the user name of Twitter, then you need a field where the user set the user name of Twitter.

00:50:47,500 --> 00:50:51,700


00:50:51,700 --> 00:50:56,580
Forms that we saw are forms of configurations, not forms to discharge content.

00:50:56,580 --> 00:51:00,270
 I think another reason is that it is much faster to do it from the interface, than to write directly in code, than logging in to your installation position.

00:51:00,270 --> 00:51:07,270


00:51:07,330 --> 00:51:14,330
 - Thank You.  Any other question. 

00:51:32,740 --> 00:51:37,070
- Viewing the commands that you use, do you often use this approach as a sort of tutorial. 

00:51:37,070 --> 00:51:44,070
Ask and they will respond. 

00:51:45,500 --> 00:51:49,180
there is a way to skip that, that is, if I have all the answers and do a lengthy script that I want to duplicate by tomorrow, just run it and continue writing.

00:51:49,180 --> 00:51:56,180
 Sure, there are. Run commands in two ways. 

00:51:56,470 --> 00:52:02,660
Interactive mode is the most educational as just mentioned, it asks you. 

00:52:02,660 --> 00:52:06,650
And there is also the inline option. If you already know all the answers for what it asks and the name.

00:52:06,650 --> 00:52:13,100
it can make you a help to the command and put it, for example, generate controller, minus minus name, minus minus class, minus minus whatever.

00:52:13,100 --> 00:52:18,870
 You can do it all online, with that you generate everything.

00:52:18,870 --> 00:52:24,070
And another thing we thought about. 

00:52:24,070 --> 00:52:31,070
There's even a niche in the project, as we have a local configuration file in our home directory.

00:52:31,390 --> 00:52:36,300
So adding some sort of structure in a file where we can reset some default values.

00:52:36,300 --> 00:52:43,070
 And for example, if a parameter had some inline, you do not remember it's name, you simply put enter.

00:52:43,070 --> 00:52:50,070
You lack the parameter, it asks you. 

00:52:50,210 --> 00:52:57,210
It asks for what was missing and it generates it for you. If there is basically this parameter, you skip it, then there is no question for that value.

00:52:57,960 --> 00:53:04,960
 As you mentioned it is more educational to show it this way.

00:53:06,900 --> 00:53:13,900
 Any other questions? Last one. Two, we have time still, 

00:53:22,260 --> 00:53:29,260
- When you generate a controller the system asks you if you attach file, right. 

00:53:33,470 --> 00:53:40,470
The system asks you if you want to create attach file, right? We would say no. 

00:53:46,280 --> 00:53:53,280
- But it's possible to create a dual Integration with another tool. At this point we can generate a Unitest file, generating Either Jihav.

00:53:54,350 --> 00:54:01,350
 So far Drupal is using Unit in Jihav so we are happy to add that.

00:54:09,780 --> 00:54:16,780
That feature seems usable. Happy to do that. Actually, until it requests a patch. 

00:54:22,210 --> 00:54:29,210
- But often Drupal module does not do integration. It's possible. Thank you. We have time.

00:54:30,080 --> 00:54:37,080

YouTube URL: https://www.youtube.com/watch?v=PZZ3M9D7oeQ


