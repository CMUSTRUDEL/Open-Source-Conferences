Title: DrupalCon Latin America 2015: Best practices for Continuous Deployment with Drupal.
Publication date: 2015-02-10
Playlist: DrupalCon Latin America - Feb 2015
Description: 
	Speakers: revagomes
Drupal has many things that make our day-to-day much easier and allows us to focus our efforts in innovation and in what is valuable to the customer. Nevertheless before these features are on line to the public we need to do something that still scares many Drupalers. The Deployment process.

As we know many of the settings are stored in the database, the replication process of these settings to other environments becomes an adventure for many people that doesnâ€™t have a well structured deployment work flow.

This session aims to present good practices and some of the most used modules and techniques for the implementation of the continuous deployment with Drupal.

Here is the topics that will be addressed in this session:

- Continuous Deployment
- Continuous Integration-
- Git,
- Code Driven Development
- Deployment related modules
- Community initiatives to solve the common problems related to Deploy.
Captions: 
	00:00:00,160 --> 00:00:05,749
...work constantly with your team members, your peers, so it means that all the work

00:00:05,749 --> 00:00:15,969
you're doing is constantly integrated in a central place in order to get the result of

00:00:16,150 --> 00:00:23,150
the work of everyone if it's still working when you get all together or you get all the

00:00:24,170 --> 00:00:30,789
work merged into a single place. We have continuous delivery.

00:00:30,789 --> 00:00:40,909
That is a step further. It's something to provide your work constantly for review by the team

00:00:41,100 --> 00:00:47,250
or the client. So it means that you have a central place

00:00:47,250 --> 00:00:52,180
that you are doing continuous integration. I mean, you are putting your code with your

00:00:52,180 --> 00:00:59,180
peers in a centralized place, and it's available for the other peers, the colleagues, to review

00:01:00,019 --> 00:01:05,470
your code or review the features, the functionality you are implementing, and also the client

00:01:05,470 --> 00:01:14,830
can be able to see and check if this is going to deliver the value that he's expecting.

00:01:15,190 --> 00:01:23,570
Then, we go to continuous deployment. The difference between continuous delivery

00:01:23,810 --> 00:01:30,810
and continuous deployment is like a conceptual difference because it's like deploy your work

00:01:30,860 --> 00:01:39,520
constantly right into the client's server. I mean, when you are doing continuous delivery,

00:01:39,660 --> 00:01:46,660
it's not mandatory that you put your code in production, so continuous deployment means

00:01:47,000 --> 00:01:51,320
that when you finish something, it goes right to production.

00:01:51,320 --> 00:01:59,700
So you have to make a process that prevents the most possible errors in order to minimize

00:01:59,850 --> 00:02:06,630
the chance of getting something wrong in production, because you are putting right to production.

00:02:06,630 --> 00:02:14,830
Let's see how we can do this. The main concept of continuous deployment

00:02:14,920 --> 00:02:26,400
in my vision is that [inaudible] culture and [inaudible] you have to have a process, and

00:02:26,600 --> 00:02:32,140
everyone has to agree with the process and has to be disciplined to follow the rules

00:02:32,140 --> 00:02:41,820
that are agreed in order to make this happen. If you are not engaged with the process, 

00:02:42,070 --> 00:02:52,170
if you're not really believing that you have to do this step-by-step in order to have a

00:02:52,370 --> 00:02:59,370
really nice feature or delivery, really value things to your client, you can't do continuous

00:03:00,050 --> 00:03:05,710
deployment. In my vision, it's like a culture and not

00:03:05,710 --> 00:03:10,810
just a process or some tools and things like that.

00:03:10,810 --> 00:03:19,490
A pretty good starting point is the continuous deployment in five steps.

00:03:19,760 --> 00:03:29,880
It was an article written by Eric Ries. He is the guy who wrote the book "The Lean Startup,"

00:03:30,150 --> 00:03:41,690
so he posted it days before the presentation. He taught in the Web 2.0, so he talks a little

00:03:41,959 --> 00:03:48,150
bit more deeply into the five steps of continuous deployment, so we're going to see these five

00:03:48,150 --> 00:03:57,310
steps, but if you want to see or want to know more about this, you can follow this link.

00:03:57,730 --> 00:04:06,230
The first step is the continuous integration server, and it's the backbone of the process

00:04:06,490 --> 00:04:14,950
because it's the central place that you're going to do the continuous integration.

00:04:15,190 --> 00:04:26,970
It's a place that you have control in order to run scripts and run mechanisms to prevent

00:04:27,230 --> 00:04:33,020
something like you have to check if everything is okay, so you're going to run the automated

00:04:33,020 --> 00:04:39,410
tests. The continuous integration server is the tool

00:04:39,410 --> 00:04:46,410
that enables you to do this, so we have all of the plugins and services or software that

00:04:47,300 --> 00:04:53,020
you can use in order to have a central place that you can control all the workflow in order

00:04:53,020 --> 00:04:58,930
to deliver this to the client. The second step is the source control commit

00:04:58,930 --> 00:05:05,380
check. You have to make sure that everything that

00:05:05,380 --> 00:05:12,240
you're delivering to your client, in this way I mean code, the code that you commit

00:05:12,240 --> 00:05:21,340
in the repository, you have to check this and see if it's okay. It doesn't have any

00:05:21,550 --> 00:05:32,910
error or any problem with implementation or any problem that should be [inaudible] into

00:05:33,340 --> 00:05:40,340
the production. The next step is simple deployment scripts.

00:05:40,990 --> 00:05:49,910
What is this? It's not really automated scripts. It should be,

00:05:50,139 --> 00:05:54,620
but it's not mandatory that you have to start with this.

00:05:54,620 --> 00:05:59,699
You can start [inaudible] a script, like move script.

00:05:59,699 --> 00:06:09,859
The main thing is that you have to have steps that you are going and doing the same thing

00:06:10,110 --> 00:06:15,199
every time you deliver the code in order to prevent errors.

00:06:15,199 --> 00:06:25,259
If you have to run the tests before it, one step, so you have to run your explanatory

00:06:25,340 --> 00:06:34,440
test, or you have to pass static analysis for the code, so you have to make this script.

00:06:34,650 --> 00:06:44,090
You can automate this also, but you have to have this step-by-step in order to make sure

00:06:44,290 --> 00:06:51,290
that everything is going to be okay. The fourth step is real-time alerting.

00:06:51,570 --> 00:06:58,570
It means that you have to make tools that provide you information about the process

00:06:58,919 --> 00:07:03,440
in real time. So if a test fails, you have to be aware of

00:07:03,440 --> 00:07:08,190
this. You have to have time to take an action in

00:07:08,190 --> 00:07:15,190
order to prevent putting bugs in the product, in your website.

00:07:15,479 --> 00:07:23,599
The real-time alerting is a mechanism that makes you aware of the problems and gives

00:07:23,970 --> 00:07:29,710
you time in order to take some reaction about that.

00:07:29,710 --> 00:07:36,270
The fifth step is the root cause analysis, or the five whys.

00:07:36,270 --> 00:07:45,730
What it means: It's like a technique that the guys from Toyota in Japan, they use this

00:07:45,930 --> 00:07:54,930
technique in order to just not to resolve the problem, like a punctual problem, but

00:07:55,199 --> 00:08:02,199
you ask five times in order to try to find the root cause of this problem.

00:08:02,420 --> 00:08:18,620
Maybe it could be like my team members don't have the real... They are not understanding

00:08:18,910 --> 00:08:24,789
what the client wants. It's not just like a problem in the code.

00:08:24,789 --> 00:08:31,789
It's like an interpretation problem. The root cause normally is the bug in the

00:08:32,929 --> 00:08:39,589
code, but it's the context that involves this bug.

00:08:39,589 --> 00:08:50,989
Where to start? The main thing is to have a standardized workflow

00:08:51,269 --> 00:08:57,980
because it's the only way that you have to make sure that things are going to be okay.

00:08:57,980 --> 00:09:04,829
You have to make agreements with your team. You have to have work agreements.

00:09:04,829 --> 00:09:08,610
What are work agreements? Who knows this term?

00:09:08,610 --> 00:09:15,519
Please raise your hands. Okay, so work agreements are a set of rules

00:09:15,519 --> 00:09:26,959
that all the team agrees and follows. You cannot start developing a project...

00:09:27,519 --> 00:09:35,739
-[Spanish] -I couldn't find anything, or I was too tired

00:09:35,999 --> 00:09:41,149
and had to go to bed. What was I going to do?

00:09:41,149 --> 00:09:44,429
I had this problem and I couldn't figure out what was going on.

00:09:44,429 --> 00:09:50,559
I was stuck in the valley of dearth. When you're a beginner and you're working

00:09:50,559 --> 00:09:57,559
and contributing to Drupal Core, you're in beginner's hell.

00:09:57,939 --> 00:10:04,939
-It's like you can't guarantee the quality of the project or the success of the project

00:10:04,989 --> 00:10:10,600
if you have a team that doesn't agreement with some basic rules.

00:10:10,600 --> 00:10:22,460
You can imagine a developer that has his way of developing, and he doesn't... 

00:10:29,120 --> 00:10:31,120
I can say dirty words, so

00:10:31,379 --> 00:10:38,379
I'm trying to think of something that is more soft. Let me check. Okay.

00:10:38,790 --> 00:10:45,129
He can be things that are not good for the project, so he is trying to do SSH to the

00:10:45,129 --> 00:10:50,489
production server or doing something that's not right, so you have to make agreements

00:10:50,489 --> 00:11:00,429
in order to prevent these things because the only way to guarantee the quality is to implement

00:11:00,610 --> 00:11:09,190
a workflow or process that prevents errors because errors will happen, but you have to

00:11:09,489 --> 00:11:16,079
prevent more and more errors through the process, through the workflow.

00:11:16,079 --> 00:11:23,079
An example of a work agreement could be coding standards.

00:11:23,290 --> 00:11:30,290
In the Drupal community, we have coding standards. You can go to the link in this slide, and

00:11:30,410 --> 00:11:37,410
you are going to see all the standards that the Drupal community agrees in order to develop

00:11:38,179 --> 00:11:45,179
the project in a way that everyone can understand the code and can contribute in the same way.

00:11:46,029 --> 00:11:53,029
It's a really nice work agreement. Another example is everything in code, for

00:11:53,059 --> 00:11:58,410
example. We have a problem. Almost all of you know

00:11:58,410 --> 00:12:05,220
that Drupal stores almost everything in a database, and this is a huge problem when

00:12:05,220 --> 00:12:12,220
you're developing for enterprise clients, because you're going to have to have environments

00:12:12,860 --> 00:12:21,980
and all of these processes that will try to guarantee quality.

00:12:22,160 --> 00:12:28,119
Everything in code would be a really nice work agreement in order to prevent dumping

00:12:28,119 --> 00:12:37,439
the database from production to your environments every time or doing these crazy things.

00:12:38,459 --> 00:12:43,209
Another good work agreement would be test driven development, for example.

00:12:43,209 --> 00:12:50,209
We actually do this in the Drupal community, writing code for the Drupal code, so you use

00:12:50,399 --> 00:12:55,709
this in your projects also, writing tests for your features, and it would be a really

00:12:55,709 --> 00:13:02,709
nice way to prevent errors and guarantee quality for the project.

00:13:05,509 --> 00:13:12,509
I will start with the CI and/or CD server. You can make a choice.

00:13:13,629 --> 00:13:20,629
I'm not here to say what tool you have to use.

00:13:20,649 --> 00:13:27,649
This one is one of the tools that I know. Actually, at Taller, we use Strider CD. It's

00:13:27,679 --> 00:13:34,679
a continuous deployment server written in Java script in load JS and we liked it

00:13:35,180 --> 00:13:44,020
because we were able to develop Java script also, so it's easy to us to evolve the environment

00:13:44,410 --> 00:13:51,410
and add plugins and etc., but you can choose. It's your choice.

00:13:52,689 --> 00:13:59,689
There are ones that are open source. There are services that are proprietary, but the

00:14:00,499 --> 00:14:09,839
choice is yours. The point is the difference in between the

00:14:10,049 --> 00:14:16,920
continuous integration servers and continuous deployment servers is that deployment is on

00:14:16,920 --> 00:14:21,579
green. It's a way of developing or delivering things,

00:14:21,579 --> 00:14:29,819
so in the continuous deployment mindset, you have to have tests, automated tests and also

00:14:30,109 --> 00:14:36,119
exploratory tests and etc., but you have to make sure that everything is passing so it's

00:14:36,119 --> 00:14:42,019
green. That's why the phrase is "deploy on green."

00:14:42,019 --> 00:14:51,659
When all the tests pass, it's the green one because the word that is normally success

00:14:51,869 --> 00:15:01,389
in green, so the deploy on green concept is that you should not deliver anything if the

00:15:01,670 --> 00:15:06,179
test fails. You also have to make the term that we call

00:15:06,179 --> 00:15:10,089
"stop the line." If a test fails, you have to stop the line

00:15:10,089 --> 00:15:17,089
or the production line in the Toyota way of production in the lean process in order to

00:15:17,279 --> 00:15:24,279
fix that problem, find the root cause of this problem and start developing because if you

00:15:24,759 --> 00:15:31,759
don't do this, this problem can continue, and it will be worse when it happens again.

00:15:36,129 --> 00:15:43,129
I will talk to you a little bit about our development workflow.

00:15:44,429 --> 00:15:50,689
We have been evolving this. This is not the final state of the development

00:15:50,689 --> 00:15:59,949
workflow or the best way of developing things, but that's the way we are doing it right now,

00:16:00,299 --> 00:16:06,589
and it's working for us, so I would like to share with you.

00:16:06,589 --> 00:16:13,589
We have this graphic representing the pipeline. It's the process of developing and delivering

00:16:13,949 --> 00:16:18,279
for the client. We start developing in the development machine

00:16:18,279 --> 00:16:25,279
with tests in the test or QA environment. We send it to the client in the user acceptance

00:16:25,579 --> 00:16:32,579
test environment, or the staging environment, and if everything's okay, it goes to production.

00:16:34,179 --> 00:16:42,239
The development environment. It's not mandatory that it resembles the production

00:16:42,449 --> 00:16:52,709
environment because, in some cases, you have to have a huge topology, merging a lot of services

00:16:53,059 --> 00:16:59,079
and tools. The development process would be really slow

00:16:59,079 --> 00:17:06,079
if you had to have all these things in the developer environment, but it would be nice,

00:17:07,579 --> 00:17:14,150
but it's not mandatory. The test or QA environment should not resemble

00:17:14,150 --> 00:17:22,210
the production also, but would be nice. The UAT and staging environment, or if you

00:17:22,420 --> 00:17:29,410
prefer the pre-prod environment. This one must resemble the production environment because

00:17:29,410 --> 00:17:36,410
it's the last time you can see something going wrong.

00:17:37,380 --> 00:17:52,300
It's like a copy of the production environment so you can run performance tests or user tests in order to

00:17:52,690 --> 00:17:58,770
make sure that the feature that you're developing is the right thing or fits the expectations

00:17:58,770 --> 00:18:02,830
of the client. This is the last time to see if everything's

00:18:02,830 --> 00:18:09,820
okay, so it must resemble the production environment. Of course, the production environment is the

00:18:09,820 --> 00:18:15,400
production environment. So recap, if you want to see or want to know

00:18:15,400 --> 00:18:22,400
a little bit more about the workflow or the setup or the requirements of this environment,

00:18:23,560 --> 00:18:26,650
you can follow these links right at the bottom of the slide.

00:18:26,650 --> 00:18:33,320
This is a really nice post about the development workflow.

00:18:33,320 --> 00:18:42,040
There are some environments that he advises or he uses, but it's not mandatory also.

00:18:42,290 --> 00:18:47,560
Actually, you are not using all of the things that the guy wrote in that post, but it's

00:18:47,560 --> 00:18:54,560
a starting point, so I really recommend you read this article.

00:18:55,070 --> 00:19:00,220
What about Drupal? We are at a DrupalCon, so we have to put Drupal

00:19:00,220 --> 00:19:07,220
in this process. In order to have this development workflow,

00:19:07,930 --> 00:19:19,290
we have to have our work agreements. At Taller, we are trying to have a standardized development

00:19:19,520 --> 00:19:28,120
environment, or a developer virtual machine, and in the Drupal ecosystem there are a lot

00:19:28,380 --> 00:19:35,380
of projects that are trying to develop really nice virtual machines for Drupal development,

00:19:35,410 --> 00:19:42,410
so there is a Drupal work project called Virtual Machine/VM.

00:19:43,250 --> 00:19:49,620
There is another one that Zivtech built. There is a virtual machine from [inaudible]

00:19:49,620 --> 00:20:01,220
that is the Drupal community called Geerlingguy. Also, tomorrow at sprints we are going to

00:20:01,440 --> 00:20:10,120
continue developing Drupal Charm. It's an environment in the Ubuntu Juju ecosystem.

00:20:10,170 --> 00:20:17,130
If you saw the presentation of Sebastian earlier, he talked a little bit about this.

00:20:17,130 --> 00:20:24,130
If you don't do this or you want to know a little bit more about this, you can reach

00:20:24,700 --> 00:20:29,870
us at the sprint sessions. We are going to develop or finish developing

00:20:29,870 --> 00:20:40,190
Drupal Charm, so I'll invite you to drop by and play with us.

00:20:40,530 --> 00:20:46,850
Another thing is Drush. You should use Drush because it will make

00:20:46,850 --> 00:20:53,240
your process faster. You don't have to click and point everything.

00:20:53,240 --> 00:21:04,960
You can use just one common line in the terminal, so it makes the process really fast, and you

00:21:05,140 --> 00:21:12,140
can make automated things with this. You can create scripts that use Drush to run

00:21:12,440 --> 00:21:20,460
something into Drupal or with Drupal. Another thing is install profiles or custom

00:21:20,700 --> 00:21:24,930
distributions. Who knows what this means?

00:21:24,930 --> 00:21:31,930
You can please raise your hands. Okay, so I will explain it for the others.

00:21:35,280 --> 00:21:42,140
I don't know if you know Drupal Commerce or Drupal Commons or Open Atrium.

00:21:42,140 --> 00:21:52,160
All of this software is Drupal distribution, so it's like a set of tools packaged in a

00:21:52,360 --> 00:22:04,400
single pack with Drupal inside for doing something specific for an industry, for example e-commerce

00:22:04,750 --> 00:22:14,850
or social networks. So you can use this concept to start your

00:22:15,130 --> 00:22:19,630
projects. You don't have to download every single time

00:22:19,630 --> 00:22:26,630
you have to download Drupal and have to download Views and have to download entity API and everything.

00:22:27,240 --> 00:22:39,640
Custom distributions enable you to make files, so you can use the Drush make command to export

00:22:39,960 --> 00:22:46,370
the actual state of your project if you are already doing something, and it will be like

00:22:46,370 --> 00:22:55,470
an archive with all the modules and versions and where they have to be and the directory

00:22:55,690 --> 00:23:01,740
and everything. If you have to apply a patch, you can put

00:23:01,740 --> 00:23:08,740
this on the Drush make file, so this is a way to automate these things.

00:23:09,050 --> 00:23:15,620
You don't have to do every single time you are developing with Drupal, download and install

00:23:15,620 --> 00:23:21,340
all the modules you are going to have to complete this project.

00:23:21,340 --> 00:23:28,340
Another module that I think everyone should know is Strongarm Module.

00:23:29,410 --> 00:23:37,870
This module is used to export variables, so the information about the slogan or the site

00:23:38,100 --> 00:23:46,320
name or this kind of stuff. There are variables inside the database, so

00:23:46,700 --> 00:23:53,700
the Strongarm Module is the module that offers you a way to export these things.

00:23:57,680 --> 00:24:03,750
Another one is Features. I think everyone has heard about Features.

00:24:03,750 --> 00:24:09,590
The Features Module is a module that packs everything.

00:24:09,590 --> 00:24:18,390
If you have, for example, a list of posts in a blog at the side bar, you can export

00:24:18,590 --> 00:24:26,650
these configurations in a single module that we call Features, and this will be packed

00:24:26,820 --> 00:24:36,100
and you can use this in other projects also. It's a way to export your configuration and

00:24:36,310 --> 00:24:43,310
business rules into other environments or share this with your colleagues and someone.

00:24:45,530 --> 00:24:55,230
It's the main module used in enterprise development, Drupal development, right now.

00:24:55,590 --> 00:25:05,290
We also have the Default Config Module. The Default Config Module is a module that

00:25:05,510 --> 00:25:11,730
enables us to export permissions because exporting permissions with Features is like hell. It's

00:25:11,730 --> 00:25:15,660
like hell, because permission is something that changes.

00:25:15,660 --> 00:25:22,660
When you start the project, you can have some permissions that fit with these users, but

00:25:23,040 --> 00:25:29,400
as the project evolves, it can change. Features will make sure that everything stays

00:25:29,400 --> 00:25:34,690
at that state. If you export the permissions with Features,

00:25:34,690 --> 00:25:41,690
you can have problems, so there's the Default Config Module that exports and enables you

00:25:42,350 --> 00:25:48,640
to change the permission. It will just revert this configuration or

00:25:48,640 --> 00:25:58,640
these changes if you actually go to the interface or run the Drush command and ask for the revert.

00:25:59,070 --> 00:26:06,070
It helps us in order to export permissions. Also, you have Custom Deployment Modules.

00:26:07,190 --> 00:26:12,890
What is this? It's a custom module that you use the hook

00:26:12,890 --> 00:26:21,810
update. The link at the bottom of the slide has a

00:26:22,030 --> 00:26:31,350
really good article talking about this. The main concept is that everything you are

00:26:31,580 --> 00:26:38,580
developing, you should use an update function in order to make sure that the configuration

00:26:38,760 --> 00:26:47,100
or the feature that you're developing could be replicated in another build, a new build.

00:26:47,310 --> 00:26:59,470
I mean, if you have a Drupal site here and you're going to have another server, you can,

00:26:59,860 --> 00:27:07,680
but you shouldn't export the database, for example, in order to run builds in the continuous integration

00:27:07,900 --> 00:27:16,320
workflow. The Custom Deployment Module uses the hook

00:27:16,570 --> 00:27:27,510
update functions in order to make the migrations. Also, you can use the Configuration Management

00:27:27,770 --> 00:27:35,910
Module. That was developed for the configuration management for Drupal 8, but it already has

00:27:36,130 --> 00:27:44,050
a Drupal 7 version. It's good because when you're using Features,

00:27:44,320 --> 00:27:50,990
you have to export everything in a single pack, and sometimes it's not the best way

00:27:50,990 --> 00:27:55,820
to export these things. The Configuration Management Module comes

00:27:55,820 --> 00:28:09,040
to give you the possibility of exporting single pieces of configurations, and it will be like...

00:28:11,180 --> 00:28:18,180
I don't know how to say this in English and even in Spanish.

00:28:20,180 --> 00:28:29,240
I'll try to explain. If you have to export, let's see, a view and

00:28:29,490 --> 00:28:34,360
a content type and that stuff, you can use Features.

00:28:34,360 --> 00:28:41,080
So if you have a site that has a news page that lists all the news of the site, you can

00:28:41,080 --> 00:28:47,840
export this in and the blogs and everything in Features, but if you just want a single

00:28:47,840 --> 00:28:55,980
piece of that configuration because the other site has its listing and everything, but is

00:28:56,200 --> 00:29:04,920
just a little bit different, Features will not work as it was designed because it's like

00:29:05,240 --> 00:29:12,240
a feature. It's that state, so we should use Features

00:29:12,790 --> 00:29:16,820
override modules in order to override that feature.

00:29:16,820 --> 00:29:23,400
It's a good way to do this, but Configuration Management Module may help you in these cases,

00:29:23,400 --> 00:29:27,920
for example. Also if you have some better examples, you

00:29:27,920 --> 00:29:34,920
can tell me. We have also the UUID Module, so it's used

00:29:34,950 --> 00:29:41,330
for exporting content. Actually, right now we are talking about content

00:29:41,330 --> 00:29:47,530
staging. Before, we were talking about exporting code,

00:29:47,530 --> 00:29:53,760
not content. Features is used to export content.

00:29:53,760 --> 00:30:00,760
It's not designed to do this, and that's why something can be wrong when you export content

00:30:01,690 --> 00:30:07,090
with Features. When you are doing this, you can use UUID

00:30:07,090 --> 00:30:13,270
Module in order to make sure that the content you exported here will be the same because

00:30:13,270 --> 00:30:21,930
when you export something in your development environment, it doesn't have 100 nodes because

00:30:22,180 --> 00:30:26,770
you don't have to have this. But in the production environment, you have

00:30:26,770 --> 00:30:33,770
all the content, so the node fan in your environment, in your development machine, is not the same

00:30:34,150 --> 00:30:41,040
or should be not the same as the content in the production environment.

00:30:41,040 --> 00:30:50,200
The UUID module creates another ID that is unique so you can make sure that this content

00:30:50,480 --> 00:30:57,480
is the same as the content in the other environment because of the universal unique ID.

00:30:59,080 --> 00:31:04,309
We have also the Deploy Module in order to do content staging.

00:31:04,309 --> 00:31:11,309
The problem that this module tries to solve is the dependence of content.

00:31:12,150 --> 00:31:19,910
If you export a node that has a taxonomy term related to it, the Deploy Module tries to

00:31:20,100 --> 00:31:27,100
back every dependence and deploy this to the other environment.

00:31:28,340 --> 00:31:34,420
You can imagine that. I think the node is the important thing, but

00:31:34,420 --> 00:31:43,760
there are other things like entity relations and taxonomy terms and also maybe other things

00:31:43,950 --> 00:31:51,730
that I can't imagine right now, so the Deploy Module tries to solve this packing the dependencies

00:31:52,059 --> 00:31:59,059
of the content you're exporting and delivering everything to the next step or the next environment.

00:32:01,429 --> 00:32:05,980
-[inaudible] -It can be used together, yeah.

00:32:05,980 --> 00:32:12,270
It's not for the same thing, you know? One is for exporting code. This one is for

00:32:14,560 --> 00:32:21,560
exporting content, so it can be used in conjunction. We have the WF Tools Module.

00:32:21,740 --> 00:32:28,740
It's a set of modules. In my vision, it's the way that community

00:32:29,570 --> 00:32:33,890
is going to be in the future for exporting content in Drupal.

00:32:34,020 --> 00:32:44,220
It was developed by Pfizer. A guy also gave a session about this in another

00:32:44,500 --> 00:32:51,500
DrupalCon. Actually, it focuses on exporting content,

00:32:51,880 --> 00:33:05,660
but it's a set of tools, so it has a lot of tools that help you to export content that

00:33:05,960 --> 00:33:12,780
Deploy Module can't deploy or it's not mature to do this.

00:33:12,780 --> 00:33:17,800
This one is more mature in order to do content staging.

00:33:17,800 --> 00:33:24,800
I think it's a good choice if you're having this kind of problem for exporting content

00:33:25,429 --> 00:33:32,429
through an environment. Actually, right now at Taller, we don't have this problem,

00:33:32,870 --> 00:33:43,290
so the WF tool is not our expertise. We are trying to study this and trying to

00:33:43,610 --> 00:33:49,220
make situations that it should be the right thing to do.

00:33:49,220 --> 00:33:56,220
It's like advice. We are not using that right now.

00:34:03,440 --> 00:34:10,440
-Related to Deployment Tools WF Module, currently I'm working at Pfizer on that project.

00:34:11,040 --> 00:34:21,700
That will be the new system for Pfizer to deploy Drupal sites. Currently this module is not completed.

00:34:22,009 --> 00:34:29,549
The module in the community is not perfect to use, but I think in the next, I don't know,

00:34:29,779 --> 00:34:36,779
three months that will be a new revolutionary way to deploy Drupal sites, so keep posted

00:34:37,649 --> 00:34:43,480
on that. -Congratulations, man.

00:34:43,480 --> 00:34:50,480
Now we start talking about the code, so we have to talk about Git.

00:34:50,899 --> 00:34:57,200
You have to set your Git workflow in order that everyone works the same and prevents

00:34:57,200 --> 00:35:01,650
problems. There are some Git workflows that you can

00:35:01,650 --> 00:35:05,930
use. I will show you the workflow that we use at

00:35:05,930 --> 00:35:10,380
Taller. It doesn't mean that that's the right workflow.

00:35:10,380 --> 00:35:20,280
It can fit with your team, so if you have not distributed team or a really huge team,

00:35:20,650 --> 00:35:25,960
you don't have to have the same workflow as us.

00:35:25,960 --> 00:35:30,700
It depends on the project, on the team and everything.

00:35:30,700 --> 00:35:37,700
You have the centralized workflow. That's more like the SVN way of developing

00:35:38,150 --> 00:35:42,329
or versioning things. You have a centralized place that all the

00:35:42,329 --> 00:35:49,329
code goes there, and that's the master place of the repository, and everyone commits to

00:35:49,640 --> 00:35:54,410
there. You have also the feature branch workflow

00:35:54,410 --> 00:36:01,410
that you have to make a branch. Use branches in Git in order to develop a

00:36:01,690 --> 00:36:07,599
new feature, and when it's finished, you merge back into the master branch.

00:36:07,599 --> 00:36:14,599
It's a way to prevent unstable code from the new features.

00:36:15,049 --> 00:36:20,519
You start the development of the feature in a separate place.

00:36:20,519 --> 00:36:26,230
When you finish it and you write the tests and everything, and everything is okay, you

00:36:26,230 --> 00:36:33,230
merge back into the master branch. You have the Git flow workflow, and that is

00:36:33,900 --> 00:36:39,900
almost the same as the feature branch workflow, but the difference here is that it's like

00:36:39,900 --> 00:36:48,340
a methodology of developing with Git. The guy who created this methodology or this

00:36:48,670 --> 00:36:57,230
workflow has some rules that you must follow in order to run Git flow, to do the Git flow

00:36:57,470 --> 00:37:01,239
workflow. Actually, we at Taller are using the Git flow

00:37:01,239 --> 00:37:05,119
workflow. You also have the forking workflow.

00:37:05,119 --> 00:37:12,119
You guys may be aware of the GitHub way of developing things.

00:37:12,710 --> 00:37:19,329
You have your project, and you fork the project, develop your version of the project, and you

00:37:19,329 --> 00:37:26,069
make pool requests, so the maintainer of the original repository will review your code

00:37:26,069 --> 00:37:33,069
and if everything's okay, it will be merged back into the original repository.

00:37:33,809 --> 00:37:38,789
We tried to use this. Actually, we were using it in other projects

00:37:38,789 --> 00:37:44,440
that are not Drupal projects. It's good because you have more people looking

00:37:44,440 --> 00:37:51,440
at the code because you have to make a pool request, so someone has to check the code,

00:37:51,700 --> 00:38:01,700
review the code in order to approve this. It's more secure, but it can slow down your

00:38:02,029 --> 00:38:10,489
process if your team is not used to working in this workflow.

00:38:10,749 --> 00:38:19,889
You have to try. The Git flow workflow came to us by this article

00:38:20,099 --> 00:38:27,099
written by Vincent Driessen that was called, "A Successful Git Branching Model."

00:38:36,910 --> 00:38:45,490
Here's an explanation of the process. I will not explain this really deeply because

00:38:45,749 --> 00:38:50,720
I think it's not the focus of the presentation right now.

00:38:50,720 --> 00:38:56,140
You can check out these links at the bottom of the slide to see a little bit more about this.

00:38:56,140 --> 00:39:03,039
You have the release branch and you have the feature

00:39:03,039 --> 00:39:10,539
branch and another branch to complete the release process, so it's a model to work with Git.

00:39:11,100 --> 00:39:18,100
It has a plugin, so you can install the Git-Flow

00:39:18,289 --> 00:39:22,390
plugin. You can check it out at GitHub or just run

00:39:22,390 --> 00:39:33,550
an app to install Git-Flow if you are using Ubuntu or something like a Debian-based operating system.

00:39:35,200 --> 00:39:45,840
We have to talk about .git/hooks because .git/hooks can help us to automate things in the process

00:39:46,140 --> 00:39:52,200
of the development because you have to write your code and have to commit your code and

00:39:52,200 --> 00:39:58,690
you have to push your code. Every time you are running a Git command, you have

00:39:58,690 --> 00:40:07,750
a hook that can be fired in order to run a process, and you can use this for running the

00:40:07,930 --> 00:40:13,190
unit tests when the developer pushes the code for the repository.

00:40:13,190 --> 00:40:33,350
When the repository server receives this code, there is a hook also, so you can run scheduled

00:40:33,640 --> 00:40:40,640
static code analysis in order to prevent bad architectures or something like this.

00:40:41,680 --> 00:40:46,289
You have client side hooks and you have server side hooks.

00:40:46,289 --> 00:40:53,289
The client side hooks are the hooks that are fired in the developer machine, so in the

00:40:54,150 --> 00:40:59,599
client. One of the hooks that you could use is the

00:40:59,599 --> 00:41:09,879
pre-commit hook. Before the commit, you run Lint or a static

00:41:10,099 --> 00:41:17,099
check to make sure that everything follows the code standards, and you can also run automated

00:41:17,680 --> 00:41:24,680
tests, like unit tests or other tests. You can also use the post-checkout hook.

00:41:24,720 --> 00:41:32,860
This hook is like a warning or a hook for alerts.

00:41:33,200 --> 00:41:44,280
When you start working with too many people and too many features, and let's think that

00:41:44,619 --> 00:41:51,619
the client de-prioritized some feature, so you're developing this and it's broken because

00:41:52,400 --> 00:41:58,880
you stopped in the middle of the development. At that state of the code, some tests could

00:41:58,880 --> 00:42:03,200
be failing. If you're using the post-checkout hook, you

00:42:03,200 --> 00:42:09,460
can run the tests or the critical tests in order to make sure that if you're starting

00:42:09,460 --> 00:42:15,269
with this state of the code, you already know that there's something bad that you have to

00:42:15,269 --> 00:42:22,269
fix. It's a way to prevent you from keeping just

00:42:22,880 --> 00:42:32,400
with your memory, because you can forget things. This is a nice hook to run critical tests

00:42:32,869 --> 00:42:37,640
against the code. Then we have the server side hooks.

00:42:37,640 --> 00:42:43,819
The server side hooks are the hooks that run when the code came to the server.

00:42:43,819 --> 00:42:50,819
You can use the pre-receive hook in order to also make coding standard checks, run automated

00:42:51,489 --> 00:43:00,009
tests, or make branch preventions. It's good because when you are trying to use

00:43:00,329 --> 00:43:06,049
Lint development process, you have the "stop the line" concept.

00:43:06,049 --> 00:43:15,829
If any of the tests failed, you can use the pre-receive hook to prevent more code from

00:43:15,960 --> 00:43:23,820
going to the next step of the workflow. You have the ability to prevent the other

00:43:23,970 --> 00:43:30,970
developers from still pushing code to the repository even if you don't fix the problem

00:43:31,799 --> 00:43:37,940
that you should fix right now. It's a really good thing to start doing the

00:43:37,940 --> 00:43:43,170
"stop the line" concept in the development workflow.

00:43:43,170 --> 00:43:51,550
You have also the post-receive hook that you can use to run load tests or notifications

00:43:51,920 --> 00:43:57,229
for your developers. We at Taller use this.

00:43:57,229 --> 00:44:05,969
When we push the code, the repository sends us a message in our chat client, so we know

00:44:06,319 --> 00:44:16,839
that a deployment is going to be started, and we see all the tests passing or failing.

00:44:17,160 --> 00:44:25,740
All this kind of stuff could be in a .git/hook, so you can run this command or your script,

00:44:26,089 --> 00:44:33,089
and you can use this in order to be aware of what's happening behind the scenes.

00:44:33,619 --> 00:44:43,259
It's a really important thing. It's something like if you're driving a car

00:44:43,479 --> 00:44:51,359
and you don't have lights, you don't have any sense of where you're going.

00:44:51,569 --> 00:44:56,569
The alerts are the way that we can use the lights of the car.

00:44:56,569 --> 00:45:01,890
It's the only way that we can be aware of what's happening.

00:45:01,890 --> 00:45:08,890
It's really, really, really important. About Drupal related to Git.

00:45:11,660 --> 00:45:18,660
There is a Coder Module. This module is used to run the coding standards

00:45:19,349 --> 00:45:29,929
stuff into your code. It's also in the process of development, the

00:45:30,289 --> 00:45:38,629
Drupal project development. You have some standards that this module implements

00:45:38,819 --> 00:45:46,579
in order to run against your code and make sure that everything is compliant with the

00:45:46,809 --> 00:45:52,940
Drupal coding standards. You also have the PAReview script that we

00:45:52,940 --> 00:46:05,760
use for running pattern preventions or preventing injections or patterns that are already proven

00:46:05,979 --> 00:46:12,410
to be wrong. This one also is in the Drupal development

00:46:12,410 --> 00:46:17,660
process, so every time you contribute with a module, you have to use this against your

00:46:17,660 --> 00:46:25,860
code, so if we're already using it in the Drupal project, why should we not use it in

00:46:26,079 --> 00:46:31,829
our projects? It guarantees the quality of the code.

00:46:31,829 --> 00:46:37,539
You should use this. You can use this into a .git/hook, so this

00:46:37,539 --> 00:46:44,079
is important. You also have the Drupal Code Quality Module.

00:46:44,079 --> 00:46:58,979
Actually, it's just a file that is a hook for Git, so the file just calls a Drush command,

00:46:59,440 --> 00:47:05,450
and you just download this module, open your repository, and go to the hooks directory

00:47:05,450 --> 00:47:12,450
in your Git repository, and put this script into your .git/hooks.

00:47:13,049 --> 00:47:20,049
It's a good way to start if you don't have anything.

00:47:20,579 --> 00:47:27,579
Now we're going to talk about automated tests because that's the part that guarantees the

00:47:28,369 --> 00:47:34,329
quality. I think the automated tests are the only way

00:47:34,329 --> 00:47:44,349
that we have security and reliability for a continual improvement process, because if

00:47:44,660 --> 00:47:56,420
you don't have tests to prove that the state of your project is good right now, you will

00:47:56,690 --> 00:48:06,450
not be confident to put more code there because it's still working.

00:48:06,910 --> 00:48:19,810
It doesn't touch this. It will prevent innovation because you cannot

00:48:21,089 --> 00:48:28,089
imagine what will happen or this part of the code is too complex, I'm not touching this.

00:48:29,680 --> 00:48:41,040
Let's take this in that way. The tests guarantee that you can refactor your code.

00:48:42,690 --> 00:48:52,570
It's the tool we have to guarantee the quality and enable us to innovate or make optimizations

00:48:52,749 --> 00:48:59,670
into our code. A really nice session talking about tests

00:48:59,670 --> 00:49:09,690
was in the Agile Brazil last year, and Joseph Yodel, the guy who created or coined

00:49:10,509 --> 00:49:17,430
the term of test-driven development, gave a session about tests.

00:49:17,430 --> 00:49:27,150
He gives us the ten tenets of testing, so I think we should follow these rules because

00:49:27,529 --> 00:49:40,729
he has a lot of experience doing tests, and it's obvious.

00:49:40,740 --> 00:49:48,640
You should see this presentation. Another thing is what he calls the classic

00:49:49,039 --> 00:49:59,859
test-first development or the classic TDD and the Rio process.

00:50:00,140 --> 00:50:13,220
There are people who actually do TDD by the book, but I think in the Drupal context, it's

00:50:13,249 --> 00:50:18,989
more difficult because unit tests in Drupal are slow.

00:50:18,989 --> 00:50:31,529
If you're doing unit [inaudible] your time, you have the slow down of your process if you're not

00:50:31,839 --> 00:50:37,559
proficient in doing this and also because you're using simple tests for the tool of

00:50:37,559 --> 00:50:44,559
BDD unit tests. So there's the workflow that should be used

00:50:45,450 --> 00:50:56,030
by the book of the TDD and there's the pragmatic testing cycle that fits more with our reality

00:50:56,269 --> 00:51:01,869
at Taller right now. We write production code first, and then we

00:51:01,869 --> 00:51:07,519
write the tests for this. It doesn't mean that it's wrong or it's right.

00:51:07,519 --> 00:51:14,519
The main thing is that you have to have tests. It doesn't matter if your road is before or

00:51:14,559 --> 00:51:22,259
after the production code. It's like we are busting some myths about

00:51:22,519 --> 00:51:29,239
TDD. Using tests with Drupal.

00:51:29,239 --> 00:51:35,619
How can we use it? Right now, in Drupal 7, we use simple test.

00:51:35,619 --> 00:51:45,579
Simple tests are doing their job well, but it's not the best solution, I think.

00:51:46,049 --> 00:51:59,009
Naturally, organically, the community is changing to PHP unit, so Drupal 8 actually replaced

00:51:59,479 --> 00:52:07,859
the simple test with PHP unit, so maybe you can use this in your next project using Drupal

00:52:08,190 --> 00:52:16,230
8 for unit testing. You also have the BDD, the behavior-driven

00:52:16,489 --> 00:52:23,009
development, so you have tests for checking for the behavior of the user.

00:52:23,009 --> 00:52:33,149
In the Drupal community, the most common solution is the Behat project, and we have the Behat

00:52:33,400 --> 00:52:38,579
Extension Module in order to connect Drupal with Behat.

00:52:38,579 --> 00:52:42,849
We at Taller don't use Behat. We use Barbor.

00:52:42,849 --> 00:52:53,909
It's a BDD framework that we built up into the Cucumber project, so it's written in Ruby not

00:52:54,089 --> 00:53:04,269
in PHP. This project created the concept that Behat

00:53:04,430 --> 00:53:11,430
uses right now, so it has the Gherkin language. That is a language that the managers can understand

00:53:11,849 --> 00:53:18,849
in order to write the tests in a human language. You write the tests in a human language, and

00:53:19,930 --> 00:53:28,670
then you write the steps of this test. We liked this approach, and as we saw that

00:53:29,009 --> 00:53:39,149
Cucumber was more mature, we chose this, but it doesn't mean that it's a valid proven solution.

00:53:39,479 --> 00:53:48,119
You can use Behat if you're more comfortable with PHP or you don't like Ruby or something

00:53:48,390 --> 00:53:56,150
like this. This is the process we're using and the tools

00:53:56,440 --> 00:54:03,299
we're using. Now, before the questions, I will share my

00:54:03,299 --> 00:54:17,459
vision about this, and I think that in the evolution of the Drupal project we have some

00:54:17,690 --> 00:54:33,710
point that makes us a really good continuous deployment process because all of the peculiarities

00:54:34,249 --> 00:54:46,989
of Drupal, like storing everything in a database or everything... I think right now with all

00:54:47,329 --> 00:54:56,049
the changes that Drupal 8 brings to us, I think it will be really much easier to do these kind

00:54:56,450 --> 00:55:03,450
of workflows and implement this process in order to have the continuous deployment running

00:55:03,900 --> 00:55:09,359
the right way. I'm really excited about Drupal 8. I think

00:55:09,359 --> 00:55:19,039
it will help us really, really to minimize the barriers that we have right now using

00:55:19,349 --> 00:55:26,319
Drupal 7 in order to deploy the code right to the client.

00:55:26,319 --> 00:55:36,539
I think, actually, right now I'm really excited about the future of the project because I

00:55:36,869 --> 00:55:43,869
see it's more compliant with this mind set, you know?

00:55:44,380 --> 00:55:53,400
I open up for questions if you don't understand something or you would like to share your

00:55:53,930 --> 00:56:00,930
experience, or if you're doing a better workflow or you have a better process, it would be

00:56:01,650 --> 00:56:17,510
really nice if you could share this with us. Another announcement is that all the sessions

00:56:17,709 --> 00:56:25,509
will be open for feedback, so if you do like this session or if you don't like this session,

00:56:25,779 --> 00:56:32,779
please give your feedback, and it will help me to make a better session for the next time.

00:56:33,740 --> 00:56:37,380
Anyone have a question?

00:56:46,200 --> 00:56:49,140
-I arrived a little late, so excuse me, you

00:56:49,390 --> 00:56:56,390
said this at the beginning of the session. First among everything, great session. Thanks about it.

00:56:57,269 --> 00:57:05,549
Where could I get the slides? -I will put the link for the slides at the

00:57:05,839 --> 00:57:12,839
presentation on the DrupalCon website, so right when we finish this, the slides will

00:57:13,539 --> 00:57:20,509
be available on the DrupalCon website. Someone else?

00:57:20,760 --> 00:57:22,960

YouTube URL: https://www.youtube.com/watch?v=xIV-ZzkHLTc


