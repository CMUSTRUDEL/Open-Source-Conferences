Title: DrupalCon Latin America 2015: Keynote by Larry Garfield
Publication date: 2015-02-11
Playlist: DrupalCon Latin America - Feb 2015
Description: 
	
Captions: 
	00:00:00,719 --> 00:00:02,980
Everyone heard Dries's keynote yesterday, right?

00:00:02,980 --> 00:00:06,820
The other big man himself.

00:00:07,360 --> 00:00:16,900
Dries was talking about this idea of a push-web future in which more robust websites and systems don't wait for us to come to them.

00:00:17,150 --> 00:00:20,659
They come to us. Personalization.

00:00:20,659 --> 00:00:27,159
Useful for analytics. Building systems that know about us.

00:00:27,159 --> 00:00:31,470
That sounds compelling. That sounds like a very interesting world to live in.

00:00:31,470 --> 00:00:34,820
It also sounds kind of scary.

00:00:34,820 --> 00:00:40,520
Honestly, I was a bit scared listening to him talk because who is he talking about actually doing that?

00:00:40,660 --> 00:00:47,620
Facebook, Google, Apple, Amazon.

00:00:47,620 --> 00:00:54,580
American multinational conglomerates with gazillions of dollars, gazillions of terabytes of data.

00:00:54,580 --> 00:00:58,380
I don't know if gazillions translates in Spanish very well, but a lot.

00:00:59,380 --> 00:01:06,380
How are we going to compete with this?

00:01:06,560 --> 00:01:12,260
If this push-web vision is in fact the future, how are we going to compete with them?

00:01:12,260 --> 00:01:16,000
This push-web future cannot be just for large organizations.

00:01:16,000 --> 00:01:22,310
It cannot be just for the big players with billions of dollars to throw around.

00:01:22,340 --> 00:01:30,540
A lot of these things we're talking about, these massive data analytics, the idea of systems that can learn about people and push out data.

00:01:30,540 --> 00:01:34,380
These require a huge investment.

00:01:34,409 --> 00:01:39,370
These companies can afford that investment. I can't personally, so how am I going to compete with them?

00:01:39,370 --> 00:01:44,530
How is a small shop here going to compete with them in building this future web?

00:01:44,800 --> 00:01:50,480
Dries was talking about, you should be upfront about what you're doing.

00:01:50,780 --> 00:01:56,940
Which of these companies has actually been upfront about everything they do with our data?

00:01:56,960 --> 00:02:00,920
Not a one.

00:02:00,960 --> 00:02:08,200
I don't trust any of them to actually be upfront about what they're doing with my data because they haven't shown they're trustworthy.

00:02:08,360 --> 00:02:14,500
We need to be able to own our own data. We need to own our own future of the web even as the web evolves and becomes more complex.

00:02:14,740 --> 00:02:18,280
Where does that leave the small player?

00:02:18,290 --> 00:02:22,860
Where does that leave the small shop, the independent?

00:02:22,860 --> 00:02:28,230
Well, it leaves them with Open Source. Really, I'm going to go a step further. 

00:02:28,230 --> 00:02:40,430
It leaves us with free software. Subtle but important distinction, the idea that access to these technologies, access to this world is a right.

00:02:40,790 --> 00:02:45,410
It's not something just for large companies. It's something that belongs to all of us and should belong to all of us.

00:02:45,640 --> 00:02:48,420
This is our response.

00:02:48,420 --> 00:02:56,220
This is our push-back on this modern web that is naturally owned by large corporations, by large institutions.

00:02:56,400 --> 00:03:00,540
Community working together is our push-back.

00:03:00,540 --> 00:03:05,660
Using tools that are designed from the ground-up to be shared and to encourage sharing.

00:03:05,660 --> 00:03:12,099
That is our push-back. That is our weapon against that kind of centralization.

00:03:12,099 --> 00:03:21,999
In particular, Drupal. Tools like Drupal are how we build that, how we push back and take control of this future web.

00:03:24,020 --> 00:03:27,540
The right to innovate is not to be restricted to a tiny minority.

00:03:27,540 --> 00:03:36,220
This is a quote from Free Software Magazine from 2005 in an article on the expansion of Open Source in Latin America.

00:03:36,380 --> 00:03:38,920
Open Source is how small players thrive.

00:03:39,120 --> 00:03:44,700
Incidentally, they're a Drupal site. Fitting, I think.

00:03:44,900 --> 00:03:47,620
Who is using Drupal?

00:03:47,840 --> 00:03:55,000
Megan talked about a lot of institutions, but to show really the breadth of Drupal and just how far Drupal reaches and how it's accessible to so many people, 

00:03:55,010 --> 00:04:00,040
the example I like to go back to is the White House.

00:04:00,040 --> 00:04:06,940
The head of the US government uses Drupal as did the Occupy movement.

00:04:06,940 --> 00:04:10,700
You cannot find two dissimilar organizations.

00:04:10,840 --> 00:04:15,220
It's debatable if you can even call Occupy an organization, and that's the point.

00:04:15,320 --> 00:04:21,840
Both of them had access to the exact same tools, the exact same technology. We use Drupal.

00:04:21,840 --> 00:04:25,680
Everyone uses Drupal. That's what makes it important.

00:04:25,680 --> 00:04:29,889
That's what makes Drupal powerful. It's what makes Open Source powerful.

00:04:29,889 --> 00:04:35,780
As Dries was talking about, it needs to be approachable.

00:04:35,780 --> 00:04:41,400
Technology that no one can use is not really useful.

00:04:41,400 --> 00:04:46,680
Unusable tools are useless. The technology may be great, but easy has to be there.

00:04:48,500 --> 00:04:54,080
Who's heard about Drupal 8?

00:04:54,080 --> 00:04:59,500
Most of the room. Okay. For those of you that haven't heard about it yet, you will.

00:05:01,660 --> 00:05:09,860
Drupal 8, as we've heard, there are a lot of big changes coming in it, a lot of big new features.

00:05:10,060 --> 00:05:16,020
The system requirements are somewhat higher. We talk about collaboration with other systems, dealing with enterprise institutions.

00:05:16,020 --> 00:05:18,260
It's really big news.

00:05:18,261 --> 00:05:23,730
Big, big, big. Does that mean it's only for big sites?

00:05:23,740 --> 00:05:26,740
Only for big shops? Only big consulting firms?

00:05:26,740 --> 00:05:31,130
Is Accenture the only one that's going to be able to work with this?

00:05:31,130 --> 00:05:35,509
Is it only for large institutions? I've heard this before.

00:05:35,509 --> 00:05:40,030
I've heard this concern, that Drupal's becoming only for the big player.

00:05:40,030 --> 00:05:45,009
Drupal is only for high-end professionals, and no one else will be able to use it.

00:05:45,009 --> 00:05:48,210
I disagree. I disagree completely.

00:05:48,210 --> 00:05:56,380
I hope you'll agree with me, because the point of Open Source is to give everyone, big and small, access to that same level playing field.

00:05:56,380 --> 00:06:13,280
Every tool that Drupal makes available to a Fortune 100 company in the US is also available to a one-man shop in Peru or a one-man shop in India or a one-man shop in Nigeria.

00:06:13,540 --> 00:06:16,720
The exact same tools are available to all of them.

00:06:16,760 --> 00:06:19,199
That's the point.

00:06:19,199 --> 00:06:29,139
Those same tools are available to everyone. Drupal 8 is a new generation PHP platform.

00:06:29,370 --> 00:06:32,370
This is part of the PHP renaissance. Who's heard that phrase before?

00:06:32,370 --> 00:06:41,210
A few people. The entire PHP development community over the past several years has been completely reinventing itself.

00:06:41,470 --> 00:06:48,080
Drupal has been a major part of that reinvention. We have been a driver in that.

00:06:48,080 --> 00:06:54,250
Drupal 7 was based on a 15-year-old software architecture.

00:06:54,250 --> 00:06:59,400
Drupal 8, modern PHP standards approachable by most developers in the world.

00:06:59,400 --> 00:07:05,900
Drupal 7 was built on the idea that everything is a web page, and you're just serving pages, and that's the entire web.

00:07:06,060 --> 00:07:09,310
That made a lot of sense in 2001.

00:07:09,340 --> 00:07:12,740
It does not make sense in 2015. In Drupal 8, we deal with HTTP.

00:07:12,740 --> 00:07:16,850
We're actually dealing with the web as it's built, which means we can do a lot more.

00:07:16,850 --> 00:07:22,610
We have a lot more power, a lot more flexibility to leverage the entirety of what the web stack gives us.

00:07:25,100 --> 00:07:27,419
Drupal 7, everything was built ourselves.

00:07:27,419 --> 00:07:34,419
With the exception of maybe jQuery, all the rest of the code in Drupal was built by Drupalers.

00:07:34,530 --> 00:07:38,460
That's fine, but there's a lot of really good code out there that we can use.

00:07:38,460 --> 00:07:45,240
In Drupal 8, we have done that. There's a lot of Drupal 8 that is not written by Drupal, and that's a good thing.

00:07:45,500 --> 00:07:49,300
It saved us a ton of time in development.

00:07:49,340 --> 00:07:53,520
Drupal 7 was a good start for a CMS, but let's be honest.

00:07:53,520 --> 00:07:57,810
Drupal 7 core on its own is not useful for building a real site.

00:07:57,810 --> 00:08:04,970
Drupal 8 is. You will be able to build actual, real, production-quality sites with Drupal 8 on day one.

00:08:05,240 --> 00:08:08,600
Actually, on day negative 20 because of release candidates.

00:08:08,610 --> 00:08:10,830
Start using it, then.

00:08:10,830 --> 00:08:15,200
Who does this benefit? What are the benefits of this?

00:08:15,210 --> 00:08:20,090
For site builders. Who considers themselves a site builder among other things?

00:08:20,540 --> 00:08:22,860
All right, so most of the room.

00:08:22,860 --> 00:08:25,880
You can build real sites with just Drupal core.

00:08:25,880 --> 00:08:30,470
In Drupal 7, there was this great new thing called Field API.

00:08:30,470 --> 00:08:35,719
It basically moved all of CCK into core and data modeling tools, structured content kind of a thing.

00:08:35,719 --> 00:08:40,429
That was one of the big features of Drupal 7.

00:08:40,429 --> 00:08:43,289
In Drupal 8, we just built on that.

00:08:43,289 --> 00:08:50,369
Entity reference, date, link, email, telephone, a couple of other new fields in core, so you can build that rich data model with just core.

00:08:50,520 --> 00:08:52,499
You don't need to wait for these modules to catch up.

00:08:52,499 --> 00:08:55,230
They are there from the beginning.

00:08:55,230 --> 00:08:59,329
Of course, what are you going to do with a rich data model?

00:08:59,329 --> 00:09:04,789
You're going to throw Views at it, because what else do you do with a rich data model but use Views?

00:09:04,800 --> 00:09:07,300
Views is in core now.

00:09:07,300 --> 00:09:12,440
What does this mean? Well, it's still the same Views you know and love, but you don't need to wait.

00:09:12,580 --> 00:09:20,680
There was about a 5-6 month lag after Drupal 7 came out before anyone started building with it because Views wasn't quite there yet.

00:09:21,459 --> 00:09:26,629
Views is there today. Drupal 8, you can start building real sites immediately.

00:09:26,629 --> 00:09:29,829
It's not just that it's been packaged.

00:09:29,829 --> 00:09:36,689
Just tossing module into core wasn't enough. We went through and rebuilt Drupal itself using Views.

00:09:36,689 --> 00:09:43,289
Most of the admin screens you'll see, most of the pre-built functionality in Drupal now, it's not custom one-off code.

00:09:43,499 --> 00:09:47,119
It's Views. You want to customize the admin content page for your site?

00:09:47,300 --> 00:09:48,720
It's a view.

00:09:48,730 --> 00:09:52,029
You know how to edit a view. You don't need to overwrite anything.

00:09:52,029 --> 00:09:59,029
You edit Drupal itself because it's just configuration. And it's awesome.

00:10:01,509 --> 00:10:05,189
Also note, you've got these edit links here, all these things.

00:10:05,189 --> 00:10:09,459
This is all core functionality. Who has used bulk operations at any point?

00:10:09,459 --> 00:10:12,629
A fair number of people. That's in core, too.

00:10:12,629 --> 00:10:20,529
All of these admin forms are built strictly with core tools, which means you can build anything like this with just core.

00:10:20,760 --> 00:10:26,580
Drupal 8 gives you content modeling.

00:10:26,589 --> 00:10:30,509
First grade, top of the line content modeling capabilities.

00:10:30,509 --> 00:10:33,749
Good content editing. Content assembly.

00:10:33,749 --> 00:10:40,449
Content delivery. All of that out of the box from day one for everybody.

00:10:40,860 --> 00:10:50,440
How much time and money are you going to save on your projects, for your clients, for your companies by not having to deal with all of this other stuff you have to think about?

00:10:50,520 --> 00:10:52,980
It's there from the beginning.

00:10:52,989 --> 00:11:04,409
This is enterprise-grade functionality that is needed for high-end sites that is available to your personal block if you want it, and everyone in between.

00:11:06,610 --> 00:11:08,570
Configuration management.

00:11:08,860 --> 00:11:15,600
That's another major new step in Drupal 8, because in past versions of Drupal, mixing content and configuration, world of pain.

00:11:15,649 --> 00:11:22,579
Nod your head and giggle if you agree. A lot of people have been there, yes.

00:11:22,579 --> 00:11:27,149
Why is this a problem? Well, we didn't really have a config system.

00:11:27,149 --> 00:11:35,949
Features is the best we had in Drupal 7. It's not a really good configuration deployment tool because it's not.

00:11:36,000 --> 00:11:39,540
It was never built for what we're trying to do with it.

00:11:40,120 --> 00:11:42,980
Drupal 7 didn't really have a configuration system.

00:11:42,980 --> 00:11:48,460
Drupal 7's configuration system was: Here's a database. Enjoy!

00:11:52,320 --> 00:11:53,020
No.

00:11:53,449 --> 00:11:58,589
How many hours of your life have you wasted that you will never get back fighting this problem?

00:12:00,400 --> 00:12:01,601
Hundreds.

00:12:02,240 --> 00:12:03,819
Too many. I'll just go with too many.

00:12:03,819 --> 00:12:08,589
How much of your client's money have you wasted fighting with Features because we had no better tool?

00:12:10,660 --> 00:12:17,660
There were ways to work around this to do real, solid deployments from a dev site to a staging site to a production site, 

00:12:17,670 --> 00:12:22,650
which is what you should be doing for any site of any size, anything larger than your blog.

00:12:22,910 --> 00:12:27,379
It is often complicated and took a lot of work to set up.

00:12:27,379 --> 00:12:34,379
I don't believe that only big enterprise users should have the right to working configuration.

00:12:39,560 --> 00:12:42,199
We've got this new configuration system now, as in we have one.

00:12:42,199 --> 00:12:47,540
It's a real system built from the ground up to support the things people do with Drupal.

00:12:47,540 --> 00:12:54,500
Import/export is built in, so you don't need to worry about, does this thing tie into exportables or not or any try to bridge forge?

00:12:54,660 --> 00:12:55,160
Is that going to work with this?

00:12:55,309 --> 00:12:56,790
No. All of that is built in from day one.

00:12:56,790 --> 00:13:05,090
If you use that config system, it just works. Modules can now include default configuration much more easily than in the past.

00:13:05,320 --> 00:13:10,020
The database is now a lot leaner, just content.

00:13:10,029 --> 00:13:15,629
Your content and your configuration are separate, which means doing real deployment is actually possible.

00:13:16,540 --> 00:13:19,020
Let's have a look at what this looks like.

00:13:19,029 --> 00:13:23,660
This is a little bit of an old video, so some of the UI has changed a bit, but the concept is still the same.

00:13:25,100 --> 00:13:30,080
You push export and, oh look, here's all of your site's configuration as a whole bunch of files.

00:13:30,340 --> 00:13:33,910
Human-readable, machine-readable files.

00:13:33,939 --> 00:13:36,259
Are you playing?

00:13:38,059 --> 00:13:41,239
Why are you not playing?

00:13:50,680 --> 00:13:52,680
One moment.

00:13:53,429 --> 00:13:56,779
The config system works a lot better than my slide deck.

00:14:00,900 --> 00:14:07,280
Moving along. Translation.

00:14:07,460 --> 00:14:11,380
Who has built a multilingual site? Most of the room.

00:14:11,399 --> 00:14:15,850
Is this a complete list of the modules you had to install to make it kind of, sort of work?

00:14:18,280 --> 00:14:19,100
No.

00:14:19,109 --> 00:14:22,029
Someone wrote their own. There we go, yeah.

00:14:22,029 --> 00:14:27,519
Drupal 7 translation is a lot better than most of what's out there, which is kind of sad.

00:14:27,540 --> 00:14:32,989
And it still didn't do everything we needed.

00:14:32,989 --> 00:14:35,689
Sigh.

00:14:38,060 --> 00:14:46,399
In Drupal 8, it's been built into the system at a fundamental level, all the way down to the base, and it is all in core.

00:14:46,399 --> 00:14:54,939
You do not need contrib for it. Everyone can build multilingual sites with Drupal 8 from day one.

00:14:55,060 --> 00:14:58,040
Let's see if this one works.

00:14:58,160 --> 00:15:01,200
There we go.

00:15:01,460 --> 00:15:07,520
We can import our translations through the UI, but they will also update automatically.

00:15:07,529 --> 00:15:13,069
There is now a central language server that can push out updates for modules.

00:15:13,069 --> 00:15:14,689
You want to switch your language around? Great.

00:15:14,689 --> 00:15:17,699
It can even handle right-to-left and left-to-right between different languages.

00:15:17,699 --> 00:15:21,379
If it can handle Japanese and Hebrew, it can handle Spanish.

00:15:21,379 --> 00:15:28,379
They're way more complicated. Translation.

00:15:29,809 --> 00:15:38,489
You can translate things including not just content, but you can also use language to control what shows up.

00:15:38,639 --> 00:15:43,859
In this case, we're going to make this block appear only on the Japanese site.

00:15:53,420 --> 00:15:57,269
This takes actually four.

00:15:57,269 --> 00:16:01,239
This is an older video as well. We added the configuration translation.

00:16:01,239 --> 00:16:06,970
All of that configuration system is translatable. I don't think that was even possible in Drupal 7.

00:16:11,280 --> 00:16:13,960
Content editors, our clients.

00:16:14,290 --> 00:16:21,190
They get a rich editing experience. Who actually likes the out-of-the-box Drupal 7 content edit forms?

00:16:21,220 --> 00:16:22,700
Who thinks they're pretty?

00:16:22,709 --> 00:16:34,709
One person and Chris. We have WYSIWYG in core, but not just any WYSIWYG.

00:16:34,989 --> 00:16:38,239
Not just your basic WordPress style.

00:16:38,239 --> 00:16:46,619
We go beyond that. It's automatically configured out of the box from day one with sensible defaults, but you can customize it.

00:16:47,049 --> 00:16:50,799
The content editing forms have been streamlined as well, so it's not just we slapped a WYSIWYG on it.

00:16:50,799 --> 00:16:53,729
We actually rethought that entire page.

00:16:53,729 --> 00:17:01,429
Wish me luck here. Let's go in and create some new content.

00:17:01,620 --> 00:17:09,340
We create a nice, basic page. The title is the same as it always has been, but now we've got this rich text area down here that you can fill in.

00:17:09,720 --> 00:17:13,779
Configuration is off on the side by default instead of having to scroll all the way down to the bottom.

00:17:13,779 --> 00:17:17,640
Fill in your URL alias, hide it.

00:17:17,680 --> 00:17:20,970
We don't even have [inaudible] to these things in WYSIWYG.

00:17:20,970 --> 00:17:25,889
You can still resize it, as before. That's just built in by default.

00:17:25,889 --> 00:17:29,580
You can bold and italics, make links, make bullet points.

00:17:29,580 --> 00:17:33,100
You can add things to that. There are ways that you can extend that functionality.

00:17:33,100 --> 00:17:40,100
I made a stupid American mistake, didn't I? I can fix that.

00:17:45,120 --> 00:17:54,820
Saved. It even works for nodes shown in the view.

00:17:55,100 --> 00:17:59,090
That's a view on the side there. I'm just going to pop out the content area.

00:17:59,090 --> 00:18:05,919
Me gusta Drupal 8? Nos encanta Drupal 8.

00:18:05,919 --> 00:18:10,120
Hit reload. Everything is saved.

00:18:10,120 --> 00:18:16,909
Nice and simple. This is a stock install of Drupal 8 I recorded on Monday.

00:18:16,909 --> 00:18:20,169
I installed it, just started pushing buttons.

00:18:20,169 --> 00:18:25,730
I did no configuration to make that work. That is all there out of the box for everybody.

00:18:25,730 --> 00:18:31,220
There are a lot of big, expensive, proprietary CMSs that can't pull that off either.

00:18:31,220 --> 00:18:38,220
This is available to everybody free. Who turned off overlay?

00:18:45,320 --> 00:18:48,940
I think that got more applause than correcting the spelling of Colombia.

00:18:51,740 --> 00:18:54,220
Instead, we have a button.

00:18:54,360 --> 00:19:00,520
The real purpose of overlay was to say, all right, I want to go to the edit section, but I don't want to lose where I am on the site.

00:19:00,529 --> 00:19:03,539
I want to be able to go back to where I am on the site.

00:19:03,539 --> 00:19:08,049
Now we have in the admin section a button called "back to site."

00:19:08,049 --> 00:19:15,049
We replaced 1,000 lines of ugly JavaScript, button.

00:19:15,149 --> 00:19:21,299
Sometimes simple really is better. Accessibility.

00:19:21,299 --> 00:19:27,320
It's very important in the modern web. We want Drupal to be available to everybody.

00:19:27,320 --> 00:19:32,580
We're using all of the standard web ARIA capabilities.

00:19:32,640 --> 00:19:36,820
These are the internet standards, the web standards for doing accessibility. We've got those built in.

00:19:36,830 --> 00:19:48,490
Keyboard control is all over the place. One other thing: Have you ever gotten the sense that Drupal is trying to tell you something?

00:19:51,860 --> 00:19:53,900
Oh, come on.

00:19:54,760 --> 00:20:00,700
Audio? We're supposed to be getting audio here.

00:20:07,400 --> 00:20:11,940
Can you hear it from the laptop?

00:20:46,660 --> 00:20:53,610
Do you want to hear it again from the beginning?

00:20:56,740 --> 00:21:03,740
Hello, I am Drupal 8 and I am now self aware. Content. Extend content button.

00:21:04,750 --> 00:21:09,049
Link. Extend structure button. Link. Lock layout.

00:21:09,049 --> 00:21:12,590
List ten items level two. Close overlay button.

00:21:12,590 --> 00:21:15,480
Visited link. Quick edit.

00:21:15,480 --> 00:21:19,389
List items. Quick edit field image button.

00:21:19,389 --> 00:21:24,639
Quick edit field body button. Editing entity node one, field body.

00:21:24,639 --> 00:21:26,679
There we go.

00:21:31,840 --> 00:21:43,360
This is one that I really like because at DrupalCon San Francisco five years ago, we had a speaker come up, Everett Zufelt, who is himself blind.

00:21:43,540 --> 00:21:45,360
He works with Drupal.

00:21:45,370 --> 00:21:50,799
He worked with Drupal because it was the most accessible system he could find.

00:21:50,799 --> 00:21:55,739
That is great. He also pointed out, though, several places where we could be better.

00:21:55,960 --> 00:21:59,240
We took that challenge and improved accessibility even more.

00:21:59,240 --> 00:22:04,450
This is easily the most accessible CMS on the market.

00:22:06,060 --> 00:22:12,520
Things to note there, that video we are tying into the in place editor, so you can use that.

00:22:12,700 --> 00:22:15,740
All of that API is available to developers.

00:22:15,750 --> 00:22:22,750
All of this is built in and automatic. Out of the box, it just works.

00:22:24,080 --> 00:22:31,740
In some places, this is a legal requirement. Some types of sites, you have to build accessible websites, but that's not why we build accessible websites.

00:22:31,940 --> 00:22:36,919
We do it because it's the right thing to do, not just to help out disabled users, but to help out all users.

00:22:36,919 --> 00:22:42,389
Drupal reading your website to you from your phone.

00:22:42,389 --> 00:22:46,250
How cool is that?

00:22:46,250 --> 00:22:54,470
Pretty cool. We also have a new help system built in.

00:22:54,710 --> 00:22:58,610
It's called Tour. This is something you can maintain yourself in a text file.

00:22:58,610 --> 00:23:02,379
You don't need to write any JavaScript.

00:23:02,379 --> 00:23:09,379
In your module or on your site, write a config file with your help text, and it figures this out.

00:23:09,620 --> 00:23:14,500
Right now I think Views is the only thing in core that's using it.

00:23:14,760 --> 00:23:20,900
I want to see everyone's modules using this system, individual modules or sites.

00:23:21,080 --> 00:23:28,660
The documentation for your site you can provide to your costumer built into the site and maintain it through version control.

00:23:28,660 --> 00:23:31,720
That's pretty awesome.

00:23:32,120 --> 00:23:37,140
Honestly, I think this feature gets no where near as much press as it needs to.

00:23:40,500 --> 00:23:45,169
Who here's a themer?

00:23:45,240 --> 00:23:48,620
Write front-end code? A decent amount of the room, all right.

00:23:48,629 --> 00:23:53,960
I've got some good news for you. We get to say goodbye to some old friends.

00:23:53,960 --> 00:23:55,680
IE6 is dead.

00:24:02,460 --> 00:24:04,460
IE7 is dead.

00:24:07,920 --> 00:24:12,300
IE8 is dead.

00:24:12,520 --> 00:24:19,360
If you have a legacy site where you really need IE8 support, there's a module for that because it's Drupal, but don't use it.

00:24:19,360 --> 00:24:28,440
Use modern browsers only. What this means is that we can use the full modern web tool chain.

00:24:28,820 --> 00:24:35,400
HTML5, CSS3, all the fancy, new capabilities that replace large swaths of hacks with one line of CSS.

00:24:35,840 --> 00:24:40,960
It also means everything is responsive out of the box from day one.

00:24:40,960 --> 00:24:45,060
All form fields, all page elements.

00:24:45,400 --> 00:24:52,560
Obviously, your own theme can do something stupid if you want, but Drupal is doing everything it possibly can to make every site in the world responsive.

00:24:54,040 --> 00:25:00,080
You don't need to replace CSS3 capabilities with screwy JavaScript.

00:25:00,300 --> 00:25:01,240
It just works.

00:25:01,240 --> 00:25:04,600
Let's have a look at that. You saw this new toolbar before.

00:25:04,600 --> 00:25:08,230
The old toolbar from Drupal 7 totally didn't work on phones.

00:25:08,230 --> 00:25:11,870
Anyone ever try it? It sucked.

00:25:11,870 --> 00:25:14,419
They've been integrated together here now, so we've got toolbar.

00:25:14,419 --> 00:25:19,799
We've got shortcut links. Let's see what happens when you shrink the screen.

00:25:19,799 --> 00:25:21,169
There goes the menu, and the page is reformatting.

00:25:21,169 --> 00:25:25,600
The toolbar shortens up. All right.

00:25:25,600 --> 00:25:31,009
This is just out-of-the-box behavior. Now the toolbar comes down the side.

00:25:31,009 --> 00:25:37,049
It's a nice, collapsible system. Everything you need is there.

00:25:37,049 --> 00:25:39,940
You can still get to all of your content, all of your capabilities.

00:25:39,940 --> 00:25:45,080
Yes, you can plug in new stuff to this menu.

00:25:45,140 --> 00:25:49,539
Notice, as we have more room it's going to fill in the whole side, and then it fills in across the top once there's enough room.

00:25:49,539 --> 00:25:53,929
If you want to stick it on the side all the time, though, you can.

00:25:53,929 --> 00:25:57,029
Built in, out of the box.

00:26:14,640 --> 00:26:16,640
It also works on mobile.

00:26:16,659 --> 00:26:20,879
We've got HTML5 form elements built in.

00:26:21,020 --> 00:26:28,379
In this case, we've got a telephone field and a device that knows what to do with that can pop up the correct keyboard for it.

00:26:28,379 --> 00:26:32,090
Go ahead and save that. You don't need to deal with switching around.

00:26:32,090 --> 00:26:34,090
It does it for you.

00:26:34,280 --> 00:26:38,960
Because it's a telephone field, we know to put the mark-up around it so that you can make a phone call directly from...

00:26:38,960 --> 00:26:45,940
Did anyone notice we just edited a node from our phone?

00:26:46,020 --> 00:26:53,860
Holy... How much JavaScript do you think it takes to do this?

00:26:56,520 --> 00:27:01,140
How much JavaScript do you think we serve by default for Drupal?

00:27:10,640 --> 00:27:14,660
Anyone want to guess?

00:27:14,720 --> 00:27:18,519
Zero? Someone's read the slides.

00:27:18,519 --> 00:27:23,159
Why? Because modern web browsers don't need this much JavaScript to do cool stuff.

00:27:23,280 --> 00:27:27,120
It's there if you want JavaScript.

00:27:27,129 --> 00:27:38,649
The support is still there. There are plenty of JavaScript tools available, but you don't need them.

00:27:38,840 --> 00:27:41,249
That's great for mobile.

00:27:41,249 --> 00:27:43,209
That's great for performance.

00:27:43,400 --> 00:27:50,140
It means for an anonymous user there is no JavaScript to process when the page loads, which means on a phone it's going to be fast.

00:27:50,149 --> 00:27:56,069
Twig. Someone said, "Yay."

00:27:58,280 --> 00:28:02,840
I am not a front-end developer, but I love how Twig came to be.

00:28:02,919 --> 00:28:09,779
In Drupal 5, core developers said, "We think themers will want this as a theming system."

00:28:09,779 --> 00:28:12,279
Themers came back and said, "No, we don't like that."

00:28:12,279 --> 00:28:16,629
In Drupal 6, we said, "All right, how about this as a theming system?"

00:28:16,629 --> 00:28:21,139
The front-end developers went, "No, please stop. No."

00:28:21,139 --> 00:28:23,309
In Drupal 7, we said, "All right, they want flexibility.

00:28:23,309 --> 00:28:26,460
Let's give them render arrays. They'll love that."

00:28:26,460 --> 00:28:31,340
And themers said, "Would you stop that?"

00:28:31,580 --> 00:28:41,860
For Drupal 8, core developers went, "All right, themers, what do you actually want?" And themers came back and said, "We want Twig."

00:28:42,289 --> 00:28:45,330
Core developers said, "All right, Twig it is."

00:28:45,330 --> 00:28:48,029
We actually listened for a change and great things happen.

00:28:48,029 --> 00:28:55,409
The team working on moving Twig into Drupal 8 was the largest team of any of the sub-groups working on Drupal.

00:28:55,460 --> 00:28:58,180
Many of them were themers working on core for the very first time.

00:29:00,440 --> 00:29:02,940
This is the only code I'm showing.

00:29:02,940 --> 00:29:09,940
This is a template from Drupal 7 mostly, and if you don't know PHP, you're lost.

00:29:10,940 --> 00:29:15,049
If you don't know what a render array is, you're lost.

00:29:15,049 --> 00:29:20,449
If you don't know how a particular render array is structured, you're lost.

00:29:20,580 --> 00:29:26,399
This sucks. This is now the syntax for Drupal 8.

00:29:26,399 --> 00:29:31,070
It's the same format used by a dozen other projects.

00:29:31,070 --> 00:29:34,050
Great documentation available, great capabilities.

00:29:34,200 --> 00:29:40,220
Oh yeah, you can actually get your classes the way you want them to be, and it doesn't require writing 50 lines of PHP.

00:29:40,220 --> 00:29:46,300
You can do translation directly in your template without calling PHP functions and hoping it all works out in the end.

00:29:46,640 --> 00:29:49,449
You don't need to think about whether something is an array or not.

00:29:49,520 --> 00:29:50,759
This is great.

00:29:50,759 --> 00:29:54,470
Want more information on this? There's a session later today, I believe.

00:29:54,470 --> 00:29:58,470
Oh yeah, and one other detail. 

00:30:19,780 --> 00:30:24,119
Compared to the previous leading Drupal. Actual divs may vary by custom theme.

00:30:24,119 --> 00:30:31,090
Offer void on IE6. What did it take to make this happen?

00:30:31,090 --> 00:30:35,419
You've probably heard a lot about the changes under the hood in Drupal 8.

00:30:35,419 --> 00:30:40,220
The biggest one: We're now requiring a modern, reasonably, version of PHP.

00:30:40,220 --> 00:30:48,720
But not just requiring that version, we reenvisioned how Drupal works to use modern language.

00:30:49,529 --> 00:30:53,529
Drupal 7 started requiring PHP 5, but didn't really make use of it.

00:30:53,529 --> 00:30:59,129
The biggest changes in Drupal 8 are we're actually using modern PHP.

00:30:59,129 --> 00:31:05,909
That architecture is built around interfaces. It's built around loose coupling, reusable components, testability.

00:31:06,120 --> 00:31:10,040
It's built around the idea that you can now hack core without hacking core.

00:31:10,100 --> 00:31:13,340
Save the kittens!

00:31:13,350 --> 00:31:18,110
The loose coupling we've done means you can modify Drupal itself without just piling onto it.

00:31:18,110 --> 00:31:21,370
You can actually swap out pieces of core without hacking core.

00:31:21,420 --> 00:31:23,260
That's amazing.

00:31:23,940 --> 00:31:27,919
There are a lot fewer Drupalisms. A lot less custom Drupal-specific concepts,

00:31:27,919 --> 00:31:31,460
which means it's a lot easier for developers to pick up.

00:31:31,460 --> 00:31:37,009
A lot of this comes from the adoption of Symfony, not the entire framework, just pieces of it.

00:31:37,009 --> 00:31:41,690
Just components out of this other PHP framework that we're using.

00:31:42,160 --> 00:31:53,239
It means that we have gotten rid of this "not invented here" concept, this kind of faulty mindset that if we write something it's guaranteed to be better than anything else out there.

00:31:53,239 --> 00:32:00,239
Instead, we've adopted the idea of "proudly invented elsewhere," because who doesn't love pie?

00:32:00,570 --> 00:32:06,029
We've got stuff from Symfony that we've pulled in.

00:32:06,029 --> 00:32:08,039
We have components from Symfony CMF.

00:32:08,039 --> 00:32:12,409
The routing system that we're using was a collaboration between Drupal and Symfony CMF.

00:32:12,409 --> 00:32:19,409
We coauthored this system, and it's now being used by Drupal 8, Symfony CMF, and EasyPublish.

00:32:20,700 --> 00:32:24,639
Drupal developers are now EasyPublish developers. That's pretty cool.

00:32:24,639 --> 00:32:28,860
Zend Feed. This is for a parsing RSS and ATOM feeds.

00:32:28,860 --> 00:32:33,460
By the way, ATOM. We get that for free now. Drupal 7 could only handle RSS and kind of badly.

00:32:33,460 --> 00:32:35,769
We wanted to replace that.

00:32:35,769 --> 00:32:40,700
We said, "All right, what's the top RSS and ATOM feed parser in PHP? It's the one from Zend Framework.

00:32:40,700 --> 00:32:45,860
It has nine dependencies that we don't want. We can't do that."

00:32:45,860 --> 00:32:49,610
I went and talked to the leads from the Zend project and said, "Can you help us out?"

00:32:49,610 --> 00:32:55,470
They said, "Give us a weekend." We came back after the weekend and had two small dependencies instead of nine.

00:32:55,640 --> 00:32:57,460
We said, "Great!" and pulled in Zend Feed.

00:32:57,470 --> 00:33:00,860
Now, we've got ATOM support just sitting there in Drupal waiting for you to do something with it.

00:33:00,860 --> 00:33:02,860
Have fun.

00:33:02,860 --> 00:33:09,780
We're using Doctrine for annotations. We're using Guzzle for an HTTP client, so making outgoing requests.

00:33:09,900 --> 00:33:17,200
We're using the best HTTP client in all of PHP right now instead of the mess we wrote in 2003.

00:33:17,509 --> 00:33:20,580
EasyRDF. Twig, I mentioned that.

00:33:20,580 --> 00:33:25,440
This is all stuff that we are using, that we are benefiting from that we didn't have to spend time writing.

00:33:27,680 --> 00:33:29,780
It's not just stuff that we've adopted from elsewhere.

00:33:29,789 --> 00:33:33,309
Probably the biggest Drupal-specific innovation is the new plugin system.

00:33:33,520 --> 00:33:36,119
Who used CTools plugins before?

00:33:36,119 --> 00:33:43,119
The same concept, but good. It applies all over the place.

00:33:43,299 --> 00:33:45,679
"Learn once, apply everywhere." I love this line.

00:33:45,679 --> 00:33:49,859
Lee Rowlands is one of the top core developers.

00:33:50,060 --> 00:33:54,320
It's all driven on interfaces, which makes it self-documenting.

00:33:54,500 --> 00:34:01,220
It means if you learn how to use any one of these systems in Drupal 8, it will take you five minutes to pick up any of the others.

00:34:01,230 --> 00:34:03,669
You don't need to learn 12 different ways of extending something.

00:34:03,669 --> 00:34:10,749
They all follow the same pattern. Actions, blocks, text formatters, everything in fields, entity reference, the migration system, REST.

00:34:11,010 --> 00:34:15,809
Everything is using the same model. Entities.

00:34:15,809 --> 00:34:19,379
We actually have an entity API now in core instead of just half of one.

00:34:19,379 --> 00:34:22,270
It actually makes sense. It's easier to use.

00:34:22,270 --> 00:34:25,859
There are actual classed objects. If you're using an IDE, it will help you.

00:34:25,860 --> 00:34:30,000
It will actually teach you about the system.

00:34:30,160 --> 00:34:36,600
You can unit test things now [inaudible] decoupling, which means we can verify our code is correct before it goes to the client and breaks in production,

00:34:36,829 --> 00:34:40,419
which is kind of important. What are we using for that?

00:34:40,419 --> 00:34:46,049
We're using PHPUnit, the standard tool for unit testing in PHP, which means it's way easier to learn.

00:34:46,049 --> 00:34:48,109
There's lots of great documentation.

00:34:48,109 --> 00:34:52,119
If you're working on another project, it's the exact same tool chain.

00:34:52,119 --> 00:35:00,019
Less for you to learn. We now have a RESTful pipeline, so we can do non HTML pages as first-class citizens.

00:35:00,240 --> 00:35:05,040
We can serve out REST responses and do web services from the beginning.

00:35:05,220 --> 00:35:07,340
HTML is really just a form of REST.

00:35:07,349 --> 00:35:13,069
This is not just mobile. People look at this and say, "Oh, great. Now I can build mobile apps to talk to my Drupal site."

00:35:13,329 --> 00:35:17,579
You can, but don't do that. If you want something on a phone like that, don't build an app.

00:35:17,579 --> 00:35:19,859
Just make a responsive site.

00:35:19,859 --> 00:35:25,049
What is this useful for? Think content syndication.

00:35:25,049 --> 00:35:28,609
Think content staging and deployment.

00:35:28,609 --> 00:35:31,540
There are tools being built for that that work off of this system. Think data archival.

00:35:31,540 --> 00:35:35,359
Think server-to-server logic. Think client-side customization.

00:35:35,359 --> 00:35:48,019
Imagine serving a static page and then having a little JavaScript do a call-back to customize just one little piece of the page for a user based on a REST request rather than having to have them log in and blow out your cache for the entire page.

00:35:48,309 --> 00:35:53,069
Huge, huge performance benefits here. Huge personalization benefits here.

00:35:53,069 --> 00:35:57,079
Huge use attracting benefits here to gather the data you need to build a better site.

00:35:57,079 --> 00:36:05,599
This is the kind of stuff REST enables. We have gotten off of our Drupal island.

00:36:05,730 --> 00:36:12,730
I remember a couple years ago I was speaking at DrupalCamp Costa Rica.

00:36:13,150 --> 00:36:24,350
I was talking to some local shop owners who were telling me that they can't hire experienced PHP developers because they don't want to use Drupal 7.

00:36:25,100 --> 00:36:33,260
That meant he had to hire only junior developers who are fresh out of school and then train them on Drupal because he couldn't hire anyone else.

00:36:33,700 --> 00:36:40,660
Now he can. Now he can hire experienced developers, junior developers, developers who have experience in other projects.

00:36:41,030 --> 00:36:44,450
Now developers who learn Drupal 8 can work on other projects, too.

00:36:44,450 --> 00:36:47,500
This is good for both the companies and the individuals.

00:36:47,500 --> 00:36:55,720
This broadens your skill set. This means the skills you learn in Drupal 8 will transfer to Symfony, to Silex, to Zend, to Cake, to EasyPublish.

00:36:55,950 --> 00:37:00,890
It makes it a lot easier to work on multiple platforms.

00:37:00,890 --> 00:37:10,010
At Palantir.net, where I work, we've started building with Drupal, Symfony, Silex, and Sculpin, all of which are modern PHP projects.

00:37:10,180 --> 00:37:12,360
All of which use Twig.

00:37:12,369 --> 00:37:18,700
Three of them use the same core pipeline, the same routing system, the same core logic for how the system works.

00:37:18,700 --> 00:37:22,589
That means the overhead for me to switch from

00:37:22,589 --> 00:37:25,960
a Drupal project to a Symfony project is a lot smaller.

00:37:25,960 --> 00:37:33,760
It's there, but it's a lot easier. I've talked to a lot of Drupal shops that are saying they are going to be working on Drupal and Symfony.

00:37:33,839 --> 00:37:38,140
I've also talked to a lot of Symfony shops that have said they started working on Drupal.

00:37:38,140 --> 00:37:42,109
They want to become not just a Symfony shop, but a Symfony and Drupal shop.

00:37:42,109 --> 00:37:47,209
That's great. That's how we solve the labor shortage in Drupal, is make it easier to work with Drupal.

00:37:47,440 --> 00:37:50,760
This takes a lot of changes.

00:37:50,770 --> 00:37:52,599
We've talked about a lot of changes under the hood.

00:37:52,599 --> 00:37:57,859
There's a lot more I could go into and, to be fair, a lot of people are kind of scared about it.

00:37:57,859 --> 00:38:04,150
Drupal events. There have to be cats on screen.

00:38:04,150 --> 00:38:07,440
A lot of people are nervous about it. They're very scared about all these changes.

00:38:07,440 --> 00:38:10,100
But you know what?

00:38:10,100 --> 00:38:17,780
Almost everyone I've talked to who started off here, afraid of the new stuff in Drupal 8, who has then actually tried to build something with Drupal 8,

00:38:17,790 --> 00:38:26,630
has actually tried to build a module, import a module with Drupal 8, they love it.

00:38:26,859 --> 00:38:32,700
They don't want to go back.

00:38:32,700 --> 00:38:39,700
Drupal 8 is much more pleasant to work with, both from a user standpoint and from a developer standpoint.

00:38:39,960 --> 00:38:42,190
Before I came here, I was at Sunshine PHP.

00:38:42,190 --> 00:38:47,030
It's a PHP conference in Miami, and I gave a talk on developing for Drupal 8.

00:38:47,030 --> 00:38:55,190
After my talk, Ryan Weaver, who is the documentation lead for Symfony, he's a hardcore Symfony guy, came up to me and said, 

00:38:55,360 --> 00:38:59,799
"This sounds so good, I want to try using Drupal as a straight-up framework."

00:38:59,800 --> 00:39:04,260
This is a Symfony developer who wants to try using Drupal as a framework instead of Symfony.

00:39:04,500 --> 00:39:07,660
That's what this means.

00:39:07,660 --> 00:39:14,349
That's how far we've come. We have got things like the Drupal Console.

00:39:14,349 --> 00:39:17,490
There was a session yesterday. Who was at that session?

00:39:17,490 --> 00:39:27,210
Yeah. It's amazing the opportunities here.

00:39:27,559 --> 00:39:35,579
This is built on the Symfony Console, which is, again, third-party components that do a job well, better than we could do ourselves.

00:39:35,720 --> 00:39:39,960
Those code generations help ease module development.

00:39:39,970 --> 00:39:45,210
We can let you introspect your own system.

00:39:45,210 --> 00:39:52,150
It now ties in as of about two weeks ago to the Symfony Profiler, so you can get a lot more information about your Drupal site and debug it just from the command line.

00:39:52,360 --> 00:39:54,600
What made this possible?

00:39:54,609 --> 00:39:59,510
There's something like 20, 25 people who have written code for this system at some point.

00:39:59,510 --> 00:40:06,510
Who are the top developers on it? All from Latin America.

00:40:11,420 --> 00:40:18,420
We're not quite done. We still need to close the deal.

00:40:18,559 --> 00:40:20,849
I want to see every one of you at the sprints on Thursday.

00:40:20,849 --> 00:40:24,490
We've got mentors on hand that can point you in the direction where you'd be most helpful in getting this out.

00:40:24,490 --> 00:40:31,950
I also want to see every single person in this room download and test Drupal 8 within the next week.

00:40:33,490 --> 00:40:38,520
Everyone in here no matter what your technical level, you can download and test Drupal 8.

00:40:38,520 --> 00:40:42,260
Find bugs or prove that you can't find bugs, but I doubt that's going to happen.

00:40:42,260 --> 00:40:45,220
Find bugs. Give feedback.

00:40:45,220 --> 00:40:49,059
This is what we want right now. Download Drupal and test it.

00:40:49,059 --> 00:40:53,059
Get involved. This is what we have built.

00:40:53,059 --> 00:40:58,400
This is what we have created. This is what we have done for us.

00:40:58,400 --> 00:41:03,440
Which we do I mean? Who is this we I'm talking about that has made Drupal 8 possible?

00:41:03,440 --> 00:41:07,020
These are the top core contributors from Latin America.

00:41:07,020 --> 00:41:14,020
Can we have a round of applause for them?

00:41:19,119 --> 00:41:26,119
Who is we? We are DrupalCon Bogota.

00:41:32,150 --> 00:41:47,930
We are DrupalPicchu. We are DrupalCamp Costa Rica, my first Latin American event.

00:41:48,240 --> 00:41:55,240
Gracias ticos.

00:41:55,690 --> 00:42:10,390
We are DrupalCamp Mumbai in India. Drupal South Wellington, New Zealand.

00:42:12,520 --> 00:42:25,940
DrupalCon Amsterdam. DrupalCon Austin.

00:42:27,410 --> 00:42:34,810
Even random PHP conference because a lot of the people on this slide... These are speakers from Sunshine PHP.

00:42:35,160 --> 00:42:41,700
A lot of the people on this slide work on Symfony, work on Guzzle, work on Zend, work on tools we're using.

00:42:41,700 --> 00:42:47,690
These people are Drupal developers, and they have never talked to a Drupaler before.

00:42:47,690 --> 00:42:51,640
That's what collaboration is. That's what Open Source empowers.

00:42:51,640 --> 00:42:58,119
This is what Open Source is about, because now the entire PHP world is our development team.

00:42:58,119 --> 00:43:03,690
The 80% of the web that runs PHP is our development team and in our market.

00:43:03,690 --> 00:43:10,690
How many just code contributors have we had to Drupal 8?

00:43:12,660 --> 00:43:16,590
Still going.

00:43:16,840 --> 00:43:21,700
2600, and it may have gone up in the last few days since I last grabbed this number.

00:43:25,500 --> 00:43:31,630
We are those who are working together. The people in those slides, those are our colleagues.

00:43:31,630 --> 00:43:33,670
Those are our development team.

00:43:33,670 --> 00:43:36,950
I haven't met most of them, but they are my colleagues.

00:43:36,950 --> 00:43:39,970
They are your colleagues. They are our colleagues.

00:43:39,970 --> 00:43:44,049
They are the community that is building this independent future.

00:43:44,049 --> 00:43:51,049
In fact, let me ask: Who in this room has written at least one core patch for Drupal 8 at any point?

00:43:51,190 --> 00:43:53,740
Stand up.

00:43:56,900 --> 00:44:00,460
Hold on. Who has reviewed at least one core patch for Drupal 8?

00:44:00,460 --> 00:44:04,920
Same people, okay.

00:44:04,920 --> 00:44:13,480
Who has at some point in their career--stay standing--posted a module or a patch for a module or reviewed a patch for a module?

00:44:13,820 --> 00:44:17,380
There we go.

00:44:17,620 --> 00:44:21,339
Who has at some point worked on documentation, even a small edit?

00:44:21,339 --> 00:44:27,569
Who has helped someone out in IRC, on stack overflow, on stack exchange in the Drupal forum?

00:44:27,569 --> 00:44:29,470
Stand up.

00:44:29,470 --> 00:44:36,470
Who has answered someone's question in person at any point in their career?

00:44:40,630 --> 00:44:46,319
Who has built something with Drupal for yourself or for anyone else?

00:44:46,319 --> 00:44:53,319
This is the Drupal community. Now you can applaud.

00:45:01,240 --> 00:45:11,160
Drupal is a platform for the independent. Drupal is our answer to the future of the web that we refuse to let be owned by large corporations,

00:45:11,320 --> 00:45:14,200
that we refuse to let be centralized out of our hands.

00:45:14,210 --> 00:45:20,630
Drupal and Drupal 8 are us saying we will own our future.

00:45:20,840 --> 00:45:25,520
We will build the best tools we can, and they will be available for everyone.

00:45:25,530 --> 00:45:30,859
All 7 billion people in the world have the right to own their own future on the web.

00:45:30,859 --> 00:45:37,859
That is what Drupal is about, by all of us saying this belongs to everybody.

00:45:39,599 --> 00:45:46,599
Drupal 8 is going to kick ass because we're building it together.

00:45:46,599 --> 00:45:48,599
Gracias.

00:46:03,060 --> 00:46:06,799
I'm not sure if we have time for questions. I hope so.

00:46:06,799 --> 00:46:10,459
There's a microphone somewhere, I think.

00:46:10,660 --> 00:46:12,660
Anybody?

00:46:15,820 --> 00:46:19,820
Come grab it and pass it around.

00:46:44,900 --> 00:47:05,700
-Okay, so you talked about accessibility. Is there any API so we can contribute or we can work on those accessibility advantages that Drupal gives us?

00:47:05,960 --> 00:47:12,420
-Yes, a lot of it is automatic. A lot of it is just using good semantic mark-up and adding in additional attributes.

00:47:12,580 --> 00:47:16,760
A lot of that is just in default templates or in the default logic that builds templates.

00:47:17,040 --> 00:47:21,760
The audio support, a lot of that's automatic, but there is a JavaScript API.

00:47:21,940 --> 00:47:31,260
If you're in a browser that supports it, in your JavaScript, say, "Say this string," and the browser will just start saying that string.

00:47:31,490 --> 00:47:38,490
What you want to do with that? The sky's the limit.

00:47:53,620 --> 00:47:55,620
It's not up here today.

00:47:59,100 --> 00:48:03,620
Okay, this is a live translation, folks.

00:48:03,620 --> 00:48:26,760
-[Spanish]

00:48:30,140 --> 00:48:36,460
-The question is, if we use Bootstrap or any framework for the responsive part of Drupal 8,

00:48:38,280 --> 00:48:45,280
if so or if there is some kind of framework, what kind of classes can we use to make it responsive?

00:48:45,930 --> 00:48:50,099
-Whatever you want.

00:48:50,099 --> 00:48:55,880
-If we use Bootstrap. We need to [inaudible] it in our team.

00:48:55,880 --> 00:48:59,690
-The responsiveness of an overall theme is the responsibility of the theme.

00:48:59,690 --> 00:49:03,930
If you're using Bootstrap for your theme, then that will be controlled by Bootstrap.

00:49:03,930 --> 00:49:08,750
What Drupal 8 has done is all the individual components, the form elements, the menu, and so forth.

00:49:08,750 --> 00:49:11,359
Those are built in a responsive fashion.

00:49:11,359 --> 00:49:15,910
Making the whole page responsive? That's your job and your theme.

00:49:15,910 --> 00:49:23,010
Making all the bits and pieces inside it responsive? Drupal has already done that for you, and I don't think Bootstrap would get in the way.

00:49:36,799 --> 00:49:40,380
-I have a question of the multilingual system because...

00:49:40,380 --> 00:49:42,260
-Which system?

00:49:42,260 --> 00:49:49,260
-Multi-language management system because some questions arise when I was seeing the presentation.

00:49:49,490 --> 00:50:11,230
For example, in Europe the European law about VAT tax system has changed, so we not only need different language management, but we will probably need different VAT taxes and everything else, rules for different countries.

00:50:11,400 --> 00:50:18,400
In the European Union only we are 20 different countries with 20 different tax systems.

00:50:20,549 --> 00:50:24,059
-Drupal core itself doesn't deal with currency and taxes.

00:50:24,059 --> 00:50:30,010
However, Ryan, are you here? Ryan Szrama. He's here somewhere.

00:50:30,010 --> 00:50:37,650
Commerce guys who build the Drupal Commerce suite, they are working on a Drupal 8 port, and they are doing it by spinning off pieces of their system.

00:50:37,910 --> 00:50:44,770
Tax is a good example. They are building a stand-alone tax law library that any PHP project can use.

00:50:45,000 --> 00:50:47,279
They're collaborating with some Symfony e-commerce teams on that.

00:50:47,279 --> 00:50:56,099
When you build sites with Drupal Commerce, it will use that library that has all of the crazy, crazy tax law that you need to deal with.

00:50:56,529 --> 00:51:02,069
That means that's a collaboration with other projects, so it's more likely to be up-to-date.

00:51:02,260 --> 00:51:07,020
It's more likely to be accurate because more eyes are working on it and so forth.

00:51:07,080 --> 00:51:10,160
Open Source benefits in general.

00:51:10,160 --> 00:51:16,039
Core only deals with the language itself, not with the law, but that is being worked on for contrib because that's where Commerce lives.

00:51:17,940 --> 00:51:28,480
-That was my worry that we in the European Union will need not only different languages but different behaviors for countries.

00:51:28,880 --> 00:51:34,920
-I think you can detect the language of the user, but when you need to do different legal things, that's a totally different ball of wax.

00:51:35,099 --> 00:51:47,379
Contrib's going to handle that. -Can you explain a bit of the REST API. 

00:51:47,619 --> 00:51:54,619
Is it in use from the front end in Drupal? Like the nice [inaudible]

00:51:54,670 --> 00:52:11,050
-The REST API in Drupal is any entity. You can, by setting the right configurations, expose that as JSON and then put posts, Git, and so forth to it.

00:52:11,279 --> 00:52:16,839
I believe the in-line editing is using it, but I'm not certain of that.

00:52:16,839 --> 00:52:19,170
I know that it changed a couple of times during development.

00:52:19,170 --> 00:52:23,510
I'm not quite sure where it landed at the moment.

00:52:23,560 --> 00:52:26,500
I think so. I'm not going to promise that, but I think it's using...

00:52:26,500 --> 00:52:29,660
No, it's not, because REST is a separate module.

00:52:29,660 --> 00:52:34,630
It's doing something parallel to it, which is fine because the system can support that.

00:52:34,630 --> 00:52:39,559
I'm not quite sure of the details under the hood for it.

00:52:39,559 --> 00:52:46,559
-Is it easy to add [inaudible] or things like that to the REST API?

00:52:47,799 --> 00:52:53,859
-[inaudible] is already being worked on in contrib, and I think the module is there already. I haven't tried it, but, yes [inaudible] is absolutely something we want to exist.

00:52:53,940 --> 00:52:56,280
It's going to be in contrib, but work is already mostly there.

00:52:59,780 --> 00:53:04,280
-Hello, I'm kind of new in Drupal, so...

00:53:04,480 --> 00:53:10,460
-Welcome. -I'm a developer, and I'm trying Drupal 7.

00:53:10,640 --> 00:53:15,020
For me, the hardest part is the module dependency.

00:53:15,020 --> 00:53:20,640
For example, when I try to install a module, I have to look at the Drupal site. It's a little bit hard.

00:53:20,900 --> 00:53:30,700
I was expecting something like maybe you declare a dependency in your module and automatically the build can download the dependency for you.

00:53:30,700 --> 00:53:33,740
Do you have something like that in Drupal 8?

00:53:33,740 --> 00:53:42,980
-If you use Drush to install modules from the command line, I believe it does that for you already in Drupal 7, and it will still do that in Drupal 8.

00:53:47,260 --> 00:54:01,000
-Hello, now we have Drupal 8 beta 6, we can start applying it with new projects. Is this the time or not the time?

00:54:01,180 --> 00:54:08,760
-There are people building production sites in Drupal 6... in Drupal 8. I hope not Drupal 6. With Drupal 8.

00:54:10,470 --> 00:54:15,240
My recommendation: Wait for beta-to-beta upgrade support.

00:54:15,240 --> 00:54:18,319
Dries was talking about that yesterday. That's not quite there yet.

00:54:18,319 --> 00:54:24,180
I would wait for that and then, if you want to be aggressive, you want to be experimental, start building stuff with betas, 

00:54:24,180 --> 00:54:30,760
but be aware that something may be a bit bumpy as you try and upgrade it.

00:54:30,760 --> 00:54:33,299
The release candidate is when I'd really start looking at it in earnest,

00:54:33,299 --> 00:54:36,200
once the release candidate is out or is about to come out.

00:54:36,200 --> 00:54:44,120
If you have a smaller site that is not going to be as dependent on contrib, try it.

00:54:44,320 --> 00:54:45,900
See what happens.

00:54:45,900 --> 00:54:49,730
You probably can pull it off then. -It's a small site.

00:54:49,730 --> 00:54:55,089
I think we dealt with the client. This is a new one, system, advertized to the client.

00:54:55,089 --> 00:54:58,450
-I'm sorry?

00:54:58,450 --> 00:55:04,150
-We need to tell to the client we are using a beta.

00:55:04,150 --> 00:55:07,890
-Yeah. Be honest with your clients, absolutely.

00:55:08,060 --> 00:55:14,620
When Drupal 7 came out, at Palantir we built a few Drupal 7 sites in beta and release candidates.

00:55:14,840 --> 00:55:20,359
There were some bumpy pieces to it, some contrib that wasn't there or contrib that had API breaks after that.

00:55:20,359 --> 00:55:25,799
They were alpha contribs, but it worked and we were very honest with the client about that.

00:55:25,799 --> 00:55:29,910
When in doubt, be honest.

00:55:29,910 --> 00:55:31,740
Good advice. -Thanks.

00:55:31,740 --> 00:55:32,360

YouTube URL: https://www.youtube.com/watch?v=-lLILaIZr44


