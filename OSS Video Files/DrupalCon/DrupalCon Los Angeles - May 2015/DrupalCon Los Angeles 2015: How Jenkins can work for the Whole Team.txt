Title: DrupalCon Los Angeles 2015: How Jenkins can work for the Whole Team
Publication date: 2015-05-13
Playlist: DrupalCon Los Angeles - May 2015
Description: 
	On our team this used to be a common scenario:

Developer: can you do a git pull on dev
SysAdmin: which site?
Developer: oh, example.com
SysAdmin: ok, done
… 30 minutes later …
Developer: ugh, sorry to bug you again…
SysAdmin: AFK
Developer: I need another git pull
SysAdmin: AFK
Developer: ok maybe tomorrow

Enter Jenkins.

Jenkins doesn’t care if the SysAdmin wants nothing to do with the Developers anymore. All deployments are a piece of cake that anyone on the team can handle.

In our setup now we have Jenkins handling a number of tasks. For us it will:

watch repositories for new commits and trigger builds.
use different scripts for different types of builds or tasks.
roll back a build to a previous state upon an error.
run tasks for automated testing using Behat and Saucelabs.
provide a nice interface for monitoring build status and history.
allow for granular permissions for different team members and tasks.
send optional messages upon success or failure of builds to email or HipChat rooms.
regularly run a custom script to convert received emails into support tickets.
All in all our team has benefited greatly from having Jenkins as part of our workflow.

In this presentation I will make the case for SysAdmins to give up a little control so that their team can help themselves when it comes to these sorts of tasks. I will show the various pieces of Jenkins that we use along with some of the external components we utilize in our workflows. I’ll also show how Jenkins can be extended using freely available plugins for other integrations.
Captions: 
	00:00:00,000 --> 00:00:07,220
I guess we can get started it looks like

00:00:02,090 --> 00:00:07,220
the last few people are wandering in

00:00:10,550 --> 00:00:18,990
okay everybody in the back can hear me

00:00:14,160 --> 00:00:20,820
from here yeah okay all right this is

00:00:18,990 --> 00:00:24,600
how Jenkins can work for the whole team

00:00:20,820 --> 00:00:28,890
my name is Tommy Keswick from the local

00:00:24,600 --> 00:00:34,590
Los Angeles Drupal community ooh see

00:00:28,890 --> 00:00:36,180
some friendly la faces here so yeah

00:00:34,590 --> 00:00:40,770
before we get started let me pull the

00:00:36,180 --> 00:00:43,590
crowd a little bit how many of you have

00:00:40,770 --> 00:00:48,020
heard of Jenkins oh wow okay how many of

00:00:43,590 --> 00:00:48,020
you are using it how many of you are

00:00:48,829 --> 00:00:52,949
administers of it and how many of you

00:00:50,730 --> 00:00:55,230
are I'll get administers of it okay good

00:00:52,949 --> 00:01:02,789
how many of you are just kind of a user

00:00:55,230 --> 00:01:08,070
of it on your team okay good all right

00:01:02,789 --> 00:01:10,320
yeah this is what I want to cover so

00:01:08,070 --> 00:01:13,830
what we're gonna go over today is what

00:01:10,320 --> 00:01:16,200
Jenkins is why you might consider using

00:01:13,830 --> 00:01:19,170
it we're gonna look at some of the

00:01:16,200 --> 00:01:20,820
project configuration screens of what

00:01:19,170 --> 00:01:23,850
you can how you can configure some of it

00:01:20,820 --> 00:01:25,140
we're gonna look at what it's like when

00:01:23,850 --> 00:01:27,720
you're running a build in Jenkins

00:01:25,140 --> 00:01:29,460
through like some code commits and then

00:01:27,720 --> 00:01:32,340
what happens in the interface and

00:01:29,460 --> 00:01:35,130
whatnot and then whether whether it's

00:01:32,340 --> 00:01:37,409
good or bad failures and successes and

00:01:35,130 --> 00:01:40,200
we're gonna look at how easy it can be

00:01:37,409 --> 00:01:43,590
to extend Jenkins and then what we're

00:01:40,200 --> 00:01:46,950
not going to cover are installing

00:01:43,590 --> 00:01:49,350
Jenkins scripting builds and deployments

00:01:46,950 --> 00:01:51,659
and reading tests so if you're here for

00:01:49,350 --> 00:01:55,110
that I do not mind if you get up and

00:01:51,659 --> 00:01:56,250
leave because this is more higher level

00:01:55,110 --> 00:01:58,110
stuff that you don't you're not going to

00:01:56,250 --> 00:02:00,420
get into the the real guts of it this is

00:01:58,110 --> 00:02:06,090
more like how you can use it and what

00:02:00,420 --> 00:02:08,250
its gonna do for you all right a little

00:02:06,090 --> 00:02:10,679
bit about me I am a developer and

00:02:08,250 --> 00:02:13,739
trainer at the Cherry Hill company we're

00:02:10,679 --> 00:02:15,480
a local Los Angeles firm

00:02:13,739 --> 00:02:18,150
my background is in libraries I'm a

00:02:15,480 --> 00:02:20,430
trained librarian but I've become a web

00:02:18,150 --> 00:02:22,760
developer over the years and I'm also an

00:02:20,430 --> 00:02:25,560
organizer in the LA Drupal community

00:02:22,760 --> 00:02:27,329
also a an individual member of the

00:02:25,560 --> 00:02:30,569
Drupal Association which you all should

00:02:27,329 --> 00:02:34,200
be as well the Cherry Hill company we've

00:02:30,569 --> 00:02:35,909
been using Drupal since 2005 and we

00:02:34,200 --> 00:02:38,750
really like to use open source tools to

00:02:35,909 --> 00:02:42,180
help libraries and other nonprofits and

00:02:38,750 --> 00:02:43,590
educational institutions we're a

00:02:42,180 --> 00:02:47,940
supporting partner or partner of the

00:02:43,590 --> 00:02:53,370
tribble Association okay

00:02:47,940 --> 00:02:56,310
so what is Jenkins Jenkins is is

00:02:53,370 --> 00:02:58,349
primarily known as a continuous

00:02:56,310 --> 00:03:01,349
integration server and so what that

00:02:58,349 --> 00:03:04,470
means continuous integration is really

00:03:01,349 --> 00:03:06,810
the the practice of building and testing

00:03:04,470 --> 00:03:10,859
your code after every commit or change

00:03:06,810 --> 00:03:12,780
that you make to it so it it'll build

00:03:10,859 --> 00:03:15,450
the site or the project with the new

00:03:12,780 --> 00:03:16,500
code immediately after you do every

00:03:15,450 --> 00:03:19,769
change to make sure it's always working

00:03:16,500 --> 00:03:23,010
but what Jenkins also can do it's also

00:03:19,769 --> 00:03:27,389
sort of a triggering mechanism so it can

00:03:23,010 --> 00:03:31,919
run tasks at certain times or after

00:03:27,389 --> 00:03:33,810
certain other events happen and so you

00:03:31,919 --> 00:03:35,129
can you can run scripts or builds they

00:03:33,810 --> 00:03:38,040
call them builds a lot of time in

00:03:35,129 --> 00:03:40,590
Jenkins so you can chain a bunch of

00:03:38,040 --> 00:03:42,120
things together it's also a great

00:03:40,590 --> 00:03:45,599
interface for managing all these

00:03:42,120 --> 00:03:47,669
projects so when you have your builds or

00:03:45,599 --> 00:03:49,590
your scripts that you you need to manage

00:03:47,669 --> 00:03:51,419
and you have to set them up to run after

00:03:49,590 --> 00:03:53,780
each other and whatnot it provides this

00:03:51,419 --> 00:03:56,489
interface that makes it really easy and

00:03:53,780 --> 00:03:59,040
also I think of it as kind of a message

00:03:56,489 --> 00:04:02,310
aggregator too because it can collect

00:03:59,040 --> 00:04:04,019
all the the outputs of your scripts and

00:04:02,310 --> 00:04:05,609
it can react to them and kind of

00:04:04,019 --> 00:04:07,980
consolidates all the messaging behind

00:04:05,609 --> 00:04:09,540
this stuff for you and you can get your

00:04:07,980 --> 00:04:12,989
notifications through many different

00:04:09,540 --> 00:04:18,329
means you don't have to be watching the

00:04:12,989 --> 00:04:21,340
terminal or anything like that okay and

00:04:18,329 --> 00:04:23,919
so why why would you use Jenkins

00:04:21,340 --> 00:04:27,460
I think the number one reason is because

00:04:23,919 --> 00:04:29,889
you can empower your team members before

00:04:27,460 --> 00:04:31,210
for the sysadmin is out there you might

00:04:29,889 --> 00:04:35,350
want to offload some of your work

00:04:31,210 --> 00:04:36,610
it'll mean fewer bottlenecks for the

00:04:35,350 --> 00:04:39,130
developers to get their work done on

00:04:36,610 --> 00:04:41,440
their own they won't have to they could

00:04:39,130 --> 00:04:43,720
well they can go and find the issues

00:04:41,440 --> 00:04:45,520
with their code if a build fails they

00:04:43,720 --> 00:04:48,040
can potentially go find the issues in

00:04:45,520 --> 00:04:49,690
their code by themselves they don't need

00:04:48,040 --> 00:04:51,550
to pester you about what what might have

00:04:49,690 --> 00:04:54,040
happened on the server they can look at

00:04:51,550 --> 00:04:58,330
it so for an example of that would be

00:04:54,040 --> 00:05:00,970
something like if you have an automatic

00:04:58,330 --> 00:05:04,419
build of your dev server after every

00:05:00,970 --> 00:05:07,330
commit and the server say it's a it

00:05:04,419 --> 00:05:10,060
fails you can report the server report a

00:05:07,330 --> 00:05:13,690
failure the developer can go in to the

00:05:10,060 --> 00:05:16,030
Jenkins interface and see what happened

00:05:13,690 --> 00:05:17,620
like they can see all of the the steps

00:05:16,030 --> 00:05:18,850
that went through the build and find

00:05:17,620 --> 00:05:22,210
where the failure was and that might

00:05:18,850 --> 00:05:23,530
clue them in to what went wrong and they

00:05:22,210 --> 00:05:25,860
can fix it themselves without bothering

00:05:23,530 --> 00:05:28,530
anybody else

00:05:25,860 --> 00:05:30,669
another thing it'll do is it will reduce

00:05:28,530 --> 00:05:32,560
manual processes and workloads that

00:05:30,669 --> 00:05:36,820
you've got going on for what happens

00:05:32,560 --> 00:05:39,550
during your builds so you can do things

00:05:36,820 --> 00:05:42,310
like deploy code to your dev stage and

00:05:39,550 --> 00:05:44,889
production servers automatically based

00:05:42,310 --> 00:05:47,229
on certain events or it can be as simple

00:05:44,889 --> 00:05:52,990
as just a button push you know and then

00:05:47,229 --> 00:05:55,419
in an interface so for example you can

00:05:52,990 --> 00:05:57,039
have something like your development

00:05:55,419 --> 00:06:00,070
server can build on every commit

00:05:57,039 --> 00:06:02,139
it'll just use the newest code spin it

00:06:00,070 --> 00:06:04,360
up on your development server you could

00:06:02,139 --> 00:06:05,440
also have something like your staging

00:06:04,360 --> 00:06:08,680
and production servers could

00:06:05,440 --> 00:06:10,450
automatically build after you have some

00:06:08,680 --> 00:06:12,310
tests passing on the dev build so if

00:06:10,450 --> 00:06:13,810
they pass you could set some other

00:06:12,310 --> 00:06:16,330
server to build automatically based on

00:06:13,810 --> 00:06:19,450
that or if the test is fail or something

00:06:16,330 --> 00:06:21,910
like that you can have the job that

00:06:19,450 --> 00:06:24,610
would normally allow production to be

00:06:21,910 --> 00:06:26,800
built to be locked down and not able to

00:06:24,610 --> 00:06:29,310
build because you know that the build is

00:06:26,800 --> 00:06:29,310
not passing

00:06:29,999 --> 00:06:36,539
and so because of a lot of this stuff

00:06:34,259 --> 00:06:39,269
broken builds are less cause for an

00:06:36,539 --> 00:06:41,939
alarm because depending on how you're

00:06:39,269 --> 00:06:49,110
scripting these builds you can integrate

00:06:41,939 --> 00:06:50,639
rollbacks into your build process so for

00:06:49,110 --> 00:06:53,939
example like if something is broken in

00:06:50,639 --> 00:06:56,189
the build what the way we have it set up

00:06:53,939 --> 00:06:59,849
I'll show this how it kind of works in a

00:06:56,189 --> 00:07:03,029
little bit but our build it basically

00:06:59,849 --> 00:07:05,069
works through Capistrano scripting and

00:07:03,029 --> 00:07:06,449
so it makes some sim links and it'll

00:07:05,069 --> 00:07:08,189
basically just point to the working sim

00:07:06,449 --> 00:07:09,269
link if something's broken it'll point

00:07:08,189 --> 00:07:11,279
back to the one that was working before

00:07:09,269 --> 00:07:13,889
and we'll use a copy of the database

00:07:11,279 --> 00:07:16,099
that was working before and so you don't

00:07:13,889 --> 00:07:19,799
ever have any worry that the server is

00:07:16,099 --> 00:07:22,229
down and broken because your site rolled

00:07:19,799 --> 00:07:25,259
back because it knew it failed in new

00:07:22,229 --> 00:07:29,099
the building failed and this one also is

00:07:25,259 --> 00:07:32,939
applicable to developers can find their

00:07:29,099 --> 00:07:34,110
own problems and so the whole team

00:07:32,939 --> 00:07:38,579
doesn't need to care about a broken

00:07:34,110 --> 00:07:40,800
build necessarily and the other thing

00:07:38,579 --> 00:07:42,449
that Jenkins can do which is I think

00:07:40,800 --> 00:07:45,139
actually a great feature of it is that

00:07:42,449 --> 00:07:48,389
things that are kind of not related to

00:07:45,139 --> 00:07:51,079
building a site and deploying a site can

00:07:48,389 --> 00:07:54,209
also be added and scripted in the system

00:07:51,079 --> 00:07:58,799
so some things like like I mentioned

00:07:54,209 --> 00:08:00,239
tests can be run with Jenkins they can

00:07:58,799 --> 00:08:02,579
be one of the one of the builds that

00:08:00,239 --> 00:08:04,469
happens so if you have a server that

00:08:02,579 --> 00:08:07,019
builds and you've got your site up you

00:08:04,469 --> 00:08:09,299
can then have a test suite triggered

00:08:07,019 --> 00:08:12,839
because it knows the build is done and

00:08:09,299 --> 00:08:15,319
has passed you can run a test script

00:08:12,839 --> 00:08:17,699
against that you can also do things like

00:08:15,319 --> 00:08:20,519
have a single push button

00:08:17,699 --> 00:08:22,499
- maybe migrate your files and your

00:08:20,519 --> 00:08:25,139
database from your production server

00:08:22,499 --> 00:08:27,659
down to a staging server or dev server

00:08:25,139 --> 00:08:30,959
just like a click of a button no command

00:08:27,659 --> 00:08:35,550
line stuff needed we have something in

00:08:30,959 --> 00:08:38,009
there using just some scripting with an

00:08:35,550 --> 00:08:41,009
API that updates some documentation

00:08:38,009 --> 00:08:42,610
based on what's in a commit message for

00:08:41,009 --> 00:08:44,500
some things that we have so

00:08:42,610 --> 00:08:46,560
if we say we want to keep a record of

00:08:44,500 --> 00:08:50,170
every time we apply a security update

00:08:46,560 --> 00:08:52,269
we're looking for a particular string in

00:08:50,170 --> 00:08:54,880
a commit message and it'll put a line of

00:08:52,269 --> 00:08:56,529
that commit and about it into some

00:08:54,880 --> 00:08:58,950
documentation automatically so we don't

00:08:56,529 --> 00:09:01,269
have to manually stay on top of them

00:08:58,950 --> 00:09:05,040
another script we wrote that it's pretty

00:09:01,269 --> 00:09:07,089
handy as we can monitor a mailbox and

00:09:05,040 --> 00:09:09,339
convert messages that come to that

00:09:07,089 --> 00:09:11,860
mailbox in two tickets in our ticketing

00:09:09,339 --> 00:09:13,810
system and that just kind of is a it's a

00:09:11,860 --> 00:09:15,760
task in Jenkins that runs periodically

00:09:13,810 --> 00:09:23,050
every half an hour or so checking for

00:09:15,760 --> 00:09:25,390
new support emails all right yeah let's

00:09:23,050 --> 00:09:27,810
look at some some examples of some of

00:09:25,390 --> 00:09:27,810
the interface

00:09:34,980 --> 00:09:41,260
okay here is an example of what the

00:09:38,709 --> 00:09:44,620
homescreen in Jenkins can look like you

00:09:41,260 --> 00:09:46,300
can download different themes for

00:09:44,620 --> 00:09:47,949
Jenkins - so it can kind of look however

00:09:46,300 --> 00:09:50,199
you might want it to people have

00:09:47,949 --> 00:09:52,990
developed at different different kind of

00:09:50,199 --> 00:09:54,550
themes for it so some of them just my

00:09:52,990 --> 00:09:58,139
mouse over here you guys see this I

00:09:54,550 --> 00:10:02,730
don't have a laser pointer so okay cool

00:09:58,139 --> 00:10:02,730
my mouse I don't know if I can do that

00:10:03,240 --> 00:10:09,490
it's it this is a screenshot so I don't

00:10:06,490 --> 00:10:13,630
know if I can actually do that I wasn't

00:10:09,490 --> 00:10:17,790
gonna try to do live demos somebody can

00:10:13,630 --> 00:10:20,470
follow me around there we go let's see

00:10:17,790 --> 00:10:23,079
so yeah this is basically a list of the

00:10:20,470 --> 00:10:25,000
way a homescreen can look you've got a

00:10:23,079 --> 00:10:26,620
list of folders here that contain tasks

00:10:25,000 --> 00:10:29,230
you've got over here some configuration

00:10:26,620 --> 00:10:30,940
options you can manage the users that

00:10:29,230 --> 00:10:32,709
are in your Jenkins system you can

00:10:30,940 --> 00:10:34,240
manage Jenkins itself with a bunch of

00:10:32,709 --> 00:10:37,149
the configuration options there under

00:10:34,240 --> 00:10:38,260
here over here in the sidebar this is

00:10:37,149 --> 00:10:40,600
where the action happens when you're

00:10:38,260 --> 00:10:42,630
running builds you can see it in real

00:10:40,600 --> 00:10:42,630
time

00:10:42,990 --> 00:10:48,730
yeah and so this is what would it look

00:10:47,350 --> 00:10:51,730
like if we clicked into that tasks

00:10:48,730 --> 00:10:53,949
folder so when you have your list of

00:10:51,730 --> 00:10:55,360
builds or your tasks for Jenkins they're

00:10:53,949 --> 00:10:56,709
they're listed out like this and we've

00:10:55,360 --> 00:10:59,170
got some really informational columns

00:10:56,709 --> 00:11:01,360
here all these circles here are blue

00:10:59,170 --> 00:11:04,690
meaning the latest build has been

00:11:01,360 --> 00:11:06,790
passing you've got a weather column

00:11:04,690 --> 00:11:08,889
which is interesting because when there

00:11:06,790 --> 00:11:10,180
are clouds that means sometime in the

00:11:08,889 --> 00:11:12,339
recent history there was something that

00:11:10,180 --> 00:11:13,680
went wrong but if it's all sunny that

00:11:12,339 --> 00:11:15,760
means it's been good for a long time

00:11:13,680 --> 00:11:17,980
you've got your name you've got your

00:11:15,760 --> 00:11:20,139
last success time and the build number

00:11:17,980 --> 00:11:21,279
with a link to the the status of that

00:11:20,139 --> 00:11:23,980
particular build you've got your last

00:11:21,279 --> 00:11:25,990
failure duration and this button here is

00:11:23,980 --> 00:11:30,639
a build Now button if you need to run it

00:11:25,990 --> 00:11:33,190
right then and then this is kind of hard

00:11:30,639 --> 00:11:35,620
to to show but when you hover over a job

00:11:33,190 --> 00:11:37,899
you get a little arrow with a drop-down

00:11:35,620 --> 00:11:39,970
that's a Quick Links menu here I find it

00:11:37,899 --> 00:11:43,569
really handy for getting into the

00:11:39,970 --> 00:11:46,620
configure section of a of a job but you

00:11:43,569 --> 00:11:46,620
can do all these other things on it

00:11:47,820 --> 00:11:52,959
so when we go on this is the landing

00:11:51,070 --> 00:11:55,750
page of a job it's also like the Status

00:11:52,959 --> 00:11:57,190
page so you can see here the menu now

00:11:55,750 --> 00:11:58,589
contains all the items that were in that

00:11:57,190 --> 00:12:02,380
Quick Links menu

00:11:58,589 --> 00:12:05,740
this actually is down here the the build

00:12:02,380 --> 00:12:07,180
history is all the recent stuff or

00:12:05,740 --> 00:12:09,760
author all the recent builds of this

00:12:07,180 --> 00:12:10,510
project and their status with links

00:12:09,760 --> 00:12:13,810
directly to them

00:12:10,510 --> 00:12:16,450
we've got downstream projects and what a

00:12:13,810 --> 00:12:18,279
downstream project is I've talked a

00:12:16,450 --> 00:12:21,100
little bit about how you can kind of

00:12:18,279 --> 00:12:23,050
chain tasks and builds to each other

00:12:21,100 --> 00:12:26,320
these are the projects that are

00:12:23,050 --> 00:12:28,000
triggered to run after this build so

00:12:26,320 --> 00:12:31,060
we've got one that does that run some

00:12:28,000 --> 00:12:32,920
b-hat tests after this build and these

00:12:31,060 --> 00:12:34,029
links here these are the ones that are

00:12:32,920 --> 00:12:36,160
permanent links I don't really have a

00:12:34,029 --> 00:12:37,899
way to show what the URLs are but the

00:12:36,160 --> 00:12:41,190
way they work is they don't have a build

00:12:37,899 --> 00:12:43,899
ID in the URL they have something like

00:12:41,190 --> 00:12:45,700
slash last and so it's always gonna be a

00:12:43,899 --> 00:12:46,810
link to the last build and this one's

00:12:45,700 --> 00:12:49,570
always gonna be a link to the last

00:12:46,810 --> 00:12:52,120
stable build and last successful build

00:12:49,570 --> 00:12:53,560
etcetera so you can like share those

00:12:52,120 --> 00:12:57,360
links and people always be able to get

00:12:53,560 --> 00:12:57,360
to the latest stuff that they need to

00:12:59,820 --> 00:13:05,110
okay so now we're actually in the in the

00:13:03,190 --> 00:13:06,670
configuration screen I'm gonna go

00:13:05,110 --> 00:13:07,839
through kind of like if I was scrolling

00:13:06,670 --> 00:13:11,410
through it to show off some of the stuff

00:13:07,839 --> 00:13:12,610
that you can get in doing this obviously

00:13:11,410 --> 00:13:15,820
there's a project name you can put a

00:13:12,610 --> 00:13:18,339
description in in this set up we have it

00:13:15,820 --> 00:13:23,320
so that Jenkins won't keep records of

00:13:18,339 --> 00:13:25,420
any builds past five just because that's

00:13:23,320 --> 00:13:26,920
gonna kind of clutter up what we're

00:13:25,420 --> 00:13:28,899
keeping in and it doesn't really matter

00:13:26,920 --> 00:13:33,720
what the build status was a hundred

00:13:28,899 --> 00:13:33,720
builds ago so we'll discard the old ones

00:13:35,490 --> 00:13:40,060
we've got pretty granular permissions

00:13:37,600 --> 00:13:43,240
too so we've got all these users in here

00:13:40,060 --> 00:13:45,190
and everybody in this demo system

00:13:43,240 --> 00:13:47,620
actually has all the permissions but say

00:13:45,190 --> 00:13:49,360
you had a member of your team that you

00:13:47,620 --> 00:13:51,670
certainly didn't want to give permission

00:13:49,360 --> 00:13:54,370
to delete a job to you can just easily

00:13:51,670 --> 00:13:56,709
uncheck that you could also not let them

00:13:54,370 --> 00:13:58,329
configure it but maybe only let them run

00:13:56,709 --> 00:14:01,869
the build on the job you can give them

00:13:58,329 --> 00:14:03,850
that that configuration so it can get

00:14:01,869 --> 00:14:06,040
pretty granular it lets you share with

00:14:03,850 --> 00:14:09,339
your team exactly how you need to

00:14:06,040 --> 00:14:11,679
because obviously some users are going

00:14:09,339 --> 00:14:12,100
to be more involved in the system than

00:14:11,679 --> 00:14:15,339
others

00:14:12,100 --> 00:14:16,540
and it allows you to give permissions

00:14:15,339 --> 00:14:17,319
for users to do something that they

00:14:16,540 --> 00:14:19,749
normally wouldn't be able to do

00:14:17,319 --> 00:14:21,910
especially through SSH or on the command

00:14:19,749 --> 00:14:23,619
line but you can give them interface

00:14:21,910 --> 00:14:25,209
permissions to do this stuff and it's

00:14:23,619 --> 00:14:32,139
pretty protected from what they can

00:14:25,209 --> 00:14:35,139
actually do yeah next there is there are

00:14:32,139 --> 00:14:38,319
options for a source code management you

00:14:35,139 --> 00:14:40,420
can see CVS or git or subversion even

00:14:38,319 --> 00:14:42,579
down here are available we're using git

00:14:40,420 --> 00:14:44,290
here that requires a plug-in but I'll

00:14:42,579 --> 00:14:47,439
show towards the end how you can add

00:14:44,290 --> 00:14:49,089
plugins to Jenkins pretty easily and the

00:14:47,439 --> 00:14:50,739
options here are to point to the

00:14:49,089 --> 00:14:53,049
repository under some of the advanced

00:14:50,739 --> 00:14:55,809
stuff we could put in credentials if we

00:14:53,049 --> 00:14:58,209
need to we can specify the branch we

00:14:55,809 --> 00:14:59,619
want to use and there's other more

00:14:58,209 --> 00:15:09,649
complex options if you need to under

00:14:59,619 --> 00:15:12,079
some of these advanced buttons okay

00:15:09,649 --> 00:15:17,839
and the build triggers are they really

00:15:12,079 --> 00:15:20,540
tell Jenkins when to run the build in

00:15:17,839 --> 00:15:22,490
our setup our repository we use

00:15:20,540 --> 00:15:25,249
unfertile for our project management and

00:15:22,490 --> 00:15:28,610
it also has our repositories in it it

00:15:25,249 --> 00:15:33,499
actually we can configure it to ping a

00:15:28,610 --> 00:15:37,279
URL that's a jenkins URL specific to a

00:15:33,499 --> 00:15:41,269
build saying we have a new commit here

00:15:37,279 --> 00:15:43,339
at this in this repository so build now

00:15:41,269 --> 00:15:45,529
so that's really how we're handling our

00:15:43,339 --> 00:15:48,470
triggering of a build is when there's a

00:15:45,529 --> 00:15:51,369
commit to the repository it says so

00:15:48,470 --> 00:15:55,540
jenkins ok build this now we also have

00:15:51,369 --> 00:15:57,529
this pol SCM source code management

00:15:55,540 --> 00:16:01,069
option in there kind of just as a

00:15:57,529 --> 00:16:03,230
fallback so it's going to check the

00:16:01,069 --> 00:16:07,129
repository every hour to see if there

00:16:03,230 --> 00:16:09,079
are any updates to it since the last one

00:16:07,129 --> 00:16:11,300
that jenkins knows about and usually

00:16:09,079 --> 00:16:13,399
that's never gonna do anything because

00:16:11,300 --> 00:16:15,199
of the other setup that we have that

00:16:13,399 --> 00:16:22,519
where it tells jenkins immediately when

00:16:15,199 --> 00:16:26,360
there's new commitment let's see alright

00:16:22,519 --> 00:16:28,879
and there is the build itself so let's

00:16:26,360 --> 00:16:30,439
see down here normally when this is a

00:16:28,879 --> 00:16:32,149
blank project it's not gonna have

00:16:30,439 --> 00:16:34,160
anything here yet and you have to add it

00:16:32,149 --> 00:16:36,949
with this button so there are a lot of

00:16:34,160 --> 00:16:38,809
different options here we're using right

00:16:36,949 --> 00:16:41,149
now the execute shell but you can do any

00:16:38,809 --> 00:16:42,499
of these other things there are our

00:16:41,149 --> 00:16:45,470
plugins that would provide more options

00:16:42,499 --> 00:16:48,470
in this in this drop-down but with the

00:16:45,470 --> 00:16:51,920
execute shell option really this is what

00:16:48,470 --> 00:16:55,629
the build is doing we have it running a

00:16:51,920 --> 00:16:58,189
bash script that has a parameter and so

00:16:55,629 --> 00:17:01,249
this is kind of the meat of what this

00:16:58,189 --> 00:17:04,579
job does it's running this bash script

00:17:01,249 --> 00:17:11,089
this deployed SH script is what handles

00:17:04,579 --> 00:17:13,520
all of the I guess configuration of what

00:17:11,089 --> 00:17:16,100
needs to happen for the deployment of

00:17:13,520 --> 00:17:17,659
the software on the server that's some

00:17:16,100 --> 00:17:21,189
of the stuff I'm not gonna go into but

00:17:17,659 --> 00:17:21,189
kind of what it's what it's doing is

00:17:21,569 --> 00:17:28,600
taking the new code pulling it up making

00:17:25,240 --> 00:17:29,980
a new directory for it grabbing a copy

00:17:28,600 --> 00:17:31,690
of the database and associating and with

00:17:29,980 --> 00:17:34,299
that making sure that Drupal can

00:17:31,690 --> 00:17:36,490
bootstrap and then if it's all good

00:17:34,299 --> 00:17:39,450
it'll change the sim link for the live

00:17:36,490 --> 00:17:43,529
site to point to that directory

00:17:39,450 --> 00:17:46,419
everything else in Jenkins is kind of

00:17:43,529 --> 00:17:50,019
built around what's happening in this

00:17:46,419 --> 00:17:51,240
script so you want your notifications to

00:17:50,019 --> 00:17:53,380
happen because of this you want your

00:17:51,240 --> 00:17:54,669
your telling it where to get the

00:17:53,380 --> 00:18:01,299
resources to do this

00:17:54,669 --> 00:18:04,120
etc and so some of the things you can do

00:18:01,299 --> 00:18:07,059
after the build happens are like

00:18:04,120 --> 00:18:10,059
notifications actually let me scroll

00:18:07,059 --> 00:18:12,010
down here are the options for post build

00:18:10,059 --> 00:18:15,220
actions some of these are provided by

00:18:12,010 --> 00:18:17,769
plugins and some of them are default in

00:18:15,220 --> 00:18:20,289
this particular project we have editable

00:18:17,769 --> 00:18:22,240
email notification being used and

00:18:20,289 --> 00:18:24,250
trigger parameterised builds on other

00:18:22,240 --> 00:18:28,600
projects but you can see there's a lot

00:18:24,250 --> 00:18:30,309
other things going on so for example

00:18:28,600 --> 00:18:33,639
we've got this editable email

00:18:30,309 --> 00:18:35,139
notification where we can choose who is

00:18:33,639 --> 00:18:37,539
going to get the email about what's ever

00:18:35,139 --> 00:18:39,519
happening reply to address subject

00:18:37,539 --> 00:18:42,039
content and you can see that they're all

00:18:39,519 --> 00:18:45,669
variables the variables are actually set

00:18:42,039 --> 00:18:49,029
in the main Jenkins configuration for

00:18:45,669 --> 00:18:50,679
the whole system and so you can say who

00:18:49,029 --> 00:18:52,059
then normal the default recipients are

00:18:50,679 --> 00:18:55,330
gonna be and all that sort of stuff and

00:18:52,059 --> 00:19:00,130
kind of just set it to be generalized

00:18:55,330 --> 00:19:01,480
but per project you can see you could

00:19:00,130 --> 00:19:03,490
you could type text in here you could

00:19:01,480 --> 00:19:08,529
type email addresses you could type new

00:19:03,490 --> 00:19:09,970
subjects some plugins will provide you

00:19:08,529 --> 00:19:10,419
new variables that you can add to this

00:19:09,970 --> 00:19:12,639
stuff

00:19:10,419 --> 00:19:14,139
so you can you can add all sorts of

00:19:12,639 --> 00:19:15,909
stuff there's an attached build log so

00:19:14,139 --> 00:19:17,559
you could actually give it the whole

00:19:15,909 --> 00:19:19,149
console output of this particular build

00:19:17,559 --> 00:19:21,220
and send it in an email to people just

00:19:19,149 --> 00:19:26,529
to make it easier they wouldn't have to

00:19:21,220 --> 00:19:28,809
go to the interface etc and then let's

00:19:26,529 --> 00:19:29,950
see the parameterised build on other

00:19:28,809 --> 00:19:30,980
projects is actually a really powerful

00:19:29,950 --> 00:19:34,100
option

00:19:30,980 --> 00:19:36,470
this is how you can chain events to kind

00:19:34,100 --> 00:19:46,130
of happen in sequence after things

00:19:36,470 --> 00:19:48,230
happen so so what we've done here is we

00:19:46,130 --> 00:19:53,210
have another project in our Jenkins

00:19:48,230 --> 00:19:55,580
setup called demo test B hat in Firefox

00:19:53,210 --> 00:19:58,400
and so we've chosen this I believe it's

00:19:55,580 --> 00:20:00,980
even autocomplete like it'll drop down

00:19:58,400 --> 00:20:02,870
with the other projects that are

00:20:00,980 --> 00:20:05,660
available but you can also do a

00:20:02,870 --> 00:20:07,340
condition so this project is only going

00:20:05,660 --> 00:20:09,620
to run or the build is only going to run

00:20:07,340 --> 00:20:12,169
when the particular build we're

00:20:09,620 --> 00:20:15,710
configuring right now is stable so this

00:20:12,169 --> 00:20:17,630
build fails and is not stable the

00:20:15,710 --> 00:20:19,549
triggered build isn't it's not gonna be

00:20:17,630 --> 00:20:22,480
triggered because the condition isn't

00:20:19,549 --> 00:20:24,290
met and you can also add parameters

00:20:22,480 --> 00:20:27,950
that's what this drop-down they're

00:20:24,290 --> 00:20:30,470
showing here we are passing the git

00:20:27,950 --> 00:20:32,679
commit to it because this project needs

00:20:30,470 --> 00:20:35,120
to get commit to know it to run on and

00:20:32,679 --> 00:20:40,780
but you could pass all kinds of stuff to

00:20:35,120 --> 00:20:46,250
it which makes it pretty powerful okay I

00:20:40,780 --> 00:20:47,630
think yeah that's it okay so now we're

00:20:46,250 --> 00:20:55,460
gonna look at what it's like to actually

00:20:47,630 --> 00:20:57,380
do your work and run a build and this is

00:20:55,460 --> 00:20:57,770
gonna be one where everything goes just

00:20:57,380 --> 00:21:00,919
right

00:20:57,770 --> 00:21:03,650
I've instead of doing a live demo which

00:21:00,919 --> 00:21:05,600
is risky I've recorded a video that has

00:21:03,650 --> 00:21:12,140
no audio so I'm going to talk through it

00:21:05,600 --> 00:21:14,600
and explain what's going on okay so this

00:21:12,140 --> 00:21:17,390
is me working on the command line what

00:21:14,600 --> 00:21:18,980
I'm gonna be doing here is I know in

00:21:17,390 --> 00:21:20,780
this particular site there's a module

00:21:18,980 --> 00:21:25,520
that's out of date so I'm updating the

00:21:20,780 --> 00:21:27,200
module and what's gonna happen after the

00:21:25,520 --> 00:21:29,059
modules updated is that I'll commit the

00:21:27,200 --> 00:21:34,610
code and I'll push it to the repository

00:21:29,059 --> 00:21:36,200
and then we're gonna see how everything

00:21:34,610 --> 00:21:38,559
kind of goes together in the Jenkins

00:21:36,200 --> 00:21:38,559
interface

00:21:38,570 --> 00:21:44,480
so the code has been updated with drush

00:21:41,530 --> 00:21:46,010
I've added the code back to the

00:21:44,480 --> 00:21:47,630
repository and all this stuff I happen

00:21:46,010 --> 00:21:49,430
to be doing this on the command line if

00:21:47,630 --> 00:21:51,590
you're developers don't work like this

00:21:49,430 --> 00:21:55,610
it's however they they normally do their

00:21:51,590 --> 00:21:59,180
work they could be using a GUI in their

00:21:55,610 --> 00:22:00,350
their get with forget software or

00:21:59,180 --> 00:22:01,840
whatever and it's still gonna do the

00:22:00,350 --> 00:22:04,580
same thing this doesn't really matter

00:22:01,840 --> 00:22:06,620
it's just more fun to look at we're

00:22:04,580 --> 00:22:09,170
right here like this okay so we flipped

00:22:06,620 --> 00:22:11,230
over after we've pushed and this is

00:22:09,170 --> 00:22:15,080
what's happening in Jenkins you can see

00:22:11,230 --> 00:22:17,060
down here the build has started and this

00:22:15,080 --> 00:22:18,860
is kind of it live updates itself and

00:22:17,060 --> 00:22:24,110
starts to show you the progress of

00:22:18,860 --> 00:22:28,070
what's happening and so I'm kind of

00:22:24,110 --> 00:22:29,090
forget what I clicked on next but

00:22:28,070 --> 00:22:30,200
there's a lot of things to click on you

00:22:29,090 --> 00:22:32,540
can click on the build and you'll see

00:22:30,200 --> 00:22:34,520
this the the ID number there number 24

00:22:32,540 --> 00:22:35,780
we could click on that I think okay I

00:22:34,520 --> 00:22:37,940
click on the build history which

00:22:35,780 --> 00:22:39,140
actually shows all the builds and

00:22:37,940 --> 00:22:41,540
Jenkins and like what their latest

00:22:39,140 --> 00:22:43,790
statuses have been and so we can see

00:22:41,540 --> 00:22:47,030
this number 24 is in the process of

00:22:43,790 --> 00:22:49,750
building still it shows the history of a

00:22:47,030 --> 00:22:52,220
few of the other projects as well and

00:22:49,750 --> 00:22:54,530
actually some of the stuff doesn't

00:22:52,220 --> 00:22:57,620
refresh always perfectly but you can see

00:22:54,530 --> 00:23:00,590
that this okay I refreshed you can see

00:22:57,620 --> 00:23:03,620
that the the test build started which

00:23:00,590 --> 00:23:06,710
means yeah down here we can see that

00:23:03,620 --> 00:23:09,050
number 24 is stable it says it over here

00:23:06,710 --> 00:23:10,880
and it took 52 seconds for it to run and

00:23:09,050 --> 00:23:13,010
so that automatically triggered this

00:23:10,880 --> 00:23:15,500
test build to run afterwards and that

00:23:13,010 --> 00:23:18,310
one is on build number 14 so that means

00:23:15,500 --> 00:23:21,050
the test builds only run 14 times and

00:23:18,310 --> 00:23:23,840
then it'll finish and we'll see what

00:23:21,050 --> 00:23:26,540
happens yeah this is the successful test

00:23:23,840 --> 00:23:27,740
so everything should just pass I think I

00:23:26,540 --> 00:23:33,110
refresh I get in here so we don't have

00:23:27,740 --> 00:23:36,200
to wait too long oh okay I'm clicking

00:23:33,110 --> 00:23:38,210
into the build page itself so this is

00:23:36,200 --> 00:23:41,690
the details of a build that you can see

00:23:38,210 --> 00:23:43,730
so you can see our that's our get commit

00:23:41,690 --> 00:23:44,060
message up there the change is number

00:23:43,730 --> 00:23:47,060
one

00:23:44,060 --> 00:23:48,410
there's our hash for the get commit so

00:23:47,060 --> 00:23:50,429
it tells us all the details about what

00:23:48,410 --> 00:23:51,840
happened in the building

00:23:50,429 --> 00:23:52,950
different build different types of

00:23:51,840 --> 00:23:54,299
builds have different information on the

00:23:52,950 --> 00:23:56,460
screen but it's a way to kind of see

00:23:54,299 --> 00:23:58,799
what the status is going on and the blue

00:23:56,460 --> 00:24:01,529
ball up here is or it's blue instead of

00:23:58,799 --> 00:24:04,619
red if it was red that would be mean

00:24:01,529 --> 00:24:08,369
something's wrong okay so that's when

00:24:04,619 --> 00:24:10,379
everything goes goes well now the fun

00:24:08,369 --> 00:24:15,119
part is to watch what happens when

00:24:10,379 --> 00:24:17,249
something goes wrong so I've got a

00:24:15,119 --> 00:24:21,119
template dot PHP file here and I am

00:24:17,249 --> 00:24:23,700
going to remove a semicolon that's gonna

00:24:21,119 --> 00:24:26,820
cause stuff to break I've also got a CSS

00:24:23,700 --> 00:24:29,639
file that I added some some code to

00:24:26,820 --> 00:24:32,610
that's going to hide a search box which

00:24:29,639 --> 00:24:34,710
the b-hat tests relies on so when I

00:24:32,610 --> 00:24:38,100
commit that the tests wouldn't pass

00:24:34,710 --> 00:24:41,220
either so I'll go through I'll add this

00:24:38,100 --> 00:24:42,869
broken code to the repository and we're

00:24:41,220 --> 00:24:44,960
gonna push it up and see what's gonna

00:24:42,869 --> 00:24:44,960
happen

00:24:44,990 --> 00:24:50,850
so we'll go through this some of the

00:24:46,889 --> 00:24:55,529
things to to take a look at in this

00:24:50,850 --> 00:25:00,360
build is how the test build isn't going

00:24:55,529 --> 00:25:04,019
to run and how just just a way the way

00:25:00,360 --> 00:25:06,990
things look when they're broken so we

00:25:04,019 --> 00:25:09,210
wait for it to get started when we come

00:25:06,990 --> 00:25:12,240
back over we see it's queued up and then

00:25:09,210 --> 00:25:15,330
it's gonna jump down to the it's being

00:25:12,240 --> 00:25:17,730
executed status you can see the ID

00:25:15,330 --> 00:25:20,580
number incremented by one if we click on

00:25:17,730 --> 00:25:22,379
it we can go to that status page even

00:25:20,580 --> 00:25:24,179
while it's still being built and it'll

00:25:22,379 --> 00:25:27,590
have a progress meter up at the top and

00:25:24,179 --> 00:25:30,480
it'll have a blinking icon instead of a

00:25:27,590 --> 00:25:32,460
solid one but we can also see that it

00:25:30,480 --> 00:25:34,230
already knows about the the git commit

00:25:32,460 --> 00:25:37,289
it knows there's a new commit in there

00:25:34,230 --> 00:25:39,529
and it knows the hash I forget what I

00:25:37,289 --> 00:25:42,059
click next

00:25:39,529 --> 00:25:43,529
but there's other things we can click on

00:25:42,059 --> 00:25:45,749
will eventually look at the console

00:25:43,529 --> 00:25:48,539
output if you go back to the tasks we

00:25:45,749 --> 00:25:51,210
can go see sort of what else is going on

00:25:48,539 --> 00:25:52,950
okay so in between that click the build

00:25:51,210 --> 00:25:56,220
finished and it failed because it's red

00:25:52,950 --> 00:25:57,360
and cloudy so yeah I clicked back to the

00:25:56,220 --> 00:26:00,179
build history of everything and yeah you

00:25:57,360 --> 00:26:01,190
can see down here that everything is

00:26:00,179 --> 00:26:02,660
broken since

00:26:01,190 --> 00:26:05,090
this build so that commits everything

00:26:02,660 --> 00:26:07,250
stop the tests are not gonna run it's

00:26:05,090 --> 00:26:08,510
because just kind of halted in place so

00:26:07,250 --> 00:26:10,220
we kind of have to go figure out what

00:26:08,510 --> 00:26:12,590
went wrong so if we go back into the

00:26:10,220 --> 00:26:15,650
build itself and we go over to the

00:26:12,590 --> 00:26:18,560
console output this is going to be all

00:26:15,650 --> 00:26:19,700
of the output from what would have

00:26:18,560 --> 00:26:21,950
happened on the command line on the

00:26:19,700 --> 00:26:23,270
server that's doing this this takes a

00:26:21,950 --> 00:26:24,410
little bit of training to show your

00:26:23,270 --> 00:26:25,490
developers actually what's happening

00:26:24,410 --> 00:26:27,500
they kind of have to understand what's

00:26:25,490 --> 00:26:29,660
happening in the builds to scroll

00:26:27,500 --> 00:26:31,160
through this and look for the errors but

00:26:29,660 --> 00:26:32,840
once once you teach them a little bit

00:26:31,160 --> 00:26:34,850
they can figure it out pretty quickly so

00:26:32,840 --> 00:26:37,430
what we've got here is it's really the

00:26:34,850 --> 00:26:40,060
Capistrano scripts are doing this it's

00:26:37,430 --> 00:26:43,820
got a lot of --dress stuff going on too

00:26:40,060 --> 00:26:48,170
and eventually you'll get down to the

00:26:43,820 --> 00:26:49,190
part where you see errors and that's

00:26:48,170 --> 00:26:52,550
what you look for because that's gonna

00:26:49,190 --> 00:26:54,890
clue you in to what to go fix and so

00:26:52,550 --> 00:26:58,070
right here we can see I'll highlight it

00:26:54,890 --> 00:27:02,450
that the template dot PHP file on line

00:26:58,070 --> 00:27:04,610
185 has a PHP parse error so that's

00:27:02,450 --> 00:27:05,810
gonna clue a developer and say oh let me

00:27:04,610 --> 00:27:08,000
go check out that file I've got

00:27:05,810 --> 00:27:09,650
something wrong there and they won't

00:27:08,000 --> 00:27:11,150
have to have talked to us this admin to

00:27:09,650 --> 00:27:12,530
be like what happened on the server that

00:27:11,150 --> 00:27:14,960
the builds broke and I don't even know

00:27:12,530 --> 00:27:17,180
where to start to debug this the other

00:27:14,960 --> 00:27:19,760
thing they can look at is down here at

00:27:17,180 --> 00:27:22,310
the build step execute shell is marked

00:27:19,760 --> 00:27:24,170
as a failure if you remember that's

00:27:22,310 --> 00:27:25,220
that's that meet part of the build that

00:27:24,170 --> 00:27:27,710
I talked about that's running the script

00:27:25,220 --> 00:27:32,240
and so the the whole build stopped right

00:27:27,710 --> 00:27:34,070
there that part of the script so we go

00:27:32,240 --> 00:27:37,340
back and we fix the semicolon issue

00:27:34,070 --> 00:27:41,900
poses we figure out where it's happening

00:27:37,340 --> 00:27:43,880
and fix it so then we have to commit the

00:27:41,900 --> 00:27:47,120
code again it'll go through their whole

00:27:43,880 --> 00:27:50,690
process I only fixed the I only fixed

00:27:47,120 --> 00:27:54,470
the semicolon fix the CSS so this time

00:27:50,690 --> 00:27:56,870
the build is going to the bill that self

00:27:54,470 --> 00:27:59,420
is going to pass and then the test is

00:27:56,870 --> 00:28:01,550
going to be triggered but the test is

00:27:59,420 --> 00:28:04,060
going to fail and so we'll see what

00:28:01,550 --> 00:28:04,060
happens after that

00:28:10,140 --> 00:28:14,760
and yeah so it's already queued up I'm

00:28:13,320 --> 00:28:16,020
pretty sure I refresh a few times you

00:28:14,760 --> 00:28:17,780
know have to watch all this happening

00:28:16,020 --> 00:28:20,580
again

00:28:17,780 --> 00:28:26,190
and so yeah you can see the last status

00:28:20,580 --> 00:28:27,660
it still shows red and cloudy but

00:28:26,190 --> 00:28:33,780
eventually it'll pass after this one's

00:28:27,660 --> 00:28:36,600
done I think I refreshed pretty pretty

00:28:33,780 --> 00:28:38,400
quickly yeah this is a refresh yeah so

00:28:36,600 --> 00:28:43,200
that build past you can see down there

00:28:38,400 --> 00:28:45,600
back to normal for the build now the

00:28:43,200 --> 00:28:49,710
test is running because that's chained

00:28:45,600 --> 00:28:52,380
to a successful or stable build refresh

00:28:49,710 --> 00:28:56,309
that and it'll be finished and we can

00:28:52,380 --> 00:28:57,840
see that the test is now broken so now

00:28:56,309 --> 00:29:00,480
we have to go kind of debug what

00:28:57,840 --> 00:29:02,940
happened in the test on this test build

00:29:00,480 --> 00:29:06,179
status page there's a little bit more

00:29:02,940 --> 00:29:08,370
info like down here test result homepage

00:29:06,179 --> 00:29:10,679
use search something didn't work right

00:29:08,370 --> 00:29:12,840
so we have to kind of go check what that

00:29:10,679 --> 00:29:14,400
was now this information is a little a

00:29:12,840 --> 00:29:15,450
little weird it's gonna take a little

00:29:14,400 --> 00:29:17,700
more training to figure out what's going

00:29:15,450 --> 00:29:19,380
on but you can see there's some like CSS

00:29:17,700 --> 00:29:21,120
selectors there where you kind of have

00:29:19,380 --> 00:29:22,650
to figure out what's what's happening

00:29:21,120 --> 00:29:25,410
but you can notice there's like a quick

00:29:22,650 --> 00:29:27,330
tabs search kind of thing that we know

00:29:25,410 --> 00:29:29,940
is something's not working right so that

00:29:27,330 --> 00:29:31,710
that clues us into what's not showing up

00:29:29,940 --> 00:29:33,540
in the test and if you're familiar with

00:29:31,710 --> 00:29:35,669
the test you you have written for your

00:29:33,540 --> 00:29:37,559
site you'll know what tests those are

00:29:35,669 --> 00:29:42,419
referring to so if I go in and I did I

00:29:37,559 --> 00:29:45,570
delete the offending CSS and save it we

00:29:42,419 --> 00:29:48,080
will be able to run everything I should

00:29:45,570 --> 00:29:48,080
go smoothly

00:30:00,740 --> 00:30:07,560
yeah I'm kind of running out of things

00:30:02,790 --> 00:30:11,340
to say on these screens yeah so this is

00:30:07,560 --> 00:30:13,800
just debugging and making everything

00:30:11,340 --> 00:30:16,890
work yeah so the builds are gonna happen

00:30:13,800 --> 00:30:25,590
again I'm pretty sure that they that I

00:30:16,890 --> 00:30:27,060
refresh here relatively quickly but

00:30:25,590 --> 00:30:30,060
basically the gist of it is that

00:30:27,060 --> 00:30:33,680
everything is gonna pass the test is

00:30:30,060 --> 00:30:37,650
running it will eventually pass and then

00:30:33,680 --> 00:30:39,510
yeah here's it here's the the Status

00:30:37,650 --> 00:30:42,270
page of the test bill then you can see

00:30:39,510 --> 00:30:44,820
the the red triangles that kind of like

00:30:42,270 --> 00:30:47,130
number 13 was good number 14

00:30:44,820 --> 00:30:51,710
had an error number 15 was good number

00:30:47,130 --> 00:30:55,170
16 head in there 17 is good again so

00:30:51,710 --> 00:30:57,210
that's how we can tell what is going on

00:30:55,170 --> 00:31:00,300
with our builds oh and actually there's

00:30:57,210 --> 00:31:01,860
a new section here on the on the test

00:31:00,300 --> 00:31:06,630
build it's got upstream projects so it

00:31:01,860 --> 00:31:09,090
tells you where this project can be

00:31:06,630 --> 00:31:10,650
triggered from and I guess the

00:31:09,090 --> 00:31:13,860
production build is considered a

00:31:10,650 --> 00:31:15,830
downstream project from the test so this

00:31:13,860 --> 00:31:20,280
has got different status information I

00:31:15,830 --> 00:31:23,340
think that video ended okay so yeah

00:31:20,280 --> 00:31:29,250
that's the failure when you gotta go and

00:31:23,340 --> 00:31:30,420
debug some stuff next okay let me take a

00:31:29,250 --> 00:31:37,890
breather for a second but now we're

00:31:30,420 --> 00:31:39,450
gonna look at extending Jenkins so I've

00:31:37,890 --> 00:31:44,190
mentioned already a number of plugins

00:31:39,450 --> 00:31:46,320
that you can add to Jenkins to make it

00:31:44,190 --> 00:31:48,510
do more stuff there are actually

00:31:46,320 --> 00:31:49,830
hundreds of plugins available for

00:31:48,510 --> 00:31:51,240
Jenkins there's probably over a thousand

00:31:49,830 --> 00:31:53,790
I don't know exactly the exact number

00:31:51,240 --> 00:31:57,480
but they come in many many categories

00:31:53,790 --> 00:32:00,390
there's things like trigger plugins

00:31:57,480 --> 00:32:03,690
there are notifier plugins plugins to

00:32:00,390 --> 00:32:04,770
change the UI around there's plugins

00:32:03,690 --> 00:32:07,500
that help you with some command line

00:32:04,770 --> 00:32:09,570
tools and plugins for authentication

00:32:07,500 --> 00:32:11,470
that kind of thing I'm gonna give you a

00:32:09,570 --> 00:32:14,809
few noteworthy once at the

00:32:11,470 --> 00:32:18,200
and then installation for the plugins

00:32:14,809 --> 00:32:19,549
can be very easy you can go into your

00:32:18,200 --> 00:32:22,009
manage Jenkins that's installed on your

00:32:19,549 --> 00:32:23,509
server and go to a list they can be just

00:32:22,009 --> 00:32:25,249
kind of selected and installed in the UI

00:32:23,509 --> 00:32:27,859
the kind of library of plugins that's

00:32:25,249 --> 00:32:31,190
available on the web is kind of baked in

00:32:27,859 --> 00:32:32,359
to Jenkins that you install so or it

00:32:31,190 --> 00:32:33,769
goes and grabs and knows what's

00:32:32,359 --> 00:32:35,229
available and you can install them right

00:32:33,769 --> 00:32:37,729
there

00:32:35,229 --> 00:32:42,229
so let's yeah I'm gonna show you how

00:32:37,729 --> 00:32:44,629
easy it can be so here's another little

00:32:42,229 --> 00:32:48,499
video we're gonna go into the manage

00:32:44,629 --> 00:32:49,820
Jenkins section we're gonna install this

00:32:48,499 --> 00:32:52,039
we're gonna install a HipChat plugin

00:32:49,820 --> 00:32:54,830
which is going to allow notifications go

00:32:52,039 --> 00:32:55,999
to the manage plugins section it's gonna

00:32:54,830 --> 00:32:59,779
allow notifications to a HipChat

00:32:55,999 --> 00:33:01,070
chatroom here we have all the plugins

00:32:59,779 --> 00:33:04,460
that need updates but we're gonna click

00:33:01,070 --> 00:33:05,840
the available tab and on the available

00:33:04,460 --> 00:33:07,909
tab you'll see all the plugins that are

00:33:05,840 --> 00:33:09,440
available for your version of Jenkins

00:33:07,909 --> 00:33:10,849
it's only going to show you the ones

00:33:09,440 --> 00:33:14,119
that are compatible with your installed

00:33:10,849 --> 00:33:16,580
version which is really nice and so I'm

00:33:14,119 --> 00:33:19,940
gonna search for HipChat check that one

00:33:16,580 --> 00:33:21,409
off you can install plugins a lot of

00:33:19,940 --> 00:33:23,720
them without even restarting Jenkins

00:33:21,409 --> 00:33:25,580
itself which is pretty cool so you just

00:33:23,720 --> 00:33:28,070
click the button and you wait a little

00:33:25,580 --> 00:33:30,979
bit depending and then it'll be

00:33:28,070 --> 00:33:32,119
successful you could you could restart

00:33:30,979 --> 00:33:34,999
it if you needed to but you don't need

00:33:32,119 --> 00:33:37,789
to on this particular one and so it's

00:33:34,999 --> 00:33:41,090
successful now we're gonna have a few

00:33:37,789 --> 00:33:43,179
more configuration options available in

00:33:41,090 --> 00:33:46,879
our Manion in our manage Jenkins section

00:33:43,179 --> 00:33:47,929
if we go to configure system at the

00:33:46,879 --> 00:33:50,950
bottom down here we're gonna have some

00:33:47,929 --> 00:33:54,049
HipChat information that we can put in

00:33:50,950 --> 00:33:58,009
so we've got to put a server in you can

00:33:54,049 --> 00:33:59,570
see we've got to put API token in in a

00:33:58,009 --> 00:34:01,609
room that we want our messages to go

00:33:59,570 --> 00:34:04,129
into I'm not going to show you the API

00:34:01,609 --> 00:34:08,899
token but when I made the video I put it

00:34:04,129 --> 00:34:09,679
in so it's gonna work you save that so

00:34:08,899 --> 00:34:11,210
then you've got your general

00:34:09,679 --> 00:34:14,950
configuration setup but then we also

00:34:11,210 --> 00:34:18,020
want to configure it on a per job basis

00:34:14,950 --> 00:34:19,940
because sometimes you want certain jobs

00:34:18,020 --> 00:34:21,550
to report messages in different rooms or

00:34:19,940 --> 00:34:24,639
something like that

00:34:21,550 --> 00:34:27,879
on the job configuration itself you're

00:34:24,639 --> 00:34:31,060
gonna also have a new option it's gonna

00:34:27,879 --> 00:34:35,409
show up in the parameterised build

00:34:31,060 --> 00:34:37,800
option I believe or post build action or

00:34:35,409 --> 00:34:37,800
something like that

00:34:37,919 --> 00:34:42,129
yeah post build action so we've got a

00:34:40,480 --> 00:34:45,070
new one down here HipChat notifications

00:34:42,129 --> 00:34:47,110
it's got another room for an off an

00:34:45,070 --> 00:34:48,970
authentication token we don't need that

00:34:47,110 --> 00:34:51,010
because it's in the general settings we

00:34:48,970 --> 00:34:53,290
can put a new room if we want to and we

00:34:51,010 --> 00:34:54,790
can tell what kind of notices we want so

00:34:53,290 --> 00:34:58,750
we want failures and successes at least

00:34:54,790 --> 00:35:00,250
we could make in a specific message or

00:34:58,750 --> 00:35:03,700
you can just leave it as the default and

00:35:00,250 --> 00:35:07,810
that'll be be useful so if we save that

00:35:03,700 --> 00:35:10,480
and then we we run the build we'll be

00:35:07,810 --> 00:35:12,940
able to see what happens so if we click

00:35:10,480 --> 00:35:16,810
build now it'll start and then we can go

00:35:12,940 --> 00:35:20,140
over to our jenkin or our HipChat chat

00:35:16,810 --> 00:35:22,119
room and see what's gonna happen there i

00:35:20,140 --> 00:35:23,530
think i pull that up right now yeah so I

00:35:22,119 --> 00:35:25,690
tested the API that's why there's a

00:35:23,530 --> 00:35:27,790
notification in there but then the build

00:35:25,690 --> 00:35:29,500
successful it'll put a message right in

00:35:27,790 --> 00:35:31,780
there it gives you the number and a link

00:35:29,500 --> 00:35:33,820
to go right to the build details so

00:35:31,780 --> 00:35:35,260
especially if there's a failure it's a

00:35:33,820 --> 00:35:37,810
quick link for somebody who's hanging

00:35:35,260 --> 00:35:39,880
out in the room to go jump in here and

00:35:37,810 --> 00:35:42,850
see what went wrong so you don't have to

00:35:39,880 --> 00:35:45,190
rely on emails because especially if

00:35:42,850 --> 00:35:47,859
you're building all the time those

00:35:45,190 --> 00:35:50,680
emails can really pile up and they get

00:35:47,859 --> 00:35:52,359
lost in people's inboxes actually filter

00:35:50,680 --> 00:35:54,700
out most of these emails to myself

00:35:52,359 --> 00:35:56,350
because they happen all the time and

00:35:54,700 --> 00:35:59,710
having the notifications come to a

00:35:56,350 --> 00:36:03,100
chatroom that's kind of on on your

00:35:59,710 --> 00:36:07,270
workstation is a lot more convenient I

00:36:03,100 --> 00:36:11,020
think so yeah that's how easy it is to

00:36:07,270 --> 00:36:14,460
install a plugin so let me let me tell

00:36:11,020 --> 00:36:14,460
you about a few notable ones

00:36:18,580 --> 00:36:24,140
all right so I mentioned HipChat we

00:36:22,430 --> 00:36:25,610
showed that one there's also a slack

00:36:24,140 --> 00:36:27,560
plugin because I know a lot of people

00:36:25,610 --> 00:36:30,050
really like slack and slack is super

00:36:27,560 --> 00:36:31,700
extendable so you can obviously dump

00:36:30,050 --> 00:36:35,750
these kind of messages into your chat

00:36:31,700 --> 00:36:37,670
into your slack chat rooms there's a git

00:36:35,750 --> 00:36:39,260
plugin which we were we were using and

00:36:37,670 --> 00:36:41,420
that's how we got all those get options

00:36:39,260 --> 00:36:43,970
in there it provides the way to put your

00:36:41,420 --> 00:36:46,550
repository information in it also

00:36:43,970 --> 00:36:48,860
provides variables that are available to

00:36:46,550 --> 00:36:51,170
some of these parameters so you can put

00:36:48,860 --> 00:36:54,500
variables in that come from from your

00:36:51,170 --> 00:36:58,160
git repository there's a plug-in called

00:36:54,500 --> 00:36:59,870
delivery pipeline delivery pipeline is

00:36:58,160 --> 00:37:04,160
actually really cool and it's worthy of

00:36:59,870 --> 00:37:07,190
a screenshot what it does is gives you

00:37:04,160 --> 00:37:11,330
this visualization so this is an example

00:37:07,190 --> 00:37:13,850
of a bunch of chained jobs that kind of

00:37:11,330 --> 00:37:16,220
go together so you can run a a build

00:37:13,850 --> 00:37:18,110
that's gonna run this test which then

00:37:16,220 --> 00:37:20,570
when it's successful run will run this

00:37:18,110 --> 00:37:23,480
release which then runs two different

00:37:20,570 --> 00:37:25,850
jobs after that deployed a test and the

00:37:23,480 --> 00:37:32,630
generate documentation which then also

00:37:25,850 --> 00:37:35,120
can run a pre prod job and then a real

00:37:32,630 --> 00:37:37,370
prod so it's just a really nice way to

00:37:35,120 --> 00:37:39,140
see the flow of all of your chain builds

00:37:37,370 --> 00:37:42,080
and what the status of them at any point

00:37:39,140 --> 00:37:43,700
in time is so these are this is what I

00:37:42,080 --> 00:37:47,530
mean by those visualization plugins that

00:37:43,700 --> 00:37:47,530
help you really see what's going on

00:37:48,580 --> 00:37:53,900
another example of a good plugin is the

00:37:52,100 --> 00:37:55,360
LDAP plug-in there's also a few other

00:37:53,900 --> 00:38:02,150
ones for different kinds of

00:37:55,360 --> 00:38:04,820
authentication methods there's an email

00:38:02,150 --> 00:38:06,110
it's called email xed extension so what

00:38:04,820 --> 00:38:08,030
it does is it allows you to configure

00:38:06,110 --> 00:38:10,670
even more aspects of email notifications

00:38:08,030 --> 00:38:13,640
it gives you like full control over what

00:38:10,670 --> 00:38:18,470
types of things can get in you can be

00:38:13,640 --> 00:38:20,420
notified on the nested view plugin is

00:38:18,470 --> 00:38:22,610
when we have it on we had it on the

00:38:20,420 --> 00:38:23,920
videos that we were showing it's why or

00:38:22,610 --> 00:38:26,390
Anna on the screenshots

00:38:23,920 --> 00:38:27,860
it's the folders you can put all your

00:38:26,390 --> 00:38:30,200
jobs into folders and those folders can

00:38:27,860 --> 00:38:30,920
be within folders etc it's super helpful

00:38:30,200 --> 00:38:33,079
when

00:38:30,920 --> 00:38:35,150
you have hundreds and hundreds of jobs

00:38:33,079 --> 00:38:37,490
you can kind of organize them and it

00:38:35,150 --> 00:38:43,130
makes makes the UI a lot nicer to work

00:38:37,490 --> 00:38:44,480
with and then there's log pusher we

00:38:43,130 --> 00:38:47,630
didn't have that one turned on but what

00:38:44,480 --> 00:38:49,760
it will do is help with that console

00:38:47,630 --> 00:38:52,609
output it'll make it much easier to find

00:38:49,760 --> 00:38:54,770
the error messages so you can turn that

00:38:52,609 --> 00:38:57,740
on I'll make it a lot easier we probably

00:38:54,770 --> 00:39:00,559
should turn that one of ourselves and

00:38:57,740 --> 00:39:01,910
there's one called straw boss which it's

00:39:00,559 --> 00:39:05,240
pretty good for organizations that want

00:39:01,910 --> 00:39:07,579
to monitor external jobs with jenkins

00:39:05,240 --> 00:39:10,130
because it'll it'll do that monitoring

00:39:07,579 --> 00:39:12,260
and so you can have jenkins manage some

00:39:10,130 --> 00:39:14,630
of the reporting for those jobs and then

00:39:12,260 --> 00:39:16,250
it also will manage notifications so an

00:39:14,630 --> 00:39:18,700
external job can run and Jenkins can

00:39:16,250 --> 00:39:23,750
handle the messaging about what happens

00:39:18,700 --> 00:39:24,770
for those jobs as well and that's really

00:39:23,750 --> 00:39:28,490
all the room I had on the slide for

00:39:24,770 --> 00:39:30,410
notable plugins so the takeaways that I

00:39:28,490 --> 00:39:33,549
would like for you all to get from this

00:39:30,410 --> 00:39:37,309
presentation are the following

00:39:33,549 --> 00:39:38,660
for those sysadmin out there you should

00:39:37,309 --> 00:39:42,440
consider jenkins so you that you can

00:39:38,660 --> 00:39:45,710
empower your team members letting your

00:39:42,440 --> 00:39:48,829
team do some of the work of debugging

00:39:45,710 --> 00:39:51,530
their own code and controlling some of

00:39:48,829 --> 00:39:54,829
these build processes it's gonna lessen

00:39:51,530 --> 00:39:55,869
your work and it'll let them do their

00:39:54,829 --> 00:39:59,150
work more efficiently without

00:39:55,869 --> 00:40:01,400
interruptions and that's what it's good

00:39:59,150 --> 00:40:03,589
for developers too because we want to

00:40:01,400 --> 00:40:05,839
disrupt or we want to reduce the

00:40:03,589 --> 00:40:08,210
disruptions between team members like

00:40:05,839 --> 00:40:10,010
you don't know what the other people

00:40:08,210 --> 00:40:12,290
that you're usually having to bother to

00:40:10,010 --> 00:40:14,299
help you with stuff could be doing when

00:40:12,290 --> 00:40:15,530
you have to bother them so if everybody

00:40:14,299 --> 00:40:17,540
can kind of concentrate on getting the

00:40:15,530 --> 00:40:19,280
stuff they need to get done without help

00:40:17,540 --> 00:40:23,420
that's gonna kind of be beneficial for

00:40:19,280 --> 00:40:25,099
everybody and for everyone being able to

00:40:23,420 --> 00:40:29,030
automate and manage your repetitive

00:40:25,099 --> 00:40:30,859
tasks it's why we we use computers and

00:40:29,030 --> 00:40:32,809
so you want to automate this stuff as

00:40:30,859 --> 00:40:35,119
much as possible because it's not fun

00:40:32,809 --> 00:40:37,660
doing it so you might as well have it

00:40:35,119 --> 00:40:39,740
done and have it done systematically so

00:40:37,660 --> 00:40:42,549
when there are errors that's the only

00:40:39,740 --> 00:40:42,549
time you need to pay attention

00:40:42,650 --> 00:40:49,759
and with that I'll open up questions

00:40:47,650 --> 00:40:51,829
yeah is there a mic in here there's a

00:40:49,759 --> 00:40:54,700
mic over here you can yeah it'll help

00:40:51,829 --> 00:40:54,700
for the recording thank you

00:41:08,809 --> 00:41:13,069
click on there's non button

00:41:23,150 --> 00:41:37,430
Oh No okay I'll repeat the question

00:41:26,900 --> 00:41:39,860
go ahead mm-hmm okay so that stuff gets

00:41:37,430 --> 00:41:43,100
handled no the question is how do we

00:41:39,860 --> 00:41:46,010
went over how code changes get get

00:41:43,100 --> 00:41:48,980
tested in the build we want to know how

00:41:46,010 --> 00:41:52,840
update hooks and schema updates happen

00:41:48,980 --> 00:41:55,820
in the build in our build script were

00:41:52,840 --> 00:41:58,370
bootstrapping Drupal and so if that

00:41:55,820 --> 00:42:01,280
stuff breaks drush will know and

00:41:58,370 --> 00:42:02,150
complain and so I'm pretty sure that's

00:42:01,280 --> 00:42:04,130
how it's gonna work

00:42:02,150 --> 00:42:06,500
Ashok is nodding his head so yeah

00:42:04,130 --> 00:42:08,570
because drush is running in our scripts

00:42:06,500 --> 00:42:13,430
that's gonna let us know when that kind

00:42:08,570 --> 00:42:17,180
of stuff is broken know yeah it'll make

00:42:13,430 --> 00:42:19,820
a copy and run it on that oh sorry the

00:42:17,180 --> 00:42:21,560
the follow-up was so it's a new it's a

00:42:19,820 --> 00:42:22,850
new update on a new database and it's

00:42:21,560 --> 00:42:26,270
not messing with the old one yeah so

00:42:22,850 --> 00:42:27,800
it's it either makes a copy of the new

00:42:26,270 --> 00:42:30,410
one it runs on the new one or it backs

00:42:27,800 --> 00:42:32,090
up the original runs it on the new one

00:42:30,410 --> 00:42:33,560
in either rolls back to the backup or

00:42:32,090 --> 00:42:36,110
whatever it's all it's gonna have a

00:42:33,560 --> 00:42:47,660
rollback the originals available if

00:42:36,110 --> 00:42:49,730
something goes wrong the question is how

00:42:47,660 --> 00:42:53,120
do you version control a Jenkins task

00:42:49,730 --> 00:42:55,760
and I'm not sure about that can you

00:42:53,120 --> 00:42:58,120
write a Jenkins tasking code Ashok do

00:42:55,760 --> 00:42:58,120
you know that

00:43:17,610 --> 00:43:24,820
okay so the answer that we got from the

00:43:20,740 --> 00:43:29,320
audience is that you can write out your

00:43:24,820 --> 00:43:31,750
your Jenkins tasks in code and share

00:43:29,320 --> 00:43:32,890
them on github and so it's however you

00:43:31,750 --> 00:43:35,170
want really how you could version

00:43:32,890 --> 00:43:36,250
control your Jenkins tasks and then just

00:43:35,170 --> 00:43:37,360
install them on your server when you're

00:43:36,250 --> 00:43:39,130
stalling and that that's just kind of

00:43:37,360 --> 00:43:40,390
stuff I didn't get into so I mean it is

00:43:39,130 --> 00:43:42,010
possible and I guess people do share

00:43:40,390 --> 00:43:43,360
their stuff out there so that you can

00:43:42,010 --> 00:43:49,930
set up Jenkins with a bunch of

00:43:43,360 --> 00:43:51,820
pre-installed tasks yeah you so you can

00:43:49,930 --> 00:43:54,160
do it I just didn't go over it at all

00:43:51,820 --> 00:43:56,310
and the way we use is mostly through the

00:43:54,160 --> 00:43:56,310
UI

00:44:02,040 --> 00:44:08,690
yeah oh yeah go ahead yeah that's true

00:44:24,890 --> 00:44:28,920
so the question is you want to build and

00:44:27,420 --> 00:44:32,370
test with different versions of drush

00:44:28,920 --> 00:44:34,380
and PHP etc and how to write that stuff

00:44:32,370 --> 00:44:36,150
and I think all of that is going to be

00:44:34,380 --> 00:44:39,270
reliant on what you're putting in your

00:44:36,150 --> 00:44:40,920
build script and so in your build script

00:44:39,270 --> 00:44:43,640
like that one that's running that bash

00:44:40,920 --> 00:44:46,410
script that we have you're gonna want to

00:44:43,640 --> 00:44:48,990
like declare what you need in in those

00:44:46,410 --> 00:44:54,150
scripts somehow I'm pretty sure Shope

00:44:48,990 --> 00:44:55,260
has something you can add okay that's

00:44:54,150 --> 00:44:57,150
where he was going so you can start up

00:44:55,260 --> 00:44:58,920
containers within your so your Jenkins

00:44:57,150 --> 00:45:02,220
test can start up containers for you to

00:44:58,920 --> 00:45:07,400
test that kind of stuff too I talked to

00:45:02,220 --> 00:45:10,190
some of these guys about this definitely

00:45:07,400 --> 00:45:12,150
yeah so Jenkins is yeah

00:45:10,190 --> 00:45:13,500
Jenkins is running scripts and whatever

00:45:12,150 --> 00:45:19,940
you can do with a script you can tell it

00:45:13,500 --> 00:45:19,940
to do okay

00:45:28,239 --> 00:45:31,309
can you repeat the beginning of it again

00:45:30,259 --> 00:45:35,029
how do you stop the developers from

00:45:31,309 --> 00:45:36,949
doing what Oh from tail yeah let me go

00:45:35,029 --> 00:45:40,779
back if I can figure out how to go back

00:45:36,949 --> 00:45:44,630
here I've got a screenshot that should

00:45:40,779 --> 00:45:48,109
show some of these yeah up here so these

00:45:44,630 --> 00:45:49,309
permissions right here so you probably

00:45:48,109 --> 00:45:52,910
can't read it that's probably doesn't

00:45:49,309 --> 00:45:54,949
help so configure is its own permission

00:45:52,910 --> 00:45:56,839
you can take that permission away from

00:45:54,949 --> 00:45:58,519
anybody in the system they won't be able

00:45:56,839 --> 00:46:00,019
to get to this screen the only thing

00:45:58,519 --> 00:46:01,369
they're gonna get is like the build

00:46:00,019 --> 00:46:03,289
button if you give that to them or they

00:46:01,369 --> 00:46:04,939
cancel the job of its running kind of

00:46:03,289 --> 00:46:06,739
permission you can it's pretty granular

00:46:04,939 --> 00:46:09,789
what you can let them do and what you

00:46:06,739 --> 00:46:09,789
don't have to let them do

00:46:31,220 --> 00:46:37,580
all right if there's no more questions

00:46:33,780 --> 00:46:37,580

YouTube URL: https://www.youtube.com/watch?v=WJG0c2gVfxw


