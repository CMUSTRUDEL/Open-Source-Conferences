Title: DrupalCon Los Angeles 2015: Drupal 8's render pipeline
Publication date: 2015-05-13
Playlist: DrupalCon Los Angeles - May 2015
Description: 
	In Drupal 8, we've significantly improved the way pages are rendered. I will explain the entire render pipeline, which will also cover:

render caching — blocks and entities are now render cached automatically!
cache tags — finally we have the cache invalidation system we've always needed!
assets — only the necessary assets are loaded anymore, thanks to asset dependencies!
bubbling — rather than relying on global statics that broke caching, we now correctly bubble up all attached metadata — no more frustrations!
But I will also explain what is going to be possible in Drupal 8:

anonymous page loads: invalidating Varnish/CDNs with perfect precision
authenticated page loads: not completely regenerated on every page load, but assembled from render cached parts
alternative render strategies, like Big Pipe
Where relevant, I'll compare with Drupal 7, how you can write Drupal 7 code today that will be easy to upgrade to Drupal 8, and which Drupal 7 backports exist (hint: Big Pipe does exist!).

This talk provides a comprehensive overview about the finalized Drupal 8 render pipeline!
Captions: 
	00:00:00,000 --> 00:00:06,390
good afternoon everybody is the right

00:00:02,190 --> 00:00:09,599
folio everybody can hear male rights ok

00:00:06,390 --> 00:00:12,450
cool so welcome to my talk about the

00:00:09,599 --> 00:00:15,000
triple-eight render pipe on my name is

00:00:12,450 --> 00:00:18,420
lynn Lear's i work at ikea in the office

00:00:15,000 --> 00:00:20,039
of the CTO and in the past one year and

00:00:18,420 --> 00:00:23,100
a half approximately I've been working

00:00:20,039 --> 00:00:28,470
on performance issues and own criticals

00:00:23,100 --> 00:00:29,970
and in the end of 2014 we started

00:00:28,470 --> 00:00:31,800
looking at the render pipeline and the

00:00:29,970 --> 00:00:34,380
state of it do you understand the bill

00:00:31,800 --> 00:00:37,050
be evidence well and unfortunately at a

00:00:34,380 --> 00:00:39,120
time for understandable reasons because

00:00:37,050 --> 00:00:41,610
Drupal 8 has changed a lot of things but

00:00:39,120 --> 00:00:43,290
sadly the state of the weather pipeline

00:00:41,610 --> 00:00:46,710
was not that happy in the sense that it

00:00:43,290 --> 00:00:49,500
was very very complex to understand it

00:00:46,710 --> 00:00:51,989
took me full time for about a week to

00:00:49,500 --> 00:00:54,750
understand and I'm already working in

00:00:51,989 --> 00:00:58,260
court all the time so that was not great

00:00:54,750 --> 00:01:00,300
obviously so we worked together and came

00:00:58,260 --> 00:01:03,600
up with a path forward and make it

00:01:00,300 --> 00:01:06,840
actually understandable clear less

00:01:03,600 --> 00:01:08,850
confusion and so on and so at this point

00:01:06,840 --> 00:01:10,979
the render pipeline is in a good state

00:01:08,850 --> 00:01:13,229
and what I'm presenting here is the

00:01:10,979 --> 00:01:16,560
state of the pipeline has been in for

00:01:13,229 --> 00:01:18,210
the past several months so it is very

00:01:16,560 --> 00:01:20,820
likely that this is also just a that it

00:01:18,210 --> 00:01:22,500
will ship in maybe with some smaller

00:01:20,820 --> 00:01:25,950
changes but in any case this should this

00:01:22,500 --> 00:01:28,020
will be very very close and so hopefully

00:01:25,950 --> 00:01:29,640
by the end of this talk you will be able

00:01:28,020 --> 00:01:31,759
to understand the Drupal 8 render

00:01:29,640 --> 00:01:34,590
pipeline it will not be scary anymore

00:01:31,759 --> 00:01:37,259
the diagram that I listed on the slide

00:01:34,590 --> 00:01:40,860
here that was being shown while I was

00:01:37,259 --> 00:01:43,259
waiting for you guys to arrive that is a

00:01:40,860 --> 00:01:46,259
diagram that we'll be using and so that

00:01:43,259 --> 00:01:49,439
diagram shouldn't be scary anymore so

00:01:46,259 --> 00:01:52,740
let's get started so our guide is not

00:01:49,439 --> 00:01:54,810
sadly does hipster llama but a diagram

00:01:52,740 --> 00:01:58,860
that looks slightly intimidating at

00:01:54,810 --> 00:02:00,840
first sight which is this one but

00:01:58,860 --> 00:02:02,219
basically that diagram is just a map of

00:02:00,840 --> 00:02:04,829
Drupal 8 how it works at a high level

00:02:02,219 --> 00:02:06,750
and it comes with driving instructions

00:02:04,829 --> 00:02:08,569
that was a signal the right-hand side

00:02:06,750 --> 00:02:11,459
there the column on the right hand side

00:02:08,569 --> 00:02:13,200
so in this talk we're going to take a

00:02:11,459 --> 00:02:13,620
look at each of the areas of the map

00:02:13,200 --> 00:02:16,140
just

00:02:13,620 --> 00:02:17,640
like a regular map if you will and at

00:02:16,140 --> 00:02:19,080
the end you should have a pretty

00:02:17,640 --> 00:02:21,720
complete understanding and you should

00:02:19,080 --> 00:02:23,970
feel like at a high level you know how

00:02:21,720 --> 00:02:26,819
Drupal 8 works how it renders pages and

00:02:23,970 --> 00:02:28,950
so on so if you haven't yet already

00:02:26,819 --> 00:02:31,799
please down with PDF and follow along i

00:02:28,950 --> 00:02:34,590
would say i created this together with

00:02:31,799 --> 00:02:36,480
others to hopefully have that be a very

00:02:34,590 --> 00:02:39,750
useful reference while working in drupal

00:02:36,480 --> 00:02:43,140
8 while debugging while developing well

00:02:39,750 --> 00:02:44,760
whenever so if we remove the driving

00:02:43,140 --> 00:02:47,609
instructions for a second and just keep

00:02:44,760 --> 00:02:49,680
the actual map then it looks like this

00:02:47,609 --> 00:02:52,560
slightly less intimidating and like any

00:02:49,680 --> 00:02:54,690
map we need orientation points so in the

00:02:52,560 --> 00:02:56,370
top left corner we have a request that

00:02:54,690 --> 00:02:58,620
is coming in because web was all about

00:02:56,370 --> 00:03:00,690
requests and answering those requests

00:02:58,620 --> 00:03:02,489
with responses so from the top left

00:03:00,690 --> 00:03:04,349
where we have the incoming requests

00:03:02,489 --> 00:03:06,959
towards the bottom where we have the

00:03:04,349 --> 00:03:09,090
response so from top to bottom we are

00:03:06,959 --> 00:03:11,459
processing the request and formulating a

00:03:09,090 --> 00:03:14,159
response and then actually sending the

00:03:11,459 --> 00:03:16,620
response from left to right we are at

00:03:14,159 --> 00:03:18,419
the very surface of Drupal and towards

00:03:16,620 --> 00:03:22,590
the right we are getting deeper into

00:03:18,419 --> 00:03:26,609
Drupal and the various areas that you

00:03:22,590 --> 00:03:28,590
could see roughly speaking are the ones

00:03:26,609 --> 00:03:30,239
that are here marked in blue rectangles

00:03:28,590 --> 00:03:32,459
so those are the steps that will be

00:03:30,239 --> 00:03:35,639
looking out now I know that this talk is

00:03:32,459 --> 00:03:39,919
at the front end track and this may seem

00:03:35,639 --> 00:03:44,190
very back ND and you would not be wrong

00:03:39,919 --> 00:03:45,720
but a front end is meaningless without a

00:03:44,190 --> 00:03:47,699
back end right they found that needs to

00:03:45,720 --> 00:03:49,379
talk to a back-end to be able to show

00:03:47,699 --> 00:03:51,329
something meaningful unless you're

00:03:49,379 --> 00:03:54,750
creating a static website in which case

00:03:51,329 --> 00:03:56,699
you probably wouldn't be sitting here so

00:03:54,750 --> 00:03:58,889
I think that as a front-end developer it

00:03:56,699 --> 00:04:01,319
is useful to have a high level knowledge

00:03:58,889 --> 00:04:02,609
of how to play it works how it serves

00:04:01,319 --> 00:04:06,599
responses the things that you are

00:04:02,609 --> 00:04:08,669
working with but also given the whole

00:04:06,599 --> 00:04:11,430
headless Drupal /d couple through people

00:04:08,669 --> 00:04:14,280
hype it is useful to know which things

00:04:11,430 --> 00:04:16,829
Drupal is capable of doing which kinds

00:04:14,280 --> 00:04:19,709
of transformations can do what kind of

00:04:16,829 --> 00:04:21,900
expectations you can have and maybe what

00:04:19,709 --> 00:04:24,150
kinds of responses that you is a front

00:04:21,900 --> 00:04:26,219
end person we really like but through

00:04:24,150 --> 00:04:27,540
polite isn't delivering well hopefully

00:04:26,219 --> 00:04:31,560
this will give you the end so

00:04:27,540 --> 00:04:33,930
or D sufficient amount of knowledge but

00:04:31,560 --> 00:04:35,820
not too much to allow you to talk to

00:04:33,930 --> 00:04:38,100
developers and say hey I want my data in

00:04:35,820 --> 00:04:40,740
this kind of format in this shape make

00:04:38,100 --> 00:04:44,340
sure it happens and hopefully this will

00:04:40,740 --> 00:04:46,260
help you understand at a high level how

00:04:44,340 --> 00:04:47,910
that works and that should hopefully

00:04:46,260 --> 00:04:50,400
help you as a from a developer as well

00:04:47,910 --> 00:04:52,320
so the quick show of hands who would

00:04:50,400 --> 00:04:55,140
consider him or herself a front-end

00:04:52,320 --> 00:04:57,060
person in the room and back-end

00:04:55,140 --> 00:05:01,890
preferred okay so it's approximately

00:04:57,060 --> 00:05:04,980
fifty fifty cool okay let's get started

00:05:01,890 --> 00:05:06,900
then so the first step and I think that

00:05:04,980 --> 00:05:09,870
everybody in this room already noses if

00:05:06,900 --> 00:05:12,360
you're a or actually one more is anybody

00:05:09,870 --> 00:05:16,740
of you more of a symphony person than a

00:05:12,360 --> 00:05:20,490
Drupal person okay very few but that's

00:05:16,740 --> 00:05:22,560
fine okay so let's get started index dot

00:05:20,490 --> 00:05:24,240
PHP we've had this file for a long time

00:05:22,560 --> 00:05:27,780
actually since forever in Drupal and

00:05:24,240 --> 00:05:29,340
what it really is it so we have had it

00:05:27,780 --> 00:05:30,930
for a long time and what it is it's a

00:05:29,340 --> 00:05:32,850
front controller that's what Symphony

00:05:30,930 --> 00:05:35,970
calls it does the design pattern and

00:05:32,850 --> 00:05:38,400
maybe design pattern is a bit over the

00:05:35,970 --> 00:05:40,950
top here but basically all it is is it's

00:05:38,400 --> 00:05:42,660
a central point a entry point where all

00:05:40,950 --> 00:05:44,760
requests are coming in through and from

00:05:42,660 --> 00:05:47,640
there we are deciding what to do and

00:05:44,760 --> 00:05:49,680
what response is sent by Symphony

00:05:47,640 --> 00:05:53,010
convention this would be called a PHP

00:05:49,680 --> 00:05:55,260
not index PHP but basically the name is

00:05:53,010 --> 00:05:57,660
irrelevant it's just a name it doesn't

00:05:55,260 --> 00:06:00,660
matter so just for the symphony people

00:05:57,660 --> 00:06:03,900
here so the responsibilities are of that

00:06:00,660 --> 00:06:06,360
index PHP thing and this may seem

00:06:03,900 --> 00:06:08,160
overwhelming at first maybe for some

00:06:06,360 --> 00:06:11,130
from people but really it is high levels

00:06:08,160 --> 00:06:14,130
or no worries simply request object

00:06:11,130 --> 00:06:16,830
that's what Drupal 8 is using so instead

00:06:14,130 --> 00:06:19,440
of talking to a global PHP object global

00:06:16,830 --> 00:06:21,660
state is bad so we and symphony have

00:06:19,440 --> 00:06:23,760
this concept of a request object that

00:06:21,660 --> 00:06:26,040
encapsulates that so that we can pass it

00:06:23,760 --> 00:06:29,340
around and not mucking with global safe

00:06:26,040 --> 00:06:31,680
so we create a request object second

00:06:29,340 --> 00:06:33,480
thing we do in index of PHP is creating

00:06:31,680 --> 00:06:35,190
an HTTP colonel I will talk a bit more

00:06:33,480 --> 00:06:38,130
about HTTP colonel later but for the

00:06:35,190 --> 00:06:40,290
back end folks in the initialization the

00:06:38,130 --> 00:06:41,620
creation of HTTP colonel what we do is

00:06:40,290 --> 00:06:43,780
we initialize a container

00:06:41,620 --> 00:06:46,240
and basically we read some settings from

00:06:43,780 --> 00:06:47,800
settings of HB to know how to talk to

00:06:46,240 --> 00:06:50,979
the database we took to talk to which

00:06:47,800 --> 00:06:54,340
database and that's basically HTTP

00:06:50,979 --> 00:06:57,400
colonel next is we as a next step we use

00:06:54,340 --> 00:07:00,160
both so we give the HTTP colonel a

00:06:57,400 --> 00:07:01,510
request object and HTTP colonel will

00:07:00,160 --> 00:07:05,050
make sure that we get a response back

00:07:01,510 --> 00:07:07,180
and i think that this this is by the way

00:07:05,050 --> 00:07:08,979
the key thing here and this is really

00:07:07,180 --> 00:07:11,350
what i was all about your sending

00:07:08,979 --> 00:07:13,419
requests HTTP requests and you're

00:07:11,350 --> 00:07:15,699
getting responses back so the high-level

00:07:13,419 --> 00:07:19,030
this is basically what rupal is you give

00:07:15,699 --> 00:07:21,340
a request and get back a response and so

00:07:19,030 --> 00:07:23,500
this is what every single answer that

00:07:21,340 --> 00:07:27,789
drew provides every single response is

00:07:23,500 --> 00:07:30,250
links to those so once we have a

00:07:27,789 --> 00:07:32,139
response we need to prepare it maybe do

00:07:30,250 --> 00:07:33,729
some calculation some rendering depends

00:07:32,139 --> 00:07:35,530
on what kind of response you have and as

00:07:33,729 --> 00:07:37,750
a next step you send the response that

00:07:35,530 --> 00:07:39,250
is making sure that the that the thing

00:07:37,750 --> 00:07:41,440
you construct it actually makes it back

00:07:39,250 --> 00:07:43,210
to the end user and finally once the

00:07:41,440 --> 00:07:46,060
response to sense it's possible to still

00:07:43,210 --> 00:07:47,770
do some final bits after the request has

00:07:46,060 --> 00:07:50,979
been sent so things like logging or

00:07:47,770 --> 00:07:53,050
statistics but that's it so basically

00:07:50,979 --> 00:07:56,560
this is how Drupal works at a very very

00:07:53,050 --> 00:07:58,180
high level and this hopefully will be

00:07:56,560 --> 00:08:00,070
familiar to any symphony developer

00:07:58,180 --> 00:08:03,130
because it's exactly the same in any

00:08:00,070 --> 00:08:05,410
symphony application so the next step

00:08:03,130 --> 00:08:07,810
HTTP colonel handle so remember that

00:08:05,410 --> 00:08:09,190
here we cut the requests we gave it to

00:08:07,810 --> 00:08:11,590
the colonel and we get back a response

00:08:09,190 --> 00:08:14,139
so we're going to look at in a bit more

00:08:11,590 --> 00:08:17,590
detail HTH at the HTTP colonel what it

00:08:14,139 --> 00:08:19,870
does so what it is is basically an

00:08:17,590 --> 00:08:23,470
arbitrator decides what should happen in

00:08:19,870 --> 00:08:25,389
order to answer that request HP colonel

00:08:23,470 --> 00:08:28,419
is really the heart of both symphony and

00:08:25,389 --> 00:08:30,460
drupal and so it is used in unmodified

00:08:28,419 --> 00:08:32,190
shape so the documentation at Symphony

00:08:30,460 --> 00:08:36,880
provides found the one in the link there

00:08:32,190 --> 00:08:39,520
is also applicable to Drupal so should

00:08:36,880 --> 00:08:42,459
make for a more cross project

00:08:39,520 --> 00:08:45,310
collaboration so the responsibilities

00:08:42,459 --> 00:08:47,080
here are negotiation and routing and as

00:08:45,310 --> 00:08:49,690
happening during the request event but

00:08:47,080 --> 00:08:51,250
more about live events a bit later so we

00:08:49,690 --> 00:08:52,600
need to negotiate a formula to know

00:08:51,250 --> 00:08:54,970
whether we need to send a response in

00:08:52,600 --> 00:08:58,600
Jason and HTML in an

00:08:54,970 --> 00:09:01,480
which forward in PDF whatever is needed

00:08:58,600 --> 00:09:03,250
and then routing determining given that

00:09:01,480 --> 00:09:06,129
we have a certain format that we need to

00:09:03,250 --> 00:09:10,209
answer to figuring out which code should

00:09:06,129 --> 00:09:12,040
actually generate that and for the back

00:09:10,209 --> 00:09:14,649
end developers in the room in Drupal 8

00:09:12,040 --> 00:09:16,810
we have routing the EML files and there

00:09:14,649 --> 00:09:18,730
the underscore controller thing that

00:09:16,810 --> 00:09:23,110
determines which is the code that will

00:09:18,730 --> 00:09:24,399
be used to formulate a response once we

00:09:23,110 --> 00:09:26,259
know which controller should be used

00:09:24,399 --> 00:09:28,029
there is another event that allows your

00:09:26,259 --> 00:09:30,779
loss second overriding so that still

00:09:28,029 --> 00:09:33,250
something else could be returned and

00:09:30,779 --> 00:09:35,680
once we know for sure which controller

00:09:33,250 --> 00:09:37,389
is the one that will be used we need to

00:09:35,680 --> 00:09:39,610
provide that controller with the

00:09:37,389 --> 00:09:41,439
arguments that expect so introspection

00:09:39,610 --> 00:09:43,959
is happening to figure out which

00:09:41,439 --> 00:09:46,269
arguments are needed and then make sure

00:09:43,959 --> 00:09:50,079
that the parameters are converted to

00:09:46,269 --> 00:09:52,779
match that so X for example notes / 11

00:09:50,079 --> 00:09:55,149
means that note with ID one should be

00:09:52,779 --> 00:09:58,480
loaded and if my controller expects a

00:09:55,149 --> 00:10:00,160
node object then the note 1 URL will

00:09:58,480 --> 00:10:03,550
make sure that through a parameter

00:10:00,160 --> 00:10:05,980
conversion that one is converted to note

00:10:03,550 --> 00:10:08,230
object 1 so basically just mapping those

00:10:05,980 --> 00:10:11,319
things that's all this is about fancy

00:10:08,230 --> 00:10:12,819
words but it's really simple so give it

00:10:11,319 --> 00:10:13,899
up we know which controller to call give

00:10:12,819 --> 00:10:15,550
it that we have the arguments we can

00:10:13,899 --> 00:10:18,220
have a finally cold controller the thing

00:10:15,550 --> 00:10:19,809
that will formulate a response and so

00:10:18,220 --> 00:10:22,360
that we will be looking at in more

00:10:19,809 --> 00:10:24,939
detail later and if the result of that

00:10:22,360 --> 00:10:27,189
controller that the return value is a

00:10:24,939 --> 00:10:29,379
response object because remember we have

00:10:27,189 --> 00:10:32,529
in symfony that request objects and as

00:10:29,379 --> 00:10:34,000
well as a response object so if the

00:10:32,529 --> 00:10:36,519
controller returns a response object

00:10:34,000 --> 00:10:39,040
then we're all done basically we have

00:10:36,519 --> 00:10:40,750
the entirety of information that we need

00:10:39,040 --> 00:10:42,850
to know what it sounds like to the end

00:10:40,750 --> 00:10:45,970
user because the response object

00:10:42,850 --> 00:10:47,889
encapsulates all of that information but

00:10:45,970 --> 00:10:51,009
if it was something else so for example

00:10:47,889 --> 00:10:53,350
if your controller returns an object or

00:10:51,009 --> 00:10:55,600
a render array we need to still turn

00:10:53,350 --> 00:10:58,180
that into a response object because as

00:10:55,600 --> 00:11:00,220
we saw an index of PHP the only thing

00:10:58,180 --> 00:11:03,579
that that knows how to deal with its

00:11:00,220 --> 00:11:05,170
response object so eventually we always

00:11:03,579 --> 00:11:07,179
need to get a response because again

00:11:05,170 --> 00:11:08,499
that's what we have is all of ours so in

00:11:07,179 --> 00:11:10,209
that case there is

00:11:08,499 --> 00:11:12,369
you even subscriber that allows you to

00:11:10,209 --> 00:11:15,149
turn whatever is returned by the

00:11:12,369 --> 00:11:18,129
controller into a response object and

00:11:15,149 --> 00:11:21,549
finally we have the response event for

00:11:18,129 --> 00:11:22,959
last-second modifying and there are some

00:11:21,549 --> 00:11:25,539
good use cases out there but the

00:11:22,959 --> 00:11:28,179
funniest one I've thought of yet is that

00:11:25,539 --> 00:11:29,739
every year there is pirate day and on

00:11:28,179 --> 00:11:31,989
pirate day you want lots of ER and

00:11:29,739 --> 00:11:34,719
fiddle-dee-dee on your website well

00:11:31,989 --> 00:11:36,639
through a response even subscriber you

00:11:34,719 --> 00:11:42,399
could easily just inject it in several

00:11:36,639 --> 00:11:44,139
places if you want so basically this is

00:11:42,399 --> 00:11:46,329
the diagram directly from the symphony

00:11:44,139 --> 00:11:47,829
documentation and it's very similar on

00:11:46,329 --> 00:11:50,409
the left hand side a request is coming

00:11:47,829 --> 00:11:52,509
in on the right head right hand side a

00:11:50,409 --> 00:11:55,149
response is coming out and the blue

00:11:52,509 --> 00:11:56,439
boxes the blue rectangles are the events

00:11:55,149 --> 00:11:59,319
that are being triggered along the way

00:11:56,439 --> 00:12:01,479
purple things are where stuff is

00:11:59,319 --> 00:12:03,549
happening if you will and then depend

00:12:01,479 --> 00:12:05,409
the most important bit again is the

00:12:03,549 --> 00:12:08,769
controller there where the color the red

00:12:05,409 --> 00:12:10,749
controller is called if it's a

00:12:08,769 --> 00:12:12,549
responsive like that we get back we go

00:12:10,749 --> 00:12:14,470
immediately to the right if something

00:12:12,549 --> 00:12:16,839
else return to we go down below to the

00:12:14,470 --> 00:12:20,829
view event but eventually we always end

00:12:16,839 --> 00:12:22,989
up with a response event and so really

00:12:20,829 --> 00:12:24,909
at a high level this is all the Drupal

00:12:22,989 --> 00:12:26,829
is about and even all that Symphony is

00:12:24,909 --> 00:12:29,529
about if you will this is basically how

00:12:26,829 --> 00:12:32,259
every single thing that you see on a

00:12:29,529 --> 00:12:34,809
Drupal website eventually is working

00:12:32,259 --> 00:12:37,779
internally and so the possibilities of

00:12:34,809 --> 00:12:39,369
this the HTTP Colonel are also pretty

00:12:37,779 --> 00:12:41,919
interesting so you have these various

00:12:39,369 --> 00:12:44,079
events that i mentioned and basically

00:12:41,919 --> 00:12:45,579
anything is possible with those for

00:12:44,079 --> 00:12:47,139
example it responds if then subscribe

00:12:45,579 --> 00:12:50,639
the responsive and allows you to do

00:12:47,139 --> 00:12:54,549
things like that the annual pirate day

00:12:50,639 --> 00:12:57,369
inject fiddle-dee-dee stuff but for

00:12:54,549 --> 00:12:59,739
example at a request even subscriber you

00:12:57,369 --> 00:13:02,409
could do some very early overriding and

00:12:59,739 --> 00:13:04,209
determine that basis on dynamic

00:13:02,409 --> 00:13:06,069
condition you instead want to return a

00:13:04,209 --> 00:13:07,689
picture of a llama instead of an actual

00:13:06,069 --> 00:13:09,279
piece of content I don't know what do

00:13:07,689 --> 00:13:12,279
you want to do but basically anything is

00:13:09,279 --> 00:13:15,129
possible so hopefully that is all clear

00:13:12,279 --> 00:13:16,839
at a high level so we've we've dealt

00:13:15,129 --> 00:13:18,519
with the first two columns if you will

00:13:16,839 --> 00:13:20,679
and then the third one is one will be

00:13:18,519 --> 00:13:21,660
talking about next and those are events

00:13:20,679 --> 00:13:25,470
and we scored

00:13:21,660 --> 00:13:27,720
a few events already in HTTP colonel so

00:13:25,470 --> 00:13:30,420
several or if you will most are

00:13:27,720 --> 00:13:31,800
triggered by an HTTP kernel and they're

00:13:30,420 --> 00:13:34,440
really the glue between symphony and

00:13:31,800 --> 00:13:36,360
Drupal because remember that the first

00:13:34,440 --> 00:13:38,970
two columns there is nothing Drupal

00:13:36,360 --> 00:13:42,450
specific in there yet so the top layers

00:13:38,970 --> 00:13:45,720
are really just standard symphony and

00:13:42,450 --> 00:13:47,400
then with event handling we are able to

00:13:45,720 --> 00:13:49,770
pull in the Drupal concepts and make

00:13:47,400 --> 00:13:52,620
triple work as in similar ways as it

00:13:49,770 --> 00:13:54,480
used to work in the past so triple it

00:13:52,620 --> 00:13:56,280
can also of course trigger events and

00:13:54,480 --> 00:13:59,340
adults and we will see one of the

00:13:56,280 --> 00:14:02,870
relator on but remember events are the

00:13:59,340 --> 00:14:06,540
glue between Symphony and through ball

00:14:02,870 --> 00:14:08,850
so the next step at the controller and

00:14:06,540 --> 00:14:10,380
this is the most interesting bit even

00:14:08,850 --> 00:14:12,030
though it's the smallest rectangle but

00:14:10,380 --> 00:14:14,370
this is the thing that most of you will

00:14:12,030 --> 00:14:18,240
be entered interacting with the most at

00:14:14,370 --> 00:14:20,190
least back-end developers because this

00:14:18,240 --> 00:14:22,560
is basically the equivalent of the

00:14:20,190 --> 00:14:24,450
Drupal 7 page call back so hook menu you

00:14:22,560 --> 00:14:26,940
have a page callback equivalent in

00:14:24,450 --> 00:14:28,680
Drupal 8 is a controller so it's just

00:14:26,940 --> 00:14:32,790
the application logic and it determines

00:14:28,680 --> 00:14:35,130
the content of your response and it's

00:14:32,790 --> 00:14:36,750
already slightly alluded to you can

00:14:35,130 --> 00:14:38,820
return different things from my

00:14:36,750 --> 00:14:42,390
controller you can eat return either a

00:14:38,820 --> 00:14:44,340
response object a render array which is

00:14:42,390 --> 00:14:46,740
the thing that we pretty much always

00:14:44,340 --> 00:14:51,090
return in 27 and you still can as you

00:14:46,740 --> 00:14:53,400
can see or an object so in that case

00:14:51,090 --> 00:14:56,280
we'll need an associated view event

00:14:53,400 --> 00:14:57,840
subscriber because remember we always in

00:14:56,280 --> 00:15:00,590
the end need to return a response object

00:14:57,840 --> 00:15:03,180
so it's keeping things simple and

00:15:00,590 --> 00:15:06,450
setting the same expectations always at

00:15:03,180 --> 00:15:08,130
a higher level I will go in more detail

00:15:06,450 --> 00:15:09,360
into the render array later because

00:15:08,130 --> 00:15:13,860
that's still the most commonly used

00:15:09,360 --> 00:15:15,780
thing the possibilities here are sending

00:15:13,860 --> 00:15:17,880
a response if you return a response

00:15:15,780 --> 00:15:20,190
object from the controller then you have

00:15:17,880 --> 00:15:22,380
full control over what is sent so there

00:15:20,190 --> 00:15:24,630
is no more need for manual printing

00:15:22,380 --> 00:15:27,060
stuff and then calling exit which was

00:15:24,630 --> 00:15:29,250
pretty commonplace sadly in Drupal 7 but

00:15:27,060 --> 00:15:31,500
there was also no other way so it was

00:15:29,250 --> 00:15:33,000
acceptable but now there is no more need

00:15:31,500 --> 00:15:34,649
for that everything is clearly

00:15:33,000 --> 00:15:36,509
encapsulated

00:15:34,649 --> 00:15:38,279
returning a render array then you

00:15:36,509 --> 00:15:40,170
basically let's Drupal take care of

00:15:38,279 --> 00:15:42,119
sanding and we'll look more at that

00:15:40,170 --> 00:15:45,389
later as the Drupal will take care of

00:15:42,119 --> 00:15:46,619
turning it into a response object but

00:15:45,389 --> 00:15:49,829
now with the really interesting thing

00:15:46,619 --> 00:15:52,980
and we're first important time to front

00:15:49,829 --> 00:15:55,949
end comes in if your controller returns

00:15:52,980 --> 00:15:58,350
a object meaning some some kind of

00:15:55,949 --> 00:16:00,929
semantic data then there can be many

00:15:58,350 --> 00:16:04,800
multiple views subscribers that operate

00:16:00,929 --> 00:16:06,869
on that so for example if you have a

00:16:04,800 --> 00:16:09,420
tabular data object some kind of

00:16:06,869 --> 00:16:11,220
spreadsheet like data the controller

00:16:09,420 --> 00:16:14,429
returns at the kind of spreadsheet like

00:16:11,220 --> 00:16:17,819
data but then it can be rendered by one

00:16:14,429 --> 00:16:20,160
view subscriber into csv another into an

00:16:17,819 --> 00:16:23,850
HTML table another into a PDF file

00:16:20,160 --> 00:16:24,990
another into yet something else and this

00:16:23,850 --> 00:16:29,249
is where things become really

00:16:24,990 --> 00:16:31,649
interesting because yes headless drupal

00:16:29,249 --> 00:16:33,779
may be good for some size but not for

00:16:31,649 --> 00:16:35,790
every use case it makes a whole lot of

00:16:33,779 --> 00:16:38,009
sense for something scruple as it is

00:16:35,790 --> 00:16:41,910
today of the works today is just fine

00:16:38,009 --> 00:16:44,009
and I think that we will be seeing quite

00:16:41,910 --> 00:16:46,579
a bit of fat with Drupal but I think

00:16:44,009 --> 00:16:48,929
there will be also combinations of both

00:16:46,579 --> 00:16:51,120
parts that are headed and parts that are

00:16:48,929 --> 00:16:54,209
headless if you will and this kind of

00:16:51,120 --> 00:16:57,779
flexibility in what you return allows

00:16:54,209 --> 00:16:59,879
for those hybrid to exist because parts

00:16:57,779 --> 00:17:01,920
of the website maybe if you're building

00:16:59,879 --> 00:17:04,409
a website for a library let's say then

00:17:01,920 --> 00:17:05,459
they will have a new section a complex

00:17:04,409 --> 00:17:07,740
patient whatnot and that would be

00:17:05,459 --> 00:17:10,740
regular Drupal but then the parts that

00:17:07,740 --> 00:17:13,169
are more interactive more dynamic like

00:17:10,740 --> 00:17:15,569
for example browsing at library as in

00:17:13,169 --> 00:17:18,270
the books in the library and looking at

00:17:15,569 --> 00:17:19,919
the metadata about ebooks well in that

00:17:18,270 --> 00:17:21,839
case maybe the controller should be

00:17:19,919 --> 00:17:23,669
returning a library book object and that

00:17:21,839 --> 00:17:25,500
can then be rendered into a JSON

00:17:23,669 --> 00:17:27,959
response that is exactly in the format

00:17:25,500 --> 00:17:30,539
that the the front-end expects or maybe

00:17:27,959 --> 00:17:34,080
an image for the front for the cover of

00:17:30,539 --> 00:17:37,529
the book or maybe various shapes of JSON

00:17:34,080 --> 00:17:40,260
it's really up to you and this also

00:17:37,529 --> 00:17:42,510
makes it then pretty easy to do things

00:17:40,260 --> 00:17:44,970
like integrating with external systems

00:17:42,510 --> 00:17:46,710
and making it pass through Drupal so in

00:17:44,970 --> 00:17:47,410
the case of a library for example i can

00:17:46,710 --> 00:17:50,910
imagine

00:17:47,410 --> 00:17:53,890
that usually there are old huge systems

00:17:50,910 --> 00:17:56,230
that collect contain all of the book

00:17:53,890 --> 00:17:59,980
information which ones are land out and

00:17:56,230 --> 00:18:01,780
what not but then exposing the

00:17:59,980 --> 00:18:04,090
information to the visitors to the users

00:18:01,780 --> 00:18:06,130
is kind of difficult because they don't

00:18:04,090 --> 00:18:07,330
want to interact with all shady systems

00:18:06,130 --> 00:18:10,480
that are difficult to read and

00:18:07,330 --> 00:18:12,880
understand so in that case Drupal could

00:18:10,480 --> 00:18:14,890
talk to that external thing the

00:18:12,880 --> 00:18:16,870
controller could return a semantic

00:18:14,890 --> 00:18:18,700
object called for example library book

00:18:16,870 --> 00:18:20,170
and then there could be multiple views

00:18:18,700 --> 00:18:23,230
subscribers to return data in the

00:18:20,170 --> 00:18:25,210
various shapes forums formats that the

00:18:23,230 --> 00:18:27,010
front-end expects so the front end

00:18:25,210 --> 00:18:29,020
people could just ask the developers to

00:18:27,010 --> 00:18:32,410
add another view subscriber to return

00:18:29,020 --> 00:18:35,950
this particular shape of JSON or this

00:18:32,410 --> 00:18:37,600
particular shape of hell Jason or maybe

00:18:35,950 --> 00:18:39,670
something else completely like it

00:18:37,600 --> 00:18:43,330
anything goes you can do whatever you

00:18:39,670 --> 00:18:46,390
need and want so I think the possibility

00:18:43,330 --> 00:18:48,220
to return both due to force both the

00:18:46,390 --> 00:18:51,070
entire response to be something which is

00:18:48,220 --> 00:18:53,200
option one to be to have the return

00:18:51,070 --> 00:18:54,730
value be a render array which is the

00:18:53,200 --> 00:18:57,280
classical thing and which is how to

00:18:54,730 --> 00:19:01,140
palade still works for for example all

00:18:57,280 --> 00:19:03,370
of its UI or as a third case objects

00:19:01,140 --> 00:19:08,230
semantical objects that are turned into

00:19:03,370 --> 00:19:10,270
various formats and shapes that is then

00:19:08,230 --> 00:19:13,060
the other case and the ability to use

00:19:10,270 --> 00:19:16,690
all three in one side I think is very

00:19:13,060 --> 00:19:19,000
interesting and will open new doors so

00:19:16,690 --> 00:19:25,720
if we look at the renderer a part in

00:19:19,000 --> 00:19:27,760
specific for a while so render erase as

00:19:25,720 --> 00:19:30,040
returned by controllers or page

00:19:27,760 --> 00:19:32,320
callbacks and Drupal 7 usually represent

00:19:30,040 --> 00:19:34,000
the main content if you will usually

00:19:32,320 --> 00:19:35,350
there are blocks surrounding it but then

00:19:34,000 --> 00:19:36,970
the render array that was returned by

00:19:35,350 --> 00:19:38,290
the controller is a thing centrally on

00:19:36,970 --> 00:19:40,090
the page that's why we called main

00:19:38,290 --> 00:19:42,790
comptons in Drupal 8 as well as in

00:19:40,090 --> 00:19:44,980
Drupal 7 and so as we were saying before

00:19:42,790 --> 00:19:46,930
if the thing that the controller returns

00:19:44,980 --> 00:19:48,970
is something else than a response object

00:19:46,930 --> 00:19:51,130
it has to be turned into a response

00:19:48,970 --> 00:19:53,410
object eventually and this is the thing

00:19:51,130 --> 00:19:55,800
that turns who render erase into such

00:19:53,410 --> 00:20:01,120
response objects

00:19:55,800 --> 00:20:03,250
and what it does is selects and calls a

00:20:01,120 --> 00:20:05,920
main problem renderer and which main

00:20:03,250 --> 00:20:08,200
content renderer is used depends on the

00:20:05,920 --> 00:20:10,690
negotiated format so if the negotiated

00:20:08,200 --> 00:20:13,570
format is HTML we'll use HTML main

00:20:10,690 --> 00:20:16,360
content renderer and so on it will look

00:20:13,570 --> 00:20:18,220
at that more in more detail next and

00:20:16,360 --> 00:20:20,440
another interesting possibility here is

00:20:18,220 --> 00:20:23,260
that a view subscriber to turn one of

00:20:20,440 --> 00:20:25,420
those semantic data objects still into a

00:20:23,260 --> 00:20:27,100
render array nothing prevents you from

00:20:25,420 --> 00:20:28,600
doing this and then because it's a

00:20:27,100 --> 00:20:30,910
render away and still not a response

00:20:28,600 --> 00:20:32,620
object the main comp a few subscriber

00:20:30,910 --> 00:20:37,510
will kick in and turn that render array

00:20:32,620 --> 00:20:39,010
into HTML for example so you could do it

00:20:37,510 --> 00:20:40,650
looked something like the tabular data

00:20:39,010 --> 00:20:43,600
object thing that I mentioned earlier

00:20:40,650 --> 00:20:45,700
that could be turned into a type table

00:20:43,600 --> 00:20:47,770
or theme table render array and then

00:20:45,700 --> 00:20:49,570
Drupal would still take care of it usual

00:20:47,770 --> 00:20:52,750
way but that means that you have the

00:20:49,570 --> 00:20:55,210
flexibility of choosing how to format

00:20:52,750 --> 00:20:56,980
and render things on multiple levels so

00:20:55,210 --> 00:21:00,960
you can do lots of interesting ways and

00:20:56,980 --> 00:21:04,090
reusing or even gradually shifting from

00:21:00,960 --> 00:21:05,620
the Drupal way of doing from them toward

00:21:04,090 --> 00:21:07,570
something else because your controllers

00:21:05,620 --> 00:21:10,210
are returning semantic data objects if

00:21:07,570 --> 00:21:12,610
you will and then maybe at one stage

00:21:10,210 --> 00:21:13,960
there they're turning those into vendor

00:21:12,610 --> 00:21:17,470
arrays and letting Drupal do the usual

00:21:13,960 --> 00:21:20,920
thing or you can do the Jason and Jason

00:21:17,470 --> 00:21:24,070
hell Jason or what everything so you

00:21:20,920 --> 00:21:25,920
have a lot of flexibility there so

00:21:24,070 --> 00:21:28,420
looking at the main content renderers

00:21:25,920 --> 00:21:30,330
these are the actual things responsible

00:21:28,420 --> 00:21:34,510
for turning a render way into a response

00:21:30,330 --> 00:21:36,160
object and the responsibilities are the

00:21:34,510 --> 00:21:40,900
basic ones that are supported in

00:21:36,160 --> 00:21:43,990
triple-a core our HTML obviously hx4 HX

00:21:40,900 --> 00:21:46,060
responses remember those dynamic loading

00:21:43,990 --> 00:21:47,710
things that Drupal 7 did use very often

00:21:46,060 --> 00:21:50,140
but in some places does that's the a

00:21:47,710 --> 00:21:52,840
text type and Drupal 8 also the ability

00:21:50,140 --> 00:21:55,360
to render any content into a dialogue or

00:21:52,840 --> 00:21:59,860
a modal dialogue so those are supported

00:21:55,360 --> 00:22:02,110
as well now this means that you could

00:21:59,860 --> 00:22:06,330
also add more main content renderers so

00:22:02,110 --> 00:22:09,049
for example PDF if you have a need for

00:22:06,330 --> 00:22:11,059
articles being printed or downloaded SPD

00:22:09,049 --> 00:22:13,100
then you could have a module that as a

00:22:11,059 --> 00:22:15,169
PDF may convert wonder or maybe even

00:22:13,100 --> 00:22:19,070
something else depends on your knees you

00:22:15,169 --> 00:22:21,249
can add as many as you like so taking a

00:22:19,070 --> 00:22:24,889
step back and looking at a big picture

00:22:21,249 --> 00:22:28,129
at a diagram this is what the entire

00:22:24,889 --> 00:22:30,529
thing looked like and it may still look

00:22:28,129 --> 00:22:32,210
a little bit intimidating but again

00:22:30,529 --> 00:22:35,570
let's look at the orientation point stop

00:22:32,210 --> 00:22:37,850
left the request comes in bottom end of

00:22:35,570 --> 00:22:40,730
requests left right getting deeper into

00:22:37,850 --> 00:22:43,340
Drupal if we flipped it around a little

00:22:40,730 --> 00:22:45,980
bit then we can see the various layers

00:22:43,340 --> 00:22:48,080
that a request passes through so first

00:22:45,980 --> 00:22:50,570
there's index of PHP which is symphony

00:22:48,080 --> 00:22:52,220
like if you will then there is HTTP

00:22:50,570 --> 00:22:53,989
kernel which is definitely symphony then

00:22:52,220 --> 00:22:56,299
there is the glue between symphony and

00:22:53,989 --> 00:22:58,279
Drupal the events next there is a

00:22:56,299 --> 00:23:00,950
controller which is where your logic

00:22:58,279 --> 00:23:03,710
lives and then depending on what the

00:23:00,950 --> 00:23:05,779
controller returns so for example as

00:23:03,710 --> 00:23:07,190
they return the response object then we

00:23:05,779 --> 00:23:09,350
skip five and six there we go

00:23:07,190 --> 00:23:11,480
immediately to the bottom because we

00:23:09,350 --> 00:23:13,549
have a response we can send it if the

00:23:11,480 --> 00:23:17,059
controller return something else i

00:23:13,549 --> 00:23:19,340
render array or an object then we still

00:23:17,059 --> 00:23:21,739
need to do some work in case of an

00:23:19,340 --> 00:23:23,330
object that's not listed here because I

00:23:21,739 --> 00:23:25,220
don't know which few subscribers you

00:23:23,330 --> 00:23:27,609
will have but in case of a render array

00:23:25,220 --> 00:23:30,499
it will go through five and then six and

00:23:27,609 --> 00:23:33,039
then we have a response object and it

00:23:30,499 --> 00:23:36,759
will go to the end and sent a response

00:23:33,039 --> 00:23:39,769
so hopefully this makes it much clearer

00:23:36,759 --> 00:23:44,149
to give you a high level picture of how

00:23:39,769 --> 00:23:47,509
triple eight processors requests now the

00:23:44,149 --> 00:23:49,909
most frequently used main content

00:23:47,509 --> 00:23:52,639
renderer is of course HTML one because

00:23:49,909 --> 00:23:57,859
the web is all about HTML so let's take

00:23:52,639 --> 00:23:59,840
a deeper look at that part so the

00:23:57,859 --> 00:24:02,090
interesting thing here is and it's new

00:23:59,840 --> 00:24:04,759
to Drupal 8 is that it supports page

00:24:02,090 --> 00:24:07,039
display variants which sounds complex

00:24:04,759 --> 00:24:10,190
again but it's just about alternative

00:24:07,039 --> 00:24:12,169
ways of rendering mein kampf zones and

00:24:10,190 --> 00:24:14,090
basically that just means alternative

00:24:12,169 --> 00:24:17,269
ways of filling the page that HTML of

00:24:14,090 --> 00:24:19,249
two examples and examples there are the

00:24:17,269 --> 00:24:21,470
block module which is about rendering

00:24:19,249 --> 00:24:22,730
the main content centrally and rendering

00:24:21,470 --> 00:24:24,740
other blocks

00:24:22,730 --> 00:24:26,410
better their pure decoration or in

00:24:24,740 --> 00:24:28,850
relation to the main console no matter

00:24:26,410 --> 00:24:30,590
but basically blocks surrounding the

00:24:28,850 --> 00:24:33,200
main towns of panels has a different way

00:24:30,590 --> 00:24:35,450
of doing things but that is another page

00:24:33,200 --> 00:24:37,850
display variant page manager is already

00:24:35,450 --> 00:24:40,520
ported to Drupal 8 and is already using

00:24:37,850 --> 00:24:43,820
this abstraction and so that is another

00:24:40,520 --> 00:24:46,640
example of a way of filling the page of

00:24:43,820 --> 00:24:49,790
the HTML tweak template so the default

00:24:46,640 --> 00:24:51,650
is simple page variant and that is

00:24:49,790 --> 00:24:54,020
basically just the main content and 0

00:24:51,650 --> 00:24:57,500
decoration so you just get a title and a

00:24:54,020 --> 00:25:00,559
main content and that's it but of course

00:24:57,500 --> 00:25:05,960
the Drupal 8 standard profile still uses

00:25:00,559 --> 00:25:07,940
to block module and therefore the blog

00:25:05,960 --> 00:25:09,110
page horrendous still being used so

00:25:07,940 --> 00:25:11,690
that's the main comfortable block

00:25:09,110 --> 00:25:13,370
surrounded the responsibilities here are

00:25:11,690 --> 00:25:15,049
basically filling the regions of the

00:25:13,370 --> 00:25:19,130
page template and ran it up into a

00:25:15,049 --> 00:25:21,230
response and it detects or determines

00:25:19,130 --> 00:25:23,450
rather the the page very into use

00:25:21,230 --> 00:25:26,510
through an event that selective page

00:25:23,450 --> 00:25:30,559
display forums event and then whichever

00:25:26,510 --> 00:25:32,570
one is selected simple blog page manager

00:25:30,559 --> 00:25:35,240
something else that one is built and

00:25:32,570 --> 00:25:36,950
then it's rendered now really

00:25:35,240 --> 00:25:38,750
interesting things here are that you can

00:25:36,950 --> 00:25:42,679
have panels page managers and other

00:25:38,750 --> 00:25:44,990
things without any hacks and that also

00:25:42,679 --> 00:25:46,940
means that you don't need the very very

00:25:44,990 --> 00:25:49,100
deep knowledge anymore that was

00:25:46,940 --> 00:25:52,100
necessary to be able to build panels and

00:25:49,100 --> 00:25:54,200
page manager in Drupal 7 because that

00:25:52,100 --> 00:25:56,600
was not easy at all it was quite a

00:25:54,200 --> 00:25:59,299
daunting undertaking and now it is just

00:25:56,600 --> 00:26:01,309
listening to an event saying I want my

00:25:59,299 --> 00:26:04,640
thing to be used not triple stupid

00:26:01,309 --> 00:26:06,980
defaulting and then you have that be use

00:26:04,640 --> 00:26:10,250
and that's all there is to it so if you

00:26:06,980 --> 00:26:12,169
if one of you has maybe in a different

00:26:10,250 --> 00:26:14,330
opinion on how pages should be

00:26:12,169 --> 00:26:16,370
constructed or what the key elements of

00:26:14,330 --> 00:26:18,470
a page are and you've never liked blocks

00:26:16,370 --> 00:26:20,929
or you'd like to experiment with

00:26:18,470 --> 00:26:23,600
something else that used to be very very

00:26:20,929 --> 00:26:28,669
difficult and now it really is a matter

00:26:23,600 --> 00:26:31,250
of probably 20 lines of code in total so

00:26:28,669 --> 00:26:34,070
it opens the door for new paradigms

00:26:31,250 --> 00:26:36,260
maybe even and maybe even something like

00:26:34,070 --> 00:26:38,420
partially decapitate its page fair

00:26:36,260 --> 00:26:40,910
so it makes between hatless drupal and

00:26:38,420 --> 00:26:43,670
something that isn't which still adds

00:26:40,910 --> 00:26:44,900
troop will render the main content but

00:26:43,670 --> 00:26:46,520
then instead of using something like

00:26:44,900 --> 00:26:49,640
blocks or panels which are still

00:26:46,520 --> 00:26:52,370
conceptually relatively similar instead

00:26:49,640 --> 00:26:54,770
you rendered block light things but

00:26:52,370 --> 00:26:57,850
using jas using react yes angular

00:26:54,770 --> 00:27:00,350
whatever you prefer client-side

00:26:57,850 --> 00:27:02,930
client-side cashing in local storage and

00:27:00,350 --> 00:27:05,480
that allows you then to render more

00:27:02,930 --> 00:27:07,730
dynamic or interactive alternative to

00:27:05,480 --> 00:27:10,100
blocks such as for example showing live

00:27:07,730 --> 00:27:11,480
statistics like that are updated while

00:27:10,100 --> 00:27:14,960
you're looking at a page of how many

00:27:11,480 --> 00:27:17,690
people are looking at it life common

00:27:14,960 --> 00:27:20,720
thing that shows up right away anything

00:27:17,690 --> 00:27:23,300
you want any fancy things anything

00:27:20,720 --> 00:27:25,960
becomes possible that you are that you

00:27:23,300 --> 00:27:32,960
have come to expect maybe of the more

00:27:25,960 --> 00:27:35,150
modern chase rich frameworks so as you

00:27:32,960 --> 00:27:36,920
can see you can vary you can create very

00:27:35,150 --> 00:27:38,870
interesting new combinations that would

00:27:36,920 --> 00:27:43,610
have been very very painful to do in the

00:27:38,870 --> 00:27:46,730
past so hopefully that will help you

00:27:43,610 --> 00:27:48,800
with some interesting experiments and so

00:27:46,730 --> 00:27:54,530
finally a little bit more about render

00:27:48,800 --> 00:27:56,840
arrays render arrays are still very much

00:27:54,530 --> 00:27:59,780
the same but they are improved in many

00:27:56,840 --> 00:28:01,550
ways and so I will cover some of the

00:27:59,780 --> 00:28:03,740
high-level points in this in these

00:28:01,550 --> 00:28:06,890
slides but now details for those i have

00:28:03,740 --> 00:28:10,190
other documentation pages on drupal dork

00:28:06,890 --> 00:28:11,930
and tarts so first assets in drupal 7

00:28:10,190 --> 00:28:14,060
what we were doing and this is very much

00:28:11,930 --> 00:28:16,280
relevant to do front end as well what we

00:28:14,060 --> 00:28:19,760
were basically doing was always loads

00:28:16,280 --> 00:28:22,430
Jake radius Andrew villages even if

00:28:19,760 --> 00:28:25,490
nothing on that page was using it and as

00:28:22,430 --> 00:28:28,550
we all know loading GS comes not without

00:28:25,490 --> 00:28:31,400
a cost parsing it also and executing it

00:28:28,550 --> 00:28:33,110
definitely so we were blocking we were

00:28:31,400 --> 00:28:35,720
delaying showing the page because we

00:28:33,110 --> 00:28:37,910
were loading that JavaScript even though

00:28:35,720 --> 00:28:39,740
we were maybe not even using it so in

00:28:37,910 --> 00:28:41,600
Drupal 8 what you what we have is

00:28:39,740 --> 00:28:44,510
dependencies between assets so we make

00:28:41,600 --> 00:28:46,670
sure that the that we only load those

00:28:44,510 --> 00:28:48,070
assets CSS or JavaScript that are

00:28:46,670 --> 00:28:51,520
actually being used

00:28:48,070 --> 00:28:53,890
that page so in Drupal 8 we have the

00:28:51,520 --> 00:28:56,320
concept of acid libraries where you

00:28:53,890 --> 00:28:58,780
declare which CSS and J's logically

00:28:56,320 --> 00:29:01,750
belong together which kind of form a

00:28:58,780 --> 00:29:07,390
logical unit with our components in some

00:29:01,750 --> 00:29:09,730
lingo a forget the word basically

00:29:07,390 --> 00:29:11,940
reusable components of CSS and

00:29:09,730 --> 00:29:14,710
JavaScript that work together and that

00:29:11,940 --> 00:29:18,520
support a semantical piece of content

00:29:14,710 --> 00:29:20,650
and then the ability to declare that

00:29:18,520 --> 00:29:23,020
that CSS and JavaScript also expects for

00:29:20,650 --> 00:29:26,050
example to that jQuery is present on the

00:29:23,020 --> 00:29:27,820
page or jQuery at once or something else

00:29:26,050 --> 00:29:29,290
you could declare your dependencies and

00:29:27,820 --> 00:29:33,100
that allows rupal to only load those

00:29:29,290 --> 00:29:35,380
things that are actually necessary the

00:29:33,100 --> 00:29:36,970
next one is cash tags as the some of you

00:29:35,380 --> 00:29:39,580
may have heard that Drupal 8 nerve ships

00:29:36,970 --> 00:29:42,280
with page caching enabled by default for

00:29:39,580 --> 00:29:44,590
anonymous users and the reason that we

00:29:42,280 --> 00:29:46,420
didn't do that in Drupal 7 was that we

00:29:44,590 --> 00:29:48,970
wouldn't have been able to reliably

00:29:46,420 --> 00:29:51,730
invalidate cached pages so basically

00:29:48,970 --> 00:29:53,890
what we did was whenever any node was

00:29:51,730 --> 00:29:57,340
updated whenever any comment was posted

00:29:53,890 --> 00:29:59,560
we cleared the entire cache so we had to

00:29:57,340 --> 00:30:01,270
rebuild every single thing and that's

00:29:59,560 --> 00:30:03,400
why it wasn't enabled by default but the

00:30:01,270 --> 00:30:04,870
reason it worked that way was because it

00:30:03,400 --> 00:30:07,120
couldn't have worked in any other way

00:30:04,870 --> 00:30:09,040
the API is were liking and this is very

00:30:07,120 --> 00:30:11,200
catch Dex come in because the problem

00:30:09,040 --> 00:30:13,690
was how to clear all cash items

00:30:11,200 --> 00:30:16,000
containing something that titled the

00:30:13,690 --> 00:30:17,830
body field whatever from node 42 the

00:30:16,000 --> 00:30:19,990
answer was it's impossible to know and

00:30:17,830 --> 00:30:22,780
that's where cash tax come in so cash

00:30:19,990 --> 00:30:25,660
tags declare this render array this

00:30:22,780 --> 00:30:27,790
piece of markup depends on this data in

00:30:25,660 --> 00:30:30,940
Drupal so when that data changes please

00:30:27,790 --> 00:30:33,280
invalidate me also so that i'm always up

00:30:30,940 --> 00:30:36,640
to date that's basically what cash tax

00:30:33,280 --> 00:30:39,790
our cash complex are related but

00:30:36,640 --> 00:30:41,380
different they are about the variation

00:30:39,790 --> 00:30:42,730
so the question is does the

00:30:41,380 --> 00:30:45,550
representation of the thing I'm

00:30:42,730 --> 00:30:48,550
rendering very permissions per URL for

00:30:45,550 --> 00:30:50,230
interface language or something the

00:30:48,550 --> 00:30:52,480
answer is cash context and they're very

00:30:50,230 --> 00:30:55,420
similar to the HTTP vary header if you

00:30:52,480 --> 00:30:57,310
know that one so a concrete example at

00:30:55,420 --> 00:30:59,110
the bottom I'm not sure if it's legible

00:30:57,310 --> 00:31:00,650
in the back but the comment says

00:30:59,110 --> 00:31:02,060
associate the user does /

00:31:00,650 --> 00:31:04,550
missions cash complex with the render

00:31:02,060 --> 00:31:06,320
array and then the logic says if the

00:31:04,550 --> 00:31:08,870
current user has the permission bad

00:31:06,320 --> 00:31:12,830
llamas this is for a suicide by petting

00:31:08,870 --> 00:31:15,980
zoo site and the market is done how many

00:31:12,830 --> 00:31:17,810
llamas will you bet today ? so that that

00:31:15,980 --> 00:31:21,410
competence is only shown if the user has

00:31:17,810 --> 00:31:23,510
the permission to pet llamas and how do

00:31:21,410 --> 00:31:25,250
we make sure that then if I have

00:31:23,510 --> 00:31:27,710
permission to pet llamas but somebody

00:31:25,250 --> 00:31:29,690
else doesn't how do we make sure that we

00:31:27,710 --> 00:31:31,730
get to see different content that's

00:31:29,690 --> 00:31:33,890
where cash complex come in we say that

00:31:31,730 --> 00:31:35,960
the content varies depending on the

00:31:33,890 --> 00:31:37,850
permissions and that then make sure that

00:31:35,960 --> 00:31:40,990
we don't show the wrong content possibly

00:31:37,850 --> 00:31:43,880
sensitive content to the wrong user and

00:31:40,990 --> 00:31:45,680
I'm bubbling this is where the things

00:31:43,880 --> 00:31:48,410
come together so we had assets we had

00:31:45,680 --> 00:31:49,670
cash tags we had cash contacts and all

00:31:48,410 --> 00:31:52,850
of those things really affect the

00:31:49,670 --> 00:31:55,970
overall HTML because for example if my

00:31:52,850 --> 00:31:57,820
fancy forum needs certain assets maybe

00:31:55,970 --> 00:32:00,830
some JavaScript to make things more

00:31:57,820 --> 00:32:04,460
usable some CSS to make it look nicer

00:32:00,830 --> 00:32:07,280
then we cannot really load that CSS and

00:32:04,460 --> 00:32:09,470
a JavaScript within the HTML for that

00:32:07,280 --> 00:32:13,280
form we have to load it at the level of

00:32:09,470 --> 00:32:16,700
the HTML itself similarly if my cache

00:32:13,280 --> 00:32:18,980
tags for a field for example so here for

00:32:16,700 --> 00:32:21,770
example i'm looking at a feel for a node

00:32:18,980 --> 00:32:23,840
and i'm showing the current use like the

00:32:21,770 --> 00:32:26,210
author for example so the author is

00:32:23,840 --> 00:32:29,600
being charmed so it is tagged with user

00:32:26,210 --> 00:32:32,390
to this is just a representation to make

00:32:29,600 --> 00:32:36,680
it easier to explain this is obviously

00:32:32,390 --> 00:32:39,650
not actual HTML the two parameters so

00:32:36,680 --> 00:32:42,020
the note that I'm rendering when that is

00:32:39,650 --> 00:32:44,570
rendered it contains the fields so it'll

00:32:42,020 --> 00:32:47,240
actually also depends on the things that

00:32:44,570 --> 00:32:50,030
the field the pants on so for example my

00:32:47,240 --> 00:32:51,950
note shows the body fields as well as

00:32:50,030 --> 00:32:54,590
the author that means that the note

00:32:51,950 --> 00:32:56,660
which is rendered also depends on the

00:32:54,590 --> 00:32:58,670
user not having a change name in the

00:32:56,660 --> 00:33:01,520
meantime so I'm tagging it with the user

00:32:58,670 --> 00:33:03,440
so the cash tax for the field bubble up

00:33:01,520 --> 00:33:05,750
to the note level but we're in rendering

00:33:03,440 --> 00:33:08,420
the block that in it is containing the

00:33:05,750 --> 00:33:10,670
note that block actually also depends on

00:33:08,420 --> 00:33:12,320
everything it contains so that that's

00:33:10,670 --> 00:33:13,760
why our bubbling comes in and it works

00:33:12,320 --> 00:33:16,220
just like JavaScript offensive

00:33:13,760 --> 00:33:17,420
just deeper into three everything deeper

00:33:16,220 --> 00:33:21,080
in the treaty bubbles up to a higher

00:33:17,420 --> 00:33:23,540
level to a yet higher level to a yet

00:33:21,080 --> 00:33:27,200
higher level till we eventually get to

00:33:23,540 --> 00:33:29,150
the HTML level and that is how we make

00:33:27,200 --> 00:33:33,380
sure that we know with absolute

00:33:29,150 --> 00:33:35,810
certainty and with complete with

00:33:33,380 --> 00:33:38,420
complete knowledge of everything that is

00:33:35,810 --> 00:33:42,020
on the page which assets we need to load

00:33:38,420 --> 00:33:44,000
which things it depends upon and by what

00:33:42,020 --> 00:33:45,500
things it should vary and this is how we

00:33:44,000 --> 00:33:47,720
can make sure the triple-eight is

00:33:45,500 --> 00:33:51,860
actually fast and faster than Drupal 7

00:33:47,720 --> 00:33:53,510
in many cases and even beyond HTML we

00:33:51,860 --> 00:33:55,550
can bubble that this is really for the

00:33:53,510 --> 00:33:57,770
backend people we can even bubble that

00:33:55,550 --> 00:34:00,650
to the response level so to a new level

00:33:57,770 --> 00:34:02,780
to a new header called the extra cash

00:34:00,650 --> 00:34:05,090
text header and that allows us to know

00:34:02,780 --> 00:34:07,580
with absolute certainty that we can

00:34:05,090 --> 00:34:10,490
invalidate all responses that contain

00:34:07,580 --> 00:34:12,919
something from node 5 whenever we modify

00:34:10,490 --> 00:34:14,510
note 5 so we can purge all of our

00:34:12,919 --> 00:34:17,480
varnish instances all over the world

00:34:14,510 --> 00:34:20,270
instantly and have that content appear

00:34:17,480 --> 00:34:24,409
instantly and not invalidate anything

00:34:20,270 --> 00:34:25,899
else so render caching that's where all

00:34:24,409 --> 00:34:28,669
of these things come together really

00:34:25,899 --> 00:34:30,649
this is basically fragment caching is

00:34:28,669 --> 00:34:33,110
what is called in many other places this

00:34:30,649 --> 00:34:35,240
allows us to put to cache expensive

00:34:33,110 --> 00:34:37,280
complex portions of the page for example

00:34:35,240 --> 00:34:41,090
a node can be quite complex maybe it

00:34:37,280 --> 00:34:42,530
contains many fields and whatnot that is

00:34:41,090 --> 00:34:46,010
expensive to gather all that information

00:34:42,530 --> 00:34:47,210
and then call the templates to put them

00:34:46,010 --> 00:34:48,919
all on the right order and structure

00:34:47,210 --> 00:34:50,480
this is where your Android Cashin comes

00:34:48,919 --> 00:34:52,730
in and it uses all the previous things

00:34:50,480 --> 00:34:57,020
to make sure that we can cache correctly

00:34:52,730 --> 00:35:00,020
and invalidate correctly and so on and

00:34:57,020 --> 00:35:01,670
if you're interested this is where the

00:35:00,020 --> 00:35:05,170
intersection between front-end and

00:35:01,670 --> 00:35:05,170
back-end definitely is very present

00:35:06,280 --> 00:35:12,610
these things cash tax context and assets

00:35:09,430 --> 00:35:15,350
they're all present and they're all very

00:35:12,610 --> 00:35:17,210
understandable once you've started to

00:35:15,350 --> 00:35:19,070
use them but it would be great if we

00:35:17,210 --> 00:35:20,450
could visualize it while developing so

00:35:19,070 --> 00:35:21,800
that you could see oh this portion of

00:35:20,450 --> 00:35:23,900
the page actually depends on these

00:35:21,800 --> 00:35:26,000
assets that's also very valuable for

00:35:23,900 --> 00:35:26,770
from them people to make sure that they

00:35:26,000 --> 00:35:29,050
haven't

00:35:26,770 --> 00:35:31,300
associated the wrong assets CSS and

00:35:29,050 --> 00:35:33,100
JavaScript with something that actually

00:35:31,300 --> 00:35:34,900
doesn't need it but then freaked out

00:35:33,100 --> 00:35:37,270
forgot to add it to the one that does

00:35:34,900 --> 00:35:41,550
need it so I've them I've created a

00:35:37,270 --> 00:35:43,690
prototype a very very early prototype of

00:35:41,550 --> 00:35:45,130
visualizing that three of information

00:35:43,690 --> 00:35:47,800
and how it all bubbles up so you can see

00:35:45,130 --> 00:35:49,750
where the associated assets are coming

00:35:47,800 --> 00:35:52,420
from and where the cash dykes are coming

00:35:49,750 --> 00:35:53,640
from and so on so I'm not a great from

00:35:52,420 --> 00:35:55,930
the developer so it would be great if

00:35:53,640 --> 00:35:58,120
somebody is also very interested in

00:35:55,930 --> 00:36:00,370
passion about this this is using CSS 3d

00:35:58,120 --> 00:36:03,280
and CSS transitions so the fanciest

00:36:00,370 --> 00:36:07,270
stuff around so if you're interested

00:36:03,280 --> 00:36:12,120
please ping me and so that's all i've

00:36:07,270 --> 00:36:12,120
had so if you have any questions issues

00:36:20,850 --> 00:36:23,850
may

00:37:08,420 --> 00:37:13,430
it is very much supported by the render

00:37:11,040 --> 00:37:16,730
pipeline but at this stage not yet by

00:37:13,430 --> 00:37:21,780
blocks for example the problem is that

00:37:16,730 --> 00:37:24,450
we don't have a solid enough way to know

00:37:21,780 --> 00:37:27,000
which things a block depends bone so

00:37:24,450 --> 00:37:29,130
maybe a block is shown that depends on

00:37:27,000 --> 00:37:31,230
the node because a block is showing for

00:37:29,130 --> 00:37:33,480
example the file attachments to that

00:37:31,230 --> 00:37:35,100
node but then the block needs to be

00:37:33,480 --> 00:37:38,310
aware about which node is being shown

00:37:35,100 --> 00:37:39,660
and that kind of interaction knowing

00:37:38,310 --> 00:37:42,150
those dependencies knowing that it

00:37:39,660 --> 00:37:43,830
depends on that note is being shown that

00:37:42,150 --> 00:37:45,570
is where the current problem lies but in

00:37:43,830 --> 00:37:47,700
general yes the render pipeline

00:37:45,570 --> 00:37:49,680
completely supports that it's just that

00:37:47,700 --> 00:37:52,350
for example four blocks that is where

00:37:49,680 --> 00:37:53,970
it's still a bit hairy and unclear if

00:37:52,350 --> 00:37:58,010
that will actually happen but work is

00:37:53,970 --> 00:37:58,010
being done right now to make that happen

00:38:17,690 --> 00:38:23,480
so the market that i was showing right i

00:38:21,090 --> 00:38:28,590
think you're specifically referring to

00:38:23,480 --> 00:38:31,800
this possibly yeah so this is just a a

00:38:28,590 --> 00:38:33,690
way of conveying how it works but you

00:38:31,800 --> 00:38:35,940
have to imagine that each of those tags

00:38:33,690 --> 00:38:39,030
are actually render arrays nested render

00:38:35,940 --> 00:38:41,220
race so hv of arrays which is what

00:38:39,030 --> 00:38:43,520
Drupal has always used to represent

00:38:41,220 --> 00:38:47,340
which things should be rendered and so

00:38:43,520 --> 00:38:49,920
besides markup and maybe declaring which

00:38:47,340 --> 00:38:53,010
theme function or rather which template

00:38:49,920 --> 00:38:55,140
to use there is also a parent cash thing

00:38:53,010 --> 00:38:58,130
which contains that metadata and point

00:38:55,140 --> 00:38:58,130
attached for assets

00:39:09,950 --> 00:39:22,860
okay can you repeat that the final

00:39:12,060 --> 00:39:24,570
sentence fields and entities yes

00:39:22,860 --> 00:39:26,670
absolutely that works perfectly fine

00:39:24,570 --> 00:39:28,950
better they said the problem with boxes

00:39:26,670 --> 00:39:31,530
of many or at least a bunch of them

00:39:28,950 --> 00:39:33,330
depend on some things on the page and

00:39:31,530 --> 00:39:35,040
that is where its area where it's hairy

00:39:33,330 --> 00:39:38,750
but if you have blocks that are

00:39:35,040 --> 00:39:38,750
self-contained then yes absolutely

00:40:33,869 --> 00:40:40,000
interesting question I like the analogy

00:40:36,400 --> 00:40:42,039
to food shelter but are you sure that

00:40:40,000 --> 00:40:45,160
you're referring to the view event

00:40:42,039 --> 00:40:48,190
subscriber and not the response okay so

00:40:45,160 --> 00:40:52,240
were you asking about the pirate example

00:40:48,190 --> 00:40:53,769
er harder one yeah okay no definitely

00:40:52,240 --> 00:40:55,630
there won't be a whole lot of those

00:40:53,769 --> 00:40:58,740
that's why I gave the kind of silly

00:40:55,630 --> 00:41:02,079
example of the pipe talk as a pirate day

00:40:58,740 --> 00:41:04,809
annually so no I wouldn't expect her to

00:41:02,079 --> 00:41:09,250
be many currently there is one in core

00:41:04,809 --> 00:41:11,730
that is used only in one special case so

00:41:09,250 --> 00:41:15,880
no there there wouldn't even be many but

00:41:11,730 --> 00:41:17,890
maybe as a way of quickly hacking things

00:41:15,880 --> 00:41:20,529
like you could even do very very nasty

00:41:17,890 --> 00:41:22,329
things like replacing a certain class

00:41:20,529 --> 00:41:24,730
that you dislike of the front person and

00:41:22,329 --> 00:41:26,680
then just do a string replace and

00:41:24,730 --> 00:41:29,230
replace all of them in your HTML source

00:41:26,680 --> 00:41:31,480
it's possible but no I wouldn't expect

00:41:29,230 --> 00:41:35,200
there to be a whole love it should be

00:41:31,480 --> 00:41:40,990
indeed for a very special cases or it as

00:41:35,200 --> 00:41:43,779
a last resort probably all right looks

00:41:40,990 --> 00:41:47,309
like there are no more questions thank

00:41:43,779 --> 00:41:47,309
you very much hope you like

00:42:04,790 --> 00:42:06,850
you

00:42:10,870 --> 00:42:14,250

YouTube URL: https://www.youtube.com/watch?v=CIxYGqY8nPs


