Title: DrupalCon Los Angeles 2015: A "plain Drupal English" guide to the remaining Drupal 8 criticals
Publication date: 2015-05-13
Playlist: DrupalCon Los Angeles - May 2015
Description: 
	At the time of DrupalCon LA, we will most likely have some number of critical Drupal 8 issues remaining. This talk will provide a run-down of what remains, providing some necesasry background/context, akin to the blog post at Webchick's "plain Drupal English" Guide to the Remaining Drupal 8 Critical Issues: DrupalCon BogotÃ¡ Edition. The hope is that this will help people coming to the DrupalCon Sprints hit the ground running to help push us closer to release!
Captions: 
	00:00:00,000 --> 00:00:05,640
magic all right welcome everybody we are

00:00:03,419 --> 00:00:08,580
here to talk today about a plain English

00:00:05,640 --> 00:00:10,740
guide to the remaining jubilate release

00:00:08,580 --> 00:00:12,840
blockers so this isn't actually plain

00:00:10,740 --> 00:00:13,980
English so if you are a lit major or

00:00:12,840 --> 00:00:15,599
something and I've never installed

00:00:13,980 --> 00:00:17,699
drupal before this won't make any sense

00:00:15,599 --> 00:00:19,170
but if you know duple 7 or you've done a

00:00:17,699 --> 00:00:21,330
little bit with drupal aids the intent

00:00:19,170 --> 00:00:22,760
is to kind of describe what's left in

00:00:21,330 --> 00:00:24,960
front of drupal 8 to get it to release

00:00:22,760 --> 00:00:26,820
because it's really hard to grok that

00:00:24,960 --> 00:00:29,369
list of issues and sort of understand

00:00:26,820 --> 00:00:31,650
what all the titles mean so I spent the

00:00:29,369 --> 00:00:34,079
last like month reading issue summaries

00:00:31,650 --> 00:00:36,120
so you don't have to so that is what

00:00:34,079 --> 00:00:37,890
this talk is going to be about so first

00:00:36,120 --> 00:00:39,420
I want to cover some facts a couple of

00:00:37,890 --> 00:00:40,469
these Drees already covered Tim this

00:00:39,420 --> 00:00:43,320
morning so I'll go through this pretty

00:00:40,469 --> 00:00:47,730
quick when will Drupal 8 be released

00:00:43,320 --> 00:00:49,590
anyone when it's ready that's right

00:00:47,730 --> 00:00:51,270
there's my little troll face here and

00:00:49,590 --> 00:00:55,469
then of course the follow-up a question

00:00:51,270 --> 00:00:56,430
is when is when it's ready yeah so when

00:00:55,469 --> 00:00:58,289
is when it's ready to little more

00:00:56,430 --> 00:01:00,930
complicated so it's some time after this

00:00:58,289 --> 00:01:03,690
graph hits zero this graph is currently

00:01:00,930 --> 00:01:06,299
at 26 as of fifteen minutes ago it might

00:01:03,690 --> 00:01:08,880
be 25 or 30 now I don't know because it

00:01:06,299 --> 00:01:12,030
changes a lot what happens when that

00:01:08,880 --> 00:01:14,520
number gets to zero is we go from betas

00:01:12,030 --> 00:01:18,240
to our seas and then from our seas 28

00:01:14,520 --> 00:01:20,189
point 0 point 0 and so as long as that

00:01:18,240 --> 00:01:21,750
number of critical issues as more than 0

00:01:20,189 --> 00:01:23,909
we're going to keep rolling monthly beta

00:01:21,750 --> 00:01:25,619
releases so you've seen beta 10 came out

00:01:23,909 --> 00:01:30,600
a little bit before drupalcon beta 11

00:01:25,619 --> 00:01:32,189
will come out May 27 yes something like

00:01:30,600 --> 00:01:33,869
that so roughly monthly we try and get a

00:01:32,189 --> 00:01:36,960
beta release out so people can continue

00:01:33,869 --> 00:01:40,140
testing if the critical issues does get

00:01:36,960 --> 00:01:44,369
20 I mean when obviously meant win

00:01:40,140 --> 00:01:47,040
anyway then what we'll do is we'll start

00:01:44,369 --> 00:01:48,600
issuing bi-weekly release candidates and

00:01:47,040 --> 00:01:50,549
what we'll do is align those with a

00:01:48,600 --> 00:01:51,840
Drupal 7 release windows so Drupal 7 has

00:01:50,549 --> 00:01:53,189
to release my nose I don't know if

00:01:51,840 --> 00:01:54,810
people generally know this but one is a

00:01:53,189 --> 00:01:56,579
security release which I believe is the

00:01:54,810 --> 00:01:57,719
third wednesday of the month and the

00:01:56,579 --> 00:01:59,280
other one is just a bug-fix release

00:01:57,719 --> 00:02:02,490
which is the first wednesday of the

00:01:59,280 --> 00:02:03,750
month so we just adds Drupal 7.37 go out

00:02:02,490 --> 00:02:05,310
last week that's because it was the

00:02:03,750 --> 00:02:06,750
first wednesday of the month and there

00:02:05,310 --> 00:02:08,729
were a bunch of bug fixes that they

00:02:06,750 --> 00:02:10,649
wanted to get out there so what we would

00:02:08,729 --> 00:02:13,710
do is coincide with those by equally

00:02:10,649 --> 00:02:15,770
reason to rc1 rc2 rc3 it's

00:02:13,710 --> 00:02:18,360
biweekly to get a faster testing cycle

00:02:15,770 --> 00:02:19,890
and then well release candidates

00:02:18,360 --> 00:02:21,960
happening we're really only going to

00:02:19,890 --> 00:02:23,520
commit critical fixes because we don't

00:02:21,960 --> 00:02:24,600
want the codebase shifting around that

00:02:23,520 --> 00:02:26,880
makes it harder to catch where

00:02:24,600 --> 00:02:28,350
regressions were introduced so the hope

00:02:26,880 --> 00:02:30,510
is that the RC period can be pretty

00:02:28,350 --> 00:02:32,940
short if we found all the bugs ahead of

00:02:30,510 --> 00:02:35,700
time because we're going to only be

00:02:32,940 --> 00:02:37,770
committing other critical fixes or super

00:02:35,700 --> 00:02:39,390
super non-controversial things like Docs

00:02:37,770 --> 00:02:40,920
or things that will only make things

00:02:39,390 --> 00:02:43,860
better and not possibly break anything

00:02:40,920 --> 00:02:45,750
and then it's not necessarily a sort of

00:02:43,860 --> 00:02:47,400
specific time frame we kind of agreed

00:02:45,750 --> 00:02:50,370
that you know as we we're going to

00:02:47,400 --> 00:02:52,380
monitor how critical issues come in and

00:02:50,370 --> 00:02:53,940
if it seems like you know they're coming

00:02:52,380 --> 00:02:55,980
in at a rate and sort of a nature

00:02:53,940 --> 00:02:57,840
meaning like a critical bug that's like

00:02:55,980 --> 00:02:59,340
a crap we just missed test coverage for

00:02:57,840 --> 00:03:02,040
that thing it was a one-line change

00:02:59,340 --> 00:03:04,860
let's get it done versus oh crap it

00:03:02,040 --> 00:03:06,810
turns out we can't ship with you know

00:03:04,860 --> 00:03:08,610
nodes or something you know like that

00:03:06,810 --> 00:03:11,100
would be a different type of critical

00:03:08,610 --> 00:03:12,840
issue um we'll we'll set a release date

00:03:11,100 --> 00:03:14,370
at least three weeks later and we want a

00:03:12,840 --> 00:03:17,340
three-week buffer because that allows us

00:03:14,370 --> 00:03:20,100
to plan parties so very interested in

00:03:17,340 --> 00:03:21,870
that and then the third faq i usually

00:03:20,100 --> 00:03:23,400
get is how can i help actually most of

00:03:21,870 --> 00:03:25,170
the time i also get why aren't you done

00:03:23,400 --> 00:03:27,150
yet and the answer is the same if you

00:03:25,170 --> 00:03:30,000
have more money than time and you want

00:03:27,150 --> 00:03:31,800
to see drupal 8 come out faster the d8

00:03:30,000 --> 00:03:34,710
accelerate fund is a great place to put

00:03:31,800 --> 00:03:35,880
your money what are we funding with d8

00:03:34,710 --> 00:03:37,320
accelerate we're finding a lot of

00:03:35,880 --> 00:03:38,610
different things a lot of these bullet

00:03:37,320 --> 00:03:40,290
points will also come up in the course

00:03:38,610 --> 00:03:41,430
of this presentation but these are

00:03:40,290 --> 00:03:43,170
really big important things like

00:03:41,430 --> 00:03:45,240
performance improvements security fixes

00:03:43,170 --> 00:03:47,250
which funding the beta 2 beta upgrade

00:03:45,240 --> 00:03:48,570
paths all kinds of really big important

00:03:47,250 --> 00:03:51,180
things to make sure that when Drupal 8

00:03:48,570 --> 00:03:52,740
gets out its high quality its secure his

00:03:51,180 --> 00:03:55,470
performance and it does everything you

00:03:52,740 --> 00:03:57,510
needed to do we're also funding a number

00:03:55,470 --> 00:03:58,620
of really key contributors people who

00:03:57,510 --> 00:04:00,480
are involved in cordovan probably

00:03:58,620 --> 00:04:01,830
recognize most of these people these are

00:04:00,480 --> 00:04:03,960
the people been pushing Drupal 8 for a

00:04:01,830 --> 00:04:05,340
really really long time and now it's

00:04:03,960 --> 00:04:06,780
nice because we're able to direct

00:04:05,340 --> 00:04:09,120
community funding towards their efforts

00:04:06,780 --> 00:04:10,860
so it's really really cool so if you

00:04:09,120 --> 00:04:12,810
have more time than money that's great

00:04:10,860 --> 00:04:14,970
here is what is left oh one more thing

00:04:12,810 --> 00:04:17,100
on dat accelerate if you donate a

00:04:14,970 --> 00:04:18,840
hundred dollars to my fund or more I

00:04:17,100 --> 00:04:21,960
will draw you a little picture and tweet

00:04:18,840 --> 00:04:23,669
it out to people so just a little thing

00:04:21,960 --> 00:04:25,860
because my fundraiser is kind of sad

00:04:23,669 --> 00:04:26,560
it's got like 545 dollars because I

00:04:25,860 --> 00:04:30,100
don't know biz

00:04:26,560 --> 00:04:32,050
so anyway um but I that's sad but

00:04:30,100 --> 00:04:33,940
awesome so anyway if you want to donate

00:04:32,050 --> 00:04:35,320
some stuff there so I'm going to run

00:04:33,940 --> 00:04:38,050
through the remaining critical issues I

00:04:35,320 --> 00:04:40,000
had a little key so the ones in yellow

00:04:38,050 --> 00:04:42,310
are upgrade path blockers so these are

00:04:40,000 --> 00:04:45,340
ones we cannot ship a Drupal 8 beta 2

00:04:42,310 --> 00:04:46,930
beta and soon RC RC upgrade path without

00:04:45,340 --> 00:04:48,700
fixing those are probably the most

00:04:46,930 --> 00:04:50,700
critical ones to get out of the way

00:04:48,700 --> 00:04:52,810
because they affect data integrity

00:04:50,700 --> 00:04:55,270
there's some stuff that it's just like

00:04:52,810 --> 00:04:57,610
we can't progress making Drupal 8 easier

00:04:55,270 --> 00:04:59,200
to install until those are done a

00:04:57,610 --> 00:05:01,060
blocker is the next thing you want to

00:04:59,200 --> 00:05:02,860
make sure is gone because those things

00:05:01,060 --> 00:05:05,500
block other critical issues from getting

00:05:02,860 --> 00:05:08,050
in so until critical issue X is gone we

00:05:05,500 --> 00:05:09,970
can't fix critical issue why blocked is

00:05:08,050 --> 00:05:11,590
the inverse of that means it's blocked

00:05:09,970 --> 00:05:13,990
on something else so we can't move on it

00:05:11,590 --> 00:05:15,550
yet but a lot of times you can still you

00:05:13,990 --> 00:05:16,660
know say recue patches or stuff like

00:05:15,550 --> 00:05:18,880
that to try and get those things done

00:05:16,660 --> 00:05:20,950
and then finally triage their ones where

00:05:18,880 --> 00:05:22,960
the core committers meet about every two

00:05:20,950 --> 00:05:24,610
weeks and go through the list of

00:05:22,960 --> 00:05:25,840
criticals and really tightly make sure

00:05:24,610 --> 00:05:27,460
that whatever is in that list is

00:05:25,840 --> 00:05:28,780
actually critical the ones with the

00:05:27,460 --> 00:05:30,130
little green fingers are one where we've

00:05:28,780 --> 00:05:31,810
talked about them then we know that

00:05:30,130 --> 00:05:33,940
they're critical and they're going to

00:05:31,810 --> 00:05:35,440
stay in that list others maybe get

00:05:33,940 --> 00:05:36,729
downgraded to major or maybe stay there

00:05:35,440 --> 00:05:38,890
it's a little less clear but there's

00:05:36,729 --> 00:05:40,360
still good things to fix so let's start

00:05:38,890 --> 00:05:42,220
with configuration management because

00:05:40,360 --> 00:05:44,350
there's only one issue under whoops

00:05:42,220 --> 00:05:45,789
configuration management which is this

00:05:44,350 --> 00:05:46,990
one to validate configuration

00:05:45,789 --> 00:05:49,419
dependencies before importing

00:05:46,990 --> 00:05:52,750
configuration so how many people have

00:05:49,419 --> 00:05:54,729
used cmi and Drupal 8 before yeah the

00:05:52,750 --> 00:05:58,060
people who wrote cmi I have used it

00:05:54,729 --> 00:05:59,650
that's good yes so okay a few people so

00:05:58,060 --> 00:06:02,200
this slide is a lot let me just explain

00:05:59,650 --> 00:06:03,340
how it works so you have your dev you

00:06:02,200 --> 00:06:04,630
know and you're clicking around and

00:06:03,340 --> 00:06:05,500
you're doing views you're doing content

00:06:04,630 --> 00:06:07,780
types and doing all kinds of things

00:06:05,500 --> 00:06:09,460
every time that you click Save that

00:06:07,780 --> 00:06:11,289
stuff is being added to what's called

00:06:09,460 --> 00:06:13,720
the active store which in Drupal 8 is

00:06:11,289 --> 00:06:15,010
defaults to being in the database but it

00:06:13,720 --> 00:06:17,080
can be in your file system or can be a

00:06:15,010 --> 00:06:18,669
lots of other places when you're done

00:06:17,080 --> 00:06:20,139
configuring things around you go to a

00:06:18,669 --> 00:06:21,850
configuration management screen and you

00:06:20,139 --> 00:06:23,440
hit click the export button you can

00:06:21,850 --> 00:06:25,180
either export your entire configuration

00:06:23,440 --> 00:06:26,919
you can export one particular

00:06:25,180 --> 00:06:28,120
configuration if you were working on

00:06:26,919 --> 00:06:30,970
just your module or something like that

00:06:28,120 --> 00:06:33,130
that gets put into a tar file with a

00:06:30,970 --> 00:06:35,020
whole bunch of yamla files which is kind

00:06:33,130 --> 00:06:37,390
of like info files except they're like a

00:06:35,020 --> 00:06:38,800
standard that we didn't invent and then

00:06:37,390 --> 00:06:40,510
you move that over your production

00:06:38,800 --> 00:06:41,890
environment you do the in

00:06:40,510 --> 00:06:43,600
verse where instead of exporting through

00:06:41,890 --> 00:06:45,460
the UI you import through the UI and

00:06:43,600 --> 00:06:47,740
what it'll do is it'll show you a screen

00:06:45,460 --> 00:06:49,390
that says here's what changed and you

00:06:47,740 --> 00:06:50,590
can view with diff and see the changes

00:06:49,390 --> 00:06:52,330
and stuff and you say are you sure you

00:06:50,590 --> 00:06:54,400
want to do this and you say yes and then

00:06:52,330 --> 00:06:56,260
when you do that whatever happened in

00:06:54,400 --> 00:06:58,090
your in your configuration of the other

00:06:56,260 --> 00:06:59,380
site gets bumped into your production

00:06:58,090 --> 00:07:02,130
active staging directory and that

00:06:59,380 --> 00:07:04,240
becomes your new configuration um and

00:07:02,130 --> 00:07:05,860
for those who don't like using you eyes

00:07:04,240 --> 00:07:08,110
there's drush integration for all of

00:07:05,860 --> 00:07:11,500
this so what this issue is about is just

00:07:08,110 --> 00:07:13,150
before step 3 here just before your

00:07:11,500 --> 00:07:14,530
configuration moves from staging to

00:07:13,150 --> 00:07:16,480
active and it blows away all of your

00:07:14,530 --> 00:07:18,190
existing configuration on your

00:07:16,480 --> 00:07:19,360
production environment we're going to do

00:07:18,190 --> 00:07:20,680
all of the validation of the

00:07:19,360 --> 00:07:23,500
configuration dependency so you don't

00:07:20,680 --> 00:07:25,330
end up with say pulling in a view that

00:07:23,500 --> 00:07:27,910
actually references a content type that

00:07:25,330 --> 00:07:29,050
doesn't exist yet or something bad like

00:07:27,910 --> 00:07:30,850
that so that you could potentially end

00:07:29,050 --> 00:07:33,430
up with errors on your production

00:07:30,850 --> 00:07:35,290
website which nobody wants so that one

00:07:33,430 --> 00:07:36,280
is under active development but if

00:07:35,290 --> 00:07:37,630
you're interested in configuration

00:07:36,280 --> 00:07:40,870
management that's a good one to jump

00:07:37,630 --> 00:07:42,970
into multilingual is another area where

00:07:40,870 --> 00:07:45,400
there's a couple of issues pretty much

00:07:42,970 --> 00:07:47,410
rudy from the same thing so those are

00:07:45,400 --> 00:07:49,300
those I'm gonna post these slides after

00:07:47,410 --> 00:07:51,310
so don't bother writing down any noo

00:07:49,300 --> 00:07:53,980
tidies unless you want to really impress

00:07:51,310 --> 00:07:57,940
people at trivia night yeah good old

00:07:53,980 --> 00:08:01,570
2486 177 and that's the drag so so what

00:07:57,940 --> 00:08:03,400
is 2486 177 about it's about the fact

00:08:01,570 --> 00:08:05,410
that in Drupal 7 the way translations

00:08:03,400 --> 00:08:07,420
worked is every translation was a

00:08:05,410 --> 00:08:09,580
separate node so you had your English

00:08:07,420 --> 00:08:11,470
node over here is node 1 and your French

00:08:09,580 --> 00:08:15,150
node over here is node 2 you can tell

00:08:11,470 --> 00:08:15,150
it's French because the cat has a beret

00:08:15,540 --> 00:08:21,160
in Drupal 8 we use entity and field

00:08:18,940 --> 00:08:22,600
translations so you can dictate on a per

00:08:21,160 --> 00:08:25,570
field basis whether something is

00:08:22,600 --> 00:08:27,460
translatable or not but everything comes

00:08:25,570 --> 00:08:29,080
to the same node and the way you show

00:08:27,460 --> 00:08:30,730
the English versus the French node is

00:08:29,080 --> 00:08:33,430
you base it based on the language

00:08:30,730 --> 00:08:35,860
information in the request and so that's

00:08:33,430 --> 00:08:37,270
nice because sometimes you don't want

00:08:35,860 --> 00:08:39,430
the French version to have a cat with a

00:08:37,270 --> 00:08:40,900
beret sometimes the French version of

00:08:39,430 --> 00:08:42,640
your article is exactly the same as the

00:08:40,900 --> 00:08:44,410
English version of your article and that

00:08:42,640 --> 00:08:45,580
it's a blog post about Paris or

00:08:44,410 --> 00:08:47,740
something and you still want the same

00:08:45,580 --> 00:08:49,240
image so you can decide don't make

00:08:47,740 --> 00:08:50,920
images translatable so you don't have to

00:08:49,240 --> 00:08:53,530
keep uploading things over and over use

00:08:50,920 --> 00:08:53,950
the same image across translations it's

00:08:53,530 --> 00:08:56,590
very can

00:08:53,950 --> 00:08:58,840
that way however the problem is there's

00:08:56,590 --> 00:09:01,750
a variety of you eyes in core one is the

00:08:58,840 --> 00:09:03,850
admin content view another one is the

00:09:01,750 --> 00:09:06,610
the actual delete button on the note

00:09:03,850 --> 00:09:08,530
itself that assumes things still work

00:09:06,610 --> 00:09:10,450
the old way so you see a button that

00:09:08,530 --> 00:09:15,370
says delete this translation what would

00:09:10,450 --> 00:09:17,410
you expect that button to do you would

00:09:15,370 --> 00:09:19,330
expect it to delete one translation and

00:09:17,410 --> 00:09:21,250
you would be wrong because what it does

00:09:19,330 --> 00:09:23,800
is it deletes the node which of course

00:09:21,250 --> 00:09:25,300
is all of the translations so that is

00:09:23,800 --> 00:09:27,400
why this is a critical issue because

00:09:25,300 --> 00:09:29,260
it's a data integrity issue because you

00:09:27,400 --> 00:09:31,810
should not delete all translations when

00:09:29,260 --> 00:09:33,580
you meant to just delete one and so

00:09:31,810 --> 00:09:36,610
there's a critical issue open to fix

00:09:33,580 --> 00:09:38,230
this we have a whole slew of things

00:09:36,610 --> 00:09:40,330
around performance is anyone in here

00:09:38,230 --> 00:09:44,770
fancy themselves a performance nerd

00:09:40,330 --> 00:09:48,400
and/or awesome person right go find some

00:09:44,770 --> 00:09:50,080
and tell them to get in here all right

00:09:48,400 --> 00:09:51,580
so there's a bunch of sub goals

00:09:50,080 --> 00:09:53,170
underneath performance I'll get into

00:09:51,580 --> 00:09:54,910
each one of those so bold number one is

00:09:53,170 --> 00:09:56,680
just simply figure out where drupal 8 is

00:09:54,910 --> 00:09:58,960
slow we know Drupal 8 is slower than

00:09:56,680 --> 00:10:00,550
Drupal 7 and some of that is just the

00:09:58,960 --> 00:10:02,680
nature of you know it's got more

00:10:00,550 --> 00:10:04,480
abstraction its object oriented is that

00:10:02,680 --> 00:10:06,400
da da da and we have a bunch of

00:10:04,480 --> 00:10:07,960
strategies around how to combat that

00:10:06,400 --> 00:10:09,970
that we're working actively towards but

00:10:07,960 --> 00:10:12,640
someone is just really dumb stuff right

00:10:09,970 --> 00:10:14,260
and so the way to find really dumb stuff

00:10:12,640 --> 00:10:15,880
is to help with profiling and

00:10:14,260 --> 00:10:18,550
benchmarking so and give you like a

00:10:15,880 --> 00:10:19,990
lightning fast tour of some of the tools

00:10:18,550 --> 00:10:21,490
of the trade that people use when

00:10:19,990 --> 00:10:23,260
they're doing profiling and benchmarking

00:10:21,490 --> 00:10:24,670
and then you can sit with wim Lear's and

00:10:23,260 --> 00:10:28,210
he can explain it much better than I can

00:10:24,670 --> 00:10:30,700
so XH prof this is one that a lot of

00:10:28,210 --> 00:10:33,850
people use and what this does is it

00:10:30,700 --> 00:10:35,560
measures the the wall time meaning like

00:10:33,850 --> 00:10:37,600
if you looked at the clock on the wall

00:10:35,560 --> 00:10:39,160
how long did it actually take for an

00:10:37,600 --> 00:10:41,530
entire page to load and it breaks it

00:10:39,160 --> 00:10:43,420
down per function so you know that this

00:10:41,530 --> 00:10:45,460
function took this many milliseconds to

00:10:43,420 --> 00:10:47,380
or micro seconds to execute this

00:10:45,460 --> 00:10:50,470
function inside of it took this much and

00:10:47,380 --> 00:10:52,330
through that you can try and find you no

00:10:50,470 --> 00:10:54,880
problem areas and things that are taking

00:10:52,330 --> 00:10:56,710
longer than others it's neat because you

00:10:54,880 --> 00:10:58,090
can look at either just one function or

00:10:56,710 --> 00:10:59,860
every this function and everything

00:10:58,090 --> 00:11:02,170
inside of it so you can kind of help

00:10:59,860 --> 00:11:05,530
escalate really bad performance issues

00:11:02,170 --> 00:11:07,490
the UI is awful you can see it there my

00:11:05,530 --> 00:11:09,740
cat could design a better UI

00:11:07,490 --> 00:11:10,910
but it is very powerful and when I see

00:11:09,740 --> 00:11:13,850
people who actually know how to use this

00:11:10,910 --> 00:11:14,870
thing use it it's really cool and sent

00:11:13,850 --> 00:11:17,089
the other thing that seemed about this

00:11:14,870 --> 00:11:19,130
is you can show diffs between two runs

00:11:17,089 --> 00:11:21,050
so you can say before the patch did this

00:11:19,130 --> 00:11:22,820
after the patch it did this and that was

00:11:21,050 --> 00:11:25,790
a difference plus or minus of this many

00:11:22,820 --> 00:11:27,649
seconds flame grass is a way of

00:11:25,790 --> 00:11:30,380
visualizing SH prof data where it'll

00:11:27,649 --> 00:11:33,230
take a variety of calls so you can have

00:11:30,380 --> 00:11:34,160
one peso just really bad because that

00:11:33,230 --> 00:11:36,560
was the pay's low where they are

00:11:34,160 --> 00:11:38,120
repopulating some cash this will take a

00:11:36,560 --> 00:11:39,740
variety of calls and what will you end

00:11:38,120 --> 00:11:42,260
up with seeing is calls that take a

00:11:39,740 --> 00:11:44,029
really long time or calls that happen

00:11:42,260 --> 00:11:46,190
over and over again will be longer on

00:11:44,029 --> 00:11:47,990
the on the flame graph so you can kind

00:11:46,190 --> 00:11:49,220
of draw your attention to them if

00:11:47,990 --> 00:11:51,589
they're longer than what you expect you

00:11:49,220 --> 00:11:53,480
can say ho you know why is it taking you

00:11:51,589 --> 00:11:55,279
know this much of the total request time

00:11:53,480 --> 00:11:56,720
to like generate a block that doesn't

00:11:55,279 --> 00:11:59,540
make any sense and kind of go in there

00:11:56,720 --> 00:12:01,130
and figure out what's happening Apache

00:11:59,540 --> 00:12:03,220
benches another tool use for

00:12:01,130 --> 00:12:06,290
benchmarking what that will do is

00:12:03,220 --> 00:12:08,300
basically simulate your web server being

00:12:06,290 --> 00:12:10,339
hit by multiple requests at the same

00:12:08,300 --> 00:12:12,529
time so you can say do it with this much

00:12:10,339 --> 00:12:14,149
concurrency do it this number of times

00:12:12,529 --> 00:12:16,339
and you can compare before and after

00:12:14,149 --> 00:12:18,110
what you were getting on average that

00:12:16,339 --> 00:12:19,910
sort of thing so so these are just a few

00:12:18,110 --> 00:12:22,700
tools that people use with benchmarking

00:12:19,910 --> 00:12:23,990
and profiling and I'm unfortunately up

00:12:22,700 --> 00:12:25,550
against wind leaders right now who's

00:12:23,990 --> 00:12:27,140
talking about cool caching things so

00:12:25,550 --> 00:12:28,790
I'll end that part pretty quick so you

00:12:27,140 --> 00:12:32,000
can go over there if that's more

00:12:28,790 --> 00:12:34,070
interesting so goal number two is to fix

00:12:32,000 --> 00:12:35,660
the known areas of slowness so obviously

00:12:34,070 --> 00:12:37,910
when we find dumb things and we want to

00:12:35,660 --> 00:12:39,740
fix them the known areas of stillness

00:12:37,910 --> 00:12:41,950
only become critical if they meet a

00:12:39,740 --> 00:12:44,779
variety of criteria and some of it is

00:12:41,950 --> 00:12:47,029
you know it saves like I think it's

00:12:44,779 --> 00:12:49,850
greater than 10 milliseconds on a cold

00:12:47,029 --> 00:12:51,770
cash request some of it is you know this

00:12:49,850 --> 00:12:53,480
is something that has a pretty sizable

00:12:51,770 --> 00:12:54,890
improvement and it breaks API so we

00:12:53,480 --> 00:12:56,209
wouldn't want to do it after eight point

00:12:54,890 --> 00:12:57,920
oh and there's a variety of different

00:12:56,209 --> 00:12:59,300
things so there's a couple of these that

00:12:57,920 --> 00:13:01,160
are critical there's a lot of these that

00:12:59,300 --> 00:13:04,459
are major and they add up together to a

00:13:01,160 --> 00:13:07,700
pretty big improvement then the third

00:13:04,459 --> 00:13:09,890
goal is to render cash all the things so

00:13:07,700 --> 00:13:11,930
the ability to take everything on the

00:13:09,890 --> 00:13:13,820
page and sort of render cassius if i

00:13:11,930 --> 00:13:16,100
guess i'll explain this with a little

00:13:13,820 --> 00:13:17,600
diagram although I see my slide

00:13:16,100 --> 00:13:21,059
transitions are a little wax oh this

00:13:17,600 --> 00:13:24,419
will be fun all right so Drupal 7

00:13:21,059 --> 00:13:26,249
caching worked like this you start and

00:13:24,419 --> 00:13:27,659
you have a nice warm page cache you go

00:13:26,249 --> 00:13:29,009
to your page and it's really fast

00:13:27,659 --> 00:13:31,319
because you know it's in the page cache

00:13:29,009 --> 00:13:33,509
and everything's cool then somebody like

00:13:31,319 --> 00:13:36,059
fixes a typo and endowed somewhere right

00:13:33,509 --> 00:13:37,169
and then Drupal says oh somebody changed

00:13:36,059 --> 00:13:39,779
something in a note somewhere let me

00:13:37,169 --> 00:13:42,269
nuke the entire page cache because

00:13:39,779 --> 00:13:43,949
something somewhere changed and then you

00:13:42,269 --> 00:13:45,719
get to start warming the caches all over

00:13:43,949 --> 00:13:47,759
again right and so that's like really

00:13:45,719 --> 00:13:49,529
bad some people work around this in a

00:13:47,759 --> 00:13:51,329
variety of ways like instead of using

00:13:49,529 --> 00:13:53,099
Drupal's default page cast to use a null

00:13:51,329 --> 00:13:54,689
page cache and they put Akamai in front

00:13:53,099 --> 00:13:57,329
of it or whatever but it's like the

00:13:54,689 --> 00:13:58,769
default is not very smart and the reason

00:13:57,329 --> 00:14:00,869
it's not very smart is it doesn't have

00:13:58,769 --> 00:14:02,429
the knowledge of all the things all the

00:14:00,869 --> 00:14:05,099
way down the request to know how to

00:14:02,429 --> 00:14:06,659
invalidate caches smartly and so in

00:14:05,099 --> 00:14:08,069
Drupal 8 we've added a bunch of little

00:14:06,659 --> 00:14:10,349
things to help with this so we've added

00:14:08,069 --> 00:14:12,029
cash keys this is a way to represent

00:14:10,349 --> 00:14:14,879
what the thing is that you are

00:14:12,029 --> 00:14:17,339
displaying so in your render array

00:14:14,879 --> 00:14:20,159
you'll specify things like this is node

00:14:17,339 --> 00:14:22,349
and it's 5 and it's a teaser so that way

00:14:20,159 --> 00:14:23,879
if the node being changes node 5 you

00:14:22,349 --> 00:14:26,729
know you don't have to invalidate note

00:14:23,879 --> 00:14:29,369
11 because it's not the same thing cash

00:14:26,729 --> 00:14:31,019
context are a way to define under what

00:14:29,369 --> 00:14:34,139
conditions well the cache of this thing

00:14:31,019 --> 00:14:35,429
very so for example some blocks show

00:14:34,139 --> 00:14:37,259
different things depending on your role

00:14:35,429 --> 00:14:39,209
and some blocks show different things

00:14:37,259 --> 00:14:40,649
depending on your language and some

00:14:39,209 --> 00:14:43,259
blocks or different things depending on

00:14:40,649 --> 00:14:44,669
you the person you know Angie will see

00:14:43,259 --> 00:14:47,639
different things in her web chick block

00:14:44,669 --> 00:14:50,549
than just sees and hers and then cash

00:14:47,639 --> 00:14:53,159
tags basically list out a reason for

00:14:50,549 --> 00:14:55,319
things to be invalidated so node 5 user

00:14:53,159 --> 00:14:57,659
three taxonomy three if any of those

00:14:55,319 --> 00:14:59,279
things change they're all included in

00:14:57,659 --> 00:15:00,479
this piece of content and that means

00:14:59,279 --> 00:15:02,579
this piece of content needs to be

00:15:00,479 --> 00:15:05,399
invalidated what's nice is that the

00:15:02,579 --> 00:15:07,829
Drupal core API is take care of this for

00:15:05,399 --> 00:15:09,869
you for entities and for a lot of the

00:15:07,829 --> 00:15:11,369
you know sort of base systems but it's

00:15:09,869 --> 00:15:12,779
really useful to know how it's doing

00:15:11,369 --> 00:15:14,309
those things because if you write your

00:15:12,779 --> 00:15:16,499
own contributed modules with your own

00:15:14,309 --> 00:15:18,299
special doohickey things as is really

00:15:16,499 --> 00:15:21,589
useful to know about because the way

00:15:18,299 --> 00:15:23,729
Drupal 8 page caching can work then is

00:15:21,589 --> 00:15:27,179
start with a nice warm page cache

00:15:23,729 --> 00:15:29,369
someone fix a typo somewhere because it

00:15:27,179 --> 00:15:31,229
knows it was a typo only on node 5 it

00:15:29,369 --> 00:15:33,959
just clears anything with a cache tag

00:15:31,229 --> 00:15:35,050
about node 5 and it instantly validate

00:15:33,959 --> 00:15:36,040
or updates the cat

00:15:35,050 --> 00:15:37,959
so you don't have to wait for this

00:15:36,040 --> 00:15:41,170
enormous cache warming process to happen

00:15:37,959 --> 00:15:42,310
so it's quick and it's precise and

00:15:41,170 --> 00:15:45,010
that's what you want in a cache

00:15:42,310 --> 00:15:46,690
invalidation system this work is also

00:15:45,010 --> 00:15:50,080
enabling some kind of cool things like

00:15:46,690 --> 00:15:51,730
big pipe so thanks to this kind of extra

00:15:50,080 --> 00:15:54,010
cash metadata that we have in Drupal 8

00:15:51,730 --> 00:15:55,660
which is really nice you can take a page

00:15:54,010 --> 00:15:57,640
let's really complicated like a facebook

00:15:55,660 --> 00:15:59,800
profile and you can figure out stuff

00:15:57,640 --> 00:16:02,649
that applies across all users for

00:15:59,800 --> 00:16:05,560
example the HTML frame the search box

00:16:02,649 --> 00:16:07,720
the facebook logo stuff like that that

00:16:05,560 --> 00:16:09,130
doesn't vary on a per-user basis but on

00:16:07,720 --> 00:16:11,860
the other hand something like the block

00:16:09,130 --> 00:16:13,930
saying Who I am the status feed of all

00:16:11,860 --> 00:16:16,089
my friends that stuff does vary on a

00:16:13,930 --> 00:16:18,820
per-user basis and so what big pipe

00:16:16,089 --> 00:16:20,050
allows you to do is basically prioritize

00:16:18,820 --> 00:16:22,060
the parts of the page you want to make

00:16:20,050 --> 00:16:23,470
sure sent first which in this case would

00:16:22,060 --> 00:16:25,570
be like the outer frame and the inner

00:16:23,470 --> 00:16:27,339
you know sort of status feed so it looks

00:16:25,570 --> 00:16:28,930
to the user like it updated like that

00:16:27,339 --> 00:16:30,519
and then the rest of the page has less

00:16:28,930 --> 00:16:32,829
critical cannot a filter and whenever it

00:16:30,519 --> 00:16:34,269
needs to and there's actually a

00:16:32,829 --> 00:16:35,860
prototype for this interpolate and we're

00:16:34,269 --> 00:16:38,110
hoping to get into core before we ship

00:16:35,860 --> 00:16:39,220
which would be great and then smart

00:16:38,110 --> 00:16:40,930
cache is another thing that we're

00:16:39,220 --> 00:16:44,440
working on which is going to roughly

00:16:40,930 --> 00:16:47,350
double the the performance of a nun cat

00:16:44,440 --> 00:16:49,630
of a page cache including for

00:16:47,350 --> 00:16:51,130
authenticated users normally page cache

00:16:49,630 --> 00:16:52,480
only really affects anonymous user

00:16:51,130 --> 00:16:54,760
traffic but this will actually work for

00:16:52,480 --> 00:16:56,760
authenticated as well and the way that

00:16:54,760 --> 00:16:58,990
it works is when it doesn't find a cache

00:16:56,760 --> 00:17:01,120
entry what it'll do is what it always

00:16:58,990 --> 00:17:04,870
does which is all your it you know

00:17:01,120 --> 00:17:07,000
example you know calm / foo I'm going to

00:17:04,870 --> 00:17:08,559
go find the controller that foo maps to

00:17:07,000 --> 00:17:10,780
which in Drupal 7 parlance would be like

00:17:08,559 --> 00:17:12,610
the page controller I'm going to run the

00:17:10,780 --> 00:17:14,800
page controller and it's got you know

00:17:12,610 --> 00:17:16,870
like it runs some queries it builds out

00:17:14,800 --> 00:17:18,520
the you know the Brender array it does

00:17:16,870 --> 00:17:20,980
whatever other expensive things and at

00:17:18,520 --> 00:17:23,290
the very end it renders a doubt to HTML

00:17:20,980 --> 00:17:25,329
what it'll do is it'll capture that HTML

00:17:23,290 --> 00:17:26,860
once it's been rendered in cash that so

00:17:25,329 --> 00:17:28,929
the next time you come to that page

00:17:26,860 --> 00:17:30,160
instead of going through the process of

00:17:28,929 --> 00:17:31,929
building out everything you just go

00:17:30,160 --> 00:17:33,669
immediately to the database you grab the

00:17:31,929 --> 00:17:36,190
rendered AP of cash and then you just

00:17:33,669 --> 00:17:38,740
dump it out to the browser so basically

00:17:36,190 --> 00:17:42,010
you get to skip those too expensive

00:17:38,740 --> 00:17:43,660
steps and that's really really handy it

00:17:42,010 --> 00:17:45,550
requires though a little bit of

00:17:43,660 --> 00:17:47,470
attention to how things are being built

00:17:45,550 --> 00:17:48,490
because anything that is dynamic so say

00:17:47,470 --> 00:17:50,770
for example new

00:17:48,490 --> 00:17:53,740
marker on a comment which would be per

00:17:50,770 --> 00:17:55,630
user or something like a like that if

00:17:53,740 --> 00:17:57,280
you printed the current date or

00:17:55,630 --> 00:18:00,160
something on the page down to the micro

00:17:57,280 --> 00:18:02,230
second because why not write stuff like

00:18:00,160 --> 00:18:03,670
that you need to put into a different

00:18:02,230 --> 00:18:05,200
bucket which is currently called post

00:18:03,670 --> 00:18:07,600
render cash and I think by the time we

00:18:05,200 --> 00:18:08,770
ship will be something different but the

00:18:07,600 --> 00:18:10,030
idea is that those get little

00:18:08,770 --> 00:18:11,710
placeholders that get filled in

00:18:10,030 --> 00:18:13,270
dynamically with JavaScript after the

00:18:11,710 --> 00:18:15,910
fact so that's not part of the stuff the

00:18:13,270 --> 00:18:17,380
server needs to render out okay so that

00:18:15,910 --> 00:18:18,820
was very complicated if you want to

00:18:17,380 --> 00:18:21,010
listen to someone explain it much better

00:18:18,820 --> 00:18:23,380
as i mentioned whims talk is in the

00:18:21,010 --> 00:18:25,690
other room but pretty cool stuff because

00:18:23,380 --> 00:18:28,750
this means that drupal 8 is not only

00:18:25,690 --> 00:18:30,730
going to be able to not incur these

00:18:28,750 --> 00:18:32,950
weird performance penalties at random

00:18:30,730 --> 00:18:34,480
times like drupal 7 often does but it

00:18:32,950 --> 00:18:36,220
also means that we can improve

00:18:34,480 --> 00:18:38,460
performance both for anonymous and

00:18:36,220 --> 00:18:41,500
authenticated users at the same time

00:18:38,460 --> 00:18:44,559
another goal within the performance

00:18:41,500 --> 00:18:46,750
initiative is fast by default and what

00:18:44,559 --> 00:18:48,360
is that that means we've done things

00:18:46,750 --> 00:18:50,950
like enable javascript and CSS

00:18:48,360 --> 00:18:52,929
aggregation by default we try not to

00:18:50,950 --> 00:18:54,850
load any JavaScript for anonymous users

00:18:52,929 --> 00:18:58,030
to keep page loads best especially on

00:18:54,850 --> 00:19:00,309
mobile devices we put render and nad

00:18:58,030 --> 00:19:02,620
cashing in core the page cache is

00:19:00,309 --> 00:19:04,090
actually enabled by default and that's

00:19:02,620 --> 00:19:06,010
great because it means that Drupal 8 is

00:19:04,090 --> 00:19:08,590
going to be ready to go on a you know

00:19:06,010 --> 00:19:10,450
big you know big kid reverse proxy cache

00:19:08,590 --> 00:19:13,660
like you know varnish or something like

00:19:10,450 --> 00:19:15,760
that um women's said that basically

00:19:13,660 --> 00:19:18,400
Drupal 8 ships with a poor man's reverse

00:19:15,760 --> 00:19:20,920
Cash you know like poor man's chron and

00:19:18,400 --> 00:19:22,900
Drupal 6 anyway so it's like it already

00:19:20,920 --> 00:19:24,429
it already works like poor man's varnish

00:19:22,900 --> 00:19:26,110
is in there doing its thing but if you

00:19:24,429 --> 00:19:27,820
put a real tool like varnish in front of

00:19:26,110 --> 00:19:31,420
it it'll just work and you won't have to

00:19:27,820 --> 00:19:33,790
do any special configuration PHP 7 is

00:19:31,420 --> 00:19:35,140
also in this bucket because it

00:19:33,790 --> 00:19:37,270
represents an eighty-four percent

00:19:35,140 --> 00:19:39,580
performance increase or so which is

00:19:37,270 --> 00:19:41,650
really cool and another thing that's

00:19:39,580 --> 00:19:45,400
neat this was from Rasmus looter stock

00:19:41,650 --> 00:19:48,160
who invented PHP and the other thing

00:19:45,400 --> 00:19:50,679
that's cool is a fast by default makes

00:19:48,160 --> 00:19:53,260
Drupal 8 way faster than all of the

00:19:50,679 --> 00:19:55,390
other frameworks that he benchmarked so

00:19:53,260 --> 00:19:56,890
we look really good on really stupid

00:19:55,390 --> 00:20:00,510
benchmarks where people didn't bother to

00:19:56,890 --> 00:20:00,510
figure out how to configure things fast

00:20:01,400 --> 00:20:05,100
and that's about all I can say about

00:20:03,300 --> 00:20:06,420
that it's cool though because like you

00:20:05,100 --> 00:20:08,070
know a lot of people like yeah whatever

00:20:06,420 --> 00:20:10,020
I just turn on the page cache and triple

00:20:08,070 --> 00:20:11,880
seven and if you're in if you do do that

00:20:10,020 --> 00:20:14,010
you're fine a lot of people don't know

00:20:11,880 --> 00:20:15,570
to do that and a lot of people are going

00:20:14,010 --> 00:20:17,610
to get hit by this where their sites are

00:20:15,570 --> 00:20:18,570
slow and they have no idea why and this

00:20:17,610 --> 00:20:22,230
is going to prevent that from happening

00:20:18,570 --> 00:20:25,620
if you do want page cache disabled we

00:20:22,230 --> 00:20:28,290
ship with a example that settings up PHP

00:20:25,620 --> 00:20:31,020
that you can copy into your site's

00:20:28,290 --> 00:20:32,700
folder and that does things like you can

00:20:31,020 --> 00:20:34,530
enable twig debugging and you can

00:20:32,700 --> 00:20:36,330
disable the page cache Alex stuff so if

00:20:34,530 --> 00:20:37,560
you're developing and you don't want to

00:20:36,330 --> 00:20:39,330
have to hit the clear cache button all

00:20:37,560 --> 00:20:41,220
the time it will turn off caches for you

00:20:39,330 --> 00:20:42,840
but it's an opt-in step that a developer

00:20:41,220 --> 00:20:44,190
has to do because the understanding is a

00:20:42,840 --> 00:20:46,500
developer will be smart enough to know

00:20:44,190 --> 00:20:48,360
how to undo that versus a lot of less

00:20:46,500 --> 00:20:49,950
sophisticated users may not know how to

00:20:48,360 --> 00:20:53,460
find all of the various performance

00:20:49,950 --> 00:20:55,830
settings to make their site fast all

00:20:53,460 --> 00:20:57,090
right so another big area is security am

00:20:55,830 --> 00:20:59,100
i boring everyone does anyone have any

00:20:57,090 --> 00:21:00,660
questions this is a core conversation so

00:20:59,100 --> 00:21:10,670
feel free to shout out anything if it

00:21:00,660 --> 00:21:13,800
comes up yeah hip-hop not that I know of

00:21:10,670 --> 00:21:16,350
although we've talked about the next

00:21:13,800 --> 00:21:18,990
version of test spot being able to test

00:21:16,350 --> 00:21:20,520
drupal in multiple alternate you know

00:21:18,990 --> 00:21:21,930
environments like hip hop and other

00:21:20,520 --> 00:21:23,580
things like that but at the moment I

00:21:21,930 --> 00:21:26,490
don't think so I think they're sticking

00:21:23,580 --> 00:21:30,330
to vanilla straight stock PHP but you

00:21:26,490 --> 00:21:31,680
could be that person yeah because I'd

00:21:30,330 --> 00:21:36,510
love to see it work on hip hop as well

00:21:31,680 --> 00:21:38,160
yep all right so under security one goal

00:21:36,510 --> 00:21:39,990
I think this is a pretty good goal is

00:21:38,160 --> 00:21:43,170
don't ship with security regressions

00:21:39,990 --> 00:21:45,840
from Drupal 7 it's probably a good one

00:21:43,170 --> 00:21:48,540
so there's one sa backport that's giving

00:21:45,840 --> 00:21:51,570
us a hard time this one is more of a

00:21:48,540 --> 00:21:53,340
behavior question it's like well yes

00:21:51,570 --> 00:21:55,890
technically Drupal 7 didn't do that but

00:21:53,340 --> 00:21:57,270
is that really a security hole or is it

00:21:55,890 --> 00:21:59,010
not to anyway there's some discussion

00:21:57,270 --> 00:22:00,780
happening in that one and this is a new

00:21:59,010 --> 00:22:02,910
bullet point which is before we ship

00:22:00,780 --> 00:22:05,610
Drupal actually before we do a Drupal 8

00:22:02,910 --> 00:22:08,700
RC um we're going to make sure there are

00:22:05,610 --> 00:22:11,160
no major or critical Drupal 7 or Drupal

00:22:08,700 --> 00:22:12,840
6 issues remaining in the private

00:22:11,160 --> 00:22:13,830
security tracker and the reason we're

00:22:12,840 --> 00:22:16,980
doing that is because

00:22:13,830 --> 00:22:19,799
you may or may not know Drupal sixes L

00:22:16,980 --> 00:22:21,929
end of life happens three months after

00:22:19,799 --> 00:22:23,970
Drupal 8 point 0 point 0 ships whenever

00:22:21,929 --> 00:22:26,669
that is and we want to try and cast it

00:22:23,970 --> 00:22:29,010
off you know into the ether you know

00:22:26,669 --> 00:22:30,720
with as much stuff fixed as possible so

00:22:29,010 --> 00:22:32,519
hopefully you know if it takes a while

00:22:30,720 --> 00:22:34,169
for people to move off of Drupal 8 into

00:22:32,519 --> 00:22:37,230
something else they won't get hit by

00:22:34,169 --> 00:22:38,760
anything really nasty and so that is

00:22:37,230 --> 00:22:40,830
also going to be a blocker for Drupal 8

00:22:38,760 --> 00:22:43,679
as well so if you're on the security

00:22:40,830 --> 00:22:45,210
team keep your eye on that list of

00:22:43,679 --> 00:22:48,620
issues and just make sure that if any

00:22:45,210 --> 00:22:51,059
come in that they're fixed in time

00:22:48,620 --> 00:22:52,980
another goal underneath security is safe

00:22:51,059 --> 00:22:55,769
markup everywhere and you're like what

00:22:52,980 --> 00:23:00,539
is safe markup and I'm so glad you asked

00:22:55,769 --> 00:23:03,480
so safe markup means if some lovely

00:23:00,539 --> 00:23:05,340
person fills in something like this in a

00:23:03,480 --> 00:23:07,559
field like a user profile feel there's

00:23:05,340 --> 00:23:10,320
something like that if you're careful

00:23:07,559 --> 00:23:12,480
and you call a function like check plain

00:23:10,320 --> 00:23:15,809
check mark up filter XSS filter excesses

00:23:12,480 --> 00:23:17,789
admin tea with the @ sign or the % or

00:23:15,809 --> 00:23:20,340
any of these other little things you're

00:23:17,789 --> 00:23:23,010
fine and what'll happen to alert mwah ha

00:23:20,340 --> 00:23:24,659
ha whatever is it'll just get HTML and

00:23:23,010 --> 00:23:27,929
ste escaped in your fine and there's no

00:23:24,659 --> 00:23:30,240
security vulnerability if you're not and

00:23:27,929 --> 00:23:33,210
you just did a print dollar sign field

00:23:30,240 --> 00:23:35,909
blah blah blah whatever then you get a

00:23:33,210 --> 00:23:38,340
javascript alert and then hackers ruin

00:23:35,909 --> 00:23:40,740
your life which is a lot of fun Drupal

00:23:38,340 --> 00:23:41,940
really rely Drupal 7 and below really

00:23:40,740 --> 00:23:44,250
relies on the developer to be

00:23:41,940 --> 00:23:45,929
sophisticated understand the context in

00:23:44,250 --> 00:23:48,000
which they're working and how that

00:23:45,929 --> 00:23:51,240
output should be scrubbed in various

00:23:48,000 --> 00:23:52,980
other things so in Drupal 8 we've

00:23:51,240 --> 00:23:55,760
enabled a feature of the twig theming

00:23:52,980 --> 00:23:58,679
system by default which auto escapes any

00:23:55,760 --> 00:24:01,049
input that's put into it so now what

00:23:58,679 --> 00:24:03,120
happens is if you forget you get ugly

00:24:01,049 --> 00:24:06,210
double escape stuff showing up in your

00:24:03,120 --> 00:24:08,700
user interface which is bad but not as

00:24:06,210 --> 00:24:10,409
bad as hackers ruining your life so you

00:24:08,700 --> 00:24:11,549
know and then in order to avoid the

00:24:10,409 --> 00:24:12,990
double escaping there's a bunch of

00:24:11,549 --> 00:24:14,519
different ways you can do it the

00:24:12,990 --> 00:24:16,380
recommended way is anytime you're

00:24:14,519 --> 00:24:17,870
outputting some kind of HTML from your

00:24:16,380 --> 00:24:20,429
module you should use a twig template

00:24:17,870 --> 00:24:21,990
either a proper twig template or we have

00:24:20,429 --> 00:24:23,389
this skype called an inline twig

00:24:21,990 --> 00:24:25,860
template which is sort of like an in

00:24:23,389 --> 00:24:27,470
sort of like a render away ray way of

00:24:25,860 --> 00:24:29,640
doing it like a pound mark up

00:24:27,470 --> 00:24:31,649
there's a bunch of other ways but you

00:24:29,640 --> 00:24:33,840
should not use safe mark upset which is

00:24:31,649 --> 00:24:35,909
the internal way that twig determines

00:24:33,840 --> 00:24:37,380
that something is safe to go and so we

00:24:35,909 --> 00:24:39,240
need to fix a bunch of places in core

00:24:37,380 --> 00:24:43,169
where we sort of cheated and did that

00:24:39,240 --> 00:24:46,110
before we release the other goal under

00:24:43,169 --> 00:24:48,510
security is a secure REST API and a few

00:24:46,110 --> 00:24:49,950
of these are related the entity forms

00:24:48,510 --> 00:24:52,230
skip validation feels that are not in

00:24:49,950 --> 00:24:54,059
any form display that is a weirdly

00:24:52,230 --> 00:24:55,710
worded thing that is like why is that

00:24:54,059 --> 00:24:57,450
under arrest the reason that's under

00:24:55,710 --> 00:24:59,730
arrest is because there's a lot of

00:24:57,450 --> 00:25:02,460
validation that happens in Drupal 7 in

00:24:59,730 --> 00:25:04,289
form validation functions so like when

00:25:02,460 --> 00:25:05,760
you hit the Save button and it goes and

00:25:04,289 --> 00:25:07,830
it says oh did you actually fill in a

00:25:05,760 --> 00:25:10,110
name often times people think in a very

00:25:07,830 --> 00:25:11,700
form centric manner and so they're like

00:25:10,110 --> 00:25:13,620
oh let me check the form field and see

00:25:11,700 --> 00:25:15,029
if that was filled in the problem is if

00:25:13,620 --> 00:25:16,500
you're doing that same submission

00:25:15,029 --> 00:25:19,020
through a REST API and you're trying to

00:25:16,500 --> 00:25:20,549
call an API function to do that anything

00:25:19,020 --> 00:25:22,740
that's in a form validation function

00:25:20,549 --> 00:25:24,779
gets bypassed so like if you talk to

00:25:22,740 --> 00:25:27,090
Greg Dunlap who wrote the services

00:25:24,779 --> 00:25:28,830
module for Drupal 7 form validation

00:25:27,090 --> 00:25:31,770
functions make him want to shoot things

00:25:28,830 --> 00:25:33,899
so the idea is that we need to move all

00:25:31,770 --> 00:25:35,789
the entity validation out of form

00:25:33,899 --> 00:25:37,260
validation into the actual API so we'll

00:25:35,789 --> 00:25:40,230
get triggered from either the form or

00:25:37,260 --> 00:25:41,789
the rest api this other one external

00:25:40,230 --> 00:25:44,640
caches bracket bracket break I'm going

00:25:41,789 --> 00:25:46,559
to explain what that is so how rest

00:25:44,640 --> 00:25:48,929
works currently in Drupal 8 is we use

00:25:46,559 --> 00:25:51,090
what are called accept headers to do

00:25:48,929 --> 00:25:54,000
different things so we said I want Hal

00:25:51,090 --> 00:25:56,250
JSON version of that thing and we keep

00:25:54,000 --> 00:25:59,460
the same URL regardless so you can go to

00:25:56,250 --> 00:26:01,740
node / 1 and it will default to sending

00:25:59,460 --> 00:26:04,679
out HTML or you can note / 1 and given

00:26:01,740 --> 00:26:07,110
an accept header of Hal JSON it'll send

00:26:04,679 --> 00:26:10,289
you back JSON and that's a very proper

00:26:07,110 --> 00:26:12,840
rest way to do a REST API the problem is

00:26:10,289 --> 00:26:15,270
um browsers and a lot of CD ends don't

00:26:12,840 --> 00:26:17,789
always work that way and so then what

00:26:15,270 --> 00:26:20,970
will happen is if say a JavaScript

00:26:17,789 --> 00:26:22,620
routine went and hit a URL to get a JSON

00:26:20,970 --> 00:26:23,820
request when a user goes to do that

00:26:22,620 --> 00:26:26,130
they're going to get this in their

00:26:23,820 --> 00:26:28,799
screen instead of HTML which is not what

00:26:26,130 --> 00:26:31,500
you want and so instead of doing the

00:26:28,799 --> 00:26:33,600
proper rest way of doing things with

00:26:31,500 --> 00:26:35,669
accept headers we're going to keep that

00:26:33,600 --> 00:26:37,440
and as sort of an opt-in mechanism but

00:26:35,669 --> 00:26:39,750
the default is going to be using most

00:26:37,440 --> 00:26:41,010
likely querystring negotiation so you'd

00:26:39,750 --> 00:26:43,710
actually do a question mark

00:26:41,010 --> 00:26:45,270
underscore format equals whatever and it

00:26:43,710 --> 00:26:46,950
would use that to determine the format

00:26:45,270 --> 00:26:49,110
and the nice thing about that is well

00:26:46,950 --> 00:26:51,690
there's a few nice things one is it's a

00:26:49,110 --> 00:26:53,370
lot easier to hack on rest stuff because

00:26:51,690 --> 00:26:54,390
you can just as a you know type stuff in

00:26:53,370 --> 00:26:56,640
your browser and you'll get different

00:26:54,390 --> 00:26:59,400
results so it's nice from a DX point of

00:26:56,640 --> 00:27:01,140
view where things are at different URLs

00:26:59,400 --> 00:27:03,840
that means we don't have caching issues

00:27:01,140 --> 00:27:07,950
because that's a different URL then on ?

00:27:03,840 --> 00:27:10,110
format HTML or ? format xml so we won't

00:27:07,950 --> 00:27:12,630
have things like cdns being silly and

00:27:10,110 --> 00:27:13,890
sending you the wrong content type and

00:27:12,630 --> 00:27:15,600
then the other thing nice about using

00:27:13,890 --> 00:27:18,900
query strings is because it's just kind

00:27:15,600 --> 00:27:20,730
of a common thing in web that if a query

00:27:18,900 --> 00:27:22,650
string makes no sense it just ignores it

00:27:20,730 --> 00:27:24,270
so we can do the same thing here and

00:27:22,650 --> 00:27:26,460
send HTML by default if we don't know

00:27:24,270 --> 00:27:28,020
what you're talking about so that is

00:27:26,460 --> 00:27:30,060
where that looks like it's going i think

00:27:28,020 --> 00:27:31,410
that issue got to RT bc at least once or

00:27:30,060 --> 00:27:35,010
twice in last couple days so hopefully

00:27:31,410 --> 00:27:36,930
we'll be ready soon all right then

00:27:35,010 --> 00:27:39,480
there's some drupal.org stuff we have

00:27:36,930 --> 00:27:41,250
anywhere from the DA in here however I

00:27:39,480 --> 00:27:42,540
did I get to smack talk I'm just kidding

00:27:41,250 --> 00:27:44,660
though they've been great actually

00:27:42,540 --> 00:27:47,460
because this is the list to begin with

00:27:44,660 --> 00:27:50,760
in that Drupal 8 adds a whole bunch of

00:27:47,460 --> 00:27:53,580
new patterns like you know PSR for yamo

00:27:50,760 --> 00:27:54,660
all these new kinds of things we wanted

00:27:53,580 --> 00:27:56,370
to make sure jubela dog was

00:27:54,660 --> 00:27:58,860
mobile-friendly before we shipped our

00:27:56,370 --> 00:28:00,360
mobile friendly CMS on a site with

00:27:58,860 --> 00:28:02,730
scroll bars out to hear that would have

00:28:00,360 --> 00:28:04,470
been pretty embarrassing we also wanted

00:28:02,730 --> 00:28:06,780
to support semantic versioning so for

00:28:04,470 --> 00:28:10,200
people who don't know after Drupal 8

00:28:06,780 --> 00:28:11,820
point 0 point 0 ships every six months

00:28:10,200 --> 00:28:13,350
we're going to be doing new they're

00:28:11,820 --> 00:28:14,820
called minor releases and semantic

00:28:13,350 --> 00:28:17,550
versioning but effectively backwards

00:28:14,820 --> 00:28:19,770
compatible feature releases so an 8.1 we

00:28:17,550 --> 00:28:22,230
might throw you know panels and media

00:28:19,770 --> 00:28:25,350
module in there and 8.2 we might put you

00:28:22,230 --> 00:28:27,120
know path auto and something in there so

00:28:25,350 --> 00:28:28,770
we've already hit three of those they're

00:28:27,120 --> 00:28:30,600
off the list so we've already got

00:28:28,770 --> 00:28:32,910
drupal.org support for all these new

00:28:30,600 --> 00:28:34,950
fangled ii things we've got drupal

00:28:32,910 --> 00:28:37,320
support now looking pretty decent on a

00:28:34,950 --> 00:28:39,150
mobile browser actually and support for

00:28:37,320 --> 00:28:40,830
semantic versioning the last two are

00:28:39,150 --> 00:28:43,080
translation support for Drupal 8 and

00:28:40,830 --> 00:28:44,730
automated testing for all supported PHP

00:28:43,080 --> 00:28:48,000
versions as well as supported database

00:28:44,730 --> 00:28:52,050
versions oh I had a slide about this

00:28:48,000 --> 00:28:54,120
that's semantic versioning yay backwards

00:28:52,050 --> 00:28:54,720
compatibility preserved but my favorite

00:28:54,120 --> 00:28:56,130
thing about the

00:28:54,720 --> 00:28:57,750
semantic versioning thing is that the

00:28:56,130 --> 00:29:00,210
people who like working on core and the

00:28:57,750 --> 00:29:02,340
people who like using Drupal will both

00:29:00,210 --> 00:29:06,059
be not that they're not the same but

00:29:02,340 --> 00:29:07,830
there's not quite is there are a few

00:29:06,059 --> 00:29:10,230
core developers who don't build Drupal

00:29:07,830 --> 00:29:12,090
sites and stuff anyway but they're all

00:29:10,230 --> 00:29:14,580
working in the same place and so people

00:29:12,090 --> 00:29:16,500
who have clients who have bugs real bugs

00:29:14,580 --> 00:29:17,940
get them valide against the people who

00:29:16,500 --> 00:29:19,799
are actually working on core to fix

00:29:17,940 --> 00:29:22,890
things and that's great because it means

00:29:19,799 --> 00:29:24,480
better user feedback we're not inventing

00:29:22,890 --> 00:29:25,860
api's and the hopes they'll be used we

00:29:24,480 --> 00:29:28,020
actually get real-world validation of

00:29:25,860 --> 00:29:29,220
all this stuff and we will eventually

00:29:28,020 --> 00:29:30,659
make a Drupal nine but this will

00:29:29,220 --> 00:29:32,700
probably be multiple years in the future

00:29:30,659 --> 00:29:34,650
because we have to save up enough really

00:29:32,700 --> 00:29:37,770
cool things in order for that to make

00:29:34,650 --> 00:29:40,020
sense so everyone can heave a big big

00:29:37,770 --> 00:29:42,450
sigh of relief about upgrade paths and

00:29:40,020 --> 00:29:43,860
such translation supports there's a

00:29:42,450 --> 00:29:45,960
bunch of words on the slide don't worry

00:29:43,860 --> 00:29:48,030
about it essentially localizes still on

00:29:45,960 --> 00:29:49,770
Drupal 6 we can't keep that on Drupal 6

00:29:48,030 --> 00:29:51,780
because as I mentioned rupal sixes end

00:29:49,770 --> 00:29:54,990
of life after Drupal 8 comes out so that

00:29:51,780 --> 00:29:56,700
would be silly and said so localizes

00:29:54,990 --> 00:29:58,799
almost ported to Drupal 7 I believe all

00:29:56,700 --> 00:30:00,090
of our date ease is here at he'll be at

00:29:58,799 --> 00:30:01,770
the code sprint if anyone wants to work

00:30:00,090 --> 00:30:04,110
with that what we mainly need with the

00:30:01,770 --> 00:30:05,130
localized port is just helped testing so

00:30:04,110 --> 00:30:07,650
if you've ever done anything with

00:30:05,130 --> 00:30:09,570
translations or you'd like to try go

00:30:07,650 --> 00:30:12,360
find the drupal association folks at the

00:30:09,570 --> 00:30:14,159
at the sprint and then a lot of this is

00:30:12,360 --> 00:30:15,840
just Drupal 8 shipped with new things to

00:30:14,159 --> 00:30:17,549
translate so Drupal 8 translates

00:30:15,840 --> 00:30:19,320
configuration which is a new thing it

00:30:17,549 --> 00:30:21,240
didn't do that in Drupal 7 so just

00:30:19,320 --> 00:30:23,010
building in support for that and then

00:30:21,240 --> 00:30:26,850
another thing to plate ships with is the

00:30:23,010 --> 00:30:28,320
ability to go out and retrieve the most

00:30:26,850 --> 00:30:30,419
up-to-date translations through the UI

00:30:28,320 --> 00:30:31,980
you don't have to go over to localize

00:30:30,419 --> 00:30:33,900
and go get them that'll do it through

00:30:31,980 --> 00:30:35,850
the UI automatically we need server-side

00:30:33,900 --> 00:30:37,350
support to make sure that it knows which

00:30:35,850 --> 00:30:40,559
is the right translation to download in

00:30:37,350 --> 00:30:43,230
that case and then the other thing out

00:30:40,559 --> 00:30:44,640
of Jupiter org is Drupal CI which is the

00:30:43,230 --> 00:30:46,590
modernizing test bought initiative

00:30:44,640 --> 00:30:49,169
whether in there this morning for Jeremy

00:30:46,590 --> 00:30:52,679
Thorsen's amazing rendition of simple

00:30:49,169 --> 00:30:55,140
tests sung to the tune of yes that was

00:30:52,679 --> 00:30:56,700
that was like my most amazing drupalcon

00:30:55,140 --> 00:31:00,539
moment ever i'm pretty sure but anyway

00:30:56,700 --> 00:31:01,919
so this is simple test version if not

00:31:00,539 --> 00:31:03,409
two point oh because that would be

00:31:01,919 --> 00:31:05,669
understanding is like version

00:31:03,409 --> 00:31:07,830
candlestick monkey I don't know it's

00:31:05,669 --> 00:31:08,559
just like poof and there's all these

00:31:07,830 --> 00:31:09,759
boxes and

00:31:08,559 --> 00:31:12,309
I don't really know what all the boxes

00:31:09,759 --> 00:31:14,440
do but effectively what happens is we

00:31:12,309 --> 00:31:16,389
use instead of using Drupal as a

00:31:14,440 --> 00:31:18,789
continuous integration environment which

00:31:16,389 --> 00:31:20,409
it's neat that Drupal can be a

00:31:18,789 --> 00:31:23,169
continuous integration environment like

00:31:20,409 --> 00:31:25,419
it kudos to Drupal for being able to do

00:31:23,169 --> 00:31:27,610
that but the Venn diagram between people

00:31:25,419 --> 00:31:30,039
who like using Drupal and people who

00:31:27,610 --> 00:31:32,649
like using CI and the people who want to

00:31:30,039 --> 00:31:36,820
use CI with Drupal powering it is like

00:31:32,649 --> 00:31:38,679
two people maybe three so this uses all

00:31:36,820 --> 00:31:41,110
the things people normally use for CI it

00:31:38,679 --> 00:31:45,480
uses Jenkins as an ability to move

00:31:41,110 --> 00:31:47,619
things around it uses a silex API to

00:31:45,480 --> 00:31:49,600
talk back and forth between a result

00:31:47,619 --> 00:31:52,299
server which is running Drupal 8

00:31:49,600 --> 00:31:53,769
actually and then what happens is when

00:31:52,299 --> 00:31:56,649
they spin up test spots they're just

00:31:53,769 --> 00:31:58,299
using docker and puppet and words I

00:31:56,649 --> 00:32:00,909
don't rev Agron TSA's in there somewhere

00:31:58,299 --> 00:32:02,799
I don't know anyway but all these dev

00:32:00,909 --> 00:32:04,419
ops ii words so DevOps people know what

00:32:02,799 --> 00:32:06,399
I'm talking about I don't know what I'm

00:32:04,419 --> 00:32:08,200
talking about but it's stuff that normal

00:32:06,399 --> 00:32:10,330
people would use for for this sort of

00:32:08,200 --> 00:32:11,769
thing and it's nice because a lot of

00:32:10,330 --> 00:32:13,119
these things can be reused to do like

00:32:11,769 --> 00:32:15,879
say development environments of drupal

00:32:13,119 --> 00:32:17,289
org or people can even ases all open

00:32:15,879 --> 00:32:20,169
source stuff so you can take it and run

00:32:17,289 --> 00:32:22,509
you know your own you know local drupal

00:32:20,169 --> 00:32:24,340
see I think MongoDB was using this to

00:32:22,509 --> 00:32:27,610
test Drupal 8 against MongoDB and such

00:32:24,340 --> 00:32:30,789
so it's cool so if you want to help test

00:32:27,610 --> 00:32:32,619
spot Candlestick monkey then you uh if

00:32:30,789 --> 00:32:34,240
you're a tester there is a nice readme

00:32:32,619 --> 00:32:35,889
file that you can go through and

00:32:34,240 --> 00:32:38,769
actually download and get your own local

00:32:35,889 --> 00:32:40,299
test spot I've been testing on Mac I

00:32:38,769 --> 00:32:41,409
think people test how in Linux if you

00:32:40,299 --> 00:32:43,200
have Windows that would be really

00:32:41,409 --> 00:32:45,369
interesting to try and see what happens

00:32:43,200 --> 00:32:47,860
it should work ok though because it

00:32:45,369 --> 00:32:50,559
downloads like basically your own Ubuntu

00:32:47,860 --> 00:32:52,480
Linux installation that knows how to do

00:32:50,559 --> 00:32:54,970
everything and stuff um if you're a

00:32:52,480 --> 00:32:56,379
designer we actually have helped we need

00:32:54,970 --> 00:32:58,960
help because our results site right now

00:32:56,379 --> 00:33:03,210
is just using bootstrap with an emphasis

00:32:58,960 --> 00:33:05,890
on boo no I'm just getting back

00:33:03,210 --> 00:33:07,690
I've heard that designers hate bootstrap

00:33:05,890 --> 00:33:09,760
so anyway it literally is just stock

00:33:07,690 --> 00:33:11,740
bootstraps so we wanted to look a lot

00:33:09,760 --> 00:33:13,240
more like drupal.org blue cheese and

00:33:11,740 --> 00:33:15,550
stuff like that so if you know theming

00:33:13,240 --> 00:33:16,990
or HTML or CSS or that kind of stuff

00:33:15,550 --> 00:33:18,340
this is actually an area you don't need

00:33:16,990 --> 00:33:19,690
to know about any of that crap i just

00:33:18,340 --> 00:33:21,370
talked about but they need help on the

00:33:19,690 --> 00:33:23,230
theming side because as you can probably

00:33:21,370 --> 00:33:25,540
imagine people are super good at like

00:33:23,230 --> 00:33:29,430
puppet and things are not so great at

00:33:25,540 --> 00:33:32,770
photoshop so you know core developers

00:33:29,430 --> 00:33:34,210
they need help understanding why tests

00:33:32,770 --> 00:33:36,490
are failing under certain environments

00:33:34,210 --> 00:33:38,110
and so if you could help get one of

00:33:36,490 --> 00:33:40,180
these running and test it out in your

00:33:38,110 --> 00:33:42,100
local and say oh obviously that's

00:33:40,180 --> 00:33:43,900
because it's postgres and it has a weird

00:33:42,100 --> 00:33:46,570
thing with ordering something i don't

00:33:43,900 --> 00:33:47,650
know anyway um you know that would

00:33:46,570 --> 00:33:49,480
really help because these guys are

00:33:47,650 --> 00:33:52,030
devops guys they're not core guys they

00:33:49,480 --> 00:33:53,650
don't know about the course stack they

00:33:52,030 --> 00:33:55,510
don't really even know about Drupal 8 at

00:33:53,650 --> 00:33:56,980
all in some cases but they know that the

00:33:55,510 --> 00:33:58,780
tests are failing under this environment

00:33:56,980 --> 00:34:00,550
but not that so having some sort of

00:33:58,780 --> 00:34:02,050
insider knowledge as to what that test

00:34:00,550 --> 00:34:04,390
means and what it's trying to say that's

00:34:02,050 --> 00:34:06,100
really really helpful and then if you're

00:34:04,390 --> 00:34:07,660
a tinkerer one of the great things about

00:34:06,100 --> 00:34:09,220
this platform is can be infinitely

00:34:07,660 --> 00:34:10,720
expanded so one of the things we've

00:34:09,220 --> 00:34:12,490
talked about doing is once we get the

00:34:10,720 --> 00:34:15,190
basics we've been running like making

00:34:12,490 --> 00:34:17,110
sure that Drupal 8 tests pass in PHP you

00:34:15,190 --> 00:34:19,570
know five point five five point six and

00:34:17,110 --> 00:34:22,930
seven as well as you know postgres

00:34:19,570 --> 00:34:24,970
SQLite and and mysql is like oh let's

00:34:22,930 --> 00:34:26,710
try making it work on hip hop let's try

00:34:24,970 --> 00:34:28,420
making it do be HAP testing and let's

00:34:26,710 --> 00:34:30,160
try making doing automatic coding

00:34:28,420 --> 00:34:33,190
standards review and all kinds of other

00:34:30,160 --> 00:34:34,720
crazy ideas you might have so again the

00:34:33,190 --> 00:34:36,310
drupal association folks are there in

00:34:34,720 --> 00:34:37,900
the sprint if this is kind of an area

00:34:36,310 --> 00:34:39,130
that you're familiar with feel free to

00:34:37,900 --> 00:34:42,220
join them they would be really happy

00:34:39,130 --> 00:34:44,770
about that another area is the upgrade

00:34:42,220 --> 00:34:46,570
path and upgrade path is a really it's

00:34:44,770 --> 00:34:50,050
an overloaded thing so I want to explain

00:34:46,570 --> 00:34:52,630
a few vocabulary terms again so in the

00:34:50,050 --> 00:34:55,780
past when you upgraded from Drupal 6 to

00:34:52,630 --> 00:34:58,060
7 you would run the update dot PHP

00:34:55,780 --> 00:35:02,770
script right and what would the update

00:34:58,060 --> 00:35:06,520
PHP script do break yes often that is

00:35:02,770 --> 00:35:08,530
true it would break but more than break

00:35:06,520 --> 00:35:10,690
what did we do on the way to breaking is

00:35:08,530 --> 00:35:13,960
it would take your production database

00:35:10,690 --> 00:35:15,310
and it would modify it in place in a

00:35:13,960 --> 00:35:17,170
horrifying manner that

00:35:15,310 --> 00:35:18,580
don't even want to know and while I did

00:35:17,170 --> 00:35:21,040
that your site had to be in maintenance

00:35:18,580 --> 00:35:22,780
mode so when Drupal 7 or sorry when

00:35:21,040 --> 00:35:25,240
drupal.org move to Drupal 7 the site was

00:35:22,780 --> 00:35:27,220
down for 18 hours because we have over a

00:35:25,240 --> 00:35:29,710
million nodes over a million users and

00:35:27,220 --> 00:35:32,350
over to gazillion taxonomy terms or

00:35:29,710 --> 00:35:33,880
something that's bad right because

00:35:32,350 --> 00:35:35,620
nobody wants that and then if it fails

00:35:33,880 --> 00:35:37,570
all you can do is restore from backup

00:35:35,620 --> 00:35:39,790
and pray to God that nothing important

00:35:37,570 --> 00:35:42,610
got lost so we said we're going to knock

00:35:39,790 --> 00:35:44,860
that off as of Drupal 8 we no longer

00:35:42,610 --> 00:35:46,570
support that sort of an upgrade path

00:35:44,860 --> 00:35:49,840
between major versions so now a major

00:35:46,570 --> 00:35:51,160
version is a migrate not an upgrade and

00:35:49,840 --> 00:35:53,560
so we ship with the my grade in the

00:35:51,160 --> 00:35:55,720
migrate Drupal modules in core and the

00:35:53,560 --> 00:35:57,550
Drupal 6 to 8 migration path is already

00:35:55,720 --> 00:35:59,950
in core still have some work to do but

00:35:57,550 --> 00:36:01,930
it's it's pretty solid and then seven to

00:35:59,950 --> 00:36:03,340
eight migrations are in progress they're

00:36:01,930 --> 00:36:05,050
essentially waiting until six to eight

00:36:03,340 --> 00:36:07,030
is done because then my understanding is

00:36:05,050 --> 00:36:09,070
a pretty shallow lifts after that

00:36:07,030 --> 00:36:12,970
because most of the stuff is actually

00:36:09,070 --> 00:36:14,500
the same so major version of canoe

00:36:12,970 --> 00:36:16,540
migration and the nice thing about that

00:36:14,500 --> 00:36:19,120
is you build your site without any

00:36:16,540 --> 00:36:21,280
legacy croft and you can keep testing

00:36:19,120 --> 00:36:23,170
the migration for weeks if you want to

00:36:21,280 --> 00:36:24,280
leaving your old site up and running and

00:36:23,170 --> 00:36:26,110
then when you finally feel like you're

00:36:24,280 --> 00:36:27,940
ready to go you've flipped the doc root

00:36:26,110 --> 00:36:29,710
2.2 your Drupal 8 site and you have no

00:36:27,940 --> 00:36:31,930
downtime so it's actually really really

00:36:29,710 --> 00:36:33,250
nice a lot of people honestly are doing

00:36:31,930 --> 00:36:34,750
upgrades this way even though core

00:36:33,250 --> 00:36:37,510
doesn't support it for all of those

00:36:34,750 --> 00:36:39,550
benefits the upgrade path is in your

00:36:37,510 --> 00:36:41,260
fabulous update dot PHP script will

00:36:39,550 --> 00:36:44,050
still be there but there's only used for

00:36:41,260 --> 00:36:46,990
minor version upgrades so 8.0 point zero

00:36:44,050 --> 00:36:48,640
two eight point 0.1 or eight point 0.12

00:36:46,990 --> 00:36:50,710
eight point two point O one of those

00:36:48,640 --> 00:36:53,170
those will all be done with the upgrade

00:36:50,710 --> 00:36:54,730
path we don't currently support an

00:36:53,170 --> 00:36:56,290
upgrade path interpolates so the

00:36:54,730 --> 00:36:58,690
official line is if you want to move

00:36:56,290 --> 00:37:00,460
from beta ten to beta 11 you get to

00:36:58,690 --> 00:37:02,740
destroy your entire site and rebuild it

00:37:00,460 --> 00:37:04,420
from scratch which is a really friendly

00:37:02,740 --> 00:37:06,520
line to business clients as you can

00:37:04,420 --> 00:37:08,200
imagine and so we don't try that's why

00:37:06,520 --> 00:37:09,400
drees emphasizing tsukino we don't

00:37:08,200 --> 00:37:12,580
recommend people actually used your

00:37:09,400 --> 00:37:14,040
bullet yet um but at any rate you can do

00:37:12,580 --> 00:37:17,950
it and there's different ways to do it

00:37:14,040 --> 00:37:19,810
so one of the oh I did this in the wrong

00:37:17,950 --> 00:37:21,990
order but anyway so what's left to

00:37:19,810 --> 00:37:24,850
support an upgrade path in core is

00:37:21,990 --> 00:37:25,990
basically two things one is we need to

00:37:24,850 --> 00:37:28,130
make sure that we can automate it

00:37:25,990 --> 00:37:30,830
medically test upgrade passes and in

00:37:28,130 --> 00:37:32,930
part of ensuring data integrity so

00:37:30,830 --> 00:37:34,760
anytime a core patch adds an upgrade

00:37:32,930 --> 00:37:36,200
path it's a requirement from a core

00:37:34,760 --> 00:37:37,640
process point of view that it also has

00:37:36,200 --> 00:37:41,120
automated tests to back up that it can

00:37:37,640 --> 00:37:43,460
work and the problem / opportunity in

00:37:41,120 --> 00:37:45,440
Drupal 8 is that not everything is

00:37:43,460 --> 00:37:46,820
stored in the database anymore right we

00:37:45,440 --> 00:37:48,710
talked about the configuration system

00:37:46,820 --> 00:37:50,990
and how it has stuff in ya moul and has

00:37:48,710 --> 00:37:53,150
stuff in all kinds of different ways and

00:37:50,990 --> 00:37:55,010
so the idea is we need to dig in there

00:37:53,150 --> 00:37:56,840
and make sure that we can still do an

00:37:55,010 --> 00:37:58,280
automated dumped from a before and after

00:37:56,840 --> 00:38:00,860
state and compare the two and make sure

00:37:58,280 --> 00:38:02,810
that they work so Andre is working on

00:38:00,860 --> 00:38:04,040
that as part is dat accelerate so that

00:38:02,810 --> 00:38:05,450
should hopefully resolve suit and then

00:38:04,040 --> 00:38:07,460
the only other question is a policy

00:38:05,450 --> 00:38:09,650
question really which is when to support

00:38:07,460 --> 00:38:11,480
an upgrade path the advantage of

00:38:09,650 --> 00:38:13,250
supporting it in course sooner than

00:38:11,480 --> 00:38:14,750
later would be you know obviously we can

00:38:13,250 --> 00:38:16,580
tell business people you can stop

00:38:14,750 --> 00:38:19,160
destroying your site every beta you can

00:38:16,580 --> 00:38:21,110
now run up detail PHP which is nice but

00:38:19,160 --> 00:38:22,730
it's a big velocity suck because that

00:38:21,110 --> 00:38:24,650
means from now on if we commit any

00:38:22,730 --> 00:38:26,690
patches excuse me that require an

00:38:24,650 --> 00:38:28,670
upgrade path we also have to block them

00:38:26,690 --> 00:38:30,920
until they have tests and that makes

00:38:28,670 --> 00:38:32,150
fixes slower so it's a policy discussion

00:38:30,920 --> 00:38:33,260
to a large extent with the core

00:38:32,150 --> 00:38:35,390
committers to try and figure out the

00:38:33,260 --> 00:38:37,730
opportune time so in the meantime to buy

00:38:35,390 --> 00:38:41,480
us head on both of those fronts you can

00:38:37,730 --> 00:38:44,300
go to contribute to head project you can

00:38:41,480 --> 00:38:45,800
find it because it's got goats so anyway

00:38:44,300 --> 00:38:47,840
if you go find the goat project that

00:38:45,800 --> 00:38:50,750
actually has a beta 2 beta upgrade path

00:38:47,840 --> 00:38:54,140
it supports both beta 9 2 beta 10 and i

00:38:50,750 --> 00:38:56,780
want to say beta 7 and 8 2 beta 9 as

00:38:54,140 --> 00:38:58,730
well but i'm not completely sure about

00:38:56,780 --> 00:39:00,170
that but that is where we're trialing

00:38:58,730 --> 00:39:01,550
this and contribute to try and flush out

00:39:00,170 --> 00:39:02,840
what all the issues are before we put it

00:39:01,550 --> 00:39:09,830
in core and we have to actually support

00:39:02,840 --> 00:39:11,420
it I saw a hand yes when that's

00:39:09,830 --> 00:39:14,000
translating to French to the goats have

00:39:11,420 --> 00:39:15,440
braids that's a fabulous question we

00:39:14,000 --> 00:39:17,760
should enable translation on drupal.org

00:39:15,440 --> 00:39:20,430
and find out yes

00:39:17,760 --> 00:39:24,360
I can say all kinds of stuff because the

00:39:20,430 --> 00:39:26,580
DA people aren't here yeah um anyone

00:39:24,360 --> 00:39:28,440
else questions on that that makes sense

00:39:26,580 --> 00:39:31,800
so in summary major version upgrades

00:39:28,440 --> 00:39:33,870
migrate minor version upgrades upgrade

00:39:31,800 --> 00:39:37,140
or update dot PHP but we're not

00:39:33,870 --> 00:39:40,470
supporting it until we can test it all

00:39:37,140 --> 00:39:42,540
right also we want to make sure that

00:39:40,470 --> 00:39:46,140
people can move off of the old stuff so

00:39:42,540 --> 00:39:47,910
want to make sure that Drupal 6 27 has a

00:39:46,140 --> 00:39:50,040
functional migration path is what our

00:39:47,910 --> 00:39:51,750
upgrade path as well because we don't

00:39:50,040 --> 00:39:52,970
want anyone to be stuck on Drupal 6 and

00:39:51,750 --> 00:39:55,590
as far as I know there's only one

00:39:52,970 --> 00:39:58,020
critical d 7 upgrade path remaining and

00:39:55,590 --> 00:39:59,610
is this funky thing you can get into we

00:39:58,020 --> 00:40:01,860
haven't quite nailed down exactly why

00:39:59,610 --> 00:40:03,750
but you end up with a situation where

00:40:01,860 --> 00:40:06,150
you have two copies of the same file in

00:40:03,750 --> 00:40:07,950
your files table and it can't proceed so

00:40:06,150 --> 00:40:09,570
if anybody has drupal 6 sites still

00:40:07,950 --> 00:40:11,010
kicking around anywhere it would be

00:40:09,570 --> 00:40:13,950
really helpful to have your input on

00:40:11,010 --> 00:40:17,040
that issue we also want to finalize the

00:40:13,950 --> 00:40:18,930
migration system one way or the other so

00:40:17,040 --> 00:40:21,210
what's left for that is we want to

00:40:18,930 --> 00:40:23,730
finalize a my great API finish the

00:40:21,210 --> 00:40:26,070
Drupal 6 28 migrations because the way

00:40:23,730 --> 00:40:29,040
in which migrate has worked I'm sorry is

00:40:26,070 --> 00:40:30,720
built is basically it will fall back to

00:40:29,040 --> 00:40:32,070
the Drupal 6 version if a Drupal 7

00:40:30,720 --> 00:40:34,380
version doesn't exist so that means

00:40:32,070 --> 00:40:37,350
ninety percent of the Drupal 7 to 8

00:40:34,380 --> 00:40:38,790
migration path is already written as

00:40:37,350 --> 00:40:41,340
part of the six to eight migration path

00:40:38,790 --> 00:40:43,410
we focused on six to eight first because

00:40:41,340 --> 00:40:45,510
they're screwed when Drupal 8 comes out

00:40:43,410 --> 00:40:46,920
they're not it's not like immediately as

00:40:45,510 --> 00:40:48,960
soon as Drupal 8 comes out your site is

00:40:46,920 --> 00:40:50,190
insecure but we no longer support it

00:40:48,960 --> 00:40:52,260
with security update so we want to make

00:40:50,190 --> 00:40:53,520
sure they're protected then the next

00:40:52,260 --> 00:40:55,020
thing we're going to do is far to the

00:40:53,520 --> 00:40:57,270
seven to eight migration is we're going

00:40:55,020 --> 00:40:59,760
to focus on content first so node users

00:40:57,270 --> 00:41:02,220
taxonomy that kind of stuff and then

00:40:59,760 --> 00:41:04,740
finally we want to put in a migration

00:41:02,220 --> 00:41:07,110
you I so the ability to bear I you I

00:41:04,740 --> 00:41:08,700
very similar to what update PHP offers

00:41:07,110 --> 00:41:10,260
right now except you would enter your

00:41:08,700 --> 00:41:12,000
old database credentials and your new

00:41:10,260 --> 00:41:14,250
database credentials and it would suck

00:41:12,000 --> 00:41:16,380
things over and then the last thing as

00:41:14,250 --> 00:41:18,240
an if we get to it basis would be the

00:41:16,380 --> 00:41:20,760
seven to eight config migration so this

00:41:18,240 --> 00:41:23,070
would be like your views and your block

00:41:20,760 --> 00:41:24,900
visibility and stuff like that so I'm

00:41:23,070 --> 00:41:26,250
hoping we get to that stuff but it might

00:41:24,900 --> 00:41:29,610
be stuff that filters in after eight

00:41:26,250 --> 00:41:31,970
point 0 and then we have the final

00:41:29,610 --> 00:41:31,970
countdown

00:41:32,699 --> 00:41:37,959
so there's a few things that end up if

00:41:35,199 --> 00:41:39,789
we get down to where this is the last or

00:41:37,959 --> 00:41:42,219
one of the last five or so critical

00:41:39,789 --> 00:41:43,749
issues it sort of triggers this variety

00:41:42,219 --> 00:41:45,429
of things so one of them is we have a

00:41:43,749 --> 00:41:47,619
variety of issues that are in the fix it

00:41:45,429 --> 00:41:49,329
or nicks it category which means either

00:41:47,619 --> 00:41:52,029
we need to fix this stuff or we're going

00:41:49,329 --> 00:41:53,289
to put that back in to contribute it's

00:41:52,029 --> 00:41:55,089
ready to go and then pull it back into

00:41:53,289 --> 00:41:57,400
core later so one of those things is

00:41:55,089 --> 00:41:58,929
alternate database support I have asked

00:41:57,400 --> 00:42:01,089
you a light highlighted in red because

00:41:58,929 --> 00:42:02,380
it's embedded in such a way to things

00:42:01,089 --> 00:42:04,299
like the test button stuff we can't

00:42:02,380 --> 00:42:05,859
actually remove it easily so we're

00:42:04,299 --> 00:42:08,169
basically stuck fixing that either way

00:42:05,859 --> 00:42:09,459
and then postgres is also in there and

00:42:08,169 --> 00:42:11,529
there are people working really really

00:42:09,459 --> 00:42:12,999
hard on this I see Jared Smith is in the

00:42:11,529 --> 00:42:16,269
audience he's been working a lot on

00:42:12,999 --> 00:42:18,069
postgres and sqlite too i think so yeah

00:42:16,269 --> 00:42:19,869
so if you want to join up to support

00:42:18,069 --> 00:42:22,660
alternate database systems that's

00:42:19,869 --> 00:42:24,699
amazing and fantastic and and there will

00:42:22,660 --> 00:42:26,739
be work on that at the sprint the other

00:42:24,699 --> 00:42:28,390
thing that we really need someone to

00:42:26,739 --> 00:42:30,489
care about because right now nobody who

00:42:28,390 --> 00:42:33,219
works on core cares about it is the

00:42:30,489 --> 00:42:35,140
module installation in update UI so if

00:42:33,219 --> 00:42:37,179
people use this it's cool it's like you

00:42:35,140 --> 00:42:39,459
can go to install a new module from

00:42:37,179 --> 00:42:41,019
within the application you copy and

00:42:39,459 --> 00:42:43,029
paste the URL to the module on install

00:42:41,019 --> 00:42:44,439
and it'll actually go out put it in

00:42:43,029 --> 00:42:46,059
there and you can just enable it without

00:42:44,439 --> 00:42:49,630
having to stop everything you're doing

00:42:46,059 --> 00:42:51,159
and run drush or whatever however we

00:42:49,630 --> 00:42:52,599
don't have anyone working on this right

00:42:51,159 --> 00:42:54,400
now and there's a couple of critical

00:42:52,599 --> 00:42:56,499
issues with it that make it not work if

00:42:54,400 --> 00:42:58,869
we can't fix those before we get down to

00:42:56,499 --> 00:43:00,669
five or so critical issues it's going in

00:42:58,869 --> 00:43:01,509
to contribute where frankly it's

00:43:00,669 --> 00:43:03,039
probably never going to come into

00:43:01,509 --> 00:43:05,319
corridan because if we can't find

00:43:03,039 --> 00:43:06,339
someone to care about it now I don't

00:43:05,319 --> 00:43:08,799
know if we're gonna find somebody care

00:43:06,339 --> 00:43:11,169
about in contribs so last chance if you

00:43:08,799 --> 00:43:13,869
want to save this poor you I there's a

00:43:11,169 --> 00:43:15,549
patch it needs testing it's like it's

00:43:13,869 --> 00:43:18,400
closed i think but yeah it needs some

00:43:15,549 --> 00:43:19,719
work and i think we kind of talked about

00:43:18,400 --> 00:43:21,669
this but we need to figure out what the

00:43:19,719 --> 00:43:24,339
level of my great support is in Drupal 8

00:43:21,669 --> 00:43:25,809
so like I bench and migrates not

00:43:24,339 --> 00:43:27,819
officially supported yet because we're

00:43:25,809 --> 00:43:29,289
still actively working on it we made a

00:43:27,819 --> 00:43:30,909
release management decision that it's

00:43:29,289 --> 00:43:32,559
not going to block the release of Drupal

00:43:30,909 --> 00:43:33,640
8 so what will happen is eight point 0

00:43:32,559 --> 00:43:36,279
will have something in the release notes

00:43:33,640 --> 00:43:38,739
that indicates you know 6 to 8 upgrade

00:43:36,279 --> 00:43:40,689
paths or migration paths reported but 78

00:43:38,739 --> 00:43:43,269
is not yet and then we would make every

00:43:40,689 --> 00:43:44,140
effort that by 8.1 or one of the later

00:43:43,269 --> 00:43:46,840
releases we would

00:43:44,140 --> 00:43:48,670
support a full migration path most

00:43:46,840 --> 00:43:50,560
people on Drupal 7 don't really want to

00:43:48,670 --> 00:43:52,330
move off of Drupal 7 anytime soon unless

00:43:50,560 --> 00:43:53,890
they're like people like the people in

00:43:52,330 --> 00:43:56,830
this room who have little blogs and like

00:43:53,890 --> 00:43:58,750
I want to use Drupal 8 so I'm not sure

00:43:56,830 --> 00:44:00,130
exactly where that will end up we do

00:43:58,750 --> 00:44:02,230
have some people really working hard on

00:44:00,130 --> 00:44:05,560
my great though Ryan wheel is here I

00:44:02,230 --> 00:44:08,260
know at this sprint and aqua is also

00:44:05,560 --> 00:44:09,880
hired an intern named Adam who's awesome

00:44:08,260 --> 00:44:11,920
to work on my great stuff so hopefully

00:44:09,880 --> 00:44:14,890
hopefully we'll see this shape up before

00:44:11,920 --> 00:44:17,260
a point 0 as well we also need to update

00:44:14,890 --> 00:44:19,180
all the things so there's a bunch of PHP

00:44:17,260 --> 00:44:20,260
external PHP library and JavaScript

00:44:19,180 --> 00:44:21,220
libraries we just need to make sure

00:44:20,260 --> 00:44:22,840
they're all in the latest version

00:44:21,220 --> 00:44:24,100
because we don't want to get into an

00:44:22,840 --> 00:44:27,010
embarrassing situation we're shipping

00:44:24,100 --> 00:44:28,930
with a version of jQuery from four years

00:44:27,010 --> 00:44:32,260
ago not that we know anything about that

00:44:28,930 --> 00:44:33,790
Drupal 7 um anyway so um I want to make

00:44:32,260 --> 00:44:35,950
sure all of our stuff is updated so that

00:44:33,790 --> 00:44:38,320
it's the latest and then we need to

00:44:35,950 --> 00:44:40,510
revisit the revisit before release

00:44:38,320 --> 00:44:42,580
candidate tag this was a lot of places

00:44:40,510 --> 00:44:44,350
where we just kind of thought I'm a

00:44:42,580 --> 00:44:45,880
little 50-50 on that I'm not quite sure

00:44:44,350 --> 00:44:48,670
if this is a good idea or not so let's

00:44:45,880 --> 00:44:50,260
do it we'll take it for review later and

00:44:48,670 --> 00:44:51,640
then some of it is things that we want

00:44:50,260 --> 00:44:53,680
to make sure we do right before release

00:44:51,640 --> 00:44:55,360
so we're going to try and make this list

00:44:53,680 --> 00:44:57,580
as small as possible over the next

00:44:55,360 --> 00:44:59,970
couple of weeks and make sure that

00:44:57,580 --> 00:45:01,870
doesn't hold us up to bed so in summary

00:44:59,970 --> 00:45:04,240
fix a bunch of performance thing

00:45:01,870 --> 00:45:05,530
security things we got some multilingual

00:45:04,240 --> 00:45:07,930
as well some configuration management

00:45:05,530 --> 00:45:10,990
stuff we want to do some future proofing

00:45:07,930 --> 00:45:13,840
drupal.org upgrade path and the final

00:45:10,990 --> 00:45:18,660
countdown so that is what's left to ship

00:45:13,840 --> 00:45:18,660
Drupal 8 see you at the sprints

00:45:22,980 --> 00:45:29,070
so questions or comments or

00:45:25,870 --> 00:45:31,990
clarifications or yes hi Angie so

00:45:29,070 --> 00:45:33,940
imagine a scenario where we like figured

00:45:31,990 --> 00:45:35,680
out this magic thing like Mozilla did

00:45:33,940 --> 00:45:38,140
and we had like a three hundred million

00:45:35,680 --> 00:45:40,780
dollar budget to like work on our open

00:45:38,140 --> 00:45:42,600
source project what could we do to make

00:45:40,780 --> 00:45:46,240
it so that we never had a really long

00:45:42,600 --> 00:45:47,350
release cycle and how did this like list

00:45:46,240 --> 00:45:50,200
of things that were working on forever

00:45:47,350 --> 00:45:51,460
yeah that's a great question um and I

00:45:50,200 --> 00:45:53,770
think I don't need to repeat that

00:45:51,460 --> 00:45:56,020
because he said it into the mic um but

00:45:53,770 --> 00:45:57,670
what could we do with a 300 million

00:45:56,020 --> 00:45:59,350
dollar budget so we never get into this

00:45:57,670 --> 00:46:01,840
scenario again where drupal 8 is taking

00:45:59,350 --> 00:46:04,030
four plus years to come out I think

00:46:01,840 --> 00:46:05,830
honestly the release management changes

00:46:04,030 --> 00:46:07,770
we're doing subsequent to eight point 0

00:46:05,830 --> 00:46:10,600
point 0 is going to prevent that I hope

00:46:07,770 --> 00:46:12,310
because it fundamentally shifts the

00:46:10,600 --> 00:46:15,610
entire way Drupal's been developed to

00:46:12,310 --> 00:46:18,580
this point more in line with what you

00:46:15,610 --> 00:46:20,110
know other projects are doing so um what

00:46:18,580 --> 00:46:23,800
I would do with a budget like that is i

00:46:20,110 --> 00:46:26,230
would probably hire a core group of

00:46:23,800 --> 00:46:28,720
people to do the really unfun stuff like

00:46:26,230 --> 00:46:30,420
making sure that raw you know like tests

00:46:28,720 --> 00:46:32,500
are written and all this kind of stuff

00:46:30,420 --> 00:46:34,270
because a lot of times that's what slows

00:46:32,500 --> 00:46:36,250
things down things get to ninety percent

00:46:34,270 --> 00:46:38,200
done and then people like oh now there's

00:46:36,250 --> 00:46:40,180
only on fun stuff left I'm going to go

00:46:38,200 --> 00:46:42,280
to over here you know so that could help

00:46:40,180 --> 00:46:44,980
with that but what what may jubilate

00:46:42,280 --> 00:46:46,960
take so long is we because of the way

00:46:44,980 --> 00:46:49,870
releases ran in the past we would only

00:46:46,960 --> 00:46:51,790
make big changes in major releases and

00:46:49,870 --> 00:46:53,590
so that meant that you needed it caused

00:46:51,790 --> 00:46:55,480
a few problems one is you need to do

00:46:53,590 --> 00:46:56,920
like an all-you-can-eat buffet you know

00:46:55,480 --> 00:46:59,500
when you have this narrow window of time

00:46:56,920 --> 00:47:01,120
I think for Drupal 8 it was 18 months or

00:46:59,500 --> 00:47:02,860
something like that where you can quick

00:47:01,120 --> 00:47:04,600
neo clam your stuff in because if you

00:47:02,860 --> 00:47:06,250
don't get into no it's never gonna get

00:47:04,600 --> 00:47:08,800
there till Drupal 9 which might as well

00:47:06,250 --> 00:47:11,470
be in 20 you know 25 and there's space

00:47:08,800 --> 00:47:12,820
cars and stuff you know and that

00:47:11,470 --> 00:47:14,410
actually cause a bunch of problems not

00:47:12,820 --> 00:47:16,000
only from a release management point of

00:47:14,410 --> 00:47:17,710
view when that were still cleaning up

00:47:16,000 --> 00:47:20,230
stuff from you know features that went

00:47:17,710 --> 00:47:21,520
in two and a half years ago but also it

00:47:20,230 --> 00:47:24,370
causes a bunch of interpersonal issues

00:47:21,520 --> 00:47:26,650
because it like really intensifies the

00:47:24,370 --> 00:47:28,480
arguments about like people advocating

00:47:26,650 --> 00:47:30,670
for their stuff to get in now versus

00:47:28,480 --> 00:47:33,250
later so I think the biggest thing that

00:47:30,670 --> 00:47:35,050
will help with that is not money related

00:47:33,250 --> 00:47:36,510
at all although please give us money

00:47:35,050 --> 00:47:38,770
we could definitely put it to good use

00:47:36,510 --> 00:47:40,480
the the stuff that will help with that

00:47:38,770 --> 00:47:42,370
as a release management stuff so being

00:47:40,480 --> 00:47:44,950
really adhering to semantic versioning

00:47:42,370 --> 00:47:46,690
not breaking backwards compatibility but

00:47:44,950 --> 00:47:48,520
allowing those new features to come in

00:47:46,690 --> 00:47:50,440
at a predictable six-month release cycle

00:47:48,520 --> 00:47:53,320
as long as we can make that happen I

00:47:50,440 --> 00:47:55,930
think that that is going to quickly both

00:47:53,320 --> 00:47:58,120
reduce the cost of getting things in

00:47:55,930 --> 00:47:59,320
it'll also make it more palatable to

00:47:58,120 --> 00:48:00,940
businesses to actually put some

00:47:59,320 --> 00:48:02,440
resources into core developer because

00:48:00,940 --> 00:48:03,790
instead of seeing their new stuff I

00:48:02,440 --> 00:48:06,700
don't know when they'll see it within

00:48:03,790 --> 00:48:09,030
four to six months then the big things

00:48:06,700 --> 00:48:11,650
the Drupal nine things the plan is

00:48:09,030 --> 00:48:13,240
rather than in Drupal 8 what we did is

00:48:11,650 --> 00:48:14,950
we basically open Drupal 8 up for

00:48:13,240 --> 00:48:18,190
development I think three months after

00:48:14,950 --> 00:48:19,930
Drupal 7 shipped and really only waited

00:48:18,190 --> 00:48:22,540
that long because of the get migration

00:48:19,930 --> 00:48:24,250
so instead of opening up drupal 9

00:48:22,540 --> 00:48:25,720
immediately after drupal 8 ships we're

00:48:24,250 --> 00:48:27,790
going to hold off on that until there's

00:48:25,720 --> 00:48:29,800
a compelling reason to do so and a

00:48:27,790 --> 00:48:32,340
compelling reason to do so would be that

00:48:29,800 --> 00:48:34,300
there's enough features actually done in

00:48:32,340 --> 00:48:36,700
sandboxes are in issues or something

00:48:34,300 --> 00:48:38,170
that cannot be back ported to Drupal 8

00:48:36,700 --> 00:48:40,330
in a way that's backwards compatible

00:48:38,170 --> 00:48:42,340
that it's like wow drupal 9 is going to

00:48:40,330 --> 00:48:44,290
be a really compelling product so we

00:48:42,340 --> 00:48:45,640
need to execute on it and then I think

00:48:44,290 --> 00:48:47,650
what would happen at that point is we

00:48:45,640 --> 00:48:49,780
have a much shorter feature feature thaw

00:48:47,650 --> 00:48:51,430
cycle where it be these things that are

00:48:49,780 --> 00:48:53,200
already done plus maybe a couple of

00:48:51,430 --> 00:48:56,110
other things and we would lock the doors

00:48:53,200 --> 00:48:57,790
down at that point ship so that is the

00:48:56,110 --> 00:48:59,230
hope that the release management changes

00:48:57,790 --> 00:49:02,170
we're making us a part of sember is

00:48:59,230 --> 00:49:04,390
going to fix that who knows what the

00:49:02,170 --> 00:49:06,550
future will hold but we definitely did

00:49:04,390 --> 00:49:07,420
learn a lot with Drupal 8 that we do not

00:49:06,550 --> 00:49:09,040
want to create in future I think

00:49:07,420 --> 00:49:11,830
everybody is on the same board with that

00:49:09,040 --> 00:49:12,940
so does that help I didn't answer your

00:49:11,830 --> 00:49:14,920
question about money I'll think about

00:49:12,940 --> 00:49:18,360
that more and get back to you do you

00:49:14,920 --> 00:49:18,360
have three hundred million dollars cuz

00:49:19,230 --> 00:49:25,510
okay yes so I hope this isn't going off

00:49:24,010 --> 00:49:26,800
in too much of a tangent but because

00:49:25,510 --> 00:49:30,190
you're talking about the change in

00:49:26,800 --> 00:49:32,680
release cycle current policy is that if

00:49:30,190 --> 00:49:36,070
I find a bug in Drupal 7 or god help me

00:49:32,680 --> 00:49:38,050
in Drupal 6 I post issue queue I post a

00:49:36,070 --> 00:49:40,300
patch someone says oh first we have to

00:49:38,050 --> 00:49:43,870
fix it in Drupal 8 and then back port

00:49:40,300 --> 00:49:47,410
your patch to Drupal 7 or 6 so is that

00:49:43,870 --> 00:49:48,940
policy going to change with the move to

00:49:47,410 --> 00:49:50,800
the new release cycle and

00:49:48,940 --> 00:49:53,470
semantic versioning I don't know anyone

00:49:50,800 --> 00:49:55,630
who wants I know a lot of end users who

00:49:53,470 --> 00:49:58,420
want to change that policy because it's

00:49:55,630 --> 00:49:59,619
like why to fix a Drupal 7 bug do I need

00:49:58,420 --> 00:50:03,010
to learn your blade that makes no sense

00:49:59,619 --> 00:50:04,930
right the core developers don't want to

00:50:03,010 --> 00:50:06,609
change that policy because we don't want

00:50:04,930 --> 00:50:08,200
to end up in a situation where drupal 8

00:50:06,609 --> 00:50:10,660
ships with regressions and we end up

00:50:08,200 --> 00:50:13,510
having to fix the same bug twice right

00:50:10,660 --> 00:50:15,400
at the moment I don't know another way

00:50:13,510 --> 00:50:17,560
to get people to fix the bugs and Drupal

00:50:15,400 --> 00:50:19,390
8 as well other than forcing them to do

00:50:17,560 --> 00:50:21,130
it through the back board policy so just

00:50:19,390 --> 00:50:22,839
do you know more about this than I do if

00:50:21,130 --> 00:50:24,700
there's changes plans to that policy and

00:50:22,839 --> 00:50:26,740
others an issue where we're discussing

00:50:24,700 --> 00:50:28,960
it but I don't know what is actually

00:50:26,740 --> 00:50:31,660
happening with that my understanding

00:50:28,960 --> 00:50:33,520
though is it's mostly talking more about

00:50:31,660 --> 00:50:36,160
issue management that we would open two

00:50:33,520 --> 00:50:37,390
parallel issues but postponed one until

00:50:36,160 --> 00:50:39,579
the other one is fixed or something like

00:50:37,390 --> 00:50:41,500
that yeah so what what Andy just said is

00:50:39,579 --> 00:50:43,780
essentially correct what we might be

00:50:41,500 --> 00:50:45,970
changing is the way that we manage the

00:50:43,780 --> 00:50:48,550
the issues around the changes since the

00:50:45,970 --> 00:50:50,700
Drupal 7 fix sometimes in the current

00:50:48,550 --> 00:50:52,839
release cycle the Drupal 7 6 might be

00:50:50,700 --> 00:50:54,430
significantly different technically from

00:50:52,839 --> 00:50:56,020
the Drupal 8 fix the discussion might be

00:50:54,430 --> 00:50:57,819
really we're talking about whether it

00:50:56,020 --> 00:51:00,130
might make sense to split those issues

00:50:57,819 --> 00:51:02,710
up or not but I don't think that anyone

00:51:00,130 --> 00:51:05,140
wants to change it so that we would ever

00:51:02,710 --> 00:51:07,150
make a fix to Drupal 7 without making

00:51:05,140 --> 00:51:09,970
the fix to Drupal 8 first or such that

00:51:07,150 --> 00:51:12,579
we would make a fix in Drupal 8.1 which

00:51:09,970 --> 00:51:14,619
was underdeveloped or so I Drupal 8

00:51:12,579 --> 00:51:15,550
point oh but not make the same fix in

00:51:14,619 --> 00:51:16,869
Drupal apron one that's under

00:51:15,550 --> 00:51:19,150
development because that would create a

00:51:16,869 --> 00:51:21,490
lot of extra work for us so the actual

00:51:19,150 --> 00:51:22,750
back / policy i'm pretty sure it's not

00:51:21,490 --> 00:51:24,970
going to change no one wants to change

00:51:22,750 --> 00:51:27,099
them well lots of people want to change

00:51:24,970 --> 00:51:30,490
but no cordova guys want to change oh I

00:51:27,099 --> 00:51:32,470
don't I don't for it I don't think that

00:51:30,490 --> 00:51:34,359
anyone in the release management team

00:51:32,470 --> 00:51:36,010
there wants to happen because it would

00:51:34,359 --> 00:51:37,599
cause more problems for us in the long

00:51:36,010 --> 00:51:40,329
run it actually makes more work for us

00:51:37,599 --> 00:51:42,130
yeah if we can get good answers to how

00:51:40,329 --> 00:51:44,740
to address that we could probably talk

00:51:42,130 --> 00:51:46,329
about it but so far people are you know

00:51:44,740 --> 00:51:47,710
people haven't been able to address that

00:51:46,329 --> 00:51:49,839
how do we not ship with those

00:51:47,710 --> 00:51:51,839
regressions in Drupal 8 then and that's

00:51:49,839 --> 00:51:54,310
it's a tricky question because the

00:51:51,839 --> 00:51:56,650
economic incentive for fixing things in

00:51:54,310 --> 00:51:59,560
the you know sci-fi you know basically

00:51:56,650 --> 00:52:00,819
cute little R&D project is non-existent

00:51:59,560 --> 00:52:02,710
versus the thing that people actually

00:52:00,819 --> 00:52:05,440
need and so it's actually an important

00:52:02,710 --> 00:52:07,540
driver of those fixes in the future

00:52:05,440 --> 00:52:09,720
version to tie them to fixing it in the

00:52:07,540 --> 00:52:12,430
current version it's a lever that we use

00:52:09,720 --> 00:52:14,830
so until we figure out how to not need

00:52:12,430 --> 00:52:20,859
that lever we haven't had a good answer

00:52:14,830 --> 00:52:22,500
to that so well one other thing I would

00:52:20,859 --> 00:52:25,000
also say that I think with the the

00:52:22,500 --> 00:52:26,680
cember change it's going to be a lot

00:52:25,000 --> 00:52:28,540
less of a pain in the butt to back

00:52:26,680 --> 00:52:30,730
support stuff like drupal 8 right now

00:52:28,540 --> 00:52:32,290
some bugs back porting them to Drupal 8

00:52:30,730 --> 00:52:35,619
Jerusalem is like being on a different

00:52:32,290 --> 00:52:37,060
planet but I think that I'm hoping that

00:52:35,619 --> 00:52:40,920
the new release cycle will make it so

00:52:37,060 --> 00:52:43,660
that's actually sane to backport changes

00:52:40,920 --> 00:52:45,550
going forward in not not we still have

00:52:43,660 --> 00:52:47,109
the problem between 7-8 obviously but

00:52:45,550 --> 00:52:49,420
between minor versions of it I think

00:52:47,109 --> 00:52:51,849
that we'll be able to see more hopefully

00:52:49,420 --> 00:52:59,619
more staggered process so that the back

00:52:51,849 --> 00:53:02,910
parts are not awful right um have sorry

00:52:59,619 --> 00:53:07,660
are you hearing me yep see if I have we

00:53:02,910 --> 00:53:10,000
forked symphony or will updates to

00:53:07,660 --> 00:53:13,750
Symphony be tied into updates to Drupal

00:53:10,000 --> 00:53:15,099
from now in Drupal 8 moving forward yeah

00:53:13,750 --> 00:53:18,430
it's a good question we have non Fourth

00:53:15,099 --> 00:53:20,619
Symphony my know of we subclass a couple

00:53:18,430 --> 00:53:22,599
of things that we need done a little bit

00:53:20,619 --> 00:53:24,970
differently like our routing system is a

00:53:22,599 --> 00:53:26,770
little bit more demanding than what

00:53:24,970 --> 00:53:28,869
symphonies does because we provide you

00:53:26,770 --> 00:53:32,440
eyes for turning on functionality which

00:53:28,869 --> 00:53:34,240
blows everyone's minds um but um so

00:53:32,440 --> 00:53:36,400
we've talked a lot about how to handle

00:53:34,240 --> 00:53:37,630
and not just in symphony but also in

00:53:36,400 --> 00:53:39,369
JavaScript libraries and stuff like that

00:53:37,630 --> 00:53:40,960
because we don't really want to be into

00:53:39,369 --> 00:53:42,700
a situation where we're shipping with

00:53:40,960 --> 00:53:44,980
you know old crusty stuff that no one

00:53:42,700 --> 00:53:47,260
uses any more you know four years from

00:53:44,980 --> 00:53:50,170
now so I believe how we would handle

00:53:47,260 --> 00:53:51,670
that is a couple of different ways for

00:53:50,170 --> 00:53:54,130
JavaScript libraries what we've talked

00:53:51,670 --> 00:53:57,849
about doing is at these minor releases

00:53:54,130 --> 00:53:59,320
so 8.1 8.2 8.8 it's understood those are

00:53:57,849 --> 00:54:01,020
going to have bigger changes in them and

00:53:59,320 --> 00:54:03,460
the point releases that come out monthly

00:54:01,020 --> 00:54:05,650
and so those would be good points for

00:54:03,460 --> 00:54:07,510
doing at least minor version upgrades of

00:54:05,650 --> 00:54:09,700
symphony and stuff like that we would

00:54:07,510 --> 00:54:11,230
also probably do major version symphony

00:54:09,700 --> 00:54:13,300
upgrades in there but there we would

00:54:11,230 --> 00:54:14,779
have to provide a bc layer so that would

00:54:13,300 --> 00:54:17,089
be a situation where we would

00:54:14,779 --> 00:54:19,219
be you know subclassing things in order

00:54:17,089 --> 00:54:20,599
to provide like the the symphony to

00:54:19,219 --> 00:54:22,339
version of a symphony three

00:54:20,599 --> 00:54:23,959
functionality and stuff like that as

00:54:22,339 --> 00:54:25,909
much as possible right now what we're

00:54:23,959 --> 00:54:27,380
trying to do is set ourselves up so that

00:54:25,909 --> 00:54:29,689
we're future compatible with symphony

00:54:27,380 --> 00:54:31,369
three so like for example there's a

00:54:29,689 --> 00:54:33,589
critical issue which got fixed before my

00:54:31,369 --> 00:54:35,630
presentation so it wasn't up there but

00:54:33,589 --> 00:54:37,099
to rewrite all of our validation places

00:54:35,630 --> 00:54:39,079
where we're using symphony validator in

00:54:37,099 --> 00:54:41,359
a way that is compatible with symphony

00:54:39,079 --> 00:54:43,699
2.5 in symphony three so we wouldn't

00:54:41,359 --> 00:54:44,779
have to rewrite that stuff again but way

00:54:43,699 --> 00:54:46,130
we would handle is that same way we

00:54:44,779 --> 00:54:47,900
would handle it with if we change any of

00:54:46,130 --> 00:54:48,919
our interfaces or any of our class

00:54:47,900 --> 00:54:51,650
definitions that we're going to have to

00:54:48,919 --> 00:54:53,479
provide a BC layer for sites that need

00:54:51,650 --> 00:54:55,279
it but then make it really easy to get

00:54:53,479 --> 00:54:56,809
to the you know newfangled e stuff for

00:54:55,279 --> 00:54:59,419
people who want that and essentially

00:54:56,809 --> 00:55:02,959
we'd ship with both and does that make

00:54:59,419 --> 00:55:05,089
sense and did I lie I think that is

00:55:02,959 --> 00:55:11,900
correct okay nobody said I lied so I

00:55:05,089 --> 00:55:15,079
think that is what we're doing so I

00:55:11,900 --> 00:55:16,459
gotta give a like a marketing tip so I

00:55:15,079 --> 00:55:18,769
see like the countdown and we're like

00:55:16,459 --> 00:55:20,179
twenty eight twenty six twenty six

00:55:18,769 --> 00:55:21,979
criticals left so I think like one thing

00:55:20,179 --> 00:55:23,959
that would sort of help just from like

00:55:21,979 --> 00:55:25,400
an emotional marketing standpoint is to

00:55:23,959 --> 00:55:28,969
like rather than say there's 28 issues

00:55:25,400 --> 00:55:32,449
say like fourteen fourteen hundred and

00:55:28,969 --> 00:55:34,189
like 68 or something like that have out

00:55:32,449 --> 00:55:36,229
of 1,500 known critical issues are done

00:55:34,189 --> 00:55:38,089
ah right because like it like gives

00:55:36,229 --> 00:55:40,519
people a sense of like dramatically more

00:55:38,089 --> 00:55:42,979
momentum that's going on and it really

00:55:40,519 --> 00:55:46,099
reflects really affects the level of

00:55:42,979 --> 00:55:48,049
effort here comes jess and then and then

00:55:46,099 --> 00:55:52,339
you might want to sit closer to the mic

00:55:48,049 --> 00:55:54,319
jess and then um and then the other

00:55:52,339 --> 00:55:56,749
thing is like any night we had an

00:55:54,319 --> 00:55:58,579
internal talk about this but so but i'll

00:55:56,749 --> 00:56:03,079
have it in public now but like one of

00:55:58,579 --> 00:56:04,579
the things so one of one of things it's

00:56:03,079 --> 00:56:06,409
like interesting is like so we are

00:56:04,579 --> 00:56:08,630
always like acquiring new forms of

00:56:06,409 --> 00:56:10,069
talent in the Drupal project right and

00:56:08,630 --> 00:56:11,239
so you know one of the things that it

00:56:10,069 --> 00:56:13,489
makes me think about is like this

00:56:11,239 --> 00:56:15,679
introduction of 1500 critical bugs in

00:56:13,489 --> 00:56:18,229
the Drupal 8 release cycle it's like how

00:56:15,679 --> 00:56:20,839
do we fundamentally address that so you

00:56:18,229 --> 00:56:22,130
know back in Barcelona in 2007 like we

00:56:20,839 --> 00:56:23,419
got pulled off into the corner and it

00:56:22,130 --> 00:56:24,979
was like listen if you guys are gonna be

00:56:23,419 --> 00:56:26,209
serious about Drupal and like being in

00:56:24,979 --> 00:56:27,500
the enterprise you need to build a

00:56:26,209 --> 00:56:28,910
testing framework so we

00:56:27,500 --> 00:56:31,220
often built that and I was like yeah

00:56:28,910 --> 00:56:32,860
which is right like 4,000 tests and like

00:56:31,220 --> 00:56:35,540
that'll cover every possible imaginable

00:56:32,860 --> 00:56:36,890
functional capability that Drupal will

00:56:35,540 --> 00:56:38,360
ever have and we're all good right so

00:56:36,890 --> 00:56:41,210
like now we're at like what 80,000

00:56:38,360 --> 00:56:43,400
functional 95,000 functional tests then

00:56:41,210 --> 00:56:45,140
we still have fifteen hundred criticals

00:56:43,400 --> 00:56:48,920
so it's like how do we come up with like

00:56:45,140 --> 00:56:51,350
a QA capacity beyond you know where like

00:56:48,920 --> 00:56:54,170
somebody's somebody has to like sign off

00:56:51,350 --> 00:56:56,090
on a functional spec to go like no for

00:56:54,170 --> 00:56:58,430
this amount of code that we're

00:56:56,090 --> 00:57:00,710
introducing like the probability that

00:56:58,430 --> 00:57:03,530
we're introducing like historical norm

00:57:00,710 --> 00:57:05,150
of you know 25 criticals that will

00:57:03,530 --> 00:57:07,250
discover over time is no longer going to

00:57:05,150 --> 00:57:10,850
happen right like somebody you know some

00:57:07,250 --> 00:57:15,260
way to address you know just look there

00:57:10,850 --> 00:57:19,610
you go no it was 300 million yes even

00:57:15,260 --> 00:57:21,080
better use so i think jess is going to

00:57:19,610 --> 00:57:22,670
talk about the showing the number of

00:57:21,080 --> 00:57:25,580
critical so i'll address your second

00:57:22,670 --> 00:57:27,590
point first which is um which is a good

00:57:25,580 --> 00:57:29,660
one it's like why is it that we ended up

00:57:27,590 --> 00:57:31,550
with all this technical debt especially

00:57:29,660 --> 00:57:32,810
given that we have we do have some

00:57:31,550 --> 00:57:34,550
safeguards against this like we have

00:57:32,810 --> 00:57:36,170
what are called Drupal core gates and

00:57:34,550 --> 00:57:38,510
one of them is testing and we won't

00:57:36,170 --> 00:57:41,450
commit a patch until it has test

00:57:38,510 --> 00:57:42,890
coverage and stuff and it's a good

00:57:41,450 --> 00:57:44,600
question because when you look at the

00:57:42,890 --> 00:57:47,420
nature of the criticals left a lot of

00:57:44,600 --> 00:57:48,470
them are sort of unforeseen problems at

00:57:47,420 --> 00:57:50,780
the beginning so even if we had a

00:57:48,470 --> 00:57:53,390
functional spec I don't know if it would

00:57:50,780 --> 00:57:55,910
have caught all of those necessarily but

00:57:53,390 --> 00:57:58,310
certainly we do we do endeavor to make

00:57:55,910 --> 00:58:00,260
sure we don't commit a new you are a new

00:57:58,310 --> 00:58:02,180
API like configuration management until

00:58:00,260 --> 00:58:04,370
we have test coverage of everything that

00:58:02,180 --> 00:58:05,920
we can think about at that time where

00:58:04,370 --> 00:58:07,640
these things often come in is when

00:58:05,920 --> 00:58:09,350
configuration management sitting around

00:58:07,640 --> 00:58:10,820
fine and not bugging anybody and then

00:58:09,350 --> 00:58:12,650
all of a sudden somebody try to push

00:58:10,820 --> 00:58:14,000
this thing into it which was also fine

00:58:12,650 --> 00:58:16,310
in isolation no one thought of it

00:58:14,000 --> 00:58:17,660
together and the integration of those

00:58:16,310 --> 00:58:19,880
two things was what caused critical

00:58:17,660 --> 00:58:21,830
issues nada p I in views is a good

00:58:19,880 --> 00:58:24,470
example reviews by itself was working

00:58:21,830 --> 00:58:26,300
fine any API was working fine and then

00:58:24,470 --> 00:58:27,950
people started to notice like oh but

00:58:26,300 --> 00:58:29,480
because views is doing one thing here

00:58:27,950 --> 00:58:31,100
and any apparent is doing something over

00:58:29,480 --> 00:58:32,630
here we could actually introduce

00:58:31,100 --> 00:58:34,490
security problems because a

00:58:32,630 --> 00:58:36,530
configuration change is not taking

00:58:34,490 --> 00:58:38,840
effect all of those got fixed as well

00:58:36,530 --> 00:58:39,830
before my presentation it's it's

00:58:38,840 --> 00:58:40,970
something to think about i think it

00:58:39,830 --> 00:58:42,859
would be good for four

00:58:40,970 --> 00:58:44,660
the risk management team to do some

00:58:42,859 --> 00:58:46,609
analysis on the critical issues that did

00:58:44,660 --> 00:58:48,410
cop those 1500 or whatever that we've

00:58:46,609 --> 00:58:49,730
fixed and try and figure out if there

00:58:48,410 --> 00:58:53,210
are safeguards we could put in ahead of

00:58:49,730 --> 00:58:54,650
time I don't know if we'll spec is quite

00:58:53,210 --> 00:58:57,830
the right way to do it but maybe it is

00:58:54,650 --> 00:58:59,990
more of an emphasis on um writing

00:58:57,830 --> 00:59:01,880
functional test versus unit test oh I

00:58:59,990 --> 00:59:02,930
don't know but I feel like you know a

00:59:01,880 --> 00:59:04,400
lot of these things that we're finding

00:59:02,930 --> 00:59:05,450
now are because people are clicking

00:59:04,400 --> 00:59:07,790
around the UI and all of a sudden

00:59:05,450 --> 00:59:08,930
finding things that make no sense versus

00:59:07,790 --> 00:59:11,660
the unit tests weren't catching those

00:59:08,930 --> 00:59:13,099
things so it's interesting to see if you

00:59:11,660 --> 00:59:14,480
know different ways that we could do

00:59:13,099 --> 00:59:15,800
that and I would invite if anyone has

00:59:14,480 --> 00:59:17,690
ideas on that I would love to hear

00:59:15,800 --> 00:59:19,820
because nobody nobody wants to be

00:59:17,690 --> 00:59:21,950
spending you know an entire year fixing

00:59:19,820 --> 00:59:24,020
critical issues that's not really fun so

00:59:21,950 --> 00:59:25,760
yeah good good thought-provoking

00:59:24,020 --> 00:59:28,010
question Kieran I don't have any great

00:59:25,760 --> 00:59:29,990
answers other than I just to set your

00:59:28,010 --> 00:59:32,720
mind at ease we do at least try to

00:59:29,990 --> 00:59:34,010
prevent that from happening by front

00:59:32,720 --> 00:59:37,070
loading gates in front of people like

00:59:34,010 --> 00:59:40,460
performance and testing and such so yes

00:59:37,070 --> 00:59:43,369
Jess I will say also that um we actually

00:59:40,460 --> 00:59:47,000
have been doing the sort of critical

00:59:43,369 --> 00:59:48,140
source or like the the analysis of where

00:59:47,000 --> 00:59:51,770
the critical issues are coming from the

00:59:48,140 --> 00:59:54,320
ng described since last summer and it

00:59:51,770 --> 00:59:56,390
turns out we actually don't at least in

00:59:54,320 --> 00:59:58,460
the past year we haven't broken that

00:59:56,390 --> 01:00:00,770
many things compared to the total number

00:59:58,460 --> 01:00:02,680
of critical issues like it's it's more

01:00:00,770 --> 01:00:04,730
on it tends to be more a matter of

01:00:02,680 --> 01:00:06,349
something that was already broken in

01:00:04,730 --> 01:00:09,470
Drupal 7 needs to be forward ported to

01:00:06,349 --> 01:00:11,240
Drupal 8 and right now as you saw in

01:00:09,470 --> 01:00:14,000
Angie's presentation a lot of issues are

01:00:11,240 --> 01:00:15,710
you know significant performance and

01:00:14,000 --> 01:00:17,869
caching improvements if we had made

01:00:15,710 --> 01:00:19,430
those performance improvements if we had

01:00:17,869 --> 01:00:21,980
added all of this caching two years ago

01:00:19,430 --> 01:00:23,540
that would be premature optimization and

01:00:21,980 --> 01:00:25,730
we would have been doing a lot of work

01:00:23,540 --> 01:00:28,580
twice and in a long term possibly

01:00:25,730 --> 01:00:31,280
introducing more technical debt so at

01:00:28,580 --> 01:00:32,750
least at least in the past year or so it

01:00:31,280 --> 01:00:35,300
you know that we're definitely still

01:00:32,750 --> 01:00:36,859
breaking things but a lot of the biggest

01:00:35,300 --> 01:00:39,290
things that we've broken came out of the

01:00:36,859 --> 01:00:41,630
very last changes that we made before we

01:00:39,290 --> 01:00:42,950
release the beta on so we decided we

01:00:41,630 --> 01:00:44,510
made a decision to support a couple of

01:00:42,950 --> 01:00:46,580
new big things and when you add new

01:00:44,510 --> 01:00:47,720
functionality that's usually the biggest

01:00:46,580 --> 01:00:50,030
place that you're going to accrue new

01:00:47,720 --> 01:00:52,220
technical debt to so it's it's not like

01:00:50,030 --> 01:00:54,799
we just weren't paying attention and

01:00:52,220 --> 01:00:57,799
broke things we introduced a

01:00:54,799 --> 01:01:01,009
an awesome new system that makes it much

01:00:57,799 --> 01:01:02,689
easier to for the entity field API to

01:01:01,009 --> 01:01:04,369
maintain its data structure so that

01:01:02,689 --> 01:01:06,229
developers don't have to always update

01:01:04,369 --> 01:01:08,179
that manually that introduced a bunch of

01:01:06,229 --> 01:01:10,999
new bugs that had to be fixed as a part

01:01:08,179 --> 01:01:11,989
of that I just wanted to add that but

01:01:10,999 --> 01:01:13,670
with regard to your point about

01:01:11,989 --> 01:01:15,529
marketing so one important thing to keep

01:01:13,670 --> 01:01:17,329
in mind about the number of critical

01:01:15,529 --> 01:01:20,829
issues is that it's always changing

01:01:17,329 --> 01:01:22,880
we're always discovering new problems or

01:01:20,829 --> 01:01:25,400
deciding that new things need to be

01:01:22,880 --> 01:01:28,009
fixed and out of all of them most of

01:01:25,400 --> 01:01:29,660
them are actually fixed like one in in

01:01:28,009 --> 01:01:31,789
three critical issues are fixed within

01:01:29,660 --> 01:01:33,769
one week like it's not like they're

01:01:31,789 --> 01:01:35,959
sitting around forever so those 26

01:01:33,769 --> 01:01:37,640
issues that are left like that's

01:01:35,959 --> 01:01:41,059
actually the ones that just haven't

01:01:37,640 --> 01:01:43,099
turned over so it would be like fourteen

01:01:41,059 --> 01:01:44,719
hundred and thirty seven out of fourteen

01:01:43,099 --> 01:01:46,369
hundred and seventy whatever and then

01:01:44,719 --> 01:01:48,140
like in a month that it'd be like

01:01:46,369 --> 01:01:49,969
fifteen hundred and twenty-seven out of

01:01:48,140 --> 01:01:51,859
fifteen hundred and thirty seven so it's

01:01:49,969 --> 01:01:54,769
actually it's an ever-growing thing so

01:01:51,859 --> 01:01:56,420
it's not really i actually do i I did

01:01:54,769 --> 01:01:58,429
last year make a graph of like the total

01:01:56,420 --> 01:02:00,439
number of critical issues but it's it's

01:01:58,429 --> 01:02:01,819
kind of hard to keep track of that

01:02:00,439 --> 01:02:06,469
because i can't remember from day to day

01:02:01,819 --> 01:02:08,630
whether i have to go to you know 1527 to

01:02:06,469 --> 01:02:10,519
it's also very depressing when you look

01:02:08,630 --> 01:02:12,259
at them okay like I get what you're

01:02:10,519 --> 01:02:13,880
saying that it shows like look at this

01:02:12,259 --> 01:02:16,819
work like if you showed a bar graph

01:02:13,880 --> 01:02:19,189
right and there was 1500 in total and

01:02:16,819 --> 01:02:22,429
we've got 26 left that looks really good

01:02:19,189 --> 01:02:24,170
the problem is like um you know like if

01:02:22,429 --> 01:02:26,119
you show it as like as a burndown graph

01:02:24,170 --> 01:02:27,559
it's like oh my God we're never gonna be

01:02:26,119 --> 01:02:29,239
done so you know it's like it always

01:02:27,559 --> 01:02:31,489
been the presentation of data but I

01:02:29,239 --> 01:02:33,229
don't I take your point then yeah but an

01:02:31,489 --> 01:02:35,390
emphasis on what all we have

01:02:33,229 --> 01:02:37,309
accomplished versus only an emphasis on

01:02:35,390 --> 01:02:39,650
what's left that I think that makes a

01:02:37,309 --> 01:02:41,029
lot of sense yes I think we have one

01:02:39,650 --> 01:02:44,119
more question and then I'm pretty sure

01:02:41,029 --> 01:02:46,249
we need to leave okay so I've been doing

01:02:44,119 --> 01:02:49,069
a little bit of work porting my drupal 6

01:02:46,249 --> 01:02:51,499
mo drupal 7 modules to drupal 8 yeah

01:02:49,069 --> 01:02:52,910
sometimes I hit something where I'm not

01:02:51,499 --> 01:02:54,920
sure if it's an issue with my

01:02:52,910 --> 01:02:58,160
implementation or if it's an issue with

01:02:54,920 --> 01:03:00,439
core so is there a place where I can go

01:02:58,160 --> 01:03:02,599
without disturbing the people who are

01:03:00,439 --> 01:03:04,219
busy working on Drupal 8 core and ask

01:03:02,599 --> 01:03:06,949
them hey am i doing something really

01:03:04,219 --> 01:03:08,220
stupid or is this actually a problem in

01:03:06,949 --> 01:03:14,010
call that needs to be

01:03:08,220 --> 01:03:21,030
dressed I see a wild hand over here who

01:03:14,010 --> 01:03:22,800
are you so what is your name socket

01:03:21,030 --> 01:03:24,960
wench right on so you should talk to

01:03:22,800 --> 01:03:27,119
Sokka twinge no but I think that is

01:03:24,960 --> 01:03:29,550
that's one thing you can do is is

01:03:27,119 --> 01:03:31,410
collaborate with other module porters

01:03:29,550 --> 01:03:34,200
and socket wrench has done a bunch of

01:03:31,410 --> 01:03:35,820
this lately with the flag module I think

01:03:34,200 --> 01:03:37,470
generally speaking if it's a contributed

01:03:35,820 --> 01:03:39,750
module just come in and Drupal

01:03:37,470 --> 01:03:41,460
contribute I see people asking questions

01:03:39,750 --> 01:03:42,930
in there all the time and they're

01:03:41,460 --> 01:03:45,150
totally fine if you're trying to help

01:03:42,930 --> 01:03:48,330
move Drupal 8 forward in any way and it

01:03:45,150 --> 01:03:50,340
doesn't matter if its core or contribute

01:03:48,330 --> 01:03:52,290
great I'm sorry yes that's the IRC

01:03:50,340 --> 01:03:54,330
channel a lot of people are asking

01:03:52,290 --> 01:03:56,940
Drupal 8 questions on stack exchange as

01:03:54,330 --> 01:03:58,080
well Drupal stack exchange Kathy you

01:03:56,940 --> 01:04:00,119
look like you have something you'd like

01:03:58,080 --> 01:04:02,750
to say to that as well I think one of

01:04:00,119 --> 01:04:05,820
the patterns that I have seen is like

01:04:02,750 --> 01:04:08,250
tests when when she runs into a problem

01:04:05,820 --> 01:04:10,200
she'll talk to people but eventually

01:04:08,250 --> 01:04:12,030
she'll make a core issue for it and

01:04:10,200 --> 01:04:14,369
she'll be like this is how to reproduce

01:04:12,030 --> 01:04:16,560
the problem so I think it's okay to make

01:04:14,369 --> 01:04:18,660
a core issue people will look at it and

01:04:16,560 --> 01:04:20,310
we can talk about it there and have a

01:04:18,660 --> 01:04:21,990
discussion and if we decide it's not a

01:04:20,310 --> 01:04:25,440
problem we just move it out of the queue

01:04:21,990 --> 01:04:28,260
or we document why it's not a problem so

01:04:25,440 --> 01:04:31,680
I think it's totally okay to be like

01:04:28,260 --> 01:04:34,080
look this is what I tried I think like

01:04:31,680 --> 01:04:36,720
maybe it's broken don't be afraid to

01:04:34,080 --> 01:04:39,109
open an issue it's okay you're not

01:04:36,720 --> 01:04:45,200
bothering anybody we can ignore them oh

01:04:39,109 --> 01:04:47,160
no and I but i think i think i think is

01:04:45,200 --> 01:04:48,510
this thing is even better than that we

01:04:47,160 --> 01:04:50,400
don't want to ignore them because the

01:04:48,510 --> 01:04:51,930
fact is most people working in core are

01:04:50,400 --> 01:04:54,060
not porting contributed modules because

01:04:51,930 --> 01:04:56,010
they don't have time so getting feedback

01:04:54,060 --> 01:04:59,400
from the field from people directly

01:04:56,010 --> 01:05:00,660
trying to do that is sailing valuable

01:04:59,400 --> 01:05:01,830
and we can make a call on whether we

01:05:00,660 --> 01:05:03,359
think that should block release or not

01:05:01,830 --> 01:05:08,339
but don't ever be shy to talk to people

01:05:03,359 --> 01:05:10,260
because we're really nice people yeah so

01:05:08,339 --> 01:05:12,060
we do it with issues we do with IRC also

01:05:10,260 --> 01:05:14,520
come to the sprints and sit with people

01:05:12,060 --> 01:05:17,339
and have fun and yeah and yeah but don't

01:05:14,520 --> 01:05:18,900
be don't be scared really like yeah

01:05:17,339 --> 01:05:20,040
people are generally very understanding

01:05:18,900 --> 01:05:22,160
especially if you're working and

01:05:20,040 --> 01:05:25,610
contributed module that's totally Drupal

01:05:22,160 --> 01:05:27,890
tribute material like so all right I'd

01:05:25,610 --> 01:05:30,980
say on that is a view if you are

01:05:27,890 --> 01:05:34,580
struggling with knowing how something is

01:05:30,980 --> 01:05:36,740
supposed to be designed in core come to

01:05:34,580 --> 01:05:38,690
the documentation group so that we can

01:05:36,740 --> 01:05:40,880
make the documentation clear enough so

01:05:38,690 --> 01:05:42,680
that you don't have the question about

01:05:40,880 --> 01:05:46,090
whether that's the right implementation

01:05:42,680 --> 01:05:50,210
to begin with that's excellent thank you

01:05:46,090 --> 01:05:53,870
documentation alright so I don't know

01:05:50,210 --> 01:05:55,130
how to figure out a program schedule

01:05:53,870 --> 01:05:58,250
that's probably what I want I'm pretty

01:05:55,130 --> 01:06:00,590
sure we're over time we are great ok so

01:05:58,250 --> 01:06:06,680
thank you everyone for coming and i will

01:06:00,590 --> 01:06:10,450
see you at the sprints that's there's

01:06:06,680 --> 01:06:10,450

YouTube URL: https://www.youtube.com/watch?v=UGzQPcQRci4


