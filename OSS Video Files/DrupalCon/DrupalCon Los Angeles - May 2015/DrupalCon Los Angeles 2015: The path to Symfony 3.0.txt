Title: DrupalCon Los Angeles 2015: The path to Symfony 3.0
Publication date: 2015-05-12
Playlist: DrupalCon Los Angeles - May 2015
Description: 
	Symfony 3.0 is scheduled to be released in November 2015. During this session, I will talk about how the Symfony core team manages the transition from the 2.x series to the 3.x one, how you can make your code as compatible as possible with Symfony 3.0 starting today, and what you can expect from this new major version.
Captions: 
	00:00:00,000 --> 00:00:09,300
hi everyone welcome to this session

00:00:03,060 --> 00:00:12,300
about symphony so symphony started 10

00:00:09,300 --> 00:00:15,990
years ago actually so we are celebrating

00:00:12,300 --> 00:00:18,960
10 years of symphony this year and a bit

00:00:15,990 --> 00:00:21,779
like drupal is studied by being a

00:00:18,960 --> 00:00:26,039
one-man show it was just me cutting

00:00:21,779 --> 00:00:30,150
symphony it's bit different from trees

00:00:26,039 --> 00:00:33,090
because at that time I I I was in a web

00:00:30,150 --> 00:00:36,360
agency called since you and so I created

00:00:33,090 --> 00:00:39,360
symphony not just for the fun of it but

00:00:36,360 --> 00:00:42,290
because I needed something for my

00:00:39,360 --> 00:00:48,420
customers so symphony was crazy because

00:00:42,290 --> 00:00:53,840
we needed to create good projects good

00:00:48,420 --> 00:00:58,829
projects with PHP and 2005 was the first

00:00:53,840 --> 00:01:01,379
release of PHP 5 so symphony actually

00:00:58,829 --> 00:01:04,559
studied as a PHP 5 only project which

00:01:01,379 --> 00:01:10,080
means that from the one we were able to

00:01:04,559 --> 00:01:12,920
use all the nice features that come with

00:01:10,080 --> 00:01:12,920
PHP 5

00:01:14,120 --> 00:01:19,830
so nowadays symfony2 is totally

00:01:17,700 --> 00:01:22,770
different from the project that i

00:01:19,830 --> 00:01:24,570
created 10 years ago symphony one

00:01:22,770 --> 00:01:28,470
version one was a terry different

00:01:24,570 --> 00:01:31,770
project we studied from scratch about

00:01:28,470 --> 00:01:33,720
six years ago trying to learn you know

00:01:31,770 --> 00:01:36,630
about all our mistakes and all the

00:01:33,720 --> 00:01:39,450
things that we got wrong with the first

00:01:36,630 --> 00:01:42,570
version and also because we realized

00:01:39,450 --> 00:01:45,240
that beside being a framework symphony

00:01:42,570 --> 00:01:48,720
as the potential to become a set of

00:01:45,240 --> 00:01:51,390
libraries that you can use independently

00:01:48,720 --> 00:01:54,300
and that was the key point with symphony

00:01:51,390 --> 00:01:57,540
to being able to give you developers a

00:01:54,300 --> 00:02:01,740
lot of independent components that you

00:01:57,540 --> 00:02:05,270
can use for your own projects the second

00:02:01,740 --> 00:02:09,720
thing for symphony to was trying to

00:02:05,270 --> 00:02:12,930
stick with best practices and that's why

00:02:09,720 --> 00:02:15,720
we have an HTTP foundation and HTTP

00:02:12,930 --> 00:02:18,959
colonel components the goal was really

00:02:15,720 --> 00:02:21,420
to try to stick to http as much as

00:02:18,959 --> 00:02:25,380
possible trying to not reinvent the

00:02:21,420 --> 00:02:28,650
wheel trying to not have a symphony way

00:02:25,380 --> 00:02:30,239
of doing things that's also why we have

00:02:28,650 --> 00:02:31,550
dependency injection that's why we have

00:02:30,239 --> 00:02:33,209
a dependency injection container

00:02:31,550 --> 00:02:35,670
symphony was actually the first

00:02:33,209 --> 00:02:40,590
framework in the PHP world to propose

00:02:35,670 --> 00:02:42,750
such a container and again it was not

00:02:40,590 --> 00:02:44,550
because it was fun just because at some

00:02:42,750 --> 00:02:47,510
point we had so many different

00:02:44,550 --> 00:02:49,950
components that we needed a way to

00:02:47,510 --> 00:02:52,350
create the glue between all the

00:02:49,950 --> 00:02:54,720
components and the only way to be able

00:02:52,350 --> 00:02:56,510
to do that in a decoupled way was to

00:02:54,720 --> 00:02:59,760
actually use dependency injection and

00:02:56,510 --> 00:03:02,550
then to create a full stack frame work

00:02:59,760 --> 00:03:04,860
being able to come to configure all

00:03:02,550 --> 00:03:07,560
those services

00:03:04,860 --> 00:03:11,130
I think access to a container make

00:03:07,560 --> 00:03:15,360
things really easy so I'm not going to

00:03:11,130 --> 00:03:17,510
talk too much about symphony and the

00:03:15,360 --> 00:03:19,980
stories behind behind femora but

00:03:17,510 --> 00:03:24,000
nowadays if you have a look at packages

00:03:19,980 --> 00:03:28,170
which is the website where all the

00:03:24,000 --> 00:03:30,140
composer packages are reference symphony

00:03:28,170 --> 00:03:33,660
and all its components have been

00:03:30,140 --> 00:03:36,480
downloaded millions of time really which

00:03:33,660 --> 00:03:40,620
means that we have a great community of

00:03:36,480 --> 00:03:42,480
developers using the components for open

00:03:40,620 --> 00:03:47,040
source project like drupal so we have

00:03:42,480 --> 00:03:49,320
something like 50 different major pft

00:03:47,040 --> 00:03:51,900
project using more one or more

00:03:49,320 --> 00:03:54,750
components components coming from

00:03:51,900 --> 00:03:59,310
symphony but also for your private

00:03:54,750 --> 00:04:02,040
project of course and the fact that we

00:03:59,310 --> 00:04:05,340
are used and symphony is used by so many

00:04:02,040 --> 00:04:07,380
projects out there means that we have a

00:04:05,340 --> 00:04:13,260
great responsibility right a framework

00:04:07,380 --> 00:04:16,680
is the baseline it is the foundation you

00:04:13,260 --> 00:04:21,540
are using to build something on top of

00:04:16,680 --> 00:04:23,070
it and which means that we can't do bad

00:04:21,540 --> 00:04:27,660
things like breaking backward

00:04:23,070 --> 00:04:30,900
compatibility every other year or so we

00:04:27,660 --> 00:04:33,870
need to have good practices there we

00:04:30,900 --> 00:04:36,720
need to give you visibility on what's

00:04:33,870 --> 00:04:39,000
happening in the code things like that

00:04:36,720 --> 00:04:41,460
and I'm going to talk about this

00:04:39,000 --> 00:04:44,900
challenge and how we build the

00:04:41,460 --> 00:04:48,210
methodology and tools to help us be sure

00:04:44,900 --> 00:04:52,070
that we can guarantee backward

00:04:48,210 --> 00:04:52,070
compatibility between all the versions

00:04:52,490 --> 00:04:57,750
the latest version of symphonies 2.6 the

00:04:56,130 --> 00:04:58,860
next one is going to be 2.7 to be

00:04:57,750 --> 00:05:02,160
released at the end of the year at the

00:04:58,860 --> 00:05:05,280
month actually so in a couple of weeks

00:05:02,160 --> 00:05:09,840
from now 2.7 is just an evolution from

00:05:05,280 --> 00:05:13,980
2.6 but we still have one Android new

00:05:09,840 --> 00:05:16,590
features big and small really and I

00:05:13,980 --> 00:05:19,860
think the main point of symphony 2.7 is

00:05:16,590 --> 00:05:25,380
performance and some of the components

00:05:19,860 --> 00:05:27,470
were quite slow and we worked out making

00:05:25,380 --> 00:05:31,080
sure that they are actually much faster

00:05:27,470 --> 00:05:32,460
than they used to be and that's the case

00:05:31,080 --> 00:05:36,300
for instance for the translation

00:05:32,460 --> 00:05:39,240
component and a fuser ones we also work

00:05:36,300 --> 00:05:42,840
a lot on the serializer component which

00:05:39,240 --> 00:05:45,980
is used by drupal so it's going to be

00:05:42,840 --> 00:05:50,250
super useful for for you as well

00:05:45,980 --> 00:05:55,830
okay so the first thing is we want

00:05:50,250 --> 00:06:00,660
predictability if project pan our

00:05:55,830 --> 00:06:03,900
symphony you must know when a new

00:06:00,660 --> 00:06:06,660
version is coming out so that you can

00:06:03,900 --> 00:06:09,650
plan out of time the migration to new

00:06:06,660 --> 00:06:13,410
version which means that symphony is not

00:06:09,650 --> 00:06:16,740
the releases are not based on features

00:06:13,410 --> 00:06:19,260
but on a date so we know that the

00:06:16,740 --> 00:06:20,790
symphony 2.7 version is going to be by

00:06:19,260 --> 00:06:23,100
the end of the month and i can tell you

00:06:20,790 --> 00:06:25,710
when the next version is going to be

00:06:23,100 --> 00:06:29,130
released as well and the next 10

00:06:25,710 --> 00:06:31,800
releases as matter of fact and that's

00:06:29,130 --> 00:06:33,780
very important for a private project

00:06:31,800 --> 00:06:35,880
that has that's also very very useful

00:06:33,780 --> 00:06:39,750
for open source Kwan's which means that

00:06:35,880 --> 00:06:42,990
some projects like laravel they try to

00:06:39,750 --> 00:06:45,540
sink their releases with symphonies so

00:06:42,990 --> 00:06:48,290
that they can upgrade from the current

00:06:45,540 --> 00:06:51,960
version they are using to the next one

00:06:48,290 --> 00:06:55,050
easily so you know what to expect if you

00:06:51,960 --> 00:06:57,630
want to have more information about our

00:06:55,050 --> 00:07:00,140
own map you can go to symphony calm /

00:06:57,630 --> 00:07:03,620
run map thing I'm going to switch to

00:07:00,140 --> 00:07:03,620
browser here

00:07:05,220 --> 00:07:08,720
so you can see

00:07:08,900 --> 00:07:13,669
so this is page so the current version

00:07:10,810 --> 00:07:16,280
is too okay so the current version is

00:07:13,669 --> 00:07:18,970
actually 2.6 which is what we call it's

00:07:16,280 --> 00:07:22,460
done at release astonish release is

00:07:18,970 --> 00:07:26,150
maintained for a year and six months

00:07:22,460 --> 00:07:29,210
after that for security issues we also

00:07:26,150 --> 00:07:32,690
have long-term support releases and the

00:07:29,210 --> 00:07:36,139
current one is 2.3 and an LTS is

00:07:32,690 --> 00:07:39,949
maintained for three years and one year

00:07:36,139 --> 00:07:42,169
for security issues so for years in

00:07:39,949 --> 00:07:44,790
total and the next LGS is going to be

00:07:42,169 --> 00:07:49,830
2.7

00:07:44,790 --> 00:07:52,440
and so if you want to know anything

00:07:49,830 --> 00:07:55,770
about a version you can just type your

00:07:52,440 --> 00:07:58,950
diversion can check and we give you all

00:07:55,770 --> 00:08:00,720
the dates when it was released the end

00:07:58,950 --> 00:08:04,170
of support the end of support for

00:08:00,720 --> 00:08:07,980
security fixes right you can also get

00:08:04,170 --> 00:08:09,540
the same information as a JSON file so

00:08:07,980 --> 00:08:13,130
that you can integrate that into your

00:08:09,540 --> 00:08:13,130
tools if that makes sense

00:08:17,060 --> 00:08:21,340
ok this is the run map

00:08:22,350 --> 00:08:27,510
and so ok I'm going to talk about this

00:08:24,840 --> 00:08:31,050
later on so we also have a backward

00:08:27,510 --> 00:08:35,729
compatible promise so there is a page on

00:08:31,050 --> 00:08:44,070
the symphony com website ok I'm going to

00:08:35,729 --> 00:08:49,500
switch so this page not this one this

00:08:44,070 --> 00:08:53,910
one symphony calm / bc and then we

00:08:49,500 --> 00:08:56,910
leased exactly our rules regarding

00:08:53,910 --> 00:08:59,550
backward compatibility so you can know

00:08:56,910 --> 00:09:02,430
exactly what to expect when you are bred

00:08:59,550 --> 00:09:06,540
from one version 2 next one it's very

00:09:02,430 --> 00:09:10,230
detailed so I'm not going to talk about

00:09:06,540 --> 00:09:15,320
everything here but you can see all the

00:09:10,230 --> 00:09:18,510
use cases for classes classes methods

00:09:15,320 --> 00:09:21,960
interfaces and so on so we tell you what

00:09:18,510 --> 00:09:24,000
we can do with regular methods or API

00:09:21,960 --> 00:09:28,350
once i'm going to talk about the API

00:09:24,000 --> 00:09:30,090
later on so i highly recommend you to

00:09:28,350 --> 00:09:31,770
read this document if you are working

00:09:30,090 --> 00:09:32,700
with symphony because it tells you

00:09:31,770 --> 00:09:34,860
everything you need to know about

00:09:32,700 --> 00:09:39,150
backward compatibility no symphony world

00:09:34,860 --> 00:09:42,960
and by the way it took us a lot of time

00:09:39,150 --> 00:09:45,840
to get this point so if you want to do

00:09:42,960 --> 00:09:47,640
the same things you can probably just

00:09:45,840 --> 00:09:51,390
copy and paste what we've done here and

00:09:47,640 --> 00:09:52,470
depth to your project it opens also feel

00:09:51,390 --> 00:09:57,540
free to

00:09:52,470 --> 00:10:00,180
get inspiration from what we've done so

00:09:57,540 --> 00:10:04,070
basically we try to follow semantic

00:10:00,180 --> 00:10:08,310
versioning and semantic versioning is

00:10:04,070 --> 00:10:11,910
easy to grasp easy to understand very

00:10:08,310 --> 00:10:15,090
difficult to actually make it work for a

00:10:11,910 --> 00:10:17,580
project it's all always very easy to

00:10:15,090 --> 00:10:21,570
break backward compatibility in some

00:10:17,580 --> 00:10:27,090
ways in minor version so semantic

00:10:21,570 --> 00:10:29,400
versioning means that any two point X

00:10:27,090 --> 00:10:33,420
plus one versions are compatible with

00:10:29,400 --> 00:10:35,420
the previous ones to point X right it's

00:10:33,420 --> 00:10:38,250
not the case for the development

00:10:35,420 --> 00:10:41,690
versions alpha versions better version

00:10:38,250 --> 00:10:43,920
release candidates everything under test

00:10:41,690 --> 00:10:44,700
directories so all the tests of course

00:10:43,920 --> 00:10:47,130
we don't need to maintain

00:10:44,700 --> 00:10:52,260
biocompatibility that's also not the

00:10:47,130 --> 00:10:55,740
case for any class or method tagged ways

00:10:52,260 --> 00:10:58,920
add internal and private stuff obviously

00:10:55,740 --> 00:11:01,770
so we do have some public methods tagged

00:10:58,920 --> 00:11:03,420
with internal just because of PHP

00:11:01,770 --> 00:11:05,880
limitation and the fact that we are

00:11:03,420 --> 00:11:07,110
still supporting PHP file three so

00:11:05,880 --> 00:11:10,400
that's not going to be the case anymore

00:11:07,110 --> 00:11:12,300
in 73 because we are going to drop

00:11:10,400 --> 00:11:15,840
compatibility with all the version of

00:11:12,300 --> 00:11:18,180
PHP but right now we do have probably 10

00:11:15,840 --> 00:11:21,090
methods that are public but really

00:11:18,180 --> 00:11:25,260
private and everything public are

00:11:21,090 --> 00:11:27,780
protected can be a class of property or

00:11:25,260 --> 00:11:32,640
method arguments tie pins cannot be

00:11:27,780 --> 00:11:35,220
modified in anyway so if for any given

00:11:32,640 --> 00:11:39,350
set of input we must have the same

00:11:35,220 --> 00:11:42,540
output right and that's the biggest

00:11:39,350 --> 00:11:45,750
problem that we are facing and that's

00:11:42,540 --> 00:11:49,310
also why in symphony we have a lot of

00:11:45,750 --> 00:11:53,020
private methods a lot of them by default

00:11:49,310 --> 00:11:56,959
everything is private and sinful

00:11:53,020 --> 00:11:59,360
protected and public are only when we

00:11:56,959 --> 00:12:02,060
want to provide an extension but if not

00:11:59,360 --> 00:12:07,430
everything is private it makes our lives

00:12:02,060 --> 00:12:09,560
as maintenance much it makes it our life

00:12:07,430 --> 00:12:11,420
much easier because then we know that

00:12:09,560 --> 00:12:15,459
everything is private we can refactor it

00:12:11,420 --> 00:12:19,399
the way we want and it adds a lot and

00:12:15,459 --> 00:12:21,589
even for protected method for instance

00:12:19,399 --> 00:12:24,170
we need to be sure that we keep

00:12:21,589 --> 00:12:27,200
inheritance working the right way which

00:12:24,170 --> 00:12:30,350
means that even we if we duplicate a

00:12:27,200 --> 00:12:33,620
protected method we still need to call

00:12:30,350 --> 00:12:36,980
it because if you override a class with

00:12:33,620 --> 00:12:40,130
a protective method and you rely on this

00:12:36,980 --> 00:12:43,339
specific behavior we need to keep it so

00:12:40,130 --> 00:12:47,470
it's not it can be a bit complex so let

00:12:43,339 --> 00:12:47,470
me show you an example a quick one air

00:12:56,690 --> 00:13:03,329
did big enough

00:12:59,610 --> 00:13:07,490
so Colonel here we have an init method

00:13:03,329 --> 00:13:12,060
here it has been deprecated in 2.3 and

00:13:07,490 --> 00:13:15,480
if you actually call this method you

00:13:12,060 --> 00:13:18,839
will have duplication notice I'm going

00:13:15,480 --> 00:13:20,660
to talk about this later on but then we

00:13:18,839 --> 00:13:23,550
still call it here in the constructor

00:13:20,660 --> 00:13:25,079
because if not we are breaking backward

00:13:23,550 --> 00:13:28,950
compatibility but as you can see to be

00:13:25,079 --> 00:13:31,769
able to do that it's a bit complex it's

00:13:28,950 --> 00:13:37,410
not true because we need to be sure that

00:13:31,769 --> 00:13:40,940
when you create an init method in in a

00:13:37,410 --> 00:13:43,980
class that extends colonel you must have

00:13:40,940 --> 00:13:46,140
the duplication notice if not you should

00:13:43,980 --> 00:13:48,300
not so internally we are calling the

00:13:46,140 --> 00:13:51,180
method but we don't want to have the

00:13:48,300 --> 00:13:54,000
trigger so it's not really interesting

00:13:51,180 --> 00:13:55,709
for developers using sinfonie as a

00:13:54,000 --> 00:13:57,450
framework it's very interesting to

00:13:55,709 --> 00:13:58,890
understand that it takes us a lot of

00:13:57,450 --> 00:14:03,110
time to maintain backward compatibility

00:13:58,890 --> 00:14:03,110
between all other realities

00:14:07,310 --> 00:14:13,580
okay so there is no example so simple

00:14:11,660 --> 00:14:17,540
stuff flag you know moving things around

00:14:13,580 --> 00:14:19,250
so we have this class which was part of

00:14:17,540 --> 00:14:21,950
HTTP Colonel but at some point we

00:14:19,250 --> 00:14:24,339
decided it was it would have been better

00:14:21,950 --> 00:14:27,020
to actually move that to the debug

00:14:24,339 --> 00:14:29,779
component and actually when we created

00:14:27,020 --> 00:14:32,480
this class the gburg component did not

00:14:29,779 --> 00:14:35,420
exist so we decided to move the

00:14:32,480 --> 00:14:38,150
namespace but we keep backward

00:14:35,420 --> 00:14:41,360
compatibility and if we have a look at

00:14:38,150 --> 00:14:48,490
the code it's not there easy to get

00:14:41,360 --> 00:14:48,490
right so if so this

00:14:49,200 --> 00:14:57,300
it's here so this one is the odd one and

00:14:54,260 --> 00:14:59,910
if you call it directly so if you

00:14:57,300 --> 00:15:02,310
instantiate this class directly it's

00:14:59,910 --> 00:15:04,740
going to trigger the auto loading and

00:15:02,310 --> 00:15:07,950
then you're going to have please trigger

00:15:04,740 --> 00:15:10,230
error method is called which is going to

00:15:07,950 --> 00:15:12,300
add a knowledge in your logs telling you

00:15:10,230 --> 00:15:15,210
that you can't use this method anymore

00:15:12,300 --> 00:15:19,080
because it is duplicated and then it

00:15:15,210 --> 00:15:23,730
loads the new one but if you have a look

00:15:19,080 --> 00:15:27,210
at a new one it's its ear but we extend

00:15:23,730 --> 00:15:30,480
this class which is defined here in the

00:15:27,210 --> 00:15:32,550
old namespace and that's because we need

00:15:30,480 --> 00:15:36,210
to keep pepper compatibility with type

00:15:32,550 --> 00:15:39,920
it's so even if you added type in for

00:15:36,210 --> 00:15:43,980
the old class we need to make it work

00:15:39,920 --> 00:15:46,620
with the new name space so that's a lot

00:15:43,980 --> 00:15:48,750
of code that we need to add to make sure

00:15:46,620 --> 00:15:52,730
that whatever you're doing with the code

00:15:48,750 --> 00:15:52,730
we do maintain backward compatibility

00:15:59,209 --> 00:16:04,819
okay so two point x plus one is

00:16:01,970 --> 00:16:08,350
compatible with two point X or two point

00:16:04,819 --> 00:16:13,269
X minus 1 managed to etc three-point now

00:16:08,350 --> 00:16:16,369
can break backward compatibility but

00:16:13,269 --> 00:16:18,399
what we are now doing is we do not add

00:16:16,369 --> 00:16:21,290
new features in three pointer because

00:16:18,399 --> 00:16:23,660
there is no need to wait for three

00:16:21,290 --> 00:16:25,490
pointer to actually add new features

00:16:23,660 --> 00:16:28,100
which means that all the new features

00:16:25,490 --> 00:16:31,179
that you will have in three point 0 are

00:16:28,100 --> 00:16:33,980
actually already available in 2 point X

00:16:31,179 --> 00:16:37,160
so whenever we want to add a new feature

00:16:33,980 --> 00:16:41,269
we add that in the 2 point X branch and

00:16:37,160 --> 00:16:43,369
of course if this new feature means that

00:16:41,269 --> 00:16:45,910
we need to duplicate something all the

00:16:43,369 --> 00:16:51,829
duplication notices are also part of the

00:16:45,910 --> 00:16:55,279
two point X plus 1 version so do not

00:16:51,829 --> 00:16:58,639
expect any new features in 3.0 as i said

00:16:55,279 --> 00:17:02,420
before three pointer is mainly the

00:16:58,639 --> 00:17:05,149
latest to point x version manage all the

00:17:02,420 --> 00:17:07,399
duplication notices and all the

00:17:05,149 --> 00:17:09,679
duplication deprecated features really

00:17:07,399 --> 00:17:13,189
so and also the compatibility layer

00:17:09,679 --> 00:17:17,000
right so it's more about cleaning the

00:17:13,189 --> 00:17:18,890
code than anything else and we are

00:17:17,000 --> 00:17:21,289
breaking backward compatibility because

00:17:18,890 --> 00:17:23,990
we are removing this layer of

00:17:21,289 --> 00:17:26,029
compatibility but of course whenever

00:17:23,990 --> 00:17:28,360
possible we try to keep backward

00:17:26,029 --> 00:17:31,630
compatibility between symfony2 and

00:17:28,360 --> 00:17:39,070
symphony three

00:17:31,630 --> 00:17:44,170
so sin 32.7 we thought it was the last

00:17:39,070 --> 00:17:46,630
version of 72 and actually won't be we

00:17:44,170 --> 00:17:49,660
are going to have an additional version

00:17:46,630 --> 00:17:52,900
for two point X branch which is going to

00:17:49,660 --> 00:17:55,120
be 2.8 and 2.8 is going to be released

00:17:52,900 --> 00:17:59,590
at the same time same time as three

00:17:55,120 --> 00:18:02,770
point 0 for a very simple reason we want

00:17:59,590 --> 00:18:06,070
you to be able to wait until the next

00:18:02,770 --> 00:18:09,010
three point x LG s version to upgrade

00:18:06,070 --> 00:18:12,040
from true point something to 3 point

00:18:09,010 --> 00:18:14,730
something else if it's not clear please

00:18:12,040 --> 00:18:20,650
interrupt me ask any questions any time

00:18:14,730 --> 00:18:23,710
so let me recap and if you are using a

00:18:20,650 --> 00:18:27,130
symphony Studdard version you need to

00:18:23,710 --> 00:18:28,990
upgrade every six month and we give you

00:18:27,130 --> 00:18:32,470
six months to upgrade so you can abrade

00:18:28,990 --> 00:18:33,670
every year something like that but

00:18:32,470 --> 00:18:36,280
sometimes you don't want to upgrade

00:18:33,670 --> 00:18:40,410
every six month so we also have the LTS

00:18:36,280 --> 00:18:44,110
releases we have one LTS release every

00:18:40,410 --> 00:18:47,260
two years which means that we need to

00:18:44,110 --> 00:18:51,340
synchronize all the LTS releases right

00:18:47,260 --> 00:18:54,700
but the thing is if 2.7 is the last LTS

00:18:51,340 --> 00:18:56,470
release and 3.2 is the next one you

00:18:54,700 --> 00:18:58,360
won't have a year to upgrade with just

00:18:56,470 --> 00:19:00,850
six month just because of that we

00:18:58,360 --> 00:19:03,460
decided to add another LTS release for

00:19:00,850 --> 00:19:06,460
symfony2 which is going to be 2.8 that's

00:19:03,460 --> 00:19:11,380
the first reason the second one is if we

00:19:06,460 --> 00:19:15,520
didn't have this 2.8 release it would

00:19:11,380 --> 00:19:17,680
have meant that the 2.7 release was the

00:19:15,520 --> 00:19:19,900
last time where we would have been able

00:19:17,680 --> 00:19:22,030
to add new features remember we do not

00:19:19,900 --> 00:19:25,150
add new features in three point 0 which

00:19:22,030 --> 00:19:27,490
means that from now to November we would

00:19:25,150 --> 00:19:28,440
not have been able to add any new

00:19:27,490 --> 00:19:30,330
features

00:19:28,440 --> 00:19:33,870
and that's a big problem so that's also

00:19:30,330 --> 00:19:35,400
why we added 2.8 so two point eight and

00:19:33,870 --> 00:19:39,030
three point 0 are going to be released

00:19:35,400 --> 00:19:42,840
at the end of november this year same

00:19:39,030 --> 00:19:46,140
feature set big difference three-pointer

00:19:42,840 --> 00:19:49,500
will have all the compatibility layer

00:19:46,140 --> 00:19:55,760
removed so two point is is three pointer

00:19:49,500 --> 00:20:02,090
plus the compatibility layer okay so now

00:19:55,760 --> 00:20:05,610
we want to provide a very simple path of

00:20:02,090 --> 00:20:09,330
migration from 2.8 two 3-pointers so how

00:20:05,610 --> 00:20:11,580
can we do that so whenever we add a new

00:20:09,330 --> 00:20:12,930
feature we added in the changelog so if

00:20:11,580 --> 00:20:15,750
you want to learn more about new

00:20:12,930 --> 00:20:18,540
features you can go to change log we

00:20:15,750 --> 00:20:20,670
reference everything they're all the

00:20:18,540 --> 00:20:23,100
duplications are also part of the

00:20:20,670 --> 00:20:25,080
upgrade file so that's how you can

00:20:23,100 --> 00:20:27,840
upgrade your project from one version

00:20:25,080 --> 00:20:30,150
next one which means also that if you

00:20:27,840 --> 00:20:33,030
want to be compatible with 3.0 you can

00:20:30,150 --> 00:20:35,880
start to do it today just have a look at

00:20:33,030 --> 00:20:37,750
the upgrade file and do all the needed

00:20:35,880 --> 00:20:43,240
changes there

00:20:37,750 --> 00:20:46,120
and we also add a deprecated tag with

00:20:43,240 --> 00:20:48,010
some commands about the new way of doing

00:20:46,120 --> 00:20:51,640
things in the code directly so that's

00:20:48,010 --> 00:20:54,880
also something that you can ever get so

00:20:51,640 --> 00:20:57,100
in November drained a symphony con in

00:20:54,880 --> 00:20:59,440
Madrid we decided to add all those

00:20:57,100 --> 00:21:02,470
duplication notices right so it took us

00:20:59,440 --> 00:21:04,360
a lot of time it took us about three

00:21:02,470 --> 00:21:06,370
months to add all the duplication

00:21:04,360 --> 00:21:09,190
notices everywhere so this is just one

00:21:06,370 --> 00:21:12,040
big Pro request doing that but we had

00:21:09,190 --> 00:21:15,940
many of them really so the goal is that

00:21:12,040 --> 00:21:17,920
whenever you run your code in the PHP

00:21:15,940 --> 00:21:20,620
logs you have all the warnings telling

00:21:17,920 --> 00:21:22,690
you you can't use this method anymore

00:21:20,620 --> 00:21:25,060
because it is duplicating so please use

00:21:22,690 --> 00:21:29,710
this other one or something like that

00:21:25,060 --> 00:21:35,850
and of course we got a lot of frustrated

00:21:29,710 --> 00:21:39,580
users because Symphony itself used

00:21:35,850 --> 00:21:44,920
deprecated step right so just burning

00:21:39,580 --> 00:21:49,270
sinfin itself on hello world just the

00:21:44,920 --> 00:21:52,870
unit test we had more than 200,000

00:21:49,270 --> 00:21:56,170
notices force infinite self and that's

00:21:52,870 --> 00:21:58,420
why at some point people and try to get

00:21:56,170 --> 00:22:01,840
rid of all those notices so the second

00:21:58,420 --> 00:22:04,840
step for us was to add an extension to

00:22:01,840 --> 00:22:08,110
PHP unit so that whenever we ran the

00:22:04,840 --> 00:22:10,660
test at the end of the test should you

00:22:08,110 --> 00:22:12,700
have a summary of all the duplicated

00:22:10,660 --> 00:22:15,610
stuff that you are using right and we

00:22:12,700 --> 00:22:19,140
started to update the curl of symphony

00:22:15,610 --> 00:22:22,550
to reduce those number of notices from

00:22:19,140 --> 00:22:26,570
200,000 to zero today

00:22:22,550 --> 00:22:28,670
and it took a lot of time this is one

00:22:26,570 --> 00:22:32,890
such commit and then we realized that it

00:22:28,670 --> 00:22:32,890
was not enough it was not enough because

00:22:33,550 --> 00:22:41,690
dynamic code is much more complex and no

00:22:38,330 --> 00:22:46,520
and one such example is interfaces for

00:22:41,690 --> 00:22:50,900
instance so because we need to keep the

00:22:46,520 --> 00:22:53,750
type ins working for your code we need

00:22:50,900 --> 00:22:55,850
to be able to load all those we need to

00:22:53,750 --> 00:22:58,190
type in internally with deprecated

00:22:55,850 --> 00:23:00,590
interfaces but we don't want to have the

00:22:58,190 --> 00:23:03,640
notices in this case we only want the

00:23:00,590 --> 00:23:06,050
notice if you are using a duplicated

00:23:03,640 --> 00:23:10,040
interface so we need to do that

00:23:06,050 --> 00:23:12,590
dynamically so again we added in the

00:23:10,040 --> 00:23:16,220
debug class loader of symphony a check

00:23:12,590 --> 00:23:18,170
that actually wants you if you are using

00:23:16,220 --> 00:23:22,060
the interface and doesn't do anything if

00:23:18,170 --> 00:23:25,400
it is internal so we have a lot of

00:23:22,060 --> 00:23:29,240
examples like that and it took a lot of

00:23:25,400 --> 00:23:32,780
time for us to make the process work the

00:23:29,240 --> 00:23:34,610
right way and then what we are going to

00:23:32,780 --> 00:23:37,940
change now is that we realized that

00:23:34,610 --> 00:23:40,580
adding all those notices at the end so

00:23:37,940 --> 00:23:45,500
we added and we duplicated stuff since

00:23:40,580 --> 00:23:47,510
symphony 2.3 so in 2.4 2.5 2.6 2.7 it's

00:23:45,500 --> 00:23:50,750
really a nightmare to add all those

00:23:47,510 --> 00:23:53,480
notices after the fact so for symphony

00:23:50,750 --> 00:23:56,180
2.8 and for any version of three point X

00:23:53,480 --> 00:23:58,760
really whenever we add a new feature we

00:23:56,180 --> 00:24:01,550
will add the duplicated tag right away

00:23:58,760 --> 00:24:03,190
so that we don't have to do that in two

00:24:01,550 --> 00:24:08,740
or three years from now

00:24:03,190 --> 00:24:11,860
and we also add a trigger notice in the

00:24:08,740 --> 00:24:14,710
curve where appropriate and of course we

00:24:11,860 --> 00:24:18,520
enforced that we should not and we must

00:24:14,710 --> 00:24:21,370
not use any duplicated staff in symphony

00:24:18,520 --> 00:24:25,830
so zero nada seasons infinite self and

00:24:21,370 --> 00:24:29,470
Symphony components is it enough and

00:24:25,830 --> 00:24:32,830
fortunately no it's not enough because

00:24:29,470 --> 00:24:35,620
in your project you might use some of

00:24:32,830 --> 00:24:38,530
the components in the 2.3 version some

00:24:35,620 --> 00:24:41,410
of them in the 2.6 version and then some

00:24:38,530 --> 00:24:44,490
other ones in three point 0 which means

00:24:41,410 --> 00:24:48,610
that we need to be sure that all those

00:24:44,490 --> 00:24:51,940
combinations can work actually so but by

00:24:48,610 --> 00:24:53,370
default composer use the latest version

00:24:51,940 --> 00:24:56,950
of all the components in your

00:24:53,370 --> 00:24:58,930
requirement right so if you are using

00:24:56,950 --> 00:25:03,100
symphony 2.7 you will get all this

00:24:58,930 --> 00:25:05,140
infant 2.7 dependencies but in your

00:25:03,100 --> 00:25:07,510
composure the JSON file you might say

00:25:05,140 --> 00:25:10,300
I'm compatible with any version starting

00:25:07,510 --> 00:25:14,190
from sin 22.3 but how can you be sure

00:25:10,300 --> 00:25:16,840
that is that is still true the truth and

00:25:14,190 --> 00:25:19,120
and the fact is you can't really because

00:25:16,840 --> 00:25:21,100
in composer there there was no way to do

00:25:19,120 --> 00:25:23,020
that so what we want to be able to do it

00:25:21,100 --> 00:25:25,390
to say okay for any two point X

00:25:23,020 --> 00:25:28,600
component I want to check that it works

00:25:25,390 --> 00:25:31,690
for any other two point X version of all

00:25:28,600 --> 00:25:34,600
the components that i'm using as

00:25:31,690 --> 00:25:37,090
dependencies air here and also with

00:25:34,600 --> 00:25:39,160
three-point oh and for a three-point oh

00:25:37,090 --> 00:25:40,960
I want to make sure that it works for

00:25:39,160 --> 00:25:43,870
three-point oh of course but also for

00:25:40,960 --> 00:25:47,440
2.8 that way we can be sure that we are

00:25:43,870 --> 00:25:48,520
compatible all the way from to point X

00:25:47,440 --> 00:25:52,910
to 3.9

00:25:48,520 --> 00:25:55,940
so we added two new flags to composer to

00:25:52,910 --> 00:26:00,650
make it work prefer lowest and prefilled

00:25:55,940 --> 00:26:02,870
stable that way we can say whenever we

00:26:00,650 --> 00:26:06,770
are running a test we are running a test

00:26:02,870 --> 00:26:09,380
for the low lowest stable version but

00:26:06,770 --> 00:26:13,310
also for the latest version that is not

00:26:09,380 --> 00:26:16,340
necessarily stable right and if you want

00:26:13,310 --> 00:26:19,720
to ever look at how it works I've a look

00:26:16,340 --> 00:26:22,400
at Travis dot general file in symphony

00:26:19,720 --> 00:26:25,250
so we are testing on a lot of different

00:26:22,400 --> 00:26:28,340
versions of PHP and then you can see an

00:26:25,250 --> 00:26:32,300
environment variable your depth low or

00:26:28,340 --> 00:26:34,970
depth I what it means is that in this

00:26:32,300 --> 00:26:39,560
case I want to use the lowest versions

00:26:34,970 --> 00:26:42,470
possible it also app as upgrade our

00:26:39,560 --> 00:26:44,090
composure that JSON files because we

00:26:42,470 --> 00:26:46,130
realized that we were saying that we

00:26:44,090 --> 00:26:49,580
were compatible with this version of

00:26:46,130 --> 00:26:52,670
symphony component a butt in actually

00:26:49,580 --> 00:26:55,280
the code did not work so we tweaked all

00:26:52,670 --> 00:26:57,460
the composer to JSON fares to reflect

00:26:55,280 --> 00:27:03,410
the reality of the code and not just

00:26:57,460 --> 00:27:05,450
what we had a few years ago really okay

00:27:03,410 --> 00:27:08,230
so I've a look at the code here it's

00:27:05,450 --> 00:27:08,230
pretty straightforward

00:27:12,710 --> 00:27:23,480
okay but then what about the tests

00:27:18,200 --> 00:27:27,110
themselves because so in the two point x

00:27:23,480 --> 00:27:29,210
versions we deprecated stuff but we

00:27:27,110 --> 00:27:31,029
still do have the test for them of

00:27:29,210 --> 00:27:34,010
course because we don't want to break

00:27:31,029 --> 00:27:37,250
stuff but in three-point know the code

00:27:34,010 --> 00:27:40,850
is not there anymore which means that if

00:27:37,250 --> 00:27:42,559
we want to make the test run for all the

00:27:40,850 --> 00:27:47,029
versions we need a way to say okay you

00:27:42,559 --> 00:27:50,570
can't run this test in 3 point 0 because

00:27:47,029 --> 00:27:53,740
the code is not there anymore right so

00:27:50,570 --> 00:27:57,710
what we are is we have a group legacy

00:27:53,740 --> 00:28:00,649
tag for all our duplicated tests so

00:27:57,710 --> 00:28:03,500
whenever we have a test there is about

00:28:00,649 --> 00:28:07,309
something that is not relevant anymore

00:28:03,500 --> 00:28:09,770
we add this group legacy tag actually

00:28:07,309 --> 00:28:12,679
test which means that by default we

00:28:09,770 --> 00:28:14,630
exclude this group when running a test

00:28:12,679 --> 00:28:17,390
on symphony three point oh and you can

00:28:14,630 --> 00:28:20,020
see that on the Travis in the Travis

00:28:17,390 --> 00:28:20,020
configuration

00:28:21,290 --> 00:28:31,710
is it clear enough yeah

00:28:25,260 --> 00:28:35,490
I'm sure okay so that's how we can make

00:28:31,710 --> 00:28:38,760
sure in the code that things work the

00:28:35,490 --> 00:28:42,810
way they need to work really and then we

00:28:38,760 --> 00:28:44,520
can weren't that because the core team

00:28:42,810 --> 00:28:46,470
make sure that you are doing the right

00:28:44,520 --> 00:28:49,710
thing you are adding the duplicate you

00:28:46,470 --> 00:28:52,170
deserve whenever it is needed we check

00:28:49,710 --> 00:28:57,480
with Travis that we don't break unit

00:28:52,170 --> 00:29:00,150
tests so we have a lot of a lot of tools

00:28:57,480 --> 00:29:03,840
and methodology to make sure that we

00:29:00,150 --> 00:29:07,070
actually have backward compatibility

00:29:03,840 --> 00:29:07,070
between all versions

00:29:08,460 --> 00:29:16,290
okay so it was a first step it's done

00:29:12,240 --> 00:29:19,560
now we simply 2.7 but then what about

00:29:16,290 --> 00:29:22,260
the ecosystem so what about your code

00:29:19,560 --> 00:29:26,400
what about open source libraries using

00:29:22,260 --> 00:29:28,200
symphony and the thing is you must do

00:29:26,400 --> 00:29:30,930
the exact same thing that we are doing

00:29:28,200 --> 00:29:35,340
if you want to be sure that you will be

00:29:30,930 --> 00:29:39,210
able to grade from symphony 2.62 of

00:29:35,340 --> 00:29:42,960
symphony three point oh so we did the

00:29:39,210 --> 00:29:48,120
work with some of the main symphony

00:29:42,960 --> 00:29:50,850
bundles and and libraries really so we

00:29:48,120 --> 00:29:53,220
fixed all the duplication notices and we

00:29:50,850 --> 00:29:55,410
enable the test on symphony three point

00:29:53,220 --> 00:29:57,990
oh so I early recommend you that you are

00:29:55,410 --> 00:30:00,840
doing the same with Drupal just to see

00:29:57,990 --> 00:30:04,440
what you are using today and if you are

00:30:00,840 --> 00:30:06,480
not using too many duplicated features

00:30:04,440 --> 00:30:09,600
and the good news is that you can

00:30:06,480 --> 00:30:11,640
migrate today to be sure that you don't

00:30:09,600 --> 00:30:15,420
have any analysis that's totally

00:30:11,640 --> 00:30:16,800
possible it's even easier for you

00:30:15,420 --> 00:30:19,820
because you can break backward

00:30:16,800 --> 00:30:23,990
compatibility right on triple 2.88

00:30:19,820 --> 00:30:28,650
Drupal 8 you can still break bc or not

00:30:23,990 --> 00:30:31,920
yeah somehow ok so do that on friday

00:30:28,650 --> 00:30:35,960
during the sprints i can help you if you

00:30:31,920 --> 00:30:40,440
need to to make it easy we also

00:30:35,960 --> 00:30:43,980
published a phpunit bridge that

00:30:40,440 --> 00:30:48,720
automates a lot of what I've just talked

00:30:43,980 --> 00:30:51,780
about and again it took month for us to

00:30:48,720 --> 00:30:58,909
get it right so you might want to reuse

00:30:51,780 --> 00:31:01,460
what we've done oops sorry

00:30:58,909 --> 00:31:05,090
so the way it works is that you just

00:31:01,460 --> 00:31:10,249
require the symphony / phpunit dash

00:31:05,090 --> 00:31:13,809
bridge library in your composure the

00:31:10,249 --> 00:31:18,590
JSON file in the require dash dev

00:31:13,809 --> 00:31:24,169
section and then is going to be enabled

00:31:18,590 --> 00:31:27,080
whenever you run PHP unit

00:31:24,169 --> 00:31:29,960
so that's how we have okay haven't shown

00:31:27,080 --> 00:31:33,619
you that it's interesting so if you go

00:31:29,960 --> 00:31:38,739
on this window this one if you go on

00:31:33,619 --> 00:31:38,739
Travis symphony

00:31:47,179 --> 00:31:57,260
okay you can see at the end of the run

00:31:53,640 --> 00:31:57,260
you have this line here

00:31:58,570 --> 00:32:05,529
and it says that we have this many

00:32:02,169 --> 00:32:09,070
duplication analysis which is fine

00:32:05,529 --> 00:32:13,509
because we are actually testing out

00:32:09,070 --> 00:32:16,240
stuff but if those duplication analyses

00:32:13,509 --> 00:32:18,490
we're coming from code that is not

00:32:16,240 --> 00:32:21,970
duplicated you would have a warning and

00:32:18,490 --> 00:32:25,240
the test would have been read but to be

00:32:21,970 --> 00:32:27,429
sure that we never ever merger ProQuest

00:32:25,240 --> 00:32:29,350
with such a problem i don't i don't

00:32:27,429 --> 00:32:31,899
think that i have an example here

00:32:29,350 --> 00:32:35,980
because we are very strict now about

00:32:31,899 --> 00:32:38,190
that but let's have a look at this one

00:32:35,980 --> 00:32:38,190
for instance

00:32:45,929 --> 00:32:51,679
no that's something different that's

00:32:48,330 --> 00:32:51,679
something different anyway

00:32:52,590 --> 00:32:55,370
ok

00:32:58,940 --> 00:33:04,260
okay so

00:33:01,650 --> 00:33:07,170
this is the methodology that you can

00:33:04,260 --> 00:33:10,350
take for your own project if you depend

00:33:07,170 --> 00:33:13,200
on symphony you can read the upgrade

00:33:10,350 --> 00:33:15,780
file so you need to read all the

00:33:13,200 --> 00:33:19,020
upgrades files from other versions of

00:33:15,780 --> 00:33:24,030
symphony really to a gradual code so

00:33:19,020 --> 00:33:26,430
starting from 2.3 you must not ignore

00:33:24,030 --> 00:33:29,580
any analysis that's why we have the

00:33:26,430 --> 00:33:32,070
beach per unit bridge of course you need

00:33:29,580 --> 00:33:34,770
tests on your code to make it work if

00:33:32,070 --> 00:33:36,600
you do not have test for some features

00:33:34,770 --> 00:33:40,650
we won't be able to tell you that you

00:33:36,600 --> 00:33:43,650
have problems one thing is that we

00:33:40,650 --> 00:33:46,650
cannot give you any information about

00:33:43,650 --> 00:33:50,430
duplicated constants and we have some of

00:33:46,650 --> 00:33:54,780
them this one's so i'm not sure if you

00:33:50,430 --> 00:34:00,990
are using those you should not so but

00:33:54,780 --> 00:34:03,090
those should be done by hand and also i

00:34:00,990 --> 00:34:06,390
think that there is the same problem is

00:34:03,090 --> 00:34:09,240
Drupal the very first request is very

00:34:06,390 --> 00:34:12,750
different from the next ones right

00:34:09,240 --> 00:34:15,960
because during the very first request we

00:34:12,750 --> 00:34:19,740
warm up the cash which means that we are

00:34:15,960 --> 00:34:23,040
running some code that won't run anymore

00:34:19,740 --> 00:34:24,810
for all the other requests right so you

00:34:23,040 --> 00:34:28,140
need to be careful to actually check all

00:34:24,810 --> 00:34:30,750
the notices coming from this very first

00:34:28,140 --> 00:34:33,600
request when the cash is actually warmed

00:34:30,750 --> 00:34:36,050
up if not you're going to have some

00:34:33,600 --> 00:34:36,050
problems

00:34:36,679 --> 00:34:43,440
phpstorm is also a good Eddie because it

00:34:40,490 --> 00:34:46,319
catches all duplicated tags which means

00:34:43,440 --> 00:34:48,029
that within the IDE it's going to tell

00:34:46,319 --> 00:34:52,700
you that you are using something that is

00:34:48,029 --> 00:34:57,140
absolutely so that's also a good way to

00:34:52,700 --> 00:35:03,510
spot problems and to easily upgrade

00:34:57,140 --> 00:35:07,650
those problems last but not least as we

00:35:03,510 --> 00:35:10,289
are triggering duplicated notices you

00:35:07,650 --> 00:35:17,010
should exclude them on your production

00:35:10,289 --> 00:35:20,369
servers because you know at first you

00:35:17,010 --> 00:35:22,920
might have thousands of such notices so

00:35:20,369 --> 00:35:27,000
if you enable them in production you're

00:35:22,920 --> 00:35:29,760
going to have a lot of notices in the

00:35:27,000 --> 00:35:32,900
logs it can be a problem so you can fill

00:35:29,760 --> 00:35:35,760
up your disk pretty fast so at first

00:35:32,900 --> 00:35:39,690
disable that on your production servers

00:35:35,760 --> 00:35:43,970
enable that only in your staging or

00:35:39,690 --> 00:35:43,970
development or testing environments

00:35:45,850 --> 00:35:52,520
okay um

00:35:48,950 --> 00:35:54,530
so then I'm just going to talk about

00:35:52,520 --> 00:35:57,260
this slide for instance which is about

00:35:54,530 --> 00:35:59,720
twig because where we are also

00:35:57,260 --> 00:36:01,910
duplicating a lot of stuff in twig the

00:35:59,720 --> 00:36:04,490
most important ones are the two first

00:36:01,910 --> 00:36:06,470
one for Drupal the first one is the

00:36:04,490 --> 00:36:08,770
render tag the second one is the include

00:36:06,470 --> 00:36:12,140
tag I'm not sure if you are using them

00:36:08,770 --> 00:36:14,920
haven't checked recently but if you are

00:36:12,140 --> 00:36:18,050
doing that you must replace them with

00:36:14,920 --> 00:36:20,210
the functions and the names are exactly

00:36:18,050 --> 00:36:22,010
the same so for the render tag you must

00:36:20,210 --> 00:36:24,079
choose the render function and for

00:36:22,010 --> 00:36:28,430
include tag you must choose the include

00:36:24,079 --> 00:36:33,560
function so just use grab bag it's it's

00:36:28,430 --> 00:36:36,619
really easy to make the change here the

00:36:33,560 --> 00:36:40,339
class loader so again you must upgrade

00:36:36,619 --> 00:36:43,040
to the latest versions of the classes so

00:36:40,339 --> 00:36:46,099
we've done that way back in the past so

00:36:43,040 --> 00:36:48,079
it should be easy to abrade from at you

00:36:46,099 --> 00:36:52,210
all want new one it's mainly about

00:36:48,079 --> 00:36:57,109
renaming of the classes and that's all

00:36:52,210 --> 00:36:58,310
dependency injection so Drupal is using

00:36:57,109 --> 00:37:00,950
dependency injection and a container

00:36:58,310 --> 00:37:03,020
from coming from symphony alert scopes

00:37:00,950 --> 00:37:04,579
are going to be removed from Central you

00:37:03,020 --> 00:37:08,540
three point 0 because we don't need them

00:37:04,579 --> 00:37:11,329
anymore it was a big mistake to actually

00:37:08,540 --> 00:37:16,609
introduce them in the first place we

00:37:11,329 --> 00:37:21,530
were mainly using it for the request but

00:37:16,609 --> 00:37:24,589
it was the problem was not that we did

00:37:21,530 --> 00:37:27,050
not have the right way to manage two men

00:37:24,589 --> 00:37:30,619
at the request in the dick it was just

00:37:27,050 --> 00:37:33,410
because adding the request as a service

00:37:30,619 --> 00:37:36,829
was a big mistake a request an HTTP

00:37:33,410 --> 00:37:39,020
request is actually not a service so in

00:37:36,829 --> 00:37:42,430
symphony starting from Symphony to point

00:37:39,020 --> 00:37:45,230
I don't remember for I think yet 24

00:37:42,430 --> 00:37:48,589
instead of the request service you must

00:37:45,230 --> 00:37:50,329
use a request stack service where and

00:37:48,589 --> 00:37:53,540
this is a service that gives you access

00:37:50,329 --> 00:37:55,430
to the current request or the parent one

00:37:53,540 --> 00:37:59,069
if you are using

00:37:55,430 --> 00:38:01,920
stacked requests really and shrink

00:37:59,069 --> 00:38:05,160
synchronized is also duplicated because

00:38:01,920 --> 00:38:08,549
it was added again just because we add

00:38:05,160 --> 00:38:11,339
request as a service and that an

00:38:08,549 --> 00:38:15,390
interesting story by itself just because

00:38:11,339 --> 00:38:18,809
we did this big mistake of defining the

00:38:15,390 --> 00:38:22,140
request as a service we added a bunch of

00:38:18,809 --> 00:38:25,979
features in a container just to be able

00:38:22,140 --> 00:38:28,109
to deal with this mistake it took us you

00:38:25,979 --> 00:38:31,319
know a lot of time adding those Freddy

00:38:28,109 --> 00:38:33,509
staff the scopes and synchronized and it

00:38:31,319 --> 00:38:36,959
and actually it was really nightmare to

00:38:33,509 --> 00:38:39,479
maintain and it we have so many HK CS

00:38:36,959 --> 00:38:41,940
and self going on really and then we

00:38:39,479 --> 00:38:44,519
just realized that you know the request

00:38:41,940 --> 00:38:47,940
is not a service bad everything was

00:38:44,519 --> 00:38:50,039
really easier and we can remove so many

00:38:47,940 --> 00:38:54,989
lines of code from symphony just because

00:38:50,039 --> 00:38:58,319
with it this mistake and the last one is

00:38:54,989 --> 00:39:01,920
about factories so the way we configure

00:38:58,319 --> 00:39:03,660
factories is a bit different now it's

00:39:01,920 --> 00:39:06,209
not it was not a big deal but it was

00:39:03,660 --> 00:39:08,369
mostly because now we have more

00:39:06,209 --> 00:39:12,809
flexibility with the new way of defining

00:39:08,369 --> 00:39:14,279
the factories so again this change in

00:39:12,809 --> 00:39:17,910
the configuration should not be

00:39:14,279 --> 00:39:23,630
difficult to change in your code and in

00:39:17,910 --> 00:39:27,479
Drupal code are using synchronized

00:39:23,630 --> 00:39:29,160
synchronized feature in triple at some

00:39:27,479 --> 00:39:30,599
point I know that you were using that

00:39:29,160 --> 00:39:35,119
but I'm not sure if it's the case

00:39:30,599 --> 00:39:35,119
anymore not anymore

00:39:40,160 --> 00:39:44,930
ok

00:39:41,839 --> 00:39:47,599
okay cool and you're not using scopes

00:39:44,930 --> 00:39:52,729
anymore okay that's great that's great

00:39:47,599 --> 00:39:55,130
news small changes in routing we renamed

00:39:52,729 --> 00:40:01,089
pattern to path because it makes more

00:39:55,130 --> 00:40:04,969
sense we also removed we had specialized

00:40:01,089 --> 00:40:08,859
routing classes for patchy and the goal

00:40:04,969 --> 00:40:12,469
was to make it really fast or faster

00:40:08,859 --> 00:40:14,210
when you are using apache but at some

00:40:12,469 --> 00:40:18,229
point we realized that those classes

00:40:14,210 --> 00:40:21,079
made the routing stuff slower actually

00:40:18,229 --> 00:40:23,779
instead of faster because of caching

00:40:21,079 --> 00:40:27,799
problems and stuff whatever so they are

00:40:23,779 --> 00:40:30,920
removed from symphony three point 0 in a

00:40:27,799 --> 00:40:33,710
console okay so here it's mainly about

00:40:30,920 --> 00:40:35,989
refactoring mistakes that we did and we

00:40:33,710 --> 00:40:38,509
actually made a lot of mistakes so we

00:40:35,989 --> 00:40:41,210
are trying to fix them step by step

00:40:38,509 --> 00:40:43,849
which is which text time because we need

00:40:41,210 --> 00:40:47,140
to maintain the compatibility so again

00:40:43,849 --> 00:40:50,180
it's mainly about best practices here

00:40:47,140 --> 00:40:52,789
for events patcher we've removed those

00:40:50,180 --> 00:40:55,390
methods many because they are not that

00:40:52,789 --> 00:40:59,930
useful and it Beck Stevens patcher

00:40:55,390 --> 00:41:01,910
slower so that's why we remove them we

00:40:59,930 --> 00:41:10,009
removed the Logar interface from HTTP

00:41:01,910 --> 00:41:13,549
colonel because back then PSR 434 please

00:41:10,009 --> 00:41:15,979
are about the logging stuff did not

00:41:13,549 --> 00:41:21,279
exist it exists so we can remove that

00:41:15,979 --> 00:41:21,279
now I've talked about in it and serve

00:41:21,790 --> 00:41:32,500
okay everything else is really not that

00:41:25,150 --> 00:41:34,870
interesting okay the serializer we

00:41:32,500 --> 00:41:37,570
removed those methods because they did

00:41:34,870 --> 00:41:39,190
not really make sense there was not they

00:41:37,570 --> 00:41:42,010
were not available in the interfaces

00:41:39,190 --> 00:41:44,890
anyway so we now have exceptions

00:41:42,010 --> 00:41:47,770
everywhere so you don't have to fall

00:41:44,890 --> 00:41:54,600
back to this weird PHP mechanism of

00:41:47,770 --> 00:42:00,400
dealing with errors really and that's it

00:41:54,600 --> 00:42:03,880
so let's do it if you need any help a

00:42:00,400 --> 00:42:07,720
grading Drupal for simply 2.7 please

00:42:03,880 --> 00:42:11,320
don't hesitate we are here to help and

00:42:07,720 --> 00:42:14,560
if you want to celebrate the 10 year

00:42:11,320 --> 00:42:18,130
anniversary of symphony you can come to

00:42:14,560 --> 00:42:19,870
the symphony con Paris conference it's

00:42:18,130 --> 00:42:24,220
going to be at beginning of december

00:42:19,870 --> 00:42:25,870
this year it's going to be at Folie

00:42:24,220 --> 00:42:29,230
Bergere which is a very well-known

00:42:25,870 --> 00:42:31,450
Theatre in Paris we expect more than one

00:42:29,230 --> 00:42:34,320
and one thousand sorry one thousand

00:42:31,450 --> 00:42:36,730
people there so it's going to be fun and

00:42:34,320 --> 00:42:40,110
that's that's all for today if you have

00:42:36,730 --> 00:42:40,110
any questions feel free to ask

00:42:48,020 --> 00:42:51,020
yep

00:43:00,770 --> 00:43:02,770
ah

00:43:36,180 --> 00:43:42,420
so thing is so I think we did we never

00:43:39,839 --> 00:43:47,069
actually talked about using this

00:43:42,420 --> 00:43:51,150
mechanism probably because we did not

00:43:47,069 --> 00:43:54,690
have any use that many use cases where

00:43:51,150 --> 00:43:57,780
it would have been up for really so in

00:43:54,690 --> 00:44:00,390
Symphony we try to standardize on one

00:43:57,780 --> 00:44:02,910
way of doing things as much as possible

00:44:00,390 --> 00:44:06,390
and I thank the number of use cases

00:44:02,910 --> 00:44:08,990
where it would have been interesting it

00:44:06,390 --> 00:44:08,990
was just not enough

00:44:31,660 --> 00:44:36,010
okay that's a very good question so

00:44:34,270 --> 00:44:38,589
actually maintaining a version is not

00:44:36,010 --> 00:44:41,740
that I for us what we're doing is

00:44:38,589 --> 00:44:44,650
whenever we fix a bug we merge the

00:44:41,740 --> 00:44:47,140
proquest in the oldest version of

00:44:44,650 --> 00:44:49,780
symphony desisting still intent and then

00:44:47,140 --> 00:44:52,690
we merge this version into the most

00:44:49,780 --> 00:44:56,770
recent one that way we are sure that all

00:44:52,690 --> 00:45:00,190
a fix is actually available all versions

00:44:56,770 --> 00:45:04,990
that are maintained and the thing is it

00:45:00,190 --> 00:45:08,200
is almost always easier to merge from

00:45:04,990 --> 00:45:12,069
all versions instead of you know jumping

00:45:08,200 --> 00:45:14,859
from one version to you know much newer

00:45:12,069 --> 00:45:18,910
one because you can resolve conflicts

00:45:14,859 --> 00:45:20,380
step by step we are not doing that right

00:45:18,910 --> 00:45:22,420
now because at some point you need to

00:45:20,380 --> 00:45:24,520
say okay we are we're going to maintain

00:45:22,420 --> 00:45:28,839
that for that many years and then we

00:45:24,520 --> 00:45:32,890
need to stop that being said again

00:45:28,839 --> 00:45:35,799
maintaining a version for longer it's

00:45:32,890 --> 00:45:40,210
not really a big deal so that's

00:45:35,799 --> 00:45:43,720
something we can do and I know that you

00:45:40,210 --> 00:45:48,880
know 2.4 and 2.5 are not maintained

00:45:43,720 --> 00:45:51,069
anymore but we could do that so I'm

00:45:48,880 --> 00:45:53,230
doing all the vertices so it is a lot of

00:45:51,069 --> 00:45:57,250
time but actually it's a lot of time

00:45:53,230 --> 00:46:00,369
because we need to release the symphony

00:45:57,250 --> 00:46:02,380
package all the components so those are

00:46:00,369 --> 00:46:04,990
sub tree split so we have one git

00:46:02,380 --> 00:46:07,089
repository for every component so that

00:46:04,990 --> 00:46:09,190
takes time and then we are the symphony

00:46:07,089 --> 00:46:12,430
sterna tradition we have the Zen

00:46:09,190 --> 00:46:15,010
packages for xenserver we have a bunch

00:46:12,430 --> 00:46:17,230
of stuff so that's why it takes time but

00:46:15,010 --> 00:46:19,480
if we are just talking about being able

00:46:17,230 --> 00:46:21,910
to release just symphony and all the

00:46:19,480 --> 00:46:25,890
components and tag that and be done with

00:46:21,910 --> 00:46:30,340
it it's much easier so

00:46:25,890 --> 00:46:34,500
it's possible it's not that hard so you

00:46:30,340 --> 00:46:34,500
are maintaining Drupal for five years

00:46:34,710 --> 00:46:41,860
haha yeah random okay so actually do you

00:46:39,460 --> 00:46:44,920
have LCS is no you don't have LCS is for

00:46:41,860 --> 00:46:49,450
Drupal it's just all the versions are

00:46:44,920 --> 00:46:52,780
maintained for how many years okay two

00:46:49,450 --> 00:46:56,980
versions so it can be five years can be

00:46:52,780 --> 00:46:58,330
yeah it can be longer obviously so

00:46:56,980 --> 00:47:01,570
that's that's probably discussion that

00:46:58,330 --> 00:47:03,070
we can have when Drupal 8 is released so

00:47:01,570 --> 00:47:08,530
depending on which version you're going

00:47:03,070 --> 00:47:11,650
to use for Drupal 8 we might say that we

00:47:08,530 --> 00:47:15,670
are going to maintain 2.8 for three

00:47:11,650 --> 00:47:18,520
years or the time it takes for Drupal to

00:47:15,670 --> 00:47:22,110
release Drupal 10 right something like

00:47:18,520 --> 00:47:22,110
that so we can discuss that

00:47:50,099 --> 00:47:53,539
twix to actually

00:47:56,040 --> 00:48:02,880
I'm not sure yet so what I wanted to be

00:47:59,340 --> 00:48:04,950
able to do is having twink twix to to be

00:48:02,880 --> 00:48:09,360
compatible with twig wall as much as

00:48:04,950 --> 00:48:11,790
possible then people convinced me that

00:48:09,360 --> 00:48:13,710
it was not needed which means that the

00:48:11,790 --> 00:48:15,240
current version of twig 2 point 0 which

00:48:13,710 --> 00:48:18,300
is the massive versions not released yet

00:48:15,240 --> 00:48:24,690
is not compatible anymore with twig one

00:48:18,300 --> 00:48:32,250
and then people started arguing that 32

00:48:24,690 --> 00:48:36,330
should be compatible with big one that's

00:48:32,250 --> 00:48:38,790
what I said two years ago so yeah I

00:48:36,330 --> 00:48:40,560
think it's a big problem because even if

00:48:38,790 --> 00:48:43,500
i say symphony is going to symphony

00:48:40,560 --> 00:48:45,450
three is going to use trick to it means

00:48:43,500 --> 00:48:47,880
that all the dependency that you are

00:48:45,450 --> 00:48:50,360
using in your project should also have a

00:48:47,880 --> 00:48:53,220
version compatible with tweak to and

00:48:50,360 --> 00:48:54,630
just because twig one and twig to is are

00:48:53,220 --> 00:48:56,940
not compatible it means that you need

00:48:54,630 --> 00:48:58,920
two different versions of your open

00:48:56,940 --> 00:49:00,540
source library and yours you need to

00:48:58,920 --> 00:49:04,350
maintain those two versions which is

00:49:00,540 --> 00:49:09,810
really not that cruel especially for

00:49:04,350 --> 00:49:14,070
small libraries rule so everything is

00:49:09,810 --> 00:49:16,470
the language itself is compatible so a

00:49:14,070 --> 00:49:18,930
template itself is compatible between

00:49:16,470 --> 00:49:20,940
three point one point X and twig to

00:49:18,930 --> 00:49:25,920
point X it's not a problem the problem

00:49:20,940 --> 00:49:27,750
is the way we create extensions so if

00:49:25,920 --> 00:49:31,110
you have extensions then it's not

00:49:27,750 --> 00:49:34,860
compatible if you are just using a twig

00:49:31,110 --> 00:49:37,380
the language that's not a problem so

00:49:34,860 --> 00:49:40,620
what we are trying to do right now is

00:49:37,380 --> 00:49:44,520
Magnus the extensions compatible between

00:49:40,620 --> 00:49:46,650
the two versions which should take care

00:49:44,520 --> 00:49:48,890
of ninety-nine percent of all the use

00:49:46,650 --> 00:49:48,890
cases

00:49:54,589 --> 00:49:59,010
ok

00:49:56,320 --> 00:49:59,010

YouTube URL: https://www.youtube.com/watch?v=8XJLiykJE0E


