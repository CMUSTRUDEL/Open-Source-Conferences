Title: DrupalCon Los Angeles 2015: Decoupling Drupal modules into PHP libraries: a Commerce 2.x primer
Publication date: 2015-05-13
Playlist: DrupalCon Los Angeles - May 2015
Description: 
	For a while now we've been talking about what Drupal has received from the Symfony ecosystem, and how that is changing the life of an ordinary Drupal developer for the better. But cooperation is not a one way street, and it's time to start talking about what the Drupal community can put back into the Symfony ecosystem. And there's no doubt we have a lot to offer.

A year ago we started the development of Commerce 2.x. Instead of starting with Drupal code, we first created generic PHP libraries that handle generic eCommerce problems such as price storage and formatting, discount and tax handling, address management, and more. We then started building the Drupal layer on top. These new libraries have already started influencing the Symfony ecosystem, influencing a rewrite of symfony/intl as well as increased cooperation with the Symfony eCommerce solutions. Let's talk about what we've learned.

What we'll discuss:

Candidates for decoupling. Which functionality makes sense as a library outside of Drupal, and which doesn't. How to recognize it.
The effect such decoupling has on the Drupal codebase, problems and how to avoid them.
Translating between Drupal and Symfony concepts. Entity API vs Doctrine. Pluggins vs tagged services. Different form implementations.
Common pitfalls on both sides of the fence.
The benefits of doing all the extra work in the first place.
We'll be using the Commerce 2.x libraries as an example,  covering the what, the how, and the why.
Captions: 
	00:00:00,000 --> 00:00:06,629
okay I guess we can start quickly so

00:00:04,259 --> 00:00:08,700
this is the coupling Drupal modules into

00:00:06,629 --> 00:00:11,070
PHP libraries a commerce to the text

00:00:08,700 --> 00:00:14,190
primer my name is bond shyvana which I'm

00:00:11,070 --> 00:00:15,809
bunzy on drupal.org and I'm the commerce

00:00:14,190 --> 00:00:17,820
development cleated Commerce guys which

00:00:15,809 --> 00:00:19,590
basically means that I work full-time on

00:00:17,820 --> 00:00:22,680
commerce to the techs are we right

00:00:19,590 --> 00:00:24,990
targeting through Glade commerce guys is

00:00:22,680 --> 00:00:28,380
the company behind Triple commerce and

00:00:24,990 --> 00:00:30,750
web from dot sh we have offices in Paris

00:00:28,380 --> 00:00:32,640
and Arbor Michigan and London we also

00:00:30,750 --> 00:00:35,340
have a boost in the exhibition area so

00:00:32,640 --> 00:00:37,649
come by have a chat look at the platform

00:00:35,340 --> 00:00:41,670
demo or lectures about commerce if you

00:00:37,649 --> 00:00:45,000
want so we built triple commerce from

00:00:41,670 --> 00:00:47,520
scratch on the then-new Drupal 7 making

00:00:45,000 --> 00:00:50,370
use of its new technologies we used

00:00:47,520 --> 00:00:52,500
entity API for the data model we abused

00:00:50,370 --> 00:00:54,780
for our listings and rules for our

00:00:52,500 --> 00:00:56,640
business logic and by doing that we

00:00:54,780 --> 00:00:58,500
created a system that was immediately

00:00:56,640 --> 00:01:01,829
familiar to Drupal users and developers

00:00:58,500 --> 00:01:04,680
if you knew Drupal then you already knew

00:01:01,829 --> 00:01:07,979
commerce commerce aims to be minimal

00:01:04,680 --> 00:01:09,689
making minimum assumptions and so it

00:01:07,979 --> 00:01:11,909
allows you to take the parts that you

00:01:09,689 --> 00:01:14,549
need change what you don't like and

00:01:11,909 --> 00:01:17,869
simply build your project and three and

00:01:14,549 --> 00:01:20,580
a half years later we now have over

00:01:17,869 --> 00:01:22,740
56,000 reported installations which is a

00:01:20,580 --> 00:01:25,979
current record for e-commerce and Drupal

00:01:22,740 --> 00:01:29,579
in general powering many important sites

00:01:25,979 --> 00:01:32,100
from a wash to ryans real real milk

00:01:29,579 --> 00:01:35,790
cheese calm and he's not here to

00:01:32,100 --> 00:01:37,680
appreciate that joke so in the past

00:01:35,790 --> 00:01:40,530
three and a half years the world around

00:01:37,680 --> 00:01:42,960
us changed completely PHP 5.3 happened

00:01:40,530 --> 00:01:46,200
composer happen simply the symphony to

00:01:42,960 --> 00:01:48,329
happened and triple-a this happen and if

00:01:46,200 --> 00:01:51,590
we want to repeat our earlier success

00:01:48,329 --> 00:01:53,759
that means starting from scratch and

00:01:51,590 --> 00:01:58,320
reevaluating everything while still

00:01:53,759 --> 00:02:00,240
keeping our own values and doing that

00:01:58,320 --> 00:02:02,549
actually gives us an opportunity to

00:02:00,240 --> 00:02:04,710
reevaluate our problem space you will

00:02:02,549 --> 00:02:06,869
notice that there is no such thing as

00:02:04,710 --> 00:02:08,550
the e-commerce problem just like there's

00:02:06,869 --> 00:02:10,860
no such thing as

00:02:08,550 --> 00:02:13,470
content management problem instead it's

00:02:10,860 --> 00:02:15,900
a collection of connected problems each

00:02:13,470 --> 00:02:19,560
with its own complexities and its own

00:02:15,900 --> 00:02:22,200
trade-offs and when you look at it taxes

00:02:19,560 --> 00:02:25,890
or addressing or payments these things

00:02:22,200 --> 00:02:27,780
are not really tied to Drupal and if

00:02:25,890 --> 00:02:29,310
they're not tight so Drupal maybe they

00:02:27,780 --> 00:02:31,260
don't need to be done inside through

00:02:29,310 --> 00:02:34,290
people at all maybe we can do it outside

00:02:31,260 --> 00:02:37,080
of a Drupal and by doing that get

00:02:34,290 --> 00:02:39,060
additional people on board so that's

00:02:37,080 --> 00:02:41,880
what we decided to do we decided that

00:02:39,060 --> 00:02:43,410
instead of starting by writing triple

00:02:41,880 --> 00:02:46,680
code for commerce to the tags we would

00:02:43,410 --> 00:02:47,880
start by writing libraries then commerce

00:02:46,680 --> 00:02:49,350
to the text would depend on these

00:02:47,880 --> 00:02:53,130
libraries and pull them in via a

00:02:49,350 --> 00:02:56,220
composer and that's it by doing that we

00:02:53,130 --> 00:02:59,100
gain additional exposure we Bri open

00:02:56,220 --> 00:03:04,020
ourselves to non troppo communities and

00:02:59,100 --> 00:03:06,300
we validate our expertise commerce guys

00:03:04,020 --> 00:03:09,510
int L was the first library that we

00:03:06,300 --> 00:03:12,090
created we needed a source of currency

00:03:09,510 --> 00:03:14,370
information that was kept for them up to

00:03:12,090 --> 00:03:16,860
date because we hard-coded the currency

00:03:14,370 --> 00:03:19,440
list in commerce one detects and so it

00:03:16,860 --> 00:03:22,470
kept carrying out of outdated every few

00:03:19,440 --> 00:03:24,930
months we found enough to date source of

00:03:22,470 --> 00:03:27,300
that information in CLD are so CLD are

00:03:24,930 --> 00:03:30,870
in these big projects that provides

00:03:27,300 --> 00:03:33,420
local data so it has currencies and it

00:03:30,870 --> 00:03:36,690
even has translated currency names and

00:03:33,420 --> 00:03:38,870
symbols in all languages it has with a

00:03:36,690 --> 00:03:41,160
list of countries triple-core uses it

00:03:38,870 --> 00:03:43,080
languages and a lot of other date and

00:03:41,160 --> 00:03:45,530
it's mandated by big Kingdom it's

00:03:43,080 --> 00:03:48,360
maintained by big companies such as

00:03:45,530 --> 00:03:50,250
Apple and Microsoft and Google so we

00:03:48,360 --> 00:03:52,470
decided to build a library that would

00:03:50,250 --> 00:03:54,720
take parts of the CLD our data set and

00:03:52,470 --> 00:03:56,610
then it would provide these entity

00:03:54,720 --> 00:03:58,620
classes that would represent that data

00:03:56,610 --> 00:04:01,320
and then we could use that from commerce

00:03:58,620 --> 00:04:03,540
we also needed a way to format

00:04:01,320 --> 00:04:05,580
currencies according to local so when a

00:04:03,540 --> 00:04:07,950
euro amount is not formatted the same

00:04:05,580 --> 00:04:10,980
way in France and in Germany and the

00:04:07,950 --> 00:04:14,010
only previous way to do that was for the

00:04:10,980 --> 00:04:16,260
bhp I MTL extension which is good but

00:04:14,010 --> 00:04:17,519
it's not available by default on many

00:04:16,260 --> 00:04:19,379
servers which meant with

00:04:17,519 --> 00:04:21,239
depend on it even simply couldn't depend

00:04:19,379 --> 00:04:23,490
on it and their user base is much more

00:04:21,239 --> 00:04:25,470
technical luckily we found the

00:04:23,490 --> 00:04:27,210
formatting information in CLG are again

00:04:25,470 --> 00:04:29,340
which allowed us to reimplement their

00:04:27,210 --> 00:04:31,349
number formatter in three hundred lines

00:04:29,340 --> 00:04:33,840
of code so when you add all that

00:04:31,349 --> 00:04:36,030
together you get commerce guys int L and

00:04:33,840 --> 00:04:38,639
we had great success with that first

00:04:36,030 --> 00:04:41,159
library even to the point of influencing

00:04:38,639 --> 00:04:43,169
Symphony int L so Symphony int L started

00:04:41,159 --> 00:04:44,819
its life as the library just provided

00:04:43,169 --> 00:04:47,099
the English fallback in case you didn't

00:04:44,819 --> 00:04:49,530
have the extension but once they saw our

00:04:47,099 --> 00:04:51,360
library we convince them to to follow

00:04:49,530 --> 00:04:53,940
the same steps so they copy their

00:04:51,360 --> 00:04:55,740
approach and our generation scripts and

00:04:53,940 --> 00:04:57,569
they start the shipping CLD our data

00:04:55,740 --> 00:05:02,550
themselves so right now if you're using

00:04:57,569 --> 00:05:04,380
symphony 2.3 or even 2.6 you have the

00:05:02,550 --> 00:05:06,270
same functionality in the sense of

00:05:04,380 --> 00:05:08,130
currency lists and country lists and so

00:05:06,270 --> 00:05:09,780
on they still don't have the number

00:05:08,130 --> 00:05:11,729
formatter but we are working with them

00:05:09,780 --> 00:05:14,009
to merge that in the future release as

00:05:11,729 --> 00:05:16,379
well so with our first library we

00:05:14,009 --> 00:05:18,120
actually managed to influence simply and

00:05:16,379 --> 00:05:20,250
connect with and are cooperating with

00:05:18,120 --> 00:05:22,889
that which was a pretty nice swing to

00:05:20,250 --> 00:05:25,560
start with the second library we created

00:05:22,889 --> 00:05:27,240
is called addressing and it's it's the

00:05:25,560 --> 00:05:29,130
library version of address field

00:05:27,240 --> 00:05:31,620
basically it handles postal addresses

00:05:29,130 --> 00:05:34,349
their storage their validation their

00:05:31,620 --> 00:05:38,460
formatting and when you think about it

00:05:34,349 --> 00:05:40,590
every country has its own postal

00:05:38,460 --> 00:05:43,050
requirements so these requirements tell

00:05:40,590 --> 00:05:45,150
you which fields you need to show in

00:05:43,050 --> 00:05:47,099
which order how their label how they are

00:05:45,150 --> 00:05:48,690
validated so we need to introduce this

00:05:47,099 --> 00:05:51,060
concept of an address format and then

00:05:48,690 --> 00:05:53,039
use the loaded address format to

00:05:51,060 --> 00:05:55,110
generate an address form or to validate

00:05:53,039 --> 00:05:57,840
an address or to format it for display

00:05:55,110 --> 00:05:59,460
of course this also means that the

00:05:57,840 --> 00:06:01,860
library needs to have a data set to be

00:05:59,460 --> 00:06:04,080
truly useful and luckily we didn't need

00:06:01,860 --> 00:06:06,270
to create such a data set because we

00:06:04,080 --> 00:06:08,940
found it in Google Google created the

00:06:06,270 --> 00:06:10,560
data set for 200 countries along with

00:06:08,940 --> 00:06:12,750
their lists of administrative areas

00:06:10,560 --> 00:06:14,819
because they needed it for Android so we

00:06:12,750 --> 00:06:17,039
contacted them and got their permission

00:06:14,819 --> 00:06:19,529
to release it under the MIT license and

00:06:17,039 --> 00:06:23,750
by doing that we created a truly unique

00:06:19,529 --> 00:06:26,490
PHP library which got over 300 stars in

00:06:23,750 --> 00:06:27,660
one week so it made us the trending

00:06:26,490 --> 00:06:30,180
developers in

00:06:27,660 --> 00:06:32,280
all of PHP on github and it connected us

00:06:30,180 --> 00:06:33,660
with the serious project which aims to

00:06:32,280 --> 00:06:36,870
create an e-commerce solution on

00:06:33,660 --> 00:06:38,880
symfony2 so serious decided that they

00:06:36,870 --> 00:06:40,980
want to use our addressing in zone and

00:06:38,880 --> 00:06:43,740
tax libraries inside their own system

00:06:40,980 --> 00:06:45,090
which is a pretty big win now I should

00:06:43,740 --> 00:06:46,890
mention that that hasn't happened yet

00:06:45,090 --> 00:06:48,840
because they don't really have full-time

00:06:46,890 --> 00:06:51,630
people working on at I'm afraid that we

00:06:48,840 --> 00:06:54,530
will be to have to be the ones to help

00:06:51,630 --> 00:06:57,120
them do it if we want to see it happen

00:06:54,530 --> 00:06:59,190
then we created the zone library which

00:06:57,120 --> 00:07:01,350
introduces the concept of a zone as a

00:06:59,190 --> 00:07:03,600
geographical grouping so a list of

00:07:01,350 --> 00:07:05,850
countries a list of states including or

00:07:03,600 --> 00:07:07,710
excluding postal codes which is very

00:07:05,850 --> 00:07:09,930
useful if you're doing any kind of

00:07:07,710 --> 00:07:11,370
shipping or taxes so for example you

00:07:09,930 --> 00:07:13,980
might have one shipping price for

00:07:11,370 --> 00:07:16,260
California and Nevada one for the

00:07:13,980 --> 00:07:18,030
European Union and it's very useful for

00:07:16,260 --> 00:07:20,910
taxes because you might have tax rates

00:07:18,030 --> 00:07:23,100
that only target a specific zip code or

00:07:20,910 --> 00:07:25,020
a country plus some zip codes which is

00:07:23,100 --> 00:07:28,710
common in Europe with Germany 80 for

00:07:25,020 --> 00:07:31,170
example and then there's our crown jewel

00:07:28,710 --> 00:07:33,810
which is the text library the tax

00:07:31,170 --> 00:07:37,320
library holds over three and a half

00:07:33,810 --> 00:07:39,480
years of our tax knowledge and we

00:07:37,320 --> 00:07:42,240
learned this the hard way we actually

00:07:39,480 --> 00:07:43,770
had to spend more than a month listening

00:07:42,240 --> 00:07:45,480
to David kitchen or tag expert

00:07:43,770 --> 00:07:47,640
explaining this over and over to get it

00:07:45,480 --> 00:07:50,160
right no ecommerce solution gets this

00:07:47,640 --> 00:07:51,780
right so we decided to do it right and

00:07:50,160 --> 00:07:54,600
to create the library that others can

00:07:51,780 --> 00:07:58,380
use this text library has a data set

00:07:54,600 --> 00:08:00,360
with predefined tax rates for all of you

00:07:58,380 --> 00:08:02,370
and we hope that the community will help

00:08:00,360 --> 00:08:04,320
us by adding two tax rates for their own

00:08:02,370 --> 00:08:06,030
countries then it has a really smart

00:08:04,320 --> 00:08:07,590
data model that takes into account the

00:08:06,030 --> 00:08:10,020
tax rates can change so they need a

00:08:07,590 --> 00:08:12,630
start and end state and finally it have

00:08:10,020 --> 00:08:15,720
this system of resolvers that allows us

00:08:12,630 --> 00:08:17,580
to write pluggable classes for each

00:08:15,720 --> 00:08:20,130
country so we have one class that

00:08:17,580 --> 00:08:22,500
handles EU specific logic one class that

00:08:20,130 --> 00:08:24,570
handles Canadian logic and so on and

00:08:22,500 --> 00:08:26,220
these classes can be units tested than

00:08:24,570 --> 00:08:28,590
they handle those differences between

00:08:26,220 --> 00:08:30,419
b2b and b2c physical and digital

00:08:28,590 --> 00:08:31,990
products and all of the other

00:08:30,419 --> 00:08:35,380
complexities that we can say

00:08:31,990 --> 00:08:39,760
and this library really attacks the

00:08:35,380 --> 00:08:42,310
whole issue of you VAP changes that

00:08:39,760 --> 00:08:44,730
targets people who do digital commerce

00:08:42,310 --> 00:08:49,360
so from 2015 you need to start charging

00:08:44,730 --> 00:08:52,450
the DAT of the customer and is created

00:08:49,360 --> 00:08:54,910
huge ripples in the community we address

00:08:52,450 --> 00:08:58,960
this with the library and by doing so we

00:08:54,910 --> 00:09:00,790
did not just get the attention of other

00:08:58,960 --> 00:09:03,730
e-commerce solutions that are open

00:09:00,790 --> 00:09:06,010
source but we also got the attention of

00:09:03,730 --> 00:09:07,480
SAS solutions so foxy cart which is a

00:09:06,010 --> 00:09:09,850
host of the e-commerce solution is now

00:09:07,480 --> 00:09:11,920
using our text library and conch a

00:09:09,850 --> 00:09:13,960
British SAS solution is also using our

00:09:11,920 --> 00:09:17,200
tax library and because they're using

00:09:13,960 --> 00:09:20,710
that library they found bugs in our tax

00:09:17,200 --> 00:09:22,660
rate data they found edge cases and we

00:09:20,710 --> 00:09:24,430
fixed that and together we made a lot of

00:09:22,660 --> 00:09:28,420
progress I'm really really happy about

00:09:24,430 --> 00:09:30,670
that and more welcome we are working on

00:09:28,420 --> 00:09:32,910
libraries that around pricing so the

00:09:30,670 --> 00:09:35,410
interaction between taxes and discounts

00:09:32,910 --> 00:09:38,110
payments and shipping but that's not

00:09:35,410 --> 00:09:41,500
important the point of this is that we

00:09:38,110 --> 00:09:43,390
now have enough examples to look at the

00:09:41,500 --> 00:09:46,800
actual problem space of creating

00:09:43,390 --> 00:09:49,270
libraries and what can go wrong of

00:09:46,800 --> 00:09:51,100
course before we do that we need to ask

00:09:49,270 --> 00:09:53,680
ourselves so why should we go through

00:09:51,100 --> 00:09:55,510
all this effort in the first place well

00:09:53,680 --> 00:09:58,510
first it's a good chance to reexamine

00:09:55,510 --> 00:10:00,940
your problem space if I'm writing an

00:09:58,510 --> 00:10:02,710
addressing library then I'm suddenly

00:10:00,940 --> 00:10:04,570
thinking about the addressing problem

00:10:02,710 --> 00:10:06,760
where does it start where does it end

00:10:04,570 --> 00:10:09,520
how do I need to solve this properly for

00:10:06,760 --> 00:10:11,920
my library to be truly useful so I don't

00:10:09,520 --> 00:10:14,560
really have a chance to do it in half

00:10:11,920 --> 00:10:16,980
baked way like I might do if it was a

00:10:14,560 --> 00:10:19,540
part of a much bigger application of

00:10:16,980 --> 00:10:21,120
course for us one of the main reasons is

00:10:19,540 --> 00:10:24,670
that you get additional exposure

00:10:21,120 --> 00:10:27,430
suddenly many other communities are

00:10:24,670 --> 00:10:29,470
using cover skies libraries which means

00:10:27,430 --> 00:10:32,500
that I can tell them if you like this

00:10:29,470 --> 00:10:34,360
there's more where that came from and it

00:10:32,500 --> 00:10:36,550
also means of course additional

00:10:34,360 --> 00:10:38,440
developers and additional help

00:10:36,550 --> 00:10:40,360
additional people coming to Drupal

00:10:38,440 --> 00:10:42,700
commerce it gives us a chance to

00:10:40,360 --> 00:10:44,080
validate our implementation commerce to

00:10:42,700 --> 00:10:45,580
point X won't be ready

00:10:44,080 --> 00:10:47,590
are there six months but people are

00:10:45,580 --> 00:10:49,540
already using our addressing and tax

00:10:47,590 --> 00:10:51,010
implementations in production which

00:10:49,540 --> 00:10:53,260
means that i'm getting fixes for edge

00:10:51,010 --> 00:10:56,470
cases all the time someone will open a

00:10:53,260 --> 00:10:58,630
PR saying your postal code validation is

00:10:56,470 --> 00:11:01,120
not precise enough in china for taiwan i

00:10:58,630 --> 00:11:05,160
say fine we'll fix that or someone says

00:11:01,120 --> 00:11:08,140
you're the text it does not account for

00:11:05,160 --> 00:11:10,510
us company that's registered for uva tea

00:11:08,140 --> 00:11:12,130
I say fine we fix that as well so that

00:11:10,510 --> 00:11:15,010
means that when a release commerce to

00:11:12,130 --> 00:11:16,690
point though it will have many of these

00:11:15,010 --> 00:11:18,220
edge cases removed and it will be much

00:11:16,690 --> 00:11:21,070
more battle-tested than it would have

00:11:18,220 --> 00:11:25,090
been if I had kept it under wraps it's a

00:11:21,070 --> 00:11:27,700
big win and you get more maintenance

00:11:25,090 --> 00:11:29,470
help that you will notice that these are

00:11:27,700 --> 00:11:31,060
hard problems maintaining address

00:11:29,470 --> 00:11:33,160
formats for every country maintaining

00:11:31,060 --> 00:11:35,320
tax rates for every country it's a

00:11:33,160 --> 00:11:36,940
really big maintenance burden and no one

00:11:35,320 --> 00:11:38,470
really wants to help because as I said

00:11:36,940 --> 00:11:41,590
that's the most pouring part of

00:11:38,470 --> 00:11:44,350
e-commerce but if I gather maintain errs

00:11:41,590 --> 00:11:45,820
from other communities if I work with

00:11:44,350 --> 00:11:47,950
the silliest maintainer and other

00:11:45,820 --> 00:11:50,110
maintains that maybe together we can

00:11:47,950 --> 00:11:52,810
solve all these problems and just leave

00:11:50,110 --> 00:11:56,530
more time for solving the fun problems

00:11:52,810 --> 00:12:00,330
and finally it allows you to back course

00:11:56,530 --> 00:12:02,710
this logic easily because the library is

00:12:00,330 --> 00:12:05,860
isolated it means that i can plug it in

00:12:02,710 --> 00:12:07,780
plug it into drupal 7 or drupal 8 into a

00:12:05,860 --> 00:12:10,510
symphony f wherever I am whatever

00:12:07,780 --> 00:12:14,110
whatever kind of a project I'm doing I

00:12:10,510 --> 00:12:17,470
can count on my code which is also a

00:12:14,110 --> 00:12:20,380
good thing to have the not so hidden

00:12:17,470 --> 00:12:22,980
cost of this is time remember how much

00:12:20,380 --> 00:12:25,690
more time it takes to create a

00:12:22,980 --> 00:12:27,850
contributor is doing something for your

00:12:25,690 --> 00:12:29,800
own site well the same kind of a

00:12:27,850 --> 00:12:31,870
trade-off exists between creating a

00:12:29,800 --> 00:12:34,210
module and creating a module and a

00:12:31,870 --> 00:12:36,400
library for us personally it's been

00:12:34,210 --> 00:12:38,380
months of additional development we

00:12:36,400 --> 00:12:40,870
would have been had a bit of commerce to

00:12:38,380 --> 00:12:43,660
point X if we hadn't gone to ivory route

00:12:40,870 --> 00:12:45,190
but as I said for us the additional

00:12:43,660 --> 00:12:46,330
exposure was worth it and it was

00:12:45,190 --> 00:12:50,320
something we really wanted to do all

00:12:46,330 --> 00:12:52,600
along one cause that's a part of it

00:12:50,320 --> 00:12:54,280
well let's break down the time cost the

00:12:52,600 --> 00:12:56,020
first problem of course is learning how

00:12:54,280 --> 00:12:58,750
to make the library in the first place I

00:12:56,020 --> 00:13:00,490
can help with some of that the other

00:12:58,750 --> 00:13:02,500
problem is the fact that you're looking

00:13:00,490 --> 00:13:05,020
at more edge cases in solving the

00:13:02,500 --> 00:13:06,940
problem in a more complete way also fine

00:13:05,020 --> 00:13:09,100
but the third problem is that your

00:13:06,940 --> 00:13:11,950
library needs to appear native to

00:13:09,100 --> 00:13:15,070
developers of all kinds of systems so

00:13:11,950 --> 00:13:17,710
symphony developer a level developer a

00:13:15,070 --> 00:13:19,930
drupal developer all of them should find

00:13:17,710 --> 00:13:22,510
your library easy to use and integrate

00:13:19,930 --> 00:13:24,910
code should not be weird just because it

00:13:22,510 --> 00:13:26,890
uses an external library if it is weird

00:13:24,910 --> 00:13:28,750
than you already a lot because the

00:13:26,890 --> 00:13:31,870
development did the developer experience

00:13:28,750 --> 00:13:33,370
has suffered so doing this is actually

00:13:31,870 --> 00:13:34,990
hard you need to think about all of

00:13:33,370 --> 00:13:36,130
these systems and all of these

00:13:34,990 --> 00:13:38,020
developers and how they're going to

00:13:36,130 --> 00:13:40,270
perceive your code and we'll look into

00:13:38,020 --> 00:13:43,360
at some tips and tricks on how we can

00:13:40,270 --> 00:13:47,200
actually solve that let's look at how a

00:13:43,360 --> 00:13:49,000
library looks like let's say I wanted to

00:13:47,200 --> 00:13:50,920
represent currencies so I start by

00:13:49,000 --> 00:13:53,770
creating a currency interface the

00:13:50,920 --> 00:13:56,500
currency interface describes how a

00:13:53,770 --> 00:13:59,320
currency behaves so a currency has a

00:13:56,500 --> 00:14:01,090
currency code a name and America code a

00:13:59,320 --> 00:14:03,430
symbol and the number of fraction digits

00:14:01,090 --> 00:14:05,980
I can get all of this data and I can

00:14:03,430 --> 00:14:08,380
also change it this is the contract for

00:14:05,980 --> 00:14:11,710
the currency now at the same time I

00:14:08,380 --> 00:14:14,500
implement a default currency object this

00:14:11,710 --> 00:14:16,750
is the default object that I can use for

00:14:14,500 --> 00:14:18,670
example if I'm loading data from json so

00:14:16,750 --> 00:14:20,440
if I'm taking JSON data inside the

00:14:18,670 --> 00:14:23,080
library I will load it into the currency

00:14:20,440 --> 00:14:26,110
object the currency object is also used

00:14:23,080 --> 00:14:28,780
by system by symphony systems that use

00:14:26,110 --> 00:14:31,750
doctrine when you're using doctrine you

00:14:28,780 --> 00:14:33,640
can add an additional mapping file that

00:14:31,750 --> 00:14:36,010
describes how such an object is

00:14:33,640 --> 00:14:37,840
persisted and loaded so you can reuse

00:14:36,010 --> 00:14:40,180
the provided object by just providing

00:14:37,840 --> 00:14:42,640
the mapping separately which is really

00:14:40,180 --> 00:14:44,980
neat however systems like drupal and

00:14:42,640 --> 00:14:46,660
laravel cannot do that because they

00:14:44,980 --> 00:14:49,480
require entities to extend their own

00:14:46,660 --> 00:14:52,030
base class which means that for drupal

00:14:49,480 --> 00:14:54,340
you create your triple entity types like

00:14:52,030 --> 00:14:56,680
usual but you just implement the library

00:14:54,340 --> 00:14:59,040
interface which means that the data to

00:14:56,680 --> 00:15:01,410
toggle loads and grace can actually be

00:14:59,040 --> 00:15:05,670
used by threat to the library and we'll

00:15:01,410 --> 00:15:07,829
see how that looks of course an entity

00:15:05,670 --> 00:15:09,630
might not just be a bag of getters and

00:15:07,829 --> 00:15:12,509
setters and empty properties might have

00:15:09,630 --> 00:15:15,060
some kind of logic oh-ho purists will

00:15:12,509 --> 00:15:16,500
say that an anemic data model is not a

00:15:15,060 --> 00:15:18,750
good thing and at least you will have

00:15:16,500 --> 00:15:21,720
some kind of helper so for an address

00:15:18,750 --> 00:15:24,449
format there might be different ways to

00:15:21,720 --> 00:15:27,779
get the format information which fields

00:15:24,449 --> 00:15:29,910
are used and in which layout so what we

00:15:27,779 --> 00:15:35,430
do is we use traits to accomplish this

00:15:29,910 --> 00:15:37,649
who here knows how traits work 123456

00:15:35,430 --> 00:15:40,319
okay so a smaller portion of the room

00:15:37,649 --> 00:15:42,660
traits are basically language assisted

00:15:40,319 --> 00:15:45,149
copy paste they are a new feature of PHP

00:15:42,660 --> 00:15:47,190
5.4 and you write a trade the same way

00:15:45,149 --> 00:15:49,560
you would write a class and then other

00:15:47,190 --> 00:15:52,380
classes reference that straight they use

00:15:49,560 --> 00:15:54,449
the trait and so that way both the

00:15:52,380 --> 00:15:57,569
currency default class and the Drupal

00:15:54,449 --> 00:16:01,139
entity use this trade or the address

00:15:57,569 --> 00:16:03,630
format one doesn't matter and they share

00:16:01,139 --> 00:16:05,760
the same methods that way I can share

00:16:03,630 --> 00:16:09,839
code between different classes without

00:16:05,760 --> 00:16:12,540
needing to extend a base class so that's

00:16:09,839 --> 00:16:15,209
good it also means that we can unit test

00:16:12,540 --> 00:16:18,329
this trait in only one place and we

00:16:15,209 --> 00:16:20,220
don't need to to repeat our units tests

00:16:18,329 --> 00:16:22,889
for both the library and the troop of

00:16:20,220 --> 00:16:24,810
integration so traits are a really

00:16:22,889 --> 00:16:26,970
useful tool for writing libraries and

00:16:24,810 --> 00:16:29,490
they're the main reason why I went with

00:16:26,970 --> 00:16:31,170
the PHP 5.4 minimum requirements in the

00:16:29,490 --> 00:16:33,540
first place though since then it has

00:16:31,170 --> 00:16:35,890
become normal since PHP 5.3 became

00:16:33,540 --> 00:16:38,680
unsupportive

00:16:35,890 --> 00:16:42,200
entities frequently have references

00:16:38,680 --> 00:16:45,350
relationships so a node has comments for

00:16:42,200 --> 00:16:47,720
example now with Drupal you would get an

00:16:45,350 --> 00:16:49,880
array of comments but doctrine would

00:16:47,720 --> 00:16:52,490
actually give you a collection now a

00:16:49,880 --> 00:16:54,950
collection is an object that behaves

00:16:52,490 --> 00:16:57,080
like an array but since it's an object

00:16:54,950 --> 00:16:59,720
it means means that you can lazy load

00:16:57,080 --> 00:17:01,790
stuff so the collection can load each

00:16:59,720 --> 00:17:04,040
comment only when you first access it

00:17:01,790 --> 00:17:06,980
which is a really great performance

00:17:04,040 --> 00:17:08,870
optimization now luckily doctoring

00:17:06,980 --> 00:17:10,610
collections are a separate project a

00:17:08,870 --> 00:17:13,130
separate repository that has only two

00:17:10,610 --> 00:17:15,050
classes with 200 lines of code maybe

00:17:13,130 --> 00:17:16,640
less so you can easily pull in

00:17:15,050 --> 00:17:18,470
collections inside your own library

00:17:16,640 --> 00:17:20,600
which means that you can make your own

00:17:18,470 --> 00:17:22,970
code in the library more elegant and

00:17:20,600 --> 00:17:25,430
since you're using doctrine collections

00:17:22,970 --> 00:17:27,860
here it means that doctrine can still

00:17:25,430 --> 00:17:30,050
use your default data model without

00:17:27,860 --> 00:17:32,240
changes so it can use your class with

00:17:30,050 --> 00:17:33,950
the separate mapping so that's really a

00:17:32,240 --> 00:17:35,570
useful trick and it doesn't really

00:17:33,950 --> 00:17:37,100
affect your drupal implementation it

00:17:35,570 --> 00:17:42,200
just means that you're more accessible

00:17:37,100 --> 00:17:45,050
to symphony people once we have entities

00:17:42,200 --> 00:17:46,880
we need a way to load them in Drupal 7

00:17:45,050 --> 00:17:49,460
terms that means having a controller

00:17:46,880 --> 00:17:52,190
class in Drupal 8 terms it means having

00:17:49,460 --> 00:17:54,620
a storage class the outside world cook

00:17:52,190 --> 00:17:56,780
calls this a repository so that's how

00:17:54,620 --> 00:18:00,050
we're calling it here and if you look at

00:17:56,780 --> 00:18:02,990
this code it's a repository interface

00:18:00,050 --> 00:18:05,170
that loads one or all address formats

00:18:02,990 --> 00:18:08,390
and that's all that we need to know and

00:18:05,170 --> 00:18:10,580
then we can provide a default repository

00:18:08,390 --> 00:18:12,890
implementation that loads data from the

00:18:10,580 --> 00:18:14,180
JSON the trips with the library but then

00:18:12,890 --> 00:18:17,870
Drupal can have its own implementation

00:18:14,180 --> 00:18:20,060
that loads entities and you can

00:18:17,870 --> 00:18:24,500
introduce a caching layer or anything

00:18:20,060 --> 00:18:26,420
that you want and of course finally now

00:18:24,500 --> 00:18:28,940
that we've described our data model in

00:18:26,420 --> 00:18:31,190
our data set we our library actually

00:18:28,940 --> 00:18:33,530
needs to do something it has some kind

00:18:31,190 --> 00:18:36,740
of business logic something that it's

00:18:33,530 --> 00:18:38,630
doing we call the this

00:18:36,740 --> 00:18:40,610
this logic in these kinds of objects

00:18:38,630 --> 00:18:42,410
services and when you look at them

00:18:40,610 --> 00:18:45,679
they're just Dom objects there's nothing

00:18:42,410 --> 00:18:48,020
special about them they specify their

00:18:45,679 --> 00:18:49,280
requirements in the constructor they

00:18:48,020 --> 00:18:51,050
don't assume the presence of a

00:18:49,280 --> 00:18:53,150
dependency injection containers it might

00:18:51,050 --> 00:18:56,360
be used or maybe the dependencies will

00:18:53,150 --> 00:18:58,970
be passed manually so look at a sone

00:18:56,360 --> 00:19:02,240
matcher it requires a zone repository

00:18:58,970 --> 00:19:05,030
which which will be used to load all

00:19:02,240 --> 00:19:06,650
available zones its type hints the zone

00:19:05,030 --> 00:19:08,540
repository interface which means it

00:19:06,650 --> 00:19:10,790
doesn't care which repository is getting

00:19:08,540 --> 00:19:14,090
the Drupal one or the library one from

00:19:10,790 --> 00:19:15,860
json or from the database as a source it

00:19:14,090 --> 00:19:18,760
just wants some kind of a repository

00:19:15,860 --> 00:19:21,860
that can give its owns and then it has

00:19:18,760 --> 00:19:23,420
match methods which will load all of the

00:19:21,860 --> 00:19:27,260
zones and match them against the

00:19:23,420 --> 00:19:30,860
provided address so simple and all of

00:19:27,260 --> 00:19:33,260
our services work the same way simple

00:19:30,860 --> 00:19:35,840
small objects that do one thing and do

00:19:33,260 --> 00:19:39,070
it well validating an address formatting

00:19:35,840 --> 00:19:42,400
a price amount deciding on a text type

00:19:39,070 --> 00:19:42,400
resulting a zone

00:19:44,940 --> 00:19:49,860
as I mentioned the library has the

00:19:48,060 --> 00:19:52,080
problem of having to appear native to

00:19:49,860 --> 00:19:55,110
different kinds of developers and that's

00:19:52,080 --> 00:19:57,120
not always easy because no matter how

00:19:55,110 --> 00:19:59,070
much closer we are in architectural

00:19:57,120 --> 00:20:01,590
style symphony in laravel and drupal

00:19:59,070 --> 00:20:03,870
still do things differently and you need

00:20:01,590 --> 00:20:05,460
to account for that so let's look at

00:20:03,870 --> 00:20:07,830
some of the problems that might appear

00:20:05,460 --> 00:20:09,840
the first problem we have is the problem

00:20:07,830 --> 00:20:11,990
of translatable strings now don't get me

00:20:09,840 --> 00:20:15,090
wrong you can have entities that have

00:20:11,990 --> 00:20:17,190
the concept of multilingual baked beans

00:20:15,090 --> 00:20:18,840
so you can assume that the currency

00:20:17,190 --> 00:20:20,630
might exist in multiple languages that

00:20:18,840 --> 00:20:23,820
is not it what I'm talking about is

00:20:20,630 --> 00:20:25,470
simply translating thumbs strings that

00:20:23,820 --> 00:20:27,570
might appear through the library so for

00:20:25,470 --> 00:20:29,730
example if I'm out picking an address

00:20:27,570 --> 00:20:35,280
form i need to translate the string

00:20:29,730 --> 00:20:37,920
state or province so we basically cannot

00:20:35,280 --> 00:20:39,960
do this why because different frameworks

00:20:37,920 --> 00:20:41,400
do this in a different way so the way

00:20:39,960 --> 00:20:43,980
symphony in laravel do string

00:20:41,400 --> 00:20:45,810
translation is to force you to create

00:20:43,980 --> 00:20:48,090
your strings in a separate file give

00:20:45,810 --> 00:20:49,860
them IDs and then your peach because

00:20:48,090 --> 00:20:52,410
just cause the string translator with

00:20:49,860 --> 00:20:54,540
the ID so they say translate the string

00:20:52,410 --> 00:20:57,570
which the ID commerce guys addressing

00:20:54,540 --> 00:20:59,490
profits but truthful as you know has the

00:20:57,570 --> 00:21:01,710
key function which always requires the

00:20:59,490 --> 00:21:03,870
full source string so that means that

00:21:01,710 --> 00:21:05,790
you cannot have a single unified way of

00:21:03,870 --> 00:21:07,500
dealing with translatable strings and

00:21:05,790 --> 00:21:09,840
what our libraries do is actually not

00:21:07,500 --> 00:21:12,870
translate strings at all instead we use

00:21:09,840 --> 00:21:15,810
constants and we tell the implementing

00:21:12,870 --> 00:21:18,750
implication to replace the the constant

00:21:15,810 --> 00:21:20,430
with the translated label so let's say

00:21:18,750 --> 00:21:22,770
that we have three different labels for

00:21:20,430 --> 00:21:24,570
the city field 20 tality field can be

00:21:22,770 --> 00:21:26,610
assisted can be a district can be a post

00:21:24,570 --> 00:21:28,290
down we simply define three constants

00:21:26,610 --> 00:21:29,700
and then the drupal module is the one

00:21:28,290 --> 00:21:32,040
that matter the constants to a label

00:21:29,700 --> 00:21:34,200
that was passed through t we have this

00:21:32,040 --> 00:21:36,990
neat trick where we don't add the

00:21:34,200 --> 00:21:40,440
constants to the interface instead we

00:21:36,990 --> 00:21:42,500
create an enum class so an enum class is

00:21:40,440 --> 00:21:45,260
a really dumb

00:21:42,500 --> 00:21:47,510
concept an enumeration so it has the

00:21:45,260 --> 00:21:49,070
constants that you're using and then it

00:21:47,510 --> 00:21:51,410
has a bit of sugar that allows you to

00:21:49,070 --> 00:21:53,330
say this is the default one and these

00:21:51,410 --> 00:21:55,400
are all of them which is really useful

00:21:53,330 --> 00:21:57,110
if you're building a UI so for example a

00:21:55,400 --> 00:21:59,090
drupal UI for creating an address form

00:21:57,110 --> 00:22:01,400
can now lists all the available options

00:21:59,090 --> 00:22:03,470
we have a commerce guys even library for

00:22:01,400 --> 00:22:07,040
that so it's a good thing to keep in

00:22:03,470 --> 00:22:09,760
mind no translating strings it's not so

00:22:07,040 --> 00:22:11,900
bad if you know your strings in advance

00:22:09,760 --> 00:22:14,210
then there's the problem of pluggable

00:22:11,900 --> 00:22:16,310
implementations so let's remember how

00:22:14,210 --> 00:22:18,170
resolving a text type works we have

00:22:16,310 --> 00:22:19,760
multiple resolver classes and we call

00:22:18,170 --> 00:22:23,300
them one by one until one of them gives

00:22:19,760 --> 00:22:24,890
us an answer now other libraries or

00:22:23,300 --> 00:22:26,810
modules might provide their own

00:22:24,890 --> 00:22:29,930
implementation someone might provide a

00:22:26,810 --> 00:22:31,760
Serbian text type resolver the question

00:22:29,930 --> 00:22:33,560
is how do we discover these

00:22:31,760 --> 00:22:36,050
implementations well on the library

00:22:33,560 --> 00:22:38,120
level you don't do that so the text type

00:22:36,050 --> 00:22:39,920
resolver engine does not do any kind of

00:22:38,120 --> 00:22:42,160
discover in its own it just assumes that

00:22:39,920 --> 00:22:44,690
it is passed all of the discovered

00:22:42,160 --> 00:22:46,910
resolvers and how the discovery is done

00:22:44,690 --> 00:22:49,340
is not the library's concerned different

00:22:46,910 --> 00:22:52,490
systems have different ways of doing

00:22:49,340 --> 00:22:54,230
this so in symphony you would register

00:22:52,490 --> 00:22:56,270
all the resolvers in the dependency

00:22:54,230 --> 00:22:58,250
injection container and give it tags so

00:22:56,270 --> 00:22:59,960
you would use text services and then the

00:22:58,250 --> 00:23:02,360
symphony application gets all the

00:22:59,960 --> 00:23:05,480
resolvers with a specific tag and passes

00:23:02,360 --> 00:23:07,820
them in Drupal Drupal 8 uses plugins for

00:23:05,480 --> 00:23:09,320
this you declare a plug-in type and then

00:23:07,820 --> 00:23:11,390
you have a bunch of plug-in classes that

00:23:09,320 --> 00:23:13,160
have an annotation on top and that's

00:23:11,390 --> 00:23:16,220
what Drupal users to discover which

00:23:13,160 --> 00:23:17,840
classes are available so you want to use

00:23:16,220 --> 00:23:20,270
plugins if you are using Drupal and

00:23:17,840 --> 00:23:23,150
Drupal core actually has certain places

00:23:20,270 --> 00:23:25,340
where text services are used but I would

00:23:23,150 --> 00:23:28,550
argue that's not really a native thing

00:23:25,340 --> 00:23:30,350
to do in Drupal and you can mean I'm not

00:23:28,550 --> 00:23:32,720
sure how much you you can see this but

00:23:30,350 --> 00:23:34,850
in the bottom there's an example of how

00:23:32,720 --> 00:23:37,730
triple-core integrates symphony

00:23:34,850 --> 00:23:40,600
constraints so Drupal uses the symphony

00:23:37,730 --> 00:23:43,400
validator but it makes the constraints

00:23:40,600 --> 00:23:46,070
discoverable s plugins so what Drupal

00:23:43,400 --> 00:23:49,990
does is it declares the plug-in type and

00:23:46,070 --> 00:23:51,520
then it creates plugins that extends the

00:23:49,990 --> 00:23:54,070
trains that were provided by symphony

00:23:51,520 --> 00:23:56,830
validator so we would do the same thing

00:23:54,070 --> 00:23:59,830
here i define a text type resolver

00:23:56,830 --> 00:24:02,020
plug-in type and then i create a dumb

00:23:59,830 --> 00:24:04,690
plug in class for each of the resolvers

00:24:02,020 --> 00:24:07,660
the trip with the library and and that's

00:24:04,690 --> 00:24:09,250
it I extend the library class I may be

00:24:07,660 --> 00:24:11,230
replaced a message with something that

00:24:09,250 --> 00:24:13,690
was already localized and they get the

00:24:11,230 --> 00:24:18,130
annotation on top that is used to do the

00:24:13,690 --> 00:24:20,850
actual discovering the important things

00:24:18,130 --> 00:24:23,110
to note here is knowing when to stop

00:24:20,850 --> 00:24:25,150
this means that there are some problems

00:24:23,110 --> 00:24:28,570
are simply not worth solving in the

00:24:25,150 --> 00:24:31,120
library why because the different parent

00:24:28,570 --> 00:24:33,550
systems simply varai too much for

00:24:31,120 --> 00:24:35,230
example forms each framework has a

00:24:33,550 --> 00:24:37,330
completely different way of doing forms

00:24:35,230 --> 00:24:40,900
symphony farms triple forms laravel

00:24:37,330 --> 00:24:42,190
forms whatever the way that's none so it

00:24:40,900 --> 00:24:44,200
means that the library simply should

00:24:42,190 --> 00:24:45,970
must provide forms it's easier if you

00:24:44,200 --> 00:24:49,030
don't do it now you might be tempted to

00:24:45,970 --> 00:24:50,470
say okay I will build my own form

00:24:49,030 --> 00:24:52,390
builder that will create some kind of

00:24:50,470 --> 00:24:54,220
generic form structure and then I will

00:24:52,390 --> 00:24:57,070
create classes that will transform that

00:24:54,220 --> 00:24:59,020
structure into the a true perform a

00:24:57,070 --> 00:25:00,910
symphony form and so on but don't do

00:24:59,020 --> 00:25:02,920
this because its complexity it means

00:25:00,910 --> 00:25:04,540
that your implementation won't appear

00:25:02,920 --> 00:25:06,610
native to Drupal people are symphony

00:25:04,540 --> 00:25:08,140
people suddenly you have a form that you

00:25:06,610 --> 00:25:10,929
cannot alter and or you cannot

00:25:08,140 --> 00:25:14,470
understand how it's built it's weird so

00:25:10,929 --> 00:25:16,179
that's also one thing to understand no

00:25:14,470 --> 00:25:18,520
the duplication is not always a bad

00:25:16,179 --> 00:25:20,380
thing for example the addressing library

00:25:18,520 --> 00:25:22,440
has a formatter class so the formatter

00:25:20,380 --> 00:25:24,940
class takes an address and it outputs

00:25:22,440 --> 00:25:27,670
HTML with the rendered address and that

00:25:24,940 --> 00:25:30,550
works great however if you're writing a

00:25:27,670 --> 00:25:32,230
formatter inside the Drupal then you

00:25:30,550 --> 00:25:34,210
would expect to have a render array so

00:25:32,230 --> 00:25:36,070
to appear more native to Drupal people

00:25:34,210 --> 00:25:37,960
we simply implement our own separate

00:25:36,070 --> 00:25:40,450
floor matter duplicating about hundreds

00:25:37,960 --> 00:25:43,830
of 50 lines of code but it means that

00:25:40,450 --> 00:25:47,080
the developer experience is better

00:25:43,830 --> 00:25:49,540
so let's talk about which problems we

00:25:47,080 --> 00:25:51,310
should actually tackle we now know why

00:25:49,540 --> 00:25:54,450
we would want to do a library we know

00:25:51,310 --> 00:25:57,130
what can go wrong we know how we can

00:25:54,450 --> 00:25:58,960
stick some of those things but which

00:25:57,130 --> 00:26:00,340
problems do we actually start tackling

00:25:58,960 --> 00:26:02,680
and what do we handle in our own

00:26:00,340 --> 00:26:04,600
libraries well the first problem is the

00:26:02,680 --> 00:26:07,270
problem the one that I like two are the

00:26:04,600 --> 00:26:08,950
cook to go hard problem so hard problems

00:26:07,270 --> 00:26:10,990
are the ones that require domain

00:26:08,950 --> 00:26:12,970
knowledge to get right these are the

00:26:10,990 --> 00:26:15,250
things that require experience and you

00:26:12,970 --> 00:26:17,230
can often see other systems doing them

00:26:15,250 --> 00:26:20,080
completely wrong so a good example of

00:26:17,230 --> 00:26:21,940
this is taxes many systems do taxes in a

00:26:20,080 --> 00:26:24,700
wrong way or interaction between texts

00:26:21,940 --> 00:26:26,260
and discounts if you are solving a hard

00:26:24,700 --> 00:26:27,820
problem then you're basically turning

00:26:26,260 --> 00:26:30,340
all of your experience into a library

00:26:27,820 --> 00:26:31,690
form so it's available to all the PHP

00:26:30,340 --> 00:26:34,810
community which means that you're

00:26:31,690 --> 00:26:37,090
providing great value then we have

00:26:34,810 --> 00:26:39,160
boring problems pouring problems are the

00:26:37,090 --> 00:26:41,950
ones that have a lot of Education so

00:26:39,160 --> 00:26:43,960
think for example address addressing is

00:26:41,950 --> 00:26:46,330
not hard but every country has its own

00:26:43,960 --> 00:26:49,540
address format so you need to gather all

00:26:46,330 --> 00:26:51,460
of this information it's not easy to do

00:26:49,540 --> 00:26:53,080
this alone secure doing the library you

00:26:51,460 --> 00:26:55,660
can do this with more people and you can

00:26:53,080 --> 00:26:58,870
tackle a boring problem sinker also

00:26:55,660 --> 00:27:00,550
about logging you really don't want to

00:26:58,870 --> 00:27:01,960
reimplement log in but for example

00:27:00,550 --> 00:27:04,150
monologue does that for you and that's

00:27:01,960 --> 00:27:07,120
why it's useful so in this kind of cases

00:27:04,150 --> 00:27:08,680
you usually start by thinking oh please

00:27:07,120 --> 00:27:10,300
tell me I want needs to spend a week

00:27:08,680 --> 00:27:11,920
doing that and then you find the library

00:27:10,300 --> 00:27:14,620
but if you don't find a library then you

00:27:11,920 --> 00:27:16,690
will save many other people the same

00:27:14,620 --> 00:27:18,910
effort and that means that your library

00:27:16,690 --> 00:27:20,440
will be very valuable and if no one is

00:27:18,910 --> 00:27:24,460
using your library then it's not very

00:27:20,440 --> 00:27:27,130
valuable the main question to ask is are

00:27:24,460 --> 00:27:29,260
you saving any one time when I talk to

00:27:27,130 --> 00:27:31,420
e-commerce maintainer and we talk about

00:27:29,260 --> 00:27:33,280
my bridge they say yeah sure libraries

00:27:31,420 --> 00:27:35,710
are a great idea let's create the cart

00:27:33,280 --> 00:27:38,470
interface nobody cares about your cart

00:27:35,710 --> 00:27:40,270
interface why because a cart interface

00:27:38,470 --> 00:27:42,700
is something each of us can think of in

00:27:40,270 --> 00:27:44,350
10 minutes and then we're done if a

00:27:42,700 --> 00:27:46,360
library can be reinvented in an hour

00:27:44,350 --> 00:27:47,620
then it will be reinvented in an hour

00:27:46,360 --> 00:27:49,270
because everyone

00:27:47,620 --> 00:27:51,370
their own opinions if you want your

00:27:49,270 --> 00:27:53,050
library to be widely used and if you

00:27:51,370 --> 00:27:55,330
want to go for all that effort make sure

00:27:53,050 --> 00:27:59,050
it's saving someone days and weeks and

00:27:55,330 --> 00:28:02,140
months of efforts that way it's it's

00:27:59,050 --> 00:28:04,570
more bulletproof so definitely don't

00:28:02,140 --> 00:28:06,580
just provide a data model a data model

00:28:04,570 --> 00:28:08,470
is great but you usually want to have

00:28:06,580 --> 00:28:10,360
some kind of business logic some kind of

00:28:08,470 --> 00:28:12,760
data set something that you're doing and

00:28:10,360 --> 00:28:17,730
we'll look at Drupal examples in a

00:28:12,760 --> 00:28:20,800
second yeah that's second has passed so

00:28:17,730 --> 00:28:22,540
let's let's think about what we can

00:28:20,800 --> 00:28:24,850
decouple from Drupal and release to the

00:28:22,540 --> 00:28:26,950
outside world it's a big conversation to

00:28:24,850 --> 00:28:28,900
have I only have my own personal

00:28:26,950 --> 00:28:31,840
opinions so I cannot really provide

00:28:28,900 --> 00:28:34,330
definite answers but for example there's

00:28:31,840 --> 00:28:36,490
my great my great is an awesome tool

00:28:34,330 --> 00:28:38,230
that I haven't seen anywhere else many

00:28:36,490 --> 00:28:39,940
projects would benefit from having

00:28:38,230 --> 00:28:42,580
migrated having that kind of a pluggable

00:28:39,940 --> 00:28:45,910
architecture that really allows you to

00:28:42,580 --> 00:28:47,620
load extract transform the data and do

00:28:45,910 --> 00:28:49,780
what you need so I think there's great

00:28:47,620 --> 00:28:52,270
value in providing some kind of an ETL

00:28:49,780 --> 00:28:55,000
library like that then there's our

00:28:52,270 --> 00:28:57,040
darling views I don't know if you

00:28:55,000 --> 00:28:59,980
noticed but many projects have started

00:28:57,040 --> 00:29:01,900
to imitate or duplicate views so in the

00:28:59,980 --> 00:29:03,850
symphony world serious head starts it's

00:29:01,900 --> 00:29:06,220
a bundle that squid that's basically

00:29:03,850 --> 00:29:08,860
views and oral platform which is this

00:29:06,220 --> 00:29:11,470
really great business framework that's

00:29:08,860 --> 00:29:13,179
used to build a cameo in oro crm they

00:29:11,470 --> 00:29:15,100
are also building their own views things

00:29:13,179 --> 00:29:18,730
and the way we do they do it is they

00:29:15,100 --> 00:29:23,290
create the view in llamo and then they

00:29:18,730 --> 00:29:26,350
load that GMO and they built the HTML

00:29:23,290 --> 00:29:29,050
from that but it's not as dynamic and it

00:29:26,350 --> 00:29:30,640
doesn't have the architecture of drupal

00:29:29,050 --> 00:29:32,350
views because we've spent so many years

00:29:30,640 --> 00:29:34,600
perfecting that so if we could actually

00:29:32,350 --> 00:29:36,940
spread that kind of architecture with

00:29:34,600 --> 00:29:39,000
pluggable feels and displays and

00:29:36,940 --> 00:29:41,710
extenders that would have creates value

00:29:39,000 --> 00:29:43,870
there are many other examples we can

00:29:41,710 --> 00:29:45,760
talk about it I mean for example we are

00:29:43,870 --> 00:29:48,220
talking a lot about how Drupal 8 has

00:29:45,760 --> 00:29:50,050
this insanely creates rendering and

00:29:48,220 --> 00:29:52,090
caching with this kind of intelligence

00:29:50,050 --> 00:29:55,070
that other systems don't have always

00:29:52,090 --> 00:29:57,350
knowing what is cacheable and what

00:29:55,070 --> 00:29:59,149
cash contexts are so maybe we can export

00:29:57,350 --> 00:30:02,570
some of dess to other communities the

00:29:59,149 --> 00:30:05,690
point is in spreading our own gather

00:30:02,570 --> 00:30:06,889
knowledge outside of Drupal why because

00:30:05,690 --> 00:30:09,230
it simply makes sense we've already

00:30:06,889 --> 00:30:11,539
spent the time figuring out this problem

00:30:09,230 --> 00:30:13,970
spaces so if we are doing that we might

00:30:11,539 --> 00:30:16,549
as well reap some more benefits from

00:30:13,970 --> 00:30:18,470
that just take into account the

00:30:16,549 --> 00:30:21,500
differences between systems Drupal is

00:30:18,470 --> 00:30:24,169
this dynamic int respectable system that

00:30:21,500 --> 00:30:27,139
configuration driven symphony in laravel

00:30:24,169 --> 00:30:28,940
our code driven and static so that means

00:30:27,139 --> 00:30:31,580
that you need to think about different

00:30:28,940 --> 00:30:34,850
expectations drupal people want you is

00:30:31,580 --> 00:30:36,440
symphony people want to write yamo you

00:30:34,850 --> 00:30:38,960
need to account for everyone but if

00:30:36,440 --> 00:30:41,000
you're smart enough then your library

00:30:38,960 --> 00:30:43,460
will hit the sweet spot and it will be

00:30:41,000 --> 00:30:45,649
truly useful and I'm looking forward to

00:30:43,460 --> 00:30:47,840
having the discussion in the community

00:30:45,649 --> 00:30:52,460
and then figuring out together how we

00:30:47,840 --> 00:30:55,700
can do this in an easy way okay so we

00:30:52,460 --> 00:30:58,159
have a good 15 minutes for questions so

00:30:55,700 --> 00:31:01,159
let's start the discussion what did you

00:30:58,159 --> 00:31:03,519
find confusing what are your thoughts on

00:31:01,159 --> 00:31:03,519
this matter

00:31:07,420 --> 00:31:16,260
I know there's at least one question

00:31:12,850 --> 00:31:16,260
you're just shy

00:31:21,850 --> 00:31:24,690
not yet

00:31:34,899 --> 00:31:41,859
oh there we go okay sorry awesome my

00:31:38,739 --> 00:31:45,190
question is was there a reason why you

00:31:41,859 --> 00:31:47,099
took the approach of making completely

00:31:45,190 --> 00:31:49,779
separate libraries rather than the

00:31:47,099 --> 00:31:51,729
symphony approach where they created sub

00:31:49,779 --> 00:31:54,399
tree splits that were read only what was

00:31:51,729 --> 00:31:56,950
the decision making find that well

00:31:54,399 --> 00:31:58,929
that's just a cool code organizations

00:31:56,950 --> 00:32:00,669
think to what symphony does is there

00:31:58,929 --> 00:32:02,200
basically what huge library and then

00:32:00,669 --> 00:32:04,059
they split parts off at separate

00:32:02,200 --> 00:32:05,859
repositories I mean we could have a

00:32:04,059 --> 00:32:07,690
repository with all comers guys library

00:32:05,859 --> 00:32:09,659
then splits them off but it doesn't

00:32:07,690 --> 00:32:12,099
matter it's just an organization thing

00:32:09,659 --> 00:32:14,200
we certainly wouldn't be able to

00:32:12,099 --> 00:32:16,499
automate splitting off that if it was

00:32:14,200 --> 00:32:18,249
inside the main triple commerce

00:32:16,499 --> 00:32:20,589
repository you needs to make the

00:32:18,249 --> 00:32:23,019
separation between drupal commerce the

00:32:20,589 --> 00:32:25,450
module the drupal application and the

00:32:23,019 --> 00:32:26,950
library which is this small powerful

00:32:25,450 --> 00:32:28,749
piece of code that doesn't have any

00:32:26,950 --> 00:32:30,549
dependencies that's the tricky part

00:32:28,749 --> 00:32:34,169
libraries only depend on each other they

00:32:30,549 --> 00:32:34,169
don't have any other dependencies

00:32:36,620 --> 00:32:44,210
I have two questions the first one is in

00:32:40,809 --> 00:32:48,500
Serbia do you refrigerate your eggs yes

00:32:44,210 --> 00:32:51,770
I refrigerate my ex I just needed to

00:32:48,500 --> 00:32:55,550
know that into you talk about maybe

00:32:51,770 --> 00:32:57,290
views or I don't know maybe panels some

00:32:55,550 --> 00:33:00,320
of the really things that make Drupal

00:32:57,290 --> 00:33:02,270
great so I guess there's two parts to

00:33:00,320 --> 00:33:03,920
this question one I get a little scared

00:33:02,270 --> 00:33:05,390
if we're going to give views away to

00:33:03,920 --> 00:33:09,200
everybody because I think it makes

00:33:05,390 --> 00:33:13,040
Drupal awesome but two I think big parts

00:33:09,200 --> 00:33:15,650
of what makes views awesome is the C

00:33:13,040 --> 00:33:18,380
tools integration being able to have the

00:33:15,650 --> 00:33:21,050
UI that would be really hard to separate

00:33:18,380 --> 00:33:25,160
out from the Drupal implementation no

00:33:21,050 --> 00:33:27,590
yes sure it's not easy but the main

00:33:25,160 --> 00:33:29,420
point of my idea is that we take at

00:33:27,590 --> 00:33:31,760
least the knowledge that we've

00:33:29,420 --> 00:33:33,860
accumulated over the many years we've

00:33:31,760 --> 00:33:36,110
been doing this as a community and then

00:33:33,860 --> 00:33:38,360
allowing others from to benefit we keep

00:33:36,110 --> 00:33:40,820
talking about how how much fruit plate

00:33:38,360 --> 00:33:42,230
has benefited from using symphony but we

00:33:40,820 --> 00:33:44,510
actually have a lot to give ourselves

00:33:42,230 --> 00:33:47,510
and even if we are not using the library

00:33:44,510 --> 00:33:49,429
directly which we would at least by

00:33:47,510 --> 00:33:51,470
creating the library you allow others to

00:33:49,429 --> 00:33:54,530
make use of all the knowledge you have

00:33:51,470 --> 00:33:56,420
gathered so I I don't think we should be

00:33:54,530 --> 00:33:58,490
afraid of spreading knowledge as I said

00:33:56,420 --> 00:34:00,200
people will look at it and then we'll be

00:33:58,490 --> 00:34:05,120
able to tell them there's more where

00:34:00,200 --> 00:34:07,309
that came from so what else is on the

00:34:05,120 --> 00:34:09,620
roadmap for commerce libraries going

00:34:07,309 --> 00:34:12,710
forward what else do I plan to break out

00:34:09,620 --> 00:34:14,120
into these separate yes so the main one

00:34:12,710 --> 00:34:16,129
we're currently working on is a pricing

00:34:14,120 --> 00:34:19,580
library the point of the pricing library

00:34:16,129 --> 00:34:22,669
is to have calculators that can figure

00:34:19,580 --> 00:34:24,830
out how to apply a discount store price

00:34:22,669 --> 00:34:27,020
it contains tax so that means applying

00:34:24,830 --> 00:34:29,120
percentage at fixed rate discounts to

00:34:27,020 --> 00:34:31,280
one line item old or the entire order

00:34:29,120 --> 00:34:32,659
ordering some proportional calculations

00:34:31,280 --> 00:34:34,520
all of this is covered with discounts

00:34:32,659 --> 00:34:36,139
and shipping other systems get it wrong

00:34:34,520 --> 00:34:39,320
so there's a lot of value in sharing

00:34:36,139 --> 00:34:41,120
that we initially try to do also do this

00:34:39,320 --> 00:34:42,500
kind of a price value object but turned

00:34:41,120 --> 00:34:44,300
out that cannot be integrated back into

00:34:42,500 --> 00:34:45,540
Drupal so we are focusing on the

00:34:44,300 --> 00:34:47,640
calculators now

00:34:45,540 --> 00:34:49,770
and Nick mihalik my colleague has a

00:34:47,640 --> 00:34:51,390
great architecture in place for a

00:34:49,770 --> 00:34:53,429
shipping library which also doesn't

00:34:51,390 --> 00:34:55,370
exist elsewhere so I think that we can

00:34:53,429 --> 00:34:58,350
provide a lot of value by doing that

00:34:55,370 --> 00:35:00,600
thank you very much discounting is an

00:34:58,350 --> 00:35:03,840
couponing is a use debacle so we really

00:35:00,600 --> 00:35:06,390
appreciate that yeah so this isn't a

00:35:03,840 --> 00:35:08,070
question it's just a comment um so this

00:35:06,390 --> 00:35:09,990
approach of building libraries is

00:35:08,070 --> 00:35:11,280
actually really useful even if you're

00:35:09,990 --> 00:35:14,130
not building those libraries to be

00:35:11,280 --> 00:35:17,040
shared outside of your your company wrap

00:35:14,130 --> 00:35:20,190
so we're doing that now and Drupal 7

00:35:17,040 --> 00:35:22,500
with complex crippled sites building

00:35:20,190 --> 00:35:24,660
building shared libraries is actually a

00:35:22,500 --> 00:35:27,300
lot more powerful you can do unit

00:35:24,660 --> 00:35:29,040
testing on them get a lot more test

00:35:27,300 --> 00:35:31,110
coverage and those kinds of things so

00:35:29,040 --> 00:35:32,610
it's definitely approach that down I

00:35:31,110 --> 00:35:34,710
think what everyone will be doing in

00:35:32,610 --> 00:35:36,420
Drupal 8 yeah I agreed I've actually

00:35:34,710 --> 00:35:38,190
heard stories about certain French

00:35:36,420 --> 00:35:41,550
projects where they had to is Drupal 6

00:35:38,190 --> 00:35:43,950
or 7 but they elected to build all the

00:35:41,550 --> 00:35:45,990
logic inside the decoupled libraries and

00:35:43,950 --> 00:35:47,490
connecting that with troble so that they

00:35:45,990 --> 00:35:49,380
have the benefits of unit testing and

00:35:47,490 --> 00:35:51,300
clear coat and the ability to more

00:35:49,380 --> 00:35:53,040
easily migrate to a different rupal

00:35:51,300 --> 00:35:56,070
version or even a different framework

00:35:53,040 --> 00:35:57,960
and Frederick Loren FGM has been doing a

00:35:56,070 --> 00:36:00,570
lot of that he had a session about that

00:35:57,960 --> 00:36:04,220
at dev days he doesn't Rubicon so if you

00:36:00,570 --> 00:36:04,220
see him you should ask him about it

00:36:05,150 --> 00:36:12,559
so you see I knew you had questions so

00:36:10,640 --> 00:36:13,849
in any case if anything else pops into

00:36:12,559 --> 00:36:15,710
your mind that will be at the Commerce

00:36:13,849 --> 00:36:17,809
guys boots all week so we can continue

00:36:15,710 --> 00:36:19,640
this discussion the point of this Rose

00:36:17,809 --> 00:36:22,490
just to make you curious and get you

00:36:19,640 --> 00:36:26,410
thinking and then we can go into more

00:36:22,490 --> 00:36:26,410

YouTube URL: https://www.youtube.com/watch?v=VT_wA0N0-hU


