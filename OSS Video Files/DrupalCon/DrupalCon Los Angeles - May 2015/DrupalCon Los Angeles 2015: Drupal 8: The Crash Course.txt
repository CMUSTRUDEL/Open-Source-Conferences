Title: DrupalCon Los Angeles 2015: Drupal 8: The Crash Course
Publication date: 2015-05-12
Playlist: DrupalCon Los Angeles - May 2015
Description: 
	One of the most widely-used and mature Content Management Systems on the planet, Drupal runs more than one in fifty websites in the world.  However, it has always been something of an odd duck, with an architecture and design very different than anything else in PHP.

Enter Drupal 8: Almost a complete rewrite under the hood, Drupal 8 is a modern, PHP 5.4-boasting, REST-capable, object-oriented powerhouse.  Now leveraging 3rd party components from no less than 9 different projects, Drupal 8 aims to be the premiere Content Management Platform for PHP.

 

But how do you use all this new-fangled stuff?  This session will provide a walkthrough of Drupal's key systems and APIs, intended to give developers a taste of what building with Drupal 8 will be like.

Prior familiarity with Drupal 7 is helpful but will not be assumed.
Captions: 
	00:00:00,060 --> 00:00:05,359
alright let's go ahead and get started

00:00:02,790 --> 00:00:07,649
welcome to Drupal 8 to the crash course

00:00:05,359 --> 00:00:09,990
my name's Larry Garfield you may know me

00:00:07,649 --> 00:00:12,900
online is crow got a few fans here

00:00:09,990 --> 00:00:15,389
apparently I'm a senior architect with

00:00:12,900 --> 00:00:18,289
pal Internet we're a web agency based in

00:00:15,389 --> 00:00:21,470
Chicago we do mostly but not exclusively

00:00:18,289 --> 00:00:23,880
Drupal and mostly but not exclusively

00:00:21,470 --> 00:00:26,430
institutional nonprofits universities

00:00:23,880 --> 00:00:28,710
museums hospitals public radio stations

00:00:26,430 --> 00:00:31,980
publishing that's kind of our standard

00:00:28,710 --> 00:00:34,079
fare for Drupal 8 I was the web services

00:00:31,980 --> 00:00:35,280
initiative lead which is the fancy way

00:00:34,079 --> 00:00:37,890
of saying you can blame me for about a

00:00:35,280 --> 00:00:39,450
third of what you see on the screen here

00:00:37,890 --> 00:00:40,739
Drupal representative to the framework

00:00:39,450 --> 00:00:42,780
interoperability group which is kind of

00:00:40,739 --> 00:00:44,370
the United Nations of PHP with all the

00:00:42,780 --> 00:00:45,920
positive and negative connotations that

00:00:44,370 --> 00:00:48,570
come with that

00:00:45,920 --> 00:00:51,989
advisor the Drupal Association and your

00:00:48,570 --> 00:00:53,460
friendly neighborhood singing crab those

00:00:51,989 --> 00:00:55,559
those were in the pre note know what I'm

00:00:53,460 --> 00:00:58,160
talking about those who weren't you

00:00:55,559 --> 00:00:58,160
don't know what you missed

00:00:58,219 --> 00:01:02,460
all right we're gonna be looking at a

00:00:59,940 --> 00:01:04,949
lot of code in this session so if you

00:01:02,460 --> 00:01:07,560
want to play along at home everything is

00:01:04,949 --> 00:01:09,630
available at this link github.com slash

00:01:07,560 --> 00:01:11,220
pal internet slash hugs you could

00:01:09,630 --> 00:01:14,360
download that now or later the slides

00:01:11,220 --> 00:01:17,790
will be available later as well alright

00:01:14,360 --> 00:01:18,689
so let's talk about Drupal 8 kind of a

00:01:17,790 --> 00:01:20,220
big deal right you've all heard

00:01:18,689 --> 00:01:24,570
something about it by this point I hope

00:01:20,220 --> 00:01:29,369
who hasn't heard of Drupal 8 I know

00:01:24,570 --> 00:01:32,909
better about you so talking about Drupal

00:01:29,369 --> 00:01:34,590
8 and you know listening people you talk

00:01:32,909 --> 00:01:37,259
about their expectations generally I

00:01:34,590 --> 00:01:39,659
hear one of two responses from Drupal

00:01:37,259 --> 00:01:41,640
people I hear it's so different will I

00:01:39,659 --> 00:01:46,229
ever be able to learn it who's in that

00:01:41,640 --> 00:01:47,399
group not that many people so then I

00:01:46,229 --> 00:01:52,530
guess the rest of you are in the second

00:01:47,399 --> 00:01:53,399
group Drupal 8 is finally not weird this

00:01:52,530 --> 00:01:57,570
mean I'll be able to use it who's in

00:01:53,399 --> 00:02:00,750
that category slightly more people okay

00:01:57,570 --> 00:02:02,510
who didn't raise their hand

00:02:00,750 --> 00:02:07,500
so you're just here to troll me then

00:02:02,510 --> 00:02:09,810
okay well I'm happy to tell those first

00:02:07,500 --> 00:02:13,410
two groups anyway that's the answer to

00:02:09,810 --> 00:02:15,210
both of these questions is yes because

00:02:13,410 --> 00:02:17,880
really the more things change the more

00:02:15,210 --> 00:02:19,500
they stay the same it's still Drupal the

00:02:17,880 --> 00:02:23,100
concepts that you're used to in Drupal

00:02:19,500 --> 00:02:26,210
of nodes entities forms fields views

00:02:23,100 --> 00:02:28,710
blocks are all essentially the same the

00:02:26,210 --> 00:02:30,780
architecture under the hood however has

00:02:28,710 --> 00:02:33,600
been heavily modernized and heavily

00:02:30,780 --> 00:02:37,230
refactored to be a lot more approachable

00:02:33,600 --> 00:02:39,180
a lot more consistent a lot more

00:02:37,230 --> 00:02:42,570
familiar to developers coming in from

00:02:39,180 --> 00:02:46,430
outside of Drupal and that really is the

00:02:42,570 --> 00:02:49,470
theme for the redevelopment of Drupal 8

00:02:46,430 --> 00:02:52,590
this is only an hour long talk so I'm

00:02:49,470 --> 00:02:54,540
not going to go into every detail I also

00:02:52,590 --> 00:02:56,220
don't want you to focus on the specific

00:02:54,540 --> 00:02:58,350
API so we're gonna talk about don't

00:02:56,220 --> 00:03:00,630
focus on syntax focus on the broad

00:02:58,350 --> 00:03:02,130
strokes focus on the patterns you'll be

00:03:00,630 --> 00:03:04,790
able to look up syntax later don't worry

00:03:02,130 --> 00:03:07,170
about that I want you to focus on the

00:03:04,790 --> 00:03:09,209
way the system puts together and the way

00:03:07,170 --> 00:03:11,880
Drupal wants you to think about it

00:03:09,209 --> 00:03:14,850
that's really what's gonna help you be

00:03:11,880 --> 00:03:18,150
successful with Drupal 8 so let's start

00:03:14,850 --> 00:03:20,700
with just enough theory this is the way

00:03:18,150 --> 00:03:23,400
a PHP 4 application was built which

00:03:20,700 --> 00:03:26,360
means Drupal 7 and earlier as well as

00:03:23,400 --> 00:03:29,070
pretty much anything built before 2010

00:03:26,360 --> 00:03:30,540
PHP starts up and you've got a whole

00:03:29,070 --> 00:03:35,010
bunch of superglobals that get populated

00:03:30,540 --> 00:03:38,250
by magic and you do something and you're

00:03:35,010 --> 00:03:40,890
something is its jobs to call the header

00:03:38,250 --> 00:03:43,590
function and print and that's how you

00:03:40,890 --> 00:03:44,940
produce your output and you hope you get

00:03:43,590 --> 00:03:46,769
to it in that order because if you don't

00:03:44,940 --> 00:03:48,930
get the order right then bad things

00:03:46,769 --> 00:03:52,890
happen in weird ways and things may

00:03:48,930 --> 00:03:56,400
magically stop working problem this is

00:03:52,890 --> 00:03:58,680
not actually how the web works HTTP

00:03:56,400 --> 00:04:02,670
which is kind of the point of all of our

00:03:58,680 --> 00:04:06,690
jobs is built on this model you have a

00:04:02,670 --> 00:04:08,430
request message that is received your

00:04:06,690 --> 00:04:11,130
server does some kind of black magic and

00:04:08,430 --> 00:04:13,770
a response comes out these are messages

00:04:11,130 --> 00:04:17,040
not variables they are

00:04:13,770 --> 00:04:20,270
a conceptual wrapper around an HTTP

00:04:17,040 --> 00:04:22,860
message which is headers in a body

00:04:20,270 --> 00:04:25,140
fortunately when we started through

00:04:22,860 --> 00:04:27,270
plate we said alright we need to

00:04:25,140 --> 00:04:29,370
modernize this we need to move to this

00:04:27,270 --> 00:04:31,140
proper model is there anything out there

00:04:29,370 --> 00:04:33,300
that's already there so we can save

00:04:31,140 --> 00:04:36,870
ourselves an awful lot of time turns out

00:04:33,300 --> 00:04:39,810
yes it's called Symphony symphonies HTTP

00:04:36,870 --> 00:04:42,030
kernel library which is the heart of any

00:04:39,810 --> 00:04:44,310
simply application is built on

00:04:42,030 --> 00:04:47,060
essentially the same model you have a

00:04:44,310 --> 00:04:50,460
request object object message same deal

00:04:47,060 --> 00:04:52,800
and a response object and this thing

00:04:50,460 --> 00:04:55,230
called an HTTP kernel in the middle

00:04:52,800 --> 00:04:56,760
which is a very simple process that

00:04:55,230 --> 00:04:59,580
takes in a request and returns a

00:04:56,760 --> 00:05:03,240
response which is exactly what HTTP is

00:04:59,580 --> 00:05:07,020
supposed to do in fact that entire

00:05:03,240 --> 00:05:09,570
design can be found this one trivial

00:05:07,020 --> 00:05:12,720
interface this is code straight out of

00:05:09,570 --> 00:05:15,450
symphony and now out of Drupal 8 it's an

00:05:12,720 --> 00:05:16,920
interface HTTP kernel interface which

00:05:15,450 --> 00:05:20,280
has a single method on called handle

00:05:16,920 --> 00:05:23,760
which takes a request so he takes a

00:05:20,280 --> 00:05:26,280
request and returns a response and

00:05:23,760 --> 00:05:28,620
that's it everything else happens inside

00:05:26,280 --> 00:05:32,550
of there almost all of Drupal runs

00:05:28,620 --> 00:05:35,970
inside of that and any other simply

00:05:32,550 --> 00:05:40,440
based application so laravel simply

00:05:35,970 --> 00:05:42,470
itself selects anything in particular

00:05:40,440 --> 00:05:45,810
simply includes a default implementation

00:05:42,470 --> 00:05:49,440
that Drupal 8 is using pretty much

00:05:45,810 --> 00:05:52,470
verbatim and it works like this request

00:05:49,440 --> 00:05:54,030
comes in and it's kind of hard for me to

00:05:52,470 --> 00:05:56,540
see this license angle so please bear

00:05:54,030 --> 00:05:59,360
with the pointer request comes in and

00:05:56,540 --> 00:06:03,090
something called a request event fires

00:05:59,360 --> 00:06:05,040
think hook request alter it's basically

00:06:03,090 --> 00:06:06,990
the same idea just events are more

00:06:05,040 --> 00:06:11,160
generic object oriented equivalent of

00:06:06,990 --> 00:06:13,050
hooks and that can take action based on

00:06:11,160 --> 00:06:15,690
that incoming requests the most

00:06:13,050 --> 00:06:17,640
important of which is routing routing is

00:06:15,690 --> 00:06:19,560
the process of deciding what piece of

00:06:17,640 --> 00:06:21,810
code called a controller is going to

00:06:19,560 --> 00:06:24,780
handle this incoming request what's

00:06:21,810 --> 00:06:27,270
going to be responsible for after that

00:06:24,780 --> 00:06:29,850
there's another events called

00:06:27,270 --> 00:06:32,160
controller events then cook controller

00:06:29,850 --> 00:06:34,440
alter which you will almost never touch

00:06:32,160 --> 00:06:36,569
yourself in actual practice I don't

00:06:34,440 --> 00:06:37,740
think more than a dozen from triples are

00:06:36,569 --> 00:06:41,759
ever gonna need to touch that but it's

00:06:37,740 --> 00:06:44,370
there and then end result there is

00:06:41,759 --> 00:06:46,050
calling a controller which is just some

00:06:44,370 --> 00:06:50,190
piece of code that will deal with that

00:06:46,050 --> 00:06:53,639
request and that controller can return a

00:06:50,190 --> 00:06:56,220
response or something that is not a

00:06:53,639 --> 00:06:58,710
response if it's something that is not a

00:06:56,220 --> 00:07:01,919
response there's a view listener that

00:06:58,710 --> 00:07:04,830
fires which can have any number of

00:07:01,919 --> 00:07:06,509
listeners on it any of which can say

00:07:04,830 --> 00:07:08,970
alright here's this whatever it is the

00:07:06,509 --> 00:07:11,250
controller gave me do I know how to turn

00:07:08,970 --> 00:07:13,889
that into a response that's where page

00:07:11,250 --> 00:07:15,240
theming happens that's where rendering

00:07:13,889 --> 00:07:17,880
blocks to wrap around your content

00:07:15,240 --> 00:07:19,889
happens or any number of other things

00:07:17,880 --> 00:07:22,229
you want it's very flexible you can put

00:07:19,889 --> 00:07:25,409
arbitrary additional logic there if you

00:07:22,229 --> 00:07:27,449
want and then as soon as one listener

00:07:25,409 --> 00:07:28,860
says oh okay I can turn this into a

00:07:27,449 --> 00:07:33,210
response it does so and the rest don't

00:07:28,860 --> 00:07:36,360
fire then there's a response event think

00:07:33,210 --> 00:07:38,460
hook response altar which among other

00:07:36,360 --> 00:07:41,610
things is where caching happens and a

00:07:38,460 --> 00:07:44,849
lot of post rendering cleanup then the

00:07:41,610 --> 00:07:48,240
response gets sent out and there's a

00:07:44,849 --> 00:07:50,729
terminate event think hook exit that is

00:07:48,240 --> 00:07:53,490
the entire pipeline that it that is the

00:07:50,729 --> 00:07:57,930
core of symphony of Drupal of symphony

00:07:53,490 --> 00:07:59,520
cmf of easy publish of about a dozen

00:07:57,930 --> 00:08:01,949
other systems that all work on pretty

00:07:59,520 --> 00:08:03,780
much that exact core pipeline the only

00:08:01,949 --> 00:08:06,900
difference is what we hang off of those

00:08:03,780 --> 00:08:08,130
different events so this is a symphony

00:08:06,900 --> 00:08:11,580
talk by the way you didn't know that

00:08:08,130 --> 00:08:13,860
right alright so let's talk about those

00:08:11,580 --> 00:08:15,900
controllers a bit this might be new word

00:08:13,860 --> 00:08:20,099
for some of the Drupal people in the

00:08:15,900 --> 00:08:22,080
audience think it's page callbacks page

00:08:20,099 --> 00:08:24,650
callbacks in triple7 are what everyone

00:08:22,080 --> 00:08:28,050
else in the world calls a controller and

00:08:24,650 --> 00:08:31,680
technically in symphony and a Drupal 8

00:08:28,050 --> 00:08:34,250
they can be any PHP callable call a bold

00:08:31,680 --> 00:08:36,930
means a function an anonymous function a

00:08:34,250 --> 00:08:39,150
method of an object a static method of a

00:08:36,930 --> 00:08:41,470
class pretty much anything you can put

00:08:39,150 --> 00:08:47,050
parentheses after and have PHP not

00:08:41,470 --> 00:08:49,960
is a callable that's the idea in actual

00:08:47,050 --> 00:08:52,480
practice in Drupal 99.9% of the time

00:08:49,960 --> 00:08:57,310
your controller will be a method of an

00:08:52,480 --> 00:08:59,980
object so controllers can be dead simple

00:08:57,310 --> 00:09:01,600
in this case we've got a class my

00:08:59,980 --> 00:09:05,370
controllers which is a single method

00:09:01,600 --> 00:09:08,110
which returns a response so if this

00:09:05,370 --> 00:09:09,790
controller is what's fires even we

00:09:08,110 --> 00:09:11,520
return the response that is that HTML

00:09:09,790 --> 00:09:14,470
string and you're done

00:09:11,520 --> 00:09:16,120
no other theming happens a theme system

00:09:14,470 --> 00:09:21,010
won't kick in you won't get blocks you

00:09:16,120 --> 00:09:23,620
won't get any sort of filtering that you

00:09:21,010 --> 00:09:26,260
can control the entire output of what

00:09:23,620 --> 00:09:29,980
comes back that way if you want to also

00:09:26,260 --> 00:09:32,640
important to note the method is the

00:09:29,980 --> 00:09:35,230
controller not the class the method

00:09:32,640 --> 00:09:36,610
because you can put multiple methods

00:09:35,230 --> 00:09:40,090
multiple controllers in the same class

00:09:36,610 --> 00:09:42,940
if it makes sense to do so so here we're

00:09:40,090 --> 00:09:45,940
going to return instead of returning a

00:09:42,940 --> 00:09:48,700
response return JSON response which is

00:09:45,940 --> 00:09:51,430
just a subclass of response that takes

00:09:48,700 --> 00:09:53,680
an array as its constructor parameter

00:09:51,430 --> 00:09:56,230
rather than string and renders that into

00:09:53,680 --> 00:09:58,300
jason sets the correct except headers

00:09:56,230 --> 00:10:00,490
are content type headers on the response

00:09:58,300 --> 00:10:03,430
does all that other cleanup you need to

00:10:00,490 --> 00:10:05,920
do to be plain eyes with HTTP and sends

00:10:03,430 --> 00:10:09,040
that you can have any number of

00:10:05,920 --> 00:10:10,660
subclasses of response that have

00:10:09,040 --> 00:10:13,390
whatever additional logic makes sense

00:10:10,660 --> 00:10:15,400
for you that's you know there are some

00:10:13,390 --> 00:10:19,110
standards that you'll be using but you

00:10:15,400 --> 00:10:19,110
can do custom once if you want to

00:10:19,970 --> 00:10:29,559
one of my favorite is streamed response

00:10:24,999 --> 00:10:32,929
so let's say you are writing out here

00:10:29,559 --> 00:10:34,309
producing a CSV file for our request

00:10:32,929 --> 00:10:36,339
request comes in if you're loading a CSV

00:10:34,309 --> 00:10:38,809
file out of something in the database

00:10:36,339 --> 00:10:41,059
you really don't want to build a whole

00:10:38,809 --> 00:10:42,589
CSV file as one gigantic string and then

00:10:41,059 --> 00:10:44,779
pass it around because then you have

00:10:42,589 --> 00:10:48,439
your source data and this entire

00:10:44,779 --> 00:10:50,089
rendered blob of CSV which depending on

00:10:48,439 --> 00:10:52,489
your use case could be a gigabyte in

00:10:50,089 --> 00:10:54,289
size sitting in memory on your web

00:10:52,489 --> 00:10:56,149
server and this is going to pull out

00:10:54,289 --> 00:10:57,979
your memory and your server will crash

00:10:56,149 --> 00:10:59,149
on your system and will hate you and you

00:10:57,979 --> 00:11:03,739
don't want your system in to hate you

00:10:59,149 --> 00:11:07,339
believe me so instead we're gonna create

00:11:03,739 --> 00:11:10,159
this screen response set the header on

00:11:07,339 --> 00:11:13,489
it the content type header for text CSV

00:11:10,159 --> 00:11:15,769
note nice simple logical API for that

00:11:13,489 --> 00:11:16,939
rather than guessing what the PHP global

00:11:15,769 --> 00:11:19,999
is and sending it in the right border

00:11:16,939 --> 00:11:23,269
and then we're gonna set this anonymous

00:11:19,999 --> 00:11:25,999
function as a call back so that when

00:11:23,269 --> 00:11:29,239
that response gets sent only then does

00:11:25,999 --> 00:11:33,459
that code run and that code then can

00:11:29,239 --> 00:11:36,109
produce that CSV one line at a time

00:11:33,459 --> 00:11:37,999
without ever storing the entire string

00:11:36,109 --> 00:11:40,399
in memory that entire CSV string is

00:11:37,999 --> 00:11:43,099
never in memory at once only one line at

00:11:40,399 --> 00:11:46,759
a time which means you can output a

00:11:43,099 --> 00:11:49,369
hundred gigabyte CSV file off without

00:11:46,759 --> 00:11:53,229
blowing past 64 megabytes on your web

00:11:49,369 --> 00:11:55,939
server that's just Drupal itself cool

00:11:53,229 --> 00:11:58,669
there's huge pain to do this in the past

00:11:55,939 --> 00:12:04,309
it's now just a fully supported feature

00:11:58,669 --> 00:12:06,979
of really anything to uses Symphony even

00:12:04,309 --> 00:12:09,199
better usually in that sort of case what

00:12:06,979 --> 00:12:11,179
you're returning is not something

00:12:09,199 --> 00:12:12,829
dynamic but just a file off disk so

00:12:11,179 --> 00:12:14,329
you're doing private files and you want

00:12:12,829 --> 00:12:15,379
to stream a file off disk that has been

00:12:14,329 --> 00:12:18,019
generated or with your actors

00:12:15,379 --> 00:12:21,769
controlling you just use this binary

00:12:18,019 --> 00:12:23,479
file response object and poof that's

00:12:21,769 --> 00:12:25,929
that entire file just get stream great

00:12:23,479 --> 00:12:28,279
off disk in the fastest possible way

00:12:25,929 --> 00:12:31,159
there's about 8 different ways to stream

00:12:28,279 --> 00:12:32,419
files off disk and PHP you don't need to

00:12:31,159 --> 00:12:32,950
worry about which one gets used the

00:12:32,419 --> 00:12:34,600
fastest

00:12:32,950 --> 00:12:36,580
we'll get used if you're on something

00:12:34,600 --> 00:12:39,010
like nginx it has an even faster option

00:12:36,580 --> 00:12:42,430
that just bypasses PHP entirely that can

00:12:39,010 --> 00:12:44,260
get used the reason I love this one is

00:12:42,430 --> 00:12:46,450
Drupal developers actually wrote this

00:12:44,260 --> 00:12:47,800
feature of Symphony after we started

00:12:46,450 --> 00:12:51,700
using simply we started contributing

00:12:47,800 --> 00:12:53,800
back upstream and this is one of the

00:12:51,700 --> 00:12:55,810
things we did because we needed this

00:12:53,800 --> 00:12:58,000
there's nothing Drupal specific about it

00:12:55,810 --> 00:13:02,110
so let's share it with the wider PHP

00:12:58,000 --> 00:13:04,630
community so far we have not talked

00:13:02,110 --> 00:13:06,790
about Drupal at all this is all symphony

00:13:04,630 --> 00:13:09,430
this is all something that's common

00:13:06,790 --> 00:13:13,630
across three dozen projects in the PHP

00:13:09,430 --> 00:13:15,550
space in actual practice in Drupal most

00:13:13,630 --> 00:13:18,180
of the time you will be returning a

00:13:15,550 --> 00:13:22,140
render array rather than a response

00:13:18,180 --> 00:13:24,730
render arrays do still exist I apologize

00:13:22,140 --> 00:13:30,070
but they are better they actually kind

00:13:24,730 --> 00:13:32,140
of work now and I recommend the way of

00:13:30,070 --> 00:13:34,180
doing that you'd still have found theme

00:13:32,140 --> 00:13:36,460
which is you know some theme callable

00:13:34,180 --> 00:13:37,960
you have same team callback and wherever

00:13:36,460 --> 00:13:41,860
your properties are for that I don't see

00:13:37,960 --> 00:13:45,040
the a bit more that's in a moment you

00:13:41,860 --> 00:13:46,780
can also take parameters from the URL so

00:13:45,040 --> 00:13:48,760
if we have a request that goes to hello

00:13:46,780 --> 00:13:52,510
world and then we've got placeholders

00:13:48,760 --> 00:13:56,380
for from and to then we can just have as

00:13:52,510 --> 00:13:59,830
parameters to the the method to the

00:13:56,380 --> 00:14:02,910
controller from and to and whatever gets

00:13:59,830 --> 00:14:07,060
passed in to those parameters in the URL

00:14:02,910 --> 00:14:09,160
gets passed into our controller from and

00:14:07,060 --> 00:14:11,740
to or backwards that set seem right to

00:14:09,160 --> 00:14:14,650
anyone doesn't matter

00:14:11,740 --> 00:14:16,240
it's matched up by name not position you

00:14:14,650 --> 00:14:18,190
can reorder those however you want it's

00:14:16,240 --> 00:14:19,480
not going to break it that's just

00:14:18,190 --> 00:14:23,320
figured out on the fly with reflection

00:14:19,480 --> 00:14:26,050
you can also get the entire request

00:14:23,320 --> 00:14:28,780
object if we want rarely do we need to

00:14:26,050 --> 00:14:30,190
do so but if you want it just specify it

00:14:28,780 --> 00:14:31,810
and that will get passed you as well

00:14:30,190 --> 00:14:33,850
really the only time you would need to

00:14:31,810 --> 00:14:36,130
access that is if you're doing something

00:14:33,850 --> 00:14:37,990
with get parameters which is not

00:14:36,130 --> 00:14:39,880
actually that common of a task other

00:14:37,990 --> 00:14:42,100
than that you can just use their

00:14:39,880 --> 00:14:44,520
parameters themselves and then you can

00:14:42,100 --> 00:14:48,000
wire that up in the routing system

00:14:44,520 --> 00:14:50,790
which we'll cover again in a moment but

00:14:48,000 --> 00:14:54,060
saying here's our path and then here's

00:14:50,790 --> 00:14:56,730
the underscore controller which is just

00:14:54,060 --> 00:15:00,540
that class that we specified before and

00:14:56,730 --> 00:15:02,850
the method and then the requirements for

00:15:00,540 --> 00:15:05,850
it so in this case you need to

00:15:02,850 --> 00:15:08,160
permission access content and we can

00:15:05,850 --> 00:15:10,860
also apply regular expressions to those

00:15:08,160 --> 00:15:15,090
parameters so we can say only match this

00:15:10,860 --> 00:15:18,120
route if this value is a string only if

00:15:15,090 --> 00:15:19,620
it's a digit only if it is one of these

00:15:18,120 --> 00:15:23,160
three strings that I'm going to specify

00:15:19,620 --> 00:15:26,220
and that's just baked in automatically

00:15:23,160 --> 00:15:27,420
be inherited that from symphony alright

00:15:26,220 --> 00:15:29,130
you're thinking Larry

00:15:27,420 --> 00:15:31,170
shut up and a theory I want to actually

00:15:29,130 --> 00:15:37,110
see something Drupal e-enough symphony

00:15:31,170 --> 00:15:38,340
so when you do Liam Drupal 8 pretty much

00:15:37,110 --> 00:15:42,540
everything you do is gonna break down to

00:15:38,340 --> 00:15:45,360
two steps build a tool wire it out you

00:15:42,540 --> 00:15:46,980
do not actually solve your problem you

00:15:45,360 --> 00:15:48,840
build a tool that you can use to solve

00:15:46,980 --> 00:15:49,230
your problem and then wire it into the

00:15:48,840 --> 00:15:51,450
system

00:15:49,230 --> 00:15:54,030
you don't write one-off code you build a

00:15:51,450 --> 00:15:56,190
tool and add it into Drupal that is the

00:15:54,030 --> 00:15:58,800
way you want to work with Drupal put

00:15:56,190 --> 00:16:01,200
another way you extend a base class or

00:15:58,800 --> 00:16:04,500
to implement an interface and you tell

00:16:01,200 --> 00:16:06,830
Drupal about it that is almost

00:16:04,500 --> 00:16:09,060
everything you do in Drupal 8 is

00:16:06,830 --> 00:16:11,310
implement an interface usually by

00:16:09,060 --> 00:16:13,950
extending a base class and tells you all

00:16:11,310 --> 00:16:16,890
about it so let's see some examples of

00:16:13,950 --> 00:16:23,160
that how do we define a module in the

00:16:16,890 --> 00:16:26,930
first place well we need a file to tell

00:16:23,160 --> 00:16:30,240
Drupal about it it's going to be in the

00:16:26,930 --> 00:16:32,070
hugs module and notice reporting this in

00:16:30,240 --> 00:16:33,690
the global modules directory if you put

00:16:32,070 --> 00:16:35,970
a module into the global top level

00:16:33,690 --> 00:16:39,360
module its directory on triple7 what

00:16:35,970 --> 00:16:40,820
happens someone slaps you because you're

00:16:39,360 --> 00:16:43,320
not supposed to do that

00:16:40,820 --> 00:16:43,670
in triple-eight you're supposed to do

00:16:43,320 --> 00:16:46,170
that

00:16:43,670 --> 00:16:48,480
because all of the built-in modules have

00:16:46,170 --> 00:16:50,340
moved to a subdirectory in slash core

00:16:48,480 --> 00:16:52,380
slash modules to get them out of the way

00:16:50,340 --> 00:16:53,970
so the top-level modules and themes

00:16:52,380 --> 00:16:57,290
directory are where you supposed to put

00:16:53,970 --> 00:17:00,720
stuff now just to confuse you

00:16:57,290 --> 00:17:03,119
but we have this llamo file which

00:17:00,720 --> 00:17:04,649
replaces the old info file so we got rid

00:17:03,119 --> 00:17:06,899
of that custom syntax that existed

00:17:04,649 --> 00:17:08,640
nowhere except in Drupal and replace it

00:17:06,899 --> 00:17:11,490
with a standard llamo the properties are

00:17:08,640 --> 00:17:14,069
all pretty much identical so our module

00:17:11,490 --> 00:17:16,169
is named hugs here's our description we

00:17:14,069 --> 00:17:17,819
say that it's a type of module and it's

00:17:16,169 --> 00:17:21,029
compatible with core version version 8

00:17:17,819 --> 00:17:23,240
and we're done go into the modules page

00:17:21,029 --> 00:17:26,279
our modules they are ready to enable

00:17:23,240 --> 00:17:29,399
what's missing here a dot module file

00:17:26,279 --> 00:17:33,870
which is now optional it only took us 15

00:17:29,399 --> 00:17:35,730
years so if you have no code for your

00:17:33,870 --> 00:17:41,070
dot module file you can leave it out

00:17:35,730 --> 00:17:43,289
cool all right now we've got our module

00:17:41,070 --> 00:17:45,840
how do we make a page let's just put a

00:17:43,289 --> 00:17:48,450
page somewhere on our site well what's

00:17:45,840 --> 00:17:52,110
our pattern extend a base class tell

00:17:48,450 --> 00:17:54,809
duplet it here's our controller we're

00:17:52,110 --> 00:17:59,039
going to extend from this controller

00:17:54,809 --> 00:18:01,649
base class which is optional but you'll

00:17:59,039 --> 00:18:03,510
do that 99% of the time which has a

00:18:01,649 --> 00:18:08,039
bunch of useful utility methods in it

00:18:03,510 --> 00:18:11,850
such as this T same idea as the T

00:18:08,039 --> 00:18:12,899
function but this is a class so you

00:18:11,850 --> 00:18:13,860
don't want to be calling functions

00:18:12,899 --> 00:18:16,769
directly because that makes it

00:18:13,860 --> 00:18:19,080
untestable so instead that base class

00:18:16,769 --> 00:18:23,130
has T method on it works exactly like

00:18:19,080 --> 00:18:25,679
the T function you're used to so in this

00:18:23,130 --> 00:18:28,950
case you've got two parameters we're

00:18:25,679 --> 00:18:30,779
taking in from in to and we're just

00:18:28,950 --> 00:18:32,700
gonna put those into that's T string

00:18:30,779 --> 00:18:35,850
they'll get escaped automatically by T

00:18:32,700 --> 00:18:38,370
and then we return a render array that

00:18:35,850 --> 00:18:40,860
is just that string as markup normally

00:18:38,370 --> 00:18:42,510
you don't want to do a hash mark up but

00:18:40,860 --> 00:18:46,559
we'll see the better person in a moment

00:18:42,510 --> 00:18:50,940
and now we tell Drupal about it we have

00:18:46,559 --> 00:18:54,990
a hugs routing llamo file which replaces

00:18:50,940 --> 00:18:57,990
hook menu we have our route which has a

00:18:54,990 --> 00:19:01,340
name all routes now have names module

00:18:57,990 --> 00:19:05,690
name dot something meaningful our path

00:19:01,340 --> 00:19:08,090
which is slash hug slash from two

00:19:05,690 --> 00:19:11,810
our controller which is that class and

00:19:08,090 --> 00:19:14,240
method we just defined and I'm just

00:19:11,810 --> 00:19:15,500
court idle is the title the page if it's

00:19:14,240 --> 00:19:20,630
a static and you need to have access

00:19:15,500 --> 00:19:22,850
content and Drupal will see this wired

00:19:20,630 --> 00:19:25,520
up request comes in matches to this

00:19:22,850 --> 00:19:28,760
route it will instantiate that hugs

00:19:25,520 --> 00:19:32,810
controller class and then call the hug

00:19:28,760 --> 00:19:37,190
method of that object and there's our

00:19:32,810 --> 00:19:39,620
output heart Larry - pecan Larry sends

00:19:37,190 --> 00:19:41,900
hugs to to flick on because who doesn't

00:19:39,620 --> 00:19:43,790
want a hug - pecan right if you haven't

00:19:41,900 --> 00:19:48,230
talked to pecan yet you'll have time to

00:19:43,790 --> 00:19:50,690
do so at the conference easy peasy so

00:19:48,230 --> 00:19:52,070
let's make a theme of all because you

00:19:50,690 --> 00:19:56,870
want to make your content female also

00:19:52,070 --> 00:19:58,700
that Morton is not angry at you right so

00:19:56,870 --> 00:20:01,760
let's go ahead and create our dot module

00:19:58,700 --> 00:20:05,240
file we do still have hooks they're just

00:20:01,760 --> 00:20:07,130
less used than they were in the past but

00:20:05,240 --> 00:20:10,970
hook theme works more or less the same

00:20:07,130 --> 00:20:14,450
way so we're gonna define a hug page

00:20:10,970 --> 00:20:18,920
theme key which is going to take two

00:20:14,450 --> 00:20:23,870
properties from and to and template

00:20:18,920 --> 00:20:26,300
forward is gonna be hug page and then we

00:20:23,870 --> 00:20:28,130
create a template file because Drupal 8

00:20:26,300 --> 00:20:30,770
now uses twig because we decided that

00:20:28,130 --> 00:20:32,300
custom rolling our own turing-complete

00:20:30,770 --> 00:20:37,000
template engine was not actually a good

00:20:32,300 --> 00:20:42,260
idea and put our display logic there

00:20:37,000 --> 00:20:45,650
please note this trans directive that's

00:20:42,260 --> 00:20:48,200
trans directive says whatever is inside

00:20:45,650 --> 00:20:51,650
these two tags is a translatable string

00:20:48,200 --> 00:20:54,800
it works exactly like the tee function

00:20:51,650 --> 00:20:56,690
or the team method and then double curly

00:20:54,800 --> 00:21:01,610
braces are on the values we want to

00:20:56,690 --> 00:21:04,010
place there this puts all of the

00:21:01,610 --> 00:21:06,560
presentation logic including the text to

00:21:04,010 --> 00:21:10,250
display in the template in a

00:21:06,560 --> 00:21:13,760
translatable fashion I cannot overstate

00:21:10,250 --> 00:21:16,190
how important this is what a big

00:21:13,760 --> 00:21:18,809
difference this makes display logic

00:21:16,190 --> 00:21:24,450
belongs at the display layer in the

00:21:18,809 --> 00:21:27,769
plate you'll see almost no display logic

00:21:24,450 --> 00:21:30,539
in controllers here that's a good thing

00:21:27,769 --> 00:21:34,679
from much more to making that go see

00:21:30,539 --> 00:21:38,840
Morton session this morning took you

00:21:34,679 --> 00:21:42,269
moment the video is up already I'm sure

00:21:38,840 --> 00:21:46,110
then we modify our controller which is

00:21:42,269 --> 00:21:48,179
going to take from and to and all its

00:21:46,110 --> 00:21:49,919
gonna do is return a render array that

00:21:48,179 --> 00:21:53,429
specifies we're going to use that hug

00:21:49,919 --> 00:21:55,759
page FEMA Bowl we just defined and the

00:21:53,429 --> 00:21:58,019
parameters to it are from and to and

00:21:55,759 --> 00:21:59,970
then the template takes care of

00:21:58,019 --> 00:22:01,200
everything else you want to change the

00:21:59,970 --> 00:22:02,549
mark-up you want to change the structure

00:22:01,200 --> 00:22:04,289
you want to decide you don't even want

00:22:02,549 --> 00:22:07,110
to a translatable string in there that's

00:22:04,289 --> 00:22:11,730
all the templates job not your job as a

00:22:07,110 --> 00:22:14,820
mouthful developer as it should be and

00:22:11,730 --> 00:22:17,759
now we get a slightly formatted you can

00:22:14,820 --> 00:22:19,590
see that with strong and iam tags output

00:22:17,759 --> 00:22:20,999
you don't want strong a TN tags fine

00:22:19,590 --> 00:22:27,590
changing the template that's where it

00:22:20,999 --> 00:22:30,059
belongs how do I make a config form

00:22:27,590 --> 00:22:32,190
Drupal's thing is all you know

00:22:30,059 --> 00:22:34,559
configuration it's kind of our reason

00:22:32,190 --> 00:22:36,590
for existing so this has changed quite a

00:22:34,559 --> 00:22:38,909
bit

00:22:36,590 --> 00:22:43,470
what was the configuration system

00:22:38,909 --> 00:22:43,950
available in Drupal 7 anyone no trick

00:22:43,470 --> 00:22:47,429
question

00:22:43,950 --> 00:22:50,100
there wasn't one we had the variable

00:22:47,429 --> 00:22:51,889
system but really that that did not cut

00:22:50,100 --> 00:22:54,029
it as a configuration system really

00:22:51,889 --> 00:22:56,129
which man everyone rolled their own

00:22:54,029 --> 00:23:00,029
Drupal sevens configuration system was

00:22:56,129 --> 00:23:03,419
here's a database have fun yet no no no

00:23:00,029 --> 00:23:06,869
that does not cut it anymore so we have

00:23:03,419 --> 00:23:11,549
a new completely rewritten configuration

00:23:06,869 --> 00:23:15,480
system that eliminates the need for most

00:23:11,549 --> 00:23:16,649
of features so let's start off and our

00:23:15,480 --> 00:23:19,049
module are going to have a config

00:23:16,649 --> 00:23:22,070
directory side of which is install and

00:23:19,049 --> 00:23:25,669
then a hug that's setting that yamo file

00:23:22,070 --> 00:23:29,250
configuration in Drupal 8 is

00:23:25,669 --> 00:23:30,980
configuration objects that map one two

00:23:29,250 --> 00:23:33,560
one two yellow files

00:23:30,980 --> 00:23:35,180
they're stored in the database in

00:23:33,560 --> 00:23:39,530
production and read out of there in a

00:23:35,180 --> 00:23:42,140
key-value store fashion but can then be

00:23:39,530 --> 00:23:44,360
trivially dumped out to disk as llamó

00:23:42,140 --> 00:23:46,250
files are imported so the features you

00:23:44,360 --> 00:23:48,200
know export import is automatically

00:23:46,250 --> 00:23:51,410
there for every module for everything

00:23:48,200 --> 00:23:53,450
without any shenanigans about callback

00:23:51,410 --> 00:23:57,530
hooks and three layers of nonsense and

00:23:53,450 --> 00:23:59,270
yeah so that's just baked in and this

00:23:57,530 --> 00:24:00,620
can be this config object can have any

00:23:59,270 --> 00:24:02,090
number of properties on it I'm just

00:24:00,620 --> 00:24:05,780
gonna have one at this point

00:24:02,090 --> 00:24:08,720
default count and we also need to have a

00:24:05,780 --> 00:24:10,700
schema file for it which defines what

00:24:08,720 --> 00:24:14,630
the properties are in that config file

00:24:10,700 --> 00:24:17,630
and most importantly which ones are

00:24:14,630 --> 00:24:19,970
translatable strings if you have a

00:24:17,630 --> 00:24:22,340
config setting which is a user supplied

00:24:19,970 --> 00:24:24,560
string you should mark it as such in

00:24:22,340 --> 00:24:26,140
schema which means the translation

00:24:24,560 --> 00:24:29,120
system can pick it up and make it

00:24:26,140 --> 00:24:32,390
translatable configuration is

00:24:29,120 --> 00:24:35,180
translatable for every property baked in

00:24:32,390 --> 00:24:39,140
from the get-go for the first time at

00:24:35,180 --> 00:24:42,140
Drupal history and then we've got our

00:24:39,140 --> 00:24:43,570
config form oh my god Wallace code it's

00:24:42,140 --> 00:24:45,580
not that bad really

00:24:43,570 --> 00:24:49,880
remember he said extend the base class

00:24:45,580 --> 00:24:53,210
we're going to extend its config form

00:24:49,880 --> 00:24:55,310
base so there's a form base class for

00:24:53,210 --> 00:24:57,260
most forms and a config form base you

00:24:55,310 --> 00:24:59,570
can extend off of this is the equivalent

00:24:57,260 --> 00:25:02,210
of the system settings form function

00:24:59,570 --> 00:25:04,970
from Drupal 7 we're going to give our

00:25:02,210 --> 00:25:09,110
form an explicit ID in this case it's

00:25:04,970 --> 00:25:11,960
hug config and we're gonna specify what

00:25:09,110 --> 00:25:13,970
property which config objects we're

00:25:11,960 --> 00:25:16,190
actually going to be editing in this

00:25:13,970 --> 00:25:20,270
config file or in this config form and

00:25:16,190 --> 00:25:22,820
that's the hugs that setting object we

00:25:20,270 --> 00:25:24,530
created before why do we display that

00:25:22,820 --> 00:25:27,140
well when you load a config object

00:25:24,530 --> 00:25:29,480
there's actually other actions that can

00:25:27,140 --> 00:25:31,910
run it's a dynamically customize the

00:25:29,480 --> 00:25:34,070
configuration which if you're editing it

00:25:31,910 --> 00:25:36,950
you don't want to do so this skips that

00:25:34,070 --> 00:25:41,300
part then we have a build form method

00:25:36,950 --> 00:25:43,490
which takes a form array and form States

00:25:41,300 --> 00:25:46,340
form stage is now an object

00:25:43,490 --> 00:25:46,760
yay forms are still a big anonymous

00:25:46,340 --> 00:25:48,500
array

00:25:46,760 --> 00:25:52,040
I think the form API itself is

00:25:48,500 --> 00:25:55,990
essentially the same so we're gonna grab

00:25:52,040 --> 00:25:55,990
our config object this config and then

00:25:56,140 --> 00:26:01,550
just create our form elements here as

00:25:59,900 --> 00:26:03,530
little or as many as you have same as in

00:26:01,550 --> 00:26:06,860
Drupal 7 one thing to note here we are

00:26:03,530 --> 00:26:08,990
using a number by guts right we do now

00:26:06,860 --> 00:26:16,300
support all the HTML 5 fancy form

00:26:08,990 --> 00:26:18,710
elements so number one number telephone

00:26:16,300 --> 00:26:22,970
various others are well supported now

00:26:18,710 --> 00:26:26,300
and again note this arrow T instead of

00:26:22,970 --> 00:26:29,270
using the T function you'll never use

00:26:26,300 --> 00:26:30,679
the T function outside of procedural

00:26:29,270 --> 00:26:34,610
code which you should almost never write

00:26:30,679 --> 00:26:36,200
and then we can just return the parents

00:26:34,610 --> 00:26:38,860
implementation of build form that will

00:26:36,200 --> 00:26:42,800
add all the buttons for us and so on

00:26:38,860 --> 00:26:44,590
then there's a submit form method also a

00:26:42,800 --> 00:26:47,270
validate form if you want to validate

00:26:44,590 --> 00:26:48,710
same ideas that callback functions

00:26:47,270 --> 00:26:53,059
before they're just now wrapped up into

00:26:48,710 --> 00:26:56,450
a class in which you called a parent and

00:26:53,059 --> 00:26:57,230
then we take our config object set the

00:26:56,450 --> 00:26:59,720
values on it

00:26:57,230 --> 00:27:02,300
that's the user saved now you should

00:26:59,720 --> 00:27:06,850
provide it and call safe and that's then

00:27:02,300 --> 00:27:06,850
pushed into the config system

00:27:11,970 --> 00:27:16,390
now we tell Drupal about it we're gonna

00:27:14,680 --> 00:27:18,340
wire that form up directly to a route

00:27:16,390 --> 00:27:21,400
we're gonna create a route called hug

00:27:18,340 --> 00:27:24,370
config hug config we're gonna give it a

00:27:21,400 --> 00:27:27,610
path in a band config system hugs just

00:27:24,370 --> 00:27:29,440
same instructors before I'm gonna give

00:27:27,610 --> 00:27:31,030
it a title but this time instead of

00:27:29,440 --> 00:27:33,550
giving it a controller we're gonna

00:27:31,030 --> 00:27:37,090
specify underscore form and just give it

00:27:33,550 --> 00:27:40,330
to class name which means this form that

00:27:37,090 --> 00:27:43,990
I've defined stick it at this URL and

00:27:40,330 --> 00:27:46,120
Drupal will wrap the controller logic

00:27:43,990 --> 00:27:48,640
around it as needed and that form then

00:27:46,120 --> 00:27:50,710
shows up at that URL and you need to

00:27:48,640 --> 00:27:51,550
configure hugs permission in order to

00:27:50,710 --> 00:27:55,120
access it

00:27:51,550 --> 00:27:56,350
oh yeah permissions they always haven't

00:27:55,120 --> 00:27:58,900
really changed except that they're now a

00:27:56,350 --> 00:28:02,470
llamó file you'll notice a pattern

00:27:58,900 --> 00:28:05,020
emerging here commission configure hugs

00:28:02,470 --> 00:28:10,360
give it a title and a description just

00:28:05,020 --> 00:28:13,120
like before and then we need to add an

00:28:10,360 --> 00:28:14,890
item to the menu which is another Yama

00:28:13,120 --> 00:28:17,230
file why do we have so many different

00:28:14,890 --> 00:28:19,060
Yama files for this well in Drupal 7

00:28:17,230 --> 00:28:23,620
hook menu did about nine different

00:28:19,060 --> 00:28:25,720
things implicitly with pre-baked logic

00:28:23,620 --> 00:28:27,310
that only sometimes made sense and was a

00:28:25,720 --> 00:28:29,500
huge pain to try and work around if it

00:28:27,310 --> 00:28:31,420
didn't and having one system that does

00:28:29,500 --> 00:28:32,740
nine different things is announce that

00:28:31,420 --> 00:28:35,560
the terrible idea because it makes

00:28:32,740 --> 00:28:36,640
maintaining it impossible so in Drupal 8

00:28:35,560 --> 00:28:38,350
we've pulled all of those

00:28:36,640 --> 00:28:40,780
responsibilities out two separate

00:28:38,350 --> 00:28:42,730
systems and separate configuration so

00:28:40,780 --> 00:28:45,490
that you have the ability to put thing

00:28:42,730 --> 00:28:47,350
it to configure that more more to your

00:28:45,490 --> 00:28:48,700
liking so we took away a lot of

00:28:47,350 --> 00:28:50,650
automation so that you have the

00:28:48,700 --> 00:28:54,700
flexibility and it's just the ammo files

00:28:50,650 --> 00:28:58,050
really so we have a link to the menu

00:28:54,700 --> 00:29:00,640
system it gets a machine name now to

00:28:58,050 --> 00:29:02,530
give it a title description the name of

00:29:00,640 --> 00:29:06,460
the route that it's going to link to

00:29:02,530 --> 00:29:08,710
which is this route and the parent menu

00:29:06,460 --> 00:29:10,900
item so the parentage is not automatic

00:29:08,710 --> 00:29:12,810
but which means you can put an item as a

00:29:10,900 --> 00:29:16,330
parent of anywhere in the menu structure

00:29:12,810 --> 00:29:19,780
we do that and now we have our hogs

00:29:16,330 --> 00:29:21,820
configuration showing up in the admin

00:29:19,780 --> 00:29:24,380
form there in the admin menu

00:29:21,820 --> 00:29:26,180
and it looks like that there's our

00:29:24,380 --> 00:29:29,750
number fields can fill in a value hit

00:29:26,180 --> 00:29:31,100
save it is in an html5 number fields so

00:29:29,750 --> 00:29:34,070
if you're on a web browser that supports

00:29:31,100 --> 00:29:35,540
html5 properly the browser will lock it

00:29:34,070 --> 00:29:37,790
down to just digits and not even let you

00:29:35,540 --> 00:29:39,470
type in letters and that will also

00:29:37,790 --> 00:29:41,300
automatically get validated on the

00:29:39,470 --> 00:29:43,130
server-side and if you're on a browser

00:29:41,300 --> 00:29:44,600
that doesn't like Firefox which for some

00:29:43,130 --> 00:29:47,030
reason still doesn't support the number

00:29:44,600 --> 00:29:48,980
field I don't know why okay it just

00:29:47,030 --> 00:29:52,970
falls back to a text field all that

00:29:48,980 --> 00:29:55,060
html5 form goodness is just baked in so

00:29:52,970 --> 00:29:58,340
now we've got this configured value

00:29:55,060 --> 00:30:00,440
let's modify our controller again we're

00:29:58,340 --> 00:30:05,780
going to give it another parameter count

00:30:00,440 --> 00:30:08,450
and then say if the countess is a false

00:30:05,780 --> 00:30:11,390
value we'll grab that default we're

00:30:08,450 --> 00:30:12,530
going to go grab this config it's

00:30:11,390 --> 00:30:17,450
another one of those methods on the base

00:30:12,530 --> 00:30:18,980
class and then get that config object

00:30:17,450 --> 00:30:22,010
and get the default couch

00:30:18,980 --> 00:30:24,230
property off of it and just provide that

00:30:22,010 --> 00:30:28,670
as a default and then pass that count

00:30:24,230 --> 00:30:30,470
value on to the template we modify our

00:30:28,670 --> 00:30:33,920
route just give it an extra parameter

00:30:30,470 --> 00:30:37,400
and we're also going to give it a

00:30:33,920 --> 00:30:41,600
default value for count of 0 so if it's

00:30:37,400 --> 00:30:42,620
not provided count gets a value of 0 if

00:30:41,600 --> 00:30:45,410
it is provided that's whatever these

00:30:42,620 --> 00:30:47,720
your supplies which means we always know

00:30:45,410 --> 00:30:50,080
we will get a value there some kind by

00:30:47,720 --> 00:30:51,980
the time it gets to the controller and

00:30:50,080 --> 00:30:54,770
we know it's going to be an integer

00:30:51,980 --> 00:30:56,120
because we only allow digits we're going

00:30:54,770 --> 00:30:58,850
to apply a regular expression to say

00:30:56,120 --> 00:31:03,050
digits only so if you put in slash hugs

00:30:58,850 --> 00:31:03,920
slash Larry slash DrupalCon /foo that

00:31:03,050 --> 00:31:05,300
won't even match

00:31:03,920 --> 00:31:07,250
there will be no controller you'll get a

00:31:05,300 --> 00:31:11,900
404 as you should because there's

00:31:07,250 --> 00:31:13,010
nothing there for it update our theme

00:31:11,900 --> 00:31:15,860
hooked it again give it an extra

00:31:13,010 --> 00:31:18,680
parameter and update the template say

00:31:15,860 --> 00:31:21,200
alright this translatable string varies

00:31:18,680 --> 00:31:24,200
depending on whether count is singular

00:31:21,200 --> 00:31:27,950
or plural so we can say if it's singular

00:31:24,200 --> 00:31:30,400
hugs one time if it's plural hugs times

00:31:27,950 --> 00:31:32,809
with an S

00:31:30,400 --> 00:31:37,340
again that logic belongs in the template

00:31:32,809 --> 00:31:39,440
and now if we don't specify a count we

00:31:37,340 --> 00:31:45,170
get our default of three so it says hugs

00:31:39,440 --> 00:31:48,410
three times and if we do specify one one

00:31:45,170 --> 00:31:50,240
time again all of that display logic in

00:31:48,410 --> 00:31:52,010
the template where it belongs this is

00:31:50,240 --> 00:31:58,340
where Morten you know make it is happy

00:31:52,010 --> 00:32:02,179
with you everyone still with me all

00:31:58,340 --> 00:32:05,000
right blocks who's worked with blocks in

00:32:02,179 --> 00:32:11,920
Drupal seven who thought that was an

00:32:05,000 --> 00:32:15,559
easy to use API one hand yeah

00:32:11,920 --> 00:32:18,230
so let's back up a bit to find a few new

00:32:15,559 --> 00:32:22,429
terms we have this thing called a plugin

00:32:18,230 --> 00:32:24,559
a plugin in drupal speak is a swappable

00:32:22,429 --> 00:32:29,380
unit user defined piece of functionality

00:32:24,559 --> 00:32:32,960
a plug-in type is a category of

00:32:29,380 --> 00:32:34,280
interchangeable plugins discovery is the

00:32:32,960 --> 00:32:38,179
process of finding all of those plugins

00:32:34,280 --> 00:32:41,270
of that type put another way think

00:32:38,179 --> 00:32:43,630
plug-in type is an interface a plugin is

00:32:41,270 --> 00:32:46,700
any class that implements that interface

00:32:43,630 --> 00:32:48,770
discovery is find all instance of it

00:32:46,700 --> 00:32:50,000
doesn't actually use that as the pelagic

00:32:48,770 --> 00:32:52,940
but that's the idea

00:32:50,000 --> 00:32:56,510
it's just cataloging all of the plugins

00:32:52,940 --> 00:32:59,120
have given tight really it's just

00:32:56,510 --> 00:33:02,260
standard oo practices wired up in a way

00:32:59,120 --> 00:33:06,170
that you can access it from the UI

00:33:02,260 --> 00:33:10,550
Drupal 7 how did what was our extension

00:33:06,170 --> 00:33:13,450
mechanism in seven hooks info hooks this

00:33:10,550 --> 00:33:15,860
is all you get info hooks for everything

00:33:13,450 --> 00:33:18,350
except that not everything you work use

00:33:15,860 --> 00:33:20,980
them the same way some things use magic

00:33:18,350 --> 00:33:24,890
callbacks some use fully named functions

00:33:20,980 --> 00:33:27,620
some things did wire objects into it or

00:33:24,890 --> 00:33:30,679
did about eight different things it made

00:33:27,620 --> 00:33:32,690
no sense at all you're in the contribs

00:33:30,679 --> 00:33:34,970
base you could use c tools plugins which

00:33:32,690 --> 00:33:36,380
were great aside from fact they were

00:33:34,970 --> 00:33:38,030
written for PHP four which means they're

00:33:36,380 --> 00:33:40,790
trying to re-implement object-oriented

00:33:38,030 --> 00:33:43,450
techniques without using classes because

00:33:40,790 --> 00:33:43,450
that's a great idea

00:33:43,540 --> 00:33:49,940
so you know extensibility and Drupal 7

00:33:46,220 --> 00:33:51,110
is actually very haphazard accessibility

00:33:49,940 --> 00:33:53,030
is kind of important for Drupal but in

00:33:51,110 --> 00:33:55,549
seven it was a very haphazard

00:33:53,030 --> 00:33:59,780
inconsistent mess there's nothing

00:33:55,549 --> 00:34:01,309
actually in common in Drupal 8 if you

00:33:59,780 --> 00:34:03,260
want to have something where users can

00:34:01,309 --> 00:34:03,770
pick between a series of configured

00:34:03,260 --> 00:34:07,610
options

00:34:03,770 --> 00:34:10,639
your answer is plugins always what those

00:34:07,610 --> 00:34:11,869
plugins can be your own type they'll

00:34:10,639 --> 00:34:14,690
follow the same pattern as all of the

00:34:11,869 --> 00:34:16,669
others but it's a very consistent

00:34:14,690 --> 00:34:18,590
pattern for users you define an

00:34:16,669 --> 00:34:20,570
interface for your plugin type you

00:34:18,590 --> 00:34:22,490
create a manager class and you're pretty

00:34:20,570 --> 00:34:23,810
much done if you want standard behavior

00:34:22,490 --> 00:34:26,419
there's even a classic and a sub class

00:34:23,810 --> 00:34:28,730
off of this idea of learned once apply

00:34:26,419 --> 00:34:31,129
everywhere I love this line it's off

00:34:28,730 --> 00:34:34,750
from Lee Rowland's one of the lead core

00:34:31,129 --> 00:34:38,840
developers what is a plug-in in Drupal 8

00:34:34,750 --> 00:34:41,240
all of these are plugins all of these

00:34:38,840 --> 00:34:44,540
now use the same architecture all of

00:34:41,240 --> 00:34:46,480
these use a consistent way of allowing

00:34:44,540 --> 00:34:50,060
modules to provide new implementations

00:34:46,480 --> 00:34:52,730
so once you learn the pattern for text

00:34:50,060 --> 00:34:54,619
formats and field widgets you can write

00:34:52,730 --> 00:34:58,369
entity reference selectors or migration

00:34:54,619 --> 00:35:01,010
or backends to the Search API or image

00:34:58,369 --> 00:35:02,750
toolkits or male backends all of them

00:35:01,010 --> 00:35:05,150
using the same pattern it's just a

00:35:02,750 --> 00:35:07,280
different interface for each one but hey

00:35:05,150 --> 00:35:09,470
PHP implement interfaces are fairly

00:35:07,280 --> 00:35:14,150
self-documenting which you can't say for

00:35:09,470 --> 00:35:16,910
a race can you so if you've worked with

00:35:14,150 --> 00:35:19,580
views at any point that's probably the

00:35:16,910 --> 00:35:21,859
closest Drupal 7 equivalent where you

00:35:19,580 --> 00:35:24,050
have a class you extend something and

00:35:21,859 --> 00:35:25,460
the system picks it up and you're good

00:35:24,050 --> 00:35:32,930
to go and then you can wire them into

00:35:25,460 --> 00:35:35,600
the UI and blocks are now a plugin so

00:35:32,930 --> 00:35:36,980
this is a fairly basic block we're gonna

00:35:35,600 --> 00:35:40,960
create a block that shows the status of

00:35:36,980 --> 00:35:43,790
hugs on the site so we have a class

00:35:40,960 --> 00:35:46,220
called hug status it extends a base

00:35:43,790 --> 00:35:48,530
class and it has this weird blob of

00:35:46,220 --> 00:35:51,260
stuff over it this is an annotation

00:35:48,530 --> 00:35:54,020
there's a way of putting metadata about

00:35:51,260 --> 00:35:55,430
a class into the same file as the class

00:35:54,020 --> 00:35:57,599
using comments

00:35:55,430 --> 00:36:00,539
this is honestly the most controversial

00:35:57,599 --> 00:36:01,739
thing in Drupal 8 because a lot of

00:36:00,539 --> 00:36:03,900
people look at this and go oh my god

00:36:01,739 --> 00:36:05,819
you're putting code into a comment

00:36:03,900 --> 00:36:07,710
that's terrible to which the answer is

00:36:05,819 --> 00:36:09,059
well if the PHP internal developers

00:36:07,710 --> 00:36:10,410
would give us proper annotations in the

00:36:09,059 --> 00:36:12,299
language like it several other languages

00:36:10,410 --> 00:36:14,640
have we wouldn't have to but until then

00:36:12,299 --> 00:36:16,230
there's about two dozen PHP projects

00:36:14,640 --> 00:36:19,140
that are using this exact library to the

00:36:16,230 --> 00:36:24,359
doctrine annotations library to do this

00:36:19,140 --> 00:36:27,420
kind of metadata and we're not one of

00:36:24,359 --> 00:36:30,180
them what this means is that the

00:36:27,420 --> 00:36:33,359
entirety of what you need for a block or

00:36:30,180 --> 00:36:36,450
any other plugin is in this one file

00:36:33,359 --> 00:36:39,180
it's a single class with a couple of

00:36:36,450 --> 00:36:40,619
annotations at the top just say at

00:36:39,180 --> 00:36:43,710
blocks a this thing is gonna be block

00:36:40,619 --> 00:36:44,880
give it a machine name ID a label that

00:36:43,710 --> 00:36:46,710
it's translatable category that's

00:36:44,880 --> 00:36:48,930
translatable and then the block has a

00:36:46,710 --> 00:36:50,640
method build which works basically like

00:36:48,930 --> 00:36:52,890
a controller it's the controller for

00:36:50,640 --> 00:36:54,809
that block in essence and we're gonna

00:36:52,890 --> 00:36:59,420
return a string this is a hug enabled

00:36:54,809 --> 00:37:01,980
site now we go into the block admin and

00:36:59,420 --> 00:37:05,249
you'll notice there's no hug status in

00:37:01,980 --> 00:37:09,289
the list here instead you go over here

00:37:05,249 --> 00:37:12,839
and create a new block off of that class

00:37:09,289 --> 00:37:15,809
so you click Add click the add hug

00:37:12,839 --> 00:37:19,349
status over here and you get a config

00:37:15,809 --> 00:37:21,480
form where you can you know put put in a

00:37:19,349 --> 00:37:22,619
region configure it to visibility all

00:37:21,480 --> 00:37:26,609
the kind of stuff you can in the past

00:37:22,619 --> 00:37:30,180
and it then shows up on the page and you

00:37:26,609 --> 00:37:32,190
can do this multiple times because the

00:37:30,180 --> 00:37:34,440
configured instance of that block is

00:37:32,190 --> 00:37:36,420
what you're placing not the class which

00:37:34,440 --> 00:37:38,759
means you can place a block multiple

00:37:36,420 --> 00:37:41,420
times on the same page and it actually

00:37:38,759 --> 00:37:41,420
works in core

00:37:44,719 --> 00:37:52,229
there's the big wind Drupal 8 you can

00:37:46,829 --> 00:37:55,170
place a block multiple times and here we

00:37:52,229 --> 00:37:57,900
go our block shows up and says that this

00:37:55,170 --> 00:38:00,890
is a hug enabled site now you probably

00:37:57,900 --> 00:38:05,009
want to configure blocks at some point

00:38:00,890 --> 00:38:06,779
so just add some more methods that's the

00:38:05,009 --> 00:38:08,940
base class provides defaults for you can

00:38:06,779 --> 00:38:12,449
override them we're gonna create a

00:38:08,940 --> 00:38:15,900
default configuration method which is

00:38:12,449 --> 00:38:17,479
just an array of keys just like you have

00:38:15,900 --> 00:38:19,949
in the ML file of what the default

00:38:17,479 --> 00:38:23,219
configuration parameters are for this

00:38:19,949 --> 00:38:27,119
block we've got a block form works

00:38:23,219 --> 00:38:33,529
exactly the same as the build form

00:38:27,119 --> 00:38:35,940
method for a form return that I submit

00:38:33,529 --> 00:38:38,670
method there's also a validate if you

00:38:35,940 --> 00:38:41,880
need and we just save whatever the user

00:38:38,670 --> 00:38:44,640
submitted to our configuration array and

00:38:41,880 --> 00:38:46,529
it gets saved automatically and then we

00:38:44,640 --> 00:38:47,910
modify our build method to say all right

00:38:46,529 --> 00:38:50,789
switch on that configuration and say

00:38:47,910 --> 00:38:52,739
send a different message and we could

00:38:50,789 --> 00:38:54,569
totally pass that configuration value on

00:38:52,739 --> 00:38:58,709
to a template - if you wanted to what

00:38:54,569 --> 00:39:01,229
you should do and then we get that

00:38:58,709 --> 00:39:02,940
config option showing up in the form if

00:39:01,229 --> 00:39:04,529
you wanted to there's another method you

00:39:02,940 --> 00:39:08,190
can override and blast the way this

00:39:04,529 --> 00:39:10,229
entire config form and take over all of

00:39:08,190 --> 00:39:12,630
the block configuration you will almost

00:39:10,229 --> 00:39:14,430
never want to do that but if you want to

00:39:12,630 --> 00:39:15,569
it's there it's a lot of options

00:39:14,430 --> 00:39:19,339
available now that we're doing things

00:39:15,569 --> 00:39:19,339
with classes that you can override

00:39:19,789 --> 00:39:25,619
services I'm not talking about web

00:39:22,349 --> 00:39:27,690
services I mean services in the

00:39:25,619 --> 00:39:31,650
programming sense an object that does

00:39:27,690 --> 00:39:33,779
something they are stateless and you

00:39:31,650 --> 00:39:35,549
usually have only one of these this does

00:39:33,779 --> 00:39:39,299
not mean it's a singleton it's not

00:39:35,549 --> 00:39:41,670
self-enforcing examples here

00:39:39,299 --> 00:39:44,670
thank database connection or cache

00:39:41,670 --> 00:39:46,650
connection or you know the routing

00:39:44,670 --> 00:39:49,140
system is a service especially a series

00:39:46,650 --> 00:39:51,839
of services wired together most of the

00:39:49,140 --> 00:39:55,019
logic of your site and of your module

00:39:51,839 --> 00:39:57,060
belongs and services not in forms not in

00:39:55,019 --> 00:40:00,390
controllers not in blocks in

00:39:57,060 --> 00:40:02,610
services services you can unit test very

00:40:00,390 --> 00:40:07,140
easily if you cannot unit test your code

00:40:02,610 --> 00:40:09,090
you are doing it wrong so let's have a

00:40:07,140 --> 00:40:11,100
look at this sample service we're gonna

00:40:09,090 --> 00:40:13,110
call it hug tracker notice in this case

00:40:11,100 --> 00:40:18,840
we're not extending anything this is has

00:40:13,110 --> 00:40:21,540
no coupling to any core Drupal class but

00:40:18,840 --> 00:40:23,340
it does have a dependency on this state

00:40:21,540 --> 00:40:28,830
interface which the state service in

00:40:23,340 --> 00:40:30,840
Drupal what's the state system so

00:40:28,830 --> 00:40:32,310
remember we said hope that the variables

00:40:30,840 --> 00:40:34,070
table was terrible for configuration

00:40:32,310 --> 00:40:38,430
that space is not really configuration

00:40:34,070 --> 00:40:41,300
state is information about the site that

00:40:38,430 --> 00:40:43,440
is going to vary per instance

00:40:41,300 --> 00:40:45,680
configuration is something that you want

00:40:43,440 --> 00:40:47,690
to be able to deploy to deploy from

00:40:45,680 --> 00:40:50,460
development to staging to production

00:40:47,690 --> 00:40:55,110
state is for things like the last time

00:40:50,460 --> 00:40:56,460
cron ran who the the flood control who

00:40:55,110 --> 00:40:58,830
the last years that are post a comment

00:40:56,460 --> 00:41:00,870
was those things you really do not want

00:40:58,830 --> 00:41:05,190
to push from dev to production of

00:41:00,870 --> 00:41:07,230
production to dev so that's that belongs

00:41:05,190 --> 00:41:08,940
in a state system which is just a simple

00:41:07,230 --> 00:41:10,580
key value store this is much closer to

00:41:08,940 --> 00:41:16,950
the variable system actually then

00:41:10,580 --> 00:41:18,930
configuration was and so we have in our

00:41:16,950 --> 00:41:21,120
plug tracker service we have a method

00:41:18,930 --> 00:41:23,430
add hug which is records alright who is

00:41:21,120 --> 00:41:26,640
the last person hugged and we're just

00:41:23,430 --> 00:41:30,030
going to set that property on this state

00:41:26,640 --> 00:41:32,460
service and got last recipient which

00:41:30,030 --> 00:41:35,220
retrieves that value why are we abstract

00:41:32,460 --> 00:41:37,680
away from the state system because this

00:41:35,220 --> 00:41:41,010
is business logic it does not belong in

00:41:37,680 --> 00:41:43,410
controllers there's you can very easily

00:41:41,010 --> 00:41:45,330
extend this to be more than a trivial to

00:41:43,410 --> 00:41:46,650
get and set in which case that logic

00:41:45,330 --> 00:41:49,320
belongs in a service you can reuse

00:41:46,650 --> 00:41:52,350
rather than tied up in a controller your

00:41:49,320 --> 00:41:54,810
controllers should be thin so now we've

00:41:52,350 --> 00:41:57,150
got our service class defined we tell

00:41:54,810 --> 00:41:57,630
Drupal about it a services dot llamo

00:41:57,150 --> 00:41:59,970
file

00:41:57,630 --> 00:42:01,860
hugs that services but the mo in which

00:41:59,970 --> 00:42:04,890
we specify a machine name for it

00:42:01,860 --> 00:42:06,180
hug hug tracker we tell it the class and

00:42:04,890 --> 00:42:09,210
the arguments in this case the argument

00:42:06,180 --> 00:42:11,610
to the constructor is the state service

00:42:09,210 --> 00:42:13,020
this is the exact same syntax as

00:42:11,610 --> 00:42:16,610
Symphony users who here is you work with

00:42:13,020 --> 00:42:18,810
simply before all right

00:42:16,610 --> 00:42:20,760
we're using the symphony dependency

00:42:18,810 --> 00:42:23,310
injection container too so this is the

00:42:20,760 --> 00:42:27,600
exact same syntax that's you're familiar

00:42:23,310 --> 00:42:29,850
with from any Symphony project so we've

00:42:27,600 --> 00:42:33,750
got our service created we told you

00:42:29,850 --> 00:42:36,060
about it now we need to use it so in our

00:42:33,750 --> 00:42:38,610
controller we'll add another method is a

00:42:36,060 --> 00:42:40,410
static method called create which

00:42:38,610 --> 00:42:41,520
there's an interface that triggers that

00:42:40,410 --> 00:42:44,700
it's going to be there which controller

00:42:41,520 --> 00:42:48,000
base implements for us and then that

00:42:44,700 --> 00:42:50,940
create method acts as a factory for our

00:42:48,000 --> 00:42:53,370
controller object it gets passed the

00:42:50,940 --> 00:42:55,830
container we're going to pull out that

00:42:53,370 --> 00:42:58,530
service we just created and pass that to

00:42:55,830 --> 00:43:02,010
the constructor static static is PHP for

00:42:58,530 --> 00:43:03,480
the class I'm in it's just you could say

00:43:02,010 --> 00:43:06,180
return new hub controller if you wanted

00:43:03,480 --> 00:43:07,320
to static it's more generic the

00:43:06,180 --> 00:43:10,560
constructor we just save that to a

00:43:07,320 --> 00:43:13,040
property good to go and then in our

00:43:10,560 --> 00:43:16,290
controller method itself in a hug method

00:43:13,040 --> 00:43:17,940
we say all right the to whoever's being

00:43:16,290 --> 00:43:22,140
hugged we'll just record that call the

00:43:17,940 --> 00:43:24,570
state set that property we're good and

00:43:22,140 --> 00:43:28,110
then the rest of that's is the same we

00:43:24,570 --> 00:43:31,710
saw before let's update our block as

00:43:28,110 --> 00:43:32,490
well in this case we need to add an

00:43:31,710 --> 00:43:33,990
interface to it

00:43:32,490 --> 00:43:37,890
to indicate that hey we're gonna use

00:43:33,990 --> 00:43:40,470
that create method thinking and we're

00:43:37,890 --> 00:43:41,820
gonna have another create method in this

00:43:40,470 --> 00:43:43,530
case for blocks is a couple of extra

00:43:41,820 --> 00:43:45,360
properties you need to pass in as well

00:43:43,530 --> 00:43:46,650
don't worry about what those are just

00:43:45,360 --> 00:43:49,110
pass them through they're part of the

00:43:46,650 --> 00:43:51,960
blocks set up in the first place but

00:43:49,110 --> 00:43:56,610
it's the exact same idea and then in our

00:43:51,960 --> 00:43:59,640
build method we customize the message so

00:43:56,610 --> 00:44:03,090
if hugs are not enabled then we just say

00:43:59,640 --> 00:44:05,220
no hugs if they are enabled then we'll

00:44:03,090 --> 00:44:08,160
say who the last hugged person was which

00:44:05,220 --> 00:44:09,420
we get out of the service again trivial

00:44:08,160 --> 00:44:11,740
logic some of this could even be pushed

00:44:09,420 --> 00:44:15,310
off to the template

00:44:11,740 --> 00:44:17,500
and there we go our message is now

00:44:15,310 --> 00:44:20,830
saying who the last person to be hugged

00:44:17,500 --> 00:44:26,109
was alright

00:44:20,830 --> 00:44:28,359
ain't no framework stuff content that's

00:44:26,109 --> 00:44:31,420
kind of important right CMS content kind

00:44:28,359 --> 00:44:37,660
of go together yep okay entities they

00:44:31,420 --> 00:44:40,240
actually work now conceptually an entity

00:44:37,660 --> 00:44:42,040
is any storable piece of contents that's

00:44:40,240 --> 00:44:46,380
going to have an ID that you're going to

00:44:42,040 --> 00:44:48,760
reference by some ID number or ID field

00:44:46,380 --> 00:44:51,010
in Drupal we divide them into config

00:44:48,760 --> 00:44:54,250
entities and content entities content

00:44:51,010 --> 00:44:56,109
entities are feel double that means they

00:44:54,250 --> 00:44:57,700
can have configured fields on them this

00:44:56,109 --> 00:44:59,349
is what we're used to with Drupal 7 and

00:44:57,700 --> 00:45:03,070
with fields and nodes and all that kind

00:44:59,349 --> 00:45:04,420
of stuff configuration entities are

00:45:03,070 --> 00:45:06,700
useful shortcut they're actually what

00:45:04,420 --> 00:45:08,920
plugins use under the hood I'm not gonna

00:45:06,700 --> 00:45:12,250
get too far into those but you can look

00:45:08,920 --> 00:45:14,140
them up if you need to and yeah the API

00:45:12,250 --> 00:45:16,300
actually you know is finished

00:45:14,140 --> 00:45:20,680
it actually works now which is more than

00:45:16,300 --> 00:45:23,349
I can say for Drupal 7 lots of things

00:45:20,680 --> 00:45:25,900
you know entities nodes users taxonomy

00:45:23,349 --> 00:45:28,210
terms files comments there's about a

00:45:25,900 --> 00:45:32,050
dozen different things in Drupal now

00:45:28,210 --> 00:45:34,150
that our content entities which means

00:45:32,050 --> 00:45:35,650
they are then filled of all you can do

00:45:34,150 --> 00:45:37,780
all kinds of fun things with them that

00:45:35,650 --> 00:45:40,630
you're used to doing with nodes nodes

00:45:37,780 --> 00:45:42,730
are no longer special you can make your

00:45:40,630 --> 00:45:44,170
own entities and they get all of this

00:45:42,730 --> 00:45:49,330
stuff you can make your own field of all

00:45:44,170 --> 00:45:51,849
entities quite easily so let's go ahead

00:45:49,330 --> 00:45:52,839
and create a node I'm just gonna give it

00:45:51,849 --> 00:45:54,670
a title give it a body

00:45:52,839 --> 00:46:00,280
give it some tags it's just an article

00:45:54,670 --> 00:46:02,800
node default ought rupal and make a

00:46:00,280 --> 00:46:06,430
another custom page I'm gonna put this

00:46:02,800 --> 00:46:08,680
at node slash node slash hug give it a

00:46:06,430 --> 00:46:11,140
controller give permission seems you've

00:46:08,680 --> 00:46:16,109
seen before nothing new here that

00:46:11,140 --> 00:46:17,940
controller then is going to

00:46:16,109 --> 00:46:20,940
have its first prayer it's a

00:46:17,940 --> 00:46:22,849
one-parameter be note we're also type in

00:46:20,940 --> 00:46:25,950
ting it's tuned to the note interface

00:46:22,849 --> 00:46:28,999
entities are actually classed objects

00:46:25,950 --> 00:46:32,670
they're no longer arrays of funny syntax

00:46:28,999 --> 00:46:34,440
so the terrible terrible list of arrows

00:46:32,670 --> 00:46:41,759
and brackets you have to use to get to

00:46:34,440 --> 00:46:43,109
anything in triple7 dawn and what's fine

00:46:41,759 --> 00:46:51,799
is fascinating which things people

00:46:43,109 --> 00:46:55,259
applauded at when I give this talk and

00:46:51,799 --> 00:46:56,910
because we're using the name nodes the

00:46:55,259 --> 00:46:59,160
variable and type in Singh at his node

00:46:56,910 --> 00:47:01,019
interface it will automatically get cast

00:46:59,160 --> 00:47:02,759
up so instead of getting a note ID will

00:47:01,019 --> 00:47:05,509
get the actual node object at this point

00:47:02,759 --> 00:47:09,690
same kind of thing you could do in

00:47:05,509 --> 00:47:13,200
Drupal 7 with the menu but it's now a

00:47:09,690 --> 00:47:14,880
lot cleaner and now you want to check if

00:47:13,200 --> 00:47:18,299
a note is published you call the is

00:47:14,880 --> 00:47:20,339
published method oh goody you want to

00:47:18,299 --> 00:47:22,380
access the value out of it let's get the

00:47:20,339 --> 00:47:25,739
value column out of the body field

00:47:22,380 --> 00:47:27,509
that's it if it's multi value then you

00:47:25,739 --> 00:47:30,839
can put a bracket in there and specify

00:47:27,509 --> 00:47:33,900
which index you want wait a minute how

00:47:30,839 --> 00:47:36,029
in the world does that work we're

00:47:33,900 --> 00:47:37,049
actually using PHP s magic underscore

00:47:36,029 --> 00:47:43,699
underscore get and I'm just Rhonda's

00:47:37,049 --> 00:47:47,940
corset methods so both of these get the

00:47:43,699 --> 00:47:52,559
first the body field first instance

00:47:47,940 --> 00:47:54,779
value column that way if something if

00:47:52,559 --> 00:47:57,180
you have a field that is multi value you

00:47:54,779 --> 00:47:59,009
can treat it as multi value if you have

00:47:57,180 --> 00:48:01,199
a field that you only want to use as if

00:47:59,009 --> 00:48:03,630
it were single value you can use it as

00:48:01,199 --> 00:48:05,519
if it were single value under the hood

00:48:03,630 --> 00:48:09,420
everything is still multi value all the

00:48:05,519 --> 00:48:11,039
time but it's a lot easier to access and

00:48:09,420 --> 00:48:13,349
this is not going to break when you

00:48:11,039 --> 00:48:15,119
change the field to suddenly be multi

00:48:13,349 --> 00:48:19,650
value that first line will still always

00:48:15,119 --> 00:48:21,229
work to give you the first property but

00:48:19,650 --> 00:48:24,930
what you really want is the processed

00:48:21,229 --> 00:48:26,880
property which takes that field and runs

00:48:24,930 --> 00:48:28,920
it through all of tuples filters so

00:48:26,880 --> 00:48:30,090
please never use value use processed

00:48:28,920 --> 00:48:36,080
otherwise you have security

00:48:30,090 --> 00:48:39,720
thank you you want the get the tag field

00:48:36,080 --> 00:48:44,310
which is an array iterate over that and

00:48:39,720 --> 00:48:46,650
for each one we're going to call the

00:48:44,310 --> 00:48:49,230
entity pseudo property which loads the

00:48:46,650 --> 00:48:51,630
actual taxonomy term object and we're

00:48:49,230 --> 00:48:55,440
gonna get the label of it lick the label

00:48:51,630 --> 00:48:57,780
method of an entity is consistent across

00:48:55,440 --> 00:49:00,300
all entity types you want the title of a

00:48:57,780 --> 00:49:03,780
node node label you want the user name

00:49:00,300 --> 00:49:06,960
of a user user label you want the tag

00:49:03,780 --> 00:49:10,580
name of a tag tag label same for all

00:49:06,960 --> 00:49:13,860
entities now you want the node owner

00:49:10,580 --> 00:49:16,560
there's a nice method for that I'd say

00:49:13,860 --> 00:49:21,690
this gets the the user name of the owner

00:49:16,560 --> 00:49:24,900
of the node and then is the the nodes

00:49:21,690 --> 00:49:27,120
title node bundle if they know type

00:49:24,900 --> 00:49:29,640
bundle is the generic term that's used

00:49:27,120 --> 00:49:33,000
across all entities and just build up

00:49:29,640 --> 00:49:35,610
our string and you know return our

00:49:33,000 --> 00:49:37,080
render array now I'm doing it this way

00:49:35,610 --> 00:49:40,950
to show you how to use the entity API

00:49:37,080 --> 00:49:42,330
but really all that logic belongs in a

00:49:40,950 --> 00:49:46,230
template don't actually do this put this

00:49:42,330 --> 00:49:48,060
in a template but in its bake template

00:49:46,230 --> 00:49:49,230
you can call these methods as if they

00:49:48,060 --> 00:49:50,490
were properties and properties is if

00:49:49,230 --> 00:49:53,190
there are methods it's a consistent

00:49:50,490 --> 00:49:55,590
thing in the template so all of that

00:49:53,190 --> 00:49:57,750
happens for you they are too super

00:49:55,590 --> 00:49:59,160
powerful it also means you don't need to

00:49:57,750 --> 00:50:01,400
touch people's ice all that much either

00:49:59,160 --> 00:50:08,490
yay

00:50:01,400 --> 00:50:11,970
and so here's our output tonight let's

00:50:08,490 --> 00:50:14,700
review Drupal in two steps Mill the tool

00:50:11,970 --> 00:50:17,370
wire it up extend the base class tell

00:50:14,700 --> 00:50:19,830
Drupal about it the way you tell Drupal

00:50:17,370 --> 00:50:21,360
about it and they vary it's typically

00:50:19,830 --> 00:50:23,400
going to be either a llamó file or an

00:50:21,360 --> 00:50:25,290
annotation how do you know which one

00:50:23,400 --> 00:50:28,950
it's gonna be well if it's you know

00:50:25,290 --> 00:50:30,510
plugins are not always annotations some

00:50:28,950 --> 00:50:32,390
of those things that use llamó

00:50:30,510 --> 00:50:35,850
are actually plugins under the hood

00:50:32,390 --> 00:50:38,000
what's the distinction if you're using

00:50:35,850 --> 00:50:41,080
this metadata to tell Drupal

00:50:38,000 --> 00:50:43,540
something is that's an annotation if

00:50:41,080 --> 00:50:46,940
you're telling people where it goes

00:50:43,540 --> 00:50:48,860
that's convenient that's not a hard and

00:50:46,940 --> 00:50:51,590
fast rule but that is how the system is

00:50:48,860 --> 00:50:54,350
chickened out what it is is annotation

00:50:51,590 --> 00:50:57,170
where it goes is yamo and the thing

00:50:54,350 --> 00:51:07,250
itself is a class congratulations that

00:50:57,170 --> 00:51:10,040
sentence is Drupal 8 some last

00:51:07,250 --> 00:51:12,290
guidelines you want small classes and

00:51:10,040 --> 00:51:15,530
smaller methods if you have a method

00:51:12,290 --> 00:51:19,280
that does 17 things and has 40 variables

00:51:15,530 --> 00:51:21,080
in it it's too big break it up single

00:51:19,280 --> 00:51:24,580
responsibility principle learn it love

00:51:21,080 --> 00:51:27,110
it your controllers should be stupid

00:51:24,580 --> 00:51:28,310
that includes the build method of a

00:51:27,110 --> 00:51:31,580
block which you should treat the same

00:51:28,310 --> 00:51:33,260
way if they have code in them complex

00:51:31,580 --> 00:51:36,590
enough that it is worth bothering to

00:51:33,260 --> 00:51:38,870
test you have too much code there factor

00:51:36,590 --> 00:51:42,740
it out to a service your controller

00:51:38,870 --> 00:51:44,960
should be stupid glue code if most of

00:51:42,740 --> 00:51:46,340
your controllers are returned render

00:51:44,960 --> 00:51:48,800
array with a bunch of properties

00:51:46,340 --> 00:51:50,480
directly that's a good thing if you're

00:51:48,800 --> 00:51:53,810
doing anything more than that you

00:51:50,480 --> 00:51:54,980
probably want to service services are

00:51:53,810 --> 00:51:56,630
where your logic belongs

00:51:54,980 --> 00:51:59,150
that makes it unit testable that makes

00:51:56,630 --> 00:52:01,100
it in many cases Drupal agnostic that

00:51:59,150 --> 00:52:03,920
means your code could be used outside of

00:52:01,100 --> 00:52:11,090
Drupal it means if we break stuff again

00:52:03,920 --> 00:52:14,570
in Drupal nine and six years or seven or

00:52:11,090 --> 00:52:16,100
eight yeah then it becomes much easier

00:52:14,570 --> 00:52:17,900
to port you could port it to a symphony

00:52:16,100 --> 00:52:20,150
application and change very little if

00:52:17,900 --> 00:52:21,860
you do your services properly even if

00:52:20,150 --> 00:52:23,180
you can't make a Drupal independent this

00:52:21,860 --> 00:52:26,930
makes it easier to test and easier to

00:52:23,180 --> 00:52:30,530
maintain you'll notice I did not have a

00:52:26,930 --> 00:52:32,270
single SQL query on any slide I spent an

00:52:30,530 --> 00:52:35,000
obscene amount of time in Drupal 7

00:52:32,270 --> 00:52:36,920
building a new fancy database API was

00:52:35,000 --> 00:52:38,390
very easy and friendly to use and I'm

00:52:36,920 --> 00:52:43,250
here to tell you now on Triple H please

00:52:38,390 --> 00:52:46,850
don't use it because Drupal can now run

00:52:43,250 --> 00:52:49,570
with no SQL database at all Drupal

00:52:46,850 --> 00:52:51,099
cannot run entirely on MongoDB or

00:52:49,570 --> 00:52:54,670
Cassandra or whatever

00:52:51,099 --> 00:52:57,190
other back-end you want because we have

00:52:54,670 --> 00:52:59,680
a much more robust set of pluggable

00:52:57,190 --> 00:53:02,170
api's any of these services that you're

00:52:59,680 --> 00:53:04,809
telling people about you can swap those

00:53:02,170 --> 00:53:07,390
out any class we have that has actual

00:53:04,809 --> 00:53:09,489
SQL in it you can swap out for one that

00:53:07,390 --> 00:53:10,509
has a MongoDB back-end you can swap it

00:53:09,489 --> 00:53:12,759
out to have a different version of the

00:53:10,509 --> 00:53:14,319
code for my sequel versus Postgres

00:53:12,759 --> 00:53:17,890
there's actually built-in support for

00:53:14,319 --> 00:53:20,829
that too if you have to have code to

00:53:17,890 --> 00:53:23,019
that does SQL queries yourself for

00:53:20,829 --> 00:53:25,479
performance reasons make sure it is done

00:53:23,019 --> 00:53:26,950
in a swappable fashion your own your

00:53:25,479 --> 00:53:27,759
custom module for a site whatever but if

00:53:26,950 --> 00:53:30,220
it's something you're releasing on

00:53:27,759 --> 00:53:34,059
Drupal at org make it data make it back

00:53:30,220 --> 00:53:35,829
and agnostic and once again if it is

00:53:34,059 --> 00:53:37,809
hard to unit test you are doing it wrong

00:53:35,829 --> 00:53:39,549
if you find yourself writing coding like

00:53:37,809 --> 00:53:41,079
AG there's too many dependencies here

00:53:39,549 --> 00:53:42,009
it's fine if this thing that's because

00:53:41,079 --> 00:53:43,930
you're putting the code in the wrong

00:53:42,009 --> 00:53:45,460
place factored out to a service your

00:53:43,930 --> 00:53:48,279
surfed is too big to test conveniently

00:53:45,460 --> 00:53:52,029
break it up into multiple services this

00:53:48,279 --> 00:53:54,700
is probably the best guideline for high

00:53:52,029 --> 00:53:57,279
quality code in a modern PHP world if

00:53:54,700 --> 00:53:59,109
it's easy to unit test you're on the

00:53:57,279 --> 00:54:02,859
right track if it's hard to unit test

00:53:59,109 --> 00:54:05,400
you are doing it wrong fix it and that

00:54:02,859 --> 00:54:08,519
in a very large nutshell is Drupal 8

00:54:05,400 --> 00:54:08,519
thank you

00:54:15,570 --> 00:54:21,420
got a couple minutes for questions it's

00:54:18,130 --> 00:54:23,290
a microphone over here if you'd like so

00:54:21,420 --> 00:54:25,590
let me know if there's anything you

00:54:23,290 --> 00:54:25,590
don't get

00:54:32,500 --> 00:54:37,050
I'd like to ask just a really simple

00:54:34,540 --> 00:54:39,940
question because I did attend the

00:54:37,050 --> 00:54:41,560
presentation this morning about symphony

00:54:39,940 --> 00:54:43,060
and I'm super duper excited about

00:54:41,560 --> 00:54:45,340
symphony and Drupal eight I think that's

00:54:43,060 --> 00:54:48,190
gonna mean total awesomeness for us in

00:54:45,340 --> 00:54:50,650
his presentation this is Ryan Weaver's

00:54:48,190 --> 00:54:51,970
presentation yes yes thank you for

00:54:50,650 --> 00:54:54,730
helping me out with that I was drawing a

00:54:51,970 --> 00:54:57,760
blank on it it's a great guy in his

00:54:54,730 --> 00:54:59,650
presentation the way he had put his

00:54:57,760 --> 00:55:00,970
slides up there and he said right up

00:54:59,650 --> 00:55:02,590
front he's not a Drupal developer but

00:55:00,970 --> 00:55:03,720
the way he had demonstrated his slides

00:55:02,590 --> 00:55:07,480
when he was showing the various

00:55:03,720 --> 00:55:09,970
responses for things is that when he

00:55:07,480 --> 00:55:12,840
concatenated things for instance he

00:55:09,970 --> 00:55:15,190
didn't have the space on either side and

00:55:12,840 --> 00:55:17,860
he had also showed where you did like

00:55:15,190 --> 00:55:20,680
with the annotations here when you're

00:55:17,860 --> 00:55:21,880
gonna do your I don't remember you

00:55:20,680 --> 00:55:23,350
showing us a service or whatever but

00:55:21,880 --> 00:55:26,770
instead of having a separate router

00:55:23,350 --> 00:55:28,930
yamo and then like your module file for

00:55:26,770 --> 00:55:31,770
instance he put it together with the de

00:55:28,930 --> 00:55:35,590
annotations so my question is this the

00:55:31,770 --> 00:55:37,510
Drupal coding standards in Drupal 8 for

00:55:35,590 --> 00:55:39,000
doing these types of things so one I'm

00:55:37,510 --> 00:55:41,410
assuming we're not changing our

00:55:39,000 --> 00:55:43,270
standards in terms of like space on

00:55:41,410 --> 00:55:45,220
either side of the concatenated cetera

00:55:43,270 --> 00:55:47,590
et cetera and then the other thing is

00:55:45,220 --> 00:55:48,940
that maybe a new standard is are we

00:55:47,590 --> 00:55:51,040
gonna follow because he said the way

00:55:48,940 --> 00:55:52,300
that Symphony does things gentleman you

00:55:51,040 --> 00:55:53,590
write it is that you put all those

00:55:52,300 --> 00:55:55,390
things on the one that file and use the

00:55:53,590 --> 00:55:56,650
annotation so this is a standards

00:55:55,390 --> 00:55:58,600
question for Drupal 8

00:55:56,650 --> 00:56:00,760
so Drupal still has its own coding

00:55:58,600 --> 00:56:06,580
standards we are not switching to PS r2

00:56:00,760 --> 00:56:08,290
which is what Symphony uses as for where

00:56:06,580 --> 00:56:10,240
the configuration goes symphony supports

00:56:08,290 --> 00:56:12,520
about four different ways to configure

00:56:10,240 --> 00:56:16,510
anything they support yamo xml

00:56:12,520 --> 00:56:19,420
annotations PHP config files all kinds

00:56:16,510 --> 00:56:22,030
of things and not every Symphony shop

00:56:19,420 --> 00:56:23,410
uses the same one so you can do routing

00:56:22,030 --> 00:56:25,330
from a yellow file in Symphony

00:56:23,410 --> 00:56:28,420
you can also route from XML file you can

00:56:25,330 --> 00:56:30,730
also do it from extra annotations on the

00:56:28,420 --> 00:56:32,200
controller's themselves in Drupal the

00:56:30,730 --> 00:56:34,750
way I showed is the only supported way

00:56:32,200 --> 00:56:36,520
well correction there is an event that

00:56:34,750 --> 00:56:38,440
fires where you can do dynamic routes

00:56:36,520 --> 00:56:40,690
but then you're doing custom PHP code

00:56:38,440 --> 00:56:44,550
for those but no we do not support

00:56:40,690 --> 00:56:44,550
routing via annotation on the class

00:56:45,250 --> 00:56:49,660
thank you for your talking also for your

00:56:47,500 --> 00:56:53,140
song this morning that was really cool

00:56:49,660 --> 00:56:55,720
you crushed it somebody my question is

00:56:53,140 --> 00:56:57,370
about a service container and I've

00:56:55,720 --> 00:56:59,680
actually heard you give a similar talk

00:56:57,370 --> 00:57:05,020
before where you said something similar

00:56:59,680 --> 00:57:08,950
that if if you directly like knew up an

00:57:05,020 --> 00:57:13,000
object if you say like VAR equals new my

00:57:08,950 --> 00:57:14,440
class that that the code in which you've

00:57:13,000 --> 00:57:17,260
done that will no longer be unit

00:57:14,440 --> 00:57:19,000
testable and I'm not it's not sure I get

00:57:17,260 --> 00:57:23,860
why you can you just kind of expand on

00:57:19,000 --> 00:57:25,840
that so anywhere you have a hard-coded

00:57:23,860 --> 00:57:28,540
class name you have a hard-coded

00:57:25,840 --> 00:57:31,840
dependency on that class that specific

00:57:28,540 --> 00:57:33,310
implementation class in the vast

00:57:31,840 --> 00:57:35,080
majority of cases you actually don't

00:57:33,310 --> 00:57:37,360
want that because it means you cannot

00:57:35,080 --> 00:57:41,950
use your code or test your code without

00:57:37,360 --> 00:57:44,260
that class you cannot mock it if so if

00:57:41,950 --> 00:57:48,610
something is a service you always inject

00:57:44,260 --> 00:57:50,050
that if you have something like um the

00:57:48,610 --> 00:57:52,450
exception to that is if you have a value

00:57:50,050 --> 00:57:55,750
object of some kind like you have an

00:57:52,450 --> 00:57:56,650
object that represents an address which

00:57:55,750 --> 00:57:58,690
is you know three or four different

00:57:56,650 --> 00:58:02,400
properties or whatever that's a value

00:57:58,690 --> 00:58:04,480
object that's just data that's not logic

00:58:02,400 --> 00:58:08,110
that may make sense to instantiate

00:58:04,480 --> 00:58:09,070
yourself or get out of a factory if

00:58:08,110 --> 00:58:11,590
you're loading it from a database or

00:58:09,070 --> 00:58:14,560
something but that's different than a

00:58:11,590 --> 00:58:16,990
service it's an important bit of a

00:58:14,560 --> 00:58:20,020
tangent but there are types of objects

00:58:16,990 --> 00:58:22,660
that are B objects they are responsible

00:58:20,020 --> 00:58:24,370
for representing data and there are

00:58:22,660 --> 00:58:26,940
Durer objects that are responsible for

00:58:24,370 --> 00:58:29,860
having business logic those are services

00:58:26,940 --> 00:58:33,220
those you never instantiate yourself you

00:58:29,860 --> 00:58:35,020
always inject the B objects sometimes

00:58:33,220 --> 00:58:37,830
you can instantiate yourself sometimes

00:58:35,020 --> 00:58:41,710
you load them from a factory service

00:58:37,830 --> 00:58:44,310
Drupal does better than it used to in

00:58:41,710 --> 00:58:48,130
keeping that distinction it is not

00:58:44,310 --> 00:58:50,080
complete in that distinction but very

00:58:48,130 --> 00:58:52,420
often when you run into this is just a

00:58:50,080 --> 00:58:54,580
thoroughly bizarre chain of objects oh

00:58:52,420 --> 00:58:55,440
that's because you got that beavers do

00:58:54,580 --> 00:58:58,829
wrong

00:58:55,440 --> 00:59:01,289
so does that help a bit yes so when you

00:58:58,829 --> 00:59:04,410
when you reference mocking out objects

00:59:01,289 --> 00:59:06,720
is is the expectation then that when

00:59:04,410 --> 00:59:10,670
when your unit testing your code that

00:59:06,720 --> 00:59:12,839
you would I guess you would change the

00:59:10,670 --> 00:59:14,819
the service that you're using would

00:59:12,839 --> 00:59:16,380
return some different object you'd be

00:59:14,819 --> 00:59:19,140
replacing this this is right so if

00:59:16,380 --> 00:59:20,730
you're testing a service and that

00:59:19,140 --> 00:59:22,619
service depends on another service

00:59:20,730 --> 00:59:24,480
object then you're not even using the

00:59:22,619 --> 00:59:26,670
container you're creating a mock version

00:59:24,480 --> 00:59:28,410
of that other service okay and pass to

00:59:26,670 --> 00:59:31,109
get into an instructor of the class or

00:59:28,410 --> 00:59:34,980
testing and if you're in PHP unit which

00:59:31,109 --> 00:59:36,329
we now have interpolates that's it has

00:59:34,980 --> 00:59:38,910
its own mocking framework it actually

00:59:36,329 --> 00:59:41,010
has to now it's moving over to prophecy

00:59:38,910 --> 00:59:42,299
which there's a newer mocking framework

00:59:41,010 --> 00:59:44,789
a lot of people like so you can use that

00:59:42,299 --> 00:59:46,079
in Drupal 8 you're not actually going to

00:59:44,789 --> 00:59:47,760
touch the container that's another

00:59:46,079 --> 00:59:49,799
example if you're writing a unit test

00:59:47,760 --> 00:59:52,589
and you have to have a container you're

00:59:49,799 --> 00:59:53,789
doing it wrong okay lots of course still

00:59:52,589 --> 00:59:56,700
uses a container in their tests that

00:59:53,789 --> 00:59:58,160
means they're doing it wrong but for

00:59:56,700 --> 01:00:03,329
your code you can be better than core

00:59:58,160 --> 01:00:05,359
thank you very much kind of still along

01:00:03,329 --> 01:00:07,200
the the dependency injection

01:00:05,359 --> 01:00:09,440
conversation I just thought it was

01:00:07,200 --> 01:00:12,150
interesting that the I think it was the

01:00:09,440 --> 01:00:14,730
controller had that static create method

01:00:12,150 --> 01:00:18,510
which was using the container to create

01:00:14,730 --> 01:00:19,529
itself versus having that in other cases

01:00:18,510 --> 01:00:21,720
where I've use dependency injection

01:00:19,529 --> 01:00:23,369
we've kind of avoided I'm pushing the

01:00:21,720 --> 01:00:26,010
container to other parts of the code

01:00:23,369 --> 01:00:27,809
other than the kind of single point of

01:00:26,010 --> 01:00:29,190
initialization so it's just wondering if

01:00:27,809 --> 01:00:31,260
you could elaborate on that a little bit

01:00:29,190 --> 01:00:32,760
so there's in symphony there's two

01:00:31,260 --> 01:00:34,710
schools of thought about how to deal

01:00:32,760 --> 01:00:37,440
with services that are used in a

01:00:34,710 --> 01:00:39,089
controller one says use a common

01:00:37,440 --> 01:00:41,609
controller base class that has the

01:00:39,089 --> 01:00:42,809
container and just accept that the

01:00:41,609 --> 01:00:44,220
container is going to be there and use

01:00:42,809 --> 01:00:45,809
it because you have no business putting

01:00:44,220 --> 01:00:48,960
code in there that is worth testing

01:00:45,809 --> 01:00:53,220
anyway the other is controllers should

01:00:48,960 --> 01:00:56,420
be clean as well and so you know you

01:00:53,220 --> 01:00:58,470
have controllers registered as services

01:00:56,420 --> 01:00:59,940
we looked at that into well we're gonna

01:00:58,470 --> 01:01:01,710
have a couple thousand controllers

01:00:59,940 --> 01:01:04,890
that'd be a couple thousand services

01:01:01,710 --> 01:01:06,710
let's not do that so the middle ground

01:01:04,890 --> 01:01:09,920
we came up with was this

01:01:06,710 --> 01:01:13,460
create method so the controller object

01:01:09,920 --> 01:01:13,850
itself does not have a rel I shouldn't

01:01:13,460 --> 01:01:15,890
say that

01:01:13,850 --> 01:01:17,200
the controller itself does not have an

01:01:15,890 --> 01:01:20,720
exposed container in it

01:01:17,200 --> 01:01:23,060
your services are passed into it via the

01:01:20,720 --> 01:01:25,040
constructor to view the constructor from

01:01:23,060 --> 01:01:27,110
your little factory method your create

01:01:25,040 --> 01:01:28,730
factory method so that's kind of our

01:01:27,110 --> 01:01:31,490
middle ground that came up with four

01:01:28,730 --> 01:01:33,650
that makes sense yeah if you want to be

01:01:31,490 --> 01:01:36,080
hardcore about it and have controller

01:01:33,650 --> 01:01:41,540
services those are supported they're

01:01:36,080 --> 01:01:42,860
just not really used much in core so

01:01:41,540 --> 01:01:48,680
when you started talking about theming

01:01:42,860 --> 01:01:50,510
you introduced the trans tag and I'm a

01:01:48,680 --> 01:01:51,920
little bit confused because you also use

01:01:50,510 --> 01:01:53,120
the team method before that in the

01:01:51,920 --> 01:01:57,830
controller so is there some sort of

01:01:53,120 --> 01:02:00,080
magic link between the two the white

01:01:57,830 --> 01:02:01,880
twig works it actually compiles down to

01:02:00,080 --> 01:02:04,760
PHP code and that's what gets run at

01:02:01,880 --> 01:02:07,370
runtime the Transpac compiles down to a

01:02:04,760 --> 01:02:11,090
t function call so did we run it through

01:02:07,370 --> 01:02:15,080
the T function twice then no the when

01:02:11,090 --> 01:02:17,210
you indicates a trans block in let's

01:02:15,080 --> 01:02:19,910
make template when that gets compiled

01:02:17,210 --> 01:02:23,300
with the actual PHP code that runs is

01:02:19,910 --> 01:02:27,140
you know the T function whatever string

01:02:23,300 --> 01:02:29,510
you had so the net result is the same

01:02:27,140 --> 01:02:33,950
which means both are exposed to

01:02:29,510 --> 01:02:35,900
translation system the same way yeah

01:02:33,950 --> 01:02:37,880
it's not double calls that's just so so

01:02:35,900 --> 01:02:45,520
why would I choose to translate in the

01:02:37,880 --> 01:02:45,520
theming layer versus and controller if

01:02:45,550 --> 01:02:49,760
so in practice most the time I would

01:02:48,050 --> 01:02:51,830
actually put it into the theme layer at

01:02:49,760 --> 01:02:54,820
this point the things you'd still do

01:02:51,830 --> 01:02:59,050
with the T function would be things like

01:02:54,820 --> 01:03:03,680
the label of a form element for example

01:02:59,050 --> 01:03:04,910
or some other piece like that and

01:03:03,680 --> 01:03:05,960
actually that's the one I'm coming up

01:03:04,910 --> 01:03:07,280
with off the top my head there may be a

01:03:05,960 --> 01:03:11,030
few other places where you might need to

01:03:07,280 --> 01:03:13,430
but anything that's user facing output

01:03:11,030 --> 01:03:17,270
that a themer might conceivably want to

01:03:13,430 --> 01:03:18,830
touch put that in a template I would say

01:03:17,270 --> 01:03:20,510
put that in a high-level custom template

01:03:18,830 --> 01:03:21,860
you can do very deeply nested

01:03:20,510 --> 01:03:24,620
arrays just like you could before I

01:03:21,860 --> 01:03:27,920
would encourage you to not do that just

01:03:24,620 --> 01:03:29,870
pass values in to a custom template the

01:03:27,920 --> 01:03:32,150
highest level you possibly can like from

01:03:29,870 --> 01:03:34,640
a controller and then all of the actual

01:03:32,150 --> 01:03:36,230
logic of if this value is less than

01:03:34,640 --> 01:03:37,670
three so the string if it's greater than

01:03:36,230 --> 01:03:40,610
three so the string if it's greater than

01:03:37,670 --> 01:03:41,750
ten show this string all of that belongs

01:03:40,610 --> 01:03:43,550
in the template layer

01:03:41,750 --> 01:03:44,930
none of that belongs in the controller

01:03:43,550 --> 01:03:51,500
it belongs somewhere that the themer can

01:03:44,930 --> 01:03:53,690
get at it all right thanks yes I I'm

01:03:51,500 --> 01:03:57,550
being told I have to and I'm getting the

01:03:53,690 --> 01:04:03,170
hook here so let's talk after thank you

01:03:57,550 --> 01:04:05,210
Hey okay uh so the fact that we really

01:04:03,170 --> 01:04:07,400
flexible in flipping databases right and

01:04:05,210 --> 01:04:09,590
the fact that the symphony is a

01:04:07,400 --> 01:04:11,240
foundation so are we using doctrine or

01:04:09,590 --> 01:04:15,010
RAM actually to work on a database need

01:04:11,240 --> 01:04:15,010

YouTube URL: https://www.youtube.com/watch?v=8vwC_01KFLo


