Title: DrupalCon Los Angeles 2015: Local and remote testing with DrupalCI
Publication date: 2015-05-13
Playlist: DrupalCon Los Angeles - May 2015
Description: 
	This session will explore the 'Modernizing Testbot' initiative, and provide an introduction the DrupalCI project and associated infrastructure; positioned to suceed PIFT/PIFR as the future automated testing infrastructure for Drupal.org.  We'll take an 'under the covers' look at the project and it's deliverables, how it's being leveraged within the Drupal.org automated testing environment, and perhaps even a sneak peek at new and interesting features that the platform may enable on Drupal.org in the future.

But DrupalCI has been designed for more than just Drupal.org testing ... one of the primary goals of the project has always been to provide users access to a single, consistent testing platform; whether running on Drupal.org, internally within their organization, or locally during development.  The project team has taken a 'local testing first' approach to the project's development, to ensure flexibility and consistency of test results in all three of these use cases.  This session will also showcase how to set up DrupalCI for use by individuals or an organization; whether on a local development environment, or within your own private cloud.

And finally, we'll take a look at how the community can get involved, extending DrupalCI to support additional environments, new automation capabilities, or all new testing frameworks ... demonstrating a new generation of Drupal.org testing infrastructure, with the flexibility to rapidly evolve and keep up with the ever-changing needs of Drupal core, contrib, and the greater Drupal community.
Captions: 
	00:00:00,000 --> 00:00:04,950
get under way I'll apologize in advance

00:00:02,790 --> 00:00:07,230
I will admit I have not run through and

00:00:04,950 --> 00:00:08,700
timed this so i might be a little bit

00:00:07,230 --> 00:00:10,380
under it might be a little bit over

00:00:08,700 --> 00:00:11,519
anyone who was here at eight o'clock

00:00:10,380 --> 00:00:15,889
this morning i spent more time

00:00:11,519 --> 00:00:15,889
practicing singing than I did speaking

00:00:16,910 --> 00:00:21,449
this this would be our first time run

00:00:19,529 --> 00:00:24,779
which yes I know that's that's a faux

00:00:21,449 --> 00:00:26,070
pas but we'll hopefully not be overly

00:00:24,779 --> 00:00:27,320
long and we'll give you some good

00:00:26,070 --> 00:00:29,460
information that can use for

00:00:27,320 --> 00:00:32,130
understanding how Drupal see I works and

00:00:29,460 --> 00:00:33,120
how you could potentially use it in your

00:00:32,130 --> 00:00:35,340
own testing within your own

00:00:33,120 --> 00:00:43,190
organizations or how it will be deployed

00:00:35,340 --> 00:00:43,190
on drupal.org so as we get going here

00:00:51,480 --> 00:00:57,570
and technical difficulties which happen

00:00:53,760 --> 00:01:00,860
when you finish your demo environment 30

00:00:57,570 --> 00:01:00,860
seconds before you start presenting

00:01:21,230 --> 00:01:27,110
so a little bit about myself I'm a

00:01:23,930 --> 00:01:29,780
Canadian Drupal hobbyist from Regina

00:01:27,110 --> 00:01:31,250
Saskatchewan in Canada I call myself a

00:01:29,780 --> 00:01:33,260
hobbyist because my day job has

00:01:31,250 --> 00:01:36,050
absolutely nothing to do with Drupal I'm

00:01:33,260 --> 00:01:38,240
a network engineer IT consultant with

00:01:36,050 --> 00:01:40,280
the company called SaskTel which is the

00:01:38,240 --> 00:01:41,480
full service telephone provider that

00:01:40,280 --> 00:01:46,700
serves the province of saskatchewan

00:01:41,480 --> 00:01:50,390
canada we do wireline wireless IPTV the

00:01:46,700 --> 00:01:53,810
full suite of telecom services but they

00:01:50,390 --> 00:01:56,300
do absolutely no Drupal despite my best

00:01:53,810 --> 00:01:58,550
efforts for the last four years so

00:01:56,300 --> 00:02:00,320
you'll see on my badge I'm currently

00:01:58,550 --> 00:02:06,340
employed by the Drupal community when it

00:02:00,320 --> 00:02:09,290
comes to comes to my work with Drupal so

00:02:06,340 --> 00:02:11,540
on top of that i also have a that's my

00:02:09,290 --> 00:02:14,240
day job i have a dad job i'm a half-time

00:02:11,540 --> 00:02:17,570
single father to five and six-year-olds

00:02:14,240 --> 00:02:19,250
who keep me busy every second week so my

00:02:17,570 --> 00:02:20,600
evenings and weekends hobbyist is

00:02:19,250 --> 00:02:22,460
actually evenings and weekends every

00:02:20,600 --> 00:02:24,470
second week obvious which is when I

00:02:22,460 --> 00:02:26,660
spend my time doing a number of drupal

00:02:24,470 --> 00:02:28,640
jobs and you can see there's quite a

00:02:26,660 --> 00:02:31,640
large less so on top of drupal see I I

00:02:28,640 --> 00:02:33,170
was involved with the Drupal d7 launch I

00:02:31,640 --> 00:02:36,380
worked with I do some work with the

00:02:33,170 --> 00:02:37,610
infrastructure team do some work with

00:02:36,380 --> 00:02:42,260
the Technical Working Group on the

00:02:37,610 --> 00:02:44,570
governance side also worked on some

00:02:42,260 --> 00:02:48,350
contribs so extended file field is

00:02:44,570 --> 00:02:50,239
probably the the most well-known but not

00:02:48,350 --> 00:02:52,480
recognized one it's actually the module

00:02:50,239 --> 00:02:54,980
that does the files table on drupal.org

00:02:52,480 --> 00:02:59,690
so that so I'm contributing taner

00:02:54,980 --> 00:03:02,930
they're also core contributors rubicon

00:02:59,690 --> 00:03:05,530
volunteer and just whatever itch I might

00:03:02,930 --> 00:03:08,000
be happening to the scratch as far as a

00:03:05,530 --> 00:03:09,500
friends and family website module that

00:03:08,000 --> 00:03:13,100
might be needed any given time so that's

00:03:09,500 --> 00:03:15,890
it from a hobbyist perspective it's a

00:03:13,100 --> 00:03:18,310
it's a fairly fairly busy fairly busy

00:03:15,890 --> 00:03:20,930
list and I'm going to have to add

00:03:18,310 --> 00:03:24,950
Hollywood actor to that list after today

00:03:20,930 --> 00:03:28,040
as well and for today we're here talking

00:03:24,950 --> 00:03:29,530
about Drupal CI a little bit of a little

00:03:28,040 --> 00:03:31,880
bit of a overview of the agenda

00:03:29,530 --> 00:03:33,240
typically my speak my talks in this

00:03:31,880 --> 00:03:35,460
topic have been about

00:03:33,240 --> 00:03:36,960
here's the background here's here's what

00:03:35,460 --> 00:03:38,600
it's about here's why we're doing it

00:03:36,960 --> 00:03:40,890
here's the very high level architecture

00:03:38,600 --> 00:03:43,410
what I want to do today is do something

00:03:40,890 --> 00:03:46,800
a little more technical than than I have

00:03:43,410 --> 00:03:48,660
in the past and that might mean

00:03:46,800 --> 00:03:50,160
something but most of those talks in the

00:03:48,660 --> 00:03:53,580
past haven't been recorded so

00:03:50,160 --> 00:03:54,960
unfortunately I there's a I can't sort

00:03:53,580 --> 00:03:56,700
of point back and say this will give you

00:03:54,960 --> 00:03:58,230
over you and this will give you the

00:03:56,700 --> 00:04:00,120
technical details so I will go a little

00:03:58,230 --> 00:04:01,440
bit into that into that background just

00:04:00,120 --> 00:04:03,000
so that everyone's on the same page as

00:04:01,440 --> 00:04:05,520
we get into the deep dive on the test

00:04:03,000 --> 00:04:06,870
runner but from an agenda perspective a

00:04:05,520 --> 00:04:08,160
little bit of background talk about the

00:04:06,870 --> 00:04:10,380
design principles that went into the

00:04:08,160 --> 00:04:12,240
Drupal CI project some of the components

00:04:10,380 --> 00:04:14,040
of the project and then we'll jump into

00:04:12,240 --> 00:04:15,960
the meat which is the deployment models

00:04:14,040 --> 00:04:17,730
how you can use this and a deep dive

00:04:15,960 --> 00:04:20,070
into the test runner itself which is the

00:04:17,730 --> 00:04:24,090
the brains of the actual testing

00:04:20,070 --> 00:04:25,590
operation and then with time do a little

00:04:24,090 --> 00:04:27,780
bit of a demo on usage step through some

00:04:25,590 --> 00:04:35,550
steps to show here's how you might use

00:04:27,780 --> 00:04:37,050
this yourself so the goal of the

00:04:35,550 --> 00:04:38,760
modernizing test but initiative which

00:04:37,050 --> 00:04:41,610
was the initial initiative name for for

00:04:38,760 --> 00:04:43,620
Drupal see I was really an attempt to go

00:04:41,610 --> 00:04:45,480
and redesign Drupal adorbs automated

00:04:43,620 --> 00:04:47,340
testing infrastructure so the current

00:04:45,480 --> 00:04:49,740
the current testing infrastructure is

00:04:47,340 --> 00:04:52,470
built on pimp ifft which were modules

00:04:49,740 --> 00:04:55,140
that were first built in 2006 and then

00:04:52,470 --> 00:04:58,170
refreshed in 2009 so we've been running

00:04:55,140 --> 00:05:00,660
six seven years nine years on the

00:04:58,170 --> 00:05:03,800
existing architecture which in software

00:05:00,660 --> 00:05:06,450
terms of course that they're dinosaurs

00:05:03,800 --> 00:05:07,980
also we really needed to bring our

00:05:06,450 --> 00:05:11,130
testing capabilities up to speed using

00:05:07,980 --> 00:05:13,440
modern tools modern testing methods and

00:05:11,130 --> 00:05:15,990
to support modern testing frameworks

00:05:13,440 --> 00:05:18,810
pilfer and piff were built that long ago

00:05:15,990 --> 00:05:20,640
as a single purpose simple test stack we

00:05:18,810 --> 00:05:22,980
tried to extend them in order to do

00:05:20,640 --> 00:05:25,170
things like code review with the coder

00:05:22,980 --> 00:05:27,900
project but they were really architected

00:05:25,170 --> 00:05:30,180
for one purpose and drupal CI one of our

00:05:27,900 --> 00:05:32,280
goals is to build a more flexible

00:05:30,180 --> 00:05:34,020
generic job distribution framework that

00:05:32,280 --> 00:05:36,360
we can use that can evolve with the

00:05:34,020 --> 00:05:39,740
community as our testing needs change

00:05:36,360 --> 00:05:39,740
over the over the coming years

00:05:40,270 --> 00:05:44,960
another goal was to simplify the

00:05:43,160 --> 00:05:46,790
infrastructure and maintenance of the

00:05:44,960 --> 00:05:49,130
platform and we want to do this by

00:05:46,790 --> 00:05:52,130
reducing the amount of custom code in

00:05:49,130 --> 00:05:53,930
the stack reducing the barriers to entry

00:05:52,130 --> 00:05:56,270
as far as the how much code there is to

00:05:53,930 --> 00:05:58,070
learn in order to just get involved with

00:05:56,270 --> 00:06:01,910
the pitlor that it took to get involved

00:05:58,070 --> 00:06:04,010
with different projects and hopefully

00:06:01,910 --> 00:06:10,570
facilitate new contributions by lowering

00:06:04,010 --> 00:06:13,220
that barrier of entry so how we got here

00:06:10,570 --> 00:06:15,260
for about two years I talked to a number

00:06:13,220 --> 00:06:17,330
of core dev saying our testing

00:06:15,260 --> 00:06:19,220
architecture is getting old and we need

00:06:17,330 --> 00:06:21,740
to renew it we need to do something

00:06:19,220 --> 00:06:23,480
quick when we release Drupal 8 the

00:06:21,740 --> 00:06:25,220
testing architectures on Drupal 6 it's

00:06:23,480 --> 00:06:26,810
officially unsupported so you're testing

00:06:25,220 --> 00:06:30,800
Drupal 8 with an unsupported platform

00:06:26,810 --> 00:06:32,390
this is not some where we want to be and

00:06:30,800 --> 00:06:35,570
I push that for probably about 18 months

00:06:32,390 --> 00:06:37,400
did not really get anywhere and it

00:06:35,570 --> 00:06:39,560
wasn't till bad camp in 2013 that I

00:06:37,400 --> 00:06:41,690
realized that the problem was I was

00:06:39,560 --> 00:06:43,310
asking a bunch of core developers who

00:06:41,690 --> 00:06:45,530
are already really busy building Drupal

00:06:43,310 --> 00:06:46,940
8 to come help me build something new

00:06:45,530 --> 00:06:49,280
and they've got they've got enough on

00:06:46,940 --> 00:06:51,410
their plate at bad cap I walked into the

00:06:49,280 --> 00:06:52,729
DevOps I'm it said hey I have an idea to

00:06:51,410 --> 00:06:54,350
build a testing framework I want to make

00:06:52,729 --> 00:06:56,270
it look like this and I had 21 people at

00:06:54,350 --> 00:06:57,710
my table like that and I realized I'd

00:06:56,270 --> 00:07:01,250
spent two years talking to the wrong

00:06:57,710 --> 00:07:02,510
audience but a bad camp we took here's

00:07:01,250 --> 00:07:04,729
the architecture here's what we want to

00:07:02,510 --> 00:07:06,500
do said what do you think and had enough

00:07:04,729 --> 00:07:07,760
people say if I was building it that's

00:07:06,500 --> 00:07:10,160
how I build it you're on the right track

00:07:07,760 --> 00:07:11,450
so we walked out a bad camp 2013 and

00:07:10,160 --> 00:07:13,430
started a new unofficial community

00:07:11,450 --> 00:07:17,600
initiative to go out and build this

00:07:13,430 --> 00:07:20,390
project we then next step was at dev

00:07:17,600 --> 00:07:22,729
days in seg at in 2014 and we brought

00:07:20,390 --> 00:07:24,680
together a team to at the sprint to say

00:07:22,729 --> 00:07:27,080
well let's see what we can build

00:07:24,680 --> 00:07:30,080
according to this picture and within

00:07:27,080 --> 00:07:32,270
three days at Saget we had a gentleman

00:07:30,080 --> 00:07:35,270
by the name of Ricardo Amaro built a

00:07:32,270 --> 00:07:38,330
fully functional prototype of the test

00:07:35,270 --> 00:07:39,650
runner in three days which did

00:07:38,330 --> 00:07:41,390
everything from installing doctor

00:07:39,650 --> 00:07:43,690
starting the containers and running the

00:07:41,390 --> 00:07:45,680
test Suites and giving you the results

00:07:43,690 --> 00:07:46,940
from a proof-of-concept it was

00:07:45,680 --> 00:07:49,100
absolutely amazing

00:07:46,940 --> 00:07:50,870
what we did though what we did want

00:07:49,100 --> 00:07:52,940
though is to convert it over to PHP

00:07:50,870 --> 00:07:54,770
right at that time it was a single bash

00:07:52,940 --> 00:07:56,090
script we wanted to module eyes that

00:07:54,770 --> 00:07:58,100
make a little more flexible so that we

00:07:56,090 --> 00:08:01,040
could apply it to a few other areas of

00:07:58,100 --> 00:08:03,410
the community as well and so Austin was

00:08:01,040 --> 00:08:06,320
an attempt to start a rewrite Amsterdam

00:08:03,410 --> 00:08:09,230
was a very very integral from the

00:08:06,320 --> 00:08:10,670
perspective of the architecture of all

00:08:09,230 --> 00:08:14,420
the surrounding components around that

00:08:10,670 --> 00:08:16,130
test runner and then in amps Bhagat ah

00:08:14,420 --> 00:08:18,950
we went and we did some final call shun

00:08:16,130 --> 00:08:20,990
with that about a little over a month

00:08:18,950 --> 00:08:24,890
ago we brought the entire team together

00:08:20,990 --> 00:08:28,790
and that's folks from Canada the US

00:08:24,890 --> 00:08:31,640
Portugal Switzerland we've got brought

00:08:28,790 --> 00:08:33,260
manager in India one in Australia really

00:08:31,640 --> 00:08:35,780
an international team we brought

00:08:33,260 --> 00:08:37,789
everyone together in Portland funded by

00:08:35,780 --> 00:08:39,380
the d8 accelerate program in order to

00:08:37,789 --> 00:08:42,110
all get together in one room for a week

00:08:39,380 --> 00:08:45,530
and try and really progress the the

00:08:42,110 --> 00:08:48,230
initiative forward and what we walked

00:08:45,530 --> 00:08:49,760
out of there was probably about eighty

00:08:48,230 --> 00:08:51,410
percent of the way to what we need to

00:08:49,760 --> 00:08:53,450
get this actually tied into drupal.org

00:08:51,410 --> 00:08:57,350
in the future so that was absolutely

00:08:53,450 --> 00:09:00,470
fantastic are my goal and it's a bit of

00:08:57,350 --> 00:09:02,150
a stretch goal is to release an alpha

00:09:00,470 --> 00:09:03,770
version of the test runner by the end of

00:09:02,150 --> 00:09:07,520
the extended sprints at this conference

00:09:03,770 --> 00:09:08,990
so we're we're close we've got one major

00:09:07,520 --> 00:09:10,280
outstanding piece which is really just

00:09:08,990 --> 00:09:11,930
the publishing of the results after the

00:09:10,280 --> 00:09:15,110
test run runs and if we can get that

00:09:11,930 --> 00:09:19,400
will be releasing an alpha you're within

00:09:15,110 --> 00:09:22,010
the week hopefully so I talked about

00:09:19,400 --> 00:09:24,260
design principles design principles for

00:09:22,010 --> 00:09:26,570
this project modularity we wanted a

00:09:24,260 --> 00:09:28,760
number of smaller independent components

00:09:26,570 --> 00:09:29,839
a number of building blocks that we

00:09:28,760 --> 00:09:32,780
could then piece together in different

00:09:29,839 --> 00:09:34,910
ways to meet different use cases second

00:09:32,780 --> 00:09:36,110
design principle was flexibility we

00:09:34,910 --> 00:09:38,330
needed to be able to handle more than

00:09:36,110 --> 00:09:40,730
just simple test testing we want to be

00:09:38,330 --> 00:09:43,070
able to do B hat front-end frameworks a

00:09:40,730 --> 00:09:44,300
be testing performance testing we want

00:09:43,070 --> 00:09:47,270
to be able to automate tasks in the

00:09:44,300 --> 00:09:49,670
issue queue and as well we want to be

00:09:47,270 --> 00:09:51,560
able to support the community with their

00:09:49,670 --> 00:09:52,850
own custom test scripts and testing

00:09:51,560 --> 00:09:56,720
capabilities that they want that they

00:09:52,850 --> 00:09:58,310
want to to try so so from an

00:09:56,720 --> 00:09:59,980
extensibility perspective we want the

00:09:58,310 --> 00:10:04,330
community to be able to contribute

00:09:59,980 --> 00:10:05,590
new functionality to the platform so as

00:10:04,330 --> 00:10:07,360
will see a little later we've got a

00:10:05,590 --> 00:10:09,490
plug-in based architecture which really

00:10:07,360 --> 00:10:12,160
should simplify that process the process

00:10:09,490 --> 00:10:14,290
of the community coming in and giving us

00:10:12,160 --> 00:10:16,840
their own testing capabilities or

00:10:14,290 --> 00:10:19,900
building out their own needs on the

00:10:16,840 --> 00:10:21,940
framework that we produced other design

00:10:19,900 --> 00:10:23,050
principles multi-purpose once again we

00:10:21,940 --> 00:10:24,730
don't want to build a single stack

00:10:23,050 --> 00:10:26,230
simple test testing framework anymore we

00:10:24,730 --> 00:10:29,620
need a multi-purpose architecture and

00:10:26,230 --> 00:10:32,170
the last one here is local first eighty

00:10:29,620 --> 00:10:34,090
percent of the time in my first two

00:10:32,170 --> 00:10:36,790
years as a test but maintainer was spent

00:10:34,090 --> 00:10:39,040
answering the question it works on my

00:10:36,790 --> 00:10:43,120
sheen my machine but doesn't pass in the

00:10:39,040 --> 00:10:46,450
test spot why and so number one on my

00:10:43,120 --> 00:10:48,190
plate is building a system that when

00:10:46,450 --> 00:10:49,870
someone comes and asked why doesn't pass

00:10:48,190 --> 00:10:51,760
in the test spot we can give them the

00:10:49,870 --> 00:10:53,410
test spot have them test debug and

00:10:51,760 --> 00:10:55,150
troubleshoot locally and take that off

00:10:53,410 --> 00:10:57,370
the maintainer plate so that's

00:10:55,150 --> 00:10:59,530
definitely a major goal with this

00:10:57,370 --> 00:11:01,150
initiative and I think we've I think

00:10:59,530 --> 00:11:03,220
we've done a good job on that the

00:11:01,150 --> 00:11:04,930
approach we took was building the local

00:11:03,220 --> 00:11:06,430
testing environment first and then

00:11:04,930 --> 00:11:11,380
extending it to work on on drupal.org

00:11:06,430 --> 00:11:12,790
and the surrounding architecture so we

00:11:11,380 --> 00:11:14,230
talk about components there's a number

00:11:12,790 --> 00:11:15,730
of different architecture components

00:11:14,230 --> 00:11:18,430
that are involved in the full end-to-end

00:11:15,730 --> 00:11:20,980
stack we've got drupal.org which

00:11:18,430 --> 00:11:23,230
initiates test requests at both on

00:11:20,980 --> 00:11:24,580
commit and on demand so we had to

00:11:23,230 --> 00:11:26,710
develop some integration with drupal org

00:11:24,580 --> 00:11:29,340
that can feed stuff off to our offer our

00:11:26,710 --> 00:11:32,410
environment we've got an API layer that

00:11:29,340 --> 00:11:35,410
interfaces between drupal.org and our

00:11:32,410 --> 00:11:37,300
dispatcher and this gives us a lot of

00:11:35,410 --> 00:11:40,060
flexibility in the future so what this

00:11:37,300 --> 00:11:42,400
allows us to do for example is with a

00:11:40,060 --> 00:11:44,320
single dispatcher we can take requests

00:11:42,400 --> 00:11:45,970
in from drupal.org or we can take them

00:11:44,320 --> 00:11:49,810
in from say a private security dr.

00:11:45,970 --> 00:11:52,030
Pollard org site or we could change out

00:11:49,810 --> 00:11:54,610
the Jenkins dispatcher in the back end

00:11:52,030 --> 00:11:56,680
when the next new excellent dispatch

00:11:54,610 --> 00:11:58,120
product comes along so so we've provided

00:11:56,680 --> 00:11:59,470
some abstraction layers to make this

00:11:58,120 --> 00:12:01,390
module enough that we can change out

00:11:59,470 --> 00:12:03,250
chunks of the product without having to

00:12:01,390 --> 00:12:06,640
change the code on drupal.org or help or

00:12:03,250 --> 00:12:08,020
the code on the test pot itself then the

00:12:06,640 --> 00:12:10,360
dispatcher as I mentioned we've got a

00:12:08,020 --> 00:12:12,730
Jenkins server that's running our job

00:12:10,360 --> 00:12:13,660
distribution it's responsible both for

00:12:12,730 --> 00:12:18,820
job dispatch

00:12:13,660 --> 00:12:21,340
but also for the the load our load on

00:12:18,820 --> 00:12:24,340
demand so with Jenkins we can have

00:12:21,340 --> 00:12:27,520
Jenkins detect that hey I need this many

00:12:24,340 --> 00:12:29,850
tests spots where they're all busy and I

00:12:27,520 --> 00:12:33,040
can go to AWS and spin up more as needed

00:12:29,850 --> 00:12:34,960
right now that's a human action so when

00:12:33,040 --> 00:12:36,910
we get ready for a sprint we've got

00:12:34,960 --> 00:12:38,950
right now Archie sitting down at a

00:12:36,910 --> 00:12:40,630
computer for little while building test

00:12:38,950 --> 00:12:43,570
spots in preparation for the sprint and

00:12:40,630 --> 00:12:45,790
if we're ever behind and we never catch

00:12:43,570 --> 00:12:47,820
up because that that demand build so

00:12:45,790 --> 00:12:51,430
quickly come come I mean Portland I

00:12:47,820 --> 00:12:53,770
arrived at the Portland sprint I was

00:12:51,430 --> 00:12:55,630
about 20 minutes late there was already

00:12:53,770 --> 00:12:57,250
100 patches in the queue at the peak

00:12:55,630 --> 00:12:59,380
there was 300 patches in the queue and

00:12:57,250 --> 00:13:02,800
by two o'clock in the afternoon we had

00:12:59,380 --> 00:13:04,330
50 test box built so so that on demand

00:13:02,800 --> 00:13:05,950
feature is actually going to be really

00:13:04,330 --> 00:13:10,120
key to moving forward in the maintenance

00:13:05,950 --> 00:13:12,040
of the of the architecture for us then

00:13:10,120 --> 00:13:13,780
we've got the test runner that generates

00:13:12,040 --> 00:13:15,520
a test environment that executes the job

00:13:13,780 --> 00:13:17,200
that's that's the brains of the actual

00:13:15,520 --> 00:13:19,060
testing operation and I'll do a deep

00:13:17,200 --> 00:13:20,710
dive into that a little later and then

00:13:19,060 --> 00:13:22,360
we've got a results API so that's an

00:13:20,710 --> 00:13:24,730
abstraction layer between the test

00:13:22,360 --> 00:13:27,670
runner and the results server now the

00:13:24,730 --> 00:13:31,660
reason we've done this is to be able to

00:13:27,670 --> 00:13:33,640
for example have the drupal.org result

00:13:31,660 --> 00:13:36,130
server that we're sending results to but

00:13:33,640 --> 00:13:38,380
you could also have say your own private

00:13:36,130 --> 00:13:41,620
results server that you also want to

00:13:38,380 --> 00:13:42,910
send those to or as a deployment model

00:13:41,620 --> 00:13:46,050
which I'll get into into a sec in a

00:13:42,910 --> 00:13:48,160
second we can do a public results server

00:13:46,050 --> 00:13:49,660
separate from the drupal.org results

00:13:48,160 --> 00:13:51,700
server that works kind of like a paste

00:13:49,660 --> 00:13:57,130
bin environment and I'll get into that

00:13:51,700 --> 00:13:58,510
in a second so deployment models of

00:13:57,130 --> 00:14:00,730
course as I talked to we have local

00:13:58,510 --> 00:14:02,620
testing first that's you working with

00:14:00,730 --> 00:14:05,020
your local laptop that's you with your

00:14:02,620 --> 00:14:07,210
own EWS instance doing doing testing of

00:14:05,020 --> 00:14:11,080
whatever you're working on but we can

00:14:07,210 --> 00:14:12,460
also with the a test spot and your own

00:14:11,080 --> 00:14:13,870
result server we can support a private

00:14:12,460 --> 00:14:16,540
stack so this might be within a company

00:14:13,870 --> 00:14:17,800
you've got multiple devs and you've got

00:14:16,540 --> 00:14:20,830
your own results server that you want to

00:14:17,800 --> 00:14:23,920
show just like drupal.org would but as a

00:14:20,830 --> 00:14:25,390
private instance a slightly larger

00:14:23,920 --> 00:14:25,980
company might put a Jenkins server in

00:14:25,390 --> 00:14:27,840
the middle of that

00:14:25,980 --> 00:14:29,850
so we've built this with components in

00:14:27,840 --> 00:14:31,860
such a way that ended and made them all

00:14:29,850 --> 00:14:33,960
public for the community to be able to

00:14:31,860 --> 00:14:35,640
use this and implement their own stack

00:14:33,960 --> 00:14:39,030
using these components if desired as

00:14:35,640 --> 00:14:40,680
well so there's the drupal.org stack

00:14:39,030 --> 00:14:42,030
which of course is when you start

00:14:40,680 --> 00:14:42,990
talking public stacks that's the one

00:14:42,030 --> 00:14:45,750
that everyone is going to be familiar

00:14:42,990 --> 00:14:50,340
with but we did want to be flexible

00:14:45,750 --> 00:14:52,800
enough to meet multiple use cases so the

00:14:50,340 --> 00:14:55,200
this paste bin concept that I that I

00:14:52,800 --> 00:14:57,420
mentioned imagine that you as a

00:14:55,200 --> 00:14:59,640
developer have done some code you've

00:14:57,420 --> 00:15:02,130
wrote a patch it gets you've test it

00:14:59,640 --> 00:15:05,370
locally and you get a fan and you don't

00:15:02,130 --> 00:15:07,170
know where that fail is coming from what

00:15:05,370 --> 00:15:08,510
we could do potentially and what we've

00:15:07,170 --> 00:15:11,640
been talking about doing with this is

00:15:08,510 --> 00:15:14,190
put up a short-term results server where

00:15:11,640 --> 00:15:16,200
you can then type in a command that will

00:15:14,190 --> 00:15:18,600
zip up your entire environment including

00:15:16,200 --> 00:15:24,660
your database your web directories your

00:15:18,600 --> 00:15:27,600
test results the event and and the

00:15:24,660 --> 00:15:29,940
output of the job run zip that all up

00:15:27,600 --> 00:15:31,350
load it up to a result server that

00:15:29,940 --> 00:15:33,510
someone else can now pull it down and

00:15:31,350 --> 00:15:35,190
they have the test run that you just ran

00:15:33,510 --> 00:15:37,830
there in front of them for them to

00:15:35,190 --> 00:15:39,150
troubleshoot we have a lot of fails in

00:15:37,830 --> 00:15:40,860
Drupal that are that are sort of a

00:15:39,150 --> 00:15:43,110
random nature we have things that fail

00:15:40,860 --> 00:15:44,820
and then people can't reproduce the

00:15:43,110 --> 00:15:48,270
failure and so they upload the same

00:15:44,820 --> 00:15:49,410
patch to QA do a hundred times hoping

00:15:48,270 --> 00:15:51,960
that one of them fails and they happen

00:15:49,410 --> 00:15:53,400
to catch it you can debug it well now we

00:15:51,960 --> 00:15:56,460
can take that random fail when it

00:15:53,400 --> 00:15:59,700
happens locally and the plan would be to

00:15:56,460 --> 00:16:02,760
upload it share it debug it together and

00:15:59,700 --> 00:16:04,500
then expire it off that result server

00:16:02,760 --> 00:16:05,940
after three days and you're able to

00:16:04,500 --> 00:16:08,400
upload at drupal org when you've got the

00:16:05,940 --> 00:16:09,840
trouble trouble solved so so those are

00:16:08,400 --> 00:16:11,280
the types of those are the types of

00:16:09,840 --> 00:16:13,650
things that we want two types of

00:16:11,280 --> 00:16:16,500
features that we want to try and enable

00:16:13,650 --> 00:16:18,660
for the community something more than

00:16:16,500 --> 00:16:22,200
just upload a patch the issue queue and

00:16:18,660 --> 00:16:24,300
have that patch returned an hour later

00:16:22,200 --> 00:16:28,160
sorry it failed and then having to go

00:16:24,300 --> 00:16:28,160
try and reproduce that yourself

00:16:28,440 --> 00:16:33,370
another deployment model here which I

00:16:30,730 --> 00:16:36,970
didn't put up on the slide is is looking

00:16:33,370 --> 00:16:40,300
in the drupal org stack being able to do

00:16:36,970 --> 00:16:41,710
non testing jobs so the framework that

00:16:40,300 --> 00:16:45,640
we've built and the way that we built it

00:16:41,710 --> 00:16:48,730
could support for example a job type

00:16:45,640 --> 00:16:51,280
that automatically creates an intern if

00:16:48,730 --> 00:16:52,720
when you pass it an issue note we've got

00:16:51,280 --> 00:16:54,220
a Jenkins server we've got the

00:16:52,720 --> 00:16:56,920
environment we got the code check out

00:16:54,220 --> 00:16:58,750
there's no reason we can't just go in do

00:16:56,920 --> 00:17:00,220
the get apply do what we need generate a

00:16:58,750 --> 00:17:02,650
file and spit it back up to drupal.org

00:17:00,220 --> 00:17:05,050
so we're also looking to looking to

00:17:02,650 --> 00:17:06,579
enable issue queue maintenance tasks and

00:17:05,050 --> 00:17:13,209
take some of that manual work away from

00:17:06,579 --> 00:17:15,610
the community as well so I'm going to

00:17:13,209 --> 00:17:18,339
get into the the actual test runner

00:17:15,610 --> 00:17:20,260
itself now and this is the project is

00:17:18,339 --> 00:17:23,890
Drupal see i underscore test but it's on

00:17:20,260 --> 00:17:28,180
drupal org and this is the the brains of

00:17:23,890 --> 00:17:29,770
the testing operation I wanted to

00:17:28,180 --> 00:17:32,320
provide some understanding about how it

00:17:29,770 --> 00:17:33,280
functions how it operates and hopefully

00:17:32,320 --> 00:17:35,770
give the community some of the

00:17:33,280 --> 00:17:37,990
background on what they would need to do

00:17:35,770 --> 00:17:39,670
in order to take it forward use it for

00:17:37,990 --> 00:17:41,140
their own uses and or extend it to

00:17:39,670 --> 00:17:43,240
provide additional testing functionality

00:17:41,140 --> 00:17:47,620
so so everything can be found on

00:17:43,240 --> 00:17:50,860
drupal.org the application itself is a

00:17:47,620 --> 00:17:52,390
symphony console application so for

00:17:50,860 --> 00:17:54,880
anyone who's not familiar with symphony

00:17:52,390 --> 00:17:57,570
console it's a it's an extension on the

00:17:54,880 --> 00:17:59,710
symphony framework that is built for

00:17:57,570 --> 00:18:01,750
really leverage itself for building

00:17:59,710 --> 00:18:03,670
command lion applications so this is a

00:18:01,750 --> 00:18:06,520
command-line application written in

00:18:03,670 --> 00:18:08,680
symphony console and in the in the

00:18:06,520 --> 00:18:11,470
director in the directory tree there on

00:18:08,680 --> 00:18:15,910
the on the right source drupal CI

00:18:11,470 --> 00:18:17,650
contains the symphony console code so if

00:18:15,910 --> 00:18:19,630
anyone's built with symphony console

00:18:17,650 --> 00:18:24,250
before that aspect of it should be quite

00:18:19,630 --> 00:18:27,820
familiar on top of that we've built a

00:18:24,250 --> 00:18:30,760
plug-in based architecture so if you've

00:18:27,820 --> 00:18:32,260
worked with Drupal 8 a lot of the stuff

00:18:30,760 --> 00:18:35,200
in there should also look familiar

00:18:32,260 --> 00:18:38,050
because we pulled in Drupal's plug-in

00:18:35,200 --> 00:18:41,280
discovery and plug-in annotation methods

00:18:38,050 --> 00:18:43,260
from Drupal 8 so what we're doing in or

00:18:41,280 --> 00:18:44,880
or to discover plugins on the testing

00:18:43,260 --> 00:18:46,500
framework we're using the drupal

00:18:44,880 --> 00:18:48,420
component reusing the drupal components

00:18:46,500 --> 00:18:50,940
in order to do that so if you've done d8

00:18:48,420 --> 00:18:55,440
development that part should also look

00:18:50,940 --> 00:18:58,020
familiar to you in Drupal CI now even

00:18:55,440 --> 00:19:00,120
more specifically the architecture of

00:18:58,020 --> 00:19:02,460
that plug-in or what we do with those

00:19:00,120 --> 00:19:05,510
plugins if you worked on my great in

00:19:02,460 --> 00:19:07,800
Drupal 8 this will look very familiar

00:19:05,510 --> 00:19:09,420
during our portland sprint chicks turned

00:19:07,800 --> 00:19:12,900
to me and said yeah this looks exactly

00:19:09,420 --> 00:19:14,790
like my great so so the so if you're

00:19:12,900 --> 00:19:16,710
familiar with my great this should also

00:19:14,790 --> 00:19:18,660
look very familiar to you at the barrier

00:19:16,710 --> 00:19:20,460
to entry at once again should not be

00:19:18,660 --> 00:19:22,140
anywhere near as high as it was with pen

00:19:20,460 --> 00:19:23,730
and paper it took me about eight months

00:19:22,140 --> 00:19:27,930
to learn that code enough to be able to

00:19:23,730 --> 00:19:30,240
support it properly so i mentioned it's

00:19:27,930 --> 00:19:32,840
a plug-in based architecture we have

00:19:30,240 --> 00:19:36,450
three main super categories of plugins

00:19:32,840 --> 00:19:39,330
so we've got job types a job type might

00:19:36,450 --> 00:19:42,180
be simple test might be phpunit might be

00:19:39,330 --> 00:19:44,430
creating interred if we've got build

00:19:42,180 --> 00:19:46,680
steps which are little which are the

00:19:44,430 --> 00:19:49,170
incremental steps that happen during a

00:19:46,680 --> 00:19:51,990
given job and we have a number of

00:19:49,170 --> 00:19:59,120
pre-processing plugins and i'll get into

00:19:51,990 --> 00:20:01,800
each of those so we talk about job types

00:19:59,120 --> 00:20:03,630
the job type is really the large

00:20:01,800 --> 00:20:05,880
category / what we're doing so if we're

00:20:03,630 --> 00:20:08,160
doing a B hat test will have a B head

00:20:05,880 --> 00:20:10,610
job type if we're doing a selenium tests

00:20:08,160 --> 00:20:14,280
will probably have a selenium job type

00:20:10,610 --> 00:20:16,140
what those types consists of is a job

00:20:14,280 --> 00:20:17,580
definition template which step which

00:20:16,140 --> 00:20:20,370
just defines here's the things that I

00:20:17,580 --> 00:20:22,380
need to do and a class that defines

00:20:20,370 --> 00:20:24,960
here's the different variables that I

00:20:22,380 --> 00:20:26,520
need to do that work here's the default

00:20:24,960 --> 00:20:29,040
values for those variables and here's

00:20:26,520 --> 00:20:33,720
any custom melt logic that I need so so

00:20:29,040 --> 00:20:35,960
if I switch over it here pull up what my

00:20:33,720 --> 00:20:35,960
environment

00:20:40,349 --> 00:20:43,709
screen for you

00:20:46,240 --> 00:20:51,610
that's not going to help at all is it so

00:20:49,420 --> 00:20:55,720
this is this is the job template for our

00:20:51,610 --> 00:20:57,010
PHP unit test and essentially I mean

00:20:55,720 --> 00:20:59,890
this should look familiar to folks who

00:20:57,010 --> 00:21:04,380
work with some CI program or CI systems

00:20:59,890 --> 00:21:04,380
before yeah let's bring that up

00:21:07,900 --> 00:21:12,660
what's that what's the zoom keyboard

00:21:09,880 --> 00:21:12,660
shortcut for phpstorm

00:21:34,730 --> 00:21:37,360
yep

00:21:41,880 --> 00:21:49,100
that gives me settings that doesn't give

00:21:43,530 --> 00:21:49,100
me any more not on that particular page

00:21:55,000 --> 00:21:59,200
no that was the first thing I tried

00:22:08,250 --> 00:22:10,910
yes

00:22:34,759 --> 00:22:41,089
well that's the setting and doesn't do

00:22:36,409 --> 00:22:44,379
it either no I just turned on can change

00:22:41,089 --> 00:22:44,379
change font size with the mouse wheel

00:23:07,520 --> 00:23:12,850
yep not edible right now because I'm in

00:23:10,250 --> 00:23:12,850
the middle of something

00:23:22,630 --> 00:23:27,460
so apologies for the small punt but this

00:23:26,080 --> 00:23:29,620
should look familiar if you've done some

00:23:27,460 --> 00:23:32,380
some see I worked what what it's got its

00:23:29,620 --> 00:23:35,380
it's a llamo file its key based it's got

00:23:32,380 --> 00:23:40,660
the build steps and each step then has

00:23:35,380 --> 00:23:43,000
some sub steps the first the the parent

00:23:40,660 --> 00:23:45,550
keys here are actually mapped to build

00:23:43,000 --> 00:23:51,100
step plugins and then the secondary keys

00:23:45,550 --> 00:23:54,730
are mapped to pre-process plugins so

00:23:51,100 --> 00:23:57,460
we've got environment web and then we've

00:23:54,730 --> 00:23:59,230
got inside percent science DCI PHP

00:23:57,460 --> 00:24:01,630
version so what this is is a variable

00:23:59,230 --> 00:24:04,570
substitution template basically so if

00:24:01,630 --> 00:24:07,180
you are to set DCI PHP version equals

00:24:04,570 --> 00:24:09,310
5.4 when you do the Drupal see I run

00:24:07,180 --> 00:24:11,050
command it'll substitute that in and

00:24:09,310 --> 00:24:13,450
it'll choose that the appropriate

00:24:11,050 --> 00:24:16,180
container for your 5 php5 dot for

00:24:13,450 --> 00:24:19,570
environment it then runs through setup

00:24:16,180 --> 00:24:21,760
steps and check out to get check out and

00:24:19,570 --> 00:24:24,240
the syntax for defining it yet check out

00:24:21,760 --> 00:24:26,500
and then it runs an execute which is

00:24:24,240 --> 00:24:28,890
again just placeholders right now but

00:24:26,500 --> 00:24:31,480
DCI run script the default is phpunit

00:24:28,890 --> 00:24:33,310
options run options includes things like

00:24:31,480 --> 00:24:35,140
color and some of the default options

00:24:33,310 --> 00:24:37,120
that you might want on phpunit and then

00:24:35,140 --> 00:24:38,640
the run target which is the the groups

00:24:37,120 --> 00:24:41,470
for example that you might want to run

00:24:38,640 --> 00:24:43,150
all of that because it's variable

00:24:41,470 --> 00:24:45,100
substitution and we have plugins for it

00:24:43,150 --> 00:24:47,230
can be customized by setting environment

00:24:45,100 --> 00:24:52,960
variables on your local machine as you

00:24:47,230 --> 00:24:56,080
run it the class itself is is very small

00:24:52,960 --> 00:24:57,700
it's got available arguments just from a

00:24:56,080 --> 00:24:59,770
documentation perspective be nice to

00:24:57,700 --> 00:25:01,900
show people what arguments you can use

00:24:59,770 --> 00:25:04,870
for running on that job and the default

00:25:01,900 --> 00:25:06,430
default values for those arguments so as

00:25:04,870 --> 00:25:10,530
we're building a new job type that's

00:25:06,430 --> 00:25:10,530
really we need to define those two files

00:25:17,250 --> 00:25:22,340
so that's the definition template and

00:25:19,050 --> 00:25:22,340
the job class

00:25:28,260 --> 00:25:30,320
you

00:25:33,159 --> 00:25:37,919
and now we got into the wonderful state

00:25:35,049 --> 00:25:37,919
i started listen

00:26:09,560 --> 00:26:14,530
so apparently the slide transitions are

00:26:11,450 --> 00:26:14,530
not going to be my friend today

00:26:18,490 --> 00:26:26,440
so the next plug-in type that we have

00:26:20,650 --> 00:26:28,480
are the build steps so these are these

00:26:26,440 --> 00:26:30,760
are the build steps which are available

00:26:28,480 --> 00:26:34,540
as plugins in the system right now so

00:26:30,760 --> 00:26:36,630
configure valid a setup and environment

00:26:34,540 --> 00:26:38,710
these four will run on any job type

00:26:36,630 --> 00:26:40,120
configure basically pulls together all

00:26:38,710 --> 00:26:42,130
your environment variables builds out

00:26:40,120 --> 00:26:43,630
your job definition validate make sure

00:26:42,130 --> 00:26:45,760
that you have all your required

00:26:43,630 --> 00:26:47,380
variables and then set up sets up your

00:26:45,760 --> 00:26:50,200
directories does your code checkouts

00:26:47,380 --> 00:26:52,690
does your copies gets the code base that

00:26:50,200 --> 00:26:54,760
you want tested set up and then

00:26:52,690 --> 00:26:56,080
environment defines what containers

00:26:54,760 --> 00:26:58,000
you're going to use in order to do that

00:26:56,080 --> 00:27:00,280
so those four will run on any type after

00:26:58,000 --> 00:27:02,380
that we've got installed xq complete

00:27:00,280 --> 00:27:05,830
success failure publish these are just

00:27:02,380 --> 00:27:09,190
examples and as long as a plug-in exists

00:27:05,830 --> 00:27:11,290
and you can use sorry you can put

00:27:09,190 --> 00:27:13,240
whatever you want at in as a build step

00:27:11,290 --> 00:27:19,600
and if a plugin exists for it it will

00:27:13,240 --> 00:27:22,000
execute the logic in that plugin so when

00:27:19,600 --> 00:27:24,580
we looked at the phpunit template we

00:27:22,000 --> 00:27:27,309
basically had environment and execute

00:27:24,580 --> 00:27:28,660
there's no drupal install step so that

00:27:27,309 --> 00:27:34,330
was all we needed for that for that

00:27:28,660 --> 00:27:36,250
particular template so then within each

00:27:34,330 --> 00:27:39,910
build step there are sub steps that are

00:27:36,250 --> 00:27:43,150
run and not all sub steps are tied to a

00:27:39,910 --> 00:27:45,280
single build step so inside setup we

00:27:43,150 --> 00:27:46,870
have check out we have fetch we have

00:27:45,280 --> 00:27:48,070
patch we have different setup steps that

00:27:46,870 --> 00:27:50,710
you might want to do to build up your

00:27:48,070 --> 00:27:53,350
environment however something like

00:27:50,710 --> 00:27:54,970
command which runs an arbitrary script

00:27:53,350 --> 00:27:57,340
or an arbitrary command you might want

00:27:54,970 --> 00:27:59,890
to do that and inside any build steps so

00:27:57,340 --> 00:28:01,809
there's a generic build step which

00:27:59,890 --> 00:28:05,800
contains those types of tasks you might

00:28:01,809 --> 00:28:08,800
want to do at any point so inside the

00:28:05,800 --> 00:28:10,870
directory structure these are the

00:28:08,800 --> 00:28:13,120
directories under the plugins directory

00:28:10,870 --> 00:28:16,059
so if you look at plugins build steps

00:28:13,120 --> 00:28:17,470
you get these step or these build step

00:28:16,059 --> 00:28:19,740
directories and then the plugins that

00:28:17,470 --> 00:28:22,809
can operate inside that directory are

00:28:19,740 --> 00:28:26,250
located sorry inside that build step are

00:28:22,809 --> 00:28:26,250
located in those individual directories

00:28:27,580 --> 00:28:31,760
and then I mentioned it's not a

00:28:29,990 --> 00:28:34,670
hard-coded list of build steps that your

00:28:31,760 --> 00:28:37,280
jobs need to fit into it's easily

00:28:34,670 --> 00:28:39,350
extensible with new build steps you can

00:28:37,280 --> 00:28:43,670
just add the plug-in that has the logic

00:28:39,350 --> 00:28:46,340
require for that and as long as you as

00:28:43,670 --> 00:28:47,930
long as you make that available we're

00:28:46,340 --> 00:28:50,180
more than happy to also contribute it

00:28:47,930 --> 00:28:52,550
back to the project so that other builds

00:28:50,180 --> 00:28:55,570
or other people can also use that logic

00:28:52,550 --> 00:28:55,570
and extend it forward

00:29:03,960 --> 00:29:08,970
so the third type of plug-in is

00:29:05,610 --> 00:29:11,970
preprocessed plugins and this is really

00:29:08,970 --> 00:29:14,550
where a lot of our magic happens there's

00:29:11,970 --> 00:29:16,920
two types there's a definition

00:29:14,550 --> 00:29:19,920
pre-processing and then there's variable

00:29:16,920 --> 00:29:23,010
pre-processing so when I showed that

00:29:19,920 --> 00:29:25,500
template it had those build steps you'll

00:29:23,010 --> 00:29:27,840
notice for that phpunit there was no

00:29:25,500 --> 00:29:29,730
there was no setup build step so there's

00:29:27,840 --> 00:29:32,700
no patching there was no fetching

00:29:29,730 --> 00:29:39,780
patches or applying patches in that by

00:29:32,700 --> 00:29:43,140
defining a DCI fetch variable it will go

00:29:39,780 --> 00:29:45,780
out look for the fetch definition

00:29:43,140 --> 00:29:47,130
preprocessor which essentially adds the

00:29:45,780 --> 00:29:49,020
section to the job definition that you

00:29:47,130 --> 00:29:51,180
need to do to fetch a patch so once

00:29:49,020 --> 00:29:53,880
again you set DCI fetch with prep for

00:29:51,180 --> 00:29:58,080
syntax it will insert that into the job

00:29:53,880 --> 00:29:59,340
type for you so so the phpunit job you

00:29:58,080 --> 00:30:00,810
may want to run on just the straight

00:29:59,340 --> 00:30:02,610
codebase you may want to patch it you

00:30:00,810 --> 00:30:04,140
may want to run it after the patch all

00:30:02,610 --> 00:30:05,520
that flexibilities handle with the same

00:30:04,140 --> 00:30:10,320
template through the use of these

00:30:05,520 --> 00:30:12,870
pre-processing plugins so a definition

00:30:10,320 --> 00:30:15,900
pre-processing plug-in adds a new

00:30:12,870 --> 00:30:17,390
section to the job definition and then

00:30:15,900 --> 00:30:20,160
that's why we call it definition and

00:30:17,390 --> 00:30:23,400
that section then does the variable

00:30:20,160 --> 00:30:25,830
substitution that we that we had however

00:30:23,400 --> 00:30:28,110
we learned very quickly that that wasn't

00:30:25,830 --> 00:30:30,210
quite enough we had variables that we

00:30:28,110 --> 00:30:32,940
might want to set that don't directly

00:30:30,210 --> 00:30:35,490
substitute into the template but

00:30:32,940 --> 00:30:37,500
actually change or augment the value of

00:30:35,490 --> 00:30:38,850
another variable so that's where we

00:30:37,500 --> 00:30:43,560
created this concept of variable

00:30:38,850 --> 00:30:46,710
preprocessors an example here is the DCI

00:30:43,560 --> 00:30:48,090
run script variable defines what is the

00:30:46,710 --> 00:30:50,040
run script that you actually want to

00:30:48,090 --> 00:30:53,840
kick off this job with so for phpunit

00:30:50,040 --> 00:30:56,640
the run script variable is phpunit but

00:30:53,840 --> 00:31:00,180
you may want to add an alternative

00:30:56,640 --> 00:31:02,460
argument to that and so when you run the

00:31:00,180 --> 00:31:04,620
run script we don't want to run PHP unit

00:31:02,460 --> 00:31:07,520
we might want to run phpunit dash X Y

00:31:04,620 --> 00:31:10,500
Zed and so what we needed was a way of

00:31:07,520 --> 00:31:14,190
adding take an environment variable that

00:31:10,500 --> 00:31:15,780
would then change the value of another

00:31:14,190 --> 00:31:16,850
environment variable and that's what

00:31:15,780 --> 00:31:20,710
these variable

00:31:16,850 --> 00:31:20,710
processing tasks do

00:31:30,119 --> 00:31:35,819
so as we move forward terrible coloring

00:31:33,029 --> 00:31:37,649
their test runner execution there's a

00:31:35,819 --> 00:31:41,099
class called run command which is the

00:31:37,649 --> 00:31:42,599
symphony console run command it doesn't

00:31:41,099 --> 00:31:44,279
compile your definition validate your

00:31:42,599 --> 00:31:46,619
definition set up your directories and

00:31:44,279 --> 00:31:50,339
then for each build step loops over the

00:31:46,619 --> 00:31:53,629
sub steps and execute run very very

00:31:50,339 --> 00:31:56,789
basic logic flow from that perspective

00:31:53,629 --> 00:31:58,589
the steps that are that we have the four

00:31:56,789 --> 00:32:00,839
that I talked about that will really be

00:31:58,589 --> 00:32:02,459
there on any on any job include

00:32:00,839 --> 00:32:05,129
environment which starts your service

00:32:02,459 --> 00:32:07,949
containers and starts your executable

00:32:05,129 --> 00:32:09,389
containers then we've got the setup

00:32:07,949 --> 00:32:11,759
build step which sets up your working

00:32:09,389 --> 00:32:13,559
directories does your coffee or your

00:32:11,759 --> 00:32:17,069
check out of your code and he fetches

00:32:13,559 --> 00:32:19,529
any patches and any permission changes

00:32:17,069 --> 00:32:23,399
that you might need so it sets up the

00:32:19,529 --> 00:32:25,829
code base on your local machine the

00:32:23,399 --> 00:32:27,629
environment step starting those

00:32:25,829 --> 00:32:29,159
executable containers then maps that

00:32:27,629 --> 00:32:32,819
local code base into the container set

00:32:29,159 --> 00:32:34,289
it can be operated on then the execute

00:32:32,819 --> 00:32:35,999
build steps runs test scripts and

00:32:34,289 --> 00:32:37,859
commands and then what we'll have at the

00:32:35,999 --> 00:32:39,149
end which wasn't in my templates because

00:32:37,859 --> 00:32:41,789
it's the outstanding piece we need to

00:32:39,149 --> 00:32:43,919
develop is the publish build step which

00:32:41,789 --> 00:32:48,059
gathers all your artifacts together runs

00:32:43,919 --> 00:32:51,929
your email notifications or or rest

00:32:48,059 --> 00:32:55,349
posts notifications or publishing to the

00:32:51,929 --> 00:32:56,879
Drupal result server so that last circle

00:32:55,349 --> 00:33:00,179
there is the outstanding piece that is

00:32:56,879 --> 00:33:02,779
preventing us or that is in between us

00:33:00,179 --> 00:33:02,779
and our alpha release

00:33:04,400 --> 00:33:08,390
we talked about containers these are all

00:33:06,650 --> 00:33:11,990
doctor containers and what we're

00:33:08,390 --> 00:33:14,240
providing is a number a full container

00:33:11,990 --> 00:33:15,800
stack for both the service containers

00:33:14,240 --> 00:33:19,280
all the databases for the environment

00:33:15,800 --> 00:33:21,500
support as well as the PHP and or web

00:33:19,280 --> 00:33:25,280
container stack for different versions

00:33:21,500 --> 00:33:27,020
of PHP we've got a stack it's it's it's

00:33:25,280 --> 00:33:29,030
a layered stack if you're familiar with

00:33:27,020 --> 00:33:31,790
dr. we try to take advantage of the

00:33:29,030 --> 00:33:32,870
caching but we since moved it to dr. hub

00:33:31,790 --> 00:33:36,530
which doesn't pay attention to the

00:33:32,870 --> 00:33:38,090
caching and that so so you'll have the

00:33:36,530 --> 00:33:40,700
containers there can build them locally

00:33:38,090 --> 00:33:42,440
if you want to pull then it might which

00:33:40,700 --> 00:33:43,520
is our default mechanism it might take a

00:33:42,440 --> 00:33:45,470
little while to build at the first time

00:33:43,520 --> 00:33:48,260
and as we get into demo there I can show

00:33:45,470 --> 00:33:49,940
you some of that but the container types

00:33:48,260 --> 00:33:51,470
there's two types there's executable

00:33:49,940 --> 00:33:52,880
containers and service containers your

00:33:51,470 --> 00:33:55,430
service containers are the databases

00:33:52,880 --> 00:33:57,200
essentially so they run as a service and

00:33:55,430 --> 00:33:58,970
then when you start your executable

00:33:57,200 --> 00:34:00,560
container to do the testing it'll

00:33:58,970 --> 00:34:02,330
connect link across to the database

00:34:00,560 --> 00:34:06,380
container and use it for for the test

00:34:02,330 --> 00:34:11,290
job the configuration for these

00:34:06,380 --> 00:34:11,290
containers is also in the code base and

00:34:22,510 --> 00:34:25,350
bad example

00:34:26,210 --> 00:34:31,490
so we essentially got yamel files which

00:34:29,300 --> 00:34:32,629
give you the doctor configuration for

00:34:31,490 --> 00:34:33,770
the container that you're going to start

00:34:32,629 --> 00:34:35,330
up so if you're wanting to go in and

00:34:33,770 --> 00:34:37,280
extend this and you need to add another

00:34:35,330 --> 00:34:39,440
volume mount you need to expose

00:34:37,280 --> 00:34:41,359
different ports it takes the doctor

00:34:39,440 --> 00:34:44,740
syntax right here in in the

00:34:41,359 --> 00:34:47,659
configuration file if we look at the

00:34:44,740 --> 00:34:48,980
database configuration files you can see

00:34:47,659 --> 00:34:50,869
the difference there is we actually

00:34:48,980 --> 00:34:53,030
expose the database service ports for

00:34:50,869 --> 00:34:55,129
example so this is all straight dr.

00:34:53,030 --> 00:34:57,349
syntax if you're familiar with dr. those

00:34:55,129 --> 00:34:59,510
that syntax can go right into this file

00:34:57,349 --> 00:35:01,930
and it's it's then added to that

00:34:59,510 --> 00:35:01,930
container

00:35:20,589 --> 00:35:25,109
and I'm really going to have to stop

00:35:22,150 --> 00:35:25,109
context switching here

00:35:43,290 --> 00:35:47,940
so that really brings us to what I was

00:35:45,870 --> 00:35:51,810
going to do as far as some some usage

00:35:47,940 --> 00:35:56,160
and demo stuff and so I'll just bring

00:35:51,810 --> 00:35:59,150
that up and we'll go from there increase

00:35:56,160 --> 00:35:59,150
the font before I do that

00:36:19,820 --> 00:36:23,270
so of course the first thing you're

00:36:21,170 --> 00:36:25,880
going to do is pull down the test web

00:36:23,270 --> 00:36:27,860
project we package it with a vagrant box

00:36:25,880 --> 00:36:29,960
so if you're on Windows or Mac then you

00:36:27,860 --> 00:36:31,640
can do do the bank run top it'll run

00:36:29,960 --> 00:36:34,700
through the entire provisioning script

00:36:31,640 --> 00:36:35,810
it'll also do some initial setup for you

00:36:34,700 --> 00:36:40,850
just to make the environment a little

00:36:35,810 --> 00:36:44,000
easier to easier to use the the Drupal

00:36:40,850 --> 00:36:47,420
the actual script itself is the Drupal

00:36:44,000 --> 00:36:49,100
CI script and that's that's the name of

00:36:47,420 --> 00:36:50,360
the this we're going to calling the

00:36:49,100 --> 00:36:54,200
first thing you're going to want to do

00:36:50,360 --> 00:36:56,900
after you download install this is how

00:36:54,200 --> 00:36:58,190
Drupal CI in it and what this will go

00:36:56,900 --> 00:37:00,400
through it'll go in sure you've got

00:36:58,190 --> 00:37:04,430
darker make sure your versions are

00:37:00,400 --> 00:37:05,930
accurate eventually we'll do dependency

00:37:04,430 --> 00:37:07,550
calculations make sure you've got all

00:37:05,930 --> 00:37:09,530
your dependencies are okay there and

00:37:07,550 --> 00:37:11,930
then it goes through and it will

00:37:09,530 --> 00:37:12,770
download from docker hub the containers

00:37:11,930 --> 00:37:15,740
that you'll need for the environment

00:37:12,770 --> 00:37:17,420
this went rather quick given that I

00:37:15,740 --> 00:37:20,780
already have the most current containers

00:37:17,420 --> 00:37:22,760
locally that process could take you 10

00:37:20,780 --> 00:37:23,930
20 30 40 minutes depending on your

00:37:22,760 --> 00:37:27,080
internet connection and things like that

00:37:23,930 --> 00:37:30,530
it's a first time build issue once

00:37:27,080 --> 00:37:32,570
they're there then it you can use them

00:37:30,530 --> 00:37:35,210
on going and you should not have to

00:37:32,570 --> 00:37:37,550
update them as often once we've got to

00:37:35,210 --> 00:37:39,830
an alpha State but it then prompts you

00:37:37,550 --> 00:37:42,260
what database environments do you want

00:37:39,830 --> 00:37:44,660
to support and what this is going to do

00:37:42,260 --> 00:37:48,170
is grab the database containers for the

00:37:44,660 --> 00:37:49,490
for the environments you want just

00:37:48,170 --> 00:37:51,770
because I already have it I'm going to

00:37:49,490 --> 00:37:54,350
go with my sequel here right now to

00:37:51,770 --> 00:37:58,880
ensure we've got a quick and snappy pull

00:37:54,350 --> 00:38:01,520
and then it asks what PHP versions do

00:37:58,880 --> 00:38:06,370
you want to support here we're going to

00:38:01,520 --> 00:38:06,370
go with the PHP 544 in the moment

00:38:10,530 --> 00:38:14,160
and you can ignore that warning that's

00:38:12,510 --> 00:38:15,780
because I already have an environment

00:38:14,160 --> 00:38:17,610
and forgot to clean it up before I did

00:38:15,780 --> 00:38:22,020
the demo but that's the power of live

00:38:17,610 --> 00:38:23,580
demos right it actually leads us into

00:38:22,020 --> 00:38:28,490
the next thing that you're going to want

00:38:23,580 --> 00:38:31,590
to do after download install which is

00:38:28,490 --> 00:38:33,300
select your configuration set what

00:38:31,590 --> 00:38:34,890
configuration do you want to do or set

00:38:33,300 --> 00:38:37,640
up the configuration for your local

00:38:34,890 --> 00:38:37,640
testing environment

00:38:50,250 --> 00:38:56,970
so for that we set basically environment

00:38:54,660 --> 00:38:59,160
variables or we have a configuration

00:38:56,970 --> 00:39:01,380
manage little dummy configuration

00:38:59,160 --> 00:39:06,930
management system built in so for the

00:39:01,380 --> 00:39:09,360
drupal CI config command has a little

00:39:06,930 --> 00:39:13,650
bit of a little bit of a settings

00:39:09,360 --> 00:39:15,570
management built into it so just a i'll

00:39:13,650 --> 00:39:20,310
start by blanking this out and step you

00:39:15,570 --> 00:39:21,420
through the actual steps so I'm doing I

00:39:20,310 --> 00:39:26,130
know you can't see it on screen but

00:39:21,420 --> 00:39:28,730
doing Drupal CI config load blank blank

00:39:26,130 --> 00:39:28,730
doesn't exist

00:39:36,160 --> 00:39:41,940
okay so I didn't quite finish setting up

00:39:38,170 --> 00:39:41,940
my environment before we started here

00:40:03,990 --> 00:40:10,760
well we did create a argument to help us

00:40:07,830 --> 00:40:13,760
with these items we can force it open

00:40:10,760 --> 00:40:13,760
there

00:40:18,940 --> 00:40:24,960
so I basically loaded a blank

00:40:21,190 --> 00:40:24,960
configuration set it's got no settings

00:40:30,190 --> 00:40:35,060
yeah so blank is the name of the

00:40:32,990 --> 00:40:38,030
configuration set that I was trying to

00:40:35,060 --> 00:40:41,210
load just a blank out all of my current

00:40:38,030 --> 00:40:42,830
Drupal see I settings couple of things

00:40:41,210 --> 00:40:44,240
I'm going to do here and these this

00:40:42,830 --> 00:40:46,820
isn't documented should be eventually

00:40:44,240 --> 00:40:49,040
I'm instead of a git checkout I want to

00:40:46,820 --> 00:40:57,710
use my local code bases so there's a

00:40:49,040 --> 00:40:59,570
there's a variable there i can set so

00:40:57,710 --> 00:41:03,260
all the variables are namespace DCI

00:40:59,570 --> 00:41:06,980
underscore and then this particular one

00:41:03,260 --> 00:41:11,060
is use local code base and where is the

00:41:06,980 --> 00:41:12,530
local code base that i want to use the

00:41:11,060 --> 00:41:14,600
other thing i'm going to want to do is I

00:41:12,530 --> 00:41:16,640
want to use simple test jobs by default

00:41:14,600 --> 00:41:18,890
rather than typing Drupal see I run

00:41:16,640 --> 00:41:20,660
simple test I want it to default to

00:41:18,890 --> 00:41:28,570
simple test so i can set a variable for

00:41:20,660 --> 00:41:28,570
that that's our job type variable

00:41:30,640 --> 00:41:36,940
and I don't want to run the full test

00:41:34,359 --> 00:41:40,420
suite because we'd be here for a awfully

00:41:36,940 --> 00:41:44,740
long time so we want to set the test

00:41:40,420 --> 00:41:46,690
groups that we're going to run and we'll

00:41:44,740 --> 00:41:51,940
stick it to the action test group for

00:41:46,690 --> 00:41:55,059
now the last thing which I which I want

00:41:51,940 --> 00:41:56,680
to do forget this is explicitly specify

00:41:55,059 --> 00:41:59,670
which database version we're going to

00:41:56,680 --> 00:42:06,400
test against so Triple C I configset

00:41:59,670 --> 00:42:12,339
b/ci DV version is my sequel five dot

00:42:06,400 --> 00:42:15,279
five now with those items set I should

00:42:12,339 --> 00:42:18,519
be at this point now where I can simply

00:42:15,279 --> 00:42:25,599
look drupal CI rum because it's getting

00:42:18,519 --> 00:42:26,829
awfully close to six o'clock I did okay

00:42:25,599 --> 00:42:33,660
and therefore we're going to wait

00:42:26,829 --> 00:42:37,319
through a clone it is a shallow clone so

00:42:33,660 --> 00:42:37,319
we're thirty percent

00:42:41,420 --> 00:42:47,210
and so essentially that's how you would

00:42:44,540 --> 00:42:50,000
go forward Matt using the environment

00:42:47,210 --> 00:42:51,980
now what I can do I set those those four

00:42:50,000 --> 00:42:56,020
parameters and working on Drupal 8 core

00:42:51,980 --> 00:42:58,640
I can then do a config save my da core

00:42:56,020 --> 00:43:00,500
let's load switch over to another

00:42:58,640 --> 00:43:02,150
project set whatever I need to retest

00:43:00,500 --> 00:43:04,849
that project and at any time in the

00:43:02,150 --> 00:43:07,430
future drupal CI config load my d 8 core

00:43:04,849 --> 00:43:11,270
set up and i can swap back and forth

00:43:07,430 --> 00:43:13,040
from different projects like that so it

00:43:11,270 --> 00:43:14,900
went through its running it created the

00:43:13,040 --> 00:43:19,910
container instances and now it's

00:43:14,900 --> 00:43:24,020
executing run tests on that container if

00:43:19,910 --> 00:43:26,869
we scroll up here a little bit it tells

00:43:24,020 --> 00:43:30,020
us it first loaded the platform default

00:43:26,869 --> 00:43:31,549
arguments then some job type default

00:43:30,020 --> 00:43:35,150
arguments so these are all specified in

00:43:31,549 --> 00:43:37,309
this simple test job class and then the

00:43:35,150 --> 00:43:38,930
local overrides that I set so it's

00:43:37,309 --> 00:43:40,880
telling you here's the hierarchy of

00:43:38,930 --> 00:43:42,200
variables that we're using and you'll

00:43:40,880 --> 00:43:44,210
have variables that show up in multiple

00:43:42,200 --> 00:43:45,799
of those the further down the further

00:43:44,210 --> 00:43:49,490
down the list they are they trump

00:43:45,799 --> 00:43:51,970
everything about them next steps it

00:43:49,490 --> 00:43:55,280
generated our code based data volume

00:43:51,970 --> 00:43:57,319
created a check out directory determine

00:43:55,280 --> 00:43:58,790
what containers it needed made sure that

00:43:57,319 --> 00:44:00,260
those images existed on the local

00:43:58,790 --> 00:44:06,170
machine which was part of that in it

00:44:00,260 --> 00:44:08,990
step and then did the check out then

00:44:06,170 --> 00:44:10,700
created our results directory in purple

00:44:08,990 --> 00:44:12,859
these are all executed on the container

00:44:10,700 --> 00:44:14,839
itself so everything about that was done

00:44:12,859 --> 00:44:16,849
on my local machine now in purple were

00:44:14,839 --> 00:44:18,950
on the container created results

00:44:16,849 --> 00:44:21,589
directory create a result XML directory

00:44:18,950 --> 00:44:23,119
for us did some permission changes that

00:44:21,589 --> 00:44:26,619
we need in order to be able to write

00:44:23,119 --> 00:44:30,220
those results on in the container

00:44:26,619 --> 00:44:34,250
created created our database and then

00:44:30,220 --> 00:44:36,410
this is the Drupal script run tested SH

00:44:34,250 --> 00:44:38,829
line that it then executed on that

00:44:36,410 --> 00:44:42,790
container and then as we go down here

00:44:38,829 --> 00:44:45,619
took about one minute to run through the

00:44:42,790 --> 00:44:54,309
default actions sweet

00:44:45,619 --> 00:44:54,309
so I'll fix that little table

00:45:07,320 --> 00:45:10,370
and then we'll

00:45:12,040 --> 00:45:21,600
set our DB version postgres 9 dot 1

00:45:23,820 --> 00:45:29,400
and we're now

00:45:26,280 --> 00:45:32,520
I miss typo'd my fix of the table and

00:45:29,400 --> 00:45:34,290
we're now executing against the Postgres

00:45:32,520 --> 00:45:36,780
database so that was one of the major

00:45:34,290 --> 00:45:38,070
goals of this is to expand the number of

00:45:36,780 --> 00:45:40,920
environments that were able to test

00:45:38,070 --> 00:45:46,650
against with drupal org as of this week

00:45:40,920 --> 00:45:47,940
we can test PHP 54 55 56 and seven we

00:45:46,650 --> 00:45:52,470
have containers for all four Suites

00:45:47,940 --> 00:45:56,160
against SQLite postgres ria DB and my

00:45:52,470 --> 00:45:57,570
sequel so we're expanding to meet the

00:45:56,160 --> 00:45:59,490
minimum coverage requirements for the

00:45:57,570 --> 00:46:02,070
core developers for what they want to

00:45:59,490 --> 00:46:04,640
test or against as they come towards a a

00:46:02,070 --> 00:46:04,640
Drupal 8 release

00:46:08,980 --> 00:46:17,140
so with that that is more or less what I

00:46:12,730 --> 00:46:19,690
had for you today I want to talk a

00:46:17,140 --> 00:46:22,450
little bit about extending Drupal CI and

00:46:19,690 --> 00:46:24,369
the task for that I'll leave a slide in

00:46:22,450 --> 00:46:26,140
here for how you would go about doing

00:46:24,369 --> 00:46:28,210
that what are the steps really it's

00:46:26,140 --> 00:46:30,010
create a new directory create a PHP

00:46:28,210 --> 00:46:31,630
class create a default template and

00:46:30,010 --> 00:46:33,820
create any custom plugins you need for

00:46:31,630 --> 00:46:35,470
that logic and that that that's the

00:46:33,820 --> 00:46:37,300
steps the four steps that you need in

00:46:35,470 --> 00:46:41,490
order to extend this for free own custom

00:46:37,300 --> 00:46:44,260
testing needs but with that I'll

00:46:41,490 --> 00:46:46,750
certainly ask provide any feedback that

00:46:44,260 --> 00:46:49,500
you can on the session each of the

00:46:46,750 --> 00:46:52,090
sessions has a page on the on the

00:46:49,500 --> 00:46:53,950
conference website where you can provide

00:46:52,090 --> 00:46:55,960
feedback on the session definitely help

00:46:53,950 --> 00:46:58,600
speakers like myself to prepare for

00:46:55,960 --> 00:47:00,220
future sessions and and that feedback is

00:46:58,600 --> 00:47:03,670
is definitely encouraged and definitely

00:47:00,220 --> 00:47:05,980
desired so please please do that and

00:47:03,670 --> 00:47:07,930
I'll open it up for last ten minutes

00:47:05,980 --> 00:47:10,680
here any questions or discussions that

00:47:07,930 --> 00:47:10,680
people might have

00:47:26,770 --> 00:47:32,630
so I have a question so what is the

00:47:29,569 --> 00:47:35,960
difference between when we run PHP run a

00:47:32,630 --> 00:47:39,410
test run dot SH file from Drupal folder

00:47:35,960 --> 00:47:43,220
in our local environment whereas we

00:47:39,410 --> 00:47:47,299
don't use Drupal CI the the main thing

00:47:43,220 --> 00:47:48,410
is that when you run it locally you're

00:47:47,299 --> 00:47:51,049
running it against your local

00:47:48,410 --> 00:47:53,630
environment you may have modules that

00:47:51,049 --> 00:47:56,000
were installed manually on that site or

00:47:53,630 --> 00:47:58,099
you may have a PHP version that doesn't

00:47:56,000 --> 00:48:00,109
match what the test spots run you may

00:47:58,099 --> 00:48:02,089
have different Apache configurations and

00:48:00,109 --> 00:48:03,650
that's where we run into the issues

00:48:02,089 --> 00:48:05,809
where people run a test locally it

00:48:03,650 --> 00:48:08,059
passes ok it's good I upload it to issue

00:48:05,809 --> 00:48:09,230
queue and the test spot rejects it so we

00:48:08,059 --> 00:48:11,359
really want to ensure that we're

00:48:09,230 --> 00:48:14,450
providing the same testing environment

00:48:11,359 --> 00:48:15,500
on the test spot as we are on the local

00:48:14,450 --> 00:48:17,480
environment so that we don't run into

00:48:15,500 --> 00:48:21,170
those conflicts anymore that's that's

00:48:17,480 --> 00:48:23,270
the primary reason behind it definitely

00:48:21,170 --> 00:48:25,640
by all means as you're developing run it

00:48:23,270 --> 00:48:27,770
locally with PHP run tests but before

00:48:25,640 --> 00:48:30,170
you send it up to the test but let's

00:48:27,770 --> 00:48:32,750
make sure or this is another step we can

00:48:30,170 --> 00:48:37,990
do to validate that it will pass once we

00:48:32,750 --> 00:48:37,990
send it to the test spot yeah thank you

00:48:41,670 --> 00:48:46,690
so as we saw in the demo you know just

00:48:44,799 --> 00:48:48,279
doing a couple typos or not

00:48:46,690 --> 00:48:50,819
understanding all these environmental

00:48:48,279 --> 00:48:53,349
variables can lead to some frustration

00:48:50,819 --> 00:48:56,859
well what do you think is the next step

00:48:53,349 --> 00:48:59,680
for improving the the brittleness of

00:48:56,859 --> 00:49:02,769
some of the environmental variables and

00:48:59,680 --> 00:49:05,500
in the process is there variable

00:49:02,769 --> 00:49:07,720
pre-processing yeah the number one key

00:49:05,500 --> 00:49:12,250
is going to be initially documentation

00:49:07,720 --> 00:49:14,349
we certainly recognize that we've been

00:49:12,250 --> 00:49:17,019
charging full speed ahead because we're

00:49:14,349 --> 00:49:18,700
listed as a critical blockin d8 trying

00:49:17,019 --> 00:49:20,859
to get some function into drupal.org

00:49:18,700 --> 00:49:22,990
that's so that we can do the testing

00:49:20,859 --> 00:49:26,250
that excuse me that unblocks that

00:49:22,990 --> 00:49:28,720
critical but as we get to an alpha here

00:49:26,250 --> 00:49:31,480
definitely documentation is going to be

00:49:28,720 --> 00:49:33,010
a number one key thing we won't have the

00:49:31,480 --> 00:49:35,049
stability will still have that realness

00:49:33,010 --> 00:49:36,700
at an alpha release but if we can at

00:49:35,049 --> 00:49:38,980
least show people how to get around it

00:49:36,700 --> 00:49:41,650
once that elf is released and we've

00:49:38,980 --> 00:49:43,599
unblocked the d8d a critical that's

00:49:41,650 --> 00:49:45,309
tagged against us then we'll be able to

00:49:43,599 --> 00:49:47,890
move forward with the with the polish

00:49:45,309 --> 00:49:51,160
and the refinement of those variables

00:49:47,890 --> 00:49:53,200
those plugins adding things like debug

00:49:51,160 --> 00:49:56,170
verbosity into the into the client

00:49:53,200 --> 00:49:58,119
adding support for items like like

00:49:56,170 --> 00:50:00,960
monologues so that we can then actually

00:49:58,119 --> 00:50:04,630
provide detail debugging information

00:50:00,960 --> 00:50:07,599
that will tell somebody that yeah this

00:50:04,630 --> 00:50:10,349
didn't work because of X so that that'll

00:50:07,599 --> 00:50:15,210
be a big push definitely before aveda

00:50:10,349 --> 00:50:15,210
but probably a post alpha push for us

00:50:16,260 --> 00:50:22,800
hey I noticed there is a project for a

00:50:19,320 --> 00:50:25,500
drupal CI 44 puppet module to deploy it

00:50:22,800 --> 00:50:26,790
and but the project is empty so I was

00:50:25,500 --> 00:50:28,710
just wondering with the status with that

00:50:26,790 --> 00:50:30,120
is or if there's a plan or if just don't

00:50:28,710 --> 00:50:32,250
be touched it yet but that's somewhere

00:50:30,120 --> 00:50:34,650
you really want to go yeah so that was

00:50:32,250 --> 00:50:36,510
going to be sorry that was that was part

00:50:34,650 --> 00:50:38,040
of the initial plan is that we would

00:50:36,510 --> 00:50:39,870
have because it's what we did with

00:50:38,040 --> 00:50:41,610
different if we have we have a puppet

00:50:39,870 --> 00:50:44,040
master for that and that's how we

00:50:41,610 --> 00:50:46,200
structured the project initially we move

00:50:44,040 --> 00:50:47,670
forward and I'll maybe if I miss

00:50:46,200 --> 00:50:50,670
anything I'll get the guys in the back

00:50:47,670 --> 00:50:53,040
there to probably augment my answer here

00:50:50,670 --> 00:50:54,570
but we did move forward we've got some

00:50:53,040 --> 00:50:58,170
Packer build scripts that are actually

00:50:54,570 --> 00:51:00,360
building am eyes on AWS so so rather

00:50:58,170 --> 00:51:02,820
than giving you a puppet script we are

00:51:00,360 --> 00:51:05,100
creating the am eyes for folks that they

00:51:02,820 --> 00:51:06,840
can then consume and those will be I

00:51:05,100 --> 00:51:08,970
believe those will be public am eyes for

00:51:06,840 --> 00:51:11,130
anyone to be able to spin up an instance

00:51:08,970 --> 00:51:13,830
of the test runner that if they want

00:51:11,130 --> 00:51:15,900
right now that ami is the full Jenkins

00:51:13,830 --> 00:51:18,420
slave but it contains the test runner so

00:51:15,900 --> 00:51:24,000
so we're looking to to do that we've

00:51:18,420 --> 00:51:26,250
also set up the some automated building

00:51:24,000 --> 00:51:28,260
on docker hub from from our repository

00:51:26,250 --> 00:51:30,060
so some of the chaining that we need so

00:51:28,260 --> 00:51:31,740
that when we commits a new change to

00:51:30,060 --> 00:51:34,260
production will automatically get that

00:51:31,740 --> 00:51:36,450
change built into the containers so once

00:51:34,260 --> 00:51:39,030
so if you're on your local environment a

00:51:36,450 --> 00:51:40,950
poll will refresh the container and then

00:51:39,030 --> 00:51:42,780
you'll have have the latest builds there

00:51:40,950 --> 00:51:45,770
did you want to augment that basement or

00:51:42,780 --> 00:51:45,770
ready

00:51:52,960 --> 00:51:55,680
ok

00:52:00,090 --> 00:52:05,550
okay so so so for that for the recording

00:52:03,060 --> 00:52:07,680
their the the puppet mod there the

00:52:05,550 --> 00:52:09,690
puppet was initially intended as that

00:52:07,680 --> 00:52:12,240
separate module the puppet steps are now

00:52:09,690 --> 00:52:14,610
built into the individual projects

00:52:12,240 --> 00:52:16,380
themselves soap actor for example has

00:52:14,610 --> 00:52:18,090
the puppet deploy stuff and the manifest

00:52:16,380 --> 00:52:26,040
and stuff within that particular project

00:52:18,090 --> 00:52:29,420
I just listened to your talk it seems

00:52:26,040 --> 00:52:29,420

YouTube URL: https://www.youtube.com/watch?v=lxNaLe17Y3g


