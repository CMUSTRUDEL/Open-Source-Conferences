Title: DrupalCon Los Angeles 2015: The Why and How of Front End Architecture
Publication date: 2015-05-12
Playlist: DrupalCon Los Angeles - May 2015
Description: 
	Front-end web development is evolving fast and selecting the right tools to use and when to use them is key to building successful solutions. Knowing why you might incorporate new techniques and what's a good fit for your needs can be challenging with so many choice available, whilst balancing client needs, team efficiency and code quality.

Learn from our successes and failures at architecting the front-end for projects like MSNBC, Bravo TV, Oxygen, and Highlights for Children. In this session we'll be covering the four major areas of front-end architecture:

 

 

We'll be talking about when and why you might use tools like Sass, Grunt, Gulp, Bower, Node/NPM, linters, Bootstrap etc, but without getting into the weeds of their specific implementations.

File organisation and naming conventions
Make life easier when working in teams, including on-boarding new developers, as well as preventing spaghetti code.
Build tools
Which tools should you choose for automating and improving your project workflow?
Dependency Management
Choosing a package manager.
Keeping your external dependencies out of your repositories and keeping track of their versions / origins.
Testing
Ensure your code is consistent and automate checks to help catch problems before they make it to production.
Captions: 
	00:00:00,000 --> 00:00:10,139
it's all settled down nerds I want to

00:00:01,829 --> 00:00:12,150
get started all right so we're here to

00:00:10,139 --> 00:00:15,269
talk about the why and how front-end

00:00:12,150 --> 00:00:19,859
architecture feel the rhythm feel the

00:00:15,269 --> 00:00:23,340
rhyme get on up its front end time so

00:00:19,859 --> 00:00:25,710
who are we anyway I'm Westerville khabar

00:00:23,340 --> 00:00:27,990
I'm a recent ish addition to Lola bottom

00:00:25,710 --> 00:00:30,060
a front-end developer we have carwin

00:00:27,990 --> 00:00:33,149
young here a senior front-end developer

00:00:30,060 --> 00:00:36,000
and Sally young no relation that we know

00:00:33,149 --> 00:00:39,840
of who is a senior developer at little

00:00:36,000 --> 00:00:41,969
bot so like I said we all work for Lola

00:00:39,840 --> 00:00:43,800
but it is an awesome place well it's not

00:00:41,969 --> 00:00:45,629
really a place I take it back we do

00:00:43,800 --> 00:00:46,710
strategy design and development and you

00:00:45,629 --> 00:00:53,309
should come work with us because we're

00:00:46,710 --> 00:00:55,559
awesome so we have a buzzword in our in

00:00:53,309 --> 00:00:56,850
our talk title so i thought i would try

00:00:55,559 --> 00:00:59,010
and define it make sure we're all on the

00:00:56,850 --> 00:01:00,870
same page so when I talk about front-end

00:00:59,010 --> 00:01:02,340
architecture I'm talking about how you

00:01:00,870 --> 00:01:03,840
design how you want to work with the

00:01:02,340 --> 00:01:05,580
front end and how you going to

00:01:03,840 --> 00:01:08,369
collaborate with people that you're

00:01:05,580 --> 00:01:09,960
working with write your code and then

00:01:08,369 --> 00:01:13,950
what kind of standards libraries and

00:01:09,960 --> 00:01:15,540
tools that you're used using so the

00:01:13,950 --> 00:01:18,000
byproduct of that looks something like

00:01:15,540 --> 00:01:19,619
coding standards documentation style

00:01:18,000 --> 00:01:21,450
guides implementation guidelines file

00:01:19,619 --> 00:01:23,250
organization tools building process blah

00:01:21,450 --> 00:01:26,670
blah blah blah all that kind of fun

00:01:23,250 --> 00:01:29,700
stuff so it's important to revisit these

00:01:26,670 --> 00:01:31,799
decisions throughout the project because

00:01:29,700 --> 00:01:33,900
things change the team dynamic how the

00:01:31,799 --> 00:01:36,210
codes working how your build tools are

00:01:33,900 --> 00:01:37,439
working all that kind of fun stuff you

00:01:36,210 --> 00:01:38,970
can't always change this stuff

00:01:37,439 --> 00:01:41,880
mid-project but it's important to have

00:01:38,970 --> 00:01:43,710
the conversation and figure out if you

00:01:41,880 --> 00:01:45,240
can address anything as it comes up and

00:01:43,710 --> 00:01:47,600
make sure that your team is liking the

00:01:45,240 --> 00:01:51,030
development experience that they have

00:01:47,600 --> 00:01:53,100
because we want nice happy brains that

00:01:51,030 --> 00:01:55,229
are writing new features in solving bugs

00:01:53,100 --> 00:01:58,740
we don't want a very grumpy angry brain

00:01:55,229 --> 00:02:02,040
that's like where do i how do i what how

00:01:58,740 --> 00:02:07,110
oh here it is I guess and now I'll fix

00:02:02,040 --> 00:02:08,250
it so so we want to talk about why we're

00:02:07,110 --> 00:02:09,420
picking these different tools and

00:02:08,250 --> 00:02:10,619
processes and how we make those

00:02:09,420 --> 00:02:11,970
decisions to make sure that we're

00:02:10,619 --> 00:02:12,540
successful throughout the life of the

00:02:11,970 --> 00:02:16,890
project

00:02:12,540 --> 00:02:18,719
and as far as I know I haven't seen a

00:02:16,890 --> 00:02:20,969
one-size-fits-all front and architecture

00:02:18,719 --> 00:02:22,950
yet so that means that we all have to

00:02:20,969 --> 00:02:24,989
kind of be aware of what the tools are

00:02:22,950 --> 00:02:26,939
that are out there what kind of process

00:02:24,989 --> 00:02:29,730
is there are and why you might use these

00:02:26,939 --> 00:02:32,430
things and at the end we'll have some

00:02:29,730 --> 00:02:34,019
time for questions but if you if you

00:02:32,430 --> 00:02:35,430
don't get your question in or you think

00:02:34,019 --> 00:02:37,829
of something later feel free to hit us

00:02:35,430 --> 00:02:39,930
up in real life or on the interweb ins

00:02:37,829 --> 00:02:43,319
second slide there we'll have our

00:02:39,930 --> 00:02:45,180
contact info and yeah we love talking

00:02:43,319 --> 00:02:48,239
about the stuff for some silly stupid

00:02:45,180 --> 00:02:54,209
reason so let's get into it with carwin

00:02:48,239 --> 00:02:57,540
young so I'm going to talk about that

00:02:54,209 --> 00:02:59,370
stuff the organization of the front end

00:02:57,540 --> 00:03:01,290
is to me the underlying foundation of

00:02:59,370 --> 00:03:03,209
all of the architecture stuff that we're

00:03:01,290 --> 00:03:04,680
going to talk about today and whether

00:03:03,209 --> 00:03:06,629
you're flying solo on a project or

00:03:04,680 --> 00:03:10,049
working with the big team organization

00:03:06,629 --> 00:03:11,579
is crucial that doesn't necessarily mean

00:03:10,049 --> 00:03:13,319
that you need to structure a small team

00:03:11,579 --> 00:03:15,629
project the same way that you do a large

00:03:13,319 --> 00:03:17,220
team project but there has to be some

00:03:15,629 --> 00:03:18,510
level of organization or you'll end up

00:03:17,220 --> 00:03:22,489
with a mess on your hands even if you

00:03:18,510 --> 00:03:25,409
follow all the other advice in this talk

00:03:22,489 --> 00:03:27,449
so that's a mess and that's kind of the

00:03:25,409 --> 00:03:29,010
thing that we're trying to avoid like I

00:03:27,449 --> 00:03:31,829
put there there's no logic in this place

00:03:29,010 --> 00:03:33,060
huge the organization and planning of

00:03:31,829 --> 00:03:35,209
the front end is one of those pieces of

00:03:33,060 --> 00:03:37,829
a project that's usually either

00:03:35,209 --> 00:03:39,419
neglected until after it's already way

00:03:37,829 --> 00:03:41,879
too late you already have a big mess on

00:03:39,419 --> 00:03:43,409
the project or it gets fixated on by

00:03:41,879 --> 00:03:47,250
developers to the point that they don't

00:03:43,409 --> 00:03:48,690
actually get any work done and so I

00:03:47,250 --> 00:03:49,889
would like if if you didn't take

00:03:48,690 --> 00:03:52,139
anything else away that if you just

00:03:49,889 --> 00:03:54,930
drilled this one thing into all of your

00:03:52,139 --> 00:03:58,699
heads some kind of plan is better than

00:03:54,930 --> 00:03:58,699
no kind of plan well don't plan it all

00:04:00,230 --> 00:04:03,840
arguably the most important thing is

00:04:02,160 --> 00:04:05,580
solid organizational structure does is

00:04:03,840 --> 00:04:07,850
it make it easier for you to find your

00:04:05,580 --> 00:04:10,050
stuff no matter who you are in a project

00:04:07,850 --> 00:04:11,460
inevitable you'll come across the need

00:04:10,050 --> 00:04:12,990
to find something something else is

00:04:11,460 --> 00:04:15,360
written or you'll have one of these

00:04:12,990 --> 00:04:17,160
questions where should I put this fancy

00:04:15,360 --> 00:04:19,440
new template file that kind of thing and

00:04:17,160 --> 00:04:22,050
here you can use grep or your IDs find

00:04:19,440 --> 00:04:23,460
function if you want but if you know the

00:04:22,050 --> 00:04:26,340
patterns and the organizational

00:04:23,460 --> 00:04:28,080
paradigms that your project is using you

00:04:26,340 --> 00:04:31,380
can get to modifications quickly and you

00:04:28,080 --> 00:04:33,150
can work more quickly in general and it

00:04:31,380 --> 00:04:35,690
will just provide instant answers to all

00:04:33,150 --> 00:04:38,010
these kinds of questions as they pop up

00:04:35,690 --> 00:04:39,630
so having a solid plan for the front

00:04:38,010 --> 00:04:41,520
ends architecture also prevents an

00:04:39,630 --> 00:04:43,830
overlap of code and it encourages

00:04:41,520 --> 00:04:46,620
compartmentalization this makes it

00:04:43,830 --> 00:04:47,760
easier to work on new features and it

00:04:46,620 --> 00:04:49,680
gives you some measure of breathing room

00:04:47,760 --> 00:04:51,000
when you break something because you

00:04:49,680 --> 00:04:53,040
aren't breaking five thousand other

00:04:51,000 --> 00:04:55,620
things on your site and if you can break

00:04:53,040 --> 00:04:58,590
just one thing on your website at a time

00:04:55,620 --> 00:04:59,940
I think you're living the dream because

00:04:58,590 --> 00:05:02,460
that's really hard to do it's hard to

00:04:59,940 --> 00:05:04,590
break just one thing so a solid

00:05:02,460 --> 00:05:06,600
organization and a document instead of

00:05:04,590 --> 00:05:10,110
project conventions are an invaluable to

00:05:06,600 --> 00:05:13,470
every project so now I've talked about a

00:05:10,110 --> 00:05:14,850
little bit about why organization and

00:05:13,470 --> 00:05:17,100
planning is so important so let's talk

00:05:14,850 --> 00:05:20,460
about how you decide what to organize

00:05:17,100 --> 00:05:21,900
into what extent so firstly what kinds

00:05:20,460 --> 00:05:25,350
of things can we organize on the front

00:05:21,900 --> 00:05:26,790
end well you can organize templates your

00:05:25,350 --> 00:05:30,710
processor files if you're using those

00:05:26,790 --> 00:05:32,880
CSS properties if you hate yourself

00:05:30,710 --> 00:05:35,190
javascript libraries helper functions

00:05:32,880 --> 00:05:38,880
etc and literally whatever else you have

00:05:35,190 --> 00:05:41,280
going on in short everything organized

00:05:38,880 --> 00:05:42,960
everything write it down document it

00:05:41,280 --> 00:05:45,780
drill it into your heads this thing goes

00:05:42,960 --> 00:05:46,830
here and that thing goes there and

00:05:45,780 --> 00:05:50,340
projects will be a little different

00:05:46,830 --> 00:05:51,720
depending on everyone involved as a real

00:05:50,340 --> 00:05:53,970
balancing act that takes place around

00:05:51,720 --> 00:05:55,770
the extent to which you organize the

00:05:53,970 --> 00:05:57,600
level of detail you put into your plans

00:05:55,770 --> 00:06:00,600
will vary significantly with experience

00:05:57,600 --> 00:06:02,190
so start small and then build on that if

00:06:00,600 --> 00:06:04,230
it makes sense to you to organize right

00:06:02,190 --> 00:06:06,460
now organize that and don't sweat the

00:06:04,230 --> 00:06:07,810
details of what should I be organizing

00:06:06,460 --> 00:06:12,880
because you'll have an innate feeling

00:06:07,810 --> 00:06:15,009
about this needs to be organized so HTML

00:06:12,880 --> 00:06:17,560
templates in free process you can

00:06:15,009 --> 00:06:19,120
organize this in general a good thing to

00:06:17,560 --> 00:06:21,729
think about when considering how to

00:06:19,120 --> 00:06:24,310
organize templates preprocess process

00:06:21,729 --> 00:06:27,069
stuff is do these functions or files

00:06:24,310 --> 00:06:28,840
does anything in here rely on code

00:06:27,069 --> 00:06:31,180
provided by something else like a module

00:06:28,840 --> 00:06:33,669
if the answer to that is yes it might be

00:06:31,180 --> 00:06:37,000
a good idea to keep them coupled if the

00:06:33,669 --> 00:06:38,889
answer is not yes then it might be

00:06:37,000 --> 00:06:40,840
better to just put it in one place like

00:06:38,889 --> 00:06:42,729
the theme that way especially if you're

00:06:40,840 --> 00:06:44,680
on a small project you just know exactly

00:06:42,729 --> 00:06:48,759
where it is all my stuff for this thing

00:06:44,680 --> 00:06:50,979
is over here so there's no right or

00:06:48,759 --> 00:06:53,349
wrong answer to something like this but

00:06:50,979 --> 00:06:55,229
a call needs to be made up front so that

00:06:53,349 --> 00:06:57,099
the project is easier to understand

00:06:55,229 --> 00:06:58,930
otherwise we're running into small

00:06:57,099 --> 00:07:00,520
things that eat up lots of time for

00:06:58,930 --> 00:07:01,990
instance i was on a project where we had

00:07:00,520 --> 00:07:04,120
things spread out all over the place and

00:07:01,990 --> 00:07:06,220
it took me a lot of time just to figure

00:07:04,120 --> 00:07:08,830
out where and how I should be working

00:07:06,220 --> 00:07:10,570
rather than actually getting any work

00:07:08,830 --> 00:07:12,039
done and that was really frustrating and

00:07:10,570 --> 00:07:13,930
then on a different project I've had

00:07:12,039 --> 00:07:17,020
developers who are adding markup to

00:07:13,930 --> 00:07:19,300
items in and views through the UI and

00:07:17,020 --> 00:07:20,889
that wasn't documented so I had no idea

00:07:19,300 --> 00:07:24,849
where to make the changes that needed to

00:07:20,889 --> 00:07:26,289
make and the reason for that was there

00:07:24,849 --> 00:07:28,150
weren't any firm decisions that were

00:07:26,289 --> 00:07:29,949
documented somewhere that I could read

00:07:28,150 --> 00:07:32,280
and say okay this must be infused

00:07:29,949 --> 00:07:32,280
somewhere

00:07:32,460 --> 00:07:37,150
so making up front decisions is

00:07:34,870 --> 00:07:38,470
important especially regarding front-end

00:07:37,150 --> 00:07:41,740
architecture Wes actually wrote this

00:07:38,470 --> 00:07:46,840
slide I thought it was funny I'll let it

00:07:41,740 --> 00:07:50,560
sink in okay I heard some chuckles

00:07:46,840 --> 00:07:52,689
that's good so JavaScript you already

00:07:50,560 --> 00:07:54,610
know this JavaScript planning is

00:07:52,689 --> 00:07:56,259
actually relatively simple especially in

00:07:54,610 --> 00:07:57,879
the Drupal landscape and the decisions

00:07:56,259 --> 00:08:00,219
you make around how to organize things

00:07:57,879 --> 00:08:02,740
they follow mostly the same logic as

00:08:00,219 --> 00:08:04,690
templates and processing functions if

00:08:02,740 --> 00:08:07,000
your JavaScript relies on something it

00:08:04,690 --> 00:08:09,639
makes it I mean it makes sense to keep

00:08:07,000 --> 00:08:11,080
it with that thing you will have some

00:08:09,639 --> 00:08:13,030
different decisions to make you for

00:08:11,080 --> 00:08:15,520
implementing their party libraries or

00:08:13,030 --> 00:08:16,810
Java or jQuery plugins or something like

00:08:15,520 --> 00:08:20,050
that you should probably handle that

00:08:16,810 --> 00:08:21,159
with package manager which sally's

00:08:20,050 --> 00:08:27,279
actually gonna talk about a little bit

00:08:21,159 --> 00:08:28,810
later let's just move on CSS is probably

00:08:27,279 --> 00:08:31,449
the most front ND thing I can think of

00:08:28,810 --> 00:08:33,190
that's an actual word that I submitted

00:08:31,449 --> 00:08:35,769
to Webster but they haven't put it in

00:08:33,190 --> 00:08:37,329
yet they're a good number of

00:08:35,769 --> 00:08:39,370
organizational paradigms that you can

00:08:37,329 --> 00:08:41,219
adhere to particularly if you're dealing

00:08:39,370 --> 00:08:44,110
with the preprocessor landscape and CSS

00:08:41,219 --> 00:08:46,209
so instead of technique over the finer

00:08:44,110 --> 00:08:47,620
points of one or another methodology I

00:08:46,209 --> 00:08:49,839
want to talk about how to choose one

00:08:47,620 --> 00:08:51,699
first and then before I get into that I

00:08:49,839 --> 00:08:54,010
want to say that if you're unsure which

00:08:51,699 --> 00:08:55,300
one to choose you can simply pick one

00:08:54,010 --> 00:08:57,370
that sounds interesting and then run

00:08:55,300 --> 00:09:00,040
with that because there's absolutely

00:08:57,370 --> 00:09:02,050
nothing wrong with it like I said some

00:09:00,040 --> 00:09:06,870
kind of plan is better than no plan at

00:09:02,050 --> 00:09:09,399
all so to get a little more specific I

00:09:06,870 --> 00:09:11,829
think of CSS methodologies and three

00:09:09,399 --> 00:09:14,620
basic types this is an official this is

00:09:11,829 --> 00:09:16,060
just me now there's the component

00:09:14,620 --> 00:09:18,390
methodology which is highly modular

00:09:16,060 --> 00:09:21,459
discrete chunks of CSS and markup

00:09:18,390 --> 00:09:23,649
utility classes are utility

00:09:21,459 --> 00:09:25,660
methodologies the lego version of CSS

00:09:23,649 --> 00:09:28,209
you kind of attack on classes to mark up

00:09:25,660 --> 00:09:30,250
as you go and they do very few things

00:09:28,209 --> 00:09:31,959
like dot underline or dot read which as

00:09:30,250 --> 00:09:34,000
you may expect we'll make something

00:09:31,959 --> 00:09:36,070
underlined or red

00:09:34,000 --> 00:09:40,360
and then hybrids which are kind of a mix

00:09:36,070 --> 00:09:41,650
of the two good for the environment you

00:09:40,360 --> 00:09:43,540
pick something that lines up with any of

00:09:41,650 --> 00:09:45,850
these but the decision about which one

00:09:43,540 --> 00:09:47,710
to use needs to be based around how you

00:09:45,850 --> 00:09:51,100
and potentially your team want to work

00:09:47,710 --> 00:09:53,380
together if it's easier in your mind to

00:09:51,100 --> 00:09:54,760
modify markup you'll have pretty good

00:09:53,380 --> 00:09:57,310
luck with utility class based paradigm

00:09:54,760 --> 00:09:58,870
really if you need to reuse a lot of

00:09:57,310 --> 00:10:01,110
market patterns component-based

00:09:58,870 --> 00:10:03,100
methodologies work great for that and

00:10:01,110 --> 00:10:04,450
you know most projects I've been on

00:10:03,100 --> 00:10:05,980
recently kind of use the hybrid thing

00:10:04,450 --> 00:10:08,050
where we start out with a component

00:10:05,980 --> 00:10:09,640
based methodology and then as we get

00:10:08,050 --> 00:10:12,040
further along the project we realized oh

00:10:09,640 --> 00:10:13,540
we didn't account for X Y or Z or we

00:10:12,040 --> 00:10:15,430
didn't think about this and so we can

00:10:13,540 --> 00:10:19,630
add a utility class here there that kind

00:10:15,430 --> 00:10:21,400
of helps or to those gaps and that works

00:10:19,630 --> 00:10:23,080
really well in fact that's my favorite

00:10:21,400 --> 00:10:24,850
way to work as long as you don't go

00:10:23,080 --> 00:10:28,080
overboard with utility classes when

00:10:24,850 --> 00:10:31,030
you're mixing on life gets pretty easy

00:10:28,080 --> 00:10:32,950
and it's worth noting that Drupal 8

00:10:31,030 --> 00:10:35,290
already has some standard best practices

00:10:32,950 --> 00:10:37,780
around how to architect your CSS so if

00:10:35,290 --> 00:10:40,180
you're unsure what to do we're having

00:10:37,780 --> 00:10:42,880
trouble deciding that's a safe bet and

00:10:40,180 --> 00:10:44,050
go with that that way the other benefit

00:10:42,880 --> 00:10:45,580
is if you ever want to contribute

00:10:44,050 --> 00:10:49,990
something back to Drupal you're already

00:10:45,580 --> 00:10:52,300
adhering to the Drupal standard there's

00:10:49,990 --> 00:10:55,630
still no logic in that place I hope we

00:10:52,300 --> 00:10:57,130
never have projects like that so every

00:10:55,630 --> 00:10:59,860
project on some level runs on the

00:10:57,130 --> 00:11:02,170
currency of time some obviously have a

00:10:59,860 --> 00:11:03,730
lot more than others and personal

00:11:02,170 --> 00:11:06,339
projects especially can seem like their

00:11:03,730 --> 00:11:08,080
budget of time is infinite the upfront

00:11:06,339 --> 00:11:09,520
costs in time of organization when

00:11:08,080 --> 00:11:11,680
planning out the front end can be really

00:11:09,520 --> 00:11:14,200
really hefty and it's tempting as a

00:11:11,680 --> 00:11:16,270
developer to just say I don't have time

00:11:14,200 --> 00:11:18,130
for this I just want to take this this

00:11:16,270 --> 00:11:20,550
bsd and i want to make something visual

00:11:18,130 --> 00:11:22,360
that people can play with and look at

00:11:20,550 --> 00:11:23,890
but if you skip the Planning

00:11:22,360 --> 00:11:26,380
Organization you'll end up with really

00:11:23,890 --> 00:11:27,700
fragile code and you won't be able to

00:11:26,380 --> 00:11:30,940
live the dream of being able to just

00:11:27,700 --> 00:11:32,560
bring one thing at a time so be aware of

00:11:30,940 --> 00:11:34,960
that

00:11:32,560 --> 00:11:37,060
um don't over engineer this stuff

00:11:34,960 --> 00:11:38,200
speaking from experience I can tell you

00:11:37,060 --> 00:11:39,760
that it's really easy to let this

00:11:38,200 --> 00:11:42,400
organizational stuff kind of consume

00:11:39,760 --> 00:11:44,950
your life on a project I mentioned

00:11:42,400 --> 00:11:46,390
earlier that sometimes developers get so

00:11:44,950 --> 00:11:48,460
fixated on this stuff that they don't

00:11:46,390 --> 00:11:52,120
actually do any work and I'm guilty of

00:11:48,460 --> 00:11:55,570
that myself so it's definitely a real

00:11:52,120 --> 00:11:57,640
problem and as I mentioned earlier it's

00:11:55,570 --> 00:12:00,520
also important to realize that

00:11:57,640 --> 00:12:02,460
everything changes so all the plans and

00:12:00,520 --> 00:12:04,450
conventions that you come up with

00:12:02,460 --> 00:12:05,890
planning at the front end they're all

00:12:04,450 --> 00:12:06,880
going to change the project moves on

00:12:05,890 --> 00:12:08,500
you're going to be working with people

00:12:06,880 --> 00:12:09,730
who are going to say hey you know I've

00:12:08,500 --> 00:12:12,640
been doing this for like two weeks now

00:12:09,730 --> 00:12:14,560
and it totally sucks so you need to like

00:12:12,640 --> 00:12:16,270
spend time set aside time for

00:12:14,560 --> 00:12:19,420
architectural decisions keep them simple

00:12:16,270 --> 00:12:23,260
and you know revisit them as much as you

00:12:19,420 --> 00:12:25,300
can preferably you know throughout the

00:12:23,260 --> 00:12:26,980
duration of a project that way everyone

00:12:25,300 --> 00:12:29,920
can land on something that they like and

00:12:26,980 --> 00:12:32,680
that they can work with easily so I'll

00:12:29,920 --> 00:12:36,820
leave you with this once again some kind

00:12:32,680 --> 00:12:40,430
of plan is better than no kind of what

00:12:36,820 --> 00:12:43,010
alright so now we're going to talk about

00:12:40,430 --> 00:12:44,900
build tools so build tools have become

00:12:43,010 --> 00:12:48,560
really big lately in the last four years

00:12:44,900 --> 00:12:50,960
we've gone from like a handful to so

00:12:48,560 --> 00:12:53,960
many that no one person can keep track

00:12:50,960 --> 00:12:56,060
of all these stupid things so you know

00:12:53,960 --> 00:12:57,950
if I'm not using any right now let's say

00:12:56,060 --> 00:13:00,920
why might I want to adopt build tools

00:12:57,950 --> 00:13:02,180
what are they going to do for me so one

00:13:00,920 --> 00:13:05,000
of my favorite things about build tools

00:13:02,180 --> 00:13:06,560
adds a layer of abstraction so working

00:13:05,000 --> 00:13:08,000
in compiled languages is a good reason

00:13:06,560 --> 00:13:10,580
to use it you know sass less

00:13:08,000 --> 00:13:15,320
CoffeeScript hamill all back in Montana

00:13:10,580 --> 00:13:17,510
cops yeah the other ones and then how

00:13:15,320 --> 00:13:19,640
you work and how your code is delivered

00:13:17,510 --> 00:13:21,680
are not the same thing that was true to

00:13:19,640 --> 00:13:24,350
an extent before them but now you can do

00:13:21,680 --> 00:13:25,910
something that's very good for you but

00:13:24,350 --> 00:13:28,760
would be very bad if you delivered your

00:13:25,910 --> 00:13:30,470
code the exact same way so having small

00:13:28,760 --> 00:13:32,779
files that are just for one component

00:13:30,470 --> 00:13:34,490
might only be like 20 or 30 lines you

00:13:32,779 --> 00:13:36,290
might if you did that and back in the

00:13:34,490 --> 00:13:37,760
day you would have way too many CSS

00:13:36,290 --> 00:13:40,460
files unless you concatenate them all

00:13:37,760 --> 00:13:41,870
but there's a lot of cool little ways

00:13:40,460 --> 00:13:45,230
you can make it easier for you on the

00:13:41,870 --> 00:13:46,970
back end and then on the browser side

00:13:45,230 --> 00:13:49,610
they get what they need and in a really

00:13:46,970 --> 00:13:51,860
nice way if you're doing all this stuff

00:13:49,610 --> 00:13:53,660
write your code can be drier and more

00:13:51,860 --> 00:13:56,180
compartmentalized which goes back to the

00:13:53,660 --> 00:13:57,830
being a lot easier to work with some

00:13:56,180 --> 00:13:59,360
there's definitely you can it can go

00:13:57,830 --> 00:14:01,280
wrong and that won't be the case but

00:13:59,360 --> 00:14:03,680
then you know look at best practice

00:14:01,280 --> 00:14:05,300
practice best practices figure out what

00:14:03,680 --> 00:14:07,370
other people are doing how it's working

00:14:05,300 --> 00:14:08,810
for them there's a lot of lots of great

00:14:07,370 --> 00:14:12,140
articles about ways with working with

00:14:08,810 --> 00:14:13,550
build tools and then another thing that

00:14:12,140 --> 00:14:14,690
I really like about build tools is they

00:14:13,550 --> 00:14:16,820
can help bridge gaps in between

00:14:14,690 --> 00:14:19,550
different skill levels so what I mean by

00:14:16,820 --> 00:14:21,350
that is a clean example our SAS mix-ins

00:14:19,550 --> 00:14:23,600
so you can have your front end dev

00:14:21,350 --> 00:14:26,690
that's like your lead right a really

00:14:23,600 --> 00:14:29,060
good mix in for maybe a complicated

00:14:26,690 --> 00:14:31,250
little thing that you have to know all

00:14:29,060 --> 00:14:32,420
these arcane terrible ie8 things in

00:14:31,250 --> 00:14:34,339
order to get to work right in every

00:14:32,420 --> 00:14:36,680
browser and they got it right they

00:14:34,339 --> 00:14:38,480
tested the crap out of it and then

00:14:36,680 --> 00:14:41,060
another developer might be a junior or

00:14:38,480 --> 00:14:43,160
might be new to the project can use that

00:14:41,060 --> 00:14:44,900
and it'll just work and it's tested and

00:14:43,160 --> 00:14:46,550
when they build new feature be it's

00:14:44,900 --> 00:14:47,600
going to look great because they've

00:14:46,550 --> 00:14:50,660
already been able to hand

00:14:47,600 --> 00:14:52,790
that before another great thing about

00:14:50,660 --> 00:14:55,639
build tools that they automate tasks I

00:14:52,790 --> 00:14:57,529
hate menial repetitive tasks computers

00:14:55,639 --> 00:15:00,889
on the other hand really good at them

00:14:57,529 --> 00:15:02,120
which is nice so things like linting

00:15:00,889 --> 00:15:04,490
repetitive command line task

00:15:02,120 --> 00:15:07,459
minification compiling browser prefixing

00:15:04,490 --> 00:15:10,399
my command our twitch is going away

00:15:07,459 --> 00:15:11,660
slowly but surely so you can do all

00:15:10,399 --> 00:15:15,709
these kinds of one of wonderful things

00:15:11,660 --> 00:15:18,560
and to do all this you generally are

00:15:15,709 --> 00:15:21,230
using a task runner so task runner will

00:15:18,560 --> 00:15:23,120
perform a certain set of things and

00:15:21,230 --> 00:15:25,100
it'll just kind of write down as you

00:15:23,120 --> 00:15:27,410
this that and the other thing and then

00:15:25,100 --> 00:15:30,259
you'll set up a trigger which is either

00:15:27,410 --> 00:15:31,550
type this into the command line or I'm

00:15:30,259 --> 00:15:33,949
going to save a file and then you need

00:15:31,550 --> 00:15:37,279
to do all this junk another great thing

00:15:33,949 --> 00:15:39,740
about task runners is you can set up

00:15:37,279 --> 00:15:41,600
different types of tasks chains so you

00:15:39,740 --> 00:15:44,329
could have 14 different environments

00:15:41,600 --> 00:15:45,560
local verse test first production or you

00:15:44,329 --> 00:15:47,750
could have different ones for different

00:15:45,560 --> 00:15:49,850
type of developers so your front end

00:15:47,750 --> 00:15:53,240
person would be really concerned with

00:15:49,850 --> 00:15:55,040
you know SAS linting or little different

00:15:53,240 --> 00:15:57,170
compiler things and they might want

00:15:55,040 --> 00:15:58,370
things to run a certain way whereas your

00:15:57,170 --> 00:15:59,899
back-end developer doesn't care about

00:15:58,370 --> 00:16:01,699
any of that and they just want the site

00:15:59,899 --> 00:16:03,500
to not look broken because there's no

00:16:01,699 --> 00:16:04,880
CSS so you might have something a lot

00:16:03,500 --> 00:16:09,050
quicker for them that they only have to

00:16:04,880 --> 00:16:11,959
run a couple times so a common front end

00:16:09,050 --> 00:16:13,759
task chain might look like this compile

00:16:11,959 --> 00:16:16,730
my code let's say we're using SAS or

00:16:13,759 --> 00:16:17,930
whatever it is auto prefix it so if you

00:16:16,730 --> 00:16:20,209
haven't heard of auto pre fixers a

00:16:17,930 --> 00:16:22,490
popular one it'll query the last three

00:16:20,209 --> 00:16:24,620
major versions of browsers figure out if

00:16:22,490 --> 00:16:28,040
you need Mo's or you know WebKit or

00:16:24,620 --> 00:16:31,730
whatever kind of obscure little fix in

00:16:28,040 --> 00:16:33,290
there minify so it's really nice and

00:16:31,730 --> 00:16:35,480
small save the end product in the right

00:16:33,290 --> 00:16:37,550
location and then reload my browser and

00:16:35,480 --> 00:16:40,279
all that happens within three seconds

00:16:37,550 --> 00:16:45,220
and that feeling is better than drugs it

00:16:40,279 --> 00:16:48,290
is so good I can't even explain it so

00:16:45,220 --> 00:16:50,540
not all sunshine and flowers there are

00:16:48,290 --> 00:16:54,319
some drawbacks to using them there are

00:16:50,540 --> 00:16:56,470
some like gotchas so caution all ye who

00:16:54,319 --> 00:16:58,279
enter if you're new to build tools

00:16:56,470 --> 00:17:00,949
there's a learning curve

00:16:58,279 --> 00:17:02,060
it is not quite as bad as the drupal

00:17:00,949 --> 00:17:04,569
learning curve but it is definitely

00:17:02,060 --> 00:17:06,949
there and bumps and bruises will happen

00:17:04,569 --> 00:17:09,740
getting your first setup will come up

00:17:06,949 --> 00:17:11,299
with bumps I guarantee it the

00:17:09,740 --> 00:17:14,059
documentation for some of them isn't

00:17:11,299 --> 00:17:15,380
great but what is great is there getting

00:17:14,059 --> 00:17:16,970
really popular and a lot of people are

00:17:15,380 --> 00:17:18,350
writing really good getting started

00:17:16,970 --> 00:17:20,630
articles there's a lot of really good

00:17:18,350 --> 00:17:23,870
stuff out there so definitely look for

00:17:20,630 --> 00:17:25,789
that kind of stuff general warnings so

00:17:23,870 --> 00:17:28,100
if you use them for a long time you

00:17:25,789 --> 00:17:30,620
might run into some of this stuff there

00:17:28,100 --> 00:17:32,659
will be some maintenance costs the goal

00:17:30,620 --> 00:17:35,419
is that the benefit you get out of using

00:17:32,659 --> 00:17:36,919
these things is way better than the time

00:17:35,419 --> 00:17:39,230
you spend like making sure it's running

00:17:36,919 --> 00:17:41,470
the way you want to run so things that

00:17:39,230 --> 00:17:45,710
might come up our long load times or

00:17:41,470 --> 00:17:47,330
long compile times or you might have a

00:17:45,710 --> 00:17:50,299
new tool you want to use because you

00:17:47,330 --> 00:17:52,429
have a new feature set or something that

00:17:50,299 --> 00:17:53,630
came down and you found a really nice

00:17:52,429 --> 00:17:57,409
build tool to help you address that

00:17:53,630 --> 00:17:59,179
problem don't over engineer so that's

00:17:57,409 --> 00:18:00,650
always a risk with development but if

00:17:59,179 --> 00:18:04,399
you start using build tools that

00:18:00,650 --> 00:18:05,780
temptation is palpable so just you know

00:18:04,399 --> 00:18:08,120
wanting to use the latest and greatest

00:18:05,780 --> 00:18:10,010
tool or get that compiled I'm down just

00:18:08,120 --> 00:18:13,100
like you know a couple more seconds or

00:18:10,010 --> 00:18:16,220
like a half second beware long-billed

00:18:13,100 --> 00:18:19,280
times that's definitely can cause a lot

00:18:16,220 --> 00:18:22,700
of frustration with developers we had

00:18:19,280 --> 00:18:24,500
one compile time on a project done

00:18:22,700 --> 00:18:26,030
recently where it was up to a minute for

00:18:24,500 --> 00:18:27,980
some people and it's based on you know

00:18:26,030 --> 00:18:29,870
CPU time and whatever else kind of other

00:18:27,980 --> 00:18:31,250
things but you're usually able to

00:18:29,870 --> 00:18:33,200
address that we got it down to 10

00:18:31,250 --> 00:18:35,419
seconds for them and it only took you

00:18:33,200 --> 00:18:38,980
know an afternoon of someone's time so

00:18:35,419 --> 00:18:41,120
it's not like you're stuck with that

00:18:38,980 --> 00:18:43,820
front end build tools they're still

00:18:41,120 --> 00:18:45,669
pretty young so there is some change is

00:18:43,820 --> 00:18:48,470
still happening but it has calmed down

00:18:45,669 --> 00:18:51,039
and it is you know starting we're

00:18:48,470 --> 00:18:53,299
starting to find like lots of cool

00:18:51,039 --> 00:18:56,270
workflows that people tend to use so

00:18:53,299 --> 00:18:57,500
it's not you know turbulent but if I was

00:18:56,270 --> 00:18:59,419
getting started I would want to know

00:18:57,500 --> 00:19:03,590
that yeah it is still kind of changing

00:18:59,419 --> 00:19:05,539
sometimes another thing that people may

00:19:03,590 --> 00:19:07,370
not think about all the time is it built

00:19:05,539 --> 00:19:08,750
tools can increase developer

00:19:07,370 --> 00:19:10,850
specialization meaning

00:19:08,750 --> 00:19:12,410
if you have a lot of cool tools or using

00:19:10,850 --> 00:19:14,330
likes ass and script and all these

00:19:12,410 --> 00:19:16,100
things it might be harder for a back-end

00:19:14,330 --> 00:19:17,930
developer to swing in and help out with

00:19:16,100 --> 00:19:19,280
a front end task real quick they might

00:19:17,930 --> 00:19:24,770
not be familiar with everything that

00:19:19,280 --> 00:19:29,330
you're using so how do I decide whether

00:19:24,770 --> 00:19:30,980
or not I should be using build tools for

00:19:29,330 --> 00:19:34,730
me it kind of breaks down into project

00:19:30,980 --> 00:19:36,110
and code size for the most part for

00:19:34,730 --> 00:19:37,880
small teams especially if you've never

00:19:36,110 --> 00:19:41,660
done it the setup can be prohibitive

00:19:37,880 --> 00:19:43,070
depending on how big the project is if

00:19:41,660 --> 00:19:45,020
it's really small and you know if it's

00:19:43,070 --> 00:19:49,370
like one page or something and that I

00:19:45,020 --> 00:19:51,260
probably won't bother it can hamper the

00:19:49,370 --> 00:19:52,670
cop the cross functional team members so

00:19:51,260 --> 00:19:54,200
if you have you know if it's you and a

00:19:52,670 --> 00:19:56,420
buddy and you're working on the site for

00:19:54,200 --> 00:19:57,770
someone and they're more back ND and

00:19:56,420 --> 00:20:00,290
let's say they don't know Sasso they're

00:19:57,770 --> 00:20:02,300
not as comfortable as build tools but

00:20:00,290 --> 00:20:03,500
they can help you with vanilla CSS I

00:20:02,300 --> 00:20:07,280
might just leave out some of that stuff

00:20:03,500 --> 00:20:08,840
or maybe all of it if you have but if

00:20:07,280 --> 00:20:11,090
you have a common set of problems and

00:20:08,840 --> 00:20:14,450
you have someone as you work with a lot

00:20:11,090 --> 00:20:15,860
you can get like a basic go to set of

00:20:14,450 --> 00:20:17,480
build tools if you use it solve your

00:20:15,860 --> 00:20:20,660
common problems and help you get started

00:20:17,480 --> 00:20:23,270
up quicker so it's not always a yes or

00:20:20,660 --> 00:20:26,840
no situation alright so it's not always

00:20:23,270 --> 00:20:28,430
in no situation so on larger teams

00:20:26,840 --> 00:20:31,760
project and projects I think it's a

00:20:28,430 --> 00:20:33,710
easier sell they've build tools really

00:20:31,760 --> 00:20:34,700
help build for scale they really help

00:20:33,710 --> 00:20:38,870
you know if there's a lot of people

00:20:34,700 --> 00:20:40,640
contributing to one code base and it you

00:20:38,870 --> 00:20:41,960
know if you have a large team and you're

00:20:40,640 --> 00:20:43,670
probably gonna have a large code base to

00:20:41,960 --> 00:20:45,950
that you know any kind of efficiency you

00:20:43,670 --> 00:20:48,110
can get there is very helpful another

00:20:45,950 --> 00:20:50,270
thing is on a larger team you can

00:20:48,110 --> 00:20:52,550
probably have a point person that knows

00:20:50,270 --> 00:20:54,140
what happened if the build tool isn't

00:20:52,550 --> 00:20:55,730
working as well as should or someone's

00:20:54,140 --> 00:20:58,160
having problems getting started and that

00:20:55,730 --> 00:21:01,190
kind of thing you'll usually have

00:20:58,160 --> 00:21:04,490
someone that can focus on that and then

00:21:01,190 --> 00:21:06,110
again word of warning on bigger team

00:21:04,490 --> 00:21:08,030
sometimes you can lose sight of whether

00:21:06,110 --> 00:21:09,380
or not these things are adding value so

00:21:08,030 --> 00:21:11,870
you want to come back and revisit that

00:21:09,380 --> 00:21:13,530
make sure it's making it easier work on

00:21:11,870 --> 00:21:15,880
and not being more frustrated

00:21:13,530 --> 00:21:18,250
watch for the long billed times bigger

00:21:15,880 --> 00:21:21,550
Kota base can mean bigger load times but

00:21:18,250 --> 00:21:22,930
our bigger compile times but like I said

00:21:21,550 --> 00:21:25,540
that is something that can totally be

00:21:22,930 --> 00:21:27,670
addressed requiring a lot of

00:21:25,540 --> 00:21:29,860
command-line knowledge can be a little

00:21:27,670 --> 00:21:31,780
tricky maybe some people who are new to

00:21:29,860 --> 00:21:34,510
front end or you know maybe new the

00:21:31,780 --> 00:21:36,850
project that might be a little difficult

00:21:34,510 --> 00:21:39,520
for them but if you document document

00:21:36,850 --> 00:21:40,780
document how to get started what your

00:21:39,520 --> 00:21:42,190
life is going to be like now that you're

00:21:40,780 --> 00:21:43,720
working with these build tools like how

00:21:42,190 --> 00:21:45,400
Mike you work a little differently if

00:21:43,720 --> 00:21:47,980
you're writing that stuff down and a

00:21:45,400 --> 00:21:49,990
readme or whatever that's going to make

00:21:47,980 --> 00:21:53,320
it a lot easier and cut down on some of

00:21:49,990 --> 00:21:55,690
these negatives so are there large

00:21:53,320 --> 00:21:58,360
projects that i wouldn't use build tools

00:21:55,690 --> 00:22:01,510
on I could think of one rather big one

00:21:58,360 --> 00:22:03,310
one that we're all here for Drupal if I

00:22:01,510 --> 00:22:05,590
can control core for a day I would not

00:22:03,310 --> 00:22:08,440
put in my favorite build tools build

00:22:05,590 --> 00:22:10,270
tools make it make a system opinionated

00:22:08,440 --> 00:22:11,830
about how you're working with it's not

00:22:10,270 --> 00:22:13,930
really the point of Drupal to say this

00:22:11,830 --> 00:22:16,630
is exactly how I want you to write your

00:22:13,930 --> 00:22:18,040
CSS it needs to be in SAS and then we're

00:22:16,630 --> 00:22:21,400
going to use on a prefix ER and it's

00:22:18,040 --> 00:22:22,960
going to work like this so it a little

00:22:21,400 --> 00:22:25,690
more realistically let's say you're

00:22:22,960 --> 00:22:27,010
working on a large project and you might

00:22:25,690 --> 00:22:29,380
not know who's going to maintain it down

00:22:27,010 --> 00:22:31,030
the road or it's going to be it's going

00:22:29,380 --> 00:22:33,490
to have to be used by so many different

00:22:31,030 --> 00:22:35,080
types of people that having build tools

00:22:33,490 --> 00:22:38,650
and it might be very prohibitive for

00:22:35,080 --> 00:22:40,120
them so you know having that kind of

00:22:38,650 --> 00:22:41,920
judgment of whether or not it's going to

00:22:40,120 --> 00:22:44,590
be valuable for who ends up having to

00:22:41,920 --> 00:22:48,940
use it is really where I kind of make

00:22:44,590 --> 00:22:52,750
that line and yeah another thing you can

00:22:48,940 --> 00:22:55,630
potentially do is if it's a big project

00:22:52,750 --> 00:22:57,130
and you really want to have the benefit

00:22:55,630 --> 00:22:58,660
of working with built tools there is

00:22:57,130 --> 00:23:01,060
sometimes the option of being able to

00:22:58,660 --> 00:23:03,220
strip them out when you ship it so that

00:23:01,060 --> 00:23:05,350
the final deliverable is really nice

00:23:03,220 --> 00:23:07,150
well-organized CSS but on the back end

00:23:05,350 --> 00:23:10,660
you're using SAS or you know whatever it

00:23:07,150 --> 00:23:11,779
is that you were using so yeah and with

00:23:10,660 --> 00:23:20,210
that

00:23:11,779 --> 00:23:22,009
lady Sally young hi so welcome to the

00:23:20,210 --> 00:23:24,469
package manager section of the torque

00:23:22,009 --> 00:23:27,169
and I'm going to show you a problem that

00:23:24,469 --> 00:23:30,049
I come across quite often and it's this

00:23:27,169 --> 00:23:32,210
so I start on a project I open up the

00:23:30,049 --> 00:23:35,719
theme or whatever app I'm working on and

00:23:32,210 --> 00:23:37,179
suddenly I see a pile of JavaScript and

00:23:35,719 --> 00:23:39,769
that's great I'm sure it's all working

00:23:37,179 --> 00:23:42,080
and I open up something that I need to

00:23:39,769 --> 00:23:43,940
debug so some of the things that one

00:23:42,080 --> 00:23:46,549
thing I need to debug is this minified

00:23:43,940 --> 00:23:48,739
javascript here well firstly I don't

00:23:46,549 --> 00:23:50,749
have the unmodified version so that

00:23:48,739 --> 00:23:52,700
makes life really difficult there's no

00:23:50,749 --> 00:23:54,379
meta information attached to it so I I

00:23:52,700 --> 00:23:55,940
don't know where this JavaScript came

00:23:54,379 --> 00:23:58,309
from I don't know if it has any

00:23:55,940 --> 00:24:00,440
dependencies or if something depends on

00:23:58,309 --> 00:24:02,779
this I don't know what version we're

00:24:00,440 --> 00:24:04,940
using right now I also don't know if

00:24:02,779 --> 00:24:07,279
anything else came with this JavaScript

00:24:04,940 --> 00:24:10,190
with any CSS required for this to do

00:24:07,279 --> 00:24:11,869
what it does and so this is something

00:24:10,190 --> 00:24:13,609
that package managers can solve really

00:24:11,869 --> 00:24:15,559
well for us and this is why we get

00:24:13,609 --> 00:24:18,559
slightly less abstract because it turns

00:24:15,559 --> 00:24:21,349
out you don't have too many choices on

00:24:18,559 --> 00:24:26,419
the front end for package management so

00:24:21,349 --> 00:24:28,070
any kind of external dependencies any

00:24:26,419 --> 00:24:30,529
kind of external dependencies that you

00:24:28,070 --> 00:24:33,259
want to pull in so low dash or

00:24:30,529 --> 00:24:37,219
moderniser for JavaScript or Susie grids

00:24:33,259 --> 00:24:39,679
for CSS you can do that with NPM or

00:24:37,219 --> 00:24:42,139
Bauer they're the two main front and

00:24:39,679 --> 00:24:44,149
package managers that we use you have

00:24:42,139 --> 00:24:46,909
probably already used a package manager

00:24:44,149 --> 00:24:49,460
in other aspects of using computers if

00:24:46,909 --> 00:24:51,589
you've ever used debian and done apt-get

00:24:49,460 --> 00:24:53,839
or young on redhat then you've used a

00:24:51,589 --> 00:24:55,429
package manager it went off it sounds a

00:24:53,839 --> 00:24:57,139
software that you needed figured out all

00:24:55,429 --> 00:24:59,509
the dependencies for you brought it all

00:24:57,139 --> 00:25:02,210
in and bam there's your software if you

00:24:59,509 --> 00:25:04,519
use Drupal 8 then it comes with composer

00:25:02,210 --> 00:25:05,929
which is PHP's package manager that's

00:25:04,519 --> 00:25:08,059
how we pull in all the third party

00:25:05,929 --> 00:25:09,710
symphony components we're now able to

00:25:08,059 --> 00:25:11,690
keep track of all the versions we know

00:25:09,710 --> 00:25:13,460
where everything came from if there's a

00:25:11,690 --> 00:25:16,369
problem with that component we can go

00:25:13,460 --> 00:25:19,460
back upstream and make the changes up

00:25:16,369 --> 00:25:21,150
there so I'm going to talk about mpm to

00:25:19,460 --> 00:25:24,220
start with

00:25:21,150 --> 00:25:27,040
that's no JSE's package manager it has a

00:25:24,220 --> 00:25:30,309
really simple configuration file it's a

00:25:27,040 --> 00:25:31,990
JSON file and there's not much to it it

00:25:30,309 --> 00:25:34,809
just lists out the short beams of

00:25:31,990 --> 00:25:36,820
everything that's in our project so now

00:25:34,809 --> 00:25:39,100
if I wanted to look up cheerio I could

00:25:36,820 --> 00:25:40,840
go on NPM dorg it'll give me a whole big

00:25:39,100 --> 00:25:42,520
description about it it'll take me to

00:25:40,840 --> 00:25:44,710
the github issue queue if I need I know

00:25:42,520 --> 00:25:46,530
what version is there I can see any

00:25:44,710 --> 00:25:48,520
dependencies that it might have as well

00:25:46,530 --> 00:25:50,100
there's other things you can do with

00:25:48,520 --> 00:25:52,090
this file as well you can split out

00:25:50,100 --> 00:25:54,220
dependencies that you might only want

00:25:52,090 --> 00:25:56,500
when you're doing development so maybe I

00:25:54,220 --> 00:25:59,380
need some kind of packages to help with

00:25:56,500 --> 00:26:01,090
my build tools or I can just have any

00:25:59,380 --> 00:26:04,690
kind of dependencies I need for my front

00:26:01,090 --> 00:26:06,880
end one common misconception about this

00:26:04,690 --> 00:26:08,350
is that you have to be using nodejs in

00:26:06,880 --> 00:26:11,050
your project so this to actually be

00:26:08,350 --> 00:26:13,030
useful and you don't have to at all you

00:26:11,050 --> 00:26:14,920
really really don't need no J us to be

00:26:13,030 --> 00:26:17,290
able to take advantage as long as you're

00:26:14,920 --> 00:26:18,670
using any kind of JavaScript or I think

00:26:17,290 --> 00:26:19,990
you can even get CSS frameworks and

00:26:18,670 --> 00:26:22,120
other things through this as well you

00:26:19,990 --> 00:26:24,220
can pull it in through NPM and if even

00:26:22,120 --> 00:26:26,050
though NPM is the biggest repository of

00:26:24,220 --> 00:26:28,960
packages on the internet now I think you

00:26:26,050 --> 00:26:30,580
don't necessarily have to use NPM parts

00:26:28,960 --> 00:26:32,440
on this you can put github short names

00:26:30,580 --> 00:26:34,720
in you can point it to tags and do all

00:26:32,440 --> 00:26:37,000
kinds of stuff so it's very flexible if

00:26:34,720 --> 00:26:39,730
you have any private repositories you

00:26:37,000 --> 00:26:42,190
can manage it through that as well the

00:26:39,730 --> 00:26:45,100
other option is Bauer guess what it's

00:26:42,190 --> 00:26:48,610
JSON file looks like pretty much the

00:26:45,100 --> 00:26:50,640
same and so why would you want to use

00:26:48,610 --> 00:26:52,900
NPM with a vowel or the other way around

00:26:50,640 --> 00:26:56,650
they're slightly different in that their

00:26:52,900 --> 00:26:59,290
dependency structure is not the same so

00:26:56,650 --> 00:27:01,390
for NPM it's a nested dependency

00:26:59,290 --> 00:27:03,760
structure whereas bowel is specifically

00:27:01,390 --> 00:27:07,210
made for front in dependency so that's

00:27:03,760 --> 00:27:09,460
flat what does that mean so when we when

00:27:07,210 --> 00:27:12,130
we bring in a package you'll see this

00:27:09,460 --> 00:27:13,360
big node modules folder there and we've

00:27:12,130 --> 00:27:15,070
pulled in a bunch of stuff that I

00:27:13,360 --> 00:27:17,440
mentioned earlier if we look at cheerio

00:27:15,070 --> 00:27:20,140
we can see underneath there it has its

00:27:17,440 --> 00:27:22,300
own modules folder and underneath there

00:27:20,140 --> 00:27:25,450
you can see that we have a dependency or

00:27:22,300 --> 00:27:27,160
CSS selects and under there CSS select

00:27:25,450 --> 00:27:29,770
had a bunch of dependencies there like

00:27:27,160 --> 00:27:30,970
CSS Wharton Dom utils so this is

00:27:29,770 --> 00:27:32,710
something you really have to watch out

00:27:30,970 --> 00:27:32,940
for because it can get very Turtles all

00:27:32,710 --> 00:27:35,670
the

00:27:32,940 --> 00:27:37,860
down if you're not careful but one

00:27:35,670 --> 00:27:38,940
advantage of that is you can be pretty

00:27:37,860 --> 00:27:40,800
sure that nothing's going to go wrong

00:27:38,940 --> 00:27:43,440
because you have the exact versions of

00:27:40,800 --> 00:27:46,110
everything you need power on the other

00:27:43,440 --> 00:27:48,210
hand if I download two modules and they

00:27:46,110 --> 00:27:50,280
both require jQuery because it only has

00:27:48,210 --> 00:27:52,260
a flat structure it's only going to pull

00:27:50,280 --> 00:27:54,600
in jQuery once at the top and both my

00:27:52,260 --> 00:27:56,400
modules can point to that so why would

00:27:54,600 --> 00:27:58,470
you want to use one over the other I

00:27:56,400 --> 00:28:01,050
tend to use NPM if I'm writing

00:27:58,470 --> 00:28:02,790
JavaScript modules you can use the

00:28:01,050 --> 00:28:04,860
require function in that to pull them in

00:28:02,790 --> 00:28:06,210
as well which is great so you can pack

00:28:04,860 --> 00:28:08,790
it up earlier JavaScript modules

00:28:06,210 --> 00:28:10,590
browserify or web pack just use it

00:28:08,790 --> 00:28:13,620
that's great it doesn't tend to come out

00:28:10,590 --> 00:28:15,420
too big and PM also has what's called a

00:28:13,620 --> 00:28:17,010
DG command and it will attempt to take

00:28:15,420 --> 00:28:20,160
all these dependencies that are common

00:28:17,010 --> 00:28:23,970
and push them up to the top it's mostly

00:28:20,160 --> 00:28:25,320
effective not always whereas Bauer you

00:28:23,970 --> 00:28:27,030
might want to use that more for bringing

00:28:25,320 --> 00:28:28,770
in polyfills things that are just kind

00:28:27,030 --> 00:28:33,630
of like going to globally sit on your

00:28:28,770 --> 00:28:36,210
page so you can use them both what are

00:28:33,630 --> 00:28:38,130
the downsides well now you've added all

00:28:36,210 --> 00:28:40,020
these external dependencies instead of

00:28:38,130 --> 00:28:42,090
having to check your JavaScript into

00:28:40,020 --> 00:28:44,520
your repository I experienced this

00:28:42,090 --> 00:28:47,130
recently many of you probably did when

00:28:44,520 --> 00:28:50,820
github was being hacked by wealthy dos

00:28:47,130 --> 00:28:52,290
sorry by Chinese people it all went down

00:28:50,820 --> 00:28:54,900
and every time I was trying to compile

00:28:52,290 --> 00:28:57,180
my project I went off to mpm to get the

00:28:54,900 --> 00:28:58,860
packages and it was kept timing out so I

00:28:57,180 --> 00:29:01,830
couldn't do any deployments which was

00:28:58,860 --> 00:29:04,380
very irritating but my project itself

00:29:01,830 --> 00:29:06,750
was hosted on github so I kind of would

00:29:04,380 --> 00:29:08,040
have had the problem had I not used mpm

00:29:06,750 --> 00:29:11,310
anyway though that was definitely

00:29:08,040 --> 00:29:14,040
something you need to weigh up so moving

00:29:11,310 --> 00:29:17,580
on to you everyone's favorite subject

00:29:14,040 --> 00:29:21,210
which is testing I split up front end

00:29:17,580 --> 00:29:22,980
testing into three areas visual testing

00:29:21,210 --> 00:29:25,350
including regression testing is probably

00:29:22,980 --> 00:29:27,600
the hardest of all of them to set up and

00:29:25,350 --> 00:29:29,370
the reason for that is that setting up

00:29:27,600 --> 00:29:31,170
each application that you work on

00:29:29,370 --> 00:29:33,000
they're going to be very different so

00:29:31,170 --> 00:29:35,030
say we were working on a Drupal project

00:29:33,000 --> 00:29:37,770
is going to have all its build tools or

00:29:35,030 --> 00:29:40,020
whatever we're using in the front end so

00:29:37,770 --> 00:29:42,750
say Wes comes along and makes a pull

00:29:40,020 --> 00:29:44,040
request p changes some CSS so okay we

00:29:42,750 --> 00:29:44,650
want to do some visual testing on that

00:29:44,040 --> 00:29:46,660
we're going to have to

00:29:44,650 --> 00:29:48,550
spin up a new version of Drupal apply

00:29:46,660 --> 00:29:50,080
the new code figure out what pages we

00:29:48,550 --> 00:29:52,570
want to take screenshots up and

00:29:50,080 --> 00:29:55,390
everything so there's no one recipe for

00:29:52,570 --> 00:29:56,920
that it's quite difficult but it can be

00:29:55,390 --> 00:29:59,260
very useful especially if you're doing

00:29:56,920 --> 00:30:00,880
any kind of cross browser stuff we can

00:29:59,260 --> 00:30:03,010
kind of hit that all in one go see what

00:30:00,880 --> 00:30:04,920
it all looks like and if you're not

00:30:03,010 --> 00:30:07,810
using a strict component based

00:30:04,920 --> 00:30:09,520
architecture if things is like got a

00:30:07,810 --> 00:30:11,890
little bit spaghetti and cross over e

00:30:09,520 --> 00:30:13,810
then that's really really useful as well

00:30:11,890 --> 00:30:16,090
like you made some CSS changes in one

00:30:13,810 --> 00:30:17,110
place and it made some kind of effect

00:30:16,090 --> 00:30:19,150
somewhere else that you weren't really

00:30:17,110 --> 00:30:21,910
expecting and this sort of stuff is

00:30:19,150 --> 00:30:23,800
really good for catching that it might

00:30:21,910 --> 00:30:26,260
not be great to even set up regression

00:30:23,800 --> 00:30:28,510
testing until your kind of towards the

00:30:26,260 --> 00:30:29,860
end of your main dev effort because

00:30:28,510 --> 00:30:31,600
everything is going to be changing

00:30:29,860 --> 00:30:32,830
really really rapidly so every pull

00:30:31,600 --> 00:30:35,230
request you make it's going to be like

00:30:32,830 --> 00:30:37,900
well a bunch of stuff changed like yeah

00:30:35,230 --> 00:30:40,480
I know so that's kind of good towards

00:30:37,900 --> 00:30:41,710
the end of a life cycle and then as

00:30:40,480 --> 00:30:45,400
things start to kind of move a bit

00:30:41,710 --> 00:30:47,920
slower very useful and then I saw his

00:30:45,400 --> 00:30:49,630
unit testing you might have seen or done

00:30:47,920 --> 00:30:52,270
some of that in in Drupal 8 in

00:30:49,630 --> 00:30:54,130
particular with phpunit we can do unit

00:30:52,270 --> 00:30:56,440
testing in JavaScript as well so we're

00:30:54,130 --> 00:30:58,060
actually checking that the logic of what

00:30:56,440 --> 00:30:59,890
we're writing like typically JavaScript

00:30:58,060 --> 00:31:01,900
actually does what we want it to do

00:30:59,890 --> 00:31:03,910
weather that we're not testing any kind

00:31:01,900 --> 00:31:06,340
of services we're just making sure that

00:31:03,910 --> 00:31:08,170
the code we've written is solid and if

00:31:06,340 --> 00:31:09,640
we make any changes elsewhere we're not

00:31:08,170 --> 00:31:11,890
going to broken the logic for other

00:31:09,640 --> 00:31:14,050
things that we've done there's a bunch

00:31:11,890 --> 00:31:16,090
of different stuff you can use the unit

00:31:14,050 --> 00:31:17,530
testing if you're using any kind of

00:31:16,090 --> 00:31:19,150
JavaScript framework usually there'll be

00:31:17,530 --> 00:31:21,490
some kind of popular testing thing that

00:31:19,150 --> 00:31:24,520
goes with it so usual Google food for

00:31:21,490 --> 00:31:26,350
that one the easiest kind of testing you

00:31:24,520 --> 00:31:28,690
can set up and for me has been the most

00:31:26,350 --> 00:31:31,390
useful though is code sniffing and

00:31:28,690 --> 00:31:34,150
linting and it's fantastic because it

00:31:31,390 --> 00:31:36,340
can save you so much time you'd be

00:31:34,150 --> 00:31:38,230
surprised like I do it all the time I

00:31:36,340 --> 00:31:40,210
put little areas and my JavaScript I

00:31:38,230 --> 00:31:41,500
forget to do it and you can just pull

00:31:40,210 --> 00:31:43,480
that up straight away so it really

00:31:41,500 --> 00:31:46,030
improves your code quality quite rapidly

00:31:43,480 --> 00:31:48,040
it will also help you enforce a coding

00:31:46,030 --> 00:31:49,300
standards across a product so you know

00:31:48,040 --> 00:31:53,020
you can make sure that everyone uses

00:31:49,300 --> 00:31:56,110
camelcase which is very useful you can

00:31:53,020 --> 00:31:57,190
also check for any performance problems

00:31:56,110 --> 00:31:58,960
that might arise

00:31:57,190 --> 00:32:01,060
any kind of misuse of JavaScript

00:31:58,960 --> 00:32:04,410
variables always really good stuff to

00:32:01,060 --> 00:32:07,000
look out for super easy to set up and

00:32:04,410 --> 00:32:08,470
one thing to watch out for though is

00:32:07,000 --> 00:32:11,860
that you really need to keep an eye on

00:32:08,470 --> 00:32:13,990
false positives and cats are not like

00:32:11,860 --> 00:32:16,570
humans you know they they have a very

00:32:13,990 --> 00:32:18,520
set way of doing their set pattern of

00:32:16,570 --> 00:32:20,320
doing things so for example say we're

00:32:18,520 --> 00:32:23,020
using a database module we've decided

00:32:20,320 --> 00:32:25,060
that our variables are always going to

00:32:23,020 --> 00:32:28,270
be camel case but to use this this

00:32:25,060 --> 00:32:30,370
database object that we've loaded in it

00:32:28,270 --> 00:32:32,500
requires some kind of sneak case well

00:32:30,370 --> 00:32:34,480
now our linter is going to fail that so

00:32:32,500 --> 00:32:36,400
what do we do do we just let it fail or

00:32:34,480 --> 00:32:37,900
we gonna have to go and change the

00:32:36,400 --> 00:32:41,230
external library it's not really

00:32:37,900 --> 00:32:43,120
possible so most lenders will actually

00:32:41,230 --> 00:32:46,660
let you turn that stuff off line by line

00:32:43,120 --> 00:32:48,190
so that's pretty good and also don't

00:32:46,660 --> 00:32:49,660
always assume that the tests you've

00:32:48,190 --> 00:32:51,400
written or the be-all and end-all and

00:32:49,660 --> 00:32:53,980
everything is right I've seen situations

00:32:51,400 --> 00:32:56,350
where a test has failed and in order to

00:32:53,980 --> 00:32:58,390
fix it it threw up a performance error

00:32:56,350 --> 00:33:01,420
and actually the fix made performance

00:32:58,390 --> 00:33:02,890
even worse so in that case we need to go

00:33:01,420 --> 00:33:04,420
back and we need to fix the test so you

00:33:02,890 --> 00:33:07,480
always need to keep an eye on stuff like

00:33:04,420 --> 00:33:09,220
that and the thing that will stop that

00:33:07,480 --> 00:33:11,350
happening is that you have a really good

00:33:09,220 --> 00:33:12,730
peer review system in place so you're

00:33:11,350 --> 00:33:15,250
never going to be able to replace humans

00:33:12,730 --> 00:33:16,330
and humans are great they can figure out

00:33:15,250 --> 00:33:18,460
all kinds of things that are wrong with

00:33:16,330 --> 00:33:21,670
your code so make sure everyone's

00:33:18,460 --> 00:33:22,990
checking your stuff and with that I'm

00:33:21,670 --> 00:33:29,080
going to pass you back to West a talk

00:33:22,990 --> 00:33:30,820
about frameworks all right front-end

00:33:29,080 --> 00:33:33,130
frameworks so we're talking bootstrap

00:33:30,820 --> 00:33:36,430
Suzy grids Yeti foundation this kind of

00:33:33,130 --> 00:33:40,390
stuff so why might I pull in one of

00:33:36,430 --> 00:33:43,210
these guys benefits so a lot of testing

00:33:40,390 --> 00:33:45,760
grunt work coding already done for you

00:33:43,210 --> 00:33:48,040
also documentation done and usually is a

00:33:45,760 --> 00:33:50,890
beautiful documentation which is great a

00:33:48,040 --> 00:33:53,200
lot of support either official support

00:33:50,890 --> 00:33:54,430
or it's all over stack exchange or

00:33:53,200 --> 00:33:55,720
whatever you'll just pull it up with

00:33:54,430 --> 00:33:57,790
google and you can figure out what other

00:33:55,720 --> 00:34:00,670
problems people are having that might

00:33:57,790 --> 00:34:02,380
help you out it's also it's built that

00:34:00,670 --> 00:34:05,170
those are almost always built to help

00:34:02,380 --> 00:34:07,960
devs of varying front end dev skill

00:34:05,170 --> 00:34:10,010
levels accomplished good interfaces so

00:34:07,960 --> 00:34:12,290
if you have a project that

00:34:10,010 --> 00:34:13,909
you know doesn't necessarily have a

00:34:12,290 --> 00:34:17,840
bunch of front and rock stars on it it

00:34:13,909 --> 00:34:19,429
might actually help you out and then one

00:34:17,840 --> 00:34:21,020
benefit is that some front-end

00:34:19,429 --> 00:34:23,810
architecture decisions are already made

00:34:21,020 --> 00:34:25,100
for you so you can kind of just kind of

00:34:23,810 --> 00:34:28,149
go with what they've already been doing

00:34:25,100 --> 00:34:30,470
they've documented it well almost always

00:34:28,149 --> 00:34:33,740
so you can just kind of go with the flow

00:34:30,470 --> 00:34:35,750
with them down sides the more you

00:34:33,740 --> 00:34:37,899
deviate from the design that they have

00:34:35,750 --> 00:34:40,639
the harder it's going to be to maintain

00:34:37,899 --> 00:34:42,440
if you can find one that's exactly what

00:34:40,639 --> 00:34:46,850
you want good for you maybe you should

00:34:42,440 --> 00:34:48,560
use that but if it's very different from

00:34:46,850 --> 00:34:51,620
what you want and you want to be able to

00:34:48,560 --> 00:34:54,470
tweak things that's going to hurt code

00:34:51,620 --> 00:34:56,870
bloat can be an issue if that is one of

00:34:54,470 --> 00:34:58,760
the popular downsides of this and the

00:34:56,870 --> 00:35:00,800
one thing I would say about that is it

00:34:58,760 --> 00:35:02,750
assumes that you would be good at not

00:35:00,800 --> 00:35:05,210
making code bloat anyway so if you're

00:35:02,750 --> 00:35:08,650
not full of front and rock stars it

00:35:05,210 --> 00:35:10,940
might actually be better to use this

00:35:08,650 --> 00:35:12,500
specificity Wars those will happen

00:35:10,940 --> 00:35:13,880
especially if you start deviating you're

00:35:12,500 --> 00:35:15,740
going to start having to write really

00:35:13,880 --> 00:35:17,750
weird selectors and making sure that

00:35:15,740 --> 00:35:22,490
your CSS wins out over theirs because

00:35:17,750 --> 00:35:23,840
editing the base code will make it even

00:35:22,490 --> 00:35:26,180
more of a headache because now you can't

00:35:23,840 --> 00:35:28,490
upgrade or update whenever there's

00:35:26,180 --> 00:35:30,590
something new comes out and then

00:35:28,490 --> 00:35:32,390
downside a lot of front-end architecture

00:35:30,590 --> 00:35:34,520
should decisions are made for you and

00:35:32,390 --> 00:35:36,500
that's also a downside because if they

00:35:34,520 --> 00:35:39,710
don't work for you it's kind of tough

00:35:36,500 --> 00:35:44,900
luck you just you literally have to go

00:35:39,710 --> 00:35:47,750
with the flow at that point so when my I

00:35:44,900 --> 00:35:49,640
adopt one of these frameworks so it is

00:35:47,750 --> 00:35:51,400
pragmatism over idealism in some

00:35:49,640 --> 00:35:53,300
respects because one of these

00:35:51,400 --> 00:35:55,460
architectures are really hard to build

00:35:53,300 --> 00:35:57,770
on your own and if you're building for

00:35:55,460 --> 00:36:00,740
scale and you might have crunches and

00:35:57,770 --> 00:36:03,410
keen abilities or time or you can't do a

00:36:00,740 --> 00:36:04,910
something that has to be so large this

00:36:03,410 --> 00:36:06,410
can kind of cut some of that out there

00:36:04,910 --> 00:36:07,970
is a lot of testing already done these

00:36:06,410 --> 00:36:10,730
things a lot of people are using them it

00:36:07,970 --> 00:36:13,210
will save you a little time especially

00:36:10,730 --> 00:36:15,710
if you are spanning multiple

00:36:13,210 --> 00:36:18,230
applications and multiple systems with

00:36:15,710 --> 00:36:19,229
one front-end architecture this can come

00:36:18,230 --> 00:36:23,319
in handy

00:36:19,229 --> 00:36:25,449
and then supporting a lot of devs that

00:36:23,319 --> 00:36:27,759
may or may not be front-end savvy is a

00:36:25,449 --> 00:36:29,289
lot easier they can go and see that if I

00:36:27,759 --> 00:36:31,059
want to make a component looks like this

00:36:29,289 --> 00:36:32,890
that is this kind of content my

00:36:31,059 --> 00:36:34,809
application to spit out this kind of

00:36:32,890 --> 00:36:37,359
markup and classes and I put my content

00:36:34,809 --> 00:36:39,849
here here and here so it can be pretty

00:36:37,359 --> 00:36:42,400
useful I will say that if you do have a

00:36:39,849 --> 00:36:45,099
lot of front-end rock stars and they do

00:36:42,400 --> 00:36:47,140
have the time I don't recommend this but

00:36:45,099 --> 00:36:51,669
that is not always the case it is not

00:36:47,140 --> 00:36:54,219
always that perfect world so the too

00:36:51,669 --> 00:36:57,849
long did not listen portion of our

00:36:54,219 --> 00:37:00,789
presentation some kind of plan is better

00:36:57,849 --> 00:37:04,329
than no plan at all build tools are good

00:37:00,789 --> 00:37:06,939
probably package managers yes please

00:37:04,329 --> 00:37:09,249
those are awesome testing is good but

00:37:06,939 --> 00:37:12,400
people are good to the robot revolution

00:37:09,249 --> 00:37:16,989
is not here yet frameworks use at your

00:37:12,400 --> 00:37:18,910
own risk so with that you can ask one of

00:37:16,989 --> 00:37:21,069
us with lovely people any question you

00:37:18,910 --> 00:37:23,079
want there is a microphone right there

00:37:21,069 --> 00:37:25,390
or I will repeat your question into this

00:37:23,079 --> 00:37:28,559
microphone and hopefully someone has a

00:37:25,390 --> 00:37:28,559
really awesome answer

00:37:39,030 --> 00:37:45,680
I saw one guy back there creature

00:37:53,390 --> 00:38:00,150
perhaps and I mostly use Bower for doing

00:37:58,080 --> 00:38:02,850
polyfills so if I didn't have to do that

00:38:00,150 --> 00:38:05,850
I probably wouldn't use Bower at all and

00:38:02,850 --> 00:38:07,740
oh sorry the question was do you foresee

00:38:05,850 --> 00:38:11,670
a time where you would just use NPM

00:38:07,740 --> 00:38:12,900
instead of Bauer Sarah projects I could

00:38:11,670 --> 00:38:15,000
work on that I wouldn't need to use

00:38:12,900 --> 00:38:18,810
Bower at all some I wouldn't need to use

00:38:15,000 --> 00:38:20,190
NPM at all so it depends what you're

00:38:18,810 --> 00:38:23,580
doing you definitely don't have to use

00:38:20,190 --> 00:38:26,120
both Thomas Lattimore who I totally

00:38:23,580 --> 00:38:26,120
don't know at all

00:38:34,020 --> 00:38:39,309
and so the question was house was

00:38:36,369 --> 00:38:41,980
browser if I play into NPM and all the

00:38:39,309 --> 00:38:45,220
package manager goodness and that's a

00:38:41,980 --> 00:38:47,349
question so if you if you haven't used

00:38:45,220 --> 00:38:50,069
browserify before what browser if I can

00:38:47,349 --> 00:38:53,890
do and when you're writing JavaScript

00:38:50,069 --> 00:38:56,349
wait nodejs even you can do VAR whatever

00:38:53,890 --> 00:38:58,059
equals require and you can pull in a

00:38:56,349 --> 00:39:00,910
module that you've downloaded through

00:38:58,059 --> 00:39:02,890
mpm and now what browser if I will do is

00:39:00,910 --> 00:39:04,779
go through all of your JavaScript

00:39:02,890 --> 00:39:06,400
modules and it figures out all the

00:39:04,779 --> 00:39:08,880
dependencies and then it will add them

00:39:06,400 --> 00:39:12,700
into one big bundled javascript file and

00:39:08,880 --> 00:39:14,859
so it lets you write your client side

00:39:12,700 --> 00:39:17,020
JavaScript as if it were on the server

00:39:14,859 --> 00:39:20,140
which is really great and you can then

00:39:17,020 --> 00:39:24,039
run it in both places which is pretty

00:39:20,140 --> 00:39:26,500
awesome yeah I use that word yeah so I

00:39:24,039 --> 00:39:31,319
thought you do so you wouldn't rather if

00:39:26,500 --> 00:39:31,319
I doesn't really work with Bauer I'd say

00:39:52,890 --> 00:40:08,439
is there a way of automating it do you

00:39:55,150 --> 00:40:09,609
mean or yeah yeah can you repeat think

00:40:08,439 --> 00:40:11,289
the question was something I can say is

00:40:09,609 --> 00:40:14,549
there a way of automating testing that

00:40:11,289 --> 00:40:18,569
makes it easier for users to be able to

00:40:14,549 --> 00:40:20,919
to test your things and yeah if you can

00:40:18,569 --> 00:40:21,999
for every code change you make if you

00:40:20,919 --> 00:40:25,390
can make some kind of automated

00:40:21,999 --> 00:40:27,099
environment that spins up and so they

00:40:25,390 --> 00:40:28,269
can someone who's like a product owner

00:40:27,099 --> 00:40:30,429
for example they're not going to be able

00:40:28,269 --> 00:40:32,469
to pull in your branch and then like

00:40:30,429 --> 00:40:33,669
pull the code in and test it so if you

00:40:32,469 --> 00:40:35,589
can automatically spin up those

00:40:33,669 --> 00:40:37,150
environments which you kind of need to

00:40:35,589 --> 00:40:39,160
do if you were doing any kind of visual

00:40:37,150 --> 00:40:40,989
testing and then they can just go in and

00:40:39,160 --> 00:40:42,219
click the button and like oh hey the

00:40:40,989 --> 00:40:44,289
navigation changed to green that's

00:40:42,219 --> 00:40:46,559
exactly what i wanted to do so yeah you

00:40:44,289 --> 00:40:46,559
can

00:40:57,369 --> 00:41:04,160
yeah very little Oh haven't we done

00:41:02,119 --> 00:41:06,500
anything with phantom Jas visual

00:41:04,160 --> 00:41:08,390
regression testing the answer was yeah a

00:41:06,500 --> 00:41:10,010
little bit I actually played around with

00:41:08,390 --> 00:41:12,290
rape a little bit which i think is built

00:41:10,010 --> 00:41:14,089
on top of phantom jayus but the last

00:41:12,290 --> 00:41:15,470
time that I used phantom it was a bit

00:41:14,089 --> 00:41:18,500
broken and that it could only really

00:41:15,470 --> 00:41:23,390
work in one browser at the time I don't

00:41:18,500 --> 00:41:24,859
think it was chrome okay session on it

00:41:23,390 --> 00:41:35,359
tomorrow to 30 if you'd like to know

00:41:24,859 --> 00:41:37,430
more but that's a different talk yet so

00:41:35,359 --> 00:41:41,329
which to build tools should we use in

00:41:37,430 --> 00:41:43,400
why so there are advantages to different

00:41:41,329 --> 00:41:48,020
build tools and there's holy wars on the

00:41:43,400 --> 00:41:49,940
internet right about that yeah now I'm a

00:41:48,020 --> 00:41:51,589
grunt guy I'll save that but in this

00:41:49,940 --> 00:41:53,300
talk I didn't want to like they like you

00:41:51,589 --> 00:41:55,700
should use this one because I liked it a

00:41:53,300 --> 00:41:57,050
lot so I just wanted to say like okay

00:41:55,700 --> 00:41:59,359
why would I use one of these things what

00:41:57,050 --> 00:42:04,250
is even going to do for me so yeah

00:41:59,359 --> 00:42:10,400
that's my answer I use grunt grunt yeah

00:42:04,250 --> 00:42:13,280
we're grunt people yeah right okay why

00:42:10,400 --> 00:42:15,049
are you basically write a common thing

00:42:13,280 --> 00:42:16,940
that people think grunt can't do and it

00:42:15,049 --> 00:42:18,650
definitely can do things they sink

00:42:16,940 --> 00:42:20,329
receive I think there's a grunt

00:42:18,650 --> 00:42:21,980
concurrent plugin and that's one thing I

00:42:20,329 --> 00:42:24,410
really look like about grunt is the

00:42:21,980 --> 00:42:27,020
ecosystem for it is huge so if you can

00:42:24,410 --> 00:42:28,579
think of something there's probably some

00:42:27,020 --> 00:42:31,000
kind of plug in for either does a true

00:42:28,579 --> 00:42:31,000
yeah

00:42:33,540 --> 00:42:36,540
ok

00:42:47,020 --> 00:42:49,080
you

00:42:53,290 --> 00:42:57,200
so the question was once he pulled in

00:42:55,760 --> 00:42:59,240
all these things with package managers

00:42:57,200 --> 00:43:01,550
how do you pull them into whatever

00:42:59,240 --> 00:43:03,950
you're doing in Drupal and it depends

00:43:01,550 --> 00:43:05,390
how you're using those packages so like

00:43:03,950 --> 00:43:07,790
the question earlier about browserify

00:43:05,390 --> 00:43:10,369
and if we were pulling things in with

00:43:07,790 --> 00:43:13,220
NPM to do it that way then browser if I

00:43:10,369 --> 00:43:14,600
would take care of it for us there's you

00:43:13,220 --> 00:43:17,180
can just put them into your info file

00:43:14,600 --> 00:43:18,650
manually if you like the file names

00:43:17,180 --> 00:43:20,510
won't change so when you update stuff

00:43:18,650 --> 00:43:23,090
with em p.m. or Bauer still going to

00:43:20,510 --> 00:43:25,850
work there's a grunt plugin you can use

00:43:23,090 --> 00:43:29,000
called wire depth and if you look at the

00:43:25,850 --> 00:43:31,190
there's a start this eve on a lot about

00:43:29,000 --> 00:43:32,780
github could wind up and if you go in

00:43:31,190 --> 00:43:34,280
there there's a little script you can

00:43:32,780 --> 00:43:35,540
run and it will wire up all your

00:43:34,280 --> 00:43:41,869
dependencies for you and put it in the

00:43:35,540 --> 00:43:45,160
info file which is kind of cool I think

00:43:41,869 --> 00:43:45,160

YouTube URL: https://www.youtube.com/watch?v=pjeO9gM7f2g


