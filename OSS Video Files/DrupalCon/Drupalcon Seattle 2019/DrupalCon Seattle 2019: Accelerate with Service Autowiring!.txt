Title: DrupalCon Seattle 2019: Accelerate with Service Autowiring!
Publication date: 2019-04-12
Playlist: Drupalcon Seattle 2019
Description: 
	Services? Yea, you've worked with them: registering them in {modulename}.services.yml, adding arguments, using them. Great! While you've been crushing it, Symfony has been busy too - with new features to accelerate how you work!

In this talk, we'll discover service autowiring, auto-registration and autoconfiguration: a set of features that will make you move faster and *love* the process! Just created a new service class and ready to use it? No need to touch *any* configuration files. Need to add another constructor argument? Type-hint it and keep coding: no YAML involved.

This talk assumes aÂ basic understanding of Drupal 8 - and we'll walk through the basics of services in the beginning. By the end, you'll be confident and ready to leverage these new features to work faster. Zoom!
Captions: 
	00:00:00,030 --> 00:00:05,670
because we have half an hour's and we

00:00:02,220 --> 00:00:09,179
have lots of fun stuff to get through my

00:00:05,670 --> 00:00:12,059
first my disclaimer is I like to be

00:00:09,179 --> 00:00:15,210
mobile and I'm sort of stuck to this

00:00:12,059 --> 00:00:17,100
microphone so if I'm some more liquid

00:00:15,210 --> 00:00:17,340
than normal and we'll just blame it on

00:00:17,100 --> 00:00:19,680
that

00:00:17,340 --> 00:00:20,850
yeah so I'm gonna say put right here

00:00:19,680 --> 00:00:25,109
instead of wandering over there and

00:00:20,850 --> 00:00:26,460
pointing at the screen yeah this is

00:00:25,109 --> 00:00:31,800
gonna be very interesting cool

00:00:26,460 --> 00:00:33,600
so anyways welcome to what service you

00:00:31,800 --> 00:00:35,399
come from the symphony world actually so

00:00:33,600 --> 00:00:37,230
hi my name is Ryan

00:00:35,399 --> 00:00:39,360
I've been around Drupal for a long time

00:00:37,230 --> 00:00:40,620
my first site in it yet but I know a

00:00:39,360 --> 00:00:41,820
decent bit about it cuz I come from the

00:00:40,620 --> 00:00:43,290
symphony world I'm the lead and

00:00:41,820 --> 00:00:44,610
documentation team and I work on a lot

00:00:43,290 --> 00:00:46,320
of things related to developer

00:00:44,610 --> 00:00:48,899
experience i'ma write it for Symphony

00:00:46,320 --> 00:00:51,809
casts that's my day job I'm generally

00:00:48,899 --> 00:00:53,640
just like a symphony fanboy and a

00:00:51,809 --> 00:00:55,440
husband of the much more talented and

00:00:53,640 --> 00:00:57,300
makes everything actually work in my

00:00:55,440 --> 00:00:59,370
life and our business Symphony Cass

00:00:57,300 --> 00:01:02,820
Liana she used to come to this

00:00:59,370 --> 00:01:05,939
conference but then we had a kid school

00:01:02,820 --> 00:01:08,939
I've got more complicated you know so

00:01:05,939 --> 00:01:11,060
she is at home right now but you can

00:01:08,939 --> 00:01:20,189
tweet at her and be like hey Leanna is

00:01:11,060 --> 00:01:22,020
the baby asleep yet so to the much more

00:01:20,189 --> 00:01:23,729
charming son Beckett because then we

00:01:22,020 --> 00:01:25,200
have a kid and you guys are my captive

00:01:23,729 --> 00:01:26,729
audience so I get to show you a picture

00:01:25,200 --> 00:01:30,540
and you have to sit there and look at it

00:01:26,729 --> 00:01:32,250
I used to I used to have like multiple

00:01:30,540 --> 00:01:33,170
pictures but it got got a little out of

00:01:32,250 --> 00:01:41,460
hand

00:01:33,170 --> 00:01:43,290
all right so service configuration setup

00:01:41,460 --> 00:01:44,939
so when I go through a couple of bits of

00:01:43,290 --> 00:01:48,509
code here and and so you can kind of get

00:01:44,939 --> 00:01:50,549
an idea of what we're building and so

00:01:48,509 --> 00:01:52,829
this isn't gonna be kind of cold yet is

00:01:50,549 --> 00:01:54,299
hopefully somewhat familiar the idea

00:01:52,829 --> 00:01:55,950
behind it so we're gonna start with we

00:01:54,299 --> 00:01:57,090
have this class these two guys up here

00:01:55,950 --> 00:01:59,190
we're in my workshop yesterday so

00:01:57,090 --> 00:02:00,490
they're gonna recognize this class

00:01:59,190 --> 00:02:02,140
[Music]

00:02:00,490 --> 00:02:04,450
because of course we are in the land of

00:02:02,140 --> 00:02:05,979
coffee and it has a method in that

00:02:04,450 --> 00:02:07,869
called prepared drink you pass it an

00:02:05,979 --> 00:02:09,369
argument and it returns a string so just

00:02:07,869 --> 00:02:11,410
imagine this is a class that you created

00:02:09,369 --> 00:02:14,290
for some reason and you're using it who

00:02:11,410 --> 00:02:16,630
knows various places in your code great

00:02:14,290 --> 00:02:17,890
when we're inside a custom module all

00:02:16,630 --> 00:02:22,180
the code is gonna be inside of a custom

00:02:17,890 --> 00:02:24,430
module more complicated than that we

00:02:22,180 --> 00:02:27,370
decided that we needed some third we

00:02:24,430 --> 00:02:29,230
need some service so I've also I've used

00:02:27,370 --> 00:02:31,450
I'm using the pendency injection here to

00:02:29,230 --> 00:02:32,860
get the config factory service if you're

00:02:31,450 --> 00:02:34,390
not familiar with that service it

00:02:32,860 --> 00:02:36,160
doesn't matter that's a service that

00:02:34,390 --> 00:02:38,200
lives in the container and so I'm using

00:02:36,160 --> 00:02:40,180
proper dependency injection you know

00:02:38,200 --> 00:02:41,319
adding the constructor and the argument

00:02:40,180 --> 00:02:43,209
to the constructor setting another

00:02:41,319 --> 00:02:45,450
property so I'm using dependency

00:02:43,209 --> 00:02:48,790
injection to get access to that service

00:02:45,450 --> 00:02:50,500
and of course want to do this in order

00:02:48,790 --> 00:02:54,040
to be able to use this barista class and

00:02:50,500 --> 00:02:56,590
in order for Drupal's container to be

00:02:54,040 --> 00:02:58,660
able to pass me the confections conduct

00:02:56,590 --> 00:03:00,849
config Factory I'm gonna need a source

00:02:58,660 --> 00:03:02,769
as well so I have my coffee shop

00:03:00,849 --> 00:03:05,260
services that yamo at the root of my

00:03:02,769 --> 00:03:07,209
module and I have the machine idea of my

00:03:05,260 --> 00:03:09,549
service which is coffee shop a barista

00:03:07,209 --> 00:03:11,170
the class name and of course I've

00:03:09,549 --> 00:03:13,420
specified the argument I have one

00:03:11,170 --> 00:03:15,940
argument and it is the config factory

00:03:13,420 --> 00:03:17,260
service at configure factory so

00:03:15,940 --> 00:03:18,730
hopefully this is least somewhat

00:03:17,260 --> 00:03:21,760
familiar to you this is our starting

00:03:18,730 --> 00:03:23,680
points and ok and now that we have this

00:03:21,760 --> 00:03:25,570
registered as a service if we wanted to

00:03:23,680 --> 00:03:28,180
use it from anywhere but for example

00:03:25,570 --> 00:03:29,680
from a controller I can say Drupal

00:03:28,180 --> 00:03:31,390
kolonko and get container there's other

00:03:29,680 --> 00:03:33,220
ways to do it but Drupal con will go and

00:03:31,390 --> 00:03:34,209
get container arrow get coffee shop

00:03:33,220 --> 00:03:35,680
barista

00:03:34,209 --> 00:03:37,690
so I fetched that service out of the

00:03:35,680 --> 00:03:38,950
container the container knows to pass me

00:03:37,690 --> 00:03:41,290
that config factory is the first

00:03:38,950 --> 00:03:43,389
argument and and I'm able to call my

00:03:41,290 --> 00:03:45,190
prepared drink method on it so we have

00:03:43,389 --> 00:03:47,440
one class that class is using dependency

00:03:45,190 --> 00:03:49,900
injection it's registered as a service

00:03:47,440 --> 00:03:50,650
this is like the very kind of

00:03:49,900 --> 00:03:54,160
traditional

00:03:50,650 --> 00:03:57,060
verbose service configuration that that

00:03:54,160 --> 00:04:01,660
is kind of worked for years and years so

00:03:57,060 --> 00:04:05,079
this is great except that we did way too

00:04:01,660 --> 00:04:06,190
much work I haven't done something like

00:04:05,079 --> 00:04:09,190
that

00:04:06,190 --> 00:04:11,170
if you're not familiar with using this

00:04:09,190 --> 00:04:12,700
Symphony framework I get a copy and

00:04:11,170 --> 00:04:14,050
paste it all that code into a symphony

00:04:12,700 --> 00:04:16,660
framework and it would have worked

00:04:14,050 --> 00:04:19,060
it's exactly the same however I haven't

00:04:16,660 --> 00:04:22,990
written code like that for years that

00:04:19,060 --> 00:04:25,300
has way too much work we do it that way

00:04:22,990 --> 00:04:26,620
so we basically eliminated all that and

00:04:25,300 --> 00:04:28,990
I'm gonna take you guys your step by

00:04:26,620 --> 00:04:30,940
step the things that you can actually do

00:04:28,990 --> 00:04:33,940
in Drupal today to do less work than

00:04:30,940 --> 00:04:37,870
that so the first thing was the machine

00:04:33,940 --> 00:04:38,710
ID we're going onto the machine ID what

00:04:37,870 --> 00:04:40,660
you might seem a little weird at first

00:04:38,710 --> 00:04:43,270
but let me show you what I mean this is

00:04:40,660 --> 00:04:45,430
not a there was no patch to Symphony or

00:04:43,270 --> 00:04:46,750
Drupal that made this possible this is

00:04:45,430 --> 00:04:49,420
just something you always could have

00:04:46,750 --> 00:04:51,370
done it's not a oh my god a hallelujah

00:04:49,420 --> 00:04:54,610
moment it's just a slight simplification

00:04:51,370 --> 00:04:57,520
all right most of the time you only have

00:04:54,610 --> 00:04:59,760
if you have a class you usually register

00:04:57,520 --> 00:05:01,870
that clients as a service one time

00:04:59,760 --> 00:05:03,910
sometimes you have a class and you you

00:05:01,870 --> 00:05:05,140
make like three services and you pass it

00:05:03,910 --> 00:05:06,490
like different arguments or something

00:05:05,140 --> 00:05:08,410
but that's not the normal case usually

00:05:06,490 --> 00:05:10,570
have a class you register it as a

00:05:08,410 --> 00:05:12,070
service one time in the container so if

00:05:10,570 --> 00:05:13,900
you're doing that why not just make

00:05:12,070 --> 00:05:15,430
these service ID the class name it's

00:05:13,900 --> 00:05:17,830
just a little bit easier to read so if

00:05:15,430 --> 00:05:19,120
you look at our controller I know if you

00:05:17,830 --> 00:05:21,580
were like looking at this six months

00:05:19,120 --> 00:05:22,870
later maybe it's what you're getting out

00:05:21,580 --> 00:05:24,430
of the container you don't have to go

00:05:22,870 --> 00:05:26,260
through this layer all but what's that

00:05:24,430 --> 00:05:28,419
machine ID I wonder what kind of

00:05:26,260 --> 00:05:29,860
instance that gives me it's just like

00:05:28,419 --> 00:05:31,330
it's people but it doesn't have to be

00:05:29,860 --> 00:05:32,800
but it's probably this thing unless

00:05:31,330 --> 00:05:34,840
somebody's really trying to screw with

00:05:32,800 --> 00:05:37,300
me and making the service I do something

00:05:34,840 --> 00:05:40,480
that's just wrong so it's just like a

00:05:37,300 --> 00:05:43,120
little bit easier to read and you can

00:05:40,480 --> 00:05:45,160
even use the colon colon clean syntax

00:05:43,120 --> 00:05:47,230
and if you're using editor like phpstorm

00:05:45,160 --> 00:05:49,630
that's really easy because you would say

00:05:47,230 --> 00:05:51,490
like you know Drupal colon colon get

00:05:49,630 --> 00:05:54,640
container arrow get and then you'd be

00:05:51,490 --> 00:05:56,050
typing like Bao and hit tab and it would

00:05:54,640 --> 00:05:57,960
have the you statement on time for you

00:05:56,050 --> 00:06:00,970
and then you just do Colin Colin class

00:05:57,960 --> 00:06:03,910
okay so even less typing I'm super clear

00:06:00,970 --> 00:06:05,860
what I'm getting out of a container so

00:06:03,910 --> 00:06:07,330
if we have just like that one classes

00:06:05,860 --> 00:06:08,800
you know rich is a service one time we

00:06:07,330 --> 00:06:13,540
don't really need that extra layer of

00:06:08,800 --> 00:06:15,430
machine ID abstraction in the way it

00:06:13,540 --> 00:06:18,080
also turns out and this is something

00:06:15,430 --> 00:06:19,970
that required a patch this is available

00:06:18,080 --> 00:06:23,389
dribble 8.6 this is something you can do

00:06:19,970 --> 00:06:25,490
right now if your ID is a class name you

00:06:23,389 --> 00:06:27,199
don't need the class key so notice the

00:06:25,490 --> 00:06:28,550
class key is gone here because it was a

00:06:27,199 --> 00:06:30,289
little redundant before to have like

00:06:28,550 --> 00:06:32,599
this ID which was this long thing and

00:06:30,289 --> 00:06:35,360
then class below it which was the exact

00:06:32,599 --> 00:06:37,189
same string so you can just do this it

00:06:35,360 --> 00:06:41,240
fills in the class for you so that's

00:06:37,189 --> 00:06:42,439
kind of nice so let's add a second

00:06:41,240 --> 00:06:43,759
service then so this is gonna be another

00:06:42,439 --> 00:06:45,500
spot where we're gonna add a little

00:06:43,759 --> 00:06:46,939
complexity to our application it's not

00:06:45,500 --> 00:06:49,039
anything new I'm not showing you a new

00:06:46,939 --> 00:06:51,319
feature so we decided we're gonna have a

00:06:49,039 --> 00:06:53,479
coffee machine which has a brew method

00:06:51,319 --> 00:06:55,069
it doesn't have any dependencies doesn't

00:06:53,479 --> 00:06:56,659
have a constructor it's just nice boring

00:06:55,069 --> 00:06:58,729
but we're going to write this as a

00:06:56,659 --> 00:07:01,039
service in a second and I'm making this

00:06:58,729 --> 00:07:03,349
coffee machine because I want to use it

00:07:01,039 --> 00:07:05,030
from within the barista class so in the

00:07:03,349 --> 00:07:07,340
barista class I'm adding a second

00:07:05,030 --> 00:07:09,469
constructor argument and just doing the

00:07:07,340 --> 00:07:12,560
normal dependency injection flow setting

00:07:09,469 --> 00:07:14,270
that on a second property and here but

00:07:12,560 --> 00:07:17,930
you can imagine going further than

00:07:14,270 --> 00:07:21,080
barista using the coffee machine to do

00:07:17,930 --> 00:07:27,560
something as soon as we have a second

00:07:21,080 --> 00:07:29,509
argument to the barista class there's no

00:07:27,560 --> 00:07:33,529
a second argument that you need to pass

00:07:29,509 --> 00:07:35,419
to barista when you instantiate it so

00:07:33,529 --> 00:07:37,129
that's fine so you know actually reading

00:07:35,419 --> 00:07:38,539
this from the bottom first first thing

00:07:37,129 --> 00:07:41,360
we're to do really is probably register

00:07:38,539 --> 00:07:43,129
on our new coffee machine class as a

00:07:41,360 --> 00:07:45,050
service we're gonna new use our new kind

00:07:43,129 --> 00:07:47,240
of class name instead of the machine ID

00:07:45,050 --> 00:07:49,460
way of doing that it has no argument so

00:07:47,240 --> 00:07:52,729
that's easy and then here I'm just gonna

00:07:49,460 --> 00:07:55,610
say act and then the long class name so

00:07:52,729 --> 00:07:58,750
to register that tea to tell the

00:07:55,610 --> 00:07:58,750
container that it needs to pass that

00:08:03,310 --> 00:08:08,779
this is another feature that is

00:08:05,330 --> 00:08:10,669
available already in gerbil today so

00:08:08,779 --> 00:08:13,190
with all the way it's an option that you

00:08:10,669 --> 00:08:15,259
can pass under your service so normally

00:08:13,190 --> 00:08:16,310
you just have class and arguments if you

00:08:15,259 --> 00:08:18,919
said all the way true

00:08:16,310 --> 00:08:21,860
you can take out the arguments the

00:08:18,919 --> 00:08:23,389
arguments can be empty because Drupal is

00:08:21,860 --> 00:08:24,710
going to figure out what you want to

00:08:23,389 --> 00:08:26,480
pass there

00:08:24,710 --> 00:08:29,720
and the way it does that is by reading

00:08:26,480 --> 00:08:31,370
the type hints so yeah this is not gonna

00:08:29,720 --> 00:08:32,750
work if you have a scalar arguments like

00:08:31,370 --> 00:08:33,830
like a string or something and we're

00:08:32,750 --> 00:08:35,810
gonna talk about how you handle that

00:08:33,830 --> 00:08:36,830
later but most of the time you're doing

00:08:35,810 --> 00:08:38,060
Otto walnut you're you're doing

00:08:36,830 --> 00:08:39,980
dependency injection because you need

00:08:38,060 --> 00:08:41,660
another service so if you do the type

00:08:39,980 --> 00:08:43,880
int then it's gonna get automatically

00:08:41,660 --> 00:08:47,090
passed to you now key question is how

00:08:43,880 --> 00:08:47,830
does that work and the answer is it

00:08:47,090 --> 00:08:49,880
depends

00:08:47,830 --> 00:08:51,080
there's actually I'm going to talk about

00:08:49,880 --> 00:08:52,280
this later but there's actually two

00:08:51,080 --> 00:08:54,500
different ways there's two different

00:08:52,280 --> 00:08:56,180
pieces of logic in Drupal and Symphony

00:08:54,500 --> 00:08:58,790
that that do this there's the old logic

00:08:56,180 --> 00:09:01,340
which still works in Drupal 8.6 and

00:08:58,790 --> 00:09:03,170
there's the new way of doing it so the

00:09:01,340 --> 00:09:05,720
old way of doing it which at this moment

00:09:03,170 --> 00:09:07,970
is what we're using the old way of doing

00:09:05,720 --> 00:09:09,410
it was basically when you had auto wire

00:09:07,970 --> 00:09:11,570
true for a service it looked at your

00:09:09,410 --> 00:09:14,030
type int looks at all of the services in

00:09:11,570 --> 00:09:15,680
the container and if one of the services

00:09:14,030 --> 00:09:17,780
in the container implements that

00:09:15,680 --> 00:09:19,550
interface or has that class you know cuz

00:09:17,780 --> 00:09:21,530
you can use the interface or class if it

00:09:19,550 --> 00:09:22,580
finds exactly woman that matches that it

00:09:21,530 --> 00:09:26,830
passes it to you

00:09:22,580 --> 00:09:30,020
if it finds 0 or 2 then you get an error

00:09:26,830 --> 00:09:31,940
that's what makes sense it was a little

00:09:30,020 --> 00:09:33,890
bit too magical for us so there's

00:09:31,940 --> 00:09:35,180
actually a newer one doing like a new

00:09:33,890 --> 00:09:36,890
strategy that's a little bit more

00:09:35,180 --> 00:09:38,390
explicit a little more out or you

00:09:36,890 --> 00:09:40,310
actually kind of control it more and I'm

00:09:38,390 --> 00:09:41,930
gonna talk about that later it's

00:09:40,310 --> 00:09:43,520
actually like going through and just

00:09:41,930 --> 00:09:45,560
saying yeah I see that there's one

00:09:43,520 --> 00:09:46,990
service in the container that implements

00:09:45,560 --> 00:09:49,640
the config directory interface so

00:09:46,990 --> 00:09:51,080
probably that's what you want and same

00:09:49,640 --> 00:09:52,610
thing obviously with - machine that's

00:09:51,080 --> 00:09:53,750
there's only one service with coffee

00:09:52,610 --> 00:09:56,450
machine so it just passes the

00:09:53,750 --> 00:09:59,680
confirmation to us so it means that our

00:09:56,450 --> 00:10:03,590
services point is starting to get skinny

00:09:59,680 --> 00:10:07,130
so I need to just be the class names and

00:10:03,590 --> 00:10:10,460
that's it so the next thing that we can

00:10:07,130 --> 00:10:12,500
do is apply some default service

00:10:10,460 --> 00:10:14,180
configuration because I have it here but

00:10:12,500 --> 00:10:17,690
you know our cocoa machine doesn't have

00:10:14,180 --> 00:10:19,940
any arguments on there all of our

00:10:17,690 --> 00:10:22,340
services you know so that way if we

00:10:19,940 --> 00:10:24,770
under machine service it's gonna allow

00:10:22,340 --> 00:10:26,510
us to just go into that class and I

00:10:24,770 --> 00:10:28,190
construct your argument type into it and

00:10:26,510 --> 00:10:30,140
just keep working you not need to go

00:10:28,190 --> 00:10:30,870
back to my services file and add auto

00:10:30,140 --> 00:10:34,750
wire

00:10:30,870 --> 00:10:36,830
you know wire up the argument explicitly

00:10:34,750 --> 00:10:39,900
[Music]

00:10:36,830 --> 00:10:42,600
wearing only fills in your missing

00:10:39,900 --> 00:10:44,430
arguments so if you are true under

00:10:42,600 --> 00:10:46,980
something and for some reason you

00:10:44,430 --> 00:10:48,840
decided to tell the Container ro of the

00:10:46,980 --> 00:10:50,730
constructor arguments I don't want to

00:10:48,840 --> 00:10:52,710
give us a big shoulder shrug okay

00:10:50,730 --> 00:10:54,240
looks like you did the work so it's

00:10:52,710 --> 00:10:55,920
actually safe to have auto bail on all

00:10:54,240 --> 00:10:57,030
the time and it's only going to try

00:10:55,920 --> 00:11:01,080
filling the stuff that you're missing

00:10:57,030 --> 00:11:03,960
anyways config we just do we just say

00:11:01,080 --> 00:11:06,150
like what register services just you

00:11:03,960 --> 00:11:08,280
know lik make them all all the water

00:11:06,150 --> 00:11:11,460
without meaning to say auto wire true

00:11:08,280 --> 00:11:16,410
auto wire true auto wire true and you

00:11:11,460 --> 00:11:19,050
actually can small lie do that adding

00:11:16,410 --> 00:11:20,880
this magic underscore defaults key this

00:11:19,050 --> 00:11:23,010
is a new feature that's coming from

00:11:20,880 --> 00:11:26,010
Symphony I'm just going to like a magic

00:11:23,010 --> 00:11:28,620
service ID here is a specific magic

00:11:26,010 --> 00:11:30,390
string and any configuration you put on

00:11:28,620 --> 00:11:33,870
there underscore defense is going to

00:11:30,390 --> 00:11:36,330
apply to every service in this file it's

00:11:33,870 --> 00:11:38,070
kind of this great like global slash

00:11:36,330 --> 00:11:41,100
local configurations not going to like

00:11:38,070 --> 00:11:42,780
modify service is coming from core or

00:11:41,100 --> 00:11:45,870
coming from some current trip module

00:11:42,780 --> 00:11:47,100
it's only gonna talk to a point to what

00:11:45,870 --> 00:11:49,110
you actually have in this for now so

00:11:47,100 --> 00:11:51,270
it's really really nice so if we do this

00:11:49,110 --> 00:11:55,620
like that's a small improvement we were

00:11:51,270 --> 00:12:02,790
able to get one services actually save

00:11:55,620 --> 00:12:04,700
this like ten lines of code this is

00:12:02,790 --> 00:12:10,220
where things really start to get bananas

00:12:04,700 --> 00:12:13,080
service auto registration because it's

00:12:10,220 --> 00:12:16,410
pattern here like every points I put in

00:12:13,080 --> 00:12:18,720
my service directory have a service

00:12:16,410 --> 00:12:21,960
directory I'm always registering them as

00:12:18,720 --> 00:12:24,690
a service and I'm always using the class

00:12:21,960 --> 00:12:27,930
name as the service ID you know I can't

00:12:24,690 --> 00:12:30,020
that maybe be automated a little bit an

00:12:27,930 --> 00:12:32,730
answer is actually yes

00:12:30,020 --> 00:12:34,410
so they put some tax here where you

00:12:32,730 --> 00:12:36,330
actually have sort of looks like a

00:12:34,410 --> 00:12:38,510
service but it has this resource key

00:12:36,330 --> 00:12:40,550
under it you actually kind of put the

00:12:38,510 --> 00:12:42,380
space prefix of what you kind of expect

00:12:40,550 --> 00:12:44,269
to be in that directory and this can go

00:12:42,380 --> 00:12:49,029
recursive this this can look at multiple

00:12:44,269 --> 00:12:51,320
sub directories service directory and

00:12:49,029 --> 00:12:53,000
resources that going up the pattern so

00:12:51,320 --> 00:12:54,470
you can actually say like look in this

00:12:53,000 --> 00:12:56,449
directory and this directory in this

00:12:54,470 --> 00:12:57,800
directory and match start this or

00:12:56,449 --> 00:12:59,329
anything like that there's also an

00:12:57,800 --> 00:13:01,040
exclude key so you could say like look

00:12:59,329 --> 00:13:02,600
look use this pattern in these

00:13:01,040 --> 00:13:04,250
directories but exclude this one

00:13:02,600 --> 00:13:05,420
directory in this other directory so you

00:13:04,250 --> 00:13:08,060
can use whatever kind of pattern you

00:13:05,420 --> 00:13:10,910
want to kind of lice alok ate where your

00:13:08,060 --> 00:13:12,199
service classes are everything in your

00:13:10,910 --> 00:13:14,389
source directory you is actually a

00:13:12,199 --> 00:13:17,449
service but the cipa is you want to kind

00:13:14,389 --> 00:13:19,279
of capture it with this let me just go

00:13:17,449 --> 00:13:31,699
someplace and registers and them as a

00:13:19,279 --> 00:13:33,110
service before you actually to them

00:13:31,699 --> 00:13:34,760
because they are being registered in

00:13:33,110 --> 00:13:36,920
this so suddenly we have the exact same

00:13:34,760 --> 00:13:38,959
thing that we had before just with no

00:13:36,920 --> 00:13:41,269
ones it just actually having to do any

00:13:38,959 --> 00:13:43,880
work so this is really like the

00:13:41,269 --> 00:13:45,680
game-changing thing because if you think

00:13:43,880 --> 00:13:48,529
about how it's going to look going

00:13:45,680 --> 00:13:50,360
forward in a mutual if I need to create

00:13:48,529 --> 00:13:52,490
a new service and start using it I'm

00:13:50,360 --> 00:13:53,870
going to touch no config I'm going to

00:13:52,490 --> 00:13:55,910
create a point to my service directory

00:13:53,870 --> 00:13:57,440
and it's immediately available to you

00:13:55,910 --> 00:13:59,660
somewhere because it's automatically

00:13:57,440 --> 00:14:01,220
registered as a service if I'm in some

00:13:59,660 --> 00:14:03,199
of the service and I decide I need a

00:14:01,220 --> 00:14:05,420
third constructor arguments I have a

00:14:03,199 --> 00:14:07,519
constructor arguments I type int it with

00:14:05,420 --> 00:14:09,889
the thing I need and I keep coding I

00:14:07,519 --> 00:14:11,389
don't go to a llamÃ³ file this is a big

00:14:09,889 --> 00:14:13,519
change we kind of introduced it's

00:14:11,389 --> 00:14:15,560
actually available in symphony 3.4 which

00:14:13,519 --> 00:14:17,930
is why extend Drupal apps but this is a

00:14:15,560 --> 00:14:21,949
big person symphony for like we want to

00:14:17,930 --> 00:14:23,899
keep you inside your code not constantly

00:14:21,949 --> 00:14:26,110
switching context to go back to like the

00:14:23,899 --> 00:14:28,819
framework Drupal kind of integration

00:14:26,110 --> 00:14:31,279
configuration level like stay in your

00:14:28,819 --> 00:14:36,459
code and keep coding so this is

00:14:31,279 --> 00:14:36,459
wonderful except that it doesn't work

00:14:40,020 --> 00:14:44,130
the problem is it's one of those weird

00:14:41,370 --> 00:14:47,520
cases where the code for this actually

00:14:44,130 --> 00:14:51,150
exists in Drupal but they overrode it

00:14:47,520 --> 00:14:52,770
and it's like a nice there's a question

00:14:51,150 --> 00:14:55,020
in the core of Drupal it's basically out

00:14:52,770 --> 00:14:56,760
of date oh there's an open issue tracker

00:14:55,020 --> 00:14:58,650
you can find it if you google for it

00:14:56,760 --> 00:14:59,100
online and this basically needs to be

00:14:58,650 --> 00:15:00,480
enabled

00:14:59,100 --> 00:15:02,340
I'm gonna give you a very quick

00:15:00,480 --> 00:15:05,580
workaround because this is actually very

00:15:02,340 --> 00:15:06,840
easy to re add yourselves I hope it will

00:15:05,580 --> 00:15:08,640
work soon it's not a big deal they just

00:15:06,840 --> 00:15:10,830
basically need to say like bring the new

00:15:08,640 --> 00:15:15,570
code kind of downstream and that it's

00:15:10,830 --> 00:15:17,250
going to work so you might not be

00:15:15,570 --> 00:15:20,610
familiar with this concept you'll see

00:15:17,250 --> 00:15:23,430
lots of controls if you would really do

00:15:20,610 --> 00:15:24,600
some custom service configurations you

00:15:23,430 --> 00:15:26,820
can create what's called a service

00:15:24,600 --> 00:15:28,680
provider you just basically create a

00:15:26,820 --> 00:15:31,860
class that lives directly in the source

00:15:28,680 --> 00:15:33,750
directory of your Drupal module and it

00:15:31,860 --> 00:15:35,730
needs to have become the module name

00:15:33,750 --> 00:15:37,410
service provider it needs to implement

00:15:35,730 --> 00:15:38,820
the service provider interface so it's

00:15:37,410 --> 00:15:40,920
one of those cases where you know you

00:15:38,820 --> 00:15:42,420
like named something exactly right and

00:15:40,920 --> 00:15:45,510
Drupal finds it one of those situations

00:15:42,420 --> 00:15:47,880
so if you find those rules then when you

00:15:45,510 --> 00:15:50,420
when the container is being built it's

00:15:47,880 --> 00:15:54,870
going to call this register function

00:15:50,420 --> 00:15:57,150
here so we are going to basically

00:15:54,870 --> 00:15:59,610
re-enter functionality and about twelve

00:15:57,150 --> 00:16:01,440
lines of code so we're going to use on a

00:15:59,610 --> 00:16:04,500
possible finder it comes from Symphony

00:16:01,440 --> 00:16:06,540
it's available and it's just a nice way

00:16:04,500 --> 00:16:07,860
to kind of find files okay point

00:16:06,540 --> 00:16:10,110
everything in the service directory that

00:16:07,860 --> 00:16:12,420
ends in star dot PHP and then we can

00:16:10,110 --> 00:16:14,070
loop over it then we can say the quest

00:16:12,420 --> 00:16:16,440
name is going to be a Drupal slash

00:16:14,070 --> 00:16:17,970
coffee shop slash service slash and then

00:16:16,440 --> 00:16:21,090
we're gonna grab the file name and just

00:16:17,970 --> 00:16:22,650
strip off of that PHP thing but this

00:16:21,090 --> 00:16:24,060
works great we're just getting the class

00:16:22,650 --> 00:16:25,980
name because we you know we know x of

00:16:24,060 --> 00:16:28,200
all of those rules so we're gonna

00:16:25,980 --> 00:16:30,860
continue on then for each okay we have

00:16:28,200 --> 00:16:33,450
this Queen's name so this is our kind of

00:16:30,860 --> 00:16:35,850
just looking at the for each one of the

00:16:33,450 --> 00:16:37,140
points name and only this contain a

00:16:35,850 --> 00:16:39,000
builder thing this is a little bit more

00:16:37,140 --> 00:16:40,760
advanced this is an object that helps

00:16:39,000 --> 00:16:43,110
build the services in the container so

00:16:40,760 --> 00:16:43,830
basically do is we ask the container has

00:16:43,110 --> 00:16:46,350
definition

00:16:43,830 --> 00:16:47,790
way of asking is this service or does

00:16:46,350 --> 00:16:50,370
this service already exist in the

00:16:47,790 --> 00:16:52,410
container yes or no and if it does we're

00:16:50,370 --> 00:16:54,060
just going to skip it and the reason why

00:16:52,410 --> 00:16:57,510
you'll see this in a second is this is

00:16:54,060 --> 00:17:00,060
gonna allow us to actually explicitly

00:16:57,510 --> 00:17:03,150
set these services in our services that

00:17:00,060 --> 00:17:05,670
Yama file and annotate if we decided to

00:17:03,150 --> 00:17:08,310
do that we skip it here because this is

00:17:05,670 --> 00:17:09,959
actually run after our services what we

00:17:08,310 --> 00:17:11,580
do is like do a bunch like have a

00:17:09,959 --> 00:17:13,560
situation where we actually do need to

00:17:11,580 --> 00:17:14,880
do some really custom configuration we

00:17:13,560 --> 00:17:16,950
put it in our services at yellow file

00:17:14,880 --> 00:17:19,650
and then this thing overloads it and

00:17:16,950 --> 00:17:21,060
kills all of our custom settings so this

00:17:19,650 --> 00:17:22,800
is basically saying if the users already

00:17:21,060 --> 00:17:24,300
registered this service then like we're

00:17:22,800 --> 00:17:26,459
gone just like use their so we're

00:17:24,300 --> 00:17:28,320
skipping it and then right here is this

00:17:26,459 --> 00:17:29,820
is basically on a PHP level how you

00:17:28,320 --> 00:17:31,230
register services you don't do this

00:17:29,820 --> 00:17:32,960
often but you create this thing called a

00:17:31,230 --> 00:17:35,280
definition you pass to the class

00:17:32,960 --> 00:17:36,990
unaware to true that kind of takes care

00:17:35,280 --> 00:17:38,280
of what underscore defaults thing or we

00:17:36,990 --> 00:17:39,570
set alright it's your everything and

00:17:38,280 --> 00:17:43,740
then we're gonna set that into the

00:17:39,570 --> 00:17:45,090
container so you know lines of code we

00:17:43,740 --> 00:17:47,160
now have everything in our service

00:17:45,090 --> 00:17:49,980
directory auto registered as a service

00:17:47,160 --> 00:17:55,020
and it's all set to auto wire which

00:17:49,980 --> 00:17:56,520
means that now becomes the most boring

00:17:55,020 --> 00:18:04,670
file that you have in your application

00:17:56,520 --> 00:18:09,390
there's literally nothing here there's

00:18:04,670 --> 00:18:09,870
two other things all right good perfect

00:18:09,390 --> 00:18:12,840
on time

00:18:09,870 --> 00:18:14,610
this is everything else I'm to show you

00:18:12,840 --> 00:18:16,830
is it actually works there's no more

00:18:14,610 --> 00:18:18,330
like and it doesn't work so those are

00:18:16,830 --> 00:18:19,560
the only twelve lines of code that you

00:18:18,330 --> 00:18:21,390
kind of need to have in your module

00:18:19,560 --> 00:18:22,830
right now to get it to work so another

00:18:21,390 --> 00:18:24,810
thing that is available right now and

00:18:22,830 --> 00:18:26,850
actually works I promise it's something

00:18:24,810 --> 00:18:28,800
called named arguments I love this

00:18:26,850 --> 00:18:29,940
feature so let's go back to something I

00:18:28,800 --> 00:18:31,680
mentioned earlier which is this

00:18:29,940 --> 00:18:33,360
automatic thing is all well and good as

00:18:31,680 --> 00:18:35,280
long as what you are trying to get is

00:18:33,360 --> 00:18:36,810
actually a service you know something

00:18:35,280 --> 00:18:40,230
that actually has a class of the type in

00:18:36,810 --> 00:18:41,640
some sense or configuration API key and

00:18:40,230 --> 00:18:43,800
then our database credentials something

00:18:41,640 --> 00:18:45,210
like that that you want to pass in like

00:18:43,800 --> 00:18:46,560
all the warnings not gonna work so I'm

00:18:45,210 --> 00:18:47,910
passing in the number of scoops that I

00:18:46,560 --> 00:18:50,910
should use my confi here it's an integer

00:18:47,910 --> 00:18:52,230
I used to steal it type inning but that

00:18:50,910 --> 00:18:52,900
doesn't help you know the container has

00:18:52,230 --> 00:18:56,410
no idea

00:18:52,900 --> 00:18:57,730
to pass there so if we do this and try

00:18:56,410 --> 00:19:00,040
to rebuild our caps we're gonna get this

00:18:57,730 --> 00:19:02,470
actually really nice air cannon auto

00:19:00,040 --> 00:19:05,080
wire service coffee machine argument

00:19:02,470 --> 00:19:07,930
number of scoops of method construct is

00:19:05,080 --> 00:19:10,780
type hinted int you should configure its

00:19:07,930 --> 00:19:13,000
value explicitly hey I don't know what

00:19:10,780 --> 00:19:16,030
to pass you and this is what things

00:19:13,000 --> 00:19:18,280
about in general is like all of your

00:19:16,030 --> 00:19:21,460
services are like when you do a

00:19:18,280 --> 00:19:23,020
container rebuild cast rebuild your

00:19:21,460 --> 00:19:25,150
services are basically validated if you

00:19:23,020 --> 00:19:26,920
have any even one spot where there's one

00:19:25,150 --> 00:19:28,840
argument where it can't figure out what

00:19:26,920 --> 00:19:30,700
to do with it even if it's not on its on

00:19:28,840 --> 00:19:31,900
some edge case page that you even forgot

00:19:30,700 --> 00:19:33,640
that somebody built five years ago

00:19:31,900 --> 00:19:35,800
you're not gonna be able to rebuild your

00:19:33,640 --> 00:19:37,809
cache at all if you have one mistake so

00:19:35,800 --> 00:19:39,250
there's no like secret weird edge case

00:19:37,809 --> 00:19:42,010
thing you didn't realize was broken

00:19:39,250 --> 00:19:43,210
because you may be removed a service and

00:19:42,010 --> 00:19:45,880
it was being all the wired somewhere

00:19:43,210 --> 00:19:48,429
that you forgot about it's definitely

00:19:45,880 --> 00:19:49,600
very yeah I can I can tell you

00:19:48,429 --> 00:19:51,340
confidently because we've been doing

00:19:49,600 --> 00:19:54,610
this in sympathy for years like this

00:19:51,340 --> 00:19:56,050
works great you do not have like the WTF

00:19:54,610 --> 00:19:58,480
moments that you would imagine that you

00:19:56,050 --> 00:20:03,160
would have from kind of this auto wire

00:19:58,480 --> 00:20:04,600
stuff so yeah this is easy enough let's

00:20:03,160 --> 00:20:06,340
gonna get in this situation it means

00:20:04,600 --> 00:20:09,640
that you are gonna have to explicitly

00:20:06,340 --> 00:20:12,280
configure your service example what you

00:20:09,640 --> 00:20:14,679
do imagine here is imagine that we do

00:20:12,280 --> 00:20:16,900
have this number of scoops arguments but

00:20:14,679 --> 00:20:19,240
imagine that the second argument we have

00:20:16,900 --> 00:20:23,020
a second here which is something we can

00:20:19,240 --> 00:20:25,000
auto wire first argument is something we

00:20:23,020 --> 00:20:27,700
gotta wear but the second argument is

00:20:25,000 --> 00:20:29,110
this int so you're like dang it so now

00:20:27,700 --> 00:20:30,970
you're telling me like as soon as I need

00:20:29,110 --> 00:20:32,920
to specify one argument I have to

00:20:30,970 --> 00:20:34,330
basically scrap the whole thing and kind

00:20:32,920 --> 00:20:41,230
of go back to the drawing board and

00:20:34,330 --> 00:20:42,400
specify all my arguments like it's : and

00:20:41,230 --> 00:20:44,080
then you have like you are a first

00:20:42,400 --> 00:20:48,220
argument comma second argument comma

00:20:44,080 --> 00:20:50,650
four argument so no arguments is

00:20:48,220 --> 00:20:52,780
something you can do and love named

00:20:50,650 --> 00:20:55,390
arguments this literally binds to the

00:20:52,780 --> 00:20:57,910
name of your argument which means you

00:20:55,390 --> 00:20:59,830
can have five constructor arguments

00:20:57,910 --> 00:21:03,250
can't be idle wired and so you just

00:20:59,830 --> 00:21:06,580
specified that one now this is a bit of

00:21:03,250 --> 00:21:09,430
weird case here because normally if you

00:21:06,580 --> 00:21:11,140
decided inside of your coffee machine

00:21:09,430 --> 00:21:12,430
class down there on the bottom if you

00:21:11,140 --> 00:21:14,620
decided that you wanted to rename that

00:21:12,430 --> 00:21:17,290
argument you could normally do that

00:21:14,620 --> 00:21:18,550
without any outside side-effects right

00:21:17,290 --> 00:21:19,930
if you just rename an argument to

00:21:18,550 --> 00:21:21,430
something it's still the first argument

00:21:19,930 --> 00:21:23,020
so anybody passing it down is gonna work

00:21:21,430 --> 00:21:25,060
fine so there's a little bit weird that

00:21:23,020 --> 00:21:27,190
if we rename that right now it's you

00:21:25,060 --> 00:21:29,550
like num of scoops or something like

00:21:27,190 --> 00:21:31,660
that an application would actually break

00:21:29,550 --> 00:21:34,510
because it's not bound to that argument

00:21:31,660 --> 00:21:36,910
anymore again the way it's good boy is

00:21:34,510 --> 00:21:38,680
if you try to rebuild your container at

00:21:36,910 --> 00:21:41,140
all you're gonna get an error that says

00:21:38,680 --> 00:21:43,840
the service coffee machine has an

00:21:41,140 --> 00:21:45,970
argument called number of scoops in the

00:21:43,840 --> 00:21:47,800
llamÃ³ file but we couldn't find that in

00:21:45,970 --> 00:21:48,730
your constructor you're probably doing

00:21:47,800 --> 00:21:50,560
something wrong

00:21:48,730 --> 00:21:53,980
so if it can't if you can't match that

00:21:50,560 --> 00:21:55,300
up then you're gonna get an error number

00:21:53,980 --> 00:21:56,680
of scoops intently it's gonna tell you

00:21:55,300 --> 00:21:57,760
that we can't automate some in the same

00:21:56,680 --> 00:21:59,230
areas before it's gonna say that we

00:21:57,760 --> 00:22:01,180
can't I oughta wire so it's actually

00:21:59,230 --> 00:22:05,470
very hard to screw this up and without

00:22:01,180 --> 00:22:06,970
knowing that you screwed something up so

00:22:05,470 --> 00:22:08,590
the next thing I'll talk about is that I

00:22:06,970 --> 00:22:10,000
mentioned earlier is the new way of

00:22:08,590 --> 00:22:12,490
doing auto wiring so I mentioned the

00:22:10,000 --> 00:22:13,720
logic before is that you add a type int

00:22:12,490 --> 00:22:15,550
and it just looks across all the

00:22:13,720 --> 00:22:19,690
services and tries to find exactly one

00:22:15,550 --> 00:22:22,660
that matches that type int so the truth

00:22:19,690 --> 00:22:25,150
is actually the in Drupal eight point

00:22:22,660 --> 00:22:26,560
six but what the old logic and the new

00:22:25,150 --> 00:22:28,570
logic are available and they're kind of

00:22:26,560 --> 00:22:30,250
working together the new logic which I'm

00:22:28,570 --> 00:22:32,140
going to explain right now is actually

00:22:30,250 --> 00:22:34,450
what takes precedence but if it fails

00:22:32,140 --> 00:22:36,250
then the old logic takes over and tries

00:22:34,450 --> 00:22:37,900
to fill in then tries to like you know

00:22:36,250 --> 00:22:39,910
scan over all the services and find

00:22:37,900 --> 00:22:43,330
something that actually matches so if

00:22:39,910 --> 00:22:45,340
you want to because this would basically

00:22:43,330 --> 00:22:46,960
kind of prepare you for Drupal 9 when

00:22:45,340 --> 00:22:49,180
you move to Symphony 4 and the old way

00:22:46,960 --> 00:22:50,770
is not available anymore if you're not

00:22:49,180 --> 00:22:52,420
so you can actually turn off the old way

00:22:50,770 --> 00:22:53,860
so you can have this like special

00:22:52,420 --> 00:22:55,360
parameter here which basically says I

00:22:53,860 --> 00:22:56,920
want to use the new way of all the wire

00:22:55,360 --> 00:22:58,360
you don't use that old magical way of

00:22:56,920 --> 00:22:59,740
scanning every service and looking to

00:22:58,360 --> 00:23:02,890
see if it implements the right interface

00:22:59,740 --> 00:23:05,380
or it has the right class as soon as we

00:23:02,890 --> 00:23:07,040
do that we're gonna get this error again

00:23:05,380 --> 00:23:09,080
it's a really nice error

00:23:07,040 --> 00:23:11,390
it says coming over service barista

00:23:09,080 --> 00:23:14,780
argument config factory references the

00:23:11,390 --> 00:23:17,690
interface config but no such service

00:23:14,780 --> 00:23:19,580
exists you should maybe alias this

00:23:17,690 --> 00:23:24,260
interface to the existing config dot

00:23:19,580 --> 00:23:26,780
factory service gosh love that air so

00:23:24,260 --> 00:23:31,940
the way that other wiring works now is

00:23:26,780 --> 00:23:34,370
it's so dumb I love it when you have a

00:23:31,940 --> 00:23:36,110
type int like you know Drupal / core /

00:23:34,370 --> 00:23:38,300
config slash config factory interface

00:23:36,110 --> 00:23:40,640
the operating system looks in the

00:23:38,300 --> 00:23:43,910
container to see if there is a service

00:23:40,640 --> 00:23:47,360
whose machine ID equals that string

00:23:43,910 --> 00:23:48,680
exactly so there's no like scanning

00:23:47,360 --> 00:23:49,970
everything it's just like gonna look in

00:23:48,680 --> 00:23:51,050
the container and say hey is there some

00:23:49,970 --> 00:23:52,910
is there a service in the container

00:23:51,050 --> 00:23:54,140
called Drupal /chorus slash config slash

00:23:52,910 --> 00:23:56,990
config factory interface

00:23:54,140 --> 00:23:58,370
yes or no so the one that you chew is

00:23:56,990 --> 00:24:00,500
the way you kind of configure like hey

00:23:58,370 --> 00:24:01,790
this this inter you know this coin store

00:24:00,500 --> 00:24:04,100
this interface should give me this

00:24:01,790 --> 00:24:06,140
service is you create something called a

00:24:04,100 --> 00:24:07,670
service alias which is something that's

00:24:06,140 --> 00:24:09,290
existed forever in symphony but it

00:24:07,670 --> 00:24:11,870
hasn't really been that important until

00:24:09,290 --> 00:24:14,000
now it's this symbolic link you can say

00:24:11,870 --> 00:24:15,230
anyone's has nothing to do with other

00:24:14,000 --> 00:24:17,000
why you could say hey when somebody

00:24:15,230 --> 00:24:18,650
asked for the service called foo wire I

00:24:17,000 --> 00:24:20,810
want actually you to give them that

00:24:18,650 --> 00:24:22,280
service but we can leverage it here

00:24:20,810 --> 00:24:24,380
because we can say hey whenever somebody

00:24:22,280 --> 00:24:26,360
asks for the service Drupal slash core

00:24:24,380 --> 00:24:28,670
slash config slash config factory

00:24:26,360 --> 00:24:31,640
service I actually want you to give them

00:24:28,670 --> 00:24:33,350
the config factory service and none of

00:24:31,640 --> 00:24:35,570
the auto wearing system looks in the

00:24:33,350 --> 00:24:37,550
container and it goes oh my gosh there

00:24:35,570 --> 00:24:39,710
is a service in the container called

00:24:37,550 --> 00:24:41,810
Drupal / course last config slash config

00:24:39,710 --> 00:24:43,640
factory interface so I'm gonna automata

00:24:41,810 --> 00:24:45,160
that and the error message is telling

00:24:43,640 --> 00:24:48,020
you that so they have message actually

00:24:45,160 --> 00:24:51,050
looked and I said no I don't don't see

00:24:48,020 --> 00:24:53,090
anything like that in the container is a

00:24:51,050 --> 00:24:55,580
message it actually looked at all the

00:24:53,090 --> 00:24:57,470
services determine that one of them does

00:24:55,580 --> 00:24:59,240
in fact implements interface and kind of

00:24:57,470 --> 00:25:01,100
gives you this hint I was like I don't

00:24:59,240 --> 00:25:03,470
see this class in the container but by

00:25:01,100 --> 00:25:04,220
the way I did find one that implements

00:25:03,470 --> 00:25:06,680
that interface

00:25:04,220 --> 00:25:08,420
maybe you should create alias to it or

00:25:06,680 --> 00:25:10,070
three of them you'd actually see like

00:25:08,420 --> 00:25:12,530
maybe she creates to one of these three

00:25:10,070 --> 00:25:16,070
services so it actually helps you out

00:25:12,530 --> 00:25:17,900
a coffee machine class we're used also

00:25:16,070 --> 00:25:19,730
using auto wearing on coffee machine

00:25:17,900 --> 00:25:21,830
class or me let me use the auto

00:25:19,730 --> 00:25:23,780
registration or more generally when we

00:25:21,830 --> 00:25:27,050
use on our class names as our machine

00:25:23,780 --> 00:25:29,540
IDs that means all of our classes are

00:25:27,050 --> 00:25:31,490
instantly Auto wire Bowl because there

00:25:29,540 --> 00:25:34,010
is really a service in the container

00:25:31,490 --> 00:25:36,260
called Drupal / coffee machine / service

00:25:34,010 --> 00:25:38,750
/ so I copy tops off service / coffee

00:25:36,260 --> 00:25:40,760
machine that's the service ID so this

00:25:38,750 --> 00:25:43,730
stuff is just gonna auto water instantly

00:25:40,760 --> 00:25:46,130
without doing anything so this is what

00:25:43,730 --> 00:25:48,200
an alias looks like it's your post nice

00:25:46,130 --> 00:25:49,580
corsage config vector anyplace instead

00:25:48,200 --> 00:25:54,430
of like you know constant arguments you

00:25:49,580 --> 00:25:58,330
just say alias config that Factory know

00:25:54,430 --> 00:26:02,150
ideally corner would do this for us

00:25:58,330 --> 00:26:03,530
ideally core would say you know we

00:26:02,150 --> 00:26:06,200
actually want to empower people to use

00:26:03,530 --> 00:26:07,760
auto wiring if they choose to so for

00:26:06,200 --> 00:26:10,520
some of the services that we deem like

00:26:07,760 --> 00:26:12,860
normally usable by their end users we're

00:26:10,520 --> 00:26:14,690
gonna go ahead and add these aliases for

00:26:12,860 --> 00:26:16,100
them so that we don't they can just like

00:26:14,690 --> 00:26:17,600
auto wire them into their application

00:26:16,100 --> 00:26:18,890
and this is something that I hope kind

00:26:17,600 --> 00:26:19,850
of along with that issue tracker I think

00:26:18,890 --> 00:26:21,230
one of that's one of things that they

00:26:19,850 --> 00:26:24,170
that they need to do if they want to do

00:26:21,230 --> 00:26:25,610
this I couldn't be a control module that

00:26:24,170 --> 00:26:27,230
you bring in that basically adds all

00:26:25,610 --> 00:26:29,090
these auto wiring aliases for all the

00:26:27,230 --> 00:26:30,500
core stuff doesn't know any extra

00:26:29,090 --> 00:26:31,370
overhead or anything like that so it's

00:26:30,500 --> 00:26:32,660
just something that they need to do to

00:26:31,370 --> 00:26:34,040
make your life easier because there's

00:26:32,660 --> 00:26:36,710
really no reason that we need to do this

00:26:34,040 --> 00:26:38,360
for all the core stuff you know so you

00:26:36,710 --> 00:26:40,520
do need to do it now for Auto wine core

00:26:38,360 --> 00:26:41,900
stuff and then you know you do it one

00:26:40,520 --> 00:26:44,240
time and then you can always otherwise

00:26:41,900 --> 00:26:45,910
this config dr interface anywhere and as

00:26:44,240 --> 00:26:51,590
you guys saw you get really nice air if

00:26:45,910 --> 00:26:56,120
if it's not there already so let's

00:26:51,590 --> 00:26:58,520
summarize here use class names as your

00:26:56,120 --> 00:27:00,770
service IDs because it just makes life

00:26:58,520 --> 00:27:01,790
easier you can stop right there that

00:27:00,770 --> 00:27:03,710
would just make your application a

00:27:01,790 --> 00:27:06,020
little bit cooler seconds use all the

00:27:03,710 --> 00:27:09,590
way are true and stop being lazy and

00:27:06,020 --> 00:27:12,410
omitting your arguments cool on three

00:27:09,590 --> 00:27:15,740
and four you know wait for Drupal to

00:27:12,410 --> 00:27:18,429
support this / take my twelve lines of

00:27:15,740 --> 00:27:20,510
decode and do service auto registration

00:27:18,429 --> 00:27:21,800
automatically register this directory

00:27:20,510 --> 00:27:23,390
that director in that party however you

00:27:21,800 --> 00:27:25,160
organize record into services in your

00:27:23,390 --> 00:27:28,940
module all the register those things as

00:27:25,160 --> 00:27:31,520
services and then can specify any non

00:27:28,940 --> 00:27:32,690
auto variable arguments the snow plows

00:27:31,520 --> 00:27:36,160
through the cracks

00:27:32,690 --> 00:27:39,679
specify those with the named arguments

00:27:36,160 --> 00:27:41,059
incentive you recommend doing this or

00:27:39,679 --> 00:27:42,200
you know doing this down the road at

00:27:41,059 --> 00:27:43,220
some point and what you know once you

00:27:42,200 --> 00:27:44,720
gotta get used to this because it you

00:27:43,220 --> 00:27:47,030
know it's gonna make you do a little bit

00:27:44,720 --> 00:27:49,429
more work to use this turn off the magic

00:27:47,030 --> 00:27:50,870
auto wiring it's gonna be it's just

00:27:49,429 --> 00:27:53,150
easier to think about you're gonna just

00:27:50,870 --> 00:27:54,559
never gonna be any question about about

00:27:53,150 --> 00:27:55,700
like what you're gonna get because

00:27:54,559 --> 00:27:58,610
you're gonna be in complete control of

00:27:55,700 --> 00:28:01,450
how Auto writing works and yeah that's

00:27:58,610 --> 00:28:01,450
thank you guys very much

00:28:05,890 --> 00:28:11,920
and you have lost you're wearing that

00:28:10,390 --> 00:28:13,720
car that's gonna it's a link to github

00:28:11,920 --> 00:28:15,580
that he's like the Queen everything we

00:28:13,720 --> 00:28:17,080
did queen step by step by step by step

00:28:15,580 --> 00:28:18,670
so you can actually see what it did and

00:28:17,080 --> 00:28:20,770
walk through and grab my like 15 lines

00:28:18,670 --> 00:28:22,390
of copy code from the symphony world so

00:28:20,770 --> 00:28:23,980
I'll do a plant for a symphony concert

00:28:22,390 --> 00:28:39,250
Oriole if you want to learn symphony or

00:28:23,980 --> 00:28:43,299
go check that out there questions when I

00:28:39,250 --> 00:28:50,290
was in the config directory can i that's

00:28:43,299 --> 00:28:52,750
that last word again yeah not the

00:28:50,290 --> 00:28:54,880
interface yeah totally so I could also

00:28:52,750 --> 00:28:58,179
alias Drupal sauce for slash config

00:28:54,880 --> 00:28:59,890
slash config factory to config that

00:28:58,179 --> 00:29:01,270
factory yep and in the symphony world

00:28:59,890 --> 00:29:02,919
because we like char like gently push

00:29:01,270 --> 00:29:05,020
people towards interface type ending we

00:29:02,919 --> 00:29:06,970
don't do that but like on a technical

00:29:05,020 --> 00:29:08,049
level yeah absolutely you can do that if

00:29:06,970 --> 00:29:09,580
you wanted to make things more friendly

00:29:08,049 --> 00:29:13,110
you'd probably like alias both of them

00:29:09,580 --> 00:29:13,110
you know yeah question

00:29:44,120 --> 00:29:51,510
you could have set up the default value

00:29:46,140 --> 00:29:57,570
in the constructor we're kind of

00:29:51,510 --> 00:30:08,370
thinking the like this thing number of

00:29:57,570 --> 00:30:10,110
scoops you could so so yeah I think

00:30:08,370 --> 00:30:12,630
that's good could you just come into the

00:30:10,110 --> 00:30:14,880
constructor and that the answer is

00:30:12,630 --> 00:30:16,110
absolutely but you're gonna get a lot of

00:30:14,880 --> 00:30:17,910
cases where you can't do that because

00:30:16,110 --> 00:30:19,830
what it actually is like an API key

00:30:17,910 --> 00:30:21,060
scoop so you're sort of like want to

00:30:19,830 --> 00:30:22,440
have like a number of scoops the file

00:30:21,060 --> 00:30:24,120
value to three and I can override that

00:30:22,440 --> 00:30:25,860
if I wanted to but most of time I don't

00:30:24,120 --> 00:30:28,020
know the case we want like a database

00:30:25,860 --> 00:30:29,490
credentials or API key or something

00:30:28,020 --> 00:30:31,100
something like that we're like you

00:30:29,490 --> 00:30:32,910
really do need to kinda like pass it in

00:30:31,100 --> 00:30:34,260
you know maybe you're like reading it

00:30:32,910 --> 00:30:35,640
from somewhere that's not committed from

00:30:34,260 --> 00:30:37,290
a secrets place or something like that

00:30:35,640 --> 00:30:39,300
yeah totally if we had given a default

00:30:37,290 --> 00:30:40,440
value we would not need to specify it

00:30:39,300 --> 00:30:41,870
because the container doesn't need to

00:30:40,440 --> 00:30:44,880
pass it yeah

00:30:41,870 --> 00:30:46,500
hey man so assuming we went through and

00:30:44,880 --> 00:30:55,590
did this would we still need a blank

00:30:46,500 --> 00:30:58,230
services AMA file you actually need any

00:30:55,590 --> 00:31:00,090
services that you know file until you

00:30:58,230 --> 00:31:01,350
need to specify that one argument that

00:31:00,090 --> 00:31:03,090
can't be out of wired then you'll create

00:31:01,350 --> 00:31:05,910
it so you probably in practice will have

00:31:03,090 --> 00:31:08,790
one in the future once that like on the

00:31:05,910 --> 00:31:10,920
registration and defaults thing makes it

00:31:08,790 --> 00:31:12,690
back to Drupal then your service that

00:31:10,920 --> 00:31:13,980
you know flow will always exist because

00:31:12,690 --> 00:31:15,660
you at least have like those four

00:31:13,980 --> 00:31:18,030
as a code you know my mother wearing all

00:31:15,660 --> 00:31:20,010
my things by defense and I'm doing my

00:31:18,030 --> 00:31:21,990
service auto registration for this

00:31:20,010 --> 00:31:23,070
directory so we can add normal Symphony

00:31:21,990 --> 00:31:25,380
project when we start a new symphony

00:31:23,070 --> 00:31:27,690
project on our services IMO has like

00:31:25,380 --> 00:31:29,549
those five lines of code and you might

00:31:27,690 --> 00:31:31,230
actually code quite a bit before you

00:31:29,549 --> 00:31:32,850
actually ever need to go back and do

00:31:31,230 --> 00:31:34,710
anything else in that file but it's just

00:31:32,850 --> 00:31:39,120
kind of like sitting there activating

00:31:34,710 --> 00:31:41,100
the magic but not doing anything else it

00:31:39,120 --> 00:31:44,070
seemed like your workaround solution was

00:31:41,100 --> 00:31:46,679
meant to be contributed to each or meant

00:31:44,070 --> 00:31:48,330
to be written in each module is there a

00:31:46,679 --> 00:31:52,160
way to abstract that out one more level

00:31:48,330 --> 00:31:52,160
so there's only like one thing to remove

00:31:54,290 --> 00:31:58,340
something that was like specific to that

00:31:56,490 --> 00:32:02,000
module so you'd have to have that stuff

00:31:58,340 --> 00:32:09,870
like in every single specific module

00:32:02,000 --> 00:32:11,309
how would you abstract that I'm there's

00:32:09,870 --> 00:32:12,630
an easy answer that's kind of cheating

00:32:11,309 --> 00:32:15,150
and then there's a different answer

00:32:12,630 --> 00:32:19,740
because there's nothing stopping you

00:32:15,150 --> 00:32:23,010
from having one class in one module

00:32:19,740 --> 00:32:33,030
which is also registering the services

00:32:23,010 --> 00:32:36,120
for your other five modules in all of

00:32:33,030 --> 00:32:38,549
your individual modules actually like

00:32:36,120 --> 00:32:39,960
I'll talk to maybe like one core module

00:32:38,549 --> 00:32:43,320
that they're dependent on which has like

00:32:39,960 --> 00:32:45,450
the bulk of the logic like yeah you have

00:32:43,320 --> 00:32:48,660
to have separate places right now until

00:32:45,450 --> 00:32:54,840
we get that and network around or I

00:32:48,660 --> 00:32:56,549
should say questions in practice like if

00:32:54,840 --> 00:32:58,470
you've got your interfaces in the same

00:32:56,549 --> 00:33:06,179
folder as your services which isn't

00:32:58,470 --> 00:33:07,200
unusual how would you do it man that's

00:33:06,179 --> 00:33:09,750
such a good question

00:33:07,200 --> 00:33:11,490
he's like no I believe my own module and

00:33:09,750 --> 00:33:12,809
I have like like in my service truck to

00:33:11,490 --> 00:33:14,669
have some services but I'm not so great

00:33:12,809 --> 00:33:15,330
on my own interfaces that my services

00:33:14,669 --> 00:33:17,130
implement

00:33:15,330 --> 00:33:18,029
event would being so I'm gonna give you

00:33:17,130 --> 00:33:19,769
to answer that

00:33:18,029 --> 00:33:22,169
you'd have to do a little bit of like

00:33:19,769 --> 00:33:23,700
extra logic in that glue code you know I

00:33:22,169 --> 00:33:25,289
got to say like a movie if you suffix it

00:33:23,700 --> 00:33:26,940
everything with interface then like you

00:33:25,289 --> 00:33:29,070
know skip over those ones in the for

00:33:26,940 --> 00:33:31,379
each loop or actually like look at the

00:33:29,070 --> 00:33:32,669
you know once you get the class you can

00:33:31,379 --> 00:33:34,259
actually do a class exist or an

00:33:32,669 --> 00:33:35,820
interface exists to see if it's an

00:33:34,259 --> 00:33:36,659
interface or it's a class so your books

00:33:35,820 --> 00:33:40,229
gonna have to put that in your work

00:33:36,659 --> 00:33:43,609
around once the feature gets back into

00:33:40,229 --> 00:33:46,049
Drupal oh I already works out of the box

00:33:43,609 --> 00:33:47,820
with the actual auto registration

00:33:46,049 --> 00:33:49,259
feature when the actual idle

00:33:47,820 --> 00:33:51,149
registration feature from Symphony when

00:33:49,259 --> 00:33:53,070
it goes over that service director for

00:33:51,149 --> 00:33:56,399
example if it finds something that's an

00:33:53,070 --> 00:33:57,869
interface and it finds only one thing

00:33:56,399 --> 00:33:59,759
inside of that director that implements

00:33:57,869 --> 00:34:02,399
that interface it automatically adds an

00:33:59,759 --> 00:34:04,649
alias for the interface that points to

00:34:02,399 --> 00:34:06,299
your service so it means that you can

00:34:04,649 --> 00:34:07,830
actually describe missing credit and

00:34:06,299 --> 00:34:10,379
interface and you know make your service

00:34:07,830 --> 00:34:11,639
implement interface and instantly start

00:34:10,379 --> 00:34:14,220
going to other parts of your code and

00:34:11,639 --> 00:34:16,200
type in ting the interface and getting

00:34:14,220 --> 00:34:19,829
your actual concrete class because it

00:34:16,200 --> 00:34:24,329
makes that mapping for you so again in

00:34:19,829 --> 00:34:27,329
the future even easier yeah yeah so it's

00:34:24,329 --> 00:34:28,829
not the M and the other education

00:34:27,329 --> 00:34:30,419
feature in symphony when you're not

00:34:28,829 --> 00:34:31,500
having to do the work round if it let's

00:34:30,419 --> 00:34:33,510
say it looks at your source directory

00:34:31,500 --> 00:34:35,549
and it sees like a coffee shop class

00:34:33,510 --> 00:34:38,339
button also sees that you have a coffee

00:34:35,549 --> 00:34:39,659
shop interface and of course the

00:34:38,339 --> 00:34:40,799
conference on points implements the

00:34:39,659 --> 00:34:41,940
coffee shop interface and this is an

00:34:40,799 --> 00:34:43,559
interface you created just because you

00:34:41,940 --> 00:34:44,639
wanna have interfaces what something is

00:34:43,559 --> 00:34:46,349
gonna do is it's gonna automatically

00:34:44,639 --> 00:34:49,169
register your coffee shop points as a

00:34:46,349 --> 00:34:50,639
service but it's also going to see that

00:34:49,169 --> 00:34:52,409
accomplish type interface and it's gonna

00:34:50,639 --> 00:34:54,089
see that you only have one class that

00:34:52,409 --> 00:34:55,710
implements that so this doesn't happen

00:34:54,089 --> 00:34:57,029
if you had like two coffee you know two

00:34:55,710 --> 00:34:58,380
different classes that both implement an

00:34:57,029 --> 00:34:59,579
interface but because there's only one

00:34:58,380 --> 00:35:01,470
commercial plants that influence that

00:34:59,579 --> 00:35:03,240
interface so it's gonna finish your

00:35:01,470 --> 00:35:05,039
coffee shop as a class as a service and

00:35:03,240 --> 00:35:08,460
then it's going to register the coffee

00:35:05,039 --> 00:35:11,460
shop interface as a service alias that

00:35:08,460 --> 00:35:12,480
points to your coffee shop class so you

00:35:11,460 --> 00:35:13,710
actually end up with kind of two things

00:35:12,480 --> 00:35:15,329
in the container and I put the coffee

00:35:13,710 --> 00:35:17,039
shop class and then you have at the

00:35:15,329 --> 00:35:18,900
coffee shop interface which is not a

00:35:17,039 --> 00:35:21,220
real service but just an alias to your

00:35:18,900 --> 00:35:22,329
coffee shop class the end result is

00:35:21,220 --> 00:35:23,829
you create the collapse you create the

00:35:22,329 --> 00:35:25,569
interface and then you immediately go

00:35:23,829 --> 00:35:27,430
somewhere else and you type int the

00:35:25,569 --> 00:35:29,770
interface in your constructor and it

00:35:27,430 --> 00:35:32,079
just works it knows to get your concrete

00:35:29,770 --> 00:35:34,569
class you don't have like a extra wiring

00:35:32,079 --> 00:35:39,240
to say this interface you know points to

00:35:34,569 --> 00:35:39,240
this class yeah really good question

00:35:42,490 --> 00:35:48,030
so assuming someone here was going to

00:35:44,500 --> 00:35:48,030
contribute this back to Drupal core or a

00:35:48,359 --> 00:35:54,119
contributed man wait what do you mean

00:35:52,390 --> 00:35:56,859
the old aliases is deprecated

00:35:54,119 --> 00:35:58,829
so like config dot factory right

00:35:56,859 --> 00:36:03,190
theoretically we should stop using that

00:35:58,829 --> 00:36:06,730
you should so using factory because

00:36:03,190 --> 00:36:10,450
there might still be cases where this is

00:36:06,730 --> 00:36:12,970
we still use the snake case machine and

00:36:10,450 --> 00:36:14,890
machine names for our services and we

00:36:12,970 --> 00:36:16,329
might have about 200 services and then

00:36:14,890 --> 00:36:17,950
we assign about a hundred of those are

00:36:16,329 --> 00:36:19,450
actually services that really are meant

00:36:17,950 --> 00:36:21,760
to be used by the users day and a day

00:36:19,450 --> 00:36:23,680
out and so we had aliases for those 100

00:36:21,760 --> 00:36:25,030
but the other one when you can't

00:36:23,680 --> 00:36:26,859
actually get unless you actually use the

00:36:25,030 --> 00:36:28,660
old snake case version it's nice to kind

00:36:26,859 --> 00:36:30,520
of say hey I really there's 200 services

00:36:28,660 --> 00:36:32,280
here you can use all of them because you

00:36:30,520 --> 00:36:34,270
could just you know do old school

00:36:32,280 --> 00:36:35,500
registration of your arguments you use

00:36:34,270 --> 00:36:36,640
all of them but these are probably 100

00:36:35,500 --> 00:36:40,810
you want to use because we think that

00:36:36,640 --> 00:36:43,030
they're more common the the other thing

00:36:40,810 --> 00:36:44,710
is that with contribs

00:36:43,030 --> 00:36:46,569
you should always you should not you

00:36:44,710 --> 00:36:48,160
should not use auto where with controls

00:36:46,569 --> 00:36:50,230
and it's a slight performance ever

00:36:48,160 --> 00:36:52,089
overhead during development only during

00:36:50,230 --> 00:36:55,510
cached rebuilt only if you don't like a

00:36:52,089 --> 00:36:57,099
point where you know contribute lee do

00:36:55,510 --> 00:36:58,900
everything so that you don't add that

00:36:57,099 --> 00:37:00,520
little extra overhead like if your new

00:36:58,900 --> 00:37:02,440
module you need to do things like the

00:37:00,520 --> 00:37:03,640
slow boring way so that the people that

00:37:02,440 --> 00:37:05,380
use your controller will have like a

00:37:03,640 --> 00:37:06,630
little bit of an easier life no more

00:37:05,380 --> 00:37:08,619
broadly though there is a feature in

00:37:06,630 --> 00:37:10,390
symphony so a feature in drupal to

00:37:08,619 --> 00:37:12,160
deprecate services it's something you're

00:37:10,390 --> 00:37:13,810
probably gonna start seeing as Drupal 8

00:37:12,160 --> 00:37:15,849
gets closer to triple 9 it's actually a

00:37:13,810 --> 00:37:18,160
key lawyer services I say deprecated

00:37:15,849 --> 00:37:20,050
true and if anybody uses that then it

00:37:18,160 --> 00:37:21,280
shows those as deprecated it's not

00:37:20,050 --> 00:37:22,270
available right now but then a newer

00:37:21,280 --> 00:37:25,230
version of Symphony you can also

00:37:22,270 --> 00:37:25,230
deprecated aliases

00:37:31,590 --> 00:37:36,060
is isn't using the class name as the

00:37:34,140 --> 00:37:40,440
service ID kind of getting us back to a

00:37:36,060 --> 00:37:42,180
singleton services is using the class

00:37:40,440 --> 00:37:44,250
name as the service I'd be getting

00:37:42,180 --> 00:37:46,260
aspect of a single bit pattern in a

00:37:44,250 --> 00:37:48,150
container world we aren't we it there

00:37:46,260 --> 00:37:49,170
our services are single pins and then

00:37:48,150 --> 00:37:50,880
that singleton is because we're going to

00:37:49,170 --> 00:37:52,800
actually using the static context with

00:37:50,880 --> 00:37:54,930
Singleton's is they rely on the static

00:37:52,800 --> 00:37:56,040
context to actually guarantee that

00:37:54,930 --> 00:37:57,750
there's only one thing in that we

00:37:56,040 --> 00:37:59,580
actually in remember with services we

00:37:57,750 --> 00:38:01,740
actually only want most of the time one

00:37:59,580 --> 00:38:04,470
instance of a service hanging around but

00:38:01,740 --> 00:38:06,270
we don't use Singleton's what do we do

00:38:04,470 --> 00:38:08,340
that's why the container exists so we

00:38:06,270 --> 00:38:10,050
can get the goodness of Singleton's we

00:38:08,340 --> 00:38:13,500
don't need ten coffeeshops

00:38:10,050 --> 00:38:14,850
sorry pumping machines services we need

00:38:13,500 --> 00:38:16,830
one coffee machine service and we'll

00:38:14,850 --> 00:38:18,330
call the method one at ten times so we

00:38:16,830 --> 00:38:20,430
want that singleton thing we don't want

00:38:18,330 --> 00:38:32,580
this singleton pattern the container is

00:38:20,430 --> 00:38:34,860
what allows us to do that is that if you

00:38:32,580 --> 00:38:36,600
look like if you wrote your classes

00:38:34,860 --> 00:38:38,310
using dependency injection and type

00:38:36,600 --> 00:38:41,930
painting interfaces like we did if you

00:38:38,310 --> 00:38:44,010
didn't practice designing your services

00:38:41,930 --> 00:38:46,380
and then you changed your entire

00:38:44,010 --> 00:38:48,090
application use auto wearing and you did

00:38:46,380 --> 00:38:49,730
four requests you'd notice that you

00:38:48,090 --> 00:38:52,920
didn't touch any of your PHP classes

00:38:49,730 --> 00:38:54,300
this is all configuration based yeah so

00:38:52,920 --> 00:38:58,320
your classes are also written in fact

00:38:54,300 --> 00:38:59,880
it's it nudges you towards doing things

00:38:58,320 --> 00:39:02,250
correctly because if you don't have a

00:38:59,880 --> 00:39:06,780
type int donut you don't get any wiring

00:39:02,250 --> 00:39:09,000
that's annoying I said in symphony we

00:39:06,780 --> 00:39:12,090
had the the author lying alias is only

00:39:09,000 --> 00:39:14,880
for the interfaces don't really need you

00:39:12,090 --> 00:39:17,850
to you know and if you do like if you

00:39:14,880 --> 00:39:19,620
type in for a country class but only the

00:39:17,850 --> 00:39:21,210
alias for the interface exists you're

00:39:19,620 --> 00:39:22,980
gonna be an analyst says I didn't find

00:39:21,210 --> 00:39:24,840
this in the container but I didn't

00:39:22,980 --> 00:39:28,000
notice that there's an another service

00:39:24,840 --> 00:39:30,220
that this class you try to type it with

00:39:28,000 --> 00:39:32,230
implements did you maybe mean to use

00:39:30,220 --> 00:39:33,430
that type int instead of the concrete

00:39:32,230 --> 00:39:35,550
class give it a real plate really clear

00:39:33,430 --> 00:39:35,550
air

00:39:39,050 --> 00:39:45,159

YouTube URL: https://www.youtube.com/watch?v=q06b2uVM8MQ


