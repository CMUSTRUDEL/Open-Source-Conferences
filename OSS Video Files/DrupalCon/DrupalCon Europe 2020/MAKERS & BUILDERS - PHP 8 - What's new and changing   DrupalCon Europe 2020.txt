Title: MAKERS & BUILDERS - PHP 8 - What's new and changing   DrupalCon Europe 2020
Publication date: 2021-01-13
Playlist: DrupalCon Europe 2020
Description: 
	A 40 minute talk that takes you through what's new, changed, and removed in PHP 8, and how you can test and upgrade your web sites to PHP 8 today!
Captions: 
	00:00:04,059 --> 00:00:09,889
[Music]

00:00:13,360 --> 00:00:16,880
hi everyone

00:00:14,480 --> 00:00:18,240
thanks for coming um to the third

00:00:16,880 --> 00:00:20,880
session of the day

00:00:18,240 --> 00:00:22,080
uh this is php eight what's new and

00:00:20,880 --> 00:00:25,439
changing

00:00:22,080 --> 00:00:27,199
um we will be talking about um the new

00:00:25,439 --> 00:00:30,560
features in php eight

00:00:27,199 --> 00:00:32,960
um and how we change and add new

00:00:30,560 --> 00:00:34,640
functionality to php 8

00:00:32,960 --> 00:00:36,719
we have some improvements with

00:00:34,640 --> 00:00:38,239
object-oriented programming

00:00:36,719 --> 00:00:40,399
there are many improvements with the

00:00:38,239 --> 00:00:43,280
type system and

00:00:40,399 --> 00:00:45,039
by far my favorite feature with error

00:00:43,280 --> 00:00:48,719
handling how we

00:00:45,039 --> 00:00:51,840
communicate errors to the user the code

00:00:48,719 --> 00:00:54,399
and the developers and that's the topic

00:00:51,840 --> 00:00:57,039
about resource to object migration

00:00:54,399 --> 00:00:58,559
um there are some important changes in

00:00:57,039 --> 00:01:01,760
php 8

00:00:58,559 --> 00:01:03,440
in how we handle strings and finally we

00:01:01,760 --> 00:01:06,720
talk about some of the functionality

00:01:03,440 --> 00:01:09,760
that was removed in php-8

00:01:06,720 --> 00:01:10,640
before we do huge science to drupal

00:01:09,760 --> 00:01:13,040
association

00:01:10,640 --> 00:01:15,439
and the conference team for making this

00:01:13,040 --> 00:01:15,439
possible

00:01:15,600 --> 00:01:19,040
you can download the session if you like

00:01:18,400 --> 00:01:20,960
to

00:01:19,040 --> 00:01:22,080
copy paste the codes of any of the

00:01:20,960 --> 00:01:25,520
reasons

00:01:22,080 --> 00:01:27,920
um my name is ayesh karna ratner

00:01:25,520 --> 00:01:28,640
i was born and raised in sri lanka but

00:01:27,920 --> 00:01:31,040
i'm

00:01:28,640 --> 00:01:32,479
in vietnam now i kind of traveled to

00:01:31,040 --> 00:01:34,079
places

00:01:32,479 --> 00:01:36,240
if you have any questions or if you have

00:01:34,079 --> 00:01:38,000
any feedback you can reach me out on

00:01:36,240 --> 00:01:40,000
these email addresses

00:01:38,000 --> 00:01:41,840
all these places or from the section

00:01:40,000 --> 00:01:44,960
itself

00:01:41,840 --> 00:01:46,240
um okay back to topics um the first one

00:01:44,960 --> 00:01:49,360
is the imaginative

00:01:46,240 --> 00:01:50,079
features in this talk um most of the

00:01:49,360 --> 00:01:53,360
time

00:01:50,079 --> 00:01:55,759
will be about the new features that

00:01:53,360 --> 00:01:57,680
be added in php because that's the

00:01:55,759 --> 00:02:01,200
coolest stuff

00:01:57,680 --> 00:02:03,360
the first one is named parameters so

00:02:01,200 --> 00:02:05,119
traditionally in almost every

00:02:03,360 --> 00:02:07,439
programming languages

00:02:05,119 --> 00:02:09,440
if you declare a function and when you

00:02:07,439 --> 00:02:11,840
call this function you need to follow

00:02:09,440 --> 00:02:15,280
the same order of parameters

00:02:11,840 --> 00:02:18,000
for example here we have search

00:02:15,280 --> 00:02:19,520
replace and subject you need to call

00:02:18,000 --> 00:02:22,800
them on the same order

00:02:19,520 --> 00:02:26,319
search replace and subject with

00:02:22,800 --> 00:02:28,480
name parameters you can change the order

00:02:26,319 --> 00:02:31,360
of the file of the parameters

00:02:28,480 --> 00:02:32,720
because you specify the name of the

00:02:31,360 --> 00:02:36,239
parameter

00:02:32,720 --> 00:02:38,640
that's how the name comes from um

00:02:36,239 --> 00:02:39,760
in php we have these functions with

00:02:38,640 --> 00:02:42,080
first the search

00:02:39,760 --> 00:02:43,519
and second is replace but some functions

00:02:42,080 --> 00:02:47,920
they have they switched back

00:02:43,519 --> 00:02:49,920
um reverse it's kind of inconsistent

00:02:47,920 --> 00:02:51,280
with name parameters you can make things

00:02:49,920 --> 00:02:54,959
more readable

00:02:51,280 --> 00:02:55,519
the name comes from um the variable that

00:02:54,959 --> 00:02:58,879
we use

00:02:55,519 --> 00:03:00,640
in the function declaration

00:02:58,879 --> 00:03:03,680
we talk the dollar sign that becomes the

00:03:00,640 --> 00:03:06,239
name of the parameter

00:03:03,680 --> 00:03:07,280
this really shines because in php we

00:03:06,239 --> 00:03:09,440
have this

00:03:07,280 --> 00:03:10,560
monstrosity of function called set

00:03:09,440 --> 00:03:13,200
cookie

00:03:10,560 --> 00:03:13,920
um it takes seven parameters and no one

00:03:13,200 --> 00:03:17,120
remembers

00:03:13,920 --> 00:03:19,840
the order right so if we use

00:03:17,120 --> 00:03:20,800
named parameters this makes things much

00:03:19,840 --> 00:03:23,840
more readable

00:03:20,800 --> 00:03:26,799
because now we are saying this value is

00:03:23,840 --> 00:03:28,000
pot this value is the domain name and

00:03:26,799 --> 00:03:31,440
true for h3p

00:03:28,000 --> 00:03:33,680
only flag and another feature is

00:03:31,440 --> 00:03:34,560
you don't have to specify default

00:03:33,680 --> 00:03:37,840
parameters

00:03:34,560 --> 00:03:41,040
so here we have the expires value v0

00:03:37,840 --> 00:03:42,879
that's the default value and with the

00:03:41,040 --> 00:03:44,720
name parameters you don't have to

00:03:42,879 --> 00:03:46,000
mention this because it's the default

00:03:44,720 --> 00:03:49,440
value and php will

00:03:46,000 --> 00:03:51,599
use the default value um

00:03:49,440 --> 00:03:53,519
you can take a look at this article this

00:03:51,599 --> 00:03:57,040
is my website

00:03:53,519 --> 00:04:00,080
um i spent around eight months

00:03:57,040 --> 00:04:02,480
to write and document all

00:04:00,080 --> 00:04:04,239
all the changes every single change we

00:04:02,480 --> 00:04:07,680
have in drupal 8

00:04:04,239 --> 00:04:08,799
uh in php eight sorry um with some

00:04:07,680 --> 00:04:11,519
examples

00:04:08,799 --> 00:04:12,239
some caveats and the things to look out

00:04:11,519 --> 00:04:14,400
for

00:04:12,239 --> 00:04:16,720
and links to the original documentation

00:04:14,400 --> 00:04:16,720
as well

00:04:16,799 --> 00:04:21,680
the next feature is attributes it's also

00:04:19,840 --> 00:04:23,840
a really cool feature

00:04:21,680 --> 00:04:26,080
it allows you to declare extra

00:04:23,840 --> 00:04:28,560
information about functions

00:04:26,080 --> 00:04:30,400
so for example we had this function

00:04:28,560 --> 00:04:33,440
called drupal set message

00:04:30,400 --> 00:04:35,360
that's old function and you can

00:04:33,440 --> 00:04:36,479
declare additional information about

00:04:35,360 --> 00:04:38,960
this function

00:04:36,479 --> 00:04:39,759
it's not part of the function but it's

00:04:38,960 --> 00:04:42,000
metadata

00:04:39,759 --> 00:04:43,600
about the function you can declare

00:04:42,000 --> 00:04:46,639
metadata about

00:04:43,600 --> 00:04:47,410
functions class names properties pretty

00:04:46,639 --> 00:04:49,120
much everything

00:04:47,410 --> 00:04:53,360
[Music]

00:04:49,120 --> 00:04:56,639
i even including parameters as well

00:04:53,360 --> 00:04:59,840
using this settings the syntax is

00:04:56,639 --> 00:05:02,560
you start with a hatch sign

00:04:59,840 --> 00:05:04,160
and then you square brackets to use a

00:05:02,560 --> 00:05:06,479
parameter

00:05:04,160 --> 00:05:07,520
you can declare multiple parameters from

00:05:06,479 --> 00:05:09,280
the same bracket

00:05:07,520 --> 00:05:11,759
some parameters they can have extra

00:05:09,280 --> 00:05:14,800
values as well

00:05:11,759 --> 00:05:17,919
the closest example we have in drupal is

00:05:14,800 --> 00:05:20,080
when you declare a block or a plugin you

00:05:17,919 --> 00:05:22,880
have to use a php command

00:05:20,080 --> 00:05:23,600
and then declare this information this

00:05:22,880 --> 00:05:27,919
this feature

00:05:23,600 --> 00:05:32,080
exactly it's transferable to attributes

00:05:27,919 --> 00:05:34,479
the way this works um it's quite similar

00:05:32,080 --> 00:05:35,600
to the annotations that we have in

00:05:34,479 --> 00:05:38,639
drupal

00:05:35,600 --> 00:05:40,880
um to declare an attribute

00:05:38,639 --> 00:05:41,840
you have to create a clause with the

00:05:40,880 --> 00:05:44,720
attribute

00:05:41,840 --> 00:05:45,919
attribute um and the name of the

00:05:44,720 --> 00:05:48,160
attribute

00:05:45,919 --> 00:05:49,919
maps to the name of the clause and if

00:05:48,160 --> 00:05:52,320
you have additional parameters they will

00:05:49,919 --> 00:05:55,840
be passed to the constructor

00:05:52,320 --> 00:05:58,560
so when you try to retrieve um

00:05:55,840 --> 00:06:00,800
that and in the attributes that you have

00:05:58,560 --> 00:06:03,120
you can first get a list of attributes

00:06:00,800 --> 00:06:05,280
and second you can get the net the

00:06:03,120 --> 00:06:06,240
parameters that we pass to the attribute

00:06:05,280 --> 00:06:09,280
for example

00:06:06,240 --> 00:06:09,919
the label or machine name or things like

00:06:09,280 --> 00:06:13,199
this

00:06:09,919 --> 00:06:15,280
you can also get instance of this class

00:06:13,199 --> 00:06:17,919
so instead of returning these values and

00:06:15,280 --> 00:06:20,479
then you're trying to create this class

00:06:17,919 --> 00:06:21,360
you can just get instance that php will

00:06:20,479 --> 00:06:22,800
create it for you

00:06:21,360 --> 00:06:25,039
[Music]

00:06:22,800 --> 00:06:26,960
um this is about attributes i have so

00:06:25,039 --> 00:06:28,080
many examples again and how you can

00:06:26,960 --> 00:06:31,360
transfer

00:06:28,080 --> 00:06:34,639
from the traditional annotation system

00:06:31,360 --> 00:06:38,560
to the doctrine annotation system to php

00:06:34,639 --> 00:06:38,560
8 attributes on this article again

00:06:39,280 --> 00:06:42,800
this is by far one of my favorite

00:06:41,440 --> 00:06:46,000
features

00:06:42,800 --> 00:06:47,440
um in php 8 we have a just in time

00:06:46,000 --> 00:06:50,800
compiler

00:06:47,440 --> 00:06:53,039
what this means is um traditionally when

00:06:50,800 --> 00:06:56,000
we have a php code

00:06:53,039 --> 00:06:56,800
it always has to go through a virtual

00:06:56,000 --> 00:06:59,039
machine

00:06:56,800 --> 00:07:00,160
and then run it because php is not a

00:06:59,039 --> 00:07:04,160
compiled language

00:07:00,160 --> 00:07:07,440
like trust or c so we can't run the code

00:07:04,160 --> 00:07:08,240
directly on the processor so we have

00:07:07,440 --> 00:07:11,280
this

00:07:08,240 --> 00:07:14,000
virtual machine that will take

00:07:11,280 --> 00:07:15,280
the simpler form of php code that we

00:07:14,000 --> 00:07:17,280
call up cache or

00:07:15,280 --> 00:07:19,520
codes and then to run them on the

00:07:17,280 --> 00:07:21,919
virtual machine

00:07:19,520 --> 00:07:23,440
the problem is performance because every

00:07:21,919 --> 00:07:25,759
time we need to run something

00:07:23,440 --> 00:07:28,080
we always have to run them on the

00:07:25,759 --> 00:07:31,440
virtual machine

00:07:28,080 --> 00:07:34,720
the concept of jit compiler is

00:07:31,440 --> 00:07:35,919
uh we compile the code to native cpu

00:07:34,720 --> 00:07:39,120
machine code

00:07:35,919 --> 00:07:40,880
and then we store them in the cache so

00:07:39,120 --> 00:07:43,199
the next time that we need to run this

00:07:40,880 --> 00:07:44,000
code we just execute them from the cache

00:07:43,199 --> 00:07:46,400
without having

00:07:44,000 --> 00:07:47,360
to go through the virtual machine so you

00:07:46,400 --> 00:07:50,000
can see

00:07:47,360 --> 00:07:51,280
if you have applications that take so

00:07:50,000 --> 00:07:54,160
much processing

00:07:51,280 --> 00:07:55,280
on the cpu we can take huge advantages

00:07:54,160 --> 00:07:57,039
of this

00:07:55,280 --> 00:07:58,400
we also have a feature and that's

00:07:57,039 --> 00:08:02,960
enabled by default

00:07:58,400 --> 00:08:05,599
called tracing jit this works in the way

00:08:02,960 --> 00:08:06,800
if we try to find the code that's used

00:08:05,599 --> 00:08:09,120
frequently

00:08:06,800 --> 00:08:10,479
for example if a function is called

00:08:09,120 --> 00:08:12,720
multiple times

00:08:10,479 --> 00:08:14,720
and there's a threshold if the function

00:08:12,720 --> 00:08:17,039
is called 128 times

00:08:14,720 --> 00:08:19,039
then we mark this as a hot code and we

00:08:17,039 --> 00:08:21,440
compile this function

00:08:19,039 --> 00:08:22,400
we run the machine code afterwards in

00:08:21,440 --> 00:08:24,240
the same request

00:08:22,400 --> 00:08:27,039
and also we cache them for the next

00:08:24,240 --> 00:08:28,400
request so the next time we run it we

00:08:27,039 --> 00:08:30,000
don't have to go through the virtual

00:08:28,400 --> 00:08:33,360
machine

00:08:30,000 --> 00:08:36,880
to enable jit um it's quite simple

00:08:33,360 --> 00:08:40,719
you have to give some memory

00:08:36,880 --> 00:08:42,880
allocation to to store the machine code

00:08:40,719 --> 00:08:45,040
and php will store this machine code for

00:08:42,880 --> 00:08:46,160
you um there are so many configuration

00:08:45,040 --> 00:08:49,680
options but they

00:08:46,160 --> 00:08:51,279
are with okay defaults that you don't

00:08:49,680 --> 00:08:53,279
really have to change

00:08:51,279 --> 00:08:54,640
um to enable you just have to set this

00:08:53,279 --> 00:08:58,560
value

00:08:54,640 --> 00:09:01,680
and i did some tests in php source code

00:08:58,560 --> 00:09:03,120
there's couple benchmark scripts you can

00:09:01,680 --> 00:09:06,399
see it's almost

00:09:03,120 --> 00:09:09,279
two times faster compared to

00:09:06,399 --> 00:09:10,959
without using it and when we used it it

00:09:09,279 --> 00:09:15,839
will

00:09:10,959 --> 00:09:18,720
be quite faster i did the same test with

00:09:15,839 --> 00:09:19,360
fibonacci sequence this is a cpu heavy

00:09:18,720 --> 00:09:22,640
task

00:09:19,360 --> 00:09:26,080
so many maps to calculate there and

00:09:22,640 --> 00:09:28,320
using jit php 8 was two times faster

00:09:26,080 --> 00:09:30,080
more than two times faster

00:09:28,320 --> 00:09:31,360
i did the same test with other languages

00:09:30,080 --> 00:09:33,920
as well

00:09:31,360 --> 00:09:35,519
uh including some compiled languages

00:09:33,920 --> 00:09:39,040
which are known to be

00:09:35,519 --> 00:09:42,000
fast um we are not going to get

00:09:39,040 --> 00:09:42,480
as close as c or rust because they are

00:09:42,000 --> 00:09:45,200
com

00:09:42,480 --> 00:09:45,839
compiled ahead of the time but we

00:09:45,200 --> 00:09:48,160
actually make

00:09:45,839 --> 00:09:50,160
a huge progress from 10 seconds to 4

00:09:48,160 --> 00:09:53,680
seconds i think it's a huge win

00:09:50,160 --> 00:09:55,200
for php for applications that are heavy

00:09:53,680 --> 00:09:59,279
on cpu

00:09:55,200 --> 00:10:02,800
but for web applications it's not good

00:09:59,279 --> 00:10:06,079
um laravel was actually slower

00:10:02,800 --> 00:10:09,200
using jade and symphony demo i tested

00:10:06,079 --> 00:10:11,279
and it was only one person faster than

00:10:09,200 --> 00:10:12,880
without using it i think that it will be

00:10:11,279 --> 00:10:15,760
similar to drupal

00:10:12,880 --> 00:10:16,480
because in drupal wordpress joomla all

00:10:15,760 --> 00:10:19,120
these

00:10:16,480 --> 00:10:20,160
web applications the bottleneck is the

00:10:19,120 --> 00:10:23,040
database

00:10:20,160 --> 00:10:24,640
files or waiting for the user to upload

00:10:23,040 --> 00:10:28,720
files all these things

00:10:24,640 --> 00:10:30,839
so most of the the io bound applications

00:10:28,720 --> 00:10:32,800
they will not get any uh performance

00:10:30,839 --> 00:10:36,240
benefits

00:10:32,800 --> 00:10:38,959
sorry performance benefits but for

00:10:36,240 --> 00:10:40,000
cli applications or the ones with so

00:10:38,959 --> 00:10:43,040
much

00:10:40,000 --> 00:10:46,480
cpu processing it can make things

00:10:43,040 --> 00:10:47,040
at least twice faster i have some use

00:10:46,480 --> 00:10:50,959
cases

00:10:47,040 --> 00:10:50,959
and some in-depth information here

00:10:51,040 --> 00:10:55,200
you also have constructor properties

00:10:53,360 --> 00:10:58,720
this is by far

00:10:55,200 --> 00:10:58,720
one of my favorite changes

00:10:58,839 --> 00:11:05,680
php we have classes like this

00:11:01,920 --> 00:11:06,720
right it's the same void plate code that

00:11:05,680 --> 00:11:10,240
we

00:11:06,720 --> 00:11:14,480
kind of type every time here

00:11:10,240 --> 00:11:16,480
we declare a uid property we use the

00:11:14,480 --> 00:11:18,640
same thing in the class constructor

00:11:16,480 --> 00:11:20,959
and then we also assign this value we

00:11:18,640 --> 00:11:24,000
repeat this pattern many times in

00:11:20,959 --> 00:11:25,200
blocks in modules all these places all

00:11:24,000 --> 00:11:28,560
these classes

00:11:25,200 --> 00:11:31,680
we do the same thing what we do is

00:11:28,560 --> 00:11:34,959
we just reduce all this code

00:11:31,680 --> 00:11:35,680
to just one line so instead of doing all

00:11:34,959 --> 00:11:38,399
these things

00:11:35,680 --> 00:11:39,839
we just declare the property right from

00:11:38,399 --> 00:11:42,880
the constructor

00:11:39,839 --> 00:11:45,920
and php will promote this to be

00:11:42,880 --> 00:11:47,200
a property of the class you just have to

00:11:45,920 --> 00:11:50,240
declare

00:11:47,200 --> 00:11:53,200
the visibility of the property so public

00:11:50,240 --> 00:11:54,079
private or protected and php will do

00:11:53,200 --> 00:11:56,560
this for you

00:11:54,079 --> 00:11:57,839
and you can just reduce the code so

00:11:56,560 --> 00:12:00,160
before we had

00:11:57,839 --> 00:12:01,040
eight lines and it's just three lines

00:12:00,160 --> 00:12:04,079
now

00:12:01,040 --> 00:12:04,480
if you have more properties just reduce

00:12:04,079 --> 00:12:06,480
them

00:12:04,480 --> 00:12:10,079
to the same lines i think it's a really

00:12:06,480 --> 00:12:12,320
cool feature

00:12:10,079 --> 00:12:13,760
we also have union types this is

00:12:12,320 --> 00:12:15,760
actually made

00:12:13,760 --> 00:12:16,959
for drupal it sounds like it was made

00:12:15,760 --> 00:12:20,000
for drupal

00:12:16,959 --> 00:12:23,440
because we have functions like node load

00:12:20,000 --> 00:12:26,079
that we can't use the type here

00:12:23,440 --> 00:12:27,040
because you can't say we will always

00:12:26,079 --> 00:12:30,240
return

00:12:27,040 --> 00:12:31,440
standard class or entity value because

00:12:30,240 --> 00:12:35,760
we sometimes return

00:12:31,440 --> 00:12:39,120
false and this is the function

00:12:35,760 --> 00:12:42,560
because we accept many types for the the

00:12:39,120 --> 00:12:46,560
node id we sometimes accept integer

00:12:42,560 --> 00:12:49,040
we sometimes accept an array of integers

00:12:46,560 --> 00:12:50,800
and when we return we sometimes return

00:12:49,040 --> 00:12:53,440
false as well

00:12:50,800 --> 00:12:54,399
um but now in php eight you can use

00:12:53,440 --> 00:12:57,360
union types

00:12:54,399 --> 00:12:58,959
so it's the same syntax as dot commands

00:12:57,360 --> 00:13:01,839
you just have to use it

00:12:58,959 --> 00:13:04,560
here you can combine not just two you

00:13:01,839 --> 00:13:09,519
can combine any number of types

00:13:04,560 --> 00:13:11,760
and it will just work um for

00:13:09,519 --> 00:13:12,720
for boolean values you can also return

00:13:11,760 --> 00:13:15,920
false

00:13:12,720 --> 00:13:16,959
this is a special type that we have in

00:13:15,920 --> 00:13:20,079
php 8

00:13:16,959 --> 00:13:22,959
um and forward to say

00:13:20,079 --> 00:13:25,040
we will return standard class or false

00:13:22,959 --> 00:13:28,480
because we never return true

00:13:25,040 --> 00:13:30,240
right so it makes sense to say false so

00:13:28,480 --> 00:13:32,480
if we have the note we have returned the

00:13:30,240 --> 00:13:33,600
note object if you don't have it we will

00:13:32,480 --> 00:13:36,880
just return false

00:13:33,600 --> 00:13:37,519
so we can just get rid of the the dog

00:13:36,880 --> 00:13:39,680
comments

00:13:37,519 --> 00:13:41,360
because we don't have to use there all

00:13:39,680 --> 00:13:43,120
the information it's just right on the

00:13:41,360 --> 00:13:46,639
function

00:13:43,120 --> 00:13:49,680
um which is unit times non-safe operator

00:13:46,639 --> 00:13:53,040
this is also really useful in drupal

00:13:49,680 --> 00:13:56,399
because we have sometimes this chains of

00:13:53,040 --> 00:13:58,320
method calls um so in this example we

00:13:56,399 --> 00:14:01,360
have this customer

00:13:58,320 --> 00:14:03,600
and we try to take the address object

00:14:01,360 --> 00:14:05,120
and then you try to take the address

00:14:03,600 --> 00:14:08,079
this is what we call chaining

00:14:05,120 --> 00:14:08,720
because the next call depends on the

00:14:08,079 --> 00:14:13,839
value

00:14:08,720 --> 00:14:13,839
of um the fun the method called before

00:14:14,000 --> 00:14:18,079
but if if one of these tabs if this is

00:14:17,199 --> 00:14:20,880
null or if this

00:14:18,079 --> 00:14:23,440
is null we cannot call the next method

00:14:20,880 --> 00:14:26,240
and php will show an error

00:14:23,440 --> 00:14:26,959
to fix this we always have to make sure

00:14:26,240 --> 00:14:29,360
to check

00:14:26,959 --> 00:14:30,959
if is this available and then we can

00:14:29,360 --> 00:14:34,560
call is this available

00:14:30,959 --> 00:14:37,600
and then we can call you can just reduce

00:14:34,560 --> 00:14:39,040
this using null safe operator the

00:14:37,600 --> 00:14:40,800
operator is like this

00:14:39,040 --> 00:14:42,480
the question mark you start with the

00:14:40,800 --> 00:14:45,040
question mark

00:14:42,480 --> 00:14:47,360
and then the property accessor um the

00:14:45,040 --> 00:14:50,320
dash and the greater that sign

00:14:47,360 --> 00:14:51,199
it works as a condition by itself it

00:14:50,320 --> 00:14:53,680
will check

00:14:51,199 --> 00:14:54,720
it's just value null the value before is

00:14:53,680 --> 00:14:56,480
a normal

00:14:54,720 --> 00:14:58,800
if it's not literally returned null all

00:14:56,480 --> 00:15:00,079
the way back if it's not null it will

00:14:58,800 --> 00:15:03,040
continue

00:15:00,079 --> 00:15:04,240
no errors it will just return now

00:15:03,040 --> 00:15:07,199
silently

00:15:04,240 --> 00:15:09,120
uh to reduce most of the boilerplate if

00:15:07,199 --> 00:15:12,480
conditions we have in

00:15:09,120 --> 00:15:15,120
all the php code

00:15:12,480 --> 00:15:17,199
we also have match expressions this is

00:15:15,120 --> 00:15:20,959
also a really cool feature

00:15:17,199 --> 00:15:24,000
because we have the switch expressions

00:15:20,959 --> 00:15:28,000
and they are really bad um

00:15:24,000 --> 00:15:30,880
for example you have to use the break

00:15:28,000 --> 00:15:32,079
statement otherwise switch extensions

00:15:30,880 --> 00:15:35,519
they fall through

00:15:32,079 --> 00:15:36,639
so if it matches for post and if you

00:15:35,519 --> 00:15:39,360
don't have break

00:15:36,639 --> 00:15:41,040
it to try to match um the other cases

00:15:39,360 --> 00:15:44,880
down the line

00:15:41,040 --> 00:15:47,600
that's usually a cause for bug

00:15:44,880 --> 00:15:48,480
we can't also assign values like return

00:15:47,600 --> 00:15:50,240
a value

00:15:48,480 --> 00:15:52,320
from the function call and catch this

00:15:50,240 --> 00:15:55,440
value you always have to assign

00:15:52,320 --> 00:15:57,360
a variable always in every case

00:15:55,440 --> 00:15:58,720
that's also quite bad and most

00:15:57,360 --> 00:16:02,000
importantly

00:15:58,720 --> 00:16:03,519
these matches are not type safe if you

00:16:02,000 --> 00:16:07,120
have a case

00:16:03,519 --> 00:16:08,240
that is zero and false switch expression

00:16:07,120 --> 00:16:11,040
will just match

00:16:08,240 --> 00:16:12,560
the first thing that it comes across it

00:16:11,040 --> 00:16:16,320
doesn't check the type

00:16:12,560 --> 00:16:19,519
because zero and false they are valid

00:16:16,320 --> 00:16:22,399
two separate cases if we have zero

00:16:19,519 --> 00:16:22,800
and false we don't want php to just pick

00:16:22,399 --> 00:16:27,839
one

00:16:22,800 --> 00:16:30,399
we we want php to match the correct one

00:16:27,839 --> 00:16:30,959
but um the new match expression syntax

00:16:30,399 --> 00:16:34,079
it will

00:16:30,959 --> 00:16:35,279
fix all these things um so we start with

00:16:34,079 --> 00:16:38,560
the match

00:16:35,279 --> 00:16:41,759
similar to switch start with match

00:16:38,560 --> 00:16:45,199
and you need to pass the value same

00:16:41,759 --> 00:16:48,320
it will accept the case same

00:16:45,199 --> 00:16:52,000
you can accept multiple cases again

00:16:48,320 --> 00:16:53,839
same the support for default as well

00:16:52,000 --> 00:16:55,279
the match expression is quite similar to

00:16:53,839 --> 00:16:58,959
switch but

00:16:55,279 --> 00:17:02,720
it you can return the value so from this

00:16:58,959 --> 00:17:05,039
function call you can assign this value

00:17:02,720 --> 00:17:06,799
to this variable you don't have to

00:17:05,039 --> 00:17:10,319
accept but you can

00:17:06,799 --> 00:17:12,880
if you like to do so um it only

00:17:10,319 --> 00:17:14,559
supports single expressions which means

00:17:12,880 --> 00:17:16,640
um you have to

00:17:14,559 --> 00:17:18,640
call just one function you cannot have

00:17:16,640 --> 00:17:21,760
multiple lines like switching

00:17:18,640 --> 00:17:24,400
switch blocks

00:17:21,760 --> 00:17:25,280
and the type matching will be strict so

00:17:24,400 --> 00:17:28,079
compared to

00:17:25,280 --> 00:17:28,720
a switch block using match you can have

00:17:28,079 --> 00:17:32,080
zero

00:17:28,720 --> 00:17:34,799
and false if the value is zero

00:17:32,080 --> 00:17:36,080
match expression will match only zero

00:17:34,799 --> 00:17:38,240
not false

00:17:36,080 --> 00:17:39,280
and if you pass false even if there's a

00:17:38,240 --> 00:17:42,240
zero here

00:17:39,280 --> 00:17:43,600
it will match false that's what we call

00:17:42,240 --> 00:17:46,640
type save

00:17:43,600 --> 00:17:49,520
um also this is similar to a

00:17:46,640 --> 00:17:50,400
god statement in other languages like

00:17:49,520 --> 00:17:54,160
swift

00:17:50,400 --> 00:17:57,200
um it means if php comes across

00:17:54,160 --> 00:18:00,240
um this match expression it must

00:17:57,200 --> 00:18:03,840
match at least one

00:18:00,240 --> 00:18:05,760
it must match one because sometimes you

00:18:03,840 --> 00:18:08,480
if you don't match anything and if you

00:18:05,760 --> 00:18:10,559
don't have a default expression

00:18:08,480 --> 00:18:11,840
it means there's likely something that

00:18:10,559 --> 00:18:13,440
you didn't think about

00:18:11,840 --> 00:18:15,280
so match expression will throw an

00:18:13,440 --> 00:18:18,080
exception if there's

00:18:15,280 --> 00:18:19,679
no matches um it's not exactly a

00:18:18,080 --> 00:18:20,400
one-to-one replacement but there are

00:18:19,679 --> 00:18:23,360
many

00:18:20,400 --> 00:18:26,240
examples that you can change to use the

00:18:23,360 --> 00:18:26,240
match expression

00:18:26,559 --> 00:18:29,840
we also have weak maps

00:18:30,000 --> 00:18:36,400
weak maps is a way to

00:18:33,280 --> 00:18:38,240
store additional values but if you do so

00:18:36,400 --> 00:18:41,679
in php

00:18:38,240 --> 00:18:44,799
without a big map php will never

00:18:41,679 --> 00:18:48,080
clear these values because

00:18:44,799 --> 00:18:51,840
you you're already using this variable

00:18:48,080 --> 00:18:53,440
so php will never clear this value

00:18:51,840 --> 00:18:55,120
if you have for example if you have a

00:18:53,440 --> 00:18:58,559
cache to

00:18:55,120 --> 00:19:01,520
use some of the frequently used objects

00:18:58,559 --> 00:19:02,160
you sometimes want php to clear this

00:19:01,520 --> 00:19:04,080
memory

00:19:02,160 --> 00:19:06,720
it's not all the time but sometimes you

00:19:04,080 --> 00:19:10,559
need php to clear these values

00:19:06,720 --> 00:19:12,400
micmaps help us there by

00:19:10,559 --> 00:19:13,760
allowing you to store additional data

00:19:12,400 --> 00:19:16,160
about objects

00:19:13,760 --> 00:19:17,600
for example you can store the commands

00:19:16,160 --> 00:19:20,080
of a node

00:19:17,600 --> 00:19:21,520
in interpol syntax um you can store

00:19:20,080 --> 00:19:24,000
commands for node

00:19:21,520 --> 00:19:24,960
and if the node is gone php will

00:19:24,000 --> 00:19:27,600
automatically

00:19:24,960 --> 00:19:30,000
clear all the commands as well so this

00:19:27,600 --> 00:19:30,799
is an easy way to manage the life cycle

00:19:30,000 --> 00:19:34,240
of cache

00:19:30,799 --> 00:19:34,720
and also to not cause any memory leaks

00:19:34,240 --> 00:19:37,760
because

00:19:34,720 --> 00:19:39,679
just because of cache as well is

00:19:37,760 --> 00:19:42,960
i have one example here and several

00:19:39,679 --> 00:19:42,960
examples in the next slide

00:19:43,280 --> 00:19:49,520
you can see we get one object

00:19:46,960 --> 00:19:51,120
and you can assign any number of

00:19:49,520 --> 00:19:54,160
additional information

00:19:51,120 --> 00:19:57,440
on behalf of this object so

00:19:54,160 --> 00:19:59,840
what php does is it will not

00:19:57,440 --> 00:20:00,640
it will allow this post object to be

00:19:59,840 --> 00:20:02,880
cleared

00:20:00,640 --> 00:20:04,000
if this post object is destroyed

00:20:02,880 --> 00:20:05,760
somewhere else

00:20:04,000 --> 00:20:07,200
these commands will be destroyed

00:20:05,760 --> 00:20:09,520
automatically for you

00:20:07,200 --> 00:20:11,520
so you don't have to check if this value

00:20:09,520 --> 00:20:13,360
is available and clear these values by

00:20:11,520 --> 00:20:16,320
yourself

00:20:13,360 --> 00:20:17,600
um in the second article i have like

00:20:16,320 --> 00:20:20,640
many examples on

00:20:17,600 --> 00:20:23,600
some practical use cases and

00:20:20,640 --> 00:20:24,240
this comes to the eight major new

00:20:23,600 --> 00:20:27,919
features

00:20:24,240 --> 00:20:31,120
in php eight by far my favorites

00:20:27,919 --> 00:20:33,200
are um just in term compiler and

00:20:31,120 --> 00:20:36,720
constructor properties

00:20:33,200 --> 00:20:39,039
because i can really make it to um

00:20:36,720 --> 00:20:40,400
minimize the boilerplate code and also

00:20:39,039 --> 00:20:43,360
take some sweet

00:20:40,400 --> 00:20:45,039
performance boost from there i also like

00:20:43,360 --> 00:20:46,840
the match expressions which are quite

00:20:45,039 --> 00:20:49,760
strict

00:20:46,840 --> 00:20:52,799
um so there's eight

00:20:49,760 --> 00:20:55,440
major new features moving on

00:20:52,799 --> 00:20:57,360
to the new functions we don't have many

00:20:55,440 --> 00:21:01,679
functions just a few

00:20:57,360 --> 00:21:04,799
um we have the the probably the most

00:21:01,679 --> 00:21:08,640
happiest function in php eight is

00:21:04,799 --> 00:21:11,200
uh str contains starts with

00:21:08,640 --> 00:21:13,200
and ends with they function exactly what

00:21:11,200 --> 00:21:16,080
this how they sound like

00:21:13,200 --> 00:21:17,280
to check if a function if a string has

00:21:16,080 --> 00:21:20,480
another string

00:21:17,280 --> 00:21:24,240
or if it starts with or if it ends with

00:21:20,480 --> 00:21:27,200
you could do this pretty much in php 7

00:21:24,240 --> 00:21:28,240
but you have to use function like str

00:21:27,200 --> 00:21:30,320
pos

00:21:28,240 --> 00:21:32,720
and you have to check against false

00:21:30,320 --> 00:21:36,080
strict comparison it's just

00:21:32,720 --> 00:21:37,039
ugly code so string content starts with

00:21:36,080 --> 00:21:39,919
and ends with

00:21:37,039 --> 00:21:42,159
it's just beautiful code and just so

00:21:39,919 --> 00:21:45,280
convenient to use

00:21:42,159 --> 00:21:47,840
we have a few extra functions how fdo is

00:21:45,280 --> 00:21:49,600
to divide one float value from another

00:21:47,840 --> 00:21:51,840
there are some debug functions i will

00:21:49,600 --> 00:21:55,520
just run by them

00:21:51,840 --> 00:21:58,960
um we have one stringable interface and

00:21:55,520 --> 00:22:01,360
a php token to save the time i will not

00:21:58,960 --> 00:22:05,039
be talking about these functions

00:22:01,360 --> 00:22:06,880
of interfaces and these are the new

00:22:05,039 --> 00:22:10,559
functions and classes in php

00:22:06,880 --> 00:22:13,280
8 moving on to

00:22:10,559 --> 00:22:14,080
object oriented programming improvements

00:22:13,280 --> 00:22:17,520
before i do

00:22:14,080 --> 00:22:20,799
i need to explain a little bit about lsb

00:22:17,520 --> 00:22:24,240
or lisco substitution principle

00:22:20,799 --> 00:22:25,280
um it basically says if we have one

00:22:24,240 --> 00:22:27,919
class

00:22:25,280 --> 00:22:29,919
and if there's a child class that

00:22:27,919 --> 00:22:32,159
extends it

00:22:29,919 --> 00:22:33,440
it should function the same way it can

00:22:32,159 --> 00:22:36,720
do different things

00:22:33,440 --> 00:22:39,679
but it should accept the same parameters

00:22:36,720 --> 00:22:41,919
and it should return the written value

00:22:39,679 --> 00:22:45,280
should be compatible as well

00:22:41,919 --> 00:22:49,679
so in in the php class what this means

00:22:45,280 --> 00:22:52,320
is if you have a parameter for method

00:22:49,679 --> 00:22:53,200
you can only make this wider in child

00:22:52,320 --> 00:22:55,280
classes

00:22:53,200 --> 00:22:56,480
because it still has to accept the same

00:22:55,280 --> 00:22:58,880
parameters

00:22:56,480 --> 00:23:00,480
and a little bit more or the same for

00:22:58,880 --> 00:23:02,880
the return values you can

00:23:00,480 --> 00:23:05,679
have the first return value in the child

00:23:02,880 --> 00:23:08,799
class you have to return the exact same

00:23:05,679 --> 00:23:12,640
or small subset of it you can't return

00:23:08,799 --> 00:23:15,360
unexpected things so parameters you can

00:23:12,640 --> 00:23:18,240
make them wider

00:23:15,360 --> 00:23:19,360
return types you can make them narrower

00:23:18,240 --> 00:23:22,400
property types

00:23:19,360 --> 00:23:25,520
you can't actually change them between

00:23:22,400 --> 00:23:28,880
parent class and the child class

00:23:25,520 --> 00:23:32,559
this is important because in php 8 we

00:23:28,880 --> 00:23:35,600
enforce this and this is a reason why

00:23:32,559 --> 00:23:38,640
you can't use php

00:23:35,600 --> 00:23:40,799
um running drupal 7 today

00:23:38,640 --> 00:23:42,880
because in drupal 7 there's uh this

00:23:40,799 --> 00:23:45,919
database connection class

00:23:42,880 --> 00:23:49,200
that violates this principle

00:23:45,919 --> 00:23:52,480
and php's just it's not working

00:23:49,200 --> 00:23:56,799
for example here they have different

00:23:52,480 --> 00:23:58,960
parameters they are not compatible

00:23:56,799 --> 00:24:00,559
if you compare using lisco substitution

00:23:58,960 --> 00:24:04,000
principle

00:24:00,559 --> 00:24:06,400
so php 7 and 5 it was very

00:24:04,000 --> 00:24:07,200
relaxed about this it just drew a

00:24:06,400 --> 00:24:10,480
warning

00:24:07,200 --> 00:24:11,840
writing php eight well it's a fatal

00:24:10,480 --> 00:24:14,640
error

00:24:11,840 --> 00:24:16,320
and you will probably come across this

00:24:14,640 --> 00:24:18,960
one many times

00:24:16,320 --> 00:24:19,760
because in drupal we kind of have this

00:24:18,960 --> 00:24:23,120
habit

00:24:19,760 --> 00:24:26,240
to extend clause this module

00:24:23,120 --> 00:24:28,000
it's it's just an ocean of extent

00:24:26,240 --> 00:24:30,400
extending this class to another to

00:24:28,000 --> 00:24:31,600
another so if there's at least one

00:24:30,400 --> 00:24:35,360
incompatible

00:24:31,600 --> 00:24:38,559
method boom uh being it um

00:24:35,360 --> 00:24:40,480
in compatible federal error

00:24:38,559 --> 00:24:42,480
you will come across this many times i

00:24:40,480 --> 00:24:44,400
think um

00:24:42,480 --> 00:24:47,760
there are some other improvement changes

00:24:44,400 --> 00:24:50,799
as well um i call them improvements

00:24:47,760 --> 00:24:51,279
because it was a problem before but we

00:24:50,799 --> 00:24:54,320
just

00:24:51,279 --> 00:24:57,679
bring the level of the error up so

00:24:54,320 --> 00:25:00,559
we are more aware of the changes um

00:24:57,679 --> 00:25:02,640
it does not write code it does not

00:25:00,559 --> 00:25:06,960
correct code that we say

00:25:02,640 --> 00:25:10,400
it's wrong it's still wrong code

00:25:06,960 --> 00:25:13,919
that we just

00:25:10,400 --> 00:25:15,120
show as an error if you have a private

00:25:13,919 --> 00:25:18,240
method

00:25:15,120 --> 00:25:20,400
uh you don't have to follow this

00:25:18,240 --> 00:25:21,440
lisco substitution principle because

00:25:20,400 --> 00:25:26,000
they're

00:25:21,440 --> 00:25:29,120
private classes private methods

00:25:26,000 --> 00:25:31,440
if you have magic methods in php um

00:25:29,120 --> 00:25:32,240
these are the ones that like double

00:25:31,440 --> 00:25:34,000
underscore

00:25:32,240 --> 00:25:36,320
two string or double underscore

00:25:34,000 --> 00:25:40,640
something double underscore get

00:25:36,320 --> 00:25:42,960
set um they have internal signatures

00:25:40,640 --> 00:25:44,480
if you have a class with a wrong

00:25:42,960 --> 00:25:47,520
signature

00:25:44,480 --> 00:25:49,679
it will show an error as well

00:25:47,520 --> 00:25:52,320
this is a small change that live will

00:25:49,679 --> 00:25:54,840
not likely cause any problems in drupal

00:25:52,320 --> 00:25:56,720
so i don't really focus on on it too

00:25:54,840 --> 00:25:58,559
much um

00:25:56,720 --> 00:26:00,559
the fourth one is time system

00:25:58,559 --> 00:26:02,559
improvements

00:26:00,559 --> 00:26:03,840
they have union types we talked about

00:26:02,559 --> 00:26:07,200
them already

00:26:03,840 --> 00:26:10,720
uh we also have this new mix type

00:26:07,200 --> 00:26:13,120
which i really like um because

00:26:10,720 --> 00:26:14,320
sometimes we don't know what we will

00:26:13,120 --> 00:26:17,440
return

00:26:14,320 --> 00:26:19,039
because for example in drupal cache you

00:26:17,440 --> 00:26:23,360
can't stop anything

00:26:19,039 --> 00:26:26,400
objects integers float values arrays

00:26:23,360 --> 00:26:27,440
objects you can store anything so in

00:26:26,400 --> 00:26:30,880
drupal 8

00:26:27,440 --> 00:26:33,039
you can declare we will be returning

00:26:30,880 --> 00:26:36,080
mixed type

00:26:33,039 --> 00:26:39,840
me the mix type is a union type

00:26:36,080 --> 00:26:43,200
of all the types in php 8

00:26:39,840 --> 00:26:43,760
except the void type it has all the

00:26:43,200 --> 00:26:48,000
types

00:26:43,760 --> 00:26:51,200
so if you accept any type you can

00:26:48,000 --> 00:26:54,000
still use mixed asset type

00:26:51,200 --> 00:26:54,880
we also have the static type which means

00:26:54,000 --> 00:27:00,080
we will return

00:26:54,880 --> 00:27:00,080
an instance of the same clause um

00:27:00,240 --> 00:27:06,559
same class or the code clause if you

00:27:03,200 --> 00:27:08,640
have clauses that are immutable or

00:27:06,559 --> 00:27:10,400
if there's a class that will create an

00:27:08,640 --> 00:27:12,400
instance of itself

00:27:10,400 --> 00:27:14,720
then you can use the static as a return

00:27:12,400 --> 00:27:16,400
time it's only working as a return time

00:27:14,720 --> 00:27:19,440
too

00:27:16,400 --> 00:27:23,120
type improvements and um this is

00:27:19,440 --> 00:27:25,520
by far my favorite feature and this is

00:27:23,120 --> 00:27:27,279
probably the one that will bite us a lot

00:27:25,520 --> 00:27:30,799
too

00:27:27,279 --> 00:27:33,760
um internal functions

00:27:30,799 --> 00:27:35,360
they now draw exceptions this is a huge

00:27:33,760 --> 00:27:38,799
change in php

00:27:35,360 --> 00:27:41,840
because function like this um

00:27:38,799 --> 00:27:45,600
substring function you use this to

00:27:41,840 --> 00:27:48,640
take um a part of a string

00:27:45,600 --> 00:27:50,159
this works is we just pass this value

00:27:48,640 --> 00:27:52,880
and we ask php

00:27:50,159 --> 00:27:54,240
hey can you give me the next part of the

00:27:52,880 --> 00:27:57,600
string from position

00:27:54,240 --> 00:28:00,880
five or something and php

00:27:57,600 --> 00:28:05,279
seven and five it turns just showing

00:28:00,880 --> 00:28:08,320
warnings php 8 we get exceptions

00:28:05,279 --> 00:28:10,080
because internal types they will now

00:28:08,320 --> 00:28:11,810
validate the types

00:28:10,080 --> 00:28:13,520
of the arguments

00:28:11,810 --> 00:28:15,760
[Music]

00:28:13,520 --> 00:28:16,559
this looks like a small change but this

00:28:15,760 --> 00:28:21,039
changes

00:28:16,559 --> 00:28:23,200
a lot um for the past few

00:28:21,039 --> 00:28:26,559
months we have been working to you to

00:28:23,200 --> 00:28:28,960
promote these warnings to exceptions

00:28:26,559 --> 00:28:29,679
and almost all the internal functions

00:28:28,960 --> 00:28:32,880
they

00:28:29,679 --> 00:28:35,440
actually throw exceptions now so

00:28:32,880 --> 00:28:37,200
if you see this exception it just means

00:28:35,440 --> 00:28:39,840
there was a warning before

00:28:37,200 --> 00:28:40,559
and you're you were passing wrong values

00:28:39,840 --> 00:28:43,600
already

00:28:40,559 --> 00:28:45,120
but in php 8 it just brings up to your

00:28:43,600 --> 00:28:47,520
face

00:28:45,120 --> 00:28:50,080
another example with the json encode

00:28:47,520 --> 00:28:53,360
function json decode function

00:28:50,080 --> 00:28:56,000
here this value should be

00:28:53,360 --> 00:28:58,159
a positive value positive integer but if

00:28:56,000 --> 00:29:00,960
you pass

00:28:58,159 --> 00:29:01,840
your values less than zero it will it

00:29:00,960 --> 00:29:04,960
was showing

00:29:01,840 --> 00:29:08,799
a warning before but now

00:29:04,960 --> 00:29:10,640
federal area um the type is value area

00:29:08,799 --> 00:29:11,039
this is the new type of exception we

00:29:10,640 --> 00:29:14,480
have

00:29:11,039 --> 00:29:16,640
in php eight it basically means

00:29:14,480 --> 00:29:18,480
the type is okay because it was

00:29:16,640 --> 00:29:21,760
expecting integer

00:29:18,480 --> 00:29:24,399
but the value is a problematic one

00:29:21,760 --> 00:29:26,559
so it's called valid errors

00:29:24,399 --> 00:29:28,480
unfortunately some this means some of

00:29:26,559 --> 00:29:31,919
the functions

00:29:28,480 --> 00:29:35,760
there were no warnings and in php eight

00:29:31,919 --> 00:29:40,080
we still get exceptions anyway

00:29:35,760 --> 00:29:42,960
um this is the the negative side of it

00:29:40,080 --> 00:29:44,159
because it can be kind of surprising to

00:29:42,960 --> 00:29:46,240
see

00:29:44,159 --> 00:29:49,120
this function was working completely

00:29:46,240 --> 00:29:52,559
fine before and now i get exceptions

00:29:49,120 --> 00:29:53,520
um so the best way would be to look all

00:29:52,559 --> 00:29:56,799
these exceptions

00:29:53,520 --> 00:29:59,279
and kind of go back to the code and see

00:29:56,799 --> 00:30:00,399
what's wrong it's it's almost always

00:29:59,279 --> 00:30:04,480
wrong code

00:30:00,399 --> 00:30:08,240
but if if we had warnings or not

00:30:04,480 --> 00:30:12,080
that's a question um another change

00:30:08,240 --> 00:30:15,520
is um error reporting

00:30:12,080 --> 00:30:18,000
in page v8 uh we will show all the error

00:30:15,520 --> 00:30:22,320
messages by default now

00:30:18,000 --> 00:30:25,279
um before this php did not show

00:30:22,320 --> 00:30:26,080
um duplicated duplication messages

00:30:25,279 --> 00:30:29,279
before

00:30:26,080 --> 00:30:32,159
by default but in php 8

00:30:29,279 --> 00:30:33,200
they show all the messages um you can

00:30:32,159 --> 00:30:36,080
hide the messages

00:30:33,200 --> 00:30:36,640
it's not changed but we will report all

00:30:36,080 --> 00:30:39,520
the

00:30:36,640 --> 00:30:40,399
all the messages all the exceptions all

00:30:39,520 --> 00:30:43,679
the warnings

00:30:40,399 --> 00:30:44,799
all the notices everything uh we also

00:30:43,679 --> 00:30:48,159
show

00:30:44,799 --> 00:30:51,679
uh startup errors by default um

00:30:48,159 --> 00:30:53,520
startup errors are problems in the php

00:30:51,679 --> 00:30:57,360
ini configuration

00:30:53,520 --> 00:31:00,480
or if php cannot load the extension

00:30:57,360 --> 00:31:04,000
um it was not shown before in php 8 we

00:31:00,480 --> 00:31:09,519
show all the startup errors as well

00:31:04,000 --> 00:31:13,919
um we use this at suppression operator

00:31:09,519 --> 00:31:17,519
it's a way to silent um

00:31:13,919 --> 00:31:21,039
the the warnings that php shows

00:31:17,519 --> 00:31:24,399
before php 8 it was hiding

00:31:21,039 --> 00:31:28,799
everything even if it's a fatal error

00:31:24,399 --> 00:31:31,679
in php 8 we show the messages now

00:31:28,799 --> 00:31:32,559
because it will stop the script anyway

00:31:31,679 --> 00:31:34,640
but now we

00:31:32,559 --> 00:31:36,080
show the error message so it's easy to

00:31:34,640 --> 00:31:38,480
debug you don't

00:31:36,080 --> 00:31:39,840
you will likely not get in this like

00:31:38,480 --> 00:31:42,960
completely white screen

00:31:39,840 --> 00:31:44,480
with no error messages um so it's fixed

00:31:42,960 --> 00:31:47,919
in

00:31:44,480 --> 00:31:51,200
php eight um

00:31:47,919 --> 00:31:52,960
resource to object migration is another

00:31:51,200 --> 00:31:56,799
favorite of mine

00:31:52,960 --> 00:31:57,200
um what they do here is php has this

00:31:56,799 --> 00:32:00,880
type

00:31:57,200 --> 00:32:04,559
called resource when you open file

00:32:00,880 --> 00:32:05,120
that's a resource when you open a call

00:32:04,559 --> 00:32:07,360
handler

00:32:05,120 --> 00:32:08,399
it's a resource the problem with

00:32:07,360 --> 00:32:11,919
resource type

00:32:08,399 --> 00:32:14,080
is it's not a real type in php

00:32:11,919 --> 00:32:16,080
you can't use this as the type of

00:32:14,080 --> 00:32:18,240
written type of a function

00:32:16,080 --> 00:32:20,640
because it's not a real type supported

00:32:18,240 --> 00:32:22,480
we never supported resource type

00:32:20,640 --> 00:32:24,159
in the documentation we have this

00:32:22,480 --> 00:32:28,640
resource type

00:32:24,159 --> 00:32:32,640
but in php code it's not really a result

00:32:28,640 --> 00:32:33,679
a real time um so if you start a call

00:32:32,640 --> 00:32:36,320
handler

00:32:33,679 --> 00:32:37,279
you will get the curl resource and this

00:32:36,320 --> 00:32:39,840
is function called

00:32:37,279 --> 00:32:42,000
ease resource that will say true because

00:32:39,840 --> 00:32:44,399
it's a real resource

00:32:42,000 --> 00:32:45,679
if you call get type it will return

00:32:44,399 --> 00:32:47,840
resource

00:32:45,679 --> 00:32:50,399
the problem with resources is you have

00:32:47,840 --> 00:32:53,279
to close them

00:32:50,399 --> 00:32:54,960
you have to use call call close function

00:32:53,279 --> 00:32:58,550
or otherwise

00:32:54,960 --> 00:32:59,679
it will just keep hooking on the memory

00:32:58,550 --> 00:33:03,200
[Music]

00:32:59,679 --> 00:33:06,799
so this is fixed in php eight

00:33:03,200 --> 00:33:09,840
not with the closing but we migrate to

00:33:06,799 --> 00:33:11,279
return call handle objects they are

00:33:09,840 --> 00:33:13,360
standard classes

00:33:11,279 --> 00:33:15,120
you can still use the same functions

00:33:13,360 --> 00:33:18,399
they all the functions

00:33:15,120 --> 00:33:20,799
now accept objects not the resource

00:33:18,399 --> 00:33:21,600
so this is completely a transparent

00:33:20,799 --> 00:33:24,240
change

00:33:21,600 --> 00:33:25,279
unless you are using each resource

00:33:24,240 --> 00:33:28,320
function

00:33:25,279 --> 00:33:31,679
to check if the value is available

00:33:28,320 --> 00:33:35,039
um and you don't have to close because

00:33:31,679 --> 00:33:36,640
when this object is destroyed or if it's

00:33:35,039 --> 00:33:39,760
garbage cleaned or if

00:33:36,640 --> 00:33:41,679
this value is no longer used php will

00:33:39,760 --> 00:33:45,200
automatically close this resource

00:33:41,679 --> 00:33:48,320
and this is truth for all of the objects

00:33:45,200 --> 00:33:50,880
um so far um

00:33:48,320 --> 00:33:53,279
this is ongoing effort we made some

00:33:50,880 --> 00:33:56,960
changes in php 7.4

00:33:53,279 --> 00:34:00,399
um many changes in php 8.

00:33:56,960 --> 00:34:00,960
um sarah and there's um are the people

00:34:00,399 --> 00:34:04,080
working

00:34:00,960 --> 00:34:05,039
to migrate other extensions like ftp

00:34:04,080 --> 00:34:08,320
extension

00:34:05,039 --> 00:34:11,919
into php 8.1 it's already done actually

00:34:08,320 --> 00:34:15,040
um in drupal 8 and 9

00:34:11,919 --> 00:34:18,320
we were using the gd image

00:34:15,040 --> 00:34:21,040
because we use gd um extension this is

00:34:18,320 --> 00:34:24,399
already fixed in drupal 8 right now

00:34:21,040 --> 00:34:26,480
um i think like two weeks ago um but you

00:34:24,399 --> 00:34:31,359
have all these extensions that

00:34:26,480 --> 00:34:34,320
have to change um php mailer was using

00:34:31,359 --> 00:34:35,119
open ssl key it they are already fixed

00:34:34,320 --> 00:34:37,119
so

00:34:35,119 --> 00:34:39,599
when i see this change i have to submit

00:34:37,119 --> 00:34:42,320
some patches and pull requests to

00:34:39,599 --> 00:34:42,320
these projects

00:34:42,639 --> 00:34:47,359
the next one is string related changes

00:34:45,520 --> 00:34:50,560
this is

00:34:47,359 --> 00:34:54,399
i would say a little bit complicated one

00:34:50,560 --> 00:34:58,079
because it's really difficult to debug

00:34:54,399 --> 00:35:02,640
at least for now so the change is

00:34:58,079 --> 00:35:03,599
in php 8 we consider that if you have a

00:35:02,640 --> 00:35:07,520
string

00:35:03,599 --> 00:35:10,800
it always has an empty string

00:35:07,520 --> 00:35:11,680
the the difference is in php 8 if you

00:35:10,800 --> 00:35:15,119
try to

00:35:11,680 --> 00:35:18,720
to take to see if one string

00:35:15,119 --> 00:35:22,160
has an empty string php will say no

00:35:18,720 --> 00:35:26,079
and also show a warning

00:35:22,160 --> 00:35:28,720
in php 8 because we fundamentally assume

00:35:26,079 --> 00:35:30,320
that there's an empty string in every

00:35:28,720 --> 00:35:34,079
part of the string

00:35:30,320 --> 00:35:36,240
it will return true if there's an empty

00:35:34,079 --> 00:35:39,520
string in empty string as well

00:35:36,240 --> 00:35:40,079
so you will always get true if the value

00:35:39,520 --> 00:35:43,119
is true

00:35:40,079 --> 00:35:46,480
if the value is empty so

00:35:43,119 --> 00:35:49,839
this is a huge change um because once it

00:35:46,480 --> 00:35:51,440
was saying false now it will say true

00:35:49,839 --> 00:35:53,280
uh this is consistent with other

00:35:51,440 --> 00:35:56,400
extensions as well uh mb

00:35:53,280 --> 00:35:57,520
string the iconv function extension all

00:35:56,400 --> 00:36:01,200
these functions they

00:35:57,520 --> 00:36:04,400
are consistent in php eight now

00:36:01,200 --> 00:36:07,599
um the other one i think this is one of

00:36:04,400 --> 00:36:11,520
the most important changes in php eight

00:36:07,599 --> 00:36:14,720
um when you compare a number

00:36:11,520 --> 00:36:18,079
with the string it will

00:36:14,720 --> 00:36:21,280
show unexpected values

00:36:18,079 --> 00:36:22,079
in php 8 the the way this comparison

00:36:21,280 --> 00:36:26,000
works

00:36:22,079 --> 00:36:29,760
is by com by converting this

00:36:26,000 --> 00:36:30,560
string to a number and checking if this

00:36:29,760 --> 00:36:34,079
number is

00:36:30,560 --> 00:36:35,440
equal to this other number so in this

00:36:34,079 --> 00:36:38,800
case

00:36:35,440 --> 00:36:42,160
we can write foobar string

00:36:38,800 --> 00:36:45,599
to integer so the value will be 0

00:36:42,160 --> 00:36:49,680
and 0 is equal to 0 so that's true

00:36:45,599 --> 00:36:53,040
in php 8 we do it the other way

00:36:49,680 --> 00:36:55,280
if this string has no numbers if this

00:36:53,040 --> 00:36:58,160
string doesn't look like a number

00:36:55,280 --> 00:36:58,880
or what we call numeric strings like

00:36:58,160 --> 00:37:01,440
here

00:36:58,880 --> 00:37:02,400
this is not a numeric string because

00:37:01,440 --> 00:37:06,000
it's not

00:37:02,400 --> 00:37:09,280
a number with in the string format

00:37:06,000 --> 00:37:12,240
there's no number here so what we do is

00:37:09,280 --> 00:37:15,359
we convert the number to a string

00:37:12,240 --> 00:37:18,800
so this zero as integer becomes

00:37:15,359 --> 00:37:22,640
zero as a string and then compare

00:37:18,800 --> 00:37:23,440
which results false so it was true and

00:37:22,640 --> 00:37:26,560
false

00:37:23,440 --> 00:37:27,680
this fixes many of the the memes and

00:37:26,560 --> 00:37:30,480
jobs we had about

00:37:27,680 --> 00:37:31,119
php with this huge chart that you

00:37:30,480 --> 00:37:34,480
compare

00:37:31,119 --> 00:37:37,760
zero with something and

00:37:34,480 --> 00:37:40,800
it stays true sometimes it says false

00:37:37,760 --> 00:37:43,920
it's like a huge complicated chart

00:37:40,800 --> 00:37:44,320
it's almost fixed in php eight at the

00:37:43,920 --> 00:37:46,880
cost

00:37:44,320 --> 00:37:48,800
of some confusion because if we relied

00:37:46,880 --> 00:37:51,280
on this functionality

00:37:48,800 --> 00:37:55,119
it will be totally different now so you

00:37:51,280 --> 00:37:58,240
have to keep an eye on that as well

00:37:55,119 --> 00:38:02,320
um remote functionality

00:37:58,240 --> 00:38:06,240
um php 8 is a major version

00:38:02,320 --> 00:38:09,760
in php the development happens with

00:38:06,240 --> 00:38:13,040
step by step and then we take a big step

00:38:09,760 --> 00:38:16,160
so from php 7.0 1

00:38:13,040 --> 00:38:18,720
2 and 7.4 we duplicate

00:38:16,160 --> 00:38:19,520
many functions and they will show a

00:38:18,720 --> 00:38:22,640
duplication

00:38:19,520 --> 00:38:24,000
message if there's a function that was

00:38:22,640 --> 00:38:27,119
deprecated

00:38:24,000 --> 00:38:29,040
it will be removed in php8 the same

00:38:27,119 --> 00:38:31,440
thing will happen for php9

00:38:29,040 --> 00:38:33,280
we duplicate some functions and remove

00:38:31,440 --> 00:38:36,160
them in the next version the next

00:38:33,280 --> 00:38:38,400
major version so some of the functions

00:38:36,160 --> 00:38:40,960
that we used in drupal

00:38:38,400 --> 00:38:42,560
that are gone now i have just this is

00:38:40,960 --> 00:38:46,079
just a few of the

00:38:42,560 --> 00:38:49,520
functions that are removed but um

00:38:46,079 --> 00:38:52,320
it goes a long way um because we have

00:38:49,520 --> 00:38:53,280
um many functions that are removed by

00:38:52,320 --> 00:38:56,480
all these functions

00:38:53,280 --> 00:38:59,440
there was a duplication message before

00:38:56,480 --> 00:39:00,960
so if you did not ignore messages you'll

00:38:59,440 --> 00:39:04,000
be fine

00:39:00,960 --> 00:39:07,040
um i have some further resources

00:39:04,000 --> 00:39:08,160
with all the links this is the php8

00:39:07,040 --> 00:39:11,440
release note

00:39:08,160 --> 00:39:14,160
with um all the major changes

00:39:11,440 --> 00:39:15,520
who contributed them all these things on

00:39:14,160 --> 00:39:19,119
this website i was

00:39:15,520 --> 00:39:20,880
working around eight months to compile a

00:39:19,119 --> 00:39:22,160
list of all the changes and extra

00:39:20,880 --> 00:39:24,640
information

00:39:22,160 --> 00:39:26,000
if you like to help triple with php8

00:39:24,640 --> 00:39:29,520
compatibility

00:39:26,000 --> 00:39:32,320
that's a special php 8.0 tag go there

00:39:29,520 --> 00:39:33,760
and try to contribute there or if you

00:39:32,320 --> 00:39:35,040
have problems you can search there as

00:39:33,760 --> 00:39:38,160
well

00:39:35,040 --> 00:39:41,200
and um you can join us

00:39:38,160 --> 00:39:44,880
on contribution days um

00:39:41,200 --> 00:39:48,400
and also um a huge kudos to

00:39:44,880 --> 00:39:51,599
over 150 people that helped to shape

00:39:48,400 --> 00:39:53,200
uh php eight um some of the most

00:39:51,599 --> 00:39:55,599
important people

00:39:53,200 --> 00:39:57,359
i i was talking with nikita and dimitri

00:39:55,599 --> 00:39:59,599
before this presentation

00:39:57,359 --> 00:40:00,480
and they're quite nice people to work

00:39:59,599 --> 00:40:04,319
with

00:40:00,480 --> 00:40:07,440
um all of them quite brilliant people so

00:40:04,319 --> 00:40:10,800
hats off to all of them and um

00:40:07,440 --> 00:40:13,599
thanks to all of you for coming today um

00:40:10,800 --> 00:40:14,000
these are difficult times for all of us

00:40:13,599 --> 00:40:16,400
and

00:40:14,000 --> 00:40:18,000
i'm happy that we could make it i will

00:40:16,400 --> 00:40:21,920
be taking some questions

00:40:18,000 --> 00:40:25,119
because my 40 minute ends now

00:40:21,920 --> 00:40:27,440
uh i will be taking questions now and

00:40:25,119 --> 00:40:28,560
um if you have any questions that you

00:40:27,440 --> 00:40:31,760
don't want to ask

00:40:28,560 --> 00:40:34,000
in public um just send me an email or

00:40:31,760 --> 00:40:35,680
find me on twitter all these places i

00:40:34,000 --> 00:40:39,440
will reply to all of these

00:40:35,680 --> 00:40:53,839
emails and all of these messages

00:40:39,440 --> 00:40:53,839
so thank you

00:40:57,520 --> 00:41:04,400
hi hola

00:41:00,640 --> 00:41:04,800
how was that uh just good i will i think

00:41:04,400 --> 00:41:08,640
i have

00:41:04,800 --> 00:41:08,640
five minutes for q a

00:41:18,839 --> 00:41:21,839
sure

00:41:32,960 --> 00:41:37,520
um the there was a question if there are

00:41:35,200 --> 00:41:40,640
slides to this presentation

00:41:37,520 --> 00:41:41,280
um they are online right now you can

00:41:40,640 --> 00:41:44,560
view them

00:41:41,280 --> 00:41:48,240
online as well um

00:41:44,560 --> 00:42:03,839
i will post the link on on the chat um

00:41:48,240 --> 00:42:03,839
so it's kind of easier to download

00:42:25,839 --> 00:42:31,200
also another thing is the way php works

00:42:30,160 --> 00:42:33,760
is

00:42:31,200 --> 00:42:34,960
um we try to be open with all the

00:42:33,760 --> 00:42:38,240
changes

00:42:34,960 --> 00:42:40,720
um if you go to the rfc page it's on the

00:42:38,240 --> 00:42:44,160
further resources slide

00:42:40,720 --> 00:42:47,280
you can vote and you can

00:42:44,160 --> 00:42:49,520
communicate with the other people um

00:42:47,280 --> 00:42:51,359
you can even express hey i think we

00:42:49,520 --> 00:42:53,280
should do is this way you can also go

00:42:51,359 --> 00:42:55,920
ahead and contribute

00:42:53,280 --> 00:42:59,280
i have this idea i like to change php

00:42:55,920 --> 00:43:03,119
and you can actually do it that's how

00:42:59,280 --> 00:43:05,359
that's how much open php is um

00:43:03,119 --> 00:43:06,400
so you can take a look at all the

00:43:05,359 --> 00:43:09,580
changes that

00:43:06,400 --> 00:43:11,119
happens as they happen um

00:43:09,580 --> 00:43:13,599
[Music]

00:43:11,119 --> 00:43:15,200
all and it's active on github as well so

00:43:13,599 --> 00:43:16,240
all the changes you can actually see

00:43:15,200 --> 00:43:18,079
what changed

00:43:16,240 --> 00:43:19,760
that's how i was writing all these

00:43:18,079 --> 00:43:23,760
articles i just

00:43:19,760 --> 00:43:23,760
download the key repository

00:43:23,920 --> 00:43:29,839
and you just check what's changed

00:43:27,359 --> 00:43:31,280
um there's a question is there a

00:43:29,839 --> 00:43:34,240
specific drupal version

00:43:31,280 --> 00:43:36,640
that php 8 is going to be supported um

00:43:34,240 --> 00:43:39,599
drupal 7 is broken right now

00:43:36,640 --> 00:43:40,160
but uh drupal 8 should be working i

00:43:39,599 --> 00:43:42,400
could just

00:43:40,160 --> 00:43:44,720
run triple eight but there could be

00:43:42,400 --> 00:43:48,240
problems because we never know

00:43:44,720 --> 00:43:50,960
if uh it's going to be 100 comparable

00:43:48,240 --> 00:43:52,880
uh the test run but there there will be

00:43:50,960 --> 00:43:57,200
always problems

00:43:52,880 --> 00:43:57,200
um drew hi um

00:43:57,680 --> 00:44:02,079
it's uh it will show type errors for all

00:44:00,720 --> 00:44:04,800
the functions now

00:44:02,079 --> 00:44:06,400
because if a function declares that we

00:44:04,800 --> 00:44:09,040
accept this type

00:44:06,400 --> 00:44:09,839
and if the type does not match php will

00:44:09,040 --> 00:44:13,119
throw

00:44:09,839 --> 00:44:16,480
the exception for you um internal

00:44:13,119 --> 00:44:18,079
errors um you need to change the php

00:44:16,480 --> 00:44:22,480
source code to do it

00:44:18,079 --> 00:44:25,200
so all not all functions are changed

00:44:22,480 --> 00:44:26,400
but most of the functions they at least

00:44:25,200 --> 00:44:29,920
in the most

00:44:26,400 --> 00:44:33,040
used for most most used extensions

00:44:29,920 --> 00:44:36,319
they are changed i have around

00:44:33,040 --> 00:44:38,480
10 seconds so thanks everyone for coming

00:44:36,319 --> 00:44:40,839
it's just wonderful to have you all here

00:44:38,480 --> 00:44:43,839
thank you enjoy the rest of the

00:44:40,839 --> 00:44:43,839

YouTube URL: https://www.youtube.com/watch?v=NSGYuwTTNCA


