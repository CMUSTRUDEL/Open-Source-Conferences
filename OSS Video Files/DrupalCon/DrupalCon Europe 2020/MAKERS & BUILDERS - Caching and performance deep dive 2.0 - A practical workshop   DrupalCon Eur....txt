Title: MAKERS & BUILDERS - Caching and performance deep dive 2.0 - A practical workshop   DrupalCon Eur...
Publication date: 2021-01-13
Playlist: DrupalCon Europe 2020
Description: 
	Drupal has the most advanced caching system of any CMS out there right now. This leads to many opportunities to create the fastest Drupal sites ever and easily cache content directly at the edge, but there are also many challenges, problems and learning curves to overcome.
Captions: 
	00:00:04,059 --> 00:00:09,889
[Music]

00:00:13,519 --> 00:00:16,560
okay let's start

00:00:14,799 --> 00:00:19,199
welcome everyone thanks for dropping the

00:00:16,560 --> 00:00:19,520
hi in i've also put again the link to

00:00:19,199 --> 00:00:22,480
the

00:00:19,520 --> 00:00:24,480
um repository we will be working on for

00:00:22,480 --> 00:00:26,320
the very first part

00:00:24,480 --> 00:00:29,119
we'll see how it goes this time maybe

00:00:26,320 --> 00:00:30,800
we'll even do some live programming like

00:00:29,119 --> 00:00:33,120
do something live on stage not

00:00:30,800 --> 00:00:36,640
everything pre-processed

00:00:33,120 --> 00:00:38,559
um and um so let's start

00:00:36,640 --> 00:00:40,079
so this is the caching and performance

00:00:38,559 --> 00:00:42,320
deep dive 2.0

00:00:40,079 --> 00:00:44,079
um we did a very nice session at

00:00:42,320 --> 00:00:47,680
drupalcon global

00:00:44,079 --> 00:00:48,399
this year already and we crammed a lot

00:00:47,680 --> 00:00:51,680
into

00:00:48,399 --> 00:00:54,160
45 minutes including questions

00:00:51,680 --> 00:00:55,760
but this time we have two hours around

00:00:54,160 --> 00:00:59,440
about

00:00:55,760 --> 00:01:02,719
two minutes less than two hours now and

00:00:59,440 --> 00:01:05,920
we can go a little bit

00:01:02,719 --> 00:01:09,600
slower and my goal today is to um

00:01:05,920 --> 00:01:12,080
give you an idea of

00:01:09,600 --> 00:01:13,280
how caching and performance works in

00:01:12,080 --> 00:01:15,840
detail

00:01:13,280 --> 00:01:17,119
and there are other performance sessions

00:01:15,840 --> 00:01:18,640
here and i've

00:01:17,119 --> 00:01:20,640
looked a little bit at the questions

00:01:18,640 --> 00:01:22,880
there and i saw there's still some

00:01:20,640 --> 00:01:25,600
misunderstanding what are cache text

00:01:22,880 --> 00:01:27,680
what a cache context why do i need those

00:01:25,600 --> 00:01:29,119
what do i need when and i really want to

00:01:27,680 --> 00:01:31,920
clear it up

00:01:29,119 --> 00:01:33,680
um so my name is fabian franz i'm the

00:01:31,920 --> 00:01:36,159
vice president of software engineering

00:01:33,680 --> 00:01:38,400
at tech1 consulting and you can find me

00:01:36,159 --> 00:01:41,840
at twitter and follow me on twitter

00:01:38,400 --> 00:01:41,840
with ed fabian france

00:01:42,079 --> 00:01:45,360
um so overview of what we're gonna doing

00:01:44,720 --> 00:01:49,040
uh

00:01:45,360 --> 00:01:51,119
oh yeah and um and the codes of big pipe

00:01:49,040 --> 00:01:52,159
are together with malia's and i've

00:01:51,119 --> 00:01:54,399
architected

00:01:52,159 --> 00:01:57,119
a large part of what i'll be presenting

00:01:54,399 --> 00:02:00,240
today the large parts of the drupal 8 9

00:01:57,119 --> 00:02:03,439
10 whatever caching systems i'm also

00:02:00,240 --> 00:02:06,240
one of two drupal 7 core maintainers and

00:02:03,439 --> 00:02:06,560
several subsystems including page cache

00:02:06,240 --> 00:02:10,000
and

00:02:06,560 --> 00:02:13,280
also funnily enough the theme system

00:02:10,000 --> 00:02:13,520
um so my motivation is really to teach

00:02:13,280 --> 00:02:16,400
you

00:02:13,520 --> 00:02:17,360
all i know about caching um this is why

00:02:16,400 --> 00:02:19,360
i've come back

00:02:17,360 --> 00:02:21,360
on the stage this is why i've come back

00:02:19,360 --> 00:02:23,760
to sessions because while you all are

00:02:21,360 --> 00:02:26,160
doing a very very great job

00:02:23,760 --> 00:02:28,160
in explaining this and there's many

00:02:26,160 --> 00:02:30,319
presentations about it and i've seen the

00:02:28,160 --> 00:02:32,239
one about placeholders today

00:02:30,319 --> 00:02:35,120
it warmed my heart because it was just

00:02:32,239 --> 00:02:37,040
so nice to see

00:02:35,120 --> 00:02:39,680
uh all the work we've we've done on this

00:02:37,040 --> 00:02:41,920
in core being used by someone understood

00:02:39,680 --> 00:02:44,560
by someone etc but there's so much more

00:02:41,920 --> 00:02:47,920
potential still in this caching system

00:02:44,560 --> 00:02:48,640
um that um that we originally thought

00:02:47,920 --> 00:02:50,560
about

00:02:48,640 --> 00:02:52,720
of what you can do and i really want to

00:02:50,560 --> 00:02:54,959
show you some more of what

00:02:52,720 --> 00:02:56,400
can be done at the same time i want to

00:02:54,959 --> 00:02:59,680
make it as

00:02:56,400 --> 00:03:03,040
beginner friendly as possible in that

00:02:59,680 --> 00:03:05,120
um but um

00:03:03,040 --> 00:03:06,879
and but for those that already know it

00:03:05,120 --> 00:03:08,720
we will also be looking at some concepts

00:03:06,879 --> 00:03:12,080
from a different angle

00:03:08,720 --> 00:03:14,239
so um and um

00:03:12,080 --> 00:03:15,840
overall it will be roughly four parts

00:03:14,239 --> 00:03:17,920
with 20 minutes each

00:03:15,840 --> 00:03:20,080
that's planned and 10 minutes for

00:03:17,920 --> 00:03:22,720
questions in between parts so we have

00:03:20,080 --> 00:03:24,239
roughly four times 30 minutes so over

00:03:22,720 --> 00:03:28,799
two hours

00:03:24,239 --> 00:03:30,000
um really as much as possible beginner

00:03:28,799 --> 00:03:32,239
friendly

00:03:30,000 --> 00:03:34,000
but the problem is i know too much

00:03:32,239 --> 00:03:35,599
better that it's very hard to know what

00:03:34,000 --> 00:03:38,640
you don't know anymore

00:03:35,599 --> 00:03:40,000
so please ask questions lots of it i'm

00:03:38,640 --> 00:03:42,560
here for that

00:03:40,000 --> 00:03:43,040
um and we'll be coming to one part

00:03:42,560 --> 00:03:45,760
that's

00:03:43,040 --> 00:03:47,680
probably more intermediate um but maybe

00:03:45,760 --> 00:03:49,920
it gives you some ideas

00:03:47,680 --> 00:03:52,080
um this is not for learning how to

00:03:49,920 --> 00:03:52,879
expect to set up a drupal 9 site for the

00:03:52,080 --> 00:03:55,519
first time

00:03:52,879 --> 00:03:57,200
as a workshop of all that it's also not

00:03:55,519 --> 00:03:58,319
a completely different session that at

00:03:57,200 --> 00:03:59,840
drupalcon global

00:03:58,319 --> 00:04:02,319
there will be lots of things that are

00:03:59,840 --> 00:04:04,560
similar that you've already seen but

00:04:02,319 --> 00:04:07,120
yeah my conservative come back in an

00:04:04,560 --> 00:04:09,680
hour so then we have lots of new things

00:04:07,120 --> 00:04:11,599
um and in the session description i've

00:04:09,680 --> 00:04:13,840
clearly outlined the

00:04:11,599 --> 00:04:15,439
changes that are there so um then

00:04:13,840 --> 00:04:18,479
everyone is on the same page

00:04:15,439 --> 00:04:20,400
because this time part one two three are

00:04:18,479 --> 00:04:22,400
similar but part four we will be talking

00:04:20,400 --> 00:04:23,440
about cdn navigation and authenticate

00:04:22,400 --> 00:04:25,120
user caching

00:04:23,440 --> 00:04:27,360
because it was like the number one

00:04:25,120 --> 00:04:28,479
question i got after my session last

00:04:27,360 --> 00:04:31,280
time

00:04:28,479 --> 00:04:32,960
um so the general caching and cash

00:04:31,280 --> 00:04:37,280
invalidation strategies

00:04:32,960 --> 00:04:40,720
um cash items cash max age and tax

00:04:37,280 --> 00:04:43,280
so we talk about how to invalidate

00:04:40,720 --> 00:04:43,759
cashes in this part two we are talking

00:04:43,280 --> 00:04:48,080
about

00:04:43,759 --> 00:04:50,560
the um um

00:04:48,080 --> 00:04:52,479
cash variation the cashite ratio

00:04:50,560 --> 00:04:54,720
placeholders and how to deal with

00:04:52,479 --> 00:04:56,479
things that are just uncashable because

00:04:54,720 --> 00:04:59,600
of the count time you

00:04:56,479 --> 00:05:00,479
probably don't wanna cash maybe unless

00:04:59,600 --> 00:05:03,120
you wanna stop

00:05:00,479 --> 00:05:05,120
time you have a magic stop timer in part

00:05:03,120 --> 00:05:05,520
three we talk about catching layers and

00:05:05,120 --> 00:05:07,520
some

00:05:05,520 --> 00:05:08,639
common catching pitfalls and also here's

00:05:07,520 --> 00:05:12,080
lots of new stuff

00:05:08,639 --> 00:05:14,479
that's coming fresh from this year's um

00:05:12,080 --> 00:05:15,440
black friday performance optimization so

00:05:14,479 --> 00:05:18,880
you're getting the

00:05:15,440 --> 00:05:22,840
bleeding edge of what's still not solved

00:05:18,880 --> 00:05:25,759
um this overall will be

00:05:22,840 --> 00:05:28,320
um an educational workshop

00:05:25,759 --> 00:05:30,400
um so you can get the code i've already

00:05:28,320 --> 00:05:33,039
pasted the link in chat so

00:05:30,400 --> 00:05:35,280
you can find it there um we'll also be

00:05:33,039 --> 00:05:36,960
having questions after each part so not

00:05:35,280 --> 00:05:38,720
everything will be at the end

00:05:36,960 --> 00:05:40,560
even though that would probably make you

00:05:38,720 --> 00:05:43,120
stay there two hours more but

00:05:40,560 --> 00:05:44,000
no no um you can ask questions at any

00:05:43,120 --> 00:05:47,360
time

00:05:44,000 --> 00:05:49,840
um i have have a questions board here

00:05:47,360 --> 00:05:52,240
uh which we can switch to so we can look

00:05:49,840 --> 00:05:55,120
at all you all the questions here

00:05:52,240 --> 00:05:55,120
and um

00:05:55,280 --> 00:05:58,800
do it and essentially to use the code

00:05:57,919 --> 00:06:01,120
you just

00:05:58,800 --> 00:06:02,880
install drupal 9 via dev or bring your

00:06:01,120 --> 00:06:04,880
own google 9 install you copy it into

00:06:02,880 --> 00:06:05,759
modules custom you enable the cache edu

00:06:04,880 --> 00:06:08,720
module

00:06:05,759 --> 00:06:11,120
and the best would be to use umami theme

00:06:08,720 --> 00:06:14,880
because that's also what i'm using and

00:06:11,120 --> 00:06:15,600
it works well so um let's quickly talk

00:06:14,880 --> 00:06:19,039
about

00:06:15,600 --> 00:06:20,800
what is caching in computing a cache is

00:06:19,039 --> 00:06:22,800
a hardware or software component that

00:06:20,800 --> 00:06:25,039
stores data so that future requests for

00:06:22,800 --> 00:06:29,039
data can be so fast the dash total cache

00:06:25,039 --> 00:06:32,160
um wikipedia is correct

00:06:29,039 --> 00:06:33,520
but complicated so let's make this much

00:06:32,160 --> 00:06:36,720
simpler

00:06:33,520 --> 00:06:38,400
so much theory we have a restaurant and

00:06:36,720 --> 00:06:39,600
this scene will be coming through the

00:06:38,400 --> 00:06:42,160
whole session

00:06:39,600 --> 00:06:43,280
and we prepare meals which are pages and

00:06:42,160 --> 00:06:46,720
our pizza takes

00:06:43,280 --> 00:06:47,440
10 minutes to prepare and the takeaway

00:06:46,720 --> 00:06:51,680
is

00:06:47,440 --> 00:06:54,479
the pizza is wrapped and then given out

00:06:51,680 --> 00:06:54,479
so um

00:06:55,919 --> 00:06:59,680
this is caching in a nutshell if we

00:06:59,120 --> 00:07:01,840
don't

00:06:59,680 --> 00:07:02,720
always take 10 minutes to prepare our

00:07:01,840 --> 00:07:06,000
page which

00:07:02,720 --> 00:07:08,319
no user probably want to wait um

00:07:06,000 --> 00:07:09,599
but instead we have a pre-prepared here

00:07:08,319 --> 00:07:11,840
for us

00:07:09,599 --> 00:07:13,680
um and we just give it out that's

00:07:11,840 --> 00:07:15,599
caching

00:07:13,680 --> 00:07:17,360
that's all you need to understand about

00:07:15,599 --> 00:07:21,680
caching whenever you think about cache

00:07:17,360 --> 00:07:25,039
think about pizza that makes work

00:07:21,680 --> 00:07:27,759
even nicer so the performance of the

00:07:25,039 --> 00:07:30,240
pizza delivery is improved

00:07:27,759 --> 00:07:31,199
one of the problems with this analogy is

00:07:30,240 --> 00:07:32,639
um

00:07:31,199 --> 00:07:34,400
even if you are the best shop in the

00:07:32,639 --> 00:07:36,080
world you only have infinite number of

00:07:34,400 --> 00:07:38,319
pizzas pre-prepared because

00:07:36,080 --> 00:07:40,400
you don't know um that there will be

00:07:38,319 --> 00:07:43,039
thousands of drupal con attendees coming

00:07:40,400 --> 00:07:45,759
now and wanting a pizza right now

00:07:43,039 --> 00:07:47,759
so for the sake of this example we'll be

00:07:45,759 --> 00:07:50,080
having a magic replicator

00:07:47,759 --> 00:07:52,000
the customer comes we replicate pizza

00:07:50,080 --> 00:07:55,520
that we prepared earlier

00:07:52,000 --> 00:07:55,520
um and

00:07:55,680 --> 00:08:00,479
then we give it away so this magic

00:07:58,639 --> 00:08:01,919
replicator essentially means we can

00:08:00,479 --> 00:08:05,280
prepare one pizza

00:08:01,919 --> 00:08:07,680
one time we've replicated that and then

00:08:05,280 --> 00:08:12,000
we only give those copies away it will

00:08:07,680 --> 00:08:15,280
always be a fresh

00:08:12,000 --> 00:08:16,240
um every item that we cache and genre

00:08:15,280 --> 00:08:18,400
gets a name

00:08:16,240 --> 00:08:19,840
that's a cache item name or cache

00:08:18,400 --> 00:08:23,759
address or

00:08:19,840 --> 00:08:24,800
cache key in drupal it was called once a

00:08:23,759 --> 00:08:27,599
cache id

00:08:24,800 --> 00:08:28,560
but we later call it also a cache key in

00:08:27,599 --> 00:08:30,319
a sense that's

00:08:28,560 --> 00:08:32,000
all the same it's essentially the name

00:08:30,319 --> 00:08:34,640
for your cache item it's how you

00:08:32,000 --> 00:08:36,159
identify it so for example if we have a

00:08:34,640 --> 00:08:38,080
pizza margarita

00:08:36,159 --> 00:08:40,240
and we use a cache key sample then we

00:08:38,080 --> 00:08:42,240
have like pizza mcgreet in an array

00:08:40,240 --> 00:08:46,320
but if you use it if cash id would we

00:08:42,240 --> 00:08:46,320
would use pizza margarita i said maybe

00:08:46,959 --> 00:08:50,480
so let's make pizza

00:08:50,800 --> 00:08:55,519
and here's our example we have a pizza

00:08:54,160 --> 00:08:58,640
cache

00:08:55,519 --> 00:09:01,120
it's us and um

00:08:58,640 --> 00:09:02,160
we are getting a pizza margarita out of

00:09:01,120 --> 00:09:04,240
cash

00:09:02,160 --> 00:09:06,160
and if there is a pizza cash pizza

00:09:04,240 --> 00:09:09,440
already then we deliver it

00:09:06,160 --> 00:09:10,080
via our magic replicator the cash pizza

00:09:09,440 --> 00:09:11,760
data

00:09:10,080 --> 00:09:14,720
and if there's not then we call the

00:09:11,760 --> 00:09:18,720
pizza oven to make us a nice magritta

00:09:14,720 --> 00:09:22,399
and then we set the migrator

00:09:18,720 --> 00:09:25,680
and um

00:09:22,399 --> 00:09:30,959
that's all we need essentially

00:09:25,680 --> 00:09:32,959
so who sees the bug

00:09:30,959 --> 00:09:35,120
there's a bug here and we're looking at

00:09:32,959 --> 00:09:36,800
that also in our practical example

00:09:35,120 --> 00:09:40,160
because this is our example one here

00:09:36,800 --> 00:09:40,160
exactly and

00:09:40,320 --> 00:09:51,839
we just reload that several times

00:09:55,120 --> 00:10:08,399
and i've broken the break sorry

00:10:05,360 --> 00:10:08,399
maybe i need to log in

00:10:09,200 --> 00:10:13,040
but that's the nice thing about the

00:10:10,320 --> 00:10:16,480
workshop you're live so um yeah

00:10:13,040 --> 00:10:18,880
now the data is correct um

00:10:16,480 --> 00:10:20,560
and yes casper you're completely correct

00:10:18,880 --> 00:10:22,320
the cash key is different between the

00:10:20,560 --> 00:10:26,720
get and the set

00:10:22,320 --> 00:10:29,600
um so we're still cleaning curses here

00:10:26,720 --> 00:10:31,440
um that's exactly what's the problem and

00:10:29,600 --> 00:10:32,000
one of the things and this has happened

00:10:31,440 --> 00:10:34,480
to me in

00:10:32,000 --> 00:10:35,360
real life this um getting of a pizza

00:10:34,480 --> 00:10:38,480
margarita

00:10:35,360 --> 00:10:41,680
and then setting not of a margarita but

00:10:38,480 --> 00:10:42,720
on a huge black friday thing several

00:10:41,680 --> 00:10:44,560
years ago

00:10:42,720 --> 00:10:46,000
there was a problem everything looked

00:10:44,560 --> 00:10:48,000
perfect but the site was

00:10:46,000 --> 00:10:50,480
still very slow and no one could really

00:10:48,000 --> 00:10:52,880
figure out why it was because there

00:10:50,480 --> 00:10:54,640
had been caches for all functions added

00:10:52,880 --> 00:10:57,760
why was it still slow

00:10:54,640 --> 00:10:59,680
and finally there was like this here was

00:10:57,760 --> 00:11:02,320
a get and then it was here like

00:10:59,680 --> 00:11:04,079
lots of code lots of things etc and

00:11:02,320 --> 00:11:06,959
finally here was the set

00:11:04,079 --> 00:11:08,240
and like in this example it used

00:11:06,959 --> 00:11:11,279
different cache keys

00:11:08,240 --> 00:11:12,320
so um that is why this is a much much

00:11:11,279 --> 00:11:15,279
better pattern

00:11:12,320 --> 00:11:17,279
you just define the cache id once and

00:11:15,279 --> 00:11:20,480
then you just use this cache id here

00:11:17,279 --> 00:11:28,399
and here so let's see if if

00:11:20,480 --> 00:11:31,120
our voicing is working now

00:11:28,399 --> 00:11:31,120
just holding it

00:11:33,120 --> 00:11:39,040
so um the next thing we need to know is

00:11:37,680 --> 00:11:42,000
how long is the product wallet

00:11:39,040 --> 00:11:43,279
obviously with pizza it usually has the

00:11:42,000 --> 00:11:46,959
best before date

00:11:43,279 --> 00:11:50,880
so um it's not valid infinitely long

00:11:46,959 --> 00:11:51,519
so um the problem is the pizza after a

00:11:50,880 --> 00:11:54,320
while

00:11:51,519 --> 00:11:54,959
looks like this and for your own sake

00:11:54,320 --> 00:11:57,600
i've

00:11:54,959 --> 00:11:58,160
intentionally omitted this image but you

00:11:57,600 --> 00:12:00,079
really

00:11:58,160 --> 00:12:01,839
don't want to eat it anymore so the

00:12:00,079 --> 00:12:02,480
solution that all supermarkets in the

00:12:01,839 --> 00:12:05,120
world have

00:12:02,480 --> 00:12:05,680
is an expiration date and exactly like

00:12:05,120 --> 00:12:09,680
that

00:12:05,680 --> 00:12:10,000
we can do as well so we have the cash id

00:12:09,680 --> 00:12:12,480
here

00:12:10,000 --> 00:12:14,000
we have the time to live here uh we have

00:12:12,480 --> 00:12:16,720
our pizza oven

00:12:14,000 --> 00:12:18,399
uh we make the magritta and i've i've

00:12:16,720 --> 00:12:20,079
omitted the get code because you've

00:12:18,399 --> 00:12:23,040
already seen it it's just a

00:12:20,079 --> 00:12:24,160
setting code um and then we essentially

00:12:23,040 --> 00:12:26,160
use time here

00:12:24,160 --> 00:12:27,279
and the time to live so we say this is

00:12:26,160 --> 00:12:30,399
valid for

00:12:27,279 --> 00:12:33,200
10 minutes so this is in seconds

00:12:30,399 --> 00:12:33,839
and this is how you can set an item in

00:12:33,200 --> 00:12:37,360
the cache

00:12:33,839 --> 00:12:38,399
that automatically expires now let's see

00:12:37,360 --> 00:12:41,120
if the most

00:12:38,399 --> 00:12:41,120
 go now

00:12:41,519 --> 00:12:46,320
yeah there we go so here you can see i

00:12:44,560 --> 00:12:49,200
was broken one i always get a

00:12:46,320 --> 00:12:52,079
different pizza margarita um but with

00:12:49,200 --> 00:12:55,920
the fixed one

00:12:52,079 --> 00:12:59,040
hopefully yeah l a i'm reloading

00:12:55,920 --> 00:13:02,399
um and you always get the the same

00:12:59,040 --> 00:13:06,079
migration in the end um so best before

00:13:02,399 --> 00:13:09,920
us now our example is expiration

00:13:06,079 --> 00:13:12,480
so um and here we we do something nice

00:13:09,920 --> 00:13:14,720
once we have something in the cache we

00:13:12,480 --> 00:13:18,720
show exactly how this cache item looks

00:13:14,720 --> 00:13:20,639
internally in the database this is um

00:13:18,720 --> 00:13:22,639
really nice to know because this is kind

00:13:20,639 --> 00:13:25,279
of like exactly how the database

00:13:22,639 --> 00:13:26,320
is structuring this so we used a little

00:13:25,279 --> 00:13:28,560
bit different

00:13:26,320 --> 00:13:30,480
uh cid here than in the presentation

00:13:28,560 --> 00:13:31,279
just so that it doesn't clash with that

00:13:30,480 --> 00:13:34,240
one

00:13:31,279 --> 00:13:34,639
and it says it has six segments left to

00:13:34,240 --> 00:13:38,480
live

00:13:34,639 --> 00:13:40,959
so if i reload it again it's gone again

00:13:38,480 --> 00:13:41,680
reload it again it's cached again for

00:13:40,959 --> 00:13:44,639
okay now

00:13:41,680 --> 00:13:44,639
seven seconds though

00:13:45,760 --> 00:13:50,480
first was in database or somewhere else

00:13:48,880 --> 00:13:53,279
it has a cid

00:13:50,480 --> 00:13:54,800
which is like the cache id the data

00:13:53,279 --> 00:13:57,199
which i formatted here because

00:13:54,800 --> 00:13:58,160
that's essentially this um the

00:13:57,199 --> 00:14:00,800
createdate

00:13:58,160 --> 00:14:02,560
the expiration date that is serialized

00:14:00,800 --> 00:14:04,639
the tags so check some

00:14:02,560 --> 00:14:06,720
and if it's valid or not and we coming

00:14:04,639 --> 00:14:09,360
to that a little bit later

00:14:06,720 --> 00:14:11,440
because we can also um get something

00:14:09,360 --> 00:14:15,360
from the cache that's involved

00:14:11,440 --> 00:14:18,720
so um yep this is our it's a magrita

00:14:15,360 --> 00:14:22,079
and um there we go

00:14:18,720 --> 00:14:24,880
so it takes as simple as that and

00:14:22,079 --> 00:14:25,279
page cash and drupal sweet research six

00:14:24,880 --> 00:14:27,760
worked

00:14:25,279 --> 00:14:30,000
exactly like this you just put an

00:14:27,760 --> 00:14:34,560
expiration date of 10 minutes

00:14:30,000 --> 00:14:36,880
uh unconditionally no expiration at all

00:14:34,560 --> 00:14:38,639
and that works and it's still pretty

00:14:36,880 --> 00:14:42,240
great for high traffic sites

00:14:38,639 --> 00:14:44,880
um it's the most simple way to get your

00:14:42,240 --> 00:14:46,240
your site are working nicely is to just

00:14:44,880 --> 00:14:49,120
catch it for 10 minutes

00:14:46,240 --> 00:14:50,320
and don't deal with anything and if your

00:14:49,120 --> 00:14:53,120
business is fine with

00:14:50,320 --> 00:14:59,199
10 minutes outdated data it will save so

00:14:53,120 --> 00:15:02,399
much headache

00:14:59,199 --> 00:15:06,399
uh questions please

00:15:02,399 --> 00:15:06,399
in in questions i think

00:15:09,040 --> 00:15:12,800
uh okay we can also do with them and

00:15:10,959 --> 00:15:13,680
this kind of hey jose could you

00:15:12,800 --> 00:15:16,560
could you add your

00:15:13,680 --> 00:15:17,040
question to the live q a hopefully

00:15:16,560 --> 00:15:20,720
that's

00:15:17,040 --> 00:15:23,760
on yeah it should be on

00:15:20,720 --> 00:15:27,199
um because it's simpler for later

00:15:23,760 --> 00:15:30,240
showing um

00:15:27,199 --> 00:15:33,839
so um yeah this is how you can

00:15:30,240 --> 00:15:33,839
cash for 10 minutes unconditionally

00:15:34,160 --> 00:15:40,079
so um now we've

00:15:37,759 --> 00:15:41,440
did all those pizzas we prepared lots of

00:15:40,079 --> 00:15:43,199
pizzas and we

00:15:41,440 --> 00:15:45,519
can keep them for a while so at the

00:15:43,199 --> 00:15:47,680
weekend we need to clean up

00:15:45,519 --> 00:15:49,440
and this is important for you to know

00:15:47,680 --> 00:15:50,399
because all other methods we will be

00:15:49,440 --> 00:15:53,440
showing later

00:15:50,399 --> 00:15:54,720
actually don't clean up they only expire

00:15:53,440 --> 00:15:56,720
and invalidate but

00:15:54,720 --> 00:15:58,079
the cash is never really clear then that

00:15:56,720 --> 00:16:00,800
has led to some

00:15:58,079 --> 00:16:02,160
performance problems as well in drupal 9

00:16:00,800 --> 00:16:04,880
so if you want to just

00:16:02,160 --> 00:16:06,480
remove one item you just take the cash

00:16:04,880 --> 00:16:09,279
service and you delete

00:16:06,480 --> 00:16:10,079
this item and if you want to delete all

00:16:09,279 --> 00:16:12,480
the pizzas

00:16:10,079 --> 00:16:13,360
then you just delete all and that is

00:16:12,480 --> 00:16:15,600
essentially

00:16:13,360 --> 00:16:16,959
and again we can show it so we have here

00:16:15,600 --> 00:16:20,560
our cash 2

00:16:16,959 --> 00:16:21,440
and now we need to see that this pizza

00:16:20,560 --> 00:16:24,320
margarita

00:16:21,440 --> 00:16:25,040
seven and it doesn't change so what

00:16:24,320 --> 00:16:28,240
we're gonna do

00:16:25,040 --> 00:16:31,440
is we're gonna i'm gonna clean up uh

00:16:28,240 --> 00:16:33,759
all the pizzas now this

00:16:31,440 --> 00:16:34,880
says all the pizzas cleaned up go back

00:16:33,759 --> 00:16:37,600
here

00:16:34,880 --> 00:16:38,480
and we got pizza margarita 77 that's

00:16:37,600 --> 00:16:42,399
fine now

00:16:38,480 --> 00:16:45,120
7 before 77 now coincidence

00:16:42,399 --> 00:16:45,519
um so this is how you uh how you clean

00:16:45,120 --> 00:16:49,120
up

00:16:45,519 --> 00:16:50,480
um so

00:16:49,120 --> 00:16:52,320
we're going to get to questions in a

00:16:50,480 --> 00:16:54,639
moment um so

00:16:52,320 --> 00:16:56,079
um one of the things people asked was

00:16:54,639 --> 00:16:58,560
hey how do i find

00:16:56,079 --> 00:16:59,279
my new pizza's cash ban and it's very

00:16:58,560 --> 00:17:02,880
simple

00:16:59,279 --> 00:17:04,799
you just see it in cash edu.services.yml

00:17:02,880 --> 00:17:06,959
just have the pizza's cash bin we have

00:17:04,799 --> 00:17:08,400
to class here the tags

00:17:06,959 --> 00:17:10,720
we add the factory and here the

00:17:08,400 --> 00:17:13,120
argument's name and essentially

00:17:10,720 --> 00:17:15,520
this is the internal service name and

00:17:13,120 --> 00:17:19,760
this is the name of the cash ban

00:17:15,520 --> 00:17:23,039
and we just add the tag and that's it so

00:17:19,760 --> 00:17:23,039
simple copy and paste

00:17:24,880 --> 00:17:33,840
so um i think i take some questions

00:17:29,120 --> 00:17:33,840
for a moment let's see

00:17:34,880 --> 00:17:40,559
okay let me quickly answer two questions

00:17:38,880 --> 00:17:42,400
so before we continue

00:17:40,559 --> 00:17:43,679
what is recommended putting onto the

00:17:42,400 --> 00:17:48,000
pizza even better when

00:17:43,679 --> 00:17:49,760
uh getting big we'll come to that later

00:17:48,000 --> 00:17:53,520
so we leave that question not yet

00:17:49,760 --> 00:17:53,520
answered i start for a moment

00:17:54,880 --> 00:18:00,480
and i saw that there's no method to get

00:17:58,640 --> 00:18:03,679
all items from bin is that possible

00:18:00,480 --> 00:18:06,799
somehow so something like get all cd

00:18:03,679 --> 00:18:09,200
in siri is possible um

00:18:06,799 --> 00:18:10,480
it's not recommended however because

00:18:09,200 --> 00:18:14,240
there's cash spin

00:18:10,480 --> 00:18:17,039
items that don't support that um

00:18:14,240 --> 00:18:18,960
and um you would also need to know

00:18:17,039 --> 00:18:20,000
what's your use case for that because if

00:18:18,960 --> 00:18:22,080
you want to just

00:18:20,000 --> 00:18:23,840
have a list of items in the cache you

00:18:22,080 --> 00:18:25,280
could just have another cache item that

00:18:23,840 --> 00:18:29,120
has the array

00:18:25,280 --> 00:18:33,039
essentially where you um where you store

00:18:29,120 --> 00:18:35,440
um the um all the items you've created

00:18:33,039 --> 00:18:35,440
already

00:18:35,600 --> 00:18:40,840
okay if you have a page and custom link

00:18:38,720 --> 00:18:43,840
it's my

00:18:40,840 --> 00:18:43,840
page

00:18:52,720 --> 00:18:59,109
um i'm trying to understand the question

00:18:56,000 --> 00:18:59,109
[Music]

00:18:59,280 --> 00:19:02,960
if you remove cash from custom form or

00:19:01,200 --> 00:19:05,840
custom link there's still cash because

00:19:02,960 --> 00:19:05,840
of page cash

00:19:09,039 --> 00:19:14,640
so there's several ways to um

00:19:12,480 --> 00:19:16,160
circumvent page cache if that's what

00:19:14,640 --> 00:19:18,240
you're asking if not you

00:19:16,160 --> 00:19:19,919
need to um to do that and actually i'm

00:19:18,240 --> 00:19:24,320
doing that

00:19:19,919 --> 00:19:24,320
so in our controller

00:19:26,799 --> 00:19:31,840
in the deliver function for delivering

00:19:29,520 --> 00:19:34,320
the paper our secret thing

00:19:31,840 --> 00:19:35,840
um we actually call the page cache kill

00:19:34,320 --> 00:19:38,000
switch and trigger it

00:19:35,840 --> 00:19:40,000
to completely disable page cache for

00:19:38,000 --> 00:19:44,000
this page because we don't wanna

00:19:40,000 --> 00:19:45,440
wanna catch it that's one way to do it i

00:19:44,000 --> 00:19:47,600
guess and if it doesn't answer the

00:19:45,440 --> 00:19:50,240
question please answer it again

00:19:47,600 --> 00:19:51,840
because i'm not sure i understood yet

00:19:50,240 --> 00:19:52,480
can you show how this was running in the

00:19:51,840 --> 00:19:55,919
page

00:19:52,480 --> 00:19:59,200
um how what is rendered in the page

00:19:55,919 --> 00:20:02,480
it's the question um

00:19:59,200 --> 00:20:04,720
i mean you can show the code again um

00:20:02,480 --> 00:20:06,960
how we do it but essentially we have

00:20:04,720 --> 00:20:10,320
this pizza object and the pizza object

00:20:06,960 --> 00:20:12,159
is um just for the sake of example

00:20:10,320 --> 00:20:14,320
it's converted to a string here and we

00:20:12,159 --> 00:20:17,440
just return the markup

00:20:14,320 --> 00:20:19,600
for that from our controller and again

00:20:17,440 --> 00:20:22,799
you can also browser code on github

00:20:19,600 --> 00:20:26,000
while doing that etc so um

00:20:22,799 --> 00:20:27,360
that should be good okay consider this

00:20:26,000 --> 00:20:29,679
answer if not just ask

00:20:27,360 --> 00:20:30,720
again and we can get a little bit more

00:20:29,679 --> 00:20:34,000
on that

00:20:30,720 --> 00:20:37,520
so um continuing further we are a great

00:20:34,000 --> 00:20:40,960
success people love it and um

00:20:37,520 --> 00:20:42,320
but um now we want to offer frozen

00:20:40,960 --> 00:20:44,880
margarita as well

00:20:42,320 --> 00:20:47,280
so first let's talk what is a good

00:20:44,880 --> 00:20:49,840
magritte pizza idea so death with

00:20:47,280 --> 00:20:51,120
zero zero floor enough salt and water

00:20:49,840 --> 00:20:52,720
nothing more

00:20:51,120 --> 00:20:54,559
then we have some custom-made tomato

00:20:52,720 --> 00:20:58,480
sauce mozzarella and basil

00:20:54,559 --> 00:20:58,480
so that's a great margarita

00:20:58,960 --> 00:21:05,440
and again we

00:21:03,280 --> 00:21:06,799
can now keep it for longer because it's

00:21:05,440 --> 00:21:09,280
a frozen migrator

00:21:06,799 --> 00:21:12,400
we call our pizza maker service we make

00:21:09,280 --> 00:21:12,400
a frozen macarrita

00:21:14,840 --> 00:21:20,799
um

00:21:17,039 --> 00:21:22,559
bezel bezel not organic or measurement

00:21:20,799 --> 00:21:26,000
that's something different

00:21:22,559 --> 00:21:28,480
um and we can keep that even for

00:21:26,000 --> 00:21:30,000
30 days so we have it's a margarita we

00:21:28,480 --> 00:21:33,280
put it in the frozen pizzas

00:21:30,000 --> 00:21:36,640
bin we make it frozen and we set it here

00:21:33,280 --> 00:21:39,120
and put the time to live

00:21:36,640 --> 00:21:40,159
so let's quickly recap how our shop

00:21:39,120 --> 00:21:42,720
works

00:21:40,159 --> 00:21:44,400
um the customer drives to our pizza shop

00:21:42,720 --> 00:21:45,520
the customer orders a frozen pizza

00:21:44,400 --> 00:21:47,919
margarita

00:21:45,520 --> 00:21:49,760
because they want to do it at home the

00:21:47,919 --> 00:21:50,480
waiter gets pizza far switch at the

00:21:49,760 --> 00:21:52,640
counter

00:21:50,480 --> 00:21:54,400
he checks the expiration date if it's

00:21:52,640 --> 00:21:57,120
expired then he gets one from

00:21:54,400 --> 00:21:58,480
central storage and the seller so we

00:21:57,120 --> 00:22:01,360
have two

00:21:58,480 --> 00:22:03,039
layers essentially like directly in the

00:22:01,360 --> 00:22:03,840
fridge and then we have something in the

00:22:03,039 --> 00:22:07,840
cellar

00:22:03,840 --> 00:22:11,039
then we replicate the pizza magic thing

00:22:07,840 --> 00:22:12,320
and we deliver the pizza to customer so

00:22:11,039 --> 00:22:15,280
this is how it work

00:22:12,320 --> 00:22:16,720
now we can offer marinara as well and

00:22:15,280 --> 00:22:18,159
that's very important is there's this

00:22:16,720 --> 00:22:21,280
reading method

00:22:18,159 --> 00:22:23,840
so same death same tomato sauce but the

00:22:21,280 --> 00:22:27,840
ingredients are extra virgin olive oil

00:22:23,840 --> 00:22:27,840
oregano and garlic

00:22:29,280 --> 00:22:35,760
so and this uh this vegan pizza

00:22:32,640 --> 00:22:37,840
obviously you can put whatever you want

00:22:35,760 --> 00:22:40,640
in your tomato sauce it's custom made so

00:22:37,840 --> 00:22:42,720
it's your choice um

00:22:40,640 --> 00:22:44,799
so this is a completely new pizza it's

00:22:42,720 --> 00:22:47,280
not a variation and it's now an offer

00:22:44,799 --> 00:22:48,159
so because it's a new pizza we make it a

00:22:47,280 --> 00:22:50,559
new

00:22:48,159 --> 00:22:52,720
cash id it's a pizza marinara we are

00:22:50,559 --> 00:22:54,720
again stored in frozen pizzas

00:22:52,720 --> 00:22:56,159
pizza america make it frozen and we

00:22:54,720 --> 00:22:58,320
deliver it and

00:22:56,159 --> 00:23:01,600
if you want to want to see that we can

00:22:58,320 --> 00:23:04,320
just do a very quick look at our factory

00:23:01,600 --> 00:23:05,520
we have our pizza maker here and here we

00:23:04,320 --> 00:23:10,880
make our

00:23:05,520 --> 00:23:10,880
margarita and our marinara there we go

00:23:15,280 --> 00:23:23,840
ah you don't see the

00:23:24,240 --> 00:23:30,080
okay there seems to be a slight delay

00:23:27,760 --> 00:23:31,120
okay i'm gonna switch back to slides

00:23:30,080 --> 00:23:35,360
hopefully

00:23:31,120 --> 00:23:37,840
now we are back to slides um

00:23:35,360 --> 00:23:40,150
okay just knowing i cannot contact

00:23:37,840 --> 00:23:41,440
switch as fast

00:23:40,150 --> 00:23:45,840
[Music]

00:23:41,440 --> 00:23:49,039
yes um so we have great success

00:23:45,840 --> 00:23:52,159
we are growing um

00:23:49,039 --> 00:23:54,480
i bet we need a but soon we do a super

00:23:52,159 --> 00:23:56,799
secret expedition to italy and we find a

00:23:54,480 --> 00:23:57,279
better recipe for the duff and the pizza

00:23:56,799 --> 00:24:00,320
daf

00:23:57,279 --> 00:24:03,840
2.0 and this pizza

00:24:00,320 --> 00:24:04,720
dev 2.0 it's fantastic we are loving it

00:24:03,840 --> 00:24:06,640
but it

00:24:04,720 --> 00:24:08,720
we need to invalidate all the casual

00:24:06,640 --> 00:24:11,279
pizzas and we don't want to wait for

00:24:08,720 --> 00:24:13,600
30 days but how do we know if they are

00:24:11,279 --> 00:24:16,720
new or old unfortunately our pizza

00:24:13,600 --> 00:24:18,320
baker was so enthusiastic that he

00:24:16,720 --> 00:24:20,880
directly started and

00:24:18,320 --> 00:24:21,840
now we have some pizzas here some of

00:24:20,880 --> 00:24:23,600
those there

00:24:21,840 --> 00:24:25,679
maybe you look at the best before date

00:24:23,600 --> 00:24:28,559
huh there must be some better

00:24:25,679 --> 00:24:29,919
and there is a better way so one of the

00:24:28,559 --> 00:24:32,400
ideas could be

00:24:29,919 --> 00:24:34,400
that's the definitely naive solution we

00:24:32,400 --> 00:24:37,279
just add the depth version 2

00:24:34,400 --> 00:24:39,200
here into our cache key and then we add

00:24:37,279 --> 00:24:42,799
uh that now it's a different

00:24:39,200 --> 00:24:44,720
um tomato cells and then we add that

00:24:42,799 --> 00:24:46,000
this has a little other ingredient so

00:24:44,720 --> 00:24:49,919
like key gets

00:24:46,000 --> 00:24:49,919
long and long and long and long

00:24:50,720 --> 00:24:55,279
and in the end probably not the best

00:24:54,159 --> 00:24:57,840
idea because

00:24:55,279 --> 00:25:00,000
this does not scale and the other part

00:24:57,840 --> 00:25:02,720
is all the old versions are also kept

00:25:00,000 --> 00:25:03,600
around for 30 days we really would like

00:25:02,720 --> 00:25:05,840
to not

00:25:03,600 --> 00:25:07,120
give them out anymore not have them

00:25:05,840 --> 00:25:09,440
stacked anymore

00:25:07,120 --> 00:25:10,480
and especially if we create a new

00:25:09,440 --> 00:25:13,760
because we have like

00:25:10,480 --> 00:25:16,880
one version by it um

00:25:13,760 --> 00:25:18,720
we definitely want um want to have one

00:25:16,880 --> 00:25:21,440
pizza we replicate so it's

00:25:18,720 --> 00:25:22,480
not a variation it's our new version of

00:25:21,440 --> 00:25:25,840
pizza

00:25:22,480 --> 00:25:28,320
but we need to know what's new or old

00:25:25,840 --> 00:25:29,520
so this is really terribly mess and it

00:25:28,320 --> 00:25:33,039
could get messy and

00:25:29,520 --> 00:25:35,760
messy and messy and i did that mess with

00:25:33,039 --> 00:25:38,799
render cache 1.0 in drupal 7 i

00:25:35,760 --> 00:25:40,880
did exactly that for exploration

00:25:38,799 --> 00:25:42,080
just put a hash on it on things like

00:25:40,880 --> 00:25:43,679
that and

00:25:42,080 --> 00:25:45,120
with spam cache it worked well with

00:25:43,679 --> 00:25:48,400
database that's well

00:25:45,120 --> 00:25:48,960
for obvious reasons um so um we all

00:25:48,400 --> 00:25:51,840
evolve

00:25:48,960 --> 00:25:52,880
in that um and cash takes a much much

00:25:51,840 --> 00:25:55,039
better idea for

00:25:52,880 --> 00:25:57,360
doing that so the idea is we give it a

00:25:55,039 --> 00:25:59,360
tag so essentially you have lots of

00:25:57,360 --> 00:26:01,200
boxes in your storage and

00:25:59,360 --> 00:26:03,039
you don't know is this product version

00:26:01,200 --> 00:26:05,600
one product two product ten

00:26:03,039 --> 00:26:07,760
whatever what you're doing you label it

00:26:05,600 --> 00:26:08,320
you put a label on it you put a tag on

00:26:07,760 --> 00:26:11,360
it

00:26:08,320 --> 00:26:14,480
and then you exactly now these are the

00:26:11,360 --> 00:26:15,520
um that's version two this is that

00:26:14,480 --> 00:26:18,799
version one

00:26:15,520 --> 00:26:20,799
and you know it so um

00:26:18,799 --> 00:26:23,760
and that's very simple to do you just

00:26:20,799 --> 00:26:27,760
add a new argument to our um

00:26:23,760 --> 00:26:31,520
to our set function the dot version here

00:26:27,760 --> 00:26:32,400
and um that's essentially it and now

00:26:31,520 --> 00:26:35,600
it's tagged

00:26:32,400 --> 00:26:38,559
um and the better way is again to

00:26:35,600 --> 00:26:40,480
to put it up here so the cache tags

00:26:38,559 --> 00:26:42,240
equal stuff version put the cache text

00:26:40,480 --> 00:26:44,720
here we have cd pixel

00:26:42,240 --> 00:26:46,240
expire and cache tags and once we want

00:26:44,720 --> 00:26:48,240
to um

00:26:46,240 --> 00:26:50,840
once we want to release a new defined we

00:26:48,240 --> 00:26:54,159
just do that we invalidate the tags

00:26:50,840 --> 00:26:57,200
um and that's it

00:26:54,159 --> 00:26:57,200
um so

00:27:00,559 --> 00:27:05,600
drupal tags the versions attacks

00:27:03,919 --> 00:27:07,760
automatically and

00:27:05,600 --> 00:27:09,360
while i have some slides to explain it

00:27:07,760 --> 00:27:12,080
it's much easier to see

00:27:09,360 --> 00:27:14,720
so hopefully you can see a screen now so

00:27:12,080 --> 00:27:18,159
we have a margarita

00:27:14,720 --> 00:27:20,640
and um once it's cached

00:27:18,159 --> 00:27:21,840
which for a very long time you see it

00:27:20,640 --> 00:27:25,200
has a check sum of

00:27:21,840 --> 00:27:28,480
zero and it also has no tags

00:27:25,200 --> 00:27:30,320
so this is an untagged it's a magrita

00:27:28,480 --> 00:27:32,000
so we don't know if this is floor

00:27:30,320 --> 00:27:32,799
version one or floor version two or

00:27:32,000 --> 00:27:34,880
whatever

00:27:32,799 --> 00:27:36,720
now we have in the marinara this text

00:27:34,880 --> 00:27:40,399
and again short moment to

00:27:36,720 --> 00:27:42,240
catch it um now we have it

00:27:40,399 --> 00:27:44,080
and here we have the duff version and

00:27:42,240 --> 00:27:44,799
because i've already did this a few

00:27:44,080 --> 00:27:48,159
times

00:27:44,799 --> 00:27:50,880
we're already at version 12 now and

00:27:48,159 --> 00:27:53,360
you can also see the checksum is 12 and

00:27:50,880 --> 00:27:56,080
you can see the taxes def version

00:27:53,360 --> 00:27:58,720
and now if you want to invalidate it all

00:27:56,080 --> 00:28:01,440
we are doing is essentially we are

00:27:58,720 --> 00:28:03,360
clicking this and validate that version

00:28:01,440 --> 00:28:05,039
and then now we see that the def version

00:28:03,360 --> 00:28:07,360
has increased to 13

00:28:05,039 --> 00:28:08,240
internally in drupal in the cache text

00:28:07,360 --> 00:28:10,960
table

00:28:08,240 --> 00:28:12,080
so and we can do it again we click again

00:28:10,960 --> 00:28:14,559
and

00:28:12,080 --> 00:28:15,120
now it's invalidated to 14. now if we

00:28:14,559 --> 00:28:18,720
click the

00:28:15,120 --> 00:28:21,760
area again it's not cached

00:28:18,720 --> 00:28:22,960
so we get a very fresh pizza marinara

00:28:21,760 --> 00:28:26,080
again

00:28:22,960 --> 00:28:26,720
fresh from the pizza oven and if you

00:28:26,080 --> 00:28:29,919
click here

00:28:26,720 --> 00:28:32,960
now it says version 14

00:28:29,919 --> 00:28:34,159
that is essentially what is uh what is

00:28:32,960 --> 00:28:37,360
on the pizza

00:28:34,159 --> 00:28:39,840
and the checksum is 14 this matches so

00:28:37,360 --> 00:28:41,200
um the pizza is given out and again if i

00:28:39,840 --> 00:28:44,000
now click on it again

00:28:41,200 --> 00:28:45,360
we can play this endlessly invalidate

00:28:44,000 --> 00:28:47,360
deck version

00:28:45,360 --> 00:28:49,279
what happens is that the internal

00:28:47,360 --> 00:28:52,399
checksum is staying 14

00:28:49,279 --> 00:28:52,799
but this version is saying 15 it doesn't

00:28:52,399 --> 00:28:55,760
match

00:28:52,799 --> 00:28:56,320
so it isn't given out so this is cash

00:28:55,760 --> 00:28:58,640
tax

00:28:56,320 --> 00:28:59,360
the internals how it works internally in

00:28:58,640 --> 00:29:02,159
drupal

00:28:59,360 --> 00:29:03,039
so we can think of the tag of a version

00:29:02,159 --> 00:29:05,440
number

00:29:03,039 --> 00:29:06,559
really think of it like a version number

00:29:05,440 --> 00:29:08,399
um

00:29:06,559 --> 00:29:10,159
because that's what it is tagging is

00:29:08,399 --> 00:29:12,720
versioning your versioning your

00:29:10,159 --> 00:29:14,880
your things and the version is how often

00:29:12,720 --> 00:29:16,720
it has invalidated whenever you save an

00:29:14,880 --> 00:29:19,279
entity

00:29:16,720 --> 00:29:22,799
whenever you save node one in the cache

00:29:19,279 --> 00:29:26,720
text table magically the node column one

00:29:22,799 --> 00:29:28,880
thing will be increased one time

00:29:26,720 --> 00:29:30,960
and this is how you can think about it

00:29:28,880 --> 00:29:32,960
so there's several ways of tagging and

00:29:30,960 --> 00:29:34,000
we could use all of them you could use

00:29:32,960 --> 00:29:37,039
versions

00:29:34,000 --> 00:29:39,039
which or um or timestamps

00:29:37,039 --> 00:29:40,240
you could use names or you could use

00:29:39,039 --> 00:29:42,000
counters so

00:29:40,240 --> 00:29:43,520
nothing would stop you from creating a

00:29:42,000 --> 00:29:46,559
cash tax service in court

00:29:43,520 --> 00:29:48,399
that would use animals for things

00:29:46,559 --> 00:29:50,000
just a little bit problematic that

00:29:48,399 --> 00:29:51,120
probably at some point you would run out

00:29:50,000 --> 00:29:54,320
of animals but

00:29:51,120 --> 00:29:56,080
you could do it um

00:29:54,320 --> 00:29:57,679
so whenever node one is saved cache

00:29:56,080 --> 00:29:58,720
stick is invalidate we increase the

00:29:57,679 --> 00:30:01,039
version

00:29:58,720 --> 00:30:02,799
so the cache text should be written 43

00:30:01,039 --> 00:30:03,120
and again as we've seen on the example

00:30:02,799 --> 00:30:06,320
we

00:30:03,120 --> 00:30:09,679
compare it so once you've mastered this

00:30:06,320 --> 00:30:13,440
um this is so powerful to know and

00:30:09,679 --> 00:30:15,840
again um whenever you um

00:30:13,440 --> 00:30:17,760
you use something you use an entity you

00:30:15,840 --> 00:30:21,120
use a current username

00:30:17,760 --> 00:30:23,120
you use anything that has that's coming

00:30:21,120 --> 00:30:25,679
from a database that's not static

00:30:23,120 --> 00:30:27,360
that can change whenever you use

00:30:25,679 --> 00:30:29,760
anything that can change

00:30:27,360 --> 00:30:31,440
think about a cache tag that is when you

00:30:29,760 --> 00:30:34,799
need to use a hashtag

00:30:31,440 --> 00:30:37,360
there was a question like on the um

00:30:34,799 --> 00:30:37,919
in the previous session on variation

00:30:37,360 --> 00:30:40,240
like

00:30:37,919 --> 00:30:42,320
hey why do you also need to use the user

00:30:40,240 --> 00:30:43,440
cache tag because the user's name can

00:30:42,320 --> 00:30:46,240
change

00:30:43,440 --> 00:30:48,559
whenever you you use something think

00:30:46,240 --> 00:30:51,039
about the dependency it has

00:30:48,559 --> 00:30:53,440
that is absolutely crucial to

00:30:51,039 --> 00:30:55,200
understanding caching and drupal

00:30:53,440 --> 00:30:57,360
many things are done automatically we

00:30:55,200 --> 00:30:59,279
add entities a lot of the time

00:30:57,360 --> 00:31:02,159
um and you don't have to deal with that

00:30:59,279 --> 00:31:03,919
you just add it as a cachable dependency

00:31:02,159 --> 00:31:05,919
on your render array we can do that a

00:31:03,919 --> 00:31:08,960
little bit later um but

00:31:05,919 --> 00:31:12,000
um in essence if you use a user

00:31:08,960 --> 00:31:13,679
and you look at your output uh debug

00:31:12,000 --> 00:31:14,880
output and you don't see the user and

00:31:13,679 --> 00:31:16,960
the cache tags

00:31:14,880 --> 00:31:18,159
and then you have have a problem because

00:31:16,960 --> 00:31:19,840
if you change the user

00:31:18,159 --> 00:31:23,679
your site will still show the same

00:31:19,840 --> 00:31:27,279
content and that's not what you want

00:31:23,679 --> 00:31:29,760
so um also core is cheating

00:31:27,279 --> 00:31:32,720
because we are always using the same

00:31:29,760 --> 00:31:35,519
current version within the same request

00:31:32,720 --> 00:31:36,159
so in other words for example the waiter

00:31:35,519 --> 00:31:38,000
is just

00:31:36,159 --> 00:31:39,679
checking the list of deaf versions once

00:31:38,000 --> 00:31:41,600
a day and not every minute so i'm not

00:31:39,679 --> 00:31:44,799
every time he is checking like

00:31:41,600 --> 00:31:45,760
um these pizza in this what is the

00:31:44,799 --> 00:31:48,640
version right now

00:31:45,760 --> 00:31:51,279
no we don't do it we just do it once

00:31:48,640 --> 00:31:55,760
every request

00:31:51,279 --> 00:31:55,760
so how does our shop work with tagging

00:31:57,840 --> 00:32:01,919
the customer drives to a pizza shop he

00:31:59,840 --> 00:32:03,440
orders a frozen pizza margarita

00:32:01,919 --> 00:32:04,880
he gets a pizza from fridge at the

00:32:03,440 --> 00:32:06,000
counter and then he checks the

00:32:04,880 --> 00:32:08,960
expiration date

00:32:06,000 --> 00:32:10,080
and the tax then he marks the pizza as

00:32:08,960 --> 00:32:11,840
valid or invalid

00:32:10,080 --> 00:32:13,440
and if the pizza is not valid he gets

00:32:11,840 --> 00:32:15,679
one from center storage and

00:32:13,440 --> 00:32:17,679
seller replicates the lowest customer as

00:32:15,679 --> 00:32:19,519
usual so the only thing really has

00:32:17,679 --> 00:32:22,960
changed that he's also checking

00:32:19,519 --> 00:32:24,720
is the tech valid right now so we know

00:32:22,960 --> 00:32:27,360
how to get an item from the cash

00:32:24,720 --> 00:32:28,320
set an item into the cash so it's very

00:32:27,360 --> 00:32:30,159
important

00:32:28,320 --> 00:32:32,640
and there's three ways to expire the

00:32:30,159 --> 00:32:34,880
cash there's direct deletion

00:32:32,640 --> 00:32:35,760
or invalidation by name of item there's

00:32:34,880 --> 00:32:37,600
also

00:32:35,760 --> 00:32:39,840
not only a delete function but also an

00:32:37,600 --> 00:32:41,760
invalidate function for invalidating a

00:32:39,840 --> 00:32:44,000
cash

00:32:41,760 --> 00:32:45,200
um there's time based invalidation and

00:32:44,000 --> 00:32:48,080
again this can work for

00:32:45,200 --> 00:32:49,360
so many things so well so don't put that

00:32:48,080 --> 00:32:50,799
off yet

00:32:49,360 --> 00:32:53,120
and then there's tech based

00:32:50,799 --> 00:32:55,679
investigation with this is hashtags and

00:32:53,120 --> 00:32:58,399
really the most granular way of doing

00:32:55,679 --> 00:32:59,679
invalidation of doing exploration of

00:32:58,399 --> 00:33:03,360
things

00:32:59,679 --> 00:33:05,600
that you can do it and

00:33:03,360 --> 00:33:06,399
don't forget we create a new cache

00:33:05,600 --> 00:33:09,679
because

00:33:06,399 --> 00:33:12,320
we store this list of versions uh

00:33:09,679 --> 00:33:13,200
tags inside the request for the time of

00:33:12,320 --> 00:33:15,519
request

00:33:13,200 --> 00:33:17,600
we didn't solve the problem cash

00:33:15,519 --> 00:33:18,720
invalidation we just moved it somewhere

00:33:17,600 --> 00:33:20,960
else

00:33:18,720 --> 00:33:23,279
so many said like i have we solved cash

00:33:20,960 --> 00:33:25,919
invalidation now with cash tax

00:33:23,279 --> 00:33:27,600
that's unfortunately not really true so

00:33:25,919 --> 00:33:30,210
i

00:33:27,600 --> 00:33:33,599
let's see if there's some more questions

00:33:30,210 --> 00:33:33,599
[Music]

00:33:36,880 --> 00:33:43,039
those are all answered i think

00:33:40,000 --> 00:33:48,480
yep those are all answered so okay

00:33:43,039 --> 00:33:48,480
um then we continue i think

00:33:51,679 --> 00:33:57,919
so um what should you cash

00:33:54,960 --> 00:33:59,120
our story continues two years later um

00:33:57,919 --> 00:34:01,600
we've grown even more

00:33:59,120 --> 00:34:03,360
success is great we are ready for new

00:34:01,600 --> 00:34:06,960
products

00:34:03,360 --> 00:34:09,200
um so what we are going to offer now in

00:34:06,960 --> 00:34:11,200
our pizza shop 2.0 is we want to offer

00:34:09,200 --> 00:34:12,639
gluten-free dough for vegan mozzarella

00:34:11,200 --> 00:34:14,480
pizza spinach

00:34:12,639 --> 00:34:16,800
so we need new pizza variations a

00:34:14,480 --> 00:34:17,839
gluten-free offering a vegan margarita

00:34:16,800 --> 00:34:20,240
offering

00:34:17,839 --> 00:34:22,800
and the marinara has always been so

00:34:20,240 --> 00:34:23,679
really those are variations of the same

00:34:22,800 --> 00:34:27,280
pizza

00:34:23,679 --> 00:34:31,119
it's not a new pizza it's a variation

00:34:27,280 --> 00:34:34,480
um so um

00:34:31,119 --> 00:34:35,839
quick recap the customer comes and

00:34:34,480 --> 00:34:37,599
orders a pizza

00:34:35,839 --> 00:34:39,359
the waiter asks for the preferences

00:34:37,599 --> 00:34:42,240
reading routine free

00:34:39,359 --> 00:34:44,000
and he then checks the fridge for the

00:34:42,240 --> 00:34:46,079
wanted variation and then he gives the

00:34:44,000 --> 00:34:48,320
amount variation to the customer

00:34:46,079 --> 00:34:49,119
or produced it and then stores it in the

00:34:48,320 --> 00:34:52,159
fridge

00:34:49,119 --> 00:34:55,440
so essentially um we now ask the

00:34:52,159 --> 00:34:58,560
customer for the preferences

00:34:55,440 --> 00:35:01,119
so um again we could just

00:34:58,560 --> 00:35:02,960
add it to the name and the problem with

00:35:01,119 --> 00:35:04,400
adding it to the name is we end up with

00:35:02,960 --> 00:35:06,400
a lot of variations

00:35:04,400 --> 00:35:07,680
uh we can protein fiber we can gluten we

00:35:06,400 --> 00:35:10,240
can turn

00:35:07,680 --> 00:35:11,680
and then we also adds up with a marinara

00:35:10,240 --> 00:35:13,680
that's vegetarian

00:35:11,680 --> 00:35:15,680
and that doesn't really exist because

00:35:13,680 --> 00:35:19,839
now now has always been

00:35:15,680 --> 00:35:21,599
so um this really doesn't scale

00:35:19,839 --> 00:35:23,760
so what do you more would like is more

00:35:21,599 --> 00:35:26,240
like like a tree structure

00:35:23,760 --> 00:35:27,040
so the gluten-free gluten gluten-free

00:35:26,240 --> 00:35:29,200
gluten

00:35:27,040 --> 00:35:30,079
and that's another reason why this is

00:35:29,200 --> 00:35:32,240
not really working

00:35:30,079 --> 00:35:34,720
because the problem is if you now made

00:35:32,240 --> 00:35:36,560
your pizza margarita here with this long

00:35:34,720 --> 00:35:39,599
cache id

00:35:36,560 --> 00:35:42,480
but the page cache would sync this is

00:35:39,599 --> 00:35:45,680
always the same pizza magrita

00:35:42,480 --> 00:35:48,880
then how could it now essentially what

00:35:45,680 --> 00:35:51,760
your user's preference is um

00:35:48,880 --> 00:35:53,040
so um later cash would not know your

00:35:51,760 --> 00:35:55,680
variations and

00:35:53,040 --> 00:35:58,240
that's why this does not work it's what

00:35:55,680 --> 00:36:01,760
we tried in core first

00:35:58,240 --> 00:36:06,480
to be precise for blocks and um

00:36:01,760 --> 00:36:10,480
so yeah that's the thing

00:36:06,480 --> 00:36:12,480
so what we're using for variation is and

00:36:10,480 --> 00:36:14,400
we've learned that ourselves in in

00:36:12,480 --> 00:36:17,599
drupal 8 9 essentially

00:36:14,400 --> 00:36:19,920
is cache contacts we

00:36:17,599 --> 00:36:20,800
are using them for variation and they

00:36:19,920 --> 00:36:24,000
are computed

00:36:20,800 --> 00:36:25,200
on demand so this is key this is

00:36:24,000 --> 00:36:27,920
absolutely key

00:36:25,200 --> 00:36:29,440
you can always compute cash context on

00:36:27,920 --> 00:36:32,240
demand you don't need to

00:36:29,440 --> 00:36:34,160
execute the whole page till coming to

00:36:32,240 --> 00:36:36,240
this decision of what pizza

00:36:34,160 --> 00:36:37,359
marina what's the user once does he

00:36:36,240 --> 00:36:39,839
wants a wing

00:36:37,359 --> 00:36:41,920
or does he wants a vegetarian pizza does

00:36:39,839 --> 00:36:44,320
he wants gluten free or not

00:36:41,920 --> 00:36:45,280
and we can always compute that on demand

00:36:44,320 --> 00:36:48,079
we could have a

00:36:45,280 --> 00:36:48,960
blank page that does nothing except for

00:36:48,079 --> 00:36:51,119
us

00:36:48,960 --> 00:36:52,000
showing what the preference of the user

00:36:51,119 --> 00:36:55,520
is so

00:36:52,000 --> 00:36:59,599
it depends on nothing besides

00:36:55,520 --> 00:37:02,720
what is inputted into it

00:36:59,599 --> 00:37:04,960
um and then it internally adds the cache

00:37:02,720 --> 00:37:08,079
context values to the cache id name

00:37:04,960 --> 00:37:09,680
so this doing essentially exactly what

00:37:08,079 --> 00:37:12,320
you were trying to do

00:37:09,680 --> 00:37:13,599
manually and they do it automatically so

00:37:12,320 --> 00:37:16,800
it says sweden yes

00:37:13,599 --> 00:37:19,599
no gluten for yes no and um

00:37:16,800 --> 00:37:20,640
so our name essentially changes but

00:37:19,599 --> 00:37:24,320
because we give

00:37:20,640 --> 00:37:27,040
core the option to do it um we can do

00:37:24,320 --> 00:37:28,640
lots of interesting things so whenever

00:37:27,040 --> 00:37:30,800
you think of variation

00:37:28,640 --> 00:37:32,880
think of a cache context don't do it

00:37:30,800 --> 00:37:35,839
yourself

00:37:32,880 --> 00:37:37,599
because especially if it depends on for

00:37:35,839 --> 00:37:39,599
example the user's preference

00:37:37,599 --> 00:37:40,960
because if you do it yourself you'll

00:37:39,599 --> 00:37:43,520
have huge problems

00:37:40,960 --> 00:37:45,920
in having this page still be correctly

00:37:43,520 --> 00:37:45,920
cached

00:37:46,079 --> 00:37:49,200
and again we have our pizza marinara and

00:37:48,000 --> 00:37:51,280
here we have only the

00:37:49,200 --> 00:37:53,920
gluten-free cash context so it's only

00:37:51,280 --> 00:37:57,839
gluten-free yes now

00:37:53,920 --> 00:38:00,079
so intelligent variation is

00:37:57,839 --> 00:38:01,839
essentially the customer orders the

00:38:00,079 --> 00:38:04,079
frozen pizza magrita

00:38:01,839 --> 00:38:06,480
and then he looks at the first looks at

00:38:04,079 --> 00:38:08,560
the pizza regulations for the magritta

00:38:06,480 --> 00:38:12,320
and then he asks the customer for his

00:38:08,560 --> 00:38:15,520
preferences being and or routine free

00:38:12,320 --> 00:38:18,320
so um it essentially narrows

00:38:15,520 --> 00:38:19,119
first that this margarita has those two

00:38:18,320 --> 00:38:22,160
possible

00:38:19,119 --> 00:38:23,280
variations and if it would be looking at

00:38:22,160 --> 00:38:25,599
the marinara

00:38:23,280 --> 00:38:27,520
he would be saying hey this only has a

00:38:25,599 --> 00:38:28,000
vegan cash context so he doesn't even

00:38:27,520 --> 00:38:30,640
ask

00:38:28,000 --> 00:38:32,000
the customer for hey do you want to want

00:38:30,640 --> 00:38:33,680
a vegan

00:38:32,000 --> 00:38:35,839
but only the question if it's routine

00:38:33,680 --> 00:38:37,839
free

00:38:35,839 --> 00:38:39,760
one of the problem with cash context is

00:38:37,839 --> 00:38:40,640
right now still they only work with

00:38:39,760 --> 00:38:44,320
vendor rates

00:38:40,640 --> 00:38:44,880
um and it took us quite some time to

00:38:44,320 --> 00:38:48,160
understand

00:38:44,880 --> 00:38:51,359
depth on how this whole structure and

00:38:48,160 --> 00:38:53,359
two-level caching could work and here we

00:38:51,359 --> 00:38:53,760
could provided a service in the future

00:38:53,359 --> 00:38:56,800
this

00:38:53,760 --> 00:38:58,720
core issue um if anyone wants to

00:38:56,800 --> 00:39:00,000
take a step at it and there's also a

00:38:58,720 --> 00:39:02,240
drupal or project

00:39:00,000 --> 00:39:04,240
um that can be used for decoupled

00:39:02,240 --> 00:39:07,520
variations

00:39:04,240 --> 00:39:11,359
but essentially um

00:39:07,520 --> 00:39:14,160
it has no drupal 9 release yet so

00:39:11,359 --> 00:39:14,880
might not be the best choice right now

00:39:14,160 --> 00:39:17,839
for

00:39:14,880 --> 00:39:18,400
this so um maybe this course uses a

00:39:17,839 --> 00:39:20,800
better one

00:39:18,400 --> 00:39:21,520
it will be updated eventually i'm sure

00:39:20,800 --> 00:39:23,680
um

00:39:21,520 --> 00:39:24,880
but yeah this is essentially the two

00:39:23,680 --> 00:39:28,640
parts for

00:39:24,880 --> 00:39:30,960
most use cases a variation cache works

00:39:28,640 --> 00:39:32,560
the drupal core way with render arrays

00:39:30,960 --> 00:39:35,040
was good enough

00:39:32,560 --> 00:39:36,880
it was even good enough for views uh

00:39:35,040 --> 00:39:40,160
internally to do it

00:39:36,880 --> 00:39:42,880
so um probably anything so

00:39:40,160 --> 00:39:43,200
um now the whole time we've been using

00:39:42,880 --> 00:39:46,960
the

00:39:43,200 --> 00:39:50,560
caching layer kind of deck directly

00:39:46,960 --> 00:39:55,200
and but now we want to essentially

00:39:50,560 --> 00:39:55,200
use a render array instead and

00:39:55,280 --> 00:39:59,119
we can take this structure that we have

00:39:57,200 --> 00:40:01,520
here and convert it into render area

00:39:59,119 --> 00:40:03,280
very simple here because that's way too

00:40:01,520 --> 00:40:06,720
quick and i don't want to go

00:40:03,280 --> 00:40:10,160
uh back and forth here it's here's

00:40:06,720 --> 00:40:13,280
here it is um from here to left

00:40:10,160 --> 00:40:17,119
so um essentially

00:40:13,280 --> 00:40:18,079
um the um the first part sets up the

00:40:17,119 --> 00:40:21,200
cash get and

00:40:18,079 --> 00:40:24,720
cash set calls um

00:40:21,200 --> 00:40:25,119
and we told we dupl to store the item in

00:40:24,720 --> 00:40:28,720
this

00:40:25,119 --> 00:40:30,960
cash bin so again this is this

00:40:28,720 --> 00:40:30,960
then

00:40:33,200 --> 00:40:36,240
we set up the cash keys again pizza

00:40:35,440 --> 00:40:39,119
marinara

00:40:36,240 --> 00:40:39,760
put some right now cache id and drupal

00:40:39,119 --> 00:40:42,800
essentially

00:40:39,760 --> 00:40:43,200
converts that into that anyway the max

00:40:42,800 --> 00:40:45,680
age

00:40:43,200 --> 00:40:46,960
is new key which is essentially our time

00:40:45,680 --> 00:40:49,280
to live

00:40:46,960 --> 00:40:51,200
the same as we have here and then we

00:40:49,280 --> 00:40:54,800
have the tags which are the cache text

00:40:51,200 --> 00:40:57,040
so the same is here and now the

00:40:54,800 --> 00:40:59,359
most difficult about that part come is

00:40:57,040 --> 00:41:00,000
we have a pre-render function and that's

00:40:59,359 --> 00:41:03,119
it

00:41:00,000 --> 00:41:05,760
that's essentially a cache miss function

00:41:03,119 --> 00:41:06,640
so drupal does when it sees this array

00:41:05,760 --> 00:41:09,920
it essentially

00:41:06,640 --> 00:41:12,240
checks is there a pizza marinara item in

00:41:09,920 --> 00:41:13,040
frozen pizzas and if there is directly

00:41:12,240 --> 00:41:16,640
stop

00:41:13,040 --> 00:41:17,359
return it and if it's still valid return

00:41:16,640 --> 00:41:19,839
it

00:41:17,359 --> 00:41:21,200
and you're good to go then this renderer

00:41:19,839 --> 00:41:24,079
is directly returned

00:41:21,200 --> 00:41:25,680
and nothing more to do but if we have

00:41:24,079 --> 00:41:29,839
the pre-render here

00:41:25,680 --> 00:41:31,520
um then we are creating the the pizza

00:41:29,839 --> 00:41:34,480
here

00:41:31,520 --> 00:41:36,079
and we're using the pizza maker and we

00:41:34,480 --> 00:41:39,280
have this

00:41:36,079 --> 00:41:42,560
function which is a cache miss function

00:41:39,280 --> 00:41:44,640
so in this cache miss function

00:41:42,560 --> 00:41:48,800
essentially

00:41:44,640 --> 00:41:49,680
allows us to create our civilized pizza

00:41:48,800 --> 00:41:52,160
here

00:41:49,680 --> 00:41:53,200
so here we create our our pizza element

00:41:52,160 --> 00:41:55,520
which

00:41:53,200 --> 00:41:57,520
needs to be it needs to be convertible

00:41:55,520 --> 00:42:00,880
to a string which it says

00:41:57,520 --> 00:42:04,319
so um and

00:42:00,880 --> 00:42:06,800
the next time we call it um

00:42:04,319 --> 00:42:07,760
on a cache miss then this pre-render is

00:42:06,800 --> 00:42:11,280
called

00:42:07,760 --> 00:42:14,800
it creates our elements pizza and so um

00:42:11,280 --> 00:42:16,960
and this what you see here this what is

00:42:14,800 --> 00:42:18,400
returned here this is automatically

00:42:16,960 --> 00:42:21,440
stored in the cache so

00:42:18,400 --> 00:42:23,839
after this whole build has finished and

00:42:21,440 --> 00:42:28,839
it's ready to be rendered on the page

00:42:23,839 --> 00:42:31,760
uh then essentially we are putting the

00:42:28,839 --> 00:42:35,599
um

00:42:31,760 --> 00:42:45,839
the pizza here into this bin

00:42:35,599 --> 00:42:45,839
with those keys

00:42:51,040 --> 00:42:59,839
can all breeze for a moment just

00:42:55,040 --> 00:42:59,839
can all meditate on that format

00:43:04,960 --> 00:43:08,400
because this is really important

00:43:08,800 --> 00:43:12,560
because from now on we're just gonna go

00:43:11,040 --> 00:43:15,119
further with seminary

00:43:12,560 --> 00:43:15,839
and this is also how most often you will

00:43:15,119 --> 00:43:18,880
be building

00:43:15,839 --> 00:43:22,640
things within drupal right now so um

00:43:18,880 --> 00:43:22,640
this is what we're gonna using for now

00:43:24,079 --> 00:43:28,160
okay and now it's very simple to just

00:43:26,079 --> 00:43:30,319
add cache context we just add context

00:43:28,160 --> 00:43:34,000
user.region use it routine free

00:43:30,319 --> 00:43:36,880
and there we go now this pizza

00:43:34,000 --> 00:43:38,640
is varied by if the user's preferences

00:43:36,880 --> 00:43:41,280
are vegan or grousing free

00:43:38,640 --> 00:43:43,119
and gluten free the problem is now we've

00:43:41,280 --> 00:43:46,800
done exactly what we didn't want to do

00:43:43,119 --> 00:43:48,960
we created a variation for a vegetarian

00:43:46,800 --> 00:43:52,000
pizza my nara

00:43:48,960 --> 00:43:52,400
so to avoid that um oh yeah and we can

00:43:52,000 --> 00:43:55,599
also

00:43:52,400 --> 00:43:56,960
add the cash context later so um

00:43:55,599 --> 00:43:59,200
it's really a different way to create

00:43:56,960 --> 00:44:01,359
the same memory

00:43:59,200 --> 00:44:03,280
um so now what we're gonna do is we can

00:44:01,359 --> 00:44:05,440
add the cache context also

00:44:03,280 --> 00:44:08,160
and that's important here we're adding

00:44:05,440 --> 00:44:10,640
it before

00:44:08,160 --> 00:44:11,280
creating this build but now we can also

00:44:10,640 --> 00:44:13,839
call

00:44:11,280 --> 00:44:14,640
them do it within our pre-render

00:44:13,839 --> 00:44:17,760
function

00:44:14,640 --> 00:44:20,319
so let's say it wasn't obvious by the

00:44:17,760 --> 00:44:20,880
pizza name of what variations etc are

00:44:20,319 --> 00:44:24,480
there

00:44:20,880 --> 00:44:26,640
you can always edit after the fact so

00:44:24,480 --> 00:44:28,800
we'll now there will always be a

00:44:26,640 --> 00:44:31,119
variation of if it's gluten free or not

00:44:28,800 --> 00:44:32,880
because it just depends on that

00:44:31,119 --> 00:44:34,800
and i mean now for the pizza margarita

00:44:32,880 --> 00:44:38,640
we also have this veg

00:44:34,800 --> 00:44:41,680
vegan option so um this is how

00:44:38,640 --> 00:44:45,839
the pizza name can be can be like that

00:44:41,680 --> 00:44:49,599
so um and um

00:44:45,839 --> 00:44:51,920
that way um we have our cake now

00:44:49,599 --> 00:44:52,640
or our pizza now essentially and can eat

00:44:51,920 --> 00:44:56,160
it

00:44:52,640 --> 00:44:56,880
um because we have the gluten-free and

00:44:56,160 --> 00:44:59,280
it always

00:44:56,880 --> 00:45:00,480
and the region option only if it's a

00:44:59,280 --> 00:45:02,400
margarita

00:45:00,480 --> 00:45:04,079
for obvious reasons because it only

00:45:02,400 --> 00:45:04,960
depends on the pizza name we could also

00:45:04,079 --> 00:45:09,520
be doing this

00:45:04,960 --> 00:45:13,839
outside this function however

00:45:09,520 --> 00:45:15,920
we don't want to we don't want to

00:45:13,839 --> 00:45:17,680
do this because i really want to show

00:45:15,920 --> 00:45:20,240
you that

00:45:17,680 --> 00:45:22,319
regardless how deep you are within the

00:45:20,240 --> 00:45:24,560
caching system somewhere

00:45:22,319 --> 00:45:26,800
regardless of if it's the face of the

00:45:24,560 --> 00:45:29,359
moon or whatever you need to vary on

00:45:26,800 --> 00:45:31,359
you just can create the cache context

00:45:29,359 --> 00:45:33,359
while you are creating those things

00:45:31,359 --> 00:45:34,800
and that makes it much simpler at

00:45:33,359 --> 00:45:35,599
certain points when you're deep

00:45:34,800 --> 00:45:38,800
somewhere in

00:45:35,599 --> 00:45:41,200
to just add it and it will work

00:45:38,800 --> 00:45:42,880
and that's the nice thing about it and

00:45:41,200 --> 00:45:44,560
this is how you create a cache context

00:45:42,880 --> 00:45:46,880
essentially you just

00:45:44,560 --> 00:45:48,560
extend the user cache context because we

00:45:46,880 --> 00:45:51,920
depend on the user

00:45:48,560 --> 00:45:55,040
we getting the label into beating user

00:45:51,920 --> 00:45:58,079
and then we just check um of the if the

00:45:55,040 --> 00:46:01,119
value of the field region from the user

00:45:58,079 --> 00:46:03,920
is yes or no and that's it

00:46:01,119 --> 00:46:04,319
this is our cache context right here so

00:46:03,920 --> 00:46:07,680
um

00:46:04,319 --> 00:46:10,720
it's very simple to just say hey um

00:46:07,680 --> 00:46:14,800
there's the wing user um and

00:46:10,720 --> 00:46:17,280
then we just registered as service

00:46:14,800 --> 00:46:19,400
so we add and this name is very

00:46:17,280 --> 00:46:21,920
important

00:46:19,400 --> 00:46:24,079
cachecontext.user.region so this is our

00:46:21,920 --> 00:46:26,640
name for the cache context

00:46:24,079 --> 00:46:27,920
and it's also important that it is part

00:46:26,640 --> 00:46:29,200
of user

00:46:27,920 --> 00:46:30,960
because we have a cache context

00:46:29,200 --> 00:46:32,560
hierarchy so whenever you do something

00:46:30,960 --> 00:46:35,599
that depends on the user

00:46:32,560 --> 00:46:36,880
it's important to use this user naming

00:46:35,599 --> 00:46:40,720
scheme

00:46:36,880 --> 00:46:40,720
for something that comes way late

00:46:40,880 --> 00:46:44,079
then you just add the tag name cache

00:46:42,800 --> 00:46:46,640
context and that's it

00:46:44,079 --> 00:46:48,240
this is how we create our cache context

00:46:46,640 --> 00:46:51,680
in our cache edu

00:46:48,240 --> 00:46:57,839
service html or pizza

00:46:51,680 --> 00:46:57,839
works great perfect

00:46:59,200 --> 00:47:06,079
so a little bit of problem

00:47:02,640 --> 00:47:10,079
um because we have so many variations

00:47:06,079 --> 00:47:11,280
but before we go into that cliffhanger

00:47:10,079 --> 00:47:14,560
we're going to check if there's more

00:47:11,280 --> 00:47:16,800
questions oh yeah

00:47:14,560 --> 00:47:16,800
um

00:47:20,079 --> 00:47:23,520
we are shown the label of the cash

00:47:21,680 --> 00:47:26,079
context it's shown

00:47:23,520 --> 00:47:27,119
nowhere right now as far as i know and

00:47:26,079 --> 00:47:29,599
this was made

00:47:27,119 --> 00:47:30,960
for being able to essentially use cache

00:47:29,599 --> 00:47:33,040
context with any

00:47:30,960 --> 00:47:34,160
graphical user interface so for example

00:47:33,040 --> 00:47:36,880
that in theory

00:47:34,160 --> 00:47:38,079
you could have a blog and it could do

00:47:36,880 --> 00:47:42,000
something and you could just

00:47:38,079 --> 00:47:42,000
select the cache context um

00:47:42,400 --> 00:47:47,839
when should i use a tag or cache context

00:47:44,559 --> 00:47:47,839
i'm not sure i get the difference

00:47:48,559 --> 00:47:55,839
that is uh the point um attack

00:47:52,160 --> 00:47:59,440
is for expiration a cash context is for

00:47:55,839 --> 00:48:02,319
variation again think of our pizza

00:47:59,440 --> 00:48:03,040
pizza things um attack is essentially

00:48:02,319 --> 00:48:06,319
saying

00:48:03,040 --> 00:48:06,800
this expires at this date or check this

00:48:06,319 --> 00:48:09,359
version

00:48:06,800 --> 00:48:10,480
is still current when you're shipping

00:48:09,359 --> 00:48:12,559
out the product

00:48:10,480 --> 00:48:13,599
think of keyboards you have lots of

00:48:12,559 --> 00:48:18,720
keyboards

00:48:13,599 --> 00:48:22,480
and you have lots of boxes and um

00:48:18,720 --> 00:48:25,040
and um genie don't

00:48:22,480 --> 00:48:26,960
don't uh answer the questions till i'm

00:48:25,040 --> 00:48:29,680
finished please

00:48:26,960 --> 00:48:30,800
um so that audience can keep the

00:48:29,680 --> 00:48:33,920
question in mind

00:48:30,800 --> 00:48:34,720
um so you have lots of boxes in your

00:48:33,920 --> 00:48:38,640
warehouse

00:48:34,720 --> 00:48:40,800
in all of those boxes um essentially

00:48:38,640 --> 00:48:42,240
for the products and you have the old

00:48:40,800 --> 00:48:44,559
product variation you have the new

00:48:42,240 --> 00:48:48,160
product variation and you have a label

00:48:44,559 --> 00:48:50,160
on them and this label is your cache tag

00:48:48,160 --> 00:48:52,000
and that's so important because this

00:48:50,160 --> 00:48:54,960
this label cash tag is

00:48:52,000 --> 00:48:56,319
is essentially uh giving you the the

00:48:54,960 --> 00:48:59,680
possibility of

00:48:56,319 --> 00:49:01,520
um of knowing

00:48:59,680 --> 00:49:02,960
is this the product we still want to

00:49:01,520 --> 00:49:05,760
ship out

00:49:02,960 --> 00:49:07,040
or think of a news article you've you've

00:49:05,760 --> 00:49:10,000
created some news article

00:49:07,040 --> 00:49:13,200
now you've updated it and you want to

00:49:10,000 --> 00:49:13,200
give out this news

00:49:13,359 --> 00:49:17,680
and you want to want to update it so you

00:49:15,359 --> 00:49:20,240
need to have some way of checking

00:49:17,680 --> 00:49:21,680
has this changed so the cache tag is

00:49:20,240 --> 00:49:24,079
always the question

00:49:21,680 --> 00:49:25,040
has this changed drupal needs to answer

00:49:24,079 --> 00:49:27,599
this question

00:49:25,040 --> 00:49:30,400
and cache takes out a way for it a cache

00:49:27,599 --> 00:49:32,800
context is a true variation for it

00:49:30,400 --> 00:49:34,400
for example you want to because you're

00:49:32,800 --> 00:49:35,839
very esoteric or whatever

00:49:34,400 --> 00:49:37,839
you want to give to user a different

00:49:35,839 --> 00:49:39,280
news article every time the face of the

00:49:37,839 --> 00:49:42,800
moon changes

00:49:39,280 --> 00:49:43,280
so um or if they have a preference of

00:49:42,800 --> 00:49:46,319
having

00:49:43,280 --> 00:49:48,960
uk english so you have this article in

00:49:46,319 --> 00:49:50,640
two different variations

00:49:48,960 --> 00:49:52,720
and you're giving out the variation to

00:49:50,640 --> 00:49:54,319
the user if they prefer

00:49:52,720 --> 00:49:56,400
british english and you're giving the

00:49:54,319 --> 00:49:58,800
american variation if they prefer

00:49:56,400 --> 00:50:01,359
american english so you use the cache

00:49:58,800 --> 00:50:04,480
context whenever you create a variation

00:50:01,359 --> 00:50:05,359
of the same thing or you have a blog

00:50:04,480 --> 00:50:10,079
that says hi

00:50:05,359 --> 00:50:13,440
user hi fabian hi jose hi alexander

00:50:10,079 --> 00:50:17,440
and um in that way

00:50:13,440 --> 00:50:20,640
um you can essentially um

00:50:17,440 --> 00:50:23,760
in that way you can essentially um say

00:50:20,640 --> 00:50:26,800
um um

00:50:23,760 --> 00:50:29,359
this block should

00:50:26,800 --> 00:50:30,480
change when fabian changed his name

00:50:29,359 --> 00:50:33,280
inside

00:50:30,480 --> 00:50:33,839
but it should always be different per

00:50:33,280 --> 00:50:35,599
user

00:50:33,839 --> 00:50:37,040
it's like the old if you are familiar

00:50:35,599 --> 00:50:39,440
with drupal 7

00:50:37,040 --> 00:50:40,400
cash per page cash per roll cash per

00:50:39,440 --> 00:50:42,800
user

00:50:40,400 --> 00:50:45,119
and but cash contracts put that on a way

00:50:42,800 --> 00:50:46,079
more granular level and are way more

00:50:45,119 --> 00:50:48,800
powerful

00:50:46,079 --> 00:50:50,400
so um that a little bit to the point i'm

00:50:48,800 --> 00:50:52,000
i'm writing a little bit on it because

00:50:50,400 --> 00:50:53,119
it's so important to understand it's

00:50:52,000 --> 00:50:56,240
different

00:50:53,119 --> 00:50:59,280
cache tag expiration cache context

00:50:56,240 --> 00:51:01,599
variation now it started

00:50:59,280 --> 00:51:02,800
uh variation cache i i've talked a

00:51:01,599 --> 00:51:04,800
little bit about it

00:51:02,800 --> 00:51:06,800
variation cache essentially allows you

00:51:04,800 --> 00:51:09,920
to directly

00:51:06,800 --> 00:51:10,880
use cache context with this nice set and

00:51:09,920 --> 00:51:12,800
guest

00:51:10,880 --> 00:51:14,559
api i've already shown it on a slide

00:51:12,800 --> 00:51:15,359
before you can find it in the slides as

00:51:14,559 --> 00:51:19,200
well

00:51:15,359 --> 00:51:20,319
so i know it's and it hadn't the drupal

00:51:19,200 --> 00:51:22,480
9 port

00:51:20,319 --> 00:51:24,800
and a sense it allows you to use cache

00:51:22,480 --> 00:51:27,680
context with other and arrays

00:51:24,800 --> 00:51:27,680
with the same power

00:51:28,000 --> 00:51:35,839
oh great so uh one of the problems of

00:51:32,240 --> 00:51:37,440
um so many way variations is

00:51:35,839 --> 00:51:40,000
that the fridge can be full at some

00:51:37,440 --> 00:51:40,640
point because we have so many variations

00:51:40,000 --> 00:51:44,079
because now

00:51:40,640 --> 00:51:46,480
every pizza is not not just um

00:51:44,079 --> 00:51:47,359
one pizza margarita and one marinara

00:51:46,480 --> 00:51:49,920
that's just two

00:51:47,359 --> 00:51:51,520
that's easy but now we have two pizza

00:51:49,920 --> 00:51:53,680
margarita and one

00:51:51,520 --> 00:51:55,280
uh and now we have even four pizza

00:51:53,680 --> 00:51:57,119
mcgreet and we have two pizzas

00:51:55,280 --> 00:51:58,559
now already six months now we had a

00:51:57,119 --> 00:52:01,599
pizza spinach

00:51:58,559 --> 00:52:06,160
and just brought way less

00:52:01,599 --> 00:52:08,960
not sure no one likes spinach apparently

00:52:06,160 --> 00:52:09,599
some do some don't um at least in our

00:52:08,960 --> 00:52:13,920
pizzas

00:52:09,599 --> 00:52:15,839
at pizza shop it's not bought much so

00:52:13,920 --> 00:52:17,440
this custom pizza is essentially

00:52:15,839 --> 00:52:20,160
uncashable

00:52:17,440 --> 00:52:20,160
and um

00:52:23,920 --> 00:52:28,160
we still produce it but we won't have it

00:52:26,160 --> 00:52:31,200
directly on the fetch so you'll have to

00:52:28,160 --> 00:52:33,839
wait for a short moment and uh

00:52:31,200 --> 00:52:35,119
my friend moose who's also here by now

00:52:33,839 --> 00:52:37,359
it's hey most great

00:52:35,119 --> 00:52:39,280
to have you he created a very nice

00:52:37,359 --> 00:52:42,240
project called cash metrics

00:52:39,280 --> 00:52:43,520
now you can see essentially um how your

00:52:42,240 --> 00:52:47,280
cached ratio is

00:52:43,520 --> 00:52:48,240
and if you have like margarita maguirita

00:52:47,280 --> 00:52:50,880
mango guitar

00:52:48,240 --> 00:52:51,839
and marinara marinara marinara but

00:52:50,880 --> 00:52:53,920
spinach

00:52:51,839 --> 00:52:56,400
less so then might be a good idea to

00:52:53,920 --> 00:52:59,520
just say this is uncashable

00:52:56,400 --> 00:53:01,920
and that's a good way to to solve that

00:52:59,520 --> 00:53:03,760
so we disable the cache and the easiest

00:53:01,920 --> 00:53:05,440
is to not catch it at all

00:53:03,760 --> 00:53:07,440
and that's very simple to do especially

00:53:05,440 --> 00:53:10,640
with when arrays we just put the can

00:53:07,440 --> 00:53:12,000
max h20 so you're building a page you do

00:53:10,640 --> 00:53:13,680
something and suddenly you have

00:53:12,000 --> 00:53:15,200
something that you never want to cache

00:53:13,680 --> 00:53:17,760
you always want to rebuild

00:53:15,200 --> 00:53:18,240
because there's way too many variations

00:53:17,760 --> 00:53:21,040
and

00:53:18,240 --> 00:53:21,520
um or you have uncashable object and you

00:53:21,040 --> 00:53:25,760
say

00:53:21,520 --> 00:53:27,920
set cache makes h0 um so

00:53:25,760 --> 00:53:28,800
for a full example of that is we have a

00:53:27,920 --> 00:53:31,920
pizza name

00:53:28,800 --> 00:53:34,079
um and um

00:53:31,920 --> 00:53:35,599
and if we have a spinach then we make

00:53:34,079 --> 00:53:38,400
the mix h0

00:53:35,599 --> 00:53:40,880
and if all through um we do it the same

00:53:38,400 --> 00:53:42,400
or even we could have custom pizza we

00:53:40,880 --> 00:53:45,280
make a custom pizza

00:53:42,400 --> 00:53:46,640
out of the ingredients but the mix age

00:53:45,280 --> 00:53:50,800
is again zero

00:53:46,640 --> 00:53:53,359
so and then we early return here

00:53:50,800 --> 00:53:54,079
so um there's another possibility to

00:53:53,359 --> 00:53:57,440
essentially

00:53:54,079 --> 00:54:00,319
create the pizza and

00:53:57,440 --> 00:54:02,480
and then we make a custom picture and

00:54:00,319 --> 00:54:05,440
again we set mix h0

00:54:02,480 --> 00:54:05,440
in both cases

00:54:07,680 --> 00:54:12,400
the other chart is

00:54:09,460 --> 00:54:14,720
[Music]

00:54:12,400 --> 00:54:15,760
we could we can always set the cache

00:54:14,720 --> 00:54:18,640
mexico

00:54:15,760 --> 00:54:20,880
after a function has been rendered and

00:54:18,640 --> 00:54:24,480
there's a little bit of pitfall here

00:54:20,880 --> 00:54:27,359
if you started with cashing the pizza

00:54:24,480 --> 00:54:28,800
spinach and now you suddenly set max h

00:54:27,359 --> 00:54:30,960
to zero

00:54:28,800 --> 00:54:32,000
drupal still happily will retrieve it

00:54:30,960 --> 00:54:35,119
from the cash so

00:54:32,000 --> 00:54:37,119
whenever you add something like that

00:54:35,119 --> 00:54:38,799
just clear your cash after making such

00:54:37,119 --> 00:54:40,480
change during local development

00:54:38,799 --> 00:54:41,920
that happened to me more often than i'd

00:54:40,480 --> 00:54:43,920
like to admit so i'm really giving you

00:54:41,920 --> 00:54:47,599
this hint of of doing that

00:54:43,920 --> 00:54:50,079
um so and there's several times to do it

00:54:47,599 --> 00:54:52,480
with drupal with rush thanks much for

00:54:50,079 --> 00:54:54,319
adding that

00:54:52,480 --> 00:54:56,400
very help about that or you can call

00:54:54,319 --> 00:54:58,720
google called cash and validate tags the

00:54:56,400 --> 00:55:00,880
rendered cash tag which essentially

00:54:58,720 --> 00:55:02,559
is always added to everything that's

00:55:00,880 --> 00:55:07,839
rendered on the page so

00:55:02,559 --> 00:55:07,839
this is a get out of jail free card

00:55:11,920 --> 00:55:16,880
and so

00:55:15,119 --> 00:55:19,200
there's also another possibility and

00:55:16,880 --> 00:55:20,240
that will always work and don't need you

00:55:19,200 --> 00:55:23,599
to clear the cache

00:55:20,240 --> 00:55:24,799
you can always disable the cache before

00:55:23,599 --> 00:55:26,720
it was retrieved

00:55:24,799 --> 00:55:28,400
so we could essentially say if the pizza

00:55:26,720 --> 00:55:31,200
name is customer spinachy

00:55:28,400 --> 00:55:32,720
then we make the cache makes h0 and as

00:55:31,200 --> 00:55:34,079
you can see this is not in the

00:55:32,720 --> 00:55:37,119
pre-render in our cache

00:55:34,079 --> 00:55:39,359
miss function and this is essentially

00:55:37,119 --> 00:55:41,359
just here in this in this array and now

00:55:39,359 --> 00:55:42,240
we've put the pizza name as a property

00:55:41,359 --> 00:55:44,240
on this

00:55:42,240 --> 00:55:46,000
and now the pre-render is essentially

00:55:44,240 --> 00:55:47,440
looking at the property and making the

00:55:46,000 --> 00:55:49,440
pits out of that

00:55:47,440 --> 00:55:51,200
but here we are essentially saying to

00:55:49,440 --> 00:55:54,079
drupal whenever you encounter this

00:55:51,200 --> 00:55:54,880
render array drupal sees max h0 doesn't

00:55:54,079 --> 00:55:58,640
cache it

00:55:54,880 --> 00:56:00,799
directly so whenever you know before

00:55:58,640 --> 00:56:02,480
creating things here in the pizza et

00:56:00,799 --> 00:56:06,079
cetera that something

00:56:02,480 --> 00:56:08,079
is never cacheable just put it

00:56:06,079 --> 00:56:09,119
not in the pre-render like in the cash

00:56:08,079 --> 00:56:11,520
mist function but

00:56:09,119 --> 00:56:14,160
put it directly where the build is so

00:56:11,520 --> 00:56:16,160
much simpler so much easier for that

00:56:14,160 --> 00:56:20,880
to do or if you're writing a blog put

00:56:16,160 --> 00:56:24,240
them get max h function to return zero

00:56:20,880 --> 00:56:25,920
um yeah that's what i said

00:56:24,240 --> 00:56:27,680
it's always more efficient to disable

00:56:25,920 --> 00:56:28,640
the cache before it's retrieved from the

00:56:27,680 --> 00:56:30,640
cache

00:56:28,640 --> 00:56:32,960
and that's similar to a request based

00:56:30,640 --> 00:56:35,040
cash policy so for page cash you have

00:56:32,960 --> 00:56:37,200
both request based cash policies so

00:56:35,040 --> 00:56:40,079
essentially request comes in you say

00:56:37,200 --> 00:56:41,680
is this cashable yes or no or you have a

00:56:40,079 --> 00:56:43,760
response based cash policy

00:56:41,680 --> 00:56:45,920
oh this wasn't cashable so let's not

00:56:43,760 --> 00:56:48,960
store it but we still tried to retrieve

00:56:45,920 --> 00:56:48,960
it from the cache before

00:56:52,720 --> 00:56:59,839
so um let's look

00:56:55,760 --> 00:56:59,839
quickly um

00:57:00,319 --> 00:57:05,040
yes it's definitely possible i still

00:57:02,000 --> 00:57:07,200
have to commit some presentation code

00:57:05,040 --> 00:57:07,200
i

00:57:11,280 --> 00:57:15,119
wanted to do a little bit too much with

00:57:13,040 --> 00:57:17,839
the first example because it was so

00:57:15,119 --> 00:57:19,680
important so i still have to um finish

00:57:17,839 --> 00:57:23,680
the cache video a little bit

00:57:19,680 --> 00:57:27,040
um so that's um still needs to be done

00:57:23,680 --> 00:57:29,200
but um yeah we can also

00:57:27,040 --> 00:57:30,799
do something else live but i think we're

00:57:29,200 --> 00:57:32,000
pretty good in time so let's see how

00:57:30,799 --> 00:57:35,680
many questions we have

00:57:32,000 --> 00:57:40,240
and how that but yeah we could

00:57:35,680 --> 00:57:43,119
could do something um

00:57:40,240 --> 00:57:44,799
so how can we delete expire cash context

00:57:43,119 --> 00:57:48,079
or clear the cash context once

00:57:44,799 --> 00:57:49,040
sets uh you're not using cash context

00:57:48,079 --> 00:57:51,440
for clearing

00:57:49,040 --> 00:57:53,359
you're putting a cash tag on it like for

00:57:51,440 --> 00:57:56,720
example if you want to always

00:57:53,359 --> 00:57:59,520
be able to single out the pizza spinach

00:57:56,720 --> 00:58:00,880
and all its variations if you didn't

00:57:59,520 --> 00:58:02,720
want to not cache it

00:58:00,880 --> 00:58:04,319
you could just put a cache tag on it you

00:58:02,720 --> 00:58:08,480
would just add like

00:58:04,319 --> 00:58:13,599
um let me go to the terminal

00:58:08,480 --> 00:58:13,599
just it shouldn't help

00:58:13,839 --> 00:58:18,079
um so essentially that's not for the

00:58:17,119 --> 00:58:20,839
code here but

00:58:18,079 --> 00:58:23,440
i'm just using it for okay showing you

00:58:20,839 --> 00:58:26,319
that so essentially you would

00:58:23,440 --> 00:58:26,319
build cash

00:58:27,040 --> 00:58:33,599
tax and you would just add for a compass

00:58:31,520 --> 00:58:36,640
list pinaki

00:58:33,599 --> 00:58:39,040
hashtag no build here

00:58:36,640 --> 00:58:39,920
so that's a totally the wrong point to

00:58:39,040 --> 00:58:42,960
add this but

00:58:39,920 --> 00:58:46,960
um essentially

00:58:42,960 --> 00:58:49,200
this is how you add a cash tag to um

00:58:46,960 --> 00:58:50,640
to uh something you want to expire and

00:58:49,200 --> 00:58:54,319
then you can use the dredge

00:58:50,640 --> 00:58:58,240
command again to do it and then um

00:58:54,319 --> 00:58:58,240
you can do it okay let's move that again

00:58:58,480 --> 00:59:00,720
okay

00:59:03,599 --> 00:59:08,960
so cash contacts are not for exploration

00:59:05,760 --> 00:59:12,160
they're for variation

00:59:08,960 --> 00:59:13,920
cash change so no pizza shop creates a

00:59:12,160 --> 00:59:16,400
bits are always from scratch

00:59:13,920 --> 00:59:17,599
um the pizza is made from pre-prepared

00:59:16,400 --> 00:59:20,319
things so the deaf

00:59:17,599 --> 00:59:21,359
a good deaf even needs 12 to 24 hours

00:59:20,319 --> 00:59:23,119
till it's ready

00:59:21,359 --> 00:59:25,359
with the tomato sauce and we have

00:59:23,119 --> 00:59:28,799
ingredients like we've seen

00:59:25,359 --> 00:59:30,799
and um the pages consist of different

00:59:28,799 --> 00:59:33,440
cached and uncached parts

00:59:30,799 --> 00:59:34,000
so we have some main page response which

00:59:33,440 --> 00:59:35,599
we

00:59:34,000 --> 00:59:37,599
need to custom cache and then we have

00:59:35,599 --> 00:59:38,559
the blocks the menus the header the

00:59:37,599 --> 00:59:40,720
footer

00:59:38,559 --> 00:59:42,400
and those are essentially the decoration

00:59:40,720 --> 00:59:43,520
around the main page response so

00:59:42,400 --> 00:59:46,960
whenever we

00:59:43,520 --> 00:59:47,599
we see like like this here then we have

00:59:46,960 --> 00:59:51,280
like

00:59:47,599 --> 00:59:53,680
here's the header um here's the the logo

00:59:51,280 --> 00:59:54,799
here's a menu here's the secondary

00:59:53,680 --> 00:59:58,319
navigation

00:59:54,799 --> 01:00:01,440
and here finally is the actual

00:59:58,319 --> 01:00:04,400
output from our controller so

01:00:01,440 --> 01:00:05,599
um this is the output from the

01:00:04,400 --> 01:00:08,240
controller

01:00:05,599 --> 01:00:10,319
and this is all the decoration that is

01:00:08,240 --> 01:00:12,960
around it however some things like

01:00:10,319 --> 01:00:13,680
this is active this is active so this

01:00:12,960 --> 01:00:16,880
depends

01:00:13,680 --> 01:00:20,079
on the page in a way um

01:00:16,880 --> 01:00:22,880
but um not as much as something that

01:00:20,079 --> 01:00:26,000
would be deep in here

01:00:22,880 --> 01:00:28,240
so um now we would have two ways to

01:00:26,000 --> 01:00:30,319
create a pizza with mushrooms we could

01:00:28,240 --> 01:00:32,559
start with an empty pan

01:00:30,319 --> 01:00:34,640
we could add the daff add the tomato

01:00:32,559 --> 01:00:37,040
sauce add the mozzarella cheese and then

01:00:34,640 --> 01:00:38,000
add the mushroom so that's one

01:00:37,040 --> 01:00:39,920
possibility

01:00:38,000 --> 01:00:41,920
or we could just use the finished pizza

01:00:39,920 --> 01:00:42,880
margarita and just add the mushrooms to

01:00:41,920 --> 01:00:46,160
it

01:00:42,880 --> 01:00:50,000
so um that's uh

01:00:46,160 --> 01:00:52,160
probably a much more efficient way so um

01:00:50,000 --> 01:00:54,240
and that's actually what the true power

01:00:52,160 --> 01:00:55,440
of dynamic page cache is we cache

01:00:54,240 --> 01:00:57,760
response

01:00:55,440 --> 01:00:58,960
and then we add flavor on placeholders

01:00:57,760 --> 01:01:02,400
afterwards

01:00:58,960 --> 01:01:04,400
so um this is another variation

01:01:02,400 --> 01:01:06,480
essentially that came a little bit later

01:01:04,400 --> 01:01:07,839
that is quadruple supposedly the cash

01:01:06,480 --> 01:01:10,799
context was

01:01:07,839 --> 01:01:11,839
varying something and bubbling that

01:01:10,799 --> 01:01:15,280
through

01:01:11,839 --> 01:01:17,280
and also this placeholders because what

01:01:15,280 --> 01:01:19,280
i really found out is

01:01:17,280 --> 01:01:20,640
essentially if we have something that's

01:01:19,280 --> 01:01:24,559
not cachable

01:01:20,640 --> 01:01:25,280
it's it's not so nice to have your whole

01:01:24,559 --> 01:01:26,960
page

01:01:25,280 --> 01:01:29,599
even if we know exactly that that's

01:01:26,960 --> 01:01:31,760
correct be varied by user because then

01:01:29,599 --> 01:01:35,040
every page would be varied by both

01:01:31,760 --> 01:01:39,040
page and by user and if you've ever done

01:01:35,040 --> 01:01:41,760
then some uh drupal 7 i work on that and

01:01:39,040 --> 01:01:42,640
did put a blog on cash per page and a

01:01:41,760 --> 01:01:45,040
user

01:01:42,640 --> 01:01:46,319
it doesn't really have that much great

01:01:45,040 --> 01:01:48,240
cash that writes here

01:01:46,319 --> 01:01:50,559
so placeholders are the way to solve

01:01:48,240 --> 01:01:53,520
that because essentially you're

01:01:50,559 --> 01:01:54,240
splitting up the page in all the static

01:01:53,520 --> 01:01:56,640
parts

01:01:54,240 --> 01:01:58,480
and then the dynamic parts and funnily

01:01:56,640 --> 01:01:59,920
enough the front end world with react

01:01:58,480 --> 01:02:03,280
and all those they're

01:01:59,920 --> 01:02:05,680
kind of starting to to realize this

01:02:03,280 --> 01:02:06,799
um that not everything needs to change

01:02:05,680 --> 01:02:08,480
all the time but

01:02:06,799 --> 01:02:09,920
that there are some highly dynamic parts

01:02:08,480 --> 01:02:12,079
and some parts that are

01:02:09,920 --> 01:02:14,240
always studying and only change like and

01:02:12,079 --> 01:02:18,000
there's a whole page change

01:02:14,240 --> 01:02:21,599
request in that so um drupal is a

01:02:18,000 --> 01:02:24,319
little bit ahead here and that um

01:02:21,599 --> 01:02:25,359
and has a very nice concept of this

01:02:24,319 --> 01:02:27,930
placeholders

01:02:25,359 --> 01:02:29,520
and it's so powerful um

01:02:27,930 --> 01:02:33,039
[Music]

01:02:29,520 --> 01:02:35,119
because um there's

01:02:33,039 --> 01:02:36,319
um essentially two ways we could be

01:02:35,119 --> 01:02:38,880
doing it we could be

01:02:36,319 --> 01:02:39,760
disabling the dynamic or the page cache

01:02:38,880 --> 01:02:41,440
or bubbles

01:02:39,760 --> 01:02:43,680
and we could just cache all the inner

01:02:41,440 --> 01:02:46,960
parts like this is a blank pen

01:02:43,680 --> 01:02:49,119
and we create everything from scratch um

01:02:46,960 --> 01:02:50,559
this is essentially when we take this

01:02:49,119 --> 01:02:53,920
example and we cache

01:02:50,559 --> 01:02:56,400
this like we do and then we cache

01:02:53,920 --> 01:02:59,200
independently like this menu and then we

01:02:56,400 --> 01:03:01,440
cache independently this menu and

01:02:59,200 --> 01:03:02,640
this form we cannot cache still and

01:03:01,440 --> 01:03:05,920
because this logo

01:03:02,640 --> 01:03:07,520
and etc and this is one way to do it so

01:03:05,920 --> 01:03:09,599
we assemble it out of the

01:03:07,520 --> 01:03:10,880
other cache parts and some of them are

01:03:09,599 --> 01:03:14,559
not cacheable

01:03:10,880 --> 01:03:17,039
or we just cache the whole page

01:03:14,559 --> 01:03:18,079
and then if there's just something that

01:03:17,039 --> 01:03:20,720
would be

01:03:18,079 --> 01:03:23,119
um like very dynamic then we use

01:03:20,720 --> 01:03:26,960
placeholder for that

01:03:23,119 --> 01:03:28,720
um and this is essentially we catch the

01:03:26,960 --> 01:03:30,480
whole response in dynamic page cache and

01:03:28,720 --> 01:03:32,240
we just add some placeholders for this

01:03:30,480 --> 01:03:34,559
dynamic data

01:03:32,240 --> 01:03:35,280
and here we come to something important

01:03:34,559 --> 01:03:38,319
because

01:03:35,280 --> 01:03:39,920
both have its thing routine free pizza

01:03:38,319 --> 01:03:42,000
that cannot be a placeholder

01:03:39,920 --> 01:03:43,280
it's a foundation of our pizza the whole

01:03:42,000 --> 01:03:46,000
def changes

01:03:43,280 --> 01:03:46,480
so we need both we need the variation of

01:03:46,000 --> 01:03:48,720
varying

01:03:46,480 --> 01:03:49,760
all the cache entries for example drupal

01:03:48,720 --> 01:03:51,680
takes the

01:03:49,760 --> 01:03:53,920
a very pragmatic approach of saying

01:03:51,680 --> 01:03:56,160
everything in the render cache is

01:03:53,920 --> 01:03:57,359
always varying by user permissions

01:03:56,160 --> 01:03:59,680
because else

01:03:57,359 --> 01:04:01,760
it would not be secure we designed that

01:03:59,680 --> 01:04:02,880
a drupal con los angeles at one point

01:04:01,760 --> 01:04:05,440
where like

01:04:02,880 --> 01:04:06,160
uh that could be a little bit insecure

01:04:05,440 --> 01:04:08,640
to show

01:04:06,160 --> 01:04:09,680
like admin like data to some user we

01:04:08,640 --> 01:04:13,520
never want to

01:04:09,680 --> 01:04:16,880
experience that so that's always added

01:04:13,520 --> 01:04:19,440
and this is variation that is

01:04:16,880 --> 01:04:21,599
varying all cache entries and it's good

01:04:19,440 --> 01:04:23,200
that we do it like that

01:04:21,599 --> 01:04:25,680
and then we have placeholders and you

01:04:23,200 --> 01:04:27,599
can think of them as out of band

01:04:25,680 --> 01:04:29,760
and it's important to decide that case

01:04:27,599 --> 01:04:32,559
by case

01:04:29,760 --> 01:04:34,799
the placeholder in drupal has one

01:04:32,559 --> 01:04:37,359
property it's important that it can be

01:04:34,799 --> 01:04:38,480
independently rendered so the same as a

01:04:37,359 --> 01:04:42,160
cache context

01:04:38,480 --> 01:04:43,200
if you have a placeholder um you can be

01:04:42,160 --> 01:04:47,440
called like

01:04:43,200 --> 01:04:49,039
directly after um

01:04:47,440 --> 01:04:50,640
bootstrap essentially when the main

01:04:49,039 --> 01:04:52,640
controller starts to

01:04:50,640 --> 01:04:54,319
even before the main controller is

01:04:52,640 --> 01:04:57,599
started so for

01:04:54,319 --> 01:05:01,280
a placeholder you need to know

01:04:57,599 --> 01:05:04,880
that the main controller might not even

01:05:01,280 --> 01:05:07,280
be executed at all um

01:05:04,880 --> 01:05:08,960
so it must not depend on anything that

01:05:07,280 --> 01:05:12,000
has been executed before

01:05:08,960 --> 01:05:15,359
so what would be a whole no-go would be

01:05:12,000 --> 01:05:18,319
that if this um pizza controller

01:05:15,359 --> 01:05:18,799
um if it was creating this pizza here if

01:05:18,319 --> 01:05:21,440
it

01:05:18,799 --> 01:05:22,079
was like like and let's be very dirty

01:05:21,440 --> 01:05:25,680
here

01:05:22,079 --> 01:05:28,799
if that was saying some global

01:05:25,680 --> 01:05:32,559
variable and we would just say hey

01:05:28,799 --> 01:05:36,079
um add

01:05:32,559 --> 01:05:40,160
things will happen

01:05:36,079 --> 01:05:43,280
across yes

01:05:40,160 --> 01:05:46,000
they do um and

01:05:43,280 --> 01:05:48,839
then somewhere on the page it would want

01:05:46,000 --> 01:05:52,640
to output this global state

01:05:48,839 --> 01:05:54,960
then um in a placeholder

01:05:52,640 --> 01:05:56,880
then this would never be there this

01:05:54,960 --> 01:05:58,640
global variable would not be there the

01:05:56,880 --> 01:06:02,160
state would not be there

01:05:58,640 --> 01:06:07,680
so essentially it's not here

01:06:02,160 --> 01:06:09,359
so um this is why um the placeholder um

01:06:07,680 --> 01:06:11,119
it's important to know it can be

01:06:09,359 --> 01:06:14,640
independently random

01:06:11,119 --> 01:06:15,119
and for example it's not possible to add

01:06:14,640 --> 01:06:17,359
more

01:06:15,119 --> 01:06:19,440
read to the dove after the picture is

01:06:17,359 --> 01:06:21,440
finished already or floor to the stuff

01:06:19,440 --> 01:06:22,640
after it's finished already that doesn't

01:06:21,440 --> 01:06:25,760
make sense so

01:06:22,640 --> 01:06:29,039
um think very carefully of how

01:06:25,760 --> 01:06:31,200
you do your placeholders and here's a

01:06:29,039 --> 01:06:32,720
classified top-secret way of creating a

01:06:31,200 --> 01:06:37,039
placeholder

01:06:32,720 --> 01:06:39,839
you just add um attach placeholders

01:06:37,039 --> 01:06:40,640
you add there and you use some secret

01:06:39,839 --> 01:06:42,480
key

01:06:40,640 --> 01:06:43,839
like this ingredients place but that's

01:06:42,480 --> 01:06:47,440
very secure

01:06:43,839 --> 01:06:49,599
and you put that to our your

01:06:47,440 --> 01:06:50,880
your normal build that you want to put

01:06:49,599 --> 01:06:53,440
there which is

01:06:50,880 --> 01:06:54,960
your independently rendered thing and

01:06:53,440 --> 01:06:56,559
then you put your markup

01:06:54,960 --> 01:06:58,720
and you put ingredients place well

01:06:56,559 --> 01:07:01,760
that's all there is to placeholders

01:06:58,720 --> 01:07:04,640
it's just a unique key on the page

01:07:01,760 --> 01:07:08,400
the unique string that's later replaced

01:07:04,640 --> 01:07:08,400
from this attached placeholder thing

01:07:08,559 --> 01:07:12,480
um so the contract of placeholder as

01:07:11,119 --> 01:07:15,359
they execute after

01:07:12,480 --> 01:07:16,400
all the other parts have been rendered

01:07:15,359 --> 01:07:19,200
and

01:07:16,400 --> 01:07:20,079
the problem is pre-render could have

01:07:19,200 --> 01:07:22,799
things like

01:07:20,079 --> 01:07:25,119
entities in there it could have things

01:07:22,799 --> 01:07:25,119
like

01:07:27,440 --> 01:07:31,680
large objects and you would need to do

01:07:29,359 --> 01:07:33,839
that all that so we created lazy builder

01:07:31,680 --> 01:07:36,160
which is a way stronger contract

01:07:33,839 --> 01:07:43,839
and we'll look at that in a moment just

01:07:36,160 --> 01:07:43,839
some questions

01:07:45,280 --> 01:07:48,720
yeah stefan steven will be coming

01:07:47,839 --> 01:07:52,720
through that

01:07:48,720 --> 01:07:56,319
use case in a clear moment but not yet

01:07:52,720 --> 01:07:59,359
um oh no not yet

01:07:56,319 --> 01:07:59,680
a little bit later um the example for

01:07:59,359 --> 01:08:01,440
that

01:07:59,680 --> 01:08:04,319
is in part four when we are talking

01:08:01,440 --> 01:08:06,559
about cdns um

01:08:04,319 --> 01:08:11,839
but in a sense uh cache context is

01:08:06,559 --> 01:08:11,839
perfect for that

01:08:12,640 --> 01:08:16,400
so for expensive join the drupal forms

01:08:14,720 --> 01:08:16,719
would you need to use placeholders i

01:08:16,400 --> 01:08:20,960
would

01:08:16,719 --> 01:08:24,000
always try to use placeholder for it um

01:08:20,960 --> 01:08:27,040
you can in a sense you can

01:08:24,000 --> 01:08:29,759
cache forms um we'll be coming to

01:08:27,040 --> 01:08:30,880
forms a little bit later so i leave that

01:08:29,759 --> 01:08:32,799
um

01:08:30,880 --> 01:08:34,480
and you can also use a little bit of

01:08:32,799 --> 01:08:35,199
render cache logic in the form building

01:08:34,480 --> 01:08:37,920
logic

01:08:35,199 --> 01:08:39,199
so yeah that's a very good example so

01:08:37,920 --> 01:08:42,880
i've had the

01:08:39,199 --> 01:08:45,199
uh nice thing of a form uh

01:08:42,880 --> 01:08:46,719
which was then stored in form cache i

01:08:45,199 --> 01:08:49,759
think it was google seven

01:08:46,719 --> 01:08:52,000
anyway and it created all this large

01:08:49,759 --> 01:08:54,239
entity storage that it put into the form

01:08:52,000 --> 01:08:55,520
so naturally drupal was putting this

01:08:54,239 --> 01:08:58,719
whole

01:08:55,520 --> 01:08:59,199
three megabyte of structure into the

01:08:58,719 --> 01:09:03,359
form

01:08:59,199 --> 01:09:06,480
always so what happened

01:09:03,359 --> 01:09:09,040
memcache got very unhappy um

01:09:06,480 --> 01:09:09,759
compressed it was just one megabyte but

01:09:09,040 --> 01:09:13,920
it was like

01:09:09,759 --> 01:09:16,960
taking a a huge huge huge huge huge huge

01:09:13,920 --> 01:09:21,839
um part

01:09:16,960 --> 01:09:21,839
um that's the placeholder

01:09:22,319 --> 01:09:28,560
so um so this and all the 3mb was

01:09:26,239 --> 01:09:30,319
kind of stored within this form cache

01:09:28,560 --> 01:09:31,839
but where it shouldn't be

01:09:30,319 --> 01:09:33,440
and the solution was essentially to

01:09:31,839 --> 01:09:37,120
create placeholder

01:09:33,440 --> 01:09:40,319
and then the formulas

01:09:37,120 --> 01:09:43,839
rendered and then in the end um the

01:09:40,319 --> 01:09:45,520
um the markup was was added

01:09:43,839 --> 01:09:47,600
afterwards after the form had been

01:09:45,520 --> 01:09:49,440
rendered and that way it didn't end up

01:09:47,600 --> 01:09:50,239
in the form cache so it didn't load it

01:09:49,440 --> 01:09:52,719
up so

01:09:50,239 --> 01:09:55,040
this way placeholders can be used um

01:09:52,719 --> 01:09:58,159
when you're creating a form with like

01:09:55,040 --> 01:10:01,360
text in between or markup in between

01:09:58,159 --> 01:10:04,400
or things like that um but forms

01:10:01,360 --> 01:10:06,560
and catching us a little bit

01:10:04,400 --> 01:10:07,679
this reform token and everything we're

01:10:06,560 --> 01:10:11,760
working on that but

01:10:07,679 --> 01:10:15,120
um but and we'll go on forms a lot more

01:10:11,760 --> 01:10:18,080
a little bit later yeah

01:10:15,120 --> 01:10:18,719
and this question i just leave for now

01:10:18,080 --> 01:10:21,679
um

01:10:18,719 --> 01:10:21,679
because um

01:10:22,320 --> 01:10:26,000
we'll be coming to that anyway in the

01:10:23,840 --> 01:10:29,280
presentation

01:10:26,000 --> 01:10:32,320
so lazy builder will just

01:10:29,280 --> 01:10:35,600
prevent pre-render essentially we um

01:10:32,320 --> 01:10:40,719
we have our function here and

01:10:35,600 --> 01:10:43,360
uh lazybuilder is we have um

01:10:40,719 --> 01:10:45,360
a function call and what's very

01:10:43,360 --> 01:10:48,239
important is you need to also add it to

01:10:45,360 --> 01:10:50,640
trusted callbacks um this is new trusted

01:10:48,239 --> 01:10:52,960
callbacks interface for that to work

01:10:50,640 --> 01:10:54,719
and then you put the pizza name here and

01:10:52,960 --> 01:10:55,520
the important thing is this cannot be an

01:10:54,719 --> 01:10:58,159
object

01:10:55,520 --> 01:10:59,920
um this could be a serialized json

01:10:58,159 --> 01:11:01,360
string if you really want it but it's

01:10:59,920 --> 01:11:04,080
really not encouraged

01:11:01,360 --> 01:11:05,600
because it essentially says do only

01:11:04,080 --> 01:11:08,159
simple things here

01:11:05,600 --> 01:11:10,080
and one of the reasons was because we

01:11:08,159 --> 01:11:11,040
want to render comments for example

01:11:10,080 --> 01:11:13,280
lazily

01:11:11,040 --> 01:11:14,960
but the problem was if the comment was

01:11:13,280 --> 01:11:16,800
getting the entity you could

01:11:14,960 --> 01:11:18,400
you needed to store the whole entity in

01:11:16,800 --> 01:11:20,159
the cache but

01:11:18,400 --> 01:11:22,400
but the problem is the entity would not

01:11:20,159 --> 01:11:26,000
have been loaded at that point already

01:11:22,400 --> 01:11:29,520
so that makes it a little bit

01:11:26,000 --> 01:11:31,679
difficult in that so um

01:11:29,520 --> 01:11:32,640
one of the points of of the lazy builder

01:11:31,679 --> 01:11:35,120
is essentially

01:11:32,640 --> 01:11:36,239
that you only put like literal values

01:11:35,120 --> 01:11:39,280
like little strings

01:11:36,239 --> 01:11:40,400
entity ids entity types and things like

01:11:39,280 --> 01:11:43,520
that on it

01:11:40,400 --> 01:11:45,440
so and that way you can have have those

01:11:43,520 --> 01:11:46,560
things so here we have our pizza lazy

01:11:45,440 --> 01:11:50,480
builder

01:11:46,560 --> 01:11:51,679
and we can create explicitly a

01:11:50,480 --> 01:11:54,960
placeholder

01:11:51,679 --> 01:11:55,679
so very simple if you have lazy builder

01:11:54,960 --> 01:11:57,840
and you want to

01:11:55,679 --> 01:12:00,400
always create a placeholder because one

01:11:57,840 --> 01:12:02,480
you know you always want to

01:12:00,400 --> 01:12:05,040
use that as a placeholder you just call

01:12:02,480 --> 01:12:07,199
quickplaceholder it was true

01:12:05,040 --> 01:12:08,560
and again there was a session today i'm

01:12:07,199 --> 01:12:11,920
not sure if anyone

01:12:08,560 --> 01:12:15,040
watched it but that it's called

01:12:11,920 --> 01:12:17,520
randomly lazy or something which did go

01:12:15,040 --> 01:12:19,600
way more into detail of that so i'm

01:12:17,520 --> 01:12:23,040
referencing to that a little bit

01:12:19,600 --> 01:12:25,760
for that um

01:12:23,040 --> 01:12:27,840
but i'm reiterating the pitfalls of

01:12:25,760 --> 01:12:29,920
laser builders they must not contain

01:12:27,840 --> 01:12:32,640
complex data unfortunately

01:12:29,920 --> 01:12:34,480
thanks to vim's insistence is enforced

01:12:32,640 --> 01:12:36,400
and it must not depend on anything in

01:12:34,480 --> 01:12:38,239
the main page request this is not

01:12:36,400 --> 01:12:41,440
enforced but if you try

01:12:38,239 --> 01:12:42,400
it will just fail so um in this case the

01:12:41,440 --> 01:12:45,920
experience will

01:12:42,400 --> 01:12:47,840
teach you not to do it um the nice thing

01:12:45,920 --> 01:12:50,000
about laser builders and placeholders we

01:12:47,840 --> 01:12:53,040
have some enabled for blocks by default

01:12:50,000 --> 01:12:55,120
is you can use bigpipe it's in core

01:12:53,040 --> 01:12:57,760
it's in you enable it and it's good to

01:12:55,120 --> 01:13:00,080
go you can cache the uncashable because

01:12:57,760 --> 01:13:02,000
we can very easily split up

01:13:00,080 --> 01:13:04,960
this is all cacheable but this small

01:13:02,000 --> 01:13:07,120
page is not easy create a lazy builder

01:13:04,960 --> 01:13:08,640
put it put it in a placeholder and it

01:13:07,120 --> 01:13:10,560
works and we can

01:13:08,640 --> 01:13:12,159
finally break up this variation of the

01:13:10,560 --> 01:13:16,320
pair page pay user

01:13:12,159 --> 01:13:22,080
into pair page plus page user

01:13:16,320 --> 01:13:22,080
so um looking at some more questions

01:13:24,960 --> 01:13:33,840
i'm gonna drink a short moment um

01:13:43,840 --> 01:13:48,320
i'm not able to set any dynamic

01:13:46,080 --> 01:13:52,080
variables during the pre-process hawking

01:13:48,320 --> 01:13:52,080
every time i need to clear the cache

01:13:53,760 --> 01:13:55,920
so

01:13:57,120 --> 01:14:02,640
you could just there's a

01:14:00,239 --> 01:14:03,920
secret trick for pre-process so

01:14:02,640 --> 01:14:06,000
essentially you need your

01:14:03,920 --> 01:14:07,600
tweak template whatever is outputting

01:14:06,000 --> 01:14:11,440
that to output

01:14:07,600 --> 01:14:15,199
something whatever you're outputting

01:14:11,440 --> 01:14:16,960
and once it's output um you can just add

01:14:15,199 --> 01:14:18,800
it into a render array so even if you

01:14:16,960 --> 01:14:21,760
have a string you could build a render

01:14:18,800 --> 01:14:21,760
array this markup

01:14:26,840 --> 01:14:29,840
oh

01:14:30,159 --> 01:14:44,320
seems to we have problems hello

01:14:45,920 --> 01:14:57,840
help us seems

01:14:58,640 --> 01:15:01,600
okay it's back

01:15:02,560 --> 01:15:09,520
okay it seems there's some backup stream

01:15:06,400 --> 01:15:11,920
okay and i need to break anyway so

01:15:09,520 --> 01:15:13,120
i'm drinking some water so essentially

01:15:11,920 --> 01:15:16,000
um

01:15:13,120 --> 01:15:17,040
so we have a pre-process hook and

01:15:16,000 --> 01:15:19,199
essentially

01:15:17,040 --> 01:15:21,120
you know this pre-process hook will

01:15:19,199 --> 01:15:22,640
eventually output some variable in a

01:15:21,120 --> 01:15:25,120
trick template

01:15:22,640 --> 01:15:26,400
so what you can do is you can just

01:15:25,120 --> 01:15:28,800
change this variable

01:15:26,400 --> 01:15:31,120
into a render array and then you just

01:15:28,800 --> 01:15:33,840
add a cache max h0 to it

01:15:31,120 --> 01:15:35,520
and then your pre-process will never be

01:15:33,840 --> 01:15:38,480
cached

01:15:35,520 --> 01:15:39,840
if that's not the case and you want to

01:15:38,480 --> 01:15:43,120
have it not be as

01:15:39,840 --> 01:15:45,440
dynamic but a little bit less dynamic

01:15:43,120 --> 01:15:46,719
actually that's a very nice use case i'm

01:15:45,440 --> 01:15:50,320
totally going to use that

01:15:46,719 --> 01:15:52,239
um for

01:15:50,320 --> 01:15:53,360
next session when i build this out a

01:15:52,239 --> 01:15:55,840
little bit more

01:15:53,360 --> 01:15:57,280
um you could also create a placeholder

01:15:55,840 --> 01:16:00,159
obviously directly

01:15:57,280 --> 01:16:00,560
and then this is output um and then you

01:16:00,159 --> 01:16:01,920
don't

01:16:00,560 --> 01:16:04,000
need to deal with the cache but let's

01:16:01,920 --> 01:16:07,679
say you add a dynamic class and you

01:16:04,000 --> 01:16:10,560
really don't want it that cached ever

01:16:07,679 --> 01:16:11,600
you just create a render a you ensure

01:16:10,560 --> 01:16:13,679
its output

01:16:11,600 --> 01:16:15,679
and you put the max h0 on the render

01:16:13,679 --> 01:16:17,600
array that's all that's needed

01:16:15,679 --> 01:16:18,880
or you say you are outputting the

01:16:17,600 --> 01:16:21,679
username here

01:16:18,880 --> 01:16:22,880
and you want your pre-process to change

01:16:21,679 --> 01:16:24,640
when the user's output

01:16:22,880 --> 01:16:26,320
again you create a render array you

01:16:24,640 --> 01:16:30,239
ensure it's output

01:16:26,320 --> 01:16:32,880
and it's working so it's always the same

01:16:30,239 --> 01:16:33,440
as long as it's rendered somewhere it

01:16:32,880 --> 01:16:36,080
will

01:16:33,440 --> 01:16:36,560
end up in the magic render stack which

01:16:36,080 --> 01:16:39,920
is

01:16:36,560 --> 01:16:43,280
one of the um cool things

01:16:39,920 --> 01:16:46,640
um um so and

01:16:43,280 --> 01:16:46,640
even if you um

01:16:47,199 --> 01:16:54,000
even if you didn't have um

01:16:50,960 --> 01:16:55,440
even if you didn't have like the um the

01:16:54,000 --> 01:16:58,560
possibility of

01:16:55,440 --> 01:17:03,840
and i'm just using this here let's say

01:16:58,560 --> 01:17:03,840
we have our pre-process here

01:17:04,159 --> 01:17:11,040
whatever and we have our variables here

01:17:08,159 --> 01:17:11,600
we now now we need to render this by

01:17:11,040 --> 01:17:13,920
user

01:17:11,600 --> 01:17:14,640
so what we can do is we just create a

01:17:13,920 --> 01:17:17,840
quick

01:17:14,640 --> 01:17:17,840
render array here

01:17:18,880 --> 01:17:23,280
and we now um this should always vary by

01:17:21,360 --> 01:17:24,000
users so we just add a cache contacts

01:17:23,280 --> 01:17:25,840
here

01:17:24,000 --> 01:17:27,520
but we now for some reason this

01:17:25,840 --> 01:17:29,360
preprocess would never

01:17:27,520 --> 01:17:31,840
output any variable or we don't know

01:17:29,360 --> 01:17:33,440
which output so what we can then do is

01:17:31,840 --> 01:17:36,239
we can call the

01:17:33,440 --> 01:17:36,239
render service

01:17:43,600 --> 01:17:49,760
i work with and that way our

01:17:46,719 --> 01:17:52,320
cache context is um is added

01:17:49,760 --> 01:17:53,360
magically to whatever is rendered as

01:17:52,320 --> 01:17:56,560
part of this

01:17:53,360 --> 01:17:57,760
render call of this part of the tree of

01:17:56,560 --> 01:18:00,800
serenity

01:17:57,760 --> 01:18:05,040
this will now vary by user so um

01:18:00,800 --> 01:18:08,320
this way you can add things out of band

01:18:05,040 --> 01:18:11,360
it's not encouraged but it works very

01:18:08,320 --> 01:18:15,040
very very very fine so um

01:18:11,360 --> 01:18:18,400
this is a secret trick essentially for

01:18:15,040 --> 01:18:21,440
for um for doing this

01:18:18,400 --> 01:18:27,199
so um yeah that's

01:18:21,440 --> 01:18:30,560
hopefully answer this question

01:18:27,199 --> 01:18:30,560
okay good

01:18:32,560 --> 01:18:41,440
oh that's really

01:18:36,080 --> 01:18:43,920
a real time

01:18:41,440 --> 01:18:45,920
where should you cash our job is even

01:18:43,920 --> 01:18:47,120
more successful but the customers need

01:18:45,920 --> 01:18:50,159
to drive to us

01:18:47,120 --> 01:18:52,480
that's a little bit bad so

01:18:50,159 --> 01:18:53,840
many drive for two hours or more can we

01:18:52,480 --> 01:18:56,560
do something about that

01:18:53,840 --> 01:18:58,960
and yes we can the solution is we now

01:18:56,560 --> 01:19:02,080
offer our pizza and supermarkets around

01:18:58,960 --> 01:19:05,840
world the solution is a content delivery

01:19:02,080 --> 01:19:08,159
network so google 89 makes it very easy

01:19:05,840 --> 01:19:10,560
you choose the cdn akamai cloudflare

01:19:08,159 --> 01:19:13,199
fastly or vanish you enable a module

01:19:10,560 --> 01:19:14,000
and you prove it and it works at least

01:19:13,199 --> 01:19:17,520
for

01:19:14,000 --> 01:19:20,480
anonymous pages um so we use our pizza

01:19:17,520 --> 01:19:20,480
delivery network

01:19:20,719 --> 01:19:23,920
the cdn then does the checks has the

01:19:22,960 --> 01:19:26,159
expired

01:19:23,920 --> 01:19:28,000
is the duff version still matching and

01:19:26,159 --> 01:19:29,440
once the dutch version changes you give

01:19:28,000 --> 01:19:31,520
the cd and a heads up and

01:19:29,440 --> 01:19:33,840
it's so nice that works really with all

01:19:31,520 --> 01:19:37,199
major cdn's by now cloudflare

01:19:33,840 --> 01:19:40,480
fastly akamai all of them support tag

01:19:37,199 --> 01:19:42,080
based exploration the same way

01:19:40,480 --> 01:19:44,560
like a troops worked in drupal

01:19:42,080 --> 01:19:46,400
internally

01:19:44,560 --> 01:19:49,360
and you can also see those headers for

01:19:46,400 --> 01:19:52,080
yourself there's extrudable cache tags

01:19:49,360 --> 01:19:53,920
debug option that you can just enable so

01:19:52,080 --> 01:19:57,040
you just enable it in your

01:19:53,920 --> 01:19:59,520
services by ml

01:19:57,040 --> 01:20:01,120
you just put http response debug cache

01:19:59,520 --> 01:20:04,640
quality headers to true

01:20:01,120 --> 01:20:05,199
and that's it and that's the result then

01:20:04,640 --> 01:20:07,360
you see

01:20:05,199 --> 01:20:08,560
extruder cache text stuff version so we

01:20:07,360 --> 01:20:12,480
now for example this

01:20:08,560 --> 01:20:14,560
this one page um is um

01:20:12,480 --> 01:20:16,800
depending on the daf version and you can

01:20:14,560 --> 01:20:17,679
also see the expire state that expires

01:20:16,800 --> 01:20:21,280
at 9

01:20:17,679 --> 01:20:23,760
22 and that's it so what about the duff

01:20:21,280 --> 01:20:23,760
itself

01:20:26,800 --> 01:20:30,639
yeah yeah yeah that's definitely

01:20:28,719 --> 01:20:34,000
completely right

01:20:30,639 --> 01:20:35,360
this is not for production this also has

01:20:34,000 --> 01:20:36,880
not recommended in production

01:20:35,360 --> 01:20:37,840
environments because if you have a lot

01:20:36,880 --> 01:20:40,400
of headers

01:20:37,840 --> 01:20:41,120
it can totally screw up your browser

01:20:40,400 --> 01:20:43,520
because

01:20:41,120 --> 01:20:46,320
um the response header size is way too

01:20:43,520 --> 01:20:50,080
large it can make problems with cdns

01:20:46,320 --> 01:20:53,120
it can have many side effects it's still

01:20:50,080 --> 01:20:56,000
pretty nice to debug into a full logo

01:20:53,120 --> 01:20:57,120
so don't do it in production don't do it

01:20:56,000 --> 01:21:00,719
at home kids

01:20:57,120 --> 01:21:02,560
don't so what about the duff itself

01:21:00,719 --> 01:21:04,560
um currently we need to get it from a

01:21:02,560 --> 01:21:06,159
warehouse like 10 miles away

01:21:04,560 --> 01:21:07,679
so let's put it in the fridge on the

01:21:06,159 --> 01:21:10,080
counter um

01:21:07,679 --> 01:21:12,000
and it's important that drupal has and

01:21:10,080 --> 01:21:12,960
now we come to something else like we've

01:21:12,000 --> 01:21:15,600
talked about

01:21:12,960 --> 01:21:16,480
cache invalidation cache setting but by

01:21:15,600 --> 01:21:19,679
now we have

01:21:16,480 --> 01:21:22,080
stored everything in this lower database

01:21:19,679 --> 01:21:23,199
so we always need to drive to our

01:21:22,080 --> 01:21:26,239
warehouse

01:21:23,199 --> 01:21:29,920
and we need to to to get it there

01:21:26,239 --> 01:21:32,880
and um it's always there

01:21:29,920 --> 01:21:33,520
so it takes a while but if you have

01:21:32,880 --> 01:21:35,760
things

01:21:33,520 --> 01:21:35,760
um

01:21:36,190 --> 01:21:40,080
[Music]

01:21:37,360 --> 01:21:40,080
that is

01:21:41,120 --> 01:21:49,120
near the um near the counter

01:21:45,520 --> 01:21:51,280
um that you really

01:21:49,120 --> 01:21:52,800
for efficiency when you're making pizza

01:21:51,280 --> 01:21:53,920
what you want to do is you want to have

01:21:52,800 --> 01:21:56,080
your counter

01:21:53,920 --> 01:21:57,840
you would just go to the fridge below it

01:21:56,080 --> 01:21:58,480
you just want to take your duff and then

01:21:57,840 --> 01:22:00,080
you want to

01:21:58,480 --> 01:22:02,480
add your ingredients and you want to

01:22:00,080 --> 01:22:05,600
bake it and and like that so

01:22:02,480 --> 01:22:07,520
this happens now um where the pizza is

01:22:05,600 --> 01:22:08,639
prepared the pizza maker service

01:22:07,520 --> 01:22:10,719
essentially

01:22:08,639 --> 01:22:12,719
so and the nice thing is drupal has

01:22:10,719 --> 01:22:14,560
changed fast

01:22:12,719 --> 01:22:16,480
and the main rule of samples if you have

01:22:14,560 --> 01:22:18,320
thing that is seldom changing

01:22:16,480 --> 01:22:19,840
then put it into a special bin if you've

01:22:18,320 --> 01:22:22,080
seen how you create a bin

01:22:19,840 --> 01:22:24,239
and you connect that bin to chain fast

01:22:22,080 --> 01:22:26,320
and that should be mostly read only cash

01:22:24,239 --> 01:22:28,159
traffic so if it expires a lot

01:22:26,320 --> 01:22:30,239
don't do it don't do it don't do it

01:22:28,159 --> 01:22:32,320
don't do it

01:22:30,239 --> 01:22:34,400
and this can even make problems this

01:22:32,320 --> 01:22:34,880
cause default configuration because it

01:22:34,400 --> 01:22:37,600
has

01:22:34,880 --> 01:22:38,000
a config for example in there and some

01:22:37,600 --> 01:22:40,960
people

01:22:38,000 --> 01:22:42,719
misuse config and change config on some

01:22:40,960 --> 01:22:44,719
comma sites i've seen that

01:22:42,719 --> 01:22:46,639
on the fly so it always expires the

01:22:44,719 --> 01:22:49,120
conflict and if that sentence changed

01:22:46,639 --> 01:22:52,320
fast then

01:22:49,120 --> 01:22:54,159
good luck so

01:22:52,320 --> 01:22:55,840
it's very simple to do that you just put

01:22:54,159 --> 01:22:58,320
into settings uh the

01:22:55,840 --> 01:23:00,239
cache pins please cut off uh for the

01:22:58,320 --> 01:23:02,000
cashback and dot change fast

01:23:00,239 --> 01:23:03,280
and that's it so we create the pizza

01:23:02,000 --> 01:23:07,040
dough cash bin

01:23:03,280 --> 01:23:09,840
and do it

01:23:07,040 --> 01:23:11,280
however we don't want to make a

01:23:09,840 --> 01:23:13,520
custom-made pizza

01:23:11,280 --> 01:23:15,840
directly in chain fast we don't want to

01:23:13,520 --> 01:23:17,440
have that in a pcu which is essentially

01:23:15,840 --> 01:23:20,639
in the php memory

01:23:17,440 --> 01:23:22,719
and it's very limited in that um it's

01:23:20,639 --> 01:23:25,040
not like as large as the database which

01:23:22,719 --> 01:23:26,800
can go to gigabytes etc it's more like a

01:23:25,040 --> 01:23:29,840
few hundred megabytes

01:23:26,800 --> 01:23:31,600
so if something is changing often or it

01:23:29,840 --> 01:23:34,480
has a lot of variations

01:23:31,600 --> 01:23:34,960
don't put it very near there unless

01:23:34,480 --> 01:23:38,560
you've

01:23:34,960 --> 01:23:41,600
created some way of limiting that

01:23:38,560 --> 01:23:43,679
because if you if you write a lot

01:23:41,600 --> 01:23:45,199
you can get serious by clock problems

01:23:43,679 --> 01:23:48,320
and the profile should actually

01:23:45,199 --> 01:23:49,440
decrease not increase and if the cache

01:23:48,320 --> 01:23:52,239
was full that the

01:23:49,440 --> 01:23:53,440
big problem was apc you still it can

01:23:52,239 --> 01:23:56,080
lead to lockups

01:23:53,440 --> 01:23:58,320
um because then you need to perform a

01:23:56,080 --> 01:24:01,280
full garbage collection

01:23:58,320 --> 01:24:03,199
um so essentially um to solve that we

01:24:01,280 --> 01:24:04,880
would need to provide a cache before the

01:24:03,199 --> 01:24:09,199
cache

01:24:04,880 --> 01:24:10,960
and yeah but apc-u is still

01:24:09,199 --> 01:24:12,880
really cool and used in drupal for

01:24:10,960 --> 01:24:14,480
example for the file cache

01:24:12,880 --> 01:24:16,480
which depends only if the file is

01:24:14,480 --> 01:24:19,440
changed the class cache

01:24:16,480 --> 01:24:21,760
um because it depends only where it sits

01:24:19,440 --> 01:24:24,480
on the file system and the config case

01:24:21,760 --> 01:24:24,880
only invalidate if the content changes

01:24:24,480 --> 01:24:27,280
so

01:24:24,880 --> 01:24:28,719
and this is now shows now the importance

01:24:27,280 --> 01:24:30,560
of having different bins

01:24:28,719 --> 01:24:33,199
because you can have different cash

01:24:30,560 --> 01:24:34,960
backends associated with them

01:24:33,199 --> 01:24:37,120
another thing is don't forget about

01:24:34,960 --> 01:24:39,280
regis from mkhd

01:24:37,120 --> 01:24:41,600
because you can think of mysql as a

01:24:39,280 --> 01:24:43,440
warehouse with a really big fridge

01:24:41,600 --> 01:24:45,520
that's across the street

01:24:43,440 --> 01:24:47,840
but when catch the readers you can think

01:24:45,520 --> 01:24:50,400
of a fridge that's in room next door

01:24:47,840 --> 01:24:52,400
and apsu finally is the fridge that's

01:24:50,400 --> 01:24:56,000
below the counter

01:24:52,400 --> 01:24:58,320
so large storage space low

01:24:56,000 --> 01:24:59,760
two to five millisecond response times

01:24:58,320 --> 01:25:03,360
main cache to radius

01:24:59,760 --> 01:25:05,199
medium storage space it's fast 0.5 to 1

01:25:03,360 --> 01:25:07,760
millisecond response times

01:25:05,199 --> 01:25:08,560
apcu is small storage space but it's

01:25:07,760 --> 01:25:11,280
faster

01:25:08,560 --> 01:25:12,560
there can be response times like 0.05

01:25:11,280 --> 01:25:17,120
milliseconds

01:25:12,560 --> 01:25:17,120
it's really freaking fast and yeah

01:25:17,280 --> 01:25:21,440
um and i do have a core patch in the

01:25:20,000 --> 01:25:24,480
making that could make

01:25:21,440 --> 01:25:25,360
apcu and chain faster especially so much

01:25:24,480 --> 01:25:26,880
much more

01:25:25,360 --> 01:25:28,400
more faster and if there's any

01:25:26,880 --> 01:25:30,560
volunteers please speak up

01:25:28,400 --> 01:25:32,320
um because it's it's really cool but i

01:25:30,560 --> 01:25:36,639
just don't find the time

01:25:32,320 --> 01:25:39,840
to implement it um

01:25:36,639 --> 01:25:42,400
so um we also have to distinguish for

01:25:39,840 --> 01:25:44,800
our efficiency 4.0

01:25:42,400 --> 01:25:46,159
two parts essentially creating the pizza

01:25:44,800 --> 01:25:48,400
in the most efficient way which is

01:25:46,159 --> 01:25:50,560
important for our custom-made pizza

01:25:48,400 --> 01:25:51,520
which you never cache as we've said

01:25:50,560 --> 01:25:54,880
before

01:25:51,520 --> 01:25:56,960
but there's also the way to create

01:25:54,880 --> 01:25:58,800
uh for delivering the pizza to the

01:25:56,960 --> 01:26:02,000
customer which is our

01:25:58,800 --> 01:26:02,719
pizza delivery network so again we have

01:26:02,000 --> 01:26:05,280
like

01:26:02,719 --> 01:26:07,040
the mysql memcached cdn and also the

01:26:05,280 --> 01:26:08,080
browser cache don't forget about browser

01:26:07,040 --> 01:26:11,040
cache it's your best

01:26:08,080 --> 01:26:12,000
friend and we have caches used for

01:26:11,040 --> 01:26:17,120
creating the

01:26:12,000 --> 01:26:17,120
pizza and

01:26:17,760 --> 01:26:24,800
this is also important

01:26:21,199 --> 01:26:29,199
for that so before doing that

01:26:24,800 --> 01:26:29,199
uh let's look at questions

01:26:29,360 --> 01:26:33,120
anyone any questions while i drink some

01:26:34,840 --> 01:26:37,840
water

01:26:46,480 --> 01:26:52,880
so continue one cast a use case is you

01:26:50,960 --> 01:26:54,880
want to have a pizza with spring onions

01:26:52,880 --> 01:26:56,400
but spring onions you really shouldn't

01:26:54,880 --> 01:26:59,760
keep

01:26:56,400 --> 01:26:59,760
you always should make them fresh

01:27:00,400 --> 01:27:04,560
so we can only catch them for a very

01:27:02,320 --> 01:27:05,360
short time that's micro caching it can

01:27:04,560 --> 01:27:09,040
be

01:27:05,360 --> 01:27:09,920
so um and so there could be a potential

01:27:09,040 --> 01:27:11,360
bottleneck

01:27:09,920 --> 01:27:12,960
and that's essentially stampede

01:27:11,360 --> 01:27:13,440
protection so even if you can catch

01:27:12,960 --> 01:27:16,800
something

01:27:13,440 --> 01:27:17,120
only for 10 seconds do it because if you

01:27:16,800 --> 01:27:20,560
have

01:27:17,120 --> 01:27:23,920
1000 users that want to um

01:27:20,560 --> 01:27:26,000
look at this um same thing

01:27:23,920 --> 01:27:28,400
and it's cached for 10 seconds then you

01:27:26,000 --> 01:27:30,000
have one request to the back end

01:27:28,400 --> 01:27:31,679
and not thousand requests to the

01:27:30,000 --> 01:27:33,040
background even if it's only for 10

01:27:31,679 --> 01:27:35,679
seconds so you have

01:27:33,040 --> 01:27:37,760
the difference is if you have thousand

01:27:35,679 --> 01:27:41,360
users every second

01:27:37,760 --> 01:27:44,800
then without a micro cache you have

01:27:41,360 --> 01:27:46,960
1 000 users every second so your web

01:27:44,800 --> 01:27:50,800
server will be burning

01:27:46,960 --> 01:27:53,840
but if you have a cache of 10 seconds

01:27:50,800 --> 01:27:58,080
and you have 1000 users every second

01:27:53,840 --> 01:28:01,199
then um you will have one request

01:27:58,080 --> 01:28:03,280
every 10 seconds so two requests

01:28:01,199 --> 01:28:04,719
one request every 10 seconds that are

01:28:03,280 --> 01:28:06,560
way more manageable

01:28:04,719 --> 01:28:08,800
so please please please don't forget

01:28:06,560 --> 01:28:11,679
about micro caching

01:28:08,800 --> 01:28:13,600
because it's so inefficient to prepare

01:28:11,679 --> 01:28:15,600
lots of pizzas in parallel

01:28:13,600 --> 01:28:17,199
even if we can catch it only for a very

01:28:15,600 --> 01:28:20,239
short time prepare just one

01:28:17,199 --> 01:28:22,320
spring onion pizza and just replicate it

01:28:20,239 --> 01:28:24,560
and then prepare the next one

01:28:22,320 --> 01:28:26,239
so that's really important here's how

01:28:24,560 --> 01:28:28,719
stampede production works in

01:28:26,239 --> 01:28:29,600
in general um this is just the the

01:28:28,719 --> 01:28:33,040
example x

01:28:29,600 --> 01:28:35,679
um like it works um

01:28:33,040 --> 01:28:37,760
but there's a pitfall if your cache is

01:28:35,679 --> 01:28:39,280
invalidate faster than processed weight

01:28:37,760 --> 01:28:41,440
you have a longer build time then you

01:28:39,280 --> 01:28:45,760
can wait endlessly

01:28:41,440 --> 01:28:47,840
so um if uh if the spring onion pizza

01:28:45,760 --> 01:28:48,560
was for whatever reason and validated

01:28:47,840 --> 01:28:51,440
faster than

01:28:48,560 --> 01:28:51,840
could be created then you would all

01:28:51,440 --> 01:28:54,880
those

01:28:51,840 --> 01:28:56,800
thousand users be be waiting for new

01:28:54,880 --> 01:28:57,280
data and then it would be all sleeping

01:28:56,800 --> 01:28:59,600
again

01:28:57,280 --> 01:29:00,800
again again and again that's a very very

01:28:59,600 --> 01:29:03,920
tricky issue

01:29:00,800 --> 01:29:06,960
and actually we just um

01:29:03,920 --> 01:29:08,080
fixed that in drupal 7. um so the

01:29:06,960 --> 01:29:10,560
solution is

01:29:08,080 --> 01:29:12,400
when you're doing micro caching allow

01:29:10,560 --> 01:29:14,560
invalid items

01:29:12,400 --> 01:29:16,400
as i've said before we're never truly

01:29:14,560 --> 01:29:18,320
deleting an item so when we

01:29:16,400 --> 01:29:19,920
invalidate the cache it's still there

01:29:18,320 --> 01:29:21,360
it's still sitting in the database it's

01:29:19,920 --> 01:29:25,120
still taking up space

01:29:21,360 --> 01:29:27,040
it's just not valid anymore um

01:29:25,120 --> 01:29:28,159
but what we can do is we can add this

01:29:27,040 --> 01:29:32,880
little known trick

01:29:28,159 --> 01:29:35,920
connect this to here for the cash get

01:29:32,880 --> 01:29:35,920
and um

01:29:36,000 --> 01:29:40,960
and then we can um check the expiration

01:29:39,360 --> 01:29:44,080
time yourself

01:29:40,960 --> 01:29:45,760
and and that way you you only depending

01:29:44,080 --> 01:29:47,120
this on the expiration time which you've

01:29:45,760 --> 01:29:49,440
set for 10 seconds

01:29:47,120 --> 01:29:52,400
but if anything else invalidates it the

01:29:49,440 --> 01:29:52,960
cash tag invalidation whatever you don't

01:29:52,400 --> 01:29:55,280
care

01:29:52,960 --> 01:29:56,400
you say i'm delivering this for the next

01:29:55,280 --> 01:29:58,400
10 seconds

01:29:56,400 --> 01:29:59,679
so that all users are getting the same

01:29:58,400 --> 01:30:02,000
thing

01:29:59,679 --> 01:30:02,960
and so we just fixed that in drupal 7

01:30:02,000 --> 01:30:05,360
because

01:30:02,960 --> 01:30:06,000
some people that were actually misusing

01:30:05,360 --> 01:30:08,560
the variable

01:30:06,000 --> 01:30:10,880
system and taking lots of variables set

01:30:08,560 --> 01:30:13,760
at runtime and please don't do that

01:30:10,880 --> 01:30:15,600
if you still have 2.75 had endless

01:30:13,760 --> 01:30:18,639
waiting for the variable log because

01:30:15,600 --> 01:30:19,520
essentially 1000 users came when we

01:30:18,639 --> 01:30:21,520
built the cash

01:30:19,520 --> 01:30:23,120
but when the next when the thousand

01:30:21,520 --> 01:30:24,159
users then looked at the cash it was

01:30:23,120 --> 01:30:25,600
already outdated

01:30:24,159 --> 01:30:27,520
so they had to wait again and agree

01:30:25,600 --> 01:30:31,440
again and again again

01:30:27,520 --> 01:30:34,320
so don't forget cashing beyond blue call

01:30:31,440 --> 01:30:35,040
up cash tweak it and shoot has enough

01:30:34,320 --> 01:30:38,800
memory

01:30:35,040 --> 01:30:41,360
mysql very cash disable it

01:30:38,800 --> 01:30:42,560
it is efficient for query caching better

01:30:41,360 --> 01:30:44,719
use a key value and

01:30:42,560 --> 01:30:46,080
cache approach there's also a cache

01:30:44,719 --> 01:30:48,080
module by me on github

01:30:46,080 --> 01:30:50,719
um if you want to do something very

01:30:48,080 --> 01:30:52,800
custom but usually not needed as drupal

01:30:50,719 --> 01:30:54,159
everything is abstracted especially into

01:30:52,800 --> 01:30:55,920
blade 9.

01:30:54,159 --> 01:30:58,560
and browser cache don't forget about

01:30:55,920 --> 01:31:00,480
browser cache use it for images and css

01:30:58,560 --> 01:31:03,040
javascript the service workers who could

01:31:00,480 --> 01:31:06,880
even cache the html browser

01:31:03,040 --> 01:31:08,719
common caching pitfalls ajax forms

01:31:06,880 --> 01:31:11,040
posters are still not cached on drupal

01:31:08,719 --> 01:31:12,560
core so if you have an ajax font

01:31:11,040 --> 01:31:13,920
submission their hands will build the

01:31:12,560 --> 01:31:15,600
whole page

01:31:13,920 --> 01:31:17,760
all of those next things we talked about

01:31:15,600 --> 01:31:20,560
dynamic page cache page cache

01:31:17,760 --> 01:31:21,920
caches they're all not working unless

01:31:20,560 --> 01:31:23,840
you do something yourself

01:31:21,920 --> 01:31:26,480
any render cache on post it's not

01:31:23,840 --> 01:31:28,560
working so this is totally not optimal

01:31:26,480 --> 01:31:30,320
like if you have some ajax and you have

01:31:28,560 --> 01:31:32,320
some t-shirts and you want to have the

01:31:30,320 --> 01:31:34,320
red t-shirt the blue t-shirt

01:31:32,320 --> 01:31:36,000
um then all that would be neat this

01:31:34,320 --> 01:31:38,239
curly parameter but instead you have

01:31:36,000 --> 01:31:41,840
like this huge ajax pose to just

01:31:38,239 --> 01:31:43,520
re-render the page um the nice things

01:31:41,840 --> 01:31:45,600
would be to just use a get

01:31:43,520 --> 01:31:46,719
for this ajax request that's possible

01:31:45,600 --> 01:31:49,120
now you just

01:31:46,719 --> 01:31:51,120
apply the score patch you add data ajax

01:31:49,120 --> 01:31:55,600
type guest to the attributes

01:31:51,120 --> 01:31:57,840
and then the cached get ajax requests

01:31:55,600 --> 01:31:58,960
are coming when changing the product

01:31:57,840 --> 01:32:01,199
variation

01:31:58,960 --> 01:32:02,159
so that works kind of out of the box

01:32:01,199 --> 01:32:05,840
it's really just

01:32:02,159 --> 01:32:07,600
core patch plus this to the element

01:32:05,840 --> 01:32:09,600
but forms are still posed and that's

01:32:07,600 --> 01:32:12,719
real problem and i've

01:32:09,600 --> 01:32:15,920
written a long issue about it and

01:32:12,719 --> 01:32:17,760
thought about it a lot and um

01:32:15,920 --> 01:32:19,600
we have the advantage forms can already

01:32:17,760 --> 01:32:22,960
be out of place for that

01:32:19,600 --> 01:32:26,639
so max h0 they are

01:32:22,960 --> 01:32:28,719
um and essentially whenever something is

01:32:26,639 --> 01:32:30,880
has too much variation or it can't be

01:32:28,719 --> 01:32:32,719
cached and it's an available builder

01:32:30,880 --> 01:32:34,719
core will automatically place all that

01:32:32,719 --> 01:32:36,400
for you no need for you to create

01:32:34,719 --> 01:32:38,960
placeholders

01:32:36,400 --> 01:32:40,800
so um and the form is executed

01:32:38,960 --> 01:32:41,679
essentially as soon as it's encountered

01:32:40,800 --> 01:32:43,360
on the page

01:32:41,679 --> 01:32:45,600
so if you post to home and there's a

01:32:43,360 --> 01:32:48,000
newsletter form sitting in the blog

01:32:45,600 --> 01:32:50,000
at the bottom of the page then it needs

01:32:48,000 --> 01:32:52,800
to rebuild the whole home page

01:32:50,000 --> 01:32:53,679
before it finally sees a newsletter page

01:32:52,800 --> 01:32:56,320
and

01:32:53,679 --> 01:32:56,880
shoots out the newsletter and the manual

01:32:56,320 --> 01:32:59,040
way

01:32:56,880 --> 01:33:00,639
how you could be doing it is you ensure

01:32:59,040 --> 01:33:03,600
the form is rendered as early as

01:33:00,639 --> 01:33:06,480
possible in the page running process

01:33:03,600 --> 01:33:08,400
so and then i was thinking about yeah

01:33:06,480 --> 01:33:10,080
how would i propose it to you for a

01:33:08,400 --> 01:33:12,560
solution

01:33:10,080 --> 01:33:14,080
i came up with a very simple way i still

01:33:12,560 --> 01:33:16,239
have to create the core issue but

01:33:14,080 --> 01:33:18,880
you are the first ones to know about it

01:33:16,239 --> 01:33:23,600
and unless i missed something crucial

01:33:18,880 --> 01:33:25,520
we could have cashable forms by tomorrow

01:33:23,600 --> 01:33:27,760
because it's actually very simple to

01:33:25,520 --> 01:33:30,719
have cacheable forms

01:33:27,760 --> 01:33:33,920
um we add a cache tag for every form

01:33:30,719 --> 01:33:35,840
like form pixel newsletter

01:33:33,920 --> 01:33:37,840
and if the dynamic page cache render

01:33:35,840 --> 01:33:38,800
cache does not see a farm cache tag on

01:33:37,840 --> 01:33:41,280
the cache tab

01:33:38,800 --> 01:33:42,480
then we allow caching on post because

01:33:41,280 --> 01:33:45,120
there's nothing

01:33:42,480 --> 01:33:47,120
that could be different on a post than

01:33:45,120 --> 01:33:49,920
on a get if there's no form

01:33:47,120 --> 01:33:50,960
and that might be need to be opt-in but

01:33:49,920 --> 01:33:53,679
that's okay

01:33:50,960 --> 01:33:54,880
you could just update through that um so

01:33:53,679 --> 01:33:58,480
the max ages

01:33:54,880 --> 01:34:00,400
is uh is uh more than zero and

01:33:58,480 --> 01:34:02,400
before i throw the very long course

01:34:00,400 --> 01:34:04,239
you've with some very complicated way

01:34:02,400 --> 01:34:05,760
and now preparing this presentation it

01:34:04,239 --> 01:34:09,199
came up with this i was like

01:34:05,760 --> 01:34:11,199
what okay but now the pizza newsletter

01:34:09,199 --> 01:34:12,960
block from execution is then just we get

01:34:11,199 --> 01:34:15,040
the cash get content with

01:34:12,960 --> 01:34:16,880
placeholders and because we have the

01:34:15,040 --> 01:34:18,320
form id right here

01:34:16,880 --> 01:34:20,400
and that is what we get when we are

01:34:18,320 --> 01:34:22,719
executing a form that we

01:34:20,400 --> 01:34:24,880
know where we need to find this form

01:34:22,719 --> 01:34:27,360
that's the form id essentially

01:34:24,880 --> 01:34:29,280
or maybe from build id but whatever we

01:34:27,360 --> 01:34:32,320
can store whatever we want in the

01:34:29,280 --> 01:34:34,239
cache text here we just check if it's in

01:34:32,320 --> 01:34:36,639
the main response no it's not

01:34:34,239 --> 01:34:37,840
so we can just return the content as

01:34:36,639 --> 01:34:41,520
usual and then we just

01:34:37,840 --> 01:34:43,040
execute the placeholders and we see the

01:34:41,520 --> 01:34:44,719
newsletter form is actually in a

01:34:43,040 --> 01:34:47,760
placeholder there and we

01:34:44,719 --> 01:34:50,080
execute it and that's it and that way we

01:34:47,760 --> 01:34:53,199
don't have to build the whole form again

01:34:50,080 --> 01:34:55,040
to do that and i might still be missing

01:34:53,199 --> 01:34:56,960
something for the implementation but

01:34:55,040 --> 01:34:59,280
the architecture looks very very solid

01:34:56,960 --> 01:35:02,320
to me

01:34:59,280 --> 01:35:03,440
tries a lot to think about things where

01:35:02,320 --> 01:35:06,320
this would break but

01:35:03,440 --> 01:35:07,360
couldn't find one so um yeah this could

01:35:06,320 --> 01:35:10,719
be

01:35:07,360 --> 01:35:14,159
really really really game-changing

01:35:10,719 --> 01:35:17,470
so yeah secretly um

01:35:14,159 --> 01:35:18,639
other coming caching pad first is

01:35:17,470 --> 01:35:21,040
[Music]

01:35:18,639 --> 01:35:23,080
plan your caching strategy now what

01:35:21,040 --> 01:35:26,400
depends on what

01:35:23,080 --> 01:35:27,600
dependencies essentially when does this

01:35:26,400 --> 01:35:30,239
expire

01:35:27,600 --> 01:35:31,760
always think about that again ask

01:35:30,239 --> 01:35:34,880
yourselves a question

01:35:31,760 --> 01:35:36,719
what does core need to know to know when

01:35:34,880 --> 01:35:38,239
to refresh this cache

01:35:36,719 --> 01:35:39,840
now what's not cachable create

01:35:38,239 --> 01:35:41,360
placeholders right

01:35:39,840 --> 01:35:43,280
and then now when something needs to be

01:35:41,360 --> 01:35:45,920
invalidated now

01:35:43,280 --> 01:35:46,960
your variations and then there's a knife

01:35:45,920 --> 01:35:48,960
module by vim

01:35:46,960 --> 01:35:51,440
the renderers module and can be really

01:35:48,960 --> 01:35:55,040
really nice helpful

01:35:51,440 --> 01:35:57,840
um so yeah that's it so more

01:35:55,040 --> 01:35:57,840
questions

01:35:58,239 --> 01:36:05,280
let me see i post message response and

01:36:02,719 --> 01:36:08,080
rest api cache by default

01:36:05,280 --> 01:36:08,560
no they're not posts are not cached in

01:36:08,080 --> 01:36:11,960
course

01:36:08,560 --> 01:36:13,199
much as you know uh

01:36:11,960 --> 01:36:15,600
[Music]

01:36:13,199 --> 01:36:15,600
plugin

01:36:18,719 --> 01:36:25,199
i'll be looking at the uh drupal

01:36:23,280 --> 01:36:26,320
i'm quotes to start to look at that

01:36:25,199 --> 01:36:29,600
later

01:36:26,320 --> 01:36:31,760
um but i don't know what i

01:36:29,600 --> 01:36:32,880
would need to look obviously cdn's more

01:36:31,760 --> 01:36:36,880
syrian questions

01:36:32,880 --> 01:36:39,199
maybe coming to that in a moment um

01:36:36,880 --> 01:36:40,719
postmate responses cash by default i

01:36:39,199 --> 01:36:42,800
don't think they are

01:36:40,719 --> 01:36:44,159
as far as i know core is not catching

01:36:42,800 --> 01:36:49,600
any post responses

01:36:44,159 --> 01:36:49,600
at all um to my knowledge

01:36:50,840 --> 01:36:57,280
okay

01:36:53,040 --> 01:37:00,880
next part never seen before cut that

01:36:57,280 --> 01:37:02,639
cdn variations and also get user caching

01:37:00,880 --> 01:37:03,920
don't have too much time but should be

01:37:02,639 --> 01:37:05,600
okay

01:37:03,920 --> 01:37:07,119
back to pizza we offer our pizza and

01:37:05,600 --> 01:37:08,880
supermarkets around the world we're

01:37:07,119 --> 01:37:11,440
growing further

01:37:08,880 --> 01:37:13,760
we know the market research the u.s like

01:37:11,440 --> 01:37:18,080
the pizza differently than in the uk

01:37:13,760 --> 01:37:18,080
so we essentially won um

01:37:19,040 --> 01:37:22,880
we want to have the um

01:37:23,040 --> 01:37:27,119
a different home page that's exactly the

01:37:25,840 --> 01:37:29,679
question here

01:37:27,119 --> 01:37:30,639
uh front page per country customer p log

01:37:29,679 --> 01:37:33,760
app

01:37:30,639 --> 01:37:35,840
so yeah we offer another variation of

01:37:33,760 --> 01:37:38,159
the pizza for different regions

01:37:35,840 --> 01:37:39,840
that's exactly this use case so

01:37:38,159 --> 01:37:41,520
variation is cdn

01:37:39,840 --> 01:37:44,000
and the real life example is obviously

01:37:41,520 --> 01:37:46,239
drupal commas all pages vary by region

01:37:44,000 --> 01:37:48,080
as the currency of surprise is different

01:37:46,239 --> 01:37:49,679
and the magic inside of drupal for that

01:37:48,080 --> 01:37:52,560
is required cache contacts

01:37:49,679 --> 01:37:53,760
so we just create a pizza region um

01:37:52,560 --> 01:37:56,719
cache context

01:37:53,760 --> 01:37:58,080
like we've seen before and we make that

01:37:56,719 --> 01:38:00,560
dependent just on the

01:37:58,080 --> 01:38:02,719
incoming quest header which is

01:38:00,560 --> 01:38:04,960
essentially the usap

01:38:02,719 --> 01:38:07,119
and then we have this pizza region here

01:38:04,960 --> 01:38:09,199
and whatever is cash behind drupal it

01:38:07,119 --> 01:38:11,199
will be cashed by this pizza region so i

01:38:09,199 --> 01:38:14,320
don't even have to think about it

01:38:11,199 --> 01:38:17,440
my cash is just split up on per region

01:38:14,320 --> 01:38:19,440
so um that's really nice if i now which

01:38:17,440 --> 01:38:19,920
parts are only reason specific i can

01:38:19,440 --> 01:38:21,920
also

01:38:19,920 --> 01:38:23,840
just edit within the render chain where

01:38:21,920 --> 01:38:26,159
i know this context is needed

01:38:23,840 --> 01:38:29,520
but if i want to be really sure i just

01:38:26,159 --> 01:38:33,360
added to that and call it a day

01:38:29,520 --> 01:38:35,520
um the problem is cdns do not easily

01:38:33,360 --> 01:38:37,520
support variation on things that are

01:38:35,520 --> 01:38:40,080
so easy to make in drupal as a cache

01:38:37,520 --> 01:38:40,080
context

01:38:40,880 --> 01:38:47,280
so the simplest

01:38:44,400 --> 01:38:48,320
is um if you vary by url for language

01:38:47,280 --> 01:38:52,159
and reason

01:38:48,320 --> 01:38:54,320
so if you don't don't do

01:38:52,159 --> 01:38:55,600
english really nice product one which is

01:38:54,320 --> 01:38:58,719
different by reason

01:38:55,600 --> 01:38:59,760
but instead directly put the region in

01:38:58,719 --> 01:39:03,040
the url

01:38:59,760 --> 01:39:04,000
and you just forward to it your life

01:39:03,040 --> 01:39:06,719
will be so

01:39:04,000 --> 01:39:07,920
much simpler if a marketing reason that

01:39:06,719 --> 01:39:10,080
not possible

01:39:07,920 --> 01:39:10,960
there are other ways to achieve the same

01:39:10,080 --> 01:39:13,920
that if you

01:39:10,960 --> 01:39:15,679
can do it do it this way and you'll

01:39:13,920 --> 01:39:16,960
you'll be so much happier on that you

01:39:15,679 --> 01:39:18,719
just have slash

01:39:16,960 --> 01:39:20,480
and you forward to the right region and

01:39:18,719 --> 01:39:22,960
the right language we accept language

01:39:20,480 --> 01:39:25,600
etc i can even do that in a cdn

01:39:22,960 --> 01:39:27,199
or whatever like that and then you will

01:39:25,600 --> 01:39:29,040
have an easy loss

01:39:27,199 --> 01:39:30,880
but the complex way is if you want to

01:39:29,040 --> 01:39:33,840
vary by regional sites here

01:39:30,880 --> 01:39:35,199
cdn is you set a cookie pizza region and

01:39:33,840 --> 01:39:37,600
then you spear to

01:39:35,199 --> 01:39:38,239
to the request you all again then you

01:39:37,600 --> 01:39:40,239
convert

01:39:38,239 --> 01:39:41,760
pizza region cookie to a header in the

01:39:40,239 --> 01:39:44,880
vcl

01:39:41,760 --> 01:39:47,119
then the you said this custom header x

01:39:44,880 --> 01:39:48,000
pizza which new s which is what drupal

01:39:47,119 --> 01:39:50,080
sees

01:39:48,000 --> 01:39:52,000
and then if drupal knows that this page

01:39:50,080 --> 01:39:54,480
is varying by this pizza region

01:39:52,000 --> 01:39:55,280
then sent custom header very expensive

01:39:54,480 --> 01:39:58,159
region

01:39:55,280 --> 01:39:58,560
instead of very cooking there's another

01:39:58,159 --> 01:40:01,840
way

01:39:58,560 --> 01:40:04,719
uh using varnish in restarting things

01:40:01,840 --> 01:40:06,719
um you do one request cache per session

01:40:04,719 --> 01:40:09,040
to an endpoint it returns a spitzer

01:40:06,719 --> 01:40:11,360
region you copy those to request object

01:40:09,040 --> 01:40:13,440
and it's pretty complicated but again

01:40:11,360 --> 01:40:16,639
the important thing is drupal sees

01:40:13,440 --> 01:40:17,920
each pizza region you ask um your very

01:40:16,639 --> 01:40:21,360
best pizza

01:40:17,920 --> 01:40:25,040
reason and same again

01:40:21,360 --> 01:40:28,719
so cora could automate that for you

01:40:25,040 --> 01:40:30,560
that is why in in forest side i've

01:40:28,719 --> 01:40:32,000
originally created this cache context

01:40:30,560 --> 01:40:35,040
system to collapse on

01:40:32,000 --> 01:40:38,080
either url or session in core

01:40:35,040 --> 01:40:38,800
unfortunately no one including me worked

01:40:38,080 --> 01:40:41,920
on it

01:40:38,800 --> 01:40:43,760
um but in theory with all cost contacts

01:40:41,920 --> 01:40:45,600
you have just cache context hierarchy

01:40:43,760 --> 01:40:46,480
and all collapse either on being user

01:40:45,600 --> 01:40:50,560
specific

01:40:46,480 --> 01:40:53,600
or session specific or request specific

01:40:50,560 --> 01:40:56,000
page specific and that way

01:40:53,600 --> 01:40:57,280
you can essentially um could have cache

01:40:56,000 --> 01:40:58,800
context zero

01:40:57,280 --> 01:41:00,880
then you could have like this cache

01:40:58,800 --> 01:41:03,679
context equals value

01:41:00,880 --> 01:41:04,119
and because it's a it's a fixed value

01:41:03,679 --> 01:41:07,360
it's

01:41:04,119 --> 01:41:08,880
xcc0 to xcc whatever

01:41:07,360 --> 01:41:10,960
you could have a varnish configuration

01:41:08,880 --> 01:41:14,480
which automatically copies this

01:41:10,960 --> 01:41:15,760
headers over so it's possible to

01:41:14,480 --> 01:41:18,400
automate

01:41:15,760 --> 01:41:19,600
um and you could even do it automated

01:41:18,400 --> 01:41:21,679
that if you don't have enough

01:41:19,600 --> 01:41:22,480
information drupal could sell the cdn

01:41:21,679 --> 01:41:24,239
hey

01:41:22,480 --> 01:41:25,760
this actually would have buried on that

01:41:24,239 --> 01:41:27,360
then it would be getting those headers

01:41:25,760 --> 01:41:30,800
etc like that

01:41:27,360 --> 01:41:33,199
um and yeah

01:41:30,800 --> 01:41:34,320
the nice thing about that is if we could

01:41:33,199 --> 01:41:37,040
do this

01:41:34,320 --> 01:41:37,600
we could have like user equals two would

01:41:37,040 --> 01:41:39,600
that not

01:41:37,600 --> 01:41:41,520
all be needed for a syndicate user

01:41:39,600 --> 01:41:45,679
caching and yes

01:41:41,520 --> 01:41:47,440
that's exactly what's needed so um

01:41:45,679 --> 01:41:50,159
that brings us to authenticate user

01:41:47,440 --> 01:41:52,239
caching and dynamic page cache gets you

01:41:50,159 --> 01:41:54,639
90 percent of the way already

01:41:52,239 --> 01:41:55,360
that's great work for triple eight nine

01:41:54,639 --> 01:41:58,480
ten

01:41:55,360 --> 01:42:00,960
we have oscars essentially in core

01:41:58,480 --> 01:42:02,320
dynamic page cache is an authenticate

01:42:00,960 --> 01:42:04,880
user cache

01:42:02,320 --> 01:42:07,199
so all pages are potentially different

01:42:04,880 --> 01:42:09,119
by user with the preference

01:42:07,199 --> 01:42:11,440
and with the placeholders we can already

01:42:09,119 --> 01:42:13,600
split the personalized and static

01:42:11,440 --> 01:42:17,119
sections but now the question is how do

01:42:13,600 --> 01:42:20,159
we integrate that into the cdn

01:42:17,119 --> 01:42:21,920
and um the authenticate user caching in

01:42:20,159 --> 01:42:24,400
the cdn needs two things

01:42:21,920 --> 01:42:26,639
it needs variation in the placeholders

01:42:24,400 --> 01:42:30,159
and the way to retrieve them

01:42:26,639 --> 01:42:33,440
so um we recap real quick

01:42:30,159 --> 01:42:35,280
we have xcc user 2 drupal returns xcc

01:42:33,440 --> 01:42:38,960
user

01:42:35,280 --> 01:42:42,000
we we set a cookie cc user

01:42:38,960 --> 01:42:44,320
we convert it to a cookie we set it etc

01:42:42,000 --> 01:42:44,320
and

01:42:45,119 --> 01:42:49,360
it's terribly insecure because if i just

01:42:47,600 --> 01:42:52,239
put the uid in the cookie

01:42:49,360 --> 01:42:54,320
then i could impersonate any user i

01:42:52,239 --> 01:42:56,000
could be user three it could be whatever

01:42:54,320 --> 01:42:58,320
so there's two ways to solve it which

01:42:56,000 --> 01:42:59,119
are very similar you just use a secret

01:42:58,320 --> 01:43:01,679
hash

01:42:59,119 --> 01:43:02,639
context name and value which you then

01:43:01,679 --> 01:43:04,560
unfollow

01:43:02,639 --> 01:43:06,400
or you use the signed cookie with the

01:43:04,560 --> 01:43:10,320
secret hash

01:43:06,400 --> 01:43:12,320
and very similar again so um

01:43:10,320 --> 01:43:13,600
um for example you could have this cache

01:43:12,320 --> 01:43:15,360
context user

01:43:13,600 --> 01:43:16,960
and you have the id2 and then you have

01:43:15,360 --> 01:43:19,760
the magic uh

01:43:16,960 --> 01:43:21,760
hash here and if that matches then um

01:43:19,760 --> 01:43:24,000
it's accepted and if it doesn't match us

01:43:21,760 --> 01:43:28,080
it doesn't and i wouldn't know the hash

01:43:24,000 --> 01:43:30,639
of user3 so i couldn't impersonate them

01:43:28,080 --> 01:43:33,679
the other parts variation we have the

01:43:30,639 --> 01:43:36,400
other part is placeholders

01:43:33,679 --> 01:43:37,600
there's essentially two ways to do um

01:43:36,400 --> 01:43:39,440
placeholders

01:43:37,600 --> 01:43:40,880
with the cdn you could have an ajax

01:43:39,440 --> 01:43:42,800
request or an esi

01:43:40,880 --> 01:43:45,679
edge site include which essentially is a

01:43:42,800 --> 01:43:49,040
cdn doing a subrequest inside

01:43:45,679 --> 01:43:52,560
or you can use javascript and cookies

01:43:49,040 --> 01:43:54,800
but variation in cnn is always the first

01:43:52,560 --> 01:43:56,239
so the simple ease i approach is it's

01:43:54,800 --> 01:43:58,960
not implemented i have some

01:43:56,239 --> 01:43:59,600
very old code on on line set where the

01:43:58,960 --> 01:44:02,960
caching

01:43:59,600 --> 01:44:05,360
cache edo is also an esi module

01:44:02,960 --> 01:44:06,239
um you take a hash of a serialized lady

01:44:05,360 --> 01:44:08,080
builder

01:44:06,239 --> 01:44:10,320
you store the lazy builder in the key

01:44:08,080 --> 01:44:12,560
value store and then you just execute

01:44:10,320 --> 01:44:13,360
the later bullet from root ease i slash

01:44:12,560 --> 01:44:16,000
hash

01:44:13,360 --> 01:44:17,280
i never had a practical use case for it

01:44:16,000 --> 01:44:20,480
unfortunately

01:44:17,280 --> 01:44:23,520
but this is the simplest way of doing it

01:44:20,480 --> 01:44:26,080
and the placeholder strategy is also

01:44:23,520 --> 01:44:27,520
very easily added and just look at big

01:44:26,080 --> 01:44:31,040
pipe and you see how

01:44:27,520 --> 01:44:33,280
placeholder strategies are defined

01:44:31,040 --> 01:44:34,800
the problem is with esi is you don't

01:44:33,280 --> 01:44:35,600
have all the cache text in the end

01:44:34,800 --> 01:44:38,320
response

01:44:35,600 --> 01:44:39,920
so if you have several layers of caching

01:44:38,320 --> 01:44:41,840
that could lead to problems

01:44:39,920 --> 01:44:43,280
because the headers from the subresponse

01:44:41,840 --> 01:44:47,199
are not included

01:44:43,280 --> 01:44:49,119
and the very could be very inefficient

01:44:47,199 --> 01:44:51,520
because all data is stored in the same

01:44:49,119 --> 01:44:53,520
object in most cdns

01:44:51,520 --> 01:44:54,560
so one way to solve that is to

01:44:53,520 --> 01:44:57,760
essentially

01:44:54,560 --> 01:44:58,960
change the path to include what analysis

01:44:57,760 --> 01:45:01,920
path would be varying

01:44:58,960 --> 01:45:03,920
on and then just put in like a

01:45:01,920 --> 01:45:04,960
placeholder like trick like syntax and

01:45:03,920 --> 01:45:07,199
then you need to

01:45:04,960 --> 01:45:09,440
tweak use cdn configuration to do it i

01:45:07,199 --> 01:45:12,719
think we had to do it once by now

01:45:09,440 --> 01:45:13,440
sorry um but just want to give some

01:45:12,719 --> 01:45:15,760
ideas

01:45:13,440 --> 01:45:17,920
um the other part is you could have a

01:45:15,760 --> 01:45:18,719
ajax placeholder strategy probably much

01:45:17,920 --> 01:45:21,360
sinclair

01:45:18,719 --> 01:45:23,119
simpler you execute a lazy builder from

01:45:21,360 --> 01:45:25,199
ajax on demand hash

01:45:23,119 --> 01:45:27,119
and then you deliver it like the big

01:45:25,199 --> 01:45:29,840
pipe ajax again

01:45:27,119 --> 01:45:31,760
big pipe is essentially inline streamed

01:45:29,840 --> 01:45:34,239
ajax responses so

01:45:31,760 --> 01:45:36,159
nothing would stop you from using the

01:45:34,239 --> 01:45:38,239
same approach of

01:45:36,159 --> 01:45:39,360
of creating an eject placeholder

01:45:38,239 --> 01:45:42,880
strategy

01:45:39,360 --> 01:45:45,600
and calling out to it but please ensure

01:45:42,880 --> 01:45:49,920
that those ajax responses are cached

01:45:45,600 --> 01:45:52,960
in the cdn that's so so so so crucial

01:45:49,920 --> 01:45:56,480
because um if they are not

01:45:52,960 --> 01:45:59,600
cached in the cdn um these

01:45:56,480 --> 01:46:03,199
ajax responses that you get there um

01:45:59,600 --> 01:46:05,600
then you are not really

01:46:03,199 --> 01:46:08,080
winning something if you have 12 objects

01:46:05,600 --> 01:46:11,199
request instead of one page request

01:46:08,080 --> 01:46:13,119
and i've seen sites with old all sketch

01:46:11,199 --> 01:46:14,239
and drupal 7 then actually got slower

01:46:13,119 --> 01:46:16,880
with oauth cache

01:46:14,239 --> 01:46:17,840
then faster because um they were

01:46:16,880 --> 01:46:20,800
essentially doing

01:46:17,840 --> 01:46:23,600
way more requests than if they were

01:46:20,800 --> 01:46:26,719
quitting the page directly

01:46:23,600 --> 01:46:28,960
uh yeah sorry

01:46:26,719 --> 01:46:30,239
way over my heart is a really really

01:46:28,960 --> 01:46:33,440
really no simple way

01:46:30,239 --> 01:46:35,679
and yes this

01:46:33,440 --> 01:46:37,840
let's quickly recap what we need for us

01:46:35,679 --> 01:46:39,760
and get user caching we need variation

01:46:37,840 --> 01:46:40,560
and we need placeholder way to retreat

01:46:39,760 --> 01:46:43,840
from

01:46:40,560 --> 01:46:45,840
and the easiest easiest way and several

01:46:43,840 --> 01:46:48,639
of my commercial clients do that

01:46:45,840 --> 01:46:51,040
is they don't vary at all for any pages

01:46:48,639 --> 01:46:53,199
that are not user specific

01:46:51,040 --> 01:46:54,400
they say card end user we don't catch

01:46:53,199 --> 01:46:57,360
them with cdn

01:46:54,400 --> 01:46:58,960
but for slash and myosum project it's

01:46:57,360 --> 01:47:01,440
the same for every user

01:46:58,960 --> 01:47:03,520
we just have a little shopping bag and

01:47:01,440 --> 01:47:07,520
you can click on it to get to your cards

01:47:03,520 --> 01:47:10,000
and maybe we have some javascript for

01:47:07,520 --> 01:47:12,000
for storing um how many items or how

01:47:10,000 --> 01:47:12,320
much value you have in in the code and

01:47:12,000 --> 01:47:15,440
we

01:47:12,320 --> 01:47:15,840
stored in a cookie for you but we are

01:47:15,440 --> 01:47:18,400
giving

01:47:15,840 --> 01:47:19,920
delivering server side the same page for

01:47:18,400 --> 01:47:23,360
every user

01:47:19,920 --> 01:47:25,199
and that's super secure because

01:47:23,360 --> 01:47:27,280
you can even automate that and again a

01:47:25,199 --> 01:47:28,800
little bit of secret reveal here

01:47:27,280 --> 01:47:31,760
because we could have that in court

01:47:28,800 --> 01:47:34,239
probably we should um

01:47:31,760 --> 01:47:36,159
the way to to do authenticate user

01:47:34,239 --> 01:47:38,639
caching with course essentially

01:47:36,159 --> 01:47:39,360
you ensure that no user cache context is

01:47:38,639 --> 01:47:41,760
present or

01:47:39,360 --> 01:47:43,600
no other cache context with blacklist or

01:47:41,760 --> 01:47:44,880
only wireless cache content are present

01:47:43,600 --> 01:47:47,840
or whatever

01:47:44,880 --> 01:47:49,199
and we say that only authenticate users

01:47:47,840 --> 01:47:51,840
role is used for this so

01:47:49,199 --> 01:47:53,679
only if those two conditions are met and

01:47:51,840 --> 01:47:56,159
then we're doing this

01:47:53,679 --> 01:47:57,920
let me just remove the very cookie hana

01:47:56,159 --> 01:47:59,440
we overwrite the cache control header

01:47:57,920 --> 01:48:02,960
with public max hd

01:47:59,440 --> 01:48:05,840
uh equals 600 and that's it

01:48:02,960 --> 01:48:07,440
and then um we know that this is no

01:48:05,840 --> 01:48:10,239
longer varied by cookie

01:48:07,440 --> 01:48:12,239
it's public it's my 600 and that's

01:48:10,239 --> 01:48:12,719
authenticate user caching that will work

01:48:12,239 --> 01:48:16,000
for

01:48:12,719 --> 01:48:18,880
every cdn and um some of

01:48:16,000 --> 01:48:20,000
uh my biggest enterprise clients are

01:48:18,880 --> 01:48:22,480
using basic

01:48:20,000 --> 01:48:24,080
strategy essentially they don't vary it

01:48:22,480 --> 01:48:26,400
over for the pages

01:48:24,080 --> 01:48:27,199
they deliver the same for every user and

01:48:26,400 --> 01:48:30,080
it's a

01:48:27,199 --> 01:48:31,040
simplest way to think about what's h

01:48:30,080 --> 01:48:34,159
users

01:48:31,040 --> 01:48:35,119
caching in that um even though this

01:48:34,159 --> 01:48:37,199
whole placeholder

01:48:35,119 --> 01:48:38,639
is nice but if you need the very very

01:48:37,199 --> 01:48:42,239
best performance and

01:48:38,639 --> 01:48:44,840
the simplest way is to not do it

01:48:42,239 --> 01:48:46,000
and that's also the emma stones amazon

01:48:44,840 --> 01:48:48,560
strategy

01:48:46,000 --> 01:48:50,400
by the way so uh if you load a page in

01:48:48,560 --> 01:48:52,800
amazon takes a little bit longer to

01:48:50,400 --> 01:48:55,119
load then it will say hello username

01:48:52,800 --> 01:48:58,080
instead of hello fabian

01:48:55,119 --> 01:49:00,960
i was pretty curious to see that but

01:48:58,080 --> 01:49:03,280
yeah that's how they do it um

01:49:00,960 --> 01:49:04,960
so um and you can just use javascript

01:49:03,280 --> 01:49:07,199
for simple things like the username

01:49:04,960 --> 01:49:09,119
unless you need to ensure that it's also

01:49:07,199 --> 01:49:11,199
usable without javascript

01:49:09,119 --> 01:49:13,199
you can also use your own very simple

01:49:11,199 --> 01:49:15,599
placeholder expertise you just put in

01:49:13,199 --> 01:49:16,320
dif id pizza model username add some

01:49:15,599 --> 01:49:18,719
javascript

01:49:16,320 --> 01:49:19,520
drupal behaviors like usual jquery

01:49:18,719 --> 01:49:23,360
whatever

01:49:19,520 --> 01:49:26,239
put it in a cookie and that works and um

01:49:23,360 --> 01:49:27,920
essentially um for our enterprise

01:49:26,239 --> 01:49:29,840
clients we use a little module called

01:49:27,920 --> 01:49:32,320
cash flow cookie handling ports are very

01:49:29,840 --> 01:49:35,599
welcome it's a very simple module

01:49:32,320 --> 01:49:37,520
and um would probably mostly be even

01:49:35,599 --> 01:49:40,480
working out of the box in drupal 8

01:49:37,520 --> 01:49:42,320
because it doesn't really have any bad

01:49:40,480 --> 01:49:45,760
parts except for some uh

01:49:42,320 --> 01:49:47,199
ajax things that allow gives you some

01:49:45,760 --> 01:49:49,119
javascript functions

01:49:47,199 --> 01:49:51,599
this essentially allows your user logs

01:49:49,119 --> 01:49:53,360
in there's one ajax request done for all

01:49:51,599 --> 01:49:54,960
the personalized data

01:49:53,360 --> 01:49:56,880
and that is still blocking the page

01:49:54,960 --> 01:49:57,920
request and afterwards it just gets that

01:49:56,880 --> 01:49:59,840
from the cookie

01:49:57,920 --> 01:50:01,520
and it address changes server side the

01:49:59,840 --> 01:50:04,960
server sends a special

01:50:01,520 --> 01:50:08,239
uh sends new uh cookies and that's it

01:50:04,960 --> 01:50:10,800
so that solves it yeah

01:50:08,239 --> 01:50:11,520
and um this is kind of like um the

01:50:10,800 --> 01:50:14,719
simplest

01:50:11,520 --> 01:50:16,639
way to do authenticated users

01:50:14,719 --> 01:50:18,400
you think of variation in placeholders

01:50:16,639 --> 01:50:19,599
and obviously because we have

01:50:18,400 --> 01:50:21,760
placeholders already

01:50:19,599 --> 01:50:23,760
you don't need to do your own you could

01:50:21,760 --> 01:50:25,679
just use the javascript placeholding

01:50:23,760 --> 01:50:26,719
strategy which would output those

01:50:25,679 --> 01:50:28,639
cookies

01:50:26,719 --> 01:50:30,719
uh or it would just put out output

01:50:28,639 --> 01:50:33,840
placeholders for things you know

01:50:30,719 --> 01:50:34,480
and you can can do it yourself but in

01:50:33,840 --> 01:50:38,400
essence

01:50:34,480 --> 01:50:41,440
um the important part is um

01:50:38,400 --> 01:50:45,280
you don't need to um

01:50:41,440 --> 01:50:46,159
you don't need to um to overcomplicate

01:50:45,280 --> 01:50:48,480
it

01:50:46,159 --> 01:50:50,080
you can do it and core has all the

01:50:48,480 --> 01:50:52,960
capabilities to do the

01:50:50,080 --> 01:50:54,320
very nicest things for this um but you

01:50:52,960 --> 01:50:57,440
can also just

01:50:54,320 --> 01:50:59,440
keep it simple oh have fun

01:50:57,440 --> 01:51:02,080
and i'll make a pizza now because i'm

01:50:59,440 --> 01:51:04,480
also gotten really really hungry so

01:51:02,080 --> 01:51:05,199
that's the end so if you have any more

01:51:04,480 --> 01:51:07,599
questions

01:51:05,199 --> 01:51:10,080
uh why would you take more questions you

01:51:07,599 --> 01:51:12,639
can follow me at fabian fans

01:51:10,080 --> 01:51:12,639
on twitter

01:51:13,280 --> 01:51:18,480
uh yeah so this is answered um

01:51:16,400 --> 01:51:20,159
yes you can build a context for that

01:51:18,480 --> 01:51:23,360
we've just shown how

01:51:20,159 --> 01:51:24,639
um yep we can differ have a different

01:51:23,360 --> 01:51:26,800
front page

01:51:24,639 --> 01:51:29,040
cdn's need definitely need to know about

01:51:26,800 --> 01:51:31,280
cache context too

01:51:29,040 --> 01:51:33,760
and the easiest is if you find some way

01:51:31,280 --> 01:51:35,520
to vary it by url because cdn's already

01:51:33,760 --> 01:51:40,560
varied by you all so

01:51:35,520 --> 01:51:40,560
that's working so then we have this here

01:51:41,280 --> 01:51:46,800
uh questions more questions

01:51:44,400 --> 01:51:49,040
anyone what questions you ever want to

01:51:46,800 --> 01:51:49,040
ask

01:52:00,080 --> 01:52:04,880
wonderful content fabian um what call to

01:52:03,360 --> 01:52:08,000
action would you

01:52:04,880 --> 01:52:10,800
offer to the crowd oh

01:52:08,000 --> 01:52:11,119
um i don't know the experience level but

01:52:10,800 --> 01:52:13,679
um

01:52:11,119 --> 01:52:15,280
if anyone wants to help out with either

01:52:13,679 --> 01:52:17,040
the chain fast

01:52:15,280 --> 01:52:18,320
have been sitting there for over a year

01:52:17,040 --> 01:52:20,639
by now or

01:52:18,320 --> 01:52:20,639
um

01:52:23,840 --> 01:52:27,040
or um with any any of the other things

01:52:26,400 --> 01:52:28,960
or want to

01:52:27,040 --> 01:52:31,280
want to create at least the core issue

01:52:28,960 --> 01:52:32,719
with the secret reveal here

01:52:31,280 --> 01:52:34,639
uh please be very welcome i'm

01:52:32,719 --> 01:52:36,239
unfortunately very busy but

01:52:34,639 --> 01:52:39,360
unfortunately i still can't have up time

01:52:36,239 --> 01:52:41,760
for quadruple

01:52:39,360 --> 01:52:42,480
uh what bit time i gonna get uh i don't

01:52:41,760 --> 01:52:45,840
know

01:52:42,480 --> 01:52:45,840
margarita probably

01:52:46,960 --> 01:52:50,960
maybe make it vegan let's see

01:52:54,400 --> 01:52:58,800
abc you don't persist with clear command

01:52:56,880 --> 01:53:01,040
line requests so chain first strategy is

01:52:58,800 --> 01:53:02,320
not desirable for contests such as

01:53:01,040 --> 01:53:05,679
rights

01:53:02,320 --> 01:53:08,719
um yes that's unfortunately right

01:53:05,679 --> 01:53:12,080
so um in theory

01:53:08,719 --> 01:53:12,719
nothing would stop apcu from uh using

01:53:12,080 --> 01:53:15,760
the same

01:53:12,719 --> 01:53:19,920
thing as white is running in php fpm

01:53:15,760 --> 01:53:23,040
so it could user named space as well

01:53:19,920 --> 01:53:24,560
um no one has implemented that however a

01:53:23,040 --> 01:53:27,599
little bit unfortunate but yeah

01:53:24,560 --> 01:53:30,880
reality right now

01:53:27,599 --> 01:53:32,480
uh however um what you could do is um

01:53:30,880 --> 01:53:35,280
and i've tested performance

01:53:32,480 --> 01:53:36,480
um it's a very linux specific thing but

01:53:35,280 --> 01:53:38,880
you can just use

01:53:36,480 --> 01:53:40,080
create created very little module which

01:53:38,880 --> 01:53:43,119
is like apc

01:53:40,080 --> 01:53:46,480
file cache and mpcu cache which is

01:53:43,119 --> 01:53:49,119
shm file caching shm cache and you just

01:53:46,480 --> 01:53:50,480
write files to dev hsm it works

01:53:49,119 --> 01:53:53,280
amazingly well

01:53:50,480 --> 01:53:54,960
and is pretty fast so if you want to

01:53:53,280 --> 01:53:56,560
have uh

01:53:54,960 --> 01:53:58,320
and probably we should consider that

01:53:56,560 --> 01:54:00,480
even for core because

01:53:58,320 --> 01:54:01,840
as you said apc is pretty much useless

01:54:00,480 --> 01:54:05,199
for command line

01:54:01,840 --> 01:54:06,080
and if you say shared memory is

01:54:05,199 --> 01:54:09,280
available

01:54:06,080 --> 01:54:11,280
then we could could essentially um do

01:54:09,280 --> 01:54:12,560
something opt in for that or at least

01:54:11,280 --> 01:54:13,679
make it very simple to do with the

01:54:12,560 --> 01:54:16,880
contract module

01:54:13,679 --> 01:54:16,880
so that's a great idea

01:54:18,400 --> 01:54:21,679
but i don't think variation cache

01:54:20,000 --> 01:54:22,480
doesn't need to get into core i think

01:54:21,679 --> 01:54:26,639
you just

01:54:22,480 --> 01:54:28,560
someone needs to spend the time to um

01:54:26,639 --> 01:54:30,239
detangle the render cache and

01:54:28,560 --> 01:54:32,159
essentially um

01:54:30,239 --> 01:54:34,400
make it the only service that can easily

01:54:32,159 --> 01:54:37,760
be used this getting set and not just

01:54:34,400 --> 01:54:40,080
with window so um it really

01:54:37,760 --> 01:54:42,719
um it's just a refactoring of render

01:54:40,080 --> 01:54:42,719
quest servers

01:54:44,320 --> 01:54:47,760
and variation cache is great but

01:54:45,920 --> 01:54:49,520
unfortunately it has to override all

01:54:47,760 --> 01:54:52,159
services so whenever core changes

01:54:49,520 --> 01:55:05,840
variation cache has to change as well so

01:54:52,159 --> 01:55:05,840
i don't think that's scalable

01:55:14,560 --> 01:55:33,840
two minutes 42 seconds last chance

01:55:46,400 --> 01:55:53,360
ah okay so as if you use a cache context

01:55:49,760 --> 01:55:54,320
um yes it will um affect the dynamic

01:55:53,360 --> 01:55:56,800
page cache

01:55:54,320 --> 01:55:58,239
um and will add the cache context to the

01:55:56,800 --> 01:56:02,400
dynamic page cache

01:55:58,239 --> 01:56:06,159
for your blog plugin um but um

01:56:02,400 --> 01:56:08,080
um if you the the thing is how much does

01:56:06,159 --> 01:56:09,199
it vary if it's the phase of the moon is

01:56:08,080 --> 01:56:12,400
three variations

01:56:09,199 --> 01:56:15,760
like treatment full um

01:56:12,400 --> 01:56:19,360
male moon um but um

01:56:15,760 --> 01:56:21,199
if it's like adding a cache context per

01:56:19,360 --> 01:56:22,639
user then core will automatically place

01:56:21,199 --> 01:56:25,119
all those blocks so there's nothing you

01:56:22,639 --> 01:56:25,119
need to do

01:56:26,880 --> 01:56:33,199
inspect content of memcached

01:56:29,920 --> 01:56:36,480
for production um i

01:56:33,199 --> 01:56:40,400
usually change

01:56:36,480 --> 01:56:42,560
the code of

01:56:40,400 --> 01:56:44,000
i usually just add monitoring directly

01:56:42,560 --> 01:56:47,119
where cash get cash

01:56:44,000 --> 01:56:50,159
sites happening so um

01:56:47,119 --> 01:56:53,440
i hack the service

01:56:50,159 --> 01:56:56,639
very pragmatic so

01:56:53,440 --> 01:56:58,239
um or um i am sure i've write it to

01:56:56,639 --> 01:57:00,719
somewhere else like dev h

01:56:58,239 --> 01:57:01,920
and whatever another good way is if

01:57:00,719 --> 01:57:05,040
you're using memcached

01:57:01,920 --> 01:57:07,040
ascii protocol is to just use s trace or

01:57:05,040 --> 01:57:09,199
any other network monitoring tool

01:57:07,040 --> 01:57:10,080
because it's all plain text so it's very

01:57:09,199 --> 01:57:14,320
nice to see

01:57:10,080 --> 01:57:14,320

YouTube URL: https://www.youtube.com/watch?v=Zi8YvL8VV3c


