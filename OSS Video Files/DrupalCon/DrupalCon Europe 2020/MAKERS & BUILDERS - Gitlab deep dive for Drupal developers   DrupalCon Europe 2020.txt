Title: MAKERS & BUILDERS - Gitlab deep dive for Drupal developers   DrupalCon Europe 2020
Publication date: 2021-01-13
Playlist: DrupalCon Europe 2020
Description: 
	GitLab is not just a code repository tool, it is a complete DevOps platform. A lot of users barely scratch a surface of what GitLab is offering. This is a discovery session focuses on improving development and operations processes for your application.
Captions: 
	00:00:04,059 --> 00:00:09,889
[Music]

00:00:13,040 --> 00:00:17,440
okay hello everyone

00:00:15,040 --> 00:00:18,400
and welcome to my session i'm going to

00:00:17,440 --> 00:00:21,760
be talking

00:00:18,400 --> 00:00:24,320
about deep dive into gitlab for drupal

00:00:21,760 --> 00:00:24,320
developers

00:00:28,000 --> 00:00:32,640
so my name is vladimir and i'm software

00:00:31,119 --> 00:00:36,559
developer by day

00:00:32,640 --> 00:00:40,960
i also teach gitlab and drupal

00:00:36,559 --> 00:00:43,200
as a part of public classes as well as

00:00:40,960 --> 00:00:45,280
i do private classes for the companies

00:00:43,200 --> 00:00:46,960
as well also passionate about

00:00:45,280 --> 00:00:48,480
open source projects you can see here

00:00:46,960 --> 00:00:50,719
and gitlab and drupal obviously one of

00:00:48,480 --> 00:00:50,719
them

00:00:51,520 --> 00:00:55,039
i'm actually located right here in

00:00:53,039 --> 00:00:56,399
australia city called brisbane

00:00:55,039 --> 00:00:57,920
that's where i'm presenting from and

00:00:56,399 --> 00:00:58,719
thanks for the opportunity to actually

00:00:57,920 --> 00:01:02,399
present him

00:00:58,719 --> 00:01:03,680
here we have quite a bit to cover

00:01:02,399 --> 00:01:06,400
so and today we're going to be talking

00:01:03,680 --> 00:01:07,280
about gitlab get a lot of the software

00:01:06,400 --> 00:01:09,040
product and

00:01:07,280 --> 00:01:10,320
it should be familiar to a lot of drupal

00:01:09,040 --> 00:01:12,720
developers here

00:01:10,320 --> 00:01:13,840
but let's see why is it there actually

00:01:12,720 --> 00:01:17,759
so what is it gitlab

00:01:13,840 --> 00:01:19,119
uh a lot of probably of you familiar

00:01:17,759 --> 00:01:22,240
with skip lap as being

00:01:19,119 --> 00:01:24,799
code management tool or code repository

00:01:22,240 --> 00:01:25,600
such so github actually has a number of

00:01:24,799 --> 00:01:28,799
tiers

00:01:25,600 --> 00:01:31,759
and i guess the interesting bit it's

00:01:28,799 --> 00:01:33,280
comes in a self-hosted uh option and

00:01:31,759 --> 00:01:34,799
also a cloud option which is a

00:01:33,280 --> 00:01:36,880
gitlab.com

00:01:34,799 --> 00:01:38,640
where you can go and try it so there is

00:01:36,880 --> 00:01:41,759
an enterprise edition

00:01:38,640 --> 00:01:43,200
and there is um as any other cloud

00:01:41,759 --> 00:01:45,680
service it comes with uh

00:01:43,200 --> 00:01:47,200
you know it's price and tiers so on and

00:01:45,680 --> 00:01:48,159
so forth and you can go to the website

00:01:47,200 --> 00:01:49,520
and check it out but

00:01:48,159 --> 00:01:51,680
what are we gonna focus today is

00:01:49,520 --> 00:01:53,840
actually we're gonna talk more about

00:01:51,680 --> 00:01:55,520
the community or open source version the

00:01:53,840 --> 00:01:58,000
one you can contribute

00:01:55,520 --> 00:01:59,840
and the one is actually free to use

00:01:58,000 --> 00:02:01,439
either it be on gitlab.com or if you

00:01:59,840 --> 00:02:03,119
decide to install it you know on your

00:02:01,439 --> 00:02:05,840
own machine on your own ci

00:02:03,119 --> 00:02:07,840
or all your infrastructure which a lot

00:02:05,840 --> 00:02:12,160
of

00:02:07,840 --> 00:02:12,959
love to do the community edition is your

00:02:12,160 --> 00:02:15,760
addition

00:02:12,959 --> 00:02:17,040
so about this talk today this talk is

00:02:15,760 --> 00:02:20,560
technical so i'm gonna

00:02:17,040 --> 00:02:23,440
go quite a bit in depth

00:02:20,560 --> 00:02:24,480
and this is going to be a development

00:02:23,440 --> 00:02:28,160
talk so i'm going to talk

00:02:24,480 --> 00:02:30,080
a lot of concept there including git

00:02:28,160 --> 00:02:31,440
but it also includes quite a bit of

00:02:30,080 --> 00:02:34,480
non-technical concepts

00:02:31,440 --> 00:02:35,599
so if you're a project manager if you're

00:02:34,480 --> 00:02:37,920
someone who actually

00:02:35,599 --> 00:02:39,760
like to get a bit more technical insight

00:02:37,920 --> 00:02:42,160
this talk might be interesting to you

00:02:39,760 --> 00:02:42,879
because it not only covers the coding

00:02:42,160 --> 00:02:45,280
the

00:02:42,879 --> 00:02:47,120
operations and development part of

00:02:45,280 --> 00:02:49,200
things but also how

00:02:47,120 --> 00:02:50,160
i run the project how my company runs

00:02:49,200 --> 00:02:52,720
the project and

00:02:50,160 --> 00:02:54,319
how a lot of projects i've been on to as

00:02:52,720 --> 00:02:56,879
a part of another company

00:02:54,319 --> 00:02:56,879
also run

00:02:57,360 --> 00:03:00,480
as i mentioned before we're not covering

00:02:59,120 --> 00:03:02,800
paid gitlab features

00:03:00,480 --> 00:03:04,800
you're free to go and check them out

00:03:02,800 --> 00:03:07,360
there's a lot of them

00:03:04,800 --> 00:03:08,959
and um this talk is actually a discovery

00:03:07,360 --> 00:03:12,080
session so i would like to

00:03:08,959 --> 00:03:13,680
i wouldn't go really into depth in

00:03:12,080 --> 00:03:17,760
particular scripts

00:03:13,680 --> 00:03:19,840
or you know composer scripts or a

00:03:17,760 --> 00:03:21,840
tweaks but i'm going to give you an

00:03:19,840 --> 00:03:25,519
ideas how to improve your workflow

00:03:21,840 --> 00:03:25,519
improve your setup

00:03:26,799 --> 00:03:32,239
so when we're doing a project for

00:03:30,080 --> 00:03:34,959
example building a gitlab module

00:03:32,239 --> 00:03:36,400
right gitlab is now actually part of

00:03:34,959 --> 00:03:38,239
drupal.org so that's the first thing

00:03:36,400 --> 00:03:39,599
we're going to look at

00:03:38,239 --> 00:03:41,040
what does it mean to a developer

00:03:39,599 --> 00:03:42,239
especially the ones who've been on

00:03:41,040 --> 00:03:45,200
drupal.org

00:03:42,239 --> 00:03:46,400
for a lot of time and familiar with the

00:03:45,200 --> 00:03:48,319
concept of patching

00:03:46,400 --> 00:03:50,239
but not really sure what it means to

00:03:48,319 --> 00:03:52,319
actually having gitlab

00:03:50,239 --> 00:03:53,760
on drupal.org we're going to look at the

00:03:52,319 --> 00:03:55,439
code management gitlab

00:03:53,760 --> 00:03:57,760
and we're going to look at the gitlab

00:03:55,439 --> 00:03:58,560
automation in fact we're going to look

00:03:57,760 --> 00:04:02,159
at

00:03:58,560 --> 00:04:04,319
a number of steps that gitlab says they

00:04:02,159 --> 00:04:06,480
can do for you or you can configure

00:04:04,319 --> 00:04:09,920
gitlab to do it for you so

00:04:06,480 --> 00:04:11,920
first let's look at the drupal.org

00:04:09,920 --> 00:04:14,879
so here's one of the modules i'm working

00:04:11,920 --> 00:04:18,160
on called mailchimp marketing

00:04:14,879 --> 00:04:20,959
and uh what i have now is um

00:04:18,160 --> 00:04:21,359
when you click on the specific issues

00:04:20,959 --> 00:04:23,759
right

00:04:21,359 --> 00:04:25,360
uh you'll get the list of issues so

00:04:23,759 --> 00:04:26,840
these days if you want to contribute or

00:04:25,360 --> 00:04:29,520
if you want to go

00:04:26,840 --> 00:04:31,759
and get a patch

00:04:29,520 --> 00:04:33,440
for a fix you'll usually find the issue

00:04:31,759 --> 00:04:35,680
that you're interested in

00:04:33,440 --> 00:04:36,560
it was your google search as a drupal

00:04:35,680 --> 00:04:40,000
search

00:04:36,560 --> 00:04:43,759
and um drill down to the issue this is a

00:04:40,000 --> 00:04:47,600
brand new issue there was no code but

00:04:43,759 --> 00:04:47,600
if you've been to drupal.org in the last

00:04:47,759 --> 00:04:51,199
two weeks or so maybe a month now you

00:04:50,479 --> 00:04:53,040
can actually see

00:04:51,199 --> 00:04:54,800
this which is a create an issue fork

00:04:53,040 --> 00:04:57,120
which is something new

00:04:54,800 --> 00:04:58,479
before for those who doesn't know the

00:04:57,120 --> 00:05:01,039
process was

00:04:58,479 --> 00:05:02,960
developer would come in uh download the

00:05:01,039 --> 00:05:05,280
code

00:05:02,960 --> 00:05:06,960
change the code and then upload patch

00:05:05,280 --> 00:05:10,240
file and maybe a diff file

00:05:06,960 --> 00:05:12,960
which signifies what sort of difference

00:05:10,240 --> 00:05:14,160
they made to the code uh and it would be

00:05:12,960 --> 00:05:17,840
in git format

00:05:14,160 --> 00:05:20,400
so these days um git infrastructure

00:05:17,840 --> 00:05:22,240
improved a lot and now we can actually

00:05:20,400 --> 00:05:23,360
do a pull request that's been a request

00:05:22,240 --> 00:05:26,560
for many

00:05:23,360 --> 00:05:28,800
many months maybe years

00:05:26,560 --> 00:05:30,000
and finally here so once we click on it

00:05:28,800 --> 00:05:33,600
we can actually create

00:05:30,000 --> 00:05:35,440
a fork of the code and then we can

00:05:33,600 --> 00:05:37,600
create a merge request for it

00:05:35,440 --> 00:05:39,280
uh there are commands actually

00:05:37,600 --> 00:05:42,080
demonstrating how to do that

00:05:39,280 --> 00:05:43,680
so if you would like to contribute to

00:05:42,080 --> 00:05:47,280
this particular module

00:05:43,680 --> 00:05:47,280
you can just go and

00:05:47,360 --> 00:05:52,560
create a create a pull request so update

00:05:50,560 --> 00:05:55,840
your code to git commit

00:05:52,560 --> 00:05:59,680
and then

00:05:55,840 --> 00:06:02,479
to a pull request and wait for the

00:05:59,680 --> 00:06:04,880
module moderator or module approver to

00:06:02,479 --> 00:06:06,560
come in and merge

00:06:04,880 --> 00:06:09,440
your changes or give you some feedback

00:06:06,560 --> 00:06:12,080
out what needs to be changed

00:06:09,440 --> 00:06:13,919
and once you click on the commits or a

00:06:12,080 --> 00:06:17,039
merge request you would actually see a

00:06:13,919 --> 00:06:18,960
gitlab interface

00:06:17,039 --> 00:06:20,960
so i really encourage everyone who is

00:06:18,960 --> 00:06:24,960
contributing who is a developer

00:06:20,960 --> 00:06:24,960
to go and check it out so now

00:06:25,280 --> 00:06:32,840
it's available as a part of drupal.org

00:06:28,400 --> 00:06:36,880
so drupal actually grab a copy

00:06:32,840 --> 00:06:38,960
of gitlab and install it on drupal.org

00:06:36,880 --> 00:06:42,319
infrastructure so this is

00:06:38,960 --> 00:06:43,039
not really related to um any gitlab.com

00:06:42,319 --> 00:06:44,960
infrastructure

00:06:43,039 --> 00:06:46,720
this is a separate copy and you'll see

00:06:44,960 --> 00:06:49,919
from url it's actually

00:06:46,720 --> 00:06:53,039
not on gitlab.com but now

00:06:49,919 --> 00:06:56,960
let's actually look at what gitlab does

00:06:53,039 --> 00:06:59,120
and this was taken maybe six months ago

00:06:56,960 --> 00:07:00,400
and this is a number of features that

00:06:59,120 --> 00:07:03,599
gitlab

00:07:00,400 --> 00:07:05,520
says they are putting in into the

00:07:03,599 --> 00:07:08,720
product since 2011.

00:07:05,520 --> 00:07:12,400
you can see they split into 10

00:07:08,720 --> 00:07:14,800
groups from manage to defend

00:07:12,400 --> 00:07:16,560
and again i can encourage you to go and

00:07:14,800 --> 00:07:18,319
see what's there some of the features

00:07:16,560 --> 00:07:20,160
are paid some of the pictures are free

00:07:18,319 --> 00:07:22,960
but today we're gonna concentrate on a

00:07:20,160 --> 00:07:24,880
few things as a drupal developers

00:07:22,960 --> 00:07:27,759
so we're gonna concentrate on planning

00:07:24,880 --> 00:07:29,520
creating verify and securing

00:07:27,759 --> 00:07:31,840
releasing and configuring your

00:07:29,520 --> 00:07:31,840
application

00:07:32,400 --> 00:07:38,000
so let's start with plan right so

00:07:36,000 --> 00:07:40,400
brand new if you created a brand new

00:07:38,000 --> 00:07:40,400
repo

00:07:40,560 --> 00:07:47,199
and there is a section called uh

00:07:44,160 --> 00:07:51,440
issues so you can actually see uh

00:07:47,199 --> 00:07:53,120
the the you have a list of issues which

00:07:51,440 --> 00:07:56,319
i clicked on and it's empty

00:07:53,120 --> 00:07:58,000
you have boards so if you're a

00:07:56,319 --> 00:08:00,639
software developer bin of software

00:07:58,000 --> 00:08:02,319
project you deal with the tools that

00:08:00,639 --> 00:08:02,800
actually give you a boards to manage the

00:08:02,319 --> 00:08:04,639
project

00:08:02,800 --> 00:08:06,319
have a tasks in them you're going to

00:08:04,639 --> 00:08:08,240
have labels

00:08:06,319 --> 00:08:09,759
uh there is a service desk option which

00:08:08,240 --> 00:08:12,160
is quite interesting so you can actually

00:08:09,759 --> 00:08:13,840
run services from here you have a lot of

00:08:12,160 --> 00:08:17,039
clients

00:08:13,840 --> 00:08:19,120
milestones and iterations so if you're

00:08:17,039 --> 00:08:20,800
running agile projects you can actually

00:08:19,120 --> 00:08:22,800
you know set up milestones set up

00:08:20,800 --> 00:08:25,039
sprints in here

00:08:22,800 --> 00:08:26,000
and track your process we're not gonna

00:08:25,039 --> 00:08:29,599
go deep but

00:08:26,000 --> 00:08:33,200
the creation of the simple task is again

00:08:29,599 --> 00:08:34,719
quite simple you create a task

00:08:33,200 --> 00:08:36,560
uh there are a number of options you can

00:08:34,719 --> 00:08:39,360
see five options on the bottom

00:08:36,560 --> 00:08:40,399
so you can do an sne you can do away due

00:08:39,360 --> 00:08:42,640
dates

00:08:40,399 --> 00:08:44,399
assign labels and again milestones your

00:08:42,640 --> 00:08:46,720
sprint and so on and so forth

00:08:44,399 --> 00:08:49,200
a very simple interface that gives you

00:08:46,720 --> 00:08:51,600
access quickly to the board

00:08:49,200 --> 00:08:53,200
out of the box you can get a board that

00:08:51,600 --> 00:08:56,560
comes with the two labels

00:08:53,200 --> 00:08:59,839
to do and doing and you can

00:08:56,560 --> 00:09:00,880
move your task from you know one thing

00:08:59,839 --> 00:09:02,880
to another

00:09:00,880 --> 00:09:04,720
giving access to the task to people who

00:09:02,880 --> 00:09:06,560
are interested in

00:09:04,720 --> 00:09:08,080
and updating them on how progress is

00:09:06,560 --> 00:09:09,440
going so if you're working with another

00:09:08,080 --> 00:09:11,040
developers obviously you would have a

00:09:09,440 --> 00:09:11,920
conversation with other developers on

00:09:11,040 --> 00:09:15,120
the task

00:09:11,920 --> 00:09:19,040
if you're dealing with your clients

00:09:15,120 --> 00:09:21,600
you might set up specific client tasks

00:09:19,040 --> 00:09:22,320
and advising them on a progress so this

00:09:21,600 --> 00:09:24,800
is a bit

00:09:22,320 --> 00:09:26,720
more complicated project so this is a

00:09:24,800 --> 00:09:27,680
real life project of the client that has

00:09:26,720 --> 00:09:29,920
uh

00:09:27,680 --> 00:09:31,440
multi-site drupal 7 multiple sites right

00:09:29,920 --> 00:09:34,959
in the macro as you can see the

00:09:31,440 --> 00:09:38,080
blue labels are

00:09:34,959 --> 00:09:40,800
the different websites they have

00:09:38,080 --> 00:09:41,920
and the task assigned to there's also a

00:09:40,800 --> 00:09:44,399
red label

00:09:41,920 --> 00:09:46,399
which actually signifies the two

00:09:44,399 --> 00:09:49,920
security updates that were released

00:09:46,399 --> 00:09:50,399
for drupal in the last three weeks so

00:09:49,920 --> 00:09:52,320
and

00:09:50,399 --> 00:09:54,720
also you can see the green labels they

00:09:52,320 --> 00:09:54,720
actually

00:09:54,959 --> 00:09:59,279
actually lanes on this particular board

00:09:57,200 --> 00:10:01,600
so by moving

00:09:59,279 --> 00:10:02,959
those tasks around and commenting inside

00:10:01,600 --> 00:10:05,680
those tasks

00:10:02,959 --> 00:10:06,480
you can actually as i said manage your

00:10:05,680 --> 00:10:09,040
project

00:10:06,480 --> 00:10:11,040
and this is pretty much all i wanted to

00:10:09,040 --> 00:10:11,839
cover again i would advise you to go and

00:10:11,040 --> 00:10:14,880
explore it

00:10:11,839 --> 00:10:17,440
but what i found comparing to

00:10:14,880 --> 00:10:18,800
another competitors or big tools these

00:10:17,440 --> 00:10:20,399
boards are very simple

00:10:18,800 --> 00:10:23,360
they contain everything you need to

00:10:20,399 --> 00:10:26,720
manage a project of significant size

00:10:23,360 --> 00:10:28,480
and yeah you can you know

00:10:26,720 --> 00:10:30,160
have a good really good communication

00:10:28,480 --> 00:10:31,440
tool without actually going away from

00:10:30,160 --> 00:10:33,600
your git

00:10:31,440 --> 00:10:36,160
these days gitlab also introduced gitlab

00:10:33,600 --> 00:10:39,839
boards so they're kind of trying to get

00:10:36,160 --> 00:10:42,880
neck to neck but uh sorry github but

00:10:39,839 --> 00:10:43,600
again this is been there for quite a

00:10:42,880 --> 00:10:47,120
while and i

00:10:43,600 --> 00:10:48,959
really enjoy using gitlab boards

00:10:47,120 --> 00:10:52,079
so the next step is creating now start

00:10:48,959 --> 00:10:52,079
talking about the code

00:10:52,240 --> 00:11:00,399
so first of all there are projects and

00:10:56,480 --> 00:11:02,000
projects and your different companies

00:11:00,399 --> 00:11:03,440
so for example you can see there is my

00:11:02,000 --> 00:11:04,959
complaint tomorrow elephant studio there

00:11:03,440 --> 00:11:06,800
are two projects under it so one is

00:11:04,959 --> 00:11:08,880
drupalcon 2020 gitlab

00:11:06,800 --> 00:11:10,880
and another one is a mailchimp marketing

00:11:08,880 --> 00:11:13,040
drupal which we already look at so

00:11:10,880 --> 00:11:14,640
pretty much you start their stuff once

00:11:13,040 --> 00:11:16,240
you drill down to the project you can

00:11:14,640 --> 00:11:17,440
see the different parts of the project

00:11:16,240 --> 00:11:21,120
so first the

00:11:17,440 --> 00:11:21,120
actual work with the files so

00:11:21,279 --> 00:11:25,440
you can commit files you can look at the

00:11:23,120 --> 00:11:28,880
commits you can branch out

00:11:25,440 --> 00:11:31,120
tag uh look at the tag graph

00:11:28,880 --> 00:11:32,160
compare different changes you can lock

00:11:31,120 --> 00:11:34,800
the files as well

00:11:32,160 --> 00:11:36,560
which is a new feature so they won't be

00:11:34,800 --> 00:11:38,959
able to change them

00:11:36,560 --> 00:11:40,079
and you know then we have a standard uh

00:11:38,959 --> 00:11:44,160
project stats

00:11:40,079 --> 00:11:46,399
we have a ability to fork star

00:11:44,160 --> 00:11:47,519
or get a notification about particular

00:11:46,399 --> 00:11:50,959
projects

00:11:47,519 --> 00:11:52,639
uh we have uh management of the branches

00:11:50,959 --> 00:11:55,200
and navigation around the branches we

00:11:52,639 --> 00:11:59,360
have a standard git tools like

00:11:55,200 --> 00:12:01,440
cloning downloading the particular repo

00:11:59,360 --> 00:12:02,480
information about information about

00:12:01,440 --> 00:12:07,040
latest commits

00:12:02,480 --> 00:12:10,000
and information about the latest

00:12:07,040 --> 00:12:11,680
changes some actually interesting

00:12:10,000 --> 00:12:13,040
shortcut thing so you can actually add a

00:12:11,680 --> 00:12:15,360
particular

00:12:13,040 --> 00:12:17,760
at the particular file if you really

00:12:15,360 --> 00:12:21,040
need to

00:12:17,760 --> 00:12:23,839
uh file navigator and

00:12:21,040 --> 00:12:25,279
web ide so web id is interesting too

00:12:23,839 --> 00:12:27,120
because i use it quite a lot

00:12:25,279 --> 00:12:28,720
and when you actually expand web id you

00:12:27,120 --> 00:12:31,040
can open web id

00:12:28,720 --> 00:12:31,839
or there is a new thing called gitpod

00:12:31,040 --> 00:12:34,240
which

00:12:31,839 --> 00:12:36,240
you can configure your gitlab to launch

00:12:34,240 --> 00:12:37,200
a ready to code development environment

00:12:36,240 --> 00:12:40,320
for your project

00:12:37,200 --> 00:12:42,560
and this is uh really becoming uh

00:12:40,320 --> 00:12:46,320
popular these days especially if you

00:12:42,560 --> 00:12:48,079
if you're following the news from aquia

00:12:46,320 --> 00:12:50,800
they actually just released the tools

00:12:48,079 --> 00:12:53,600
for awkward cloud and aqua is one of the

00:12:50,800 --> 00:12:55,600
major hosting providers for managed

00:12:53,600 --> 00:12:58,330
drupal platform

00:12:55,600 --> 00:12:59,600
so they they just released the

00:12:58,330 --> 00:13:01,440
[Music]

00:12:59,600 --> 00:13:03,200
ready to go development environment with

00:13:01,440 --> 00:13:06,240
the services there so you can actually

00:13:03,200 --> 00:13:08,240
configure that for your developers and

00:13:06,240 --> 00:13:10,480
decrease the onboarding process

00:13:08,240 --> 00:13:13,120
so the development environment actually

00:13:10,480 --> 00:13:15,279
in the cloud rather than your machine

00:13:13,120 --> 00:13:17,600
again the i haven't tried it this is for

00:13:15,279 --> 00:13:17,920
me the next step to do but the option is

00:13:17,600 --> 00:13:20,560
there

00:13:17,920 --> 00:13:22,240
although web id when i click on web id

00:13:20,560 --> 00:13:23,200
it's already quite sophisticated you can

00:13:22,240 --> 00:13:26,320
see there is a whole

00:13:23,200 --> 00:13:28,000
code highlighting there is a identifying

00:13:26,320 --> 00:13:29,519
of different types of file in your git

00:13:28,000 --> 00:13:33,200
repo

00:13:29,519 --> 00:13:35,200
formatting so this is an example of md

00:13:33,200 --> 00:13:36,880
file format how it spits and you can go

00:13:35,200 --> 00:13:37,440
through the code modified and commits

00:13:36,880 --> 00:13:40,000
through here

00:13:37,440 --> 00:13:42,320
actually using the code editor straight

00:13:40,000 --> 00:13:43,760
out of here so all you need to have is a

00:13:42,320 --> 00:13:46,839
browser to actually start

00:13:43,760 --> 00:13:49,040
contributing the code rather full-on

00:13:46,839 --> 00:13:52,480
environment

00:13:49,040 --> 00:13:54,959
now the next step is uh verify

00:13:52,480 --> 00:13:56,880
so what do we mean by verifying actually

00:13:54,959 --> 00:13:59,360
so developers come in

00:13:56,880 --> 00:14:00,720
they create some piece of functionality

00:13:59,360 --> 00:14:02,720
or modify the existing

00:14:00,720 --> 00:14:04,320
piece of functionality then as a

00:14:02,720 --> 00:14:08,720
software development house

00:14:04,320 --> 00:14:13,120
or we actually want to make sure that

00:14:08,720 --> 00:14:15,680
we run third and steps through and

00:14:13,120 --> 00:14:16,560
check if the code is secure for example

00:14:15,680 --> 00:14:19,360
um

00:14:16,560 --> 00:14:20,399
if we do the coding it's according to

00:14:19,360 --> 00:14:21,920
coding standards

00:14:20,399 --> 00:14:23,760
if actually can use this code for

00:14:21,920 --> 00:14:24,959
example can we use it as a part of the

00:14:23,760 --> 00:14:27,920
drupal installation

00:14:24,959 --> 00:14:30,639
can we test it and then can we deploy so

00:14:27,920 --> 00:14:33,680
here is a simple example of stages

00:14:30,639 --> 00:14:35,600
and also gentle introduction to gitlab

00:14:33,680 --> 00:14:37,440
ci and cd processor continuous

00:14:35,600 --> 00:14:38,240
integration and continuous deployment

00:14:37,440 --> 00:14:41,680
process

00:14:38,240 --> 00:14:45,040
so the first thing we do we identify the

00:14:41,680 --> 00:14:46,800
stages we want to run the code through

00:14:45,040 --> 00:14:48,480
and to verify we're actually going to

00:14:46,800 --> 00:14:49,199
touch on the second bit which is

00:14:48,480 --> 00:14:52,639
linkedin

00:14:49,199 --> 00:14:57,199
linkedin uh means that the code

00:14:52,639 --> 00:14:57,199
is according to the coding standards

00:14:57,440 --> 00:15:01,600
this is how it looks when you actually

00:15:00,240 --> 00:15:04,560
run a live project

00:15:01,600 --> 00:15:06,560
i know it might look busy uh it actually

00:15:04,560 --> 00:15:08,880
does look busy but this is how

00:15:06,560 --> 00:15:10,320
those stage is actually running on er so

00:15:08,880 --> 00:15:13,440
this is a real life

00:15:10,320 --> 00:15:14,480
drupal 8 project that's about to go

00:15:13,440 --> 00:15:18,160
drupal 9.

00:15:14,480 --> 00:15:20,720
as you can see here in one stage

00:15:18,160 --> 00:15:22,959
one i clicked and the stage is linked in

00:15:20,720 --> 00:15:25,519
you can see there is phpcs so php code

00:15:22,959 --> 00:15:28,240
sniffer checking the php standards

00:15:25,519 --> 00:15:30,000
then there is a link drupal config

00:15:28,240 --> 00:15:32,480
linked es which checks

00:15:30,000 --> 00:15:34,160
javascript standards and there is also

00:15:32,480 --> 00:15:36,079
php metrics which is a

00:15:34,160 --> 00:15:38,160
quite a neat php library to just give

00:15:36,079 --> 00:15:40,880
you insights about your

00:15:38,160 --> 00:15:42,959
php code how complex it is and you might

00:15:40,880 --> 00:15:46,240
even find a couple of bugs

00:15:42,959 --> 00:15:48,079
here and there so this is the four

00:15:46,240 --> 00:15:49,519
things i decided to run as a part of the

00:15:48,079 --> 00:15:52,720
lean process

00:15:49,519 --> 00:15:54,720
and uh once we actually look at the

00:15:52,720 --> 00:15:56,800
different view

00:15:54,720 --> 00:15:57,839
so this is what's done as you can see on

00:15:56,800 --> 00:16:02,079
top this was

00:15:57,839 --> 00:16:05,920
drupal core updated from 909 to 9.1

00:16:02,079 --> 00:16:06,959
recently we run two separate stages so

00:16:05,920 --> 00:16:09,920
first was linkedin

00:16:06,959 --> 00:16:10,639
it actually checked for code changes and

00:16:09,920 --> 00:16:12,720
then set up

00:16:10,639 --> 00:16:14,880
actually making sure that drupal can be

00:16:12,720 --> 00:16:17,279
installed

00:16:14,880 --> 00:16:19,120
so now to the actual code i'm sure quite

00:16:17,279 --> 00:16:19,920
a few waiting for it but before we go

00:16:19,120 --> 00:16:21,600
there we'll just

00:16:19,920 --> 00:16:23,040
concept of continuous integration and

00:16:21,600 --> 00:16:26,079
continuous delivery

00:16:23,040 --> 00:16:26,399
is that we're using containers so not to

00:16:26,079 --> 00:16:28,720
go

00:16:26,399 --> 00:16:29,839
far in the containers i'm sure you can

00:16:28,720 --> 00:16:32,480
find a lot of

00:16:29,839 --> 00:16:33,759
instructional instructional material on

00:16:32,480 --> 00:16:36,480
containers

00:16:33,759 --> 00:16:38,639
here uh basically the sec the first line

00:16:36,480 --> 00:16:41,759
says what's the name of this particular

00:16:38,639 --> 00:16:43,759
execution so phpcs php code sniffer so

00:16:41,759 --> 00:16:46,160
you can name it whatever you want

00:16:43,759 --> 00:16:48,160
now the second line is the image we're

00:16:46,160 --> 00:16:49,360
using image are usually taken from

00:16:48,160 --> 00:16:51,920
docker hub

00:16:49,360 --> 00:16:53,440
and in this particular case we're taking

00:16:51,920 --> 00:16:56,480
composer

00:16:53,440 --> 00:16:59,279
latest image for composer 1.10

00:16:56,480 --> 00:17:00,639
so gitlab ci would know and download

00:16:59,279 --> 00:17:02,240
this image for us

00:17:00,639 --> 00:17:04,000
it's going to be next line is going to

00:17:02,240 --> 00:17:07,039
be run as part of the lint

00:17:04,000 --> 00:17:08,720
stage we will allow failure failure in

00:17:07,039 --> 00:17:11,600
this particular case

00:17:08,720 --> 00:17:12,319
then the big red block right here it's

00:17:11,600 --> 00:17:15,520
actually

00:17:12,319 --> 00:17:18,720
how we set up the particular ci

00:17:15,520 --> 00:17:19,439
so this is the steps to first check the

00:17:18,720 --> 00:17:21,679
versions

00:17:19,439 --> 00:17:23,280
and then make sure we actually set up

00:17:21,679 --> 00:17:25,520
all the rules

00:17:23,280 --> 00:17:26,480
and downloaded all the dependencies and

00:17:25,520 --> 00:17:28,319
the last line

00:17:26,480 --> 00:17:31,360
right on the bottom red one is for

00:17:28,319 --> 00:17:34,400
actually executing the php code sniffer

00:17:31,360 --> 00:17:37,600
and using a particular rule set which

00:17:34,400 --> 00:17:40,240
it just slightly modified drupal core

00:17:37,600 --> 00:17:40,720
rules so what we get from that we get if

00:17:40,240 --> 00:17:43,919
there is

00:17:40,720 --> 00:17:46,320
there are code errors

00:17:43,919 --> 00:17:48,559
you'll get output something like that

00:17:46,320 --> 00:17:51,360
and you can actually decide if you can

00:17:48,559 --> 00:17:53,280
you want to prohibit

00:17:51,360 --> 00:17:54,480
for developer moving any further until

00:17:53,280 --> 00:17:57,200
they fix it

00:17:54,480 --> 00:17:58,960
you can also do some sort of automated

00:17:57,200 --> 00:17:59,360
fix there is another tool that actually

00:17:58,960 --> 00:18:01,440
can

00:17:59,360 --> 00:18:02,880
fix most of those issues not all of them

00:18:01,440 --> 00:18:06,480
but most of them

00:18:02,880 --> 00:18:08,640
and commit this code as a part of the ci

00:18:06,480 --> 00:18:10,400
or you can just like in this example

00:18:08,640 --> 00:18:12,320
allow the failure

00:18:10,400 --> 00:18:14,640
and move on so why would you allow the

00:18:12,320 --> 00:18:15,600
failure in some projects i was working

00:18:14,640 --> 00:18:18,720
on

00:18:15,600 --> 00:18:20,400
uh yeah you just get a big big code base

00:18:18,720 --> 00:18:22,559
with a lot of

00:18:20,400 --> 00:18:24,799
ugly code and it's not my personal

00:18:22,559 --> 00:18:27,360
opinions but actually

00:18:24,799 --> 00:18:29,760
code sniffer would say there would be 8

00:18:27,360 --> 00:18:31,679
000 9000 line of code so here is an

00:18:29,760 --> 00:18:33,919
example of one of those projects so this

00:18:31,679 --> 00:18:38,480
is a drupal 7 multi-site

00:18:33,919 --> 00:18:41,840
and as you can see here there is a 8 900

00:18:38,480 --> 00:18:42,640
plus lines of errors in this particular

00:18:41,840 --> 00:18:44,160
section so

00:18:42,640 --> 00:18:47,360
this is where you would allow the

00:18:44,160 --> 00:18:47,360
failure and

00:18:47,679 --> 00:18:52,000
actually yeah go either fix it or you

00:18:50,080 --> 00:18:53,919
would deem you know it's too expensive

00:18:52,000 --> 00:18:56,320
to fix it the code is working they might

00:18:53,919 --> 00:18:57,440
be migrating from drupal 7 to drupal 9

00:18:56,320 --> 00:19:00,799
very soon

00:18:57,440 --> 00:19:03,600
so they might the client might would be

00:19:00,799 --> 00:19:04,400
wise to use the budget differently

00:19:03,600 --> 00:19:09,440
rather than

00:19:04,400 --> 00:19:12,320
fixing you know 8 000

00:19:09,440 --> 00:19:12,640
errors now just a bit of a warning if

00:19:12,320 --> 00:19:15,919
you

00:19:12,640 --> 00:19:16,720
are fixing the errors automatically make

00:19:15,919 --> 00:19:18,480
sure you

00:19:16,720 --> 00:19:20,240
run some sort of testing after that

00:19:18,480 --> 00:19:22,799
because the code tend to break

00:19:20,240 --> 00:19:24,080
and you know automated tools are only

00:19:22,799 --> 00:19:26,640
that good

00:19:24,080 --> 00:19:29,360
so yeah if you're writing something

00:19:26,640 --> 00:19:31,520
automated please make sure

00:19:29,360 --> 00:19:34,480
you double check what you just modify

00:19:31,520 --> 00:19:34,480
and recommitted it

00:19:35,039 --> 00:19:40,640
so there are other ways to check your

00:19:38,240 --> 00:19:42,000
code and as i mentioned before

00:19:40,640 --> 00:19:45,280
there are a few things here so for

00:19:42,000 --> 00:19:48,720
example this highlighted code is the

00:19:45,280 --> 00:19:52,480
code that downloads the container that

00:19:48,720 --> 00:19:54,880
has node js inside it

00:19:52,480 --> 00:19:57,200
and then as you can see it runs npm

00:19:54,880 --> 00:19:59,840
around eslint

00:19:57,200 --> 00:20:00,320
it's a script inside the package.json

00:19:59,840 --> 00:20:02,240
and

00:20:00,320 --> 00:20:04,000
in this particular case all it does it

00:20:02,240 --> 00:20:07,360
goes and check

00:20:04,000 --> 00:20:09,120
standards for custom modules uh

00:20:07,360 --> 00:20:10,960
on this particular drupal installation

00:20:09,120 --> 00:20:11,280
and gives you this but so it's the same

00:20:10,960 --> 00:20:14,880
thing

00:20:11,280 --> 00:20:16,400
only checking different language

00:20:14,880 --> 00:20:18,559
and on the bottom you can see there is

00:20:16,400 --> 00:20:21,200
an execution of the custom script

00:20:18,559 --> 00:20:24,720
in this particular way again i'm also

00:20:21,200 --> 00:20:24,720
using node container

00:20:25,440 --> 00:20:28,720
you can see there is slim so i'm using

00:20:27,360 --> 00:20:32,240
the

00:20:28,720 --> 00:20:32,240
linux sling where

00:20:32,480 --> 00:20:38,960
i'm using node.js 13 with a linux slim

00:20:36,000 --> 00:20:40,559
and i'm just running specific bash code

00:20:38,960 --> 00:20:42,400
again you can use

00:20:40,559 --> 00:20:44,320
different container like ubuntu or

00:20:42,400 --> 00:20:45,120
something like that but the idea for

00:20:44,320 --> 00:20:48,799
this one

00:20:45,120 --> 00:20:49,440
link is that uh we had a few rules for

00:20:48,799 --> 00:20:51,919
example

00:20:49,440 --> 00:20:52,880
blocks in drupal should be named only

00:20:51,919 --> 00:20:56,080
start with the

00:20:52,880 --> 00:20:59,200
name of the active theme and that's what

00:20:56,080 --> 00:21:00,880
this and there is other coding standards

00:20:59,200 --> 00:21:01,520
we actually agreed on before we started

00:21:00,880 --> 00:21:04,320
the project

00:21:01,520 --> 00:21:05,520
so this code would go and actually show

00:21:04,320 --> 00:21:07,840
the new developers

00:21:05,520 --> 00:21:08,799
what they did drawn for example if they

00:21:07,840 --> 00:21:12,159
came in

00:21:08,799 --> 00:21:14,640
first time on a project skip through the

00:21:12,159 --> 00:21:15,200
naming convention section you don't have

00:21:14,640 --> 00:21:17,440
to go

00:21:15,200 --> 00:21:19,280
and do anything because the next time

00:21:17,440 --> 00:21:21,520
they commit this block

00:21:19,280 --> 00:21:22,480
configuration which doesn't start with

00:21:21,520 --> 00:21:25,200
the active theme

00:21:22,480 --> 00:21:26,240
let's say aloe vera or clara they would

00:21:25,200 --> 00:21:29,600
just go

00:21:26,240 --> 00:21:30,000
and their code won't go past linking

00:21:29,600 --> 00:21:32,320
stages

00:21:30,000 --> 00:21:33,360
it will just sit there and say no can't

00:21:32,320 --> 00:21:37,440
do that

00:21:33,360 --> 00:21:40,159
please go and modify your

00:21:37,440 --> 00:21:40,880
block because the blog naming convention

00:21:40,159 --> 00:21:42,640
is

00:21:40,880 --> 00:21:44,799
something like that so you can see there

00:21:42,640 --> 00:21:45,360
is a good way in your verification stage

00:21:44,799 --> 00:21:47,520
into

00:21:45,360 --> 00:21:49,120
first of all to make sure your code is

00:21:47,520 --> 00:21:52,480
up to standard

00:21:49,120 --> 00:21:54,960
and it's working and also make sure that

00:21:52,480 --> 00:21:57,520
you know newcomers and new developers

00:21:54,960 --> 00:21:59,919
also quickly understand the

00:21:57,520 --> 00:22:01,200
what sort of rules are there in the code

00:21:59,919 --> 00:22:02,880
so we're obviously following

00:22:01,200 --> 00:22:05,200
drupal coding standards but there also

00:22:02,880 --> 00:22:07,200
may be something like what i just showed

00:22:05,200 --> 00:22:10,159
you

00:22:07,200 --> 00:22:11,840
so the next stage is security it's not

00:22:10,159 --> 00:22:12,720
very big one but as you can see the

00:22:11,840 --> 00:22:16,480
first one

00:22:12,720 --> 00:22:18,320
here is the first item on this list in

00:22:16,480 --> 00:22:21,440
stages called health

00:22:18,320 --> 00:22:23,840
and that's what i did i just created the

00:22:21,440 --> 00:22:26,000
this script which if you can see on the

00:22:23,840 --> 00:22:28,799
bottom it says schedules so gitlab

00:22:26,000 --> 00:22:30,640
actually allows you to schedule the uh

00:22:28,799 --> 00:22:33,440
scheduled

00:22:30,640 --> 00:22:35,039
ci execution so in this particular case

00:22:33,440 --> 00:22:38,159
you can actually go and say

00:22:35,039 --> 00:22:39,120
hey run this on a daily basis at 5am in

00:22:38,159 --> 00:22:42,480
the morning

00:22:39,120 --> 00:22:44,480
and all it does so this it downloads the

00:22:42,480 --> 00:22:47,919
container using uh

00:22:44,480 --> 00:22:49,679
latest ubuntu linux it presets it

00:22:47,919 --> 00:22:52,799
and then it runs the command actually

00:22:49,679 --> 00:22:54,559
going into a production environment

00:22:52,799 --> 00:22:56,000
and checking for security updates at 5

00:22:54,559 --> 00:22:57,200
00 am in the morning so when i wake up

00:22:56,000 --> 00:23:00,159
at seven

00:22:57,200 --> 00:23:02,480
i already have a report saying there was

00:23:00,159 --> 00:23:04,960
some security vulnerabilities

00:23:02,480 --> 00:23:06,640
uh released overnight because that's

00:23:04,960 --> 00:23:07,919
when usually in australia that's when

00:23:06,640 --> 00:23:10,000
we're usually get in them about three

00:23:07,919 --> 00:23:13,200
a.m in the morning

00:23:10,000 --> 00:23:15,360
it's a good thing if actually i saw the

00:23:13,200 --> 00:23:18,000
notification from the security team

00:23:15,360 --> 00:23:19,200
and they said hey the releases are

00:23:18,000 --> 00:23:22,000
coming but

00:23:19,200 --> 00:23:23,760
if i haven't i would have a report first

00:23:22,000 --> 00:23:24,799
thing in the morning so this is very

00:23:23,760 --> 00:23:27,520
important

00:23:24,799 --> 00:23:29,120
again i only prefer managed drupal

00:23:27,520 --> 00:23:31,039
hosting so i don't have to care about

00:23:29,120 --> 00:23:33,600
operating system to have to care about

00:23:31,039 --> 00:23:36,000
the php version apache version

00:23:33,600 --> 00:23:38,559
my sql version but if you're running you

00:23:36,000 --> 00:23:43,279
know on aws

00:23:38,559 --> 00:23:46,559
google cloud digitalocean or any other

00:23:43,279 --> 00:23:49,440
uh not managed drupal hosting providers

00:23:46,559 --> 00:23:50,159
you can actually go and set up an extra

00:23:49,440 --> 00:23:52,000
ci

00:23:50,159 --> 00:23:53,679
reports for your security so there is a

00:23:52,000 --> 00:23:55,200
php security version or

00:23:53,679 --> 00:23:56,880
ubuntu security version you're actually

00:23:55,200 --> 00:24:00,559
on top of it and

00:23:56,880 --> 00:24:00,559
um yeah get a report

00:24:00,799 --> 00:24:06,400
now to the release which is um

00:24:04,400 --> 00:24:08,640
quite an interesting part for me again

00:24:06,400 --> 00:24:11,600
this is what

00:24:08,640 --> 00:24:12,799
uh i'm doing there are many other way of

00:24:11,600 --> 00:24:15,520
do things like that

00:24:12,799 --> 00:24:16,480
to release your drupal platform but i'm

00:24:15,520 --> 00:24:19,760
just gonna take

00:24:16,480 --> 00:24:22,320
two existing managed hosting

00:24:19,760 --> 00:24:24,880
service providers which is a platform sh

00:24:22,320 --> 00:24:28,960
and aqua

00:24:24,880 --> 00:24:32,240
and uh so when we actually look

00:24:28,960 --> 00:24:36,400
at the platform message and aqua

00:24:32,240 --> 00:24:38,880
they both platforms they use in git

00:24:36,400 --> 00:24:41,440
so it means that the code this they

00:24:38,880 --> 00:24:44,159
store the code of your drupal website

00:24:41,440 --> 00:24:46,559
as a git repository so it doesn't matter

00:24:44,159 --> 00:24:49,840
if you have a

00:24:46,559 --> 00:24:51,520
gitlab repository setup

00:24:49,840 --> 00:24:53,600
they would also have their own repo

00:24:51,520 --> 00:24:56,080
there are ways to sync them

00:24:53,600 --> 00:24:57,679
but in reality they also run their own

00:24:56,080 --> 00:24:58,559
git so this is something they have in

00:24:57,679 --> 00:25:01,440
common

00:24:58,559 --> 00:25:03,120
now if you use platform message before

00:25:01,440 --> 00:25:05,200
you know it simple

00:25:03,120 --> 00:25:07,279
supports composer deployment composer

00:25:05,200 --> 00:25:09,679
it's a php dependency management tool

00:25:07,279 --> 00:25:12,840
and this is what drupal is

00:25:09,679 --> 00:25:14,159
based on so when you actually give

00:25:12,840 --> 00:25:17,440
composer.json

00:25:14,159 --> 00:25:18,960
to platform sage

00:25:17,440 --> 00:25:21,279
they would know what to do with it they

00:25:18,960 --> 00:25:23,200
would know how to get the dependencies

00:25:21,279 --> 00:25:26,400
and they would know where to put them

00:25:23,200 --> 00:25:28,640
based on the composer the json

00:25:26,400 --> 00:25:30,480
whereas in acquia most of the

00:25:28,640 --> 00:25:31,360
environments and especially production

00:25:30,480 --> 00:25:33,840
environment

00:25:31,360 --> 00:25:35,520
they won't have that knowledge so

00:25:33,840 --> 00:25:38,960
whatever code you supply

00:25:35,520 --> 00:25:41,360
to acquia would be the one will end up

00:25:38,960 --> 00:25:42,640
on the environment stage of production

00:25:41,360 --> 00:25:45,919
now they

00:25:42,640 --> 00:25:49,520
just a bit of a side note they do

00:25:45,919 --> 00:25:50,159
support composer dependencies on a live

00:25:49,520 --> 00:25:52,720
depth

00:25:50,159 --> 00:25:54,960
which is like switching geet and then

00:25:52,720 --> 00:25:57,520
writing composer installs so it can get

00:25:54,960 --> 00:25:58,080
all your dependencies but you cannot do

00:25:57,520 --> 00:26:00,960
that

00:25:58,080 --> 00:26:02,880
in production so it means you actually

00:26:00,960 --> 00:26:06,080
have to commit

00:26:02,880 --> 00:26:06,960
all your vendor folder drupal slash core

00:26:06,080 --> 00:26:10,720
folder

00:26:06,960 --> 00:26:14,400
drupal country module and all of that

00:26:10,720 --> 00:26:14,400
before it hits the production

00:26:14,880 --> 00:26:23,760
now in aqua what i would usually do

00:26:20,000 --> 00:26:27,039
is i set up the ci command

00:26:23,760 --> 00:26:27,679
after it was deployed to dev the ci

00:26:27,039 --> 00:26:30,880
command

00:26:27,679 --> 00:26:31,600
would go and basically do what it just

00:26:30,880 --> 00:26:35,600
explained

00:26:31,600 --> 00:26:38,480
it would go do a composer install

00:26:35,600 --> 00:26:39,520
remove all the git folders commit

00:26:38,480 --> 00:26:41,679
everything

00:26:39,520 --> 00:26:43,520
and just push it further away which is

00:26:41,679 --> 00:26:46,640
in my particular case would be dev

00:26:43,520 --> 00:26:49,039
aquaria release so dev aqua would

00:26:46,640 --> 00:26:52,080
already receive

00:26:49,039 --> 00:26:55,360
the code including vendor folder country

00:26:52,080 --> 00:26:56,080
modules core and i don't have to do

00:26:55,360 --> 00:26:59,120
anything

00:26:56,080 --> 00:27:02,240
so gitlab ci would do that all for me

00:26:59,120 --> 00:27:04,960
and then when i merge this

00:27:02,240 --> 00:27:06,240
dev dash aqua to stage and the

00:27:04,960 --> 00:27:07,760
production

00:27:06,240 --> 00:27:09,520
both of those environments would already

00:27:07,760 --> 00:27:10,880
have that and already tested it on a dev

00:27:09,520 --> 00:27:14,080
environment

00:27:10,880 --> 00:27:15,039
now here the scripts actually cut down

00:27:14,080 --> 00:27:16,960
but the idea is

00:27:15,039 --> 00:27:19,360
as i said before there are four lines of

00:27:16,960 --> 00:27:20,480
code first one is check out the code

00:27:19,360 --> 00:27:23,200
second one

00:27:20,480 --> 00:27:24,880
replaces the git ignore file just to

00:27:23,200 --> 00:27:27,039
make sure that

00:27:24,880 --> 00:27:29,279
because usually vendor and drupal core

00:27:27,039 --> 00:27:32,480
are actually in git ignore files

00:27:29,279 --> 00:27:34,399
and then it would remove the git folder

00:27:32,480 --> 00:27:35,840
so make sure that actually all the code

00:27:34,399 --> 00:27:38,720
goes into repo

00:27:35,840 --> 00:27:39,760
rather than just some references and

00:27:38,720 --> 00:27:43,039
then it commits it

00:27:39,760 --> 00:27:45,919
to the branch i want

00:27:43,039 --> 00:27:46,320
so this is all in this highlight code

00:27:45,919 --> 00:27:48,240
and

00:27:46,320 --> 00:27:49,440
if you need that actual example how to

00:27:48,240 --> 00:27:52,640
do it for acquire just

00:27:49,440 --> 00:27:56,080
pin me and i'll share it on

00:27:52,640 --> 00:27:57,279
on gitlab now with platform message it's

00:27:56,080 --> 00:27:59,600
much easier

00:27:57,279 --> 00:28:00,640
apart from the setup and some additional

00:27:59,600 --> 00:28:03,360
changes

00:28:00,640 --> 00:28:03,840
the only line you can see is actually

00:28:03,360 --> 00:28:07,360
here

00:28:03,840 --> 00:28:09,039
i'm pushing to gitlab the highlighted

00:28:07,360 --> 00:28:10,320
line i'm pushing to gitlab but lying

00:28:09,039 --> 00:28:12,640
above that

00:28:10,320 --> 00:28:13,840
it's uh i'm just pushing to platform

00:28:12,640 --> 00:28:17,120
message

00:28:13,840 --> 00:28:18,960
with you know storing it as a variable

00:28:17,120 --> 00:28:20,080
so i can do some processing later on but

00:28:18,960 --> 00:28:22,960
the idea is

00:28:20,080 --> 00:28:24,320
with platform sage it's just one line

00:28:22,960 --> 00:28:26,080
and uh

00:28:24,320 --> 00:28:28,159
platform message would do composer

00:28:26,080 --> 00:28:29,039
install it put everything where it

00:28:28,159 --> 00:28:31,440
belongs to

00:28:29,039 --> 00:28:32,159
during the scaffolding stage so

00:28:31,440 --> 00:28:34,720
different

00:28:32,159 --> 00:28:35,360
stages there is also another one that

00:28:34,720 --> 00:28:38,880
they did

00:28:35,360 --> 00:28:40,880
for pantheon which is another

00:28:38,880 --> 00:28:41,919
in top three manage triple hosting

00:28:40,880 --> 00:28:44,399
services

00:28:41,919 --> 00:28:45,760
but yeah i just you'll get that if you

00:28:44,399 --> 00:28:48,159
work with painting you know they have

00:28:45,760 --> 00:28:50,240
different tools again to work with the

00:28:48,159 --> 00:28:51,840
environments and different ways to

00:28:50,240 --> 00:28:54,159
scaffold drupal

00:28:51,840 --> 00:28:54,960
uh and it's changing again with drupal

00:28:54,159 --> 00:28:58,080
9.

00:28:54,960 --> 00:29:00,720
so the good thing about the gitlab now

00:28:58,080 --> 00:29:02,559
for the your release process you can go

00:29:00,720 --> 00:29:04,240
and you know plug and unplug it if your

00:29:02,559 --> 00:29:05,200
client decides to switch from one host

00:29:04,240 --> 00:29:08,159
into another

00:29:05,200 --> 00:29:10,000
you already have preset key and you can

00:29:08,159 --> 00:29:10,960
see there are a number of variables here

00:29:10,000 --> 00:29:16,320
which we'll cover

00:29:10,960 --> 00:29:18,960
very soon for example here i have a

00:29:16,320 --> 00:29:19,600
secret storage as they call them in many

00:29:18,960 --> 00:29:21,840
cases

00:29:19,600 --> 00:29:23,840
it doesn't have to be gitlab but gitlab

00:29:21,840 --> 00:29:26,000
actually have a secret storage

00:29:23,840 --> 00:29:28,240
same as aqueous ams platform message you

00:29:26,000 --> 00:29:31,279
can actually store your secrets

00:29:28,240 --> 00:29:32,320
inside there and you know here you can

00:29:31,279 --> 00:29:33,919
see there is a

00:29:32,320 --> 00:29:35,120
remote host there is a public and

00:29:33,919 --> 00:29:36,240
private keys that they use for

00:29:35,120 --> 00:29:38,000
verification

00:29:36,240 --> 00:29:40,240
actually to push the git environments

00:29:38,000 --> 00:29:42,000
you can with some of the git services

00:29:40,240 --> 00:29:45,760
you can use the deployment

00:29:42,000 --> 00:29:49,200
key or api key and you can store

00:29:45,760 --> 00:29:52,480
many other things here so again

00:29:49,200 --> 00:29:55,279
all part of the release process

00:29:52,480 --> 00:29:57,120
and i use those variables in a before

00:29:55,279 --> 00:29:57,919
script section of the ci which is a

00:29:57,120 --> 00:30:00,960
section where

00:29:57,919 --> 00:30:02,559
it allows you to set the

00:30:00,960 --> 00:30:05,200
particular environment to be able to

00:30:02,559 --> 00:30:06,640
push so in this particular case quickly

00:30:05,200 --> 00:30:09,039
it just connects the two

00:30:06,640 --> 00:30:09,840
different kits which one one sits on

00:30:09,039 --> 00:30:12,320
gitlab

00:30:09,840 --> 00:30:13,200
once it's on your deployment in this

00:30:12,320 --> 00:30:16,640
particular

00:30:13,200 --> 00:30:20,080
case platform message and it makes sure

00:30:16,640 --> 00:30:22,159
that the you know it can verify

00:30:20,080 --> 00:30:24,000
both gitlab and platform message adds

00:30:22,159 --> 00:30:26,640
them to known hosts

00:30:24,000 --> 00:30:29,120
process the private and public key sets

00:30:26,640 --> 00:30:29,120
up my

00:30:29,279 --> 00:30:36,720
git credentials and pushes stuff

00:30:33,600 --> 00:30:37,120
up so pretty simple pretty standard

00:30:36,720 --> 00:30:40,559
stuff

00:30:37,120 --> 00:30:42,080
uh but yeah as you can see i didn't

00:30:40,559 --> 00:30:43,039
share any secrets in here because i'm

00:30:42,080 --> 00:30:46,000
using the secret

00:30:43,039 --> 00:30:47,760
repository the part of release process

00:30:46,000 --> 00:30:49,279
now the next stage i'm gonna cover is

00:30:47,760 --> 00:30:51,840
how to configure

00:30:49,279 --> 00:30:53,600
your drupal setup so let's say you push

00:30:51,840 --> 00:30:56,559
the code to the staging or

00:30:53,600 --> 00:30:58,080
production environment and maybe there

00:30:56,559 --> 00:31:01,519
are some differences

00:30:58,080 --> 00:31:03,679
you want to cover so again you might use

00:31:01,519 --> 00:31:04,799
for example you you don't want to enable

00:31:03,679 --> 00:31:07,279
your um

00:31:04,799 --> 00:31:08,880
google analytics on dev and maybe not

00:31:07,279 --> 00:31:11,039
even on stage you only want to enable

00:31:08,880 --> 00:31:13,120
your google analytics on prod

00:31:11,039 --> 00:31:14,960
so you can actually store the key here

00:31:13,120 --> 00:31:16,960
and then configure

00:31:14,960 --> 00:31:18,640
the the environment like i want to break

00:31:16,960 --> 00:31:18,960
down this particular script and this is

00:31:18,640 --> 00:31:21,600
a

00:31:18,960 --> 00:31:23,679
composer script again it will be

00:31:21,600 --> 00:31:24,480
executed by ci but this is a composer

00:31:23,679 --> 00:31:27,679
script

00:31:24,480 --> 00:31:29,840
of one of the production

00:31:27,679 --> 00:31:30,960
environments so when i release the

00:31:29,840 --> 00:31:34,720
production i would say

00:31:30,960 --> 00:31:35,679
direct prod model composer dashboard

00:31:34,720 --> 00:31:37,679
model

00:31:35,679 --> 00:31:39,919
and it will diffuse in this particular

00:31:37,679 --> 00:31:43,039
case you can see if someone just went

00:31:39,919 --> 00:31:44,559
and enabled views ui and fields ui and

00:31:43,039 --> 00:31:47,440
dblog

00:31:44,559 --> 00:31:48,640
it would just go and uninstall them some

00:31:47,440 --> 00:31:51,519
of you might say

00:31:48,640 --> 00:31:52,320
it can be also done or the config yes i

00:31:51,519 --> 00:31:55,679
agree with that

00:31:52,320 --> 00:31:58,000
just for this particular project it was

00:31:55,679 --> 00:31:58,960
kind of necessary thing and then i also

00:31:58,000 --> 00:32:01,120
would go and

00:31:58,960 --> 00:32:02,399
second line using drash enable modules

00:32:01,120 --> 00:32:04,720
like syslog and

00:32:02,399 --> 00:32:06,080
role delegation then there would be

00:32:04,720 --> 00:32:09,519
bytes of system performance

00:32:06,080 --> 00:32:09,519
configurations for example

00:32:11,200 --> 00:32:15,919
gzip so minify css but don't minify.js

00:32:14,640 --> 00:32:18,080
there was a bug there

00:32:15,919 --> 00:32:20,000
that actually had to do that and the

00:32:18,080 --> 00:32:22,480
last five lines you can see

00:32:20,000 --> 00:32:23,919
i'm actually setting up two services one

00:32:22,480 --> 00:32:26,559
is google maps

00:32:23,919 --> 00:32:28,799
so i'm using google maps api key to

00:32:26,559 --> 00:32:29,760
enable google maps and the second line

00:32:28,799 --> 00:32:33,360
i'm actually

00:32:29,760 --> 00:32:33,360
configuring the cloudflare module

00:32:33,760 --> 00:32:37,440
again can be done many different ways

00:32:35,840 --> 00:32:39,600
but this is one of the ways to do it

00:32:37,440 --> 00:32:41,360
and then i just clear cache so this is

00:32:39,600 --> 00:32:42,000
done as a part of the release to the

00:32:41,360 --> 00:32:44,720
production

00:32:42,000 --> 00:32:44,720
on acquia

00:32:47,279 --> 00:32:54,880
so talking more about the

00:32:52,240 --> 00:32:56,720
whole workflow i just covered bits and

00:32:54,880 --> 00:32:58,880
pieces from different projects but i

00:32:56,720 --> 00:33:01,120
just wanted to show you how to do how to

00:32:58,880 --> 00:33:03,039
use gitlab from a drupal perspective

00:33:01,120 --> 00:33:04,880
i've been doing that for more than three

00:33:03,039 --> 00:33:08,000
or four years

00:33:04,880 --> 00:33:10,720
just purely on gitlab

00:33:08,000 --> 00:33:11,279
and i found there is much much more to

00:33:10,720 --> 00:33:12,880
learn

00:33:11,279 --> 00:33:14,480
so if you want to go and check out all

00:33:12,880 --> 00:33:18,480
the 10 stages of the

00:33:14,480 --> 00:33:21,440
devops cycle um feel free to go

00:33:18,480 --> 00:33:22,640
and you know explore it there is a lot

00:33:21,440 --> 00:33:25,519
of tools

00:33:22,640 --> 00:33:27,279
i want wanna see for example the next

00:33:25,519 --> 00:33:29,440
two things i wanna explore is

00:33:27,279 --> 00:33:30,880
as i mentioned one of them before it's a

00:33:29,440 --> 00:33:32,399
developer environment

00:33:30,880 --> 00:33:33,919
so when i'm on board in the new

00:33:32,399 --> 00:33:34,880
developer i don't have to go and set up

00:33:33,919 --> 00:33:38,159
the machine

00:33:34,880 --> 00:33:41,360
it's all set up by gitlab

00:33:38,159 --> 00:33:43,919
straight in in the cloud and

00:33:41,360 --> 00:33:45,760
just have this ability to actually use

00:33:43,919 --> 00:33:48,880
ci

00:33:45,760 --> 00:33:49,840
and also ide in a cloud it's quite

00:33:48,880 --> 00:33:52,080
amazing

00:33:49,840 --> 00:33:53,600
and it seems like it's going to be the

00:33:52,080 --> 00:33:56,000
next step

00:33:53,600 --> 00:33:57,440
where yeah developers machine actually

00:33:56,000 --> 00:33:59,519
sitting in the cloud and you

00:33:57,440 --> 00:34:00,559
be able to instead of you know mucking

00:33:59,519 --> 00:34:04,640
around for

00:34:00,559 --> 00:34:06,159
multiple many days uh with your machine

00:34:04,640 --> 00:34:08,000
which i didn't say wasn't fun but

00:34:06,159 --> 00:34:10,079
sometimes just too expensive

00:34:08,000 --> 00:34:11,520
to actually being able to get and spin

00:34:10,079 --> 00:34:14,720
up the environment

00:34:11,520 --> 00:34:16,560
for drupal with database already

00:34:14,720 --> 00:34:19,040
installed

00:34:16,560 --> 00:34:21,119
with ide in the cloud and also using the

00:34:19,040 --> 00:34:22,320
services for example elasticsearch or

00:34:21,119 --> 00:34:25,919
solar

00:34:22,320 --> 00:34:27,359
or something else already up and running

00:34:25,919 --> 00:34:28,879
i think that would be something very

00:34:27,359 --> 00:34:30,320
interesting that's definitely what i'm

00:34:28,879 --> 00:34:31,760
going to be investigating

00:34:30,320 --> 00:34:33,760
the second thing that i'm currently

00:34:31,760 --> 00:34:35,440
investigating probably will expand this

00:34:33,760 --> 00:34:38,800
talk in the future is

00:34:35,440 --> 00:34:39,839
monitoring so gitlab actually now allows

00:34:38,800 --> 00:34:43,280
you to

00:34:39,839 --> 00:34:45,280
to create a monitoring dashboard for all

00:34:43,280 --> 00:34:47,440
sorts of the statistic be it security

00:34:45,280 --> 00:34:50,800
releases

00:34:47,440 --> 00:34:53,440
you know some new relic statistics

00:34:50,800 --> 00:34:54,159
or any or cloud flare statistics that

00:34:53,440 --> 00:34:57,200
you can actually

00:34:54,159 --> 00:34:58,880
push it all back into gitlab and uh they

00:34:57,200 --> 00:34:59,520
would provide your dashboard so if

00:34:58,880 --> 00:35:02,960
you're running

00:34:59,520 --> 00:35:04,880
you know a mini hosting company or just

00:35:02,960 --> 00:35:07,760
purely want to use some statistics for

00:35:04,880 --> 00:35:11,359
your development and operations

00:35:07,760 --> 00:35:13,119
you can do that with gitlab already

00:35:11,359 --> 00:35:14,400
they do require integration with

00:35:13,119 --> 00:35:17,200
elasticsearch

00:35:14,400 --> 00:35:18,640
but apart from that yeah this

00:35:17,200 --> 00:35:19,280
integration is already there and this is

00:35:18,640 --> 00:35:21,040
something i'm

00:35:19,280 --> 00:35:23,680
really looking for so those two things

00:35:21,040 --> 00:35:25,520
i'm really looking forward to explore

00:35:23,680 --> 00:35:30,079
in the next six months and maybe present

00:35:25,520 --> 00:35:33,200
them sometimes in the future

00:35:30,079 --> 00:35:33,920
now if we have any questions i'll just

00:35:33,200 --> 00:35:38,079
switch

00:35:33,920 --> 00:35:42,839
to the console and feel free to start

00:35:38,079 --> 00:35:44,560
typing in there i will be reading the

00:35:42,839 --> 00:35:47,119
question

00:35:44,560 --> 00:35:49,200
okay so the first question is is it

00:35:47,119 --> 00:35:52,480
advisable to execute database updates

00:35:49,200 --> 00:35:56,000
during the pipeline execution

00:35:52,480 --> 00:35:56,000
i do it as a part of the

00:35:57,200 --> 00:36:04,880
as a part of the configure

00:36:01,359 --> 00:36:08,400
update and honestly it didn't fail me

00:36:04,880 --> 00:36:10,839
a lot of times so what i usually do

00:36:08,400 --> 00:36:12,720
you know just following the standard

00:36:10,839 --> 00:36:16,160
drupal procedure

00:36:12,720 --> 00:36:19,359
just put the website in

00:36:16,160 --> 00:36:21,200
maintenance mode run updates

00:36:19,359 --> 00:36:23,599
and then take website out of maintenance

00:36:21,200 --> 00:36:25,440
mode maybe also run those commands that

00:36:23,599 --> 00:36:28,560
i showed that

00:36:25,440 --> 00:36:30,160
you know set up particular

00:36:28,560 --> 00:36:33,119
keys for your environment be it

00:36:30,160 --> 00:36:36,320
cloudflare google maps google analytics

00:36:33,119 --> 00:36:36,320
and so on and so forth

00:36:37,760 --> 00:36:41,680
next question about the name of block

00:36:39,920 --> 00:36:43,280
prefixes with the theme name

00:36:41,680 --> 00:36:45,200
if you want to scan this code in

00:36:43,280 --> 00:36:48,480
standard with the code sniffer

00:36:45,200 --> 00:36:49,440
c yep well thanks for this link i'll

00:36:48,480 --> 00:36:52,400
actually copy it

00:36:49,440 --> 00:36:53,040
and put it as i mentioned before there

00:36:52,400 --> 00:36:56,160
is uh

00:36:53,040 --> 00:36:56,560
it's not i'm just showing you the way

00:36:56,160 --> 00:36:59,119
that

00:36:56,560 --> 00:37:00,640
i tend to work and i'm always happy when

00:36:59,119 --> 00:37:02,880
people actually show me the better

00:37:00,640 --> 00:37:04,880
alternative way to do it

00:37:02,880 --> 00:37:06,560
because like with anything once you

00:37:04,880 --> 00:37:08,400
start working with the gitlab or any

00:37:06,560 --> 00:37:10,079
other ci cicd environment

00:37:08,400 --> 00:37:11,359
it's you know it's ongoing process

00:37:10,079 --> 00:37:12,800
you're always looking for the ways to

00:37:11,359 --> 00:37:15,839
improve things

00:37:12,800 --> 00:37:18,079
um decrease the time

00:37:15,839 --> 00:37:19,760
it goes live decrease the amount of

00:37:18,079 --> 00:37:22,560
failures you can have

00:37:19,760 --> 00:37:24,160
and all of that but it's yeah it's all

00:37:22,560 --> 00:37:26,960
your work to go there so thanks for

00:37:24,160 --> 00:37:26,960
sharing this link

00:37:27,200 --> 00:37:29,520
i'll

00:37:30,240 --> 00:37:35,119
wait for a bit more

00:37:33,599 --> 00:37:38,240
if you have any questions feel free to

00:37:35,119 --> 00:37:39,839
type it okay how to integrate aqua blt

00:37:38,240 --> 00:37:43,680
with gitlab

00:37:39,839 --> 00:37:47,359
good question i unfortunately

00:37:43,680 --> 00:37:50,800
um i haven't worked with

00:37:47,359 --> 00:37:53,599
aqua blt

00:37:50,800 --> 00:37:54,480
one of my colleagues did though so i can

00:37:53,599 --> 00:37:59,200
pin them

00:37:54,480 --> 00:38:01,680
and see if they have any advice on that

00:37:59,200 --> 00:38:03,040
but it probably would be if it's not

00:38:01,680 --> 00:38:06,079
gitlab it would be some

00:38:03,040 --> 00:38:09,119
such a different ci but yeah

00:38:06,079 --> 00:38:12,320
so i don't have any expertise in the

00:38:09,119 --> 00:38:12,320
aqua ability area

00:38:16,839 --> 00:38:22,960
unfortunately

00:38:18,720 --> 00:38:22,960
so let's have another minute

00:38:28,240 --> 00:38:32,480
i'm not sure which way it goes so build

00:38:30,320 --> 00:38:34,320
use the first one execution okay

00:38:32,480 --> 00:38:36,560
where can we find all the examples that

00:38:34,320 --> 00:38:37,280
you showed uh in the presentation of

00:38:36,560 --> 00:38:39,440
your slides

00:38:37,280 --> 00:38:41,760
so that's an interesting one i thought

00:38:39,440 --> 00:38:44,240
about putting everything together

00:38:41,760 --> 00:38:45,520
but in the end it was you know just

00:38:44,240 --> 00:38:46,720
speaking and choosing from different

00:38:45,520 --> 00:38:48,400
sort of projects

00:38:46,720 --> 00:38:50,079
if you have any particular example you

00:38:48,400 --> 00:38:53,040
want to see

00:38:50,079 --> 00:38:53,680
i will be putting some gitlab example

00:38:53,040 --> 00:38:55,359
together

00:38:53,680 --> 00:38:57,200
maybe i'll just put all the examples

00:38:55,359 --> 00:39:00,079
there but at the moment here there is no

00:38:57,200 --> 00:39:01,920
repo i start working on the repo and you

00:39:00,079 --> 00:39:04,160
can find it publicly on gitlab

00:39:01,920 --> 00:39:05,520
but at the moment it only includes one

00:39:04,160 --> 00:39:09,119
script which is actually

00:39:05,520 --> 00:39:12,240
comparing uh execution of drupal 1

00:39:09,119 --> 00:39:14,960
9.1 execution of installation of drupal

00:39:12,240 --> 00:39:18,720
9.1 destination of drupal 9.0

00:39:14,960 --> 00:39:21,200
just to see the speed difference

00:39:18,720 --> 00:39:23,839
but yeah i think once i upgrade this

00:39:21,200 --> 00:39:25,680
talk i would put more examples

00:39:23,839 --> 00:39:27,200
i just really want to make sure that you

00:39:25,680 --> 00:39:30,720
know they're clear

00:39:27,200 --> 00:39:30,720
and they are actually usable

00:39:36,000 --> 00:39:39,839
how to handle multiple environments

00:39:38,160 --> 00:39:43,839
deployments and the setup

00:39:39,839 --> 00:39:47,119
of the database dump

00:39:43,839 --> 00:39:48,960
so what i do for aqua environment uh

00:39:47,119 --> 00:39:50,880
i usually manually copy the database

00:39:48,960 --> 00:39:54,880
from production to stage and uh

00:39:50,880 --> 00:39:59,280
and def and then trigger the trigger the

00:39:54,880 --> 00:40:01,920
uh deployment but another way to do it

00:39:59,280 --> 00:40:04,319
is actually because aqua and platform

00:40:01,920 --> 00:40:07,520
stage they both have

00:40:04,319 --> 00:40:07,520
they both have uh

00:40:08,079 --> 00:40:12,079
api so you can actually use api to copy

00:40:10,640 --> 00:40:13,839
the database the problem

00:40:12,079 --> 00:40:15,359
is you never know how long the copying

00:40:13,839 --> 00:40:16,880
of the database gonna take

00:40:15,359 --> 00:40:18,800
i have one client that takes three

00:40:16,880 --> 00:40:20,160
seconds another one that has up to three

00:40:18,800 --> 00:40:21,040
minutes because of the size of the

00:40:20,160 --> 00:40:22,880
database

00:40:21,040 --> 00:40:25,760
so another way i'm exploring at the

00:40:22,880 --> 00:40:30,000
moment is actually manually executed

00:40:25,760 --> 00:40:32,400
ci pipelines so it basically says okay

00:40:30,000 --> 00:40:34,079
trigger the ci pop line by copying the

00:40:32,400 --> 00:40:36,160
database on aqua

00:40:34,079 --> 00:40:38,960
and then the next one i have to go and

00:40:36,160 --> 00:40:41,839
trigger it so there is no clear way

00:40:38,960 --> 00:40:45,119
at the moment to see or pin aqua or

00:40:41,839 --> 00:40:47,119
platform stage say hey did backup finish

00:40:45,119 --> 00:40:48,960
there might be i just didn't find one

00:40:47,119 --> 00:40:49,680
that's very reliable and very good for

00:40:48,960 --> 00:40:52,160
ci

00:40:49,680 --> 00:40:53,040
so as i said at the moment just because

00:40:52,160 --> 00:40:55,119
i'm used to it

00:40:53,040 --> 00:40:57,200
i'll just copy uh the database from

00:40:55,119 --> 00:41:00,240
production to stage in depth when i can

00:40:57,200 --> 00:41:02,800
but i also have a script that uses uh

00:41:00,240 --> 00:41:03,440
aqua api to actually copy database for

00:41:02,800 --> 00:41:06,720
to both

00:41:03,440 --> 00:41:10,560
environments and then pauses everything

00:41:06,720 --> 00:41:10,560
else until i manually click start

00:41:12,000 --> 00:41:15,119
is there a way to export the configured

00:41:14,240 --> 00:41:17,680
gitlab ci

00:41:15,119 --> 00:41:18,400
variables from one project to another no

00:41:17,680 --> 00:41:21,760
i didn't find

00:41:18,400 --> 00:41:24,000
one and i also tried

00:41:21,760 --> 00:41:26,160
uh different ways to like store all the

00:41:24,000 --> 00:41:27,440
variables in aqua environments or all

00:41:26,160 --> 00:41:28,560
the variables in platforms age

00:41:27,440 --> 00:41:30,400
environment

00:41:28,560 --> 00:41:32,480
or actual store in gitlab and i found

00:41:30,400 --> 00:41:33,359
that gitlab is kind of more concise way

00:41:32,480 --> 00:41:35,200
to do it

00:41:33,359 --> 00:41:37,200
i'm not sure if it's the best approach

00:41:35,200 --> 00:41:38,800
from security perspective although you

00:41:37,200 --> 00:41:40,560
probably need to make sure you give the

00:41:38,800 --> 00:41:42,480
right permissions

00:41:40,560 --> 00:41:45,359
to people who can see those variables

00:41:42,480 --> 00:41:47,359
especially the very very important one

00:41:45,359 --> 00:41:49,040
but again there are quite a few good

00:41:47,359 --> 00:41:51,040
presentations

00:41:49,040 --> 00:41:54,400
from previous drupal cons and other

00:41:51,040 --> 00:41:56,800
drupal conferences how to manage your

00:41:54,400 --> 00:41:58,000
secrets uh if you google can you keep a

00:41:56,800 --> 00:42:01,440
secret

00:41:58,000 --> 00:42:02,000
drupal it's a quite a good presentation

00:42:01,440 --> 00:42:04,960
to do that

00:42:02,000 --> 00:42:05,599
and they explain other ways to how to

00:42:04,960 --> 00:42:08,880
keep your

00:42:05,599 --> 00:42:10,160
secret variables and handle them

00:42:08,880 --> 00:42:12,880
in order to manage different

00:42:10,160 --> 00:42:14,800
configuration per environment

00:42:12,880 --> 00:42:16,640
do you recommend using your composer

00:42:14,800 --> 00:42:19,599
script or something like

00:42:16,640 --> 00:42:19,599
config split

00:42:19,680 --> 00:42:22,880
personally i'm not a big fan of config

00:42:22,160 --> 00:42:24,800
split

00:42:22,880 --> 00:42:26,560
but again this is just the personal

00:42:24,800 --> 00:42:30,480
opinion i'm more used to just

00:42:26,560 --> 00:42:32,240
working with the one config and then

00:42:30,480 --> 00:42:34,480
setting up the variable but i've seen

00:42:32,240 --> 00:42:38,640
quite a few successful very very large

00:42:34,480 --> 00:42:41,280
projects uh that use config split

00:42:38,640 --> 00:42:42,960
and again i didn't see anything that

00:42:41,280 --> 00:42:44,560
would convince me it's the

00:42:42,960 --> 00:42:46,319
worst way to do it actually in some

00:42:44,560 --> 00:42:48,160
cases it's much better way

00:42:46,319 --> 00:42:50,720
for all the projects i've been working

00:42:48,160 --> 00:42:52,480
on i didn't need to that extent to go to

00:42:50,720 --> 00:42:53,119
config split there's not many things to

00:42:52,480 --> 00:42:56,000
set up

00:42:53,119 --> 00:42:56,720
but i would assume if you're devon stage

00:42:56,000 --> 00:42:59,760
and pro

00:42:56,720 --> 00:43:02,319
i really really different

00:42:59,760 --> 00:43:03,200
then yeah you would actually need to use

00:43:02,319 --> 00:43:05,440
config split

00:43:03,200 --> 00:43:06,400
i i've seen the good examples of using

00:43:05,440 --> 00:43:10,160
it so

00:43:06,400 --> 00:43:12,160
yeah uh yeah it's

00:43:10,160 --> 00:43:14,160
it's another way to do it like many

00:43:12,160 --> 00:43:17,119
other things with drupal

00:43:14,160 --> 00:43:18,880
we're almost around out of time we have

00:43:17,119 --> 00:43:20,640
two minutes left so

00:43:18,880 --> 00:43:22,240
if there is one more questions i'll take

00:43:20,640 --> 00:43:26,079
it otherwise uh you can

00:43:22,240 --> 00:43:29,200
find me uh

00:43:26,079 --> 00:43:31,359
as vladimir aus pretty much everywhere

00:43:29,200 --> 00:43:32,400
there's also a couple of things that

00:43:31,359 --> 00:43:34,880
drupal

00:43:32,400 --> 00:43:36,000
corn want me to show so first join for

00:43:34,880 --> 00:43:38,720
contribution

00:43:36,000 --> 00:43:40,480
sprints they rang on friday december

00:43:38,720 --> 00:43:42,240
11th european time

00:43:40,480 --> 00:43:45,359
i definitely will be there and recommend

00:43:42,240 --> 00:43:47,119
if you have any

00:43:45,359 --> 00:43:49,599
module you want to support or contribute

00:43:47,119 --> 00:43:51,359
to the core feel free to join all the

00:43:49,599 --> 00:43:54,319
information on the website and search

00:43:51,359 --> 00:43:56,960
for hashtag drupal contributions and

00:43:54,319 --> 00:43:58,319
also yeah please rate this session and

00:43:56,960 --> 00:43:59,920
let me know what you think how can i

00:43:58,319 --> 00:44:01,839
improve it already you can see ways to

00:43:59,920 --> 00:44:03,119
improve it but as i said it's an ongoing

00:44:01,839 --> 00:44:06,319
process

00:44:03,119 --> 00:44:08,079
i'll just check for one last time so

00:44:06,319 --> 00:44:10,000
thanks everyone for coming in i hope you

00:44:08,079 --> 00:44:12,160
enjoyed it and

00:44:10,000 --> 00:44:13,920
i'll hopefully we'll see you somewhere

00:44:12,160 --> 00:44:16,720
around the conference

00:44:13,920 --> 00:44:16,720

YouTube URL: https://www.youtube.com/watch?v=EBWCa59-SJ8


