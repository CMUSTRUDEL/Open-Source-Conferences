Title: MAKERS & BUILDERS - Write better CSS by stopping writing any more CSS! How and why to use utilit...
Publication date: 2021-01-13
Playlist: DrupalCon Europe 2020
Description: 
	CSS will always be a fundamental part of the web stack, but it's deceptively hard to get right on large, long-running projects worked on by multiple developers.
Captions: 
	00:00:04,059 --> 00:00:09,889
[Music]

00:00:13,360 --> 00:00:19,920
hi everyone

00:00:16,240 --> 00:00:23,279
you for coming to my talk on tailwind

00:00:19,920 --> 00:00:26,000
and css and before we get started

00:00:23,279 --> 00:00:27,039
just a quick note to say that i've

00:00:26,000 --> 00:00:29,920
tweeted

00:00:27,039 --> 00:00:31,359
um a link to my slides and also all the

00:00:29,920 --> 00:00:32,960
code examples

00:00:31,359 --> 00:00:34,719
and so if you check out the live chat

00:00:32,960 --> 00:00:36,800
there's a github link in there

00:00:34,719 --> 00:00:38,000
and that will have um the slides and

00:00:36,800 --> 00:00:38,719
also all the code i'm going to be

00:00:38,000 --> 00:00:41,280
talking about

00:00:38,719 --> 00:00:42,079
so if you find the code samples hard to

00:00:41,280 --> 00:00:44,800
read or

00:00:42,079 --> 00:00:46,160
zoom over compresses them you can grab

00:00:44,800 --> 00:00:49,440
them there

00:00:46,160 --> 00:00:51,920
so let's get started

00:00:49,440 --> 00:00:52,719
a little bit about me my name is phil

00:00:51,920 --> 00:00:55,760
you can find me

00:00:52,719 --> 00:00:57,039
in all the usual places the important

00:00:55,760 --> 00:00:59,920
thing about this slide

00:00:57,039 --> 00:01:01,280
is that i work at an agency in the

00:00:59,920 --> 00:01:03,920
united kingdom

00:01:01,280 --> 00:01:04,479
so the sort of projects i work on are

00:01:03,920 --> 00:01:07,680
quite

00:01:04,479 --> 00:01:09,439
big quite long running projects they're

00:01:07,680 --> 00:01:10,479
projects that involve a lot of different

00:01:09,439 --> 00:01:12,000
developers

00:01:10,479 --> 00:01:13,920
and some of those developers would have

00:01:12,000 --> 00:01:15,680
been making websites for all that

00:01:13,920 --> 00:01:18,159
career and some of them will be very new

00:01:15,680 --> 00:01:20,720
to it so we have a variety of skills

00:01:18,159 --> 00:01:22,240
a variety of levels of experience and

00:01:20,720 --> 00:01:23,119
also the commercial pressures of being

00:01:22,240 --> 00:01:25,200
an agency

00:01:23,119 --> 00:01:26,320
so we need to offer good value for money

00:01:25,200 --> 00:01:27,759
to our clients

00:01:26,320 --> 00:01:30,320
and we also need to do good business

00:01:27,759 --> 00:01:30,320
ourselves

00:01:30,479 --> 00:01:34,159
so let's start let's start with talking

00:01:32,400 --> 00:01:37,280
about css

00:01:34,159 --> 00:01:41,439
css is hard but it looks

00:01:37,280 --> 00:01:42,880
easy someone on their first day at work

00:01:41,439 --> 00:01:43,439
you could give them a css job because

00:01:42,880 --> 00:01:46,560
you know

00:01:43,439 --> 00:01:48,479
it's just css you could say go and

00:01:46,560 --> 00:01:49,360
change the color of all the buttons on

00:01:48,479 --> 00:01:51,920
the website

00:01:49,360 --> 00:01:53,520
from blue to green and it probably

00:01:51,920 --> 00:01:55,680
wouldn't take them that long it's

00:01:53,520 --> 00:01:56,799
a safe change it's global it affects the

00:01:55,680 --> 00:01:58,560
whole website

00:01:56,799 --> 00:01:59,840
so they get that job done and before you

00:01:58,560 --> 00:02:01,040
know it they're a front-end developer

00:01:59,840 --> 00:02:03,280
woohoo

00:02:01,040 --> 00:02:05,200
but then things get hard quickly

00:02:03,280 --> 00:02:07,520
complexity ramps up

00:02:05,200 --> 00:02:08,640
before you know it you're explaining to

00:02:07,520 --> 00:02:11,440
them how z

00:02:08,640 --> 00:02:12,239
index works and what a stacking context

00:02:11,440 --> 00:02:15,120
is and

00:02:12,239 --> 00:02:15,840
why when they made something absolutely

00:02:15,120 --> 00:02:18,319
positioned

00:02:15,840 --> 00:02:20,560
it changed the z index value but didn't

00:02:18,319 --> 00:02:23,360
really change it it just affected it

00:02:20,560 --> 00:02:24,560
and also you know my position sticky

00:02:23,360 --> 00:02:26,160
doesn't work anymore

00:02:24,560 --> 00:02:28,239
because i put overflow hidden on a

00:02:26,160 --> 00:02:31,280
parent way up in the dom

00:02:28,239 --> 00:02:34,400
so it looks trivial but it's really not

00:02:31,280 --> 00:02:37,280
it's undervalued and true css experts

00:02:34,400 --> 00:02:39,120
are rare to find and because they're

00:02:37,280 --> 00:02:42,160
rare to find

00:02:39,120 --> 00:02:44,720
the rest of us get frustrated right um

00:02:42,160 --> 00:02:46,959
virtual show of hands how many of you

00:02:44,720 --> 00:02:50,720
have experienced things like this

00:02:46,959 --> 00:02:52,239
um be afraid to delete things being

00:02:50,720 --> 00:02:53,920
afraid to change things not knowing

00:02:52,239 --> 00:02:57,280
where something's reused

00:02:53,920 --> 00:03:00,480
fighting the cascade fighting overrides

00:02:57,280 --> 00:03:03,280
um experiencing brittle bonds between

00:03:00,480 --> 00:03:04,400
the markup you write and the code and

00:03:03,280 --> 00:03:07,200
just generally things get

00:03:04,400 --> 00:03:09,200
messy with time well we're going to be

00:03:07,200 --> 00:03:11,280
talking about how utility first css can

00:03:09,200 --> 00:03:13,760
help with some of those concerns

00:03:11,280 --> 00:03:15,760
we'll talk about what it is we'll

00:03:13,760 --> 00:03:17,519
address some common criticisms

00:03:15,760 --> 00:03:19,200
we'll talk about using a quadruple and

00:03:17,519 --> 00:03:22,959
then we'll finish off with me

00:03:19,200 --> 00:03:22,959
saying what i think the benefits are

00:03:23,760 --> 00:03:28,799
so a bit about how i got how i got

00:03:27,040 --> 00:03:31,920
interested in this area

00:03:28,799 --> 00:03:32,560
well i was working on a travel company

00:03:31,920 --> 00:03:35,040
website

00:03:32,560 --> 00:03:35,920
it's quite a hand travel company and

00:03:35,040 --> 00:03:38,319
they own like

00:03:35,920 --> 00:03:40,239
desert islands and the clooneys got

00:03:38,319 --> 00:03:43,360
married at their place

00:03:40,239 --> 00:03:44,799
so it's a really high-end visually rich

00:03:43,360 --> 00:03:46,640
website but

00:03:44,799 --> 00:03:48,720
essentially it's just a brochure website

00:03:46,640 --> 00:03:51,360
it's just a lot of pictures and videos

00:03:48,720 --> 00:03:52,480
and the site was slow we'd inherited it

00:03:51,360 --> 00:03:55,040
from another agency

00:03:52,480 --> 00:03:56,959
i think they'd been looking at it um a

00:03:55,040 --> 00:03:59,120
place down in london for about

00:03:56,959 --> 00:04:00,000
two years or three years and then we'd

00:03:59,120 --> 00:04:02,480
had for a while

00:04:00,000 --> 00:04:03,519
too and everyone knew the code base was

00:04:02,480 --> 00:04:05,920
messy because everyone

00:04:03,519 --> 00:04:07,439
hated working on it it was unpredictable

00:04:05,920 --> 00:04:11,200
it was difficult

00:04:07,439 --> 00:04:13,200
but we didn't know how messy it was

00:04:11,200 --> 00:04:15,599
we'd all been used to working in the sas

00:04:13,200 --> 00:04:19,359
files but we hadn't really

00:04:15,599 --> 00:04:21,919
delved into the the generated css so

00:04:19,359 --> 00:04:22,880
i thought well we better have a look and

00:04:21,919 --> 00:04:24,720
i was

00:04:22,880 --> 00:04:26,400
kind of amazed kind of shocked at just

00:04:24,720 --> 00:04:28,639
how it was

00:04:26,400 --> 00:04:30,560
um to give you an idea of the size of it

00:04:28,639 --> 00:04:32,639
the size of the generated css that we

00:04:30,560 --> 00:04:35,520
were sending to every single page

00:04:32,639 --> 00:04:37,600
was the drupal 7 site if i printed it

00:04:35,520 --> 00:04:40,160
out it would have been 184

00:04:37,600 --> 00:04:41,919
sides of a4 and i i wish we were doing

00:04:40,160 --> 00:04:43,680
this conference in barcelona because i

00:04:41,919 --> 00:04:44,400
would have printed it out on recycled

00:04:43,680 --> 00:04:46,160
paper

00:04:44,400 --> 00:04:47,440
and thrown it across the stage and it

00:04:46,160 --> 00:04:51,840
would have been an amazing

00:04:47,440 --> 00:04:54,880
visual device but yeah 184 sides of a4

00:04:51,840 --> 00:04:58,160
um 1.1 megabytes it had 100 different

00:04:54,880 --> 00:04:58,160
media queries in it

00:04:58,320 --> 00:05:02,000
and this wasn't a project that had been

00:04:59,759 --> 00:05:04,080
worked on by bad developers

00:05:02,000 --> 00:05:06,560
we didn't inherit it from a sort of

00:05:04,080 --> 00:05:09,280
cowboy agency that was trying to

00:05:06,560 --> 00:05:11,199
scan their customers it was just a

00:05:09,280 --> 00:05:12,080
project that was subject to the real

00:05:11,199 --> 00:05:15,199
world

00:05:12,080 --> 00:05:18,400
things like staff turnover things like

00:05:15,199 --> 00:05:20,000
client requirements changing things like

00:05:18,400 --> 00:05:22,080
working on large teams where not

00:05:20,000 --> 00:05:23,520
everyone is a css expert but sometimes

00:05:22,080 --> 00:05:26,320
something needs to be done so there's

00:05:23,520 --> 00:05:28,160
only one person to work on it

00:05:26,320 --> 00:05:30,240
and it got me thinking what can we do to

00:05:28,160 --> 00:05:33,360
stop this happening again

00:05:30,240 --> 00:05:36,960
so i started looking at um articles

00:05:33,360 --> 00:05:40,080
blog posts talks about scalable css

00:05:36,960 --> 00:05:42,160
so css that stays manageable with time

00:05:40,080 --> 00:05:43,759
rather than becoming unmanageable with

00:05:42,160 --> 00:05:45,680
time

00:05:43,759 --> 00:05:46,880
i found this blog post by a person

00:05:45,680 --> 00:05:49,759
called adam morse

00:05:46,880 --> 00:05:50,880
who just started a new job at salesforce

00:05:49,759 --> 00:05:53,919
i think a big

00:05:50,880 --> 00:05:55,600
u.s tech company and like me with the

00:05:53,919 --> 00:05:57,440
travel website he was going through

00:05:55,600 --> 00:05:59,120
their generated css

00:05:57,440 --> 00:06:01,759
and he kind of had a mixture of horror

00:05:59,120 --> 00:06:05,880
and amazement at how messy it was

00:06:01,759 --> 00:06:08,720
it was full of duplication

00:06:05,880 --> 00:06:10,720
overrides and things being used in

00:06:08,720 --> 00:06:12,160
really odd ways

00:06:10,720 --> 00:06:14,800
but the only thing he saw that made

00:06:12,160 --> 00:06:15,680
sense to him was a class called float

00:06:14,800 --> 00:06:18,880
left

00:06:15,680 --> 00:06:19,440
and all float left did was apply float

00:06:18,880 --> 00:06:21,919
left

00:06:19,440 --> 00:06:23,360
this was 2016 so we were using a lot of

00:06:21,919 --> 00:06:25,919
floats

00:06:23,360 --> 00:06:27,039
and adam's conclusion was that we write

00:06:25,919 --> 00:06:29,280
and we duplicate

00:06:27,039 --> 00:06:32,479
too much css because when we add new

00:06:29,280 --> 00:06:35,680
features we default to write in new css

00:06:32,479 --> 00:06:38,720
instead of reusing existing css

00:06:35,680 --> 00:06:41,360
but the only true way to make css

00:06:38,720 --> 00:06:41,759
genuinely reusable enough is to have it

00:06:41,360 --> 00:06:45,360
work

00:06:41,759 --> 00:06:45,360
at a very very low level

00:06:46,479 --> 00:06:52,319
and that low level is utility first

00:06:49,840 --> 00:06:53,440
so let's say we want to build one of

00:06:52,319 --> 00:06:56,000
these it's like

00:06:53,440 --> 00:06:57,759
a chat notification chat bubble that

00:06:56,000 --> 00:07:00,560
sort of thing

00:06:57,759 --> 00:07:02,000
here's how we might make it now so it's

00:07:00,560 --> 00:07:04,960
quite simple it's quite clean

00:07:02,000 --> 00:07:05,599
markup um but it's really tight to one

00:07:04,960 --> 00:07:07,280
use

00:07:05,599 --> 00:07:08,880
um it's it's always going to be a chat

00:07:07,280 --> 00:07:11,199
notification with a name like

00:07:08,880 --> 00:07:13,520
chat notification maybe that's a bad

00:07:11,199 --> 00:07:14,000
name maybe that limits the reusability

00:07:13,520 --> 00:07:16,960
but

00:07:14,000 --> 00:07:17,759
naming things is hard and the component

00:07:16,960 --> 00:07:19,120
author

00:07:17,759 --> 00:07:21,919
they've also had to come up with silly

00:07:19,120 --> 00:07:24,639
names things like chat notification

00:07:21,919 --> 00:07:26,080
logo wrapper and they're probably only

00:07:24,639 --> 00:07:28,800
using that to apply

00:07:26,080 --> 00:07:30,720
a flexbox class maybe just like one

00:07:28,800 --> 00:07:32,160
property and value pair

00:07:30,720 --> 00:07:34,400
is it really worth having to come up

00:07:32,160 --> 00:07:38,319
with names for everything just to do one

00:07:34,400 --> 00:07:40,479
like one line of css maybe

00:07:38,319 --> 00:07:42,400
if we imagine the css for this site

00:07:40,479 --> 00:07:45,280
they're gonna have a lot of components

00:07:42,400 --> 00:07:46,800
each component has its css wrapped up in

00:07:45,280 --> 00:07:49,759
chat notification

00:07:46,800 --> 00:07:50,800
download notification whatever things

00:07:49,759 --> 00:07:53,680
like colors

00:07:50,800 --> 00:07:55,039
things like line heights uh things like

00:07:53,680 --> 00:07:57,440
font sizes

00:07:55,039 --> 00:07:58,639
they're going to be repeated over and

00:07:57,440 --> 00:08:00,879
over again

00:07:58,639 --> 00:08:03,840
on this component we'll have font sizes

00:08:00,879 --> 00:08:06,080
and line heights and text colors set on

00:08:03,840 --> 00:08:07,840
chat notification title and chat

00:08:06,080 --> 00:08:10,080
notification message

00:08:07,840 --> 00:08:12,479
but these are these are global design

00:08:10,080 --> 00:08:13,280
tokens they are things that span the

00:08:12,479 --> 00:08:15,680
whole site

00:08:13,280 --> 00:08:18,160
they're things that are inherent to that

00:08:15,680 --> 00:08:20,879
organization's brand they're not really

00:08:18,160 --> 00:08:22,479
component concerns and they're going to

00:08:20,879 --> 00:08:25,199
be repeated over and over again

00:08:22,479 --> 00:08:27,360
and how many display flexes does one

00:08:25,199 --> 00:08:30,800
style sheet need

00:08:27,360 --> 00:08:32,880
well with utility first this is how you

00:08:30,800 --> 00:08:36,560
build that component

00:08:32,880 --> 00:08:38,719
so with utility first we deal to styling

00:08:36,560 --> 00:08:41,120
elements by applying pre-existing

00:08:38,719 --> 00:08:44,480
classes directly in the html

00:08:41,120 --> 00:08:46,000
we don't write new css unless we have to

00:08:44,480 --> 00:08:48,480
and these classes you can see there's

00:08:46,000 --> 00:08:49,519
lots of them it looks messy there's lots

00:08:48,480 --> 00:08:52,080
of classes

00:08:49,519 --> 00:08:53,360
but each one only does one thing and

00:08:52,080 --> 00:08:56,399
they're generated for us

00:08:53,360 --> 00:08:57,680
automatically by a tool based on what we

00:08:56,399 --> 00:08:59,839
tell that tool to do

00:08:57,680 --> 00:09:01,360
so we'll tell it what font sizes we want

00:08:59,839 --> 00:09:02,080
to use we'll tell it what colors we want

00:09:01,360 --> 00:09:04,640
to use

00:09:02,080 --> 00:09:06,240
we'll tell our space and scales and then

00:09:04,640 --> 00:09:07,760
it will generate all these classes for

00:09:06,240 --> 00:09:09,519
us

00:09:07,760 --> 00:09:12,160
and because of that we don't end up with

00:09:09,519 --> 00:09:12,160
repetition

00:09:12,560 --> 00:09:16,399
if i want to make a component display

00:09:14,320 --> 00:09:18,880
flex

00:09:16,399 --> 00:09:19,839
i won't have to write component name

00:09:18,880 --> 00:09:23,120
display flex

00:09:19,839 --> 00:09:26,320
i'll just add the flex class so these

00:09:23,120 --> 00:09:29,279
things only exist in our css ones

00:09:26,320 --> 00:09:30,480
if we need to do component specific css

00:09:29,279 --> 00:09:32,720
like maybe

00:09:30,480 --> 00:09:34,240
a gradient or an animation that's fine

00:09:32,720 --> 00:09:36,560
we can do that the old-fashioned sorry

00:09:34,240 --> 00:09:38,720
the traditional way um

00:09:36,560 --> 00:09:40,480
because it's utility first not utility

00:09:38,720 --> 00:09:43,279
only and what that means is

00:09:40,480 --> 00:09:44,800
we start off with these utility classes

00:09:43,279 --> 00:09:46,959
and if they're getting in the way

00:09:44,800 --> 00:09:51,279
if they're not practical then we do it

00:09:46,959 --> 00:09:54,480
the traditional way

00:09:51,279 --> 00:09:57,040
so you might be thinking

00:09:54,480 --> 00:09:58,880
i'm not convinced that is gross and

00:09:57,040 --> 00:10:01,120
that's fine because most people

00:09:58,880 --> 00:10:02,079
they don't love this at first sight but

00:10:01,120 --> 00:10:04,079
more and more people

00:10:02,079 --> 00:10:05,279
trying to you probably won't like it

00:10:04,079 --> 00:10:06,880
until you try it it's one of those

00:10:05,279 --> 00:10:08,240
things but when you do try it you'll be

00:10:06,880 --> 00:10:09,760
in good company

00:10:08,240 --> 00:10:11,839
all of these uh all of these

00:10:09,760 --> 00:10:13,519
organizations use utility first or

00:10:11,839 --> 00:10:16,160
something very similar for

00:10:13,519 --> 00:10:18,320
if not their main site then perhaps a

00:10:16,160 --> 00:10:20,720
sub product or perhaps an admin panel or

00:10:18,320 --> 00:10:23,920
something like that

00:10:20,720 --> 00:10:26,800
this is some um data from a survey

00:10:23,920 --> 00:10:27,360
it's from the state of css survey 2020.

00:10:26,800 --> 00:10:29,120
now

00:10:27,360 --> 00:10:30,399
this survey is not representative of

00:10:29,120 --> 00:10:32,560
overall developers

00:10:30,399 --> 00:10:34,800
excuse towards people in the western

00:10:32,560 --> 00:10:35,839
world excuse towards people who have

00:10:34,800 --> 00:10:39,279
time to answer

00:10:35,839 --> 00:10:41,040
surveys on twitter but it found that 87

00:10:39,279 --> 00:10:43,120
of people who've tried tailwind would

00:10:41,040 --> 00:10:44,480
use it again and that's a trend you see

00:10:43,120 --> 00:10:46,399
quite a lot on things like twitter

00:10:44,480 --> 00:10:48,640
people are anti-tailwind

00:10:46,399 --> 00:10:50,320
they try it they're kind of convinced

00:10:48,640 --> 00:10:51,680
they try a bit more and then they stick

00:10:50,320 --> 00:10:53,519
with it

00:10:51,680 --> 00:10:54,959
i've been using it for over two years on

00:10:53,519 --> 00:10:56,320
drupal 8 projects

00:10:54,959 --> 00:10:58,240
and for the rest of this talk i'm going

00:10:56,320 --> 00:11:01,279
to try and share why i enjoy it

00:10:58,240 --> 00:11:02,800
so much so

00:11:01,279 --> 00:11:05,200
you probably have a few concerns if

00:11:02,800 --> 00:11:08,000
you've not used u35 css before

00:11:05,200 --> 00:11:08,880
let's run through those concerns so a

00:11:08,000 --> 00:11:11,279
common one

00:11:08,880 --> 00:11:12,320
is isn't this just the same as inline

00:11:11,279 --> 00:11:14,079
styles

00:11:12,320 --> 00:11:15,440
and the idea here is that we know inline

00:11:14,079 --> 00:11:17,279
styles are bad

00:11:15,440 --> 00:11:19,519
therefore utility first looks like

00:11:17,279 --> 00:11:20,240
inline styles therefore utility first

00:11:19,519 --> 00:11:23,040
must be bad

00:11:20,240 --> 00:11:25,040
too but while they might look similar

00:11:23,040 --> 00:11:26,959
there's really important differences

00:11:25,040 --> 00:11:28,880
there's a lot that inline styles can't

00:11:26,959 --> 00:11:31,200
do like

00:11:28,880 --> 00:11:33,600
good luck putting a media query in

00:11:31,200 --> 00:11:35,040
inline styles and without media query

00:11:33,600 --> 00:11:36,560
you can't have responsive

00:11:35,040 --> 00:11:39,200
you can't have windows high contrast

00:11:36,560 --> 00:11:42,959
mode you can't have dark mode

00:11:39,200 --> 00:11:44,640
and and with um with inline styles

00:11:42,959 --> 00:11:46,399
once we put something in an inline style

00:11:44,640 --> 00:11:47,680
it's really hard to update it

00:11:46,399 --> 00:11:50,160
some people made that argument about

00:11:47,680 --> 00:11:51,920
ucsc first too but they're still classes

00:11:50,160 --> 00:11:53,760
and they only come from one source which

00:11:51,920 --> 00:11:55,600
is the tailwind css file

00:11:53,760 --> 00:11:59,120
whereas a color reference in an inline

00:11:55,600 --> 00:12:01,120
style would be all over your code base

00:11:59,120 --> 00:12:02,320
another really important thing is

00:12:01,120 --> 00:12:04,240
specificity

00:12:02,320 --> 00:12:06,320
now people who make this argument it's

00:12:04,240 --> 00:12:08,240
just like inline styles

00:12:06,320 --> 00:12:09,839
they're judging a css methodology so

00:12:08,240 --> 00:12:11,279
they should probably know more about

00:12:09,839 --> 00:12:13,760
specificity

00:12:11,279 --> 00:12:14,880
specificity is a score that the browser

00:12:13,760 --> 00:12:18,000
uses to decide

00:12:14,880 --> 00:12:19,680
whether or not css overrides other css

00:12:18,000 --> 00:12:21,360
and generally a lower score is thought

00:12:19,680 --> 00:12:23,200
of as better because that makes it more

00:12:21,360 --> 00:12:24,480
easy to override the style in if you

00:12:23,200 --> 00:12:26,399
have to

00:12:24,480 --> 00:12:28,160
now utility classes they're just

00:12:26,399 --> 00:12:31,200
standard css classes

00:12:28,160 --> 00:12:33,040
so they get a specificity score of 10

00:12:31,200 --> 00:12:34,639
but inline style have a specificity

00:12:33,040 --> 00:12:37,680
score of 1 000.

00:12:34,639 --> 00:12:39,519
so there's a slight difference there

00:12:37,680 --> 00:12:41,440
and finally inline styles are

00:12:39,519 --> 00:12:43,519
free-for-all they're a blank canvas

00:12:41,440 --> 00:12:46,160
you can put any value you want into them

00:12:43,519 --> 00:12:48,160
and things can quickly get out of hand

00:12:46,160 --> 00:12:49,920
now that doesn't apply with tailwind

00:12:48,160 --> 00:12:50,959
because tailwind generates all these

00:12:49,920 --> 00:12:53,519
classes for us

00:12:50,959 --> 00:12:55,200
based on the configuration file so it

00:12:53,519 --> 00:12:56,959
comes with some sensible defaults

00:12:55,200 --> 00:12:58,720
you could use it out of the box but if

00:12:56,959 --> 00:13:01,200
you're using in professional context

00:12:58,720 --> 00:13:02,959
you probably match it to the designs or

00:13:01,200 --> 00:13:04,079
to an existing design system for that

00:13:02,959 --> 00:13:08,079
client

00:13:04,079 --> 00:13:10,800
so in here we define fonts colors

00:13:08,079 --> 00:13:12,000
font size scales margin and padding

00:13:10,800 --> 00:13:14,240
scales

00:13:12,000 --> 00:13:16,720
basically everything down to like

00:13:14,240 --> 00:13:17,839
transition durations transition easing

00:13:16,720 --> 00:13:19,120
functions

00:13:17,839 --> 00:13:21,200
and this is really cool because it's

00:13:19,120 --> 00:13:23,839
just a javascript file

00:13:21,200 --> 00:13:25,440
so we can load this into our own scripts

00:13:23,839 --> 00:13:27,839
and we can do things like

00:13:25,440 --> 00:13:30,880
generate sas variables to use in third

00:13:27,839 --> 00:13:33,600
party or legacy css or scss

00:13:30,880 --> 00:13:34,000
we can export it to json export it to

00:13:33,600 --> 00:13:36,320
yaml

00:13:34,000 --> 00:13:37,839
to use in drupal for things like color

00:13:36,320 --> 00:13:40,560
picker fields

00:13:37,839 --> 00:13:42,959
or in something like pattern lab and

00:13:40,560 --> 00:13:44,800
tailwind is a post css plugin

00:13:42,959 --> 00:13:46,639
it reads this config file and it

00:13:44,800 --> 00:13:48,959
generates classes for us

00:13:46,639 --> 00:13:49,680
so by filling in that config file we've

00:13:48,959 --> 00:13:52,079
created

00:13:49,680 --> 00:13:54,079
basically a design system we've made an

00:13:52,079 --> 00:13:56,160
api that allows consumers

00:13:54,079 --> 00:13:58,480
in this case the html and the developers

00:13:56,160 --> 00:14:00,560
right in it to only use our approved

00:13:58,480 --> 00:14:02,399
values

00:14:00,560 --> 00:14:04,480
so as long as developers stick to using

00:14:02,399 --> 00:14:07,120
the classes generated by tailwind

00:14:04,480 --> 00:14:08,880
they accidentally introduce new font

00:14:07,120 --> 00:14:10,480
sizes new colors

00:14:08,880 --> 00:14:12,160
or other elements that are not part of

00:14:10,480 --> 00:14:13,680
that size brand

00:14:12,160 --> 00:14:15,839
and it's really good for developers too

00:14:13,680 --> 00:14:18,000
because we can open up dev source and

00:14:15,839 --> 00:14:20,320
see a list of all the available classes

00:14:18,000 --> 00:14:22,240
if we type in text they'll start giving

00:14:20,320 --> 00:14:23,760
us all the text color classes

00:14:22,240 --> 00:14:25,440
we know what's available we know what's

00:14:23,760 --> 00:14:27,120
safe to use and as a result

00:14:25,440 --> 00:14:28,800
we end up with a harmonious and a

00:14:27,120 --> 00:14:30,959
consistent user interface

00:14:28,800 --> 00:14:32,320
with less decision making slowing down

00:14:30,959 --> 00:14:34,720
developers

00:14:32,320 --> 00:14:35,839
so here we can see there's a set width

00:14:34,720 --> 00:14:38,000
scale

00:14:35,839 --> 00:14:39,120
here we can see there's a set of colors

00:14:38,000 --> 00:14:45,839
and here we can say

00:14:39,120 --> 00:14:45,839
there is a set of typefaces or fonts

00:14:46,399 --> 00:14:50,079
so another thing inline styles can't do

00:14:48,720 --> 00:14:51,600
is responsive web design

00:14:50,079 --> 00:14:53,199
so let's talk about how tailwind does

00:14:51,600 --> 00:14:55,760
that well

00:14:53,199 --> 00:14:58,160
each utility class in tailwind can have

00:14:55,760 --> 00:15:00,959
a prefix put in front of it

00:14:58,160 --> 00:15:02,480
and that prefix can be a breakpoint name

00:15:00,959 --> 00:15:05,760
so for example

00:15:02,480 --> 00:15:08,880
uh sm or md for small or medium

00:15:05,760 --> 00:15:11,120
so tailwind is mobile first so we start

00:15:08,880 --> 00:15:14,240
off with our mobile first classes

00:15:11,120 --> 00:15:15,680
here it's a one column grid and then as

00:15:14,240 --> 00:15:18,079
we increase the break point

00:15:15,680 --> 00:15:20,399
our small classes kick in so now it's a

00:15:18,079 --> 00:15:23,120
two column grid the padding changes

00:15:20,399 --> 00:15:23,920
and the gap between elements changes

00:15:23,120 --> 00:15:25,680
finally

00:15:23,920 --> 00:15:27,760
on the medium break point some more

00:15:25,680 --> 00:15:30,880
padding classes kick in too

00:15:27,760 --> 00:15:31,680
and this is verbose yes it looks messy

00:15:30,880 --> 00:15:33,600
initially

00:15:31,680 --> 00:15:35,040
but everything's in one place it's not

00:15:33,600 --> 00:15:37,440
spread between your markup

00:15:35,040 --> 00:15:39,600
and your css and it's not spread between

00:15:37,440 --> 00:15:41,040
different media query definitions

00:15:39,600 --> 00:15:44,000
there's no shift in between different

00:15:41,040 --> 00:15:45,519
files to do one single task

00:15:44,000 --> 00:15:47,519
by the way a similar approach is used

00:15:45,519 --> 00:15:50,160
for things like adding

00:15:47,519 --> 00:15:53,759
hover states focus states things like

00:15:50,160 --> 00:15:55,279
that so interactivity stuff

00:15:53,759 --> 00:15:57,440
now you might be thinking how am i going

00:15:55,279 --> 00:16:00,079
to remember all of these classes

00:15:57,440 --> 00:16:01,440
well any css methodology has its own

00:16:00,079 --> 00:16:03,600
name in schemes right

00:16:01,440 --> 00:16:05,040
it's always got its own conventions but

00:16:03,600 --> 00:16:05,920
at least for tailwind the names are

00:16:05,040 --> 00:16:08,480
functional

00:16:05,920 --> 00:16:10,160
so they describe what something does

00:16:08,480 --> 00:16:12,160
it's kind of obvious what

00:16:10,160 --> 00:16:13,759
you know flex does once you've used it a

00:16:12,160 --> 00:16:16,800
few times but when

00:16:13,759 --> 00:16:19,279
you're using a like semantic

00:16:16,800 --> 00:16:20,399
uh system it's hard to remember whether

00:16:19,279 --> 00:16:23,360
you should be using

00:16:20,399 --> 00:16:26,079
like card hyphen hyphen promoted or is

00:16:23,360 --> 00:16:29,519
it card hyphen hyphen featured or is it

00:16:26,079 --> 00:16:31,199
card hyphen hyphen highlighted

00:16:29,519 --> 00:16:33,360
if you know css already you'll pick up

00:16:31,199 --> 00:16:35,600
the tailwind classes quite quickly

00:16:33,360 --> 00:16:36,560
if you work with css and i say to you

00:16:35,600 --> 00:16:38,560
relative

00:16:36,560 --> 00:16:39,920
you'll probably think position relative

00:16:38,560 --> 00:16:41,920
if i say to you flex

00:16:39,920 --> 00:16:43,600
you'll probably think display flex and

00:16:41,920 --> 00:16:44,800
those are the right tailwind classes to

00:16:43,600 --> 00:16:47,519
use

00:16:44,800 --> 00:16:48,480
besides the latest version of phpstorm

00:16:47,519 --> 00:16:50,160
it's got your back

00:16:48,480 --> 00:16:51,680
it reads your tailbone config file and

00:16:50,160 --> 00:16:54,240
it gives you auto complete

00:16:51,680 --> 00:16:56,000
and there's a similar plugin for visual

00:16:54,240 --> 00:16:58,399
studio code too

00:16:56,000 --> 00:16:59,600
in fact the visual studio code plugin is

00:16:58,399 --> 00:17:00,320
actually developed by tailwind

00:16:59,600 --> 00:17:01,519
themselves

00:17:00,320 --> 00:17:03,680
because they care about developer

00:17:01,519 --> 00:17:06,880
experience

00:17:03,680 --> 00:17:07,760
now this is a thorny issue um separation

00:17:06,880 --> 00:17:10,799
of concerns

00:17:07,760 --> 00:17:12,799
is a long-standing idea um

00:17:10,799 --> 00:17:14,720
it reminds us of things like css zen

00:17:12,799 --> 00:17:16,079
garden in the early noughties where the

00:17:14,720 --> 00:17:18,240
idea was that one single

00:17:16,079 --> 00:17:19,919
document could be completely transformed

00:17:18,240 --> 00:17:23,199
by different css files

00:17:19,919 --> 00:17:26,640
because markup content and styling were

00:17:23,199 --> 00:17:28,720
absolutely separate

00:17:26,640 --> 00:17:30,000
but it's an idea that's first of all

00:17:28,720 --> 00:17:32,799
more of a principle

00:17:30,000 --> 00:17:33,600
than a real world practice and it's also

00:17:32,799 --> 00:17:36,400
an idea that

00:17:33,600 --> 00:17:36,799
kind of predates component-based designs

00:17:36,400 --> 00:17:38,640
and

00:17:36,799 --> 00:17:40,000
kind of predates effective templating

00:17:38,640 --> 00:17:42,720
systems

00:17:40,000 --> 00:17:44,400
and how many times have you sort of

00:17:42,720 --> 00:17:47,760
redesigned the whole website

00:17:44,400 --> 00:17:49,679
just by changing the css generally

00:17:47,760 --> 00:17:51,919
not always but generally we change the

00:17:49,679 --> 00:17:53,600
markup too

00:17:51,919 --> 00:17:55,600
so the argument against the separation

00:17:53,600 --> 00:17:57,280
of concerns worry is expressed much

00:17:55,600 --> 00:17:59,120
better than i can do it by these two

00:17:57,280 --> 00:18:00,559
blog posts on the right hand side

00:17:59,120 --> 00:18:02,240
and i'll tweet the links to them

00:18:00,559 --> 00:18:03,679
afterwards or you can grab the slides

00:18:02,240 --> 00:18:06,160
and there's links in there

00:18:03,679 --> 00:18:07,200
one blog post is by adam watten who

00:18:06,160 --> 00:18:09,440
wrote tailwind

00:18:07,200 --> 00:18:11,440
so you know pinch of salt and everything

00:18:09,440 --> 00:18:12,880
and the second blog post is written by

00:18:11,440 --> 00:18:15,360
someone called sarah dayan

00:18:12,880 --> 00:18:18,480
who works at algolia in france and is a

00:18:15,360 --> 00:18:20,720
big tailwind fan

00:18:18,480 --> 00:18:22,640
the quote separation of concerns is not

00:18:20,720 --> 00:18:24,480
equal to separation of file types that's

00:18:22,640 --> 00:18:27,520
actually a quote from the vue.js

00:18:24,480 --> 00:18:28,000
documentation so you may know vue has a

00:18:27,520 --> 00:18:30,320
concept

00:18:28,000 --> 00:18:32,080
of single file components where your

00:18:30,320 --> 00:18:35,679
components script in

00:18:32,080 --> 00:18:37,280
markup and styling all lives in one file

00:18:35,679 --> 00:18:39,360
people make separation of concerns

00:18:37,280 --> 00:18:40,799
worries about that and but what they're

00:18:39,360 --> 00:18:43,440
saying there is that

00:18:40,799 --> 00:18:44,960
they live in one file but it's still the

00:18:43,440 --> 00:18:46,480
right tool is still being used for the

00:18:44,960 --> 00:18:49,360
job so the css

00:18:46,480 --> 00:18:50,160
is handled by css it's not sort of being

00:18:49,360 --> 00:18:52,960
applied

00:18:50,160 --> 00:18:53,360
somehow through javascript or something

00:18:52,960 --> 00:18:55,120
and

00:18:53,360 --> 00:18:58,160
one way i like to think about this is

00:18:55,120 --> 00:19:00,559
it's still css tailwind like people say

00:18:58,160 --> 00:19:01,919
tailwind is it goes against all the

00:19:00,559 --> 00:19:04,080
history of the internet but

00:19:01,919 --> 00:19:08,160
it's still css it's just been applied in

00:19:04,080 --> 00:19:08,160
a really really really granular way

00:19:09,280 --> 00:19:13,200
another concern is maintainability so

00:19:12,240 --> 00:19:15,440
this is where we're going to start

00:19:13,200 --> 00:19:17,679
talking about drupal a bit more

00:19:15,440 --> 00:19:19,440
in drupal we build systems we don't

00:19:17,679 --> 00:19:21,520
build individual pages

00:19:19,440 --> 00:19:22,480
we have field templates we have nodes

00:19:21,520 --> 00:19:24,160
templates

00:19:22,480 --> 00:19:26,559
we have entities that reference each

00:19:24,160 --> 00:19:28,400
other all of these things are

00:19:26,559 --> 00:19:31,039
well they can be seen as discrete parts

00:19:28,400 --> 00:19:33,360
they can be seen as components

00:19:31,039 --> 00:19:34,679
in a component-based website we would

00:19:33,360 --> 00:19:37,919
have a single

00:19:34,679 --> 00:19:39,520
button.twig file and whenever we want

00:19:37,919 --> 00:19:41,360
the markup for a button

00:19:39,520 --> 00:19:43,360
we would reference that file we'd

00:19:41,360 --> 00:19:46,799
include it in twig

00:19:43,360 --> 00:19:49,280
we wouldn't have 100 references

00:19:46,799 --> 00:19:50,000
to the button markup we'd have one

00:19:49,280 --> 00:19:51,679
reference

00:19:50,000 --> 00:19:54,240
to one sorry we'd have a hundred

00:19:51,679 --> 00:19:55,360
references to the one file that provides

00:19:54,240 --> 00:19:56,880
the markup

00:19:55,360 --> 00:19:58,880
that's really important because without

00:19:56,880 --> 00:20:00,480
this utility first won't work

00:19:58,880 --> 00:20:02,000
if you're not building things in a

00:20:00,480 --> 00:20:05,039
component-based way

00:20:02,000 --> 00:20:05,919
um this isn't practical to use but

00:20:05,039 --> 00:20:07,600
a lot of people are doing

00:20:05,919 --> 00:20:08,559
component-based work in drupal and have

00:20:07,600 --> 00:20:11,600
been for a while

00:20:08,559 --> 00:20:13,520
so let's run through it quickly there's

00:20:11,600 --> 00:20:16,080
a big change in thinking

00:20:13,520 --> 00:20:18,159
um we rely a lot less on adding classes

00:20:16,080 --> 00:20:20,400
to things and instead we rely

00:20:18,159 --> 00:20:21,919
more on the markup so everything that's

00:20:20,400 --> 00:20:22,799
used in one place becomes a twit

00:20:21,919 --> 00:20:24,640
component

00:20:22,799 --> 00:20:26,240
with single source and markup no

00:20:24,640 --> 00:20:28,080
repetition of classes

00:20:26,240 --> 00:20:29,840
and then instead of adding one class for

00:20:28,080 --> 00:20:30,640
example dot card to lots of different

00:20:29,840 --> 00:20:33,280
places

00:20:30,640 --> 00:20:35,919
so we might add it to a node display

00:20:33,280 --> 00:20:38,880
mode we might add it to a paragraph

00:20:35,919 --> 00:20:40,080
we might add it to a views result row

00:20:38,880 --> 00:20:42,320
instead of doing that

00:20:40,080 --> 00:20:43,440
those three different drupal concepts

00:20:42,320 --> 00:20:46,480
will all include

00:20:43,440 --> 00:20:49,200
the one tweak file so here's an example

00:20:46,480 --> 00:20:50,799
of an accordion item component and this

00:20:49,200 --> 00:20:53,520
could be used in a paragraph it could be

00:20:50,799 --> 00:20:55,200
used in a block to show some facets

00:20:53,520 --> 00:20:57,760
it could be used on an e-commerce page

00:20:55,200 --> 00:21:01,039
to show some product information

00:20:57,760 --> 00:21:04,480
so we use twig functions like embed or

00:21:01,039 --> 00:21:06,159
include to load the file we pass in a

00:21:04,480 --> 00:21:06,880
load of variables which we can think of

00:21:06,159 --> 00:21:08,799
as sort of

00:21:06,880 --> 00:21:10,159
arguments for the fun for the component

00:21:08,799 --> 00:21:11,760
or parameters

00:21:10,159 --> 00:21:13,520
and we can also pass in blocks of

00:21:11,760 --> 00:21:17,120
content we want drupal to show

00:21:13,520 --> 00:21:18,799
how to render then inside that file

00:21:17,120 --> 00:21:20,480
this is where all the utility classes

00:21:18,799 --> 00:21:22,480
live so

00:21:20,480 --> 00:21:23,919
we use the drupal attributes object

00:21:22,480 --> 00:21:27,760
which has been around since

00:21:23,919 --> 00:21:30,480
i think early version eight and we

00:21:27,760 --> 00:21:31,600
actually use a pattern lab plugin so we

00:21:30,480 --> 00:21:34,000
can use this object

00:21:31,600 --> 00:21:35,360
in pattern lab we use the old php

00:21:34,000 --> 00:21:37,039
version of pattern lab which is why it's

00:21:35,360 --> 00:21:38,240
easier to do that

00:21:37,039 --> 00:21:40,720
and you can see we're adding a few

00:21:38,240 --> 00:21:44,000
classes we add accordion item

00:21:40,720 --> 00:21:45,840
block bg gray 25 and in these examples

00:21:44,000 --> 00:21:48,000
which are taken from my drupal work all

00:21:45,840 --> 00:21:48,720
the utility classes are prefixed with

00:21:48,000 --> 00:21:50,559
you

00:21:48,720 --> 00:21:52,159
and that's just a tailwind setting and

00:21:50,559 --> 00:21:54,480
it means we don't have

00:21:52,159 --> 00:21:56,559
drupal block classes clashing with

00:21:54,480 --> 00:21:58,159
tailwind block classes

00:21:56,559 --> 00:21:59,679
and we're adding some classes

00:21:58,159 --> 00:22:01,440
conditionally here

00:21:59,679 --> 00:22:03,200
if we look at the bottom we can see that

00:22:01,440 --> 00:22:04,159
is active which is a class used by our

00:22:03,200 --> 00:22:07,280
javascript

00:22:04,159 --> 00:22:07,919
is only added if is first is true and

00:22:07,280 --> 00:22:09,840
whose first

00:22:07,919 --> 00:22:11,200
would be an argument we passed into that

00:22:09,840 --> 00:22:13,200
um

00:22:11,200 --> 00:22:15,760
component if it was the first one in

00:22:13,200 --> 00:22:17,600
that set of paragraphs

00:22:15,760 --> 00:22:20,159
so here's a separate and slightly bigger

00:22:17,600 --> 00:22:20,159
example

00:22:21,360 --> 00:22:24,880
we've got a lot of classes here but

00:22:23,520 --> 00:22:26,720
they're all on their own line

00:22:24,880 --> 00:22:28,880
so it's easy to find existing ones

00:22:26,720 --> 00:22:30,960
delete them add new ones

00:22:28,880 --> 00:22:32,559
and on lines 13 and 14 we're using a

00:22:30,960 --> 00:22:34,080
ternary and twig

00:22:32,559 --> 00:22:36,480
so that's the question mark and the

00:22:34,080 --> 00:22:38,080
colon and we're using this to swap

00:22:36,480 --> 00:22:41,039
between two different color related

00:22:38,080 --> 00:22:43,039
classes based on the value that this get

00:22:41,039 --> 00:22:44,480
audience function returns

00:22:43,039 --> 00:22:46,799
this is an example of doing colour

00:22:44,480 --> 00:22:47,280
scheming work right inside twig with no

00:22:46,799 --> 00:22:50,080
sas

00:22:47,280 --> 00:22:51,200
no css custom properties so this site

00:22:50,080 --> 00:22:53,440
has a residential

00:22:51,200 --> 00:22:56,799
audience a commercial audience and they

00:22:53,440 --> 00:22:56,799
both have a different color scheme

00:22:57,760 --> 00:23:01,600
so getting started with components in

00:22:59,280 --> 00:23:03,360
drupal you'll probably end up using the

00:23:01,600 --> 00:23:05,679
components module

00:23:03,360 --> 00:23:06,960
the ui patterns ecosystem is really

00:23:05,679 --> 00:23:09,440
useful too

00:23:06,960 --> 00:23:10,960
and this github repository by alexa is

00:23:09,440 --> 00:23:13,919
just an amazing resource

00:23:10,960 --> 00:23:14,799
full of related articles related modules

00:23:13,919 --> 00:23:16,960
themes

00:23:14,799 --> 00:23:19,039
starter kits basically everything you

00:23:16,960 --> 00:23:19,919
need to do component-based design in

00:23:19,039 --> 00:23:21,600
drupal

00:23:19,919 --> 00:23:22,960
and if you're not doing component-based

00:23:21,600 --> 00:23:24,640
stuff already like it's

00:23:22,960 --> 00:23:26,640
it's the way to go for big sites

00:23:24,640 --> 00:23:28,240
absolutely

00:23:26,640 --> 00:23:30,880
you'll also want a lot of template

00:23:28,240 --> 00:23:33,280
suggestions and the more the merrier

00:23:30,880 --> 00:23:36,159
add as many as you can in your theme and

00:23:33,280 --> 00:23:37,919
you can use modules like form dazzle

00:23:36,159 --> 00:23:39,600
template suggester to get even more

00:23:37,919 --> 00:23:40,960
template suggestions

00:23:39,600 --> 00:23:42,159
it'll really make your life easier

00:23:40,960 --> 00:23:43,600
because we're going to be doing a lot

00:23:42,159 --> 00:23:49,600
more in markup

00:23:43,600 --> 00:23:49,600
now so let's get into another example

00:23:49,760 --> 00:23:53,840
let's say we've got a a a long text

00:23:53,279 --> 00:23:56,960
field

00:23:53,840 --> 00:23:59,200
a ck editor field and um

00:23:56,960 --> 00:24:01,919
we want to space out the paragraphs

00:23:59,200 --> 00:24:04,880
inside that field by a consistent amount

00:24:01,919 --> 00:24:05,200
and we also want to control that spacing

00:24:04,880 --> 00:24:08,000
so

00:24:05,200 --> 00:24:08,559
in our footer we might have um this

00:24:08,000 --> 00:24:10,400
field

00:24:08,559 --> 00:24:11,600
but we want it to be really narrow

00:24:10,400 --> 00:24:13,200
because it's just got copyright

00:24:11,600 --> 00:24:15,039
information and all that sort of legal

00:24:13,200 --> 00:24:16,480
small print stuff

00:24:15,039 --> 00:24:18,320
we might have it in a tab or an

00:24:16,480 --> 00:24:20,080
accordion and we might want it slightly

00:24:18,320 --> 00:24:21,200
compressed there as well

00:24:20,080 --> 00:24:23,600
so here's how we do it in the

00:24:21,200 --> 00:24:24,720
traditional way um you can see we're

00:24:23,600 --> 00:24:27,279
using

00:24:24,720 --> 00:24:28,960
sas and then that gets turned into css

00:24:27,279 --> 00:24:31,520
and the asterisk

00:24:28,960 --> 00:24:33,760
plus asterisk selector that's a super

00:24:31,520 --> 00:24:35,840
useful little css trick it's called the

00:24:33,760 --> 00:24:38,000
lobotomized owl because it looks like an

00:24:35,840 --> 00:24:39,760
owl with the eyes crossed out

00:24:38,000 --> 00:24:42,400
and what that means is target any

00:24:39,760 --> 00:24:44,320
element that has a preceding element

00:24:42,400 --> 00:24:46,480
so we use that to add a margin top

00:24:44,320 --> 00:24:49,200
between things

00:24:46,480 --> 00:24:50,880
that's a fine approach um it would just

00:24:49,200 --> 00:24:52,400
get a bit messy if we were adding lots

00:24:50,880 --> 00:24:54,240
and lots of overrides and

00:24:52,400 --> 00:24:55,760
it doesn't fit with our new utility

00:24:54,240 --> 00:24:57,440
first workflow

00:24:55,760 --> 00:24:59,600
so let's look at how to do it in a

00:24:57,440 --> 00:25:02,320
markup centric way that i'll play nicely

00:24:59,600 --> 00:25:02,320
with tailwind

00:25:03,919 --> 00:25:10,240
so this is a drupal specific template

00:25:07,440 --> 00:25:11,760
field hyphen hyphen text long html dot

00:25:10,240 --> 00:25:13,600
twig

00:25:11,760 --> 00:25:15,039
what we're doing here is we're using

00:25:13,600 --> 00:25:17,039
some twig um

00:25:15,039 --> 00:25:18,480
which is actually calling php methods

00:25:17,039 --> 00:25:19,760
behind the scenes

00:25:18,480 --> 00:25:21,679
we could also be doing this in a

00:25:19,760 --> 00:25:23,360
pre-process but to make it easier to

00:25:21,679 --> 00:25:24,480
show in one slide i put it all in one

00:25:23,360 --> 00:25:26,880
file

00:25:24,480 --> 00:25:28,159
so we're working out the parent entity

00:25:26,880 --> 00:25:30,880
of the field

00:25:28,159 --> 00:25:31,840
and then we're using the paragraphs api

00:25:30,880 --> 00:25:34,799
to work out

00:25:31,840 --> 00:25:36,559
what is hosting this paragraph and we

00:25:34,799 --> 00:25:38,720
use this information to set

00:25:36,559 --> 00:25:40,320
a variable called space and level

00:25:38,720 --> 00:25:43,120
spacing level is an integer

00:25:40,320 --> 00:25:43,600
it's one or it's two and then at the

00:25:43,120 --> 00:25:46,480
bottom

00:25:43,600 --> 00:25:48,080
you can see we're including our wysiwyg

00:25:46,480 --> 00:25:51,120
text atom

00:25:48,080 --> 00:25:53,360
and that's this file here so this is a

00:25:51,120 --> 00:25:54,880
non-drupal specific template

00:25:53,360 --> 00:25:56,720
um fair enough we're using the

00:25:54,880 --> 00:25:58,400
attributes object in here but there's no

00:25:56,720 --> 00:26:00,159
mentions of fields here

00:25:58,400 --> 00:26:01,600
there's no content render array that

00:26:00,159 --> 00:26:03,919
sort of thing

00:26:01,600 --> 00:26:05,520
this is where we set our spacing classes

00:26:03,919 --> 00:26:07,440
so we've already told tailwind to

00:26:05,520 --> 00:26:11,120
generate these

00:26:07,440 --> 00:26:12,880
uo1 uo2 ua3 classes

00:26:11,120 --> 00:26:15,360
and now we're using twig to set up a

00:26:12,880 --> 00:26:17,279
lookup table so this is the twig hash of

00:26:15,360 --> 00:26:18,480
space and related classes mapped against

00:26:17,279 --> 00:26:21,600
the spacing values

00:26:18,480 --> 00:26:23,520
1 2 3 that we set earlier and we're

00:26:21,600 --> 00:26:25,679
using twig's attribute function which is

00:26:23,520 --> 00:26:27,440
a way of accessing nested data

00:26:25,679 --> 00:26:28,799
to pick the right class from the lookup

00:26:27,440 --> 00:26:30,480
table

00:26:28,799 --> 00:26:31,919
using a lookup table is good because we

00:26:30,480 --> 00:26:34,480
can do find and replace

00:26:31,919 --> 00:26:36,799
easily and also avoiding string

00:26:34,480 --> 00:26:39,840
concatenation is important for css

00:26:36,799 --> 00:26:41,919
purging which we'll talk about later on

00:26:39,840 --> 00:26:43,679
so our templates do look more

00:26:41,919 --> 00:26:46,000
complicated now

00:26:43,679 --> 00:26:47,840
and there's a lot more going on in twig

00:26:46,000 --> 00:26:49,840
or in pre-processes

00:26:47,840 --> 00:26:51,600
but we've also removed all the

00:26:49,840 --> 00:26:54,000
complexity of the css

00:26:51,600 --> 00:26:54,880
so we're shifting complexity around but

00:26:54,000 --> 00:26:56,320
in doing so

00:26:54,880 --> 00:26:58,799
we're making a system that's more

00:26:56,320 --> 00:26:59,840
predictable and the css code base has

00:26:58,799 --> 00:27:01,440
fewer overrides

00:26:59,840 --> 00:27:03,919
no matter how many variants we add in

00:27:01,440 --> 00:27:06,000
the future

00:27:03,919 --> 00:27:07,760
so you might be thinking yeah this

00:27:06,000 --> 00:27:10,640
sounds like a really big change

00:27:07,760 --> 00:27:11,039
is it worth it well yeah i mean i think

00:27:10,640 --> 00:27:14,000
so

00:27:11,039 --> 00:27:15,760
that's why i'm giving this talk let's

00:27:14,000 --> 00:27:18,080
run through a few of the reasons why

00:27:15,760 --> 00:27:19,840
i really like utility first and why i

00:27:18,080 --> 00:27:22,640
think is what is right for the teams

00:27:19,840 --> 00:27:25,520
that i work in at least

00:27:22,640 --> 00:27:26,640
so this is a css tricks article written

00:27:25,520 --> 00:27:29,919
by

00:27:26,640 --> 00:27:30,320
mr css trex himself chris coyer and he

00:27:29,919 --> 00:27:32,799
says

00:27:30,320 --> 00:27:33,600
oh no our style sheets grow and grow and

00:27:32,799 --> 00:27:36,799
grow

00:27:33,600 --> 00:27:39,360
and he coined the term append only css

00:27:36,799 --> 00:27:40,399
what append only css means is what this

00:27:39,360 --> 00:27:43,679
says

00:27:40,399 --> 00:27:46,159
projects go on the days tick by everyone

00:27:43,679 --> 00:27:48,799
adds css but no one removes it

00:27:46,159 --> 00:27:50,720
things get bigger and bigger and bigger

00:27:48,799 --> 00:27:52,799
and we can see that quantified

00:27:50,720 --> 00:27:54,080
uh in this blog post by a person called

00:27:52,799 --> 00:27:57,120
john palladak

00:27:54,080 --> 00:27:59,520
polak so he started a new role

00:27:57,120 --> 00:28:00,320
and they were using traditional css and

00:27:59,520 --> 00:28:02,960
he noticed

00:28:00,320 --> 00:28:03,679
that each deployment they wrote more

00:28:02,960 --> 00:28:05,919
features

00:28:03,679 --> 00:28:07,760
they wrote more css and it was on a

00:28:05,919 --> 00:28:09,279
pretty solid growth they were on a bad

00:28:07,760 --> 00:28:11,039
trajectory

00:28:09,279 --> 00:28:14,000
but then he convinced his team to try a

00:28:11,039 --> 00:28:16,159
refactor to utility first css or as he

00:28:14,000 --> 00:28:19,039
calls it atomic css

00:28:16,159 --> 00:28:19,520
and instantly their code base dropped so

00:28:19,039 --> 00:28:21,679
it's a

00:28:19,520 --> 00:28:22,799
to below its original size when he

00:28:21,679 --> 00:28:25,440
joined

00:28:22,799 --> 00:28:26,880
but the most important thing is it

00:28:25,440 --> 00:28:29,360
stayed low

00:28:26,880 --> 00:28:30,159
the code base the css code base it

00:28:29,360 --> 00:28:32,799
didn't increase

00:28:30,159 --> 00:28:33,360
in size it stayed flat in fact it

00:28:32,799 --> 00:28:35,039
actually

00:28:33,360 --> 00:28:37,679
shrunk because he found more and more

00:28:35,039 --> 00:28:40,240
ways to optimize it

00:28:37,679 --> 00:28:41,120
so yeah his his html probably got more

00:28:40,240 --> 00:28:43,440
of a bose

00:28:41,120 --> 00:28:45,360
but css is something we generally to

00:28:43,440 --> 00:28:46,640
almost every page

00:28:45,360 --> 00:28:49,200
and it's also something that's render

00:28:46,640 --> 00:28:52,399
blocking so it's really really important

00:28:49,200 --> 00:28:54,799
to have a small css file

00:28:52,399 --> 00:28:56,880
you still write some new css that's why

00:28:54,799 --> 00:28:59,039
it's utility first not utility only

00:28:56,880 --> 00:29:01,039
you write per component breakpoints you

00:28:59,039 --> 00:29:03,760
write pseudo content

00:29:01,039 --> 00:29:06,320
some custom gradients for example but

00:29:03,760 --> 00:29:08,720
your css can finally stop growing

00:29:06,320 --> 00:29:09,360
and we've seen that loads of times at

00:29:08,720 --> 00:29:12,320
cti

00:29:09,360 --> 00:29:14,480
where i work and when we added solar

00:29:12,320 --> 00:29:16,159
site search to our internal distribution

00:29:14,480 --> 00:29:18,720
our sort of starter kit

00:29:16,159 --> 00:29:20,159
using a utility first css approach and a

00:29:18,720 --> 00:29:22,559
component-based design

00:29:20,159 --> 00:29:24,159
meant the only css we needed to write

00:29:22,559 --> 00:29:27,120
for that whole page

00:29:24,159 --> 00:29:29,039
um the form the facets the cards was the

00:29:27,120 --> 00:29:31,200
code you see on the right hand side

00:29:29,039 --> 00:29:33,440
and all we were doing there was override

00:29:31,200 --> 00:29:35,760
the default as the styling

00:29:33,440 --> 00:29:37,919
of the mark html element which is like a

00:29:35,760 --> 00:29:39,840
an element to highlight stuff

00:29:37,919 --> 00:29:41,200
it gets even better though because that

00:29:39,840 --> 00:29:43,360
feature took like

00:29:41,200 --> 00:29:44,640
one two three four five six seven lines

00:29:43,360 --> 00:29:47,360
of sass

00:29:44,640 --> 00:29:47,840
but when we added our blog functionality

00:29:47,360 --> 00:29:51,120
it

00:29:47,840 --> 00:29:53,919
added no new css at all

00:29:51,120 --> 00:29:55,440
so we added blog listings we added

00:29:53,919 --> 00:29:58,320
author information

00:29:55,440 --> 00:30:00,399
we added individual blog post pages and

00:29:58,320 --> 00:30:02,399
we did all of it without writing any new

00:30:00,399 --> 00:30:04,559
css

00:30:02,399 --> 00:30:06,640
now you might be thinking isn't a

00:30:04,559 --> 00:30:09,360
tailwind css file massive though

00:30:06,640 --> 00:30:10,320
if it's got all this css i need yeah it

00:30:09,360 --> 00:30:12,880
is massive

00:30:10,320 --> 00:30:14,399
during development but when you build

00:30:12,880 --> 00:30:16,799
your production ready css

00:30:14,399 --> 00:30:18,799
tailwind uses a open source package

00:30:16,799 --> 00:30:21,120
called purge.css

00:30:18,799 --> 00:30:23,120
and we configure purge css to scan

00:30:21,120 --> 00:30:24,799
through all of the files that might have

00:30:23,120 --> 00:30:27,120
utility classes in them

00:30:24,799 --> 00:30:28,559
so you can point out anything uh point

00:30:27,120 --> 00:30:31,360
out your twig templates

00:30:28,559 --> 00:30:33,039
point out your drupal config files point

00:30:31,360 --> 00:30:36,159
out your javascript files

00:30:33,039 --> 00:30:38,080
and it learns what classes we ne we use

00:30:36,159 --> 00:30:39,919
and it removes any tailwind classes that

00:30:38,080 --> 00:30:41,600
aren't in use and that means

00:30:39,919 --> 00:30:45,919
that people's tailwind files generally

00:30:41,600 --> 00:30:45,919
get down to sort of about 15 kilobytes

00:30:46,399 --> 00:30:51,919
so our css is going to get smaller but

00:30:48,559 --> 00:30:54,720
it also gets nicer to work with

00:30:51,919 --> 00:30:56,799
css is a global scope it's one of the

00:30:54,720 --> 00:30:58,720
few things in programming where we

00:30:56,799 --> 00:31:00,880
want a global scope and it needs a

00:30:58,720 --> 00:31:02,960
global scope to work in the way css has

00:31:00,880 --> 00:31:04,720
been designed to work

00:31:02,960 --> 00:31:06,320
it's a really powerful feature but it's

00:31:04,720 --> 00:31:08,399
one that frustrates people

00:31:06,320 --> 00:31:10,320
um people accidentally change things

00:31:08,399 --> 00:31:11,840
because they don't know where else css

00:31:10,320 --> 00:31:13,519
is being relied on

00:31:11,840 --> 00:31:15,840
and you have to think about who might

00:31:13,519 --> 00:31:18,720
you work in the future and how reliable

00:31:15,840 --> 00:31:19,600
and how reusable it is but utility

00:31:18,720 --> 00:31:21,440
classes

00:31:19,600 --> 00:31:23,440
they're added to a component and they'll

00:31:21,440 --> 00:31:25,360
only affect that component

00:31:23,440 --> 00:31:26,799
so all of a sudden we've now got a local

00:31:25,360 --> 00:31:29,440
scope which makes it

00:31:26,799 --> 00:31:31,120
a lot easier for people makes it easier

00:31:29,440 --> 00:31:32,799
to change a component without worrying

00:31:31,120 --> 00:31:34,720
that you're rewriting some css that

00:31:32,799 --> 00:31:36,480
someone else might be relying on

00:31:34,720 --> 00:31:38,480
you only need to think about one at a

00:31:36,480 --> 00:31:41,039
time you don't need to try and hold the

00:31:38,480 --> 00:31:43,519
whole css code base in your head

00:31:41,039 --> 00:31:45,200
and work out the cascade work out

00:31:43,519 --> 00:31:48,080
specificities

00:31:45,200 --> 00:31:49,840
all that sort of thing so let's deal

00:31:48,080 --> 00:31:52,159
with another css frustration

00:31:49,840 --> 00:31:53,600
naming things you saw in that example

00:31:52,159 --> 00:31:56,720
earlier we were named

00:31:53,600 --> 00:31:58,559
chat notification logo wrapper

00:31:56,720 --> 00:32:00,159
you probably at some point had to come

00:31:58,559 --> 00:32:03,519
up with a name like

00:32:00,159 --> 00:32:06,559
news cards in a rapper just

00:32:03,519 --> 00:32:08,320
a small amount of css you've probably

00:32:06,559 --> 00:32:10,080
heard this joke before

00:32:08,320 --> 00:32:12,080
there's only two hard things in computer

00:32:10,080 --> 00:32:14,240
science cash invalidation

00:32:12,080 --> 00:32:15,600
and naming things and i mean let's face

00:32:14,240 --> 00:32:17,600
it with drupal developers we've got

00:32:15,600 --> 00:32:20,399
enough problems with the cache as it is

00:32:17,600 --> 00:32:20,960
let's not worry about naming things bem

00:32:20,399 --> 00:32:23,919
style

00:32:20,960 --> 00:32:24,799
block element modifier is quite brain

00:32:23,919 --> 00:32:27,039
intensive

00:32:24,799 --> 00:32:28,559
it requires context shifting and it

00:32:27,039 --> 00:32:30,159
slows us down

00:32:28,559 --> 00:32:32,480
we need to come up with good names for

00:32:30,159 --> 00:32:34,159
blocks good names for elements good

00:32:32,480 --> 00:32:36,080
names for modifiers

00:32:34,159 --> 00:32:38,559
then we need to worry about where does

00:32:36,080 --> 00:32:41,200
one component end and another one start

00:32:38,559 --> 00:32:43,039
should i break this into a new block and

00:32:41,200 --> 00:32:44,720
even when we come up with good names

00:32:43,039 --> 00:32:46,720
sometimes requirements change and now

00:32:44,720 --> 00:32:49,440
the name doesn't make sense anymore

00:32:46,720 --> 00:32:51,279
no one can predict the future but with

00:32:49,440 --> 00:32:52,559
utility first because we're not coming

00:32:51,279 --> 00:32:54,960
up with these

00:32:52,559 --> 00:32:56,080
component-based or semantic hooks

00:32:54,960 --> 00:32:58,000
classes

00:32:56,080 --> 00:33:00,399
we don't need to make names for them we

00:32:58,000 --> 00:33:01,600
just use our pre-existing classes

00:33:00,399 --> 00:33:05,360
and because we're not coming out with

00:33:01,600 --> 00:33:08,080
names we can focus more on development

00:33:05,360 --> 00:33:10,159
that makes things fast like really

00:33:08,080 --> 00:33:12,399
really really really fast

00:33:10,159 --> 00:33:14,480
we can build whole components in the

00:33:12,399 --> 00:33:16,320
browser we can open up dev tools

00:33:14,480 --> 00:33:18,399
we can go to that little classes bit

00:33:16,320 --> 00:33:20,399
where it auto completes the classes

00:33:18,399 --> 00:33:21,600
we can add things remove things change

00:33:20,399 --> 00:33:23,279
things

00:33:21,600 --> 00:33:25,600
there's no waiting for sas to run

00:33:23,279 --> 00:33:27,840
there's no waiting for post css to run

00:33:25,600 --> 00:33:29,519
development can happen almost as fast as

00:33:27,840 --> 00:33:30,960
you can type

00:33:29,519 --> 00:33:32,559
now i'm not sure how well zoom is

00:33:30,960 --> 00:33:33,600
showing it but there's a super

00:33:32,559 --> 00:33:35,679
distracting gif

00:33:33,600 --> 00:33:38,240
on the right hand side of this slide and

00:33:35,679 --> 00:33:40,480
it's showing someone building a clone

00:33:38,240 --> 00:33:41,600
of the instagram stories user interface

00:33:40,480 --> 00:33:44,559
from scratch

00:33:41,600 --> 00:33:47,600
in about nine or 10 minutes or without

00:33:44,559 --> 00:33:47,600
leaving their browser

00:33:48,720 --> 00:33:52,000
so this is really good for productivity

00:33:51,120 --> 00:33:53,440
and it's really good for

00:33:52,000 --> 00:33:56,320
focus because we're doing a lot less

00:33:53,440 --> 00:33:56,320
context shifting

00:33:57,440 --> 00:34:01,039
now the cascade is a fundamental part of

00:34:00,320 --> 00:34:03,279
css

00:34:01,039 --> 00:34:04,960
it's super important it's how it works

00:34:03,279 --> 00:34:06,320
it's how it was designed

00:34:04,960 --> 00:34:08,079
but it's also the source of a lot of

00:34:06,320 --> 00:34:10,240
people's frustration

00:34:08,079 --> 00:34:11,280
now utility classes are all single

00:34:10,240 --> 00:34:13,599
classes

00:34:11,280 --> 00:34:14,480
and they're not long selectors and

00:34:13,599 --> 00:34:16,560
they're either added

00:34:14,480 --> 00:34:18,320
or they're not so that means they always

00:34:16,560 --> 00:34:20,000
have the same specificity

00:34:18,320 --> 00:34:21,919
so the only thing that controls whether

00:34:20,000 --> 00:34:24,000
one overrides the other is source order

00:34:21,919 --> 00:34:25,599
in the tailwind css file

00:34:24,000 --> 00:34:27,359
and it also means it's really easy to

00:34:25,599 --> 00:34:29,520
see why something's happening

00:34:27,359 --> 00:34:31,440
if something has red background it's

00:34:29,520 --> 00:34:34,480
because someone has added

00:34:31,440 --> 00:34:34,960
bg red or bg danger or bg whatever you

00:34:34,480 --> 00:34:36,480
want

00:34:34,960 --> 00:34:38,159
to either that element or something

00:34:36,480 --> 00:34:40,240
higher up in the dom

00:34:38,159 --> 00:34:41,679
but in the dom we don't have to worry

00:34:40,240 --> 00:34:43,919
about the css file

00:34:41,679 --> 00:34:45,280
the cascade when something goes wrong

00:34:43,919 --> 00:34:47,520
when we're debugging

00:34:45,280 --> 00:34:50,079
we don't have to work our way up and

00:34:47,520 --> 00:34:52,159
down all of the applied classes

00:34:50,079 --> 00:34:54,320
we don't need to work out what it is

00:34:52,159 --> 00:34:54,879
that's overriding our code and then how

00:34:54,320 --> 00:34:57,359
to

00:34:54,879 --> 00:34:59,520
rewrite that code so it still does the

00:34:57,359 --> 00:35:01,839
job it was originally designed to do

00:34:59,520 --> 00:35:03,440
but doesn't override our work and our

00:35:01,839 --> 00:35:05,599
work still works

00:35:03,440 --> 00:35:06,960
and that sort of thing is it's doable

00:35:05,599 --> 00:35:07,760
you can teach yourself you can be

00:35:06,960 --> 00:35:11,680
trained

00:35:07,760 --> 00:35:15,280
but it's slow and it's prone to error

00:35:11,680 --> 00:35:17,520
so where we can remove the cascade

00:35:15,280 --> 00:35:18,400
it might be a smart thing to do it goes

00:35:17,520 --> 00:35:21,119
against

00:35:18,400 --> 00:35:22,640
some things that css was designed for so

00:35:21,119 --> 00:35:24,640
purists might hate it

00:35:22,640 --> 00:35:26,480
but in the real world it makes life

00:35:24,640 --> 00:35:27,119
easier it means we can deliver things

00:35:26,480 --> 00:35:29,920
quicker

00:35:27,119 --> 00:35:30,800
it means we can focus time on doing new

00:35:29,920 --> 00:35:33,920
features

00:35:30,800 --> 00:35:35,200
bug fixes quality rather than being a

00:35:33,920 --> 00:35:37,599
purist

00:35:35,200 --> 00:35:39,280
and besides we can still use the cascade

00:35:37,599 --> 00:35:41,920
where is the best tool for the job

00:35:39,280 --> 00:35:44,079
utility first not utility only for

00:35:41,920 --> 00:35:47,040
example tailwind provides a

00:35:44,079 --> 00:35:49,119
typography or prose plugin and the

00:35:47,040 --> 00:35:50,560
design for this plugin is that it styles

00:35:49,119 --> 00:35:52,800
cms content

00:35:50,560 --> 00:35:54,640
so in drupal we could use that to style

00:35:52,800 --> 00:35:57,280
content that comes from ck editor

00:35:54,640 --> 00:35:58,880
we wouldn't hack ck editor to add load

00:35:57,280 --> 00:36:02,560
of classes to our headlines

00:35:58,880 --> 00:36:02,560
we'd let the pros plugin handle it

00:36:02,640 --> 00:36:06,960
let's talk a bit about making it harder

00:36:04,320 --> 00:36:09,760
for people to make mistakes

00:36:06,960 --> 00:36:10,640
so utilities only allow set values to be

00:36:09,760 --> 00:36:12,320
applied

00:36:10,640 --> 00:36:14,000
so they enforce consistency and they

00:36:12,320 --> 00:36:15,119
help guide people towards doing the

00:36:14,000 --> 00:36:17,119
right thing

00:36:15,119 --> 00:36:19,520
and this lowers the barrier to entry and

00:36:17,119 --> 00:36:22,240
it makes it easier for non-css experts

00:36:19,520 --> 00:36:23,680
to do user interface work safely

00:36:22,240 --> 00:36:25,680
these are kind of like the bumpers like

00:36:23,680 --> 00:36:26,640
if you're bad at bowling like me you go

00:36:25,680 --> 00:36:28,320
bowling

00:36:26,640 --> 00:36:30,079
maybe if you're not embarrassed you'll

00:36:28,320 --> 00:36:31,599
put up the bumpers on the side

00:36:30,079 --> 00:36:33,359
and this means you can still take part

00:36:31,599 --> 00:36:35,119
you can still have fun you won't get

00:36:33,359 --> 00:36:37,680
frustrated as much

00:36:35,119 --> 00:36:39,359
with traditional css there's no bumpers

00:36:37,680 --> 00:36:41,359
there's no guard rails

00:36:39,359 --> 00:36:44,000
everything we write is a blank canvas

00:36:41,359 --> 00:36:46,960
and we can fill it with anything we want

00:36:44,000 --> 00:36:49,119
we can add darken functions from sas

00:36:46,960 --> 00:36:50,960
that results in an off-brand color

00:36:49,119 --> 00:36:53,040
or maybe someone accidentally sets the

00:36:50,960 --> 00:36:56,079
font size to 1.2 rem

00:36:53,040 --> 00:36:58,560
instead of 1.33 m maybe someone forgets

00:36:56,079 --> 00:37:00,480
there's a mixing they should be using

00:36:58,560 --> 00:37:02,160
by forcing people to use only these

00:37:00,480 --> 00:37:05,200
classes we also

00:37:02,160 --> 00:37:07,520
make developers and designers

00:37:05,200 --> 00:37:09,359
stick to the system designers have to

00:37:07,520 --> 00:37:10,960
use the space and scales in the grids

00:37:09,359 --> 00:37:11,680
because otherwise we can't build their

00:37:10,960 --> 00:37:13,440
work

00:37:11,680 --> 00:37:15,359
they can't add in magic numbers that

00:37:13,440 --> 00:37:18,560
look good in photoshop but don't work on

00:37:15,359 --> 00:37:19,839
our really responsive website

00:37:18,560 --> 00:37:22,079
and with all of these arguments for

00:37:19,839 --> 00:37:22,720
utility first not just this one but all

00:37:22,079 --> 00:37:24,720
the

00:37:22,720 --> 00:37:25,839
made in this slide there will always be

00:37:24,720 --> 00:37:28,079
people saying

00:37:25,839 --> 00:37:29,839
if you did traditional css properly you

00:37:28,079 --> 00:37:32,079
wouldn't have these problems

00:37:29,839 --> 00:37:34,079
if you were stricter about code review

00:37:32,079 --> 00:37:36,720
and variable and mixing use

00:37:34,079 --> 00:37:38,480
you'd be fine if you taught yourself or

00:37:36,720 --> 00:37:40,960
you were trained better

00:37:38,480 --> 00:37:41,680
you wouldn't worry so much about css and

00:37:40,960 --> 00:37:44,480
they're right

00:37:41,680 --> 00:37:45,760
but in the real world in the commercial

00:37:44,480 --> 00:37:48,880
world

00:37:45,760 --> 00:37:52,240
this kind of messiness happens all

00:37:48,880 --> 00:37:55,599
the time here's some css stats from some

00:37:52,240 --> 00:37:59,359
high profile tech companies in 2017.

00:37:55,599 --> 00:38:04,240
gitlab no one needs 59 font sizes

00:37:59,359 --> 00:38:06,240
github no one needs 163 text colors

00:38:04,240 --> 00:38:08,560
everyone can get it wrong and that's why

00:38:06,240 --> 00:38:11,680
guard rails are great

00:38:08,560 --> 00:38:14,320
fun fact since 2017

00:38:11,680 --> 00:38:16,560
gitlab stripe and github have all

00:38:14,320 --> 00:38:19,839
switched to using utility first

00:38:16,560 --> 00:38:22,000
css for some or all of their sites

00:38:19,839 --> 00:38:23,920
and they've added it to their main site

00:38:22,000 --> 00:38:26,880
they've added it to a new design system

00:38:23,920 --> 00:38:28,640
or they've added it to internal tools

00:38:26,880 --> 00:38:30,720
utility first won't make sense for

00:38:28,640 --> 00:38:32,240
everyone but more and more people are

00:38:30,720 --> 00:38:34,079
trying it and more and more people are

00:38:32,240 --> 00:38:35,359
discovering it works for them

00:38:34,079 --> 00:38:38,240
even if you don't think it's right for

00:38:35,359 --> 00:38:40,800
you it's great to have the option

00:38:38,240 --> 00:38:42,480
so in conclusion using tailwind of

00:38:40,800 --> 00:38:44,960
drupal will benefit from a change in

00:38:42,480 --> 00:38:47,280
mindset and developing some new skills

00:38:44,960 --> 00:38:49,280
it's not an easy change there's

00:38:47,280 --> 00:38:50,800
complexity when it comes to templating

00:38:49,280 --> 00:38:52,400
there's complexity when it comes to

00:38:50,800 --> 00:38:53,359
components to make sure you don't repeat

00:38:52,400 --> 00:38:56,800
yourself

00:38:53,359 --> 00:38:59,200
but it's worked well for us we've seen

00:38:56,800 --> 00:39:00,960
much much much fewer visual regression

00:38:59,200 --> 00:39:02,960
bug tickets being raised

00:39:00,960 --> 00:39:04,640
i can't remember the last time that me

00:39:02,960 --> 00:39:06,400
or someone on my team

00:39:04,640 --> 00:39:08,640
accidentally changed the appearance of

00:39:06,400 --> 00:39:10,800
something by accident

00:39:08,640 --> 00:39:12,880
i'm sure it happens but i don't remember

00:39:10,800 --> 00:39:13,760
we've also got less complex code bases

00:39:12,880 --> 00:39:15,280
now

00:39:13,760 --> 00:39:17,119
we can go back to a project from two

00:39:15,280 --> 00:39:17,839
years ago and we know what classes to

00:39:17,119 --> 00:39:20,560
use

00:39:17,839 --> 00:39:22,560
it doesn't feel messy most importantly

00:39:20,560 --> 00:39:24,800
people tell me that when they work on

00:39:22,560 --> 00:39:26,880
old projects that don't use tailwind or

00:39:24,800 --> 00:39:28,960
they help out our magento teams or on

00:39:26,880 --> 00:39:31,359
racco teams that don't use tailwind yet

00:39:28,960 --> 00:39:34,320
they miss it and they say it's nice to

00:39:31,359 --> 00:39:36,720
come back to using utility first

00:39:34,320 --> 00:39:38,480
so thank you very much and we've got a

00:39:36,720 --> 00:39:39,760
few minutes for questions maybe one or

00:39:38,480 --> 00:39:41,200
two or three minutes

00:39:39,760 --> 00:39:42,960
and don't forget the contribution

00:39:41,200 --> 00:39:45,359
opportunities

00:39:42,960 --> 00:39:47,359
don't forget to give feedback and bear

00:39:45,359 --> 00:39:48,960
with me a moment while i jump into the

00:39:47,359 --> 00:39:52,160
on-air platform and look at what

00:39:48,960 --> 00:39:55,599
questions people have been asking

00:39:52,160 --> 00:39:57,599
so let's see how many twigs do you have

00:39:55,599 --> 00:39:58,800
to override with only tailwind with

00:39:57,599 --> 00:40:00,720
tailwind classes

00:39:58,800 --> 00:40:02,160
a lot because that's how we do things by

00:40:00,720 --> 00:40:04,800
default now

00:40:02,160 --> 00:40:06,720
um we live in twig markup we don't live

00:40:04,800 --> 00:40:09,040
in css files anymore

00:40:06,720 --> 00:40:10,000
um it makes life a bit harder there's a

00:40:09,040 --> 00:40:12,240
training issue

00:40:10,000 --> 00:40:14,079
where we have to get people used to that

00:40:12,240 --> 00:40:16,079
but um

00:40:14,079 --> 00:40:18,480
it's more predictable we're not relying

00:40:16,079 --> 00:40:21,760
on the override we're just relying on

00:40:18,480 --> 00:40:23,359
whether or not a class is added

00:40:21,760 --> 00:40:25,280
if you had to handle multiple footer

00:40:23,359 --> 00:40:26,800
blocks on the same page how would you

00:40:25,280 --> 00:40:29,440
apply this approach

00:40:26,800 --> 00:40:30,000
we'd probably have them as custom blocks

00:40:29,440 --> 00:40:32,480
so we'd

00:40:30,000 --> 00:40:33,520
we'd have a custom block plugin which

00:40:32,480 --> 00:40:36,000
would then give it

00:40:33,520 --> 00:40:36,640
a machine name and then we then have a

00:40:36,000 --> 00:40:38,560
custom

00:40:36,640 --> 00:40:40,640
twig suggestion for that block with

00:40:38,560 --> 00:40:41,280
machine name or maybe even use a core

00:40:40,640 --> 00:40:43,040
one

00:40:41,280 --> 00:40:44,400
and then each block would have its own

00:40:43,040 --> 00:40:46,319
template file

00:40:44,400 --> 00:40:48,400
and we could all reference so maybe

00:40:46,319 --> 00:40:49,200
we've got three drupal twig template

00:40:48,400 --> 00:40:50,880
files

00:40:49,200 --> 00:40:53,040
they could all reference the one single

00:40:50,880 --> 00:40:55,040
component but we could pass in

00:40:53,040 --> 00:40:57,040
different arguments to do different

00:40:55,040 --> 00:40:58,960
things

00:40:57,040 --> 00:41:00,480
um is there a performance impact for

00:40:58,960 --> 00:41:02,640
having so many twig files

00:41:00,480 --> 00:41:03,839
that's a really good question i think

00:41:02,640 --> 00:41:06,160
the answer there is

00:41:03,839 --> 00:41:07,359
perhaps but we rely so heavily on the

00:41:06,160 --> 00:41:11,040
render cache

00:41:07,359 --> 00:41:11,760
um drupal is is is working with twig

00:41:11,040 --> 00:41:14,240
anyway

00:41:11,760 --> 00:41:16,400
it's working through all the suggestions

00:41:14,240 --> 00:41:19,640
so whether it uses my custom block

00:41:16,400 --> 00:41:21,119
dot twig or it uses the core

00:41:19,640 --> 00:41:23,599
block.html.twig

00:41:21,119 --> 00:41:25,680
it's still running um everything through

00:41:23,599 --> 00:41:27,040
tweak but that output is hopefully being

00:41:25,680 --> 00:41:29,119
cached

00:41:27,040 --> 00:41:30,319
sorry for interrupt that we have to

00:41:29,119 --> 00:41:32,000
finish okay

00:41:30,319 --> 00:41:34,240
that's great um i will answer any

00:41:32,000 --> 00:41:36,480
remaining questions by text

00:41:34,240 --> 00:41:38,560
on the on-air platform and you can also

00:41:36,480 --> 00:41:39,599
follow me on twitter and i'll help out

00:41:38,560 --> 00:41:41,760
on there

00:41:39,599 --> 00:41:44,960
thanks a lot for listening everyone hope

00:41:41,760 --> 00:41:44,960

YouTube URL: https://www.youtube.com/watch?v=MYY1teFZ_Fk


