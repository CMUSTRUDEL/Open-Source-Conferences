Title: MAKERS & BUILDERS - TDD Test Driven Drupal   DrupalCon Europe 2020
Publication date: 2021-01-13
Playlist: DrupalCon Europe 2020
Description: 
	Testing is important. Why? It allows developers to add new features and edit and refactor existing code without the worry of adding regressions, reduces the reliance on manual testing to discover bugs, and by taking a test driven approach, your implementation code is leaner as you only write what is needed for your tests to pass.
Captions: 
	00:00:04,059 --> 00:00:09,889
[Music]

00:00:14,320 --> 00:00:20,320
hello everybody welcome to the session

00:00:17,199 --> 00:00:22,480
uh tdd uh test driven drupal uh by

00:00:20,320 --> 00:00:24,640
myself my name is oliver davis

00:00:22,480 --> 00:00:25,599
uh thanks for everybody for just

00:00:24,640 --> 00:00:28,400
replying

00:00:25,599 --> 00:00:30,160
uh in the poll in the live poll at the

00:00:28,400 --> 00:00:31,599
beginning i can see a couple of comments

00:00:30,160 --> 00:00:33,920
coming in already

00:00:31,599 --> 00:00:34,960
uh which is great thank you for some

00:00:33,920 --> 00:00:38,640
interaction that's

00:00:34,960 --> 00:00:39,440
brilliant uh what we're gonna be doing

00:00:38,640 --> 00:00:41,760
in this talk

00:00:39,440 --> 00:00:43,440
uh first we talking about why to write

00:00:41,760 --> 00:00:45,120
tests and what to test

00:00:43,440 --> 00:00:46,879
uh what different types of tests we have

00:00:45,120 --> 00:00:49,360
available to us in drupal

00:00:46,879 --> 00:00:51,199
how to run them uh look at a couple of

00:00:49,360 --> 00:00:53,600
examples and then also how to build a

00:00:51,199 --> 00:00:56,719
new module with tdd

00:00:53,600 --> 00:00:58,800
it's depending how the time goes uh

00:00:56,719 --> 00:01:00,399
my name is oliver as i said uh i work

00:00:58,800 --> 00:01:02,640
for a company called invica

00:01:00,399 --> 00:01:05,040
uh i'm a full stack software developer

00:01:02,640 --> 00:01:07,439
and system administrator

00:01:05,040 --> 00:01:09,119
i'm a long time drupal developer i've

00:01:07,439 --> 00:01:11,439
been doing drupal for about

00:01:09,119 --> 00:01:13,040
13 years 12 or 13 years i think

00:01:11,439 --> 00:01:15,439
according to my drupal profile

00:01:13,040 --> 00:01:16,960
at this point uh you'll see a link

00:01:15,439 --> 00:01:19,600
that's my website i do some

00:01:16,960 --> 00:01:22,159
blogging about drupal and php and

00:01:19,600 --> 00:01:24,720
tailwind css and various other things

00:01:22,159 --> 00:01:25,360
as well as my drupal page my twitter

00:01:24,720 --> 00:01:29,360
profile

00:01:25,360 --> 00:01:33,280
so op davis pretty much everywhere

00:01:29,360 --> 00:01:33,680
online so yeah a little bit more about

00:01:33,280 --> 00:01:36,720
me

00:01:33,680 --> 00:01:37,520
uh i write custom modules and themes for

00:01:36,720 --> 00:01:40,560
clients

00:01:37,520 --> 00:01:44,240
during my day job i'm also a contributor

00:01:40,560 --> 00:01:47,200
to drupal 8 and google 7 core

00:01:44,240 --> 00:01:50,000
and i maintain and contribute to various

00:01:47,200 --> 00:01:52,000
drupal contrib projects

00:01:50,000 --> 00:01:53,360
the most popular one at this point being

00:01:52,000 --> 00:01:56,560
the override adoptions

00:01:53,360 --> 00:01:59,439
module uh so i saw this tweet back in

00:01:56,560 --> 00:02:01,360
february 2012 uh does anybody want to

00:01:59,439 --> 00:02:02,960
become a maintainer or co-maintainer of

00:02:01,360 --> 00:02:05,040
overriding adoptions

00:02:02,960 --> 00:02:06,719
uh and i sort of left it the chance to

00:02:05,040 --> 00:02:09,520
take over that module

00:02:06,719 --> 00:02:11,360
this was a good sort of reason for me

00:02:09,520 --> 00:02:12,959
wanting to start to learn to write

00:02:11,360 --> 00:02:16,160
testing

00:02:12,959 --> 00:02:18,800
how to do testing and write tests so i

00:02:16,160 --> 00:02:21,280
said i became a maintainer in 2011

00:02:18,800 --> 00:02:22,599
uh i checked these figures yesterday uh

00:02:21,280 --> 00:02:26,000
and it's currently the

00:02:22,599 --> 00:02:28,000
223rd most used module has gone down

00:02:26,000 --> 00:02:30,160
one place since i did this talk last for

00:02:28,000 --> 00:02:32,000
uh the last conference

00:02:30,160 --> 00:02:34,319
uh although the number of sites has gone

00:02:32,000 --> 00:02:37,440
up we're up to just over 31.5

00:02:34,319 --> 00:02:38,879
000 websites using the module at this

00:02:37,440 --> 00:02:40,879
point

00:02:38,879 --> 00:02:42,879
uh there were some existing tests uh

00:02:40,879 --> 00:02:43,440
there was a drupal 6 and drupal 7

00:02:42,879 --> 00:02:46,480
version

00:02:43,440 --> 00:02:49,920
um i took it over and now there's

00:02:46,480 --> 00:02:51,440
8 and triple 9 as well but having these

00:02:49,920 --> 00:02:52,160
tests i've been taking these tests over

00:02:51,440 --> 00:02:53,680
time

00:02:52,160 --> 00:02:55,280
has been crucial to preventing

00:02:53,680 --> 00:02:57,599
regressions uh

00:02:55,280 --> 00:02:59,120
in the code and also just refactoring

00:02:57,599 --> 00:03:00,400
the code as we've got along there's been

00:02:59,120 --> 00:03:03,040
some quite large

00:03:00,400 --> 00:03:04,000
patches one springs to mind that

00:03:03,040 --> 00:03:06,800
probably wouldn't

00:03:04,000 --> 00:03:07,360
have got committed uh if it wasn't for

00:03:06,800 --> 00:03:09,760
these

00:03:07,360 --> 00:03:09,760
tests

00:03:10,480 --> 00:03:14,000
so this is a the module page when i took

00:03:13,120 --> 00:03:15,680
it over

00:03:14,000 --> 00:03:17,200
as i said there's versions for triple

00:03:15,680 --> 00:03:20,400
five six and seven

00:03:17,200 --> 00:03:21,280
right there and at that time you can see

00:03:20,400 --> 00:03:22,959
there's nine

00:03:21,280 --> 00:03:24,480
thousand nine thousand four hundred and

00:03:22,959 --> 00:03:28,239
one sites using the module

00:03:24,480 --> 00:03:29,440
uh at that point and yeah mostly drupal

00:03:28,239 --> 00:03:32,480
six and super seven

00:03:29,440 --> 00:03:35,280
as you'd expect

00:03:32,480 --> 00:03:36,239
and yeah just totally just over 9 200

00:03:35,280 --> 00:03:39,440
sites across

00:03:36,239 --> 00:03:41,120
those versions and it's slightly out of

00:03:39,440 --> 00:03:42,799
date now but yeah 29

00:03:41,120 --> 00:03:44,799
000 sites using it when i took this

00:03:42,799 --> 00:03:46,799
screenshot last

00:03:44,799 --> 00:03:48,000
and that's over there's still some five

00:03:46,799 --> 00:03:49,200
sites and some triple six sites

00:03:48,000 --> 00:03:51,360
surprisingly

00:03:49,200 --> 00:03:52,720
uh the vast majority is duplo seven and

00:03:51,360 --> 00:03:54,879
then just over

00:03:52,720 --> 00:03:56,239
almost nine half thousand eight in

00:03:54,879 --> 00:03:58,480
stores of this module

00:03:56,239 --> 00:04:00,400
uh so yeah just under 29th just under

00:03:58,480 --> 00:04:02,879
thirty thousand

00:04:00,400 --> 00:04:05,040
install uh active sites one i took it

00:04:02,879 --> 00:04:05,040
over

00:04:05,439 --> 00:04:08,959
so yes why write tests uh catching bugs

00:04:07,760 --> 00:04:11,760
earlier um

00:04:08,959 --> 00:04:12,159
yeah i don't wanna be shipping uh bugs

00:04:11,760 --> 00:04:13,920
to

00:04:12,159 --> 00:04:15,519
thirty thousand websites whenever i do a

00:04:13,920 --> 00:04:17,280
release of this module or to client

00:04:15,519 --> 00:04:19,199
websites for that example

00:04:17,280 --> 00:04:20,400
uh and doing having these tests and

00:04:19,199 --> 00:04:23,040
having them run and

00:04:20,400 --> 00:04:25,040
passing and failing when i want them to

00:04:23,040 --> 00:04:26,800
uh gives me peace of mind that makes me

00:04:25,040 --> 00:04:28,400
know that what i'm doing is right and

00:04:26,800 --> 00:04:29,919
i'm you know everything is working

00:04:28,400 --> 00:04:32,960
before i do a deploy

00:04:29,919 --> 00:04:35,680
as long as everything's green

00:04:32,960 --> 00:04:37,120
uh preventing regressions so if there's

00:04:35,680 --> 00:04:38,240
a bug that's been fixed or a feature

00:04:37,120 --> 00:04:39,840
that's been added

00:04:38,240 --> 00:04:42,400
if there's a test that goes along with

00:04:39,840 --> 00:04:43,919
it i'm confident that

00:04:42,400 --> 00:04:46,320
as long as i make no further if i make

00:04:43,919 --> 00:04:48,320
any further changes i've not broken

00:04:46,320 --> 00:04:49,520
the functionality that i'd already added

00:04:48,320 --> 00:04:50,320
previously or the bug that i'd fixed

00:04:49,520 --> 00:04:51,919
previously

00:04:50,320 --> 00:04:56,000
because it's a test there that tells me

00:04:51,919 --> 00:04:58,479
that it's still working as expected

00:04:56,000 --> 00:05:00,080
writing less code i found if you take a

00:04:58,479 --> 00:05:01,440
the test driven development approach you

00:05:00,080 --> 00:05:03,280
end up writing less code

00:05:01,440 --> 00:05:05,600
because you're only writing code you

00:05:03,280 --> 00:05:08,000
need to write to make your test pass

00:05:05,600 --> 00:05:09,600
so it's much cleaner a lot more focused

00:05:08,000 --> 00:05:10,639
and what you don't have to do is write a

00:05:09,600 --> 00:05:12,720
couple of lines

00:05:10,639 --> 00:05:14,160
maybe i need this maybe i don't before

00:05:12,720 --> 00:05:15,919
you don't take it out again because it's

00:05:14,160 --> 00:05:18,800
working at that point

00:05:15,919 --> 00:05:21,039
uh yeah the test driven approach works

00:05:18,800 --> 00:05:23,360
wonders for me

00:05:21,039 --> 00:05:26,080
and then documentation the tests act as

00:05:23,360 --> 00:05:27,919
their own set of documentation

00:05:26,080 --> 00:05:29,280
particularly within drupal 8 if i need

00:05:27,919 --> 00:05:30,960
to figure out how to do something

00:05:29,280 --> 00:05:32,639
quite often i'll look at the tests for

00:05:30,960 --> 00:05:35,120
that module and figure out what it's

00:05:32,639 --> 00:05:35,120
doing there

00:05:36,080 --> 00:05:39,840
it's a drupal call requirement so the

00:05:38,240 --> 00:05:42,320
the testing gates or drupal call

00:05:39,840 --> 00:05:43,280
uh require you to write tests either for

00:05:42,320 --> 00:05:46,400
new functionality

00:05:43,280 --> 00:05:48,800
or to prove that you've fixed a bug

00:05:46,400 --> 00:05:50,160
so usually you'll have to make one patch

00:05:48,800 --> 00:05:52,000
with a

00:05:50,160 --> 00:05:53,759
test that fails and then another patch

00:05:52,000 --> 00:05:56,080
with the test that

00:05:53,759 --> 00:05:58,479
fails and the fix so that the test is

00:05:56,080 --> 00:06:00,639
now passing

00:05:58,479 --> 00:06:02,800
and this is even more important with

00:06:00,639 --> 00:06:04,479
regular drupal a's and drupal 9 releases

00:06:02,800 --> 00:06:05,919
so every six months now we've got new

00:06:04,479 --> 00:06:07,280
versions of drupal 8 and equations of

00:06:05,919 --> 00:06:09,600
drupal 9

00:06:07,280 --> 00:06:11,360
and as a module maintainer i'm having to

00:06:09,600 --> 00:06:14,800
support multiple versions

00:06:11,360 --> 00:06:17,840
across with the same module so

00:06:14,800 --> 00:06:19,759
the node options 8.2 supports

00:06:17,840 --> 00:06:21,440
various versions tuple 8 and triple nine

00:06:19,759 --> 00:06:23,199
at the same time

00:06:21,440 --> 00:06:25,360
which is pretty cool but yeah it is some

00:06:23,199 --> 00:06:27,039
overhead

00:06:25,360 --> 00:06:28,560
so as i mentioned there is a cool

00:06:27,039 --> 00:06:30,720
testing gate for

00:06:28,560 --> 00:06:32,400
uh for cool so as i said we just need to

00:06:30,720 --> 00:06:33,600
make sure that

00:06:32,400 --> 00:06:36,000
there are new tests when you're adding

00:06:33,600 --> 00:06:37,759
new features uh if you're adding

00:06:36,000 --> 00:06:39,199
uh fixing a bug we need to make sure

00:06:37,759 --> 00:06:41,759
that there's a test to show that the bug

00:06:39,199 --> 00:06:43,600
has been fixed

00:06:41,759 --> 00:06:46,080
make sure that existing tests still pass

00:06:43,600 --> 00:06:49,280
if you're going and making any changes

00:06:46,080 --> 00:06:50,880
uh and yet again if you're just making

00:06:49,280 --> 00:06:53,599
markup changes you have your browser

00:06:50,880 --> 00:06:55,520
tests and screenshots

00:06:53,599 --> 00:06:56,880
uh all writing example module if there's

00:06:55,520 --> 00:07:01,120
a new feature that's not in

00:06:56,880 --> 00:07:03,039
core yet so testing in drupal

00:07:01,120 --> 00:07:05,840
uh in drupal 7 we had the simple test

00:07:03,039 --> 00:07:07,120
module that was provided as part of call

00:07:05,840 --> 00:07:10,160
i believe it was there as a contrib

00:07:07,120 --> 00:07:10,160
module before that as well

00:07:11,120 --> 00:07:14,400
and then over the phase the course of

00:07:12,720 --> 00:07:18,080
the drupal 8 life cycle

00:07:14,400 --> 00:07:21,199
php unit was added as a core dependency

00:07:18,080 --> 00:07:23,840
and then later became the default so php

00:07:21,199 --> 00:07:25,360
unit became the primary testing for

00:07:23,840 --> 00:07:27,840
drupal 8 and simple test was

00:07:25,360 --> 00:07:29,759
phased out and there was a php

00:07:27,840 --> 00:07:30,000
initiative that was converting tests

00:07:29,759 --> 00:07:32,479
from

00:07:30,000 --> 00:07:34,560
simple test test cases to the php test

00:07:32,479 --> 00:07:36,000
cases

00:07:34,560 --> 00:07:37,919
and then the plan was for drupal 9 to

00:07:36,000 --> 00:07:39,440
remove simple tests

00:07:37,919 --> 00:07:42,840
i believe it was moved to contrib and

00:07:39,440 --> 00:07:45,840
then all the tests now run through ptp

00:07:42,840 --> 00:07:47,360
directly

00:07:45,840 --> 00:07:49,919
so how do you write tests into your

00:07:47,360 --> 00:07:52,560
plate uh the tests are

00:07:49,919 --> 00:07:54,080
their own php class with a dot php

00:07:52,560 --> 00:07:55,520
extension

00:07:54,080 --> 00:07:57,520
uh this is quite different to writing

00:07:55,520 --> 00:07:59,680
tests in drupal 7 where they would have

00:07:57,520 --> 00:08:04,000
a dot test extension

00:07:59,680 --> 00:08:06,479
yeah in duplex they are using php

00:08:04,000 --> 00:08:08,479
there's a test directory uh with its own

00:08:06,479 --> 00:08:10,479
source subject src directory

00:08:08,479 --> 00:08:13,840
and this will live inside the module

00:08:10,479 --> 00:08:15,440
that you're writing tests for

00:08:13,840 --> 00:08:17,759
the name space is slightly different so

00:08:15,440 --> 00:08:19,440
the drupal name space that we

00:08:17,759 --> 00:08:20,879
you would use followed by the module

00:08:19,440 --> 00:08:25,360
name for test

00:08:20,879 --> 00:08:25,360
it's drupal test so that's module name

00:08:25,440 --> 00:08:28,960
uh the class name used to match the file

00:08:27,039 --> 00:08:31,599
name uh the name space

00:08:28,960 --> 00:08:32,000
must match the directory structure and

00:08:31,599 --> 00:08:35,440
one

00:08:32,000 --> 00:08:37,039
test case per file so

00:08:35,440 --> 00:08:38,479
uh again in triple seven it was pretty

00:08:37,039 --> 00:08:41,599
common of multiple

00:08:38,479 --> 00:08:44,399
classes inside one.test file

00:08:41,599 --> 00:08:47,680
but because of psr4 autoloading things

00:08:44,399 --> 00:08:50,480
will be one test class profile

00:08:47,680 --> 00:08:54,480
so this is all pretty common psr for

00:08:50,480 --> 00:08:56,480
auto running

00:08:54,480 --> 00:08:57,760
some tips about tests themselves uh

00:08:56,480 --> 00:09:00,240
there's three steps

00:08:57,760 --> 00:09:01,440
usually three sometimes two and

00:09:00,240 --> 00:09:02,480
conveniently they'll start with that

00:09:01,440 --> 00:09:04,399
array

00:09:02,480 --> 00:09:05,839
and so the first is to arrange then

00:09:04,399 --> 00:09:09,040
we've got to act then we're gonna

00:09:05,839 --> 00:09:10,320
write assertions so

00:09:09,040 --> 00:09:12,320
if anyone's familiar with writing user

00:09:10,320 --> 00:09:14,959
stories these will typically be

00:09:12,320 --> 00:09:15,600
given when then given that there's a

00:09:14,959 --> 00:09:17,519
user

00:09:15,600 --> 00:09:19,839
when i go to a certain page then i

00:09:17,519 --> 00:09:23,120
should get a particular response code or

00:09:19,839 --> 00:09:25,920
given this node when i run the thing

00:09:23,120 --> 00:09:28,959
then something else should happen my

00:09:25,920 --> 00:09:30,560
node gets deleted or something

00:09:28,959 --> 00:09:32,720
see in this example yep given the about

00:09:30,560 --> 00:09:35,360
page exists when i go to the page i

00:09:32,720 --> 00:09:37,360
should see the about me

00:09:35,360 --> 00:09:38,720
text this is quite useful if you're

00:09:37,360 --> 00:09:41,200
writing um

00:09:38,720 --> 00:09:42,399
user stories with this given when then

00:09:41,200 --> 00:09:44,720
format

00:09:42,399 --> 00:09:45,680
uh and quite often i'll copy and paste

00:09:44,720 --> 00:09:47,680
these into my

00:09:45,680 --> 00:09:51,839
tests and just add them in as comments

00:09:47,680 --> 00:09:51,839
and then write the code around them

00:09:52,640 --> 00:09:56,800
so yeah uh given these are php classes

00:09:55,600 --> 00:09:58,880
we need a namespace

00:09:56,800 --> 00:10:00,800
so in this case here we can see this is

00:09:58,880 --> 00:10:03,120
a an example module so it's in

00:10:00,800 --> 00:10:04,079
inside the modules directory it's called

00:10:03,120 --> 00:10:06,720
example

00:10:04,079 --> 00:10:08,000
module is called example then we have

00:10:06,720 --> 00:10:09,200
our test directory and our source

00:10:08,000 --> 00:10:10,959
directory

00:10:09,200 --> 00:10:12,800
there's a functional test so it's inside

00:10:10,959 --> 00:10:14,440
a functional directory

00:10:12,800 --> 00:10:16,800
and then the name of our file which is

00:10:14,440 --> 00:10:19,680
exampletest.php

00:10:16,800 --> 00:10:20,079
so we'll see that namespace matches the

00:10:19,680 --> 00:10:22,320
uh

00:10:20,079 --> 00:10:23,519
directory structure above so it's inside

00:10:22,320 --> 00:10:26,320
a functional directory

00:10:23,519 --> 00:10:27,920
uh i do that just to make things a a bit

00:10:26,320 --> 00:10:29,360
clearer when i'm looking at the code

00:10:27,920 --> 00:10:32,079
look at the module to see what's going

00:10:29,360 --> 00:10:34,240
on um but also we can then just say run

00:10:32,079 --> 00:10:36,000
all the functional tests in one go or

00:10:34,240 --> 00:10:38,399
the unit tests or integration tests in

00:10:36,000 --> 00:10:38,399


00:10:38,640 --> 00:10:41,760
and then we have a class so our class is

00:10:40,320 --> 00:10:44,640
just called example test

00:10:41,760 --> 00:10:46,399
uh file this example test.php and then

00:10:44,640 --> 00:10:50,160
we're gonna extend

00:10:46,399 --> 00:10:52,800
a browser test browser test base class

00:10:50,160 --> 00:10:53,839
so the type of test just depends on what

00:10:52,800 --> 00:10:55,519
we're extending

00:10:53,839 --> 00:10:57,440
so this one is a functional test of

00:10:55,519 --> 00:11:00,880
browser test so we're going to extend

00:10:57,440 --> 00:11:02,880
the browser test base

00:11:00,880 --> 00:11:04,640
and then we have an actual test case

00:11:02,880 --> 00:11:05,200
which is just a method of public

00:11:04,640 --> 00:11:09,279
function

00:11:05,200 --> 00:11:12,399
inside this class and they have to be

00:11:09,279 --> 00:11:14,480
starting with the word test so the case

00:11:12,399 --> 00:11:16,640
is just test something and inside there

00:11:14,480 --> 00:11:19,440
we're going to add our given when then

00:11:16,640 --> 00:11:19,440
uh scenario

00:11:20,959 --> 00:11:24,399
and there's a few different ways that we

00:11:22,160 --> 00:11:26,320
could write our test functions

00:11:24,399 --> 00:11:28,560
uh the one i just showed you is right in

00:11:26,320 --> 00:11:30,880
the word test as the prefix

00:11:28,560 --> 00:11:32,079
and then using camera case so capital s

00:11:30,880 --> 00:11:33,760
for something

00:11:32,079 --> 00:11:35,120
uh we could also use an underscore and

00:11:33,760 --> 00:11:37,920
then use snake case

00:11:35,120 --> 00:11:38,480
as a test underscore something uh or we

00:11:37,920 --> 00:11:40,399
can

00:11:38,480 --> 00:11:42,399
drop the text prefix completely if we're

00:11:40,399 --> 00:11:44,480
using this annotation with uh the app

00:11:42,399 --> 00:11:46,000
test annotation

00:11:44,480 --> 00:11:47,600
and page paid it will pick up any of

00:11:46,000 --> 00:11:49,760
these three

00:11:47,600 --> 00:11:50,959
uh i quite like the third one personally

00:11:49,760 --> 00:11:54,320
and that's pretty common

00:11:50,959 --> 00:11:56,560
in laravel and some php uh projects

00:11:54,320 --> 00:11:58,000
it sort of depends on how your coding

00:11:56,560 --> 00:12:00,639
standards are set up

00:11:58,000 --> 00:12:02,560
uh typically drupal ci will you know

00:12:00,639 --> 00:12:04,079
we'll throw coding start violations

00:12:02,560 --> 00:12:05,839
for anything other than the first one

00:12:04,079 --> 00:12:08,959
because it expects everything to be uh

00:12:05,839 --> 00:12:08,959
camel case function names

00:12:09,519 --> 00:12:12,800
so here are some examples for something

00:12:11,040 --> 00:12:16,320
that i read some things i tested on a

00:12:12,800 --> 00:12:16,320
project a couple of years ago now

00:12:16,639 --> 00:12:20,800
uh so creating nodes from data with data

00:12:18,959 --> 00:12:22,839
from an api

00:12:20,800 --> 00:12:24,320
uh calculating attendance figures for an

00:12:22,839 --> 00:12:26,880
event uh to

00:12:24,320 --> 00:12:28,720
turn if an event is purchasable uh in

00:12:26,880 --> 00:12:30,399
this case the event could only book onto

00:12:28,720 --> 00:12:33,519
an event from a

00:12:30,399 --> 00:12:36,000
certain window beforehand

00:12:33,519 --> 00:12:37,040
uh promotions and coupons for new users

00:12:36,000 --> 00:12:39,440
cloning events

00:12:37,040 --> 00:12:41,360
this is an event management based drupal

00:12:39,440 --> 00:12:44,720
conversation if anybody uh

00:12:41,360 --> 00:12:46,639
hadn't noticed the uh similarity here um

00:12:44,720 --> 00:12:48,160
queueing private message requests we'll

00:12:46,639 --> 00:12:49,120
build a message all the attendees on an

00:12:48,160 --> 00:12:50,880
event

00:12:49,120 --> 00:12:52,320
did that with private message module so

00:12:50,880 --> 00:12:53,680
we started queuing those

00:12:52,320 --> 00:12:57,760
some of these events had lots of people

00:12:53,680 --> 00:12:59,600
on them emailing new members

00:12:57,760 --> 00:13:01,839
uh they had support ticket functionality

00:12:59,600 --> 00:13:03,120
so when supporting it was closed and

00:13:01,839 --> 00:13:04,880
then reopened

00:13:03,120 --> 00:13:07,600
uh when they added comment to it we

00:13:04,880 --> 00:13:08,720
wanted to reopen the ticket

00:13:07,600 --> 00:13:10,800
and then there's some custom form

00:13:08,720 --> 00:13:12,320
validation rules that we added as well

00:13:10,800 --> 00:13:14,320
so these are just some examples of some

00:13:12,320 --> 00:13:14,959
things i get tested on this event

00:13:14,320 --> 00:13:17,680
management

00:13:14,959 --> 00:13:17,680
project that i did

00:13:18,959 --> 00:13:22,000
and yeah this is a tweet that i saw from

00:13:20,399 --> 00:13:23,519
another live a few years ago

00:13:22,000 --> 00:13:25,519
um the number one test that you should

00:13:23,519 --> 00:13:27,120
write should be the one that you would

00:13:25,519 --> 00:13:29,440
use your job for if it broke

00:13:27,120 --> 00:13:30,240
um yes anything that gives you that

00:13:29,440 --> 00:13:33,040
peace of mind

00:13:30,240 --> 00:13:34,959
again you don't be woken up at midnight

00:13:33,040 --> 00:13:36,399
and friday or five o'clock on a friday

00:13:34,959 --> 00:13:39,040
you know just to oh that thing needs

00:13:36,399 --> 00:13:39,040
fixing right now

00:13:40,079 --> 00:13:43,440
so a few different types of tests uh

00:13:42,240 --> 00:13:44,240
functional tests we've already talked a

00:13:43,440 --> 00:13:46,720
little bit about

00:13:44,240 --> 00:13:47,360
and there are also functional javascript

00:13:46,720 --> 00:13:49,120
tests

00:13:47,360 --> 00:13:51,600
so these are typically called web or

00:13:49,120 --> 00:13:53,760
browser or feature tests

00:13:51,600 --> 00:13:55,760
um codon sets again these are typically

00:13:53,760 --> 00:13:58,240
also called integration tests

00:13:55,760 --> 00:13:59,920
and then unity tests so these are

00:13:58,240 --> 00:14:01,120
commonly what people think or associated

00:13:59,920 --> 00:14:03,680
with php unit

00:14:01,120 --> 00:14:06,320
is unit testing but yeah we're using all

00:14:03,680 --> 00:14:10,079
three of these or four of those

00:14:06,320 --> 00:14:12,480
uh within php and drupal 8 and 9.

00:14:10,079 --> 00:14:14,639
so functional tests um test end-to-end

00:14:12,480 --> 00:14:16,800
functionality so they're actually

00:14:14,639 --> 00:14:19,279
boosting up a browser behind the scenes

00:14:16,800 --> 00:14:22,560
making http requests against

00:14:19,279 --> 00:14:25,519
the url that you're serving locally

00:14:22,560 --> 00:14:26,800
and be able to check the response codes

00:14:25,519 --> 00:14:27,760
and the texts returned back and

00:14:26,800 --> 00:14:30,800
everything else

00:14:27,760 --> 00:14:32,639
so actually doing a full uh browser

00:14:30,800 --> 00:14:34,240
testing here

00:14:32,639 --> 00:14:36,240
uh it interacts with the database so

00:14:34,240 --> 00:14:38,000
yeah we've got a fully bootstrapped

00:14:36,240 --> 00:14:39,839
drupal website so we have access to a

00:14:38,000 --> 00:14:40,639
database so we can use real nodes and

00:14:39,839 --> 00:14:43,760
real users

00:14:40,639 --> 00:14:45,360
and real everything as i said full

00:14:43,760 --> 00:14:48,160
drupal installation

00:14:45,360 --> 00:14:48,880
uh it is using a testing profile there's

00:14:48,160 --> 00:14:50,720
a testing

00:14:48,880 --> 00:14:51,920
if you look inside the core profiles

00:14:50,720 --> 00:14:53,279
directory there's a

00:14:51,920 --> 00:14:55,600
testing profile i think there's a few of

00:14:53,279 --> 00:14:55,600
them now

00:14:55,760 --> 00:15:00,480
so it's not to get a full standard

00:14:58,160 --> 00:15:03,519
duplication it is using a particular

00:15:00,480 --> 00:15:03,839
particular profile because of this these

00:15:03,519 --> 00:15:05,839
are

00:15:03,839 --> 00:15:08,079
slower to run it's time to make actual

00:15:05,839 --> 00:15:10,959
requests and get the responses back

00:15:08,079 --> 00:15:10,959
from your web server

00:15:11,279 --> 00:15:15,040
and as i said there are versions for

00:15:13,680 --> 00:15:16,480
with and without javascript just

00:15:15,040 --> 00:15:18,880
depending on which base class that you

00:15:16,480 --> 00:15:18,880
extend

00:15:19,279 --> 00:15:22,959
so here's an example of a functional

00:15:21,120 --> 00:15:24,800
test this comes from the block module

00:15:22,959 --> 00:15:26,320
so you can see we've got a block test to

00:15:24,800 --> 00:15:28,560
extending a base

00:15:26,320 --> 00:15:31,920
block test based class and we're going

00:15:28,560 --> 00:15:31,920
to test the visibility of the block

00:15:32,240 --> 00:15:37,519
so we're making a new block here with a

00:15:34,240 --> 00:15:40,000
block name which is powered by

00:15:37,519 --> 00:15:41,279
using a helper here to set a random

00:15:40,000 --> 00:15:42,880
machine name

00:15:41,279 --> 00:15:44,880
uh we're getting some configuration

00:15:42,880 --> 00:15:47,839
values out here or the default theme

00:15:44,880 --> 00:15:49,839
from the configuration values

00:15:47,839 --> 00:15:51,680
and yeah just this is our arrange step

00:15:49,839 --> 00:15:55,440
it's creating our block and configuring

00:15:51,680 --> 00:15:57,440
how we want our block to work here

00:15:55,440 --> 00:15:58,720
and then you can see uh here we've got

00:15:57,440 --> 00:16:00,639
drupal get so this is

00:15:58,720 --> 00:16:02,000
the drupal help of making get requests

00:16:00,639 --> 00:16:04,240
so go to this page

00:16:02,000 --> 00:16:05,440
go to admin structure block add block

00:16:04,240 --> 00:16:08,399
name

00:16:05,440 --> 00:16:09,839
and store the result there and then

00:16:08,399 --> 00:16:10,240
we've got some insertions so we're going

00:16:09,839 --> 00:16:11,759
to

00:16:10,240 --> 00:16:14,000
check that the field exists we can

00:16:11,759 --> 00:16:16,399
assert that the field exists

00:16:14,000 --> 00:16:17,360
we're going to do a post request to the

00:16:16,399 --> 00:16:18,480
page

00:16:17,360 --> 00:16:20,000
uh we're going to click on the button

00:16:18,480 --> 00:16:21,519
that says save block and then we're

00:16:20,000 --> 00:16:23,440
going to check that the text the block

00:16:21,519 --> 00:16:27,519
configuration was saved

00:16:23,440 --> 00:16:29,759
on that page so very high level ui

00:16:27,519 --> 00:16:30,560
go to this page click this button does

00:16:29,759 --> 00:16:33,279
this text

00:16:30,560 --> 00:16:33,279
text exist

00:16:34,240 --> 00:16:38,240
kernel test to the next level down um so

00:16:37,040 --> 00:16:40,480
you can still create

00:16:38,240 --> 00:16:42,399
uh still install modules we can still

00:16:40,480 --> 00:16:44,000
interact with services and

00:16:42,399 --> 00:16:45,600
uh our service container and the

00:16:44,000 --> 00:16:47,360
database uh

00:16:45,600 --> 00:16:48,880
it's an even lower level drupal

00:16:47,360 --> 00:16:52,160
bootstrap so there's no

00:16:48,880 --> 00:16:53,360
browser there's no http requests um

00:16:52,160 --> 00:16:56,800
which is great because it makes it

00:16:53,360 --> 00:16:59,199
faster than the functional ones

00:16:56,800 --> 00:17:01,759
but we do need to do some more setup

00:16:59,199 --> 00:17:03,360
steps to make it work

00:17:01,759 --> 00:17:05,839
so here's another example from the block

00:17:03,360 --> 00:17:06,319
module uh we're extending a kernel test

00:17:05,839 --> 00:17:09,520
based

00:17:06,319 --> 00:17:10,959
class this time uh you can see now that

00:17:09,520 --> 00:17:12,559
we've got some extra lines in here so

00:17:10,959 --> 00:17:14,160
we've got this container get

00:17:12,559 --> 00:17:16,319
theme installer then we're going to

00:17:14,160 --> 00:17:18,559
install the themes and we're going to

00:17:16,319 --> 00:17:19,839
set some configuration values

00:17:18,559 --> 00:17:21,839
we didn't need to do this in the

00:17:19,839 --> 00:17:23,520
functional test it sort of does this for

00:17:21,839 --> 00:17:26,959
you installs the configuration for the

00:17:23,520 --> 00:17:26,959
modules by default for example

00:17:28,640 --> 00:17:31,760
and then the test method here we're

00:17:29,840 --> 00:17:32,000
going to rebuild blocks we're going to

00:17:31,760 --> 00:17:34,000
call

00:17:32,000 --> 00:17:35,360
the block rebuild we're able to get the

00:17:34,000 --> 00:17:37,039
messenger service

00:17:35,360 --> 00:17:39,120
from the container and get all the

00:17:37,039 --> 00:17:41,360
messages from it then delete them

00:17:39,120 --> 00:17:43,120
and then just make sure that there's no

00:17:41,360 --> 00:17:46,080
messages returned

00:17:43,120 --> 00:17:47,360
so no browser testing no go to this page

00:17:46,080 --> 00:17:50,640
check the response code

00:17:47,360 --> 00:17:53,679
we're one level below that we're testing

00:17:50,640 --> 00:17:55,120
drupal code at this point uh but yeah we

00:17:53,679 --> 00:17:57,919
still have access to these services like

00:17:55,120 --> 00:17:57,919
the messenger again

00:17:58,080 --> 00:18:02,880
unit tests don't have the drupal

00:18:01,120 --> 00:18:04,960
knowledge layer so this is just testing

00:18:02,880 --> 00:18:06,799
php logic on its own

00:18:04,960 --> 00:18:08,880
uh so there's no database interaction at

00:18:06,799 --> 00:18:11,200
all we can't say

00:18:08,880 --> 00:18:12,799
get that service or say this node to the

00:18:11,200 --> 00:18:15,440
database

00:18:12,799 --> 00:18:16,240
but these are super fast to run uh these

00:18:15,440 --> 00:18:19,039
will run in

00:18:16,240 --> 00:18:20,799
milliseconds rather than seconds or

00:18:19,039 --> 00:18:22,160
sometimes minutes

00:18:20,799 --> 00:18:25,039
uh but because of this we do need to

00:18:22,160 --> 00:18:27,280
mock dependencies

00:18:25,039 --> 00:18:29,280
and because of mocking uh we can get

00:18:27,280 --> 00:18:31,440
very tightly coupled to our code

00:18:29,280 --> 00:18:33,039
so marking because we can't use a real

00:18:31,440 --> 00:18:33,760
node we could make a fake node

00:18:33,039 --> 00:18:35,760
essentially

00:18:33,760 --> 00:18:37,280
and say that this method should return

00:18:35,760 --> 00:18:38,160
this value and this method to return

00:18:37,280 --> 00:18:40,320
that value

00:18:38,160 --> 00:18:42,320
and this method can be called three

00:18:40,320 --> 00:18:43,840
times in this bit of code

00:18:42,320 --> 00:18:45,840
that's what i mean by tightly coupled is

00:18:43,840 --> 00:18:48,720
if we then refactor that code

00:18:45,840 --> 00:18:50,080
you know can be hard to refactor then

00:18:48,720 --> 00:18:51,200
maybe we're not calling that method

00:18:50,080 --> 00:18:52,960
three times anymore

00:18:51,200 --> 00:18:54,720
and even though the functionality still

00:18:52,960 --> 00:18:55,679
works the testing are failing because

00:18:54,720 --> 00:18:58,480
the

00:18:55,679 --> 00:18:59,120
very tightly coupled count of number of

00:18:58,480 --> 00:19:02,160
methods

00:18:59,120 --> 00:19:02,160
is no longer matching

00:19:03,360 --> 00:19:07,200
so yeah one final block module example

00:19:06,240 --> 00:19:10,240
here so this is

00:19:07,200 --> 00:19:11,120
using a unit test case this time and

00:19:10,240 --> 00:19:12,480
yeah you can see

00:19:11,120 --> 00:19:14,720
about a third of the way down there we

00:19:12,480 --> 00:19:16,400
can see this get mock

00:19:14,720 --> 00:19:18,240
for a block interface so we've not got a

00:19:16,400 --> 00:19:21,280
real block we've got a marked block

00:19:18,240 --> 00:19:23,200
fake block at this point

00:19:21,280 --> 00:19:25,360
you can see it we're expecting the

00:19:23,200 --> 00:19:28,480
method access to be called once

00:19:25,360 --> 00:19:30,160
and that will return a specific value so

00:19:28,480 --> 00:19:30,720
we're telling it explicitly here what to

00:19:30,160 --> 00:19:34,240
return

00:19:30,720 --> 00:19:34,240
and we can write assistance against it

00:19:34,799 --> 00:19:39,600
so yeah there's three set there this

00:19:36,720 --> 00:19:43,039
method expects to be called

00:19:39,600 --> 00:19:43,039
and return something specific

00:19:43,200 --> 00:19:46,400
and see then yep then right the bottom

00:19:45,360 --> 00:19:47,840
here we've got

00:19:46,400 --> 00:19:50,640
an assertion to make sure that the

00:19:47,840 --> 00:19:52,400
expected block equals the results

00:19:50,640 --> 00:19:54,000
so we can see just thinking back to the

00:19:52,400 --> 00:19:55,760
functional test example

00:19:54,000 --> 00:19:57,760
like how much more setup is needed and

00:19:55,760 --> 00:19:59,440
how much more tightly coupled

00:19:57,760 --> 00:20:02,080
to the code is this one is compared to

00:19:59,440 --> 00:20:02,080
the original one

00:20:03,679 --> 00:20:07,360
so let's talk about an example um this

00:20:05,600 --> 00:20:10,080
is another site that i

00:20:07,360 --> 00:20:11,440
well another project i worked on um

00:20:10,080 --> 00:20:12,720
again a few years ago

00:20:11,440 --> 00:20:14,960
we had to do an integration with a

00:20:12,720 --> 00:20:17,360
project with a

00:20:14,960 --> 00:20:18,720
service sorry called uh broadband so

00:20:17,360 --> 00:20:20,880
it's a recruitment

00:20:18,720 --> 00:20:23,440
based service that we can use to pull

00:20:20,880 --> 00:20:23,440
job notes

00:20:23,520 --> 00:20:28,320
so we're working on drupal project and

00:20:26,320 --> 00:20:30,720
the client was creating jobs or

00:20:28,320 --> 00:20:31,440
somebody was creating jobs in broadband

00:20:30,720 --> 00:20:33,120
and we wanted to

00:20:31,440 --> 00:20:35,360
display those on the website so we

00:20:33,120 --> 00:20:37,120
wanted to create nodes in drupal based

00:20:35,360 --> 00:20:41,520
on the data coming from the broadbring

00:20:37,120 --> 00:20:42,960
api there's an application url

00:20:41,520 --> 00:20:44,799
that the user would click i want to

00:20:42,960 --> 00:20:45,760
apply for this job and it would link

00:20:44,799 --> 00:20:47,760
them off to another

00:20:45,760 --> 00:20:49,520
application again so we weren't handling

00:20:47,760 --> 00:20:52,720
the job applications on the website

00:20:49,520 --> 00:20:52,720
those are handled elsewhere

00:20:53,200 --> 00:20:56,400
jobs had to be linked to offices so

00:20:54,960 --> 00:20:58,400
someone could go to the

00:20:56,400 --> 00:20:59,679
uh office for cardiff or bristol or

00:20:58,400 --> 00:21:01,280
london

00:20:59,679 --> 00:21:04,159
and they wanted to see the jobs are

00:21:01,280 --> 00:21:04,159
assigned to that office

00:21:04,240 --> 00:21:09,600
job lens specified it by number of days

00:21:07,760 --> 00:21:11,840
and they want to be able to specify in

00:21:09,600 --> 00:21:15,200
advance what the path would be so

00:21:11,840 --> 00:21:16,000
go to slash my cool job and they wanted

00:21:15,200 --> 00:21:18,080
to be able to do

00:21:16,000 --> 00:21:19,200
that on the broadband side they wanted

00:21:18,080 --> 00:21:21,280
to map that path

00:21:19,200 --> 00:21:23,760
from a field in the api to something in

00:21:21,280 --> 00:21:23,760
drupal

00:21:24,159 --> 00:21:27,919
and the application url was interesting

00:21:26,240 --> 00:21:30,159
we had to construct it ourselves from

00:21:27,919 --> 00:21:32,960
the domain name that we're using they

00:21:30,159 --> 00:21:35,120
pass to a role id the job role

00:21:32,960 --> 00:21:36,400
as a get parameter and there are various

00:21:35,120 --> 00:21:38,080
optional

00:21:36,400 --> 00:21:40,080
utm parameters for tracking they pass

00:21:38,080 --> 00:21:42,840
through as well so we need to take all

00:21:40,080 --> 00:21:45,919
these things and combine them into one

00:21:42,840 --> 00:21:47,919
url so

00:21:45,919 --> 00:21:50,080
yeah this is the process so broadbean

00:21:47,919 --> 00:21:52,159
would pass xml to drupal

00:21:50,080 --> 00:21:53,280
and then drupal would build the

00:21:52,159 --> 00:21:54,880
application url

00:21:53,280 --> 00:21:58,640
and then the user would click that and

00:21:54,880 --> 00:22:01,120
go to the crm

00:21:58,640 --> 00:22:02,799
so how did we do this uh we added a root

00:22:01,120 --> 00:22:06,400
to accept data from the api

00:22:02,799 --> 00:22:08,960
uh from xml with xml

00:22:06,400 --> 00:22:09,760
we added a system user with a sticker

00:22:08,960 --> 00:22:11,840
role for

00:22:09,760 --> 00:22:13,600
api to authenticate against for

00:22:11,840 --> 00:22:17,120
broadband

00:22:13,600 --> 00:22:17,120
for broadband to authenticate against

00:22:18,080 --> 00:22:21,120
active four values the number of days

00:22:19,919 --> 00:22:22,559
that the job advocate was

00:22:21,120 --> 00:22:24,640
active for we need to convert to a

00:22:22,559 --> 00:22:25,280
timestamp so we could save it in drupal

00:22:24,640 --> 00:22:26,880
and

00:22:25,280 --> 00:22:30,320
essentially hide it and unpublish the

00:22:26,880 --> 00:22:32,400
note once it was passed

00:22:30,320 --> 00:22:34,240
branch name and locations were converted

00:22:32,400 --> 00:22:37,520
from plain text because

00:22:34,240 --> 00:22:41,120
xml to entity references so we had a

00:22:37,520 --> 00:22:45,120
reference to the branch name uh as

00:22:41,120 --> 00:22:46,799
and offices and locations as well

00:22:45,120 --> 00:22:48,799
so i think the branch teams are node and

00:22:46,799 --> 00:22:50,240
locations were taxonomies so you wanted

00:22:48,799 --> 00:22:52,240
to actually link those together

00:22:50,240 --> 00:22:53,919
so we could do the um give you all the

00:22:52,240 --> 00:22:57,360
jobs in this

00:22:53,919 --> 00:22:57,360
this location or this branch

00:22:57,440 --> 00:23:02,159
and yes the url alias that they define

00:22:59,760 --> 00:23:05,840
on the broadband side we map to the path

00:23:02,159 --> 00:23:08,159
value and drupal so we're able to map it

00:23:05,840 --> 00:23:09,120
so here's an example uh this i think

00:23:08,159 --> 00:23:10,159
actually comes straight from their

00:23:09,120 --> 00:23:13,760
documentation

00:23:10,159 --> 00:23:15,679
or maybe not um i think about it

00:23:13,760 --> 00:23:18,000
no this does come from the documentation

00:23:15,679 --> 00:23:21,200
uh so this is an array at least or

00:23:18,000 --> 00:23:22,640
from the xml so you can see here there's

00:23:21,200 --> 00:23:25,039
a command so we're going to add

00:23:22,640 --> 00:23:26,320
this job uh there's some authentication

00:23:25,039 --> 00:23:29,120
details there

00:23:26,320 --> 00:23:31,360
uh this job is active for a year so 365

00:23:29,120 --> 00:23:31,360
days

00:23:32,159 --> 00:23:35,919
as an address our branch name is the one

00:23:34,799 --> 00:23:38,159
we need to convert to our entity

00:23:35,919 --> 00:23:39,840
reference field

00:23:38,159 --> 00:23:42,640
the job title would be used as the node

00:23:39,840 --> 00:23:43,760
title uh the keywords again we'd split

00:23:42,640 --> 00:23:45,600
by comma separate

00:23:43,760 --> 00:23:47,279
separated lists and store them as

00:23:45,600 --> 00:23:51,279
multiple values

00:23:47,279 --> 00:23:52,320
text fields yes the rule id is the one

00:23:51,279 --> 00:23:53,200
that would get passed it was the

00:23:52,320 --> 00:23:56,960
parameter

00:23:53,200 --> 00:23:58,240
as well and yeah finally the url ads

00:23:56,960 --> 00:24:00,000
is the one that we'd store against the

00:23:58,240 --> 00:24:05,360
path to make it

00:24:00,000 --> 00:24:07,120
be available on that url

00:24:05,360 --> 00:24:08,480
so if there wasn't an error uh we'd

00:24:07,120 --> 00:24:10,159
create the node and

00:24:08,480 --> 00:24:11,440
we'd return a response to the broadband

00:24:10,159 --> 00:24:12,640
api just to tell that everything had

00:24:11,440 --> 00:24:14,080
been okay

00:24:12,640 --> 00:24:15,840
and if there was an exception thrown

00:24:14,080 --> 00:24:16,240
we'd return a particular error code and

00:24:15,840 --> 00:24:18,000
then

00:24:16,240 --> 00:24:19,279
return that back to them so we did have

00:24:18,000 --> 00:24:22,880
a few issues where

00:24:19,279 --> 00:24:24,080
the wrong um job branch was specified

00:24:22,880 --> 00:24:26,559
for example so

00:24:24,080 --> 00:24:27,279
we couldn't find a branch for you know

00:24:26,559 --> 00:24:29,520
that branch

00:24:27,279 --> 00:24:32,960
name didn't exist so we threw an

00:24:29,520 --> 00:24:34,640
exception through that back to them

00:24:32,960 --> 00:24:36,240
so how does that break down in terms of

00:24:34,640 --> 00:24:38,159
types of tests so

00:24:36,240 --> 00:24:39,440
functional tests uh job nodes are

00:24:38,159 --> 00:24:41,440
created with the right url

00:24:39,440 --> 00:24:43,760
so given they've said we want it to be

00:24:41,440 --> 00:24:45,440
on slash job123

00:24:43,760 --> 00:24:48,559
i can make sure you go to that url and

00:24:45,440 --> 00:24:48,559
get the right response code

00:24:49,279 --> 00:24:52,880
uh given some hosting uh issues and

00:24:51,600 --> 00:24:55,679
limitations

00:24:52,880 --> 00:24:57,039
uh the utm parameters were stripped um

00:24:55,679 --> 00:24:58,559
so we initially had just normal

00:24:57,039 --> 00:25:01,200
functional tests for this

00:24:58,559 --> 00:25:01,679
these were passing when we put it onto

00:25:01,200 --> 00:25:04,240
the

00:25:01,679 --> 00:25:05,600
staging environment we realized that uh

00:25:04,240 --> 00:25:06,799
it didn't work even our tests were

00:25:05,600 --> 00:25:08,080
passing locally

00:25:06,799 --> 00:25:10,000
uh so we ended up having to get around

00:25:08,080 --> 00:25:12,960
it with javascript and do some

00:25:10,000 --> 00:25:14,480
uh fun javascript things so this show

00:25:12,960 --> 00:25:15,039
was a bit skeptical of doing this but

00:25:14,480 --> 00:25:17,600
then

00:25:15,039 --> 00:25:18,960
uh there's a functional javascript test

00:25:17,600 --> 00:25:20,320
i was able to run the test with

00:25:18,960 --> 00:25:22,240
javascript and just

00:25:20,320 --> 00:25:25,760
tweak the test slightly and be confident

00:25:22,240 --> 00:25:25,760
it was still going to work as expected

00:25:26,320 --> 00:25:29,840
so kernel test just to check that the

00:25:27,919 --> 00:25:31,760
drop nodes have been added and deleted

00:25:29,840 --> 00:25:33,360
uh if the job is expired they should be

00:25:31,760 --> 00:25:35,120
deleted from the system

00:25:33,360 --> 00:25:38,080
uh just that our application url has

00:25:35,120 --> 00:25:39,600
been generated correctly as well

00:25:38,080 --> 00:25:41,360
and then we use unity tests to make sure

00:25:39,600 --> 00:25:44,400
the number of days so

00:25:41,360 --> 00:25:45,760
365 in this example were converted to

00:25:44,400 --> 00:25:48,320
timestamps correctly

00:25:45,760 --> 00:25:51,360
given the talents is 30 days this is

00:25:48,320 --> 00:25:51,360
what the time percent should be

00:25:52,080 --> 00:25:55,840
so results so we hadn't no bugs at all

00:25:54,640 --> 00:25:56,640
so this is very much a best case

00:25:55,840 --> 00:25:58,559
scenario

00:25:56,640 --> 00:25:59,760
um just writing tests doesn't mean you

00:25:58,559 --> 00:26:01,760
won't get any bugs

00:25:59,760 --> 00:26:04,159
but in this case we didn't which was

00:26:01,760 --> 00:26:06,640
pretty awesome

00:26:04,159 --> 00:26:07,520
uh there were some queries uh there were

00:26:06,640 --> 00:26:09,440
some issues

00:26:07,520 --> 00:26:11,840
that we had but these are really easy to

00:26:09,440 --> 00:26:14,000
identify sort of what happened

00:26:11,840 --> 00:26:14,960
uh it turned out i think that the form

00:26:14,000 --> 00:26:18,000
on the uh

00:26:14,960 --> 00:26:19,679
the xml sided broken

00:26:18,000 --> 00:26:21,120
so values have been passed as the wrong

00:26:19,679 --> 00:26:22,559
field name or something

00:26:21,120 --> 00:26:24,720
but this was quite easy to figure this

00:26:22,559 --> 00:26:25,039
out because we had the tests and we said

00:26:24,720 --> 00:26:27,200
that

00:26:25,039 --> 00:26:28,559
as long as you're sending us this data

00:26:27,200 --> 00:26:29,840
then things will work and

00:26:28,559 --> 00:26:32,080
they were able to go back and figure out

00:26:29,840 --> 00:26:33,760
what the issue was

00:26:32,080 --> 00:26:35,440
so yeah even though we'd spent a bit of

00:26:33,760 --> 00:26:37,200
time bringing these tests up front

00:26:35,440 --> 00:26:39,120
uh the debugging time that we had was

00:26:37,200 --> 00:26:42,080
was reduced

00:26:39,120 --> 00:26:43,679
significantly actually and then yeah any

00:26:42,080 --> 00:26:45,360
additional bugs that we find we'd have

00:26:43,679 --> 00:26:50,320
gone back and did some more tests

00:26:45,360 --> 00:26:50,320
to prevent those regressions coming back

00:26:50,840 --> 00:26:57,440
in

00:26:53,360 --> 00:27:00,640
so running tests okay uh there's a

00:26:57,440 --> 00:27:02,240
file in call called run test.sh

00:27:00,640 --> 00:27:04,880
and this is typically been used this has

00:27:02,240 --> 00:27:06,640
been that since trooper seven days

00:27:04,880 --> 00:27:08,799
and it's just a shell script we can use

00:27:06,640 --> 00:27:10,400
to run the tests

00:27:08,799 --> 00:27:11,840
so we can just run all the tests we can

00:27:10,400 --> 00:27:13,760
specify a particular module

00:27:11,840 --> 00:27:15,279
to run the tests for or we can specify

00:27:13,760 --> 00:27:18,000
take a class to run the tests

00:27:15,279 --> 00:27:18,000
just to test for

00:27:18,399 --> 00:27:21,600
alternatively we could just run p2p unit

00:27:20,559 --> 00:27:23,440
directly

00:27:21,600 --> 00:27:25,120
um said all the tests in duplicate

00:27:23,440 --> 00:27:28,240
they're all running p2p unit

00:27:25,120 --> 00:27:29,919
so i just tend to call php directly

00:27:28,240 --> 00:27:31,360
and depending how this your particular

00:27:29,919 --> 00:27:32,480
project is set up you might need to

00:27:31,360 --> 00:27:35,279
tweak some of these commands

00:27:32,480 --> 00:27:36,559
slightly so in this case uh we just go

00:27:35,279 --> 00:27:38,799
into our vendor directory and run the

00:27:36,559 --> 00:27:40,960
pgp unit command

00:27:38,799 --> 00:27:42,480
our php net xml is inside the call

00:27:40,960 --> 00:27:46,000
directory so there's a

00:27:42,480 --> 00:27:48,720
file they call p2p xml dist which is the

00:27:46,000 --> 00:27:49,120
template one so if we were to change

00:27:48,720 --> 00:27:51,600
that

00:27:49,120 --> 00:27:52,559
and change it for our project then we

00:27:51,600 --> 00:27:54,240
need to specify

00:27:52,559 --> 00:27:55,760
where that is so it's inside the core

00:27:54,240 --> 00:27:57,279
directory

00:27:55,760 --> 00:27:58,320
uh it's getting known by default so

00:27:57,279 --> 00:28:00,720
you're not going to commit anything

00:27:58,320 --> 00:28:02,320
project specific which is good

00:28:00,720 --> 00:28:03,840
and then finally the path so in this

00:28:02,320 --> 00:28:06,080
case who's going to run

00:28:03,840 --> 00:28:08,880
uh the pgp unit example test from the

00:28:06,080 --> 00:28:08,880
examples module

00:28:10,159 --> 00:28:13,840
so as i said the php and xml file uh is

00:28:12,720 --> 00:28:16,480
a prerequisite

00:28:13,840 --> 00:28:17,120
because this is what configures phpunit

00:28:16,480 --> 00:28:18,559
um

00:28:17,120 --> 00:28:20,399
so it's needed to run some types of

00:28:18,559 --> 00:28:22,080
tests so uh

00:28:20,399 --> 00:28:24,240
functional tests and i believe kernel

00:28:22,080 --> 00:28:24,960
tests need the phpnet file the unit

00:28:24,240 --> 00:28:28,399
tests

00:28:24,960 --> 00:28:31,120
are fine without it as i said it's

00:28:28,399 --> 00:28:31,600
ignored by git by default so if you were

00:28:31,120 --> 00:28:35,039
to

00:28:31,600 --> 00:28:36,000
rename uh or copy the ptpx file the dist

00:28:35,039 --> 00:28:39,039
file

00:28:36,000 --> 00:28:40,559
maybe your simple test base url needs to

00:28:39,039 --> 00:28:41,760
change because that will change based on

00:28:40,559 --> 00:28:43,120
your project

00:28:41,760 --> 00:28:45,039
uh you're gonna wanna copy that and

00:28:43,120 --> 00:28:47,600
change it

00:28:45,039 --> 00:28:48,399
so yeah we can just copy call php into

00:28:47,600 --> 00:28:52,240
xml.dist

00:28:48,399 --> 00:28:54,559
to call up hp html yes as i said yeah

00:28:52,240 --> 00:28:56,240
simple test based url is the one that

00:28:54,559 --> 00:28:58,880
the test is going to use

00:28:56,240 --> 00:28:59,360
and say what's the url i need to be

00:28:58,880 --> 00:29:02,320
making

00:28:59,360 --> 00:29:04,000
requests against to do the tests so this

00:29:02,320 --> 00:29:05,840
is important because if you start trying

00:29:04,000 --> 00:29:07,279
to ping the wrong url then you're going

00:29:05,840 --> 00:29:08,559
to get the wrong response codes back on

00:29:07,279 --> 00:29:12,320
the wrong

00:29:08,559 --> 00:29:14,159
response text back

00:29:12,320 --> 00:29:15,600
uh sim test database again it's another

00:29:14,159 --> 00:29:16,960
one for me to configure so

00:29:15,600 --> 00:29:18,799
the sites will need a database to

00:29:16,960 --> 00:29:21,440
install into they won't use your

00:29:18,799 --> 00:29:22,720
normal one by default so we specify a

00:29:21,440 --> 00:29:24,720
similar test db

00:29:22,720 --> 00:29:28,399
so typically i'll use an sqlite database

00:29:24,720 --> 00:29:28,399
here but you could use the mysql one

00:29:28,480 --> 00:29:32,240
and stop on failure equals true is a

00:29:30,159 --> 00:29:34,960
command i'll quite frequently add

00:29:32,240 --> 00:29:36,000
either into the php in xml or at the end

00:29:34,960 --> 00:29:38,320
of my php

00:29:36,000 --> 00:29:39,039
unit command which is great because if

00:29:38,320 --> 00:29:41,440
you're doing

00:29:39,039 --> 00:29:43,039
a td approach you hit the first error

00:29:41,440 --> 00:29:45,760
you want it to stop you want to

00:29:43,039 --> 00:29:48,480
go and fix it and then run it again so

00:29:45,760 --> 00:29:48,480
this is quite useful

00:29:49,600 --> 00:29:53,120
classroom development you can write

00:29:51,840 --> 00:29:56,159
tests without doing

00:29:53,120 --> 00:29:58,000
tdd but um

00:29:56,159 --> 00:29:59,600
this is yeah just one sort of process of

00:29:58,000 --> 00:30:01,360
one approach to it

00:29:59,600 --> 00:30:03,120
so firstly we write the test so you

00:30:01,360 --> 00:30:05,760
don't write any actual

00:30:03,120 --> 00:30:06,880
real invitation code at this point write

00:30:05,760 --> 00:30:09,039
the test first

00:30:06,880 --> 00:30:10,720
it feels a bit strange but uh you get

00:30:09,039 --> 00:30:12,559
used to it i promise

00:30:10,720 --> 00:30:14,240
uh the test is going to fail right

00:30:12,559 --> 00:30:16,880
because you're saying go to a page

00:30:14,240 --> 00:30:18,559
that doesn't exist yet or make a node

00:30:16,880 --> 00:30:22,480
for a type you don't have yet

00:30:18,559 --> 00:30:23,840
so the test is going to fail

00:30:22,480 --> 00:30:26,799
you then write some code so you just

00:30:23,840 --> 00:30:29,840
write enough code to make the test pass

00:30:26,799 --> 00:30:31,600
just enough code to make it pass test

00:30:29,840 --> 00:30:32,880
passes and you refactor

00:30:31,600 --> 00:30:35,200
and for a single test you're going to go

00:30:32,880 --> 00:30:36,559
through this loop various times

00:30:35,200 --> 00:30:38,640
so you just want to write just enough

00:30:36,559 --> 00:30:40,399
code with the test pass and enough again

00:30:38,640 --> 00:30:43,039
to make it fail and you're constantly

00:30:40,399 --> 00:30:44,799
going through this loop

00:30:43,039 --> 00:30:47,440
so you don't need to write all the tests

00:30:44,799 --> 00:30:48,720
up front um

00:30:47,440 --> 00:30:50,799
yeah we just want to write enough just

00:30:48,720 --> 00:30:51,520
to make one test fail then you make it

00:30:50,799 --> 00:30:53,440
pass then

00:30:51,520 --> 00:30:54,640
you could fail they make your pass and

00:30:53,440 --> 00:30:56,720
then once it's passing

00:30:54,640 --> 00:30:57,919
um yeah maybe you've done something like

00:30:56,720 --> 00:31:00,559
return just remove

00:30:57,919 --> 00:31:02,159
just return um an empty array just to

00:31:00,559 --> 00:31:03,679
make a test pass that's fine

00:31:02,159 --> 00:31:05,200
but then yeah you know oh that's not

00:31:03,679 --> 00:31:06,080
going to work for this you know for the

00:31:05,200 --> 00:31:08,799
next bit so

00:31:06,080 --> 00:31:11,519
we'll refactor once everything's passing

00:31:08,799 --> 00:31:14,799
and yeah just repeat repeat repeat

00:31:11,519 --> 00:31:16,799
so yeah here's just a diagram of that

00:31:14,799 --> 00:31:18,240
yeah right fainting test make it pass

00:31:16,799 --> 00:31:19,760
refactor so this is where

00:31:18,240 --> 00:31:22,799
uh you might hear people say but red and

00:31:19,760 --> 00:31:24,399
green as red is failing green is passing

00:31:22,799 --> 00:31:28,559
and then sometimes blue for

00:31:24,399 --> 00:31:28,559
for refactoring here

00:31:28,960 --> 00:31:33,519
so this is my process for porting

00:31:31,039 --> 00:31:36,000
modules from drupal 7 to drupal 8.

00:31:33,519 --> 00:31:37,600
so make a new branch i'd add some tests

00:31:36,000 --> 00:31:39,440
if there were a test already or i would

00:31:37,600 --> 00:31:41,760
update the tests move the test across to

00:31:39,440 --> 00:31:43,440
the new version

00:31:41,760 --> 00:31:45,600
write the code to be the test pass

00:31:43,440 --> 00:31:48,080
during the refactoring and repeat

00:31:45,600 --> 00:31:51,360
so that's pretty much the the tsd

00:31:48,080 --> 00:31:51,360
workflow that i just mentioned

00:31:52,480 --> 00:31:56,000
this is how i typically writing tests so

00:31:54,720 --> 00:31:56,960
i'll start with the functional test

00:31:56,000 --> 00:31:59,760
first

00:31:56,960 --> 00:32:00,960
this is called the outside in approach

00:31:59,760 --> 00:32:01,600
and i quite like this because these are

00:32:00,960 --> 00:32:03,440
the ones

00:32:01,600 --> 00:32:04,559
that are probably easiest to write and

00:32:03,440 --> 00:32:05,120
they're also the ones that give you the

00:32:04,559 --> 00:32:08,000
most

00:32:05,120 --> 00:32:09,440
value like does this page exist yes

00:32:08,000 --> 00:32:10,720
right and that's quite important you

00:32:09,440 --> 00:32:13,600
know if you're building

00:32:10,720 --> 00:32:14,480
um you know a page you know you want to

00:32:13,600 --> 00:32:16,880
make sure that page

00:32:14,480 --> 00:32:20,399
is accessible and you don't messed up

00:32:16,880 --> 00:32:20,399
any permissions or anything

00:32:20,559 --> 00:32:23,919
yeah and then drop down to integration

00:32:22,159 --> 00:32:25,840
tests or you test where you need to

00:32:23,919 --> 00:32:27,760
so you might have a failing functional

00:32:25,840 --> 00:32:30,080
test uh because you might you want to go

00:32:27,760 --> 00:32:32,559
to a page your page doesn't exist yet

00:32:30,080 --> 00:32:34,720
uh so then you want to maybe you want to

00:32:32,559 --> 00:32:36,880
drop down to an integration level

00:32:34,720 --> 00:32:38,640
make that pass and then within doing

00:32:36,880 --> 00:32:42,159
that you've actually fixed the

00:32:38,640 --> 00:32:44,720
functional test as well

00:32:42,159 --> 00:32:46,240
uh programming by wishful thinking uh is

00:32:44,720 --> 00:32:49,120
essentially write the code

00:32:46,240 --> 00:32:51,600
you wish you had so you can say i'm

00:32:49,120 --> 00:32:53,600
gonna call this method or this class

00:32:51,600 --> 00:32:55,279
i know it doesn't exist yet but i'm

00:32:53,600 --> 00:32:58,640
gonna write it as if it did

00:32:55,279 --> 00:32:58,640
and then i'll go and write it afterwards

00:33:01,120 --> 00:33:04,240
and yes writing coping's first and

00:33:02,559 --> 00:33:06,320
fitting in the code so if you've got

00:33:04,240 --> 00:33:08,960
this given when then

00:33:06,320 --> 00:33:11,360
scenario oh yeah quite commonly just

00:33:08,960 --> 00:33:14,720
copy that in write the test around it

00:33:11,360 --> 00:33:14,720
and then delete the code afterwards

00:33:15,279 --> 00:33:19,600
and delete the comments afterwards sorry

00:33:18,240 --> 00:33:21,039
and yeah sometimes well i'll write the

00:33:19,600 --> 00:33:21,600
assertions first so if you think back to

00:33:21,039 --> 00:33:24,480
the beginning

00:33:21,600 --> 00:33:25,440
where i said about uh range act to suit

00:33:24,480 --> 00:33:26,240
quite often i'll start with the

00:33:25,440 --> 00:33:28,399
assertions

00:33:26,240 --> 00:33:29,519
and then think what do i need to make

00:33:28,399 --> 00:33:32,240
okay i'm saying

00:33:29,519 --> 00:33:33,679
there should be three articles here okay

00:33:32,240 --> 00:33:38,799
i'm gonna need some articles and they

00:33:33,679 --> 00:33:40,480
work my way backwards okay so let's have

00:33:38,799 --> 00:33:41,840
a look at an example of building a blog

00:33:40,480 --> 00:33:44,080
module

00:33:41,840 --> 00:33:44,880
uh and this is our acceptance criteria

00:33:44,080 --> 00:33:46,720
so as a

00:33:44,880 --> 00:33:48,720
site visitor i want to see a list of

00:33:46,720 --> 00:33:52,159
articles published articles

00:33:48,720 --> 00:33:53,840
uh slash blog i want to see them ordered

00:33:52,159 --> 00:33:54,640
by the post state so you want to see the

00:33:53,840 --> 00:33:56,399
most

00:33:54,640 --> 00:33:58,720
recent or newest ones at the top of the

00:33:56,399 --> 00:33:58,720
page

00:34:00,559 --> 00:34:03,679
so my tasks are ensure that the blog

00:34:02,399 --> 00:34:05,120
page exists

00:34:03,679 --> 00:34:07,360
ensure that only published articles are

00:34:05,120 --> 00:34:09,119
shown and ensure that they're in the

00:34:07,360 --> 00:34:10,720
correct order

00:34:09,119 --> 00:34:14,399
so let's start with the functional test

00:34:10,720 --> 00:34:14,399
um does the block page exist

00:34:14,800 --> 00:34:18,399
so in this case you've got a module

00:34:16,320 --> 00:34:20,000
called my module my underscore module

00:34:18,399 --> 00:34:21,919
so this matches our namespace and our

00:34:20,000 --> 00:34:23,200
directory structure

00:34:21,919 --> 00:34:25,119
and we're going to start with that

00:34:23,200 --> 00:34:27,040
browser test base that we saw at the

00:34:25,119 --> 00:34:29,359
beginning

00:34:27,040 --> 00:34:31,760
and then new for drupal 9 or i think

00:34:29,359 --> 00:34:33,760
from triple 8.8 or 8.9 you also need to

00:34:31,760 --> 00:34:35,280
specify the default theme

00:34:33,760 --> 00:34:36,800
so this is the theme that the testing

00:34:35,280 --> 00:34:38,879
profile is going to use

00:34:36,800 --> 00:34:40,800
uh to run the test against so typically

00:34:38,879 --> 00:34:43,760
this is going to be the stark theme

00:34:40,800 --> 00:34:46,159
99 times nine times out of ten i'll use

00:34:43,760 --> 00:34:48,960
the stack theme

00:34:46,159 --> 00:34:50,480
so we can test to test our page loads uh

00:34:48,960 --> 00:34:51,440
usually i'd use a bit more of a post

00:34:50,480 --> 00:34:54,000
name but

00:34:51,440 --> 00:34:57,200
slides uh and we're going to do a get

00:34:54,000 --> 00:34:59,200
request to our blog page

00:34:57,200 --> 00:35:00,480
uh there's a helper function here called

00:34:59,200 --> 00:35:02,400
a search session

00:35:00,480 --> 00:35:03,599
and we can use that to just check what

00:35:02,400 --> 00:35:05,599
our status code is

00:35:03,599 --> 00:35:08,000
so we expect the page to exist and be

00:35:05,599 --> 00:35:10,160
accessible so we're expecting a 200

00:35:08,000 --> 00:35:11,520
response code

00:35:10,160 --> 00:35:14,000
and we're expecting our response to

00:35:11,520 --> 00:35:16,960
contain the h1 with the type

00:35:14,000 --> 00:35:18,000
block in it so because we're following

00:35:16,960 --> 00:35:20,640
tdd

00:35:18,000 --> 00:35:21,200
and none of this exists yet we do need

00:35:20,640 --> 00:35:22,960
to enable

00:35:21,200 --> 00:35:24,480
the modules so you need to enable the

00:35:22,960 --> 00:35:26,320
module that we're writing and also

00:35:24,480 --> 00:35:28,960
we know we need to go and see to enable

00:35:26,320 --> 00:35:30,160
the node module

00:35:28,960 --> 00:35:32,400
when we run these tests we're going to

00:35:30,160 --> 00:35:34,000
get a 404 because that piece doesn't

00:35:32,400 --> 00:35:35,599
exist yet

00:35:34,000 --> 00:35:38,079
so we can get around this by making a

00:35:35,599 --> 00:35:39,839
routine file so we can specify our path

00:35:38,079 --> 00:35:44,480
which is slash blog

00:35:39,839 --> 00:35:45,839
we create a controller and our title

00:35:44,480 --> 00:35:47,440
right again we're going to get a

00:35:45,839 --> 00:35:48,800
different error code as long as our code

00:35:47,440 --> 00:35:49,520
is moving our different errors are

00:35:48,800 --> 00:35:52,320
changing

00:35:49,520 --> 00:35:55,040
uh then we're making progress so we've

00:35:52,320 --> 00:35:56,800
gone from a 404 to 500

00:35:55,040 --> 00:35:59,119
that's because our blog page controller

00:35:56,800 --> 00:36:01,280
that we've said should exist doesn't

00:35:59,119 --> 00:36:02,400
so we can make one and because we

00:36:01,280 --> 00:36:03,760
haven't specified the method

00:36:02,400 --> 00:36:05,839
it's going to call the underscoring

00:36:03,760 --> 00:36:07,200
score invoke function

00:36:05,839 --> 00:36:09,440
and we're going to say it's going to

00:36:07,200 --> 00:36:11,040
return an array so we'll return an empty

00:36:09,440 --> 00:36:13,119
array

00:36:11,040 --> 00:36:14,640
and the test passes so we've said enough

00:36:13,119 --> 00:36:16,400
to make a page

00:36:14,640 --> 00:36:17,839
return at the right path with the right

00:36:16,400 --> 00:36:20,079
arrow or where the right state is called

00:36:17,839 --> 00:36:20,079
even

00:36:20,800 --> 00:36:23,839
so now we've done that we can drop down

00:36:22,160 --> 00:36:26,000
to the curl tax level and we can start

00:36:23,839 --> 00:36:27,680
trying to load articles

00:36:26,000 --> 00:36:29,440
so we'll use a the repository pattern

00:36:27,680 --> 00:36:29,839
here so we'll make an article repository

00:36:29,440 --> 00:36:32,320
test

00:36:29,839 --> 00:36:33,359
we need to extend the kernel entity code

00:36:32,320 --> 00:36:35,599
on test space

00:36:33,359 --> 00:36:37,280
there's various coding test spaces we

00:36:35,599 --> 00:36:39,200
could extend but as we're using

00:36:37,280 --> 00:36:41,680
entities a big tends to use the entity

00:36:39,200 --> 00:36:43,359
kernel test space

00:36:41,680 --> 00:36:45,520
we're going to use a trait called node

00:36:43,359 --> 00:36:46,720
creation trait and again we can just

00:36:45,520 --> 00:36:49,119
define our modules we're going to

00:36:46,720 --> 00:36:49,119
install

00:36:50,160 --> 00:36:53,520
and we'll have a test for loading our

00:36:52,160 --> 00:36:55,200
articles

00:36:53,520 --> 00:36:56,640
we can use a create node function that's

00:36:55,200 --> 00:36:58,160
added by

00:36:56,640 --> 00:36:59,680
the trait we're going to get our

00:36:58,160 --> 00:37:01,839
repository from the container

00:36:59,680 --> 00:37:03,440
again this doesn't exist yet and we're

00:37:01,839 --> 00:37:04,640
going to get the articles from it

00:37:03,440 --> 00:37:07,359
and we're saying there should be one

00:37:04,640 --> 00:37:09,599
article it should be an object

00:37:07,359 --> 00:37:11,440
and the key here is going once it's node

00:37:09,599 --> 00:37:14,000
one

00:37:11,440 --> 00:37:15,280
and the text the the title should be

00:37:14,000 --> 00:37:16,720
test post

00:37:15,280 --> 00:37:19,359
and we can do this because every time we

00:37:16,720 --> 00:37:21,280
run a new test it's going to reinstall a

00:37:19,359 --> 00:37:22,480
fresh drupal site for us so we can

00:37:21,280 --> 00:37:25,119
confidently say this is always going to

00:37:22,480 --> 00:37:25,119
be node 1.

00:37:26,160 --> 00:37:30,079
if we're in this uh we've got not got an

00:37:28,720 --> 00:37:31,119
article repository yet we haven't made

00:37:30,079 --> 00:37:32,720
one

00:37:31,119 --> 00:37:34,560
so we can make an article repository

00:37:32,720 --> 00:37:36,320
inside a source directory inside the

00:37:34,560 --> 00:37:40,079
repository directory

00:37:36,320 --> 00:37:40,079
and we need to add it as a service

00:37:41,440 --> 00:37:44,480
so now we've done that again our error

00:37:42,640 --> 00:37:46,480
is changing we're making progress

00:37:44,480 --> 00:37:48,640
so now we get uh article repositories

00:37:46,480 --> 00:37:49,359
found but there's no get all method on

00:37:48,640 --> 00:37:51,599
it

00:37:49,359 --> 00:37:53,040
so let's make it get all method again

00:37:51,599 --> 00:37:55,680
let's go to an array so let's just

00:37:53,040 --> 00:37:57,599
return an empty array

00:37:55,680 --> 00:37:59,280
because we turn an empty array our

00:37:57,599 --> 00:37:59,760
actual size is zero right it's an empty

00:37:59,280 --> 00:38:01,280
array

00:37:59,760 --> 00:38:03,280
but we've said we should be expecting

00:38:01,280 --> 00:38:06,160
one

00:38:03,280 --> 00:38:06,560
so this makes make our get all method

00:38:06,160 --> 00:38:08,800
more

00:38:06,560 --> 00:38:10,560
fully functional so we can actually

00:38:08,800 --> 00:38:11,599
inject here the entity type manager

00:38:10,560 --> 00:38:13,680
interface

00:38:11,599 --> 00:38:15,200
get the node storage and called load

00:38:13,680 --> 00:38:18,079
multiple on it

00:38:15,200 --> 00:38:19,440
again this isn't like the best solution

00:38:18,079 --> 00:38:21,440
but we're going to let the test

00:38:19,440 --> 00:38:22,960
tell us that that's the case but for now

00:38:21,440 --> 00:38:25,520
this is just the minimum amount to get

00:38:22,960 --> 00:38:25,520
this to work

00:38:26,160 --> 00:38:31,839
because you've added a dependency um

00:38:29,760 --> 00:38:33,599
container doesn't know this yet so we

00:38:31,839 --> 00:38:35,280
need to update our services in this case

00:38:33,599 --> 00:38:38,880
we'll just use auto wiring to

00:38:35,280 --> 00:38:39,520
inject the dependency there are a couple

00:38:38,880 --> 00:38:41,599
of

00:38:39,520 --> 00:38:43,440
uh interesting ones so we get this error

00:38:41,599 --> 00:38:45,839
because we need to install the config

00:38:43,440 --> 00:38:46,960
the filter configuration and if you get

00:38:45,839 --> 00:38:48,880
something like this we need to

00:38:46,960 --> 00:38:51,760
also install we'll tell it to install

00:38:48,880 --> 00:38:51,760
the node access table

00:38:52,320 --> 00:38:55,280
yeah and that one's done

00:38:55,440 --> 00:38:58,839
just keeping around the time here just

00:38:56,880 --> 00:39:00,240
about coming off the time we're nearly

00:38:58,839 --> 00:39:01,839
done uh

00:39:00,240 --> 00:39:03,440
so now we're gonna test the articles

00:39:01,839 --> 00:39:04,640
only articles are returned so now we've

00:39:03,440 --> 00:39:07,200
got past

00:39:04,640 --> 00:39:07,839
the the configuration the setup errors

00:39:07,200 --> 00:39:10,480
we can

00:39:07,839 --> 00:39:11,760
quickly add these additional tests so

00:39:10,480 --> 00:39:12,560
we're gonna make some pages and some

00:39:11,760 --> 00:39:14,160
articles

00:39:12,560 --> 00:39:15,839
uh we're to call the article repository

00:39:14,160 --> 00:39:18,640
again and get all the

00:39:15,839 --> 00:39:20,320
articles and say we should get three but

00:39:18,640 --> 00:39:21,440
we've got five because we've set to load

00:39:20,320 --> 00:39:23,920
everything

00:39:21,440 --> 00:39:25,839
so we're gonna make our get one method

00:39:23,920 --> 00:39:27,920
uh we're gonna change it to use load by

00:39:25,839 --> 00:39:29,440
properties now and say only call them

00:39:27,920 --> 00:39:32,960
they have a type of article

00:39:29,440 --> 00:39:32,960
only load them with a title article

00:39:33,040 --> 00:39:36,560
and again only if published articles are

00:39:34,800 --> 00:39:37,359
returned so we can make some with

00:39:36,560 --> 00:39:39,359
different statements

00:39:37,359 --> 00:39:40,800
here and again we can say there should

00:39:39,359 --> 00:39:43,200
be three but there's five

00:39:40,800 --> 00:39:44,480
because we haven't had any filters based

00:39:43,200 --> 00:39:48,079
on the status yet

00:39:44,480 --> 00:39:49,280
so we'll do that and then finally let's

00:39:48,079 --> 00:39:50,160
just make sure that everything's in the

00:39:49,280 --> 00:39:51,599
right order

00:39:50,160 --> 00:39:53,599
so when we're creating nodes we can

00:39:51,599 --> 00:39:54,480
change the created time

00:39:53,599 --> 00:39:55,839
and this is something that would be

00:39:54,480 --> 00:39:57,359
really tricky to do with a functional

00:39:55,839 --> 00:39:58,000
test because everything so far we're

00:39:57,359 --> 00:40:01,359
just saying

00:39:58,000 --> 00:40:02,640
does this test text exist so this is now

00:40:01,359 --> 00:40:04,079
if he was trying to

00:40:02,640 --> 00:40:06,319
check the ordering of them this would

00:40:04,079 --> 00:40:07,359
get quite complicated but in this case

00:40:06,319 --> 00:40:09,760
we can just say

00:40:07,359 --> 00:40:11,119
get our repository get all the nodes

00:40:09,760 --> 00:40:12,319
from it to check the keys

00:40:11,119 --> 00:40:14,800
and we want them returned in this

00:40:12,319 --> 00:40:16,240
specific order so if we had five we want

00:40:14,800 --> 00:40:18,720
them to be in the order three one two

00:40:16,240 --> 00:40:18,720
five four

00:40:18,800 --> 00:40:21,599
of course they're not because we haven't

00:40:20,160 --> 00:40:22,400
done anything to tell that should be the

00:40:21,599 --> 00:40:24,960
case

00:40:22,400 --> 00:40:27,680
so we get it's a slightly interesting

00:40:24,960 --> 00:40:30,160
error message here

00:40:27,680 --> 00:40:31,839
yeah in order to do this we can add a

00:40:30,160 --> 00:40:32,640
sort by create a date method to our

00:40:31,839 --> 00:40:35,119
repository

00:40:32,640 --> 00:40:37,200
and return them and before we return

00:40:35,119 --> 00:40:39,280
them we can call ua sort and do our

00:40:37,200 --> 00:40:42,400
sorted net

00:40:39,280 --> 00:40:42,400
and everything passes again

00:40:42,640 --> 00:40:46,720
so um this example came from a workshop

00:40:45,040 --> 00:40:49,040
that i did for drupal camp london back

00:40:46,720 --> 00:40:50,640
in march and i did a troop account nyc

00:40:49,040 --> 00:40:52,160
recently as well

00:40:50,640 --> 00:40:54,480
um so yeah if you want to see like the

00:40:52,160 --> 00:40:55,839
full process um there's a link coming up

00:40:54,480 --> 00:40:58,000
in that in a moment

00:40:55,839 --> 00:40:59,440
and yeah i did this talk for um user

00:40:58,000 --> 00:41:00,000
group a couple years ago it's great to

00:40:59,440 --> 00:41:03,040
see

00:41:00,000 --> 00:41:06,079
um comments like this afterwards um yeah

00:41:03,040 --> 00:41:07,440
so you know after seeing your talk um

00:41:06,079 --> 00:41:08,720
you know i've gone and written some

00:41:07,440 --> 00:41:09,520
tests and uncovered a bug which is

00:41:08,720 --> 00:41:11,040
pretty awesome

00:41:09,520 --> 00:41:12,960
this is exactly the experience i had

00:41:11,040 --> 00:41:14,640
when i started writing tests

00:41:12,960 --> 00:41:17,599
at the beginning i found a bug and they

00:41:14,640 --> 00:41:17,599
wouldn't go back otherwise

00:41:17,839 --> 00:41:22,800
so we're just at the time um there's a

00:41:20,720 --> 00:41:24,720
link here to the testing workshop

00:41:22,800 --> 00:41:26,400
notes that i mentioned was got step by

00:41:24,720 --> 00:41:28,400
step how to build this block module out

00:41:26,400 --> 00:41:30,240
in more detail

00:41:28,400 --> 00:41:32,079
i'm writing a book i have been for some

00:41:30,240 --> 00:41:35,359
time on and off

00:41:32,079 --> 00:41:36,800
on testing and drupal and yeah a

00:41:35,359 --> 00:41:38,400
you also contact me through the website

00:41:36,800 --> 00:41:40,560
or through twitter

00:41:38,400 --> 00:41:41,440
um and then yeah given that there's any

00:41:40,560 --> 00:41:43,599
you know we're at the time

00:41:41,440 --> 00:41:44,480
i'll go back and look for any questions

00:41:43,599 --> 00:41:49,680
in the chat and i'll

00:41:44,480 --> 00:41:51,520
reply them in uh text afterwards

00:41:49,680 --> 00:41:52,880
so thanks everybody for uh attending the

00:41:51,520 --> 00:41:54,000
session it's great to give this talk for

00:41:52,880 --> 00:41:56,079
drupalcon

00:41:54,000 --> 00:41:57,359
uh greatly speaking again at drupalcon

00:41:56,079 --> 00:41:59,119
uh

00:41:57,359 --> 00:42:00,640
yeah hopefully get to see everybody

00:41:59,119 --> 00:42:02,319
actually in person at some point next

00:42:00,640 --> 00:42:04,640
year that would be fantastic

00:42:02,319 --> 00:42:07,520
well as soon as we can anyway cool thank

00:42:04,640 --> 00:42:07,520

YouTube URL: https://www.youtube.com/watch?v=8ZRWYq9nSvo


