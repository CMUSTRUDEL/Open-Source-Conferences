Title: MAKERS & BUILDERS - Core Automatic Updates Initiative Update   DrupalCon Europe 2020
Publication date: 2021-01-13
Playlist: DrupalCon Europe 2020
Description: 
	At Drupalcon Global Dries announced Automatic Updates as 1 of 5 strategic initiatives for Drupal 9. Automatic Updates is an existing initiative that has already produced a contributed module that can provide updates for non-Composer based Drupal 7 and Drupal 8 sites. The next phase of the initiative is to add support for updates of Composer based sites to Drupal 9.
Captions: 
	00:00:04,059 --> 00:00:09,889
[Music]

00:00:13,679 --> 00:00:18,240
all right great

00:00:15,679 --> 00:00:19,439
okay um all right this is the automatic

00:00:18,240 --> 00:00:21,520
updates initiative

00:00:19,439 --> 00:00:23,600
update um this is something that's been

00:00:21,520 --> 00:00:28,080
in the works for a long time

00:00:23,600 --> 00:00:28,080
um there's uh our existing work going on

00:00:28,840 --> 00:00:32,160
um

00:00:30,240 --> 00:00:33,920
okay my name is ted bowman i'm a

00:00:32,160 --> 00:00:36,239
principal software engineer

00:00:33,920 --> 00:00:37,920
at aquia's drupal acceleration team i'm

00:00:36,239 --> 00:00:39,680
the maintainer of layout builder and

00:00:37,920 --> 00:00:42,879
settings tray module

00:00:39,680 --> 00:00:44,960
our co-maintainer and i'm a tedbo on

00:00:42,879 --> 00:00:48,559
drupal.org and twitter

00:00:44,960 --> 00:00:49,680
so hand you over to lucas hi this is

00:00:48,559 --> 00:00:52,719
lucas heading

00:00:49,680 --> 00:00:54,800
uh good morning afternoon or evening as

00:00:52,719 --> 00:00:55,920
the case may be i'm owner of an agency

00:00:54,800 --> 00:00:59,039
called mtech

00:00:55,920 --> 00:01:01,520
and i subcontract for a large number of

00:00:59,039 --> 00:01:03,920
uh agencies primarily right now i've

00:01:01,520 --> 00:01:07,040
been working with tag one consulting

00:01:03,920 --> 00:01:10,720
and uh my great subsystem

00:01:07,040 --> 00:01:12,720
is uh what i co-maintain um

00:01:10,720 --> 00:01:14,080
i also helped build the version one of

00:01:12,720 --> 00:01:17,280
this uh

00:01:14,080 --> 00:01:19,680
core uh automatic updates um thing in

00:01:17,280 --> 00:01:19,680
contrib

00:01:21,040 --> 00:01:24,320
all right thanks so there's a lot of

00:01:22,640 --> 00:01:26,159
other people that are working on this

00:01:24,320 --> 00:01:28,720
project

00:01:26,159 --> 00:01:30,479
and here are some of them you can find

00:01:28,720 --> 00:01:33,040
us on the drupal slack at the

00:01:30,479 --> 00:01:35,280
pound auto updates channel we've also

00:01:33,040 --> 00:01:36,560
benefited a lot from the composer

00:01:35,280 --> 00:01:38,320
initiative

00:01:36,560 --> 00:01:40,400
because you know we're trying to build

00:01:38,320 --> 00:01:41,680
something that uses composers to do auto

00:01:40,400 --> 00:01:42,640
updates so a lot of the work that

00:01:41,680 --> 00:01:44,159
they've done

00:01:42,640 --> 00:01:45,840
the composer initiative we're obviously

00:01:44,159 --> 00:01:48,240
going to benefit from

00:01:45,840 --> 00:01:49,759
we're always looking for help as you'll

00:01:48,240 --> 00:01:50,399
see in this presentation there's a lot

00:01:49,759 --> 00:01:53,680
of different

00:01:50,399 --> 00:01:55,920
areas um that we're working in

00:01:53,680 --> 00:01:57,360
and uh it's not you know not just

00:01:55,920 --> 00:01:59,040
working in drupal core

00:01:57,360 --> 00:02:00,479
so if you're interested in working in

00:01:59,040 --> 00:02:01,920
drupal core that's great

00:02:00,479 --> 00:02:03,920
but if you're interested in working

00:02:01,920 --> 00:02:06,799
outside of drupal core uh we can

00:02:03,920 --> 00:02:08,959
definitely use your help too

00:02:06,799 --> 00:02:11,360
um so let's get an example of why

00:02:08,959 --> 00:02:14,080
security uh auto updates are important

00:02:11,360 --> 00:02:16,000
um on september 16th there was a

00:02:14,080 --> 00:02:17,360
security release for three minor

00:02:16,000 --> 00:02:20,879
versions of drupal

00:02:17,360 --> 00:02:23,040
um um mostly moderately critical but

00:02:20,879 --> 00:02:25,599
some critical vulnerabilities

00:02:23,040 --> 00:02:26,160
are a critical vulnerability a month

00:02:25,599 --> 00:02:28,800
later

00:02:26,160 --> 00:02:30,720
about 45 percent of the sites had not

00:02:28,800 --> 00:02:33,040
been updated that were effective

00:02:30,720 --> 00:02:34,640
um and anytime we talk about drupal

00:02:33,040 --> 00:02:37,200
usage statistics

00:02:34,640 --> 00:02:39,280
and versions there's a lot of caveats as

00:02:37,200 --> 00:02:41,120
far as

00:02:39,280 --> 00:02:43,040
this only deals with sites that have the

00:02:41,120 --> 00:02:44,319
update module installed and some sites

00:02:43,040 --> 00:02:45,680
may have been patched

00:02:44,319 --> 00:02:47,680
but they're reporting a different

00:02:45,680 --> 00:02:50,560
version and also this was not

00:02:47,680 --> 00:02:51,120
a highly critical security release um

00:02:50,560 --> 00:02:53,840
and even

00:02:51,120 --> 00:02:54,160
um for any particular security release

00:02:53,840 --> 00:02:56,080
not

00:02:54,160 --> 00:02:57,440
every site is vulnerable you know you

00:02:56,080 --> 00:02:58,480
may have to have a certain module

00:02:57,440 --> 00:03:00,800
enabled or

00:02:58,480 --> 00:03:02,640
be having it configured a certain way

00:03:00,800 --> 00:03:04,720
but even if we say let's cut that to

00:03:02,640 --> 00:03:06,080
half like 20 percent of the sites

00:03:04,720 --> 00:03:08,640
had not been updated that's still

00:03:06,080 --> 00:03:10,239
something that um we want to address

00:03:08,640 --> 00:03:12,319
so you know a lot of times these days

00:03:10,239 --> 00:03:13,920
people expect auto updates

00:03:12,319 --> 00:03:16,159
we have you know wordpress has been

00:03:13,920 --> 00:03:18,640
doing it for about half a decade

00:03:16,159 --> 00:03:19,280
um if drupal wants to compete in the

00:03:18,640 --> 00:03:21,840
back end

00:03:19,280 --> 00:03:23,519
for decoupled sites you know services

00:03:21,840 --> 00:03:25,040
like contentful that are software as a

00:03:23,519 --> 00:03:27,200
service you don't really have to

00:03:25,040 --> 00:03:28,560
think about updating your site um so

00:03:27,200 --> 00:03:28,879
people have just sort of gotten used to

00:03:28,560 --> 00:03:33,680
this

00:03:28,879 --> 00:03:35,200
in a lot of different spaces um

00:03:33,680 --> 00:03:36,799
all right yeah lucas want to talk about

00:03:35,200 --> 00:03:39,920
the control module yeah

00:03:36,799 --> 00:03:42,879
um can you go back one slide yeah

00:03:39,920 --> 00:03:43,360
uh and it's not just cmss we also see

00:03:42,879 --> 00:03:45,920
this

00:03:43,360 --> 00:03:47,519
um when you when you decide to host your

00:03:45,920 --> 00:03:48,959
your site you you pick

00:03:47,519 --> 00:03:51,599
your hosting platform whether it's

00:03:48,959 --> 00:03:52,799
managed or unmanaged if you want a vps

00:03:51,599 --> 00:03:54,640
or if you're

00:03:52,799 --> 00:03:56,400
you want to be able to if you want to be

00:03:54,640 --> 00:03:58,720
able to manage the os

00:03:56,400 --> 00:04:00,560
and updates there or if you want to go

00:03:58,720 --> 00:04:02,080
to something that's more more managed

00:04:00,560 --> 00:04:05,040
like pantheon or aqua

00:04:02,080 --> 00:04:05,920
or platform sh you know we don't have it

00:04:05,040 --> 00:04:08,879
just

00:04:05,920 --> 00:04:09,519
in the the realm of cms's we we see it

00:04:08,879 --> 00:04:14,000
up and down

00:04:09,519 --> 00:04:16,400
the market space so moving on to

00:04:14,000 --> 00:04:18,160
what we've already done sort of what we

00:04:16,400 --> 00:04:19,120
did in the past we built a contrib

00:04:18,160 --> 00:04:22,320
module

00:04:19,120 --> 00:04:24,880
learned a ton but it had some

00:04:22,320 --> 00:04:25,600
significant serious limitations it does

00:04:24,880 --> 00:04:28,720
not support

00:04:25,600 --> 00:04:29,440
composer sites however we like i said we

00:04:28,720 --> 00:04:32,400
learned a lot

00:04:29,440 --> 00:04:33,120
um we we have a very secure system with

00:04:32,400 --> 00:04:35,120
it

00:04:33,120 --> 00:04:36,320
and we're taking what we've learned from

00:04:35,120 --> 00:04:39,360
there and

00:04:36,320 --> 00:04:42,639
we're moving this over to core now which

00:04:39,360 --> 00:04:45,840
i'll hand it back to ted great

00:04:42,639 --> 00:04:46,720
so um so yeah for our so our goal now is

00:04:45,840 --> 00:04:49,840
to provide

00:04:46,720 --> 00:04:52,560
um updates in drupal core

00:04:49,840 --> 00:04:54,160
for drupal core on the patch level so

00:04:52,560 --> 00:04:56,160
this would be security releases but

00:04:54,160 --> 00:04:56,880
other also other patch level increases

00:04:56,160 --> 00:04:59,120
so

00:04:56,880 --> 00:05:00,320
you know if you're on if you're on nine

00:04:59,120 --> 00:05:01,680
zero

00:05:00,320 --> 00:05:03,600
well it won't be for nine zero but say

00:05:01,680 --> 00:05:05,360
you're on nine two one

00:05:03,600 --> 00:05:06,880
then this would hopefully update you to

00:05:05,360 --> 00:05:11,759
nine uh

00:05:06,880 --> 00:05:13,440
nine two so nine two one to nine nine

00:05:11,759 --> 00:05:15,600
and we want these to be composer-based

00:05:13,440 --> 00:05:17,759
updates we want them to be unattended

00:05:15,600 --> 00:05:19,919
updates meaning

00:05:17,759 --> 00:05:20,800
it's not that you'll log into your site

00:05:19,919 --> 00:05:22,320
and

00:05:20,800 --> 00:05:24,000
push a button and it will update your

00:05:22,320 --> 00:05:27,440
site it will update your site

00:05:24,000 --> 00:05:28,400
just being on the web um and we want to

00:05:27,440 --> 00:05:31,520
have automatic

00:05:28,400 --> 00:05:32,800
rollbacks if something goes wrong or you

00:05:31,520 --> 00:05:35,280
know just generally

00:05:32,800 --> 00:05:37,680
we don't want to update your site and

00:05:35,280 --> 00:05:40,080
then just see if something goes wrong

00:05:37,680 --> 00:05:41,759
so um the first thing we're doing the

00:05:40,080 --> 00:05:42,960
initiative is security advisory

00:05:41,759 --> 00:05:44,720
notifications

00:05:42,960 --> 00:05:47,120
um this is something that contrib module

00:05:44,720 --> 00:05:48,800
has now and basically

00:05:47,120 --> 00:05:50,720
this would be for highly critical

00:05:48,800 --> 00:05:51,520
security advisories either for cork and

00:05:50,720 --> 00:05:53,039
trip

00:05:51,520 --> 00:05:54,880
and the idea is every once in a while

00:05:53,039 --> 00:05:56,400
these things happen not not really very

00:05:54,880 --> 00:05:58,960
often maybe

00:05:56,400 --> 00:05:59,680
once a year once every couple years

00:05:58,960 --> 00:06:01,280
there's a

00:05:59,680 --> 00:06:02,880
notification that we want to get out to

00:06:01,280 --> 00:06:04,639
as many people as possible to take

00:06:02,880 --> 00:06:07,600
action as soon as possible

00:06:04,639 --> 00:06:09,360
and these are often like maybe released

00:06:07,600 --> 00:06:12,319
a few days or a week before

00:06:09,360 --> 00:06:14,080
a security is going to happen so if we

00:06:12,319 --> 00:06:14,560
can get this notification inside drupal

00:06:14,080 --> 00:06:18,240
core

00:06:14,560 --> 00:06:20,880
and even before um drupal

00:06:18,240 --> 00:06:22,400
we have automatic updates people will

00:06:20,880 --> 00:06:24,080
know okay you know something

00:06:22,400 --> 00:06:25,759
something's coming down the pipe next

00:06:24,080 --> 00:06:27,840
wednesday at the

00:06:25,759 --> 00:06:29,919
security window and i should be ready to

00:06:27,840 --> 00:06:33,280
update right when happens so

00:06:29,919 --> 00:06:34,000
this is a patch that's uh was rtbsd i'm

00:06:33,280 --> 00:06:36,319
not sure if it still

00:06:34,000 --> 00:06:37,680
is but hopefully it's pretty close and

00:06:36,319 --> 00:06:40,240
speaking to the

00:06:37,680 --> 00:06:41,440
regularity or frequency of these alerts

00:06:40,240 --> 00:06:44,479
we've had this in contrib

00:06:41,440 --> 00:06:48,000
now for the last year and

00:06:44,479 --> 00:06:49,680
not once have we decided as a community

00:06:48,000 --> 00:06:51,599
within the you know the security team of

00:06:49,680 --> 00:06:54,639
drupal to to post

00:06:51,599 --> 00:06:54,639
one of these highly

00:06:54,880 --> 00:06:59,840
highly high risk security advisories yet

00:06:58,400 --> 00:07:01,280
so just you know it's not very frequent

00:06:59,840 --> 00:07:02,000
but we want to be able to communicate

00:07:01,280 --> 00:07:04,479
this when it does

00:07:02,000 --> 00:07:05,440
happen yeah but once we get this into

00:07:04,479 --> 00:07:07,759
core we can

00:07:05,440 --> 00:07:09,520
figure out as a community like okay our

00:07:07,759 --> 00:07:11,039
maybe his critical

00:07:09,520 --> 00:07:12,639
security lease is something we want to

00:07:11,039 --> 00:07:16,080
push out but for now it's just

00:07:12,639 --> 00:07:17,520
only highly critical so the other thing

00:07:16,080 --> 00:07:19,199
working on encore is the updates

00:07:17,520 --> 00:07:20,880
readiness checks so this would be the

00:07:19,199 --> 00:07:24,080
very first feature of a new

00:07:20,880 --> 00:07:27,680
um experimental automatic updates module

00:07:24,080 --> 00:07:30,880
and um when you download uh

00:07:27,680 --> 00:07:32,800
say if this gets into say 9.2

00:07:30,880 --> 00:07:35,840
and you download the tarball or you

00:07:32,800 --> 00:07:37,280
install via composer92 you're not going

00:07:35,840 --> 00:07:38,080
to see this it's only going to be in the

00:07:37,280 --> 00:07:40,080
dev version

00:07:38,080 --> 00:07:41,759
right now so the idea is we don't want

00:07:40,080 --> 00:07:44,879
to release a contrib module or

00:07:41,759 --> 00:07:46,479
experimental module that does a update

00:07:44,879 --> 00:07:47,120
readiness check because it could be

00:07:46,479 --> 00:07:48,800
confusing

00:07:47,120 --> 00:07:50,479
if we don't actually have the updating

00:07:48,800 --> 00:07:53,039
happening so it's going to be

00:07:50,479 --> 00:07:54,400
in the dev branch you'll be able to see

00:07:53,039 --> 00:07:57,520
it if you

00:07:54,400 --> 00:07:58,560
i guess if you check if you do a dev

00:07:57,520 --> 00:08:01,440
install

00:07:58,560 --> 00:08:02,080
via composer or if you do a git clone so

00:08:01,440 --> 00:08:04,400
hopefully

00:08:02,080 --> 00:08:05,680
once we actually have the updating

00:08:04,400 --> 00:08:08,000
happening you'll be able to see this

00:08:05,680 --> 00:08:08,000
feature

00:08:08,319 --> 00:08:13,599
and basically the idea behind

00:08:12,000 --> 00:08:15,440
the update check is that we want to

00:08:13,599 --> 00:08:18,000
check to see on an

00:08:15,440 --> 00:08:18,879
ongoing basis is your site ready to be

00:08:18,000 --> 00:08:21,280
updated

00:08:18,879 --> 00:08:23,120
um because we don't want you to you know

00:08:21,280 --> 00:08:24,720
know there's a secure maybe there's a

00:08:23,120 --> 00:08:26,800
security

00:08:24,720 --> 00:08:28,479
update happening and you think oh yeah

00:08:26,800 --> 00:08:30,160
my site my automatic update system is

00:08:28,479 --> 00:08:32,479
just going to take care of it

00:08:30,160 --> 00:08:34,560
but maybe your file permissions are

00:08:32,479 --> 00:08:37,519
wrong so it's not going to actually

00:08:34,560 --> 00:08:39,360
the the process that drupal will have

00:08:37,519 --> 00:08:42,640
won't be able to update your site

00:08:39,360 --> 00:08:44,000
or maybe something is wrong with your uh

00:08:42,640 --> 00:08:47,040
between your file system and the

00:08:44,000 --> 00:08:49,120
composer lock file is not in sync

00:08:47,040 --> 00:08:50,560
so various checks and then also it's

00:08:49,120 --> 00:08:54,320
going to create an api

00:08:50,560 --> 00:08:55,519
for that could be used by hosting

00:08:54,320 --> 00:08:59,680
companies or

00:08:55,519 --> 00:08:59,680
custom modules to put in specific checks

00:09:01,360 --> 00:09:06,480
okay and then so these are

00:09:05,200 --> 00:09:08,240
behind the scenes these be tagged

00:09:06,480 --> 00:09:10,080
services they'll have warnings and

00:09:08,240 --> 00:09:10,800
errors pairs will stop and update from

00:09:10,080 --> 00:09:14,320
even

00:09:10,800 --> 00:09:16,320
being attempted the current um patch the

00:09:14,320 --> 00:09:17,519
warnings will not but they're like we'll

00:09:16,320 --> 00:09:18,720
let you know say hey

00:09:17,519 --> 00:09:23,839
you know you're running out of disk

00:09:18,720 --> 00:09:25,600
space you might want to address this

00:09:23,839 --> 00:09:27,519
so let's talk about something that we

00:09:25,600 --> 00:09:28,640
are integrating with this is outside of

00:09:27,519 --> 00:09:31,040
core

00:09:28,640 --> 00:09:32,240
and this is the update framework which

00:09:31,040 --> 00:09:35,360
is a separate um

00:09:32,240 --> 00:09:37,519
specification put out by or

00:09:35,360 --> 00:09:40,399
hosted by the linux foundation and the

00:09:37,519 --> 00:09:43,360
cloud native computing foundation

00:09:40,399 --> 00:09:44,880
and the framework for securing uh

00:09:43,360 --> 00:09:47,440
software updates

00:09:44,880 --> 00:09:47,920
um so basically this is something that

00:09:47,440 --> 00:09:50,880
there are

00:09:47,920 --> 00:09:52,560
a various number other implementations

00:09:50,880 --> 00:09:54,080
it started off i think from the python

00:09:52,560 --> 00:09:55,279
community so there's python

00:09:54,080 --> 00:09:56,720
implementation

00:09:55,279 --> 00:09:59,200
i think there's a roster and go

00:09:56,720 --> 00:10:02,240
implementation in the works

00:09:59,200 --> 00:10:03,680
and so there's a word being a part of

00:10:02,240 --> 00:10:05,519
the larger

00:10:03,680 --> 00:10:07,440
tough community and we're getting a lot

00:10:05,519 --> 00:10:09,519
of feedback now from them

00:10:07,440 --> 00:10:11,839
and we're pushing some ideas up to them

00:10:09,519 --> 00:10:15,360
especially around testing

00:10:11,839 --> 00:10:17,120
so basically let's look at just a couple

00:10:15,360 --> 00:10:19,120
of the tough principles there's there's

00:10:17,120 --> 00:10:20,800
a few um there's a lot more that you can

00:10:19,120 --> 00:10:21,519
go to their site and you have a really

00:10:20,800 --> 00:10:23,360
good

00:10:21,519 --> 00:10:25,440
sort of one-page introduction to what

00:10:23,360 --> 00:10:28,399
their principles are but um

00:10:25,440 --> 00:10:30,320
they consider uh an update system secure

00:10:28,399 --> 00:10:31,519
if it knows about the latest updates and

00:10:30,320 --> 00:10:34,079
the time commander

00:10:31,519 --> 00:10:35,680
is able for any files it downloads

00:10:34,079 --> 00:10:37,360
should be the correct files and no

00:10:35,680 --> 00:10:40,079
harm can result from checking and

00:10:37,360 --> 00:10:41,600
downloading the files

00:10:40,079 --> 00:10:43,519
and the considered trust should be

00:10:41,600 --> 00:10:45,120
granted should not be granted forever

00:10:43,519 --> 00:10:46,240
and trust should expire if it's not

00:10:45,120 --> 00:10:49,519
renewed so this

00:10:46,240 --> 00:10:50,880
there's a meta data system of assigning

00:10:49,519 --> 00:10:54,079
roles

00:10:50,880 --> 00:10:56,399
of trust and the the

00:10:54,079 --> 00:10:57,839
roles expire and then they would you

00:10:56,399 --> 00:10:58,880
know they would be renewed but if you

00:10:57,839 --> 00:11:02,000
can't get

00:10:58,880 --> 00:11:03,760
say access to the to the signed

00:11:02,000 --> 00:11:05,200
system if you can't get access to the

00:11:03,760 --> 00:11:05,760
information you're not going to just

00:11:05,200 --> 00:11:08,480
assume

00:11:05,760 --> 00:11:10,240
that this trust goes on forever um and

00:11:08,480 --> 00:11:12,959
it really focuses on mitigating

00:11:10,240 --> 00:11:14,399
uh key risk so rather than assuming that

00:11:12,959 --> 00:11:16,720
you know the private keys are

00:11:14,399 --> 00:11:17,680
always going to be safe it's a system

00:11:16,720 --> 00:11:19,760
based around

00:11:17,680 --> 00:11:22,399
sort of revoking trust in the keys that

00:11:19,760 --> 00:11:22,399
you've put out

00:11:22,560 --> 00:11:26,240
hey ted i'm going to interrupt for a sec

00:11:24,079 --> 00:11:28,480
so we had a question come in

00:11:26,240 --> 00:11:30,320
maybe you want to address it what about

00:11:28,480 --> 00:11:34,560
composer updates

00:11:30,320 --> 00:11:37,600
if this all includes composer updates

00:11:34,560 --> 00:11:39,040
uh it'd be really amazing yeah so this

00:11:37,600 --> 00:11:42,000
system will do compose

00:11:39,040 --> 00:11:44,000
we'll basically do a composer update uh

00:11:42,000 --> 00:11:46,959
and we'll get to that so it will

00:11:44,000 --> 00:11:47,680
um you know it will run probably be a

00:11:46,959 --> 00:11:51,920
via the

00:11:47,680 --> 00:11:54,240
composer php api a composer update

00:11:51,920 --> 00:11:55,760
and so it won't you know it's not just

00:11:54,240 --> 00:11:57,839
going to download a version of drupal

00:11:55,760 --> 00:11:59,519
and overwrite what you're doing there

00:11:57,839 --> 00:12:01,120
there's other sort of implications for

00:11:59,519 --> 00:12:03,600
that as far as like how your

00:12:01,120 --> 00:12:05,519
particular workflow will go but um and

00:12:03,600 --> 00:12:07,279
we'll get to that in a bit

00:12:05,519 --> 00:12:08,880
just to note this is a bit of like a

00:12:07,279 --> 00:12:10,720
core conversation so if you do have

00:12:08,880 --> 00:12:11,680
questions go ahead and post them at any

00:12:10,720 --> 00:12:14,399
time

00:12:11,680 --> 00:12:16,000
we do have a poll running right now 60

00:12:14,399 --> 00:12:17,519
of you guys have voted

00:12:16,000 --> 00:12:19,920
we'll share the results of it at the end

00:12:17,519 --> 00:12:22,000
of the session so far the the results

00:12:19,920 --> 00:12:25,200
are really really interesting

00:12:22,000 --> 00:12:26,399
okay um so let's look at some of a lot

00:12:25,200 --> 00:12:27,680
of the documentation and the

00:12:26,399 --> 00:12:30,079
specification for

00:12:27,680 --> 00:12:30,880
the the update framework is you know

00:12:30,079 --> 00:12:32,720
documenting

00:12:30,880 --> 00:12:34,880
certain types of attacks that you would

00:12:32,720 --> 00:12:38,000
um that a hacker would try to do

00:12:34,880 --> 00:12:39,760
against an update system and then the

00:12:38,000 --> 00:12:41,120
specification and the client and the

00:12:39,760 --> 00:12:44,720
server workflow

00:12:41,120 --> 00:12:47,440
try to mitigate those attacks so one

00:12:44,720 --> 00:12:48,399
example of attack is a rollback attack

00:12:47,440 --> 00:12:51,360
and it basically

00:12:48,399 --> 00:12:52,720
presents you with older files that

00:12:51,360 --> 00:12:55,200
you've already seen

00:12:52,720 --> 00:12:57,680
but the the client would have no way of

00:12:55,200 --> 00:12:59,680
telling that these

00:12:57,680 --> 00:13:01,680
these files are actually obsolete and it

00:12:59,680 --> 00:13:05,279
gets you to install them

00:13:01,680 --> 00:13:08,639
so if somehow you know a security

00:13:05,279 --> 00:13:11,440
release comes out say a 9.2.7

00:13:08,639 --> 00:13:13,760
but somehow a hacker is able to

00:13:11,440 --> 00:13:15,680
interfere between your connection

00:13:13,760 --> 00:13:18,440
um with where you're trying to get

00:13:15,680 --> 00:13:21,040
updates and can convince you that like

00:13:18,440 --> 00:13:22,639
9.2.6 is the latest update

00:13:21,040 --> 00:13:24,720
and you update it and you think okay

00:13:22,639 --> 00:13:26,160
i've got the latest one and i'm secure

00:13:24,720 --> 00:13:27,760
but because the hacker has sort of

00:13:26,160 --> 00:13:29,600
fooled you into getting the

00:13:27,760 --> 00:13:30,959
second to latest update which doesn't

00:13:29,600 --> 00:13:32,880
have the security fix

00:13:30,959 --> 00:13:35,120
then obviously now the hacker knows that

00:13:32,880 --> 00:13:38,480
your vulnerable to a certain attack that

00:13:35,120 --> 00:13:38,480
was fixed in the next release

00:13:38,880 --> 00:13:42,800
another type of attack is an indefinite

00:13:41,199 --> 00:13:45,279
freeze attack

00:13:42,800 --> 00:13:46,720
so this is where you present files to

00:13:45,279 --> 00:13:49,199
the software update system

00:13:46,720 --> 00:13:50,880
the client has already seen as as a

00:13:49,199 --> 00:13:51,199
result you're just unaware of new files

00:13:50,880 --> 00:13:52,639
so

00:13:51,199 --> 00:13:54,240
it's a similar kind of attack where

00:13:52,639 --> 00:13:56,639
you're basically just

00:13:54,240 --> 00:13:59,040
making sure that you never can see a new

00:13:56,639 --> 00:13:59,040
file

00:14:00,160 --> 00:14:05,519
um so how did we plan to use this um

00:14:03,199 --> 00:14:06,480
is drupal.org we'll use the python

00:14:05,519 --> 00:14:08,720
library

00:14:06,480 --> 00:14:10,000
of the that implements the server side

00:14:08,720 --> 00:14:13,360
of the tough framework

00:14:10,000 --> 00:14:14,079
and it will sign um it will sign the

00:14:13,360 --> 00:14:16,720
updates

00:14:14,079 --> 00:14:17,120
for drupal core and then each drupal

00:14:16,720 --> 00:14:20,320
site

00:14:17,120 --> 00:14:23,839
will have a new um a new dependency

00:14:20,320 --> 00:14:26,800
on the composer plugin for the php

00:14:23,839 --> 00:14:29,519
basically it'll be a composer plugin

00:14:26,800 --> 00:14:32,079
that uses the new php top library

00:14:29,519 --> 00:14:33,760
and so we'll get into a second how that

00:14:32,079 --> 00:14:36,480
works with the new composer 2

00:14:33,760 --> 00:14:37,839
improvements but basically each

00:14:36,480 --> 00:14:40,720
drupal.org site will

00:14:37,839 --> 00:14:43,360
will look for signing verification from

00:14:40,720 --> 00:14:44,959
drupal.org when it gets these updates

00:14:43,360 --> 00:14:46,880
and probably let's see if it's on the

00:14:44,959 --> 00:14:47,360
next slide yeah so probably what will

00:14:46,880 --> 00:14:49,360
happen

00:14:47,360 --> 00:14:50,959
is sometimes on an update or i guess

00:14:49,360 --> 00:14:53,040
often on an update

00:14:50,959 --> 00:14:54,800
we have to update something in our

00:14:53,040 --> 00:14:57,920
vendor dependencies too

00:14:54,800 --> 00:14:59,360
so drupal.org will sort of serve as a

00:14:57,920 --> 00:15:02,639
signing proxy

00:14:59,360 --> 00:15:04,639
for for these vendor packages so

00:15:02,639 --> 00:15:05,279
ultimately the sites will still get

00:15:04,639 --> 00:15:08,320
their

00:15:05,279 --> 00:15:10,560
updates from packages but

00:15:08,320 --> 00:15:12,160
once they do download them they'll look

00:15:10,560 --> 00:15:15,600
and say okay does drupal.org

00:15:12,160 --> 00:15:17,199
have a assigned verification that i got

00:15:15,600 --> 00:15:18,800
the right version of this vendor

00:15:17,199 --> 00:15:22,880
dependency

00:15:18,800 --> 00:15:24,560
ultimately we would love for packages

00:15:22,880 --> 00:15:26,480
this to be something that packages does

00:15:24,560 --> 00:15:28,639
directly um right now

00:15:26,480 --> 00:15:29,920
david strauss and benny mack from the

00:15:28,639 --> 00:15:33,120
type 03

00:15:29,920 --> 00:15:35,920
community david strauss from drupal and

00:15:33,120 --> 00:15:36,320
other communities and benny mack who's

00:15:35,920 --> 00:15:38,000
the

00:15:36,320 --> 00:15:40,000
lead for typeo3 are working on an

00:15:38,000 --> 00:15:42,800
example repository that could be

00:15:40,000 --> 00:15:44,639
something that drupal.org would use and

00:15:42,800 --> 00:15:46,560
something that uh something that the

00:15:44,639 --> 00:15:49,680
type of three community could use for

00:15:46,560 --> 00:15:49,680
server-side signing

00:15:50,560 --> 00:15:56,320
and on the client side we're working

00:15:53,199 --> 00:16:00,959
with the joomla and tecla 3 communities

00:15:56,320 --> 00:16:02,639
for a new client a php tough that would

00:16:00,959 --> 00:16:05,279
that would integrate with the server

00:16:02,639 --> 00:16:07,360
side so basically the way that um

00:16:05,279 --> 00:16:08,399
tuff works the way that the libraries

00:16:07,360 --> 00:16:10,639
that we're using

00:16:08,399 --> 00:16:11,600
work is they create these json files of

00:16:10,639 --> 00:16:14,639
metadata

00:16:11,600 --> 00:16:17,199
so the python server side would

00:16:14,639 --> 00:16:18,240
would would create these json files and

00:16:17,199 --> 00:16:21,279
then the client

00:16:18,240 --> 00:16:23,839
on drupal or joomla or type o3

00:16:21,279 --> 00:16:25,680
would retrieve them to find out

00:16:23,839 --> 00:16:26,639
information about what the latest target

00:16:25,680 --> 00:16:29,759
files are

00:16:26,639 --> 00:16:31,199
to have verification so we don't need a

00:16:29,759 --> 00:16:35,519
php

00:16:31,199 --> 00:16:37,360
server-side version of the um

00:16:35,519 --> 00:16:38,720
of the library because there already is

00:16:37,360 --> 00:16:41,120
one um and

00:16:38,720 --> 00:16:42,000
it just produces json files that the php

00:16:41,120 --> 00:16:46,240
tough

00:16:42,000 --> 00:16:46,240
file uh library can understand

00:16:46,399 --> 00:16:49,440
ted another question yes now is a good

00:16:48,160 --> 00:16:51,040
time so

00:16:49,440 --> 00:16:52,480
it starts with a statement and followed

00:16:51,040 --> 00:16:54,320
up with a question

00:16:52,480 --> 00:16:56,000
i'm not sure i would like a total set

00:16:54,320 --> 00:16:57,920
and forget because i want to be able to

00:16:56,000 --> 00:17:00,240
check and follow what's happening

00:16:57,920 --> 00:17:00,959
have controls to moderate the actions

00:17:00,240 --> 00:17:03,759
for example

00:17:00,959 --> 00:17:04,400
download and test the update email me

00:17:03,759 --> 00:17:06,720
but but

00:17:04,400 --> 00:17:07,919
but to defer applying until it's

00:17:06,720 --> 00:17:10,160
approved

00:17:07,919 --> 00:17:11,520
is this planned for some version of the

00:17:10,160 --> 00:17:13,839
system

00:17:11,520 --> 00:17:14,720
yeah i think um a lot of the actual

00:17:13,839 --> 00:17:18,559
implementation

00:17:14,720 --> 00:17:20,720
on core like how how the user experience

00:17:18,559 --> 00:17:21,760
um what happened is it's not been you

00:17:20,720 --> 00:17:23,360
know we're talking about it but it

00:17:21,760 --> 00:17:24,720
hasn't been determined yet but i would

00:17:23,360 --> 00:17:26,799
definitely think

00:17:24,720 --> 00:17:28,799
that hopefully there would be an option

00:17:26,799 --> 00:17:32,000
to say you know don't

00:17:28,799 --> 00:17:35,440
update but let me know when there are

00:17:32,000 --> 00:17:38,960
when it when it would do an update um

00:17:35,440 --> 00:17:40,799
so and i think some people will probably

00:17:38,960 --> 00:17:42,400
you know one option also is to just

00:17:40,799 --> 00:17:43,120
leave this on say in a staging

00:17:42,400 --> 00:17:44,799
environment

00:17:43,120 --> 00:17:46,720
that is monitoring the updates and maybe

00:17:44,799 --> 00:17:49,360
we'll apply the updates when they

00:17:46,720 --> 00:17:50,720
come come down and maybe email you then

00:17:49,360 --> 00:17:52,480
so that you can

00:17:50,720 --> 00:17:54,320
you know you can see you can test it in

00:17:52,480 --> 00:17:55,039
staging but staging will automatically

00:17:54,320 --> 00:17:57,760
always be

00:17:55,039 --> 00:17:58,840
kept up to date um definitely i don't

00:17:57,760 --> 00:18:02,799
think this is

00:17:58,840 --> 00:18:04,240
um i guess right now we do have like 50

00:18:02,799 --> 00:18:05,679
of the people say yeah i want to set it

00:18:04,240 --> 00:18:07,280
and forget it but i think for a lot of

00:18:05,679 --> 00:18:10,320
sites set up and forget it

00:18:07,280 --> 00:18:10,880
won't work um i think also a lot of the

00:18:10,320 --> 00:18:14,160
work

00:18:10,880 --> 00:18:14,960
that um because we're doing some of this

00:18:14,160 --> 00:18:17,600
work in

00:18:14,960 --> 00:18:18,480
new composer plugins and the php tough

00:18:17,600 --> 00:18:20,880
library you don't

00:18:18,480 --> 00:18:22,000
necessarily to get the benefit of this

00:18:20,880 --> 00:18:23,440
initiative you don't

00:18:22,000 --> 00:18:25,919
in the end you wouldn't necessarily have

00:18:23,440 --> 00:18:27,360
to or to get some of the benefit of this

00:18:25,919 --> 00:18:28,400
initiative you wouldn't necessarily have

00:18:27,360 --> 00:18:30,080
to use

00:18:28,400 --> 00:18:31,200
the automatic update system in core

00:18:30,080 --> 00:18:32,559
maybe you just care about the

00:18:31,200 --> 00:18:35,039
verifications

00:18:32,559 --> 00:18:37,039
maybe you just want a way to update in

00:18:35,039 --> 00:18:39,280
this attempt directory

00:18:37,039 --> 00:18:41,440
but then you'll take care of the rest so

00:18:39,280 --> 00:18:43,919
because we're using this through

00:18:41,440 --> 00:18:45,679
you know composer plugins hopefully in

00:18:43,919 --> 00:18:47,280
our plan then this is not you know

00:18:45,679 --> 00:18:48,559
this is something we're striving for but

00:18:47,280 --> 00:18:49,919
it's not you know for sure that we'll

00:18:48,559 --> 00:18:52,000
hit it is we want

00:18:49,919 --> 00:18:53,039
a lot of this to work from the command

00:18:52,000 --> 00:18:54,880
line so

00:18:53,039 --> 00:18:56,320
that you could do a sort of a new

00:18:54,880 --> 00:18:58,559
command that will provide like

00:18:56,320 --> 00:18:59,360
i'll get into a set like composer stage

00:18:58,559 --> 00:19:01,360
update

00:18:59,360 --> 00:19:02,559
and it will do your update in the temp

00:19:01,360 --> 00:19:05,280
directory and

00:19:02,559 --> 00:19:05,760
if you have the php def library also it

00:19:05,280 --> 00:19:08,840
will

00:19:05,760 --> 00:19:10,400
it will verify your updates from

00:19:08,840 --> 00:19:13,760
drupal.org

00:19:10,400 --> 00:19:14,400
um all right so on to some composer two

00:19:13,760 --> 00:19:18,400
improvements

00:19:14,400 --> 00:19:21,679
to lucas thanks ted uh sure

00:19:18,400 --> 00:19:23,440
so composer two came out and was at the

00:19:21,679 --> 00:19:26,960
end of august or beginning of september

00:19:23,440 --> 00:19:29,039
fairly recently and

00:19:26,960 --> 00:19:31,200
the the improvements that we get with

00:19:29,039 --> 00:19:33,120
that are a bit two-fold

00:19:31,200 --> 00:19:36,640
uh we'll first start with the post

00:19:33,120 --> 00:19:36,640
download event and dive into that

00:19:37,200 --> 00:19:40,960
the post download event is something

00:19:40,559 --> 00:19:43,200
that

00:19:40,960 --> 00:19:44,240
came out of some early proof of concept

00:19:43,200 --> 00:19:46,720
work last

00:19:44,240 --> 00:19:48,000
year as we were prepping for the version

00:19:46,720 --> 00:19:51,039
two of

00:19:48,000 --> 00:19:53,679
the auto update

00:19:51,039 --> 00:19:55,440
module and the version two is then

00:19:53,679 --> 00:19:58,799
what's going to go into core

00:19:55,440 --> 00:20:01,679
so version one has a as a you know this

00:19:58,799 --> 00:20:05,440
is a bit technical but we had a way to

00:20:01,679 --> 00:20:06,799
check before we download an artifact

00:20:05,440 --> 00:20:08,559
but that doesn't really help us in our

00:20:06,799 --> 00:20:09,440
case here because we want to download

00:20:08,559 --> 00:20:12,559
this thing

00:20:09,440 --> 00:20:14,240
and before we move it into your vendor

00:20:12,559 --> 00:20:17,919
folder and move it into

00:20:14,240 --> 00:20:19,679
slash web slash core slash web slash

00:20:17,919 --> 00:20:21,760
module slash contrib we want to be able

00:20:19,679 --> 00:20:22,960
to inspect and do all of these things

00:20:21,760 --> 00:20:26,000
that tough does to

00:20:22,960 --> 00:20:27,200
to give us the assurance we we caught

00:20:26,000 --> 00:20:30,640
out at the perfect time

00:20:27,200 --> 00:20:33,039
because we were able to include inside

00:20:30,640 --> 00:20:35,440
of composer version 2

00:20:33,039 --> 00:20:36,159
this new event that allows us to inspect

00:20:35,440 --> 00:20:38,880
this while it's

00:20:36,159 --> 00:20:40,240
still in the temp folder before it's

00:20:38,880 --> 00:20:43,360
anywhere close to

00:20:40,240 --> 00:20:46,240
a place where you could have nefarious

00:20:43,360 --> 00:20:48,640
actions done on it from the worldwide

00:20:46,240 --> 00:20:50,080
from the from the web so this is

00:20:48,640 --> 00:20:52,480
you know this is the first thing we did

00:20:50,080 --> 00:20:54,480
um the the

00:20:52,480 --> 00:20:56,799
proof of concept used our earlier

00:20:54,480 --> 00:21:00,480
implementation using php signify

00:20:56,799 --> 00:21:03,360
from version from version one but um

00:21:00,480 --> 00:21:04,000
we'll be re-implementing that in drupal

00:21:03,360 --> 00:21:07,440
court

00:21:04,000 --> 00:21:10,400
using tough another benefit that

00:21:07,440 --> 00:21:11,120
i think has gotten a lot more uh blog

00:21:10,400 --> 00:21:13,840
posts

00:21:11,120 --> 00:21:15,440
one here from mike onyelo uh is around

00:21:13,840 --> 00:21:18,559
the performance

00:21:15,440 --> 00:21:20,640
memory utilization so

00:21:18,559 --> 00:21:22,799
i put it in bold and sort of air quotes

00:21:20,640 --> 00:21:25,039
here memory utilization

00:21:22,799 --> 00:21:26,960
averaged to be about 30 meg a peak of

00:21:25,039 --> 00:21:30,000
just under 100 megabytes

00:21:26,960 --> 00:21:31,120
for a site that had like 100 contrib

00:21:30,000 --> 00:21:34,720
modules

00:21:31,120 --> 00:21:36,400
and it took 1.27 seconds to run

00:21:34,720 --> 00:21:38,640
so we we're dealing with two things here

00:21:36,400 --> 00:21:39,600
one and a shared hosting and a small

00:21:38,640 --> 00:21:41,919
hosting

00:21:39,600 --> 00:21:42,840
environment where you've only got 128

00:21:41,919 --> 00:21:46,080
meg

00:21:42,840 --> 00:21:49,919
256 most sites

00:21:46,080 --> 00:21:51,360
nowadays have somewhere between 256 and

00:21:49,919 --> 00:21:54,640
00:21:51,360 --> 00:21:56,960
of memory we felt that

00:21:54,640 --> 00:21:59,039
100 meg or less is great so that helps

00:21:56,960 --> 00:22:01,280
us with the memory front

00:21:59,039 --> 00:22:03,919
closely related to that also is time so

00:22:01,280 --> 00:22:07,520
we deal with this this problem in php of

00:22:03,919 --> 00:22:09,039
timeouts and the default is 30 seconds

00:22:07,520 --> 00:22:10,799
we we have to make sure that whatever

00:22:09,039 --> 00:22:13,200
we're doing here

00:22:10,799 --> 00:22:14,960
happens fast enough that we can do it

00:22:13,200 --> 00:22:17,520
within

00:22:14,960 --> 00:22:18,480
a request that's reasonable for most

00:22:17,520 --> 00:22:21,919
hosts

00:22:18,480 --> 00:22:24,000
which at 1.27 seconds

00:22:21,919 --> 00:22:25,840
even if that triples or you know is 10

00:22:24,000 --> 00:22:27,120
times worse we're still probably have

00:22:25,840 --> 00:22:30,080
enough room to

00:22:27,120 --> 00:22:32,480
to to work with so two big improvements

00:22:30,080 --> 00:22:35,520
one is being able to inspect things

00:22:32,480 --> 00:22:36,640
uh in the the post download and the next

00:22:35,520 --> 00:22:38,960
one is memory details

00:22:36,640 --> 00:22:40,880
really some really great gains using

00:22:38,960 --> 00:22:42,559
composer 2.

00:22:40,880 --> 00:22:44,159
thanks so i'm going to answer a couple

00:22:42,559 --> 00:22:46,159
of questions uh chris

00:22:44,159 --> 00:22:47,440
asked uh the initiative name indicates

00:22:46,159 --> 00:22:49,200
core but does the

00:22:47,440 --> 00:22:51,360
this potentially cover contrib sounds

00:22:49,200 --> 00:22:54,799
like it from the conversation thus far

00:22:51,360 --> 00:22:56,880
so i think the idea for the um

00:22:54,799 --> 00:22:58,240
there's nothing we're technically doing

00:22:56,880 --> 00:23:01,760
that would

00:22:58,240 --> 00:23:03,520
prevent um contrib updates because

00:23:01,760 --> 00:23:05,280
obviously we're going to be sometimes

00:23:03,520 --> 00:23:08,240
we're going to have have to even update

00:23:05,280 --> 00:23:10,400
vendor dependencies as a side effect but

00:23:08,240 --> 00:23:11,360
i think the policy so far is that we're

00:23:10,400 --> 00:23:15,520
only going to

00:23:11,360 --> 00:23:18,799
um include patch updates for

00:23:15,520 --> 00:23:22,080
uh for core and i think that

00:23:18,799 --> 00:23:23,120
is more like a roll out kind of let's

00:23:22,080 --> 00:23:25,280
see how it goes

00:23:23,120 --> 00:23:26,799
implementation then we don't know how to

00:23:25,280 --> 00:23:28,320
do contrib

00:23:26,799 --> 00:23:30,000
because you know basic we're hopefully

00:23:28,320 --> 00:23:30,960
sort of going to be making these sort of

00:23:30,000 --> 00:23:33,200
generic

00:23:30,960 --> 00:23:34,480
plugins that will work with composer

00:23:33,200 --> 00:23:37,120
commands or we'll sort of

00:23:34,480 --> 00:23:38,000
make a new command that'll wrap composer

00:23:37,120 --> 00:23:42,000
update if we

00:23:38,000 --> 00:23:44,080
do the composer staged sort of method

00:23:42,000 --> 00:23:45,679
so we could easily point that at a

00:23:44,080 --> 00:23:50,240
contrib module

00:23:45,679 --> 00:23:53,279
but i think the idea is we um

00:23:50,240 --> 00:23:55,120
it's just you know it is kind of kind of

00:23:53,279 --> 00:23:56,400
dangerous to do stuff into production

00:23:55,120 --> 00:23:58,799
and also with

00:23:56,400 --> 00:23:59,840
contrib we have less knowledge about

00:23:58,799 --> 00:24:02,159
okay is

00:23:59,840 --> 00:24:03,120
is there some manual step that might be

00:24:02,159 --> 00:24:06,559
involved

00:24:03,120 --> 00:24:10,240
so the you know the plan is i think

00:24:06,559 --> 00:24:12,799
to just do patch level updates for core

00:24:10,240 --> 00:24:14,559
and then move on to see like okay maybe

00:24:12,799 --> 00:24:17,600
everybody wants it for contrib

00:24:14,559 --> 00:24:20,799
and you know see if that's possible

00:24:17,600 --> 00:24:21,679
i fully expect that somebody will use

00:24:20,799 --> 00:24:24,640
the api

00:24:21,679 --> 00:24:25,279
to start updating to update contrib but

00:24:24,640 --> 00:24:28,799
it

00:24:25,279 --> 00:24:30,720
um modules in any contrib module but

00:24:28,799 --> 00:24:32,000
i don't see it happening in core right

00:24:30,720 --> 00:24:34,159
away but i think that's sort

00:24:32,000 --> 00:24:35,919
of to be determined to see how the how

00:24:34,159 --> 00:24:38,799
it goes with core first

00:24:35,919 --> 00:24:39,840
um and and the part of it is uh when we

00:24:38,799 --> 00:24:42,640
say core we're saying

00:24:39,840 --> 00:24:43,039
this is a feature that's going into core

00:24:42,640 --> 00:24:45,440
as

00:24:43,039 --> 00:24:46,880
composed to our first rendition which

00:24:45,440 --> 00:24:50,400
was a contrib module

00:24:46,880 --> 00:24:51,440
yeah um and then hugo asked a question

00:24:50,400 --> 00:24:52,720
about what are the similarities and

00:24:51,440 --> 00:24:55,840
differences for the

00:24:52,720 --> 00:24:58,320
tough protection coming uh

00:24:55,840 --> 00:25:00,720
to the picon python community's package

00:24:58,320 --> 00:25:03,039
index i don't actually i wrote my first

00:25:00,720 --> 00:25:05,600
python code as part of this initiative

00:25:03,039 --> 00:25:08,400
so i'm very new to the python community

00:25:05,600 --> 00:25:09,600
um we do have a buff after this where

00:25:08,400 --> 00:25:10,720
there may be people that are more

00:25:09,600 --> 00:25:13,440
knowledgeable about it

00:25:10,720 --> 00:25:14,720
or hope hopefully they probably can't be

00:25:13,440 --> 00:25:17,200
less knowledgeable about the

00:25:14,720 --> 00:25:18,080
tough our python community than me but

00:25:17,200 --> 00:25:21,279
basically

00:25:18,080 --> 00:25:24,159
i know that um i think pip is

00:25:21,279 --> 00:25:24,799
a new python package manager and there

00:25:24,159 --> 00:25:28,559
is a

00:25:24,799 --> 00:25:32,000
um there is a

00:25:28,559 --> 00:25:34,799
proposal to use the python tuff library

00:25:32,000 --> 00:25:36,559
to secure their updates in the pip

00:25:34,799 --> 00:25:39,760
update manager too

00:25:36,559 --> 00:25:43,440
um and then there is the uh will this

00:25:39,760 --> 00:25:45,600
modify the composer json file

00:25:43,440 --> 00:25:47,679
probably though it definitely would

00:25:45,600 --> 00:25:50,080
update the composer lock file

00:25:47,679 --> 00:25:51,039
and because you would have a new version

00:25:50,080 --> 00:25:52,720
depending on

00:25:51,039 --> 00:25:54,400
how we you know if you just do a

00:25:52,720 --> 00:25:56,880
composer update and you don't change

00:25:54,400 --> 00:25:57,679
your requirements then potentially your

00:25:56,880 --> 00:26:00,559
composer

00:25:57,679 --> 00:26:01,919
json might not change but if say we

00:26:00,559 --> 00:26:04,320
wanted to

00:26:01,919 --> 00:26:06,320
say okay we're going to pin it to this

00:26:04,320 --> 00:26:09,760
particular security release then yes the

00:26:06,320 --> 00:26:13,039
composer json file would change

00:26:09,760 --> 00:26:14,720
so that i think is to be determined but

00:26:13,039 --> 00:26:17,520
at the very least it would change your

00:26:14,720 --> 00:26:20,400
composer lock file

00:26:17,520 --> 00:26:21,279
um so this is a sort of example of one

00:26:20,400 --> 00:26:24,960
of the problems

00:26:21,279 --> 00:26:26,640
of um you know we have your drupal site

00:26:24,960 --> 00:26:27,360
and we have a visitor and the visitor

00:26:26,640 --> 00:26:29,120
wants to

00:26:27,360 --> 00:26:30,720
keep visiting your site but also you

00:26:29,120 --> 00:26:32,799
want to update it in

00:26:30,720 --> 00:26:34,000
production if you're using the automatic

00:26:32,799 --> 00:26:36,080
updates

00:26:34,000 --> 00:26:37,600
uh module when it's eventually there in

00:26:36,080 --> 00:26:40,559
that manner so

00:26:37,600 --> 00:26:41,840
our current plan is that we would um you

00:26:40,559 --> 00:26:44,720
know use composer

00:26:41,840 --> 00:26:46,720
to ins to do the update in a stage

00:26:44,720 --> 00:26:48,480
directory and we're just sort of looking

00:26:46,720 --> 00:26:51,360
at how this would be

00:26:48,480 --> 00:26:53,840
possible our first idea on the composer

00:26:51,360 --> 00:26:57,200
route was actually to have a plug-in

00:26:53,840 --> 00:26:59,360
that ran i forget what it um

00:26:57,200 --> 00:27:01,600
ran i think there's like a activate

00:26:59,360 --> 00:27:03,360
event in composer and basically we would

00:27:01,600 --> 00:27:05,039
sort of swap out

00:27:03,360 --> 00:27:06,880
some classes or re-initialize some

00:27:05,039 --> 00:27:08,400
classes and let them know that there's a

00:27:06,880 --> 00:27:11,600
new directory

00:27:08,400 --> 00:27:13,919
vendor directory to install to but that

00:27:11,600 --> 00:27:15,600
method seemed kind of fragile because if

00:27:13,919 --> 00:27:18,159
composer changed something

00:27:15,600 --> 00:27:19,679
that we didn't know about in its first

00:27:18,159 --> 00:27:23,679
sort of bootstrapping

00:27:19,679 --> 00:27:26,080
and it assigned the vendor it

00:27:23,679 --> 00:27:27,600
notified this object of the vendor

00:27:26,080 --> 00:27:28,880
directory and we didn't get a chance to

00:27:27,600 --> 00:27:32,000
update it then they'll be

00:27:28,880 --> 00:27:33,520
part of sort of composer's

00:27:32,000 --> 00:27:35,440
foundation that knows about the new

00:27:33,520 --> 00:27:37,360
vendor directory in part that doesn't

00:27:35,440 --> 00:27:39,360
so our current thinking or current sort

00:27:37,360 --> 00:27:42,480
of prototype that we're looking at is a

00:27:39,360 --> 00:27:44,240
composer command that would

00:27:42,480 --> 00:27:46,159
be a new command so you can define new

00:27:44,240 --> 00:27:48,000
commands and composer plugins

00:27:46,159 --> 00:27:49,520
that would be a sort of state i think

00:27:48,000 --> 00:27:50,640
we're calling it staged update and it

00:27:49,520 --> 00:27:52,880
would sort of wrap

00:27:50,640 --> 00:27:54,000
update to where it would say okay i'm

00:27:52,880 --> 00:27:56,799
going to copy

00:27:54,000 --> 00:27:58,159
um things over into this temp directory

00:27:56,799 --> 00:28:00,640
and then do the update

00:27:58,159 --> 00:28:01,600
um there's a lot of sort of like

00:28:00,640 --> 00:28:05,279
complications

00:28:01,600 --> 00:28:08,320
in either method because

00:28:05,279 --> 00:28:11,120
it's hard to tell um what

00:28:08,320 --> 00:28:12,559
needs to be copied over obviously you

00:28:11,120 --> 00:28:15,520
don't want to copy over the

00:28:12,559 --> 00:28:16,000
site's site's default files directory

00:28:15,520 --> 00:28:18,960
because that's

00:28:16,000 --> 00:28:21,039
not something that composer manages and

00:28:18,960 --> 00:28:23,919
you don't want to copy it back

00:28:21,039 --> 00:28:25,039
because something could be being updated

00:28:23,919 --> 00:28:27,679
while you're

00:28:25,039 --> 00:28:28,399
are added by user while you're updating

00:28:27,679 --> 00:28:30,159
so

00:28:28,399 --> 00:28:31,760
that's a really obvious example we know

00:28:30,159 --> 00:28:33,440
about but you know all

00:28:31,760 --> 00:28:34,960
drupal sites are so different you know

00:28:33,440 --> 00:28:36,640
there might be other stuff that

00:28:34,960 --> 00:28:38,240
do we know whether this is composer

00:28:36,640 --> 00:28:41,679
managed or this is uh

00:28:38,240 --> 00:28:44,320
really like site content um so

00:28:41,679 --> 00:28:45,760
um that's something we're just starting

00:28:44,320 --> 00:28:47,200
to look at so we don't really have the

00:28:45,760 --> 00:28:48,720
solutions to it now but we know it's

00:28:47,200 --> 00:28:51,520
sort of a thorny problem

00:28:48,720 --> 00:28:53,039
but after that it would um after

00:28:51,520 --> 00:28:55,360
everything's okay and it says

00:28:53,039 --> 00:28:56,159
uh you know this can update happened as

00:28:55,360 --> 00:28:59,039
expected

00:28:56,159 --> 00:29:00,399
then we would move it over and actually

00:28:59,039 --> 00:29:02,159
hopefully copy over

00:29:00,399 --> 00:29:04,640
only the particular things that we need

00:29:02,159 --> 00:29:06,799
to copy another thing of the

00:29:04,640 --> 00:29:08,720
com complications here is there could be

00:29:06,799 --> 00:29:10,000
edge cases where when you update via

00:29:08,720 --> 00:29:11,520
composer and you say okay i

00:29:10,000 --> 00:29:14,080
just want to update core to this next

00:29:11,520 --> 00:29:16,799
version it actually could force a

00:29:14,080 --> 00:29:18,399
contrib module to update because it's

00:29:16,799 --> 00:29:20,000
the old one was pinned to a particular

00:29:18,399 --> 00:29:21,840
version that you don't have anymore

00:29:20,000 --> 00:29:23,200
and you know i don't know composer's

00:29:21,840 --> 00:29:26,240
weird so maybe

00:29:23,200 --> 00:29:28,000
you have another version the next

00:29:26,240 --> 00:29:29,440
version of that contrib module

00:29:28,000 --> 00:29:31,120
is the only one that would work with

00:29:29,440 --> 00:29:32,480
this new security update because of

00:29:31,120 --> 00:29:34,080
requirements

00:29:32,480 --> 00:29:35,440
so that's not very likely to happen but

00:29:34,080 --> 00:29:37,200
we sort of have to think about these

00:29:35,440 --> 00:29:39,679
edge cases and what we would do in that

00:29:37,200 --> 00:29:42,720
situation so if coors policy

00:29:39,679 --> 00:29:45,200
at first is not to support um

00:29:42,720 --> 00:29:47,039
can trip updates but updating to drupal

00:29:45,200 --> 00:29:49,679
core forces that can trip update

00:29:47,039 --> 00:29:50,399
what do we do and i think we have an

00:29:49,679 --> 00:29:53,600
issue

00:29:50,399 --> 00:29:55,120
out there that just basically says okay

00:29:53,600 --> 00:29:56,159
what should our policy be in that

00:29:55,120 --> 00:29:58,080
situation

00:29:56,159 --> 00:29:59,360
um because i think technically it's not

00:29:58,080 --> 00:30:00,640
a very well

00:29:59,360 --> 00:30:02,159
this is a difficult space but that

00:30:00,640 --> 00:30:04,159
particular problem i don't think is very

00:30:02,159 --> 00:30:05,840
difficult we could just say yeah if you

00:30:04,159 --> 00:30:08,080
update a contrib module in the process

00:30:05,840 --> 00:30:10,000
it's fine or we could say no

00:30:08,080 --> 00:30:12,000
you know our course policy is not

00:30:10,000 --> 00:30:13,360
support contrib right now so

00:30:12,000 --> 00:30:15,039
we're going to send you a notification

00:30:13,360 --> 00:30:16,320
and say sorry you know we can't apply

00:30:15,039 --> 00:30:19,520
this update because it would

00:30:16,320 --> 00:30:20,559
also update this contrib module and it

00:30:19,520 --> 00:30:22,320
also could update

00:30:20,559 --> 00:30:24,960
say your custom module if you have like

00:30:22,320 --> 00:30:27,039
a private package just maybe only your

00:30:24,960 --> 00:30:29,200
next version of the custom module would

00:30:27,039 --> 00:30:32,240
um would work in this case

00:30:29,200 --> 00:30:33,679
um so roll back

00:30:32,240 --> 00:30:35,600
yes we're going to get to that in a

00:30:33,679 --> 00:30:38,960
second

00:30:35,600 --> 00:30:41,120
um okay so

00:30:38,960 --> 00:30:43,360
so we considered a couple options for

00:30:41,120 --> 00:30:46,320
like this sort of uninterrupted update

00:30:43,360 --> 00:30:47,120
um method our first thing that we

00:30:46,320 --> 00:30:49,679
considered

00:30:47,120 --> 00:30:50,720
and i think if you'd seen previous

00:30:49,679 --> 00:30:53,120
initiative updates

00:30:50,720 --> 00:30:54,559
we were considering this a b bootloader

00:30:53,120 --> 00:30:56,720
and the idea was that

00:30:54,559 --> 00:30:57,760
uh we would do this sort of composer

00:30:56,720 --> 00:31:00,960
install into a b

00:30:57,760 --> 00:31:02,559
directory and after the update index.php

00:31:00,960 --> 00:31:04,880
would switch to the speed directory as

00:31:02,559 --> 00:31:08,000
her new drupal site

00:31:04,880 --> 00:31:09,760
we haven't ruled that out completely but

00:31:08,000 --> 00:31:11,360
our current idea with this composer

00:31:09,760 --> 00:31:13,440
staged update that i was describing

00:31:11,360 --> 00:31:15,679
before

00:31:13,440 --> 00:31:18,000
a lot of basically we would need to

00:31:15,679 --> 00:31:19,840
solve a lot of the same problems so

00:31:18,000 --> 00:31:21,919
potentially we could do the composer

00:31:19,840 --> 00:31:22,880
staged update it would work work great

00:31:21,919 --> 00:31:24,399
and then say okay we're going to

00:31:22,880 --> 00:31:25,120
actually add the bootloader on top of

00:31:24,399 --> 00:31:27,200
that

00:31:25,120 --> 00:31:29,279
but right now we're sort of thinking of

00:31:27,200 --> 00:31:32,960
the you know the staged update

00:31:29,279 --> 00:31:34,480
as the a way to go

00:31:32,960 --> 00:31:36,159
and there was a question from chris

00:31:34,480 --> 00:31:37,519
about rollbacks but now i don't see it

00:31:36,159 --> 00:31:39,200
anymore

00:31:37,519 --> 00:31:41,919
oh i answered it and said we're going to

00:31:39,200 --> 00:31:44,480
answer uh address it in about two slides

00:31:41,919 --> 00:31:46,799
okay uh lucas do you want to talk about

00:31:44,480 --> 00:31:48,640
the database update telemath

00:31:46,799 --> 00:31:49,919
yes i would love to so we we dealt with

00:31:48,640 --> 00:31:52,159
this very briefly

00:31:49,919 --> 00:31:52,960
in the contrib module that came out with

00:31:52,159 --> 00:31:58,399
this

00:31:52,960 --> 00:31:58,399
uh there's a handful of issues with it

00:31:58,840 --> 00:32:02,399
um

00:32:00,799 --> 00:32:03,919
one of it is we don't really know if

00:32:02,399 --> 00:32:06,480
you've got a database update

00:32:03,919 --> 00:32:08,799
until we actually try to update your

00:32:06,480 --> 00:32:12,320
site so a bit of a catch-22

00:32:08,799 --> 00:32:15,760
chicken and egg types problem uh

00:32:12,320 --> 00:32:19,039
so to add on over and above that

00:32:15,760 --> 00:32:22,880
we've got issues like class loading

00:32:19,039 --> 00:32:22,880
so if you update a class

00:32:23,600 --> 00:32:30,320
with your composer update process

00:32:27,279 --> 00:32:33,760
our staged update process

00:32:30,320 --> 00:32:36,480
um there might be some issues where

00:32:33,760 --> 00:32:38,960
we have to call off to exec to to some

00:32:36,480 --> 00:32:43,279
type of drushlike cli utility

00:32:38,960 --> 00:32:46,000
because if we've already loaded classfu

00:32:43,279 --> 00:32:47,440
earlier on an older version and we try

00:32:46,000 --> 00:32:50,480
to load classfu

00:32:47,440 --> 00:32:51,440
again it's going to get the older

00:32:50,480 --> 00:32:54,880
version

00:32:51,440 --> 00:32:57,760
and we're not going to have the features

00:32:54,880 --> 00:32:59,360
we also have the added issue of some

00:32:57,760 --> 00:33:02,159
sites by policy will say

00:32:59,360 --> 00:33:03,679
yes run them all i don't care take my

00:33:02,159 --> 00:33:07,440
site down

00:33:03,679 --> 00:33:08,799
or others will say well

00:33:07,440 --> 00:33:12,799
i don't know that i want to run an

00:33:08,799 --> 00:33:14,320
update if there's a database update

00:33:12,799 --> 00:33:16,320
you know the first camp might be like on

00:33:14,320 --> 00:33:18,159
a staging site the second one might be

00:33:16,320 --> 00:33:19,679
i i don't have a staging site i'm on a

00:33:18,159 --> 00:33:21,919
small shared hosting

00:33:19,679 --> 00:33:24,559
i can't afford to have my site go down

00:33:21,919 --> 00:33:26,960
so roll me back uh and how do we

00:33:24,559 --> 00:33:29,679
educate so you know this is a

00:33:26,960 --> 00:33:31,760
non-technical problem in many ways

00:33:29,679 --> 00:33:33,840
we have to figure out the best way to

00:33:31,760 --> 00:33:36,799
communicate the pros and cons

00:33:33,840 --> 00:33:39,279
of how to deal with these these data up

00:33:36,799 --> 00:33:42,159
database updates that come with drupal

00:33:39,279 --> 00:33:43,279
contrib and core uh itself the good

00:33:42,159 --> 00:33:45,440
thing

00:33:43,279 --> 00:33:47,840
if it is a good thing i think it is is

00:33:45,440 --> 00:33:51,200
that the most highly critical

00:33:47,840 --> 00:33:53,840
updates that come are security

00:33:51,200 --> 00:33:55,360
and if we're dealing only with core

00:33:53,840 --> 00:33:58,399
security things

00:33:55,360 --> 00:34:02,000
uh there is

00:33:58,399 --> 00:34:04,240
not a recently

00:34:02,000 --> 00:34:05,600
there is not a recent core update that

00:34:04,240 --> 00:34:08,399
is required to also do

00:34:05,600 --> 00:34:10,639
a database update at the same time so

00:34:08,399 --> 00:34:14,800
we'll have options in this module

00:34:10,639 --> 00:34:16,879
that say run the security updates

00:34:14,800 --> 00:34:18,560
right and you can probably be pretty

00:34:16,879 --> 00:34:20,079
sure that you'll get the security

00:34:18,560 --> 00:34:23,599
updates regardless of whatever

00:34:20,079 --> 00:34:25,839
you choose for your database so a lot of

00:34:23,599 --> 00:34:26,639
tough problems there and thoughts and

00:34:25,839 --> 00:34:28,879
feedback

00:34:26,639 --> 00:34:30,879
obviously bring those to the buff that

00:34:28,879 --> 00:34:32,320
is going to start here in a few minutes

00:34:30,879 --> 00:34:34,000
yeah so chris had a question about you

00:34:32,320 --> 00:34:36,240
know could we use uh d.o

00:34:34,000 --> 00:34:38,320
infrastructure to inspect the install

00:34:36,240 --> 00:34:40,240
file and figure out if there are updates

00:34:38,320 --> 00:34:43,520
um yeah i think that's sort of open

00:34:40,240 --> 00:34:44,879
question um you can't

00:34:43,520 --> 00:34:46,720
because you don't know what patch has

00:34:44,879 --> 00:34:48,960
been installed on your specific site

00:34:46,720 --> 00:34:51,200
yeah you don't know whether or not

00:34:48,960 --> 00:34:54,800
they've already installed or applied

00:34:51,200 --> 00:34:57,599
uh an update uh with a similar

00:34:54,800 --> 00:34:57,599
with the same number

00:34:58,400 --> 00:35:02,880
it's just not really possible especially

00:35:00,880 --> 00:35:08,920
if you start jumping versions

00:35:02,880 --> 00:35:12,480
uh from version like 9.0.1 to

00:35:08,920 --> 00:35:14,400
9.1.0 we're jumping like six versions uh

00:35:12,480 --> 00:35:18,000
minor versions yes but

00:35:14,400 --> 00:35:19,760
um depending on the state of the site

00:35:18,000 --> 00:35:21,040
you might not know what updates have

00:35:19,760 --> 00:35:24,240
been applied or

00:35:21,040 --> 00:35:26,079
um not been applied it's on a per for

00:35:24,240 --> 00:35:30,000
site basis really

00:35:26,079 --> 00:35:32,960
yeah so long story short it's a

00:35:30,000 --> 00:35:33,520
hard problem um hopefully with the most

00:35:32,960 --> 00:35:35,680
critical

00:35:33,520 --> 00:35:36,560
need for this with the security updates

00:35:35,680 --> 00:35:38,400
um it

00:35:36,560 --> 00:35:40,240
won't be an issue and i think also if we

00:35:38,400 --> 00:35:42,400
have this i think

00:35:40,240 --> 00:35:44,160
i think already there's a real push with

00:35:42,400 --> 00:35:46,560
security

00:35:44,160 --> 00:35:48,240
updates to not include a database update

00:35:46,560 --> 00:35:51,599
if we can avoid it

00:35:48,240 --> 00:35:53,760
um okay so let's go

00:35:51,599 --> 00:35:55,440
to patch sites lucas do you want me is

00:35:53,760 --> 00:35:58,960
this what's your site too

00:35:55,440 --> 00:36:02,400
yeah so a couple like you know

00:35:58,960 --> 00:36:04,480
throw this out to the the to the people

00:36:02,400 --> 00:36:06,400
questions here so what do we do when we

00:36:04,480 --> 00:36:10,240
have a site that

00:36:06,400 --> 00:36:12,880
a developer goes and does a quick fix

00:36:10,240 --> 00:36:13,920
or they they patch it um by using the

00:36:12,880 --> 00:36:18,480
patch command

00:36:13,920 --> 00:36:22,560
um we can't control what sites are doing

00:36:18,480 --> 00:36:26,880
uh so how do we handle that uh

00:36:22,560 --> 00:36:29,839
previously we were using a uh

00:36:26,880 --> 00:36:32,320
utility uh in version one that could

00:36:29,839 --> 00:36:33,200
give us very high level of confidence

00:36:32,320 --> 00:36:35,200
that

00:36:33,200 --> 00:36:36,480
the the site is not hacked and we had uh

00:36:35,200 --> 00:36:38,560
warnings

00:36:36,480 --> 00:36:40,000
saying that your your site is not not

00:36:38,560 --> 00:36:44,240
patched uh

00:36:40,000 --> 00:36:46,400
or or if it was patched uh are hacked um

00:36:44,240 --> 00:36:48,400
how because of the way tough does its

00:36:46,400 --> 00:36:51,359
updates and with composer

00:36:48,400 --> 00:36:52,800
it it got very difficult when you dealt

00:36:51,359 --> 00:36:56,160
with a composer managed

00:36:52,800 --> 00:36:59,200
site to know whether or not

00:36:56,160 --> 00:37:02,640
a vendor folder is

00:36:59,200 --> 00:37:03,680
is what you thought it was how do you

00:37:02,640 --> 00:37:06,800
handle

00:37:03,680 --> 00:37:08,079
vendor files that have been patched

00:37:06,800 --> 00:37:10,800
so then the next question so that's

00:37:08,079 --> 00:37:14,000
question number one question number two

00:37:10,800 --> 00:37:14,480
tough problem is do we or how do we

00:37:14,000 --> 00:37:16,720
support

00:37:14,480 --> 00:37:19,040
c wigan's composer patches do we just

00:37:16,720 --> 00:37:21,440
say yeah let's support it

00:37:19,040 --> 00:37:24,320
and that would be the you know us

00:37:21,440 --> 00:37:27,760
reaching out to a non-core

00:37:24,320 --> 00:37:30,480
uh set of software and

00:37:27,760 --> 00:37:31,040
sort of kind of assuming that it might

00:37:30,480 --> 00:37:34,240
be there

00:37:31,040 --> 00:37:37,359
and then providing scaffolding

00:37:34,240 --> 00:37:38,240
to to appropriately fail composer

00:37:37,359 --> 00:37:42,960
install

00:37:38,240 --> 00:37:44,960
if the patches fail to install and apply

00:37:42,960 --> 00:37:47,920
um so again some more questions so how

00:37:44,960 --> 00:37:49,200
do we deal with composer patches

00:37:47,920 --> 00:37:50,480
all right cool so i'm gonna move on

00:37:49,200 --> 00:37:51,760
there's a couple questions about

00:37:50,480 --> 00:37:53,599
database updates

00:37:51,760 --> 00:37:55,119
and i think there is some good points in

00:37:53,599 --> 00:37:56,800
the questions um

00:37:55,119 --> 00:37:58,079
if people could come to the buff just

00:37:56,800 --> 00:37:59,520
because they're running short in time

00:37:58,079 --> 00:38:01,599
but also i think

00:37:59,520 --> 00:38:02,640
i think the questions point to you know

00:38:01,599 --> 00:38:04,800
we may need

00:38:02,640 --> 00:38:06,960
changes in the update system or in

00:38:04,800 --> 00:38:09,520
making releases on drupal.org to sort of

00:38:06,960 --> 00:38:13,280
define this but

00:38:09,520 --> 00:38:15,200
definitely definitely a hard problem

00:38:13,280 --> 00:38:16,480
lucas do you want to take implications

00:38:15,200 --> 00:38:19,440
or

00:38:16,480 --> 00:38:20,320
the question um says what do we do with

00:38:19,440 --> 00:38:23,280
sites that

00:38:20,320 --> 00:38:24,320
uh are using get want to install this

00:38:23,280 --> 00:38:25,440
but they've already checked in their

00:38:24,320 --> 00:38:27,359
vendor folder

00:38:25,440 --> 00:38:30,240
or maybe they've checked in core contrib

00:38:27,359 --> 00:38:30,240
modules so they've got

00:38:30,839 --> 00:38:34,720
dependencies that aren't get how do we

00:38:33,839 --> 00:38:37,440
handle those

00:38:34,720 --> 00:38:39,920
do we need to handle those i think i

00:38:37,440 --> 00:38:42,640
think the obvious answer is probably not

00:38:39,920 --> 00:38:44,079
but just something to think about we

00:38:42,640 --> 00:38:47,680
deal with a very very

00:38:44,079 --> 00:38:50,880
very very very diverse set of sites

00:38:47,680 --> 00:38:52,800
uh and who's to say that not

00:38:50,880 --> 00:38:54,560
that some site doesn't have some type of

00:38:52,800 --> 00:38:56,800
get workflow that

00:38:54,560 --> 00:38:58,400
um when it sees files change it doesn't

00:38:56,800 --> 00:39:00,560
trigger something

00:38:58,400 --> 00:39:01,920
yeah so i think sort of one of these is

00:39:00,560 --> 00:39:02,800
like we're real people are really going

00:39:01,920 --> 00:39:04,320
to have we have to have good

00:39:02,800 --> 00:39:05,280
documentation about what's going to

00:39:04,320 --> 00:39:08,640
happen

00:39:05,280 --> 00:39:10,480
um especially you know if this is a

00:39:08,640 --> 00:39:12,640
maybe a site that doesn't have drupal

00:39:10,480 --> 00:39:14,480
specific hosting and uses just sort of a

00:39:12,640 --> 00:39:16,640
general hosting and you know

00:39:14,480 --> 00:39:18,320
and enables this but does use version

00:39:16,640 --> 00:39:19,520
control obviously the production is

00:39:18,320 --> 00:39:21,040
going to change

00:39:19,520 --> 00:39:23,440
you're not going to have a clean version

00:39:21,040 --> 00:39:25,680
of your site as far as good is concerned

00:39:23,440 --> 00:39:26,800
and uh sort of you need to sort of take

00:39:25,680 --> 00:39:29,040
that into

00:39:26,800 --> 00:39:30,480
implementations of implementations how

00:39:29,040 --> 00:39:32,400
you use this

00:39:30,480 --> 00:39:33,760
but i think hopefully you know

00:39:32,400 --> 00:39:37,040
documentation about that

00:39:33,760 --> 00:39:40,400
will sort of take it a long way

00:39:37,040 --> 00:39:41,119
we are in the process of reviewing the

00:39:40,400 --> 00:39:44,160
ux

00:39:41,119 --> 00:39:46,079
of the um or emily nouveau

00:39:44,160 --> 00:39:48,480
one of my teammates is in the process of

00:39:46,079 --> 00:39:50,880
reviewing the ux of the contrib module

00:39:48,480 --> 00:39:52,640
and a lot of that will be not everything

00:39:50,880 --> 00:39:53,280
i think from the control bundle is going

00:39:52,640 --> 00:39:55,599
to apply

00:39:53,280 --> 00:39:57,599
because you know it's doing something

00:39:55,599 --> 00:39:58,000
slightly different and also i think for

00:39:57,599 --> 00:40:00,240
core

00:39:58,000 --> 00:40:02,240
usually how it works is we kind of have

00:40:00,240 --> 00:40:04,000
less user-facing options than contrib

00:40:02,240 --> 00:40:05,520
modules when they move in

00:40:04,000 --> 00:40:07,920
um so it may not be quite as

00:40:05,520 --> 00:40:08,400
configurable but there are definitely a

00:40:07,920 --> 00:40:10,160
lot of

00:40:08,400 --> 00:40:12,319
things that will be similar as far as

00:40:10,160 --> 00:40:12,880
like especially around the readiness

00:40:12,319 --> 00:40:15,440
checking

00:40:12,880 --> 00:40:16,400
um ux like we still have the problem of

00:40:15,440 --> 00:40:18,960
letting people know

00:40:16,400 --> 00:40:20,800
in a really understandable way like hey

00:40:18,960 --> 00:40:23,280
your site's not going to be ready

00:40:20,800 --> 00:40:24,079
for um updates because of you know x y

00:40:23,280 --> 00:40:27,280
and z problem

00:40:24,079 --> 00:40:29,359
or we think it won't be

00:40:27,280 --> 00:40:30,640
but there's a warning so how do we tell

00:40:29,359 --> 00:40:31,599
the difference and how do we make it

00:40:30,640 --> 00:40:33,599
clear

00:40:31,599 --> 00:40:36,079
for people to how they address any

00:40:33,599 --> 00:40:38,079
particular problems

00:40:36,079 --> 00:40:40,079
so if you want to connect with us at

00:40:38,079 --> 00:40:40,880
drupalcon so there's a buff right after

00:40:40,079 --> 00:40:43,760
this session

00:40:40,880 --> 00:40:45,680
it really would be great to um to have

00:40:43,760 --> 00:40:48,160
people attend i think on that

00:40:45,680 --> 00:40:48,800
uh session we can more easily like add

00:40:48,160 --> 00:40:51,280
people to

00:40:48,800 --> 00:40:52,960
i think it's a general zoom call so you

00:40:51,280 --> 00:40:54,560
know more than just me and lucas can

00:40:52,960 --> 00:40:56,800
chime in which would be great

00:40:54,560 --> 00:40:57,839
and we have the contribution day on

00:40:56,800 --> 00:41:00,160
friday

00:40:57,839 --> 00:41:01,520
um please come i'm hoping to get up

00:41:00,160 --> 00:41:03,920
really early my time

00:41:01,520 --> 00:41:04,640
to uh to be there at 10 15 barcelona

00:41:03,920 --> 00:41:07,359
time

00:41:04,640 --> 00:41:08,160
um so if you're interested in starting

00:41:07,359 --> 00:41:11,359
before then

00:41:08,160 --> 00:41:14,640
i want to find issues you can at me on

00:41:11,359 --> 00:41:16,560
the auto updates channel in slack

00:41:14,640 --> 00:41:18,720
we have the drupal core issues we have

00:41:16,560 --> 00:41:19,280
the php tough issues we have a couple

00:41:18,720 --> 00:41:21,599
sort of like

00:41:19,280 --> 00:41:22,400
experimental repositories under php

00:41:21,599 --> 00:41:24,160
tough

00:41:22,400 --> 00:41:26,400
um where we're just sort of sort of

00:41:24,160 --> 00:41:29,200
thinking out some of these ideas

00:41:26,400 --> 00:41:31,040
um so we're you know at the phase where

00:41:29,200 --> 00:41:33,520
we could use a lot of help in a lot of

00:41:31,040 --> 00:41:36,240
different areas we have the um

00:41:33,520 --> 00:41:37,520
the python sort of testing framework

00:41:36,240 --> 00:41:38,480
that we're trying to build for our

00:41:37,520 --> 00:41:41,280
library

00:41:38,480 --> 00:41:42,319
and then sort of after drupalcon find us

00:41:41,280 --> 00:41:45,040
on the

00:41:42,319 --> 00:41:47,200
auto update slack we have by weekly

00:41:45,040 --> 00:41:50,079
meetings at 1900 utc

00:41:47,200 --> 00:41:51,359
and i think uh so next week is the week

00:41:50,079 --> 00:41:52,319
that we're going to have the meeting so

00:41:51,359 --> 00:41:54,000
these are

00:41:52,319 --> 00:41:56,480
uh meetings that you can sort of follow

00:41:54,000 --> 00:41:58,160
along afterwards or you can be there

00:41:56,480 --> 00:42:01,040
while you're there or be there at the

00:41:58,160 --> 00:42:03,119
time look for our issues with

00:42:01,040 --> 00:42:04,880
since we don't have a module called

00:42:03,119 --> 00:42:06,560
automatic updates yet in core we're

00:42:04,880 --> 00:42:07,599
using the tag automatic updates

00:42:06,560 --> 00:42:10,560
initiative

00:42:07,599 --> 00:42:11,680
to to find our issues and then the php

00:42:10,560 --> 00:42:13,119
tough library

00:42:11,680 --> 00:42:14,880
there that's the main library if you

00:42:13,119 --> 00:42:17,200
look at the org php

00:42:14,880 --> 00:42:18,720
there's some other sort of proof of

00:42:17,200 --> 00:42:20,240
concept libraries

00:42:18,720 --> 00:42:21,839
and hopefully we're going to do some

00:42:20,240 --> 00:42:23,680
more virtual sprints we've been doing

00:42:21,839 --> 00:42:25,760
these sort of four day virtual sprints

00:42:23,680 --> 00:42:28,720
in the fall and i think they were really

00:42:25,760 --> 00:42:31,520
good for getting stuff moving

00:42:28,720 --> 00:42:33,040
can we um ted do we have time to do our

00:42:31,520 --> 00:42:35,680
poll results

00:42:33,040 --> 00:42:37,119
oh yeah yeah so we had the poll what

00:42:35,680 --> 00:42:41,280
would you

00:42:37,119 --> 00:42:43,440
would you guess yeah won't folks guess

00:42:41,280 --> 00:42:46,880
can they not see the answers uh no not

00:42:43,440 --> 00:42:46,880
not until i hit end and share results

00:42:48,720 --> 00:42:52,319
end and now i'm going to hit share

00:42:49,839 --> 00:42:52,319
results

00:42:52,560 --> 00:42:56,480
okay so hopefully others can see

00:42:56,960 --> 00:43:02,720
we have uh a couple of folks say no

00:43:00,160 --> 00:43:03,280
so um six percent say no i don't think

00:43:02,720 --> 00:43:06,319
this is

00:43:03,280 --> 00:43:09,440
um important for me but it is for others

00:43:06,319 --> 00:43:12,560
uh no one said this is a

00:43:09,440 --> 00:43:15,359
is is not worth uh worth the

00:43:12,560 --> 00:43:16,160
our effort and we had 81 um poll

00:43:15,359 --> 00:43:19,280
responders

00:43:16,160 --> 00:43:22,240
so out of all of you um

00:43:19,280 --> 00:43:23,920
81 were at least favorable to the idea

00:43:22,240 --> 00:43:25,200
00:43:23,920 --> 00:43:27,200
even if you didn't think you could use

00:43:25,200 --> 00:43:29,200
it on your own site

00:43:27,200 --> 00:43:31,200
yeah and i think the you know half that

00:43:29,200 --> 00:43:34,720
say they want to set it and forget it

00:43:31,200 --> 00:43:37,200
i'm actually surprised but that's great

00:43:34,720 --> 00:43:39,040
that's great that that many people see

00:43:37,200 --> 00:43:42,960
would want to use it in that way

00:43:39,040 --> 00:43:45,599
um so yep i think we're almost out of

00:43:42,960 --> 00:43:48,480
time with any of the questions

00:43:45,599 --> 00:43:50,880
most of them are around the updates um

00:43:48,480 --> 00:43:54,079
whether we could do a drupal ui change

00:43:50,880 --> 00:43:55,440
say this security release

00:43:54,079 --> 00:43:57,200
yeah i think some of that stuff is

00:43:55,440 --> 00:43:58,960
possible but definitely with like

00:43:57,200 --> 00:44:00,319
we know what things are security

00:43:58,960 --> 00:44:02,560
releases

00:44:00,319 --> 00:44:04,720
um as lucas was saying it's harder to

00:44:02,560 --> 00:44:07,040
predict for any particular site

00:44:04,720 --> 00:44:09,040
if you have database updates but because

00:44:07,040 --> 00:44:11,119
we're doing the temp directory

00:44:09,040 --> 00:44:12,480
we can hopefully know at least after the

00:44:11,119 --> 00:44:14,640
download so we don't

00:44:12,480 --> 00:44:16,079
we don't apply an update then be like oh

00:44:14,640 --> 00:44:18,240
whoops this needed a

00:44:16,079 --> 00:44:19,200
database update and you know we didn't

00:44:18,240 --> 00:44:21,440
write the code to do

00:44:19,200 --> 00:44:23,680
database updates yet so sorry we you

00:44:21,440 --> 00:44:25,599
know messed up your site

00:44:23,680 --> 00:44:27,040
we'll definitely try to avoid that but

00:44:25,599 --> 00:44:28,720
um but i think

00:44:27,040 --> 00:44:30,560
being able to eventually run database

00:44:28,720 --> 00:44:33,280
updates i think would be great

00:44:30,560 --> 00:44:34,880
but um that's i don't know if that's in

00:44:33,280 --> 00:44:37,280
vp or not

00:44:34,880 --> 00:44:39,040
thanks ted for um pulling this all

00:44:37,280 --> 00:44:41,280
together uh he's the one who put in the

00:44:39,040 --> 00:44:42,640
submission thank you very much

00:44:41,280 --> 00:44:46,079
all right hopefully we'll see all the

00:44:42,640 --> 00:44:46,079

YouTube URL: https://www.youtube.com/watch?v=aFzctR2Q69o


