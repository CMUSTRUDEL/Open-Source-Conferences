Title: DrupalCon Munich 2012: Achieving Continuous Integration with Drupal
Publication date: 2013-03-29
Playlist: DrupalCon Munich - August 2012
Description: 
	Continuous Integration (CI) is a method of software development focused on
small pieces of work, integrated frequently, tested automatically, and
deployed regularly. Simple in concept, it requires a fair amount of effort
and infrastructure to set up and use. This session will describe how your
Drupal development team can achieve Continuous Integration, including:

* Using from a source code repository
* Automating the testing of every commit
* Testing in a clone of the production environment
* Making the current and prior versions easily accessible
* Providing visibility into all parts of the process
* Automating deployment of your site
* Measuring the results of changes you make for rapid iteration and
improvement
Captions: 
	                              okay I should start so today I'm talking                               about achieving continuous integration                               with Drupal mostly what this talk is                               going to be about is that what is more                               what that means and how to approach                               doing it this is not going to be a talk                               about how to install and configure                               Jenkins or you know how to automate your                               post commit hook we can talk about you                                know some of that stuff in the in the in                                the questions at the end mainly this is                                going to be about evangelism and why you                                should develop this way and how you can                                approach doing it so that's me hi so I                                thought I'd start off with talking about                                the evolution of a drupal developer how                                all of us start how many people in here                                build Drupal sites or used to okay right                                almost everybody of course this was me                                so I started probably the way we all                                started which is to say I logged into my                                web hosting provider and started writing                                code i downloaded drupal right into the                                the doc root directory and you know                                added modules there's a reason people                                start this way it's really really fast                                and easy to get started dating and you                                know you're building a site for yourself                                it works great so it's it's definitely                                the quick quickest and cheapest way and                                you make a change it's immediately                                visible it's easy to see you can if                                there's a bug if someone visits your                                site and they say hey something's broken                                you you go visit the same site that                                they're looking at and you see the same                                bug and you fix it and it's immediately                                fixed right there's no overhead there's                                no delays and when you fix the bug you                                know your visitors immediately see the                                change so that's all terrific you don't                                have to do release engineering all right                                there's no like process where you hand                                off to someone it's like this is fun                                it's immediate it's like if you didn't                                have to if they weren't paying you for                                your job this is the way you do it right                                however there are many downsides right                                the slightest mistake you won Miss                                semicolon and your site goes down                                doesn't work very well and what happens                                is when there is a mistake and you're                                sitting there trying to fix it and then                                you make another mistake and your site                                still down and you're trying to fix it                                in a hurry and everything goes crazy I                                mean obviously it's it's kind of a panic                                also a little bit more subtle is how do                                you demo a change right so let's say the                                site's up and you're building it for                                your client and now you want to have                                version                                                              show a version                                                        change its change live immediately and                                of course if you have more than one                                person it just doesn't work at all right                                you can't have lots of people hacking on                                the same actual doc root at the same                                time they're going to save files on top                                of each other version control won't even                                help you in this case it's a mess so                                this never works right we all start this                                way and then very quickly we move away                                from it so where we move to we move to                                developing somewhere else and then                                having a production environment so                                somewhere else might be your local your                                local notebook or your local machine if                                you install map or xampp or dove desktop                                or whatever or maybe you have to                                environment you know two separate                                accounts at your hosting provider so                                there's some advantages a lot of                                advantages to this right first of all                                you know missing semicolon still take                                down your site right you can start to do                                normal software development you can use                                version control you can have multiple                                people committing you know you can have                                you know daily meetings with your team                                and talk about features you're going to                                implement and have a version that's you                                know not deployed yet because you have                                somewhere to run it everyone's working                                on their own local copy of the database                                oh another big problem with just hacking                                live on your site is your testing on                                your precious live data everyone can                                have a local copy that their site talks                                 to so they can they can you know all                                 sort of work in parallel but there's                                 still problems with this approach which                                 is when it sometimes too comes time to                                 release let's say you've got one or                                 maybe two or three or four people                                 working on their own local environment                                 and now you want to do a release what do                                 you have to do right okay first of all                                 you get your team and you say alright                                 everyone we're going for a release now                                 all right you take everyone's changes                                 maybe they've been working on their own                                 thing on a feature for you know a week                                 or two or a month or who knows how long                                 in an independent environment and maybe                                 they've committed maybe they haven't so                                 every room everyone runs you know get                                 pull or svn update and the conflict                                 start happening and you have to get the                                 conflict markers in your code and it                                 doesn't all work and even you know worse                                 than that is                                 you know someone made an API one way and                                 someone else called it a different way                                 or the modules defined the same function                                 name or you get is integration errors                                 right so at this point you merge                                 everyone's changes and you start trying                                 to make it work and what you thought was                                 going to be released day becomes the                                 beginning of you know integration week                                 and all kinds of frustration results in                                 you iterate you try to fix it and                                 finally okay great it seems to be                                 working you copy the code to the                                 production servers and then your site                                 goes down anyway because oh sorry before                                 you copy the code to production servers                                 and now first of all you um you know                                 maybe you have to turn on a new module                                 or create a new view or add some                                 taxonomy terms or whatever and you at                                 now you're going and clicking like on                                 the user interface and that's a disaster                                 and then it doesn't work anyway right                                 because you discover oh you know as I                                 was developing this feature on my                                 notebook I realized I needed the extra                                 fubar PHP extension so I installed it                                 but I forgot to put that on the                                 production environment and so now my                                 site's down oops so this doesn't work                                 that well either it can function and a                                 lot of people work this way but it                                 becomes painful particularly your route                                 around the least time so the question is                                 what's next now what's next is this                                 thing called continuous integration                                 continues testing continuous deployment                                 there's nothing really new here if                                 people who have been developing software                                 for a long time you will all recognize                                 lots of things that you do all the time                                 this talking about continuous                                 integration really is about an attitude                                 and approach to a certain style of doing                                 things that that many of us do some of                                 or all of some of the time and it's just                                 sort of making more rigorous process                                 that you're probably doing already so                                 the first thing is use a source code                                 repository how many people in this room                                 develop against some version control                                 system get svn CVS RCS right you can't                                 this is step zero right you can't get                                 anywhere certainly with a team without                                 doing that it doesn't matter which one                                 you use all right in the Drupal                                 community everyone thinks gets really                                 cool fine use git it's not that                                 important                                 um what's important is that you version                                 everything so not just the source code                                 to your site also version your tests                                 also version if your technical                                 documentation if you have a doc that                                 says oh we have this module you know and                                 here's how it works it uses this data                                 and talk to this web service whatever it                                 does and you document it which is great                                 practice because in six months even you                                 won't remember what you did put that                                 code in your version control system so                                 that a patch that changes the module it                                 also has to be a patch that changes the                                 documentation and now when you release                                 it you can look at the different                                 versions of your documentation over time                                 to remember how it worked you know three                                 versions ago if you use libraries if you                                 use any any external PHP libraries don't                                 just install them on your server put                                 them in your version control system                                 because now you know when you deploy                                 your source code you're deploying your                                 dependencies to there's no oh my                                 goodness you know the prod environment                                 had version                                                     environment had version                                           library that you know you're managing                                 yourself anyway so you know in the Ruby                                 community they call this vendor                                 everything you know they even advise                                 putting you know putting binary objects                                 into your version control system and                                 then linking directly against them right                                 there and full version control keep it                                 simple right you can talk about sub                                 modules & sub tree merges INRI branching                                 and reef and all it's like there are                                 there are advanced version control                                 systems you can use the advanced                                 features of get you can use that have                                 uses but if you haven't already hit the                                 problems that that those solve don't                                 worry about it don't get into a                                 conversation about it keep it very                                 simple one branch your main branch and                                 make version tax okay then maybe you get                                 to you have one guy who's working on                                 some new feature you create a feature                                 branch for a little while he works there                                 so we can do local commits merge it back                                 in delete the branch keep it very very                                 simple software development is hard                                 version control should be as easy as                                 possible sometimes I think gets motto is                                 if writing the code is hard managing the                                 code should be hard to and I don't                                 really understand why that would be such                                 a goal okay so                                 integrate constantly this is something                                 that gets right to the heart of the                                 continuous integration so let's say                                 you're gonna you're implementing some                                 feature and you know it's going to take                                 you you know a month sometimes it takes                                 a long time to you know you've got a                                 whole bunch of stuff to write if you go                                 a month and then try to do a commit at                                 the end and there's someone else on your                                 team who's working what's going to                                 happen you're going to have code                                 conflicts they changed something similar                                 so take your big feature and figure out                                 how to break it up into small steps so                                 that it becomes more like a little chess                                 game where you're moving individual                                 pawns and pieces to get you know over                                 there where your actual feature is and                                 commit them incremental e every time you                                 change something in your code that's                                 going to require a change in production                                 don't leave it till release time to do                                 that by clicking on the you know                                 clicking on the view to change the                                 fields that you're displaying automate                                 it there's a variety of ways you can do                                 that i'll talk about it a bit later                                 implement tests as you go sorry and this                                 is really important it's very tempting                                 for software engineers to think you know                                 either it's someone else's job to write                                 the test or I'll write the tests later                                 there's a whole there's a whole sort of                                 theory of you probably heard of                                 test-driven development where you should                                 write the tests first that works really                                 well in some situations it works not as                                 well in other situations but if you                                 write the tests as you go each little                                 bit of effort to write the test it just                                 doesn't seem as big and daunting if you                                 think oh my god you know I want to start                                 by testing everything about my site it's                                 kind of like starting a new exercise                                 program you know it's really hard to get                                 started you just write a little bit and                                 then you write some little test for each                                 little patch and and each little patch                                 is a fairly small piece of code a fairly                                 small step towards the ultimate goal it                                 helps you just keep things going commit                                 those changes often as you're breaking                                 it into small steps you automate the                                 test and you input you know you you                                 automate the upgraded you implement the                                 test commit it frequently so that other                                 people on your team can always be                                 downloading your code from the                                 repository and running it and knowing                                 that their code with their little change                                 and their little test is going to work                                 in the presence of your change with your                                 little test                                 and then of course in order for that to                                 work you've got to be pulling down                                 everyone else's changes regularly so                                 don't go a week or a month or six months                                 before you start trying to integrate and                                 you know what this does it just reduces                                 that pain on release day so I was                                 thinking about this last night as I was                                 writing it and I put in this slide                                 called sidebar because because the                                 manifesto of continuous integration you                                 know it was on that previous slide which                                 was you know update from from the main                                 repo daily and commit daily theyíve                                 sometimes even say commit every few                                 hours and I thought about that I'm like                                 you know I build aqua cloud I'm the I'm                                 the lead engineer for aqua cloud and we                                 have a team of nine people working on it                                 and I don't really want them committing                                 every few hours or every day we have a                                 code review process all right we have an                                 engineer take a user story we sighs it                                 out hopefully it's you know a day or two                                 or at most a week and they start working                                 on it and they produce a patch when                                 they're done and then we review it                                 someone reviews that someone on the team                                 reviews someone else's work and and kind                                 of go around in a cycle and then maybe                                 there's some changes that are required                                 and then eventually we're done and we                                 commit it you know works just like it                                 does on do and I don't it occurred to me                                 as I was writing this that I'm not sure                                 I buy into the full the full orthodoxy                                 of commit every few hours you know we I                                 want that review process so certainly I                                 don't I wouldn't want an engineer on my                                 team to go a month without submitting a                                 code review so I would want them to you                                 know maybe go a day or two or at most a                                 week and submit a code review if we have                                 a really big story I want them to break                                 it up into small pieces and maybe submit                                 code reviews for small pieces but I also                                 don't want to see a code review every                                 few hours because then everyone's just                                 going to be thrashing all the time going                                 and looking at these small little code                                 review pieces and okay well so we happen                                 to use scrum as our engineering                                 processes we have a planning day where                                 we take here's what we're going to do                                 for the next three weeks and we we sort                                 of break it up into tasks so that's                                 where we figure out in theory you know                                 what the small tasks are but you know                                 even if we're all thinking                                 about it together on the first day we                                 don't always get it right so if I say if                                 I were to tell the engineers okay you                                 know it's break it up into small tasks                                 and commit them yourself they may not                                 make the right small moves to get to the                                 right goal because I'm planning day we                                 may not have discussed it properly so                                 what I'm saying is you know you don't                                 have to do this every four hours in                                 order to call yourself a continuous                                 integration shop or maybe that means you                                 know I'm not really we aren't really a                                 continuous integration shop I think                                 there's some there's some middle ground                                 but clearly between every four hours and                                 a month there's a lot of room in there                                 for doing things more quickly and and we                                 have had engineers who take a story and                                 go for a month and the problem is then                                 they turn in their patch at the end and                                 it's often not right by a lot right and                                 then they've put a lot of time into it                                 and we have to go totally refactored and                                 so I feel like if I'd seen that you know                                 after i briefed every few days then at                                 least we wouldn't have gotten so far off                                 track so you know somewhere between four                                 hours and a month you figure out what's                                 your what's your ideal cycle time and                                 I'm not going to tell you that it's got                                 to be every single day okay talked a                                 little bit about automated testing I'm                                 now going to talk a little more how many                                 people in here automate tests right                                 automated tests for their site a good                                 number fewer than the people who use                                 version control okay well you can't go                                 anywhere without version control and we                                 all know you can have a site work                                 without writing automated tests so that                                 makes sense a good way to think about                                 this is you know you you ideally you                                 want to test everything it with our with                                 the Aqua cloud codebase we have a we                                 have a saying which is that if it isn't                                 if it isn't tested it doesn't work and                                 that's it's almost universally true we                                 find and we try to test everything so                                 with a site you want to make sure                                 there's no white screen of death errors                                 you can have unit tests for your                                 individual modules do they you know read                                 and write things from the database                                 correctly you want to have browser based                                 tests you does your homepage look right                                 does your view sort correctly all that                                 you know there's all these different                                 levels that you can test you can do                                 performance testing our youth there are                                 plenty of services out there that you                                 can point them at a site and they'll you                                 know spin up                                                           go through these page loads and test                                 them all                                 and make sure that it works and it gives                                 you graphs you know so you can see over                                 time how the performance is going you                                 can do upgrade testing so I said it's                                 really important but especially for                                 continuous integration where you want                                 releases to be really easy we'll talk                                 more about releasing in a minute that                                 your upgrade process is automated and                                 not I have to go check on you know check                                 boxes in the Drupal you I so if you have                                 automation to do the upgrade you have to                                 test that which means you have to take a                                 database from production bring it into                                 your test environment and run the                                 upgrade process and then make sure you                                 get the right thing at the end that's                                 probably the most important thing to                                 test if you're going to test anything                                 and I sort of said this before but just                                 start by testing the new stuff if you if                                 you say that you're you need to wait to                                 start testing until you can go back and                                 actually test all the different parts of                                 your sites and all the custom modules                                 that you've written you never get                                 started so just start small and by the                                 way so you know you want you want to                                 test to make sure you're not white                                 screening of death sure you can use                                 cucumber and capybara and selenium and                                 there's all these really great tools out                                 there you can also write a one line                                 shell script that calls curl and greps                                 the output to make sure it has your site                                 name or slogan in it and and that's                                 something right and you do that one                                 little thing and then you know you add                                 some other feature and you put another                                 curl command you know and it starts                                 really small and really easy now                                 eventually you'll realize oh my god my                                 test script has like thirty seven calls                                 to curl and they're all custom hacks and                                 then you decide to refactor it you put a                                 little effort and you met you go to a                                 better technology but at least you've                                 got a base to go from and again the                                 upgrade testing is really critical um                                 run the tests frequently sometimes every                                 commit ideally every commit if you have                                 tests and they break and you allow them                                 to keep breaking and you keep committing                                 code you're going to destroy the morale                                 of your team you're going to decide not                                 to trust your tests then it's a short                                 step to decide it's not worth writing                                 the tests and then pretty soon you don't                                 have to us anymore so it's really                                 important that they do this now                                 confession we have automated tests for                                 aqua cloud they almost                                 never fully pass it's an extremely                                 difficult thing sometimes to get                                 automated tests to pass but the                                 difficulty of getting them to pass                                 depends on the nature of the application                                 for a website where you're pretty much                                 right how you have code that's talking                                 to a local database there's not too many                                 excuses that really actually ought to                                 work we have tests that fail because                                 we're launching servers in ec                                      updating DNS and running sshs across the                                 network to                                                           making sure they all work out correctly                                 and there's all kinds of you know cosmic                                 rays that can interfere there when                                 you're when you're primarily dealing                                 with a Drupal site your tests really                                 ought to pass and it's worth calling a                                 halt to future development until they do                                 because otherwise you know it's like                                 your tests are telling you something is                                 broken don't proceed because that's what                                 they're for we actually we have another                                 saying which is that our system tests                                 and holcomb your cloud they're so                                 incredibly fragile they break if we make                                 the slightest mistake we hate that                                 except of course they're doing exactly                                 what we wrote them to do which is to                                 tell us we just made a mistake okay oh                                 and of course whenever the tests fail                                 tell the whole team so that everyone                                 knows it right and everyone knows                                 because because sometimes you know it                                 does happen you're the developer you                                 write your tests they work you do the                                 commits you do an update from the from                                 the repo you run them again they still                                 work but then someone else runs them and                                 they break that can happen right                                 sometimes there are bugs that don't                                 manifest every single time or they                                 depend on the time of day or you know                                 god only knows what so when anyone                                 encounters a bug even though it made of                                 might have worked when it was committed                                 make sure everyone knows it so that it                                 becomes a priority to fix it right then                                 so if you have an automated system                                 running your tests of course it can send                                 email out to everyone if not if you know                                 just have a manual process where someone                                 raises a red flag and says we have a                                 problem and I don't know exactly why                                 this is on this slide not sure it should                                 be but deploy frequent so you you've got                                 your you've got your site you've got                                 your changes you're each each new                                 feature you know you've got a little                                 test for a little documentation for and                                 it's committed and it's working now                                 deploy it to a QA area so that not just                                 the automated tests run but                                 now you know your manager your CEO your                                 client someone some stakeholder can go                                 play with the new thing in development                                 right before it's ready to release but                                 all the features that have been added so                                 far work right because you've tested                                 them and they're however far along they                                 are towards their ultimate goal that                                 much they should work so if you have a                                 live environment where people can play                                 with it your designers can play with it                                 be like oh you know you got the                                 placement wrong the font isn't coming                                 out right the usability isn't quite the                                 way we designed it it's really helpful                                 to have a live environment after you                                 know all your tests work so test in a                                 clone of production and this is where                                 the conversation gets really interesting                                 it doesn't do you a lot of good to run                                 your tests somewhere that's different                                 from your production environment right                                 I've sort of referred to this earlier                                 running your tests on a developer                                 notebook is is better than not running                                 them at all but it's pretty close to                                 useless because you there's a million                                 variations in the way someone's                                 development environment is set up which                                 version of PHP they have which                                 extensions they have you know are they                                 running it you know some people run                                 their tests under the apache user and                                 some run it as their own user and like                                 who knows what can go wrong Drupal is                                 very very dependent on the details of                                 its environment if the wrong extension                                 is installed your site's going down so                                 you need to test run all your tests in                                 as close a clone as possible of your                                 production environment you also need to                                 run them in the presence of a production                                 database you don't need to necessarily                                 update your test server with a                                 production database every day but if                                 it's not automated and you don't refresh                                 it every day pretty soon what you're                                 going to find is that you're using your                                 database that's a year old because you                                 know it's not automated and it isn't it                                 seems to be working or developing code                                 you're running your tests everything's                                 great and then a year passes because you                                 didn't it wasn't a priority to fix it                                 and then something blows up because                                 finally you wrote some code that didn't                                 actually work in what was in production                                 because your database of the year out of                                 date when you do you work on a                                 production database of course it's very                                 important that there's probably some                                 critical data in there you don't want                                 like take out your customer email                                 addresses so you don't                                 spam them as you're developing your new                                 newsletter functionality or whatever                                 take out the credit card data that if                                 you shouldn't have credit card in a                                 database but you know scrub stuff it's                                 pretty easy to write little SQL                                 statements that truncate the tables that                                 you know or jointly or zero out the                                 columns that have data that shouldn't be                                 there and then this is the one that I                                 actually think most people don't do                                 which is you have a production                                 environment you have a testing                                 environment they're clones of each other                                 terrific and then your system                                 administrator gets woken up at                                          night because the site went down because                                 of you know a huge surge in traffic from                                 the other side of the globe and they                                 realized that oh oh goodness you know we                                 didn't configure you know Apaches                                 whatever feature correctly so they fix                                 it performance problem solved site is                                 back up testing server not changed so                                 now you're running your tests again in                                 an environment that's not a clone any                                 kind of manual tweak or you update the                                 package on the you know the security fix                                 on the production server because you                                 know your system in got an alert from                                 you know that there was a that there was                                 an update and they deployed it and all                                 of a sudden your production environment                                 just became not synchronized with your                                 test environment even though you know                                 three months ago when you set them up                                 they were perfect the only way to                                 actually have a clone of your production                                 environment is to automate the                                 configuration of your production                                 environment and then use that same                                 automation to build your test                                 environment and this gets two stops up                                 to it to a level of of system                                 administration automation that my bet is                                 that most people don't do because it's a                                 pain in the neck all right every time                                 some you know there's a new security                                 package okay you can install it but then                                 when the Machine blows up and you have                                 to reinstall from you know from initial                                 media or you start from scratch did you                                 document exactly what you did do you                                 know you documented everything that you                                 did and are you sure you're going to run                                 that in your test environment again it's                                 kind of hard to keep up so talk about                                 that a little later as things you can do                                 to solve that okay                                 and then automate deployment so you've                                 got your code you've got tests as you've                                 been you know you writing a little bit                                 to test as you write your code you have                                 a test environment it's a good clone and                                 now it's time to deploy to production                                 there's a sequence of things you want to                                 do every time you deploy to production                                 but you don't want to have to do them by                                 hand every time or you're going to                                 forget so push buttons should deployment                                 should be you know push button there's                                 there's some great blog posts out there                                 you know etsy rota wrote a great blog                                 post on there deploy inator how they've                                 got it down to a web app with one button                                 ideally you push through push the deploy                                 button and you're so confident because                                 your tests have been passing that you                                 push it and then you get up and go get a                                 coffee and you know go to lunch or                                 whatever and just relax so the set of                                 things you frequently want to do I mean                                 there's many but at least you want to                                 put a tag in your source code system                                 pointing to the code that you deployed                                 at that exact time so that you know next                                 week that's the code i was running last                                 week or more likely you know in half an                                 hour when their site blows up anyway                                 despite all the things you did to                                 prevent it you know the version that you                                 were running before the release so that                                 it's very easy to go hit the button                                 again and deploy the previous tag that                                 you marked you want to make a snapshot                                 of your database just before with the                                 release so again you can roll back it's                                 really painful when you have to do that                                 because on a busy site you know even                                 minutes after you deploy a new release                                 right there's still user content coming                                 in you really want to avoid having to                                 roll back but in disaster sometimes you                                 have to and if you don't make that                                 snapshot automatically then you're sort                                 of screwed then of course you want to                                 deploy the codes to your server all the                                 code to all your servers may be multiple                                 may be single oh you'd like that to                                 happen sort of as quickly and                                 synchronously as possible then there's                                 if there's any updates which you've                                 automated then you need to run them and                                 hopefully you have automated them and of                                 course after you run the updates if you                                 need to back the code out depending on                                 how you wrote your code sometimes that's                                 where you need to restore the old                                 database sometimes your new code won't                                 work with your old database schema so in                                 that case you have to roll back your                                 database unless you can fix the bug                                 really quickly and roll forward                                 and you know that last part up creating                                 changes because you can't always roll                                 back is why if you haven't automated the                                 upgrade path you're not done if you                                 haven't tested it against a production                                 database copied into staging and run                                 your upgrade and visited the site your                                 feature isn't finished so I'm doing here                                 okay all right so that's a lot of stuff                                 right I don't know why I just went back                                 how do you actually get there right I've                                 just evangelized for for half an hour                                 how do you get there it's the most                                 important thing to understand is that                                 it's not actually about technology or                                 this is one of the one of the big names                                 and continuous integration said this                                 thing right it's it's an attitude it's                                 not a tool it's not about using Jenkins                                 and puppet and chef and Capistrano and                                 deploy an aider and all these other                                 things those tools are all great you'd                                 probably end up using some of them but                                 you don't have to you can actually you                                 know there's there's there's plug posts                                 where they talk about there's one it                                 talks about using a rubber chicken as                                 part of your continuous integration                                 process you go search for it it's very                                 entertaining you can do this yourself                                 mostly drush has commands actually to                                 automate almost all of these steps you                                 know obviously the Drupal developers                                 have encountered all of these things                                 before so you can deploy your code with                                 drush has a handy-dandy rsync tag so you                                 make the tag Arsene command so you make                                 the tag right use get tagged or svn copy                                 or whatever system you're using and then                                 draw char sake and copies your code for                                 you great if you have multiple web                                 servers you need a slightly more                                 complicated script max of course you've                                 got to update two or three web servers                                 at a time and you have to address the                                 problem well if I'm updating two or                                 three web servers at a time am I                                 updating them all simultaneously                                 Einstein had a thing or two to say about                                 whether it's possible to do anything                                 simultaneously at a distance in this                                 universe so no you're not so you try to                                 make it as simultaneous as possible and                                 anyway you're scripted least is going to                                 have more lines in it because you've got                                 a copy to server one server to and                                 server three but you know it's not that                                 hard of a shell script you need to copy                                 your files again dress to the rescue                                 got this great arson command that you                                 can say just copy the files directory                                 and it will great a database again drush                                 has a great command for that these                                 things work fine we use them everyone                                 uses them they're good tools you know                                 the people who work on drush the rush                                 deployment code is our top notch the the                                 SQL sync the copies databases even has a                                 sanitized command built in that strips                                 all your customer email addresses for                                 you almost like they thought of that if                                 you if there's more sanitation you need                                 to do you know maybe you want to scrap                                 scrape out your orders database or                                 whatever then you can just have another                                 little SQL command that you you write                                 and pipe it into your database and                                 Russia has a command for that to wash SQ                                 SQL CLI one of my favorites running your                                 tests guess what dress has a command for                                 that too it runs Drupal simple tests um                                 right from drush and if you know if you                                 did write some other script where you                                 ran curl and piped you know used grep to                                 look for your your site logo or slogan                                 then you can just ssh to your server and                                 run that to you know you put your test                                 script right in your code base so no no                                 this is hard right we can all everyone                                 right to bash script and it's not that                                 big a deal um and this and this works                                 you don't it doesn't even have to be                                 automated right you can say all right                                 its release day and have a little piece                                 of paper and go through these steps if                                 you're a small team and it's like it's                                 fine it's not about needing an initial                                 invent a huge initial investment                                 certainly you can start here and then                                 start automating as you go however if                                 you're doing this yourself you have that                                 problem of your testing environment that                                 I talked about and now all of a sudden                                 you're administering servers and there's                                 a lot to do here so you're using some                                 version control system you need a you                                 need a server for that someone's got to                                 install it maybe use github that's                                 terrific you stop to integrate with them                                 you end up writing a lot of little                                 scripts you start using Jenkins or some                                 other continuous integration server they                                 become you know each little script                                 becomes a Jenkins job you want to deploy                                 automatically on commit remember I said                                 always have you know a version of your                                 of your site in a QA instance where                                 people can play with it well that means                                 that every time there's a commit you'd                                 like                                 update that and okay easy enough post                                 commit hook and get run your deploy                                 script that's a that's a little script                                 to write if you want to copy your                                 database from production down to                                 development not that hard to do there's                                 ad rush command just another little                                 script to write you if you you want to                                 run your tests all these little things                                 you want to do they become a job that                                 you write in Jenkins all right not that                                 big a deal you have to manage your own                                 operating system maybe you're hosting it                                 year at a hosting provider that does                                 that for you that could be great the                                 server build as I described you know you                                 have apache and mysql in memcache and                                 whatever that has to be configured                                 actually that's the next column you have                                 to do security updates when they become                                 available and you have to do these on                                 your testing environment too you can't                                 think to yourself yeah you know our                                 testing environment it's behind a                                 firewall no one can log into it it's not                                 crucial for security you might be right                                 about that it may not be crucial for                                 security but if the environment is                                 different you don't know that your                                 site's going to work the same way right                                 maybe you upgrade to the next version of                                 PHP because there's a critical fix and                                 it turned out that you know you were                                 still using register globals by accident                                 in your site and you didn't know it and                                 now it breaks in production god forbid                                 you have you know multiple sites or                                 multiple vhosts you have to manage all                                 of them put your domain names in the                                 right place you know if you're                                 configuring SSL if you have custom                                 settings in php.ini and of course you                                 will have multiple web vhosts because                                 you have a production environment and a                                 testing environment and a development                                 environment and so someone's got to go                                 set all those things up you need                                 multiple databases you certainly don't                                 want your testing site talking to your                                 production database or vice versa right                                 so you have two separate MySQL instances                                 even if you're on the same server and                                 somewhere you've got to manage your                                 credentials for that so you have all                                 your settings files some people put them                                 in the repo some people don't but you've                                 got to get them to the right place on                                 the right server without making a                                 mistake so that every every page load                                 talks to the right database for the                                 environment that's it depending on the                                 different levels of servers services                                 you're using if you use apache solr or                                 if you're using Jenkins you've got to                                 manage that too unless you connect to a                                 host of the service that does that which                                 could be a great idea but now you've got                                 to work with that hosting service                                 there's all these you know                                 configure varnish make sure tom cat is                                 installed to run solar are you using                                 memcache which version do you have oh if                                 you're using database replication for                                 either because you want read slaves or                                 you want an H a you know failover                                 database you've got to keep that up and                                 running this ends up being a full-time                                 job for a team of operations people and                                 of course then you then god forbid you                                 become successful all right you get a                                 lot of traffic you don't want your best                                 day to become your worst day because                                 your site goes down when you got linked                                 you know from the front page of wherever                                 and automating backups how many people                                 have completely reliable automated                                 backup system for their site that they                                 know works because they've restored from                                 it fewer people then our which was the                                 second question I asked ro that                                 automated tests which was fewer people                                 than use version control so it's it's a                                 lot of work right you don't get around                                 to it because you've got other things                                 you're worrying about but it's really                                 important to do because otherwise that                                 the worst possible time is going to bite                                 you in the butt alright oh and then of                                 course you know                                                       your servers might blow up and someone's                                 got to wake up and fix it which means                                 someone has to know that it went down                                 which means you need a monitoring system                                 so now you're configuring nagios to go                                 with it you can do all of this and there                                 are plenty of sessions here at drupalcon                                 to talk about doing all of this and                                 teach you how and if that's how you want                                 to spend your time and there are some                                 people who do great you have another                                 option which is pay someone else to do                                 it so obviously I build Acquia cloud                                 pantheon exists there are other services                                 out there that take everything from that                                 last slide all of the server                                 administration and also the automated                                 deployment and running from version                                 control and just hand it to you I see a                                 lot of you know we have a we have a                                 cancellation process for people who try                                 out our service until like it and when                                 they're canceling there's check boxes                                 that say like a why you canceling you                                 know I didn't work well I thought it was                                 too expensive I want to do whatever the                                 reasons are and a lot of people check                                 it's too expensive and I'm thinking I                                 need to change the form so that when                                 they check it's too expensive i open up                                 another little form that says how many                                 hours per month do you estimate you're                                 going to spend on all that stuff on the                                 previous slide because the answer is                                 quite a few or you're not going to do                                 in which case you're exposing yourself                                 to a lot of risk and and like an extra                                 hundred bucks a month how many you know                                  like what's your time worth your job is                                  to build a killer website and not to                                  become a system administrator all the                                  time your job is to become a system                                  administrator actually I'd like to hire                                  you please come talk to me after the                                  session so you know these exist there                                  are others we sort of compete but but                                  really you know I have a great                                  relationship with the guys at Pantheon                                  and we're very consistent on the message                                  that really our competition are all the                                  people who are who are struggling to to                                  make their Drupal sites just work                                  consistently and reliably and growing                                  the base of people who are working                                  efficiently so you know we compete for                                  individual clients but really we both                                  just want to increase the number of                                  people who don't have these problems all                                  the time and I put this slide in because                                  someone always asks so I'm just going to                                  address it right up front okay you have                                  a dev environment a testing environment                                  a production environment and we've                                  talked about moving your code and                                  bringing your databases back for testing                                  but then someone says how do I manage                                  the Drupal configuration problem where I                                  want to change something in development                                  I'd like to automate pushing it to                                  production you know where's the check                                  box for that the answer is there really                                  isn't one the Drupal you I that entire                                  administrative interface that we've                                  built it's awesome if you're just                                  learning your or your prototyping or                                  you're just experimenting and plugging                                  modules together and seeing how they all                                  work but behind every one of those                                  checkboxes there's either if the module                                  is well designed an API or there's a                                  database table and so when you say you                                  know okay I want to change my view to do                                  whatever or I want to configure Drupal                                  commerce to have a new product there's                                  some way you can automate that you can                                  either write an update function you know                                  drupal's normal module schema update                                  where you know and in those update                                  functions you can do anything you can                                  create nodes you can change you can                                  install new views you can you know                                  change your taxonomy and access control                                  and roles and all that stuff you have to                                  write the code                                  the advantage doing it is you know that                                  that codes going to work assuming you                                  test it obviously there's the features                                  module that does some of that for you                                  right if you do want to change your view                                  you can do that in your development                                  environment export the view committed to                                  code again it's code the thing about                                  code is it's easy to version it's easy                                  to automate it's easy to test checkboxes                                  not so much I suppose you could actually                                  automate a browser-based upgrade tool                                  which went and check the boxes for you                                  but really don't want to um and then it                                  you know having to do this you know we                                  have this great UI and here I'm telling                                  you you can't use it and the Drupal                                  project is very aware of this so in                                  Drupal                                                                   management initiative which is actually                                  an attempt to automate I check the boxes                                  and Drupal hands me the code                                  configuration changes and there's a demo                                  with that at the keynote I assume you                                  all saw it so this problem may be going                                  away for people who use triple eight in                                  a year or whenever it's released in the                                  meantime update functions features                                  modules it's probably a couple other                                  techniques out there that let you                                  manifest your configuration in code and                                  that's pretty much what you have to do                                  that's for configuration then the next                                  question is how do I staged my content                                  well this talk actually really isn't                                  about that but again someone always asks                                  so every time I've gotten this question                                  I've always said yeah you know there's a                                  variety of techniques in the Drupal                                  ecosystem for how to migrate nodes                                  content from you know staging to                                  production those all work on aqua cloud                                  they all work on Pantheon but we don't                                  offer anything excuse me specific to                                  help with that this time however all of                                  you when you when you register for                                  drupalcon you've got a copy of the                                  drupal watchdog magazine and in that are                                  in that magazine is an article actually                                  buy another aqua employee named michael                                  cooper it's called enterprise Drupal                                  application scaling which I would never                                  read that article if it were me but what                                  he talks about is how within the Aqua                                  network where we have we have network to                                  document a common insight tada create a                                  common library and forums and then a                                  central customer database and all of our                                  subscription                                  and users are synchronized among all of                                  them he talks about how we do that so                                  when we go to one of our websites and                                  someone goes to node edit and change as                                  a field and hit save it propagates to                                  all of our other Drupal sites which are                                  all independent sites they're not                                  sharing their node tables or anything                                  like that and so you can read that and                                  it talks about it the short form is you                                  you IDs and web services he talks about                                  how we describe that there's also a                                  variety of modules that can help migrate                                  module note import/export deploy there's                                  probably some I'm not forgetting any                                  female they will all work in a                                  continuous integration environment                                  they're really sort of orthogonal to                                  that just thought I'd head off the head                                  off the initial question okay I always                                  forget to show this slide so I'm going                                  to show it now so I don't forget I'm                                  going to show it again later they want                                  me to ask you to rate the session please                                  do i'd love to know love to get your                                  feedback and questions that was a lot of                                  brain dumping                                  yeah the question is running simple                                  tests takes a really long time so I                                  actually based this presentation on a                                  presentation that a friend and recently                                  former colleague of mine named Ike boo                                  throat and he had a slide that said you                                  know how long can your tests take and                                  the answer is if they take if you                                  measured in seconds that's awesome if                                  its measured in minutes you know that's                                  fine if it's ours you have a problem and                                  if it's longer there longer than that                                  it's a disaster and the rewrite and so I                                  totally get that Drupal Drupal simple                                  tests can be very slow I believe that                                  there is an effort to replace them with                                  something else for that reason and I                                  think I'm trying to remember the name                                  most Weitzman has a project is it called                                  phpunit it's based on maybe phpunit you                                  know the reason is so a drupal simple                                  test every time you start a new test                                  case it completely reinitialized at the                                  database and that setup process just                                  takes a while so i think there is an                                  effort to fix that i don't remember the                                  name offhand of the project but yeah it                                  is an issue I'm sorry it's again quick                                  simple test that's another project okay                                  so is this an baak project it is a                                  problem it so I'll tell you that you                                  know our automated test for aqua cloud                                  they used to take six hours to run its                                  which is brutal right because you come                                  in the morning you make a change you                                  start the test and you don't even have                                  an answer before you go home for the day                                  we recently changed that we got it down                                  basically by running them in parallel we                                  got it down to about two hours we're                                  aiming for                                                           couple weeks racks are hoping to make a                                  big step towards that so one thing you                                  can do is run them in parallel so                                  instead of having one test environment                                  have two or three or four and when you                                  kick off your tests just run class-a                                  here and class be here in class see                                  there and it's at least something it                                  takes a little more automation not that                                  much more it does matter the thing with                                  you know when that when they take too                                  long what happens is you're not willing                                  to run the tests before you make a                                  commit so you can run them over night                                  and that's still good but then what                                  happens is you end up committing broken                                  code maybe you run the one test that you                                  know is the specific functionality you                                  wrote and then overnight you discover it                                  broke and if you have that then you just                                  have to have a really disciplined team                                  which which everyday reviews the                                  failures and figures out what's wrong                                  and goes and fixes it and we do that and                                  yeah it's painful life sucks other                                  questions the question is version                                  everything what you use for database                                  versioning so what would you like to                                  version in your database so anything you                                  can't put in code I mean what what I                                  think you're asking is how do I version                                  my configuration so I can back it out                                  right I don't have a great answer for                                  you what I can tell you as an offhand                                  comment I know that I've never written                                  ruby-on-rails code but I know Ruby on                                  Rails you know Drupal has update                                  functions and Andreas has migrations I'm                                  pretty sure that a migration is more or                                  less what we think of as an update                                  function you know its database                                  statements the Iran to get you from one                                  version to another and i'm pretty sure                                  that the that the rails migrations                                  feature has a undo you know function                                  you're supposed to write to do undoing                                  honestly I've never asked for rails                                  developer this but I'd love to know how                                  many of them actually write that and I'd                                  be surprised if there are many I mean I                                  wouldn't you know it would it wouldn't                                  be shocking if someone giving a talk                                  much like mine in a rails environment                                  said yes it's very important that you                                  write your you know your undo migration                                  just like I just said it's very                                  important that you write your tests and                                  I couldn't disagree with them I don't                                  have a good answer for how to version                                  your database you know automate your                                  upgrades so they and test them                                  frequently like many times before you do                                  the deploy and that's having that audit                                  having that test environment that's set                                  up that on every commit or every night                                  always runs your update with a fresh                                  scrubbed copy of your production                                  database gives you a lot of confidence                                  that the updates going to work and other                                  than that                                  drupal drupal actually makes it kind of                                  hard you know knowing knowing what we                                  know now if I went back to you know                                       and talked to Driessen his dorm room I                                  would tell him maybe we should have this                                  administration interface I'm not a                                  hundred percent sure but we absolutely                                  should never have conflated                                  configuration and content like I was                                  just thinking yesterday what if Drupal                                  actually had two completely separate                                  databases one for all the content and                                  one for all the the check boxes because                                  then you know your content database we                                  get really really big as people add                                  comments and nodes and votes and all                                  that stuff but your config database                                  would be pretty small and maybe you                                  could actually just my SQL dump it and                                  save it to a file and committed to your                                  repo and that would be versioned we                                  can't do that because you know we've                                  conflated we've conflated the the data                                  and it's even hard you know if you if                                  you have a if you have a site and you've                                  got users submitting submitting content                                  and you have an about me page or about                                  page right the about page arguably                                  that's configuration right even though                                  in the node table the next row is you                                  know some some user submitted content                                  that's content there's no good way to                                  solve it it's it's part of Drupal's                                  design unfortunately that design was one                                  of its enormous strengths that it made                                  it really easy to configure dynamically                                  and I mean with field API you can change                                  your fricking schema from the UI which                                  is awesome until you try to version it                                  so test your upgrade process is                                  religiously that's why I said it's                                  probably the most important thing to                                  test again the universe is an annoying                                  place                                  the question is how can I replicate my                                  lamp stack with all the various server                                  configs and all that so my return                                  question is how did you set it up in the                                  first place so right so you installed                                  the packages if you install the packages                                  by hand the only way to replicate it                                  that i know of is to install them by                                  hand I mean so there are alternatives if                                  your if your production environment is a                                  virtual machine let's suppose it's it's                                  in UC too it's an Amazon ec                                             can make a snapshot of your machine you                                  can make you know either a bundle or if                                  it's boot from EBS you can just create                                  an actual snapshot and you just boot                                  that machine again and that's a clone                                  and that will actually work the and I                                  think a lot of people do it that way and                                  now you know it's an exact replica the                                  problem with that is that now you know                                  let's say you do that it works great and                                  then in a week you're like oh I want to                                  install a new package you install it in                                  production you make a snapshot now you                                  have another new clone and its current                                  but now what you've done is you've                                  started iterating your machine                                  environment without automating building                                  it from scratch and when you lose that                                  am I when it blows up for some reason or                                  you realize you've made a mistake you're                                  not going to remember the steps you went                                  through to get there so that leads to                                  tools like puppet or chef for automating                                  the configuration of your machine from                                  scratch and then what happens then is                                  now you're building a Drupal site and                                  you're also building a machine                                  configuration application right which is                                  your puppet code or your chef code and                                  you can do that and now you're running                                  continuous integration on your Drupal                                  site and you're also running continuous                                  integration on your machine                                  configuration code so this is now this                                  machine configuration layer that's a                                  software product that you're writing and                                  you need to version it and you need to                                  test it and you need a clone of that                                  environment to test on it becomes a                                  pretty big job and that's why companies                                  like pantheon and aquia have implemented                                  a server infrastructure because we do                                  all that work so you don't have to other                                  other than automating it with the tools                                  we used I don't have an answer for you                                  but you can't do it lots and there was                                  session I think yesterday that talked                                  about doing that so that's available you                                  know the video for all these are                                  available it was that your question or                                  not                                  right how can you make sure they're                                  exactly the same sorry mmhmm yeah so I                                  mean what what we do is we also operate                                  a cloud we always start from a base                                  machine image which is we happen to use                                  a boon to so we start from the official                                  canonical a boon to distribution so we                                  know that's always the same we're                                  booting the same am I and then                                  everything that we need to change we put                                  in puppet and then we always we have a                                  test environment we're constantly                                  building new machines from scratch and                                  testing them and these tests that I                                  described would take six hours to run                                  and then we deployed a production we                                  take you know the latest version of our                                  code we basically do continuous                                  integration on at the machine level and                                  we upgrade all of our servers and we                                  test that upgrade process pretty                                  carefully so it's it's a lot of work you                                  know we've got nine engineers plus an                                  Operations team of about ten people                                  writing this environment which is why I                                  can't imagine why anyone building a                                  website would want to do it themselves                                  but some do mm-hmm                                  right so the question is about having                                  you have a you have a dedicated QA team                                  and and how does that work with your                                  development you know when when do you do                                  the QA when you do the code reviews so                                  does your is your QA team are they                                  writing tests or they like poking at the                                  product in a you know fungus krypton                                  right so let's say your question is how                                  do you eat like when do they begin so in                                  my experience and this is now this is                                  now a sort of just personal software                                  engineering opinion here I and a lot of                                  other software engineers believe that                                  the idea of having a separate QA team                                  that writes the test the rights the                                  automated tasks is why ask that question                                  is generally a mistake you want your                                  engineers to write the tests for a bunch                                  of reasons one is there the one who know                                  that who knows the code best there and                                  are best able to automate it what we                                  found when we started knock me a cloud                                  we had a guy who was like he was that                                  the system test implementer he was                                  writing the test and he couldn't keep up                                  you know we'd be writing all kinds of                                  crazy stuff he wouldn't even know what                                  we were doing he was always behind it                                  was a disaster was horrible for him and                                  didn't work very well for us eventually                                  we realized you know writing these tests                                  it's really the engineers job now that                                  being said you still have you know after                                  all the automation you still have a                                  person who goes and pokes at it the way                                  we do it is when we consider the                                  software done we tested as best we can                                  automated we do some poking at it we                                  release it if our QA team or our                                  usability team finds problems their bugs                                  and they get entered back into the                                  backlog and they get fixed on the next                                  cycle I'm going to does that answer your                                  question that's how we do it we just                                  think of it as you know so they're                                  they're not we don't think of them as                                  the QA team that is that's poking at the                                  product we think of them more as you                                  know user experience testers and then                                  they just advise us on things to fix we                                  do use so                                  to be fair right the product i build is                                  infrastructure we all see an aqua also                                  builds you know we run drupal gardens                                  and we have the Aqua Teen network we                                  have much more you know we have website                                  development going on to I don't happen                                  to do it and for that we do have we                                  don't have the QA in house but we use a                                  company I think we use or used to use a                                  company called you test which is a                                  company where you give them a script and                                  they you know they it's out sourced                                  having people poke at your site and I                                  honestly don't know how the teams that                                  work with that that kind of QA                                  integrates it into their site                                  development go by the Aqua booth and ask                                  one guy to talk to is Michael Cooper                                  he's the head of the network how could                                  we network team there's some other                                  people there they can probably answer                                  that okay anything else yes                                  you                                  so what I heard was are you asking about                                  so what's the best way to deploy from                                  development to state into production but                                  then he went on are you you're saying                                  are you asking about code are you asking                                  about configuration changes I couldn't                                  hear that part can you repeat that last                                  part about so what's the best way to                                  deploy your code so this there's a                                  variety of ways most of them are pretty                                  simple I mean you know the codes a bunch                                  of files you have to you have to get it                                  there so an easy way is you've got your                                  development server you've got some                                  repository server somewhere and on your                                  test server you can do you know a git                                  clone or it or an svn check out or                                  whatever option number one you know do                                  the check out right into your doc route                                  that actually turns out to be not such a                                  great idea because one of the things                                  that Drupal needs or is the the files                                  directory right the place where user                                  uploaded images and PDFs and all that go                                  and if you do a you know a git clone                                  right into your doc root directory that                                  files directory has to be there or                                  Drupal's going to get really confused                                  but then when but then you you've gotta                                  check out of your repo that has stuff in                                  it that's not in the repo particularly                                  with svn if you then try to do an svn                                  update all kinds of weird things can                                  happen I think gets better about it but                                  it just generally feels pretty dangerous                                  to have your actual files directory                                  right there so what we actually do in                                  aqua cloud is we do the the clone over                                  here on the side and then we are sink it                                  into place with a command that says                                  ignore the files directory and delete                                  everything else and then at then it                                  turns out actually our files directory                                  is a symbolic link off to the actual                                  file storage area since we're running in                                  a multi web server environment we have a                                  network file system and whatever that's                                  not really germane the and if you're                                  running one server then some variation                                  of that do a clone do an rsync it works                                  fine if you're running in multiple                                  servers then you've got the problem of                                  well you'd like the code to update you                                  know at least approximately at the same                                  time as close to the same time as                                  possible so there's a couple strategies                                  for that                                  we run our updates in parallel so when                                  it's when you know what when a code                                  commit happens we have a job server and                                  we fire you know if we've got three web                                  nodes and a commit happens we fire three                                  jobs all at the same time and so they                                  all end up SS aging into each web server                                  and doing the clone and doing the arcing                                  you can take that even farther with with                                  a technique called the swinging symlink                                  where and you've got your old code repo                                  directory and assembling pointing to it                                  and then you copy your new one into                                  place and then just flip the symlink                                  which is you know the idea is you'd like                                  all your code update at once and that                                  you know the swinging symlink achieves                                  that goal on one server so if you only                                  have one server and you do the symlink                                  technique your code will update                                  atomically all at once the thing is if                                  you've got multiple web servers you                                  can't swing symlinks on multiple web                                  servers at exactly the same time so                                  there's going to be a delay you know                                  this one's going to swing and then that                                  one's going to swing and then the third                                  one's going to swing and so ultimately                                  you can still have page requests hitting                                  your site hitting your database that are                                  running on different you know on                                  different versions of the code so the                                  only way to be really sure I mean this                                  may not be what you ask the only way to                                  be really sure a hundred percent sure                                  that all of your code updates atomically                                  that there's a you know a point in time                                  where page requests are hitting the old                                  code and then there's a big red line and                                  then all page requests are using the new                                  code the only way to be sure is to take                                  your site down put it in offline mode do                                  the update and put it back on most                                  people don't want to do that most of the                                  time it's not necessary most of your                                  code updates yeah you know maybe a you                                  know first of all many of them should                                  work they don't change the schema                                  sometimes if they do change the schema                                  maybe one page requests or two will be a                                  little funky and if it is you can write                                  your code to be paranoid and like say oh                                  if my record has the new property and it                                  works a new way and if it doesn't then                                  work the old way and you leave that code                                  in just for the duration of your release                                  and you can take it out later so I don't                                  know if I've really answered your                                  question or you can come ask me later if                                  I didn't how are we doing for time we                                  are out of time so thank you very much                                  please rate the session you can just go                                  to the session node on the code                                  the Munich website it's number                                         that's easy to remember thanks a lot
YouTube URL: https://www.youtube.com/watch?v=av3xOY69now


