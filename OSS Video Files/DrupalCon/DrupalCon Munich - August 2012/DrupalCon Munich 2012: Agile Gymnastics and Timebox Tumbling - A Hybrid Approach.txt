Title: DrupalCon Munich 2012: Agile Gymnastics and Timebox Tumbling - A Hybrid Approach
Publication date: 2013-03-29
Playlist: DrupalCon Munich - August 2012
Description: 
	Learn from the experiences of Examiner.com's team. We've done it all - cowboy, waterfall, extreme, and agile scrum.

Learn why...

Waterfall doesn't always work
Agile has a place, but isn't the holy grail
Cowboy can kill the relationships you have with your stakeholders
How "Fixed Scope" is a lie
That a combination of approaches is the answer
The Examiner team has carefully honed, updated, improved, and iterated its process for over two years. It continues to evolve, improve, and make development more consistent and predictable.

Project management requires a blend of techniques and tools to effectively shepherd projects from ideation to release. We'll explore and discuss different tools and methodologies that can help make your project successful.

Saunders first presented on this Topic at Drupalcamp Austin as one of the Keynotes. The presentation was updated for Drupalcon Denver. The presentation is being updated and improved upon for Drupalcon Munich!

Saunders has worked in project management at a variety of shops ranging from the Western States Arts Federation as Senior Director of Technology, pingVision as Senior Web Producer, one of several Principals in Vintage Digital, Senior Director of Technology at Examiner.com, and most recently as CTO for Trellon LLC. He writes at Dogstar.org regularly - mostly on the business of open source and Drupal.
Captions: 
	                              well hello everybody I think I'm going                               to get started it's one o'clock we might                               have other people that that wander in                               but figure we can try to keep this keep                               this on time my name is Matthew Saunders                               I am the CTO of Trella trillin LLC it's                               a Drupal shop based in the United States                               largely although it's a distributed team                               across Ukraine the United States and                                Australia it's a recent role for me I've                                been there only about three months prior                                to that I've worked for three different                                three different development shops                                ranging from from shops that did custom                                PHP MySQL applications to to Drupal                                shops if you would like to tweet                                anything my my twitter handle is at                                creech if you'd like to ask questions                                that that you know I might be able to                                answer later on but that'd be great or                                if you want to follow me that's terrific                                too so I want to talk a little bit about                                Who I am to begin with and and sort of                                how I came to came to project management                                and I think that's important because                                like a lot of people in the Drupal                                community it wasn't such a                                straightforward path I was originally in                                technical theatre I was a lighting                                designer and I worked as a as a stage                                manager a number of things like that for                                quite a few years and it's funny because                                I had the last time I did this                                presentation I had three people who came                                to me afterwards and said you know                                that's really weird I worked in                                technical theatre as well so there seems                                to be some kind of some kind of pre                                predisposed disposition for people who                                do that kind of work to do this kind of                                work I've worked in nonprofit management                                I worked for a company called west f the                                western states arts Federation in Denver                                for eight years doing technology work                                for them and also managing grant                                programs                                I marketed for a for a dance company I                                worked in a bookstore wine store taught                                University so you know there's a whole                                gambit of things that that I engaged in                                before I found my found my way to                                technology so west ave was the first                                first first sort of technology company                                that i that i worked for we did custom                                PHP MySQL applications there it was a                                distributed team of developers and that                                actually has ended up being a threat                                across all of the of the work that I've                                done in the past at West staff near the                                end of my tenure there I ended up I                                ended up going to vancouver for a number                                of seminars that had to do with drupal                                and i started drinking the kool-aid at                                that point i'll talk about that in just                                a moment after i completed sort of that                                tenure of work i ended up working for a                                company called ping vision for a couple                                years where i built with a great group                                of developers a ton of Drupal sites that                                somewhere in the neighborhood of                                                                                                            ended up being a really great foundation                                for the work that I ended up doing at                                examiner later on when I finished at                                ping vision a group of us formed a                                consulting company called vintage                                digital LLC and that company I currently                                isn't really taking new new clients but                                it sort of hovers long and keeps keeps                                moving along as well and then there was                                this giant site that people might have                                heard of examiner com that that I was                                asked to Shepherd the the process of                                moving the site from from cold fusion to                                Drupal                                                             Microsoft sequel to mysql and mongodb                                MongoDB is they ended up being the                                database of record but mysql continued                                to do things like bootstrap drupal                                most recently I was brought on to Trella                                as I'd mentioned and sort of this this                                track goes all the way back to Drupal                                                                                                       to the to the platform over the over the                                years although a lot of it has stayed                                exactly the same at least from a UI                                standpoint if you want to contact me on                                a variety of different ways I'm Matthew                                s on do you can find me an IRC Twitter                                 so forth so I'm a cuckoo that's the way                                 I'd like to to describe myself I worked                                 in the nonprofit industry for                                          ended up finding my way to Drupal                                 happenstance encountered as I mentioned                                 while in Vancouver and the reason I'm                                 bringing this up is because i want to                                 encourage everybody to to think about                                 when you see new people coming into the                                 community how many here are new to the                                 new to drupal okay awesome and have have                                 you felt like the community has been                                 welcoming to you that the people have                                 been have been friendly and and have                                 tried to to to make you you know feel                                 like you're part of part of the overall                                 group that's awesome so when you're in a                                 year or in six months or whatnot when                                 you're when you aren't noobs anymore and                                 you see new people coming in give them                                 the same the same kind of experience                                 that's exactly what happened to me and                                 it it transformed my my my opinion of                                 the of the of the platform because back                                 in                                                                       it was you know it was                                 there were there were things like cck                                 had just come into existence views                                 didn't exist yet there were a number of                                 things that that that made it a harder                                 platform to work but the community was                                 what really hooked me and kept me going                                 something that is important also when                                 you're and we're going to talk about                                 communication and a little bit but when                                 we're working with our clients it's it's                                 common for us to forget that we                                 communicate in a very different way                                 we're communicating through technologies                                 like skype and IRC and to our clients                                 these are really foreign they're really                                 odd it's it's not a normal way of                                 communicating and and that kind of thing                                 can lead to can lead to all kinds of                                 stress that that you need to watch out                                 for so you might find this familiar you                                 might find yourself in an emotional                                 state with a client where the client is                                 read a little bit and they're starting                                 to throw out Drupal modules that you                                 know really aren't that good but they're                                 insisting that maybe this is the route                                 that you should take when you're when                                 you're planning at a project and it's a                                 place where you where you find that the                                 client is assuming that something is                                 easy and it won't take much time but you                                 know that that's not true it's place                                 where you wonder where you're actually                                 going to finish a job or even start the                                 job start the building of that job and                                 it's a place where you've realized                                 suddenly that the project is constantly                                 in flux requirements are changing                                 constantly changes the norm predict                                 availability is evaporated and it feels                                 like like the projects and under your                                 feet everybody had that experience yeah                                 so you kind of face this monster I don't                                 know whether any of you have read HP                                 Lovecraft but there's a there's a                                 creature called Cthulhu if you look in                                 its face you go insane sometimes that's                                 how that's sometimes that's how a                                 project management can feel but our job                                 is to communicate its to translate its                                 to mediate its to unblock and our job to                                 a large extent is to take that chaos                                 turn it into calm it's to make everybody                                 else's job easier and it's to make                                 things that are complex simple we break                                 things down into small bite-sized chunks                                 so they can be executed upon and if                                 we're really successful there'll be                                 times when things look like they're                                 running incredibly smoothly and people                                 on the team might say why do we need                                 project managers and at that point we                                 have to make sure that we're not fooled                                 by that that that calm because we're the                                 cat herders and we don't just heard                                 developers and femurs we also heard                                 stakeholders product owners business                                 owners and clients we have to keep                                 communication running we have to keep                                 our ducks in a row and above all else we                                 have to keep our developers from being                                 distracted from shiny things our clients                                 from being distracted from shiny things                                 we need to keep people on track so how                                 many of you show show of hands how many                                 of you have been in the middle of a                                 coding sprint and you've been asked to                                 add one tiny little thing and the the                                 the the reasoning behind it is it's                                 going to make the website so much better                                 and you know you get the you get the the                                 via the statement it can't take that                                 long right how many of you have heard                                 sort of the five lethal words how could                                 heart that how hard can it be show hands                                 yeah                                 so to keep all of this under control                                 requires strong communication and it's                                 not just strong communication across                                 your team it's strong communication with                                 with your clients and with everybody who                                 might be peripheral to your team does                                 anybody here know why manhole covers are                                 really heavy and round right but why are                                 they around why aren't they square or                                 rectangular or not a lot right it can't                                 fall into the hole and they're heavy                                 because it means that I can't it's it's                                 hard for it to lift we do we weird the                                 manhole covers we keep people from                                 falling down holes down rabbit holes and                                 getting hurt and our job is to prevent                                 ourselves or clients or colleagues from                                 from from making making mistakes that                                 that costs money and time so I want                                 everybody to keep in mind that project                                 management is ninety percent                                 communication and it's setting up a                                 framework where your team can                                 effectively communicate with one another                                 and it's listening it's listening for                                 underlying messages and it's listening                                 listening for the unspoken message one                                 of the things that will happen often is                                 a client will fundamentally not know                                 what you're talking about and you'll                                 assume oh they haven't objected they                                 haven't asked questions they must they                                 must know what it is and they must be                                 agreeing with the with the direction                                 that we're taking only to find                                          later that that you've gone down a a                                 precipitous horrible path that has                                 wasted everybody's time and the clients                                 money so you need to be an active                                 listener you need to be actively asking                                 questions and making sure verifying that                                 the client actually understands what it                                 is that you're offering                                 so I'm going to talk about three soft                                 software project management                                 methodologies the reason I'm going to                                 talk about three of them is that I've                                 used them in my career over the last                                    years with varying degrees of success                                 and all of those fed into an experience                                 that I had with examiner which is where                                 most of my remarks are going to are                                 going to end up being structured around                                 that informed a process that we                                 developed together there so the first is                                 cowboy cowboy can be extremely                                 unpredictable but it's fast it requires                                 a great deal of of trust to exist                                 between developers and stakeholders and                                 it can easily lead to miscommunication                                 of expectations it's highly informal it                                 focuses on stakeholders it can be used                                 to like I said in unpredictable projects                                 and it's excellent for rapid prototyping                                 so when I came to examiner in December                                 of                                                                       that were like this and I was told we                                 need you to go through the requirements                                 and give us a sense of how long this                                 project is going to take clearly from                                 the requirements not a single person                                 that had been writing them had ever used                                 Drupal let alone let alone ever written                                 requirements for for Drupal so I                                 proceeded to break it down into                                 bite-sized chunks and I can't charted                                 the entire thing out and what I found                                 was that we're looking at about an                                                                                                    you're talking about a migration of a                                 site that large and not just a migration                                 but also redesign and so forth is                                 actually pretty reasonable it was a                                 migration that would become seven                                 million nodes across of                                              content types                                                         active that needed to be that needed to                                 be moved over a bunch of stuff like that                                 so I went back to the executive                                 committee and I said okay                                 so here's the plan I've got it all out                                 here and its own giant piece of paper                                 and we can talk through it and what I                                 was told was oh no no you don't                                 understand we've got seven to nine                                 months to get this done and I just sort                                 of went oh all right well there's only                                 one way I know how to do this then with                                 the time period that we've got we got to                                 throw all these requirements away we've                                 got to talk about your basic business                                 business needs and then you've gotta                                 trust that me and the team that we're                                 going to give you what you need but not                                 necessarily what you expected                                 fortunately the the executive team was                                 open to that and we went into a period                                 of time of rapidly iterating sometimes                                 the iterations were as short as half a                                 day so we'd write code and then we turn                                 around and sit down with a product                                 manager and say does this look right and                                 we would do that over and over and over                                 again and in fact certain portions of                                 the design weren't completed until we                                 literally were on the last day of                                 development prior to                                                  site in situations like that cowboy can                                 be quite effective but the challenge is                                 that it it puts it puts the stakeholders                                 in a place where they feel really out of                                 control and they are they at that point                                 they have very little control on how the                                 project moves forward so what that meant                                 was at the end of that seven to nine                                 months they were like we hate                                 predictability and so we moved into more                                 of a waterfall kind of methodology at                                 that point and what that means is you're                                 sacrificing speed for predictability it                                 was much much slower everything was                                 having to be defined up front and again                                 we were in a situation where the project                                 management team was teaching the product                                 team how to write requirements for for                                 Drupal because they were simply weren't                                 used to that and that ended up not being                                 so successful and the reason was that                                 the the the executive team had gotten                                 used to things happening really really                                 fast                                 how many folks here have worked with                                 waterfall with the waterfall methodology                                 yeah most of you if that's cool and how                                 many of you in another show of hands how                                 many of you have actually had a                                 waterfall project where the scope didn't                                 change ken that's that's impressive so I                                 would I would I would maintain that                                 waterfall in its purest state it doesn't                                 exist except for Ken because he's hard                                 ass and the reason that I say that is                                 that you're always going to have a                                 situation where the client comes back                                 once there's once they start seeing what                                 it is that you're building and they say                                 whoa that's not quite right which means                                 that you're really you're really engaged                                 in already engaged in in a hybrid more                                 agile kind of process now some people                                 may disagree with me and I know that                                 there are lots of shops that have had                                 had a lot of success working in what                                 waterfall methodology but I tend to                                 think that it doesn't work that well for                                 Drupal projects and that's because of                                 community code you can find yourself in                                 a position where somebody is released to                                 set of modules that do very much what                                 you need it for the client and you                                 install them and they work great and                                 suddenly you're managing to compress                                 your timeline likewise you can install a                                 group of modules that you think that                                 you're going to use and then find                                 something is conflicting and then you                                 got to go through a whole series                                 debugging to figure out why it's not                                 working the way that you expected to                                 work which which can then extend your                                 your your your timeline the other thing                                 about waterfall is that sometimes it                                 depends on the the situation that you're                                 in but it can often make devs feel like                                 they're not inclusive in the in the in                                 the process and the more that dev your                                 developers feel like they're included in                                 the process the more engaged they are                                 and the more they will they will own the                                 you know those portions the project                                 and you're going to end up having people                                 who are far more willing to to take the                                 extra steps go the extra mile do the                                 extra hours if need be in order to get a                                 project project completed you can get                                 into a situation where developers feel                                 like they're order takers rather than                                 rather than creative members of the team                                 and that's that's a pitfall that you                                 don't want to fall into you get people                                 who are disengaged you don't get nearly                                 as good good a product at the end when                                 that happens so this is an experience                                 that we had at examiner you felt like                                 maybe things were going fairly well in                                 waterfall but then because of changes in                                 the middle of the project and the desire                                 for the for the client to have have                                 things being displayed quickly so they                                 had things to look at you suddenly feel                                 like you're on a on a jet plane that's                                 out of control I certainly felt a good                                 portion of the time that was planned but                                 hurry up plan but hurry up plan but                                 hurry up and I I don't think that that                                 work sold out well so then we get into                                 agile and agile requires that we weave                                 that we move that were flexible and that                                 there's predictability in a single in a                                 single time box as to what the                                 deliverables are agile doesn't mean the                                 client can suddenly say at any time oh                                 no that's not right I want to I want to                                 do something else what it means is that                                 you're defining short sprints and you're                                 saying in this period of time this is                                 what we're going to accomplish                                 you have defined time boxes you work in                                 iterative development methods that means                                 that as you build things as you as you                                 prototype things you'll you'll you'll                                 rapidly iterate on those prototypes                                 depending on what the feedback is that                                 you get from the client and in some                                 cases you may actually throw a chunk of                                 code out entirely because it doesn't fit                                 their fit their needs it's incremental                                 and it tends to be collaborative and                                 this is where developers really get                                 engaged and and really end up becoming                                 invested in a project within multiple                                 time boxes it puts you in a place where                                 you can be rapid and flexible and                                 responsive to change and I think the                                 last point is almost the most important                                 that when you're in an agile environment                                 your teams are self organizing the                                 developers sit down they say oh I want                                 to do this and another developer says oh                                 I want to do this piece and you take a                                 look your time box and ventually you                                 figure out who's who's going to do what                                 with the project management team                                 ensuring that nobody is taking on too                                 much or too little so to recap that                                 chunk cowboy fast can cause problems                                 with expectation gaps between business                                 and team can be volatile waterfall slow                                 changes inevitable which makes makes for                                 rough situations sometimes requirements                                 often fight what Drupal does naturally                                 if you don't have folks who know Drupal                                 writing the requirements developers                                 become order takers not active                                 participants so phase three of this is                                 I'm going to talk about agile hybrid                                 approach that that we ended up                                 developing at examiner this is going to                                 be pretty high level I'm not going to                                 get into needy nitty-gritty details but                                 folks are welcome to talk to me about                                 the details after the after the                                 presentation if you'd like so                                 I like this slide it is how one group                                 sees another group and what I found                                 across four different for different                                 companies is when you get into the                                 situation where where team members are                                 fractured they're not they're not                                 communicating well they don't feel                                 invested you get factions a group so                                 you've got developers who see designers                                 is as babies and a bunch of a bunch of                                 paint and you've got to develop that                                 you've got developers who see designers                                 is rather designers who see developers                                 as being big babies and you know the                                 whole the whole nine yards um you don't                                 want that to happen you want the team to                                 be cohesive and without when you get                                 into this situation there's no traction                                 you don't have any traction any longer                                 there's a lack of trust and there's                                 frustration amongst folks across                                 different departments and that can                                 actually use that into into into your                                 clients your clients vision of who you                                 are as well it makes for not                                 high-functioning teams so one of the                                 things that we needed to do was we need                                 to develop a process that would work for                                 everybody across the team and what this                                 really means is that you have to have                                 everybody involved in making the                                 decisions of how you're going to operate                                 everybody needs to have input and                                 everybody needs to have buy-in because                                 you've got one bad apple it kind of                                 makes the whole house of cards fall                                 apart everybody has expertise and and                                 they can bring that expertise to the to                                 the table from the bet from the get-go                                 and that's really important so in the                                 book outliers by Malcolm Gladwell cim                                 Gladwell he talks about how in the                                       number of commercial flights quite a few                                 more than average started crashing there                                 was no there was no reason from a                                 technical standpoint why this was                                 happening there was no reason from an                                 environment                                 standpoint they weren't flying into                                 hurricanes or anything like that so as                                 it was being being investigated as to                                 what was going on it turned out that                                 communications were constrained by the                                 rules of social hierarchy first officers                                 and engineers weren't talking to captain                                 because they were because the they had                                 the expectation that they weren't                                 supposed to talk to the captain they                                 didn't feel at ease to speak directly to                                 them and talk about concerns so planes                                 were going down because people with                                 expertise who could advise weren't                                 advising they weren't speaking up they                                 weren't being heard one of the strengths                                 of agile is that it is flat everybody is                                 equal everybody everybody has a say when                                 you're working in a July anybody who's                                 on the team is allowed to write user                                 stories based on based on the on the                                 business requirements everybody                                 everybody is is supposed to be listened                                 to so it's really critical that you                                 start creating an environment where                                 everybody feels comfortable offering                                 suggestions and this puts us in a place                                 where it's much easier to identify risks                                 and then unblock problems it's really                                 important to have communication via                                 scrums so every morning having a                                    minute stand up where you just go                                 through go through each project really                                 quickly that you're working on no more                                 than                                                                    then retrospectives and demos at the end                                 of the the sprints are often overlooked                                 but I think are critical to the process                                 you want to have a culture that                                 eliminates blame where people can own                                 mistakes and that they are asking for                                 feedback and that they feel like they're                                 being listened to and that when they                                 have and and when when other people are                                 speaking that they're being listened to                                 as well                                 so I'm going to talk about four                                 different roles that that we had their                                 first was the project management team in                                 our case these guys acted as scrum                                 masters they lead it they let in in                                 pointing out projects and pointing out                                 projects just means figuring out how                                 long something is going to take how                                 difficult it is they were responsible                                 for protecting the dev team from                                 distractions during coatings prints as                                 we get into the timeline we'll talk a                                 little bit about that as well and they                                 inch their job was to ensure that the                                 team didn't make mistakes it's really                                 common for developers to have the most                                 rosy picture of how long it's going to                                 take for for for a given chunk of                                 functionality to be completed and you                                 need just you need to have in your head                                 a sort of factor this developer                                 consistently takes twenty percent longer                                 than then they think that they're going                                 to take in a few cases you'll have                                 developers who actually work faster than                                 they then they expect but you need to                                 start thinking about you know how long                                 is this actually going to take and and                                 protecting your team from making                                 commitments that they can't follow                                 through on and then finally the project                                 management team managed schedule yeah so                                 in in agile rather than talking about                                 hours or days you're talking about story                                 points so you're identifying how tough                                 something's going to be and a point the                                 point is a weird thing it can it can                                 talk about difficulty but it also can                                 talk about time at the same time and                                 there are lots of really great books on                                 on how to point how to point user                                 stories for fragile but yeah that's                                 that's what I'm talking about so then                                 the the second group were the product                                 team now the product team owns the                                 backlog backlog is a long list of                                 features that ultimately you're going to                                 build and they would write the personas                                 epics and stories a persona is basically                                 who it is that's going to use the site                                 and how they're going to use it and what                                 their perceptions are going to be of the                                 site epics are like sort of overreaching                                 you stories and then stories are you                                 know one sentence as a site visitor I                                 want to I want to be able to register                                 for a newsletter that would be a simple                                 story we don't want the product people                                 trying to write requirements because                                 they're not very good at it but they are                                 very good at identifying what the                                 business needs are so then the other                                 thing the product team needs to do is                                 clarify business needs so if the story                                 doesn't make any sense the project the                                 project team needs to work with the                                 product team to make sure that they get                                 to a place where it does make sense and                                 then finally the product team should be                                 demoing the software at the end of                                 sprint developers self-organized the                                 selected stories in a given sprint they                                 figure out who's going to do what when                                 they're going to do it they decide what                                 can and can't fit into a given time box                                 so if you empower your development team                                 to say you know what we can finish this                                 amount of stuff but not this amount of                                 stuff you you you're typically going to                                 find yourself in a place where they meet                                 those expectations consistently then                                 they define the implementation of those                                 business needs so you don't have a                                 situation where you've got folks outside                                 the development team who are trying to                                 tell the development team how to design                                 the software you're looking at business                                 needs and trusting the development team                                 are going to implement on those business                                 needs effectively and then finally they                                 execute so I'm going to talk now a bit                                 about a                                                                  sprint you can easily break this into a                                 two-week sprint I've done both they both                                 have different advantages and different                                 shortcomings but for the for the sake of                                 this this presentation I'm going to talk                                 about a four-week sprint                                 a four-week sprint isn't just the                                 developers writing code I like to talk                                 about a                                                              want for the business to be thinking                                 about what it is that they want to have                                 built in the future I want them to be                                 thinking of you know in general what                                 direction the ship is going to be going                                 in and in communicating with the product                                 team as to how when they'd like to see                                 in general these these features get                                 developed                                                             product team who are writing stories                                 creating the artifacts like wireframes                                 and and comps to support those stories                                 and and getting the project team and the                                 development team to greater and lesser                                 extent being involved in in asking                                 questions and so forth so you get a nice                                 long backlog of user stories that are                                 completed with artifacts and then the                                 the most the the current                                            where we're actually engaged in the in                                 the sprint the coating of what it is                                 that we're building so the product                                 creative timeline looks a little bit                                 like this those first two days that are                                 green are planning days those are                                 devoted to the development team and                                 basically during those two days the                                 product team has to be involved in                                 helping helping clarify any last                                 questions that the development team has                                 had in the previous sprint having to do                                 with this set of functionality that's                                 being built after those first two days                                 the team goes into in                                                                                                                         folks are engaged in writing the stories                                 for the next for the next sprint and                                 taking care of developing our the                                 artifacts comps wireframes and and so                                 forth and then when you look at days                                    through                                                                  comps delivery of the epics and the                                 stories and then on day                                                 lock down the time box they have to say                                 okay this is what we're doing next time                                 around                                 you don't want once the lockdown occurs                                 you don't want there to be shift you                                 want the curt that time box that you're                                 currently in to be fixed so you've got                                 predictability for everybody across the                                 team and then on the last day there it's                                 demo and retrospective and the product                                 team would demo the current software                                 that's just been built so then you've                                 got the development team the first two                                 days there they're asking questions                                 they're clarifying they're they're                                 putting together their technical                                 architectures they're making sure that                                 they're talking amongst themselves to                                 incur to to ensure that they're they're                                 engaged in the most efficient way of                                 developing that chunk of functionality                                 whether it's custom code or contributed                                 modules or a combination of the two                                 after the the first two days and there's                                 days                                                                   the ground their coding and during that                                 period of time the project management                                 team is is is acting as defense they're                                 making sure that the that the developers                                 aren't getting you know tapped on the                                 shoulder and questions are being asked                                 of them by the you know by other other                                 folks on the team because those kinds of                                 distractions are really expensive you                                 don't want your developers during that                                 period of time to be engaged in context                                 switching you want them to be thinking                                 only about what they should be doing                                 during that sprint these                                               is the time that that the functionality                                 that they've built is being debugged                                 tested etc and it's also the time where                                 they have a chance to talk to the                                 product team and the project management                                 team about the next sprint what are the                                 stories that are coming coming up and                                 and you know this doesn't make sense to                                 me and and so on and then on day                                    deployment and then day                                             retrospective it's really important that                                 to you know to to understand that these                                 feet three sets of sprints are                                 overlapping so you've got the business                                 that are thinking about what they want                                 in the future you've got the product                                 team who are who are and the designers                                 etc who are thinking about what's going                                 to happen next and you've got the                                 development team who are doing what's                                 happening now so that it ends up looking                                 a little bit like this wherever things                                 overlapping yeah um typically typically                                 the each of the teams whom to developers                                 one themer project manager and a QA                                 person so fairly small teams yeah this                                 was for a four-week sprint yeah                                 they're very occupied because they're                                 looking at the at the stories for the                                 next for the next sprint and there and                                 they're fixing bugs as the QA team                                 identifies bugs but one of the things                                 that that I found was that when you can                                 get developers into a cycle where                                 they're doing slightly different things                                 over over periods of time they stay                                 fresh and they stay engaged if you have                                 them doing nothing but coding all the                                 time they they start to lose their edge                                 so it's it's a good way of keeping                                 keeping things sort of mixed up yeah                                 absolutely absolutely peer reviews is                                 critical yeah okay so one of the things                                 that we did was we we then took all of                                 these deadlines that you see in here and                                 the project management team would assign                                 these in google google google calendar                                 to each of the people that had that had                                 deliverables so they would automatically                                 start getting pinged a day before you                                 know this is what this is what you've                                 got due tomorrow and and the idea behind                                 that was to make sure that the artifacts                                 the stories the epics the comps the                                 wireframes all of these things are                                 getting done when they need to get done                                 yeah                                 well the self organized team are looking                                 at at the current stories and deciding                                 the developers are deciding who's going                                 to do what and when in terms of                                 producing you're producing your your                                 user stories to begin with and and                                 producing the wireframes and comps and                                 so forth they the product team and the                                 design team have to work together in                                 terms of that and identify who's going                                 to do what and the project management                                 team they're their responsibility at                                 that point is to make sure that all of                                 that is being scheduled correctly but                                 you may have one designer who says oh I                                 want to do this piece of the of the next                                 of the next sprint that's that's also                                 you know you end up having having fairly                                 self self organized team serves as well                                 so that brings us to demos and                                 retrospectives if you if you start using                                 an agile methodology don't let don't let                                 the the higher-ups in the company tell                                 you that demos and retrospectives aren't                                 valuable I think that one of the things                                 that you that you'll find with a demo is                                 that it helps everybody know but                                 everybody else was working on and in the                                 future that pays dividends because                                 somebody may have worked on a on a chunk                                 of functionality that applies to another                                 project to another client in the future                                 and because the demos occurred it gets                                 sort of into the into the culture and                                 the ethos of the entire company as to                                 the kinds of things that have been work                                 done it also means that everybody knows                                 what the status is of a given given                                 project at a given time so there's sort                                 of check-ins across the company it                                 builds respect because people like to                                 show what they've done they like to be                                 proud of what they've worked on and it                                 lets folks know who to ask questions of                                 and who to go to in terms of learning                                 how to use a given chunk of the product                                 if need be directly after a demo it's a                                 really good idea to have a retrospective                                 traditionally these are called                                 post-mortems                                 that word because people aren't dying so                                 i like to call them retrospectives where                                 you look back at your your time box and                                 you talk about what worked and what                                 didn't work and it needs to be a safe                                 environment where everybody feels like                                 they can they can discuss what worked on                                 what didn't work but at that point you                                 can then iterate your process and                                 improve your process so so each each                                 sprint each time box becomes better and                                 better and better and smoother and                                 smoother and smoother during the the the                                 retrospective also it's it's a the                                 project management team is held                                 accountable for any problems that had                                 been discussed in the previous sprint if                                 they haven't been addressed in the                                 current sprint so that gives you a sense                                 of sort of the timing across the sprint                                 if you take this down to a daily level                                 um it's important to have daily scrums                                 and that's literally                                                    up talk about what you did in the last                                                                                                          next                                                                     once you've identified what the blockers                                 are you don't want the team talking                                 about them in that meeting you want them                                 to break off into into into groups of                                 people that can solve those problems                                 outside of the outside of the scrum you                                 want it to be fast and then over                                 so tools I'm going to talk about tools                                 for a few minutes it's really important                                 that you not get yourself into a                                 position where you believe that the                                 tools are what define your process you                                 want to have a strong process in place                                 to begin with and then have the tools                                 support that process all the companies                                 that I've worked for have been highly                                 distributed even the ones that were                                 bricks and mortar were highly highly                                 distributed or they acted as if they                                 were highly distributed for for you know                                 a variety of different reasons as a                                 culture Drupal operates in IRC a great                                 deal even bricks and mortar companies                                 the team members will be communicating                                 in IRC and you know it would be really                                 great for you to talk to your system                                 administrator if if you haven't already                                 to get more of a safe spot module                                 installed so it's logging the IRC                                 channel that you're that you're working                                 with in to a Drupal instance so you can                                 go back and you can take a look at the                                 communications that have been going on                                 one of the things that I do every day                                 and have for six years is I'll do a                                 rapid scan of the previous day's logs to                                 see what people were talking about to                                 see whether there were any any issues                                 that need to be addressed that folks                                 aren't bringing up it's just a really                                 good practice and then of course skype                                                                                                   current job we're starting to use Google                                 Hangouts a whole lot and they're there                                 they're great one of the reasons that                                 they're so powerful is that it's not                                 just video chat you also have an IRC                                 style chat sort of on the left-hand side                                 and you can screen share in ways that                                 you can't do in groups and skype so you                                 might want to check out hangouts if you                                 haven't it's pretty pretty great                                 communication tool also google docs are                                 really handy so what you see here is a                                 is a list of user stories the user                                 stories that are green are ones that                                 have been complete                                 the users stories that are yellow are                                 ones that are currently being worked on                                 and the the areas that are pink are                                 identifying where questions have emerged                                 from from the team questions that need                                 to be answered across this google doc                                 you'll see that there's storyid priority                                 where where the artifacts live for that                                 for this particular for this particular                                 story the actual story itself any notes                                 that are there feedbacks of feedback                                 links two comps timing of when it's                                 going to occur ticket numbers level of                                 effort who the who the lead dev femur QA                                 product person is going to be this was a                                 really effective way when we were using                                 track track has you know in terms of                                 ticketing well we we migrated the team                                 from track to JIRA with greenhopper                                 which is another which is another ticket                                 management system greenhopper makes it                                 great for for doing agile projects and                                 we actually got rid of the Google Docs                                 entirely because we were able to do the                                 same thing natively within within JIRA                                 with greenhopper but still this is a                                 good way of managing managing the                                 stories within a given sprint single                                 place you can see what these stories are                                 you can put in your questions so other                                 tools that that sort of sit in the in                                 the in the tool box I've talked about                                 track a little bit some kind of                                 repository you want to make sure that                                 you're using a repository github is                                 great we use sketch pretty heavily                                 because we're drupal rather a mac shop                                 sketches so you can do screenshots and                                 they can be assigned to tickets and so                                 forth so you've got visual                                 representations of what you're looking                                 at our DevOps folks we're using Jenkins                                 for for doing deployments basically                                 Jenkins is a is a wrapper around scripts                                 so you can script all of your different                                 DevOps types of things and then use                                 Jenkins to to to run those scripts in a                                 pretty                                  the whole way different google google                                  documents we use drupal for for logging                                  our IRC channels jing for for doing                                  video on problems that you might be                                  seeing same with ScreenFlow and then                                  JIRA as well started using Google                                  Hangouts like I said join me as well                                  which is another good a good screen                                  sharing piece of software it's free and                                  again the IRC channels what happened for                                  us is that we went from being fractured                                  and being infective to being a highly                                  cohesive group that was getting work                                  done much faster much more efficiently                                  with a higher degree of quality when we                                  moved out of out of working in a                                  waterfall methodology into a more agile                                  methodology and it put us in a place                                  where we weren't overburdened by                                  specific requirements that we knew what                                  the general general needs were of the                                  business and then those general needs                                  were interpreted by the development team                                  and and then executed by the development                                  team in that in that fashion I think                                  that that it put to put that team in a                                  place where we were delivering what to                                  what the business needed not necessarily                                  what they expected but what they needed                                  and it also allowed us to rapidly                                  iterate on on on pieces of functionality                                  so that's the end of my presentation                                  like my remarks we've got a few minutes                                  for questions folks have questions yeah                                  but go ahead and use the microphone I                                  think the microphone is yeah                                  qat Missa tee is it on okay                                  you                                  um the test cases weren't being put into                                  Jenkins but the with the but simple                                  tests were being written so there's                                  test-driven test-driven development that                                  was going on so the tests were being                                  written before the before the code was                                  actually being written but at the same                                  time the QA team were we're developing                                  test cases for for testing the the UI                                  and the UX after the fact and also                                  putting together regression tests for                                  the for the entire for the entire site                                  so each so each development cycle each                                  sprint a full regression could be done                                  of the site prior to pushing the next                                  set of code to production some of it was                                  manual someone was using selenium so it                                  was a variety of different different                                  kinds of efforts that were being taken                                  on that so you know there was there were                                  written test cases the the simple tests                                  that have been written and then selenium                                  selenium tests that have been developed                                  as well                                  mhm                                  mm-hmm                                  sure                                  sure yeah yeah for sure in in in our                                  case the the QA team were not developers                                  they were individuals who had experience                                  in in writing test cases but not                                  necessarily necessarily reviewing code                                  and because there's heavy peer review                                  going on through the whole process it                                  was you know that that level of QA was                                  being done by the development team                                  themselves one more and then we'll go                                  into yep yeah Oh paired programming is                                  great if you've got that if you've if                                  you've got the the time for it a because                                  it takes a little bit longer be when                                  you're working with junior developers                                  it's fabulous it's a great experience to                                  have a senior developer working directly                                  with a with a with a more junior                                  developer I think the I think the the                                  challenge is really if you're if you're                                  in a very very tight time time crunch                                  sometimes it's easier for a developer to                                  simply take on the task and then hand                                  off their code to for peer review after                                  the fact but I I'm a fan of paired                                  programming I think it's good                                  maybe that that single developer bite                                  certainly feels like                                  high high risk project like maybe or                                  something                                  sure so if you're dealing if you're                                  dealing with banking you don't want to                                  be doing agile like you you don't you                                  want to because you don't want scope                                  creep in that in that instance at all                                  you want you want all of your                                  requirements up front because you make                                  one mistake you're you're you're up the                                  creek so if you're talking about you                                  know something like that I I wouldn't                                  recommend using agile I would go right                                  back to a to a to a waterfall a                                  waterfall process and I would be doing a                                  heck of a lot of prototyping and paper                                  prototyping to begin with so they know                                  exactly what it is that they're getting                                  and you get sign off at every single                                  step but yeah I I wouldn't I would you                                  know anything that's dealing with with                                  money like that yeah sure sure yeah you                                  can you can use to senior guys together                                  as well impaired programming that works                                  really well if you're talking about                                  having them having them sort of bounce                                  ideas off of one another yes sir                                  sure so the question was I made a made a                                  statement that that certain members of                                  business aren't great writing                                  requirements who should be writing in                                  the requirements so I I would break this                                  up into different kinds of requirements                                  when you're talking about the business                                  needs the business requirements                                  absolutely having some kind of of of of                                  narrative that explains what it is that                                  the that the business is looking for                                  should be written by the product team in                                  conjunction with the with the with                                  leadership of the company what I'm                                  talking about is is when you get to a                                  point where where you're talking about                                  how to actually execute on those needs                                  so you have your your business                                  requirements to begin with and then the                                  product then the product team takes                                  those business requirements and writes                                  their their their user stories based on                                  what leadership is indicated that that                                  they want leadership signs off on those                                  on those user stories and epics and at                                  that point it's handed off to the                                  development team who look at the user                                  stories and they're the ones that do the                                  technical the technical requirements                                  based on the user stories that's what I                                  was talking about                                  mm-hmm                                  the business can say it needs to support                                  a thousand concurrent users but the                                  business can't say this is how we want                                  you to do it that make sense yeah yes                                  sir                                  sure so the question is can this work on                                  multiple projects with smaller teams                                  yeah it's a little rougher it's a little                                  harder the trick is to is to try as much                                  as possible to encapsulate those those                                  individual small teams on on on single                                  projects so you're not trying to have                                  competing interests engaged with one                                  another across projects that's actually                                  one of the things that we're working on                                  at rellin right now to figure out how                                  best to implement this kind of process                                  and and understanding that we may have                                  anywhere from from                                                    that are current currently running at                                  various levels of completion it can be                                  done certainly have have been successful                                  in in other shops in the past but it's a                                  little tougher for sure yeah absolutely                                  how do we let how the question is how do                                  we sell agile to clients so there are a                                  couple of ways that it can be done there                                  are a number of high-profile shops that                                  do just that they sell sprints they                                  don't sell requirements they don't you                                  know the look at requirements and                                  they'll say yeah we think it'll take                                  about this amount of time but then they                                  sell sprints so they say you've got two                                  weeks and you've got to developers and a                                  femur and a project manager and you will                                  will help you identify what we're going                                  to do in each of those sprints and then                                  they sell those sprints and when the                                  client says you know we're done then                                  then then they're done when you're                                  talking about fixed bid projects we the                                  way the way that I approach it is I                                  don't talk about agile I don't talk                                  about sprints they don't get it often                                  they're looking for for specific results                                  we may act in a sprint fashion we may                                  behave as a team in a sprint fashion and                                  and and what we'll end up doing is                                  saying to the client we need you to take                                  part in                                                        conversations to to clarify issues as                                  needed we need you to take part at the                                  end of to each two-week period in a in a                                  review of the of the of the work that                                  we've done so it you you approach it in                                  a different way you don't you don't end                                  up talking about agile and scrum and                                  sprints and and and so on because I                                  think it's a foreign concept to a lot of                                  a lot of clients who just want their                                  website built yes sir                                  sure the question is one of the slides                                  talked about how cowboy can-can damaged                                  relationships with with stakeholders so                                  the whole notion of cowboy is that you                                  are in your you're working in a small                                  team that doesn't have any set                                  requirements that have a vague idea of                                  what it is that you're building and then                                  you go and you rapidly iterate right and                                  if you've got a tight team that are all                                  on the same are all in the same page and                                  they're doing prototyping that works                                  really well but if you've got                                  stakeholders who are outside of that                                  tight little team who are are perhaps                                  maybe a client or if it's a company that                                  you're working within that have their                                  own website that you're working on you                                  can miss expectations completely because                                  they're there they're separated from the                                  process and you know cowboy requires you                                  to be highly engaged in the process all                                  the time and once you start missing                                  missing those expectations it damages it                                  damages trust damage and that will                                  ultimately damage those relationships                                  and once you lose trust yeah you know                                  you're sunk the question is have I ever                                  seen that happen absolutely one hundred                                  percent I've seen I've seen trust get                                  destroyed and and and teams teams become                                  dysfunctional because of of those missed                                  expectations yes any other questions                                  yeah                                  sure                                  yes mention a scenario                                  sure so the the the question is in                                  instances where unpredictability of                                  people's lives like getting the flu                                  disrupt a sprint how do you adjust for                                  that so in Google Docs I agree with you                                  it's a lot harder to to shuffle things                                  around if you're using a tool like like                                  JIRA with greenhopper you can pull you                                  can pull tasks out of out of a given                                  sprint and move them into the next                                  sprint and and it will automatically                                  readjust your your-your-your velocity                                  the whole notion of velocity is that                                  there's a certain speed at which you can                                  complete complete tasks and it goes back                                  to the points and if you've got fewer if                                  you've got fewer user points available                                  to the team during a given sprint                                  unexpectedly then your velocity is                                  slowing down significantly using google                                  docs I mean what what we would do is                                  we'd gray out we would gray out on the                                  on the dock any stories that we had                                  decided we weren't going to address at                                  this time and then it would end up in                                  another tab and they would be the                                  product team would literally copy and                                  paste those those those great out                                  stories to the next to the next sprint                                  yeah yep                                  there is a gentleman back there actually                                  sure so the question the question was                                  when yet after the demo and the end user                                  starts playing with the with product how                                  do you deal with with change requests                                  bugs etc zach is that accurate so there                                  are two ways that that we've addressed                                  that the first is that change requests                                  get put into the backlog and are in our                                  prioritized by the by the leadership                                  team in whatever sprint they decide they                                  they want those those those changes to                                  be put in place for bugs during the Q a                                  period in the in the next in the next in                                  the next sprint provided provided it is                                  in a critical bug it's addressed during                                  those those days that were yellow on                                  that on that slide if it's critical then                                  then then we may be in a position where                                  we're saying okay we have to we have to                                  pull this resource off for this amount                                  of time to complete complete these tasks                                  that was disruptive when we first                                  started doing it but we we ended up                                  building a rapid response team so there                                  were each each each sprint there would                                  be one or two individuals who would be                                  devoted to bug fixes and so forth and                                  that that actually ended up working                                  really really well for us alright I                                  think that we've run out of time if                                  people want to chat with me feel feel                                  free to feel free to grab me in the                                  hallway or whatnot I'm I'm friendly and                                  if if if you wouldn't mind making sure                                  that you put feedback that P be fabulous                                  I'd appreciate it and my slides are are                                  up on the up on the the page that had                                  the description of the session at this                                  point I believe and my contact                                  information is in there so feel free to                                  feel free to reach out happy to chat                                  with you                                  thanks everybody hey you
YouTube URL: https://www.youtube.com/watch?v=iFnZrSe5s-s


