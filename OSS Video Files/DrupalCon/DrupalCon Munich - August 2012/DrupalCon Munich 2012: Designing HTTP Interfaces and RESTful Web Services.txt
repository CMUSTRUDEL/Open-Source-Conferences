Title: DrupalCon Munich 2012: Designing HTTP Interfaces and RESTful Web Services
Publication date: 2013-03-29
Playlist: DrupalCon Munich - August 2012
Description: 
	A lot of Web Services today claim to be RESTful APIs. But are they really? Do the URLs accurately identify resources? Are the powers of HTTP leveraged properly? What is "Hypermedia", what is the Uniform Interface, and what is the secret behind the HATEOAS acronym that is so essential to the REST architectural style? This talk gives answers and guidelines using real-life examples.
Captions: 
	                              he shooter                               is that no good at first welcome to give                               it on unless invited about the city wash                               then I'm going to imagine there's no                               fully featured sessions or any put                               cyanide                               no those                                            and none of the double                               and then that we hit see this is denied                                if it hands him a bite to smoothly                                well it was more than seats its                                accomplice the Muslim Anthony minor                                defragment even led an inciting incident                                defragment evil I found but in                                congestion twin villain Hyundai of the                                Ox after of the seeking a fight                                and famine wait until those people sit                                hey good morning everybody and thanks                                for showing up to the last feature                                session in the development track I hope                                everybody attend at the keynote and if                                you remember the HTTP commercial that                                fair beyond it you are now in the right                                session to learn what this is about so                                I'm very happy to present you David                                circa please David go ahead good morning                                can you hear me well if you cannot hear                                me well at any point during this                                conversation throw a soft object my way                                I'm really excited that this is a                                feature session so I wasn't even aware                                apparently something special                                okay but thank you for showing up so                                early in the morning I'm sure you've had                                lots of beer yesterday so I really                                appreciate you showing up so early                                whenever I'm at a conference I sleep                                until noon and then I'm late for lunch                                even this session is called designing                                HTTP interfaces and restful Web Services                                welcome to the last few people I'm a                                minute late sorry not very German of me                                myself this is my name you can spell it                                with an e because I am in fact German                                and you might recognize this city I                                think you've been there                                I work in Munich as one of the founders                                or partners of a consulting company                                called pit extender we do various                                scalability web architecture stuff                                things also lead developer of the darby                                framework for PHP and this is my twitter                                nickname in case you have Wi-Fi at the                                minute you can follow me and praise or                                bash this presentation as I proceed with                                it I want to start this talk with a look                                at how things were before the term rest                                was even popular                                and back back in the day is whether it                                was a simple personal webpage that had                                some sort of guest book or comment                                feature or a big webshop all the rails                                kind of looked like this right so you                                had the index I PHP question mark                                something and then at some point during                                well after the after the millennia break                                the turn of the century people started                                freaking out hey we can earn money on                                this internet thing so along with that                                came the SEO experts and the Oh Co                                experts said no you can't have these                                URLs important at least the German one                                said for water so we had to make the                                URLs SEO friendly right like this so                                that's dongle Olin and then things                                really spun out of control because                                really nobody had a clue what they were                                doing and also the advent of Ruby on                                Rails where you put everything with                                slashes in the URL then things spiraled                                really out of control because from the                                latest hamburger videos you get to some                                obscure things like local picture I                                guess one two hundred things and around                                the same time the web the the whole idea                                that we need service-oriented                                architectures and that we need to you                                know have layers of in our systems etc                                became really popular and for quite a                                while the soap standards was popular                                still because it is one of those dot-com                                bubble things where XML was everything                                so people kept using that and you have a                                post request to some sort of I'm sorry I                                don't have dual lasers that would be                                really cool actually                                it could be like like the arnold i will                                be bad so i'll be yeah so i'll pace like                                a tiger in a cage between these screens                                 occasionally so for you good morning so                                 you would post to a soap endpoint right                                 and there is an envelope and a body and                                 it has the get product thing there and                                 that tells the server what operation we                                 are calling and in this case we are                                 calling the get product operation and we                                 want to retrieve a product based on an                                 ID which is a arguments to that method                                 it's simple remote procedure calls right                                 we are calling a procedure remotely on                                 another service and the details of how                                 our objects that are marshaled into xml                                 and Marshall back to and some other                                 object on the service side is completely                                 transparent to us when we call it                                 because in code we just call a get                                 product method on some sort of object                                 and it does it over the wire and then                                 the response is going to be the red                                 stapler with only one two three four                                 five six and a price and somewhere                                 there's a whistle file with an XML                                 schema the whistle file defines to get                                 product operation and the schema defines                                 the responses etc so the product object                                 has three fields and then if the error                                 happens because the product doesn't                                 exist then so really it doesn't take                                 advantage of any of the HTTP features                                 because it's designed to be transported                                 Gnostic so can be done over HTTP there                                 is actually a standard over SMTP for a                                 very long time Amazon did so calls                                 dozens of sub calls for every product                                 page through custom socket connections                                 with custom serialization they didn't                                 serve lies from into XML they used                                 sockets but the principle was the same                                 and at least in this in the spec for the                                 transport of HTTP it says well if there                                 is an error on the server side a sope                                 fault which again is very generic you                                 could use an HTTP                                                     error code okay so at least on the wire                                 indicates some sort of failure but if                                 you have an ADD product operation it                                 doesn't return to a one creator code                                 it's it always says                                          and the whole thing of marshaling these                                 things and the envelope and then people                                 don't understand XML schema and don't                                 understand whistles so they built the                                 XML by hand because they don't know that                                 they can just you know load it into a                                 client and just fire off a request soap                                 sucks that's what really everyone said                                 and it's true to a really big extent in                                 many cases it does really suck so let's                                 build api's without the clutter for                                 instance one of these examples is the                                 joined in API the old one there is a new                                 one now under joined in API you make a                                 request which again as a post request to                                 some sort of generic endpoint and you                                 pass some sort of envelope with XML and                                 in the XML you enclose in the operation                                 that you are trying to call in this case                                 we are calling and get detail and we're                                 passing at a talk ID and as you can tell                                 the authentication details are in line                                 here in the request it doesn't use HTTP                                 authentication so you cannot have a                                 generic proxy in front of your web                                 server that handles authentication you                                 can also not have a proxy in this case                                 that says well it's a get operation so                                 we can catch that because the proxy                                 needs honest needs to understand your                                 custom application logic and your                                 application semantics it needs to know                                 that it can inspect a post request                                 because it might be a side effect free                                 request and then it may cache the                                 operation whenever it starts with gets                                 or something like this that's not good                                 summary it's always a post it doesn't                                 use HTTP authentication for instance                                 among many other things that it should                                 be has to offer the operation that                                 you're trying to call and this is the                                 really really important bit is enclosed                                 in the request and completely                                 domain-specific even though the protocol                                 HTTP hasn't means of conveying this it's                                 not cashable because of this without a                                 lot of custom logic and everything goes                                 through one endpoint there is a guy                                 called Leonard Richardson he once wrote                                 about a maturity model for restful                                 applications and then Martin Fowler who                                 wrote patterns of enterprise application                                 architecture among other things you                                 might have read that book                                 picked it up and said this is                                 Richardson's maturity model this is                                 really cool and what we just saw is                                 level zero it's plain old XML over the                                 wire you could improve that by giving                                 every resource so every talk and                                 individual URL so you don't go to API                                 talks you go to API talks one two three                                 four five that would be level one in                                 this maturity model as something really                                 important for you to remember is that                                 level                                                                 and you don't want to use them ever okay                                 what is with my slides there we go keep                                 that in mind don't do this stuff because                                 you're really just repeating souks                                 mistakes and so failed                                 now we built these sort of api's and                                 people fiddled with the URLs and stuff                                 and there was this HTTP thing it should                                 be insanely smart protocol so all the                                 people out there they say you should be                                 searching so slow it closes the                                 connection idiots they don't they                                 haven't understood it yet but we needed                                 someone to point us to why it's great                                 and that was this Roy fielding guy and                                 he gave us this term rest and that was                                 really really awesome because everyone                                 could say I have a REST API now when in                                 fact they bloody didn't because they                                 haven't understood what rest really                                 means it's the term is an abbreviation                                 for representational state transfer and                                 it's define in this dissertation of his                                 he published in in the late                                             even or something architectural styles                                 and design of network based software                                 architectures note how he doesn't say                                 web or HTTP in fact the whole thing is                                 not about the web well it's about                                 networks but it's not about HTTP it's                                 about how your design software and                                 systems that have dependencies etc                                 in such a way that they can scale with                                 the growth of a network and what traders                                 you need to make when you make                                 communications over the network right                                 and in this this this rest thing defines                                 a bunch of constraints the notable ones                                 of which are a client-server                                 architecture which is a really obvious                                 requirement right we have a browser                                 making a call to a web server these                                 requests are stateless so there is no                                 implicit mechanism in the protocol                                 saying or allowing a server to know that                                 a subsequent request from the same                                 client is in fact from that same client                                 and there's some sort of built-in                                 session mechanism because as we'll look                                 at latest sessions don't really scale                                 well we added this feature with cookies                                 but the protocol itself should not have                                 that for really obvious review for it                                 really well logical reasons if it's                                 stateless it's really easy to cache it                                 also because it's a layered system                                 that's important there can be any number                                 of intermediaries between a server and a                                 client and it's completely transparent                                 to the caller or the responsive so if I                                 make a call to some sort of web server I                                 don't care how many proxies I go through                                 and I don't care how many load balancers                                 I go through and how many reverse                                 proxies I go to go through right that                                 means that you guys can deploy a varnish                                 just there and you don't have to change                                 anything                                 imagine how ridiculous it would be if                                 you had to change the the calls from the                                 browser to your web server just because                                 he deployed a varnish it's not even                                 possible in soap you kind of have to do                                 this you can you can target                                 intermediaries in your in your in your                                 calls etc because they overthought                                 things designed by committee right AGT                                 was just a bunch of guys with beers and                                 the problem in the science field they                                 said ah let's just do this another                                 constraint is code on demand which is                                 completely optional and a good example                                 of which is a server shipping javascript                                 code to the browser to enhance the                                 experience we can completely ignore that                                 because for our purpose for the purpose                                 of this talk doesn't really matter                                 and then and this is the important one                                 we need a uniform interface who knows                                 what the uniform interface is ah that is                                 the important thing the uniform                                 interface basically states we have a URL                                 that identifies a single resource we use                                 an operation a method in HTTP or a verb                                 in common language to perform operations                                 we get the slash cart we put two slash                                 products there's one two three four five                                 we delete slash categories slash fifteen                                 right we do not include the operation                                 that we want to delete something that we                                 want to get something show something in                                 the URL because it's implicit from the                                 verb if we say delete slash product                                 slash                                                            identified by that URL should be deleted                                 we don't need the lead slash product                                 slash                                                                 sense it's redundant                                 and we use a hyper media format a hyper                                 media format to represent the data and                                 then we use link relations to navigate a                                 service these last two bits are                                 particularly important because these are                                 the things that make rest restful                                 without these it's just HTTP we look at                                 those in a detail in a moment but in the                                 meantime as a first aha for you in the                                 room maybe consider this a web page is                                 not a resource remember how I said a URL                                 identifies a resource a web page is not                                 such a resource it is merely a                                 representation of that resource because                                 any resource can have any number of                                 representations we could make a get                                 request to the list of products and then                                 we say we accept JSON and we get a list                                 of products as JSON and then we can                                 repeat the same request and say we want                                 XML and then we get XML neither XML nor                                 Jason are hyper media formats because                                 they have no defined semantics                                 Jason is just a definition of how you                                 serialize objects XML is just a markup                                 language where it basically says well                                 there's a bunch of tags and it's really                                 just stuff delimited by angle brackets                                 we can make a call with a browser and we                                 can want HTML back in this case we're a                                 safari we asked you for XHTML HTML and                                 other things and we get HTML back which                                 is a hyper media format because it                                 attaches meanings to tags we'll talk                                 about that in a moment                                 before we talk about the whole hyper                                 media thing we want to talk about just                                 HTTP without all the magic because the                                 first step to rest is getting the HTTP                                 stuff right and that's where most people                                 fail unfortunately once you have that                                 then you can worry about real rest and                                 hypermedia so designing an HTTP                                 interface means well first of all you                                 need to think about your resources you                                 don't have to but it's really useful                                 because if you do that then it helps you                                 for like you know just your own                                 development purposes and the                                 understanding of your own system to know                                 what are the entities in your system and                                 how do they relate so commonly you would                                 see URLs such as product because this is                                 so this is people who put all their                                 holiday photos in a folder called photo                                 and you do okay                                 and then you can filter by I don't know                                 if this is cats as actually kidding                                 people's or categories could be an                                 abbreviation so we filter by cats                                 descending order and if we don't want to                                 filter in descending order and we if we                                 want to add like a keyword filter we                                 probably add more slashes and then we                                 really quickly get a problem where we                                 have ambiguous your else what we can't                                 figure out over to what to do anymore                                 right then we have an individual product                                 which apparently has a list of photos                                 the wrong way around                                 right this is strange and then say I've                                 seen stuff like this in the wild a lot                                 and it it's not bad per se cuz so works                                 right it really at the end it doesn't                                 matter what the URLs look like but it                                 tells me that people haven't even                                 thought about what items what what                                 elements from their problem domain do                                 they even want to represent on the web                                 does this create a new photo or a new                                 product and is is this a photo ID or the                                 productivity right this is all the                                 confusions that you could get so I                                 always start even though it's completely                                 unnecessary as we'll see later by just                                 saying okay these are the URLs that I                                 will have in my system to identify                                 resources I'll have a list of products                                 and I'll use the query string please use                                 the query string to filter because                                 that's what it's for                                 don't add more slashes for filtering for                                 ordering for sorting for selecting                                 fields it's a query string right because                                 then any client out there can easily                                 construct such a URL with question with                                 additional parameters and it knows how                                 doesn't have to know what the order is                                 maybe with additional slashes an                                 individual product has a sub resource of                                 photos the HTTP specification actually                                 states this that well it doesn't state                                 it explicitly but it's implicit from                                 some things it says about the post                                 request is it's something that has more                                 slashes in it is a sub ordinate resource                                 right more slashes means it's more in                                 this case it means the photos belong to                                 the product that's what HTTP says about                                 its URLs which is kind of strange                                 and then again you could have penned a                                 query string to sort by the latest                                 products or address any individual photo                                 and the fun thing is that once you've                                 done this and then once you move on to                                 real rest if you want to then it really                                 doesn't matter what your ends look like                                 and they could be random hashes but it's                                 good for humans good for developers to                                 understand what they're dealing with                                 right and it's really helpful for                                 yourself to understand what the                                 relations in your system are so try and                                 do this then once we've defined these we                                 want to use them right so we have a                                 collection of products we can now make a                                 get request to this to get the list of                                 products obviously we could also post to                                 that location to create a new sub                                 ordinate resource that's in this HTTP                                 specification says all our posts could                                 trigger scripts or something or it could                                 make something underneath this location                                 so in this case we make a new product                                 question for the attendees only for                                 those who haven't been in this talk                                 before what does this return what should                                 this return true                                 have you been in this talk before good                                 many people then return an ID what do I                                 do with that ID the product ID sorry                                 well but I have only an ID what do I                                 load but it's just an ID I don't have a                                 Europe I have an ID how do I get the URL                                 so I append it to this but then I need                                 to know how to construct your else and I                                 need to curl them to my client right                                 that's not good because well I need to                                 know what to prepend maybe one day I'll                                 be in a subfolder or I want to use the                                 same mechanism on a set of related                                 resources where don't repent / photos                                 but i prepend / songs or / music so what                                 this operation should return I'm not                                 talking about a webpage with a form on a                                 form we need to return a                                        something and the location header to                                 redirect blah blah blah I'm talking                                 about like with its brothers a broken                                 HTML is stupid                                 but ideally right the way the protocol                                 is designed we return and if you want                                 machines to interact you need to return                                 a two or more creators because that says                                 I've created a new resource and you can                                 find it at the location specified in the                                 location header and then you follow that                                 link and you don't have to program any                                 knowledge of how to even get to a                                 product given an ID into your client                                 because there isn't even IDs maybe you                                 just use the URLs as IDs on the public                                 facing side of the API and once you have                                 such a product we can get it to retrieve                                 it right we could make a put request to                                 update it if we put then we need to                                 enclose the whole product which is very                                 very good many people say oh that's                                 stupid because it's not a bandwidth                                 efficient it's important to do that                                 because imagine that I put details to                                 the product but I don't send all fields                                 I just send the price                                 right to update the price well maybe                                 someone else is updated the price maybe                                 someone else has updated the description                                 in such a way that my price makes no                                 sense anymore right                                 you have concurrency issues really                                 quickly HTTP uses something called                                 optimistic locking where basically you                                 don't have any locking so what you do is                                 what I server can do is when it when it                                 sends you the product in in a get                                 request it says Oh Content ID content                                 length blah blah blah blah and it can                                 give you an e tag which is basically a                                 hash a fingerprint of the state of the                                 product could be a hash of all fields or                                 something it sends you this etag and                                 then when you update when you make the                                 put request and you enclose the whole                                 product with an updated description and                                 an updated price field and a new                                 category you can send along another                                 header saying                                 if match and then this fingerprint that                                 you got into e together and then the                                 server can compare this and say yep                                 that's the fingerprint I still have so                                 I'll let you update if it's not the                                 fingerprint the server still has then                                 that means that someone else updated the                                 resource in the meantime and then it'll                                 say precondition failed that's the                                 status code response and then say sorry                                 that'll tell you the client because it's                                 in protocol it'll tell you ah my etag                                 means my e-tag has changed so I need to                                 get the requesting the resource again                                 maybe and compel the fields and ask the                                 user if his update should still be apply                                 because he could override changes etc                                 and then you can retry the request with                                 a new hash if there's a lot of people                                 writing then that means that you could                                 you'd have to try a thousand times until                                 your update goes through right under                                 high concurrency but you don't have one                                 idiot locking and resource than going on                                 a holiday so optimistic locking is good                                 the put is used to update something the                                 delete is obviously to delete something                                 right and                                 you could also return any other status                                 code like a                                                              I is not good or you could say you could                                 return a foreign line conflict on delete                                 because you say you can't delete that                                 category because other products to                                 depend on it or something like this and                                 one thing that you should remember is                                 that whenever you do these things for                                 for machine to machine interactions                                 don't ever let the server maintain any                                 sort of client state it's fine to have                                 for instance a temporary URL identifying                                 search results or something like this or                                 a shopping cart right in with a unique                                 URL because you have a machine that                                 likes shopping                                 because it just got Amazon Prime I just                                 got Amazon Prime I order five things a                                 day from Amazon so I could build some                                 API bot thing that just all this stuff                                 but when you're a machine                                 cookies are stupid because then in your                                 client is like a keep track of it and                                 it's really not the way to go every                                 request you make should be stateless so                                 if you want a bot that shops then you                                 should have a post request to slash                                 carts too and then the server creates a                                 new shopping cart with a temporary URL                                 and then in there you somehow put your                                 items so that one client could have a                                 hundred shopping carts at the same time                                 it's not a problem we typically deal                                 with when we write a web app right on                                 the web app we have to slash cart and                                 that's a shopping cart for the person                                 with the current session but for                                 machines we can't do that because we                                 need parallelism and we don't want                                 client state in any way on the server                                 side we don't want clients to deal with                                 cookies so once we've done all this we                                 are at level two in the richest and                                 maturity model we are using HTTP verbs                                 get is both safe and idempotent which                                 means we can repeat at any time and it                                 doesn't have any side effects other than                                 you know visit tracking and stuff like                                 this we could use a post request which                                 is really not safe because it creates                                 something new it has a side effect                                 unsafe doesn't mean it blows something                                 up it just means it does something                                 and it's not idempotent because if we                                 repeat it five times then we have five                                 new products for instance unless there                                 is any custom logic on the server that                                 automatically detects duplicate products                                 right but that's not some some well                                 somehow on the protocol level potent                                 elite are also unsafe because they well                                 delete something right or update                                 something but we can repeat them a                                 hundred times if we delete a product                                     times it's still gone if we update yeah                                 if we update a product with the same                                 details a hundred times it's still the                                 same details right                                 that's idempotency you could repeat the                                 operation and it doesn't give you the                                 different results those slides by the                                 way are going to be there actually on my                                 session page already as PDFs so if you I                                 saw some people taking photos you don't                                 have to and we do this we use URLs to                                 identify resources and we have HTTP                                 status codes to somehow indicate where                                 is result success or well failure so we                                 could send a foreign line conflict if we                                 say that price is too low for that                                 category because we're selling super                                 cars and they can't be five dollars no                                 which is really sad would be very nice                                 now who's used the Twitter API ever good                                 so a bunch of people know it it's not                                 good no it's not very good it's not good                                 at all that's the point of the next                                 slide so we're looking at Twitter's                                 thing and it's we don't even have to                                 bother with HTTP because they get rest                                 because they get HTTP so wrong that it                                 really hurts so in this case we're just                                 looking at how well does it use HTTP the                                 way you're supposed to use HTTP and in                                 its current state we make a get request                                 to show an individual status we make a                                 post request to status update we destroy                                 something by doing sending a delete                                 request or a post request we can send                                 both which is stupid                                 we can make a get request to get the                                 list of retweets and we can make a put                                 request to retweet something to a                                 completely different URL so the first                                 problem is it doesn't even allow the                                 exit data it's not just that it ignore                                 you can you can append JSON or XML to                                 URLs you cannot use the accept header as                                 a client to say I want JSON or I want                                 HTML so you need to construct your else                                 differently for the same tweet depending                                 on whether you want it back as HT XML or                                 JSON which is not good because remember                                 it's one resource and it has different                                 representations the only reason JSON and                                 XML and HTML and PDF exists is so                                 browsers can get various versions of the                                 same content right that's the only                                 reason it exists because if we link                                 somewhere then the browser's gonna say                                 well I accept like this HTML thing and a                                 bunch of images and really everything                                 because it can download things right so                                 that's why we have dot CSV for the sales                                 guy so he can download his sales                                 statistics from the back end but                                 machines don't need that machines can                                 use the protocol the way it was intended                                 so it says give me that thing as                                 quantitate whatever we delete the                                 destroy here this well is really                                 redundant but we really want to do is we                                 want to delete this location right there                                 will be enough why is destroying the URL                                 and why is it in front of the ID why is                                 it out statuses without one two three                                 four five destroy so the show is also                                 really redundant then we can get a bunch                                 of retweets and we can make a new                                 retweet why are these different I don't                                 know it's yeah                                 but there is one these are all in some                                 way cosmetic in some way nitpicky as                                 well as why do we put to make a new                                 retweet that's not that's really against                                 the spec but that's just you know me                                 with my German OCD hat on                                 there is one big problem in this                                 interface specification it's in the                                 second line who can tell me what the                                 problem is with the update thing first                                 of all what does update do guesses                                 please it creates a new tweets that's                                 why it's called update very logical                                 right but what is the problem there it                                 doesn't tell you                                 well it doesn't update anything makes a                                 new tweet exactly for who does it make a                                 new tweet that's a really stupid                                 interface because because I've seen this                                 a swerve seen this before the Twitter                                 web interface where Twitter's own                                 support accounts had the ability that                                 different employees posted it would be a                                 really really cool feature for Twitter                                 to have because they could sell that to                                 businesses they sell well you have five                                 support guys all in charge of Twitter                                 they can post to your company Twitter                                 account with their own credentials and                                 then we display posted by and then these                                 okay or something right you would you                                 want to be able to delegate access to                                 your account so Derek because he trusts                                 me so much could give me could give me                                 access to his Twitter account because he                                 trusts me so much and then I could post                                 on behalf of Derek but using my login                                 right now that's not even possible                                 because I can't can't say I want to post                                 to the statuses collection of Derek                                 order right I can't do that                                 so it won't be much nicer if that's API                                 the reason why I'm bringing this up is                                 because I was thinking many of you know                                 this API and I can tell you what's wrong                                 with it and how to do it better and it's                                 really obvious how to do it better once                                 you've seen it like it he'll be our                                 you really just want to list a status                                 right where you can also post to create                                 a new tweet and then any individual                                 status is addressable through a URL and                                 you can delete it or put if they ever                                 want to allow updates in the future like                                 for                                                                      could say okay that's fine and then                                 after                                                                 method not allowed done and you have a                                 bunch of retweets and then you could                                 post to that or something like this to                                 create a new retweet right that'd be                                 really nice and really tidy but instead                                 they have been mess I showed you earlier                                 the mess in many cases is just cosmetic                                 in case of the status update it's a                                 really big forward compatibility problem                                 they can never without adding a new                                 endpoint thing for this add this                                 functionality where the delegate access                                 ever and that's not good because then                                 you need to maintain two things forever                                 well not if your Twitter Twitter just                                 switches off all things that they've                                 added that was even worse design but                                 yeah that's a whole different story so                                 we've looked at this despite many people                                 getting HTTP wrong etc the web is still                                 this really massive thing right that we                                 use every day and that's growing and                                 growing but why is the web so successful                                 what is the reason                                 the world wide web has become the first                                 data exchange system that spans the                                 whole planet because email is really                                 another data exchange system right our                                 planet by the way looks like this if you                                 haven't if you don't know                                 and everywhere there there's computers                                 and they can communicate well you can                                 now say well I can communicate with                                 email which is true but if I send one                                 half of this room an email with really                                 important information then the other                                 half of this room like that half has to                                 walk over to that half and say hey                                 what's her email address so my email                                 addresses and I'll send you an email and                                 then maybe can you send me the really                                 important information back and the guy                                 who's just in the bathroom he's just                                 really out of luck right he has to call                                 someone with a phone and then okay so                                 that's that's not data exchanges she's                                 like letters right um so why is the web                                 grown to something where you just post a                                 link on Twitter and other people can                                 click the link and follow with them but                                 everyone has the information even an                                 hour later when someone forgot to tell                                 them they can just look it up elsewhere                                 well the reason is because of the                                 hyperlink right because the hyperlink                                 means we have no tight coupling it makes                                 the web loosely coupled by design before                                 that we had gopher where you had links                                 and stuff and it was all persistent                                 connections etc but the the modern web                                 has no notification infrastructure if a                                 resource is deleted if I link to some                                 web page right and then that web page                                 somehow decides to change all its links                                 I don't know that I don't they don't                                 have to send me and not notice they                                 don't even have to they don't have to                                 ask me hey can you change your link so I                                 can change my URL no because that would                                 be that wouldn't work right that doesn't                                 scale instead I just get a                                               because the web fundamentally embraces                                 failure it's in the design they knew                                 things will fail very early on when HTML                                 was conceived                                 you know how HTML has a rel link on                                 links there is also Rev which is the                                 inverse relation and those guys were                                 eggheads at CERN they do nuclear laser                                 rocket stuff right which is really cool                                 but they also like integrity of links                                 and they                                 sources and they attribute everyone in                                 the papers so they could have said every                                 link has to have an inverse link so                                 whenever I add a link to a document they                                 have to say I add you as referenced by                                 imagine how ridiculous it would be if I                                 have to call Google and say hey guys I                                 want to link to you can you link to me                                 from your start page that's what we did                                 in the                                                            exchange things to go up in the ranking                                 at Yahoo and was still managed                                 maintained by hand Google don't care the                                 link to them and Google don't care I'll                                 link to something that they want to                                 change they just do which means that we                                 can add more information we can spawn                                 new web servers thousands of them every                                 minute and it doesn't add any more                                 friction on an architectural level there                                 is more Network I already and obviously                                 we as humans have to find the content                                 but that's a problem of the search                                 engines right it doesn't I as a website                                 author and not affected if someone in                                 China boots up on your web server                                 creates a new website and links to me I                                 don't care                                 I can I can tell from my web server logs                                 but that's it so there is no limits to                                 scalability we can in a hundred years                                 this approach is probably still going to                                 be around I don't have persistent                                 connections there is no spell you know                                 no complicated protocols there is no                                 rules on how to do something because                                 back in the early                                                  clever people devised a protocol centric                                 system that what still works to this day                                 even on Mars if you want to go to Mars                                 so that's done and I think I have                                    minutes left is that correct yeah                                 vol.                                             now this is the fun part I promised we                                 looked at the uniform interface earlier                                 remember we say we identify resources                                 through our URL we have conceptually                                 separate representations and through                                 these representations we manipulate the                                 resources with a complete thing we sent                                 the whole product it doesn't mean that                                 you can't optimize that you can always                                 say well I have a product and I add a                                 new sup URL we're just just can get the                                 description it's just a virtual thing so                                 you have products one two three four                                 five slash description and then I can                                 put to the description just the                                 description to update the description                                 right you can do that at any point in                                 time if you say well products have five                                 megabytes and I really don't want to                                 send that over the wire but you                                 communicate through complete                                 representations whenever you want to                                 update something and each of these                                 relevant raishin is completely self                                 descriptive that means a server receives                                 it and it knows it doesn't have to keep                                 track of the requests you made earlier                                 from the URL the method and the contents                                 it can determine what to do and then and                                 this is the fun ingredient we need                                 hypermedia as the engine of application                                 states so really ugly acronym this hey                                 dear OS but it's the piece of that was                                 still missing and the puzzle up until                                 now because the question is how does the                                 client even know what to do with a                                 representation how does it know to go to                                 the product we just created right how                                 does it go to the next page in a search                                 results how do you create a new product                                 in a list of products where's the whole                                 contract for the service remember so                                 who's you soap in the past okay a bunch                                 of people or heard of it up like roughly                                 know what it is yeah you have a whistle                                 file right the whistle file is not a                                 contract for the service all that says                                 is there is a gap product operation and                                 it requires these arguments and it will                                 give you this object as a response what                                 it does not tell you is that you have to                                 call initialize before you can call                                 execute                                 right it doesn't tell you what the                                 meaning is of the product it returns and                                 that there is a category ID field and                                 then you can call get category using                                 that ID that's nowhere to be found in a                                 machine readable way you have to write                                 that down in documentation nobody reads                                 and then people about the help how                                 much the API sucks right and this thing                                 theoretically anyway solves it we want                                 to use links to allow clients to                                 discover new locations and                                 representations so in a product we have                                 a bunch of links to the categories right                                 and in order to for the clients to                                 understand that it is a link to a                                 category we have to somehow tag the link                                 we have to say this is a link of type                                 whom which is a link relation and                                 because the clients don't need to know                                 what the URLs for a category look like                                 they can change is a server can at any                                 point in time change the URL to a                                 category and nothing breaks because the                                 client just looks it up from the product                                 object if it stores and remembers                                 bookmarks basically the category URLs                                 well that's a problem so maybe I should                                 add redirects because I want to be a                                 nice server right and that ultimately                                 abstracts the whole application workflow                                 and you can really easily change things                                 without having to make                                                  most important clients and scheduling a                                                                                                      system and if you want you conversion                                 the hypermedia type itself we'll look at                                 that in a moment and ultimately that                                 means that you don't break the clients                                 if you update your implementation if you                                 add information change the way links                                 work etc really good examples are XHTML                                 or Adam well they're not really good                                 examples Adam is very generic so it's                                 hard to grasp things with us at first                                 and XHTML is really special because                                 XHTML why did the Tetris meaning two                                 elements the meaning is this is a                                 paragraph or this is an image but what                                 do you want when you have an API for                                 machines to consume you know opening up                                 your whole shop inventory you wanna say                                 this is a prod                                 and this is the price so you could roll                                 your own media-type we could say well we                                 want to get an individual product and                                 now we say we accept applications                                 Latvian d.com dot Ahmed Shah Plus XML                                 the application / something plus XML                                 syntax you may have seen before with                                 XHTML it basically means that this media                                 type is based on application XML which                                 means it has the serialization semantics                                 of HX XML right it's angle bracket tags                                 and you can parse with a Dom or sax or                                  pool puzzle and then we say well the V&D                                  dot prefix is really open to the public                                  basically so I can just you know                                  register that because if I if I call it                                  application slash david + xml then the                                  guys at Ayana will be really angry and                                  sent me letters how angry they are with                                  me so I don't want them I get a HTTP                                      ok I say yep it's that content type I                                  also already include information that                                  you can also get into lease on that                                  location and there's my product in this                                  case I actually reuse add some names XML                                  namespaces for the link relations                                  because it obviously has a link element                                  to find some people can just look at                                  that documentation I don't even have to                                  document it anymore and there's a rail                                  payment that the client can then be                                  programmed against to go to the payment                                  operation and now that's level                                           mmm right and XHTML is really really                                  good for that it has most importantly                                  namespaces and it has a unique document                                  model that allows extensions JSON is a                                  bit more difficult because it doesn't                                  have these things and because really it                                  is not built for exchange of information                                  by parties who had certain not                                  necessarily on the same level of                                  implementation it is a thing to                                  serialize objects so for                                  machine-to-machine api's it's not always                                  the best choice if you compare these two                                  then we already here have a price which                                  is already an object because we thought                                  hey there needs to be a currency but we                                  can't evolve this now                                  we can't add a price without breaking                                  things because here in XML I have bacon                                  and first of all XML from its document                                  model allows mixed content so I can                                  express my love of bacon without                                  breaking the document structure and I                                  can also add a second price element                                  without changing the document structure                                  because if any client here wants to                                  retrieve the price it has to say between                                  the first price element under product                                  and return me the value so if I add a                                  second one I won't break that client in                                  JSON if my price is afloat I can't                                  change the price to an object with                                  amount and currency and later to an                                  array of objects that breaks a client                                  the client expects a float in the price                                  field right so with JSON you have to put                                  a lot of effort into designing something                                  that's really complicated and hard to                                  read just keep that in mind we can add                                  new names right and we can all of a                                  sudden give the name an attribute by                                  saying that's in the language                                  such-and-such and it doesn't again break                                  the elements so it's a lot more                                  extensible which is really important for                                  systems such as Drupal where you have                                  lots of service then a plug-in could add                                  an element from a different namespace                                  put attributes and elements from                                  different namespaces and it's still all                                  into operates with the basic setup                                  someone on the other side of the planet                                  that syncs documents and doesn't have                                  the plug-in installed and now the one                                  thing that you should keep in mind is                                  that if you don't want to go through the                                  trouble of your own media type and then                                  only using links to navigate etc then                                  that's just HTTP and not a restful                                  service and that's totally fine                                  right and in some ways it can be totally                                  fun and in some ways it's the only way                                  to do it every use couchdb anyone okay a                                  few people ever ever used Amazon s                                   if you upload something to Amazon s                                   does it know that it's an image of you                                  and your dog does it care that the XML                                  document describes a rocketship well                                  maybe it does I would care for describes                                  a rocket ship but s                                                       is so basic that you can't have                                  hypermedia stuff there because it just                                  stores things right and so does CouchDB                                  out of the box so you don't want I put                                  me here there so it's fine if you don't                                  want to do that or even don't want to go                                  through the hassle so just don't call it                                  a REST API we're gonna look at two quick                                  examples of good ish hypermedia Fonuts                                  first it's the LOVEFiLM api which i                                  suppose many of you are familiar with                                  all those from the United States it is                                  the same thing as Netflix so we have                                  here a bunch of links at the top because                                  we searched for the term all in the                                  game's catalog and as you can tell it's                                  a bit small but you can also look at it                                  later we have links here with rel next                                  next is has a universal meaning across                                  all media types right it's defined the                                  Ayana has a link relations list and it's                                  defined and there as it's the next thing                                  in a sequence of things so if I want to                                  build a client that ingests all the                                  titles with the term old from the                                  Netflix from the LOVEFiLM catalog I'll                                  build their clients that keeps following                                  the next link until there is no more                                  next link done I don't have to                                  understand the stupid total results                                  items per page thing and then compute if                                  I am already at the total results                                  because I have certain so many items per                                  page and then construct some query                                  strings or even slash URLs to go to page                                  three four or five I don't care I just                                  follow the next link that's good right                                  and there's also a self link a self link                                  is really important                                  self does not mean the current documents                                  self just means this is the item I'm                                  enclosed in in this case that is the                                  document element so that means this is                                  the location where this search happens                                  and you can see here they have an ID                                  element inside the catalog title that's                                  actually not ideal what this should be                                  is a link rel equals self href equals                                  and then that again because it links to                                  the catalog title the self link is                                  contained in the catalog title and then                                  you can build code that goes through                                  every page extracts the catalog title                                  element and passes it to some completely                                  different code that you maybe didn't                                  even write but it's a complete                                  self-contained catalog title and it has                                  a link rel self so the code that handles                                  it even knows the URL where this thing                                  is from so when it stores it in a                                  database it could maybe store a                                  recurring process that every day goes to                                  the URL fetches and you see if there's                                  any changes in updates or database all                                  by following links what you can also see                                  here is at the bottom they have a link                                  rel blah blah blah blah slash reviews                                  review or synopsis is not really                                  something Universal the universal link                                  relations that you can use anywhere our                                  whole self next previous alternates the                                  ones you know from HTML reviews is                                  really something custom so they                                  prepended their own URL to avoid naming                                  collisions there is nothing at that URL                                  it's just an identifier but they link to                                  the reviews now these fellows last year                                  the year before get bought by Amazon                                  they could tomorrow decide that Amazon's                                  product reviews for Knights of the Old                                  Republic are much better than the ones                                  on Louisville and they can swap that                                  link for one pointing to amazon.com                                  slash something something something and                                  as long as it returns the old familiar                                  media type still the client doesn't                                  break the client doesn't even know that                                  they the implementers changed the link                                  from love film.com to amazon.com no                                  breakage and that becomes really                                  important because you run a Drupal site                                  that reviews things and then or is a                                  catalogue of things and then you want to                                  link to another Drupal install that has                                  the reviews and you can just do it you                                  can                                  but while the system is up and while                                  there is a million mobile phones out                                  there calling your API if you design it                                  right they can improve this still they                                  use application XML which means on a                                  semantic level means there is no                                  semantic meaning attached to any of the                                  elements in this document                                  it's just angular brackets so they                                  should be using application /v + e dot                                  Khandala film                                  api + XML or something and then they                                  document that type saying this element                                  means this that elements means that then                                  they could also use XML namespaces so                                  say this is a search and this is a                                  catalog title and they're in different                                  namespaces that you makes code reuse                                  easier but that's a minor thing what                                  they should do is for every link they                                  have not just say where does it point                                  what's the href and what's the rel they                                  should also say what's the content type                                  behind that link because you could link                                  to the reviews then in the LOVEFiLM api                                  format and in the amazon format and in                                  the meter critic format and as HTML for                                  human readers basis already said it's                                  just easier if you have a client and you                                  just throw at this catalog title then                                  the code can say i-it's the elements                                  called catalog title it's from the                                  namespace I was programmed against so                                  everything's fine I can parse this if                                  not I just have bored right away I                                  closed the network connection maybe                                  another good example is the huddle API                                  it's also well documented on Google code                                  they also have a lot of links and here                                  you can say see we have a bunch of actor                                  elements that each has a self link                                  identifying the actor in this case they                                  make a bunch of mistakes because they                                  use far more avatar here as rels but                                  they're technically not supposed to                                  because these are not in this list of                                  links link relations behind that link so                                  they should have their own prefix like                                  that and they use one global XML schema                                  for everything which again makes code                                  reuse and delegation in Cline's a bit                                  more difficult                                  now I've talked about versioning earlier                                  that you can't version your mediator if                                  you want to you know twitter has /                                                                                                                if I remember a link to a tweet and half                                  /                                                                      that link again from my database and use                                  and fetch it with version                                               because I have to know they have to                                  replace / one with / - right                                  and maybe Twitter ultimately you know it                                  turns                                                                     instead of closing it down I think                                  they're doing right now so why shouldn't                                  I have this and then this first of all                                  from a pure protocol perspective these                                  are different resources which they are                                  not really they're the same resource                                  with different representations version                                    and                                                                   involve so we cannot say oh I remember                                  that URL and a year later I've been as a                                  client updated to version                                           protocol and I want to fetch it as dot                                  v                                                                      thing you can evolve the meaning and you                                  can have breaking changes through these                                  media-type versions so if we fetch                                  products in this case we have a list of                                  products and we get the red stapler                                  right which is available right now and                                  in a few years we could make another                                  call and we say we want it as my service                                  + XML and maybe it wouldn't include the                                  red stapler anymore because currently it                                  is not in stock but maybe there's a                                  version                                                                 well I understand me - now and before                                  that if it was not installed it wasn't                                  shown to me because I as the client                                  think well if it's there then I can sell                                  it right to my robot friends so I will                                  sell it but version                                                       you know the red stapler is not really                                  in stock right now but I'll show you                                  anyway                                  because version                                                      defines a new element availability this                                  is an example of where you're you have a                                  breaking change you cannot simply with                                  an existing API that shows products all                                  of a sudden say well now we have                                  availability so now we're going to add                                  an availability element to tell clients                                  that maybe they shouldn't sell a product                                  you can't do that ever because you                                  already have a hundred clients out there                                  and they won't be updated to understand                                  this new elements right and then they                                  will sell something that you don't have                                  in stock which it might be bad so that's                                  one case where you need to add you need                                  to add a new version of the thing                                  because of them of the interface because                                  it's a breaking change if you just want                                  to add a new description or a link to                                  reviews that you didn't have before                                  that's no problem right clients can                                  safely ignore that availability is very                                  fundamental it breaks your things so we                                  have a version two and I still know the                                  list of products or the individual                                  product so I can call it a few years                                  later with version                                                     and boom I get it                                  and if the URL had /d                                                     never upgrade for URLs already no right                                  and hold on in the next slide I have a                                  little typo because it says sorry                                  better it used to say imagine every                                  install of PHP BB or typo                                              but let's say let's say it's PHP would                                  be a Drupal right and you know the PHP                                  may be installed there are different                                  locations and so a Drupal installation                                  subdomains subdirectories imagine I have                                  as a kind needs a reg acts around in a                                  URL because there's the Sharks forum                                  that org or is it forums that shark                                  forum but org and they have community /                                  API or just / API so I have to do reg                                  Xing with v                                                              fail and now I mention something even                                  more important that's just an                                  inconvenience to to able to climb                                  programmers but imagine that PHP VB guys                                  they wrote an API and it became so                                  successful that vbulletin wants to copy                                  that Europe that complete protocol they                                  could write is if it's an open                                  specification they say we support that                                  same thing well then the vBulletin guys                                  would have to have the exact same URL                                  structure as the PHP BB guys which is                                  really not good for interoperability                                  right they would also have to have / v                                   in their URLs and / API at the beginning                                  but maybe they don't want that all they                                  want is one well-known index                                             maybe / API or just / and then they say                                  the vbulletin guys would say just call                                  the forum URL and say accept application                                  /v + e dot org dot PHP vb + XML because                                  their API is so great we support that                                  and then you have interrupt right then                                  you can have two different CMS's                                  agreeing on one media type and having                                  true interoperability they can talk to                                  one another and then they could also say                                  hey let's have an iPhone app that                                  already works for Drupal and it could so                                  easily be updated to work with typo                                   cuz a bunch of smart folks in this room                                  came up with such a great interface to                                  manage content that the type of three                                  guys said well that really makes sense                                  so                                  just implement the same thing and                                  because the client that I wrote for my                                  iPhone doesn't even have to know what                                  the URLs look like in a Drupal system                                  because the system tells me all I need                                  to go to a type of three installation is                                  well the entry URL and that has a bunch                                  of links to search and maybe other                                  things done with your L based versioning                                  of fixed URLs you can't have that you                                  can't have interrupt and no Interop is                                  bad                                  in many cases for us it's bad for us                                  open-source fellows for Twitter no inter                                  up is really good Twitter once Asylum                                  Twitter doesn't want a great hyper media                                  interface that app.net can today copy                                  and every Twitter client magically                                  becomes apt on that cable that's the                                   nightmare but I'm hoping that in                                  the future this could also be driven by                                  governments and by nonprofits etc and by                                  the open source community we'll have                                  many strong compromise and ads that are                                  built with the explicit purpose of                                  interoperability and then all of a                                  sudden writing client and servers will                                  be really really easy but that aside you                                  might be wondering why is this really                                  awesome because the rest is a bunch of                                  merits and this is I'm almost done don't                                  worry you can evolve it really easily                                  right you can add a new element a new                                  description tag without breaking                                  backwards compatibility if you do that                                  in soap then you need to update your                                  whistle file because the XML schema says                                  the product object now has a description                                  field and we need to regenerate your                                  stuff and then all the clients out there                                  brake is like some highly paid Java                                  engineer needs to with his Apache axes                                  thing regenerate the client and hold on                                  a moment and how do you even kind of                                  ordinate the upgrade for that it's a                                  nightmare right so it's easy to evolve                                  it's also really easy to learn once you                                  have such a restful system where                                  everything's are linked even the list of                                  products is linked to from the entry                                  point of the URL of the API then if you                                  have any API you can say well here's the                                  format description but all the                                  interactions like that you can go from a                                  product to a cat to a category you can                                  just see that by pointing your browser                                  to that location and return you a bunch                                  of link and you say ah that's the link                                  to product okay and it has a link to a                                  category fine easy to learn for people                                  and it really scales well with a number                                  of service and especially with the                                  number of people that implements it                                  right you have alternative                                  implementations and a client can support                                  them all and also you get all the nice                                  features in HTTP if you implement rest                                  over HTTP you don't have to it just                                  happens to be the case that rest Maps                                  really well - HTTP semantics but with                                  HTTP you get all the cool things you get                                  off indication transport layer security                                  conditional requests that I explained                                  earlier with the e tags right you can                                  add you know you already have the load                                  balancing and caching figured out                                  content negotiation you can say give me                                  that as an image and that is exciting                                  stuff this is this is what excites us as                                  developers mostly because you might say                                  well hold on if I just do an HTTP thing                                  level to richness and maturity model                                  service then I get all of the transport                                  layer security content ago she ation                                  features right that does the job so and                                  rest is really just about evolving                                  things and maybe in five years when we                                  have world peace than we all use the                                  same api's and media types is there not                                  something to rest that is is there not                                  another really killer features there not                                  a really good reason to use it and the                                  answer is No                                  Roy fielding himself says these are                                  links on the slide so you can click the                                  link in the PDF rest is a software                                  design of the scale of decades it's for                                  its for independent evolution longevity                                  and it's often directly your post so                                  short term efficiency so you need to                                  make the trade-off your manager needs to                                  make the decision well do we want                                  something quick out the door or will we                                  very soon have the problem where lots of                                  third party developers program against                                  our thing and then maintaining just the                                  first update managing that it's gonna be                                  such a nightmare because we want to                                  change behavior and we would break them                                  all so we have to maintain all the                                  versions forever then maybe it's worth                                  it and the whole thing is designed to be                                  on the scale of years so that in two                                  years down the road you don't have to                                  add a new API endpoint like Twitter's                                  doing right now for some operations                                  because they screwed up with the initial                                  design and they don't care they still                                  don't care because they're so big that                                  people have to implement whatever they                                  do but he points out another really                                  important thing is that many people just                                  don't care because in the in Europe it's                                  a little bit different but in the u.s.                                  after two or three years chances are                                  that you implement the API and then two                                  or three years later you already have a                                  different job so why do you care right                                  so keep that in mind but it's always                                  worth it and in particular for an open                                  sort for open source projects it's it's                                  really worthwhile because                                  interoperability means that you                                  ultimately only extend the your                                  potential audience of clients and other                                  people you want to interact with some                                  further reading how I explain dress to                                  my wife is a discussion about the                                  uniform interface no because so this guy                                  he works for github now Ryan Tommy echo                                  he's he's in bed and he's reading about                                  fielding I think and then his wife                                  because I that guy and then they talk                                  about you know idempotent operations                                  with coffee cups and stuff how to get a                                  cup of coffee                                  it's a very low level overview it                                  doesn't really touch hyper medium but                                  more the the rest of the uniform                                  interface the rest of the uniform                                  interface how to get a cup of coffee is                                  a very interesting tutorial it models                                  the whole Starbucks ordering flow                                  whole process of getting coffee from                                  Starbucks as a restful system it's                                  really useful for a reason I'll show you                                  in the next slide Then There is                                  obviously feelings pressed paper I would                                  recommend reading that early in the                                  morning because if you try in the                                  evening you'll fall asleep at least I                                  did but it's it's an interesting read                                  read through the last few chapters                                  chapter seven or whatever it is that's                                  where it gets really interesting but he                                  also tells some stories of the you know                                  of the olden days and the trenches when                                  they were designing HTTP and fighting                                  dinosaurs and stuff and and then there's                                  a bunch of books the lower two I can't                                  really recommend all that well all that                                  much because well subbu in the cookbook                                  says you should use URLs for versioning                                  and stuff and it's just wrong don't                                  listen to him but the rest and practice                                  is really good for two reasons first                                  rest and practice uses the Starbucks                                  ordering flow and the whole get a cup of                                  coffee including the media type that I                                  find in that tutorial in the book so you                                  already have interoperability between                                  something that's already on the web and                                  a book and you can follow along really                                  easily and there is existing clients for                                  the Starbucks thing and also they take                                  you from the very beginnings where you                                  just construct some XML and post it to                                  somewhere and then they show what's                                  wrong with that and then they say well                                  you should have a individual URL for in                                  every individual order and then from                                  there they go to HTTP and from there                                  they go to hypermedia and for every step                                  you understand why the things they did                                  previously had weaknesses so it's a very                                  very good book that would be the end if                                  you have any questions we don't have any                                  time but you can still ask me here or                                  outside and the meantime I thank you                                  this is a QR code that takes you to my                                  session page where you can rate it if                                  you have any questions                                  I stole it from you                                  on a PR tape or send mini millions                                  you're changing your API version well                                  but you just add a field why would you                                  does this break anything cuz a new                                  client or a new server that doesn't have                                  a new definition but it could just                                  ignore the fields there's a really                                  important thing for you rupal you have                                  to delete it or change it or make it a                                  multiple you can do it's easy right                                  because you have one type of element and                                  you can have two type elements and that                                  doesn't break things with Jason you                                  should maybe start with but that's a                                  problem you have one title two titles                                  and boom stuff breaks right there is                                  there is a much more critical problem                                  that you're facing which is that I as a                                  client download because I am some sort                                  of                                  the synchronization lines I download one                                  document from one server with these                                  fields and I've pushed them to another                                  server that doesn't have the fields                                  defined
YouTube URL: https://www.youtube.com/watch?v=zEyg0TnieLg


