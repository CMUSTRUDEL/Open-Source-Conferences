Title: DrupalCon Munich 2012: Web Services and Symfony Core Initiative
Publication date: 2013-03-29
Playlist: DrupalCon Munich - August 2012
Description: 
	Problem
The web of tomorrow isn't a series of linked pages. It's a series of linked resources, some of which happen to be HTML pages. Even then, often a "page" won't exist as a single thing but be built up dynamically using Ajax, AHAH, ESI, and other modern techniques. Web servers won't respond to HTML requests, they'll respond to HTML, SVG, PDF, JSON, XML, Atom, and more. HTML is just another web service. Drupal is not suited to that world.

In order to make it suited to that world, the WSCCI initiative is rebuilding Drupal's internal routing and request handling around the Symfony2 framework. The knock-on effects are enormous, as we switch from page callbacks that return strings that we put blocks around to controller objects that return response objects, which may or may not be HTML. This touches on nearly every part of Drupal, and Drupal 8 will be a radical and welcome departure from what came before.

We're in the home stretch, and time is of the essence. This session will cover the current status of the initiative and how you (yes, you, right there, sitting in that chair, I mean you!) are needed to help drive it home.

Goal
The end goal is a Drupal that is built around the concept of request/response, not globals/HTML string. Such a Drupal is object-oriented, dependency-injected, and unit testable. Such a Drupal is also built largely on the Symfony2 Component library, which is all of those things already.

Proposed Solution
Drupal TNG is already under-way, but needs help. This session will focus on what work remains to be done, prioritizing tasks, and sorting out the remaining knock-on effects. We have much to do and less time to do it in.

Slides here, including links for where you can help out: http://www.garfieldtech.com/presentations/dcmunich2012-wscci/
Captions: 
	                              are they whisky lovers in the room the                               original kind of mission statement was                               to transform drupal from a first-class                               CMS to first-class rest server with a                               first-class CMS on top of it which means                               we need all this fun stuff powerful                               contact system contact sensitive layouts                               block centric layouts plug-in mechanism                               and yet no one actually understands what                                that means bottom line what we're trying                                to do is convert drupal from a page                                serving tool into a HTTP rest serving                                tool and then pages are just a special                                case of rest people know what I mean                                writes a rest good most of you raise                                your hand it's going to be a really                                brief introduction this is a good thing                                so yeah that that's basically what we've                                been trying to do is convert drupal into                                a tier                                                                way more powerful things at a CMS level                                the original impetus this is the way a                                page is built in Drupal                                                in and you know we go to a page call                                back we render this big content area                                blob or render array depending on what                                it returns then we throw this extra                                stuff around it called blocks that has                                nothing to do whatsoever with the page                                body and then there's this other stuff                                that doesn't really fit anywhere and                                that's kind of the page and that's every                                single page on the site everything else                                we do to make it more flexible than that                                is a hack some of them are incredibly                                nice hacks incredibly powerful hacks but                                they're a hack around the way the system                                is built a fundamental level and this is                                great in you know                                                     and this is the you can see it the kind                                of logic flow inside Drupal                                          comes in load up a menu item go through                                our menu routing system which gets go                                page callback which could get back a                                render array or a series of Ajax                                commands we don't                                quite mark them separately very well                                then we call a delivery callback which                                if it's an ajax command goes through its                                own pipeline and then ends up with a                                print if it's a render array which means                                HTML usually we go to that go from page                                build process which then takes this big                                runway and throws extra crap on to it                                including building blocks which is                                throwing more stuff onto this big render                                array then we pass that entire thing                                through an altar form which means                                anything can change anywhere without you                                being able to control it and then we                                compile all of that down to a gigantic                                HTML string and print that in order to                                do anything you you know useful besides                                full pages something like services                                module steps hook out and reimplement                                the entire system itself on top of it                                and has its own architecture in there                                and its own output point I haven't even                                gotten to panels yuck this just is not                                sustainable this is where we want to end                                up request comes in pass it through some                                core routing system and we get back some                                controller object of some kind and that                                renders a page response which consists                                of a series of blocks inside it that get                                that information get the contextual                                information about how page is built                                about what the information of the page                                is like what no to my on what user are                                my own what is the organic group of that                                user what's the language the page is in                                all of this information that is really                                really relevant that we don't deliver                                anywhere right now except for the core                                body of the page each of these                                individual blocks then depends only on                                this information passed into it which                                means if each of these blocks we can                                uniquely address with the URL we can                                fire any block as a sub request as an                                ESI request from varnish so we can do                                partial page caching and varnish or                                straight in Drupal                                or we can do an AJAX call back any block                                become something you can Ajax replace                                this is insanely cool if we can turn                                around our rendering system and build                                the page top down instead of inside                                outside altar and stuff and this is what                                 we've been trying to do build the                                 infrastructure that makes this possible                                 actually implementing this picture is                                 the responsibility the Scotch initiative                                 there the last session today in this                                 room come back for that too that's part                                                                                                       plumbing to enable this and that is how                                 we get it up with symphony how do we end                                 up with Symphony from that well I'll                                 tell you originally we knew we wanted to                                 abstract HTTP request response handling                                 because super Global's are not going to                                 happen if for what I want to do is just                                 not going to work and we said okay let's                                 not write this ourselves someone must                                 have written this already in PHP we're                                 all about dealing with HTTP that's what                                 PHP is for so someone must have written                                 this let's just borrow that one piece                                 from somebody and so we looked at a                                 couple of different options in                                 particular symfony                                                  ended up going with symphony two for                                 three reasons one their library was a                                 little bit more robust than zens not by                                 a great deal but it was a little bit                                 nicer to at the time Zen had a                                 contributor license agreement so you                                 couldn't actually submit code to zend                                 framework unless you signed a form                                 saying guy disclaim copyrights and                                 patents and all the kind of fun stuff                                 and symphony didn't and I figured we're                                 going to want to work upstream at some                                 point once we do this I don't want to                                 have to deal with that I don't want to                                 tell people I have to sign forms and fax                                 them in before they can work on Drupal                                 that's not going to fly and three as we                                 were having this discussion several                                 people from the symphony community came                                 in to that discussion and offered to                                 help and engaged with us and those                                 people are actually here at this                                 conference one of them is the keynote                                 tomorrow Vivian Paco CA and that kind of                                 community interaction is something that                                 we felt and I in particular felt very                                 strongly was more important than the                                 code library itself it's you know we're                                 going to be engaging with this other                                 community to some extent we want them to                                 be a good community and so we went with                                 symphony and so we continued using data                                 library and trying to build this you                                 know inside out model and okay how do we                                 do this and this part is weird and I                                 don't actually know how you do this                                 thing and and so on and so forth and got                                 kind of frustrated because we kept                                 running into technical problems and                                 process problems and I don't understand                                 it yet problems and then I started                                 looking at some of the other pieces of                                 symphony that we weren't using yet and                                 said well crap what we're trying to                                 build is symphony is how symphonies                                 request handling works already open                                 source for the win let's use it that's                                 basically how we ended up with saying                                 okay Drupal                                                           symphony not on the entirety of                                 simpering however symphony consists of                                                                                                  components which are a reusable set of                                 freestanding libraries that can work                                 with each other but can also just live                                 in isolation and that's the first one we                                 brought in was the HTTP foundation                                 library which is requests and responses                                 and stuff like session handling back                                 tight into that and that's pretty much                                 it so it's the way to abstract away from                                 super Global's so that you can do more                                 robust handling and then there's the                                 symphony framework which is a full stack                                 application framework built on top of                                 those components we're not using the                                 framework so if you've worked with                                 symphony full stack frame work we're not                                 pulling in that entire thing we're just                                 pulling in six or seven or so of these                                 symphony components the major ones and                                 building our Drupal framework on top of                                 that so in particular I think we may                                 have gotten did we remove that from yet                                 catch classloader                                 okay so we're using symphonies class                                 loader for autoloading classes off disk                                 so who here hates the registry in Drupal                                                                                                         so this alot of work has gone into                                 converting over to this what's that I                                 did right early versions of the registry                                 I'm very happy to see it die HTTP                                 foundation which is the request response                                 library event dispatcher it's basically                                 object oriented hooks and you understand                                 event dispatcher their dependency                                 injection container and most importantly                                 HTTP kernel and routing we'll talk about                                 that a little bit here and so we end up                                 with this hybrid system that play the                                 goal at least is it gives us all the                                 benefit of the years of work that has                                 gone into building this solid foundation                                 and simply components but then we don't                                 have to spend years working on but then                                 gives us still the flexibility and the                                 freedom to build something uniquely                                 Drupal on top of that but remains a                                 market leader the way through Belize                                 today freeze us to do the parts that are                                 actually cool and so this is where we                                 end up in terms of the new page request                                 flow request comes in we have this                                 kernel that takes care of routing that                                 request to a controller controller think                                 Paige call back only oh oh and fancier                                 and more powerful that controller                                 returns a response object that response                                 object can be you know n HTML string it                                 can be an HTML fragments Jason response                                 a redirect it unifies all of that stuff                                 so you don't need to call location                                 headers in the middle of your code and                                 then call exit hope that things still                                 work and that controller can also make a                                 complete sub request which goes through                                 that exact same process so every block                                 is or can be                                 a separate internal HTTP request or                                 separate requests from varnish or                                 separate requests from the browser and H                                 include and it's tortoises all the way                                 down does anyone actually get that                                 reference okay I never know who's going                                 to get that one so this is where we're                                 pushing towards and it's where we are                                 not at yet so on one of the other big                                 advantages when we're mapping up to a                                 controller in Drupal                                                    off to a page callback is by the path                                 all you can map on is the path in Drupal                                                                                                          mime type you can nap on the HTTP verb                                 so we can actually do things with HTTP                                 put if we want to you can do things with                                 HTTP delete we can do post if we                                 actually found a use for it we could                                 even use HTTP patch there is in fact a                                 patch command in HTTP not that anyone                                 uses it but we could support it if we                                 want to so the colonel in particular I                                 want to spend a little bit of time on                                 the on this it's in there I've never                                 used it but it's in there so Colonel if                                 this is like the most important part of                                 the flow a HTTP colonel in Symphony and                                 now in triple                                                            implements this interface request goes                                 in response goes out that's it that                                 gives you a lot of flexibility to nest                                 things inside each other without them                                 realizing they're being nested and                                 that's where you get that ability to do                                 sub requests sanely that's where you get                                 the ability to break up the page that's                                 where you get the ability to do                                 http-based caching symphony comes with a                                 default implementation of this interface                                 that is quite nice we are using it now                                 basic flow of control request comes in                                 and a request event fires                                 again think hook and then you can mutate                                 that request then we have a resolver                                 which is okay map that request to the                                 controller that's going to actually do                                 something with it controller is just the                                 thing the colonel asks to take care of a                                 request and it gets us back a controller                                 and the parameters for it which we call                                 and we get back a response you resolve                                 the controller and the parameters to it                                 it's technically two operations then you                                 know that gets us back a response which                                 we can return because that's already                                 wrapped up and taking care of the                                 esoteric weirdness of HTTP or if it                                 returns something it's not a response we                                 get another event that fires that lets                                 us mutate that so right now all page                                 callbacks return strings or render                                 arrays rather than response objects so                                 we have a view listener that takes that                                 and mutates that into a response object                                 so we did not have to rewrite every page                                 called a call back in all of Drupal yet                                 we should eventually but we haven't                                 needed to yet if along the way you have                                 an error you throw an exception and that                                 gets handled and that can give you a                                 response so you can do much better error                                 handling that we can do now you can also                                 make a sub request and run through that                                 entire process again and then merge the                                 requests together and then anywhere you                                 see request that's cacheable at the HTTP                                 level and you can do that sim pretty                                 ships with on HTTP cache implemented in                                 PHP think varnish ported to PHP that's                                 cool and so we can use that as our page                                 caching mechanism and block caching                                 mechanism in a much saner way than we've                                 got now so this workflow is in court                                 today we are not fully leveraging it yet                                 and I say yet because I'm hoping that we                                 can get rid of that yet in in the next                                 couple of weeks                                 so this sound good good because it's not                                 done yet it's far from done yet and now                                 we get to the begging part of the                                 session here's we've managed to actually                                 accomplish so far we've got the request                                 response workflow in place there's still                                 three places that we're not leveraging                                 it yet there's open patches for it like                                 drupal go to is still there we need to                                 replace that but for the most part the                                 request response logic is in place we                                 have that kernel based workflow so we                                 have that you know controller request                                 object exception handler and so forth                                 that's in place at the moment that's                                 already running in Drupal                                              event dispatcher in place event                                 dispatcher it does not replace hooks                                 entirely it replaces the low-level                                 bootstrap hooks it replaces the stuff                                 that's in its you store the stuff that's                                 in the kernel flow itself we're not                                 replacing all hooks not in Drupal                                        the stuff that's you know along that                                 critical path there yeah we've got the                                 colonel in place that's redundant and we                                 have the same pretty dependency                                 injection container who here gets                                 confused when i say dependency injection                                 container okay short version a                                 dependency injection dependency                                 injection is use function parameters the                                 way they're supposed to be used rather                                 than calling from a function to a bunch                                 of other things and having hard                                 dependencies that's really all it is                                 what's that and I'm still confusing                                 Peter so if you have a function they                                 calls a function that calls a function                                 that calls a function the calls are                                 global this function is now dependent on                                 to save this global grotesque try unit                                 testing that this is why Drupal has very                                 few unit tests compared to Justin level                                 tests if instead you have a function or                                 an object into which in the constructor                                 you pass a bunch of objects and they can                                 just call those rather than                                 instantiating it themselves                                 then you can pass in fake objects and                                 unit test it you can pull apart your                                 code and you know work on it                                 independently you can have two people                                 working on different parts of the system                                 without breaking each other so you can                                 actually work on theming without                                 breaking entity load which is kind of                                 nice a dependency injection container is                                 a fancy academic name for an array of                                 objects really all it is that then takes                                 care of this you know this object                                 requires these five other things to pass                                 into it it just takes care of that for                                 you once you're set it up it's a lot it                                 sounds a lot scarier than it actually is                                 and justice still wincing and so we've                                 got a couple of things that are using                                 the injection container now but not most                                 things so that's where we are now we                                 have a lot of really cool in core                                 now that we're not really taking                                 advantage of and if Drupal                                           today it would work it would just be                                 horribly over engineered and not                                 accomplish anything really new few                                 things here and there but really nothing                                 really new an earth-shattering yet if we                                 want the really new and earth shattering                                 stuff to be there here's what we still                                 have to get done and what we need your                                 help to work on so first of all we need                                 a new routing system that is somewhere                                 on two-thirds implemented at the moment                                 this replaces hook menu with symphony                                 style routing system I have some slides                                 on that later if you really want that                                 lets us do things like routing based on                                 mime type routing based on HTTP method                                 and so forth right now course still                                 doesn't do that that path is in progress                                 needs reviewers needs people to help                                 figure out some of the edge cases                                 they're our age Act system is still                                 using anonymous arrays that you kind of                                 hope you can                                 you're out this needs to be converted to                                 use really using the symphony logic                                 directly return a response object that                                 has the information on earth we need                                 there is an open issue I will be putting                                 these slides online all of these links                                 are live I have a description in this                                 issue of how this should work we just                                 need someone who understands Ajax to                                 jump in and make it happen content                                 negotiation right now we can map based                                 on mime type but it's a hard coded list                                 of known mime types that's really not                                 flexible enough we want something better                                 than that we have a start on a new mime                                 type negotiation library that is based                                 on Apaches mod negotiation really                                 powerful algorithm this is not done                                 Hamilton has started on it it's actually                                 a project on github because there's                                 nothing Drupal centric about it we need                                 someone who can help carry that forward                                 and really nail that so that we can then                                 pull that into core and then be able to                                 map on is this jason LD is this our                                 custom Ajax for aha is this some other                                 type of Jason is this adam that kind of                                 information we only have a very                                 rudimentary form of now we need a                                 full-on system for entity property API                                 we want to be able to do real content                                 staging real drupal syndicating to                                 drupal content staging in order to do                                 that entities need to get a lot cleaner                                 at a lot more standardized work on this                                 is in progress vago and dixon our organs                                 in their core conversation yesterday                                 okay all the stuff they're doing is                                 important for risky because that is how                                 we can then take an arbitrary entity and                                 say okay serialize it to Jason ship it                                 across a HTTP somewhere turn it back                                 into a note object and call save that's                                 where we want to end up we're not there                                 yet this needs to finish first                                 symphony has a fairly nice session                                 handling system that they modified and                                 upgraded specifically for us to be able                                 to use it's really nice we have a patch                                 to switch our session handling to theirs                                 which helps clean up our bootstrap and                                 hopefully lets us you know make the                                 bootstrap thinner and help the Installer                                 than various other things that's been                                 sitting for a while now waiting run                                 reviews so this is not directly web                                 services but it is here's this ugly                                 piece of code that we've got a                                 replacement for that the code for is                                 already sitting in core because we                                 pulled in these libraries HTT that's one                                 of the holdups on that patch right now                                 is that question but yet it's the                                 session swap out http-based caching                                 remember I said we had symphony comes                                 with that's you know varnish in PHP                                 library we're not using it yet we need                                 to there's a patch in progress on that                                 but it could use reviewers it could use                                 people who understand HTTP to help with                                 that marks is marks on the bottom here                                 ok marks on bum is working on that but                                 he only has so much time block URLs in                                 order to do this we need to figure out                                 okay what is the unique URL address of a                                 block part of this ties into the Scotch                                 initiative but we need to figure out how                                 we're going to expose that to them so                                 that they can build that layout once we                                 have that's unique URL for every block                                 then we get block level caching kind of                                 for free things like autocomplete can                                 easily I have an extra letter in there                                 easily be ported yes can easily be                                 converted over to the new routing system                                 that's a fairly straightforward change                                 once the new routers in we just need                                 people that sit down and do it we don't                                 actually have that many of them there's                                 the Ajax system and autocomplete and I'm                                 not sure that we have any others at the                                 moment cron is already done we need to                                 figure out for the Scotch initiative for                                 that layout stuff                                 how we're going to actually glue those                                 two pieces together and that's a tricky                                 problem I don't have an answer yet we                                 need to find one and then of course                                 there's this question we're just ripping                                 routing out of hook menu menu links are                                 still going to exist hopefully they turn                                 into entities but that's a separate                                 process so what becomes of hook menu and                                 the stuff that's in hook menu now I                                 don't actually know we need people who                                 can dive in there and figure out what                                 makes sense to do with menu links now                                 that they are not joined at the hip with                                 the routing system so this is stuff I                                 feel has to get done there's other                                 things that would really nice if we get                                 done but could live in country we don't                                 make it the next three months once we                                 have those standard entities we want to                                 be able to serialize them to Jason LD if                                 that lives in contributes okay but I'd                                 much rather have that work ready to go                                 when Drupal launches and if we can get                                 part of that in core great lynn clark is                                 who i think just walked in back there is                                 leading that work at the moment outgoing                                 request so for everything we've talked                                 about is incoming HTTP requests serving                                 requests but a real web server a real                                 web services system needs to be able to                                 make requests just as easily we have a                                 patrick now to move to replace the                                 ugliness that is Drupal HTTP requests                                 which mrs. a lot of important features                                 with guzzle which is another third-party                                 library that's used by a lot of symphony                                 projects that has far more features than                                 Drupal HTTP requests that has like of                                 the                                                                   wanted in a library has like ten and a                                 half of them only problem is just about                                 a megabyte in size so we wouldn't be                                 loading all of that on every page                                 certainly but it's still a lot of code                                 so do we use that do we use a different                                 one that's smaller and less capable how                                 do we handle that we need to resolve                                 that could happen in contribute need to                                 think about different libraries for that                                 sort                                 thing path Elias refactoring this is                                 mostly a clean up but now that we have                                 this more robust request system we can                                 do a lot to our path alias system to                                 just simplify it to make it more modular                                 make it easier to swap out if you're not                                 using it or to swap in an alternate the                                 implementation get Bailey is working on                                 that patch now it could use reviewers                                 generators basically that's using routes                                 in Symphony to generate URLs by name so                                 it's roughly equivalent to URL the URL                                 function but instead of hand crafting a                                 string of node slash dot five you                                 generate a route to the machine name                                 node page and a parameter of node                                      associative array this is great because                                 then you're separating your link from                                 the actual URL so if you really wanted                                 to move your you know your your nodes                                 from node / to content / across your                                 entire slight you could if we can do it                                 in such a way that we can support                                 fallbacks you could have natively                                 different node types at different base                                 paths I'd love to see that if it doesn't                                 happen it's not the end of the world                                 it's just unfortunate but I would still                                 like to see that happen binary stream                                 response simply Sports stream responses                                 so instead of you know iterating over                                 you build it instead of building up a                                 gigantic file in memory or something and                                 then trying to print that it can create                                 a response that when fired rip stuff off                                 disk and sends it or you know sucks                                 stuff out of some third-party service                                 and sends it very efficient we're using                                 it in a couple of places now but it'd be                                 even better if it if our code doesn't                                 need to do an iterate over a file off                                 disc every                                                              their way faster ways of doing that                                 there is work that we've been pushing                                 upstream and Symphony to simplify that                                 that I would love to see you get into                                 symphony because then we can use it                                 again not the end of the world if it                                 doesn't                                 happen but be really nice to get done                                 that's dependency injection container                                 we're only using a little bit right now                                 anything we poured into it becomes unit                                 testable becomes lazy loading and                                 doesn't actually get cost us anything if                                 we're not using it in a given request                                 anything we can move in here improves                                 testing and improves performance we just                                 need to sit down and convert stuff over                                 to it there's a lot of those low-level                                 hooks hook URL inbound alter hook in it                                 hook boot that really could go away                                 because we don't need them anymore                                 because the symphony requests are the                                 symphony events that are already there                                 accomplish the same goal so that's a                                 straightforward clean up remove old                                 crafts and poor things over forms                                 currently who here actually understands                                 how forms are processed on submit and                                 Drupal okay not everybody you realize                                 that too okay how many people realize                                 that in order to submit a form we                                 halfway render a page and then process                                 it and bail out halfway through the page                                 with a redirect it anit gross so there                                 are a couple ways we could clean this up                                 now the easiest and this is something                                 someone can work on today is when the                                 request is coming in originally in the                                 original request event check and see if                                 it's a form submission load the form                                 process it right there and assuming                                 there's no validation error return rate                                 then we can skip over most of the page                                 that way much cleaner much faster we you                                 know the more we stuff we push into the                                 injection container and the more stuff                                 we pick apart more stuff we can do                                 lazily which means bootstrap gets                                 thinner everything we move out of                                 bootstrap to lazy load to use the                                 injection container to not have to do on                                 every page before we get to                                 Colonel makes responses faster and when                                 we're both issuing potentially multiple                                 requests from varnish that really helps                                 because every request cost gets born                                 multiple times so anything we can do to                                 make bootstrap thinner it's going to                                 help web services and anything tagged                                 whiskey or Colonel follow-up which this                                 link goes to I think there's somewhere                                 around                                                            someone to work in them i'd like to see                                 most of those green before december                                 first or code freeze who wants to help                                 I'm not singing up hands so what we want                                 to do is yeah a lot of the stuff is                                 legitimately complicated I'm not going                                 to whitewash that a lot of these are                                 complicated low-level get your hands                                 dirty stuff so you know what we need our                                 people I'd say two per issue at least                                 who are able to just dive in and commit                                 time for several weeks to make sure that                                 these things happen so if you are                                 interested in owning one of these issues                                 I will support you on it we're having a                                 meeting right after this session during                                 lunch back over in the coder lounge in                                 the Western building come talk to us now                                 we're going to the other building the                                 more room there okay well maybe we'll do                                 it here well we're meeting somewhere                                 there right after this to you know map                                 out who's going to tackle which piece                                 how are we going to make sure that these                                 get tackled instead of falling out                                 people's radar how can we support people                                 in owning these issues and really                                 getting them solved and again we need                                 multiple people for each one of these                                 there is nothing more dissin heartening                                 as many of you know as putting time in                                 on a patch and then it sits there in the                                 queue waiting for review for the next                                 four months and by the time someone                                 looks at it it doesn't apply anymore so                                 two people at least per issue is what                                 I'm targeting think we can do this we've                                 got three months left I think we can do                                 this I hope so                                 right got a half hour of questions and                                 discussion microphones right here any                                 volunteers and you want to say something                                 just walk up to the microphone what                                 about the Installer what about buying                                 stolen are the Installer so there is                                 work going on to who's actually looked                                 at the code inside the drupal installer                                 right now did you run screaming I did so                                 we have the potential with the symphony                                 framework with the dependency injection                                 container and so forth to convert the                                 installer from a one-off hacky script                                 into a micro application of its own                                 built on all the same principles of                                 Drupal core that can install Drupal and                                 do the same thing for the update dot PHP                                 file and so forth there's a patch for                                 that right now lothario is working on                                 that again like all these others could                                 use support could use someone else to                                 work on that that's not critical for web                                 services that's critical for this piece                                 of code is ugly only have the potential                                 to make it less ugly so I'm not going to                                 be focusing about myself but if that's                                 your passion please don't let me stop                                 you talk to Lipari and he's taking point                                 there at the moment do we have any                                 Drupal of specific modifications to                                 symphony or are we strictly using                                 upstream simply we are submitting pull                                 requests to symphony upstream that we                                 can then pull back down and we have                                 already                                                                  gotten in just from Drupal people that                                 have written stuff some of them are                                 fairly minor the largest one actually                                 Symphony natively doesn't actually do                                 route matching on anything but minimal                                 part of the request we've started to                                 introduce a new part of their routing                                 system to do full request matching which                                 we're using that still needs some work                                 upstream in Symphony as well but yeah                                 what's the symphony that's in core is                                 vanilla symphony but we have been                                 working upstream in symphony                                 and they've been very receptive to that                                 so far so any work you do in Symphony                                 itself is also benefiting Drupal cool it                                 sounds really cool how does the anatomy                                 of a module affected by a lot of this                                 object oriented cool stuff coming into                                 what used to be a mostly you know or                                 seadrill system I expect Drupal                                         something of a hybrid so some hopes are                                 going to turn into listeners which means                                 they're going to be classes which means                                 they lazy load for you and so they're                                 not going to weigh down your request                                 that they're not used some hope you're                                 just going to say as they are nothing                                 we're doing it's going to affect those                                 like hook node load I'm not touching                                 that page callbacks some or all of those                                 are going to turn into methods on                                 objects which like anything else can                                 lazy load how much of that happens is                                 going to depend a great deal on just how                                 much manpower we can throw at it and                                 what exactly Scotch ends up doing there                                 so a lot of that is still to be                                 determined but yes modules in Drupal                                 eights I expect to be you know half                                    half procedural depending on what it is                                 they're doing so there will certainly be                                 some modules that are just                                               suits me fine personally a quick note on                                 json-ld actually have a proposal on                                 available on the whiskey group it's I                                 think it's a second post right now I                                 don't there's an implementation of                                 json-ld interpret seven contrib but                                 using the same idea that we're playing                                 to having to plate it's not complete but                                 I'd like to have some feedback and see                                 whether that's the wrong direction or if                                 we should continue in the same direction                                 okay so if you're interested in Jason le                                 you know something about Samantha crab                                 talk to him talk to lynn clark there is                                 a meeting also at six o'clock or talk to                                 him it takes o'clock what do you expect                                 in terms of performance when Drew blade                                 comes out                                 my hope is that on the micro level                                 certain things will get a bit slower but                                 on the macro level the architectural                                 performance improvements we can make                                 will overshadow that so like processing                                 an event is more expensive currently                                 than firing a hook there are things we                                 can do to make that faster but you know                                 that cost I expect will be offset by in                                 a typical page request because we can                                 have much more robust caching we're                                 going to be rendering this part of the                                 page and said of this part of the page                                 that'll be much smaller so April you                                 know app net will be a net win overall                                 that's my current plan that's my hope I                                 have not been chucked at a micro level                                 yet for that we were poking focusing on                                 architectural level performance                                 improvements and you know micro level                                 benchmarking will do after code freeze                                 because we can still make those changes                                 later that's kind of approach at the                                 moment so in Drupal                                                      callbacks and into eight we still have                                 them but we also have this controller                                 thing and imagine that the controller                                 thing should be an object a class or                                 something and how do you imagine that we                                 will map those out page codex to control                                 objects will regroup some of them                                 together how would it work so a                                 controller and Symphony can be any                                 callable can be a function can be an                                 anonymous function it can be a method of                                 an object at the moment we have it set                                 up so that any function is assumed to be                                 a legacy page call back so we have to                                 handle differently but my hope is that                                 most controllers are methods on classes                                 because that's I think the most                                 performance depending on how much again                                 how much manpower we can throw at it and                                 what Scotch ends up needing that may or                                 may not happen so we may still have some                                 function based controllers for legacy                                 reasons for now again I don't know it's                                 going to depend on implementation                                 details as we plowed through it and                                 resourcing so what could I mention that                                 maybe                                 someday in the future we node module                                 would have one class with a lot of                                 controller methods or would you rather                                 split this up in some way or how would                                 you really factor that so how will mud                                 is look in the future that's a basic                                 question um what the part of their and I                                 just Paige Collins this I believe                                 Symphony and most rail style frameworks                                 which simply is not but it's similar in                                 this regard have like all of the crud                                 operations for a given object type or on                                 when one class I don't think that's                                 actually the right approach for Drupal                                 my guess is we'll end up with you know                                 do what make sense in that case there's                                 nothing stopping you from having a                                 module that provides eight controllers                                 spread across three classes if that                                 makes sense you know if for your use                                 case so I again that level of                                 implementation detail I don't know yet I                                 don't think we're going to know until we                                 actually can start writing those and see                                 oh so what does this actually look like                                 in practice we have like we don't it's                                 not going to end up with every module                                 has one huge class all of its page                                 callbacks that's not happening I had                                 another question okay okay so dependency                                 injection container as I understand the                                 way that what you want to use it is that                                 we have some kind of configuration for                                 an object and so on construction all the                                 stuff dependencies can go in and the                                 object itself does not need to depend on                                 the container an object that is being                                 managed through a dependency injection                                 container does not know that it is                                 inside and independency injection                                 container that's a good thing that's how                                 you can just rip it out stick into a                                 unit test then test it manually if you                                 look at the current router patch                                 actually I've got a very good example                                 that we've got a number of classes that                                 you know use a database for dumping                                 ground information they're all pure unit                                 tests because all I need to do is pass                                 in a database connection so the point is                                 that at this point it's not lazy anymore                                 really because all the dependses have to                                 be constructed and put in the                                 constructor and so some blog posts on                                 the internet talk about some lazy                                 dependency resolution but then again you                                 need to know the dependency                                 taner because then you have to pull it                                 when you're near so what is the solution                                 do have some we're going in between that                                 you don't need to the container so you                                 can still let show in some cases you do                                 want to pass the dependency injection                                 container into an object in that case                                 what you're doing is a service locator                                 and then it can just call the that                                 object and get stuff from it as needed                                 in most cases when you have well                                 factored code an object is only going to                                 have the dependencies that it's actually                                 going to use in the majority case so as                                 an example yes if you're loading up the                                 database back cash system then it's                                 going to have to load up the database                                 but it's going to use it so it's fine                                 but if you never invoke the cash system                                 then the cash just never initializes so                                 it never initializes the database yeah                                 but if you have some of the ones that                                 you want is a cash system just in case                                 it needs it and then it doesn't use it                                 and then you have the database already                                 and everything and so then arguably that                                 module needs to do something differently                                 because that's a bad plan yeah it's not                                 a perfect setup it's not you know                                 nothing ever happens at all unless it's                                 absolutely needed but it's certainly                                 closer to that than where we are now                                 where we load                                                           use for thousands of them on every                                 request so it's certainly better than                                 that so in the service locator would be                                 not just one big thing for everyone but                                 there's way am a facade or something for                                 for just an adapter for just one purpose                                 and another's now there's one dependency                                 injection container but just loading                                 that container up initializes nothing in                                 it when you ask for something out of it                                 it then loads just the things that                                 object depends on yeah yeah we can go                                 over that more detail another time yeah                                 one more question in the direction of                                 how modules will look in the future you                                 mentioned that some hooks are going to                                 go away in favor of listeners can you                                 explain how exactly that will look code                                 wise like how if I'm a module and I want                                 to have such a listener what do I do                                 looks like this so this is event                                 dispatcher a la symphonie so you created                                 the event dispatcher object Corps does                                 this for you you have some kind of                                 callable method anonymous function                                 whatever call addlistener so you                                 actually have to register it it's not a                                 magic name the way hooks are in the                                 setup of the injection container                                 actually so I I'm going to wave my hand                                 on that for the moment to not get in                                 down into the weeds but you can see some                                 examples of this in corn now if you want                                 and then you can have a subscriber class                                 which is just a bunch of listeners as                                 separate methods and then you register                                 them this way and call add subscriber                                 now when dispatch gets called on that                                 event this is roughly equivalent to                                 module and vocal then that method gets                                 called which means you can actually have                                 methods that share information so like                                 hooks that you could share information                                 without having to rely on Global's for                                 example so conceptual you could do it                                 anywhere what we actually have as of                                 like two weeks ago the dependency                                 injection container in the setup of that                                 you can register to subscribers there so                                 you effectively have a set up hook for                                  the injection container that is not                                  called on every request but only when                                  necessary and registering things in the                                  container and registering events to fire                                  all happens there so it's more flexible                                  but you have to manually register things                                  I think it's a net Trey dawg you know                                  the net trade off is a win                                  so there was this um at the very                                  beginning of what later became whiskey                                  this was very much about butter and the                                  the central question was about having a                                  context container to be able to say to                                  hold information across several parts of                                  the page like what's the current node                                  was the current organ group what's the                                  current term etc and at some point it                                  stopped being the central focus and                                  rather yeah how we handle the HTTP                                  requests and stuff like that so does                                  this context handling mean context as in                                  context the country module did it get                                  like bunted over to to scotch or do is                                  it considered not an issue anymore                                  between because we can do that with the                                  dependency injection controller or                                  something so most of the stuff that we                                  were trying to build a bit of history                                  two and a half years ago I started                                  babbling about a thing called Butler                                  which eventually got renamed to whiskey                                  when it became an official initiative                                  yes that was a bad pun on my part very                                  deliberate so that Butler whiskey                                  effectively the same thing the context                                  part of that we were working for a while                                  on a context API for core most of what                                  that would have covered is now either                                  handled by the request object that we                                  inherited from symphony or by the                                  dependency injection container which we                                  inherit from symphony or is handled by                                  the way sub requests end up working and                                  scotches problem so you know that                                  concept of centralizing that and not                                  having all these crazy global functions                                  is still there it's just not one God                                  object anymore it's handled in logical                                  separate places but the underlying                                  concept is still sound sorry an                                  additional question does it mean that in                                  the list of steel to do or would be nice                                  to have things is there a task for like                                  converting current core code to move                                  what would belong in there to actually                                  get to                                  yeah standard centralized location that                                  contribute and then also using set of                                  standards for that or using that or so                                  it's not context and sense of context                                  API of a contact module in Drupal                                    Drupal                                                               array the idea is the word global should                                  be expunged from our vocabulary so there                                  is no massive central registry of the                                  current state of the universe rather                                  there is the request and that is all you                                  care about and its responsibilities of                                  the caller to that block to provide in                                  the URL the contextual information you                                  need so there's no global registry of                                  knowledge because there shouldn't be                                  that I'm not sure if that's answering                                  your question okay so yeah they that                                  original context API approached turned                                  out to not actually be a good idea what                                  part of that we end up in the in the                                  dependency injection container or will                                  it be the request object where would we                                  put that stuff we probably need an issue                                  to decide where some of these things go                                  because you're I expect ejection                                  container then we are no know that this                                  container can only be used for this                                  request and otherwise we need to rebuild                                  it and well the ingestion container soon                                  as another patch lands will get compiled                                  so it will be fairly fast and fairly                                  stable I expect current user will                                  probably end up on the request object my                                  guest current theme I'm not actually                                  sure that's probably get add it to the                                  list if that's something you're                                  interested in talk to me let's put up an                                  issue for that and you can start working                                  on it they add some of the stuff that's                                  currently global we're just not quite                                  sure where it's going to fit yet we're                                  going to try and get as much stuff as we                                  can into somewhere logical we're not                                  going to get all of it so                                  request to repentance electing injection                                  and it gets a lot of objects inside and                                  part of the pile up and so this is some                                  kind of state but if you would have to                                  request could you reuse the same                                  dependency injection container because                                  it's not a kind of dirty cath you want                                  to take that one mic microphone mic run                                  so there's a patch in place to compile                                  the container which means as long as                                  something hasn't happened like a new                                  module has been enabled you're going to                                  be reusing the same container and it's                                  all going to be compiled to disk so                                  likes you realize what cuz at the moment                                  it's the way it works is seeing its                                  being like built on every request so ya                                  know eventually it's just going to be                                  like it's just going to be one big class                                  that knows exactly where all d where all                                  the classes are the objects that are                                  managed by the injection container those                                  at the end of our quest those expiring                                  and get garbage collected just like they                                  do now things like the database                                  connection you open it when you start                                  using it and it closes when PHP shuts                                  down that part doesn't change it was                                  that if these objects contain some                                  specific information some module just                                  puts the user ID the conduit into one of                                  these objects that are instantiated for                                  depends a check okay what you're talking                                  about is request scoping symphony                                  actually has a mechanism for that so you                                  can tag given item in the injection                                  container as depending on the request                                  scope so when a new request a new sub                                  request is fired symphony will hold on                                  to that object create a new one that's a                                  pimple on the new request and then when                                  you exit that requests go throw that one                                  away and go back to the old one and it                                  just takes care of that for us that's                                  another one of the nice things about its                                  container                                  following up on an earlier question also                                  you mentioned in the butler the original                                  button Butler presentation Chicago about                                  including a unified plug-in system as                                  part of Butler can you comment on where                                  that stands is that part of another                                  initiative or that got forked off to the                                  Scotch initiative back in February that                                  landed that's in corn now it still needs                                  some cleanup and it still needs people                                  to help implement it in the fifteen                                  thousand places that it's useful we're                                  not going to get to all of them but if                                  you're interested in that system talk to                                  Chris Vander water he'll be here in the                                  last session today he needs hands just                                  as much as I do anyone else okay who is                                  interested in helping and knows that                                  they you're going to have the bandwidth                                  to be able to do so in the next couple                                  of months see a couple of hands ok I                                  admit the second question of the hard                                  part it's kind of hard for me to imagine                                  my own bandwidth at times so I fully                                  appreciate that but you know we need to                                  make sure we can build a team that can                                  just tackle these issues and drive this                                  home because I really would hate to end                                  up with a Drupal                                                        sitting next to each other both of which                                  are half complete rather than one system                                  that actually does everything we wanted                                  to do as a drupal                                                       all the tests pass that doesn't mean I                                  like where it stands right now and we                                  want to finish this process just to the                                  extent we can hi so just sort of a plug                                  so some of you that might be concerned                                  about how much bandwidth you're going to                                  have over the next couple months some of                                  you may be our full-time employed with                                  some employer that employer might be                                  very you know might have a business that                                  depends on things like content staging                                  being possible native apps on mobile                                  devices being possible so you know go                                  back and talk to your employer and see                                  if you can maybe get some time to work                                  on this yeah and it if you want you know                                  request handling if you want to know web                                  services to work in Drupal                                           be a hack layer you can sell that to                                  your boss if you want the core system to                                  be able to support one good layout                                  system instead of a crappy layout system                                  in core and a couple in contribute that                                  don't talk to each other then we need to                                  get this work done you can sell that to                                  your boss as well yeah i get if you need                                  help with a sales pitch talk to Alex                                  talk to me talk to Jess I'm okay don't                                  talk to Jess but yeah they're people who                                  can help with the sales pitch to if you                                  need if you need to make it if you're                                  interested about to change I guess                                  currently we have in this one hook we                                  give information about the route and                                  also about me to information to put this                                  in the menu somewhere it would make a                                  bread crumb and to make tubs and this is                                  dirty but that's kind of convenient and                                  it guarantees that for all these admin                                  pages you don't forget to put the bread                                  crumb or the tops but you just get it                                  all for free and you just use one one                                  place where you put out the stuff and if                                  you change it you only change in this                                  one place and if we split this up then                                  we'll that needs create them make it                                  more difficult to keep this all                                  synchronizer isn't it for some use cases                                  nice to still have this hook menu with                                  both things together that's item                                        the list what do we do with menu links                                  now I don't know microphone I mean the                                  admin pages actually do some really                                  nasty direct queries to build admin                                  pages so I I think we should split this                                  up a lot of the structure of hook menu                                  was essentially mimicking what triple                                  five did in order not to which means                                  pupil                                                                  right or not                                                              whatever but in order not to make                                  people's heads explode you know as they                                  converted from five to six right a lot                                  of these behaviors were retained even                                  though they were very happy I think                                  having the name callbacks will help                                  right because then you can say my admin                                  pages have the                                  names and you can go then and change                                  everything else about them all you have                                  to do is specify the name is the same                                  with links I mean Drupal                                                 many links a lot less for actual user                                  navigation like you generally don't see                                  that large pile of links in the left                                  block that you used to see so again I                                  think what we have now is a convenient                                  system where we know that a path exists                                  and we automatically registered is                                  linked I think making that explicit is a                                  little bit more work but I think it                                  would be a lot cleaner and yeah i think                                  that overloading that one hook with all                                  that stuff is just led to more problems                                  yeah item i would agree i see this                                  initiative would clean up the overly                                  implementation and I frames and stuff                                  already the question for layout group                                  overlay yeah overlay my hope is that one                                  of the things we can do with the                                  stronger rusts underpinning and stronger                                  web services underpinning is overlay                                  becomes just another type of rest                                  requests that means we can clean up that                                  process and have your just an actual                                  client side app in JavaScript that is                                  overlay that makes real requests against                                  the server rather than the kind of                                  tricky you know backdoor you type things                                  it does now that are kind of gross we                                  need to get the new router in place                                  first before we can do that we need to                                  get the the provides a jack system in                                  place to take full advantage of it and                                  then we can start cleaning up overlay                                  I'm leg again I'm not really focused on                                  that one I'd love it if someone did                                  after we get the point where you can do                                  so so I'm hoping we can get to there but                                  it's not something I'm looking at                                  directly okay we're just about at time                                  if you want to join us for a strategy                                  meeting I just let's just meet up to the                                  front to the room here and then we can                                  figure out where we're going to go                                  otherwise enjoy lunch and hopefully                                  still see you in the issue huge because                                  as said there is a legitimate risk that                                  we end up with a half-written system                                  that no one's going to like I don't want                                  to end up there I need help to get                                  these slides you'll be up on the                                  internet later today I will tweet it                                  just follow me at Krell and includes                                  lots of links to places to go help                                  we also have                                  and I were you                                  that's
YouTube URL: https://www.youtube.com/watch?v=E7IEQP9vjzg


