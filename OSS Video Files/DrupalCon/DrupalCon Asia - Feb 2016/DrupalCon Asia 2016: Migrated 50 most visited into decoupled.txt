Title: DrupalCon Asia 2016: Migrated 50 most visited into decoupled
Publication date: 2016-04-20
Playlist: DrupalCon Asia - Feb 2016
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:06,779
the site is site has a top navigation

00:00:03,659 --> 00:00:09,150
essentially and the problem there is

00:00:06,779 --> 00:00:11,849
that since legacy has been around for 15

00:00:09,150 --> 00:00:13,799
years there's 15 years worth of business

00:00:11,849 --> 00:00:16,199
logic that has been baked into their

00:00:13,799 --> 00:00:19,260
older net platform that had to be

00:00:16,199 --> 00:00:21,449
exposed and you know those preferences

00:00:19,260 --> 00:00:23,910
had to be a properly mapped and migrated

00:00:21,449 --> 00:00:26,250
and same we'll talk a little bit more

00:00:23,910 --> 00:00:28,890
about that migration a little bit and

00:00:26,250 --> 00:00:30,449
then the last component here is this is

00:00:28,890 --> 00:00:32,160
this concept of infrastructure and the

00:00:30,449 --> 00:00:35,489
appropriate infrastructure and

00:00:32,160 --> 00:00:37,350
understanding what kind of trade-offs we

00:00:35,489 --> 00:00:40,140
make when we have certain caching

00:00:37,350 --> 00:00:42,270
strategies at different layers there was

00:00:40,140 --> 00:00:46,710
an Akamai cashing in front of the entire

00:00:42,270 --> 00:00:49,350
legacy website the node react web

00:00:46,710 --> 00:00:50,760
applications was being hosted on AWS but

00:00:49,350 --> 00:00:52,860
we also have this separate data center

00:00:50,760 --> 00:00:54,750
which was hosted in Chicago which was

00:00:52,860 --> 00:00:57,770
the dotnet platform that also needed to

00:00:54,750 --> 00:01:00,899
consume these api's and there was a very

00:00:57,770 --> 00:01:02,489
specific SLA which needed to be hit in

00:01:00,899 --> 00:01:09,750
order to ensure performance across the

00:01:02,489 --> 00:01:10,890
ecosystem for these api's so you know

00:01:09,750 --> 00:01:13,740
since we're dealing with two different

00:01:10,890 --> 00:01:15,540
teams so you know managing velocity

00:01:13,740 --> 00:01:17,610
around that so that you know there are

00:01:15,540 --> 00:01:20,130
no blockers for each other right so we

00:01:17,610 --> 00:01:22,350
chose a common methodology which was

00:01:20,130 --> 00:01:24,630
crumb for this project and we were

00:01:22,350 --> 00:01:26,009
always once you know in terms of Drupal

00:01:24,630 --> 00:01:30,000
development we were always one sprint

00:01:26,009 --> 00:01:32,579
ahead of the front end team and ensure

00:01:30,000 --> 00:01:36,869
that you know we were very proactive in

00:01:32,579 --> 00:01:40,920
sharing the API designs up front and so

00:01:36,869 --> 00:01:46,170
so would be basically to unblock the

00:01:40,920 --> 00:01:48,630
team to also you know it was very

00:01:46,170 --> 00:01:50,040
important since we were you know

00:01:48,630 --> 00:01:51,780
accelerant by nature is a very

00:01:50,040 --> 00:01:55,070
distributed organization you know we're

00:01:51,780 --> 00:01:58,320
basically spread out all over India and

00:01:55,070 --> 00:02:00,570
rest of the world too and you know and

00:01:58,320 --> 00:02:01,860
there's another client who's also sort

00:02:00,570 --> 00:02:04,049
of distributed right so they had three

00:02:01,860 --> 00:02:06,119
different offices that we had to sort of

00:02:04,049 --> 00:02:07,920
work with so it's really really

00:02:06,119 --> 00:02:10,560
important for a project of this size and

00:02:07,920 --> 00:02:13,290
scope that we you know

00:02:10,560 --> 00:02:15,599
the communication channels open and we

00:02:13,290 --> 00:02:18,660
sort of over communicate to see the

00:02:15,599 --> 00:02:24,330
success so we used like tools like slag

00:02:18,660 --> 00:02:26,099
zoom skype email phone you know even you

00:02:24,330 --> 00:02:27,209
know pull request right so there are a

00:02:26,099 --> 00:02:30,170
lot of common thing that was happening

00:02:27,209 --> 00:02:32,640
on the full request itself you know to

00:02:30,170 --> 00:02:34,620
ensure that no we were never really

00:02:32,640 --> 00:02:36,030
blocking each other you know we got the

00:02:34,620 --> 00:02:38,099
information that we need and we kept

00:02:36,030 --> 00:02:41,040
moving on because it was such an

00:02:38,099 --> 00:02:43,680
aggressive timeline to be hit right and

00:02:41,040 --> 00:02:46,410
they had it defined in a sort of a

00:02:43,680 --> 00:02:47,819
pretty hard deadline then some of the

00:02:46,410 --> 00:02:51,030
Drupal best practices that we follow

00:02:47,819 --> 00:02:53,100
during development you know were sort of

00:02:51,030 --> 00:02:55,380
having consistent environments so we

00:02:53,100 --> 00:02:56,849
knew up pretty early on that you know

00:02:55,380 --> 00:03:00,060
the solution would be hosted on Acquia

00:02:56,849 --> 00:03:01,530
cloud so we we said okay now what's the

00:03:00,060 --> 00:03:03,420
closest environment that we can get our

00:03:01,530 --> 00:03:04,769
hands on and bring it into our

00:03:03,420 --> 00:03:07,260
development early so that there are no

00:03:04,769 --> 00:03:09,239
surprises we could test it and all of

00:03:07,260 --> 00:03:11,760
that right so we took Jeff geerlings

00:03:09,239 --> 00:03:13,560
Drupal vm block that as part of our code

00:03:11,760 --> 00:03:14,760
base actually so we push the environment

00:03:13,560 --> 00:03:16,440
as part of a code base every time

00:03:14,760 --> 00:03:18,209
someone would check it out they would

00:03:16,440 --> 00:03:20,190
have the environment within it it's a

00:03:18,209 --> 00:03:24,090
way current image if you don't know it

00:03:20,190 --> 00:03:26,000
and you know and that's how we developed

00:03:24,090 --> 00:03:28,109
right that was a consistent environment

00:03:26,000 --> 00:03:30,480
that we followed throughout the

00:03:28,109 --> 00:03:32,819
lifecycle of the project we also

00:03:30,480 --> 00:03:34,980
established a get workflow you know

00:03:32,819 --> 00:03:38,579
within the team we follow release

00:03:34,980 --> 00:03:40,109
branching and feature branches here and

00:03:38,579 --> 00:03:43,620
and you know ensure that we were

00:03:40,109 --> 00:03:45,180
maintaining release notes diligently you

00:03:43,620 --> 00:03:47,359
know it was very important because we

00:03:45,180 --> 00:03:50,700
were constantly delivering solutions

00:03:47,359 --> 00:03:53,250
were delivering the developed product

00:03:50,700 --> 00:03:54,780
over to the front end team you know we

00:03:53,250 --> 00:03:57,530
had to communicate that and release

00:03:54,780 --> 00:03:59,690
notes became a sort of de facto

00:03:57,530 --> 00:04:03,970
document that everyone would sort of

00:03:59,690 --> 00:04:06,470
refer to we also used drush bill script

00:04:03,970 --> 00:04:08,750
you know and establish that early on in

00:04:06,470 --> 00:04:10,250
the project you know so this helped us

00:04:08,750 --> 00:04:12,620
kind of maintain updates to core

00:04:10,250 --> 00:04:15,080
concepts any patches that we are putting

00:04:12,620 --> 00:04:17,419
in the system it was all automated so

00:04:15,080 --> 00:04:19,340
this would again save us time you know

00:04:17,419 --> 00:04:21,470
any new Drupal core release that came

00:04:19,340 --> 00:04:24,740
out it actually did in the in the last

00:04:21,470 --> 00:04:26,480
four months of sort of working there are

00:04:24,740 --> 00:04:28,280
lot of contracts so we could easily just

00:04:26,480 --> 00:04:31,730
run the brush build script get the new

00:04:28,280 --> 00:04:33,680
updates in and and we were done again

00:04:31,730 --> 00:04:36,620
feature driven development you know it's

00:04:33,680 --> 00:04:38,780
not new to anyone but we ensured that we

00:04:36,620 --> 00:04:40,460
followed it to the best all

00:04:38,780 --> 00:04:44,470
configurations were checked in into the

00:04:40,460 --> 00:04:47,540
features and you know it made lot of our

00:04:44,470 --> 00:04:51,830
you know brought lot of consistency in

00:04:47,540 --> 00:04:53,990
terms of output we also had created

00:04:51,830 --> 00:04:56,870
bunch of different checklists in the

00:04:53,990 --> 00:04:58,880
project both automated we used a drupal

00:04:56,870 --> 00:05:01,280
module called site audit which sort of

00:04:58,880 --> 00:05:05,030
checks for drupal best practices and at

00:05:01,280 --> 00:05:07,070
the same time we we also created bunch

00:05:05,030 --> 00:05:08,750
of our own checklist that we followed

00:05:07,070 --> 00:05:10,430
because you know there were AP is that

00:05:08,750 --> 00:05:12,500
were being developed there were in a

00:05:10,430 --> 00:05:13,760
bunch of different aspects of drupal

00:05:12,500 --> 00:05:15,200
development that we looked at and

00:05:13,760 --> 00:05:17,330
created a pretty holistic checklist that

00:05:15,200 --> 00:05:20,930
we would follow on you know after every

00:05:17,330 --> 00:05:22,940
release or before every dimension since

00:05:20,930 --> 00:05:27,110
we were deploying to multiple different

00:05:22,940 --> 00:05:28,880
environments you know there was a QA

00:05:27,110 --> 00:05:30,650
team from like DC side there was our own

00:05:28,880 --> 00:05:32,690
internal QA team there are a lot of

00:05:30,650 --> 00:05:35,450
features that were being developed you

00:05:32,690 --> 00:05:37,130
know we were constantly deploying to you

00:05:35,450 --> 00:05:38,810
know our solution right we were

00:05:37,130 --> 00:05:40,850
constantly releasing it so there is a

00:05:38,810 --> 00:05:42,140
drupal module if you guys haven't used

00:05:40,850 --> 00:05:45,470
it there is a module called environment

00:05:42,140 --> 00:05:47,600
you know you can you could kind of you

00:05:45,470 --> 00:05:49,460
know fake you know kind of plan your

00:05:47,600 --> 00:05:51,560
entire environments that you are

00:05:49,460 --> 00:05:53,900
deploying to in that and you can

00:05:51,560 --> 00:05:58,520
basically scripted at all so we could

00:05:53,900 --> 00:05:59,930
simply you know kind of just figured you

00:05:58,520 --> 00:06:01,220
know if it's a QA environment we know

00:05:59,930 --> 00:06:03,289
what configuration the QA environment

00:06:01,220 --> 00:06:05,060
needs which modules should be turned on

00:06:03,289 --> 00:06:06,990
and off all of that right so it was

00:06:05,060 --> 00:06:09,120
completely automated

00:06:06,990 --> 00:06:12,510
so highly recommend if you guys haven't

00:06:09,120 --> 00:06:14,340
used environment do Co use it so just to

00:06:12,510 --> 00:06:17,310
give you some stats we had used about 80

00:06:14,340 --> 00:06:18,960
plus fun trips in the project you know I

00:06:17,310 --> 00:06:21,240
wouldn't go into too much detail around

00:06:18,960 --> 00:06:25,560
what was being developed but and 40 +

00:06:21,240 --> 00:06:27,270
custom modules because this sort of

00:06:25,560 --> 00:06:29,460
gives you a high level sort of

00:06:27,270 --> 00:06:32,100
architectural overview there is Akamai

00:06:29,460 --> 00:06:34,200
there is a node.js layer we are hosted

00:06:32,100 --> 00:06:37,680
on our quia and it's the Drupal

00:06:34,200 --> 00:06:40,260
ecosystem that's that's there you know

00:06:37,680 --> 00:06:43,350
using the rest api we were delivering

00:06:40,260 --> 00:06:45,360
content back to the notoriously so with

00:06:43,350 --> 00:06:48,270
that you know lakshmi will kind of give

00:06:45,360 --> 00:06:53,400
you a deep done around this this

00:06:48,270 --> 00:06:55,350
component of the platform before there

00:06:53,400 --> 00:07:00,740
any questions are what you covered so

00:06:55,350 --> 00:07:00,740
far could

00:07:09,480 --> 00:07:16,970
so no headless implementation is

00:07:11,730 --> 00:07:20,220
complete without a restful api right so

00:07:16,970 --> 00:07:23,730
we chose a module called restful for

00:07:20,220 --> 00:07:26,280
doing that the Dipple ecosystem already

00:07:23,730 --> 00:07:28,500
has got a couple of other modules which

00:07:26,280 --> 00:07:30,630
are popular for doing this you might

00:07:28,500 --> 00:07:35,700
have heard of services and there's one

00:07:30,630 --> 00:07:38,070
more called rest WS when we evaluated

00:07:35,700 --> 00:07:41,940
restful it was in its early stages but

00:07:38,070 --> 00:07:44,100
the best part about restful was it was

00:07:41,940 --> 00:07:46,380
very developer friendly the only

00:07:44,100 --> 00:07:48,120
prerequisite you needed is for the

00:07:46,380 --> 00:07:51,030
resource to be present in your triple

00:07:48,120 --> 00:07:54,390
database so you could tweak it and

00:07:51,030 --> 00:07:58,260
export it as a rest resource the other

00:07:54,390 --> 00:08:00,570
thing is wrestle allows you to configure

00:07:58,260 --> 00:08:05,250
and find you in every aspect of your APA

00:08:00,570 --> 00:08:07,200
like caching headers the the way you

00:08:05,250 --> 00:08:08,820
structure your payload the

00:08:07,200 --> 00:08:10,760
authentication mechanism on upper

00:08:08,820 --> 00:08:13,620
endpoint basis you can have

00:08:10,760 --> 00:08:15,780
authentication scheme or for one

00:08:13,620 --> 00:08:18,090
endpoint and you can have a token based

00:08:15,780 --> 00:08:20,160
authentication for another endpoint in

00:08:18,090 --> 00:08:26,460
the same system so it was highly

00:08:20,160 --> 00:08:29,340
configurable no api is useful without

00:08:26,460 --> 00:08:31,380
having any documentation because we are

00:08:29,340 --> 00:08:34,320
used to consume that documentation

00:08:31,380 --> 00:08:38,010
because only computers can consume an

00:08:34,320 --> 00:08:39,890
API JSON payload right so there are a

00:08:38,010 --> 00:08:42,599
lot of competing standards for

00:08:39,890 --> 00:08:44,760
specifying how exactly an APA spec

00:08:42,599 --> 00:08:47,790
should look you guys made up word up for

00:08:44,760 --> 00:08:50,610
swagger there is array ml which is our

00:08:47,790 --> 00:08:52,410
AML because it closely resembles yamel

00:08:50,610 --> 00:08:55,080
it is readable both my computers and

00:08:52,410 --> 00:08:58,830
humans quite a lot of passes exist in

00:08:55,080 --> 00:09:01,080
various languages for our AML and the

00:08:58,830 --> 00:09:03,720
best part about our mls it allows you to

00:09:01,080 --> 00:09:05,460
auto generate test cases out of the

00:09:03,720 --> 00:09:08,160
specification so the only thing we need

00:09:05,460 --> 00:09:10,800
to write even before we start coding the

00:09:08,160 --> 00:09:12,390
API itself force to write down an RMS

00:09:10,800 --> 00:09:14,610
spec and share it with all the APA

00:09:12,390 --> 00:09:17,280
consumers and stakeholders so that they

00:09:14,610 --> 00:09:19,170
get a heads-up of what exactly they will

00:09:17,280 --> 00:09:20,460
be expecting to consume when we publish

00:09:19,170 --> 00:09:24,300
the APA

00:09:20,460 --> 00:09:27,210
of the other goody about our emilie's

00:09:24,300 --> 00:09:29,840
there is a PHP rml parser which allows

00:09:27,210 --> 00:09:32,130
you to pass an RMS specification and

00:09:29,840 --> 00:09:33,450
converted into a Drupal web disqus so

00:09:32,130 --> 00:09:36,180
that you need not spend your time

00:09:33,450 --> 00:09:37,530
writing manual test cases for any pain

00:09:36,180 --> 00:09:41,250
point you have lot of other better

00:09:37,530 --> 00:09:43,500
things to do right so if you get in see

00:09:41,250 --> 00:09:46,230
this this is how animal looks pretty

00:09:43,500 --> 00:09:48,810
textual you can read it and infer or

00:09:46,230 --> 00:09:51,300
make make something out of it as to what

00:09:48,810 --> 00:09:53,610
the end point does so this is an example

00:09:51,300 --> 00:09:55,740
of an RN well format it is it very

00:09:53,610 --> 00:10:00,570
closely resembles it occurs in the yamel

00:09:55,740 --> 00:10:02,640
format like i said the authentication is

00:10:00,570 --> 00:10:05,060
pretty configurable and restful comes

00:10:02,640 --> 00:10:09,150
with it out of the box authentication

00:10:05,060 --> 00:10:12,480
which is pretty secure but we not being

00:10:09,150 --> 00:10:14,280
a public-facing api needed i have any

00:10:12,480 --> 00:10:17,370
such security requirements which were

00:10:14,280 --> 00:10:19,860
very stringent so we just cut some

00:10:17,370 --> 00:10:23,490
corners on that and we wrote our own

00:10:19,860 --> 00:10:24,930
lightweight authentication to get more

00:10:23,490 --> 00:10:27,470
performance to squeeze out more

00:10:24,930 --> 00:10:29,790
performance out of the whole system

00:10:27,470 --> 00:10:32,160
because we used restful we were able to

00:10:29,790 --> 00:10:34,400
do this I'm not sure if we could have

00:10:32,160 --> 00:10:40,290
done this if we had used any other

00:10:34,400 --> 00:10:43,110
services based module there is a lot of

00:10:40,290 --> 00:10:47,010
literature around how you should version

00:10:43,110 --> 00:10:48,630
your restful api even the very fact that

00:10:47,010 --> 00:10:49,890
where you place it is a question of

00:10:48,630 --> 00:10:53,400
debate some people say that you have to

00:10:49,890 --> 00:10:55,650
place it in your URL in your headers and

00:10:53,400 --> 00:10:57,480
all that unfortunately this will only

00:10:55,650 --> 00:10:59,460
allows you to place it in the URL but

00:10:57,480 --> 00:11:02,070
there is an even a bigger question as to

00:10:59,460 --> 00:11:04,920
where you how you increase a version

00:11:02,070 --> 00:11:08,900
number when you are creating a restful

00:11:04,920 --> 00:11:10,920
resource we had this a policy of

00:11:08,900 --> 00:11:13,470
increasing the version minor version

00:11:10,920 --> 00:11:16,380
number by one every time the payload

00:11:13,470 --> 00:11:19,080
changes or the behavior changes the

00:11:16,380 --> 00:11:21,600
underlying concept here is your restful

00:11:19,080 --> 00:11:24,060
api version is a sort of contract

00:11:21,600 --> 00:11:26,400
between the consumer and the producer as

00:11:24,060 --> 00:11:27,690
to what the payload will be and what

00:11:26,400 --> 00:11:29,700
will be the authentication scheme and

00:11:27,690 --> 00:11:31,350
everything so any of these changes it's

00:11:29,700 --> 00:11:33,750
technically a change in contract so you

00:11:31,350 --> 00:11:34,190
bub up the version number so machining

00:11:33,750 --> 00:11:37,430
was pretty

00:11:34,190 --> 00:11:39,560
useful in describing a contract the same

00:11:37,430 --> 00:11:44,290
way rml was useful in describing the

00:11:39,560 --> 00:11:47,000
spec we did have challenges with restful

00:11:44,290 --> 00:11:49,700
we had an endpoint which had to imitate

00:11:47,000 --> 00:11:53,240
a URL alias in Drupal so given a URL

00:11:49,700 --> 00:11:55,580
aliens you have to get all the metadata

00:11:53,240 --> 00:11:57,680
and fields for that entity it could be

00:11:55,580 --> 00:12:00,350
anything to be user know or a taxonomy

00:11:57,680 --> 00:12:02,840
term there were some tricky parts here

00:12:00,350 --> 00:12:04,790
as to what do you do in case the alias

00:12:02,840 --> 00:12:06,860
is not fold or what if there is a URL

00:12:04,790 --> 00:12:10,030
redirect you have to do a lookup on the

00:12:06,860 --> 00:12:12,080
URL table every time and fortunately

00:12:10,030 --> 00:12:14,270
there are a lot of modules which had

00:12:12,080 --> 00:12:17,300
exposed a ps4 that so we have to make

00:12:14,270 --> 00:12:19,310
use of those in restful and we need to

00:12:17,300 --> 00:12:22,880
expose the metadata of each and every

00:12:19,310 --> 00:12:26,240
entity along with that URL Elias so we

00:12:22,880 --> 00:12:29,330
have to consume the endpoints provided

00:12:26,240 --> 00:12:31,610
by sorry not the endpoints the functions

00:12:29,330 --> 00:12:34,040
which were exposed by meta tags module

00:12:31,610 --> 00:12:40,270
to get the meta tags or metadata for

00:12:34,040 --> 00:12:43,070
that entity this will ships with a

00:12:40,270 --> 00:12:45,770
batteries included caching functions and

00:12:43,070 --> 00:12:49,670
provision you can integrate it ready

00:12:45,770 --> 00:12:51,110
made with either reduce or memcache we

00:12:49,670 --> 00:12:55,490
have to do it with memcache because our

00:12:51,110 --> 00:12:59,050
platform was having memcache only there

00:12:55,490 --> 00:13:01,600
is a need to clear your cache very

00:12:59,050 --> 00:13:06,970
diligently based on the context because

00:13:01,600 --> 00:13:10,010
you have to take a visitation between

00:13:06,970 --> 00:13:11,510
caching every time resource changes

00:13:10,010 --> 00:13:13,430
messes caching only those endpoints

00:13:11,510 --> 00:13:16,520
which change when you change our

00:13:13,430 --> 00:13:18,589
particular node or of entity so we have

00:13:16,520 --> 00:13:20,810
to perform this sort of mapping so I

00:13:18,589 --> 00:13:22,730
have detailed those in few blog post

00:13:20,810 --> 00:13:25,490
which have length here we thought this

00:13:22,730 --> 00:13:27,620
is a very generalized use case so we put

00:13:25,490 --> 00:13:29,660
it up as a corner of module as d

00:13:27,620 --> 00:13:31,160
daughter you guys can check it out I

00:13:29,660 --> 00:13:35,240
mean not yet because they are not put

00:13:31,160 --> 00:13:41,140
any code probably with any questions

00:13:35,240 --> 00:13:41,140
around restful yes

00:13:42,250 --> 00:13:47,660
yeah you can do it you just have to

00:13:45,560 --> 00:13:49,790
whatever logging you are using you just

00:13:47,660 --> 00:13:52,340
have to plug it and said your loss this

00:13:49,790 --> 00:13:54,460
is handling a class or function that's

00:13:52,340 --> 00:13:54,460
it

00:13:57,410 --> 00:14:03,030
minor version so this is it like the

00:14:00,270 --> 00:14:04,860
older version which is still working

00:14:03,030 --> 00:14:06,810
yeah the older version will still exist

00:14:04,860 --> 00:14:09,080
that's a good question i was expecting

00:14:06,810 --> 00:14:12,120
somebody will ask this actually so we

00:14:09,080 --> 00:14:15,780
closely follow the inheritance mechanism

00:14:12,120 --> 00:14:17,250
for version anything with changes in one

00:14:15,780 --> 00:14:19,290
dot three from one or two we just

00:14:17,250 --> 00:14:24,510
inherit the previous class and then only

00:14:19,290 --> 00:14:28,530
change the function which has working

00:14:24,510 --> 00:14:30,120
right now 11 dot 2 yeah it will shall

00:14:28,530 --> 00:14:34,500
continue to work as long as you don't

00:14:30,120 --> 00:14:36,180
decommission or disable it you guys have

00:14:34,500 --> 00:14:39,180
vertical what is working simultaneously

00:14:36,180 --> 00:14:40,500
yes yes because there may be consumers

00:14:39,180 --> 00:14:43,530
who will be consuming the older a peer

00:14:40,500 --> 00:14:49,560
as it happens in all of rest abuse so

00:14:43,530 --> 00:14:51,710
you do not want to disable that we thank

00:14:49,560 --> 00:14:51,710
you

00:15:15,470 --> 00:15:23,720
hello yeah ok so I'm saying I'll be

00:15:21,300 --> 00:15:27,300
talking a bit about crystal panels and

00:15:23,720 --> 00:15:29,820
migration so one of the requirements of

00:15:27,300 --> 00:15:31,620
this project was that even though it's a

00:15:29,820 --> 00:15:34,140
decoupled system the editor still wanted

00:15:31,620 --> 00:15:37,530
to maintain control over the layout over

00:15:34,140 --> 00:15:40,050
the content in the layout and so on now

00:15:37,530 --> 00:15:41,700
of course you know it's a decoupled

00:15:40,050 --> 00:15:43,830
system I mean if it was not a tea cup of

00:15:41,700 --> 00:15:45,480
system the answer is easy you just use

00:15:43,830 --> 00:15:48,660
panels you know you very very great

00:15:45,480 --> 00:15:52,250
interface and your whole fleet of tools

00:15:48,660 --> 00:15:56,130
that works with panels and you're done

00:15:52,250 --> 00:15:59,310
this is decoupled right so you can't do

00:15:56,130 --> 00:16:00,960
that here actually before starting we

00:15:59,310 --> 00:16:03,300
also looked at presentation framework

00:16:00,960 --> 00:16:08,220
how many of you here know presentation

00:16:03,300 --> 00:16:10,260
framework is a fact no one so this is

00:16:08,220 --> 00:16:13,620
this presentation framework am talking

00:16:10,260 --> 00:16:16,050
about it's a module developed by media

00:16:13,620 --> 00:16:19,500
current that's right media current right

00:16:16,050 --> 00:16:22,310
yeah for weather.com you know

00:16:19,500 --> 00:16:24,210
weather.com brands Drupal now and

00:16:22,310 --> 00:16:28,470
presentation framework is something they

00:16:24,210 --> 00:16:29,970
used to make handling panels easier we

00:16:28,470 --> 00:16:31,470
started off this path but quickly

00:16:29,970 --> 00:16:33,090
realized that is not really what we are

00:16:31,470 --> 00:16:35,130
looking for we are just actually looking

00:16:33,090 --> 00:16:37,410
for the exact opposite it is something

00:16:35,130 --> 00:16:45,300
like in any different direction and and

00:16:37,410 --> 00:16:47,520
we we built this yeah so this is this

00:16:45,300 --> 00:16:49,860
was have a problem you know we we can

00:16:47,520 --> 00:16:54,240
let editors use panels they have access

00:16:49,860 --> 00:16:55,650
to drove it back end of course and your

00:16:54,240 --> 00:16:57,660
your standard panels configuration you

00:16:55,650 --> 00:17:02,540
create beans and all that but we wanted

00:16:57,660 --> 00:17:06,390
to sorry we wanted to make it available

00:17:02,540 --> 00:17:09,840
via regular JSON output you know in in a

00:17:06,390 --> 00:17:10,950
restful endpoint and basically the what

00:17:09,840 --> 00:17:13,530
you see on the screen that is what we

00:17:10,950 --> 00:17:16,290
wanted a regular pain configuration

00:17:13,530 --> 00:17:18,360
converting into Jason something which

00:17:16,290 --> 00:17:22,679
you can work with in code

00:17:18,360 --> 00:17:25,260
and we we built this it's contrib ll

00:17:22,679 --> 00:17:28,830
channelling so this is like the overall

00:17:25,260 --> 00:17:31,380
working of restoril panels from a very

00:17:28,830 --> 00:17:34,320
very you know from eagles eye view I

00:17:31,380 --> 00:17:35,700
don't go too deep into this but if

00:17:34,320 --> 00:17:37,980
you're familiar with restful at all you

00:17:35,700 --> 00:17:40,200
would know that data-provider classes

00:17:37,980 --> 00:17:43,080
are kind of common restful we use the

00:17:40,200 --> 00:17:45,210
same methodology and to actually render

00:17:43,080 --> 00:17:47,850
the panel the panel which the editor

00:17:45,210 --> 00:17:49,650
builds we are using the standard panels

00:17:47,850 --> 00:17:51,120
renderer this is probably what are you

00:17:49,650 --> 00:17:53,070
using any way on the front and you know

00:17:51,120 --> 00:17:56,400
there are out of the box there are two

00:17:53,070 --> 00:17:57,660
choices standard panels and IP we went

00:17:56,400 --> 00:18:02,760
with standard panels just because it's

00:17:57,660 --> 00:18:04,260
simpler and industrial panels you have a

00:18:02,760 --> 00:18:07,650
something called structured render which

00:18:04,260 --> 00:18:13,500
will kind of make it suitable for JSON

00:18:07,650 --> 00:18:15,870
output and in our custom namespace you

00:18:13,500 --> 00:18:17,790
know very specific to legacy of our

00:18:15,870 --> 00:18:21,059
requirements we build a model called

00:18:17,790 --> 00:18:23,070
legacy pain which would so in legacy

00:18:21,059 --> 00:18:25,169
these were not really panels there were

00:18:23,070 --> 00:18:28,440
nodes whatever whatever we wanted to

00:18:25,169 --> 00:18:32,610
return through this end point they were

00:18:28,440 --> 00:18:34,559
penalized nodes so restful panels also

00:18:32,610 --> 00:18:36,600
has a class called crystal panels

00:18:34,559 --> 00:18:41,280
finalizar over there which you can just

00:18:36,600 --> 00:18:43,710
extend and use it just extending your

00:18:41,280 --> 00:18:47,880
custom modules and you will be able to

00:18:43,710 --> 00:18:49,410
output panel Iser as jason and another

00:18:47,880 --> 00:18:52,620
another thing that this module provides

00:18:49,410 --> 00:18:54,419
is it passes in a restful context but do

00:18:52,620 --> 00:18:58,590
you know what i mean by context as in

00:18:54,419 --> 00:19:01,230
panels and CTools context okay some do

00:18:58,590 --> 00:19:06,809
so yeah basically what the cells in is

00:19:01,230 --> 00:19:09,210
like you saw in a screenshot before so

00:19:06,809 --> 00:19:12,900
if this pain so this is the legacy pain

00:19:09,210 --> 00:19:14,910
you saw him that other diagram you can

00:19:12,900 --> 00:19:16,200
if it is being rendered normally you

00:19:14,910 --> 00:19:18,600
know on a normal page or something it's

00:19:16,200 --> 00:19:20,630
being rendered as a bulleted list but in

00:19:18,600 --> 00:19:23,940
Jason it comes down into a structured

00:19:20,630 --> 00:19:26,910
JSON object you know your regular

00:19:23,940 --> 00:19:29,130
JavaScript object keyvaluepair right and

00:19:26,910 --> 00:19:30,880
this is made possible because a restful

00:19:29,130 --> 00:19:32,830
context is passed in

00:19:30,880 --> 00:19:34,240
and the content-type can take a decision

00:19:32,830 --> 00:19:35,620
you know should it render as array or

00:19:34,240 --> 00:19:38,230
should it winter has a bulleted list is

00:19:35,620 --> 00:19:39,550
it's it's basically the flexibility is

00:19:38,230 --> 00:19:44,350
on to you you know you can do whatever

00:19:39,550 --> 00:19:45,760
you want with the data so it is this

00:19:44,350 --> 00:19:47,740
this particular model is already

00:19:45,760 --> 00:19:49,630
contributed it's available for use there

00:19:47,740 --> 00:19:52,390
is a dev release you can go try it out

00:19:49,630 --> 00:19:55,450
I'd love to if you can allow to hear

00:19:52,390 --> 00:19:59,370
from you to try it out it's d dot 0 /

00:19:55,450 --> 00:20:01,960
project / restful underscore panels and

00:19:59,370 --> 00:20:03,460
what this module currently lacks you

00:20:01,960 --> 00:20:05,140
know basically the reason it's in there

00:20:03,460 --> 00:20:09,160
is because it's not completely tested

00:20:05,140 --> 00:20:10,600
with variety of context and I mean we

00:20:09,160 --> 00:20:12,130
never had a use case in legacy and

00:20:10,600 --> 00:20:15,270
that's why it's not tested as of yet

00:20:12,130 --> 00:20:19,660
that's one thing we want to look into

00:20:15,270 --> 00:20:24,100
another thing is meta tags so you know

00:20:19,660 --> 00:20:26,650
metatext module I'm sure and assume you

00:20:24,100 --> 00:20:28,390
would penalize anodes they would have

00:20:26,650 --> 00:20:31,090
certain meta tags information along with

00:20:28,390 --> 00:20:33,220
it and by default of course restful

00:20:31,090 --> 00:20:35,560
panels does not do anything right now in

00:20:33,220 --> 00:20:37,450
legacy Pina doing this but I am looking

00:20:35,560 --> 00:20:38,650
forward to add some support for that out

00:20:37,450 --> 00:20:42,570
of the box because it's a very very

00:20:38,650 --> 00:20:45,880
common scenario and panels variants

00:20:42,570 --> 00:20:47,260
again so a node you can have multiple

00:20:45,880 --> 00:20:50,320
variants right but they are actually

00:20:47,260 --> 00:20:55,590
really different displays so you can

00:20:50,320 --> 00:20:58,750
even now you can use them but the the

00:20:55,590 --> 00:21:00,850
the onus of determining the displays on

00:20:58,750 --> 00:21:06,040
to you maybe that is something which the

00:21:00,850 --> 00:21:07,510
module can do as well I quickly cover

00:21:06,040 --> 00:21:10,120
migration it is a very quick slide and

00:21:07,510 --> 00:21:12,610
then I will be open for questions so

00:21:10,120 --> 00:21:16,420
here we might get it from SQL Server and

00:21:12,610 --> 00:21:17,980
in this particular database was built

00:21:16,420 --> 00:21:19,990
over 15 years you know so you can

00:21:17,980 --> 00:21:23,110
imagine you know what kind of tables

00:21:19,990 --> 00:21:26,610
they might be but one thing about that

00:21:23,110 --> 00:21:29,050
was it was it's very different from

00:21:26,610 --> 00:21:33,120
regular drupal content module you know

00:21:29,050 --> 00:21:35,980
nodes fields field collections and so on

00:21:33,120 --> 00:21:38,740
right and so that was one of the

00:21:35,980 --> 00:21:41,890
challenge incorrectly translating the

00:21:38,740 --> 00:21:43,090
source data into into drupal specific

00:21:41,890 --> 00:21:43,470
data it was just a different form of

00:21:43,090 --> 00:21:48,120
normal

00:21:43,470 --> 00:21:50,549
ization I would say and so what we what

00:21:48,120 --> 00:21:52,470
we basically did you know so this is

00:21:50,549 --> 00:21:54,000
like a best practice which you should be

00:21:52,470 --> 00:21:56,970
following on your migration projects

00:21:54,000 --> 00:22:00,090
anyway is that you should map everything

00:21:56,970 --> 00:22:02,130
I mean if you probably if I don't know

00:22:00,090 --> 00:22:04,770
what I mean then I think it not make

00:22:02,130 --> 00:22:09,299
sense now but i'll go with it anyway

00:22:04,770 --> 00:22:11,460
it's you migration model in the

00:22:09,299 --> 00:22:14,760
framework allows you to map what is the

00:22:11,460 --> 00:22:17,250
required fields but as a practice we map

00:22:14,760 --> 00:22:18,929
each and everything anyway so what what

00:22:17,250 --> 00:22:21,030
happens in like what happened here in

00:22:18,929 --> 00:22:24,000
this case was that migration was

00:22:21,030 --> 00:22:26,820
iterative you know so the development

00:22:24,000 --> 00:22:28,710
went hand in hand and while the the side

00:22:26,820 --> 00:22:32,070
bill was not finalized we still we are

00:22:28,710 --> 00:22:34,470
already migrating data right so what if

00:22:32,070 --> 00:22:36,090
it feels to changes you know like the

00:22:34,470 --> 00:22:38,549
field name changes or fields have fields

00:22:36,090 --> 00:22:39,600
get dropped or added all the time my

00:22:38,549 --> 00:22:41,490
English in framework would be able to

00:22:39,600 --> 00:22:43,980
tell us that if there is any such change

00:22:41,490 --> 00:22:46,530
it will give up an error if you don't

00:22:43,980 --> 00:22:48,000
map any everything you will get all the

00:22:46,530 --> 00:22:50,039
errors and you will just ignore them but

00:22:48,000 --> 00:22:52,169
if you map everything you will be on

00:22:50,039 --> 00:22:57,030
lookout for any such errors which which

00:22:52,169 --> 00:22:58,710
is really helpful we also migrated

00:22:57,030 --> 00:23:00,419
different types of data over different

00:22:58,710 --> 00:23:02,880
times and so we just split them in

00:23:00,419 --> 00:23:04,320
migration groups again if you are

00:23:02,880 --> 00:23:05,909
familiar with migration I really

00:23:04,320 --> 00:23:07,740
encourage you to look into this best

00:23:05,909 --> 00:23:12,720
practices it's it's a great framework

00:23:07,740 --> 00:23:15,539
wait module so in using these mechanisms

00:23:12,720 --> 00:23:19,860
we basically migrated around electric in

00:23:15,539 --> 00:23:22,409
see we are 2,000 finite articles 5,000

00:23:19,860 --> 00:23:24,659
media items various galleries around

00:23:22,409 --> 00:23:26,820
1,100 affiliates they are very very

00:23:24,659 --> 00:23:28,260
discreet I mean you can products we

00:23:26,820 --> 00:23:30,150
finally bullet points on this but

00:23:28,260 --> 00:23:33,240
actually they are very complex

00:23:30,150 --> 00:23:34,620
structures and we probably had like 15

00:23:33,240 --> 00:23:36,690
or 20 Mike Lee I don't really remember

00:23:34,620 --> 00:23:37,980
but we had a bunch of different

00:23:36,690 --> 00:23:40,440
migrations covering each and everything

00:23:37,980 --> 00:23:44,850
you can see at the data structures get

00:23:40,440 --> 00:23:47,900
really and so really complex that's

00:23:44,850 --> 00:23:47,900
about it any any questions

00:23:52,960 --> 00:23:59,600
do you mean the development or the

00:23:55,220 --> 00:24:00,980
running of migration so development I

00:23:59,600 --> 00:24:02,990
mean it was spread out like I said it

00:24:00,980 --> 00:24:05,360
went hand-in-hand with the development

00:24:02,990 --> 00:24:07,640
of site itself so each sprint you know

00:24:05,360 --> 00:24:09,559
we would identify that these are the

00:24:07,640 --> 00:24:12,140
these are the elements that have been

00:24:09,559 --> 00:24:14,720
built and we would write the migration

00:24:12,140 --> 00:24:17,600
along with that so Mike it was it went

00:24:14,720 --> 00:24:19,160
in hand in hand so I mean if I say it

00:24:17,600 --> 00:24:20,299
was spread out over weeks it doesn't

00:24:19,160 --> 00:24:23,419
give the correct picture because it did

00:24:20,299 --> 00:24:26,450
actually take weeks if it was dispersed

00:24:23,419 --> 00:24:29,090
with other development the entire run

00:24:26,450 --> 00:24:30,770
depends on the so I mean it takes in

00:24:29,090 --> 00:24:39,710
Jordan um how's how long it takes to run

00:24:30,770 --> 00:24:41,090
a migration yeah it's it's a migration

00:24:39,710 --> 00:24:43,010
happened whatever I don't really

00:24:41,090 --> 00:24:48,440
remember how much time it took but yeah

00:24:43,010 --> 00:24:51,559
I think that's 15 to 30 minutes yeah

00:24:48,440 --> 00:24:54,320
okay so that's a since you know like

00:24:51,559 --> 00:24:58,790
there are things which field collections

00:24:54,320 --> 00:25:00,140
does which makes it very very heavy on

00:24:58,790 --> 00:25:02,210
performance to delete them you know

00:25:00,140 --> 00:25:04,970
creating them is easy in this case the

00:25:02,210 --> 00:25:06,679
leading takes time because you know

00:25:04,970 --> 00:25:08,390
migrations were structured that like I

00:25:06,679 --> 00:25:11,510
said that this data structures were

00:25:08,390 --> 00:25:14,690
quite complex so we had a migration just

00:25:11,510 --> 00:25:16,910
for field collections so if you if you

00:25:14,690 --> 00:25:18,860
try to roll back that migration each

00:25:16,910 --> 00:25:21,830
roll back for a field correction would

00:25:18,860 --> 00:25:24,470
roll back in node sorry would be save

00:25:21,830 --> 00:25:26,900
the node we actually submitted a fax to

00:25:24,470 --> 00:25:29,419
fix this it is subsequently fixed i

00:25:26,900 --> 00:25:30,919
think you know i mean maybe we found a

00:25:29,419 --> 00:25:32,390
lot of things you know so it's not just

00:25:30,919 --> 00:25:34,580
restful panels and restful purge that

00:25:32,390 --> 00:25:36,620
came out of this you know v the variety

00:25:34,580 --> 00:25:39,490
of patches that went in over the course

00:25:36,620 --> 00:25:39,490
of the development

00:25:44,960 --> 00:25:49,860
so it was this use case I mean field

00:25:48,570 --> 00:25:51,840
collection was suitable for the job I

00:25:49,860 --> 00:26:01,950
mean we have a more specific question

00:25:51,840 --> 00:26:03,810
because I really feel collections

00:26:01,950 --> 00:26:05,730
themselves identities so they would have

00:26:03,810 --> 00:26:08,340
their own revisions yeah and I see what

00:26:05,730 --> 00:26:11,520
you mean it just happened that it would

00:26:08,340 --> 00:26:22,520
work great for us and I mean like you

00:26:11,520 --> 00:26:24,960
want to add on to the answer because I

00:26:22,520 --> 00:26:31,320
mean that's the only thing and that was

00:26:24,960 --> 00:26:33,060
really fixed actually yeah well of

00:26:31,320 --> 00:26:35,790
course the content structure is pretty

00:26:33,060 --> 00:26:37,770
complex for certain kinds of entities I

00:26:35,790 --> 00:26:45,440
mean some are just articles simple but

00:26:37,770 --> 00:26:45,440
others are yeah pretty much

00:26:49,990 --> 00:26:56,980
Media there was a combination of quotes

00:26:52,750 --> 00:26:59,550
videos and images / news / calories

00:26:56,980 --> 00:27:02,500
check out

00:26:59,550 --> 00:27:06,580
because of the interoperability of

00:27:02,500 --> 00:27:09,850
different times we need to deliver all

00:27:06,580 --> 00:27:12,120
of those so once in a while and you have

00:27:09,850 --> 00:27:12,120
a video

00:27:12,530 --> 00:27:17,420
depending on what was uploaded

00:27:23,400 --> 00:27:29,490
ok

00:27:25,900 --> 00:27:29,490
all right I'll pass it on

00:27:36,380 --> 00:27:46,890
come out yeah okay cool yep so as you

00:27:44,640 --> 00:27:50,010
can see the front end at legacy was

00:27:46,890 --> 00:27:53,550
quite diverse we are using everything on

00:27:50,010 --> 00:27:56,460
top of the node layer we use Express to

00:27:53,550 --> 00:28:00,030
consume the APS that Drupal provides so

00:27:56,460 --> 00:28:02,460
these ApS are then taken by react and

00:28:00,030 --> 00:28:07,620
flux implementations so they take these

00:28:02,460 --> 00:28:09,870
api's and render the client you I so we

00:28:07,620 --> 00:28:13,920
use other tools open source tools like

00:28:09,870 --> 00:28:15,270
babel for transpiring from es6 to es5 we

00:28:13,920 --> 00:28:18,300
are using webpack as our build system

00:28:15,270 --> 00:28:24,540
and we are using stylus for writing

00:28:18,300 --> 00:28:28,020
modular CSS so so yeah so why did legacy

00:28:24,540 --> 00:28:30,690
choose to write a application

00:28:28,020 --> 00:28:32,600
client-side application using react well

00:28:30,690 --> 00:28:35,210
there are these three main reasons

00:28:32,600 --> 00:28:37,730
performance developer productivity and

00:28:35,210 --> 00:28:42,780
provide content injections from

00:28:37,730 --> 00:28:45,720
affiliates and third parties taking a

00:28:42,780 --> 00:28:47,790
performance first with client-side

00:28:45,720 --> 00:28:50,340
applications you get a slow initial page

00:28:47,790 --> 00:28:52,680
load time but every subsequent a phase

00:28:50,340 --> 00:28:55,020
transition or every subsequent request

00:28:52,680 --> 00:28:56,970
is extremely fast compared to what you

00:28:55,020 --> 00:29:00,630
get with your conventionally developed

00:28:56,970 --> 00:29:02,040
applications in turn this leads to an

00:29:00,630 --> 00:29:03,630
experience that's similar to what you

00:29:02,040 --> 00:29:06,240
get with native applications that are

00:29:03,630 --> 00:29:10,650
there on desktop and iOS or Android app

00:29:06,240 --> 00:29:13,110
Android phones another reason is

00:29:10,650 --> 00:29:16,460
developer productivity so with react you

00:29:13,110 --> 00:29:20,780
get a composition easy composition so

00:29:16,460 --> 00:29:23,400
your reaction is built of small

00:29:20,780 --> 00:29:26,910
components that form a huge applications

00:29:23,400 --> 00:29:29,760
like legacy so with the with react you

00:29:26,910 --> 00:29:31,590
can we were able to easily add new

00:29:29,760 --> 00:29:35,340
features remove features without

00:29:31,590 --> 00:29:39,150
affecting the existing UI or breaking

00:29:35,340 --> 00:29:40,920
any tests so that made a lot like that

00:29:39,150 --> 00:29:43,920
made us a gel and we were able to

00:29:40,920 --> 00:29:45,960
rapidly make the new changes similarly

00:29:43,920 --> 00:29:48,020
event allocation and writing inline

00:29:45,960 --> 00:29:49,850
Styles was extremely easy

00:29:48,020 --> 00:29:51,680
use inline Styles just to avoid

00:29:49,850 --> 00:29:54,680
cascading problems that are common in

00:29:51,680 --> 00:29:57,230
large code bases this was pcs module

00:29:54,680 --> 00:30:01,280
Sarah so we rolled up our own solution

00:29:57,230 --> 00:30:03,650
for this coming to testing your react

00:30:01,280 --> 00:30:05,480
components just consumed a particular

00:30:03,650 --> 00:30:08,300
API and you get the component on your

00:30:05,480 --> 00:30:10,430
page so what we did was we took the

00:30:08,300 --> 00:30:12,980
component we passed it some JSON data

00:30:10,430 --> 00:30:15,800
and rendered it on a headless or a real

00:30:12,980 --> 00:30:17,900
browser to test it out so we used

00:30:15,800 --> 00:30:19,790
phantoms yes and we used various

00:30:17,900 --> 00:30:23,240
versions of Chrome and Firefox for

00:30:19,790 --> 00:30:26,060
testing our react components similarly

00:30:23,240 --> 00:30:28,580
for testing out events or simulating

00:30:26,060 --> 00:30:31,400
events we use a library that react

00:30:28,580 --> 00:30:33,950
provides called test utils so it's as

00:30:31,400 --> 00:30:37,190
easy as calling a function you just call

00:30:33,950 --> 00:30:39,050
a function like click or key press and

00:30:37,190 --> 00:30:43,700
that's it like you can replicate those

00:30:39,050 --> 00:30:45,680
features just by writing some code so

00:30:43,700 --> 00:30:48,350
coming to coming to some solutions that

00:30:45,680 --> 00:30:50,330
we implemented a while working on legacy

00:30:48,350 --> 00:30:53,240
one of the most important one being

00:30:50,330 --> 00:30:55,670
server-side rendering so this helped us

00:30:53,240 --> 00:30:58,730
solve the SEO problem that is common

00:30:55,670 --> 00:31:01,490
with the single page applications where

00:30:58,730 --> 00:31:04,100
usually the crawlers the SEO crawlers

00:31:01,490 --> 00:31:06,770
get just a empty body tag and a bunch of

00:31:04,100 --> 00:31:08,920
scripts so that's not useful you aren't

00:31:06,770 --> 00:31:12,590
able to track any of your page content

00:31:08,920 --> 00:31:15,050
so what we did is we rendered the react

00:31:12,590 --> 00:31:18,560
components on the server using node so

00:31:15,050 --> 00:31:20,570
what happens is that the first time the

00:31:18,560 --> 00:31:23,300
browser gets the page it's the whole

00:31:20,570 --> 00:31:26,420
markup and once it's there once you have

00:31:23,300 --> 00:31:28,970
the whole page their client side

00:31:26,420 --> 00:31:33,080
rendering kicks in and reacts there

00:31:28,970 --> 00:31:34,640
takes over so the that helps improving

00:31:33,080 --> 00:31:37,060
the initial page load time that is

00:31:34,640 --> 00:31:40,490
common with the single page applications

00:31:37,060 --> 00:31:42,850
another side effect a good side effect

00:31:40,490 --> 00:31:44,930
of this is that since we are rendering

00:31:42,850 --> 00:31:47,630
the client-side application on the

00:31:44,930 --> 00:31:49,910
server we were we were serving just the

00:31:47,630 --> 00:31:53,050
plain static HTML pages so that made

00:31:49,910 --> 00:31:53,050
caching very easy

00:31:54,220 --> 00:31:58,070
solution specific to drupal were like to

00:31:56,570 --> 00:32:00,350
be as you already know we are using

00:31:58,070 --> 00:32:02,780
drupal as a data source and as Suzanne

00:32:00,350 --> 00:32:06,410
mentioned it's providing the layout

00:32:02,780 --> 00:32:08,920
configuration as well so we consume the

00:32:06,410 --> 00:32:11,840
layout configuration or to build out the

00:32:08,920 --> 00:32:13,640
page structures and these structures

00:32:11,840 --> 00:32:16,760
were later filled in with the data that

00:32:13,640 --> 00:32:21,020
was coming through Drupal so you were

00:32:16,760 --> 00:32:22,549
getting a free flexible you or drag and

00:32:21,020 --> 00:32:27,110
drop you had to create your structures

00:32:22,549 --> 00:32:28,760
and that were built using react some

00:32:27,110 --> 00:32:31,340
solution specific to react were like

00:32:28,760 --> 00:32:34,790
fergie act is doesn't like play well

00:32:31,340 --> 00:32:36,950
with the raw HTML that's because the

00:32:34,790 --> 00:32:39,919
main feature of reactor virtual Dom

00:32:36,950 --> 00:32:42,500
doesn't doesn't come into play if you

00:32:39,919 --> 00:32:45,049
pass it raw HTML so just to harness that

00:32:42,500 --> 00:32:48,080
functionality beaver what we did is we

00:32:45,049 --> 00:32:50,390
took the raw HTML on the Drupal here we

00:32:48,080 --> 00:32:52,549
stripped it out took out the HTML tags

00:32:50,390 --> 00:32:55,580
and attributes and then passed it to the

00:32:52,549 --> 00:32:57,290
client side as a JSON object on the on

00:32:55,580 --> 00:33:00,470
the client side we consumed this JSON

00:32:57,290 --> 00:33:02,900
object and built the react components

00:33:00,470 --> 00:33:04,790
there so we didn't have to have to

00:33:02,900 --> 00:33:09,760
compromise on the virtual Dom layer

00:33:04,790 --> 00:33:12,350
there similarly for complying to

00:33:09,760 --> 00:33:14,540
specifications like schema.org what we

00:33:12,350 --> 00:33:16,970
did is we pass the method metadata as

00:33:14,540 --> 00:33:22,850
Jason objects and it was consumed on the

00:33:16,970 --> 00:33:27,710
client side using react any questions

00:33:22,850 --> 00:33:31,340
specific to front in terms of

00:33:27,710 --> 00:33:35,240
infrastructure it was a additional pain

00:33:31,340 --> 00:33:38,690
to render first using node.js and then

00:33:35,240 --> 00:33:40,640
pass on that extreme yes yeah like there

00:33:38,690 --> 00:33:42,230
are benefits to it so yeah you have to

00:33:40,640 --> 00:33:47,419
do it if you are implementing a

00:33:42,230 --> 00:33:49,610
client-side application last mentioned

00:33:47,419 --> 00:33:54,770
that you were passing the meter data

00:33:49,610 --> 00:33:57,380
using Jason yes that was for node.js and

00:33:54,770 --> 00:33:59,990
for the subsequent requests react

00:33:57,380 --> 00:34:01,640
consumes that so initially node takes it

00:33:59,990 --> 00:34:10,210
and then once it's rendered on the

00:34:01,640 --> 00:34:10,210
browser rehan takes it after that yep

00:34:22,310 --> 00:34:27,690
right like since react has come out like

00:34:25,500 --> 00:34:29,610
conventions have drastically changed we

00:34:27,690 --> 00:34:31,169
are even writing the mark of the

00:34:29,610 --> 00:34:34,500
JavaScript and the style sheets in the

00:34:31,169 --> 00:34:37,710
same file so it depends on the developer

00:34:34,500 --> 00:34:40,020
productivity and how well you can manage

00:34:37,710 --> 00:34:42,390
your codebase so this worked out very

00:34:40,020 --> 00:34:43,860
well for us even faze organizations like

00:34:42,390 --> 00:34:45,750
Netflix and Facebook have been doing

00:34:43,860 --> 00:34:53,400
this for a while now so it scales very

00:34:45,750 --> 00:34:56,750
well for large code bases no no there is

00:34:53,400 --> 00:34:56,750
no theming down on the Drupal air

00:35:01,670 --> 00:35:04,670
justice

00:35:09,230 --> 00:35:16,640
alright so some final thoughts as we

00:35:13,400 --> 00:35:19,670
wrap up the presentation or kind of want

00:35:16,640 --> 00:35:21,290
to say final learnings having just gone

00:35:19,670 --> 00:35:25,160
through this very large decoupled

00:35:21,290 --> 00:35:28,220
decoupled project continuous integration

00:35:25,160 --> 00:35:30,700
and continuous deployment best practices

00:35:28,220 --> 00:35:34,070
are really important when it comes to

00:35:30,700 --> 00:35:38,590
making sure that a decoupled project

00:35:34,070 --> 00:35:41,750
goes well if we had not accelerated our

00:35:38,590 --> 00:35:44,060
continuous delivery then we would have

00:35:41,750 --> 00:35:46,460
left the front end team blocked whenever

00:35:44,060 --> 00:35:48,740
there was missing data or new

00:35:46,460 --> 00:35:51,590
requirement or some kind of bug that

00:35:48,740 --> 00:35:54,140
they had uncovered we couldn't release

00:35:51,590 --> 00:35:55,609
on you know our sprint cycles every two

00:35:54,140 --> 00:35:57,710
weeks we needed to release when they

00:35:55,609 --> 00:35:59,960
needed the solution in order to unblock

00:35:57,710 --> 00:36:02,420
them and so continuous integration

00:35:59,960 --> 00:36:04,220
continuous deployment is really

00:36:02,420 --> 00:36:07,240
important to have in place if you're

00:36:04,220 --> 00:36:07,240
going to take on this kind of project

00:36:07,780 --> 00:36:14,630
personalization for decouple Drupal

00:36:11,109 --> 00:36:16,040
architect art a couple group of

00:36:14,630 --> 00:36:18,800
architecture requires specialized

00:36:16,040 --> 00:36:21,859
infrastructure or middleware in looking

00:36:18,800 --> 00:36:23,690
at things like the affiliate Universal

00:36:21,859 --> 00:36:26,300
navigation the menus which are deployed

00:36:23,690 --> 00:36:30,440
across all of those affiliates the

00:36:26,300 --> 00:36:32,330
performance is you know that kind of

00:36:30,440 --> 00:36:37,430
that kind of level of uncashed request

00:36:32,330 --> 00:36:39,440
is uncashed requests are I guess

00:36:37,430 --> 00:36:41,570
indicative of the need to host that kind

00:36:39,440 --> 00:36:42,920
of solution outside of Drupal there's a

00:36:41,570 --> 00:36:45,020
lot of requests that we're coming in for

00:36:42,920 --> 00:36:46,250
these menus that have a lot of context

00:36:45,020 --> 00:36:48,890
and a lot of personalization for these

00:36:46,250 --> 00:36:52,010
affiliates and there's more performance

00:36:48,890 --> 00:36:53,990
solutions in node and other

00:36:52,010 --> 00:36:58,100
architectures that we are considering at

00:36:53,990 --> 00:37:00,170
this point looking forward another thing

00:36:58,100 --> 00:37:01,580
to keep in mind if you're taking on a

00:37:00,170 --> 00:37:05,000
decoupled architecture you're working

00:37:01,580 --> 00:37:06,710
across two different teams you're

00:37:05,000 --> 00:37:09,290
planning for architecture across two

00:37:06,710 --> 00:37:11,869
separate systems and the decisions that

00:37:09,290 --> 00:37:13,520
you make in order to perhaps deliver

00:37:11,869 --> 00:37:16,310
some kind of technological solution

00:37:13,520 --> 00:37:17,390
within Drupal greatly affects the kind

00:37:16,310 --> 00:37:19,970
of solution that needs to be delivered

00:37:17,390 --> 00:37:22,080
on the other side and vice versa so if

00:37:19,970 --> 00:37:24,870
there is a gap that

00:37:22,080 --> 00:37:27,270
that the front end has Drupal is

00:37:24,870 --> 00:37:29,820
required to fill it and if there's a gap

00:37:27,270 --> 00:37:32,460
that Drupal has the front end it has to

00:37:29,820 --> 00:37:36,900
has to fill it an example of this would

00:37:32,460 --> 00:37:39,480
be you know we provide metadata for a

00:37:36,900 --> 00:37:42,360
lot of the discrete articles and

00:37:39,480 --> 00:37:45,600
galleries as they're rendered on the on

00:37:42,360 --> 00:37:48,660
the URL resource from restful on other

00:37:45,600 --> 00:37:51,630
pages such as some of the restful panels

00:37:48,660 --> 00:37:53,160
pages we actually serve up tokens which

00:37:51,630 --> 00:37:55,500
are contextualized based on the specific

00:37:53,160 --> 00:37:57,660
use cases of other parts of the

00:37:55,500 --> 00:37:59,270
ecosystem because we're using restful

00:37:57,660 --> 00:38:01,860
panels to kind of create this

00:37:59,270 --> 00:38:03,330
configuration layout we needed a

00:38:01,860 --> 00:38:05,220
solution where metadata was

00:38:03,330 --> 00:38:09,870
contextualized based on the front end

00:38:05,220 --> 00:38:12,440
instead of with in Drupal when you're

00:38:09,870 --> 00:38:15,390
planning this kind of architecture

00:38:12,440 --> 00:38:17,100
coupled system you really need to take a

00:38:15,390 --> 00:38:21,630
lot of careful consideration with where

00:38:17,100 --> 00:38:24,390
you're introducing points of failure one

00:38:21,630 --> 00:38:27,570
of those is for example you know this

00:38:24,390 --> 00:38:32,040
Europe yes restful path resource all of

00:38:27,570 --> 00:38:34,320
our redirects and four or four errors

00:38:32,040 --> 00:38:37,620
all come from this from this resource

00:38:34,320 --> 00:38:39,630
and so this needs to perform well at

00:38:37,620 --> 00:38:41,490
scale for the system in order to serve

00:38:39,630 --> 00:38:46,140
up all of those 40 fours and redirects

00:38:41,490 --> 00:38:47,910
and everything and again you notice as a

00:38:46,140 --> 00:38:50,100
final thought this is a great yeah I

00:38:47,910 --> 00:38:54,450
think case study for example of a

00:38:50,100 --> 00:38:56,010
progressively decoupled system it's it's

00:38:54,450 --> 00:38:58,820
something where we're continually

00:38:56,010 --> 00:39:01,620
innovating as we work on the project to

00:38:58,820 --> 00:39:03,630
deliver new open source contributions

00:39:01,620 --> 00:39:06,360
for the Drupal community in order to

00:39:03,630 --> 00:39:09,650
continue to decouple certain parts of

00:39:06,360 --> 00:39:09,650
Drupal and deliver that

00:39:11,180 --> 00:39:17,570
questions and not just for me for anyone

00:39:14,580 --> 00:39:17,570
the team members

00:39:26,660 --> 00:39:32,300
how is cashing validation handled or in

00:39:29,450 --> 00:39:40,480
validation Lakshmi you want to talk

00:39:32,300 --> 00:39:40,480
about that your favorite

00:39:42,230 --> 00:39:47,100
most of the times there is no one to one

00:39:45,060 --> 00:39:50,700
mapping between your data on your

00:39:47,100 --> 00:39:53,700
resource so whenever people make a

00:39:50,700 --> 00:39:56,850
change it's more of a many-to-one so we

00:39:53,700 --> 00:39:59,820
have to have a prior configuration as to

00:39:56,850 --> 00:40:01,560
when X or Y changes let's say bundle a

00:39:59,820 --> 00:40:04,650
bundle be your bundle see changes then

00:40:01,560 --> 00:40:08,850
we invalidate the following endpoints so

00:40:04,650 --> 00:40:10,619
we have this set up in court wrestle

00:40:08,850 --> 00:40:13,740
allows you to do that or rather has a

00:40:10,619 --> 00:40:16,490
provision to do that so every time there

00:40:13,740 --> 00:40:19,530
is a change in any of these we have the

00:40:16,490 --> 00:40:21,900
probable hooks right so they take care

00:40:19,530 --> 00:40:25,950
of purging the respective endpoints

00:40:21,900 --> 00:40:28,550
caches that's how we handle it did I

00:40:25,950 --> 00:40:28,550
answer your question

00:40:30,770 --> 00:40:46,100
any other questions one other products

00:40:39,260 --> 00:40:49,280
video and remember I think one of those

00:40:46,100 --> 00:40:52,540
would be a Dobby edge as an alternative

00:40:49,280 --> 00:40:55,820
and I think has some restful resource

00:40:52,540 --> 00:40:59,600
what's a content content full what's the

00:40:55,820 --> 00:41:01,880
posted content full is a hosted resource

00:40:59,600 --> 00:41:04,730
it's really easy to build content

00:41:01,880 --> 00:41:10,820
architecture and expose those pieces of

00:41:04,730 --> 00:41:12,260
data to to be consumed content pool is

00:41:10,820 --> 00:41:13,970
actually the use case where I was

00:41:12,260 --> 00:41:16,250
talking about earlier or the the

00:41:13,970 --> 00:41:18,800
business decision that legacy made they

00:41:16,250 --> 00:41:21,170
wanted to own the platform and own the

00:41:18,800 --> 00:41:22,940
data when you choose a third party

00:41:21,170 --> 00:41:24,980
service like that that's hosted you

00:41:22,940 --> 00:41:27,710
don't actually own that system if they

00:41:24,980 --> 00:41:31,340
go out of business then you know you're

00:41:27,710 --> 00:41:33,560
in a tight spot so that's one of the key

00:41:31,340 --> 00:41:38,770
key decisions I think that we made in

00:41:33,560 --> 00:41:42,190
going with Drupal any other questions

00:41:38,770 --> 00:41:42,190
alright thanks you guys

00:41:43,869 --> 00:41:48,229
thanks everyone for coming welcome to

00:41:46,369 --> 00:41:52,489
drupalcon Asia through a pleasure to be

00:41:48,229 --> 00:41:56,239
here representing today a case study on

00:41:52,489 --> 00:42:00,700
legacy.com migrating a top 50 most

00:41:56,239 --> 00:42:04,009
visited website and the US on to Drupal

00:42:00,700 --> 00:42:06,619
first I'd like to introduce the team my

00:42:04,009 --> 00:42:08,180
name is jordan ryan i am CTO facet

00:42:06,619 --> 00:42:10,970
interactive and i was the solutions

00:42:08,180 --> 00:42:12,859
architect and product owner during the

00:42:10,970 --> 00:42:17,869
delivery of legacy comms migration to

00:42:12,859 --> 00:42:20,809
drupal and anchor co accelerant teams o

00:42:17,869 --> 00:42:22,819
accelerator was brought in to work for

00:42:20,809 --> 00:42:25,160
the fountain and during I we worked

00:42:22,819 --> 00:42:28,999
together including some of the key with

00:42:25,160 --> 00:42:31,460
team members are here that's me right at

00:42:28,999 --> 00:42:34,729
the ATI develop and to say that amount

00:42:31,460 --> 00:42:38,229
of migration would also you know

00:42:34,729 --> 00:42:41,749
important component of the project was

00:42:38,229 --> 00:42:44,630
managing presentation and there's a

00:42:41,749 --> 00:42:47,059
Muslim country that I'm Assam was part

00:42:44,630 --> 00:42:50,109
of the parent entity limiting no Diaz

00:42:47,059 --> 00:42:50,109
react solution

00:42:51,869 --> 00:42:56,280
so before we get started I'd like to

00:42:54,280 --> 00:42:59,530
just introduce legacy a little bit

00:42:56,280 --> 00:43:03,550
legacy is as I mentioned before Comcast

00:42:59,530 --> 00:43:04,810
top 50 website they have roughly a few

00:43:03,550 --> 00:43:09,400
hundred million page views a month

00:43:04,810 --> 00:43:12,430
they've got maybe twenty to fifty

00:43:09,400 --> 00:43:16,270
million uniques on any given month and

00:43:12,430 --> 00:43:19,300
they serve most of their content traffic

00:43:16,270 --> 00:43:23,730
through affiliate partners they serve

00:43:19,300 --> 00:43:26,500
obituaries across roughly a few thousand

00:43:23,730 --> 00:43:29,530
newspapers in the continental US and

00:43:26,500 --> 00:43:31,630
also internationally and they consume

00:43:29,530 --> 00:43:34,359
obituaries from these newspaper partners

00:43:31,630 --> 00:43:41,619
and serve them up on their channel pages

00:43:34,359 --> 00:43:44,740
for those newspapers legacies business

00:43:41,619 --> 00:43:47,500
as far as the Drupal solution that we're

00:43:44,740 --> 00:43:49,510
presenting today is just focusing on the

00:43:47,500 --> 00:43:51,460
features or the news editorial section

00:43:49,510 --> 00:43:53,950
of their site which just drives a lot of

00:43:51,460 --> 00:43:55,570
their consumer engagement once they have

00:43:53,950 --> 00:43:58,590
users that come into the site from use

00:43:55,570 --> 00:43:58,590
affiliate channel partners

00:43:59,290 --> 00:44:03,500
so one of the questions you know

00:44:01,640 --> 00:44:07,220
everyone always wants to have answered

00:44:03,500 --> 00:44:09,160
is why sure we'll talk a little bit

00:44:07,220 --> 00:44:13,360
before a little bit more about why

00:44:09,160 --> 00:44:13,360
legacy specifically wanted to

00:44:25,260 --> 00:44:32,850
how's that better sorry we'll talk a

00:44:30,450 --> 00:44:35,430
little bit more about why legacy wanted

00:44:32,850 --> 00:44:37,860
a decoupled architecture in just a

00:44:35,430 --> 00:44:39,600
little bit but first we have to talk

00:44:37,860 --> 00:44:42,540
about why they wanted to use Drupal and

00:44:39,600 --> 00:44:44,520
the answer that is very simply that they

00:44:42,540 --> 00:44:49,970
were building a team that was going to

00:44:44,520 --> 00:44:52,980
create an innovative and progressive

00:44:49,970 --> 00:44:56,160
front end in terms of design and they

00:44:52,980 --> 00:44:57,690
wanted to be able to quickly iterate on

00:44:56,160 --> 00:45:00,720
the design and implement new features

00:44:57,690 --> 00:45:03,810
and so in order to do that in order to

00:45:00,720 --> 00:45:07,320
deliver that kind of solution they

00:45:03,810 --> 00:45:08,490
wanted to have Drupal as a service they

00:45:07,320 --> 00:45:10,340
wanted they wanted a service

00:45:08,490 --> 00:45:16,200
architecture so that they continue to

00:45:10,340 --> 00:45:18,030
deliver a high high quality consumer

00:45:16,200 --> 00:45:20,400
experience but they didn't want to spend

00:45:18,030 --> 00:45:22,350
a lot of time innovating within the CMS

00:45:20,400 --> 00:45:28,680
space and so they look to Drupal for

00:45:22,350 --> 00:45:31,650
that kind of expertise and delivery so

00:45:28,680 --> 00:45:32,910
as I mentioned before y decoupled legacy

00:45:31,650 --> 00:45:35,510
was really looking to innovate on the

00:45:32,910 --> 00:45:37,950
front end they didn't want to innovate

00:45:35,510 --> 00:45:42,210
in the CMS they were looking to a

00:45:37,950 --> 00:45:44,820
tried-and-true implementation and Drupal

00:45:42,210 --> 00:45:47,130
was kind of the enterprise standard for

00:45:44,820 --> 00:45:50,360
them based on their requirements that we

00:45:47,130 --> 00:45:50,360
went over in their discovery phase

00:45:51,140 --> 00:45:57,390
content was a small part of a much

00:45:54,210 --> 00:46:00,600
larger ecosystem when you look at when

00:45:57,390 --> 00:46:04,620
you look at legacies when you look at

00:46:00,600 --> 00:46:07,590
legacies architecture the content system

00:46:04,620 --> 00:46:09,360
only serving a few million page views a

00:46:07,590 --> 00:46:11,430
month compared to their much larger few

00:46:09,360 --> 00:46:17,040
hundred million page views a month means

00:46:11,430 --> 00:46:18,660
that the Drupal application itself did

00:46:17,040 --> 00:46:22,290
not need to be scaled up in the same way

00:46:18,660 --> 00:46:24,590
that their node react application need

00:46:22,290 --> 00:46:24,590
to be

00:46:25,790 --> 00:46:30,960
you can using reactant node which was

00:46:29,250 --> 00:46:33,510
the decision by legacy for their front

00:46:30,960 --> 00:46:36,300
end application that lent itself to

00:46:33,510 --> 00:46:38,730
component eyes widgets that needed

00:46:36,300 --> 00:46:41,780
services in order to be populated with

00:46:38,730 --> 00:46:45,000
data again another reason why we chose

00:46:41,780 --> 00:46:46,940
decoupled legacy wanted to own the data

00:46:45,000 --> 00:46:51,210
and platform this kind of goes back to

00:46:46,940 --> 00:46:52,890
why Drupal as opposed to why why not use

00:46:51,210 --> 00:46:55,470
an additional hosted service there's

00:46:52,890 --> 00:46:57,960
certainly some other solutions out there

00:46:55,470 --> 00:47:02,339
that can provide restful api s for

00:46:57,960 --> 00:47:04,230
content but legacies goal of owning that

00:47:02,339 --> 00:47:05,730
content and owning that platform was

00:47:04,230 --> 00:47:07,589
another key decision on why they decided

00:47:05,730 --> 00:47:11,940
to go with a decouple Drupal

00:47:07,589 --> 00:47:13,680
implementation so when talking a little

00:47:11,940 --> 00:47:15,480
bit about what we did this is this is

00:47:13,680 --> 00:47:17,160
just a quick overview and then we're

00:47:15,480 --> 00:47:22,349
going to go through each of these pieces

00:47:17,160 --> 00:47:25,470
in detail the initial via in context all

00:47:22,349 --> 00:47:29,730
of this happened over a very fast-paced

00:47:25,470 --> 00:47:32,700
six month timeline the initial discovery

00:47:29,730 --> 00:47:35,490
engagement was about four weeks to six

00:47:32,700 --> 00:47:36,869
weeks and then after that I was working

00:47:35,490 --> 00:47:39,720
with legacy in order to bring in

00:47:36,869 --> 00:47:43,650
additional partners in order to deliver

00:47:39,720 --> 00:47:45,930
this solution after executing the

00:47:43,650 --> 00:47:48,770
discovery and deciding on some of the

00:47:45,930 --> 00:47:51,869
architectural components we brought in

00:47:48,770 --> 00:47:54,119
accelerant yes on the excellent site we

00:47:51,869 --> 00:47:57,329
covered the technical architecture for

00:47:54,119 --> 00:47:59,940
the further solution we did like not a

00:47:57,329 --> 00:48:03,030
site building you know and any custom

00:47:59,940 --> 00:48:05,339
development and then the core of it

00:48:03,030 --> 00:48:08,570
which was the API development we

00:48:05,339 --> 00:48:10,850
migrated data from ms SQL and

00:48:08,570 --> 00:48:12,740
you know continue to help their front

00:48:10,850 --> 00:48:15,110
end team a lot of performance

00:48:12,740 --> 00:48:18,020
optimization work was done and we

00:48:15,110 --> 00:48:19,580
continue to engage with them and in you

00:48:18,020 --> 00:48:20,930
know there's a continuous discovery

00:48:19,580 --> 00:48:27,260
that's happening on the solution and

00:48:20,930 --> 00:48:29,390
we've been working since so some of the

00:48:27,260 --> 00:48:32,300
key challenges that we are trying to

00:48:29,390 --> 00:48:34,970
address you know using you know the

00:48:32,300 --> 00:48:37,190
drupal solution that we are proposing so

00:48:34,970 --> 00:48:38,840
there were actually two teams so legacy

00:48:37,190 --> 00:48:41,150
already had their front end team which

00:48:38,840 --> 00:48:44,690
was in implement a node react solution

00:48:41,150 --> 00:48:46,970
and you know so they have had a

00:48:44,690 --> 00:48:48,830
different velocity then then we did so

00:48:46,970 --> 00:48:50,780
it was a challenge that we had to sort

00:48:48,830 --> 00:48:53,950
of take care of when we were

00:48:50,780 --> 00:48:57,050
implementing you know grupo solution

00:48:53,950 --> 00:48:59,570
then managing presentation so there was

00:48:57,050 --> 00:49:02,450
a unique requirement they wanted to give

00:48:59,570 --> 00:49:04,070
editors control over the layout of the

00:49:02,450 --> 00:49:06,650
page so as you know if you are working

00:49:04,070 --> 00:49:10,160
with a decoupled system controlling

00:49:06,650 --> 00:49:11,630
layout you know in Drupal how do you do

00:49:10,160 --> 00:49:13,940
it right so there's been couple of

00:49:11,630 --> 00:49:16,910
different approaches to that we came up

00:49:13,940 --> 00:49:19,460
with a unique solution which you saying

00:49:16,910 --> 00:49:23,690
we'll talk about it you know during his

00:49:19,460 --> 00:49:26,930
presentation also a power of Drupal is

00:49:23,690 --> 00:49:29,300
really to manage metadata the SEO value

00:49:26,930 --> 00:49:30,680
is the key right so you have content you

00:49:29,300 --> 00:49:33,650
have metadata around it and that's what

00:49:30,680 --> 00:49:36,110
enriches you know it's great for search

00:49:33,650 --> 00:49:39,290
engines how do you bring that value on

00:49:36,110 --> 00:49:41,410
to a decoupled platform so that was

00:49:39,290 --> 00:49:43,640
another challenge that we had to

00:49:41,410 --> 00:49:48,410
consider when we're building the

00:49:43,640 --> 00:49:50,510
solution out you know since there were a

00:49:48,410 --> 00:49:51,650
lot of api's were being developed we had

00:49:50,510 --> 00:49:55,460
to ensure that you know we were

00:49:51,650 --> 00:49:56,870
constantly versioning API so that you

00:49:55,460 --> 00:49:59,270
know we weren't causing issues for the

00:49:56,870 --> 00:50:01,970
front end team you know any contracts

00:49:59,270 --> 00:50:04,490
that we laid up front were with Althea

00:50:01,970 --> 00:50:11,590
to and any new changes that we would

00:50:04,490 --> 00:50:14,210
make were virgin and they PR and also

00:50:11,590 --> 00:50:15,230
legacy in by you know by nature as a

00:50:14,210 --> 00:50:17,000
business they work with a lot of

00:50:15,230 --> 00:50:19,430
different newspapers and

00:50:17,000 --> 00:50:22,070
you know so they had to serve out a lot

00:50:19,430 --> 00:50:25,640
of menu content to these newspapers so

00:50:22,070 --> 00:50:28,160
it was highly customizable but it had to

00:50:25,640 --> 00:50:30,770
be extremely cashable so that you know

00:50:28,160 --> 00:50:34,160
the performance like the you know the

00:50:30,770 --> 00:50:37,190
kind of volume traffic wall in the site

00:50:34,160 --> 00:50:38,960
gets right so that we could continue to

00:50:37,190 --> 00:50:41,270
serve it so there were a lot of varying

00:50:38,960 --> 00:50:44,680
page elements that need to be addressed

00:50:41,270 --> 00:50:47,450
and likewise there was a caching

00:50:44,680 --> 00:50:50,990
mechanisms had it to be put in right so

00:50:47,450 --> 00:50:55,040
we considered all of these problems in

00:50:50,990 --> 00:50:57,410
our inner solutions also on the reactant

00:50:55,040 --> 00:50:59,930
reactors and like HTML as most of you

00:50:57,410 --> 00:51:02,540
know so we have to sort of look at

00:50:59,930 --> 00:51:06,860
computerizing HTML for the various react

00:51:02,540 --> 00:51:08,720
elements now we'll talk about you know

00:51:06,860 --> 00:51:14,120
sort of some of our methods how we went

00:51:08,720 --> 00:51:17,450
and did some of this so sure so going

00:51:14,120 --> 00:51:19,480
back to that initial discovery some of

00:51:17,450 --> 00:51:21,710
the things that we executed in order to

00:51:19,480 --> 00:51:24,430
deliver the most value to the client is

00:51:21,710 --> 00:51:26,420
this concept of value driven development

00:51:24,430 --> 00:51:29,060
the concept of value different

00:51:26,420 --> 00:51:32,150
development is the idea that we define

00:51:29,060 --> 00:51:34,220
the business metrics or key goals for

00:51:32,150 --> 00:51:36,770
each of the epics or user stories and

00:51:34,220 --> 00:51:38,480
document those in the tickets so that

00:51:36,770 --> 00:51:40,400
when a developer implements a solution

00:51:38,480 --> 00:51:42,530
they have some context with which they

00:51:40,400 --> 00:51:43,910
can actually deliver that solution

00:51:42,530 --> 00:51:47,210
that's going to have the most value for

00:51:43,910 --> 00:51:49,730
the client as opposed to you know a less

00:51:47,210 --> 00:51:53,660
defined user story which may not capture

00:51:49,730 --> 00:51:55,670
those specific business values another

00:51:53,660 --> 00:51:58,840
element that we focused on early on the

00:51:55,670 --> 00:52:01,160
discovery processes API designs first

00:51:58,840 --> 00:52:03,290
focusing on what that contract was going

00:52:01,160 --> 00:52:04,910
to look like based on the initial comps

00:52:03,290 --> 00:52:07,550
that were delivered by the client and

00:52:04,910 --> 00:52:10,400
they had executed and that allowed us to

00:52:07,550 --> 00:52:12,110
take a look at things like the content

00:52:10,400 --> 00:52:13,580
architecture you know how that content

00:52:12,110 --> 00:52:15,860
architecture is going to be built out

00:52:13,580 --> 00:52:21,380
with in Drupal in order to expose those

00:52:15,860 --> 00:52:24,410
fields another another keep a key item

00:52:21,380 --> 00:52:27,020
is legacy was really looking to Drupal

00:52:24,410 --> 00:52:29,270
to become a platform solution and when I

00:52:27,020 --> 00:52:31,660
say that I mean the delivery needed to

00:52:29,270 --> 00:52:31,660
be such that

00:52:31,780 --> 00:52:40,550
the interface was dependable there's a

00:52:35,950 --> 00:52:43,010
lot of additional complex business logic

00:52:40,550 --> 00:52:45,410
that we also had to extract over the

00:52:43,010 --> 00:52:47,450
course of the discovery this actually is

00:52:45,410 --> 00:52:49,040
what spurred the continuous discovery

00:52:47,450 --> 00:52:53,540
that needed to take place over the

00:52:49,040 --> 00:52:54,859
course of the project because as we work

00:52:53,540 --> 00:52:57,319
with the client and work with the

00:52:54,859 --> 00:52:59,390
front-end developers requirements

00:52:57,319 --> 00:53:02,150
changed I'm sure you all have been

00:52:59,390 --> 00:53:04,339
through that before and most

00:53:02,150 --> 00:53:06,260
particularly where requirements continue

00:53:04,339 --> 00:53:09,109
to change and be revised as around the

00:53:06,260 --> 00:53:11,660
affiliate partners or the solution which

00:53:09,109 --> 00:53:13,640
was explicitly being developed for those

00:53:11,660 --> 00:53:15,319
affiliate partners which was a universal

00:53:13,640 --> 00:53:19,810
navigation it was a it was a menu that

00:53:15,319 --> 00:53:19,810

YouTube URL: https://www.youtube.com/watch?v=UneRSUefX1I


