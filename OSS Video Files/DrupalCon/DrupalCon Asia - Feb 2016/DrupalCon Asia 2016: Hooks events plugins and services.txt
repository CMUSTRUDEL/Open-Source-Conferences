Title: DrupalCon Asia 2016: Hooks events plugins and services
Publication date: 2016-04-20
Playlist: DrupalCon Asia - Feb 2016
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:07,770
welcome everyone so today I'm going to

00:00:03,410 --> 00:00:12,300
give you a talk about some of the the

00:00:07,770 --> 00:00:14,250
new apr's or some of the new methods of

00:00:12,300 --> 00:00:18,330
extending Drupal that are available now

00:00:14,250 --> 00:00:21,119
in triple-a so really this is about a

00:00:18,330 --> 00:00:24,600
bit of a higher level discussion trying

00:00:21,119 --> 00:00:29,160
to look at you know why would you use

00:00:24,600 --> 00:00:33,600
one tool over another and wrinkled so

00:00:29,160 --> 00:00:35,489
we're going to be looking at it's really

00:00:33,600 --> 00:00:38,250
a session that's targeted at people are

00:00:35,489 --> 00:00:40,440
familiar with Drupal 7 so that means

00:00:38,250 --> 00:00:43,829
that you've written some custom modules

00:00:40,440 --> 00:00:45,690
and written seven you probably

00:00:43,829 --> 00:00:47,340
implemented hooks this is a very common

00:00:45,690 --> 00:00:48,750
player bright what you typically need

00:00:47,340 --> 00:00:53,399
when you're implemented a module in

00:00:48,750 --> 00:00:56,489
Drupal 7 and we want to learn about best

00:00:53,399 --> 00:00:58,170
practices for drupal 8 so I'll try to

00:00:56,489 --> 00:01:00,120
keep it at a fairly high level but I'm

00:00:58,170 --> 00:01:02,039
there will be a lot of code examples in

00:01:00,120 --> 00:01:05,339
there where I sort of try to dub in and

00:01:02,039 --> 00:01:08,640
explain some of the concepts so just to

00:01:05,339 --> 00:01:10,049
illustrate some of the details then so

00:01:08,640 --> 00:01:12,180
we'll go through in this order so we're

00:01:10,049 --> 00:01:13,799
going to be looking at hooks a bit of a

00:01:12,180 --> 00:01:16,409
review of what they are what what gold

00:01:13,799 --> 00:01:19,500
is trying to achieve then i'll look at

00:01:16,409 --> 00:01:20,460
plugins and then i'll do up into

00:01:19,500 --> 00:01:22,369
something that you might not be as

00:01:20,460 --> 00:01:27,119
familiar with which is tagged services

00:01:22,369 --> 00:01:28,710
and then finally I look at events so I'm

00:01:27,119 --> 00:01:31,320
Kim pepper i'm the co-founder and

00:01:28,710 --> 00:01:33,479
technical director of previousnext based

00:01:31,320 --> 00:01:36,240
in australia where Australia's biggest

00:01:33,479 --> 00:01:37,979
ripple shot down there leaves my contact

00:01:36,240 --> 00:01:42,659
details feel free to get in touch with

00:01:37,979 --> 00:01:44,610
me come up being a member of dribble dog

00:01:42,659 --> 00:01:48,619
for about seven years and five months i

00:01:44,610 --> 00:01:53,579
had had to check before this session and

00:01:48,619 --> 00:01:56,100
I've worked as a on Drupal core quite a

00:01:53,579 --> 00:01:58,439
bit with Larry a few years ago we were

00:01:56,100 --> 00:02:00,210
doing a lot of the the whiskey work

00:01:58,439 --> 00:02:03,420
which is basically converting a lot of

00:02:00,210 --> 00:02:06,689
the kind of hook menu implementations

00:02:03,420 --> 00:02:08,190
over to symphony controllers and that's

00:02:06,689 --> 00:02:08,880
where I kind of cut my teeth in Drupal 8

00:02:08,190 --> 00:02:10,470
and

00:02:08,880 --> 00:02:15,720
and got to learn about some of those

00:02:10,470 --> 00:02:17,280
those concepts so before we dive into

00:02:15,720 --> 00:02:20,310
the new api's that are available in

00:02:17,280 --> 00:02:22,230
triple-a we sort of have to go back in

00:02:20,310 --> 00:02:23,910
time a little bit just to look at you

00:02:22,230 --> 00:02:25,320
know where we're hooks came from in the

00:02:23,910 --> 00:02:28,770
beginning what God were trying to

00:02:25,320 --> 00:02:30,720
achieve so in the beginning there were

00:02:28,770 --> 00:02:32,280
hooks they're actually around before

00:02:30,720 --> 00:02:34,620
Drupal one point I believe it or not I

00:02:32,280 --> 00:02:37,830
had to go through the git log to find

00:02:34,620 --> 00:02:39,030
exactly where we're Drees had actually

00:02:37,830 --> 00:02:42,540
done the first commit and added the

00:02:39,030 --> 00:02:45,150
concept of hooks and it was pretty much

00:02:42,540 --> 00:02:50,040
like in the very beginning so that's

00:02:45,150 --> 00:02:51,870
around 15 years ago so this is a this is

00:02:50,040 --> 00:02:55,140
what the message that was in the commit

00:02:51,870 --> 00:02:58,340
that I found basically the idea is to be

00:02:55,140 --> 00:02:59,850
able to run to decouple the

00:02:58,340 --> 00:03:02,940
implementation the different

00:02:59,850 --> 00:03:04,830
implementation details from from the

00:03:02,940 --> 00:03:09,060
code that's actually executing at that

00:03:04,830 --> 00:03:17,460
time and so we wanted to d couple in a

00:03:09,060 --> 00:03:21,690
in a loose way and be able to execute

00:03:17,460 --> 00:03:23,820
that code right and this was a weird

00:03:21,690 --> 00:03:27,180
concept i actually had a java background

00:03:23,820 --> 00:03:30,650
before i got into drupal so i just wait

00:03:27,180 --> 00:03:30,650
to everyone he'll get into the room

00:03:35,660 --> 00:03:41,000
there's a couple of speed chairs up on

00:03:39,020 --> 00:03:47,360
the end here if you're looking for a

00:03:41,000 --> 00:03:51,080
chair cool packs house yes oh man this

00:03:47,360 --> 00:03:52,610
is the original goal of hooks and

00:03:51,080 --> 00:03:56,180
actually it's it's an architecture that

00:03:52,610 --> 00:03:58,010
really defined the I think the code base

00:03:56,180 --> 00:04:00,770
of Drupal and what made it actually a

00:03:58,010 --> 00:04:02,300
very flexible framework to work with I

00:04:00,770 --> 00:04:05,690
think that's why it got a lot of

00:04:02,300 --> 00:04:09,920
adoption by developers even in the days

00:04:05,690 --> 00:04:11,720
before you know object oriented PHP was

00:04:09,920 --> 00:04:14,260
around this was a mechanism that kind of

00:04:11,720 --> 00:04:16,970
provided a bit more of an event-based

00:04:14,260 --> 00:04:20,060
mechanism for executing code in systems

00:04:16,970 --> 00:04:22,870
where you could kind of decouple the the

00:04:20,060 --> 00:04:27,740
listeners of the code from the the the

00:04:22,870 --> 00:04:29,450
event triggers if you like so just a

00:04:27,740 --> 00:04:33,020
brief explanation if you're not familiar

00:04:29,450 --> 00:04:37,430
so essentially hooks are discovered in

00:04:33,020 --> 00:04:40,010
the in your module 5 drupal login put in

00:04:37,430 --> 00:04:41,570
Drupal 7 and 8 and an earlier versions

00:04:40,010 --> 00:04:43,010
of Drupal look in the module file trying

00:04:41,570 --> 00:04:46,130
to find something that matches a pattern

00:04:43,010 --> 00:04:48,500
so it's based on a function naming

00:04:46,130 --> 00:04:50,090
convention and the code that calls the

00:04:48,500 --> 00:04:53,150
court basically says if this function

00:04:50,090 --> 00:04:57,620
exists then call it right passing

00:04:53,150 --> 00:04:58,880
whatever data it might have and PHP is

00:04:57,620 --> 00:05:00,770
actually pretty efficient at doing that

00:04:58,880 --> 00:05:05,270
kind of looking up it's a function name

00:05:00,770 --> 00:05:07,970
exists so it actually worked this

00:05:05,270 --> 00:05:09,710
different types of hooks so there's a

00:05:07,970 --> 00:05:11,840
lot of in duple 7 there's a lot of these

00:05:09,710 --> 00:05:14,450
things called info hooks and really all

00:05:11,840 --> 00:05:19,700
it's doing is providing a like a

00:05:14,450 --> 00:05:21,620
declarative metadata about what that bit

00:05:19,700 --> 00:05:24,230
of code is how it is implementing and

00:05:21,620 --> 00:05:27,860
passing that back and hook block info is

00:05:24,230 --> 00:05:29,390
a really classic example of that a lot

00:05:27,860 --> 00:05:30,590
of this information is cached of course

00:05:29,390 --> 00:05:33,800
by drupal so it doesn't have to do it

00:05:30,590 --> 00:05:36,080
every time and of course there's the

00:05:33,800 --> 00:05:38,330
concept of older books so this is really

00:05:36,080 --> 00:05:41,090
just adding the ability about a modify

00:05:38,330 --> 00:05:42,710
modify data and the classic case is

00:05:41,090 --> 00:05:45,890
hooked for Malta where you can modify

00:05:42,710 --> 00:05:49,129
form before it gets rendered there are

00:05:45,890 --> 00:05:52,999
plenty of poops still in Drupal 8

00:05:49,129 --> 00:05:54,649
I think the older hooks are the kind of

00:05:52,999 --> 00:06:01,699
the most common case that you'll find in

00:05:54,649 --> 00:06:03,559
triple-a so actually had to ask Larry

00:06:01,699 --> 00:06:06,739
about this before I put this slide up

00:06:03,559 --> 00:06:09,159
but basically there is a big move away

00:06:06,739 --> 00:06:12,860
from hoops in general intercalate so

00:06:09,159 --> 00:06:15,080
almost all of the info hooks are gone we

00:06:12,860 --> 00:06:16,879
replace this those with other mechanisms

00:06:15,080 --> 00:06:19,909
either gamma files or annotations those

00:06:16,879 --> 00:06:22,099
kinds of things all the altar hooks are

00:06:19,909 --> 00:06:23,599
still there most of them actually I

00:06:22,099 --> 00:06:26,509
think there's actually a few more than

00:06:23,599 --> 00:06:28,849
the word before but there's a trend to

00:06:26,509 --> 00:06:30,319
move them and replace them with event

00:06:28,849 --> 00:06:35,179
listeners which I'll go into in a bit

00:06:30,319 --> 00:06:37,580
later in the talk now so they will

00:06:35,179 --> 00:06:39,860
replace book if it's not triple a it'll

00:06:37,580 --> 00:06:41,659
might be triple 9 but you know it

00:06:39,860 --> 00:06:43,639
depends on the effort of whether people

00:06:41,659 --> 00:06:47,569
are interested in moving everything over

00:06:43,639 --> 00:06:51,079
to event listener so should you be

00:06:47,569 --> 00:06:54,439
defining your own books well I love you

00:06:51,079 --> 00:06:56,179
not because in the when hooks were

00:06:54,439 --> 00:06:58,729
invented it was basically in a version

00:06:56,179 --> 00:07:02,179
of PHP which didn't have the concept of

00:06:58,729 --> 00:07:03,800
object-oriented programming and there's

00:07:02,179 --> 00:07:07,039
actually a lot of better ways to do it

00:07:03,800 --> 00:07:09,050
now and if you're writing a new custom

00:07:07,039 --> 00:07:11,389
module and you're deciding on how you're

00:07:09,050 --> 00:07:15,289
going to allow other modules to extend

00:07:11,389 --> 00:07:20,149
that functionality then you know I would

00:07:15,289 --> 00:07:23,689
avoid hooks personally so what is wrong

00:07:20,149 --> 00:07:26,899
with hooks so I mean in this example

00:07:23,689 --> 00:07:28,639
this is an example from Drupal 7 it's

00:07:26,899 --> 00:07:29,809
really hard to understand what it is

00:07:28,639 --> 00:07:32,149
that you actually need to implement

00:07:29,809 --> 00:07:34,009
right so this is a very simple example

00:07:32,149 --> 00:07:36,259
there's much more complicated example

00:07:34,009 --> 00:07:37,579
than this but you know if you're if you

00:07:36,259 --> 00:07:40,389
want to define a hook how do you know

00:07:37,579 --> 00:07:43,039
what it is that you actually need to do

00:07:40,389 --> 00:07:43,999
only the top two actually required the

00:07:43,039 --> 00:07:47,199
others are only if you have

00:07:43,999 --> 00:07:50,659
configuration with your with your block

00:07:47,199 --> 00:07:54,079
but using object oriented PHP we can

00:07:50,659 --> 00:07:55,789
actually build very clear contracts or

00:07:54,079 --> 00:07:58,129
definitions of what it is actually need

00:07:55,789 --> 00:08:01,579
to provide so this is an example from

00:07:58,129 --> 00:08:02,510
Drupal 8 and it's very clear exactly

00:08:01,579 --> 00:08:04,460
what you need

00:08:02,510 --> 00:08:07,040
to implement so we need to implement the

00:08:04,460 --> 00:08:09,290
bill method if we've got a form we need

00:08:07,040 --> 00:08:11,480
to implement block form and blocks

00:08:09,290 --> 00:08:16,840
submit it really makes a clear

00:08:11,480 --> 00:08:20,260
definition about what's required and

00:08:16,840 --> 00:08:23,060
because we can use inheritance if you

00:08:20,260 --> 00:08:25,370
have some default implementations that

00:08:23,060 --> 00:08:27,260
everything can use then you can just an

00:08:25,370 --> 00:08:28,820
extend from a base class and get all

00:08:27,260 --> 00:08:35,600
that stuff you don't have to duplicate

00:08:28,820 --> 00:08:37,400
all of the code so procedure i think is

00:08:35,600 --> 00:08:40,340
has got a lot of negatives to it first

00:08:37,400 --> 00:08:44,330
of all all of those functions are global

00:08:40,340 --> 00:08:45,680
right so why is that bad well it

00:08:44,330 --> 00:08:48,530
basically means you're tightly coupled

00:08:45,680 --> 00:08:51,500
to the code that you're executing there

00:08:48,530 --> 00:08:53,210
isn't a clear separation there then one

00:08:51,500 --> 00:08:56,480
of the key things I think is testability

00:08:53,210 --> 00:08:59,390
so if you're using object oriented code

00:08:56,480 --> 00:09:02,750
what you can do is you can mock out the

00:08:59,390 --> 00:09:05,690
dependencies of that code and then test

00:09:02,750 --> 00:09:08,840
that code in isolation and if you're

00:09:05,690 --> 00:09:11,090
thinking about whether you need to have

00:09:08,840 --> 00:09:13,610
kind of end-to-end test versus unit test

00:09:11,090 --> 00:09:15,920
I'd say will be eighty nine percent of

00:09:13,610 --> 00:09:17,240
your tests in any particular project or

00:09:15,920 --> 00:09:20,300
code base that you're doing should be

00:09:17,240 --> 00:09:22,940
unitus doesn't mean that you couldn't

00:09:20,300 --> 00:09:25,430
have functional tests or into end web

00:09:22,940 --> 00:09:30,910
test but you should be focusing majority

00:09:25,430 --> 00:09:30,910
of your your tests as unit tests

00:09:34,570 --> 00:09:41,450
okay so the reason is because we can

00:09:38,740 --> 00:09:43,670
with object oriented PHP we can actually

00:09:41,450 --> 00:09:47,360
co2 interfaces we don't actually have to

00:09:43,670 --> 00:09:50,180
code to concrete classes or explicit

00:09:47,360 --> 00:09:53,900
implementations of class we can use

00:09:50,180 --> 00:09:55,790
patterns like dependency injection to to

00:09:53,900 --> 00:09:57,440
avoid understanding how they are

00:09:55,790 --> 00:09:58,910
dependencies actually need to be created

00:09:57,440 --> 00:10:00,860
that can just be passed into the

00:09:58,910 --> 00:10:02,830
constructor and then we can actually do

00:10:00,860 --> 00:10:06,290
things like mock out those interfaces

00:10:02,830 --> 00:10:07,730
when we're doing our unit tests so this

00:10:06,290 --> 00:10:09,140
is if you're not familiar with dependent

00:10:07,730 --> 00:10:12,890
who who knows what dependency injection

00:10:09,140 --> 00:10:14,300
is a few people all right so it's a

00:10:12,890 --> 00:10:18,170
weird name but it's actually a very

00:10:14,300 --> 00:10:20,300
simple concept and this is a basic

00:10:18,170 --> 00:10:25,130
example of what dependency injection is

00:10:20,300 --> 00:10:26,900
so you can see that in my class here I

00:10:25,130 --> 00:10:30,050
want to I want to do something rather

00:10:26,900 --> 00:10:32,210
than understand what my dependency is or

00:10:30,050 --> 00:10:35,870
how it gets implemented all I'm doing

00:10:32,210 --> 00:10:38,800
just passing in the dependency in the

00:10:35,870 --> 00:10:40,940
constructor setting it to this local

00:10:38,800 --> 00:10:43,040
property here and then when I'm actually

00:10:40,940 --> 00:10:45,980
running my coat I just call the

00:10:43,040 --> 00:10:48,590
dependency but you can see how I never

00:10:45,980 --> 00:10:50,720
never really need to know how my

00:10:48,590 --> 00:10:53,960
dependencies created all i care about is

00:10:50,720 --> 00:10:55,880
that I've got an interface and I can

00:10:53,960 --> 00:10:57,770
expect that whatever methods are defined

00:10:55,880 --> 00:10:59,930
on that interface I can call and

00:10:57,770 --> 00:11:03,200
whatever implementations here will be

00:10:59,930 --> 00:11:04,790
respecting that interface so that's the

00:11:03,200 --> 00:11:07,490
concept of dependency injection it's not

00:11:04,790 --> 00:11:09,710
too complicated right the alternative

00:11:07,490 --> 00:11:13,370
would be if I would you know trying to

00:11:09,710 --> 00:11:15,350
create say its database connection I've

00:11:13,370 --> 00:11:18,140
need to understand what its dependencies

00:11:15,350 --> 00:11:19,610
are so its dependencies might be okay

00:11:18,140 --> 00:11:21,560
well I need a connection object or I

00:11:19,610 --> 00:11:23,510
need all these credentials all those

00:11:21,560 --> 00:11:27,020
kinds of things you want to essentially

00:11:23,510 --> 00:11:28,880
abstract your your code away from all of

00:11:27,020 --> 00:11:32,240
the underlying technical details of that

00:11:28,880 --> 00:11:35,360
dependency and of course this makes it

00:11:32,240 --> 00:11:37,460
easy to test right because we've got an

00:11:35,360 --> 00:11:38,630
interface here we can provide a mock we

00:11:37,460 --> 00:11:41,630
can test that that code gets executed

00:11:38,630 --> 00:11:44,840
provide stub code to return data or

00:11:41,630 --> 00:11:46,850
whatever okay so the rest of this talky

00:11:44,840 --> 00:11:47,329
really is about extending Drupal 8 with

00:11:46,850 --> 00:11:49,160
I've

00:11:47,329 --> 00:11:50,569
directed programming right so we're

00:11:49,160 --> 00:11:52,899
going to be focusing on some of those

00:11:50,569 --> 00:11:57,529
things that avoid this procedural code

00:11:52,899 --> 00:12:00,619
so the first one is plugins so plugins

00:11:57,529 --> 00:12:03,949
is a concept essentially existed in

00:12:00,619 --> 00:12:06,879
Drupal 7 with CTools many michaels took

00:12:03,949 --> 00:12:09,739
advantage of c tools plugins in drupal 7

00:12:06,879 --> 00:12:11,299
essentially what they are is small

00:12:09,739 --> 00:12:14,379
pieces of code which you can kind of

00:12:11,299 --> 00:12:17,299
define an interface for and then

00:12:14,379 --> 00:12:19,519
multiple implementations of those can

00:12:17,299 --> 00:12:22,129
exist either within your own module or

00:12:19,519 --> 00:12:25,869
other modules that might want to kind of

00:12:22,129 --> 00:12:28,850
bum provide an implementation as well

00:12:25,869 --> 00:12:32,629
plugins typically have configuration so

00:12:28,850 --> 00:12:34,249
you can each implementation can define

00:12:32,629 --> 00:12:36,410
its own kind of configuration that can

00:12:34,249 --> 00:12:40,279
be completely different types of

00:12:36,410 --> 00:12:43,869
configuration / plug-in instance or

00:12:40,279 --> 00:12:47,389
plug-in implementation and you'll see

00:12:43,869 --> 00:12:49,489
patients providing sort of admin form

00:12:47,389 --> 00:12:50,989
support typically they would if they've

00:12:49,489 --> 00:12:53,839
got configuration typically they would

00:12:50,989 --> 00:12:55,759
expose that in an admin form to let you

00:12:53,839 --> 00:12:59,179
modify that and then export that as

00:12:55,759 --> 00:13:01,279
pumping and they also support the

00:12:59,179 --> 00:13:03,220
concept which is a little bit more

00:13:01,279 --> 00:13:05,360
advanced which is a concept of

00:13:03,220 --> 00:13:07,929
derivatives which is basically having

00:13:05,360 --> 00:13:11,929
multiple instance of of a plug-in a

00:13:07,929 --> 00:13:14,360
plug-in time so a good example of that

00:13:11,929 --> 00:13:16,819
in Drupal core is blocks where you can

00:13:14,360 --> 00:13:19,809
kind of have multiple instances of a

00:13:16,819 --> 00:13:19,809
block placed around the side

00:13:22,080 --> 00:13:28,590
right so how to stipulate actually

00:13:25,130 --> 00:13:30,090
discover plugins so this is a new

00:13:28,590 --> 00:13:33,270
concept in Drupal we didn't have this

00:13:30,090 --> 00:13:36,720
before but it's actually what's called

00:13:33,270 --> 00:13:40,050
an annotation do we need to annotation

00:13:36,720 --> 00:13:42,510
we also need to use the the pizza for

00:13:40,050 --> 00:13:45,920
namespace to correct folder structure

00:13:42,510 --> 00:13:51,060
and namespace in class name spacing

00:13:45,920 --> 00:13:53,100
declaration in our class and it's got to

00:13:51,060 --> 00:13:56,910
typically implement an interface there

00:13:53,100 --> 00:13:58,260
are it's not strictly enforced but it's

00:13:56,910 --> 00:14:00,330
best practice to actually have an

00:13:58,260 --> 00:14:03,510
interface for your for your plug-in for

00:14:00,330 --> 00:14:05,370
all the reasons I've explained before so

00:14:03,510 --> 00:14:08,130
this is what an annotation looks like

00:14:05,370 --> 00:14:10,140
it's very simple four blocks essentially

00:14:08,130 --> 00:14:13,440
it's a comment that sits above your your

00:14:10,140 --> 00:14:16,260
class declaration in the case of blocks

00:14:13,440 --> 00:14:18,690
you can see here we've got a special

00:14:16,260 --> 00:14:20,280
annotation called block and then it's

00:14:18,690 --> 00:14:22,740
just a bunch of properties that defined

00:14:20,280 --> 00:14:24,600
the metadata for this plug-in in this

00:14:22,740 --> 00:14:26,430
case we only need a unique ID for the

00:14:24,600 --> 00:14:29,490
plug-in and then the label that we want

00:14:26,430 --> 00:14:32,700
it to appear in the admin screen go when

00:14:29,490 --> 00:14:35,880
we're when we're viewing all the blocks

00:14:32,700 --> 00:14:38,070
better available and then in terms of

00:14:35,880 --> 00:14:40,290
the PSR for namespace this is very so

00:14:38,070 --> 00:14:43,230
common standard across all PHP it's not

00:14:40,290 --> 00:14:45,090
a Drupal specific thing but we can

00:14:43,230 --> 00:14:48,930
basically make sure that it has to live

00:14:45,090 --> 00:14:51,420
under the the a plug-in folder and the

00:14:48,930 --> 00:14:52,770
the block folder and then with the

00:14:51,420 --> 00:14:55,110
namespace that actually matches that

00:14:52,770 --> 00:14:57,060
pattern that's it right drupal will then

00:14:55,110 --> 00:14:59,010
be able to discover that it's different

00:14:57,060 --> 00:15:01,290
to how triple works with his module code

00:14:59,010 --> 00:15:04,560
where basically will load the dot module

00:15:01,290 --> 00:15:08,240
file and every page load here will it

00:15:04,560 --> 00:15:10,620
will use PSR for discovery to find them

00:15:08,240 --> 00:15:12,540
so this is the full implementation of a

00:15:10,620 --> 00:15:16,340
block so essentially you can see you've

00:15:12,540 --> 00:15:18,870
got our annotation at the top and here

00:15:16,340 --> 00:15:20,160
our custom block implementation is

00:15:18,870 --> 00:15:24,090
extending this block base so we're

00:15:20,160 --> 00:15:26,130
taking advantage of inherence here we've

00:15:24,090 --> 00:15:28,410
got a base class which defines a lot of

00:15:26,130 --> 00:15:30,810
the kind of basic standard methods and

00:15:28,410 --> 00:15:32,400
and the only thing that's still on the

00:15:30,810 --> 00:15:33,139
interface that hasn't been implemented

00:15:32,400 --> 00:15:34,999
if this bill

00:15:33,139 --> 00:15:38,449
which just means that we need to return

00:15:34,999 --> 00:15:39,649
a render array right so that's a it's a

00:15:38,449 --> 00:15:43,549
simple example of a plug-in in

00:15:39,649 --> 00:15:44,779
implementation the other concept you

00:15:43,549 --> 00:15:46,730
need to be aware of is the idea of

00:15:44,779 --> 00:15:48,980
plug-in manager so this is essentially

00:15:46,730 --> 00:15:52,759
the the entry point for the mountain for

00:15:48,980 --> 00:15:54,439
dealing with plugins because essentially

00:15:52,759 --> 00:15:57,259
you don't know what plugins are

00:15:54,439 --> 00:16:00,259
available you work weird plug-in manager

00:15:57,259 --> 00:16:02,389
to provide that information for you when

00:16:00,259 --> 00:16:04,369
they use for doing things like show me

00:16:02,389 --> 00:16:06,859
all the plugins are available or create

00:16:04,369 --> 00:16:10,790
an instance or get me the definition of

00:16:06,859 --> 00:16:12,549
that plug-in and a few of the other

00:16:10,790 --> 00:16:15,709
concepts that you get with plugins

00:16:12,549 --> 00:16:19,999
you're able to depict do dependency

00:16:15,709 --> 00:16:22,040
injection like I explained before who to

00:16:19,999 --> 00:16:23,899
pass in services so for example if

00:16:22,040 --> 00:16:27,919
you've got your plug-in needs to query

00:16:23,899 --> 00:16:29,269
the database you can use implement a

00:16:27,919 --> 00:16:30,859
method on there which will query the

00:16:29,269 --> 00:16:34,579
container grabbed the database and pass

00:16:30,859 --> 00:16:35,569
it to your your plug-in and as I

00:16:34,579 --> 00:16:37,429
mentioned before there's other things

00:16:35,569 --> 00:16:39,829
like derivatives which allow you to

00:16:37,429 --> 00:16:44,929
create multiple instances of of a

00:16:39,829 --> 00:16:47,089
plug-in so that's just an example of how

00:16:44,929 --> 00:16:49,519
you would implement existing plug-in

00:16:47,089 --> 00:16:52,989
types in Drupal so triple core provides

00:16:49,519 --> 00:16:56,299
a whole list of different plug-in types

00:16:52,989 --> 00:16:57,709
so how do we define our own type so

00:16:56,299 --> 00:17:00,499
you're building your own custom module

00:16:57,709 --> 00:17:01,970
you've got to make a decision about how

00:17:00,499 --> 00:17:04,429
you're going to allow other people to

00:17:01,970 --> 00:17:06,799
extend code you've been told by me that

00:17:04,429 --> 00:17:12,559
hooks bad so how do you build your own

00:17:06,799 --> 00:17:14,809
plugin Todd so essentially what when

00:17:12,559 --> 00:17:18,439
would you build it so you would do this

00:17:14,809 --> 00:17:20,389
when you've got typically you know

00:17:18,439 --> 00:17:23,539
configuration require for a number of

00:17:20,389 --> 00:17:25,819
different plug-in implications so you

00:17:23,539 --> 00:17:27,589
want to allow users to provide

00:17:25,819 --> 00:17:30,980
configuration for them or they need

00:17:27,589 --> 00:17:36,019
certain settings and you might want to

00:17:30,980 --> 00:17:37,580
expose that as an admin form so in

00:17:36,019 --> 00:17:38,750
actually to create your own plug-in type

00:17:37,580 --> 00:17:42,710
there is a fair amount of boilerplate

00:17:38,750 --> 00:17:46,010
that you need so first of all you saw

00:17:42,710 --> 00:17:47,390
before with the block annotation that's

00:17:46,010 --> 00:17:49,190
actually a class so

00:17:47,390 --> 00:17:52,250
you need to create your own annotation

00:17:49,190 --> 00:17:54,700
class that defines the properties that

00:17:52,250 --> 00:17:57,040
you can configure with your annotation

00:17:54,700 --> 00:18:00,100
you'll need to write a plug-in interface

00:17:57,040 --> 00:18:02,660
that all of the plugins must implement

00:18:00,100 --> 00:18:04,310
and then of course you need to build in

00:18:02,660 --> 00:18:07,610
some of your plug-in implementations

00:18:04,310 --> 00:18:09,890
typically you know you might you might

00:18:07,610 --> 00:18:11,750
implement a couple yourself that a part

00:18:09,890 --> 00:18:13,580
of your module and then assume that

00:18:11,750 --> 00:18:15,980
other third-party modules will be able

00:18:13,580 --> 00:18:18,620
to add additional loan and you also need

00:18:15,980 --> 00:18:19,970
to create a plug-in manager so plug-in

00:18:18,620 --> 00:18:23,990
managers the thing that why's it all

00:18:19,970 --> 00:18:27,110
together so plug-in manager is

00:18:23,990 --> 00:18:28,760
responsible for defining so the

00:18:27,110 --> 00:18:31,040
directory in the name space where the

00:18:28,760 --> 00:18:33,890
plugins live where to look for them what

00:18:31,040 --> 00:18:36,110
annotation class to use what the

00:18:33,890 --> 00:18:40,340
interface is that you need to your

00:18:36,110 --> 00:18:43,010
plug-in will need to implement and

00:18:40,340 --> 00:18:45,110
things like a plug-in cash so plug in

00:18:43,010 --> 00:18:46,400
case basically kids keeps those things

00:18:45,110 --> 00:18:48,680
in case that doesn't have to do them

00:18:46,400 --> 00:18:50,510
look up every time and also what

00:18:48,680 --> 00:18:53,210
ultrabooks are available so fair amount

00:18:50,510 --> 00:18:55,550
of stuff in the plug-in manager and this

00:18:53,210 --> 00:18:57,610
is a very simple example of a plug-in

00:18:55,550 --> 00:19:01,520
manager to the simplest one I could find

00:18:57,610 --> 00:19:04,700
riches from the search module then you

00:19:01,520 --> 00:19:06,620
can see here essentially this is all I

00:19:04,700 --> 00:19:08,990
stripped out mr. comments just to fit it

00:19:06,620 --> 00:19:12,230
on the screen but you can see like I

00:19:08,990 --> 00:19:16,900
needed to be defining the namespace that

00:19:12,230 --> 00:19:19,220
it lives on da and this the the search

00:19:16,900 --> 00:19:20,960
throw this is the search plug in the

00:19:19,220 --> 00:19:23,390
interface at the plug-in types and off

00:19:20,960 --> 00:19:26,540
implement and what annotation class to

00:19:23,390 --> 00:19:29,350
use I'm setting the the cash namespace

00:19:26,540 --> 00:19:35,180
here and what the older hookers though

00:19:29,350 --> 00:19:36,470
there's a fair amount in there but

00:19:35,180 --> 00:19:39,050
there's a lot of flexibility in the

00:19:36,470 --> 00:19:41,000
plug-in system so there's a lot of areas

00:19:39,050 --> 00:19:42,620
where you can go in and override things

00:19:41,000 --> 00:19:44,720
and customize things how you might want

00:19:42,620 --> 00:19:46,520
to to do it and there's actually lots of

00:19:44,720 --> 00:19:49,580
good examples in Drupal core of this

00:19:46,520 --> 00:19:51,740
thing done so things like how plugins

00:19:49,580 --> 00:19:53,720
actually get created so that that search

00:19:51,740 --> 00:19:55,580
plugin managers just using the default

00:19:53,720 --> 00:19:57,530
creation method but if you need to do

00:19:55,580 --> 00:19:59,350
additional functionality when your

00:19:57,530 --> 00:20:00,730
plugins get created then

00:19:59,350 --> 00:20:04,480
you can customize that in your plug-in

00:20:00,730 --> 00:20:06,429
manager how they're executed and also

00:20:04,480 --> 00:20:11,289
just things like listing what plugins

00:20:06,429 --> 00:20:13,960
are available so there's way too many of

00:20:11,289 --> 00:20:15,870
plug-in types in court to list the

00:20:13,960 --> 00:20:18,190
screen but just to give you an idea

00:20:15,870 --> 00:20:20,410
plugins as a concept is one of those

00:20:18,190 --> 00:20:23,440
things that just got kind of spread

00:20:20,410 --> 00:20:24,580
throughout Drupal core which I think

00:20:23,440 --> 00:20:26,620
it's a good thing because there was

00:20:24,580 --> 00:20:28,690
actually lots of different ways of doing

00:20:26,620 --> 00:20:31,330
the same thing in Drupal that in Drupal

00:20:28,690 --> 00:20:35,380
7 and we kind of consolidated on a

00:20:31,330 --> 00:20:37,030
single approach for a lot of this so you

00:20:35,380 --> 00:20:38,830
might be thinking oh my god like I need

00:20:37,030 --> 00:20:41,740
to you know create a plug-in type is

00:20:38,830 --> 00:20:43,330
like it's a lot of stuff there like I

00:20:41,740 --> 00:20:46,539
need to learn all these concepts like is

00:20:43,330 --> 00:20:49,080
there are is there a simpler way and I

00:20:46,539 --> 00:20:52,059
think there is I think if you don't need

00:20:49,080 --> 00:20:53,770
configuration you know for each instance

00:20:52,059 --> 00:20:55,480
type you might be able to look at

00:20:53,770 --> 00:20:58,090
something like tag services which is a

00:20:55,480 --> 00:20:59,830
very which is a much simpler way of

00:20:58,090 --> 00:21:01,780
doing that and I'll go and explain what

00:20:59,830 --> 00:21:06,340
services are and then what tag services

00:21:01,780 --> 00:21:10,030
are now so who's here familiar with

00:21:06,340 --> 00:21:16,360
symphony and the symphony container just

00:21:10,030 --> 00:21:18,370
a few people okay so Drupal 8 adopted a

00:21:16,360 --> 00:21:20,830
lot of symphony components and one of

00:21:18,370 --> 00:21:23,950
the the most important ones was the

00:21:20,830 --> 00:21:26,400
dependency injection container so

00:21:23,950 --> 00:21:28,900
metaphor when I showed you an example of

00:21:26,400 --> 00:21:29,919
dependency injection where you know you

00:21:28,900 --> 00:21:32,919
just all you're doing in your

00:21:29,919 --> 00:21:36,100
constructor is passing in the interface

00:21:32,919 --> 00:21:38,230
you don't know how I got created well

00:21:36,100 --> 00:21:40,000
the dependency injection in container is

00:21:38,230 --> 00:21:41,679
the thing that creates all of the

00:21:40,000 --> 00:21:45,429
instances for you and it does that by

00:21:41,679 --> 00:21:48,220
looking at yama files to work out what

00:21:45,429 --> 00:21:50,230
class to call the creek called new on

00:21:48,220 --> 00:21:51,400
and you can do things like passing

00:21:50,230 --> 00:21:57,010
arguments it's a whole bunch of options

00:21:51,400 --> 00:22:00,100
there so the benefit of that is that you

00:21:57,010 --> 00:22:02,380
essentially a declarative information

00:22:00,100 --> 00:22:04,000
you're passing you just be able to do

00:22:02,380 --> 00:22:05,980
that in yama and you can just assume

00:22:04,000 --> 00:22:09,940
that all of the classes will be there in

00:22:05,980 --> 00:22:12,340
your code when it gets called and in

00:22:09,940 --> 00:22:15,730
your own custom module you just define

00:22:12,340 --> 00:22:17,770
a module named services yeah more file

00:22:15,730 --> 00:22:20,860
and Drupal automatically load that up

00:22:17,770 --> 00:22:24,970
and add that to the list of bong

00:22:20,860 --> 00:22:28,419
services so this is a simple example of

00:22:24,970 --> 00:22:30,159
defining a service we have a Yammer file

00:22:28,419 --> 00:22:33,309
here and essentially in this need this

00:22:30,159 --> 00:22:35,559
high level services we've got my

00:22:33,309 --> 00:22:38,320
services it's essentially your unique

00:22:35,559 --> 00:22:40,029
name it should be usually it would be

00:22:38,320 --> 00:22:45,820
prefixed with the name of your module

00:22:40,029 --> 00:22:48,610
just to avoid a name clash and then here

00:22:45,820 --> 00:22:51,970
we're just defining what the the class

00:22:48,610 --> 00:22:54,340
is that is the container is going to

00:22:51,970 --> 00:22:57,820
create and we could also do things like

00:22:54,340 --> 00:22:59,890
passing arguments so here we're passing

00:22:57,820 --> 00:23:01,330
in the config factory and it's at symbol

00:22:59,890 --> 00:23:03,850
means it's basically another service

00:23:01,330 --> 00:23:05,590
that's been to find somewhere else but

00:23:03,850 --> 00:23:07,360
this could easily be say the database

00:23:05,590 --> 00:23:10,809
connection or anything like that so

00:23:07,360 --> 00:23:15,340
these will get passed in into your into

00:23:10,809 --> 00:23:17,110
your class so you can once you to find

00:23:15,340 --> 00:23:18,669
these services to get them is actually

00:23:17,110 --> 00:23:21,570
pretty straightforward so as I said

00:23:18,669 --> 00:23:23,950
before if you're defining a service you

00:23:21,570 --> 00:23:26,500
can pass other services in and they'll

00:23:23,950 --> 00:23:28,120
automatically be there if you want to if

00:23:26,500 --> 00:23:29,970
you have to if you're forced to use a

00:23:28,120 --> 00:23:32,230
procedural method you can use this

00:23:29,970 --> 00:23:34,000
Drupal class here in Drupal 8 that

00:23:32,230 --> 00:23:36,190
basically will find the service by its

00:23:34,000 --> 00:23:37,270
unique name and it will just return you

00:23:36,190 --> 00:23:41,440
the incidence that's already been

00:23:37,270 --> 00:23:44,110
created there's probably too much of

00:23:41,440 --> 00:23:47,320
this being used at the moment in in in

00:23:44,110 --> 00:23:48,700
Drupal 8 call so I'd actually I'd say

00:23:47,320 --> 00:23:50,730
this is a bit of an anti-pattern for the

00:23:48,700 --> 00:23:52,690
reasons I explained before around

00:23:50,730 --> 00:23:54,340
problems with procedural code is

00:23:52,690 --> 00:23:59,880
actually much harder to kind of mock

00:23:54,340 --> 00:24:02,860
these kinds of calls out in your code so

00:23:59,880 --> 00:24:04,360
so the benefits of services essentially

00:24:02,860 --> 00:24:07,390
we get a lot of benefit out of that

00:24:04,360 --> 00:24:09,909
pattern of dependency injection loose

00:24:07,390 --> 00:24:12,100
coupling recover from the implementation

00:24:09,909 --> 00:24:15,940
details were programming to interfaces

00:24:12,100 --> 00:24:19,840
and we can allow our plugins or even our

00:24:15,940 --> 00:24:21,159
route controllers our the the symphony

00:24:19,840 --> 00:24:23,470
route controllers that are in Drupal 8

00:24:21,159 --> 00:24:24,400
as well it's actually be free of a bit

00:24:23,470 --> 00:24:26,200
of that domain Lodge

00:24:24,400 --> 00:24:30,460
we can push that out into current

00:24:26,200 --> 00:24:32,380
well-defined services so now kind of

00:24:30,460 --> 00:24:35,560
understand the concept of services so

00:24:32,380 --> 00:24:40,090
what a tag services so tax service is

00:24:35,560 --> 00:24:42,340
essentially a way of letting the

00:24:40,090 --> 00:24:44,950
container to drip the symphony container

00:24:42,340 --> 00:24:48,400
take care of the work of discovering

00:24:44,950 --> 00:24:50,230
what implementations are available so

00:24:48,400 --> 00:24:52,150
what you're doing in your in your

00:24:50,230 --> 00:24:54,280
service definition you're you're giving

00:24:52,150 --> 00:24:56,260
it a tag and the container will go

00:24:54,280 --> 00:24:58,570
through and say find everything that's

00:24:56,260 --> 00:25:02,800
tagged with this and I'll take you

00:24:58,570 --> 00:25:04,510
through how this this kind of works so

00:25:02,800 --> 00:25:06,490
the first thing is we need an interface

00:25:04,510 --> 00:25:10,350
for a service now we're always using

00:25:06,490 --> 00:25:13,600
interfaces to just have that decoupling

00:25:10,350 --> 00:25:14,830
and a manager so managers probably not

00:25:13,600 --> 00:25:17,380
always a good term but it's essentially

00:25:14,830 --> 00:25:20,920
what is calling these services so

00:25:17,380 --> 00:25:22,690
whatever your domain logic is theater

00:25:20,920 --> 00:25:24,220
manager or a bit of a repository or

00:25:22,690 --> 00:25:26,530
whatever it might be that you call it

00:25:24,220 --> 00:25:30,970
it's essentially the thing that will get

00:25:26,530 --> 00:25:32,740
past all those services that and then we

00:25:30,970 --> 00:25:36,910
need to add some tags to our service

00:25:32,740 --> 00:25:38,440
definition so this is a just a simple

00:25:36,910 --> 00:25:42,370
example of an interface that I would

00:25:38,440 --> 00:25:45,760
create now you can see how but one

00:25:42,370 --> 00:25:47,020
method court applies and the idea with

00:25:45,760 --> 00:25:49,540
that is that I want to build in some

00:25:47,020 --> 00:25:52,060
logic to be able to say should this

00:25:49,540 --> 00:25:54,850
service be called on on me don't have to

00:25:52,060 --> 00:25:56,950
do that for example if you've got

00:25:54,850 --> 00:25:58,360
services at every single one of your

00:25:56,950 --> 00:26:00,730
services you just want to be called all

00:25:58,360 --> 00:26:03,030
the time then you don't need this just

00:26:00,730 --> 00:26:05,830
gives you a little bit more flexibility

00:26:03,030 --> 00:26:07,210
and then just something that I've called

00:26:05,830 --> 00:26:10,470
do something which is essentially the

00:26:07,210 --> 00:26:13,260
thing that's actually going to be called

00:26:10,470 --> 00:26:17,380
and then this is our manager class so

00:26:13,260 --> 00:26:20,350
this is basically where the instances of

00:26:17,380 --> 00:26:22,090
those services will get added so we've

00:26:20,350 --> 00:26:24,880
got two methods on here one is add

00:26:22,090 --> 00:26:26,200
handler and what this is doing this

00:26:24,880 --> 00:26:28,960
system this is the method that gets

00:26:26,200 --> 00:26:31,270
called by the container to pass the

00:26:28,960 --> 00:26:34,540
service in and all it's doing is

00:26:31,270 --> 00:26:36,040
collecting them so every time the

00:26:34,540 --> 00:26:37,170
symphony container find something with

00:26:36,040 --> 00:26:39,720
that tag it

00:26:37,170 --> 00:26:41,310
all this this ad handler method and it

00:26:39,720 --> 00:26:43,200
will add to this list of services so

00:26:41,310 --> 00:26:44,730
what you end up with is just that that

00:26:43,200 --> 00:26:48,020
property is it's a big long list of all

00:26:44,730 --> 00:26:50,730
of the things that have had those tags

00:26:48,020 --> 00:26:53,940
and then the manager is really whether

00:26:50,730 --> 00:26:57,240
the business logic takes place so in my

00:26:53,940 --> 00:26:59,880
example here all I'm doing is that when

00:26:57,240 --> 00:27:02,580
I want to in both these services I

00:26:59,880 --> 00:27:04,860
looked through each of them I check if

00:27:02,580 --> 00:27:07,650
it applies or not and then if it does

00:27:04,860 --> 00:27:08,760
I'll just I'll just call it so this is

00:27:07,650 --> 00:27:10,650
obviously where you could customize

00:27:08,760 --> 00:27:14,790
whatever functionality that you want to

00:27:10,650 --> 00:27:16,380
happen be it you know you could call

00:27:14,790 --> 00:27:18,750
every single one you don't need to check

00:27:16,380 --> 00:27:21,840
if things apply or not or you could do

00:27:18,750 --> 00:27:23,790
things like if it actually applies then

00:27:21,840 --> 00:27:26,400
jump out at that point don't call

00:27:23,790 --> 00:27:28,650
anything further down the list really

00:27:26,400 --> 00:27:32,460
depends on how you you you actually want

00:27:28,650 --> 00:27:35,400
to implement it I mean so the last thing

00:27:32,460 --> 00:27:38,780
we need to do is add those tags so this

00:27:35,400 --> 00:27:43,950
is again it's a symphony container

00:27:38,780 --> 00:27:46,380
concept where essentially we've got two

00:27:43,950 --> 00:27:50,910
things first of all we're tagging our

00:27:46,380 --> 00:27:52,740
manager class as a service collector and

00:27:50,910 --> 00:27:56,060
I think Larry might be able to correct

00:27:52,740 --> 00:27:59,340
me this is a actually a Drupal concept

00:27:56,060 --> 00:28:03,330
where essentially we build up some logic

00:27:59,340 --> 00:28:04,830
to avoid kind of reproducing like the

00:28:03,330 --> 00:28:07,470
same things though it's just to remove

00:28:04,830 --> 00:28:09,630
some of the boilerplate and this year is

00:28:07,470 --> 00:28:11,160
that we're telling it this is the tag I

00:28:09,630 --> 00:28:15,870
want you to look for to collect all of

00:28:11,160 --> 00:28:19,340
those services and then down here we've

00:28:15,870 --> 00:28:19,340
got another example of a service and

00:28:19,790 --> 00:28:24,780
it's it's something that we want to be

00:28:22,200 --> 00:28:27,210
collected by this by this manager so we

00:28:24,780 --> 00:28:28,980
just have to give it the tag that we've

00:28:27,210 --> 00:28:31,460
defined up here and then it will get

00:28:28,980 --> 00:28:33,660
found by the container and passed in

00:28:31,460 --> 00:28:36,270
there's also the other concept of

00:28:33,660 --> 00:28:38,550
priority which which is supported by

00:28:36,270 --> 00:28:40,620
this service collector which means you

00:28:38,550 --> 00:28:42,930
can it will automatically rank them in

00:28:40,620 --> 00:28:45,510
order so if you want something to occur

00:28:42,930 --> 00:28:47,310
higher up in the list when it loops

00:28:45,510 --> 00:28:51,100
through those those things they will

00:28:47,310 --> 00:28:54,440
basically respect this priority or

00:28:51,100 --> 00:28:58,610
so what are the benefits of tag service

00:28:54,440 --> 00:29:00,680
as well we're still defining interfaces

00:28:58,610 --> 00:29:03,410
we're using clear service definitions

00:29:00,680 --> 00:29:06,740
and we're actually using a lot less

00:29:03,410 --> 00:29:08,480
boilerplate than plugins when you don't

00:29:06,740 --> 00:29:11,480
need configuration for each instance

00:29:08,480 --> 00:29:13,580
type this could be a much simpler way or

00:29:11,480 --> 00:29:16,940
be it's much more to do with the

00:29:13,580 --> 00:29:18,440
container definition and it provides I

00:29:16,940 --> 00:29:22,190
think of pretty simple way to third

00:29:18,440 --> 00:29:24,500
parties to extend so it doesn't have

00:29:22,190 --> 00:29:26,990
configurations for it if it doesn't

00:29:24,500 --> 00:29:27,830
support the concept of admin form and of

00:29:26,990 --> 00:29:32,480
course we don't have things like

00:29:27,830 --> 00:29:34,520
derivatives or multi-instance support so

00:29:32,480 --> 00:29:37,400
there's quite a few examples of tag

00:29:34,520 --> 00:29:39,740
services in Drupal core already so if

00:29:37,400 --> 00:29:41,870
you're familiar with thumb did anyone

00:29:39,740 --> 00:29:43,820
ever struggle in Drupal 7 kind of

00:29:41,870 --> 00:29:48,110
dealing with breadcrumbs and what other

00:29:43,820 --> 00:29:51,320
things yeah okay so this kind of solves

00:29:48,110 --> 00:29:54,110
that problem so basically it's got the

00:29:51,320 --> 00:29:56,240
concept of you've got a number of

00:29:54,110 --> 00:29:58,040
different breadcrumb builders you might

00:29:56,240 --> 00:30:00,770
have one for taxonomy might have won

00:29:58,040 --> 00:30:02,690
four nodes and you can actually go and

00:30:00,770 --> 00:30:06,260
create your own bread crumb builder to

00:30:02,690 --> 00:30:08,480
override certain kind of conditions and

00:30:06,260 --> 00:30:11,360
say okay when it's this kind of node or

00:30:08,480 --> 00:30:12,770
its this taxonomy term instead of the

00:30:11,360 --> 00:30:15,320
default behavior actually want to

00:30:12,770 --> 00:30:16,640
override that in and you can specify all

00:30:15,320 --> 00:30:19,250
the many links that you want to be in

00:30:16,640 --> 00:30:22,550
your bread crumb and it will get it'll

00:30:19,250 --> 00:30:24,830
get used there's also a things like

00:30:22,550 --> 00:30:27,680
authentic authentication providers all

00:30:24,830 --> 00:30:30,530
of the tweak extensions are actually

00:30:27,680 --> 00:30:32,440
tagged services and then something that

00:30:30,530 --> 00:30:34,730
kind of came in right at the end before

00:30:32,440 --> 00:30:36,950
Drupal 8 was released was the idea of

00:30:34,730 --> 00:30:39,080
placeholder strategies which if you

00:30:36,950 --> 00:30:41,720
heard drees keynote this morning he was

00:30:39,080 --> 00:30:44,870
talking about big pipe was actually like

00:30:41,720 --> 00:30:48,350
a few different strategies that could be

00:30:44,870 --> 00:30:49,970
used so one of them is big pipe which is

00:30:48,350 --> 00:30:51,770
basically you know using placeholders

00:30:49,970 --> 00:30:54,410
and then filling in the slow bits later

00:30:51,770 --> 00:30:56,350
on but there's also other concepts like

00:30:54,410 --> 00:30:59,090
edge site includes which is using a CDN

00:30:56,350 --> 00:31:01,280
to do that for you I think there's

00:30:59,090 --> 00:31:02,119
another JavaScript one as well so that's

00:31:01,280 --> 00:31:07,399
all basic

00:31:02,119 --> 00:31:08,839
tag heuer as well so lastly I want to

00:31:07,399 --> 00:31:12,859
talk about events and this kind of ties

00:31:08,839 --> 00:31:16,699
it back into to where I started which is

00:31:12,859 --> 00:31:18,559
basically books so it's event

00:31:16,699 --> 00:31:20,689
essentially the same concept as hooks

00:31:18,559 --> 00:31:22,459
what what happens is something gets

00:31:20,689 --> 00:31:25,819
triggered and we want some code to be

00:31:22,459 --> 00:31:27,949
able to kind of listen in for those

00:31:25,819 --> 00:31:30,139
events when they get triggered and then

00:31:27,949 --> 00:31:32,569
do some work and we don't really know

00:31:30,139 --> 00:31:35,809
what they are so we don't know what

00:31:32,569 --> 00:31:37,279
implementations exist and we're not

00:31:35,809 --> 00:31:38,989
we're going to have a list of them what

00:31:37,279 --> 00:31:40,849
we're calling we just want to say go and

00:31:38,989 --> 00:31:42,109
fire that event and then whoever's

00:31:40,849 --> 00:31:45,039
listening can go and do what they want

00:31:42,109 --> 00:31:48,079
to do and it's using another symfony2

00:31:45,039 --> 00:31:51,829
component which is the event dispatcher

00:31:48,079 --> 00:31:53,689
component and it all kind of happens

00:31:51,829 --> 00:31:56,089
inside the container as well so we can

00:31:53,689 --> 00:31:58,099
leverage the container that's that we've

00:31:56,089 --> 00:32:01,849
already got in Drupal 8 to achieve some

00:31:58,099 --> 00:32:04,039
of this and it could be the actual thing

00:32:01,849 --> 00:32:06,139
that gets fired to be any callable type

00:32:04,039 --> 00:32:09,379
eh pretty horrible so the method or

00:32:06,139 --> 00:32:10,879
whatnot or even a service method so

00:32:09,379 --> 00:32:13,099
their support interpolate called for be

00:32:10,879 --> 00:32:16,189
able to just say load this service and

00:32:13,099 --> 00:32:17,539
call that method on the server all right

00:32:16,189 --> 00:32:21,949
so what do we need in order to be able

00:32:17,539 --> 00:32:23,629
to set up and use an event so first

00:32:21,949 --> 00:32:27,469
thing is an event class and this is

00:32:23,629 --> 00:32:30,019
really a simple data object that will

00:32:27,469 --> 00:32:32,359
get passed around to the events as they

00:32:30,019 --> 00:32:35,119
are so the event handles are there

00:32:32,359 --> 00:32:37,189
they're called this could be just

00:32:35,119 --> 00:32:39,289
something for them to read that

00:32:37,189 --> 00:32:41,239
information out of that event and then

00:32:39,289 --> 00:32:43,159
do whatever they need to do or in the

00:32:41,239 --> 00:32:44,479
case of all two hooks like modify some

00:32:43,159 --> 00:32:47,629
of that data and then pass it back to

00:32:44,479 --> 00:32:49,459
the next one of course we need some

00:32:47,629 --> 00:32:52,279
business logic so maybe a manager of

00:32:49,459 --> 00:32:54,409
something to trigger the event and then

00:32:52,279 --> 00:32:58,879
each of the individual event subscribers

00:32:54,409 --> 00:33:01,189
to do the work so very simple example

00:32:58,879 --> 00:33:07,369
I've got an event class I need to extend

00:33:01,189 --> 00:33:09,559
this event class here and then I can

00:33:07,369 --> 00:33:11,629
pass whatever it is I want in my example

00:33:09,559 --> 00:33:14,059
I'm just I've just kind of got this

00:33:11,629 --> 00:33:15,320
abstract concept of data but this might

00:33:14,059 --> 00:33:17,090
be actually something that's

00:33:15,320 --> 00:33:19,670
actually more meaningful to the events

00:33:17,090 --> 00:33:23,170
that you're creating and then something

00:33:19,670 --> 00:33:23,170
to actually be able to get the data back

00:33:23,500 --> 00:33:29,090
this would be an event manager so this

00:33:26,030 --> 00:33:32,360
is essentially the thing that notifies

00:33:29,090 --> 00:33:34,670
the event implementations of something

00:33:32,360 --> 00:33:36,830
and says okay to go into your work and

00:33:34,670 --> 00:33:38,630
you can see it all i need is this sip I

00:33:36,830 --> 00:33:41,690
need the the symphony event dispatcher

00:33:38,630 --> 00:33:45,050
object which I can inject using your

00:33:41,690 --> 00:33:47,120
container and then all i need to do is

00:33:45,050 --> 00:33:49,910
say she's back and here i'm basically

00:33:47,120 --> 00:33:51,980
i've got a unique name for the event

00:33:49,910 --> 00:33:53,810
that I'm dispatching and then I'm

00:33:51,980 --> 00:33:55,760
passing in the event object with the

00:33:53,810 --> 00:33:58,460
data that I want to pass into it right

00:33:55,760 --> 00:34:02,630
very very simple but to trigger an event

00:33:58,460 --> 00:34:06,350
if you're using the event dispatcher and

00:34:02,630 --> 00:34:08,650
then in my event subscriber I need two

00:34:06,350 --> 00:34:11,810
things first thing I need to actually

00:34:08,650 --> 00:34:15,260
define what events my subscriber is

00:34:11,810 --> 00:34:18,110
listening to so up here I've got this I

00:34:15,260 --> 00:34:20,930
implement this interface event

00:34:18,110 --> 00:34:23,120
subscriber interface and it has this

00:34:20,930 --> 00:34:25,550
method on it could get us get subscribed

00:34:23,120 --> 00:34:27,650
events and then essentially it's just

00:34:25,550 --> 00:34:31,480
returning this array here of which is

00:34:27,650 --> 00:34:33,740
basically keyed by the unique event name

00:34:31,480 --> 00:34:36,100
so that's on the left hand side and then

00:34:33,740 --> 00:34:39,140
on the right hand side I'm telling it

00:34:36,100 --> 00:34:41,870
what method to call and by default it

00:34:39,140 --> 00:34:44,780
will call a method with that name on the

00:34:41,870 --> 00:34:47,000
same class but if I want to if I want to

00:34:44,780 --> 00:34:49,100
call a service from the container I can

00:34:47,000 --> 00:34:50,810
actually give it a service definition

00:34:49,100 --> 00:34:56,120
and that will go and call that service

00:34:50,810 --> 00:34:57,950
definition as well and the last thing I

00:34:56,120 --> 00:35:01,900
need to do is just using the container

00:34:57,950 --> 00:35:01,900
definition to wire it all together so

00:35:02,320 --> 00:35:07,130
first thing is the event manager all it

00:35:05,150 --> 00:35:10,640
needs was to have that event dispatcher

00:35:07,130 --> 00:35:12,290
um service passed into it to be able to

00:35:10,640 --> 00:35:14,260
call dispatch on and that is actually

00:35:12,290 --> 00:35:17,330
something that's already available in

00:35:14,260 --> 00:35:18,950
al-amin Drupal 8 ball so that's let's

00:35:17,330 --> 00:35:21,050
just you just put that definition and

00:35:18,950 --> 00:35:24,470
it'll get passed in and then I'm

00:35:21,050 --> 00:35:25,670
defining my advanced to describe our and

00:35:24,470 --> 00:35:28,410
the only thing you need to know about

00:35:25,670 --> 00:35:30,299
this is that you just need to pass a tag

00:35:28,410 --> 00:35:31,829
to tell it that it's an event subscriber

00:35:30,299 --> 00:35:33,900
and then the symphony container goes

00:35:31,829 --> 00:35:35,940
okay you're an event subscriber and it

00:35:33,900 --> 00:35:38,250
will look for though that method that

00:35:35,940 --> 00:35:41,839
says get subscribed events and it will

00:35:38,250 --> 00:35:48,299
do all the wiring up for you right

00:35:41,839 --> 00:35:50,309
everyone sit with me okay so um when do

00:35:48,299 --> 00:35:51,930
we want to use events so you could see

00:35:50,309 --> 00:35:56,039
it's very similar model to pips in

00:35:51,930 --> 00:35:58,220
Drupal 7 it's basically you know

00:35:56,039 --> 00:36:01,020
anywhere where drupal is actually saying

00:35:58,220 --> 00:36:03,059
in a module invoke all or whatever it

00:36:01,020 --> 00:36:04,859
might be it's just triggering an event

00:36:03,059 --> 00:36:06,869
and then it's using the mechanism

00:36:04,859 --> 00:36:10,680
mechanism of a function name in order to

00:36:06,869 --> 00:36:12,660
define how to be discovered and how to

00:36:10,680 --> 00:36:16,020
be registered to be called when that

00:36:12,660 --> 00:36:19,500
event happens now you can use events for

00:36:16,020 --> 00:36:21,270
altering as well like much like drupal

00:36:19,500 --> 00:36:23,910
altar does because we're passing that

00:36:21,270 --> 00:36:25,799
event around if we wanted to we could

00:36:23,910 --> 00:36:28,920
modify the data in that and that's our

00:36:25,799 --> 00:36:31,200
option to do for Moltres or who whatever

00:36:28,920 --> 00:36:32,789
alters that we want to do and it could

00:36:31,200 --> 00:36:36,270
be a good replacement for a lot of the

00:36:32,789 --> 00:36:38,309
dribble books that are there and I guess

00:36:36,270 --> 00:36:40,109
one of the main reasons that you'd want

00:36:38,309 --> 00:36:42,990
to use events is that we get all the

00:36:40,109 --> 00:36:45,329
benefits of object oriented PHP code so

00:36:42,990 --> 00:36:48,089
I'm rewriting two interfaces we've got

00:36:45,329 --> 00:36:50,579
loosely coupled components it just means

00:36:48,089 --> 00:36:54,660
that we can invite unit testing on our

00:36:50,579 --> 00:36:58,730
carry and have in a much better more

00:36:54,660 --> 00:37:01,849
granular kind of code quality alright so

00:36:58,730 --> 00:37:01,849
something up

00:37:02,370 --> 00:37:10,230
avoid hooks the procedure they're hard

00:37:06,090 --> 00:37:13,170
to test if you want to create something

00:37:10,230 --> 00:37:14,970
that it's like hawks where you you want

00:37:13,170 --> 00:37:16,800
to walk something to be able to react to

00:37:14,970 --> 00:37:20,280
code or things that you're doing and you

00:37:16,800 --> 00:37:22,350
can use events that will support that if

00:37:20,280 --> 00:37:24,240
you need configuration for multiple

00:37:22,350 --> 00:37:26,250
instances and you need admin forms and

00:37:24,240 --> 00:37:28,290
you need you know users to be able to

00:37:26,250 --> 00:37:30,300
add some settings then plugins are your

00:37:28,290 --> 00:37:31,680
probably your best option however if you

00:37:30,300 --> 00:37:34,080
don't need that and you want something

00:37:31,680 --> 00:37:36,420
really simple or simpler with less

00:37:34,080 --> 00:37:40,980
boilerplate then you can use tag

00:37:36,420 --> 00:37:43,310
services and with that is there any

00:37:40,980 --> 00:37:43,310
questions

00:37:52,450 --> 00:37:57,250
events and tag services inside plugins

00:38:04,549 --> 00:38:11,469
yeah there's nothing stopping you from

00:38:07,130 --> 00:38:15,739
doing that yeah that's that would work

00:38:11,469 --> 00:38:18,799
because essentially you're your event

00:38:15,739 --> 00:38:19,880
handlers have access can I have access

00:38:18,799 --> 00:38:21,559
to the container and they can do

00:38:19,880 --> 00:38:23,329
whatever they want so you could you

00:38:21,559 --> 00:38:27,349
could probably wire it up in a couple of

00:38:23,329 --> 00:38:34,999
different ways yeah I use you know you

00:38:27,349 --> 00:38:42,890
to use on the example one of the tax

00:38:34,999 --> 00:38:48,410
service yeah so I think concrete

00:38:42,890 --> 00:38:50,839
examples so a good example might be for

00:38:48,410 --> 00:38:53,689
research for example where you might

00:38:50,839 --> 00:38:56,359
have multiple implementation so you

00:38:53,689 --> 00:38:58,099
search api search api and triple seven

00:38:56,359 --> 00:38:59,929
is a very popular module you might have

00:38:58,099 --> 00:39:03,319
a solar module and you might have a

00:38:59,929 --> 00:39:05,420
elastic search module and each of them

00:39:03,319 --> 00:39:07,069
they have different configuration now

00:39:05,420 --> 00:39:09,829
you have different configuration options

00:39:07,069 --> 00:39:13,219
for each of those but in terms of like

00:39:09,829 --> 00:39:16,039
trying to decouple your code you know

00:39:13,219 --> 00:39:18,410
you probably just want to implement a

00:39:16,039 --> 00:39:20,390
plug-in for each of those and I think

00:39:18,410 --> 00:39:22,660
the call poor system is actually using

00:39:20,390 --> 00:39:24,589
plugins search plugins for that reason

00:39:22,660 --> 00:39:27,949
because they're different different

00:39:24,589 --> 00:39:30,679
things and each configuration an example

00:39:27,949 --> 00:39:32,599
of using tag services with breadcrumbs

00:39:30,679 --> 00:39:34,789
which don't have anywhere you know they

00:39:32,599 --> 00:39:37,130
don't have any configuration and all it

00:39:34,789 --> 00:39:39,259
is is really is like a list of different

00:39:37,130 --> 00:39:41,869
implementations and whoever's gets in

00:39:39,259 --> 00:39:43,789
first that code gets round you don't

00:39:41,869 --> 00:39:45,619
really care about there's nothing that's

00:39:43,789 --> 00:39:48,589
user-facing for those four people to

00:39:45,619 --> 00:39:50,900
actually configure and then I think

00:39:48,589 --> 00:39:52,670
lastly events are the thing it really is

00:39:50,900 --> 00:39:54,890
a replacement for hawks so if you have

00:39:52,670 --> 00:39:56,689
got a situation where you think I only

00:39:54,890 --> 00:39:57,890
to implement a hook if you like okay

00:39:56,689 --> 00:40:03,679
well maybe an events a better way of

00:39:57,890 --> 00:40:05,630
doing that in object-oriented way no no

00:40:03,679 --> 00:40:08,809
hooks are still supported so you can

00:40:05,630 --> 00:40:10,880
implement books if you like I would

00:40:08,809 --> 00:40:12,109
discourage them I mean you're gonna have

00:40:10,880 --> 00:40:14,479
to him you're gonna have to implement

00:40:12,109 --> 00:40:16,020
hooks from core modules so if you want

00:40:14,479 --> 00:40:17,790
to do a form alter you still

00:40:16,020 --> 00:40:20,400
to do for Martha that's the only way of

00:40:17,790 --> 00:40:22,140
doing at the moment but I'm just talking

00:40:20,400 --> 00:40:24,920
about if you're building a custom module

00:40:22,140 --> 00:40:27,450
and you're wanting to extend allowing

00:40:24,920 --> 00:40:28,860
other modules to extend your custom

00:40:27,450 --> 00:40:35,550
module then you have a choice right

00:40:28,860 --> 00:40:39,900
about how you implement that big hooks

00:40:35,550 --> 00:40:42,000
conceived it recommended me more look I

00:40:39,900 --> 00:40:44,250
mean really it depends on how much

00:40:42,000 --> 00:40:46,380
community support we get around the idea

00:40:44,250 --> 00:40:48,210
of using events versus hooks I mean it's

00:40:46,380 --> 00:40:50,820
a very ingrained and then there's still

00:40:48,210 --> 00:40:51,990
thousands of hooks in Drupal so it's

00:40:50,820 --> 00:40:53,190
just the case of like okay this is

00:40:51,990 --> 00:40:54,660
something that we think is worthwhile

00:40:53,190 --> 00:40:58,610
doing and then it's doing the works

00:40:54,660 --> 00:40:58,610
actually good get that implemented

00:41:06,390 --> 00:41:13,740
they're doing

00:41:09,220 --> 00:41:13,740
you could also create a customer service

00:41:18,480 --> 00:41:23,680
recommendation if you had to do

00:41:19,859 --> 00:41:26,900
something like evening confidence which

00:41:23,680 --> 00:41:30,470
or angular or something is you know

00:41:26,900 --> 00:41:31,970
Philippines oh I mean that's a little

00:41:30,470 --> 00:41:34,849
bit out of the scope of what I'm talking

00:41:31,970 --> 00:41:37,970
about today because that's really

00:41:34,849 --> 00:41:39,560
decoupling not at a PHP code level it's

00:41:37,970 --> 00:41:41,450
decoupling at a system level you know

00:41:39,560 --> 00:41:44,380
like this systems talking to that web

00:41:41,450 --> 00:41:48,500
service and those kinds of things so

00:41:44,380 --> 00:41:51,050
yeah that's a certificate in yet I guess

00:41:48,500 --> 00:41:52,460
what are the hooks are events or you

00:41:51,050 --> 00:41:56,240
know what should we use if you have to

00:41:52,460 --> 00:41:57,680
customize the theming yard as such so in

00:41:56,240 --> 00:41:59,089
terms of customizing the theme layer

00:41:57,680 --> 00:42:02,510
there's still a lot of hooks in there

00:41:59,089 --> 00:42:04,730
for you know who pre post process yeah

00:42:02,510 --> 00:42:07,040
that's all that that hasn't changed so I

00:42:04,730 --> 00:42:08,630
don't think you can actually use events

00:42:07,040 --> 00:42:11,240
in the theming layer if you want to do

00:42:08,630 --> 00:42:13,010
things like modify variables before they

00:42:11,240 --> 00:42:15,230
get passed to tweak templates you still

00:42:13,010 --> 00:42:17,000
have to use the books sure and plugins

00:42:15,230 --> 00:42:18,800
obviously with blogs and things like

00:42:17,000 --> 00:42:20,359
that yeah you have to use if you want to

00:42:18,800 --> 00:42:27,339
write a block you have to write plugin

00:42:20,359 --> 00:42:27,339
augmentation sure yeah thank you yep

00:42:28,910 --> 00:42:39,640
the victims handling the site

00:42:31,660 --> 00:42:44,330
breadcrumbs yes multiple preheat

00:42:39,640 --> 00:42:47,870
supposedly I created that as a no the

00:42:44,330 --> 00:42:50,060
break-up it's changing yes right so

00:42:47,870 --> 00:42:54,290
there's a couple of different concepts

00:42:50,060 --> 00:42:57,050
that yeah so there's so the breadcrumb

00:42:54,290 --> 00:42:58,910
helped workout workout what the links

00:42:57,050 --> 00:43:01,490
are gonna be getting the breadcrumb yeah

00:42:58,910 --> 00:43:04,220
that's a tag service yogi the block that

00:43:01,490 --> 00:43:07,220
gets placed on the the breadcrumb that's

00:43:04,220 --> 00:43:09,440
a block which is a plugin yeah yeah so I

00:43:07,220 --> 00:43:11,630
want to add it just in the plug in a

00:43:09,440 --> 00:43:14,450
blog suppress a bit so we can add if you

00:43:11,630 --> 00:43:16,280
do as a block bargain yeah yeah so we

00:43:14,450 --> 00:43:18,020
can add it and keep it in two separate

00:43:16,280 --> 00:43:21,470
cutting edge you should automatically

00:43:18,020 --> 00:43:23,270
clicker yeah you know what yeah but like

00:43:21,470 --> 00:43:27,440
you want to basically buy your own yeah

00:43:23,270 --> 00:43:30,020
I how like to cut three Canada so it has

00:43:27,440 --> 00:43:33,560
to become like this so I defined that is

00:43:30,020 --> 00:43:35,540
a service like this URL has to be this

00:43:33,560 --> 00:43:38,000
breadcrumb has to become like this that

00:43:35,540 --> 00:43:39,710
are sorry that comes in a blog that's

00:43:38,000 --> 00:43:41,750
what the breadcrumb yeah that's right

00:43:39,710 --> 00:43:43,040
hey the flicking and then you wait that

00:43:41,750 --> 00:43:46,100
would just come at the normal bread

00:43:43,040 --> 00:43:48,200
crumb yeah loss so yeah I can aren't

00:43:46,100 --> 00:43:50,960
dead play kids anywhere multiple times

00:43:48,200 --> 00:43:56,930
right yeah you can go yep thanks you get

00:43:50,960 --> 00:43:59,260
multiple instances of that yeah question

00:43:56,930 --> 00:44:07,690
yeah

00:43:59,260 --> 00:44:10,780
travelmate refer so I can hear how to do

00:44:07,690 --> 00:44:14,470
a after coral ago taints of our time

00:44:10,780 --> 00:44:16,960
with evens like farm alter those things

00:44:14,470 --> 00:44:19,870
out well I mean that's that's not

00:44:16,960 --> 00:44:21,910
support it so changing like hook form

00:44:19,870 --> 00:44:24,430
altar is not something that would need

00:44:21,910 --> 00:44:25,720
to be supported in triple core what what

00:44:24,430 --> 00:44:29,550
I'm referring to is right if you're

00:44:25,720 --> 00:44:32,170
running your own custom module and

00:44:29,550 --> 00:44:34,630
you're not just implementing a core

00:44:32,170 --> 00:44:37,300
group you want to basically use the

00:44:34,630 --> 00:44:40,180
concept of books in your module for

00:44:37,300 --> 00:44:42,910
other modules to extend your module then

00:44:40,180 --> 00:44:44,980
you would use events rather than hooks

00:44:42,910 --> 00:44:48,400
you still need to implement some of the

00:44:44,980 --> 00:44:56,370
hooks that are in triple chrome Thanks I

00:44:48,400 --> 00:44:56,370
think probably are on yep one more yep

00:44:59,500 --> 00:45:06,670
what is the role of the annotation class

00:45:02,580 --> 00:45:08,650
to the annotation class essentially the

00:45:06,670 --> 00:45:12,850
annotation class is the metadata for

00:45:08,650 --> 00:45:15,880
your plug-in so it allows each plug-in

00:45:12,850 --> 00:45:18,400
type can define the kinds of things that

00:45:15,880 --> 00:45:20,890
you can set in the case of blocks it's

00:45:18,400 --> 00:45:24,250
really just a unique lock ID and the

00:45:20,890 --> 00:45:26,410
label that gets appears in the in the

00:45:24,250 --> 00:45:28,690
admin screen but there's much bigger

00:45:26,410 --> 00:45:31,720
examples like the entities system it

00:45:28,690 --> 00:45:33,190
defines all the controllers and all of

00:45:31,720 --> 00:45:35,860
those types of things is a big long list

00:45:33,190 --> 00:45:38,860
of those and then what happens is the

00:45:35,860 --> 00:45:42,460
plug-in manager essentially when it

00:45:38,860 --> 00:45:44,860
discovers those when it discovers the

00:45:42,460 --> 00:45:46,630
plugins reads those annotations then

00:45:44,860 --> 00:45:49,150
installs that metadata if we feature the

00:45:46,630 --> 00:45:51,730
plug-in implementations so that you can

00:45:49,150 --> 00:45:55,990
do things like query that and work out

00:45:51,730 --> 00:46:00,520
what to do okay thank you I know what is

00:45:55,990 --> 00:46:02,890
the use of build mattered in a blob is

00:46:00,520 --> 00:46:05,350
class actually will matter what is the

00:46:02,890 --> 00:46:07,540
build method for just block based

00:46:05,350 --> 00:46:10,210
suppose we are creating a block custom

00:46:07,540 --> 00:46:12,010
block yeah so so in plugin folder there

00:46:10,210 --> 00:46:16,890
is a block for in plugin folder here is

00:46:12,010 --> 00:46:20,170
a block folder and there is a block

00:46:16,890 --> 00:46:23,200
module name block dot PHP file okay so

00:46:20,170 --> 00:46:27,040
if we are going to create a our own

00:46:23,200 --> 00:46:29,110
block then we have to create a class and

00:46:27,040 --> 00:46:31,930
we have to extend the log base class

00:46:29,110 --> 00:46:35,290
into our own class so there is a method

00:46:31,930 --> 00:46:37,180
build and access block so what is the

00:46:35,290 --> 00:46:41,680
role of build and access block mitosis

00:46:37,180 --> 00:46:46,360
build is essentially the equivalent of

00:46:41,680 --> 00:46:49,600
what hook walk view in Drupal 7 so it

00:46:46,360 --> 00:46:51,400
just returns a renderer right and which

00:46:49,600 --> 00:46:53,560
exactly what you had in Drupal 7 is just

00:46:51,400 --> 00:46:58,240
that now it's on an interface instead of

00:46:53,560 --> 00:47:00,340
just a method with a magical name and

00:46:58,240 --> 00:47:03,570
the same if I access so that's just um

00:47:00,340 --> 00:47:09,950
its equivalent to the Drupal 7 version i

00:47:03,570 --> 00:47:13,310
can use services in our custom form yes

00:47:09,950 --> 00:47:17,300
and how to create our own event in

00:47:13,310 --> 00:47:19,609
custom form um Bakken Shale I'll share

00:47:17,300 --> 00:47:23,000
the slides it's got some examples later

00:47:19,609 --> 00:47:25,670
on okay thank you alright thanks ever oh

00:47:23,000 --> 00:47:29,829
um yeah you want to right position

00:47:25,670 --> 00:47:29,829
that's funny thank you

00:47:38,570 --> 00:47:41,740

YouTube URL: https://www.youtube.com/watch?v=2_FlH0D_ks8


