Title: DrupalCon Barcelona 2015: Caching at the Edge: CDNs for everyone
Publication date: 2015-09-22
Playlist: DrupalCon Barcelona - September 2015
Description: 
	Drupal 8 has comprehensive knowledge about the cacheability of the things it renders. This opens new doors. Did you know Drupal 8 will be able to cache everything at the edge?

For sites with many mobile users (high latency due to network), global audiences (high latency due to distance) and performance-sensitive sites (e-commerce), Drupal 8 will be a huge leap forward.

We'll be showing how easy and powerful it is using the CloudFlare and Fastly CDNs.

Cache tags

Instantaneous purging of all (and only!) the affected pages when an article is updated. No more manual purging by content editors. No more fiddling with URLs to purge. It all just works. Optimally.

Cache anonymous pages without any effort. On your own reverse proxy, and on many CDNs — thanks to standardized configuration.

This sounds nice, but that's just the anonymous user case. What about authenticated users?

Cache contexts

The typical example: a shopping site, users categorized in groups according to interests, and a shopping cart.

Automatic caching of the entire page, minus the shopping cart, on the edge. Reused across all users in the same group. And, if the CDN supports it, even the shopping cart can be cached on the edge (and be kept up-to-date thanks to cache tags). Otherwise only thatneeds to talk to the origin (via AJAX, for example).

Cache authenticated pages without any effort.  On your own reverse proxy, and on some CDNs — thanks to standardized configuration.

Goals

The caching concepts
Demos
BigPipe, ESI, hybrid rendering strategies
A peek at the future: ServiceWorker
Captions: 
	00:00:00,290 --> 00:00:13,500
5 4 3 2 1 go so welcome to our talk

00:00:11,460 --> 00:00:17,310
catching at the edge see the ends for

00:00:13,500 --> 00:00:19,080
everyone so far the first and most

00:00:17,310 --> 00:00:26,609
important person did you have a great

00:00:19,080 --> 00:00:29,970
Rubicon today so far the other thing

00:00:26,609 --> 00:00:32,120
that I would like to know because from

00:00:29,970 --> 00:00:38,760
the level hair this was set as an

00:00:32,120 --> 00:00:48,030
advanced DevOps talk who of you has used

00:00:38,760 --> 00:00:52,770
a CDN so far that's great who if you

00:00:48,030 --> 00:00:58,920
would say they are advanced level okay

00:00:52,770 --> 00:01:04,789
Sam here in the front intermediate cool

00:00:58,920 --> 00:01:04,789
any beginners you'll learn something too

00:01:08,780 --> 00:01:17,780
are there any users of us cash some yeah

00:01:14,780 --> 00:01:22,700
there is I module purpose group of six

00:01:17,780 --> 00:01:26,630
there okay who have you use a static

00:01:22,700 --> 00:01:30,560
HTML like that eighty percent no one

00:01:26,630 --> 00:01:34,310
okay um it's a true pecan that's good so

00:01:30,560 --> 00:01:39,490
at least we're here all and now let's

00:01:34,310 --> 00:01:42,530
start will today show you what nice and

00:01:39,490 --> 00:01:45,789
things you can do with different see the

00:01:42,530 --> 00:01:50,300
ends and how Drupal 8 will totally

00:01:45,789 --> 00:01:53,990
revolutionize what you can do be

00:01:50,300 --> 00:01:55,940
prepared so Fabian didn't introduce

00:01:53,990 --> 00:01:58,610
himself he's favored in France from

00:01:55,940 --> 00:02:02,509
daiquan I'm wim wim leers I work at all

00:01:58,610 --> 00:02:05,690
Korea and let's get started so for me

00:02:02,509 --> 00:02:07,369
personally it is actually more than just

00:02:05,690 --> 00:02:08,989
about CD ends and making a particular

00:02:07,369 --> 00:02:11,780
website fast I personally would like to

00:02:08,989 --> 00:02:14,810
see that the entire web is able to be

00:02:11,780 --> 00:02:16,930
fast because what we see today and the

00:02:14,810 --> 00:02:19,489
last few years is that silos are

00:02:16,930 --> 00:02:22,010
increasingly awesome like Facebook is

00:02:19,489 --> 00:02:24,530
very fast Google is very fast but many

00:02:22,010 --> 00:02:27,709
others many big companies small sites

00:02:24,530 --> 00:02:30,170
local community websites they're they're

00:02:27,709 --> 00:02:31,970
slow or they can easily go down or

00:02:30,170 --> 00:02:35,150
they're only slow on mobile connections

00:02:31,970 --> 00:02:37,940
but why is that really necessary can we

00:02:35,150 --> 00:02:41,290
not fix that can we not try to fix it so

00:02:37,940 --> 00:02:43,670
this is what we try to set out to do and

00:02:41,290 --> 00:02:45,709
first of all a very quick reminder but

00:02:43,670 --> 00:02:48,590
since all of you are using CDNs already

00:02:45,709 --> 00:02:51,049
I think this is completely pointless but

00:02:48,590 --> 00:02:53,359
lets you do it very quickly anyway the

00:02:51,049 --> 00:02:56,660
edge that's what it was in the title the

00:02:53,359 --> 00:02:58,340
edges servers close to the end user not

00:02:56,660 --> 00:03:00,109
the origin where it which is where your

00:02:58,340 --> 00:03:02,540
troops light is always it because for

00:03:00,109 --> 00:03:04,760
many sides it is true that the end users

00:03:02,540 --> 00:03:06,320
are very far from where your origin

00:03:04,760 --> 00:03:07,459
where your Drupal installation where the

00:03:06,320 --> 00:03:09,859
data center where your triple

00:03:07,459 --> 00:03:11,989
installation lives is running so the

00:03:09,859 --> 00:03:15,260
latency between talking to triple and

00:03:11,989 --> 00:03:17,569
the end user is rather large the edge is

00:03:15,260 --> 00:03:19,849
about providing servers to bring that

00:03:17,569 --> 00:03:21,349
distance down and bring the content

00:03:19,849 --> 00:03:22,250
close to the end user so that's the

00:03:21,349 --> 00:03:24,380
whole point

00:03:22,250 --> 00:03:25,960
that's what we gain by using a CDN then

00:03:24,380 --> 00:03:29,450
there's two main ways of using a CDN

00:03:25,960 --> 00:03:31,760
using it for assets only so static

00:03:29,450 --> 00:03:35,150
things such as CSS files JavaScript

00:03:31,760 --> 00:03:37,100
files images and I would like to ask how

00:03:35,150 --> 00:03:41,570
many of you have used CD ends already

00:03:37,100 --> 00:03:43,160
solely for this ok so like thirty

00:03:41,570 --> 00:03:44,390
percent probably you are definitely

00:03:43,160 --> 00:03:47,570
going to learn something new then

00:03:44,390 --> 00:03:49,670
because the other way of using a CDN is

00:03:47,570 --> 00:03:51,920
to use it for your HTML as well so your

00:03:49,670 --> 00:03:54,350
actual content a dynamic content that is

00:03:51,920 --> 00:03:55,850
served by drupal the problem with using

00:03:54,350 --> 00:03:57,590
it for HTML is that it's much more

00:03:55,850 --> 00:04:00,320
tricky because you have to deal with in

00:03:57,590 --> 00:04:01,790
validation the contents on the CDN needs

00:04:00,320 --> 00:04:03,400
to be invalidated so that it is kept in

00:04:01,790 --> 00:04:06,230
sync with what Drupal actually contains

00:04:03,400 --> 00:04:09,530
and the other problem is authenticated

00:04:06,230 --> 00:04:12,709
users very often when a CDM is even used

00:04:09,530 --> 00:04:14,900
by a site to serve to make the anonymous

00:04:12,709 --> 00:04:16,640
experience much faster nothing happens

00:04:14,900 --> 00:04:17,989
at already authenticated user experience

00:04:16,640 --> 00:04:21,739
so we will show something for that as

00:04:17,989 --> 00:04:23,570
well so the answer to why do you why use

00:04:21,739 --> 00:04:25,850
a CDN at all because it's close to the

00:04:23,570 --> 00:04:29,000
end user and we we can massively reduce

00:04:25,850 --> 00:04:32,360
the latency so this talk is solely about

00:04:29,000 --> 00:04:34,820
caching the HTML so well the entire

00:04:32,360 --> 00:04:36,620
website really it's not about just

00:04:34,820 --> 00:04:38,870
cashing it for assets using it for

00:04:36,620 --> 00:04:41,180
assets because that is a solve problem

00:04:38,870 --> 00:04:45,490
it is simple this is a real challenge

00:04:41,180 --> 00:04:49,220
and this is what can make a sizable

00:04:45,490 --> 00:04:51,710
change in making many many websites much

00:04:49,220 --> 00:04:55,100
faster and he must now he is the author

00:04:51,710 --> 00:04:57,020
of CDN module for Drupal yeah so yeah I

00:04:55,100 --> 00:05:00,110
maintain the the CDN module for Drupal

00:04:57,020 --> 00:05:02,750
which is just for assets but this is

00:05:00,110 --> 00:05:04,760
completely nuts about that and that is

00:05:02,750 --> 00:05:07,340
simple this is much more complex and

00:05:04,760 --> 00:05:09,669
that's what we're trying to solve so in

00:05:07,340 --> 00:05:12,020
Drupal 7 a situation was bit like this

00:05:09,669 --> 00:05:13,880
for invalidation we had two big problems

00:05:12,020 --> 00:05:15,860
in validation and authenticated users

00:05:13,880 --> 00:05:17,780
the simple way of going about in

00:05:15,860 --> 00:05:20,540
validation this is a way that most sites

00:05:17,780 --> 00:05:23,270
do it or very many sites do it is by

00:05:20,540 --> 00:05:24,890
using max-age he specify how long a

00:05:23,270 --> 00:05:26,660
piece of contents can be cached and the

00:05:24,890 --> 00:05:28,700
city and respects it just like any other

00:05:26,660 --> 00:05:30,289
proxy but the problem is that you don't

00:05:28,700 --> 00:05:33,210
still have still contents and for many

00:05:30,289 --> 00:05:36,210
use cases that is actually acceptable

00:05:33,210 --> 00:05:37,800
but is it ideal I would say not I would

00:05:36,210 --> 00:05:39,330
say that it's much better if you make a

00:05:37,800 --> 00:05:40,800
change on your website you change a

00:05:39,330 --> 00:05:43,080
piece of content you create a new piece

00:05:40,800 --> 00:05:45,569
of content it appears immediately for

00:05:43,080 --> 00:05:47,759
all users also anonymous users that are

00:05:45,569 --> 00:05:50,370
getting a fast experience thanks to it

00:05:47,759 --> 00:05:53,069
being cached in a CDN but that was not

00:05:50,370 --> 00:05:55,349
possible with this simple solution so

00:05:53,069 --> 00:05:58,160
there is also an advanced solution you

00:05:55,349 --> 00:06:01,740
can purge the affected URLs meaning that

00:05:58,160 --> 00:06:04,740
when you make or modify a piece of

00:06:01,740 --> 00:06:07,289
contents you have to know all of the

00:06:04,740 --> 00:06:10,199
URLs that that piece of content does or

00:06:07,289 --> 00:06:12,240
does appear on but that is very brittle

00:06:10,199 --> 00:06:14,699
because it is so very easy to miss one

00:06:12,240 --> 00:06:17,820
URL and forget to invalidate to purge

00:06:14,699 --> 00:06:20,940
that one URL so this is also not ideal

00:06:17,820 --> 00:06:22,710
and this is kind of the best way that

00:06:20,940 --> 00:06:25,199
the best solution that we have in Drupal

00:06:22,710 --> 00:06:27,479
8 is a screenshot of the ark we approach

00:06:25,199 --> 00:06:29,940
module and it automatically figures out

00:06:27,479 --> 00:06:32,340
which URL student validates and it shows

00:06:29,940 --> 00:06:34,050
a UI to chose a progress but let's be

00:06:32,340 --> 00:06:37,590
honest it's not ideal that we're showing

00:06:34,050 --> 00:06:40,830
a PA a bit of you I to show the progress

00:06:37,590 --> 00:06:42,509
of how the CDN is being updated how

00:06:40,830 --> 00:06:44,880
things are being purged ideally this

00:06:42,509 --> 00:06:48,090
would be completely transparent and even

00:06:44,880 --> 00:06:49,680
this sometimes misses some URLs where it

00:06:48,090 --> 00:06:51,930
doesn't know that the comet appears in

00:06:49,680 --> 00:06:55,800
that place as well so this is the best

00:06:51,930 --> 00:06:57,750
Drupal 7 can do but it's not ideal so in

00:06:55,800 --> 00:06:59,820
practice what we see in Drupal 7 is we

00:06:57,750 --> 00:07:02,070
have a combination of both we use max

00:06:59,820 --> 00:07:05,940
age because sometimes it is acceptable

00:07:02,070 --> 00:07:08,729
we use purging of specific URLs but then

00:07:05,940 --> 00:07:11,490
because that still doesn't always result

00:07:08,729 --> 00:07:13,860
in a perfect solution we very often have

00:07:11,490 --> 00:07:16,469
to do the very annoying and pesky thing

00:07:13,860 --> 00:07:18,900
of allowing content editors to purge

00:07:16,469 --> 00:07:21,990
things manually which is really awful

00:07:18,900 --> 00:07:24,780
how many of us have used manual purging

00:07:21,990 --> 00:07:26,639
for content editors yeah a whole lot

00:07:24,780 --> 00:07:29,310
that's that's not great that's a very

00:07:26,639 --> 00:07:30,690
bad authoring experience and so on top

00:07:29,310 --> 00:07:32,430
of that what we had is some site

00:07:30,690 --> 00:07:34,139
specific acts maybe some heuristics to

00:07:32,430 --> 00:07:36,030
automatically figure out that in some

00:07:34,139 --> 00:07:37,800
cases oh that special page it always

00:07:36,030 --> 00:07:39,570
needs to be instantaneously updated

00:07:37,800 --> 00:07:42,659
let's always purge that maybe some

00:07:39,570 --> 00:07:44,139
something something like that so very

00:07:42,659 --> 00:07:48,249
clearly this is

00:07:44,139 --> 00:07:49,659
I deal and it's also impossible for less

00:07:48,249 --> 00:07:51,999
advanced users than the ones in this

00:07:49,659 --> 00:07:53,499
audience probably to even set up so

00:07:51,999 --> 00:07:55,599
first a negated you send the second

00:07:53,499 --> 00:07:57,789
problem we had also two possible

00:07:55,599 --> 00:07:59,889
solutions you could use a separate

00:07:57,789 --> 00:08:01,330
domain for logging in and doing a

00:07:59,889 --> 00:08:03,789
dedicated user stuff like creating

00:08:01,330 --> 00:08:05,770
content and modifying contents or you

00:08:03,789 --> 00:08:08,830
could use a CDN as a pass-through so the

00:08:05,770 --> 00:08:10,689
CDN would just talk to the origin not

00:08:08,830 --> 00:08:12,460
make any changes not make not to any

00:08:10,689 --> 00:08:14,800
caching and just relay it to the end

00:08:12,460 --> 00:08:17,939
user but that is also not ideal because

00:08:14,800 --> 00:08:20,439
it means nothing is cached it's just

00:08:17,939 --> 00:08:23,500
providing some level of benefit but it's

00:08:20,439 --> 00:08:27,340
very limited and it's not what we would

00:08:23,500 --> 00:08:29,169
like to see happen so in Drupal aids we

00:08:27,340 --> 00:08:31,210
set out to solve these problems because

00:08:29,169 --> 00:08:32,949
we were the heck's are not nice we want

00:08:31,210 --> 00:08:35,260
to solve it by having lotsa X and having

00:08:32,949 --> 00:08:37,120
a better architecture and so that the

00:08:35,260 --> 00:08:40,120
two things that are key in validation

00:08:37,120 --> 00:08:42,250
and authenticated users have also very

00:08:40,120 --> 00:08:44,829
clear solutions for invalidation we have

00:08:42,250 --> 00:08:47,410
cash tags and for authenticate users we

00:08:44,829 --> 00:08:49,690
have cash contexts and cash tags our

00:08:47,410 --> 00:08:52,750
data dependencies they declare they

00:08:49,690 --> 00:08:55,449
declaratively state what's a piece of

00:08:52,750 --> 00:08:57,579
contents depends upon so that when that

00:08:55,449 --> 00:09:00,329
thing it depends upon is modified we

00:08:57,579 --> 00:09:04,360
know which responses are affected

00:09:00,329 --> 00:09:06,640
because cash tags bubble from the actual

00:09:04,360 --> 00:09:08,769
contents up to the response level so for

00:09:06,640 --> 00:09:10,690
a given response we know all of the cash

00:09:08,769 --> 00:09:13,390
tags all of the things it depends on and

00:09:10,690 --> 00:09:15,880
therefore we can invalidate buy it cash

00:09:13,390 --> 00:09:17,320
context are different but kind of

00:09:15,880 --> 00:09:19,420
similar in that they also capture

00:09:17,320 --> 00:09:21,699
dependencies but it's not dependencies

00:09:19,420 --> 00:09:24,310
on a particular bit of data it is

00:09:21,699 --> 00:09:25,930
dependencies on a aspect of the requests

00:09:24,310 --> 00:09:29,019
on a request context so for example

00:09:25,930 --> 00:09:30,880
maybe you are logged in as an admin user

00:09:29,019 --> 00:09:33,459
maybe you're a content editor maybe

00:09:30,880 --> 00:09:35,980
you're a user with elevated commenting

00:09:33,459 --> 00:09:38,730
permissions or something like that it is

00:09:35,980 --> 00:09:42,190
important to vary by those different

00:09:38,730 --> 00:09:43,990
levels of permissions because they are

00:09:42,190 --> 00:09:45,490
supposed to get different responses

00:09:43,990 --> 00:09:47,740
because you have different capabilities

00:09:45,490 --> 00:09:50,260
different permissions and so that's what

00:09:47,740 --> 00:09:52,569
cash context set out to solve and so

00:09:50,260 --> 00:09:54,110
cash tags allow you to invalidate a

00:09:52,569 --> 00:09:57,050
certain tag

00:09:54,110 --> 00:09:59,029
and when drupal does that we can relay

00:09:57,050 --> 00:10:01,430
that to the CDN so let us see Dionne

00:09:59,029 --> 00:10:03,260
also invalidates it cash contacts on the

00:10:01,430 --> 00:10:06,440
other hand allow us to know what's to

00:10:03,260 --> 00:10:09,800
vary by it maybe it is permissions maybe

00:10:06,440 --> 00:10:11,540
it is a query argument in the URL maybe

00:10:09,800 --> 00:10:13,310
it is the current interface languages

00:10:11,540 --> 00:10:16,550
lots of things and we need to know the

00:10:13,310 --> 00:10:18,740
things it varies by and if it varies too

00:10:16,550 --> 00:10:21,380
much because sometimes if something is

00:10:18,740 --> 00:10:23,600
specific to the current session or the

00:10:21,380 --> 00:10:25,490
current user then it's not really worth

00:10:23,600 --> 00:10:27,769
caching right because we would end up

00:10:25,490 --> 00:10:29,899
creating a million variations of the

00:10:27,769 --> 00:10:32,420
exact same response and nobody is

00:10:29,899 --> 00:10:34,700
actually going to benefit from that so

00:10:32,420 --> 00:10:36,950
in that case what Drupal 8 is capable of

00:10:34,700 --> 00:10:39,980
doing is automatically extracting that

00:10:36,950 --> 00:10:42,920
part of the page that is too dynamic not

00:10:39,980 --> 00:10:45,500
cash it but put a placeholder in instead

00:10:42,920 --> 00:10:48,019
then the entire page is scheduled again

00:10:45,500 --> 00:10:50,570
doesn't need to vary by user but can be

00:10:48,019 --> 00:10:53,570
cached across users and that allows us

00:10:50,570 --> 00:10:55,790
to them replace the placeholder at a

00:10:53,570 --> 00:10:58,940
later stage and Fabian will be demoing

00:10:55,790 --> 00:11:01,279
that later so cash tags and complex are

00:10:58,940 --> 00:11:03,500
the two key things that allow us to do

00:11:01,279 --> 00:11:05,660
very interesting things and they are

00:11:03,500 --> 00:11:08,089
exposed on every Drupal response as the

00:11:05,660 --> 00:11:12,140
X triple cash tags and contexts headers

00:11:08,089 --> 00:11:15,470
so let's dive into a demo right away I'm

00:11:12,140 --> 00:11:17,990
going to be demoing CDNs bliss anonymous

00:11:15,470 --> 00:11:20,630
traffic and that uses just cash tags

00:11:17,990 --> 00:11:23,180
because Drupal assumes and it's true

00:11:20,630 --> 00:11:26,660
word probably the vast majority of of

00:11:23,180 --> 00:11:29,060
all websites that all anonymous users

00:11:26,660 --> 00:11:31,310
get essentially the same responses so

00:11:29,060 --> 00:11:33,110
there is no variation so there is no

00:11:31,310 --> 00:11:34,880
need to rakesh contexts there's only

00:11:33,110 --> 00:11:38,180
need for cash tax so that we know when

00:11:34,880 --> 00:11:41,089
content has changed Fabian is going to

00:11:38,180 --> 00:11:43,339
be demoing authenticated user traffic so

00:11:41,089 --> 00:11:45,980
this is demoing using this demo is built

00:11:43,339 --> 00:11:47,899
using triple a bit of 15 so the previous

00:11:45,980 --> 00:11:50,120
one the one that cut out some time ago

00:11:47,899 --> 00:11:52,070
the clerk flower module which is sadly

00:11:50,120 --> 00:11:54,440
not yet on Drupal a dork it's currently

00:11:52,070 --> 00:11:57,019
on github it will be moved to travel dog

00:11:54,440 --> 00:11:59,250
as soon as the current project owner

00:11:57,019 --> 00:12:01,620
response

00:11:59,250 --> 00:12:03,810
the clerk flower SD game to be able to

00:12:01,620 --> 00:12:11,190
talk to CloudFlare and the CloudFlare

00:12:03,810 --> 00:12:13,200
account so let's dive into it so I'm

00:12:11,190 --> 00:12:15,060
installing that this is really from

00:12:13,200 --> 00:12:17,610
scratch just to show you how fast it can

00:12:15,060 --> 00:12:19,740
go so first off we install Drupal I

00:12:17,610 --> 00:12:21,090
don't think I need to explain much here

00:12:19,740 --> 00:12:25,140
if you haven't seen the Drupal 8

00:12:21,090 --> 00:12:27,230
installer yet here you go just creating

00:12:25,140 --> 00:12:30,060
a side filling out some defaults and

00:12:27,230 --> 00:12:32,970
here we go we have Drupal 8 installed

00:12:30,060 --> 00:12:35,820
next step is to use composer to pull in

00:12:32,970 --> 00:12:37,560
the libraries that Drupal 8 uses using

00:12:35,820 --> 00:12:39,360
composers so that we can also require

00:12:37,560 --> 00:12:42,720
which is what i'm doing here the cloud

00:12:39,360 --> 00:12:45,240
player sdk so this is basically using

00:12:42,720 --> 00:12:47,630
composer with drupal aids and so all our

00:12:45,240 --> 00:12:49,500
libraries we have now using composer and

00:12:47,630 --> 00:12:52,230
currently that still requires us to

00:12:49,500 --> 00:12:54,950
update the autoloader with this very

00:12:52,230 --> 00:12:57,890
minor change so that it uses simply

00:12:54,950 --> 00:13:00,840
composers libraries instead of triples

00:12:57,890 --> 00:13:03,780
that's all of all the basic stuff next

00:13:00,840 --> 00:13:05,400
we install the cloud flower module which

00:13:03,780 --> 00:13:07,140
is also nothing you if you haven't seen

00:13:05,400 --> 00:13:11,490
the Drupal 8 module installation you I

00:13:07,140 --> 00:13:14,010
ads here you go configuring it there's

00:13:11,490 --> 00:13:15,900
two tabs their API credentials in zone

00:13:14,010 --> 00:13:17,880
settings but we don't care about the

00:13:15,900 --> 00:13:20,910
second thing only the API credentials

00:13:17,880 --> 00:13:24,000
matter so we go get the API key copied

00:13:20,910 --> 00:13:27,450
it over and enter the email address for

00:13:24,000 --> 00:13:29,100
the accounts and hit save and we're done

00:13:27,450 --> 00:13:31,650
on the Drupal site this is all you have

00:13:29,100 --> 00:13:34,890
to do the next thing we have to do is on

00:13:31,650 --> 00:13:37,320
the cloud flareside go and create a page

00:13:34,890 --> 00:13:39,660
rule and the page rule tells cloudflare

00:13:37,320 --> 00:13:41,610
how to deal with incoming risky requests

00:13:39,660 --> 00:13:44,070
and how to catch them so in this case

00:13:41,610 --> 00:13:45,839
i'm using the domain cash tags or demoed

00:13:44,070 --> 00:13:48,060
at wembley versus come it's important

00:13:45,839 --> 00:13:49,320
that you a day / asterisk there because

00:13:48,060 --> 00:13:51,030
otherwise it will only catch your front

00:13:49,320 --> 00:13:53,040
page we wanted to catch the entire site

00:13:51,030 --> 00:13:55,650
we wanted to catch everything so

00:13:53,040 --> 00:13:57,900
including dynamic content so HTML we

00:13:55,650 --> 00:14:01,500
wanted to respect or existing headers

00:13:57,900 --> 00:14:03,390
the header is a Drupal emits and we want

00:14:01,500 --> 00:14:06,630
to make sure that users can actually log

00:14:03,390 --> 00:14:08,760
in which is pretty important so we go

00:14:06,630 --> 00:14:10,709
into our triple installation and figure

00:14:08,760 --> 00:14:12,480
out it's the name of the cookie that

00:14:10,709 --> 00:14:12,870
this triple site uses because every

00:14:12,480 --> 00:14:15,830
Drupal

00:14:12,870 --> 00:14:18,570
or previous version uses a unique

00:14:15,830 --> 00:14:20,460
session cookie name and so we just have

00:14:18,570 --> 00:14:23,400
to tell CloudFlare this is the name for

00:14:20,460 --> 00:14:25,650
the session cookie that my size uses and

00:14:23,400 --> 00:14:28,830
I disable all of the other special sauce

00:14:25,650 --> 00:14:33,210
which dynamically a magically enhances

00:14:28,830 --> 00:14:36,360
performance or responsiveness and so on

00:14:33,210 --> 00:14:39,660
I prefer to disable them so that they

00:14:36,360 --> 00:14:41,760
can't possibly interfere so here we go

00:14:39,660 --> 00:14:44,970
that's all and the four things that

00:14:41,760 --> 00:14:48,450
mattered most are the ones at very

00:14:44,970 --> 00:14:51,029
beginning so that's custom caching make

00:14:48,450 --> 00:14:52,710
sure to catch everything and make sure

00:14:51,029 --> 00:14:56,850
that the headers are respected that we

00:14:52,710 --> 00:14:58,500
Easons and that's it and so next we want

00:14:56,850 --> 00:15:00,870
to make sure that the configuration is

00:14:58,500 --> 00:15:03,000
actually working because that's quite

00:15:00,870 --> 00:15:04,589
important we have to verify or

00:15:03,000 --> 00:15:06,120
understanding of how it is working and

00:15:04,589 --> 00:15:08,100
right now it shouldn't actually be doing

00:15:06,120 --> 00:15:10,920
anything yet because we haven't enabled

00:15:08,100 --> 00:15:13,110
it yet so let's check and we don't see

00:15:10,920 --> 00:15:15,390
any cloudflare specific headers in there

00:15:13,110 --> 00:15:17,760
right now so that's good we go back to

00:15:15,390 --> 00:15:20,400
cloudflare to the dns panel or

00:15:17,760 --> 00:15:23,100
configuration page and enable it so that

00:15:20,400 --> 00:15:26,279
make the clouds turn orange that's it

00:15:23,100 --> 00:15:29,459
now it's enabled and now we can verify

00:15:26,279 --> 00:15:30,810
that it is doing something so we still

00:15:29,459 --> 00:15:33,089
see that the cache control headers bad

00:15:30,810 --> 00:15:36,540
but the server is saying cloudflare

00:15:33,089 --> 00:15:37,830
engine X but this means currently that

00:15:36,540 --> 00:15:40,740
it cannot be cashed so we want to

00:15:37,830 --> 00:15:42,510
configure a max age so that CloudFlare

00:15:40,740 --> 00:15:45,029
just like any proxy stole that it is

00:15:42,510 --> 00:15:46,310
allow it to cash it at all so in Drupal

00:15:45,029 --> 00:15:49,680
we want to go and configure the

00:15:46,310 --> 00:15:52,940
performance settings page the max age

00:15:49,680 --> 00:15:55,410
for cashing in the browser or in a proxy

00:15:52,940 --> 00:15:58,080
so right now we can catch up to five

00:15:55,410 --> 00:16:00,089
minutes and next we want to verify that

00:15:58,080 --> 00:16:01,890
this is working so we hit save and

00:16:00,089 --> 00:16:04,080
immediately we see that there is a cache

00:16:01,890 --> 00:16:06,150
miss and indeed that it's showing up and

00:16:04,080 --> 00:16:08,730
so if we had a cache miss another hits

00:16:06,150 --> 00:16:11,610
another request should make it into a

00:16:08,730 --> 00:16:14,070
cache hits and it is so right now we're

00:16:11,610 --> 00:16:17,379
already up and running but let's verify

00:16:14,070 --> 00:16:20,819
that really everything is working so

00:16:17,379 --> 00:16:20,819
let's quickly login

00:16:26,850 --> 00:16:30,170
and yes llamas are awesome

00:16:30,800 --> 00:16:35,120
and so you could see that I was able to

00:16:32,870 --> 00:16:36,920
have the logout and login links and the

00:16:35,120 --> 00:16:38,779
common form is personalized so I'm

00:16:36,920 --> 00:16:41,959
actually logged in so logging out again

00:16:38,779 --> 00:16:44,480
for the next parts so we now want to

00:16:41,959 --> 00:16:46,279
verify that actually works well now it's

00:16:44,480 --> 00:16:48,709
working to some extent already but

00:16:46,279 --> 00:16:51,130
that's not really impressive yet so

00:16:48,709 --> 00:16:55,750
let's go and edit some contents and

00:16:51,130 --> 00:16:55,750
change the llama for an even nicer one

00:16:57,070 --> 00:17:00,850
rainbow llamas are the best

00:17:07,600 --> 00:17:11,620
yeah and I forgot to enter alternative

00:17:09,970 --> 00:17:17,079
text alternative texts important people

00:17:11,620 --> 00:17:19,120
and so now when we actually hit save

00:17:17,079 --> 00:17:20,949
it's talking to the CDN making sure that

00:17:19,120 --> 00:17:23,530
the cash tag on the CDN is also purged

00:17:20,949 --> 00:17:28,000
and if we go to the node page then we

00:17:23,530 --> 00:17:30,760
see indeed we have or rainbow doing

00:17:28,000 --> 00:17:32,950
something a llama and now we want to

00:17:30,760 --> 00:17:34,480
verify that it works very well so right

00:17:32,950 --> 00:17:37,000
now we see that we have instantaneous

00:17:34,480 --> 00:17:38,620
invalidation already but let's check

00:17:37,000 --> 00:17:41,140
that it's actually doing what a Syrian

00:17:38,620 --> 00:17:44,169
is supposed to do which is provide fast

00:17:41,140 --> 00:17:47,820
responses all around the world so I went

00:17:44,169 --> 00:17:50,590
to 20 bytes pulse which allows me to

00:17:47,820 --> 00:17:52,630
perform an DNS query or an HTTP query

00:17:50,590 --> 00:17:56,370
from many locations around the world 88

00:17:52,630 --> 00:18:00,370
currently so I'm hitting my demo site

00:17:56,370 --> 00:18:01,630
from this service from 88 different

00:18:00,370 --> 00:18:04,270
locations around well and it's a regular

00:18:01,630 --> 00:18:05,740
get request to the front page so right

00:18:04,270 --> 00:18:07,720
now the response time on average around

00:18:05,740 --> 00:18:10,750
the world is half a second which is not

00:18:07,720 --> 00:18:14,110
bad but not amazing and let's take a

00:18:10,750 --> 00:18:16,600
quick look at the headers in Australia I

00:18:14,110 --> 00:18:19,539
wasn't Belgium so I definitely was not

00:18:16,600 --> 00:18:21,730
there but because of a previous tests I

00:18:19,539 --> 00:18:23,020
already had filled the cash previously

00:18:21,730 --> 00:18:25,480
but it had expired so you saw the

00:18:23,020 --> 00:18:30,520
expired header but now when hitting it

00:18:25,480 --> 00:18:32,559
again it should show a cache hit and it

00:18:30,520 --> 00:18:34,120
should in theory be faster because it's

00:18:32,559 --> 00:18:36,460
a CD on I supposed to catch things there

00:18:34,120 --> 00:18:41,070
we go it's twice as fast now on average

00:18:36,460 --> 00:18:41,070
around the world and it's a cache hit

00:18:46,040 --> 00:18:51,500
and I will let's do the very important

00:18:49,820 --> 00:18:54,020
test which is we're going to modify your

00:18:51,500 --> 00:18:55,490
view and make sure that it emits

00:18:54,020 --> 00:18:58,160
something that we can easily detect in

00:18:55,490 --> 00:19:00,680
that tool which is we're going to modify

00:18:58,160 --> 00:19:03,290
the status codes to the most awesome

00:19:00,680 --> 00:19:08,510
status code there is which is for 18 I'm

00:19:03,290 --> 00:19:10,010
a teapot and hit save and again because

00:19:08,510 --> 00:19:11,270
I'm saving something the cache tag is

00:19:10,010 --> 00:19:13,520
being evaluated both on the side of

00:19:11,270 --> 00:19:17,420
Drupal and on the CDM let's run a test

00:19:13,520 --> 00:19:22,070
again and let's see whether it's updated

00:19:17,420 --> 00:19:25,160
everywhere so we're waiting for the

00:19:22,070 --> 00:19:26,630
results from all those locations and

00:19:25,160 --> 00:19:28,160
there we go we see that in the middle

00:19:26,630 --> 00:19:30,770
column everything is or most of the

00:19:28,160 --> 00:19:32,390
things are turning red so everything or

00:19:30,770 --> 00:19:33,980
almost everything has been invalidated

00:19:32,390 --> 00:19:37,850
already there is a cache miss as

00:19:33,980 --> 00:19:41,600
expected and eighty-six percent was

00:19:37,850 --> 00:19:43,520
updated within about a second so very

00:19:41,600 --> 00:19:45,800
fast in validation all around the world

00:19:43,520 --> 00:19:47,660
thanks to cache dykes of just the things

00:19:45,800 --> 00:19:50,690
that you need to be invalidated and

00:19:47,660 --> 00:19:53,390
nothing more so there is no more need

00:19:50,690 --> 00:19:56,300
thanks to cache tags for having to purge

00:19:53,390 --> 00:19:57,800
every in the vet every individual URL

00:19:56,300 --> 00:20:01,130
you don't have to figure out the

00:19:57,800 --> 00:20:03,800
individual URLs anymore it just works

00:20:01,130 --> 00:20:06,800
it's transparent simply because of a

00:20:03,800 --> 00:20:08,980
tool a bit of metadata that we didn't

00:20:06,800 --> 00:20:08,980
have before

00:20:14,940 --> 00:20:22,460
and I cannot go out of full screen mode

00:20:18,000 --> 00:20:25,740
that's awesome so this you can do today

00:20:22,460 --> 00:20:28,560
it is simple as was hopefully clear in

00:20:25,740 --> 00:20:30,120
this demo video I didn't do anything

00:20:28,560 --> 00:20:32,820
complex i clicked a few things together

00:20:30,120 --> 00:20:34,350
i entered an API key it entered a few

00:20:32,820 --> 00:20:36,420
bits of information it's cached

00:20:34,350 --> 00:20:38,010
worldwide and you can do this today with

00:20:36,420 --> 00:20:42,450
our cloud edge or cloak flower

00:20:38,010 --> 00:20:43,710
enterprise but that's today this is not

00:20:42,450 --> 00:20:46,800
something that is limited to any

00:20:43,710 --> 00:20:48,720
specific service any specific CDN so in

00:20:46,800 --> 00:20:50,970
the near future we should expect this to

00:20:48,720 --> 00:20:52,980
become trivial as hosting providers step

00:20:50,970 --> 00:20:55,500
up and make this more integrated make it

00:20:52,980 --> 00:20:59,160
even simpler it should be affordable for

00:20:55,500 --> 00:21:01,260
all definitely for all in the sense that

00:20:59,160 --> 00:21:03,060
you can replicate the same system in

00:21:01,260 --> 00:21:05,040
varnish so if you have a vorange

00:21:03,060 --> 00:21:08,370
instance because you're a smaller

00:21:05,040 --> 00:21:09,990
website and many cheap hosting providers

00:21:08,370 --> 00:21:12,030
are stepping up and providing varnish

00:21:09,990 --> 00:21:13,230
then all of this can happen within

00:21:12,030 --> 00:21:15,090
varnish you don't have the global

00:21:13,230 --> 00:21:16,440
network then but it's still going to be

00:21:15,090 --> 00:21:18,810
much faster you're not hitting triple

00:21:16,440 --> 00:21:20,610
every single time and that is something

00:21:18,810 --> 00:21:22,770
that is a for overall but for many

00:21:20,610 --> 00:21:25,860
Syrians are also becoming more and more

00:21:22,770 --> 00:21:27,780
affordable so many sites will be able to

00:21:25,860 --> 00:21:30,540
use a worldwide CD and make their sites

00:21:27,780 --> 00:21:32,700
fast around the world which is something

00:21:30,540 --> 00:21:35,370
that some years ago was unthinkable and

00:21:32,700 --> 00:21:36,750
now you don't have to know you don't

00:21:35,370 --> 00:21:39,900
need a whole lot of technical knowledge

00:21:36,750 --> 00:21:41,700
anymore nor a lot of infrastructure to

00:21:39,900 --> 00:21:44,220
figure out which URLs to invalidate

00:21:41,700 --> 00:21:46,710
which in your l's to purge because that

00:21:44,220 --> 00:21:48,630
was a painful bit also for people who

00:21:46,710 --> 00:21:51,200
are deeply technical it was just purely

00:21:48,630 --> 00:21:53,820
painful and that is a solved problem now

00:21:51,200 --> 00:21:56,160
so in validation is now a soft problem

00:21:53,820 --> 00:21:58,740
and it benefits everyone small and big

00:21:56,160 --> 00:22:03,200
sites and now it's time for something

00:21:58,740 --> 00:22:03,200
even cooler Fabian is going to show you

00:22:03,470 --> 00:22:11,220
yes so this was an animist traffic

00:22:08,009 --> 00:22:14,220
mostly as I'm said that's also possible

00:22:11,220 --> 00:22:17,220
to do this fastly with another CDN but

00:22:14,220 --> 00:22:19,200
that's even also working with the Amazon

00:22:17,220 --> 00:22:22,379
Cloud so there's lots of possibilities

00:22:19,200 --> 00:22:26,309
and Willie cash tags are making it

00:22:22,379 --> 00:22:28,860
possible to I do many things with him a

00:22:26,309 --> 00:22:31,529
little honest he made it was like he

00:22:28,860 --> 00:22:34,049
worked two years on Drupal 8 to ensure

00:22:31,529 --> 00:22:36,119
that everything every object everything

00:22:34,049 --> 00:22:39,029
that's when it is having these cash tax

00:22:36,119 --> 00:22:41,039
so if you're speaking with developers

00:22:39,029 --> 00:22:43,259
you're working with tell them if you're

00:22:41,039 --> 00:22:45,720
developing for Drupal 8 make sure to

00:22:43,259 --> 00:22:47,159
ensure that everything that is in any

00:22:45,720 --> 00:22:49,649
way rendered is having the wide

00:22:47,159 --> 00:22:52,080
invalidation information that is very

00:22:49,649 --> 00:22:54,149
very key on the other hand if you forget

00:22:52,080 --> 00:22:56,429
you will get back because caching is so

00:22:54,149 --> 00:22:59,190
much ingrained in the system that now

00:22:56,429 --> 00:23:02,609
I'm you'll find the backs kinda at day 0

00:22:59,190 --> 00:23:04,499
of development and not when the site has

00:23:02,609 --> 00:23:06,539
gone life has performance problems and

00:23:04,499 --> 00:23:09,239
then you are like now we need to enable

00:23:06,539 --> 00:23:12,559
caching ye and then doesn't work so

00:23:09,239 --> 00:23:16,109
that's great so the motivation for

00:23:12,559 --> 00:23:17,820
scientific etting is the following we

00:23:16,109 --> 00:23:20,279
have two very common scenario that women

00:23:17,820 --> 00:23:22,799
just showed we have only anonymous users

00:23:20,279 --> 00:23:25,200
we have a varnish will see the end it's

00:23:22,799 --> 00:23:29,100
fast that looks like this may have happy

00:23:25,200 --> 00:23:31,230
web server Oh are we have a CDN we have

00:23:29,100 --> 00:23:32,700
people from all around world they are

00:23:31,230 --> 00:23:36,450
going to the varnish and we have two

00:23:32,700 --> 00:23:38,869
heavy web service you met so everything

00:23:36,450 --> 00:23:42,600
is great the company is flourishing

00:23:38,869 --> 00:23:46,730
making good sales everything is perfect

00:23:42,600 --> 00:23:51,029
and they lived happily ever oh wait

00:23:46,730 --> 00:23:54,029
because one fateful day shopping cart

00:23:51,029 --> 00:23:55,970
was on to the side and then it looked

00:23:54,029 --> 00:23:59,340
like this

00:23:55,970 --> 00:24:01,500
so the side of slow the web server is

00:23:59,340 --> 00:24:04,020
really really unhappy and runs away

00:24:01,500 --> 00:24:06,030
screaming in terror in the web server

00:24:04,020 --> 00:24:08,760
ran away screaming in terror and was

00:24:06,030 --> 00:24:10,800
never to be found again hopefully that

00:24:08,760 --> 00:24:13,860
didn't happen to you so you don't

00:24:10,800 --> 00:24:16,590
believe me that that's realistic let's

00:24:13,860 --> 00:24:19,410
test that i'm going to show you so we

00:24:16,590 --> 00:24:22,730
have drupal 8 also naked users we're

00:24:19,410 --> 00:24:24,900
using 3d and fastest CDN but it's only

00:24:22,730 --> 00:24:27,180
pushing data through to my server

00:24:24,900 --> 00:24:30,930
because it's not catchable by default

00:24:27,180 --> 00:24:35,100
there's no specialties like that and

00:24:30,930 --> 00:24:40,010
we'll see how that looks again i'm using

00:24:35,100 --> 00:24:43,830
here this turbo bytes which will allow

00:24:40,010 --> 00:24:46,020
to see that and here i've put in the

00:24:43,830 --> 00:24:48,300
host name of that and here you can see

00:24:46,020 --> 00:24:50,940
the server and you can see county it's

00:24:48,300 --> 00:24:54,390
really bored shopping cart was just

00:24:50,940 --> 00:24:59,190
added and now we are running the test

00:24:54,390 --> 00:25:00,900
and yeah that's going some traffic

00:24:59,190 --> 00:25:04,260
coming in there's coming a lot of

00:25:00,900 --> 00:25:06,990
traffic in and now we have like lots and

00:25:04,260 --> 00:25:09,750
lots of apache processes the lord would

00:25:06,990 --> 00:25:12,030
go way up and but what's the most

00:25:09,750 --> 00:25:15,050
important thing is we have a response

00:25:12,030 --> 00:25:17,610
time of on everett 3.7 seconds and

00:25:15,050 --> 00:25:19,890
there's time to first by times of like

00:25:17,610 --> 00:25:22,500
five seconds four seconds four second

00:25:19,890 --> 00:25:27,600
five seconds that its overall not great

00:25:22,500 --> 00:25:33,080
user experience in that and we can do an

00:25:27,600 --> 00:25:39,060
even better test we can use the a B tool

00:25:33,080 --> 00:25:42,030
for testing the performance and again we

00:25:39,060 --> 00:25:44,790
are to doing hundred concurrent requests

00:25:42,030 --> 00:25:48,240
a hundred different users coming at the

00:25:44,790 --> 00:25:50,190
same time 300 of those and you can again

00:25:48,240 --> 00:25:52,200
see that's the service really starting

00:25:50,190 --> 00:25:55,290
to sweat I know that was not average of

00:25:52,200 --> 00:25:57,360
one dot 12 and fortunately I have enough

00:25:55,290 --> 00:25:59,280
RAM and that works but you can see

00:25:57,360 --> 00:26:02,520
that's an even worse user experience

00:25:59,280 --> 00:26:06,909
some are getting like maximum of nine

00:26:02,520 --> 00:26:10,119
seconds and but what you can also see is

00:26:06,909 --> 00:26:13,450
at the minimum time is one at 86

00:26:10,119 --> 00:26:17,220
millions so the site should be fast it's

00:26:13,450 --> 00:26:20,769
fast but it's served by drupal and

00:26:17,220 --> 00:26:22,989
that's a problem here in that that

00:26:20,769 --> 00:26:24,909
that's not the problem of Drupal but

00:26:22,989 --> 00:26:27,190
that's just that it's that the

00:26:24,909 --> 00:26:29,739
infrastructure I've provided here is I

00:26:27,190 --> 00:26:31,539
could put in five servers 10 servers or

00:26:29,739 --> 00:26:35,259
whatever then I could probably easily

00:26:31,539 --> 00:26:40,779
hold the Lord so it's a scalable problem

00:26:35,259 --> 00:26:42,190
in that but in this case we have the

00:26:40,779 --> 00:26:44,379
shopping cart may have a bad user

00:26:42,190 --> 00:26:48,429
experience because we were relying on

00:26:44,379 --> 00:26:50,619
our CDN so the site is fast around

00:26:48,429 --> 00:26:54,399
hundred 80 milliseconds better user

00:26:50,619 --> 00:26:58,450
experience is poor so I don't want that

00:26:54,399 --> 00:27:00,580
I really don't want that so let's ask a

00:26:58,450 --> 00:27:06,690
question like trees today in the keynote

00:27:00,580 --> 00:27:11,409
We Need to Talk why does that happen so

00:27:06,690 --> 00:27:14,429
general pages can be split up in two

00:27:11,409 --> 00:27:17,679
different sections in the one section is

00:27:14,429 --> 00:27:19,570
static parts that are seldomly changing

00:27:17,679 --> 00:27:22,239
weather there may be changing weather

00:27:19,570 --> 00:27:24,489
that that are mainly very ating by the

00:27:22,239 --> 00:27:26,529
page they are on like if you're reading

00:27:24,489 --> 00:27:29,229
an article that would obviously be the

00:27:26,529 --> 00:27:31,239
article and then there's this very very

00:27:29,229 --> 00:27:34,090
highly dynamic things like dynamic

00:27:31,239 --> 00:27:37,029
blocks personalized content dynamic

00:27:34,090 --> 00:27:39,999
command forums where the user name is

00:27:37,029 --> 00:27:42,489
even in hey user have a great experience

00:27:39,999 --> 00:27:44,950
please command and that is what's

00:27:42,489 --> 00:27:47,109
slowing the whole page down obviously

00:27:44,950 --> 00:27:49,749
you could now go to JavaScript

00:27:47,109 --> 00:27:53,379
frameworks we act whatever the newest

00:27:49,749 --> 00:27:56,139
buzzword is and do that in JavaScript

00:27:53,379 --> 00:27:59,289
but then you again has a big investment

00:27:56,139 --> 00:28:02,499
to do that so and also pages are way too

00:27:59,289 --> 00:28:04,989
dynamic so if you think you have 100,000

00:28:02,499 --> 00:28:06,820
pages no problem fits and varnished but

00:28:04,989 --> 00:28:08,830
then you have hundred users and then you

00:28:06,820 --> 00:28:14,169
have 10 million combinations and that

00:28:08,830 --> 00:28:23,409
means that users have a cache hit is

00:28:14,169 --> 00:28:25,869
very very improbable in that so so many

00:28:23,409 --> 00:28:29,109
combinations bad cache hit ratios met

00:28:25,869 --> 00:28:31,029
that's not what we want so we make the

00:28:29,109 --> 00:28:37,629
pages less dynamic and the problem is

00:28:31,029 --> 00:28:40,149
solved wait a minute not really the web

00:28:37,629 --> 00:28:42,850
3.0 is all about the personalized

00:28:40,149 --> 00:28:45,129
experience it's all about content

00:28:42,850 --> 00:28:47,289
directly tailor to the user's needs it's

00:28:45,129 --> 00:28:50,379
about authenticated users it's about

00:28:47,289 --> 00:28:54,129
product placement it's about related

00:28:50,379 --> 00:28:57,279
articles that's very important but

00:28:54,129 --> 00:28:59,409
that's that is that dynamic content that

00:28:57,279 --> 00:29:04,149
is slow that is providing value to the

00:28:59,409 --> 00:29:06,669
side and also any dynamic pages I use

00:29:04,149 --> 00:29:08,590
the same as was I'm just going back to

00:29:06,669 --> 00:29:10,899
the eighty percent of using plain HTML

00:29:08,590 --> 00:29:14,799
and please don't forget about my

00:29:10,899 --> 00:29:17,529
shopping cart so fortunately Drupal 8

00:29:14,799 --> 00:29:22,359
has a solution for that and it's already

00:29:17,529 --> 00:29:26,409
in core this is in core placeholders and

00:29:22,359 --> 00:29:28,509
auto placeholder ring that means no more

00:29:26,409 --> 00:29:30,309
of this no more dynamic blocks that are

00:29:28,509 --> 00:29:33,970
making things bad and static content

00:29:30,309 --> 00:29:36,159
because Drupal 8 now's your page when

00:29:33,970 --> 00:29:38,739
dhruva 8 is randomizing a page it nails

00:29:36,159 --> 00:29:42,489
for everything that it's rendering that

00:29:38,739 --> 00:29:44,289
how it can be cached so the main content

00:29:42,489 --> 00:29:46,779
can be cashed by user permissions and

00:29:44,289 --> 00:29:49,269
the URL because it varies on those two

00:29:46,779 --> 00:29:51,519
things there's a normal block that just

00:29:49,269 --> 00:29:54,759
varies on the user permissions so we can

00:29:51,519 --> 00:29:57,389
directly include that with the rest of

00:29:54,759 --> 00:29:59,980
the content it doesn't matter if set

00:29:57,389 --> 00:30:01,629
redundantly on many URLs it doesn't

00:29:59,980 --> 00:30:04,269
matter but there's this one shopping

00:30:01,629 --> 00:30:07,029
cart and that's user cast it's just for

00:30:04,269 --> 00:30:09,369
the user and because Drupal 8 now's your

00:30:07,029 --> 00:30:12,009
page it can do something cool it can

00:30:09,369 --> 00:30:14,109
just place holder it and that's

00:30:12,009 --> 00:30:18,669
happening automatically out of the box

00:30:14,109 --> 00:30:22,749
no configuration needed you are getting

00:30:18,669 --> 00:30:24,460
placeholder ring and the rest is cached

00:30:22,749 --> 00:30:27,030
transparently so whenever something

00:30:24,460 --> 00:30:32,420
declares itself at the moment

00:30:27,030 --> 00:30:37,290
s-max h0 of what is in drupal 8 hat or

00:30:32,420 --> 00:30:40,680
uncatchable we are it's casual only by

00:30:37,290 --> 00:30:42,990
user then we don't even need to render

00:30:40,680 --> 00:30:46,050
it because whenever we retrieve it from

00:30:42,990 --> 00:30:48,750
the cash we see oh we see that's not

00:30:46,050 --> 00:30:51,510
catchable be directly put a placeholder

00:30:48,750 --> 00:30:53,490
in there and we've given great tools to

00:30:51,510 --> 00:30:56,820
the developers that are using that

00:30:53,490 --> 00:30:59,310
system to be able to specify things so

00:30:56,820 --> 00:31:01,440
performance tuning could be in a way as

00:30:59,310 --> 00:31:04,170
simple as oh let's configure that and

00:31:01,440 --> 00:31:06,960
just need this dependency and then a

00:31:04,170 --> 00:31:11,070
Drupal 8 can figure out the rest so it's

00:31:06,960 --> 00:31:13,470
both automatic and tunable and that

00:31:11,070 --> 00:31:16,290
means we can now use is I and then we

00:31:13,470 --> 00:31:19,380
can use the ESI 8x monix that's a fork

00:31:16,290 --> 00:31:22,290
that's not yet released hoping it will

00:31:19,380 --> 00:31:24,810
come out around the time that 8.1 comes

00:31:22,290 --> 00:31:26,370
out or maybe it will even be an

00:31:24,810 --> 00:31:31,370
eight-point and we're still discussing

00:31:26,370 --> 00:31:34,200
that there's each side includes yes I

00:31:31,370 --> 00:31:36,530
replace placeholders at the edge those

00:31:34,200 --> 00:31:39,840
using our sketch is I modules now that

00:31:36,530 --> 00:31:43,200
it just means we have some very special

00:31:39,840 --> 00:31:46,260
tags in this case it's using hashes and

00:31:43,200 --> 00:31:48,450
then wherever that place holder is it's

00:31:46,260 --> 00:31:50,310
doing that so it is doing the same thing

00:31:48,450 --> 00:31:54,330
as Drupal did Drupal Creed the

00:31:50,310 --> 00:31:56,400
placeholder its standard from a standard

00:31:54,330 --> 00:31:58,380
perspective of what Drupal at the moment

00:31:56,400 --> 00:32:00,510
does is it's just replacing those

00:31:58,380 --> 00:32:02,520
placeholders transparently so you never

00:32:00,510 --> 00:32:04,380
see that except that the pages get a

00:32:02,520 --> 00:32:08,460
little faster thanks to dynamic page

00:32:04,380 --> 00:32:10,980
cache but if we transfer this

00:32:08,460 --> 00:32:13,320
placeholder ring from Drupal out to the

00:32:10,980 --> 00:32:16,050
edge then we can tunnel II catch all

00:32:13,320 --> 00:32:19,380
those things at the edge as well and we

00:32:16,050 --> 00:32:22,500
can use is I was a CDN too so the demo 2

00:32:19,380 --> 00:32:25,680
is also indicated traffic jubilate beta

00:32:22,500 --> 00:32:28,830
5 15 fasting module firstly account

00:32:25,680 --> 00:32:31,570
provided by them over there

00:32:28,830 --> 00:32:34,029
fast it is from the community

00:32:31,570 --> 00:32:37,149
perspective mostly well known for

00:32:34,029 --> 00:32:38,860
powering ftp drupal.org so whenever you

00:32:37,149 --> 00:32:42,789
download the file that's currently going

00:32:38,860 --> 00:32:46,450
BF vastly and fastly very very much gave

00:32:42,789 --> 00:32:49,090
us help in optimizing the VCL getting

00:32:46,450 --> 00:32:51,490
all this code written and there will be

00:32:49,090 --> 00:32:53,740
easy for you pasi is very simple to set

00:32:51,490 --> 00:32:56,110
up you just fill out those three things

00:32:53,740 --> 00:32:58,899
configure your side to side now I'm

00:32:56,110 --> 00:33:00,429
server address like an IP address the

00:32:58,899 --> 00:33:02,679
domain name you want to use then you

00:33:00,429 --> 00:33:05,590
need to set up some dns as women showed

00:33:02,679 --> 00:33:08,830
and that it working with drupal 8 by

00:33:05,590 --> 00:33:11,950
standard out of the box in that you

00:33:08,830 --> 00:33:15,429
don't even need any custom vcl but if we

00:33:11,950 --> 00:33:17,230
want to have also indicated user caching

00:33:15,429 --> 00:33:19,179
then you need to upload a custom easier

00:33:17,230 --> 00:33:21,129
let's count is something that you need

00:33:19,179 --> 00:33:23,919
to measure support to gain that

00:33:21,129 --> 00:33:25,720
capability but they've provided us with

00:33:23,919 --> 00:33:29,049
that functionality so we were just

00:33:25,720 --> 00:33:33,460
uploading our fast the vcl and then it

00:33:29,049 --> 00:33:36,159
was working so let's see how that's

00:33:33,460 --> 00:33:41,409
working then so this is again my server

00:33:36,159 --> 00:33:45,909
here over there and turbo bites again

00:33:41,409 --> 00:33:48,700
and I've put a little catchable one

00:33:45,909 --> 00:33:51,220
there which is saying to my ears I

00:33:48,700 --> 00:33:53,649
strategy to actually work and before

00:33:51,220 --> 00:33:58,450
that just so that it was easier to demo

00:33:53,649 --> 00:34:01,720
and now we are running the tests and as

00:33:58,450 --> 00:34:03,279
we can see we need a moment wait for

00:34:01,720 --> 00:34:06,490
test results but on the server side

00:34:03,279 --> 00:34:10,230
nothing is happening it's all kinda in

00:34:06,490 --> 00:34:13,750
the CDN we have like response time of

00:34:10,230 --> 00:34:15,399
248 milliseconds and we have responses

00:34:13,750 --> 00:34:17,679
that are as low as like eight

00:34:15,399 --> 00:34:20,520
milliseconds time to first byte so

00:34:17,679 --> 00:34:22,750
there's a huge opportunity in using

00:34:20,520 --> 00:34:26,169
authenticated user caching at the edge

00:34:22,750 --> 00:34:28,829
to really not only being able to just

00:34:26,169 --> 00:34:32,290
use one server instead of many many many

00:34:28,829 --> 00:34:35,060
but also to really make the light I put

00:34:32,290 --> 00:34:37,940
the latency down we are using there

00:34:35,060 --> 00:34:41,120
and the other one is again a bee in that

00:34:37,940 --> 00:34:43,510
so also we have a before or after thing

00:34:41,120 --> 00:34:46,040
and both already finished so we have

00:34:43,510 --> 00:34:48,500
0.44 three seconds before it was like

00:34:46,040 --> 00:34:54,650
something like 14 seconds and we have a

00:34:48,500 --> 00:34:57,860
time / request of 1.46 have forced seven

00:34:54,650 --> 00:35:02,980
six milliseconds tempo quest and a total

00:34:57,860 --> 00:35:07,240
min of 45 time to first byte so that's

00:35:02,980 --> 00:35:10,820
totally great in that and for that um

00:35:07,240 --> 00:35:13,090
how that does work is we now have a bee

00:35:10,820 --> 00:35:15,860
web server again so we have the

00:35:13,090 --> 00:35:17,360
authentication cash per session so it's

00:35:15,860 --> 00:35:20,360
kind of the standard practice we're

00:35:17,360 --> 00:35:22,370
doing it we are asking drupal for all

00:35:20,360 --> 00:35:24,230
the cash contacts that have anything to

00:35:22,370 --> 00:35:26,870
do with the user was a session and

00:35:24,230 --> 00:35:29,420
because Drupal has not only cash context

00:35:26,870 --> 00:35:32,390
but also a cash context hierarchy we are

00:35:29,420 --> 00:35:36,170
able to reduce everything to just the

00:35:32,390 --> 00:35:38,300
user or the URL there was a very

00:35:36,170 --> 00:35:41,780
important architectural decision made in

00:35:38,300 --> 00:35:45,140
Drupal 8 and because we have that we can

00:35:41,780 --> 00:35:46,490
now catch the cash context which sounds

00:35:45,140 --> 00:35:48,500
a little funny but it means that

00:35:46,490 --> 00:35:50,150
whenever we are coming in to varnish we

00:35:48,500 --> 00:35:52,160
are kind of doing a little round trip to

00:35:50,150 --> 00:35:54,350
the server but because at round trip is

00:35:52,160 --> 00:35:56,960
cashed it takes less than one

00:35:54,350 --> 00:35:59,240
millisecond and then we have all the

00:35:56,960 --> 00:36:02,060
information available within varnish we

00:35:59,240 --> 00:36:04,940
have the UID we have the permissions

00:36:02,060 --> 00:36:06,740
hash we have the roles and now let's say

00:36:04,940 --> 00:36:08,960
you are building this one of those

00:36:06,740 --> 00:36:11,420
personalized sides and you have a block

00:36:08,960 --> 00:36:13,880
that is different based on the user's

00:36:11,420 --> 00:36:16,040
interests but you have a lot of users

00:36:13,880 --> 00:36:18,710
like hundred thousand millions of them

00:36:16,040 --> 00:36:20,600
and user interest can overlap so you

00:36:18,710 --> 00:36:23,690
want them to get the same content and

00:36:20,600 --> 00:36:26,030
then it's very simple you just declare a

00:36:23,690 --> 00:36:28,220
new cache context user interests it will

00:36:26,030 --> 00:36:30,530
automatically get exposed to varnish

00:36:28,220 --> 00:36:32,900
buns will be aware of it and minute

00:36:30,530 --> 00:36:37,460
blockers when not all it says is very

00:36:32,900 --> 00:36:39,410
true per user interest and that it then

00:36:37,460 --> 00:36:41,870
works out of the box so we have static

00:36:39,410 --> 00:36:43,610
content the dynamic content NBFC else

00:36:41,870 --> 00:36:46,269
and occasion cash possession and

00:36:43,610 --> 00:36:48,349
obviously our happy web server

00:36:46,269 --> 00:36:50,180
so yeah and besides we have a

00:36:48,349 --> 00:36:52,579
standardized solution for a complex

00:36:50,180 --> 00:36:56,029
problem it's within reach for

00:36:52,579 --> 00:37:00,920
ninety-nine percent still working out

00:36:56,029 --> 00:37:03,319
the last little details but this could

00:37:00,920 --> 00:37:06,049
really make it possible to kind of run

00:37:03,319 --> 00:37:09,019
almost all sides especially those

00:37:06,049 --> 00:37:12,710
authenticate directly on CDN no

00:37:09,019 --> 00:37:14,779
configuration needed and hopefully some

00:37:12,710 --> 00:37:19,069
hosting price will step up using these

00:37:14,779 --> 00:37:23,809
standard vcl I always like to see one

00:37:19,069 --> 00:37:30,619
vzl to rule them all and yeah with that

00:37:23,809 --> 00:37:32,839
we have another problem solved so I

00:37:30,619 --> 00:37:35,059
would like to call out one thing that

00:37:32,839 --> 00:37:37,279
Fabian didn't explicitly mention so the

00:37:35,059 --> 00:37:38,979
dynamic bits like for example a block

00:37:37,279 --> 00:37:45,319
that show is user interests or whatnot

00:37:38,979 --> 00:37:47,720
those are those are rendered vea ASI es

00:37:45,319 --> 00:37:50,390
I of course uses requests so it's just

00:37:47,720 --> 00:37:52,549
reusing varnish and fastly which is

00:37:50,390 --> 00:37:55,219
varnishes the surface essentially it is

00:37:52,549 --> 00:37:59,299
reusing its capability to cash a

00:37:55,219 --> 00:38:02,029
response with metadata in furnish and

00:37:59,299 --> 00:38:03,619
that's all it is so basically varnish

00:38:02,029 --> 00:38:06,769
it's just assembling several responses

00:38:03,619 --> 00:38:08,239
one is the actual response and then the

00:38:06,769 --> 00:38:10,549
various parts that I personalize that

00:38:08,239 --> 00:38:12,109
are dynamic those are separate responses

00:38:10,549 --> 00:38:13,880
that we can retrieve automatically

00:38:12,109 --> 00:38:16,009
within the cache of orange and that's

00:38:13,880 --> 00:38:19,400
why it's able to answer within one point

00:38:16,009 --> 00:38:21,529
four milliseconds so I think we have

00:38:19,400 --> 00:38:24,349
demonstrated how Drupal 8 can be super

00:38:21,529 --> 00:38:26,299
fast even for authenticated users and as

00:38:24,349 --> 00:38:28,569
a previous slide said I as far as I know

00:38:26,299 --> 00:38:31,910
this is not matched by any other system

00:38:28,569 --> 00:38:33,769
and so Drupal 8 is really the first one

00:38:31,910 --> 00:38:35,930
it can be properly cashed at the edge

00:38:33,769 --> 00:38:39,140
and it doesn't have the pain at other

00:38:35,930 --> 00:38:41,059
CMS's or other non CMS's other web

00:38:39,140 --> 00:38:43,999
frameworks bring including Drupal 7

00:38:41,059 --> 00:38:47,119
which was totally not able to do this so

00:38:43,999 --> 00:38:49,099
in order to get to what you just saw

00:38:47,119 --> 00:38:52,099
what we just demonstrated it just

00:38:49,099 --> 00:38:54,019
requires some level of thinking while

00:38:52,099 --> 00:38:56,239
developing custom modules and

00:38:54,019 --> 00:38:58,160
contributed modules because we mentioned

00:38:56,239 --> 00:38:59,640
cash tags and cash context several times

00:38:58,160 --> 00:39:02,340
but they have to come from some

00:38:59,640 --> 00:39:04,380
rights so we need developers well

00:39:02,340 --> 00:39:06,510
they're generating outputs to actually

00:39:04,380 --> 00:39:09,090
provide that metadata because otherwise

00:39:06,510 --> 00:39:14,460
we can't know so the thought process

00:39:09,090 --> 00:39:16,830
that i would like to teach you in the

00:39:14,460 --> 00:39:18,930
sunset please remember this and if you

00:39:16,830 --> 00:39:20,640
remember this it's just a few steps and

00:39:18,930 --> 00:39:22,890
it actually makes a whole lot of sense

00:39:20,640 --> 00:39:25,100
it is not something that is very Drupal

00:39:22,890 --> 00:39:28,170
specific it is just about thinking about

00:39:25,100 --> 00:39:30,060
dependencies dependencies are super

00:39:28,170 --> 00:39:32,190
important because dependencies are what

00:39:30,060 --> 00:39:34,200
determine what the end result what a

00:39:32,190 --> 00:39:36,990
response is it depends on a whole lot of

00:39:34,200 --> 00:39:39,480
things but very often we have not been

00:39:36,990 --> 00:39:41,190
so honest about the actual dependencies

00:39:39,480 --> 00:39:43,110
very often we pretend oh we give some

00:39:41,190 --> 00:39:44,970
inputs and this is the output well that

00:39:43,110 --> 00:39:47,100
makes sense but actually very often

00:39:44,970 --> 00:39:49,020
we've been relying on global state and

00:39:47,100 --> 00:39:51,060
there is a few very good examples and

00:39:49,020 --> 00:39:53,610
Drupal 7 really didn't drag any

00:39:51,060 --> 00:39:56,430
dependencies especially a good example

00:39:53,610 --> 00:39:58,620
is Drupal at CSS and Drupal hjs you're

00:39:56,430 --> 00:40:00,870
able to use these functions at a CSS

00:39:58,620 --> 00:40:03,030
file or a javascript file to the current

00:40:00,870 --> 00:40:05,310
page but that's already where it goes

00:40:03,030 --> 00:40:08,040
wrong is adding it to the current page

00:40:05,310 --> 00:40:09,450
but what is the current page it is just

00:40:08,040 --> 00:40:11,970
being called from somewhere so how can

00:40:09,450 --> 00:40:14,430
its associated with the current page so

00:40:11,970 --> 00:40:16,200
what it did was it used global state it

00:40:14,430 --> 00:40:18,690
just was all the function calls that

00:40:16,200 --> 00:40:20,820
happened when building a page though is

00:40:18,690 --> 00:40:23,400
ended up somewhere and then we map that

00:40:20,820 --> 00:40:25,920
to a bunch of HTML statements to import

00:40:23,400 --> 00:40:28,170
CSS and load some JavaScript and in

00:40:25,920 --> 00:40:30,510
Drupal Drupal 8 we solve that by only

00:40:28,170 --> 00:40:32,610
allowing to use pound attached and

00:40:30,510 --> 00:40:37,650
attaching asset libraries so that we

00:40:32,610 --> 00:40:39,030
know what markup needs which assets we

00:40:37,650 --> 00:40:40,590
have a clear connection we have the

00:40:39,030 --> 00:40:42,960
dependencies and that's what super

00:40:40,590 --> 00:40:45,540
importance another very clear example of

00:40:42,960 --> 00:40:49,050
tuple 7 not taking any dependencies the

00:40:45,540 --> 00:40:50,720
URL function I'm sure that almost all of

00:40:49,050 --> 00:40:53,250
you have used at at some points and

00:40:50,720 --> 00:40:55,680
actually that depends on a whole lot of

00:40:53,250 --> 00:40:57,810
things including the configuration for

00:40:55,680 --> 00:40:59,610
what the front page should be whether

00:40:57,810 --> 00:41:02,370
the current side is or should be using

00:40:59,610 --> 00:41:03,900
HTTPS whether clean urls are being used

00:41:02,370 --> 00:41:06,210
well the current site is on a multi-site

00:41:03,900 --> 00:41:07,620
and so many more things so really there

00:41:06,210 --> 00:41:11,280
were a lot of hidden dependencies that

00:41:07,620 --> 00:41:12,450
were just actually being implicitly

00:41:11,280 --> 00:41:14,369
applied

00:41:12,450 --> 00:41:17,790
and so really actually this was

00:41:14,369 --> 00:41:19,260
impossible to cash well it's possible to

00:41:17,790 --> 00:41:20,820
cash it we can't prevent that so it

00:41:19,260 --> 00:41:23,490
wasn't possible to invalidate but we

00:41:20,820 --> 00:41:26,609
still did it anyway because what we did

00:41:23,490 --> 00:41:28,740
in Drupal 7 very often was clear all the

00:41:26,609 --> 00:41:30,480
caches how many times have we cleared

00:41:28,740 --> 00:41:32,160
all the caches there's so many places we

00:41:30,480 --> 00:41:35,220
clear all the caches it's terrible and

00:41:32,160 --> 00:41:36,990
drupal 8 is no longer necessary so in

00:41:35,220 --> 00:41:38,849
Drupal 8 what we have is these three

00:41:36,990 --> 00:41:43,560
concepts these three bits of metadata

00:41:38,849 --> 00:41:45,480
that are super important cash tags which

00:41:43,560 --> 00:41:48,210
are about data dependency so declaring

00:41:45,480 --> 00:41:50,490
what data you depend on cash contexts

00:41:48,210 --> 00:41:54,030
which are about a request complex so for

00:41:50,490 --> 00:41:56,970
example a specific query arguments a the

00:41:54,030 --> 00:41:59,250
current user role or all its roles the

00:41:56,970 --> 00:42:00,960
current user permissions the negotiated

00:41:59,250 --> 00:42:03,660
interface or content language those

00:42:00,960 --> 00:42:06,119
kinds of things and max age which is the

00:42:03,660 --> 00:42:09,030
time dependencies in a sense that how

00:42:06,119 --> 00:42:10,730
long can this possibly be used for for

00:42:09,030 --> 00:42:14,070
some things that are very time-sensitive

00:42:10,730 --> 00:42:16,410
this one you probably use least but it's

00:42:14,070 --> 00:42:19,050
still very essential for for some use

00:42:16,410 --> 00:42:21,000
cases so these three bits are the things

00:42:19,050 --> 00:42:22,829
that matter stacks context some XH and

00:42:21,000 --> 00:42:25,140
these are bubbled while rendering to do

00:42:22,829 --> 00:42:28,050
top level of the response so that the

00:42:25,140 --> 00:42:29,819
response knows what things apply to it

00:42:28,050 --> 00:42:32,339
its dependencies it knows how long it

00:42:29,819 --> 00:42:34,200
can be cashed it knows when it should be

00:42:32,339 --> 00:42:36,810
invalidated and know what it knows what

00:42:34,200 --> 00:42:39,150
if everybody so in practice all we need

00:42:36,810 --> 00:42:41,970
is for everybody to make this salt

00:42:39,150 --> 00:42:43,890
processor habits first realizing that

00:42:41,970 --> 00:42:45,480
you are rendering something when you are

00:42:43,890 --> 00:42:47,970
rendering something so creating a render

00:42:45,480 --> 00:42:49,740
array in Drupal that means you must

00:42:47,970 --> 00:42:50,970
think of cash ability remember that you

00:42:49,740 --> 00:42:53,099
have to think of cash your ability in

00:42:50,970 --> 00:42:54,780
the first place and then when you are

00:42:53,099 --> 00:42:57,180
rendering something you may want to

00:42:54,780 --> 00:42:59,970
wonder is this something very expensive

00:42:57,180 --> 00:43:02,730
it would just be worthwhile to cash on

00:42:59,970 --> 00:43:04,560
its own if yes use cash cash keys and

00:43:02,730 --> 00:43:06,869
that's something that also exists in

00:43:04,560 --> 00:43:10,109
Drupal 7 this is nothing new so kashki

00:43:06,869 --> 00:43:11,490
specify di end up specifying the ID that

00:43:10,109 --> 00:43:14,220
should be used it's just a unique

00:43:11,490 --> 00:43:15,360
identifier so it looked somewhat like

00:43:14,220 --> 00:43:18,240
this

00:43:15,360 --> 00:43:20,640
the next question is does it vary does

00:43:18,240 --> 00:43:22,110
it vary by permissions per URL /

00:43:20,640 --> 00:43:23,580
interface language for something else

00:43:22,110 --> 00:43:25,620
maybe something custom like user

00:43:23,580 --> 00:43:27,630
interests because you can specify your

00:43:25,620 --> 00:43:30,300
own cache context to match your site's

00:43:27,630 --> 00:43:32,700
needs which is very important for more

00:43:30,300 --> 00:43:34,710
complex web sites and so if the answer

00:43:32,700 --> 00:43:36,240
is yes it varies by something then we

00:43:34,710 --> 00:43:39,000
need to specify cash cones likes to

00:43:36,240 --> 00:43:42,210
capture those dependencies as well for

00:43:39,000 --> 00:43:44,220
example indicate that this rain rate

00:43:42,210 --> 00:43:46,290
varies by user permissions I'm by URL

00:43:44,220 --> 00:43:49,410
and this is very similar to the HTTP

00:43:46,290 --> 00:43:53,040
vary header very similar in meaning and

00:43:49,410 --> 00:43:54,990
semantics and so the next one is is

00:43:53,040 --> 00:43:57,060
there something that can cause the thing

00:43:54,990 --> 00:44:00,420
I'm rendering the ren rated i'm building

00:43:57,060 --> 00:44:02,310
to become outdated is there some change

00:44:00,420 --> 00:44:03,990
that should also cause a change in the

00:44:02,310 --> 00:44:07,230
thing i'm rendering if yes the answer is

00:44:03,990 --> 00:44:09,270
used cash tags so for example you can

00:44:07,230 --> 00:44:13,050
specify that your render a depends on

00:44:09,270 --> 00:44:14,640
node 5 user 3 and X 10 me term 23 that's

00:44:13,050 --> 00:44:17,330
just a bunch of continent is but you can

00:44:14,640 --> 00:44:20,460
specify dependencies on a lot of things

00:44:17,330 --> 00:44:22,170
and then finally does this become

00:44:20,460 --> 00:44:23,970
outdated automatically after some period

00:44:22,170 --> 00:44:27,120
of time if the answer is yes then use

00:44:23,970 --> 00:44:29,070
cash max h by default we assume that is

00:44:27,120 --> 00:44:30,630
permanently cacheable because most

00:44:29,070 --> 00:44:32,580
things are permanently cacheable and

00:44:30,630 --> 00:44:35,250
tagged invalidation will make sure that

00:44:32,580 --> 00:44:37,020
you can catch something forever but as

00:44:35,250 --> 00:44:38,640
soon as it is changed the cash deck and

00:44:37,020 --> 00:44:40,680
validation will make sure that it's

00:44:38,640 --> 00:44:42,270
invalidated anyway because that's the

00:44:40,680 --> 00:44:45,660
whole point of cash tax it should change

00:44:42,270 --> 00:44:47,760
immediately and that's very close

00:44:45,660 --> 00:44:51,480
obviously to the HTTP cache control

00:44:47,760 --> 00:44:53,100
headers max-age property now it may seem

00:44:51,480 --> 00:44:54,480
very painful to have to deal with all of

00:44:53,100 --> 00:44:57,450
those cash ability metadata bits

00:44:54,480 --> 00:44:59,490
manually so to help address that of

00:44:57,450 --> 00:45:01,170
course we have an interface that is

00:44:59,490 --> 00:45:03,030
implemented by very many things that

00:45:01,170 --> 00:45:05,580
provides that cash ability metadata that

00:45:03,030 --> 00:45:07,890
says for a given object this is the

00:45:05,580 --> 00:45:10,980
metadata that I vary by that this is the

00:45:07,890 --> 00:45:12,600
dependencies for this object so for

00:45:10,980 --> 00:45:15,270
example it's implemented by all

00:45:12,600 --> 00:45:17,310
configuration by all entities every

00:45:15,270 --> 00:45:19,650
access result has its block plugins

00:45:17,310 --> 00:45:21,240
complex plugins condition plugins some

00:45:19,650 --> 00:45:23,430
of those you may not even ring a bell

00:45:21,240 --> 00:45:25,640
because they're relatively deep into the

00:45:23,430 --> 00:45:28,620
Drupal architecture but the point is

00:45:25,640 --> 00:45:30,060
everything that you use while rendering

00:45:28,620 --> 00:45:32,250
something well been building something

00:45:30,060 --> 00:45:34,440
in Drupal already provides the necessary

00:45:32,250 --> 00:45:37,400
cash ability metadata so you only have

00:45:34,440 --> 00:45:40,500
to use it and this makes it very easy

00:45:37,400 --> 00:45:42,420
and that was really the key part of the

00:45:40,500 --> 00:45:44,910
talk we've demoed it then we've

00:45:42,420 --> 00:45:46,470
explained how it's possible and how you

00:45:44,910 --> 00:45:51,350
can make sure that this keeps working

00:45:46,470 --> 00:45:53,610
but an ESI caching on the edge in CDM

00:45:51,350 --> 00:45:55,590
anonymous caching is really not the only

00:45:53,610 --> 00:45:57,000
thing that the sketch ability metadata

00:45:55,590 --> 00:45:58,950
enables it also enables other

00:45:57,000 --> 00:46:00,750
interesting things like hybrids

00:45:58,950 --> 00:46:02,670
alternative render strategies such as

00:46:00,750 --> 00:46:04,830
big pipe and we have a session about

00:46:02,670 --> 00:46:06,900
that tomorrow so if you find that

00:46:04,830 --> 00:46:09,660
interesting and if the demo I'm about to

00:46:06,900 --> 00:46:11,460
show you for that is interesting then I

00:46:09,660 --> 00:46:14,880
would say come by because Fabian is

00:46:11,460 --> 00:46:17,700
going to do a fabulous demo dare to this

00:46:14,880 --> 00:46:19,440
is a very short version of big pipe so

00:46:17,700 --> 00:46:22,410
what you're looking at is a awesome

00:46:19,440 --> 00:46:23,940
music's website as you can tell and so

00:46:22,410 --> 00:46:25,530
I've got some content on the right-hand

00:46:23,940 --> 00:46:27,600
side on the left hand side I've got a

00:46:25,530 --> 00:46:29,310
few blocks and the first block is

00:46:27,600 --> 00:46:30,690
personalized it's slower takes three

00:46:29,310 --> 00:46:33,750
seconds and it's personalized per user

00:46:30,690 --> 00:46:35,370
this one is also slow and it is not

00:46:33,750 --> 00:46:37,590
catchable at all it's it's super dynamic

00:46:35,370 --> 00:46:39,540
it's live data and this thing at the

00:46:37,590 --> 00:46:41,610
bottom is also personalized but it's not

00:46:39,540 --> 00:46:44,460
quite a slow so the two next to each

00:46:41,610 --> 00:46:46,140
other cold caches and voila that's the

00:46:44,460 --> 00:46:47,850
difference the two blocks each take

00:46:46,140 --> 00:46:49,470
three seconds but big pipe is still able

00:46:47,850 --> 00:46:51,540
to send the majority of the page

00:46:49,470 --> 00:46:54,150
immediately as you saw we finished the

00:46:51,540 --> 00:46:56,010
same time actually I block the final

00:46:54,150 --> 00:46:58,620
block shot at the same time but big pipe

00:46:56,010 --> 00:47:01,170
shows interesting relevant important

00:46:58,620 --> 00:47:03,270
things much much faster even with warm

00:47:01,170 --> 00:47:05,850
caches the difference is enormous so

00:47:03,270 --> 00:47:07,680
that on the left hand side was had

00:47:05,850 --> 00:47:10,320
basically so Drupal 8 as it currently a

00:47:07,680 --> 00:47:11,850
sword rupal 7 rendering the same thing

00:47:10,320 --> 00:47:14,820
everything is built and everything is

00:47:11,850 --> 00:47:18,030
flushed in one go and big pipe is able

00:47:14,820 --> 00:47:20,580
to flush the non super dynamic things

00:47:18,030 --> 00:47:22,230
immediately resulting in so much faster

00:47:20,580 --> 00:47:24,810
perceived performance because you see

00:47:22,230 --> 00:47:26,100
something useful you can actually start

00:47:24,810 --> 00:47:28,110
doing what you want to do right away

00:47:26,100 --> 00:47:29,580
instead of having we're having to wait

00:47:28,110 --> 00:47:33,350
for the server to generate every single

00:47:29,580 --> 00:47:33,350
bit which is a very big difference

00:47:34,820 --> 00:47:39,960
finally a quick peek at the future

00:47:37,940 --> 00:47:43,110
service workers how many of you have

00:47:39,960 --> 00:47:46,500
heard of service workers okay like five

00:47:43,110 --> 00:47:48,210
percent maybe ten percents service

00:47:46,500 --> 00:47:50,430
workers are still in development so it

00:47:48,210 --> 00:47:53,490
links to a Spectre the slice will be up

00:47:50,430 --> 00:47:55,980
soon after this talk and what it really

00:47:53,490 --> 00:47:57,840
is is simply a client-side reverse proxy

00:47:55,980 --> 00:48:00,119
you could think of it as varnish on the

00:47:57,840 --> 00:48:03,030
clients eyes and you could think of it

00:48:00,119 --> 00:48:05,100
as a vcl in javascript because the logic

00:48:03,030 --> 00:48:07,770
for the end of this reverse proxy is a

00:48:05,100 --> 00:48:09,390
fine and JavaScript and that means

00:48:07,770 --> 00:48:12,690
because it's on the client side that we

00:48:09,390 --> 00:48:15,300
can have zero latency so instead of even

00:48:12,690 --> 00:48:17,790
having to go to a CDN you can just cash

00:48:15,300 --> 00:48:19,830
it locally ride on the browser right on

00:48:17,790 --> 00:48:22,290
the client that your that is trying to

00:48:19,830 --> 00:48:24,660
visit your site or your app and it will

00:48:22,290 --> 00:48:26,910
be insanely fast because there is no

00:48:24,660 --> 00:48:29,010
latency of course there is still

00:48:26,910 --> 00:48:30,420
considerable problems then because we

00:48:29,010 --> 00:48:33,000
have to make sure that that cash keeps

00:48:30,420 --> 00:48:35,490
in sync as well so that is then a

00:48:33,000 --> 00:48:37,320
different problem to solve keeping those

00:48:35,490 --> 00:48:39,119
in sync but having those new

00:48:37,320 --> 00:48:41,310
possibilities and capabilities is going

00:48:39,119 --> 00:48:44,430
to be very interesting and drupal

00:48:41,310 --> 00:48:45,600
already has the metadata as shown by the

00:48:44,430 --> 00:48:47,490
fact that it can integrate with these

00:48:45,600 --> 00:48:48,930
idioms automatically transparently

00:48:47,490 --> 00:48:51,990
without having to go through a whole lot

00:48:48,930 --> 00:48:53,820
of pain that metadata we will be able to

00:48:51,990 --> 00:48:56,790
use to make sure that those client-side

00:48:53,820 --> 00:48:58,800
caches stay in sync as well currently

00:48:56,790 --> 00:49:01,170
browser support looks like this so it's

00:48:58,800 --> 00:49:04,200
definitely not close around the corner

00:49:01,170 --> 00:49:07,500
but it is getting there it is being

00:49:04,200 --> 00:49:10,020
adopted so hopefully some time from now

00:49:07,500 --> 00:49:13,290
we will start we'll be able to start

00:49:10,020 --> 00:49:14,970
using that as well and this feels kind

00:49:13,290 --> 00:49:17,940
of strange to say but I feel it's worth

00:49:14,970 --> 00:49:19,680
going out at this time because our clea

00:49:17,940 --> 00:49:21,300
has allowed me to work on this and

00:49:19,680 --> 00:49:22,680
everything leading up to our is it

00:49:21,300 --> 00:49:25,050
because of a we mention it was a whole

00:49:22,680 --> 00:49:27,180
lot of work to make every single entity

00:49:25,050 --> 00:49:28,740
and config and so on specify the

00:49:27,180 --> 00:49:31,619
necessary cash ability metadata and

00:49:28,740 --> 00:49:33,660
Fabian was also given grants in order to

00:49:31,619 --> 00:49:37,140
be able to work on the ESI stuff that

00:49:33,660 --> 00:49:38,460
was demoed and big pipe and so our key

00:49:37,140 --> 00:49:39,869
has made it possible for us to work on

00:49:38,460 --> 00:49:41,790
those things and it benefits all of us

00:49:39,869 --> 00:49:44,160
which is what I think matters movies

00:49:41,790 --> 00:49:45,039
it's not just big clients it's everybody

00:49:44,160 --> 00:49:48,249
in the community

00:49:45,039 --> 00:49:51,099
and so that was it do you have any

00:49:48,249 --> 00:49:52,599
questions the darks are at the bottom

00:49:51,099 --> 00:49:54,309
there was a remark the ones that are

00:49:52,599 --> 00:49:57,929
most relevant and should be very

00:49:54,309 --> 00:49:57,929
interesting thank

00:50:03,440 --> 00:50:16,280
I am thank you for a good presentation

00:50:10,190 --> 00:50:19,190
very interesting and I have only worked

00:50:16,280 --> 00:50:23,180
with the Drupal 7 for so so far but I've

00:50:19,190 --> 00:50:26,870
made a small module for a caching stuff

00:50:23,180 --> 00:50:31,460
in varnish a small parts blocks many

00:50:26,870 --> 00:50:35,180
panels whatever using Ajax calls so I

00:50:31,460 --> 00:50:38,270
can drag them across page view different

00:50:35,180 --> 00:50:40,460
pages so for instance I have a right

00:50:38,270 --> 00:50:42,650
column that is more or less the same I

00:50:40,460 --> 00:50:45,350
just get the same a text code on every

00:50:42,650 --> 00:50:50,180
page can you foresee something where

00:50:45,350 --> 00:50:53,000
this can can sort of yes and so because

00:50:50,180 --> 00:50:55,460
we have placeholder strategies now all

00:50:53,000 --> 00:50:57,680
you would need to do is you would use an

00:50:55,460 --> 00:51:00,200
alto hook you would specify a Creed

00:50:57,680 --> 00:51:03,830
placeholder true you would register your

00:51:00,200 --> 00:51:06,380
custom placeholder strategy for Ajax and

00:51:03,830 --> 00:51:09,410
it'd work out of the box I don't mean I

00:51:06,380 --> 00:51:11,620
want to keep using Ajax but yes yes it

00:51:09,410 --> 00:51:14,150
would work with a takes out of the box I

00:51:11,620 --> 00:51:16,160
don't really want to use Ajax or rather

00:51:14,150 --> 00:51:19,460
you see as I for instance okay but I'm

00:51:16,160 --> 00:51:21,140
on the same yeah it's completely

00:51:19,460 --> 00:51:24,170
interchangeable as long as you have a

00:51:21,140 --> 00:51:27,310
placeholder you can use is I Ajax client

00:51:24,170 --> 00:51:29,930
side rendering no tree as react even

00:51:27,310 --> 00:51:34,520
whatever in those placeholders

00:51:29,930 --> 00:51:36,950
strategies already in course so um you

00:51:34,520 --> 00:51:41,060
would do that hafid reverse em okay for

00:51:36,950 --> 00:51:42,470
drupal 7 um for drupal 7 it would still

00:51:41,060 --> 00:51:44,480
take a while but we are porting the

00:51:42,470 --> 00:51:46,460
brennan caching from Drupal 8 or I

00:51:44,480 --> 00:51:49,280
important when a kiss from Drupal 8 back

00:51:46,460 --> 00:51:51,920
to Drupal 7 using the service container

00:51:49,280 --> 00:51:54,200
module which will allow to kind of run

00:51:51,920 --> 00:51:56,150
most of the same code in Drupal 7 as

00:51:54,200 --> 00:51:58,280
well with the exception with the

00:51:56,150 --> 00:52:01,610
exception of cash tax we need to specify

00:51:58,280 --> 00:52:03,560
and cash context you will need some more

00:52:01,610 --> 00:52:05,240
manual work but it might be easier than

00:52:03,560 --> 00:52:06,980
what you need to do this for module now

00:52:05,240 --> 00:52:10,380
I think I'll just drop try to draw blaze

00:52:06,980 --> 00:52:12,960
okay perfect perfect yes

00:52:10,380 --> 00:52:15,030
well you answered my second question so

00:52:12,960 --> 00:52:20,700
any timeline on the Drupal 7 render cash

00:52:15,030 --> 00:52:23,820
work when Drew blades work is done just

00:52:20,700 --> 00:52:26,580
then because again porting does not make

00:52:23,820 --> 00:52:30,020
sense before probably when big pipe is

00:52:26,580 --> 00:52:32,760
in and probably when Drupal 8 is out

00:52:30,020 --> 00:52:37,380
that's when welcome rainier cash where

00:52:32,760 --> 00:52:40,230
we start so okay my other question was I

00:52:37,380 --> 00:52:42,660
kind of missed in the first example in

00:52:40,230 --> 00:52:44,910
Drupal 7 you would queue up a whole list

00:52:42,660 --> 00:52:47,610
of URLs and send out the purge request

00:52:44,910 --> 00:52:50,790
what exactly were you sending to the CDN

00:52:47,610 --> 00:52:54,420
with the cash tag metadata to the CDN we

00:52:50,790 --> 00:52:57,480
were just sending a purge every quest to

00:52:54,420 --> 00:53:00,090
purchase special key so in this case and

00:52:57,480 --> 00:53:02,700
I think when you end a comment and we

00:53:00,090 --> 00:53:06,090
would invalidate the note and the

00:53:02,700 --> 00:53:10,050
comment itself and in this case we would

00:53:06,090 --> 00:53:13,530
then just send out something that would

00:53:10,050 --> 00:53:15,360
invalidate this special yeah it in a

00:53:13,530 --> 00:53:18,660
sense just what them share with the note

00:53:15,360 --> 00:53:26,250
5 and users we yeah so basically you

00:53:18,660 --> 00:53:29,340
send purge towards URL with as you say

00:53:26,250 --> 00:53:31,380
perché URL as in the city an URL you

00:53:29,340 --> 00:53:34,830
talk to the CDN is just a perch and then

00:53:31,380 --> 00:53:37,050
note cone 5 or perch user colon 3 you

00:53:34,830 --> 00:53:39,630
just specify the exact same cache tags

00:53:37,050 --> 00:53:43,260
and Sen invalidates that across all of

00:53:39,630 --> 00:53:46,710
its responses that with extra cash tax

00:53:43,260 --> 00:53:48,840
header contains exactly that and that's

00:53:46,710 --> 00:53:51,150
it so it just does string matching

00:53:48,840 --> 00:53:53,100
essentially on all of the responses so

00:53:51,150 --> 00:53:58,170
do you need a custom vcl for that or

00:53:53,100 --> 00:54:00,780
nope ug well for fastly they actually

00:53:58,170 --> 00:54:03,240
provide that out of the box you just the

00:54:00,780 --> 00:54:06,120
cephalic module automatically maps the X

00:54:03,240 --> 00:54:08,130
ripple cash tax header to serve a good

00:54:06,120 --> 00:54:09,990
key which is what's they call it but

00:54:08,130 --> 00:54:13,830
it's just a name it's the same exact

00:54:09,990 --> 00:54:16,770
principle but in pure varnish yes you

00:54:13,830 --> 00:54:20,339
need a few lines like two three lines of

00:54:16,770 --> 00:54:22,859
ECL to make it react through those

00:54:20,339 --> 00:54:28,650
or been requests and that's it okay

00:54:22,859 --> 00:54:30,719
thanks hi we have a website where the

00:54:28,650 --> 00:54:33,989
front page has content pulled in from

00:54:30,719 --> 00:54:37,170
other systems and these other blocks are

00:54:33,989 --> 00:54:41,309
user dependent content so for you could

00:54:37,170 --> 00:54:42,989
imagine for example a webshop basket is

00:54:41,309 --> 00:54:46,170
pulled in from another website so the

00:54:42,989 --> 00:54:49,559
content of this block is HTML is user

00:54:46,170 --> 00:54:52,229
dependent so that comes into Drupal as a

00:54:49,559 --> 00:54:54,329
piece of HTML so we have a rest

00:54:52,229 --> 00:54:57,599
interface on Drupal calling another

00:54:54,329 --> 00:55:00,329
website and we pass across a user how

00:54:57,599 --> 00:55:03,900
would we because i'd love to kind of

00:55:00,329 --> 00:55:06,180
then cash that so i had to go back

00:55:03,900 --> 00:55:08,759
through my rest api every time week you

00:55:06,180 --> 00:55:10,769
would just take the HTML you are getting

00:55:08,759 --> 00:55:14,160
back you would put it in a render ray

00:55:10,769 --> 00:55:16,680
and you would add attached cash context

00:55:14,160 --> 00:55:18,420
users and that's it the rest trooper

00:55:16,680 --> 00:55:20,400
would to automatically it would make

00:55:18,420 --> 00:55:22,710
your place holder it would be kind of

00:55:20,400 --> 00:55:24,299
outside of the main page thing and then

00:55:22,710 --> 00:55:27,479
you would need like this year's I

00:55:24,299 --> 00:55:32,700
strategy and boom it would be inside

00:55:27,479 --> 00:55:36,299
okay right the question is about the

00:55:32,700 --> 00:55:39,359
size of HTTP headers so because you had

00:55:36,299 --> 00:55:42,599
a huge amount of information now is a

00:55:39,359 --> 00:55:45,359
way to reduce the side of it though we

00:55:42,599 --> 00:55:47,609
just have to take it and so um there's

00:55:45,359 --> 00:55:50,369
two there's two things about that I

00:55:47,609 --> 00:55:52,529
don't think the HTTP Adam edits made us

00:55:50,369 --> 00:55:56,099
too much between web server and varnish

00:55:52,529 --> 00:55:58,619
in that case or web server and CDN in

00:55:56,099 --> 00:56:03,239
that it might matter a lot more for the

00:55:58,619 --> 00:56:05,789
end user in there would be what probably

00:56:03,239 --> 00:56:09,479
should be understanded new standard vcl

00:56:05,789 --> 00:56:12,420
both those four new only anonymous users

00:56:09,479 --> 00:56:15,810
and those for our sin decade users is to

00:56:12,420 --> 00:56:17,550
just strip those headers out

00:56:15,810 --> 00:56:19,980
we actually we actually have an issue to

00:56:17,550 --> 00:56:22,800
make sure that it no longer amidst those

00:56:19,980 --> 00:56:25,800
headers by default unless you have a

00:56:22,800 --> 00:56:27,150
reverse proxy setup so that would

00:56:25,800 --> 00:56:29,720
actually completely solve that but as

00:56:27,150 --> 00:56:32,220
fabian indicated the header size is only

00:56:29,720 --> 00:56:36,210
relevant towards the end user because

00:56:32,220 --> 00:56:39,840
then sending many many hundreds of bytes

00:56:36,210 --> 00:56:43,950
in the very first part of the response

00:56:39,840 --> 00:56:45,870
that is going to slow down your dick the

00:56:43,950 --> 00:56:48,090
perceived performance on the client

00:56:45,870 --> 00:56:51,150
because it takes for example an edge

00:56:48,090 --> 00:56:52,710
connection or 3g it may take a while and

00:56:51,150 --> 00:56:55,170
that would slow it down but between the

00:56:52,710 --> 00:56:57,300
server and the city anand doesn't matter

00:56:55,170 --> 00:57:04,380
anyway but we were working on making the

00:56:57,300 --> 00:57:07,080
better the Sun Acquia cloud varnish

00:57:04,380 --> 00:57:11,310
Chaeronea will it soon for cash tagging

00:57:07,080 --> 00:57:13,260
validation we're working on that I don't

00:57:11,310 --> 00:57:14,880
know the exact time where it will be

00:57:13,260 --> 00:57:18,300
available but I yeah it's definitely

00:57:14,880 --> 00:57:22,260
coming yeah and and we are also working

00:57:18,300 --> 00:57:24,480
on the I will be working this in archaea

00:57:22,260 --> 00:57:28,140
cloud engineer on the cash context

00:57:24,480 --> 00:57:30,150
saying so that that's potentially for

00:57:28,140 --> 00:57:31,980
some customers first experimental should

00:57:30,150 --> 00:57:35,000
also be available and then hopefully

00:57:31,980 --> 00:57:35,000
later be standard

00:57:35,710 --> 00:57:44,620
could you tell us more about the

00:57:38,300 --> 00:57:48,310
placeholder in policy sure what more

00:57:44,620 --> 00:57:52,070
development side or on the conditions of

00:57:48,310 --> 00:57:54,290
placing a place over ok so the auto

00:57:52,070 --> 00:57:58,250
place hole during currently works in the

00:57:54,290 --> 00:58:00,890
following way there's two possibilities

00:57:58,250 --> 00:58:03,620
either something declares its

00:58:00,890 --> 00:58:06,530
dependencies automatically then whenever

00:58:03,620 --> 00:58:10,130
it started to be rendering let me detect

00:58:06,530 --> 00:58:15,050
oh this is rendered by user for example

00:58:10,130 --> 00:58:18,020
and in this case we create we replace it

00:58:15,050 --> 00:58:21,110
with a placeholder and we put the actual

00:58:18,020 --> 00:58:24,830
data that we wanted to render in the

00:58:21,110 --> 00:58:28,160
attached array so the same as libraries

00:58:24,830 --> 00:58:30,440
HTTP had sayings etc the placeholders

00:58:28,160 --> 00:58:32,690
are actually going to end up in the

00:58:30,440 --> 00:58:35,810
attached array so they are additional

00:58:32,690 --> 00:58:39,560
media data that's available and

00:58:35,810 --> 00:58:43,790
transferred and retained from different

00:58:39,560 --> 00:58:46,610
stages the other point is the

00:58:43,790 --> 00:58:50,540
placeholders when you already have

00:58:46,610 --> 00:58:54,470
rendered it and then we detect after

00:58:50,540 --> 00:58:56,210
rendering oh this was per user and again

00:58:54,470 --> 00:58:58,550
we are putting a placeholder but we are

00:58:56,210 --> 00:59:02,180
saving whatever we have computed so far

00:58:58,550 --> 00:59:05,620
and then we later have that available

00:59:02,180 --> 00:59:09,110
for rendering what is key to that is

00:59:05,620 --> 00:59:11,840
that the placeholders allow us to catch

00:59:09,110 --> 00:59:14,240
every page in a kind of like internal

00:59:11,840 --> 00:59:17,750
page cache called dynamic page cache

00:59:14,240 --> 00:59:20,780
where everything except the placeholders

00:59:17,750 --> 00:59:26,570
with the bra place will the data that

00:59:20,780 --> 00:59:28,760
can be recruited is stored in this

00:59:26,570 --> 00:59:31,700
internal page Cashin that allows what we

00:59:28,760 --> 00:59:34,010
have so tomorrow more to kinda have

00:59:31,700 --> 00:59:39,620
response times to the first bite of like

00:59:34,010 --> 00:59:43,520
20 milliseconds and so as this is out of

00:59:39,620 --> 00:59:46,310
place ordering we are can continue to

00:59:43,520 --> 00:59:48,810
make auto place holding better I think

00:59:46,310 --> 00:59:50,880
we have two thirds or

00:59:48,810 --> 00:59:54,060
around fifty percent in off the auto

00:59:50,880 --> 00:59:57,480
place hole during things currently what

00:59:54,060 --> 00:59:59,700
does not yet possible is to say this

00:59:57,480 --> 01:00:03,030
blog varied once by users we want to

00:59:59,700 --> 01:00:05,100
always vary it by user but so that it

01:00:03,030 --> 01:00:07,020
would never be but on the other hand we

01:00:05,100 --> 01:00:09,060
have great altar hooks where you can

01:00:07,020 --> 01:00:11,430
just say I'm on site builder I know what

01:00:09,060 --> 01:00:13,560
I do I want to optimize the side and you

01:00:11,430 --> 01:00:17,640
can always declare all dependencies

01:00:13,560 --> 01:00:20,880
upfront so as a site builder developer

01:00:17,640 --> 01:00:24,030
performance engineer you can tune your

01:00:20,880 --> 01:00:26,490
side very simple to ensure that the

01:00:24,030 --> 01:00:28,470
outer place ordering is better and if

01:00:26,490 --> 01:00:30,630
you want you can always specify hash

01:00:28,470 --> 01:00:32,790
Creed placeholder folds to not create a

01:00:30,630 --> 01:00:34,920
place holder or a hash place Creed

01:00:32,790 --> 01:00:37,680
placeholder true to create a placeholder

01:00:34,920 --> 01:00:41,310
in force creating a placeholder so it's

01:00:37,680 --> 01:00:45,750
automatic out of the box tunable and add

01:00:41,310 --> 01:00:47,940
turn off above great things and we have

01:00:45,750 --> 01:00:52,350
probably deal with placeholders a little

01:00:47,940 --> 01:00:54,060
more tomorrow too so another one about

01:00:52,350 --> 01:00:56,250
okay so let's imagine we have a big

01:00:54,060 --> 01:00:58,560
render array and a little part of that

01:00:56,250 --> 01:01:01,520
is a shopping cart and most part of it

01:00:58,560 --> 01:01:05,040
can be cashed for everyone anonymous and

01:01:01,520 --> 01:01:06,900
now we go through this render error and

01:01:05,040 --> 01:01:09,480
say okay this part should be in a place

01:01:06,900 --> 01:01:10,920
holder and then the next week wet just

01:01:09,480 --> 01:01:13,560
wants the shopping cart because the rest

01:01:10,920 --> 01:01:15,300
is already in the cache but the shopping

01:01:13,560 --> 01:01:17,400
cart was only built as part of this huge

01:01:15,300 --> 01:01:19,080
year render array and we at this point

01:01:17,400 --> 01:01:20,670
we don't know that there's a maybe a

01:01:19,080 --> 01:01:22,520
function or something that to just get

01:01:20,670 --> 01:01:25,800
the shopping cart we've solved leg

01:01:22,520 --> 01:01:28,410
because we have enforced an API called

01:01:25,800 --> 01:01:32,430
lazy builder and lazy builder means that

01:01:28,410 --> 01:01:35,430
a block or an entity and must not have

01:01:32,430 --> 01:01:37,380
any external dependencies if you have

01:01:35,430 --> 01:01:39,510
that you just need to say this is not

01:01:37,380 --> 01:01:42,150
placeholder over this is not lazy bill

01:01:39,510 --> 01:01:45,140
durable you can kind of opt out of that

01:01:42,150 --> 01:01:47,970
but your shopping cart needs to be

01:01:45,140 --> 01:01:49,650
independently buildable and if you don't

01:01:47,970 --> 01:01:51,870
do that your side will break let's

01:01:49,650 --> 01:01:54,450
triple 8 it's as simple as that that

01:01:51,870 --> 01:01:56,700
sounds a little hard but um these kind

01:01:54,450 --> 01:01:58,770
of restrictions of ensuring that

01:01:56,700 --> 01:02:00,600
everything has dependencies everything

01:01:58,770 --> 01:02:01,890
is cashable everything is independently

01:02:00,600 --> 01:02:04,740
buildable that need

01:02:01,890 --> 01:02:07,500
inaudible is what makes all of this

01:02:04,740 --> 01:02:08,910
possible but it is visible in the render

01:02:07,500 --> 01:02:12,180
array is there in the runner is some

01:02:08,910 --> 01:02:14,430
kita yes lady builder look yes lazy

01:02:12,180 --> 01:02:16,700
builder equals that but all blocks are

01:02:14,430 --> 01:02:19,560
automatically lazy builded that's

01:02:16,700 --> 01:02:21,210
transparently in okay so I see this in

01:02:19,560 --> 01:02:23,430
the render right in the in some sub

01:02:21,210 --> 01:02:26,460
array yes you would see that how to make

01:02:23,430 --> 01:02:29,070
this thing stand alone it is standalone

01:02:26,460 --> 01:02:31,320
by default it is already in Drupal 8

01:02:29,070 --> 01:02:34,590
core that every block is lazy builder

01:02:31,320 --> 01:02:37,620
and so did you mean a blocker I think

01:02:34,590 --> 01:02:39,330
you meant somewhere deeper dive had so

01:02:37,620 --> 01:02:42,180
far as understood this correctly that

01:02:39,330 --> 01:02:44,250
most of it just starts with a Drupal

01:02:42,180 --> 01:02:46,320
render a Drupal 8 equivalent of Drupal

01:02:44,250 --> 01:02:48,030
render mm-hmm and so it goes through the

01:02:46,320 --> 01:02:50,640
render arrow recursively and then it is

01:02:48,030 --> 01:02:53,120
this should be a place over and there's

01:02:50,640 --> 01:02:55,680
two things to that I'm first of all

01:02:53,120 --> 01:02:57,450
there's a possibility to also author

01:02:55,680 --> 01:03:00,540
placeholder things that are cacheable

01:02:57,450 --> 01:03:02,430
and not auto place horrible that I have

01:03:00,540 --> 01:03:04,920
working in a proof of concept but we've

01:03:02,430 --> 01:03:06,660
not yet gotten that into core the other

01:03:04,920 --> 01:03:09,570
thing is when when you want to do

01:03:06,660 --> 01:03:11,730
something like that like we had a great

01:03:09,570 --> 01:03:14,130
example today you have a solar page and

01:03:11,730 --> 01:03:16,740
on that solar page you never want to

01:03:14,130 --> 01:03:18,930
catch those solar thanks so all you need

01:03:16,740 --> 01:03:20,850
to do is you return in from your

01:03:18,930 --> 01:03:23,100
controller you return instead of the

01:03:20,850 --> 01:03:25,440
regular content the render array you

01:03:23,100 --> 01:03:29,670
just return hash lazy builder equals

01:03:25,440 --> 01:03:33,500
call back plus some functions going to

01:03:29,670 --> 01:03:37,470
talk about that more tomorrow and then

01:03:33,500 --> 01:03:39,300
you specify like the search arguments

01:03:37,470 --> 01:03:42,810
and that's it and then when the page is

01:03:39,300 --> 01:03:44,790
build it will detect oh this is not

01:03:42,810 --> 01:03:47,340
catchable so it will put a placeholder

01:03:44,790 --> 01:03:49,650
at that point in the page so it's not

01:03:47,340 --> 01:03:51,480
only blocks it can work everywhere on

01:03:49,650 --> 01:03:53,520
the page as long as you're using a lazy

01:03:51,480 --> 01:03:55,320
builder that at the moment is saying but

01:03:53,520 --> 01:03:57,510
as a developer you can easily switch

01:03:55,320 --> 01:03:59,190
that over so at this point you don't

01:03:57,510 --> 01:04:00,450
really build a complete error with of

01:03:59,190 --> 01:04:01,950
the sub arrays like for the shopping

01:04:00,450 --> 01:04:03,030
cart and for the search but you just

01:04:01,950 --> 01:04:05,280
leave this as a

01:04:03,030 --> 01:04:07,080
I'm in the restaurants just saying how

01:04:05,280 --> 01:04:09,570
to get this stuff but it doesn't do the

01:04:07,080 --> 01:04:11,370
air I yet exactly yes that's a trick

01:04:09,570 --> 01:04:17,870
yeah that's exactly what place holders

01:04:11,370 --> 01:04:17,870
are yep all right any more questions

01:04:19,310 --> 01:04:35,220
attack it's linked from the slides that

01:04:31,950 --> 01:04:38,400
will be up shortly but it's 14 15 in

01:04:35,220 --> 01:04:50,420
this room tomorrow so hope to see you

01:04:38,400 --> 01:04:50,420

YouTube URL: https://www.youtube.com/watch?v=AAcChiYo0q8


