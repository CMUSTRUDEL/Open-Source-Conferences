Title: DrupalCon Barcelona 2015: Symfony for Drupal developers
Publication date: 2015-09-22
Playlist: DrupalCon Barcelona - September 2015
Description: 
	One of the main advantages of Drupal 8's modernization and adoption of many Symfony components is that it is much easier for developers to jump between Drupal the CMS and Symfony the framework, using "the right tool for the job".  Much of the knowledge and conventions of one translate to the other.
But "much" is not "all", and there are still many differences between these Open Source cousins. This session will be an introduction to developing for Symfony, assuming a Drupal background. (Hint: It involves a lot less button pushing and a lot more coding.)

What similarities can we benefit from, and what differences are there to watch out for?
Captions: 
	00:00:00,030 --> 00:00:06,540
so welcome everyone to DrupalCon and to

00:00:04,170 --> 00:00:08,730
the first session of the simply track I

00:00:06,540 --> 00:00:14,519
said then we just added the last few

00:00:08,730 --> 00:00:17,340
simple cons that I'm rather fond of my

00:00:14,519 --> 00:00:19,590
name is Larry Garfield you may know me

00:00:17,340 --> 00:00:20,699
online as Krell if you want to make fun

00:00:19,590 --> 00:00:21,930
of me during the session on Twitter

00:00:20,699 --> 00:00:25,320
that's where you do so I highly

00:00:21,930 --> 00:00:27,449
recommend it I am a senior architect

00:00:25,320 --> 00:00:29,609
with Palantir dot meds we're a digital

00:00:27,449 --> 00:00:31,710
agency based in Chicago in the United

00:00:29,609 --> 00:00:33,899
States we work mostly but not

00:00:31,710 --> 00:00:37,200
exclusively with Drupal we also do some

00:00:33,899 --> 00:00:39,780
Symphony work some Silex work we're an

00:00:37,200 --> 00:00:43,680
end-to-end company so design content

00:00:39,780 --> 00:00:45,270
strategy developments come from modules

00:00:43,680 --> 00:00:47,760
side architecture pretty much everything

00:00:45,270 --> 00:00:49,020
except posting we do for triple-eight i

00:00:47,760 --> 00:00:52,410
was also the web services initiative

00:00:49,020 --> 00:00:53,399
lead which means I'm the one you can

00:00:52,410 --> 00:00:56,100
blame for the fact that we have a

00:00:53,399 --> 00:00:57,660
symphony track the Drupal con also the

00:00:56,100 --> 00:00:59,070
drupal representative to the PHP

00:00:57,660 --> 00:01:02,789
framework interoperability group who's

00:00:59,070 --> 00:01:04,379
heard of a couple decent of our people

00:01:02,789 --> 00:01:06,630
so for those who don't have their hands

00:01:04,379 --> 00:01:08,939
up Figg is basically the United Nations

00:01:06,630 --> 00:01:13,229
of PHP with all the positive and

00:01:08,939 --> 00:01:14,970
negative implications that has advisor

00:01:13,229 --> 00:01:19,320
the Drupal Association and I do them

00:01:14,970 --> 00:01:21,930
plenty sr8 huggable interface so do most

00:01:19,320 --> 00:01:25,460
Drupal people so let's talk about

00:01:21,930 --> 00:01:28,530
Symphony it's kind of why we're here

00:01:25,460 --> 00:01:31,890
specifically symphony two symphony two

00:01:28,530 --> 00:01:35,000
is a Tier one PHP framework by Tier one

00:01:31,890 --> 00:01:37,619
I mean it's one of the big boys it's

00:01:35,000 --> 00:01:40,079
probably I think at the latest stats

00:01:37,619 --> 00:01:43,759
it's one of the top three frameworks in

00:01:40,079 --> 00:01:46,350
PHP in terms of its usage of adoption

00:01:43,759 --> 00:01:48,270
it's also with a basis for a lot of

00:01:46,350 --> 00:01:50,399
other projects including the number one

00:01:48,270 --> 00:01:52,920
which is Larry Bell it's a loosely

00:01:50,399 --> 00:01:54,750
coupled framework it's not a fully

00:01:52,920 --> 00:01:58,049
decoupled system but the way Symphony is

00:01:54,750 --> 00:02:00,420
built it's a series of loosely coupled

00:01:58,049 --> 00:02:02,700
components that are then assembled into

00:02:00,420 --> 00:02:04,950
an application framework but you can

00:02:02,700 --> 00:02:06,780
assemble those components together into

00:02:04,950 --> 00:02:08,520
different application frameworks which

00:02:06,780 --> 00:02:10,700
is how you get things like simply folds

00:02:08,520 --> 00:02:14,569
back side legs

00:02:10,700 --> 00:02:16,400
and Drupal 8 and that loose coupling is

00:02:14,569 --> 00:02:19,459
why simply to was really one of the

00:02:16,400 --> 00:02:22,370
Kickstarter's of the revolution PHP and

00:02:19,459 --> 00:02:27,140
the PHP Renaissance the last five or so

00:02:22,370 --> 00:02:30,440
years and the PHP 5.3 era simply was one

00:02:27,140 --> 00:02:33,020
of the early drivers of that and in fact

00:02:30,440 --> 00:02:35,840
was the incubator for composer who's

00:02:33,020 --> 00:02:39,980
worked with composer correct answer

00:02:35,840 --> 00:02:42,730
thank you so composure throughout of the

00:02:39,980 --> 00:02:45,080
symphony community they still a need and

00:02:42,730 --> 00:02:47,209
unlike the rest of the PHP world at the

00:02:45,080 --> 00:02:49,459
time decided let's not make this

00:02:47,209 --> 00:02:54,080
specific to us and that helped change

00:02:49,459 --> 00:02:57,230
the face of PHP so who are you know who

00:02:54,080 --> 00:03:01,400
are you he's Andrew okay

00:02:57,230 --> 00:03:03,680
I'm Larry good to meet you I am going to

00:03:01,400 --> 00:03:04,819
assume that you know Drupal 7 your

00:03:03,680 --> 00:03:07,370
Drupal developer you've worked with

00:03:04,819 --> 00:03:08,450
Drupal 7 before you may or may not know

00:03:07,370 --> 00:03:10,459
some of Drupal 8

00:03:08,450 --> 00:03:13,489
maybe we're down with a little you may

00:03:10,459 --> 00:03:15,829
work initiative use I'm not sure but you

00:03:13,489 --> 00:03:19,130
want to move down stack and by down

00:03:15,829 --> 00:03:21,890
stack I mean you want to get less UI in

00:03:19,130 --> 00:03:23,090
the way you want to do more framework

00:03:21,890 --> 00:03:25,130
you're going to work more straight

00:03:23,090 --> 00:03:27,200
application work less automation more

00:03:25,130 --> 00:03:29,590
code you want to be building pure

00:03:27,200 --> 00:03:32,780
applications not just CMS type stuff

00:03:29,590 --> 00:03:35,720
this who falls into generally this

00:03:32,780 --> 00:03:37,060
category subscribed all right I'm in the

00:03:35,720 --> 00:03:39,170
right room

00:03:37,060 --> 00:03:43,220
put your hands who has worked with

00:03:39,170 --> 00:03:45,859
Drupal 8 to some degree so far excellent

00:03:43,220 --> 00:03:47,560
who has know Drupal 8 experience of

00:03:45,859 --> 00:03:51,260
whatsoever

00:03:47,560 --> 00:03:52,790
all right and who here is actually

00:03:51,260 --> 00:03:58,670
simply person on triple person who's

00:03:52,790 --> 00:04:00,890
just here to troll me new it alright so

00:03:58,670 --> 00:04:02,959
the first question I often hear from

00:04:00,890 --> 00:04:05,120
Drupal developers looking at through

00:04:02,959 --> 00:04:06,590
palade is so am I gonna have to learn to

00:04:05,120 --> 00:04:09,139
Symphony in order to understand through

00:04:06,590 --> 00:04:12,230
pallate I hear this all the time and the

00:04:09,139 --> 00:04:14,180
answer is a resounding no if you're here

00:04:12,230 --> 00:04:15,859
to learn about Drupal 8 specifically

00:04:14,180 --> 00:04:16,780
there are plenty of other sessions to go

00:04:15,859 --> 00:04:19,209
to instead of this one

00:04:16,780 --> 00:04:21,489
this session is about symphony because

00:04:19,209 --> 00:04:25,720
as they said symphony is a decoupled

00:04:21,489 --> 00:04:29,230
system loosely coupled system so the way

00:04:25,720 --> 00:04:32,110
symphonies built you have the simply

00:04:29,230 --> 00:04:34,389
component libraries which are mostly

00:04:32,110 --> 00:04:35,830
decoupled mostly standalone some of them

00:04:34,389 --> 00:04:37,270
have a few dependencies but for the most

00:04:35,830 --> 00:04:42,100
part these are standalone components

00:04:37,270 --> 00:04:43,690
that you can use and then there's

00:04:42,100 --> 00:04:45,540
various partnered libraries like the

00:04:43,690 --> 00:04:48,100
trade templating system doctrine

00:04:45,540 --> 00:04:50,020
monologue various other projects that

00:04:48,100 --> 00:04:54,850
are not part of symphony but get used by

00:04:50,020 --> 00:04:56,350
symphony and then those get tied

00:04:54,850 --> 00:04:58,690
together by something called a simply

00:04:56,350 --> 00:05:00,940
framework bundle bundles we'll talk

00:04:58,690 --> 00:05:03,520
about our the symphony equivalents of

00:05:00,940 --> 00:05:06,310
modules essentially and this kind of

00:05:03,520 --> 00:05:08,050
glues everything together is roughly the

00:05:06,310 --> 00:05:09,610
equivalent of system module but for

00:05:08,050 --> 00:05:13,030
symphony is not quite that ugly though

00:05:09,610 --> 00:05:16,090
and then symphonies add-ons called

00:05:13,030 --> 00:05:17,979
bundles that you attach build whatever

00:05:16,090 --> 00:05:20,080
kind of application you want out of

00:05:17,979 --> 00:05:21,700
those some of the bigger ones are the

00:05:20,080 --> 00:05:23,590
CMS components a content management

00:05:21,700 --> 00:05:27,850
framework Drupal is actually using some

00:05:23,590 --> 00:05:30,190
of those two and that together builds

00:05:27,850 --> 00:05:30,940
the symphony full-stack framework and

00:05:30,190 --> 00:05:35,160
that's what we're going to be talking

00:05:30,940 --> 00:05:38,440
about today contrast with Drupal 8 uses

00:05:35,160 --> 00:05:39,789
some of the simply components but about

00:05:38,440 --> 00:05:43,030
a third of them actually it doesn't use

00:05:39,789 --> 00:05:45,820
the even the majority many of the same

00:05:43,030 --> 00:05:48,070
partnered libraries but then it also has

00:05:45,820 --> 00:05:50,169
its own component libraries view builds

00:05:48,070 --> 00:05:52,690
its own tuple core libraries that are

00:05:50,169 --> 00:05:54,640
just part of Google itself then it's

00:05:52,690 --> 00:05:58,330
extensions both the ones that they're

00:05:54,640 --> 00:06:00,760
bundled with cork and add-ons build

00:05:58,330 --> 00:06:05,560
distributions with that they are

00:06:00,760 --> 00:06:07,990
siblings Drupal tuple 8 Symphony Silex

00:06:05,560 --> 00:06:09,640
laravel are all siblings or cousins but

00:06:07,990 --> 00:06:11,470
they're not the same system they are

00:06:09,640 --> 00:06:14,229
different to work with and that's what

00:06:11,470 --> 00:06:16,140
we're talking about here so who wants to

00:06:14,229 --> 00:06:18,550
learn how to develop for Symphony

00:06:16,140 --> 00:06:21,039
good step one go read the documentation

00:06:18,550 --> 00:06:23,880
it's excellent really the Symphony

00:06:21,039 --> 00:06:26,370
documentation team does a great job

00:06:23,880 --> 00:06:28,300
their documentation is really solid

00:06:26,370 --> 00:06:30,669
especially for

00:06:28,300 --> 00:06:32,050
the components as well so I'm not gonna

00:06:30,669 --> 00:06:35,860
cover the things they're already covered

00:06:32,050 --> 00:06:37,750
there instead what I want to cover is

00:06:35,860 --> 00:06:40,240
coming from a doodle perspective

00:06:37,750 --> 00:06:42,250
here are the gotchas here are the things

00:06:40,240 --> 00:06:44,440
that are going to trip you up that are

00:06:42,250 --> 00:06:46,000
going to confuse you that you should be

00:06:44,440 --> 00:06:47,470
aware of when you go to read the

00:06:46,000 --> 00:06:51,400
documentation when you go to try and

00:06:47,470 --> 00:06:52,990
build a project you know what the things

00:06:51,400 --> 00:06:54,460
that you need to think about and be

00:06:52,990 --> 00:06:58,780
aware our difference then we're used to

00:06:54,460 --> 00:07:01,000
in verbal so first of all who is the

00:06:58,780 --> 00:07:03,610
system for well Drupal its primary

00:07:01,000 --> 00:07:06,340
audience is content strategists it's not

00:07:03,610 --> 00:07:08,560
developers it's people doing content

00:07:06,340 --> 00:07:11,199
modeling it's people managing the site

00:07:08,560 --> 00:07:12,810
long term it's people creating content

00:07:11,199 --> 00:07:16,469
through the site and curating content

00:07:12,810 --> 00:07:19,830
that's Drupal's primary audience its

00:07:16,469 --> 00:07:22,419
focus in what it tries to enable is

00:07:19,830 --> 00:07:24,819
letting people build stuff on the web

00:07:22,419 --> 00:07:26,289
without having to write code that is

00:07:24,819 --> 00:07:27,879
essentially tuples mission statement

00:07:26,289 --> 00:07:32,409
build cool stuff on the web without

00:07:27,879 --> 00:07:34,930
writing code simply by contrast is aimed

00:07:32,409 --> 00:07:37,000
at professional PHP developers it is

00:07:34,930 --> 00:07:40,569
aimed at people who are writing code for

00:07:37,000 --> 00:07:42,279
a living and liked it that way it's I do

00:07:40,569 --> 00:07:43,750
these students for bespoke applications

00:07:42,279 --> 00:07:45,580
that's custom alright what do you want

00:07:43,750 --> 00:07:47,590
to let's just build it let's go with it

00:07:45,580 --> 00:07:48,940
rather than take one application and

00:07:47,590 --> 00:07:52,449
customize it for a little bit for each

00:07:48,940 --> 00:07:54,219
client it's it's Reaper mission

00:07:52,449 --> 00:07:57,009
statement is essentially make writing

00:07:54,219 --> 00:07:58,840
code on the web easier not to avoid it

00:07:57,009 --> 00:08:01,240
but make it easier to do take care of

00:07:58,840 --> 00:08:02,650
the boring parts so you can focus on the

00:08:01,240 --> 00:08:06,069
interesting parts for your application

00:08:02,650 --> 00:08:08,379
and that distinction carries through

00:08:06,069 --> 00:08:12,719
pretty much the entire system that's the

00:08:08,379 --> 00:08:12,719
biggest shift coming from a Drupal world

00:08:13,800 --> 00:08:21,550
so both systems are highly configurable

00:08:17,879 --> 00:08:23,349
but the biggest difference in Drupal we

00:08:21,550 --> 00:08:25,990
have this big complex user interface

00:08:23,349 --> 00:08:28,659
lots of forms lots of configuration

00:08:25,990 --> 00:08:32,589
options lots of user friendly dialogs

00:08:28,659 --> 00:08:33,849
yet symphony not even a little the whole

00:08:32,589 --> 00:08:36,310
point of symphony is you're writing code

00:08:33,849 --> 00:08:38,320
you're editing things on disk there is

00:08:36,310 --> 00:08:40,240
configuration there files on disk

00:08:38,320 --> 00:08:43,659
usually they're yahoo files what the

00:08:40,240 --> 00:08:47,230
and the other things and there is no UI

00:08:43,659 --> 00:08:49,810
for them at all that configuration is

00:08:47,230 --> 00:08:53,220
not read at run time every time instead

00:08:49,810 --> 00:08:57,180
it's compiled into a generated PHP class

00:08:53,220 --> 00:08:59,050
by the development process and

00:08:57,180 --> 00:09:01,300
incorporated into the dependency

00:08:59,050 --> 00:09:04,060
injection container as parameters and

00:09:01,300 --> 00:09:06,160
properties this is how simply

00:09:04,060 --> 00:09:12,480
configuration works you edit files on

00:09:06,160 --> 00:09:14,440
disk and check them into game extensions

00:09:12,480 --> 00:09:16,390
for Symphony as you mentioned it calls

00:09:14,440 --> 00:09:21,130
bundles essentially the same concept as

00:09:16,390 --> 00:09:24,220
modules but even things like enabling

00:09:21,130 --> 00:09:26,320
one you do by hacking code you edit code

00:09:24,220 --> 00:09:28,510
for everything even just turning on

00:09:26,320 --> 00:09:31,300
extensions those bundles can have their

00:09:28,510 --> 00:09:33,720
own configuration and it's going to be

00:09:31,300 --> 00:09:37,000
files in fact the standard way to

00:09:33,720 --> 00:09:39,130
configure a bundle is look at its

00:09:37,000 --> 00:09:41,320
documentation copy and paste these lines

00:09:39,130 --> 00:09:44,610
into your configuration file to your

00:09:41,320 --> 00:09:47,140
llamo file and edit to suit your taste

00:09:44,610 --> 00:09:50,410
that is the way you configure bundles

00:09:47,140 --> 00:09:52,600
and sends me there are some bundles that

00:09:50,410 --> 00:09:54,970
provide some level of administrative

00:09:52,600 --> 00:09:59,310
interface the most popular which is the

00:09:54,970 --> 00:10:03,550
Samata admin bundle there are others

00:09:59,310 --> 00:10:06,070
this is a from their online demo of

00:10:03,550 --> 00:10:08,860
their dashboard it looks kind of fancy

00:10:06,070 --> 00:10:11,640
this is all a bundle none of this is

00:10:08,860 --> 00:10:14,020
coarse symphony in this case we've got

00:10:11,640 --> 00:10:17,529
you know let's the open comments and

00:10:14,020 --> 00:10:19,300
orders list of customers note this

00:10:17,529 --> 00:10:23,020
message here you can customize this

00:10:19,300 --> 00:10:24,970
dashboard by editing this llamó file the

00:10:23,020 --> 00:10:26,709
current dashboard presents items blah

00:10:24,970 --> 00:10:29,050
blah blah blah if you want to make any

00:10:26,709 --> 00:10:31,209
changes to this admin whatsoever you're

00:10:29,050 --> 00:10:34,500
editing a file you're editing a template

00:10:31,209 --> 00:10:37,000
you're editing a configuration file

00:10:34,500 --> 00:10:40,720
everything you do is going to be crack

00:10:37,000 --> 00:10:43,029
open your code editor and in this case

00:10:40,720 --> 00:10:45,070
we're showing some really just basic

00:10:43,029 --> 00:10:47,020
roll-ups of information here so

00:10:45,070 --> 00:10:50,370
customers number of pages number of

00:10:47,020 --> 00:10:50,370
orders these just data objects

00:10:51,199 --> 00:10:56,279
we've got there the post list for post a

00:10:54,930 --> 00:10:58,410
specific type of content on their

00:10:56,279 --> 00:11:03,480
particular demo app there's no generic

00:10:58,410 --> 00:11:07,410
concept of post in Symphony is an edit

00:11:03,480 --> 00:11:10,319
screen for cars again part of their demo

00:11:07,410 --> 00:11:12,509
app that you know looks a little bit

00:11:10,319 --> 00:11:14,100
fancy this is all hard-coded in this

00:11:12,509 --> 00:11:16,759
bundle there is no configuration here

00:11:14,100 --> 00:11:23,189
there is no you know fields this is

00:11:16,759 --> 00:11:27,449
handcrafted interface it's got a user

00:11:23,189 --> 00:11:28,980
interface or a user admin interface but

00:11:27,449 --> 00:11:30,870
it doesn't actually provide users

00:11:28,980 --> 00:11:32,899
Symphony self does not provide users

00:11:30,870 --> 00:11:35,370
out-of-the-box this is an add-on as well

00:11:32,899 --> 00:11:38,250
so in Drupal we used two modules like

00:11:35,370 --> 00:11:40,350
organic groups that let you you know

00:11:38,250 --> 00:11:42,029
take existing content objects and who

00:11:40,350 --> 00:11:44,670
the UI enhanced them and turn them into

00:11:42,029 --> 00:11:47,220
these clusters and now users to be

00:11:44,670 --> 00:11:49,259
associated with them and so forth we

00:11:47,220 --> 00:11:50,610
used two modules like paddles which give

00:11:49,259 --> 00:11:53,370
you an incredible amount of power

00:11:50,610 --> 00:11:56,370
through the UI to define complex layout

00:11:53,370 --> 00:11:58,139
rules and pull out content from various

00:11:56,370 --> 00:11:59,189
parts of the system based on various

00:11:58,139 --> 00:12:02,129
business rules and you build these

00:11:59,189 --> 00:12:05,459
complex configured rule engines

00:12:02,129 --> 00:12:08,160
essentially for layout no there is no

00:12:05,459 --> 00:12:09,870
such thing in symphony it is not the way

00:12:08,160 --> 00:12:11,519
the system is designed to work it's just

00:12:09,870 --> 00:12:13,769
culturally against the way symphony

00:12:11,519 --> 00:12:15,420
works to do something like that you want

00:12:13,769 --> 00:12:16,949
to change your layout go edit the

00:12:15,420 --> 00:12:21,870
template file that's what it's there for

00:12:16,949 --> 00:12:24,720
I mentioned even things like users are

00:12:21,870 --> 00:12:27,000
not baked into symphony you can roll

00:12:24,720 --> 00:12:30,720
your own users if you want that's not

00:12:27,000 --> 00:12:33,089
that hard or most people use this bundle

00:12:30,720 --> 00:12:35,910
called Foss user bundle which provides

00:12:33,089 --> 00:12:39,540
something vaguely on the same lines as

00:12:35,910 --> 00:12:40,800
tuples user support ish you know gives

00:12:39,540 --> 00:12:44,040
your users gives you a couple of admin

00:12:40,800 --> 00:12:45,959
screens that you can wire up but this is

00:12:44,040 --> 00:12:49,110
an add-on actually the symphony project

00:12:45,959 --> 00:12:52,110
I worked on last didn't use it because

00:12:49,110 --> 00:12:53,790
we didn't need users logging in so we

00:12:52,110 --> 00:12:55,189
didn't have it we just did something

00:12:53,790 --> 00:12:57,509
completely different for authentication

00:12:55,189 --> 00:13:00,120
incidentally this is Foss here stands

00:12:57,509 --> 00:13:01,500
for friends of Symphony Symphony it's

00:13:00,120 --> 00:13:02,720
kind of the closest equivalent Symphony

00:13:01,500 --> 00:13:04,760
has to contribute

00:13:02,720 --> 00:13:08,100
Symphony does not have a single

00:13:04,760 --> 00:13:12,780
canonical universe of atoms the way

00:13:08,100 --> 00:13:15,360
drupal.org is for drupal so there are a

00:13:12,780 --> 00:13:17,310
number of useful bundles that are under

00:13:15,360 --> 00:13:20,280
the Friends of Symphony banners stuff

00:13:17,310 --> 00:13:23,250
the github fruit really it's kind of

00:13:20,280 --> 00:13:24,920
high-level well maintained bundles but

00:13:23,250 --> 00:13:30,690
the most part you find them randomly on

00:13:24,920 --> 00:13:33,510
packages or are via Google so when

00:13:30,690 --> 00:13:35,640
you're developing for symphony most of

00:13:33,510 --> 00:13:36,390
your dev tools are going to be from the

00:13:35,640 --> 00:13:39,840
command line

00:13:36,390 --> 00:13:42,360
dupa we have a lot of tools in the UI

00:13:39,840 --> 00:13:45,690
you switch your modes in the UI and so

00:13:42,360 --> 00:13:48,690
forth and in symphony they're all

00:13:45,690 --> 00:13:51,740
command line tools with one exception

00:13:48,690 --> 00:13:54,060
which is the dev toolbar they haven't

00:13:51,740 --> 00:13:58,140
insane phanie which is actually really

00:13:54,060 --> 00:13:59,820
really really cool a lot of things are

00:13:58,140 --> 00:14:03,690
done with code scaffolding Symphony

00:13:59,820 --> 00:14:07,050
itself ships with a command line console

00:14:03,690 --> 00:14:09,660
tool and a lot of commands built on that

00:14:07,050 --> 00:14:11,220
many of which are cogeneration so say I

00:14:09,660 --> 00:14:13,980
want to spin up a new entity or to spin

00:14:11,220 --> 00:14:16,050
up a new controller New York various

00:14:13,980 --> 00:14:17,790
other things and it's actually really

00:14:16,050 --> 00:14:20,370
useful you're gonna use that a lot

00:14:17,790 --> 00:14:24,390
developing for Symphony and for Drupal 8

00:14:20,370 --> 00:14:25,470
to a who's heard of Drupal console those

00:14:24,390 --> 00:14:26,820
of you who don't have your hands up

00:14:25,470 --> 00:14:27,690
google it I think it's just Google

00:14:26,820 --> 00:14:30,690
console com

00:14:27,690 --> 00:14:33,230
it's an excellent tool to build on the

00:14:30,690 --> 00:14:37,200
same symphony console components and

00:14:33,230 --> 00:14:39,330
inspired by the symphony console the

00:14:37,200 --> 00:14:41,010
developers for actually people who have

00:14:39,330 --> 00:14:43,410
done supposed symphony and Google work

00:14:41,010 --> 00:14:44,760
and it has a lot of scaffolding tools as

00:14:43,410 --> 00:14:48,650
well what you're going to want to Drupal

00:14:44,760 --> 00:14:50,580
8 we also have this dev product

00:14:48,650 --> 00:14:54,120
development versus production toggle

00:14:50,580 --> 00:14:56,790
concept and symphony in Drupal we have

00:14:54,120 --> 00:14:58,920
these caches you can turn on and off and

00:14:56,790 --> 00:15:01,890
CSS segregation you can turn on and off

00:14:58,920 --> 00:15:03,180
and you know these settings use you know

00:15:01,890 --> 00:15:04,680
error reporter you can turn on and off

00:15:03,180 --> 00:15:07,290
and do all of these things independently

00:15:04,680 --> 00:15:09,420
of each other and that means there

00:15:07,290 --> 00:15:11,850
really is no development node and

00:15:09,420 --> 00:15:13,530
production mode and we tried to get that

00:15:11,850 --> 00:15:14,500
into Drupal 8 and got pushed back

00:15:13,530 --> 00:15:17,890
because

00:15:14,500 --> 00:15:18,880
Oh to to course brain they're wrong not

00:15:17,890 --> 00:15:21,610
that I just wanna payments or anything

00:15:18,880 --> 00:15:25,180
in Symphony there's a development mode

00:15:21,610 --> 00:15:26,860
and a production mode and never the

00:15:25,180 --> 00:15:30,580
twain shall meet you have separate

00:15:26,860 --> 00:15:32,140
configuration files for them and that

00:15:30,580 --> 00:15:34,930
that's what it comes down to you don't

00:15:32,140 --> 00:15:37,180
have a the ability to finagle little

00:15:34,930 --> 00:15:39,070
bits here and there as easily as you do

00:15:37,180 --> 00:15:42,540
and ruble which for the kind of stuff

00:15:39,070 --> 00:15:42,540
you're doing with Symphony is just fine

00:15:43,560 --> 00:15:49,360
that also means that when you're doing

00:15:47,370 --> 00:15:51,580
when you're switching to production mode

00:15:49,360 --> 00:15:54,640
you need to force rebuild all of your

00:15:51,580 --> 00:15:56,110
caches they do not self clear weight

00:15:54,640 --> 00:15:58,540
like in Drupal if you have an empty

00:15:56,110 --> 00:16:00,880
cache for your container or for

00:15:58,540 --> 00:16:03,370
generated content or for CSS and

00:16:00,880 --> 00:16:05,200
JavaScript aggregation Drupal will just

00:16:03,370 --> 00:16:07,090
rebuild the stuff on the fly as it needs

00:16:05,200 --> 00:16:09,430
to when you're good in Symphony the

00:16:07,090 --> 00:16:11,290
production mode you have to rebuild it

00:16:09,430 --> 00:16:14,380
manually it never happens automatically

00:16:11,290 --> 00:16:15,820
which makes it a lot faster because that

00:16:14,380 --> 00:16:18,250
has to do less work and think about

00:16:15,820 --> 00:16:22,960
fewer things but you do you have to

00:16:18,250 --> 00:16:25,390
think about them instead architectural

00:16:22,960 --> 00:16:30,100
II it's a lot of changes here a lot of

00:16:25,390 --> 00:16:31,810
differences first one where all those

00:16:30,100 --> 00:16:35,940
triple7 developers out there we're used

00:16:31,810 --> 00:16:38,740
to functions right not a single one

00:16:35,940 --> 00:16:41,290
Symphony is a completely object-oriented

00:16:38,740 --> 00:16:42,220
system there are no functions anywhere

00:16:41,290 --> 00:16:45,130
in the codebase the best of my knowledge

00:16:42,220 --> 00:16:48,340
michele am i right on that okay Michele

00:16:45,130 --> 00:16:51,820
says I'm right there are static methods

00:16:48,340 --> 00:16:53,500
in a couple places but not many so it is

00:16:51,820 --> 00:16:56,740
a completely Oh system if you are used

00:16:53,500 --> 00:16:59,970
to writing functions get over it if

00:16:56,740 --> 00:17:02,080
you're working with Symphony instead

00:16:59,970 --> 00:17:05,050
most of your logic is going to end

00:17:02,080 --> 00:17:07,600
services meaningful logic belongs in

00:17:05,050 --> 00:17:10,900
services what is a service a service is

00:17:07,600 --> 00:17:13,840
a stateless business logic object it

00:17:10,900 --> 00:17:15,940
contains no data it does not change once

00:17:13,840 --> 00:17:17,530
it's in Stan she ated it is wired into

00:17:15,940 --> 00:17:19,990
your dependency injection container and

00:17:17,530 --> 00:17:21,670
that is your application the vast

00:17:19,990 --> 00:17:24,450
majority of your business logic in

00:17:21,670 --> 00:17:26,560
Symphony belongs in stateless services

00:17:24,450 --> 00:17:27,600
everything else is glue code to connect

00:17:26,560 --> 00:17:30,400
those two

00:17:27,600 --> 00:17:32,710
this is very different than people seven

00:17:30,400 --> 00:17:34,420
where we just had piles of functions

00:17:32,710 --> 00:17:36,100
lying around and some of them collected

00:17:34,420 --> 00:17:38,500
data over time with statics and some of

00:17:36,100 --> 00:17:42,700
them didn't and there are my god

00:17:38,500 --> 00:17:45,040
Global's yeah none of that in symphony

00:17:42,700 --> 00:17:47,050
things are stateless services you want

00:17:45,040 --> 00:17:48,460
to architect that way and incidentally

00:17:47,050 --> 00:17:51,070
if you're developing for Drupal 8 you do

00:17:48,460 --> 00:17:56,770
the same thing this applies equally well

00:17:51,070 --> 00:18:00,010
to both systems the configuration in

00:17:56,770 --> 00:18:02,140
symphony is very unappealing compared to

00:18:00,010 --> 00:18:03,340
what we're used to in Drupal so I

00:18:02,140 --> 00:18:05,410
mentioned that there's configuration

00:18:03,340 --> 00:18:08,890
files usually yamo usually being the

00:18:05,410 --> 00:18:10,810
operative phrase there Symphony actually

00:18:08,890 --> 00:18:13,660
supports PHP XML diamo

00:18:10,810 --> 00:18:16,180
or annotations for nearly all

00:18:13,660 --> 00:18:19,390
configuration it is possible to

00:18:16,180 --> 00:18:23,680
configure a symphony application using

00:18:19,390 --> 00:18:27,490
any of these exclusively most sites will

00:18:23,680 --> 00:18:29,800
use mix of yamo and annotations in

00:18:27,490 --> 00:18:32,080
practice but that's not a hard rule

00:18:29,800 --> 00:18:34,630
please please please pick exactly one

00:18:32,080 --> 00:18:38,950
for your own project save yourself a lot

00:18:34,630 --> 00:18:41,260
of pain and anguish that said you may

00:18:38,950 --> 00:18:44,140
run into third-party bundles that you

00:18:41,260 --> 00:18:46,060
install where this one decided to use

00:18:44,140 --> 00:18:49,150
XML for its configuration and this one

00:18:46,060 --> 00:18:51,970
encourages annotations and this one uses

00:18:49,150 --> 00:18:53,640
PHP just to be different most of them I

00:18:51,970 --> 00:18:56,380
think at this point use yamo and

00:18:53,640 --> 00:18:57,670
annotations but you have to be familiar

00:18:56,380 --> 00:19:01,690
with all of them because different

00:18:57,670 --> 00:19:04,600
bundles may make different decisions for

00:19:01,690 --> 00:19:06,610
your own work I do recommend yamo for as

00:19:04,600 --> 00:19:09,130
much as possible if for no other reason

00:19:06,610 --> 00:19:11,710
then that's what Drupal is using Drupal

00:19:09,130 --> 00:19:14,320
is far less forgiving in this regard as

00:19:11,710 --> 00:19:16,870
far more opinionated and our

00:19:14,320 --> 00:19:18,640
configuration is all diamo period the

00:19:16,870 --> 00:19:22,930
Drupal way in this case is actually much

00:19:18,640 --> 00:19:24,610
stricter than the symphonie way that

00:19:22,930 --> 00:19:27,580
said you're not going to get away from

00:19:24,610 --> 00:19:29,890
annotations it in practice I don't think

00:19:27,580 --> 00:19:32,410
anyone does a completely annotation free

00:19:29,890 --> 00:19:33,549
Symphony these days so you're going to

00:19:32,410 --> 00:19:36,639
have to work with those

00:19:33,549 --> 00:19:38,619
or another but really when it comes down

00:19:36,639 --> 00:19:41,049
to in other cases we're doing some kind

00:19:38,619 --> 00:19:43,710
of meta programming and Drupal that meta

00:19:41,049 --> 00:19:47,110
programming is be done via the UI and

00:19:43,710 --> 00:19:50,799
simply it's being done via llamó by meta

00:19:47,110 --> 00:19:53,289
programming I mean configuration that is

00:19:50,799 --> 00:19:55,269
pretty much code on its own but then

00:19:53,289 --> 00:19:57,669
drives the real code that's essentially

00:19:55,269 --> 00:19:59,289
meta programming you're doing the same

00:19:57,669 --> 00:20:01,360
kind of thing in both cases but in

00:19:59,289 --> 00:20:06,399
Drupal it's all via the interface and

00:20:01,360 --> 00:20:08,710
simply your hand editing files how about

00:20:06,399 --> 00:20:10,899
cleaning the redeeming doesn't actually

00:20:08,710 --> 00:20:13,269
exist as much in symphony because you

00:20:10,899 --> 00:20:16,149
don't really have swappable themes the

00:20:13,269 --> 00:20:18,190
way you do in Drupal there are some

00:20:16,149 --> 00:20:20,559
bundles but to have things called themes

00:20:18,190 --> 00:20:22,659
but I've never worked with them I don't

00:20:20,559 --> 00:20:25,600
quite see their purpose compared to the

00:20:22,659 --> 00:20:27,210
way Google uses them so templating

00:20:25,600 --> 00:20:30,340
really would be a better phrase here

00:20:27,210 --> 00:20:32,700
which brings up probably the biggest

00:20:30,340 --> 00:20:35,340
difference for front-end folks between

00:20:32,700 --> 00:20:38,859
Drupal and eversion and symphony that

00:20:35,340 --> 00:20:43,330
Yoko you only get one template period

00:20:38,859 --> 00:20:44,769
that's in 1d Drupal we have this you

00:20:43,330 --> 00:20:46,779
know stacked Russian doll model where

00:20:44,769 --> 00:20:48,129
you you rendered this part but this

00:20:46,779 --> 00:20:50,169
template in this part for this template

00:20:48,129 --> 00:20:51,309
and bring those together to the larger

00:20:50,169 --> 00:20:52,989
piece and render that for the template

00:20:51,309 --> 00:20:55,779
and break that into a larger piece yet

00:20:52,989 --> 00:20:59,970
that's just not how symphony works at

00:20:55,779 --> 00:21:05,919
all it has a template only one template

00:20:59,970 --> 00:21:08,139
how does that work it works through

00:21:05,919 --> 00:21:09,519
twiggy's inheritance system you don't

00:21:08,139 --> 00:21:11,049
have to use too big with symphony but

00:21:09,519 --> 00:21:13,749
pretty much everyone does when they're

00:21:11,049 --> 00:21:16,210
doing HTML output how does this

00:21:13,749 --> 00:21:17,859
inheritance system work well let's look

00:21:16,210 --> 00:21:22,029
at the default out of the box

00:21:17,859 --> 00:21:25,989
demo index.html template invitationals

00:21:22,029 --> 00:21:29,950
big in symphony it's not quite fitting

00:21:25,989 --> 00:21:32,470
here so we've got our markup and we've

00:21:29,950 --> 00:21:34,749
got some placeholders for it but boys

00:21:32,470 --> 00:21:38,409
this block thing here and stylesheets

00:21:34,749 --> 00:21:42,119
are coming after the content how does

00:21:38,409 --> 00:21:42,119
that work that makes no sense at all

00:21:42,330 --> 00:21:46,539
some of you should recognize this at

00:21:44,259 --> 00:21:47,230
this point the important thing here is

00:21:46,539 --> 00:21:50,760
this

00:21:47,230 --> 00:21:53,470
extends keyword extends in twig is

00:21:50,760 --> 00:21:57,250
pretty much the same as extends in

00:21:53,470 --> 00:21:58,380
object-oriented code base HTML twig

00:21:57,250 --> 00:22:00,850
looks like this

00:21:58,380 --> 00:22:05,530
there's our template there's our actual

00:22:00,850 --> 00:22:08,620
file and we call out these blocks called

00:22:05,530 --> 00:22:11,290
title stylesheet this title and some

00:22:08,620 --> 00:22:13,870
default values stylesheet does not body

00:22:11,290 --> 00:22:16,270
JavaScript block here has absolutely

00:22:13,870 --> 00:22:19,630
nothing to do with Laxus Drupal defines

00:22:16,270 --> 00:22:21,190
them not not even the slightest blocked

00:22:19,630 --> 00:22:26,620
in this case are really closer to

00:22:21,190 --> 00:22:29,290
methods that back in this template we

00:22:26,620 --> 00:22:32,440
are extending this template and then

00:22:29,290 --> 00:22:35,020
overriding the block the body block with

00:22:32,440 --> 00:22:36,280
this template fragment and overriding

00:22:35,020 --> 00:22:39,070
the stylesheet block with this template

00:22:36,280 --> 00:22:41,260
fragment and not overriding the title so

00:22:39,070 --> 00:22:45,340
we just get the default title in the

00:22:41,260 --> 00:22:47,590
parent template this is how you do more

00:22:45,340 --> 00:22:51,250
complex advanced theming for different

00:22:47,590 --> 00:22:53,380
parts of the page in symphony this

00:22:51,250 --> 00:22:55,750
capability does exist in Drupal because

00:22:53,380 --> 00:22:57,490
it's big it's a standard feature of twig

00:22:55,750 --> 00:23:00,400
we're just not using it all that much in

00:22:57,490 --> 00:23:03,790
Drupal 8 that said I encourage you to do

00:23:00,400 --> 00:23:05,290
so not for this not to try and turn the

00:23:03,790 --> 00:23:06,480
entire page into one template Drupal

00:23:05,290 --> 00:23:09,760
would not like well not like that

00:23:06,480 --> 00:23:13,150
however you can have custom versions of

00:23:09,760 --> 00:23:16,870
templates say have a node HTML that wig

00:23:13,150 --> 00:23:19,809
for theming nodes and then extend that

00:23:16,870 --> 00:23:22,510
for nodes of type article nodes of type

00:23:19,809 --> 00:23:24,250
page nodes of type event and use extends

00:23:22,510 --> 00:23:27,160
that way core is not really doing that

00:23:24,250 --> 00:23:30,640
you are welcome to do so and contribs

00:23:27,160 --> 00:23:32,530
highly encourage it but we do not go as

00:23:30,640 --> 00:23:34,480
far with it and cannot go as far with it

00:23:32,530 --> 00:23:41,200
as symphony does where you've got this

00:23:34,480 --> 00:23:46,030
one template per request let's talk

00:23:41,200 --> 00:23:47,290
about extending symphony now now Drupal

00:23:46,030 --> 00:23:49,419
developers what is the first thing you

00:23:47,290 --> 00:23:54,429
learned about Drupal about developing

00:23:49,419 --> 00:23:56,020
for Drupal what's that clear it when it

00:23:54,429 --> 00:23:57,820
does clear cache okay so what's the

00:23:56,020 --> 00:24:00,710
second thing you learn

00:23:57,820 --> 00:24:02,300
don't hack cord that's right if you're

00:24:00,710 --> 00:24:04,850
developing for Drupal every time you

00:24:02,300 --> 00:24:07,940
hack or God kills a kitten don't do that

00:24:04,850 --> 00:24:13,210
please think of the kittens in Symphony

00:24:07,940 --> 00:24:13,210
you're exactly supposed to do that what

00:24:15,760 --> 00:24:20,240
how do you enable a new bundle in

00:24:17,960 --> 00:24:23,450
Symphony well you have this app Colonel

00:24:20,240 --> 00:24:26,030
Doug PHP class that is provided by the

00:24:23,450 --> 00:24:28,790
system out of the box and oh you want to

00:24:26,030 --> 00:24:30,800
add more bundle sphere system you edit

00:24:28,790 --> 00:24:34,370
this file and just add a new you new

00:24:30,800 --> 00:24:36,230
whatever the bundles class name is you

00:24:34,370 --> 00:24:38,180
can have bundles that are only run in

00:24:36,230 --> 00:24:40,670
certain environments so only like the

00:24:38,180 --> 00:24:42,980
web profiler and this distribution

00:24:40,670 --> 00:24:46,780
bundle those are only active in dev and

00:24:42,980 --> 00:24:48,830
tests and mows instead of in prod mode

00:24:46,780 --> 00:24:51,770
you want to do it differently one

00:24:48,830 --> 00:24:55,250
structures differently go ahead you want

00:24:51,770 --> 00:24:56,240
to network spending a base class here

00:24:55,250 --> 00:24:58,130
you want to override something else from

00:24:56,240 --> 00:25:03,190
the base class go right ahead

00:24:58,130 --> 00:25:03,190
you're encouraged to do so this is weird

00:25:03,400 --> 00:25:08,390
look at that simply project how it's

00:25:05,480 --> 00:25:10,700
actually put together again this is the

00:25:08,390 --> 00:25:14,450
symphony standard division so we've got

00:25:10,700 --> 00:25:16,130
this basic project this is the defaults

00:25:14,450 --> 00:25:18,500
install have done no customization at

00:25:16,130 --> 00:25:21,020
all to this we have an app directory bin

00:25:18,500 --> 00:25:22,700
source vendor and web and then our

00:25:21,020 --> 00:25:26,210
composer files put everything together

00:25:22,700 --> 00:25:28,580
so bin is a couple of it's like where

00:25:26,210 --> 00:25:29,720
the command line tool lives there's a

00:25:28,580 --> 00:25:34,970
few other things they are it's fairly

00:25:29,720 --> 00:25:38,180
uninteresting web however contains not

00:25:34,970 --> 00:25:40,670
all that much app dot PHP app dev dot

00:25:38,180 --> 00:25:42,700
PHP these are your front controllers the

00:25:40,670 --> 00:25:44,630
equivalent of index.php for drupal and

00:25:42,700 --> 00:25:47,030
these are actually hard coded

00:25:44,630 --> 00:25:49,370
differently this one is hard coded to

00:25:47,030 --> 00:25:51,800
prod node this one is hard coded to dev

00:25:49,370 --> 00:25:54,740
mode so you want to look at your site in

00:25:51,800 --> 00:25:57,110
dev mode you go to your site comm slash

00:25:54,740 --> 00:26:00,350
app dev cup khp slash blah blah blah

00:25:57,110 --> 00:26:01,820
blah blah blah blah you oh you don't

00:26:00,350 --> 00:26:02,960
like it this way you want to use an

00:26:01,820 --> 00:26:05,030
environment variable or something

00:26:02,960 --> 00:26:07,429
instead to switch it go ahead and hack

00:26:05,030 --> 00:26:08,720
these files really I know people who do

00:26:07,429 --> 00:26:10,309
whatever my colleagues a pounds here

00:26:08,720 --> 00:26:14,840
does it's fine

00:26:10,309 --> 00:26:17,509
and there's nothing else here in PHP

00:26:14,840 --> 00:26:19,369
code Drupal puts all of its PHP code and

00:26:17,509 --> 00:26:22,960
everything else in the dock root simply

00:26:19,369 --> 00:26:25,309
puts almost nothing in the doctorate

00:26:22,960 --> 00:26:26,479
this is really the only PHP files you

00:26:25,309 --> 00:26:28,700
can have you should probably skip out

00:26:26,479 --> 00:26:30,950
the config dot PHP after you set it up

00:26:28,700 --> 00:26:34,849
initially it's really just a setup

00:26:30,950 --> 00:26:37,039
wizard if a bundle ships with assets

00:26:34,849 --> 00:26:39,769
like CSS or JavaScript those will get

00:26:37,039 --> 00:26:42,679
sim linked in here or generated files

00:26:39,769 --> 00:26:50,359
produced and dumped in here by what if

00:26:42,679 --> 00:26:51,379
your compiled commands vendor everyone

00:26:50,359 --> 00:26:52,940
who raised their hand for composer

00:26:51,379 --> 00:26:55,909
should know this this is where your

00:26:52,940 --> 00:26:57,559
composer downloaded packages go do not

00:26:55,909 --> 00:27:01,099
check this into your repository ever

00:26:57,559 --> 00:27:03,249
Drupal is doing this wrong yes and do

00:27:01,099 --> 00:27:06,859
not edit anything in this directory ever

00:27:03,249 --> 00:27:09,139
but note Symphony itself is in here

00:27:06,859 --> 00:27:11,359
Symphony itself as a dependency of your

00:27:09,139 --> 00:27:13,849
project everything that is outside of

00:27:11,359 --> 00:27:17,479
here is boilerplate that was provided

00:27:13,849 --> 00:27:20,799
for you please hack completely different

00:27:17,479 --> 00:27:26,330
than the way you approach a Drupal site

00:27:20,799 --> 00:27:28,190
the app directory is where your

00:27:26,330 --> 00:27:30,529
configuration lives so these are those

00:27:28,190 --> 00:27:33,619
configuration files was talking about by

00:27:30,529 --> 00:27:35,509
default yamo config tamil is your shared

00:27:33,619 --> 00:27:37,399
configuration and then we have a

00:27:35,509 --> 00:27:39,889
separate config file for every

00:27:37,399 --> 00:27:42,139
environment so we can have different

00:27:39,889 --> 00:27:45,139
configuration for devs and test and prod

00:27:42,139 --> 00:27:50,419
and this is where you put it to override

00:27:45,139 --> 00:27:52,609
that default configuration you also have

00:27:50,419 --> 00:27:54,799
your routing information is here in the

00:27:52,609 --> 00:27:56,210
gamma file separate routing for

00:27:54,799 --> 00:27:59,960
development so you can have paths that

00:27:56,210 --> 00:28:01,580
only exist in dev mode I'm not sure if

00:27:59,960 --> 00:28:03,379
you can do it the services offhand to be

00:28:01,580 --> 00:28:06,039
perfectly honest but you know these are

00:28:03,379 --> 00:28:09,349
all your files edit them as needed and

00:28:06,039 --> 00:28:14,029
those will all get compiled into a PHP

00:28:09,349 --> 00:28:15,409
class that lives in cache now Drupal 8

00:28:14,029 --> 00:28:17,570
is doing some of this to where it's

00:28:15,409 --> 00:28:17,989
actually generating PHP classes for

00:28:17,570 --> 00:28:20,749
Twigg

00:28:17,989 --> 00:28:24,410
so all twit files get compiled into PHP

00:28:20,749 --> 00:28:26,090
put on disk and then that's what runs

00:28:24,410 --> 00:28:27,410
the dependency injection container and

00:28:26,090 --> 00:28:29,090
all of your configuration gets compiled

00:28:27,410 --> 00:28:32,120
together into one gigantic multi

00:28:29,090 --> 00:28:34,220
thousand line class which is actually

00:28:32,120 --> 00:28:36,620
pretty fast as long as it's not larger

00:28:34,220 --> 00:28:43,820
than your a PC cache size yes I tested

00:28:36,620 --> 00:28:47,180
this and then resources resources or

00:28:43,820 --> 00:28:49,880
Symphony calls assets so templates CSS

00:28:47,180 --> 00:28:53,960
files JavaScript files all that kind of

00:28:49,880 --> 00:28:57,590
stuff our resources and your top level

00:28:53,960 --> 00:28:59,840
global templates and CSS and so forth

00:28:57,590 --> 00:29:01,910
will go here all of this is yours to

00:28:59,840 --> 00:29:05,360
edit including the app kernel we saw

00:29:01,910 --> 00:29:08,960
before you may not need to but all of

00:29:05,360 --> 00:29:13,520
this is yours to edit and then the

00:29:08,960 --> 00:29:15,350
source directory this is your

00:29:13,520 --> 00:29:16,670
application this is where your code for

00:29:15,350 --> 00:29:19,250
this application goes this is the stuff

00:29:16,670 --> 00:29:23,570
that does get checked into your gett

00:29:19,250 --> 00:29:25,070
repository you can put any almost any

00:29:23,570 --> 00:29:28,670
structure you want here to be perfectly

00:29:25,070 --> 00:29:31,160
honest the convention is to have a

00:29:28,670 --> 00:29:33,020
single bundle called app bundle which

00:29:31,160 --> 00:29:35,600
contains the code specific to this

00:29:33,020 --> 00:29:37,580
particular application that's not a

00:29:35,600 --> 00:29:39,920
requirement that's justice the

00:29:37,580 --> 00:29:42,620
recommended convention this is in

00:29:39,920 --> 00:29:44,870
contrast the Drupal where we'll have a

00:29:42,620 --> 00:29:46,460
custom module which is really no

00:29:44,870 --> 00:29:47,630
different than any other module it's

00:29:46,460 --> 00:29:49,160
just where we dump stuff for a

00:29:47,630 --> 00:29:51,620
particular site but you're encouraged to

00:29:49,160 --> 00:29:54,230
break stuff up into separate modules and

00:29:51,620 --> 00:29:57,800
there's no no one module is special over

00:29:54,230 --> 00:30:00,980
another in symphony your site-specific

00:29:57,800 --> 00:30:02,420
stuff is just all in one big blob bundle

00:30:00,980 --> 00:30:04,520
here and that's actually going to be a

00:30:02,420 --> 00:30:08,809
lot of code whereas in Drupal we try to

00:30:04,520 --> 00:30:11,750
keep it to a minimum the discovery for

00:30:08,809 --> 00:30:13,160
that all looks for as a class actually

00:30:11,750 --> 00:30:15,500
doesn't even look for we specified this

00:30:13,160 --> 00:30:17,720
class in the app kernel we just named it

00:30:15,500 --> 00:30:21,800
and it loads that class and the auto

00:30:17,720 --> 00:30:24,640
loader finds it and poof we're done and

00:30:21,800 --> 00:30:27,830
then it builds some stuff off of that

00:30:24,640 --> 00:30:30,410
namespace automatically so that is your

00:30:27,830 --> 00:30:32,500
discovery is you have a class with that

00:30:30,410 --> 00:30:37,049
name and you reference it from your

00:30:32,500 --> 00:30:40,000
you're young code if you're building a

00:30:37,049 --> 00:30:43,090
reusable bundle of some kind as part of

00:30:40,000 --> 00:30:45,000
a project which just like an in Drupal

00:30:43,090 --> 00:30:47,080
I'd say you can do that great to do so

00:30:45,000 --> 00:30:49,900
you put that in a separate repository

00:30:47,080 --> 00:30:51,880
and pull that in via composer so one

00:30:49,900 --> 00:30:54,070
project may have three four or five

00:30:51,880 --> 00:30:56,470
composer repositories that go with it

00:30:54,070 --> 00:30:58,510
your actual project repository and then

00:30:56,470 --> 00:30:59,919
a couple of add-on bundles you build you

00:30:58,510 --> 00:31:01,419
may or may not be releasing maybe you're

00:30:59,919 --> 00:31:03,100
sharing to other internal projects

00:31:01,419 --> 00:31:05,679
whatever those are then considered

00:31:03,100 --> 00:31:08,110
third-party dependencies the vast

00:31:05,679 --> 00:31:10,720
majority of the code in your project

00:31:08,110 --> 00:31:13,390
will live in the vendor directory as a

00:31:10,720 --> 00:31:17,950
third-party dependency and that's a good

00:31:13,390 --> 00:31:20,409
thing so given that as you're going

00:31:17,950 --> 00:31:21,460
through your project as you're you know

00:31:20,409 --> 00:31:24,700
going through your development process

00:31:21,460 --> 00:31:27,659
in Drupal it usually looks like this

00:31:24,700 --> 00:31:30,400
push buttons write some custom code

00:31:27,659 --> 00:31:33,909
clear the cache push some more buttons

00:31:30,400 --> 00:31:38,110
clear the cache again clear the cache

00:31:33,909 --> 00:31:43,630
another time just for good measure then

00:31:38,110 --> 00:31:44,770
check it in and you know depending on

00:31:43,630 --> 00:31:47,169
your version you may have a feature

00:31:44,770 --> 00:31:50,350
export you have to do in Drupal 7 or CMI

00:31:47,169 --> 00:31:52,720
export in Drupal 8 but same idea and

00:31:50,350 --> 00:31:55,299
symphony you write code well in dev mode

00:31:52,720 --> 00:31:57,760
and for the most part it just kind of

00:31:55,299 --> 00:31:59,080
works immediately there are a few things

00:31:57,760 --> 00:32:02,679
you do need to manually clear in dev

00:31:59,080 --> 00:32:05,350
mode which is annoying but the most part

00:32:02,679 --> 00:32:07,299
dev mode rebuilds its caches every

00:32:05,350 --> 00:32:08,860
single request that's why it's dev mode

00:32:07,299 --> 00:32:12,309
that's why it's much slower than fraud

00:32:08,860 --> 00:32:14,110
mode once you have everything working

00:32:12,309 --> 00:32:17,679
the way you want you clear your

00:32:14,110 --> 00:32:19,419
production cache one time which is

00:32:17,679 --> 00:32:21,220
actually several commands because

00:32:19,419 --> 00:32:22,990
there's a couple of different caches you

00:32:21,220 --> 00:32:24,580
have to rebuild and each of them have a

00:32:22,990 --> 00:32:25,380
separate command just to keep life

00:32:24,580 --> 00:32:27,400
interesting

00:32:25,380 --> 00:32:29,409
actually it's for decoupling reasons but

00:32:27,400 --> 00:32:31,120
still it's kind of annoying and then you

00:32:29,409 --> 00:32:34,780
really really want to build a deployable

00:32:31,120 --> 00:32:36,700
snapshot what's then well do you really

00:32:34,780 --> 00:32:39,309
want to check out new code to your

00:32:36,700 --> 00:32:41,140
production server directly and then run

00:32:39,309 --> 00:32:43,360
composer update and wait for that to run

00:32:41,140 --> 00:32:45,190
and then one cache clear and wait for

00:32:43,360 --> 00:32:47,049
to get rebuilds which takes a couple of

00:32:45,190 --> 00:32:49,720
seconds and all the time

00:32:47,049 --> 00:32:50,940
a request comes in it has no idea what

00:32:49,720 --> 00:32:53,049
to do because their code is all

00:32:50,940 --> 00:32:55,450
convoluted and out of sync and you know

00:32:53,049 --> 00:32:56,920
you really should do this for Drupal 2

00:32:55,450 --> 00:33:00,429
but it's much more important in

00:32:56,920 --> 00:33:02,920
symphonies case so you can take a what

00:33:00,429 --> 00:33:05,230
you generate your production version you

00:33:02,920 --> 00:33:07,720
clear your production cache you can take

00:33:05,230 --> 00:33:10,870
it to a tarball snapshot of that entire

00:33:07,720 --> 00:33:12,970
project deploy that take that snapshot

00:33:10,870 --> 00:33:15,669
and push everything including vendor

00:33:12,970 --> 00:33:17,020
into a gift repository and then that

00:33:15,669 --> 00:33:18,910
just checkout in production that one

00:33:17,020 --> 00:33:22,390
snapshot a couple of ways of doing this

00:33:18,910 --> 00:33:24,490
that's a whole other session but look

00:33:22,390 --> 00:33:26,200
for production artifacts is the way you

00:33:24,490 --> 00:33:28,540
want to use symphony you can do that

00:33:26,200 --> 00:33:30,340
with Drupal - in Drupal 8 I do recommend

00:33:28,540 --> 00:33:35,620
it but it's just not something we're

00:33:30,340 --> 00:33:38,049
used to doing in the Drupal world tuple

00:33:35,620 --> 00:33:40,990
and 8 and symphony are using same

00:33:38,049 --> 00:33:42,460
underlying kernel so who's seen this

00:33:40,990 --> 00:33:45,220
picture before it's at some point or

00:33:42,460 --> 00:33:49,120
some variant of it about half the room

00:33:45,220 --> 00:33:50,590
okay so the basic core pipeline of most

00:33:49,120 --> 00:33:52,929
symphony based applications which

00:33:50,590 --> 00:33:56,620
includes symphony Drupal 8 Silex whole

00:33:52,929 --> 00:33:59,530
bunch of others is we have this HTTP

00:33:56,620 --> 00:34:02,110
kernel class so a request comes into the

00:33:59,530 --> 00:34:03,520
system a request event fires Drupal

00:34:02,110 --> 00:34:06,220
people think hook requests alter

00:34:03,520 --> 00:34:10,000
essentially then there's a controller

00:34:06,220 --> 00:34:13,000
events think hook hook requests post

00:34:10,000 --> 00:34:17,440
routing alter basically many controller

00:34:13,000 --> 00:34:18,730
aka page callback fires and does

00:34:17,440 --> 00:34:20,889
whatever that request is going to do and

00:34:18,730 --> 00:34:24,010
it can return the response or not a

00:34:20,889 --> 00:34:28,149
response if it returns not a response a

00:34:24,010 --> 00:34:31,629
view event fires and then any number of

00:34:28,149 --> 00:34:33,429
view listeners is able to take a look at

00:34:31,629 --> 00:34:35,679
that controller result and say do I know

00:34:33,429 --> 00:34:38,590
how to turn this into an actual response

00:34:35,679 --> 00:34:41,379
object yes okay I'll do it we're done or

00:34:38,590 --> 00:34:43,649
no I'll let the next one handling either

00:34:41,379 --> 00:34:46,750
way we end up with a response object

00:34:43,649 --> 00:34:52,080
there's a response event hook response

00:34:46,750 --> 00:34:53,859
altar that gets sent back to the browser

00:34:52,080 --> 00:34:55,960
there's a terminating event to do

00:34:53,859 --> 00:34:58,599
something and cleanup and we're done

00:34:55,960 --> 00:35:00,220
both symphony 2 and Drupal 8 use this

00:34:58,599 --> 00:35:02,950
pipeline they use the exact same code

00:35:00,220 --> 00:35:04,720
for it however they use it very

00:35:02,950 --> 00:35:07,210
differently in Drupal

00:35:04,720 --> 00:35:09,010
you always are using the view event you

00:35:07,210 --> 00:35:09,670
may not be writing any code for it

00:35:09,010 --> 00:35:12,280
yourself

00:35:09,670 --> 00:35:16,329
in fact you usually will not be but the

00:35:12,280 --> 00:35:18,369
view event is always used on like 98% of

00:35:16,329 --> 00:35:20,290
requests the view event is going to fire

00:35:18,369 --> 00:35:23,200
and do whatever it's going to do

00:35:20,290 --> 00:35:24,940
Symphony you can but the conventions and

00:35:23,200 --> 00:35:27,220
Symphony actually discourage leveraging

00:35:24,940 --> 00:35:29,530
dance I think this is kind of weird

00:35:27,220 --> 00:35:31,300
personally it's done for performance

00:35:29,530 --> 00:35:33,250
reasons but I think it's architectural

00:35:31,300 --> 00:35:35,200
II a weaker way of doing it because it

00:35:33,250 --> 00:35:37,260
doesn't separate concerns as well I

00:35:35,200 --> 00:35:39,280
found of the action Jemaine responder

00:35:37,260 --> 00:35:42,069
model and that's what Drupal is using

00:35:39,280 --> 00:35:43,599
here so let's look at an example

00:35:42,069 --> 00:35:46,480
Symphony controller this is again

00:35:43,599 --> 00:35:50,940
straight out of the demo bundle that

00:35:46,480 --> 00:35:53,740
comes with Symphony the full stack so

00:35:50,940 --> 00:35:55,750
first thing to note in Drupal our

00:35:53,740 --> 00:35:56,440
controllers are methods named whatever

00:35:55,750 --> 00:35:59,200
you feel like

00:35:56,440 --> 00:36:00,970
in Symphony there's some black magic

00:35:59,200 --> 00:36:02,579
involves I don't fully comprehend when

00:36:00,970 --> 00:36:05,190
this is the case but in almost all cases

00:36:02,579 --> 00:36:08,520
the controller method ends in action

00:36:05,190 --> 00:36:12,250
this is roughly intended for grouping

00:36:08,520 --> 00:36:14,799
methods in a class but that's just the

00:36:12,250 --> 00:36:17,410
way symphony is going to work and then

00:36:14,799 --> 00:36:19,990
we're returning the results of calling

00:36:17,410 --> 00:36:22,180
this render with a template name and

00:36:19,990 --> 00:36:23,710
this array of parameters see ignore the

00:36:22,180 --> 00:36:26,260
actual information here for the time

00:36:23,710 --> 00:36:27,910
being that's not relevant essentially

00:36:26,260 --> 00:36:30,940
what we're doing here it's like calling

00:36:27,910 --> 00:36:34,329
the theme function in pupil 7 or tuple

00:36:30,940 --> 00:36:38,109
render really and returning the result

00:36:34,329 --> 00:36:40,780
of that in symphony this is encouraged

00:36:38,109 --> 00:36:44,109
this is the recommended way of doing

00:36:40,780 --> 00:36:46,089
things in Drupal um you return the

00:36:44,109 --> 00:36:48,910
render array you do not call render

00:36:46,089 --> 00:36:53,170
yourself it's just not a thing don't do

00:36:48,910 --> 00:36:57,069
it in symphony you do it maybe maybe not

00:36:53,170 --> 00:36:59,890
you can in fact also return a array from

00:36:57,069 --> 00:37:01,359
here and use another annotation to say

00:36:59,890 --> 00:37:03,670
by the way the template you should use

00:37:01,359 --> 00:37:05,859
for this controller is this other

00:37:03,670 --> 00:37:07,620
template and then that array will get

00:37:05,859 --> 00:37:11,100
passed that template by the

00:37:07,620 --> 00:37:13,650
you listener again I like that approach

00:37:11,100 --> 00:37:17,280
myself but it does have a performance

00:37:13,650 --> 00:37:19,560
overhead that's why it's discouraged and

00:37:17,280 --> 00:37:22,320
also note in this case we're using an

00:37:19,560 --> 00:37:25,200
annotation for the route to could be in

00:37:22,320 --> 00:37:28,260
llamo could be an annotation your

00:37:25,200 --> 00:37:30,810
project could go either way there's long

00:37:28,260 --> 00:37:32,160
arguments about which way is better or

00:37:30,810 --> 00:37:36,840
more sustainable please just be

00:37:32,160 --> 00:37:40,260
consistent speaking of paths and

00:37:36,840 --> 00:37:43,470
speaking of routing though in Drupal 8

00:37:40,260 --> 00:37:45,630
if you want to register a route you're

00:37:43,470 --> 00:37:48,600
going to generally use a routing chiamo

00:37:45,630 --> 00:37:50,370
file in a module and then by turning on

00:37:48,600 --> 00:37:51,900
the module all of those routes will

00:37:50,370 --> 00:37:55,080
automatically get registered in the

00:37:51,900 --> 00:37:56,550
system if it's a dynamic route of some

00:37:55,080 --> 00:37:59,280
kind it's based on user configuration

00:37:56,550 --> 00:38:02,340
there's an event that fires think I cook

00:37:59,280 --> 00:38:05,040
menu alder type thing where you can

00:38:02,340 --> 00:38:07,530
create additional routes that way all of

00:38:05,040 --> 00:38:10,380
those paths in those routes are routed

00:38:07,530 --> 00:38:13,410
at your site bridge always there's no

00:38:10,380 --> 00:38:17,160
magic nesting happening and all of those

00:38:13,410 --> 00:38:19,470
paths are very fixed patterns node slash

00:38:17,160 --> 00:38:21,360
ID user slash my B term slash ID that's

00:38:19,470 --> 00:38:23,340
how all of the routes work and then we

00:38:21,360 --> 00:38:25,640
layer aliases on top of them to make it

00:38:23,340 --> 00:38:28,230
look pretty for users and search engines

00:38:25,640 --> 00:38:30,000
in symphony well you can't have a

00:38:28,230 --> 00:38:33,630
routing file which could be a mole or

00:38:30,000 --> 00:38:34,200
XML or PHP or as we saw on the last

00:38:33,630 --> 00:38:35,310
slide

00:38:34,200 --> 00:38:37,950
they could be annotations on a

00:38:35,310 --> 00:38:40,170
controller they could be any number any

00:38:37,950 --> 00:38:42,390
of these I'm not actually sure if there

00:38:40,170 --> 00:38:43,680
is a dynamic mech mechanism there

00:38:42,390 --> 00:38:44,220
probably from what I've seen actually

00:38:43,680 --> 00:38:46,050
there's a couple

00:38:44,220 --> 00:38:48,330
depending on which module you're

00:38:46,050 --> 00:38:50,280
building off of and then it does use

00:38:48,330 --> 00:38:52,400
path nesting so those routing files are

00:38:50,280 --> 00:38:55,740
not registered automatically just

00:38:52,400 --> 00:38:58,740
loading the bundle doesn't register its

00:38:55,740 --> 00:39:02,880
routes you have to go to the routing

00:38:58,740 --> 00:39:06,000
file up in app and explicitly say by the

00:39:02,880 --> 00:39:09,710
way include this other route if there's

00:39:06,000 --> 00:39:13,470
other bundles routing dot llamo file and

00:39:09,710 --> 00:39:14,850
routed at this path prefix so if you

00:39:13,470 --> 00:39:17,400
have routes that are being provided by

00:39:14,850 --> 00:39:19,980
say Foss user bundle you can say all of

00:39:17,400 --> 00:39:20,970
those routes I want to start with a

00:39:19,980 --> 00:39:23,040
slash user

00:39:20,970 --> 00:39:25,440
path and then if everything in that in

00:39:23,040 --> 00:39:28,349
the Foss user bundles routing file are

00:39:25,440 --> 00:39:29,849
off of that path or on another side to

00:39:28,349 --> 00:39:33,630
say oh I want them all rooted at slash

00:39:29,849 --> 00:39:37,770
admin or slash Bob or slash go away this

00:39:33,630 --> 00:39:40,730
is mine whatever and then instead of

00:39:37,770 --> 00:39:43,170
aliasing the convention is to use slugs

00:39:40,730 --> 00:39:45,660
slugs I have no idea where this thing

00:39:43,170 --> 00:39:52,050
comes from to be perfectly honest but

00:39:45,660 --> 00:39:53,430
slugs are short string identifiers for a

00:39:52,050 --> 00:39:56,240
data object might need to go a little

00:39:53,430 --> 00:39:58,800
bit faster here for for a data object

00:39:56,240 --> 00:40:01,380
the rough equivalent would be if you've

00:39:58,800 --> 00:40:04,710
done triple sites where you have a text

00:40:01,380 --> 00:40:06,569
field a hidden text field that is put a

00:40:04,710 --> 00:40:08,790
path fragment here and then you use path

00:40:06,569 --> 00:40:11,790
auto to say the path alias is always

00:40:08,790 --> 00:40:13,700
content slash that's that field

00:40:11,790 --> 00:40:15,540
that's essentially what you do

00:40:13,700 --> 00:40:20,430
personally I like the Drupal way better

00:40:15,540 --> 00:40:23,069
but this is how symphony works storing

00:40:20,430 --> 00:40:26,460
data and Drupal we have a lot of it

00:40:23,069 --> 00:40:28,319
interpolate we've got entities we've got

00:40:26,460 --> 00:40:30,060
the new state API we have our

00:40:28,319 --> 00:40:31,859
configuration API for your information

00:40:30,060 --> 00:40:34,170
you want to be deployable here the key

00:40:31,859 --> 00:40:37,770
value API and Symphony you get doctrine

00:40:34,170 --> 00:40:39,089
just doctrine or something else if you

00:40:37,770 --> 00:40:41,460
feel like dropping it in but doctrine is

00:40:39,089 --> 00:40:43,800
what most people use doctrine is a

00:40:41,460 --> 00:40:45,390
completely standalone PHP project from

00:40:43,800 --> 00:40:47,520
simply it has its own release schedule

00:40:45,390 --> 00:40:49,380
its own staff a lot of people who are

00:40:47,520 --> 00:40:52,560
part of both Symphony and doctrine but

00:40:49,380 --> 00:40:55,109
it is a standalone ORM object relational

00:40:52,560 --> 00:40:57,630
mapper and it really only supports

00:40:55,109 --> 00:40:59,010
simple objects will see this I'm going

00:40:57,630 --> 00:41:01,369
to repeat this a lot it does not have

00:40:59,010 --> 00:41:04,260
the capabilities that entity API has

00:41:01,369 --> 00:41:07,290
pretty much you get a one-to-one mapping

00:41:04,260 --> 00:41:09,839
from database fields to properties on

00:41:07,290 --> 00:41:12,599
the object and that's as much as you get

00:41:09,839 --> 00:41:13,710
in terms of your data capability and if

00:41:12,599 --> 00:41:15,780
you want to do something with

00:41:13,710 --> 00:41:20,790
there's a separate addon for that called

00:41:15,780 --> 00:41:24,869
the odd object document mapper doctrine

00:41:20,790 --> 00:41:26,550
ODM or yeah dr. o TM that in theory

00:41:24,869 --> 00:41:30,230
works for any document system but in

00:41:26,550 --> 00:41:30,230
practice still new in the quartz

00:41:31,599 --> 00:41:37,239
so let's compare these and Drupal our

00:41:34,989 --> 00:41:39,640
entities are configuration driven you

00:41:37,239 --> 00:41:42,039
have what Drupal calls bundles like node

00:41:39,640 --> 00:41:46,269
types which are configurations user

00:41:42,039 --> 00:41:48,519
configurations of rich fields all fields

00:41:46,269 --> 00:41:50,769
that you configure are inherently multi

00:41:48,519 --> 00:41:52,209
value even if you only have a single

00:41:50,769 --> 00:41:54,160
value in them you can figure them to

00:41:52,209 --> 00:41:56,140
pretend to the single value at a code

00:41:54,160 --> 00:41:58,569
level they are all multi valued period

00:41:56,140 --> 00:42:00,249
and these are rich data types we're

00:41:58,569 --> 00:42:03,969
talking about so it's not just string

00:42:00,249 --> 00:42:08,440
and int but email on field telephone

00:42:03,969 --> 00:42:12,279
number street address image relationship

00:42:08,440 --> 00:42:14,160
field that's the level of Drupal works

00:42:12,279 --> 00:42:16,869
in doctrine is much more primitive

00:42:14,160 --> 00:42:18,339
everything is a custom class all your

00:42:16,869 --> 00:42:21,160
entity types are custom classes you

00:42:18,339 --> 00:42:22,719
define and they only have simple

00:42:21,160 --> 00:42:26,880
properties on them things that can map

00:42:22,719 --> 00:42:29,829
pretty straightforward to a an SQL field

00:42:26,880 --> 00:42:31,599
none of them are multi value you client

00:42:29,829 --> 00:42:32,979
can declare a field as being an array in

00:42:31,599 --> 00:42:40,440
which case it gets stored as a

00:42:32,979 --> 00:42:43,479
serialized blob in the database exactly

00:42:40,440 --> 00:42:47,349
so these are really simple datatypes

00:42:43,479 --> 00:42:48,519
only it's much more rudimentary and if

00:42:47,349 --> 00:42:50,410
you want to have something that's a

00:42:48,519 --> 00:42:52,569
multi valuables now it's a multi value

00:42:50,410 --> 00:42:54,459
searchable field the way to do that is

00:42:52,569 --> 00:42:58,509
make another entity for that and you

00:42:54,459 --> 00:42:59,769
reference it multiple times it's coming

00:42:58,509 --> 00:43:01,479
from tuple this was actually really

00:42:59,769 --> 00:43:03,099
painful for me to work with because it

00:43:01,479 --> 00:43:04,900
is so primitive compared to what I was

00:43:03,099 --> 00:43:10,269
used to in terms of how expressive it

00:43:04,900 --> 00:43:12,459
was I said it's just compared coming

00:43:10,269 --> 00:43:14,859
from Drupal it's very primitive it does

00:43:12,459 --> 00:43:16,719
a lot it does handle a lot of stuff for

00:43:14,859 --> 00:43:19,420
you you Priestly never touch an SQL

00:43:16,719 --> 00:43:21,069
schema yourself but if you're coming

00:43:19,420 --> 00:43:26,440
from drupal entities it is going to feel

00:43:21,069 --> 00:43:29,619
very very primitive the SQL the default

00:43:26,440 --> 00:43:32,380
SQL version and the MongoDB version have

00:43:29,619 --> 00:43:34,299
very different api's I don't just mean

00:43:32,380 --> 00:43:36,969
SQL and are different they are

00:43:34,299 --> 00:43:38,559
but the capabilities are different the

00:43:36,969 --> 00:43:40,390
way you model the data is different

00:43:38,559 --> 00:43:42,339
they're just modeling capabilities that

00:43:40,390 --> 00:43:43,650
are only there in the ODM version the

00:43:42,339 --> 00:43:45,630
manga version

00:43:43,650 --> 00:43:49,020
and a lot of like the event names are

00:43:45,630 --> 00:43:51,270
difference the command lines tools for

00:43:49,020 --> 00:43:53,160
clearing the cache are different a lot

00:43:51,270 --> 00:43:55,560
of things are needlessly different

00:43:53,160 --> 00:43:57,720
between the SQL and versions that

00:43:55,560 --> 00:43:58,740
something really annoyed me the first

00:43:57,720 --> 00:44:02,810
time I use with it

00:43:58,740 --> 00:44:04,920
I there are events with doctrine

00:44:02,810 --> 00:44:07,050
equivalent to like hook node pre-saved

00:44:04,920 --> 00:44:09,570
same basic idea but they are different

00:44:07,050 --> 00:44:11,160
event listeners than the symphony event

00:44:09,570 --> 00:44:14,220
listeners because doctrine is a separate

00:44:11,160 --> 00:44:15,540
project and has its own event system it

00:44:14,220 --> 00:44:16,770
makes sense that it's that way it's

00:44:15,540 --> 00:44:18,360
still annoying you still need to be

00:44:16,770 --> 00:44:20,490
aware of it I actually know some people

00:44:18,360 --> 00:44:22,710
who will write bridge code to mutate

00:44:20,490 --> 00:44:23,760
doctrine events into symphony events so

00:44:22,710 --> 00:44:28,050
that they don't have to deal with that

00:44:23,760 --> 00:44:30,200
difference and it's file handling v

00:44:28,050 --> 00:44:34,650
handling on the web is a huge pain

00:44:30,200 --> 00:44:35,940
period Drupal actually does pretty good

00:44:34,650 --> 00:44:38,970
in this regard compared to a lot of

00:44:35,940 --> 00:44:43,950
systems doctrines is fairly even more

00:44:38,970 --> 00:44:46,140
primitive okay that said the car school

00:44:43,950 --> 00:44:47,640
similarities this is actually part of

00:44:46,140 --> 00:44:50,730
the point this is one of the reasons why

00:44:47,640 --> 00:44:52,470
Drupal 8 was refactor as heavily as it

00:44:50,730 --> 00:44:54,990
was because there are similarities

00:44:52,470 --> 00:44:57,750
between symphony and other modern

00:44:54,990 --> 00:45:00,480
systems and Drupal 8 now biggest one

00:44:57,750 --> 00:45:02,270
services we saw the slide before your

00:45:00,480 --> 00:45:05,700
meaningful logic belongs in services

00:45:02,270 --> 00:45:07,740
they are stateless this is where your

00:45:05,700 --> 00:45:10,650
business logic goes loosely coupled or

00:45:07,740 --> 00:45:12,210
fully decoupled classes that to

00:45:10,650 --> 00:45:14,460
instantiate through your service through

00:45:12,210 --> 00:45:16,530
the dependency injection container this

00:45:14,460 --> 00:45:16,890
is to of symphony this is true of Drupal

00:45:16,530 --> 00:45:18,870
AIDS

00:45:16,890 --> 00:45:21,780
this is true of laravel this is true of

00:45:18,870 --> 00:45:24,390
Zen framework most modern PHP frameworks

00:45:21,780 --> 00:45:27,470
work this way this is why symphony moved

00:45:24,390 --> 00:45:31,440
to this XY Drupal moved to this model

00:45:27,470 --> 00:45:33,090
event listeners in Drupal has event

00:45:31,440 --> 00:45:36,500
listeners in it's mostly around the

00:45:33,090 --> 00:45:39,000
kernel those should be glue code in both

00:45:36,500 --> 00:45:41,940
symphony and in Drupal your event

00:45:39,000 --> 00:45:45,360
listeners should just be glue code that

00:45:41,940 --> 00:45:47,130
hands-off to a service incidentally your

00:45:45,360 --> 00:45:48,990
hooks should be the same way don't put

00:45:47,130 --> 00:45:52,470
lots and lots of business logic into

00:45:48,990 --> 00:45:56,060
hooks in Drupal put that in a service

00:45:52,470 --> 00:45:56,060
and then the hook just bridges out to it

00:45:56,530 --> 00:46:01,309
that are underlined colonel it is the

00:45:59,510 --> 00:46:03,020
same Colonel it is the exact same code

00:46:01,309 --> 00:46:05,869
you're saying in sync we're just pulling

00:46:03,020 --> 00:46:07,819
in Symphony as a vendor for Drupal so if

00:46:05,869 --> 00:46:11,000
there's something you would do when it

00:46:07,819 --> 00:46:13,339
was a request event to tweak the event

00:46:11,000 --> 00:46:18,890
the request somehow it's gonna be the

00:46:13,339 --> 00:46:21,250
exact same code those ways hooks and

00:46:18,890 --> 00:46:23,510
listeners are essentially the same idea

00:46:21,250 --> 00:46:26,329
listeners are a bit more heavyweight a

00:46:23,510 --> 00:46:29,300
bit more elegant more testable hooks are

00:46:26,329 --> 00:46:32,089
a bit lighter weights we have a lot more

00:46:29,300 --> 00:46:34,160
hooks in Drupal than Symphony has

00:46:32,089 --> 00:46:37,579
listeners in part because of tag

00:46:34,160 --> 00:46:39,589
services this is a tool of the symphony

00:46:37,579 --> 00:46:42,559
dependency injection container that both

00:46:39,589 --> 00:46:44,000
symphony and Drupal 8 use where instead

00:46:42,559 --> 00:46:47,390
of having an event which is actually

00:46:44,000 --> 00:46:49,220
fairly heavy you can set up services to

00:46:47,390 --> 00:46:51,640
relate to each other so all services

00:46:49,220 --> 00:46:53,780
with this tag on it that I've configured

00:46:51,640 --> 00:46:55,430
get used this way get thrown into this

00:46:53,780 --> 00:46:58,700
other service that can iterate through

00:46:55,430 --> 00:47:02,000
them so that dichotomy exists in both

00:46:58,700 --> 00:47:04,730
symphony and in Drupal 8 and of course

00:47:02,000 --> 00:47:06,140
big give or take the template

00:47:04,730 --> 00:47:09,290
inheritance otherwise it's the same

00:47:06,140 --> 00:47:11,359
tweak almost all the same syntax almost

00:47:09,290 --> 00:47:14,540
all the same capabilities almost all the

00:47:11,359 --> 00:47:16,579
same tools the same auto escaping logic

00:47:14,540 --> 00:47:18,950
the same general awesomeness go talk to

00:47:16,579 --> 00:47:20,299
Morton go to one of his sessions later

00:47:18,950 --> 00:47:21,920
today or tomorrow I'm not quite sure

00:47:20,299 --> 00:47:25,460
what a session is going to know more

00:47:21,920 --> 00:47:26,809
about white twig is awesome as I said

00:47:25,460 --> 00:47:28,910
you can use template inheritance

00:47:26,809 --> 00:47:31,520
yourself or your own templates in Drupal

00:47:28,910 --> 00:47:34,760
8 which I do encourage and symphony

00:47:31,520 --> 00:47:37,730
you'll be using it for everything and

00:47:34,760 --> 00:47:41,230
with that said go forth and make

00:47:37,730 --> 00:47:41,230
something musical thank you

00:47:48,740 --> 00:47:54,600
you've got about nine 10 minutes left so

00:47:52,530 --> 00:47:57,030
you know my questions there's a

00:47:54,600 --> 00:47:58,380
microphone right over there or I can

00:47:57,030 --> 00:47:59,040
repeat stuff if you can't get to the

00:47:58,380 --> 00:48:02,640
microphone

00:47:59,040 --> 00:48:04,220
I answered everyone's questions

00:48:02,640 --> 00:48:09,840
completely that's amazing

00:48:04,220 --> 00:48:11,100
uh-oh I just wanted to sort of sort out

00:48:09,840 --> 00:48:13,230
one mystery that you talked about

00:48:11,100 --> 00:48:16,440
whether that you know the action post

00:48:13,230 --> 00:48:18,510
fix on action names so that basically is

00:48:16,440 --> 00:48:20,430
part of so yeah they're actually two

00:48:18,510 --> 00:48:23,310
ways how to define a controller or bring

00:48:20,430 --> 00:48:24,930
it into the system and one is basically

00:48:23,310 --> 00:48:27,090
by a naming convention and that's the

00:48:24,930 --> 00:48:28,770
one that you showed and there you have

00:48:27,090 --> 00:48:31,140
to have your your actions have to be

00:48:28,770 --> 00:48:32,790
post fixed with the word action and the

00:48:31,140 --> 00:48:36,090
second one is defining controllers as

00:48:32,790 --> 00:48:38,870
services and there you basically can

00:48:36,090 --> 00:48:40,890
just use whatever method names you want

00:48:38,870 --> 00:48:43,800
yeah so that's that's the difference

00:48:40,890 --> 00:48:48,060
there okay so for those who don't know

00:48:43,800 --> 00:48:49,950
Lucas Smith of Symphony Drupal using

00:48:48,060 --> 00:48:54,660
symphonies also his fault so you can

00:48:49,950 --> 00:49:00,540
blame him thank you for that other

00:48:54,660 --> 00:49:03,290
questions other clarifications Michelle

00:49:00,540 --> 00:49:05,240
you want to correct me on anything

00:49:03,290 --> 00:49:08,820
hi Larry

00:49:05,240 --> 00:49:11,240
the the container of the difference in

00:49:08,820 --> 00:49:14,580
action container that PHP file that you

00:49:11,240 --> 00:49:16,620
mentioned about the deployment version

00:49:14,580 --> 00:49:19,140
like a tower file is there any best

00:49:16,620 --> 00:49:20,460
practice around multi node in a

00:49:19,140 --> 00:49:22,530
production environment like how to

00:49:20,460 --> 00:49:24,930
either keep them centralized in one

00:49:22,530 --> 00:49:27,690
location or in a different node and if

00:49:24,930 --> 00:49:29,310
something goes wrong how to bring the

00:49:27,690 --> 00:49:31,890
you know like a regenerate them in

00:49:29,310 --> 00:49:33,339
production if we have to yes how to deal

00:49:31,890 --> 00:49:35,049
with all the compiled code

00:49:33,339 --> 00:49:36,249
a multi-headed environment that's

00:49:35,049 --> 00:49:39,009
something that's actually very different

00:49:36,249 --> 00:49:41,049
between drupal and symphony in symphony

00:49:39,009 --> 00:49:45,249
the answer is you're gonna generate it

00:49:41,049 --> 00:49:47,799
on your dev box once with a command-line

00:49:45,249 --> 00:49:49,210
tool and then take that bold snapshot

00:49:47,799 --> 00:49:51,400
and push that's all of your web heads at

00:49:49,210 --> 00:49:53,650
once and it will never change once it's

00:49:51,400 --> 00:49:55,539
on those web heads unless you to

00:49:53,650 --> 00:49:59,710
specifically redeploy to your web heads

00:49:55,539 --> 00:50:01,650
in Drupal this is actually something we

00:49:59,710 --> 00:50:05,200
just fixed like in the last two weeks

00:50:01,650 --> 00:50:07,239
where we didn't know how to do that what

00:50:05,200 --> 00:50:10,509
we actually switched to I believe I

00:50:07,239 --> 00:50:12,309
could be wrong on this is the compiled

00:50:10,509 --> 00:50:14,049
container and compile twig now actually

00:50:12,309 --> 00:50:16,599
stored in an index in the database

00:50:14,049 --> 00:50:18,160
rather than on disk so that's another

00:50:16,599 --> 00:50:20,680
big difference between the way symphony

00:50:18,160 --> 00:50:23,200
and drupal are using the generated code

00:50:20,680 --> 00:50:25,150
so I haven't actually looked at all the

00:50:23,200 --> 00:50:28,329
all the details on the drupal side there

00:50:25,150 --> 00:50:31,960
and they may change again following

00:50:28,329 --> 00:50:34,690
though but in symphonies case you do not

00:50:31,960 --> 00:50:36,969
regenerate that code on your web head

00:50:34,690 --> 00:50:38,890
you've regenerated before hand and then

00:50:36,969 --> 00:50:41,289
push that generated code to all of your

00:50:38,890 --> 00:50:42,849
web heads at once and then it's never

00:50:41,289 --> 00:50:45,119
gonna change on their scene with your

00:50:42,849 --> 00:50:47,319
CSS and JavaScript if you're doing a

00:50:45,119 --> 00:50:49,359
aggregation or compression with those

00:50:47,319 --> 00:50:51,430
you're doing all of that offline and

00:50:49,359 --> 00:50:56,619
then pushing that out to your production

00:50:51,430 --> 00:50:59,529
servers um you mentioned Drupal 8 ships

00:50:56,619 --> 00:51:02,019
with symphony so what happens when you

00:50:59,529 --> 00:51:03,759
find a bug in symphony because you know

00:51:02,019 --> 00:51:05,769
it ships with core do you file a patch

00:51:03,759 --> 00:51:07,989
for a core 4 symphony what happens when

00:51:05,769 --> 00:51:09,910
that patch gets committed to symphony is

00:51:07,989 --> 00:51:12,339
that warranty no Drupal core release so

00:51:09,910 --> 00:51:12,999
how does that work it's an excellent

00:51:12,339 --> 00:51:17,469
question

00:51:12,999 --> 00:51:19,509
the so Drupal 8 does have the simple

00:51:17,469 --> 00:51:22,119
components we're using checked in to our

00:51:19,509 --> 00:51:24,219
repository this is mainly because we

00:51:22,119 --> 00:51:25,239
screwed up our composer usage and

00:51:24,219 --> 00:51:29,049
haven't fixed it yet

00:51:25,239 --> 00:51:31,779
hopefully we'll fix that soon if we've

00:51:29,049 --> 00:51:35,319
that said it's still untouchable code if

00:51:31,779 --> 00:51:37,450
you find a bug in Drupal that turns out

00:51:35,319 --> 00:51:39,219
to be an assembly component that gets

00:51:37,450 --> 00:51:41,819
fixed upstream in symphony what I would

00:51:39,219 --> 00:51:45,009
recommend file a bug with Drupal

00:51:41,819 --> 00:51:46,229
actually no to me first file a bug with

00:51:45,009 --> 00:51:49,499
symphony

00:51:46,229 --> 00:51:53,019
preferably with pull requests if you can

00:51:49,499 --> 00:51:55,569
and then file a bug in Drupal saying by

00:51:53,019 --> 00:51:57,819
the way here's this bug here's the link

00:51:55,569 --> 00:51:59,019
to the symphony bug for it so we can

00:51:57,819 --> 00:52:02,109
track it that way and then we'll close

00:51:59,019 --> 00:52:04,690
our bug and simply fix as there's and we

00:52:02,109 --> 00:52:06,339
will be keeping up to date on symphony

00:52:04,690 --> 00:52:09,009
bug fixes

00:52:06,339 --> 00:52:10,539
throughout drupal's release so I'm not

00:52:09,009 --> 00:52:12,789
sure the exact schedule for it but

00:52:10,539 --> 00:52:15,519
expect when we have our bug-fix releases

00:52:12,789 --> 00:52:18,249
monthly will probably be updating to the

00:52:15,519 --> 00:52:20,289
latest symphony patched versions that at

00:52:18,249 --> 00:52:22,180
that point and I believe the plan is to

00:52:20,289 --> 00:52:25,329
also go with Symphony miners when Drupal

00:52:22,180 --> 00:52:27,459
miners ship so eight-point rupal 8.1

00:52:25,329 --> 00:52:30,999
will update to whatever the latest

00:52:27,459 --> 00:52:36,969
Symphony release is as of around then so

00:52:30,999 --> 00:52:37,329
we'll get all those bug fixes as well hi

00:52:36,969 --> 00:52:41,049
Larry

00:52:37,329 --> 00:52:43,239
imagine this scenario Drupal 8 has been

00:52:41,049 --> 00:52:46,989
fully released in a stable version

00:52:43,239 --> 00:52:49,959
you're not you're in Drupal core and a

00:52:46,989 --> 00:52:51,579
client come and wants to make a project

00:52:49,959 --> 00:52:55,239
it is quite complicated it's not

00:52:51,579 --> 00:52:58,059
WordPress for project and which

00:52:55,239 --> 00:53:01,690
technology will will go for you are

00:52:58,059 --> 00:53:04,319
completely free to to choose a

00:53:01,690 --> 00:53:11,640
technology which one will you will

00:53:04,319 --> 00:53:15,069
choose between Drupal 8 and Symphony the

00:53:11,640 --> 00:53:18,759
deciding factor for me is Drupal does an

00:53:15,069 --> 00:53:20,289
awful lot for you there are certain

00:53:18,759 --> 00:53:21,729
things that have done with Drupal will

00:53:20,289 --> 00:53:23,890
take you a tenth as long as with

00:53:21,729 --> 00:53:26,969
Symphony but then they're done in a

00:53:23,890 --> 00:53:30,219
drupal way does doing it the Drupal way

00:53:26,969 --> 00:53:33,239
actually fit your use case if yes great

00:53:30,219 --> 00:53:35,440
do it use Drupal that's why it's there

00:53:33,239 --> 00:53:36,880
if on the other hand you can find

00:53:35,440 --> 00:53:38,859
yourself fighting against Drupal the

00:53:36,880 --> 00:53:40,869
whole way and you know the assumptions

00:53:38,859 --> 00:53:43,209
and tuple makes around its UI these some

00:53:40,869 --> 00:53:45,430
sense it makes around the way content is

00:53:43,209 --> 00:53:48,789
structured if those assumptions are

00:53:45,430 --> 00:53:52,059
wrong in your case then write your own

00:53:48,789 --> 00:53:54,849
assumptions with Symphony here's a good

00:53:52,059 --> 00:53:57,940
example we had a project about a year

00:53:54,849 --> 00:53:58,960
and a half ago I think we're client came

00:53:57,940 --> 00:54:02,560
to us and they wanted

00:53:58,960 --> 00:54:04,060
build what they said was a CMS but the

00:54:02,560 --> 00:54:05,980
data they were storing they had a couple

00:54:04,060 --> 00:54:07,900
million records and the day they were

00:54:05,980 --> 00:54:11,290
storing really did not fit well into a

00:54:07,900 --> 00:54:14,020
node structure I mean that nodes are a

00:54:11,290 --> 00:54:15,700
very specific structure with fields that

00:54:14,020 --> 00:54:17,110
are rich field so those are multi value

00:54:15,700 --> 00:54:19,150
and you don't have nested fields inside

00:54:17,110 --> 00:54:21,850
fields you can kind of sort of do stuff

00:54:19,150 --> 00:54:23,980
like that but field collections or multi

00:54:21,850 --> 00:54:27,580
field and other modules like that but it

00:54:23,980 --> 00:54:28,750
gets unwieldy very very fast so the data

00:54:27,580 --> 00:54:31,270
didn't really fit it and then they

00:54:28,750 --> 00:54:33,940
wanted a user interface that really

00:54:31,270 --> 00:54:37,510
didn't fit drupal's view page and edit

00:54:33,940 --> 00:54:39,340
page model they specifically wanted

00:54:37,510 --> 00:54:42,100
Drupal and so we ended up doing it in

00:54:39,340 --> 00:54:44,860
Drupal in hindsight that project should

00:54:42,100 --> 00:54:47,050
have been done in symphony because we it

00:54:44,860 --> 00:54:49,810
would have let us just skip trying to

00:54:47,050 --> 00:54:51,370
fight Drupal's interface assumptions we

00:54:49,810 --> 00:54:55,240
ended up building some custom fields to

00:54:51,370 --> 00:54:56,290
store data fragments as XML strings in a

00:54:55,240 --> 00:54:59,980
text field that we could then

00:54:56,290 --> 00:55:01,810
deserialize onload and it's what we had

00:54:59,980 --> 00:55:04,360
to do to put it into Drupal but that's a

00:55:01,810 --> 00:55:05,500
place where the more freeform nature of

00:55:04,360 --> 00:55:08,680
doctrine would actually have been a

00:55:05,500 --> 00:55:11,290
better fit so really when it comes down

00:55:08,680 --> 00:55:12,670
to Drupal makes more assumptions if

00:55:11,290 --> 00:55:15,190
those assumptions are correct for you

00:55:12,670 --> 00:55:17,350
great use Drupal save yourself loads of

00:55:15,190 --> 00:55:18,670
time now those assumptions are wrong and

00:55:17,350 --> 00:55:21,160
you're gonna spend your time fighting

00:55:18,670 --> 00:55:26,830
Drupal then skip the assumptions just

00:55:21,160 --> 00:55:30,370
build it yourself with Symphony anyone

00:55:26,830 --> 00:55:32,490
else thank you enjoy the rest of the

00:55:30,370 --> 00:55:32,490
conference

00:55:36,930 --> 00:55:41,589
but this session and any others you go

00:55:39,519 --> 00:55:43,180
to please do fill out evaluations online

00:55:41,589 --> 00:55:45,940
that's very helpful for speakers it's

00:55:43,180 --> 00:55:47,920
helpful for the conference where Drupal

00:55:45,940 --> 00:55:50,589
so we don't use joined in whatever but

00:55:47,920 --> 00:55:52,599
do go to the drupal the Drupal con

00:55:50,589 --> 00:55:54,039
website and fill out evaluations for

00:55:52,599 --> 00:55:57,000
sessions there for all of the sessions

00:55:54,039 --> 00:55:57,000

YouTube URL: https://www.youtube.com/watch?v=ggrAXmG9aEU


