Title: DrupalCon Barcelona 2015: Docker in the DrupalCI test infrastructure
Publication date: 2015-09-22
Playlist: DrupalCon Barcelona - September 2015
Description: 
	In this talk, I will explain the way that we use Docker in the DrupalCI test infrastructure.  I'll explain the basics of Docker, why it made sense to use it in DrupalCI, and how audience members can use Docker to help them as well.  Along the way I'll show specific examples of how to create Docker containers and how to troubleshoot applications within the container, all while showing real-world examples that are used in the Drupal infrastructure.
Captions: 
	00:02:22,209 --> 00:02:29,799
hello holy we're starting right at 2 15

00:03:32,530 --> 00:03:37,209
all right we'll get started here in

00:03:34,430 --> 00:03:37,209
about one more minute

00:04:09,060 --> 00:04:13,569
alright I think we'll go ahead and get

00:04:10,840 --> 00:04:17,380
started good afternoon everyone want to

00:04:13,569 --> 00:04:19,090
start this almost on those the N great

00:04:17,380 --> 00:04:20,670
for those of you who don't speak Spanish

00:04:19,090 --> 00:04:23,770
good afternoon how's everybody doing

00:04:20,670 --> 00:04:26,560
good all right sounds like we're on the

00:04:23,770 --> 00:04:28,330
same page hope everybody had a good

00:04:26,560 --> 00:04:29,650
lunch hopefully not too big of a lunch

00:04:28,330 --> 00:04:32,169
though I don't want everybody to take a

00:04:29,650 --> 00:04:34,570
siesta here while i'm talking about some

00:04:32,169 --> 00:04:35,770
interesting things here my name is Jared

00:04:34,570 --> 00:04:38,560
Smith I've been in the Drupal community

00:04:35,770 --> 00:04:41,350
for a long long time that helping out in

00:04:38,560 --> 00:04:43,600
a number of different things wanted to

00:04:41,350 --> 00:04:45,520
give a talk today about docker and

00:04:43,600 --> 00:04:49,380
specifically how we use docker in the in

00:04:45,520 --> 00:04:51,430
the new drupal CI test infrastructure

00:04:49,380 --> 00:04:52,900
before I get started though I want to

00:04:51,430 --> 00:04:55,540
talk a little bit about photography

00:04:52,900 --> 00:04:57,910
because I I'm an amateur photographer I

00:04:55,540 --> 00:04:59,410
don't claim to be that good but I have

00:04:57,910 --> 00:05:02,800
fun with it it's it's cheaper than

00:04:59,410 --> 00:05:04,630
hiring a therapist and in the world of

00:05:02,800 --> 00:05:07,860
photography there's a saying that says

00:05:04,630 --> 00:05:10,860
that the amateurs worry about gear and

00:05:07,860 --> 00:05:14,950
professionals worry about money and

00:05:10,860 --> 00:05:17,500
masters worry about light and so in my

00:05:14,950 --> 00:05:19,870
talk today my goal is to shed a little

00:05:17,500 --> 00:05:21,910
bit of light on the topic of docker and

00:05:19,870 --> 00:05:24,310
then and then dockers interaction with

00:05:21,910 --> 00:05:26,650
the drupal CI test infrastructure I

00:05:24,310 --> 00:05:28,740
don't claim to be an expert but I have

00:05:26,650 --> 00:05:30,400
been around the block a few times and

00:05:28,740 --> 00:05:32,530
hopefully I can share some of the

00:05:30,400 --> 00:05:35,260
knowledge and light I've found with you

00:05:32,530 --> 00:05:36,729
guys here today I do like an interactive

00:05:35,260 --> 00:05:39,370
presentation so if you have questions

00:05:36,729 --> 00:05:40,570
raise your hand if things if you're

00:05:39,370 --> 00:05:41,770
following along and things are making

00:05:40,570 --> 00:05:44,260
sense nod your head up and down like

00:05:41,770 --> 00:05:45,820
this everybody practice up and down if

00:05:44,260 --> 00:05:46,900
things aren't making sense or if you

00:05:45,820 --> 00:05:50,050
have a question shake your head side to

00:05:46,900 --> 00:05:51,930
side like this that lets me know to data

00:05:50,050 --> 00:05:54,520
that i need to you know rephrase that

00:05:51,930 --> 00:05:57,550
something or or say it another way or go

00:05:54,520 --> 00:05:58,810
into another explanation it also just

00:05:57,550 --> 00:06:01,240
lets me know that not everybody is

00:05:58,810 --> 00:06:03,100
asleep so that's good i do i do like I

00:06:01,240 --> 00:06:05,200
do like lots of feedback so please feel

00:06:03,100 --> 00:06:06,970
welcome to interrupt me with questions

00:06:05,200 --> 00:06:08,830
or comments or complaints or suggestions

00:06:06,970 --> 00:06:11,169
or if you know this stuff better than me

00:06:08,830 --> 00:06:13,380
stand up and teach me something that's

00:06:11,169 --> 00:06:16,270
okay too we're all here to learn right

00:06:13,380 --> 00:06:17,470
okay so quickly our rough agenda for

00:06:16,270 --> 00:06:19,840
what I want to cover today I want to

00:06:17,470 --> 00:06:21,160
talk about a quick history lesson talk

00:06:19,840 --> 00:06:22,990
about what is doc or how does it work

00:06:21,160 --> 00:06:25,840
and then dive into the into the drupal

00:06:22,990 --> 00:06:27,850
CI stuff figure out why is Drupal CI

00:06:25,840 --> 00:06:29,710
using docker how are they using it and

00:06:27,850 --> 00:06:31,780
then talk about some of the warnings and

00:06:29,710 --> 00:06:34,090
pitfalls and gotchas of docker because

00:06:31,780 --> 00:06:35,710
it's not all there yet but it's still

00:06:34,090 --> 00:06:37,450
kind of fun stuff so let's let's go

00:06:35,710 --> 00:06:41,230
through that and kind of roughly that

00:06:37,450 --> 00:06:42,550
order but like I said I want to start

00:06:41,230 --> 00:06:44,170
out with a history lesson let's say you

00:06:42,550 --> 00:06:45,550
wanted to go sailing on a ship since

00:06:44,170 --> 00:06:47,950
we're so close to the ocean here in

00:06:45,550 --> 00:06:52,360
Barcelona such a beautiful city let's go

00:06:47,950 --> 00:06:53,980
sailing what are we going to need a boat

00:06:52,360 --> 00:06:55,270
okay we've got a boat here's our boat

00:06:53,980 --> 00:06:58,000
what else do we need we're going to

00:06:55,270 --> 00:07:02,500
we're going to sail to Boston how long

00:06:58,000 --> 00:07:04,930
is that going to take us two weeks three

00:07:02,500 --> 00:07:06,520
weeks six months on a boat like that

00:07:04,930 --> 00:07:10,240
it's going to take a while so we need

00:07:06,520 --> 00:07:14,260
maps what else do we need wind some did

00:07:10,240 --> 00:07:16,060
I say did somebody say food food we need

00:07:14,260 --> 00:07:20,800
food right so how we going to get that

00:07:16,060 --> 00:07:22,090
food on the ship well you're going to

00:07:20,800 --> 00:07:23,110
wheel a bunch of stuff up to the ship

00:07:22,090 --> 00:07:26,800
and you're just going to throw it over

00:07:23,110 --> 00:07:30,910
and some of its going to be in bags some

00:07:26,800 --> 00:07:33,280
of it might be in barrels that's

00:07:30,910 --> 00:07:35,620
probably not wine but maybe who is key i

00:07:33,280 --> 00:07:39,460
don't know we'll see now some of it may

00:07:35,620 --> 00:07:41,770
be just wrapped in canvas and apologies

00:07:39,460 --> 00:07:44,169
for any vegetarians in the room for this

00:07:41,770 --> 00:07:47,260
next slide I'm sorry some of it may not

00:07:44,169 --> 00:07:51,840
be in containers at all that's frozen

00:07:47,260 --> 00:07:55,030
meat looks like a bunch of frozen pigs

00:07:51,840 --> 00:07:57,640
that's right

00:07:55,030 --> 00:08:01,660
so that's kind of how things worked up

00:07:57,640 --> 00:08:03,250
until roughly the 1950s every time you

00:08:01,660 --> 00:08:05,410
wanted to load a ship full of cargo it

00:08:03,250 --> 00:08:08,230
was in different size sizes you whether

00:08:05,410 --> 00:08:11,650
his bags or barrels or containers or

00:08:08,230 --> 00:08:12,880
crates or boxes or pallets everything

00:08:11,650 --> 00:08:14,470
was different sized and it took a lot of

00:08:12,880 --> 00:08:17,020
time to get that Freight loaded on a

00:08:14,470 --> 00:08:18,730
ship loaded a back off the ship maybe it

00:08:17,020 --> 00:08:20,140
goes onto a truck gets loaded onto the

00:08:18,730 --> 00:08:22,510
truck the truck goes to a different city

00:08:20,140 --> 00:08:24,520
gets offloaded off of the truck that

00:08:22,510 --> 00:08:27,700
loading and unloading took a long time

00:08:24,520 --> 00:08:30,880
until this guy came along guy by the

00:08:27,700 --> 00:08:32,830
name of Malcolm McLean Malcolm McLean

00:08:30,880 --> 00:08:35,220
was a start at a trucking company in the

00:08:32,830 --> 00:08:37,450
United States started out with one truck

00:08:35,220 --> 00:08:40,150
before too long he had a whole fleet of

00:08:37,450 --> 00:08:41,920
about twenty five trucks but he always

00:08:40,150 --> 00:08:43,930
hated waiting at the port for things to

00:08:41,920 --> 00:08:46,150
get unloaded off of his truck onto the

00:08:43,930 --> 00:08:48,190
ship or offloaded off the ship onto his

00:08:46,150 --> 00:08:51,040
truck and he says there has to be a

00:08:48,190 --> 00:08:53,410
better way and so he came up with what

00:08:51,040 --> 00:08:55,960
we now known as intermodal containers

00:08:53,410 --> 00:08:58,930
here's standard 8 foot by 8 foot by 20

00:08:55,960 --> 00:09:03,400
foot container what did this do to the

00:08:58,930 --> 00:09:07,210
shipping industry come on I said I

00:09:03,400 --> 00:09:09,220
wanted feedback it's standardized

00:09:07,210 --> 00:09:12,790
transportation it really revolutionized

00:09:09,220 --> 00:09:15,820
shipping it cut shipping cost by more

00:09:12,790 --> 00:09:17,740
than eighty percent it sped up the you

00:09:15,820 --> 00:09:19,570
know the time that yeah things could get

00:09:17,740 --> 00:09:21,100
you know unloaded you know put onto the

00:09:19,570 --> 00:09:23,110
ship or offloaded on the ship and onto a

00:09:21,100 --> 00:09:24,940
truck or onto a train and vice versa and

00:09:23,110 --> 00:09:28,150
it is made being standardized so it was

00:09:24,940 --> 00:09:32,200
so much easier to do international

00:09:28,150 --> 00:09:34,240
shipping to give you an idea today more

00:09:32,200 --> 00:09:37,240
than ninety percent of all non bulk

00:09:34,240 --> 00:09:39,610
cargo so if you did you know cutting out

00:09:37,240 --> 00:09:41,380
things like shipping qui tour coal or

00:09:39,610 --> 00:09:44,410
things like that that just go and big

00:09:41,380 --> 00:09:45,550
open big huge open boxes about ninety

00:09:44,410 --> 00:09:49,150
percent of the world's Freight is

00:09:45,550 --> 00:09:53,640
shipped in in containers like this and

00:09:49,150 --> 00:09:56,980
they estimate that just since 1990 alone

00:09:53,640 --> 00:09:58,120
the the amount of cargo shipped in

00:09:56,980 --> 00:10:03,320
shipping containers like this has

00:09:58,120 --> 00:10:05,780
multiplied five times last 25 years

00:10:03,320 --> 00:10:08,330
it's growing just just just a little bit

00:10:05,780 --> 00:10:09,530
so standardization is important it's

00:10:08,330 --> 00:10:11,780
amazing now that you can have a

00:10:09,530 --> 00:10:14,240
container full of t shirts or shoes or

00:10:11,780 --> 00:10:15,950
whatever it is you know manufactured

00:10:14,240 --> 00:10:17,270
let's say manufactured in China and

00:10:15,950 --> 00:10:21,170
shipped to the United States and you

00:10:17,270 --> 00:10:22,940
know 25 26 27 days later it's there it's

00:10:21,170 --> 00:10:26,420
unloaded at your front door and that

00:10:22,940 --> 00:10:28,820
containers probably never been opened so

00:10:26,420 --> 00:10:31,130
it's really revolutionized the way

00:10:28,820 --> 00:10:34,130
shipping shipping it also has many of

00:10:31,130 --> 00:10:35,780
has improved manufacturing there's a lot

00:10:34,130 --> 00:10:37,490
of companies that get their raw

00:10:35,780 --> 00:10:39,230
materials in containers like this and

00:10:37,490 --> 00:10:41,090
the containers will show up within hours

00:10:39,230 --> 00:10:42,530
of the time they need it for their

00:10:41,090 --> 00:10:44,090
production and then they ship their

00:10:42,530 --> 00:10:47,120
products out the door in containers just

00:10:44,090 --> 00:10:49,190
like that now on the way out so quite

00:10:47,120 --> 00:10:50,210
quite an interesting story now if you

00:10:49,190 --> 00:10:52,130
want to read more about it there's a

00:10:50,210 --> 00:10:54,170
great book called the box by Mark

00:10:52,130 --> 00:10:56,090
Levinson that is really interesting

00:10:54,170 --> 00:10:57,770
about you know talking not only about

00:10:56,090 --> 00:10:59,810
how containers change the shipping

00:10:57,770 --> 00:11:02,090
industry but how it changed the world

00:10:59,810 --> 00:11:03,800
economy as well I suggest you may want

00:11:02,090 --> 00:11:06,830
to go pick that up it's it's a better

00:11:03,800 --> 00:11:09,140
read than you'd think now I have a

00:11:06,830 --> 00:11:11,870
particular interest in in containers and

00:11:09,140 --> 00:11:13,610
in off loading and unloading containers

00:11:11,870 --> 00:11:15,500
on the ships because one of my first IT

00:11:13,610 --> 00:11:17,630
jobs while I was still going to the

00:11:15,500 --> 00:11:19,670
University was working for a simulator

00:11:17,630 --> 00:11:22,010
company and we built simulators for

00:11:19,670 --> 00:11:23,450
these antri cranes so this is called a

00:11:22,010 --> 00:11:26,000
gantry this is the thing that picks up

00:11:23,450 --> 00:11:28,760
one of those containers it connects to

00:11:26,000 --> 00:11:31,220
the top of it in the corners here it's

00:11:28,760 --> 00:11:32,660
got a little mechanism that locks into

00:11:31,220 --> 00:11:36,770
the top of the container and the lift it

00:11:32,660 --> 00:11:39,380
and then you sit up in the cab clear up

00:11:36,770 --> 00:11:41,510
in this this little cab right here you

00:11:39,380 --> 00:11:43,870
know stories and stories and stories in

00:11:41,510 --> 00:11:46,070
the air looking down at these containers

00:11:43,870 --> 00:11:47,360
you got you kind of get this kind of a

00:11:46,070 --> 00:11:48,800
view looking down on the containers from

00:11:47,360 --> 00:11:50,510
the top picking them up moving or

00:11:48,800 --> 00:11:52,250
picking them up setting them on a truck

00:11:50,510 --> 00:11:54,830
or putting them from a truck onto the

00:11:52,250 --> 00:11:56,210
ship and in that sort of thing so so I

00:11:54,830 --> 00:11:58,970
had a lot of fun you know designing

00:11:56,210 --> 00:12:01,400
simulator systems to do this and so kind

00:11:58,970 --> 00:12:03,950
of kind of an interesting passion of

00:12:01,400 --> 00:12:05,300
mine but obviously we know today that

00:12:03,950 --> 00:12:07,850
there's these big huge you know

00:12:05,300 --> 00:12:09,170
container ships that carry these these

00:12:07,850 --> 00:12:11,120
containers around some of these

00:12:09,170 --> 00:12:13,940
container ships will hold fifteen

00:12:11,120 --> 00:12:15,660
thousand containers and they keep making

00:12:13,940 --> 00:12:18,540
bigger and bigger ones all the time

00:12:15,660 --> 00:12:20,310
in fact part of the reason that Panama

00:12:18,540 --> 00:12:22,080
is expanding the size of the Panama

00:12:20,310 --> 00:12:24,330
Canal is because I can get bigger and

00:12:22,080 --> 00:12:27,210
bigger ships to come through the through

00:12:24,330 --> 00:12:29,970
the Panama Canal interesting so that

00:12:27,210 --> 00:12:31,920
kind of sets up the the story for docker

00:12:29,970 --> 00:12:34,620
docker is really the shipping container

00:12:31,920 --> 00:12:36,000
of application virtualization now what

00:12:34,620 --> 00:12:37,590
do I mean when I say application

00:12:36,000 --> 00:12:39,750
virtualization we've probably all heard

00:12:37,590 --> 00:12:42,510
about virtualization over the past five

00:12:39,750 --> 00:12:45,600
or ten years whether it's you know

00:12:42,510 --> 00:12:47,040
operating system virtualization platform

00:12:45,600 --> 00:12:50,130
virtualization application

00:12:47,040 --> 00:12:53,490
virtualization the best analogy I can I

00:12:50,130 --> 00:12:55,470
can give is you know is that running in

00:12:53,490 --> 00:12:56,790
you know a single set of applications on

00:12:55,470 --> 00:12:58,530
a single box is kind of like a house

00:12:56,790 --> 00:13:03,090
right it's kind of self-contained it's

00:12:58,530 --> 00:13:04,380
got everything a family would need when

00:13:03,090 --> 00:13:06,240
you get into virtual machines that's

00:13:04,380 --> 00:13:07,920
kind of like row houses or townhouses

00:13:06,240 --> 00:13:09,570
where it's a bunch of houses stacked

00:13:07,920 --> 00:13:11,760
right next to each other but they're

00:13:09,570 --> 00:13:12,870
still pretty much self contained they

00:13:11,760 --> 00:13:16,620
don't have a lot of shared resources

00:13:12,870 --> 00:13:17,820
between one townhouse and the next what

00:13:16,620 --> 00:13:19,500
I'm talking about application

00:13:17,820 --> 00:13:20,940
virtualization I'm talking more like an

00:13:19,500 --> 00:13:22,590
apartment building there's a lot of

00:13:20,940 --> 00:13:24,660
shared resources there there's shared

00:13:22,590 --> 00:13:26,970
plumbing there's probably shared you

00:13:24,660 --> 00:13:28,340
know electrical hookups there's probably

00:13:26,970 --> 00:13:31,110
you know some other shared utilities

00:13:28,340 --> 00:13:32,670
along those sorts of things what that

00:13:31,110 --> 00:13:34,530
does for the individual you know

00:13:32,670 --> 00:13:36,120
apartment owners is it reduces their

00:13:34,530 --> 00:13:37,890
costs and they can share some of those

00:13:36,120 --> 00:13:39,900
costs with the other other people in the

00:13:37,890 --> 00:13:42,510
apartment building there's also some

00:13:39,900 --> 00:13:44,550
drawbacks in if that you know if the

00:13:42,510 --> 00:13:46,260
apartment building catches on fire who

00:13:44,550 --> 00:13:48,420
gets paid for it well everybody does you

00:13:46,260 --> 00:13:51,270
know you share the responsibilities as

00:13:48,420 --> 00:13:52,730
well so the idea behind docker is to

00:13:51,270 --> 00:13:55,170
really provide a standardized container

00:13:52,730 --> 00:13:57,590
for an application that can be easily

00:13:55,170 --> 00:14:00,090
moved reproduced one machine to another

00:13:57,590 --> 00:14:03,420
so reproducibility is one of the one of

00:14:00,090 --> 00:14:04,710
the key key things of docker so I want

00:14:03,420 --> 00:14:06,150
to take just a minute talk about kind of

00:14:04,710 --> 00:14:09,690
the architecture of the infrastructure

00:14:06,150 --> 00:14:11,760
of how docker works there's there's

00:14:09,690 --> 00:14:13,830
there's several foundational pieces that

00:14:11,760 --> 00:14:16,050
make docker work and work well the first

00:14:13,830 --> 00:14:19,080
thing is is name spaces within the Linux

00:14:16,050 --> 00:14:21,150
kernel we have namespaces for process

00:14:19,080 --> 00:14:23,850
IDs for the network for inter process

00:14:21,150 --> 00:14:25,110
communications for mount points for for

00:14:23,850 --> 00:14:27,300
all fans different things in within

00:14:25,110 --> 00:14:29,100
within the Linux kernel what this means

00:14:27,300 --> 00:14:31,440
to an application is it's

00:14:29,100 --> 00:14:36,030
thinks that hey I've got a user with ID

00:14:31,440 --> 00:14:38,040
501 and that's great but in the host

00:14:36,030 --> 00:14:39,210
system it may be a totally different

00:14:38,040 --> 00:14:41,370
user number it may have different

00:14:39,210 --> 00:14:44,070
process IDs but the what that container

00:14:41,370 --> 00:14:46,470
sees is not the whole world view it gets

00:14:44,070 --> 00:14:48,570
kind of a mic review of what's going on

00:14:46,470 --> 00:14:49,770
it sees you know its own view of the

00:14:48,570 --> 00:14:51,000
network even though on the host machine

00:14:49,770 --> 00:14:53,580
may have to add totally different

00:14:51,000 --> 00:14:55,200
network that sort of thing we also

00:14:53,580 --> 00:14:56,490
leverage what are called control groups

00:14:55,200 --> 00:14:58,650
in that in the linux kernel who's

00:14:56,490 --> 00:15:00,270
familiar with control groups control

00:14:58,650 --> 00:15:01,650
groups are pretty cool they've come out

00:15:00,270 --> 00:15:03,540
in the last Oh four or five years within

00:15:01,650 --> 00:15:05,010
the Linux kernel what that allows you to

00:15:03,540 --> 00:15:07,410
do is within the colonel say hey this

00:15:05,010 --> 00:15:09,450
this process over here can only use this

00:15:07,410 --> 00:15:12,300
much memory or can only use this much

00:15:09,450 --> 00:15:14,220
CPU or can access this stuff over here

00:15:12,300 --> 00:15:16,470
but can't access this this stuff over

00:15:14,220 --> 00:15:18,120
here and so it's it's a very nice way

00:15:16,470 --> 00:15:21,540
when you're dealing with virtualization

00:15:18,120 --> 00:15:23,430
of constraining a process or a user or

00:15:21,540 --> 00:15:25,290
those sorts of things so that they don't

00:15:23,430 --> 00:15:26,550
take up all the resources that they

00:15:25,290 --> 00:15:28,410
can't take more than their fair share of

00:15:26,550 --> 00:15:31,320
the resources whether it's memory or CPU

00:15:28,410 --> 00:15:32,940
that sort of thing doctor also uses

00:15:31,320 --> 00:15:35,520
what's called the Union file system

00:15:32,940 --> 00:15:38,070
Union FS which makes it easy to kind of

00:15:35,520 --> 00:15:40,140
layer pieces of the file system on top

00:15:38,070 --> 00:15:41,870
of each other and we'll see we'll see

00:15:40,140 --> 00:15:44,970
more about the layers here in a minute

00:15:41,870 --> 00:15:47,430
and then last but not least docker came

00:15:44,970 --> 00:15:48,900
came up with kind of a container file

00:15:47,430 --> 00:15:51,000
system format that they call lib

00:15:48,900 --> 00:15:52,440
container that it's a standardized

00:15:51,000 --> 00:15:53,910
format that you could take a container

00:15:52,440 --> 00:15:56,130
for one machine ship it over to another

00:15:53,910 --> 00:15:57,720
machine start that container on that

00:15:56,130 --> 00:15:59,220
other machine and have your application

00:15:57,720 --> 00:16:01,710
run up and running very quickly on that

00:15:59,220 --> 00:16:03,090
other container so it defaults to using

00:16:01,710 --> 00:16:04,500
that container format you can also use

00:16:03,090 --> 00:16:06,570
another container format out there

00:16:04,500 --> 00:16:08,550
called lxc that that's used by the by

00:16:06,570 --> 00:16:10,290
the Linux kernel so that's kind of the

00:16:08,550 --> 00:16:12,290
that's kind of the foundational pieces

00:16:10,290 --> 00:16:15,990
here let's see how those fit together

00:16:12,290 --> 00:16:18,630
docker comes with a docker host or a

00:16:15,990 --> 00:16:20,100
docker Damon the server we're going to

00:16:18,630 --> 00:16:21,510
say that's that's right here here's the

00:16:20,100 --> 00:16:24,090
daemon here's here's the machine it's

00:16:21,510 --> 00:16:25,740
running on and then there's a docker

00:16:24,090 --> 00:16:27,720
client that you can run from the command

00:16:25,740 --> 00:16:30,360
line to execute commands against that

00:16:27,720 --> 00:16:33,030
against that host now it's kind of neat

00:16:30,360 --> 00:16:35,550
the way that works that client talks to

00:16:33,030 --> 00:16:39,090
the to the doc or host to the docker

00:16:35,550 --> 00:16:41,340
Damon using simple rest command so

00:16:39,090 --> 00:16:42,780
anybody here that's done HTTP and unrest

00:16:41,340 --> 00:16:43,920
kind of calls

00:16:42,780 --> 00:16:46,170
and line client is actually calling

00:16:43,920 --> 00:16:48,240
making rest calls out to a unix socket

00:16:46,170 --> 00:16:49,740
to talk to the to the dr. Damon you

00:16:48,240 --> 00:16:51,620
can't have the dr. Damon listen on teeth

00:16:49,740 --> 00:16:54,510
and a TCP port if you if you'd rather

00:16:51,620 --> 00:16:56,010
communicate across the network now one

00:16:54,510 --> 00:16:57,720
of the drawbacks to that today is that

00:16:56,010 --> 00:17:00,180
there's no security or authentication or

00:16:57,720 --> 00:17:01,880
anything on that so you may want to be

00:17:00,180 --> 00:17:03,630
careful with that if you play with that

00:17:01,880 --> 00:17:05,580
that's something that's supposed to be

00:17:03,630 --> 00:17:09,480
coming hopefully in the near future and

00:17:05,580 --> 00:17:11,760
dr. in dr. one point for roughly but the

00:17:09,480 --> 00:17:14,040
idea is that from your client you say

00:17:11,760 --> 00:17:15,750
hey docker build this they'll be this

00:17:14,040 --> 00:17:18,540
container or build me this image hey

00:17:15,750 --> 00:17:20,880
docker pull this this image down from

00:17:18,540 --> 00:17:23,070
from some sort of external registry you

00:17:20,880 --> 00:17:26,070
know repository of existing images that

00:17:23,070 --> 00:17:27,360
people have created hey run this run

00:17:26,070 --> 00:17:29,130
this image and create me a container

00:17:27,360 --> 00:17:32,130
based on on this particular convention

00:17:29,130 --> 00:17:34,230
so these are the really the three pieces

00:17:32,130 --> 00:17:35,670
you need to know about as far as real

00:17:34,230 --> 00:17:40,710
objects you're going to be dealing with

00:17:35,670 --> 00:17:42,450
our images and containers and registries

00:17:40,710 --> 00:17:45,950
so let's go into a little more depth on

00:17:42,450 --> 00:17:50,060
each of those an image is a prebuilt

00:17:45,950 --> 00:17:52,890
system that's a prebuilt application

00:17:50,060 --> 00:17:55,080
template so to speak and so you may have

00:17:52,890 --> 00:17:57,270
14 or something like kubuntu or you may

00:17:55,080 --> 00:17:59,450
have 14 sent OS or we may have one

00:17:57,270 --> 00:18:04,950
that's specific to an application like

00:17:59,450 --> 00:18:07,320
engine X and then what you do is you use

00:18:04,950 --> 00:18:09,270
a docker pull command to pull a copy of

00:18:07,320 --> 00:18:10,710
that image down to your down to your

00:18:09,270 --> 00:18:12,930
dock or host and then you do a docker

00:18:10,710 --> 00:18:15,900
run and say I want a container based on

00:18:12,930 --> 00:18:18,030
that particular image so you want to say

00:18:15,900 --> 00:18:21,870
hey I want to I want to do Ubuntu image

00:18:18,030 --> 00:18:23,130
you say docker run that image and it

00:18:21,870 --> 00:18:24,750
would create you a new container based

00:18:23,130 --> 00:18:28,140
on that image so the image is kind of a

00:18:24,750 --> 00:18:29,460
read-only template of the container and

00:18:28,140 --> 00:18:31,020
then you can instantiate as many as

00:18:29,460 --> 00:18:33,030
containers as you want based on that

00:18:31,020 --> 00:18:36,060
image so you may have four or five or

00:18:33,030 --> 00:18:38,910
six or 200 containers all based on that

00:18:36,060 --> 00:18:43,080
one kubuntu image in this example does

00:18:38,910 --> 00:18:46,260
that make sense the registry like I said

00:18:43,080 --> 00:18:48,150
is just a is it is it place that you can

00:18:46,260 --> 00:18:50,160
go out and pull existing images that

00:18:48,150 --> 00:18:52,440
have been created or push your own back

00:18:50,160 --> 00:18:54,720
up to the repository now the docker

00:18:52,440 --> 00:18:55,680
community has one that they call the

00:18:54,720 --> 00:18:57,420
docker hub

00:18:55,680 --> 00:18:59,700
it's kind of the central repository for

00:18:57,420 --> 00:19:00,840
all the docker images but you can

00:18:59,700 --> 00:19:02,220
certainly run your own in your own

00:19:00,840 --> 00:19:03,810
infrastructure and I'm going to strongly

00:19:02,220 --> 00:19:05,220
suggest that you probably want to look

00:19:03,810 --> 00:19:06,750
into running your own for reasons I'll

00:19:05,220 --> 00:19:10,950
talk about a little bit later in the in

00:19:06,750 --> 00:19:12,570
the slides but the idea is that that if

00:19:10,950 --> 00:19:13,890
you don't already have you know an image

00:19:12,570 --> 00:19:15,150
created the way you want or you want to

00:19:13,890 --> 00:19:17,280
get an updated version you would go and

00:19:15,150 --> 00:19:19,230
pull that from the registry you could

00:19:17,280 --> 00:19:20,640
create your containers if you want to

00:19:19,230 --> 00:19:22,110
make changes to that you can also push

00:19:20,640 --> 00:19:26,220
it back to the registry if you had the

00:19:22,110 --> 00:19:29,310
permissions to do so any questions up to

00:19:26,220 --> 00:19:31,050
this point not seeing a lot of nodding

00:19:29,310 --> 00:19:34,800
heads so I want to make sure people are

00:19:31,050 --> 00:19:35,760
following all right now now is the part

00:19:34,800 --> 00:19:37,380
where everything goes up in flames

00:19:35,760 --> 00:19:38,850
because I'm going to skip away from the

00:19:37,380 --> 00:19:39,780
slides here for a minute and then I'm

00:19:38,850 --> 00:19:41,400
going to show you some real world

00:19:39,780 --> 00:19:43,200
examples and hopefully this works and

00:19:41,400 --> 00:19:44,670
maybe we'll have internet access in the

00:19:43,200 --> 00:19:47,640
room and that sort of thing and we can

00:19:44,670 --> 00:19:49,620
have fun with that sound good all right

00:19:47,640 --> 00:19:52,130
nothing like nothing more dangerous than

00:19:49,620 --> 00:19:54,300
standing up and doing a demo live right

00:19:52,130 --> 00:19:57,270
okay so the first thing I'm going to

00:19:54,300 --> 00:19:58,470
show you is if you run the docker images

00:19:57,270 --> 00:19:59,910
command this is just going to show me

00:19:58,470 --> 00:20:01,910
the dot the images that I've already

00:19:59,910 --> 00:20:04,890
downloaded here to my local machine and

00:20:01,910 --> 00:20:08,940
so I've got a bunch of them is that big

00:20:04,890 --> 00:20:10,440
enough can you guys see that okay you

00:20:08,940 --> 00:20:12,630
can see I've got a bunch for Drupal CI

00:20:10,440 --> 00:20:13,890
and we'll get into exactly what each one

00:20:12,630 --> 00:20:15,540
of these does here in a minute when we

00:20:13,890 --> 00:20:17,220
talk about the Drupal CI piece of this

00:20:15,540 --> 00:20:19,610
but just down at the bottom you notice

00:20:17,220 --> 00:20:22,170
I've got for example I've got fedora 22

00:20:19,610 --> 00:20:25,710
I've also got one's called Fedor latest

00:20:22,170 --> 00:20:27,120
got one called hello world and if I

00:20:25,710 --> 00:20:28,140
wanted let's just run that hello world

00:20:27,120 --> 00:20:30,510
well that's that would be a good example

00:20:28,140 --> 00:20:36,330
right if we wanted to run that we would

00:20:30,510 --> 00:20:39,090
just do docker run hello world and what

00:20:36,330 --> 00:20:41,100
happened it took that image created a

00:20:39,090 --> 00:20:43,680
container out of it ran that container

00:20:41,100 --> 00:20:45,920
all the container just spit out some

00:20:43,680 --> 00:20:48,300
information and then and then exit it

00:20:45,920 --> 00:20:51,360
the idea of these containers is that

00:20:48,300 --> 00:20:53,100
they run one application they start that

00:20:51,360 --> 00:20:55,110
application they live as long as that

00:20:53,100 --> 00:20:57,630
application runs and when that

00:20:55,110 --> 00:21:01,290
application stops running the container

00:20:57,630 --> 00:21:02,820
goes away it's done disappears ok so in

00:21:01,290 --> 00:21:04,770
this case a hello world example is

00:21:02,820 --> 00:21:06,680
pretty trivial all does is print some

00:21:04,770 --> 00:21:10,400
things to the screen and exits and

00:21:06,680 --> 00:21:13,370
he's gone not that exciting right what

00:21:10,400 --> 00:21:14,840
if we wanted to run a container and and

00:21:13,370 --> 00:21:16,820
you know leave it running in the

00:21:14,840 --> 00:21:19,520
background and interact with it that

00:21:16,820 --> 00:21:20,900
sort of thing so let's do that let's go

00:21:19,520 --> 00:21:22,160
ahead and I'm just going to use one of

00:21:20,900 --> 00:21:23,780
the ones that comes from group will see

00:21:22,160 --> 00:21:31,060
I since it's an it'll be lots of fun

00:21:23,780 --> 00:21:33,980
let's do docker run drupal CI mysql 5.5

00:21:31,060 --> 00:21:37,160
okay i'm going to add a couple of of

00:21:33,980 --> 00:21:40,490
options here first thing i'm going to do

00:21:37,160 --> 00:21:44,570
is do a minus d to tell it to run in the

00:21:40,490 --> 00:21:46,280
background run as a daemon when i run

00:21:44,570 --> 00:21:47,870
that what happens it just spits out a

00:21:46,280 --> 00:21:51,680
big long number any guess as to what

00:21:47,870 --> 00:21:53,480
that is it's a container ID it's an

00:21:51,680 --> 00:21:55,610
identifier so that when we go docker PS

00:21:53,480 --> 00:21:58,550
to see what what containers are running

00:21:55,610 --> 00:22:00,380
you'll see that the the beginning of

00:21:58,550 --> 00:22:03,290
this to that this container ID here is

00:22:00,380 --> 00:22:04,850
the beginning of that extra long long

00:22:03,290 --> 00:22:08,770
hash there it's a hash of the value

00:22:04,850 --> 00:22:10,640
right now I can by default each of these

00:22:08,770 --> 00:22:13,130
containers is also going to get a

00:22:10,640 --> 00:22:15,980
made-up name unless I specifically tell

00:22:13,130 --> 00:22:18,080
it to give it a name so here's here this

00:22:15,980 --> 00:22:23,210
one's called goofy right if I created

00:22:18,080 --> 00:22:25,670
another one I've got one called elated

00:22:23,210 --> 00:22:27,680
brown and goofy right each of these

00:22:25,670 --> 00:22:29,090
containers you you you start is going to

00:22:27,680 --> 00:22:30,980
get its own name or you can assign your

00:22:29,090 --> 00:22:33,020
own tag your own name to that if you

00:22:30,980 --> 00:22:35,720
want to keep it you know give it a more

00:22:33,020 --> 00:22:39,380
useful name than an invented name that

00:22:35,720 --> 00:22:40,460
comes from dr. you can you can see

00:22:39,380 --> 00:22:44,660
what's going on with one of those

00:22:40,460 --> 00:22:46,100
containers by doing docker logs and you

00:22:44,660 --> 00:22:47,810
can either give it the name this case

00:22:46,100 --> 00:22:51,710
like goofy right or I could give it the

00:22:47,810 --> 00:22:53,900
the Bo the container ID or the first

00:22:51,710 --> 00:22:55,940
several characters of the of the

00:22:53,900 --> 00:22:57,770
container ID and that would work and

00:22:55,940 --> 00:23:00,230
this is telling me what's going on with

00:22:57,770 --> 00:23:01,700
that in the logs what happened is that

00:23:00,230 --> 00:23:04,040
does that container ran and it looks

00:23:01,700 --> 00:23:06,800
like if we if we scroll back a little

00:23:04,040 --> 00:23:09,290
bit it looks like it started up it

00:23:06,800 --> 00:23:11,330
installed some system tables in mysql it

00:23:09,290 --> 00:23:15,020
killed so it filled up some help tables

00:23:11,330 --> 00:23:16,910
it printed out some information we

00:23:15,020 --> 00:23:18,380
connected we were unable to connect for

00:23:16,910 --> 00:23:19,940
some reason here Jeremy's going to

00:23:18,380 --> 00:23:21,200
figure out why later

00:23:19,940 --> 00:23:23,750
then we were able to connect

00:23:21,200 --> 00:23:26,000
successfully we added a user called

00:23:23,750 --> 00:23:28,159
Drupal test bought some commands

00:23:26,000 --> 00:23:31,309
happened some grants some permissions

00:23:28,159 --> 00:23:33,860
were granted and now my ass goes up and

00:23:31,309 --> 00:23:38,629
running okay how can we tell that it's

00:23:33,860 --> 00:23:40,370
up and running we could except we didn't

00:23:38,629 --> 00:23:42,049
tell it we didn't tell the system how to

00:23:40,370 --> 00:23:45,440
map the network port inside this

00:23:42,049 --> 00:23:47,120
container to a network port on our host

00:23:45,440 --> 00:23:49,490
system so right now my skill is running

00:23:47,120 --> 00:23:50,809
but traffic's not going to get to it so

00:23:49,490 --> 00:23:54,529
let's kill these off and then let's

00:23:50,809 --> 00:23:56,389
start them up by specifying a port so

00:23:54,529 --> 00:24:00,860
again we can do docker PS to see what

00:23:56,389 --> 00:24:04,519
containers are running docker kill that

00:24:00,860 --> 00:24:07,309
one look or killed that one and again

00:24:04,519 --> 00:24:10,159
tab completion is a beautiful thing it

00:24:07,309 --> 00:24:11,600
just works so now docker PS we're not

00:24:10,159 --> 00:24:14,419
running anything let's go ahead and

00:24:11,600 --> 00:24:16,789
restart our container here this time

00:24:14,419 --> 00:24:18,559
we're going to say connect port since

00:24:16,789 --> 00:24:21,379
I'm already running a local copy of

00:24:18,559 --> 00:24:23,750
Maria DB on my laptop here on port 3306

00:24:21,379 --> 00:24:28,389
let's put this on 13 306 how does that

00:24:23,750 --> 00:24:31,460
sound and connect at the 3306 on the on

00:24:28,389 --> 00:24:34,360
mysql 55 does that make sense so we're

00:24:31,460 --> 00:24:37,190
going to tell it that's where that's at

00:24:34,360 --> 00:24:40,879
again we can do docker logs except we

00:24:37,190 --> 00:24:43,580
don't know that the ID of the of the

00:24:40,879 --> 00:24:45,350
container so docker PS ecstatic McLain

00:24:43,580 --> 00:24:48,289
hey nice that it chose McLain is the

00:24:45,350 --> 00:24:49,580
name remember that the McClain guy that

00:24:48,289 --> 00:24:54,039
built the shipping container that's kind

00:24:49,580 --> 00:24:58,309
of cool isn't it okay so now we can say

00:24:54,039 --> 00:25:00,169
dr. logs ecstatic McLain he's ecstatic

00:24:58,309 --> 00:25:01,549
to know I'm talking about him we see

00:25:00,169 --> 00:25:04,429
that Maya skill is up and running let's

00:25:01,549 --> 00:25:07,370
try to connect so if we do mysql and sh

00:25:04,429 --> 00:25:13,399
127 20 to do local host port what did i

00:25:07,370 --> 00:25:16,639
say 13 306 1 ish the user is Drupal test

00:25:13,399 --> 00:25:18,820
bot and I'm not going to tell you the

00:25:16,639 --> 00:25:18,820
password

00:25:20,740 --> 00:25:35,560
although it's easy to find and with any

00:25:26,120 --> 00:25:35,560
luck here why did

00:25:36,650 --> 00:25:47,620
so I say that again let's let's find out

00:25:49,930 --> 00:25:59,360
steady McLean souls 13 306 huh that

00:25:57,560 --> 00:26:02,240
worked when I tried it when I was

00:25:59,360 --> 00:26:09,530
building the slides let's try one more

00:26:02,240 --> 00:26:13,910
time here it does it doesn't matter with

00:26:09,530 --> 00:26:17,380
mysql let's treat this yep I do it all

00:26:13,910 --> 00:26:17,380
the time let's try it

00:26:20,029 --> 00:26:22,869
there we go

00:26:23,800 --> 00:26:36,340
and as you see normal standard out of

00:26:26,920 --> 00:26:39,430
the box mysql database so our cat the

00:26:36,340 --> 00:26:44,050
container that Drupal CI that we use in

00:26:39,430 --> 00:26:46,060
Drupal CI it installs MySQL it creates

00:26:44,050 --> 00:26:48,070
that user it grants permissions to that

00:26:46,060 --> 00:26:49,420
user at all as part of the container

00:26:48,070 --> 00:26:50,980
start but I'll show you that here in a

00:26:49,420 --> 00:26:53,290
second when we get into the way how does

00:26:50,980 --> 00:26:57,160
how does Drupal see I use that does that

00:26:53,290 --> 00:26:59,050
make sense okay so that's in a nutshell

00:26:57,160 --> 00:27:01,690
to show you how how you can get up and

00:26:59,050 --> 00:27:03,490
started using using docker but Dockers

00:27:01,690 --> 00:27:05,410
no fun to just use if you're depending

00:27:03,490 --> 00:27:06,520
on somebody else's images right let's

00:27:05,410 --> 00:27:10,560
show you how these things actually get

00:27:06,520 --> 00:27:17,560
built so I'm going to log out of here

00:27:10,560 --> 00:27:23,680
I'll go ahead and kill that container no

00:27:17,560 --> 00:27:24,970
more containers running okay so I'm

00:27:23,680 --> 00:27:27,220
going to start out with a very very

00:27:24,970 --> 00:27:30,150
simple example to show you how docker

00:27:27,220 --> 00:27:32,080
containers and the images get created

00:27:30,150 --> 00:27:34,210
typically when you're creating a new

00:27:32,080 --> 00:27:38,920
docker image you create it by creating a

00:27:34,210 --> 00:27:41,110
file called docker file and a docker

00:27:38,920 --> 00:27:42,340
file has has several different parts I'm

00:27:41,110 --> 00:27:45,130
going to try to walk through those in a

00:27:42,340 --> 00:27:47,050
couple of examples here the first thing

00:27:45,130 --> 00:27:48,970
you'll typically see in a docker file is

00:27:47,050 --> 00:27:51,370
a line that begins with from in all

00:27:48,970 --> 00:27:53,110
capital letters see that up there

00:27:51,370 --> 00:27:56,020
apologize it's cutting off the first

00:27:53,110 --> 00:27:58,000
letter there this is from fr om and this

00:27:56,020 --> 00:28:00,370
is saying what what base image do we

00:27:58,000 --> 00:28:02,290
want to start with in this case it's

00:28:00,370 --> 00:28:05,050
saying start with a base image of a boon

00:28:02,290 --> 00:28:07,840
t trusty you could say oh boo to latest

00:28:05,050 --> 00:28:09,460
you could say Fedora 23 you could say if

00:28:07,840 --> 00:28:11,200
it or latest you could say sent OS

00:28:09,460 --> 00:28:13,780
whatever whatever kind of base image you

00:28:11,200 --> 00:28:15,580
want to start with but typically people

00:28:13,780 --> 00:28:17,110
start with an operating system as their

00:28:15,580 --> 00:28:20,340
base and then work their way up from

00:28:17,110 --> 00:28:22,810
there kind of makes sense right and then

00:28:20,340 --> 00:28:24,820
there's another line this is maintainer

00:28:22,810 --> 00:28:26,350
the idea of the maintainer line is just

00:28:24,820 --> 00:28:27,910
put your name in there or some way to

00:28:26,350 --> 00:28:30,340
recognize hey who's responsible for

00:28:27,910 --> 00:28:34,450
creating the stalker file dude who

00:28:30,340 --> 00:28:35,860
should you go yell at if it's broken the

00:28:34,450 --> 00:28:37,389
next thing you'll see is one or more

00:28:35,860 --> 00:28:39,159
commands that start with run

00:28:37,389 --> 00:28:41,799
these are the things that docker is

00:28:39,159 --> 00:28:43,119
going to do to build this particular

00:28:41,799 --> 00:28:45,940
docker image so in this case it's going

00:28:43,119 --> 00:28:47,409
to go download the ubuntu image and then

00:28:45,940 --> 00:28:49,539
as part of the run command here it's

00:28:47,409 --> 00:28:52,629
going to do an appt get update apt-get

00:28:49,539 --> 00:28:55,690
install apache2 app get clean and remove

00:28:52,629 --> 00:28:56,619
some temporary files okay so what's that

00:28:55,690 --> 00:28:58,539
going to do she's going to get that

00:28:56,619 --> 00:29:00,759
machine up to date and make sure Apaches

00:28:58,539 --> 00:29:03,549
up and running on the Box are installed

00:29:00,759 --> 00:29:05,079
on the box at least that's what those

00:29:03,549 --> 00:29:07,329
run commands and you can have as many of

00:29:05,079 --> 00:29:08,619
those run commands as you want but you

00:29:07,329 --> 00:29:10,059
want to group things together that

00:29:08,619 --> 00:29:12,219
belong together like everything you're

00:29:10,059 --> 00:29:15,039
going to do with app get should probably

00:29:12,219 --> 00:29:17,169
all be as part of one command and that's

00:29:15,039 --> 00:29:18,070
for caching reasons I'll talk about here

00:29:17,169 --> 00:29:22,599
in a minute when I talk about the

00:29:18,070 --> 00:29:25,089
caching layers and docker the next thing

00:29:22,599 --> 00:29:26,799
we've got an example of here is the env

00:29:25,089 --> 00:29:28,239
command those are just setting

00:29:26,799 --> 00:29:29,979
environment variables so in this case

00:29:28,239 --> 00:29:31,989
we're setting an environment variable of

00:29:29,979 --> 00:29:34,929
what user and group that Apache should

00:29:31,989 --> 00:29:38,289
run as what's the log directory for

00:29:34,929 --> 00:29:42,219
Apache that sort of thing well the

00:29:38,289 --> 00:29:44,139
exposed command here says which port is

00:29:42,219 --> 00:29:45,999
going to be exposed to the to the host

00:29:44,139 --> 00:29:49,059
damon in this case we're going to expose

00:29:45,999 --> 00:29:50,589
port 80 none of the other ports on this

00:29:49,059 --> 00:29:53,109
machine will be able to be connected to

00:29:50,589 --> 00:29:55,450
from from outside of the container so

00:29:53,109 --> 00:29:57,039
that's kind of your your poor man's

00:29:55,450 --> 00:29:59,649
firewall for for lack of a better term

00:29:57,039 --> 00:30:01,719
it's a way of only exposing the network

00:29:59,649 --> 00:30:04,119
ports that you really want exposed out

00:30:01,719 --> 00:30:06,399
to the outside world and then right here

00:30:04,119 --> 00:30:08,799
we have CMD command and this is the

00:30:06,399 --> 00:30:10,089
command that's going to run this is the

00:30:08,799 --> 00:30:12,399
application that's being you know

00:30:10,089 --> 00:30:15,369
containerized so in this case its user

00:30:12,399 --> 00:30:19,269
been apache2 and then anything after

00:30:15,369 --> 00:30:21,879
that is just you know arguments or

00:30:19,269 --> 00:30:23,109
parameters that are passed to that that

00:30:21,879 --> 00:30:26,440
command so in this case it's running

00:30:23,109 --> 00:30:27,999
user s been Apache 2 minus capital D

00:30:26,440 --> 00:30:30,969
foreground to run apache in the

00:30:27,999 --> 00:30:32,109
foreground when apache dies if pack you

00:30:30,969 --> 00:30:36,159
were to crash for some reason what's

00:30:32,109 --> 00:30:39,940
going to happen the container goes away

00:30:36,159 --> 00:30:41,079
it's done okay so whatever you put in

00:30:39,940 --> 00:30:43,029
your command here is what's going to run

00:30:41,079 --> 00:30:47,369
and keep running for the life of your

00:30:43,029 --> 00:30:47,369
container question bank you

00:30:54,980 --> 00:31:06,480
so so so so the question was here I only

00:31:04,350 --> 00:31:09,030
specified one port I only specified port

00:31:06,480 --> 00:31:12,390
80 but when I when I want to instantiate

00:31:09,030 --> 00:31:14,220
this image how do i how do i assign that

00:31:12,390 --> 00:31:15,720
to a port on the on the Dame on that on

00:31:14,220 --> 00:31:31,440
the host right is that your question

00:31:15,720 --> 00:31:33,960
right whoops you can write so so here's

00:31:31,440 --> 00:31:35,640
what's exposed here but when you

00:31:33,960 --> 00:31:38,580
actually take this image and instantiate

00:31:35,640 --> 00:31:40,800
it into a container then you would map

00:31:38,580 --> 00:31:43,140
hey I want port 8000 on my local system

00:31:40,800 --> 00:31:44,220
to map to port 80 or maybe you have two

00:31:43,140 --> 00:31:46,380
or three of these running and maybe you

00:31:44,220 --> 00:31:48,600
want one on port 8000 and one on port

00:31:46,380 --> 00:31:51,330
8000 one and want that one on port 8000

00:31:48,600 --> 00:31:53,070
to you do you create those mappings at

00:31:51,330 --> 00:31:54,540
the time you create a container this is

00:31:53,070 --> 00:31:56,580
just the image that it's going to use to

00:31:54,540 --> 00:31:58,680
create those containers but if it's not

00:31:56,580 --> 00:32:00,240
exposed here you're not going to be able

00:31:58,680 --> 00:32:03,830
to map to it when you create the

00:32:00,240 --> 00:32:07,350
container does that make sense perfect

00:32:03,830 --> 00:32:10,770
alright any questions up to this point

00:32:07,350 --> 00:32:13,640
on this docker file not too complicated

00:32:10,770 --> 00:32:13,640
I'll here's a question

00:32:18,100 --> 00:32:30,580
random yes 80 colon 8080 map dating yep

00:32:26,559 --> 00:32:32,020
that's correct okay so that's that's a

00:32:30,580 --> 00:32:34,360
very simple example let's let's do a

00:32:32,020 --> 00:32:38,020
little more in-depth example here to get

00:32:34,360 --> 00:32:41,169
a better feel for your docker files and

00:32:38,020 --> 00:32:42,700
since I like postgres one of these crazy

00:32:41,169 --> 00:32:46,510
people that runs Drupal on postgres

00:32:42,700 --> 00:32:48,640
let's jump in and look at that may be a

00:32:46,510 --> 00:32:54,309
more a slightly more complex docker file

00:32:48,640 --> 00:32:56,110
here again we're saying from ubuntu in

00:32:54,309 --> 00:33:00,250
this case just another tag out there

00:32:56,110 --> 00:33:01,900
12-point 04 again some some kind of

00:33:00,250 --> 00:33:04,270
identifier for the maintainer to see who

00:33:01,900 --> 00:33:05,830
maintains it we've got some environment

00:33:04,270 --> 00:33:07,510
variables we've set here this is just so

00:33:05,830 --> 00:33:09,640
we can specify what version of postgres

00:33:07,510 --> 00:33:12,220
we want what's username and password

00:33:09,640 --> 00:33:14,200
we're going to create for that user and

00:33:12,220 --> 00:33:16,720
then we're going to run this to this set

00:33:14,200 --> 00:33:19,120
of commands here we're going to set up

00:33:16,720 --> 00:33:21,190
some of the lists for the sources for

00:33:19,120 --> 00:33:23,559
for app get we're going to get the

00:33:21,190 --> 00:33:25,090
public key so we can make sure we're

00:33:23,559 --> 00:33:27,640
getting something that's been cryptic

00:33:25,090 --> 00:33:29,710
laughs cryptographically signed by the

00:33:27,640 --> 00:33:31,659
postgres community we do an apt get

00:33:29,710 --> 00:33:33,730
update to update the system nap get

00:33:31,659 --> 00:33:35,789
install postgres and postgres contribs

00:33:33,730 --> 00:33:40,140
for that particular version of postgres

00:33:35,789 --> 00:33:40,140
and then again clean up after ourselves

00:33:40,289 --> 00:33:44,169
that those are those are very similar to

00:33:42,940 --> 00:33:46,470
what we've seen before just a little

00:33:44,169 --> 00:33:49,750
more in depth because we're adding at a

00:33:46,470 --> 00:33:52,419
debian repository from from the postgres

00:33:49,750 --> 00:33:54,789
community here's a new command that we

00:33:52,419 --> 00:33:56,559
haven't seen before called copy and what

00:33:54,789 --> 00:33:59,890
that's doing is saying copy a file

00:33:56,559 --> 00:34:03,520
called start Sh from my local directory

00:33:59,890 --> 00:34:06,730
and inject it into that container call

00:34:03,520 --> 00:34:08,290
it start Shi inside the container so

00:34:06,730 --> 00:34:09,609
that's a way if you have configuration

00:34:08,290 --> 00:34:11,500
files or that sort of thing that you

00:34:09,609 --> 00:34:13,540
want to copy and have them be inside of

00:34:11,500 --> 00:34:15,720
the container when the container starts

00:34:13,540 --> 00:34:15,720
up

00:34:18,700 --> 00:34:22,579
yes yes there's a working directory

00:34:20,869 --> 00:34:23,779
command that you can also use if you

00:34:22,579 --> 00:34:26,210
want to change into a different working

00:34:23,779 --> 00:34:31,579
directory before the before the this

00:34:26,210 --> 00:34:32,809
command runs that you can use so so in

00:34:31,579 --> 00:34:36,769
this case we're saying hey just copy

00:34:32,809 --> 00:34:38,480
this start on SH file over and then

00:34:36,769 --> 00:34:41,779
we're going to run run another command

00:34:38,480 --> 00:34:44,210
to remove this this policy that the file

00:34:41,779 --> 00:34:46,039
and then we're going to actually run

00:34:44,210 --> 00:34:50,389
that start not SH command that we copied

00:34:46,039 --> 00:34:52,460
over does that make sense now one of the

00:34:50,389 --> 00:34:55,849
things I want to explain is at each one

00:34:52,460 --> 00:34:59,990
of these steps here the way docker works

00:34:55,849 --> 00:35:02,150
is it creates a cache of each step so if

00:34:59,990 --> 00:35:04,220
you run this and you've already got the

00:35:02,150 --> 00:35:05,450
aboon to 12.04 image on your system and

00:35:04,220 --> 00:35:07,279
it's not going to download it again it

00:35:05,450 --> 00:35:09,230
now say I've got the latest copy I'm

00:35:07,279 --> 00:35:11,240
just going to use that continue on then

00:35:09,230 --> 00:35:14,869
it adds a new layer by just changing the

00:35:11,240 --> 00:35:19,150
maintainer and then it adds a new layer

00:35:14,869 --> 00:35:19,150
for setting the environment variables

00:35:22,359 --> 00:35:29,799
run in command okay so run are things

00:35:26,210 --> 00:35:32,329
that get set up to create the image

00:35:29,799 --> 00:35:37,099
command is actually what what command

00:35:32,329 --> 00:35:39,349
runs when you start the container yep so

00:35:37,099 --> 00:35:40,940
as each one of these commands execute

00:35:39,349 --> 00:35:44,630
whether it's an e MV command or a run

00:35:40,940 --> 00:35:45,890
command docker when you build that image

00:35:44,630 --> 00:35:47,329
it's going to go run that and then it's

00:35:45,890 --> 00:35:49,190
going to capture a snapshot of that and

00:35:47,329 --> 00:35:51,079
create a cached layer of that so if you

00:35:49,190 --> 00:35:52,309
had if you had two different docker

00:35:51,079 --> 00:35:54,200
files and there were only a couple of

00:35:52,309 --> 00:35:56,329
lines apart most of that's going to be

00:35:54,200 --> 00:35:58,489
cached and it's really just differences

00:35:56,329 --> 00:36:00,829
between those those at the end similar

00:35:58,489 --> 00:36:02,660
to how many people here use get you do

00:36:00,829 --> 00:36:04,430
get commits and you see just the

00:36:02,660 --> 00:36:06,920
differences it's same same sort of idea

00:36:04,430 --> 00:36:08,930
here it's just automatically creating an

00:36:06,920 --> 00:36:12,049
implicit commit between each of these

00:36:08,930 --> 00:36:13,999
commands which is which is kind of cool

00:36:12,049 --> 00:36:17,890
and if you want to you can go back and

00:36:13,999 --> 00:36:20,980
look at let's just do docker history

00:36:17,890 --> 00:36:25,339
let's just look at that mysql 55

00:36:20,980 --> 00:36:25,560
container again drupal see I am I asked

00:36:25,339 --> 00:36:30,690
you

00:36:25,560 --> 00:36:32,400
5.5 and you can see you know what were

00:36:30,690 --> 00:36:34,970
those different commands that happened

00:36:32,400 --> 00:36:37,950
what was the size of it what was the

00:36:34,970 --> 00:36:40,110
over here you've got the the image ID

00:36:37,950 --> 00:36:42,210
and what's what what's what was that

00:36:40,110 --> 00:36:44,130
image what was the identifier of that

00:36:42,210 --> 00:36:45,360
image at that stage and you could even

00:36:44,130 --> 00:36:47,880
roll back and say hey I want to roll

00:36:45,360 --> 00:36:49,500
back to what this was four days ago at

00:36:47,880 --> 00:36:51,120
this particular stage in the in the

00:36:49,500 --> 00:36:52,680
process if you wanted to so you get

00:36:51,120 --> 00:36:54,420
these layering effects that really

00:36:52,680 --> 00:36:56,370
helped out with caching and reducing the

00:36:54,420 --> 00:36:57,360
amount of bandwidth that's needed when

00:36:56,370 --> 00:37:02,030
you're copying around a bunch of

00:36:57,360 --> 00:37:02,030
punching machine images that make sense

00:37:06,030 --> 00:37:12,820
you could yep so you could try oh no

00:37:11,650 --> 00:37:14,500
that change broke everything when we

00:37:12,820 --> 00:37:16,840
will let me roll back you just do a

00:37:14,500 --> 00:37:18,840
docker tag and one of the previous image

00:37:16,840 --> 00:37:21,100
IDs and it would just roll back to that

00:37:18,840 --> 00:37:22,780
to that stage and then you go back and

00:37:21,100 --> 00:37:25,180
fix your docker file and do another doc

00:37:22,780 --> 00:37:26,470
or build and rebuild the rebuild the

00:37:25,180 --> 00:37:27,550
things so let's let's show you what it

00:37:26,470 --> 00:37:28,870
looks like when you actually build an

00:37:27,550 --> 00:37:31,450
image from one of these doctor files

00:37:28,870 --> 00:37:33,310
let's go back to our Apache example just

00:37:31,450 --> 00:37:35,160
as it just as an example here and if the

00:37:33,310 --> 00:37:38,920
internet works we should be able to do

00:37:35,160 --> 00:37:43,840
docker build and the directory where

00:37:38,920 --> 00:37:46,660
that docker file is and it's going to go

00:37:43,840 --> 00:37:50,110
out there and do those steps you see

00:37:46,660 --> 00:37:54,130
this is step zero step one step two and

00:37:50,110 --> 00:37:56,650
you notice it it creates a new a new

00:37:54,130 --> 00:37:59,140
image ID for each of those steps that

00:37:56,650 --> 00:38:01,210
it's going to cash so we'll let that run

00:37:59,140 --> 00:38:04,750
here for a second and then we'll run it

00:38:01,210 --> 00:38:11,620
again to show you you know how it's

00:38:04,750 --> 00:38:13,930
going to use those existing caches I'll

00:38:11,620 --> 00:38:19,470
take it a second to do its update and

00:38:13,930 --> 00:38:23,050
install apache2 that's doing the setup

00:38:19,470 --> 00:38:24,280
and just just by way of information one

00:38:23,050 --> 00:38:25,900
of the nice thing about containers is

00:38:24,280 --> 00:38:28,600
I'm not running a boon to on my laptop

00:38:25,900 --> 00:38:31,390
here I'm running fedora on my laptop

00:38:28,600 --> 00:38:32,950
here but i'm running a containerized

00:38:31,390 --> 00:38:35,140
version of apache that happened to come

00:38:32,950 --> 00:38:37,150
from the boot so it makes it very easy

00:38:35,140 --> 00:38:39,160
to get applications to them across

00:38:37,150 --> 00:38:41,560
across operating systems across

00:38:39,160 --> 00:38:43,600
platforms which is which is kind of fun

00:38:41,560 --> 00:38:50,740
ok so that's that's that's out there

00:38:43,600 --> 00:38:51,970
adult if we did a docker images and if I

00:38:50,740 --> 00:38:54,460
scroll up to the top you see now I've

00:38:51,970 --> 00:38:56,230
got one without a name here those

00:38:54,460 --> 00:38:57,970
created 17 seconds ago that's that's

00:38:56,230 --> 00:38:59,230
that that one I just created now we

00:38:57,970 --> 00:39:05,040
should probably give it a better name

00:38:59,230 --> 00:39:05,040
right so let's do grab that image ID

00:39:05,160 --> 00:39:11,460
copy that I'll do a darker tag

00:39:14,220 --> 00:39:22,090
give it a name now when I do docker

00:39:18,010 --> 00:39:25,240
images hey look it's got a name of Jay

00:39:22,090 --> 00:39:26,800
Smith watch httpd now that's that tag is

00:39:25,240 --> 00:39:28,660
just a human-readable name you can you

00:39:26,800 --> 00:39:31,630
can put anything you want there what

00:39:28,660 --> 00:39:32,860
really counts is the image ID I could

00:39:31,630 --> 00:39:34,330
create three or four tags that all

00:39:32,860 --> 00:39:36,340
pointed at the same image with different

00:39:34,330 --> 00:39:46,890
names if I wanted to that's just that's

00:39:36,340 --> 00:39:48,970
just a human readable name yes yes

00:39:46,890 --> 00:39:51,100
that's correct two containers that are

00:39:48,970 --> 00:39:52,900
better their theory you know if I level

00:39:51,100 --> 00:40:00,160
equivalent should be have exactly the

00:39:52,900 --> 00:40:03,930
same tag okay so so that's that's that

00:40:00,160 --> 00:40:08,970
now let's now let's go build that again

00:40:03,930 --> 00:40:10,900
and see what happens it's done why

00:40:08,970 --> 00:40:16,060
because it's got all those different

00:40:10,900 --> 00:40:24,010
layers cached and when you do soccer

00:40:16,060 --> 00:40:26,770
history on that image you can see what

00:40:24,010 --> 00:40:28,900
each of those worries what are the each

00:40:26,770 --> 00:40:32,350
of those layers are to make that makes

00:40:28,900 --> 00:40:35,070
the makeup that docker image make sense

00:40:32,350 --> 00:40:35,070
question over here

00:40:45,470 --> 00:40:49,110
so I was going to talk about that more

00:40:47,430 --> 00:40:51,300
when we get into security but yeah we

00:40:49,110 --> 00:40:55,170
can talk about that now it's updated and

00:40:51,300 --> 00:40:56,310
tell you do a doctor dr. pol all I need

00:40:55,170 --> 00:40:57,870
to repeat the question sorry for the

00:40:56,310 --> 00:41:00,030
recording so the recording was how long

00:40:57,870 --> 00:41:01,920
does this get cached if I do an advocate

00:41:00,030 --> 00:41:03,900
update today that doesn't mean it's

00:41:01,920 --> 00:41:06,060
going to be you know running tomorrow to

00:41:03,900 --> 00:41:07,860
get the update so it's it's it's there

00:41:06,060 --> 00:41:10,590
in cash as long as you until you do a

00:41:07,860 --> 00:41:12,540
dock or pole or a doctor rebuild your

00:41:10,590 --> 00:41:15,270
docker container your docker image if

00:41:12,540 --> 00:41:17,400
you if you're building it yourself in

00:41:15,270 --> 00:41:19,320
the case of the ones in docker in Drupal

00:41:17,400 --> 00:41:22,020
CI we rebuild them every few days so you

00:41:19,320 --> 00:41:24,180
see light well these are little older

00:41:22,020 --> 00:41:25,740
than that for weeks ago but typically

00:41:24,180 --> 00:41:26,760
every few days we'll do a rebuild or if

00:41:25,740 --> 00:41:30,150
we see that there's something that's

00:41:26,760 --> 00:41:31,710
that's updated in the upstream in the

00:41:30,150 --> 00:41:33,060
upstream image and then then you get to

00:41:31,710 --> 00:41:34,530
go yell at upstream and say hey why

00:41:33,060 --> 00:41:37,770
isn't your image updated in four weeks

00:41:34,530 --> 00:41:38,700
you know it's so we'll get into that a

00:41:37,770 --> 00:41:40,770
little bit more when we talk about

00:41:38,700 --> 00:41:42,270
security but that the basic idea is this

00:41:40,770 --> 00:41:43,770
is going to stay cached here until we

00:41:42,270 --> 00:41:44,820
either rebuild it and it doesn't know

00:41:43,770 --> 00:41:46,500
their app get and it says it sees

00:41:44,820 --> 00:41:49,890
there's a difference and so it'll you

00:41:46,500 --> 00:41:53,580
know it'll change that or you know until

00:41:49,890 --> 00:41:55,530
you clear out the cash manually if you

00:41:53,580 --> 00:42:00,170
wanted to blow away that image it's a

00:41:55,530 --> 00:42:00,170
docker rmi for remove image

00:42:03,930 --> 00:42:10,690
and it's going to go remove all the

00:42:07,450 --> 00:42:11,920
unused layers of that cash if it sees

00:42:10,690 --> 00:42:13,599
something and still using one of those

00:42:11,920 --> 00:42:14,859
layers it won't remove it because

00:42:13,599 --> 00:42:18,730
they'll say ask something still using it

00:42:14,859 --> 00:42:22,269
and unless you force it to any way that

00:42:18,730 --> 00:42:24,369
makes sense okay so that's that's a

00:42:22,269 --> 00:42:26,289
little little crash and burn dem oh

00:42:24,369 --> 00:42:30,430
nothing nothing went up in flames too

00:42:26,289 --> 00:42:32,140
bad so now let's talk about the Drupal

00:42:30,430 --> 00:42:35,799
CI infrastructure and how this plays

00:42:32,140 --> 00:42:37,839
into everything I came in a little bit

00:42:35,799 --> 00:42:39,730
late to the drupal to see I group and

00:42:37,839 --> 00:42:41,289
what they were doing but I learned early

00:42:39,730 --> 00:42:43,569
on when I just jumped in and started

00:42:41,289 --> 00:42:46,299
helping out is that they had two really

00:42:43,569 --> 00:42:48,299
big goals for drupal CI that kind of set

00:42:46,299 --> 00:42:50,680
it apart from the old test boss system

00:42:48,299 --> 00:42:52,990
goal number one was to be able to test a

00:42:50,680 --> 00:42:55,539
lot of different combinations of PHP

00:42:52,990 --> 00:42:58,960
different versions of MySQL armory ADB

00:42:55,539 --> 00:43:01,150
even point versions of PHP maybe maybe

00:42:58,960 --> 00:43:02,259
you know the reason I got involved is

00:43:01,150 --> 00:43:03,460
because I wanted to test against

00:43:02,259 --> 00:43:05,499
postgres I wanted to get you know

00:43:03,460 --> 00:43:06,999
postgres support improved in in Drupal 8

00:43:05,499 --> 00:43:08,529
so I was like I'm going to make it so we

00:43:06,999 --> 00:43:09,670
can at least test against postgres then

00:43:08,529 --> 00:43:12,190
we know when it's failing and when it's

00:43:09,670 --> 00:43:13,420
not that we can make it better so so

00:43:12,190 --> 00:43:15,160
testing across all these combinations

00:43:13,420 --> 00:43:16,359
and you kind of get this this this big

00:43:15,160 --> 00:43:17,650
huge matrix of all the different

00:43:16,359 --> 00:43:19,930
versions of PHP and all the different

00:43:17,650 --> 00:43:21,819
versions of the databases and and that

00:43:19,930 --> 00:43:24,640
sort of thing right oh one of the other

00:43:21,819 --> 00:43:26,109
core goals that the Drupal CI team came

00:43:24,640 --> 00:43:28,660
up with was that they wanted to make it

00:43:26,109 --> 00:43:30,009
easier for developers to be able to do

00:43:28,660 --> 00:43:33,569
their own local testing with that

00:43:30,009 --> 00:43:37,029
setting up a whole box or whole system

00:43:33,569 --> 00:43:38,319
to do testing on their own systems I

00:43:37,029 --> 00:43:40,059
like being able to test things right on

00:43:38,319 --> 00:43:41,799
my laptop I don't like having to depend

00:43:40,059 --> 00:43:43,269
on anybody else's infrastructure or the

00:43:41,799 --> 00:43:46,269
internet or whether Amazon's down today

00:43:43,269 --> 00:43:47,529
or those sorts of things I'd like maybe

00:43:46,269 --> 00:43:50,140
it's the Boy Scout in me but I'd like to

00:43:47,529 --> 00:43:51,609
be prepared so so that was one of the

00:43:50,140 --> 00:43:53,289
goals that came out of Drupal CI and

00:43:51,609 --> 00:43:56,589
docker made both of these goals a whole

00:43:53,289 --> 00:43:59,140
lot easier so what we did in the drupal

00:43:56,589 --> 00:44:00,999
CI community has came up with with kind

00:43:59,140 --> 00:44:03,069
of a layered approach to our docker

00:44:00,999 --> 00:44:04,359
images we created docker images

00:44:03,069 --> 00:44:06,039
obviously for the different versions of

00:44:04,359 --> 00:44:07,809
PHP and the different versions of the

00:44:06,039 --> 00:44:10,029
databases but we did it in a layered

00:44:07,809 --> 00:44:13,150
fashion such that we have a a base image

00:44:10,029 --> 00:44:16,359
that everything is based off of beneath

00:44:13,150 --> 00:44:16,970
that there's a PHP base for for the PHP

00:44:16,359 --> 00:44:18,980
even for the

00:44:16,970 --> 00:44:20,300
version so we can instantiate different

00:44:18,980 --> 00:44:23,330
versions of PHP underneath that there's

00:44:20,300 --> 00:44:27,710
a web base and then the individual

00:44:23,330 --> 00:44:30,800
versions web 5.3 5.4 or 5.5 5.6 web 7

00:44:27,710 --> 00:44:33,230
yes we are able to test test things on

00:44:30,800 --> 00:44:34,910
PHP 7 believe it or not even before PHP

00:44:33,230 --> 00:44:37,130
7 is quite out yet so that's that's

00:44:34,910 --> 00:44:39,650
exciting and then same thing with the

00:44:37,130 --> 00:44:43,160
databases we have a database base image

00:44:39,650 --> 00:44:46,570
and then we have minus go 55 or 80b 550

00:44:43,160 --> 00:44:48,710
UD be ten postgres 91 and postgres 904

00:44:46,570 --> 00:44:52,010
so we can actually go out and test

00:44:48,710 --> 00:44:53,570
across all those different versions and

00:44:52,010 --> 00:44:55,820
if you don't believe me just yesterday I

00:44:53,570 --> 00:44:57,410
was sitting in the sprint room and test

00:44:55,820 --> 00:45:00,349
a couple of things against both mysql

00:44:57,410 --> 00:45:03,700
and postgresql that test all I want to

00:45:00,349 --> 00:45:10,190
test against PHP 7 and life's goal 55

00:45:03,700 --> 00:45:11,869
it's there today it works mostly know it

00:45:10,190 --> 00:45:14,990
really does work and it's in and it's

00:45:11,869 --> 00:45:17,570
working surprisingly well so kind of fun

00:45:14,990 --> 00:45:19,190
stuff so let's dive in for a second look

00:45:17,570 --> 00:45:23,780
again let's get away from the slides and

00:45:19,190 --> 00:45:25,250
let's actually go dive in to let's see

00:45:23,780 --> 00:45:26,420
I'm going to make that just a little bit

00:45:25,250 --> 00:45:29,540
bigger so you guys can see is that

00:45:26,420 --> 00:45:31,910
better so what I've got here is I've

00:45:29,540 --> 00:45:35,510
just checked out the Drupal CI test

00:45:31,910 --> 00:45:38,150
bought git repository so you can see

00:45:35,510 --> 00:45:40,490
kind of how we've done things in Drupal

00:45:38,150 --> 00:45:42,800
CI with docker if we go to the

00:45:40,490 --> 00:45:44,510
containers directory you'll see that

00:45:42,800 --> 00:45:45,950
there's a base directory a database

00:45:44,510 --> 00:45:49,700
directory in a web directory again the

00:45:45,950 --> 00:45:52,099
base has all our base docker images is

00:45:49,700 --> 00:45:54,619
so base base we look at the dockerfile

00:45:52,099 --> 00:45:56,359
there it's a pretty straightforward

00:45:54,619 --> 00:45:58,690
we'll walk through it quickly we're

00:45:56,359 --> 00:46:01,369
going to be based on to boon to trustee

00:45:58,690 --> 00:46:03,859
the maintainer is Drupal CI they're the

00:46:01,369 --> 00:46:06,410
ones that created this they've set an

00:46:03,859 --> 00:46:08,210
environment variable called debian front

00:46:06,410 --> 00:46:09,800
end for not interactive that snakes app

00:46:08,210 --> 00:46:11,240
get a little lot happier knowing it's

00:46:09,800 --> 00:46:13,430
not waiting in for this therefore

00:46:11,240 --> 00:46:15,349
somebody did press yes and acknowledge a

00:46:13,430 --> 00:46:16,849
bunch of things it's got a bunch of

00:46:15,349 --> 00:46:18,410
things commented out here as far as

00:46:16,849 --> 00:46:20,030
which mirrors to use and whatnot for a

00:46:18,410 --> 00:46:22,369
boon to we'll skip that for a second and

00:46:20,030 --> 00:46:24,619
then all it does is do an appt quit an

00:46:22,369 --> 00:46:28,849
app get clean apt get update up get

00:46:24,619 --> 00:46:30,440
install unzip them tiny w get doesn't

00:46:28,849 --> 00:46:31,130
have to get auto remove an app get clean

00:46:30,440 --> 00:46:33,440
and that's

00:46:31,130 --> 00:46:35,480
that's all that base image does just the

00:46:33,440 --> 00:46:37,580
base you know things that we need we

00:46:35,480 --> 00:46:40,400
know we need for all the other layers on

00:46:37,580 --> 00:46:46,120
there was a top of that so that's pretty

00:46:40,400 --> 00:46:50,690
straightforward it's fine type today if

00:46:46,120 --> 00:46:53,330
we go to our let's go to our PHP base

00:46:50,690 --> 00:46:56,960
for a second look at that docker file

00:46:53,330 --> 00:47:00,020
it's not too much more too much more

00:46:56,960 --> 00:47:01,820
confusing again this time we're pulling

00:47:00,020 --> 00:47:03,260
from Drupal see I base that previous

00:47:01,820 --> 00:47:04,790
docker file that we looked at as the

00:47:03,260 --> 00:47:06,920
base and then work from there we're

00:47:04,790 --> 00:47:08,540
adding a second environment variable

00:47:06,920 --> 00:47:11,510
called home let's just set the slash

00:47:08,540 --> 00:47:14,690
route we go ahead and install a bunch of

00:47:11,510 --> 00:47:20,530
things that we need to compile PHP we

00:47:14,690 --> 00:47:23,450
that's lots of fun we do a git clone of

00:47:20,530 --> 00:47:24,470
project called PHP env that lets us set

00:47:23,450 --> 00:47:26,060
different you know which different

00:47:24,470 --> 00:47:28,970
versions of PHP which in PHP

00:47:26,060 --> 00:47:31,310
environments we want to build we go

00:47:28,970 --> 00:47:33,290
ahead and make a make a small hack to

00:47:31,310 --> 00:47:34,970
make sure it's compiling with more than

00:47:33,290 --> 00:47:36,610
one course so that it works faster

00:47:34,970 --> 00:47:40,970
because faster is always better right

00:47:36,610 --> 00:47:42,970
and then we go ahead and build PHP we

00:47:40,970 --> 00:47:45,770
install composer we installed rush

00:47:42,970 --> 00:47:47,650
supervisor d we copy some scripts across

00:47:45,770 --> 00:47:52,910
that we're going to need for later and

00:47:47,650 --> 00:47:55,250
then we start running this start Sh that

00:47:52,910 --> 00:47:58,910
just brings that brings that environment

00:47:55,250 --> 00:48:00,920
up and running not too complicated right

00:47:58,910 --> 00:48:03,980
and then if we if we go down the rabbit

00:48:00,920 --> 00:48:09,800
hole one level deeper and go to our web

00:48:03,980 --> 00:48:14,560
base we'll see it gets based on the PHP

00:48:09,800 --> 00:48:18,650
base we add Apache few other things here

00:48:14,560 --> 00:48:19,640
we remove the the PHP 5 CLI version that

00:48:18,650 --> 00:48:21,860
was in there before because we're going

00:48:19,640 --> 00:48:28,040
to use this this this PHP env version

00:48:21,860 --> 00:48:30,100
that we build ourselves we remove a

00:48:28,040 --> 00:48:32,420
couple other things here we copy some

00:48:30,100 --> 00:48:37,880
configuration files over for our virtual

00:48:32,420 --> 00:48:40,280
hosts we modify the Apache configuration

00:48:37,880 --> 00:48:43,390
to create our virtual host and setup you

00:48:40,280 --> 00:48:45,830
know that we're using NPM and

00:48:43,390 --> 00:48:48,890
enable that Drupal virtual host and

00:48:45,830 --> 00:48:53,300
that's that that's that that layer right

00:48:48,890 --> 00:48:57,640
there finally last but not least we can

00:48:53,300 --> 00:49:02,690
go into our web directory put a web

00:48:57,640 --> 00:49:04,400
let's look at five dot six why not and

00:49:02,690 --> 00:49:06,890
we can see that it's based on the on

00:49:04,400 --> 00:49:09,710
that web base that we saw we enable five

00:49:06,890 --> 00:49:13,280
dot six seven or also looks like we're

00:49:09,710 --> 00:49:14,780
installing and a PC you and

00:49:13,280 --> 00:49:16,430
upgrade curl and a few other little

00:49:14,780 --> 00:49:19,040
things that we need just to make things

00:49:16,430 --> 00:49:21,680
run nicely we copy up a bunch of

00:49:19,040 --> 00:49:24,710
configuration files over dot ini files

00:49:21,680 --> 00:49:26,150
for PHP and then we start then we were

00:49:24,710 --> 00:49:29,330
on the start bad SH and what the start

00:49:26,150 --> 00:49:30,920
da sh does is starts apache with the

00:49:29,330 --> 00:49:32,390
appropriate version of PHP running and

00:49:30,920 --> 00:49:33,940
make sure that that's up and running for

00:49:32,390 --> 00:49:35,900
us to actually be able to run our tests

00:49:33,940 --> 00:49:37,880
so again it's kind of like this

00:49:35,900 --> 00:49:39,590
seven-layer burrito dip right we get

00:49:37,880 --> 00:49:41,300
seven cysts several different layers

00:49:39,590 --> 00:49:43,070
here but they each build on the on the

00:49:41,300 --> 00:49:46,490
layer before that and that in a nutshell

00:49:43,070 --> 00:49:48,920
is what the Drupal see id occupies look

00:49:46,490 --> 00:49:50,330
like now just for the fun of it will

00:49:48,920 --> 00:49:54,590
jump back up here we'll look at the

00:49:50,330 --> 00:49:56,030
database it just very very quickly show

00:49:54,590 --> 00:50:02,240
you that there's no tricks up my sleeve

00:49:56,030 --> 00:50:05,300
it's just really really easy we install

00:50:02,240 --> 00:50:07,460
MySQL server and that cat removing few

00:50:05,300 --> 00:50:09,980
things cleaned up clean up and that's it

00:50:07,460 --> 00:50:15,500
that's that's how terribly difficult it

00:50:09,980 --> 00:50:19,270
is to create of MySQL image again that

00:50:15,500 --> 00:50:19,270
makes sense question

00:50:23,180 --> 00:50:29,460
you do you do docker like if I if I did

00:50:26,279 --> 00:50:32,220
docker build on this docker file it

00:50:29,460 --> 00:50:33,839
would pull that DB basic image if it

00:50:32,220 --> 00:50:36,329
didn't if it wasn't already on my system

00:50:33,839 --> 00:50:44,430
it would pull it from the from the

00:50:36,329 --> 00:50:46,500
repository from from the docker hub no

00:50:44,430 --> 00:50:48,269
no the whole lamp stack is not on one is

00:50:46,500 --> 00:50:51,809
that is that your question okay the lamp

00:50:48,269 --> 00:50:54,359
stack is not in one container we have we

00:50:51,809 --> 00:50:55,589
typically have apache and PHP running in

00:50:54,359 --> 00:50:57,180
one container and we have the database

00:50:55,589 --> 00:50:58,859
running and another container and then

00:50:57,180 --> 00:51:09,869
we then we connect those two containers

00:50:58,859 --> 00:51:11,369
together so yes this is saying that this

00:51:09,869 --> 00:51:13,650
this is our MySQL container and it

00:51:11,369 --> 00:51:16,319
depends on on the database base

00:51:13,650 --> 00:51:17,640
container so anything that we added in

00:51:16,319 --> 00:51:20,250
the database based container would be in

00:51:17,640 --> 00:51:21,720
this container as well sorry the image

00:51:20,250 --> 00:51:23,960
I'm using the wrong terminology of the

00:51:21,720 --> 00:51:23,960
image

00:51:41,470 --> 00:51:49,130
so so so so let me let me take a step

00:51:46,010 --> 00:51:55,940
back and go back to this slide here let

00:51:49,130 --> 00:51:58,210
me go back to right here so this image

00:51:55,940 --> 00:52:00,890
let's just pick the mysql 55 container

00:51:58,210 --> 00:52:04,880
or the image excuse me how to messing up

00:52:00,890 --> 00:52:06,950
again the image the mysql 55 image is

00:52:04,880 --> 00:52:08,780
just a single image but it's built on

00:52:06,950 --> 00:52:14,440
layers that were provided by the

00:52:08,780 --> 00:52:17,150
database base image and the base image

00:52:14,440 --> 00:52:22,000
okay so let me just show you how that

00:52:17,150 --> 00:52:29,050
that works so if we go say docker

00:52:22,000 --> 00:52:32,510
history drupal CI base will see that

00:52:29,050 --> 00:52:33,680
that latest version is again it's

00:52:32,510 --> 00:52:38,270
chopping off the first letter that were

00:52:33,680 --> 00:52:46,220
at seven c8c right there right if we do

00:52:38,270 --> 00:52:50,150
docker history drupal CI DB base you'll

00:52:46,220 --> 00:52:52,880
see that seven c8c that same image ID is

00:52:50,150 --> 00:52:56,720
here and that the database base just

00:52:52,880 --> 00:52:59,869
adds one layer on top of that okay and

00:52:56,720 --> 00:53:05,329
then if we were to look at soccer

00:52:59,869 --> 00:53:10,810
history drupal CIA mysql 5.5 if we

00:53:05,329 --> 00:53:14,329
scroll up we should see right there

00:53:10,810 --> 00:53:16,369
seven c8 see that that that layer there

00:53:14,329 --> 00:53:18,470
that was the database base and then the

00:53:16,369 --> 00:53:20,599
MySQL images just added these layers on

00:53:18,470 --> 00:53:23,060
top of it additional commands that were

00:53:20,599 --> 00:53:25,040
run now that creates one image that's my

00:53:23,060 --> 00:53:28,150
SQL 55 you could create as many

00:53:25,040 --> 00:53:31,819
containers from that image as you want

00:53:28,150 --> 00:53:34,520
but that's just one image that is that

00:53:31,819 --> 00:53:36,680
clear now okay hopefully I start using

00:53:34,520 --> 00:53:37,970
the right language here it's hard you're

00:53:36,680 --> 00:53:41,750
talking about images and containers and

00:53:37,970 --> 00:53:42,990
they get messed up in your head okay how

00:53:41,750 --> 00:53:45,060
we doing on time

00:53:42,990 --> 00:53:46,470
a couple more minutes here and let's go

00:53:45,060 --> 00:53:49,440
back to the slides and talk about just a

00:53:46,470 --> 00:53:51,330
couple couple other things here so i

00:53:49,440 --> 00:53:53,460
showed you i showed you can to the the

00:53:51,330 --> 00:53:56,030
code and how it works you know dr. files

00:53:53,460 --> 00:53:58,260
aren't too terribly difficult to learn

00:53:56,030 --> 00:53:59,850
troubleshooting them can be a little

00:53:58,260 --> 00:54:02,130
tricky at times i think we've gotten

00:53:59,850 --> 00:54:04,470
pretty good at learning some interesting

00:54:02,130 --> 00:54:05,700
and neat ways to do that we're happy to

00:54:04,470 --> 00:54:07,590
happy to share those with you offline

00:54:05,700 --> 00:54:10,200
just jump in the drupal testing IRC

00:54:07,590 --> 00:54:11,790
channel and and ask jeremy or myself or

00:54:10,200 --> 00:54:17,190
ricardo or one of the other guys and and

00:54:11,790 --> 00:54:20,010
we'd be able to help you fit docker

00:54:17,190 --> 00:54:21,660
versus vagrant so so the question is is

00:54:20,010 --> 00:54:24,500
when would you use vagrant when would

00:54:21,660 --> 00:54:29,360
you use docker and when do you use both

00:54:24,500 --> 00:54:32,040
again we're talking about application

00:54:29,360 --> 00:54:34,860
you know virtualization here rather than

00:54:32,040 --> 00:54:38,240
that virtual machine you know the

00:54:34,860 --> 00:54:41,310
machine or operating system type

00:54:38,240 --> 00:54:43,590
virtualization you would use you would

00:54:41,310 --> 00:54:45,690
use at least for me I use docker when I

00:54:43,590 --> 00:54:47,550
want to have one application that stand

00:54:45,690 --> 00:54:50,760
alone that's self-contained and it's

00:54:47,550 --> 00:54:52,230
just that application when i use vagrant

00:54:50,760 --> 00:54:54,180
for is spinning up a new virtual machine

00:54:52,230 --> 00:54:55,650
to test a bunch of pieces of software

00:54:54,180 --> 00:54:57,720
and how they fit together and sometimes

00:54:55,650 --> 00:54:59,100
it may be i fire vagrant to fire up a

00:54:57,720 --> 00:55:00,090
virtual machine that pulls in this

00:54:59,100 --> 00:55:03,150
docker container in this docker

00:55:00,090 --> 00:55:07,680
container and does things across across

00:55:03,150 --> 00:55:09,480
both of them one ones you know operating

00:55:07,680 --> 00:55:11,250
system level you know virtualization

00:55:09,480 --> 00:55:13,920
your virtualizing the entire operating

00:55:11,250 --> 00:55:18,180
system and one you just open your users

00:55:13,920 --> 00:55:20,130
virtualizing an application there is

00:55:18,180 --> 00:55:21,390
some overlap there and and it can be

00:55:20,130 --> 00:55:23,100
confusing and it can be tricky

00:55:21,390 --> 00:55:24,240
especially we'll talk about security

00:55:23,100 --> 00:55:27,000
here in a minute from a security

00:55:24,240 --> 00:55:28,680
standpoint you better understand what

00:55:27,000 --> 00:55:30,000
you know what layer you're doing your

00:55:28,680 --> 00:55:32,070
virtualization and how you're going to

00:55:30,000 --> 00:55:34,490
keep that up but does that help answer

00:55:32,070 --> 00:55:34,490
the question

00:55:40,680 --> 00:55:47,410
think think think think think of think

00:55:45,280 --> 00:55:49,240
of docker applications like the little

00:55:47,410 --> 00:55:52,450
Lego blocks you're going to stack those

00:55:49,240 --> 00:55:55,120
together typically use vagrant to to

00:55:52,450 --> 00:55:56,290
make it easy to reproduce a kit of those

00:55:55,120 --> 00:55:58,870
that you can plug together to build

00:55:56,290 --> 00:56:00,310
something a castle or a ship an airplane

00:55:58,870 --> 00:56:05,800
or whatever whatever you want to build

00:56:00,310 --> 00:56:15,940
out of Lego blocks it varies it really

00:56:05,800 --> 00:56:17,050
is exactly yeah yeah but-- if you if

00:56:15,940 --> 00:56:19,210
you're familiar with buddha docker it's

00:56:17,050 --> 00:56:21,850
just yeah for all intents and purposes

00:56:19,210 --> 00:56:23,920
is just figuring just with a different

00:56:21,850 --> 00:56:25,750
name all right let's give you some

00:56:23,920 --> 00:56:27,250
warnings here I don't want you to get

00:56:25,750 --> 00:56:29,470
too excited about docker because it's

00:56:27,250 --> 00:56:32,950
not perfect it's got some warts it's got

00:56:29,470 --> 00:56:34,030
some some soft spots try to warn you

00:56:32,950 --> 00:56:36,400
about some of those in the next few

00:56:34,030 --> 00:56:39,550
minutes before I wrap up here first of

00:56:36,400 --> 00:56:41,470
all if when you go in and pull an image

00:56:39,550 --> 00:56:43,960
from the from a registry if you don't

00:56:41,470 --> 00:56:45,820
specify a colon and what version you

00:56:43,960 --> 00:56:49,360
want like you saw I went out and I

00:56:45,820 --> 00:56:52,060
pulled like Ubuntu colon trustee or a

00:56:49,360 --> 00:56:54,880
boon to colon 12.4 if you don't specify

00:56:52,060 --> 00:56:56,350
that tag it's going to default to just

00:56:54,880 --> 00:56:59,650
pulling whatever the latest version is

00:56:56,350 --> 00:57:01,120
which is what we all want right until a

00:56:59,650 --> 00:57:02,470
new version of a boon to comes out and

00:57:01,120 --> 00:57:04,600
our application isn't ready for it and

00:57:02,470 --> 00:57:07,290
what happens oh my images don't build

00:57:04,600 --> 00:57:10,510
any more cred that's not what I wanted

00:57:07,290 --> 00:57:12,460
it also you know from a from a security

00:57:10,510 --> 00:57:14,920
update standpoint may not be what you

00:57:12,460 --> 00:57:17,080
want because typically you want

00:57:14,920 --> 00:57:18,400
reliability you want built this image

00:57:17,080 --> 00:57:19,630
today and I build this image tomorrow

00:57:18,400 --> 00:57:21,640
and it's going to be the same except for

00:57:19,630 --> 00:57:23,200
maybe some security updates right but if

00:57:21,640 --> 00:57:24,310
it goes and pulls the latest version of

00:57:23,200 --> 00:57:26,410
a mood to and it's a completely

00:57:24,310 --> 00:57:27,880
different version suddenly you don't

00:57:26,410 --> 00:57:29,080
have consistency there and then you're

00:57:27,880 --> 00:57:30,250
wearing an okay to vote do I have the

00:57:29,080 --> 00:57:31,870
security updates or don't I have the

00:57:30,250 --> 00:57:37,890
security updates and it gets confusing

00:57:31,870 --> 00:57:37,890
so I always recommend that you specify

00:57:38,010 --> 00:57:43,600
which specifically which version of a of

00:57:41,260 --> 00:57:45,940
a you know of a particular image you

00:57:43,600 --> 00:57:47,410
want now the flip side to that is that

00:57:45,940 --> 00:57:47,859
means you have to go and say hey when I

00:57:47,410 --> 00:57:49,390
want

00:57:47,859 --> 00:57:51,069
great doing oars we have to go do that

00:57:49,390 --> 00:57:52,960
manually and rebuild your images and you

00:57:51,069 --> 00:57:53,980
know if you're using containers build

00:57:52,960 --> 00:57:56,890
off that image you probably want to

00:57:53,980 --> 00:57:59,470
restart those containers but that's you

00:57:56,890 --> 00:58:03,009
know that that's that's security piece

00:57:59,470 --> 00:58:05,319
number one or the next question more

00:58:03,009 --> 00:58:16,359
question before i give the big reveal

00:58:05,319 --> 00:58:18,579
here so if the image maintainer is not

00:58:16,359 --> 00:58:20,109
doing their job then you're still out of

00:58:18,579 --> 00:58:22,029
luck you're right and that and that's

00:58:20,109 --> 00:58:28,900
that's exactly what I wanted to bring up

00:58:22,029 --> 00:58:31,960
with this next slide it could be it

00:58:28,900 --> 00:58:34,390
could be if it's just a name for the

00:58:31,960 --> 00:58:36,309
image now in the case of the fedora and

00:58:34,390 --> 00:58:38,259
the boon to images on on the docker hub

00:58:36,309 --> 00:58:41,619
they're there they're actually official

00:58:38,259 --> 00:58:43,450
images from those communities but in

00:58:41,619 --> 00:58:45,039
general what's the difference between

00:58:43,450 --> 00:58:52,359
these two commands up here on the on the

00:58:45,039 --> 00:58:56,609
slide is there is is there really any

00:58:52,359 --> 00:58:58,569
difference between these two nope

00:58:56,609 --> 00:59:02,559
dockers great and everything if you

00:58:58,569 --> 00:59:04,420
trust the internet do you trust the

00:59:02,559 --> 00:59:05,859
internet I can't tell you how many how

00:59:04,420 --> 00:59:08,140
many open-source how many open-source

00:59:05,859 --> 00:59:08,920
projects out there as this that have

00:59:08,140 --> 00:59:10,539
something like this as their

00:59:08,920 --> 00:59:20,619
installation instructions just trust

00:59:10,539 --> 00:59:25,869
this shell script we'll get to that on

00:59:20,619 --> 00:59:28,420
the next slide okay dr. docker runs his

00:59:25,869 --> 00:59:29,859
route anyway let me talk about this is

00:59:28,420 --> 00:59:31,599
one more reason why you may want to run

00:59:29,859 --> 00:59:32,680
your own registry just be careful with

00:59:31,599 --> 00:59:34,539
it big in because there's no

00:59:32,680 --> 00:59:37,930
authentication on the registries yet

00:59:34,539 --> 00:59:40,660
okay next slide um containers aren't

00:59:37,930 --> 00:59:43,269
bulletproof in fact dan walsh the guy at

00:59:40,660 --> 00:59:45,549
red hat too who worked on selinux and

00:59:43,269 --> 00:59:46,960
the big security guy there he's famous

00:59:45,549 --> 00:59:49,720
were saying containers don't actually

00:59:46,960 --> 00:59:53,950
contain um it's not all that difficult

00:59:49,720 --> 00:59:56,230
to break out of a container sorry they

00:59:53,950 --> 00:59:57,609
don't contain then they kind of isolate

00:59:56,230 --> 00:59:58,779
somewhat but if you're an apartment

00:59:57,609 --> 00:59:59,770
building can you punch through the wall

00:59:58,779 --> 01:00:03,310
and

00:59:59,770 --> 01:00:06,160
to the apartment next door yeah it's

01:00:03,310 --> 01:00:08,190
possible so you wanted you typically

01:00:06,160 --> 01:00:11,020
want to use things like selinux expert

01:00:08,190 --> 01:00:12,790
those those types of security add-ons to

01:00:11,020 --> 01:00:16,630
the Linux kernel to help provide more

01:00:12,790 --> 01:00:18,610
isolation between those between those so

01:00:16,630 --> 01:00:21,550
yes it is running in a you know in a

01:00:18,610 --> 01:00:23,290
container but there's there's a number

01:00:21,550 --> 01:00:25,210
of ways to break out of containers which

01:00:23,290 --> 01:00:28,990
which is unfortunate but but it's still

01:00:25,210 --> 01:00:31,540
not bulletproof all right point three

01:00:28,990 --> 01:00:35,620
about security who's keeping your images

01:00:31,540 --> 01:00:38,500
up to date who's keeping your containers

01:00:35,620 --> 01:00:39,550
up to date you could be pulling the

01:00:38,500 --> 01:00:41,740
latest images but if you're not

01:00:39,550 --> 01:00:44,380
restarting your containers based on

01:00:41,740 --> 01:00:46,210
those newer images you may have an old

01:00:44,380 --> 01:00:47,920
version running out there docker

01:00:46,210 --> 01:00:50,530
themselves did a study earlier this year

01:00:47,920 --> 01:00:53,440
and they found that over thirty percent

01:00:50,530 --> 01:00:56,500
of the docker images on the docker hub

01:00:53,440 --> 01:00:58,630
on their registry over thirty percent

01:00:56,500 --> 01:01:02,370
had serious security problems whether it

01:00:58,630 --> 01:01:05,680
was heartbleed shell shock you name it

01:01:02,370 --> 01:01:06,880
so again it's nice that these things are

01:01:05,680 --> 01:01:08,620
out there and available for us to use

01:01:06,880 --> 01:01:10,000
but do your homework find out whether

01:01:08,620 --> 01:01:12,120
they're being kept up to date make sure

01:01:10,000 --> 01:01:14,650
you're keeping your stuff up to date

01:01:12,120 --> 01:01:16,930
let's not make the internet a more

01:01:14,650 --> 01:01:19,270
dangerous place just just because this

01:01:16,930 --> 01:01:25,720
makes it more convenient for us to to do

01:01:19,270 --> 01:01:27,520
some work all right we've got a couple

01:01:25,720 --> 01:01:31,990
more minutes for questions comments

01:01:27,520 --> 01:01:33,910
complaints Rotten Tomatoes one here and

01:01:31,990 --> 01:01:35,110
then there if we get you to step up to

01:01:33,910 --> 01:01:36,700
the mic for the questions that means I

01:01:35,110 --> 01:01:39,720
don't have to repeat repeat the question

01:01:36,700 --> 01:01:44,620
and it'll be better for the recording

01:01:39,720 --> 01:01:49,480
thank you yeah it's regarding running

01:01:44,620 --> 01:01:51,220
Tucker in production right so vs.

01:01:49,480 --> 01:01:54,340
vagrant regular you you won't probably

01:01:51,220 --> 01:01:56,710
use vagrant in production I hope not so

01:01:54,340 --> 01:01:58,690
would you recommend it would you do it

01:01:56,710 --> 01:02:00,460
and how do you for example keep your

01:01:58,690 --> 01:02:03,820
containers running right if you have a

01:02:00,460 --> 01:02:07,270
standard Apache installation then all

01:02:03,820 --> 01:02:09,160
the processes and our in it systems are

01:02:07,270 --> 01:02:12,940
there to run it after reboot or whatever

01:02:09,160 --> 01:02:13,390
so right um I used our current

01:02:12,940 --> 01:02:15,700
production

01:02:13,390 --> 01:02:19,300
but I use it in a limited fashion in

01:02:15,700 --> 01:02:21,040
production if you've got a lot of docker

01:02:19,300 --> 01:02:22,750
containers that you're running and you

01:02:21,040 --> 01:02:24,430
want orchestration around those there

01:02:22,750 --> 01:02:25,780
are open source applications like Cooper

01:02:24,430 --> 01:02:27,310
Nettie's that are that are specifically

01:02:25,780 --> 01:02:29,050
built to orchestrate make sure that

01:02:27,310 --> 01:02:30,640
these things stay up and if if this

01:02:29,050 --> 01:02:32,260
container goes down start up another one

01:02:30,640 --> 01:02:33,700
and if this one can't be reached and

01:02:32,260 --> 01:02:35,110
start it started up over here on another

01:02:33,700 --> 01:02:37,510
pod and those sorts of things there's

01:02:35,110 --> 01:02:38,680
there's orchestration pieces short of

01:02:37,510 --> 01:02:40,180
that if you don't want to go to all that

01:02:38,680 --> 01:02:41,770
trouble then I would say you manage it

01:02:40,180 --> 01:02:43,450
like you do any other application you

01:02:41,770 --> 01:02:45,010
monitor it and if you're if you're

01:02:43,450 --> 01:02:47,110
monitoring system tells you they hey

01:02:45,010 --> 01:02:49,540
Patchi isn't it has gone down and then

01:02:47,110 --> 01:02:51,490
you go start to start back up again okay

01:02:49,540 --> 01:02:53,110
but yes I hope you're not running vigor

01:02:51,490 --> 01:02:58,960
in production because that's not not not

01:02:53,110 --> 01:03:00,400
the right month yeah I thank you very

01:02:58,960 --> 01:03:02,020
much really good presentation really

01:03:00,400 --> 01:03:05,050
enjoyed it this is what I was looking

01:03:02,020 --> 01:03:06,340
for particularly look what a local

01:03:05,050 --> 01:03:09,370
developer vial and that was because i

01:03:06,340 --> 01:03:12,070
have a mac i think dr. runs on a small

01:03:09,370 --> 01:03:13,350
video virtual machine is that right now

01:03:12,070 --> 01:03:15,220
the thing that interests me is I use

01:03:13,350 --> 01:03:16,690
vagrant at the moment for local

01:03:15,220 --> 01:03:20,470
development what the biggest problem of

01:03:16,690 --> 01:03:24,040
had is the performance particular in

01:03:20,470 --> 01:03:26,650
duple views and so I was looking for a

01:03:24,040 --> 01:03:29,950
docker to provide that isolation that

01:03:26,650 --> 01:03:32,080
you get that the vm gives you but but

01:03:29,950 --> 01:03:34,660
more lightweight is that that sound like

01:03:32,080 --> 01:03:36,850
a reasonable approach or yeah I'm not

01:03:34,660 --> 01:03:38,620
the world's expert on Mac site as a

01:03:36,850 --> 01:03:40,360
former Fedora project leader I'm kind of

01:03:38,620 --> 01:03:42,070
kind of biased towards Linux anyway so

01:03:40,360 --> 01:03:43,300
I'm going to linux on my machine it's

01:03:42,070 --> 01:03:44,830
been a long time since i've used to make

01:03:43,300 --> 01:03:47,610
but from everybody I've talked to that's

01:03:44,830 --> 01:03:50,140
kind of so you running say a docker

01:03:47,610 --> 01:03:55,030
application like your web de versailles

01:03:50,140 --> 01:03:57,070
on in a docker container on a Mac is

01:03:55,030 --> 01:03:58,840
potentially better performance than

01:03:57,070 --> 01:04:01,000
running that same sign of vagrant

01:03:58,840 --> 01:04:03,040
provision vm is that would that be it

01:04:01,000 --> 01:04:05,320
really can be because you're not loading

01:04:03,040 --> 01:04:07,360
a whole nother operating system yeah on

01:04:05,320 --> 01:04:09,940
top finally I spent you already know

01:04:07,360 --> 01:04:12,730
these toys kitem attic it's a UI on the

01:04:09,940 --> 01:04:14,260
Mac for building docker not from okay

01:04:12,730 --> 01:04:15,520
sorry that's all right does he have

01:04:14,260 --> 01:04:17,410
matter thoughts out of it no matter

01:04:15,520 --> 01:04:21,220
right there thanks very much super super

01:04:17,410 --> 01:04:23,110
presentation thank you thank you so I

01:04:21,220 --> 01:04:24,810
was curious how are you were bridging

01:04:23,110 --> 01:04:26,750
obviously you showed indeed i do--

01:04:24,810 --> 01:04:30,260
interface for i want

01:04:26,750 --> 01:04:31,910
this web version and this DB version how

01:04:30,260 --> 01:04:34,310
you're taking that input and then

01:04:31,910 --> 01:04:36,110
instantiating those actual containers if

01:04:34,310 --> 01:04:38,750
you're generating a docker file on the

01:04:36,110 --> 01:04:40,790
fly that is it's it's not it's not an

01:04:38,750 --> 01:04:42,530
image that combines those two it's just

01:04:40,790 --> 01:04:44,960
when we fire up a test body it says hey

01:04:42,530 --> 01:04:46,370
start this docker containers start this

01:04:44,960 --> 01:04:49,460
docker container connect the database

01:04:46,370 --> 01:04:51,200
here to the web one here and then starts

01:04:49,460 --> 01:04:54,410
fire off the tests on the on the web

01:04:51,200 --> 01:04:56,000
container Jeremy can give you more

01:04:54,410 --> 01:04:57,230
details on how that works he knows

01:04:56,000 --> 01:04:59,210
that's just a better than I do but

01:04:57,230 --> 01:05:00,650
Jeremy just raise your hand so anybody

01:04:59,210 --> 01:05:03,110
anybody has questions about the test

01:05:00,650 --> 01:05:04,460
system Jeremy's your guy and there's

01:05:03,110 --> 01:05:06,800
docker compose now which makes that

01:05:04,460 --> 01:05:09,860
easier for reps that you know yeah mol

01:05:06,800 --> 01:05:11,360
file it is um just a reminder for folks

01:05:09,860 --> 01:05:15,830
that don't know we're doing a docker

01:05:11,360 --> 01:05:19,550
tools throw down things off right after

01:05:15,830 --> 01:05:22,070
this in 130 I think that's what 345

01:05:19,550 --> 01:05:24,170
right over here so if you're interested

01:05:22,070 --> 01:05:25,550
in this if you have more questions about

01:05:24,170 --> 01:05:26,900
even getting cept with Mac and stuff

01:05:25,550 --> 01:05:28,190
we've got people are a lot of people are

01:05:26,900 --> 01:05:31,310
already using this for local development

01:05:28,190 --> 01:05:33,230
like myself so cool thanks for thanks

01:05:31,310 --> 01:05:35,390
for reminding us about that all right

01:05:33,230 --> 01:05:39,220
any other questions comments complaints

01:05:35,390 --> 01:05:39,220
I think we got about 30 seconds left I

01:05:39,910 --> 01:05:49,940
yeah you were building your whole lamp

01:05:44,180 --> 01:05:52,070
stack in one image do you usually do

01:05:49,940 --> 01:05:54,650
that or build different images for

01:05:52,070 --> 01:05:56,720
different services or right so I I feel

01:05:54,650 --> 01:05:58,580
different images for different services

01:05:56,720 --> 01:06:01,460
so in this case we had two images we had

01:05:58,580 --> 01:06:03,680
one for the for apache and PHP we have

01:06:01,460 --> 01:06:06,110
one for MySQL or postgres whatever the

01:06:03,680 --> 01:06:14,500
database is I like to split things out

01:06:06,110 --> 01:06:14,500
separate service per image cool if

01:06:14,850 --> 01:06:19,300
right remember that docker runs a single

01:06:17,380 --> 01:06:26,050
process I'll parrot Jeremy here since he

01:06:19,300 --> 01:06:28,980
doesn't have a microphone so right now i

01:06:26,050 --> 01:06:32,230
will i will say it's bad practice to

01:06:28,980 --> 01:06:34,180
have like supervisor dior or in it as

01:06:32,230 --> 01:06:35,470
your process that the doctor that the

01:06:34,180 --> 01:06:38,080
docker container is running that's the

01:06:35,470 --> 01:06:39,520
whole when the whole reason of doing you

01:06:38,080 --> 01:06:40,990
know container our application

01:06:39,520 --> 01:06:42,610
containerization is because you want to

01:06:40,990 --> 01:06:43,630
run one single application not because

01:06:42,610 --> 01:06:45,340
you want to run a whole one in its

01:06:43,630 --> 01:06:48,130
system and a whole bunch of daimons

01:06:45,340 --> 01:06:50,260
behind it so typically you want one

01:06:48,130 --> 01:06:58,450
container per application or one image /

01:06:50,260 --> 01:07:01,210
ethical / service yeah it does happen

01:06:58,450 --> 01:07:02,860
that way all right with that I I live

01:07:01,210 --> 01:07:05,890
you leave you have sweet sweet dreams of

01:07:02,860 --> 01:07:10,000
walking on the beach at sunset looking

01:07:05,890 --> 01:07:11,860
at gantry cranes oh yeah they're they're

01:07:10,000 --> 01:07:13,830
the right down I didn't I didn't take

01:07:11,860 --> 01:07:15,910
this picture but it was a picture of

01:07:13,830 --> 01:07:18,090
something similar I think I think it was

01:07:15,910 --> 01:07:21,210
local here i'm not i'm not positive but

01:07:18,090 --> 01:07:21,210
thank you

01:07:29,980 --> 01:07:34,270

YouTube URL: https://www.youtube.com/watch?v=sMBbbZVwLIU


