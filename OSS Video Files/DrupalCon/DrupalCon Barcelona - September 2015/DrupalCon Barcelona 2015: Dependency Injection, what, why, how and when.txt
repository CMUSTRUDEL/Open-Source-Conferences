Title: DrupalCon Barcelona 2015: Dependency Injection, what, why, how and when
Publication date: 2015-09-22
Playlist: DrupalCon Barcelona - September 2015
Description: 
	Dependency injection helps us to create reusable flexible code by making the dependencies explicit and replaceable. This talk starts by looking at how this works as a pattern, the various types of injection and how this can help us write flexible code. Whilst using a dependency injection container is not necessary to gain the benefits of dependency injection it helps to manage the dependencies in larger applications. The Symfony container is powerful and fully featured, the second part of this talk explored this container and how it can be a powerful asset in developing maintainable applications.
Captions: 
	00:00:00,230 --> 00:00:07,560
and so yeah my name is Richard Miller

00:00:04,140 --> 00:00:09,990
and you can find me on Twitter it is mr.

00:00:07,560 --> 00:00:13,230
underscore underscore our underscore

00:00:09,990 --> 00:00:14,820
Miller which is a slightly awkward thing

00:00:13,230 --> 00:00:15,870
that I didn't really realize how

00:00:14,820 --> 00:00:20,939
annoying it would be at the time of

00:00:15,870 --> 00:00:23,160
choosing it so I I work sent to a lapse

00:00:20,939 --> 00:00:28,349
in the UK so it's on sale to UK I'm

00:00:23,160 --> 00:00:31,500
based up in Sheffield and before sort of

00:00:28,349 --> 00:00:32,910
like senseo labs and using sore Symphony

00:00:31,500 --> 00:00:36,030
as a framework for choice a lot

00:00:32,910 --> 00:00:38,399
previously works a small company where

00:00:36,030 --> 00:00:40,530
we did something to call up people I

00:00:38,399 --> 00:00:42,210
think did back then maybe still due to

00:00:40,530 --> 00:00:46,590
some extent and accidentally made our

00:00:42,210 --> 00:00:48,750
own and framework and one of the things

00:00:46,590 --> 00:00:49,829
we found doing that apart from that you

00:00:48,750 --> 00:00:52,559
know everyone else is doing much better

00:00:49,829 --> 00:00:55,350
job of it was it's quite difficult to

00:00:52,559 --> 00:00:57,360
resolve writing code for one customer

00:00:55,350 --> 00:00:58,680
and I'm wanting to reuse a slight

00:00:57,360 --> 00:01:01,440
different version of it somewhere else

00:00:58,680 --> 00:01:02,940
for another customer and sort of running

00:01:01,440 --> 00:01:05,250
into all kinds of problems about how to

00:01:02,940 --> 00:01:07,170
you know ending up maintaining multiple

00:01:05,250 --> 00:01:08,939
versions of it or having all sorts of

00:01:07,170 --> 00:01:10,770
kind of complicated code to work out

00:01:08,939 --> 00:01:14,220
which version of code we should be using

00:01:10,770 --> 00:01:16,590
for that customer and it's sort of

00:01:14,220 --> 00:01:18,840
finding out about dependency injection

00:01:16,590 --> 00:01:20,909
how that worked and really helped me to

00:01:18,840 --> 00:01:22,770
start to sort out of that code base and

00:01:20,909 --> 00:01:25,140
at the time it wasn't hugely popular

00:01:22,770 --> 00:01:28,920
insight as a technique that people used

00:01:25,140 --> 00:01:30,900
in the PHP world but sort of read about

00:01:28,920 --> 00:01:34,799
it and blogs and things from Java was

00:01:30,900 --> 00:01:36,030
used a lot more extensively and and then

00:01:34,799 --> 00:01:37,619
when we sort of came to our senses and

00:01:36,030 --> 00:01:39,180
realized that maybe we should be using

00:01:37,619 --> 00:01:41,280
one of these other great frameworks that

00:01:39,180 --> 00:01:45,000
are out there instead of persevering

00:01:41,280 --> 00:01:47,220
Varon not so great one and it was one of

00:01:45,000 --> 00:01:49,590
the things that really sort of i liked

00:01:47,220 --> 00:01:51,090
about symphony symphony so it was a

00:01:49,590 --> 00:01:53,729
symphony to which we sort of started

00:01:51,090 --> 00:01:57,350
using it will started investigating and

00:01:53,729 --> 00:02:04,439
looking at when it was in a beta version

00:01:57,350 --> 00:02:06,259
so um so what is dependency injection so

00:02:04,439 --> 00:02:08,160
since their technique for

00:02:06,259 --> 00:02:10,619
object-oriented programming where we

00:02:08,160 --> 00:02:12,030
separate what objects were actually

00:02:10,619 --> 00:02:14,780
going to use from how we

00:02:12,030 --> 00:02:19,170
use them so well and make a separation

00:02:14,780 --> 00:02:23,850
so this is it pretty much so in this

00:02:19,170 --> 00:02:27,150
example we've got a classes stock levels

00:02:23,850 --> 00:02:28,530
class it needs to use it has dependency

00:02:27,150 --> 00:02:30,690
on a notifier object but it's going to

00:02:28,530 --> 00:02:32,970
make use of so instead of creating

00:02:30,690 --> 00:02:35,610
inside the class we inject in freiburg

00:02:32,970 --> 00:02:38,520
constructor and then make use of it that

00:02:35,610 --> 00:02:42,000
way so when we create a stop in standard

00:02:38,520 --> 00:02:44,100
stock levels plat an object it needs a

00:02:42,000 --> 00:02:47,400
notifier and constructors going to force

00:02:44,100 --> 00:02:49,050
us to pass one in and we separating that

00:02:47,400 --> 00:02:56,250
construction from the use of the

00:02:49,050 --> 00:03:02,489
notifier and that's it really so if you

00:02:56,250 --> 00:03:04,709
want to so and essentially that is all

00:03:02,489 --> 00:03:06,510
there is to the basic concept of penalty

00:03:04,709 --> 00:03:08,670
injection and I'm going to talk about so

00:03:06,510 --> 00:03:09,989
like why we do this and advantages but

00:03:08,670 --> 00:03:11,790
also where some of the complications

00:03:09,989 --> 00:03:13,350
arise from a while you've perhaps out of

00:03:11,790 --> 00:03:15,510
sorts service containers and dependency

00:03:13,350 --> 00:03:17,070
injection containers and all these

00:03:15,510 --> 00:03:21,780
there's lots of blog place out about how

00:03:17,070 --> 00:03:23,700
you should and shouldn't do it so M so

00:03:21,780 --> 00:03:25,170
why should we do have I mentioned a

00:03:23,700 --> 00:03:28,590
little bit briefly below if we're going

00:03:25,170 --> 00:03:31,560
to a bit more details so for this we use

00:03:28,590 --> 00:03:33,600
the example of we've got requirement

00:03:31,560 --> 00:03:36,150
after your plate stock level of a

00:03:33,600 --> 00:03:37,560
product we also need to email customers

00:03:36,150 --> 00:03:40,380
who has to be notified about it

00:03:37,560 --> 00:03:42,060
presumably I get notified but something

00:03:40,380 --> 00:03:48,030
came back into stock not just every

00:03:42,060 --> 00:03:50,130
change in stock level m okay so at first

00:03:48,030 --> 00:03:52,859
thing we might create a lot of code so

00:03:50,130 --> 00:03:54,120
we're going to update the stock level

00:03:52,859 --> 00:03:55,859
and undo all this stuff and then I

00:03:54,120 --> 00:03:57,959
appreciate that was quite small so if we

00:03:55,859 --> 00:03:59,190
split em because there's a lot of sort

00:03:57,959 --> 00:04:01,500
of code going on there so we split

00:03:59,190 --> 00:04:02,940
what's happening and also say this is

00:04:01,500 --> 00:04:05,010
all happening after we've already kind

00:04:02,940 --> 00:04:06,480
of done the actual stock level updating

00:04:05,010 --> 00:04:08,820
persisted that somewhere then were like

00:04:06,480 --> 00:04:11,489
okay with that notify those customers

00:04:08,820 --> 00:04:12,890
who wanted to be notified so we're going

00:04:11,489 --> 00:04:15,900
to do it by email so we set up our

00:04:12,890 --> 00:04:19,019
mailer object so it's sort of very

00:04:15,900 --> 00:04:22,349
tedious of configuration code and we're

00:04:19,019 --> 00:04:24,599
using smtp here's they're saying the

00:04:22,349 --> 00:04:25,930
address of the mail server port to use a

00:04:24,599 --> 00:04:30,009
username and pass

00:04:25,930 --> 00:04:31,479
word and that's not my usual password I

00:04:30,009 --> 00:04:37,750
don't have a useful faster than you like

00:04:31,479 --> 00:04:39,340
that but mm so we also need to do the

00:04:37,750 --> 00:04:41,460
same so our customers were getting from

00:04:39,340 --> 00:04:44,229
the database this list of customers

00:04:41,460 --> 00:04:47,650
we're using doctrine flight in this case

00:04:44,229 --> 00:04:49,960
so we need to configure a and say tell

00:04:47,650 --> 00:04:51,729
it in this case we're just using sequel

00:04:49,960 --> 00:04:53,740
light and probably don't want to use

00:04:51,729 --> 00:04:55,780
that before your production database but

00:04:53,740 --> 00:04:59,110
after the sake of conciseness and the

00:04:55,780 --> 00:05:00,669
examples so we create an entity manager

00:04:59,110 --> 00:05:03,070
in that and it gives us a repository and

00:05:00,669 --> 00:05:07,930
now we can finally actually do something

00:05:03,070 --> 00:05:10,449
with this stuff so we've got user

00:05:07,930 --> 00:05:12,099
repository ask it for customers that

00:05:10,449 --> 00:05:15,310
were registered to stop notification for

00:05:12,099 --> 00:05:17,590
that product ID then that gives us

00:05:15,310 --> 00:05:19,630
backers sort of group a collection of

00:05:17,590 --> 00:05:21,550
customers we can loop through vout

00:05:19,630 --> 00:05:23,740
collection of customers and using for

00:05:21,550 --> 00:05:25,509
each in this case for each one we're

00:05:23,740 --> 00:05:28,270
going to create a message telling them

00:05:25,509 --> 00:05:29,800
about this little products for making

00:05:28,270 --> 00:05:32,530
stock and then finally we're going to

00:05:29,800 --> 00:05:36,539
use our mailer object we created in the

00:05:32,530 --> 00:05:36,539
first slide bear to send a message

00:05:41,639 --> 00:05:47,949
so the khaid we've created well I

00:05:46,030 --> 00:05:49,630
created in this case is quite inflexible

00:05:47,949 --> 00:05:52,389
so there's a lot of hard-coded values in

00:05:49,630 --> 00:05:55,510
there and all the values for like

00:05:52,389 --> 00:05:57,160
usernames password where time server the

00:05:55,510 --> 00:06:00,520
fact that we're using Swift mile in fact

00:05:57,160 --> 00:06:02,350
that we're using doctrine and it's also

00:06:00,520 --> 00:06:03,940
kind of reasonably complex to follow if

00:06:02,350 --> 00:06:05,740
you open a file and find that because

00:06:03,940 --> 00:06:07,180
you can't got to look at read through

00:06:05,740 --> 00:06:09,760
the details of what's happening you can

00:06:07,180 --> 00:06:11,470
see there's the latest uh from a lower

00:06:09,760 --> 00:06:15,960
lip stuff around doctrine and finally we

00:06:11,470 --> 00:06:18,190
can't get down to what we want to do so

00:06:15,960 --> 00:06:21,340
what we could do to improve this is

00:06:18,190 --> 00:06:22,479
rather than them just you know I split

00:06:21,340 --> 00:06:25,180
across slides but we could actually

00:06:22,479 --> 00:06:27,100
split that in separate objects first and

00:06:25,180 --> 00:06:28,900
I'll give up now so if we split that up

00:06:27,100 --> 00:06:30,220
so if you take our stock levels class

00:06:28,900 --> 00:06:32,380
again the some other stuff happening

00:06:30,220 --> 00:06:35,500
before we get to this point but instead

00:06:32,380 --> 00:06:36,940
of showing all that instantiates with

00:06:35,500 --> 00:06:39,430
mailer and doctrine will hide those

00:06:36,940 --> 00:06:41,260
inside calculate it inside some objects

00:06:39,430 --> 00:06:44,349
we've got an emailer object now and the

00:06:41,260 --> 00:06:45,490
customers object and then we can see

00:06:44,349 --> 00:06:48,510
that we're going to find all those

00:06:45,490 --> 00:06:51,039
customers and then notify them so we've

00:06:48,510 --> 00:06:54,280
cut out some of that sort of messing

00:06:51,039 --> 00:06:56,260
things to read and an abstracted away

00:06:54,280 --> 00:06:59,070
from it so we'd end up with an email of

00:06:56,260 --> 00:07:02,740
class maybe like this but hides that

00:06:59,070 --> 00:07:05,789
Swift Milo instantiation and a

00:07:02,740 --> 00:07:08,250
customer's object which hides the

00:07:05,789 --> 00:07:15,160
doctrines different delegate to the

00:07:08,250 --> 00:07:16,360
doctoring repository so set up global

00:07:15,160 --> 00:07:18,580
class looks like this and it's a bit

00:07:16,360 --> 00:07:23,500
easier to read we might find that both

00:07:18,580 --> 00:07:25,270
actually and that abstraction level

00:07:23,500 --> 00:07:26,650
might be even more detail when we still

00:07:25,270 --> 00:07:28,000
really need to know so what all we

00:07:26,650 --> 00:07:31,539
really need to know if we're looking at

00:07:28,000 --> 00:07:33,520
the code updates stock levels is that at

00:07:31,539 --> 00:07:35,530
that point we want to notify people that

00:07:33,520 --> 00:07:37,599
the stock levels have been updated so we

00:07:35,530 --> 00:07:41,080
can simplify it right down saying we

00:07:37,599 --> 00:07:42,760
have a notifier object that we're

00:07:41,080 --> 00:07:44,590
creating and we're going to notify

00:07:42,760 --> 00:07:47,560
people about the product and then in

00:07:44,590 --> 00:07:50,320
that we shift that code that does the

00:07:47,560 --> 00:07:54,090
actuals and looping through the

00:07:50,320 --> 00:07:54,090
customers and sending the emails

00:08:00,660 --> 00:08:05,710
so we kind of move that code from being

00:08:03,270 --> 00:08:07,570
sort of complex and something that's

00:08:05,710 --> 00:08:09,700
very simple especially if you know at

00:08:07,570 --> 00:08:11,560
the level of looking at the stock levels

00:08:09,700 --> 00:08:14,440
we can we now have two lines what we had

00:08:11,560 --> 00:08:16,690
so 30 or 40 before so we kind of

00:08:14,440 --> 00:08:18,130
simplifying each level of abstraction we

00:08:16,690 --> 00:08:19,990
can see what's happening it's only if we

00:08:18,130 --> 00:08:21,310
care exactly how it's happening but we

00:08:19,990 --> 00:08:24,460
then have to dig down and look at the

00:08:21,310 --> 00:08:25,870
code source code for that class so in

00:08:24,460 --> 00:08:28,890
terms of like following the path fever

00:08:25,870 --> 00:08:32,860
code and we simplify that quite a lot

00:08:28,890 --> 00:08:34,539
it's still not doubt at all vote with

00:08:32,860 --> 00:08:37,270
any of the flexibility issues so it's

00:08:34,539 --> 00:08:41,219
still all very hard coded and we're

00:08:37,270 --> 00:08:43,570
using hard-coded values a lot for the

00:08:41,219 --> 00:08:50,950
details like that where to find Swift

00:08:43,570 --> 00:08:52,510
mate their mail server and so like this

00:08:50,950 --> 00:08:54,970
is well to be honest discos gonna be

00:08:52,510 --> 00:08:56,350
pretty difficult to work with so even

00:08:54,970 --> 00:08:57,520
aside from trying to ease in another

00:08:56,350 --> 00:08:58,990
project it's like through another

00:08:57,520 --> 00:09:00,760
developer environment a staging

00:08:58,990 --> 00:09:02,200
environment uat environment and a

00:09:00,760 --> 00:09:03,850
production environment hopefully they

00:09:02,200 --> 00:09:06,790
all point to different mail servers and

00:09:03,850 --> 00:09:08,830
things like this so and the first thing

00:09:06,790 --> 00:09:12,010
we could do I guess is could have some

00:09:08,830 --> 00:09:14,140
kind of config object and we start

00:09:12,010 --> 00:09:17,800
account access to to get some parameter

00:09:14,140 --> 00:09:19,600
values and that's going to maybe read in

00:09:17,800 --> 00:09:22,300
a different config file depending on

00:09:19,600 --> 00:09:25,720
which environment were in or which

00:09:22,300 --> 00:09:27,280
project it is so in kind of make it a

00:09:25,720 --> 00:09:29,230
little bit more flexible here well just

00:09:27,280 --> 00:09:36,010
usable at all because we're now I'm able

00:09:29,230 --> 00:09:38,050
to set those values differently okay so

00:09:36,010 --> 00:09:40,210
we're now got requirement so a different

00:09:38,050 --> 00:09:43,320
project maybe they're going to not use

00:09:40,210 --> 00:09:45,970
email we're going to use SMS messages to

00:09:43,320 --> 00:09:49,570
inform those customers and the things

00:09:45,970 --> 00:09:53,170
come back into stock so what can we do

00:09:49,570 --> 00:09:55,210
to accommodate this in the code we could

00:09:53,170 --> 00:09:58,990
use our config again so we're asking a

00:09:55,210 --> 00:10:02,050
config object to tell us what the stocks

00:09:58,990 --> 00:10:03,970
notification method is and then we're

00:10:02,050 --> 00:10:04,860
going to depending on the case about in

00:10:03,970 --> 00:10:06,150
the switch don't

00:10:04,860 --> 00:10:07,920
going to call the different methods so

00:10:06,150 --> 00:10:15,090
if it's email will notified by email as

00:10:07,920 --> 00:10:16,650
SMS in a notify by SMS and then the sort

00:10:15,090 --> 00:10:21,630
of have these methods inside the

00:10:16,650 --> 00:10:23,760
in-stock notifier cnc we kind of made a

00:10:21,630 --> 00:10:25,020
bit more extensible if we wanted to add

00:10:23,760 --> 00:10:27,900
another one now we'd have to come in

00:10:25,020 --> 00:10:33,210
here add another method and actually add

00:10:27,900 --> 00:10:34,470
another case statement as well um so

00:10:33,210 --> 00:10:36,150
yeah we're going to have to constantly

00:10:34,470 --> 00:10:37,770
kind of come back in and edit this class

00:10:36,150 --> 00:10:40,280
so we could maybe we could push that

00:10:37,770 --> 00:10:43,380
choice further up for class a bit and

00:10:40,280 --> 00:10:46,830
well further up the object graph a bit

00:10:43,380 --> 00:10:48,480
and say instead of doing it in the

00:10:46,830 --> 00:10:53,220
notify we can maybe do that in the stock

00:10:48,480 --> 00:10:54,840
level so in here we say okay so if it's

00:10:53,220 --> 00:10:57,690
emails we're going to use new mail in

00:10:54,840 --> 00:11:00,840
stock notifier and if it's a semester we

00:10:57,690 --> 00:11:02,970
use a new SMS in stock notifier so now

00:11:00,840 --> 00:11:04,560
you might have to create a new object to

00:11:02,970 --> 00:11:06,210
do that but the only change me to

00:11:04,560 --> 00:11:08,520
actually makes our existing code now is

00:11:06,210 --> 00:11:11,690
to kind of come in here and create a new

00:11:08,520 --> 00:11:11,690
case statements about

00:11:16,880 --> 00:11:23,900
okay so we made the code more flexible

00:11:22,340 --> 00:11:26,960
now we can respond to different config

00:11:23,900 --> 00:11:28,490
values and we can sort of have different

00:11:26,960 --> 00:11:30,470
paths for it depending on how we can

00:11:28,490 --> 00:11:33,110
figure it in this case everyone to use

00:11:30,470 --> 00:11:35,180
email or SMS but we have start to grow

00:11:33,110 --> 00:11:36,590
the complex to back into it so we've

00:11:35,180 --> 00:11:38,720
already got those sort of we've got to

00:11:36,590 --> 00:11:40,550
talk to an extra config object we've

00:11:38,720 --> 00:11:41,900
also got to kind of switch through

00:11:40,550 --> 00:11:44,510
different values in that case and we

00:11:41,900 --> 00:11:45,800
have to keep adding new cases to switch

00:11:44,510 --> 00:11:48,020
mate statement if we want to support

00:11:45,800 --> 00:11:49,220
different methods of doing this so if

00:11:48,020 --> 00:11:51,080
you're doing this throughout codebase

00:11:49,220 --> 00:11:52,880
you can see kind of grow quite a bit of

00:11:51,080 --> 00:11:54,700
complexity in their base back to it

00:11:52,880 --> 00:11:57,250
being a bit more difficult to read and

00:11:54,700 --> 00:12:04,730
there's more things going on than just

00:11:57,250 --> 00:12:10,340
making you so object so what we can do

00:12:04,730 --> 00:12:12,140
then is use that sort of constructor

00:12:10,340 --> 00:12:14,630
injection I spoke about right to the

00:12:12,140 --> 00:12:16,700
start and say when I create my stock

00:12:14,630 --> 00:12:19,420
level object I'm just going to give it

00:12:16,700 --> 00:12:22,400
the fully formed already constructed

00:12:19,420 --> 00:12:24,350
notifier objects I'm going to set it to

00:12:22,400 --> 00:12:25,760
a private variable in this case and then

00:12:24,350 --> 00:12:27,290
when we get to the point of updating

00:12:25,760 --> 00:12:30,200
stock levels all we need to do is say

00:12:27,290 --> 00:12:32,870
notify people about this product update

00:12:30,200 --> 00:12:36,080
so if we want to use emails we

00:12:32,870 --> 00:12:39,680
instantiate it like this the vmail in

00:12:36,080 --> 00:12:42,560
stock notifier and if we want to use it

00:12:39,680 --> 00:12:45,970
with SMS and we can instantiate it like

00:12:42,560 --> 00:12:48,590
this and just use it an SMS notifier and

00:12:45,970 --> 00:12:49,910
in this example it doesn't cope with the

00:12:48,590 --> 00:12:52,310
fact that maybe sometime you know you

00:12:49,910 --> 00:12:54,200
might want to have email some customers

00:12:52,310 --> 00:12:55,580
and smsing others but let's just assume

00:12:54,200 --> 00:13:01,370
it's one or the other for the sake of

00:12:55,580 --> 00:13:02,720
this M okay so by using that sort of

00:13:01,370 --> 00:13:05,150
dependency injection we're kind of

00:13:02,720 --> 00:13:07,220
saying I don't want my time I object to

00:13:05,150 --> 00:13:08,300
instantiate its own dependencies enough

00:13:07,220 --> 00:13:10,040
to worry about what those dependencies

00:13:08,300 --> 00:13:12,920
are i'm going to create them somewhere

00:13:10,040 --> 00:13:15,350
else pass them in ready formed and the

00:13:12,920 --> 00:13:17,120
class can just say just use the ones

00:13:15,350 --> 00:13:18,680
that doesn't care which one it is it

00:13:17,120 --> 00:13:23,750
just knows what it's going to do with

00:13:18,680 --> 00:13:25,370
them and one of your advantages is that

00:13:23,750 --> 00:13:27,020
we're making explicit how many things

00:13:25,370 --> 00:13:29,020
with depending on so if you end up kind

00:13:27,020 --> 00:13:30,130
of saying I need this and this and beer

00:13:29,020 --> 00:13:31,540
this and you've got this massive

00:13:30,130 --> 00:13:33,550
constructive it's growing and growing

00:13:31,540 --> 00:13:35,620
and it highlights the fact that maybe

00:13:33,550 --> 00:13:36,880
that class is doing too much work itself

00:13:35,620 --> 00:13:38,950
and maybe there's something else you

00:13:36,880 --> 00:13:43,390
could do to kind of simplify it pass

00:13:38,950 --> 00:13:46,240
some of that work elsewhere so there was

00:13:43,390 --> 00:13:50,890
a problem with that version now so if we

00:13:46,240 --> 00:13:52,990
look at this so this is a simplified

00:13:50,890 --> 00:13:55,870
version we're passing the notifying to

00:13:52,990 --> 00:13:59,380
the constructor and then we're calling

00:13:55,870 --> 00:14:00,910
notified method fortunately we could do

00:13:59,380 --> 00:14:02,260
this still when we're creating it and

00:14:00,910 --> 00:14:04,870
say I'm going to want to new stock

00:14:02,260 --> 00:14:06,250
levels object and i'm just going to pass

00:14:04,870 --> 00:14:08,470
you some other object it's not a

00:14:06,250 --> 00:14:10,690
notifier and then i'm going to call

00:14:08,470 --> 00:14:16,300
update stock level on it and we're going

00:14:10,690 --> 00:14:17,470
to see this unfortunately so so fatal

00:14:16,300 --> 00:14:19,270
error we're getting a call to an

00:14:17,470 --> 00:14:21,190
undefined method because it's not abut

00:14:19,270 --> 00:14:26,710
I'm not a notifier object doesn't have a

00:14:21,190 --> 00:14:28,210
notify method to call so we could say

00:14:26,710 --> 00:14:31,450
well we better make sure that when we

00:14:28,210 --> 00:14:34,270
construct our stock levels objects but

00:14:31,450 --> 00:14:37,660
it is an email in stock notified that we

00:14:34,270 --> 00:14:39,700
get so we can check news instant self is

00:14:37,660 --> 00:14:41,830
one way to say if isn't instance of

00:14:39,700 --> 00:14:43,330
email stock no try that is great carry

00:14:41,830 --> 00:14:46,750
on if it's not looking for an exception

00:14:43,330 --> 00:14:48,370
of this point fortunately PHP makes that

00:14:46,750 --> 00:14:49,780
the saves is writing some that

00:14:48,370 --> 00:14:52,120
boilerplate code and we can use tight

00:14:49,780 --> 00:14:55,360
pimps on the constructor to do that so

00:14:52,120 --> 00:14:58,690
this time we're saying we're insisting

00:14:55,360 --> 00:15:01,030
on an email in stock notifier if i try

00:14:58,690 --> 00:15:04,240
and run this again and i'll get a

00:15:01,030 --> 00:15:06,670
different error message with stone so

00:15:04,240 --> 00:15:08,770
now I'm saying it's a there's a

00:15:06,670 --> 00:15:10,750
catchable fatal error although not sure

00:15:08,770 --> 00:15:13,360
anyone ever does catch them the argument

00:15:10,750 --> 00:15:15,760
one pass to it must be an instance of

00:15:13,360 --> 00:15:17,680
email in stock notifying instead an

00:15:15,760 --> 00:15:20,800
instance that not a notifier was given

00:15:17,680 --> 00:15:22,210
so it doesn't let say helpers if we're

00:15:20,800 --> 00:15:23,380
actually running this code in production

00:15:22,210 --> 00:15:24,430
we still made a mistake but it means

00:15:23,380 --> 00:15:26,080
that when you're doing something in

00:15:24,430 --> 00:15:27,670
development and you see you get a much

00:15:26,080 --> 00:15:29,350
clearer error message was much more

00:15:27,670 --> 00:15:30,700
explicit about what the problem was it's

00:15:29,350 --> 00:15:32,530
not just that something didn't have a

00:15:30,700 --> 00:15:34,300
method you tried to give a wrong type of

00:15:32,530 --> 00:15:35,740
thing to something and it kind of

00:15:34,300 --> 00:15:37,480
documents that code as well so if

00:15:35,740 --> 00:15:39,340
someone's reading it they can say it

00:15:37,480 --> 00:15:41,860
needs an email and stop notify and not

00:15:39,340 --> 00:15:42,800
just it needs a notify whatever on it

00:15:41,860 --> 00:15:48,200
will you know I've no idea

00:15:42,800 --> 00:15:50,089
what that is fortunately if we do that

00:15:48,200 --> 00:15:52,220
with the concrete implementation of

00:15:50,089 --> 00:15:54,080
email and stock notifier and then say

00:15:52,220 --> 00:15:56,209
actually I want to use my SMS in stock

00:15:54,080 --> 00:15:59,240
notifier we're going to get the same

00:15:56,209 --> 00:16:03,110
problem because it's not an email in

00:15:59,240 --> 00:16:05,300
stock notifier so we've kind of like

00:16:03,110 --> 00:16:13,730
ruin that flexibility for the sake of a

00:16:05,300 --> 00:16:16,850
bit of safety okay so we can solve this

00:16:13,730 --> 00:16:18,380
by using an interface and type tempting

00:16:16,850 --> 00:16:20,810
on that so all we need is so our

00:16:18,380 --> 00:16:22,550
interface just says I'm something that

00:16:20,810 --> 00:16:27,200
well I'm a notifier and I have a

00:16:22,550 --> 00:16:28,850
notifying method we can update the

00:16:27,200 --> 00:16:31,670
definitions of our email in stock made

00:16:28,850 --> 00:16:33,320
fire SMS in stock notify at any future

00:16:31,670 --> 00:16:37,310
notifies that we had to say that they

00:16:33,320 --> 00:16:38,839
implement VN stock notifier will get a

00:16:37,310 --> 00:16:41,660
fatal error event if we don't actually

00:16:38,839 --> 00:16:44,990
implement the map de notify method when

00:16:41,660 --> 00:16:52,640
we try and create one of those and then

00:16:44,990 --> 00:16:55,970
we can update our stock level class to

00:16:52,640 --> 00:16:58,190
type in on the interface and not on the

00:16:55,970 --> 00:17:00,680
concrete implementation so now we know

00:16:58,190 --> 00:17:02,450
we don't really know what my notifier is

00:17:00,680 --> 00:17:03,890
we don't really the stock level class

00:17:02,450 --> 00:17:06,110
doesn't care what it is it just guys

00:17:03,890 --> 00:17:08,419
that when you pass me about objects I

00:17:06,110 --> 00:17:10,490
know you've got this you this interface

00:17:08,419 --> 00:17:12,439
you have this method I can call I can

00:17:10,490 --> 00:17:15,650
call it happily it may just do nothing

00:17:12,439 --> 00:17:17,240
and you might call out some sort of

00:17:15,650 --> 00:17:20,660
third-party service that helps us like

00:17:17,240 --> 00:17:23,929
some nice stuff out by like traditional

00:17:20,660 --> 00:17:25,160
mail and it may be a whole collection of

00:17:23,929 --> 00:17:26,569
them that sends out in all sorts of

00:17:25,160 --> 00:17:28,760
different ways but you're up to go over

00:17:26,569 --> 00:17:30,890
all i care about is it has that method

00:17:28,760 --> 00:17:32,270
I'm going to be able to call it and I'm

00:17:30,890 --> 00:17:35,230
not going to run into any problems when

00:17:32,270 --> 00:17:35,230
I do try and call it

00:17:38,880 --> 00:17:43,390
so what was saying is it yeah it's great

00:17:41,529 --> 00:17:46,059
pull apart these classes this way and

00:17:43,390 --> 00:17:49,960
then by depending on abstractions

00:17:46,059 --> 00:17:52,390
interfaces Fred for incidents we can

00:17:49,960 --> 00:17:53,559
avoid tight coupling between the classes

00:17:52,390 --> 00:17:55,179
and actually get that kind of

00:17:53,559 --> 00:17:56,950
flexibility to wire them up in different

00:17:55,179 --> 00:18:03,760
ways and get more use out of each

00:17:56,950 --> 00:18:06,460
individual class ok so then you

00:18:03,760 --> 00:18:07,720
mentioned we've been showing constructor

00:18:06,460 --> 00:18:09,309
injection where we're passing those

00:18:07,720 --> 00:18:11,770
dependent objects in free the

00:18:09,309 --> 00:18:13,240
constructor and there are other types of

00:18:11,770 --> 00:18:14,770
ways of injects and those dependencies

00:18:13,240 --> 00:18:17,020
I'm going to so briefly talk about

00:18:14,770 --> 00:18:19,059
values personally I always try and use

00:18:17,020 --> 00:18:20,740
construction constructor injection I

00:18:19,059 --> 00:18:24,700
don't particularly like these other ways

00:18:20,740 --> 00:18:26,320
of doing it so and and the great thing

00:18:24,700 --> 00:18:27,760
with constructor injection essentially

00:18:26,320 --> 00:18:29,679
is but it happens at the time you know

00:18:27,760 --> 00:18:33,549
you construct an object in that state

00:18:29,679 --> 00:18:35,289
and you know but it's and ready to be

00:18:33,549 --> 00:18:39,700
used and that no one else is going to

00:18:35,289 --> 00:18:43,270
change it under you and so one of those

00:18:39,700 --> 00:18:46,750
is property injection which you may see

00:18:43,270 --> 00:18:48,640
an IM which is essentially just

00:18:46,750 --> 00:18:50,740
simplifying it down to this and so yeah

00:18:48,640 --> 00:18:52,120
and I guess it's when people don't want

00:18:50,740 --> 00:18:53,409
to worry about right inspector you just

00:18:52,120 --> 00:18:56,890
say I've got a public property that's a

00:18:53,409 --> 00:18:59,440
notifier and get rid of the constructor

00:18:56,890 --> 00:19:02,890
and that anyone sent it it's caused the

00:18:59,440 --> 00:19:04,600
problem we've got with this is that we

00:19:02,890 --> 00:19:06,130
lose all that safety tight pants again

00:19:04,600 --> 00:19:08,649
without to point where anyone can set

00:19:06,130 --> 00:19:18,580
and a notifier property to anything they

00:19:08,649 --> 00:19:20,380
want em em so you could improvements a

00:19:18,580 --> 00:19:22,539
setter injection which does get a bit

00:19:20,380 --> 00:19:24,909
more youth which essentially what we're

00:19:22,539 --> 00:19:27,490
doing here is saying that we're back to

00:19:24,909 --> 00:19:29,679
a private property for the notifier

00:19:27,490 --> 00:19:32,230
we're using instead of a construct my

00:19:29,679 --> 00:19:33,730
third a setter method that says it looks

00:19:32,230 --> 00:19:35,440
the same as I can strip the raelia

00:19:33,730 --> 00:19:40,950
saying set notifier to an in-stock

00:19:35,440 --> 00:19:45,100
notifier and then makes a bit that way

00:19:40,950 --> 00:19:48,789
so it's a problem with this which is if

00:19:45,100 --> 00:19:50,150
we do this so we're creating a new stock

00:19:48,789 --> 00:19:52,940
levels class

00:19:50,150 --> 00:19:56,930
an object from the class and then we're

00:19:52,940 --> 00:19:58,430
updating the stock levels and but we've

00:19:56,930 --> 00:19:59,810
forgotten if we're using Santa injection

00:19:58,430 --> 00:20:01,940
we do also need to call that set a

00:19:59,810 --> 00:20:03,800
method to give it the notifier so if we

00:20:01,940 --> 00:20:06,830
run that without making other changes to

00:20:03,800 --> 00:20:11,060
the class then we're going to find that

00:20:06,830 --> 00:20:14,090
we've got a null object so the problem

00:20:11,060 --> 00:20:15,530
with using setter injection well can set

00:20:14,090 --> 00:20:17,540
your injection is that you can kind of

00:20:15,530 --> 00:20:19,640
create the class or create an object

00:20:17,540 --> 00:20:22,250
from a class in an inconsistent way so

00:20:19,640 --> 00:20:23,480
in a way work can then fail in use we

00:20:22,250 --> 00:20:24,410
use the constructor injection we

00:20:23,480 --> 00:20:27,050
wouldn't have got into that situation

00:20:24,410 --> 00:20:29,630
and these things you can do inside to

00:20:27,050 --> 00:20:31,340
make sure that's ok you could say ok

00:20:29,630 --> 00:20:33,200
well they only want to notify people I

00:20:31,340 --> 00:20:34,610
don't always want to notify people so

00:20:33,200 --> 00:20:36,980
I'm going to make it an optional

00:20:34,610 --> 00:20:39,410
dependency and then say have I gotten

00:20:36,980 --> 00:20:41,330
you sniff same to say is very notifying

00:20:39,410 --> 00:20:45,440
saps on this property if it wears call

00:20:41,330 --> 00:20:47,240
that if not don't and so that's one of

00:20:45,440 --> 00:20:49,460
the kind of use cases Sarah injection by

00:20:47,240 --> 00:20:51,110
don't I wouldn't use it other than that

00:20:49,460 --> 00:20:52,970
and even an I would consider using like

00:20:51,110 --> 00:20:54,770
a null implementation of a notify so we

00:20:52,970 --> 00:20:57,020
pass in a notifier that doesn't actually

00:20:54,770 --> 00:20:59,150
do anything but as far as the stock

00:20:57,020 --> 00:21:01,490
levels class is concerned it's exactly

00:20:59,150 --> 00:21:04,060
the same as if it's received one that

00:21:01,490 --> 00:21:04,060
did do something

00:21:10,659 --> 00:21:19,119
okay so that's it kind of at a class

00:21:16,029 --> 00:21:21,580
level is all there is to it but how it

00:21:19,119 --> 00:21:22,989
all works an application evolved than

00:21:21,580 --> 00:21:24,669
just sort of change a bit comes

00:21:22,989 --> 00:21:26,649
interesting because part of problem we

00:21:24,669 --> 00:21:28,690
have is on a problem that they're kind

00:21:26,649 --> 00:21:32,349
of knock on effect to this is that if

00:21:28,690 --> 00:21:34,330
we're taking all that creation of

00:21:32,349 --> 00:21:36,399
dependencies out of the individual

00:21:34,330 --> 00:21:38,619
classes then it has to go somewhere so

00:21:36,399 --> 00:21:40,179
whenever we so we've kind of had simple

00:21:38,619 --> 00:21:43,330
examples if I would just call new this

00:21:40,179 --> 00:21:45,009
the new one of those but as we go we

00:21:43,330 --> 00:21:46,960
kind of find well if we do this to all I

00:21:45,009 --> 00:21:48,940
classes so we only looked at stock

00:21:46,960 --> 00:21:50,349
levels before but in the email in stock

00:21:48,940 --> 00:21:53,830
notifier we're probably going to need to

00:21:50,349 --> 00:21:55,509
create we want to inject its

00:21:53,830 --> 00:21:57,909
dependencies instead of saying new

00:21:55,509 --> 00:21:59,289
emailer a new customer here we could

00:21:57,909 --> 00:22:01,059
change that and say oh actually I want

00:21:59,289 --> 00:22:03,159
you to give me a customer repository I

00:22:01,059 --> 00:22:05,710
want you to give me an E and give me an

00:22:03,159 --> 00:22:09,220
email a service and then I'll make use

00:22:05,710 --> 00:22:11,919
of those and properties rather than

00:22:09,220 --> 00:22:14,109
instantiating the time I use them in

00:22:11,919 --> 00:22:15,369
anything now remailer sort class well we

00:22:14,109 --> 00:22:16,899
might want to make that an interface so

00:22:15,369 --> 00:22:19,239
we can switch between Swift mailer and

00:22:16,899 --> 00:22:21,729
another mailer so again we introduce new

00:22:19,239 --> 00:22:23,619
mailer class but Swift mailer we

00:22:21,729 --> 00:22:26,619
actually create the Swift mailer object

00:22:23,619 --> 00:22:28,239
itself outside of amp a sit-in perhaps

00:22:26,619 --> 00:22:30,190
rather than having that code in there to

00:22:28,239 --> 00:22:33,279
do the setting up and the new I'm

00:22:30,190 --> 00:22:35,529
feeling the same with customers about

00:22:33,279 --> 00:22:37,389
doctrine customer repository it's an

00:22:35,529 --> 00:22:39,999
implementation of customers so we can

00:22:37,389 --> 00:22:41,649
swap it in and out again and we create

00:22:39,999 --> 00:22:43,659
these since we want to create the

00:22:41,649 --> 00:22:48,059
doctrine and city manager somewhere else

00:22:43,659 --> 00:22:51,039
and pass it in so if we do all of this

00:22:48,059 --> 00:22:52,629
it makes expand shaking a stock levels

00:22:51,039 --> 00:22:54,249
class quite a bit more difficult so it

00:22:52,629 --> 00:22:55,989
might be quite flexible but if we want

00:22:54,249 --> 00:22:57,519
to create what we need we might have all

00:22:55,989 --> 00:22:59,349
of this case we've got all that stuff

00:22:57,519 --> 00:23:01,210
saying his doctoring configuration

00:22:59,349 --> 00:23:04,629
here's the doctoring comp connection

00:23:01,210 --> 00:23:07,749
configuration got our mail server server

00:23:04,629 --> 00:23:09,429
port username password you need to

00:23:07,749 --> 00:23:11,499
create an entity manager we need to

00:23:09,429 --> 00:23:13,090
create a swift mailer transport we need

00:23:11,499 --> 00:23:15,220
to create Swift mail or incidents and

00:23:13,090 --> 00:23:17,529
then we can start searching all of this

00:23:15,220 --> 00:23:19,299
stuff together so we can see it's a new

00:23:17,529 --> 00:23:22,210
stock levels of a new email in stock

00:23:19,299 --> 00:23:23,649
notifier custom repository that has an

00:23:22,210 --> 00:23:24,080
entity manager and a swift mail of

00:23:23,649 --> 00:23:27,200
English

00:23:24,080 --> 00:23:29,000
it's a mailer so it's starting to get

00:23:27,200 --> 00:23:30,409
quite complicated just to set up all of

00:23:29,000 --> 00:23:33,950
these classes they might be nice and

00:23:30,409 --> 00:23:35,659
small and simple themselves but because

00:23:33,950 --> 00:23:37,220
we've separated that somewhere else in

00:23:35,659 --> 00:23:39,350
our application we now need to do all

00:23:37,220 --> 00:23:41,120
the objects instantiation do all of this

00:23:39,350 --> 00:23:44,539
sort of stuff and then we can make use

00:23:41,120 --> 00:23:46,779
of it and what creates the stock level

00:23:44,539 --> 00:23:48,980
objects because whatever is using that

00:23:46,779 --> 00:23:50,090
probably isn't going to want to do all

00:23:48,980 --> 00:23:52,100
of that code we're probably going to

00:23:50,090 --> 00:23:54,230
want to actually create it some push

00:23:52,100 --> 00:23:55,880
back up again and inject created

00:23:54,230 --> 00:23:58,070
somewhere else and inject it into Bob

00:23:55,880 --> 00:24:00,769
ject so we keep pushing all that

00:23:58,070 --> 00:24:05,720
dependencies up then we find its

00:24:00,769 --> 00:24:06,710
dependencies all the way up and they all

00:24:05,720 --> 00:24:08,090
kind of pop out the top of our

00:24:06,710 --> 00:24:12,559
application we need to kind of create

00:24:08,090 --> 00:24:15,710
them all somewhere and then we can make

00:24:12,559 --> 00:24:17,570
use of it so when we have quite often

00:24:15,710 --> 00:24:19,100
with things like this we've got there

00:24:17,570 --> 00:24:23,510
are patterns that can help us deal with

00:24:19,100 --> 00:24:24,919
this so there's design patterns for this

00:24:23,510 --> 00:24:28,130
sort of thing so some of the ones that

00:24:24,919 --> 00:24:32,200
around for construction but we could use

00:24:28,130 --> 00:24:37,760
and things like builders and factories

00:24:32,200 --> 00:24:42,590
and but nowadays well does say a more

00:24:37,760 --> 00:24:45,549
specific objection that we can use which

00:24:42,590 --> 00:24:49,159
is that a dependency injection container

00:24:45,549 --> 00:24:50,870
so this is them like good container or

00:24:49,159 --> 00:24:52,399
sort of specific object or in the case

00:24:50,870 --> 00:24:53,750
of sort of symphonies one quite a lot a

00:24:52,399 --> 00:24:56,690
collection of quite a lot of objects

00:24:53,750 --> 00:24:58,549
that work together to wire up all of our

00:24:56,690 --> 00:25:01,309
objects and then give it to us in this

00:24:58,549 --> 00:25:03,260
pre-wired state you might also hear it

00:25:01,309 --> 00:25:07,340
called the service container in the

00:25:03,260 --> 00:25:08,539
symphony world and because we kind of

00:25:07,340 --> 00:25:10,340
think of these sort of objects for

00:25:08,539 --> 00:25:12,440
wiring up like our mailer is we call

00:25:10,340 --> 00:25:14,720
them services unfortunately service is a

00:25:12,440 --> 00:25:16,850
horribly overloaded words and software

00:25:14,720 --> 00:25:18,049
engineering so in this case when we talk

00:25:16,850 --> 00:25:20,360
about services what we're talking about

00:25:18,049 --> 00:25:22,309
is those sort of objects we've seen pre

00:25:20,360 --> 00:25:24,769
wired up that we can just make yourself

00:25:22,309 --> 00:25:26,419
and of course your containers also quite

00:25:24,769 --> 00:25:28,580
an overloaded word now particularly with

00:25:26,419 --> 00:25:31,279
sort of docker being all the rage so

00:25:28,580 --> 00:25:33,909
this different use container to that so

00:25:31,279 --> 00:25:36,980
am yes slightly unfortunate naming and

00:25:33,909 --> 00:25:38,150
you may also see elsewhere like people

00:25:36,980 --> 00:25:40,220
talk my IOC can

00:25:38,150 --> 00:25:43,040
containers which essentially is just the

00:25:40,220 --> 00:25:45,230
same thing and so I OC here stands for

00:25:43,040 --> 00:25:50,570
inversion of control and dependence

00:25:45,230 --> 00:25:53,110
injections like a specific way of

00:25:50,570 --> 00:25:55,250
achieving a bigger bigger concept of ioc

00:25:53,110 --> 00:25:57,740
iocs the inversion of controllers that

00:25:55,250 --> 00:26:00,680
were taking away the control of deciding

00:25:57,740 --> 00:26:03,170
what to do from how to do it and pushing

00:26:00,680 --> 00:26:04,340
it outside and dependency injection is

00:26:03,170 --> 00:26:13,100
good way of doing that if you're doing

00:26:04,340 --> 00:26:14,660
object-oriented programming so and in a

00:26:13,100 --> 00:26:16,940
small application if you're writing just

00:26:14,660 --> 00:26:18,290
maybe like is a little command-line tool

00:26:16,940 --> 00:26:19,940
or something like that and you started

00:26:18,290 --> 00:26:22,280
like pulling your code apart in that

00:26:19,940 --> 00:26:24,590
kind of way it may not you may best be

00:26:22,280 --> 00:26:26,450
able to have got bootstrap file at the

00:26:24,590 --> 00:26:28,160
top you don't mind writing a few like

00:26:26,450 --> 00:26:30,740
the stitching together a few new things

00:26:28,160 --> 00:26:33,410
as I grows and it becomes unmanageable

00:26:30,740 --> 00:26:35,450
and it might be useful to introduce one

00:26:33,410 --> 00:26:39,410
of these containers so 14 sort of

00:26:35,450 --> 00:26:47,780
smaller and medium-sized applications we

00:26:39,410 --> 00:26:49,250
can use is pimple em so with pimple when

00:26:47,780 --> 00:26:50,360
we use it looks something like this so

00:26:49,250 --> 00:26:53,270
this would be an hour like kiss or

00:26:50,360 --> 00:26:56,420
bootstrap file to say onto new container

00:26:53,270 --> 00:26:58,640
so it's a new pimple and then i'm going

00:26:56,420 --> 00:27:02,720
to set myself services on that so it has

00:26:58,640 --> 00:27:06,680
like a ray access style access so we can

00:27:02,720 --> 00:27:08,840
say container stock levels is and then

00:27:06,680 --> 00:27:10,850
tell it how to create stock levels

00:27:08,840 --> 00:27:13,370
object so we're kind of assigning like

00:27:10,850 --> 00:27:16,820
key style things to services we can

00:27:13,370 --> 00:27:18,560
refer to them elsewhere and then we're

00:27:16,820 --> 00:27:21,950
actually kind of do what a cute does is

00:27:18,560 --> 00:27:24,440
uses a an anonymous function here to say

00:27:21,950 --> 00:27:25,970
when i asked for this actually then run

00:27:24,440 --> 00:27:27,350
this code so we're going to still do the

00:27:25,970 --> 00:27:29,420
same sort of thing and say new stock

00:27:27,350 --> 00:27:32,990
levels thing and ask the container to

00:27:29,420 --> 00:27:35,870
give us the stock and notify email

00:27:32,990 --> 00:27:39,050
service and inject and create it with

00:27:35,870 --> 00:27:40,550
that so the reason for using anonymous

00:27:39,050 --> 00:27:42,260
functions for this sort of thing is that

00:27:40,550 --> 00:27:44,630
your application grows you may not want

00:27:42,260 --> 00:27:47,210
to UM instantiate every single object in

00:27:44,630 --> 00:27:49,490
it for every request or everything that

00:27:47,210 --> 00:27:51,290
use it so by wrapping it in anonymous

00:27:49,490 --> 00:27:52,700
functions and this way we can just say

00:27:51,290 --> 00:27:54,170
only if I ask about particular set of

00:27:52,700 --> 00:27:57,440
objects should you call that function

00:27:54,170 --> 00:27:58,940
and give them to me so particularly if

00:27:57,440 --> 00:28:02,900
you've got any objects we've had their

00:27:58,940 --> 00:28:04,130
heavy to construct it can be useful so

00:28:02,900 --> 00:28:06,200
we'd have to create something similar

00:28:04,130 --> 00:28:11,180
for the next level down so stop notify

00:28:06,200 --> 00:28:12,950
remailer email is itself an anonymous

00:28:11,180 --> 00:28:16,700
function that asks for its dependencies

00:28:12,950 --> 00:28:17,930
from the container and then we can kind

00:28:16,700 --> 00:28:19,790
of write that code for creating the

00:28:17,930 --> 00:28:21,410
Swift mail stuff in there so it gives us

00:28:19,790 --> 00:28:24,290
a way of organizing it and it also

00:28:21,410 --> 00:28:27,640
defers in the actual time of which you

00:28:24,290 --> 00:28:30,080
call new to all of you and do that and

00:28:27,640 --> 00:28:32,600
it also means that the container can

00:28:30,080 --> 00:28:34,100
keep track of all these things by config

00:28:32,600 --> 00:28:35,990
key rather than you creating kind of

00:28:34,100 --> 00:28:37,700
variables and having to refer back to

00:28:35,990 --> 00:28:39,230
that particular variable so you can

00:28:37,700 --> 00:28:41,390
maybe then start split this up across

00:28:39,230 --> 00:28:43,490
more than one file so you don't have to

00:28:41,390 --> 00:28:47,450
keep it all locally in local scope you

00:28:43,490 --> 00:28:49,040
can kind of set up some of container in

00:28:47,450 --> 00:28:53,750
one place some of it in another place

00:28:49,040 --> 00:29:04,310
and and not end up with with one huge

00:28:53,750 --> 00:29:05,480
config file okay so at some point we

00:29:04,310 --> 00:29:07,100
actually need to get something out of it

00:29:05,480 --> 00:29:08,630
and make use of it so we might get a

00:29:07,100 --> 00:29:11,120
whole application or maybe a slightly

00:29:08,630 --> 00:29:12,650
lower level once you decided like which

00:29:11,120 --> 00:29:14,960
controller actions being run or which

00:29:12,650 --> 00:29:16,280
console command you using and we're

00:29:14,960 --> 00:29:19,520
going to say give me the whole of that

00:29:16,280 --> 00:29:21,790
code for that this particular key and

00:29:19,520 --> 00:29:24,080
then I'm going to do something with it

00:29:21,790 --> 00:29:26,090
so that way and everything's all set up

00:29:24,080 --> 00:29:27,890
for us and then we actually start doing

00:29:26,090 --> 00:29:30,260
something and sending kind of power

00:29:27,890 --> 00:29:36,710
maybe console arguments or a HTTP

00:29:30,260 --> 00:29:38,060
request through the object graph so the

00:29:36,710 --> 00:29:40,100
pimples quite simple and easy to

00:29:38,060 --> 00:29:43,610
understand and if you ignored a little

00:29:40,100 --> 00:29:44,900
bit of noise of the anonymous functions

00:29:43,610 --> 00:29:46,460
in there then it's actually pretty

00:29:44,900 --> 00:29:50,540
similar to what we'd have written if we

00:29:46,460 --> 00:29:52,340
weren't using the container if we do

00:29:50,540 --> 00:29:56,180
have lots and lots of convicts and a

00:29:52,340 --> 00:29:57,320
larger application and we probably don't

00:29:56,180 --> 00:29:59,000
want to write all of those sort of

00:29:57,320 --> 00:30:01,580
functions out so

00:29:59,000 --> 00:30:03,800
and so in a large application can make

00:30:01,580 --> 00:30:05,150
use of symphony service contain there or

00:30:03,800 --> 00:30:06,980
if you're using a symphony full stop

00:30:05,150 --> 00:30:08,030
framework and this is already bad it's

00:30:06,980 --> 00:30:10,970
going to come with some of its own

00:30:08,030 --> 00:30:14,120
service to set up and and then similar I

00:30:10,970 --> 00:30:17,180
believe in Drupal 8 so here we can use

00:30:14,120 --> 00:30:18,950
config files rather than writing code in

00:30:17,180 --> 00:30:21,380
order to actually configure the

00:30:18,950 --> 00:30:23,570
different services and there's a couple

00:30:21,380 --> 00:30:27,500
of ways different things available to

00:30:23,570 --> 00:30:29,510
you so you've got xml or yamel I needs

00:30:27,500 --> 00:30:31,430
XML for the examples mainly because it

00:30:29,510 --> 00:30:33,590
is more verbose it's not explicit you

00:30:31,430 --> 00:30:35,630
can see what's happening with yamel if

00:30:33,590 --> 00:30:38,810
once you understand this great it cuts

00:30:35,630 --> 00:30:40,790
it all down you do kind of and it loses

00:30:38,810 --> 00:30:42,230
that explicitness you need to know that

00:30:40,790 --> 00:30:43,610
when you put certain things in the ray

00:30:42,230 --> 00:30:50,300
with a certain symbol in front of it

00:30:43,610 --> 00:30:52,550
means this so so in our xml file

00:30:50,300 --> 00:30:55,450
services we probably at the simplest

00:30:52,550 --> 00:30:57,920
thing we can do is just define like a

00:30:55,450 --> 00:31:00,080
service like this so we again we give it

00:30:57,920 --> 00:31:02,600
an ID so this is similar to the pimples

00:31:00,080 --> 00:31:04,100
kind of array access keys so we're

00:31:02,600 --> 00:31:07,280
saying we've got stock level service

00:31:04,100 --> 00:31:09,310
with that ID and then the class is the

00:31:07,280 --> 00:31:11,900
actual PHP class its stock levels and

00:31:09,310 --> 00:31:13,610
you could use namespace classes in here

00:31:11,900 --> 00:31:17,600
and put out the right out the full name

00:31:13,610 --> 00:31:20,030
space so we're saying to the container

00:31:17,600 --> 00:31:21,620
when I asked for one of those use new on

00:31:20,030 --> 00:31:23,270
that stock levels klassen and give that

00:31:21,620 --> 00:31:25,760
back to me of course we needed to have

00:31:23,270 --> 00:31:28,250
some arguments passed into that and to

00:31:25,760 --> 00:31:31,790
our notify our email so we can use the

00:31:28,250 --> 00:31:34,400
argument element to say it's an argument

00:31:31,790 --> 00:31:35,840
for you such service and here's the ID

00:31:34,400 --> 00:31:37,580
so this is another service and when you

00:31:35,840 --> 00:31:40,040
find somewhere else when you create a

00:31:37,580 --> 00:31:41,570
stock levels thing go and find that

00:31:40,040 --> 00:31:43,610
service create that and injects it into

00:31:41,570 --> 00:31:45,920
me so it will kind of recurs for all of

00:31:43,610 --> 00:31:48,740
these definitions so our stock levels

00:31:45,920 --> 00:31:51,110
definition looks at them what we could

00:31:48,740 --> 00:31:53,210
swap it so so if that was very male if

00:31:51,110 --> 00:31:55,790
we wanted to use SMS we could just at

00:31:53,210 --> 00:31:57,530
this point and swap it for guess ms

00:31:55,790 --> 00:31:59,270
service instead so that was that kind

00:31:57,530 --> 00:32:01,460
instead of doing in the code we're just

00:31:59,270 --> 00:32:03,730
changing an xml file external to the

00:32:01,460 --> 00:32:03,730
code

00:32:05,570 --> 00:32:11,970
okay so and what we probably fine so

00:32:10,140 --> 00:32:13,500
then yeah we can create more services at

00:32:11,970 --> 00:32:16,020
this level so the stitching together we

00:32:13,500 --> 00:32:18,120
on our stock levels her email in stock

00:32:16,020 --> 00:32:20,280
notifier which takes the customer closet

00:32:18,120 --> 00:32:23,130
you've got pin and then email Swift

00:32:20,280 --> 00:32:25,590
mailer that takes in its other service

00:32:23,130 --> 00:32:28,200
that's the email Swift mail so it's all

00:32:25,590 --> 00:32:31,320
pretty straightforward then we will find

00:32:28,200 --> 00:32:33,450
though if we remember the great Swift

00:32:31,320 --> 00:32:34,860
mailer instance so this wasn't the code

00:32:33,450 --> 00:32:38,370
where written written it's from the

00:32:34,860 --> 00:32:40,380
library that we did that through a

00:32:38,370 --> 00:32:42,870
static method we called new instance and

00:32:40,380 --> 00:32:45,420
positive of transport so we can still do

00:32:42,870 --> 00:32:46,980
this and with the service container so

00:32:45,420 --> 00:32:50,130
it gets slightly more complicated now we

00:32:46,980 --> 00:32:51,690
can have say as well as the class as a

00:32:50,130 --> 00:32:53,820
factory class of Swift may learn a

00:32:51,690 --> 00:32:56,070
factory method of new instance so now

00:32:53,820 --> 00:32:57,450
the container will know that instead of

00:32:56,070 --> 00:33:00,780
calling new to create one of these

00:32:57,450 --> 00:33:04,470
objects it will create will use Swift

00:33:00,780 --> 00:33:06,030
mailer new instance to create it and

00:33:04,470 --> 00:33:07,560
what the container will do is keep track

00:33:06,030 --> 00:33:09,030
of all these objects as well so it's not

00:33:07,560 --> 00:33:11,580
going to create a new one every time you

00:33:09,030 --> 00:33:13,200
ask this each time if it will say have

00:33:11,580 --> 00:33:15,660
already got one of these if it has have

00:33:13,200 --> 00:33:18,180
that back if not now i'll create it and

00:33:15,660 --> 00:33:19,830
keep track of it so you effectively only

00:33:18,180 --> 00:33:23,240
ever get one instance of these each

00:33:19,830 --> 00:33:23,240
instance of these services

00:33:26,340 --> 00:33:33,270
so setting up the Swift mela transport

00:33:31,919 --> 00:33:37,320
thing itself is a bit more complicated

00:33:33,270 --> 00:33:39,659
than that so here we had various config

00:33:37,320 --> 00:33:43,919
values and I code the mail server

00:33:39,659 --> 00:33:45,990
address or number the username and the

00:33:43,919 --> 00:33:47,669
password and then we again use the

00:33:45,990 --> 00:33:50,010
static method and we also called some

00:33:47,669 --> 00:33:51,900
methods on it so we haven't got hold of

00:33:50,010 --> 00:33:54,179
the transport object we call set user

00:33:51,900 --> 00:33:58,169
name we also called set passwords set

00:33:54,179 --> 00:34:02,220
that up so we can deal with the

00:33:58,169 --> 00:34:03,980
parameters by having a parameter section

00:34:02,220 --> 00:34:07,849
that's also supported in our config file

00:34:03,980 --> 00:34:10,200
so the parameters so we've got key to

00:34:07,849 --> 00:34:12,720
give it a name that we can refer to and

00:34:10,200 --> 00:34:15,750
we set the value in there and so

00:34:12,720 --> 00:34:17,609
statically and we can refer back to that

00:34:15,750 --> 00:34:20,730
in our service definitions so instead of

00:34:17,609 --> 00:34:23,730
saying our arguments are now another

00:34:20,730 --> 00:34:26,000
service we're saying it's using these

00:34:23,730 --> 00:34:28,530
percent signs it's the mail server

00:34:26,000 --> 00:34:30,149
variable so all the service container

00:34:28,530 --> 00:34:32,070
refer back to that parameter and put it

00:34:30,149 --> 00:34:34,139
in for us we could also just pass in

00:34:32,070 --> 00:34:38,490
static scalar values at this point and

00:34:34,139 --> 00:34:43,230
you can also set PHP calm like constants

00:34:38,490 --> 00:34:44,849
out of PHP classes as well we also

00:34:43,230 --> 00:34:47,970
needed to call a set user name and

00:34:44,849 --> 00:34:49,820
password methods on there so an hour the

00:34:47,970 --> 00:34:51,720
service container can do this for us so

00:34:49,820 --> 00:34:53,280
after we've caught then said the

00:34:51,720 --> 00:34:56,159
constructor arguments we want to pass to

00:34:53,280 --> 00:34:58,800
it we can also say and here's some

00:34:56,159 --> 00:35:01,050
methods we want to call so his first

00:34:58,800 --> 00:35:03,000
method is that username and here's the

00:35:01,050 --> 00:35:07,140
parameter if I want to pass to it than

00:35:03,000 --> 00:35:10,349
they all user name parameter and then we

00:35:07,140 --> 00:35:11,700
can do the same percent password and in

00:35:10,349 --> 00:35:13,440
this case the parameters you could just

00:35:11,700 --> 00:35:14,940
pass yet more servicing as if you did

00:35:13,440 --> 00:35:16,440
want to use like set of injection you

00:35:14,940 --> 00:35:21,119
can use this as a way of passing

00:35:16,440 --> 00:35:24,260
services into all the services through a

00:35:21,119 --> 00:35:24,260
free set of methods

00:35:29,650 --> 00:35:33,400
so we're Vantage using like the symphony

00:35:31,810 --> 00:35:36,340
service containers that were assembling

00:35:33,400 --> 00:35:38,620
files from various places so you can

00:35:36,340 --> 00:35:40,240
assemble your own files the framework

00:35:38,620 --> 00:35:41,680
itself will provide them so in fact if

00:35:40,240 --> 00:35:42,850
you're using a symphony framework you

00:35:41,680 --> 00:35:44,350
wouldn't need to do all this stuff with

00:35:42,850 --> 00:35:46,210
so if male it's kind of taken care of

00:35:44,350 --> 00:35:49,660
for you and just opened up as a mailer

00:35:46,210 --> 00:35:52,330
service so it reason parameter your

00:35:49,660 --> 00:35:54,220
parameter files uses those to create

00:35:52,330 --> 00:35:58,390
those services and it's all it's there

00:35:54,220 --> 00:36:00,460
for you and the various or third-party

00:35:58,390 --> 00:36:02,020
bundles and things that you can add also

00:36:00,460 --> 00:36:03,730
provide yet more services into the

00:36:02,020 --> 00:36:05,770
container so you can keep sort of

00:36:03,730 --> 00:36:07,990
finding pre set up things and all that

00:36:05,770 --> 00:36:09,850
expose ways of configuring and passing

00:36:07,990 --> 00:36:12,010
different parameters or you can override

00:36:09,850 --> 00:36:13,810
weights done to stitch it up slightly

00:36:12,010 --> 00:36:16,450
differently so you don't have to write

00:36:13,810 --> 00:36:20,530
all of this config just the part safer's

00:36:16,450 --> 00:36:21,580
your services and what it does mean an

00:36:20,530 --> 00:36:23,560
is that we're kind of like assembling

00:36:21,580 --> 00:36:27,450
stuff from various parameter files there

00:36:23,560 --> 00:36:29,860
are two bundles the framework itself and

00:36:27,450 --> 00:36:31,330
taking all those XML files and stitching

00:36:29,860 --> 00:36:33,520
it all together it's able to contain a

00:36:31,330 --> 00:36:37,830
knows about all sorts of services so one

00:36:33,520 --> 00:36:45,640
of the things it does do then it's

00:36:37,830 --> 00:36:47,500
providers with caching and so the

00:36:45,640 --> 00:36:49,060
caching work and essentially all that

00:36:47,500 --> 00:36:51,340
gets turned into PHP code and all gets

00:36:49,060 --> 00:36:55,150
dumped into one file so that every time

00:36:51,340 --> 00:36:56,560
you kind of using the container firing

00:36:55,150 --> 00:36:59,560
of your application it just reads in

00:36:56,560 --> 00:37:01,900
that cached file and not all those XML

00:36:59,560 --> 00:37:02,980
files and yammer files and any files and

00:37:01,900 --> 00:37:04,690
things that are scattered around the

00:37:02,980 --> 00:37:06,490
sort of file system because that would

00:37:04,690 --> 00:37:08,350
be quite a big performance hit there so

00:37:06,490 --> 00:37:10,890
it turns it all into one big PHP file

00:37:08,350 --> 00:37:13,120
which loads pretty quickly and and

00:37:10,890 --> 00:37:14,680
essentially just contains PHP that look

00:37:13,120 --> 00:37:16,390
quite like stuff we saw it start would

00:37:14,680 --> 00:37:18,780
just saying you this new that all the

00:37:16,390 --> 00:37:18,780
way through

00:37:23,680 --> 00:37:30,920
okay so how do we actually access

00:37:27,140 --> 00:37:32,750
services out of that and we can call

00:37:30,920 --> 00:37:34,880
just the container has a getter method

00:37:32,750 --> 00:37:38,210
top they contain a gets and give me a

00:37:34,880 --> 00:37:39,650
service by that service ID so we want to

00:37:38,210 --> 00:37:42,110
get a whole application out there or

00:37:39,650 --> 00:37:44,240
individual controllers or in a

00:37:42,110 --> 00:37:45,620
controller get individual services we

00:37:44,240 --> 00:37:48,980
should try and avoid as we get further

00:37:45,620 --> 00:37:52,060
down like avoid doing that apart from

00:37:48,980 --> 00:37:55,610
when you have to write up at the top so

00:37:52,060 --> 00:37:57,110
and why mean by this is instead of we

00:37:55,610 --> 00:37:58,820
might end up and be tempted so instead

00:37:57,110 --> 00:38:01,700
of writing code like this where we've

00:37:58,820 --> 00:38:03,320
got the constructor pasta and it's like

00:38:01,700 --> 00:38:04,940
the notify customers constructor is to

00:38:03,320 --> 00:38:08,030
do something like this and say I can

00:38:04,940 --> 00:38:09,230
actually pass the container in and then

00:38:08,030 --> 00:38:13,460
I'm going to get the service out of

00:38:09,230 --> 00:38:17,560
there and it's tempting to sort of do

00:38:13,460 --> 00:38:20,270
this but what happens then is that

00:38:17,560 --> 00:38:21,680
you're creating a dependency not on a

00:38:20,270 --> 00:38:23,930
notifier anymore but on a particular

00:38:21,680 --> 00:38:25,460
service container so you can't use this

00:38:23,930 --> 00:38:27,380
code with a different service container

00:38:25,460 --> 00:38:29,690
we actually lose some of that kind of

00:38:27,380 --> 00:38:31,220
safety again because we're back to

00:38:29,690 --> 00:38:33,500
relying on the fact that the container

00:38:31,220 --> 00:38:35,860
was configured with and something that

00:38:33,500 --> 00:38:38,420
implemented our in-stock notifier

00:38:35,860 --> 00:38:40,220
interface and there's nothing inside

00:38:38,420 --> 00:38:43,250
this class any load and it guarantees

00:38:40,220 --> 00:38:44,840
that any more like anyone it's someone

00:38:43,250 --> 00:38:51,040
we configured to contain that we could

00:38:44,840 --> 00:38:54,200
get anything out of there so I think

00:38:51,040 --> 00:38:56,090
it's just finest yeah it's really

00:38:54,200 --> 00:38:57,950
helpful to a try and remember for what

00:38:56,090 --> 00:38:59,720
you're doing is assembling these classes

00:38:57,950 --> 00:39:01,970
and simple wave containers that to help

00:38:59,720 --> 00:39:03,200
you put it all back together it's not

00:39:01,970 --> 00:39:06,580
rather than something you should

00:39:03,200 --> 00:39:06,580
actually rely on in the code itself

00:39:11,760 --> 00:39:18,420
okay so when so when do we actually use

00:39:14,830 --> 00:39:20,470
dependency injection this sort of way um

00:39:18,420 --> 00:39:22,390
should we use it for everything and

00:39:20,470 --> 00:39:26,470
avoid constructing anything directly

00:39:22,390 --> 00:39:28,540
ever seeing the new keyword and just do

00:39:26,470 --> 00:39:30,970
it putting everything together in this

00:39:28,540 --> 00:39:32,770
sort of way well it's good for these

00:39:30,970 --> 00:39:35,920
sort of reusable stateless sort of

00:39:32,770 --> 00:39:37,240
services so free so I'm email oh it

00:39:35,920 --> 00:39:38,740
makes sense to pass them because we can

00:39:37,240 --> 00:39:41,860
use that over and over again once it's

00:39:38,740 --> 00:39:42,940
set up we can send as many emails as we

00:39:41,860 --> 00:39:44,950
want for and it's not going to make any

00:39:42,940 --> 00:39:46,660
difference each time it will behave the

00:39:44,950 --> 00:39:48,520
same as no side effects of using it

00:39:46,660 --> 00:39:50,740
likewise if it was something like a

00:39:48,520 --> 00:39:52,750
templating engine so if we're using twig

00:39:50,740 --> 00:39:54,580
the templating once it's set up we can

00:39:52,750 --> 00:39:56,650
render lots of templates with twig and

00:39:54,580 --> 00:39:58,000
we're not going to find that there's any

00:39:56,650 --> 00:40:01,240
problems doing now it should be the same

00:39:58,000 --> 00:40:05,160
every time or a rooter service it

00:40:01,240 --> 00:40:05,160
generates URLs for us for instance

00:40:10,700 --> 00:40:15,890
so but we do have other things like this

00:40:14,420 --> 00:40:18,500
and our sort of project in our

00:40:15,890 --> 00:40:21,650
application so if you've got values the

00:40:18,500 --> 00:40:23,240
represent things or entities then each

00:40:21,650 --> 00:40:25,520
one of those is different we don't want

00:40:23,240 --> 00:40:26,810
one whole application we don't have one

00:40:25,520 --> 00:40:30,109
customer we have lots of customers

00:40:26,810 --> 00:40:31,810
hopefully and so these are the sort of

00:40:30,109 --> 00:40:35,000
things we should create directly so

00:40:31,810 --> 00:40:36,589
should create an email message directly

00:40:35,000 --> 00:40:38,150
with each email message is different to

00:40:36,589 --> 00:40:40,550
the previous ones and we'll still see

00:40:38,150 --> 00:40:42,410
new keywords perhaps for those there's a

00:40:40,550 --> 00:40:45,650
product when we're creating it project

00:40:42,410 --> 00:40:48,380
has identity based on it on its skoo

00:40:45,650 --> 00:40:50,599
it's not the same as you know we can't

00:40:48,380 --> 00:40:53,329
use one we have one reusable product

00:40:50,599 --> 00:40:55,160
object customers same sort of thing that

00:40:53,329 --> 00:40:57,470
we may not use new maybe we've got like

00:40:55,160 --> 00:40:59,089
a sort of name constructor but people

00:40:57,470 --> 00:41:00,800
look quite like using nowadays we're

00:40:59,089 --> 00:41:02,780
using a sort of static method to do that

00:41:00,800 --> 00:41:04,400
so the same customer registered this

00:41:02,780 --> 00:41:09,260
it's still creating a new instance each

00:41:04,400 --> 00:41:12,349
time so we're not going to use the I for

00:41:09,260 --> 00:41:14,030
everything but I lied for anything where

00:41:12,349 --> 00:41:15,650
it does make sense that is that kind of

00:41:14,030 --> 00:41:17,720
configurable service that we're going to

00:41:15,650 --> 00:41:18,829
make use of then I like to try make sure

00:41:17,720 --> 00:41:20,720
it's used for everything and push

00:41:18,829 --> 00:41:22,369
everything right up right out for

00:41:20,720 --> 00:41:23,960
application and configure it somewhere

00:41:22,369 --> 00:41:25,400
else because it seems we're not doing

00:41:23,960 --> 00:41:32,660
that we're kind of tying ourselves into

00:41:25,400 --> 00:41:36,950
specific implementations okay and when

00:41:32,660 --> 00:41:39,230
should we use a container so if you're

00:41:36,950 --> 00:41:40,790
writing a small app that's growing when

00:41:39,230 --> 00:41:43,220
it becomes too difficult to manage those

00:41:40,790 --> 00:41:44,930
dependencies directly so is it see

00:41:43,220 --> 00:41:46,369
whilst you still only got like a small

00:41:44,930 --> 00:41:48,140
amount you can kind of keep on screen

00:41:46,369 --> 00:41:51,579
and keep track of there's no need to

00:41:48,140 --> 00:41:54,829
introduce the complexity of and using a

00:41:51,579 --> 00:41:56,630
dependency injection container once it

00:41:54,829 --> 00:41:57,829
starts to grow and become unwieldy and

00:41:56,630 --> 00:41:59,420
you don't want to create everything

00:41:57,829 --> 00:42:01,960
every time you want to be able to split

00:41:59,420 --> 00:42:04,310
up into lots of different files and

00:42:01,960 --> 00:42:07,550
configure them separately then it makes

00:42:04,310 --> 00:42:09,410
sense to start using a container and the

00:42:07,550 --> 00:42:11,210
other thing time of course is if you're

00:42:09,410 --> 00:42:12,980
using a frame if you're using a full

00:42:11,210 --> 00:42:15,230
stack frame rate like symphony or using

00:42:12,980 --> 00:42:17,859
something like a tuple eight which will

00:42:15,230 --> 00:42:20,030
use the symphony service container then

00:42:17,859 --> 00:42:21,920
the container is already going to be

00:42:20,030 --> 00:42:23,970
that it's already providing services

00:42:21,920 --> 00:42:26,099
front for you so you

00:42:23,970 --> 00:42:27,660
use it in the way but we're saying she

00:42:26,099 --> 00:42:29,490
try and avoid and say okay I'll give me

00:42:27,660 --> 00:42:30,810
the container give me a service or you

00:42:29,490 --> 00:42:32,369
can create your own classes that make

00:42:30,810 --> 00:42:34,650
use of those services and tell the

00:42:32,369 --> 00:42:36,960
service container how to create them

00:42:34,650 --> 00:42:38,490
using those services are already there

00:42:36,960 --> 00:42:41,250
for you so you tell Italy you want to

00:42:38,490 --> 00:42:43,140
use a mail server mail service rather

00:42:41,250 --> 00:42:52,710
than saying hey give me the mail the

00:42:43,140 --> 00:42:55,740
service out of the container so in the

00:42:52,710 --> 00:42:57,570
main things for me as we kind of very

00:42:55,740 --> 00:43:00,450
important about dependency injection but

00:42:57,570 --> 00:43:02,760
it is very simple really as a pattern

00:43:00,450 --> 00:43:05,880
for creating objects there's not very

00:43:02,760 --> 00:43:07,890
much do it really the you should use

00:43:05,880 --> 00:43:09,720
constructor injection way possible is

00:43:07,890 --> 00:43:11,430
you can use that injection property

00:43:09,720 --> 00:43:13,950
injection things like this but you lose

00:43:11,430 --> 00:43:15,750
some of the type safety documented

00:43:13,950 --> 00:43:18,890
documentation you get from using type

00:43:15,750 --> 00:43:21,180
fence and you also and get this

00:43:18,890 --> 00:43:23,609
potential for objects to end up an

00:43:21,180 --> 00:43:25,200
inconsistent space and it also means you

00:43:23,609 --> 00:43:26,640
know but once it's constructed it stays

00:43:25,200 --> 00:43:28,320
for Satan for using something like Sarah

00:43:26,640 --> 00:43:29,700
injection and some of the bit of code in

00:43:28,320 --> 00:43:31,560
your application can change those

00:43:29,700 --> 00:43:34,020
dependencies on do and you might call it

00:43:31,560 --> 00:43:35,310
at one point mint call it again and find

00:43:34,020 --> 00:43:37,770
out the behaviors changed in between

00:43:35,310 --> 00:43:39,540
constructor injection gives you like a

00:43:37,770 --> 00:43:40,920
form of immutability that means that

00:43:39,540 --> 00:43:42,810
once you've set your services up how you

00:43:40,920 --> 00:43:46,010
want them to be set up they'll stay set

00:43:42,810 --> 00:43:46,010
up that way for that request

00:43:51,200 --> 00:43:55,310
and the other thing is that contains

00:43:52,849 --> 00:43:57,680
yeah we're saying it was for assembling

00:43:55,310 --> 00:43:58,820
code only they're not there to be kind

00:43:57,680 --> 00:44:00,410
of used throughout the application

00:43:58,820 --> 00:44:02,240
they're there to help you with a

00:44:00,410 --> 00:44:11,240
specific problem of how you put all

00:44:02,240 --> 00:44:16,099
those object back together okay so

00:44:11,240 --> 00:44:19,070
that's what I've got to say today so

00:44:16,099 --> 00:44:20,450
thank you and type of questions in a

00:44:19,070 --> 00:44:22,670
minute I just need to as a couple of

00:44:20,450 --> 00:44:27,500
things which was to promote the Sprint's

00:44:22,670 --> 00:44:33,170
on Friday so and and I also need to say

00:44:27,500 --> 00:44:36,530
that so I'm I cos which is a sort of

00:44:33,170 --> 00:44:38,329
like a sister company of them senseo

00:44:36,530 --> 00:44:40,670
labs UK now both pop same group is

00:44:38,329 --> 00:44:42,349
running beers at the booth with lingotek

00:44:40,670 --> 00:44:44,810
along with lingotek at their booth

00:44:42,349 --> 00:44:47,150
tomorrow afternoon a half free throws a

00:44:44,810 --> 00:44:54,920
boo frio free where will be free drinks

00:44:47,150 --> 00:44:57,790
and snacks am ok and yeah you can you

00:44:54,920 --> 00:45:03,500
evaluate this session and this URL here

00:44:57,790 --> 00:45:08,920
ok cool so anyone have any questions at

00:45:03,500 --> 00:45:08,920
all yes

00:45:23,579 --> 00:45:29,829
yes so the question was can you use

00:45:27,549 --> 00:45:32,970
dependency injection it legacy

00:45:29,829 --> 00:45:35,290
applications and rap firm and nuts so

00:45:32,970 --> 00:45:37,480
yes you can certainly introduce it in a

00:45:35,290 --> 00:45:42,400
certain things you can do so because you

00:45:37,480 --> 00:45:44,349
can you can still create your instances

00:45:42,400 --> 00:45:46,450
of objects for the legacy code it might

00:45:44,349 --> 00:45:47,920
be that then underneath them they create

00:45:46,450 --> 00:45:49,390
their own but you can kind of you could

00:45:47,920 --> 00:45:54,220
create the higher-level objects in the

00:45:49,390 --> 00:45:55,960
container and start to work with it that

00:45:54,220 --> 00:45:58,210
way rather than you don't have to go

00:45:55,960 --> 00:46:00,849
falls you know whole scale get

00:45:58,210 --> 00:46:02,319
everything out and inject it back in and

00:46:00,849 --> 00:46:03,700
once but once you're getting the kind of

00:46:02,319 --> 00:46:06,130
higher level objects out of the

00:46:03,700 --> 00:46:07,660
container you can then start to refactor

00:46:06,130 --> 00:46:09,160
those in a way that the rest of the code

00:46:07,660 --> 00:46:11,950
doesn't say know about it just know as

00:46:09,160 --> 00:46:14,849
it gets one of those an instance of your

00:46:11,950 --> 00:46:17,140
legacy object and can start using it and

00:46:14,849 --> 00:46:20,829
so in your new code you could start

00:46:17,140 --> 00:46:23,740
using it there you could also can

00:46:20,829 --> 00:46:25,299
started I mean I wouldn't do it with new

00:46:23,740 --> 00:46:27,220
code but you could do things like rap

00:46:25,299 --> 00:46:29,020
kind of a way of having static access to

00:46:27,220 --> 00:46:31,059
contain their into your legacy codes you

00:46:29,020 --> 00:46:32,440
can sort of pull dependencies out of it

00:46:31,059 --> 00:46:33,880
at different points in that even though

00:46:32,440 --> 00:46:40,530
you haven't refactored the whole thing

00:46:33,880 --> 00:46:40,530
to use dependency injection so okay

00:46:40,829 --> 00:46:43,980
anyone else

00:46:45,330 --> 00:46:48,870

YouTube URL: https://www.youtube.com/watch?v=P7yez6hz-uo


