Title: DrupalCon Barcelona 2015: Drupal 8 Plugin Deep Dive
Publication date: 2015-09-22
Playlist: DrupalCon Barcelona - September 2015
Description: 
	Drupal 8 has introduced a number of new (to Drupalists) technologies, but embedded in this mix are a handful of Drupal-centric innovations. Amongst the first of these to be introduced to Drupal 8 was the Plugin system. The Plugin system is a far reaching PHP Component that has largely replaced the old hook_info/alter pattern within Drupal and can be used outside of Drupal as well.

The Drupal 8 plugin system provides a new API within Drupal for discovery, instantiation and invocation of classes beyond what traditional hooks have provided in past version of Drupal core. The plugin system provides the underlying structure to allow classes to sit in place of what has often been multiple disconnected hooks. Many subsystems in Drupal have been converted to plugins including blocks, conditions, field widgets and more. We'll discuss many of these at some level and build examples of what appropriate plugin system usage looks like, what tools already exist, how to leverage them, and where to get more information on building your own plugin types.

Usage and deconstruction of the new DefaultPluginManager class will be a big part of this talk as we dig into the facilities Drupal is provided out of the box, and begin to build our own example plugin type.
Captions: 
	00:03:36,700 --> 00:03:40,420
so you've got a number of people still

00:03:38,410 --> 00:03:41,950
streaming in here and I'm just gonna let

00:03:40,420 --> 00:03:45,120
the last few kind of stream in and then

00:03:41,950 --> 00:03:45,120
we'll start here in about two minutes

00:03:59,709 --> 00:04:03,370
well yeah

00:05:11,730 --> 00:05:16,910
there's some spots up here in the front

00:05:13,860 --> 00:05:16,910
like front mid

00:05:29,490 --> 00:05:32,970
so great we got a few still trickling in

00:05:31,770 --> 00:05:37,099
but I'm gonna go ahead and get started

00:05:32,970 --> 00:05:40,349
here I've got quite a few slides to hit

00:05:37,099 --> 00:05:42,660
just gonna start by pointing out a

00:05:40,349 --> 00:05:44,340
couple things topic is Drupal 8 plugins

00:05:42,660 --> 00:05:47,910
hopefully that's what we're all here for

00:05:44,340 --> 00:05:49,620
it's not please state if you would like

00:05:47,910 --> 00:05:51,960
to tweet anything about it I do always

00:05:49,620 --> 00:05:55,020
kind of have a session tag for this if

00:05:51,960 --> 00:05:56,550
not that's okay too if you're just so

00:05:55,020 --> 00:05:58,289
engaged that you can't type on your

00:05:56,550 --> 00:06:04,169
phone I will not be offended in the

00:05:58,289 --> 00:06:09,440
slightest a little bit about me I am

00:06:04,169 --> 00:06:12,660
Chris Vander water I'm Eclipse GC on

00:06:09,440 --> 00:06:14,220
Drupal actually used to be developer

00:06:12,660 --> 00:06:15,570
evangelist to dakahliya that is not my

00:06:14,220 --> 00:06:18,599
title there anymore I should updated

00:06:15,570 --> 00:06:20,370
this slide my apologies I am a technical

00:06:18,599 --> 00:06:22,349
specialist at aqueous specializing

00:06:20,370 --> 00:06:25,229
mostly in Drupal 8

00:06:22,349 --> 00:06:28,319
I was the scotch initiative owner for

00:06:25,229 --> 00:06:31,289
Drupal 8 so lots to do around plugins

00:06:28,319 --> 00:06:33,979
and I am one of the commentators of C

00:06:31,289 --> 00:06:37,620
tools and a number of other things

00:06:33,979 --> 00:06:40,310
before I get too far along here who and

00:06:37,620 --> 00:06:43,470
here's installed Drupal 8 at this point

00:06:40,310 --> 00:06:46,710
who in here has started writing a module

00:06:43,470 --> 00:06:48,120
for Drupal 8 at this point of those of

00:06:46,710 --> 00:06:50,389
you who are writing modules how many of

00:06:48,120 --> 00:06:53,280
you run into the plug-in system and

00:06:50,389 --> 00:06:58,409
that's why so many of you are in my room

00:06:53,280 --> 00:07:00,900
ok cool um so let's talk a little bit

00:06:58,409 --> 00:07:02,070
about plugins I'm kind of a tell you

00:07:00,900 --> 00:07:05,340
what I'm gonna tell you I tell you I

00:07:02,070 --> 00:07:06,659
tell you what I told you guys so we're

00:07:05,340 --> 00:07:09,419
gonna cover a number of different topics

00:07:06,659 --> 00:07:10,770
here first we'll start out with what is

00:07:09,419 --> 00:07:12,210
a plug-in because I feel like there are

00:07:10,770 --> 00:07:14,820
a lot of misconceptions just around the

00:07:12,210 --> 00:07:17,610
topic in general we'll talk about why it

00:07:14,820 --> 00:07:19,979
exists because I think that is worthy to

00:07:17,610 --> 00:07:21,270
know and then we'll get into some of the

00:07:19,979 --> 00:07:22,919
benefits some of the foundational

00:07:21,270 --> 00:07:24,509
concepts you're going to need to have to

00:07:22,919 --> 00:07:27,479
even really begin using and leveraging

00:07:24,509 --> 00:07:29,810
plugins and given enough time we'll look

00:07:27,479 --> 00:07:33,360
at some code and what it looks like to

00:07:29,810 --> 00:07:35,250
maybe create your own plugin or the

00:07:33,360 --> 00:07:38,639
basic structure of very simple plugins

00:07:35,250 --> 00:07:40,589
and plug-in types before I continue

00:07:38,639 --> 00:07:42,589
though I want to throw out a big thank

00:07:40,589 --> 00:07:44,029
you to hell your Colorado

00:07:42,589 --> 00:07:46,129
if you all don't know Hellyer he's a

00:07:44,029 --> 00:07:48,319
great member of our community he and I

00:07:46,129 --> 00:07:50,479
have kind of bounced this same sort of

00:07:48,319 --> 00:07:52,759
presentation back and forth a number of

00:07:50,479 --> 00:07:55,399
times independently and figured out we

00:07:52,759 --> 00:07:59,179
had largely the same presentation so

00:07:55,399 --> 00:08:01,129
just for his efforts here also educating

00:07:59,179 --> 00:08:03,319
around this and also Joe Schindler who I

00:08:01,129 --> 00:08:04,789
don't have in this these guys have done

00:08:03,319 --> 00:08:09,169
a really great job communicating about

00:08:04,789 --> 00:08:12,649
plugins as well so let's talk about what

00:08:09,169 --> 00:08:15,409
is a plug-in I'll start with Hellyer's

00:08:12,649 --> 00:08:17,209
definition so Hellyer says it's a

00:08:15,409 --> 00:08:20,599
discrete class that execute an operation

00:08:17,209 --> 00:08:22,899
within the context of a given scope as a

00:08:20,599 --> 00:08:25,699
means to extend Drupal's functionality

00:08:22,899 --> 00:08:29,599
that is absolutely accurate I think it's

00:08:25,699 --> 00:08:32,180
also kind of dense so I took a crack at

00:08:29,599 --> 00:08:33,740
it I think it's a discoverable class and

00:08:32,180 --> 00:08:36,169
we'll get into that topic here very

00:08:33,740 --> 00:08:37,939
shortly that implements a particular

00:08:36,169 --> 00:08:43,999
interface who in here knows what an

00:08:37,939 --> 00:08:46,160
interface is yeah which adds or extends

00:08:43,999 --> 00:08:48,050
functionality to a pluggable subsystem

00:08:46,160 --> 00:08:56,540
what is a pluggable subsystem anybody

00:08:48,050 --> 00:08:58,430
wanted a guess of one like Drupal 7 yeah

00:08:56,540 --> 00:09:00,199
any basically any info hook it's

00:08:58,430 --> 00:09:05,089
probably what we would think of as like

00:09:00,199 --> 00:09:06,829
a pluggable subsystem ok so going

00:09:05,089 --> 00:09:08,329
through my litany of things and just

00:09:06,829 --> 00:09:11,389
kind of breaking it down number one it's

00:09:08,329 --> 00:09:13,279
discoverable ok that means that we can

00:09:11,389 --> 00:09:14,899
find it somewhere what what is an info

00:09:13,279 --> 00:09:16,730
hook an info hook tells you that

00:09:14,899 --> 00:09:19,009
something exists right this is the

00:09:16,730 --> 00:09:21,139
notion of discoverability it's actually

00:09:19,009 --> 00:09:24,079
kind of unique to Drupal its

00:09:21,139 --> 00:09:25,490
object-oriented which it would have to

00:09:24,079 --> 00:09:30,160
be if it's going to implement an

00:09:25,490 --> 00:09:33,079
interface right and it's palpable

00:09:30,160 --> 00:09:35,179
most plugins if they implement an

00:09:33,079 --> 00:09:38,749
interface obviously you have a contract

00:09:35,179 --> 00:09:39,110
there they can be substituted one for

00:09:38,749 --> 00:09:42,499
the other

00:09:39,110 --> 00:09:46,459
right that's exactly what these classes

00:09:42,499 --> 00:09:49,480
are and I think very notably and very

00:09:46,459 --> 00:09:51,769
interestingly the plug-in system is

00:09:49,480 --> 00:09:54,319
while it's a requirement of Drupal

00:09:51,769 --> 00:09:56,390
Drupal is not a requirement of it so if

00:09:54,319 --> 00:09:59,360
you learn plugins and you really like in

00:09:56,390 --> 00:10:02,540
joy plugins it is my hope that shortly

00:09:59,360 --> 00:10:04,880
after we release Drupal that you'll see

00:10:02,540 --> 00:10:06,440
a subtree split of certain things that

00:10:04,880 --> 00:10:09,680
have been built during the Drupal's

00:10:06,440 --> 00:10:12,010
Drupal 8 cycle and you might be able to

00:10:09,680 --> 00:10:14,300
get plugins through a simple composer

00:10:12,010 --> 00:10:16,730
statement composer install Drupal

00:10:14,300 --> 00:10:25,400
plugins alright anybody playing with

00:10:16,730 --> 00:10:27,170
composer good good good good ok so why

00:10:25,400 --> 00:10:28,310
did we invent this so we've talked a

00:10:27,170 --> 00:10:31,160
little bit about some of the older

00:10:28,310 --> 00:10:34,220
structures and what this is replacing

00:10:31,160 --> 00:10:38,930
it's worth noting that we looked around

00:10:34,220 --> 00:10:41,660
at an awful lot of existing code outside

00:10:38,930 --> 00:10:43,880
of Drupal and increasingly what we found

00:10:41,660 --> 00:10:46,640
out is that Drupal sort of is a special

00:10:43,880 --> 00:10:49,460
snowflake which we all suspected but

00:10:46,640 --> 00:10:52,010
most systems really don't have the level

00:10:49,460 --> 00:10:53,570
of configurability that Drupal does like

00:10:52,010 --> 00:10:55,430
if you download WordPress yeah it's got

00:10:53,570 --> 00:10:57,620
some configurability to it but it's

00:10:55,430 --> 00:10:59,390
nowhere close to the same degree as what

00:10:57,620 --> 00:11:02,720
you're going to find in a Drupal install

00:10:59,390 --> 00:11:08,270
so there was a very large absence of any

00:11:02,720 --> 00:11:09,530
sort of similar code like this and I

00:11:08,270 --> 00:11:11,450
think it's worth talking about

00:11:09,530 --> 00:11:13,850
frameworks here because frameworks don't

00:11:11,450 --> 00:11:16,700
expect this at all if you were to

00:11:13,850 --> 00:11:19,760
download like symphony full stack yeah

00:11:16,700 --> 00:11:22,010
it has bundles which you can download

00:11:19,760 --> 00:11:25,310
and install kind of like our modules but

00:11:22,010 --> 00:11:27,740
these are hard-coded literally at the

00:11:25,310 --> 00:11:29,510
PHP layer you literally say I want to

00:11:27,740 --> 00:11:32,510
turn on this bundle and this bundle and

00:11:29,510 --> 00:11:35,270
this bundle like we would with with the

00:11:32,510 --> 00:11:36,590
extend page turning on modules but

00:11:35,270 --> 00:11:38,630
instead of it being configured and

00:11:36,590 --> 00:11:40,550
stored somewhere you literally write it

00:11:38,630 --> 00:11:41,960
into the PHP code you're specifying

00:11:40,550 --> 00:11:44,150
which bundles you're going to include

00:11:41,960 --> 00:11:45,560
and this is kind of stereotypical for a

00:11:44,150 --> 00:11:47,810
lot of frameworks they don't necessarily

00:11:45,560 --> 00:11:50,000
have any sort of user interface that

00:11:47,810 --> 00:11:52,160
turns things on or off or allows people

00:11:50,000 --> 00:11:57,410
to configure things for a number of

00:11:52,160 --> 00:12:00,230
different options so some of the

00:11:57,410 --> 00:12:04,490
benefits of plugins who in here has ever

00:12:00,230 --> 00:12:08,649
opened up a info hook and then needed to

00:12:04,490 --> 00:12:10,869
open up some other file or some other

00:12:08,649 --> 00:12:12,759
function that that info hook was

00:12:10,869 --> 00:12:14,170
referencing and he had to go back and

00:12:12,759 --> 00:12:16,930
forth or you had to turn your screen

00:12:14,170 --> 00:12:18,579
into split screen mode right this is

00:12:16,930 --> 00:12:21,249
probably pretty typical if you've done

00:12:18,579 --> 00:12:23,920
any sort of development in Drupal on

00:12:21,249 --> 00:12:25,929
something requiring info hooks or hook

00:12:23,920 --> 00:12:28,540
menu hook menus a great example where we

00:12:25,929 --> 00:12:30,040
say oh here's your page callback and now

00:12:28,540 --> 00:12:31,959
I have to look at my page callback and

00:12:30,040 --> 00:12:34,149
see what were my load arguments what

00:12:31,959 --> 00:12:38,790
parameters did those come from these

00:12:34,149 --> 00:12:43,899
sorts of things and so you know

00:12:38,790 --> 00:12:46,300
stereotypically the block info hook this

00:12:43,899 --> 00:12:48,119
is system block info I'll just point out

00:12:46,300 --> 00:12:51,149
a couple of quick things about this that

00:12:48,119 --> 00:12:54,699
right there is the powered by blocks

00:12:51,149 --> 00:12:55,059
info declaration right it says like Here

00:12:54,699 --> 00:13:01,439
I am

00:12:55,059 --> 00:13:04,480
Drupal you can place a block now and

00:13:01,439 --> 00:13:07,480
what's it do we we have like this other

00:13:04,480 --> 00:13:09,550
hook that we have to go implement which

00:13:07,480 --> 00:13:12,279
is hook block view and hook block view

00:13:09,550 --> 00:13:13,929
has this ginormous switch statement that

00:13:12,279 --> 00:13:17,410
says which block are we trying to render

00:13:13,929 --> 00:13:20,350
oh powered by you want this code right

00:13:17,410 --> 00:13:22,120
so every single block that system module

00:13:20,350 --> 00:13:25,649
cares about every block it could render

00:13:22,120 --> 00:13:30,100
is all in one function which is

00:13:25,649 --> 00:13:31,779
basically the worst thing ever so we

00:13:30,100 --> 00:13:33,819
don't we don't do that in Drupal 8

00:13:31,779 --> 00:13:36,579
triple eight looks something like this

00:13:33,819 --> 00:13:39,160
this is this the powered by block in

00:13:36,579 --> 00:13:40,990
Drupal 8 right I have one method it

00:13:39,160 --> 00:13:43,389
specifies what the render array is going

00:13:40,990 --> 00:13:45,009
to be and at the top of it all of that

00:13:43,389 --> 00:13:48,069
green text that you can't really read

00:13:45,009 --> 00:13:51,399
that's an annotation that literally is

00:13:48,069 --> 00:13:53,860
my info declaration so it all exists in

00:13:51,399 --> 00:13:55,899
one place altogether I can see

00:13:53,860 --> 00:13:58,209
everything from a metadata perspective

00:13:55,899 --> 00:14:01,029
about this plugin and I can see what

00:13:58,209 --> 00:14:01,990
it's going to execute no split screening

00:14:01,029 --> 00:14:04,480
no anything

00:14:01,990 --> 00:14:07,589
and generally pretty small files - we'll

00:14:04,480 --> 00:14:07,589
get to that here in a little bit

00:14:10,560 --> 00:14:17,819
so it's probably obvious from the last

00:14:13,389 --> 00:14:21,639
screen but plugins are object-oriented

00:14:17,819 --> 00:14:23,829
these are just a few of the block hooks

00:14:21,639 --> 00:14:27,009
that you have to implement in Drupal 7

00:14:23,829 --> 00:14:29,350
and earlier so if you want a block you

00:14:27,009 --> 00:14:31,930
have to implement the info hook but

00:14:29,350 --> 00:14:33,670
that's that's not a block it's not gonna

00:14:31,930 --> 00:14:35,110
render anything you can place it all day

00:14:33,670 --> 00:14:37,600
long but you're not gonna get any output

00:14:35,110 --> 00:14:40,149
because you have to know that you need

00:14:37,600 --> 00:14:41,889
to go and create hook block view if you

00:14:40,149 --> 00:14:43,689
don't know that you don't get any output

00:14:41,889 --> 00:14:46,089
period end of story

00:14:43,689 --> 00:14:47,920
if you need to configure this in any

00:14:46,089 --> 00:14:49,600
sort of way then you have to also have

00:14:47,920 --> 00:14:51,310
the hook block configure and hook block

00:14:49,600 --> 00:14:53,230
save if you don't have both of those

00:14:51,310 --> 00:14:57,040
then you don't have a configurable block

00:14:53,230 --> 00:14:58,870
it's not gonna save anything and you can

00:14:57,040 --> 00:14:59,680
only place one of them so you better get

00:14:58,870 --> 00:15:06,040
it right the first time

00:14:59,680 --> 00:15:08,819
right excuse me mmm Drupal 8 we're

00:15:06,040 --> 00:15:11,709
backed by a real legitimate interface so

00:15:08,819 --> 00:15:13,300
these are all the methods that exist on

00:15:11,709 --> 00:15:14,829
the block interface and I'm just gonna

00:15:13,300 --> 00:15:17,939
keep using box for the most part there

00:15:14,829 --> 00:15:21,279
are many many plugins within Drupal 8

00:15:17,939 --> 00:15:24,279
but every last one of these can actually

00:15:21,279 --> 00:15:26,709
be implemented by our base class so

00:15:24,279 --> 00:15:27,819
unless you need to override it the only

00:15:26,709 --> 00:15:31,600
thing you have to tell us is how you

00:15:27,819 --> 00:15:34,540
want to render right you write one

00:15:31,600 --> 00:15:36,790
method you write a little bit of code at

00:15:34,540 --> 00:15:41,050
the top of it a little bit of metadata

00:15:36,790 --> 00:15:47,589
at the top and that's a block any

00:15:41,050 --> 00:15:50,110
questions before I go on No okay so

00:15:47,589 --> 00:15:53,230
block the plugins are extensible you can

00:15:50,110 --> 00:15:57,029
actually in inherit from a base class or

00:15:53,230 --> 00:16:00,850
you can inherit from some other class so

00:15:57,029 --> 00:16:02,860
if you like the login block but you want

00:16:00,850 --> 00:16:04,990
to make a much better login block you

00:16:02,860 --> 00:16:06,519
can extend that class and have your own

00:16:04,990 --> 00:16:08,170
login block that does all the same

00:16:06,519 --> 00:16:12,910
things but is styled totally differently

00:16:08,170 --> 00:16:15,819
right no more need to copy someone

00:16:12,910 --> 00:16:18,160
else's hook and put it into your code

00:16:15,819 --> 00:16:21,339
and maintain it separately we get the

00:16:18,160 --> 00:16:23,550
the full benefits of oo as a language

00:16:21,339 --> 00:16:23,550
construct

00:16:25,790 --> 00:16:32,429
now I'll just point out that I've lied a

00:16:29,189 --> 00:16:35,489
little bit you know this is I said this

00:16:32,429 --> 00:16:37,019
was the powered by block and it is but

00:16:35,489 --> 00:16:40,889
we added a couple extra methods to it

00:16:37,019 --> 00:16:42,619
for caching later so when you open it

00:16:40,889 --> 00:16:44,699
and you see that it's not that small

00:16:42,619 --> 00:16:45,869
that's because we have to override a

00:16:44,699 --> 00:16:49,019
couple of things for the powered by

00:16:45,869 --> 00:16:51,439
block because it's always cached okay

00:16:49,019 --> 00:16:51,439
fine

00:16:53,249 --> 00:16:56,669
plugins are lazy loaded anybody know

00:16:55,169 --> 00:17:00,949
what that means like when I say that

00:16:56,669 --> 00:17:04,500
they're lazy loaded okay a few of you

00:17:00,949 --> 00:17:06,929
for those of you who don't know which is

00:17:04,500 --> 00:17:08,760
the vast majority of the room where do

00:17:06,929 --> 00:17:12,360
these exist if you have to implement

00:17:08,760 --> 00:17:13,679
these where do they exist your module

00:17:12,360 --> 00:17:15,569
file that's right

00:17:13,679 --> 00:17:18,329
is your module file always loaded if

00:17:15,569 --> 00:17:21,510
that modules running yeah it's always in

00:17:18,329 --> 00:17:25,500
the memory footprint okay so that that

00:17:21,510 --> 00:17:27,149
doesn't happen in Drupal 8 we'll talk

00:17:25,500 --> 00:17:30,510
about Auto loading here in a minute but

00:17:27,149 --> 00:17:32,549
in Drupal 8 we actually have individual

00:17:30,510 --> 00:17:35,070
classes for every single implementation

00:17:32,549 --> 00:17:38,490
and we only load those classes if we

00:17:35,070 --> 00:17:39,840
need the classes so if that block is

00:17:38,490 --> 00:17:41,340
going to be rendered on the page then we

00:17:39,840 --> 00:17:44,429
load it and if it's not it's completely

00:17:41,340 --> 00:17:50,519
outside of your current running memory

00:17:44,429 --> 00:17:56,549
footprint these are all the system

00:17:50,519 --> 00:17:58,380
blocks just as an example and this one's

00:17:56,549 --> 00:18:00,210
super important plugins are a common

00:17:58,380 --> 00:18:02,990
pattern they are learn once use

00:18:00,210 --> 00:18:06,029
everywhere case in point

00:18:02,990 --> 00:18:09,470
here are all of the plugin types that I

00:18:06,029 --> 00:18:13,049
could find in core a year and a half ago

00:18:09,470 --> 00:18:15,510
there are more now that's 37 I believe

00:18:13,049 --> 00:18:19,320
there are well over 40 at this point in

00:18:15,510 --> 00:18:20,970
core I will show you how to find those

00:18:19,320 --> 00:18:22,440
here in a few minutes because that has

00:18:20,970 --> 00:18:27,870
been a question in the past that is

00:18:22,440 --> 00:18:30,120
uneasy to answer so let's talk a little

00:18:27,870 --> 00:18:32,789
bit about some like foundational Drupal

00:18:30,120 --> 00:18:34,860
8 kind of concepts that you need to have

00:18:32,789 --> 00:18:36,710
a handle on or at least know exist

00:18:34,860 --> 00:18:39,620
before plugins are going to

00:18:36,710 --> 00:18:41,360
any sense really autoloading we talked

00:18:39,620 --> 00:18:43,309
about autoloading just a little bit

00:18:41,360 --> 00:18:46,390
before who in here is familiar with the

00:18:43,309 --> 00:18:48,049
specifics of it as far as Drupal 8 goes

00:18:46,390 --> 00:18:50,510
great

00:18:48,049 --> 00:18:52,580
if somebody says lazy loading to you

00:18:50,510 --> 00:18:53,960
they also kind of mean the same concept

00:18:52,580 --> 00:18:56,270
we aren't going to load it unless we

00:18:53,960 --> 00:19:00,500
need it thus it is auto load or lazy

00:18:56,270 --> 00:19:01,640
loaded right so for the rest of ups are

00:19:00,500 --> 00:19:06,169
zero and psr-4

00:19:01,640 --> 00:19:10,070
are super technical jargon for how we

00:19:06,169 --> 00:19:13,190
auto load things so PS are zero says

00:19:10,070 --> 00:19:15,380
something really simple it says your

00:19:13,190 --> 00:19:19,100
class has a namespace on it Drupal core

00:19:15,380 --> 00:19:22,190
maybe and that maps to a directory core

00:19:19,100 --> 00:19:24,860
Lib Drupal core so if I ever see a class

00:19:22,190 --> 00:19:26,750
whose namespace starts with Drupal core

00:19:24,860 --> 00:19:28,899
I know that it's got to be in this

00:19:26,750 --> 00:19:30,260
directory or some subdirectory thereof

00:19:28,899 --> 00:19:32,690
cool

00:19:30,260 --> 00:19:36,140
makes sense same thing with Drupal

00:19:32,690 --> 00:19:38,120
component and many of our third-party

00:19:36,140 --> 00:19:41,809
vendor files as well

00:19:38,120 --> 00:19:45,760
but that's kind of verbose like we know

00:19:41,809 --> 00:19:48,590
it's Drupal core why is Drupal core in

00:19:45,760 --> 00:19:51,529
the directory structure so there's also

00:19:48,590 --> 00:19:53,450
another one called psr-4 and PRS are for

00:19:51,529 --> 00:19:56,720
basically comes from this same notion

00:19:53,450 --> 00:19:59,870
and it says okay so you have this Drupal

00:19:56,720 --> 00:20:02,270
block namespace I don't need to have

00:19:59,870 --> 00:20:04,429
Drupal and block in there I just need to

00:20:02,270 --> 00:20:07,870
know what directory to look in so in

00:20:04,429 --> 00:20:10,190
those core modules block source and

00:20:07,870 --> 00:20:11,659
inside of that directory structure if it

00:20:10,190 --> 00:20:13,970
ever sees anything that starts with

00:20:11,659 --> 00:20:16,279
Drupal block it looks there and so if

00:20:13,970 --> 00:20:18,169
there's a plug-in in there or a manager

00:20:16,279 --> 00:20:20,899
of some sort or any interface that's

00:20:18,169 --> 00:20:23,120
where it's going to find it and so this

00:20:20,899 --> 00:20:24,559
reduces the number of directories we

00:20:23,120 --> 00:20:29,440
need in order to tell rupal about

00:20:24,559 --> 00:20:29,440
something by - which is really nice

00:20:29,950 --> 00:20:35,679
dependency injection who in here has

00:20:32,480 --> 00:20:41,590
ever dealt with dependency injection ah

00:20:35,679 --> 00:20:47,480
good good good good so this is like my

00:20:41,590 --> 00:20:49,650
good bad not great example so if you if

00:20:47,480 --> 00:20:51,750
you ever find yourself creating a new

00:20:49,650 --> 00:20:55,590
in a constructor chances are you're

00:20:51,750 --> 00:20:58,559
doing it wrong right you you actually

00:20:55,590 --> 00:21:00,000
have a dependency on that class for you

00:20:58,559 --> 00:21:03,600
to run if you're declaring it in your

00:21:00,000 --> 00:21:05,700
constructor right what's better is to

00:21:03,600 --> 00:21:07,290
pass it to your class and so this is

00:21:05,700 --> 00:21:10,740
this notion of dependency injection we

00:21:07,290 --> 00:21:13,200
use this all over court but this can be

00:21:10,740 --> 00:21:15,120
very difficult when you get multiple

00:21:13,200 --> 00:21:17,460
dependencies upon dependencies upon

00:21:15,120 --> 00:21:20,940
dependencies like if the bar class

00:21:17,460 --> 00:21:22,530
required a bass class and so on and so

00:21:20,940 --> 00:21:25,080
on that gets really difficult to

00:21:22,530 --> 00:21:27,420
instantiate so we have this whole other

00:21:25,080 --> 00:21:29,760
crazy thing called service containers

00:21:27,420 --> 00:21:34,080
anybody gotten to play with the service

00:21:29,760 --> 00:21:36,059
container layer yet okay um we adopted

00:21:34,080 --> 00:21:37,920
Symphony's service container for things

00:21:36,059 --> 00:21:40,980
and it's actually pretty elegant in the

00:21:37,920 --> 00:21:44,340
way that it does stuff it allows us to

00:21:40,980 --> 00:21:45,990
document that we have certain classes

00:21:44,340 --> 00:21:48,510
that are available to be used as

00:21:45,990 --> 00:21:50,940
dependencies and so any of those classes

00:21:48,510 --> 00:21:53,370
that also have dependencies on each

00:21:50,940 --> 00:21:55,500
other they can begin to document so this

00:21:53,370 --> 00:21:59,880
is my condition manager which is another

00:21:55,500 --> 00:22:01,980
plugin type and it's specifying that it

00:21:59,880 --> 00:22:03,960
has a a parent that it's just going to

00:22:01,980 --> 00:22:06,750
inherit from if we were to look at that

00:22:03,960 --> 00:22:08,970
you're gonna see that it specifies some

00:22:06,750 --> 00:22:10,890
arguments those arguments are all going

00:22:08,970 --> 00:22:13,230
to be other service definitions for the

00:22:10,890 --> 00:22:16,470
most part so if I look for container

00:22:13,230 --> 00:22:20,850
namespace boom there it is declared

00:22:16,470 --> 00:22:24,360
that's exactly what it is apparently I

00:22:20,850 --> 00:22:28,440
should have water mmm I'm sorry

00:22:24,360 --> 00:22:30,809
same thing with cash discovery you know

00:22:28,440 --> 00:22:32,940
each one of these declares the class

00:22:30,809 --> 00:22:34,890
that they are they declare any sort of

00:22:32,940 --> 00:22:37,440
arguments they take int or in order to

00:22:34,890 --> 00:22:39,929
instantiate and so on and so on

00:22:37,440 --> 00:22:42,630
here's the module handler and this is

00:22:39,929 --> 00:22:44,429
just like one small chain there are some

00:22:42,630 --> 00:22:47,070
that can be quite dense in terms of the

00:22:44,429 --> 00:22:48,870
chains that are there and how how many

00:22:47,070 --> 00:22:54,000
levels worth of autoloading you have to

00:22:48,870 --> 00:22:55,740
look at so this is how we declare all

00:22:54,000 --> 00:22:57,690
plugin managers though so that we can

00:22:55,740 --> 00:22:59,880
actually get things like the namespaces

00:22:57,690 --> 00:23:01,770
put in to us and we can get the plug-in

00:22:59,880 --> 00:23:02,669
manager so that we can do alter calls

00:23:01,770 --> 00:23:07,739
and

00:23:02,669 --> 00:23:10,230
sort of wonderful thing annotations so

00:23:07,739 --> 00:23:12,119
if you've made it this far into plugins

00:23:10,230 --> 00:23:15,269
then you've probably nearly got it

00:23:12,119 --> 00:23:18,269
working who's built a custom annotation

00:23:15,269 --> 00:23:21,989
at this point okay

00:23:18,269 --> 00:23:26,070
way less hands custom annotations are

00:23:21,989 --> 00:23:27,869
like your info hooks right so in a lot

00:23:26,070 --> 00:23:31,200
of ways they can just be kind of like an

00:23:27,869 --> 00:23:34,950
array that has various keys and value

00:23:31,200 --> 00:23:36,570
pairs what's really great about them

00:23:34,950 --> 00:23:39,149
though is that they are completely

00:23:36,570 --> 00:23:40,739
customizable to you the developer who

00:23:39,149 --> 00:23:41,639
might be creating a new plugin type

00:23:40,739 --> 00:23:44,129
right

00:23:41,639 --> 00:23:47,419
so while blocks want a fairly limited

00:23:44,129 --> 00:23:51,749
number of things in their annotation

00:23:47,419 --> 00:23:53,970
something like the content entities can

00:23:51,749 --> 00:23:56,970
be very dense in terms of what they take

00:23:53,970 --> 00:24:00,059
so you know the entities are specifying

00:23:56,970 --> 00:24:03,239
what sort of handlers they have for

00:24:00,059 --> 00:24:04,889
storage and access and view and all

00:24:03,239 --> 00:24:06,989
sorts of that sort of stuff they can

00:24:04,889 --> 00:24:09,799
specify what their base table is they

00:24:06,989 --> 00:24:12,749
can talk about their entity keys and

00:24:09,799 --> 00:24:14,369
depending upon your use case you are you

00:24:12,749 --> 00:24:16,739
probably just gonna get this back as

00:24:14,369 --> 00:24:19,139
like an array of data entities actually

00:24:16,739 --> 00:24:21,119
deal with this as an object but what's

00:24:19,139 --> 00:24:24,179
cool is that a full object does actually

00:24:21,119 --> 00:24:26,220
back you up on your annotation and so

00:24:24,179 --> 00:24:28,139
now you have a place to document all

00:24:26,220 --> 00:24:30,509
those keys that we couldn't really

00:24:28,139 --> 00:24:33,929
document inside of an info hook like

00:24:30,509 --> 00:24:35,730
page callback what does that mean how

00:24:33,929 --> 00:24:38,850
many of these are there where can I find

00:24:35,730 --> 00:24:41,460
a canonical list of every single key

00:24:38,850 --> 00:24:43,019
that could be in my info hook like

00:24:41,460 --> 00:24:45,659
that's actually really hard and we've

00:24:43,019 --> 00:24:48,570
worked really really hard on various

00:24:45,659 --> 00:24:50,429
Drupal sites in order on various

00:24:48,570 --> 00:24:53,600
drupal.org sites in order to document

00:24:50,429 --> 00:24:57,419
this for people so that they can see oh

00:24:53,600 --> 00:24:59,159
here are all the you know the form keys

00:24:57,419 --> 00:25:01,769
that I could use here all the menu keys

00:24:59,159 --> 00:25:03,720
I can use and so on and so forth but in

00:25:01,769 --> 00:25:05,850
Drupal 8 you're actually backed by an

00:25:03,720 --> 00:25:08,489
annotation class that tells you right up

00:25:05,850 --> 00:25:11,249
front here's every single key you can

00:25:08,489 --> 00:25:13,470
use and what it can be used for we can

00:25:11,249 --> 00:25:15,410
also set defaults in these so that you

00:25:13,470 --> 00:25:17,120
don't have to specify every

00:25:15,410 --> 00:25:18,650
single one of them all the time if

00:25:17,120 --> 00:25:22,130
there's a same default that you can

00:25:18,650 --> 00:25:25,150
apply for people using your plug-in type

00:25:22,130 --> 00:25:25,150
you can absolutely do that

00:25:35,140 --> 00:25:41,510
so before I hop into actually doing some

00:25:39,800 --> 00:25:46,070
code here I want to point out a couple

00:25:41,510 --> 00:25:49,400
of quick things one annotations are not

00:25:46,070 --> 00:25:52,310
code if anything they're actually much

00:25:49,400 --> 00:25:53,990
more akin to a serialization format and

00:25:52,310 --> 00:25:55,940
this is kind of reinforced by the fact

00:25:53,990 --> 00:25:57,620
that there are a couple of different

00:25:55,940 --> 00:26:01,460
situations in core where you'll actually

00:25:57,620 --> 00:26:03,710
find plug-in annotations defined in yamo

00:26:01,460 --> 00:26:06,980
instead of in the annotations of the

00:26:03,710 --> 00:26:08,870
class a couple of examples you may have

00:26:06,980 --> 00:26:11,990
already run into is anybody set up a

00:26:08,870 --> 00:26:14,870
menu item local tasks local action

00:26:11,990 --> 00:26:20,600
anything like that did you know you were

00:26:14,870 --> 00:26:23,150
creating new plugins no it's pretty well

00:26:20,600 --> 00:26:25,670
hidden but those are actually plugin

00:26:23,150 --> 00:26:29,000
definitions right so when you create

00:26:25,670 --> 00:26:30,350
those new llamó entries you're creating

00:26:29,000 --> 00:26:32,180
a new plug-in definition you can

00:26:30,350 --> 00:26:34,160
actually specify the class that that's

00:26:32,180 --> 00:26:37,250
going to run through and take complete

00:26:34,160 --> 00:26:40,520
control over what happens with that menu

00:26:37,250 --> 00:26:41,870
item that you just defined that may seem

00:26:40,520 --> 00:26:44,600
sort of weird but if you were to look at

00:26:41,870 --> 00:26:46,880
like taxonomy menu in Drupal 8 it runs

00:26:44,600 --> 00:26:50,300
all of its code through a custom class

00:26:46,880 --> 00:26:55,340
and can do quite a few extra robust

00:26:50,300 --> 00:26:58,940
things because of that I said that

00:26:55,340 --> 00:27:03,320
already so my primary point here is that

00:26:58,940 --> 00:27:05,900
you know annotations are their data

00:27:03,320 --> 00:27:09,680
they're not behavior if someone says oh

00:27:05,900 --> 00:27:10,070
you're coding and comments no you're

00:27:09,680 --> 00:27:14,300
really not

00:27:10,070 --> 00:27:19,880
right info hooks were kind of commenting

00:27:14,300 --> 00:27:21,590
in code if anything so let's look at a

00:27:19,880 --> 00:27:23,420
couple of practical examples I know that

00:27:21,590 --> 00:27:26,160
the slides can be a little dry so I'm

00:27:23,420 --> 00:27:30,480
gonna hop into some real code

00:27:26,160 --> 00:27:32,960
and we'll show some something hopefully

00:27:30,480 --> 00:27:32,960
a bit more tangible

00:27:54,570 --> 00:27:58,340
so everybody see that okay

00:28:29,860 --> 00:28:36,140
so I invented the simplest plug-in type

00:28:33,590 --> 00:28:39,350
I could possibly come up with which is

00:28:36,140 --> 00:28:44,390
literally just something that DSM's out

00:28:39,350 --> 00:28:46,430
a message to people on the site so this

00:28:44,390 --> 00:28:47,480
one has a very simple message it says

00:28:46,430 --> 00:28:49,940
roses are red

00:28:47,480 --> 00:28:52,040
I suspect you can guess what this one

00:28:49,940 --> 00:28:56,630
says which is just simply that violets

00:28:52,040 --> 00:28:59,930
are blue and these are two specific

00:28:56,630 --> 00:29:02,170
plug-in implementations of what I hope

00:28:59,930 --> 00:29:05,270
is the simplest plug-in type in history

00:29:02,170 --> 00:29:06,920
so let's kind of dig into this and begin

00:29:05,270 --> 00:29:14,060
like really looking at it I'm actually

00:29:06,920 --> 00:29:20,080
going to awesome can you'll see that

00:29:14,060 --> 00:29:24,530
okay oh yeah that's pretty good okay

00:29:20,080 --> 00:29:26,690
so a couple of quick things of note one

00:29:24,530 --> 00:29:29,180
our class actually implements an

00:29:26,690 --> 00:29:31,780
interface okay if it didn't implement

00:29:29,180 --> 00:29:34,640
this interface then it would not be

00:29:31,780 --> 00:29:36,800
discoverable in the strict terms of what

00:29:34,640 --> 00:29:39,710
Drupal defines as discovery for this

00:29:36,800 --> 00:29:42,890
plug-in type number two it has an

00:29:39,710 --> 00:29:45,050
annotation the message specifies that we

00:29:42,890 --> 00:29:47,890
have an identifier of blue violets and

00:29:45,050 --> 00:29:51,560
we have a label that is translatable

00:29:47,890 --> 00:29:54,050
also of blue violets and the translation

00:29:51,560 --> 00:29:56,060
system will just pick this up and it

00:29:54,050 --> 00:30:01,640
treats it like any other string within

00:29:56,060 --> 00:30:05,450
Drupal ok and finally and most

00:30:01,640 --> 00:30:07,670
importantly is where this class actually

00:30:05,450 --> 00:30:10,010
exists and so it exists within a

00:30:07,670 --> 00:30:12,590
particular directory structure inside of

00:30:10,010 --> 00:30:14,420
our module and because it exists in that

00:30:12,590 --> 00:30:17,360
directory structure implements this

00:30:14,420 --> 00:30:19,240
interface and has that annotation it's a

00:30:17,360 --> 00:30:22,250
plug-in of the type that I'm looking for

00:30:19,240 --> 00:30:24,710
right if all three of those things were

00:30:22,250 --> 00:30:28,480
not true this would not be available to

00:30:24,710 --> 00:30:28,480
be chosen inside of the plug-in system

00:30:30,340 --> 00:30:37,670
now to kind of back that up and show how

00:30:33,800 --> 00:30:39,800
I know that to be true I'm going to go

00:30:37,670 --> 00:30:42,470
ahead and go into the plug-in manager

00:30:39,800 --> 00:30:43,190
for this now I made a distinct advantage

00:30:42,470 --> 00:30:46,310
on this

00:30:43,190 --> 00:30:48,110
code because I wrote it if you happen to

00:30:46,310 --> 00:30:49,730
be looking at a plugin type that you did

00:30:48,110 --> 00:30:51,770
not write and are trying to figure out

00:30:49,730 --> 00:30:52,880
how do I write a new one of these the

00:30:51,770 --> 00:30:55,340
first thing you have to do is you have

00:30:52,880 --> 00:30:57,530
to find its manager if you don't know

00:30:55,340 --> 00:30:59,720
what its manager is that is absolutely

00:30:57,530 --> 00:31:02,450
positively your first task all the time

00:30:59,720 --> 00:31:04,870
and once you have found its manager and

00:31:02,450 --> 00:31:07,040
we'll talk about how that can be done

00:31:04,870 --> 00:31:08,750
you want to look at its constructor

00:31:07,040 --> 00:31:12,550
because its constructor is going to tell

00:31:08,750 --> 00:31:15,770
you a number of things right in our case

00:31:12,550 --> 00:31:17,780
when it calls parent construct it passes

00:31:15,770 --> 00:31:20,810
a directory it says look in the

00:31:17,780 --> 00:31:22,670
directory plug-in message this is going

00:31:20,810 --> 00:31:25,280
to iterate over every namespace in the

00:31:22,670 --> 00:31:29,570
entire system for plug in message as a

00:31:25,280 --> 00:31:32,150
subdirectory everybody familiar with

00:31:29,570 --> 00:31:36,740
namespaces I've said that a lot and not

00:31:32,150 --> 00:31:40,070
explained it once namespaces are these

00:31:36,740 --> 00:31:41,690
guys see House has namespace Drupal

00:31:40,070 --> 00:31:45,970
plugin message up there that's the

00:31:41,690 --> 00:31:48,230
module in which this code exists and so

00:31:45,970 --> 00:31:50,660
every module registers one of these

00:31:48,230 --> 00:31:52,730
every symphony component registers one

00:31:50,660 --> 00:31:55,370
of these Drupal registers a few of these

00:31:52,730 --> 00:31:59,270
and these all get passed to every single

00:31:55,370 --> 00:32:01,610
plug-in manager as dollar namespaces and

00:31:59,270 --> 00:32:04,160
it'll iterate over these and check for a

00:32:01,610 --> 00:32:06,500
subdirectory structure of plug-in

00:32:04,160 --> 00:32:09,380
message and if it finds it it knows that

00:32:06,500 --> 00:32:12,550
it might have plugins that are eligible

00:32:09,380 --> 00:32:15,640
for this content for this plug-in type

00:32:12,550 --> 00:32:18,230
it then goes on to see whether or not

00:32:15,640 --> 00:32:19,820
they implement this interface we talked

00:32:18,230 --> 00:32:24,230
about the interface here it is

00:32:19,820 --> 00:32:27,920
and finally it specifies the annotation

00:32:24,230 --> 00:32:31,250
so the plug-in manager is responsible

00:32:27,920 --> 00:32:32,930
for setting up all of these kind of bare

00:32:31,250 --> 00:32:36,740
minimum you have to do these sort of

00:32:32,930 --> 00:32:40,790
things and what's especially interesting

00:32:36,740 --> 00:32:42,170
about this is that while annotations are

00:32:40,790 --> 00:32:44,750
kind of the order of the day for most

00:32:42,170 --> 00:32:47,110
plug-in types they are not the only one

00:32:44,750 --> 00:32:50,000
possible I already mentioned Hamill

00:32:47,110 --> 00:32:51,590
discovery is completely pluggable so if

00:32:50,000 --> 00:32:52,830
you wanted to write your own discovery

00:32:51,590 --> 00:32:54,990
system that I don't

00:32:52,830 --> 00:32:57,779
hit a service endpoint on someone else's

00:32:54,990 --> 00:33:00,630
system and let you do crazy things you

00:32:57,779 --> 00:33:03,269
could absolutely do that discovery is

00:33:00,630 --> 00:33:06,390
absolutely 100% pluggable so is the

00:33:03,269 --> 00:33:07,950
factory instantiation and so plugin

00:33:06,390 --> 00:33:10,740
managers from a very technical

00:33:07,950 --> 00:33:13,350
perspective are actually factories with

00:33:10,740 --> 00:33:15,350
a dictionary applied to them okay so

00:33:13,350 --> 00:33:18,390
they know everything they could possibly

00:33:15,350 --> 00:33:20,010
instantiate and they have the facility

00:33:18,390 --> 00:33:24,960
to instantiate them that's what a

00:33:20,010 --> 00:33:30,090
plug-in manager is I'm gonna stop at

00:33:24,960 --> 00:33:32,370
this point are there any questions we've

00:33:30,090 --> 00:33:35,519
got mics over here if anybody does want

00:33:32,370 --> 00:33:39,620
to ask a question just feel free to walk

00:33:35,519 --> 00:33:39,620
over there and I'll stop and we can talk

00:33:52,410 --> 00:34:02,320
um I think yeah so yeah so the question

00:33:57,280 --> 00:34:05,740
was if if Discovery's pluggable can you

00:34:02,320 --> 00:34:07,270
describe why a system like the menu

00:34:05,740 --> 00:34:11,560
system would have gone with Hamel

00:34:07,270 --> 00:34:15,280
instead of annotations and that's pretty

00:34:11,560 --> 00:34:19,300
easy to kind of summarize because in

00:34:15,280 --> 00:34:21,190
that particular case almost every single

00:34:19,300 --> 00:34:25,149
menu item runs through the same plugin

00:34:21,190 --> 00:34:27,760
class so if you don't specify a class

00:34:25,149 --> 00:34:29,530
its plugin manager applies a class for

00:34:27,760 --> 00:34:31,450
you and just assumes that this is the

00:34:29,530 --> 00:34:33,190
one you're running through because of

00:34:31,450 --> 00:34:35,080
that they didn't need to attach

00:34:33,190 --> 00:34:37,510
annotations to classes in order to

00:34:35,080 --> 00:34:39,490
operate they just needed to document yet

00:34:37,510 --> 00:34:41,110
another set of metadata to pass through

00:34:39,490 --> 00:34:46,659
the same class over and over and over

00:34:41,110 --> 00:34:49,360
again it's reproduced throughout the

00:34:46,659 --> 00:34:52,030
entire menu system many links to it menu

00:34:49,360 --> 00:34:54,179
Actions menu tabs all of them do it and

00:34:52,030 --> 00:34:59,380
it works really really well in that case

00:34:54,179 --> 00:35:01,480
it's kind of an odd use of plugins but I

00:34:59,380 --> 00:35:04,510
really like it I think it works really

00:35:01,480 --> 00:35:06,970
really well and very elegantly and it

00:35:04,510 --> 00:35:09,310
gives other systems again like taxonomy

00:35:06,970 --> 00:35:13,240
menu the ability to come in and provide

00:35:09,310 --> 00:35:17,260
their own their own logic in that sort

00:35:13,240 --> 00:35:19,480
of case another kind of point on that is

00:35:17,260 --> 00:35:21,850
we haven't talked about derive errs but

00:35:19,480 --> 00:35:27,400
who and here's ever written of for each

00:35:21,850 --> 00:35:29,320
loop inside of an info hook yeah did any

00:35:27,400 --> 00:35:33,100
of you wonder how you might do that with

00:35:29,320 --> 00:35:34,600
an annotation yeah so we we actually

00:35:33,100 --> 00:35:36,580
have a separate class that you can

00:35:34,600 --> 00:35:38,980
define that defines the for each loop to

00:35:36,580 --> 00:35:40,660
run the annotation through I don't show

00:35:38,980 --> 00:35:42,100
that in this particular one but if

00:35:40,660 --> 00:35:47,290
someone wants to see it I'd be happy to

00:35:42,100 --> 00:35:48,910
show it so I saw another hand over here

00:35:47,290 --> 00:35:54,370
did someone have an additional question

00:35:48,910 --> 00:35:57,030
or did I answer it no okay great

00:35:54,370 --> 00:35:57,030
so

00:35:58,810 --> 00:36:03,560
so our plugin manager is really

00:36:01,280 --> 00:36:06,410
responsible for making sure that it

00:36:03,560 --> 00:36:08,120
finds our plugins and that it can

00:36:06,410 --> 00:36:11,890
instantiate our plugins I'm gonna go

00:36:08,120 --> 00:36:16,610
ahead and hop into Drupal here this is

00:36:11,890 --> 00:36:20,960
my administrative interface for this

00:36:16,610 --> 00:36:23,270
really simple module and it gives me an

00:36:20,960 --> 00:36:26,090
option of selecting between my two

00:36:23,270 --> 00:36:28,580
plugins or no option whatsoever so if I

00:36:26,090 --> 00:36:30,500
were to select red roses I can go ahead

00:36:28,580 --> 00:36:35,630
and hit save on this and I'm gonna get a

00:36:30,500 --> 00:36:37,370
message roses are red okay cool and if I

00:36:35,630 --> 00:36:39,500
want to change it I'll get violets are

00:36:37,370 --> 00:36:42,890
blue and of course I have caching issues

00:36:39,500 --> 00:36:45,770
so I get both for the first refresh and

00:36:42,890 --> 00:36:48,470
then after that I'm good because this is

00:36:45,770 --> 00:36:50,330
a really simple module now this modules

00:36:48,470 --> 00:36:53,030
public if anybody wants to take a look

00:36:50,330 --> 00:36:55,730
at it it is a plugin underscore message

00:36:53,030 --> 00:36:57,440
on drupal.org I have done my best to

00:36:55,730 --> 00:37:02,800
keep it as simple as possible so that

00:36:57,440 --> 00:37:04,940
people can really easily dissect it but

00:37:02,800 --> 00:37:07,790
coming back in here for a minute

00:37:04,940 --> 00:37:09,050
mm-hmm let's go look at the annotation

00:37:07,790 --> 00:37:11,180
we've looked at most of the other

00:37:09,050 --> 00:37:14,030
aspects of this but the annotation I

00:37:11,180 --> 00:37:17,180
think is especially interesting because

00:37:14,030 --> 00:37:19,850
it's so simple didn't have to do much of

00:37:17,180 --> 00:37:21,920
anything I extended a base class that

00:37:19,850 --> 00:37:23,900
Drupal core provides for this and I just

00:37:21,920 --> 00:37:25,790
documented the extra stuff I wanted

00:37:23,900 --> 00:37:28,010
which is one thing label and it's a

00:37:25,790 --> 00:37:30,440
requirement so I didn't give it any sort

00:37:28,010 --> 00:37:31,640
of default I documented exactly what

00:37:30,440 --> 00:37:34,030
you're expected to do here it's an

00:37:31,640 --> 00:37:36,740
administrative label for this message

00:37:34,030 --> 00:37:39,080
they couldn't possibly be more clear

00:37:36,740 --> 00:37:40,940
about what it is that you're supposed to

00:37:39,080 --> 00:37:48,130
do inside the annotation of your class

00:37:40,940 --> 00:37:52,310
now so coming back to one of our classes

00:37:48,130 --> 00:37:55,010
we can see I add well ID is actually

00:37:52,310 --> 00:37:57,230
assumed in all plugins and then say that

00:37:55,010 --> 00:37:59,330
but it is and then you know you have a

00:37:57,230 --> 00:38:05,810
label that should be a translatable

00:37:59,330 --> 00:38:08,120
string for administrative purposes we

00:38:05,810 --> 00:38:10,100
can also go into the interface just kind

00:38:08,120 --> 00:38:11,870
of due diligence on this and you can see

00:38:10,100 --> 00:38:13,760
as promised this is

00:38:11,870 --> 00:38:17,450
potentially the simplest plug-in type in

00:38:13,760 --> 00:38:22,040
the world it has one method it has one

00:38:17,450 --> 00:38:24,890
string in the annotation it it's so

00:38:22,040 --> 00:38:27,620
stupid that it almost shouldn't exist

00:38:24,890 --> 00:38:40,400
but I think it it is educational in

00:38:27,620 --> 00:38:42,980
nature so now I mentioned that these are

00:38:40,400 --> 00:38:44,750
supposed to replace info hooks and one

00:38:42,980 --> 00:38:46,880
of the common things that we see with

00:38:44,750 --> 00:38:49,250
info hooks is that they typically show

00:38:46,880 --> 00:38:52,400
up in a user interface somewhere right

00:38:49,250 --> 00:38:54,650
you have a block to place you have you

00:38:52,400 --> 00:38:59,320
know input formats to configure you have

00:38:54,650 --> 00:39:02,060
something along these lines right and so

00:38:59,320 --> 00:39:07,070
the plug-in system allows us to do this

00:39:02,060 --> 00:39:09,290
pretty simply by calling the get

00:39:07,070 --> 00:39:11,120
definitions method just called get

00:39:09,290 --> 00:39:13,310
definitions and it will find if it

00:39:11,120 --> 00:39:15,290
doesn't already have every single

00:39:13,310 --> 00:39:17,270
instance of plugins for this plug-in

00:39:15,290 --> 00:39:18,800
type and then it caches them so it

00:39:17,270 --> 00:39:20,960
doesn't parse annotations every single

00:39:18,800 --> 00:39:22,850
time you like go through this page that

00:39:20,960 --> 00:39:26,210
doesn't happen parses 'im wants cache

00:39:22,850 --> 00:39:28,460
ISM if you need to add new ones you're

00:39:26,210 --> 00:39:30,860
going to need to clear cache and you can

00:39:28,460 --> 00:39:35,540
specify all of that stuff from inside of

00:39:30,860 --> 00:39:37,700
the inside of the manager so I'll come

00:39:35,540 --> 00:39:39,820
on back to our manager point this out

00:39:37,700 --> 00:39:39,820
again

00:39:41,020 --> 00:39:46,340
the manager sets a cache back into

00:39:43,460 --> 00:39:49,700
interface sets a cache back end with

00:39:46,340 --> 00:39:51,620
what was passed to us through dependency

00:39:49,700 --> 00:39:53,510
injection and then we give it a

00:39:51,620 --> 00:39:55,730
particular string so it knows oh I have

00:39:53,510 --> 00:39:59,270
a separate cache for plug-in messages

00:39:55,730 --> 00:40:01,940
right here the other thing worth noting

00:39:59,270 --> 00:40:05,840
is that we also happen to have a alter

00:40:01,940 --> 00:40:08,000
info hook and that means that I'm

00:40:05,840 --> 00:40:10,040
actually exposing every single

00:40:08,000 --> 00:40:12,470
annotation across the entire system to

00:40:10,040 --> 00:40:14,270
an alter hook so that someone else can

00:40:12,470 --> 00:40:16,940
come along later and start changing

00:40:14,270 --> 00:40:18,800
things about my implementation so if I

00:40:16,940 --> 00:40:20,840
didn't like the label that was on a

00:40:18,800 --> 00:40:23,750
particular plug-in implementation I

00:40:20,840 --> 00:40:28,520
could change it as a developer for

00:40:23,750 --> 00:40:29,930
my single-site and 99.9% of the time if

00:40:28,520 --> 00:40:32,060
you're going to do this it's probably

00:40:29,930 --> 00:40:33,500
going to be on a site-by-site basis

00:40:32,060 --> 00:40:37,220
because you want to change something for

00:40:33,500 --> 00:40:39,380
the customer I've found one situation

00:40:37,220 --> 00:40:41,720
where that might not be true and we can

00:40:39,380 --> 00:40:43,910
talk about that a second but I want to

00:40:41,720 --> 00:40:46,780
actually show this because I think it's

00:40:43,910 --> 00:40:52,880
kind of interesting taken to its logical

00:40:46,780 --> 00:40:55,580
end that means that I could also do

00:40:52,880 --> 00:40:59,840
something really nasty like replace the

00:40:55,580 --> 00:41:02,570
actual expected class so you'll see I've

00:40:59,840 --> 00:41:09,370
put the red roses class here in for the

00:41:02,570 --> 00:41:14,750
blue violets plugin and of course I

00:41:09,370 --> 00:41:16,930
closed terminal so I'm going to clear

00:41:14,750 --> 00:41:16,930
cache

00:41:22,400 --> 00:41:31,840
yay and after I've done that button work

00:41:35,750 --> 00:41:42,349
when i refresh over here you'll see I've

00:41:40,730 --> 00:41:44,090
got blue violet selected but I'm getting

00:41:42,349 --> 00:41:46,070
the red roses message and that's because

00:41:44,090 --> 00:41:48,760
the red roses class is now running for

00:41:46,070 --> 00:41:52,400
all instances of blue violet

00:41:48,760 --> 00:41:54,170
so you remember I talked about maybe

00:41:52,400 --> 00:41:57,530
doing your own thing with the user login

00:41:54,170 --> 00:41:58,849
block I've always told people like if

00:41:57,530 --> 00:42:00,830
you're gonna do something like this it's

00:41:58,849 --> 00:42:03,470
probably on a site-by-site basis and I

00:42:00,830 --> 00:42:04,520
stand by that but I was talking to the

00:42:03,470 --> 00:42:07,760
guys who are trying to upgrade

00:42:04,520 --> 00:42:09,650
two-factor authentication and they're

00:42:07,760 --> 00:42:11,390
like oh no we actually do need to

00:42:09,650 --> 00:42:12,890
replace the user login block with a

00:42:11,390 --> 00:42:14,630
custom class that just takes it over

00:42:12,890 --> 00:42:18,230
completely so that we can do appropriate

00:42:14,630 --> 00:42:22,880
to factor right there on Drupal's normal

00:42:18,230 --> 00:42:24,849
login block there's like oh well crud

00:42:22,880 --> 00:42:28,580
there's like an actual use case for that

00:42:24,849 --> 00:42:30,530
and so if you need it that sort of stuff

00:42:28,580 --> 00:42:33,560
is is actually there to support you and

00:42:30,530 --> 00:42:35,930
is really ridiculously powerful when you

00:42:33,560 --> 00:42:37,520
realize I can actually take every

00:42:35,930 --> 00:42:39,260
configured instance of this block

00:42:37,520 --> 00:42:40,460
throughout the entire system and swap

00:42:39,260 --> 00:42:44,119
the class that's going through without

00:42:40,460 --> 00:42:46,220
having to reconfigure anything one alter

00:42:44,119 --> 00:42:48,470
hooked clear cache boom every single

00:42:46,220 --> 00:42:50,359
block of that type that's out there and

00:42:48,470 --> 00:42:53,859
running it's running a completely

00:42:50,359 --> 00:42:53,859
different class than it was moments ago

00:42:59,890 --> 00:43:05,860
let's see what time is it I don't know

00:43:07,090 --> 00:43:13,640
okay so we've got about 15 minutes if

00:43:11,870 --> 00:43:15,530
there are more questions I'm happy to

00:43:13,640 --> 00:43:27,440
answer them otherwise I'm gonna start

00:43:15,530 --> 00:43:29,060
showing really crazy crap yeah um yeah

00:43:27,440 --> 00:43:30,980
if you needed to do it that would be the

00:43:29,060 --> 00:43:33,380
way to override override the behavior of

00:43:30,980 --> 00:43:35,720
a plug-in just you know do me a favor

00:43:33,380 --> 00:43:38,060
and don't do it in contribs

00:43:35,720 --> 00:43:40,390
like don't contribute modules back that

00:43:38,060 --> 00:43:45,740
do that unless there is literally zero

00:43:40,390 --> 00:43:48,410
like zero other way to do it yeah yeah

00:43:45,740 --> 00:43:50,690
and it's only if the plugin manager

00:43:48,410 --> 00:43:56,890
actually provides an altar hook the vast

00:43:50,690 --> 00:44:00,350
majority of them in core do though then

00:43:56,890 --> 00:44:01,670
well if it doesn't provide it the

00:44:00,350 --> 00:44:03,590
service container that we talked about

00:44:01,670 --> 00:44:05,810
every single one of those services and

00:44:03,590 --> 00:44:09,110
all of Drupal can be hijacked and

00:44:05,810 --> 00:44:11,210
replaced with your own class like every

00:44:09,110 --> 00:44:14,090
last service definition and the whole

00:44:11,210 --> 00:44:15,560
thing is technically pluggable as long

00:44:14,090 --> 00:44:18,650
as you put another class in there that

00:44:15,560 --> 00:44:24,350
has the same interface on it Drupal will

00:44:18,650 --> 00:44:25,940
keep running oh no no no no that would

00:44:24,350 --> 00:44:28,580
be changed at a different layer you can

00:44:25,940 --> 00:44:30,770
actually specify that you want to hijack

00:44:28,580 --> 00:44:32,450
an existing container definition and

00:44:30,770 --> 00:44:34,070
point it at a different class and then

00:44:32,450 --> 00:44:35,690
it instantiates that class instead of

00:44:34,070 --> 00:44:37,460
the one Drupal defined so you could

00:44:35,690 --> 00:44:39,680
hijack the plug-in manager that's there

00:44:37,460 --> 00:44:41,840
and put your own plugin manager in and

00:44:39,680 --> 00:44:48,080
do whatever you wanted to that entire

00:44:41,840 --> 00:44:51,410
plugin system yeah the question was

00:44:48,080 --> 00:44:54,440
since I already answered it is this how

00:44:51,410 --> 00:44:57,440
you would overwrite a plugins behavior

00:44:54,440 --> 00:45:00,860
and yes in general it is and most plugin

00:44:57,440 --> 00:45:03,610
managers provide an alter so other

00:45:00,860 --> 00:45:03,610
questions yeah

00:45:19,520 --> 00:45:25,740
so the question was along the same lines

00:45:22,700 --> 00:45:29,190
can you use this sort of an approach to

00:45:25,740 --> 00:45:41,940
override entities or entity forms or

00:45:29,190 --> 00:45:42,510
things like that so you'll yeah you can

00:45:41,940 --> 00:45:45,210
read that

00:45:42,510 --> 00:45:45,810
so you'll notice this handlers right

00:45:45,210 --> 00:45:48,570
here

00:45:45,810 --> 00:45:51,090
handlers specifies all sorts of various

00:45:48,570 --> 00:45:54,180
things including form which happens to

00:45:51,090 --> 00:45:57,150
point at a particular class for the

00:45:54,180 --> 00:45:59,640
default yes this is all available to you

00:45:57,150 --> 00:46:04,380
through altars and you should absolutely

00:45:59,640 --> 00:46:07,700
positively be able to change it entities

00:46:04,380 --> 00:46:10,530
are interesting in this regard because

00:46:07,700 --> 00:46:12,660
most plug-in types their annotation

00:46:10,530 --> 00:46:14,760
actually returns an array of just their

00:46:12,660 --> 00:46:17,369
data and in the case of entities they

00:46:14,760 --> 00:46:21,000
actually return an object but they have

00:46:17,369 --> 00:46:23,670
a really great set of methods on there

00:46:21,000 --> 00:46:25,200
that also I believe expect you to be

00:46:23,670 --> 00:46:27,480
able to alter some of these things out

00:46:25,200 --> 00:46:30,570
so something like especially a form

00:46:27,480 --> 00:46:32,220
should be very changeable so if you

00:46:30,570 --> 00:46:34,380
didn't want to go with like a typical

00:46:32,220 --> 00:46:36,030
form alter and like manually alter each

00:46:34,380 --> 00:46:37,950
individual thing and you just wanted to

00:46:36,030 --> 00:46:44,839
hijack the whole class sure like that

00:46:37,950 --> 00:46:50,099
should be doable yep

00:46:44,839 --> 00:46:52,619
other questions yeah you know this

00:46:50,099 --> 00:46:53,849
should be good in the beginning of your

00:46:52,619 --> 00:46:55,980
presentation you mentioned something

00:46:53,849 --> 00:46:58,200
about you give a little overview of the

00:46:55,980 --> 00:47:00,599
different plugin types in core and you I

00:46:58,200 --> 00:47:02,430
think you said that you'd explain how

00:47:00,599 --> 00:47:04,050
you how people could figure that out and

00:47:02,430 --> 00:47:05,280
we built a solution for that in the

00:47:04,050 --> 00:47:07,170
plugin module and contribute I was

00:47:05,280 --> 00:47:11,940
wondering did we do sin against someone

00:47:07,170 --> 00:47:13,740
else already sold before I yes however I

00:47:11,940 --> 00:47:15,330
don't think you're going to be upset

00:47:13,740 --> 00:47:26,609
about it because the people who who

00:47:15,330 --> 00:47:29,660
solved it already are the yeah I was

00:47:26,609 --> 00:47:29,660
just going to come here and

00:47:30,700 --> 00:47:34,540
scroll through all of the different

00:47:32,230 --> 00:47:37,570
plugin manager interface implementing

00:47:34,540 --> 00:47:39,750
classes so no from a PHP perspective

00:47:37,570 --> 00:47:42,720
whatever you invented is probably great

00:47:39,750 --> 00:47:46,150
because I'm just using phpstorm

00:47:42,720 --> 00:47:48,270
right but that's every every class that

00:47:46,150 --> 00:47:56,109
implements a plug-in manager interface

00:47:48,270 --> 00:47:59,730
right there which is quite a few other

00:47:56,109 --> 00:47:59,730
questions yeah

00:48:06,160 --> 00:48:12,700
if you define an annotation and all of

00:48:09,670 --> 00:48:14,920
its properties are they all required yes

00:48:12,700 --> 00:48:17,050
and no if you define it and you don't

00:48:14,920 --> 00:48:19,240
give it a default value it's required if

00:48:17,050 --> 00:48:21,579
you give it a default value because you

00:48:19,240 --> 00:48:24,490
could say like protected dollar whatever

00:48:21,579 --> 00:48:28,510
equal empty string that's not required

00:48:24,490 --> 00:48:31,150
right if you just say protected dollar

00:48:28,510 --> 00:48:38,220
something you need to provide something

00:48:31,150 --> 00:48:38,220
for that the plug-in class

00:48:42,410 --> 00:48:47,310
yeah you could but you're you're

00:48:45,030 --> 00:48:50,220
unlikely to extend anyone else's

00:48:47,310 --> 00:48:53,070
annotation you might extend the the one

00:48:50,220 --> 00:48:55,470
that core provides and that just comes

00:48:53,070 --> 00:48:57,780
with an expectation of ID which you have

00:48:55,470 --> 00:49:01,050
to have otherwise we can't instantiate

00:48:57,780 --> 00:49:05,100
stuff for you but you're unlikely to

00:49:01,050 --> 00:49:06,330
ever extend someone else's the only

00:49:05,100 --> 00:49:08,970
system I know of that does that is

00:49:06,330 --> 00:49:11,310
entities and they share a common base

00:49:08,970 --> 00:49:12,650
class so config in cities and content

00:49:11,310 --> 00:49:15,660
entities actually have two different

00:49:12,650 --> 00:49:18,390
annotations but the plug-in system is

00:49:15,660 --> 00:49:20,900
looking for their parent class as the

00:49:18,390 --> 00:49:24,780
annotation so it picks up both of them

00:49:20,900 --> 00:49:26,580
which no one else does anywhere in core

00:49:24,780 --> 00:49:28,680
as far as I know and it's a cute trick

00:49:26,580 --> 00:49:35,180
that I wasn't even sure worked until I

00:49:28,680 --> 00:49:35,180
saw it working so other questions no

00:49:36,080 --> 00:49:42,180
okay well if anybody comes up with one

00:49:38,370 --> 00:49:46,890
just raise your hand I'm going to have a

00:49:42,180 --> 00:49:48,960
little bit of fun here so my job at

00:49:46,890 --> 00:49:51,150
Acquia as of late has largely been

00:49:48,960 --> 00:49:55,260
helping to support various contribute

00:49:51,150 --> 00:49:56,790
grades of Drupal modules so Drupal 7

00:49:55,260 --> 00:49:58,410
modules we all know and love and trying

00:49:56,790 --> 00:50:00,660
to get them up and running inside of

00:49:58,410 --> 00:50:04,050
Drupal 8 so this would include things

00:50:00,660 --> 00:50:06,380
like taxonomy menu which we just helped

00:50:04,050 --> 00:50:09,360
get a beta out of pretty recently and

00:50:06,380 --> 00:50:10,890
the one that no one has really gotten to

00:50:09,360 --> 00:50:12,090
see yet that I've been working on for

00:50:10,890 --> 00:50:16,770
about the last week and a half is

00:50:12,090 --> 00:50:19,020
services module which yes we have some

00:50:16,770 --> 00:50:20,700
cool stuff in court but I needed a

00:50:19,020 --> 00:50:23,190
slightly different approach so we needed

00:50:20,700 --> 00:50:25,140
a different module so I'm going to show

00:50:23,190 --> 00:50:28,070
a little bit of that and maybe show off

00:50:25,140 --> 00:50:30,300
some of the more nifty aspects of

00:50:28,070 --> 00:50:32,780
plugins that this session doesn't

00:50:30,300 --> 00:50:32,780
normally cover

00:50:42,470 --> 00:50:47,060
so I'll start with a fairly easy thing

00:50:45,680 --> 00:50:48,500
here

00:50:47,060 --> 00:50:50,750
anybody in here actually every youth

00:50:48,500 --> 00:50:53,030
services module yeah that's a pretty

00:50:50,750 --> 00:50:54,410
good chunk of the room one of the things

00:50:53,030 --> 00:50:58,760
you can do with services module is you

00:50:54,410 --> 00:51:01,460
can say like hey I want you to like

00:50:58,760 --> 00:51:03,890
serialize a node into JSON and give it

00:51:01,460 --> 00:51:07,040
to me like okay great so that would be

00:51:03,890 --> 00:51:08,300
like get in the rest terminology and so

00:51:07,040 --> 00:51:11,119
what I have here is I actually have a

00:51:08,300 --> 00:51:15,020
class whose job is to get an entity and

00:51:11,119 --> 00:51:16,490
return its data as an array and there's

00:51:15,020 --> 00:51:18,609
some some really cool things kind of

00:51:16,490 --> 00:51:21,020
going on here I'll start up at the

00:51:18,609 --> 00:51:22,130
annotation because the annotation is

00:51:21,020 --> 00:51:25,069
almost the entirety of this you'll see

00:51:22,130 --> 00:51:30,589
there's exactly two lines of functional

00:51:25,069 --> 00:51:34,430
code in this plugin to write so okay

00:51:30,589 --> 00:51:37,369
what's going on here I have an ID of

00:51:34,430 --> 00:51:40,460
entity get it specifies its method so

00:51:37,369 --> 00:51:42,290
it's saying we're doing a get and then

00:51:40,460 --> 00:51:44,270
it has this driver on it I made mention

00:51:42,290 --> 00:51:47,089
of doing like for each loops inside of

00:51:44,270 --> 00:51:48,380
an info hook this is what drivers do so

00:51:47,089 --> 00:51:51,170
this is a completely separate class

00:51:48,380 --> 00:51:53,510
whose job is to know what - for each /

00:51:51,170 --> 00:51:59,140
and how to complete the metadata for

00:51:53,510 --> 00:51:59,140
this class let's go look at that

00:52:02,809 --> 00:52:06,739
so this guy actually gets the

00:52:05,719 --> 00:52:09,709
entitymanager

00:52:06,739 --> 00:52:12,169
injected into it and then it for each it

00:52:09,709 --> 00:52:15,789
reaches over every single entity type

00:52:12,169 --> 00:52:17,599
defined not only in core but by any

00:52:15,789 --> 00:52:19,729
additional module you might have

00:52:17,599 --> 00:52:21,829
installed here right like if you add

00:52:19,729 --> 00:52:23,619
Drupal commerce installed it would find

00:52:21,829 --> 00:52:25,579
all Jubal Commerce's entities as well

00:52:23,619 --> 00:52:28,579
okay

00:52:25,579 --> 00:52:30,679
and so it goes through and it begins

00:52:28,579 --> 00:52:33,709
setting up derivatives for this where it

00:52:30,679 --> 00:52:36,259
specifies a title a description the

00:52:33,709 --> 00:52:38,390
category of the thing a unique path at

00:52:36,259 --> 00:52:40,640
which to actually address it and then it

00:52:38,390 --> 00:52:42,799
sets up something that we haven't

00:52:40,640 --> 00:52:46,249
discussed it all which is this notion of

00:52:42,799 --> 00:52:48,409
contexts now contexts are data objects

00:52:46,249 --> 00:52:52,479
that your plugin requires in order to

00:52:48,409 --> 00:52:52,479
run anybody in here ever use panels

00:52:52,599 --> 00:52:59,749
okay so panels has kind of this notion

00:52:55,219 --> 00:53:01,609
that I need a node if I want to tell you

00:52:59,749 --> 00:53:03,679
what the title of the node is so if you

00:53:01,609 --> 00:53:05,449
want to place the node title in this

00:53:03,679 --> 00:53:06,829
region I can't very well tell you what

00:53:05,449 --> 00:53:10,849
the title is if I don't have the node

00:53:06,829 --> 00:53:12,559
object that's a context okay so I

00:53:10,849 --> 00:53:16,429
decided to leverage the same sort of

00:53:12,559 --> 00:53:18,949
idea with services and so my my service

00:53:16,429 --> 00:53:21,709
definitions all say well I'm currently

00:53:18,949 --> 00:53:23,539
looking at node or user or comment or

00:53:21,709 --> 00:53:25,339
wherever we are in the foreach loop and

00:53:23,539 --> 00:53:28,209
it specifies I'm going to need one of

00:53:25,339 --> 00:53:30,140
those in order to get it for you okay

00:53:28,209 --> 00:53:32,529
anybody want to take a guess where it

00:53:30,140 --> 00:53:32,529
gets that

00:53:37,020 --> 00:53:44,859
the path right so Drupal core does this

00:53:42,640 --> 00:53:48,490
if you want a node and you're on node

00:53:44,859 --> 00:53:52,180
slash one node one is is your note right

00:53:48,490 --> 00:53:53,950
and Drupal has this awesome system where

00:53:52,180 --> 00:53:56,349
you actually get a note object out of

00:53:53,950 --> 00:53:58,359
that right in various iterations of

00:53:56,349 --> 00:54:00,700
Drupal it has been more or less awesome

00:53:58,359 --> 00:54:01,599
it is fantastic in Drupal 8 but I'm not

00:54:00,700 --> 00:54:05,200
gonna go there right now

00:54:01,599 --> 00:54:07,859
so I've specified I need this entity I'm

00:54:05,200 --> 00:54:14,170
gonna get it injected into my plug-in

00:54:07,859 --> 00:54:16,740
and so I can say hey get the context

00:54:14,170 --> 00:54:19,839
value for the entity we defined as a

00:54:16,740 --> 00:54:24,309
context and then return its values as an

00:54:19,839 --> 00:54:32,790
array in practice let's see I'll bring

00:54:24,309 --> 00:54:32,790
up postman there we go

00:54:39,560 --> 00:54:45,060
it looks a little something like this

00:54:41,940 --> 00:54:47,510
right so I have JSON output of a node

00:54:45,060 --> 00:54:47,510
object

00:54:55,250 --> 00:55:04,069
here's JSON output of a block right I

00:55:01,540 --> 00:55:08,150
can see that this block is currently in

00:55:04,069 --> 00:55:11,480
footer second and then we can start

00:55:08,150 --> 00:55:14,050
doing some cool things let's see if I

00:55:11,480 --> 00:55:14,050
can pull this off

00:55:29,170 --> 00:55:42,250
yeah maybe I don't think that happened

00:55:38,470 --> 00:55:44,230
proper no 500 error I definitely screwed

00:55:42,250 --> 00:55:46,809
it up but the whole idea here of course

00:55:44,230 --> 00:55:48,849
is that I can pass this stuff off and

00:55:46,809 --> 00:55:51,849
actually get it to update all across

00:55:48,849 --> 00:55:54,250
JSON or XML or whatever it is that I'm

00:55:51,849 --> 00:55:56,500
doing right and so this is actually

00:55:54,250 --> 00:55:59,140
really really powerful these notions of

00:55:56,500 --> 00:56:01,869
derivatives because I wrote one class in

00:55:59,140 --> 00:56:04,599
order to do get for both blocks and

00:56:01,869 --> 00:56:09,369
nodes and users and comments and orders

00:56:04,599 --> 00:56:11,230
and your entities will work there right

00:56:09,369 --> 00:56:12,940
you use the entity system I have a

00:56:11,230 --> 00:56:16,630
driver that iterates over the entity

00:56:12,940 --> 00:56:18,519
system it just works right and so like

00:56:16,630 --> 00:56:21,940
learning to ride really cool learning

00:56:18,519 --> 00:56:25,599
context also really cool because you get

00:56:21,940 --> 00:56:28,180
to actually start making these dependent

00:56:25,599 --> 00:56:30,099
upon the objects that you need in order

00:56:28,180 --> 00:56:31,809
to operate and you don't have to

00:56:30,099 --> 00:56:34,930
manually get that you don't have to say

00:56:31,809 --> 00:56:37,059
oh well this is gonna be node post or

00:56:34,930 --> 00:56:39,190
node put and I know I'm gonna need to

00:56:37,059 --> 00:56:41,500
serialize this thing as a node object

00:56:39,190 --> 00:56:43,299
and manually write that code no Drupal

00:56:41,500 --> 00:56:44,529
has a serializer that can look at JSON

00:56:43,299 --> 00:56:48,430
and figure out how to turn that into a

00:56:44,529 --> 00:56:52,000
node for you who knew right

00:56:48,430 --> 00:56:54,490
and so I don't have to actually specify

00:56:52,000 --> 00:56:58,329
node anywhere in my code and because of

00:56:54,490 --> 00:57:03,069
that I get a lot more out of it I think

00:56:58,329 --> 00:57:05,440
we are right about at the end of time

00:57:03,069 --> 00:57:08,430
looks like we have maybe five more

00:57:05,440 --> 00:57:08,430
minutes so yeah

00:57:12,970 --> 00:57:26,260
oh yeah yeah so so the questions like

00:57:23,940 --> 00:57:28,480
functionally couldn't I do something

00:57:26,260 --> 00:57:31,750
awful with that and the answer is yes

00:57:28,480 --> 00:57:34,660
you could as an example of one that I

00:57:31,750 --> 00:57:36,160
didn't even think of it wasn't until I

00:57:34,660 --> 00:57:39,130
was standing in the hallway demoing this

00:57:36,160 --> 00:57:40,990
to some friends that I realized services

00:57:39,130 --> 00:57:43,180
actually had all the knowledge it needed

00:57:40,990 --> 00:57:48,400
to create new service and points across

00:57:43,180 --> 00:57:51,930
its own API and I was like oh oh do I do

00:57:48,400 --> 00:57:53,859
I want that I don't know if I do right

00:57:51,930 --> 00:57:55,510
which is why it's nice to have these

00:57:53,859 --> 00:57:57,220
altars that you can just like throw crap

00:57:55,510 --> 00:57:59,050
away with and be like nope I don't want

00:57:57,220 --> 00:58:03,310
that you know I'll manually alter that

00:57:59,050 --> 00:58:06,310
out so you know we still have altar

00:58:03,310 --> 00:58:07,390
hooks in Drupal we probably shouldn't we

00:58:06,310 --> 00:58:09,310
should probably have done it some other

00:58:07,390 --> 00:58:11,500
way but we do for the time being and

00:58:09,310 --> 00:58:13,060
they work and they work really well so I

00:58:11,500 --> 00:58:16,540
would encourage you not to do something

00:58:13,060 --> 00:58:18,820
awful unless you just really cannot be

00:58:16,540 --> 00:58:22,119
stopped in which case make a dependency

00:58:18,820 --> 00:58:26,050
on bad judgment and go have fun other

00:58:22,119 --> 00:58:28,660
questions no okay well I'm going to let

00:58:26,050 --> 00:58:30,160
you go a few minutes early and if you

00:58:28,660 --> 00:58:32,820
have any additional questions feel free

00:58:30,160 --> 00:58:32,820
to come up then

00:58:52,069 --> 00:59:08,390
oh okay

00:58:57,740 --> 00:59:25,060
oh god no never say never bring up

00:59:08,390 --> 00:59:25,060
Portland ever again I made all the slide

00:59:25,900 --> 00:59:30,770
some point it broke down into a love

00:59:28,010 --> 00:59:34,480
fest about phpstorm and I don't think we

00:59:30,770 --> 00:59:34,480
ever actually recovered him that point

00:59:46,140 --> 00:59:49,000
thank you

00:59:47,619 --> 00:59:50,920
but I think what's what's more

00:59:49,000 --> 00:59:53,440
interesting to me about that particular

00:59:50,920 --> 00:59:55,059
topic is that like that slide that shows

00:59:53,440 --> 00:59:56,440
all the ones that are in core which

00:59:55,059 --> 01:00:02,890
isn't even all the ones that are in core

00:59:56,440 --> 01:00:05,980
I hope I hope to create like maybe four

01:00:02,890 --> 01:00:08,260
of those before and there are like ten

01:00:05,980 --> 01:00:09,970
times that many in there right so other

01:00:08,260 --> 01:00:12,549
people obviously like picked it up and

01:00:09,970 --> 01:00:14,200
ran with it we we brought it in because

01:00:12,549 --> 01:00:16,390
we knew we wanted it for blocks and we

01:00:14,200 --> 01:00:19,809
knew we wanted it for block visibility

01:00:16,390 --> 01:00:21,069
via conditions that was why we need to

01:00:19,809 --> 01:00:24,579
plug in so we were like if no one else

01:00:21,069 --> 01:00:28,740
uses it so be it that didn't happen and

01:00:24,579 --> 01:00:28,740
that was great anyways your question

01:00:39,559 --> 01:00:45,569
it's more like it's like saying oh the

01:00:43,319 --> 01:00:48,029
behavior for this particular type of

01:00:45,569 --> 01:00:49,380
thing exists over here it's not behavior

01:00:48,029 --> 01:00:52,890
in the annotation itself so it's

01:00:49,380 --> 01:00:54,599
documenting where it exists because

01:00:52,890 --> 01:00:55,829
because like from a separation of

01:00:54,599 --> 01:00:57,630
concerns perspective we don't

01:00:55,829 --> 01:01:01,819
necessarily want that behavior in

01:00:57,630 --> 01:01:04,799
ARFORGEN like I wrote the plug-in system

01:01:01,819 --> 01:01:06,919
three times in the first two I tried

01:01:04,799 --> 01:01:10,619
really hard to get derivatives as

01:01:06,919 --> 01:01:12,449
methods on the actual plugins that just

01:01:10,619 --> 01:01:16,650
never stuck it never worked

01:01:12,449 --> 01:01:19,579
it was always crufty and ugly and made

01:01:16,650 --> 01:01:19,579
me want to like

01:01:21,870 --> 01:01:28,490

YouTube URL: https://www.youtube.com/watch?v=BVwi29Kpv8E


