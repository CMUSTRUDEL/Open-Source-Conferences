Title: DrupalCon Barcelona 2015: Planning for CRAP and entity revisions everywhere in core
Publication date: 2015-09-22
Playlist: DrupalCon Barcelona - September 2015
Description: 
	This is a follow-up on the core conversations in Los Angeles that recived lots of positive feedback when suggesting improvements to the Entity Revision API in core.

In this session we will lay out a more concrete and detailed plan of how we can introduce these improvements in Drupal 8.2.x or 9.x.

Short background on the topic

CRAP stands for Create Read Archive Purge which implies that all changes to an entity creates a new revision, even a delete operation is a new revision (much like Git does it). This creates a system much more capable of managing complex workflows, concurrent editing, distributed content, content staging, audit trails etc.

About the presenter

Dick Olsson (aka dixon_) is a long time core contributor and author of the defacto content staging solution for Drupal 7 - the Deploy and UUID modules.

Dick started his Drupal career at NodeOne (now Wunderkraut) and later went on to work for Al Jazeera Media Network as their Lead Drupal Developer. Now he's working as a Digital Engineering manager at Pfizer where he's managing a content staging soultion for hundreds of websites.
Captions: 
	00:00:00,000 --> 00:00:07,589
Thanks a room for joining hope you

00:00:04,380 --> 00:00:10,139
enjoying the conference so far first

00:00:07,589 --> 00:00:14,040
couple of sessions starting now I'm

00:00:10,139 --> 00:00:17,730
really excited here today and we're

00:00:14,040 --> 00:00:20,160
going to talk about planning for crap

00:00:17,730 --> 00:00:21,359
and entity derivations in court and

00:00:20,160 --> 00:00:23,279
we're going to explain a little bit what

00:00:21,359 --> 00:00:25,650
this is but more importantly we're going

00:00:23,279 --> 00:00:30,300
to focus on the planning part here today

00:00:25,650 --> 00:00:32,099
a bit more on the agenda so as I just

00:00:30,300 --> 00:00:35,790
said I'm going to talk a little bit

00:00:32,099 --> 00:00:37,469
about what and why we interested in

00:00:35,790 --> 00:00:41,250
these things we're going to talk about

00:00:37,469 --> 00:00:44,969
the status of some modules in country

00:00:41,250 --> 00:00:47,399
that are relevant to the solution we're

00:00:44,969 --> 00:00:50,719
going to talk about a use case for this

00:00:47,399 --> 00:00:53,820
in core that perhaps could help drive

00:00:50,719 --> 00:00:55,620
this feature the planning aspect of it

00:00:53,820 --> 00:00:57,059
as well and then hopefully at the end we

00:00:55,620 --> 00:01:01,020
can have a little bit of a discussion

00:00:57,059 --> 00:01:02,820
and Q&A and I really would like to leave

00:01:01,020 --> 00:01:04,199
some room for the discussion part at the

00:01:02,820 --> 00:01:06,830
end I think that's important especially

00:01:04,199 --> 00:01:09,479
this being a core conversation track so

00:01:06,830 --> 00:01:12,210
at the end please feel free to step up

00:01:09,479 --> 00:01:20,490
to the mic in the middle and ask your

00:01:12,210 --> 00:01:22,890
questions or throw tomatoes okay so

00:01:20,490 --> 00:01:25,110
first who are we here on stage my name

00:01:22,890 --> 00:01:27,509
is Dickinson here you can find me on

00:01:25,110 --> 00:01:30,060
Twitter I'm a longtime contributor in

00:01:27,509 --> 00:01:34,020
both core and contrib I'm maintaining

00:01:30,060 --> 00:01:37,970
the uid module and deploy and currently

00:01:34,020 --> 00:01:41,369
working for Pfizer and I'm Tim Elwood I

00:01:37,970 --> 00:01:45,680
work for observation and I'm one of the

00:01:41,369 --> 00:01:45,680
coal maintained as the statistics module

00:01:46,729 --> 00:01:53,490
so what and why what are we talking

00:01:50,880 --> 00:01:57,270
about here today and brief background so

00:01:53,490 --> 00:02:01,229
crap it's an acronym and stands for

00:01:57,270 --> 00:02:04,530
create read archive and purge as opposed

00:02:01,229 --> 00:02:07,860
to what many people are used to called

00:02:04,530 --> 00:02:11,489
crud create read update delete this is

00:02:07,860 --> 00:02:12,300
an an alternative way to look at storing

00:02:11,489 --> 00:02:16,440
at

00:02:12,300 --> 00:02:19,140
data for more detail take technical

00:02:16,440 --> 00:02:21,900
details and have a look at the Amsterdam

00:02:19,140 --> 00:02:23,880
session and the la cour conversation

00:02:21,900 --> 00:02:25,500
we're not going to die very deep into

00:02:23,880 --> 00:02:28,770
the technical details there because

00:02:25,500 --> 00:02:30,570
we've been over that before but we're

00:02:28,770 --> 00:02:32,310
going to briefly go through it just to

00:02:30,570 --> 00:02:35,640
make sure that everyone is up to speed

00:02:32,310 --> 00:02:38,610
here so basically what we're looking for

00:02:35,640 --> 00:02:41,670
here is to enable revisions for all

00:02:38,610 --> 00:02:43,920
content entity types in core so things

00:02:41,670 --> 00:02:46,260
like nodes nodes already have relations

00:02:43,920 --> 00:02:51,140
right but we want to introduce it for

00:02:46,260 --> 00:02:53,760
terms block content users files

00:02:51,140 --> 00:02:59,340
basically every content entity type that

00:02:53,760 --> 00:03:01,950
we have in core the create and read

00:02:59,340 --> 00:03:04,680
aspect of the storage model that will be

00:03:01,950 --> 00:03:08,340
very much the same we introducing the

00:03:04,680 --> 00:03:12,030
archive aspect of it which is a new

00:03:08,340 --> 00:03:13,830
revision that we Marcus deleted so what

00:03:12,030 --> 00:03:15,960
you previously would think about as the

00:03:13,830 --> 00:03:19,380
delete operation is a new revision that

00:03:15,960 --> 00:03:21,270
we just archive away and then we

00:03:19,380 --> 00:03:25,380
introduce another concept called purge

00:03:21,270 --> 00:03:29,489
that actually empties the database if if

00:03:25,380 --> 00:03:31,560
so needed obviously the space will grow

00:03:29,489 --> 00:03:35,340
having revisions for everything in core

00:03:31,560 --> 00:03:37,950
so there's also a concept called

00:03:35,340 --> 00:03:42,270
compaction that would remove old or

00:03:37,950 --> 00:03:45,420
unnecessary data this particular

00:03:42,270 --> 00:03:46,500
compaction concept is not introduced in

00:03:45,420 --> 00:03:49,530
the country modules yet we're still

00:03:46,500 --> 00:03:51,750
working around the details on that but

00:03:49,530 --> 00:03:54,780
that's in essence what were we talking

00:03:51,750 --> 00:03:58,080
about here today and revisions for all

00:03:54,780 --> 00:04:03,510
content entity types so why do we need

00:03:58,080 --> 00:04:08,190
this well without revisions content can

00:04:03,510 --> 00:04:10,110
only exist or not exist you cannot lose

00:04:08,190 --> 00:04:13,260
this sort of aspect the content

00:04:10,110 --> 00:04:15,690
management aspect in in a CMS or a

00:04:13,260 --> 00:04:18,359
content management framework if you want

00:04:15,690 --> 00:04:22,169
whatever you want to call it if it's one

00:04:18,359 --> 00:04:25,470
thing that we should do right as as a

00:04:22,169 --> 00:04:28,980
CMS or cmf its content

00:04:25,470 --> 00:04:30,510
and its storage model and we really sort

00:04:28,980 --> 00:04:33,380
of lose the management content

00:04:30,510 --> 00:04:36,750
management part of it if we don't have

00:04:33,380 --> 00:04:39,500
revisions revisions obviously improves

00:04:36,750 --> 00:04:41,610
the user experience if you make a change

00:04:39,500 --> 00:04:43,770
you did the wrong change you want to

00:04:41,610 --> 00:04:46,080
work back you want to revert that's not

00:04:43,770 --> 00:04:48,090
today that's not possible you lose your

00:04:46,080 --> 00:04:51,690
changes if you want to change a block

00:04:48,090 --> 00:04:53,490
content for instance revisions is also

00:04:51,690 --> 00:04:56,850
the common denominator for many use

00:04:53,490 --> 00:05:00,720
cases workflows think workbench

00:04:56,850 --> 00:05:04,770
moderation in Drupal 7 synchronous

00:05:00,720 --> 00:05:07,020
editing for legal reasons you might need

00:05:04,770 --> 00:05:09,720
to provide an audit trail there are

00:05:07,020 --> 00:05:12,810
standards like I there are ISO standards

00:05:09,720 --> 00:05:16,350
that require you to provide full logs of

00:05:12,810 --> 00:05:19,860
all the changes content staging a

00:05:16,350 --> 00:05:22,080
sharing content across network this all

00:05:19,860 --> 00:05:26,130
requires revisions in order to handle

00:05:22,080 --> 00:05:28,890
things like conflicts and so on so it

00:05:26,130 --> 00:05:30,600
does make sense to have a solid API for

00:05:28,890 --> 00:05:39,390
this in court to support all of these

00:05:30,600 --> 00:05:41,400
use cases traditionally and we haven't

00:05:39,390 --> 00:05:42,900
really implemented things in court

00:05:41,400 --> 00:05:45,419
without a use case we're going to talk

00:05:42,900 --> 00:05:46,590
about a concrete use case in court as

00:05:45,419 --> 00:05:49,500
well because we don't just want to

00:05:46,590 --> 00:05:51,210
introduce this new thing or change

00:05:49,500 --> 00:05:52,830
everything for no reason in court we

00:05:51,210 --> 00:05:56,460
want to have a use case as well but

00:05:52,830 --> 00:06:01,320
first before we cover that just a quick

00:05:56,460 --> 00:06:03,900
note on the status of this in contrib so

00:06:01,320 --> 00:06:05,940
we're working on this very solution in a

00:06:03,900 --> 00:06:08,400
module called multi version which

00:06:05,940 --> 00:06:12,030
enables revisions for all content entity

00:06:08,400 --> 00:06:16,610
type entity types it also enables this

00:06:12,030 --> 00:06:20,160
crap storage way of thinking so deletes

00:06:16,610 --> 00:06:23,790
actually is a new revision a new flag

00:06:20,160 --> 00:06:27,030
revision then we also have the relaxed

00:06:23,790 --> 00:06:29,280
web services module that extends the

00:06:27,030 --> 00:06:33,090
rest module in core and exposes this

00:06:29,280 --> 00:06:36,120
full data model / rest including with

00:06:33,090 --> 00:06:37,630
revisions and it follows a standard API

00:06:36,120 --> 00:06:40,090
spec that is compatible

00:06:37,630 --> 00:06:42,370
with other software libraries and

00:06:40,090 --> 00:06:45,700
projects out there such as hoodie or

00:06:42,370 --> 00:06:47,740
pouch to be which opens up a whole other

00:06:45,700 --> 00:06:49,300
use case that we're not going to cover

00:06:47,740 --> 00:06:56,830
here today but that's just an

00:06:49,300 --> 00:06:58,870
interesting note there so how could we

00:06:56,830 --> 00:07:01,300
make use of this in core what what could

00:06:58,870 --> 00:07:06,610
be a driver to introduce some of these

00:07:01,300 --> 00:07:09,580
concepts into core and what we're going

00:07:06,610 --> 00:07:13,780
to introduce is perhaps one of the

00:07:09,580 --> 00:07:18,700
oldest concepts of computer systems or

00:07:13,780 --> 00:07:21,910
file and content systems and in 1984 it

00:07:18,700 --> 00:07:23,830
looked something like this it's not the

00:07:21,910 --> 00:07:29,140
guided tour we actually have that in

00:07:23,830 --> 00:07:33,160
Drupal 8 now 30 years later but it's a

00:07:29,140 --> 00:07:36,780
trash bin or recycle bin one of the most

00:07:33,160 --> 00:07:41,920
basic concepts that exists in every

00:07:36,780 --> 00:07:45,400
desktop computer that you use existed

00:07:41,920 --> 00:07:49,030
since 84 in Mac as we saw on the other

00:07:45,400 --> 00:07:52,150
side windows had it since 95 WordPress

00:07:49,030 --> 00:07:54,760
and Joomla has had it since I think

00:07:52,150 --> 00:07:56,590
WordPress had it since 2008 June I think

00:07:54,760 --> 00:08:03,700
was even earlier it's it's a concept

00:07:56,590 --> 00:08:07,450
that people are very very used to so

00:08:03,700 --> 00:08:12,840
this could be a driver for us we need

00:08:07,450 --> 00:08:15,580
somewhere to put our crap pardon the pun

00:08:12,840 --> 00:08:17,860
so I'll hand over and Tim will introduce

00:08:15,580 --> 00:08:21,070
the the trash model and how how this is

00:08:17,860 --> 00:08:25,570
relevant to what we're talking about so

00:08:21,070 --> 00:08:29,380
the trash module is basically just a UI

00:08:25,570 --> 00:08:32,380
for the multivision because as it was

00:08:29,380 --> 00:08:34,870
saying we're just flagging content as

00:08:32,380 --> 00:08:37,990
deleted so all the trash module does is

00:08:34,870 --> 00:08:40,320
show that content allow you to see

00:08:37,990 --> 00:08:42,340
what's in your trash this works on all

00:08:40,320 --> 00:08:44,169
content entities so whether it's a

00:08:42,340 --> 00:08:48,640
taxonomy term or a block or a node

00:08:44,169 --> 00:08:52,780
whatever you can get them in your trash

00:08:48,640 --> 00:08:56,620
and we can then restore content entities

00:08:52,780 --> 00:08:59,560
so these get put back exactly as they

00:08:56,620 --> 00:09:02,110
were with all their revisions you can

00:08:59,560 --> 00:09:05,760
bring back nodes bring back the comments

00:09:02,110 --> 00:09:10,960
4 nodes then you can also purged a trash

00:09:05,760 --> 00:09:16,750
so completely removing any existence of

00:09:10,960 --> 00:09:21,790
the content entity and this this allows

00:09:16,750 --> 00:09:25,660
us to to do this workflow and and

00:09:21,790 --> 00:09:29,520
probably stage content so I think it's

00:09:25,660 --> 00:09:29,520
time for a quick demo

00:09:37,730 --> 00:09:47,250
great so yeah just deleted fubar 11 so I

00:09:43,770 --> 00:09:51,710
was a node it's now being flanked is

00:09:47,250 --> 00:09:54,210
deleted and we can go to the trash and

00:09:51,710 --> 00:09:56,370
you've got all the different trash bins

00:09:54,210 --> 00:10:01,550
for the different entity types and

00:09:56,370 --> 00:10:01,550
there's fubar 11 in the trash

00:10:05,360 --> 00:10:14,450
we can then go back to the content and

00:10:08,050 --> 00:10:17,690
we've got another nose here and we'll

00:10:14,450 --> 00:10:25,839
see that this node has got a comment and

00:10:17,690 --> 00:10:29,709
we can do comment so we've now got the

00:10:25,839 --> 00:10:29,709
comment that's moved to the trash

00:10:43,640 --> 00:10:50,440
and go ahead and delete the node as well

00:10:46,310 --> 00:10:50,440
that used to have that comment

00:10:58,889 --> 00:11:04,109
so now we've got all these node entities

00:11:02,309 --> 00:11:07,109
within the trash we can go ahead and

00:11:04,109 --> 00:11:11,600
restore one of those and that will bring

00:11:07,109 --> 00:11:11,600
back the node in its entirety

00:11:18,070 --> 00:11:23,940
and then we can also restore the comment

00:11:20,620 --> 00:11:23,940
they're related to that

00:11:31,350 --> 00:11:36,120
we'll go back to the home page and we

00:11:33,450 --> 00:11:39,390
see the the nodes back just as it was

00:11:36,120 --> 00:11:44,070
before we've got the comment and exactly

00:11:39,390 --> 00:11:45,990
as it was in the first place so we're

00:11:44,070 --> 00:11:48,930
not just doing this on comments note or

00:11:45,990 --> 00:11:51,830
cydia on taxonomy terms so we can go

00:11:48,930 --> 00:11:51,830
into our tag list

00:11:58,790 --> 00:12:05,690
and we're able to just delete a node

00:12:01,270 --> 00:12:07,340
absolute a tag and you'll notice when

00:12:05,690 --> 00:12:09,980
they delete you don't get any

00:12:07,340 --> 00:12:13,160
confirmation we we don't need that

00:12:09,980 --> 00:12:15,800
anymore they're just gone we remove that

00:12:13,160 --> 00:12:18,100
step and they just go straight into your

00:12:15,800 --> 00:12:18,100
trash

00:12:30,360 --> 00:12:37,480
so we can now purge items from the trash

00:12:33,760 --> 00:12:42,310
and this will remove them just like the

00:12:37,480 --> 00:12:43,840
old delete removed them we give quite a

00:12:42,310 --> 00:12:47,760
big warning there because of the

00:12:43,840 --> 00:12:50,620
replication issues if you have your data

00:12:47,760 --> 00:12:53,110
replicated on another machine and you

00:12:50,620 --> 00:12:55,270
replicate it back to this one you may

00:12:53,110 --> 00:12:58,420
get your deleted deleted content back

00:12:55,270 --> 00:13:06,040
and you may get other sort of issues if

00:12:58,420 --> 00:13:13,570
the content is being paged so there

00:13:06,040 --> 00:13:16,840
we've just perched a node as well so

00:13:13,570 --> 00:13:19,200
that's the demo I'm now on the trash

00:13:16,840 --> 00:13:19,200
module

00:13:30,720 --> 00:13:37,709
so just looking at then how how do we

00:13:35,100 --> 00:13:41,839
get this this final goal of moving some

00:13:37,709 --> 00:13:41,839
of this stuff into inter core and

00:13:42,139 --> 00:13:48,360
there's a great quote here and what is

00:13:46,529 --> 00:13:50,370
talking about is just sort of looking at

00:13:48,360 --> 00:13:52,019
what we've got at the moment of what we

00:13:50,370 --> 00:13:55,290
have sort of taking stock of that and

00:13:52,019 --> 00:13:59,129
and moving forward and we've we've

00:13:55,290 --> 00:14:01,680
already got revisions in core the moment

00:13:59,129 --> 00:14:05,009
so we're looking to enable them by

00:14:01,680 --> 00:14:07,139
default and if we can do that in in any

00:14:05,009 --> 00:14:09,660
point Oh that'd be great if there's any

00:14:07,139 --> 00:14:12,029
core committers and we could do with

00:14:09,660 --> 00:14:14,879
this this patch here getting committed

00:14:12,029 --> 00:14:18,810
and then we'd have revisions on by

00:14:14,879 --> 00:14:24,209
default and this this patch enables

00:14:18,810 --> 00:14:27,629
revisions for the standards article and

00:14:24,209 --> 00:14:29,790
and page no types that you've already

00:14:27,629 --> 00:14:31,980
have when you when you install a d8 site

00:14:29,790 --> 00:14:36,470
and then it also enables it by default

00:14:31,980 --> 00:14:42,870
when you create a new node type as well

00:14:36,470 --> 00:14:44,879
so then moving on to 8.1 we can start

00:14:42,870 --> 00:14:47,009
looking at adding some of the other

00:14:44,879 --> 00:14:49,559
items in as well we can look at

00:14:47,009 --> 00:14:52,439
improving the performance of revisions

00:14:49,559 --> 00:14:56,339
and a lot of the stuff in in multi

00:14:52,439 --> 00:14:58,680
version will help move that forward and

00:14:56,339 --> 00:15:01,110
we're looking to add revisions to all

00:14:58,680 --> 00:15:04,170
content entity I types so as you saw in

00:15:01,110 --> 00:15:05,370
the demo we've got not just nodes that

00:15:04,170 --> 00:15:09,029
are revisions we've got all these

00:15:05,370 --> 00:15:11,610
different content entity types will need

00:15:09,029 --> 00:15:15,089
to add a revision hash a parent and a

00:15:11,610 --> 00:15:17,819
tree to to give the full spectrum of the

00:15:15,089 --> 00:15:21,779
revision and we can start looking at the

00:15:17,819 --> 00:15:23,579
data migration as well because the the

00:15:21,779 --> 00:15:25,589
existing content that you'd have in your

00:15:23,579 --> 00:15:30,389
in your 8.0 site will need to be moved

00:15:25,589 --> 00:15:32,309
over to this new model and there's just

00:15:30,389 --> 00:15:34,680
a note here that none of these require

00:15:32,309 --> 00:15:37,160
API changes it's all just sort of data

00:15:34,680 --> 00:15:41,389
changes so it should be a fairly

00:15:37,160 --> 00:15:44,360
straightforward process and another note

00:15:41,389 --> 00:15:46,720
is that the the revision API that we

00:15:44,360 --> 00:15:49,579
have in core only the supports this

00:15:46,720 --> 00:15:52,160
perfectly fine it'sit's we have a very

00:15:49,579 --> 00:15:55,550
very nice generic revision API in court

00:15:52,160 --> 00:15:58,399
and we can just enable it for for

00:15:55,550 --> 00:15:59,899
additional content entity types and I

00:15:58,399 --> 00:16:05,959
think as a content management system

00:15:59,899 --> 00:16:07,939
that makes sense to have in ink or so

00:16:05,959 --> 00:16:11,779
again to the note down below it's not

00:16:07,939 --> 00:16:13,339
really an API change because these are

00:16:11,779 --> 00:16:19,819
things that we already have in court but

00:16:13,339 --> 00:16:24,319
we're not using let's see so moving on

00:16:19,819 --> 00:16:26,899
to 8.2 I think the top point here is is

00:16:24,319 --> 00:16:31,910
quite a big one and removing the ability

00:16:26,899 --> 00:16:35,899
to not have their Vivat of a review so

00:16:31,910 --> 00:16:38,600
every content entity is revision and you

00:16:35,899 --> 00:16:41,329
can turn that off it's not optional it

00:16:38,600 --> 00:16:43,899
is everything is revision then we can

00:16:41,329 --> 00:16:46,970
start looking at putting this delete

00:16:43,899 --> 00:16:50,959
flag in and making a delete a new

00:16:46,970 --> 00:16:52,639
revision we can look at adding purging

00:16:50,959 --> 00:16:55,370
in because obviously you may

00:16:52,639 --> 00:16:57,110
accidentally create a new vitamin

00:16:55,370 --> 00:16:59,480
content and you may need to purge it and

00:16:57,110 --> 00:17:01,910
then we can look at adding the trash

00:16:59,480 --> 00:17:05,089
module in and as I said earlier the

00:17:01,910 --> 00:17:06,530
trash module is very much just DUI for

00:17:05,089 --> 00:17:08,539
all this stuff so we're thinking the

00:17:06,530 --> 00:17:12,110
trash model will stay at a separate

00:17:08,539 --> 00:17:15,589
module and all of the stuff that is now

00:17:12,110 --> 00:17:18,500
the multi version won't be a module in

00:17:15,589 --> 00:17:19,699
core it will just be the revision system

00:17:18,500 --> 00:17:24,970
and we'll go straight into the entity

00:17:19,699 --> 00:17:24,970
API so

00:17:25,059 --> 00:17:31,190
Thanks so to quickly summarize what we

00:17:28,730 --> 00:17:35,539
talked about what we're looking to do

00:17:31,190 --> 00:17:37,190
here is not necessarily only to

00:17:35,539 --> 00:17:38,990
introduce a trash module into core at

00:17:37,190 --> 00:17:43,419
we're doing this fundamentally to

00:17:38,990 --> 00:17:46,009
improve our content management abilities

00:17:43,419 --> 00:17:48,259
the trash module would just be a driver

00:17:46,009 --> 00:17:50,480
an additional feature that sort of will

00:17:48,259 --> 00:17:56,690
demonstrate part of these abilities to

00:17:50,480 --> 00:18:00,669
use it as a concrete example and by

00:17:56,690 --> 00:18:03,440
doing so we improving a user experience

00:18:00,669 --> 00:18:05,509
content editors they do expect to be

00:18:03,440 --> 00:18:07,429
able to work with revisions I believe

00:18:05,509 --> 00:18:09,679
that the trash module can improve some

00:18:07,429 --> 00:18:12,740
user experience to in terms of you know

00:18:09,679 --> 00:18:17,379
the confidence in dealing with Drupal

00:18:12,740 --> 00:18:21,889
and then with these underlying changes

00:18:17,379 --> 00:18:23,869
we do get a comment very solid revision

00:18:21,889 --> 00:18:27,169
API for all this other use cases that

00:18:23,869 --> 00:18:29,990
we've discussed we're closed content

00:18:27,169 --> 00:18:35,269
staging content sharing synchronous

00:18:29,990 --> 00:18:38,379
editing lots of lots of exciting news

00:18:35,269 --> 00:18:41,720
cases so that's a quick summary and

00:18:38,379 --> 00:18:44,710
we've talked about today and I hope

00:18:41,720 --> 00:18:59,869
there are great questions or concerns or

00:18:44,710 --> 00:19:03,169
simply discussion thank you I have a few

00:18:59,869 --> 00:19:06,700
questions I saw there's a different

00:19:03,169 --> 00:19:09,440
interface in the administration of trash

00:19:06,700 --> 00:19:13,639
there's no milk I'd haven't seen any

00:19:09,440 --> 00:19:15,919
multi-select why is it is it a choice is

00:19:13,639 --> 00:19:18,019
it not finished why have a different

00:19:15,919 --> 00:19:25,429
interface there than the standard

00:19:18,019 --> 00:19:29,539
content management so to the point is it

00:19:25,429 --> 00:19:32,350
not finished yes it's not finished it's

00:19:29,539 --> 00:19:39,259
going to be a sort of ever-evolving

00:19:32,350 --> 00:19:43,669
things and the there is a standard table

00:19:39,259 --> 00:19:46,730
look we could use in in core but because

00:19:43,669 --> 00:19:49,159
we're looking at deleted entities rather

00:19:46,730 --> 00:19:52,639
than proper entities it's a little bit

00:19:49,159 --> 00:19:54,799
more complex so when this does go into

00:19:52,639 --> 00:19:57,889
call we could possibly look at patching

00:19:54,799 --> 00:20:01,820
the way these these pages are generated

00:19:57,889 --> 00:20:06,409
my use case would be to purge all

00:20:01,820 --> 00:20:09,109
entities or all content notes from a

00:20:06,409 --> 00:20:13,869
certain age older than a month whatever

00:20:09,109 --> 00:20:16,909
they're manually okay things like that

00:20:13,869 --> 00:20:19,399
currently in seven and the rest there's

00:20:16,909 --> 00:20:22,730
nothing like there's no interface

00:20:19,399 --> 00:20:26,659
anything for for purging ultra-efficient

00:20:22,730 --> 00:20:29,840
and from that from there there's desert

00:20:26,659 --> 00:20:32,869
there was a death often the request to

00:20:29,840 --> 00:20:35,450
be able to pursue and I haven't seen it

00:20:32,869 --> 00:20:38,779
yet any interfacial so that the trash

00:20:35,450 --> 00:20:41,480
module itself just looks at the entity

00:20:38,779 --> 00:20:45,320
as a whole and you can't at the moment

00:20:41,480 --> 00:20:48,769
delete revisions from within an entity

00:20:45,320 --> 00:20:53,350
via the trash module they just will

00:20:48,769 --> 00:20:53,350
purge the whole entity ah

00:20:55,070 --> 00:21:02,090
oh and and two teams earlier point look

00:20:59,029 --> 00:21:04,759
at this as a proof of concept it's you

00:21:02,090 --> 00:21:07,340
know it's by no means the end all be all

00:21:04,759 --> 00:21:09,860
knowledge for me also would appoint just

00:21:07,340 --> 00:21:12,559
a point of discussion has another hardly

00:21:09,860 --> 00:21:15,620
mountain I don't I can't put any more

00:21:12,559 --> 00:21:19,669
money on it either some other questions

00:21:15,620 --> 00:21:22,460
why do you want it in core why not live

00:21:19,669 --> 00:21:28,129
happily ever after in concert it can

00:21:22,460 --> 00:21:31,159
definitely in contribute rasch model

00:21:28,129 --> 00:21:33,519
would be a driver force you know would

00:21:31,159 --> 00:21:37,159
be in service an example as we covered

00:21:33,519 --> 00:21:39,649
the revision part of it it's needed for

00:21:37,159 --> 00:21:41,269
so many other things as well and I

00:21:39,649 --> 00:21:42,980
really do believe that something like a

00:21:41,269 --> 00:21:44,960
trash model even you know it brings a

00:21:42,980 --> 00:21:48,259
lot of value I think to a content

00:21:44,960 --> 00:21:50,870
management system it hasn't really been

00:21:48,259 --> 00:21:52,669
possible to do in an efficient way there

00:21:50,870 --> 00:21:56,090
has been a module for Drupal five Drupal

00:21:52,669 --> 00:21:59,179
6 Drupal 7 but it's not really worked

00:21:56,090 --> 00:22:02,000
and people are sort of given up on it a

00:21:59,179 --> 00:22:03,379
little bit but they they have it in all

00:22:02,000 --> 00:22:06,289
other content management systems

00:22:03,379 --> 00:22:07,970
wordpress joomla there's in desktop so i

00:22:06,289 --> 00:22:09,950
think it's generally a good thing for a

00:22:07,970 --> 00:22:12,259
CMS to have something like something

00:22:09,950 --> 00:22:14,330
like this and then you know at the same

00:22:12,259 --> 00:22:18,080
time we can cater for all these other

00:22:14,330 --> 00:22:20,000
use cases as well so i think i think it

00:22:18,080 --> 00:22:25,159
makes sense for to have it in in core

00:22:20,000 --> 00:22:28,370
for a product like drupal okay and it's

00:22:25,159 --> 00:22:30,289
which bits in the same direction and one

00:22:28,370 --> 00:22:34,279
of the notes was i thinking phase two

00:22:30,289 --> 00:22:36,370
that you want to have that you don't

00:22:34,279 --> 00:22:39,289
don't want to be able to have revisions

00:22:36,370 --> 00:22:42,529
why have not why not have revisions

00:22:39,289 --> 00:22:44,509
isn't that an assumption that everyone

00:22:42,529 --> 00:22:47,299
has a large site and everyone wants to

00:22:44,509 --> 00:22:53,299
wants to don't want to delete a contact

00:22:47,299 --> 00:22:56,570
i think i think it just just similar to

00:22:53,299 --> 00:22:58,870
everyone needs a menu you don't know

00:22:56,570 --> 00:23:02,899
that's not every countertop need to menu

00:22:58,870 --> 00:23:05,029
now I think dealing with with content I

00:23:02,899 --> 00:23:07,810
think there are certain expectations

00:23:05,029 --> 00:23:16,300
that people expect from from

00:23:07,810 --> 00:23:18,610
management system and its it to that to

00:23:16,300 --> 00:23:21,130
the user experience part I think there

00:23:18,610 --> 00:23:23,020
is an expectation there and then to to

00:23:21,130 --> 00:23:24,610
sort of the underlying pieces to the AP

00:23:23,020 --> 00:23:28,020
is there are great simplifications that

00:23:24,610 --> 00:23:31,120
we can do to the API if we assume that

00:23:28,020 --> 00:23:33,460
we do revisions by default always

00:23:31,120 --> 00:23:36,190
because at the moment there's lots of

00:23:33,460 --> 00:23:38,080
conditional logic for entities without

00:23:36,190 --> 00:23:39,760
revisions and this with revisions

00:23:38,080 --> 00:23:41,650
entities with multilingual with

00:23:39,760 --> 00:23:43,570
revisions entities with multilingual

00:23:41,650 --> 00:23:46,150
without revisions we have all of these

00:23:43,570 --> 00:23:48,370
various different storage models that

00:23:46,150 --> 00:23:50,050
there's a lot of complex code in our

00:23:48,370 --> 00:23:52,750
schema handlers and our storage handlers

00:23:50,050 --> 00:23:55,720
can also simplify a lot of logic without

00:23:52,750 --> 00:23:57,220
necessarily bringing any big performance

00:23:55,720 --> 00:24:00,310
implications or things like this i think

00:23:57,220 --> 00:24:03,310
i think there are that certainly some

00:24:00,310 --> 00:24:06,670
some cons to it you know we do building

00:24:03,310 --> 00:24:09,190
an assumption but i think it might be

00:24:06,670 --> 00:24:11,140
worth the trade-off there yeah you and

00:24:09,190 --> 00:24:13,270
it is definitely you know a great point

00:24:11,140 --> 00:24:16,030
of discussion to to carry on because you

00:24:13,270 --> 00:24:17,380
say it's good for user experience but on

00:24:16,030 --> 00:24:19,150
the other hand you're adding more

00:24:17,380 --> 00:24:21,520
complexity to the interface because

00:24:19,150 --> 00:24:24,460
there's logic and their desk there's an

00:24:21,520 --> 00:24:27,880
interface for the revisions etc yeah so

00:24:24,460 --> 00:24:32,580
that's both is also a user experience

00:24:27,880 --> 00:24:32,580
has pros and cons yeah thank you so

00:24:32,670 --> 00:24:40,570
casually my first remark or a question

00:24:37,270 --> 00:24:44,110
or yep was related to this part actually

00:24:40,570 --> 00:24:47,620
I'm not sure I saw it right because it

00:24:44,110 --> 00:24:50,950
was very quick but I noticed that when

00:24:47,620 --> 00:24:52,630
deleting an entity as you mentioned

00:24:50,950 --> 00:24:56,050
there was no confirmation and there was

00:24:52,630 --> 00:24:58,750
just a message on top right now I'm seem

00:24:56,050 --> 00:25:02,920
very improvement Lee in the API is that

00:24:58,750 --> 00:25:05,770
such notification messages often feature

00:25:02,920 --> 00:25:08,200
a link to revert depth operation okay

00:25:05,770 --> 00:25:11,560
and I think that could be a great Jax

00:25:08,200 --> 00:25:14,590
improvement the Buddha dress star sins

00:25:11,560 --> 00:25:18,400
concerns because it would be very easy

00:25:14,590 --> 00:25:19,140
to uh yeah and you do that very good

00:25:18,400 --> 00:25:23,220
situation

00:25:19,140 --> 00:25:25,770
and yeah except from that I was

00:25:23,220 --> 00:25:28,500
wondering just from the technical point

00:25:25,770 --> 00:25:31,560
of view which kind exact of strategy did

00:25:28,500 --> 00:25:35,700
you use to replace a confirmation form

00:25:31,560 --> 00:25:38,670
and actually get rid of them you don't

00:25:35,700 --> 00:25:42,930
want to know okay I suspect there was

00:25:38,670 --> 00:25:45,780
something like that going on okay so do

00:25:42,930 --> 00:25:47,880
you do you think we should at the

00:25:45,780 --> 00:25:49,620
horrible heck that's behind that should

00:25:47,880 --> 00:25:52,770
the be a driver for doing something

00:25:49,620 --> 00:25:56,010
better in core to allow that or there's

00:25:52,770 --> 00:25:59,730
no clear solution that will allowed to

00:25:56,010 --> 00:26:03,750
do that in a better way I if we look at

00:25:59,730 --> 00:26:06,650
moving the entity route if we look at

00:26:03,750 --> 00:26:10,050
putting the entity revisions in to call

00:26:06,650 --> 00:26:11,820
then I we're not going to need these

00:26:10,050 --> 00:26:13,910
confirmation messages because you can

00:26:11,820 --> 00:26:16,440
just restore the content and the

00:26:13,910 --> 00:26:21,240
suggestion you made with the the message

00:26:16,440 --> 00:26:23,820
is a great one and other than thats I

00:26:21,240 --> 00:26:27,900
don't see a big driver towards removing

00:26:23,820 --> 00:26:29,430
the confirmation messages yeah what I

00:26:27,900 --> 00:26:31,770
don't think the controversial for

00:26:29,430 --> 00:26:34,920
example should be able to remove the

00:26:31,770 --> 00:26:37,290
these countries okay so actually I guess

00:26:34,920 --> 00:26:41,150
it was a bit more general because I

00:26:37,290 --> 00:26:46,890
guess you somehow over written the

00:26:41,150 --> 00:26:49,740
continent deforms i did a route

00:26:46,890 --> 00:26:53,580
subscriber to override the route okay

00:26:49,740 --> 00:26:55,590
and all the forms have a similar route

00:26:53,580 --> 00:26:58,590
name with the entity name in it so i

00:26:55,590 --> 00:27:01,230
just looks at the opinion and overrides

00:26:58,590 --> 00:27:02,610
that and then just sends it to a new

00:27:01,230 --> 00:27:04,470
controller since they're called in the

00:27:02,610 --> 00:27:08,580
form it calls a controller and the

00:27:04,470 --> 00:27:11,460
controller does a delete okay and fair

00:27:08,580 --> 00:27:13,230
enough and and building this into core

00:27:11,460 --> 00:27:16,680
obviously we can streamline that

00:27:13,230 --> 00:27:20,910
assumption right yes so and last

00:27:16,680 --> 00:27:23,130
question I guess sorry I shouldn't guess

00:27:20,910 --> 00:27:26,080
I was wondering whether you took a

00:27:23,130 --> 00:27:29,140
multilingual an integral account when

00:27:26,080 --> 00:27:30,970
I guess since the the this is still

00:27:29,140 --> 00:27:35,559
working progress this was not top

00:27:30,970 --> 00:27:37,600
priority right the traffic self there

00:27:35,559 --> 00:27:42,159
was no multilingual taken into account

00:27:37,600 --> 00:27:44,590
oh but for multivision yeah multi

00:27:42,159 --> 00:27:47,470
version supports revisions exactly the

00:27:44,590 --> 00:27:49,510
same way that chord us for multilingual

00:27:47,470 --> 00:27:52,240
entities with revisions so there's no

00:27:49,510 --> 00:27:55,929
real change there so multilingual is

00:27:52,240 --> 00:28:00,130
supported from that perspective to your

00:27:55,929 --> 00:28:02,110
point might be a very good idea to look

00:28:00,130 --> 00:28:05,220
at you know providing perhaps user

00:28:02,110 --> 00:28:09,130
interface to to archive or trash

00:28:05,220 --> 00:28:11,799
translations individually yeah because

00:28:09,130 --> 00:28:14,019
we already have a couple of open issues

00:28:11,799 --> 00:28:16,799
about improving the you accent around

00:28:14,019 --> 00:28:20,409
that area in corso was supposing that

00:28:16,799 --> 00:28:22,269
wasn't easy that contributed work in

00:28:20,409 --> 00:28:26,320
progress was already in doing what Scott

00:28:22,269 --> 00:28:31,720
what core is not doing action okay thank

00:28:26,320 --> 00:28:35,110
you you said something about you that

00:28:31,720 --> 00:28:37,690
you did compacting to avoid all

00:28:35,110 --> 00:28:40,990
provisions taking up too much space what

00:28:37,690 --> 00:28:43,230
exactly are you doing there so so the

00:28:40,990 --> 00:28:45,909
concept hasn't been implemented yet and

00:28:43,230 --> 00:28:47,289
we still thinking about good ways of

00:28:45,909 --> 00:28:48,639
doing it there are several different

00:28:47,289 --> 00:28:50,830
strategies that you could use it

00:28:48,639 --> 00:28:54,130
probably makes sense to make that

00:28:50,830 --> 00:28:57,429
pluggable there are other systems that

00:28:54,130 --> 00:28:59,679
have very similar revision storage

00:28:57,429 --> 00:29:01,570
solution stay they provide an option

00:28:59,679 --> 00:29:04,419
that you know compact or remove

00:29:01,570 --> 00:29:06,010
revisions that's older than you know

00:29:04,419 --> 00:29:08,220
just keep the 10 last revisions

00:29:06,010 --> 00:29:11,350
essentially you could do things like

00:29:08,220 --> 00:29:14,529
compact remove every fourth revision

00:29:11,350 --> 00:29:18,460
that is older than something and however

00:29:14,529 --> 00:29:22,210
what's needed here in order to take

00:29:18,460 --> 00:29:24,610
benefit of this crap storage mythology

00:29:22,210 --> 00:29:28,330
is actually to keep some trivial

00:29:24,610 --> 00:29:31,720
metadata still about every revision so

00:29:28,330 --> 00:29:33,519
that you still have a revision tree so

00:29:31,720 --> 00:29:35,799
that when revisions come from other

00:29:33,519 --> 00:29:38,279
sources either being replicated from a

00:29:35,799 --> 00:29:40,289
you know network sharing site or from

00:29:38,279 --> 00:29:42,059
editorial staging environment we can

00:29:40,289 --> 00:29:43,919
actually see where I visions come from

00:29:42,059 --> 00:29:45,719
we have a relation tree and you can you

00:29:43,919 --> 00:29:47,219
could do things like conflict detection

00:29:45,719 --> 00:29:50,669
and so on so there needs to be some

00:29:47,219 --> 00:29:52,469
basic metadata still even after the

00:29:50,669 --> 00:29:54,330
compaction state so this is still

00:29:52,469 --> 00:29:56,429
something that we that we solve within

00:29:54,330 --> 00:29:59,070
the contribution I have you considered

00:29:56,429 --> 00:30:01,649
looking into you know more like getting

00:29:59,070 --> 00:30:04,289
my storage module not necessarily using

00:30:01,649 --> 00:30:06,239
it but but the thing is you know that

00:30:04,289 --> 00:30:07,799
when get when you make revisions and get

00:30:06,239 --> 00:30:09,960
it actually only stores the changes

00:30:07,799 --> 00:30:12,599
between the two whereas Drupal currently

00:30:09,960 --> 00:30:16,549
stores a full copy of after you know the

00:30:12,599 --> 00:30:19,109
full text for each revision the the

00:30:16,549 --> 00:30:21,419
storage model that we're using is

00:30:19,109 --> 00:30:23,549
similar to get in the sense that with

00:30:21,419 --> 00:30:26,339
three things everything has a parent

00:30:23,549 --> 00:30:29,129
very much like it and you could actually

00:30:26,339 --> 00:30:30,960
build revision branches of trees so

00:30:29,129 --> 00:30:35,190
that's that's very similar to your point

00:30:30,960 --> 00:30:37,739
with the the differences we have thought

00:30:35,190 --> 00:30:39,629
about it it would require some quite

00:30:37,739 --> 00:30:44,339
significant changes to the entity API

00:30:39,629 --> 00:30:48,349
and how we load and you know content we

00:30:44,339 --> 00:30:54,269
took the easy way out this time rabbits

00:30:48,349 --> 00:30:57,509
might be worth considering Thanks hiya

00:30:54,269 --> 00:31:02,759
so I've got a question about the UI of

00:30:57,509 --> 00:31:04,559
trash and it goes back to where we saw

00:31:02,759 --> 00:31:09,450
that the trash cans been around for a

00:31:04,559 --> 00:31:11,279
long time on the desktop so but having

00:31:09,450 --> 00:31:14,609
your trash bins is a bit of a departure

00:31:11,279 --> 00:31:16,739
from one trash can that has everything

00:31:14,609 --> 00:31:19,080
in it if I throw out a movie and a

00:31:16,739 --> 00:31:21,960
folder in a word document they all end

00:31:19,080 --> 00:31:23,489
up in the same trash and I'm going to

00:31:21,960 --> 00:31:27,960
take a guess that those are built with

00:31:23,489 --> 00:31:31,639
views or no no nope no they're not views

00:31:27,960 --> 00:31:33,929
okay they so probably will be rightly

00:31:31,639 --> 00:31:35,609
will you also they need to cater for the

00:31:33,929 --> 00:31:38,190
people that don't have used installed so

00:31:35,609 --> 00:31:41,099
that was the first step of the non views

00:31:38,190 --> 00:31:43,469
vision right okay so i think my question

00:31:41,099 --> 00:31:46,139
is then is it can be possible to have a

00:31:43,469 --> 00:31:48,929
so unified trash bin so that people

00:31:46,139 --> 00:31:52,200
won't need to know whether something was

00:31:48,929 --> 00:31:56,880
a node or a block when they go and try

00:31:52,200 --> 00:32:01,769
find it the issue is that there is a no

00:31:56,880 --> 00:32:06,320
good way in the NC query to to query

00:32:01,769 --> 00:32:10,230
multiple varieties of the Pope said yeah

00:32:06,320 --> 00:32:11,639
so yeah we pretty much have to split

00:32:10,230 --> 00:32:15,990
them out and the other issue is that

00:32:11,639 --> 00:32:18,000
each entity is slightly different so for

00:32:15,990 --> 00:32:20,909
example on a taxonomy term you don't

00:32:18,000 --> 00:32:24,659
have a creative date and on a node you

00:32:20,909 --> 00:32:29,010
do so yeah we need to cater for those

00:32:24,659 --> 00:32:33,870
kind of use cases as well but is it

00:32:29,010 --> 00:32:42,929
something to look at and iterate on okay

00:32:33,870 --> 00:32:45,990
thanks hi yeah I have a question

00:32:42,929 --> 00:32:48,389
regarding the revision and the revision

00:32:45,990 --> 00:32:50,340
3 you said today they can come from

00:32:48,389 --> 00:32:52,470
different places but they could also

00:32:50,340 --> 00:32:56,610
come from like a workflow on the same

00:32:52,470 --> 00:32:58,799
site so like different people having

00:32:56,610 --> 00:33:02,330
making different revisions with the same

00:32:58,799 --> 00:33:07,039
parent what about merging these

00:33:02,330 --> 00:33:09,570
revisions back together or like say

00:33:07,039 --> 00:33:12,029
someone edits the title and someone

00:33:09,570 --> 00:33:15,690
edits the tag and then you want to have

00:33:12,029 --> 00:33:19,950
both of them and not select one that

00:33:15,690 --> 00:33:23,460
wins let's say so merging is a very very

00:33:19,950 --> 00:33:25,019
complex topic of so so what we've done

00:33:23,460 --> 00:33:26,549
at the moment is that we have the

00:33:25,019 --> 00:33:30,809
ability to detect where you have

00:33:26,549 --> 00:33:35,309
conflicts and we we are looking at ways

00:33:30,809 --> 00:33:38,309
to make a merge or conflict resolution

00:33:35,309 --> 00:33:40,440
API pluggable so that you could you know

00:33:38,309 --> 00:33:42,870
pick and choose different merging

00:33:40,440 --> 00:33:44,460
strategy because every company every

00:33:42,870 --> 00:33:49,740
sight every organization is going to

00:33:44,460 --> 00:33:51,630
want to have it different yeah so you

00:33:49,740 --> 00:33:54,419
know providing a plug ability there it's

00:33:51,630 --> 00:33:56,730
probably a good idea you could then

00:33:54,419 --> 00:33:59,500
write a plug-in that uses the git merge

00:33:56,730 --> 00:34:02,620
algorithm you can

00:33:59,500 --> 00:34:04,780
use a lot simpler merging algorithms to

00:34:02,620 --> 00:34:06,730
I don't think that there's one solution

00:34:04,780 --> 00:34:08,679
that but certainly making a pluggable

00:34:06,730 --> 00:34:11,379
and it's certainly something that needs

00:34:08,679 --> 00:34:14,740
to make it in to the to the module

00:34:11,379 --> 00:34:17,230
certainly in contributing core but yeah

00:34:14,740 --> 00:34:19,030
I mean the plug abilities is of course a

00:34:17,230 --> 00:34:22,030
very good session but like the first

00:34:19,030 --> 00:34:24,490
step to be even able to do that is to

00:34:22,030 --> 00:34:27,070
have like several parents like you you

00:34:24,490 --> 00:34:29,290
have like the revision parent but you

00:34:27,070 --> 00:34:31,480
need to also have several to like graph

00:34:29,290 --> 00:34:34,120
the tree then because if you if you

00:34:31,480 --> 00:34:36,250
merge two revisions then you need to

00:34:34,120 --> 00:34:38,159
know that you did that otherwise you

00:34:36,250 --> 00:34:41,889
have a new one and you base it off

00:34:38,159 --> 00:34:45,190
either one and then you know yeah so so

00:34:41,889 --> 00:34:47,290
in I think a merge should always be a

00:34:45,190 --> 00:34:50,710
new revision of course the earth and

00:34:47,290 --> 00:34:55,570
very much like the get does it and and

00:34:50,710 --> 00:35:01,720
that's certainly supported so you can

00:34:55,570 --> 00:35:05,500
have a revision with several parents a a

00:35:01,720 --> 00:35:09,520
revision can have so your your merge the

00:35:05,500 --> 00:35:11,710
fix would be a child of of a parent and

00:35:09,520 --> 00:35:13,510
that parent will have that parent will

00:35:11,710 --> 00:35:16,270
have multiple shades right some some of

00:35:13,510 --> 00:35:19,690
them being conflicts and another one

00:35:16,270 --> 00:35:24,160
being the solution so I'm not sure you

00:35:19,690 --> 00:35:26,110
need multiple parents because a parent

00:35:24,160 --> 00:35:27,910
will have multiple children instead i

00:35:26,110 --> 00:35:29,680
think that's that's what needed I'm not

00:35:27,910 --> 00:35:32,920
sure I follow your know because if you

00:35:29,680 --> 00:35:36,910
have several parents and then you if do

00:35:32,920 --> 00:35:39,160
you only branch the trees and then the

00:35:36,910 --> 00:35:43,600
way you select the version that's like

00:35:39,160 --> 00:35:45,280
the one that wins you go along this tree

00:35:43,600 --> 00:35:47,530
and then you say okay this one is the

00:35:45,280 --> 00:35:49,810
newest and this one like follows the

00:35:47,530 --> 00:35:53,440
other newest I think and so if you make

00:35:49,810 --> 00:35:56,110
a like a new revision on in one of the

00:35:53,440 --> 00:35:59,560
branches and then the other revision can

00:35:56,110 --> 00:36:03,160
still like win or you know you you need

00:35:59,560 --> 00:36:04,990
to be able to resolve the the tree in in

00:36:03,160 --> 00:36:07,180
the same way it basically does when when

00:36:04,990 --> 00:36:11,320
you make a merge commits that has

00:36:07,180 --> 00:36:13,130
several other parent I see yeah yeah or

00:36:11,320 --> 00:36:16,519
it's a good point

00:36:13,130 --> 00:36:19,460
I think yeah let's let's sit down and

00:36:16,519 --> 00:36:21,289
discuss it okay and I'm not familiar

00:36:19,460 --> 00:36:26,809
enough with like all the technique yeah

00:36:21,289 --> 00:36:29,869
I mentioned earlier merging and conflict

00:36:26,809 --> 00:36:32,000
resolution yeah a very complex top

00:36:29,869 --> 00:36:33,890
topics I think it definitely needs more

00:36:32,000 --> 00:36:35,480
thought I think it's you know great

00:36:33,890 --> 00:36:41,150
points they bringing up so so let's

00:36:35,480 --> 00:36:42,880
discuss it for sure thanks so are there

00:36:41,150 --> 00:36:45,710
any considerations to have around

00:36:42,880 --> 00:36:48,890
references like auntie your friends when

00:36:45,710 --> 00:36:50,359
you delete see you delete a node that

00:36:48,890 --> 00:36:53,269
has references or the other way around

00:36:50,359 --> 00:36:57,859
you the reference or when you purge a

00:36:53,269 --> 00:36:59,690
reference what is there anything special

00:36:57,859 --> 00:37:01,430
did you have to think about here and in

00:36:59,690 --> 00:37:03,950
your particular use case or does it work

00:37:01,430 --> 00:37:06,920
the same so we haven't changed anything

00:37:03,950 --> 00:37:10,519
of how it currently works in core in

00:37:06,920 --> 00:37:13,430
that aspect so I don't believe core

00:37:10,519 --> 00:37:16,279
cleans up right if there's a reference

00:37:13,430 --> 00:37:18,079
to a deleted entity core doesn't do any

00:37:16,279 --> 00:37:22,099
cleaning up there and we have not

00:37:18,079 --> 00:37:24,200
changed that we have not had to change

00:37:22,099 --> 00:37:26,059
that either well at least we haven't run

00:37:24,200 --> 00:37:29,740
into a use case yet there might be some

00:37:26,059 --> 00:37:33,200
and then we definitely need to tackle it

00:37:29,740 --> 00:37:34,730
probably what's needed just as a related

00:37:33,200 --> 00:37:37,099
thing here probably what's needed along

00:37:34,730 --> 00:37:40,359
with a more elaborate relation API is

00:37:37,099 --> 00:37:43,579
also the having the ability to reference

00:37:40,359 --> 00:37:45,710
certain revisions because at the moment

00:37:43,579 --> 00:37:47,839
the only when you put in an entity

00:37:45,710 --> 00:37:51,769
reference the only referencing the

00:37:47,839 --> 00:37:53,960
default duration genitalia we probably

00:37:51,769 --> 00:37:57,380
need the support to reference certain

00:37:53,960 --> 00:37:59,180
revisions okay group entities and into

00:37:57,380 --> 00:38:01,130
the same provision if you make like a

00:37:59,180 --> 00:38:06,769
few collections for example is a good

00:38:01,130 --> 00:38:08,779
use case or paragraphs where an if you

00:38:06,769 --> 00:38:10,190
make a change to a node you probably

00:38:08,779 --> 00:38:11,480
want to keep the revision of that

00:38:10,190 --> 00:38:16,130
reference together because you were

00:38:11,480 --> 00:38:17,450
looking at at the same form yeah and so

00:38:16,130 --> 00:38:20,599
that in particular is not something that

00:38:17,450 --> 00:38:22,069
we looked at yet and I do think you know

00:38:20,599 --> 00:38:24,650
we're definitely to think harder about

00:38:22,069 --> 00:38:26,150
how we do relations because when when we

00:38:24,650 --> 00:38:27,950
more elaborate with this these use cases

00:38:26,150 --> 00:38:31,910
exactly going to come up so we need

00:38:27,950 --> 00:38:33,829
solutions for them for sure and I i know

00:38:31,910 --> 00:38:37,220
i think that there are working contrib

00:38:33,829 --> 00:38:39,859
to look at this I think am Bray you've

00:38:37,220 --> 00:38:44,349
been working on references to revisions

00:38:39,859 --> 00:38:44,349
is that true am I getting that wrong

00:38:45,010 --> 00:38:49,369
okay okay so that there is working

00:38:47,299 --> 00:38:50,930
country to to start exploring these

00:38:49,369 --> 00:38:57,500
things I think it needs more exploration

00:38:50,930 --> 00:38:59,809
for sure hmm okay I was wondering do you

00:38:57,500 --> 00:39:03,500
support and contribute to tease out of

00:38:59,809 --> 00:39:06,650
the box or didn't have the concert

00:39:03,500 --> 00:39:08,329
modules need to do something or how's

00:39:06,650 --> 00:39:10,339
that you were talking about core

00:39:08,329 --> 00:39:12,710
entities but if you're looking at

00:39:10,339 --> 00:39:16,400
commercial commercial all the trill on

00:39:12,710 --> 00:39:18,440
order can be really good but does it

00:39:16,400 --> 00:39:20,990
come out of the box or should be in

00:39:18,440 --> 00:39:22,730
commerce or should be in your module so

00:39:20,990 --> 00:39:26,510
the way that it currently works is that

00:39:22,730 --> 00:39:28,849
we iterate over all entity content

00:39:26,510 --> 00:39:32,119
entity types and we enable relations for

00:39:28,849 --> 00:39:36,099
it so this would include even contrib

00:39:32,119 --> 00:39:39,829
entity types and it works great in court

00:39:36,099 --> 00:39:42,260
the the entity AP and duration API has

00:39:39,829 --> 00:39:46,339
perfect support for switching around the

00:39:42,260 --> 00:39:48,349
storage handlers and we multi version

00:39:46,339 --> 00:39:50,539
needs to provide the sort of migration

00:39:48,349 --> 00:39:51,920
part of it the data migration so we

00:39:50,539 --> 00:39:54,859
still need to explore how this actually

00:39:51,920 --> 00:39:57,500
will work with contrib we need to do

00:39:54,859 --> 00:40:01,309
more testing there and perhaps have test

00:39:57,500 --> 00:40:03,039
cases in in the country multi version

00:40:01,309 --> 00:40:07,279
module where we actually test this

00:40:03,039 --> 00:40:09,230
properly because yeah it's a little bit

00:40:07,279 --> 00:40:11,510
unknown how you know the quality of

00:40:09,230 --> 00:40:12,650
contrib how that will work and what the

00:40:11,510 --> 00:40:14,119
impact will be if there are built-in

00:40:12,650 --> 00:40:16,160
assumptions that it shouldn't be

00:40:14,119 --> 00:40:19,549
relations for some reason you know that

00:40:16,160 --> 00:40:22,609
could certainly be problematic so you

00:40:19,549 --> 00:40:23,990
know as Drupal 8 adoption gross I think

00:40:22,609 --> 00:40:26,359
that we we need to explore this and we

00:40:23,990 --> 00:40:28,400
need to learn this as we go and other

00:40:26,359 --> 00:40:30,710
question was how about the security

00:40:28,400 --> 00:40:32,240
normally something is leading you know

00:40:30,710 --> 00:40:34,880
for sure it doesn't show up on the

00:40:32,240 --> 00:40:38,390
website how you make sure a delete

00:40:34,880 --> 00:40:42,330
content is not shown to a user

00:40:38,390 --> 00:40:45,540
so it's actually quite trivial to to

00:40:42,330 --> 00:40:47,730
make sure that a archived or or deleted

00:40:45,540 --> 00:40:49,200
and today it's not loaded because what

00:40:47,730 --> 00:40:52,230
we do is that we change the storage

00:40:49,200 --> 00:40:54,840
handler and the storage handler has has

00:40:52,230 --> 00:40:58,590
a full power of you know how entities

00:40:54,840 --> 00:41:03,930
are loaded or shown at the moment all

00:40:58,590 --> 00:41:07,080
core tests actually pass with this with

00:41:03,930 --> 00:41:11,070
these changes made so we don't see any

00:41:07,080 --> 00:41:14,520
security concerns at the moment that all

00:41:11,070 --> 00:41:21,000
however security concerns and in regards

00:41:14,520 --> 00:41:25,170
to how how how you use the the the

00:41:21,000 --> 00:41:27,990
functionality right so deleting or

00:41:25,170 --> 00:41:30,530
purging and an entity in one environment

00:41:27,990 --> 00:41:36,150
if you purge completely remove it from

00:41:30,530 --> 00:41:37,260
from your site let's say stage one let's

00:41:36,150 --> 00:41:38,880
say they have multiple stage

00:41:37,260 --> 00:41:40,980
environments at the total station moment

00:41:38,880 --> 00:41:43,950
if you purge an entity from stage one

00:41:40,980 --> 00:41:47,790
that deletion will not be propagated

00:41:43,950 --> 00:41:49,740
right so if you have you know legal

00:41:47,790 --> 00:41:51,390
issues with something or security issues

00:41:49,740 --> 00:41:53,730
with node you need to actually make sure

00:41:51,390 --> 00:41:55,140
that you only delete it or archive it so

00:41:53,730 --> 00:41:56,400
that that can propagate through your

00:41:55,140 --> 00:41:59,310
environments because if you purge it

00:41:56,400 --> 00:42:02,070
that will not propagate you know if you

00:41:59,310 --> 00:42:04,290
do a replication so we need there some

00:42:02,070 --> 00:42:06,690
education so to speak to to be done to

00:42:04,290 --> 00:42:10,440
use as they use this in a in a multi

00:42:06,690 --> 00:42:12,330
environment situation where this is one

00:42:10,440 --> 00:42:14,400
of the use cases where actually will be

00:42:12,330 --> 00:42:21,420
used for so now we need to take that

00:42:14,400 --> 00:42:23,880
into consideration thank you more

00:42:21,420 --> 00:42:26,410
questions what do you see is like the

00:42:23,880 --> 00:42:29,020
risks and the challenges

00:42:26,410 --> 00:42:32,500
or actually there's a pretty obvious use

00:42:29,020 --> 00:42:36,160
case so to repeat so to repeat the big

00:42:32,500 --> 00:42:37,930
question what do you see as the risks

00:42:36,160 --> 00:42:42,369
and the challenges to get this into

00:42:37,930 --> 00:42:43,630
court obviously getting the challenge to

00:42:42,369 --> 00:42:45,730
start with that is obviously to get

00:42:43,630 --> 00:42:47,589
people's by in that you know revisions

00:42:45,730 --> 00:42:51,339
is something that we need as a content

00:42:47,589 --> 00:42:54,130
management system and that's going to be

00:42:51,339 --> 00:42:56,349
a big challenge even turning on

00:42:54,130 --> 00:42:58,869
revisions for nodes by default have

00:42:56,349 --> 00:43:00,569
spurred quite a big tree of discussions

00:42:58,869 --> 00:43:04,720
so that's going to be a big challenge

00:43:00,569 --> 00:43:11,680
you know getting people to align around

00:43:04,720 --> 00:43:14,410
this risks obviously we we don't want to

00:43:11,680 --> 00:43:16,420
build in assumptions too many

00:43:14,410 --> 00:43:17,950
assumptions in the core there's a risk

00:43:16,420 --> 00:43:19,869
that we building too many assumptions

00:43:17,950 --> 00:43:21,520
for sure there was a question earlier on

00:43:19,869 --> 00:43:23,440
raised around that that's definitely

00:43:21,520 --> 00:43:25,299
risk might turn out to be the wrong

00:43:23,440 --> 00:43:27,309
assumptions down the line so that's

00:43:25,299 --> 00:43:28,359
definitely a risk and and this is

00:43:27,309 --> 00:43:29,799
something that we need to eat rate down

00:43:28,359 --> 00:43:32,710
and discuss and make sure that you know

00:43:29,799 --> 00:43:34,000
would you take the right decisions I'm

00:43:32,710 --> 00:43:40,000
not sure if the answers your question

00:43:34,000 --> 00:43:44,230
but that's my take on it I think I guys

00:43:40,000 --> 00:43:46,210
looks brilliant just in terms of the

00:43:44,230 --> 00:43:47,890
naming being used to see it as a Content

00:43:46,210 --> 00:43:49,470
strategist I write a blog post later on

00:43:47,890 --> 00:43:51,400
and said group leaders full of crap and

00:43:49,470 --> 00:43:53,410
that's gonna be nice and funny gets

00:43:51,400 --> 00:43:54,970
tweets as a business development officer

00:43:53,410 --> 00:43:57,339
next week I'm gonna write a atender

00:43:54,970 --> 00:43:58,240
proposal for a government contract and I

00:43:57,339 --> 00:44:02,020
don't want to say drew players for the

00:43:58,240 --> 00:44:04,299
crap so what's the what's the nice name

00:44:02,020 --> 00:44:06,099
let's say for like what we are we

00:44:04,299 --> 00:44:08,470
talking trash are we talking crap are we

00:44:06,099 --> 00:44:10,119
talking multi version of two what's the

00:44:08,470 --> 00:44:12,190
business name let's say I think when

00:44:10,119 --> 00:44:15,039
Wendy ventilations installation thanks a

00:44:12,190 --> 00:44:17,950
very good point and you know valid

00:44:15,039 --> 00:44:22,089
concern for sure I think that when when

00:44:17,950 --> 00:44:25,539
it makes into core and there won't be it

00:44:22,089 --> 00:44:26,770
will be an elaborate revision API so you

00:44:25,539 --> 00:44:29,289
know I think there perhaps we should

00:44:26,770 --> 00:44:32,440
talk about an essay a more elaborate a

00:44:29,289 --> 00:44:36,250
more fully featured revision API simply

00:44:32,440 --> 00:44:38,890
and i think that the trash terminology

00:44:36,250 --> 00:44:39,109
exists almost everywhere existing you

00:44:38,890 --> 00:44:41,480
know

00:44:39,109 --> 00:44:47,380
your desktop computers sure windows

00:44:41,480 --> 00:44:52,519
names it a recycle bin perhaps what I

00:44:47,380 --> 00:44:54,890
really okay and and you both wordpress

00:44:52,519 --> 00:44:58,670
and joomla it uses the trash name for

00:44:54,890 --> 00:45:00,140
the trash bin I think to your point crap

00:44:58,670 --> 00:45:01,819
is probably something you know we should

00:45:00,140 --> 00:45:04,460
just call it revision like you know an

00:45:01,819 --> 00:45:11,180
elaborate revision API and once it gets

00:45:04,460 --> 00:45:14,359
the core you know yeah so a question

00:45:11,180 --> 00:45:16,910
about the complete version of entities

00:45:14,359 --> 00:45:20,690
you were mentioning earlier so if I

00:45:16,910 --> 00:45:24,859
understood it right a full purge will be

00:45:20,690 --> 00:45:27,259
propagated through systems right a perch

00:45:24,859 --> 00:45:29,299
will not be propagated because then the

00:45:27,259 --> 00:45:34,400
entity is gone and there's nothing that

00:45:29,299 --> 00:45:36,980
you can propagate so a delete or what we

00:45:34,400 --> 00:45:38,420
should call an archive perhaps that will

00:45:36,980 --> 00:45:40,609
be able to propagate because that's just

00:45:38,420 --> 00:45:42,920
a new revision they propagate through

00:45:40,609 --> 00:45:45,230
your editorial environments or a staging

00:45:42,920 --> 00:45:47,299
environments or your multiple production

00:45:45,230 --> 00:45:50,450
environments well what am I okay so my

00:45:47,299 --> 00:45:54,019
question was was this a technical

00:45:50,450 --> 00:45:56,869
limitation that you hit or was the made

00:45:54,019 --> 00:45:58,789
on purpose I'd say it's it's it's

00:45:56,869 --> 00:46:01,509
definitely made on purpose okay there

00:45:58,789 --> 00:46:04,249
are definitely use cases for for purging

00:46:01,509 --> 00:46:06,049
you know if let's say in your if you

00:46:04,249 --> 00:46:08,569
play around in a staging environment and

00:46:06,049 --> 00:46:10,339
you you know do you do some hello world

00:46:08,569 --> 00:46:11,900
testing things you know you do want to

00:46:10,339 --> 00:46:15,230
purge that you do want that to be gone

00:46:11,900 --> 00:46:17,720
forever because it's just testing so

00:46:15,230 --> 00:46:20,089
it's it's in conscious decision decision

00:46:17,720 --> 00:46:24,349
okay because I was wondering you can

00:46:20,089 --> 00:46:28,640
always and to take your example you can

00:46:24,349 --> 00:46:30,650
always not migrate a deletion for an

00:46:28,640 --> 00:46:32,390
entity a test entity that is not

00:46:30,650 --> 00:46:35,420
available in the production environment

00:46:32,390 --> 00:46:38,859
but what I was wondering would it make

00:46:35,420 --> 00:46:42,349
sense to have a final delete purged

00:46:38,859 --> 00:46:44,599
revision that once propagated fully

00:46:42,349 --> 00:46:46,880
deletes the entity in the other

00:46:44,599 --> 00:46:48,900
environment and maybe deletes the entity

00:46:46,880 --> 00:46:51,780
also in the environment

00:46:48,900 --> 00:46:53,640
being migrated I think that's a very

00:46:51,780 --> 00:46:56,820
good point and it would address some of

00:46:53,640 --> 00:46:58,350
the security implications of if you have

00:46:56,820 --> 00:47:00,120
something that needs to be taken away

00:46:58,350 --> 00:47:02,490
for security reasons or something like

00:47:00,120 --> 00:47:06,330
this you need you want to have a way to

00:47:02,490 --> 00:47:08,880
being able to securely perch across your

00:47:06,330 --> 00:47:10,830
whole network or your whole array of

00:47:08,880 --> 00:47:12,540
staging environments for instance so

00:47:10,830 --> 00:47:14,310
that that's a very good feature where

00:47:12,540 --> 00:47:16,380
then lives in core on country not sure

00:47:14,310 --> 00:47:34,680
that's a very good point actually and

00:47:16,380 --> 00:47:36,540
probably something yeah so so the way

00:47:34,680 --> 00:47:39,180
that we have it at the moment is that

00:47:36,540 --> 00:47:41,400
the replication process is a separate

00:47:39,180 --> 00:47:43,980
drush command so you would need to set

00:47:41,400 --> 00:47:46,020
up your business logic or you know do

00:47:43,980 --> 00:47:47,490
your replication how you choose the

00:47:46,020 --> 00:47:51,440
environments by default they actually

00:47:47,490 --> 00:47:53,820
don't know about each other yeah yeah

00:47:51,440 --> 00:47:55,800
yeah it could automatically sort of

00:47:53,820 --> 00:48:00,000
propagate yeah that is the problem

00:47:55,800 --> 00:48:02,010
indeed another question yeah question I

00:48:00,000 --> 00:48:05,040
something occurred to me when we talked

00:48:02,010 --> 00:48:07,770
about the entity references earlier in

00:48:05,040 --> 00:48:10,350
the earlier question and so I'm going to

00:48:07,770 --> 00:48:16,250
ask is it possible or do you envisage

00:48:10,350 --> 00:48:18,240
having a way to customize or or respect

00:48:16,250 --> 00:48:22,920
constraints that are in the content

00:48:18,240 --> 00:48:24,390
model so let's say you've got some kind

00:48:22,920 --> 00:48:26,610
of reference it could be you know node

00:48:24,390 --> 00:48:31,080
references a user or something like that

00:48:26,610 --> 00:48:32,910
but you have a mandatory required entity

00:48:31,080 --> 00:48:36,570
reference and then somebody comes along

00:48:32,910 --> 00:48:39,060
and tries to delete something which is

00:48:36,570 --> 00:48:42,570
required is kind of a dependency in your

00:48:39,060 --> 00:48:44,910
content model and would you would you

00:48:42,570 --> 00:48:48,660
say no that can't be deleted because

00:48:44,910 --> 00:48:51,390
some other entity has it as a mandatory

00:48:48,660 --> 00:48:55,380
reference or would you permit that and

00:48:51,390 --> 00:48:57,300
then sort of make it of what would

00:48:55,380 --> 00:49:01,950
happen to the entity which which is now

00:48:57,300 --> 00:49:02,710
lost its it's mandatory reference would

00:49:01,950 --> 00:49:06,150
it how would it be

00:49:02,710 --> 00:49:10,570
indicated there any thoughts on that

00:49:06,150 --> 00:49:13,270
it's I think it depends hugely on on you

00:49:10,570 --> 00:49:17,020
know specific circumstances around

00:49:13,270 --> 00:49:19,540
around the use case and it's certainly

00:49:17,020 --> 00:49:23,260
possible to implement those types of

00:49:19,540 --> 00:49:24,760
restrictions there are multiple entry

00:49:23,260 --> 00:49:27,010
points where you could go in and all

00:49:24,760 --> 00:49:32,109
turn do that whether it belongs in court

00:49:27,010 --> 00:49:35,260
or not not sure my thoughts are over in

00:49:32,109 --> 00:49:37,210
general sounds like something useful I

00:49:35,260 --> 00:49:39,040
can see that you know you have the

00:49:37,210 --> 00:49:42,220
situation where you have dependencies

00:49:39,040 --> 00:49:45,970
and you know you want to sort of

00:49:42,220 --> 00:49:47,680
implement those constraints I I think I

00:49:45,970 --> 00:49:50,260
need to discuss it in more detail to

00:49:47,680 --> 00:49:51,849
understand exactly why or how things

00:49:50,260 --> 00:49:53,859
would work around it to answer that

00:49:51,849 --> 00:49:57,970
question for me I guess okay thanks so

00:49:53,859 --> 00:50:00,940
that was kind of related was would you

00:49:57,970 --> 00:50:03,220
see this as being part of the revision

00:50:00,940 --> 00:50:06,580
API or would it be farmed out to another

00:50:03,220 --> 00:50:08,770
system right rules or it sounds like a

00:50:06,580 --> 00:50:10,270
quite specific use case so I would

00:50:08,770 --> 00:50:12,900
probably say they would be farmed out to

00:50:10,270 --> 00:50:24,430
some sort of country module okay yeah

00:50:12,900 --> 00:50:27,430
thanks thanks I wouldn't i work with

00:50:24,430 --> 00:50:29,740
Andrew so I back him up I wouldn't

00:50:27,430 --> 00:50:31,540
consider a very specific use case

00:50:29,740 --> 00:50:33,310
because I think every one of us has a

00:50:31,540 --> 00:50:35,560
website that says here's our clients and

00:50:33,310 --> 00:50:37,570
every client has a referenced here's a

00:50:35,560 --> 00:50:39,490
portfolio piece I've done from that and

00:50:37,570 --> 00:50:41,200
that's probably one hundred percent of

00:50:39,490 --> 00:50:43,450
the people in the room and I think it's

00:50:41,200 --> 00:50:45,520
it's it's a use case that certainly will

00:50:43,450 --> 00:50:51,130
need to be solved sooner rather than

00:50:45,520 --> 00:50:52,690
later what no that's the quest more

00:50:51,130 --> 00:50:55,210
question back to you what would be the

00:50:52,690 --> 00:50:58,030
Drupal 7 solution what what's the

00:50:55,210 --> 00:51:04,210
current solution and can we still use

00:50:58,030 --> 00:51:06,369
that may be simpler solution in 82 like

00:51:04,210 --> 00:51:10,089
Tennessee there's no Drupal 7 solution

00:51:06,369 --> 00:51:12,070
if if i delete our portfolio page and i

00:51:10,089 --> 00:51:14,530
got a client page and the client has to

00:51:12,070 --> 00:51:16,000
have or every portfolio must have a

00:51:14,530 --> 00:51:18,550
client attached to it because we

00:51:16,000 --> 00:51:20,920
we built that that website for some

00:51:18,550 --> 00:51:23,350
client it allows me to lita client or

00:51:20,920 --> 00:51:25,930
the portfolio and nothing breaks but it

00:51:23,350 --> 00:51:30,480
just means my content model isn't

00:51:25,930 --> 00:51:33,310
satisfied yeah but it's it's the worse

00:51:30,480 --> 00:51:35,230
it's it's a very good point you are

00:51:33,310 --> 00:51:42,550
bringing up that concrete use case it

00:51:35,230 --> 00:51:45,280
makes a lot of sense to me um yeah it

00:51:42,550 --> 00:51:47,320
makes a lot of time there are definitely

00:51:45,280 --> 00:51:48,580
ways ways to implement that and I think

00:51:47,320 --> 00:51:50,800
it's a discussion point that we should

00:51:48,580 --> 00:51:52,570
have this community say you know as part

00:51:50,800 --> 00:51:54,310
of this face to get this piece in the

00:51:52,570 --> 00:51:55,840
core you know what what are the exact

00:51:54,310 --> 00:51:59,290
scopes that we should that we should be

00:51:55,840 --> 00:52:01,150
tackling yeah I think it requires more

00:51:59,290 --> 00:52:02,620
discussion I think but it's very

00:52:01,150 --> 00:52:11,530
concrete than good use case they're

00:52:02,620 --> 00:52:13,960
actually another question just one yeah

00:52:11,530 --> 00:52:16,390
a lot of your challenges seem to the

00:52:13,960 --> 00:52:18,670
foot future seemed to have to do with

00:52:16,390 --> 00:52:20,140
continent ities their reference versions

00:52:18,670 --> 00:52:21,610
of other continent ities and if we

00:52:20,140 --> 00:52:24,130
delete this why references that what

00:52:21,610 --> 00:52:26,110
happens and all I kind stuff have you

00:52:24,130 --> 00:52:28,630
looked at seeing if the content entity

00:52:26,110 --> 00:52:30,850
reference module could be expanded to

00:52:28,630 --> 00:52:32,200
handle all these use cases because

00:52:30,850 --> 00:52:35,140
that's really what's built for except

00:52:32,200 --> 00:52:38,650
does anal virgin jet i'm i'm not sure

00:52:35,140 --> 00:52:40,290
i'm not familiar with the simple it says

00:52:38,650 --> 00:52:43,720
that you have it any reference from

00:52:40,290 --> 00:52:46,120
content data content be and whenever you

00:52:43,720 --> 00:52:48,280
change something content a bee has to be

00:52:46,120 --> 00:52:50,200
updated and vice versa it helps you

00:52:48,280 --> 00:52:52,090
manage those relationships i think if it

00:52:50,200 --> 00:52:53,860
was expanded handled your versions of

00:52:52,090 --> 00:52:56,770
content yeah it sounds like it would

00:52:53,860 --> 00:53:00,580
help a lot lot of use cases yeah it's if

00:52:56,770 --> 00:53:03,040
these things or i would say regardless

00:53:00,580 --> 00:53:08,980
of these things get into court or not if

00:53:03,040 --> 00:53:11,640
they live in contribute additions to

00:53:08,980 --> 00:53:14,350
that particular module to make use of

00:53:11,640 --> 00:53:16,330
the full spectrum of functionality in

00:53:14,350 --> 00:53:17,860
the revision api it's a good point we

00:53:16,330 --> 00:53:19,980
should take note of that make sure that

00:53:17,860 --> 00:53:19,980
that happens

00:53:22,890 --> 00:53:27,280
ok we were slowly running out of time

00:53:25,390 --> 00:53:32,100
actually thanks for your great questions

00:53:27,280 --> 00:53:32,100

YouTube URL: https://www.youtube.com/watch?v=LKQczUM7Qrw


