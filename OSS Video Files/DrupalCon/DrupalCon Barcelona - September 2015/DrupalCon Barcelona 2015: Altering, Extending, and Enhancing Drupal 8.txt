Title: DrupalCon Barcelona 2015: Altering, Extending, and Enhancing Drupal 8
Publication date: 2015-09-22
Playlist: DrupalCon Barcelona - September 2015
Description: 
	A large part of Drupal's appeal lies in its flexibility. The fact that a developer can alter, extend, and enhance almost any aspect of Drupal without having to hack core. Historically this versatility has been made possible through the existence of hooks. Specially named PHP functions that are executed at critical points during the fulfillment of a request. And they've served the community well for years. But times are changing, and Drupal 8 offers a variety of new patterns that all module developers will be required to learn, and understand.

Drawing from my experience helping to document and explain these new patterns in various formats I hope to answer these questions:

What are hooks, plugins, events, and services?
What problems do these patterns seek to solve?
How do I decide which method to use and when?
Looking ahead to the future, how do these patterns affect the code I write today?
If you're currently writing modules for Drupal 8, or think that you might have to sometime in the future, or even if you're just curious how the module ecosystem fits together behind the scenes  this session contains critical information for you. After attending this session you should have all the background information you need to make informed decisions about how your custom code can, and should, talk to Drupal in order to uphold best practices and write modules that are easy to maintain and play well with others in a post hook world.
Captions: 
	00:00:00,730 --> 00:00:05,630
i'm gonna i'm going to go ahead and get

00:00:03,080 --> 00:00:06,980
started i know that the the photo just

00:00:05,630 --> 00:00:08,780
finished up and everybody's trying to

00:00:06,980 --> 00:00:10,969
get caffeinated before they sit through

00:00:08,780 --> 00:00:12,650
all these really long session but I've

00:00:10,969 --> 00:00:14,779
got a lot to say and so will get the the

00:00:12,650 --> 00:00:17,630
boring intro stuff out of the way while

00:00:14,779 --> 00:00:20,300
people continue to wander in this

00:00:17,630 --> 00:00:23,300
session is titled altering extending and

00:00:20,300 --> 00:00:25,490
enhancing Drupal 8 there's a link here

00:00:23,300 --> 00:00:28,519
that you can use because it will go to

00:00:25,490 --> 00:00:30,529
these slides and if you want to follow

00:00:28,519 --> 00:00:32,360
along there's also there's a handful of

00:00:30,529 --> 00:00:33,980
slide throughout this presentation that

00:00:32,360 --> 00:00:36,289
are actually just like a big list of

00:00:33,980 --> 00:00:38,300
links and rather than have you try to

00:00:36,289 --> 00:00:41,660
write them all down the easiest thing to

00:00:38,300 --> 00:00:43,670
do would be to go to this URL and get

00:00:41,660 --> 00:00:46,149
the list of slides and give the links

00:00:43,670 --> 00:00:48,769
from there the idea is that in the

00:00:46,149 --> 00:00:50,359
coming weeks after you've left your book

00:00:48,769 --> 00:00:52,280
on and you want to go home and you've

00:00:50,359 --> 00:00:53,840
been dreaming about altering extending

00:00:52,280 --> 00:00:55,670
and an ting your blade you'd like to

00:00:53,840 --> 00:00:59,420
review or maybe do some homework there's

00:00:55,670 --> 00:01:03,710
a lot of good reading with those wings

00:00:59,420 --> 00:01:06,140
so yeah anyways um my name is Joe Joe

00:01:03,710 --> 00:01:08,600
Chandalar I am yo J the brave on

00:01:06,140 --> 00:01:12,410
drupal.org or Twitter or just about

00:01:08,600 --> 00:01:14,990
anything internet related I currently

00:01:12,410 --> 00:01:17,960
work at drupa lies me my role there is

00:01:14,990 --> 00:01:19,400
as the D as a trainer I helped to

00:01:17,960 --> 00:01:21,410
produce training videos to teach people

00:01:19,400 --> 00:01:23,810
how to do all kinds of different things

00:01:21,410 --> 00:01:24,860
with Drupal and I knew it guess we've

00:01:23,810 --> 00:01:26,990
been spending a lot of time recently

00:01:24,860 --> 00:01:28,220
figuring out how to do those same things

00:01:26,990 --> 00:01:30,800
that we've been teaching people how to

00:01:28,220 --> 00:01:32,150
do in Drupal 7 in Drupal 8 and that's

00:01:30,800 --> 00:01:34,250
kind of the Genesis for this talk

00:01:32,150 --> 00:01:35,630
looking at there's all these different

00:01:34,250 --> 00:01:38,870
ways that we've learned over the years

00:01:35,630 --> 00:01:41,420
to extend a Drupal 7 and work with

00:01:38,870 --> 00:01:43,940
Drupal 7 and create modules for it and

00:01:41,420 --> 00:01:46,220
those we'd like to be able to do those

00:01:43,940 --> 00:01:48,050
same things in Tripoli but the tools

00:01:46,220 --> 00:01:49,940
that we use for doing that have changed

00:01:48,050 --> 00:01:54,530
a bit so I'm going to be talking about

00:01:49,940 --> 00:01:56,630
those let's let's start up by talking

00:01:54,530 --> 00:01:58,940
though kind of like set the framework

00:01:56,630 --> 00:02:01,190
for what it is that we're going to be

00:01:58,940 --> 00:02:03,830
looking at in the Drupal community we

00:02:01,190 --> 00:02:05,300
have this idiom don't tap core the idea

00:02:03,830 --> 00:02:07,190
is that you should add the module

00:02:05,300 --> 00:02:08,540
developer or even at the drupal site

00:02:07,190 --> 00:02:10,670
bills are so many implementing

00:02:08,540 --> 00:02:12,170
applications with Drupal you should be

00:02:10,670 --> 00:02:14,390
able to build your entire application

00:02:12,170 --> 00:02:16,220
and make all the changes that you needed

00:02:14,390 --> 00:02:18,560
it durable to do whatever you need it to

00:02:16,220 --> 00:02:21,740
do without having to make changes to the

00:02:18,560 --> 00:02:22,880
code that makes up Drupal core this

00:02:21,740 --> 00:02:24,680
allows you to make sure that your

00:02:22,880 --> 00:02:26,510
application and core maintaining it

00:02:24,680 --> 00:02:28,490
maintain that integrity so you have

00:02:26,510 --> 00:02:30,470
modified it all it makes it easier to

00:02:28,490 --> 00:02:32,330
perform security updates it means that

00:02:30,470 --> 00:02:34,190
if you have questions about things that

00:02:32,330 --> 00:02:36,350
are or aren't working you can ask the

00:02:34,190 --> 00:02:37,760
community and people can pretty feel

00:02:36,350 --> 00:02:39,410
confident than the answers that they

00:02:37,760 --> 00:02:41,570
give you where's if you had made changes

00:02:39,410 --> 00:02:43,820
to your version of Drupal core and you

00:02:41,570 --> 00:02:45,650
asked me a question about how it works I

00:02:43,820 --> 00:02:47,450
would give you the answer based on the

00:02:45,650 --> 00:02:48,920
expectation you're using the same thing

00:02:47,450 --> 00:02:52,400
as everyone else and if you have change

00:02:48,920 --> 00:02:54,710
it that might not be true so Drupal

00:02:52,400 --> 00:02:57,170
provides all of these tools that make it

00:02:54,710 --> 00:02:59,480
possible for us as module developers to

00:02:57,170 --> 00:03:01,460
modify the way the Drupal works and

00:02:59,480 --> 00:03:03,830
extend its existing functionality

00:03:01,460 --> 00:03:06,620
without having to change any of the code

00:03:03,830 --> 00:03:09,020
that makes up for in fact I would argue

00:03:06,620 --> 00:03:11,150
that if you encounter something where

00:03:09,020 --> 00:03:13,040
you would like to make Drupal do a thing

00:03:11,150 --> 00:03:15,200
in a different way or add new some

00:03:13,040 --> 00:03:18,170
functionality and the only way to do

00:03:15,200 --> 00:03:20,660
that is to modify code within the core

00:03:18,170 --> 00:03:23,000
code base that that is actually a button

00:03:20,660 --> 00:03:28,250
and you should probably fix it and

00:03:23,000 --> 00:03:31,370
submit a patch so I often say instead of

00:03:28,250 --> 00:03:34,269
don't hack or I say don't modify cord

00:03:31,370 --> 00:03:36,560
without submitting patch basically in

00:03:34,269 --> 00:03:38,959
addition to that we're going to look at

00:03:36,560 --> 00:03:41,000
how we as module developers can write

00:03:38,959 --> 00:03:43,310
our modules in a way that ensures that

00:03:41,000 --> 00:03:45,260
people can use them without making

00:03:43,310 --> 00:03:47,180
changes to our modules so for example if

00:03:45,260 --> 00:03:49,010
I was the maintainer the voting API

00:03:47,180 --> 00:03:50,630
module I might want to be able to write

00:03:49,010 --> 00:03:52,970
it in a way that allows people to add

00:03:50,630 --> 00:03:55,730
additional features to the module

00:03:52,970 --> 00:03:59,360
without having to modify my module so

00:03:55,730 --> 00:04:01,190
it's a combination of using these

00:03:59,360 --> 00:04:03,770
various different patterns and technique

00:04:01,190 --> 00:04:06,050
in order to extend an older Drupal core

00:04:03,770 --> 00:04:07,910
but also knowing how they work so that

00:04:06,050 --> 00:04:09,800
we can repeat those patterns inside of

00:04:07,910 --> 00:04:11,630
the code that we write so that when

00:04:09,800 --> 00:04:13,340
someone else comes along and they want

00:04:11,630 --> 00:04:15,110
to make changes to our module the

00:04:13,340 --> 00:04:21,170
pattern is familiar to what they already

00:04:15,110 --> 00:04:23,690
know how to do then this works in Drupal

00:04:21,170 --> 00:04:26,930
because throughout the lifecycle of a

00:04:23,690 --> 00:04:28,640
page request endurable there's a number

00:04:26,930 --> 00:04:31,130
of different things that happen in

00:04:28,640 --> 00:04:32,780
points of interaction in which we as

00:04:31,130 --> 00:04:35,300
module developers are asked for

00:04:32,780 --> 00:04:37,280
information or given the chance to

00:04:35,300 --> 00:04:39,170
interact with the system and it really

00:04:37,280 --> 00:04:41,840
roughly breaks down into sort of four

00:04:39,170 --> 00:04:43,310
categories of interaction the first type

00:04:41,840 --> 00:04:46,220
of interaction that you might want to

00:04:43,310 --> 00:04:48,920
have is responding to some information

00:04:46,220 --> 00:04:51,740
provided by the system events if you

00:04:48,920 --> 00:04:55,010
will Drupal just did something and I as

00:04:51,740 --> 00:04:57,620
a module developer would like to do my

00:04:55,010 --> 00:05:00,560
own custom thing as a result of that for

00:04:57,620 --> 00:05:02,930
example whenever a user logs into the

00:05:00,560 --> 00:05:04,910
system Drupal notifies any code that's

00:05:02,930 --> 00:05:06,740
listening and says hey Joe just logged

00:05:04,910 --> 00:05:09,200
in do you want to do anything about that

00:05:06,740 --> 00:05:11,450
whenever a note is deleted Drupal said

00:05:09,200 --> 00:05:13,280
hey and no one was just deleted would

00:05:11,450 --> 00:05:16,100
you like to participate if you anything

00:05:13,280 --> 00:05:17,810
about that so there's responding to

00:05:16,100 --> 00:05:21,530
events or other information within the

00:05:17,810 --> 00:05:23,930
system there is code the answers

00:05:21,530 --> 00:05:25,490
questions I think of this if you're

00:05:23,930 --> 00:05:27,620
familiar with Drupal 7 this would be

00:05:25,490 --> 00:05:29,390
kind of like the info hope that provides

00:05:27,620 --> 00:05:31,970
a bunch of metadata about something

00:05:29,390 --> 00:05:34,310
there are all these instances where

00:05:31,970 --> 00:05:37,310
drupal needs to get a big list of a

00:05:34,310 --> 00:05:38,600
whole bunch of possible options and then

00:05:37,310 --> 00:05:40,730
use those for different things one of

00:05:38,600 --> 00:05:42,530
them might be the menu system needs to

00:05:40,730 --> 00:05:44,690
get a list of all the possible paths

00:05:42,530 --> 00:05:46,580
that someone could go to another might

00:05:44,690 --> 00:05:48,620
be the block system it needs to get a

00:05:46,580 --> 00:05:50,930
big list of all the possible blocks in

00:05:48,620 --> 00:05:53,390
this particular instance of Drupal that

00:05:50,930 --> 00:05:55,070
someone could install or I guess enable

00:05:53,390 --> 00:05:57,590
on their site so you're answering

00:05:55,070 --> 00:06:00,520
questions like you know do you have one

00:05:57,590 --> 00:06:02,720
of these and if so where can I find it

00:06:00,520 --> 00:06:05,960
the other thing that we do with modules

00:06:02,720 --> 00:06:07,129
is we add new functionality so we might

00:06:05,960 --> 00:06:09,559
write a module that

00:06:07,129 --> 00:06:11,479
a new building block if you will as part

00:06:09,559 --> 00:06:13,399
of how people build their site might be

00:06:11,479 --> 00:06:15,169
adding a new field type you might be

00:06:13,399 --> 00:06:17,659
changing the way that a certain system

00:06:15,169 --> 00:06:19,879
works but ultimately you're adding

00:06:17,659 --> 00:06:24,019
functionality that Drupal core doesn't

00:06:19,879 --> 00:06:26,839
already you or you might be writing code

00:06:24,019 --> 00:06:30,050
that alters some existing functionality

00:06:26,839 --> 00:06:32,389
in core for example you like you know

00:06:30,050 --> 00:06:33,860
you're using the node module but you

00:06:32,389 --> 00:06:37,909
want to change something about the way

00:06:33,860 --> 00:06:40,099
that it works we drupal provide ways for

00:06:37,909 --> 00:06:41,929
you to say okay this is how I do it by

00:06:40,099 --> 00:06:44,959
default but if you'd like to do it

00:06:41,929 --> 00:06:50,179
differently as a module developer you

00:06:44,959 --> 00:06:52,729
can alter those interactions so don't

00:06:50,179 --> 00:06:55,490
have core instead use one of these

00:06:52,729 --> 00:06:58,369
patterns use a hook or by the plug in or

00:06:55,490 --> 00:07:01,189
create a new service or subscribe to an

00:06:58,369 --> 00:07:04,490
event and respond to those events so in

00:07:01,189 --> 00:07:06,319
Drupal 7 we really had had I guess we

00:07:04,490 --> 00:07:09,229
still have triple seven Interpol seven

00:07:06,319 --> 00:07:10,519
we only have one real way to perform all

00:07:09,229 --> 00:07:13,279
of these different types of interactions

00:07:10,519 --> 00:07:15,019
you can do them all and they still exist

00:07:13,279 --> 00:07:17,539
but the primary means for doing that is

00:07:15,019 --> 00:07:19,129
by implementing hooks in Drupal 8 that

00:07:17,539 --> 00:07:20,899
changes though and we have some new

00:07:19,129 --> 00:07:22,969
patterns that we have to learn in order

00:07:20,899 --> 00:07:24,769
to answer some of those questions we

00:07:22,969 --> 00:07:27,800
still have books but in addition we've

00:07:24,769 --> 00:07:29,389
added plugins services events but

00:07:27,800 --> 00:07:30,889
actually a few others as well but these

00:07:29,389 --> 00:07:32,869
are kind of the big four that you'll

00:07:30,889 --> 00:07:34,490
need to know what I'd like to do the

00:07:32,869 --> 00:07:35,959
rest of this presentation is kind of

00:07:34,490 --> 00:07:38,719
give a high-level overview of what each

00:07:35,959 --> 00:07:40,399
of those things are we'll talk about the

00:07:38,719 --> 00:07:42,439
problems that each one solves and when

00:07:40,399 --> 00:07:44,419
you might want to use for example

00:07:42,439 --> 00:07:46,159
plugins to solve to do the thing that

00:07:44,419 --> 00:07:50,300
you're trying to do and we'll look at

00:07:46,159 --> 00:07:53,509
how you can how you can implement the

00:07:50,300 --> 00:07:56,479
service or the pattern in terms of I'd

00:07:53,509 --> 00:07:58,849
like to alter or extended Drupal but

00:07:56,479 --> 00:08:00,860
also as a module developer how I can

00:07:58,849 --> 00:08:01,820
repeat that pattern inside of my module

00:08:00,860 --> 00:08:03,590
so that it forms

00:08:01,820 --> 00:08:06,410
well I would like people to be able to

00:08:03,590 --> 00:08:10,460
write plugins for my module what do I

00:08:06,410 --> 00:08:12,340
need to do on that end so the first one

00:08:10,460 --> 00:08:15,620
that we to take a look at is plugins

00:08:12,340 --> 00:08:17,660
this is a new system in Drupal 8 I

00:08:15,620 --> 00:08:19,280
talked about this one first and aren't

00:08:17,660 --> 00:08:20,780
really in any particular order but I

00:08:19,280 --> 00:08:23,840
would say of all the systems for

00:08:20,780 --> 00:08:24,890
altering or extending Drupal plugins is

00:08:23,840 --> 00:08:26,900
going to be the one that you're probably

00:08:24,890 --> 00:08:31,960
going to encounter first of the new

00:08:26,900 --> 00:08:36,530
systems it's really widely used in

00:08:31,960 --> 00:08:38,900
Drupal 8 it's used for basically any

00:08:36,530 --> 00:08:41,450
time that you come up to a scenario

00:08:38,900 --> 00:08:43,970
where drupal needs to get a list of some

00:08:41,450 --> 00:08:46,400
functionality and then allow a user or

00:08:43,970 --> 00:08:48,770
the application itself to choose one or

00:08:46,400 --> 00:08:50,630
more of those units of functionality to

00:08:48,770 --> 00:08:52,490
use those are generally implemented as

00:08:50,630 --> 00:08:54,500
plugins blocks is a really good example

00:08:52,490 --> 00:08:56,240
of that modules need to be able to

00:08:54,500 --> 00:08:57,590
provide new blocks drupal needs to be

00:08:56,240 --> 00:08:59,270
able to discover them so that it can

00:08:57,590 --> 00:09:01,220
present them in the UI but then an

00:08:59,270 --> 00:09:04,520
administrator of the site ultimately

00:09:01,220 --> 00:09:07,310
chooses which block or blocks to use on

00:09:04,520 --> 00:09:10,640
the site other instances of that our

00:09:07,310 --> 00:09:15,700
field types plugins for views so accused

00:09:10,640 --> 00:09:20,270
styles or row styles the actions system

00:09:15,700 --> 00:09:22,880
in Drupal 7 this was often represented

00:09:20,270 --> 00:09:24,620
as you would have an info hook that

00:09:22,880 --> 00:09:26,900
would provide return an array and

00:09:24,620 --> 00:09:28,940
provide a bunch of metadata about you

00:09:26,900 --> 00:09:31,250
know hey I provide block so I'd

00:09:28,940 --> 00:09:32,750
implement took blocky info so when

00:09:31,250 --> 00:09:34,640
Drupal you need to make a list it could

00:09:32,750 --> 00:09:36,260
call that hook and get a list of all the

00:09:34,640 --> 00:09:38,180
blocks but then all that array really

00:09:36,260 --> 00:09:39,980
did was say here's the callback

00:09:38,180 --> 00:09:45,920
functions you should call in order to

00:09:39,980 --> 00:09:47,660
implement that functionality so plugins

00:09:45,920 --> 00:09:50,090
allow for that they provide an

00:09:47,660 --> 00:09:53,090
opportunity for module developers to

00:09:50,090 --> 00:09:55,610
create new configurable functionality in

00:09:53,090 --> 00:09:57,560
a way that Drupal can find all of it

00:09:55,610 --> 00:09:59,810
abrogate a list of those to get

00:09:57,560 --> 00:10:01,670
and then present the user or sometimes

00:09:59,810 --> 00:10:04,340
also just the application itself with

00:10:01,670 --> 00:10:08,930
the opportunity to choose between one or

00:10:04,340 --> 00:10:12,040
many plugins compared to how we did this

00:10:08,930 --> 00:10:14,930
in Drupal 7 plugins are implemented as

00:10:12,040 --> 00:10:17,330
classes that implement an interface is

00:10:14,930 --> 00:10:21,050
kind of the base basics of it you would

00:10:17,330 --> 00:10:22,610
say I want to create a new blog so I'm

00:10:21,050 --> 00:10:25,520
going to figure out what the interface

00:10:22,610 --> 00:10:28,040
is the PHP interface for the block

00:10:25,520 --> 00:10:30,350
plugin and I'm going to implement that

00:10:28,040 --> 00:10:32,390
interface and so every block has a label

00:10:30,350 --> 00:10:35,210
and it has a body it has a couple of

00:10:32,390 --> 00:10:37,940
other common components so I write a

00:10:35,210 --> 00:10:40,130
class that had those methods because

00:10:37,940 --> 00:10:43,220
those exists drupal will always know how

00:10:40,130 --> 00:10:45,290
to use any instance of a block plug-in

00:10:43,220 --> 00:10:48,800
because they all conform to the same

00:10:45,290 --> 00:10:50,270
interface I like this because it

00:10:48,800 --> 00:10:52,880
provides a pretty consistent experience

00:10:50,270 --> 00:10:55,040
for me as a developer once I learn how

00:10:52,880 --> 00:10:57,470
plugins work and how to implemented a

00:10:55,040 --> 00:10:59,029
new plug-in of a specific type the

00:10:57,470 --> 00:11:00,560
pattern is the same and I can just use

00:10:59,029 --> 00:11:02,420
it over and over for every different

00:11:00,560 --> 00:11:04,760
type of plug in whether I'm adding a

00:11:02,420 --> 00:11:06,710
block or an action or image style or

00:11:04,760 --> 00:11:08,630
even some kind of like new condition

00:11:06,710 --> 00:11:10,550
that the forum system can use for

00:11:08,630 --> 00:11:12,470
validating a field they're all

00:11:10,550 --> 00:11:14,960
implemented in roughly the same way

00:11:12,470 --> 00:11:16,610
versus Drupal 7 you run into this

00:11:14,960 --> 00:11:18,710
problem of like you have to look up the

00:11:16,610 --> 00:11:20,480
documentation for the info hook in the

00:11:18,710 --> 00:11:22,220
array that it returns is different for

00:11:20,480 --> 00:11:23,870
every single info hoping you have to

00:11:22,220 --> 00:11:26,240
remember like I'll do I use pound signs

00:11:23,870 --> 00:11:27,860
in front of the things are going not is

00:11:26,240 --> 00:11:29,780
this a call backwards it just magically

00:11:27,860 --> 00:11:32,180
going to look up a function called hook

00:11:29,780 --> 00:11:34,010
block view if it exists the nice thing

00:11:32,180 --> 00:11:36,740
about plugins is that's all

00:11:34,010 --> 00:11:39,650
self-contained into a single space that

00:11:36,740 --> 00:11:43,570
I can very quickly find all of the code

00:11:39,650 --> 00:11:43,570
that makes up that individual component

00:11:49,300 --> 00:11:53,120
so if you're going to implement the

00:11:51,170 --> 00:11:54,740
plug-in and if you're a module developer

00:11:53,120 --> 00:11:56,570
if you are definitely going to end up

00:11:54,740 --> 00:11:58,820
implementing the plug-in at some point

00:11:56,570 --> 00:12:00,710
this is the real rough recipe of how you

00:11:58,820 --> 00:12:02,570
would do that the first thing you need

00:12:00,710 --> 00:12:04,280
to do is determine what type of plug in

00:12:02,570 --> 00:12:06,020
it is that you're implementing so are

00:12:04,280 --> 00:12:08,470
you creating a new block are you adding

00:12:06,020 --> 00:12:11,120
a field widget are you adding an action

00:12:08,470 --> 00:12:14,270
there are hundreds of different plug-in

00:12:11,120 --> 00:12:15,530
types in Drupal core you the best way to

00:12:14,270 --> 00:12:17,060
find out what all of those available

00:12:15,530 --> 00:12:20,840
types are is to look at the

00:12:17,060 --> 00:12:23,410
documentation on API drupal.org you can

00:12:20,840 --> 00:12:26,690
also in the code you could say look for

00:12:23,410 --> 00:12:28,610
all of the plug-in manager they plug-in

00:12:26,690 --> 00:12:31,220
manager the name for a code that

00:12:28,610 --> 00:12:34,130
implements a new plug-in type but once

00:12:31,220 --> 00:12:35,600
you know what type of plug in it is that

00:12:34,130 --> 00:12:38,000
you're going to implement this health

00:12:35,600 --> 00:12:40,250
helps to determine how you perform the

00:12:38,000 --> 00:12:41,930
next two steps you have to do these

00:12:40,250 --> 00:12:44,630
things for every type of plugging but

00:12:41,930 --> 00:12:46,760
it's different depending on the type but

00:12:44,630 --> 00:12:48,890
you need to say so once you know the

00:12:46,760 --> 00:12:51,830
plug-in type that will tell you where

00:12:48,890 --> 00:12:54,490
does metadata that describes your

00:12:51,830 --> 00:12:57,380
particular instance of the plug-in go

00:12:54,490 --> 00:12:59,600
typically the plugins are what are

00:12:57,380 --> 00:13:02,000
called annotated plugins and so the

00:12:59,600 --> 00:13:05,330
metadata will appear in an annotation in

00:13:02,000 --> 00:13:09,110
the PHP file where the classes that

00:13:05,330 --> 00:13:10,700
implements your plug-in but you need to

00:13:09,110 --> 00:13:12,410
know where that meta data goes and then

00:13:10,700 --> 00:13:14,000
you need to know based on that also

00:13:12,410 --> 00:13:16,220
where the code goes again the most

00:13:14,000 --> 00:13:19,070
common use case here is annotated

00:13:16,220 --> 00:13:22,460
plugins which means the cult of the code

00:13:19,070 --> 00:13:24,670
lives in a single PHP file you'll know

00:13:22,460 --> 00:13:27,170
where it goes by following the PSR for

00:13:24,670 --> 00:13:29,780
namespacing convention and the metadata

00:13:27,170 --> 00:13:31,340
will live in an annotation that's true

00:13:29,780 --> 00:13:33,920
of almost everything but there are a

00:13:31,340 --> 00:13:35,420
handful of other there are a handful of

00:13:33,920 --> 00:13:39,710
plug-in types to use different methods

00:13:35,420 --> 00:13:42,020
for discovery once you know what type

00:13:39,710 --> 00:13:44,420
you're implementing and what the method

00:13:42,020 --> 00:13:45,710
of discovery is for that type the other

00:13:44,420 --> 00:13:47,630
thing that you'll want to do is figure

00:13:45,710 --> 00:13:50,240
out if there's a base class that you can

00:13:47,630 --> 00:13:53,060
extend for that plug-in and in most

00:13:50,240 --> 00:13:54,950
cases there is you don't have to extend

00:13:53,060 --> 00:13:56,960
it or probably the easiest way to get

00:13:54,950 --> 00:13:58,880
started is by extending that base class

00:13:56,960 --> 00:13:59,560
and so the example would be if I'm

00:13:58,880 --> 00:14:03,010
adding

00:13:59,560 --> 00:14:04,840
block I would extend the block base

00:14:03,010 --> 00:14:06,820
class which provides a bunch of

00:14:04,840 --> 00:14:09,310
functionality but it also means that I

00:14:06,820 --> 00:14:11,350
mix I'm implementing that plugins

00:14:09,310 --> 00:14:14,230
interface and by implementing an

00:14:11,350 --> 00:14:16,120
interface as a developer I now know okay

00:14:14,230 --> 00:14:18,100
if I'm providing a block plug in the

00:14:16,120 --> 00:14:21,430
things that I'm required to you are

00:14:18,100 --> 00:14:23,140
somehow supply Drupal with a label so

00:14:21,430 --> 00:14:26,830
the title that's displayed for the block

00:14:23,140 --> 00:14:29,650
and the body content of that plugin mmm

00:14:26,830 --> 00:14:31,420
and then finally you need to actually

00:14:29,650 --> 00:14:34,270
write the class write the code that

00:14:31,420 --> 00:14:35,920
implements the plug-in so that's the

00:14:34,270 --> 00:14:37,810
recipe there determine the type of

00:14:35,920 --> 00:14:39,670
plug-in which will help you figure out

00:14:37,810 --> 00:14:42,040
how Drupal is going to discover

00:14:39,670 --> 00:14:44,800
instances of your plug-in extend the

00:14:42,040 --> 00:14:46,860
base class if it exists and then write

00:14:44,800 --> 00:14:51,310
your functionality by implementing the

00:14:46,860 --> 00:14:53,170
specified interface this is a super

00:14:51,310 --> 00:14:57,070
simple example of what an annotated

00:14:53,170 --> 00:15:00,070
plug-in would look like I've got a QP

00:14:57,070 --> 00:15:02,290
namespace so based on that namespace I

00:15:00,070 --> 00:15:05,500
also know where in the director of

00:15:02,290 --> 00:15:07,120
wearing the club file system I need to

00:15:05,500 --> 00:15:10,630
place that code so the Drupal can

00:15:07,120 --> 00:15:13,390
discover it this comment here at the top

00:15:10,630 --> 00:15:15,610
is an annotation so that's the metadata

00:15:13,390 --> 00:15:17,890
for this plug-in and it describes some

00:15:15,610 --> 00:15:20,020
sort of roughly static information about

00:15:17,890 --> 00:15:22,720
the plugin this is typically this up so

00:15:20,020 --> 00:15:25,360
like an example of blocks this would be

00:15:22,720 --> 00:15:27,550
like the administrator name of the block

00:15:25,360 --> 00:15:29,830
and like a unique ie so the Drupal can

00:15:27,550 --> 00:15:31,270
make the list on the block ey page of

00:15:29,830 --> 00:15:33,250
what all of the available blocks are

00:15:31,270 --> 00:15:35,080
without actually having to load and

00:15:33,250 --> 00:15:37,120
execute the code that makes up each

00:15:35,080 --> 00:15:39,040
individual block so that information is

00:15:37,120 --> 00:15:41,920
contained in that annotation and it

00:15:39,040 --> 00:15:44,980
parses it out and then I'm extending the

00:15:41,920 --> 00:15:47,860
base class and based on whatever that

00:15:44,980 --> 00:15:49,660
base class is I'll have certain methods

00:15:47,860 --> 00:15:51,520
that I need to implement in my class

00:15:49,660 --> 00:15:56,260
which provide the actual functionality

00:15:51,520 --> 00:15:57,610
of the four bein so as a module

00:15:56,260 --> 00:15:59,840
developer you're going to run into this

00:15:57,610 --> 00:16:01,490
anytime that you're adding

00:15:59,840 --> 00:16:03,530
new functionality into one of the

00:16:01,490 --> 00:16:06,440
situations where drupal presenting end

00:16:03,530 --> 00:16:09,170
users with a choice in which they

00:16:06,440 --> 00:16:11,090
determine which of the many things that

00:16:09,170 --> 00:16:12,740
are capable of doing this I'd like to

00:16:11,090 --> 00:16:14,240
use and if you stop and think about it

00:16:12,740 --> 00:16:18,070
that's a lot of things in the way the

00:16:14,240 --> 00:16:22,100
triple words blocks fields field types

00:16:18,070 --> 00:16:23,960
actions image styles for example the the

00:16:22,100 --> 00:16:26,570
effects that you can apply to an image

00:16:23,960 --> 00:16:30,770
those are all implemented as plugins new

00:16:26,570 --> 00:16:33,680
units of functionality as a module

00:16:30,770 --> 00:16:36,290
developer that wants to be able to allow

00:16:33,680 --> 00:16:38,000
someone else to write plugins for their

00:16:36,290 --> 00:16:40,490
module you're gonna have to create

00:16:38,000 --> 00:16:42,680
what's called a plug-in type and this is

00:16:40,490 --> 00:16:44,240
the rough recipe for doing that and the

00:16:42,680 --> 00:16:46,640
example here would be lets say the

00:16:44,240 --> 00:16:47,660
maintainer of the voting API module

00:16:46,640 --> 00:16:50,180
apparently this is going to be my

00:16:47,660 --> 00:16:53,390
example today so you're the maintainer

00:16:50,180 --> 00:16:56,030
of the voting API module and you win the

00:16:53,390 --> 00:16:57,740
ability for your module to calculate

00:16:56,030 --> 00:16:59,150
votes in one way somebody else comes

00:16:57,740 --> 00:17:01,730
along since you don't think really great

00:16:59,150 --> 00:17:03,440
I for my system I need to do Instant

00:17:01,730 --> 00:17:05,390
Runoff voting and then somebody else

00:17:03,440 --> 00:17:07,610
comes along is like well you know I need

00:17:05,390 --> 00:17:09,860
is I needed to tell me votes like this

00:17:07,610 --> 00:17:11,450
except on Tuesday bees I needed to tally

00:17:09,860 --> 00:17:12,950
them and reverse just because we've got

00:17:11,450 --> 00:17:14,420
this crazy system and you have the

00:17:12,950 --> 00:17:17,180
module developed the elegant on the end

00:17:14,420 --> 00:17:19,280
I do not want to write every special use

00:17:17,180 --> 00:17:21,800
case into my module for everyone that's

00:17:19,280 --> 00:17:24,050
ever going to use it so instead what

00:17:21,800 --> 00:17:27,800
I'll do is I'll implement that you plug

00:17:24,050 --> 00:17:30,470
in tight he'll then create a you know

00:17:27,800 --> 00:17:32,630
maybe one or two basic instances of that

00:17:30,470 --> 00:17:35,240
plug-in that do the basic vote tallying

00:17:32,630 --> 00:17:37,550
but anybody that wants to can extend the

00:17:35,240 --> 00:17:40,100
voting API module and add in their own

00:17:37,550 --> 00:17:41,780
plugins that tally votes in whatever the

00:17:40,100 --> 00:17:44,720
way they need to on wednesday morning

00:17:41,780 --> 00:17:46,660
for their special use case so if you

00:17:44,720 --> 00:17:50,930
want to do that what you need to do is

00:17:46,660 --> 00:17:53,690
in your module you need to create a new

00:17:50,930 --> 00:17:54,860
plug-in manager so plugin managers are

00:17:53,690 --> 00:17:57,830
the things that are responsible for

00:17:54,860 --> 00:18:00,320
declaring a new plug-in type you do that

00:17:57,830 --> 00:18:04,220
by extending the default plug-in manager

00:18:00,320 --> 00:18:06,410
class which is in court and when you do

00:18:04,220 --> 00:18:07,850
that you are determining a few things we

00:18:06,410 --> 00:18:11,530
said that the recipe for creating a

00:18:07,850 --> 00:18:13,600
plug-in dictated how meta data

00:18:11,530 --> 00:18:15,550
plugins was collected and where the code

00:18:13,600 --> 00:18:17,650
live when you create a plug-in manager

00:18:15,550 --> 00:18:19,440
that's part of what you're doing you're

00:18:17,650 --> 00:18:22,180
saying for plugins of this new type

00:18:19,440 --> 00:18:24,010
here's how I want to discover them and

00:18:22,180 --> 00:18:25,660
here's where the code should live so

00:18:24,010 --> 00:18:29,050
that I know how to instantiate a new

00:18:25,660 --> 00:18:31,780
vote tallying system and column call

00:18:29,050 --> 00:18:33,130
that finally when you create a new

00:18:31,780 --> 00:18:35,950
plugin think you should also make sure

00:18:33,130 --> 00:18:39,100
that you define an interface for people

00:18:35,950 --> 00:18:41,260
to use when they're creating new units

00:18:39,100 --> 00:18:43,390
of functionality of that plug-in type

00:18:41,260 --> 00:18:47,770
the benefit of having an interface is

00:18:43,390 --> 00:18:49,720
that as the module developer that is now

00:18:47,770 --> 00:18:52,030
going to load one of these plugins and

00:18:49,720 --> 00:18:55,570
potentially call it and make use of it I

00:18:52,030 --> 00:18:59,170
know for sure that every instance of my

00:18:55,570 --> 00:19:01,150
voting API type will conform to this

00:18:59,170 --> 00:19:03,430
interface and they'll all have a

00:19:01,150 --> 00:19:05,740
calculate results method and so I don't

00:19:03,430 --> 00:19:09,130
actually have to care what plug-in

00:19:05,740 --> 00:19:11,200
actually got used I can just load any of

00:19:09,130 --> 00:19:13,240
them based on the user's specification

00:19:11,200 --> 00:19:17,650
but I know the method exists and I can

00:19:13,240 --> 00:19:19,420
call it this is one of those slides that

00:19:17,650 --> 00:19:21,340
has a bunch of links to things that you

00:19:19,420 --> 00:19:22,960
can read at home should you want to read

00:19:21,340 --> 00:19:25,960
more about how the plug-in system works

00:19:22,960 --> 00:19:28,780
so I'm just going to skip past this I'll

00:19:25,960 --> 00:19:31,030
also point out that i'm at 2 15 today

00:19:28,780 --> 00:19:32,950
there's a session about the plug-in

00:19:31,030 --> 00:19:35,020
system that goes into much more depth

00:19:32,950 --> 00:19:36,970
about how all of the different pieces of

00:19:35,020 --> 00:19:38,560
the system work so if you're interested

00:19:36,970 --> 00:19:43,420
I would definitely recommend checking

00:19:38,560 --> 00:19:45,700
that out another one anyways that we in

00:19:43,420 --> 00:19:48,760
this case really extended Drupal is the

00:19:45,700 --> 00:19:51,010
use of services so services are away or

00:19:48,760 --> 00:19:53,740
Drupal to encapsulate units of

00:19:51,010 --> 00:19:57,160
functionality it's a sort of a bundle of

00:19:53,740 --> 00:19:59,740
code is probably easier with examples

00:19:57,160 --> 00:20:02,500
things that in duple 7 are typically

00:19:59,740 --> 00:20:04,960
implemented as an API which is really

00:20:02,500 --> 00:20:07,060
just a bunch of global functions in PHP

00:20:04,960 --> 00:20:10,000
namespace that you would call in order

00:20:07,060 --> 00:20:13,060
to do some kind of tasks are usually

00:20:10,000 --> 00:20:15,760
implemented as services so caching for

00:20:13,060 --> 00:20:17,330
example you instead of having to global

00:20:15,760 --> 00:20:20,240
functions which are like cash

00:20:17,330 --> 00:20:22,940
and cash set there's now a cash service

00:20:20,240 --> 00:20:25,070
as a module developer if I want to catch

00:20:22,940 --> 00:20:28,760
something i would ask drupal for a copy

00:20:25,070 --> 00:20:31,430
of the cash service which then has that

00:20:28,760 --> 00:20:34,520
api so you know it's like cash service

00:20:31,430 --> 00:20:36,980
probably have get and set methods so

00:20:34,520 --> 00:20:38,960
similar and that there's it's really

00:20:36,980 --> 00:20:40,490
just a set of functions or methods that

00:20:38,960 --> 00:20:43,160
i'm going to call unable to make use of

00:20:40,490 --> 00:20:46,610
the service but implemented in a bit of

00:20:43,160 --> 00:20:50,270
a different way other examples of things

00:20:46,610 --> 00:20:51,740
that i started like if you're creating a

00:20:50,270 --> 00:20:56,660
new plug-in type the plugin manager

00:20:51,740 --> 00:20:59,390
itself is a surface you might want to

00:20:56,660 --> 00:21:00,380
use services or create your own service

00:20:59,390 --> 00:21:02,570
if you're doing something like

00:21:00,380 --> 00:21:04,160
integrating with a third-party api so if

00:21:02,570 --> 00:21:06,260
you are biting the Twitter module and

00:21:04,160 --> 00:21:08,180
you needed to create an API client to

00:21:06,260 --> 00:21:10,280
interface with Twitter you might do that

00:21:08,180 --> 00:21:13,070
by writing all of that business logic

00:21:10,280 --> 00:21:15,710
into a class and then declaring that

00:21:13,070 --> 00:21:17,720
class as a service to Drupal and then

00:21:15,710 --> 00:21:20,000
anyone else so then you can make use of

00:21:17,720 --> 00:21:22,460
the service yourself to say create a

00:21:20,000 --> 00:21:26,360
block plugin that displays all of the

00:21:22,460 --> 00:21:28,310
tweets for drupalcon on the page but by

00:21:26,360 --> 00:21:30,920
implementing this service you also make

00:21:28,310 --> 00:21:33,560
it so that anyone else could easily get

00:21:30,920 --> 00:21:35,510
access to the Twitter client that you

00:21:33,560 --> 00:21:37,070
provided and make use of that API as

00:21:35,510 --> 00:21:38,810
well but you're not doing it by

00:21:37,070 --> 00:21:41,990
implementing a bunch of functions in the

00:21:38,810 --> 00:21:44,840
global namespace this is awesome because

00:21:41,990 --> 00:21:47,480
it means that that functionality is

00:21:44,840 --> 00:21:49,880
really well decoupled from Drupal as an

00:21:47,480 --> 00:21:51,980
application this allows me to do things

00:21:49,880 --> 00:21:53,450
like for example write tests where

00:21:51,980 --> 00:21:55,310
instead of actually having to ping

00:21:53,450 --> 00:21:58,580
Twitter every time I want to test

00:21:55,310 --> 00:22:01,280
whether this block plug-in works I can

00:21:58,580 --> 00:22:03,290
substitute the service that i wrote that

00:22:01,280 --> 00:22:05,570
interfaces with twitter for one that is

00:22:03,290 --> 00:22:07,010
just a mock of that service and it just

00:22:05,570 --> 00:22:09,320
you know rather than actually making the

00:22:07,010 --> 00:22:13,460
request it just acts like it made the

00:22:09,320 --> 00:22:15,860
request service so in this works because

00:22:13,460 --> 00:22:18,470
services can be swapped out for one

00:22:15,860 --> 00:22:20,180
another it gets a little confusing

00:22:18,470 --> 00:22:21,980
because it's like all right this is two

00:22:20,180 --> 00:22:23,870
ways of providing new functionality

00:22:21,980 --> 00:22:27,049
plug in or I could write a service I

00:22:23,870 --> 00:22:29,360
think the big difference between plugins

00:22:27,049 --> 00:22:31,610
and services is that services typically

00:22:29,360 --> 00:22:33,919
represent some kind of functionality

00:22:31,610 --> 00:22:36,350
that you would only really ever have one

00:22:33,919 --> 00:22:39,500
active instance of at any given time

00:22:36,350 --> 00:22:41,179
whereas plugins you may have just one or

00:22:39,500 --> 00:22:44,360
you may have a whole bunch of plugins

00:22:41,179 --> 00:22:46,790
active at any given time so things like

00:22:44,360 --> 00:22:49,220
for example the caste system you're

00:22:46,790 --> 00:22:52,429
probably only using one cashing service

00:22:49,220 --> 00:22:54,260
at a time whereas blocks you might have

00:22:52,429 --> 00:22:55,760
five different blocks enabled on the

00:22:54,260 --> 00:23:03,260
page so that's more of a plug-in

00:22:55,760 --> 00:23:06,650
functionality Drupal core has a whole

00:23:03,260 --> 00:23:07,730
bunch of services built in so one of the

00:23:06,650 --> 00:23:09,290
things that you need to know it's a

00:23:07,730 --> 00:23:11,299
module developers what are those

00:23:09,290 --> 00:23:13,730
available services so that you can make

00:23:11,299 --> 00:23:15,890
use of them in duple 7 we would do this

00:23:13,730 --> 00:23:17,299
by going to API dr. blood or you can

00:23:15,890 --> 00:23:19,100
just start typing the name of a function

00:23:17,299 --> 00:23:21,290
into the search box and be like all

00:23:19,100 --> 00:23:23,390
signed up whoa drupal has a function for

00:23:21,290 --> 00:23:26,090
formatting plural strings like I had no

00:23:23,390 --> 00:23:28,130
idea that's cool so all of these like

00:23:26,090 --> 00:23:30,620
helper utility things that we made use

00:23:28,130 --> 00:23:33,049
of in Drupal 7 as just global functions

00:23:30,620 --> 00:23:35,240
are now typically written as services

00:23:33,049 --> 00:23:37,520
the best way to get a list of all the

00:23:35,240 --> 00:23:40,429
services is if you go to API ocupada org

00:23:37,520 --> 00:23:42,980
over on the right there's a block with a

00:23:40,429 --> 00:23:45,440
link for services and on that page it

00:23:42,980 --> 00:23:48,530
will list all of the available services

00:23:45,440 --> 00:23:50,330
in court it can be a little bit daunting

00:23:48,530 --> 00:23:52,700
to figure out what those all are but I

00:23:50,330 --> 00:23:54,770
do recommend taking the looks of it when

00:23:52,700 --> 00:23:57,350
you start writing your own module you're

00:23:54,770 --> 00:23:58,790
not writing repetitive functionality

00:23:57,350 --> 00:23:59,929
there's a lot of things that core is

00:23:58,790 --> 00:24:01,519
already doing so why

00:23:59,929 --> 00:24:05,749
made use of that service rather than

00:24:01,519 --> 00:24:07,429
writing yourself however if you do want

00:24:05,749 --> 00:24:10,429
to write your own service like let's say

00:24:07,429 --> 00:24:11,749
for example your the Twitter module well

00:24:10,429 --> 00:24:13,129
okay you're not actually the Twitter

00:24:11,749 --> 00:24:14,960
module you're the maintainer of the

00:24:13,129 --> 00:24:17,110
Twitter module and you want to write a

00:24:14,960 --> 00:24:21,110
new service for interacting with Twitter

00:24:17,110 --> 00:24:22,970
what you need to do is first you need to

00:24:21,110 --> 00:24:24,679
choose a unique name for your service

00:24:22,970 --> 00:24:27,730
the reason for this is that these all

00:24:24,679 --> 00:24:30,019
get bundled together by drupal and as a

00:24:27,730 --> 00:24:31,909
later on when you need to make use of

00:24:30,019 --> 00:24:33,590
the service you need a name that you can

00:24:31,909 --> 00:24:35,600
use to reference it so that you can say

00:24:33,590 --> 00:24:38,600
hey give me an instance of my service

00:24:35,600 --> 00:24:40,399
that i created the best way that create

00:24:38,600 --> 00:24:42,559
those unique unique names is typically

00:24:40,399 --> 00:24:43,999
going to be the prefix the service name

00:24:42,559 --> 00:24:46,580
with the name of your module so you

00:24:43,999 --> 00:24:50,659
might be something like Twitter dot as

00:24:46,580 --> 00:24:53,659
the service that you're creating then

00:24:50,659 --> 00:24:56,659
you want to define a PHP interface for

00:24:53,659 --> 00:24:58,970
that service this isn't necessarily

00:24:56,659 --> 00:25:00,950
required but I would highly recommend it

00:24:58,970 --> 00:25:03,259
again what happens when you define an

00:25:00,950 --> 00:25:05,629
interface is you're creating a template

00:25:03,259 --> 00:25:08,330
that you and anyone else could use in

00:25:05,629 --> 00:25:11,509
order to know how to provide that

00:25:08,330 --> 00:25:13,460
specific service that way if later on

00:25:11,509 --> 00:25:15,559
someone wants to come along and provide

00:25:13,460 --> 00:25:17,779
an alternate implementation of the

00:25:15,559 --> 00:25:19,610
Twitter client they can create a new

00:25:17,779 --> 00:25:21,649
service that implements that template

00:25:19,610 --> 00:25:23,659
that you created make the underlying

00:25:21,649 --> 00:25:25,369
logic a little bit different but the

00:25:23,659 --> 00:25:27,200
code that's making use of it doesn't

00:25:25,369 --> 00:25:30,529
have to be updated they can just use the

00:25:27,200 --> 00:25:32,929
new version of the service once you've

00:25:30,529 --> 00:25:35,240
created your class that is that service

00:25:32,929 --> 00:25:38,360
you need to register your service with

00:25:35,240 --> 00:25:40,730
Drupal so that it gets so the Drupal

00:25:38,360 --> 00:25:43,220
dependency injection container can

00:25:40,730 --> 00:25:45,350
locate the service and then later on you

00:25:43,220 --> 00:25:49,429
can make use of it this is done by

00:25:45,350 --> 00:25:50,990
adding a dot services that yml file in

00:25:49,429 --> 00:25:52,029
your module so this is just the yamo

00:25:50,990 --> 00:25:54,159
file that has the

00:25:52,029 --> 00:25:56,229
data about your service it says here's

00:25:54,159 --> 00:25:57,940
the unique name of my service here's the

00:25:56,229 --> 00:26:00,399
location of the class that implements

00:25:57,940 --> 00:26:03,129
the service here are any other services

00:26:00,399 --> 00:26:07,080
that mine depends on so for example your

00:26:03,129 --> 00:26:10,149
twitter client may also depend on the

00:26:07,080 --> 00:26:11,950
HTTP request service that is used in

00:26:10,149 --> 00:26:14,109
order to make requests across to another

00:26:11,950 --> 00:26:17,529
server and may depend on a few other

00:26:14,109 --> 00:26:20,219
services within Drupal as well the

00:26:17,529 --> 00:26:23,619
whites Drupal knows about that service

00:26:20,219 --> 00:26:25,419
during the life cycle of a page if you

00:26:23,619 --> 00:26:27,190
ever wanted to make use of your service

00:26:25,419 --> 00:26:28,979
or any of the existing ones you have

00:26:27,190 --> 00:26:32,529
gained access to it by using the

00:26:28,979 --> 00:26:34,239
services container so this is one

00:26:32,529 --> 00:26:37,719
example of how you can do that you will

00:26:34,239 --> 00:26:39,129
use the this call like this the unique

00:26:37,719 --> 00:26:41,139
name of the service that you're trying

00:26:39,129 --> 00:26:45,129
to use and what that will do is return

00:26:41,139 --> 00:26:47,049
an instantiated copy of that service the

00:26:45,129 --> 00:26:48,909
nice thing about doing it this way this

00:26:47,049 --> 00:26:51,009
is kind of a level of indirection and

00:26:48,909 --> 00:26:52,690
that allows Drupal to say hey you know

00:26:51,009 --> 00:26:54,969
what on this particular request I

00:26:52,690 --> 00:26:57,190
actually want to use the test version of

00:26:54,969 --> 00:27:00,849
this service it also this will

00:26:57,190 --> 00:27:03,909
automatically deal with in your services

00:27:00,849 --> 00:27:06,389
dot yml file where you said my Twitter

00:27:03,909 --> 00:27:09,399
client depends on these other services

00:27:06,389 --> 00:27:12,219
if I get a copy of the service through

00:27:09,399 --> 00:27:14,679
Drupal's service container it will have

00:27:12,219 --> 00:27:16,779
already loaded and made those other

00:27:14,679 --> 00:27:18,399
services available as well so I can just

00:27:16,779 --> 00:27:19,929
say hey give me a Twitter client it'll

00:27:18,399 --> 00:27:25,239
take care of all the dependencies for

00:27:19,929 --> 00:27:27,279
you my advice would be any time that

00:27:25,239 --> 00:27:30,099
you've got custom business logic inside

00:27:27,279 --> 00:27:33,549
of a module implement that business

00:27:30,099 --> 00:27:36,489
logic as a service and then use these

00:27:33,549 --> 00:27:38,259
other methods like plugins or if it's

00:27:36,489 --> 00:27:39,909
you know logic that displays something

00:27:38,259 --> 00:27:42,940
on the page of the controller as a

00:27:39,909 --> 00:27:44,619
wrapper around your service to do the

00:27:42,940 --> 00:27:46,869
thing with just like basically to make

00:27:44,619 --> 00:27:48,429
your service talk to Drupal the benefit

00:27:46,869 --> 00:27:50,529
of doing it this way is your code

00:27:48,429 --> 00:27:51,720
becomes more portable in that it's no

00:27:50,529 --> 00:27:53,880
longer necessarily

00:27:51,720 --> 00:27:55,020
pendant on the existence of Drupal to

00:27:53,880 --> 00:27:57,990
work and you can move it to another

00:27:55,020 --> 00:28:01,799
system you can start to create composer

00:27:57,990 --> 00:28:03,090
plugins for example but kind of any time

00:28:01,799 --> 00:28:04,980
that you've got like custom business

00:28:03,090 --> 00:28:10,860
logic thinking about implementing that

00:28:04,980 --> 00:28:12,870
as a service there's a bunch of links

00:28:10,860 --> 00:28:15,120
here for more information about how the

00:28:12,870 --> 00:28:17,400
services system works and there's also

00:28:15,120 --> 00:28:19,860
talk about services today at three

00:28:17,400 --> 00:28:21,720
forty-five this talk is actually it's

00:28:19,860 --> 00:28:23,970
listed as i talked about dependency

00:28:21,720 --> 00:28:26,130
injection but you can't really talk

00:28:23,970 --> 00:28:29,700
about dependency injection without also

00:28:26,130 --> 00:28:30,780
talking about services so you'll assume

00:28:29,700 --> 00:28:34,860
that you'll learn a bunch of our

00:28:30,780 --> 00:28:38,039
services in that talk all right so we

00:28:34,860 --> 00:28:39,720
got plugins and services so plugin in

00:28:38,039 --> 00:28:42,059
both of those essentially allow you to

00:28:39,720 --> 00:28:43,830
provide new functionality to Drupal or

00:28:42,059 --> 00:28:46,289
really to like replace some existing

00:28:43,830 --> 00:28:48,450
functionality with something that does

00:28:46,289 --> 00:28:51,179
the same job but in a different way what

00:28:48,450 --> 00:28:54,950
about if I want to respond to actions or

00:28:51,179 --> 00:28:57,659
events that take place within your book

00:28:54,950 --> 00:28:59,970
so one of the new ways to do that is

00:28:57,659 --> 00:29:02,760
with your both events system this is a

00:28:59,970 --> 00:29:06,059
pretty common pattern it's basically the

00:29:02,760 --> 00:29:07,830
idea that once actions happen Drupal

00:29:06,059 --> 00:29:10,140
will broadcast a notification that

00:29:07,830 --> 00:29:13,440
something just happened and you can

00:29:10,140 --> 00:29:17,520
subscribe to the Med system and say hey

00:29:13,440 --> 00:29:19,950
Drupal whenever it user logs in I'd like

00:29:17,520 --> 00:29:22,260
you to notify me about it or whatever

00:29:19,950 --> 00:29:23,760
somebody deletes a node could you notify

00:29:22,260 --> 00:29:27,000
me about the fact that it knows was

00:29:23,760 --> 00:29:29,490
deleted and then I can if I want to do

00:29:27,000 --> 00:29:32,640
something with that information so you

00:29:29,490 --> 00:29:36,330
subscribe to events to get notified of

00:29:32,640 --> 00:29:38,010
when they happen whenever any event is

00:29:36,330 --> 00:29:39,539
triggered there's also usually some

00:29:38,010 --> 00:29:41,370
additional information that's passed

00:29:39,539 --> 00:29:44,940
along with the event so you might have

00:29:41,370 --> 00:29:47,549
like event name user login and then any

00:29:44,940 --> 00:29:50,100
object itself that represents the event

00:29:47,549 --> 00:29:52,500
and that event object will probably have

00:29:50,100 --> 00:29:54,600
like here's the user object

00:29:52,500 --> 00:29:56,970
the user that just logged in and so now

00:29:54,600 --> 00:30:00,740
I can use that contextual information to

00:29:56,970 --> 00:30:03,480
I don't know do something useful with

00:30:00,740 --> 00:30:05,820
expand our Twitter example i can write

00:30:03,480 --> 00:30:07,710
my drupal site to automatically post the

00:30:05,820 --> 00:30:13,710
comment on twitter whenever somebody

00:30:07,710 --> 00:30:16,590
logged in that's useful right events are

00:30:13,710 --> 00:30:18,870
this isn't this is not a gerbil pattern

00:30:16,590 --> 00:30:20,460
and this is not a new pattern it's new

00:30:18,870 --> 00:30:22,530
in Drupal though it's something that if

00:30:20,460 --> 00:30:24,060
you've worked in other object oriented

00:30:22,530 --> 00:30:25,740
systems you've probably encountered if

00:30:24,060 --> 00:30:27,810
you've ever written jquery you've

00:30:25,740 --> 00:30:30,780
probably implemented an event listener

00:30:27,810 --> 00:30:32,970
pattern any time that you are using

00:30:30,780 --> 00:30:34,740
javascript to say hey when somebody

00:30:32,970 --> 00:30:36,870
clicks on this link I want to do

00:30:34,740 --> 00:30:39,390
something that's the equivalent of

00:30:36,870 --> 00:30:41,520
subscribing to me back you're saying hey

00:30:39,390 --> 00:30:43,140
browser notify me that somebody clicked

00:30:41,520 --> 00:30:48,360
on the link and i'll do something with

00:30:43,140 --> 00:30:50,540
that information I like events because

00:30:48,360 --> 00:30:55,080
it's a pattern that I already know and

00:30:50,540 --> 00:30:57,690
it means that at least it like a mental

00:30:55,080 --> 00:31:00,090
model level I understand the concept of

00:30:57,690 --> 00:31:01,980
an event happens and I can subscribe to

00:31:00,090 --> 00:31:04,410
it I can expect to get some additional

00:31:01,980 --> 00:31:08,460
contextual data about that event and do

00:31:04,410 --> 00:31:10,730
something with it I I'm hopeful that

00:31:08,460 --> 00:31:12,870
this is useful for people who are new

00:31:10,730 --> 00:31:15,150
developers to Drupal or making the

00:31:12,870 --> 00:31:16,500
transition from some other system into

00:31:15,150 --> 00:31:18,990
Drupal because it's a pattern that

00:31:16,500 --> 00:31:21,270
they're probably more familiar with from

00:31:18,990 --> 00:31:26,310
other systems then for example hooks

00:31:21,270 --> 00:31:28,020
which are totally a Drupal ism with the

00:31:26,310 --> 00:31:30,800
events you do you do two different

00:31:28,020 --> 00:31:33,510
things you either subscribe to my events

00:31:30,800 --> 00:31:34,980
which is basically me saying I would

00:31:33,510 --> 00:31:37,260
like to do something when somebody

00:31:34,980 --> 00:31:42,150
else's code has performed in action or

00:31:37,260 --> 00:31:44,700
you broadcast the event you say I just

00:31:42,150 --> 00:31:46,920
did something and if anybody else wants

00:31:44,700 --> 00:31:49,830
to respond here's your opportunity to do

00:31:46,920 --> 00:31:52,710
so if you want to subscribe to event

00:31:49,830 --> 00:31:53,910
what you need to do is figure out what

00:31:52,710 --> 00:31:57,320
events it is that you're going to

00:31:53,910 --> 00:31:59,539
subscribe to there's a list on a VI

00:31:57,320 --> 00:32:02,539
all the events that are emitted by

00:31:59,539 --> 00:32:04,850
Drupal core and Symphony as well

00:32:02,539 --> 00:32:06,620
actually drupal 8 has a lot of symphony

00:32:04,850 --> 00:32:08,630
components built into it and makes use

00:32:06,620 --> 00:32:12,380
of those in various different ways and a

00:32:08,630 --> 00:32:13,970
lot of symphony components allow you to

00:32:12,380 --> 00:32:15,409
communicate with the things that are

00:32:13,970 --> 00:32:18,860
happening within that component by

00:32:15,409 --> 00:32:20,149
broadcasting events so you figure out

00:32:18,860 --> 00:32:23,029
what you meant it if you want to

00:32:20,149 --> 00:32:26,870
subscribe to and then you need to create

00:32:23,029 --> 00:32:31,639
a new service that is tagged as an event

00:32:26,870 --> 00:32:33,500
subscriber come back the kind of why in

00:32:31,639 --> 00:32:35,899
a second but what this looks like is the

00:32:33,500 --> 00:32:38,659
inside of your services that llamo file

00:32:35,899 --> 00:32:41,269
yeah and entry like this that basically

00:32:38,659 --> 00:32:43,460
like hey here's my class that's going to

00:32:41,269 --> 00:32:46,039
do some work whenever this event happens

00:32:43,460 --> 00:32:47,899
and here's the just tag me and I'm

00:32:46,039 --> 00:32:51,080
saying this thing is any vents

00:32:47,899 --> 00:32:52,909
subscriber the reason that this that you

00:32:51,080 --> 00:32:54,379
have to register your event subscribers

00:32:52,909 --> 00:32:56,090
like this is so that Drupal can be a

00:32:54,379 --> 00:32:58,309
little bit more performance about the

00:32:56,090 --> 00:33:00,409
way that you dispatches events so rather

00:32:58,309 --> 00:33:03,169
than dispatching an event is saying okay

00:33:00,409 --> 00:33:04,639
now I have to go find every possible

00:33:03,169 --> 00:33:06,200
place that there could be code that

00:33:04,639 --> 00:33:07,519
might want to listen to an event and

00:33:06,200 --> 00:33:10,730
then actually see if they're listening

00:33:07,519 --> 00:33:14,600
to that event the service container

00:33:10,730 --> 00:33:16,460
using this information and at one time

00:33:14,600 --> 00:33:18,679
will run through and find all of the

00:33:16,460 --> 00:33:20,240
things that listen to events and which

00:33:18,679 --> 00:33:22,039
event they're listening to and it

00:33:20,240 --> 00:33:23,990
compiles a list of those and basically

00:33:22,039 --> 00:33:26,539
caches it so then when an event is

00:33:23,990 --> 00:33:28,549
emitted it can just look at the that

00:33:26,539 --> 00:33:29,840
cash list and it's much more performance

00:33:28,549 --> 00:33:31,820
than having to look it all up in real

00:33:29,840 --> 00:33:34,730
time of course you have to provide some

00:33:31,820 --> 00:33:38,690
way for it to find none once you've done

00:33:34,730 --> 00:33:41,090
that part you implement you create a new

00:33:38,690 --> 00:33:44,960
class that implements the events

00:33:41,090 --> 00:33:46,789
subscriber interface in that class you

00:33:44,960 --> 00:33:50,360
do two things you have a method that

00:33:46,789 --> 00:33:52,279
says here's a list of the either the one

00:33:50,360 --> 00:33:54,679
event or the multiple events that i

00:33:52,279 --> 00:33:57,590
would like to be notified of and then

00:33:54,679 --> 00:33:59,450
here's the PHP callable so the function

00:33:57,590 --> 00:34:01,520
or the method on a class that i would

00:33:59,450 --> 00:34:04,430
like you to trigger whenever that

00:34:01,520 --> 00:34:06,200
that happens so so pretty

00:34:04,430 --> 00:34:08,330
straightforward is basically a list of

00:34:06,200 --> 00:34:11,450
things I want to know about when that

00:34:08,330 --> 00:34:14,149
happens you can let me know by calling

00:34:11,450 --> 00:34:16,280
this function or this method right here

00:34:14,149 --> 00:34:19,550
and then within that function or method

00:34:16,280 --> 00:34:21,110
you would do whatever work it is that

00:34:19,550 --> 00:34:23,990
you would want it to do when someone

00:34:21,110 --> 00:34:25,880
that event happened so for example this

00:34:23,990 --> 00:34:27,770
is where i would say i'd like to

00:34:25,880 --> 00:34:30,320
subscribe to notification for what's up

00:34:27,770 --> 00:34:32,240
ever someone logs in and then when they

00:34:30,320 --> 00:34:35,840
login call this method and then within

00:34:32,240 --> 00:34:38,240
that method i would probably use the

00:34:35,840 --> 00:34:40,850
service container to load a copy of my

00:34:38,240 --> 00:34:42,530
twitter client that service we created

00:34:40,850 --> 00:34:45,290
and then i could use that service in

00:34:42,530 --> 00:34:50,990
order to post a message on twitter that

00:34:45,290 --> 00:34:52,040
Joe just logged into his website the

00:34:50,990 --> 00:34:54,950
other time that you're going to use the

00:34:52,040 --> 00:34:57,470
events is if you want to dispatch events

00:34:54,950 --> 00:35:03,110
so that someone else can listen

00:34:57,470 --> 00:35:05,030
subscribe to those in react a lot of

00:35:03,110 --> 00:35:09,130
third-party api's have this notion of

00:35:05,030 --> 00:35:11,990
web hooks so some some action happens on

00:35:09,130 --> 00:35:14,090
your payment gateway website and when

00:35:11,990 --> 00:35:16,190
that happened the payment gateway pings

00:35:14,090 --> 00:35:18,140
your site and says hey this just

00:35:16,190 --> 00:35:21,350
happened here's some information about

00:35:18,140 --> 00:35:23,450
it so you're right a module then receive

00:35:21,350 --> 00:35:24,890
that incoming post data and does

00:35:23,450 --> 00:35:28,550
something with it you know update

00:35:24,890 --> 00:35:30,610
somebody's account status or whatever

00:35:28,550 --> 00:35:33,440
you do with that web hook information

00:35:30,610 --> 00:35:36,050
but the problem with that scenario is in

00:35:33,440 --> 00:35:37,520
most cases you you receive the data and

00:35:36,050 --> 00:35:39,260
you can do something with it but now

00:35:37,520 --> 00:35:41,210
what if I want to extend that a little

00:35:39,260 --> 00:35:44,870
bit I'd like to write a module that also

00:35:41,210 --> 00:35:46,940
does something when the payment gateway

00:35:44,870 --> 00:35:50,270
pings our website and says someone just

00:35:46,940 --> 00:35:53,120
made a payment so as the module that

00:35:50,270 --> 00:35:55,670
implements the payment gateway API what

00:35:53,120 --> 00:35:57,860
you might want to do is whenever that

00:35:55,670 --> 00:35:59,400
action happens do whatever you need to

00:35:57,860 --> 00:36:02,760
do but then this

00:35:59,400 --> 00:36:05,730
event so that others can also respond to

00:36:02,760 --> 00:36:08,339
that request in fact we should really do

00:36:05,730 --> 00:36:09,349
is receive the notification and then

00:36:08,339 --> 00:36:12,240
just turn around and immediately

00:36:09,349 --> 00:36:13,619
dispatch an event and then you can just

00:36:12,240 --> 00:36:15,390
write your own and then you can

00:36:13,619 --> 00:36:17,849
subscribe to the event that you are

00:36:15,390 --> 00:36:20,549
dispatching basically like eat your own

00:36:17,849 --> 00:36:24,569
dog food that way that your components

00:36:20,549 --> 00:36:26,760
are all nicely decoupled so if you want

00:36:24,569 --> 00:36:36,270
to dispatch an event the recipe for

00:36:26,760 --> 00:36:40,289
doing that is me create a new class and

00:36:36,270 --> 00:36:42,930
place it into this PSR for names base so

00:36:40,289 --> 00:36:46,380
Drupal your module name events and then

00:36:42,930 --> 00:36:49,170
your class this class is not actually

00:36:46,380 --> 00:36:50,940
really used for any functionality but

00:36:49,170 --> 00:36:53,579
what it does is it serves as

00:36:50,940 --> 00:36:55,529
documentation of the events that you're

00:36:53,579 --> 00:36:58,559
broadcasting because here's the thing if

00:36:55,529 --> 00:37:00,210
people don't know what events you're

00:36:58,559 --> 00:37:01,710
dispatching there's no way they're going

00:37:00,210 --> 00:37:03,779
to be able to subscribe to them and

00:37:01,710 --> 00:37:05,730
actually do anything useful so the first

00:37:03,779 --> 00:37:08,160
step to making a useful event system is

00:37:05,730 --> 00:37:10,920
documenting those events that's done by

00:37:08,160 --> 00:37:12,930
creating one of these dumb of creating a

00:37:10,920 --> 00:37:15,960
class in this namespace and then

00:37:12,930 --> 00:37:17,849
providing properties on that class that

00:37:15,960 --> 00:37:19,740
are the unique names of the event and

00:37:17,849 --> 00:37:21,119
that gives you a space in the

00:37:19,740 --> 00:37:23,970
documentation to where you can basically

00:37:21,119 --> 00:37:27,270
write a doc block for that property that

00:37:23,970 --> 00:37:29,460
says you know the event name is user dot

00:37:27,270 --> 00:37:31,819
log in this event is triggered whenever

00:37:29,460 --> 00:37:33,990
somebody logs in to your site blah blah

00:37:31,819 --> 00:37:38,130
well don't write blah blah blah on your

00:37:33,990 --> 00:37:42,809
documentation but you get the point so

00:37:38,130 --> 00:37:45,930
document the events and then in your

00:37:42,809 --> 00:37:48,660
code wherever you would like to trigger

00:37:45,930 --> 00:37:50,670
any event you'd like to say this just

00:37:48,660 --> 00:37:54,180
happened and dispatch it you'll use the

00:37:50,670 --> 00:37:58,589
event dispatcher so that's there's a

00:37:54,180 --> 00:38:01,289
service for that there's this thumb here

00:37:58,589 --> 00:38:04,450
in line the third one is basically you

00:38:01,289 --> 00:38:06,970
use the container aware event this

00:38:04,450 --> 00:38:08,950
sure and call the dispatch method give

00:38:06,970 --> 00:38:10,300
it the name of the event but the name of

00:38:08,950 --> 00:38:13,000
the event is that thing that you just

00:38:10,300 --> 00:38:16,089
documented in the class so that people

00:38:13,000 --> 00:38:17,770
can discover it you also wanted this I

00:38:16,089 --> 00:38:20,170
point this out specifically that you'll

00:38:17,770 --> 00:38:22,930
want to make sure you're using drupal's

00:38:20,170 --> 00:38:25,210
container aware event dispatcher and not

00:38:22,930 --> 00:38:27,160
just the event dispatcher that comes

00:38:25,210 --> 00:38:29,710
with symphony because the container

00:38:27,160 --> 00:38:32,550
where one is a bit more performance and

00:38:29,710 --> 00:38:35,410
that's the more Drupal way of doing this

00:38:32,550 --> 00:38:37,780
so that's the recipe for dispatching

00:38:35,410 --> 00:38:40,210
event basically come up with a unique

00:38:37,780 --> 00:38:41,619
name for your event documented and then

00:38:40,210 --> 00:38:43,300
in the appropriate place in your code

00:38:41,619 --> 00:38:45,160
where you'd like to notify others that

00:38:43,300 --> 00:38:48,130
something is going on use the event

00:38:45,160 --> 00:38:50,200
dispatcher to say this is what just

00:38:48,130 --> 00:38:52,960
happened and create a class that an

00:38:50,200 --> 00:38:57,130
implementation of the event interface

00:38:52,960 --> 00:38:59,500
and that will you whenever you dispatch

00:38:57,130 --> 00:39:01,450
an event you pass in an event object in

00:38:59,500 --> 00:39:03,700
the event object contains information

00:39:01,450 --> 00:39:06,070
like this is the name of the event that

00:39:03,700 --> 00:39:08,440
was just dispatched in the case that

00:39:06,070 --> 00:39:10,270
it's a in a notification that a user

00:39:08,440 --> 00:39:12,369
just logged in and probably contains the

00:39:10,270 --> 00:39:14,020
user login for the object that

00:39:12,369 --> 00:39:15,730
represents the users it just logged in

00:39:14,020 --> 00:39:18,010
and maybe the time that the event

00:39:15,730 --> 00:39:20,349
happened it's basically contextual data

00:39:18,010 --> 00:39:22,000
about the current state of the

00:39:20,349 --> 00:39:26,650
application when that II bank was

00:39:22,000 --> 00:39:29,890
triggered this slot has a bunch of links

00:39:26,650 --> 00:39:31,960
to things that you can read about more

00:39:29,890 --> 00:39:36,060
about how the event system works in case

00:39:31,960 --> 00:39:38,589
you want to follow up on that and

00:39:36,060 --> 00:39:40,990
finally the last one that we need to

00:39:38,589 --> 00:39:43,780
talk about is hooks if you've written

00:39:40,990 --> 00:39:45,790
modules for Drupal 7 the hook pattern I

00:39:43,780 --> 00:39:47,530
was going to say should be familiar to

00:39:45,790 --> 00:39:49,599
you but if you've written modules for

00:39:47,530 --> 00:39:51,970
Drupal 7 you have to know about the hook

00:39:49,599 --> 00:39:54,819
pattern because all of these things that

00:39:51,970 --> 00:39:59,140
we've just talked about are implemented

00:39:54,819 --> 00:40:01,390
as hooks in Drupal 7 in Drupal 8 we

00:39:59,140 --> 00:40:03,310
still have the notion of hooks we just

00:40:01,390 --> 00:40:06,700
don't use them for everything like we

00:40:03,310 --> 00:40:11,140
did it in Drupal 7 and they still the

00:40:06,700 --> 00:40:13,720
pattern is still pretty much the same we

00:40:11,140 --> 00:40:15,550
in Drupal 8 you'll primarily see hooks

00:40:13,720 --> 00:40:17,650
used for the occasion

00:40:15,550 --> 00:40:20,710
where you need to alter some existing

00:40:17,650 --> 00:40:22,750
functionality for example the plug-in

00:40:20,710 --> 00:40:25,210
system allows you to create a new

00:40:22,750 --> 00:40:27,700
plug-in type and part of creating the

00:40:25,210 --> 00:40:29,290
way the plug-in system works is it said

00:40:27,700 --> 00:40:31,930
I need to get a list of all of the

00:40:29,290 --> 00:40:34,480
instances of block plugins so that I

00:40:31,930 --> 00:40:38,530
know what are what's available for an

00:40:34,480 --> 00:40:40,420
administrator the hook system after that

00:40:38,530 --> 00:40:42,150
all that meta data is gathered here's a

00:40:40,420 --> 00:40:45,910
list of all the blocks the hook system

00:40:42,150 --> 00:40:47,860
allows you to say and I'd like to give

00:40:45,910 --> 00:40:50,110
other people the opportunity to alter

00:40:47,860 --> 00:40:53,080
that list one last time before I prevent

00:40:50,110 --> 00:40:55,300
presented to the user so in Drupal 7 is

00:40:53,080 --> 00:40:57,580
often implemented as a pattern like you

00:40:55,300 --> 00:40:59,860
have an info book immediately followed

00:40:57,580 --> 00:41:01,720
by an altar hook so it's like give me a

00:40:59,860 --> 00:41:03,940
list of all the menu items now give

00:41:01,720 --> 00:41:06,760
everybody a chance to alter the list of

00:41:03,940 --> 00:41:08,880
menu items that I just created the other

00:41:06,760 --> 00:41:11,980
use case that we see a lot in is still

00:41:08,880 --> 00:41:14,380
the primary way of altering forms in

00:41:11,980 --> 00:41:15,820
Drupal 8 is using altar hooks so anytime

00:41:14,380 --> 00:41:17,860
that you want to make changes to one of

00:41:15,820 --> 00:41:21,730
the existing forms you would do so by

00:41:17,860 --> 00:41:23,800
implementing hook for Mulder there was

00:41:21,730 --> 00:41:27,400
there was some work done to start to

00:41:23,800 --> 00:41:30,400
convert all of these things that are

00:41:27,400 --> 00:41:33,430
still hooks to the other systems

00:41:30,400 --> 00:41:35,050
primarily events it hasn't not

00:41:33,430 --> 00:41:36,490
everything has been converted good so

00:41:35,050 --> 00:41:38,590
there's a little bit of a weird like

00:41:36,490 --> 00:41:39,910
some things are events in some are hooks

00:41:38,590 --> 00:41:45,220
and sometimes it can be a little bit

00:41:39,910 --> 00:41:48,610
tricky to figure out which which pattern

00:41:45,220 --> 00:41:50,650
you should be implementing when it comes

00:41:48,610 --> 00:41:53,020
to like trying to interact with your

00:41:50,650 --> 00:41:54,520
book or I would say you gel really

00:41:53,020 --> 00:41:56,770
you're limited to just saying does

00:41:54,520 --> 00:41:58,600
Drupal core let me change this as a hook

00:41:56,770 --> 00:42:00,910
or does it tell me about it as an event

00:41:58,600 --> 00:42:03,070
and you have to do it that way when

00:42:00,910 --> 00:42:05,620
you're writing your own module you can

00:42:03,070 --> 00:42:08,350
kind of make that distinction you can

00:42:05,620 --> 00:42:11,260
decide am I going to dispatch an events

00:42:08,350 --> 00:42:15,580
or am I going to call a hook or trigger

00:42:11,260 --> 00:42:17,530
ugh my advice would be in most cases you

00:42:15,580 --> 00:42:20,680
are probably going to want to dispatch

00:42:17,530 --> 00:42:24,070
events and I think that what we'll see

00:42:20,680 --> 00:42:24,680
over time is Drupal core will shift more

00:42:24,070 --> 00:42:27,140
and more

00:42:24,680 --> 00:42:29,440
to implementing events and remove more

00:42:27,140 --> 00:42:32,119
and more hooks especially once there's a

00:42:29,440 --> 00:42:34,220
performant way to handle this form

00:42:32,119 --> 00:42:35,839
altering or this idea of like here's a

00:42:34,220 --> 00:42:38,839
big list of things that I'd like you to

00:42:35,839 --> 00:42:40,430
be able to modify the list that will see

00:42:38,839 --> 00:42:44,000
more and more things implemented as

00:42:40,430 --> 00:42:46,880
events so it's your writing new modules

00:42:44,000 --> 00:42:48,530
for Drupal 8 for the most part I would

00:42:46,880 --> 00:42:50,450
say you'd want to dispatch events

00:42:48,530 --> 00:42:52,309
because that's a pattern that people are

00:42:50,450 --> 00:42:54,380
going to be more familiar with and going

00:42:52,309 --> 00:42:56,089
forward I think that's going to become

00:42:54,380 --> 00:43:00,950
the dominant pattern for how this is

00:42:56,089 --> 00:43:03,200
handled I kind of mod said this already

00:43:00,950 --> 00:43:05,390
though hooks are really great for

00:43:03,200 --> 00:43:06,829
altering existing information and part

00:43:05,390 --> 00:43:08,690
of the reason that they still exist in

00:43:06,829 --> 00:43:10,609
Drupal 8 is they're just really fast

00:43:08,690 --> 00:43:12,440
that allowing that to happen there's

00:43:10,609 --> 00:43:14,809
very little overhead to call in a hook

00:43:12,440 --> 00:43:17,390
it's just a function that if it exists

00:43:14,809 --> 00:43:19,700
drupal will call it you can pass in an

00:43:17,390 --> 00:43:21,440
array the array can be modified like it

00:43:19,700 --> 00:43:25,460
really doesn't get much faster than that

00:43:21,440 --> 00:43:26,720
in PHP eventually though I think that

00:43:25,460 --> 00:43:28,940
that's going to change and we'll figure

00:43:26,720 --> 00:43:31,549
out ways to be just as performant or

00:43:28,940 --> 00:43:33,140
close to using the vent system and a lot

00:43:31,549 --> 00:43:37,460
of things that we do is alter both now

00:43:33,140 --> 00:43:40,040
we're going to change I also kind of

00:43:37,460 --> 00:43:42,200
point this out because late hooks are

00:43:40,040 --> 00:43:44,329
totally a Drupal ism whereas all these

00:43:42,200 --> 00:43:46,400
other things are similar to patterns

00:43:44,329 --> 00:43:48,890
that are seamen seen in other frameworks

00:43:46,400 --> 00:43:50,660
hooks are totally a Drupal thing and a

00:43:48,890 --> 00:43:52,780
large part of that is that at the time

00:43:50,660 --> 00:43:55,250
that Drupal was originally created and

00:43:52,780 --> 00:43:57,859
you know the community wanted it to be

00:43:55,250 --> 00:43:59,540
flexible a flexible system that you can

00:43:57,859 --> 00:44:01,819
all join extend without having to have

00:43:59,540 --> 00:44:05,750
core pokes was kind of the best system

00:44:01,819 --> 00:44:09,819
available at the time in PHP PHP has

00:44:05,750 --> 00:44:12,410
advanced a lot in the last 10 12 years

00:44:09,819 --> 00:44:13,790
and so there are new things that we can

00:44:12,410 --> 00:44:15,559
do in Drupal 8 is starting to take

00:44:13,790 --> 00:44:19,010
advantage of a lot of those and ways

00:44:15,559 --> 00:44:20,839
that we happen before if you need to

00:44:19,010 --> 00:44:22,490
implement the hook in your module this

00:44:20,839 --> 00:44:24,859
is how you do it I'm gonna go faster

00:44:22,490 --> 00:44:26,390
this is probably pretty familiar you

00:44:24,859 --> 00:44:28,090
determine what the name of the hook is

00:44:26,390 --> 00:44:30,580
typically you do this by going to do

00:44:28,090 --> 00:44:32,530
or can start typing hook underscore into

00:44:30,580 --> 00:44:34,960
the search field and see which of the

00:44:32,530 --> 00:44:36,280
like 700 things that is returned looks

00:44:34,960 --> 00:44:39,940
the most like the one that you might

00:44:36,280 --> 00:44:43,630
want to implement you then create a new

00:44:39,940 --> 00:44:46,840
function inside of a dot module file and

00:44:43,630 --> 00:44:48,580
you replace the word hook in the

00:44:46,840 --> 00:44:50,470
documentation of that functions name

00:44:48,580 --> 00:44:53,290
with the name of your module if that

00:44:50,470 --> 00:44:54,940
function exists or its own they're

00:44:53,290 --> 00:44:57,850
basically what a hook is triggered

00:44:54,940 --> 00:44:59,650
Drupal says hey of all of the modules

00:44:57,850 --> 00:45:01,930
that are currently enabled do any of

00:44:59,650 --> 00:45:04,330
them have a function that is module name

00:45:01,930 --> 00:45:05,410
underscore hook name if they do I'm

00:45:04,330 --> 00:45:09,490
going to go ahead and call that right

00:45:05,410 --> 00:45:12,640
now and then you implement your hook

00:45:09,490 --> 00:45:17,140
according to the documentation which is

00:45:12,640 --> 00:45:18,580
like okay this is one of the things that

00:45:17,140 --> 00:45:20,830
i love about all of the other new

00:45:18,580 --> 00:45:22,540
systems that we have the idea that much

00:45:20,830 --> 00:45:24,390
of it is implemented around PHP

00:45:22,540 --> 00:45:26,560
interfaces and more modern

00:45:24,390 --> 00:45:28,990
object-oriented programming techniques

00:45:26,560 --> 00:45:31,150
is that when it came to hooks it was

00:45:28,990 --> 00:45:32,950
always like hopes was the system that

00:45:31,150 --> 00:45:34,660
you would implement but then for every

00:45:32,950 --> 00:45:36,430
cookie you were implementing what you

00:45:34,660 --> 00:45:38,170
did inside of that function was

00:45:36,430 --> 00:45:39,850
different and it wasn't just kind of

00:45:38,170 --> 00:45:41,740
different it was like you know there's a

00:45:39,850 --> 00:45:43,690
dozen info hooks whatever one of them

00:45:41,740 --> 00:45:45,940
returns a different style of structured

00:45:43,690 --> 00:45:48,070
array there's a dozen hooks that are

00:45:45,940 --> 00:45:51,280
called for different events that happen

00:45:48,070 --> 00:45:53,560
on it when a node is different no

00:45:51,280 --> 00:45:55,810
related events on a known saved or

00:45:53,560 --> 00:45:58,060
loaded from the database or updated so

00:45:55,810 --> 00:45:59,320
forth in each of those was slightly

00:45:58,060 --> 00:46:01,030
different so you can always have to go

00:45:59,320 --> 00:46:03,640
look up the documentation for the hook

00:46:01,030 --> 00:46:05,890
to figure out what you could actually do

00:46:03,640 --> 00:46:07,870
with that whereas I believe that

00:46:05,890 --> 00:46:11,020
interfaces will make it a little bit

00:46:07,870 --> 00:46:12,670
easier as a developer to determine for

00:46:11,020 --> 00:46:17,410
example if I'm going to create a new

00:46:12,670 --> 00:46:19,990
block and I know how the plug-in system

00:46:17,410 --> 00:46:22,060
works well enough that at a certain

00:46:19,990 --> 00:46:23,320
point all I'm really doing is creating a

00:46:22,060 --> 00:46:25,240
new block plug-in which is an

00:46:23,320 --> 00:46:26,920
implementation of some interface and I'm

00:46:25,240 --> 00:46:29,170
interval since I'm implementing the

00:46:26,920 --> 00:46:30,940
interface I know that my class has to

00:46:29,170 --> 00:46:34,270
have a label method in the body method

00:46:30,940 --> 00:46:36,640
and then Drupal will know how to make

00:46:34,270 --> 00:46:37,119
use of it versus the Drupal 7 version of

00:46:36,640 --> 00:46:38,559
that is

00:46:37,119 --> 00:46:40,690
well you have to know that you need to

00:46:38,559 --> 00:46:43,650
implement hook block info and a hook

00:46:40,690 --> 00:46:46,210
block info returns meta data and

00:46:43,650 --> 00:46:48,730
possibly some callback like names of

00:46:46,210 --> 00:46:50,499
callbacks as well but then you also have

00:46:48,730 --> 00:46:51,880
to know that there's this other magical

00:46:50,499 --> 00:46:53,980
function that might get called the fit

00:46:51,880 --> 00:46:55,359
is this which is hook block view and if

00:46:53,980 --> 00:46:58,660
you don't implement hoof blog view

00:46:55,359 --> 00:46:59,769
people can place your blog into a region

00:46:58,660 --> 00:47:01,180
on their site but there wouldn't

00:46:59,769 --> 00:47:02,859
actually be any content in it because

00:47:01,180 --> 00:47:04,539
you didn't implement this other function

00:47:02,859 --> 00:47:07,509
because there was no way of enforcing

00:47:04,539 --> 00:47:10,029
that that function right there and so I

00:47:07,509 --> 00:47:12,549
think that hopefully some of these new

00:47:10,029 --> 00:47:15,569
systems will make the patterns a little

00:47:12,549 --> 00:47:18,099
bit easier to discover within Drupal 8

00:47:15,569 --> 00:47:21,999
anyway you read the documentation and

00:47:18,099 --> 00:47:23,980
then implement your hook in for good

00:47:21,999 --> 00:47:25,509
measure after implementing the hook or

00:47:23,980 --> 00:47:28,240
the first time adding it you'll want to

00:47:25,509 --> 00:47:29,920
clear the cache certain books or not the

00:47:28,240 --> 00:47:33,549
hook itself but the fact that the hook

00:47:29,920 --> 00:47:35,289
exists is cash in certain cases for

00:47:33,549 --> 00:47:37,450
basically just for performance reasons

00:47:35,289 --> 00:47:38,680
and so if you've implemented a hook and

00:47:37,450 --> 00:47:40,450
you're like huh it seems like my co

00:47:38,680 --> 00:47:43,480
doesn't get it called it's probably

00:47:40,450 --> 00:47:45,910
because you need to clear the cache if

00:47:43,480 --> 00:47:49,359
you're going to dispatch hooks so for

00:47:45,910 --> 00:47:52,499
example you written a system that

00:47:49,359 --> 00:47:54,999
gathers a bunch of metadata about

00:47:52,499 --> 00:47:56,890
whatever if you got a bunch of

00:47:54,999 --> 00:47:58,599
information from other modules and you

00:47:56,890 --> 00:48:00,220
want to give people the chance to alter

00:47:58,599 --> 00:48:03,579
them so you want to dispatch an altar

00:48:00,220 --> 00:48:07,599
hook you would use the module handler

00:48:03,579 --> 00:48:10,150
service to dispatch those or basically

00:48:07,599 --> 00:48:11,589
to call all of the hooks with it drupal

00:48:10,150 --> 00:48:14,829
call this involvement so you would

00:48:11,589 --> 00:48:18,609
invoke all of the hooks on all enabled

00:48:14,829 --> 00:48:21,190
modules the way to do that is you can do

00:48:18,609 --> 00:48:23,769
do bully get the module handling service

00:48:21,190 --> 00:48:26,230
this is really just shorthand for what

00:48:23,769 --> 00:48:28,420
we saw much earlier which was using the

00:48:26,230 --> 00:48:30,730
services container to getting named

00:48:28,420 --> 00:48:32,650
service the module handler one is so

00:48:30,730 --> 00:48:34,599
commonly used that there's actually just

00:48:32,650 --> 00:48:36,400
the method that you can call to get a

00:48:34,599 --> 00:48:38,980
copy of that service and then it has a

00:48:36,400 --> 00:48:41,799
couple of methods which are in vocal or

00:48:38,980 --> 00:48:44,460
alter and these pretty much are exact

00:48:41,799 --> 00:48:48,450
copies of things like module in vocal

00:48:44,460 --> 00:48:50,880
and drupal halter from Drupal 7 they're

00:48:48,450 --> 00:48:52,740
just implemented as services because

00:48:50,880 --> 00:48:56,130
rather than putting things in the global

00:48:52,740 --> 00:48:57,390
namespace like in Drupal 7 those types

00:48:56,130 --> 00:49:00,810
of things are now implemented as

00:48:57,390 --> 00:49:03,900
services do you want to know more about

00:49:00,810 --> 00:49:05,580
books in Drupal 8 and how they work or

00:49:03,900 --> 00:49:10,710
some good documentation on API

00:49:05,580 --> 00:49:13,200
drupal.org so as a quick recap um the

00:49:10,710 --> 00:49:15,480
idea here was to take a look at all the

00:49:13,200 --> 00:49:18,510
new ways or really the different ways

00:49:15,480 --> 00:49:20,670
that we can add module developers extend

00:49:18,510 --> 00:49:22,650
and alter Drupal without ever having to

00:49:20,670 --> 00:49:24,660
have Drupal course code we talk about

00:49:22,650 --> 00:49:26,310
four of those these are really the most

00:49:24,660 --> 00:49:28,500
common ones that you'll encounter those

00:49:26,310 --> 00:49:31,349
are plugins so plugins allow you to

00:49:28,500 --> 00:49:35,250
provide new units of functionality

00:49:31,349 --> 00:49:37,770
generally ones that are going to be

00:49:35,250 --> 00:49:40,140
presented in a list where someone can

00:49:37,770 --> 00:49:44,220
choose one or more of those pieces of

00:49:40,140 --> 00:49:46,170
functionality in order to use it's also

00:49:44,220 --> 00:49:48,089
important to remember that those lists

00:49:46,170 --> 00:49:51,119
aren't necessarily always provided to

00:49:48,089 --> 00:49:52,740
the end-user like a plug-in a list of

00:49:51,119 --> 00:49:54,839
plugins may be something that Drupal

00:49:52,740 --> 00:49:57,839
core itself generates and use it but

00:49:54,839 --> 00:49:59,790
then does some determination within the

00:49:57,839 --> 00:50:05,450
application itself to choose which

00:49:59,790 --> 00:50:08,609
plugin to use an example of that is the

00:50:05,450 --> 00:50:12,270
the tool that decides whether or not

00:50:08,609 --> 00:50:14,400
Drupal is going how response from Drupal

00:50:12,270 --> 00:50:16,650
is going to be formatted is at HTML or

00:50:14,400 --> 00:50:18,810
is it Ajax or whatever the case is

00:50:16,650 --> 00:50:20,910
actually a plug-in system and so there

00:50:18,810 --> 00:50:23,070
are there's the HTML renderer and

00:50:20,910 --> 00:50:24,839
there's the Ajax renderer plug-in and

00:50:23,070 --> 00:50:27,330
one in a request is made Drupal makes

00:50:24,839 --> 00:50:29,040
use of information in that request to

00:50:27,330 --> 00:50:31,560
say well here's a list of all the

00:50:29,040 --> 00:50:33,330
possible plugins the one that looks most

00:50:31,560 --> 00:50:35,700
appropriate in this use case is there

00:50:33,330 --> 00:50:38,520
Ajax responder and so it'll make use of

00:50:35,700 --> 00:50:41,210
that fuggin services allow you to

00:50:38,520 --> 00:50:43,800
encapsulate your business logic into

00:50:41,210 --> 00:50:46,560
function like units of functionality

00:50:43,800 --> 00:50:47,760
that are all like things combined it

00:50:46,560 --> 00:50:48,480
also allows you to keep that

00:50:47,760 --> 00:50:50,430
functionality

00:50:48,480 --> 00:50:52,500
decoupled from Drupal itself which means

00:50:50,430 --> 00:50:56,790
it's easier to write tests for your

00:50:52,500 --> 00:50:58,950
controllers or your plugins our example

00:50:56,790 --> 00:51:01,980
was you might create a service that

00:50:58,950 --> 00:51:04,530
implements the Twitter API and then you

00:51:01,980 --> 00:51:08,160
can create a blocked plug-in that adds a

00:51:04,530 --> 00:51:10,080
list of tweets into the sidebar in order

00:51:08,160 --> 00:51:12,420
to make sure that that block plug-in and

00:51:10,080 --> 00:51:14,520
all of its functionality was more easy

00:51:12,420 --> 00:51:16,830
to test as long as you implement the

00:51:14,520 --> 00:51:19,320
Twitter API as a service you could when

00:51:16,830 --> 00:51:21,780
you're writing tests say swap that

00:51:19,320 --> 00:51:23,850
service out for a mock version of the

00:51:21,780 --> 00:51:27,170
Twitter API and not have to make real

00:51:23,850 --> 00:51:30,030
requests in order to test things events

00:51:27,170 --> 00:51:32,550
allow pieces of code to communicate with

00:51:30,030 --> 00:51:35,040
one another it's basically either you're

00:51:32,550 --> 00:51:36,900
listening for people for code that says

00:51:35,040 --> 00:51:40,080
hey this just happened would you like to

00:51:36,900 --> 00:51:42,000
do anything or you're saying hey I just

00:51:40,080 --> 00:51:44,100
performed this action in case anybody

00:51:42,000 --> 00:51:48,300
wants to know about it and then hooks

00:51:44,100 --> 00:51:51,090
are a carrot partially a carryover from

00:51:48,300 --> 00:51:53,790
Drupal 7 and what they are primarily

00:51:51,090 --> 00:51:56,490
used for in Drupal 8 is for altering

00:51:53,790 --> 00:51:59,310
things usually it's either altering a

00:51:56,490 --> 00:52:01,170
form or altering a big list of some

00:51:59,310 --> 00:52:04,050
other metadata that was gathered in some

00:52:01,170 --> 00:52:06,690
other way but we want to give module as

00:52:04,050 --> 00:52:10,850
a chance to change that list of meta

00:52:06,690 --> 00:52:14,100
data before we parse it in the use of it

00:52:10,850 --> 00:52:16,140
so that's that's the primary ways of

00:52:14,100 --> 00:52:21,210
extending altering and enhancing and

00:52:16,140 --> 00:52:23,550
Drupal 8 they're the links of these

00:52:21,210 --> 00:52:25,320
slides pull that up again but so you can

00:52:23,550 --> 00:52:27,270
get all the links that are in them and

00:52:25,320 --> 00:52:28,830
then if you've got a moment and could be

00:52:27,270 --> 00:52:32,900
feedback on the session that would be

00:52:28,830 --> 00:52:32,900
awesome it's all I got thank you

00:52:37,140 --> 00:52:41,020
cuz I've had a couple of it is for

00:52:39,400 --> 00:52:42,610
questions so if anyone's got a question

00:52:41,020 --> 00:52:45,610
I'm happy to answer it or you can come

00:52:42,610 --> 00:52:47,050
up here I can answer up here there's a

00:52:45,610 --> 00:52:59,080
microphone or you can just raise your

00:52:47,050 --> 00:53:03,040
hand and make it up as we go yep I found

00:52:59,080 --> 00:53:09,030
a bit about put your business knowledge

00:53:03,040 --> 00:53:09,030
into the services and then just plugging

00:53:11,130 --> 00:53:18,670
quite excited me does that mean that we

00:53:15,580 --> 00:53:20,410
can like in what way that is your

00:53:18,670 --> 00:53:24,190
business logic portable to another

00:53:20,410 --> 00:53:29,320
system looks like sure so so one of the

00:53:24,190 --> 00:53:32,080
idea was implement your custom

00:53:29,320 --> 00:53:33,700
functionality as a service and then pull

00:53:32,080 --> 00:53:37,060
the service into your bowl and make use

00:53:33,700 --> 00:53:39,910
of it and I thought the hump is that you

00:53:37,060 --> 00:53:42,670
could write that code following you know

00:53:39,910 --> 00:53:46,600
you know PHP standards like the PSR for

00:53:42,670 --> 00:53:49,960
standard and encapsulate it all into a

00:53:46,600 --> 00:53:53,430
service that if you wrote your service

00:53:49,960 --> 00:53:55,660
so it wasn't dependent on Drupal itself

00:53:53,430 --> 00:53:58,180
I'm trying to come up with a good

00:53:55,660 --> 00:54:03,670
example of this well okay so like

00:53:58,180 --> 00:54:08,410
something like Drupal core uses the

00:54:03,670 --> 00:54:12,790
guzzle PHP library in order to make HTTP

00:54:08,410 --> 00:54:17,650
requests and it does so by registering

00:54:12,790 --> 00:54:21,340
guzzle as a service within Drupal core

00:54:17,650 --> 00:54:24,210
but you could basically says here's the

00:54:21,340 --> 00:54:27,160
service for responding to HTTP requests

00:54:24,210 --> 00:54:29,230
if I wanted to write a different version

00:54:27,160 --> 00:54:30,910
of guzzle or if I wanted to replace it

00:54:29,230 --> 00:54:32,410
you know I've decided that you know what

00:54:30,910 --> 00:54:36,010
I really don't like ghazal I

00:54:32,410 --> 00:54:38,980
rather just use my own custom code to

00:54:36,010 --> 00:54:41,020
perform of HTTP requests as long as I

00:54:38,980 --> 00:54:43,780
implemented the same interface is that

00:54:41,020 --> 00:54:45,400
service when Drupal and that I could

00:54:43,780 --> 00:54:48,100
register it in Drupal could say you know

00:54:45,400 --> 00:54:50,980
I mean the thing for making HTTP

00:54:48,100 --> 00:54:53,770
requests and it will now grab my version

00:54:50,980 --> 00:54:56,260
and make use of it another would be data

00:54:53,770 --> 00:54:58,870
base layers right like are you talking

00:54:56,260 --> 00:55:03,190
to a my sequel database tour Postgres

00:54:58,870 --> 00:55:05,200
database and the back-end service that

00:55:03,190 --> 00:55:08,260
handles that if it's written in a way

00:55:05,200 --> 00:55:10,810
that is agnostic to the fact that it's

00:55:08,260 --> 00:55:13,900
Drupal could be used by other systems as

00:55:10,810 --> 00:55:17,290
well in practice in most of Drupal core

00:55:13,900 --> 00:55:20,290
this isn't really done much yet because

00:55:17,290 --> 00:55:22,180
what happens is your services likely

00:55:20,290 --> 00:55:25,780
depend on another surface and that

00:55:22,180 --> 00:55:27,970
service is probably specific to Drupal

00:55:25,780 --> 00:55:30,010
core right now for example your service

00:55:27,970 --> 00:55:32,950
probably depends on the database so it

00:55:30,010 --> 00:55:34,990
can say interface with the database so

00:55:32,950 --> 00:55:36,820
you couldn't just remove Drupal from the

00:55:34,990 --> 00:55:38,830
picture completely because it still need

00:55:36,820 --> 00:55:42,010
Drupal database system but I think what

00:55:38,830 --> 00:55:44,140
we'll see over time is that those all of

00:55:42,010 --> 00:55:47,860
the services that make up the back end

00:55:44,140 --> 00:55:50,710
of your bowl will become less and less

00:55:47,860 --> 00:55:52,990
coupled to Drupal and hopefully more and

00:55:50,710 --> 00:55:55,930
more just part of the greater PHP

00:55:52,990 --> 00:55:57,730
ecosystem in Drupal like the Drupal

00:55:55,930 --> 00:55:59,230
application itself really becomes this

00:55:57,730 --> 00:56:02,380
wrapper around all of these other

00:55:59,230 --> 00:56:11,920
independent services that make sense all

00:56:02,380 --> 00:56:15,400
right any other questions yeah it's just

00:56:11,920 --> 00:56:17,350
a whole month on that case ah merce is

00:56:15,400 --> 00:56:20,770
doing it because they're doing the

00:56:17,350 --> 00:56:23,130
addresses yeah because that is our

00:56:20,770 --> 00:56:25,230
terrible problem solved because every

00:56:23,130 --> 00:56:27,510
the informant and they should be working

00:56:25,230 --> 00:56:29,760
in hard way so they have done a service

00:56:27,510 --> 00:56:32,700
for addresses yep that they are

00:56:29,760 --> 00:56:35,160
dependent so other HD project can use

00:56:32,700 --> 00:56:36,660
these addresses service here and there

00:56:35,160 --> 00:56:39,420
they know it's a really great example

00:56:36,660 --> 00:56:41,340
commerce the cover that people working

00:56:39,420 --> 00:56:44,850
on the Commerce module wrote this really

00:56:41,340 --> 00:56:48,210
complex PHP library to handle address

00:56:44,850 --> 00:56:50,580
verification and that kind of stuff this

00:56:48,210 --> 00:56:53,850
is a problem that wasn't well solved in

00:56:50,580 --> 00:56:56,400
PHP in general yes and so they wrote the

00:56:53,850 --> 00:56:58,260
code in such a way that the library of

00:56:56,400 --> 00:57:00,240
code that they wrote could be used by

00:56:58,260 --> 00:57:01,800
anyone else that's writing a PHP

00:57:00,240 --> 00:57:05,160
application that needs to your address

00:57:01,800 --> 00:57:08,190
verification but it was originally

00:57:05,160 --> 00:57:10,890
written to be used as a for the drupal

00:57:08,190 --> 00:57:12,300
commerce system by creating it as an

00:57:10,890 --> 00:57:14,280
independent library and then

00:57:12,300 --> 00:57:15,510
implementing it as a service inside of

00:57:14,280 --> 00:57:17,880
drupal they're able to keep those

00:57:15,510 --> 00:57:20,720
components kind of separate from one

00:57:17,880 --> 00:57:22,920
another and in theory you could write up

00:57:20,720 --> 00:57:25,410
you know I guess you could write a

00:57:22,920 --> 00:57:29,760
wordpress plugin that uses that code

00:57:25,410 --> 00:57:32,120
library as well yeah so you Jeff

00:57:29,760 --> 00:57:32,120
question

00:57:35,440 --> 00:57:42,280
I was just wondering if you could

00:57:37,510 --> 00:57:45,609
elaborate a bit sweet what service for

00:57:42,280 --> 00:57:51,250
them yeah so the question is like if

00:57:45,609 --> 00:57:53,230
you've got multiple services like so

00:57:51,250 --> 00:57:57,010
you've got a post-grad into my sequel

00:57:53,230 --> 00:58:03,240
service how do you switch between one or

00:57:57,010 --> 00:58:03,240
another that's it happens based on um

00:58:04,050 --> 00:58:09,940
tricky but if like its configuration

00:58:07,660 --> 00:58:12,930
within your application can determine

00:58:09,940 --> 00:58:18,430
which service is ultimately used so for

00:58:12,930 --> 00:58:20,200
one easy example would be the mail

00:58:18,430 --> 00:58:23,170
handling system so the thing that sends

00:58:20,200 --> 00:58:24,910
emails in Drupal is implemented as a

00:58:23,170 --> 00:58:27,510
service and you could you could add

00:58:24,910 --> 00:58:30,700
another surface for sending emails and

00:58:27,510 --> 00:58:32,680
then the Drupal core doesn't have this

00:58:30,700 --> 00:58:35,349
but what you would need to do is provide

00:58:32,680 --> 00:58:37,119
some way to specify which of the two

00:58:35,349 --> 00:58:39,220
services that are available it should

00:58:37,119 --> 00:58:43,270
use there's not a UI for doing this but

00:58:39,220 --> 00:58:48,990
in the code you can say when the service

00:58:43,270 --> 00:58:51,730
container is compiled link to an of the

00:58:48,990 --> 00:58:57,310
smtp mail service instead of the

00:58:51,730 --> 00:58:59,800
built-in post fix one that mean oh yeah

00:58:57,310 --> 00:59:02,470
this is it's not something I've actually

00:58:59,800 --> 00:59:03,819
had to do myself so I don't know exactly

00:59:02,470 --> 00:59:06,760
the mechanics of it but it basically

00:59:03,819 --> 00:59:10,240
boils down to you need to get your

00:59:06,760 --> 00:59:12,819
service registered with Drupal so you

00:59:10,240 --> 00:59:15,579
create your services DML file and then

00:59:12,819 --> 00:59:17,530
app at runtime or really at the time

00:59:15,579 --> 00:59:21,130
that the surfaces container is compiled

00:59:17,530 --> 00:59:23,290
there are checks to see hey there are

00:59:21,130 --> 00:59:25,990
two things basically like what is the

00:59:23,290 --> 00:59:27,609
service of the two named services for

00:59:25,990 --> 00:59:30,099
mail what's the ones that I should use

00:59:27,609 --> 00:59:34,480
what's the one that I should use right

00:59:30,099 --> 00:59:36,339
now yeah sorry that's a tough one for me

00:59:34,480 --> 00:59:39,130
to answer having not had to implement

00:59:36,339 --> 00:59:40,069
that specifically if you take a look at

00:59:39,130 --> 00:59:42,979
the documentation

00:59:40,069 --> 00:59:44,779
or this actually boil down more to the

00:59:42,979 --> 00:59:47,029
dependency injection side of it too

00:59:44,779 --> 00:59:49,459
because you've got multiple services

00:59:47,029 --> 00:59:52,029
what ends up happening is you inject

00:59:49,459 --> 00:59:56,059
your service at the dependency into some

00:59:52,029 --> 00:59:58,759
controller and at runtime what you need

00:59:56,059 --> 01:00:02,479
to do is to use a different service as

00:59:58,759 --> 01:00:08,900
the dependency in this case that makes

01:00:02,479 --> 01:00:12,279
sense cool awesome we're out of time so

01:00:08,900 --> 01:00:12,279
thanks like lunch

01:00:26,770 --> 01:00:28,830

YouTube URL: https://www.youtube.com/watch?v=EglfVllpYd4


