Title: DrupalCon Barcelona 2015: Drupal in 2020
Publication date: 2015-09-22
Playlist: DrupalCon Barcelona - September 2015
Description: 
	Drupal 8 is a major leap forward for Drupal.  We've upgraded our architecture, coding style, and language usage by about 9 years in just the last 3.  That's a major achievement, and one of which we should all be proud.

And should all strive to never have to do again.  Because really, we don't want to have another tear-down cycle. Let's not do that.

But that means getting out in front of coming changes in PHP and the web.  Rather than fighting the last war, how do we prepare for the next big shift in PHP, and in the web?  How can we prepare ourselves so that we're not caught flat footed the next time a Responsive Web Design, or a Decoupled Components, or major language change comes along, when we (obviously) don't know what those are going to be?

In this session, we'll cover some just-emerging trends in the PHP, web development, and CMS industries.  Which of these will really take off in the next 5 years?  What will be the impact on Drupal?  And most importantly, what can we as a project do now in the 8.x cycle to hedge our bets and make the next big transition, whatever it ends up being, easier and less stressful? (Hint: actually, quite a bit.)
Captions: 
	00:00:00,050 --> 00:00:04,280
let's go ahead and get started here

00:00:04,879 --> 00:00:10,860
how's the first day of the conference

00:00:06,600 --> 00:00:14,610
for everyone so far good good alright so

00:00:10,860 --> 00:00:18,300
this session is Drupal in 2020 because

00:00:14,610 --> 00:00:19,890
I'm feeling ambitious my name is Larry

00:00:18,300 --> 00:00:21,510
Garfield to me know me online is Krell

00:00:19,890 --> 00:00:23,130
if you want to make fun of me during

00:00:21,510 --> 00:00:25,130
this session that's on Twitter that's

00:00:23,130 --> 00:00:27,539
what you do so i highly encourage it

00:00:25,130 --> 00:00:32,579
seni would not know who I am so do i

00:00:27,539 --> 00:00:35,250
need to bother with the slide you so for

00:00:32,579 --> 00:00:36,840
Peter Aladdin my name is Larry Garfield

00:00:35,250 --> 00:00:40,040
I'm senior architect with palantir net

00:00:36,840 --> 00:00:42,739
or a Drupal agency based in Chicago

00:00:40,040 --> 00:00:44,940
drupal 8 web services initiative lead

00:00:42,739 --> 00:00:46,410
drupal representative to the framework

00:00:44,940 --> 00:00:48,480
interoperability group advise you to the

00:00:46,410 --> 00:00:51,030
drupal association and a walking

00:00:48,480 --> 00:00:55,469
implementation of PS r8 only some people

00:00:51,030 --> 00:00:56,760
are going to get that joke here it's

00:00:55,469 --> 00:00:58,829
tell me about you right quick who here

00:00:56,760 --> 00:01:04,159
is what would call themselves a core

00:00:58,829 --> 00:01:10,439
developer only can fold people

00:01:04,159 --> 00:01:14,670
contributor who has worked in a web web

00:01:10,439 --> 00:01:19,020
server language other than PHP these

00:01:14,670 --> 00:01:23,430
number okay all right who's here just to

00:01:19,020 --> 00:01:28,530
make fun of me Peter Aladdin again I

00:01:23,430 --> 00:01:30,000
figured so drupal 8 kind of a big deal

00:01:28,530 --> 00:01:33,680
we've been talking about it for a long

00:01:30,000 --> 00:01:35,850
time it's going to be great release and

00:01:33,680 --> 00:01:38,070
yeah I could we should this something we

00:01:35,850 --> 00:01:39,390
should be proud of all right I'm going

00:01:38,070 --> 00:01:41,670
to say a lot of things in this session

00:01:39,390 --> 00:01:43,380
but i wanna make something clear nothing

00:01:41,670 --> 00:01:44,700
i take should be insane this session

00:01:43,380 --> 00:01:47,310
should be taken as a criticism of the

00:01:44,700 --> 00:01:50,850
people working on Drupal 8 to have done

00:01:47,310 --> 00:01:53,220
an amazing amount of work actually at

00:01:50,850 --> 00:01:54,750
those who are to have done to play

00:01:53,220 --> 00:01:57,649
development to have contribute through

00:01:54,750 --> 00:01:57,649
Blake you set up for a moment

00:02:05,470 --> 00:02:14,930
so so let's just get that out of the way

00:02:10,100 --> 00:02:16,250
first that said yeah as dree said in his

00:02:14,930 --> 00:02:18,830
keynote incidentally I wrote this whole

00:02:16,250 --> 00:02:22,700
thing before the keynote happened so I'm

00:02:18,830 --> 00:02:29,050
not updating it for that dear God let's

00:02:22,700 --> 00:02:34,420
never go through that dev cycle again it

00:02:29,050 --> 00:02:37,430
way too long way too stressful and

00:02:34,420 --> 00:02:40,970
probably the most relevant problem is

00:02:37,430 --> 00:02:42,590
that we spent four years not building

00:02:40,970 --> 00:02:46,370
great new functionality we spent four

00:02:42,590 --> 00:02:50,300
years playing catch-up Drupal 7 was well

00:02:46,370 --> 00:02:53,870
behind the curve even was released for

00:02:50,300 --> 00:02:55,730
where PHP was Drupal 8 has leapfrog

00:02:53,870 --> 00:02:58,490
leapfrog de bout eight or nine years

00:02:55,730 --> 00:03:01,900
forward from where we were which means

00:02:58,490 --> 00:03:05,269
we're only about two years behind now

00:03:01,900 --> 00:03:07,640
what I mean by behind well WordPress had

00:03:05,269 --> 00:03:08,840
a decent rest api years ago I don't even

00:03:07,640 --> 00:03:12,739
remember when they released it but it's

00:03:08,840 --> 00:03:15,890
been a long time now joomla they had

00:03:12,739 --> 00:03:18,110
their had a released in 2012 that was

00:03:15,890 --> 00:03:19,820
fully responsive out of the box these

00:03:18,110 --> 00:03:22,640
are things that Drupal 8 is finally

00:03:19,820 --> 00:03:28,550
adding but with last to the table on

00:03:22,640 --> 00:03:30,290
these the tweets from overlapping a

00:03:28,550 --> 00:03:31,340
little bit to eat when someone has

00:03:30,290 --> 00:03:32,959
retweeted by one of the content

00:03:31,340 --> 00:03:34,310
strategists life follow who works with a

00:03:32,959 --> 00:03:38,540
lot of different content management

00:03:34,310 --> 00:03:40,989
systems and episerver it's one of the

00:03:38,540 --> 00:03:43,760
big proprietary CMS's it's one that's

00:03:40,989 --> 00:03:47,780
the some people are very very fond of

00:03:43,760 --> 00:03:49,190
but this is all boring all the stuff

00:03:47,780 --> 00:03:51,920
we're so proud of that we spent a ton of

00:03:49,190 --> 00:03:55,280
time on and did amazing amount of work

00:03:51,920 --> 00:03:57,560
to do is boring functionality for an

00:03:55,280 --> 00:03:59,060
awful lot of the market this is the

00:03:57,560 --> 00:04:03,830
barrier that this is the very identity

00:03:59,060 --> 00:04:05,830
this is cost of entry quite simply the

00:04:03,830 --> 00:04:08,030
market is moving faster than we are and

00:04:05,830 --> 00:04:10,639
we need to be able to move faster

00:04:08,030 --> 00:04:12,980
because the technology market and the

00:04:10,639 --> 00:04:15,070
tool chains are moving even faster than

00:04:12,980 --> 00:04:17,449
that

00:04:15,070 --> 00:04:20,269
just since we started development on

00:04:17,449 --> 00:04:23,479
Drupal 8 in March of 2011 at drupalcon

00:04:20,269 --> 00:04:25,760
Chicago just since then the entire

00:04:23,479 --> 00:04:29,000
composer and packages revolution has

00:04:25,760 --> 00:04:32,360
happened the PHP framework

00:04:29,000 --> 00:04:34,370
interoperability group went from a small

00:04:32,360 --> 00:04:36,620
group of losers who had exactly one

00:04:34,370 --> 00:04:38,660
speck out called PSR 0 to an actual

00:04:36,620 --> 00:04:44,360
force for good in the PHP community I

00:04:38,660 --> 00:04:46,729
count myself in both groups we had

00:04:44,360 --> 00:04:49,930
symfony2 released in that time symphony

00:04:46,729 --> 00:04:54,050
2.0 came out after we started drupal

00:04:49,930 --> 00:04:57,650
development it's been that long and that

00:04:54,050 --> 00:04:59,500
was one of the kickstarts for the PHP

00:04:57,650 --> 00:05:03,260
renaissance in the last several years

00:04:59,500 --> 00:05:05,389
flexbox wasn't even a thing wasn't it

00:05:03,260 --> 00:05:10,010
was a glimmer in someone's eye when drew

00:05:05,389 --> 00:05:13,430
polite started PHP 5.4 was released

00:05:10,010 --> 00:05:19,070
since Drupal 8 started and was

00:05:13,430 --> 00:05:23,000
deprecated and retired and 55 is already

00:05:19,070 --> 00:05:26,180
on its last legs and 5.6 is the current

00:05:23,000 --> 00:05:27,800
stable version and I think looking at

00:05:26,180 --> 00:05:33,280
the calendar PHP 7 is going to come out

00:05:27,800 --> 00:05:35,780
before Drupal 8 does internet explorer 9

00:05:33,280 --> 00:05:41,990
was released during the Drupal 8 dev

00:05:35,780 --> 00:05:46,370
psychol as was 10 as was 11 as is

00:05:41,990 --> 00:05:48,050
Microsoft edge microsoft released for

00:05:46,370 --> 00:05:50,650
web browsers in the time it took us to

00:05:48,050 --> 00:05:50,650
produce Drupal 8

00:05:53,000 --> 00:05:57,120
we need to get out in front of this we

00:05:55,830 --> 00:05:58,980
need not be playing catch-up we need to

00:05:57,120 --> 00:06:01,560
be thinking forward we need to be

00:05:58,980 --> 00:06:03,570
looking at not where we need to be to

00:06:01,560 --> 00:06:04,890
catch up where do we need to be a couple

00:06:03,570 --> 00:06:07,710
of years from now to be ahead of the

00:06:04,890 --> 00:06:10,590
curve how do we get ahead of these tech

00:06:07,710 --> 00:06:12,240
technology changes or set ourselves up

00:06:10,590 --> 00:06:14,370
so that we can get ahead of them as soon

00:06:12,240 --> 00:06:17,730
as we notice them that's the challenge

00:06:14,370 --> 00:06:19,980
now the new release schedule for Drupal

00:06:17,730 --> 00:06:23,340
8 is going to be a huge help this is

00:06:19,980 --> 00:06:25,260
going to make it easier this ties into

00:06:23,340 --> 00:06:27,150
the feature branch work that Jesus was

00:06:25,260 --> 00:06:30,110
talking about in his keynote but this

00:06:27,150 --> 00:06:32,490
has been on the plan for two years now

00:06:30,110 --> 00:06:34,980
actually because he had Rubicon frog we

00:06:32,490 --> 00:06:37,800
settled on this so when eight comes out

00:06:34,980 --> 00:06:41,280
we are not opening Drupal nine we open

00:06:37,800 --> 00:06:43,020
8.1 which is not API breaking editions

00:06:41,280 --> 00:06:45,840
and so we can add functionality and

00:06:43,020 --> 00:06:47,760
refactor things without breaking ap is

00:06:45,840 --> 00:06:49,440
so we don't need to wait four or five

00:06:47,760 --> 00:06:53,220
years between releases which is a good

00:06:49,440 --> 00:06:54,180
thing but that's not the entire story

00:06:53,220 --> 00:06:56,880
that's not going to be the entire

00:06:54,180 --> 00:06:59,250
solution for us the question we need to

00:06:56,880 --> 00:07:02,580
be asking is where does Drupal need to

00:06:59,250 --> 00:07:04,590
be in five years five years from now

00:07:02,580 --> 00:07:07,170
when we were at drupalcon I don't know

00:07:04,590 --> 00:07:09,390
where what will the market look like

00:07:07,170 --> 00:07:12,030
what will our customers be asking for

00:07:09,390 --> 00:07:13,830
what will the technology stack look like

00:07:12,030 --> 00:07:16,710
if we want to say we're a

00:07:13,830 --> 00:07:19,320
state-of-the-art platform in 2020 what

00:07:16,710 --> 00:07:20,550
does that even mean and when we figure

00:07:19,320 --> 00:07:23,340
that out how can we get to it as quickly

00:07:20,550 --> 00:07:25,590
as possible how can we start moving that

00:07:23,340 --> 00:07:27,750
direction now incrementally so if we

00:07:25,590 --> 00:07:29,460
don't have to wait five years and then

00:07:27,750 --> 00:07:34,050
release another version and hope we got

00:07:29,460 --> 00:07:37,140
it right then so all right so what do we

00:07:34,050 --> 00:07:40,410
need in five years so I consulted a

00:07:37,140 --> 00:07:44,100
crystal ball on this one unfortunately

00:07:40,410 --> 00:07:46,020
it didn't work out so well so let's

00:07:44,100 --> 00:07:49,680
let's look at some trends I make some

00:07:46,020 --> 00:07:53,610
educated guesses so what's the market

00:07:49,680 --> 00:07:58,050
looking looking for well who's read

00:07:53,610 --> 00:07:59,300
raises blog okay it's worth reading for

00:07:58,050 --> 00:08:02,720
the rest of you

00:07:59,300 --> 00:08:04,370
this is one of his reasons really big

00:08:02,720 --> 00:08:05,539
posts the big reverse of the web has

00:08:04,370 --> 00:08:07,970
been talking about this one all year in

00:08:05,539 --> 00:08:10,009
fact I believe that for the web to reach

00:08:07,970 --> 00:08:11,509
its full potential and go through a

00:08:10,009 --> 00:08:13,810
massive re architecture and REE

00:08:11,509 --> 00:08:16,280
platforming the future of the web is

00:08:13,810 --> 00:08:18,979
push-based meaning the web will be

00:08:16,280 --> 00:08:21,500
coming to us is basic thesis here is

00:08:18,979 --> 00:08:23,360
instead of you going to a website and

00:08:21,500 --> 00:08:25,970
looking up information more and more

00:08:23,360 --> 00:08:28,340
sites will track you and push

00:08:25,970 --> 00:08:32,709
information to you through notifications

00:08:28,340 --> 00:08:34,760
on your phone's RSS feeds emails

00:08:32,709 --> 00:08:36,950
technology that doesn't exist yet the

00:08:34,760 --> 00:08:39,159
kind of stuff that Facebook and Google

00:08:36,950 --> 00:08:41,000
and Apple and Amazon are already doing

00:08:39,159 --> 00:08:43,820
everyone's going to need to do to be

00:08:41,000 --> 00:08:45,140
competitive and we need someone who's

00:08:43,820 --> 00:08:49,070
not a multi-billion dollar corporation

00:08:45,140 --> 00:08:53,480
who can pull it off so we need to be

00:08:49,070 --> 00:08:56,360
able to do push whip and we need to do

00:08:53,480 --> 00:08:58,160
it for the sake of the open web because

00:08:56,360 --> 00:08:59,630
I refuse to accept the future in which

00:08:58,160 --> 00:09:02,740
no one is allowed to do web developments

00:08:59,630 --> 00:09:05,810
who's not a building dollar corporation

00:09:02,740 --> 00:09:07,550
so we need to exceed their user

00:09:05,810 --> 00:09:09,290
experience and take back control of our

00:09:07,550 --> 00:09:11,770
data while still offering this kind of

00:09:09,290 --> 00:09:14,450
functionality the way to do that is

00:09:11,770 --> 00:09:16,690
loosely coupled architectures with a

00:09:14,450 --> 00:09:19,579
highly integrated user experience

00:09:16,690 --> 00:09:21,350
loosely coupled architectures with a

00:09:19,579 --> 00:09:22,760
highly integrated user experience the

00:09:21,350 --> 00:09:24,709
user should not be able to tell that

00:09:22,760 --> 00:09:27,050
it's a loosely coupled architecture

00:09:24,709 --> 00:09:29,180
we're going to need to make it a loosely

00:09:27,050 --> 00:09:32,050
coupled architecture to be able to pull

00:09:29,180 --> 00:09:35,140
off this kind of country functionality

00:09:32,050 --> 00:09:38,720
another trend I'm seeing a resurgence of

00:09:35,140 --> 00:09:41,839
decoupled CMS's that's a decoupled CMS I

00:09:38,720 --> 00:09:44,089
don't mean headless I mean separating

00:09:41,839 --> 00:09:49,370
the editorial process from the

00:09:44,089 --> 00:09:51,370
presentation now this could be static

00:09:49,370 --> 00:09:53,899
site generators which are the oldest

00:09:51,370 --> 00:09:56,720
variety those have seen a resurgence in

00:09:53,899 --> 00:09:59,810
recent years with Jekyll sculpt and

00:09:56,720 --> 00:10:01,399
other tools like that you could also

00:09:59,810 --> 00:10:04,339
have configurations where you have some

00:10:01,399 --> 00:10:06,709
kind of view only application where you

00:10:04,339 --> 00:10:08,720
have your editorial CMS that dumps data

00:10:06,709 --> 00:10:10,970
to some intermediary server and then

00:10:08,720 --> 00:10:13,070
there's an another application in front

00:10:10,970 --> 00:10:14,810
of it that's just doing read only serves

00:10:13,070 --> 00:10:16,070
doing lots of complex stuff with it but

00:10:14,810 --> 00:10:20,180
it's read-only which means it can be a

00:10:16,070 --> 00:10:21,830
lot faster a lot more optimized I've

00:10:20,180 --> 00:10:26,590
actually built systems like this using

00:10:21,830 --> 00:10:26,590
Drupal it works it's a little bit clunky

00:10:27,100 --> 00:10:31,880
theatre bedolla not was just up here two

00:10:30,230 --> 00:10:34,720
hours ago talking about that being the

00:10:31,880 --> 00:10:37,460
correct way to do headless essentially

00:10:34,720 --> 00:10:40,060
you can do tween installs where you

00:10:37,460 --> 00:10:42,530
actually have an editorial Drupal and a

00:10:40,060 --> 00:10:44,450
front-end Drupal 8 by production Drupal

00:10:42,530 --> 00:10:48,580
and synchronize content between them

00:10:44,450 --> 00:10:51,880
somehow I know dick Olson is he here

00:10:48,580 --> 00:10:58,160
yeah you've done this kind of stuff

00:10:51,880 --> 00:10:59,390
what's that he's weird yeah but there's

00:10:58,160 --> 00:11:01,280
a market need for this i keep getting

00:10:59,390 --> 00:11:03,050
clients asking me for content staging

00:11:01,280 --> 00:11:05,420
server i usually push them towards

00:11:03,050 --> 00:11:06,940
workbench moderation instead but a lot

00:11:05,420 --> 00:11:12,770
of them still want and some of them need

00:11:06,940 --> 00:11:16,550
separate installs could be completely

00:11:12,770 --> 00:11:18,170
separate servers for things where your

00:11:16,550 --> 00:11:21,320
presentation server you have six of them

00:11:18,170 --> 00:11:23,960
but you have one content server and that

00:11:21,320 --> 00:11:25,880
content server is basically a rest

00:11:23,960 --> 00:11:27,530
server for the content the presentation

00:11:25,880 --> 00:11:31,310
apps are kidding that directly give or

00:11:27,530 --> 00:11:32,450
take caching and so you have separate

00:11:31,310 --> 00:11:34,670
apps but they're still talking

00:11:32,450 --> 00:11:37,700
constantly it's not a database sync it's

00:11:34,670 --> 00:11:39,710
constant communication all of these

00:11:37,700 --> 00:11:42,770
things exist in the market today they're

00:11:39,710 --> 00:11:44,390
just not always easy to do but this is

00:11:42,770 --> 00:11:47,500
important because one of the huge

00:11:44,390 --> 00:11:50,180
advantages of a decoupled approach is

00:11:47,500 --> 00:11:52,180
you can completely decoupled your look

00:11:50,180 --> 00:11:56,450
and feel from your content storage I

00:11:52,180 --> 00:11:58,730
mean really how many sites need not just

00:11:56,450 --> 00:12:00,980
can but need to change their user

00:11:58,730 --> 00:12:03,080
workflow and look and feel and their

00:12:00,980 --> 00:12:06,530
underlying content model at the same

00:12:03,080 --> 00:12:09,260
time every time very few we normally end

00:12:06,530 --> 00:12:11,960
up doing that because Drupal does both

00:12:09,260 --> 00:12:15,440
at the same time and couples them if we

00:12:11,960 --> 00:12:18,350
split those up then oh yeah Drupal 7

00:12:15,440 --> 00:12:24,110
Drupal 8 redesign several times Drupal

00:12:18,350 --> 00:12:25,850
line in here whatever the HTML CSS and

00:12:24,110 --> 00:12:26,720
user interaction social media

00:12:25,850 --> 00:12:28,550
integration

00:12:26,720 --> 00:12:31,819
all this kind of stuff our content

00:12:28,550 --> 00:12:33,589
delivery concerns content modeling

00:12:31,819 --> 00:12:35,209
workflow indexing and so on our content

00:12:33,589 --> 00:12:37,009
management concerns these are different

00:12:35,209 --> 00:12:40,220
needs different types of applications

00:12:37,009 --> 00:12:42,410
that don't have to be in the same

00:12:40,220 --> 00:12:46,250
application sometimes you want them in

00:12:42,410 --> 00:12:48,800
the same sometimes you don't and then

00:12:46,250 --> 00:12:50,750
there is the question of headless which

00:12:48,800 --> 00:12:53,000
it I do recommend watching the video

00:12:50,750 --> 00:12:56,980
from nods talk earlier he dissects this

00:12:53,000 --> 00:12:59,209
word rather well but a headless

00:12:56,980 --> 00:13:00,560
environments we have some kind of pure

00:12:59,209 --> 00:13:02,300
JavaScript application that's just

00:13:00,560 --> 00:13:04,399
hitting Drupal over rest that's going to

00:13:02,300 --> 00:13:06,019
be very high traffic Ruiz was talking

00:13:04,399 --> 00:13:08,629
about this in his keynote earlier rest

00:13:06,019 --> 00:13:12,230
is chatting rest is a very chatty system

00:13:08,629 --> 00:13:14,300
by design but if you don't want to

00:13:12,230 --> 00:13:16,790
custom build everything in terms of your

00:13:14,300 --> 00:13:17,920
API which means you have to modify it

00:13:16,790 --> 00:13:23,180
every time you want to change anything

00:13:17,920 --> 00:13:25,579
then it's going to be chatty so is that

00:13:23,180 --> 00:13:27,110
API that you're using for your

00:13:25,579 --> 00:13:29,389
JavaScript application is that give me

00:13:27,110 --> 00:13:34,069
the same API as if you're doing a live

00:13:29,389 --> 00:13:35,360
content server why not so you need an

00:13:34,069 --> 00:13:39,709
API that's going to be able to handle

00:13:35,360 --> 00:13:41,420
multiple different use cases and it's

00:13:39,709 --> 00:13:45,230
going to be lots and lots of small

00:13:41,420 --> 00:13:47,029
requests Drupal does not handle lots and

00:13:45,230 --> 00:13:50,420
lots of small requests very well right

00:13:47,029 --> 00:13:52,309
now it handles a modest number of really

00:13:50,420 --> 00:13:55,399
big requests with caching really well

00:13:52,309 --> 00:13:59,480
but not we're loading one page requires

00:13:55,399 --> 00:14:01,569
eight different PHP loads these are my

00:13:59,480 --> 00:14:03,649
I'm talking about microservices now

00:14:01,569 --> 00:14:06,829
could we have a Drupal based on

00:14:03,649 --> 00:14:09,829
microservices code rupal itself be a

00:14:06,829 --> 00:14:11,389
micro service part of several going to

00:14:09,829 --> 00:14:15,769
be a collection of micro services you

00:14:11,389 --> 00:14:22,689
can swap in and out maybe do we need it

00:14:15,769 --> 00:14:26,259
to be maybe looking at the real-time web

00:14:22,689 --> 00:14:29,000
by that I mean new web technologies that

00:14:26,259 --> 00:14:32,990
PHP as we use it just can't handle

00:14:29,000 --> 00:14:34,459
things like event source which is so old

00:14:32,990 --> 00:14:37,939
and no one uses any more I couldn't even

00:14:34,459 --> 00:14:39,889
find a logo for it because really these

00:14:37,939 --> 00:14:42,579
days everyone's using web sockets

00:14:39,889 --> 00:14:44,600
you can't use web sockets with Drupal

00:14:42,579 --> 00:14:46,069
everyone doing web socks with Drupal is

00:14:44,600 --> 00:14:50,600
sewing and doing the websocket part in

00:14:46,069 --> 00:14:54,019
oj s but even that may fade out in favor

00:14:50,600 --> 00:14:55,730
of HTTP two which is going to be present

00:14:54,019 --> 00:14:57,259
on the majority of servers and Mordred

00:14:55,730 --> 00:15:04,549
or majority of browsers in the world

00:14:57,259 --> 00:15:06,259
within 12 months and does push web even

00:15:04,549 --> 00:15:08,419
better than WebSockets in terms of the

00:15:06,259 --> 00:15:12,079
server is able to push new information

00:15:08,419 --> 00:15:14,449
to a client when it decides it needs it

00:15:12,079 --> 00:15:16,939
when it decides its relevance all of

00:15:14,449 --> 00:15:20,679
these require a persistent connection

00:15:16,939 --> 00:15:22,759
between the server and the clients

00:15:20,679 --> 00:15:24,379
persistent connection with server push

00:15:22,759 --> 00:15:26,679
where the server is able to push out

00:15:24,379 --> 00:15:31,989
data can you do that with Drupal today

00:15:26,679 --> 00:15:34,759
no the way we one run Drupal is

00:15:31,989 --> 00:15:39,369
completely inadequate for many of these

00:15:34,759 --> 00:15:42,350
use cases this is much more fundamental

00:15:39,369 --> 00:15:44,480
why well we don't have any persistent

00:15:42,350 --> 00:15:46,069
connection capability where we get one

00:15:44,480 --> 00:15:47,869
request and one response and that's it

00:15:46,069 --> 00:15:49,100
and Drupal shuts down and if a second

00:15:47,869 --> 00:15:52,369
request comes in we have to redo our

00:15:49,100 --> 00:15:56,360
entire bootstrap wait an hour bootstrap

00:15:52,369 --> 00:16:00,829
is not cheap also everything in triple

00:15:56,360 --> 00:16:03,019
is blocking io if you have an incoming

00:16:00,829 --> 00:16:05,239
request that's not doing all that much

00:16:03,019 --> 00:16:06,970
it's still it's going to block on its I

00:16:05,239 --> 00:16:08,929
oh you're going to sit there and wait on

00:16:06,970 --> 00:16:12,230
talking to the database even if it's

00:16:08,929 --> 00:16:14,360
talking to the cash you don't want that

00:16:12,230 --> 00:16:17,029
for rest api is there going to be very

00:16:14,360 --> 00:16:22,850
very chatty the underlying problem here

00:16:17,029 --> 00:16:28,459
is CGI common gateway interface it's

00:16:22,850 --> 00:16:29,989
developed by ncsa in 1993 I suspect

00:16:28,459 --> 00:16:33,919
there are people in this room younger

00:16:29,989 --> 00:16:36,649
than CGI and this is still the wave

00:16:33,919 --> 00:16:40,039
we're running Drupal because of the way

00:16:36,649 --> 00:16:42,499
most people run PHP it's a specification

00:16:40,039 --> 00:16:44,419
for calling command-line executables

00:16:42,499 --> 00:16:48,499
from a web request that's the actual

00:16:44,419 --> 00:16:50,839
description and it works by setting up a

00:16:48,499 --> 00:16:53,389
bunch of environment variables based on

00:16:50,839 --> 00:16:53,779
an incoming request and I stay based on

00:16:53,389 --> 00:16:56,629
rather

00:16:53,779 --> 00:16:59,089
loosely passing it to a script or a

00:16:56,629 --> 00:17:01,730
command-line tool and then shutting down

00:16:59,089 --> 00:17:03,860
at the end this is where everything in

00:17:01,730 --> 00:17:09,669
dollar server comes from wise dollar

00:17:03,860 --> 00:17:09,669
server in PHP just so weird because CGI

00:17:09,789 --> 00:17:16,850
this shared nothing designed that PHP is

00:17:12,980 --> 00:17:21,079
known for cannot keep up with high

00:17:16,850 --> 00:17:22,640
levels of constant rapid request because

00:17:21,079 --> 00:17:25,039
has that boot up costs every time

00:17:22,640 --> 00:17:26,360
there's a all the process management in

00:17:25,039 --> 00:17:30,049
the operating system it's the handoff

00:17:26,360 --> 00:17:33,380
from Apache to PHP or from engine X too

00:17:30,049 --> 00:17:36,110
fast to your FAFSA GI demon you get no

00:17:33,380 --> 00:17:39,110
persistence between requests you cannot

00:17:36,110 --> 00:17:41,000
save any of that overhead you have no

00:17:39,110 --> 00:17:44,120
running process that can decide to push

00:17:41,000 --> 00:17:46,159
data to an active clients so web

00:17:44,120 --> 00:17:48,890
services or web sockets are just not a

00:17:46,159 --> 00:17:50,990
thing how much effort to be put into

00:17:48,890 --> 00:17:55,600
Drupal 8 trying to make our boot up

00:17:50,990 --> 00:17:58,220
process faster for that reason a ton

00:17:55,600 --> 00:17:59,750
does we did a lot to compromise our

00:17:58,220 --> 00:18:01,909
architecture in the name of performance

00:17:59,750 --> 00:18:04,280
for exactly this reason because

00:18:01,909 --> 00:18:06,770
otherwise it would take you know 300

00:18:04,280 --> 00:18:11,510
milliseconds baseline for every request

00:18:06,770 --> 00:18:17,299
and that's just not acceptable I already

00:18:11,510 --> 00:18:21,760
have those it's time I argue to leave

00:18:17,299 --> 00:18:28,360
CGI behind and move Drupal and PHP past

00:18:21,760 --> 00:18:32,659
1993 Wow yes I'm saying mod PHP fast CGI

00:18:28,360 --> 00:18:34,340
not a thing what else is there let me

00:18:32,659 --> 00:18:37,760
introduce you to the world of non CGI

00:18:34,340 --> 00:18:40,640
PHP and I mean it and i don't mean

00:18:37,760 --> 00:18:45,230
command-line tools either I mean tools

00:18:40,640 --> 00:18:46,580
like react PHP basically it's no j/s but

00:18:45,230 --> 00:18:50,000
written in PHP it's an

00:18:46,580 --> 00:18:53,929
oversimplification but that's a decent

00:18:50,000 --> 00:18:56,330
explanation and if you're doing web

00:18:53,929 --> 00:18:58,610
sockets and PHP these days this is the

00:18:56,330 --> 00:19:00,679
tool for it is react they've got

00:18:58,610 --> 00:19:04,580
WebSocket libraries I've actually talked

00:19:00,679 --> 00:19:06,440
with their their development leads it's

00:19:04,580 --> 00:19:07,220
a decent enough system and it's much

00:19:06,440 --> 00:19:10,820
faster

00:19:07,220 --> 00:19:15,500
then CGI this here's a very basic web

00:19:10,820 --> 00:19:18,590
server using react we create an event

00:19:15,500 --> 00:19:19,840
loop do some wiring ignore the details

00:19:18,590 --> 00:19:24,140
that's not relevant for the moment

00:19:19,840 --> 00:19:26,600
listen on a request events with ears are

00:19:24,140 --> 00:19:29,929
callable here's our actual app and then

00:19:26,600 --> 00:19:31,789
run and it just this is running from the

00:19:29,929 --> 00:19:34,520
command line and this is sit here

00:19:31,789 --> 00:19:37,250
waiting on this port for incoming

00:19:34,520 --> 00:19:41,960
requests incoming request comes in

00:19:37,250 --> 00:19:44,720
passes off to this this callable it

00:19:41,960 --> 00:19:47,690
sends back your headers and texts and

00:19:44,720 --> 00:19:49,370
returns and notice it's persistent you

00:19:47,690 --> 00:19:51,130
have data that persists between requests

00:19:49,370 --> 00:19:53,450
because it's a single running process

00:19:51,130 --> 00:19:56,030
you are not tearing it down every time

00:19:53,450 --> 00:19:57,830
so who cares if this takes 400 500

00:19:56,030 --> 00:20:02,450
milliseconds to set up you do it once

00:19:57,830 --> 00:20:04,549
and never touch it again this lets you

00:20:02,450 --> 00:20:08,960
then you need to multiplex though

00:20:04,549 --> 00:20:10,610
because if you if you're having single

00:20:08,960 --> 00:20:13,309
request at a time there's one process

00:20:10,610 --> 00:20:14,510
and you pause on one request to look

00:20:13,309 --> 00:20:23,179
something up in the database which takes

00:20:14,510 --> 00:20:25,640
you know 30 milliseconds it's 30

00:20:23,179 --> 00:20:28,840
milliseconds you're not talking to any

00:20:25,640 --> 00:20:34,640
other requests that's so good either so

00:20:28,840 --> 00:20:37,400
react excuse me handles asynchronous i/o

00:20:34,640 --> 00:20:38,570
and by synchronous what I really mean is

00:20:37,400 --> 00:20:40,370
non blocking everyone calls are

00:20:38,570 --> 00:20:43,570
asynchronous non-blocking is really what

00:20:40,370 --> 00:20:47,210
we're talking about non-blocking i/o is

00:20:43,570 --> 00:20:48,830
where you pass an i/o request off to the

00:20:47,210 --> 00:20:51,860
operating system and say here take care

00:20:48,830 --> 00:20:53,179
of this your call to the OS returns

00:20:51,860 --> 00:20:56,360
immediately it doesn't wait for that

00:20:53,179 --> 00:20:58,250
request to finish it just returns and

00:20:56,360 --> 00:21:00,409
you check you trust the OS is going to

00:20:58,250 --> 00:21:01,490
take care of it and you'll come back and

00:21:00,409 --> 00:21:03,350
check later and see if there's a

00:21:01,490 --> 00:21:04,549
response or if there's something else

00:21:03,350 --> 00:21:07,460
you need to do or if there's an error or

00:21:04,549 --> 00:21:09,710
whatever and this is something PHP is

00:21:07,460 --> 00:21:10,970
completely capable of doing it's not

00:21:09,710 --> 00:21:13,400
done often but it's completely capable

00:21:10,970 --> 00:21:15,850
of doing unfortunately the API for it is

00:21:13,400 --> 00:21:20,150
based on C and is therefore god awful

00:21:15,850 --> 00:21:22,410
case in point yeah

00:21:20,150 --> 00:21:26,060
create a new socket set at non-blocking

00:21:22,410 --> 00:21:29,940
connect it to an IP address confront

00:21:26,060 --> 00:21:32,130
write something to it and then socket

00:21:29,940 --> 00:21:35,160
select which is hey is there a socket in

00:21:32,130 --> 00:21:38,490
this array that is ready that has data

00:21:35,160 --> 00:21:40,470
for me if so do something with it else

00:21:38,490 --> 00:21:41,940
I'll do something else for a while and

00:21:40,470 --> 00:21:47,670
then come back and check it later for

00:21:41,940 --> 00:21:51,420
some definition of later this is very

00:21:47,670 --> 00:21:53,670
very basic and please don't write this

00:21:51,420 --> 00:21:55,440
yourself react PHP takes care of all of

00:21:53,670 --> 00:21:58,230
us under the hood for you that's why it

00:21:55,440 --> 00:22:00,270
exists because this is a pain in the

00:21:58,230 --> 00:22:01,500
butt to work with yourself you also

00:22:00,270 --> 00:22:04,140
don't want to have lots and lots of

00:22:01,500 --> 00:22:06,390
callbacks like we saw before because

00:22:04,140 --> 00:22:08,250
that gets too terrible terrible code so

00:22:06,390 --> 00:22:11,730
instead uses something called promises

00:22:08,250 --> 00:22:14,280
whose use promises in JavaScript pretty

00:22:11,730 --> 00:22:17,100
much the exact same API reactive and

00:22:14,280 --> 00:22:19,440
implementation of the way of solving the

00:22:17,100 --> 00:22:22,110
nested callback problem and laying

00:22:19,440 --> 00:22:25,530
letting you defer execution when you're

00:22:22,110 --> 00:22:29,280
doing something asynchronously so it's a

00:22:25,530 --> 00:22:30,690
highly contrived example so we have the

00:22:29,280 --> 00:22:31,940
this function call that's going to get

00:22:30,690 --> 00:22:36,470
some data from the database

00:22:31,940 --> 00:22:40,590
asynchronously and so we say alright

00:22:36,470 --> 00:22:43,140
when data comes back if there was an

00:22:40,590 --> 00:22:46,230
error mark the this deferred object this

00:22:43,140 --> 00:22:49,170
promise as rejected if there was real

00:22:46,230 --> 00:22:52,860
data give it the data the results pass

00:22:49,170 --> 00:22:55,740
it on but this is all in a closure so

00:22:52,860 --> 00:22:59,130
this only happens sometime later when

00:22:55,740 --> 00:23:01,110
data actually comes back what we return

00:22:59,130 --> 00:23:02,490
is a promise that says there will be

00:23:01,110 --> 00:23:06,750
data here eventually and you can act on

00:23:02,490 --> 00:23:08,130
it eventually so called DB fetch which

00:23:06,750 --> 00:23:10,230
returns this promise immediately

00:23:08,130 --> 00:23:12,450
meanwhile the operating system is busy

00:23:10,230 --> 00:23:14,520
talking to the database we can keep on

00:23:12,450 --> 00:23:17,250
going and define these other callbacks

00:23:14,520 --> 00:23:21,770
on it say alright when the data comes in

00:23:17,250 --> 00:23:25,830
then fetch a row out of it and then then

00:23:21,770 --> 00:23:28,140
do something with that record this is

00:23:25,830 --> 00:23:30,540
how es6 and javascript is going to be

00:23:28,140 --> 00:23:32,280
working this is how you do a synchronous

00:23:30,540 --> 00:23:33,210
in any pretty much any modern systems

00:23:32,280 --> 00:23:35,549
doing a sink

00:23:33,210 --> 00:23:38,820
um in a single process is doing it this

00:23:35,549 --> 00:23:41,640
way you may have heard people say that

00:23:38,820 --> 00:23:44,760
no Jas is faster than PHP well they're

00:23:41,640 --> 00:23:47,399
wrong what is true is that doing

00:23:44,760 --> 00:23:51,120
asynchronous i/o non-blocking i/o is way

00:23:47,399 --> 00:23:55,200
faster than blocking io if you have an

00:23:51,120 --> 00:23:58,950
i/o intensive task another PHP developer

00:23:55,200 --> 00:24:02,640
named Phil sturgeon took the challenge

00:23:58,950 --> 00:24:05,070
and benchmarked nodejs versus react PHP

00:24:02,640 --> 00:24:07,460
and once both were properly configured

00:24:05,070 --> 00:24:11,429
ignore the blue line for a moment the

00:24:07,460 --> 00:24:13,559
yellow line is PHP's performance the red

00:24:11,429 --> 00:24:16,140
line is nodes and they're pretty well

00:24:13,559 --> 00:24:20,130
neck-and-neck the whole way no matter

00:24:16,140 --> 00:24:23,730
how many pic requests it's it's making

00:24:20,130 --> 00:24:26,190
it once because PHP is not actually the

00:24:23,730 --> 00:24:28,830
slow part blocking i/o is the slow part

00:24:26,190 --> 00:24:33,990
by the way this was done with PHP 5.5 HP

00:24:28,830 --> 00:24:35,789
seven is twice as fast all right if this

00:24:33,990 --> 00:24:38,640
isn't your style it's another new tool

00:24:35,789 --> 00:24:44,149
called icicle in PHP who's heard of

00:24:38,640 --> 00:24:47,309
icicle I figured you who would have

00:24:44,149 --> 00:24:49,529
icicle uses generators generators are a

00:24:47,309 --> 00:24:53,220
new feature in PHP 5.5 that are

00:24:49,529 --> 00:24:57,240
seriously cool at a limited level the

00:24:53,220 --> 00:24:59,309
kind of a shortcut for iterators so you

00:24:57,240 --> 00:25:03,510
have a function and instead of returning

00:24:59,309 --> 00:25:05,250
value you can yield a value this Python

00:25:03,510 --> 00:25:10,440
people you probably recognize this it's

00:25:05,250 --> 00:25:12,870
based on Python style and what this does

00:25:10,440 --> 00:25:17,480
is when you call it instead of returning

00:25:12,870 --> 00:25:20,909
a value it returns an iterator object so

00:25:17,480 --> 00:25:24,419
each time when you iterate over it then

00:25:20,909 --> 00:25:26,899
call next essentially it will run until

00:25:24,419 --> 00:25:29,039
it does yield and return that value and

00:25:26,899 --> 00:25:30,450
the next time you call next on it it

00:25:29,039 --> 00:25:32,630
just picks up where it left off and

00:25:30,450 --> 00:25:35,250
keeps on running until it hits the end

00:25:32,630 --> 00:25:38,820
so normally you've called the range

00:25:35,250 --> 00:25:40,080
function PHP you get with a 1 2

00:25:38,820 --> 00:25:42,059
1,000,000,000 you would get an array

00:25:40,080 --> 00:25:45,539
with 1 billion items in it which is not

00:25:42,059 --> 00:25:46,559
good for your memory instead with this

00:25:45,539 --> 00:25:48,659
approach

00:25:46,559 --> 00:25:52,139
it's generating the values on the fly

00:25:48,659 --> 00:25:53,370
and so we never blow out our memory this

00:25:52,139 --> 00:25:55,409
is a very simple contrived example

00:25:53,370 --> 00:25:57,720
generators can do some really really

00:25:55,409 --> 00:26:02,100
cool stuff beyond this thing greatly

00:25:57,720 --> 00:26:03,629
simplify your code in certain areas and

00:26:02,100 --> 00:26:06,980
this works your methods to any any

00:26:03,629 --> 00:26:12,360
function or method can be a generator

00:26:06,980 --> 00:26:15,720
you can also send data to a generator so

00:26:12,360 --> 00:26:18,330
in this case we call pow and the first

00:26:15,720 --> 00:26:23,610
it will run up until this first yield

00:26:18,330 --> 00:26:27,899
and then it will yet we we send a value

00:26:23,610 --> 00:26:32,039
to it and it assigns that value to Val

00:26:27,899 --> 00:26:35,249
and then it continues running until it

00:26:32,039 --> 00:26:37,110
yields that result which gets sent back

00:26:35,249 --> 00:26:39,389
and print it then the next time we call

00:26:37,110 --> 00:26:42,389
it it picks up here assigns that value

00:26:39,389 --> 00:26:44,549
and so on and so on and so on we have

00:26:42,389 --> 00:26:48,029
functions that we can pause mid

00:26:44,549 --> 00:26:51,149
operation and come back to later so we

00:26:48,029 --> 00:26:52,320
get a 25-9 and done but we can do other

00:26:51,149 --> 00:26:56,879
stuff in the middle here the function is

00:26:52,320 --> 00:26:59,669
just going to sit there happily what

00:26:56,879 --> 00:27:03,570
happens if that generator is doing

00:26:59,669 --> 00:27:05,429
asynchronous i/o again contrived example

00:27:03,570 --> 00:27:08,789
but we've got some kind of asynchronous

00:27:05,429 --> 00:27:10,200
socket we send data to it and it's

00:27:08,789 --> 00:27:12,899
writes it out on that socket

00:27:10,200 --> 00:27:14,879
asynchronously and comes back so now

00:27:12,899 --> 00:27:16,169
this yield i'm not actually even

00:27:14,879 --> 00:27:21,480
returning data i'm just letting the data

00:27:16,169 --> 00:27:22,950
be brought in to this process what's

00:27:21,480 --> 00:27:26,159
that good what's that's what get out

00:27:22,950 --> 00:27:27,960
gets output and this seems really

00:27:26,159 --> 00:27:31,049
ridiculously weird and it seemed

00:27:27,960 --> 00:27:34,259
ridiculous several times I looked at it

00:27:31,049 --> 00:27:36,299
and what follows you may not follow you

00:27:34,259 --> 00:27:37,320
may not understand the first time but

00:27:36,299 --> 00:27:41,159
once you start to understand them

00:27:37,320 --> 00:27:43,190
they're really cool co routines co

00:27:41,159 --> 00:27:46,529
routines according to wikipedia our

00:27:43,190 --> 00:27:48,960
program components that for non

00:27:46,529 --> 00:27:50,369
pre-emptive multitasking on multiple

00:27:48,960 --> 00:27:53,279
entry points for superseding and

00:27:50,369 --> 00:27:55,350
resuming execution functions that you

00:27:53,279 --> 00:27:58,049
can pause mid execution come back to

00:27:55,350 --> 00:28:00,340
later they can say someone else can have

00:27:58,049 --> 00:28:03,470
a turn for a while

00:28:00,340 --> 00:28:05,150
icicle is built on this approach which

00:28:03,470 --> 00:28:09,080
lets the code look I'm not a lot more

00:28:05,150 --> 00:28:14,150
like the code we're used to writing so

00:28:09,080 --> 00:28:18,770
in this case we set up our server we set

00:28:14,150 --> 00:28:23,600
it to run and when a request comes in we

00:28:18,770 --> 00:28:28,130
just yield our data every time we say

00:28:23,600 --> 00:28:29,990
yield that yields back to the core

00:28:28,130 --> 00:28:32,620
runtime of icicle and it lets other

00:28:29,990 --> 00:28:36,170
stuff run so these lines do not run

00:28:32,620 --> 00:28:37,520
immediately after each other any number

00:28:36,170 --> 00:28:38,720
of things could happen in between them

00:28:37,520 --> 00:28:40,910
these will still happen in the same

00:28:38,720 --> 00:28:42,260
order guaranteed but who knows what

00:28:40,910 --> 00:28:44,690
could be handling happening in the

00:28:42,260 --> 00:28:46,940
middle here combine this with

00:28:44,690 --> 00:28:49,450
asynchronous i/o and you get a very

00:28:46,940 --> 00:28:53,360
straightforward very fast environment I

00:28:49,450 --> 00:28:58,460
took this and wrote a very simple router

00:28:53,360 --> 00:28:59,870
for it just proof of concept so let's

00:28:58,460 --> 00:29:02,510
say pretend this is the entire kernel

00:28:59,870 --> 00:29:03,800
for your application we get the request

00:29:02,510 --> 00:29:05,440
in to figure out what our actions going

00:29:03,800 --> 00:29:10,580
to be our controller essentially and

00:29:05,440 --> 00:29:13,250
then we yield that action which means

00:29:10,580 --> 00:29:14,720
this will get dovetailed in between

00:29:13,250 --> 00:29:18,890
other parts of the request including

00:29:14,720 --> 00:29:20,870
other requests it still looks like we're

00:29:18,890 --> 00:29:23,720
calling that in saving the value but

00:29:20,870 --> 00:29:26,000
we're also telling icicle you can pause

00:29:23,720 --> 00:29:28,310
me here and come back to me later once

00:29:26,000 --> 00:29:30,830
the i/o is done and I actually have a

00:29:28,310 --> 00:29:32,180
value and all of that logic is handled

00:29:30,830 --> 00:29:33,410
under the hood and you can ignore the

00:29:32,180 --> 00:29:38,750
rest of this but for the time being

00:29:33,410 --> 00:29:41,900
other than you're still yielding icicle

00:29:38,750 --> 00:29:44,990
has promises to they work similar in

00:29:41,900 --> 00:29:49,250
this case we can say we've got a DNS

00:29:44,990 --> 00:29:50,450
resolver that's we're going to use we're

00:29:49,250 --> 00:29:54,440
going to wrap that up in a CO routine

00:29:50,450 --> 00:29:55,850
and then use promises on it I'll let you

00:29:54,440 --> 00:29:58,670
read this code later I'm going to post

00:29:55,850 --> 00:30:01,100
it later the time being just understand

00:29:58,670 --> 00:30:03,230
this is happening there are several

00:30:01,100 --> 00:30:06,280
frameworks I have not mentioned doing

00:30:03,230 --> 00:30:09,500
this kind of stuff in PHP today and

00:30:06,280 --> 00:30:12,710
because they're persistent demon this

00:30:09,500 --> 00:30:14,120
can do web sockets this can do HTTP to

00:30:12,710 --> 00:30:17,240
can do all the kind of stuff that we

00:30:14,120 --> 00:30:19,360
need to do in order to support the

00:30:17,240 --> 00:30:23,210
business cases we talked about before

00:30:19,360 --> 00:30:25,669
who's worked with HH vm a couple of

00:30:23,210 --> 00:30:27,980
people ok this is facebook's reimplement

00:30:25,669 --> 00:30:32,450
ation of PHP because they needed

00:30:27,980 --> 00:30:36,020
something more high performance it's

00:30:32,450 --> 00:30:37,760
mostly compatible with PHP there's a

00:30:36,020 --> 00:30:40,340
couple of things they don't support yet

00:30:37,760 --> 00:30:45,710
they're still working on it is much much

00:30:40,340 --> 00:30:48,830
faster than PHP 5.5 or 5.6 PHP 7 pretty

00:30:45,710 --> 00:30:51,740
much just caught up but it also has this

00:30:48,830 --> 00:30:53,029
thing called hack hack is one of the

00:30:51,740 --> 00:30:57,140
worst named languages in the universe

00:30:53,029 --> 00:30:59,840
it's an extension to PHP itself with a

00:30:57,140 --> 00:31:01,610
lot of new syntax for new capabilities

00:30:59,840 --> 00:31:04,039
many of which have since made the way

00:31:01,610 --> 00:31:06,590
back into PHP itself things like scalar

00:31:04,039 --> 00:31:09,470
types which are going to be in PHP 7 and

00:31:06,590 --> 00:31:13,370
are going to be awesome started in hacks

00:31:09,470 --> 00:31:14,870
in hack a lot of other things they have

00:31:13,370 --> 00:31:16,909
generics already the constructor

00:31:14,870 --> 00:31:18,740
promotion short lambda syntax which is

00:31:16,909 --> 00:31:20,809
also being considered for PHP itself at

00:31:18,740 --> 00:31:25,940
this point but most importantly for us

00:31:20,809 --> 00:31:28,640
native async primitives so this is from

00:31:25,940 --> 00:31:30,950
the hack manual and say have a function

00:31:28,640 --> 00:31:35,450
here that we're going to mark as a sink

00:31:30,950 --> 00:31:37,760
and this one is async async and then we

00:31:35,450 --> 00:31:41,360
can say all right let those functions

00:31:37,760 --> 00:31:44,809
run and wait here until all of them are

00:31:41,360 --> 00:31:46,370
done if they were doing asynchronous i/o

00:31:44,809 --> 00:31:50,299
which I left out of the slide because

00:31:46,370 --> 00:31:51,770
it's too big to fit on a slide then the

00:31:50,299 --> 00:31:53,659
runtime itself can switch back and forth

00:31:51,770 --> 00:31:56,510
between those two whenever it needs to

00:31:53,659 --> 00:31:58,820
to keep the CPU busy and not just

00:31:56,510 --> 00:32:01,730
sitting there waiting on Io and this is

00:31:58,820 --> 00:32:03,860
built into the engine and then we get

00:32:01,730 --> 00:32:05,299
all of our data back and so we get the

00:32:03,860 --> 00:32:07,730
result of both of these now imagine

00:32:05,299 --> 00:32:11,419
doing this to render blocks in parallel

00:32:07,730 --> 00:32:13,730
in Drupal what's the performance gain of

00:32:11,419 --> 00:32:16,970
that what's the architecture gain of

00:32:13,730 --> 00:32:19,850
that pretty huge that's what we were

00:32:16,970 --> 00:32:25,039
trying to do in the first place now

00:32:19,850 --> 00:32:26,540
imagine that all of your i/o is a sink

00:32:25,039 --> 00:32:28,760
capable they don't have drivers

00:32:26,540 --> 00:32:32,000
thing yet but suppose you do you can say

00:32:28,760 --> 00:32:34,880
all right all of these I'm just going to

00:32:32,000 --> 00:32:37,850
say run all of these things let them all

00:32:34,880 --> 00:32:39,320
do their thing asynchronously the CPU

00:32:37,850 --> 00:32:40,760
will sort it out the operating system is

00:32:39,320 --> 00:32:43,160
sorted out the operating system is way

00:32:40,760 --> 00:32:44,810
faster than we are and when all of them

00:32:43,160 --> 00:32:49,580
are done get back those results as an

00:32:44,810 --> 00:32:51,950
array again very contrived example but

00:32:49,580 --> 00:32:53,930
imagine what you can do if you can say

00:32:51,950 --> 00:32:57,620
oh I've got these eight blocks on the

00:32:53,930 --> 00:32:59,180
page they're all cached don't suck them

00:32:57,620 --> 00:33:04,220
all out of the cash at once glue them

00:32:59,180 --> 00:33:06,740
together print now imagine if you can

00:33:04,220 --> 00:33:10,010
make all of your i/o a synchronous when

00:33:06,740 --> 00:33:12,350
serving rest requests can you you know

00:33:10,010 --> 00:33:16,300
get sixty percent eighty percent

00:33:12,350 --> 00:33:16,300
performance improvement quite possibly

00:33:16,660 --> 00:33:23,420
you can fork PHP processes not if

00:33:19,940 --> 00:33:25,070
they're running as CGI but you can fork

00:33:23,420 --> 00:33:27,710
PHP processes from the command line I've

00:33:25,070 --> 00:33:30,100
actually built apps like this we did one

00:33:27,710 --> 00:33:33,500
a couple of years ago called Kiwi which

00:33:30,100 --> 00:33:36,020
was a a joke because it is a connector

00:33:33,500 --> 00:33:40,520
for a system called Inu both of which

00:33:36,020 --> 00:33:42,590
are flightless birds and this is

00:33:40,520 --> 00:33:44,690
essentially how the system worked there

00:33:42,590 --> 00:33:47,840
is a command-line tool but we had some

00:33:44,690 --> 00:33:53,240
number of workers and we're just fork

00:33:47,840 --> 00:33:54,860
and say all right if we fork it for the

00:33:53,240 --> 00:33:57,710
number of child process across such as

00:33:54,860 --> 00:34:00,530
we have and if it's the parent though

00:33:57,710 --> 00:34:01,700
nothing if it's a child process then go

00:34:00,530 --> 00:34:02,930
do whatever the work is they're

00:34:01,700 --> 00:34:06,680
splitting up between multiple child

00:34:02,930 --> 00:34:10,730
processes and then wait for them all to

00:34:06,680 --> 00:34:12,380
finish and so the parent process just

00:34:10,730 --> 00:34:14,870
pause is there until all the children

00:34:12,380 --> 00:34:17,230
are done and this gave us a two-fold

00:34:14,870 --> 00:34:19,700
improvement over not doing it this way

00:34:17,230 --> 00:34:21,440
but this also means that we have

00:34:19,700 --> 00:34:23,480
completely shared memory up until the

00:34:21,440 --> 00:34:24,770
point of the fork and the operating

00:34:23,480 --> 00:34:26,919
system doesn't actually duplicate the

00:34:24,770 --> 00:34:28,730
memory we can have five six seven eight

00:34:26,919 --> 00:34:31,610
processes running all with the same

00:34:28,730 --> 00:34:36,560
memory usage same memory space in the

00:34:31,610 --> 00:34:38,780
operating system and those processes

00:34:36,560 --> 00:34:41,530
they could be blocking or those could be

00:34:38,780 --> 00:34:41,530
I synchronous to

00:34:43,150 --> 00:34:51,100
imagine doing something like this super

00:34:47,480 --> 00:34:54,410
simple example we have a non-blocking

00:34:51,100 --> 00:34:56,720
forking server we have set up our socket

00:34:54,410 --> 00:34:59,060
then just loop and say alright is there

00:34:56,720 --> 00:35:02,620
something to do if not come back in a

00:34:59,060 --> 00:35:05,450
moment if so fork let the child process

00:35:02,620 --> 00:35:08,690
handle it that incoming requests and let

00:35:05,450 --> 00:35:10,700
the parent go back to waiting or we

00:35:08,690 --> 00:35:13,370
could priests you predefined a couple of

00:35:10,700 --> 00:35:14,690
processes and create a pool of them that

00:35:13,370 --> 00:35:16,130
are sitting there waiting and we can

00:35:14,690 --> 00:35:18,500
handle off handoff from the parent

00:35:16,130 --> 00:35:20,240
request to those child requests or child

00:35:18,500 --> 00:35:24,170
processes every time there's a request

00:35:20,240 --> 00:35:27,200
which is exactly how Apache works we can

00:35:24,170 --> 00:35:31,880
reimplement Apache in PHP and never have

00:35:27,200 --> 00:35:34,250
to bootstrap again obviously this is a

00:35:31,880 --> 00:35:35,390
terribly buggy and error-prone way of

00:35:34,250 --> 00:35:36,770
doing it there are various libraries

00:35:35,390 --> 00:35:40,100
that wrap this up in a much safer

00:35:36,770 --> 00:35:43,820
fashion one of them icicle concurrent is

00:35:40,100 --> 00:35:45,980
a process manager that's using channels

00:35:43,820 --> 00:35:48,860
for communicating between processes kind

00:35:45,980 --> 00:35:51,290
of inspired by go I said there are other

00:35:48,860 --> 00:35:55,730
tools like this as well this is what's

00:35:51,290 --> 00:35:59,330
happening in the PHP world today all of

00:35:55,730 --> 00:36:00,890
these are happening today I've been

00:35:59,330 --> 00:36:03,590
talking to some of the PHP internals

00:36:00,890 --> 00:36:08,180
developers including some who work on

00:36:03,590 --> 00:36:12,920
both HH vm and on PHP will they get a

00:36:08,180 --> 00:36:14,660
sink primitives in PHP 71 72 I put the

00:36:12,920 --> 00:36:16,190
odds of better than fifty percent PHP

00:36:14,660 --> 00:36:19,760
has made of a sink primitives in the

00:36:16,190 --> 00:36:23,240
language before 2020 what are we going

00:36:19,760 --> 00:36:28,310
to do with those are we ready to use

00:36:23,240 --> 00:36:30,440
those will that let us do the push

00:36:28,310 --> 00:36:33,020
persistent connections we're going to

00:36:30,440 --> 00:36:38,480
need to do we'll just let us have

00:36:33,020 --> 00:36:39,770
multiple configurations of Drupal which

00:36:38,480 --> 00:36:44,120
of these approaches is going to win a

00:36:39,770 --> 00:36:47,840
sink forking react style generator style

00:36:44,120 --> 00:36:49,610
with icicle well I was hoping to be able

00:36:47,840 --> 00:36:51,740
to tell you which was going to be

00:36:49,610 --> 00:36:53,630
successful but to be perfectly honest I

00:36:51,740 --> 00:36:54,950
have no idea

00:36:53,630 --> 00:36:58,579
I have no idea which of these approaches

00:36:54,950 --> 00:37:02,839
is going to end up the successful future

00:36:58,579 --> 00:37:05,059
of PHP what I will predict is that CGI

00:37:02,839 --> 00:37:06,829
is not going to go away entirely because

00:37:05,059 --> 00:37:09,589
shared nothing does have a lot of

00:37:06,829 --> 00:37:11,839
advantages to it it does simplify a lot

00:37:09,589 --> 00:37:13,369
of problems that if we're working with

00:37:11,839 --> 00:37:17,630
these other types of architectures

00:37:13,369 --> 00:37:20,089
become relevant but we are going to need

00:37:17,630 --> 00:37:22,059
to work in other environments we're

00:37:20,089 --> 00:37:24,710
going to need to use Drupal in

00:37:22,059 --> 00:37:26,500
situations where we can't afford a

00:37:24,710 --> 00:37:28,579
bootstrap on every incoming request

00:37:26,500 --> 00:37:30,200
we're going to need to use Drupal to do

00:37:28,579 --> 00:37:32,869
web sockets we're going to need to use

00:37:30,200 --> 00:37:35,690
Drupal to do server push with HTTP to

00:37:32,869 --> 00:37:39,710
these are going to be hard requirements

00:37:35,690 --> 00:37:41,509
on us if we want to compete we are going

00:37:39,710 --> 00:37:44,000
to need be able to need to run in both

00:37:41,509 --> 00:37:46,549
modes we're going to need to be able to

00:37:44,000 --> 00:37:49,910
run Drupal as a standalone server like

00:37:46,549 --> 00:37:53,089
now or as a split brain decouple system

00:37:49,910 --> 00:37:56,180
or as a high-performance rest server or

00:37:53,089 --> 00:37:57,859
several of those at the same time so how

00:37:56,180 --> 00:38:00,140
do we make Drupal both monolithic and

00:37:57,859 --> 00:38:01,700
decoupled at the same time that's our

00:38:00,140 --> 00:38:04,339
challenge that's what we can do today to

00:38:01,700 --> 00:38:08,359
get ready for whatever the future looks

00:38:04,339 --> 00:38:10,069
like any of these I don't know what we

00:38:08,359 --> 00:38:12,170
need to do is support different

00:38:10,069 --> 00:38:13,910
configurations of common Drupal

00:38:12,170 --> 00:38:16,250
components the same underlying

00:38:13,910 --> 00:38:17,960
components arranged and architected in

00:38:16,250 --> 00:38:20,269
different ways but still the same

00:38:17,960 --> 00:38:21,559
underlying code so we don't have to

00:38:20,269 --> 00:38:23,019
produce eight different versions of

00:38:21,559 --> 00:38:28,069
Drupal we just have eight different

00:38:23,019 --> 00:38:33,349
wirings of Drupal how do we do that well

00:38:28,069 --> 00:38:36,019
here's our first clue components we need

00:38:33,349 --> 00:38:38,180
reusable components that can run in any

00:38:36,019 --> 00:38:39,319
of these modes or some other mode i

00:38:38,180 --> 00:38:40,819
haven't mentioned because i don't know

00:38:39,319 --> 00:38:45,259
about it yet because it hasn't been

00:38:40,819 --> 00:38:48,069
invented we need reusable components

00:38:45,259 --> 00:38:51,559
what makes a component reusable in PHP

00:38:48,069 --> 00:38:54,829
this list should look familiar it should

00:38:51,559 --> 00:38:56,569
be safe lists no state means it doesn't

00:38:54,829 --> 00:38:57,920
matter how many requests are running

00:38:56,569 --> 00:39:01,609
through the code at the same time they

00:38:57,920 --> 00:39:04,490
won't bump into each other means value

00:39:01,609 --> 00:39:06,850
objects it means immutable objects that

00:39:04,490 --> 00:39:09,940
we know we're not going to pollute other

00:39:06,850 --> 00:39:12,340
threads it means not a single global

00:39:09,940 --> 00:39:15,910
anywhere in the system one single global

00:39:12,340 --> 00:39:17,620
destroys your ability to keep your

00:39:15,910 --> 00:39:20,980
processes separate or your request

00:39:17,620 --> 00:39:23,920
separate if you have a single process it

00:39:20,980 --> 00:39:25,990
means we need to stop having global

00:39:23,920 --> 00:39:30,070
dependencies on the request the request

00:39:25,990 --> 00:39:32,490
sack is symphonies way of handling sub

00:39:30,070 --> 00:39:35,850
requests and we're using it as well and

00:39:32,490 --> 00:39:38,770
that's not quite going to cut it because

00:39:35,850 --> 00:39:42,100
keeping track of that context gets very

00:39:38,770 --> 00:39:43,810
very interesting we need code that is

00:39:42,100 --> 00:39:46,900
not dependent on our service container

00:39:43,810 --> 00:39:50,050
why because the symphony service

00:39:46,900 --> 00:39:52,630
container is a great tool for CGI based

00:39:50,050 --> 00:39:54,430
system but if we're running in a

00:39:52,630 --> 00:39:57,220
persistent demon we don't need all of

00:39:54,430 --> 00:39:58,930
those compiling stuff all this compiled

00:39:57,220 --> 00:40:00,160
container it's not necessary it's there

00:39:58,930 --> 00:40:01,570
for performance when you have shared

00:40:00,160 --> 00:40:03,400
nothing we don't have shared nothing you

00:40:01,570 --> 00:40:04,780
don't need to waste time on that we need

00:40:03,400 --> 00:40:06,460
to wire it differently we may want to

00:40:04,780 --> 00:40:09,010
use a completely different container in

00:40:06,460 --> 00:40:11,530
different configurations so the more

00:40:09,010 --> 00:40:15,400
code we have that is independent of the

00:40:11,530 --> 00:40:17,380
container the easier that becomes any

00:40:15,400 --> 00:40:19,540
i/o we have needs to be isolated into

00:40:17,380 --> 00:40:21,040
very specific classes because that's the

00:40:19,540 --> 00:40:25,420
stuff we're gonna have to rewrite for

00:40:21,040 --> 00:40:26,860
each case so keep your IO in very

00:40:25,420 --> 00:40:28,750
specific classes that do nothing other

00:40:26,860 --> 00:40:29,860
than talk to third parties because

00:40:28,750 --> 00:40:32,050
that's some stuff that gets rewritten

00:40:29,860 --> 00:40:35,790
the rest of the code shall be stateless

00:40:32,050 --> 00:40:35,790
services that we can just reuse anywhere

00:40:36,120 --> 00:40:40,600
this is easier if you rely on

00:40:38,230 --> 00:40:41,830
third-party code if that third-party

00:40:40,600 --> 00:40:44,140
code is well-written great you don't

00:40:41,830 --> 00:40:49,120
have to maintain it the PHP community as

00:40:44,140 --> 00:40:50,740
a whole can maintain it dare I say this

00:40:49,120 --> 00:40:58,420
is what qualifies for purely functional

00:40:50,740 --> 00:41:00,580
code you know me yes I dare these are

00:40:58,420 --> 00:41:05,320
the same clean code standards we've been

00:41:00,580 --> 00:41:08,890
pushing for years this is why Drupal 8

00:41:05,320 --> 00:41:10,960
made such a big shift from the old PHP

00:41:08,890 --> 00:41:13,270
for style architecture towards a more

00:41:10,960 --> 00:41:15,010
modern oo architecture this is why we

00:41:13,270 --> 00:41:18,550
push for stateless services this is why

00:41:15,010 --> 00:41:20,650
we have value objects in places this is

00:41:18,550 --> 00:41:25,990
why because this opens the

00:41:20,650 --> 00:41:28,089
or to these kind of changes what are the

00:41:25,990 --> 00:41:31,390
hard parts still going to be well enter

00:41:28,089 --> 00:41:33,730
the API has most of the problems I just

00:41:31,390 --> 00:41:35,079
listed far too many statics far too many

00:41:33,730 --> 00:41:37,569
service dependencies it's going to be a

00:41:35,079 --> 00:41:40,660
problem it's a problem we have to fix if

00:41:37,569 --> 00:41:42,339
we ever want to serve entities using

00:41:40,660 --> 00:41:45,450
WebSockets if you want to serve entities

00:41:42,339 --> 00:41:48,670
using WebSockets we have to fix this

00:41:45,450 --> 00:41:51,730
render API the render context system is

00:41:48,670 --> 00:41:53,740
great for what it does it's great for

00:41:51,730 --> 00:41:55,569
the architecture we have now I really

00:41:53,740 --> 00:41:56,680
don't know what's going to happen if we

00:41:55,569 --> 00:41:58,450
try to put up clone a synchronous

00:41:56,680 --> 00:42:01,680
environment it might actually work I

00:41:58,450 --> 00:42:04,420
haven't tried but it's a concern point

00:42:01,680 --> 00:42:06,000
anything that's container aware means

00:42:04,420 --> 00:42:08,680
it's coupled to a single container if

00:42:06,000 --> 00:42:11,170
you have code in Drupal or in a module

00:42:08,680 --> 00:42:13,000
that is container aware be where you are

00:42:11,170 --> 00:42:15,130
coupling to an architecture that may not

00:42:13,000 --> 00:42:16,450
be around in five years or may not be

00:42:15,130 --> 00:42:20,640
the only one you need to worry about in

00:42:16,450 --> 00:42:22,930
five years as I mentioned request stack

00:42:20,640 --> 00:42:25,150
it's designed for sub requests not for

00:42:22,930 --> 00:42:27,609
asynchronous work this may be a problem

00:42:25,150 --> 00:42:32,289
too we may need to separate separating

00:42:27,609 --> 00:42:33,700
that which means do we need to start

00:42:32,289 --> 00:42:35,049
putting our code into separate

00:42:33,700 --> 00:42:36,940
repositories do we need to break or up

00:42:35,049 --> 00:42:39,480
into separate repositories to force

00:42:36,940 --> 00:42:44,619
ourselves to do this kind of separation

00:42:39,480 --> 00:42:45,760
maybe I don't know we might because even

00:42:44,619 --> 00:42:47,920
just with the components we have now

00:42:45,760 --> 00:42:49,630
it's been really hard to convince people

00:42:47,920 --> 00:42:51,309
to not introduce subtle little

00:42:49,630 --> 00:42:52,270
dependencies without realizing it and

00:42:51,309 --> 00:42:53,799
saying oh it's just one little

00:42:52,270 --> 00:42:58,900
dependency you know one little

00:42:53,799 --> 00:43:00,160
dependency breaks all of this thread

00:42:58,900 --> 00:43:01,630
safe code which is what we're talking

00:43:00,160 --> 00:43:04,510
about here stateless threadsafe

00:43:01,630 --> 00:43:07,990
reentrant code can really easily be used

00:43:04,510 --> 00:43:10,319
in cgi mode we can still use it in the

00:43:07,990 --> 00:43:12,579
traditional fashion but not vice versa

00:43:10,319 --> 00:43:13,450
code that relies on a bunch of Global's

00:43:12,579 --> 00:43:15,880
that get destroy to the end of the

00:43:13,450 --> 00:43:18,660
request will not work at all in anything

00:43:15,880 --> 00:43:20,920
other than CGI all of its other code

00:43:18,660 --> 00:43:25,720
aside from a couple of yield statements

00:43:20,920 --> 00:43:27,849
will work in CGI and work in any of them

00:43:25,720 --> 00:43:32,369
so let's write the best code we can and

00:43:27,849 --> 00:43:34,570
hedge our bets it's also testable

00:43:32,369 --> 00:43:36,280
everything I just said makes code more

00:43:34,570 --> 00:43:37,960
well too if your code is more easily

00:43:36,280 --> 00:43:40,300
testable you're probably getting the

00:43:37,960 --> 00:43:45,300
rest of this right too they all play on

00:43:40,300 --> 00:43:48,870
each other this is not this sounds huge

00:43:45,300 --> 00:43:51,160
but quite frankly this is within sight I

00:43:48,870 --> 00:43:54,670
can see us pulling this off in five

00:43:51,160 --> 00:43:57,400
years why because of the work we've

00:43:54,670 --> 00:43:59,740
already done because the work we've

00:43:57,400 --> 00:44:01,870
already done to refactor the system

00:43:59,740 --> 00:44:04,870
because most of the system is now

00:44:01,870 --> 00:44:08,590
stateless services not all of it most of

00:44:04,870 --> 00:44:11,320
it most of the system is not container

00:44:08,590 --> 00:44:15,130
aware to do many things are most of it

00:44:11,320 --> 00:44:17,440
is not we are closer to this and today

00:44:15,130 --> 00:44:19,870
then triple seven was the Drupal 8 I

00:44:17,440 --> 00:44:22,450
would argue the distance from seven to

00:44:19,870 --> 00:44:25,330
eight that we have already covered is a

00:44:22,450 --> 00:44:28,030
bigger shift than what the actual work

00:44:25,330 --> 00:44:31,030
required to prepare for whatever this

00:44:28,030 --> 00:44:34,600
future holds as long as we don't slide

00:44:31,030 --> 00:44:37,090
backwards as long as we don't get lazy

00:44:34,600 --> 00:44:38,470
and start reintroducing shortcuts that

00:44:37,090 --> 00:44:40,930
make things easier for right now but

00:44:38,470 --> 00:44:44,200
actually type the couple things again so

00:44:40,930 --> 00:44:46,060
please don't do that I'm sure some of

00:44:44,200 --> 00:44:47,380
you out there saying but what if you're

00:44:46,060 --> 00:44:56,140
wrong raise your hand if you're in this

00:44:47,380 --> 00:44:58,920
category Peter five years sounds too

00:44:56,140 --> 00:45:02,800
slow if what I'm saying is true could be

00:44:58,920 --> 00:45:05,500
okay I mean these are refactorings that

00:45:02,800 --> 00:45:07,750
we can do every country Bob should be

00:45:05,500 --> 00:45:09,900
thinking this way and this is a

00:45:07,750 --> 00:45:12,580
guideline for how we improve Drupal 8

00:45:09,900 --> 00:45:14,680
within the Drupal 8 lifetime this is not

00:45:12,580 --> 00:45:16,990
a we start rewriting Drupal today no no

00:45:14,680 --> 00:45:18,760
this is a as we are improving Drupal 8

00:45:16,990 --> 00:45:22,210
over the next several years these are

00:45:18,760 --> 00:45:26,080
the guidelines to keep in mind and if

00:45:22,210 --> 00:45:28,090
I'm wrong and in 2020 synchronous CGI is

00:45:26,080 --> 00:45:30,430
still the only game in town for PHP and

00:45:28,090 --> 00:45:34,900
I know HTTP to just never really takes

00:45:30,430 --> 00:45:37,120
off right well then all we're left with

00:45:34,900 --> 00:45:39,610
is a highly decoupled highly testable

00:45:37,120 --> 00:45:44,130
highly reusable shareable code base full

00:45:39,610 --> 00:45:44,130
of loosely couple components awesome

00:45:46,180 --> 00:45:51,200
some resources to follow up on i will

00:45:49,220 --> 00:45:55,310
post these slides links to react to

00:45:51,200 --> 00:45:58,160
icicle dorman is a PHP process manager

00:45:55,310 --> 00:46:01,580
they have forked environments 8h BMS

00:45:58,160 --> 00:46:04,190
documentation some links to the PHP

00:46:01,580 --> 00:46:06,500
manual and some other articles that i

00:46:04,190 --> 00:46:08,270
recommend reading as it took me a while

00:46:06,500 --> 00:46:09,860
to wrap my brain around most of this so

00:46:08,270 --> 00:46:11,690
if your brain is fried right now don't

00:46:09,860 --> 00:46:13,270
worry you're in good company most

00:46:11,690 --> 00:46:16,340
people's brains are fried at this point

00:46:13,270 --> 00:46:17,810
but I do recommend taking time read

00:46:16,340 --> 00:46:23,200
through some of these articles may be

00:46:17,810 --> 00:46:27,140
multiple times and I can't think about

00:46:23,200 --> 00:46:29,080
what just how far can we go so how far

00:46:27,140 --> 00:46:31,840
can we push this to make Drupal a

00:46:29,080 --> 00:46:37,870
WebSocket friendly HTTP to based

00:46:31,840 --> 00:46:37,870
decoupled powerhouse thank

00:46:45,480 --> 00:46:49,860
so we do have time for questions so

00:46:47,890 --> 00:46:52,000
there's a microphone here please use it

00:46:49,860 --> 00:47:06,780
unless I've just melted everyone's brain

00:46:52,000 --> 00:47:06,780
way too much nobody yeah it's over there

00:47:17,760 --> 00:47:24,510
Hilary sins Peter Lennon so in terms of

00:47:22,800 --> 00:47:27,750
pushing content to devices and things

00:47:24,510 --> 00:47:33,210
how do we have Drupal do that and also

00:47:27,750 --> 00:47:34,620
serve web pages in a way that maybe it

00:47:33,210 --> 00:47:36,510
makes sense to turn my the request and

00:47:34,620 --> 00:47:38,730
clean up because you just built a huge

00:47:36,510 --> 00:47:40,170
whack of HTML versus you know just

00:47:38,730 --> 00:47:42,120
pushing out a little notification where

00:47:40,170 --> 00:47:43,320
you might want a long-running demon or

00:47:42,120 --> 00:47:46,020
we're gonna have to have Drupal running

00:47:43,320 --> 00:47:48,120
on the same server somehow in the same

00:47:46,020 --> 00:47:50,490
mode or running a two servers talk in

00:47:48,120 --> 00:47:52,410
the same database in two modes how do

00:47:50,490 --> 00:47:53,880
you how do you get rid of the current

00:47:52,410 --> 00:47:56,390
behavior of actually serving web pages

00:47:53,880 --> 00:48:01,170
and this push web sockets behavior

00:47:56,390 --> 00:48:04,680
that's an excellent question a couple of

00:48:01,170 --> 00:48:07,140
possibilities you could have a common

00:48:04,680 --> 00:48:10,050
data store server that's where all your

00:48:07,140 --> 00:48:14,580
entities live and then a CGI front end

00:48:10,050 --> 00:48:16,380
and a a WebSocket front end that are

00:48:14,580 --> 00:48:18,390
running on separate servers you could

00:48:16,380 --> 00:48:23,190
have a persistent demon that's on an

00:48:18,390 --> 00:48:25,920
incoming request can upgrade it from

00:48:23,190 --> 00:48:28,380
HTTP 1.1 to web sockets or two HTTP two

00:48:25,920 --> 00:48:31,410
and then that request stays open it's a

00:48:28,380 --> 00:48:36,270
it's it's own Fork process or it's a

00:48:31,410 --> 00:48:38,070
separate track process in PHP itself so

00:48:36,270 --> 00:48:39,930
i'll give you can do very simple like

00:48:38,070 --> 00:48:42,690
chat servers and stuff with react PHP in

00:48:39,930 --> 00:48:47,300
a matter of an hour or two and then it

00:48:42,690 --> 00:48:49,740
maintains an open connection to every

00:48:47,300 --> 00:48:52,590
client that's connected to the server

00:48:49,740 --> 00:48:54,900
and then I'd see no reason why it

00:48:52,590 --> 00:48:56,460
couldn't oh this request is asking for

00:48:54,900 --> 00:48:58,020
an HTML page rather than being a

00:48:56,460 --> 00:49:01,770
WebSocket connection so I'll just serve

00:48:58,020 --> 00:49:04,020
its thing and drop that connection at

00:49:01,770 --> 00:49:05,850
the end yes that means that we need

00:49:04,020 --> 00:49:07,920
doing so needs to clean up after itself

00:49:05,850 --> 00:49:10,290
and not have all these statics and giant

00:49:07,920 --> 00:49:12,330
render arrays that we built up that's

00:49:10,290 --> 00:49:14,190
the point and that's exactly what we

00:49:12,330 --> 00:49:17,720
need to be doing in order to support I

00:49:14,190 --> 00:49:17,720
don't know which of these architectures

00:49:22,510 --> 00:49:28,670
hi I was wondering do you know what

00:49:25,640 --> 00:49:30,470
symphony is already doing to implement

00:49:28,670 --> 00:49:32,510
this or what it means for the

00:49:30,470 --> 00:49:34,310
integration with symphony I am not aware

00:49:32,510 --> 00:49:36,140
of simply doing anything in this regard

00:49:34,310 --> 00:49:39,800
at this points that said I haven't

00:49:36,140 --> 00:49:42,680
really asked I suspect simply will

00:49:39,800 --> 00:49:47,540
remain a very good shared nothing

00:49:42,680 --> 00:49:50,510
architecture framework but in five years

00:49:47,540 --> 00:49:52,940
who knows you know I I'm trying to look

00:49:50,510 --> 00:49:55,640
further ahead than anything currently

00:49:52,940 --> 00:49:57,770
the market that is in actual use react

00:49:55,640 --> 00:49:59,360
PHP is the NH h vm are the only tools

00:49:57,770 --> 00:50:01,690
here i mentioned that are in actually

00:49:59,360 --> 00:50:07,490
used right now I school is still in beta

00:50:01,690 --> 00:50:08,990
maybe alpha so I think a lot of

00:50:07,490 --> 00:50:11,270
symphonies architecture could work

00:50:08,990 --> 00:50:13,100
fairly well actually the HTTP Colonel

00:50:11,270 --> 00:50:15,500
architecture could work very well here

00:50:13,100 --> 00:50:18,020
in five years I would not be surprised

00:50:15,500 --> 00:50:21,050
if simply it also switched to PS r7 the

00:50:18,020 --> 00:50:22,220
HTTP request and response standard which

00:50:21,050 --> 00:50:24,710
was designed with this kind of thing in

00:50:22,220 --> 00:50:26,720
mind that's why its value objects and

00:50:24,710 --> 00:50:28,850
what that's why it's immutable to

00:50:26,720 --> 00:50:30,650
simplify exactly this kind of what is

00:50:28,850 --> 00:50:35,420
now esoteric but in the future may not

00:50:30,650 --> 00:50:37,970
be esoteric use cases so my hope is that

00:50:35,420 --> 00:50:39,410
simply components will remain good d

00:50:37,970 --> 00:50:40,670
couple components and we can keep using

00:50:39,410 --> 00:50:45,130
them or not as it makes sense

00:50:40,670 --> 00:50:45,130
architectural II at the time thank you

00:50:45,670 --> 00:50:51,980
first of all great talk really and many

00:50:49,610 --> 00:50:54,370
of the things you said a bowl in the

00:50:51,980 --> 00:50:57,860
early beginning reminded me of

00:50:54,370 --> 00:50:59,630
application servers in Java like I don't

00:50:57,860 --> 00:51:02,470
know cheapos don't get and stuff like

00:50:59,630 --> 00:51:06,500
that multithreading so i was wondering

00:51:02,470 --> 00:51:09,200
is there anything in the words for PHP

00:51:06,500 --> 00:51:11,870
or are there very compelling reasons for

00:51:09,200 --> 00:51:15,770
doing that in the user space eyes aside

00:51:11,870 --> 00:51:19,040
from methanol portability in terms of

00:51:15,770 --> 00:51:21,170
the PHP engine as i said there's talk of

00:51:19,040 --> 00:51:22,940
asynchronous primitives in the language

00:51:21,170 --> 00:51:25,100
itself whether or not those will happen

00:51:22,940 --> 00:51:27,400
i don't know i think it's likely that

00:51:25,100 --> 00:51:31,880
within five years we'll get something

00:51:27,400 --> 00:51:34,230
there was talk about bringing a better

00:51:31,880 --> 00:51:36,690
event loop library into PHP

00:51:34,230 --> 00:51:41,270
self like live EV or live events which

00:51:36,690 --> 00:51:44,310
the options that no DJ s uses to do I

00:51:41,270 --> 00:51:46,710
think again a lot of a lot of work went

00:51:44,310 --> 00:51:49,619
into PHP 7 under the hood to clean up

00:51:46,710 --> 00:51:54,690
its code to make it possible to do this

00:51:49,619 --> 00:51:58,770
kind of stuff in 71 72 73 Willie ever

00:51:54,690 --> 00:52:02,340
gets like a tomcat equivalents I'm going

00:51:58,770 --> 00:52:03,720
to guess no because aside from some high

00:52:02,340 --> 00:52:05,070
performance pieces like the event loop

00:52:03,720 --> 00:52:07,800
there's probably not a reason to do it

00:52:05,070 --> 00:52:09,210
in the engine itself and there's plenty

00:52:07,800 --> 00:52:14,970
of people who'd actually don't think it

00:52:09,210 --> 00:52:16,109
should be so yeah I at least half of the

00:52:14,970 --> 00:52:19,170
implementation of these things is going

00:52:16,109 --> 00:52:25,410
to be user space is my guess but I could

00:52:19,170 --> 00:52:28,890
be wrong thanks so um if we assume

00:52:25,410 --> 00:52:31,290
that's well I'm a a love all these great

00:52:28,890 --> 00:52:34,140
new stuff and I can't wait to get

00:52:31,290 --> 00:52:36,240
started I don't want to wait until 2020

00:52:34,140 --> 00:52:39,000
I don't want to wait until triple 9 is

00:52:36,240 --> 00:52:41,490
there going to be a way in your opinion

00:52:39,000 --> 00:52:43,500
that this can be cleanly done in a

00:52:41,490 --> 00:52:50,550
Drupal project before it is part of

00:52:43,500 --> 00:52:55,020
triple core oh the whole thing perhaps

00:52:50,550 --> 00:52:57,060
not I'd say so the project i mentioned

00:52:55,020 --> 00:52:59,660
before that i did was at a couple system

00:52:57,060 --> 00:53:02,630
was drupal as a behind the firewall

00:52:59,660 --> 00:53:05,580
editorial CMS pretty much drupal 7 as is

00:53:02,630 --> 00:53:06,810
it dump dated to elasticsearch and then

00:53:05,580 --> 00:53:08,700
we had a site like sap sitting in front

00:53:06,810 --> 00:53:09,780
of that so stuff like that you can do

00:53:08,700 --> 00:53:13,500
today there's a lot of people who have

00:53:09,780 --> 00:53:20,190
done projects like that in terms of

00:53:13,500 --> 00:53:22,020
breaking up Drupal itself I think taking

00:53:20,190 --> 00:53:23,550
Drupal data and dumping it to some

00:53:22,020 --> 00:53:26,040
intermediary and then putting something

00:53:23,550 --> 00:53:27,510
else in front of it is one of the

00:53:26,040 --> 00:53:29,070
architectures and the fact that then the

00:53:27,510 --> 00:53:30,810
other half is not Drupal right now while

00:53:29,070 --> 00:53:32,640
we can change that later but then that's

00:53:30,810 --> 00:53:35,600
where all the front end is do that front

00:53:32,640 --> 00:53:42,210
end using something that uses twig and

00:53:35,600 --> 00:53:44,580
it's a transferable skills yet entity

00:53:42,210 --> 00:53:47,340
API is really the big challenge to be

00:53:44,580 --> 00:53:48,030
honest and entity API and views are the

00:53:47,340 --> 00:53:50,430
most important

00:53:48,030 --> 00:53:53,610
of drupal i would say entered api and

00:53:50,430 --> 00:54:00,300
views everything else is tools to build

00:53:53,610 --> 00:54:01,970
that and so Anton API not being this

00:54:00,300 --> 00:54:04,770
kind of fully cleanly decoupled is

00:54:01,970 --> 00:54:07,080
problematic I'd love to see someone try

00:54:04,770 --> 00:54:09,150
okay can we put into the API in a

00:54:07,080 --> 00:54:10,890
persistent demon what happens if we do

00:54:09,150 --> 00:54:13,710
that what are we actually going to run

00:54:10,890 --> 00:54:16,770
went into that breaks horribly I'm not

00:54:13,710 --> 00:54:18,870
entirely sure volunteers welcome to

00:54:16,770 --> 00:54:20,820
figure that out and then feed that back

00:54:18,870 --> 00:54:22,320
in for okay some of these things they're

00:54:20,820 --> 00:54:25,350
breaking can we fix them without

00:54:22,320 --> 00:54:27,300
changing api's I'm going to predict some

00:54:25,350 --> 00:54:30,270
yes some no the ones we can fix without

00:54:27,300 --> 00:54:32,100
breaking I api's let's do let's just

00:54:30,270 --> 00:54:34,320
start now cleaning things up in that

00:54:32,100 --> 00:54:37,380
direction we can do that within the

00:54:34,320 --> 00:54:39,450
Drupal 8 cycle those are milestones

00:54:37,380 --> 00:54:41,970
along feature branches trees was talking

00:54:39,450 --> 00:54:44,940
about this morning and see what happens

00:54:41,970 --> 00:54:50,870
again worst-case scenario and today p I

00:54:44,940 --> 00:54:50,870
becomes better oh how terrible thanks

00:54:55,230 --> 00:54:58,010
animals

00:54:58,789 --> 00:55:04,179
alright thanks for coming please leave

00:55:00,949 --> 00:55:04,179

YouTube URL: https://www.youtube.com/watch?v=DTJnJxFfvmI


