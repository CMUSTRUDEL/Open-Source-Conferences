Title: DrupalCon Barcelona 2015: Drupal 8 The Backend of Frontend
Publication date: 2015-09-22
Playlist: DrupalCon Barcelona - September 2015
Description: 
	This presentation outlines some of the major changes to the theme layer and why they were necessary to make a better experience for themers and module developers using Drupal 8. We will also walk through some of the internals of different aspects of the theme system and how they might affect your day-to-day work with Drupal.

Drupal 8 will ship with a fancy new template engine (Twig) and a simpler theme layer. In my session Iâ€™ll show you some goodies from Twig and walk through the changes it creates for developers.

Many parts of the presentation include best practices for working with the Drupal 7 theme layer which will give you knowledge that you can use right away.

A high-level overview of the changes to the theme system in Drupal 8.

Some of the goodies that are possible now that weâ€™re using Twig as our templating engine.

Using theme hook suggestions to cut down on custom code and have themers thanking you.

Phases of the theme system and where you can step in to alter things.
Captions: 
	00:00:04,819 --> 00:00:10,019
okay I think we are ready to start

00:00:06,839 --> 00:00:13,469
because more than arrived just so that

00:00:10,019 --> 00:00:15,509
this doesn't get dirty okay so i'm

00:00:13,469 --> 00:00:17,400
talking about back in the front end

00:00:15,509 --> 00:00:20,220
today thanks for coming everyone it's

00:00:17,400 --> 00:00:24,420
nice to see that many faces in my

00:00:20,220 --> 00:00:27,539
presentation here so my name is Laura

00:00:24,420 --> 00:00:32,040
escola I'm finished as you can probably

00:00:27,539 --> 00:00:36,600
hear from my accent I'm the Drupal team

00:00:32,040 --> 00:00:38,489
system maintainer I work for finish to a

00:00:36,600 --> 00:00:41,219
company called roid you might have seen

00:00:38,489 --> 00:00:42,540
the black t-shirts around they are not

00:00:41,219 --> 00:00:45,360
all working forward to it they are just

00:00:42,540 --> 00:00:48,570
spreading the tissues for everyone I

00:00:45,360 --> 00:00:50,690
love kittens which is obvious you can

00:00:48,570 --> 00:00:55,260
maybe understand it when you see my

00:00:50,690 --> 00:00:57,690
presentation but i've added 60 1068 of

00:00:55,260 --> 00:01:00,750
them also do too polite car so if you

00:00:57,690 --> 00:01:03,300
sometimes see in some code comments or

00:01:00,750 --> 00:01:07,260
some weird use cases some kittens you

00:01:03,300 --> 00:01:09,900
you know who has added that and i also

00:01:07,260 --> 00:01:11,549
like to break partic just that's just

00:01:09,900 --> 00:01:12,990
the inside joke of all the people

00:01:11,549 --> 00:01:16,880
because every time I change something it

00:01:12,990 --> 00:01:19,799
breaks Bartok so let's proceed to the

00:01:16,880 --> 00:01:22,920
topic of the day which is a pretty much

00:01:19,799 --> 00:01:26,689
double team system but the topic is the

00:01:22,920 --> 00:01:30,060
back end of the front end because people

00:01:26,689 --> 00:01:32,909
very commonly make misunderstandings

00:01:30,060 --> 00:01:34,590
what is the team system and the teens

00:01:32,909 --> 00:01:36,840
theme system is the back end of the

00:01:34,590 --> 00:01:38,759
front end that's obviously what team

00:01:36,840 --> 00:01:41,220
system is and that's why the

00:01:38,759 --> 00:01:43,920
presentations title is a little bit

00:01:41,220 --> 00:01:46,560
different than the actual component in

00:01:43,920 --> 00:01:48,750
Drupal core that I'm talking about so

00:01:46,560 --> 00:01:51,960
what the team system in triple core does

00:01:48,750 --> 00:01:57,060
is it blocked it tries to provide a

00:01:51,960 --> 00:01:59,280
flexible way to output safe HTML and in

00:01:57,060 --> 00:02:01,350
Drupal 7 from when we are moving from

00:01:59,280 --> 00:02:04,770
Drupal 7 to topple 8 i'm going to

00:02:01,350 --> 00:02:08,369
explain it in this presentation what we

00:02:04,770 --> 00:02:11,400
have done to achieve this goal better so

00:02:08,369 --> 00:02:12,300
my presentation doesn't apply if we are

00:02:11,400 --> 00:02:14,100
building

00:02:12,300 --> 00:02:16,440
let's triple or something else you are

00:02:14,100 --> 00:02:18,990
then using JSON which is not using

00:02:16,440 --> 00:02:21,870
Drupal steam system so this is only when

00:02:18,990 --> 00:02:27,900
you're printing HTML from Drupal Drupal

00:02:21,870 --> 00:02:30,270
itself so what we try what we try to

00:02:27,900 --> 00:02:32,970
achieve interpolate is to have a

00:02:30,270 --> 00:02:35,490
simplified simplified team layer because

00:02:32,970 --> 00:02:37,560
when we move from Drupal 6 2 207 we

00:02:35,490 --> 00:02:39,720
actually made the team layer a lot more

00:02:37,560 --> 00:02:41,730
complicated so this time we finally

00:02:39,720 --> 00:02:44,370
figure out that we have to make it

00:02:41,730 --> 00:02:47,730
simpler because of when the team layer

00:02:44,370 --> 00:02:51,390
is too complex it makes people build

00:02:47,730 --> 00:02:53,790
things differently and it makes more it

00:02:51,390 --> 00:02:56,100
makes more possibilities to misuse the

00:02:53,790 --> 00:03:00,540
AP is that we have there which is not

00:02:56,100 --> 00:03:03,560
what we want also another important

00:03:00,540 --> 00:03:08,130
thing for us is that we want to be lazy

00:03:03,560 --> 00:03:10,500
being lazy doesn't always sound good but

00:03:08,130 --> 00:03:14,600
in this context it might be a good thing

00:03:10,500 --> 00:03:17,580
to be lazy because what I think is and

00:03:14,600 --> 00:03:19,320
what this person also has taught at some

00:03:17,580 --> 00:03:22,440
point is that laziness is the first step

00:03:19,320 --> 00:03:24,930
towards efficiency and you have to be a

00:03:22,440 --> 00:03:26,910
little bit lazy to do the things as

00:03:24,930 --> 00:03:28,709
efficient as possible I'm going to

00:03:26,910 --> 00:03:33,510
explain what that means in the team

00:03:28,709 --> 00:03:37,020
layer so let's say in the tuple 7 we

00:03:33,510 --> 00:03:40,170
have the template process layer which is

00:03:37,020 --> 00:03:45,600
good example of an API which commonly

00:03:40,170 --> 00:03:48,150
makes people misuse the API so in the

00:03:45,600 --> 00:03:52,260
process layer what was being done in

00:03:48,150 --> 00:03:54,360
Drupal 7 was we had nice arrays which

00:03:52,260 --> 00:03:57,630
structured content that in the process

00:03:54,360 --> 00:03:59,550
layer be converted into strings but when

00:03:57,630 --> 00:04:02,670
something has been converted from an

00:03:59,550 --> 00:04:04,670
array into a stream it cannot be changed

00:04:02,670 --> 00:04:08,400
anymore because it's structured anymore

00:04:04,670 --> 00:04:10,650
so it is bad data structure to have your

00:04:08,400 --> 00:04:13,680
data in the string that's why we don't

00:04:10,650 --> 00:04:16,260
save the notes into txt files because

00:04:13,680 --> 00:04:18,959
it's very hard to try to load your nose

00:04:16,260 --> 00:04:22,080
from the txt files because it's not

00:04:18,959 --> 00:04:24,880
structured also another problem which is

00:04:22,080 --> 00:04:28,420
the laziness we are doing things

00:04:24,880 --> 00:04:30,730
that might might be unnecessary so let's

00:04:28,420 --> 00:04:34,180
see what we have in the template process

00:04:30,730 --> 00:04:37,540
HTML in triple seven so we have the

00:04:34,180 --> 00:04:40,210
Drupal get JH triple triple get CSS so

00:04:37,540 --> 00:04:44,260
what did you poke at CSS does it returns

00:04:40,210 --> 00:04:47,740
a string of all the CSS files that can

00:04:44,260 --> 00:04:50,830
be printed into the template we have

00:04:47,740 --> 00:04:54,070
also oops the mouse is there we have

00:04:50,830 --> 00:04:56,620
also a page top and page bottom and we

00:04:54,070 --> 00:05:00,490
call a Drupal render on both of them

00:04:56,620 --> 00:05:04,620
what happens if the team decides to not

00:05:00,490 --> 00:05:07,180
bring the page top or the page bottom

00:05:04,620 --> 00:05:09,970
nothing happens because nothing is being

00:05:07,180 --> 00:05:12,430
printed but we just wasted the cpu for

00:05:09,970 --> 00:05:14,740
rendering something for nothing because

00:05:12,430 --> 00:05:19,870
it's not being views for anything in the

00:05:14,740 --> 00:05:21,850
indie template so this is something we

00:05:19,870 --> 00:05:24,760
wanted to remove to make people be lazy

00:05:21,850 --> 00:05:26,920
so we remove two template pre-processed

00:05:24,760 --> 00:05:28,600
layer completely there is the change

00:05:26,920 --> 00:05:31,270
record if you want to read more about

00:05:28,600 --> 00:05:32,620
the discussions behind this there is the

00:05:31,270 --> 00:05:34,870
issue where it has been actually removed

00:05:32,620 --> 00:05:40,150
and there is all the information about

00:05:34,870 --> 00:05:42,760
that so what happens now when we don't

00:05:40,150 --> 00:05:44,950
have the process layer we we have all

00:05:42,760 --> 00:05:47,830
the render erase everything going to the

00:05:44,950 --> 00:05:50,620
templates as they are and we are

00:05:47,830 --> 00:05:54,220
rendering them as late as possible which

00:05:50,620 --> 00:05:57,340
is after the template so if you want to

00:05:54,220 --> 00:06:00,640
change your render array in the template

00:05:57,340 --> 00:06:02,650
it is still possible and all the data is

00:06:00,640 --> 00:06:06,910
still structures so they can be changed

00:06:02,650 --> 00:06:08,530
at any point before the rendering and

00:06:06,910 --> 00:06:11,520
the rendering is happening after the

00:06:08,530 --> 00:06:14,830
template which is already quite light

00:06:11,520 --> 00:06:17,110
and how this is possible that everything

00:06:14,830 --> 00:06:20,740
is being done this way is we have

00:06:17,110 --> 00:06:22,560
everything now in the render arrays we

00:06:20,740 --> 00:06:28,350
are using render arrays for everything

00:06:22,560 --> 00:06:32,560
in Drupal 7 another example of non lazy

00:06:28,350 --> 00:06:34,530
functionality is the team function when

00:06:32,560 --> 00:06:37,300
you call teen function

00:06:34,530 --> 00:06:40,660
this structured data you have there is

00:06:37,300 --> 00:06:43,900
being converted into a string right

00:06:40,660 --> 00:06:47,100
after the function call and if we are

00:06:43,900 --> 00:06:49,890
returning this from the controller

00:06:47,100 --> 00:06:52,480
everything that is happening after the

00:06:49,890 --> 00:06:55,360
controller has returned this kind of

00:06:52,480 --> 00:06:58,960
change it anymore because of the fact

00:06:55,360 --> 00:07:00,880
that is it's a string so we use render

00:06:58,960 --> 00:07:02,380
arrays because of that the syntax is

00:07:00,880 --> 00:07:04,750
very similar you have behalf the

00:07:02,380 --> 00:07:06,820
renderer is also in Drupal 7 so it's not

00:07:04,750 --> 00:07:09,190
a new thing but we are using in Drupal

00:07:06,820 --> 00:07:11,760
core render arrays for for for all the

00:07:09,190 --> 00:07:18,490
different use cases which is pretty neat

00:07:11,760 --> 00:07:23,280
I have also another example whiting

00:07:18,490 --> 00:07:23,280
functions are bad you can see

00:07:26,680 --> 00:07:30,240
my slide is not changing

00:07:31,529 --> 00:07:34,819
that's weird

00:07:56,020 --> 00:08:02,860
let's try this one okay now it's working

00:07:59,289 --> 00:08:05,349
so i have an example of a team function

00:08:02,860 --> 00:08:10,090
here so whenever someone wants to

00:08:05,349 --> 00:08:12,550
override a team function the team ER has

00:08:10,090 --> 00:08:15,819
to copy this PHP function into the

00:08:12,550 --> 00:08:17,949
template dot PHP and this is just a

00:08:15,819 --> 00:08:20,349
simple item list this is one of the most

00:08:17,949 --> 00:08:22,659
simple possible team functions i can

00:08:20,349 --> 00:08:25,659
imagine and it cannot even fit my slide

00:08:22,659 --> 00:08:29,229
i have to scroll to see all this so i

00:08:25,659 --> 00:08:32,890
have to copy all this PHP and okay let's

00:08:29,229 --> 00:08:35,500
think of a tumor hmm the steamer now PHP

00:08:32,890 --> 00:08:38,020
mmm what happens if a fatigue may write

00:08:35,500 --> 00:08:45,839
PHP I don't know have you ever seen in

00:08:38,020 --> 00:08:47,950
PHP written by Morton it's something ah

00:08:45,839 --> 00:08:53,980
I don't want to break the code of

00:08:47,950 --> 00:08:55,779
conduct but it sucks yeah I'm sorry we

00:08:53,980 --> 00:08:58,000
don't want to do that so we have

00:08:55,779 --> 00:09:00,370
converted this team function and all the

00:08:58,000 --> 00:09:02,529
other team functions to into your

00:09:00,370 --> 00:09:05,110
template this is something that even

00:09:02,529 --> 00:09:13,480
simple people like Morton can manage to

00:09:05,110 --> 00:09:17,980
change yes we have team functions in a

00:09:13,480 --> 00:09:21,310
twig and it actually fits even on behalf

00:09:17,980 --> 00:09:23,200
of the screen which is cool we haven't

00:09:21,310 --> 00:09:25,750
got rid of all of the two functions even

00:09:23,200 --> 00:09:28,510
do we would want to we have still a team

00:09:25,750 --> 00:09:40,810
functions left in the Drupal 8 those are

00:09:28,510 --> 00:09:42,310
all theme Funkytown reason why they

00:09:40,810 --> 00:09:45,040
couldn't be converted in the templates

00:09:42,310 --> 00:09:47,170
but all the hundred and fifty for all

00:09:45,040 --> 00:09:49,360
all the orders of the hundred and fifty

00:09:47,170 --> 00:09:51,730
14 functions a triple seven has has been

00:09:49,360 --> 00:09:56,020
converted in the template which is

00:09:51,730 --> 00:09:58,720
awesome so let's proceed do the team

00:09:56,020 --> 00:10:02,200
system how team system Interpol I should

00:09:58,720 --> 00:10:04,540
be used I have a nice overall picture of

00:10:02,200 --> 00:10:07,120
the team system here so this is the

00:10:04,540 --> 00:10:09,430
pipeline that most of the people will

00:10:07,120 --> 00:10:13,390
follow when they are outputting content

00:10:09,430 --> 00:10:15,250
from a controller into the browser so it

00:10:13,390 --> 00:10:18,550
starts with the hook team implementation

00:10:15,250 --> 00:10:20,770
and the render array where we where we

00:10:18,550 --> 00:10:22,990
go next to the themes resistant space

00:10:20,770 --> 00:10:24,779
then we go to the preprocessed functions

00:10:22,990 --> 00:10:31,000
and then we are already at the template

00:10:24,779 --> 00:10:34,240
simple let's go let's go let's go deeper

00:10:31,000 --> 00:10:36,310
indeed out all the different paces so if

00:10:34,240 --> 00:10:38,560
you want to download the code that I'm

00:10:36,310 --> 00:10:41,260
using in this section of my presentation

00:10:38,560 --> 00:10:44,730
double module is ever available in this

00:10:41,260 --> 00:10:47,470
github repository I will give the link

00:10:44,730 --> 00:10:48,880
later on again just so that if you're

00:10:47,470 --> 00:10:52,240
interested you use it during the

00:10:48,880 --> 00:10:53,830
presentation you can get it later so the

00:10:52,240 --> 00:10:57,310
hooptie implementing is the first thing

00:10:53,830 --> 00:10:59,589
that happens always so what the hooked

00:10:57,310 --> 00:11:03,940
in implementation in the module file is

00:10:59,589 --> 00:11:06,550
doing is it's creating the initial it

00:11:03,940 --> 00:11:08,680
defines what's inside this hook team

00:11:06,550 --> 00:11:10,750
implementation it tells okay we have

00:11:08,680 --> 00:11:12,640
these variables which type the variables

00:11:10,750 --> 00:11:17,680
are and it also gives the name that you

00:11:12,640 --> 00:11:20,589
can also give some properties to to

00:11:17,680 --> 00:11:23,589
change the way this specific hooked in

00:11:20,589 --> 00:11:25,480
implementation behaves let's say if you

00:11:23,589 --> 00:11:27,220
want to make it a team function you

00:11:25,480 --> 00:11:29,520
could define it to be a team function in

00:11:27,220 --> 00:11:34,660
the hook team implementation but

00:11:29,520 --> 00:11:36,190
obviously no one wants to do that so I'm

00:11:34,660 --> 00:11:38,440
creating a sandwich hooked in

00:11:36,190 --> 00:11:41,470
implementation in this demo and we have

00:11:38,440 --> 00:11:45,279
a few different types of data we have a

00:11:41,470 --> 00:11:49,600
string for the name and we have a way

00:11:45,279 --> 00:11:51,640
for the veggies and the continents as

00:11:49,600 --> 00:11:54,520
you can see when I'm returning a render

00:11:51,640 --> 00:11:56,920
array from the controller or a block

00:11:54,520 --> 00:11:59,740
build whatever where you are returning

00:11:56,920 --> 00:12:02,560
the render array I'm defining the same

00:11:59,740 --> 00:12:04,800
data as we as I have in the hope team

00:12:02,560 --> 00:12:07,510
implementation the veggies and

00:12:04,800 --> 00:12:08,890
condiments they are array as in the hook

00:12:07,510 --> 00:12:11,380
team implementation and then there is

00:12:08,890 --> 00:12:16,089
the name bread cheese which are all

00:12:11,380 --> 00:12:19,959
strings during strings and what happens

00:12:16,089 --> 00:12:22,720
after this is being printed is we go to

00:12:19,959 --> 00:12:25,580
the team's resistance pace

00:12:22,720 --> 00:12:27,170
where we define new teams resistance so

00:12:25,580 --> 00:12:29,960
what teams with distance R if someone is

00:12:27,170 --> 00:12:31,850
wondering what they are is when when you

00:12:29,960 --> 00:12:34,550
are overriding the node template for

00:12:31,850 --> 00:12:39,950
node that's just article we call that a

00:12:34,550 --> 00:12:42,860
team's resistant if you want to create

00:12:39,950 --> 00:12:47,180
your own teams resistance that happens

00:12:42,860 --> 00:12:49,820
in the hoop team suggestions hook so

00:12:47,180 --> 00:12:52,190
this is the name of the module and this

00:12:49,820 --> 00:12:56,930
is the name of the hooptie

00:12:52,190 --> 00:12:59,120
implementation in this example I'm

00:12:56,930 --> 00:13:04,030
creating new hooked implementation with

00:12:59,120 --> 00:13:09,080
the name of the sandwich so I created a

00:13:04,030 --> 00:13:11,450
checado names language here so then I

00:13:09,080 --> 00:13:14,780
will have a template override for the

00:13:11,450 --> 00:13:17,540
sandwich dot HTML dot week which is

00:13:14,780 --> 00:13:22,130
called sandwich sandwich dashes checado

00:13:17,540 --> 00:13:24,650
does HTML 23 this hook should be used

00:13:22,130 --> 00:13:26,510
only in the module that is providing the

00:13:24,650 --> 00:13:29,030
hook team implementation not in any

00:13:26,510 --> 00:13:32,060
other modules because they might clash

00:13:29,030 --> 00:13:34,700
so this is the initial settings for the

00:13:32,060 --> 00:13:38,000
hook teams resistance then we have also

00:13:34,700 --> 00:13:39,800
the hook teams distance altar which can

00:13:38,000 --> 00:13:42,380
be used in any other module if you need

00:13:39,800 --> 00:13:47,180
to change what the original module has

00:13:42,380 --> 00:13:49,160
been thought of the team's resistance so

00:13:47,180 --> 00:13:51,610
after we have the team's resistance we

00:13:49,160 --> 00:13:53,810
are moving to the preprocessed functions

00:13:51,610 --> 00:13:59,180
where the pre-processing of the

00:13:53,810 --> 00:14:01,400
variables happens so in in this example

00:13:59,180 --> 00:14:03,380
I want to change the name of the

00:14:01,400 --> 00:14:05,210
sandwich to be something else based on

00:14:03,380 --> 00:14:07,520
some order logic than what is in the

00:14:05,210 --> 00:14:12,080
controller this might happen in the team

00:14:07,520 --> 00:14:13,430
or somewhere else so the first thing the

00:14:12,080 --> 00:14:15,740
first pre Persis function that is being

00:14:13,430 --> 00:14:18,560
run is the template preprocess function

00:14:15,740 --> 00:14:21,530
which is a pre/post function that should

00:14:18,560 --> 00:14:23,360
be also in the the module defining the

00:14:21,530 --> 00:14:26,330
Hope theme implementation this shouldn't

00:14:23,360 --> 00:14:29,360
be added into any other module or team

00:14:26,330 --> 00:14:31,280
even though it will be picked but you

00:14:29,360 --> 00:14:34,160
might cause really weird things

00:14:31,280 --> 00:14:36,590
happening because of the fact that is

00:14:34,160 --> 00:14:41,840
it's designed so that there is only one

00:14:36,590 --> 00:14:43,850
instance of this function and this is

00:14:41,840 --> 00:14:47,990
this is just a function to provide the

00:14:43,850 --> 00:14:49,850
initial pre-processing of the of the

00:14:47,990 --> 00:14:51,860
template so let's say if your template

00:14:49,850 --> 00:14:54,590
is depending on some variables that are

00:14:51,860 --> 00:14:56,960
not in the that you don't want to add in

00:14:54,590 --> 00:14:58,820
the controller you can add them in the

00:14:56,960 --> 00:15:01,430
temporary previous pre-process function

00:14:58,820 --> 00:15:04,100
then if you somewhere else need to

00:15:01,430 --> 00:15:05,860
change that order module or a team then

00:15:04,100 --> 00:15:09,980
you can use the hook pre-process

00:15:05,860 --> 00:15:11,780
function where again the hoop is the

00:15:09,980 --> 00:15:14,450
name of the module or the team and then

00:15:11,780 --> 00:15:16,010
it's the team who team hook

00:15:14,450 --> 00:15:20,960
implementation and then you can change

00:15:16,010 --> 00:15:23,510
it to be whatever you want but

00:15:20,960 --> 00:15:26,900
interpolate we have also something super

00:15:23,510 --> 00:15:28,910
cool we have a third option which is the

00:15:26,900 --> 00:15:33,260
specific pre-process function which

00:15:28,910 --> 00:15:35,030
means that if you had the specific the

00:15:33,260 --> 00:15:39,500
temperature system editing the hook

00:15:35,030 --> 00:15:43,130
template team suggestions function you

00:15:39,500 --> 00:15:45,200
can actually alter the you can pre

00:15:43,130 --> 00:15:47,870
process to template even in this

00:15:45,200 --> 00:15:51,700
specific for for specifically the

00:15:47,870 --> 00:15:55,310
template so because I'm printing the

00:15:51,700 --> 00:15:57,380
because of the tub right I'm returning

00:15:55,310 --> 00:15:59,450
in my example at Chicago we would run

00:15:57,380 --> 00:16:02,060
all these three examples because it

00:15:59,450 --> 00:16:04,970
would match even this third preprocess

00:16:02,060 --> 00:16:07,220
function the name of the sandwich when

00:16:04,970 --> 00:16:13,700
it when it goes to the template would be

00:16:07,220 --> 00:16:15,530
flamingo and interpolate the specific

00:16:13,700 --> 00:16:16,790
papers functions are actually even more

00:16:15,530 --> 00:16:18,350
important and Interpol sermon because

00:16:16,790 --> 00:16:23,090
there is more use cases where you could

00:16:18,350 --> 00:16:24,830
use them let's say we we had on my own

00:16:23,090 --> 00:16:27,950
Drupal I'd site that I've been building

00:16:24,830 --> 00:16:29,780
we have all the attachments in the

00:16:27,950 --> 00:16:32,990
libraries and we want to load and

00:16:29,780 --> 00:16:35,960
dynamic dynamically based on the based

00:16:32,990 --> 00:16:39,530
on the team hopton implementation that

00:16:35,960 --> 00:16:40,790
are being printed we don't want to do it

00:16:39,530 --> 00:16:42,950
in the template because we don't have a

00:16:40,790 --> 00:16:45,440
template override for all of them so we

00:16:42,950 --> 00:16:47,480
can actually add a specific preprocess

00:16:45,440 --> 00:16:49,940
functions for each of these specific

00:16:47,480 --> 00:16:53,220
cases so let's say if I want to add a

00:16:49,940 --> 00:16:55,350
attachment for the article or basic page

00:16:53,220 --> 00:16:57,870
I can just add a specific purposes

00:16:55,350 --> 00:16:59,910
function and do the logic there so it's

00:16:57,870 --> 00:17:03,060
kind of like what you had to do in

00:16:59,910 --> 00:17:05,610
Drupal 7 was you take this repressive

00:17:03,060 --> 00:17:07,470
function then you do the if logic which

00:17:05,610 --> 00:17:12,329
is the same if logic you would do for

00:17:07,470 --> 00:17:14,790
you for the for creating the for the

00:17:12,329 --> 00:17:17,130
team suggestions and then you do it

00:17:14,790 --> 00:17:20,010
again and do the same thing because you

00:17:17,130 --> 00:17:23,309
couldn't do this anymore you couldn't do

00:17:20,010 --> 00:17:27,569
this there so it's nice way to remove

00:17:23,309 --> 00:17:29,250
duplicated code from from there another

00:17:27,569 --> 00:17:32,820
thing that has changed interpolate

00:17:29,250 --> 00:17:35,340
pre-process functions is that we have

00:17:32,820 --> 00:17:37,200
more different kind of data in the

00:17:35,340 --> 00:17:40,440
preprocessed functions which makes

00:17:37,200 --> 00:17:43,950
things sometimes complicated so I'm

00:17:40,440 --> 00:17:47,610
telling you that the function in Drupal

00:17:43,950 --> 00:17:50,610
8 which returns an object what happens

00:17:47,610 --> 00:17:52,380
in this example does anyone know anyone

00:17:50,610 --> 00:17:55,740
has an atmosphere what happens in this

00:17:52,380 --> 00:18:02,340
code snippet if the variables name is an

00:17:55,740 --> 00:18:05,010
object fatal error right obviously we

00:18:02,340 --> 00:18:07,470
would assume that the name is always in

00:18:05,010 --> 00:18:09,990
string but that's not always the truth

00:18:07,470 --> 00:18:14,100
in Drupal 8 because we have the objects

00:18:09,990 --> 00:18:18,059
in multiple different places so I'm

00:18:14,100 --> 00:18:19,950
making a very stupid assumption in my

00:18:18,059 --> 00:18:22,320
preprocess function that someone is

00:18:19,950 --> 00:18:25,530
printing my sandwich and setting aim and

00:18:22,320 --> 00:18:28,320
and he's and the person is having the

00:18:25,530 --> 00:18:31,440
name as an render array and has a

00:18:28,320 --> 00:18:35,700
machine name I variable inside that

00:18:31,440 --> 00:18:40,620
render array this would work if the name

00:18:35,700 --> 00:18:42,929
is a string then this wouldn't cause any

00:18:40,620 --> 00:18:46,220
problems but now when it can be streamed

00:18:42,929 --> 00:18:48,870
it can be object and it can be an array

00:18:46,220 --> 00:18:51,780
you have to take care of all these

00:18:48,870 --> 00:18:55,030
different scenarios so how you would

00:18:51,780 --> 00:18:59,830
have to do that is the first check

00:18:55,030 --> 00:19:03,610
if variables name if this is an array

00:18:59,830 --> 00:19:06,280
and then you can do this logic if you if

00:19:03,610 --> 00:19:07,810
you necessarily need to do that but we

00:19:06,280 --> 00:19:11,650
shouldn't make this kind of assumptions

00:19:07,810 --> 00:19:14,440
anyway so it's a bad bad code that i

00:19:11,650 --> 00:19:17,830
have here but this is just a warning for

00:19:14,440 --> 00:19:21,250
people who are writing code because when

00:19:17,830 --> 00:19:22,780
you are installing a module something

00:19:21,250 --> 00:19:25,420
might be returning an object there

00:19:22,780 --> 00:19:30,490
instead of the string that you might be

00:19:25,420 --> 00:19:32,290
expecting there to be so after the

00:19:30,490 --> 00:19:34,660
preprocessed functions we are finally at

00:19:32,290 --> 00:19:38,470
the template where we can create the

00:19:34,660 --> 00:19:43,080
markup awesome and here's my template

00:19:38,470 --> 00:19:48,190
I'm creating the mark up here and yay

00:19:43,080 --> 00:19:51,280
that's the whole pipeline of of too

00:19:48,190 --> 00:19:53,860
polite team system this is how things

00:19:51,280 --> 00:19:56,650
are being put done when things are being

00:19:53,860 --> 00:19:58,390
done the right way if you want to

00:19:56,650 --> 00:20:01,390
download the code snippets they are

00:19:58,390 --> 00:20:05,140
available in the kids are people in this

00:20:01,390 --> 00:20:07,990
URL there is a fully functional module

00:20:05,140 --> 00:20:09,700
which hopefully works even with because

00:20:07,990 --> 00:20:12,580
Drupal a true polite is still changing

00:20:09,700 --> 00:20:14,380
quite a lot so it writes sometimes last

00:20:12,580 --> 00:20:18,010
time I was testing it it worked it was

00:20:14,380 --> 00:20:19,570
yesterday so let's move to the pig that

00:20:18,010 --> 00:20:22,720
I was already talking about a little bit

00:20:19,570 --> 00:20:26,830
so what the back Enders need to know

00:20:22,720 --> 00:20:29,530
about we biggest week is due this is

00:20:26,830 --> 00:20:33,520
very cool functional very cool piece of

00:20:29,530 --> 00:20:36,940
functionality for 40 teamers but it

00:20:33,520 --> 00:20:38,530
might add a little bit of extra effort

00:20:36,940 --> 00:20:40,570
that the back end developers need to do

00:20:38,530 --> 00:20:43,300
because in Drupal 7 if you want to

00:20:40,570 --> 00:20:44,440
provide a function or some helper for

00:20:43,300 --> 00:20:46,030
the front-end developer you can just

00:20:44,440 --> 00:20:49,090
create a function in your module and the

00:20:46,030 --> 00:20:51,100
teamers can call it inside the template

00:20:49,090 --> 00:20:52,510
but that is not how it works into a pole

00:20:51,100 --> 00:20:54,880
too polite anymore because we are using

00:20:52,510 --> 00:20:58,930
3 and we are safe and we are doing

00:20:54,880 --> 00:21:00,730
things better and we are working on very

00:20:58,930 --> 00:21:05,610
hard to make tweak as secure as possible

00:21:00,730 --> 00:21:07,070
we have issues to make disabled entity

00:21:05,610 --> 00:21:08,960
removals

00:21:07,070 --> 00:21:10,880
entity edits and all these kind of

00:21:08,960 --> 00:21:13,250
things intrigued so that it would be as

00:21:10,880 --> 00:21:16,970
secure as possible this is unfortunately

00:21:13,250 --> 00:21:20,659
not yet the situation but all the my SQL

00:21:16,970 --> 00:21:23,870
queries and things like that is in most

00:21:20,659 --> 00:21:26,000
of the cases prohibited so you have to

00:21:23,870 --> 00:21:30,620
know what you're doing if you are doing

00:21:26,000 --> 00:21:33,919
crazy things there so how do it actually

00:21:30,620 --> 00:21:36,220
works so this is the nice index of T

00:21:33,919 --> 00:21:38,389
which you might have seen already in a

00:21:36,220 --> 00:21:41,059
different presentations or if you are if

00:21:38,389 --> 00:21:43,399
you have been using tweak in a repo

00:21:41,059 --> 00:21:45,649
order type of projects you could even

00:21:43,399 --> 00:21:48,379
use tweak with Drupal 7 I guess because

00:21:45,649 --> 00:21:51,799
there is a project for that but so what

00:21:48,379 --> 00:21:55,759
happens if a team wants to print the

00:21:51,799 --> 00:21:58,039
sandwich cheese femur is happy because

00:21:55,759 --> 00:22:00,080
the team ER gets the data dimmers are

00:21:58,039 --> 00:22:02,539
simple too daunting what what the cheese

00:22:00,080 --> 00:22:05,360
is in the sandwich but back in back in

00:22:02,539 --> 00:22:08,389
developers are like oh I have a sandwich

00:22:05,360 --> 00:22:10,460
or is cheese but what is cheese okay

00:22:08,389 --> 00:22:12,259
cheese can be multiple things when we

00:22:10,460 --> 00:22:14,679
are using trig because we have only

00:22:12,259 --> 00:22:18,379
single syntax for doing different things

00:22:14,679 --> 00:22:20,720
so when the team were is printing the

00:22:18,379 --> 00:22:23,090
cheese out of the sandwich we have to do

00:22:20,720 --> 00:22:25,460
a little bit of different kind of tests

00:22:23,090 --> 00:22:27,350
to find the right right data the team

00:22:25,460 --> 00:22:30,830
wants to print so the first thing we

00:22:27,350 --> 00:22:35,929
retest if sandwich is an array and there

00:22:30,830 --> 00:22:40,220
is a key with a item with the key cheese

00:22:35,929 --> 00:22:42,529
if it's an array there is a item with

00:22:40,220 --> 00:22:44,570
the key cheese everything is fine we are

00:22:42,529 --> 00:22:46,789
printing that data but if that is not

00:22:44,570 --> 00:22:50,120
true we have to proceed with the tests

00:22:46,789 --> 00:22:52,399
so then we test if the sandwich is

00:22:50,120 --> 00:22:55,190
object and cheese is a property in that

00:22:52,399 --> 00:22:58,669
in in that object if that is true we are

00:22:55,190 --> 00:23:01,279
printing the containers of the property

00:22:58,669 --> 00:23:04,250
and everyone is happy the data is again

00:23:01,279 --> 00:23:07,580
being printed then we are proceeding to

00:23:04,250 --> 00:23:11,000
little bit crazier things like testing

00:23:07,580 --> 00:23:13,909
if the object has a method called cheese

00:23:11,000 --> 00:23:16,399
if there is a object with get method

00:23:13,909 --> 00:23:19,309
convention if there is a object with

00:23:16,399 --> 00:23:22,460
this method convention

00:23:19,309 --> 00:23:24,679
and let me even try to call the dynamic

00:23:22,460 --> 00:23:27,769
matters inside the class so these all

00:23:24,679 --> 00:23:32,179
different options the cheese possibly

00:23:27,769 --> 00:23:35,059
could be so for if I ask the question

00:23:32,179 --> 00:23:36,950
again what the cheese is or what the

00:23:35,059 --> 00:23:39,409
sandwich is what cheese is inside the

00:23:36,950 --> 00:23:42,740
sandwich it can be quite a different

00:23:39,409 --> 00:23:44,779
things it can be any of these which

00:23:42,740 --> 00:23:46,669
makes things simple for the femurs but

00:23:44,779 --> 00:23:49,700
sometimes might make it little bit

00:23:46,669 --> 00:23:54,830
complicated 40 like an developers to

00:23:49,700 --> 00:23:58,730
understand this so I have it here so in

00:23:54,830 --> 00:24:03,070
the twig like in PHP there is functions

00:23:58,730 --> 00:24:06,139
but there's also filters filters are a

00:24:03,070 --> 00:24:07,519
little bit simpler piece of

00:24:06,139 --> 00:24:10,340
functionality that are meant to bali

00:24:07,519 --> 00:24:14,659
manipulate a variable when the variable

00:24:10,340 --> 00:24:17,090
is being printed so what happens when

00:24:14,659 --> 00:24:20,450
this kind of syntax is being used so

00:24:17,090 --> 00:24:24,169
when you use the pipe and give the name

00:24:20,450 --> 00:24:27,259
of the filter here it calls a function

00:24:24,169 --> 00:24:29,919
in PHP and return something out of it

00:24:27,259 --> 00:24:33,590
and prints it immediately after that

00:24:29,919 --> 00:24:37,490
which means that when I'm calling named

00:24:33,590 --> 00:24:41,149
pipe length we return five it is simply

00:24:37,490 --> 00:24:43,369
returns to the the length of the

00:24:41,149 --> 00:24:44,929
variable the reason why this is cool why

00:24:43,369 --> 00:24:47,869
the filters are cool is that the

00:24:44,929 --> 00:24:51,649
original value of the variable is not

00:24:47,869 --> 00:24:55,279
changed it remains the same so in PHP

00:24:51,649 --> 00:24:58,279
you might might have to create a new

00:24:55,279 --> 00:25:00,230
variable or something or at least some

00:24:58,279 --> 00:25:01,940
people are doing that and there so they

00:25:00,230 --> 00:25:04,460
are processing first it to be something

00:25:01,940 --> 00:25:06,580
else and then they are printing in some

00:25:04,460 --> 00:25:09,909
other place maybe in preprocess function

00:25:06,580 --> 00:25:13,009
so this is also something that you could

00:25:09,909 --> 00:25:15,429
use the remove logic inside preprocess

00:25:13,009 --> 00:25:19,279
functions you could create a filter to

00:25:15,429 --> 00:25:21,919
not have to do pre-processing in the

00:25:19,279 --> 00:25:25,130
preprocessed function which is teamers

00:25:21,919 --> 00:25:28,070
don't want to use PHP to be honest

00:25:25,130 --> 00:25:30,710
there's also functions they are used to

00:25:28,070 --> 00:25:33,490
make a little bit more complicated logic

00:25:30,710 --> 00:25:36,230
usually they take they can be used for

00:25:33,490 --> 00:25:39,800
different kind of things but this as an

00:25:36,230 --> 00:25:42,530
example is the bar dump the fordham

00:25:39,800 --> 00:25:44,720
function in into extemp light which is

00:25:42,530 --> 00:25:46,580
just dumped we can use it without any

00:25:44,720 --> 00:25:50,030
parameters because it doesn't require

00:25:46,580 --> 00:25:51,980
the fun part matter before the pipe if

00:25:50,030 --> 00:25:54,080
you don't provide any parameters for the

00:25:51,980 --> 00:25:59,030
dump function it will just print all the

00:25:54,080 --> 00:26:02,510
variables inside the tricks template so

00:25:59,030 --> 00:26:07,160
one very nice use case of the without

00:26:02,510 --> 00:26:10,160
filter is render arrays so we don't

00:26:07,160 --> 00:26:15,440
filter is a filter which removes a one

00:26:10,160 --> 00:26:17,300
item of an array so in Drupal 7 when you

00:26:15,440 --> 00:26:21,770
when you want it to print a render array

00:26:17,300 --> 00:26:23,270
but you wanted to hide something inside

00:26:21,770 --> 00:26:25,100
the renderer you didn't wanna you want

00:26:23,270 --> 00:26:27,050
to print the content but you didn't want

00:26:25,100 --> 00:26:30,230
to print comments or links you had to

00:26:27,050 --> 00:26:33,020
use to hide function what happens when

00:26:30,230 --> 00:26:36,950
you call height function is we actually

00:26:33,020 --> 00:26:39,680
mark in the render array that ok let's

00:26:36,950 --> 00:26:45,140
do sprint comments let's not print links

00:26:39,680 --> 00:26:47,720
and if someone is printing that thing

00:26:45,140 --> 00:26:50,180
again it might be a little bit

00:26:47,720 --> 00:26:53,030
unpredictable what is the state of the

00:26:50,180 --> 00:26:55,100
render array because of she could call

00:26:53,030 --> 00:26:59,030
the hide and show function in multiple

00:26:55,100 --> 00:27:01,490
different places and you might not be

00:26:59,030 --> 00:27:03,110
able to figure out anymore what what is

00:27:01,490 --> 00:27:06,560
happening inside the render array so

00:27:03,110 --> 00:27:09,290
actually I was fixing a back in Drupal 8

00:27:06,560 --> 00:27:11,980
core maybe a month ago her height

00:27:09,290 --> 00:27:15,320
function was used and we had like

00:27:11,980 --> 00:27:17,030
probably four people died trying to

00:27:15,320 --> 00:27:19,700
figure out what what is happening there

00:27:17,030 --> 00:27:22,850
why is this where is this height

00:27:19,700 --> 00:27:24,230
function being called and then there was

00:27:22,850 --> 00:27:26,300
actually not even hide function being

00:27:24,230 --> 00:27:28,670
called there was just manually someone

00:27:26,300 --> 00:27:30,650
doing the same functionality as the

00:27:28,670 --> 00:27:32,630
height function does and really super

00:27:30,650 --> 00:27:35,059
confusing what is happening why is this

00:27:32,630 --> 00:27:37,879
not being printed why

00:27:35,059 --> 00:27:41,059
yeah and it was happening like way

00:27:37,879 --> 00:27:43,669
before the place where it was printed so

00:27:41,059 --> 00:27:45,950
you had no idea that someone has called

00:27:43,669 --> 00:27:47,720
the high function somber so interpolate

00:27:45,950 --> 00:27:50,210
we call the feet up filter when we are

00:27:47,720 --> 00:27:52,519
actually printing the render array which

00:27:50,210 --> 00:27:54,470
makes it super clear that in this case

00:27:52,519 --> 00:27:57,620
they are printing everything else but

00:27:54,470 --> 00:27:59,749
except these two things and then you can

00:27:57,620 --> 00:28:01,909
point these two things separately

00:27:59,749 --> 00:28:04,879
wherever you want to you can just call

00:28:01,909 --> 00:28:07,369
content comments or content that links

00:28:04,879 --> 00:28:12,740
and you can print whatever is inside

00:28:07,369 --> 00:28:16,129
those so sometimes what trick has built

00:28:12,740 --> 00:28:18,049
inside might not be enough so I'm going

00:28:16,129 --> 00:28:21,830
to show you how to create a to keep twit

00:28:18,049 --> 00:28:24,470
extension so to create a trick extension

00:28:21,830 --> 00:28:31,059
you have to create a new class extending

00:28:24,470 --> 00:28:31,059
the twig spelled into extension class

00:28:31,269 --> 00:28:36,379
I'm creating a filter so I have to

00:28:34,249 --> 00:28:41,779
provide a get filters method which

00:28:36,379 --> 00:28:43,879
returns an array of twit in this case to

00:28:41,779 --> 00:28:46,789
example filter objects I guess the other

00:28:43,879 --> 00:28:49,369
one is twit filter or quick filter

00:28:46,789 --> 00:28:53,179
objects is the other option but with

00:28:49,369 --> 00:28:56,419
simple filters is what I'm returning in

00:28:53,179 --> 00:28:58,899
this case and what happens when you're

00:28:56,419 --> 00:29:01,309
creating a new trick simple filter at

00:28:58,899 --> 00:29:03,710
object is you give us an first parameter

00:29:01,309 --> 00:29:05,929
for the object the name of the filter

00:29:03,710 --> 00:29:09,200
that you use to call that filter in the

00:29:05,929 --> 00:29:11,539
jig template and then as a second

00:29:09,200 --> 00:29:13,340
parameter you give where you want to map

00:29:11,539 --> 00:29:17,360
that filter what it should be calling in

00:29:13,340 --> 00:29:20,330
the PHP so I wanted to call imagine in

00:29:17,360 --> 00:29:22,789
the object and the object is the current

00:29:20,330 --> 00:29:26,090
class so I just give a towel okay this

00:29:22,789 --> 00:29:27,950
and then as a second item in the array I

00:29:26,090 --> 00:29:30,320
give the name of the method which is

00:29:27,950 --> 00:29:34,580
throwing string so now if someone calls

00:29:30,320 --> 00:29:37,999
a twig trim ring filter inside a tweak

00:29:34,580 --> 00:29:41,210
template it will call this method it has

00:29:37,999 --> 00:29:42,950
just simple as their paws call and

00:29:41,210 --> 00:29:47,899
returns it back to de

00:29:42,950 --> 00:29:50,480
tweak in order to make this work not

00:29:47,899 --> 00:29:52,760
creating a car only creating a class is

00:29:50,480 --> 00:29:54,860
not enough we have to tell tweak that

00:29:52,760 --> 00:29:58,370
well we have a trick extension here

00:29:54,860 --> 00:30:02,779
please come pick this up and it happens

00:29:58,370 --> 00:30:06,080
using the services to chama file so I'm

00:30:02,779 --> 00:30:10,220
creating a dream string services of

00:30:06,080 --> 00:30:12,500
tamil file inside the module then I have

00:30:10,220 --> 00:30:16,429
services here which tells okay this is a

00:30:12,500 --> 00:30:20,960
list of services then is the machine

00:30:16,429 --> 00:30:23,899
name of the service class that that is

00:30:20,960 --> 00:30:25,850
the service that I'm adding and then I'm

00:30:23,899 --> 00:30:28,460
tagging it for the trick actions and

00:30:25,850 --> 00:30:31,700
then tweak will come to pick up all the

00:30:28,460 --> 00:30:37,370
twig extension all the services with the

00:30:31,700 --> 00:30:39,889
with that tag and after that profit you

00:30:37,370 --> 00:30:45,019
can go to the beach and your filter is

00:30:39,889 --> 00:30:47,240
working it's quite nice so I'm as you

00:30:45,019 --> 00:30:50,659
can see and giving it a parameter in

00:30:47,240 --> 00:30:53,510
this example it is the length over here

00:30:50,659 --> 00:30:58,669
and you can you can add unlimited amount

00:30:53,510 --> 00:31:01,990
of the of parameters for the filter if

00:30:58,669 --> 00:31:04,669
you want to download a module doing a

00:31:01,990 --> 00:31:09,490
two-week extension you can go to my

00:31:04,669 --> 00:31:09,490
github github and download the module

00:31:10,120 --> 00:31:14,809
let's move forward to the last topic of

00:31:12,799 --> 00:31:17,990
the day which is for me at least the

00:31:14,809 --> 00:31:21,529
most important one which is a Drupal 8

00:31:17,990 --> 00:31:24,019
outer escape and maybe this morning if

00:31:21,529 --> 00:31:27,350
you were at the driz note pls mentioned

00:31:24,019 --> 00:31:30,740
that there is one remaining critical

00:31:27,350 --> 00:31:32,360
issue that we are working on this is the

00:31:30,740 --> 00:31:35,409
thing we are working on it's pretty

00:31:32,360 --> 00:31:40,220
awesome right right now or is becoming

00:31:35,409 --> 00:31:43,370
really awesome but there's few things

00:31:40,220 --> 00:31:45,260
that needs to be be still fixed yeah so

00:31:43,370 --> 00:31:47,840
in the outer escaping the problem is

00:31:45,260 --> 00:31:50,510
that it affects all the things into

00:31:47,840 --> 00:31:53,450
apple core so every time something is

00:31:50,510 --> 00:31:56,179
being printed it's being escape but

00:31:53,450 --> 00:32:00,259
let's go integer in

00:31:56,179 --> 00:32:03,470
the specifics so why we are doing this

00:32:00,259 --> 00:32:07,519
is just to show people that we don't

00:32:03,470 --> 00:32:09,350
want PHP to have any market markup

00:32:07,519 --> 00:32:14,090
should be in the to click templates so

00:32:09,350 --> 00:32:17,470
if you are outputting a PHP a markup in

00:32:14,090 --> 00:32:20,090
the PHP it will be escaped by default

00:32:17,470 --> 00:32:21,619
because markup shouldn't be there it

00:32:20,090 --> 00:32:24,559
should be in the template so that the

00:32:21,619 --> 00:32:28,460
teamers can easily change it so what

00:32:24,559 --> 00:32:31,129
escaping means it's not probably obvious

00:32:28,460 --> 00:32:33,379
for everyone what is escaping so I'm

00:32:31,129 --> 00:32:36,350
going to just show what happens when

00:32:33,379 --> 00:32:39,730
something is being escaped so I have

00:32:36,350 --> 00:32:43,330
this PHP template I'm using here I'm

00:32:39,730 --> 00:32:49,509
calling HTML escape for this string

00:32:43,330 --> 00:32:52,369
which has an HTML element em inside it

00:32:49,509 --> 00:32:55,340
if I wouldn't if I would just call print

00:32:52,369 --> 00:32:58,249
some escape text everything would be

00:32:55,340 --> 00:32:59,539
fine I think but nothing bad would

00:32:58,249 --> 00:33:01,730
happen in this case because there is no

00:32:59,539 --> 00:33:03,350
access is not a thing but because we

00:33:01,730 --> 00:33:06,919
want to be safe we want to escape all

00:33:03,350 --> 00:33:09,320
the things so I'm escaping this variable

00:33:06,919 --> 00:33:12,710
manually now in the PHP template what

00:33:09,320 --> 00:33:15,049
happens this is the mark-up that you get

00:33:12,710 --> 00:33:18,700
if you look to view source so we are

00:33:15,049 --> 00:33:23,090
converting all the possible characters

00:33:18,700 --> 00:33:26,059
into HTML entities which means that they

00:33:23,090 --> 00:33:32,299
are being printed as is so we we assume

00:33:26,059 --> 00:33:38,059
okay someone creates a user name with an

00:33:32,299 --> 00:33:40,399
HTML element I am Lowry closing em be we

00:33:38,059 --> 00:33:42,710
are making an assumption that that is

00:33:40,399 --> 00:33:45,110
the person's name that's what he wants

00:33:42,710 --> 00:33:49,879
to show on the browser that's what he

00:33:45,110 --> 00:33:52,669
wants to show everywhere because maybe

00:33:49,879 --> 00:33:54,350
someones name could be that you don't

00:33:52,669 --> 00:33:57,619
know or maybe someones name is the

00:33:54,350 --> 00:34:01,159
script alert xss blah blah blah which

00:33:57,619 --> 00:34:04,100
causes a security issue but you can't

00:34:01,159 --> 00:34:06,919
blame the user so this is what you see

00:34:04,100 --> 00:34:09,109
in the source this is what you see on

00:34:06,919 --> 00:34:09,980
the browser so we expect that if someone

00:34:09,109 --> 00:34:12,889
wants to print

00:34:09,980 --> 00:34:16,190
is from the database from the user input

00:34:12,889 --> 00:34:20,810
anywhere in the PHP it's what you want

00:34:16,190 --> 00:34:24,310
to see on the browser so what the

00:34:20,810 --> 00:34:28,820
situation is if we use tweak is I'm

00:34:24,310 --> 00:34:35,450
adding in the my sandwich a new variable

00:34:28,820 --> 00:34:39,169
called markup which has the text we I'm

00:34:35,450 --> 00:34:44,500
printing the markup I'm not running any

00:34:39,169 --> 00:34:47,810
escape here but okay again it is escaped

00:34:44,500 --> 00:34:50,780
this is how to escape so this is escape

00:34:47,810 --> 00:34:54,800
this is out to escape no escape is being

00:34:50,780 --> 00:34:56,899
run so how to avoid how to escape and if

00:34:54,800 --> 00:35:03,619
you run into problems where you want to

00:34:56,899 --> 00:35:05,300
output the HTML in the PHP okay the the

00:35:03,619 --> 00:35:09,560
number one thing the best solution

00:35:05,300 --> 00:35:13,700
always is the use vendor array either

00:35:09,560 --> 00:35:18,560
use a template to put your markup into

00:35:13,700 --> 00:35:23,810
or use the mark up key inside the render

00:35:18,560 --> 00:35:28,700
array even if even even when using the

00:35:23,810 --> 00:35:32,060
hash mark up render array item it's

00:35:28,700 --> 00:35:37,570
being a XSS filtered so you kind of

00:35:32,060 --> 00:35:37,570
spring up print script tags with that

00:35:37,630 --> 00:35:46,520
but you can print the en and now you can

00:35:41,600 --> 00:35:51,770
see nice italic text over there which is

00:35:46,520 --> 00:35:55,010
pretty cool so number one rule if if you

00:35:51,770 --> 00:35:58,640
print something from the PHP use render

00:35:55,010 --> 00:36:03,560
arrays but that's also not always

00:35:58,640 --> 00:36:08,090
possible so we have tools for that so if

00:36:03,560 --> 00:36:10,609
you need to add a let's say 11 let's say

00:36:08,090 --> 00:36:13,600
e.m element like in my example you could

00:36:10,609 --> 00:36:16,850
use to save markup format

00:36:13,600 --> 00:36:19,070
where you at placeholders for all the

00:36:16,850 --> 00:36:21,950
variables you put in there so what

00:36:19,070 --> 00:36:28,250
happens when you use the save Mark of

00:36:21,950 --> 00:36:33,170
format is that this txt like in Drupal 7

00:36:28,250 --> 00:36:35,330
it will be escaped to a string and then

00:36:33,170 --> 00:36:37,870
all the all the all the other order

00:36:35,330 --> 00:36:41,300
stuff inside this format method is

00:36:37,870 --> 00:36:43,070
considered to be safe so what we do want

00:36:41,300 --> 00:36:45,560
to save safe one a format is being

00:36:43,070 --> 00:36:50,420
called we escape all the parameters that

00:36:45,560 --> 00:36:52,430
are being passed for the method and the

00:36:50,420 --> 00:36:55,390
rest of it everything that is manually

00:36:52,430 --> 00:36:58,790
being put it there by the developer is

00:36:55,390 --> 00:37:02,120
safe because it's just static HTML so

00:36:58,790 --> 00:37:07,640
static HTML in PHP itself can be

00:37:02,120 --> 00:37:10,250
considered safe if you use this but for

00:37:07,640 --> 00:37:14,090
sure also outer escaping has its kavik

00:37:10,250 --> 00:37:17,000
caveats and that is the thing why we are

00:37:14,090 --> 00:37:21,430
still working on this so when Otto

00:37:17,000 --> 00:37:25,060
escape strings are safe it's only when

00:37:21,430 --> 00:37:27,410
your string is praying printed in HTML

00:37:25,060 --> 00:37:31,550
if you are doing something else than

00:37:27,410 --> 00:37:39,410
HTML outer scape in is not helping you

00:37:31,550 --> 00:37:43,670
and one week missa missa assumption is

00:37:39,410 --> 00:37:47,210
that attributes are not HTML some people

00:37:43,670 --> 00:37:51,380
think that attributes are HTML let's say

00:37:47,210 --> 00:37:57,170
I'm printing the text inside the e/m

00:37:51,380 --> 00:38:01,900
elements opening tag ok we convert it in

00:37:57,170 --> 00:38:05,000
the string but it doesn't help because

00:38:01,900 --> 00:38:07,850
different rules apply when we are not

00:38:05,000 --> 00:38:12,080
printing HTML anymore you can write

00:38:07,850 --> 00:38:14,420
another elements or HTML inside the e/m

00:38:12,080 --> 00:38:17,080
elements opening tag so it doesn't

00:38:14,420 --> 00:38:20,660
matter that we put it into a string or

00:38:17,080 --> 00:38:23,900
secure it from running HTML you can do

00:38:20,660 --> 00:38:26,859
different things because let's say in

00:38:23,900 --> 00:38:33,459
here this is a one very good example

00:38:26,859 --> 00:38:36,859
aids ref okay javascript alert I'm

00:38:33,459 --> 00:38:39,529
putting it in the hof what happens we

00:38:36,859 --> 00:38:44,929
are getting analog alert there is

00:38:39,529 --> 00:38:48,439
nothing that the escaping would escape

00:38:44,929 --> 00:38:51,199
away but we still have two security hole

00:38:48,439 --> 00:38:55,869
there because there is nothing that it

00:38:51,199 --> 00:38:59,839
would assume is unsecured this is not

00:38:55,869 --> 00:39:03,709
HTML at all this has nothing to do with

00:38:59,839 --> 00:39:06,229
HTML this is just a one string that is

00:39:03,709 --> 00:39:08,719
being now printed in the wrong place if

00:39:06,229 --> 00:39:11,329
this would be printed inside the H

00:39:08,719 --> 00:39:14,619
element not in the href attribute it

00:39:11,329 --> 00:39:19,339
will be safe it wouldn't be run at all

00:39:14,619 --> 00:39:21,849
it will be a problem so when you are

00:39:19,339 --> 00:39:25,459
printing something into the attributes

00:39:21,849 --> 00:39:28,849
they think twice where your string is

00:39:25,459 --> 00:39:31,299
coming from how you have to escape it to

00:39:28,849 --> 00:39:31,299
be safe

00:39:33,050 --> 00:39:38,840
this is the most commonly used case the

00:39:35,390 --> 00:39:41,450
URLs so we have created a placeholder

00:39:38,840 --> 00:39:47,300
for that which you can use when you are

00:39:41,450 --> 00:39:50,930
using safe markup markup format so with

00:39:47,300 --> 00:39:53,120
this syntax the JavaScript will be

00:39:50,930 --> 00:39:59,320
removed from here it will it will remove

00:39:53,120 --> 00:40:01,940
all the non whitelisted protocols

00:39:59,320 --> 00:40:04,220
javascript is not a white listed

00:40:01,940 --> 00:40:07,910
protocol it's not safe so it will be

00:40:04,220 --> 00:40:11,300
removed from here and it's actually

00:40:07,910 --> 00:40:13,640
quite clever so please when you're

00:40:11,300 --> 00:40:20,090
printing URLs in Drupal 8 if you are

00:40:13,640 --> 00:40:23,780
doing it this way use this syntax order

00:40:20,090 --> 00:40:26,420
problem we have without escaping is that

00:40:23,780 --> 00:40:29,690
it's only enable enabled for twit

00:40:26,420 --> 00:40:33,710
templates we are using the tweaks how to

00:40:29,690 --> 00:40:38,390
escape functionality so if you are not

00:40:33,710 --> 00:40:41,350
printing your HTML using tweak you don't

00:40:38,390 --> 00:40:45,170
have out escaping turned on at all so

00:40:41,350 --> 00:40:49,310
let's say if you print Jason you don't

00:40:45,170 --> 00:40:51,440
have out escaping if you are using PHP

00:40:49,310 --> 00:40:55,190
template that still exists in Drupal say

00:40:51,440 --> 00:40:57,350
too polite you are not your markup is

00:40:55,190 --> 00:41:01,730
not being able to escape or if you use

00:40:57,350 --> 00:41:05,060
team functions even worse you are not

00:41:01,730 --> 00:41:08,090
being out escaped automatically so when

00:41:05,060 --> 00:41:10,370
you do that kind of things please

00:41:08,090 --> 00:41:12,170
reconsider again if you want to use the

00:41:10,370 --> 00:41:14,660
theme function or the PHP template

00:41:12,170 --> 00:41:19,670
because you could be safe by just using

00:41:14,660 --> 00:41:22,460
the trick so as I said earlier finishing

00:41:19,670 --> 00:41:24,230
this API is the only thing still

00:41:22,460 --> 00:41:28,120
blocking the delayed release candidate

00:41:24,230 --> 00:41:34,250
one if you if you want to support us

00:41:28,120 --> 00:41:38,380
please do testing it helps because of

00:41:34,250 --> 00:41:40,640
this is an API and testing an API

00:41:38,380 --> 00:41:42,350
automatically by unit tests or

00:41:40,640 --> 00:41:44,660
integration tests is really complicated

00:41:42,350 --> 00:41:46,800
in this user just writing code and

00:41:44,660 --> 00:41:50,550
testing it out so we can we can

00:41:46,800 --> 00:41:53,280
picture that the API is saying there are

00:41:50,550 --> 00:41:56,000
Springs happening on a Friday so if you

00:41:53,280 --> 00:41:59,270
want to help on releasing Drupal 8

00:41:56,000 --> 00:42:02,340
please show up on friday at the sprints

00:41:59,270 --> 00:42:04,290
there will be mentors available that

00:42:02,340 --> 00:42:05,700
will help you get started even if you

00:42:04,290 --> 00:42:08,580
don't have any experience of using

00:42:05,700 --> 00:42:11,250
Drupal 8 before there is even tasks for

00:42:08,580 --> 00:42:14,190
people that are non coders so if you

00:42:11,250 --> 00:42:15,990
want to work on documentation or other

00:42:14,190 --> 00:42:19,620
things there will be people that can

00:42:15,990 --> 00:42:21,180
help you out one or more information

00:42:19,620 --> 00:42:22,950
about that there is twitter handle to

00:42:21,180 --> 00:42:25,950
pull mentoring where you can get good

00:42:22,950 --> 00:42:29,030
information about that and then we are

00:42:25,950 --> 00:42:29,030
ready for the questions

00:42:34,670 --> 00:42:42,260
hello first of all I want to say thank

00:42:39,410 --> 00:42:45,110
you to worry since I know how much he's

00:42:42,260 --> 00:42:54,260
working on the issues we've on female

00:42:45,110 --> 00:42:58,310
layer so thank you Laurie thank you and

00:42:54,260 --> 00:43:00,260
my question is what is your opinion how

00:42:58,310 --> 00:43:06,560
about to start templates fixed in place

00:43:00,260 --> 00:43:09,350
in the database I haven't given any

00:43:06,560 --> 00:43:12,260
thoughts on saving the twig templates

00:43:09,350 --> 00:43:15,680
into the database right now we are

00:43:12,260 --> 00:43:18,590
saving the compiled with templates into

00:43:15,680 --> 00:43:20,300
the PHP files actually to be honest we

00:43:18,590 --> 00:43:22,760
do you have thick templates that are

00:43:20,300 --> 00:43:27,490
being saved in the database because you

00:43:22,760 --> 00:43:31,430
could create quick template in an view

00:43:27,490 --> 00:43:34,480
under this that kind of thick templates

00:43:31,430 --> 00:43:38,750
are actually being saved in the database

00:43:34,480 --> 00:43:44,080
so it is replacement for the old views

00:43:38,750 --> 00:43:44,080
tokens that used to be in top of seven

00:43:44,200 --> 00:43:51,380
because one of real use case for that

00:43:48,110 --> 00:43:54,050
could be when you use a theme but you

00:43:51,380 --> 00:43:56,480
have to customize it a little bit it

00:43:54,050 --> 00:43:59,600
could be very useful to other right a

00:43:56,480 --> 00:44:02,510
template in the database so this is

00:43:59,600 --> 00:44:05,510
still exists in theme but a little bit

00:44:02,510 --> 00:44:08,720
customize it just in the database yeah

00:44:05,510 --> 00:44:11,510
we don't have we don't have any any

00:44:08,720 --> 00:44:15,050
discussions about that at least yet but

00:44:11,510 --> 00:44:17,600
if you have any ideas how that could be

00:44:15,050 --> 00:44:19,670
done we can talk after the presentation

00:44:17,600 --> 00:44:21,980
and I will think about that's for sure

00:44:19,670 --> 00:44:25,840
with the order team system call main

00:44:21,980 --> 00:44:25,840
tere Mainers yeah okay thank you

00:44:30,609 --> 00:44:36,809
yeah can you use the mic thank you

00:44:39,960 --> 00:44:46,320
in in Drupal 7 the variables in the

00:44:43,950 --> 00:44:48,390
templates used to know whether they were

00:44:46,320 --> 00:44:50,790
already printed or not and now you

00:44:48,390 --> 00:44:53,760
showed us the without filter they're

00:44:50,790 --> 00:44:56,520
just this filter tell the variables that

00:44:53,760 --> 00:44:58,320
they are not do the variable still know

00:44:56,520 --> 00:45:01,890
whether they are Britain have been

00:44:58,320 --> 00:45:05,940
printed or not yes they they don't know

00:45:01,890 --> 00:45:08,280
ok so the printed variable I know it

00:45:05,940 --> 00:45:10,859
exists there and you can set it manually

00:45:08,280 --> 00:45:21,619
but it's not being defined anymore if

00:45:10,859 --> 00:45:21,619
things are being printed ok ok thank you

00:45:22,040 --> 00:45:27,470
so you can point the render arrays

00:45:25,910 --> 00:45:30,350
multiple times because of that because

00:45:27,470 --> 00:45:33,200
in Drupal 7 when something is print

00:45:30,350 --> 00:45:36,950
print print it its marked as printed and

00:45:33,200 --> 00:45:39,940
then it can't pretty print it again you

00:45:36,950 --> 00:45:44,450
just showed how to prevent Alto escaping

00:45:39,940 --> 00:45:47,960
in symphony in the trick templates you

00:45:44,450 --> 00:45:51,320
can could use the filter raw is that not

00:45:47,960 --> 00:45:55,910
present enjoyed the raw filter which is

00:45:51,320 --> 00:45:58,700
present interpolate but it's unsecured

00:45:55,910 --> 00:46:05,780
because it won't escape the string at

00:45:58,700 --> 00:46:10,640
all so if any way user input goes into

00:46:05,780 --> 00:46:12,800
that string you might get unsecured

00:46:10,640 --> 00:46:15,230
markup being printed on the browser and

00:46:12,800 --> 00:46:17,750
I would never suggest using the raw

00:46:15,230 --> 00:46:20,360
filter unless you are hundred percent

00:46:17,750 --> 00:46:24,140
sure that there is no way that user

00:46:20,360 --> 00:46:26,780
inputted text is in that string so

00:46:24,140 --> 00:46:30,740
basically calling raw is basically like

00:46:26,780 --> 00:46:33,290
the PHP templates from Drupal 7 if you

00:46:30,740 --> 00:46:35,000
don't check plain them right yes and

00:46:33,290 --> 00:46:38,150
check plane is actually the

00:46:35,000 --> 00:46:41,240
functionality we call by default kind of

00:46:38,150 --> 00:46:45,410
check line and second question is in

00:46:41,240 --> 00:46:47,060
that role how the templates are being

00:46:45,410 --> 00:46:51,770
processed didn't mention the process

00:46:47,060 --> 00:46:54,440
hook hook process template which I think

00:46:51,770 --> 00:46:57,080
was in Drupal 7 was that removed yes

00:46:54,440 --> 00:47:00,430
hook process layer was removed from

00:46:57,080 --> 00:47:00,430
drove all right thank you

00:47:11,910 --> 00:47:19,540
you showed two examples of avoiding

00:47:15,340 --> 00:47:23,680
altar escaping and the pound markup

00:47:19,540 --> 00:47:30,460
method is this something considered the

00:47:23,680 --> 00:47:34,510
best practice or since we're having HTML

00:47:30,460 --> 00:47:37,360
markup again in the template file so I'm

00:47:34,510 --> 00:47:39,010
not the template the theme file it is

00:47:37,360 --> 00:47:43,170
usually being used if you just want to

00:47:39,010 --> 00:47:49,510
print a static HTML from the PHP code

00:47:43,170 --> 00:47:52,660
let's say you want to bring a empty span

00:47:49,510 --> 00:47:55,690
somewhere or something like that it's a

00:47:52,660 --> 00:47:57,310
good way for that but anything else it

00:47:55,690 --> 00:48:00,430
shouldn't be done with the hash mark up

00:47:57,310 --> 00:48:02,620
you should use a template yes mark

00:48:00,430 --> 00:48:05,130
template should be used for all the all

00:48:02,620 --> 00:48:05,130
the markup

00:48:09,140 --> 00:48:16,190
and as I say under presentation it's xss

00:48:13,099 --> 00:48:19,940
filtered so that the most unsecured

00:48:16,190 --> 00:48:22,150
cases will be covered even in in that

00:48:19,940 --> 00:48:22,150
case

00:48:29,990 --> 00:48:33,070
do you have a question

00:48:33,480 --> 00:48:35,480
ah

00:48:41,330 --> 00:48:46,710
it's so I'm so happy to see old man

00:48:43,980 --> 00:48:48,780
doing exercise yes I'm old and wise um

00:48:46,710 --> 00:48:51,480
no I'm just going to take a whirl always

00:48:48,780 --> 00:48:52,710
kind of okay station and explain to you

00:48:51,480 --> 00:48:54,930
guys if you're all developers that you

00:48:52,710 --> 00:48:58,950
want to know why we did this I'm doing a

00:48:54,930 --> 00:49:00,840
session in 25 minutes down in 111 so you

00:48:58,950 --> 00:49:02,910
actually understand why we did and why

00:49:00,840 --> 00:49:05,940
we killed all the same functions and why

00:49:02,910 --> 00:49:08,010
you might gonna hate me the next three

00:49:05,940 --> 00:49:10,200
or four years but it's actually Louis

00:49:08,010 --> 00:49:12,300
fault and it's God's us Falls and it's

00:49:10,200 --> 00:49:13,859
joels faults and I kind of think we all

00:49:12,300 --> 00:49:15,480
hold them at big hand for the work

00:49:13,859 --> 00:49:18,180
they've been doing for the last two

00:49:15,480 --> 00:49:20,760
years and they have actually taken quite

00:49:18,180 --> 00:49:22,800
a quite a punch of abuse from my side of

00:49:20,760 --> 00:49:33,050
me yelling at them so I just want to

00:49:22,800 --> 00:49:33,050

YouTube URL: https://www.youtube.com/watch?v=HRSGQ7Zn3O8


