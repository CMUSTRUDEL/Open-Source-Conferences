Title: DrupalCon Barcelona 2015: Composer and Drupal 8
Publication date: 2015-09-22
Playlist: DrupalCon Barcelona - September 2015
Description: 
	We got the island and introduced a lot of new dependencies during the Drupal 8 development cycle. But we did not embrace composer as first class citizen in our development toolchain. Because we have still very important issues to solve. This talk summarizes important issues which block the wider composer adoption related to Packaging, Testing, Subtree split and Drupal.org infrastructure.

And we would like to talk about how we integrate Drupal Packagist in d.o or abandon it completely because we adpot SemVer in contrib.
Captions: 
	00:00:00,000 --> 00:00:08,940
it's now 1545 I think we should start

00:00:04,020 --> 00:00:10,860
our session welcome this is a decor

00:00:08,940 --> 00:00:16,440
conversation about a composer

00:00:10,860 --> 00:00:19,260
interpolate and my name is Florian Viva

00:00:16,440 --> 00:00:22,699
I am a contributor and maintain the

00:00:19,260 --> 00:00:25,680
triple packages and the Drupal composer

00:00:22,699 --> 00:00:30,359
template on github and I work a little

00:00:25,680 --> 00:00:33,000
bit my name is Tobias rekla I am also a

00:00:30,359 --> 00:00:34,950
core contributor and work a little bit

00:00:33,000 --> 00:00:37,110
on the composer stuff and otherwise I

00:00:34,950 --> 00:00:39,450
maintain the shortcut module and the

00:00:37,110 --> 00:00:47,940
config translation module for Drupal 8

00:00:39,450 --> 00:00:49,649
and I work for add fish so the first

00:00:47,940 --> 00:00:52,020
thing we really wanted to point out that

00:00:49,649 --> 00:00:54,690
even though us to our standing here the

00:00:52,020 --> 00:00:58,109
whole getting composer to work with

00:00:54,690 --> 00:01:00,030
Drupal is not just not just a work of us

00:00:58,109 --> 00:01:02,879
too but really like a team effort of a

00:01:00,030 --> 00:01:04,710
whole bunch of other people so yeah

00:01:02,879 --> 00:01:05,880
that's sort of what we wanted to point

00:01:04,710 --> 00:01:07,520
out even though we're standing here

00:01:05,880 --> 00:01:10,470
we're sort of representative for

00:01:07,520 --> 00:01:12,450
everyone else that's been really putting

00:01:10,470 --> 00:01:19,799
in a lot of effort so far some of them

00:01:12,450 --> 00:01:22,110
are here and yeah so it's our again at

00:01:19,799 --> 00:01:25,740
today so we want to cut discuss a few

00:01:22,110 --> 00:01:28,740
things at first how we you currently use

00:01:25,740 --> 00:01:33,060
triple core a composer in triple core

00:01:28,740 --> 00:01:35,670
and how we want to make it how we want

00:01:33,060 --> 00:01:38,640
to support contrib modules with the

00:01:35,670 --> 00:01:40,920
composer dependencies how we could

00:01:38,640 --> 00:01:44,670
enable 3rd party dependencies and also

00:01:40,920 --> 00:01:47,729
how we could expose contributed modules

00:01:44,670 --> 00:01:52,920
on drupal.org two packages or our own

00:01:47,729 --> 00:01:55,049
implementation of packages so we don't

00:01:52,920 --> 00:01:58,170
let's a conversation that's why we don't

00:01:55,049 --> 00:01:59,880
cuss what is composer or what we ought

00:01:58,170 --> 00:02:02,490
to current state of composure and triple

00:01:59,880 --> 00:02:05,340
core and there are two great blog posts

00:02:02,490 --> 00:02:07,229
about how we currently use composer one

00:02:05,340 --> 00:02:10,800
is from voyance and the other one is

00:02:07,229 --> 00:02:13,120
from from Tim I you should read it if

00:02:10,800 --> 00:02:15,280
you have any question in detail

00:02:13,120 --> 00:02:20,110
and they are it's a great introduction

00:02:15,280 --> 00:02:22,930
into to topic i'm currently that's

00:02:20,110 --> 00:02:27,129
that's our goals so we want that

00:02:22,930 --> 00:02:29,620
composer supports core development so

00:02:27,129 --> 00:02:32,470
that we easy could add new dependencies

00:02:29,620 --> 00:02:34,690
and it's not a hassle that we have a

00:02:32,470 --> 00:02:37,930
huge vendor directory in our composure

00:02:34,690 --> 00:02:40,959
in our triple project we want to support

00:02:37,930 --> 00:02:43,329
third party modules contrib modules with

00:02:40,959 --> 00:02:46,239
composite dependencies and an example

00:02:43,329 --> 00:02:48,340
here is the address module or ms an SDK

00:02:46,239 --> 00:02:50,349
or also they drew blood greater module

00:02:48,340 --> 00:02:53,980
these are all contrib modules which

00:02:50,349 --> 00:02:55,930
contain composer dependencies and it's

00:02:53,980 --> 00:02:58,209
currently a hickey way how to get them

00:02:55,930 --> 00:03:01,480
into or play nice with the rest of the

00:02:58,209 --> 00:03:05,379
core dependencies and also we want to

00:03:01,480 --> 00:03:08,140
have a support composer create project

00:03:05,379 --> 00:03:10,299
command that's just a standard way how

00:03:08,140 --> 00:03:12,190
to instantiate a new composer project

00:03:10,299 --> 00:03:16,150
and that you can all manage all

00:03:12,190 --> 00:03:18,730
dependencies with this project and of

00:03:16,150 --> 00:03:20,500
course we are Drupal and that's why it's

00:03:18,730 --> 00:03:23,049
not that easy for us because we have

00:03:20,500 --> 00:03:25,060
many different groups of people so we

00:03:23,049 --> 00:03:27,400
have to support different needs and

00:03:25,060 --> 00:03:30,040
that's the main I think that's the root

00:03:27,400 --> 00:03:33,069
cause why it's currently so difficult to

00:03:30,040 --> 00:03:36,970
do composer right in Drupal project and

00:03:33,069 --> 00:03:40,419
client projects and every stuff so we

00:03:36,970 --> 00:03:44,319
have to support core development so that

00:03:40,419 --> 00:03:46,329
means test bought packaging we have to

00:03:44,319 --> 00:03:49,449
support the site built a use case that's

00:03:46,329 --> 00:03:52,720
a person who's not familiar with

00:03:49,449 --> 00:03:55,389
composer and it's a hot requirement for

00:03:52,720 --> 00:03:57,549
us that we don't need composer to work

00:03:55,389 --> 00:03:59,949
with Drupal so it means you can download

00:03:57,549 --> 00:04:01,599
Drupal and stopped working and you may

00:03:59,949 --> 00:04:04,510
need composer if you want to use the

00:04:01,599 --> 00:04:08,310
control module which had a neat suppose

00:04:04,510 --> 00:04:11,889
or a composer and of course we want to

00:04:08,310 --> 00:04:14,109
support the new kind of workflow where

00:04:11,889 --> 00:04:16,269
we can manage every single dependency in

00:04:14,109 --> 00:04:19,150
our project was composer and it's

00:04:16,269 --> 00:04:22,070
basically how other PHP projects

00:04:19,150 --> 00:04:25,880
currently work

00:04:22,070 --> 00:04:27,650
and now we are recorded the video what's

00:04:25,880 --> 00:04:31,870
the current state of composure in core

00:04:27,650 --> 00:04:35,090
and maybe to be as one to talk about it

00:04:31,870 --> 00:04:38,420
yeah so this is this is basically just a

00:04:35,090 --> 00:04:41,210
clean check out of Drupal 8 X which I'm

00:04:38,420 --> 00:04:44,360
proving right here and I'm just doing a

00:04:41,210 --> 00:04:47,540
composer install so this is yeah so this

00:04:44,360 --> 00:04:50,120
is what you get if you just do it with

00:04:47,540 --> 00:04:51,770
Drupal and so this is something that we

00:04:50,120 --> 00:04:54,890
really want to support because even

00:04:51,770 --> 00:04:56,870
though it may or may not be explicitly

00:04:54,890 --> 00:04:58,610
documented to do this this is what

00:04:56,870 --> 00:05:01,280
people will do because they download

00:04:58,610 --> 00:05:02,720
Drupal they see a composer die Jason so

00:05:01,280 --> 00:05:03,980
they run composer install because they

00:05:02,720 --> 00:05:05,570
think it'll work because that's how

00:05:03,980 --> 00:05:09,350
everything else works or every other

00:05:05,570 --> 00:05:11,630
project that uses composer but as you

00:05:09,350 --> 00:05:17,560
now see it's actually really weird what

00:05:11,630 --> 00:05:20,240
happens because now um mmhmm yeah okay

00:05:17,560 --> 00:05:24,290
so now what's actually happen is we have

00:05:20,240 --> 00:05:27,140
a huge diff in our project because

00:05:24,290 --> 00:05:30,320
composer has now downloaded the beta

00:05:27,140 --> 00:05:33,670
version of the core directory because

00:05:30,320 --> 00:05:37,670
that's the latest release of of Drupal

00:05:33,670 --> 00:05:39,260
so how can we just stop that maybe yeah

00:05:37,670 --> 00:05:42,950
so let me just talk about that for a

00:05:39,260 --> 00:05:44,780
second so because we've cloned Drupal

00:05:42,950 --> 00:05:47,060
core with get we have the latest code in

00:05:44,780 --> 00:05:49,430
the repository but since we've installed

00:05:47,060 --> 00:05:52,430
composer or we've done a composer

00:05:49,430 --> 00:05:54,770
install composer fetches the core the

00:05:52,430 --> 00:05:58,460
Drupal core a Drupal / core package and

00:05:54,770 --> 00:06:00,980
the latest version is the beta 15 so we

00:05:58,460 --> 00:06:03,440
actually download the beta 15 into our

00:06:00,980 --> 00:06:07,370
latest repo which is really weird and

00:06:03,440 --> 00:06:08,600
messed up and so we have this diff so

00:06:07,370 --> 00:06:10,730
that's one of the problems we want to

00:06:08,600 --> 00:06:13,460
avoid the second problem is you see I

00:06:10,730 --> 00:06:16,840
did the LS command and you see that

00:06:13,460 --> 00:06:19,130
composer actually downloaded the

00:06:16,840 --> 00:06:21,740
download all the third party

00:06:19,130 --> 00:06:23,540
dependencies in a vendor directory um so

00:06:21,740 --> 00:06:25,730
it's not a core vendor but in vendor

00:06:23,540 --> 00:06:28,610
which is stand like which is standard

00:06:25,730 --> 00:06:31,220
and how other PHP projects do it but now

00:06:28,610 --> 00:06:35,449
we have them in core vendor and in

00:06:31,220 --> 00:06:36,979
vendor so that's also really messed up

00:06:35,449 --> 00:06:39,499
and then the third thing I'm going to do

00:06:36,979 --> 00:06:41,389
is so since we now have them in both

00:06:39,499 --> 00:06:44,659
places you could think I can just remove

00:06:41,389 --> 00:06:47,419
them from core vendor and be fine but

00:06:44,659 --> 00:06:50,240
that's actually also not the case so if

00:06:47,419 --> 00:06:51,919
you do that like just remove all the

00:06:50,240 --> 00:06:53,870
core vendor stuff we still have it in

00:06:51,919 --> 00:06:57,439
the top level vendor and then for

00:06:53,870 --> 00:06:58,729
instance try address site install what's

00:06:57,439 --> 00:07:02,389
going to happen is because we have the

00:06:58,729 --> 00:07:06,080
auto load PHP that still references the

00:07:02,389 --> 00:07:09,169
core vendor file and since it's not like

00:07:06,080 --> 00:07:10,550
no longer gone no longer there it's yeah

00:07:09,169 --> 00:07:12,050
it's just not going to work so you see

00:07:10,550 --> 00:07:14,689
that there's a lot of things that just

00:07:12,050 --> 00:07:17,599
don't work and I just messed up with the

00:07:14,689 --> 00:07:19,729
current process yeah and so we want to

00:07:17,599 --> 00:07:21,999
propose a way to fix a lot of those

00:07:19,729 --> 00:07:21,999
things

00:07:37,000 --> 00:07:41,760
so that's basically

00:07:43,050 --> 00:07:47,659
no I'm live in any presentation mode

00:07:45,360 --> 00:07:47,659
more

00:07:50,470 --> 00:07:53,310
start

00:07:56,130 --> 00:08:00,509
sorry takes a while

00:08:11,300 --> 00:08:14,470
so we saw

00:08:14,980 --> 00:08:20,590
so that's it's a slide so that our

00:08:17,590 --> 00:08:23,920
current problems Jake or directory is in

00:08:20,590 --> 00:08:26,800
a repository it's committed and if you

00:08:23,920 --> 00:08:28,570
download and composer or replaces

00:08:26,800 --> 00:08:31,780
triple-core we can't manage external

00:08:28,570 --> 00:08:34,630
dependencies and our composure Jason the

00:08:31,780 --> 00:08:38,050
other load PHP needs to be update and

00:08:34,630 --> 00:08:39,850
also the gate ignore needs file needs to

00:08:38,050 --> 00:08:44,380
be updated because it's just huge diff

00:08:39,850 --> 00:08:46,960
animus so we try to do just a simple

00:08:44,380 --> 00:08:50,290
replace triple core and root composer

00:08:46,960 --> 00:08:53,380
chase and this means this repository

00:08:50,290 --> 00:08:57,010
contains our composite repository and if

00:08:53,380 --> 00:08:59,290
the dependency is fulfilled it means

00:08:57,010 --> 00:09:03,010
that we just would skip download

00:08:59,290 --> 00:09:06,610
composer j XXX Corps but it doesn't work

00:09:03,010 --> 00:09:08,800
because we also would lose our symphony

00:09:06,610 --> 00:09:12,450
and third party dependencies that are

00:09:08,800 --> 00:09:17,170
inside the triple slash core package and

00:09:12,450 --> 00:09:20,350
there's also a big issue on it it's to

00:09:17,170 --> 00:09:22,150
solve this that the root composer Jason

00:09:20,350 --> 00:09:24,730
is actually working it's called make the

00:09:22,150 --> 00:09:27,820
composer a root composite Jason working

00:09:24,730 --> 00:09:31,360
example and to currently work around for

00:09:27,820 --> 00:09:34,360
that is that we have a Drupal project

00:09:31,360 --> 00:09:36,040
template on github because github

00:09:34,360 --> 00:09:37,810
integrates nice reviews packages and

00:09:36,040 --> 00:09:40,930
then we get always the up-to-date

00:09:37,810 --> 00:09:44,140
release on it and it contains a few

00:09:40,930 --> 00:09:46,390
other features like the vendor directory

00:09:44,140 --> 00:09:49,600
is not in the document root it has a

00:09:46,390 --> 00:09:51,730
pre-configured composer installers and a

00:09:49,600 --> 00:09:53,920
few other things so if you currently

00:09:51,730 --> 00:09:55,840
want to use it then you should check out

00:09:53,920 --> 00:09:59,470
this project because I think it's the

00:09:55,840 --> 00:10:01,660
best way to do composer currently in

00:09:59,470 --> 00:10:04,360
trabuco but we want to bring this or

00:10:01,660 --> 00:10:07,090
parts of this to the Drupal core project

00:10:04,360 --> 00:10:09,400
that we all can can benefit from it and

00:10:07,090 --> 00:10:14,400
that we get a really nice standard

00:10:09,400 --> 00:10:17,470
solution so we had a diff you

00:10:14,400 --> 00:10:20,980
discussions before in triple con la and

00:10:17,470 --> 00:10:22,630
other triple cons and we tried a few

00:10:20,980 --> 00:10:24,220
different solutions so we try to

00:10:22,630 --> 00:10:26,920
approach with multiple vendor

00:10:24,220 --> 00:10:28,520
directories that we have one vendor

00:10:26,920 --> 00:10:31,010
directory in the root of

00:10:28,520 --> 00:10:33,590
project where you could maintain custom

00:10:31,010 --> 00:10:35,630
dependencies and that we have a core /

00:10:33,590 --> 00:10:40,460
when the directory where you have all

00:10:35,630 --> 00:10:42,650
core dependencies but actually the it's

00:10:40,460 --> 00:10:46,400
not going to work because composer needs

00:10:42,650 --> 00:10:50,390
a single vendor directory with all

00:10:46,400 --> 00:10:53,930
custom dependencies so a few days ago

00:10:50,390 --> 00:10:57,310
actually we found or discovered in new

00:10:53,930 --> 00:10:59,900
solution and it's related with to the

00:10:57,310 --> 00:11:03,080
composer merge plugin that's a composer

00:10:59,900 --> 00:11:05,630
plug-in that works similar to compose a

00:11:03,080 --> 00:11:07,930
manager but actually on the composer

00:11:05,630 --> 00:11:11,480
level and it's not their external

00:11:07,930 --> 00:11:14,390
dependent are not a Drupal specific

00:11:11,480 --> 00:11:17,720
dependency a composer merge plug-in

00:11:14,390 --> 00:11:20,420
allows us to merge multiple composite

00:11:17,720 --> 00:11:23,300
jasons into one single composer Jason it

00:11:20,420 --> 00:11:25,940
meet would mean that we have an include

00:11:23,300 --> 00:11:28,450
statement and the root composer Jason

00:11:25,940 --> 00:11:31,460
and this could actually include the

00:11:28,450 --> 00:11:34,120
dependencies from core / composer Jason

00:11:31,460 --> 00:11:36,980
and we could also include custom

00:11:34,120 --> 00:11:39,770
dependencies from contrib modules with

00:11:36,980 --> 00:11:43,040
this approach so that's our it could be

00:11:39,770 --> 00:11:45,710
our new composite Jason and it looks

00:11:43,040 --> 00:11:47,900
like this so we have trouble trouble

00:11:45,710 --> 00:11:50,390
that's the standard we added as a

00:11:47,900 --> 00:11:52,910
requirement the Wikimedia composer merge

00:11:50,390 --> 00:11:54,740
blanket its head it has already a stable

00:11:52,910 --> 00:11:57,830
release but i did some development

00:11:54,740 --> 00:12:02,540
that's why it's currently am deaf master

00:11:57,830 --> 00:12:04,190
then replace the triple core that means

00:12:02,540 --> 00:12:06,230
the drupal drupal project contains

00:12:04,190 --> 00:12:08,840
already Drupal core so we don't have to

00:12:06,230 --> 00:12:11,540
redownload it and here's the magic

00:12:08,840 --> 00:12:14,570
that's the extra configuration for the

00:12:11,540 --> 00:12:17,030
merge plugin it would mean it merges all

00:12:14,570 --> 00:12:19,310
requirements and required if statement

00:12:17,030 --> 00:12:22,220
and require deficit statements from

00:12:19,310 --> 00:12:23,750
quote composer Jason on runtime in our

00:12:22,220 --> 00:12:26,660
route compels a Jason and they are

00:12:23,750 --> 00:12:31,400
already installed afterwards and it also

00:12:26,660 --> 00:12:34,660
can wildcards so it means it would look

00:12:31,400 --> 00:12:38,570
in the country more folder for all

00:12:34,660 --> 00:12:40,910
dependencies from quand remote and 400

00:12:38,570 --> 00:12:42,290
modules and themes so we could extend it

00:12:40,910 --> 00:12:46,880
to themes and install profile

00:12:42,290 --> 00:12:49,279
and so on and just wood is would work

00:12:46,880 --> 00:12:52,699
for co-development because we can't

00:12:49,279 --> 00:12:55,070
split currently our core directory from

00:12:52,699 --> 00:12:57,529
drupa drupa from the Drupal project

00:12:55,070 --> 00:13:02,000
because then it's very hard to test and

00:12:57,529 --> 00:13:05,810
to get em or our workflow because right

00:13:02,000 --> 00:13:09,800
because then we we still need to do to

00:13:05,810 --> 00:13:11,990
provide topples for site builders and

00:13:09,800 --> 00:13:13,880
set with this approach the site builder

00:13:11,990 --> 00:13:16,850
could actually download standard modules

00:13:13,880 --> 00:13:19,790
and if they don't have a a

00:13:16,850 --> 00:13:21,769
composer dependency it's not required to

00:13:19,790 --> 00:13:24,370
run composer install it just works and

00:13:21,769 --> 00:13:26,959
if it if the module has composer

00:13:24,370 --> 00:13:28,759
dependencies and it just would work with

00:13:26,959 --> 00:13:31,910
composer install but it would be

00:13:28,759 --> 00:13:33,529
automatically discovered so and throop

00:13:31,910 --> 00:13:36,380
liqueur could be updated without

00:13:33,529 --> 00:13:39,050
composer and that's was one big security

00:13:36,380 --> 00:13:43,310
concern for people who are not familiar

00:13:39,050 --> 00:13:45,940
with composer yeah and that's this just

00:13:43,310 --> 00:13:49,459
a addition to support custom

00:13:45,940 --> 00:13:52,040
dependencies contrib modules to require

00:13:49,459 --> 00:13:54,079
them we are composer what's this it's a

00:13:52,040 --> 00:13:58,870
different up issue and it's not related

00:13:54,079 --> 00:14:04,970
to the merge plugin and there's also a

00:13:58,870 --> 00:14:07,310
other solution and what we had happened

00:14:04,970 --> 00:14:10,610
time to explore it in death because we

00:14:07,310 --> 00:14:14,839
discovered it just a few days ago and we

00:14:10,610 --> 00:14:16,550
are currently evaluating both but as it

00:14:14,839 --> 00:14:19,220
currently looks like we would prefer

00:14:16,550 --> 00:14:21,440
solution one because it supports the

00:14:19,220 --> 00:14:24,889
site builder and use phase and it works

00:14:21,440 --> 00:14:28,959
already and now we have also a video

00:14:24,889 --> 00:14:32,680
with the decomposed emerged lock in yeah

00:14:28,959 --> 00:14:32,680
you want to talk about it

00:14:34,570 --> 00:14:39,430
so here I'm now basically the size of

00:14:37,870 --> 00:14:42,160
the start is the beginning so I have a

00:14:39,430 --> 00:14:45,130
clean Drupal 8 install with the same

00:14:42,160 --> 00:14:47,440
commit and now i'm going to apply one of

00:14:45,130 --> 00:14:52,240
the patches from the issue that we

00:14:47,440 --> 00:14:56,590
linked earlier so web salir old

00:14:52,240 --> 00:14:58,210
everything he just showed the the

00:14:56,590 --> 00:15:00,340
changes to the composer Jason into a

00:14:58,210 --> 00:15:03,760
patch which we can see now so we upload

00:15:00,340 --> 00:15:05,530
he updates the auto load PHP and then we

00:15:03,760 --> 00:15:08,110
see the changes to the composer Jason

00:15:05,530 --> 00:15:12,610
which is basically exactly what what he

00:15:08,110 --> 00:15:14,770
just showed in the gist yeah that should

00:15:12,610 --> 00:15:17,710
be pretty much it and now I'm going to

00:15:14,770 --> 00:15:20,410
run composer install and we're going to

00:15:17,710 --> 00:15:22,840
see basically that almost all of the

00:15:20,410 --> 00:15:27,580
weirdness has gone away and it mostly

00:15:22,840 --> 00:15:30,400
just works sort of to prove to prove

00:15:27,580 --> 00:15:32,470
that this is actually working right so

00:15:30,400 --> 00:15:34,750
now I'm going to do a good status we see

00:15:32,470 --> 00:15:37,120
that composer now is not at all touched

00:15:34,750 --> 00:15:40,810
the core directory so it's left that

00:15:37,120 --> 00:15:42,850
completely alone it just has added the

00:15:40,810 --> 00:15:46,030
vendor directory and the composer log

00:15:42,850 --> 00:15:49,390
file so we could add that to the repo

00:15:46,030 --> 00:15:52,300
for now as well and you can also see now

00:15:49,390 --> 00:15:53,740
that you can just go ahead and do the

00:15:52,300 --> 00:15:57,240
dress I'd install because we've updated

00:15:53,740 --> 00:16:00,390
the auto load PHP and it now finds the

00:15:57,240 --> 00:16:04,000
directories properly in the root vendor

00:16:00,390 --> 00:16:06,490
so this is really sort of a standard

00:16:04,000 --> 00:16:09,190
workflow for anyone is used to composer

00:16:06,490 --> 00:16:13,660
he just clones so assuming this patch

00:16:09,190 --> 00:16:15,610
would go into 80 X the the workflow

00:16:13,660 --> 00:16:18,190
really could be for people to just clone

00:16:15,610 --> 00:16:21,670
the repository and run composer install

00:16:18,190 --> 00:16:23,530
in the root and they could just work

00:16:21,670 --> 00:16:26,920
fine with it like with any other

00:16:23,530 --> 00:16:28,540
composer enabled project core developers

00:16:26,920 --> 00:16:30,610
because the core directory is left

00:16:28,540 --> 00:16:32,740
untouched core developers are also sort

00:16:30,610 --> 00:16:36,130
of supported and you can roll patches

00:16:32,740 --> 00:16:39,370
and everything yeah so this is something

00:16:36,130 --> 00:16:44,380
that we feel sort of combines the best

00:16:39,370 --> 00:16:47,940
of all worlds and as you can see it's it

00:16:44,380 --> 00:16:47,940
mostly just works

00:16:50,070 --> 00:16:57,700
and currently because now we know that

00:16:54,040 --> 00:17:00,400
our c1 is on the table we want to get it

00:16:57,700 --> 00:17:04,329
in before hace 1 so we have a few weeks

00:17:00,400 --> 00:17:07,660
to get it in all other issues related to

00:17:04,329 --> 00:17:10,530
composer or follow ups and I think it's

00:17:07,660 --> 00:17:13,839
not really necessary to get them in

00:17:10,530 --> 00:17:16,030
afterwards but it would be even our

00:17:13,839 --> 00:17:17,890
composite implementation would be even

00:17:16,030 --> 00:17:28,000
cleaner with them but it will work

00:17:17,890 --> 00:17:30,550
without them too so these are the

00:17:28,000 --> 00:17:33,190
possible follow-ups and because we don't

00:17:30,550 --> 00:17:35,680
have to support our different composer

00:17:33,190 --> 00:17:38,820
works workflows anymore we could remove

00:17:35,680 --> 00:17:42,700
again autoload PHP in our route and

00:17:38,820 --> 00:17:44,710
directory because even if you use a

00:17:42,700 --> 00:17:47,740
composite rhythm workflow it's it's

00:17:44,710 --> 00:17:49,600
would be in vendor / at the load and if

00:17:47,740 --> 00:17:51,460
you don't use composer it's still in

00:17:49,600 --> 00:17:54,070
mineralogy out to load so it's not a

00:17:51,460 --> 00:17:56,640
heart requirement anymore we could run

00:17:54,070 --> 00:17:59,470
composer install and Triple C I and

00:17:56,640 --> 00:18:03,850
during the packaging and it would mean

00:17:59,470 --> 00:18:05,679
we could roll very small composer

00:18:03,850 --> 00:18:09,580
related patches and their dependencies

00:18:05,679 --> 00:18:12,070
because we could remove our vendor

00:18:09,580 --> 00:18:14,170
directory in core completely and added

00:18:12,070 --> 00:18:16,420
two argued ignore so that's basically

00:18:14,170 --> 00:18:18,730
the end goal it would make triple

00:18:16,420 --> 00:18:21,700
lighter and everything would still work

00:18:18,730 --> 00:18:23,650
topples would work Triple C I would work

00:18:21,700 --> 00:18:28,950
composer driven development would work

00:18:23,650 --> 00:18:28,950
yes at

00:18:30,850 --> 00:18:38,149
yeah it's just related to court because

00:18:34,629 --> 00:18:40,729
everything else is or for distributions

00:18:38,149 --> 00:18:44,059
because a distribution would have

00:18:40,729 --> 00:18:47,059
multiple code modules in it then the

00:18:44,059 --> 00:18:49,330
merge plug-in would also work because

00:18:47,059 --> 00:18:51,399
they are in there and then we get all

00:18:49,330 --> 00:18:58,509
dependencies for these and could is

00:18:51,399 --> 00:18:58,509
distributed in one distribution and yes

00:18:59,529 --> 00:19:07,070
Mike yeah sorry we missed the first

00:19:02,929 --> 00:19:08,809
question so for your site product like

00:19:07,070 --> 00:19:12,470
your site specific project you would not

00:19:08,809 --> 00:19:14,539
touch the root composer JSON file you

00:19:12,470 --> 00:19:15,739
would put it in some kind of like your

00:19:14,539 --> 00:19:17,720
own distribution or something like that

00:19:15,739 --> 00:19:20,029
or no your honor has been one can touch

00:19:17,720 --> 00:19:22,700
the root composer Jason because it

00:19:20,029 --> 00:19:25,039
doesn't contain any composer our triple

00:19:22,700 --> 00:19:29,269
core dependencies because they are still

00:19:25,039 --> 00:19:31,789
in college composer Jason is emergen on

00:19:29,269 --> 00:19:34,820
runtime it contains just your own

00:19:31,789 --> 00:19:38,359
dependencies and it's very similar to HT

00:19:34,820 --> 00:19:41,509
X's or two I think sure you have you

00:19:38,359 --> 00:19:45,320
have to merge it during updates but it's

00:19:41,509 --> 00:19:48,460
highly unlikely that we have to touch it

00:19:45,320 --> 00:19:54,849
during triple-a development cycle Thanks

00:19:48,460 --> 00:19:57,109
and the answer questions so far sure

00:19:54,849 --> 00:19:58,909
yeah you say you you're merging the

00:19:57,109 --> 00:20:00,499
composite Jason files is that if instead

00:19:58,909 --> 00:20:01,940
you would we would create a composite

00:20:00,499 --> 00:20:04,190
Jason in the root yeah before

00:20:01,940 --> 00:20:05,659
downloading anything and then you run

00:20:04,190 --> 00:20:07,849
composer and it downloads trooper and

00:20:05,659 --> 00:20:10,039
other stuff and then it automatically

00:20:07,849 --> 00:20:11,869
has the dependencies of its sub packages

00:20:10,039 --> 00:20:13,549
so then it wouldn't have to merge the

00:20:11,869 --> 00:20:16,609
composite it or does it is that not a

00:20:13,549 --> 00:20:18,320
good idea maybe it's a good idea we have

00:20:16,609 --> 00:20:21,559
to explore it but I think we thought

00:20:18,320 --> 00:20:23,539
about it already because we want the

00:20:21,559 --> 00:20:26,299
composer merge plugin it's still a

00:20:23,539 --> 00:20:28,519
little bit of the heck for people who

00:20:26,299 --> 00:20:30,889
are not familiar with composer but we

00:20:28,519 --> 00:20:32,479
also want to support the real compositor

00:20:30,889 --> 00:20:34,940
from development and that's why we need

00:20:32,479 --> 00:20:38,090
a sub tree split for Drupal / core and

00:20:34,940 --> 00:20:39,919
that's why we should better put the

00:20:38,090 --> 00:20:40,930
dependencies into the XXX Corps

00:20:39,919 --> 00:20:47,830
directory to

00:20:40,930 --> 00:20:50,830
support this use case yes yeah the

00:20:47,830 --> 00:20:52,810
concern was mainly that's this triple

00:20:50,830 --> 00:20:56,260
core should be updateable without

00:20:52,810 --> 00:21:00,040
composer or we can use composer a Drupal

00:20:56,260 --> 00:21:01,900
core with without composer but if you if

00:21:00,040 --> 00:21:03,820
you use this workflow without composer

00:21:01,900 --> 00:21:06,610
then you wouldn't have this root

00:21:03,820 --> 00:21:08,200
composer Jason now would you we still

00:21:06,610 --> 00:21:10,150
would have a composer root composite

00:21:08,200 --> 00:21:13,750
Jason yes and also the article other

00:21:10,150 --> 00:21:17,170
loader doesn't really fit all together

00:21:13,750 --> 00:21:20,790
but we can discuss it later mayor and

00:21:17,170 --> 00:21:23,350
that's good so this these are our

00:21:20,790 --> 00:21:29,050
possible follow-ups and we could get

00:21:23,350 --> 00:21:31,120
them up in any during our C phase maybe

00:21:29,050 --> 00:21:33,760
we should have discussed this with the

00:21:31,120 --> 00:21:35,710
core developers but it also a little bit

00:21:33,760 --> 00:21:39,190
depends on Triple C and our packaging

00:21:35,710 --> 00:21:41,740
scripts but it's it's then it's already

00:21:39,190 --> 00:21:44,440
compatible and it's I would not consider

00:21:41,740 --> 00:21:50,800
this as a API change because all files

00:21:44,440 --> 00:21:52,240
are still in the right place I just want

00:21:50,800 --> 00:21:54,310
to point out Drupal see I already does a

00:21:52,240 --> 00:22:01,480
composer install yeah that's that parts

00:21:54,310 --> 00:22:03,310
done cool yeah months ago yeah well so

00:22:01,480 --> 00:22:05,530
the thing this would sort of change and

00:22:03,310 --> 00:22:08,350
we talked to talk to neil yesterday

00:22:05,530 --> 00:22:10,120
about this but that was sort of before

00:22:08,350 --> 00:22:13,720
or in between we discovered this new

00:22:10,120 --> 00:22:16,480
thing so what Drupal CI currently does

00:22:13,720 --> 00:22:18,370
is that it runs a composer install in

00:22:16,480 --> 00:22:20,050
the core directory because that's where

00:22:18,370 --> 00:22:22,720
all the dependencies on like Symphony

00:22:20,050 --> 00:22:25,170
and everything else is and what this

00:22:22,720 --> 00:22:28,090
would allow us or what this would enable

00:22:25,170 --> 00:22:32,230
is actually to run a composer install in

00:22:28,090 --> 00:22:35,220
the root of Drupal itself yeah so that's

00:22:32,230 --> 00:22:37,240
also because we have that issue for

00:22:35,220 --> 00:22:41,220
running the composer install on

00:22:37,240 --> 00:22:43,720
packaging so that's sort of like yes

00:22:41,220 --> 00:22:45,370
well the current patch matches Triple C

00:22:43,720 --> 00:22:47,530
I in that it runs it in the core

00:22:45,370 --> 00:22:49,770
directory but we might want to like

00:22:47,530 --> 00:22:52,840
discuss the relation to this issue

00:22:49,770 --> 00:22:54,169
because that would change it to running

00:22:52,840 --> 00:22:56,539
composer and so on the route

00:22:54,169 --> 00:22:58,970
so it might make sense to sort of like

00:22:56,539 --> 00:23:01,429
we should sort of discuss whether it

00:22:58,970 --> 00:23:05,570
makes sense to then support a postponed

00:23:01,429 --> 00:23:07,549
the packaging issue on this and try to

00:23:05,570 --> 00:23:11,119
get this in as fast as possible before

00:23:07,549 --> 00:23:15,619
RC and then like make packaging directly

00:23:11,119 --> 00:23:19,119
run composer install in the route yeah

00:23:15,619 --> 00:23:19,119
that's something we we should figure out

00:23:19,149 --> 00:23:24,950
yeah right right it's sort of yet sort

00:23:23,450 --> 00:23:26,929
of like a chicken and egg thing like we

00:23:24,950 --> 00:23:35,600
want to get this in as fast as possible

00:23:26,929 --> 00:23:39,220
but yeah yeah we should right yeah ok

00:23:35,600 --> 00:23:41,989
now we solved how we going to use triple

00:23:39,220 --> 00:23:44,600
with composer in core and it all works

00:23:41,989 --> 00:23:48,919
but here's another big issue and thats

00:23:44,600 --> 00:23:51,889
related to our packages or that we host

00:23:48,919 --> 00:23:54,889
all modules on packages so packages is a

00:23:51,889 --> 00:23:57,230
composer repository and it contains all

00:23:54,889 --> 00:24:00,409
metadata about it would contain all

00:23:57,230 --> 00:24:02,749
metadata about composer packages it

00:24:00,409 --> 00:24:05,210
means drupal module themes instead

00:24:02,749 --> 00:24:08,929
profile distribution trash extensions

00:24:05,210 --> 00:24:12,440
everything and we have there are two

00:24:08,929 --> 00:24:16,489
options one is the first option we just

00:24:12,440 --> 00:24:19,369
push everything two packages org but it

00:24:16,489 --> 00:24:21,259
has a few downsides because it would

00:24:19,369 --> 00:24:23,389
require that every repository we are

00:24:21,259 --> 00:24:25,369
want to publish their as a composer

00:24:23,389 --> 00:24:28,279
trace and that's currently not the case

00:24:25,369 --> 00:24:31,039
for contrib because I think we should

00:24:28,279 --> 00:24:33,409
have composer Jason in every single

00:24:31,039 --> 00:24:35,029
module because there's no real benefit

00:24:33,409 --> 00:24:37,129
if you want to compose a driven

00:24:35,029 --> 00:24:40,820
development and you only can require

00:24:37,129 --> 00:24:44,960
modules that have composer dependencies

00:24:40,820 --> 00:24:47,330
every module should there should be

00:24:44,960 --> 00:24:52,129
there otherwise there is no real benefit

00:24:47,330 --> 00:24:55,399
and it would also require that we apply

00:24:52,129 --> 00:24:58,639
semantic versioning to triple contra

00:24:55,399 --> 00:25:01,609
projects and they're both are long

00:24:58,639 --> 00:25:04,639
outstanding issues so i think it's not

00:25:01,609 --> 00:25:07,330
feasible that we get it for two blade

00:25:04,639 --> 00:25:10,370
maybe we can take a new

00:25:07,330 --> 00:25:13,299
try for triple nie but I think for true

00:25:10,370 --> 00:25:16,160
blade it's of the table or a guesser and

00:25:13,299 --> 00:25:18,620
the second option is what we already

00:25:16,160 --> 00:25:24,049
implemented it's a triple specific

00:25:18,620 --> 00:25:27,350
packages and and this could have some

00:25:24,049 --> 00:25:29,480
more logic it could accept repositories

00:25:27,350 --> 00:25:32,840
that doesn't contain a composer Jason

00:25:29,480 --> 00:25:35,419
because it can translate or generate the

00:25:32,840 --> 00:25:39,140
composite Jason out of the triple info

00:25:35,419 --> 00:25:41,659
files and we do it already and it would

00:25:39,140 --> 00:25:43,190
also work with our current versioning

00:25:41,659 --> 00:25:46,340
scheme because we could translate

00:25:43,190 --> 00:25:50,960
versions to sender like versioning

00:25:46,340 --> 00:25:57,799
system and Drupal packages is already up

00:25:50,960 --> 00:26:00,500
and running and we had a 170 30,000

00:25:57,799 --> 00:26:04,549
installation last month so that's a lot

00:26:00,500 --> 00:26:10,460
i guess and we started early a 2015 and

00:26:04,549 --> 00:26:14,620
it's a steep growth since then and there

00:26:10,460 --> 00:26:19,820
are already issues for the for this and

00:26:14,620 --> 00:26:22,510
yeah let's um there's an another

00:26:19,820 --> 00:26:26,780
approach so that we could change our

00:26:22,510 --> 00:26:29,179
versioning scheme to not a three-digit

00:26:26,780 --> 00:26:31,669
versioning number that we could use four

00:26:29,179 --> 00:26:36,289
digit versioning numbers and composer

00:26:31,669 --> 00:26:39,740
supports it but internally but never has

00:26:36,289 --> 00:26:43,130
tried it already because it's I don't

00:26:39,740 --> 00:26:46,190
know why it's in composer but yeah

00:26:43,130 --> 00:26:48,650
nobody use it is so it's I think we will

00:26:46,190 --> 00:26:50,809
run into issues and they are already we

00:26:48,650 --> 00:26:53,120
discovered already a few issues like the

00:26:50,809 --> 00:26:56,299
tilt operator and the carrot operator

00:26:53,120 --> 00:26:58,730
doesn't really work because it it runs

00:26:56,299 --> 00:27:01,070
it's required to have three digit

00:26:58,730 --> 00:27:03,049
version numbers for it and we would have

00:27:01,070 --> 00:27:05,720
four it means the meaning of tilt and

00:27:03,049 --> 00:27:08,200
karyotype operators is completely

00:27:05,720 --> 00:27:12,190
different and I think it's very hard to

00:27:08,200 --> 00:27:15,440
explain this to all developers that our

00:27:12,190 --> 00:27:19,220
composure requirements work different

00:27:15,440 --> 00:27:20,720
than anybody else yeah I work around for

00:27:19,220 --> 00:27:25,280
our branches as the

00:27:20,720 --> 00:27:28,390
branch is so we could em convert our 8x

00:27:25,280 --> 00:27:33,460
minus 8x branch to assembler like a

00:27:28,390 --> 00:27:35,929
constraint yeah that's basically our

00:27:33,460 --> 00:27:39,320
conversation or our intro in the

00:27:35,929 --> 00:27:42,200
conversation and I think we discussed

00:27:39,320 --> 00:27:44,299
the usage in core a lot but we should

00:27:42,200 --> 00:27:57,140
discuss the packages to implementation

00:27:44,299 --> 00:27:58,400
as well so we take questions or so if

00:27:57,140 --> 00:28:02,120
I'm understanding your proposal

00:27:58,400 --> 00:28:06,039
correctly for handling core will still

00:28:02,120 --> 00:28:08,980
have core vendor in the repository and

00:28:06,039 --> 00:28:11,840
therefore in the tarball and if we run

00:28:08,980 --> 00:28:14,090
if we do run composer installment in the

00:28:11,840 --> 00:28:16,640
drupal root will end up with the second

00:28:14,090 --> 00:28:18,980
vendor which gets used instead of know

00:28:16,640 --> 00:28:21,530
we would review this patch also moves

00:28:18,980 --> 00:28:24,260
the window from co / vendor to the root

00:28:21,530 --> 00:28:29,150
again okay so what's in the repository

00:28:24,260 --> 00:28:31,909
would be core / composure Jason is with

00:28:29,150 --> 00:28:36,080
Zelda dogfight with no log with with no

00:28:31,909 --> 00:28:38,809
lock file yeah okay and then there'd be

00:28:36,080 --> 00:28:40,880
a top level vendor directory that is in

00:28:38,809 --> 00:28:45,409
the repository is that as a result of

00:28:40,880 --> 00:28:49,610
that yeah and so then if I want to do a

00:28:45,409 --> 00:28:51,740
proper composer workflow for for my

00:28:49,610 --> 00:28:53,780
sites then I'm gonna have to take that

00:28:51,740 --> 00:28:58,520
back out the repository you know you

00:28:53,780 --> 00:29:00,740
just modify the root composer Jason and

00:28:58,520 --> 00:29:03,020
remove the merge plug-in because if you

00:29:00,740 --> 00:29:04,549
want to do proper composer development

00:29:03,020 --> 00:29:08,720
you would use the sub to split with

00:29:04,549 --> 00:29:11,000
triple slash core because I'm so then I

00:29:08,720 --> 00:29:14,390
drupal's YouTube massage cord end up in

00:29:11,000 --> 00:29:15,919
vendor know it it would end up in / core

00:29:14,390 --> 00:29:18,169
because we have to compose our

00:29:15,919 --> 00:29:21,890
installers and the trooper core project

00:29:18,169 --> 00:29:24,799
has typed trouble my triple- for hyphen

00:29:21,890 --> 00:29:26,600
core and it would a composer would

00:29:24,799 --> 00:29:31,340
discourage it automatically into the

00:29:26,600 --> 00:29:33,350
right directory okay so guys what I'm

00:29:31,340 --> 00:29:34,160
concerned about and it sounds like this

00:29:33,350 --> 00:29:37,010
isn't a concern

00:29:34,160 --> 00:29:39,740
to verify if there's multiple copies of

00:29:37,010 --> 00:29:41,720
large swathes of code I know from

00:29:39,740 --> 00:29:45,680
experience that thoroughly confused my

00:29:41,720 --> 00:29:47,210
IDE and half of it doesn't work in so

00:29:45,680 --> 00:29:49,940
that's one thing I want to avoid and the

00:29:47,210 --> 00:29:51,620
other is if I'm if I download Drupal

00:29:49,940 --> 00:29:52,940
core and then start building on top of

00:29:51,620 --> 00:29:55,880
it and want to use composer with it I

00:29:52,940 --> 00:29:58,160
then want to not have any a vendor in

00:29:55,880 --> 00:30:00,710
the repositories there will be no window

00:29:58,160 --> 00:30:04,040
and okay a single when they're in the

00:30:00,710 --> 00:30:06,560
root and even dead we if we go do the

00:30:04,040 --> 00:30:08,930
follow ups we could remove that ungodly

00:30:06,560 --> 00:30:11,990
because we can do it we can automate it

00:30:08,930 --> 00:30:14,030
automated in Triple C I and our Patrick

00:30:11,990 --> 00:30:16,310
packaging scripts okay so at least in

00:30:14,030 --> 00:30:19,730
the interim I and my site I download

00:30:16,310 --> 00:30:21,800
Drupal I'd then need to remove that the

00:30:19,730 --> 00:30:23,360
vendor or delete vendor then do a

00:30:21,800 --> 00:30:25,010
composer install to regenerate it and

00:30:23,360 --> 00:30:27,350
not put the new one into that my own

00:30:25,010 --> 00:30:29,450
repository yeah okay but it's doable

00:30:27,350 --> 00:30:32,690
them but okay for example if you would

00:30:29,450 --> 00:30:34,520
start with a good clone then you don't

00:30:32,690 --> 00:30:35,900
have to delete anything because the git

00:30:34,520 --> 00:30:38,380
clone will you contain a vendor

00:30:35,900 --> 00:30:42,290
directory so you can just start building

00:30:38,380 --> 00:30:46,220
okay yeah assuming we do the follow ups

00:30:42,290 --> 00:30:49,070
okay that sounds like the least bad plan

00:30:46,220 --> 00:30:54,260
I've heard so far in this saga so thank

00:30:49,070 --> 00:30:56,810
you so so just one additional note to

00:30:54,260 --> 00:30:58,670
your point to the like drupal / core

00:30:56,810 --> 00:31:00,650
downloading into the drupal directory

00:30:58,670 --> 00:31:02,930
that is actually exactly what happened

00:31:00,650 --> 00:31:05,210
in the first video when I just like when

00:31:02,930 --> 00:31:08,660
you type composer install right now in

00:31:05,210 --> 00:31:10,760
ATX that's actually what happens because

00:31:08,660 --> 00:31:12,590
we have the dependency on the composer

00:31:10,760 --> 00:31:16,070
installers plugin in the root composer

00:31:12,590 --> 00:31:17,540
jason and on drupal / core so what

00:31:16,070 --> 00:31:21,110
actually happens is it fetches the

00:31:17,540 --> 00:31:23,690
drupal / core package from from packages

00:31:21,110 --> 00:31:26,240
and it completely wipes the the core

00:31:23,690 --> 00:31:27,710
directory that's there and get and puts

00:31:26,240 --> 00:31:30,770
the package there that's why we had the

00:31:27,710 --> 00:31:32,870
the ugly git diff there so that auction

00:31:30,770 --> 00:31:35,150
that that's actually what what happens

00:31:32,870 --> 00:31:36,410
already right now and that's what we're

00:31:35,150 --> 00:31:39,260
trying to avoid because we don't want

00:31:36,410 --> 00:31:41,480
like if the core directory is there and

00:31:39,260 --> 00:31:44,600
get we don't want a composer to touch it

00:31:41,480 --> 00:31:48,070
but if it's not we wanted to in so you

00:31:44,600 --> 00:31:48,070
know we need to sort of have both

00:32:01,679 --> 00:32:07,480
now I just wanted to ask a little bit

00:32:04,149 --> 00:32:08,830
about the semantic versioning for for

00:32:07,480 --> 00:32:10,590
working with package just I mean it

00:32:08,830 --> 00:32:12,999
seems like the only we could work

00:32:10,590 --> 00:32:15,519
directly with package just as is is to

00:32:12,999 --> 00:32:17,860
abandon the relationship of the core

00:32:15,519 --> 00:32:19,990
version otherwise we need to put some

00:32:17,860 --> 00:32:22,269
sort of facade up where we deliver the

00:32:19,990 --> 00:32:24,789
JSON either via the Drupal packages or

00:32:22,269 --> 00:32:28,240
something at drupal org right yeah

00:32:24,789 --> 00:32:30,879
that's right it would or yeah anything

00:32:28,240 --> 00:32:32,759
with if you want to keep our version in

00:32:30,879 --> 00:32:36,639
the system but then we have to implement

00:32:32,759 --> 00:32:39,369
some kind of new code in packages that

00:32:36,639 --> 00:32:41,110
it will work with different our new

00:32:39,369 --> 00:32:43,600
versioning theme but it's highly

00:32:41,110 --> 00:32:46,299
unlikely that we get it in that and and

00:32:43,600 --> 00:32:48,190
if we wanted to have composer JSON in

00:32:46,299 --> 00:32:49,570
all the modules that don't have a

00:32:48,190 --> 00:32:52,269
composer dependency we either have to

00:32:49,570 --> 00:32:55,029
add a commit to them or we could add

00:32:52,269 --> 00:32:57,909
that into the packaging scripts or we

00:32:55,029 --> 00:33:00,490
could have that as part of the we would

00:32:57,909 --> 00:33:03,220
it because the packages treats ticket

00:33:00,490 --> 00:33:06,129
directory a git repository directly it

00:33:03,220 --> 00:33:08,259
we need to have it in there right if

00:33:06,129 --> 00:33:09,789
packages to serving the JSON right if we

00:33:08,259 --> 00:33:12,490
serve the JSON ourselves as a service

00:33:09,789 --> 00:33:14,919
just like packages then we don't have we

00:33:12,490 --> 00:33:19,649
could generated yeah it's okay but we

00:33:14,919 --> 00:33:22,450
will also have to read the contrib

00:33:19,649 --> 00:33:24,639
repositories because the repositories

00:33:22,450 --> 00:33:27,100
might contain a composite Jason so we

00:33:24,639 --> 00:33:28,809
can't rely just on our Drupal total

00:33:27,100 --> 00:33:31,149
database which drags all the module

00:33:28,809 --> 00:33:37,090
releases and dependencies we have to do

00:33:31,149 --> 00:33:38,980
more than that yeah they're in the other

00:33:37,090 --> 00:33:42,039
option there is what we were talking

00:33:38,980 --> 00:33:43,629
about in LA which is just modules that

00:33:42,039 --> 00:33:46,149
don't have a composer Jason aren't

00:33:43,629 --> 00:33:49,419
installable the composer and go file

00:33:46,149 --> 00:33:51,100
patch yeah and then that will just work

00:33:49,419 --> 00:33:53,799
its way through probably fairly quickly

00:33:51,100 --> 00:33:56,049
given that there will be a number of

00:33:53,799 --> 00:33:59,019
very high level modules very large

00:33:56,049 --> 00:34:01,059
modules that do require composer for

00:33:59,019 --> 00:34:02,919
various things they already do and so

00:34:01,059 --> 00:34:04,509
the evolutionary pressure would take

00:34:02,919 --> 00:34:07,690
care of that for us very quickly I think

00:34:04,509 --> 00:34:10,510
so that I don't find the argument that

00:34:07,690 --> 00:34:12,190
we would need to push your composure

00:34:10,510 --> 00:34:13,869
JSON files into every module a

00:34:12,190 --> 00:34:15,519
compelling reasons and not used

00:34:13,869 --> 00:34:17,950
packages as the distributor that's

00:34:15,519 --> 00:34:20,740
easily solved by just social pressure

00:34:17,950 --> 00:34:21,940
within six months you know some of the

00:34:20,740 --> 00:34:24,339
other arguments around the change car

00:34:21,940 --> 00:34:25,419
versioning are compelling only because

00:34:24,339 --> 00:34:27,009
you've been talking about it for a year

00:34:25,419 --> 00:34:29,200
and still haven't done anything but i

00:34:27,009 --> 00:34:30,190
don't think the compress the requirement

00:34:29,200 --> 00:34:32,740
for the composer jason is not a

00:34:30,190 --> 00:34:37,329
compelling argument so yeah we could try

00:34:32,740 --> 00:34:39,249
to remove to our the trooper versioning

00:34:37,329 --> 00:34:43,349
version number from our version number

00:34:39,249 --> 00:34:46,839
and manage everything with composer and

00:34:43,349 --> 00:34:49,539
do like Drupal core requirement in every

00:34:46,839 --> 00:34:51,909
composer Jason it would work but yeah

00:34:49,539 --> 00:34:55,929
it's it's a huge change and it takes it

00:34:51,909 --> 00:34:59,049
yeah and there's like there's also like

00:34:55,929 --> 00:35:01,119
a tech like a practical problem with

00:34:59,049 --> 00:35:03,190
that so that would be like the first the

00:35:01,119 --> 00:35:04,960
first scheme up there so we lose the

00:35:03,190 --> 00:35:09,220
seven or the eight completely so

00:35:04,960 --> 00:35:14,829
something like current like 8 X 1 dot x

00:35:09,220 --> 00:35:17,289
would be or 8x 10 would be 1 0 0 so we

00:35:14,829 --> 00:35:19,059
get the added patch level from semantic

00:35:17,289 --> 00:35:22,239
versioning but the problem with that is

00:35:19,059 --> 00:35:24,220
actually that for Drupal modules like a

00:35:22,239 --> 00:35:26,680
lot of the modules are maintained in

00:35:24,220 --> 00:35:30,220
seven and an eight at the same time and

00:35:26,680 --> 00:35:31,960
so if you have like a 2x which has a

00:35:30,220 --> 00:35:35,109
dependency on Drupal 7 because it's a

00:35:31,960 --> 00:35:36,970
Drupal 7 module and the 3x is the Drupal

00:35:35,109 --> 00:35:38,890
8 module because it's so it has a

00:35:36,970 --> 00:35:41,200
dependency on Drupal 8 well then like a

00:35:38,890 --> 00:35:42,940
year later drupal 7 is still around and

00:35:41,200 --> 00:35:47,499
you decide to add like new features to

00:35:42,940 --> 00:35:50,079
your 7 version then that like you really

00:35:47,499 --> 00:35:51,970
have no semantic version for that

00:35:50,079 --> 00:35:55,210
because if it's like if you want to

00:35:51,970 --> 00:35:57,819
break the API in seven like your seven

00:35:55,210 --> 00:35:59,980
module is 2x and you break the API so

00:35:57,819 --> 00:36:01,930
you have to push the major version so

00:35:59,980 --> 00:36:04,390
that makes it 3x but 3x is already the

00:36:01,930 --> 00:36:07,900
eight module so should it be four decks

00:36:04,390 --> 00:36:10,089
or like 2.5 x or like that's sort of

00:36:07,900 --> 00:36:13,749
something that's unique to drupal

00:36:10,089 --> 00:36:15,430
because like modules are just really

00:36:13,749 --> 00:36:17,079
really strongly bound to the core

00:36:15,430 --> 00:36:19,690
version it's just not it's different

00:36:17,079 --> 00:36:21,069
than with other projects I guess yeah

00:36:19,690 --> 00:36:22,599
two ideas about this semantic versioning

00:36:21,069 --> 00:36:25,239
I don't know if that's a good idea but

00:36:22,599 --> 00:36:27,300
first would be to make the core version

00:36:25,239 --> 00:36:30,930
part of the module

00:36:27,300 --> 00:36:33,720
name so it would be d 8 views viewers

00:36:30,930 --> 00:36:37,500
okay it's not covered it would be d7

00:36:33,720 --> 00:36:40,590
something and denying something and the

00:36:37,500 --> 00:36:44,870
other idea would be that that's

00:36:40,590 --> 00:36:47,550
something I forgot there and then

00:36:44,870 --> 00:36:49,530
generally they to publish something on

00:36:47,550 --> 00:36:51,780
drupal org and then have some automated

00:36:49,530 --> 00:36:53,070
process to put it on packages or to

00:36:51,780 --> 00:36:55,050
publish something on github and then

00:36:53,070 --> 00:36:57,110
have some automatic process to get it on

00:36:55,050 --> 00:37:00,330
packages or on drupal org or something

00:36:57,110 --> 00:37:02,190
with this kind of script or automated

00:37:00,330 --> 00:37:04,260
process we could solve a lot of problems

00:37:02,190 --> 00:37:05,790
I think so some of this you already

00:37:04,260 --> 00:37:07,770
suggested but they currently go in

00:37:05,790 --> 00:37:09,810
different directions and so someone who

00:37:07,770 --> 00:37:11,310
wants to have everything with composer

00:37:09,810 --> 00:37:13,080
and puts a composer Jason in their

00:37:11,310 --> 00:37:16,050
module we could still have something

00:37:13,080 --> 00:37:19,500
that gets this on drupal org maybe I not

00:37:16,050 --> 00:37:21,300
sure but and someone who wants to do it

00:37:19,500 --> 00:37:23,640
old school and to the drew park without

00:37:21,300 --> 00:37:25,320
composer Jason then we could have

00:37:23,640 --> 00:37:27,320
something that adds a composer Jason

00:37:25,320 --> 00:37:30,360
automatically I don't think that's I

00:37:27,320 --> 00:37:33,120
think that's better than forcing

00:37:30,360 --> 00:37:36,930
everyone are more realistic movie yeah

00:37:33,120 --> 00:37:39,630
well and so not directly an answer but

00:37:36,930 --> 00:37:41,490
more like sort of in the same context on

00:37:39,630 --> 00:37:44,100
packages the Drupal namespace is

00:37:41,490 --> 00:37:46,710
currently owned by Drees so no one can

00:37:44,100 --> 00:37:49,560
just like publish a like drupal /

00:37:46,710 --> 00:37:51,720
michael module on packages and they're

00:37:49,560 --> 00:37:54,750
already couple modules on packages that

00:37:51,720 --> 00:37:57,660
do exist but they like preceded the fact

00:37:54,750 --> 00:37:59,100
that dreese now owns the namespace so we

00:37:57,660 --> 00:38:00,870
could actually have both so we could

00:37:59,100 --> 00:38:04,470
have like an automatic integration with

00:38:00,870 --> 00:38:07,200
drupal.org that pushes the modules to

00:38:04,470 --> 00:38:09,960
packages under like drupal / token and

00:38:07,200 --> 00:38:11,670
drupal / address or whatever and then if

00:38:09,960 --> 00:38:13,080
i just want to push some module to

00:38:11,670 --> 00:38:15,180
github because i don't want to go

00:38:13,080 --> 00:38:17,340
through dupla or whatever i can still

00:38:15,180 --> 00:38:19,230
push it to packages on my name space or

00:38:17,340 --> 00:38:21,390
in my company name space or whatever and

00:38:19,230 --> 00:38:23,820
then still use it with the composer

00:38:21,390 --> 00:38:26,340
workflow so we we could actually have

00:38:23,820 --> 00:38:29,820
all the flexibility but still keep

00:38:26,340 --> 00:38:33,270
drupal.org sort of as a canonical source

00:38:29,820 --> 00:38:35,790
for for our modules and and still have

00:38:33,270 --> 00:38:38,130
that integrate with packages so yeah

00:38:35,790 --> 00:38:40,020
yeah now remember the other idea that

00:38:38,130 --> 00:38:41,130
was to have one package that contains

00:38:40,020 --> 00:38:42,930
different core versions

00:38:41,130 --> 00:38:44,910
in different subfolders maybe and could

00:38:42,930 --> 00:38:48,000
even contain a wordpress extension or

00:38:44,910 --> 00:38:49,920
something so Donna this is with

00:38:48,000 --> 00:38:51,779
composure and then drupa automatically

00:38:49,920 --> 00:38:53,880
finds the right folder where they for

00:38:51,779 --> 00:38:55,349
the correct coercion and a lot of the

00:38:53,880 --> 00:38:59,400
classes might be shared between the

00:38:55,349 --> 00:39:00,900
different extension things but then

00:38:59,400 --> 00:39:02,579
there's some specific stuff that is for

00:39:00,900 --> 00:39:05,400
the specific core version of trooper oh

00:39:02,579 --> 00:39:08,130
you mean like for a module to have like

00:39:05,400 --> 00:39:10,980
both versions of a contributed module in

00:39:08,130 --> 00:39:13,680
the same repo for the same version so

00:39:10,980 --> 00:39:16,529
you download like to point X of token

00:39:13,680 --> 00:39:19,069
and it both has like seven module and a

00:39:16,529 --> 00:39:28,920
d8 module is that what yeah the idea

00:39:19,069 --> 00:39:30,210
okay and it's just yeah yeah I think

00:39:28,920 --> 00:39:33,630
that would solve the semantic versioning

00:39:30,210 --> 00:39:35,160
issue I'm still not sure that's like I

00:39:33,630 --> 00:39:36,779
mean that's maybe something we have to

00:39:35,160 --> 00:39:38,670
discuss that's not something up like

00:39:36,779 --> 00:39:41,640
that's something I would advise strongly

00:39:38,670 --> 00:39:44,220
against but yeah that's maybe a

00:39:41,640 --> 00:39:45,930
discussion we should have nonetheless so

00:39:44,220 --> 00:39:48,089
just a small reminder that tim has

00:39:45,930 --> 00:39:50,480
created boff on thursday at

00:39:48,089 --> 00:39:52,769
eleven-forty-five that we can use to

00:39:50,480 --> 00:39:54,990
continue the discussion I mean as far as

00:39:52,769 --> 00:39:58,019
I'm concerned we have solved the problem

00:39:54,990 --> 00:39:59,579
of the core workflow using composer we

00:39:58,019 --> 00:40:02,279
just need to commit the patch and finish

00:39:59,579 --> 00:40:03,900
it but the other problem that we haven't

00:40:02,279 --> 00:40:05,220
solved and we need to use drupalcon to

00:40:03,900 --> 00:40:08,309
solve is the problem of a drupal

00:40:05,220 --> 00:40:10,829
packages to vs. packages and larry and

00:40:08,309 --> 00:40:13,410
others had a very strong argument

00:40:10,829 --> 00:40:16,079
initially about pushing everything two

00:40:13,410 --> 00:40:18,180
packages mostly for ideological reasons

00:40:16,079 --> 00:40:20,819
but there has also been strong

00:40:18,180 --> 00:40:22,769
opposition since then for more practical

00:40:20,819 --> 00:40:24,960
reasons and we should try and resolve

00:40:22,769 --> 00:40:27,150
those I honestly don't have a horse in

00:40:24,960 --> 00:40:29,670
that race but we should finish drupalcon

00:40:27,150 --> 00:40:31,799
with an answer to that and if we decide

00:40:29,670 --> 00:40:33,359
we want to keep using Drupal packages

00:40:31,799 --> 00:40:35,279
then we need to follow up to actually

00:40:33,359 --> 00:40:41,210
add that repository tour route composer

00:40:35,279 --> 00:40:44,130
JSON file yeah I totally agree i mean we

00:40:41,210 --> 00:40:46,289
to talked a lot about that as well in

00:40:44,130 --> 00:40:49,109
like in the preparation preparation for

00:40:46,289 --> 00:40:50,970
the session and so I think we at least

00:40:49,109 --> 00:40:53,009
we to agree that like in the long run

00:40:50,970 --> 00:40:54,510
actually pushing everything two packages

00:40:53,009 --> 00:40:56,660
is sort of where we want

00:40:54,510 --> 00:40:59,040
be at some point with everything having

00:40:56,660 --> 00:41:01,320
composer Jason and somehow following

00:40:59,040 --> 00:41:03,780
semantic versioning but especially due

00:41:01,320 --> 00:41:06,720
to the versioning issue that's just not

00:41:03,780 --> 00:41:11,550
something we can do in a matter of

00:41:06,720 --> 00:41:13,590
months I guess and so sort of where we

00:41:11,550 --> 00:41:17,280
landed at at our discussion is that

00:41:13,590 --> 00:41:19,410
there's really no way around some some

00:41:17,280 --> 00:41:23,160
Drupal specific version of a packages in

00:41:19,410 --> 00:41:25,380
at least the medium term so but yeah

00:41:23,160 --> 00:41:27,530
that's of course also up to discussion I

00:41:25,380 --> 00:41:27,530
guess

00:41:33,800 --> 00:41:43,570
so other any other questions comments so

00:41:39,950 --> 00:41:47,210
as likely and related observation

00:41:43,570 --> 00:41:49,880
actually earlier was talking with Fargo

00:41:47,210 --> 00:41:53,870
about a completely unrelated topic that

00:41:49,880 --> 00:41:58,040
is being able to replace some core

00:41:53,870 --> 00:42:01,070
classes with other classes by developing

00:41:58,040 --> 00:42:03,140
them in country and then later when they

00:42:01,070 --> 00:42:06,380
are mature enough moving them to core

00:42:03,140 --> 00:42:09,470
and he was bringing up the fact that we

00:42:06,380 --> 00:42:13,520
would need somehow to tie that to the

00:42:09,470 --> 00:42:17,000
actual versions of core and so being

00:42:13,520 --> 00:42:19,400
able to somehow reflect that version in

00:42:17,000 --> 00:42:22,790
the version of the controversial because

00:42:19,400 --> 00:42:25,220
otherwise we wouldn't be able to cleanly

00:42:22,790 --> 00:42:28,820
move them in core and have everything

00:42:25,220 --> 00:42:32,920
working smoothly so I think we could

00:42:28,820 --> 00:42:35,450
have an argument for resolve the

00:42:32,920 --> 00:42:37,790
semantic versioning issue for country

00:42:35,450 --> 00:42:40,250
aside from package East and our side

00:42:37,790 --> 00:42:49,700
from composers so probably we should

00:42:40,250 --> 00:42:51,140
bring them up anyway actually can I ask

00:42:49,700 --> 00:42:54,760
you to come back up i'm not quite sure I

00:42:51,140 --> 00:42:57,650
understand what you're saying they're so

00:42:54,760 --> 00:43:00,940
developing a new version of some core

00:42:57,650 --> 00:43:04,120
service in country you can swap that in

00:43:00,940 --> 00:43:06,650
from a contributor very easily already

00:43:04,120 --> 00:43:08,780
at some point we can move that into core

00:43:06,650 --> 00:43:12,860
cool no problem I'm not sure how

00:43:08,780 --> 00:43:16,700
versioning it's into this question well

00:43:12,860 --> 00:43:19,130
I might have missed some details because

00:43:16,700 --> 00:43:22,250
this is a discussion we have a few

00:43:19,130 --> 00:43:24,530
minutes ago so I might not have it my

00:43:22,250 --> 00:43:27,070
not reported it correctly but actually

00:43:24,530 --> 00:43:30,380
the idea was we were talking about

00:43:27,070 --> 00:43:34,190
replacing actually continent to the

00:43:30,380 --> 00:43:37,220
bases are not random plans okay so

00:43:34,190 --> 00:43:39,560
basically the idea was that there may be

00:43:37,220 --> 00:43:43,070
many module that are already extending

00:43:39,560 --> 00:43:46,170
the base class that in is in core and we

00:43:43,070 --> 00:43:49,380
want to move the new base class in core

00:43:46,170 --> 00:43:51,210
and so we would need to do some fancy

00:43:49,380 --> 00:43:54,770
stuff to make sure that we are not

00:43:51,210 --> 00:43:57,300
breaking everything in the process

00:43:54,770 --> 00:43:58,620
that's why gigantic base classes are a

00:43:57,300 --> 00:44:02,640
bad architectural pattern in the first

00:43:58,620 --> 00:44:04,710
place that's the answer to that I don't

00:44:02,640 --> 00:44:07,260
know what I don't know how composer

00:44:04,710 --> 00:44:10,140
would help with that or I was not

00:44:07,260 --> 00:44:12,900
talking about composer I was I was

00:44:10,140 --> 00:44:16,650
talking about being able able to somehow

00:44:12,900 --> 00:44:19,920
linked the core version which is

00:44:16,650 --> 00:44:24,540
semantics with the country version which

00:44:19,920 --> 00:44:26,220
may not be semantic we would be

00:44:24,540 --> 00:44:28,860
addressing many of the same problem that

00:44:26,220 --> 00:44:31,440
were already brother so you talking

00:44:28,860 --> 00:44:33,510
about like controls that require certain

00:44:31,440 --> 00:44:36,780
core versions yeah that's already

00:44:33,510 --> 00:44:41,250
supported I believe okay well that's how

00:44:36,780 --> 00:44:44,100
do we version how do we version the core

00:44:41,250 --> 00:44:46,650
control in a way that it reflects the

00:44:44,100 --> 00:44:51,930
fact that somehow it's linked to a

00:44:46,650 --> 00:44:55,620
specific core semantic version the the

00:44:51,930 --> 00:44:58,110
diversion requirements requirements

00:44:55,620 --> 00:45:01,680
property in the module info file already

00:44:58,110 --> 00:45:04,170
supports ranges so it can specify this

00:45:01,680 --> 00:45:06,840
version requires this range of core

00:45:04,170 --> 00:45:08,160
version that that already works and you

00:45:06,840 --> 00:45:09,630
can do the same thing composer if you

00:45:08,160 --> 00:45:11,640
wanted to I don't know which one you'd

00:45:09,630 --> 00:45:14,130
want be using at that point ok I will

00:45:11,640 --> 00:45:16,440
think about this I mean I'm aware about

00:45:14,130 --> 00:45:18,660
that I'm probably I need to talk about

00:45:16,440 --> 00:45:20,970
that a bit more with but I was just

00:45:18,660 --> 00:45:24,000
point out that there may be other good

00:45:20,970 --> 00:45:26,280
reasons for thinking about semantic

00:45:24,000 --> 00:45:28,800
versioning aside from composer and

00:45:26,280 --> 00:45:31,080
country okay so well right not that the

00:45:28,800 --> 00:45:33,720
the dependency on like the version

00:45:31,080 --> 00:45:35,580
specific dependency on core only works

00:45:33,720 --> 00:45:38,190
through like the work around like to

00:45:35,580 --> 00:45:40,050
specify dependency on system module and

00:45:38,190 --> 00:45:42,480
then specifying the version there and

00:45:40,050 --> 00:45:44,730
that actually does not support semantic

00:45:42,480 --> 00:45:49,020
versioning so you can just put in like

00:45:44,730 --> 00:45:55,080
system and then like greater than 7 not

00:45:49,020 --> 00:45:56,850
16 or whatever or eight dot 3 but I not

00:45:55,080 --> 00:45:59,630
sure that you can actually put in like

00:45:56,850 --> 00:46:02,460
greater than eight dot three dot 3

00:45:59,630 --> 00:46:04,560
I'm actually like eighty-five percent

00:46:02,460 --> 00:46:11,400
sure that doesn't work but I haven't

00:46:04,560 --> 00:46:13,070
checked in a while so yeah that's true

00:46:11,400 --> 00:46:19,290
it doesn't it doesn't actually do that

00:46:13,070 --> 00:46:21,060
yeah um I kinda want to bring up a

00:46:19,290 --> 00:46:23,520
separate composer versioning issue that

00:46:21,060 --> 00:46:25,260
i'm seeing from from like a testing

00:46:23,520 --> 00:46:28,470
perspective and in the test pots and

00:46:25,260 --> 00:46:33,360
that's once we cut a actual release and

00:46:28,470 --> 00:46:37,140
it's like 80 or 80 1 i'm suggesting that

00:46:33,360 --> 00:46:40,470
the composer json file for core does has

00:46:37,140 --> 00:46:41,790
a range operator for the maximum version

00:46:40,470 --> 00:46:43,590
that was available at the time we cut

00:46:41,790 --> 00:46:45,030
that release because there have been

00:46:43,590 --> 00:46:46,770
times when patch releases of

00:46:45,030 --> 00:46:48,540
dependencies have broken the testing

00:46:46,770 --> 00:46:52,110
infrastructure and so what would happen

00:46:48,540 --> 00:46:55,170
is if we are testing against something

00:46:52,110 --> 00:46:58,410
and then somebody else commits a patch

00:46:55,170 --> 00:47:00,510
to their to their dependency project it

00:46:58,410 --> 00:47:01,770
could break what what we have released

00:47:00,510 --> 00:47:03,450
and so we could say well do blades

00:47:01,770 --> 00:47:05,610
compatible with these versions but it's

00:47:03,450 --> 00:47:07,440
not and so I just was wondering how

00:47:05,610 --> 00:47:10,050
people thought about that if that's a

00:47:07,440 --> 00:47:11,700
good idea or if there's a reason again

00:47:10,050 --> 00:47:13,230
strange operators to say you know this

00:47:11,700 --> 00:47:15,530
is the max version when we cut the

00:47:13,230 --> 00:47:22,260
release that we should accept or

00:47:15,530 --> 00:47:23,760
thoughts on that luck that's sorry

00:47:22,260 --> 00:47:27,300
composer lock will only work for the

00:47:23,760 --> 00:47:29,630
entire project you can't lock core you

00:47:27,300 --> 00:47:32,400
have a lock for the whole project so if

00:47:29,630 --> 00:47:35,840
we were inheriting composers JSON from

00:47:32,400 --> 00:47:35,840
below then there's only one locked file

00:47:37,010 --> 00:47:41,610
for core itself I would be perfectly

00:47:39,960 --> 00:47:43,170
fine not popping with range just saying

00:47:41,610 --> 00:47:45,930
this is the exact patch version that

00:47:43,170 --> 00:47:48,990
core is going to use we bump that in the

00:47:45,930 --> 00:47:51,360
next point release in there next uh yeah

00:47:48,990 --> 00:47:52,920
patch release of Drupal if like there's

00:47:51,360 --> 00:47:54,330
a bug fix or security fix or something

00:47:52,920 --> 00:47:57,060
like that but for core itself I'm

00:47:54,330 --> 00:48:01,050
totally fine just pinning it to you know

00:47:57,060 --> 00:48:04,050
guzzles six dot 0.2 and that's the exact

00:48:01,050 --> 00:48:05,340
version we're going to use no ranges at

00:48:04,050 --> 00:48:09,090
all I think that's totally fine for

00:48:05,340 --> 00:48:10,560
Drupal so in the light of like the

00:48:09,090 --> 00:48:12,020
earlier issue that would basically mean

00:48:10,560 --> 00:48:13,490
because now we have the core

00:48:12,020 --> 00:48:16,880
composer lock so that would basically

00:48:13,490 --> 00:48:19,250
mean remove that and instead have a

00:48:16,880 --> 00:48:25,850
composer dot lock in the root next to

00:48:19,250 --> 00:48:28,100
the root composer Jason or that well

00:48:25,850 --> 00:48:29,570
yeah or sure yeah and I was just

00:48:28,100 --> 00:48:36,170
suggesting a range just in case there

00:48:29,570 --> 00:48:37,100
was a control 602 and Cora had upgrades

00:48:36,170 --> 00:48:38,720
on the next patch release and it

00:48:37,100 --> 00:48:40,040
wouldn't work just two people say well

00:48:38,720 --> 00:48:44,870
it still works with these below but

00:48:40,040 --> 00:48:46,610
here's the max release yeah I mean in

00:48:44,870 --> 00:48:48,800
theory that's like why semantic

00:48:46,610 --> 00:48:50,960
versioning exists so the theory would be

00:48:48,800 --> 00:48:53,540
that you can like we would specify the

00:48:50,960 --> 00:48:55,220
first two operators and then get like

00:48:53,540 --> 00:48:58,400
the patch level releases because there

00:48:55,220 --> 00:49:00,710
shouldn't be any breakage but right so

00:48:58,400 --> 00:49:02,540
I'm not sure that's like a separate

00:49:00,710 --> 00:49:03,860
discussion how how much trust we want to

00:49:02,540 --> 00:49:05,120
put in that and I would totally be fine

00:49:03,860 --> 00:49:07,690
just locking on the version all together

00:49:05,120 --> 00:49:07,690
I mean that's

00:49:29,870 --> 00:49:35,030
I remember there was a question sometime

00:49:32,480 --> 00:49:36,820
discussion about if a quarter body wants

00:49:35,030 --> 00:49:40,040
to depend on something from composer

00:49:36,820 --> 00:49:41,750
third party library it would put that in

00:49:40,040 --> 00:49:43,940
a composer Jason but then you have maybe

00:49:41,750 --> 00:49:46,400
modules and subfolders of the module and

00:49:43,940 --> 00:49:48,140
now the question is this is dependency

00:49:46,400 --> 00:49:50,180
of the module package or of the module

00:49:48,140 --> 00:49:52,180
itself when it's enabled and I think it

00:49:50,180 --> 00:49:55,640
will be of the package I just want to

00:49:52,180 --> 00:49:57,440
clarify that again so it when you

00:49:55,640 --> 00:49:59,960
download the pack module package then

00:49:57,440 --> 00:50:02,270
you have the dependency yeah it's not

00:49:59,960 --> 00:50:05,840
when you enable them I think we we could

00:50:02,270 --> 00:50:08,840
try to support composer Jason's in

00:50:05,840 --> 00:50:11,480
sub-projects but it's just a new car

00:50:08,840 --> 00:50:13,490
kind of warms we oh yeah and composer

00:50:11,480 --> 00:50:17,060
it's always package based and if you

00:50:13,490 --> 00:50:20,000
want to have ships this something to

00:50:17,060 --> 00:50:21,890
separate then you should have you need

00:50:20,000 --> 00:50:23,780
to have a sub tree split but composite

00:50:21,890 --> 00:50:26,510
doesn't support repositories with

00:50:23,780 --> 00:50:28,790
multiple Jason fires it just doesn't

00:50:26,510 --> 00:50:32,120
work it's it's part of the main module

00:50:28,790 --> 00:50:34,130
because its hide the chance is very high

00:50:32,120 --> 00:50:37,760
that you if you use the sub module that

00:50:34,130 --> 00:50:41,030
you all also use the other module so I

00:50:37,760 --> 00:50:43,100
guess it's okay to make it in the root

00:50:41,030 --> 00:50:44,660
of do project yeah I was just thinking

00:50:43,100 --> 00:50:46,550
about some others have their dislike the

00:50:44,660 --> 00:50:48,890
suit of modules and only one sub module

00:50:46,550 --> 00:50:50,720
might depend on a specific composer a

00:50:48,890 --> 00:50:52,070
third party thing and then we have to

00:50:50,720 --> 00:50:53,510
option that the one option is just to

00:50:52,070 --> 00:50:55,070
make the entire package depend on that

00:50:53,510 --> 00:50:56,720
the other option would be that you have

00:50:55,070 --> 00:50:58,760
to manually add this to your route

00:50:56,720 --> 00:51:01,280
composite Jason yeah and then only then

00:50:58,760 --> 00:51:03,500
you can enable this sub- for example we

00:51:01,280 --> 00:51:05,480
could at the composer chase into the sub

00:51:03,500 --> 00:51:07,550
module and then you just used a composer

00:51:05,480 --> 00:51:11,030
merge plug-in to use to merge in this

00:51:07,550 --> 00:51:12,620
specific module when you need it yeah

00:51:11,030 --> 00:51:14,720
but then the composer merge begin

00:51:12,620 --> 00:51:16,220
wouldn't it what other composer builds

00:51:14,720 --> 00:51:17,900
thing would need to know which mode you

00:51:16,220 --> 00:51:19,580
are going to enable and I thought maybe

00:51:17,900 --> 00:51:21,290
it's easier to just then have you have

00:51:19,580 --> 00:51:23,360
to manually edit to the root composer

00:51:21,290 --> 00:51:30,530
Jason and only then you can enable a

00:51:23,360 --> 00:51:31,970
sub-module no better alternative please

00:51:30,530 --> 00:51:33,980
just stop putting multiple modules in

00:51:31,970 --> 00:51:36,530
the same package just don't do it it

00:51:33,980 --> 00:51:39,050
made sense about seven years ago it

00:51:36,530 --> 00:51:40,850
doesn't anymore just stop there there's

00:51:39,050 --> 00:51:42,350
extremely few use cases for it and

00:51:40,850 --> 00:51:43,400
causes way too many problems if we don't

00:51:42,350 --> 00:51:48,619
do that this whole problem goes

00:51:43,400 --> 00:51:50,660
way yeah the UI modules to be perfectly

00:51:48,619 --> 00:51:51,829
honest I think there's maybe four in all

00:51:50,660 --> 00:51:55,220
of Drupal that have a legitimate reason

00:51:51,829 --> 00:51:57,079
to have one that's it and those can just

00:51:55,220 --> 00:52:00,099
go to a separate actual model at that

00:51:57,079 --> 00:52:00,099

YouTube URL: https://www.youtube.com/watch?v=s73GKa4xWLE


