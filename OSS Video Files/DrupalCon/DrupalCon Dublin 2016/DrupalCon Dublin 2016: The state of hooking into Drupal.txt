Title: DrupalCon Dublin 2016: The state of hooking into Drupal
Publication date: 2016-09-27
Playlist: DrupalCon Dublin 2016
Description: 
	Major portion of drupal development has been about hooks. We have all used them. But there have been talks about replacing the procedural hook system in Drupal with its Object oriented version - Events. We are already on the track and we, as of now, are required to use Events for many things in Drupal 8. 

This session will mainly elustrate:

How hooks work in Drupal. 
How we are on the track of moving from hooks to Events in Drupal 8
Where we are? What all do we need Events for and where we are still stuck with hooks.
When to alter and when to fire an event.
How to create and dispatch an Event from your module.
How to listen or subscribe to an Event from your custom Event or an event from core.
How to expose custom hooks in Drupal 8.

Attendees should be familiar with:
Basic Drupal 8 module development.
Basic OOP principles and practices.
Symfony components used in D8.
   After attending this session attendees will be able to:

Create their custom events in Drupal 8
Subscribe to the events from core and other modules and to their custom events too.
Will have a knowledge of where to explore the events and where we have to still use hooks.
Captions: 
	00:00:00,000 --> 00:00:07,350
so my session is about the state of

00:00:04,589 --> 00:00:11,840
hooking into trouble there are talks

00:00:07,350 --> 00:00:14,820
that you know we are slightly slowly a

00:00:11,840 --> 00:00:17,660
moving from hooks the procedural hook

00:00:14,820 --> 00:00:22,550
system to object-oriented hook system

00:00:17,660 --> 00:00:25,560
that we have technically a you know

00:00:22,550 --> 00:00:27,599
borrowed from symphony I would say we

00:00:25,560 --> 00:00:30,019
would be using a symphony to event

00:00:27,599 --> 00:00:34,350
dispatcher component for hooks in Drupal

00:00:30,019 --> 00:00:36,750
so we're already on the track how soon

00:00:34,350 --> 00:00:40,050
we can get there would mainly depend on

00:00:36,750 --> 00:00:42,660
the effort and prioritization of this

00:00:40,050 --> 00:00:47,420
thing by the community so there are many

00:00:42,660 --> 00:00:50,129
other more important and I would say

00:00:47,420 --> 00:00:52,590
yeah important issues that need to be

00:00:50,129 --> 00:00:56,190
taken care of right now so this may not

00:00:52,590 --> 00:00:58,789
get that much of an importance but it

00:00:56,190 --> 00:01:02,430
surely a will get there we would

00:00:58,789 --> 00:01:05,010
eventually have the traditional hook

00:01:02,430 --> 00:01:11,970
system replaced with the object oriented

00:01:05,010 --> 00:01:14,909
event system so a be brief intro or

00:01:11,970 --> 00:01:18,869
about Who I am my name is Matthias

00:01:14,909 --> 00:01:21,240
militia I am a developer at aquia it's

00:01:18,869 --> 00:01:24,600
been two years now that haven't been

00:01:21,240 --> 00:01:28,470
with acquia I left college and straight

00:01:24,600 --> 00:01:31,020
joined archaea this is my contact info I

00:01:28,470 --> 00:01:37,470
crumb from a beautiful place it's

00:01:31,020 --> 00:01:41,340
Kashmir in South Asia so I i encourage

00:01:37,470 --> 00:01:44,060
you to visit us read about it we have a

00:01:41,340 --> 00:01:47,299
Drupal community Drupal Kashmir as well

00:01:44,060 --> 00:01:53,070
google it and find ways you can come and

00:01:47,299 --> 00:01:56,340
contribute so an overview into what I am

00:01:53,070 --> 00:01:58,890
going to be talking about ah everything

00:01:56,340 --> 00:02:04,790
should be pretty simple we'd basically

00:01:58,890 --> 00:02:08,099
be looking into what hooks are and oh

00:02:04,790 --> 00:02:11,580
why they were used and when do we use

00:02:08,099 --> 00:02:14,510
hooks and what for then we'd move to a

00:02:11,580 --> 00:02:23,519
state where we are currently

00:02:14,510 --> 00:02:27,830
what yeah what's up what's up with hooks

00:02:23,519 --> 00:02:31,140
and what about events since we are using

00:02:27,830 --> 00:02:34,200
events for some things in Drupal 8 we'd

00:02:31,140 --> 00:02:36,720
be looking at how we can do that for our

00:02:34,200 --> 00:02:39,090
custom things and what all we can

00:02:36,720 --> 00:02:42,420
achieve with events right now and where

00:02:39,090 --> 00:02:45,090
we are still using hooks in v8 then we'd

00:02:42,420 --> 00:02:47,580
also be exploring a bit about Symphony

00:02:45,090 --> 00:02:53,970
event dispatcher you know basically the

00:02:47,580 --> 00:02:56,940
same thing how we can not sure how we

00:02:53,970 --> 00:03:01,110
can use and explore the symphony event

00:02:56,940 --> 00:03:04,500
dispatcher component with v8 and then as

00:03:01,110 --> 00:03:06,599
I mentioned we are not yet there there

00:03:04,500 --> 00:03:09,810
are still hooks are still there in v8

00:03:06,599 --> 00:03:12,630
then if you really don't like symphony

00:03:09,810 --> 00:03:15,540
or you don't like object oriented for

00:03:12,630 --> 00:03:18,870
reasons I cannot imagine then you can

00:03:15,540 --> 00:03:23,000
still use hooks in the eighth we'd be

00:03:18,870 --> 00:03:26,220
looking at that as well so mainly a

00:03:23,000 --> 00:03:28,230
transition from Drupal 7 to Drupal 8 has

00:03:26,220 --> 00:03:31,470
been interesting there have been a lot

00:03:28,230 --> 00:03:35,430
of changes for developers basically it

00:03:31,470 --> 00:03:37,200
is i think this talk is you know the

00:03:35,430 --> 00:03:39,209
benefits of moving from symphony event

00:03:37,200 --> 00:03:41,010
dispatcher sorry moving from hooks to

00:03:39,209 --> 00:03:43,109
event dispatcher component is more about

00:03:41,010 --> 00:03:47,069
developer experience so there are not

00:03:43,109 --> 00:03:50,880
too many you know benefits on the user

00:03:47,069 --> 00:03:53,489
front or not i guess we cannot think of

00:03:50,880 --> 00:03:56,359
any you know performance reasons or

00:03:53,489 --> 00:04:00,209
something like that but certainly

00:03:56,359 --> 00:04:03,660
developer experience has experienced in

00:04:00,209 --> 00:04:05,790
a way so drupal 7 to drupal a journey

00:04:03,660 --> 00:04:08,310
has been a procedural to object-oriented

00:04:05,790 --> 00:04:10,200
way we have imported or used symphony

00:04:08,310 --> 00:04:13,739
components dependency injection service

00:04:10,200 --> 00:04:17,039
container and event dispatcher component

00:04:13,739 --> 00:04:19,289
code has been the lotto you know a more

00:04:17,039 --> 00:04:23,700
modular innovate rupal itself is a

00:04:19,289 --> 00:04:26,400
modular system but now we have a sort of

00:04:23,700 --> 00:04:27,380
mood from making drupal modular to

00:04:26,400 --> 00:04:30,650
making our module

00:04:27,380 --> 00:04:32,810
modular and eventually we are now

00:04:30,650 --> 00:04:35,330
writing cleaner code and we have

00:04:32,810 --> 00:04:39,590
enhanced developer experience as a

00:04:35,330 --> 00:04:43,940
result so some things that have changed

00:04:39,590 --> 00:04:46,340
are like we have dependency injection

00:04:43,940 --> 00:04:48,920
four core services we have event

00:04:46,340 --> 00:04:50,950
subscribers for hooks we can now write

00:04:48,920 --> 00:04:53,210
portable code with the introduction of

00:04:50,950 --> 00:04:55,700
services and with the introduction of

00:04:53,210 --> 00:04:57,530
dependency injection we can use other

00:04:55,700 --> 00:05:00,290
people's code we don't have to worry

00:04:57,530 --> 00:05:03,920
about writing our own you know stuff

00:05:00,290 --> 00:05:06,920
complex stuff there are a lot of you

00:05:03,920 --> 00:05:09,980
know non Drupal stuff non Drupal people

00:05:06,920 --> 00:05:12,710
who have created so many awesome things

00:05:09,980 --> 00:05:17,720
that we can simply use with services now

00:05:12,710 --> 00:05:20,720
in our systems we can as I said use code

00:05:17,720 --> 00:05:24,650
from somewhere else and unlike Drupal

00:05:20,720 --> 00:05:28,310
hooks we can now write events that can

00:05:24,650 --> 00:05:30,530
be you know unit tested so we can have

00:05:28,310 --> 00:05:33,050
objects and we can have mocked objects

00:05:30,530 --> 00:05:34,790
mock dependencies which can help us

00:05:33,050 --> 00:05:39,230
write better unit tests which certainly

00:05:34,790 --> 00:05:41,200
wasn't possible with Drupal 7 so we'd be

00:05:39,230 --> 00:05:43,970
starting with looking into hooks a bit

00:05:41,200 --> 00:05:48,680
where we have come from what purpose did

00:05:43,970 --> 00:05:51,770
hook serve and how they were executed so

00:05:48,680 --> 00:05:55,310
we could then compare it with event

00:05:51,770 --> 00:05:57,410
dispatcher component so this is exactly

00:05:55,310 --> 00:05:59,960
I was while researching about this talk

00:05:57,410 --> 00:06:02,150
I was going through a previous talks as

00:05:59,960 --> 00:06:05,020
well so there was a talk by Kim pepper

00:06:02,150 --> 00:06:08,000
in Drupal Kenisha so he mentioned this

00:06:05,020 --> 00:06:09,920
particular comment by trees in two

00:06:08,000 --> 00:06:12,290
thousand when he was you know when he

00:06:09,920 --> 00:06:16,010
started this hook system the concept of

00:06:12,290 --> 00:06:19,330
folk system the idea i think is to you

00:06:16,010 --> 00:06:23,210
know be couple components to be able to

00:06:19,330 --> 00:06:26,540
sort of through through the life cycle

00:06:23,210 --> 00:06:29,060
of the program to be able to run our

00:06:26,540 --> 00:06:32,530
custom code run certain snippets of code

00:06:29,060 --> 00:06:36,590
at certain stages or at certain events

00:06:32,530 --> 00:06:39,260
to be able to decouple our event

00:06:36,590 --> 00:06:40,820
triggering mechanism from the event

00:06:39,260 --> 00:06:42,350
listener so to make

00:06:40,820 --> 00:06:45,530
them separate components that is the

00:06:42,350 --> 00:06:49,910
basic idea of the hook system that hook

00:06:45,530 --> 00:06:53,060
system was started with so to extend a

00:06:49,910 --> 00:06:56,090
you know to extend your functionality or

00:06:53,060 --> 00:06:59,210
your custom module would simply need to

00:06:56,090 --> 00:07:01,520
implement a hook and when Drupal wishes

00:06:59,210 --> 00:07:03,860
to allow intervention like when core

00:07:01,520 --> 00:07:05,900
wishes to allow an intervention or when

00:07:03,860 --> 00:07:07,880
you as a module developer want other

00:07:05,900 --> 00:07:09,650
module developers to intervene into your

00:07:07,880 --> 00:07:12,200
code order to extend your functionality

00:07:09,650 --> 00:07:15,230
you declare a hook and then the other

00:07:12,200 --> 00:07:17,720
module developers can hook into yours

00:07:15,230 --> 00:07:23,090
module or we can hook into code by

00:07:17,720 --> 00:07:26,600
implementing those hooks so hooks are

00:07:23,090 --> 00:07:29,150
basically a discovered in the module

00:07:26,600 --> 00:07:32,530
file they are triggered by a naming

00:07:29,150 --> 00:07:35,570
convention mechanism you basically

00:07:32,530 --> 00:07:37,880
declare a name and then you know prepend

00:07:35,570 --> 00:07:40,070
it with your module name and then

00:07:37,880 --> 00:07:43,640
whenever whichever module calls your

00:07:40,070 --> 00:07:45,110
function name cause that calls a funk in

00:07:43,640 --> 00:07:47,900
plement some function with that name

00:07:45,110 --> 00:07:50,900
prepend sit with their module name

00:07:47,900 --> 00:07:54,640
drupal will call it we look into how

00:07:50,900 --> 00:07:58,490
that happens and how it is happening now

00:07:54,640 --> 00:08:02,650
so basically a there are many types of

00:07:58,490 --> 00:08:05,330
folks well that is not a clear you know

00:08:02,650 --> 00:08:07,930
classification of folks done anywhere

00:08:05,330 --> 00:08:10,970
but I've tried to you know you know

00:08:07,930 --> 00:08:13,790
generalize a bit info hooks which are

00:08:10,970 --> 00:08:16,220
used to declare metadata as you can you

00:08:13,790 --> 00:08:20,590
know remember we have hope we used to

00:08:16,220 --> 00:08:25,940
have hook block info and hook block you

00:08:20,590 --> 00:08:30,590
like things so those info hooks I think

00:08:25,940 --> 00:08:33,530
now we have gotten rid of them nd8 we

00:08:30,590 --> 00:08:36,530
have sort of removed all the info hooks

00:08:33,530 --> 00:08:40,039
and this talk is mainly going to be

00:08:36,530 --> 00:08:43,520
about alter hooks which were a common

00:08:40,039 --> 00:08:46,040
way to sort of you know let a module

00:08:43,520 --> 00:08:48,350
developers to extend your functionality

00:08:46,040 --> 00:08:51,470
or in a way alter your data whatever

00:08:48,350 --> 00:08:53,150
data you were able to greet you had

00:08:51,470 --> 00:08:54,440
within your system and then if you

00:08:53,150 --> 00:08:56,270
wanted to if you

00:08:54,440 --> 00:08:58,490
the module developers to intervene into

00:08:56,270 --> 00:09:02,810
your code or change that data you used

00:08:58,490 --> 00:09:04,940
to have alta hooks fine one fine example

00:09:02,810 --> 00:09:07,610
could be a for Malta wherein you could

00:09:04,940 --> 00:09:09,920
you had a form array and then you were

00:09:07,610 --> 00:09:11,930
able to you know you you were able to

00:09:09,920 --> 00:09:13,730
hook into other people's forms and you

00:09:11,930 --> 00:09:18,080
were able to let more other module

00:09:13,730 --> 00:09:23,240
developers who can do your phones so the

00:09:18,080 --> 00:09:25,910
way we can create hoaxes we have to

00:09:23,240 --> 00:09:28,040
decide a hook name and then we in our

00:09:25,910 --> 00:09:30,470
modules and this is what core is also

00:09:28,040 --> 00:09:32,810
doing module invoke all this is the

00:09:30,470 --> 00:09:35,600
famous function this is how hooks get

00:09:32,810 --> 00:09:38,540
executed what we need to do is module

00:09:35,600 --> 00:09:40,730
invoke all name so whenever the bean

00:09:38,540 --> 00:09:43,070
just if we have a hook you know we

00:09:40,730 --> 00:09:46,940
decide on something some name we have

00:09:43,070 --> 00:09:49,880
hooked whatever so if we call module

00:09:46,940 --> 00:09:52,460
invoke all it would go it would find all

00:09:49,880 --> 00:09:55,340
the enabled modules in your system and

00:09:52,460 --> 00:09:58,640
call them call all of those implemented

00:09:55,340 --> 00:10:01,790
functions module invoke all would find

00:09:58,640 --> 00:10:04,010
all the enabled module enabled modules

00:10:01,790 --> 00:10:06,950
of your site and then execute all those

00:10:04,010 --> 00:10:08,930
functions but if you want to execute a

00:10:06,950 --> 00:10:10,820
particular execute your hook from a

00:10:08,930 --> 00:10:12,980
particular module then you would need to

00:10:10,820 --> 00:10:15,440
call module invoke than module name and

00:10:12,980 --> 00:10:18,440
name this is basically what's going on

00:10:15,440 --> 00:10:21,350
in be seven or what I can say what used

00:10:18,440 --> 00:10:24,050
to go on and a seven there's also a

00:10:21,350 --> 00:10:26,090
Drupal alter that was talking about you

00:10:24,050 --> 00:10:29,570
would basically need to do the same

00:10:26,090 --> 00:10:31,850
thing describe you know sort of decide

00:10:29,570 --> 00:10:34,910
your hook name that would be my data and

00:10:31,850 --> 00:10:36,950
then you would pass in an array of data

00:10:34,910 --> 00:10:39,890
that you would want the users or

00:10:36,950 --> 00:10:42,740
developers to alter then the users would

00:10:39,890 --> 00:10:44,330
implement hook my data altar and then

00:10:42,740 --> 00:10:48,190
they would get this data array as an

00:10:44,330 --> 00:10:51,680
argument and then they could change that

00:10:48,190 --> 00:10:53,150
this is how the naming convention

00:10:51,680 --> 00:10:56,150
mechanism that I was talking about

00:10:53,150 --> 00:10:59,180
earlier this is how a d7 does it the

00:10:56,150 --> 00:11:03,350
hook system if you can you know see the

00:10:59,180 --> 00:11:06,430
return of sort sorry return call user

00:11:03,350 --> 00:11:08,089
func array basically we are you know

00:11:06,430 --> 00:11:10,550
deciding

00:11:08,089 --> 00:11:12,529
creating the function name here module

00:11:10,550 --> 00:11:14,600
prepending it with the module name and

00:11:12,529 --> 00:11:17,120
then a hyphen and then your hook name

00:11:14,600 --> 00:11:18,319
and then Drupal is calling all those

00:11:17,120 --> 00:11:22,249
functions and providing it with

00:11:18,319 --> 00:11:25,069
arguments similarly with Drupal alter as

00:11:22,249 --> 00:11:27,499
well we are just dollar hook and the

00:11:25,069 --> 00:11:30,589
dollar type is your module name and then

00:11:27,499 --> 00:11:33,680
sorry dollar type is your hook name that

00:11:30,589 --> 00:11:39,259
you pass in that you would pass in here

00:11:33,680 --> 00:11:41,059
my data and then alter would be appended

00:11:39,259 --> 00:11:45,110
to it and then it would be passed in

00:11:41,059 --> 00:11:49,100
your data array an interesting thing

00:11:45,110 --> 00:11:52,129
would be was to you know manage the

00:11:49,100 --> 00:11:56,269
order of execution of your hooks in d7

00:11:52,129 --> 00:11:59,420
so again the what B rupal used to do is

00:11:56,269 --> 00:12:01,699
use its own hook system to decide the

00:11:59,420 --> 00:12:05,059
order of execution of it soaks so we

00:12:01,699 --> 00:12:06,949
used to create a Drupal alter module

00:12:05,059 --> 00:12:10,339
implements and then pass in the array of

00:12:06,949 --> 00:12:15,259
implementation array of the hooks or you

00:12:10,339 --> 00:12:18,800
know this implementation array has it

00:12:15,259 --> 00:12:21,679
has all the hooks mentioned in it keyed

00:12:18,800 --> 00:12:23,990
by the module name so basically if you

00:12:21,679 --> 00:12:26,959
wanted to alter the execution if you

00:12:23,990 --> 00:12:28,759
wanted your module to your hook from

00:12:26,959 --> 00:12:30,529
your module to run before another module

00:12:28,759 --> 00:12:32,120
so you would go to this area you would

00:12:30,529 --> 00:12:34,819
implement this hook module implements

00:12:32,120 --> 00:12:39,259
and you would unset your module and set

00:12:34,819 --> 00:12:41,600
your unset the element you know keyed by

00:12:39,259 --> 00:12:43,100
your module name and then you would

00:12:41,600 --> 00:12:45,379
append it to the last so that your

00:12:43,100 --> 00:12:49,689
module execute your the hook from your

00:12:45,379 --> 00:12:52,069
module gets executed loss so the state

00:12:49,689 --> 00:12:55,999
this would be mainly about where we are

00:12:52,069 --> 00:12:58,040
all the info hooks are gone info hooks

00:12:55,999 --> 00:13:00,740
are replaced with either annotations or

00:12:58,040 --> 00:13:03,620
EML files as you can see in hook block

00:13:00,740 --> 00:13:07,730
info we have an annotation block that

00:13:03,620 --> 00:13:10,879
replaces the hook block info who can it

00:13:07,730 --> 00:13:14,379
hook exit boot are gone ulta hooks are

00:13:10,879 --> 00:13:18,110
still there for Moltres and other alters

00:13:14,379 --> 00:13:21,710
they will be with are likely to be

00:13:18,110 --> 00:13:23,660
replaced with event listeners I can say

00:13:21,710 --> 00:13:25,130
there are some group indeed auto issues

00:13:23,660 --> 00:13:27,800
that are you know have these

00:13:25,130 --> 00:13:31,430
conversations going on to prioritize

00:13:27,800 --> 00:13:34,010
this you know transition from a hook

00:13:31,430 --> 00:13:35,750
system to event system eventually but

00:13:34,010 --> 00:13:38,450
then that would be up to the you know

00:13:35,750 --> 00:13:41,750
effort that community gives and the

00:13:38,450 --> 00:13:44,270
progress of those issue cues we can you

00:13:41,750 --> 00:13:47,810
know that way we can I think you know

00:13:44,270 --> 00:13:53,870
get an answer to when we would be able

00:13:47,810 --> 00:13:57,730
to finally replace the hook system with

00:13:53,870 --> 00:13:57,730
the event dispatcher component

00:14:11,470 --> 00:14:17,290
what's wrong and why do we need to

00:14:14,080 --> 00:14:20,170
change from hooks so basically a hook

00:14:17,290 --> 00:14:23,170
block info block hooks are a perfect

00:14:20,170 --> 00:14:25,630
example of you know to analyze what's

00:14:23,170 --> 00:14:28,300
wrong so we have four blocks infoview

00:14:25,630 --> 00:14:30,250
configure and save whenever we want to

00:14:28,300 --> 00:14:32,740
declare the block we have these two

00:14:30,250 --> 00:14:34,660
required hooks hook block info and hook

00:14:32,740 --> 00:14:37,180
block view but then out of these four

00:14:34,660 --> 00:14:39,400
hooks you know we are you know it's not

00:14:37,180 --> 00:14:41,950
clear as to what's really required to

00:14:39,400 --> 00:14:44,950
implement up now to declare your own

00:14:41,950 --> 00:14:48,940
block which is something that we have

00:14:44,950 --> 00:14:52,180
managed to do away with in d8 we have we

00:14:48,940 --> 00:14:54,970
have a block interface blocks have been

00:14:52,180 --> 00:14:57,040
Macek basically managed by plugins in d8

00:14:54,970 --> 00:14:58,810
we have a block interface and then we

00:14:57,040 --> 00:15:01,000
have build array if you want to that

00:14:58,810 --> 00:15:03,880
would determine the output of the blog

00:15:01,000 --> 00:15:06,610
and we if you need a configuration form

00:15:03,880 --> 00:15:08,740
of your blog then you have this function

00:15:06,610 --> 00:15:12,820
within your interface block form within

00:15:08,740 --> 00:15:14,590
your Vblock base object and you have

00:15:12,820 --> 00:15:22,150
this submit function as well for your

00:15:14,590 --> 00:15:23,680
block form also it's always you know

00:15:22,150 --> 00:15:26,110
preferred for a better developer

00:15:23,680 --> 00:15:29,140
experience to have object oriented code

00:15:26,110 --> 00:15:32,550
that way your code is you know as I

00:15:29,140 --> 00:15:36,130
already said remains highly modular and

00:15:32,550 --> 00:15:38,320
we are able to write unit tests we are

00:15:36,130 --> 00:15:40,600
able to better decoupler components

00:15:38,320 --> 00:15:44,230
suppose if you have a form submit

00:15:40,600 --> 00:15:46,630
function and if you want to do so many

00:15:44,230 --> 00:15:48,790
things with your the collected data from

00:15:46,630 --> 00:15:50,170
your form you want to email them to

00:15:48,790 --> 00:15:52,330
someone you want to save them to

00:15:50,170 --> 00:15:54,610
database you don't have to worry about

00:15:52,330 --> 00:15:56,980
how to get the database connection and

00:15:54,610 --> 00:15:59,470
how to store that to the how to store

00:15:56,980 --> 00:16:02,650
that value to the database actually and

00:15:59,470 --> 00:16:04,420
with you know object-oriented with this

00:16:02,650 --> 00:16:08,680
decoupling possible now you don't have

00:16:04,420 --> 00:16:10,930
to worry about managing your mailer or

00:16:08,680 --> 00:16:13,960
something you don't have to worry about

00:16:10,930 --> 00:16:16,810
how we can email that to only thing with

00:16:13,960 --> 00:16:19,360
only thing you need to worry about is

00:16:16,810 --> 00:16:20,920
your form getting submitted your submit

00:16:19,360 --> 00:16:25,120
handler only needs to worry about

00:16:20,920 --> 00:16:28,000
submitting your form so that basically

00:16:25,120 --> 00:16:31,150
gives us better code reuse as well we do

00:16:28,000 --> 00:16:33,700
not have to duplicate a duplicate code

00:16:31,150 --> 00:16:35,770
basically we have so many hooks that are

00:16:33,700 --> 00:16:39,730
you know eventually doing the same

00:16:35,770 --> 00:16:41,470
things so once we have decided on some

00:16:39,730 --> 00:16:43,600
basic configuration we can you know

00:16:41,470 --> 00:16:50,050
reuse the code by extending our objects

00:16:43,600 --> 00:16:53,260
and stuff and also we can you know we

00:16:50,050 --> 00:16:55,810
have with object-oriented we can mock or

00:16:53,260 --> 00:16:59,670
test we can mock our objects and then

00:16:55,810 --> 00:17:04,300
give better room for unit tests as well

00:16:59,670 --> 00:17:06,550
so what there's some simple comparison

00:17:04,300 --> 00:17:10,079
between events and hooks events are

00:17:06,550 --> 00:17:14,110
obviously object-oriented easy to write

00:17:10,079 --> 00:17:16,329
extensible code and one thing that was

00:17:14,110 --> 00:17:20,800
not possible clearly not possible with

00:17:16,329 --> 00:17:23,920
her b7 hooks was that or d8 hooks as

00:17:20,800 --> 00:17:26,829
well was to stop propagation of a

00:17:23,920 --> 00:17:30,010
particular event from going further you

00:17:26,829 --> 00:17:32,290
had no control over you know I am

00:17:30,010 --> 00:17:34,990
deciding on when to stop a hook

00:17:32,290 --> 00:17:37,900
implementation so we were not able to

00:17:34,990 --> 00:17:40,570
fire a hook twice for some reasons I

00:17:37,900 --> 00:17:42,280
mean if we ever need to fire a fire a

00:17:40,570 --> 00:17:44,620
hook twice we are not able to do that

00:17:42,280 --> 00:17:47,380
now with events we can do that and we

00:17:44,620 --> 00:17:50,590
have loosely coupled implementation of a

00:17:47,380 --> 00:17:53,260
event system now reusability and also

00:17:50,590 --> 00:17:56,920
services with the inclusion of services

00:17:53,260 --> 00:17:59,800
and object-oriented code are we can now

00:17:56,920 --> 00:18:02,650
inject services into our event handlers

00:17:59,800 --> 00:18:04,570
into our event dispatchers and even into

00:18:02,650 --> 00:18:07,450
our event listeners and we could you

00:18:04,570 --> 00:18:09,880
know sort of explore the possibilities

00:18:07,450 --> 00:18:18,030
with about what we could achieve with

00:18:09,880 --> 00:18:18,030
that do we have any questions so far

00:18:21,649 --> 00:18:29,909
events are moving to the events section

00:18:24,659 --> 00:18:32,760
of an event is an action or an

00:18:29,909 --> 00:18:35,970
occurrence recognized by a software and

00:18:32,760 --> 00:18:38,250
handled by a software so this is a basic

00:18:35,970 --> 00:18:41,669
I think a simpler definition of defining

00:18:38,250 --> 00:18:46,230
events the concept is I think same as

00:18:41,669 --> 00:18:50,880
that of hoke system but as I said with a

00:18:46,230 --> 00:18:56,570
better developer experience now we have

00:18:50,880 --> 00:18:58,980
this event system so events a part of

00:18:56,570 --> 00:19:00,690
the symphony framework simply to

00:18:58,980 --> 00:19:02,429
component the allow for different

00:19:00,690 --> 00:19:04,440
components of the system to interact

00:19:02,429 --> 00:19:07,200
with interact and communicate with each

00:19:04,440 --> 00:19:09,690
other object-oriented way of interaction

00:19:07,200 --> 00:19:11,580
with code and your custom modules i

00:19:09,690 --> 00:19:14,549
would say basically events are an

00:19:11,580 --> 00:19:16,799
implementation of events or hooks i can

00:19:14,549 --> 00:19:19,080
say as well are an implementation of a

00:19:16,799 --> 00:19:22,470
mediator pattern that i may be explained

00:19:19,080 --> 00:19:26,100
that i would be explaining further and

00:19:22,470 --> 00:19:28,860
we have control basically uses the

00:19:26,100 --> 00:19:30,990
container revere dispatcher that means

00:19:28,860 --> 00:19:34,649
your event dispatcher are always seen

00:19:30,990 --> 00:19:36,570
through your container so basically you

00:19:34,649 --> 00:19:38,940
have access to all the core services

00:19:36,570 --> 00:19:42,630
that you can you know instantiate with

00:19:38,940 --> 00:19:44,760
the help of the container so as I said

00:19:42,630 --> 00:19:47,309
again better a code extra code

00:19:44,760 --> 00:19:50,399
extensibility and with the use of

00:19:47,309 --> 00:19:54,210
services within the events we can do

00:19:50,399 --> 00:19:57,840
wonders with this event subscriber sort

00:19:54,210 --> 00:19:59,909
of event dispatcher component so the

00:19:57,840 --> 00:20:02,580
mediator pattern I think this is a

00:19:59,909 --> 00:20:05,880
perfect example of the decoupling we

00:20:02,580 --> 00:20:09,840
could achieve with the events suppose we

00:20:05,880 --> 00:20:13,350
have this you know radar thing at the

00:20:09,840 --> 00:20:16,470
airports and your airplanes continuously

00:20:13,350 --> 00:20:18,269
landing and taking off they do not need

00:20:16,470 --> 00:20:20,130
to interact with each other they do not

00:20:18,269 --> 00:20:21,960
need to you know check in which plane is

00:20:20,130 --> 00:20:24,659
landing and which plane is taking off

00:20:21,960 --> 00:20:27,240
and to avoid collisions and stuff they

00:20:24,659 --> 00:20:31,769
are only have to interact with the main

00:20:27,240 --> 00:20:35,250
radar and then the radar decides has a

00:20:31,769 --> 00:20:37,350
function to decide on which 12

00:20:35,250 --> 00:20:39,690
you know which plane could land and

00:20:37,350 --> 00:20:42,960
which plane can take off at a particular

00:20:39,690 --> 00:20:46,800
time so the intent of mediator pattern

00:20:42,960 --> 00:20:50,220
is to encapsulate a how a set of objects

00:20:46,800 --> 00:20:53,880
interact and to the basically a d couple

00:20:50,220 --> 00:20:55,830
then from each other that they that a

00:20:53,880 --> 00:20:59,190
particular object has a defined

00:20:55,830 --> 00:21:01,380
functionality that any a plane I would

00:20:59,190 --> 00:21:02,760
say has a functionality of taking off or

00:21:01,380 --> 00:21:06,120
landing it doesn't have to worry about

00:21:02,760 --> 00:21:13,170
if it may collide with another plane or

00:21:06,120 --> 00:21:15,990
something so we now I guess look into

00:21:13,170 --> 00:21:20,520
creating and subscribing to events how

00:21:15,990 --> 00:21:23,280
we can subscribe to already exposed or

00:21:20,520 --> 00:21:25,920
already x already fired event and how we

00:21:23,280 --> 00:21:29,370
can create our own events that other

00:21:25,920 --> 00:21:33,090
modules can subscribe to so what we need

00:21:29,370 --> 00:21:35,730
is the context I think we're in we can

00:21:33,090 --> 00:21:39,270
decide that I have an array or I am at a

00:21:35,730 --> 00:21:41,490
particular stage in a module or in a

00:21:39,270 --> 00:21:43,980
program and I want other module

00:21:41,490 --> 00:21:46,410
developers to intervene into my system

00:21:43,980 --> 00:21:48,900
so we need the basic logic where and we

00:21:46,410 --> 00:21:51,720
can decide I need to fire an event for

00:21:48,900 --> 00:21:54,450
this then we basically dispatch the

00:21:51,720 --> 00:21:57,200
event and then other modules can listen

00:21:54,450 --> 00:22:00,660
to that event and do something about it

00:21:57,200 --> 00:22:04,070
so how do we listen or subscribe to

00:22:00,660 --> 00:22:08,010
animate basically in Drupal we have the

00:22:04,070 --> 00:22:10,770
symphony event subscriber interface in

00:22:08,010 --> 00:22:13,560
your subscriber class we basically have

00:22:10,770 --> 00:22:15,330
to implement that interface implement

00:22:13,560 --> 00:22:18,720
this interface in our subscriber class

00:22:15,330 --> 00:22:22,760
the event subscriber event image

00:22:18,720 --> 00:22:25,290
subscriber interface forces our

00:22:22,760 --> 00:22:27,630
subscriber class to implement the get

00:22:25,290 --> 00:22:32,190
subscribed events method which basically

00:22:27,630 --> 00:22:33,720
returns the you know array of all the

00:22:32,190 --> 00:22:36,660
events that this much that the

00:22:33,720 --> 00:22:39,810
subscriber is subscribing to and the

00:22:36,660 --> 00:22:42,750
with the call labels PHP call labels

00:22:39,810 --> 00:22:45,330
that would execute once the event is

00:22:42,750 --> 00:22:48,950
fired then we need to write those

00:22:45,330 --> 00:22:52,000
callable six obviously and

00:22:48,950 --> 00:22:52,000
you know to extend the functionality

00:23:01,610 --> 00:23:08,059
then we also need to declare this the

00:23:04,880 --> 00:23:10,640
event subscriber as a service so the

00:23:08,059 --> 00:23:24,799
container could you know instantiate it

00:23:10,640 --> 00:23:27,350
automatically this is the event this is

00:23:24,799 --> 00:23:29,600
the event subscriber interface this is

00:23:27,350 --> 00:23:33,530
straight from the code so i have tried

00:23:29,600 --> 00:23:35,480
to maintain that thing basically it

00:23:33,530 --> 00:23:37,640
forces the you know if you are

00:23:35,480 --> 00:23:40,190
implementing your interface it forces

00:23:37,640 --> 00:23:45,950
the subscriber class to implement this

00:23:40,190 --> 00:23:49,250
get subscribed event method and this is

00:23:45,950 --> 00:23:52,160
from the config factory a subscriber

00:23:49,250 --> 00:23:55,460
class from core as well it is basically

00:23:52,160 --> 00:23:57,790
subscribing to events events config

00:23:55,460 --> 00:24:01,429
events save and configure mates delete

00:23:57,790 --> 00:24:04,970
so we have this events array keyed by

00:24:01,429 --> 00:24:09,830
the constant that represents the event

00:24:04,970 --> 00:24:12,200
and basically we have the on save on

00:24:09,830 --> 00:24:14,840
config seven on config delete call abels

00:24:12,200 --> 00:24:19,370
that would get executed when this event

00:24:14,840 --> 00:24:24,230
is fired by the config factory then also

00:24:19,370 --> 00:24:26,150
we have this event subscriber basically

00:24:24,230 --> 00:24:28,520
we have our amend subscriber config

00:24:26,150 --> 00:24:32,990
factory that implements event subscriber

00:24:28,520 --> 00:24:35,419
interface we now need to certain declare

00:24:32,990 --> 00:24:39,230
our config factory subscriber class as a

00:24:35,419 --> 00:24:42,500
service so how do we do that in v8 is we

00:24:39,230 --> 00:24:44,809
have to tag or this class with a tag

00:24:42,500 --> 00:24:47,990
name event subscriber that is how Drupal

00:24:44,809 --> 00:24:53,410
comes to know that this class is an

00:24:47,990 --> 00:24:56,540
immense subscriber we can also have

00:24:53,410 --> 00:25:00,980
using you know exploring the dependency

00:24:56,540 --> 00:25:03,890
injection we can also have a services

00:25:00,980 --> 00:25:06,080
injected into our event subscribers so

00:25:03,890 --> 00:25:09,169
this is how we do it suppose I have my

00:25:06,080 --> 00:25:10,940
custom module and I have declared a

00:25:09,169 --> 00:25:13,550
service you know that is subscribing to

00:25:10,940 --> 00:25:15,399
some event and I would declare this

00:25:13,550 --> 00:25:18,009
arguments array we're in

00:25:15,399 --> 00:25:24,789
I would you know inject the log of

00:25:18,009 --> 00:25:26,979
factory into my event subscriber so then

00:25:24,789 --> 00:25:30,820
the we need to obviously implement the

00:25:26,979 --> 00:25:33,519
call able to do something to about the

00:25:30,820 --> 00:25:36,669
event that we are you know subscribing

00:25:33,519 --> 00:25:40,719
to suppose we have you know I have my

00:25:36,669 --> 00:25:42,820
own in a custom module I have this class

00:25:40,719 --> 00:25:45,759
that is basically a subscriber class

00:25:42,820 --> 00:25:47,830
auto response that implements event

00:25:45,759 --> 00:25:49,749
subscriber it is returning it is

00:25:47,830 --> 00:25:53,739
subscribing to the colonel event request

00:25:49,749 --> 00:25:56,559
that is fired at every request and it

00:25:53,739 --> 00:25:58,269
expects it to you know called the

00:25:56,559 --> 00:26:01,440
logging demo function whenever that

00:25:58,269 --> 00:26:03,789
event is fired we need to give the

00:26:01,440 --> 00:26:08,589
implementation of that function logging

00:26:03,789 --> 00:26:11,019
demo this whatever the call able that we

00:26:08,589 --> 00:26:14,409
are implementing would receive the event

00:26:11,019 --> 00:26:19,509
object as a parameter by default so as

00:26:14,409 --> 00:26:22,869
an argument by default so this kernel

00:26:19,509 --> 00:26:25,929
event request is get response event it

00:26:22,869 --> 00:26:29,499
is basically an object of this class so

00:26:25,929 --> 00:26:34,769
our customer you know this callable gets

00:26:29,499 --> 00:26:39,399
the the gate response event object as a

00:26:34,769 --> 00:26:42,669
argument so the order of execution is

00:26:39,399 --> 00:26:45,399
simple in event this event dispatcher

00:26:42,669 --> 00:26:48,089
component of as compared to drupal hooks

00:26:45,399 --> 00:26:53,200
so what you what we require to do is

00:26:48,089 --> 00:26:55,089
this array whatever this array that we

00:26:53,200 --> 00:26:57,940
return from the yet subscribed events

00:26:55,089 --> 00:27:00,549
takes in as the you know parameter a

00:26:57,940 --> 00:27:05,019
priority parameter so the higher the

00:27:00,549 --> 00:27:08,049
priority the you know events that have a

00:27:05,019 --> 00:27:10,419
higher priority that get executed sorry

00:27:08,049 --> 00:27:12,070
gah labels that have subscribers that

00:27:10,419 --> 00:27:14,799
have a higher priority get executed

00:27:12,070 --> 00:27:18,210
first and those that have lower priority

00:27:14,799 --> 00:27:22,539
get execute you get executed afterwards

00:27:18,210 --> 00:27:24,909
so summing up the listening process we

00:27:22,539 --> 00:27:27,190
have redefined a service in our module

00:27:24,909 --> 00:27:29,020
target with event subscriber that is how

00:27:27,190 --> 00:27:31,600
duple comes to know about

00:27:29,020 --> 00:27:35,440
event subscriber we define a class for

00:27:31,600 --> 00:27:37,870
our subscriber or a subscriber service

00:27:35,440 --> 00:27:40,090
that is that has to implement event

00:27:37,870 --> 00:27:44,320
subscriber interface then we implement

00:27:40,090 --> 00:27:46,690
the get subscribed events from the event

00:27:44,320 --> 00:27:48,310
subscriber interface and then return a

00:27:46,690 --> 00:27:51,340
list of all the events that we are

00:27:48,310 --> 00:27:53,260
subscribing to and what all methods and

00:27:51,340 --> 00:27:56,410
with what priorities they should get

00:27:53,260 --> 00:27:58,360
executed and then we obviously write

00:27:56,410 --> 00:28:01,330
those methods write those call labels

00:27:58,360 --> 00:28:04,660
that we want to execute once the event

00:28:01,330 --> 00:28:08,770
is fired now we'd be moving to

00:28:04,660 --> 00:28:12,880
dispatching dispatching process how we

00:28:08,770 --> 00:28:15,640
can create our own events and how based

00:28:12,880 --> 00:28:20,410
on some context we can dispatch or file

00:28:15,640 --> 00:28:22,870
that event static image class this is

00:28:20,410 --> 00:28:24,990
from the you know this is from the

00:28:22,870 --> 00:28:29,050
symphony event dispatcher component

00:28:24,990 --> 00:28:32,050
basically the seventh is the static

00:28:29,050 --> 00:28:35,800
event class does nothing it only assigns

00:28:32,050 --> 00:28:38,200
a special constant for your event so

00:28:35,800 --> 00:28:41,500
that developers can know better know

00:28:38,200 --> 00:28:43,690
what the event is all about so it's not

00:28:41,500 --> 00:28:45,220
a mandatory thing to have this event

00:28:43,690 --> 00:28:49,260
class but for a better developer

00:28:45,220 --> 00:28:52,330
experience it is always recommended

00:28:49,260 --> 00:28:55,960
suppose I have this kernel events class

00:28:52,330 --> 00:28:58,840
from symphony it has constants for all

00:28:55,960 --> 00:29:00,220
the events that it exposes constant

00:28:58,840 --> 00:29:02,080
request is Colonel request that

00:29:00,220 --> 00:29:04,690
basically fires on every request

00:29:02,080 --> 00:29:08,980
similarly with exception and bu and

00:29:04,690 --> 00:29:11,200
controller and others and then arc event

00:29:08,980 --> 00:29:15,490
class this is the event class that

00:29:11,200 --> 00:29:18,700
Symphony exposes we have we don't have

00:29:15,490 --> 00:29:20,920
much here as well so you know developers

00:29:18,700 --> 00:29:23,020
could extend this class and you know

00:29:20,920 --> 00:29:25,090
extend their functionality as required

00:29:23,020 --> 00:29:30,490
as depending about whatever the use case

00:29:25,090 --> 00:29:32,920
is this event class has a as a property

00:29:30,490 --> 00:29:35,290
propagation stop that decides you know

00:29:32,920 --> 00:29:39,280
that determines if the event is

00:29:35,290 --> 00:29:41,860
currently running or not and also this

00:29:39,280 --> 00:29:42,460
propagation stopped this would be you

00:29:41,860 --> 00:29:44,050
know

00:29:42,460 --> 00:29:47,290
this would be a gator function for that

00:29:44,050 --> 00:29:50,320
property and then we stop propagation

00:29:47,290 --> 00:29:52,630
there are the two more methods that

00:29:50,320 --> 00:29:54,550
belong to this class that are deprecated

00:29:52,630 --> 00:29:59,140
now that would be get dispatcher and

00:29:54,550 --> 00:30:01,360
said dispatch and the basement classes

00:29:59,140 --> 00:30:03,580
you know provided by event dispatcher

00:30:01,360 --> 00:30:06,850
component is deliberate deliberately

00:30:03,580 --> 00:30:10,180
empty to allow the module developers to

00:30:06,850 --> 00:30:13,080
you know extend it and you know

00:30:10,180 --> 00:30:17,980
depending upon whatever the case is

00:30:13,080 --> 00:30:20,770
implemented accordingly so how we extend

00:30:17,980 --> 00:30:24,100
this generic event class we have our own

00:30:20,770 --> 00:30:26,170
event class suppose I have to dispatch

00:30:24,100 --> 00:30:28,480
an event I have to create my own event I

00:30:26,170 --> 00:30:32,260
would be you know first I would be

00:30:28,480 --> 00:30:34,540
creating the general event class to

00:30:32,260 --> 00:30:37,900
determine the constants for my events

00:30:34,540 --> 00:30:40,780
then I would be extending the extending

00:30:37,900 --> 00:30:43,570
the event class but you know extending

00:30:40,780 --> 00:30:47,530
my sorry extending my own class with

00:30:43,570 --> 00:30:51,910
this event class and I would have you

00:30:47,530 --> 00:30:53,650
know suppose I have this event cloth I

00:30:51,910 --> 00:30:55,690
have created the cement class that would

00:30:53,650 --> 00:30:58,510
get a configuration object from Drupal 8

00:30:55,690 --> 00:31:02,110
it would get you know and be able to

00:30:58,510 --> 00:31:09,010
alter this configuration in you know in

00:31:02,110 --> 00:31:12,400
particular context dispatching our event

00:31:09,010 --> 00:31:14,770
so first getting the service event

00:31:12,400 --> 00:31:16,840
dispatcher from Drupal and then I would

00:31:14,770 --> 00:31:20,680
be create instantiated my event object

00:31:16,840 --> 00:31:23,470
and passing in the config object that I

00:31:20,680 --> 00:31:27,220
would be getting in whatever context i

00:31:23,470 --> 00:31:30,640
am in then to dispatch the event i have

00:31:27,220 --> 00:31:32,590
the i have a method dispatch that is

00:31:30,640 --> 00:31:35,020
from the dispatcher event dispatcher

00:31:32,590 --> 00:31:39,030
component what i need to pass into this

00:31:35,020 --> 00:31:42,010
dispatcher is is the event name or

00:31:39,030 --> 00:31:43,510
either the event name or the constant

00:31:42,010 --> 00:31:47,170
that i have defined in my event class

00:31:43,510 --> 00:31:50,470
and the event object so then I can you

00:31:47,170 --> 00:31:53,020
know alter the data once I'm once have

00:31:50,470 --> 00:31:56,169
subscribed to this event I can alter the

00:31:53,020 --> 00:31:58,869
data in the subscriber of this event and

00:31:56,169 --> 00:32:02,049
and get the data back from the event

00:31:58,869 --> 00:32:06,909
object from the subscriber object that

00:32:02,049 --> 00:32:08,799
is a you know by these methods if we

00:32:06,909 --> 00:32:11,739
have setters and getters in our event

00:32:08,799 --> 00:32:16,779
you know event class we can get the

00:32:11,739 --> 00:32:20,109
configuration back the whole process of

00:32:16,779 --> 00:32:22,299
dispatching the event would be summed up

00:32:20,109 --> 00:32:24,549
like this to dispatch an event we have

00:32:22,299 --> 00:32:29,499
to basically call the dispatch function

00:32:24,549 --> 00:32:33,609
and pass it pass into it are the name of

00:32:29,499 --> 00:32:35,889
the event and our event object so the

00:32:33,609 --> 00:32:39,070
first argument obviously is a unique

00:32:35,889 --> 00:32:41,859
event name or a constant that we should

00:32:39,070 --> 00:32:44,739
be defining in a separate statin static

00:32:41,859 --> 00:32:48,159
class the second argument is obviously

00:32:44,739 --> 00:32:50,739
the event object we would need to extend

00:32:48,159 --> 00:32:53,529
this class into our own custom event

00:32:50,739 --> 00:32:58,299
class so we can you know provide our own

00:32:53,529 --> 00:33:00,519
functionality to you know that we we by

00:32:58,299 --> 00:33:06,249
which we can extend the functionality

00:33:00,519 --> 00:33:08,889
that the code provides so basically this

00:33:06,249 --> 00:33:11,320
is a simple dispatcher we have other

00:33:08,889 --> 00:33:14,799
dispatchers and listeners as well we

00:33:11,320 --> 00:33:17,409
have the event object that has been the

00:33:14,799 --> 00:33:19,659
you know the dispatch function the most

00:33:17,409 --> 00:33:22,480
important function dispatch we also have

00:33:19,659 --> 00:33:25,869
generic event object from symphony which

00:33:22,480 --> 00:33:29,289
has certain functionalities we also have

00:33:25,869 --> 00:33:32,409
a container event container event

00:33:29,289 --> 00:33:34,809
dispatcher basically this allows us to

00:33:32,409 --> 00:33:36,820
you know use services within our events

00:33:34,809 --> 00:33:39,940
and event listeners event dispatcher

00:33:36,820 --> 00:33:42,039
events event dispatcher aware events and

00:33:39,940 --> 00:33:45,220
event dispatcher aware listeners so

00:33:42,039 --> 00:33:47,980
basically this would be having an event

00:33:45,220 --> 00:33:50,799
dispatcher having an event dispatcher

00:33:47,980 --> 00:33:52,749
and having event listeners which have

00:33:50,799 --> 00:33:56,230
access to the event dispatcher so we'd

00:33:52,749 --> 00:33:58,779
be able to dispatch some more events

00:33:56,230 --> 00:34:00,460
within our dispatcher or we'd be able to

00:33:58,779 --> 00:34:03,190
dispatch more events within our

00:34:00,460 --> 00:34:06,940
listeners so you know to have better

00:34:03,190 --> 00:34:09,490
extensibility or for code so what's

00:34:06,940 --> 00:34:09,669
happening currently in code we have we

00:34:09,490 --> 00:34:11,799
do

00:34:09,669 --> 00:34:14,970
have too many events that are fired for

00:34:11,799 --> 00:34:18,220
things we have configure vents delete

00:34:14,970 --> 00:34:20,339
imports a venturi name which are fired

00:34:18,220 --> 00:34:23,429
on when configuration event

00:34:20,339 --> 00:34:26,290
configuration object is deleted imported

00:34:23,429 --> 00:34:28,510
saved or renamed we have entity type

00:34:26,290 --> 00:34:31,299
events field storage and feed storage

00:34:28,510 --> 00:34:33,700
definition events console events we have

00:34:31,299 --> 00:34:37,119
Colonel events controller exception

00:34:33,700 --> 00:34:39,250
request response terminate and view the

00:34:37,119 --> 00:34:42,569
exception event would fire when we have

00:34:39,250 --> 00:34:46,839
an uncaught exception for a request

00:34:42,569 --> 00:34:49,000
request event fires when we have files

00:34:46,839 --> 00:34:51,129
for every request when we have a

00:34:49,000 --> 00:34:53,319
response delivered to the browser we

00:34:51,129 --> 00:34:55,839
have this response event fired when the

00:34:53,319 --> 00:35:01,089
when a request is terminated terminated

00:34:55,839 --> 00:35:03,940
meant fires there is one there is also

00:35:01,089 --> 00:35:08,470
one special event colonel event view

00:35:03,940 --> 00:35:12,579
that is fired when we when the response

00:35:08,470 --> 00:35:16,150
is not an is not a response object when

00:35:12,579 --> 00:35:18,069
we can have responses to requests as

00:35:16,150 --> 00:35:20,730
render raised as well so when the

00:35:18,069 --> 00:35:23,740
response is not a response object

00:35:20,730 --> 00:35:26,589
current element view gets fired we also

00:35:23,740 --> 00:35:28,839
have migrated events map delete whenever

00:35:26,589 --> 00:35:31,630
an entry from map is deleted maps say

00:35:28,839 --> 00:35:34,390
whenever n entries made into the map a

00:35:31,630 --> 00:35:37,839
post import that runs after the import

00:35:34,390 --> 00:35:41,559
process is over post rollback simply

00:35:37,839 --> 00:35:43,809
runs after the rollback similarly post

00:35:41,559 --> 00:35:47,559
or delete and poor so save we also have

00:35:43,809 --> 00:35:50,109
a routing events routing event or you

00:35:47,559 --> 00:35:52,930
know alter let's module developers to

00:35:50,109 --> 00:35:58,780
you know alter the routes or controllers

00:35:52,930 --> 00:36:01,480
for requests so with this you know with

00:35:58,780 --> 00:36:05,020
this being said we still have hooks in

00:36:01,480 --> 00:36:08,049
v8 and we basically look into how da tis

00:36:05,020 --> 00:36:10,780
doing it how be it is you know letting

00:36:08,049 --> 00:36:14,500
module developers expose their hooks and

00:36:10,780 --> 00:36:16,900
how da tis exposing its hooks and how we

00:36:14,500 --> 00:36:20,369
can you know still expose our hooks if

00:36:16,900 --> 00:36:22,319
need be so

00:36:20,369 --> 00:36:26,670
what about hooks indeed some are gone

00:36:22,319 --> 00:36:30,210
and some are still there I think most of

00:36:26,670 --> 00:36:32,160
the altar hooks are still there which we

00:36:30,210 --> 00:36:35,390
should be replacing with the event

00:36:32,160 --> 00:36:38,700
dispatcher component some hooks are gone

00:36:35,390 --> 00:36:41,940
there is no hook in it there is no hook

00:36:38,700 --> 00:36:44,099
boot there is no hook exit so one way we

00:36:41,940 --> 00:36:46,140
could implement hooking it in you know

00:36:44,099 --> 00:36:48,390
we could achieve the same functionality

00:36:46,140 --> 00:36:50,849
and d8 would be to implement would be to

00:36:48,390 --> 00:36:53,339
subscribe to Colonel event request I

00:36:50,849 --> 00:36:55,640
would say and then that way we would be

00:36:53,339 --> 00:36:59,369
achieving the same functionality

00:36:55,640 --> 00:37:01,319
similarly a hook hook exit would be we

00:36:59,369 --> 00:37:05,910
would be we can subscribe to Colonel

00:37:01,319 --> 00:37:09,269
event terminate as well hooks in v8 this

00:37:05,910 --> 00:37:13,740
is the code chunk I have pasted from the

00:37:09,269 --> 00:37:19,710
user module file sorry the dot module

00:37:13,740 --> 00:37:22,349
file from the user module we have the we

00:37:19,710 --> 00:37:26,369
have a function invoke all simplest just

00:37:22,349 --> 00:37:28,769
like what we had in d7 the invoke module

00:37:26,369 --> 00:37:30,809
invoke all file we have a module handler

00:37:28,769 --> 00:37:33,180
class module handler object which has

00:37:30,809 --> 00:37:35,970
this mod invoke all function so

00:37:33,180 --> 00:37:39,480
basically what we are doing here is we

00:37:35,970 --> 00:37:42,089
are exposing hook user login and passing

00:37:39,480 --> 00:37:45,059
in and passing the user account into it

00:37:42,089 --> 00:37:47,220
so that the so that other developers

00:37:45,059 --> 00:37:51,450
could hook into it by implementing hook

00:37:47,220 --> 00:37:53,249
user login so how this invoke function

00:37:51,450 --> 00:37:57,329
is doing it it's basically the same

00:37:53,249 --> 00:38:00,089
thing in the function naming mechanism

00:37:57,329 --> 00:38:05,880
we have these magic names you know so

00:38:00,089 --> 00:38:08,190
whenever whenever we have a hook invoke

00:38:05,880 --> 00:38:11,369
all user login and then we would be

00:38:08,190 --> 00:38:13,499
passing in the user account user login

00:38:11,369 --> 00:38:16,739
is the hook name that we have to decide

00:38:13,499 --> 00:38:19,470
just like here dollar module is our own

00:38:16,739 --> 00:38:22,410
is the module that you know would be

00:38:19,470 --> 00:38:25,499
implementing this hook the dollar hook

00:38:22,410 --> 00:38:28,109
is the name that we decide so for you

00:38:25,499 --> 00:38:31,049
for this user login hook the function

00:38:28,109 --> 00:38:33,450
name would be your module underscore the

00:38:31,049 --> 00:38:34,020
hook name your module underscore user

00:38:33,450 --> 00:38:37,050
log

00:38:34,020 --> 00:38:40,320
and it would be getting the user account

00:38:37,050 --> 00:38:43,140
as the argument and for if we are

00:38:40,320 --> 00:38:46,440
invoking our hook from all the modules

00:38:43,140 --> 00:38:48,450
we would be doing we'd be needing to

00:38:46,440 --> 00:38:51,360
call this function from the module

00:38:48,450 --> 00:38:53,640
handler class this again does the same

00:38:51,360 --> 00:38:59,610
thing function module underscore hook

00:38:53,640 --> 00:39:02,250
knee this is the event this is the

00:38:59,610 --> 00:39:06,510
function the group regarding the altar

00:39:02,250 --> 00:39:09,240
hooks alter function from the module

00:39:06,510 --> 00:39:14,280
handler object so this again does the

00:39:09,240 --> 00:39:16,170
same thing with this again does the same

00:39:14,280 --> 00:39:18,660
thing from you know the same way would

00:39:16,170 --> 00:39:21,600
be would be in be seven would be needing

00:39:18,660 --> 00:39:23,160
to call the drupal alter function here

00:39:21,600 --> 00:39:27,060
and we would be needing to call the

00:39:23,160 --> 00:39:29,580
altar function from the module handler

00:39:27,060 --> 00:39:32,370
object and then pass into it or the

00:39:29,580 --> 00:39:36,300
array of data or context whatever we

00:39:32,370 --> 00:39:39,660
want to alter and regarding the order of

00:39:36,300 --> 00:39:41,700
execution of hooks in d8 it's again

00:39:39,660 --> 00:39:44,730
implementing the same exposing the same

00:39:41,700 --> 00:39:47,310
hook module implements altar which you

00:39:44,730 --> 00:39:50,520
know has the array of implementation of

00:39:47,310 --> 00:39:52,590
all the which has the array that has all

00:39:50,520 --> 00:39:55,230
the module names as keys that are

00:39:52,590 --> 00:39:59,120
implementing our hook and then the hooks

00:39:55,230 --> 00:40:02,640
get executed in the same order so to

00:39:59,120 --> 00:40:04,830
alter the execution of hooks in d8 we

00:40:02,640 --> 00:40:08,070
would simply be wit again be needing to

00:40:04,830 --> 00:40:15,630
in you know implement this hook module

00:40:08,070 --> 00:40:19,230
implements alter so how to you know

00:40:15,630 --> 00:40:21,990
again how to alter if we had a an array

00:40:19,230 --> 00:40:25,560
of data and we wanted to we wanted other

00:40:21,990 --> 00:40:27,540
module developers to alter our data we'd

00:40:25,560 --> 00:40:32,430
be needing to call this altar function

00:40:27,540 --> 00:40:34,530
passin or you know the name of that hook

00:40:32,430 --> 00:40:37,320
that we would want to know expose and

00:40:34,530 --> 00:40:41,190
then passing data as well this is how we

00:40:37,320 --> 00:40:44,400
are exposing hook views data altar in d8

00:40:41,190 --> 00:40:47,499
we basically have we basically called

00:40:44,400 --> 00:40:51,740
the altar function of the module handler

00:40:47,499 --> 00:40:54,440
so somebody if you are you know the

00:40:51,740 --> 00:40:56,960
basic question is if you should be going

00:40:54,440 --> 00:41:00,200
with hooks or events if you're writing

00:40:56,960 --> 00:41:02,269
your custom module I think we should

00:41:00,200 --> 00:41:05,630
definitely be if you need to expose

00:41:02,269 --> 00:41:07,220
something if you need to allow other

00:41:05,630 --> 00:41:09,440
module developers to hook into your

00:41:07,220 --> 00:41:11,900
system we should definitely a fire and

00:41:09,440 --> 00:41:14,059
event and there is a saying that we

00:41:11,900 --> 00:41:15,950
should you know for better experiences

00:41:14,059 --> 00:41:18,680
we should log everything and trigger

00:41:15,950 --> 00:41:21,470
every trigger an event for everything so

00:41:18,680 --> 00:41:24,049
if you are interacting with or altering

00:41:21,470 --> 00:41:25,670
core subscribe to an event if minus

00:41:24,049 --> 00:41:28,309
fired I have already mentioned some of

00:41:25,670 --> 00:41:31,819
the events that are available if not I

00:41:28,309 --> 00:41:34,579
don't see too many options for us we

00:41:31,819 --> 00:41:36,650
still have to go the hook way for

00:41:34,579 --> 00:41:39,009
configuration and admin forms just like

00:41:36,650 --> 00:41:41,869
I said hook block info hook block

00:41:39,009 --> 00:41:43,940
configure hood block save and stuff like

00:41:41,869 --> 00:41:49,369
that we have plugins and tagged services

00:41:43,940 --> 00:41:53,390
as well and now I think I'd be going for

00:41:49,369 --> 00:41:56,900
a simple demo we'd be subscribing to a

00:41:53,390 --> 00:41:59,660
few events in d 8 and we'd be you know

00:41:56,900 --> 00:42:04,369
creating our event for a form submit and

00:41:59,660 --> 00:42:09,400
then we'd be executing some silly code

00:42:04,369 --> 00:42:09,400
while we have subscribed to that event

00:42:21,210 --> 00:42:24,320
so basically I have

00:42:30,090 --> 00:42:37,290
I have a simple site I have a simple

00:42:33,330 --> 00:42:44,700
controller written for this page it

00:42:37,290 --> 00:42:50,250
returns the rain today I also have this

00:42:44,700 --> 00:42:55,440
config form there are a few fields that

00:42:50,250 --> 00:43:01,800
I have so in the code section I have

00:42:55,440 --> 00:43:04,440
these I have these two modules config

00:43:01,800 --> 00:43:06,330
form that is a you know create mean that

00:43:04,440 --> 00:43:09,570
is responsible for creating my config

00:43:06,330 --> 00:43:12,990
form and the form that is available that

00:43:09,570 --> 00:43:15,180
i just showed and i also have this event

00:43:12,990 --> 00:43:17,700
display event demo module that is that

00:43:15,180 --> 00:43:20,220
would be subscribing to a few events so

00:43:17,700 --> 00:43:23,010
first we can you know look into you know

00:43:20,220 --> 00:43:25,980
as I said to subscribe to an event we'd

00:43:23,010 --> 00:43:29,100
be needing to have our own you know

00:43:25,980 --> 00:43:31,530
service the event subscriber class how

00:43:29,100 --> 00:43:34,260
we can define it is here in the module

00:43:31,530 --> 00:43:37,200
dot services dot yml file i have this

00:43:34,260 --> 00:43:39,630
altar response class now declared as a

00:43:37,200 --> 00:43:43,560
service it would be gettin this log of

00:43:39,630 --> 00:43:45,570
factory as an argument or this i have

00:43:43,560 --> 00:43:47,880
declared this as a dependency and it

00:43:45,570 --> 00:43:50,100
would dependency would be injected by

00:43:47,880 --> 00:43:53,660
the container into my class and I have

00:43:50,100 --> 00:43:58,800
targeted with the event subscriber tag

00:43:53,660 --> 00:44:02,880
so this is my alter response class

00:43:58,800 --> 00:44:07,340
basically implementing the event

00:44:02,880 --> 00:44:07,340
subscriber interface and then

00:44:12,930 --> 00:44:18,400
implementing the get subscribed events

00:44:15,660 --> 00:44:20,920
method from that interface and then

00:44:18,400 --> 00:44:23,890
returning an array of you know various

00:44:20,920 --> 00:44:26,200
events that we can subscribe to I have

00:44:23,890 --> 00:44:27,910
you know currently commented out all

00:44:26,200 --> 00:44:30,069
these events so we could you know

00:44:27,910 --> 00:44:34,029
uncomment one by one and check what

00:44:30,069 --> 00:44:37,480
happens I have for an element a response

00:44:34,029 --> 00:44:40,900
or element rest request I have a

00:44:37,480 --> 00:44:42,670
function logging demo that is here we'd

00:44:40,900 --> 00:44:44,799
be subscribing to Colonel event request

00:44:42,670 --> 00:44:48,220
so this would be happening for every

00:44:44,799 --> 00:44:50,230
request that our site makes I here I am

00:44:48,220 --> 00:44:52,720
currently fetching the path from the

00:44:50,230 --> 00:44:59,249
request object that we are visiting and

00:44:52,720 --> 00:45:02,470
I'd be you know I'd be logging that path

00:44:59,249 --> 00:45:04,539
into the Drupal logs so how we would be

00:45:02,470 --> 00:45:09,849
logging that with the help of the

00:45:04,539 --> 00:45:12,999
dependency injection the injected Conte

00:45:09,849 --> 00:45:17,529
injected a log of factory object would

00:45:12,999 --> 00:45:21,900
be you know helping us to log the path

00:45:17,529 --> 00:45:21,900
so let me just clear cache

00:45:28,810 --> 00:45:41,160
and let me just refresh this page so we

00:45:33,280 --> 00:45:41,160
make a request and then let's check logs

00:45:42,780 --> 00:45:49,390
you can see our config form was visited

00:45:46,630 --> 00:45:52,390
and then reports and then this current

00:45:49,390 --> 00:46:01,030
page BB logs was visited we can actually

00:45:52,390 --> 00:46:03,340
change this method change this to better

00:46:01,030 --> 00:46:06,430
check if it's executed and then I can

00:46:03,340 --> 00:46:09,640
refresh this to make another request and

00:46:06,430 --> 00:46:13,780
then check the logs this page was

00:46:09,640 --> 00:46:18,070
visited just now so i also have we also

00:46:13,780 --> 00:46:21,670
have this you know we can also have

00:46:18,070 --> 00:46:25,810
config events save to do something we

00:46:21,670 --> 00:46:28,210
can also you know determine the we can

00:46:25,810 --> 00:46:31,770
also set the priority for a various

00:46:28,210 --> 00:46:35,860
events from call ables to be executed

00:46:31,770 --> 00:46:38,550
we'd also be subscribing to the colonel

00:46:35,860 --> 00:46:41,740
element response that have gets fired

00:46:38,550 --> 00:46:44,380
for every time when I responses

00:46:41,740 --> 00:46:50,380
displayed to the user demo response

00:46:44,380 --> 00:46:52,480
function would be I do not think yes I

00:46:50,380 --> 00:46:54,700
have would be we'd be getting the

00:46:52,480 --> 00:46:57,100
response object and then we'd be setting

00:46:54,700 --> 00:47:00,220
a content on our response object to this

00:46:57,100 --> 00:47:02,350
basically removing all the content from

00:47:00,220 --> 00:47:07,150
the response object and passing in a

00:47:02,350 --> 00:47:10,200
simple string to it I would need to

00:47:07,150 --> 00:47:10,200
clear cache again

00:47:16,869 --> 00:47:24,880
so for every request I should get a

00:47:21,779 --> 00:47:27,730
simple string so we can actually change

00:47:24,880 --> 00:47:30,930
this string and check if it is basically

00:47:27,730 --> 00:47:30,930
coming from here only

00:47:42,770 --> 00:47:50,420
so this is this now as I said you know I

00:47:48,050 --> 00:47:54,320
have this configuration form I can also

00:47:50,420 --> 00:47:57,380
you know too I am currently the config

00:47:54,320 --> 00:48:01,880
form is coming from this module I have a

00:47:57,380 --> 00:48:04,250
form i have a few fields declared in

00:48:01,880 --> 00:48:07,700
this form and i also have a submit

00:48:04,250 --> 00:48:10,940
handler for this form i am storing the

00:48:07,700 --> 00:48:13,370
values from this from these fields into

00:48:10,940 --> 00:48:15,860
the configuration before that i am

00:48:13,370 --> 00:48:18,590
exposing i am firing an event and I am

00:48:15,860 --> 00:48:21,830
letting other modules to subscribe to my

00:48:18,590 --> 00:48:24,740
event and then alter the data that gets

00:48:21,830 --> 00:48:27,500
submitted to the configuration so

00:48:24,740 --> 00:48:29,930
basically I have this event demo class

00:48:27,500 --> 00:48:33,620
that is already defined they went demo

00:48:29,930 --> 00:48:36,190
classes here event demo class extent 7th

00:48:33,620 --> 00:48:38,600
so it would basically have the

00:48:36,190 --> 00:48:42,170
dispatcher's to dispatch function by

00:48:38,600 --> 00:48:45,020
which it can dispatch the event and then

00:48:42,170 --> 00:48:48,050
I have some Gator and setters for the

00:48:45,020 --> 00:48:50,360
configuration that it needs to alter

00:48:48,050 --> 00:48:54,290
that I am want other module developers

00:48:50,360 --> 00:48:56,720
to alter so i have this my module events

00:48:54,290 --> 00:48:58,370
class here which would be defining the

00:48:56,720 --> 00:49:00,560
constant for my event that i would be

00:48:58,370 --> 00:49:04,820
exposing the unique name for my event

00:49:00,560 --> 00:49:08,780
would be event a demo not form so to

00:49:04,820 --> 00:49:10,880
subscribe to this event i would need an

00:49:08,780 --> 00:49:14,120
event listener that would be subscribing

00:49:10,880 --> 00:49:16,580
to this event so i have subscribed i

00:49:14,120 --> 00:49:21,350
have this auto response subscribe to

00:49:16,580 --> 00:49:23,930
this event as well I have this altar

00:49:21,350 --> 00:49:26,210
config function with a priority of 0

00:49:23,930 --> 00:49:28,910
this auto config function would be

00:49:26,210 --> 00:49:31,220
basically changing getting the

00:49:28,910 --> 00:49:33,770
configuration you know getting the value

00:49:31,220 --> 00:49:36,860
of the text field and then setting it to

00:49:33,770 --> 00:49:40,370
I won't show really so i would need to

00:49:36,860 --> 00:49:42,670
clear cache and say i'm subscribing to a

00:49:40,370 --> 00:49:42,670
new event

00:49:45,240 --> 00:49:47,300
you

00:49:52,539 --> 00:50:01,390
so I have this I can change it I was

00:49:58,919 --> 00:50:04,689
altered I can change the video field and

00:50:01,390 --> 00:50:08,049
then save the configuration and then it

00:50:04,689 --> 00:50:10,929
would basically you know override the

00:50:08,049 --> 00:50:12,880
value that I had submitted in the submit

00:50:10,929 --> 00:50:14,979
function and that I'm overriding in my

00:50:12,880 --> 00:50:19,119
custom module I can change it here as

00:50:14,979 --> 00:50:30,339
well to check if it is coming from here

00:50:19,119 --> 00:50:32,199
only and I can submit my form so this is

00:50:30,339 --> 00:50:35,979
the method this is the value that I am

00:50:32,199 --> 00:50:38,469
getting now to you know explain the

00:50:35,979 --> 00:50:42,539
priorities thing as well I can have this

00:50:38,469 --> 00:50:42,539
another function I can yeah

00:50:48,930 --> 00:50:54,990
so I can basically you know subscribe to

00:50:51,809 --> 00:50:57,900
an event from the unique name as well

00:50:54,990 --> 00:50:59,910
and also from the you know the constant

00:50:57,900 --> 00:51:02,670
as well so I have these two functions

00:50:59,910 --> 00:51:05,400
subscribing to the same event alter

00:51:02,670 --> 00:51:07,980
config with the priority of 0 so I can

00:51:05,400 --> 00:51:10,290
just comment it out I have these two

00:51:07,980 --> 00:51:12,420
functions alter config again and config

00:51:10,290 --> 00:51:14,520
again Walter config and auto config

00:51:12,420 --> 00:51:18,119
again subscribing to the same event with

00:51:14,520 --> 00:51:20,880
a different priority so with the higher

00:51:18,119 --> 00:51:23,160
priority of 10 the altar config function

00:51:20,880 --> 00:51:25,079
would be executing first this would be

00:51:23,160 --> 00:51:28,050
executing first and setting the value to

00:51:25,079 --> 00:51:30,180
this and then the altar configure gain

00:51:28,050 --> 00:51:34,369
function would be executing and then it

00:51:30,180 --> 00:51:34,369
would be setting the value to this

00:51:47,920 --> 00:51:56,770
so once I submit this form we should get

00:51:53,109 --> 00:52:02,859
the previous value well so this is

00:51:56,770 --> 00:52:11,859
explains the this explains the priority

00:52:02,859 --> 00:52:15,760
thing as well and this information about

00:52:11,859 --> 00:52:17,790
the contribution Sprint's evaluate my

00:52:15,760 --> 00:52:27,990
session if you think it was helpful

00:52:17,790 --> 00:52:27,990
questions no questions

00:52:41,900 --> 00:52:47,359
like I said like I said it really

00:52:45,770 --> 00:52:50,420
depends upon I mean because it would

00:52:47,359 --> 00:52:53,210
require you know some effort to replace

00:52:50,420 --> 00:52:55,640
all of the hooks with you know events

00:52:53,210 --> 00:52:58,160
but then it really depends upon the

00:52:55,640 --> 00:53:00,470
effort that the community could provide

00:52:58,160 --> 00:53:07,099
you know to take that initiative forward

00:53:00,470 --> 00:53:09,680
I mean I do not there are issue queues

00:53:07,099 --> 00:53:12,260
in Drupal d dot o that have you know

00:53:09,680 --> 00:53:15,319
that you know we're in the conversations

00:53:12,260 --> 00:53:18,200
are going on whether to which what all

00:53:15,319 --> 00:53:20,900
hooks need to be replaced first and then

00:53:18,200 --> 00:53:22,549
you know with the plans further so we

00:53:20,900 --> 00:53:43,670
can definitely check issue queue and

00:53:22,549 --> 00:53:48,349
figure that out so yeah so basically you

00:53:43,670 --> 00:53:52,819
don't you don't you would have to go to

00:53:48,349 --> 00:53:54,740
the you know event object i sorry you

00:53:52,819 --> 00:53:57,380
would have to go to the event class to

00:53:54,740 --> 00:53:59,390
figure that out once you have you know

00:53:57,380 --> 00:54:01,069
if your sub C or method is subscribing

00:53:59,390 --> 00:54:03,950
to multiple events you would have to

00:54:01,069 --> 00:54:06,829
somehow do a check about what event is

00:54:03,950 --> 00:54:12,680
it is receiving and then you know plan

00:54:06,829 --> 00:54:17,210
your actions accordingly yep any other

00:54:12,680 --> 00:54:19,420
questions well then thank you for your

00:54:17,210 --> 00:54:19,420
time

00:54:22,160 --> 00:54:24,220

YouTube URL: https://www.youtube.com/watch?v=kkxeuGl25MQ


