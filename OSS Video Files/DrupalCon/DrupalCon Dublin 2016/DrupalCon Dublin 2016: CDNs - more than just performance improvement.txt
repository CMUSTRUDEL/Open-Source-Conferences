Title: DrupalCon Dublin 2016: CDNs - more than just performance improvement
Publication date: 2016-09-27
Playlist: DrupalCon Dublin 2016
Description: 
	Synopsis for Fastly Showcase Session:

We all know that performance is critical for any site, and Drupal is no exception.  CDNs are known for improving performance, but did you know that they also play a significant role in maintaining uptime, providing security and can even serve content to your users during outages?

We have put together a panel to answer your questions around performance, security, uptime and any other related topics of interest.

By leveraging key features such as instant purging, request collapsing, and origin shield, the Drupal.org sites and services significantly reduced origin load.


PANEL:

David Strauss, CTO | Pantheon
Rudy Grigar, Infrastructure Manager | Drupal Association
Leon Brocard, Sales Engineer | Fastly
Captions: 
	00:00:00,000 --> 00:00:06,000
so hi everyone let's start with

00:00:03,720 --> 00:00:10,050
instructions I'm Liam brocard I'm a

00:00:06,000 --> 00:00:13,080
sales engineer at fastly I'm David Ross

00:00:10,050 --> 00:00:14,730
I'm CTO at Pantheon and I'm rüdiger garm

00:00:13,080 --> 00:00:18,390
the infrastructure manager at the drupal

00:00:14,730 --> 00:00:20,220
association for deployment sites and we

00:00:18,390 --> 00:00:22,949
are here to talk to you about the value

00:00:20,220 --> 00:00:26,779
of CD ends and caching and all the

00:00:22,949 --> 00:00:30,510
things that go beyond the origin which

00:00:26,779 --> 00:00:31,650
assuming based on the assumption of you

00:00:30,510 --> 00:00:34,739
being here at drupalcon it's probably

00:00:31,650 --> 00:00:38,040
Drupal a lot of you probably know that

00:00:34,739 --> 00:00:41,010
Drupal takes a long time to render pages

00:00:38,040 --> 00:00:43,379
at least in terms of computer time it

00:00:41,010 --> 00:00:45,620
takes even a great site takes a few

00:00:43,379 --> 00:00:48,780
hundred milliseconds to render pages and

00:00:45,620 --> 00:00:51,360
a lot of caching is about avoiding that

00:00:48,780 --> 00:00:52,980
as much as possible both to reduce the

00:00:51,360 --> 00:00:58,320
amount of time your users wait on pages

00:00:52,980 --> 00:01:02,309
as well as as well as make your origin

00:00:58,320 --> 00:01:03,780
resources extend further that a if 99%

00:01:02,309 --> 00:01:05,729
of things are getting held handled by

00:01:03,780 --> 00:01:07,560
your edge cash then only 1% of your

00:01:05,729 --> 00:01:10,200
overall traffic needs to be handled by

00:01:07,560 --> 00:01:13,770
your origin did you have some topics to

00:01:10,200 --> 00:01:16,799
start a software sure so I'll start on

00:01:13,770 --> 00:01:19,320
on a website that all of you visited

00:01:16,799 --> 00:01:24,420
before Drupal zorg that's hosted on

00:01:19,320 --> 00:01:27,479
fastly why is that well a couple years

00:01:24,420 --> 00:01:30,329
ago blood ward was experiencing all

00:01:27,479 --> 00:01:33,509
kinds of plain see issues and slowdowns

00:01:30,329 --> 00:01:35,430
and basically got hired on by the drupal

00:01:33,509 --> 00:01:42,299
association full time to kind of like

00:01:35,430 --> 00:01:45,540
work on making it faster so what I found

00:01:42,299 --> 00:01:47,549
was that our meal and that we have out

00:01:45,540 --> 00:01:50,670
going with the origin servers for the

00:01:47,549 --> 00:01:53,460
blood org was hitting its 30 megabit cap

00:01:50,670 --> 00:01:55,619
every five minutes or so which was

00:01:53,460 --> 00:01:58,259
coordinated with updates touch with let

00:01:55,619 --> 00:02:00,869
organ people's kranj being on about

00:01:58,259 --> 00:02:02,490
every five minutes or so being a big

00:02:00,869 --> 00:02:05,159
spike on the hour definitely a bigger

00:02:02,490 --> 00:02:08,479
spike and we were dropping packets so

00:02:05,159 --> 00:02:12,840
kind of initially pulled out a CDN and

00:02:08,479 --> 00:02:14,190
saw some reduction in number of like

00:02:12,840 --> 00:02:15,870
dropped packets and things and things

00:02:14,190 --> 00:02:17,640
are getting better but it was kind of

00:02:15,870 --> 00:02:20,190
like a quick like Oh things are on fire

00:02:17,640 --> 00:02:22,860
we need a CDN went in but one in place

00:02:20,190 --> 00:02:27,330
but it was very time it was a time-based

00:02:22,860 --> 00:02:30,330
CDN so every 30 minutes the CDN would

00:02:27,330 --> 00:02:32,640
purge whatever admits cash and and we

00:02:30,330 --> 00:02:34,349
would wreak ash organ so it was kind of

00:02:32,640 --> 00:02:37,440
a middle ground from where we ended up

00:02:34,349 --> 00:02:40,890
in this last year were fastly and with

00:02:37,440 --> 00:02:44,610
fastly we're doing basically that but a

00:02:40,890 --> 00:02:45,989
much better job of it so all of the

00:02:44,610 --> 00:02:49,890
packaging that's happening out for blood

00:02:45,989 --> 00:02:52,019
or new releases for updates like the

00:02:49,890 --> 00:02:54,750
security data that sort of thing we're

00:02:52,019 --> 00:02:57,090
dynamically purging the fastest API when

00:02:54,750 --> 00:02:58,830
we build and package releases some of

00:02:57,090 --> 00:03:00,540
those cash items are only dynamically

00:02:58,830 --> 00:03:03,000
purged when there's a new release

00:03:00,540 --> 00:03:06,450
available so only new requests are

00:03:03,000 --> 00:03:09,659
hitting origins and existing requests a

00:03:06,450 --> 00:03:12,180
cached or up to a year in past legs cash

00:03:09,659 --> 00:03:14,670
and we've combined that with Vasily's

00:03:12,180 --> 00:03:17,519
origin shield feature which is some

00:03:14,670 --> 00:03:21,180
fancy varnish configurations and it's

00:03:17,519 --> 00:03:23,720
distributed garnish in a sense so the

00:03:21,180 --> 00:03:26,459
vcl is there to do origin shielding

00:03:23,720 --> 00:03:29,280
keeps the request fast this is actually

00:03:26,459 --> 00:03:31,379
update set record and fast that's where

00:03:29,280 --> 00:03:33,200
that you're looking at right now so if

00:03:31,379 --> 00:03:35,670
you wait until a five minute mark here

00:03:33,200 --> 00:03:38,069
any second now you'll see a big spike

00:03:35,670 --> 00:03:39,690
and things will come through but most of

00:03:38,069 --> 00:03:42,900
the hits are happening with a ninety

00:03:39,690 --> 00:03:44,209
nine ish percent hit ratio so there's

00:03:42,900 --> 00:03:49,170
not a lot of requests actually getting

00:03:44,209 --> 00:03:52,340
origin and our origin bandwidth is only

00:03:49,170 --> 00:03:54,810
I mean we're under attending bit or so

00:03:52,340 --> 00:03:58,349
any given time with with all of this

00:03:54,810 --> 00:04:01,140
happening right now so that's sort of

00:03:58,349 --> 00:04:02,400
how like we went into the down into the

00:04:01,140 --> 00:04:05,310
fastly rabbit hole we were already using

00:04:02,400 --> 00:04:07,049
varnish on druid or for all the sites

00:04:05,310 --> 00:04:09,470
and services that we were running so

00:04:07,049 --> 00:04:12,060
that the move too fast Lee was pretty

00:04:09,470 --> 00:04:14,670
natural like the details there we can

00:04:12,060 --> 00:04:16,739
upload vcl the rabbits

00:04:14,670 --> 00:04:20,010
that sort of thing and overall it's been

00:04:16,739 --> 00:04:22,460
a really great experience just being

00:04:20,010 --> 00:04:25,020
able to manage the service that way on

00:04:22,460 --> 00:04:28,200
Pantheon we've mostly worked with fastly

00:04:25,020 --> 00:04:30,960
for very large customers and networks of

00:04:28,200 --> 00:04:32,130
sites where they need to have points of

00:04:30,960 --> 00:04:34,290
presence they need to be able to handle

00:04:32,130 --> 00:04:36,360
huge traffic spikes some of the sites on

00:04:34,290 --> 00:04:38,220
the platform our top 100 websites and

00:04:36,360 --> 00:04:40,380
when they get in the news or at the top

00:04:38,220 --> 00:04:43,350
of Google results they're just going to

00:04:40,380 --> 00:04:45,510
get a giant load of traffic and it's not

00:04:43,350 --> 00:04:48,210
an attack it's just legitimate traffic

00:04:45,510 --> 00:04:51,120
that people are trying to load and then

00:04:48,210 --> 00:04:54,750
it also compounds with a lot of this

00:04:51,120 --> 00:04:56,610
situation of the modern web in 2016 how

00:04:54,750 --> 00:05:00,090
many of you have heard about Google's

00:04:56,610 --> 00:05:02,490
changes for page rank with HTTPS okay so

00:05:00,090 --> 00:05:04,560
a sizeable none of the crowd but

00:05:02,490 --> 00:05:06,210
delivering things like that is not just

00:05:04,560 --> 00:05:08,190
free where you just throw it onto your

00:05:06,210 --> 00:05:10,229
website and you have no impact on

00:05:08,190 --> 00:05:12,750
performance every time you introduce a

00:05:10,229 --> 00:05:15,389
service like that especially modern

00:05:12,750 --> 00:05:17,550
HTTPS and TLS negotiation it's making

00:05:15,389 --> 00:05:19,169
multiple round trips to the server and

00:05:17,550 --> 00:05:22,050
in a lot of cases if you're just

00:05:19,169 --> 00:05:24,270
implementing HTTPS on your origin boxes

00:05:22,050 --> 00:05:27,120
then if I'm pulling the site up on my

00:05:24,270 --> 00:05:29,010
mobile device it is going all the way

00:05:27,120 --> 00:05:30,600
back to the origin servers for multiple

00:05:29,010 --> 00:05:35,220
round trips before it even requests the

00:05:30,600 --> 00:05:37,740
page from the server and now that HTTPS

00:05:35,220 --> 00:05:39,660
is pretty necessary for having sites max

00:05:37,740 --> 00:05:42,270
out their page rank and other analytics

00:05:39,660 --> 00:05:44,340
and even providing things like amp pages

00:05:42,270 --> 00:05:46,740
to Google so that you get accelerated

00:05:44,340 --> 00:05:48,810
mobile rendering it becomes more and

00:05:46,740 --> 00:05:50,130
more important to optimize that and

00:05:48,810 --> 00:05:52,830
we've done that for some of our

00:05:50,130 --> 00:05:55,229
customers with deploying CDNs including

00:05:52,830 --> 00:05:57,390
fastly and by having different points of

00:05:55,229 --> 00:05:59,490
presence or in the world instead of a

00:05:57,390 --> 00:06:01,320
device that's visiting site doing

00:05:59,490 --> 00:06:04,110
multiple round trips all the way to an

00:06:01,320 --> 00:06:06,270
origin and say Chicago or Virginia or

00:06:04,110 --> 00:06:08,280
something similar they just do it versus

00:06:06,270 --> 00:06:12,000
the local point of presence which vastly

00:06:08,280 --> 00:06:14,729
has dozens or in the world where it can

00:06:12,000 --> 00:06:17,400
do that negotiation and then fastly can

00:06:14,729 --> 00:06:19,490
maintain a much more cached encrypted

00:06:17,400 --> 00:06:21,450
connection back to the origin so that

00:06:19,490 --> 00:06:24,150
mobile devices just have a much better

00:06:21,450 --> 00:06:26,430
experience in terms of latency for

00:06:24,150 --> 00:06:27,810
requests and ability to scale out that

00:06:26,430 --> 00:06:31,590
traffic without having the

00:06:27,810 --> 00:06:33,660
origin bear the brunt of it and rub

00:06:31,590 --> 00:06:37,230
topically Hillary Clinton calm which is

00:06:33,660 --> 00:06:38,639
all https was hosted on vastly and was

00:06:37,230 --> 00:06:41,250
mentioned during during the debate last

00:06:38,639 --> 00:06:45,300
night with a huge spike on a network

00:06:41,250 --> 00:06:47,190
that's very interesting so I'd like to

00:06:45,300 --> 00:06:48,510
take a little step back does it does

00:06:47,190 --> 00:06:50,760
everyone know what a CDN is because we

00:06:48,510 --> 00:06:53,730
mentioned term before so it's it's a

00:06:50,760 --> 00:06:55,590
cash we have we cash your content close

00:06:53,730 --> 00:06:58,020
to the users around the world so your

00:06:55,590 --> 00:07:00,210
request has to go less far 0 ketsu if

00:06:58,020 --> 00:07:02,490
your users in australia but your servers

00:07:00,210 --> 00:07:04,350
are in frankfurt then you get a cash

00:07:02,490 --> 00:07:06,450
content from from this our servers in

00:07:04,350 --> 00:07:07,350
australia and from sydney for example

00:07:06,450 --> 00:07:09,330
rather than having to go all the way

00:07:07,350 --> 00:07:11,639
back to the origin and we're based on

00:07:09,330 --> 00:07:13,700
open source software called varnish how

00:07:11,639 --> 00:07:17,160
many people have heard of bunch before

00:07:13,700 --> 00:07:19,380
excellent well that's great so varnishes

00:07:17,160 --> 00:07:21,000
is open source 4s boxy you completely

00:07:19,380 --> 00:07:23,700
take you out your varnish from from your

00:07:21,000 --> 00:07:26,160
home server from and put it onto fastly

00:07:23,700 --> 00:07:27,450
and within the mat three seconds will

00:07:26,160 --> 00:07:28,500
push it all way worldwide so you can

00:07:27,450 --> 00:07:30,120
have all sorts of very clever

00:07:28,500 --> 00:07:32,190
configuration but most the time we don't

00:07:30,120 --> 00:07:35,039
need to do that at the triple plugin for

00:07:32,190 --> 00:07:37,820
fastly is just the right thing

00:07:35,039 --> 00:07:40,919
especially for Drupal 8 with cash tags

00:07:37,820 --> 00:07:42,600
too polite is much much clever at

00:07:40,919 --> 00:07:43,890
cashing and deciding the where

00:07:42,600 --> 00:07:48,419
dependencies are so if you change one

00:07:43,890 --> 00:07:50,400
page then one object one page then

00:07:48,419 --> 00:07:52,080
Drupal the plug-in will send

00:07:50,400 --> 00:07:53,640
invalidation to parsley and invalidate

00:07:52,080 --> 00:07:56,190
all the pages which have that piece of

00:07:53,640 --> 00:07:59,400
content on within hand around 150

00:07:56,190 --> 00:08:01,889
milliseconds so newspapers users likely

00:07:59,400 --> 00:08:03,539
independent in the UK because they want

00:08:01,889 --> 00:08:05,070
to have the up-to-date up-to-date news

00:08:03,539 --> 00:08:06,300
and even if you have a highly

00:08:05,070 --> 00:08:09,120
interactive site there are lots of

00:08:06,300 --> 00:08:11,430
assets like CSS JavaScript images etc

00:08:09,120 --> 00:08:14,400
that are getting loaded on every page

00:08:11,430 --> 00:08:16,380
load even for the authenticated users

00:08:14,400 --> 00:08:19,800
and those are just not very Inc that

00:08:16,380 --> 00:08:21,360
much and having a CDN for say a user in

00:08:19,800 --> 00:08:23,039
Australia is the difference between them

00:08:21,360 --> 00:08:25,020
hopping over the Pacific for every

00:08:23,039 --> 00:08:27,930
single one of those assets versus them

00:08:25,020 --> 00:08:29,880
loading 99% of the assets from the CDN

00:08:27,930 --> 00:08:31,500
and then only going back to the origin

00:08:29,880 --> 00:08:35,209
even for a signed-in user for one

00:08:31,500 --> 00:08:37,979
request and so you're only adding in the

00:08:35,209 --> 00:08:38,590
latency of those say trans-pacific or

00:08:37,979 --> 00:08:41,560
transit

00:08:38,590 --> 00:08:43,420
make cables for just that one request

00:08:41,560 --> 00:08:44,800
and that actually provides a pretty good

00:08:43,420 --> 00:08:47,530
experience for users around the world

00:08:44,800 --> 00:08:49,000
because most of those requests are just

00:08:47,530 --> 00:08:51,970
for those assets that will be cached

00:08:49,000 --> 00:08:55,210
close to them and with things like HTTP

00:08:51,970 --> 00:08:57,790
to now which is supported as in via an

00:08:55,210 --> 00:08:59,980
opt-in system one fastly it's possible

00:08:57,790 --> 00:09:03,700
for devices like mobile devices to roll

00:08:59,980 --> 00:09:05,950
up those requests into things where they

00:09:03,700 --> 00:09:10,450
basically are able to use a combined

00:09:05,950 --> 00:09:13,450
HTTP pipeline to efficiently batch those

00:09:10,450 --> 00:09:15,480
requests to the CDN and pull down all of

00:09:13,450 --> 00:09:18,760
those dependent assets much much faster

00:09:15,480 --> 00:09:21,760
it actually takes care of at a lower

00:09:18,760 --> 00:09:24,010
level a lot of the concerns that Drupal

00:09:21,760 --> 00:09:26,110
has tried to solve historically through

00:09:24,010 --> 00:09:29,140
CSS and JavaScript aggregation by

00:09:26,110 --> 00:09:32,320
packing those into single files HTTP two

00:09:29,140 --> 00:09:35,560
allows having those files all be pulled

00:09:32,320 --> 00:09:37,180
in batches and even more than that even

00:09:35,560 --> 00:09:39,970
if you are delivering custom content

00:09:37,180 --> 00:09:43,390
like that to users interacting with HTTP

00:09:39,970 --> 00:09:45,040
to you can actually advise the system

00:09:43,390 --> 00:09:47,350
that those assets are going to be used

00:09:45,040 --> 00:09:50,770
or necessary for the page load and then

00:09:47,350 --> 00:09:52,720
the the CD and server can actually push

00:09:50,770 --> 00:09:55,720
those down to the client like a mobile

00:09:52,720 --> 00:09:57,100
phone before the client even realizes

00:09:55,720 --> 00:09:59,080
that they're totally necessary for

00:09:57,100 --> 00:10:01,780
rendering the page and that means that

00:09:59,080 --> 00:10:03,250
you're even reducing latency that would

00:10:01,780 --> 00:10:05,410
normally be incurred with a mobile

00:10:03,250 --> 00:10:07,120
network because normally it would load

00:10:05,410 --> 00:10:08,500
the page would process it figure out

00:10:07,120 --> 00:10:10,120
what assets it needs and then it's

00:10:08,500 --> 00:10:11,530
another round trip over the mobile

00:10:10,120 --> 00:10:14,290
network even if you're going to a local

00:10:11,530 --> 00:10:17,320
point of presence HTTP two allows the

00:10:14,290 --> 00:10:20,230
push to happen there so you're just kind

00:10:17,320 --> 00:10:25,500
of axing away at latency everything from

00:10:20,230 --> 00:10:27,760
TLS negotiation asset pulling asset

00:10:25,500 --> 00:10:30,340
figuring out what assets are necessary

00:10:27,760 --> 00:10:32,740
for the page going over transatlantic

00:10:30,340 --> 00:10:35,740
and trans-pacific cables for pulling

00:10:32,740 --> 00:10:36,970
those assets and you can you can knock

00:10:35,740 --> 00:10:38,830
off hundreds and hundreds of

00:10:36,970 --> 00:10:44,770
milliseconds from page load times this

00:10:38,830 --> 00:10:47,380
way um when did we want to open the

00:10:44,770 --> 00:10:49,690
floor so I think we can get questions

00:10:47,380 --> 00:10:52,630
ain't ya like we mostly wanted to keep

00:10:49,690 --> 00:10:54,970
this as an open floor I'm also I mean I

00:10:52,630 --> 00:10:56,680
know this is a fasting session I'm most

00:10:54,970 --> 00:10:58,870
of these concepts apply to most CBN's

00:10:56,680 --> 00:11:01,570
are going to be working with so feel

00:10:58,870 --> 00:11:03,280
free to ask about stuff and I can tell

00:11:01,570 --> 00:11:04,900
you at least how fastly handles the

00:11:03,280 --> 00:11:07,090
answers to some of these things but

00:11:04,900 --> 00:11:10,020
their general conceptual issues of web

00:11:07,090 --> 00:11:12,040
architecture as far as I'm concerned

00:11:10,020 --> 00:11:14,200
that we have a microphone because this

00:11:12,040 --> 00:11:16,510
recession is getting recorded so I would

00:11:14,200 --> 00:11:18,220
appreciate if people could use that for

00:11:16,510 --> 00:11:19,270
asking the questions or at least I don't

00:11:18,220 --> 00:11:36,910
think it quite can get passed around

00:11:19,270 --> 00:11:38,650
it's not wireless like I think it can be

00:11:36,910 --> 00:11:40,390
so I can take this one so then at that

00:11:38,650 --> 00:11:42,490
point there's two there's two connection

00:11:40,390 --> 00:11:44,170
paths those from the user to the CDN and

00:11:42,490 --> 00:11:46,450
from the CBN to the origin to your

00:11:44,170 --> 00:11:48,100
servers and so you terminate if you

00:11:46,450 --> 00:11:50,260
terminate on the edge then either you

00:11:48,100 --> 00:11:55,600
can use HTTP back to your origin or you

00:11:50,260 --> 00:11:57,040
can use HTTPS absolute not because I

00:11:55,600 --> 00:11:58,420
best no overhead because you keep the

00:11:57,040 --> 00:12:00,580
connections open for as long as possible

00:11:58,420 --> 00:12:02,470
so it's actually exactly not as bad as

00:12:00,580 --> 00:12:04,600
you might think yeah it's not nearly as

00:12:02,470 --> 00:12:06,250
heavy as the device itself the end user

00:12:04,600 --> 00:12:09,370
negotiating all the way back to origin

00:12:06,250 --> 00:12:11,140
because TLS the the way that the

00:12:09,370 --> 00:12:13,420
connection structured it happens in two

00:12:11,140 --> 00:12:14,770
phases first is this asynchronous space

00:12:13,420 --> 00:12:16,690
which is really expensive for

00:12:14,770 --> 00:12:18,580
negotiating a shared secret and then

00:12:16,690 --> 00:12:20,560
once you have a shared secret almost any

00:12:18,580 --> 00:12:21,940
modern device even a mobile phone is

00:12:20,560 --> 00:12:24,730
able to process the encryption wire

00:12:21,940 --> 00:12:26,740
speed once that negotiation occurs but a

00:12:24,730 --> 00:12:28,510
CDN like vasiliy is going to do that

00:12:26,740 --> 00:12:30,190
negotiation once and it's going to

00:12:28,510 --> 00:12:33,070
either keep the connection open or cash

00:12:30,190 --> 00:12:35,110
the shared secret so that it doesn't

00:12:33,070 --> 00:12:39,550
have to do undergo the full set up every

00:12:35,110 --> 00:12:42,460
time it talks to the origin um even more

00:12:39,550 --> 00:12:44,440
moreover fastly has a neat option where

00:12:42,460 --> 00:12:46,810
you can put in your own client

00:12:44,440 --> 00:12:48,700
certificate to authenticate fast Lee's

00:12:46,810 --> 00:12:52,030
connection back to your origin so if

00:12:48,700 --> 00:12:54,760
you're really up on how things like x509

00:12:52,030 --> 00:12:55,580
work you can make it a very clean

00:12:54,760 --> 00:12:57,470
connection back

00:12:55,580 --> 00:12:59,240
the origin where you have authenticated

00:12:57,470 --> 00:13:01,130
with a hundred percent confidence that

00:12:59,240 --> 00:13:02,900
the connection is coming from fastly and

00:13:01,130 --> 00:13:04,760
all the rules you've put in place it

00:13:02,900 --> 00:13:06,410
fastly have been applied so if you're

00:13:04,760 --> 00:13:08,540
doing things like mitigating an attack

00:13:06,410 --> 00:13:10,190
or trying to protect your origin it

00:13:08,540 --> 00:13:11,780
provides a good facility for doing that

00:13:10,190 --> 00:13:14,360
that doesn't involve you constantly

00:13:11,780 --> 00:13:15,620
having to update IP lists like the

00:13:14,360 --> 00:13:22,610
traditional way of validating that

00:13:15,620 --> 00:13:24,260
something came from a CDN you would like

00:13:22,610 --> 00:13:37,480
to ask question but the mic is car away

00:13:24,260 --> 00:13:40,160
we can just repeat it and what about

00:13:37,480 --> 00:13:43,460
searches for example like a complex

00:13:40,160 --> 00:13:46,610
solar search that is parsing the string

00:13:43,460 --> 00:13:48,410
of the URL how would you okay so the

00:13:46,610 --> 00:13:51,970
question is about I guess personalized

00:13:48,410 --> 00:13:55,370
content and yeah post live content

00:13:51,970 --> 00:13:57,080
pretty much I join me ticket sure okay

00:13:55,370 --> 00:13:58,960
so there are a few different ways of

00:13:57,080 --> 00:14:03,230
handling that sort of Assembly of a page

00:13:58,960 --> 00:14:04,700
there in Drupal 8 we now have something

00:14:03,230 --> 00:14:06,560
called big pipe that allows you to pump

00:14:04,700 --> 00:14:09,650
out that content through a streamed

00:14:06,560 --> 00:14:12,200
request doing implementing the big pipe

00:14:09,650 --> 00:14:13,940
where you put ESI at the bottom of the

00:14:12,200 --> 00:14:16,670
page to basically pull the big pipe

00:14:13,940 --> 00:14:18,230
content with fastly would allow you to

00:14:16,670 --> 00:14:20,120
have the initial page structure be

00:14:18,230 --> 00:14:22,010
cached ship out to the client before

00:14:20,120 --> 00:14:24,500
Drupal even knows the request is coming

00:14:22,010 --> 00:14:26,240
in and then Drupal can handle shipping

00:14:24,500 --> 00:14:28,760
the customized content through big pipe

00:14:26,240 --> 00:14:30,710
as an addendum to that a request so that

00:14:28,760 --> 00:14:32,810
the client still sees it as just one big

00:14:30,710 --> 00:14:34,970
request where the initial data came in

00:14:32,810 --> 00:14:37,910
very fast and then the subsequent data

00:14:34,970 --> 00:14:40,400
comes from Drupal other ways of doing it

00:14:37,910 --> 00:14:43,220
would involve separate requests for that

00:14:40,400 --> 00:14:44,690
content where you could have some of the

00:14:43,220 --> 00:14:46,760
request cached and some of them go back

00:14:44,690 --> 00:14:48,800
to the origin I don't know if you can

00:14:46,760 --> 00:14:51,200
show the graph on there you can actually

00:14:48,800 --> 00:14:53,600
see the hit ratio graph on here which is

00:14:51,200 --> 00:14:55,310
really showing like this is a

00:14:53,600 --> 00:14:57,560
particularly exceptional hit ratio

00:14:55,310 --> 00:14:59,330
because this is very very I'm sorry what

00:14:57,560 --> 00:15:03,110
let me switch over here yeah to a more

00:14:59,330 --> 00:15:05,930
normal site yeah this is a more typical

00:15:03,110 --> 00:15:08,210
site it's still a very good hit ratio at

00:15:05,930 --> 00:15:11,790
least some the hit ratio down there

00:15:08,210 --> 00:15:14,550
the typical site is going still going to

00:15:11,790 --> 00:15:17,010
have a pretty high one but the reason to

00:15:14,550 --> 00:15:19,020
pay attention to that is you want to

00:15:17,010 --> 00:15:21,350
make sure that even with the

00:15:19,020 --> 00:15:23,880
customization of content that you're not

00:15:21,350 --> 00:15:25,800
skipping the cash like one of the common

00:15:23,880 --> 00:15:27,600
ways to accidentally skip the cash is

00:15:25,800 --> 00:15:28,950
once you've set up a session that header

00:15:27,600 --> 00:15:31,890
comes in you might have configured

00:15:28,950 --> 00:15:34,860
varnish with vcl to say any requests

00:15:31,890 --> 00:15:36,450
coming in with a session ID bypasses the

00:15:34,860 --> 00:15:38,970
cash that'll give you a pork hit rate

00:15:36,450 --> 00:15:40,590
but you can put a rule into something

00:15:38,970 --> 00:15:42,900
like fastly that says for all these

00:15:40,590 --> 00:15:45,870
static assets ignore whether they have a

00:15:42,900 --> 00:15:47,700
session or not you could do the same for

00:15:45,870 --> 00:15:50,090
certain block requests as well they were

00:15:47,700 --> 00:15:51,960
dynamically added to the page and

00:15:50,090 --> 00:15:53,910
ultimately you just want to look at your

00:15:51,960 --> 00:15:56,160
hit ratio another thing you can do is

00:15:53,910 --> 00:15:58,380
you can configure fastly to ship its log

00:15:56,160 --> 00:16:00,330
data out to another service for analysis

00:15:58,380 --> 00:16:02,970
and then you can look at what's hitting

00:16:00,330 --> 00:16:04,980
and missing and depending on how you

00:16:02,970 --> 00:16:08,100
configure your vcl you can even have it

00:16:04,980 --> 00:16:10,530
hint at why and then that can help you

00:16:08,100 --> 00:16:12,990
optimize the experience for an

00:16:10,530 --> 00:16:15,060
authentication heavy site that's

00:16:12,990 --> 00:16:16,290
speaking of that that log shipping we

00:16:15,060 --> 00:16:19,350
use that pretty heavily on drupal.org

00:16:16,290 --> 00:16:21,570
because we use those blogs for downloads

00:16:19,350 --> 00:16:22,920
and for like Rajic usage statistics so

00:16:21,570 --> 00:16:25,260
all the trapping ones coming into

00:16:22,920 --> 00:16:26,760
updates tracks like what is being

00:16:25,260 --> 00:16:28,710
requested for updates that's how those

00:16:26,760 --> 00:16:30,270
statistics you generated and being able

00:16:28,710 --> 00:16:33,570
to ship those logs back to us for

00:16:30,270 --> 00:16:34,950
processing is another thing I review

00:16:33,570 --> 00:16:39,810
mentioned with CSI does everyone know

00:16:34,950 --> 00:16:41,760
what that is yeah yes I edge site edge

00:16:39,810 --> 00:16:44,190
side include it's a tag you can put into

00:16:41,760 --> 00:16:45,900
a page that says at this point in the

00:16:44,190 --> 00:16:50,430
page I want you to seamlessly integrate

00:16:45,900 --> 00:16:52,260
the response to this URL so that you can

00:16:50,430 --> 00:16:53,880
hit an initial page and then what

00:16:52,260 --> 00:16:56,010
varnish does is it'll ship out the data

00:16:53,880 --> 00:16:57,480
until it hits the ESI tag and then it

00:16:56,010 --> 00:16:59,520
will notice oh I need to pull this

00:16:57,480 --> 00:17:01,470
content now but the rules for that

00:16:59,520 --> 00:17:03,930
content can be handled completely

00:17:01,470 --> 00:17:06,420
independently of the main content that

00:17:03,930 --> 00:17:10,170
it's delivering so you can ship out a

00:17:06,420 --> 00:17:11,970
framework a skeleton page and then use

00:17:10,170 --> 00:17:15,810
that I think was talking to Fabian

00:17:11,970 --> 00:17:18,600
actually a few days ago about using that

00:17:15,810 --> 00:17:20,490
for integrate with big pipe we're even

00:17:18,600 --> 00:17:21,100
for authenticated traffic the initial

00:17:20,490 --> 00:17:23,319
part of the

00:17:21,100 --> 00:17:25,510
page comes cashed out of the CDN and

00:17:23,319 --> 00:17:27,900
then Drupal dynamically handles the

00:17:25,510 --> 00:17:30,039
subsequent customization of the finish I

00:17:27,900 --> 00:17:31,900
don't know a lot of production sites

00:17:30,039 --> 00:17:34,120
that are doing this yet it's not I mean

00:17:31,900 --> 00:17:37,299
as if for people who are present for the

00:17:34,120 --> 00:17:39,600
keynote earlier today of big pipe is

00:17:37,299 --> 00:17:42,160
still in beta in Drupal 8 but it's

00:17:39,600 --> 00:17:45,370
assuming it continues to mature fit into

00:17:42,160 --> 00:17:57,789
a stable configuration in Drupal 8 point

00:17:45,370 --> 00:18:00,309
3 or 8.4 exactly and you can totally use

00:17:57,789 --> 00:18:03,700
off cash with fastly right by using off

00:18:00,309 --> 00:18:05,200
caches published vcl and then that will

00:18:03,700 --> 00:18:06,970
properly handle the ruleset that's

00:18:05,200 --> 00:18:09,130
necessary for off cash to determine

00:18:06,970 --> 00:18:30,460
which requests are keyed off of things

00:18:09,130 --> 00:18:32,350
based on using these or you can use

00:18:30,460 --> 00:18:36,100
anything you want and varnish and

00:18:32,350 --> 00:18:37,990
unfasten a you can there are two systems

00:18:36,100 --> 00:18:40,240
on festy for it there's a rule system

00:18:37,990 --> 00:18:42,640
that has a GUI configuration or you can

00:18:40,240 --> 00:18:45,520
put in your el pan header patterns

00:18:42,640 --> 00:18:46,929
cookie patterns things like that and and

00:18:45,520 --> 00:18:48,880
make a decision of whether you're

00:18:46,929 --> 00:18:53,320
bypassing the cash or trying to hit the

00:18:48,880 --> 00:18:54,669
cash or not and then also you can go and

00:18:53,320 --> 00:18:56,559
if you really need to you can unlock

00:18:54,669 --> 00:18:58,630
full vcl which allows you to really

00:18:56,559 --> 00:19:01,150
actually just write code that is

00:18:58,630 --> 00:19:04,559
literally has if statements in it to

00:19:01,150 --> 00:19:10,870
determine how to handle that request and

00:19:04,559 --> 00:19:13,179
you can use regex if you want to show

00:19:10,870 --> 00:19:16,299
the VCL and show I can't let the VCL for

00:19:13,179 --> 00:19:20,919
this boy but you also state the DM of

00:19:16,299 --> 00:19:23,650
the base well you can I would advise

00:19:20,919 --> 00:19:26,080
against it of i would i would encourage

00:19:23,650 --> 00:19:29,440
you to use standard HTTP headers more

00:19:26,080 --> 00:19:31,990
possible and vastly will properly patch

00:19:29,440 --> 00:19:33,070
parse things called cache control

00:19:31,990 --> 00:19:35,320
headers

00:19:33,070 --> 00:19:36,700
and you also have the opportunity to use

00:19:35,320 --> 00:19:38,919
something that's called surrogate

00:19:36,700 --> 00:19:41,019
control headers which are specifically

00:19:38,919 --> 00:19:43,870
consumed by something like a CDN and

00:19:41,019 --> 00:19:45,250
then thrown away so you can send in one

00:19:43,870 --> 00:19:47,350
cache control headers that goes down to

00:19:45,250 --> 00:19:49,720
use your browsers and fastly won't touch

00:19:47,350 --> 00:19:52,389
it and then you can set a surrogate

00:19:49,720 --> 00:19:53,679
control header to tell the CDN how long

00:19:52,389 --> 00:19:55,899
to keep the page if you want to do

00:19:53,679 --> 00:19:57,039
different timings Drupal directly

00:19:55,899 --> 00:19:59,049
supports using cache control headers

00:19:57,039 --> 00:20:01,120
though and fast we will support those

00:19:59,049 --> 00:20:02,649
out of the box so a good example of that

00:20:01,120 --> 00:20:04,539
would be a live blog where you want

00:20:02,649 --> 00:20:05,710
people to have the life information so

00:20:04,539 --> 00:20:07,570
you make the cache control headed for

00:20:05,710 --> 00:20:09,850
the browser to be very short say a few

00:20:07,570 --> 00:20:13,840
seconds and then you cash on those CDN

00:20:09,850 --> 00:20:15,940
for a week but invalidate the the page

00:20:13,840 --> 00:20:17,019
on CDN whenever there's new content so

00:20:15,940 --> 00:20:19,419
the browsers will keep on getting back

00:20:17,019 --> 00:20:21,519
to the page will keep on getting 30 for

00:20:19,419 --> 00:20:23,159
not modified but when there is new

00:20:21,519 --> 00:20:25,299
content that will get straight away and

00:20:23,159 --> 00:20:27,850
when it comes to delivering things like

00:20:25,299 --> 00:20:29,620
three or four not modified delivering

00:20:27,850 --> 00:20:31,570
something like fastly is actually pretty

00:20:29,620 --> 00:20:33,759
essential to getting that right because

00:20:31,570 --> 00:20:35,110
if you just deploy your own fleet of

00:20:33,759 --> 00:20:36,820
varnish boxes they're going to

00:20:35,110 --> 00:20:39,539
independently cash the content and

00:20:36,820 --> 00:20:43,210
they're going to have different IDs for

00:20:39,539 --> 00:20:44,799
for women content was created and the

00:20:43,210 --> 00:20:46,919
e-tag for the content which is what the

00:20:44,799 --> 00:20:49,929
browser prefers to use for validating it

00:20:46,919 --> 00:20:52,960
fastly does request hashing at a higher

00:20:49,929 --> 00:20:55,480
level for requests in its I believe it's

00:20:52,960 --> 00:20:57,639
in the master vcl where it determines

00:20:55,480 --> 00:20:59,919
what server is to send the content to so

00:20:57,639 --> 00:21:02,769
that if you have a page and it's cached

00:20:59,919 --> 00:21:06,460
in fastly it will always hit that cash

00:21:02,769 --> 00:21:08,289
on that one on the single system that is

00:21:06,460 --> 00:21:10,600
responsible for that piece of content

00:21:08,289 --> 00:21:12,340
and that ensures that if you're

00:21:10,600 --> 00:21:13,330
distributing something out and you want

00:21:12,340 --> 00:21:15,429
to deliver something like three or four

00:21:13,330 --> 00:21:17,080
not modified so browsers can revalidate

00:21:15,429 --> 00:21:19,450
their cash they will efficiently

00:21:17,080 --> 00:21:21,370
revalidate rather than if you have the

00:21:19,450 --> 00:21:23,080
fleet of boxes they could randomly hit a

00:21:21,370 --> 00:21:24,759
different one and then the browser will

00:21:23,080 --> 00:21:26,649
that'll have a different etag and then

00:21:24,759 --> 00:21:28,299
the browser will think my stuff is too

00:21:26,649 --> 00:21:31,360
old and it will have to pull the page

00:21:28,299 --> 00:21:34,000
down again so a fleet of varnish boxes

00:21:31,360 --> 00:21:35,679
is still better than nothing but the

00:21:34,000 --> 00:21:37,539
kind of hashing that a system like

00:21:35,679 --> 00:21:41,110
fastly does will get the hit rates to go

00:21:37,539 --> 00:21:44,190
even a whole level above that for for

00:21:41,110 --> 00:21:44,190
that sort of management

00:21:44,529 --> 00:21:53,330
example so we have the option we use

00:21:49,640 --> 00:21:55,820
costly to invalidate dynamically if

00:21:53,330 --> 00:21:58,970
someone posts something or you know your

00:21:55,820 --> 00:22:04,179
vote for the page because of my parsley

00:21:58,970 --> 00:22:07,760
servers but a dynamic intake get cast

00:22:04,179 --> 00:22:11,149
for as long as someone writes down on

00:22:07,760 --> 00:22:13,220
your post so this is a something can be

00:22:11,149 --> 00:22:14,929
worked out with fruit so like that you

00:22:13,220 --> 00:22:16,309
don't even need you for invalidation you

00:22:14,929 --> 00:22:18,409
want to use the fasting module for

00:22:16,309 --> 00:22:20,690
drupal and then that will talk to your

00:22:18,409 --> 00:22:22,520
fasting API to invalidate the content

00:22:20,690 --> 00:22:24,320
and then that way you can catch the

00:22:22,520 --> 00:22:28,100
clinton in the CD in for a long time and

00:22:24,320 --> 00:22:29,450
then it hooks into Drupal's AP ice so

00:22:28,100 --> 00:22:31,070
that it knows when you create a new node

00:22:29,450 --> 00:22:34,669
or update a node and then it tells

00:22:31,070 --> 00:22:37,279
fastly expire this and fastly uses this

00:22:34,669 --> 00:22:39,770
asynchronous distribution model for

00:22:37,279 --> 00:22:41,870
cache invalidation that reaches around

00:22:39,770 --> 00:22:45,020
the globe in usually under a half second

00:22:41,870 --> 00:23:16,789
to all the points of presence I'd say a

00:22:45,020 --> 00:23:18,799
fifth of a second a second okay yeah

00:23:16,789 --> 00:23:22,010
repeat the question of the question was

00:23:18,799 --> 00:23:24,260
if I'm using fastly another CDN and

00:23:22,010 --> 00:23:26,470
everyone accesses my site through that

00:23:24,260 --> 00:23:30,559
do I need to have additional caching

00:23:26,470 --> 00:23:35,390
inside for the fork specifically for

00:23:30,559 --> 00:23:38,059
Drupal 8 and I would say no outside of

00:23:35,390 --> 00:23:40,340
like for Drupal Drupal still need to

00:23:38,059 --> 00:23:41,899
cash in and do all of its internal sort

00:23:40,340 --> 00:23:43,450
of caching but as far as adding another

00:23:41,899 --> 00:23:45,760
layer of varnish or something like that

00:23:43,450 --> 00:23:48,110
when we rolled fastly out for drupal.org

00:23:45,760 --> 00:23:50,090
we removed our internal varnish

00:23:48,110 --> 00:23:51,140
completely removed our load balancers

00:23:50,090 --> 00:23:53,330
completely

00:23:51,140 --> 00:23:56,150
sticking with Vasily's origin shield

00:23:53,330 --> 00:23:59,030
system and managing all of the edge from

00:23:56,150 --> 00:24:01,460
fast legs interface and so fastly so all

00:23:59,030 --> 00:24:04,550
the requests caching and logic gets

00:24:01,460 --> 00:24:06,350
handled at fastly all of the requests

00:24:04,550 --> 00:24:09,080
that are hitting True Blood order from

00:24:06,350 --> 00:24:11,090
around the world flow through the origin

00:24:09,080 --> 00:24:13,280
shield which is in Seattle and then to

00:24:11,090 --> 00:24:17,570
our data center I will just period with

00:24:13,280 --> 00:24:19,730
that internet exchange in Seattle so all

00:24:17,570 --> 00:24:23,000
the requests follow through a single

00:24:19,730 --> 00:24:24,710
origin that origin probably has whatever

00:24:23,000 --> 00:24:26,180
is being requested it does request

00:24:24,710 --> 00:24:28,310
collapsing I believe was it does a nice

00:24:26,180 --> 00:24:30,260
feature so if there's a request for the

00:24:28,310 --> 00:24:33,320
same thing twice like that only one

00:24:30,260 --> 00:24:35,210
request comes back to our organ and that

00:24:33,320 --> 00:24:38,150
has been working beautifully so I I

00:24:35,210 --> 00:24:39,410
would say no like you can remove your

00:24:38,150 --> 00:24:41,360
varnish that's running internally if

00:24:39,410 --> 00:24:43,640
you're using and it's worth noting this

00:24:41,360 --> 00:24:45,080
is not a general feature of CDN so that

00:24:43,640 --> 00:24:46,460
most CD ins have their points of

00:24:45,080 --> 00:24:48,560
presence and when the point of presence

00:24:46,460 --> 00:24:52,010
mrs. it goes all the way back to your

00:24:48,560 --> 00:24:53,870
origin and so if you have traffic that's

00:24:52,010 --> 00:24:55,910
pretty distributed around the world you

00:24:53,870 --> 00:24:57,860
might have a lot of traffic reaching or

00:24:55,910 --> 00:24:59,630
origin still and might want to run a

00:24:57,860 --> 00:25:02,510
catch there but with fastly and the

00:24:59,630 --> 00:25:06,050
origin shield you actually have a cache

00:25:02,510 --> 00:25:07,370
that is that can hit all traffic before

00:25:06,050 --> 00:25:09,620
it hits your origin no matter where in

00:25:07,370 --> 00:25:11,060
the world is coming from right so you

00:25:09,620 --> 00:25:12,530
have something which is a big event

00:25:11,060 --> 00:25:14,620
coming up and everyone request the same

00:25:12,530 --> 00:25:17,600
page will same object all at same time

00:25:14,620 --> 00:25:19,040
then you'll only get one request to your

00:25:17,600 --> 00:25:20,630
origin for that even though thousands

00:25:19,040 --> 00:25:22,280
people around the world will fetch it

00:25:20,630 --> 00:25:23,600
all that will fetch well as objects and

00:25:22,280 --> 00:25:25,760
firstly you can even take it one step

00:25:23,600 --> 00:25:28,010
further than that with a header that

00:25:25,760 --> 00:25:30,710
that sets an option called steel wall

00:25:28,010 --> 00:25:32,360
revalidate which means that let's say

00:25:30,710 --> 00:25:34,940
you have a page that's cached for five

00:25:32,360 --> 00:25:37,730
minutes and it's five minutes in one

00:25:34,940 --> 00:25:39,230
second now and it might let's say it's a

00:25:37,730 --> 00:25:41,180
heavy page in your website but takes a

00:25:39,230 --> 00:25:42,680
few seconds to generate you can turn on

00:25:41,180 --> 00:25:45,620
this thing called stale wall revalidate

00:25:42,680 --> 00:25:47,720
and what that'll do is fastly will still

00:25:45,620 --> 00:25:50,540
deliver the old version of the content

00:25:47,720 --> 00:25:53,030
until then the origin has replaced it in

00:25:50,540 --> 00:25:55,010
the cache so at that five minute and one

00:25:53,030 --> 00:25:58,100
second mark it makes the request to the

00:25:55,010 --> 00:26:00,560
origin to get a fresh copy of the page

00:25:58,100 --> 00:26:03,470
but the customer or browser does not

00:26:00,560 --> 00:26:04,509
wait on that to happen so it does in

00:26:03,470 --> 00:26:06,940
addition to the request

00:26:04,509 --> 00:26:10,659
lapsing you can even have your users

00:26:06,940 --> 00:26:12,459
never wait on a page 2 to freshen if

00:26:10,659 --> 00:26:16,179
it's a high-traffic page and getting a

00:26:12,459 --> 00:26:17,469
lot of traffic as the site and we have

00:26:16,179 --> 00:26:20,139
the vcl for that on screen right now

00:26:17,469 --> 00:26:22,419
yeah so that I mean this is this is vcl

00:26:20,139 --> 00:26:24,369
if anyone recognizes vcl and that's

00:26:22,419 --> 00:26:27,459
that's the option so for updates we have

00:26:24,369 --> 00:26:29,709
120 seconds LOL rip we validate and if

00:26:27,459 --> 00:26:31,419
there's an error and it's cached we just

00:26:29,709 --> 00:26:34,269
let it so whatever that updated so the

00:26:31,419 --> 00:27:08,019
origin goes online some reason updates

00:26:34,269 --> 00:27:12,940
still are available you can't really

00:27:08,019 --> 00:27:17,440
handle custom dynamic pages with a CDN

00:27:12,940 --> 00:27:23,619
if the if the origins offline and I'm

00:27:17,440 --> 00:27:42,699
not sure a way that you could safely for

00:27:23,619 --> 00:27:45,519
example so to repeat to repeat the

00:27:42,699 --> 00:27:47,859
question and the question is if you have

00:27:45,519 --> 00:27:50,049
authenticated traffic and the origin

00:27:47,859 --> 00:27:53,019
goes down or can't it can't access it

00:27:50,049 --> 00:27:54,999
could you fall back to having static

00:27:53,019 --> 00:27:57,369
content and the answer is yes you could

00:27:54,999 --> 00:27:59,619
do that with custom vcl by doing

00:27:57,369 --> 00:28:02,289
something where you detect you initially

00:27:59,619 --> 00:28:03,759
detect that the user has a session and

00:28:02,289 --> 00:28:05,889
then you would say I want to pass the

00:28:03,759 --> 00:28:07,929
spec that back end and then what you

00:28:05,889 --> 00:28:09,669
would get the error or failure to

00:28:07,929 --> 00:28:11,889
connect and then you could put request

00:28:09,669 --> 00:28:14,409
handling in there that says even if you

00:28:11,889 --> 00:28:16,779
had a session you could tell varnish to

00:28:14,409 --> 00:28:18,310
retry the request and mark it in a way

00:28:16,779 --> 00:28:21,310
where it basically says

00:28:18,310 --> 00:28:23,440
I got an error trying to handle this cus

00:28:21,310 --> 00:28:25,510
this dynamic page from origin and then

00:28:23,440 --> 00:28:27,970
when it goes back into the DCL to

00:28:25,510 --> 00:28:29,230
process it again you could have a rule

00:28:27,970 --> 00:28:32,350
in there where even if they have a

00:28:29,230 --> 00:28:35,200
session if the original origin request

00:28:32,350 --> 00:28:37,270
failed you could say you could treat it

00:28:35,200 --> 00:28:40,000
as a cached request probably strip out

00:28:37,270 --> 00:28:48,880
the session and then they would get an

00:28:40,000 --> 00:28:50,410
anonymous page instead of an error there

00:28:48,880 --> 00:28:52,840
I think there are thresholds set and

00:28:50,410 --> 00:28:54,640
request the origin configurations so the

00:28:52,840 --> 00:28:57,010
way we expand this is is a very advanced

00:28:54,640 --> 00:28:59,290
feature of stale if error which is a

00:28:57,010 --> 00:29:00,790
proposed HD standard and the way farty

00:28:59,290 --> 00:29:02,290
does is we have health checks so we'll

00:29:00,790 --> 00:29:04,960
check will check whether your origin is

00:29:02,290 --> 00:29:08,200
responding within within a defined

00:29:04,960 --> 00:29:09,850
timeout so I guess you could make the

00:29:08,200 --> 00:29:13,210
origin fail health checks if it's not

00:29:09,850 --> 00:29:44,040
responding within a few seconds and then

00:29:13,210 --> 00:29:44,040
go through this mechanism the audience

00:29:46,850 --> 00:29:57,450
the world most of the users would you

00:29:54,179 --> 00:30:03,390
say that it's still useful in any way

00:29:57,450 --> 00:30:06,780
these hideous but it absolutely it's for

00:30:03,390 --> 00:30:08,790
multiple reasons one is unless you're

00:30:06,780 --> 00:30:11,400
deploying HTTP two to your origin

00:30:08,790 --> 00:30:13,070
servers it provides that for users which

00:30:11,400 --> 00:30:16,650
accelerates their page loading times it

00:30:13,070 --> 00:30:19,050
provides faster TLS negotiation because

00:30:16,650 --> 00:30:20,760
odds are fast these boxes are going to

00:30:19,050 --> 00:30:23,850
negotiate it faster than your organs or

00:30:20,760 --> 00:30:26,880
hers would three unless your origin

00:30:23,850 --> 00:30:29,880
servers support ipv6 in a lot of regions

00:30:26,880 --> 00:30:31,380
mobile phones prefer ipv6 and there's

00:30:29,880 --> 00:30:33,450
usually a twenty to thirty percent

00:30:31,380 --> 00:30:36,690
overhead or going through the

00:30:33,450 --> 00:30:38,520
carrier-grade NAT for v4 to go to the

00:30:36,690 --> 00:30:41,070
website so if you can make your site

00:30:38,520 --> 00:30:43,110
available over ipv6 you can minimize

00:30:41,070 --> 00:30:45,000
load times and fastly can do that as

00:30:43,110 --> 00:30:47,460
well for you even if your origin servers

00:30:45,000 --> 00:30:50,750
don't support it and also just

00:30:47,460 --> 00:30:50,750
infrastructure you don't have to manage

00:30:57,320 --> 00:31:01,200
so the interesting thing about about the

00:30:59,850 --> 00:31:04,170
Internet has changed quite a lot over

00:31:01,200 --> 00:31:06,360
the last 20 years and we're all our

00:31:04,170 --> 00:31:08,120
servers are hosted next or in or close

00:31:06,360 --> 00:31:12,420
to internet connection internet

00:31:08,120 --> 00:31:14,550
connection points so all traffic in in

00:31:12,420 --> 00:31:17,730
Netherlands goes through m6 for example

00:31:14,550 --> 00:31:18,660
or there's d kicks in Germany so the

00:31:17,730 --> 00:31:22,170
internet is very well connected

00:31:18,660 --> 00:31:24,000
especially for your origins so it's less

00:31:22,170 --> 00:31:25,559
of a problem if if you're in Germany

00:31:24,000 --> 00:31:27,090
then it's going to be fast if if using

00:31:25,559 --> 00:31:27,840
that if you only have one pop loading

00:31:27,090 --> 00:31:29,610
journey it's still going to be

00:31:27,840 --> 00:31:31,650
relatively fast and it will be in

00:31:29,610 --> 00:31:33,740
structure you don't have to manage you

00:31:31,650 --> 00:31:36,330
you can also can choose your

00:31:33,740 --> 00:31:38,460
configuration with fastly to only use

00:31:36,330 --> 00:31:39,840
certain regions of points of presence as

00:31:38,460 --> 00:31:42,150
well like if you just want to do Europe

00:31:39,840 --> 00:31:44,040
or just want to do North America however

00:31:42,150 --> 00:31:45,480
one reason that you might want to

00:31:44,040 --> 00:31:47,070
actually have advertised points of

00:31:45,480 --> 00:31:49,860
presence around the globe is for

00:31:47,070 --> 00:31:53,840
mitigating attacks because with any cast

00:31:49,860 --> 00:31:56,250
routing and geo DNS it ensures that

00:31:53,840 --> 00:31:57,450
attackers that are trying to access your

00:31:56,250 --> 00:31:58,799
website are

00:31:57,450 --> 00:32:01,710
routed to their local point of presence

00:31:58,799 --> 00:32:05,010
so let's say you have a botnet in Russia

00:32:01,710 --> 00:32:06,750
and they are being used to try and

00:32:05,010 --> 00:32:08,429
attack your website they're all going to

00:32:06,750 --> 00:32:10,919
be targeted at points of presence that

00:32:08,429 --> 00:32:12,720
fastly operates closer to the attackers

00:32:10,919 --> 00:32:14,070
and not on the point of presence that

00:32:12,720 --> 00:32:16,230
your customers are accessing the site

00:32:14,070 --> 00:32:20,399
for so then you can shut down the attack

00:32:16,230 --> 00:32:23,070
at a point that doesn't even exist in

00:32:20,399 --> 00:32:26,010
your normal traffic flow well before it

00:32:23,070 --> 00:32:55,159
touches your organ systems the actual

00:32:26,010 --> 00:32:55,159
caches that your customers free network

00:32:55,279 --> 00:33:01,950
has something like that to accommodate

00:32:58,230 --> 00:33:04,080
the local county traffic so firstly

00:33:01,950 --> 00:33:06,779
we're generally in instant exchanges but

00:33:04,080 --> 00:33:09,330
we we pay local providers so we'll have

00:33:06,779 --> 00:33:11,850
fast connections to it too big ISPs for

00:33:09,330 --> 00:33:13,380
example which is really what Akamai is

00:33:11,850 --> 00:33:16,350
probably doing they're probably single

00:33:13,380 --> 00:33:19,190
appearing agreement with the ISP yeah

00:33:16,350 --> 00:33:25,590
much probably I mean to avoid the

00:33:19,190 --> 00:33:36,360
getting out the country and ethernet and

00:33:25,590 --> 00:33:39,269
use it backbone already there yeah there

00:33:36,360 --> 00:33:41,450
we already pay and when we're always

00:33:39,269 --> 00:33:43,860
working on improving connections

00:33:41,450 --> 00:33:45,029
sometimes sometimes there are cable cuts

00:33:43,860 --> 00:33:46,289
on the internet to make this thing as

00:33:45,029 --> 00:33:47,700
going a bit slower before between

00:33:46,289 --> 00:33:52,620
different countries we have to root

00:33:47,700 --> 00:33:54,389
around now play it both panting back but

00:33:52,620 --> 00:33:55,889
yeah it's it's in fast Lee's interest

00:33:54,389 --> 00:33:57,690
appear as well because it reduces the

00:33:55,889 --> 00:33:59,169
cost of transport yeah they actually

00:33:57,690 --> 00:34:01,789
appeared with our

00:33:59,169 --> 00:34:05,479
when they added to the Seattle internet

00:34:01,789 --> 00:34:07,639
exchange vastly nicely support was like

00:34:05,479 --> 00:34:09,339
hey do you guys have a clear up here

00:34:07,639 --> 00:34:11,869
would it be possible to hear with our

00:34:09,339 --> 00:34:13,190
door provider that are like yeah sure

00:34:11,869 --> 00:34:29,169
you know if get us in contact with their

00:34:13,190 --> 00:34:29,169
knock and there's usually because yeah

00:34:59,730 --> 00:35:07,150
sure sure I'll jump in there so um so

00:35:05,350 --> 00:35:08,920
you've seen some of the pcl already so

00:35:07,150 --> 00:35:10,960
pcl is kind of like a little

00:35:08,920 --> 00:35:12,400
programmatic language you can do if then

00:35:10,960 --> 00:35:15,160
else lots of rules look regular

00:35:12,400 --> 00:35:18,010
expressions and you can use that to

00:35:15,160 --> 00:35:20,770
either whitelist so this is how your

00:35:18,010 --> 00:35:22,630
rail string is going to go only let URLs

00:35:20,770 --> 00:35:25,000
and queer parameters which match this to

00:35:22,630 --> 00:35:26,320
go to through to the origin or two black

00:35:25,000 --> 00:35:28,359
lists if you have some traffic which

00:35:26,320 --> 00:35:30,070
looks like which looks malicious you can

00:35:28,359 --> 00:35:31,960
even match it with with your code and

00:35:30,070 --> 00:35:33,460
that way you could block traffic at the

00:35:31,960 --> 00:35:35,470
edge and it wouldn't have to hit hit

00:35:33,460 --> 00:35:37,240
your origin and we would we could help

00:35:35,470 --> 00:35:40,030
you with that and there was second

00:35:37,240 --> 00:35:40,930
question which I was amazingly forgot it

00:35:40,030 --> 00:35:42,550
was about how can help with

00:35:40,930 --> 00:35:45,100
authenticated users sense case the easy

00:35:42,550 --> 00:35:46,930
well thank you it's quite tricky because

00:35:45,100 --> 00:35:48,220
you're hit ratio will be quite a bit a

00:35:46,930 --> 00:35:51,010
little bit lower if you have lots of

00:35:48,220 --> 00:35:53,560
offense get all fancy gated users but by

00:35:51,010 --> 00:35:54,820
using raising a CDN rather than going

00:35:53,560 --> 00:35:56,410
over the general in said it will still

00:35:54,820 --> 00:35:59,109
be faster if you have to go back to the

00:35:56,410 --> 00:36:00,700
origin because we're we have we optimize

00:35:59,109 --> 00:36:03,580
our reading over our network so your

00:36:00,700 --> 00:36:04,750
user will go will contact in Sydney will

00:36:03,580 --> 00:36:06,640
contact us any pop which will go over

00:36:04,750 --> 00:36:08,350
our network close to your origin and

00:36:06,640 --> 00:36:11,369
then back over network so we'll still be

00:36:08,350 --> 00:36:15,100
faster even if we don't have it cached

00:36:11,369 --> 00:36:17,109
and also for mitigating attacks fastly

00:36:15,100 --> 00:36:19,990
offers a platinum level of service you

00:36:17,109 --> 00:36:23,260
can add to a plan that they will help

00:36:19,990 --> 00:36:28,030
dive in and even help you write rules to

00:36:23,260 --> 00:36:29,800
to trap attack traffic and then and then

00:36:28,030 --> 00:36:32,200
black hole it well before it reaches

00:36:29,800 --> 00:36:35,470
your origin we don't like to say too

00:36:32,200 --> 00:36:37,840
much about dee Boss attacks but last

00:36:35,470 --> 00:36:40,810
year there was a state-level sponsored

00:36:37,840 --> 00:36:45,310
attack against github which you might

00:36:40,810 --> 00:36:49,660
want to google for videos and just it's

00:36:45,310 --> 00:36:51,820
it is vcl so you know any sort of regex

00:36:49,660 --> 00:36:53,170
that you want to do you know if you're

00:36:51,820 --> 00:36:54,700
able to kind of pin down some sort of

00:36:53,170 --> 00:36:58,200
pattern that you're seeing with your

00:36:54,700 --> 00:36:58,200
attack you can throw it in and

00:36:58,859 --> 00:37:25,299
seconds walked exactly edge so very

00:37:03,309 --> 00:37:29,529
powerful for that alright so the

00:37:25,299 --> 00:37:31,299
reference to master vcl was was kind of

00:37:29,529 --> 00:37:33,730
in depth about how fast these structures

00:37:31,299 --> 00:37:36,009
it's vcl which is we run a little bit of

00:37:33,730 --> 00:37:38,230
ECL before customers VCR runs but I

00:37:36,009 --> 00:37:42,160
guess you guys could talk about how you

00:37:38,230 --> 00:37:45,400
work on your pc or convicts well the arm

00:37:42,160 --> 00:37:47,529
so I think the question is about how

00:37:45,400 --> 00:37:49,569
fast Lee picks the right vcl to run

00:37:47,529 --> 00:37:52,739
against a site or I'm just trying to

00:37:49,569 --> 00:37:52,739
make sure I'm ready answering a question

00:38:05,039 --> 00:38:10,299
okay there is a master video at the

00:38:07,509 --> 00:38:12,369
hustling and then proposal or face their

00:38:10,299 --> 00:38:15,999
own bc i would probably another so this

00:38:12,369 --> 00:38:18,430
here for ya the master vcl is very small

00:38:15,999 --> 00:38:20,619
it's it's not at least my understanding

00:38:18,430 --> 00:38:24,339
of it is that it's not designed to do

00:38:20,619 --> 00:38:27,549
very much mostly fastly is trying to

00:38:24,339 --> 00:38:29,859
route the request to your vcl which can

00:38:27,549 --> 00:38:32,049
happen i'm aware of at least two ways if

00:38:29,859 --> 00:38:33,309
i doing that infest lee the main way of

00:38:32,049 --> 00:38:36,489
doing it I'm fastly as a general

00:38:33,309 --> 00:38:37,989
customer is you put in a domain name and

00:38:36,489 --> 00:38:40,809
you validate your control of the domain

00:38:37,989 --> 00:38:42,640
and then anytime traffic comes in too

00:38:40,809 --> 00:38:45,039
fast Lee's edge and matches the domains

00:38:42,640 --> 00:38:48,999
you control it will be handled by one of

00:38:45,039 --> 00:38:51,039
your services which service on on fastly

00:38:48,999 --> 00:38:53,289
corresponds to a vcl or rules

00:38:51,039 --> 00:38:55,329
configuration the other way that's

00:38:53,289 --> 00:38:57,849
offered which is only used for handful

00:38:55,329 --> 00:38:59,859
of customers is called IP pinning where

00:38:57,849 --> 00:39:02,170
if you handle lots and lots of domains

00:38:59,859 --> 00:39:04,150
you can get certain IP addresses that

00:39:02,170 --> 00:39:05,789
automatically go to your service where

00:39:04,150 --> 00:39:09,839
any time traffic comes in to that IP

00:39:05,789 --> 00:39:09,839
it's going to go to your vcl

00:39:30,260 --> 00:39:37,290
so the question was the question was the

00:39:35,610 --> 00:39:38,730
fastest ever cash knows is they'd

00:39:37,290 --> 00:39:40,800
Restless public it's like yes the

00:39:38,730 --> 00:39:43,650
dresses pub is public if we have an API

00:39:40,800 --> 00:39:46,200
you can download it we update the IP

00:39:43,650 --> 00:39:48,450
address address list way before we start

00:39:46,200 --> 00:39:49,860
using the IP IP addresses so you can

00:39:48,450 --> 00:39:51,690
have like a cron job which updates your

00:39:49,860 --> 00:39:53,760
firewall to only allow accesses from

00:39:51,690 --> 00:39:57,180
from fastly for example alternatively

00:39:53,760 --> 00:39:59,610
you could use the TLS to origin where

00:39:57,180 --> 00:40:01,530
you put a certificate in for fastly and

00:39:59,610 --> 00:40:07,560
then it validates that it's coming from

00:40:01,530 --> 00:40:09,270
fastly cryptographically hustla and

00:40:07,560 --> 00:40:12,450
parsley in may use it because

00:40:09,270 --> 00:40:14,040
certificate pls yes ever sir look lang

00:40:12,450 --> 00:40:16,440
yes you can generate your own

00:40:14,040 --> 00:40:20,360
certificates for the connection between

00:40:16,440 --> 00:40:20,360
fastly in your origin if you want to

00:40:24,800 --> 00:40:30,560
it's it needs to be signed and you would

00:40:29,010 --> 00:40:32,670
basically do something that's called

00:40:30,560 --> 00:40:34,980
yeah you would you would create your own

00:40:32,670 --> 00:40:37,470
like mini CA and you could sign one for

00:40:34,980 --> 00:40:40,710
fastly and sign one for your origin and

00:40:37,470 --> 00:40:43,050
then yes and it's sort of self signed in

00:40:40,710 --> 00:40:45,060
that way and then you could tell the

00:40:43,050 --> 00:40:46,680
origin to trust things that you've

00:40:45,060 --> 00:40:48,360
signed and then give fastly the

00:40:46,680 --> 00:40:49,770
certificate that you've signed and then

00:40:48,360 --> 00:40:52,620
every time fastly connects to your

00:40:49,770 --> 00:40:55,800
origin like engine X for example or

00:40:52,620 --> 00:40:58,470
Apache really almost every HTTP server

00:40:55,800 --> 00:40:59,910
supports this at this point then it can

00:40:58,470 --> 00:41:01,710
validate that it's coming from fastly

00:40:59,910 --> 00:41:03,420
because fastly has the certificate that

00:41:01,710 --> 00:41:04,920
you gave it can you actually go to

00:41:03,420 --> 00:41:07,140
origin configuration we can share this

00:41:04,920 --> 00:41:08,790
let me pull up some because like there

00:41:07,140 --> 00:41:10,560
have been a few questions about timeouts

00:41:08,790 --> 00:41:14,870
for origin configuration monitoring for

00:41:10,560 --> 00:41:14,870
origin configuration encryption origin

00:41:15,620 --> 00:41:21,470
yeah so here here's that domain lists

00:41:18,450 --> 00:41:21,470
that we were talking about so

00:41:21,839 --> 00:41:26,979
yeah this is the actual production take

00:41:24,759 --> 00:41:29,469
care so most of us actually handled by

00:41:26,979 --> 00:41:30,910
seurat's drew blood or gear and as we're

00:41:29,469 --> 00:41:32,769
moving services over we were

00:41:30,910 --> 00:41:35,199
individually adding them but the wild

00:41:32,769 --> 00:41:37,359
card picks up most everything and then

00:41:35,199 --> 00:41:41,709
over here on the origin side we have our

00:41:37,359 --> 00:41:43,209
lease be nice to these IPS you should

00:41:41,709 --> 00:41:47,739
you should validate that traffic is

00:41:43,209 --> 00:41:50,140
coming from that's like haha uh-huh but

00:41:47,739 --> 00:41:51,369
yeah so here's that configuration this

00:41:50,140 --> 00:41:52,959
is the new interface that I'm not as

00:41:51,369 --> 00:41:55,089
familiar with but yeah you can you can

00:41:52,959 --> 00:41:58,079
set up in the screens the CI certificate

00:41:55,089 --> 00:42:01,989
ya self signing the other way to do it

00:41:58,079 --> 00:42:03,309
too another thing you could implement if

00:42:01,989 --> 00:42:05,769
you want if you didn't care about

00:42:03,309 --> 00:42:07,209
validating that's coming from fastly but

00:42:05,769 --> 00:42:09,849
you just wanted to have a connection

00:42:07,209 --> 00:42:11,349
encrypted and trusted you could use

00:42:09,849 --> 00:42:13,929
let's encrypt on your original servers

00:42:11,349 --> 00:42:16,449
you can come with a cron job that

00:42:13,929 --> 00:42:19,140
refreshes the certificate and then what

00:42:16,449 --> 00:42:22,660
will happen is that fastly already has

00:42:19,140 --> 00:42:24,849
all of the major routes trusted for

00:42:22,660 --> 00:42:28,749
connecting the origin and so that would

00:42:24,849 --> 00:42:30,059
allow you to run your origin with an

00:42:28,749 --> 00:42:41,619
encrypted connection that would be

00:42:30,059 --> 00:42:46,509
resistant to man-in-the-middle attacks I

00:42:41,619 --> 00:42:49,630
mean the last day I it's probably a

00:42:46,509 --> 00:42:53,499
little too in depth here to go into

00:42:49,630 --> 00:42:55,539
right certificate hierarchies and client

00:42:53,499 --> 00:42:59,769
certificates in how the validation

00:42:55,539 --> 00:43:02,829
occurs but it is possible to do one here

00:42:59,769 --> 00:43:05,229
yes and then another thing that came up

00:43:02,829 --> 00:43:07,689
was the logging so here's an example we

00:43:05,229 --> 00:43:11,319
log 2 s 3 and we also log to our own

00:43:07,689 --> 00:43:13,779
internal our syslog server here so we

00:43:11,319 --> 00:43:15,279
can set the log format in a way that we

00:43:13,779 --> 00:43:17,439
want to accept and it'll send the

00:43:15,279 --> 00:43:19,089
traffic over to our right log posts and

00:43:17,439 --> 00:43:21,809
that's encrypted as well yeah and that

00:43:19,089 --> 00:43:21,809
this has a

00:43:24,010 --> 00:43:30,200
verify there and then the custom vcl so

00:43:27,940 --> 00:43:31,970
maybe this will help shed some light on

00:43:30,200 --> 00:43:34,190
that question about how that works we

00:43:31,970 --> 00:43:36,050
have a main sort of production vcl that

00:43:34,190 --> 00:43:38,230
has additional includes other VCS that

00:43:36,050 --> 00:43:41,840
we have that and I believe that gets

00:43:38,230 --> 00:43:45,500
routed by the master vcl that you're

00:43:41,840 --> 00:43:49,010
driving right yeah today's get combined

00:43:45,500 --> 00:43:51,350
into one 1v scale so when I view the

00:43:49,010 --> 00:43:53,300
actual vcl that gets compiled on passing

00:43:51,350 --> 00:43:55,520
time that's the vcl really an or but

00:43:53,300 --> 00:43:57,940
this is the individual sort of include

00:43:55,520 --> 00:44:00,560
an ACL we set up just kind of a

00:43:57,940 --> 00:44:03,020
production logic but it also includes

00:44:00,560 --> 00:44:05,420
things like redirecting redirect logic

00:44:03,020 --> 00:44:07,940
that we have and some other blocks that

00:44:05,420 --> 00:44:11,450
we have in place ways to handle things

00:44:07,940 --> 00:44:13,130
like that we fastly versions the vcl on

00:44:11,450 --> 00:44:15,320
the service so that as you go through

00:44:13,130 --> 00:44:17,210
iterations they're all on there so that

00:44:15,320 --> 00:44:20,060
if you ever need to fall back you can do

00:44:17,210 --> 00:44:22,040
that if you put in rules without writing

00:44:20,060 --> 00:44:24,680
custom vcl you can still see the vcl

00:44:22,040 --> 00:44:27,020
generates so you're there's not a lot of

00:44:24,680 --> 00:44:29,180
vendor lock-in either in terms of if you

00:44:27,020 --> 00:44:31,850
wanted to take your vcl and walk away

00:44:29,180 --> 00:44:32,960
you'd be able to mostly push it into

00:44:31,850 --> 00:44:35,510
varnish you might have to make a few

00:44:32,960 --> 00:44:37,370
tweaks for modern for like more modern

00:44:35,510 --> 00:44:40,430
versions of varnish like varnish fork

00:44:37,370 --> 00:44:42,950
but you can mostly port the

00:44:40,430 --> 00:44:44,540
configuration over so for example this

00:44:42,950 --> 00:44:46,340
is the one sort of thing that we have in

00:44:44,540 --> 00:44:48,470
the UI here that gets translated into

00:44:46,340 --> 00:44:52,220
the pcl if I look at the actual output

00:44:48,470 --> 00:44:54,700
it's forcing us to sell for all the

00:44:52,220 --> 00:44:54,700
requests

00:44:57,790 --> 00:45:02,930
that might be all we have to do and so

00:45:01,250 --> 00:45:04,670
yeah then over here in the vcl there's a

00:45:02,930 --> 00:45:07,370
force itself section it's also a great

00:45:04,670 --> 00:45:08,960
way to do ssl only for a site because it

00:45:07,370 --> 00:45:10,970
means that the redirect is generated by

00:45:08,960 --> 00:45:11,990
fastly instead of your origin box so

00:45:10,970 --> 00:45:15,320
that you don't have a lot of delays

00:45:11,990 --> 00:45:18,380
there for redirecting to the same URL on

00:45:15,320 --> 00:45:21,200
HTTPS so it makes it easy to do that I

00:45:18,380 --> 00:45:23,120
think there's even prefab rules and that

00:45:21,200 --> 00:45:43,730
you can even do for kind of like HTTPS

00:45:23,120 --> 00:45:47,390
only on fastly now believe that's come

00:45:43,730 --> 00:45:54,560
to the origin on the Apache server and

00:45:47,390 --> 00:45:56,180
then good code again you can you can

00:45:54,560 --> 00:45:58,250
either him to create redirects of your

00:45:56,180 --> 00:46:00,830
origin and even catch them and fastly if

00:45:58,250 --> 00:46:03,200
you want to as just normal responses or

00:46:00,830 --> 00:46:04,400
you can use varnish itself to generate

00:46:03,200 --> 00:46:08,590
the redirects if you know there are

00:46:04,400 --> 00:46:12,080
certain URL patterns that that redirect

00:46:08,590 --> 00:46:13,940
the in terms of redirects and traffic

00:46:12,080 --> 00:46:15,440
direction one other use case I wanted to

00:46:13,940 --> 00:46:19,430
go into that some of our customers use

00:46:15,440 --> 00:46:22,700
is for the sake of SEO search engine

00:46:19,430 --> 00:46:25,220
optimization some customers might say

00:46:22,700 --> 00:46:27,050
run one Drupal site for their blog and

00:46:25,220 --> 00:46:29,660
then a different grupal site for their

00:46:27,050 --> 00:46:31,430
main website further com they might even

00:46:29,660 --> 00:46:33,590
run wordpress for their blog and Drupal

00:46:31,430 --> 00:46:35,480
for their main site and one thing that

00:46:33,590 --> 00:46:37,550
you want to do for SEO is you want to

00:46:35,480 --> 00:46:39,830
have it all on the same domain name so

00:46:37,550 --> 00:46:42,620
one thing you can do as a trick in the

00:46:39,830 --> 00:46:44,120
CDN is you can have in your rules say

00:46:42,620 --> 00:46:46,460
detect that someone's going to slash

00:46:44,120 --> 00:46:50,600
blog and then choose a different origin

00:46:46,460 --> 00:46:52,640
for that and even metal with the

00:46:50,600 --> 00:46:55,760
hostname that it's ending to the origin

00:46:52,640 --> 00:46:57,350
so that you can simultaneously run

00:46:55,760 --> 00:46:59,240
multiple websites that are all in the

00:46:57,350 --> 00:47:01,190
same domain and all of these switching

00:46:59,240 --> 00:47:04,970
between the different organs can happen

00:47:01,190 --> 00:47:06,650
in the CDN and I've had customers which

00:47:04,970 --> 00:47:07,190
are moving date sender or moving to the

00:47:06,650 --> 00:47:09,140
cloud

00:47:07,190 --> 00:47:11,270
and that way they can move parts of

00:47:09,140 --> 00:47:17,930
their website one by one rather than

00:47:11,270 --> 00:47:20,720
having one big banks which and yeah that

00:47:17,930 --> 00:47:22,700
would be very useful for like a Drupal 8

00:47:20,720 --> 00:47:24,829
migration of some kind of let org we

00:47:22,700 --> 00:47:27,010
could have parts of the website be rabid

00:47:24,829 --> 00:47:29,270
by passing to the Drupal 8 site and

00:47:27,010 --> 00:47:30,740
integrate 7 site or something like that

00:47:29,270 --> 00:47:34,930
so it could be useful for that sort of

00:47:30,740 --> 00:47:34,930
upgrade as well if you're one of those

00:47:39,550 --> 00:47:43,790
so I will be here will be here for mr.

00:47:42,470 --> 00:47:45,650
conference we have a stand downstairs

00:47:43,790 --> 00:47:47,839
you get a nice party t-shirt or a nice

00:47:45,650 --> 00:47:49,900
pantheon t-shirt and you actually

00:47:47,839 --> 00:47:53,589
already should have Drupal t-shirts

00:47:49,900 --> 00:47:53,589

YouTube URL: https://www.youtube.com/watch?v=ted5L1H_a8M


