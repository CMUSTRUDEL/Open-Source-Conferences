Title: DrupalCon Dublin 2016: Configuration Management: theory and practice
Publication date: 2016-09-27
Playlist: DrupalCon Dublin 2016
Description: 
	Configuration Management is one of the revolutionary features in Drupal 8. It is a life-changing opportunity for site builders, who can get rid of the database-based workflow at last. But it has significant implications for developers too. 

Developers often want to use Configuration Management outside its intended use case. New workflows and practices have to be established. We'll see some examples from real projects, and outline a list of possible future improvements that can make Configuration Management better suitable for the developers' needs.

Attendees are expected to be familiar with basic site-building processes, and they will walk away with a gallery of real examples where Configuration Management shows its limits and additional modules or best practices step in for a smooth development experience.
Captions: 
	00:00:00,350 --> 00:00:06,240
okay we can start room is really full

00:00:04,140 --> 00:00:11,460
very happy to welcome you to this

00:00:06,240 --> 00:00:14,700
presentation all three speakers are from

00:00:11,460 --> 00:00:16,890
from the same company novalja and you

00:00:14,700 --> 00:00:19,199
see them listed hearing in the order in

00:00:16,890 --> 00:00:22,769
which we will be speaking on Draya then

00:00:19,199 --> 00:00:25,170
Fabian Don Antonio we will be talking

00:00:22,769 --> 00:00:27,330
about configuration management theory

00:00:25,170 --> 00:00:33,750
and practice actually more practice than

00:00:27,330 --> 00:00:36,360
than theory we bought we all work for

00:00:33,750 --> 00:00:38,550
new Valley which is a 100 company when

00:00:36,360 --> 00:00:41,129
we do drupal projects and we have a

00:00:38,550 --> 00:00:42,660
distributed team in Italy Belgium and

00:00:41,129 --> 00:00:45,539
Czech Republic at the three of us are

00:00:42,660 --> 00:00:48,270
the core team and each of us lives in a

00:00:45,539 --> 00:00:50,670
different country so you can imagine the

00:00:48,270 --> 00:00:52,770
kind of problems we had with previous

00:00:50,670 --> 00:00:57,960
versions of Drupal for those who work

00:00:52,770 --> 00:01:01,079
with them and our projects and our

00:00:57,960 --> 00:01:03,120
clients need a very good configuration

00:01:01,079 --> 00:01:05,479
management because we work with

00:01:03,120 --> 00:01:09,900
international organizations institutions

00:01:05,479 --> 00:01:11,310
and we always need fast delivery we have

00:01:09,900 --> 00:01:13,380
several developers that are working

00:01:11,310 --> 00:01:15,950
simultaneously on the same project so

00:01:13,380 --> 00:01:19,140
our workflow must accommodate for

00:01:15,950 --> 00:01:21,150
working together in a safe way and we

00:01:19,140 --> 00:01:24,030
have very frequent configuration changes

00:01:21,150 --> 00:01:26,220
they ask us to make a change to deploy

00:01:24,030 --> 00:01:32,130
it very quickly and we need to be sure

00:01:26,220 --> 00:01:35,490
that updates will be safe so let's see a

00:01:32,130 --> 00:01:38,460
list of issues and how much they are

00:01:35,490 --> 00:01:40,920
covered by the current configuration

00:01:38,460 --> 00:01:43,290
management in core or other modules

00:01:40,920 --> 00:01:46,140
first one is of course the basic need

00:01:43,290 --> 00:01:49,200
can I deployed configuration meaning

00:01:46,140 --> 00:01:52,560
that can I develop my configuration on

00:01:49,200 --> 00:01:54,270
my local development machine and keep

00:01:52,560 --> 00:01:56,700
the production site online not all the

00:01:54,270 --> 00:01:59,100
time and can i export configuration

00:01:56,700 --> 00:02:01,020
changes from development and import them

00:01:59,100 --> 00:02:03,899
into production as everybody here

00:02:01,020 --> 00:02:06,750
probably knows the answer is yes with

00:02:03,899 --> 00:02:08,759
Drupal 8 you can with previous version

00:02:06,750 --> 00:02:10,979
of Drupal it was a bit higher but with

00:02:08,759 --> 00:02:12,860
Drupal 8 these use cases completely

00:02:10,979 --> 00:02:15,230
covered

00:02:12,860 --> 00:02:17,750
and so it is a new solution to a very

00:02:15,230 --> 00:02:21,830
ancient problem that we had in Drupal 6

00:02:17,750 --> 00:02:25,280
or 7 and the reference use case do not

00:02:21,830 --> 00:02:27,410
forget these two lines is exporting the

00:02:25,280 --> 00:02:29,900
configuration changes from development

00:02:27,410 --> 00:02:33,680
and importing them into production of

00:02:29,900 --> 00:02:36,820
the same site there we will have to

00:02:33,680 --> 00:02:38,930
extend it in multiple ways but

00:02:36,820 --> 00:02:41,510
configuration management is a tool that

00:02:38,930 --> 00:02:44,080
was meant for a specific purpose it is

00:02:41,510 --> 00:02:46,910
perfect for this specific purpose and

00:02:44,080 --> 00:02:50,240
but this specific purpose is not the

00:02:46,910 --> 00:02:51,920
real life so let's see this specific

00:02:50,240 --> 00:02:56,120
purpose our reference use case for

00:02:51,920 --> 00:02:58,459
configuration management first I wish is

00:02:56,120 --> 00:03:00,050
that we will clone the site to the

00:02:58,459 --> 00:03:02,480
development environment okay you can

00:03:00,050 --> 00:03:05,000
start from either of the two you install

00:03:02,480 --> 00:03:07,489
the site somewhere beat production or

00:03:05,000 --> 00:03:09,650
development in in the reference use case

00:03:07,489 --> 00:03:11,660
it would be production in our real-life

00:03:09,650 --> 00:03:14,120
experience it's probably development the

00:03:11,660 --> 00:03:18,380
one where we actually install it first

00:03:14,120 --> 00:03:20,930
and the idea is I install one I make a

00:03:18,380 --> 00:03:22,910
full backup with database and files and

00:03:20,930 --> 00:03:25,370
everything i cloned the production site

00:03:22,910 --> 00:03:28,070
by restoring the backup this is already

00:03:25,370 --> 00:03:33,190
something that will have to be improved

00:03:28,070 --> 00:03:36,290
but the reference use case says this

00:03:33,190 --> 00:03:38,900
step 2 we just modify configuration a

00:03:36,290 --> 00:03:42,140
production site just goes on and we need

00:03:38,900 --> 00:03:47,690
to to develop on it we make

00:03:42,140 --> 00:03:50,209
configuration changes and step 3 the

00:03:47,690 --> 00:03:52,549
live site is still live of course and

00:03:50,209 --> 00:03:55,940
when we are done with development we

00:03:52,549 --> 00:03:59,660
export all our configuration changes we

00:03:55,940 --> 00:04:05,269
are told what what is changed we commit

00:03:59,660 --> 00:04:08,600
and will push step 4 we go online and we

00:04:05,269 --> 00:04:14,360
pull configuration so we now have a

00:04:08,600 --> 00:04:20,799
stage configuration that is exactly what

00:04:14,360 --> 00:04:24,530
we we develop and step 5 is review

00:04:20,799 --> 00:04:26,190
before applying them to production so we

00:04:24,530 --> 00:04:30,510
have drush comments

00:04:26,190 --> 00:04:33,480
that allowed to diff our our changes we

00:04:30,510 --> 00:04:38,820
inspect we check that everything is that

00:04:33,480 --> 00:04:40,500
is a exec spected and last step we apply

00:04:38,820 --> 00:04:45,600
the changes to production and it is as

00:04:40,500 --> 00:04:48,300
easy as typing Y for yes and this is

00:04:45,600 --> 00:04:51,180
beautifully covered with Drupal 8 we

00:04:48,300 --> 00:04:57,810
love configuration management for a this

00:04:51,180 --> 00:05:01,260
use case only one small note here that

00:04:57,810 --> 00:05:03,450
the full workflow on on the production

00:05:01,260 --> 00:05:05,640
site would look like something like this

00:05:03,450 --> 00:05:08,850
actually mean not only configuration but

00:05:05,640 --> 00:05:11,790
also running all the database updates

00:05:08,850 --> 00:05:14,520
first actually this is enforced by an

00:05:11,790 --> 00:05:16,800
issue that will be committed to core but

00:05:14,520 --> 00:05:19,410
still as long as configuration is

00:05:16,800 --> 00:05:25,320
concerned that that is all you need to

00:05:19,410 --> 00:05:29,310
do problem solved yes for what we wanted

00:05:25,320 --> 00:05:31,169
to solve but as I said the real life is

00:05:29,310 --> 00:05:33,630
really much more complex than this we

00:05:31,169 --> 00:05:37,950
want to do more it's a very nice start

00:05:33,630 --> 00:05:41,130
but you want to do more we want to do

00:05:37,950 --> 00:05:43,470
stuff in a really clean way so for

00:05:41,130 --> 00:05:45,810
example when we supposed to get rid of

00:05:43,470 --> 00:05:50,220
database dumps to move configuration to

00:05:45,810 --> 00:05:53,130
start and we are now seeing a lot of

00:05:50,220 --> 00:05:55,650
other scenarios and how they can or

00:05:53,130 --> 00:05:59,340
cannot be solved by configuration

00:05:55,650 --> 00:06:05,490
management and by what we have now in

00:05:59,340 --> 00:06:07,260
core so the first one is how can i

00:06:05,490 --> 00:06:11,430
install a site from existing

00:06:07,260 --> 00:06:14,490
configuration meaning i hate the step we

00:06:11,430 --> 00:06:17,610
had to do that we needed a full database

00:06:14,490 --> 00:06:20,550
dump just because a database dump is

00:06:17,610 --> 00:06:23,340
inherently dirty not even if it is the

00:06:20,550 --> 00:06:26,220
cleanest data wisdom possible it's a

00:06:23,340 --> 00:06:27,600
moment where you lose control where for

00:06:26,220 --> 00:06:29,550
the first time in your development you

00:06:27,600 --> 00:06:31,410
would have something that is not based

00:06:29,550 --> 00:06:34,410
on text file is not something that you

00:06:31,410 --> 00:06:39,349
can inspect we want everything to always

00:06:34,410 --> 00:06:43,860
be tracked by text file and

00:06:39,349 --> 00:06:46,110
something the version de and something

00:06:43,860 --> 00:06:48,419
that we can really know what is going on

00:06:46,110 --> 00:06:52,409
so a database dump means we lose control

00:06:48,419 --> 00:06:54,780
and how do we solve it we throw the

00:06:52,409 --> 00:06:57,210
database dams away and we use

00:06:54,780 --> 00:07:01,259
configuration installer so this is our

00:06:57,210 --> 00:07:03,900
first tool usually running the installer

00:07:01,259 --> 00:07:06,720
creates a new site in configuration

00:07:03,900 --> 00:07:11,340
management has a concept of a unique IDs

00:07:06,720 --> 00:07:13,650
and it wouldn't work properly if we try

00:07:11,340 --> 00:07:16,740
to start clean on the production side

00:07:13,650 --> 00:07:19,139
too but configuration installer is

00:07:16,740 --> 00:07:21,479
designed to solve this exact problem is

00:07:19,139 --> 00:07:23,880
an installation profile halation profile

00:07:21,479 --> 00:07:25,229
is one of the first screens in the

00:07:23,880 --> 00:07:27,990
Drupal installation you select either

00:07:25,229 --> 00:07:30,539
minimal or standard or anything else and

00:07:27,990 --> 00:07:33,449
in this case you would select config

00:07:30,539 --> 00:07:35,580
installer and it takes over the Drupal

00:07:33,449 --> 00:07:38,250
installer and it allows sites to be

00:07:35,580 --> 00:07:41,219
creating from an existing configuration

00:07:38,250 --> 00:07:43,020
so typically we will see how it changes

00:07:41,219 --> 00:07:45,300
in in practice but you will have a

00:07:43,020 --> 00:07:47,430
configuration you want to clone you just

00:07:45,300 --> 00:07:49,830
clone configuration you do not replicate

00:07:47,430 --> 00:07:53,009
the database because the database has

00:07:49,830 --> 00:07:55,199
things that are not under control it is

00:07:53,009 --> 00:08:00,289
an installation profile you place it in

00:07:55,199 --> 00:08:02,849
the profiles folder and it is such a

00:08:00,289 --> 00:08:07,529
good tool that it should be on every

00:08:02,849 --> 00:08:10,620
side and possibly in core but we are

00:08:07,529 --> 00:08:12,659
going to say more about this if you're

00:08:10,620 --> 00:08:14,430
not familiar with the user interface of

00:08:12,659 --> 00:08:16,440
configuration installer this is simply

00:08:14,430 --> 00:08:18,659
where it plugs and once you have

00:08:16,440 --> 00:08:22,979
selected the configuration installer as

00:08:18,659 --> 00:08:27,810
your profile you get a new screen here

00:08:22,979 --> 00:08:31,650
to import existing configuration so the

00:08:27,810 --> 00:08:35,570
typical workflow will look like I'm the

00:08:31,650 --> 00:08:39,719
developer i exported I my configuration

00:08:35,570 --> 00:08:43,260
eating it and the production site is not

00:08:39,719 --> 00:08:45,839
clone database wise but by importing the

00:08:43,260 --> 00:08:48,560
full configuration i export it from my

00:08:45,839 --> 00:08:48,560
development machine

00:08:49,640 --> 00:08:56,310
what about having it in color there's an

00:08:52,980 --> 00:08:59,270
issue for for director and there is a

00:08:56,310 --> 00:09:03,630
sprint about this so we might see it

00:08:59,270 --> 00:09:07,020
done or consider it doable by this

00:09:03,630 --> 00:09:10,290
drupalcon already so we might finally

00:09:07,020 --> 00:09:13,530
have a Drupal site do biker sites that

00:09:10,290 --> 00:09:18,740
can start from an existing configuration

00:09:13,530 --> 00:09:18,740
and solve this first issue we identified

00:09:19,850 --> 00:09:26,670
next step and next problem for questions

00:09:24,120 --> 00:09:29,670
we are grouping all questions to after

00:09:26,670 --> 00:09:32,700
the session so just be please be patient

00:09:29,670 --> 00:09:36,000
and when we are done we will have some

00:09:32,700 --> 00:09:38,610
minutes for our all questions can i

00:09:36,000 --> 00:09:40,200
override the local configuration meaning

00:09:38,610 --> 00:09:44,010
i am a developer ok i have this

00:09:40,200 --> 00:09:45,990
wonderful tool that but it starts to

00:09:44,010 --> 00:09:47,910
feel like a problem having a tool that

00:09:45,990 --> 00:09:52,140
really exports the whole configuration

00:09:47,910 --> 00:09:54,120
and this means that if i want to

00:09:52,140 --> 00:09:55,860
customize my development configuration

00:09:54,120 --> 00:09:58,500
in ways that i do not want to get

00:09:55,860 --> 00:10:02,040
exported in production for example i

00:09:58,500 --> 00:10:05,100
have different API keys in my local

00:10:02,040 --> 00:10:07,110
machine and in production or I want

00:10:05,100 --> 00:10:09,150
verbose or or logging enabled in my

00:10:07,110 --> 00:10:13,200
local machine but turned off in

00:10:09,150 --> 00:10:15,900
production if I do think the normal way

00:10:13,200 --> 00:10:18,630
by saving forms then I'm effectively

00:10:15,900 --> 00:10:20,790
altering configuration and this small

00:10:18,630 --> 00:10:24,270
changes would be exported and picked up

00:10:20,790 --> 00:10:28,830
on production so this is something that

00:10:24,270 --> 00:10:30,690
I do not want fortunately we are covered

00:10:28,830 --> 00:10:36,210
for this use case by the concept of

00:10:30,690 --> 00:10:39,210
overriding overriding is just meant to

00:10:36,210 --> 00:10:42,990
give us the way to apply these local

00:10:39,210 --> 00:10:45,360
changes on our development environment

00:10:42,990 --> 00:10:47,610
even though it is not covered by the

00:10:45,360 --> 00:10:51,180
reference use case it is covered by the

00:10:47,610 --> 00:10:56,760
standard Drupal core a core tool that is

00:10:51,180 --> 00:10:59,670
the config array in our and here is how

00:10:56,760 --> 00:11:02,120
it works with the configure a you have

00:10:59,670 --> 00:11:05,010
run time of writing in

00:11:02,120 --> 00:11:07,680
configuration is still there but it gets

00:11:05,010 --> 00:11:11,460
overwritten so what you see is not what

00:11:07,680 --> 00:11:13,920
ceasing configuration the typical

00:11:11,460 --> 00:11:16,440
example is to add the line to settings

00:11:13,920 --> 00:11:19,950
dot PHP or like the documentation

00:11:16,440 --> 00:11:22,680
advocates for settings dot local dot PHP

00:11:19,950 --> 00:11:26,360
file that you include from settings of

00:11:22,680 --> 00:11:30,210
PHP in your development environment and

00:11:26,360 --> 00:11:32,820
here you just define values for a

00:11:30,210 --> 00:11:35,940
disarray that will override whatever the

00:11:32,820 --> 00:11:37,680
configuration says so for example to

00:11:35,940 --> 00:11:41,130
enable we're both error logging in

00:11:37,680 --> 00:11:46,200
development only you write this line of

00:11:41,130 --> 00:11:49,920
code how does it work for editing for

00:11:46,200 --> 00:11:53,310
editing Drupal is a very smart if you

00:11:49,920 --> 00:11:55,710
open a form that would modify overridden

00:11:53,310 --> 00:11:59,190
configuration you do not see your

00:11:55,710 --> 00:12:01,530
overridden value because Drupal prevents

00:11:59,190 --> 00:12:05,100
you from saving it by mistake drupal

00:12:01,530 --> 00:12:07,050
knows that this configuration value was

00:12:05,100 --> 00:12:10,500
not set in configuration but was

00:12:07,050 --> 00:12:13,560
overridden by you in code in the

00:12:10,500 --> 00:12:17,790
settings of PHP file and it will show to

00:12:13,560 --> 00:12:21,230
you the old version the original known

00:12:17,790 --> 00:12:23,960
of the read and setting this means that

00:12:21,230 --> 00:12:26,460
whatever stupid things I do with

00:12:23,960 --> 00:12:30,990
configure is really local to my

00:12:26,460 --> 00:12:33,380
environment if I edit a form and save it

00:12:30,990 --> 00:12:35,760
overridden values will not be there it's

00:12:33,380 --> 00:12:38,430
it's very smart if you think about it

00:12:35,760 --> 00:12:41,850
and same of course will happen for

00:12:38,430 --> 00:12:45,360
exporting when you expert this overrides

00:12:41,850 --> 00:12:47,880
are not exported so this is exactly what

00:12:45,360 --> 00:12:50,220
we want from from this tool local

00:12:47,880 --> 00:12:56,370
configuration that stays local / writes

00:12:50,220 --> 00:12:59,550
the full configuration locally if you're

00:12:56,370 --> 00:13:02,160
curious on how Drupal I managed to do

00:12:59,550 --> 00:13:04,080
this well if you delve into code you

00:13:02,160 --> 00:13:06,930
will find that whenever configuration is

00:13:04,080 --> 00:13:09,350
retrieved it can be retrieved as mutable

00:13:06,930 --> 00:13:14,410
or immutable as Drupal

00:13:09,350 --> 00:13:17,540
it when we are retrieving for a

00:13:14,410 --> 00:13:21,980
read-only mode like the real

00:13:17,540 --> 00:13:24,800
configuration you have or the display of

00:13:21,980 --> 00:13:27,320
a configuration it's immutable if it is

00:13:24,800 --> 00:13:30,350
read-only so other rights are considered

00:13:27,320 --> 00:13:32,990
because it would be harmless to display

00:13:30,350 --> 00:13:36,110
them this is why you can override with

00:13:32,990 --> 00:13:39,100
config and have the displayed site name

00:13:36,110 --> 00:13:41,870
in the header being the overridden value

00:13:39,100 --> 00:13:43,850
since you are reading it and when

00:13:41,870 --> 00:13:47,240
reading it is safe to include other

00:13:43,850 --> 00:13:50,030
rights in the other scenario when you

00:13:47,240 --> 00:13:54,610
want to set export values over rights

00:13:50,030 --> 00:13:57,500
must be ignored and Drupal a special

00:13:54,610 --> 00:14:00,590
ways to get configuration in this case

00:13:57,500 --> 00:14:03,170
and it is the mutable configuration and

00:14:00,590 --> 00:14:05,510
it is use the one configuration is

00:14:03,170 --> 00:14:08,840
retrieved in READ&WRITE mod something

00:14:05,510 --> 00:14:11,960
that I will want to retrieve them modify

00:14:08,840 --> 00:14:17,000
and save this is the trick that Drupal

00:14:11,960 --> 00:14:19,190
uses to be clean with over right there

00:14:17,000 --> 00:14:21,200
is only one small issue left but

00:14:19,190 --> 00:14:25,880
fortunately this is quite easy to

00:14:21,200 --> 00:14:28,700
address so how do we actually find the

00:14:25,880 --> 00:14:32,030
keys and values to put in config well

00:14:28,700 --> 00:14:35,000
you do it in the form Forester you

00:14:32,030 --> 00:14:37,460
export configuration and you inspect the

00:14:35,000 --> 00:14:39,410
diff so the first time you really make

00:14:37,460 --> 00:14:42,770
the changes locally then you will throw

00:14:39,410 --> 00:14:46,760
them away you see what configuration

00:14:42,770 --> 00:14:49,640
file changed you see what the property

00:14:46,760 --> 00:14:53,150
is changed by really looking at the

00:14:49,640 --> 00:14:55,160
yellow file and from here you get system

00:14:53,150 --> 00:14:58,160
dot log Inga and system the wrong gig

00:14:55,160 --> 00:15:01,100
will be the first key here error level

00:14:58,160 --> 00:15:04,130
and the row level will be the second key

00:15:01,100 --> 00:15:07,760
here and the value purpose will be

00:15:04,130 --> 00:15:10,550
verbose here then you trash you could a

00:15:07,760 --> 00:15:15,100
real configuration change and you only

00:15:10,550 --> 00:15:19,070
keep your code copy is this satisfactory

00:15:15,100 --> 00:15:21,170
yes but again you can only alter

00:15:19,070 --> 00:15:22,420
existing configuration meaning that you

00:15:21,170 --> 00:15:24,459
cannot add new

00:15:22,420 --> 00:15:27,070
figuration this way you cannot

00:15:24,459 --> 00:15:30,910
completely unsetting configuration

00:15:27,070 --> 00:15:32,829
either and there are things that still

00:15:30,910 --> 00:15:34,600
you cannot do this way like you cannot

00:15:32,829 --> 00:15:36,940
overwrite which modules are installed

00:15:34,600 --> 00:15:39,010
typical use case i want the develop

00:15:36,940 --> 00:15:41,620
module in my local machine not in

00:15:39,010 --> 00:15:46,449
production i will not be covered here

00:15:41,620 --> 00:15:48,519
and there are also a few quirks that you

00:15:46,449 --> 00:15:50,860
cannot really override some small things

00:15:48,519 --> 00:15:52,860
like the color of Bartok and other

00:15:50,860 --> 00:15:56,170
things that are coded in the

00:15:52,860 --> 00:15:58,600
non-standard sway so to say so it's that

00:15:56,170 --> 00:16:02,260
they cannot be overridden this way for

00:15:58,600 --> 00:16:05,560
technical reasons but if we need more we

00:16:02,260 --> 00:16:16,500
have more tools and I let Fabian talk

00:16:05,560 --> 00:16:21,730
about the other use cases yes so alright

00:16:16,500 --> 00:16:24,209
so the next step is to exclude modules

00:16:21,730 --> 00:16:29,680
from getting into the production

00:16:24,209 --> 00:16:30,790
deployment workflow and often we have

00:16:29,680 --> 00:16:33,610
this case that we want to have

00:16:30,790 --> 00:16:37,089
development modules on our site and then

00:16:33,610 --> 00:16:40,870
not export them there are several

00:16:37,089 --> 00:16:44,680
options the first one is with rush rush

00:16:40,870 --> 00:16:47,680
has a flag that you can set called skip

00:16:44,680 --> 00:16:52,089
modules and you can give it a list of

00:16:47,680 --> 00:16:54,190
modules that you want to ignore but at

00:16:52,089 --> 00:16:56,140
the moment the trash still exports the

00:16:54,190 --> 00:16:58,480
configuration that depends on these

00:16:56,140 --> 00:17:00,940
modules so when you do that you also

00:16:58,480 --> 00:17:04,800
have to get ignore the configuration

00:17:00,940 --> 00:17:04,800
that it comes with those modules

00:17:04,919 --> 00:17:09,790
otherwise the configuration that you

00:17:07,240 --> 00:17:11,230
export results in an invalid state

00:17:09,790 --> 00:17:13,510
because you have configuration that

00:17:11,230 --> 00:17:15,939
depends on modules that are not

00:17:13,510 --> 00:17:19,329
installed and the Drupal will will not

00:17:15,939 --> 00:17:23,350
import the configuration again so you

00:17:19,329 --> 00:17:26,410
have to inspect it manually to make sure

00:17:23,350 --> 00:17:31,990
that your your export is still in a

00:17:26,410 --> 00:17:34,640
consistent state there's a second method

00:17:31,990 --> 00:17:38,960
that previous next

00:17:34,640 --> 00:17:41,830
recently blogged about and they add a

00:17:38,960 --> 00:17:45,940
concept of a ignore list which is a

00:17:41,830 --> 00:17:48,830
yamel file where you list all the

00:17:45,940 --> 00:17:51,380
configuration that you would like drush

00:17:48,830 --> 00:17:55,520
to ignore when exporting it works in a

00:17:51,380 --> 00:18:02,870
similar way as the the natives rush

00:17:55,520 --> 00:18:07,720
command and the third method is a new

00:18:02,870 --> 00:18:11,210
module called configuration split and

00:18:07,720 --> 00:18:14,360
their configuration or overrides are not

00:18:11,210 --> 00:18:16,010
at run time but at import/export time so

00:18:14,360 --> 00:18:19,790
the configuration that you have active

00:18:16,010 --> 00:18:21,530
in and on your local site is is the one

00:18:19,790 --> 00:18:23,810
that you you want to have so you on your

00:18:21,530 --> 00:18:25,130
local site you have the development

00:18:23,810 --> 00:18:27,800
modules enabled and you have the

00:18:25,130 --> 00:18:30,020
configuration for the photos modules but

00:18:27,800 --> 00:18:35,390
when you export it you split them off

00:18:30,020 --> 00:18:39,170
and the the split is a configuration in

00:18:35,390 --> 00:18:41,660
itself so a part of this configuration

00:18:39,170 --> 00:18:45,500
is which folder the split will be

00:18:41,660 --> 00:18:47,480
exported to you can have a black list of

00:18:45,500 --> 00:18:49,670
configuration in addition to the ones

00:18:47,480 --> 00:18:54,170
that are detected from the modules that

00:18:49,670 --> 00:18:56,380
you want to split off for example in the

00:18:54,170 --> 00:18:59,330
well you also want to remove the devel

00:18:56,380 --> 00:19:03,320
menu item which does not explicitly

00:18:59,330 --> 00:19:05,960
depend on the devel module and you can

00:19:03,320 --> 00:19:09,470
have a set of configuration that is

00:19:05,960 --> 00:19:11,930
ignored when importing and exporting so

00:19:09,470 --> 00:19:14,030
it's it's when the blacklist

00:19:11,930 --> 00:19:16,340
configuration when you export it it gets

00:19:14,030 --> 00:19:19,820
removed from the sink directory where

00:19:16,340 --> 00:19:22,070
the normal export would go to and the

00:19:19,820 --> 00:19:25,520
ignored one will leave the one that is

00:19:22,070 --> 00:19:30,560
already in the folder and export the the

00:19:25,520 --> 00:19:32,720
setting to to the folder and of course

00:19:30,560 --> 00:19:34,310
the configuration there there entities

00:19:32,720 --> 00:19:35,720
themselves so their configuration

00:19:34,310 --> 00:19:39,830
themselves so you can overwrite them

00:19:35,720 --> 00:19:42,400
with the config override method there's

00:19:39,830 --> 00:19:46,179
a rush commands for that that

00:19:42,400 --> 00:19:48,340
essentially replace that the

00:19:46,179 --> 00:19:50,590
config export and config import trash

00:19:48,340 --> 00:19:57,940
command and also there's a Drupal

00:19:50,590 --> 00:20:01,980
console command to do the same so this

00:19:57,940 --> 00:20:07,269
is the current you I data for for this

00:20:01,980 --> 00:20:12,999
split configuration and it's much nicer

00:20:07,269 --> 00:20:15,549
with also chosen and at the bottom there

00:20:12,999 --> 00:20:18,129
would be also the weight so you can have

00:20:15,549 --> 00:20:25,779
several splits and weight them so that

00:20:18,129 --> 00:20:29,710
they happen in the correct order the the

00:20:25,779 --> 00:20:33,429
next big chapter is how to work in

00:20:29,710 --> 00:20:37,119
parallel with the colleague we've seen

00:20:33,429 --> 00:20:39,549
this configuration export and

00:20:37,119 --> 00:20:42,990
configuration import but how does it

00:20:39,549 --> 00:20:45,369
work if two people work at the same time

00:20:42,990 --> 00:20:49,210
the problem is that when you export

00:20:45,369 --> 00:20:50,950
configuration and you remove all the

00:20:49,210 --> 00:20:52,419
configuration that is in the export

00:20:50,950 --> 00:20:54,549
directly and then you import the

00:20:52,419 --> 00:20:58,179
configuration you remove everything that

00:20:54,549 --> 00:21:04,330
is in your local active configuration

00:20:58,179 --> 00:21:06,879
storage but luckily there is a get so if

00:21:04,330 --> 00:21:08,950
you work with get and you let get handle

00:21:06,879 --> 00:21:14,710
the merging then you're mostly on the

00:21:08,950 --> 00:21:19,659
safe side so in this case we consider

00:21:14,710 --> 00:21:21,700
two instances of the same site multiple

00:21:19,659 --> 00:21:24,129
we don't cover it right here but it's

00:21:21,700 --> 00:21:27,730
essentially the same it works for for as

00:21:24,129 --> 00:21:31,690
many copies as you want and get just

00:21:27,730 --> 00:21:36,610
merchants and you have to join then just

00:21:31,690 --> 00:21:41,259
import the configuration again text

00:21:36,610 --> 00:21:44,259
files are perfect forget so I mean it

00:21:41,259 --> 00:21:46,559
was also designed with way to get us in

00:21:44,259 --> 00:21:46,559
mind

00:21:47,460 --> 00:21:54,720
so the way this works is you share git

00:21:52,679 --> 00:21:57,690
repository for both code and

00:21:54,720 --> 00:21:59,250
configuration you install the site from

00:21:57,690 --> 00:22:01,500
the initial configuration as Andrea

00:21:59,250 --> 00:22:06,240
explained before and you adopt the

00:22:01,500 --> 00:22:08,610
successful git branching model the

00:22:06,240 --> 00:22:11,250
project bootstrap is very similar to

00:22:08,610 --> 00:22:14,570
first developer that starts the project

00:22:11,250 --> 00:22:17,850
installs it with the installer and

00:22:14,570 --> 00:22:21,120
exports a configuration and committed to

00:22:17,850 --> 00:22:24,750
get every other subsequent developer and

00:22:21,120 --> 00:22:26,490
the production just cloned the code and

00:22:24,750 --> 00:22:32,870
install it with the configuration

00:22:26,490 --> 00:22:32,870
install a profile and then go from there

00:22:33,950 --> 00:22:41,220
so the parallel development will be work

00:22:37,409 --> 00:22:43,559
with the get branches and commit and

00:22:41,220 --> 00:22:50,130
push the configuration changes to the

00:22:43,559 --> 00:22:53,010
branch the in in parallel but careless

00:22:50,130 --> 00:22:56,309
merging it can be dangerous and may be

00:22:53,010 --> 00:22:58,320
problematic remember that it does not

00:22:56,309 --> 00:23:00,240
care about Drupal at all get this

00:22:58,320 --> 00:23:04,320
completely independent from the robot

00:23:00,240 --> 00:23:07,529
but the configuration is very important

00:23:04,320 --> 00:23:09,870
to droop on so you need to let get do

00:23:07,529 --> 00:23:13,100
the merging and let Drupal decide

00:23:09,870 --> 00:23:18,480
whether the merge was successful or not

00:23:13,100 --> 00:23:22,860
if you do not follow the good work flow

00:23:18,480 --> 00:23:26,159
then you may lose uncommitted work you

00:23:22,860 --> 00:23:30,899
may accidentally overwrite work of other

00:23:26,159 --> 00:23:34,110
developers and configuration could look

00:23:30,899 --> 00:23:38,720
okay at first but actually is not valid

00:23:34,110 --> 00:23:41,929
for Drupal so the safe sequence is

00:23:38,720 --> 00:23:45,049
exporting configuration committing it

00:23:41,929 --> 00:23:48,289
merging other people's configurations

00:23:45,049 --> 00:23:52,520
importing the configuration and pushing

00:23:48,289 --> 00:23:52,520
to do the other developers

00:23:55,150 --> 00:23:59,690
let's look at a couple of cases what

00:23:57,950 --> 00:24:02,060
happens when you don't respect this

00:23:59,690 --> 00:24:05,450
order for example if you import before

00:24:02,060 --> 00:24:07,340
you export it then you delete all your

00:24:05,450 --> 00:24:10,670
work although all the things you did

00:24:07,340 --> 00:24:15,500
since the previous time and there is no

00:24:10,670 --> 00:24:19,220
backup so tough luck and when you merge

00:24:15,500 --> 00:24:21,530
before exporting the export deletes the

00:24:19,220 --> 00:24:26,960
previous work and replaces little bit by

00:24:21,530 --> 00:24:29,600
what you have in your site so you you

00:24:26,960 --> 00:24:32,840
basically ignore what your colleagues

00:24:29,600 --> 00:24:36,440
have done and you can recover this

00:24:32,840 --> 00:24:38,600
because gate can handle it it's just not

00:24:36,440 --> 00:24:41,450
the straightforward workflow but with

00:24:38,600 --> 00:24:46,040
some get food you can you can recover

00:24:41,450 --> 00:24:50,110
from this and if you merge before commit

00:24:46,040 --> 00:24:55,370
then you will have the unstaged files

00:24:50,110 --> 00:24:57,640
and you merge and then maybe you get in

00:24:55,370 --> 00:25:01,160
trouble when there is a merge conflict

00:24:57,640 --> 00:25:03,140
and it's not as easy as just reverting

00:25:01,160 --> 00:25:06,200
to the convey commit that you knew

00:25:03,140 --> 00:25:10,670
worked because merge conflicts obviously

00:25:06,200 --> 00:25:13,870
cannot be imported as such and if you

00:25:10,670 --> 00:25:17,780
forget to import it after you merged

00:25:13,870 --> 00:25:19,370
then you will keep the state of your

00:25:17,780 --> 00:25:22,640
Drupal site the way you have it before

00:25:19,370 --> 00:25:24,230
you did the march and you continue

00:25:22,640 --> 00:25:25,820
developing and then the next time you

00:25:24,230 --> 00:25:31,910
export it you're in the same situation

00:25:25,820 --> 00:25:35,270
as before and you may have more

00:25:31,910 --> 00:25:41,780
difficulties then to solve what should

00:25:35,270 --> 00:25:44,810
be merged and how it should work if we

00:25:41,780 --> 00:25:46,840
if we look at the nice example and how

00:25:44,810 --> 00:25:49,220
you can break the configuration with get

00:25:46,840 --> 00:25:50,780
you are all familiar with the standard

00:25:49,220 --> 00:25:53,570
installation profile I guess so you

00:25:50,780 --> 00:25:57,380
install that the first developer on his

00:25:53,570 --> 00:26:01,490
branch deletes the tags from the article

00:25:57,380 --> 00:26:04,190
content type and that results in two

00:26:01,490 --> 00:26:04,920
changes and two files are removed the

00:26:04,190 --> 00:26:07,830
field

00:26:04,920 --> 00:26:11,340
and the field storage because the tags

00:26:07,830 --> 00:26:13,440
was only used on the article content

00:26:11,340 --> 00:26:16,320
type and when you remove the last field

00:26:13,440 --> 00:26:19,320
it also removes the storage the

00:26:16,320 --> 00:26:21,480
developer be ads attacks that the tax

00:26:19,320 --> 00:26:23,880
field reuses the field for the basic

00:26:21,480 --> 00:26:28,650
page which results in adding the field

00:26:23,880 --> 00:26:29,970
instance for for the basic page so this

00:26:28,650 --> 00:26:31,950
work happened in completely different

00:26:29,970 --> 00:26:36,150
files so get this very happy to merge

00:26:31,950 --> 00:26:38,040
this but the resulting merged

00:26:36,150 --> 00:26:40,680
configuration is invalid because now you

00:26:38,040 --> 00:26:42,660
have the field instance for for the tags

00:26:40,680 --> 00:26:49,140
on the basic page without the field

00:26:42,660 --> 00:26:51,420
storage and it will just not work so

00:26:49,140 --> 00:26:54,000
they take away from this is that when

00:26:51,420 --> 00:26:56,130
merging the configuration always check

00:26:54,000 --> 00:26:59,850
that is still valid by by importing it

00:26:56,130 --> 00:27:02,730
and at this point you can also then fix

00:26:59,850 --> 00:27:09,510
it relatively easily of course this this

00:27:02,730 --> 00:27:11,160
is example is is very basic and and of

00:27:09,510 --> 00:27:13,470
course you don't do it exactly this way

00:27:11,160 --> 00:27:17,880
but when you are working on a larger

00:27:13,470 --> 00:27:20,190
project things that are more complicated

00:27:17,880 --> 00:27:28,890
than this but have the same effects can

00:27:20,190 --> 00:27:30,420
can also happen so okay so now we are

00:27:28,890 --> 00:27:33,510
going to have a look at another use case

00:27:30,420 --> 00:27:35,400
so what about package configuration and

00:27:33,510 --> 00:27:38,940
reuse it I mean this was actually what

00:27:35,400 --> 00:27:40,830
we were all use to in Drupal 7 right so

00:27:38,940 --> 00:27:43,080
intro personally I'd like features that

00:27:40,830 --> 00:27:46,590
was covering both use cases so I would

00:27:43,080 --> 00:27:48,180
cover the deployment use case because

00:27:46,590 --> 00:27:50,160
will package your configuration features

00:27:48,180 --> 00:27:52,470
and deploy it and then have it on

00:27:50,160 --> 00:27:54,750
production but then you would also cover

00:27:52,470 --> 00:27:56,250
the ray usage use case so in rubellite

00:27:54,750 --> 00:27:57,780
configuration management works a little

00:27:56,250 --> 00:28:00,720
bit differently as if it's in so far

00:27:57,780 --> 00:28:01,950
basically the configuration in Drupal 8

00:28:00,720 --> 00:28:03,240
is monolithic so you have one

00:28:01,950 --> 00:28:05,640
configuration that covers the whole

00:28:03,240 --> 00:28:08,610
sides you don't have necessarily

00:28:05,640 --> 00:28:12,080
configuration packaging tamale so what

00:28:08,610 --> 00:28:14,640
features is for Drupal 8 does is a

00:28:12,080 --> 00:28:18,090
basically configuration packages so it's

00:28:14,640 --> 00:28:18,419
really stop acting as a deployer let's

00:28:18,090 --> 00:28:22,739
say

00:28:18,419 --> 00:28:24,690
if you want and it became only what was

00:28:22,739 --> 00:28:26,789
best at it so a packager of

00:28:24,690 --> 00:28:28,350
configuration it is entirely new for

00:28:26,789 --> 00:28:29,759
Drupal 8 and it takes advantage of

00:28:28,350 --> 00:28:31,830
configuration management of course

00:28:29,759 --> 00:28:34,980
because in Drupal 8 modules can have

00:28:31,830 --> 00:28:36,929
configuration already so there you can a

00:28:34,980 --> 00:28:38,730
modulus configuration in the install

00:28:36,929 --> 00:28:40,559
directory can install configuration once

00:28:38,730 --> 00:28:44,519
the model is enabled and basically what

00:28:40,559 --> 00:28:47,700
feature does it reuses this this this

00:28:44,519 --> 00:28:50,070
technology that is already there what

00:28:47,700 --> 00:28:52,529
feature offer then since the

00:28:50,070 --> 00:28:54,899
configuration it's all taken care by

00:28:52,529 --> 00:28:57,210
core it offers an automatic packaging

00:28:54,899 --> 00:28:59,009
and this is really what feature is best

00:28:57,210 --> 00:29:01,529
off so what feature does future

00:28:59,009 --> 00:29:03,749
basically analyzes your sides and

00:29:01,529 --> 00:29:08,820
automatically detects way of dragging

00:29:03,749 --> 00:29:10,440
your site into features and so then it

00:29:08,820 --> 00:29:12,029
can propose to you basically the

00:29:10,440 --> 00:29:14,070
different ways that you can visualize

00:29:12,029 --> 00:29:16,019
your your current site and package the

00:29:14,070 --> 00:29:18,179
configuration and reuse maybe one module

00:29:16,019 --> 00:29:21,629
of your site on another and another and

00:29:18,179 --> 00:29:24,239
another site so basically features for

00:29:21,629 --> 00:29:26,730
Drupal 8 only focus on on honorary usage

00:29:24,239 --> 00:29:29,609
and it is a development module means

00:29:26,730 --> 00:29:31,409
that the features in Drupal 8 not depend

00:29:29,609 --> 00:29:34,019
from the futures model anymore like it

00:29:31,409 --> 00:29:36,330
was with Drupal 7 right so it is real

00:29:34,019 --> 00:29:39,389
active le should actually never even

00:29:36,330 --> 00:29:41,159
commit your features model itself to the

00:29:39,389 --> 00:29:43,919
production it's just a development model

00:29:41,159 --> 00:29:48,119
active alleys okay so it's just packages

00:29:43,919 --> 00:29:49,950
and ended signature based on there are

00:29:48,119 --> 00:29:53,789
certain features as we said already are

00:29:49,950 --> 00:29:56,159
just modules so they they just come with

00:29:53,789 --> 00:29:58,769
configuration you enable the module to

00:29:56,159 --> 00:30:00,570
the future and the Drupal court will

00:29:58,769 --> 00:30:02,249
take care of taking configuration from

00:30:00,570 --> 00:30:04,409
the install directory content into a

00:30:02,249 --> 00:30:07,169
module and staging it to your site from

00:30:04,409 --> 00:30:10,019
that moment on you will treat that

00:30:07,169 --> 00:30:13,769
configuration as part of your monolithic

00:30:10,019 --> 00:30:15,869
Drupal 8 core configuration so when you

00:30:13,769 --> 00:30:17,759
develop over this side you will just a

00:30:15,869 --> 00:30:19,679
sport all the configuration as as we

00:30:17,759 --> 00:30:21,239
have seen so far and just continue with

00:30:19,679 --> 00:30:22,799
a normal workflow so it's just about

00:30:21,239 --> 00:30:25,529
features are really usable for your

00:30:22,799 --> 00:30:30,930
usage and to bootstrap basically the

00:30:25,529 --> 00:30:32,910
project so yeah our future work so

00:30:30,930 --> 00:30:34,710
see a quick example on how to use

00:30:32,910 --> 00:30:36,030
feature so you in every feature module

00:30:34,710 --> 00:30:39,210
then you also enabled the future you re

00:30:36,030 --> 00:30:45,840
module and then you visit the setting

00:30:39,210 --> 00:30:49,050
page where you basically have depending

00:30:45,840 --> 00:30:51,930
on the like slicer that you that you

00:30:49,050 --> 00:30:54,900
enable you can have different features

00:30:51,930 --> 00:30:56,700
proposed to you for example you can have

00:30:54,900 --> 00:30:58,170
features proposed to you by content

00:30:56,700 --> 00:30:59,430
types so everything that belongs to

00:30:58,170 --> 00:31:00,900
Connor related to a content type is

00:30:59,430 --> 00:31:02,700
packaging three features and proposed to

00:31:00,900 --> 00:31:04,800
you like a block feature for example or

00:31:02,700 --> 00:31:07,110
you can have like namespacing slices so

00:31:04,800 --> 00:31:09,210
you can say a slice my side / namespace

00:31:07,110 --> 00:31:11,460
everything or configuration that is

00:31:09,210 --> 00:31:12,960
prefixed with this namespace should

00:31:11,460 --> 00:31:16,710
belong to a future so by configuring

00:31:12,960 --> 00:31:19,320
this this settings basically features

00:31:16,710 --> 00:31:21,780
can propose to you already packaged

00:31:19,320 --> 00:31:23,640
module sa then what you do just check

00:31:21,780 --> 00:31:25,530
that box and then download it and then

00:31:23,640 --> 00:31:30,480
you have your configuration basically

00:31:25,530 --> 00:31:32,010
ready to be reused on on another site so

00:31:30,480 --> 00:31:33,950
the takeaway message of features to do

00:31:32,010 --> 00:31:38,700
pilots it's really the following I mean

00:31:33,950 --> 00:31:40,350
if you are using features for deployment

00:31:38,700 --> 00:31:42,150
you are doing really doing it wrong it's

00:31:40,350 --> 00:31:44,310
not this main use case you could do that

00:31:42,150 --> 00:31:45,840
but it's a bit of a headache I mean

00:31:44,310 --> 00:31:47,880
configuration management really really

00:31:45,840 --> 00:31:49,770
works well for that so there is no

00:31:47,880 --> 00:31:52,830
reason to find other other solutions for

00:31:49,770 --> 00:31:54,480
that it's to reuse partial configuration

00:31:52,830 --> 00:31:56,280
across sides so you're not going to

00:31:54,480 --> 00:31:58,290
store all your site into a feature and

00:31:56,280 --> 00:32:00,030
then use it another site making the

00:31:58,290 --> 00:32:01,980
other side time it's just a way to

00:32:00,030 --> 00:32:03,720
package bits of configuration for your

00:32:01,980 --> 00:32:06,270
site for example the blog feature set

00:32:03,720 --> 00:32:08,340
and then it's only development model

00:32:06,270 --> 00:32:10,260
this time so all your modules that you

00:32:08,340 --> 00:32:11,730
create with features do not depend from

00:32:10,260 --> 00:32:13,710
feature so you don't need to have it

00:32:11,730 --> 00:32:18,060
around on production which is very very

00:32:13,710 --> 00:32:19,620
good news so is it is featured perfect

00:32:18,060 --> 00:32:22,040
because it looks perfect so far but

00:32:19,620 --> 00:32:25,200
there are actually some shades because

00:32:22,040 --> 00:32:27,180
the way configuration management is it

00:32:25,200 --> 00:32:28,380
does not really allow full packaging at

00:32:27,180 --> 00:32:31,230
least not for every kind of

00:32:28,380 --> 00:32:32,670
configuration for example well the first

00:32:31,230 --> 00:32:35,250
thing overrides are not supported

00:32:32,670 --> 00:32:36,750
properly so updating a custom

00:32:35,250 --> 00:32:38,730
distribution for example if you have a

00:32:36,750 --> 00:32:40,920
distribution that uses features and you

00:32:38,730 --> 00:32:42,690
staged like you enable a feature like a

00:32:40,920 --> 00:32:44,340
block feature from that moment on that

00:32:42,690 --> 00:32:45,320
configuration into the block feature is

00:32:44,340 --> 00:32:48,690
part of

00:32:45,320 --> 00:32:52,349
configuration work normally what happen

00:32:48,690 --> 00:32:54,029
if there is a new version of that of the

00:32:52,349 --> 00:32:55,970
blog feature itself that has different

00:32:54,029 --> 00:32:58,289
configuration so feature does not

00:32:55,970 --> 00:33:01,289
provide you with a clean path to do that

00:32:58,289 --> 00:33:03,779
so their updates defeat the blog feature

00:33:01,289 --> 00:33:05,940
will need to provide custom update hooks

00:33:03,779 --> 00:33:09,029
to norther to tweak the configuration

00:33:05,940 --> 00:33:10,919
changes etc while many links are not as

00:33:09,029 --> 00:33:13,499
portable but that's by design because

00:33:10,919 --> 00:33:15,210
many links our content 10 tickets Andrew

00:33:13,499 --> 00:33:18,389
parades there are modest to go around

00:33:15,210 --> 00:33:21,690
that but that's also what features does

00:33:18,389 --> 00:33:23,940
not provide exit as opposed to the

00:33:21,690 --> 00:33:25,499
version on Drupal 7 and then last but

00:33:23,940 --> 00:33:28,139
not least permissions are not as

00:33:25,499 --> 00:33:31,019
portable so in their current we removed

00:33:28,139 --> 00:33:33,690
why because at the moment permissions in

00:33:31,019 --> 00:33:36,869
Drupal 8 apart of information attached

00:33:33,690 --> 00:33:39,840
to the role configuration object risk so

00:33:36,869 --> 00:33:41,759
you cannot abstract the permission from

00:33:39,840 --> 00:33:43,529
a role that is attached to and that's

00:33:41,759 --> 00:33:45,450
again Drupal 8 by design so we don't

00:33:43,529 --> 00:33:47,279
have any we're going around that so

00:33:45,450 --> 00:33:53,340
let's say future is perfect as far as

00:33:47,279 --> 00:33:54,419
you can go and for these three like gaps

00:33:53,340 --> 00:33:57,330
let's say there is actually a

00:33:54,419 --> 00:33:59,609
documentation page actually I must say

00:33:57,330 --> 00:34:01,139
the features a photo pilot documentation

00:33:59,609 --> 00:34:02,879
is really really well written and find

00:34:01,139 --> 00:34:05,039
all the answers to your questions there

00:34:02,879 --> 00:34:08,010
and you can have a look to the gaps

00:34:05,039 --> 00:34:09,659
there are links to issues about those

00:34:08,010 --> 00:34:11,279
three issues there and there possibly

00:34:09,659 --> 00:34:12,720
also feature issue so if you are

00:34:11,279 --> 00:34:16,649
interested you can you can have a look

00:34:12,720 --> 00:34:20,039
at that okay so now it's here's another

00:34:16,649 --> 00:34:21,899
problem so everything is looks pretty

00:34:20,039 --> 00:34:23,970
pretty nice now our lives much much

00:34:21,899 --> 00:34:25,529
easier as developers we have answers for

00:34:23,970 --> 00:34:27,179
most of our problems that we had in

00:34:25,529 --> 00:34:29,879
Drupal 7 so it's really an ideal

00:34:27,179 --> 00:34:33,000
situations of our but we still have this

00:34:29,879 --> 00:34:34,829
this did not go away in Drupal 8 so what

00:34:33,000 --> 00:34:37,069
happen if a client starts to mess up

00:34:34,829 --> 00:34:39,000
with configuration on production right

00:34:37,069 --> 00:34:42,419
this is actually different because

00:34:39,000 --> 00:34:44,879
imagine the ideal situation so you have

00:34:42,419 --> 00:34:47,940
like all your configurations correctly

00:34:44,879 --> 00:34:50,220
exported its version is deployed and

00:34:47,940 --> 00:34:51,869
your development team is great works

00:34:50,220 --> 00:34:55,230
great together and adopt a solid get

00:34:51,869 --> 00:34:57,119
pension model so takes care of having a

00:34:55,230 --> 00:34:58,670
branchburg feature and store

00:34:57,119 --> 00:35:01,319
the configuration and everything but

00:34:58,670 --> 00:35:02,970
when once the configuration is deployed

00:35:01,319 --> 00:35:04,980
on production then the client starts to

00:35:02,970 --> 00:35:09,499
fiddle with your configuration and

00:35:04,980 --> 00:35:12,329
changes stuff so what happened then so

00:35:09,499 --> 00:35:14,490
the problem here is that changing

00:35:12,329 --> 00:35:16,440
configuration is an act of development

00:35:14,490 --> 00:35:18,480
in Drupal 8 anywhere because the scenes

00:35:16,440 --> 00:35:19,829
configuration is monolithic any submit

00:35:18,480 --> 00:35:22,109
form submitted to do on the

00:35:19,829 --> 00:35:24,779
administration page is a change in

00:35:22,109 --> 00:35:27,749
configuration meaning that that at all

00:35:24,779 --> 00:35:29,430
affect development so it your client is

00:35:27,749 --> 00:35:30,960
actually your development that you

00:35:29,430 --> 00:35:32,609
cannot a developer that you cannot

00:35:30,960 --> 00:35:34,289
control that you will never never be

00:35:32,609 --> 00:35:36,869
able to control so I need to find a way

00:35:34,289 --> 00:35:38,400
around that there are different options

00:35:36,869 --> 00:35:40,230
this is the most radical one the one I

00:35:38,400 --> 00:35:41,880
love the most because it's really solves

00:35:40,230 --> 00:35:44,549
the problem I mean it's a natural

00:35:41,880 --> 00:35:45,990
solution to the problem which means you

00:35:44,549 --> 00:35:47,999
can just lock the configuration on

00:35:45,990 --> 00:35:49,890
production there is no way even with

00:35:47,999 --> 00:35:52,410
user one that you can actually submitter

00:35:49,890 --> 00:35:55,079
from ever again of course this is not a

00:35:52,410 --> 00:35:58,499
configuration it's not exportable okay

00:35:55,079 --> 00:36:01,589
it's just setting to add to your setting

00:35:58,499 --> 00:36:04,430
PHP on the production environment so

00:36:01,589 --> 00:36:06,569
it's an environment specific setting and

00:36:04,430 --> 00:36:08,609
this basically locks the configuration

00:36:06,569 --> 00:36:11,039
of production is very nice man till the

00:36:08,609 --> 00:36:13,890
clients complaints of course the second

00:36:11,039 --> 00:36:15,599
one it's a bit more elaborate but this

00:36:13,890 --> 00:36:17,700
will allow the kind to do more or less

00:36:15,599 --> 00:36:19,380
for everyone's so but then you need to

00:36:17,700 --> 00:36:20,970
have a person that is responsible for

00:36:19,380 --> 00:36:24,269
following that following what what

00:36:20,970 --> 00:36:25,650
what's happening so the if we can say

00:36:24,269 --> 00:36:27,210
the bedside of having a monolithic

00:36:25,650 --> 00:36:29,579
configurations that anything everything

00:36:27,210 --> 00:36:30,989
is strapped this is also the strength of

00:36:29,579 --> 00:36:33,630
configuration management because since

00:36:30,989 --> 00:36:35,940
everything is tracked then everything is

00:36:33,630 --> 00:36:38,789
traceable so whatever the client does

00:36:35,940 --> 00:36:41,279
you can be sure that you know about it

00:36:38,789 --> 00:36:43,109
why how by exporting the configuration

00:36:41,279 --> 00:36:45,299
from production and then dipping it with

00:36:43,109 --> 00:36:47,220
a one year in development right because

00:36:45,299 --> 00:36:48,900
then you know what changed before in

00:36:47,220 --> 00:36:50,789
dupage center for example you didn't

00:36:48,900 --> 00:36:53,069
know what changed that was also bad

00:36:50,789 --> 00:36:54,869
because that happened also interpreter

00:36:53,069 --> 00:36:56,910
so what you will do you would have like

00:36:54,869 --> 00:37:01,200
different branch if you say if you if

00:36:56,910 --> 00:37:02,400
you if you want it would have liked dump

00:37:01,200 --> 00:37:05,269
the configuration from production on

00:37:02,400 --> 00:37:08,249
deliver branch and then work the get

00:37:05,269 --> 00:37:10,260
work your way out with get so you could

00:37:08,249 --> 00:37:12,210
like compare these different branch

00:37:10,260 --> 00:37:14,850
and then decide what to do with that

00:37:12,210 --> 00:37:19,020
call the client etc once having in setup

00:37:14,850 --> 00:37:21,450
you just you just commit marriage the to

00:37:19,020 --> 00:37:23,310
run against continuous integration maybe

00:37:21,450 --> 00:37:26,220
fix some test is something important

00:37:23,310 --> 00:37:29,370
changed etc once it's done then you you

00:37:26,220 --> 00:37:33,450
you basically restore the production

00:37:29,370 --> 00:37:36,840
site to a sanity level again and then

00:37:33,450 --> 00:37:38,220
that's it the third option is again

00:37:36,840 --> 00:37:42,600
configuration escrito me that suction

00:37:38,220 --> 00:37:44,220
model that Fabian is working on it's so

00:37:42,600 --> 00:37:46,170
the way that configuration speech works

00:37:44,220 --> 00:37:48,420
is that you can actually configure which

00:37:46,170 --> 00:37:51,690
curve which configuration entity goes

00:37:48,420 --> 00:37:53,670
where in which directory right so you

00:37:51,690 --> 00:37:55,710
have like now one sink directory where

00:37:53,670 --> 00:37:57,480
our configuration is but if you use

00:37:55,710 --> 00:37:59,790
configuration spit you can say i want

00:37:57,480 --> 00:38:01,920
this this and that configuration tlie to

00:37:59,790 --> 00:38:03,510
go to another directory when i export so

00:38:01,920 --> 00:38:06,030
you can really split them this is pretty

00:38:03,510 --> 00:38:08,160
powerful because you can work your way

00:38:06,030 --> 00:38:10,470
around that problem with the with a

00:38:08,160 --> 00:38:12,930
client in many different ways for

00:38:10,470 --> 00:38:15,630
example you would want imagine that that

00:38:12,930 --> 00:38:17,430
kind change your configuration online

00:38:15,630 --> 00:38:20,250
okay then you go review the changes say

00:38:17,430 --> 00:38:21,930
okay I want this configuration entity

00:38:20,250 --> 00:38:23,490
that my client worked on for sample

00:38:21,930 --> 00:38:25,500
these three views I don't want them to

00:38:23,490 --> 00:38:27,120
be part of my development thing because

00:38:25,500 --> 00:38:28,620
they will break my tester don't care and

00:38:27,120 --> 00:38:30,900
this is not really what this is about

00:38:28,620 --> 00:38:32,940
but I still want the client web it's

00:38:30,900 --> 00:38:35,070
likely this work let's say so what you

00:38:32,940 --> 00:38:37,410
do you take this configuration entities

00:38:35,070 --> 00:38:39,960
you create configuration speed and it is

00:38:37,410 --> 00:38:43,080
like saying that these three goes to

00:38:39,960 --> 00:38:44,780
this directory aside like we call it for

00:38:43,080 --> 00:38:47,280
example config client so that

00:38:44,780 --> 00:38:49,590
configuration stays there it doesn't it

00:38:47,280 --> 00:38:52,050
will never bleed into the sink directory

00:38:49,590 --> 00:38:53,640
that is what the developers share that

00:38:52,050 --> 00:38:56,490
is what the continuous integration uses

00:38:53,640 --> 00:39:00,000
to run tests accelera seller right what

00:38:56,490 --> 00:39:02,610
you do then your sport so your sport

00:39:00,000 --> 00:39:04,530
using config split export common to that

00:39:02,610 --> 00:39:05,940
directory this will read the

00:39:04,530 --> 00:39:08,370
configuration you have in your site and

00:39:05,940 --> 00:39:10,230
we do a rising you pull the new

00:39:08,370 --> 00:39:12,930
configuration of businesses users so you

00:39:10,230 --> 00:39:15,390
just get pool and the sim directory gets

00:39:12,930 --> 00:39:17,820
new configuration etcetera and then you

00:39:15,390 --> 00:39:19,620
import configuration on production but

00:39:17,820 --> 00:39:21,370
using the config splitting port which

00:39:19,620 --> 00:39:22,930
will merge the two directory and then

00:39:21,370 --> 00:39:26,080
than their own production this will

00:39:22,930 --> 00:39:27,880
allow for the team to always have the

00:39:26,080 --> 00:39:29,770
same configuration under control and

00:39:27,880 --> 00:39:31,450
then I'd like for example extra views

00:39:29,770 --> 00:39:34,930
extra content type that you really don't

00:39:31,450 --> 00:39:37,030
want to have around as developer just on

00:39:34,930 --> 00:39:41,460
this directory there in the config

00:39:37,030 --> 00:39:45,160
client for a sample without bothering so

00:39:41,460 --> 00:39:47,170
alright so the last problem that you are

00:39:45,160 --> 00:39:49,840
going to face today so can I deploy

00:39:47,170 --> 00:39:51,430
content that my configuration depends on

00:39:49,840 --> 00:39:53,440
so this is very very old program a

00:39:51,430 --> 00:39:55,150
generic view that is filtered by

00:39:53,440 --> 00:39:57,430
taxonomy term how many times we add that

00:39:55,150 --> 00:39:59,560
right so you're supported you in feature

00:39:57,430 --> 00:40:01,000
but then there is like td5 and then when

00:39:59,560 --> 00:40:03,250
you when you when you put that square

00:40:01,000 --> 00:40:05,740
that you on on production till five is

00:40:03,250 --> 00:40:10,420
another term right is not our at five so

00:40:05,740 --> 00:40:13,090
it's a mess so well let's break you the

00:40:10,420 --> 00:40:16,720
problem so the plank inflation depends

00:40:13,090 --> 00:40:20,380
on note blocks taxonomy terms whatever

00:40:16,720 --> 00:40:21,610
else the progress that yeah the country

00:40:20,380 --> 00:40:25,840
is not real exported a long way

00:40:21,610 --> 00:40:28,120
configuration but Drupal it's got much

00:40:25,840 --> 00:40:30,430
much better than that too because first

00:40:28,120 --> 00:40:32,170
of all content has uuid everywhere so

00:40:30,430 --> 00:40:34,270
all content entities come with you you

00:40:32,170 --> 00:40:37,480
re so they are actually unique I mean

00:40:34,270 --> 00:40:40,480
node will always have NID in like one

00:40:37,480 --> 00:40:42,580
two three but the actual ID is uuid of

00:40:40,480 --> 00:40:45,670
that node and that goes for all content

00:40:42,580 --> 00:40:47,710
entities okay it's really calm then the

00:40:45,670 --> 00:40:49,680
first thing that's Roopa does this does

00:40:47,710 --> 00:40:53,050
for by default so when you import

00:40:49,680 --> 00:40:54,790
configuration you will check for content

00:40:53,050 --> 00:40:57,430
dependencies on configuration and then

00:40:54,790 --> 00:40:59,920
if the dos con does content and entities

00:40:57,430 --> 00:41:02,380
are missing you will fire an import

00:40:59,920 --> 00:41:05,950
missing content event this does under

00:41:02,380 --> 00:41:08,410
the hood actually you can always write a

00:41:05,950 --> 00:41:09,880
event subscriber and handle that event

00:41:08,410 --> 00:41:11,920
and do whatever you need to do for

00:41:09,880 --> 00:41:14,470
example if then you get the entity with

00:41:11,920 --> 00:41:16,480
this UID then you might have that entity

00:41:14,470 --> 00:41:18,790
exported somewhere and then you you you

00:41:16,480 --> 00:41:21,760
might just put the density back and then

00:41:18,790 --> 00:41:23,950
fix the thing see if nothing up and then

00:41:21,760 --> 00:41:26,800
there is the final missing content

00:41:23,950 --> 00:41:28,300
subscriber is the only contest event

00:41:26,800 --> 00:41:30,010
subscriber that actually handles that

00:41:28,300 --> 00:41:32,410
event is provided by Drupal core and

00:41:30,010 --> 00:41:34,750
what the tender does is simply removes

00:41:32,410 --> 00:41:35,890
at runtime those dependencies

00:41:34,750 --> 00:41:39,360
content dependencies from that

00:41:35,890 --> 00:41:43,180
configuration and then so that the

00:41:39,360 --> 00:41:45,100
configuration can be import imported it

00:41:43,180 --> 00:41:47,290
does not alter the configuration it does

00:41:45,100 --> 00:41:49,270
not change the configuration so is not

00:41:47,290 --> 00:41:50,980
saved with all the dependencies the

00:41:49,270 --> 00:41:56,170
dependencies are still stood there it's

00:41:50,980 --> 00:41:58,990
just a runtime removal right so this is

00:41:56,170 --> 00:42:01,900
the option one option to you can use a

00:41:58,990 --> 00:42:03,430
very nice molecule default content so

00:42:01,900 --> 00:42:05,260
basically this default content takes

00:42:03,430 --> 00:42:08,140
advantage of all the effort that went

00:42:05,260 --> 00:42:11,080
into the Drupal headless initiative so

00:42:08,140 --> 00:42:14,140
now we can export n to this using the h

00:42:11,080 --> 00:42:16,900
eh l plus json format and they take can

00:42:14,140 --> 00:42:19,570
take care drupal Kotex care about

00:42:16,900 --> 00:42:21,790
resolving the entity references so if

00:42:19,570 --> 00:42:23,770
you export a Nordic you get also they

00:42:21,790 --> 00:42:25,290
also often know the taxonomy terms that

00:42:23,770 --> 00:42:28,960
are linked to the node and all the rest

00:42:25,290 --> 00:42:31,690
that's all out of the rocks so basically

00:42:28,960 --> 00:42:34,510
all the default content works is that if

00:42:31,690 --> 00:42:36,220
you have a module with the slash content

00:42:34,510 --> 00:42:38,410
directory with the antitype so that

00:42:36,220 --> 00:42:41,280
format there and you store your JSON

00:42:38,410 --> 00:42:44,920
your sport identity in JSON using

00:42:41,280 --> 00:42:46,450
different ways the bed the most

00:42:44,920 --> 00:42:47,710
convenient is using the trash common

00:42:46,450 --> 00:42:48,970
that comes with the module of course but

00:42:47,710 --> 00:42:51,280
you could also not use that it was

00:42:48,970 --> 00:42:54,700
fabricated on way of a sporting entities

00:42:51,280 --> 00:42:58,410
if you want then once that module is

00:42:54,700 --> 00:43:02,380
enabled then you get these entities

00:42:58,410 --> 00:43:05,260
imported right the next step the results

00:43:02,380 --> 00:43:07,870
an issue for that is to actually not be

00:43:05,260 --> 00:43:09,940
bound to the event that the model is

00:43:07,870 --> 00:43:12,610
enabled or is installed in order to have

00:43:09,940 --> 00:43:14,110
the entities like imported you can do

00:43:12,610 --> 00:43:16,780
that as well as very easy you can extend

00:43:14,110 --> 00:43:19,120
the service for this module provides and

00:43:16,780 --> 00:43:20,800
make your own custom service that does

00:43:19,120 --> 00:43:22,660
the trick so you can export to a custom

00:43:20,800 --> 00:43:24,010
directory commit your content with your

00:43:22,660 --> 00:43:26,140
code and with your configuration all

00:43:24,010 --> 00:43:28,030
together your default content right not

00:43:26,140 --> 00:43:30,100
all your content just the content the

00:43:28,030 --> 00:43:32,920
configuration depends on and then you

00:43:30,100 --> 00:43:34,300
can join then part of your of your if

00:43:32,920 --> 00:43:38,920
you're billed as a will be also to

00:43:34,300 --> 00:43:42,010
import the default content yeah so then

00:43:38,920 --> 00:43:44,050
this is actually a layout of what you

00:43:42,010 --> 00:43:46,660
get when you use a default content model

00:43:44,050 --> 00:43:48,650
so that's that structure our our default

00:43:46,660 --> 00:43:50,390
content dumps that we have for

00:43:48,650 --> 00:43:52,220
one of our projects does not really the

00:43:50,390 --> 00:43:53,690
same directory structure because the

00:43:52,220 --> 00:43:55,549
default content module does not have the

00:43:53,690 --> 00:43:57,289
bundle names under the entity type so

00:43:55,549 --> 00:43:59,089
that's what we did is very easy just a

00:43:57,289 --> 00:44:00,799
standard cell with you you have that so

00:43:59,089 --> 00:44:02,990
you can make a form of this and there

00:44:00,799 --> 00:44:05,270
you can see also how it looks sorry just

00:44:02,990 --> 00:44:07,609
a JSON file that's the uuid your best

00:44:05,270 --> 00:44:09,140
friend in this case a language code

00:44:07,609 --> 00:44:10,940
title and all the fields plus the

00:44:09,140 --> 00:44:13,099
references it's all it's all bundled

00:44:10,940 --> 00:44:14,660
together that's opposition to option

00:44:13,099 --> 00:44:16,279
three of course is to use the ploy but

00:44:14,660 --> 00:44:17,750
that's then you get really serious about

00:44:16,279 --> 00:44:19,730
that I mean if you really need a

00:44:17,750 --> 00:44:21,079
complete content deployment solution

00:44:19,730 --> 00:44:22,789
then that's that's the way to go

00:44:21,079 --> 00:44:24,589
interpolates it's an amazing model and

00:44:22,789 --> 00:44:26,680
it's very very very done of course you

00:44:24,589 --> 00:44:28,819
have to set up all your deployment

00:44:26,680 --> 00:44:30,289
environment so it's not as lightweight

00:44:28,819 --> 00:44:32,480
as the other but you'll achieve

00:44:30,289 --> 00:44:35,990
basically everything is the real action

00:44:32,480 --> 00:44:38,510
solution to the actual program the last

00:44:35,990 --> 00:44:40,609
thing I mean you can also like drupal 8

00:44:38,510 --> 00:44:42,470
is also I connects to the hook updates

00:44:40,609 --> 00:44:44,750
that we are all very familiar with

00:44:42,470 --> 00:44:47,930
estuvo developer in Drupal 7 you also

00:44:44,750 --> 00:44:50,240
have another hook which is meant for you

00:44:47,930 --> 00:44:53,000
to work with content manipulation and

00:44:50,240 --> 00:44:55,819
thats hook is called post update it is

00:44:53,000 --> 00:44:57,799
not a hook that has a number after it so

00:44:55,819 --> 00:45:01,400
it does not work like look update does

00:44:57,799 --> 00:45:04,190
not have X 800 1 800 2 because not meant

00:45:01,400 --> 00:45:06,109
to be run sequentially this is a one-off

00:45:04,190 --> 00:45:08,089
operation that you do to fix your

00:45:06,109 --> 00:45:09,529
content when you know what you're doing

00:45:08,089 --> 00:45:10,880
when you're fixing and you know the

00:45:09,529 --> 00:45:13,309
state of the side that you're fixing

00:45:10,880 --> 00:45:15,529
right it's really meant for this so if

00:45:13,309 --> 00:45:16,970
your configuration block something okay

00:45:15,529 --> 00:45:19,609
you know the clearest production site

00:45:16,970 --> 00:45:22,039
has that state you build you do this you

00:45:19,609 --> 00:45:24,710
implement this your fixes in this hook

00:45:22,039 --> 00:45:27,230
this is executed only once after the

00:45:24,710 --> 00:45:30,109
hook updates are run only that one time

00:45:27,230 --> 00:45:33,829
and that's it it's very useful when you

00:45:30,109 --> 00:45:38,270
have models in unstable states that will

00:45:33,829 --> 00:45:40,400
change the schema for example Drupal 8

00:45:38,270 --> 00:45:43,880
is quite common now still so and then

00:45:40,400 --> 00:45:48,730
this will basically fix yeah fix your

00:45:43,880 --> 00:45:53,270
content alright so that's the that's the

00:45:48,730 --> 00:45:56,420
basically overview of what we brought

00:45:53,270 --> 00:45:58,520
you see want to go ahead ok so

00:45:56,420 --> 00:46:00,319
that's basically overview of like we're

00:45:58,520 --> 00:46:01,410
gonna start some that's not of course

00:46:00,319 --> 00:46:03,630
like

00:46:01,410 --> 00:46:05,580
you know saying one is worse when it's

00:46:03,630 --> 00:46:07,530
bad butts like it's a more like a

00:46:05,580 --> 00:46:09,390
completion like the to have an idea what

00:46:07,530 --> 00:46:11,160
what's the levels of completion of

00:46:09,390 --> 00:46:13,110
answer of all these problems that we

00:46:11,160 --> 00:46:15,840
that we have blind so can i deploy

00:46:13,110 --> 00:46:18,060
configuration yes we can for sure Obama

00:46:15,840 --> 00:46:20,310
Hawaii can I style aside from ass

00:46:18,060 --> 00:46:22,740
teasing of Eurasian yes but there's this

00:46:20,310 --> 00:46:24,000
sun quakes like like we have seen it

00:46:22,740 --> 00:46:25,530
still nothing cold so it doesn't take

00:46:24,000 --> 00:46:27,510
five stars like you but but it's gonna

00:46:25,530 --> 00:46:31,200
be in color this week and for sure so

00:46:27,510 --> 00:46:33,740
it's gonna be there then a lot of work

00:46:31,200 --> 00:46:37,020
yeah but we have more I don't help maybe

00:46:33,740 --> 00:46:39,960
how many people so can override logger

00:46:37,020 --> 00:46:41,100
configuration yes we can too but still

00:46:39,960 --> 00:46:42,720
there are there are some legal issues

00:46:41,100 --> 00:46:46,110
that as well so is not under present

00:46:42,720 --> 00:46:47,730
perfect like the deployment can I

00:46:46,110 --> 00:46:50,400
screwed modules from getting deployed

00:46:47,730 --> 00:46:52,050
well I can but then I have this problem

00:46:50,400 --> 00:46:54,330
with configuration the tentative could

00:46:52,050 --> 00:46:55,650
we get ignore we have several solution

00:46:54,330 --> 00:46:57,480
to do that so it's they're not really

00:46:55,650 --> 00:47:00,420
idea it's not established much so it

00:46:57,480 --> 00:47:02,910
gets four stars can I work in parallel

00:47:00,420 --> 00:47:05,430
my colleagues absolutely yes in a very

00:47:02,910 --> 00:47:08,040
very well wait so can a badge

00:47:05,430 --> 00:47:09,960
configuration use it we can really

00:47:08,040 --> 00:47:13,710
that's not tripadvisor three this is

00:47:09,960 --> 00:47:16,200
three is good I mean it's it's it's it's

00:47:13,710 --> 00:47:20,160
a good day three stars are not 10 f 3

00:47:16,200 --> 00:47:21,540
stars but I can Patrick of you a we can

00:47:20,160 --> 00:47:24,000
polish configuration and featured us

00:47:21,540 --> 00:47:27,000
very well very good joke about that but

00:47:24,000 --> 00:47:28,650
yeah with the core with that as some

00:47:27,000 --> 00:47:30,450
limitation and we have to go around that

00:47:28,650 --> 00:47:34,110
once we do it we contribute then we get

00:47:30,450 --> 00:47:35,280
five stars there too well can I handle a

00:47:34,110 --> 00:47:37,170
client messing with production

00:47:35,280 --> 00:47:38,520
configuration that that would have taken

00:47:37,170 --> 00:47:40,050
two stars but thanks to the read-only

00:47:38,520 --> 00:47:42,360
mode attack took four because that's

00:47:40,050 --> 00:47:44,850
really a sufficient heads thanks to the

00:47:42,360 --> 00:47:46,710
riddle module so yes you can prevent

00:47:44,850 --> 00:47:48,530
this and maybe work your way around it

00:47:46,710 --> 00:47:53,700
configuration speed is also good

00:47:48,530 --> 00:47:55,680
initiative towards that and then can

00:47:53,700 --> 00:47:58,950
deliver my content again for style we

00:47:55,680 --> 00:48:01,950
can do that the actual solution is

00:47:58,950 --> 00:48:03,540
pretty big so like deploy and no not

00:48:01,950 --> 00:48:06,000
everybody has the capability of

00:48:03,540 --> 00:48:07,500
maintaining that so it takes took four

00:48:06,000 --> 00:48:12,060
star because you still need a bit thin

00:48:07,500 --> 00:48:14,429
ways around that that's it so I give

00:48:12,060 --> 00:48:17,859
another word Fabian

00:48:14,429 --> 00:48:19,929
yeah it is it's just a list of projects

00:48:17,859 --> 00:48:23,019
most of them will be touched in this

00:48:19,929 --> 00:48:27,099
presentation the config installer again

00:48:23,019 --> 00:48:29,829
very useful to install from an existing

00:48:27,099 --> 00:48:33,939
configuration configure it only to not

00:48:29,829 --> 00:48:38,049
let clients mess with configuration on

00:48:33,939 --> 00:48:40,749
the live site config update reports

00:48:38,049 --> 00:48:44,229
changes between the original and active

00:48:40,749 --> 00:48:46,269
configuration of a module this is placed

00:48:44,229 --> 00:48:49,259
into the features use case a little bit

00:48:46,269 --> 00:48:51,789
features actually depends on this I

00:48:49,259 --> 00:48:54,759
convictive L is a module that helps with

00:48:51,789 --> 00:48:57,909
developing configuration has a number of

00:48:54,759 --> 00:49:03,039
things it does config split will be

00:48:57,909 --> 00:49:05,009
covered in this talk config tools allows

00:49:03,039 --> 00:49:07,659
you to automatically commit

00:49:05,009 --> 00:49:10,959
configuration changes to do a git

00:49:07,659 --> 00:49:13,929
repository and also of course

00:49:10,959 --> 00:49:16,089
automatically exporting them when you

00:49:13,929 --> 00:49:19,149
submit the form before committing it

00:49:16,089 --> 00:49:22,769
there's two features we recovered and

00:49:19,149 --> 00:49:25,659
the configuration sync which is a way to

00:49:22,769 --> 00:49:27,459
synchronize back the configuration that

00:49:25,659 --> 00:49:29,979
comes the original configuration that

00:49:27,459 --> 00:49:32,289
comes with the module in into the

00:49:29,979 --> 00:49:35,169
eclipse or so it dissolves a bit the

00:49:32,289 --> 00:49:36,999
problem that we have meant when you have

00:49:35,169 --> 00:49:38,739
a module and it comes with configuration

00:49:36,999 --> 00:49:41,979
this configuration when you install the

00:49:38,739 --> 00:49:46,409
module gets into the site configuration

00:49:41,979 --> 00:49:46,409
and then is ignored from then on so the

00:49:47,130 --> 00:49:54,429
profiles and distributions update will

00:49:50,619 --> 00:49:58,359
use something like that there is a

00:49:54,429 --> 00:50:02,349
couple more that and also newer ones

00:49:58,359 --> 00:50:06,419
that we didn't list but there's many

00:50:02,349 --> 00:50:09,729
people working in this space so and

00:50:06,419 --> 00:50:13,259
thank you very much rate the session and

00:50:09,729 --> 00:50:13,259
question for any microphone

00:50:24,100 --> 00:50:29,420
okay they ask that everybody who's

00:50:27,710 --> 00:50:32,090
making question please use the

00:50:29,420 --> 00:50:36,590
microphone there's because I they are

00:50:32,090 --> 00:50:38,960
getting more relieved your patience is

00:50:36,590 --> 00:50:41,770
it possible to use when you use config

00:50:38,960 --> 00:50:45,800
split to use different splits together

00:50:41,770 --> 00:50:47,780
and only one of those splits for

00:50:45,800 --> 00:50:51,500
instance can you have a convex plate for

00:50:47,780 --> 00:50:53,960
your client config and co-pilot for your

00:50:51,500 --> 00:50:56,990
developments confess without importing

00:50:53,960 --> 00:50:59,870
them both yes so you can have different

00:50:56,990 --> 00:51:02,240
splits that they can be ordered so that

00:50:59,870 --> 00:51:04,580
they're split or they replied in a

00:51:02,240 --> 00:51:06,620
certain order and from the drash command

00:51:04,580 --> 00:51:09,080
you can also select which split to

00:51:06,620 --> 00:51:12,110
include when importing the configuration

00:51:09,080 --> 00:51:15,260
okay cool thank you so on the production

00:51:12,110 --> 00:51:21,410
you would only import the client split

00:51:15,260 --> 00:51:22,940
yes okay about features if I understand

00:51:21,410 --> 00:51:25,580
it correctly when you enable the feature

00:51:22,940 --> 00:51:27,170
it imports the configuration should you

00:51:25,580 --> 00:51:29,060
just disable the feature after that

00:51:27,170 --> 00:51:30,950
because all the configuration is saved

00:51:29,060 --> 00:51:38,600
to the database and you can export it as

00:51:30,950 --> 00:51:40,280
our bulk yeah it depends basically it

00:51:38,600 --> 00:51:43,220
depends on what your because often I

00:51:40,280 --> 00:51:46,160
mean features is a module so you can

00:51:43,220 --> 00:51:48,890
also provide a logic that comes with it

00:51:46,160 --> 00:51:51,290
so so often you don't only want to have

00:51:48,890 --> 00:51:54,140
it as a repository for for the default

00:51:51,290 --> 00:51:56,420
configuration but you also want it to do

00:51:54,140 --> 00:51:58,160
something with it and also since this

00:51:56,420 --> 00:51:59,660
module like the confirmation will depend

00:51:58,160 --> 00:52:01,820
from the module which is the feature not

00:51:59,660 --> 00:52:04,880
there is a features not okay so okay so

00:52:01,820 --> 00:52:07,490
tell us for Drupal 8 features is kind of

00:52:04,880 --> 00:52:10,160
just a packaging solutions for your

00:52:07,490 --> 00:52:16,580
module so it's helps you collect your

00:52:10,160 --> 00:52:18,710
configuration into the module regarding

00:52:16,580 --> 00:52:20,240
your takeaway when merging check that

00:52:18,710 --> 00:52:22,700
the configuration is still veloped by

00:52:20,240 --> 00:52:25,310
importing it that doesn't work always

00:52:22,700 --> 00:52:27,170
imagine two people working on two

00:52:25,310 --> 00:52:29,299
separate branches on

00:52:27,170 --> 00:52:31,400
formed this place for instance and

00:52:29,299 --> 00:52:33,920
adding a new entity reference field

00:52:31,400 --> 00:52:37,099
which almost looks the same but has a

00:52:33,920 --> 00:52:40,579
different bundle on a different name if

00:52:37,099 --> 00:52:43,339
you do emerge after importing the or

00:52:40,579 --> 00:52:47,780
after merging branch a and then merging

00:52:43,339 --> 00:52:50,510
bench p you will have emerged which will

00:52:47,780 --> 00:52:52,549
overwrite the first merch of branch a

00:52:50,510 --> 00:52:56,030
basically because the things that this

00:52:52,549 --> 00:52:59,030
is the same item it's working on has the

00:52:56,030 --> 00:53:01,010
same weight and also imports fine

00:52:59,030 --> 00:53:03,260
because it's not the broken

00:53:01,010 --> 00:53:05,000
configuration it just works but you are

00:53:03,260 --> 00:53:07,369
actually missing features yes exactly

00:53:05,000 --> 00:53:09,470
that's why we recommend that's why we

00:53:07,369 --> 00:53:13,069
say you always have to check it you have

00:53:09,470 --> 00:53:14,569
to you merge it and then you let Drupal

00:53:13,069 --> 00:53:17,030
decide whether whether it's good or not

00:53:14,569 --> 00:53:19,609
and of course if Drupal is successful in

00:53:17,030 --> 00:53:22,400
importing it you still have to make sure

00:53:19,609 --> 00:53:24,799
that is actually correct and for that we

00:53:22,400 --> 00:53:27,829
recommend of course automated tests and

00:53:24,799 --> 00:53:33,859
that check that the functionality wasted

00:53:27,829 --> 00:53:36,710
words is it possible we configure our

00:53:33,859 --> 00:53:39,650
rice to have permission server right

00:53:36,710 --> 00:53:43,190
like one money most users to see the

00:53:39,650 --> 00:53:46,250
devil information yes a configuration

00:53:43,190 --> 00:53:49,819
can be overwritten the override in that

00:53:46,250 --> 00:53:52,480
case the role and you can override it as

00:53:49,819 --> 00:53:54,859
well as a disguise the new permission

00:53:52,480 --> 00:53:56,630
you don't read the roll and you just

00:53:54,859 --> 00:53:59,270
change the permissions at four but you

00:53:56,630 --> 00:54:02,510
have to right there all I have to alcove

00:53:59,270 --> 00:54:05,359
arises yes the file is the role the one

00:54:02,510 --> 00:54:07,309
we seen in our example so you would have

00:54:05,359 --> 00:54:13,280
this first key they're all second key to

00:54:07,309 --> 00:54:14,809
the permission okay thank you hi I have

00:54:13,280 --> 00:54:17,930
a question related to writing

00:54:14,809 --> 00:54:20,809
integration tests like how do you manage

00:54:17,930 --> 00:54:22,760
the configuration when writing got

00:54:20,809 --> 00:54:26,390
Drupal web this case like creating the

00:54:22,760 --> 00:54:29,630
fields and and all the structures

00:54:26,390 --> 00:54:31,940
required to access to yes so for tests

00:54:29,630 --> 00:54:33,740
we use two different kind of tests they

00:54:31,940 --> 00:54:36,140
unit testing for the glasses and then be

00:54:33,740 --> 00:54:37,060
are actually for the sides so we perform

00:54:36,140 --> 00:54:39,550
behavioral tests

00:54:37,060 --> 00:54:42,460
okay and for that we rely on the fact

00:54:39,550 --> 00:54:43,590
that our our sites will install cleanly

00:54:42,460 --> 00:54:45,400
so there is a continuous integration

00:54:43,590 --> 00:54:47,200
environment that will install the sides

00:54:45,400 --> 00:54:50,080
and then we run the tests on top and so

00:54:47,200 --> 00:54:51,730
we use that one and that does not we

00:54:50,080 --> 00:54:53,020
don't carry basically about the database

00:54:51,730 --> 00:54:56,140
dump or the state of the database

00:54:53,020 --> 00:54:58,960
because we yeah we just we just use be

00:54:56,140 --> 00:55:01,900
hard place but actual llaman files with

00:54:58,960 --> 00:55:04,180
the fields and the base fields how do

00:55:01,900 --> 00:55:05,800
you that's all included in the

00:55:04,180 --> 00:55:07,720
configuration which is packaged in the

00:55:05,800 --> 00:55:09,460
site as well so we push the

00:55:07,720 --> 00:55:12,130
configuration together with all the site

00:55:09,460 --> 00:55:14,350
that had installed using configuration

00:55:12,130 --> 00:55:16,030
stroller using that configuration so we

00:55:14,350 --> 00:55:18,850
recreate basically a clean starting

00:55:16,030 --> 00:55:20,440
point including also content so we if we

00:55:18,850 --> 00:55:22,210
need content view also import default

00:55:20,440 --> 00:55:23,860
content like we have you seen so

00:55:22,210 --> 00:55:25,510
basically after the first install all

00:55:23,860 --> 00:55:27,250
the site is really in a clean state and

00:55:25,510 --> 00:55:29,980
on that state that we can assume

00:55:27,250 --> 00:55:32,590
basically we're on all our be hard test

00:55:29,980 --> 00:55:34,450
and the only the only test that tests

00:55:32,590 --> 00:55:36,100
the site is behavior of this will be

00:55:34,450 --> 00:55:37,510
hard we don't have any other matters for

00:55:36,100 --> 00:55:39,010
their own and then next to that we have

00:55:37,510 --> 00:55:40,930
unit testing for the classes and the

00:55:39,010 --> 00:55:42,700
object the services themselves but

00:55:40,930 --> 00:55:44,320
that's another thing that also runs some

00:55:42,700 --> 00:55:45,970
contingent aeration but it does not test

00:55:44,320 --> 00:55:47,280
the site behavior test the site code

00:55:45,970 --> 00:55:53,410
which is a different kind of domaine

00:55:47,280 --> 00:55:56,710
thank you I I have a few questions first

00:55:53,410 --> 00:56:00,310
of all configuration installer profile

00:55:56,710 --> 00:56:05,080
can you automate things so that you can

00:56:00,310 --> 00:56:07,600
import them on deployment on objectives

00:56:05,080 --> 00:56:10,300
on but things like that yes yes you can

00:56:07,600 --> 00:56:12,760
run it for with with rush site installed

00:56:10,300 --> 00:56:16,240
as a parameter so no problem you can

00:56:12,760 --> 00:56:19,800
automate it as much as it's great that's

00:56:16,240 --> 00:56:23,170
the important part is that you set the

00:56:19,800 --> 00:56:25,330
config directory in before you run the

00:56:23,170 --> 00:56:28,270
Installer in the settings that page yeah

00:56:25,330 --> 00:56:29,890
but the second one is related to

00:56:28,270 --> 00:56:31,510
features you said that it's a

00:56:29,890 --> 00:56:33,760
development module and you should need a

00:56:31,510 --> 00:56:35,530
loan production but then if you have a

00:56:33,760 --> 00:56:37,180
module that is already installed and you

00:56:35,530 --> 00:56:39,990
modify the configuration how do you

00:56:37,180 --> 00:56:42,160
import the changes into the production

00:56:39,990 --> 00:56:44,530
because you read features you have

00:56:42,160 --> 00:56:46,930
features revert but if you don't have it

00:56:44,530 --> 00:56:48,320
on production anymore then you cannot

00:56:46,930 --> 00:56:52,160
revert the configuration

00:56:48,320 --> 00:56:55,010
to the new changes so you shall do when

00:56:52,160 --> 00:56:56,600
we when you share the features or when

00:56:55,010 --> 00:56:58,250
when you enable the feature you do that

00:56:56,600 --> 00:56:59,840
on the development side and on the

00:56:58,250 --> 00:57:03,650
development side you revert the feature

00:56:59,840 --> 00:57:05,330
and and the revert becomes part of the

00:57:03,650 --> 00:57:08,840
site configuration that you then deploy

00:57:05,330 --> 00:57:12,710
yes but for example i had the use case

00:57:08,840 --> 00:57:14,390
when a module was implemented you had

00:57:12,710 --> 00:57:17,360
the configuration that was deployed or

00:57:14,390 --> 00:57:20,840
reddit production this was a feature and

00:57:17,360 --> 00:57:23,180
you locally you changed it and then you

00:57:20,840 --> 00:57:24,410
deploy the configuration to production

00:57:23,180 --> 00:57:27,340
but then you cannot revert that

00:57:24,410 --> 00:57:30,350
configuration you should do what import

00:57:27,340 --> 00:57:32,990
configuration import work a phase one is

00:57:30,350 --> 00:57:35,030
at that point you are on update or on

00:57:32,990 --> 00:57:38,300
drew past native the configuration

00:57:35,030 --> 00:57:40,880
management I mean the idea is not to use

00:57:38,300 --> 00:57:42,950
it as a deployment tool any longer the

00:57:40,880 --> 00:57:46,610
direction they ft so you actually cannot

00:57:42,950 --> 00:57:48,830
use features to all the yes that the

00:57:46,610 --> 00:57:51,830
config sink and the config update the

00:57:48,830 --> 00:57:53,690
detect this and whether whether you do

00:57:51,830 --> 00:57:56,210
that so it you have to be clear whether

00:57:53,690 --> 00:57:58,820
you're talking about the where the place

00:57:56,210 --> 00:58:01,580
where you've developed a feature or the

00:57:58,820 --> 00:58:03,980
site where you use the feature and the

00:58:01,580 --> 00:58:06,470
site where you use the feature you can

00:58:03,980 --> 00:58:09,410
have features enabled on on the

00:58:06,470 --> 00:58:11,480
development instance of that side and on

00:58:09,410 --> 00:58:14,000
the production instance you don't revert

00:58:11,480 --> 00:58:15,980
the feature because you deploy the

00:58:14,000 --> 00:58:18,500
configuration that you revert it on the

00:58:15,980 --> 00:58:21,260
development side okay and one last

00:58:18,500 --> 00:58:24,470
question if you have a configuration on

00:58:21,260 --> 00:58:27,050
the production that you want for the

00:58:24,470 --> 00:58:30,230
user to for the administrator to allow

00:58:27,050 --> 00:58:33,980
to change for example facebook URL that

00:58:30,230 --> 00:58:35,930
you want for him to set up but you when

00:58:33,980 --> 00:58:38,150
you import the configuration you don't

00:58:35,930 --> 00:58:41,690
want to be overridden by your import

00:58:38,150 --> 00:58:43,880
action also you don't want it to be

00:58:41,690 --> 00:58:45,890
putting repository because it's

00:58:43,880 --> 00:58:48,020
something that you want to be omitted so

00:58:45,890 --> 00:58:49,520
how do you treat this case so in that

00:58:48,020 --> 00:58:51,560
case you would use the configuration

00:58:49,520 --> 00:58:53,750
split and you split it to a directory

00:58:51,560 --> 00:58:57,260
that is outside of target repository

00:58:53,750 --> 00:59:00,090
okay and as a general question

00:58:57,260 --> 00:59:02,010
that's it seems features is more of a

00:59:00,090 --> 00:59:04,440
combination now between configurations

00:59:02,010 --> 00:59:07,170
bleep lat offers and configuration sync

00:59:04,440 --> 00:59:09,720
modules so which is the case that I you

00:59:07,170 --> 00:59:11,750
you are using not really they try to

00:59:09,720 --> 00:59:15,630
solve different use cases the

00:59:11,750 --> 00:59:18,270
configuration split is really a run

00:59:15,630 --> 00:59:21,410
import time override of configuration

00:59:18,270 --> 00:59:23,580
and and features is packaging

00:59:21,410 --> 00:59:25,830
configuration for reusing on other

00:59:23,580 --> 00:59:27,930
projects like it helps you packaging and

00:59:25,830 --> 00:59:29,250
it does it also providing automatic

00:59:27,930 --> 00:59:30,840
slices and stuff so it's really

00:59:29,250 --> 00:59:33,570
different your skills so it still makes

00:59:30,840 --> 00:59:42,150
sense use features fashion what okay

00:59:33,570 --> 00:59:44,450
thanks okay okay okay your time but okay

00:59:42,150 --> 00:59:44,450

YouTube URL: https://www.youtube.com/watch?v=57t_CS2wbHI


