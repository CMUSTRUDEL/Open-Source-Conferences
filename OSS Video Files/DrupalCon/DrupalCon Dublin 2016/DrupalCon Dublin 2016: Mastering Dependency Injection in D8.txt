Title: DrupalCon Dublin 2016: Mastering Dependency Injection in D8
Publication date: 2016-09-27
Playlist: DrupalCon Dublin 2016
Description: 
	The Symfony Dependency Injection component is a centerpiece of D8 core. But did you know you could use it in your own modules? This talk will teach you about dependency injection as a design pattern. It will tell you how it is used in D8, and how you can leverage it for your own needs for coding custom pages/features. We will talk about the container, all kind of service configurations you can do, factories, decorators, configurators, etc. The promise? Decoupling your code to make it maintainable and testable over time. Let's see how a good component and a few best practices make it happen.

https://speakerdeck.com/nicolasgrekas/mastering-dependency-injection-in-d8
Captions: 
	00:00:00,709 --> 00:00:07,639
so the room is full I think we should

00:00:03,689 --> 00:00:11,940
proceed doors are closing

00:00:07,639 --> 00:00:14,280
thank you for coming so I have two

00:00:11,940 --> 00:00:16,830
minutes to do some advertising no that

00:00:14,280 --> 00:00:19,920
won't last two minutes but I'm the CTO

00:00:16,830 --> 00:00:22,890
of Blackfyre which is a profiler a PHP

00:00:19,920 --> 00:00:23,939
profiler it is able to display and to

00:00:22,890 --> 00:00:25,740
show you what happens in your

00:00:23,939 --> 00:00:27,710
application in your scripts in terms of

00:00:25,740 --> 00:00:30,390
core graph so this is a short excerpt

00:00:27,710 --> 00:00:34,800
from a coal graph and I'm very happy

00:00:30,390 --> 00:00:37,680
today to announce the profiler edition

00:00:34,800 --> 00:00:39,840
which is a new way to you know add more

00:00:37,680 --> 00:00:42,930
features to Blackfyre so if you want to

00:00:39,840 --> 00:00:44,640
try it it's free and if you want to use

00:00:42,930 --> 00:00:48,780
it daily it's also free but if you want

00:00:44,640 --> 00:00:52,320
more features you can use this coupon a

00:00:48,780 --> 00:00:57,270
profiler launch to get discount and the

00:00:52,320 --> 00:00:59,280
profile of addition ok let's go so the

00:00:57,270 --> 00:01:04,589
topic of today is mastering dependency

00:00:59,280 --> 00:01:07,590
injection in Drupal 8 Nicko like the

00:01:04,589 --> 00:01:11,880
cars I'm French I work at Sun Phillips

00:01:07,590 --> 00:01:13,439
in Paris so I work for Blackfyre also

00:01:11,880 --> 00:01:16,200
which is business unit of since your

00:01:13,439 --> 00:01:18,960
absence Phillips is the company that is

00:01:16,200 --> 00:01:21,869
behind the symphony framework so symfony

00:01:18,960 --> 00:01:24,689
components also it has been funded by

00:01:21,869 --> 00:01:27,299
Fabian proton shake which you may you

00:01:24,689 --> 00:01:29,040
may have heard of because he leads the

00:01:27,299 --> 00:01:33,329
symphony and the open-source community

00:01:29,040 --> 00:01:34,829
there I have quite some time Fabian

00:01:33,329 --> 00:01:37,380
allows me to work in symphony and do

00:01:34,829 --> 00:01:40,259
hacking symphony so I'm quite active

00:01:37,380 --> 00:01:41,720
contributor now and that's it for the

00:01:40,259 --> 00:01:44,130
presentation

00:01:41,720 --> 00:01:45,810
don't hesitate to tweet and give

00:01:44,130 --> 00:01:48,360
feedback at the end of the conference

00:01:45,810 --> 00:01:50,159
during the conference it's very

00:01:48,360 --> 00:01:52,170
important for all speakers yeah

00:01:50,159 --> 00:01:56,540
and for the Drupal Association you know

00:01:52,170 --> 00:02:00,450
to keep the good speakers and write them

00:01:56,540 --> 00:02:02,930
so I have a lot of code in my slides so

00:02:00,450 --> 00:02:06,540
I hope you won't be too scared by them

00:02:02,930 --> 00:02:08,550
let's talk about design design pattern

00:02:06,540 --> 00:02:13,280
yes so the dependency injection design

00:02:08,550 --> 00:02:13,280
pattern that for words you know

00:02:14,200 --> 00:02:20,480
maybe overloaded and too complex for

00:02:17,270 --> 00:02:23,450
what they are really so let's say we

00:02:20,480 --> 00:02:26,810
have a user this is a really simple user

00:02:23,450 --> 00:02:29,660
class and our user has a language

00:02:26,810 --> 00:02:32,810
property so we are able to store in

00:02:29,660 --> 00:02:35,180
which language this user wants to see

00:02:32,810 --> 00:02:37,220
the pages so we have a method set

00:02:35,180 --> 00:02:42,770
language and of course it just set a

00:02:37,220 --> 00:02:45,110
very basic one so to use that user class

00:02:42,770 --> 00:02:47,540
we instantiate it with user again new

00:02:45,110 --> 00:02:50,420
user then set language and then we have

00:02:47,540 --> 00:02:53,540
an English user English speaking user or

00:02:50,420 --> 00:02:56,660
at least reading now let's say we'd like

00:02:53,540 --> 00:02:59,570
to store the language of this user in

00:02:56,660 --> 00:03:02,300
the session so let's create a session

00:02:59,570 --> 00:03:05,720
storage which is just a wrapper around

00:03:02,300 --> 00:03:08,780
PHP sessions so we have a constructor

00:03:05,720 --> 00:03:12,080
with a cookie name the cookie name is

00:03:08,780 --> 00:03:15,800
this is this is the default of PHP also

00:03:12,080 --> 00:03:18,380
so PHP says ID we use session name which

00:03:15,800 --> 00:03:21,049
is the PHP function to set the name of

00:03:18,380 --> 00:03:24,079
the cookie for storing session and we

00:03:21,049 --> 00:03:26,360
start the session there are our cookie

00:03:24,079 --> 00:03:29,269
storage has a setter which is okay set

00:03:26,360 --> 00:03:31,459
this key with this value for this key

00:03:29,269 --> 00:03:33,650
from the session and that's it okay so

00:03:31,459 --> 00:03:39,170
that's just a plain wrapper of wrapper

00:03:33,650 --> 00:03:41,630
let's use it in our user class to store

00:03:39,170 --> 00:03:47,269
across pages the preferred language of

00:03:41,630 --> 00:03:49,579
our user so this is a way to do it let's

00:03:47,269 --> 00:03:53,959
say our user needs the storage of course

00:03:49,579 --> 00:03:56,299
so let's have it as a property built in

00:03:53,959 --> 00:03:59,480
the constructor of our object so we now

00:03:56,299 --> 00:04:01,519
have a storage as a private property and

00:03:59,480 --> 00:04:05,329
when we set the language in fact we

00:04:01,519 --> 00:04:08,030
store the language value in the session

00:04:05,329 --> 00:04:12,950
in the language property why it's right

00:04:08,030 --> 00:04:15,530
for villages and to use it exactly the

00:04:12,950 --> 00:04:17,570
same code here we say new user set

00:04:15,530 --> 00:04:23,150
language English and now this will

00:04:17,570 --> 00:04:26,090
persist across pages okay now we have

00:04:23,150 --> 00:04:28,270
some issues with this code

00:04:26,090 --> 00:04:32,420
in terms of you know decoupling

00:04:28,270 --> 00:04:35,630
reusability how do I create a user that

00:04:32,420 --> 00:04:37,130
uses a different cookie name so as you

00:04:35,630 --> 00:04:39,110
remember the session storage has a

00:04:37,130 --> 00:04:42,710
parameter cookie name and the default

00:04:39,110 --> 00:04:45,350
value is PHP SSID and now this is hard

00:04:42,710 --> 00:04:49,700
coding to hard-coded into the user class

00:04:45,350 --> 00:04:52,880
a user must have with this code a cookie

00:04:49,700 --> 00:04:55,820
name which is called PHP SS ID which

00:04:52,880 --> 00:04:59,030
might be you know bad we don't want that

00:04:55,820 --> 00:05:01,550
kind of hard coding into classes another

00:04:59,030 --> 00:05:04,460
issue there is the session storage

00:05:01,550 --> 00:05:06,260
itself because you know this is a

00:05:04,460 --> 00:05:09,490
session and this is the actual PHP

00:05:06,260 --> 00:05:12,260
session but maybe in your unit test

00:05:09,490 --> 00:05:15,169
suite you'd like to not have the real

00:05:12,260 --> 00:05:18,169
station storage engine and gene but you

00:05:15,169 --> 00:05:20,150
may like to have another storage from a

00:05:18,169 --> 00:05:21,620
rest already local storage or maybe

00:05:20,150 --> 00:05:24,470
you'd like to have some you know

00:05:21,620 --> 00:05:26,510
memcached storage ready storage to store

00:05:24,470 --> 00:05:29,930
the session and not use PHP native

00:05:26,510 --> 00:05:33,470
system so now that's another issue we

00:05:29,930 --> 00:05:36,350
have here so how do we configure the

00:05:33,470 --> 00:05:41,180
storage when is hard-coded there we

00:05:36,350 --> 00:05:46,010
can't okay so for that there is a way to

00:05:41,180 --> 00:05:50,750
do that it's just to inject the storage

00:05:46,010 --> 00:05:52,580
as a constructor argument now I just

00:05:50,750 --> 00:05:55,100
have to configure the storage from the

00:05:52,580 --> 00:05:57,919
outside of the user class and I give it

00:05:55,100 --> 00:06:01,840
ready bootstrapped to the user class

00:05:57,919 --> 00:06:07,100
when you know instantiate it and that's

00:06:01,840 --> 00:06:09,260
the code that does exactly this okay so

00:06:07,100 --> 00:06:11,390
we create the storage but we could

00:06:09,260 --> 00:06:14,840
create you know ready storage and a rest

00:06:11,390 --> 00:06:17,150
or wedge we could pass the cookie name

00:06:14,840 --> 00:06:19,550
there and give it ready to the user

00:06:17,150 --> 00:06:23,690
class and then it's ready

00:06:19,550 --> 00:06:26,830
we have decoupled things and we're ready

00:06:23,690 --> 00:06:30,289
to handle many storage engine genes

00:06:26,830 --> 00:06:31,880
really that's the design pattern that's

00:06:30,289 --> 00:06:34,280
dependency injection dependency

00:06:31,880 --> 00:06:36,830
injection just means you know not

00:06:34,280 --> 00:06:39,560
insensate in hard coding things into

00:06:36,830 --> 00:06:42,020
classes but really giving them ready to

00:06:39,560 --> 00:06:44,240
classes your own classes and that's it

00:06:42,020 --> 00:06:49,010
now so we have the concept let's get

00:06:44,240 --> 00:06:52,580
deeper into that so back to our user

00:06:49,010 --> 00:06:56,030
class we have the storage here as you

00:06:52,580 --> 00:06:59,090
can see there is a type issue there

00:06:56,030 --> 00:07:01,930
there is nothing that guarantees you

00:06:59,090 --> 00:07:04,730
that storage is actually a station

00:07:01,930 --> 00:07:06,110
station storage which means it could be

00:07:04,730 --> 00:07:09,110
an array it could be a string could be

00:07:06,110 --> 00:07:12,680
anything so there's a way to enforce

00:07:09,110 --> 00:07:14,840
that which is just to type int using PHP

00:07:12,680 --> 00:07:18,169
type hints so let's say we created some

00:07:14,840 --> 00:07:21,260
session storage interface this could

00:07:18,169 --> 00:07:24,169
just define our set method and then in

00:07:21,260 --> 00:07:27,440
this case we are sure now that the

00:07:24,169 --> 00:07:29,660
storage will be and must be something

00:07:27,440 --> 00:07:34,580
that we can deal from the user class

00:07:29,660 --> 00:07:38,780
point of view deal with okay now we have

00:07:34,580 --> 00:07:41,500
other way to do dependency injection so

00:07:38,780 --> 00:07:44,390
I showed you constructor injection

00:07:41,500 --> 00:07:46,010
because we just injected the storage

00:07:44,390 --> 00:07:49,520
into the constructor but we can of

00:07:46,010 --> 00:07:52,220
course use setter injection so in this

00:07:49,520 --> 00:07:55,190
case why we added some set storage

00:07:52,220 --> 00:07:57,320
method on the class and now we just have

00:07:55,190 --> 00:08:00,710
to call you know the set storage method

00:07:57,320 --> 00:08:06,770
to configure the session storage for

00:08:00,710 --> 00:08:10,310
this user class the third and only last

00:08:06,770 --> 00:08:15,020
way to inject a dependency into some

00:08:10,310 --> 00:08:19,520
class is to use public property so no

00:08:15,020 --> 00:08:20,930
method just a public property I just

00:08:19,520 --> 00:08:23,120
wanted to show you that but you

00:08:20,930 --> 00:08:26,120
shouldn't do it because you don't have

00:08:23,120 --> 00:08:27,919
any type hints there you don't know you

00:08:26,120 --> 00:08:30,460
there's no extension point so there is

00:08:27,919 --> 00:08:35,150
nothing you can hook and it's not

00:08:30,460 --> 00:08:37,250
extendable and reusable so constructor

00:08:35,150 --> 00:08:39,890
injection is better than setter

00:08:37,250 --> 00:08:44,270
injection which is itself far better

00:08:39,890 --> 00:08:48,140
than property injection setter injection

00:08:44,270 --> 00:08:50,690
has an issue which is that it makes the

00:08:48,140 --> 00:08:52,730
object the user class mutable which

00:08:50,690 --> 00:08:53,340
means you can call set storage several

00:08:52,730 --> 00:08:56,910
times

00:08:53,340 --> 00:08:59,910
and you just changes you just change yes

00:08:56,910 --> 00:09:02,030
the storage which can be an issue with

00:08:59,910 --> 00:09:06,270
constructor injection who you are sure

00:09:02,030 --> 00:09:08,400
if you didn't do some crazy hacks you

00:09:06,270 --> 00:09:10,290
are sure that the storage will remain

00:09:08,400 --> 00:09:17,250
the same from the beginning to the end

00:09:10,290 --> 00:09:17,870
of the request cycle okay so it's rule

00:09:17,250 --> 00:09:20,340
of thumb

00:09:17,870 --> 00:09:24,120
dependency injection as a design pattern

00:09:20,340 --> 00:09:28,230
is like naval writing new in your code

00:09:24,120 --> 00:09:31,950
if you see new something then it means

00:09:28,230 --> 00:09:33,810
there is a possibility for maybe using

00:09:31,950 --> 00:09:35,480
the fancy injection instead of

00:09:33,810 --> 00:09:38,670
hard-coding

00:09:35,480 --> 00:09:41,370
this very class that you instantiate it

00:09:38,670 --> 00:09:45,990
like our new station storage at the

00:09:41,370 --> 00:09:47,670
beginning and dependency injection is

00:09:45,990 --> 00:09:51,690
for adding you know behavior and

00:09:47,670 --> 00:09:55,560
features to your objects so that's the

00:09:51,690 --> 00:09:58,710
you know Asterix at the bottom you also

00:09:55,560 --> 00:10:01,650
will deal with data object so for

00:09:58,710 --> 00:10:03,990
example a daytime PHP plane daytime

00:10:01,650 --> 00:10:07,260
object this is fine to do into your

00:10:03,990 --> 00:10:09,990
class you know dates or now equals new

00:10:07,260 --> 00:10:11,970
date time because datum is really a data

00:10:09,990 --> 00:10:14,760
object it just a proper for state and

00:10:11,970 --> 00:10:16,710
for date and you don't want to inject

00:10:14,760 --> 00:10:17,970
the date as a dependency because you

00:10:16,710 --> 00:10:21,090
don't care about that you just want to

00:10:17,970 --> 00:10:23,400
have some you know value holder object

00:10:21,090 --> 00:10:25,680
so you it's fine for data object to have

00:10:23,400 --> 00:10:28,640
new in your car but really for anything

00:10:25,680 --> 00:10:31,920
else you should think twice and say okay

00:10:28,640 --> 00:10:33,450
this is a new I'm just reading a new in

00:10:31,920 --> 00:10:36,330
my code maybe there's something wrong

00:10:33,450 --> 00:10:39,570
maybe I can decouple it and make it more

00:10:36,330 --> 00:10:42,300
testable more reusable easier to review

00:10:39,570 --> 00:10:44,820
you know let more focused also on its

00:10:42,300 --> 00:10:49,680
own and very responsibility things like

00:10:44,820 --> 00:10:51,540
that that's it so dependency injection

00:10:49,680 --> 00:10:55,290
allows you to make code reusable

00:10:51,540 --> 00:11:01,250
testable pluggable loss leader couple

00:10:55,290 --> 00:11:04,890
you know many words we like let's

00:11:01,250 --> 00:11:07,020
construct on the concept so this could

00:11:04,890 --> 00:11:10,620
be a dependency graph or this

00:11:07,020 --> 00:11:13,200
shows some alternatives that we can have

00:11:10,620 --> 00:11:14,850
when dealing with our user class so at

00:11:13,200 --> 00:11:17,790
the top we have the user class and the

00:11:14,850 --> 00:11:21,540
user class needs a session storage

00:11:17,790 --> 00:11:23,700
interface of any kind so that's the name

00:11:21,540 --> 00:11:27,750
of the interface in green and then let's

00:11:23,700 --> 00:11:29,850
say we could have a session storage so

00:11:27,750 --> 00:11:33,300
the first of the second class in the

00:11:29,850 --> 00:11:36,060
slides this session storage itself has a

00:11:33,300 --> 00:11:39,210
dependency which is not an object it's a

00:11:36,060 --> 00:11:42,110
string it's the name of the cookie we

00:11:39,210 --> 00:11:45,030
could have the array storage of course

00:11:42,110 --> 00:11:46,800
which is perfectly valid from the user

00:11:45,030 --> 00:11:49,320
point of view the user point of view

00:11:46,800 --> 00:11:52,190
really doesn't care about whether it's

00:11:49,320 --> 00:11:54,870
the session storage and a rest of it or

00:11:52,190 --> 00:11:57,120
maybe in this example already storage

00:11:54,870 --> 00:11:59,820
already sees the database in memory

00:11:57,120 --> 00:12:03,810
database that is really fast and really

00:11:59,820 --> 00:12:06,180
you know sweetie for storing session and

00:12:03,810 --> 00:12:08,880
other things but for session in this

00:12:06,180 --> 00:12:11,310
case so let's say we need we have some

00:12:08,880 --> 00:12:13,470
ready storage that implements the

00:12:11,310 --> 00:12:15,660
session storage interface and let's say

00:12:13,470 --> 00:12:18,060
maybe that this ready storage needs

00:12:15,660 --> 00:12:20,430
itself Redis connection which is

00:12:18,060 --> 00:12:22,800
something that you know PHP or some PHP

00:12:20,430 --> 00:12:26,160
extension can provide so that's another

00:12:22,800 --> 00:12:29,310
object and I'm sure the Redis connection

00:12:26,160 --> 00:12:32,220
object itself needs to be you know to

00:12:29,310 --> 00:12:34,020
get some Redis host which is the server

00:12:32,220 --> 00:12:37,350
was where Redis is listening so

00:12:34,020 --> 00:12:39,870
localhost or something else so as you

00:12:37,350 --> 00:12:42,120
can see with dependency injection we

00:12:39,870 --> 00:12:44,730
start to have dependency trees reverse

00:12:42,120 --> 00:12:47,010
dependency trees so I need a user okay

00:12:44,730 --> 00:12:48,930
to get a user who you first need to to

00:12:47,010 --> 00:12:50,520
get a storage oh it's a ready storage

00:12:48,930 --> 00:12:52,770
then you need to build a Redis

00:12:50,520 --> 00:12:54,930
connection and then okay first you just

00:12:52,770 --> 00:13:00,180
give me the Redis host and this is a

00:12:54,930 --> 00:13:02,400
chain and if you think and if you build

00:13:00,180 --> 00:13:05,550
your view framework and your application

00:13:02,400 --> 00:13:08,610
on this concept you will get a big tree

00:13:05,550 --> 00:13:11,300
of dependencies and if you need for

00:13:08,610 --> 00:13:14,550
example logger let's say you the logger

00:13:11,300 --> 00:13:15,930
service is an object that implements

00:13:14,550 --> 00:13:18,360
something that maybe the logger needs

00:13:15,930 --> 00:13:20,649
database if you'd like to log in the

00:13:18,360 --> 00:13:25,180
database and so on so all

00:13:20,649 --> 00:13:30,189
services have dependencies and for to to

00:13:25,180 --> 00:13:34,749
deal with that we need something some

00:13:30,189 --> 00:13:38,199
code that knows how to create a Redis

00:13:34,749 --> 00:13:42,360
connection read this storage session

00:13:38,199 --> 00:13:46,300
storage may be a user so we need recipes

00:13:42,360 --> 00:13:49,059
for you know new session storage I this

00:13:46,300 --> 00:13:52,480
is needed as first argument of the user

00:13:49,059 --> 00:13:59,019
class and so on so we need these recipes

00:13:52,480 --> 00:14:05,339
and we also need some you know registry

00:13:59,019 --> 00:14:08,889
of services because in some page in some

00:14:05,339 --> 00:14:11,860
application you want to have only one

00:14:08,889 --> 00:14:14,139
session this is the user session of the

00:14:11,860 --> 00:14:17,290
current request you need to have one

00:14:14,139 --> 00:14:22,089
logger so that all the feature or the

00:14:17,290 --> 00:14:24,579
code that need to log get this same very

00:14:22,089 --> 00:14:27,160
same instance of the logger you're going

00:14:24,579 --> 00:14:31,029
to use everywhere in your application so

00:14:27,160 --> 00:14:35,230
where should we you know index register

00:14:31,029 --> 00:14:38,579
this list of objects that are useful and

00:14:35,230 --> 00:14:41,259
provide features to your applications

00:14:38,579 --> 00:14:44,290
that's where we need the dependency

00:14:41,259 --> 00:14:49,029
injection container so now we are

00:14:44,290 --> 00:14:51,399
talking about an actual object until now

00:14:49,029 --> 00:14:53,410
hours I was speaking about you know

00:14:51,399 --> 00:14:55,120
dependency injection as a design pattern

00:14:53,410 --> 00:14:57,670
so it's a concept and it's a really

00:14:55,120 --> 00:15:00,399
simple one just injecting things instead

00:14:57,670 --> 00:15:02,350
of creating them inside the classes now

00:15:00,399 --> 00:15:06,120
I'm talking about an actual object

00:15:02,350 --> 00:15:09,999
something we can read as code and create

00:15:06,120 --> 00:15:12,249
with the new keyword so the dependency

00:15:09,999 --> 00:15:14,879
injection is an object that has all the

00:15:12,249 --> 00:15:20,350
recipes to create the actual object so

00:15:14,879 --> 00:15:23,049
and in fact that has all the object of

00:15:20,350 --> 00:15:26,049
your application recursively because you

00:15:23,049 --> 00:15:27,189
know we have these two in mind so that I

00:15:26,049 --> 00:15:29,439
need a session okay you need a

00:15:27,189 --> 00:15:32,079
connection okay you need a ready storage

00:15:29,439 --> 00:15:33,980
okay I don't know how to do them and I

00:15:32,079 --> 00:15:37,129
know how to wire them

00:15:33,980 --> 00:15:39,019
so that the logger is injecting it will

00:15:37,129 --> 00:15:42,139
mean to the register edge if we'd like

00:15:39,019 --> 00:15:44,209
to do that they container knows

00:15:42,139 --> 00:15:49,329
everything about that and you're going

00:15:44,209 --> 00:15:49,329
to tell and to teach its how to do that

00:15:51,399 --> 00:15:57,410
we call that I already use that with the

00:15:54,589 --> 00:16:00,619
services so the services are are really

00:15:57,410 --> 00:16:04,040
the useful object that the containers

00:16:00,619 --> 00:16:09,850
the container and knows about only that

00:16:04,040 --> 00:16:14,660
actual objects okay okay let's start

00:16:09,850 --> 00:16:18,679
this is a container the container has a

00:16:14,660 --> 00:16:20,689
get method and it takes a string as an

00:16:18,679 --> 00:16:23,239
argument which is the nickname of the

00:16:20,689 --> 00:16:24,350
object you'd like to get so let's say

00:16:23,239 --> 00:16:27,529
container

00:16:24,350 --> 00:16:31,249
give me the database and the container

00:16:27,529 --> 00:16:33,499
knows how to build this object because

00:16:31,249 --> 00:16:42,579
it has a recipe for this database string

00:16:33,499 --> 00:16:47,480
in its configuration Drupal ships with a

00:16:42,579 --> 00:16:51,589
few hundred services so a few hundred

00:16:47,480 --> 00:16:55,399
recipes and nicknames for features that

00:16:51,589 --> 00:16:57,980
are ready for you to be used into you

00:16:55,399 --> 00:17:00,980
know the container so this is a short

00:16:57,980 --> 00:17:04,549
excerpt and in the next slide I'm going

00:17:00,980 --> 00:17:08,360
to you know take them not one by one but

00:17:04,549 --> 00:17:10,970
at the general IDs focused on one type

00:17:08,360 --> 00:17:13,399
of definition and all the kind of

00:17:10,970 --> 00:17:19,519
definition you can use to create recipes

00:17:13,399 --> 00:17:23,089
and to give them a name okay so the

00:17:19,519 --> 00:17:29,899
simplest recipe is this one so this

00:17:23,089 --> 00:17:33,320
recipe says let's create a service which

00:17:29,899 --> 00:17:38,299
we call serialization dot JSON so it's

00:17:33,320 --> 00:17:41,360
just a string and this service is just

00:17:38,299 --> 00:17:42,080
an instance of the Drupal component

00:17:41,360 --> 00:17:46,279
serialization

00:17:42,080 --> 00:17:47,240
J'son class and that's it if I give you

00:17:46,279 --> 00:17:50,510
give you

00:17:47,240 --> 00:17:53,840
this recipe you can say you know and

00:17:50,510 --> 00:17:58,880
because you also you know that to create

00:17:53,840 --> 00:18:01,880
this service so for realization the JSON

00:17:58,880 --> 00:18:04,280
you just have to create an object with

00:18:01,880 --> 00:18:09,410
new Drupal components realization Jason

00:18:04,280 --> 00:18:13,490
so this is the kind of code that could

00:18:09,410 --> 00:18:17,660
be generated for the container to just

00:18:13,490 --> 00:18:20,360
return the serialization the JSON object

00:18:17,660 --> 00:18:24,920
so let's say we wrap it into some you

00:18:20,360 --> 00:18:27,260
know Gator and the code for creating

00:18:24,920 --> 00:18:29,059
this object is the last line new Drupal

00:18:27,260 --> 00:18:30,500
component realization JSON which is

00:18:29,059 --> 00:18:33,620
exactly the same string as in the

00:18:30,500 --> 00:18:36,860
definition and we put that into the

00:18:33,620 --> 00:18:39,380
these services array so this is the

00:18:36,860 --> 00:18:44,030
container and the container just you

00:18:39,380 --> 00:18:46,429
know stores this new object into the

00:18:44,030 --> 00:18:49,340
internal array so that whenever you call

00:18:46,429 --> 00:18:52,190
it gets on the public surface the

00:18:49,340 --> 00:18:54,470
container can just call this method when

00:18:52,190 --> 00:18:57,410
the service node is not ready get the

00:18:54,470 --> 00:19:01,340
object and reuse it the next time for

00:18:57,410 --> 00:19:06,140
you okay so let's make it a bit more

00:19:01,340 --> 00:19:08,140
complex slide after slides let's say we

00:19:06,140 --> 00:19:10,940
need now a service which we call state

00:19:08,140 --> 00:19:13,690
it's missing indentation there's missing

00:19:10,940 --> 00:19:17,150
invitation in the class and arguments

00:19:13,690 --> 00:19:19,940
parameter so class same thing that's the

00:19:17,150 --> 00:19:23,390
class of the state object state service

00:19:19,940 --> 00:19:27,020
in fact and in this case the constructor

00:19:23,390 --> 00:19:29,570
needs one argument and this argument so

00:19:27,020 --> 00:19:31,580
if we were to need several you know

00:19:29,570 --> 00:19:34,580
there are the brackets oakum a second

00:19:31,580 --> 00:19:36,740
argument coma third argument and then

00:19:34,580 --> 00:19:39,590
the first argument is a service is

00:19:36,740 --> 00:19:42,590
another service this is the at symbol

00:19:39,590 --> 00:19:45,170
that say that so this is saying to the

00:19:42,590 --> 00:19:47,480
container to build the state service

00:19:45,170 --> 00:19:52,960
just create a new Drupal core state

00:19:47,480 --> 00:19:58,370
state object with the key value service

00:19:52,960 --> 00:20:01,040
injected as first argument and of course

00:19:58,370 --> 00:20:03,950
it has to know how to build a key value

00:20:01,040 --> 00:20:06,830
service in another line of the same file

00:20:03,950 --> 00:20:09,560
so this is the kind of code that the

00:20:06,830 --> 00:20:11,590
container could generate so in this case

00:20:09,560 --> 00:20:15,430
we say new Drupal core state state

00:20:11,590 --> 00:20:17,960
argument this container gets key value

00:20:15,430 --> 00:20:20,840
okay and this is where you know things

00:20:17,960 --> 00:20:23,870
can be recursive and you can trigger

00:20:20,840 --> 00:20:31,940
several get when you need the state

00:20:23,870 --> 00:20:35,150
service in this case continue okay so we

00:20:31,940 --> 00:20:37,940
talked about setter injection on our

00:20:35,150 --> 00:20:40,700
user class so this is another example of

00:20:37,940 --> 00:20:42,860
setter injection so that's the

00:20:40,700 --> 00:20:44,480
definition for it let's say we have a

00:20:42,860 --> 00:20:49,160
service which is called URL generator

00:20:44,480 --> 00:20:51,470
dot non bubbling I took example from the

00:20:49,160 --> 00:20:54,290
actual coded service to travel file

00:20:51,470 --> 00:20:57,530
which exists in Drupal I'm not the

00:20:54,290 --> 00:21:01,010
latest version so yet it they look

00:20:57,530 --> 00:21:02,990
almost the same so our service is an

00:21:01,010 --> 00:21:06,350
instance of should be an instance of the

00:21:02,990 --> 00:21:12,770
Drupal core routing URL generator it

00:21:06,350 --> 00:21:14,800
takes some arguments public let's give

00:21:12,770 --> 00:21:18,950
me a minute to talk about that calls

00:21:14,800 --> 00:21:22,130
course is the list of you know method

00:21:18,950 --> 00:21:25,310
that should be called for building this

00:21:22,130 --> 00:21:27,500
object so this tells new the code

00:21:25,310 --> 00:21:30,710
generated should be new Drupal coroner

00:21:27,500 --> 00:21:34,220
then on the resulting instance set

00:21:30,710 --> 00:21:38,270
context with the first argument which is

00:21:34,220 --> 00:21:41,570
root root request context service if you

00:21:38,270 --> 00:21:44,930
commence there as you can see there is

00:21:41,570 --> 00:21:47,570
you know an interrogation mark after the

00:21:44,930 --> 00:21:50,360
add this tells of the container that

00:21:47,570 --> 00:21:53,240
whenever the service root root or dot

00:21:50,360 --> 00:21:56,600
request context doesn't exist then it

00:21:53,240 --> 00:21:58,370
should inject the new null value because

00:21:56,600 --> 00:22:00,950
it is possible that you know in some

00:21:58,370 --> 00:22:03,350
definition you use consume some service

00:22:00,950 --> 00:22:06,920
but this service is not defined because

00:22:03,350 --> 00:22:08,690
you know configuration has disabled some

00:22:06,920 --> 00:22:10,880
part some features of the application

00:22:08,690 --> 00:22:14,330
and disabling then means that the

00:22:10,880 --> 00:22:17,269
service this feature might define

00:22:14,330 --> 00:22:19,940
not there so this class should be able

00:22:17,269 --> 00:22:25,039
to deal with both route rule request

00:22:19,940 --> 00:22:26,360
context instance and the new value so

00:22:25,039 --> 00:22:30,080
about public now

00:22:26,360 --> 00:22:33,289
so public falls by default in Drupal 8

00:22:30,080 --> 00:22:37,190
and Symphony all services are public

00:22:33,289 --> 00:22:39,799
public means you can you can get them

00:22:37,190 --> 00:22:42,649
from the container so it's our container

00:22:39,799 --> 00:22:45,730
get database from the beginning database

00:22:42,649 --> 00:22:50,899
is there because it's a public service

00:22:45,730 --> 00:22:54,500
if we set a service as you know private

00:22:50,899 --> 00:22:56,330
it means that you can't fetch it from

00:22:54,500 --> 00:22:59,870
the outside of the container you can

00:22:56,330 --> 00:23:02,539
container get URL generator dot non

00:22:59,870 --> 00:23:05,630
bubbling you will get some error because

00:23:02,539 --> 00:23:08,510
it's poor internal thing how is it

00:23:05,630 --> 00:23:13,279
useful because you can use this string

00:23:08,510 --> 00:23:15,500
to inject to use it as an dependency to

00:23:13,279 --> 00:23:18,110
other services so when doing the

00:23:15,500 --> 00:23:19,460
definition you can create services that

00:23:18,110 --> 00:23:21,380
don't exist from the outside but are

00:23:19,460 --> 00:23:30,139
still injected into some other

00:23:21,380 --> 00:23:33,649
dependency for building them okay that's

00:23:30,139 --> 00:23:37,399
the kind of code and as you can see I

00:23:33,649 --> 00:23:40,010
didn't lie so the first thing is create

00:23:37,399 --> 00:23:44,419
our new Drupal URL generator with the

00:23:40,010 --> 00:23:46,309
arguments then if there is a root or to

00:23:44,419 --> 00:23:49,669
request contact service so it's a new

00:23:46,309 --> 00:23:53,269
method on the container then we called

00:23:49,669 --> 00:23:56,960
the set context method and we inject it

00:23:53,269 --> 00:23:59,240
the root of that request context service

00:23:56,960 --> 00:24:01,309
and there is a second argument on gets

00:23:59,240 --> 00:24:04,490
which is container interface null an

00:24:01,309 --> 00:24:08,470
invalid reference which is really been

00:24:04,490 --> 00:24:11,980
enough to you know you know what it does

00:24:08,470 --> 00:24:11,980
and that's it for that

00:24:15,740 --> 00:24:21,830
another way so this is using the factory

00:24:19,610 --> 00:24:28,610
design pattern who knows about the

00:24:21,830 --> 00:24:31,549
factory design pattern okay great so the

00:24:28,610 --> 00:24:35,450
factory design pattern is the pattern

00:24:31,549 --> 00:24:39,740
we're instantiating the object of some

00:24:35,450 --> 00:24:41,840
object is done by another function so

00:24:39,740 --> 00:24:44,630
I'm not a function another method so

00:24:41,840 --> 00:24:48,350
let's say you have a function which is

00:24:44,630 --> 00:24:51,559
called Factory then the job of this

00:24:48,350 --> 00:24:53,840
function is just to return an object it

00:24:51,559 --> 00:24:58,159
created any kind you need and each

00:24:53,840 --> 00:25:00,440
factory returns its own no kind of

00:24:58,159 --> 00:25:03,230
object so if we have a data database

00:25:00,440 --> 00:25:06,770
Factory in this case yes we have

00:25:03,230 --> 00:25:08,419
database factoring which is written in

00:25:06,770 --> 00:25:11,000
the database class so that the second

00:25:08,419 --> 00:25:15,080
line you have factory the first argument

00:25:11,000 --> 00:25:18,230
the first value in the array is the name

00:25:15,080 --> 00:25:21,289
of the class of the factory and yet

00:25:18,230 --> 00:25:25,190
connection is the name of the method we

00:25:21,289 --> 00:25:27,559
need to call to get in fact the database

00:25:25,190 --> 00:25:30,110
so the database should be a Drupal core

00:25:27,559 --> 00:25:33,110
database connection it takes one

00:25:30,110 --> 00:25:35,169
argument so default which is required by

00:25:33,110 --> 00:25:37,880
gate connection so this is Drupal

00:25:35,169 --> 00:25:40,100
configuration I don't know exactly why

00:25:37,880 --> 00:25:42,470
this argument is required but I'm sure

00:25:40,100 --> 00:25:44,179
it because okay I can tell you it's

00:25:42,470 --> 00:25:45,890
because you have the default connection

00:25:44,179 --> 00:25:47,960
but you also have the slave connection

00:25:45,890 --> 00:25:50,029
so you can do you know several

00:25:47,960 --> 00:25:51,440
connection one for writing the other one

00:25:50,029 --> 00:25:56,600
for reading from the other base things

00:25:51,440 --> 00:25:59,510
like that so this is the generating code

00:25:56,600 --> 00:26:03,200
a generated code is like this one I

00:25:59,510 --> 00:26:08,480
removed you know the boilerplate so to

00:26:03,200 --> 00:26:11,080
get database PHP will call the get

00:26:08,480 --> 00:26:14,510
connection method on the database class

00:26:11,080 --> 00:26:16,549
with a default argument that's it that's

00:26:14,510 --> 00:26:20,679
the database design pattern and the

00:26:16,549 --> 00:26:23,899
return value of this function call

00:26:20,679 --> 00:26:25,789
should be a database connection and we

00:26:23,899 --> 00:26:29,590
will register the container we keep its

00:26:25,789 --> 00:26:29,590
in its registry of services

00:26:33,650 --> 00:26:38,840
another example with factories so in

00:26:36,440 --> 00:26:43,520
this case we have the case dot dash dot

00:26:38,840 --> 00:26:46,460
default which is a class and the class

00:26:43,520 --> 00:26:50,060
is Drupal core cash cash cash back and

00:26:46,460 --> 00:26:51,980
interface so this is a more advanced you

00:26:50,060 --> 00:26:54,440
know definition for Factory because in

00:26:51,980 --> 00:26:57,620
fact you don't affect you it doesn't

00:26:54,440 --> 00:27:00,710
have to return exactly that kind of

00:26:57,620 --> 00:27:04,790
object I mean by that kind the name of a

00:27:00,710 --> 00:27:07,190
class so already storage or session

00:27:04,790 --> 00:27:08,810
storage or an arrest or edge to map with

00:27:07,190 --> 00:27:11,920
the previous slides

00:27:08,810 --> 00:27:14,990
it could just return any kind of

00:27:11,920 --> 00:27:17,150
instance of you know cash back in

00:27:14,990 --> 00:27:20,600
interface or any kind of class that

00:27:17,150 --> 00:27:22,340
implements this interface and that would

00:27:20,600 --> 00:27:24,770
be fine you have enough we have enough

00:27:22,340 --> 00:27:28,790
information to know what kind of object

00:27:24,770 --> 00:27:33,260
this returns so our Factory is now a

00:27:28,790 --> 00:27:36,920
service so to create the cash

00:27:33,260 --> 00:27:39,620
the default cash in fact we use another

00:27:36,920 --> 00:27:44,120
service which is called cash factory and

00:27:39,620 --> 00:27:47,090
we call its get method on and the

00:27:44,120 --> 00:27:51,200
argument of the get method get method

00:27:47,090 --> 00:27:54,460
method should be just default ok so that

00:27:51,200 --> 00:27:59,240
the kind of call this will generate so

00:27:54,460 --> 00:28:03,650
this get cash factory get default and

00:27:59,240 --> 00:28:06,320
this should return a cash back an

00:28:03,650 --> 00:28:06,890
interface object which we store into the

00:28:06,320 --> 00:28:13,210
cage

00:28:06,890 --> 00:28:13,210
cash to default service registry yeah

00:28:15,070 --> 00:28:22,040
now using your configurator so that's

00:28:18,710 --> 00:28:26,240
another way to configure objects it's

00:28:22,040 --> 00:28:28,240
quite rare in practice so I just added

00:28:26,240 --> 00:28:31,370
this slide for completeness a

00:28:28,240 --> 00:28:34,460
configurator is a design pattern where

00:28:31,370 --> 00:28:37,940
you give some method an instance of some

00:28:34,460 --> 00:28:40,850
object so the object is already there

00:28:37,940 --> 00:28:42,169
you already have it at hand and from the

00:28:40,850 --> 00:28:44,629
under contrary from you know

00:28:42,169 --> 00:28:47,809
factories in fact or is it returns the

00:28:44,629 --> 00:28:50,359
object but for configurators you already

00:28:47,809 --> 00:28:53,029
have the object and you tell some method

00:28:50,359 --> 00:28:58,129
okay now let please configure this

00:28:53,029 --> 00:29:00,889
method this object for me so we have the

00:28:58,129 --> 00:29:04,669
Geezer ghazal i HTTP handle handler

00:29:00,889 --> 00:29:10,340
stack so HTTP handler stack as a service

00:29:04,669 --> 00:29:13,549
name so this uses a factory so ghazal

00:29:10,340 --> 00:29:16,039
HTTP handles like create method and this

00:29:13,549 --> 00:29:20,200
will return our object our guzzle

00:29:16,039 --> 00:29:24,080
handler stack and on the return instance

00:29:20,200 --> 00:29:25,970
we should call configure from the you

00:29:24,080 --> 00:29:29,629
know heisted HTTP handler stack

00:29:25,970 --> 00:29:35,179
configurator service and the generated

00:29:29,629 --> 00:29:38,269
code should look like this one so we

00:29:35,179 --> 00:29:41,389
create our instance using code user func

00:29:38,269 --> 00:29:45,139
so calling the create method on the

00:29:41,389 --> 00:29:48,619
handle stack this returns the handler

00:29:45,139 --> 00:29:50,960
stack object and then we fetch the

00:29:48,619 --> 00:29:54,669
service HTTP handler stack configurator

00:29:50,960 --> 00:29:58,460
from the container and we configure it

00:29:54,669 --> 00:30:01,369
just by calling configure so this is

00:29:58,460 --> 00:30:05,269
using the mutability of the instance

00:30:01,369 --> 00:30:06,980
object so that's why also it's not you

00:30:05,269 --> 00:30:09,259
know recommended it's not best practice

00:30:06,980 --> 00:30:12,499
because this design pattern implies and

00:30:09,259 --> 00:30:14,690
that instance is mutable which means has

00:30:12,499 --> 00:30:17,899
setters which means you know can be

00:30:14,690 --> 00:30:21,799
altered at runtime which is something

00:30:17,899 --> 00:30:25,029
that shouldn't happen for services i

00:30:21,799 --> 00:30:25,029
talked about that

00:30:30,570 --> 00:30:37,320
I told you that the container returns

00:30:34,019 --> 00:30:39,899
always the same instance of the logger

00:30:37,320 --> 00:30:43,529
of the database object that it's created

00:30:39,899 --> 00:30:47,609
and in fact that not mandatory and the

00:30:43,529 --> 00:30:51,059
container is also able to return you a

00:30:47,609 --> 00:30:54,749
different instance each time you call it

00:30:51,059 --> 00:30:58,469
so if you were to set shared falls on

00:30:54,749 --> 00:31:00,179
the database object definition service

00:30:58,469 --> 00:31:02,849
definition then it would mean that

00:31:00,179 --> 00:31:05,099
calling container get database opens a

00:31:02,849 --> 00:31:08,099
new database connection every time which

00:31:05,099 --> 00:31:12,749
is not what you'd like for database but

00:31:08,099 --> 00:31:15,569
which is what you need for this feed

00:31:12,749 --> 00:31:19,079
reader Dubin country which is a service

00:31:15,569 --> 00:31:22,259
provided by Drupal so whenever you call

00:31:19,079 --> 00:31:25,469
container get feed wizard open core

00:31:22,259 --> 00:31:28,349
entry you get one object and if you call

00:31:25,469 --> 00:31:31,529
it a second time you will get another

00:31:28,349 --> 00:31:34,619
object of the same it built the same way

00:31:31,529 --> 00:31:40,219
but still a new instance of this object

00:31:34,619 --> 00:31:43,709
so we call this kind of services

00:31:40,219 --> 00:31:45,389
synthetic services so this is a

00:31:43,709 --> 00:31:47,909
synthetic service because it's not

00:31:45,389 --> 00:31:49,889
shared and shared services are not

00:31:47,909 --> 00:31:53,629
synthetic so shared and synthetic are

00:31:49,889 --> 00:31:55,339
the opposite words in the container

00:31:53,629 --> 00:31:58,709
vocabulary

00:31:55,339 --> 00:32:01,169
there are several you know feed reader

00:31:58,709 --> 00:32:04,229
and feed writer object and services

00:32:01,169 --> 00:32:06,149
defined into Drupal and they all are not

00:32:04,229 --> 00:32:10,739
shared because I guess there are just

00:32:06,149 --> 00:32:14,190
data objects and this is using the

00:32:10,739 --> 00:32:24,599
container as a factory for a feed reader

00:32:14,190 --> 00:32:28,279
and writer huntress okay so I'd showed

00:32:24,599 --> 00:32:31,259
you how you can write PHP code in Yammer

00:32:28,279 --> 00:32:32,819
basically that's it by using the

00:32:31,259 --> 00:32:36,479
definition it's just a new syntax

00:32:32,819 --> 00:32:39,629
another syntax declarative one to create

00:32:36,479 --> 00:32:44,280
PHP code and you have the ml on top and

00:32:39,629 --> 00:32:46,650
PHP at the bottom now it's possible

00:32:44,280 --> 00:32:49,640
to go one step further and play with the

00:32:46,650 --> 00:32:53,340
definitions themselves saying can now I

00:32:49,640 --> 00:32:56,520
deal with definition and I changed them

00:32:53,340 --> 00:32:59,640
in some way so the first and easiest way

00:32:56,520 --> 00:33:02,250
to play with definitions so a definition

00:32:59,640 --> 00:33:04,530
is we saw only definition Amal right now

00:33:02,250 --> 00:33:07,650
so this is another definition for the

00:33:04,530 --> 00:33:10,500
config dot storage service and the

00:33:07,650 --> 00:33:13,290
definition and the configuration for

00:33:10,500 --> 00:33:15,870
this service is very easy it says I am

00:33:13,290 --> 00:33:18,840
just an alias for the config dot

00:33:15,870 --> 00:33:20,910
tolerate that active service which means

00:33:18,840 --> 00:33:23,400
just copy past the definition that

00:33:20,910 --> 00:33:26,910
exists there and I'm using exactly the

00:33:23,400 --> 00:33:29,430
same definition so and in fact not only

00:33:26,910 --> 00:33:32,160
the same definition but also the same

00:33:29,430 --> 00:33:35,490
object so I'm the same I'm a new name

00:33:32,160 --> 00:33:38,160
for this name which means that the

00:33:35,490 --> 00:33:39,900
generated code is just this one so if

00:33:38,160 --> 00:33:42,690
you ask for the config dot storage

00:33:39,900 --> 00:33:47,820
service this call this code will be

00:33:42,690 --> 00:33:50,790
called ok that's an alias it's very

00:33:47,820 --> 00:33:53,490
useful you know because you can define

00:33:50,790 --> 00:33:55,410
several in this case several config

00:33:53,490 --> 00:33:57,390
storage so you say this is config

00:33:55,410 --> 00:34:00,060
storage dot active this is config

00:33:57,390 --> 00:34:02,820
tours dot whatever one two three four

00:34:00,060 --> 00:34:05,640
and in your code you can say okay I have

00:34:02,820 --> 00:34:08,880
several config storage ready for me but

00:34:05,640 --> 00:34:11,730
the one I want to use is this config

00:34:08,880 --> 00:34:14,669
storage so at the beginning in your

00:34:11,730 --> 00:34:17,669
service configuration you say configure

00:34:14,669 --> 00:34:19,950
storage my config storage as Aaliyah's

00:34:17,669 --> 00:34:23,580
and this is just a matter who weight

00:34:19,950 --> 00:34:26,370
selecting quickly which of the existing

00:34:23,580 --> 00:34:32,940
definition you are really using for this

00:34:26,370 --> 00:34:37,490
service so I didn't talk about

00:34:32,940 --> 00:34:40,770
parameters yet they are very useful and

00:34:37,490 --> 00:34:45,870
there are several of them parameters are

00:34:40,770 --> 00:34:49,890
playing you know data PHP data so

00:34:45,870 --> 00:34:52,740
usually a string parameter can be string

00:34:49,890 --> 00:34:57,340
can be an array can be any you know

00:34:52,740 --> 00:35:00,160
static value number scalar

00:34:57,340 --> 00:35:03,580
array of numbers of skull of string and

00:35:00,160 --> 00:35:06,190
recursively this kind of thing so you

00:35:03,580 --> 00:35:09,010
have another section in these service

00:35:06,190 --> 00:35:11,560
files which is parameters and then it

00:35:09,010 --> 00:35:13,600
just key value store so you store config

00:35:11,560 --> 00:35:14,680
storage and the value of this one is in

00:35:13,600 --> 00:35:18,570
this case fubar

00:35:14,680 --> 00:35:23,320
and then you can you can use parameters

00:35:18,570 --> 00:35:26,680
in string so the interpolation is using

00:35:23,320 --> 00:35:28,900
the percent symbol so as you can see we

00:35:26,680 --> 00:35:32,010
have person config underscore storage

00:35:28,900 --> 00:35:36,370
percent and this is just the placeholder

00:35:32,010 --> 00:35:40,840
for the value that is actually set for

00:35:36,370 --> 00:35:43,440
the config storage parameter that's a

00:35:40,840 --> 00:35:46,840
really useful way to know configure

00:35:43,440 --> 00:35:49,540
differently your production version and

00:35:46,840 --> 00:35:51,490
your development application let's say

00:35:49,540 --> 00:35:54,280
you have a parameter gamma five

00:35:51,490 --> 00:35:57,640
somewhere in your dev you might load

00:35:54,280 --> 00:35:59,890
some fubar a config storage and in your

00:35:57,640 --> 00:36:02,080
production you might define the

00:35:59,890 --> 00:36:06,730
parameter to something else which is you

00:36:02,080 --> 00:36:09,040
know your more heavy ready storage or

00:36:06,730 --> 00:36:11,110
something real for production use and

00:36:09,040 --> 00:36:13,480
not only some you know development

00:36:11,110 --> 00:36:17,010
environment thing and this should be

00:36:13,480 --> 00:36:20,010
resolved to in this case fubar very easy

00:36:17,010 --> 00:36:20,010
straightforward

00:36:24,190 --> 00:36:31,790
okay abstract services so an app short

00:36:28,700 --> 00:36:35,860
service is a service definition that you

00:36:31,790 --> 00:36:40,160
can't instantiate like an abstract class

00:36:35,860 --> 00:36:43,010
which you can't new abstract class you

00:36:40,160 --> 00:36:44,840
this is not possible for service is the

00:36:43,010 --> 00:36:47,090
same so in this case we have container

00:36:44,840 --> 00:36:50,600
dot tray which is also a drupal service

00:36:47,090 --> 00:36:56,410
this one is abstract you can't use it it

00:36:50,600 --> 00:37:00,710
won't work and what it defines is that

00:36:56,410 --> 00:37:05,120
the container tray service is should

00:37:00,710 --> 00:37:07,430
call set container with the service

00:37:05,120 --> 00:37:10,370
container as first parameter of set

00:37:07,430 --> 00:37:13,220
container and that's the you know rod

00:37:10,370 --> 00:37:17,630
excerpt of the full definition that the

00:37:13,220 --> 00:37:20,780
actual service will need let me show you

00:37:17,630 --> 00:37:23,500
this is not pH because this is Jamel

00:37:20,780 --> 00:37:26,870
again so this is to show you how this is

00:37:23,500 --> 00:37:29,450
used and this is also Drupal

00:37:26,870 --> 00:37:31,850
configuration so in Drupal there is a

00:37:29,450 --> 00:37:34,250
logo dot factory service and this is

00:37:31,850 --> 00:37:38,510
what your gonna host use to you know log

00:37:34,250 --> 00:37:45,230
things and this is an instance of the

00:37:38,510 --> 00:37:45,680
logger Channel factory and there is a

00:37:45,230 --> 00:37:49,400
setter

00:37:45,680 --> 00:37:52,960
to be cold on this one and it's the

00:37:49,400 --> 00:37:56,530
setter defined in the parent definition

00:37:52,960 --> 00:38:00,200
so parent is the keyword that say okay

00:37:56,530 --> 00:38:03,110
copy past what's in the parent into my

00:38:00,200 --> 00:38:04,700
own definition and that's it so it's

00:38:03,110 --> 00:38:06,560
exactly the same as doing you know

00:38:04,700 --> 00:38:08,810
removing the parent line and copy

00:38:06,560 --> 00:38:10,640
passing the course line and put it

00:38:08,810 --> 00:38:14,110
putting it in the logo dot factory

00:38:10,640 --> 00:38:16,850
service so it's an easy way to share

00:38:14,110 --> 00:38:19,690
configuration in the abstract level and

00:38:16,850 --> 00:38:23,410
to define several services that need

00:38:19,690 --> 00:38:26,270
that have a set container method and

00:38:23,410 --> 00:38:30,370
having this method take the service

00:38:26,270 --> 00:38:33,170
container a service as first argument so

00:38:30,370 --> 00:38:37,600
also the service container is the name

00:38:33,170 --> 00:38:40,560
of the you know service container is

00:38:37,600 --> 00:38:40,560
I have a question though

00:38:47,750 --> 00:38:53,330
I see here both trait and parents but

00:38:50,540 --> 00:38:56,420
could she use this as actual trade so

00:38:53,330 --> 00:38:59,500
could you in the local factory use

00:38:56,420 --> 00:39:02,990
multiple traits like you would in

00:38:59,500 --> 00:39:06,200
object-oriented code okay the answer is

00:39:02,990 --> 00:39:10,490
no and that's very unfortunate and I

00:39:06,200 --> 00:39:12,859
think that's some ID it's an unusual way

00:39:10,490 --> 00:39:14,960
to use you know parent and in service

00:39:12,859 --> 00:39:18,440
definition inheritance that's what I

00:39:14,960 --> 00:39:20,180
found in the definition and that my end

00:39:18,440 --> 00:39:24,130
up has something like you say you know

00:39:20,180 --> 00:39:27,160
having the way way to have threat to a

00:39:24,130 --> 00:39:30,020
definition that doesn't exist yet

00:39:27,160 --> 00:39:32,990
defined trait but you can only inherit

00:39:30,020 --> 00:39:34,670
exactly yeah yeah but there is no type

00:39:32,990 --> 00:39:42,760
in everything so this is really a try

00:39:34,670 --> 00:39:46,849
but a single trip okay

00:39:42,760 --> 00:39:49,960
that's maybe the last example yet maybe

00:39:46,849 --> 00:39:52,730
also the more most complex to understand

00:39:49,960 --> 00:39:55,820
let's say we have an app dot Manor

00:39:52,730 --> 00:39:59,270
service this one is virtual just for the

00:39:55,820 --> 00:40:01,520
talk so let's say that this app Melo

00:39:59,270 --> 00:40:05,780
service is should be an instance of a

00:40:01,520 --> 00:40:08,690
bundle male let's say now that I'd like

00:40:05,780 --> 00:40:13,359
to wrap this mailer with my own mailer

00:40:08,690 --> 00:40:15,980
another one so some decorating mailer so

00:40:13,359 --> 00:40:18,080
this is using you know the decoration

00:40:15,980 --> 00:40:19,490
design pattern and the decoration design

00:40:18,080 --> 00:40:21,710
pattern is a pattern where you have a

00:40:19,490 --> 00:40:26,440
class so let's say the decorated one the

00:40:21,710 --> 00:40:29,410
app mailer and you create a new class so

00:40:26,440 --> 00:40:32,060
decorating mailer which takes the

00:40:29,410 --> 00:40:35,000
decorated classes first argument to the

00:40:32,060 --> 00:40:37,520
constructor first over any argument to

00:40:35,000 --> 00:40:40,970
the constructor and then all the cool on

00:40:37,520 --> 00:40:43,430
the public interfaces and public method

00:40:40,970 --> 00:40:46,760
on the decorating mailer should be

00:40:43,430 --> 00:40:49,550
forwarded to the rapid instance that

00:40:46,760 --> 00:40:53,510
distort inside the object so this is

00:40:49,550 --> 00:40:55,310
really useful you know to catch calls to

00:40:53,510 --> 00:40:58,190
the method and do something before

00:40:55,310 --> 00:41:00,650
something after or something instead of

00:40:58,190 --> 00:41:04,789
when you don't call the

00:41:00,650 --> 00:41:08,539
a decorated object so you can do that by

00:41:04,789 --> 00:41:10,940
using a service declaration and this is

00:41:08,539 --> 00:41:14,569
not the way to do it because if you do

00:41:10,940 --> 00:41:18,980
that you will just replace the

00:41:14,569 --> 00:41:22,460
definition so by having the the order

00:41:18,980 --> 00:41:25,099
matters so the first line defines an

00:41:22,460 --> 00:41:29,569
adult male Oh service and the second

00:41:25,099 --> 00:41:32,359
line replaces this definition not about

00:41:29,569 --> 00:41:34,579
decoration just sign out this is a way

00:41:32,359 --> 00:41:36,349
to replace services in Drupal if you

00:41:34,579 --> 00:41:38,359
have an existing service and you'd like

00:41:36,349 --> 00:41:39,230
to change it and to have it behave

00:41:38,359 --> 00:41:42,319
differently

00:41:39,230 --> 00:41:44,329
just take it name take its name and

00:41:42,319 --> 00:41:47,150
create your own definition for this

00:41:44,329 --> 00:41:49,339
service maybe by decoration but maybe by

00:41:47,150 --> 00:41:52,430
replacing it completely and you will

00:41:49,339 --> 00:41:54,020
just replace the actual object that

00:41:52,430 --> 00:41:56,329
Drupal is using so that works for all

00:41:54,020 --> 00:41:59,240
objects and all services which means all

00:41:56,329 --> 00:42:04,369
features in report which means also it

00:41:59,240 --> 00:42:09,230
can be dangerous so be careful so okay

00:42:04,369 --> 00:42:12,470
the way to do decoration is using this

00:42:09,230 --> 00:42:14,599
kind of definition so this defines a new

00:42:12,470 --> 00:42:17,200
service which is AB dot decorating

00:42:14,599 --> 00:42:20,150
mailer does the name of the new service

00:42:17,200 --> 00:42:22,819
this is then the class our decorating

00:42:20,150 --> 00:42:27,559
mailer and the special key is decorates

00:42:22,819 --> 00:42:29,930
up mailer this one takes and this is

00:42:27,559 --> 00:42:32,480
something magic you can configure it but

00:42:29,930 --> 00:42:36,980
by default that the magic the magic is

00:42:32,480 --> 00:42:40,250
that this creates locally a service that

00:42:36,980 --> 00:42:45,319
is called up dot decorating Manor dot

00:42:40,250 --> 00:42:47,299
inner and this dot inner means this is

00:42:45,319 --> 00:42:49,970
referencing the previous one so the app

00:42:47,299 --> 00:42:52,760
mailer definition because it takes the

00:42:49,970 --> 00:42:56,000
decorates up mailer so this is the new

00:42:52,760 --> 00:43:02,990
name local name for the you know app

00:42:56,000 --> 00:43:05,270
mailer locally it's on a yes yes yes a

00:43:02,990 --> 00:43:06,589
local Aaliyah's yeah it's not true alias

00:43:05,270 --> 00:43:09,170
because you can't use it from the

00:43:06,589 --> 00:43:11,029
outside and it's the same for up the

00:43:09,170 --> 00:43:13,010
decorating mailer this is the name of

00:43:11,029 --> 00:43:13,999
the service but in your code the goal of

00:43:13,010 --> 00:43:16,219
this kind of

00:43:13,999 --> 00:43:18,889
placement is to use this definition as

00:43:16,219 --> 00:43:21,169
an app dot mailer service as the abdomen

00:43:18,889 --> 00:43:23,989
or service so what this does internally

00:43:21,169 --> 00:43:28,549
is also replace the actual definition of

00:43:23,989 --> 00:43:30,199
the app dot mailer object by the this

00:43:28,549 --> 00:43:32,499
app decorating manner definition which

00:43:30,199 --> 00:43:35,959
means this ab dot decorating mailer

00:43:32,499 --> 00:43:38,329
definition should be private usually i

00:43:35,959 --> 00:43:41,719
didn't add it on the slide but if I were

00:43:38,329 --> 00:43:44,509
to add public force it would be perfect

00:43:41,719 --> 00:43:47,509
because the decorating service would be

00:43:44,509 --> 00:43:49,429
just hidden from the outside and you

00:43:47,509 --> 00:43:51,049
would just have to use a bloat manner

00:43:49,429 --> 00:43:52,909
which is really what only what you need

00:43:51,049 --> 00:43:55,819
you don't need to care about how it has

00:43:52,909 --> 00:43:58,909
been you know decorated them this is not

00:43:55,819 --> 00:44:02,479
important from the outside so the

00:43:58,909 --> 00:44:06,529
generated code is very easy and this is

00:44:02,479 --> 00:44:10,039
it is just creating our ab dot mailer

00:44:06,529 --> 00:44:13,189
service has a new a bundle decorating

00:44:10,039 --> 00:44:19,459
mailer which takes our new app bundle

00:44:13,189 --> 00:44:22,399
mailer as first argument okay we could

00:44:19,459 --> 00:44:25,729
have it in being be injected through

00:44:22,399 --> 00:44:29,419
setters of course using calls then some

00:44:25,729 --> 00:44:36,529
setter at up decorating mailer inner and

00:44:29,419 --> 00:44:40,159
so on Drupal doesn't use that at all I

00:44:36,529 --> 00:44:42,469
think yet it's quite new so I don't

00:44:40,159 --> 00:44:45,829
think that when Drupal adopted Symphony

00:44:42,469 --> 00:44:47,659
it existed so that's the reason why you

00:44:45,829 --> 00:44:53,089
can do it and I'm sure Drupal will do it

00:44:47,659 --> 00:44:55,339
internally in some future version so

00:44:53,089 --> 00:44:56,719
that wasn't the last slide that's not

00:44:55,339 --> 00:45:00,889
the last slide that may be the last

00:44:56,719 --> 00:45:07,549
slide with code so now let's talk about

00:45:00,889 --> 00:45:11,959
tags in this case we this is the way to

00:45:07,549 --> 00:45:14,839
hook into you know the even system in

00:45:11,959 --> 00:45:17,869
rupal in Drupal 8 and also in symphony

00:45:14,839 --> 00:45:20,959
so in symphony and in drupal we have

00:45:17,869 --> 00:45:23,539
this event dispatcher service which is

00:45:20,959 --> 00:45:26,760
really an instance of container aware

00:45:23,539 --> 00:45:29,670
event dispatcher and

00:45:26,760 --> 00:45:32,670
this one this service is the one

00:45:29,670 --> 00:45:35,460
responsible for dispatching Evans any

00:45:32,670 --> 00:45:38,970
Evans any event that happened during the

00:45:35,460 --> 00:45:42,450
you know request/response lifecycle is a

00:45:38,970 --> 00:45:46,440
handled by Evans and any event trigger

00:45:42,450 --> 00:45:51,180
listeners and you need a way to register

00:45:46,440 --> 00:45:54,600
your own listeners on any event so this

00:45:51,180 --> 00:45:57,360
is the way the response listener is hook

00:45:54,600 --> 00:46:01,880
hooked into the event dispatcher and the

00:45:57,360 --> 00:46:04,800
way is to you is by using this tag tags

00:46:01,880 --> 00:46:07,770
setting so we have the class as usually

00:46:04,800 --> 00:46:09,750
as usual and we have tags and we have a

00:46:07,770 --> 00:46:14,010
special tag which is event dispatcher

00:46:09,750 --> 00:46:16,890
and this is by convention the name you

00:46:14,010 --> 00:46:21,150
have the tag you have to add to any

00:46:16,890 --> 00:46:24,570
service you need to be injected in the

00:46:21,150 --> 00:46:28,410
event dispatcher service how does that

00:46:24,570 --> 00:46:31,050
work it works by using what we call a

00:46:28,410 --> 00:46:34,440
compiler pass so a compile pass is

00:46:31,050 --> 00:46:36,060
something that is given to the container

00:46:34,440 --> 00:46:37,320
builder which is you know some

00:46:36,060 --> 00:46:40,470
bootstrapping thing at the very

00:46:37,320 --> 00:46:43,080
beginning when the container is created

00:46:40,470 --> 00:46:46,530
itself so when the container is created

00:46:43,080 --> 00:46:51,360
we give it a few compiler passes and

00:46:46,530 --> 00:46:54,150
each compiler pass handle its own you

00:46:51,360 --> 00:46:56,700
know tags for example you could do other

00:46:54,150 --> 00:46:59,280
things but there is one compiler pass

00:46:56,700 --> 00:47:04,680
that looks for all existing services

00:46:59,280 --> 00:47:08,670
that have this event subscriber tag get

00:47:04,680 --> 00:47:11,820
them and inject them into the event

00:47:08,670 --> 00:47:14,280
dispatcher service by name so if it

00:47:11,820 --> 00:47:16,200
won't inject them into another service

00:47:14,280 --> 00:47:19,200
only into this event dispatcher service

00:47:16,200 --> 00:47:21,180
its hard-coded into the actual instance

00:47:19,200 --> 00:47:25,440
of the compiler past that is you know

00:47:21,180 --> 00:47:27,510
wired at the beginning of Drupal so the

00:47:25,440 --> 00:47:29,340
generated code could look like that for

00:47:27,510 --> 00:47:33,480
the event dispatcher service so the

00:47:29,340 --> 00:47:35,760
first one it says okay let's create a

00:47:33,480 --> 00:47:37,680
new container aware event dispatcher I

00:47:35,760 --> 00:47:40,510
didn't add the arguments but this one

00:47:37,680 --> 00:47:42,430
needs the container it's a

00:47:40,510 --> 00:47:44,410
so this is the first argument this

00:47:42,430 --> 00:47:46,290
that's why it's called container aware

00:47:44,410 --> 00:47:50,650
because it needs the container to work

00:47:46,290 --> 00:47:54,460
so we create this instance and then by

00:47:50,650 --> 00:47:57,400
the compiler pass the add subscriber

00:47:54,460 --> 00:48:00,160
service method is called several time as

00:47:57,400 --> 00:48:03,630
many times as there are services that

00:48:00,160 --> 00:48:06,100
have the event subscriber tag attached

00:48:03,630 --> 00:48:09,640
so the first one is our response

00:48:06,100 --> 00:48:14,260
listener in symphony I looked at that

00:48:09,640 --> 00:48:18,010
yesterday there are 26 different tags so

00:48:14,260 --> 00:48:23,830
even subscriber cache context I don't

00:48:18,010 --> 00:48:25,480
know them by Hertz oh okay and that's

00:48:23,830 --> 00:48:32,770
the way to hook into spinner services

00:48:25,480 --> 00:48:35,560
inject your own okay then we have all

00:48:32,770 --> 00:48:38,350
these definitions so definitions are

00:48:35,560 --> 00:48:41,080
stored in each module each model comes

00:48:38,350 --> 00:48:43,210
can't come with its own you know my

00:48:41,080 --> 00:48:45,910
module dot service is the channel file

00:48:43,210 --> 00:48:47,020
which defines exactly these kind of

00:48:45,910 --> 00:48:50,530
things

00:48:47,020 --> 00:48:53,230
then the built bootstrapping process of

00:48:50,530 --> 00:48:55,870
Drupal and same for Symphony create this

00:48:53,230 --> 00:48:57,790
container builder so everything is

00:48:55,870 --> 00:49:00,370
verified so that there's no mistake

00:48:57,790 --> 00:49:02,530
there built compiled compiled means

00:49:00,370 --> 00:49:04,990
generating code or generating it's not

00:49:02,530 --> 00:49:07,690
code in Drupal it's some object that is

00:49:04,990 --> 00:49:10,120
realized into the database yet it's some

00:49:07,690 --> 00:49:12,730
kind of thing optimized which means you

00:49:10,120 --> 00:49:15,910
know removing private services that were

00:49:12,730 --> 00:49:19,450
not used for example or inlining private

00:49:15,910 --> 00:49:21,400
services that think they can't be

00:49:19,450 --> 00:49:24,250
fetched from the outside we can just you

00:49:21,400 --> 00:49:27,790
know inline them and have them right

00:49:24,250 --> 00:49:30,960
into the generated code dumped so

00:49:27,790 --> 00:49:35,020
writing in the database as PHP file

00:49:30,960 --> 00:49:39,040
cached of course because this is read

00:49:35,020 --> 00:49:42,880
once and used many times I mean the

00:49:39,040 --> 00:49:45,610
definition and all of that so tags it

00:49:42,880 --> 00:49:47,680
also verifies circular references

00:49:45,610 --> 00:49:49,750
because if you have a service foo that

00:49:47,680 --> 00:49:52,300
needs the service bar and if the service

00:49:49,750 --> 00:49:54,250
bar needs itself a service foo it can't

00:49:52,300 --> 00:49:56,310
work but still you can define this kind

00:49:54,250 --> 00:49:56,310
of

00:49:56,589 --> 00:50:02,349
after Ike removed parameters resolved

00:49:59,510 --> 00:50:05,380
that's the job of the container builder

00:50:02,349 --> 00:50:08,500
very early at the very beginning of the

00:50:05,380 --> 00:50:11,420
you know dependency injection container

00:50:08,500 --> 00:50:16,310
equation okay

00:50:11,420 --> 00:50:18,859
it's repel cone let's brew some beer so

00:50:16,310 --> 00:50:22,280
here we are business logic we have a

00:50:18,859 --> 00:50:26,390
brewery class this class has a list of

00:50:22,280 --> 00:50:30,530
you know Irish beers and you can give it

00:50:26,390 --> 00:50:32,750
a number using the brew method and it

00:50:30,530 --> 00:50:35,900
will just brew that number of beers any

00:50:32,750 --> 00:50:38,240
beer random beers okay so the brew

00:50:35,900 --> 00:50:42,380
method returns an array of you know

00:50:38,240 --> 00:50:44,900
number of you can define this class as a

00:50:42,380 --> 00:50:48,319
service so let's say let's create our

00:50:44,900 --> 00:50:50,750
average be beer brewery it's just an

00:50:48,319 --> 00:50:55,490
instance of Irish beer brewery so the

00:50:50,750 --> 00:50:57,349
same class we just saw and in Drupal we

00:50:55,490 --> 00:51:01,069
can create this kind of controllers so

00:50:57,349 --> 00:51:04,220
this is in Symphony Hall so this is our

00:51:01,069 --> 00:51:08,569
Irish beer controller which so the

00:51:04,220 --> 00:51:11,420
target is to draw page in Drupal that

00:51:08,569 --> 00:51:15,260
just display that number of you know

00:51:11,420 --> 00:51:17,119
beers brewed beers so we have a

00:51:15,260 --> 00:51:19,460
constructor that construct take the

00:51:17,119 --> 00:51:24,710
constructor text by dependency injection

00:51:19,460 --> 00:51:28,280
a brewery and then we have some action

00:51:24,710 --> 00:51:31,849
the drink beer action and it takes

00:51:28,280 --> 00:51:36,290
number then it calls the brewery to get

00:51:31,849 --> 00:51:38,599
the beers and we this is a Drupal we you

00:51:36,290 --> 00:51:41,270
know return type mark up and mark up

00:51:38,599 --> 00:51:45,560
just drink that many beers and that kind

00:51:41,270 --> 00:51:48,710
of beers and there's one thing missing

00:51:45,560 --> 00:51:51,109
in this there are several but one is you

00:51:48,710 --> 00:51:53,329
know the route so the control needs two

00:51:51,109 --> 00:51:55,670
routes so this is not to talk about rod

00:51:53,329 --> 00:51:58,970
so I won't talk much about that yet you

00:51:55,670 --> 00:52:01,640
need routing to map some URL to this

00:51:58,970 --> 00:52:03,980
controller and you also need a way to

00:52:01,640 --> 00:52:06,740
tell to Drupal that this controller

00:52:03,980 --> 00:52:07,650
needs the brewery because we know that

00:52:06,740 --> 00:52:09,750
because we wrote the

00:52:07,650 --> 00:52:12,660
we have it on screen but rupal you know

00:52:09,750 --> 00:52:14,850
at one time it has to discover that to

00:52:12,660 --> 00:52:17,760
create this controller and to call them

00:52:14,850 --> 00:52:19,620
the drink beer method there it needs to

00:52:17,760 --> 00:52:22,530
create a brewery how do I create a

00:52:19,620 --> 00:52:24,930
brewery the answer is by implementing

00:52:22,530 --> 00:52:27,270
the container injection interface or

00:52:24,930 --> 00:52:29,940
extending the controller base which is a

00:52:27,270 --> 00:52:31,710
base controller and Drupal which

00:52:29,940 --> 00:52:35,670
provides the interface but which

00:52:31,710 --> 00:52:37,500
provides also many you know helpers it's

00:52:35,670 --> 00:52:40,650
not mandatory at all so in this case I'm

00:52:37,500 --> 00:52:43,830
not using it and at least the container

00:52:40,650 --> 00:52:46,380
injection interface defines this public

00:52:43,830 --> 00:52:48,150
static function create which is a

00:52:46,380 --> 00:52:50,430
factory so this is again the factory

00:52:48,150 --> 00:52:55,380
design pattern used for creating a

00:52:50,430 --> 00:52:58,740
controller the job of this method is to

00:52:55,380 --> 00:53:02,820
return an instance of the current class

00:52:58,740 --> 00:53:04,170
so new self return new self and then we

00:53:02,820 --> 00:53:06,450
have the container at hand there and

00:53:04,170 --> 00:53:09,810
that's the way to get the container from

00:53:06,450 --> 00:53:13,260
a controller then we have the container

00:53:09,810 --> 00:53:15,960
we call the get method to get our Irish

00:53:13,260 --> 00:53:18,570
beer brewery and by the definition we

00:53:15,960 --> 00:53:22,050
just have before just had before the

00:53:18,570 --> 00:53:26,940
container knows how to get it it's

00:53:22,050 --> 00:53:29,960
injected and it works just to finish

00:53:26,940 --> 00:53:29,960
some pro tips

00:53:30,830 --> 00:53:35,330
injecting the dick the dependency

00:53:33,030 --> 00:53:39,360
injection container itself is an

00:53:35,330 --> 00:53:41,700
anti-pattern you should not inject the

00:53:39,360 --> 00:53:45,690
container so the service underscore

00:53:41,700 --> 00:53:47,790
container into your objects they should

00:53:45,690 --> 00:53:50,580
get the lager directly the brewery

00:53:47,790 --> 00:53:52,740
directly another container the

00:53:50,580 --> 00:53:55,620
controller and controllers in general

00:53:52,740 --> 00:53:57,390
are some kind of you know exception

00:53:55,620 --> 00:53:59,880
because at some point you need to wire

00:53:57,390 --> 00:54:02,970
things and controller is the way where

00:53:59,880 --> 00:54:05,310
you know it's okay to have a container

00:54:02,970 --> 00:54:07,200
but really you shouldn't pass from the

00:54:05,310 --> 00:54:09,840
con from the controller you shouldn't

00:54:07,200 --> 00:54:12,420
pass the container to your you know

00:54:09,840 --> 00:54:13,860
model objects model classes

00:54:12,420 --> 00:54:16,260
this would be an anti-pattern why

00:54:13,860 --> 00:54:19,020
because it would make you code reliance

00:54:16,260 --> 00:54:21,000
on this god object that knows everything

00:54:19,020 --> 00:54:23,400
about youth features just

00:54:21,000 --> 00:54:29,330
the feature that the very feet area that

00:54:23,400 --> 00:54:32,580
your model object need and so on avoid

00:54:29,330 --> 00:54:35,010
circular dependency dependencies

00:54:32,580 --> 00:54:37,170
when possible so it's possible to have

00:54:35,010 --> 00:54:41,100
full knitting bar and bar knitting foo

00:54:37,170 --> 00:54:43,800
and this is this can exist if you have I

00:54:41,100 --> 00:54:46,380
don't know some logger you have a logo

00:54:43,800 --> 00:54:48,210
for matter and the logo formatter needs

00:54:46,380 --> 00:54:52,740
to get some state from the logo itself

00:54:48,210 --> 00:54:54,690
so this needs a special way and special

00:54:52,740 --> 00:54:56,790
kind of definition in fact this needs

00:54:54,690 --> 00:54:58,590
setter injection because at some point

00:54:56,790 --> 00:55:00,840
you need if you have constructor

00:54:58,590 --> 00:55:03,330
injection you can create them at the

00:55:00,840 --> 00:55:06,060
same time so you can create first the

00:55:03,330 --> 00:55:09,420
logger then you can create for example

00:55:06,060 --> 00:55:10,820
the formatter inject the formatter into

00:55:09,420 --> 00:55:13,080
the container

00:55:10,820 --> 00:55:14,940
create a format of sorry with the logger

00:55:13,080 --> 00:55:18,210
injected as constructor and once you

00:55:14,940 --> 00:55:25,140
have the formatter added with for

00:55:18,210 --> 00:55:28,500
example the ad format or method I didn't

00:55:25,140 --> 00:55:30,870
talk about lazy services so there is a

00:55:28,500 --> 00:55:33,360
keyword which is lazy as we were we had

00:55:30,870 --> 00:55:36,690
you know public false shared false we

00:55:33,360 --> 00:55:40,980
also have lazy and lazy is a keyword

00:55:36,690 --> 00:55:44,400
that tells the container to generate a

00:55:40,980 --> 00:55:46,500
proxy class so this needs a special you

00:55:44,400 --> 00:55:48,570
know composer package it's not in Drupal

00:55:46,500 --> 00:55:51,840
by default so that's why I didn't you

00:55:48,570 --> 00:55:53,880
know experiment much on that yet it it's

00:55:51,840 --> 00:55:57,060
a code generator that generates code

00:55:53,880 --> 00:55:59,970
that just has exactly the same signature

00:55:57,060 --> 00:56:03,660
than the actual class you're going to

00:55:59,970 --> 00:56:07,620
decorate and it doesn't instance yet

00:56:03,660 --> 00:56:09,960
really the object what it does is that

00:56:07,620 --> 00:56:13,290
when any method on this object is called

00:56:09,960 --> 00:56:15,720
then at this time it will for example

00:56:13,290 --> 00:56:17,940
create the database connection so that's

00:56:15,720 --> 00:56:20,070
the way to you know have lazy connection

00:56:17,940 --> 00:56:22,080
lazy connection database connection so

00:56:20,070 --> 00:56:25,130
without having this logic into the

00:56:22,080 --> 00:56:25,130
database handling

00:56:28,190 --> 00:56:34,339
services should be stateless which means

00:56:31,190 --> 00:56:37,280
reusable stateless means you should

00:56:34,339 --> 00:56:42,190
never call a setter on any service

00:56:37,280 --> 00:56:43,490
object because if you call some set

00:56:42,190 --> 00:56:46,040
methadone aids

00:56:43,490 --> 00:56:49,040
except a bootstrapping step but later on

00:56:46,040 --> 00:56:51,260
if you call set it means that the second

00:56:49,040 --> 00:56:54,589
call on this matter the second use of

00:56:51,260 --> 00:56:57,380
this service will have the set inside so

00:56:54,589 --> 00:57:00,260
that won't be the same service and it

00:56:57,380 --> 00:57:03,710
means you would be reliant on the order

00:57:00,260 --> 00:57:06,829
calling order if one first call settle

00:57:03,710 --> 00:57:09,050
then the state has changed and if you do

00:57:06,829 --> 00:57:13,310
the others of these things the other way

00:57:09,050 --> 00:57:19,490
around so set after then you can just

00:57:13,310 --> 00:57:22,250
mess up everything and last the

00:57:19,490 --> 00:57:27,740
dependency injection is just a tool not

00:57:22,250 --> 00:57:31,400
the tool it's not the god objects don't

00:57:27,740 --> 00:57:35,089
create your application with the

00:57:31,400 --> 00:57:37,400
container as a dependency just using to

00:57:35,089 --> 00:57:42,530
wire things and to you know have recipes

00:57:37,400 --> 00:57:44,650
stored in one place and that's it thank

00:57:42,530 --> 00:57:44,650
you

00:57:51,040 --> 00:57:59,410
you have any question about four minutes

00:58:12,220 --> 00:58:19,090
yeah I asked you said that it's a way of

00:58:16,650 --> 00:58:22,599
essentially removing the new keyword

00:58:19,090 --> 00:58:24,670
from everything what's it's a particular

00:58:22,599 --> 00:58:27,730
pattern for implementing repositories if

00:58:24,670 --> 00:58:32,020
you've got a contact repository would

00:58:27,730 --> 00:58:35,830
you not do new contact with a nut or how

00:58:32,020 --> 00:58:38,230
would you retrieve contacts oh yeah in

00:58:35,830 --> 00:58:40,840
this case I would call new because you

00:58:38,230 --> 00:58:42,849
know repositories are for data objects

00:58:40,840 --> 00:58:45,520
and data objects are fine because you

00:58:42,849 --> 00:58:46,869
know just data object they don't provide

00:58:45,520 --> 00:58:48,400
features so our repositories and

00:58:46,869 --> 00:58:50,770
factories you could use it at that level

00:58:48,400 --> 00:58:53,580
yes but you encapsulate that

00:58:50,770 --> 00:58:53,580
yes exactly yeah

00:59:02,499 --> 00:59:07,119
okay thank you if you have any question

00:59:04,759 --> 00:59:07,119

YouTube URL: https://www.youtube.com/watch?v=WjRdgWeKnsE


