Title: DrupalCon Dublin 2016:  Ride the Whale! Docker for Drupalists
Publication date: 2016-09-27
Playlist: DrupalCon Dublin 2016
Description: 
	Dev Desktop, WAMP, and MAMP are trusty tools in your Drupal toolkit. The more projects you take on, the more of a headache they become: conflicting versions of PHP, modules, configuration, and where in the heck did I put that INI file!? You're here to get work done, not headdesk because you've got the wrong version of Drush!

What if you could build a custom server environment for each project, using only a few text files? What if you could share those files in your repo so everyone on your team uses the exact same environment? You can!

Docker is an alternative to local environments like Dev Desktop and heavy, resource intensive VMs, with build automation built in. In this session we'll get inside Docker, and create a custom server environment step by step for your Drupal project!

Based on my blog series: http://deninet.com/tags/docker-scratch
A Twin Cities Drupalcamp 2016 session: http://2016.tcdrupal.org/session/ride-whale-docker-drupalists
Captions: 
	00:00:00,000 --> 00:00:16,760
all right still getting feedback that is

00:00:06,600 --> 00:00:19,020
annoying well alright let's get started

00:00:16,760 --> 00:00:21,150
so just in case you don't know what room

00:00:19,020 --> 00:00:22,859
you're in this is ride the whale this is

00:00:21,150 --> 00:00:25,170
docker for drupal s and the first

00:00:22,859 --> 00:00:27,630
question you might ask is who is this

00:00:25,170 --> 00:00:29,609
weird person in front of you why do they

00:00:27,630 --> 00:00:31,500
have a stuffed whale in their hand and

00:00:29,609 --> 00:00:33,149
do they really get that excited when

00:00:31,500 --> 00:00:33,600
they have a boarding pass for a business

00:00:33,149 --> 00:00:36,450
trip

00:00:33,600 --> 00:00:39,450
well I'm Tess Flynn otherwise known as

00:00:36,450 --> 00:00:40,140
socket socket wench that's wench not

00:00:39,450 --> 00:00:41,969
wrench

00:00:40,140 --> 00:00:44,640
I am the module maintainer for flag for

00:00:41,969 --> 00:00:46,550
flag friend and for examples currently I

00:00:44,640 --> 00:00:49,920
am a freelancer with a company called

00:00:46,550 --> 00:00:51,750
10-7 and I'm so looking for work I'm

00:00:49,920 --> 00:00:55,500
looking for a full-time I like doing

00:00:51,750 --> 00:00:58,289
DevOps advocacy evangelism Google wants

00:00:55,500 --> 00:00:58,739
a small t-shirt you raise your hand

00:00:58,289 --> 00:01:06,950
first

00:00:58,739 --> 00:01:12,090
I also like throwing things at people so

00:01:06,950 --> 00:01:14,040
what's wrong with mam for years I've had

00:01:12,090 --> 00:01:17,790
hate on about mam

00:01:14,040 --> 00:01:19,110
why do I hate mam so much well there's a

00:01:17,790 --> 00:01:21,509
few different reasons that it all came

00:01:19,110 --> 00:01:24,030
down to number one

00:01:21,509 --> 00:01:26,640
there's no socket there's no stand

00:01:24,030 --> 00:01:29,100
boxing in mam so you might have a

00:01:26,640 --> 00:01:31,290
situation like this where you're working

00:01:29,100 --> 00:01:32,729
on your laptop and you know things are

00:01:31,290 --> 00:01:34,530
funny it's like you know what I should

00:01:32,729 --> 00:01:36,060
go do some cleaning around my on my

00:01:34,530 --> 00:01:37,680
laptop and figure out what's going on

00:01:36,060 --> 00:01:41,400
you're working away and they're going

00:01:37,680 --> 00:01:44,220
wait what what the heck is this how long

00:01:41,400 --> 00:01:46,590
is this been here how long is any of

00:01:44,220 --> 00:01:48,180
this stuff been in here it's been in

00:01:46,590 --> 00:01:50,610
there for like five years

00:01:48,180 --> 00:01:52,950
five years I could have had my 15

00:01:50,610 --> 00:01:55,619
gigabytes of disk space back I haven't

00:01:52,950 --> 00:01:58,620
used that project forever well that

00:01:55,619 --> 00:02:03,840
happens a lot with Matt

00:01:58,620 --> 00:02:07,500
oh man okay it's trying to work on the

00:02:03,840 --> 00:02:09,270
feedback by the way it's really kind of

00:02:07,500 --> 00:02:12,510
like the law have the inverse law of

00:02:09,270 --> 00:02:17,570
Vegas whereas things that happen outside

00:02:12,510 --> 00:02:20,100
the repo stay on your system for ever

00:02:17,570 --> 00:02:22,110
because it's like pulling weeds there's

00:02:20,100 --> 00:02:24,570
files there's databases there's configs

00:02:22,110 --> 00:02:27,170
there's old binaries and it takes a lot

00:02:24,570 --> 00:02:29,870
of time and discipline to find them and

00:02:27,170 --> 00:02:33,180
remove them and quite frankly as

00:02:29,870 --> 00:02:36,690
developers we're lazy we're good at

00:02:33,180 --> 00:02:40,200
automated laziness and cleaning stuff is

00:02:36,690 --> 00:02:42,360
not fun it's not easy to automate you

00:02:40,200 --> 00:02:43,680
can't just grep for everything because

00:02:42,360 --> 00:02:45,360
there are little tiny bits of

00:02:43,680 --> 00:02:47,160
configuration there different file types

00:02:45,360 --> 00:02:49,320
are split across different files it's

00:02:47,160 --> 00:02:52,460
really complicated and it's really a

00:02:49,320 --> 00:02:52,460
mess to try to figure out

00:02:52,820 --> 00:02:57,840
fortunately docker sandbox is absolutely

00:02:56,370 --> 00:03:00,540
everything that you do there are

00:02:57,840 --> 00:03:03,030
standard commands for deleting

00:03:00,540 --> 00:03:04,650
everything that you do no matter what

00:03:03,030 --> 00:03:08,670
project or technical stack you are

00:03:04,650 --> 00:03:10,940
working with problem number two the dev

00:03:08,670 --> 00:03:12,860
environment that you create is not

00:03:10,940 --> 00:03:15,540
repeatable

00:03:12,860 --> 00:03:17,760
so you have this wonderful thing you

00:03:15,540 --> 00:03:20,580
finally after years of betting your boss

00:03:17,760 --> 00:03:23,160
look I can't use this laptop anymore

00:03:20,580 --> 00:03:27,120
it's ancient it's got four gigabytes of

00:03:23,160 --> 00:03:29,489
memory it runs you know a core duo what

00:03:27,120 --> 00:03:31,230
are you asking me to do here but you

00:03:29,489 --> 00:03:33,180
finally get your new laptop and you're

00:03:31,230 --> 00:03:37,350
all excited and happy and then you've

00:03:33,180 --> 00:03:41,880
got to recreate all your sites that's

00:03:37,350 --> 00:03:43,830
gonna take all day and the thing is that

00:03:41,880 --> 00:03:45,600
instructions aren't enough a lot of

00:03:43,830 --> 00:03:47,070
people will say well you just need to

00:03:45,600 --> 00:03:49,260
follow the instructions to set up this

00:03:47,070 --> 00:03:52,080
project well the problem is that it's

00:03:49,260 --> 00:03:54,120
not enough human beings are fallible

00:03:52,080 --> 00:03:56,850
they're forgettable and often like

00:03:54,120 --> 00:03:59,880
myself they're fried they make mistakes

00:03:56,850 --> 00:04:01,440
they don't want to actually have to go

00:03:59,880 --> 00:04:03,120
through a list of instructions plus the

00:04:01,440 --> 00:04:04,080
instructions themselves are open to

00:04:03,120 --> 00:04:05,850
interpretation

00:04:04,080 --> 00:04:07,620
where you might think that one

00:04:05,850 --> 00:04:09,480
instruction means do this this and this

00:04:07,620 --> 00:04:11,590
another person will say well what about

00:04:09,480 --> 00:04:14,650
this oh I you

00:04:11,590 --> 00:04:19,030
this right that happens a lot and it

00:04:14,650 --> 00:04:21,070
burns time and energy unnecessarily we

00:04:19,030 --> 00:04:24,030
don't want any social snowflakes docker

00:04:21,070 --> 00:04:26,680
has no special foot snowflakes by design

00:04:24,030 --> 00:04:29,080
containers are repeatable they're meant

00:04:26,680 --> 00:04:32,620
to be stamped out again and again and

00:04:29,080 --> 00:04:37,240
again and you only need a few text files

00:04:32,620 --> 00:04:39,580
to describe what a container is problem

00:04:37,240 --> 00:04:42,370
number three the dev environment isn't

00:04:39,580 --> 00:04:44,830
shareable so you might have a situation

00:04:42,370 --> 00:04:46,450
like this where you have yourself and

00:04:44,830 --> 00:04:49,150
you have a new developer who's coming

00:04:46,450 --> 00:04:51,400
into the project and they ask you kind

00:04:49,150 --> 00:04:53,139
of impatiently in a little bit nervously

00:04:51,400 --> 00:04:55,510
because they don't want to you know seem

00:04:53,139 --> 00:04:56,919
like that person of the group and

00:04:55,510 --> 00:05:00,010
they're saying well I'm having a little

00:04:56,919 --> 00:05:01,840
trouble setting up the site and of

00:05:00,010 --> 00:05:02,500
course you you're the experience to have

00:05:01,840 --> 00:05:04,630
in the project

00:05:02,500 --> 00:05:06,100
oh sure well you just got to blah blah

00:05:04,630 --> 00:05:07,570
blah blah Drupal blah blah blah soler

00:05:06,100 --> 00:05:10,660
blah blah blah blah blah blah blah blah

00:05:07,570 --> 00:05:12,789
blah blah and the other person is

00:05:10,660 --> 00:05:14,620
sitting there like they need to use the

00:05:12,789 --> 00:05:18,030
bathroom really badly because they have

00:05:14,620 --> 00:05:18,030
no idea what you're talking about

00:05:18,090 --> 00:05:23,229
you can't share a house of cards

00:05:21,550 --> 00:05:25,660
that's what bespoke environments are

00:05:23,229 --> 00:05:27,940
every time we build a dev environment it

00:05:25,660 --> 00:05:32,669
is a house of cards and we can't share

00:05:27,940 --> 00:05:34,990
it this adds a lot of hidden costs to

00:05:32,669 --> 00:05:36,610
onboarding troubleshooting and recovery

00:05:34,990 --> 00:05:38,410
time have you ever been on a project

00:05:36,610 --> 00:05:40,210
with five or six developers and there's

00:05:38,410 --> 00:05:42,010
always that one guy Steve who has this

00:05:40,210 --> 00:05:44,229
one problem with the environment and

00:05:42,010 --> 00:05:46,810
it's only them and only on their laptop

00:05:44,229 --> 00:05:48,669
and only at Tuesday at 2:59 after

00:05:46,810 --> 00:05:50,320
they've had their third coffee we don't

00:05:48,669 --> 00:05:53,220
know why it's like that but it's

00:05:50,320 --> 00:05:55,840
repeatable for them but not anybody else

00:05:53,220 --> 00:05:57,520
why do we have that problem and it could

00:05:55,840 --> 00:05:59,590
take months to figure out that it's

00:05:57,520 --> 00:06:02,889
because they set up a cron job eight

00:05:59,590 --> 00:06:07,810
months ago for an unrelated project that

00:06:02,889 --> 00:06:09,039
happens in real life you might have

00:06:07,810 --> 00:06:11,740
heard of the dry principle

00:06:09,039 --> 00:06:14,320
do not repeat yourself it should apply

00:06:11,740 --> 00:06:16,060
to servers too we shouldn't have to

00:06:14,320 --> 00:06:19,080
repeat ourselves when we build a

00:06:16,060 --> 00:06:23,409
development stack for our projects

00:06:19,080 --> 00:06:25,150
docker is shareable everything you can

00:06:23,409 --> 00:06:25,600
build from docker is downloaded from the

00:06:25,150 --> 00:06:27,910
entry

00:06:25,600 --> 00:06:29,850
and you can add the build files to your

00:06:27,910 --> 00:06:33,010
repository they're just text files

00:06:29,850 --> 00:06:35,230
they're not huge blobs they're not huge

00:06:33,010 --> 00:06:37,120
no huge disk images they're not

00:06:35,230 --> 00:06:39,460
ISO they're not any of that they're just

00:06:37,120 --> 00:06:46,750
a few text files that are a few K in

00:06:39,460 --> 00:06:47,770
size so how do you get docker alright do

00:06:46,750 --> 00:06:51,580
I need to pay for it

00:06:47,770 --> 00:06:53,230
no the docker core engine is free and

00:06:51,580 --> 00:06:56,440
open source you can find out the source

00:06:53,230 --> 00:06:58,270
code on github for mac and Windows users

00:06:56,440 --> 00:07:00,760
though you'll probably want to go and

00:06:58,270 --> 00:07:02,890
get from a docker from their website on

00:07:00,760 --> 00:07:07,330
doctor.com slash products slash docker

00:07:02,890 --> 00:07:09,460
and you want to get at least docker 1.1

00:07:07,330 --> 00:07:11,530
2 that's going to have the newest

00:07:09,460 --> 00:07:15,130
features and the easiest version of draw

00:07:11,530 --> 00:07:17,320
a docker to use on these platforms if

00:07:15,130 --> 00:07:19,480
you do have an older system that can't

00:07:17,320 --> 00:07:21,220
use this I forget what exactly the

00:07:19,480 --> 00:07:24,160
specifics are like if you're not using

00:07:21,220 --> 00:07:27,520
Windows Pro or if you're using what was

00:07:24,160 --> 00:07:29,560
it Mac OS 10.5 or older or something

00:07:27,520 --> 00:07:32,170
like that there's another product called

00:07:29,560 --> 00:07:34,090
docker toolbox which provides the net of

00:07:32,170 --> 00:07:37,900
the older technical stack which will

00:07:34,090 --> 00:07:41,640
still run docker now this older

00:07:37,900 --> 00:07:44,530
technical stack includes VirtualBox wait

00:07:41,640 --> 00:07:46,060
you're talking about containers all this

00:07:44,530 --> 00:07:50,610
time and now you're talking about VMs

00:07:46,060 --> 00:07:54,970
why do I need a VM so here's the thing

00:07:50,610 --> 00:07:57,160
Linux and docker work hand-in-hand Linux

00:07:54,970 --> 00:07:59,650
provides the sandboxing and run time in

00:07:57,160 --> 00:08:01,870
order to run all of the containers in

00:07:59,650 --> 00:08:04,780
zonas all the applications inside

00:08:01,870 --> 00:08:07,630
containers docker ties everything

00:08:04,780 --> 00:08:10,060
together for you with infrastructure and

00:08:07,630 --> 00:08:13,990
also common utilities in order to make

00:08:10,060 --> 00:08:16,000
things easy so you have your technical

00:08:13,990 --> 00:08:18,640
stack you have your Apache or MySQL and

00:08:16,000 --> 00:08:21,100
you have your PHP they all are running

00:08:18,640 --> 00:08:24,460
as Linux applications on top of a Linux

00:08:21,100 --> 00:08:26,620
kernel the docker engine mediates the

00:08:24,460 --> 00:08:28,990
interactions between that Linux kernel

00:08:26,620 --> 00:08:31,270
and those applications each application

00:08:28,990 --> 00:08:34,599
can actually be running in its own

00:08:31,270 --> 00:08:35,710
container in order to control all of

00:08:34,599 --> 00:08:37,840
this you have a series of docker

00:08:35,710 --> 00:08:39,250
utilities which interact with the engine

00:08:37,840 --> 00:08:41,769
and the kernel

00:08:39,250 --> 00:08:44,339
and this looks great but if you're on

00:08:41,769 --> 00:08:46,300
Mac or Windows you have a problem

00:08:44,339 --> 00:08:47,680
because you've got two different

00:08:46,300 --> 00:08:50,230
operating systems and they're like

00:08:47,680 --> 00:08:52,839
toddlers fighting over the same toy it's

00:08:50,230 --> 00:08:56,889
like no I'm vos no I'm the OS and now

00:08:52,839 --> 00:08:59,199
they're fighting each other so in order

00:08:56,889 --> 00:09:02,560
to actually make this work in docker we

00:08:59,199 --> 00:09:06,069
actually use a hypervisor a VM it's 1

00:09:02,560 --> 00:09:08,079
hypervisor for the entire system no

00:09:06,069 --> 00:09:10,240
matter how many containers you are

00:09:08,079 --> 00:09:13,689
running on it that's the key difference

00:09:10,240 --> 00:09:15,579
between vagrant and docker one VM for

00:09:13,689 --> 00:09:18,069
everything it is an incredibly

00:09:15,579 --> 00:09:25,750
lightweight VM it is only a few hundred

00:09:18,069 --> 00:09:28,089
megabytes and it runs everything in one

00:09:25,750 --> 00:09:30,790
point 1/2 of docker the hypervisor is

00:09:28,089 --> 00:09:33,310
actually embedded on Windows it's going

00:09:30,790 --> 00:09:35,110
to use hyper-v on Windows pro on Mac OS

00:09:33,310 --> 00:09:38,949
it uses an open source project called

00:09:35,110 --> 00:09:43,480
hyper kit for older versions of docker

00:09:38,949 --> 00:09:45,129
will rely on VirtualBox how many people

00:09:43,480 --> 00:09:47,889
are using Linux in this run besides me

00:09:45,129 --> 00:09:52,420
oh that is a lot more people than I

00:09:47,889 --> 00:09:54,519
thought wow ok so there's no virtual

00:09:52,420 --> 00:09:56,620
machine necessary on Linux because it's

00:09:54,519 --> 00:10:00,399
the native environment and it just uses

00:09:56,620 --> 00:10:02,199
your hosts normal Linux kernel use your

00:10:00,399 --> 00:10:06,879
destroyed standard package manager tools

00:10:02,199 --> 00:10:08,680
to install docker all right we've got

00:10:06,879 --> 00:10:11,559
docker on our system how do we get some

00:10:08,680 --> 00:10:13,689
containers docker is actually a lot like

00:10:11,559 --> 00:10:17,350
vagrant you rarely build containers

00:10:13,689 --> 00:10:19,389
yourself what and what happens instead

00:10:17,350 --> 00:10:22,149
is that you actually go shopping for

00:10:19,389 --> 00:10:24,519
containers on docker hub it's an online

00:10:22,149 --> 00:10:28,839
repository of ready to use containers at

00:10:24,519 --> 00:10:30,639
hub docker comm so how it works is you

00:10:28,839 --> 00:10:33,220
might have a community developer like

00:10:30,639 --> 00:10:35,019
myself or you or anyone else who comes

00:10:33,220 --> 00:10:36,519
up with this great new container and

00:10:35,019 --> 00:10:38,860
they want to share it with everybody so

00:10:36,519 --> 00:10:42,279
they take the container source code and

00:10:38,860 --> 00:10:44,410
they upload that to docker hub docker

00:10:42,279 --> 00:10:47,679
hub will take that source code and build

00:10:44,410 --> 00:10:50,019
a real actual working container on their

00:10:47,679 --> 00:10:51,990
servers and then they take a snapshot of

00:10:50,019 --> 00:10:54,460
that called an image

00:10:51,990 --> 00:10:57,490
when you actually need to use that

00:10:54,460 --> 00:11:00,430
container you do a docker pull from your

00:10:57,490 --> 00:11:02,500
system using the terminal and it

00:11:00,430 --> 00:11:06,850
downloads the container to your system

00:11:02,500 --> 00:11:08,160
ready to use so it does all of that work

00:11:06,850 --> 00:11:10,360
for you

00:11:08,160 --> 00:11:11,800
there are a number of different official

00:11:10,360 --> 00:11:13,840
containers that you can actually use

00:11:11,800 --> 00:11:15,280
these are typically created by a project

00:11:13,840 --> 00:11:19,390
maintainer x' there are containers for

00:11:15,280 --> 00:11:22,030
Apache or PHP for MySQL Maria DB tons

00:11:19,390 --> 00:11:25,450
and tons of Linux distros there's tons

00:11:22,030 --> 00:11:28,090
of them out there there's also an

00:11:25,450 --> 00:11:31,750
official Drupal container at hub docker

00:11:28,090 --> 00:11:34,300
comm site has slash underscore slash

00:11:31,750 --> 00:11:36,940
troop line that URL always confuses me

00:11:34,300 --> 00:11:39,910
for some odd reason and it's great for

00:11:36,940 --> 00:11:42,250
demos but it's really a bad container to

00:11:39,910 --> 00:11:44,230
do actual work in it's meant to

00:11:42,250 --> 00:11:46,120
demonstrate Drupal that's its purpose

00:11:44,230 --> 00:11:47,920
and this is one thing that you can

00:11:46,120 --> 00:11:50,290
actually see with containers that's very

00:11:47,920 --> 00:11:52,770
different from vagrant were you actually

00:11:50,290 --> 00:11:56,380
meant to use this as a self-contained

00:11:52,770 --> 00:11:58,870
demonstration system instead of using it

00:11:56,380 --> 00:12:01,120
for a base in order to build other stuff

00:11:58,870 --> 00:12:03,340
other people can very easily go I'm

00:12:01,120 --> 00:12:05,710
gonna go and build another one that will

00:12:03,340 --> 00:12:08,200
be meant for production environments or

00:12:05,710 --> 00:12:09,160
meant for my development environment so

00:12:08,200 --> 00:12:10,990
there's a whole bunch of different

00:12:09,160 --> 00:12:13,840
containers out there and it's important

00:12:10,990 --> 00:12:17,110
to keep mind what use you want to look

00:12:13,840 --> 00:12:19,180
for how do you download a container once

00:12:17,110 --> 00:12:21,550
you've found it from the terminal you do

00:12:19,180 --> 00:12:24,160
a dock or poll looks very familiar to a

00:12:21,550 --> 00:12:27,120
git command and you pass that image name

00:12:24,160 --> 00:12:30,040
that you find on the Han docker hub and

00:12:27,120 --> 00:12:33,070
usually it's going to be some person's

00:12:30,040 --> 00:12:34,930
user name slash the container name for

00:12:33,070 --> 00:12:38,830
official containers is just going to be

00:12:34,930 --> 00:12:41,020
the project name so let's start with the

00:12:38,830 --> 00:12:42,880
Debian Debian runs the vast majority of

00:12:41,020 --> 00:12:44,410
web servers out there the other

00:12:42,880 --> 00:12:47,170
competitor is sent to s there is a

00:12:44,410 --> 00:12:49,000
docker container for Santo s as well but

00:12:47,170 --> 00:12:50,890
we're going to use Debian let's do a

00:12:49,000 --> 00:12:53,650
docker pull Debian and this is a good

00:12:50,890 --> 00:12:56,530
base for our web projects you might

00:12:53,650 --> 00:12:58,780
notice that we have Debian and some of

00:12:56,530 --> 00:13:00,760
these containers have this weird other

00:12:58,780 --> 00:13:03,699
format where they have an 8 inch name

00:13:00,760 --> 00:13:06,489
and then a colon and then another name

00:13:03,699 --> 00:13:09,129
for that this is called a tag it's

00:13:06,489 --> 00:13:12,189
usually used for docker containers to

00:13:09,129 --> 00:13:14,589
add versioning so you can have a Drupal

00:13:12,189 --> 00:13:16,629
colon seven container a Drupal colon

00:13:14,589 --> 00:13:19,540
eight container there are also you know

00:13:16,629 --> 00:13:22,989
there's also been used for variants so

00:13:19,540 --> 00:13:25,839
you might have a CLI container that also

00:13:22,989 --> 00:13:29,769
has say X debug installed for some odd

00:13:25,839 --> 00:13:33,869
reason and you can make a tag that has :

00:13:29,769 --> 00:13:37,029
x debug and that works perfectly fine

00:13:33,869 --> 00:13:39,220
the tags are optional too you don't have

00:13:37,029 --> 00:13:41,350
to use them there's a default tag that's

00:13:39,220 --> 00:13:43,600
just called latest which will come out

00:13:41,350 --> 00:13:45,279
you know which will cover the most Verdi

00:13:43,600 --> 00:13:48,790
fault and most up-to-date version of

00:13:45,279 --> 00:13:50,439
that container also it's important to

00:13:48,790 --> 00:13:53,259
note that the container that the tags

00:13:50,439 --> 00:13:56,489
are unique per container so check the

00:13:53,259 --> 00:13:58,809
page for the container on docker hub

00:13:56,489 --> 00:14:00,429
alright so we did a docker pull on

00:13:58,809 --> 00:14:02,079
Debian but we still don't have a running

00:14:00,429 --> 00:14:05,049
container yet so how do we get that

00:14:02,079 --> 00:14:07,629
running pretty simple docker run and

00:14:05,049 --> 00:14:08,829
then the image name so here's what that

00:14:07,629 --> 00:14:11,980
command will look like

00:14:08,829 --> 00:14:13,749
we have docker run then we pass at - I

00:14:11,980 --> 00:14:16,929
because we want to run the container

00:14:13,749 --> 00:14:19,179
interactively - T because we want to

00:14:16,929 --> 00:14:22,959
emulate a normal terminal session as if

00:14:19,179 --> 00:14:26,079
we were SSA tching or or Tel netting

00:14:22,959 --> 00:14:27,970
into that container the image name to

00:14:26,079 --> 00:14:31,230
start and the container under the

00:14:27,970 --> 00:14:33,759
command to run inside of the container

00:14:31,230 --> 00:14:35,379
this is what that looks like you'll

00:14:33,759 --> 00:14:37,239
notice immediately you're dropped into a

00:14:35,379 --> 00:14:39,309
root terminal and it's got this really

00:14:37,239 --> 00:14:41,199
long string of numbers after that which

00:14:39,309 --> 00:14:43,660
is unique per container and I'll tell

00:14:41,199 --> 00:14:45,369
you about what that is later so this was

00:14:43,660 --> 00:14:47,139
done on a Mac machine but you'll notice

00:14:45,369 --> 00:14:50,289
actually this isn't a Mac anymore it's

00:14:47,139 --> 00:14:52,149
running Linux some variant of Linux so

00:14:50,289 --> 00:14:54,279
now we know from for example we're

00:14:52,149 --> 00:14:58,269
outside of Mac OS and now we're in the

00:14:54,279 --> 00:14:59,949
Linux world alright to exit out of this

00:14:58,269 --> 00:15:03,299
terminal session just use the exit

00:14:59,949 --> 00:15:05,709
command like you would an SSH or telnet

00:15:03,299 --> 00:15:07,989
what if you want to run a container in

00:15:05,709 --> 00:15:09,970
the background this is a little bit more

00:15:07,989 --> 00:15:13,600
complicated when you actually want to do

00:15:09,970 --> 00:15:17,070
this in one huge command how it works is

00:15:13,600 --> 00:15:19,450
you do a docker run - D for detach

00:15:17,070 --> 00:15:22,060
the condemned the image name of the

00:15:19,450 --> 00:15:26,020
command and then in this case we have to

00:15:22,060 --> 00:15:28,270
use a special special bash command that

00:15:26,020 --> 00:15:30,670
tells the container to tells that

00:15:28,270 --> 00:15:33,700
container to always keep running but do

00:15:30,670 --> 00:15:35,589
nothing that's a bit of a hack we'll

00:15:33,700 --> 00:15:37,300
show you a better way of doing that in a

00:15:35,589 --> 00:15:41,130
second and we get this really long

00:15:37,300 --> 00:15:44,170
string of numbers that starts with B 4 D

00:15:41,130 --> 00:15:46,300
that's called a container ID it's a

00:15:44,170 --> 00:15:49,089
unique identifier for every container

00:15:46,300 --> 00:15:51,700
instance in the world when you enter

00:15:49,089 --> 00:15:53,650
plug do one docker pull one docker run

00:15:51,700 --> 00:15:55,810
you'll get one end zone one container ID

00:15:53,650 --> 00:15:58,420
if you do another docker run you'll get

00:15:55,810 --> 00:16:02,800
a different container ID it's unique for

00:15:58,420 --> 00:16:04,870
that one entire instance you don't have

00:16:02,800 --> 00:16:06,760
to use the entire huge string of numbers

00:16:04,870 --> 00:16:08,980
either you can actually just use the

00:16:06,760 --> 00:16:12,810
first few characters as a shorthand as

00:16:08,980 --> 00:16:15,070
long as it is unique within your system

00:16:12,810 --> 00:16:19,060
how do you list the containers on a

00:16:15,070 --> 00:16:22,600
system docker PS sync process like the

00:16:19,060 --> 00:16:25,750
UNIX process command now let's say you

00:16:22,600 --> 00:16:27,730
want to task into a particular detached

00:16:25,750 --> 00:16:30,760
container that you ran in the background

00:16:27,730 --> 00:16:34,180
you do a docker exact you pass the

00:16:30,760 --> 00:16:37,060
container ID and the command to run so

00:16:34,180 --> 00:16:39,160
if we wanted to task into that b4 d

00:16:37,060 --> 00:16:42,850
container that we created earlier docker

00:16:39,160 --> 00:16:44,350
exec i - TB 40 and the command and we're

00:16:42,850 --> 00:16:48,490
back inside that container that was

00:16:44,350 --> 00:16:52,120
running in the background again use exit

00:16:48,490 --> 00:16:53,890
to quit how do you stop a container once

00:16:52,120 --> 00:16:56,170
it's running in the background you use a

00:16:53,890 --> 00:17:00,670
docker kill command and you pass the

00:16:56,170 --> 00:17:02,470
container ID all right that's all great

00:17:00,670 --> 00:17:04,990
task but you know there's a problem

00:17:02,470 --> 00:17:06,819
that's a lot of commands I don't want to

00:17:04,990 --> 00:17:08,770
remember all those commands I don't want

00:17:06,819 --> 00:17:10,329
to have to set up shell scripts to do

00:17:08,770 --> 00:17:12,699
all those commands I want somebody else

00:17:10,329 --> 00:17:15,670
to do the work for me well there's a

00:17:12,699 --> 00:17:16,959
wonderful way of doing that first of all

00:17:15,670 --> 00:17:19,179
you have to remember something a

00:17:16,959 --> 00:17:22,030
container is just a process this is a

00:17:19,179 --> 00:17:23,829
phrase that is often handed around when

00:17:22,030 --> 00:17:27,069
trying to introduce people to the dota 2

00:17:23,829 --> 00:17:29,690
docker as a project it's kind of true

00:17:27,069 --> 00:17:33,270
but also kind of not true

00:17:29,690 --> 00:17:35,429
so when we think about lamp a lamp stack

00:17:33,270 --> 00:17:37,320
has multiple processes we have a process

00:17:35,429 --> 00:17:41,340
for apache' we have a process sometimes

00:17:37,320 --> 00:17:43,080
for PHP we have a process for MySQL so

00:17:41,340 --> 00:17:44,630
that's a lot of different processes do

00:17:43,080 --> 00:17:49,050
we have to start multiple containers

00:17:44,630 --> 00:17:51,650
well the answer is kind of yeah so how

00:17:49,050 --> 00:17:54,690
do we do that and not go crazy running

00:17:51,650 --> 00:17:56,970
$50,000 run commands there's a wonderful

00:17:54,690 --> 00:17:59,460
thing called docker compose compose is

00:17:56,970 --> 00:18:01,679
what got me into docker this is the part

00:17:59,460 --> 00:18:05,730
that tied everything together so well

00:18:01,679 --> 00:18:07,740
that I loved it it allows you to manage

00:18:05,730 --> 00:18:11,010
multiple containers what I like calling

00:18:07,740 --> 00:18:14,520
a container set with just one text file

00:18:11,010 --> 00:18:17,460
that 10 text file is called docker -

00:18:14,520 --> 00:18:20,040
composed gamal it is a descriptive file

00:18:17,460 --> 00:18:22,440
format not imperative and you typically

00:18:20,040 --> 00:18:25,740
want to say this is a root of your

00:18:22,440 --> 00:18:28,110
project directory so let's create a

00:18:25,740 --> 00:18:30,960
basic lamp set with just one docker on

00:18:28,110 --> 00:18:34,770
one compose file we start with version :

00:18:30,960 --> 00:18:37,140
- this is the not your file version not

00:18:34,770 --> 00:18:40,620
the docker version it's the docker -

00:18:37,140 --> 00:18:45,120
compose syntax version so it's almost

00:18:40,620 --> 00:18:46,800
always going to be version : - after

00:18:45,120 --> 00:18:49,050
that we're going to define a number of

00:18:46,800 --> 00:18:51,510
containers which in compose lingo is

00:18:49,050 --> 00:18:55,760
called services so we create a web

00:18:51,510 --> 00:18:59,100
service which runs the PHP container

00:18:55,760 --> 00:19:01,559
with the Apache variant then we run a

00:18:59,100 --> 00:19:07,380
database or a DB container which runs

00:19:01,559 --> 00:19:08,820
the Morea DB image from docker hub how

00:19:07,380 --> 00:19:10,710
do we start this file have this

00:19:08,820 --> 00:19:15,630
container setup we do a docker compose

00:19:10,710 --> 00:19:17,250
up - d the docker compose file must be

00:19:15,630 --> 00:19:21,600
in the current working directory when

00:19:17,250 --> 00:19:23,010
you issue this command alright once we

00:19:21,600 --> 00:19:25,350
start that up we'll have multiple

00:19:23,010 --> 00:19:27,510
containers running we can do o we can

00:19:25,350 --> 00:19:29,700
list just the containers that are part

00:19:27,510 --> 00:19:31,440
of our container set by using the doctor

00:19:29,700 --> 00:19:33,660
- compose PS command

00:19:31,440 --> 00:19:38,550
and OC are two different containers

00:19:33,660 --> 00:19:40,679
running actually we notice the Morea DB

00:19:38,550 --> 00:19:45,389
container actually quit mmm

00:19:40,679 --> 00:19:46,799
I wonder why hmm you might notice also

00:19:45,389 --> 00:19:49,259
that the container names are a little

00:19:46,799 --> 00:19:52,259
bit weird where does this ride the whale

00:19:49,259 --> 00:19:55,110
underscored EBU underscore oh wow where

00:19:52,259 --> 00:19:57,419
did that come from well it works like

00:19:55,110 --> 00:20:00,480
this the parent directory name from

00:19:57,419 --> 00:20:03,269
wherever that composed file is then the

00:20:00,480 --> 00:20:04,980
service theme and then a unique index so

00:20:03,269 --> 00:20:07,919
when I actually need this I did this in

00:20:04,980 --> 00:20:10,950
home / task / project / ride the whale

00:20:07,919 --> 00:20:13,049
there's my compose file so it what it

00:20:10,950 --> 00:20:17,070
did is it found the ride the whale

00:20:13,049 --> 00:20:18,690
command it went to web was started up

00:20:17,070 --> 00:20:20,129
the web container and applied a unique

00:20:18,690 --> 00:20:24,779
index so that it's always unique

00:20:20,129 --> 00:20:26,460
persistent we need to have more maps and

00:20:24,779 --> 00:20:28,320
ports right now the containers are

00:20:26,460 --> 00:20:32,730
operating their own little world they're

00:20:28,320 --> 00:20:35,490
not connected back to the your system in

00:20:32,730 --> 00:20:37,049
any way that they know about so in order

00:20:35,490 --> 00:20:38,999
to do that we are going to map some

00:20:37,049 --> 00:20:41,669
ports we start with the port on our host

00:20:38,999 --> 00:20:44,909
we want to map to the port inside the

00:20:41,669 --> 00:20:46,799
container so we update our compose file

00:20:44,909 --> 00:20:52,679
we're going to map our Apache container

00:20:46,799 --> 00:20:54,480
container to port 80 both directions all

00:20:52,679 --> 00:20:56,129
right now after we make that change to

00:20:54,480 --> 00:20:58,169
the compose file how do we get that to

00:20:56,129 --> 00:21:00,570
reflect in our container set well we

00:20:58,169 --> 00:21:02,309
need to kill the containers and then

00:21:00,570 --> 00:21:03,899
restart them this is something that's

00:21:02,309 --> 00:21:05,909
very different from what you're used to

00:21:03,899 --> 00:21:08,369
with vagrant with vagrant you just we

00:21:05,909 --> 00:21:10,889
update this particular configuration and

00:21:08,369 --> 00:21:12,659
it runs in flight we don't need to worry

00:21:10,889 --> 00:21:14,909
about restarting anything docker

00:21:12,659 --> 00:21:17,100
containers are meant to be disposable

00:21:14,909 --> 00:21:19,289
you're supposed to kill them at any

00:21:17,100 --> 00:21:21,240
instance at any time for whatever reason

00:21:19,289 --> 00:21:23,220
you want so you get used to actually

00:21:21,240 --> 00:21:25,860
throwing them away whenever you don't

00:21:23,220 --> 00:21:28,919
need them again so we do a docker

00:21:25,860 --> 00:21:31,799
compose kill then we do another up D and

00:21:28,919 --> 00:21:34,110
then we can actually go to localhost on

00:21:31,799 --> 00:21:35,940
our system because that's what the

00:21:34,110 --> 00:21:38,059
containers think that think that they're

00:21:35,940 --> 00:21:41,700
on they're on the same ip as our system

00:21:38,059 --> 00:21:42,360
and when we go to it we get a 403 that

00:21:41,700 --> 00:21:45,840
doesn't look right

00:21:42,360 --> 00:21:48,269
well actually this is good this system

00:21:45,840 --> 00:21:50,460
didn't have Apache installed on it the

00:21:48,269 --> 00:21:51,869
fact that we're getting a 403 suggests

00:21:50,460 --> 00:21:54,110
that now there's an actual Apache

00:21:51,869 --> 00:21:57,500
process that's running that respond

00:21:54,110 --> 00:21:59,809
to us with a proper response so we're

00:21:57,500 --> 00:22:01,760
getting somewhere now we need to get

00:21:59,809 --> 00:22:05,600
files into our container how do we do

00:22:01,760 --> 00:22:07,610
that docker uses volumes volumes

00:22:05,600 --> 00:22:09,950
basically creates a persistent to record

00:22:07,610 --> 00:22:11,690
use one of two things it creates a

00:22:09,950 --> 00:22:14,809
persistent directory inside of a

00:22:11,690 --> 00:22:19,690
container or you can mount a directory

00:22:14,809 --> 00:22:19,690
on your host system into the container

00:22:19,960 --> 00:22:25,190
for creating a volume of compose you

00:22:22,940 --> 00:22:27,830
create a volumes section and then you

00:22:25,190 --> 00:22:29,600
map the path on the host to the path on

00:22:27,830 --> 00:22:33,140
the container just like the port mapping

00:22:29,600 --> 00:22:35,929
system so our project looks like this so

00:22:33,140 --> 00:22:38,120
far we have our compose file and we have

00:22:35,929 --> 00:22:42,320
a docker directory which has our web

00:22:38,120 --> 00:22:44,000
route in it so in our compose file we're

00:22:42,320 --> 00:22:46,790
going to go under the web our web

00:22:44,000 --> 00:22:49,669
container we add a volume section and

00:22:46,790 --> 00:22:51,830
we're going to map the dock route again

00:22:49,669 --> 00:22:55,549
this path is local to wherever that

00:22:51,830 --> 00:22:58,100
compose file is located and then we're

00:22:55,549 --> 00:23:01,280
going to map that into the container in

00:22:58,100 --> 00:23:03,320
this case the default web directory for

00:23:01,280 --> 00:23:08,240
that container is var such triple W

00:23:03,320 --> 00:23:09,679
slash HTML now you might notice there's

00:23:08,240 --> 00:23:13,280
something a little interesting going on

00:23:09,679 --> 00:23:15,559
I use two different styles of paths when

00:23:13,280 --> 00:23:17,809
I actually specified that volume mapping

00:23:15,559 --> 00:23:20,510
the first one is you know the first one

00:23:17,809 --> 00:23:23,419
was on the host system I use a relative

00:23:20,510 --> 00:23:25,179
path to the compose file that's actually

00:23:23,419 --> 00:23:27,950
the easiest way to do it

00:23:25,179 --> 00:23:31,190
whenever you're mapping a path to inside

00:23:27,950 --> 00:23:33,140
the container always use an absolute

00:23:31,190 --> 00:23:35,540
path that will give you the most

00:23:33,140 --> 00:23:38,809
consistency whenever mounting a volume

00:23:35,540 --> 00:23:40,850
inside of container all right so we

00:23:38,809 --> 00:23:43,640
killed a container set we up at refresh

00:23:40,850 --> 00:23:47,890
it and behold we have our amazing page

00:23:43,640 --> 00:23:50,600
it yeah it's in docker and stuff okay

00:23:47,890 --> 00:23:52,790
what about that DB container why did it

00:23:50,600 --> 00:23:55,690
quit earlier maybe it was missing

00:23:52,790 --> 00:23:58,250
something maybe some configuration maybe

00:23:55,690 --> 00:23:59,690
how do we pass configuration to a

00:23:58,250 --> 00:24:01,610
container there's a few different ways

00:23:59,690 --> 00:24:03,679
we could probably do that we could bake

00:24:01,610 --> 00:24:06,050
it into the container so that we have a

00:24:03,679 --> 00:24:07,780
standard database name standard user and

00:24:06,050 --> 00:24:09,580
a standard password all the time but

00:24:07,780 --> 00:24:11,740
that's really constraining and really

00:24:09,580 --> 00:24:14,380
limiting it I don't want to have to make

00:24:11,740 --> 00:24:18,130
a new container on hub if I'm going to

00:24:14,380 --> 00:24:20,230
change these relatively simple values we

00:24:18,130 --> 00:24:23,080
could mount a configuration file in a

00:24:20,230 --> 00:24:25,210
directory using volumes but that's

00:24:23,080 --> 00:24:27,040
complicated if the find that if it

00:24:25,210 --> 00:24:28,810
doesn't have any standard formats you

00:24:27,040 --> 00:24:31,870
have to use commands and then parse at

00:24:28,810 --> 00:24:33,460
second that's just a lot of mess a lot

00:24:31,870 --> 00:24:36,370
of docker containers they'll use this

00:24:33,460 --> 00:24:38,290
method they use environment variables so

00:24:36,370 --> 00:24:40,480
what happens as we tell of a container

00:24:38,290 --> 00:24:44,350
use this and specify this environment

00:24:40,480 --> 00:24:46,330
variable on startup how do you set an

00:24:44,350 --> 00:24:47,950
environment variable and compose you're

00:24:46,330 --> 00:24:50,620
going to put an environment section

00:24:47,950 --> 00:24:53,110
underneath the service name and then you

00:24:50,620 --> 00:24:57,220
just use one or more variable meet and

00:24:53,110 --> 00:24:58,960
value key value paths what variables

00:24:57,220 --> 00:25:01,270
should you be using for whatever

00:24:58,960 --> 00:25:03,190
container you get really you need to

00:25:01,270 --> 00:25:05,440
check the Gotha the container itself go

00:25:03,190 --> 00:25:06,880
to the containers page on docker hub

00:25:05,440 --> 00:25:08,800
find out what it is

00:25:06,880 --> 00:25:12,280
find out what variables it is and then

00:25:08,800 --> 00:25:19,180
use it so for Maria DB we actually have

00:25:12,280 --> 00:25:22,150
several of them so we actually have one

00:25:19,180 --> 00:25:25,120
for mother mysql password the database

00:25:22,150 --> 00:25:27,220
name the MySQL user and the - Kuehl

00:25:25,120 --> 00:25:30,130
password for that user and these are all

00:25:27,220 --> 00:25:33,100
on the the content the havi docker hub

00:25:30,130 --> 00:25:35,680
page for the Maria DB container all very

00:25:33,100 --> 00:25:39,040
well documented so we can specify these

00:25:35,680 --> 00:25:42,100
values in our compose file can kill how

00:25:39,040 --> 00:25:44,580
but wait why is there no pork let's go

00:25:42,100 --> 00:25:46,930
back again we specifies a port mapping

00:25:44,580 --> 00:25:49,120
for our web container right so that we

00:25:46,930 --> 00:25:52,390
can get to the Apache instance from our

00:25:49,120 --> 00:25:54,700
hosts but this is this DB container is

00:25:52,390 --> 00:25:57,820
for all intents and purposes a complete

00:25:54,700 --> 00:26:01,300
unique server separated from the

00:25:57,820 --> 00:26:05,500
webserver so how do these two actually

00:26:01,300 --> 00:26:08,590
communicate well actually we don't need

00:26:05,500 --> 00:26:10,990
to worry about that docker compose knows

00:26:08,590 --> 00:26:13,030
that you're making a container set knows

00:26:10,990 --> 00:26:15,040
that these are related sets of

00:26:13,030 --> 00:26:16,929
containers so what it does is it

00:26:15,040 --> 00:26:20,020
automatically creates a private network

00:26:16,929 --> 00:26:21,429
on your system that connects all of

00:26:20,020 --> 00:26:23,590
those containers to

00:26:21,429 --> 00:26:25,900
the containers themselves come

00:26:23,590 --> 00:26:27,880
pre-configured with the right port open

00:26:25,900 --> 00:26:31,150
so you don't need to worry about opening

00:26:27,880 --> 00:26:35,400
the port 3306 in order to get MySQL

00:26:31,150 --> 00:26:38,919
communicate to everything else alright

00:26:35,400 --> 00:26:40,960
if you do want to communicate to the

00:26:38,919 --> 00:26:43,299
database container you can of course map

00:26:40,960 --> 00:26:45,490
the port there's no problem with that if

00:26:43,299 --> 00:26:49,200
you want to use utilities on your host

00:26:45,490 --> 00:26:49,200
system in order to communicate with it

00:26:49,590 --> 00:26:54,370
so if we wanted to do that we can read

00:26:52,510 --> 00:26:57,460
up our container set and then we can use

00:26:54,370 --> 00:26:59,380
on our host system the MySQL command we

00:26:57,460 --> 00:27:02,140
pass it the username that we defined in

00:26:59,380 --> 00:27:04,030
the compose file we say that we're going

00:27:02,140 --> 00:27:07,540
to give it a password we tell the host

00:27:04,030 --> 00:27:10,480
that it's the same as our localhost 127

00:27:07,540 --> 00:27:14,380
dot 0 dot 0 dot 1 data and then the port

00:27:10,480 --> 00:27:16,600
3306 we pass the password and we're in

00:27:14,380 --> 00:27:19,390
even though we don't have my Maria DB

00:27:16,600 --> 00:27:23,980
set up on this consistent it's running

00:27:19,390 --> 00:27:27,730
inside of a container now we could get

00:27:23,980 --> 00:27:29,799
to Drupal finally I have to get away at

00:27:27,730 --> 00:27:33,450
a t-shirt yet I've got a medium who

00:27:29,799 --> 00:27:33,450
wants to meet him you wanted a medium

00:27:33,720 --> 00:27:39,250
all right so let's prep some files first

00:27:37,120 --> 00:27:40,929
you want to download your Drupal core to

00:27:39,250 --> 00:27:42,549
the volume mounted directory you want to

00:27:40,929 --> 00:27:45,100
create set the permissions for the font

00:27:42,549 --> 00:27:47,380
for the files directory and create the

00:27:45,100 --> 00:27:49,690
services dot llamo and settings dot PHP

00:27:47,380 --> 00:27:53,530
as normal as you would for any normal

00:27:49,690 --> 00:27:55,870
linux server and once you go home you

00:27:53,530 --> 00:27:59,280
refresh you can go to localhost and you

00:27:55,870 --> 00:28:06,040
get a Drupal installed agent finally

00:27:59,280 --> 00:28:11,130
finally we have Drupal working and then

00:28:06,040 --> 00:28:11,130
there's some problems damn it

00:28:11,950 --> 00:28:17,020
so we are missing some extensions maybe

00:28:15,220 --> 00:28:19,210
we could customize this container we

00:28:17,020 --> 00:28:21,880
just pulled the default Apache container

00:28:19,210 --> 00:28:23,680
from docker hub maybe we can customize

00:28:21,880 --> 00:28:25,810
it put all those extensions on there

00:28:23,680 --> 00:28:29,470
that we need so let's talk about

00:28:25,810 --> 00:28:31,870
customizing containers ah there's a

00:28:29,470 --> 00:28:34,180
broken image there anyways so docker

00:28:31,870 --> 00:28:37,900
files have content of their container

00:28:34,180 --> 00:28:40,300
source code docker files are always

00:28:37,900 --> 00:28:42,610
called docker files and unlike the

00:28:40,300 --> 00:28:46,270
compose file they're imperative not

00:28:42,610 --> 00:28:47,680
descriptive so first of all you want to

00:28:46,270 --> 00:28:49,240
create some directories for your docker

00:28:47,680 --> 00:28:51,760
files because they're always named

00:28:49,240 --> 00:28:53,920
docker file you probably should give

00:28:51,760 --> 00:28:56,590
them a more of a concrete directory

00:28:53,920 --> 00:28:59,200
structure a common one which is just a

00:28:56,590 --> 00:29:01,390
suggestion but a pretty common one is to

00:28:59,200 --> 00:29:03,580
create a docker directory and then a

00:29:01,390 --> 00:29:06,580
director subdirectory for each container

00:29:03,580 --> 00:29:08,590
in your container set for the containers

00:29:06,580 --> 00:29:10,750
that you're going to customize you want

00:29:08,590 --> 00:29:15,490
to create the docker file inside of that

00:29:10,750 --> 00:29:17,770
subdirectory the first two lines of that

00:29:15,490 --> 00:29:20,050
docker file we have a from and we have a

00:29:17,770 --> 00:29:21,880
maintainer line the maintains only it's

00:29:20,050 --> 00:29:25,990
pretty obvious it's who works on this

00:29:21,880 --> 00:29:28,870
docker file but that from line what why

00:29:25,990 --> 00:29:30,880
do I need a from line I mean I know I'm

00:29:28,870 --> 00:29:33,370
going to start with another container

00:29:30,880 --> 00:29:36,160
but in docker find docker files we

00:29:33,370 --> 00:29:39,340
always start with another container is

00:29:36,160 --> 00:29:41,500
that true that's actually true in docker

00:29:39,340 --> 00:29:44,440
yakin it's more like Turtles all the way

00:29:41,500 --> 00:29:46,930
down all containers and docker are based

00:29:44,440 --> 00:29:49,240
on another container that already exists

00:29:46,930 --> 00:29:51,670
so you might have a docker that run out

00:29:49,240 --> 00:29:53,470
container that runs Drupal then that

00:29:51,670 --> 00:29:56,230
container is in turn based on an earlier

00:29:53,470 --> 00:29:58,540
container that runs PHP that container

00:29:56,230 --> 00:30:01,150
is based on an earlier container that

00:29:58,540 --> 00:30:03,340
provides a debian environment and on and

00:30:01,150 --> 00:30:06,850
on until you get to the parent of all

00:30:03,340 --> 00:30:08,440
containers the scratch container the

00:30:06,850 --> 00:30:11,290
scratch container is the starting point

00:30:08,440 --> 00:30:17,230
for all containers in docker and it's

00:30:11,290 --> 00:30:19,690
just an empty tar.gz file you might also

00:30:17,230 --> 00:30:22,510
hear the phrase beasts image beasts

00:30:19,690 --> 00:30:24,490
images usually refer to the beasts Linux

00:30:22,510 --> 00:30:25,779
install that you're using usually Debian

00:30:24,490 --> 00:30:29,289
or CentOS or arch

00:30:25,779 --> 00:30:31,389
or whatever but usually a lot of people

00:30:29,289 --> 00:30:34,840
use the phrase to refer to whatever

00:30:31,389 --> 00:30:37,179
image you start with so the PHP Apache

00:30:34,840 --> 00:30:39,969
image will be our base image for this

00:30:37,179 --> 00:30:41,499
instance you might notice another thing

00:30:39,969 --> 00:30:44,440
that's weird about docker files as

00:30:41,499 --> 00:30:47,559
there's no install directive this is

00:30:44,440 --> 00:30:48,969
Linux we're not going to specify how

00:30:47,559 --> 00:30:51,249
you're going to install stuff we're

00:30:48,969 --> 00:30:54,219
going to let the beasts image decide how

00:30:51,249 --> 00:30:56,919
that works so for an install commands on

00:30:54,219 --> 00:31:00,009
debian we're going to use apt-get Santo

00:30:56,919 --> 00:31:02,289
s uses yum and some containers such as

00:31:00,009 --> 00:31:04,509
the PHP Apache container use a

00:31:02,289 --> 00:31:08,409
specialized install script to help you

00:31:04,509 --> 00:31:09,759
install everything in order to run these

00:31:08,409 --> 00:31:12,009
commands we actually have a run

00:31:09,759 --> 00:31:13,929
directive which just specifies the

00:31:12,009 --> 00:31:17,049
command to run when we build the

00:31:13,929 --> 00:31:18,729
container so here's what our docker file

00:31:17,049 --> 00:31:21,489
looks like if we want it to get them to

00:31:18,729 --> 00:31:23,889
run Drupal 8 so you have from PHP Apache

00:31:21,489 --> 00:31:26,109
we have our maintainer line we do an

00:31:23,889 --> 00:31:28,330
apt-get update and then we're going to

00:31:26,109 --> 00:31:31,239
install several different libraries for

00:31:28,330 --> 00:31:34,269
Gd then we're going to use the container

00:31:31,239 --> 00:31:36,729
specific script in order to install a

00:31:34,269 --> 00:31:40,919
whole bunch of extra PHP extensions GD

00:31:36,729 --> 00:31:45,359
days on international PDO and MB string

00:31:40,919 --> 00:31:45,359
so I did all the footwork for you there

00:31:45,779 --> 00:31:49,839
how do you use the docker file you've

00:31:48,279 --> 00:31:52,479
created in a compose file

00:31:49,839 --> 00:31:54,580
well we actually use the build statement

00:31:52,479 --> 00:31:56,710
so before we had an image statement

00:31:54,580 --> 00:31:59,080
which refers to the image name on docker

00:31:56,710 --> 00:32:01,719
hub now we have a build line which

00:31:59,080 --> 00:32:04,299
refers to the path of the docker file in

00:32:01,719 --> 00:32:06,489
general try to keep this relative to

00:32:04,299 --> 00:32:08,489
wherever the composer file is located

00:32:06,489 --> 00:32:12,429
not absolute

00:32:08,489 --> 00:32:16,149
so we updated our compose file we

00:32:12,429 --> 00:32:18,039
changed just one line we notice we just

00:32:16,149 --> 00:32:21,249
changed the build line now it's going to

00:32:18,039 --> 00:32:24,159
say dot docker slash web everything else

00:32:21,249 --> 00:32:27,099
in this file is exactly the same as it

00:32:24,159 --> 00:32:29,349
was before and this is one thing that's

00:32:27,099 --> 00:32:30,820
nifty about extending docker images is

00:32:29,349 --> 00:32:33,460
it works like object-oriented

00:32:30,820 --> 00:32:36,039
programming you find the container the

00:32:33,460 --> 00:32:38,200
server that you want to modify and then

00:32:36,039 --> 00:32:40,150
you just add to it

00:32:38,200 --> 00:32:41,950
and that's it you don't have to add a

00:32:40,150 --> 00:32:43,420
whole bunch of container configuration

00:32:41,950 --> 00:32:46,030
on top of you you don't have to recreate

00:32:43,420 --> 00:32:49,890
the entire world you just add what you

00:32:46,030 --> 00:32:52,750
need and you're good to go all right

00:32:49,890 --> 00:32:55,600
when we actually add docker compare

00:32:52,750 --> 00:32:58,030
files to our container set we do have to

00:32:55,600 --> 00:33:00,430
do a build we have to build we have to

00:32:58,030 --> 00:33:02,620
simulate what hub does we have to build

00:33:00,430 --> 00:33:04,840
those images into containers before we

00:33:02,620 --> 00:33:07,840
can use them so we have a docker compose

00:33:04,840 --> 00:33:10,030
build command and then we typically can

00:33:07,840 --> 00:33:12,580
specify the service name to build like

00:33:10,030 --> 00:33:15,640
our web container but if we specify none

00:33:12,580 --> 00:33:18,220
compose will actually go through find

00:33:15,640 --> 00:33:20,290
all of the image and all of the surfaces

00:33:18,220 --> 00:33:24,640
that actually use build and not image

00:33:20,290 --> 00:33:29,980
and builds them for us and you need to

00:33:24,640 --> 00:33:32,380
do this before running up alright so we

00:33:29,980 --> 00:33:34,270
have a database container that's running

00:33:32,380 --> 00:33:36,390
and working configured with a username

00:33:34,270 --> 00:33:39,130
and password we have we need we have

00:33:36,390 --> 00:33:41,920
Apache which is now running all the

00:33:39,130 --> 00:33:45,790
extensions that we need now let's add

00:33:41,920 --> 00:33:47,290
some Caillou till ities we need trush so

00:33:45,790 --> 00:33:49,690
how do we get dress

00:33:47,290 --> 00:33:51,910
there's a container for that so you can

00:33:49,690 --> 00:33:56,500
go to hub docker comm slash are slash

00:33:51,910 --> 00:33:58,090
thrush thrush and now we get that

00:33:56,500 --> 00:34:01,030
container into our container set but

00:33:58,090 --> 00:34:03,160
wait how do I use my files drush needs a

00:34:01,030 --> 00:34:06,670
content connection to the database and

00:34:03,160 --> 00:34:08,800
it needs a connection to Apache but each

00:34:06,670 --> 00:34:11,260
one of these services is his own unique

00:34:08,800 --> 00:34:14,830
server right so how do I get those files

00:34:11,260 --> 00:34:17,530
on there well we need to start by

00:34:14,830 --> 00:34:19,360
reusing a volume now sure we could copy

00:34:17,530 --> 00:34:22,300
and paste the volume section from our

00:34:19,360 --> 00:34:24,130
web web container over to our drush

00:34:22,300 --> 00:34:26,250
container in our compose file but what

00:34:24,130 --> 00:34:29,860
if we change that one gets complicated

00:34:26,250 --> 00:34:32,350
no another we could also use a new

00:34:29,860 --> 00:34:35,260
facility in compose version 2 calls

00:34:32,350 --> 00:34:37,360
named volumes that's complicated and a

00:34:35,260 --> 00:34:40,300
little bit more heavy-duty than we need

00:34:37,360 --> 00:34:43,540
so we can actually use another thing

00:34:40,300 --> 00:34:45,700
called volumes from volumes from is

00:34:43,540 --> 00:34:49,930
really great because what it does is it

00:34:45,700 --> 00:34:51,970
says for this particular container use

00:34:49,930 --> 00:34:55,359
all of the volumes that are specified

00:34:51,970 --> 00:34:57,700
on that container and you just pass one

00:34:55,359 --> 00:34:59,650
or more container names and it'll just

00:34:57,700 --> 00:35:01,540
grab those configurations for you no

00:34:59,650 --> 00:35:03,910
matter what they are and amounts them

00:35:01,540 --> 00:35:06,070
exactly as they would be into that

00:35:03,910 --> 00:35:08,740
container so we're going to mount our

00:35:06,070 --> 00:35:14,080
dock root along the same exact path into

00:35:08,740 --> 00:35:15,670
our drush container weary out how when

00:35:14,080 --> 00:35:18,190
we re off our container set though you

00:35:15,670 --> 00:35:20,560
might notice something weird why did the

00:35:18,190 --> 00:35:23,290
dredge container just sup our MySQL

00:35:20,560 --> 00:35:24,630
containers working our Apache containers

00:35:23,290 --> 00:35:29,849
working but the drush container just

00:35:24,630 --> 00:35:31,780
stopped what so here's the thing

00:35:29,849 --> 00:35:33,460
containers actually can take two

00:35:31,780 --> 00:35:36,640
different forms kind of like Linux

00:35:33,460 --> 00:35:38,950
processes containers can either be a

00:35:36,640 --> 00:35:41,320
background persistent process like

00:35:38,950 --> 00:35:44,320
Apache like MySQL but there's also

00:35:41,320 --> 00:35:47,109
several task specific containers you run

00:35:44,320 --> 00:35:49,270
up once and it stops and that's what

00:35:47,109 --> 00:35:52,090
that drush container is it's set up as a

00:35:49,270 --> 00:35:54,820
task specific container it executes the

00:35:52,090 --> 00:35:58,240
drush command and then it quits so you

00:35:54,820 --> 00:36:00,010
have to run it interactively so how do

00:35:58,240 --> 00:36:02,920
we run this drush container that we

00:36:00,010 --> 00:36:06,070
added to our compose file well what we

00:36:02,920 --> 00:36:08,349
do is we do a docker and compose run we

00:36:06,070 --> 00:36:10,359
specify the container name and our

00:36:08,349 --> 00:36:12,609
compose file which is just drush and

00:36:10,359 --> 00:36:15,760
then we specify the rest of the drush

00:36:12,609 --> 00:36:17,380
command now this does have the

00:36:15,760 --> 00:36:19,390
consequence of creating a new container

00:36:17,380 --> 00:36:22,410
instance each time but those are only a

00:36:19,390 --> 00:36:22,410
few bytes in size

00:36:22,530 --> 00:36:28,540
so remember container is just a process

00:36:25,450 --> 00:36:31,390
and it stays up just as long as that

00:36:28,540 --> 00:36:34,450
process does so if that drush command

00:36:31,390 --> 00:36:37,930
does its work and then stops so does the

00:36:34,450 --> 00:36:40,930
container so let's say we want to do a

00:36:37,930 --> 00:36:44,609
draw Sai using our drush container so we

00:36:40,930 --> 00:36:47,800
do docker compose run container name

00:36:44,609 --> 00:36:50,109
drush command and then we pass it all

00:36:47,800 --> 00:36:53,790
the different parameters and then boom

00:36:50,109 --> 00:36:59,530
we get Drupal installed in our container

00:36:53,790 --> 00:37:01,859
awesome alright I've got a large what's

00:36:59,530 --> 00:37:01,859
a large

00:37:02,470 --> 00:37:09,890
mine was a little off that time I do

00:37:06,860 --> 00:37:11,960
also have some 10-7 stickers and also

00:37:09,890 --> 00:37:14,420
these lovely iron-on patches that you

00:37:11,960 --> 00:37:17,750
can also get right up here on the swag

00:37:14,420 --> 00:37:19,700
table so let's say you have an existing

00:37:17,750 --> 00:37:21,830
site not a new site we have an existing

00:37:19,700 --> 00:37:24,860
site that we want to put onto docker

00:37:21,830 --> 00:37:27,320
what do we do first of all you want to

00:37:24,860 --> 00:37:30,050
avoid database dumps I hate database

00:37:27,320 --> 00:37:32,330
dumps because data being a really please

00:37:30,050 --> 00:37:36,890
do yourself a favor don't use them

00:37:32,330 --> 00:37:38,960
because DV dumps are like tribbles sure

00:37:36,890 --> 00:37:40,790
you get one database dump and it's only

00:37:38,960 --> 00:37:43,100
a few megabytes so it's not a problem

00:37:40,790 --> 00:37:45,440
but pretty soon that one database dump

00:37:43,100 --> 00:37:47,330
is now five different database dumps

00:37:45,440 --> 00:37:50,120
they're all in your get repository and

00:37:47,330 --> 00:37:53,900
now your get repository is two gigabytes

00:37:50,120 --> 00:37:56,660
in size DV dumps are like triples

00:37:53,900 --> 00:38:01,420
they're small but they quickly become a

00:37:56,660 --> 00:38:03,380
very very big problem don't use them

00:38:01,420 --> 00:38:05,270
instead what you might want to do

00:38:03,380 --> 00:38:07,100
instead is you want to put some content

00:38:05,270 --> 00:38:09,320
in your code you want to curl work with

00:38:07,100 --> 00:38:11,930
your client to create representative

00:38:09,320 --> 00:38:14,930
content and then use something like UUID

00:38:11,930 --> 00:38:17,840
features in order to put that into code

00:38:14,930 --> 00:38:20,060
in your repository that way that site

00:38:17,840 --> 00:38:22,610
can always be reinitialized without a

00:38:20,060 --> 00:38:24,800
database to create new content that is

00:38:22,610 --> 00:38:30,740
useful for testing with such you know

00:38:24,800 --> 00:38:33,350
with things like b-hat but not everyone

00:38:30,740 --> 00:38:35,930
can do that okay fine I have a database

00:38:33,350 --> 00:38:37,130
Tom what are you gonna do alright

00:38:35,930 --> 00:38:39,380
there's a few different ways that you

00:38:37,130 --> 00:38:41,930
can get an existing database into a

00:38:39,380 --> 00:38:43,880
container you can use on your client on

00:38:41,930 --> 00:38:46,280
your host to load it we've shown that

00:38:43,880 --> 00:38:48,350
earlier already and this is great for

00:38:46,280 --> 00:38:51,980
smaller databases if your database dump

00:38:48,350 --> 00:38:55,730
is somewhere between 1 and 50 megabytes

00:38:51,980 --> 00:38:58,040
you're generally okay and it looks like

00:38:55,730 --> 00:39:01,070
this you can do a docker compose exact

00:38:58,040 --> 00:39:02,720
you run the MySQL command inside the

00:39:01,070 --> 00:39:05,120
container past your username your

00:39:02,720 --> 00:39:10,280
password the database name and the path

00:39:05,120 --> 00:39:12,490
to the database dump it's just like you

00:39:10,280 --> 00:39:14,530
would run MySQL on your host system

00:39:12,490 --> 00:39:18,730
except it's got docker compose in front

00:39:14,530 --> 00:39:21,220
of it but let's say you've got a multi

00:39:18,730 --> 00:39:24,550
gigabyte db1 project that I'm working on

00:39:21,220 --> 00:39:28,450
has a seven gigabyte database that you

00:39:24,550 --> 00:39:30,520
have to load every time you want to be

00:39:28,450 --> 00:39:32,350
very careful with these well you want to

00:39:30,520 --> 00:39:33,550
do first of all and kriyas do a lot of

00:39:32,350 --> 00:39:35,380
things you would normally do for a

00:39:33,550 --> 00:39:37,210
production MySQL instance you want to

00:39:35,380 --> 00:39:40,090
increase max allowed packet so that you

00:39:37,210 --> 00:39:42,040
can get that have that dumped into the

00:39:40,090 --> 00:39:44,590
system without it dying on you getting

00:39:42,040 --> 00:39:48,400
that horrible the MySQL server has gone

00:39:44,590 --> 00:39:51,100
away error but another alternative is

00:39:48,400 --> 00:39:53,590
actually import the database dump from

00:39:51,100 --> 00:39:56,740
inside the container now I'm not going

00:39:53,590 --> 00:39:58,660
to go into how this works in detail but

00:39:56,740 --> 00:40:01,270
generally what you do is you create a

00:39:58,660 --> 00:40:03,310
volume usually you create like a DB

00:40:01,270 --> 00:40:05,170
dumps directory in your project you put

00:40:03,310 --> 00:40:07,720
your database dump and there you get

00:40:05,170 --> 00:40:10,630
ignore the database dump please for the

00:40:07,720 --> 00:40:13,630
love of universe then after you do that

00:40:10,630 --> 00:40:15,970
you go into your compose file go on to

00:40:13,630 --> 00:40:18,220
your database service you add a volume

00:40:15,970 --> 00:40:20,800
to mount that into the database

00:40:18,220 --> 00:40:24,790
container and then after that you can

00:40:20,800 --> 00:40:26,530
use the docker exec command with bash to

00:40:24,790 --> 00:40:28,119
get an interactive session and then

00:40:26,530 --> 00:40:30,730
after that you can just load the

00:40:28,119 --> 00:40:35,580
database as if you were on a MySQL

00:40:30,730 --> 00:40:38,410
server instance what about cleaning up

00:40:35,580 --> 00:40:40,030
we have our project done it's pushed

00:40:38,410 --> 00:40:42,420
it's out into out into the world

00:40:40,030 --> 00:40:45,369
everything's great how do we clean up

00:40:42,420 --> 00:40:47,590
well you can delete your container set

00:40:45,369 --> 00:40:49,810
by using the docker compose kill and

00:40:47,590 --> 00:40:51,940
then the docker compose remove commands

00:40:49,810 --> 00:40:53,500
and that will delete stop all the

00:40:51,940 --> 00:40:56,080
containers and then also delete them

00:40:53,500 --> 00:40:58,300
from your system but one thing that I

00:40:56,080 --> 00:41:02,530
actually discovered only a few a few

00:40:58,300 --> 00:41:05,410
months ago is that we I do deleted all

00:41:02,530 --> 00:41:09,730
my containers but why is my disk still

00:41:05,410 --> 00:41:11,800
full well volumes are not deleted by

00:41:09,730 --> 00:41:14,470
default and docker you have to

00:41:11,800 --> 00:41:16,810
explicitly delete them that's actually

00:41:14,470 --> 00:41:18,760
meant as a data saving feature to

00:41:16,810 --> 00:41:21,400
prevent you from completely deleting all

00:41:18,760 --> 00:41:23,290
your production data so what you want to

00:41:21,400 --> 00:41:25,780
do is you have to explicitly delete them

00:41:23,290 --> 00:41:26,440
how do you do that you specify docker

00:41:25,780 --> 00:41:29,560
compose

00:41:26,440 --> 00:41:32,710
remove - V when deleting the container

00:41:29,560 --> 00:41:39,670
sat - V means yes delete the volumes

00:41:32,710 --> 00:41:41,349
also alright is there anything else well

00:41:39,670 --> 00:41:43,359
we also have all those images that we

00:41:41,349 --> 00:41:45,819
downloaded from docker hub there's tons

00:41:43,359 --> 00:41:48,010
of them there the snapshot of container

00:41:45,819 --> 00:41:50,440
that we downloaded from docker hub or

00:41:48,010 --> 00:41:54,730
any images that we created using docker

00:41:50,440 --> 00:41:57,280
build or docker compose felt so what do

00:41:54,730 --> 00:41:59,440
we do we can list those images using the

00:41:57,280 --> 00:42:01,930
docker images command and we can

00:41:59,440 --> 00:42:05,500
actually see how big each one of these

00:42:01,930 --> 00:42:07,630
are when we do that docker images

00:42:05,500 --> 00:42:09,970
command it actually gives us the size of

00:42:07,630 --> 00:42:12,010
those particular service you'll notice

00:42:09,970 --> 00:42:18,099
this is a lot smaller than the average

00:42:12,010 --> 00:42:21,130
vagrant box alright how do we delete

00:42:18,099 --> 00:42:25,510
images well we can do a docker remove I

00:42:21,130 --> 00:42:27,700
read RM I remove image and then we can

00:42:25,510 --> 00:42:30,220
pass it all of the images in a list

00:42:27,700 --> 00:42:35,910
using docker images

00:42:30,220 --> 00:42:38,500
- q4 just limit a list the image IDs

00:42:35,910 --> 00:42:40,690
let's say we need to just clean

00:42:38,500 --> 00:42:42,520
everything out of our system we want to

00:42:40,690 --> 00:42:44,859
delete all of the containers all of the

00:42:42,520 --> 00:42:47,140
images all of the volumes everything how

00:42:44,859 --> 00:42:48,790
do we nuke it from orbit well we use

00:42:47,140 --> 00:42:51,069
these three lines we kill all the

00:42:48,790 --> 00:42:52,960
containers passing it a sub command

00:42:51,069 --> 00:42:56,079
which will list all the containers for

00:42:52,960 --> 00:42:59,140
us we remove all the containers listener

00:42:56,079 --> 00:43:01,300
and their volumes listing all of the

00:42:59,140 --> 00:43:03,609
containers running or not that's what -

00:43:01,300 --> 00:43:08,349
a means and then we remove all their

00:43:03,609 --> 00:43:11,500
images if you're running on Mac OS or

00:43:08,349 --> 00:43:13,390
Windows there's a lot easier way you can

00:43:11,500 --> 00:43:15,250
actually go ahead go into the docker

00:43:13,390 --> 00:43:16,900
preferences and you can go to reset the

00:43:15,250 --> 00:43:19,089
factory defaults this will wipe

00:43:16,900 --> 00:43:21,790
everything off of your system and

00:43:19,089 --> 00:43:24,190
provide you with a clean back to factory

00:43:21,790 --> 00:43:26,740
state this is one of the nicest features

00:43:24,190 --> 00:43:28,569
of docker for mac and Windows the

00:43:26,740 --> 00:43:33,099
ability to wipe everything out with just

00:43:28,569 --> 00:43:34,580
a few button clicks where do we go from

00:43:33,099 --> 00:43:37,410
here

00:43:34,580 --> 00:43:39,780
well so far we just have that single

00:43:37,410 --> 00:43:42,390
task-specific drush container we might

00:43:39,780 --> 00:43:43,920
want to make a better COI container one

00:43:42,390 --> 00:43:45,840
that's always running so that we don't

00:43:43,920 --> 00:43:48,900
need to create a new container instance

00:43:45,840 --> 00:43:51,630
every time one that has other utilities

00:43:48,900 --> 00:43:55,470
in it like Drupal console SAS grunt and

00:43:51,630 --> 00:43:57,480
so forth and we want to be able to task

00:43:55,470 --> 00:43:58,920
into that run in container so we don't

00:43:57,480 --> 00:44:03,360
have to go through the creation phase

00:43:58,920 --> 00:44:05,580
each time there's lots of different ways

00:44:03,360 --> 00:44:07,710
that we can do that we could do it

00:44:05,580 --> 00:44:09,600
ourselves first of all of course you can

00:44:07,710 --> 00:44:12,210
read the documentation at any time at

00:44:09,600 --> 00:44:14,820
docs docker comm this was recently open

00:44:12,210 --> 00:44:18,810
source so anyone can contribute to it on

00:44:14,820 --> 00:44:20,790
github you can also read my blog post

00:44:18,810 --> 00:44:23,580
series which is a lot more building from

00:44:20,790 --> 00:44:25,080
the ground up bottom-up versus top-down

00:44:23,580 --> 00:44:27,960
which is what this presentation is about

00:44:25,080 --> 00:44:30,360
on my web site docker den annette

00:44:27,960 --> 00:44:35,550
dot-com slash tagged slash docker -

00:44:30,360 --> 00:44:37,350
scratch you can also use other pre-made

00:44:35,550 --> 00:44:40,020
containers out there there's lots of

00:44:37,350 --> 00:44:44,030
them to choose from find one that works

00:44:40,020 --> 00:44:46,110
that fits your style and your project I

00:44:44,030 --> 00:44:48,300
recently released also two different

00:44:46,110 --> 00:44:50,310
bare-bones Drupal containers called

00:44:48,300 --> 00:44:52,140
Drupal base and Drupal CLI these are

00:44:50,310 --> 00:44:55,980
links there's a link to the presentation

00:44:52,140 --> 00:44:59,550
at the end of the talk and you can find

00:44:55,980 --> 00:45:03,240
these on docker hub you can also fork it

00:44:59,550 --> 00:45:04,920
on github and deal with your own you

00:45:03,240 --> 00:45:06,990
might also want to do some Drupal 8

00:45:04,920 --> 00:45:09,780
module development well I have a project

00:45:06,990 --> 00:45:11,190
called drop whale which is just a drop

00:45:09,780 --> 00:45:13,080
in Drupal 8 module development

00:45:11,190 --> 00:45:15,240
environment so you just have your module

00:45:13,080 --> 00:45:19,380
project you don't need to download and

00:45:15,240 --> 00:45:22,110
install Drupal it does it all for you it

00:45:19,380 --> 00:45:23,670
pulls installs Drupal dev internally and

00:45:22,110 --> 00:45:25,860
gives you everything that you need to

00:45:23,670 --> 00:45:29,670
get going you can find it on github.com

00:45:25,860 --> 00:45:31,440
slash socket life slash drop whale if

00:45:29,670 --> 00:45:33,570
you want to run a production site or if

00:45:31,440 --> 00:45:35,070
you want to do other client work you can

00:45:33,570 --> 00:45:37,560
also look at the docker for Drupal

00:45:35,070 --> 00:45:39,480
project this is a relatively new one but

00:45:37,560 --> 00:45:41,820
it's full-featured it's got Redis it's

00:45:39,480 --> 00:45:44,130
got memcache and Scott Soller it's like

00:45:41,820 --> 00:45:45,840
a buffet table it provides you a number

00:45:44,130 --> 00:45:46,540
of different containers to choose from

00:45:45,840 --> 00:45:47,860
and then

00:45:46,540 --> 00:45:49,900
put them together with a new

00:45:47,860 --> 00:45:53,170
configuration documentation that they

00:45:49,900 --> 00:45:55,990
provide can find that on docker for

00:45:53,170 --> 00:45:58,300
drupal.org and you can always build your

00:45:55,990 --> 00:46:00,190
own all of these docker know all of

00:45:58,300 --> 00:46:02,950
these configuration files are just text

00:46:00,190 --> 00:46:05,980
files they're not large you don't need

00:46:02,950 --> 00:46:07,630
to store a huge ISO or a huge volume

00:46:05,980 --> 00:46:11,620
dump somewhere unless you have a

00:46:07,630 --> 00:46:13,780
database then that's your problem it's

00:46:11,620 --> 00:46:15,610
good to make per project ones there's

00:46:13,780 --> 00:46:17,410
nothing wrong with making a per project

00:46:15,610 --> 00:46:18,880
container set you'll be able to

00:46:17,410 --> 00:46:21,370
customize it so that it's always

00:46:18,880 --> 00:46:23,470
repeatable so that your instructions to

00:46:21,370 --> 00:46:25,360
anyone that goes onto the project is do

00:46:23,470 --> 00:46:27,430
you have docker installed good

00:46:25,360 --> 00:46:29,740
okay docker compose up in the project

00:46:27,430 --> 00:46:32,080
directory you're good to go cuz it does

00:46:29,740 --> 00:46:36,820
it all for you and that's what that's

00:46:32,080 --> 00:46:38,620
what docker is therefore also if you

00:46:36,820 --> 00:46:39,880
come up with a container which is really

00:46:38,620 --> 00:46:41,290
useful that you want to share with

00:46:39,880 --> 00:46:43,480
everyone in the entire world

00:46:41,290 --> 00:46:47,290
you can contribute it back to docker hub

00:46:43,480 --> 00:46:48,850
it's free anyone can do it hub does all

00:46:47,290 --> 00:46:51,640
the building of your container so you

00:46:48,850 --> 00:46:56,980
don't have to do that docker - compose

00:46:51,640 --> 00:46:58,900
build step yourself I want to give a few

00:46:56,980 --> 00:47:01,120
special thanks here for the Drupal

00:46:58,900 --> 00:47:04,570
Association for letting me be here after

00:47:01,120 --> 00:47:06,280
I was laid off a few weeks ago 10:7 for

00:47:04,570 --> 00:47:07,890
providing me for some freelance snow

00:47:06,280 --> 00:47:10,330
work while I don't know for the interim

00:47:07,890 --> 00:47:13,360
also Mark Drummond Paul Mitchum who are

00:47:10,330 --> 00:47:15,640
my guinea pigs and encouragers on the

00:47:13,360 --> 00:47:17,620
whole my docker journey and a whole

00:47:15,640 --> 00:47:19,810
bunch of other people for why I'm here

00:47:17,620 --> 00:47:23,850
today thank you you can find this

00:47:19,810 --> 00:47:23,850
presentation on github dot

00:47:27,819 --> 00:47:34,520
good walks away you want one and I think

00:47:32,539 --> 00:47:35,930
I gave away my last shirt so remember

00:47:34,520 --> 00:47:37,880
there are patches and they're stickers

00:47:35,930 --> 00:47:40,190
up here please don't make me take them

00:47:37,880 --> 00:47:44,569
back to the huh to my freelancing boss

00:47:40,190 --> 00:47:46,490
and shame the patches are really nice by

00:47:44,569 --> 00:47:48,950
the way they're really really nice

00:47:46,490 --> 00:47:51,619
they're iron-on they're so on you can

00:47:48,950 --> 00:48:03,650
safety pin them on because I'm like that

00:47:51,619 --> 00:48:05,150
are there any questions question so

00:48:03,650 --> 00:48:07,099
typically what happens when you have

00:48:05,150 --> 00:48:09,680
multiple projects is that you're going

00:48:07,099 --> 00:48:11,750
to have an unique container set in each

00:48:09,680 --> 00:48:13,880
project directory that's stored in the

00:48:11,750 --> 00:48:15,530
repo so what happens in wouldn't you

00:48:13,880 --> 00:48:17,329
need to switch from working on one

00:48:15,530 --> 00:48:19,430
project to another is that you do a

00:48:17,329 --> 00:48:21,619
docker compose kill and then you go to

00:48:19,430 --> 00:48:24,049
the next directory docker compose up -

00:48:21,619 --> 00:48:26,750
deed and you're in and that's it that's

00:48:24,049 --> 00:48:29,329
all you have to do and the idea is that

00:48:26,750 --> 00:48:31,819
you actually want to shut down and start

00:48:29,329 --> 00:48:34,400
it up unlike vagrant starting out up a

00:48:31,819 --> 00:48:36,920
new container is really cheap on the

00:48:34,400 --> 00:48:39,440
order of seconds no matter what the

00:48:36,920 --> 00:48:41,359
container size is that multi-gigabyte

00:48:39,440 --> 00:48:43,930
database container starting up that

00:48:41,359 --> 00:48:46,910
database container takes seven seconds

00:48:43,930 --> 00:48:49,400
that's it it's really cheap to switch

00:48:46,910 --> 00:48:51,890
between multiple projects so you get

00:48:49,400 --> 00:48:55,369
used to that flow you don't need to get

00:48:51,890 --> 00:48:57,890
a proxy server and then route on port 80

00:48:55,369 --> 00:48:59,299
between 15 different vagrant boxes you

00:48:57,890 --> 00:49:01,730
don't need to do any of that madness

00:48:59,299 --> 00:49:03,559
anymore you can just shut down one

00:49:01,730 --> 00:49:05,779
project and start up the next one

00:49:03,559 --> 00:49:09,410
because you're putting all your data in

00:49:05,779 --> 00:49:11,390
volumes you don't actually have to worry

00:49:09,410 --> 00:49:14,119
about reinitializing the database each

00:49:11,390 --> 00:49:18,460
time those are persisted for you as long

00:49:14,119 --> 00:49:18,460
as that container is not deleted

00:49:18,609 --> 00:49:21,609
question

00:49:25,360 --> 00:49:29,960
that is a really complicated topic so

00:49:28,490 --> 00:49:32,180
the question basically is how do you

00:49:29,960 --> 00:49:34,670
switch from between the production

00:49:32,180 --> 00:49:37,160
version and the development version of a

00:49:34,670 --> 00:49:39,080
project da current production is a

00:49:37,160 --> 00:49:41,900
contentious topic is the first thing I

00:49:39,080 --> 00:49:43,730
have to tell people because typically

00:49:41,900 --> 00:49:46,520
there's going there's going to be a lot

00:49:43,730 --> 00:49:48,590
of differences in what its security

00:49:46,520 --> 00:49:50,210
model is there's still a big concern

00:49:48,590 --> 00:49:52,160
that you have to run docker as route

00:49:50,210 --> 00:49:54,350
right now which is still a problem

00:49:52,160 --> 00:49:56,450
they're working on that that's supposed

00:49:54,350 --> 00:49:58,550
to be fixed in an upcoming version but

00:49:56,450 --> 00:50:01,670
there are still a lot of reasons why

00:49:58,550 --> 00:50:03,590
people don't run it in production but

00:50:01,670 --> 00:50:05,660
you can use a different compose file

00:50:03,590 --> 00:50:07,130
name you can actually specifies that

00:50:05,660 --> 00:50:09,470
kind of a compose file name and the

00:50:07,130 --> 00:50:12,500
compose commands and use an alternate

00:50:09,470 --> 00:50:14,660
one you can specify a dinner you can use

00:50:12,500 --> 00:50:15,920
a hyperlink during a CA you can use a

00:50:14,660 --> 00:50:18,800
symlink

00:50:15,920 --> 00:50:21,080
during a CI process to switch from one

00:50:18,800 --> 00:50:24,110
composed file to the next composed file

00:50:21,080 --> 00:50:24,970
depending on environment variables so

00:50:24,110 --> 00:50:28,220
you can have two different

00:50:24,970 --> 00:50:31,430
configurations there's also a lot of

00:50:28,220 --> 00:50:33,470
different utilities for production for a

00:50:31,430 --> 00:50:37,160
docker such as docker swarm which is now

00:50:33,470 --> 00:50:39,830
baked in in 1.12 which will include that

00:50:37,160 --> 00:50:42,260
includes a load balancer and the ability

00:50:39,830 --> 00:50:45,740
to work with multiple separate hosts

00:50:42,260 --> 00:50:49,340
that that can work in tandem to work to

00:50:45,740 --> 00:50:52,300
manage docker containers the jetlag is

00:50:49,340 --> 00:50:52,300
really getting to me right now

00:51:03,100 --> 00:51:09,800
laziness the question basically was why

00:51:07,400 --> 00:51:11,960
uh is there any advantage to running

00:51:09,800 --> 00:51:15,290
drush as a separate container versus in

00:51:11,960 --> 00:51:19,010
in your base in a CLI container the

00:51:15,290 --> 00:51:21,650
answer is basically laziness if you have

00:51:19,010 --> 00:51:23,660
a lot of different tools in your CLI

00:51:21,650 --> 00:51:25,430
container managing those and building

00:51:23,660 --> 00:51:27,800
them into the container can be a bit

00:51:25,430 --> 00:51:30,200
annoying after a while because you have

00:51:27,800 --> 00:51:33,110
to build that container locally unless

00:51:30,200 --> 00:51:33,830
if you compose contribute it back to

00:51:33,110 --> 00:51:38,270
docker ha

00:51:33,830 --> 00:51:41,120
so that is a problem but typically it's

00:51:38,270 --> 00:51:42,860
usually just laziness because it

00:51:41,120 --> 00:51:44,750
requires a lot of time to make the

00:51:42,860 --> 00:51:50,110
composed file and make the docker file

00:51:44,750 --> 00:51:50,110
and find the commands and so on question

00:51:59,260 --> 00:52:03,860
so that here's the thing I actually

00:52:02,090 --> 00:52:06,410
don't use anything special like that

00:52:03,860 --> 00:52:08,500
anymore because with most recent

00:52:06,410 --> 00:52:11,930
versions of docker it doesn't matter

00:52:08,500 --> 00:52:14,210
instead what I usually do is I have a

00:52:11,930 --> 00:52:16,820
volumes directory and the volumes

00:52:14,210 --> 00:52:19,810
directory is live mounted no matter what

00:52:16,820 --> 00:52:22,820
the underlying docker volume driver is

00:52:19,810 --> 00:52:24,590
so as long as you have that volume

00:52:22,820 --> 00:52:26,720
mounted if you make a change in a file

00:52:24,590 --> 00:52:29,150
and the containers still running it will

00:52:26,720 --> 00:52:31,570
be reflected in that container in a few

00:52:29,150 --> 00:52:31,570
seconds

00:52:35,620 --> 00:52:44,240
VirtualBox had problems with it with

00:52:38,210 --> 00:52:47,030
that yeah the older VirtualBox base ones

00:52:44,240 --> 00:52:48,620
had problems with that there are a lot

00:52:47,030 --> 00:52:50,630
of hacks and working around to get

00:52:48,620 --> 00:52:53,240
better performance there but in most

00:52:50,630 --> 00:52:58,750
recent versions of docker you don't need

00:52:53,240 --> 00:52:58,750
to worry about that so much question

00:53:07,069 --> 00:53:12,299
so I don't know so the question is about

00:53:09,630 --> 00:53:14,609
docker swarm and what do you do with

00:53:12,299 --> 00:53:17,750
volumes and the answer is I don't know

00:53:14,609 --> 00:53:20,730
I'd have to research that myself

00:53:17,750 --> 00:53:31,170
question I I need to get to the side of

00:53:20,730 --> 00:53:35,450
the road soon so the question is about

00:53:31,170 --> 00:53:38,490
kubernetes and versus docker swarm I

00:53:35,450 --> 00:53:41,579
mean that's really a decision as to

00:53:38,490 --> 00:53:43,829
which you want because Dockers been so

00:53:41,579 --> 00:53:46,859
popular a lot of these tools are no

00:53:43,829 --> 00:53:49,890
tools are baking in docker as an

00:53:46,859 --> 00:53:52,349
underlying target so it just depends on

00:53:49,890 --> 00:54:27,599
what you like and what you used to ok so

00:53:52,349 --> 00:54:29,730
any question you have a question so the

00:54:27,599 --> 00:54:32,849
question is about stability versus the

00:54:29,730 --> 00:54:36,000
older versions of docker that use docker

00:54:32,849 --> 00:54:39,539
machine the VirtualBox based docker and

00:54:36,000 --> 00:54:44,549
also the newer one 1.1 to a newer which

00:54:39,539 --> 00:54:46,770
has the embedded hypervisor I've had a

00:54:44,549 --> 00:54:49,890
few issues with stability on the newer

00:54:46,770 --> 00:54:52,410
versions mostly entire container sets

00:54:49,890 --> 00:54:54,619
just stopping when I've been asked you

00:54:52,410 --> 00:54:58,020
know when I asked them to do too much

00:54:54,619 --> 00:54:59,609
that's primarily a virtue a VM tuning

00:54:58,020 --> 00:55:02,339
issue and the problem is because it's

00:54:59,609 --> 00:55:05,730
embedded in 1.12 it's a little bit

00:55:02,339 --> 00:55:07,200
harder to actually tune that the defined

00:55:05,730 --> 00:55:09,750
paths for that are a little bit more

00:55:07,200 --> 00:55:12,710
buried and this is one of the reasons

00:55:09,750 --> 00:55:14,050
why it it's not entirely

00:55:12,710 --> 00:55:16,810
production-ready

00:55:14,050 --> 00:55:19,000
in my opinion because it's not as clear

00:55:16,810 --> 00:55:22,720
of a path and you might have to actually

00:55:19,000 --> 00:55:24,970
work between docker machine and the

00:55:22,720 --> 00:55:27,430
newest embedded versions of docker until

00:55:24,970 --> 00:55:42,280
you know the newer versions can pick up

00:55:27,430 --> 00:55:45,160
and resolve those issues right yeah so

00:55:42,280 --> 00:55:48,310
so even on the newer versions of docker

00:55:45,160 --> 00:55:50,560
there's still an embedded Linux VM and

00:55:48,310 --> 00:55:53,440
there there has been talk about doing a

00:55:50,560 --> 00:55:55,600
whole hunt about doing a native Windows

00:55:53,440 --> 00:55:56,950
or a native uh-huh well not really so

00:55:55,600 --> 00:55:58,750
much with a native Mac because Apple

00:55:56,950 --> 00:56:01,210
doesn't want to do that but a native

00:55:58,750 --> 00:56:02,950
Windows environment side of a docker

00:56:01,210 --> 00:56:05,530
container there's been discussion about

00:56:02,950 --> 00:56:07,420
that but it hasn't actually happened but

00:56:05,530 --> 00:56:13,830
Microsoft is pouring a lot of money into

00:56:07,420 --> 00:56:13,830
talker so it might happen someday yep

00:56:37,110 --> 00:56:42,370
not particularly most of my experiences

00:56:40,360 --> 00:56:44,590
with docker has been just setting up

00:56:42,370 --> 00:56:46,240
development environments and not running

00:56:44,590 --> 00:56:50,310
them in production because I don't think

00:56:46,240 --> 00:56:50,310
that it's entirely ready for that

00:57:11,110 --> 00:57:16,790
okay um I think I'll need to talk to you

00:57:15,020 --> 00:57:19,090
more about that problem because that

00:57:16,790 --> 00:57:23,440
gets into some really complicated topics

00:57:19,090 --> 00:57:23,440
any other questions you had a question

00:57:34,450 --> 00:57:40,580
with xD bug you usually have to use a

00:57:37,340 --> 00:57:43,400
particular configuration that's using

00:57:40,580 --> 00:57:45,740
the connect back option which has been

00:57:43,400 --> 00:57:47,960
considered insecure in general but

00:57:45,740 --> 00:57:49,730
because it exists on just a container

00:57:47,960 --> 00:57:51,770
that's only accessible in your system

00:57:49,730 --> 00:57:55,550
the risk is very low the attack surface

00:57:51,770 --> 00:57:57,800
is not very large so there's a way of

00:57:55,550 --> 00:58:05,090
doing that and I can point you to a file

00:57:57,800 --> 00:58:24,110
that does that anything else okay you

00:58:05,090 --> 00:58:28,220
had one more question so the question is

00:58:24,110 --> 00:58:30,260
how to share your containers in general

00:58:28,220 --> 00:58:32,630
if the containers are very project

00:58:30,260 --> 00:58:34,300
specific I would put all of the the

00:58:32,630 --> 00:58:37,820
composed files in the docker files

00:58:34,300 --> 00:58:40,130
inside of your repository for the

00:58:37,820 --> 00:58:42,770
project and then whenever somebody pulls

00:58:40,130 --> 00:58:44,720
you can just build it from there plus it

00:58:42,770 --> 00:58:46,550
maintains the life along with the

00:58:44,720 --> 00:58:49,250
project itself so you don't need to do a

00:58:46,550 --> 00:58:52,580
lot of meat a lot of you know syncing up

00:58:49,250 --> 00:58:54,260
externally if you think that it's

00:58:52,580 --> 00:58:59,690
shareable you can upload it to docker

00:58:54,260 --> 00:59:01,930
hub instead okay all right thanks

00:58:59,690 --> 00:59:01,930

YouTube URL: https://www.youtube.com/watch?v=DevIohAnkDI


