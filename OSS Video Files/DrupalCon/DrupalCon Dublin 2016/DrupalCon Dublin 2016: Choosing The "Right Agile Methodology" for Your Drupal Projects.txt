Title: DrupalCon Dublin 2016: Choosing The "Right Agile Methodology" for Your Drupal Projects
Publication date: 2016-09-27
Playlist: DrupalCon Dublin 2016
Description: 
	If Agile is an umbrella of methodologies, which one should you pick? The Agile Manifesto says that: individuals and interactions come before processes and tools, working software over comprehensive documentation, customer collaboration over contract negotiation, and responding to change over following a plan.

But while every Agile methodology follows iterative and incremental delivery, the execution processes and artifacts produced are very different.



What You’ll Learn

This session will explore and compare different Agile methodologies and share tips on how to choose the right one so you can accelerate your Drupal project. In the process, we will also discuss effective use of CYNEFIN (a popular decision making framework) to differentiate between Drupal projects and picking right agile methodologies for the same. Each insight will be backed by clear, real world examples from our projects. We’ll cover:



Scrum

Extreme Programming

Feature Driven Development

Scrumban

Kanban

Lean Development


You’ll walk away with

A clearer idea of which methodology is right for each project, with project size, team size, iteration length, roles and responsibilities, distributed team support, risk mitigation level, customer interaction, taken into consideration.
Captions: 
	00:00:01,129 --> 00:00:07,049
we are here for this presentation

00:00:04,200 --> 00:00:08,820
choosing the right as I'll mythology for

00:00:07,049 --> 00:00:12,630
your Drupal project my name is prabhav

00:00:08,820 --> 00:00:16,980
Cena and I'm in here along with my

00:00:12,630 --> 00:00:21,380
colleague o Shannon vampy so next Slayer

00:00:16,980 --> 00:00:21,380
has a simple introduction about this us

00:00:21,710 --> 00:00:26,070
he's been working in their projects and

00:00:24,449 --> 00:00:29,099
products and projects for the past eight

00:00:26,070 --> 00:00:31,769
years in his free time he can be found

00:00:29,099 --> 00:00:34,230
jogging and they're just socializing at

00:00:31,769 --> 00:00:36,149
the local parks he lives in India in New

00:00:34,230 --> 00:00:38,579
Guinea with his wife and two kids yeah

00:00:36,149 --> 00:00:42,000
and sandy has been managing product and

00:00:38,579 --> 00:00:45,239
posit delivery since 1999 long while ago

00:00:42,000 --> 00:00:48,930
and after work you can find her on quote

00:00:45,239 --> 00:00:51,719
shooting hoops with a local net Poly San

00:00:48,930 --> 00:00:54,449
he lives in a suburban Syrian file with

00:00:51,719 --> 00:00:56,070
her husband and four children and it is

00:00:54,449 --> 00:00:58,890
good thing that sandy has practiced a

00:00:56,070 --> 00:01:03,539
scrum Kanban sqm man she has been

00:00:58,890 --> 00:01:06,060
practicing since last 34 years so she be

00:01:03,539 --> 00:01:09,420
able to get more focus on all

00:01:06,060 --> 00:01:11,939
methodologies so here is the simplest

00:01:09,420 --> 00:01:14,070
end of this presentation we will run you

00:01:11,939 --> 00:01:16,860
through what is as I'll a simple intro

00:01:14,070 --> 00:01:19,290
because we know all of you know about as

00:01:16,860 --> 00:01:21,750
I'll then we will run through si el

00:01:19,290 --> 00:01:25,650
frameworks a scrum Kanban scramble I

00:01:21,750 --> 00:01:29,070
think this three are widely used as I'll

00:01:25,650 --> 00:01:31,049
frameworks and then we will also discuss

00:01:29,070 --> 00:01:33,570
about extreme programming lean and

00:01:31,049 --> 00:01:36,780
feature trip and development and we'll

00:01:33,570 --> 00:01:39,960
see how we can also use this for Drupal

00:01:36,780 --> 00:01:43,140
posits after that we will do a simple

00:01:39,960 --> 00:01:45,479
comparison of all the frameworks which

00:01:43,140 --> 00:01:48,899
we have included here and last one would

00:01:45,479 --> 00:01:53,750
be the cinnamon or framework of a

00:01:48,899 --> 00:01:57,540
popular decision making framework so

00:01:53,750 --> 00:02:00,600
first what is s I'll so as you all know

00:01:57,540 --> 00:02:03,689
that is I'll brings more flexibility it

00:02:00,600 --> 00:02:05,460
gives wettest to interval individuals

00:02:03,689 --> 00:02:07,439
and interactions over processes and

00:02:05,460 --> 00:02:10,170
tools working software over

00:02:07,439 --> 00:02:11,580
comprehensive documentation customer

00:02:10,170 --> 00:02:12,830
collaboration over contract negotiation

00:02:11,580 --> 00:02:15,500
and

00:02:12,830 --> 00:02:20,270
receptive to chance responding to change

00:02:15,500 --> 00:02:23,240
as soon as possible so here are the 12

00:02:20,270 --> 00:02:25,970
principles of agile manifesto and it is

00:02:23,240 --> 00:02:30,410
more about flexibility team

00:02:25,970 --> 00:02:32,960
collaboration sustainability MVP is in

00:02:30,410 --> 00:02:34,810
the focus like Minimum Viable Product

00:02:32,960 --> 00:02:39,880
instead of documentation Molly

00:02:34,810 --> 00:02:39,880
simplicity so this is all about it and

00:02:40,090 --> 00:02:45,800
but there's I'll as a methodology Molly

00:02:42,910 --> 00:02:49,220
you can't work with s I'll because it

00:02:45,800 --> 00:02:51,080
doesn't give so there are several s I'll

00:02:49,220 --> 00:02:54,980
project management frameworks which are

00:02:51,080 --> 00:02:57,620
being used in triple ecosystem a scrum

00:02:54,980 --> 00:03:00,470
Kanban scram van or as I say it are

00:02:57,620 --> 00:03:02,600
popularly used frameworks then we have

00:03:00,470 --> 00:03:05,570
extreme programming lean development and

00:03:02,600 --> 00:03:07,459
feature driven development so in next

00:03:05,570 --> 00:03:10,070
few slides we will discuss about all

00:03:07,459 --> 00:03:14,510
these frameworks so it is over to seni

00:03:10,070 --> 00:03:17,630
for scrum thank you thank you prepared

00:03:14,510 --> 00:03:19,370
hi guys and so okay we're not going to

00:03:17,630 --> 00:03:21,230
go into the details of what scrum is

00:03:19,370 --> 00:03:23,840
we're just going to take it from a high

00:03:21,230 --> 00:03:26,330
level beyond assuming that everybody

00:03:23,840 --> 00:03:28,340
knows so the one thing I do like is that

00:03:26,330 --> 00:03:33,500
a scrum the words chrome comes from

00:03:28,340 --> 00:03:36,170
rugby and we most was notice and and I

00:03:33,500 --> 00:03:37,610
this this definition of it I found in

00:03:36,170 --> 00:03:39,590
the oxford english dictionary and

00:03:37,610 --> 00:03:42,260
there's just something that I really

00:03:39,590 --> 00:03:45,170
like about it and an ordered formation

00:03:42,260 --> 00:03:48,590
of players I think really represents the

00:03:45,170 --> 00:03:50,600
cross functioning team and used to

00:03:48,590 --> 00:03:53,780
restart and the scrum is used to restart

00:03:50,600 --> 00:03:56,690
play correlates to the Sprint's that we

00:03:53,780 --> 00:03:59,570
have at each point in which the forwards

00:03:56,690 --> 00:04:01,880
of a team form up with arms interlocked

00:03:59,570 --> 00:04:04,610
and I see this is very much the scrum

00:04:01,880 --> 00:04:07,790
team the p.o and their scrum master

00:04:04,610 --> 00:04:11,299
linking arms going together and then

00:04:07,790 --> 00:04:13,340
going forward heads down representing

00:04:11,299 --> 00:04:15,620
the no distractions that we have in

00:04:13,340 --> 00:04:18,280
scrum there objected to be that the team

00:04:15,620 --> 00:04:21,289
has no distractions and push forward

00:04:18,280 --> 00:04:24,710
scrum doesn't work unless the whole team

00:04:21,289 --> 00:04:26,080
is there is when it's gone I don't have

00:04:24,710 --> 00:04:28,150
to make it go back

00:04:26,080 --> 00:04:29,949
and the holiday it doesn't work scrum if

00:04:28,150 --> 00:04:32,560
the whole team isn't on board and

00:04:29,949 --> 00:04:35,680
focused on going forward in the same

00:04:32,560 --> 00:04:38,439
direction and the part about an opposite

00:04:35,680 --> 00:04:41,229
side doesn't really take effect but but

00:04:38,439 --> 00:04:43,870
that's the definition of scrum scrum in

00:04:41,229 --> 00:04:46,539
a nutshell we have many processes and

00:04:43,870 --> 00:04:48,699
tools that we use to to work through the

00:04:46,539 --> 00:04:51,490
not just the sprint but or the

00:04:48,699 --> 00:04:54,069
preparation for the Sprint's we have the

00:04:51,490 --> 00:04:56,379
sprint planning backlog we finding the

00:04:54,069 --> 00:04:59,560
demo the retrospect saloon and to

00:04:56,379 --> 00:05:01,750
constantly maintain going forward and we

00:04:59,560 --> 00:05:03,669
have the product backlog scrum boards

00:05:01,750 --> 00:05:07,599
different tools that can be can or

00:05:03,669 --> 00:05:11,259
cannot be used it's optional during gay

00:05:07,599 --> 00:05:14,710
during the sprints and the team products

00:05:11,259 --> 00:05:17,169
owner essential part of the team without

00:05:14,710 --> 00:05:20,020
it I do see scrum as being a bit of a

00:05:17,169 --> 00:05:22,990
problem without a product owner a scrum

00:05:20,020 --> 00:05:24,219
master as we know it's fairly debatable

00:05:22,990 --> 00:05:26,500
whether a scrum master is actually

00:05:24,219 --> 00:05:28,469
required during a scrum but the

00:05:26,500 --> 00:05:31,090
objective is to make that person

00:05:28,469 --> 00:05:32,740
irrelevant almost but a scrum master

00:05:31,090 --> 00:05:35,190
especially to start off with and the

00:05:32,740 --> 00:05:38,800
team well-trained specialized

00:05:35,190 --> 00:05:40,389
self-managing communicative ability to

00:05:38,800 --> 00:05:43,060
make decisions common goal and

00:05:40,389 --> 00:05:45,520
self-improving all the things that the

00:05:43,060 --> 00:05:48,430
team need to have again putting together

00:05:45,520 --> 00:05:52,779
that common goal and and achieving it

00:05:48,430 --> 00:05:55,240
and the requirements for a scrum to have

00:05:52,779 --> 00:05:57,699
a clear vision there is a ability to

00:05:55,240 --> 00:06:00,039
have adaptability join that clean clear

00:05:57,699 --> 00:06:02,979
vision but once the scrum starts as

00:06:00,039 --> 00:06:04,990
sorry once the Sprint starts to stay on

00:06:02,979 --> 00:06:09,580
that goal no distractions to the team

00:06:04,990 --> 00:06:11,440
during that time and to stay focused it

00:06:09,580 --> 00:06:13,779
would help if you have a backlog for at

00:06:11,440 --> 00:06:16,900
least two sprints that way there's a

00:06:13,779 --> 00:06:19,810
constant like life cycle and and always

00:06:16,900 --> 00:06:23,860
moving forward and the objective being

00:06:19,810 --> 00:06:26,349
to have an MVP I'm sorry a PSP or MMF

00:06:23,860 --> 00:06:28,240
for a at the end of each sprint

00:06:26,349 --> 00:06:30,969
something to show this is what the team

00:06:28,240 --> 00:06:32,440
did I'm aware this is difficult at some

00:06:30,969 --> 00:06:34,750
points especially at the beginning but

00:06:32,440 --> 00:06:37,449
always to work to that goal of having

00:06:34,750 --> 00:06:39,460
something to demo at the end of the at

00:06:37,449 --> 00:06:41,979
the end of the sprint

00:06:39,460 --> 00:06:46,419
to choose scrum where the vision is

00:06:41,979 --> 00:06:48,280
clear without and I say this loosely the

00:06:46,419 --> 00:06:50,560
vision has to be clear where we're going

00:06:48,280 --> 00:06:53,310
a long scale like what is the objective

00:06:50,560 --> 00:06:55,810
in 3-4 months time to get their

00:06:53,310 --> 00:06:58,330
flexibility along the way agile is

00:06:55,810 --> 00:07:01,330
designed to adapt for that flexibility

00:06:58,330 --> 00:07:04,090
that is available in scrum teams should

00:07:01,330 --> 00:07:05,889
come then there can be changes but once

00:07:04,090 --> 00:07:09,340
the team is in motion during the scrump

00:07:05,889 --> 00:07:12,190
during the Sprint that leave them we can

00:07:09,340 --> 00:07:15,330
make changes as we go along but not

00:07:12,190 --> 00:07:18,910
during the Sprint just keep on going and

00:07:15,330 --> 00:07:22,090
and and the changes can come out to us

00:07:18,910 --> 00:07:23,590
and again scrum projects can change

00:07:22,090 --> 00:07:25,990
direction as long as the product backlog

00:07:23,590 --> 00:07:28,690
is maintained and groom so constant

00:07:25,990 --> 00:07:31,360
change constant going forward those are

00:07:28,690 --> 00:07:33,610
the main things I see in a scrum project

00:07:31,360 --> 00:07:35,560
the team needs to be on board and

00:07:33,610 --> 00:07:37,750
committed stakeholders have to have the

00:07:35,560 --> 00:07:40,360
projects as a priority it doesn't have

00:07:37,750 --> 00:07:43,750
to be their top priority but it does

00:07:40,360 --> 00:07:46,210
have to be in there and it's a schedule

00:07:43,750 --> 00:07:48,430
that they are able to answer questions

00:07:46,210 --> 00:07:50,530
be available to think about the project

00:07:48,430 --> 00:07:52,180
and if there is a change to be done to

00:07:50,530 --> 00:07:54,159
be available to give that change and

00:07:52,180 --> 00:07:55,870
give that feedback so that the team can

00:07:54,159 --> 00:07:58,960
continue to progress in the right

00:07:55,870 --> 00:08:00,729
direction even after a change the team

00:07:58,960 --> 00:08:04,690
obviously has to have the skill set to

00:08:00,729 --> 00:08:08,919
man to manage the project so it's an

00:08:04,690 --> 00:08:12,310
essential and and communicative and i

00:08:08,919 --> 00:08:15,490
will add in here and where we work in X

00:08:12,310 --> 00:08:17,770
Aaron and we are remote team I'm based

00:08:15,490 --> 00:08:19,990
in Israel proper hat is based in India

00:08:17,770 --> 00:08:22,300
we have people in Tokyo we have people

00:08:19,990 --> 00:08:26,110
in the UAE we have people in the States

00:08:22,300 --> 00:08:29,130
and a few other places so cute what

00:08:26,110 --> 00:08:31,360
Austria Australia Australia and so

00:08:29,130 --> 00:08:33,430
communication is essential and doable

00:08:31,360 --> 00:08:34,990
there is I'm not going to go into the

00:08:33,430 --> 00:08:37,750
tools there are enough tools that the

00:08:34,990 --> 00:08:39,430
team can maintain communication there's

00:08:37,750 --> 00:08:41,890
no reason that should stop for whatever

00:08:39,430 --> 00:08:45,160
reason co-located or not look co-located

00:08:41,890 --> 00:08:47,050
it communication is a key and and we

00:08:45,160 --> 00:08:49,779
have proved that doesn't matter where

00:08:47,050 --> 00:08:51,250
you are it can be done and the output is

00:08:49,779 --> 00:08:52,660
to show something at the end of every

00:08:51,250 --> 00:08:54,279
sprint have something to take

00:08:52,660 --> 00:08:56,620
back to the client and say the

00:08:54,279 --> 00:08:58,060
stakeholders this is what we did you

00:08:56,620 --> 00:09:02,019
don't like it that's fine but this is

00:08:58,060 --> 00:09:03,160
what we did and the team gets a full

00:09:02,019 --> 00:09:04,709
sprint this is what I mentioned before

00:09:03,160 --> 00:09:07,720
without any interruptions no

00:09:04,709 --> 00:09:10,180
distractions all distractions project

00:09:07,720 --> 00:09:11,680
backlogs things like that part of the

00:09:10,180 --> 00:09:13,990
schedule when it comes to the actual

00:09:11,680 --> 00:09:16,149
sprint work no bugs to be fixed that

00:09:13,990 --> 00:09:18,519
aren't in the plan no changes it's a

00:09:16,149 --> 00:09:21,370
short period of time we'll work it out

00:09:18,519 --> 00:09:23,529
afterwards and anything could be subject

00:09:21,370 --> 00:09:27,420
to change and that's where squirm really

00:09:23,529 --> 00:09:31,269
lives up to his name I'll take come back

00:09:27,420 --> 00:09:33,490
oh yeah dude sorry my mistake okay when

00:09:31,269 --> 00:09:37,060
to scrum turn into Kanban or scram ban

00:09:33,490 --> 00:09:40,509
and the sprint scope frequently changes

00:09:37,060 --> 00:09:43,269
priorities change emergency situations

00:09:40,509 --> 00:09:45,519
clients not responsive many different

00:09:43,269 --> 00:09:47,529
reasons it's a sign that maybe scrum

00:09:45,519 --> 00:09:49,480
isn't the right way to work maybe the

00:09:47,529 --> 00:09:51,490
team's okay with squirm but the

00:09:49,480 --> 00:09:53,259
stakeholders might not be they are a

00:09:51,490 --> 00:09:56,649
contributing factor when choosing the

00:09:53,259 --> 00:09:58,120
right framework for for which I shall

00:09:56,649 --> 00:10:00,550
framework and that is one of the things

00:09:58,120 --> 00:10:02,889
that is easy identifiable at the end of

00:10:00,550 --> 00:10:05,980
a sprint especially that maybe sprayer

00:10:02,889 --> 00:10:09,130
scram isn't working the scope isn't

00:10:05,980 --> 00:10:10,720
clear or blocked and again the whole

00:10:09,130 --> 00:10:13,509
point is to be able to have a couple of

00:10:10,720 --> 00:10:16,060
weeks back a sprint backlog in in the

00:10:13,509 --> 00:10:18,519
backlog and without that it means

00:10:16,060 --> 00:10:20,649
there's no scope we have no backlog

00:10:18,519 --> 00:10:22,029
there's no scope so we need to know as a

00:10:20,649 --> 00:10:25,060
scrum master you need to know what

00:10:22,029 --> 00:10:27,009
you're going to be doing next so one or

00:10:25,060 --> 00:10:29,769
two steps ahead of yourself if you don't

00:10:27,009 --> 00:10:33,459
have that visibility then scrum might

00:10:29,769 --> 00:10:34,959
not be the right way to go and basic

00:10:33,459 --> 00:10:38,439
scrum rules aren't enforced and lack of

00:10:34,959 --> 00:10:40,149
communication lack of retro specs live

00:10:38,439 --> 00:10:42,610
and learn what learn what your mistakes

00:10:40,149 --> 00:10:45,339
are improve each time the team should be

00:10:42,610 --> 00:10:50,199
come on together I think a major part of

00:10:45,339 --> 00:10:54,519
scrum is a ceremony there multitasking

00:10:50,199 --> 00:10:56,079
and you want them to focus on items yeah

00:10:54,519 --> 00:10:57,879
that would happen especially if things

00:10:56,079 --> 00:10:59,980
are blocked or the scope isn't clear

00:10:57,879 --> 00:11:01,839
they get distracted nobody wants idle

00:10:59,980 --> 00:11:05,290
their talents SAT around doing nothing

00:11:01,839 --> 00:11:06,430
because scope isn't ready and then they

00:11:05,290 --> 00:11:08,380
move on to another project

00:11:06,430 --> 00:11:11,490
than their dedication is its it

00:11:08,380 --> 00:11:15,240
fluctuates and then again scrum can fail

00:11:11,490 --> 00:11:18,250
release start to be releases are ad hoc

00:11:15,240 --> 00:11:19,720
you're just releasing whenever you feel

00:11:18,250 --> 00:11:21,250
like it whenever you feel it from a

00:11:19,720 --> 00:11:25,270
development perspective it's relevant

00:11:21,250 --> 00:11:26,770
that's not scrum okay and no clear

00:11:25,270 --> 00:11:30,459
distinction between projects and

00:11:26,770 --> 00:11:32,410
products it's a conflict between the p.o

00:11:30,459 --> 00:11:35,950
and the sm there's a reason those two

00:11:32,410 --> 00:11:38,050
where people are members of the team to

00:11:35,950 --> 00:11:39,310
have the different aspects one coming

00:11:38,050 --> 00:11:40,839
from the business side one on the

00:11:39,310 --> 00:11:42,820
project development doesn't mean the

00:11:40,839 --> 00:11:46,060
scrum master can't also be a p.o but not

00:11:42,820 --> 00:11:48,100
in the same project and addressing

00:11:46,060 --> 00:11:50,020
maintenance and support work given that

00:11:48,100 --> 00:11:53,140
maintenance and support has different

00:11:50,020 --> 00:11:54,580
and changeable priorities scrum also

00:11:53,140 --> 00:11:56,020
won't work because it will affect the

00:11:54,580 --> 00:11:59,440
different the content of the Sprint each

00:11:56,020 --> 00:12:01,330
time teen dedication is erratic when you

00:11:59,440 --> 00:12:03,370
set what you're doing for the Sprint it

00:12:01,330 --> 00:12:05,200
is what you need to accomplish its what

00:12:03,370 --> 00:12:07,959
the client is expecting at the end of

00:12:05,200 --> 00:12:10,779
the sprint without that with the team

00:12:07,959 --> 00:12:11,980
not dedicated to achieving those things

00:12:10,779 --> 00:12:14,020
and that means they can work on other

00:12:11,980 --> 00:12:15,940
projects we can work percentage wise but

00:12:14,020 --> 00:12:19,920
they have to have the dedication to the

00:12:15,940 --> 00:12:23,470
project in order for it to go forward

00:12:19,920 --> 00:12:26,740
Thank You sunny so I would introduce

00:12:23,470 --> 00:12:29,440
about can been a bit of can burn or as

00:12:26,740 --> 00:12:32,070
the name suggested it as a visual signal

00:12:29,440 --> 00:12:35,860
and basically it is a Japanese word

00:12:32,070 --> 00:12:39,430
which says that like card you can see

00:12:35,860 --> 00:12:41,800
and Kanban was first introduced by

00:12:39,430 --> 00:12:45,670
Toyota for the just-in-time production

00:12:41,800 --> 00:12:48,670
lines in 1950s so the most important

00:12:45,670 --> 00:12:51,900
part of can- are this board I think this

00:12:48,670 --> 00:12:55,060
is pretty simple to work upon and we can

00:12:51,900 --> 00:12:57,940
simply man is our tasks here right we

00:12:55,060 --> 00:13:01,329
can put our stories here and this column

00:12:57,940 --> 00:13:03,760
we can also put some items into dues in

00:13:01,329 --> 00:13:06,459
progress important part is that we can

00:13:03,760 --> 00:13:08,890
limit what can I work in progress items

00:13:06,459 --> 00:13:11,079
like in progress we can limit like there

00:13:08,890 --> 00:13:12,990
may be three four items first we will

00:13:11,079 --> 00:13:15,940
finish those or move it to the next

00:13:12,990 --> 00:13:19,270
column and then i will pick another

00:13:15,940 --> 00:13:19,960
stories from the product backlog so that

00:13:19,270 --> 00:13:22,360
really has

00:13:19,960 --> 00:13:24,880
when we we are practicing it for our

00:13:22,360 --> 00:13:27,820
support project an accelerant and we are

00:13:24,880 --> 00:13:30,670
pretty happy with this process so I'll

00:13:27,820 --> 00:13:35,890
move to the next slide so can been in a

00:13:30,670 --> 00:13:37,810
nut sale or like say sins are same as a

00:13:35,890 --> 00:13:41,410
scrum you can say like meetings on a

00:13:37,810 --> 00:13:43,840
daily basis and basically for those who

00:13:41,410 --> 00:13:50,860
are converting from a scrum they go for

00:13:43,840 --> 00:13:53,380
it product backlog the debt also stories

00:13:50,860 --> 00:13:56,050
are here you can pull a premier so you

00:13:53,380 --> 00:13:57,760
can see like which toys are available

00:13:56,050 --> 00:14:00,150
there and you can pull out from there so

00:13:57,760 --> 00:14:03,760
that would be your protect backlog tools

00:14:00,150 --> 00:14:08,470
Kanban board it is being used

00:14:03,760 --> 00:14:10,900
extensively as a tool and WIP limit as I

00:14:08,470 --> 00:14:12,580
talked about it or during an

00:14:10,900 --> 00:14:17,080
introduction so limiting the amount of

00:14:12,580 --> 00:14:19,570
WIP or really works in a courteous

00:14:17,080 --> 00:14:21,850
manner like we can limit the things and

00:14:19,570 --> 00:14:23,470
we can ensure that things are first

00:14:21,850 --> 00:14:26,920
finished and then we are picking other

00:14:23,470 --> 00:14:30,610
items and team or basically they are

00:14:26,920 --> 00:14:32,530
technical teams and as needed or camera

00:14:30,610 --> 00:14:34,990
is also extensively used for support

00:14:32,530 --> 00:14:37,750
projects in Drupal ecosystem so

00:14:34,990 --> 00:14:39,790
basically a front end or back end

00:14:37,750 --> 00:14:43,030
developers who are required for that

00:14:39,790 --> 00:14:46,690
particular project or a picked for it

00:14:43,030 --> 00:14:49,780
and the project philosophy actually can

00:14:46,690 --> 00:14:52,240
men does not prohibit chance but neither

00:14:49,780 --> 00:14:55,150
it prescribed for it so it is not

00:14:52,240 --> 00:14:57,460
speaking about it about jen's a lot but

00:14:55,150 --> 00:14:58,930
here it is receptive to it if you want

00:14:57,460 --> 00:15:03,190
to make changes if you want to adopt

00:14:58,930 --> 00:15:05,770
chances then it is fine can when

00:15:03,190 --> 00:15:07,990
encourages making incremental changes or

00:15:05,770 --> 00:15:10,210
like you can make changes as and when

00:15:07,990 --> 00:15:12,960
required required so that you can avoid

00:15:10,210 --> 00:15:16,480
drastic decrease in productivity

00:15:12,960 --> 00:15:18,910
similarly the small course corrections

00:15:16,480 --> 00:15:23,470
are also just easier than altering the

00:15:18,910 --> 00:15:25,510
complete process and it focuses on the

00:15:23,470 --> 00:15:27,820
end-to-end project like a vision is on

00:15:25,510 --> 00:15:32,800
the and project like how soon we can

00:15:27,820 --> 00:15:33,550
compute the project so now when to

00:15:32,800 --> 00:15:36,490
choose

00:15:33,550 --> 00:15:38,890
can men so basically can men as I see it

00:15:36,490 --> 00:15:41,649
as used for support and maintenance

00:15:38,890 --> 00:15:43,420
project widely I like when whenever you

00:15:41,649 --> 00:15:45,700
are running support you can keep tickets

00:15:43,420 --> 00:15:48,250
and your backlog items you can pull

00:15:45,700 --> 00:15:50,890
tickets from there you can pull them

00:15:48,250 --> 00:15:53,709
into work in progress you can then move

00:15:50,890 --> 00:15:57,250
it to the testing and so on or the in

00:15:53,709 --> 00:16:00,070
continuous flow whenever we need a

00:15:57,250 --> 00:16:03,130
continuous flow of work items we can

00:16:00,070 --> 00:16:07,269
pick can been as our product matter

00:16:03,130 --> 00:16:08,950
lousy and when the project requires the

00:16:07,269 --> 00:16:11,649
maximum flexibility and frequent chains

00:16:08,950 --> 00:16:17,589
of priorities and a scope or then again

00:16:11,649 --> 00:16:19,959
we can pick Gambon open this and like

00:16:17,589 --> 00:16:21,820
things are open everyone can see that

00:16:19,959 --> 00:16:24,640
board and which team member is working

00:16:21,820 --> 00:16:27,490
on which item you can definitely look

00:16:24,640 --> 00:16:30,070
into that add up release required when

00:16:27,490 --> 00:16:31,810
release dates are not known actually

00:16:30,070 --> 00:16:34,750
basically for support projects you never

00:16:31,810 --> 00:16:37,269
know maybe one ticket next two days for

00:16:34,750 --> 00:16:42,480
you when ticket takes simply few hours

00:16:37,269 --> 00:16:46,720
for you so based upon that now it is

00:16:42,480 --> 00:16:51,700
finished term for a scram ban so it is a

00:16:46,720 --> 00:16:53,589
mix of a scrum and Kanban okay okay so

00:16:51,700 --> 00:16:57,310
scrabble actually is one of my personal

00:16:53,589 --> 00:16:58,779
favorites because and it takes a lot of

00:16:57,310 --> 00:17:01,329
the things that I like personally in

00:16:58,779 --> 00:17:03,279
scrum and things that have been Kanban

00:17:01,329 --> 00:17:05,350
and it equals scram ban this isn't

00:17:03,279 --> 00:17:09,429
officially defined anywhere it's still

00:17:05,350 --> 00:17:11,949
unclear but in my opinion you're working

00:17:09,429 --> 00:17:13,990
in scrum you need to adapt its grand

00:17:11,949 --> 00:17:16,900
band you like certain parts of scrum and

00:17:13,990 --> 00:17:19,030
you just want to have ad hoc releases or

00:17:16,900 --> 00:17:22,240
anything like that then this is your

00:17:19,030 --> 00:17:25,209
this is this is your solution so it's

00:17:22,240 --> 00:17:27,490
still in definition you know it's in the

00:17:25,209 --> 00:17:29,200
definition stages but it's going to be

00:17:27,490 --> 00:17:30,730
anything you choose it isn't a hundred

00:17:29,200 --> 00:17:32,710
percent Kanban and isn't a hundred

00:17:30,730 --> 00:17:35,530
percent scrum okay and this is actually

00:17:32,710 --> 00:17:37,929
not unique to software development there

00:17:35,530 --> 00:17:40,990
is a lot of things about using scram ban

00:17:37,929 --> 00:17:42,669
in in in the home with the children and

00:17:40,990 --> 00:17:46,660
things like that it's actually has a lot

00:17:42,669 --> 00:17:47,440
of interesting ways of doing it and so

00:17:46,660 --> 00:17:50,139
scram man

00:17:47,440 --> 00:17:52,299
a nutshell again I really personally

00:17:50,139 --> 00:17:54,669
what I think it's very important the

00:17:52,299 --> 00:17:57,190
communication so a lot of times you'll

00:17:54,669 --> 00:17:58,629
keep things up like the stand-ups daily

00:17:57,190 --> 00:18:00,700
communication speaking to your team

00:17:58,629 --> 00:18:02,529
knowing what they're working on is that

00:18:00,700 --> 00:18:06,009
technically that makes it a scram banner

00:18:02,529 --> 00:18:08,409
not just Kanban the retro to enforce

00:18:06,009 --> 00:18:12,100
self-improvement and team improvement

00:18:08,409 --> 00:18:14,440
and reviews and again we can do ad hoc

00:18:12,100 --> 00:18:16,870
reviews and that's cool but you can also

00:18:14,440 --> 00:18:19,029
plan the reviews I person working with

00:18:16,870 --> 00:18:21,190
in a project that was pure scrum for

00:18:19,029 --> 00:18:23,320
about the first five sprints and the

00:18:21,190 --> 00:18:26,529
last seven sprints we moved over to

00:18:23,320 --> 00:18:29,799
scram ban we used a Kanban board to see

00:18:26,529 --> 00:18:33,700
what where things are at but we and we

00:18:29,799 --> 00:18:35,830
kept our demos with the client but due

00:18:33,700 --> 00:18:37,690
to issues of a response from the client

00:18:35,830 --> 00:18:39,639
to close all the uat items before the

00:18:37,690 --> 00:18:42,129
end of the sprint the client wasn't

00:18:39,639 --> 00:18:43,480
responsive getting clear information on

00:18:42,129 --> 00:18:45,940
for the backlog the client wasn't

00:18:43,480 --> 00:18:48,429
responsive blaming the client is their

00:18:45,940 --> 00:18:50,529
priorities but this meant that we could

00:18:48,429 --> 00:18:53,080
no longer keep scram we kept having

00:18:50,529 --> 00:18:56,080
sprint to was still full of uat tickets

00:18:53,080 --> 00:18:58,059
so we were failing in scrum but the team

00:18:56,080 --> 00:19:00,639
wasn't failing in in progressing forward

00:18:58,059 --> 00:19:02,679
and so we just moved it to scramble

00:19:00,639 --> 00:19:04,509
adapting that's the main thing with

00:19:02,679 --> 00:19:06,610
agile is just to keep in the name of

00:19:04,509 --> 00:19:10,419
adaptation learning and keep moving

00:19:06,610 --> 00:19:13,899
forward so with the tools I do use a

00:19:10,419 --> 00:19:16,360
Kanban board in a few cases I don't do

00:19:13,899 --> 00:19:18,309
ad hoc releases we keep it we keep it

00:19:16,360 --> 00:19:20,710
structured in the same way that scrum is

00:19:18,309 --> 00:19:23,340
but you can't choose to do the Kanban

00:19:20,710 --> 00:19:26,409
we're not have ad hoc releases

00:19:23,340 --> 00:19:28,419
continuous flow and even though we do

00:19:26,409 --> 00:19:31,840
define when the sprint ends because we

00:19:28,419 --> 00:19:34,659
have a demo in the code we have you know

00:19:31,840 --> 00:19:37,120
we decide sprint 11 its sprint 12 we do

00:19:34,659 --> 00:19:38,980
have that just for structure but

00:19:37,120 --> 00:19:40,750
technically we do work on a continuous

00:19:38,980 --> 00:19:43,059
flow sometimes we take less priority

00:19:40,750 --> 00:19:46,080
tickets due to high priority items not

00:19:43,059 --> 00:19:49,210
being blocked for whatever reasons and

00:19:46,080 --> 00:19:51,399
again unlike scram the team pulls the

00:19:49,210 --> 00:19:53,110
tickets so that means although we didn't

00:19:51,399 --> 00:19:55,240
define at the beginning of the sprint

00:19:53,110 --> 00:19:58,210
they just pulled the tickets when if

00:19:55,240 --> 00:20:00,070
when they need them so again contradict

00:19:58,210 --> 00:20:00,790
him to scram where it's predefined at

00:20:00,070 --> 00:20:07,420
the beginning of the spring

00:20:00,790 --> 00:20:10,870
what they're going to work on and no no

00:20:07,420 --> 00:20:12,820
we do grooming ad hoc when when the

00:20:10,870 --> 00:20:15,100
requirements come in in the case I have

00:20:12,820 --> 00:20:17,560
in mind there's no reason not to do

00:20:15,100 --> 00:20:21,100
planning if you have the information and

00:20:17,560 --> 00:20:22,540
you can do a plan even if he is you know

00:20:21,100 --> 00:20:24,670
is it's a with these are the next

00:20:22,540 --> 00:20:34,960
priority tickets I would love to do

00:20:24,670 --> 00:20:38,890
planning in this projects you see the

00:20:34,960 --> 00:20:40,900
problem with the way we don't define

00:20:38,890 --> 00:20:43,390
when we don't mark the end of the sprint

00:20:40,900 --> 00:20:45,160
by yes we have a demo but the day at the

00:20:43,390 --> 00:20:47,320
end of the Sprint is on a monday on a

00:20:45,160 --> 00:20:49,450
start of a sprint it's on a monday so we

00:20:47,320 --> 00:20:52,540
just start the week yes guys it's a new

00:20:49,450 --> 00:20:54,580
sprint and so any merge requests need to

00:20:52,540 --> 00:20:58,420
have the code so we know when it was

00:20:54,580 --> 00:21:01,240
done but we don't have and we just have

00:20:58,420 --> 00:21:02,830
priority we don't have unfortunately in

00:21:01,240 --> 00:21:04,990
this case we don't have the ability to

00:21:02,830 --> 00:21:06,760
groom them and be ready and say this is

00:21:04,990 --> 00:21:08,680
what we're going to accomplish in this

00:21:06,760 --> 00:21:11,020
day we don't even have that visibility

00:21:08,680 --> 00:21:13,510
we're living hand-to-mouth with regards

00:21:11,020 --> 00:21:16,060
to development so this allows the

00:21:13,510 --> 00:21:17,620
flexibility to do that but personally i

00:21:16,060 --> 00:21:20,710
would love to do some planning meetings

00:21:17,620 --> 00:21:22,390
and so that's but you can again there's

00:21:20,710 --> 00:21:24,820
no reason why you can't and choose your

00:21:22,390 --> 00:21:27,160
different reasons to choose that part of

00:21:24,820 --> 00:21:30,400
scrum yes this part of Kanban yes that

00:21:27,160 --> 00:21:32,740
part of scrum no etc etc that's why it's

00:21:30,400 --> 00:21:34,660
not defined and I wonder if it will ever

00:21:32,740 --> 00:21:36,280
be defined because it's just take what

00:21:34,660 --> 00:21:38,170
you know of both and see how it works

00:21:36,280 --> 00:21:42,010
for your team for your projects and move

00:21:38,170 --> 00:21:44,260
forward and grooming on demand we do

00:21:42,010 --> 00:21:46,690
grooming on demand again this is a

00:21:44,260 --> 00:21:48,310
perfect example when only when we get

00:21:46,690 --> 00:21:51,190
things I'm blocked by the client can we

00:21:48,310 --> 00:21:53,920
do the grooming so we're we're stuck

00:21:51,190 --> 00:21:56,440
until then again quite the team

00:21:53,920 --> 00:22:00,160
shouldn't be idle so they pull the

00:21:56,440 --> 00:22:01,720
tickets that they can work on and again

00:22:00,160 --> 00:22:04,450
like scrum it needs to have a

00:22:01,720 --> 00:22:06,910
cross-functional team I do see this as a

00:22:04,450 --> 00:22:09,280
I didn't actually put it in oh yeah it's

00:22:06,910 --> 00:22:12,040
here like I think the top part is the

00:22:09,280 --> 00:22:15,100
scrum and this is the ban so scram ban

00:22:12,040 --> 00:22:17,410
in in in most cases but

00:22:15,100 --> 00:22:21,850
and adapt it to what you need it to do

00:22:17,410 --> 00:22:24,039
and the project philosophy again it's

00:22:21,850 --> 00:22:26,470
the same agile philosophy the roles the

00:22:24,039 --> 00:22:30,309
work processes the better flows and the

00:22:26,470 --> 00:22:32,140
flexibility and all under the title of

00:22:30,309 --> 00:22:35,049
constant improvement so as long as we're

00:22:32,140 --> 00:22:36,160
constantly improving and were a gel then

00:22:35,049 --> 00:22:40,530
we're still working in the agile

00:22:36,160 --> 00:22:43,360
methodology when to choose scrum ban so

00:22:40,530 --> 00:22:46,150
when anything is unstable and you can't

00:22:43,360 --> 00:22:47,890
maintain scram basically and you find

00:22:46,150 --> 00:22:50,620
the solution to not being able to

00:22:47,890 --> 00:22:54,070
maintain the scram within Kanban we have

00:22:50,620 --> 00:22:57,880
scram ban and the project's not really

00:22:54,070 --> 00:22:59,530
the project is not flexible hard on that

00:22:57,880 --> 00:23:01,240
when the project requires the maximum

00:22:59,530 --> 00:23:04,720
flexibility and frequent changes of

00:23:01,240 --> 00:23:06,039
priority so client says they want one

00:23:04,720 --> 00:23:08,710
thing the next day they want something

00:23:06,039 --> 00:23:10,630
else with scrum we would close the door

00:23:08,710 --> 00:23:13,440
and say no talk to me in two weeks or

00:23:10,630 --> 00:23:16,240
three weeks with scramble we can stop

00:23:13,440 --> 00:23:18,640
with Kanban we can stop therefore we

00:23:16,240 --> 00:23:20,799
scramble we can stop the goals are not

00:23:18,640 --> 00:23:23,890
clearly defined again not allowing us to

00:23:20,799 --> 00:23:25,480
plan constantly evolving at the product

00:23:23,890 --> 00:23:27,400
which is great this can actually

00:23:25,480 --> 00:23:31,470
involving at the product can be also

00:23:27,400 --> 00:23:34,270
done in scrum quite easily but you know

00:23:31,470 --> 00:23:36,429
if it involves too quickly then it will

00:23:34,270 --> 00:23:39,159
move out of scrum and the sprint

00:23:36,429 --> 00:23:40,960
planning isn't happening and another

00:23:39,159 --> 00:23:42,850
reason squirm would fail would be

00:23:40,960 --> 00:23:44,620
management not involved the whole team

00:23:42,850 --> 00:23:45,909
could be working with scrum but like I

00:23:44,620 --> 00:23:47,830
said with the the client or the

00:23:45,909 --> 00:23:50,200
stakeholders having it as a priority if

00:23:47,830 --> 00:23:52,809
the projects as a priority if they don't

00:23:50,200 --> 00:23:55,210
scrum will fail and we won't be able to

00:23:52,809 --> 00:23:57,190
close off Sprint's cold heart we've

00:23:55,210 --> 00:23:59,830
finished it the client agrees with it

00:23:57,190 --> 00:24:02,620
there's no issues and yet with scram

00:23:59,830 --> 00:24:06,580
mind you can pour it over to the next so

00:24:02,620 --> 00:24:08,110
called sprint and any Kanban project

00:24:06,580 --> 00:24:10,000
that you're working on that needs a

00:24:08,110 --> 00:24:11,830
slight bit more structure will also fall

00:24:10,000 --> 00:24:13,539
into scram ban because you'll be doing

00:24:11,830 --> 00:24:16,450
the opposite you'll be working in Kanban

00:24:13,539 --> 00:24:18,010
but you need and you need the planning

00:24:16,450 --> 00:24:21,250
you need the daily standup you need the

00:24:18,010 --> 00:24:24,190
retrospect so technically that would be

00:24:21,250 --> 00:24:26,350
a scram ban and the team isn't focused

00:24:24,190 --> 00:24:28,570
scrum will also fail if the team's not

00:24:26,350 --> 00:24:32,139
focused to do what they want to do what

00:24:28,570 --> 00:24:36,429
need to do for that sprint then a scrum

00:24:32,139 --> 00:24:40,600
won't won't won't help extreme

00:24:36,429 --> 00:24:44,019
programming yeah so extreme programming

00:24:40,600 --> 00:24:47,470
is already a lesser used a framework for

00:24:44,019 --> 00:24:50,769
Drupal ecosystem at least but yeah let's

00:24:47,470 --> 00:24:52,570
discuss about it so this is another I

00:24:50,769 --> 00:24:54,730
zile development framework and it is

00:24:52,570 --> 00:24:56,440
focused more on software quality and

00:24:54,730 --> 00:24:59,679
responsiveness it is a code first

00:24:56,440 --> 00:25:03,250
approach so cold is in the forefront and

00:24:59,679 --> 00:25:06,490
we also do testing testing is also on

00:25:03,250 --> 00:25:09,850
the forefront of extreme programming it

00:25:06,490 --> 00:25:12,600
has also given or it has also used a few

00:25:09,850 --> 00:25:15,399
software engineering methodologies like

00:25:12,600 --> 00:25:18,570
test-driven development has been used

00:25:15,399 --> 00:25:23,220
extensively for extreme programming and

00:25:18,570 --> 00:25:27,070
there are few other elements like a pair

00:25:23,220 --> 00:25:28,960
programming integration collective

00:25:27,070 --> 00:25:32,620
ownership and several other things we

00:25:28,960 --> 00:25:35,649
will discuss on next few slides so

00:25:32,620 --> 00:25:37,419
moving to the next so as I said that

00:25:35,649 --> 00:25:39,240
extreme programming is a code first

00:25:37,419 --> 00:25:41,950
approach to software delivery and

00:25:39,240 --> 00:25:44,769
emphasizes on poor basic activities like

00:25:41,950 --> 00:25:47,519
coding testing listening and designing

00:25:44,769 --> 00:25:51,549
so here in the diagram you can see like

00:25:47,519 --> 00:25:54,580
coding as is the main part of this we

00:25:51,549 --> 00:25:56,950
first code then we go for other things

00:25:54,580 --> 00:26:00,370
we also do pair programming we do

00:25:56,950 --> 00:26:04,629
refactoring of course so sometimes this

00:26:00,370 --> 00:26:06,429
is also say that extreme programming is

00:26:04,629 --> 00:26:11,409
not that popular because of this code

00:26:06,429 --> 00:26:13,299
first thing here and again as I said

00:26:11,409 --> 00:26:16,120
that extreme programming prowl testing

00:26:13,299 --> 00:26:18,480
at the forefront of delivery process or

00:26:16,120 --> 00:26:20,649
like test-driven development and

00:26:18,480 --> 00:26:22,840
automated test driven development and

00:26:20,649 --> 00:26:25,500
practices like automated testing

00:26:22,840 --> 00:26:29,049
refactoring continuous integration of

00:26:25,500 --> 00:26:33,100
test-driven development has been used

00:26:29,049 --> 00:26:35,980
extensively and extreme programming so

00:26:33,100 --> 00:26:38,350
here are advantages and disadvantages of

00:26:35,980 --> 00:26:40,840
extreme programming so advantages are

00:26:38,350 --> 00:26:41,900
pair programming under XP helps in

00:26:40,840 --> 00:26:43,490
writing better code

00:26:41,900 --> 00:26:45,500
because two programmers are writing on

00:26:43,490 --> 00:26:48,770
the same piece of code so definitely

00:26:45,500 --> 00:26:51,290
your code is going to be very much

00:26:48,770 --> 00:26:53,900
effective and productive with less bugs

00:26:51,290 --> 00:26:57,320
into that again increased team

00:26:53,900 --> 00:27:01,100
accountability so of every code bases

00:26:57,320 --> 00:27:03,440
given to the team and team is like

00:27:01,100 --> 00:27:05,450
responsible for managing the quality on

00:27:03,440 --> 00:27:09,140
that similarly extreme programming

00:27:05,450 --> 00:27:11,600
menaces risks in a better way because we

00:27:09,140 --> 00:27:14,600
are working on the code in a better way

00:27:11,600 --> 00:27:17,870
we are maintaining quality on that we

00:27:14,600 --> 00:27:20,330
are also using test-driven development

00:27:17,870 --> 00:27:23,150
and apart from that we are also doing

00:27:20,330 --> 00:27:26,690
continuous integration so iterations

00:27:23,150 --> 00:27:31,570
here are mostly of one week and it is

00:27:26,690 --> 00:27:34,550
integrated into the main code base and

00:27:31,570 --> 00:27:36,260
it is easy to accommodate changes so

00:27:34,550 --> 00:27:39,560
another advantage of extreme programming

00:27:36,260 --> 00:27:43,130
like it is very much receptive to

00:27:39,560 --> 00:27:47,690
changes at any point of time or changes

00:27:43,130 --> 00:27:51,980
are accepted and they are integrated

00:27:47,690 --> 00:27:54,560
into the main development process now

00:27:51,980 --> 00:27:56,480
let's discuss about the disadvantages so

00:27:54,560 --> 00:27:59,510
detailed planning is required right

00:27:56,480 --> 00:28:01,400
since the inception due to changing a

00:27:59,510 --> 00:28:05,930
scope as I said that it is very much

00:28:01,400 --> 00:28:07,730
receptive to changes so at any point of

00:28:05,930 --> 00:28:09,800
time if changes are coming then we have

00:28:07,730 --> 00:28:12,620
to estimate like how much extra time it

00:28:09,800 --> 00:28:14,360
would take so right from the scratch we

00:28:12,620 --> 00:28:17,780
have to plan in a way so that we can

00:28:14,360 --> 00:28:20,630
accommodate changes or maybe we can also

00:28:17,780 --> 00:28:22,610
let client know right right since the

00:28:20,630 --> 00:28:24,410
start that whenever you will come with

00:28:22,610 --> 00:28:29,540
the chins request we will let you know

00:28:24,410 --> 00:28:31,730
about the estimations at all then XP

00:28:29,540 --> 00:28:34,790
does not have a set measurement plan or

00:28:31,730 --> 00:28:36,410
Quality Assurance for coding so apart

00:28:34,790 --> 00:28:39,200
from all this software engineering

00:28:36,410 --> 00:28:41,330
method loss is like a continuous

00:28:39,200 --> 00:28:43,520
integration and all there is not a set

00:28:41,330 --> 00:28:46,180
measurement plan so that is why

00:28:43,520 --> 00:28:48,950
sometimes of extreme programming fails

00:28:46,180 --> 00:28:51,410
pair programming may lead to too much

00:28:48,950 --> 00:28:54,620
duplication of code and data and apart

00:28:51,410 --> 00:28:55,779
from it it also takes efforts like two

00:28:54,620 --> 00:28:58,659
programmers are working on the

00:28:55,779 --> 00:29:01,869
same piece of work so it means you we

00:28:58,659 --> 00:29:04,809
are spending more time well and doing a

00:29:01,869 --> 00:29:08,019
piece of the world so XP is more code

00:29:04,809 --> 00:29:10,690
centric than design which may cause UI

00:29:08,019 --> 00:29:14,940
UX is as I said that code is in the

00:29:10,690 --> 00:29:18,399
forefront so our UI UX those are usually

00:29:14,940 --> 00:29:23,710
ignored and which make created chaos

00:29:18,399 --> 00:29:26,529
later on so Experian not salir process

00:29:23,710 --> 00:29:30,849
and tools pair programming it is

00:29:26,529 --> 00:29:36,070
important factor of XP basically release

00:29:30,849 --> 00:29:37,809
plan a iteration plan as one plan which

00:29:36,070 --> 00:29:40,299
is used there where we plan about

00:29:37,809 --> 00:29:43,589
iteration the sort iteration usually it

00:29:40,299 --> 00:29:46,960
is of one week and you plan like what

00:29:43,589 --> 00:29:49,809
features or what items we will pick into

00:29:46,960 --> 00:29:53,549
that iteration then project velocity it

00:29:49,809 --> 00:29:56,499
is measured at at the end of the

00:29:53,549 --> 00:29:59,049
iteration like how much velocity we can

00:29:56,499 --> 00:30:01,809
achieve or then iteration as I said

00:29:59,049 --> 00:30:04,679
usually it is of one week long practices

00:30:01,809 --> 00:30:07,179
we use our test driven development

00:30:04,679 --> 00:30:10,869
continuous integration collective code

00:30:07,179 --> 00:30:14,289
ownership team size usually five or less

00:30:10,869 --> 00:30:16,690
and team members are trackers customer

00:30:14,289 --> 00:30:18,700
is very much important here in extreme

00:30:16,690 --> 00:30:22,960
programming and it is equivalent to

00:30:18,700 --> 00:30:26,080
product owner in a scrum so customer is

00:30:22,960 --> 00:30:28,239
the one who assigns tasks to TMM team

00:30:26,080 --> 00:30:30,969
members it is not like a scrum team

00:30:28,239 --> 00:30:33,039
members are picking tasks their own as

00:30:30,969 --> 00:30:36,460
per their convenience rather customer is

00:30:33,039 --> 00:30:38,589
assigning tasks to all team members or

00:30:36,460 --> 00:30:44,139
then few other team members are

00:30:38,589 --> 00:30:45,849
programmer tester and coach and again as

00:30:44,139 --> 00:30:49,389
we discussed the project philosophy is

00:30:45,849 --> 00:30:52,629
code first refactoring has done so many

00:30:49,389 --> 00:30:54,940
times simple designs are used because

00:30:52,629 --> 00:31:00,269
focus is more on code and spike

00:30:54,940 --> 00:31:02,619
solutions so now when to use XP so

00:31:00,269 --> 00:31:05,169
basically when we have reached up to a

00:31:02,619 --> 00:31:06,970
maturity most of the time what happens

00:31:05,169 --> 00:31:08,020
like we have done most part of the

00:31:06,970 --> 00:31:09,520
coding and

00:31:08,020 --> 00:31:12,730
we have to move into the complicated

00:31:09,520 --> 00:31:15,730
part of coding where lot of focus and

00:31:12,730 --> 00:31:18,270
quality is required then we can move

00:31:15,730 --> 00:31:20,700
into XP at that point of time or

00:31:18,270 --> 00:31:23,110
similarly when we require maximum

00:31:20,700 --> 00:31:28,050
flexibility and frequent chains of

00:31:23,110 --> 00:31:30,910
priorities or then again we can use XP

00:31:28,050 --> 00:31:33,580
multiple releases per week or per day as

00:31:30,910 --> 00:31:36,970
I say that iterations are a very sort

00:31:33,580 --> 00:31:40,270
and continuous integration is promoted

00:31:36,970 --> 00:31:42,940
here and extreme programming so like

00:31:40,270 --> 00:31:46,330
that whenever we want to have multiple

00:31:42,940 --> 00:31:50,440
releases we can use it have many

00:31:46,330 --> 00:31:52,840
unscheduled releases same like when we

00:31:50,440 --> 00:31:55,000
don't know about the odd releases we are

00:31:52,840 --> 00:31:57,940
just working on the tasks and items and

00:31:55,000 --> 00:32:01,450
once it is done maybe we can integrate

00:31:57,940 --> 00:32:06,640
with it with the court and when we have

00:32:01,450 --> 00:32:11,320
less cross-functional teams so now it is

00:32:06,640 --> 00:32:15,910
over to sunny for lean development okay

00:32:11,320 --> 00:32:18,130
hi saleen development was adopted in two

00:32:15,910 --> 00:32:22,240
thousand there's books on it and there

00:32:18,130 --> 00:32:24,820
are on everything and and the lean also

00:32:22,240 --> 00:32:26,530
works based on a kind of Kanban board

00:32:24,820 --> 00:32:29,920
with different emphasis the emphasis

00:32:26,530 --> 00:32:32,020
changes you know to two different

00:32:29,920 --> 00:32:35,050
priorities there is still the objective

00:32:32,020 --> 00:32:37,870
to have sustainability and B and smart

00:32:35,050 --> 00:32:42,610
development and obviously success but

00:32:37,870 --> 00:32:44,530
the main difference is is that and him

00:32:42,610 --> 00:32:52,180
the main difference is is that it's more

00:32:44,530 --> 00:32:53,800
focused on them yeah all right yeah it's

00:32:52,180 --> 00:32:57,070
very good for startups because it's a

00:32:53,800 --> 00:32:58,810
you build lesso to what you can do but

00:32:57,070 --> 00:33:02,140
what will provide you the fastest and

00:32:58,810 --> 00:33:04,270
the best ROI it's mainly focus mainly

00:33:02,140 --> 00:33:07,420
spoken about on for startups but it can

00:33:04,270 --> 00:33:10,830
be applied and whenever whenever the

00:33:07,420 --> 00:33:13,360
focus is to get the ROI

00:33:10,830 --> 00:33:17,140
to get ROI on what you're working on

00:33:13,360 --> 00:33:19,990
unless priority on a whole product in

00:33:17,140 --> 00:33:23,110
the end so it's a small M small

00:33:19,990 --> 00:33:24,970
increments of success I think it would

00:33:23,110 --> 00:33:27,370
be more fitting way to say it still

00:33:24,970 --> 00:33:28,890
works on the cross functioning team it

00:33:27,370 --> 00:33:33,220
doesn't have any best practices

00:33:28,890 --> 00:33:36,190
technical practices define for it it's

00:33:33,220 --> 00:33:39,010
its matrix its external matrices that

00:33:36,190 --> 00:33:40,990
that you know what will give us the

00:33:39,010 --> 00:33:43,300
money back on what we're working on not

00:33:40,990 --> 00:33:44,740
what can we resolve what can we do they

00:33:43,300 --> 00:33:47,170
make the bit is more from a business

00:33:44,740 --> 00:33:48,700
side the business wants to see money

00:33:47,170 --> 00:33:51,070
coming back for the development that's

00:33:48,700 --> 00:33:54,880
done and priorities will be according to

00:33:51,070 --> 00:33:57,700
that and in a nutshell again you can

00:33:54,880 --> 00:33:59,680
apply a daily stand-up meeting such

00:33:57,700 --> 00:34:02,320
communication is just always essentially

00:33:59,680 --> 00:34:05,860
an agile and their and reviews because

00:34:02,320 --> 00:34:09,310
so that we can we can learn and improve

00:34:05,860 --> 00:34:12,820
the tools the cumulative throat excuse

00:34:09,310 --> 00:34:15,640
me cumulative flow diagrams visual

00:34:12,820 --> 00:34:19,149
controls and the Kanban board the Kanban

00:34:15,640 --> 00:34:21,190
board if we go back it has different you

00:34:19,149 --> 00:34:23,380
have the problem you have the solution

00:34:21,190 --> 00:34:26,710
you can have in the solution how much

00:34:23,380 --> 00:34:28,480
it's going to cost to do that solution

00:34:26,710 --> 00:34:31,630
obviously that is needed in order to

00:34:28,480 --> 00:34:34,570
measure the ROI the key metrics and the

00:34:31,630 --> 00:34:36,429
cost structure and so it's a site is a

00:34:34,570 --> 00:34:39,790
different if the board looks the same

00:34:36,429 --> 00:34:41,590
but the titles are different and more

00:34:39,790 --> 00:34:44,820
business oriented a lot more business

00:34:41,590 --> 00:34:48,159
orientated coming from from above

00:34:44,820 --> 00:34:49,870
iterations again can be according to

00:34:48,159 --> 00:34:52,360
according to what you you're planning

00:34:49,870 --> 00:34:54,909
there's no set rule there's no three

00:34:52,360 --> 00:34:58,240
weeks two weeks as newbies also not ad

00:34:54,909 --> 00:35:00,550
hoc as you want and the team needs to be

00:34:58,240 --> 00:35:02,200
well-trained specialized again all the

00:35:00,550 --> 00:35:04,120
things that our jaw has seems to be

00:35:02,200 --> 00:35:06,970
constant well-trained self-managing and

00:35:04,120 --> 00:35:10,300
communicative the creek principles are

00:35:06,970 --> 00:35:12,400
that it eliminates waste and it creates

00:35:10,300 --> 00:35:16,170
knowledge defers commitments fast

00:35:12,400 --> 00:35:19,170
delivery and respect sir respects people

00:35:16,170 --> 00:35:19,170
people

00:35:19,920 --> 00:35:26,590
yeah and optimization as a whole so that

00:35:24,370 --> 00:35:30,970
that's basically lean in a nutshell and

00:35:26,590 --> 00:35:34,690
very surprised so last one in neural

00:35:30,970 --> 00:35:38,100
feature driven development and it is

00:35:34,690 --> 00:35:40,870
basically a software development process

00:35:38,100 --> 00:35:44,770
which has feature in the forefront like

00:35:40,870 --> 00:35:46,870
we do everything based upon feature and

00:35:44,770 --> 00:35:48,850
feature driven development was

00:35:46,870 --> 00:35:51,520
introduced in the year nineteen ninety

00:35:48,850 --> 00:35:55,990
nine in a book named Java modeling and

00:35:51,520 --> 00:35:58,060
color with uml so as the name suggests

00:35:55,990 --> 00:36:00,880
feature are an important aspect of

00:35:58,060 --> 00:36:04,390
features urban development and they are

00:36:00,880 --> 00:36:07,690
primary source like similar to user

00:36:04,390 --> 00:36:09,880
stories in a scrum we use picture to

00:36:07,690 --> 00:36:13,000
track things even in the product backlog

00:36:09,880 --> 00:36:15,790
or whatever backlog we make their of we

00:36:13,000 --> 00:36:18,220
use pitcher there and feature is a small

00:36:15,790 --> 00:36:20,940
client valued function expressed in the

00:36:18,220 --> 00:36:26,380
form this form is important like action

00:36:20,940 --> 00:36:28,540
result and object so this is a simple

00:36:26,380 --> 00:36:31,750
diagram of feature driven development

00:36:28,540 --> 00:36:35,670
how it works like initially we develop

00:36:31,750 --> 00:36:41,920
and overall modern architecture based of

00:36:35,670 --> 00:36:44,710
a framework it is it shows here and we

00:36:41,920 --> 00:36:47,860
build a feature list or here all all

00:36:44,710 --> 00:36:51,100
list of features so that we can track on

00:36:47,860 --> 00:36:54,430
the basis of that here once feature list

00:36:51,100 --> 00:36:56,830
is done we plan by the feature like

00:36:54,430 --> 00:36:59,800
which features we will include in which

00:36:56,830 --> 00:37:03,250
relates cycle and once planning is done

00:36:59,800 --> 00:37:05,170
we go for a design by feature or like

00:37:03,250 --> 00:37:07,330
with design us design the future

00:37:05,170 --> 00:37:10,600
architecture part of it and then build

00:37:07,330 --> 00:37:12,790
the bill by feature so I'll move quickly

00:37:10,600 --> 00:37:14,290
to the next slide advantages and

00:37:12,790 --> 00:37:16,750
disadvantages of feature driven

00:37:14,290 --> 00:37:18,460
development so because advantage of

00:37:16,750 --> 00:37:21,190
featured driven development that it

00:37:18,460 --> 00:37:23,740
supports multiple teams work in parallel

00:37:21,190 --> 00:37:25,590
because we can assign different themes

00:37:23,740 --> 00:37:28,480
on different features they can work

00:37:25,590 --> 00:37:30,280
parallely on on their stuffs and later

00:37:28,480 --> 00:37:33,160
on it can be integrated into

00:37:30,280 --> 00:37:36,040
Park all aspects of project track by

00:37:33,160 --> 00:37:39,880
picture so as I say that you and stood

00:37:36,040 --> 00:37:43,150
up user stories and scrum he ran deputy

00:37:39,880 --> 00:37:45,580
we use a feature to attract everything

00:37:43,150 --> 00:37:47,830
so design by feature and wind by future

00:37:45,580 --> 00:37:52,060
aspects are easy to understand and adopt

00:37:47,830 --> 00:37:53,260
so it is visibly a convenient for all

00:37:52,060 --> 00:37:55,510
the team members they can easily

00:37:53,260 --> 00:37:58,180
understand what they have to do and they

00:37:55,510 --> 00:38:00,310
can work accordingly similarly it s kels

00:37:58,180 --> 00:38:03,100
two large teams so usually featured

00:38:00,310 --> 00:38:06,610
driven development supports large number

00:38:03,100 --> 00:38:09,520
of team 5050 is the normal size of a

00:38:06,610 --> 00:38:11,830
feature driven development project you

00:38:09,520 --> 00:38:15,370
can go up to any any number in that so

00:38:11,830 --> 00:38:18,370
that is flexibility given by apt ed so

00:38:15,370 --> 00:38:20,560
disadvantages promotes individual code

00:38:18,370 --> 00:38:25,500
ownership as opposed to share ownership

00:38:20,560 --> 00:38:28,290
so it it would happen well because like

00:38:25,500 --> 00:38:31,180
several teams are working parallely on

00:38:28,290 --> 00:38:33,820
several steps then ownership would be

00:38:31,180 --> 00:38:37,720
would remain with one individual or

00:38:33,820 --> 00:38:40,110
maybe a few individuals so that kind of

00:38:37,720 --> 00:38:44,080
shared ownership is not available here

00:38:40,110 --> 00:38:46,960
which actually as I does not promote and

00:38:44,080 --> 00:38:49,390
iterations are not as well defined by

00:38:46,960 --> 00:38:52,630
the process so because we are working on

00:38:49,390 --> 00:38:54,880
features and we don't know exact time to

00:38:52,630 --> 00:38:57,310
complete those most of the times so I

00:38:54,880 --> 00:38:59,170
tristan's are not fixed here like an

00:38:57,310 --> 00:39:02,890
other as I all mythologies like in a

00:38:59,170 --> 00:39:05,410
scrum or can burn or wherever we have

00:39:02,890 --> 00:39:08,470
defined iterations but here we can't do

00:39:05,410 --> 00:39:10,570
that similarly the model centric aspect

00:39:08,470 --> 00:39:14,350
can have huge impacts when working on

00:39:10,570 --> 00:39:16,720
existing systems that have no models so

00:39:14,350 --> 00:39:20,500
like if we are migrating from any other

00:39:16,720 --> 00:39:22,780
existing as I'll mythology to pitcher to

00:39:20,500 --> 00:39:26,260
win development or then probably that

00:39:22,780 --> 00:39:28,630
may be problematic for us so here up to

00:39:26,260 --> 00:39:33,370
date in a nutshell so processes and

00:39:28,630 --> 00:39:36,210
tools or like go as we discussed on last

00:39:33,370 --> 00:39:39,340
slide we develop an overall model

00:39:36,210 --> 00:39:41,110
architecture and build a feature list

00:39:39,340 --> 00:39:43,600
plan by feature designed by feature

00:39:41,110 --> 00:39:47,170
built by feature and a practice

00:39:43,600 --> 00:39:51,210
our domain object modeling high level

00:39:47,170 --> 00:39:55,690
class diagram we make here are so that

00:39:51,210 --> 00:39:57,460
things can be put there and a week we

00:39:55,690 --> 00:40:00,340
can track on the basis of that

00:39:57,460 --> 00:40:02,920
developing web feature individual class

00:40:00,340 --> 00:40:06,490
ownership reporting visibility of

00:40:02,920 --> 00:40:09,550
reports team as provider spread here

00:40:06,490 --> 00:40:11,410
there is no set a team in feature driven

00:40:09,550 --> 00:40:13,930
development project managers chief

00:40:11,410 --> 00:40:16,330
architect development manager chip

00:40:13,930 --> 00:40:18,490
programmer domain experts all kind of

00:40:16,330 --> 00:40:21,460
roles are there there are several

00:40:18,490 --> 00:40:23,560
supporting roles too and project

00:40:21,460 --> 00:40:25,450
philosophy is like multiple teams

00:40:23,560 --> 00:40:27,820
working on the same project tracking

00:40:25,450 --> 00:40:32,380
through features and models centric

00:40:27,820 --> 00:40:37,060
approach so comparison table or sunny or

00:40:32,380 --> 00:40:42,580
maybe you can speak about it yeah so

00:40:37,060 --> 00:40:44,440
okay in a nutshell yep okay so just to

00:40:42,580 --> 00:40:46,840
summarize everything up with the

00:40:44,440 --> 00:40:49,980
different elements there's a lot of

00:40:46,840 --> 00:40:53,020
similarities between Kanban and scramble

00:40:49,980 --> 00:40:56,320
and the scrum seems to offer more

00:40:53,020 --> 00:40:58,270
structure and more refined rules so when

00:40:56,320 --> 00:41:00,760
in the comparison you can see the

00:40:58,270 --> 00:41:03,790
artifacts you have many artifacts for

00:41:00,760 --> 00:41:07,570
scrum less so on the Kanban and scram

00:41:03,790 --> 00:41:09,250
band style and excuse me frameworks so

00:41:07,570 --> 00:41:11,260
that again when you're making decision

00:41:09,250 --> 00:41:13,570
of what to choose it's important to know

00:41:11,260 --> 00:41:15,490
what artifacts you're going to have

00:41:13,570 --> 00:41:17,980
because if you can if you do have the

00:41:15,490 --> 00:41:21,070
more than yes you can take you can take

00:41:17,980 --> 00:41:23,080
scrum and if you don't then you need to

00:41:21,070 --> 00:41:27,040
find what fits to you whether it be the

00:41:23,080 --> 00:41:28,870
Kanban or the scram man the board at the

00:41:27,040 --> 00:41:30,400
beginning of a sprint you're bored or

00:41:28,870 --> 00:41:32,710
the end of a sprint your board should be

00:41:30,400 --> 00:41:35,560
empty and you're starting a new with the

00:41:32,710 --> 00:41:37,690
Sprint's on scram and but with Kanban

00:41:35,560 --> 00:41:40,960
and this was for me one of the major

00:41:37,690 --> 00:41:43,330
reasons why we moved to scram ban the

00:41:40,960 --> 00:41:46,150
board is khan is khan in continuous use

00:41:43,330 --> 00:41:48,670
so what you thought you would take on at

00:41:46,150 --> 00:41:50,560
the beginning of the sprint but you

00:41:48,670 --> 00:41:52,780
didn't until three Sprint's later that's

00:41:50,560 --> 00:41:54,850
fine that's that that works for scramble

00:41:52,780 --> 00:41:57,040
and Kanban with sprint everything should

00:41:54,850 --> 00:42:00,670
be completed and

00:41:57,040 --> 00:42:02,140
in Slate and moving on ceremony is again

00:42:00,670 --> 00:42:04,870
with can balance grandma do what's good

00:42:02,140 --> 00:42:07,450
for you do what you need but sprint em

00:42:04,870 --> 00:42:10,060
but squirm requires that you do the

00:42:07,450 --> 00:42:14,980
ceremonies in order to make the next

00:42:10,060 --> 00:42:16,030
sprint work teams and roles and most say

00:42:14,980 --> 00:42:18,070
you know you should have some kind of

00:42:16,030 --> 00:42:21,280
scrum master agile coach something like

00:42:18,070 --> 00:42:23,050
that to lead the team and through you

00:42:21,280 --> 00:42:27,490
know not in someone who's not technical

00:42:23,050 --> 00:42:29,080
or not necessarily technical and in in

00:42:27,490 --> 00:42:31,450
scrum very quite very clearly defined

00:42:29,080 --> 00:42:33,850
roles product owner without it things

00:42:31,450 --> 00:42:35,860
can get complicated a scrum master

00:42:33,850 --> 00:42:37,450
although the objective is not to have

00:42:35,860 --> 00:42:39,760
one because everyone self-managing at

00:42:37,450 --> 00:42:44,110
least for the start someone to give the

00:42:39,760 --> 00:42:46,780
structure to the sprints m4 can balance

00:42:44,110 --> 00:42:48,490
grandma this is optional I do and it is

00:42:46,780 --> 00:42:50,260
recommended some that have some agile

00:42:48,490 --> 00:42:51,970
coach otherwise you just kind of have a

00:42:50,260 --> 00:42:54,250
board on a wall and a few people talking

00:42:51,970 --> 00:42:57,880
around it so as someone to give it some

00:42:54,250 --> 00:43:00,730
kind of structure iterations sprints as

00:42:57,880 --> 00:43:03,190
we know and Kanban and scram man again

00:43:00,730 --> 00:43:06,280
with Kanban as you wish and scrambling

00:43:03,190 --> 00:43:09,910
like we do oh I've chosen to do is to

00:43:06,280 --> 00:43:12,880
have to maintain those iterations but

00:43:09,910 --> 00:43:15,100
with a lot of flexibility a task

00:43:12,880 --> 00:43:17,260
assignment scram predefined everyone

00:43:15,100 --> 00:43:20,170
gets what they need to do at the end at

00:43:17,260 --> 00:43:22,030
the beginning of the sprint and with

00:43:20,170 --> 00:43:25,140
Cameron and grandma it's pulled and we

00:43:22,030 --> 00:43:27,760
scram where you can push ample

00:43:25,140 --> 00:43:30,940
prioritization is part of the backlog

00:43:27,760 --> 00:43:35,920
grooming session ceremony with with the

00:43:30,940 --> 00:43:38,440
p.o with Cameron is as you want and and

00:43:35,920 --> 00:43:39,580
the backlog just needs priority so as

00:43:38,440 --> 00:43:42,190
long as you know what's the main thing

00:43:39,580 --> 00:43:43,990
you want to work on you're all right but

00:43:42,190 --> 00:43:46,480
again this has the challenge of always

00:43:43,990 --> 00:43:49,510
having the high priority items groom

00:43:46,480 --> 00:43:51,490
defined estimated whatever it needs to

00:43:49,510 --> 00:43:53,920
be in order for the developer to take it

00:43:51,490 --> 00:43:56,800
up and start working on it and there's

00:43:53,920 --> 00:43:59,890
many performance metrics that you can be

00:43:56,800 --> 00:44:03,220
used and in scrum the burndown chart

00:43:59,890 --> 00:44:05,650
velocity I have actually kept velocity

00:44:03,220 --> 00:44:07,420
and like measurements the capacity of

00:44:05,650 --> 00:44:10,360
the team I think that helps when

00:44:07,420 --> 00:44:13,060
defining in Kanban and in scramble scram

00:44:10,360 --> 00:44:15,550
man it helps to know how much work in

00:44:13,060 --> 00:44:18,340
progress tickets they should have what

00:44:15,550 --> 00:44:20,080
their limits should be and i luckily had

00:44:18,340 --> 00:44:23,500
that information from when working with

00:44:20,080 --> 00:44:26,950
scrum and maintained it going over to

00:44:23,500 --> 00:44:32,950
Kanban and scram man and so and then

00:44:26,950 --> 00:44:35,530
perhaps we'll do this way ok so again

00:44:32,950 --> 00:44:40,830
extreme programming you have a release

00:44:35,530 --> 00:44:43,210
plan an iteration plan and there's

00:44:40,830 --> 00:44:47,530
artifacts that features a high level

00:44:43,210 --> 00:44:49,510
diagrams for for FTD and lean is again

00:44:47,530 --> 00:44:52,600
also like Kanban more cumulative flow

00:44:49,510 --> 00:44:56,170
diagram virtual Kanban board virtual a

00:44:52,600 --> 00:44:58,900
Kanban board and extreme programming

00:44:56,170 --> 00:45:01,930
like scrum has a clean slate at the

00:44:58,900 --> 00:45:04,930
start of the sprint fdd has a feature

00:45:01,930 --> 00:45:08,260
board and lean has the Kanban board

00:45:04,930 --> 00:45:11,020
ceremonies as you wish you know there's

00:45:08,260 --> 00:45:13,120
no extreme programming has them in place

00:45:11,020 --> 00:45:16,960
but I think it's quite is it's got the

00:45:13,120 --> 00:45:18,310
flexibility to do it as what fits to

00:45:16,960 --> 00:45:20,440
your team I think that's going to be

00:45:18,310 --> 00:45:22,390
when choosing the right framework it's

00:45:20,440 --> 00:45:24,010
what fits to your team and to your

00:45:22,390 --> 00:45:27,010
project objective that always has to be

00:45:24,010 --> 00:45:30,220
at the forefront of your mind iterations

00:45:27,010 --> 00:45:33,840
are incremental iterations for FTD a

00:45:30,220 --> 00:45:37,270
feature driven hence the name em and and

00:45:33,840 --> 00:45:40,840
Faline is a constant stream as as

00:45:37,270 --> 00:45:43,390
business defines really and extreme

00:45:40,840 --> 00:45:45,280
programming unlike any others the task

00:45:43,390 --> 00:45:48,720
is assigned by the client or the

00:45:45,280 --> 00:45:50,830
customer and for the others it's a pull

00:45:48,720 --> 00:45:53,620
majority of our jollies actually a pull

00:45:50,830 --> 00:45:55,140
and from the team member themselves to

00:45:53,620 --> 00:45:58,180
choose what they want to work on next

00:45:55,140 --> 00:46:00,490
obviously having whatever part whatever

00:45:58,180 --> 00:46:03,130
the basis of the prioritization is that

00:46:00,490 --> 00:46:05,830
as a clear indicator on the ticket on

00:46:03,130 --> 00:46:08,140
the card whatever so they know not to

00:46:05,830 --> 00:46:11,440
take what's relevant not just what they

00:46:08,140 --> 00:46:13,780
want and the prioritization is done by

00:46:11,440 --> 00:46:15,580
the client for extreme programming hence

00:46:13,780 --> 00:46:19,900
them allocating tickets makes most

00:46:15,580 --> 00:46:23,290
logical sense and for FTD is done by the

00:46:19,900 --> 00:46:24,190
project manager or architects according

00:46:23,290 --> 00:46:25,690
to the

00:46:24,190 --> 00:46:27,640
feature that there's been work done and

00:46:25,690 --> 00:46:30,750
lean development is again by the

00:46:27,640 --> 00:46:33,579
business what will provide the ROI and

00:46:30,750 --> 00:46:36,099
very similar matrix the burndown charts

00:46:33,579 --> 00:46:38,710
and the lean and cycle time and

00:46:36,099 --> 00:46:42,369
cumulative flow for both fdd and in

00:46:38,710 --> 00:46:44,440
development so these are the

00:46:42,369 --> 00:46:45,790
methodologies well under agile

00:46:44,440 --> 00:46:48,310
methodology these are the different

00:46:45,790 --> 00:46:51,550
frameworks and you know the advantages

00:46:48,310 --> 00:46:53,440
and disadvantages and the question is

00:46:51,550 --> 00:46:56,200
what is the right methodology for you

00:46:53,440 --> 00:47:00,190
and prepare is going to talk about sin

00:46:56,200 --> 00:47:06,790
offense to help us go through a flow of

00:47:00,190 --> 00:47:11,260
how how we can make that decision okay

00:47:06,790 --> 00:47:13,359
yeah so as sniffing as a very popular or

00:47:11,260 --> 00:47:16,630
this isn't making framework it has been

00:47:13,359 --> 00:47:20,500
used by George Bush administration to

00:47:16,630 --> 00:47:23,020
for analyzing policy and the impact of

00:47:20,500 --> 00:47:25,750
religion in process so it describes

00:47:23,020 --> 00:47:29,290
problem situation and system or with the

00:47:25,750 --> 00:47:32,020
help of research and further it explores

00:47:29,290 --> 00:47:34,690
relationship between context experience

00:47:32,020 --> 00:47:37,450
and the person to propose new approach

00:47:34,690 --> 00:47:40,480
each to communication decision making so

00:47:37,450 --> 00:47:43,900
basically it has been adopted recently

00:47:40,480 --> 00:47:46,660
for as idle decision-making and picking

00:47:43,900 --> 00:47:49,450
right method Ozzie or as far as design

00:47:46,660 --> 00:47:52,869
is concerned there are five domains

00:47:49,450 --> 00:47:56,290
obvious complicated complex chaotic and

00:47:52,869 --> 00:48:02,380
disorder we will discuss about four of

00:47:56,290 --> 00:48:05,230
our it one by one so here is the picture

00:48:02,380 --> 00:48:09,270
or like in this picture we can see about

00:48:05,230 --> 00:48:13,829
all the four domains which are in use

00:48:09,270 --> 00:48:20,349
obvious complicated complex and shouting

00:48:13,829 --> 00:48:23,130
now here obvious is where we can sense

00:48:20,349 --> 00:48:25,270
categorize and respond so like

00:48:23,130 --> 00:48:27,550
identifying problem we can easily

00:48:25,270 --> 00:48:30,099
identify like what is the problem and we

00:48:27,550 --> 00:48:33,220
can also quickly pick what is the

00:48:30,099 --> 00:48:35,410
solution for that problem so it may be

00:48:33,220 --> 00:48:36,430
simple support tickets where we know

00:48:35,410 --> 00:48:40,630
like how

00:48:36,430 --> 00:48:42,100
we can fix it or so again no analysis is

00:48:40,630 --> 00:48:45,610
required there because we know the best

00:48:42,100 --> 00:48:47,980
practices and we need to follow our

00:48:45,610 --> 00:48:50,770
standard operating procedures so here we

00:48:47,980 --> 00:48:54,190
can use any any framework anything

00:48:50,770 --> 00:48:56,950
whatever we are continuously using or we

00:48:54,190 --> 00:49:00,250
can go ahead with that I don't think we

00:48:56,950 --> 00:49:03,610
need to make any further change into our

00:49:00,250 --> 00:49:05,830
processes there next comes to complicate

00:49:03,610 --> 00:49:10,020
it where we have two cents analyze and

00:49:05,830 --> 00:49:12,760
respond so here a problem we are able to

00:49:10,020 --> 00:49:18,550
understand what solution we have two

00:49:12,760 --> 00:49:22,360
cents we have to think about it and then

00:49:18,550 --> 00:49:24,940
we have to do analysis and respond so in

00:49:22,360 --> 00:49:27,010
such cases are like cause and effect are

00:49:24,940 --> 00:49:29,650
separated over time and aspects it

00:49:27,010 --> 00:49:32,740
happens like sometimes any solution work

00:49:29,650 --> 00:49:37,260
for us but later on when we try to

00:49:32,740 --> 00:49:40,360
repeat it it didn't work for us so maybe

00:49:37,260 --> 00:49:43,270
in such cases we have to do the analysis

00:49:40,360 --> 00:49:46,480
we have to think about the present

00:49:43,270 --> 00:49:51,360
situation and how we can do in a bit

00:49:46,480 --> 00:49:55,180
away so here we can use of kin min or

00:49:51,360 --> 00:49:58,420
cannon is a good framework for this

00:49:55,180 --> 00:50:01,150
purpose where we can keep our tasks in

00:49:58,420 --> 00:50:04,150
the backlog items and we can pull from

00:50:01,150 --> 00:50:07,600
there and we can work up on that next

00:50:04,150 --> 00:50:09,960
one would be complex here we have to

00:50:07,600 --> 00:50:13,930
probe since and response so we have to

00:50:09,960 --> 00:50:17,500
think about the solutions we have to

00:50:13,930 --> 00:50:19,270
think about the other situations and we

00:50:17,500 --> 00:50:22,030
have two cents on the basis of that like

00:50:19,270 --> 00:50:24,580
what would be the right solution all for

00:50:22,030 --> 00:50:26,830
example a scrum in escrow projects we

00:50:24,580 --> 00:50:29,880
make this isn't like this would be the

00:50:26,830 --> 00:50:31,900
our back-end part this would be our

00:50:29,880 --> 00:50:34,780
front-end part and how we can

00:50:31,900 --> 00:50:37,750
collaborate things together to provide a

00:50:34,780 --> 00:50:40,560
right solution so again cause and effect

00:50:37,750 --> 00:50:43,990
seen in retrospect and do not repeat or

00:50:40,560 --> 00:50:48,010
it is visible but it doesn't repeat it

00:50:43,990 --> 00:50:50,190
it changes over the time and so we have

00:50:48,010 --> 00:50:54,250
to use emergent practices for it

00:50:50,190 --> 00:50:57,130
so next I will move to QIOs so here

00:50:54,250 --> 00:50:59,500
where we are not able to understand what

00:50:57,130 --> 00:51:03,039
would be the right solution at since

00:50:59,500 --> 00:51:06,210
respond as the key there like we have to

00:51:03,039 --> 00:51:10,690
act keep on acting we have to keep on

00:51:06,210 --> 00:51:13,059
trying our for the solution and respond

00:51:10,690 --> 00:51:15,849
on the basis of that so extreme

00:51:13,059 --> 00:51:18,460
programming as one of the framework

00:51:15,849 --> 00:51:23,769
which we discussed about we can use here

00:51:18,460 --> 00:51:26,200
for QIOs domain up xenophon because we

00:51:23,769 --> 00:51:29,950
can keep on trying with the best

00:51:26,200 --> 00:51:32,890
practices where we can manage a better

00:51:29,950 --> 00:51:38,650
code quality and test driven development

00:51:32,890 --> 00:51:40,299
and think about the solution so noble

00:51:38,650 --> 00:51:42,970
practices are discovered here every time

00:51:40,299 --> 00:51:47,549
we get a solution for it that is noble

00:51:42,970 --> 00:51:49,900
and that is a phenomenal for approval so

00:51:47,549 --> 00:52:02,319
this is the end of our presentation and

00:51:49,900 --> 00:52:04,680
if you have any question then yeah ok ok

00:52:02,319 --> 00:52:04,680

YouTube URL: https://www.youtube.com/watch?v=Xi-47L-Mfmg


