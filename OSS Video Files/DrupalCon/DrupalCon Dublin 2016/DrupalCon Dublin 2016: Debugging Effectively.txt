Title: DrupalCon Dublin 2016: Debugging Effectively
Publication date: 2016-09-27
Playlist: DrupalCon Dublin 2016
Description: 
	Software bugs are inevitable; some are especially difficult to track down, causing you to waste countless hours before throwing your hands up in defeat. It doesn't have to be this way! The mental fatigue and wasted time can be avoided by using strategies like identifying the most-appropriate tool, taking a logical & objective approach, challenging assumptions, listening to variables, isolating the code path, and reinforcing code with automated tests. Attendees will learn how to combine these techniques with the right mindset and attitude in order to debug their code quickly and effectively.

Slides:Â http://www.slideshare.net/colinodell/debugging-effectively-drupalcon-europe-2016
Captions: 
	00:00:00,000 --> 00:00:09,179
good afternoon everyone welcome to

00:00:05,520 --> 00:00:11,730
debugging effectively my name is Colin

00:00:09,179 --> 00:00:13,500
Odell and today I'll be teaching you why

00:00:11,730 --> 00:00:16,109
do bugging is important and how to do

00:00:13,500 --> 00:00:17,490
that effectively this talk is geared

00:00:16,109 --> 00:00:19,619
more towards beginner to intermediate

00:00:17,490 --> 00:00:21,660
level programmers but I think developers

00:00:19,619 --> 00:00:23,939
of all skill levels will find something

00:00:21,660 --> 00:00:27,029
useful in something interesting to take

00:00:23,939 --> 00:00:29,070
away from this talk so first about me

00:00:27,029 --> 00:00:30,840
again my name is Colin Odell and I am

00:00:29,070 --> 00:00:33,719
the lead web developer at unleash

00:00:30,840 --> 00:00:35,690
technologies we're a web and hosting

00:00:33,719 --> 00:00:38,820
firm based out of Maryland in the US

00:00:35,690 --> 00:00:40,320
I've been a PHP developer for about 14

00:00:38,820 --> 00:00:42,210
years now I've dabbled in other

00:00:40,320 --> 00:00:45,480
technologies like Java C sharp

00:00:42,210 --> 00:00:48,360
JavaScript recently some see but I

00:00:45,480 --> 00:00:50,160
really love working in PHP and even

00:00:48,360 --> 00:00:51,480
though we are at drupalcon and we're

00:00:50,160 --> 00:00:53,699
talking about Drupal we're talking about

00:00:51,480 --> 00:00:55,680
PHP a lot of these skills will be

00:00:53,699 --> 00:00:58,890
transferable to other languages and

00:00:55,680 --> 00:01:00,930
technologies you might know me from some

00:00:58,890 --> 00:01:03,000
of my PHP league projects I currently

00:01:00,930 --> 00:01:05,339
maintained the PHP league's common mark

00:01:03,000 --> 00:01:07,950
parser as well as the HTML to mark down

00:01:05,339 --> 00:01:11,880
converter you might also know me from my

00:01:07,950 --> 00:01:13,770
PHP 7 upgrade guide ebook and i thought

00:01:11,880 --> 00:01:16,200
i had another bullet list but apparently

00:01:13,770 --> 00:01:18,360
I don't it was going to be my twitter

00:01:16,200 --> 00:01:20,790
handle which is down here I'm at Colin

00:01:18,360 --> 00:01:22,350
Odell if you have any questions I'll try

00:01:20,790 --> 00:01:24,270
and answer them at the end if I'm unable

00:01:22,350 --> 00:01:26,820
to answer those questions feel free to

00:01:24,270 --> 00:01:29,520
come up to me ask me questions or tweet

00:01:26,820 --> 00:01:30,810
me whatever works best for you so a

00:01:29,520 --> 00:01:33,240
brief overview of what we'll be

00:01:30,810 --> 00:01:34,920
discussing today first we're going to

00:01:33,240 --> 00:01:36,570
talk about the importance of debugging

00:01:34,920 --> 00:01:39,600
why is it important why are we spending

00:01:36,570 --> 00:01:41,400
an hour here today talking about it from

00:01:39,600 --> 00:01:43,290
there I'll go into a debugging process

00:01:41,400 --> 00:01:46,500
and how we actually go from identifying

00:01:43,290 --> 00:01:48,000
the bug to resolving it I'll also touch

00:01:46,500 --> 00:01:49,619
on some really useful tools and

00:01:48,000 --> 00:01:52,320
techniques you can use windy bugging

00:01:49,619 --> 00:01:53,880
issues and then lastly if we have time

00:01:52,320 --> 00:01:56,939
I'll open it up for some questions and

00:01:53,880 --> 00:01:59,700
answers so when you think about

00:01:56,939 --> 00:02:01,920
debugging what what word would you use

00:01:59,700 --> 00:02:04,229
to describe debugging you might say

00:02:01,920 --> 00:02:06,329
debugging is difficult or debugging is

00:02:04,229 --> 00:02:08,789
time-consuming debugging is annoying i

00:02:06,329 --> 00:02:10,259
hate debugging or if you're like me you

00:02:08,789 --> 00:02:12,700
might say debugging is a really fun

00:02:10,259 --> 00:02:14,349
challenge personally I love puzzle

00:02:12,700 --> 00:02:17,110
I love challenges all of critical

00:02:14,349 --> 00:02:19,810
thinking so trying to debug a really

00:02:17,110 --> 00:02:21,099
difficult issue is really fun for me but

00:02:19,810 --> 00:02:23,680
more than anything I think that

00:02:21,099 --> 00:02:25,180
debugging is important in fact I'd argue

00:02:23,680 --> 00:02:28,330
that debugging is the single most

00:02:25,180 --> 00:02:30,340
important skill in programming now that

00:02:28,330 --> 00:02:32,650
is kind of a bold statement so why would

00:02:30,340 --> 00:02:34,720
I say something like that well let's

00:02:32,650 --> 00:02:37,000
think about how much time as developers

00:02:34,720 --> 00:02:39,849
we actually spend coding and debugging

00:02:37,000 --> 00:02:41,380
and planning and all of these things you

00:02:39,849 --> 00:02:43,540
might think okay I spend about a third

00:02:41,380 --> 00:02:45,700
of my time planning that might be

00:02:43,540 --> 00:02:48,160
meeting with shareholders triaging

00:02:45,700 --> 00:02:50,680
tickets responding to email messaging

00:02:48,160 --> 00:02:52,239
people on slack going to meetings and

00:02:50,680 --> 00:02:53,560
then the other two-thirds of the time

00:02:52,239 --> 00:02:55,569
you're sitting there at your keyboard

00:02:53,560 --> 00:02:58,239
furiously typing away implementing that

00:02:55,569 --> 00:02:59,860
cool new feature but do we really spend

00:02:58,239 --> 00:03:02,590
two-thirds of our time coding new

00:02:59,860 --> 00:03:04,989
features according to the mythical man

00:03:02,590 --> 00:03:08,140
month we actually spend up to half of

00:03:04,989 --> 00:03:09,730
our time testing and debugging and only

00:03:08,140 --> 00:03:12,489
one-sixth of our time actually

00:03:09,730 --> 00:03:14,410
implementing new code now testing and

00:03:12,489 --> 00:03:15,579
debugging does cover things like you

00:03:14,410 --> 00:03:18,459
know figuring out issues that are

00:03:15,579 --> 00:03:20,350
reported by users or shareholders it

00:03:18,459 --> 00:03:22,720
includes automated testing manual

00:03:20,350 --> 00:03:24,220
testing debugging problems trying to

00:03:22,720 --> 00:03:26,709
figure out how to implement something

00:03:24,220 --> 00:03:29,319
all of that takes up about half of our

00:03:26,709 --> 00:03:31,569
time so if we're spending half of our

00:03:29,319 --> 00:03:33,160
time testing and debugging things then

00:03:31,569 --> 00:03:34,660
surely that's something that would be

00:03:33,160 --> 00:03:38,170
good to become efficient and effective

00:03:34,660 --> 00:03:39,850
at now to put a definition to the word

00:03:38,170 --> 00:03:42,280
debugging I really like this one from

00:03:39,850 --> 00:03:44,139
Wikipedia and it says that debugging is

00:03:42,280 --> 00:03:46,239
the process of finding and resolving

00:03:44,139 --> 00:03:48,250
bugs or defects that prevent correct

00:03:46,239 --> 00:03:51,340
operation of computer software or a

00:03:48,250 --> 00:03:53,859
system and I really highlight the word

00:03:51,340 --> 00:03:55,870
process here because the process of

00:03:53,859 --> 00:03:58,630
debugging is so important to the art of

00:03:55,870 --> 00:04:00,630
debugging process really is the

00:03:58,630 --> 00:04:03,639
foundation of effective debugging

00:04:00,630 --> 00:04:06,910
process includes things like identifying

00:04:03,639 --> 00:04:09,099
what the issue is knowing how to go from

00:04:06,910 --> 00:04:10,930
taking the issue to identifying it to

00:04:09,099 --> 00:04:13,120
resolving at that entire process in the

00:04:10,930 --> 00:04:15,790
middle that is really the foundation of

00:04:13,120 --> 00:04:17,650
debugging and as you go through your

00:04:15,790 --> 00:04:19,239
debugging process and more and more and

00:04:17,650 --> 00:04:20,859
more you're going to start to gain

00:04:19,239 --> 00:04:22,630
experience you're going to gain

00:04:20,859 --> 00:04:24,789
experience with how to debug an issue

00:04:22,630 --> 00:04:25,330
you're going to gain experience with the

00:04:24,789 --> 00:04:26,800
platform you're

00:04:25,330 --> 00:04:28,240
working on so you're going to learn more

00:04:26,800 --> 00:04:30,520
and more about how the internals of

00:04:28,240 --> 00:04:32,020
Drupal works you're also going to gain

00:04:30,520 --> 00:04:34,449
experience with your tool so you're

00:04:32,020 --> 00:04:36,370
debuggers with networking you're going

00:04:34,449 --> 00:04:39,189
to learn these technologies and get more

00:04:36,370 --> 00:04:41,110
and more experience with those and then

00:04:39,189 --> 00:04:42,849
as you gain more and more experience in

00:04:41,110 --> 00:04:45,550
your career you would like to develop

00:04:42,849 --> 00:04:47,310
what I like to call a sixth sense some

00:04:45,550 --> 00:04:49,389
people like to use the word intuition

00:04:47,310 --> 00:04:51,099
basically what I'm talking about here is

00:04:49,389 --> 00:04:53,319
the ability to see an issue and

00:04:51,099 --> 00:04:55,449
immediately know what kind of issue

00:04:53,319 --> 00:04:56,800
you're dealing with so you see this

00:04:55,449 --> 00:04:58,180
error and it looks like a my sequel

00:04:56,800 --> 00:05:01,090
error and you immediately know that

00:04:58,180 --> 00:05:02,500
sequel syntax is invalid or there's a

00:05:01,090 --> 00:05:04,990
firewall up and that's why I'm getting

00:05:02,500 --> 00:05:06,280
this connection timed out ever now the

00:05:04,990 --> 00:05:08,710
reason I don't like to use the word

00:05:06,280 --> 00:05:10,360
intuition is because intuition sort of

00:05:08,710 --> 00:05:12,460
implies that there's this mythical

00:05:10,360 --> 00:05:15,310
quality involved like there's some

00:05:12,460 --> 00:05:18,699
external magical force out there that

00:05:15,310 --> 00:05:20,860
causes this thought to bubble up but

00:05:18,699 --> 00:05:24,370
really I'm talking about building up

00:05:20,860 --> 00:05:25,779
this mental library of heuristics so the

00:05:24,370 --> 00:05:28,090
more and more you debug networking

00:05:25,779 --> 00:05:30,310
issues the easier it'll be for you to

00:05:28,090 --> 00:05:31,719
identify what a network issue arises and

00:05:30,310 --> 00:05:33,789
then your mind will immediately jump to

00:05:31,719 --> 00:05:36,550
that as the most logical explanation for

00:05:33,789 --> 00:05:38,110
that issue and as you debug more and

00:05:36,550 --> 00:05:39,789
more of different types of issues again

00:05:38,110 --> 00:05:42,460
you're building up that mental model of

00:05:39,789 --> 00:05:46,180
okay this behavior probably means that

00:05:42,460 --> 00:05:48,039
this issue here so in order to develop

00:05:46,180 --> 00:05:49,870
that sixth sense and become an effective

00:05:48,039 --> 00:05:52,330
debugger you really just need to focus

00:05:49,870 --> 00:05:54,159
on the process and as you get that

00:05:52,330 --> 00:05:56,020
process down the experience will come

00:05:54,159 --> 00:05:59,469
and so will the development of that

00:05:56,020 --> 00:06:01,319
sixth sense so let's talk about that

00:05:59,469 --> 00:06:03,400
process and what that process looks like

00:06:01,319 --> 00:06:05,199
and let's start by talking about the

00:06:03,400 --> 00:06:08,020
process that most new developers go

00:06:05,199 --> 00:06:09,729
through when they start programming so

00:06:08,020 --> 00:06:11,620
when a junior developer encounters an

00:06:09,729 --> 00:06:14,379
issue what are the usual steps that

00:06:11,620 --> 00:06:15,719
they're going to take well maybe they're

00:06:14,379 --> 00:06:17,889
going to try and clear the drupal cash

00:06:15,719 --> 00:06:20,379
hopefully not on production because that

00:06:17,889 --> 00:06:21,759
might cause a white screen of death but

00:06:20,379 --> 00:06:23,860
the reason they're going to do that is

00:06:21,759 --> 00:06:25,330
because it's helped fix issues before

00:06:23,860 --> 00:06:27,490
and so there's going to say well it

00:06:25,330 --> 00:06:29,919
worked on this other thing so maybe I'll

00:06:27,490 --> 00:06:31,930
try it out and see what happens or maybe

00:06:29,919 --> 00:06:33,789
they delete all the dependencies and

00:06:31,930 --> 00:06:36,250
reinstall them or maybe they'd

00:06:33,789 --> 00:06:38,440
everything to 777 which is a really bad

00:06:36,250 --> 00:06:38,990
idea but again it solved their

00:06:38,440 --> 00:06:40,640
permissions

00:06:38,990 --> 00:06:42,140
you for them in the past and they don't

00:06:40,640 --> 00:06:43,640
really know that they're dealing with

00:06:42,140 --> 00:06:46,610
permissions issue so they just kind of

00:06:43,640 --> 00:06:48,200
blindly try it and hope for the best now

00:06:46,610 --> 00:06:50,090
I'm not saying these are invalid

00:06:48,200 --> 00:06:54,440
solutions there are certainly valid use

00:06:50,090 --> 00:06:56,210
cases for at least two of them but if

00:06:54,440 --> 00:06:58,370
you're a junior developer I challenge

00:06:56,210 --> 00:07:00,560
you to really think through the problem

00:06:58,370 --> 00:07:02,510
don't just clear the cache or reinstall

00:07:00,560 --> 00:07:04,730
your dependencies see that it works and

00:07:02,510 --> 00:07:06,740
move on with your day really understand

00:07:04,730 --> 00:07:08,930
why did clearing the cache solve this

00:07:06,740 --> 00:07:11,990
issue was there some bad value in my

00:07:08,930 --> 00:07:13,520
cash did the cash get invalidated at

00:07:11,990 --> 00:07:15,860
some point or did he get corrupted

00:07:13,520 --> 00:07:17,960
what's going on here so really think

00:07:15,860 --> 00:07:21,740
through why that answer was the correct

00:07:17,960 --> 00:07:23,440
one something else the junior developers

00:07:21,740 --> 00:07:25,640
will typically do is to google the error

00:07:23,440 --> 00:07:28,790
they'll come up with ten posts from

00:07:25,640 --> 00:07:31,040
stack overflow or Twitter or github or

00:07:28,790 --> 00:07:32,960
wherever and they're going to try every

00:07:31,040 --> 00:07:34,370
single solution they're going to try a

00:07:32,960 --> 00:07:36,080
solution one if it doesn't work there

00:07:34,370 --> 00:07:38,090
and move on try solution to that doesn't

00:07:36,080 --> 00:07:40,100
work they'll go to the third post try

00:07:38,090 --> 00:07:41,360
that see that it works and they'll

00:07:40,100 --> 00:07:43,700
commit their changes and move on with

00:07:41,360 --> 00:07:44,870
their day now again it's totally fine to

00:07:43,700 --> 00:07:47,900
google the error and to try different

00:07:44,870 --> 00:07:49,520
things but again remember that debugging

00:07:47,900 --> 00:07:51,560
isn't just blindly applying different

00:07:49,520 --> 00:07:53,360
fixes and moving on debugging is a

00:07:51,560 --> 00:07:56,450
process and you really need to

00:07:53,360 --> 00:07:58,340
understand why it is that solution three

00:07:56,450 --> 00:08:00,950
worked when solutions one and two did it

00:07:58,340 --> 00:08:02,810
what was the logic behind that what

00:08:00,950 --> 00:08:04,970
types of issues where solutions wanted

00:08:02,810 --> 00:08:09,080
to addressing that solution three didn't

00:08:04,970 --> 00:08:11,570
address a junior developer will also

00:08:09,080 --> 00:08:12,800
immediately go and ask someone else so

00:08:11,570 --> 00:08:14,990
maybe they've never encountered this

00:08:12,800 --> 00:08:16,970
issue before we will ask colleague will

00:08:14,990 --> 00:08:18,770
go on Twitter they'll go on the forums

00:08:16,970 --> 00:08:22,130
and we'll ask hey I'm seeing this error

00:08:18,770 --> 00:08:24,530
I don't know what to do and that's

00:08:22,130 --> 00:08:26,270
totally fine again it's fine to ask for

00:08:24,530 --> 00:08:27,650
help but when you get that answer don't

00:08:26,270 --> 00:08:30,230
just apply it move on with your day

00:08:27,650 --> 00:08:33,530
understand why that answer was the

00:08:30,230 --> 00:08:35,810
correct answer and then unfortunately I

00:08:33,530 --> 00:08:39,700
think sometimes newer developers tend to

00:08:35,810 --> 00:08:42,890
give up if they can't figure out issue I

00:08:39,700 --> 00:08:44,780
don't really I'm not fond of when people

00:08:42,890 --> 00:08:47,030
give up because I think that there is

00:08:44,780 --> 00:08:48,950
always an explanation there is always a

00:08:47,030 --> 00:08:52,080
solution if you're persistent enough to

00:08:48,950 --> 00:08:53,790
find it and as I'll touch on later

00:08:52,080 --> 00:08:55,350
when you are persistent ninety-five

00:08:53,790 --> 00:08:57,600
percent of the time you will find the

00:08:55,350 --> 00:08:58,890
issue if you stick with it and that

00:08:57,600 --> 00:09:00,330
other five percent you will learn

00:08:58,890 --> 00:09:04,890
something even if you couldn't solve

00:09:00,330 --> 00:09:06,870
that issue another trap that I think nor

00:09:04,890 --> 00:09:08,850
developers and even intermediate

00:09:06,870 --> 00:09:11,910
developers fall onto sometimes is what's

00:09:08,850 --> 00:09:13,980
known as the XY problem so they're faced

00:09:11,910 --> 00:09:16,170
with some issue or some task they need

00:09:13,980 --> 00:09:19,650
to implement and they say okay I need to

00:09:16,170 --> 00:09:21,390
do X how do I go about doing X and maybe

00:09:19,650 --> 00:09:23,760
they can't find the right solution on

00:09:21,390 --> 00:09:25,440
the right implementation for X should

00:09:23,760 --> 00:09:27,930
they say well I can't figure this out

00:09:25,440 --> 00:09:29,520
but you know what I think solution Y

00:09:27,930 --> 00:09:31,830
might work i think this other work

00:09:29,520 --> 00:09:34,500
around tack type thing network so then

00:09:31,830 --> 00:09:36,360
we'll go ask how do i do why they'll go

00:09:34,500 --> 00:09:39,450
ask on sack overflow the last their

00:09:36,360 --> 00:09:42,390
colleague on the next desk over but the

00:09:39,450 --> 00:09:45,210
problem with asking how do i do why is

00:09:42,390 --> 00:09:47,580
that you're not learning how to you know

00:09:45,210 --> 00:09:49,200
solve the problem correctly you're

00:09:47,580 --> 00:09:51,600
giving up on finding that proper

00:09:49,200 --> 00:09:54,210
approach and then instead you're

00:09:51,600 --> 00:09:56,070
resorting to our work around and when

00:09:54,210 --> 00:09:58,770
you apply a workaround instead that

00:09:56,070 --> 00:10:01,470
could lead to some issues forever along

00:09:58,770 --> 00:10:03,180
the road now at this point i would like

00:10:01,470 --> 00:10:05,130
to share our personal anecdote from when

00:10:03,180 --> 00:10:08,340
I was a junior developer and I fell prey

00:10:05,130 --> 00:10:10,470
to this XY problem so one of my first

00:10:08,340 --> 00:10:12,180
big projects as a new developer at an

00:10:10,470 --> 00:10:15,450
agency was to build this awesome new

00:10:12,180 --> 00:10:17,490
magenta website and this website was for

00:10:15,450 --> 00:10:19,950
a restaurant that ships seafood out

00:10:17,490 --> 00:10:21,900
overnight and so they needed us to build

00:10:19,950 --> 00:10:23,790
this custom integration with the

00:10:21,900 --> 00:10:25,440
shipping carrier so that we could send

00:10:23,790 --> 00:10:27,270
all the data to the carrier about how

00:10:25,440 --> 00:10:29,370
much the package Wade where it's going

00:10:27,270 --> 00:10:32,040
who's paying for it and then the carrier

00:10:29,370 --> 00:10:33,600
would send back the shipping labels and

00:10:32,040 --> 00:10:35,940
all the rate information on how much

00:10:33,600 --> 00:10:37,590
that she was going to cost and I was

00:10:35,940 --> 00:10:39,180
able to implement that as a junior

00:10:37,590 --> 00:10:41,310
developer and I was really proud of that

00:10:39,180 --> 00:10:42,660
and everything has worked fine since

00:10:41,310 --> 00:10:44,310
then it's about it's been about six

00:10:42,660 --> 00:10:48,420
years and that code is still running

00:10:44,310 --> 00:10:51,570
great but then one day it stopped

00:10:48,420 --> 00:10:53,850
working it was really bizarre these PDF

00:10:51,570 --> 00:10:55,440
of the PDF files of the shipping labels

00:10:53,850 --> 00:10:58,350
were working fine we didn't touch the

00:10:55,440 --> 00:11:00,930
code in six years and I just broke I was

00:10:58,350 --> 00:11:03,510
really confused about that and I checked

00:11:00,930 --> 00:11:04,480
in get lab and the history confirmed my

00:11:03,510 --> 00:11:06,790
suspicions that we know

00:11:04,480 --> 00:11:08,620
touch that code so the pdfs were

00:11:06,790 --> 00:11:10,540
corrupted i figured okay why are they

00:11:08,620 --> 00:11:12,399
corrupted let me fire up my text editor

00:11:10,540 --> 00:11:15,610
and just look at the plain text of this

00:11:12,399 --> 00:11:18,160
PDF and when I did I saw a bunch of base

00:11:15,610 --> 00:11:20,079
65 encoded text like I'd expect to see

00:11:18,160 --> 00:11:23,079
and then right in the middle of that

00:11:20,079 --> 00:11:27,250
base 65 and coded text was an HTML tag

00:11:23,079 --> 00:11:29,110
which you can see up here I thought wow

00:11:27,250 --> 00:11:32,380
that's really bizarre why is there HTML

00:11:29,110 --> 00:11:34,209
in my pdfs so what i did is i grep for

00:11:32,380 --> 00:11:36,910
this exact string because i had to be

00:11:34,209 --> 00:11:39,519
coming from somewhere and as a result i

00:11:36,910 --> 00:11:40,959
found this beautiful piece of code what

00:11:39,519 --> 00:11:42,970
this code is doing is it's using a

00:11:40,959 --> 00:11:45,310
regular expression so look for a head

00:11:42,970 --> 00:11:48,610
tag and then when it finds a head tag in

00:11:45,310 --> 00:11:50,199
any response body it's going to replace

00:11:48,610 --> 00:11:51,970
that regular is going to look for the

00:11:50,199 --> 00:11:55,990
head tag and at the very end is going to

00:11:51,970 --> 00:11:57,970
append this HTML tag I look through the

00:11:55,990 --> 00:11:59,829
history to figure out why this code was

00:11:57,970 --> 00:12:02,170
in there it was because the backend of

00:11:59,829 --> 00:12:04,540
Magento didn't support IE 9 and so I

00:12:02,170 --> 00:12:07,300
needed to tell I e92 behave like IE 8

00:12:04,540 --> 00:12:08,949
and I didn't know the correct way to get

00:12:07,300 --> 00:12:10,899
this HTML into their as a junior

00:12:08,949 --> 00:12:13,029
developer so I have the brilliant idea

00:12:10,899 --> 00:12:15,250
let's use a regular expression to look

00:12:13,029 --> 00:12:17,829
at the response output for every single

00:12:15,250 --> 00:12:22,630
HTTP response and just do this regex

00:12:17,829 --> 00:12:24,970
replace and why did this affect the pdfs

00:12:22,630 --> 00:12:29,800
well it turns out that base 65 encoding

00:12:24,970 --> 00:12:31,300
can contain a less than sign AGA d so if

00:12:29,800 --> 00:12:33,279
you can learn two things from the story

00:12:31,300 --> 00:12:36,040
number one don't parse the HTML with

00:12:33,279 --> 00:12:37,990
regex it's a terrible idea but more

00:12:36,040 --> 00:12:40,420
importantly solve problems the right way

00:12:37,990 --> 00:12:43,029
because when you resort to these types

00:12:40,420 --> 00:12:46,709
of workarounds it can bite you later on

00:12:43,029 --> 00:12:46,709
and cause more issues for you later on

00:12:46,949 --> 00:12:51,250
now I think there are some other

00:12:48,880 --> 00:12:52,959
pitfalls that we as developers sometimes

00:12:51,250 --> 00:12:55,540
fall into especially when we're new to

00:12:52,959 --> 00:12:57,160
the craft of programming we sometimes

00:12:55,540 --> 00:12:58,779
fall prey to the sort of magical

00:12:57,160 --> 00:13:00,579
thinking where we say things like I

00:12:58,779 --> 00:13:03,130
don't know why my website is behaving

00:13:00,579 --> 00:13:05,440
like this or for some reason it's doing

00:13:03,130 --> 00:13:07,120
X and I thought it would do y or this

00:13:05,440 --> 00:13:10,990
behavior just doesn't make any sense to

00:13:07,120 --> 00:13:12,670
me I don't like this kind of magical

00:13:10,990 --> 00:13:14,870
thinking because it assumes that

00:13:12,670 --> 00:13:16,580
computers are magical and that

00:13:14,870 --> 00:13:18,680
they're sentient and they do their own

00:13:16,580 --> 00:13:21,800
things on their own which is simply not

00:13:18,680 --> 00:13:24,680
true computers are logical machines they

00:13:21,800 --> 00:13:27,830
run on zeros and ones on off true false

00:13:24,680 --> 00:13:31,370
yes no the code that the computer runs

00:13:27,830 --> 00:13:33,230
is also very logical and if a bug is an

00:13:31,370 --> 00:13:36,230
issue in our code if a bug is a piece of

00:13:33,230 --> 00:13:40,520
code then by neff definition that bug

00:13:36,230 --> 00:13:42,440
must be logical now I really like this

00:13:40,520 --> 00:13:44,990
quote here from Nick parlante in

00:13:42,440 --> 00:13:47,120
debugging Zen and he says that the bug

00:13:44,990 --> 00:13:49,310
is not moving around in your code trying

00:13:47,120 --> 00:13:51,440
to trick or evade you it is just sitting

00:13:49,310 --> 00:13:54,860
in one place doing the wrong thing in

00:13:51,440 --> 00:13:56,240
the same way every time when you fire up

00:13:54,860 --> 00:13:58,580
your debugger to figure out what's going

00:13:56,240 --> 00:14:00,589
on that piece of code isn't jumping from

00:13:58,580 --> 00:14:03,200
one file into the next file and hiding

00:14:00,589 --> 00:14:06,380
behind this class you know it's not

00:14:03,200 --> 00:14:08,330
running around it sit there the code the

00:14:06,380 --> 00:14:10,850
code that has an issue is right in front

00:14:08,330 --> 00:14:12,310
of you and it is it is a logical piece

00:14:10,850 --> 00:14:14,450
of code that has a logical explanation

00:14:12,310 --> 00:14:17,180
you just need to be really persistent

00:14:14,450 --> 00:14:21,170
and finding it not give up on trying to

00:14:17,180 --> 00:14:23,150
find it now when i debug issues I always

00:14:21,170 --> 00:14:25,220
assume that my code is the problem

00:14:23,150 --> 00:14:26,839
because let's think about it let's say

00:14:25,220 --> 00:14:29,270
your drupal site suddenly starts

00:14:26,839 --> 00:14:31,220
experiencing an issue what are the

00:14:29,270 --> 00:14:33,650
chances that the issue is caused by code

00:14:31,220 --> 00:14:35,600
that one person wrote verses code that's

00:14:33,650 --> 00:14:37,520
in a module that tens of thousands of

00:14:35,600 --> 00:14:39,020
people wrote our code that's in core

00:14:37,520 --> 00:14:41,990
that hundreds of thousands of people

00:14:39,020 --> 00:14:44,029
might use on the daily basis the chances

00:14:41,990 --> 00:14:46,550
are extremely high that the bug is in

00:14:44,029 --> 00:14:48,260
your code so before you start spending

00:14:46,550 --> 00:14:50,330
your time debugging Drupal core the

00:14:48,260 --> 00:14:51,890
module what I like to do is always

00:14:50,330 --> 00:14:54,350
assume that my code has the problem and

00:14:51,890 --> 00:14:56,480
actually validate whether or not my code

00:14:54,350 --> 00:14:58,339
does indeed have that problem because

00:14:56,480 --> 00:15:00,860
ninety-five percent of the time it's in

00:14:58,339 --> 00:15:03,470
my code and that other five percent of

00:15:00,860 --> 00:15:05,390
the time maybe is another module but at

00:15:03,470 --> 00:15:07,550
least I know that my code is correct and

00:15:05,390 --> 00:15:09,529
I'm not going to waste time in ninety

00:15:07,550 --> 00:15:13,190
five percent of the cases looking in

00:15:09,529 --> 00:15:14,930
places where there is no issue now if

00:15:13,190 --> 00:15:17,089
you're helping other people solve their

00:15:14,930 --> 00:15:19,040
issues and investigate those issues I

00:15:17,089 --> 00:15:21,140
think it's safe to assume that their

00:15:19,040 --> 00:15:22,580
code is the problem I'm not saying go

00:15:21,140 --> 00:15:25,700
and blame them and say hey your code

00:15:22,580 --> 00:15:27,500
sucks you messed up but when you start

00:15:25,700 --> 00:15:28,220
the debugging process focus on their

00:15:27,500 --> 00:15:30,650
code for

00:15:28,220 --> 00:15:33,350
and validate that their code is indeed

00:15:30,650 --> 00:15:37,010
correct before you move on to looking at

00:15:33,350 --> 00:15:39,920
contributed code now in terms of the

00:15:37,010 --> 00:15:42,170
process that we use when debugging I've

00:15:39,920 --> 00:15:44,960
kind of developed this five-step process

00:15:42,170 --> 00:15:46,940
that I use on a daily basis and I've

00:15:44,960 --> 00:15:48,740
never really written it down until I

00:15:46,940 --> 00:15:49,670
started creating this presentation as

00:15:48,740 --> 00:15:52,040
always just been something that's

00:15:49,670 --> 00:15:53,870
evolved over time that I've just kind of

00:15:52,040 --> 00:15:56,030
learned to go with and it's worked

00:15:53,870 --> 00:15:58,400
really well for me so if you don't have

00:15:56,030 --> 00:16:00,500
a really solid debugging process I think

00:15:58,400 --> 00:16:02,180
these five steps make it really easy to

00:16:00,500 --> 00:16:04,190
go from identifying an issue to

00:16:02,180 --> 00:16:07,190
resolving it so I'd like to share these

00:16:04,190 --> 00:16:08,600
five steps with you today the first

00:16:07,190 --> 00:16:10,580
thing that you should do when you

00:16:08,600 --> 00:16:13,250
encounter an issue is to gather as much

00:16:10,580 --> 00:16:14,990
information about it as possible so

00:16:13,250 --> 00:16:17,750
first define what is the expected

00:16:14,990 --> 00:16:20,270
behavior versus the actual behavior so I

00:16:17,750 --> 00:16:22,580
expect when I submit this form that it

00:16:20,270 --> 00:16:24,350
takes me to this confirmation page the

00:16:22,580 --> 00:16:26,360
actual behavior is I submit the form I

00:16:24,350 --> 00:16:30,680
see a big right error message I have

00:16:26,360 --> 00:16:32,990
these entries in watchdog once you've

00:16:30,680 --> 00:16:34,880
defined that behavior then go ahead and

00:16:32,990 --> 00:16:36,800
look for more information about it go

00:16:34,880 --> 00:16:39,170
look for error messages or better yet

00:16:36,800 --> 00:16:41,210
find stack traces the nice thing about

00:16:39,170 --> 00:16:43,100
stack traces is they tell you exactly

00:16:41,210 --> 00:16:45,620
which line of code cause the issue to

00:16:43,100 --> 00:16:47,990
occur and every line of code to ended up

00:16:45,620 --> 00:16:49,730
calling that and if you can't get to

00:16:47,990 --> 00:16:51,410
stack traces if all you can get is an

00:16:49,730 --> 00:16:53,660
error message that's still really

00:16:51,410 --> 00:16:55,310
valuable because error messages aren't

00:16:53,660 --> 00:16:57,200
these are randomly defined strings that

00:16:55,310 --> 00:16:59,840
your code just decides to spit out on

00:16:57,200 --> 00:17:02,270
its own it made up those error messages

00:16:59,840 --> 00:17:03,740
live in the code somewhere and so you

00:17:02,270 --> 00:17:05,600
can search your code for that error

00:17:03,740 --> 00:17:07,910
message you can search Google stack

00:17:05,600 --> 00:17:09,350
overflow project forms for that error

00:17:07,910 --> 00:17:11,650
message and you'll get a lot of really

00:17:09,350 --> 00:17:13,760
good information about what's going on

00:17:11,650 --> 00:17:15,890
now if the issue is occurring on the

00:17:13,760 --> 00:17:17,210
front of the front end of the website it

00:17:15,890 --> 00:17:19,550
can be really helpful to take a

00:17:17,210 --> 00:17:21,530
screenshot and if it's the end user

00:17:19,550 --> 00:17:23,680
that's experiencing natio you can of

00:17:21,530 --> 00:17:26,420
course ask them to take the screenshot I

00:17:23,680 --> 00:17:28,910
found that even the most inexperienced

00:17:26,420 --> 00:17:30,560
computer illiterate users are really

00:17:28,910 --> 00:17:32,510
good about taking screenshots they know

00:17:30,560 --> 00:17:33,770
how to do it and if they don't you can

00:17:32,510 --> 00:17:36,380
point them to an article and they'll

00:17:33,770 --> 00:17:38,210
gladly take that screenshot for you now

00:17:36,380 --> 00:17:40,070
you might get it as facts you might get

00:17:38,210 --> 00:17:41,090
it paste it in a word document in a zip

00:17:40,070 --> 00:17:42,919
file or some other

00:17:41,090 --> 00:17:44,570
bizarre way but you'll still get that

00:17:42,919 --> 00:17:46,610
screenshot and that's going to provide

00:17:44,570 --> 00:17:49,159
you a lot of really good information you

00:17:46,610 --> 00:17:50,690
can see what URL they were on what the

00:17:49,159 --> 00:17:52,460
date and time is if that shows in the

00:17:50,690 --> 00:17:54,230
corner of their system you can see what

00:17:52,460 --> 00:17:56,720
the form input is you can get all this

00:17:54,230 --> 00:17:59,690
really good valuable information just by

00:17:56,720 --> 00:18:01,190
asking for that screenshot you can also

00:17:59,690 --> 00:18:03,080
get the browser and operating system

00:18:01,190 --> 00:18:04,580
from that screenshot and if you need

00:18:03,080 --> 00:18:06,260
more information about the particular

00:18:04,580 --> 00:18:08,679
version you can just ask them to go to

00:18:06,260 --> 00:18:11,630
the about menu and get that information

00:18:08,679 --> 00:18:13,549
it's also really useful to get the date

00:18:11,630 --> 00:18:15,320
and time that the issue occurred because

00:18:13,549 --> 00:18:18,830
then you can use that and compare it to

00:18:15,320 --> 00:18:20,600
your logs to figure out where we're in

00:18:18,830 --> 00:18:22,070
the logs was that happening what was the

00:18:20,600 --> 00:18:23,690
error message that occurred at that time

00:18:22,070 --> 00:18:25,340
were there any errors that came

00:18:23,690 --> 00:18:27,169
immediately before it or immediately

00:18:25,340 --> 00:18:31,070
after that to try and trace that

00:18:27,169 --> 00:18:33,409
solution once you've gotten all the

00:18:31,070 --> 00:18:34,850
information you need about the issue now

00:18:33,409 --> 00:18:37,399
you can go ahead and try to replicate

00:18:34,850 --> 00:18:39,350
the issue try and identify which steps

00:18:37,399 --> 00:18:42,169
do I need to take to make this issue

00:18:39,350 --> 00:18:44,120
occur and when you try to replicate the

00:18:42,169 --> 00:18:46,640
issue you really want to figure out

00:18:44,120 --> 00:18:48,580
exactly which steps make it that issue

00:18:46,640 --> 00:18:50,779
occur one hundred percent of the time

00:18:48,580 --> 00:18:52,309
it's really important that you're able

00:18:50,779 --> 00:18:55,010
to replicate it with a hundred percent

00:18:52,309 --> 00:18:56,690
certainty let's say you can only

00:18:55,010 --> 00:18:58,970
replicate the issue fifty percent of the

00:18:56,690 --> 00:19:01,250
time you go through your steps and only

00:18:58,970 --> 00:19:02,870
half the time the issue comes up well

00:19:01,250 --> 00:19:04,490
later on when you think you solved it

00:19:02,870 --> 00:19:06,320
they run through those steps again you

00:19:04,490 --> 00:19:08,419
see that everything is fine how do you

00:19:06,320 --> 00:19:10,370
know that it's fine because you fix it

00:19:08,419 --> 00:19:12,980
or just fine because it was that lucky

00:19:10,370 --> 00:19:14,539
fifty percent of the time so you really

00:19:12,980 --> 00:19:16,640
need to replicate the issue with one

00:19:14,539 --> 00:19:19,399
hundred percent certainty so that later

00:19:16,640 --> 00:19:23,750
on you can positively confirm that your

00:19:19,399 --> 00:19:25,610
solution is valid once you're able to

00:19:23,750 --> 00:19:27,799
replicate the issue now you can go into

00:19:25,610 --> 00:19:29,330
the code and start to identify what the

00:19:27,799 --> 00:19:30,919
call part is figure out what line of

00:19:29,330 --> 00:19:33,110
code is causing the issue what is the

00:19:30,919 --> 00:19:35,600
configuration or miss configuration

00:19:33,110 --> 00:19:37,309
that's causing that issue and when you

00:19:35,600 --> 00:19:39,559
go to identify the culprit you want to

00:19:37,309 --> 00:19:41,240
be really methodical about how you go

00:19:39,559 --> 00:19:43,190
about looking through the code and

00:19:41,240 --> 00:19:44,990
finding issues you don't want to just

00:19:43,190 --> 00:19:46,490
jump every which way looking in that

00:19:44,990 --> 00:19:49,039
file looking over there looking in the

00:19:46,490 --> 00:19:50,809
database looking in your cash really try

00:19:49,039 --> 00:19:53,299
and think through what is the problem

00:19:50,809 --> 00:19:53,910
what are the symptoms where might this

00:19:53,299 --> 00:19:56,790
bug below

00:19:53,910 --> 00:19:58,920
cated and kind of go from there and as

00:19:56,790 --> 00:20:01,500
you go through this process I think it's

00:19:58,920 --> 00:20:03,600
really important to make no assumptions

00:20:01,500 --> 00:20:05,400
don't assume that your code works

00:20:03,600 --> 00:20:07,740
because you wrote it don't assume that

00:20:05,400 --> 00:20:10,230
the code works because the senior person

00:20:07,740 --> 00:20:13,050
at your company wrote it really trying

00:20:10,230 --> 00:20:15,210
if you have any assumptions validate

00:20:13,050 --> 00:20:16,980
them don't just accept them blindly but

00:20:15,210 --> 00:20:19,290
someone says it works just go double

00:20:16,980 --> 00:20:20,640
check it just to make sure I can't tell

00:20:19,290 --> 00:20:22,800
you the number of times that I've

00:20:20,640 --> 00:20:25,050
thought oh yeah that's not a problem I

00:20:22,800 --> 00:20:26,550
know I wrote that correctly in two hours

00:20:25,050 --> 00:20:30,660
later I look at that code again I say

00:20:26,550 --> 00:20:32,310
crap I messed up so really make sure

00:20:30,660 --> 00:20:34,320
that you're not making assumptions and

00:20:32,310 --> 00:20:35,700
if you think you're making one just

00:20:34,320 --> 00:20:39,570
double-check it be a hundred percent

00:20:35,700 --> 00:20:41,790
sure before you move on and then lastly

00:20:39,570 --> 00:20:44,130
really take time to understand the bug

00:20:41,790 --> 00:20:46,320
once you identify it understand the

00:20:44,130 --> 00:20:48,540
fundamental nature of why behaves the

00:20:46,320 --> 00:20:50,880
way it does and not the way you expected

00:20:48,540 --> 00:20:53,040
it to because again that's going to help

00:20:50,880 --> 00:20:54,900
build up your knowledge and experience

00:20:53,040 --> 00:20:56,550
about about how different parts of the

00:20:54,900 --> 00:20:58,860
system work about how the code works

00:20:56,550 --> 00:21:01,050
about how the web works you're going to

00:20:58,860 --> 00:21:02,790
gain that knowledge and build that level

00:21:01,050 --> 00:21:06,360
of experience that you need to gain that

00:21:02,790 --> 00:21:08,280
intuition or six cents now once you're

00:21:06,360 --> 00:21:11,040
able to identify the culprit now we can

00:21:08,280 --> 00:21:13,140
go ahead and fix it what we want to do

00:21:11,040 --> 00:21:14,790
is we want to fix it and then retest so

00:21:13,140 --> 00:21:17,040
attempts to replicate the issue again

00:21:14,790 --> 00:21:18,390
using those few steps that we identify

00:21:17,040 --> 00:21:21,030
that we know with one hundred percent

00:21:18,390 --> 00:21:23,040
certainty does demonstrate that problem

00:21:21,030 --> 00:21:24,840
and when we run through those steps and

00:21:23,040 --> 00:21:26,160
see that the problem has gone away we

00:21:24,840 --> 00:21:28,830
can be one hundred percent confident

00:21:26,160 --> 00:21:30,720
that we fix the issue now when we go to

00:21:28,830 --> 00:21:33,930
fix it we want to be sure to avoid that

00:21:30,720 --> 00:21:35,880
XY problem and we want to avoid any type

00:21:33,930 --> 00:21:38,840
of temporary workarounds because

00:21:35,880 --> 00:21:41,250
temporary work arounds are not temporary

00:21:38,840 --> 00:21:42,840
first of all in the short term they're

00:21:41,250 --> 00:21:46,220
going to add technical debt to the

00:21:42,840 --> 00:21:48,510
system you're adding this hacky buggy

00:21:46,220 --> 00:21:50,490
potentially buggy code to your system

00:21:48,510 --> 00:21:51,980
but it's going to have to be maintained

00:21:50,490 --> 00:21:54,330
at least in the short term and that

00:21:51,980 --> 00:21:55,890
could introduce other issues as I

00:21:54,330 --> 00:21:58,290
demonstrated with my story about that

00:21:55,890 --> 00:21:59,850
magenta website and as I mentioned

00:21:58,290 --> 00:22:02,370
temporary work groans are not

00:21:59,850 --> 00:22:03,990
necessarily temporary they could stay in

00:22:02,370 --> 00:22:07,010
your code base forever and never get

00:22:03,990 --> 00:22:08,330
replaced think about it let's say that

00:22:07,010 --> 00:22:10,340
your shareholder comes to you with an

00:22:08,330 --> 00:22:12,140
issue you implement this temporary

00:22:10,340 --> 00:22:14,330
workaround they see everything works and

00:22:12,140 --> 00:22:16,400
they're happy do you think they want to

00:22:14,330 --> 00:22:18,770
spend time or money later on down the

00:22:16,400 --> 00:22:20,690
road to replace that with something else

00:22:18,770 --> 00:22:22,700
that works when our system seems to work

00:22:20,690 --> 00:22:24,830
just fine today they're probably not

00:22:22,700 --> 00:22:26,870
going to want to do that so if at all

00:22:24,830 --> 00:22:30,290
possible try and avoid those temporary

00:22:26,870 --> 00:22:32,660
workarounds and once you're able to

00:22:30,290 --> 00:22:34,610
completely fix that issue the last thing

00:22:32,660 --> 00:22:37,250
you want to do is to mitigate future

00:22:34,610 --> 00:22:40,220
occurrences so maybe you want to add an

00:22:37,250 --> 00:22:41,930
automated test and if you're doing TDD

00:22:40,220 --> 00:22:43,970
hopefully you've implemented that test

00:22:41,930 --> 00:22:46,610
beforehand and if not that's totally

00:22:43,970 --> 00:22:49,400
fine you don't have to be a test driven

00:22:46,610 --> 00:22:51,110
development developer in order to

00:22:49,400 --> 00:22:53,210
implement an automated test you can

00:22:51,110 --> 00:22:55,760
certainly add it afterwards that's fine

00:22:53,210 --> 00:22:57,530
but automated tests are really nice

00:22:55,760 --> 00:22:59,750
because they only take a few minutes to

00:22:57,530 --> 00:23:01,750
write and then in the future you can run

00:22:59,750 --> 00:23:04,340
them a million times and they take

00:23:01,750 --> 00:23:06,800
microseconds milliseconds they're so

00:23:04,340 --> 00:23:08,900
cheap to run and so I think it's a

00:23:06,800 --> 00:23:12,410
really good idea to backup your solution

00:23:08,900 --> 00:23:14,060
with an automated tests but mitigating

00:23:12,410 --> 00:23:16,460
future occurrences goes beyond just

00:23:14,060 --> 00:23:18,290
making sure that your code works it also

00:23:16,460 --> 00:23:20,690
means making sure that other people will

00:23:18,290 --> 00:23:21,950
avoid those same kind of mistakes so go

00:23:20,690 --> 00:23:23,770
ahead and share the knowledge that

00:23:21,950 --> 00:23:26,780
you've gained from the bug on that issue

00:23:23,770 --> 00:23:28,490
if there's if it was due to some weird

00:23:26,780 --> 00:23:30,260
quirk with how the system or your

00:23:28,490 --> 00:23:32,810
project works go put that in the

00:23:30,260 --> 00:23:34,370
documentation if you've learned

00:23:32,810 --> 00:23:36,380
something really interesting about how

00:23:34,370 --> 00:23:38,780
the internals of Drupal works go write a

00:23:36,380 --> 00:23:40,640
blog post about it right about the issue

00:23:38,780 --> 00:23:42,770
you found and how you resolved it and

00:23:40,640 --> 00:23:44,270
why that issue worked and chances are if

00:23:42,770 --> 00:23:46,100
someone else has a similar issue in the

00:23:44,270 --> 00:23:47,720
future when they go on to google and

00:23:46,100 --> 00:23:49,640
search for that they'll come across your

00:23:47,720 --> 00:23:51,200
blog post and they'll learn from what

00:23:49,640 --> 00:23:53,870
you learned and you've helped someone

00:23:51,200 --> 00:23:55,490
else out and if you ask the question on

00:23:53,870 --> 00:23:57,410
Stack Overflow you are more than welcome

00:23:55,490 --> 00:23:59,870
to go back and answer your own question

00:23:57,410 --> 00:24:02,690
it's totally fine I'm sure we've all

00:23:59,870 --> 00:24:04,520
experienced issues where we Google this

00:24:02,690 --> 00:24:06,740
really cryptic error we find this one

00:24:04,520 --> 00:24:11,630
post and the person answers never mind i

00:24:06,740 --> 00:24:14,090
fixed it okay i need to fix it now how

00:24:11,630 --> 00:24:15,470
did you fix it I believe there's an XKCD

00:24:14,090 --> 00:24:18,560
comic about this where he's like what

00:24:15,470 --> 00:24:19,910
did you see so really just try and help

00:24:18,560 --> 00:24:21,680
other people

00:24:19,910 --> 00:24:24,080
get through those issues and share your

00:24:21,680 --> 00:24:25,760
knowledge with them and if the issue

00:24:24,080 --> 00:24:28,730
wasn't an upstream project like

00:24:25,760 --> 00:24:30,890
contributed module or Drupal core feel

00:24:28,730 --> 00:24:32,060
free to submit that patch upstream and

00:24:30,890 --> 00:24:33,920
if you're not comfortable writing a

00:24:32,060 --> 00:24:35,420
patch just describe what you found and

00:24:33,920 --> 00:24:37,310
what you did to fix it or what you think

00:24:35,420 --> 00:24:41,120
might work because that's still really

00:24:37,310 --> 00:24:43,430
helpful to others so to briefly recap

00:24:41,120 --> 00:24:45,500
that five step process number one gather

00:24:43,430 --> 00:24:47,900
information about the issue get as much

00:24:45,500 --> 00:24:49,280
useful information as you can once you

00:24:47,900 --> 00:24:51,290
have that information go ahead and try

00:24:49,280 --> 00:24:53,180
and replicate the issue do that with one

00:24:51,290 --> 00:24:55,130
hundred percent certainty that you know

00:24:53,180 --> 00:24:57,470
that those few steps will cause the bug

00:24:55,130 --> 00:24:59,690
to appear once you do that you can go

00:24:57,470 --> 00:25:01,850
ahead and identify the issue fix it

00:24:59,690 --> 00:25:03,260
retest it and then share that knowledge

00:25:01,850 --> 00:25:05,720
with others and make sure that it

00:25:03,260 --> 00:25:07,130
doesn't happen again your project or to

00:25:05,720 --> 00:25:10,250
help other people to avoid that problem

00:25:07,130 --> 00:25:11,990
as well and I think that doing a process

00:25:10,250 --> 00:25:14,420
like this really does have some really

00:25:11,990 --> 00:25:16,010
good long-term results first of all

00:25:14,420 --> 00:25:17,480
you're going to gain experience you're

00:25:16,010 --> 00:25:19,520
going to gain experience with the

00:25:17,480 --> 00:25:21,290
debugging process with the platform

00:25:19,520 --> 00:25:22,940
you're using with your debugging tools

00:25:21,290 --> 00:25:25,940
you're just going to gain a lot of

00:25:22,940 --> 00:25:28,310
experience as a developer you're going

00:25:25,940 --> 00:25:29,750
to learn how the system works like I

00:25:28,310 --> 00:25:31,610
mentioned before even if only

00:25:29,750 --> 00:25:34,310
ninety-five percent of the time your

00:25:31,610 --> 00:25:35,690
persistence pays off that other five

00:25:34,310 --> 00:25:37,640
percent even though you couldn't solve

00:25:35,690 --> 00:25:39,260
the issue you still learn something you

00:25:37,640 --> 00:25:41,240
still learned about how this module

00:25:39,260 --> 00:25:43,300
worked or how Drupal's caching layer it

00:25:41,240 --> 00:25:45,860
worked so it was still beneficial and

00:25:43,300 --> 00:25:48,040
you're going to build up that mental

00:25:45,860 --> 00:25:51,370
library of heuristics you're going to

00:25:48,040 --> 00:25:54,050
understand after solving five network

00:25:51,370 --> 00:25:56,330
connection fails errors that there might

00:25:54,050 --> 00:25:57,710
be a firewall issue you're going to kind

00:25:56,330 --> 00:25:59,750
of immediately be able to jump to that

00:25:57,710 --> 00:26:02,600
explanation the next time you experience

00:25:59,750 --> 00:26:04,280
that issue and then lastly it's going to

00:26:02,600 --> 00:26:07,130
boost your confidence as a developer

00:26:04,280 --> 00:26:09,140
because if you have this solid process

00:26:07,130 --> 00:26:11,360
in place you can be thrown into a

00:26:09,140 --> 00:26:14,750
completely random project maybe you've

00:26:11,360 --> 00:26:17,120
never worked with symphony or magento or

00:26:14,750 --> 00:26:18,920
Joomla before but if you have this

00:26:17,120 --> 00:26:21,140
process down and you know what kind of

00:26:18,920 --> 00:26:22,460
tools to use and what to look for you

00:26:21,140 --> 00:26:24,020
can still kind of figure out what's

00:26:22,460 --> 00:26:25,490
going on and be able to solve that issue

00:26:24,020 --> 00:26:27,820
even though you're unfamiliar with that

00:26:25,490 --> 00:26:27,820
platform

00:26:27,900 --> 00:26:31,440
so now that I've talked through the

00:26:29,880 --> 00:26:33,210
process I would like to share some

00:26:31,440 --> 00:26:34,890
different tools and techniques you can

00:26:33,210 --> 00:26:38,280
use while going through that debugging

00:26:34,890 --> 00:26:40,230
process now personally I think there are

00:26:38,280 --> 00:26:42,330
two essential tools that every developer

00:26:40,230 --> 00:26:44,040
should have and as a lead developer at

00:26:42,330 --> 00:26:45,840
my company I make sure every new

00:26:44,040 --> 00:26:48,450
developer that comes in gets these two

00:26:45,840 --> 00:26:50,970
tools and learns how to use them number

00:26:48,450 --> 00:26:53,190
one a good IDE and number two an

00:26:50,970 --> 00:26:54,600
interactive debugger now I know some

00:26:53,190 --> 00:26:56,460
people are going to say oh I don't need

00:26:54,600 --> 00:26:58,950
a good IDE I'm very comfortable with

00:26:56,460 --> 00:27:00,900
them i love them i love Emacs out of

00:26:58,950 --> 00:27:02,460
nana whatever the case may be and that's

00:27:00,900 --> 00:27:04,140
totally fine if you're a seasoned

00:27:02,460 --> 00:27:05,880
developer but I think for newer

00:27:04,140 --> 00:27:07,710
developers is really important to have

00:27:05,880 --> 00:27:10,590
these tools to assist them with the

00:27:07,710 --> 00:27:12,870
debugging development process now when

00:27:10,590 --> 00:27:15,240
it comes to a good IDE I think it should

00:27:12,870 --> 00:27:17,520
have these features at a minimum it

00:27:15,240 --> 00:27:19,080
should have syntax highlighting so that

00:27:17,520 --> 00:27:21,360
if you forget your semicolon or you

00:27:19,080 --> 00:27:23,640
forget to close your function you can

00:27:21,360 --> 00:27:25,410
see that immediate little red indicator

00:27:23,640 --> 00:27:27,330
when you know that there's a syntax

00:27:25,410 --> 00:27:28,980
error you don't have to rerun your code

00:27:27,330 --> 00:27:31,470
or click through the pages to find that

00:27:28,980 --> 00:27:33,000
a good IDE will also have Auto

00:27:31,470 --> 00:27:35,820
completion so you don't accidentally

00:27:33,000 --> 00:27:38,250
miss type a core function or you'll know

00:27:35,820 --> 00:27:40,530
okay is this PHP array function is it

00:27:38,250 --> 00:27:42,240
needle haystack or haystack needle it'll

00:27:40,530 --> 00:27:44,970
tell you right there in the ID so you

00:27:42,240 --> 00:27:46,470
don't have to look that up a good IDE

00:27:44,970 --> 00:27:48,960
will also allow you to jump through your

00:27:46,470 --> 00:27:51,870
code quickly my personal preference is

00:27:48,960 --> 00:27:53,820
phpstorm I'm not endorsing them I know

00:27:51,870 --> 00:27:55,380
better sponsor but I just really love

00:27:53,820 --> 00:27:57,840
how easy it is to get around the code

00:27:55,380 --> 00:27:59,490
and I'm sure other IDs make it easy as

00:27:57,840 --> 00:28:01,440
well where you can just kind of click on

00:27:59,490 --> 00:28:03,870
a class name to jump there or hit a

00:28:01,440 --> 00:28:05,520
special shortcut type in a partial file

00:28:03,870 --> 00:28:07,710
name jump right to that file on that

00:28:05,520 --> 00:28:09,600
specific line number and that really

00:28:07,710 --> 00:28:11,460
makes it easy to kind of debug your code

00:28:09,600 --> 00:28:14,070
and work your way through it quickly and

00:28:11,460 --> 00:28:16,440
effectively and of course I think a good

00:28:14,070 --> 00:28:19,710
IDE you should also have an interactive

00:28:16,440 --> 00:28:20,730
debugger now an interactive debugger for

00:28:19,710 --> 00:28:24,030
those of you who may not be familiar

00:28:20,730 --> 00:28:26,580
with it it allows you to pause live code

00:28:24,030 --> 00:28:27,480
execution so as you're running code as

00:28:26,580 --> 00:28:29,760
you're testing out in your own

00:28:27,480 --> 00:28:32,100
environment you can say okay a PHP I

00:28:29,760 --> 00:28:34,650
want you to stop in this file on this

00:28:32,100 --> 00:28:36,390
line and just take a timeout just take a

00:28:34,650 --> 00:28:37,650
breath to stop let me look around and

00:28:36,390 --> 00:28:39,930
see what's going on

00:28:37,650 --> 00:28:42,090
you can set breakpoints and say always

00:28:39,930 --> 00:28:44,840
Stop Online 200 or you can say only stop

00:28:42,090 --> 00:28:47,130
online 200 if this condition is true and

00:28:44,840 --> 00:28:49,230
once you're stopped you can step through

00:28:47,130 --> 00:28:51,060
the execution say okay this line looks

00:28:49,230 --> 00:28:53,610
good let me run the next line let me run

00:28:51,060 --> 00:28:55,500
the next one you can examine variables

00:28:53,610 --> 00:28:57,420
and see what they're set to you can

00:28:55,500 --> 00:28:59,450
explore the call stack to see what led

00:28:57,420 --> 00:29:02,340
up to that line of code being wrong now

00:28:59,450 --> 00:29:04,620
as a quick little demonstration here I

00:29:02,340 --> 00:29:08,430
do have an example of using phpstorm

00:29:04,620 --> 00:29:10,860
index to bug to debug an issue so here

00:29:08,430 --> 00:29:13,260
I'm stopped inside of my open source

00:29:10,860 --> 00:29:15,750
common mark parser online 38 of this

00:29:13,260 --> 00:29:18,780
file and I just set a breakpoint ran the

00:29:15,750 --> 00:29:20,670
code and ph we just stopped here and I

00:29:18,780 --> 00:29:22,710
can take a look and see okay what files

00:29:20,670 --> 00:29:25,260
and what lines of code were called that

00:29:22,710 --> 00:29:27,600
led up to new line parser line 38 being

00:29:25,260 --> 00:29:29,850
run and I can see all the variables here

00:29:27,600 --> 00:29:31,470
and maybe I will see okay everything

00:29:29,850 --> 00:29:34,050
looks fine let me jump to the next line

00:29:31,470 --> 00:29:36,240
run that still looks good let's run the

00:29:34,050 --> 00:29:38,700
next line and the next line and the next

00:29:36,240 --> 00:29:40,710
line okay I don't really know what get

00:29:38,700 --> 00:29:43,530
content is doing let's step into that

00:29:40,710 --> 00:29:45,240
function and see what's going on ok it's

00:29:43,530 --> 00:29:47,430
just returning this variable and here's

00:29:45,240 --> 00:29:50,850
what it's set to all right looks pretty

00:29:47,430 --> 00:29:53,250
straightforward let me jump back out and

00:29:50,850 --> 00:29:55,170
I can also expand these variables here

00:29:53,250 --> 00:29:57,900
and see what does this object contain

00:29:55,170 --> 00:30:00,060
what do these variables set to and if I

00:29:57,900 --> 00:30:02,220
want to I can also jump up this call

00:30:00,060 --> 00:30:05,040
stack and say okay what caused new line

00:30:02,220 --> 00:30:07,200
parser 144 to run oh it was called from

00:30:05,040 --> 00:30:08,670
here where was that call though that was

00:30:07,200 --> 00:30:11,460
called from here and that was called

00:30:08,670 --> 00:30:13,560
from here and so on and as you jump up

00:30:11,460 --> 00:30:15,780
these different levels you can expand

00:30:13,560 --> 00:30:17,220
those variables to and see what were the

00:30:15,780 --> 00:30:21,780
variable is set to at those points in

00:30:17,220 --> 00:30:23,850
time so again having a good IDE with a

00:30:21,780 --> 00:30:26,190
good interactive bugger i think is

00:30:23,850 --> 00:30:29,010
really critical to being able to debug

00:30:26,190 --> 00:30:31,500
effectively and then here i just have a

00:30:29,010 --> 00:30:34,230
quick screenshot of doing conditional

00:30:31,500 --> 00:30:36,210
breakpoints and grouping them so if i'm

00:30:34,230 --> 00:30:38,610
trying to debug a new line parsing bug i

00:30:36,210 --> 00:30:40,590
can say okay well these breakpoints deal

00:30:38,610 --> 00:30:42,900
with new line parson and when I'm done

00:30:40,590 --> 00:30:44,430
with that I can just uncheck this and I

00:30:42,900 --> 00:30:46,200
won't lose my place so if I have to come

00:30:44,430 --> 00:30:47,460
back to this later I can just recheck

00:30:46,200 --> 00:30:49,830
that box and go through

00:30:47,460 --> 00:30:51,360
process again then over here just an

00:30:49,830 --> 00:30:53,669
example of using a conditional break

00:30:51,360 --> 00:30:56,669
point so I'm saying only stop here on

00:30:53,669 --> 00:30:58,590
line 47 if this space is variable is

00:30:56,669 --> 00:31:00,299
greater than 2 so it's a really powerful

00:30:58,590 --> 00:31:04,740
tool if you haven't checked that out i

00:31:00,299 --> 00:31:05,970
highly recommend you look into that now

00:31:04,740 --> 00:31:08,220
let's talk about some techniques you can

00:31:05,970 --> 00:31:09,990
use when trying to identify the culprit

00:31:08,220 --> 00:31:11,399
and figure out the issue there are

00:31:09,990 --> 00:31:13,799
several different ways you can go about

00:31:11,399 --> 00:31:15,090
tackling an issue depending on what sort

00:31:13,799 --> 00:31:17,039
of issue it is and what sort of

00:31:15,090 --> 00:31:19,159
information you have so I like to walk

00:31:17,039 --> 00:31:21,750
through some of these briefly right now

00:31:19,159 --> 00:31:23,789
the first one I like to share is tracing

00:31:21,750 --> 00:31:25,950
backwards so you want to use this

00:31:23,789 --> 00:31:27,899
technique when you know where the error

00:31:25,950 --> 00:31:31,020
is coming from you know that this file

00:31:27,899 --> 00:31:32,429
928 is failing and so you fire up your

00:31:31,020 --> 00:31:34,320
interactive debugger set your break

00:31:32,429 --> 00:31:36,419
point there and then what you want to do

00:31:34,320 --> 00:31:38,429
is establish the context of what's going

00:31:36,419 --> 00:31:40,380
on figure out what's going on on that

00:31:38,429 --> 00:31:43,169
lawn right before the failure and then

00:31:40,380 --> 00:31:45,240
trace your way backwards so let's say

00:31:43,169 --> 00:31:46,830
that this is a diagram of your code you

00:31:45,240 --> 00:31:49,919
have function a witch call the function

00:31:46,830 --> 00:31:52,320
B which called see which called D and D

00:31:49,919 --> 00:31:54,929
is erroring out well we know that the

00:31:52,320 --> 00:31:57,750
code ran this way so let's set a

00:31:54,929 --> 00:31:59,610
breakpoint here stop on that line of

00:31:57,750 --> 00:32:02,220
code and I kind of mentally work our way

00:31:59,610 --> 00:32:04,110
backwards let's see okay we're in d why

00:32:02,220 --> 00:32:06,330
did he get called let me look inside a

00:32:04,110 --> 00:32:08,669
function see see what was going on there

00:32:06,330 --> 00:32:10,559
little bit up to D being called let's

00:32:08,669 --> 00:32:14,970
look and be to see what caused see to be

00:32:10,559 --> 00:32:16,950
called and so on now there is an

00:32:14,970 --> 00:32:19,020
alternate technique you use which is the

00:32:16,950 --> 00:32:21,330
trace forward so just working in the

00:32:19,020 --> 00:32:23,309
opposite direction generally you do this

00:32:21,330 --> 00:32:26,130
if you don't know what line of code is

00:32:23,309 --> 00:32:28,320
causing the issue so again use the

00:32:26,130 --> 00:32:30,419
debugger use logging basically figure

00:32:28,320 --> 00:32:33,179
out okay my code starts off here and

00:32:30,419 --> 00:32:34,770
then I know a is going to call B and

00:32:33,179 --> 00:32:37,529
then I see that call c and i see that

00:32:34,770 --> 00:32:38,730
cause the d the problem with this

00:32:37,529 --> 00:32:40,679
approach is that it can be really

00:32:38,730 --> 00:32:42,600
inefficient if you don't know where the

00:32:40,679 --> 00:32:44,100
issue is in your code let's say you're

00:32:42,600 --> 00:32:45,840
having a block that's not outputting

00:32:44,100 --> 00:32:47,309
correctly you probably don't want to

00:32:45,840 --> 00:32:49,649
spend your time going through the entire

00:32:47,309 --> 00:32:51,630
bootstrap routine line by line going

00:32:49,649 --> 00:32:53,520
into every single method that's going to

00:32:51,630 --> 00:32:55,230
be a waste of time so what you'd want to

00:32:53,520 --> 00:32:57,539
do instead is probably do a

00:32:55,230 --> 00:32:59,450
divide-and-conquer-type strategy to try

00:32:57,539 --> 00:33:00,980
and narrow down what code

00:32:59,450 --> 00:33:03,320
or what part of the code base you want

00:33:00,980 --> 00:33:05,029
to focus on so you start by identifying

00:33:03,320 --> 00:33:07,190
the different sections of your code and

00:33:05,029 --> 00:33:09,289
okay grouping all the functions together

00:33:07,190 --> 00:33:11,570
and figure out what are the boundaries

00:33:09,289 --> 00:33:13,580
between these pieces of code where does

00:33:11,570 --> 00:33:16,039
the code leave this module and then go

00:33:13,580 --> 00:33:18,679
over to this module this class or this

00:33:16,039 --> 00:33:21,049
library and then once you find which

00:33:18,679 --> 00:33:22,549
block of code is causing the issue then

00:33:21,049 --> 00:33:25,130
you can isolate the issue down to that

00:33:22,549 --> 00:33:27,620
so quick diagram let's say this is a

00:33:25,130 --> 00:33:30,139
diagram of our system and what these

00:33:27,620 --> 00:33:32,120
boxes and lines represent isn't really

00:33:30,139 --> 00:33:34,460
that important but what I want you to

00:33:32,120 --> 00:33:36,889
focus on is that there are these four

00:33:34,460 --> 00:33:38,779
different groups of code so there's this

00:33:36,889 --> 00:33:40,970
blue section here where pretty much just

00:33:38,779 --> 00:33:42,710
talks to itself but then there are these

00:33:40,970 --> 00:33:45,649
boundaries where the code runs off to

00:33:42,710 --> 00:33:47,659
these other sections so in order to

00:33:45,649 --> 00:33:49,220
divide and conquer what we do is we set

00:33:47,659 --> 00:33:52,399
break points at each of these boundaries

00:33:49,220 --> 00:33:54,350
run the code and just see which

00:33:52,399 --> 00:33:56,899
boundaries get hit see which breakpoints

00:33:54,350 --> 00:33:58,100
the code stops on maybe we see that

00:33:56,899 --> 00:34:00,529
these were the only two break points

00:33:58,100 --> 00:34:02,269
that get hit and this tells us that that

00:34:00,529 --> 00:34:04,970
yellow section of code doesn't get run

00:34:02,269 --> 00:34:06,980
at all because PHP didn't stop here and

00:34:04,970 --> 00:34:09,349
it didn't stop here so this was never

00:34:06,980 --> 00:34:10,879
run alright so we've not we've crossed

00:34:09,349 --> 00:34:12,950
that off and then we can focus on this

00:34:10,879 --> 00:34:15,710
area so let's set those breakpoints

00:34:12,950 --> 00:34:17,990
again and see what's going on so when

00:34:15,710 --> 00:34:19,550
the code goes from this blue section to

00:34:17,990 --> 00:34:21,020
the red section we can stop and look at

00:34:19,550 --> 00:34:22,579
those variables and see what's going on

00:34:21,020 --> 00:34:24,379
and maybe we'll see that everything

00:34:22,579 --> 00:34:26,770
looks fine everything is exactly how we

00:34:24,379 --> 00:34:29,389
expect it to be things look good there

00:34:26,770 --> 00:34:31,339
but at the next boundary maybe things

00:34:29,389 --> 00:34:33,740
look wrong something's off something

00:34:31,339 --> 00:34:35,480
isn't quite right and so now we know the

00:34:33,740 --> 00:34:37,700
issue is somewhere in this section and

00:34:35,480 --> 00:34:40,220
now we can go ahead and use that trace

00:34:37,700 --> 00:34:41,750
forward methodology where we start here

00:34:40,220 --> 00:34:44,829
and then validate each step of the

00:34:41,750 --> 00:34:47,300
process to figure out where the issue is

00:34:44,829 --> 00:34:50,690
now there are a lot of really good tools

00:34:47,300 --> 00:34:52,099
you can use as your debugging I've got a

00:34:50,690 --> 00:34:53,839
few listed up here and what I'd like to

00:34:52,099 --> 00:34:55,700
do is briefly touch on each one and

00:34:53,839 --> 00:34:59,690
describe what it is and how you can use

00:34:55,700 --> 00:35:01,880
it so number one dumping out variables

00:34:59,690 --> 00:35:03,319
sometimes we just don't want to fire up

00:35:01,880 --> 00:35:05,780
the debugger sometimes it's too much

00:35:03,319 --> 00:35:08,180
effort maybe you're trying to work on

00:35:05,780 --> 00:35:10,250
your buddy system and he or she doesn't

00:35:08,180 --> 00:35:10,910
have X to bug installed or you can't

00:35:10,250 --> 00:35:12,950
connect

00:35:10,910 --> 00:35:15,859
just talk about the variable you can use

00:35:12,950 --> 00:35:18,020
them dumped in twig you can use kins you

00:35:15,859 --> 00:35:19,789
can use DPM whatever the case may be

00:35:18,020 --> 00:35:21,859
sometimes it's just really useful to

00:35:19,789 --> 00:35:23,750
just dump out variable or two on the

00:35:21,859 --> 00:35:25,030
screen don't do it in production you can

00:35:23,750 --> 00:35:27,260
do it in development that's fine

00:35:25,030 --> 00:35:31,579
sometimes it's just useful to do that

00:35:27,260 --> 00:35:34,010
approach you can also use a debug tool

00:35:31,579 --> 00:35:36,020
bar I know the develop module has the

00:35:34,010 --> 00:35:38,119
believe it's called web profiler toolbar

00:35:36,020 --> 00:35:39,890
it's based on the toolbar that Symphony

00:35:38,119 --> 00:35:41,720
uses and has a lot of really great

00:35:39,890 --> 00:35:44,089
information about what's going on with

00:35:41,720 --> 00:35:47,089
that page request so you can see okay

00:35:44,089 --> 00:35:51,680
we're using Drupal 8 12 we can see the

00:35:47,089 --> 00:35:54,230
HTTP response code was 200 we use 45.5

00:35:51,680 --> 00:35:56,180
megabytes of RAM it took this long to

00:35:54,230 --> 00:35:57,980
execute here how many database queries

00:35:56,180 --> 00:35:59,599
were wrong you can click on each of

00:35:57,980 --> 00:36:01,520
these to get more information about what

00:35:59,599 --> 00:36:03,140
was happening so if you're experiencing

00:36:01,520 --> 00:36:05,089
some kind of sequel error or your

00:36:03,140 --> 00:36:06,530
queries taking too long just click on

00:36:05,089 --> 00:36:10,099
this guy here and you can find out more

00:36:06,530 --> 00:36:12,470
information about that another really

00:36:10,099 --> 00:36:14,510
useful tool is a console utility now a

00:36:12,470 --> 00:36:17,000
lot of platforms do ship with them nom

00:36:14,510 --> 00:36:18,760
and some have community built ones so in

00:36:17,000 --> 00:36:21,589
Drupal we have drush and triple console

00:36:18,760 --> 00:36:24,349
symphony comes with the bin / console

00:36:21,589 --> 00:36:27,260
built in I know I'm magento has a third

00:36:24,349 --> 00:36:29,450
party tool called n98 made wrong and

00:36:27,260 --> 00:36:30,770
laravel has artisan at the end of the

00:36:29,450 --> 00:36:32,510
day they're all very similar it's a

00:36:30,770 --> 00:36:34,190
command-line tool that gives you debug

00:36:32,510 --> 00:36:36,440
information unless you do things like

00:36:34,190 --> 00:36:38,930
clear the cache reset a user's password

00:36:36,440 --> 00:36:42,980
dump out the routes find that important

00:36:38,930 --> 00:36:44,630
information now sometimes the issues

00:36:42,980 --> 00:36:47,210
we're experiencing aren't necessarily

00:36:44,630 --> 00:36:49,490
bugs wear something crashes sometimes

00:36:47,210 --> 00:36:50,900
it's a performance issue and you're not

00:36:49,490 --> 00:36:53,210
really going to be able to use a

00:36:50,900 --> 00:36:54,920
debugger to find that so in these cases

00:36:53,210 --> 00:36:56,569
you want to use a performance profiling

00:36:54,920 --> 00:36:58,279
tool and that's going to help you

00:36:56,569 --> 00:37:00,109
identify slowness whether that's a

00:36:58,279 --> 00:37:02,450
bottleneck somewhere or release little

00:37:00,109 --> 00:37:05,150
query or something's talking resources

00:37:02,450 --> 00:37:06,920
or really inefficient algorithm they'll

00:37:05,150 --> 00:37:08,720
let you pinpoint exactly what parts of

00:37:06,920 --> 00:37:11,180
your code are running slow and why that

00:37:08,720 --> 00:37:13,760
is and there are a lot of really great

00:37:11,180 --> 00:37:15,980
tools out there my personal to favorites

00:37:13,760 --> 00:37:17,569
are black fire and New Relic again I

00:37:15,980 --> 00:37:19,549
know their sponsors here I'm not being

00:37:17,569 --> 00:37:21,559
paid to push these products I just

00:37:19,549 --> 00:37:22,520
really enjoy them I think they're pretty

00:37:21,559 --> 00:37:24,530
good

00:37:22,520 --> 00:37:25,730
and I do believe that I do have free

00:37:24,530 --> 00:37:27,710
trials so if you want to check that out

00:37:25,730 --> 00:37:29,090
that's cool and if you're really into

00:37:27,710 --> 00:37:30,530
just using open source and you don't

00:37:29,090 --> 00:37:32,510
want to go the commercial route there

00:37:30,530 --> 00:37:36,950
are other projects out there like XH

00:37:32,510 --> 00:37:39,170
prof they do very similar things now one

00:37:36,950 --> 00:37:42,020
really cool tool that I like to use that

00:37:39,170 --> 00:37:43,580
isn't that well-known is get bisect so

00:37:42,020 --> 00:37:45,380
quick show of hands how many people are

00:37:43,580 --> 00:37:48,110
familiar with get itself and use get

00:37:45,380 --> 00:37:50,690
regularly all right how many of you have

00:37:48,110 --> 00:37:53,870
used git bisect before all right a few

00:37:50,690 --> 00:37:55,730
that's good I like to see that so most

00:37:53,870 --> 00:37:58,160
of you are familiar with how it works it

00:37:55,730 --> 00:37:59,870
has this history of commits so we know

00:37:58,160 --> 00:38:01,490
that this commit was based on this one

00:37:59,870 --> 00:38:05,270
which is based on this one and so forth

00:38:01,490 --> 00:38:07,790
and we can use a git bisect to run a

00:38:05,270 --> 00:38:09,530
binary search or cross commits to figure

00:38:07,790 --> 00:38:12,170
out which commits first introduced an

00:38:09,530 --> 00:38:14,870
issue so let me explain let's say this

00:38:12,170 --> 00:38:17,300
is a diagram of our repository and we

00:38:14,870 --> 00:38:18,500
know that version 1.7 are of our project

00:38:17,300 --> 00:38:21,020
worked great there were no issues

00:38:18,500 --> 00:38:23,150
everything was fine fast forward some

00:38:21,020 --> 00:38:26,120
time later and our most recent commit on

00:38:23,150 --> 00:38:27,950
master has a bug we don't know where

00:38:26,120 --> 00:38:29,330
exactly the bug is located we don't know

00:38:27,950 --> 00:38:31,430
where it was introduced we just know

00:38:29,330 --> 00:38:34,010
that there is an issue so we can use git

00:38:31,430 --> 00:38:36,770
bisect to figure out which one of these

00:38:34,010 --> 00:38:38,600
commits introduced the issue and because

00:38:36,770 --> 00:38:40,760
it's a binary search you don't have to

00:38:38,600 --> 00:38:43,250
try every single commit one at a time

00:38:40,760 --> 00:38:45,260
get will intelligently find that commit

00:38:43,250 --> 00:38:48,290
for you so the first thing you want to

00:38:45,260 --> 00:38:50,750
do is tell get ok version 1.7 was good

00:38:48,290 --> 00:38:52,880
and my head here the latest commit is

00:38:50,750 --> 00:38:54,170
bad now I'm not going to run through the

00:38:52,880 --> 00:38:55,340
exact commands but you can start going

00:38:54,170 --> 00:38:57,800
to look them up there's a lot of good

00:38:55,340 --> 00:39:00,140
tutorials out there and once you've

00:38:57,800 --> 00:39:02,210
identified the good commit in the bad

00:39:00,140 --> 00:39:04,070
commit it will automatically check out

00:39:02,210 --> 00:39:05,870
the one in the middle for you it'll ask

00:39:04,070 --> 00:39:08,000
you hey how do things look at this point

00:39:05,870 --> 00:39:10,100
in time is the issue still here is it

00:39:08,000 --> 00:39:13,220
good or bad at this point and you might

00:39:10,100 --> 00:39:15,440
say it's bad there's still an issue here

00:39:13,220 --> 00:39:17,510
at this point in time so there's an

00:39:15,440 --> 00:39:19,940
issue here and the issue is still

00:39:17,510 --> 00:39:21,830
present here we can automatically cross

00:39:19,940 --> 00:39:23,870
these commits off the list because the

00:39:21,830 --> 00:39:26,540
issue wasn't introduced in the future

00:39:23,870 --> 00:39:28,700
was introduced some time in the past so

00:39:26,540 --> 00:39:29,990
you tell get this one is bad and then

00:39:28,700 --> 00:39:32,240
it'll check out what's in the middle

00:39:29,990 --> 00:39:34,010
again and then you tell get ok this

00:39:32,240 --> 00:39:34,890
one's good everything was working fine

00:39:34,010 --> 00:39:37,559
at this point

00:39:34,890 --> 00:39:39,299
alright so this one here must also be

00:39:37,559 --> 00:39:41,970
good so here's the commit that

00:39:39,299 --> 00:39:44,789
introduced the issue and that only took

00:39:41,970 --> 00:39:47,640
what three four commands to do that even

00:39:44,789 --> 00:39:49,470
though there are eight nine different

00:39:47,640 --> 00:39:51,539
commits in here and what's really nice

00:39:49,470 --> 00:39:54,029
about it being a binary search is that

00:39:51,539 --> 00:39:55,799
it scales logarithmically now I'm not a

00:39:54,029 --> 00:39:58,859
comp sci major so I did have to google

00:39:55,799 --> 00:40:01,890
what that meant but basically every time

00:39:58,859 --> 00:40:03,869
the number of commits goes up by 10 a 10

00:40:01,890 --> 00:40:07,440
fold the number of commands you have to

00:40:03,869 --> 00:40:09,450
run only goes up by two so I believe if

00:40:07,440 --> 00:40:12,630
you have nine commits you need to test

00:40:09,450 --> 00:40:16,589
so nine commits takes four tests 90

00:40:12,630 --> 00:40:18,809
commits takes 8 900 commits take 16

00:40:16,589 --> 00:40:20,099
tests so even if you have a lot of

00:40:18,809 --> 00:40:22,260
commits you have to go through this

00:40:20,099 --> 00:40:23,910
scales really well and it's still really

00:40:22,260 --> 00:40:27,750
efficient really effective at finding

00:40:23,910 --> 00:40:29,099
those types of issues now another really

00:40:27,750 --> 00:40:31,380
nice tool that I like to use when

00:40:29,099 --> 00:40:34,799
debugging specifically network issues is

00:40:31,380 --> 00:40:37,890
netcat netcat is a really nice some unix

00:40:34,799 --> 00:40:42,150
tool that lets you test a TCP connection

00:40:37,890 --> 00:40:43,559
to some IP address and some port so we

00:40:42,150 --> 00:40:45,450
can see here in the first example I'm

00:40:43,559 --> 00:40:47,609
just running the net cap command with a

00:40:45,450 --> 00:40:50,250
couple of flags and I'm just testing if

00:40:47,609 --> 00:40:52,950
my computer connect to local host on

00:40:50,250 --> 00:40:55,019
port 80 and I see that the connections

00:40:52,950 --> 00:40:57,359
succeeded so I know that if there's a

00:40:55,019 --> 00:41:00,359
networking issue I can see whether or

00:40:57,359 --> 00:41:02,279
not it's cause at that TCP layer so in

00:41:00,359 --> 00:41:04,380
this case if I see connections succeeded

00:41:02,279 --> 00:41:06,869
I know there's a web server there on

00:41:04,380 --> 00:41:08,460
port 80 and it's responding to things so

00:41:06,869 --> 00:41:10,680
if I'm seeing some type of issue and I

00:41:08,460 --> 00:41:12,960
think as Apache related I at least know

00:41:10,680 --> 00:41:15,839
that apache is running and is responding

00:41:12,960 --> 00:41:17,369
to connections now let's say you're

00:41:15,839 --> 00:41:19,740
trying to diagnose some issue connecting

00:41:17,369 --> 00:41:21,779
to some third party service or maybe you

00:41:19,740 --> 00:41:23,819
just want to see if google has ssh open

00:41:21,779 --> 00:41:26,400
you can pop that in you can say okay try

00:41:23,819 --> 00:41:28,769
connecting to google on port 22 or try

00:41:26,400 --> 00:41:32,099
connecting to my database on 3306 or

00:41:28,769 --> 00:41:33,990
connect to this API on port 443 and you

00:41:32,099 --> 00:41:35,700
can see right away if the reason you're

00:41:33,990 --> 00:41:38,009
having the bug is a networking issue or

00:41:35,700 --> 00:41:40,500
not if you see something like connection

00:41:38,009 --> 00:41:42,359
timed out there's probably a firewall up

00:41:40,500 --> 00:41:43,829
in the way so if you're debugging the

00:41:42,359 --> 00:41:45,359
issue connecting sure my sequel server

00:41:43,829 --> 00:41:47,430
you don't have to focus on whether the

00:41:45,359 --> 00:41:48,260
sequel syntax is valid or not that

00:41:47,430 --> 00:41:49,670
doesn't matter here

00:41:48,260 --> 00:41:52,340
because it couldn't even connect to that

00:41:49,670 --> 00:41:53,720
sequel box so again just a really nice

00:41:52,340 --> 00:41:56,720
tool to help diagnose those kinds of

00:41:53,720 --> 00:42:00,710
issues another nice tool you can use

00:41:56,720 --> 00:42:03,260
this curl curl is a command line HTTP

00:42:00,710 --> 00:42:05,810
client and if you pass in the dash I

00:42:03,260 --> 00:42:08,660
flag here in the URL it'll show you all

00:42:05,810 --> 00:42:10,640
of the HTTP headers now of course you

00:42:08,660 --> 00:42:11,750
can see these in chrome devtools but

00:42:10,640 --> 00:42:13,250
maybe you don't have access to that

00:42:11,750 --> 00:42:14,300
maybe you don't want to fire up chrome

00:42:13,250 --> 00:42:16,790
you just want to type something out

00:42:14,300 --> 00:42:19,160
quick curl is a really nice way to get

00:42:16,790 --> 00:42:23,030
that kind of information about the HTTP

00:42:19,160 --> 00:42:24,980
request and the final 2 i'd like to

00:42:23,030 --> 00:42:28,400
share with you is this tool called

00:42:24,980 --> 00:42:30,920
estrace estrace allows you to attach to

00:42:28,400 --> 00:42:32,810
any running process on a box and see

00:42:30,920 --> 00:42:35,360
what sort of system calls are being made

00:42:32,810 --> 00:42:36,740
now I mentioned at back at the beginning

00:42:35,360 --> 00:42:39,320
of introduction that I'm just getting

00:42:36,740 --> 00:42:40,820
started and see development I don't know

00:42:39,320 --> 00:42:42,980
what most of these things do I'll be

00:42:40,820 --> 00:42:44,450
totally honest with you but just looking

00:42:42,980 --> 00:42:46,610
at it I can kind of figure out what's

00:42:44,450 --> 00:42:48,740
going on so let's say I have this PHP

00:42:46,610 --> 00:42:50,360
process which is doing I don't know what

00:42:48,740 --> 00:42:52,730
but I need to figure out what it's doing

00:42:50,360 --> 00:42:54,860
and why it's doing it I can pull this up

00:42:52,730 --> 00:42:57,080
and I can see some things that kind of

00:42:54,860 --> 00:42:59,870
make sense to me so here we have

00:42:57,080 --> 00:43:02,300
something being written set names utf8

00:42:59,870 --> 00:43:05,030
so something is going on with utf-8

00:43:02,300 --> 00:43:08,450
encoding down here I see that a file is

00:43:05,030 --> 00:43:10,730
being open file called cryptic last PHP

00:43:08,450 --> 00:43:12,230
so my PHP code is probably doing

00:43:10,730 --> 00:43:13,930
something with cryptography it's

00:43:12,230 --> 00:43:16,370
probably requiring this at some point

00:43:13,930 --> 00:43:19,580
down here I see what looks like a sequel

00:43:16,370 --> 00:43:21,470
query select star from accesses and then

00:43:19,580 --> 00:43:24,440
down here i see that dev random is being

00:43:21,470 --> 00:43:25,850
opened so even though this might seem

00:43:24,440 --> 00:43:27,590
like bunch of gibberish even though i

00:43:25,850 --> 00:43:29,060
might not not know exactly what my

00:43:27,590 --> 00:43:31,160
process is doing i can kind of get a

00:43:29,060 --> 00:43:32,720
vague idea that is doing something with

00:43:31,160 --> 00:43:35,000
cryptography is doing something with

00:43:32,720 --> 00:43:36,140
sequel queries so maybe i should look in

00:43:35,000 --> 00:43:39,230
that part of the code to figure out

00:43:36,140 --> 00:43:40,670
what's going on so that kind of wraps up

00:43:39,230 --> 00:43:43,340
the tool section now we're getting close

00:43:40,670 --> 00:43:45,670
to the end here the last technique i'd

00:43:43,340 --> 00:43:48,230
like to share with you is getting help

00:43:45,670 --> 00:43:50,000
sometimes no matter how are you try you

00:43:48,230 --> 00:43:52,010
just can't figure it out on your own so

00:43:50,000 --> 00:43:53,720
we'll get some assistance the first

00:43:52,010 --> 00:43:55,310
thing I think you should do is go read

00:43:53,720 --> 00:43:58,160
the fantastic manual go read the

00:43:55,310 --> 00:44:01,520
fantastic documentation some developers

00:43:58,160 --> 00:44:03,680
somewhere spent their time to write out

00:44:01,520 --> 00:44:05,600
information about its common issues and

00:44:03,680 --> 00:44:06,740
how to do certain things so go check

00:44:05,600 --> 00:44:09,380
that and see if there's any useful

00:44:06,740 --> 00:44:11,270
information there maybe go check the

00:44:09,380 --> 00:44:12,710
project for arms or an issue queue see

00:44:11,270 --> 00:44:14,690
if someone else reported that issue and

00:44:12,710 --> 00:44:15,920
if not you can report it and go ahead

00:44:14,690 --> 00:44:18,470
and maybe someone else will check later

00:44:15,920 --> 00:44:20,990
and respond to you you can of course

00:44:18,470 --> 00:44:23,060
post elsewhere you know places that

00:44:20,990 --> 00:44:25,850
aren't specific to Drupal you can go on

00:44:23,060 --> 00:44:28,580
Stack Overflow IRC Twitter anywhere that

00:44:25,850 --> 00:44:31,250
developers congregate if you work with

00:44:28,580 --> 00:44:32,870
others go ask a colleague maybe you're

00:44:31,250 --> 00:44:34,820
struggling with this really hard Drupal

00:44:32,870 --> 00:44:36,440
question and there's a Drupal expert

00:44:34,820 --> 00:44:38,870
sitting right next to you go ask them

00:44:36,440 --> 00:44:40,580
and if you don't really have that expert

00:44:38,870 --> 00:44:42,740
or they don't know either just go find

00:44:40,580 --> 00:44:44,240
any senior developer even if they don't

00:44:42,740 --> 00:44:46,760
work with Drupal even if they don't work

00:44:44,240 --> 00:44:48,620
in PHP because chances are they're

00:44:46,760 --> 00:44:51,620
familiar with caching technologies and

00:44:48,620 --> 00:44:53,870
how HTTP requests work and all these

00:44:51,620 --> 00:44:55,850
different types of topics that they may

00:44:53,870 --> 00:44:57,500
not be specific to your project but they

00:44:55,850 --> 00:45:00,350
still know something that can help you

00:44:57,500 --> 00:45:02,840
out and then the last technique you can

00:45:00,350 --> 00:45:04,970
use is rubber ducking basically you take

00:45:02,840 --> 00:45:07,340
a rubber duck put on your desk and you

00:45:04,970 --> 00:45:09,740
have a problem talk to the duck tell the

00:45:07,340 --> 00:45:11,780
duck what you're doing say okay duck I'm

00:45:09,740 --> 00:45:13,370
having this weird issue trying to log

00:45:11,780 --> 00:45:16,370
into the website i'm seeing this really

00:45:13,370 --> 00:45:18,710
bizarre error i tried doing this I got

00:45:16,370 --> 00:45:20,300
this instead just kind of talked out

00:45:18,710 --> 00:45:21,530
that problem or if you're trying to

00:45:20,300 --> 00:45:23,480
implement something you're not sure how

00:45:21,530 --> 00:45:26,270
to do it talk out white trunks you do to

00:45:23,480 --> 00:45:27,770
the doc yes you may look silly but the

00:45:26,270 --> 00:45:30,230
idea here is that it's kind of jogging

00:45:27,770 --> 00:45:31,640
your mind and by saying it you're forced

00:45:30,230 --> 00:45:33,470
to say all of the thoughts and

00:45:31,640 --> 00:45:34,850
assumptions that you're making maybe

00:45:33,470 --> 00:45:36,320
you're making it valid assumption and

00:45:34,850 --> 00:45:39,110
you'll catch that as you're speaking it

00:45:36,320 --> 00:45:41,330
and then finally sometimes you just need

00:45:39,110 --> 00:45:43,400
to take a break clear your mind start

00:45:41,330 --> 00:45:45,380
fresh come back to it later on that day

00:45:43,400 --> 00:45:47,060
or the next day that's going to help you

00:45:45,380 --> 00:45:48,890
forget those invalid assumptions you may

00:45:47,060 --> 00:45:50,840
have made and it's going to give you a

00:45:48,890 --> 00:45:55,160
chance to recharge your batteries and

00:45:50,840 --> 00:45:57,440
let your subconscious work on it now r

00:45:55,160 --> 00:45:59,330
at the end of the talk here but there

00:45:57,440 --> 00:46:01,790
are four things i would like you for to

00:45:59,330 --> 00:46:03,620
walk away from this talk with point

00:46:01,790 --> 00:46:06,200
number one computers aren't random and

00:46:03,620 --> 00:46:07,970
neither are bugs there is always going

00:46:06,200 --> 00:46:09,470
to be a logical explanation for what's

00:46:07,970 --> 00:46:12,170
going on you just need to be persistent

00:46:09,470 --> 00:46:13,700
enough to find it and that persistence

00:46:12,170 --> 00:46:14,640
will always pay off you'll either fix

00:46:13,700 --> 00:46:15,810
the issue or

00:46:14,640 --> 00:46:18,720
learn something new that will help you

00:46:15,810 --> 00:46:20,880
out in the future don't be afraid to

00:46:18,720 --> 00:46:22,320
dive deep into the code base maybe you

00:46:20,880 --> 00:46:23,640
haven't gone with a Drupal core before

00:46:22,320 --> 00:46:25,560
maybe you're not familiar with how

00:46:23,640 --> 00:46:27,120
caching works but jump in there anyway

00:46:25,560 --> 00:46:28,590
you learn something and the more you

00:46:27,120 --> 00:46:30,900
jump in there the more and more you'll

00:46:28,590 --> 00:46:33,270
learn you become an expert quicker and

00:46:30,900 --> 00:46:35,100
then lastly don't make assumptions or

00:46:33,270 --> 00:46:38,700
take things for granted challenge

00:46:35,100 --> 00:46:40,320
everything now unfortunately we're right

00:46:38,700 --> 00:46:41,550
up against the time limit so I don't

00:46:40,320 --> 00:46:43,290
think I really have time to answer

00:46:41,550 --> 00:46:44,820
questions but if you have any feel free

00:46:43,290 --> 00:46:47,370
to come up to me afterwards I'd be happy

00:46:44,820 --> 00:46:49,260
to help answer them I do have a few

00:46:47,370 --> 00:46:51,090
resources here on debugging and doing

00:46:49,260 --> 00:46:53,940
effectively i'll post these out on

00:46:51,090 --> 00:46:55,590
twitter um here's my twitter handle

00:46:53,940 --> 00:46:57,690
right here at Collinwood l so if you're

00:46:55,590 --> 00:47:00,720
interested in that just keep an eye out

00:46:57,690 --> 00:47:02,930
for that and thank you guys thanks for

00:47:00,720 --> 00:47:02,930

YouTube URL: https://www.youtube.com/watch?v=yo8B03ZLCs4


