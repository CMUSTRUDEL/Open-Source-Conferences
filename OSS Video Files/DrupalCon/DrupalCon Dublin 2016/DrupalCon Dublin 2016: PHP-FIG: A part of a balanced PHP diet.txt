Title: DrupalCon Dublin 2016: PHP-FIG: A part of a balanced PHP diet
Publication date: 2016-09-27
Playlist: DrupalCon Dublin 2016
Description: 
	The PHP Framework Interoperability Group (PHP-FIG) is 7 years old now.  Never heard of it?  That's too bad, because it's helping to change the face of the PHP universe.

FIG is PHP's very own standards body.  It's goal is to improve collaboration, compatibility, and interoperability between PHP projects large and small.  Ever wondered why you don't have to think about autoloading anymore? That's FIG's doing. A common way to do logging for any project?  FIG's doing.  A standard abstraction for HTTP messages?  Yep, FIG.

This session will discuss this history of FIG, how it operates in its new structure, and how developers are benefiting from its work.  It will also explain how everyone, not just big projects, can get involved.
Captions: 
	00:00:00,110 --> 00:00:05,040
thank you everyone for coming the stock

00:00:02,639 --> 00:00:06,629
is on the PHP fig or framework

00:00:05,040 --> 00:00:08,849
interoperability group my name is Larry

00:00:06,629 --> 00:00:10,710
Garfield you may know me online as Krell

00:00:08,849 --> 00:00:11,940
if you want to make fun of me on Twitter

00:00:10,710 --> 00:00:14,549
during the session that's where you do

00:00:11,940 --> 00:00:16,080
so I highly encourage it I'm the

00:00:14,549 --> 00:00:19,020
director of runtimes integrations

00:00:16,080 --> 00:00:22,740
engines and services for platform sh yes

00:00:19,020 --> 00:00:24,600
the acronym is a very is deliberate we

00:00:22,740 --> 00:00:27,029
are a platform as a service development

00:00:24,600 --> 00:00:29,070
tool / hosting company and we have some

00:00:27,029 --> 00:00:31,439
really cool stickers and patches here if

00:00:29,070 --> 00:00:33,809
you want I was also the web services

00:00:31,439 --> 00:00:35,460
lead for Drupal 8 which means you can

00:00:33,809 --> 00:00:38,550
blame me for about a third of the things

00:00:35,460 --> 00:00:40,800
that changed I'm the Drupal

00:00:38,550 --> 00:00:43,140
representative to the PHP fig so I have

00:00:40,800 --> 00:00:45,960
been part of the story that i'm about to

00:00:43,140 --> 00:00:51,770
tell and yes i do implement huggable

00:00:45,960 --> 00:00:55,410
more on that later so what is PHP fig

00:00:51,770 --> 00:00:58,739
well it's a really cool painting by this

00:00:55,410 --> 00:01:01,820
artist's ninja girl stuff so Rebecca's

00:00:58,739 --> 00:01:04,830
simonson her husband is the lead on

00:01:01,820 --> 00:01:07,470
sculpin project and now works for senseo

00:01:04,830 --> 00:01:08,790
labs in the US so really good art on a

00:01:07,470 --> 00:01:09,840
lot of different open source projects I

00:01:08,790 --> 00:01:11,970
actually have this one hanging on my

00:01:09,840 --> 00:01:15,180
wall that's why I like to start with

00:01:11,970 --> 00:01:16,470
that one so what is fig framework

00:01:15,180 --> 00:01:19,650
interoperability group what is this

00:01:16,470 --> 00:01:21,119
thing see when I first proposed this

00:01:19,650 --> 00:01:23,610
talk it was going to be a bit different

00:01:21,119 --> 00:01:25,560
because we were hoping to finish some

00:01:23,610 --> 00:01:28,409
changes to what this to the answer to

00:01:25,560 --> 00:01:30,150
this question before I started that

00:01:28,409 --> 00:01:32,880
didn't happen because everything's

00:01:30,150 --> 00:01:35,540
behind in technology so what is fig is

00:01:32,880 --> 00:01:40,650
kind of an open question at this moment

00:01:35,540 --> 00:01:42,930
what do I mean by that well let's let's

00:01:40,650 --> 00:01:45,090
start with what in hindsight i like to

00:01:42,930 --> 00:01:50,340
call framework interoperability group 1

00:01:45,090 --> 00:01:52,920
point 0 back in the bad old days PHP had

00:01:50,340 --> 00:01:55,140
no common conventions or standards every

00:01:52,920 --> 00:01:57,119
project did its own thing and none of

00:01:55,140 --> 00:01:59,250
them could talk to each other and the

00:01:57,119 --> 00:02:01,770
closest thing there was to the ability

00:01:59,250 --> 00:02:07,469
to share code was pair who actually

00:02:01,770 --> 00:02:10,020
managed to get pair working wow that I

00:02:07,469 --> 00:02:12,060
expected like three people how many

00:02:10,020 --> 00:02:13,370
people enjoyed the process of working

00:02:12,060 --> 00:02:15,590
with pair

00:02:13,370 --> 00:02:19,370
there we go no hands up this time that

00:02:15,590 --> 00:02:20,870
that's more like it for several years

00:02:19,370 --> 00:02:22,010
there were a lot of people working in a

00:02:20,870 --> 00:02:23,780
lot of different areas and a lot of

00:02:22,010 --> 00:02:26,299
different projects trying to fix that

00:02:23,780 --> 00:02:28,370
problem and trying to get PHP projects

00:02:26,299 --> 00:02:31,220
working together more and collaborating

00:02:28,370 --> 00:02:33,829
more and sharing more code and one of

00:02:31,220 --> 00:02:37,370
the watershed events for that was at the

00:02:33,829 --> 00:02:42,500
PHP tech conference in Chicago in May of

00:02:37,370 --> 00:02:44,569
2009 I was not there at the time but a

00:02:42,500 --> 00:02:46,819
number of project leads and other key

00:02:44,569 --> 00:02:52,879
people at a number of PHP projects were

00:02:46,819 --> 00:02:56,599
there and PHP 5.3 was coming out in a

00:02:52,879 --> 00:02:58,819
month or so and these developers look at

00:02:56,599 --> 00:03:02,030
each other and said you know PHP 53 is

00:02:58,819 --> 00:03:03,379
this cool thing called namespaces maybe

00:03:02,030 --> 00:03:05,540
we should actually use them the same way

00:03:03,379 --> 00:03:09,019
in all of our projects what would that

00:03:05,540 --> 00:03:11,209
be useful and they said welcome yes so

00:03:09,019 --> 00:03:15,170
they got together in at the hotel in a

00:03:11,209 --> 00:03:18,139
smoke-filled room and hammered out a way

00:03:15,170 --> 00:03:21,739
to collaborate and share a usage pattern

00:03:18,139 --> 00:03:23,030
for namespaces disclaimer I was not

00:03:21,739 --> 00:03:25,040
there so I cannot guarantee there's

00:03:23,030 --> 00:03:26,480
smoke my understanding is it was

00:03:25,040 --> 00:03:27,590
actually just after lunch not the middle

00:03:26,480 --> 00:03:30,079
of the night and it was light outside

00:03:27,590 --> 00:03:32,959
but dark small smoke-filled room makes a

00:03:30,079 --> 00:03:37,700
much better image and they came up with

00:03:32,959 --> 00:03:39,889
something that's they called PSR 0 PS

00:03:37,700 --> 00:03:42,290
are standing for PHP standard

00:03:39,889 --> 00:03:46,970
recommendation 0 because geeks counted

00:03:42,290 --> 00:03:52,150
zero and it was a fairly short common

00:03:46,970 --> 00:03:54,260
standard for autoloading and namespaces

00:03:52,150 --> 00:03:56,470
heavily inspired by the way Java worked

00:03:54,260 --> 00:03:58,459
and by the way pair worked at the time

00:03:56,470 --> 00:04:01,449
give or take the fact that pair didn't

00:03:58,459 --> 00:04:03,410
have namespaces it was fairly basic

00:04:01,449 --> 00:04:05,660
didn't do all that much but it didn't

00:04:03,410 --> 00:04:08,389
need to be but it provided some common

00:04:05,660 --> 00:04:11,510
way to handle autoloading of classes

00:04:08,389 --> 00:04:15,260
between different projects that you

00:04:11,510 --> 00:04:16,669
could count on it projects using it all

00:04:15,260 --> 00:04:17,989
auto loading their code in the same way

00:04:16,669 --> 00:04:22,310
which means you could use a single

00:04:17,989 --> 00:04:25,099
common autoloading pattern and they came

00:04:22,310 --> 00:04:27,170
back and since some of them had admin

00:04:25,099 --> 00:04:29,540
access on PHP net

00:04:27,170 --> 00:04:32,450
they set up a mailing list PHP standards

00:04:29,540 --> 00:04:34,910
Atlas lab php.net and announce to the

00:04:32,450 --> 00:04:37,670
world that there is now a PHP standards

00:04:34,910 --> 00:04:39,920
group and here is our autoloader that we

00:04:37,670 --> 00:04:43,850
shall all use and for all the community

00:04:39,920 --> 00:04:45,950
to share and then take and use and the

00:04:43,850 --> 00:04:50,930
community came back and said who the

00:04:45,950 --> 00:04:52,310
hell are you because PHP was not used to

00:04:50,930 --> 00:04:53,630
working together or being told what to

00:04:52,310 --> 00:04:57,290
do everyone was used to doing their own

00:04:53,630 --> 00:05:00,040
thing and who cares about anyone else so

00:04:57,290 --> 00:05:02,810
yeah this went over like a lead balloon

00:05:00,040 --> 00:05:05,240
they were very quickly thrown off of

00:05:02,810 --> 00:05:08,030
list at PHP Nets they were told very

00:05:05,240 --> 00:05:10,220
clearly get out initially the plan was

00:05:08,030 --> 00:05:11,720
to have a closed mailing list which was

00:05:10,220 --> 00:05:15,320
totally incompatible the way php.net

00:05:11,720 --> 00:05:17,360
worked so they moved to google groups

00:05:15,320 --> 00:05:19,780
and didn't quite make it a closed list

00:05:17,360 --> 00:05:22,100
was a semi-closed list initially

00:05:19,780 --> 00:05:24,340
throughout the course of 2009 they

00:05:22,100 --> 00:05:27,170
admitted a couple of new projects as

00:05:24,340 --> 00:05:31,520
members of course weather was a project

00:05:27,170 --> 00:05:33,890
or person was kind of a fuzzy situation

00:05:31,520 --> 00:05:35,150
this is when Drupal was added by and I

00:05:33,890 --> 00:05:37,850
was invited in as the Drupal

00:05:35,150 --> 00:05:41,060
representative and it basically did

00:05:37,850 --> 00:05:42,620
nothing for a year I actually went back

00:05:41,060 --> 00:05:43,880
and check the archives there were four

00:05:42,620 --> 00:05:48,530
messages to the mailing list in the

00:05:43,880 --> 00:05:50,900
entirety of 2010 good finally woke up in

00:05:48,530 --> 00:05:53,780
2011 sometime and started talking but

00:05:50,900 --> 00:05:57,980
not actually being useful because geeks

00:05:53,780 --> 00:06:02,150
online I guess or something finally in

00:05:57,980 --> 00:06:04,990
2012 is now three years into this

00:06:02,150 --> 00:06:08,540
mailing list / groups existence it

00:06:04,990 --> 00:06:10,340
started actually being useful one of the

00:06:08,540 --> 00:06:13,310
first things that data is rename the

00:06:10,340 --> 00:06:16,330
group from PHP standards to the

00:06:13,310 --> 00:06:20,840
framework interoperability group or fig

00:06:16,330 --> 00:06:22,640
why well despite the name it's not just

00:06:20,840 --> 00:06:26,120
about frameworks in fact the majority of

00:06:22,640 --> 00:06:30,050
projects involved in fig today and even

00:06:26,120 --> 00:06:31,820
since 2012 are not frameworks many of

00:06:30,050 --> 00:06:34,570
them are standalone libraries many of

00:06:31,820 --> 00:06:36,620
them are applications like drupal a

00:06:34,570 --> 00:06:39,890
drupal of framework and application i

00:06:36,620 --> 00:06:41,070
don't know whatever and because calling

00:06:39,890 --> 00:06:42,270
it the PHP interoperability

00:06:41,070 --> 00:06:46,080
group would have given a much less

00:06:42,270 --> 00:06:48,570
pleasant name there at acronym one

00:06:46,080 --> 00:06:50,460
person is laughing anyway and it kind of

00:06:48,570 --> 00:06:54,540
actually became useful at this point as

00:06:50,460 --> 00:06:59,280
an organization okay so what's this

00:06:54,540 --> 00:07:02,490
group actually going to undo well the

00:06:59,280 --> 00:07:04,950
website at least says this we are a

00:07:02,490 --> 00:07:06,720
group of established PHP projects whose

00:07:04,950 --> 00:07:08,730
goal is to talk about commonalities and

00:07:06,720 --> 00:07:11,880
find ways that we can work better

00:07:08,730 --> 00:07:17,550
together nice vague wishy-washy

00:07:11,880 --> 00:07:20,190
statement what it does is debate and

00:07:17,550 --> 00:07:23,790
discuss and vote on PHP standard

00:07:20,190 --> 00:07:26,370
recommendations which are basically like

00:07:23,790 --> 00:07:28,710
I the rfcs you get from internet

00:07:26,370 --> 00:07:33,920
Engineering Task Force but for PHP or

00:07:28,710 --> 00:07:39,330
more like pips in Python or a srs in

00:07:33,920 --> 00:07:40,890
Java same basic idea and the scope was

00:07:39,330 --> 00:07:43,740
pretty much anything that could be

00:07:40,890 --> 00:07:46,290
standardized that improves collaboration

00:07:43,740 --> 00:07:52,500
and interoperability between member

00:07:46,290 --> 00:07:56,190
projects okay that fair there a lot of

00:07:52,500 --> 00:08:01,680
problems with that and this kind of

00:07:56,190 --> 00:08:03,660
changed in 2013 and it fig.2 i would

00:08:01,680 --> 00:08:05,640
call kind of the united nations of PHP

00:08:03,660 --> 00:08:10,290
with all of the positive and negative

00:08:05,640 --> 00:08:12,090
implications that analogy has so 2013

00:08:10,290 --> 00:08:14,820
there were two big questions that came

00:08:12,090 --> 00:08:18,810
up that people were debating in the

00:08:14,820 --> 00:08:20,790
group one was so are we a group of

00:08:18,810 --> 00:08:23,520
projects or are we group of people

00:08:20,790 --> 00:08:27,300
because the original setup it wasn't

00:08:23,520 --> 00:08:30,270
even a charters the original common

00:08:27,300 --> 00:08:32,280
convention was a little of each it was

00:08:30,270 --> 00:08:34,110
cool people but you were defined as cool

00:08:32,280 --> 00:08:38,000
by the fact that through a project lead

00:08:34,110 --> 00:08:38,000
which was a very poor definition of cool

00:08:38,270 --> 00:08:43,500
the other was there was really no

00:08:40,680 --> 00:08:45,480
structure to the two how PSRs were

00:08:43,500 --> 00:08:47,880
worked on other than will eventually

00:08:45,480 --> 00:08:50,790
vote on something it was it dude any

00:08:47,880 --> 00:08:53,160
form of organization and so 2013 we

00:08:50,790 --> 00:08:53,640
started getting semi-formal working

00:08:53,160 --> 00:08:55,500
groups

00:08:53,640 --> 00:09:02,100
these were two different votes that were

00:08:55,500 --> 00:09:05,280
recalled first one the idea that as of

00:09:02,100 --> 00:09:10,770
today fig is an organization of projects

00:09:05,280 --> 00:09:12,420
not people projects are voted in by the

00:09:10,770 --> 00:09:14,640
voting representatives of various

00:09:12,420 --> 00:09:16,470
projects who may or may not be a project

00:09:14,640 --> 00:09:18,630
lead I'm not the project lead of Drupal

00:09:16,470 --> 00:09:24,570
but i am the drupal representative to

00:09:18,630 --> 00:09:27,870
fig so i technically represent trees and

00:09:24,570 --> 00:09:32,370
then project can change their voting rep

00:09:27,870 --> 00:09:34,200
at any time they do that sometimes some

00:09:32,370 --> 00:09:37,170
project the voting rep kind of works on

00:09:34,200 --> 00:09:39,270
their own some the voting rep is the

00:09:37,170 --> 00:09:41,550
project lead some the project rap goes

00:09:39,270 --> 00:09:42,990
back to some committee on their project

00:09:41,550 --> 00:09:46,890
and talks about stuff before making a

00:09:42,990 --> 00:09:52,380
vote the currently about 38 projects as

00:09:46,890 --> 00:09:54,780
of this past weekend and ultimately

00:09:52,380 --> 00:09:56,670
project reps are answerable to their

00:09:54,780 --> 00:10:00,540
projects as that they are essentially

00:09:56,670 --> 00:10:03,780
ambassadors to a PHP UN it is the effect

00:10:00,540 --> 00:10:06,960
of analogy so this readable not at all I

00:10:03,780 --> 00:10:08,550
apologize for that but we have project

00:10:06,960 --> 00:10:12,450
representatives who represent a member

00:10:08,550 --> 00:10:17,040
project and then anytime you have a new

00:10:12,450 --> 00:10:19,980
PS are proposed there are three key

00:10:17,040 --> 00:10:23,010
people involved in that one is the

00:10:19,980 --> 00:10:24,930
editor who can be anyone and then two

00:10:23,010 --> 00:10:27,090
sponsors who have to be voting

00:10:24,930 --> 00:10:30,150
representatives this is a way to say

00:10:27,090 --> 00:10:32,010
okay there's enough interest in

00:10:30,150 --> 00:10:35,490
standardizing something that it's worth

00:10:32,010 --> 00:10:39,710
our time to consider and that's a vote

00:10:35,490 --> 00:10:42,540
of it so you need to have a two sponsors

00:10:39,710 --> 00:10:45,120
for that and then a vote of the member

00:10:42,540 --> 00:10:47,490
projects to say yes we will we're okay

00:10:45,120 --> 00:10:49,310
with working on this exit and then

00:10:47,490 --> 00:10:51,900
there's also we just recently added

00:10:49,310 --> 00:10:53,550
elected secretaries to deal with the

00:10:51,900 --> 00:10:56,250
bureaucracy and paperwork involved in

00:10:53,550 --> 00:10:59,190
running a standards group which there is

00:10:56,250 --> 00:11:00,810
actually a fair bit of pretty much the

00:10:59,190 --> 00:11:04,710
only thing that is limited to those

00:11:00,810 --> 00:11:07,200
voting reps is voting so the mailing

00:11:04,710 --> 00:11:07,590
list is these days open anyone in this

00:11:07,200 --> 00:11:10,380
room

00:11:07,590 --> 00:11:13,890
can partake of discussion anyone in this

00:11:10,380 --> 00:11:16,890
room can be an editor anyone in this

00:11:13,890 --> 00:11:18,600
room can work on a speck the only thing

00:11:16,890 --> 00:11:21,210
that is restricted at all right now is

00:11:18,600 --> 00:11:24,270
actually voting to approve things and

00:11:21,210 --> 00:11:26,190
that's limited to the voting reps the

00:11:24,270 --> 00:11:29,730
process today as of this new fig 2 point

00:11:26,190 --> 00:11:35,400
0 model you've got an idea someone has

00:11:29,730 --> 00:11:37,170
an idea for a specification and they

00:11:35,400 --> 00:11:40,140
bring it up and discuss they get two

00:11:37,170 --> 00:11:44,190
sponsors for it and there's an entrance

00:11:40,140 --> 00:11:46,140
vote for the spec if that passes then

00:11:44,190 --> 00:11:47,580
this is just an idea it doesn't have

00:11:46,140 --> 00:11:49,080
it's not fully fleshed out it's hey we

00:11:47,580 --> 00:11:53,100
should standardized X we should have an

00:11:49,080 --> 00:11:56,820
interface spec for X or whatever when it

00:11:53,100 --> 00:11:59,240
gets voted in as just a concept the

00:11:56,820 --> 00:12:02,730
entrance vote it goes into a draft state

00:11:59,240 --> 00:12:04,200
it gets a number at this point so just

00:12:02,730 --> 00:12:05,910
because something is PSR and a number

00:12:04,200 --> 00:12:07,890
doesn't mean it's approved yet this is

00:12:05,910 --> 00:12:10,760
unlike IETF where they assign the number

00:12:07,890 --> 00:12:13,530
at the last second with in fig the

00:12:10,760 --> 00:12:14,490
number of a standard is specified when

00:12:13,530 --> 00:12:17,850
we say we're going to start thinking

00:12:14,490 --> 00:12:19,410
about it basically at this point you

00:12:17,850 --> 00:12:20,820
work on it the editor owns the spec

00:12:19,410 --> 00:12:23,040
there the one with final authority on

00:12:20,820 --> 00:12:25,890
what goes into it but take interest from

00:12:23,040 --> 00:12:27,090
all comers get right on it revise it

00:12:25,890 --> 00:12:30,900
throw it out and start over whatever you

00:12:27,090 --> 00:12:34,290
going to do until at some point the

00:12:30,900 --> 00:12:36,740
editors and a coordinator say you know

00:12:34,290 --> 00:12:40,170
what good enough hey other members

00:12:36,740 --> 00:12:43,890
please review is essentially a release

00:12:40,170 --> 00:12:45,300
candidate stage very few changes are

00:12:43,890 --> 00:12:47,760
allowed to the spec this is all in

00:12:45,300 --> 00:12:48,990
public before this but this is when a

00:12:47,760 --> 00:12:54,060
lot of people first start paying

00:12:48,990 --> 00:12:55,890
attention frankly and only minor changes

00:12:54,060 --> 00:12:59,820
allowed this for spell checking editing

00:12:55,890 --> 00:13:02,880
and so forth and the draft process can

00:12:59,820 --> 00:13:05,820
take any amount of time anywhere from a

00:13:02,880 --> 00:13:07,380
few weeks to a few years review phase

00:13:05,820 --> 00:13:09,990
has to be at least two weeks but can be

00:13:07,380 --> 00:13:13,110
longer than that again depends on what

00:13:09,990 --> 00:13:16,050
is needed for that spec and then there's

00:13:13,110 --> 00:13:18,660
a vote and if it's is approved by the

00:13:16,050 --> 00:13:20,889
other members then great we now have a

00:13:18,660 --> 00:13:22,299
new spec for PHP

00:13:20,889 --> 00:13:25,089
which you are under no obligation

00:13:22,299 --> 00:13:27,850
whatsoever to pay attention to fig has

00:13:25,089 --> 00:13:29,619
no binding Authority on anything

00:13:27,850 --> 00:13:34,899
including its own member projects

00:13:29,619 --> 00:13:38,410
everything is recommendations only so

00:13:34,899 --> 00:13:43,600
the team again is the editor who owns

00:13:38,410 --> 00:13:45,399
the process sponsors the coordinator who

00:13:43,600 --> 00:13:48,100
is originally supposed to be kind of the

00:13:45,399 --> 00:13:52,989
secretary and process person for that

00:13:48,100 --> 00:13:54,999
spec but then we added the secretaries

00:13:52,989 --> 00:13:57,669
for fig itself so those seem kind of

00:13:54,999 --> 00:13:59,379
irrelevant and again anyone can

00:13:57,669 --> 00:14:02,079
contribute not just these three people

00:13:59,379 --> 00:14:05,079
lots of specs have a number of people

00:14:02,079 --> 00:14:09,489
working on them so that's what we are

00:14:05,079 --> 00:14:14,169
today this is fig today but there are a

00:14:09,489 --> 00:14:15,819
couple of problems first on paper we say

00:14:14,169 --> 00:14:18,639
that figures a collection of projects

00:14:15,819 --> 00:14:20,259
not people but let's be perfectly honest

00:14:18,639 --> 00:14:26,350
people are still people you're still

00:14:20,259 --> 00:14:28,329
talking to people and a lot of it's hard

00:14:26,350 --> 00:14:30,850
to separate the person from the project

00:14:28,329 --> 00:14:33,449
they represent both as a project wrap

00:14:30,850 --> 00:14:35,919
and talking to other project graphs

00:14:33,449 --> 00:14:37,179
there's even one or two people who just

00:14:35,919 --> 00:14:39,879
kind of ignore the fact that we had this

00:14:37,179 --> 00:14:45,279
vote and still insist that we're about

00:14:39,879 --> 00:14:47,949
people even though they're wrong a lot

00:14:45,279 --> 00:14:51,220
of voting reps are busy their project

00:14:47,949 --> 00:14:52,629
leads they are you know initiative leads

00:14:51,220 --> 00:14:54,009
or the equivalents in their project

00:14:52,629 --> 00:14:56,339
they've got other things on their mind

00:14:54,009 --> 00:14:59,110
they're not actively engaged in every

00:14:56,339 --> 00:15:00,759
PSR and sometimes they forget to vote

00:14:59,110 --> 00:15:04,360
we've actually had a number of votes

00:15:00,759 --> 00:15:08,559
that didn't get to quorum because people

00:15:04,360 --> 00:15:12,220
are just busy not around because we've

00:15:08,559 --> 00:15:16,209
conflated paying attention supporting

00:15:12,220 --> 00:15:19,029
figs move goal and being one of the cool

00:15:16,209 --> 00:15:21,639
kids so projects will join and then do

00:15:19,029 --> 00:15:23,019
nothing after they've joined because

00:15:21,639 --> 00:15:25,089
while they join to say that they were

00:15:23,019 --> 00:15:27,160
part of fig and we would hope that the

00:15:25,089 --> 00:15:31,480
people involved doing something and get

00:15:27,160 --> 00:15:33,639
being engaged but they aren't always it

00:15:31,480 --> 00:15:34,720
also means that very often we don't

00:15:33,639 --> 00:15:37,089
really have domain expert

00:15:34,720 --> 00:15:39,970
it's working on something if you have a

00:15:37,089 --> 00:15:42,579
speck coming up on cashing which is an

00:15:39,970 --> 00:15:44,410
actual spec that we have then it really

00:15:42,579 --> 00:15:46,420
helped have cashing experts involved but

00:15:44,410 --> 00:15:48,850
a lot of the casting experts in the PHP

00:15:46,420 --> 00:15:51,250
space aren't involved in fig and don't

00:15:48,850 --> 00:15:53,829
know about it you don't know the specs

00:15:51,250 --> 00:15:54,910
happening so now what do you do how do

00:15:53,829 --> 00:15:56,800
you get the right people in the room

00:15:54,910 --> 00:15:58,240
just because your project Lee doesn't

00:15:56,800 --> 00:16:04,470
actually mean you the right person to be

00:15:58,240 --> 00:16:07,180
in the room and also who is fig for is

00:16:04,470 --> 00:16:10,870
it just for member projects and ignore

00:16:07,180 --> 00:16:13,300
everyone else there are people who feel

00:16:10,870 --> 00:16:17,439
that it should be that way in practice

00:16:13,300 --> 00:16:19,379
that's kind of impossible because when a

00:16:17,439 --> 00:16:22,000
large number of projects adopt something

00:16:19,379 --> 00:16:23,170
everyone else gets pressure to do so who

00:16:22,000 --> 00:16:26,019
has seen any of the debates around the

00:16:23,170 --> 00:16:28,329
PSR to coding standard a couple of

00:16:26,019 --> 00:16:29,980
people yeah Drupal doesn't follow the

00:16:28,329 --> 00:16:31,750
PSR to coding standard we'll talk about

00:16:29,980 --> 00:16:33,970
that in a bit but there is regular

00:16:31,750 --> 00:16:38,350
pressure for us to do so because it's

00:16:33,970 --> 00:16:39,699
the default in phpstorm because all of

00:16:38,350 --> 00:16:41,740
the third party code we pull in our

00:16:39,699 --> 00:16:44,949
vendor libraries using that style which

00:16:41,740 --> 00:16:48,370
makes us odd man out we're not required

00:16:44,949 --> 00:16:51,790
to adopt it but any project is going to

00:16:48,370 --> 00:16:54,459
have pressure to follow popular PSRs

00:16:51,790 --> 00:16:57,100
simply because that's the way networks

00:16:54,459 --> 00:17:01,480
work that's the way human networks work

00:16:57,100 --> 00:17:04,659
and based on actual surveys we've done

00:17:01,480 --> 00:17:06,819
most the PHP community sees us as a

00:17:04,659 --> 00:17:09,579
standards body at this point for all of

00:17:06,819 --> 00:17:12,459
PHP not just for member projects for

00:17:09,579 --> 00:17:14,409
exactly that reason because there's a

00:17:12,459 --> 00:17:21,459
vacuum there in fig fills it whether it

00:17:14,409 --> 00:17:24,189
wants to or not so last year at the end

00:17:21,459 --> 00:17:27,220
of last year the several discussions

00:17:24,189 --> 00:17:30,280
happened around okay how do we fix some

00:17:27,220 --> 00:17:34,650
of these problems and this turned into a

00:17:30,280 --> 00:17:37,870
proposal by me primarily called fig 3

00:17:34,650 --> 00:17:41,950
which everything about to say I'm about

00:17:37,870 --> 00:17:43,720
to say is caveated with this is not

00:17:41,950 --> 00:17:45,130
finalized this is reco actually in

00:17:43,720 --> 00:17:47,679
voting right now for whether or not to

00:17:45,130 --> 00:17:48,550
adopt this so this is a possible future

00:17:47,679 --> 00:17:53,050
in a week

00:17:48,550 --> 00:17:54,940
you actually end of this week and as

00:17:53,050 --> 00:17:56,410
that I am the primary author of this

00:17:54,940 --> 00:18:01,120
proposal so what I'm about to say is

00:17:56,410 --> 00:18:03,180
incredibly biased bear that in mind the

00:18:01,120 --> 00:18:07,690
way to try and address these problems

00:18:03,180 --> 00:18:09,010
that we read n tified is basically

00:18:07,690 --> 00:18:11,470
embrace the fact that we're a standards

00:18:09,010 --> 00:18:13,870
body and model ourselves on other

00:18:11,470 --> 00:18:19,060
standards bodies that have figured out

00:18:13,870 --> 00:18:23,070
how this works in particular the IETF so

00:18:19,060 --> 00:18:25,360
we still have number of projects but

00:18:23,070 --> 00:18:26,980
since most of the member project

00:18:25,360 --> 00:18:31,540
representatives don't actually do

00:18:26,980 --> 00:18:32,770
anything on a regular basis we add like

00:18:31,540 --> 00:18:35,290
what we're calling a core committee

00:18:32,770 --> 00:18:37,420
which is an elected group of people

00:18:35,290 --> 00:18:39,790
elected by project representatives and

00:18:37,420 --> 00:18:42,490
everyone else working on PSRs everyone

00:18:39,790 --> 00:18:44,350
involved in fig who are supposed to

00:18:42,490 --> 00:18:46,360
either then basically required in their

00:18:44,350 --> 00:18:50,110
job description to be paying attention

00:18:46,360 --> 00:18:52,830
and to look at the big picture of fig

00:18:50,110 --> 00:18:57,640
big picture of several specifications

00:18:52,830 --> 00:19:00,580
meanwhile we have a more formal working

00:18:57,640 --> 00:19:04,690
group to find for PSR at least five

00:19:00,580 --> 00:19:07,480
people editor a core committee member

00:19:04,690 --> 00:19:11,920
who's a sponsor and at least three other

00:19:07,480 --> 00:19:14,320
people who again all but the sponsor can

00:19:11,920 --> 00:19:16,150
be anyone involved in PHP there you

00:19:14,320 --> 00:19:20,370
don't have to be blessed in order to do

00:19:16,150 --> 00:19:22,810
so anyone can be involved in that and

00:19:20,370 --> 00:19:24,310
they're charged with actually developing

00:19:22,810 --> 00:19:29,650
a working group or developing a

00:19:24,310 --> 00:19:31,120
specification why well we can get actual

00:19:29,650 --> 00:19:32,110
domain experts involved in that if

00:19:31,120 --> 00:19:33,970
there's a minimum of five people

00:19:32,110 --> 00:19:36,730
involved so you kind of have to dig up

00:19:33,970 --> 00:19:38,410
and find the people involved in that if

00:19:36,730 --> 00:19:39,490
you're working on it aspect for

00:19:38,410 --> 00:19:41,380
something that's going to affect these

00:19:39,490 --> 00:19:44,020
four projects you want those four

00:19:41,380 --> 00:19:45,850
projects actively involved but these

00:19:44,020 --> 00:19:48,310
other projects that are not really going

00:19:45,850 --> 00:19:52,510
to be impacted that much have a reduced

00:19:48,310 --> 00:19:55,420
role because they should there's been

00:19:52,510 --> 00:19:58,090
talk of having fig work on

00:19:55,420 --> 00:19:59,380
specifications for promises in PHP so

00:19:58,090 --> 00:20:00,930
who's done who knows promises from

00:19:59,380 --> 00:20:04,030
JavaScript

00:20:00,930 --> 00:20:05,800
promises in PHP to do asynchronous PHP

00:20:04,030 --> 00:20:08,410
yes it's a thing it's really kind of

00:20:05,800 --> 00:20:10,720
cool as the drupal representative i have

00:20:08,410 --> 00:20:12,670
nothing to offer on this front the

00:20:10,720 --> 00:20:14,940
people who write async libraries in PHP

00:20:12,670 --> 00:20:17,980
should be the ones driving that not me

00:20:14,940 --> 00:20:23,230
that's what we get here by having a more

00:20:17,980 --> 00:20:26,140
focused working group so the working

00:20:23,230 --> 00:20:29,080
group again is an editor who acts as a

00:20:26,140 --> 00:20:31,270
gatekeeper can be anyone a sponsor who

00:20:29,080 --> 00:20:33,300
acts as a bridge to the core committee

00:20:31,270 --> 00:20:39,550
and provides oversight and guidance and

00:20:33,300 --> 00:20:41,950
other people that core committee is that

00:20:39,550 --> 00:20:43,810
are elected and they're not

00:20:41,950 --> 00:20:46,450
project-based they do not have to be a

00:20:43,810 --> 00:20:49,960
project representative anyone is

00:20:46,450 --> 00:20:54,550
eligible to be a core committee member

00:20:49,960 --> 00:20:56,950
if I think they're voted in I put in for

00:20:54,550 --> 00:20:59,260
a two-year term we stagger it so they do

00:20:56,950 --> 00:21:00,820
need to get reapproved by people

00:20:59,260 --> 00:21:02,590
periodically so you don't get the

00:21:00,820 --> 00:21:03,730
elected for life and then just sit there

00:21:02,590 --> 00:21:07,750
and do nothing except to have a line on

00:21:03,730 --> 00:21:10,540
your resume a problem and they focus on

00:21:07,750 --> 00:21:13,180
the big picture of fig they focus on our

00:21:10,540 --> 00:21:15,910
all these specifications compatible with

00:21:13,180 --> 00:21:19,180
each other are we following trends in

00:21:15,910 --> 00:21:20,740
the language did we actually bother to

00:21:19,180 --> 00:21:22,720
reach out to this project that will be

00:21:20,740 --> 00:21:25,300
impacted by the spec so they had a fair

00:21:22,720 --> 00:21:26,770
say that's the kind of thing the core

00:21:25,300 --> 00:21:30,100
committee is responsible for that kind

00:21:26,770 --> 00:21:35,110
of big picture oversight of the work

00:21:30,100 --> 00:21:37,420
that happens because we now have a more

00:21:35,110 --> 00:21:40,300
formal working group we can add an extra

00:21:37,420 --> 00:21:43,330
check to the process as well so in fig

00:21:40,300 --> 00:21:46,600
three we have you know germination of an

00:21:43,330 --> 00:21:48,280
idea put together a working group the

00:21:46,600 --> 00:21:51,190
core committee now is responsible for

00:21:48,280 --> 00:21:53,050
the entrance vote which means it's the

00:21:51,190 --> 00:21:54,190
people who have stepped forward and said

00:21:53,050 --> 00:21:58,270
yes I will always be paying attention

00:21:54,190 --> 00:22:02,650
and looking at that big picture then

00:21:58,270 --> 00:22:04,780
assuming it passes a working group works

00:22:02,650 --> 00:22:07,960
in the PSR give me more than five people

00:22:04,780 --> 00:22:10,390
if appropriate and then rather than just

00:22:07,960 --> 00:22:11,800
the editor saying I think it's done the

00:22:10,390 --> 00:22:13,350
whole working group has to agree it's

00:22:11,800 --> 00:22:16,470
done there's a

00:22:13,350 --> 00:22:18,660
working group vote of two-thirds so

00:22:16,470 --> 00:22:22,280
there needs to be broad consensus to

00:22:18,660 --> 00:22:24,960
adopt a specification and once they've

00:22:22,280 --> 00:22:27,799
decided okay yes this is good we're done

00:22:24,960 --> 00:22:31,289
with it then it can go into review and

00:22:27,799 --> 00:22:34,350
at this point under the current model

00:22:31,289 --> 00:22:36,690
you can vote on this within two weeks in

00:22:34,350 --> 00:22:40,020
fig.3 we're saying you have to actually

00:22:36,690 --> 00:22:41,490
use it first just like IETF there needs

00:22:40,020 --> 00:22:44,490
to be at least two working

00:22:41,490 --> 00:22:46,260
implementations if a specification isn't

00:22:44,490 --> 00:22:50,460
in it like an interface or something

00:22:46,260 --> 00:22:52,559
then that may not you know it's kind of

00:22:50,460 --> 00:22:53,460
fuzzy what an implementation is but you

00:22:52,559 --> 00:22:55,890
have to show that this thing can

00:22:53,460 --> 00:22:57,390
actually work in practice before you can

00:22:55,890 --> 00:23:00,530
have a final vote on it it has to

00:22:57,390 --> 00:23:03,030
actually be tested in in production and

00:23:00,530 --> 00:23:06,000
then the core committee provides the

00:23:03,030 --> 00:23:08,909
final approval again a two-thirds vote

00:23:06,000 --> 00:23:11,960
so that you have broad consensus and

00:23:08,909 --> 00:23:14,820
broad support for it this process is

00:23:11,960 --> 00:23:18,799
basically a slimmed down version of how

00:23:14,820 --> 00:23:22,740
the IETF works which provides again

00:23:18,799 --> 00:23:24,630
forces that broad consensus gets the

00:23:22,740 --> 00:23:26,429
people who are impacted in the room and

00:23:24,630 --> 00:23:28,500
the people who are directly impacted

00:23:26,429 --> 00:23:35,760
have more say than those who aren't

00:23:28,500 --> 00:23:37,799
which is how it should be and we have

00:23:35,760 --> 00:23:41,549
people who are actively you know

00:23:37,799 --> 00:23:43,740
steering the process as a whole that's

00:23:41,549 --> 00:23:47,400
the proposal that's the proposal that

00:23:43,740 --> 00:23:53,610
fig is currently considering and voting

00:23:47,400 --> 00:23:56,850
on is it going to pass though well the

00:23:53,610 --> 00:23:58,080
vote ends friday so we'll find out as of

00:23:56,850 --> 00:24:02,130
last night when I was putting together

00:23:58,080 --> 00:24:05,130
these slides it was currently 12 votes

00:24:02,130 --> 00:24:06,480
yes five no with two abstains checked

00:24:05,130 --> 00:24:09,659
earlier today we've got a couple more

00:24:06,480 --> 00:24:11,970
coats so I think it's now 14 to seven

00:24:09,659 --> 00:24:17,280
maybe it's 15 to seven something like

00:24:11,970 --> 00:24:19,650
that so probably I can't guarantee it

00:24:17,280 --> 00:24:20,970
but probably the single pass and this is

00:24:19,650 --> 00:24:23,370
where I was hoping to have an answer to

00:24:20,970 --> 00:24:26,909
this question before this talk but such

00:24:23,370 --> 00:24:31,080
as life so that's fig

00:24:26,909 --> 00:24:32,669
that's what it does I totally forgot to

00:24:31,080 --> 00:24:35,129
mention here fig.3 also has a proper

00:24:32,669 --> 00:24:36,869
mission statement which we haven't had

00:24:35,129 --> 00:24:38,399
before who's had gone through

00:24:36,869 --> 00:24:42,389
organizations that don't have mission

00:24:38,399 --> 00:24:45,149
statements sucks doesn't it yeah fig.3

00:24:42,389 --> 00:24:47,340
actually has a mission statements which

00:24:45,149 --> 00:24:52,200
talks about serving the whole PHP

00:24:47,340 --> 00:24:53,789
community not just member projects so

00:24:52,200 --> 00:24:57,119
what have we done this is a lot of

00:24:53,789 --> 00:24:59,099
politics and process and you know

00:24:57,119 --> 00:25:04,169
mumbo-jumbo how does this actually

00:24:59,099 --> 00:25:06,599
benefit us as developers well there are

00:25:04,169 --> 00:25:08,909
a number of specifications that are

00:25:06,599 --> 00:25:12,149
published now in widespread use

00:25:08,909 --> 00:25:13,979
throughout the PHP world we roughly

00:25:12,149 --> 00:25:16,379
split them into hard specs and soft

00:25:13,979 --> 00:25:17,849
specs hard spectrum or developer

00:25:16,379 --> 00:25:22,139
oriented soft specs are kind of process

00:25:17,849 --> 00:25:24,450
oriented the hard specs PS r0 is the

00:25:22,139 --> 00:25:26,940
original one that's been replaced by PSR

00:25:24,450 --> 00:25:30,349
for which is an updated updated

00:25:26,940 --> 00:25:32,879
autoloading standard we have a logging

00:25:30,349 --> 00:25:34,649
specification we have one for caching

00:25:32,879 --> 00:25:37,529
who was just in David's trousers caching

00:25:34,649 --> 00:25:39,869
session that this is the PSR six he was

00:25:37,529 --> 00:25:44,879
talking about and perhaps the most

00:25:39,869 --> 00:25:48,419
important PSR 74 HTTP messages then we

00:25:44,879 --> 00:25:50,700
also have to commit soft specs on coding

00:25:48,419 --> 00:25:53,190
standards so I'm going to go through

00:25:50,700 --> 00:25:56,970
some of these in a very high level

00:25:53,190 --> 00:25:58,009
cursory you know limited detail for more

00:25:56,970 --> 00:26:01,859
information see the actual

00:25:58,009 --> 00:26:03,059
specifications or talk directly on these

00:26:01,859 --> 00:26:06,119
topics which we've had a triple come

00:26:03,059 --> 00:26:07,710
before so autoloading who was the last

00:26:06,119 --> 00:26:10,889
time you thought about autoloading while

00:26:07,710 --> 00:26:13,619
working on PHP code it's been a while

00:26:10,889 --> 00:26:16,409
right yeah that's because it's a soft

00:26:13,619 --> 00:26:18,479
solve problem you use PS are zero or PSR

00:26:16,409 --> 00:26:20,429
for and composer and you don't think

00:26:18,479 --> 00:26:23,820
about autoloading anymore this is a

00:26:20,429 --> 00:26:25,320
major improvement over PHP 5.1 or 5.2

00:26:23,820 --> 00:26:28,529
who remembers dealing with autoloading

00:26:25,320 --> 00:26:32,129
back then who remembers clearing the

00:26:28,529 --> 00:26:34,859
registry in drupal 7 I apologize for

00:26:32,129 --> 00:26:38,940
that I wrote it I'm sorry this is way

00:26:34,859 --> 00:26:40,080
better this is why we use this now p sr

00:26:38,940 --> 00:26:42,500
00:26:40,080 --> 00:26:47,429
very very simple as that Java inspired

00:26:42,500 --> 00:26:51,090
every backslash in every name so a

00:26:47,429 --> 00:26:54,929
separator should map to a directory step

00:26:51,090 --> 00:26:58,230
a new directory and the class name Maps

00:26:54,929 --> 00:27:01,610
1212 a file name as do underscores and

00:26:58,230 --> 00:27:03,990
that was for backward compatibility with

00:27:01,610 --> 00:27:06,480
with the old pair convention which was

00:27:03,990 --> 00:27:08,340
the same thing but with underscores PSR

00:27:06,480 --> 00:27:10,919
for updates that a little bit it gets

00:27:08,340 --> 00:27:12,779
rid of that weird handling for

00:27:10,919 --> 00:27:17,929
underscores which makes things simpler

00:27:12,779 --> 00:27:22,590
and you can short shorten the the tree

00:27:17,929 --> 00:27:24,750
who's written modules for Drupal 8 the

00:27:22,590 --> 00:27:26,610
way files are organized in your SRC

00:27:24,750 --> 00:27:29,820
directory in a module that's PSR for

00:27:26,610 --> 00:27:31,919
that is the PSR for autoloader built

00:27:29,820 --> 00:27:34,590
into composer which I'm happy to say was

00:27:31,919 --> 00:27:37,049
built by a drupal developer and added to

00:27:34,590 --> 00:27:41,309
composer just as PSR for was proved

00:27:37,049 --> 00:27:42,720
entry Sen here somewhere okay see

00:27:41,309 --> 00:27:44,669
Andrea's headings around here somewhere

00:27:42,720 --> 00:27:46,080
give him a handshake or hug I'm not sure

00:27:44,669 --> 00:27:49,669
which he prefers but he actually wrote

00:27:46,080 --> 00:27:53,309
the PSR before support and that prefix

00:27:49,669 --> 00:27:56,970
all for like in this case the trail HTML

00:27:53,309 --> 00:27:58,830
model is externally configured basically

00:27:56,970 --> 00:28:03,750
you put it in your composure Jason file

00:27:58,830 --> 00:28:07,950
like this you just you know your name of

00:28:03,750 --> 00:28:10,320
your library autoload PSR for things

00:28:07,950 --> 00:28:11,730
that begin with Krell HTML model are in

00:28:10,320 --> 00:28:14,250
that directory relative to where this

00:28:11,730 --> 00:28:17,850
file is and you no longer have to think

00:28:14,250 --> 00:28:20,220
about all loading ever again in practice

00:28:17,850 --> 00:28:23,850
i would say always use PS are four PS r0

00:28:20,220 --> 00:28:25,740
is obsolete it still works composer

00:28:23,850 --> 00:28:28,049
still supports it but really just use

00:28:25,740 --> 00:28:30,269
PSR for even if you don't have the

00:28:28,049 --> 00:28:33,059
prefix or shorten things it makes you

00:28:30,269 --> 00:28:34,830
more compatible with more conventional

00:28:33,059 --> 00:28:36,990
by not having a special underscore

00:28:34,830 --> 00:28:39,360
handling and shameless plug for this

00:28:36,990 --> 00:28:43,649
library of mine based on Drupal nice

00:28:39,360 --> 00:28:47,970
small example logging who's done logging

00:28:43,649 --> 00:28:49,139
in Drupal 8 it should be all of you

00:28:47,970 --> 00:28:52,380
because you all said you were writing

00:28:49,139 --> 00:28:53,980
triple eight modules PSR three is a

00:28:52,380 --> 00:28:58,360
logging interface standard

00:28:53,980 --> 00:29:01,059
it is what Drupal uses in Drupal 8 it's

00:28:58,360 --> 00:29:02,830
all based on PS are three this is the

00:29:01,059 --> 00:29:05,190
core of PS are three it's a single

00:29:02,830 --> 00:29:09,309
interface for a thing that logs stuff

00:29:05,190 --> 00:29:12,160
the most important method is log which

00:29:09,309 --> 00:29:13,480
is just a log level message and a

00:29:12,160 --> 00:29:17,440
context array and the rest of these are

00:29:13,480 --> 00:29:22,559
just utilities that wraps will log by

00:29:17,440 --> 00:29:26,169
hard coding a level the target here is

00:29:22,559 --> 00:29:28,540
not Drupal it's libraries that might

00:29:26,169 --> 00:29:30,730
want to plug into Drupal it's libraries

00:29:28,540 --> 00:29:33,610
that want to plug into Symphony because

00:29:30,730 --> 00:29:37,360
then Drupal can have its own custom

00:29:33,610 --> 00:29:39,760
logging system that any random library

00:29:37,360 --> 00:29:42,460
we pull in can be compatible with by

00:29:39,760 --> 00:29:44,049
expecting this interface and then you

00:29:42,460 --> 00:29:45,610
can throw Drupal slogger into it and

00:29:44,049 --> 00:29:47,710
suddenly we can log that third-party

00:29:45,610 --> 00:29:49,900
library you can throw if you're in

00:29:47,710 --> 00:29:53,350
Symphony you can throw monologue at it

00:29:49,900 --> 00:30:04,150
and suddenly Symphony can log that a

00:29:53,350 --> 00:30:06,309
third party library oops Rock Slide yeah

00:30:04,150 --> 00:30:08,880
the message also can be either a string

00:30:06,309 --> 00:30:11,980
or an object that implements to string

00:30:08,880 --> 00:30:16,780
it's also log levels to find these are

00:30:11,980 --> 00:30:19,270
based on I RFC 5424 again we're just

00:30:16,780 --> 00:30:22,120
taking known internet standards and

00:30:19,270 --> 00:30:24,400
making PHP interfaces out of them very

00:30:22,120 --> 00:30:27,130
very simple the one odd things that

00:30:24,400 --> 00:30:29,140
context array because context is the

00:30:27,130 --> 00:30:34,030
second-worst variable name in the world

00:30:29,140 --> 00:30:36,549
after data the idea here is additional

00:30:34,030 --> 00:30:38,020
extra stuff including placeholders why

00:30:36,549 --> 00:30:41,710
do we need placeholders as part of

00:30:38,020 --> 00:30:45,850
logging Drupal developers should know

00:30:41,710 --> 00:30:48,690
the answer to this one try logging

00:30:45,850 --> 00:30:52,179
something with a variable in it and that

00:30:48,690 --> 00:30:54,610
variable is user data and now your

00:30:52,179 --> 00:30:57,640
database is gone ok maybe you're logging

00:30:54,610 --> 00:31:02,559
to syslog or to reticence Ted of SQL oh

00:30:57,640 --> 00:31:04,840
great then you just log a script name

00:31:02,559 --> 00:31:06,620
did you realize you could hack a system

00:31:04,840 --> 00:31:12,100
via its logger

00:31:06,620 --> 00:31:14,480
yeah you don't know that output where

00:31:12,100 --> 00:31:15,920
that log string is going to be used in

00:31:14,480 --> 00:31:18,350
advance you don't know how to escape it

00:31:15,920 --> 00:31:21,710
this is a very common problem the Drupal

00:31:18,350 --> 00:31:24,050
should be very familiar with and so you

00:31:21,710 --> 00:31:25,880
provide a placeholder separately you

00:31:24,050 --> 00:31:27,290
just use curly braces to indicate this

00:31:25,880 --> 00:31:31,190
is a variable that will get replaced

00:31:27,290 --> 00:31:33,890
here's a list of variables this is

00:31:31,190 --> 00:31:36,500
basically watchdog or the t function in

00:31:33,890 --> 00:31:38,030
fact it was pair of Drupal developers

00:31:36,500 --> 00:31:41,510
who made sure that this functionality

00:31:38,030 --> 00:31:42,890
made it into TS r three because well we

00:31:41,510 --> 00:31:45,110
know we've run into this problem before

00:31:42,890 --> 00:31:48,040
that's the value of collaboration we

00:31:45,110 --> 00:31:50,900
found bugs and we can fix for everybody

00:31:48,040 --> 00:31:54,410
you can also log exceptions there's a

00:31:50,900 --> 00:31:56,570
magic value exception which means the

00:31:54,410 --> 00:31:57,770
exception that caused the error what you

00:31:56,570 --> 00:31:59,210
do with that but the logger is going to

00:31:57,770 --> 00:32:01,490
do with that hey that's your problem if

00:31:59,210 --> 00:32:03,260
you're writing a standalone library

00:32:01,490 --> 00:32:05,210
which you all should be doing these days

00:32:03,260 --> 00:32:09,050
rather than card coding Drupal modules

00:32:05,210 --> 00:32:11,809
any logging you would do dude via PSR

00:32:09,050 --> 00:32:13,280
three you via this interface because

00:32:11,809 --> 00:32:14,840
then you're suddenly compatible with

00:32:13,280 --> 00:32:16,520
Drupal logging with exemplary logging

00:32:14,840 --> 00:32:21,650
with Zen blogging with laravel logging

00:32:16,520 --> 00:32:25,700
any system can plug into it same basic

00:32:21,650 --> 00:32:28,309
idea for caching a similar goal here is

00:32:25,700 --> 00:32:31,580
logging make it easy for a standalone

00:32:28,309 --> 00:32:34,040
library to be compatible with whatever

00:32:31,580 --> 00:32:36,230
cash system you're using drupal's cash

00:32:34,040 --> 00:32:37,820
system symphonies cash system levels

00:32:36,230 --> 00:32:41,240
caching system whatever it's going to be

00:32:37,820 --> 00:32:47,510
I was actually the editor for this one

00:32:41,240 --> 00:32:49,929
so again bias contains two interfaces

00:32:47,510 --> 00:32:53,080
primarily a cache item and a cash pool

00:32:49,929 --> 00:32:56,210
really works on a repository model here

00:32:53,080 --> 00:32:58,429
basically inspired by drupal because

00:32:56,210 --> 00:33:00,980
we've had caching problems for a long

00:32:58,429 --> 00:33:06,559
time and we ran into a lot of these

00:33:00,980 --> 00:33:08,690
issues basic idea here you have a clash

00:33:06,559 --> 00:33:11,350
pool which is just a collection of

00:33:08,690 --> 00:33:15,470
casual stuff similar to a cache bin in

00:33:11,350 --> 00:33:19,100
in Drupal you can get an item out of a

00:33:15,470 --> 00:33:20,320
pool by some key name that item is

00:33:19,100 --> 00:33:23,110
always a

00:33:20,320 --> 00:33:25,779
item object which could be a hit or not

00:33:23,110 --> 00:33:28,809
you can get the value out of it if it's

00:33:25,779 --> 00:33:31,179
not a hit then you can recompute it set

00:33:28,809 --> 00:33:33,639
a value on it set it to expire at a

00:33:31,179 --> 00:33:35,380
specific time or after a specific amount

00:33:33,639 --> 00:33:39,610
of time using either day time or date

00:33:35,380 --> 00:33:41,019
interval save it return it the standard

00:33:39,610 --> 00:33:44,220
routine you've seen a hundred times in

00:33:41,019 --> 00:33:46,750
Drupal but done with proper objects

00:33:44,220 --> 00:33:50,200
rather than standard class studio

00:33:46,750 --> 00:33:53,019
objects it also supports bulk operations

00:33:50,200 --> 00:33:56,950
this is primarily useful for cash

00:33:53,019 --> 00:34:01,330
warming which we don't really do that

00:33:56,950 --> 00:34:03,370
much of in Drupal but you can say i want

00:34:01,330 --> 00:34:05,679
to pre-compute and cash a hundred

00:34:03,370 --> 00:34:07,000
different values because they're only

00:34:05,679 --> 00:34:08,290
going to rarely change but I want to

00:34:07,000 --> 00:34:11,560
just pre-compute them and not have to

00:34:08,290 --> 00:34:15,550
generate them on a user request all

00:34:11,560 --> 00:34:19,510
right so get an empty item for whatever

00:34:15,550 --> 00:34:22,869
that thing is going to be figure out its

00:34:19,510 --> 00:34:25,300
value and then save it deferred save the

00:34:22,869 --> 00:34:28,179
furred means save this at some point

00:34:25,300 --> 00:34:30,460
when we call commit or when you call

00:34:28,179 --> 00:34:34,000
save again on something else as long as

00:34:30,460 --> 00:34:37,450
it's get saved eventually this gives you

00:34:34,000 --> 00:34:39,099
in the typical like SQL case we can then

00:34:37,450 --> 00:34:40,569
write a whole bunch of insert statements

00:34:39,099 --> 00:34:42,720
in one transaction which will be faster

00:34:40,569 --> 00:34:45,849
you can do that kind of optimization

00:34:42,720 --> 00:34:48,460
other caching backends have different

00:34:45,849 --> 00:34:49,839
multi insert commands you whatever it's

00:34:48,460 --> 00:34:52,179
an interface you do whatever your logic

00:34:49,839 --> 00:34:56,560
is behind that you can also get multiple

00:34:52,179 --> 00:34:58,630
just like you can in Drupal and load

00:34:56,560 --> 00:35:01,119
multiple cash items at once again if you

00:34:58,630 --> 00:35:06,010
know what they're going to be this is a

00:35:01,119 --> 00:35:08,319
casting style known as lookaside caching

00:35:06,010 --> 00:35:10,300
we're in the course of your logic you

00:35:08,319 --> 00:35:13,420
look aside to the cash if we're doing

00:35:10,300 --> 00:35:15,790
something it's the most basic because

00:35:13,420 --> 00:35:18,190
then it's really easy to build read

00:35:15,790 --> 00:35:21,400
through caching on top of that read

00:35:18,190 --> 00:35:23,980
through caching is simply wrap your

00:35:21,400 --> 00:35:25,359
logic in the cache layer rather than

00:35:23,980 --> 00:35:27,550
putting it into grating it together

00:35:25,359 --> 00:35:29,349
which means when you're using interfaces

00:35:27,550 --> 00:35:32,780
this is easy this is why you should

00:35:29,349 --> 00:35:38,090
always use interfaces right right

00:35:32,780 --> 00:35:41,630
a couple people are nodding okay so we

00:35:38,090 --> 00:35:44,570
have a yeah whatever this expensive

00:35:41,630 --> 00:35:46,970
stuff is that gets done we have a

00:35:44,570 --> 00:35:49,280
wrapper for it that does basically just

00:35:46,970 --> 00:35:52,280
go through just saw get an item with

00:35:49,280 --> 00:35:53,740
some you know magic name if it's not

00:35:52,280 --> 00:35:56,480
already there do the expensive stuff

00:35:53,740 --> 00:35:59,350
cash it and then return it next request

00:35:56,480 --> 00:36:04,100
through then we just return that value

00:35:59,350 --> 00:36:06,230
which means that this actual code that

00:36:04,100 --> 00:36:08,810
does the actual work doesn't need to

00:36:06,230 --> 00:36:11,720
know about caching which makes it way

00:36:08,810 --> 00:36:14,480
easier to unit test this is a good thing

00:36:11,720 --> 00:36:16,670
I would recommend structuring your

00:36:14,480 --> 00:36:18,410
caching this way whether using PSR six

00:36:16,670 --> 00:36:21,110
or not structure your cash this way

00:36:18,410 --> 00:36:23,540
whenever possible it is also fairly

00:36:21,110 --> 00:36:27,050
extensible research is the design to be

00:36:23,540 --> 00:36:28,730
and that you can add subinterfaces for

00:36:27,050 --> 00:36:30,740
both the pool and the item together say

00:36:28,730 --> 00:36:37,850
to add tagging support or namespace

00:36:30,740 --> 00:36:41,480
support or vers other features and then

00:36:37,850 --> 00:36:44,000
you can have a PSR 6 extended version we

00:36:41,480 --> 00:36:46,910
may in the future have standard

00:36:44,000 --> 00:36:49,280
extensions from fig but you can also

00:36:46,910 --> 00:36:50,900
build your own if you need to because

00:36:49,280 --> 00:36:56,480
our subclasses the normal behavior still

00:36:50,900 --> 00:36:59,510
works fine PS are seven HTTP messages

00:36:56,480 --> 00:37:02,720
perhaps the most important to date now

00:36:59,510 --> 00:37:06,230
this is an approved spec basically CGI

00:37:02,720 --> 00:37:08,570
sucks CGI is terrible common gateway

00:37:06,230 --> 00:37:12,230
interface a quick question who in this

00:37:08,570 --> 00:37:14,360
room was born after 1993 usually this at

00:37:12,230 --> 00:37:17,120
least okay we do have someone the

00:37:14,360 --> 00:37:20,600
standard that PHP uses the talk HTTP is

00:37:17,120 --> 00:37:23,060
older than some people in this room it's

00:37:20,600 --> 00:37:26,650
terrible it's a specification for

00:37:23,060 --> 00:37:29,180
calling command line executables oh god

00:37:26,650 --> 00:37:30,950
based on the air passing environment

00:37:29,180 --> 00:37:32,810
variables to a script which means

00:37:30,950 --> 00:37:35,270
shoehorning HTTP into environment

00:37:32,810 --> 00:37:38,270
variables like dollar server which is

00:37:35,270 --> 00:37:39,590
terrible why is wise dollar server so

00:37:38,270 --> 00:37:44,210
weird and mixes so many things together

00:37:39,590 --> 00:37:46,420
in ugly ways because cgi and also

00:37:44,210 --> 00:37:49,610
because superglue

00:37:46,420 --> 00:37:50,750
no comment if I shouldn't need to

00:37:49,610 --> 00:37:53,300
explain to you why super Global's a

00:37:50,750 --> 00:37:57,800
terrible anymore HTTP HTTP messages

00:37:53,300 --> 00:38:00,860
should just be objects it's 2016 you

00:37:57,800 --> 00:38:03,470
should be doing message passing so PSR 7

00:38:00,860 --> 00:38:06,710
is if you've worked with the request

00:38:03,470 --> 00:38:08,380
response object in symphony or Drupal 8

00:38:06,710 --> 00:38:11,120
because it's the same thing it's

00:38:08,380 --> 00:38:13,670
essentially that idea just abstracted a

00:38:11,120 --> 00:38:17,990
little bit differently we have a request

00:38:13,670 --> 00:38:20,360
interface response interface server

00:38:17,990 --> 00:38:22,280
specific version and a couple of others

00:38:20,360 --> 00:38:24,590
as well again I'm just going to go over

00:38:22,280 --> 00:38:27,620
this a very cursory level all of these

00:38:24,590 --> 00:38:29,420
objects are designed to be immutable so

00:38:27,620 --> 00:38:31,490
instead of editing them in place and

00:38:29,420 --> 00:38:34,370
pass them around every change you make

00:38:31,490 --> 00:38:36,470
spawns a new object so if you have a

00:38:34,370 --> 00:38:37,550
response object you want to set a status

00:38:36,470 --> 00:38:40,640
code on it you're going to get it back a

00:38:37,550 --> 00:38:43,100
new object with that status code which

00:38:40,640 --> 00:38:46,160
means you can change it chain it to so

00:38:43,100 --> 00:38:47,990
add this header add another cache

00:38:46,160 --> 00:38:49,700
control header and so on and so on you

00:38:47,990 --> 00:38:52,220
keep getting back a new object each time

00:38:49,700 --> 00:38:54,410
it's actually very performant because

00:38:52,220 --> 00:38:56,450
PHP has copy-on-write support natively

00:38:54,410 --> 00:38:58,030
so spinning up lots of very similar

00:38:56,450 --> 00:39:00,140
variables it doesn't cost all that much

00:38:58,030 --> 00:39:02,560
this also makes the code a lot more

00:39:00,140 --> 00:39:05,420
predictable you need a lot less Eric

00:39:02,560 --> 00:39:07,310
handling the whole system becomes a lot

00:39:05,420 --> 00:39:12,890
more stable when you deal with immutable

00:39:07,310 --> 00:39:15,140
value objects it also uses streams or

00:39:12,890 --> 00:39:16,820
actually a stream wrapper for the actual

00:39:15,140 --> 00:39:21,140
content for both the request and the

00:39:16,820 --> 00:39:24,200
response why because you really don't

00:39:21,140 --> 00:39:26,300
want to require to use a string and then

00:39:24,200 --> 00:39:29,290
have a string output that is a gigabyte

00:39:26,300 --> 00:39:31,760
size CSV or generating on the fly or a

00:39:29,290 --> 00:39:36,020
500 megabyte file on disk because that's

00:39:31,760 --> 00:39:38,980
bad so instead you can have a file

00:39:36,020 --> 00:39:43,460
stream that you set as the body or

00:39:38,980 --> 00:39:44,990
random string or even use a callback

00:39:43,460 --> 00:39:47,600
function of some kind which is similar

00:39:44,990 --> 00:39:50,090
to what symphony can do again a lot of

00:39:47,600 --> 00:39:52,280
us inspired by simply HTTP foundation

00:39:50,090 --> 00:39:57,020
because that was the old de facto

00:39:52,280 --> 00:39:58,609
standard for how how to do this kind of

00:39:57,020 --> 00:40:00,779
abstraction

00:39:58,609 --> 00:40:03,089
the streams are not immutable because

00:40:00,779 --> 00:40:05,160
they kind of can't be because PHP's

00:40:03,089 --> 00:40:10,769
underlying stream system is not

00:40:05,160 --> 00:40:12,569
immutable sorry your eyes are also

00:40:10,769 --> 00:40:14,190
abstracted to an interface because they

00:40:12,569 --> 00:40:16,019
are way more complicated than you think

00:40:14,190 --> 00:40:18,900
they are not just a simple string it's

00:40:16,019 --> 00:40:21,410
not just the domain in the path what

00:40:18,900 --> 00:40:25,319
happens when you specify a port number

00:40:21,410 --> 00:40:26,760
or that when you specify port number

00:40:25,319 --> 00:40:30,510
that's non-standard what happens when

00:40:26,760 --> 00:40:33,150
you specify no domain what happens when

00:40:30,510 --> 00:40:35,220
you specify no origin there's a lot of

00:40:33,150 --> 00:40:37,650
weird edge cases that are taken care of

00:40:35,220 --> 00:40:39,480
by this comp this objects which makes it

00:40:37,650 --> 00:40:41,700
a lot more portable and predictable than

00:40:39,480 --> 00:40:42,630
just playing on a parse URL not going to

00:40:41,700 --> 00:40:46,289
go into detail that I don't have that

00:40:42,630 --> 00:40:49,380
kind of time but it's there we actually

00:40:46,289 --> 00:40:51,720
support this in Drupal 8 if you have a

00:40:49,380 --> 00:40:55,260
controller if you type into instead of

00:40:51,720 --> 00:40:57,390
on request but on the PRS r7 request

00:40:55,260 --> 00:40:59,400
interface you'll get a PSR 7 request

00:40:57,390 --> 00:41:03,269
object instead translated from the

00:40:59,400 --> 00:41:05,849
symphony object if you return a PSR 7

00:41:03,269 --> 00:41:08,460
response object it will get mapped into

00:41:05,849 --> 00:41:10,470
a symphony response object and go

00:41:08,460 --> 00:41:12,539
through the rest of the system which

00:41:10,470 --> 00:41:15,869
makes it really easy to take something

00:41:12,539 --> 00:41:18,390
else outside of Drupal that uses PSR 7

00:41:15,869 --> 00:41:20,579
and plug it in somewhere that's by

00:41:18,390 --> 00:41:22,589
design there's a very late addition to

00:41:20,579 --> 00:41:27,240
Drupal 8 that we managed to sneak in but

00:41:22,589 --> 00:41:29,880
I'm very happy that we did coding

00:41:27,240 --> 00:41:30,839
standards PS r1 and PS are too basically

00:41:29,880 --> 00:41:32,339
these are the most needlessly

00:41:30,839 --> 00:41:38,039
controversial specs in the history of

00:41:32,339 --> 00:41:39,480
PHP because everybody has an opinion PSR

00:41:38,039 --> 00:41:41,789
one is actually fairly uncontroversial

00:41:39,480 --> 00:41:44,329
the it started a single speck they got

00:41:41,789 --> 00:41:47,670
split at the last minute PSR one is

00:41:44,329 --> 00:41:51,230
things that affect your runtime code so

00:41:47,670 --> 00:41:53,250
for example don't use short tags please

00:41:51,230 --> 00:41:55,019
you're all files would always be in

00:41:53,250 --> 00:41:59,299
utf-8 character encoding not in

00:41:55,019 --> 00:41:59,299
windows-1252 or whatever it is thank you

00:42:00,170 --> 00:42:05,880
camel case your classes capitalize your

00:42:03,269 --> 00:42:09,750
constants stuff like that use an

00:42:05,880 --> 00:42:11,589
autoloader of some kind please and if

00:42:09,750 --> 00:42:14,380
you have a given file

00:42:11,589 --> 00:42:16,390
it should either declare functions and

00:42:14,380 --> 00:42:18,880
declare classes or should have code that

00:42:16,390 --> 00:42:23,229
executes in the global namespace one or

00:42:18,880 --> 00:42:25,779
the other not both pretty much odds are

00:42:23,229 --> 00:42:27,819
you're doing this already most drew code

00:42:25,779 --> 00:42:29,469
in Drupal was already following this

00:42:27,819 --> 00:42:30,849
standard because most well-written code

00:42:29,469 --> 00:42:33,190
already followed the standard to begin

00:42:30,849 --> 00:42:35,769
with so really nothing controversial

00:42:33,190 --> 00:42:39,279
here the controversial one is PSR to

00:42:35,769 --> 00:42:41,200
which is the more stylistic stuff for

00:42:39,279 --> 00:42:44,259
example it specifies for space

00:42:41,200 --> 00:42:47,469
indentation not tabs not two spaces for

00:42:44,259 --> 00:42:50,769
spaces it also specifies the one true

00:42:47,469 --> 00:42:54,910
brace alignments but only for classes

00:42:50,769 --> 00:42:58,239
and functions for force for statements

00:42:54,910 --> 00:43:00,519
and if statements it's in line this bugs

00:42:58,239 --> 00:43:02,799
the crap out of me honestly I don't

00:43:00,519 --> 00:43:04,180
actually like PSR two and all the stuff

00:43:02,799 --> 00:43:06,009
it does but that doesn't really matter

00:43:04,180 --> 00:43:07,930
because what's important is that the

00:43:06,009 --> 00:43:09,369
vast majority of PHP projects don't have

00:43:07,930 --> 00:43:11,979
to think about their coding standards

00:43:09,369 --> 00:43:13,359
anymore and they can just say use PS are

00:43:11,979 --> 00:43:15,700
too because that's the default of my IDE

00:43:13,359 --> 00:43:21,880
and argue about other things that

00:43:15,700 --> 00:43:24,910
actually matter so whether you approve

00:43:21,880 --> 00:43:26,680
of PSR to or not and you should learn it

00:43:24,910 --> 00:43:28,599
because that's what pretty much anything

00:43:26,680 --> 00:43:30,430
outside of Drupal and WordPress are

00:43:28,599 --> 00:43:31,539
going to be using now so if you're

00:43:30,430 --> 00:43:32,859
working with any other system this is

00:43:31,539 --> 00:43:34,719
the coding style you'll be following

00:43:32,859 --> 00:43:39,130
because it's just been adopted by almost

00:43:34,719 --> 00:43:41,190
everybody hopefully updated soon in PS

00:43:39,130 --> 00:43:45,190
are 12 which is in development now

00:43:41,190 --> 00:43:46,869
really just updating for PHP 7 which has

00:43:45,190 --> 00:43:48,880
a bunch of new syntax in it that's way

00:43:46,869 --> 00:43:53,009
cool and should all be using because it

00:43:48,880 --> 00:43:55,989
p37 it's way faster and it's a new

00:43:53,009 --> 00:43:57,489
updates coming for that soon again see

00:43:55,989 --> 00:44:00,789
the specs if you want to see what the

00:43:57,489 --> 00:44:02,650
current status there is so that's what

00:44:00,789 --> 00:44:05,140
we've got so far it's actually quite a

00:44:02,650 --> 00:44:07,109
bit it's a lot of these took a while

00:44:05,140 --> 00:44:09,640
there's drama behind some of them but

00:44:07,109 --> 00:44:12,519
fig is producing stuff that actually has

00:44:09,640 --> 00:44:15,999
an impact on the way we develop and

00:44:12,519 --> 00:44:20,499
makes code more interoperable and we've

00:44:15,999 --> 00:44:22,660
got more in the pipeline we've got a lot

00:44:20,499 --> 00:44:24,700
in the pipeline if you're interested in

00:44:22,660 --> 00:44:31,869
getting involved in fig

00:44:24,700 --> 00:44:33,760
there's this is 10 ish 123456789 specs

00:44:31,869 --> 00:44:37,720
currently in some stage of developments

00:44:33,760 --> 00:44:39,280
from just starting to nearly done so if

00:44:37,720 --> 00:44:42,220
these interest you if you are educated

00:44:39,280 --> 00:44:44,619
in this topic get involved these are

00:44:42,220 --> 00:44:48,369
open for comment right now I'm going to

00:44:44,619 --> 00:44:50,619
go through them very very briefly PSR

00:44:48,369 --> 00:44:52,780
9ps are 10 are around security best

00:44:50,619 --> 00:44:56,050
practices for projects no actual code

00:44:52,780 --> 00:44:59,440
standards here PS r 9 is around

00:44:56,050 --> 00:45:02,619
reporting mechanism and good process for

00:44:59,440 --> 00:45:04,869
handling security reports this for

00:45:02,619 --> 00:45:08,079
projects receiving information about

00:45:04,869 --> 00:45:09,400
security advisories like you should

00:45:08,079 --> 00:45:13,540
always have a security at whatever

00:45:09,400 --> 00:45:15,280
address or by the way you know don't

00:45:13,540 --> 00:45:18,040
disclose security errors until you

00:45:15,280 --> 00:45:19,839
actually fix them all these kind of best

00:45:18,040 --> 00:45:23,680
practices that Drupal already follows

00:45:19,839 --> 00:45:26,680
frankly and then PSR 10 is a security

00:45:23,680 --> 00:45:29,140
advisory format the idea here is that we

00:45:26,680 --> 00:45:31,300
can have a standard machine readable and

00:45:29,140 --> 00:45:34,119
human readable format in which to

00:45:31,300 --> 00:45:35,700
publish security advisories similar to a

00:45:34,119 --> 00:45:38,230
Drupal does now but in a

00:45:35,700 --> 00:45:40,359
machine-readable format which means you

00:45:38,230 --> 00:45:43,089
can build tools that can analyze your

00:45:40,359 --> 00:45:45,280
code base and say hey are there security

00:45:43,089 --> 00:45:48,010
advisories against my program I've got

00:45:45,280 --> 00:45:49,030
fifteen twenty thirty third party

00:45:48,010 --> 00:45:50,589
dependencies do any of them have

00:45:49,030 --> 00:45:54,220
security advisories against them that I

00:45:50,589 --> 00:45:55,480
need to update for basically there is a

00:45:54,220 --> 00:45:58,660
tool called central lab security

00:45:55,480 --> 00:46:00,339
advisory checker this is the idea is to

00:45:58,660 --> 00:46:03,160
build the tool that make an open source

00:46:00,339 --> 00:46:07,420
equivalent of that viable maybe tying

00:46:03,160 --> 00:46:08,819
its composer maybe not but just we want

00:46:07,420 --> 00:46:11,710
to get to the point where you can point

00:46:08,819 --> 00:46:15,760
your point to code base and say do I

00:46:11,710 --> 00:46:18,700
have a security hole yes or no it seems

00:46:15,760 --> 00:46:20,920
good to me it's been in development for

00:46:18,700 --> 00:46:23,079
a while was silent for quite some time

00:46:20,920 --> 00:46:25,270
we just recently got a new editor for it

00:46:23,079 --> 00:46:28,720
Michael Hess of the Drupal security team

00:46:25,270 --> 00:46:29,710
so I have very good faith that when

00:46:28,720 --> 00:46:31,480
these are done they will be really

00:46:29,710 --> 00:46:37,089
really good because Drupal security team

00:46:31,480 --> 00:46:38,440
is awesome PSR 11 is looking to

00:46:37,089 --> 00:46:40,329
standardize

00:46:38,440 --> 00:46:42,190
Injection containers this was actually

00:46:40,329 --> 00:46:44,819
very controversial it is one of the

00:46:42,190 --> 00:46:47,079
closest entrance votes we've ever had

00:46:44,819 --> 00:46:50,140
it's very very simple at this point just

00:46:47,079 --> 00:46:52,650
a gettin has interface there are a

00:46:50,140 --> 00:46:56,710
number of projects already using this in

00:46:52,650 --> 00:47:00,190
in development or the draft version here

00:46:56,710 --> 00:47:02,530
in their development systems why is this

00:47:00,190 --> 00:47:05,650
useful I mean code shouldn't depend on

00:47:02,530 --> 00:47:08,970
your container right that's why it's

00:47:05,650 --> 00:47:11,440
controversial the idea is for factories

00:47:08,970 --> 00:47:15,640
places that are going to need to depend

00:47:11,440 --> 00:47:17,260
on a container to load one of these

00:47:15,640 --> 00:47:19,000
services at runtime based on user

00:47:17,260 --> 00:47:20,920
configuration or something which we have

00:47:19,000 --> 00:47:22,540
a number of in Drupal we have a lot of

00:47:20,920 --> 00:47:26,829
places in Drupal we're doing that so it

00:47:22,540 --> 00:47:30,910
is relevant it's also for delegation the

00:47:26,829 --> 00:47:33,430
idea here being a lot of libraries ship

00:47:30,910 --> 00:47:36,310
with a ton of code you have to wire

00:47:33,430 --> 00:47:37,839
together to make it work correctly and

00:47:36,310 --> 00:47:39,099
that wiring is different for every

00:47:37,839 --> 00:47:40,359
single container every single

00:47:39,099 --> 00:47:42,130
application you put it into which means

00:47:40,359 --> 00:47:44,260
you need a symphony bridge a Drupal

00:47:42,130 --> 00:47:47,020
bridge a Zen bridge a laravel bridge and

00:47:44,260 --> 00:47:49,780
that's just a ton of work so instead

00:47:47,020 --> 00:47:52,720
they can ship a tiny little hard coded

00:47:49,780 --> 00:47:55,329
and hardwired container for just those

00:47:52,720 --> 00:47:57,790
services and the main container of your

00:47:55,329 --> 00:48:00,010
application can delegate to that is that

00:47:57,790 --> 00:48:01,839
a good idea I don't know I'm not working

00:48:00,010 --> 00:48:04,000
on this one myself I'm honestly still

00:48:01,839 --> 00:48:06,900
undecided about it if you want to give

00:48:04,000 --> 00:48:10,089
me input as the Drupal rep let me know

00:48:06,900 --> 00:48:11,950
PS are 13 this is one that I'm the

00:48:10,089 --> 00:48:14,260
editor for it is nearly complete it's in

00:48:11,950 --> 00:48:17,050
review right now we're just working on

00:48:14,260 --> 00:48:19,540
naming something dead here here

00:48:17,050 --> 00:48:22,240
standardized hypermedia links because

00:48:19,540 --> 00:48:25,150
you have a lot of value objects a lot of

00:48:22,240 --> 00:48:29,290
data objects for representing json api

00:48:25,150 --> 00:48:32,140
how HTML has hypermedia link support

00:48:29,290 --> 00:48:34,420
adam has a hypermedia link support let's

00:48:32,140 --> 00:48:37,690
standardized how we work with those so

00:48:34,420 --> 00:48:40,180
that I can translate from a Hal object

00:48:37,690 --> 00:48:43,390
to HTTP links on a response object

00:48:40,180 --> 00:48:45,819
really easily kind of an edge case

00:48:43,390 --> 00:48:49,089
you're at a narrow use case but a legit

00:48:45,819 --> 00:48:51,069
one their value objects that are read

00:48:49,089 --> 00:48:52,230
only or immutable just like in PS are

00:48:51,069 --> 00:48:56,650
seven

00:48:52,230 --> 00:48:59,859
we've got a link object which has the

00:48:56,650 --> 00:49:03,280
relationship on it the href that points

00:48:59,859 --> 00:49:07,900
to and attributes on it also templated

00:49:03,280 --> 00:49:09,490
flag for hell and then also object can

00:49:07,900 --> 00:49:10,710
be a link collection this is will the

00:49:09,490 --> 00:49:14,920
one we're still debating the name on

00:49:10,710 --> 00:49:17,980
which means like I can have an entity

00:49:14,920 --> 00:49:20,020
that has links on it I can just say hey

00:49:17,980 --> 00:49:21,190
entity give me all the link objects that

00:49:20,020 --> 00:49:22,900
are relevant to you and it can generate

00:49:21,190 --> 00:49:25,300
those on the fly off of user

00:49:22,900 --> 00:49:28,540
configuration in the database statements

00:49:25,300 --> 00:49:30,609
and so forth there are extended

00:49:28,540 --> 00:49:35,849
interfaces for them that do the same

00:49:30,609 --> 00:49:35,849
kind of with whatever methods as PSR 7

00:49:36,030 --> 00:49:41,680
there's work on an event manager this is

00:49:38,859 --> 00:49:44,170
PSR 14 basically simply event dispatcher

00:49:41,680 --> 00:49:46,599
you've seen in Drupal 8 same thing just

00:49:44,170 --> 00:49:48,310
more abstracted and standardized still

00:49:46,599 --> 00:49:50,349
very early it's not much to say on yet

00:49:48,310 --> 00:49:52,390
the current draft is frankly a little

00:49:50,349 --> 00:49:56,070
over complicated and over engineered but

00:49:52,390 --> 00:49:59,440
well we'll get to that we'll fix that

00:49:56,070 --> 00:50:02,830
some more fun ones some better tooling

00:49:59,440 --> 00:50:11,430
around HTTP messages PS are 15 and PS

00:50:02,830 --> 00:50:11,430
are 17 15 is to be 17 is HTTP factories

00:50:11,460 --> 00:50:19,990
the idea here is that PS are 7

00:50:17,770 --> 00:50:22,420
interfaces are great but at some point

00:50:19,990 --> 00:50:23,980
someone's got to create an object and as

00:50:22,420 --> 00:50:26,740
soon as you have code that's creating

00:50:23,980 --> 00:50:29,800
the actual object your hard coding that

00:50:26,740 --> 00:50:32,530
library to one specific PSR 7

00:50:29,800 --> 00:50:34,089
implementation you don't want that so

00:50:32,530 --> 00:50:38,410
instead make it really easy to outsource

00:50:34,089 --> 00:50:40,450
that to a factory so whoever's providing

00:50:38,410 --> 00:50:42,280
that implementation phase ends the

00:50:40,450 --> 00:50:46,300
ektoras library which is the most common

00:50:42,280 --> 00:50:49,869
or guzzle has one you can it can also

00:50:46,300 --> 00:50:52,630
provide you with a factory to create

00:50:49,869 --> 00:50:57,700
those objects which means you can write

00:50:52,630 --> 00:50:59,260
middleware PSR 15 that is completely

00:50:57,700 --> 00:51:01,330
abstracted away can still generate

00:50:59,260 --> 00:51:03,119
responses but is completely abstract

00:51:01,330 --> 00:51:05,950
away from the underlying implementation

00:51:03,119 --> 00:51:10,680
who's worked with stack PHP at all

00:51:05,950 --> 00:51:13,660
or silex okay you know how you can wrap

00:51:10,680 --> 00:51:17,290
HTTP Colonel instances around each other

00:51:13,660 --> 00:51:21,359
in in stack PHP and in the symphony

00:51:17,290 --> 00:51:24,160
colonel model that's middleware and

00:51:21,359 --> 00:51:26,440
ironically Symphony was the first to

00:51:24,160 --> 00:51:29,140
make it possible to do in PHP but

00:51:26,440 --> 00:51:31,690
doesn't make you use it very much it has

00:51:29,140 --> 00:51:34,000
become incredibly popular in PHP in the

00:51:31,690 --> 00:51:35,710
last couple of years the zend expressive

00:51:34,000 --> 00:51:39,730
library is all built on that then three

00:51:35,710 --> 00:51:42,160
framework is built on PS r7 slim 3 uses

00:51:39,730 --> 00:51:44,250
PSR 7 and once you use middlewares and

00:51:42,160 --> 00:51:46,390
so forth so we standardized that too

00:51:44,250 --> 00:51:47,589
again this is currently draft so it's

00:51:46,390 --> 00:51:51,750
not necessarily what it's going to end

00:51:47,589 --> 00:51:55,030
up looking like but the idea being that

00:51:51,750 --> 00:51:56,920
well you have a an interface with has a

00:51:55,030 --> 00:51:59,140
process and the next this is basically

00:51:56,920 --> 00:52:04,450
the equivalent of handle in the symphony

00:51:59,140 --> 00:52:08,050
world and then your middleware simply

00:52:04,450 --> 00:52:10,839
has that process method gets a request

00:52:08,050 --> 00:52:14,140
and it's going to return a response it

00:52:10,839 --> 00:52:18,660
can get that response by passing it on

00:52:14,140 --> 00:52:21,720
to the next wrapped middleware or

00:52:18,660 --> 00:52:24,369
creating one yourself off the factory

00:52:21,720 --> 00:52:27,420
this way i can still create a new

00:52:24,369 --> 00:52:30,310
response and i can plug this code into

00:52:27,420 --> 00:52:32,290
drupal into symphony into something

00:52:30,310 --> 00:52:34,359
using zend DIAC toros into any other

00:52:32,290 --> 00:52:35,829
implementation and i am still abstracted

00:52:34,359 --> 00:52:39,359
away from what the underlying

00:52:35,829 --> 00:52:41,950
implementation is that's kind of cool

00:52:39,359 --> 00:52:43,180
you need both the factory piece and the

00:52:41,950 --> 00:52:46,750
middle or piece to make that work that's

00:52:43,180 --> 00:52:50,470
why it's two specifications it's also an

00:52:46,750 --> 00:52:52,690
effort to simplify caching a bit because

00:52:50,470 --> 00:52:54,849
the cash system PS are six is very

00:52:52,690 --> 00:52:56,880
robust it's very flexible but if you

00:52:54,849 --> 00:53:02,410
just need a dumb key value store it's

00:52:56,880 --> 00:53:06,960
more work than some people want so PSR

00:53:02,410 --> 00:53:12,819
16 is just a very basic cash interface

00:53:06,960 --> 00:53:16,870
excuse me with you know basic key value

00:53:12,819 --> 00:53:21,410
kia string value is mixed whatever

00:53:16,870 --> 00:53:23,660
and there is a rapper fort to Bridget

00:53:21,410 --> 00:53:25,580
PSR 6 which is probably what you'll use

00:53:23,660 --> 00:53:27,950
ninety percent of the time so if you're

00:53:25,580 --> 00:53:29,480
writing the library that doesn't have

00:53:27,950 --> 00:53:33,830
complicated needs they just need very

00:53:29,480 --> 00:53:36,050
very basic caching needs then you can

00:53:33,830 --> 00:53:39,230
take any PSR six library toss the

00:53:36,050 --> 00:53:39,980
wrapper at it and then do basic cashing

00:53:39,230 --> 00:53:42,110
on it if you want something more

00:53:39,980 --> 00:53:45,740
advanced you right to the PSR six

00:53:42,110 --> 00:53:47,060
interface that's what's on the table

00:53:45,740 --> 00:53:50,720
that's what's coming down the pipeline

00:53:47,060 --> 00:53:53,030
as people work on it that's what's in

00:53:50,720 --> 00:53:55,990
some of these cases there's active work

00:53:53,030 --> 00:54:00,440
and some we need people to get involved

00:53:55,990 --> 00:54:03,890
ultimately though figs goal any version

00:54:00,440 --> 00:54:06,140
any iteration of fig its goal is to

00:54:03,890 --> 00:54:08,470
encourage collaboration because

00:54:06,140 --> 00:54:11,750
collaboration builds on interoperability

00:54:08,470 --> 00:54:14,240
it builds compatibility and it makes it

00:54:11,750 --> 00:54:16,580
easier to build a larger community a

00:54:14,240 --> 00:54:21,110
community not just of Drupal and

00:54:16,580 --> 00:54:22,460
Symphony and Zen but of PHP and frankly

00:54:21,110 --> 00:54:25,820
we've met with pretty good success on

00:54:22,460 --> 00:54:29,570
this front to date according two

00:54:25,820 --> 00:54:33,770
packages PSRs three has almost 2,000

00:54:29,570 --> 00:54:36,890
packages that depend on it PSR 6 165 PSR

00:54:33,770 --> 00:54:39,170
7 over 700 packages depending on PS are

00:54:36,890 --> 00:54:42,740
seven and that they've been downloaded

00:54:39,170 --> 00:54:44,960
millions of times this also roughly the

00:54:42,740 --> 00:54:46,370
order in which that they were approved

00:54:44,960 --> 00:54:49,370
PSR three was the first one approved

00:54:46,370 --> 00:54:52,450
then seven then six so they're roughly

00:54:49,370 --> 00:54:56,150
following similar trajectory this is

00:54:52,450 --> 00:55:01,820
core data from packages as of about a

00:54:56,150 --> 00:55:04,660
week ago of course figs biggest success

00:55:01,820 --> 00:55:07,250
in that words have the most impact is

00:55:04,660 --> 00:55:10,910
PSR eight which is the huggable

00:55:07,250 --> 00:55:13,010
interface I was the other time the

00:55:10,910 --> 00:55:15,710
editor for this one as well surprise

00:55:13,010 --> 00:55:17,810
surprise defines two interfaces huggable

00:55:15,710 --> 00:55:21,020
and group huggable the idea here you can

00:55:17,810 --> 00:55:22,970
indicate when you are compatible for

00:55:21,020 --> 00:55:24,770
hugging when you want to hug someone or

00:55:22,970 --> 00:55:27,260
one or not you can have a group hug

00:55:24,770 --> 00:55:29,820
drupal knows all about this right drupal

00:55:27,260 --> 00:55:32,080
has been PSR a compatible for years

00:55:29,820 --> 00:55:34,120
there's actually there a number of

00:55:32,080 --> 00:55:36,930
implementations in the wild especially

00:55:34,120 --> 00:55:39,460
this from Bulgaria PHP about a year ago

00:55:36,930 --> 00:55:43,630
where did successfully implement the

00:55:39,460 --> 00:55:46,570
group hug version because at the end of

00:55:43,630 --> 00:55:49,630
the day the goal is to make it easier to

00:55:46,570 --> 00:55:52,120
work together to be able to interoperate

00:55:49,630 --> 00:55:54,220
to build a better ecosystem to get

00:55:52,120 --> 00:55:56,140
projects talking to get people talking

00:55:54,220 --> 00:56:00,130
so you have people solving common

00:55:56,140 --> 00:56:02,350
problems and make it easier to divide

00:56:00,130 --> 00:56:05,080
and conquer easier to say you know what

00:56:02,350 --> 00:56:07,990
I want a cash system I don't care which

00:56:05,080 --> 00:56:09,880
one it is I want a logger I don't care

00:56:07,990 --> 00:56:12,000
which one it is I can mix and match

00:56:09,880 --> 00:56:16,300
easily I can plug into any framework

00:56:12,000 --> 00:56:18,160
easily there's plenty of discussion

00:56:16,300 --> 00:56:20,940
happening that's not around PSR is

00:56:18,160 --> 00:56:23,790
necessarily about just good practices

00:56:20,940 --> 00:56:25,840
because ultimately the goal is to

00:56:23,790 --> 00:56:28,090
collaborate better and build a better

00:56:25,840 --> 00:56:32,040
more robust ecosystem for everyone

00:56:28,090 --> 00:56:32,040
working in PHP thank

00:56:36,750 --> 00:56:40,560
I believe I got a couple minutes for

00:56:39,570 --> 00:56:43,380
questions I don't know if there's a

00:56:40,560 --> 00:56:49,950
microphone around so if you have

00:56:43,380 --> 00:57:06,710
questions I'll just repeat them yeah now

00:56:49,950 --> 00:57:09,240
just shout it out I'll repeat it okay

00:57:06,710 --> 00:57:13,320
context around the recent public blog

00:57:09,240 --> 00:57:18,720
posts around fig so disclaimer highly

00:57:13,320 --> 00:57:22,290
biased opinions follow when fig three

00:57:18,720 --> 00:57:25,050
was being discussed they're obviously it

00:57:22,290 --> 00:57:28,710
was not universally liked a couple of

00:57:25,050 --> 00:57:33,180
the people speaking against it proposed

00:57:28,710 --> 00:57:36,080
instead well let me back up I talked

00:57:33,180 --> 00:57:38,880
about who is pig his who is fig for

00:57:36,080 --> 00:57:40,980
member projects are all of PHP what's

00:57:38,880 --> 00:57:44,610
our scope there are those in fig who

00:57:40,980 --> 00:57:46,890
feel that fig was and always should be

00:57:44,610 --> 00:57:50,030
interested only in member projects and

00:57:46,890 --> 00:57:52,890
just ignore the entire rest of the world

00:57:50,030 --> 00:57:56,190
that's the minority but it's a loud

00:57:52,890 --> 00:57:58,860
minority there are those myself included

00:57:56,190 --> 00:58:01,980
who feel that that's a wonderful fantasy

00:57:58,860 --> 00:58:04,170
and that'd be nice but in practice it's

00:58:01,980 --> 00:58:07,410
impossible for a group like fig to not

00:58:04,170 --> 00:58:08,640
impact non-member projects so we should

00:58:07,410 --> 00:58:10,110
be paying attention to non-member

00:58:08,640 --> 00:58:12,570
projects and just accept the fact that

00:58:10,110 --> 00:58:16,070
we are the PHP Sandra's group whether

00:58:12,570 --> 00:58:18,480
that was the original intent or not a

00:58:16,070 --> 00:58:22,430
few people have responded by saying well

00:58:18,480 --> 00:58:25,910
if fig can't meet that original vision

00:58:22,430 --> 00:58:28,410
of being just for projects just and

00:58:25,910 --> 00:58:30,120
ignore the rest of the world then we

00:58:28,410 --> 00:58:31,740
should just shut down fig and if you

00:58:30,120 --> 00:58:32,970
want to have a retainer body on this

00:58:31,740 --> 00:58:36,420
model then go make a new organization

00:58:32,970 --> 00:58:37,590
don't use the fig name for it and some

00:58:36,420 --> 00:58:43,140
of that discussion has gotten rather

00:58:37,590 --> 00:58:49,340
heated and one supporter of the shutdown

00:58:43,140 --> 00:58:53,100
fig position has been

00:58:49,340 --> 00:58:54,450
very vocal and very public about his

00:58:53,100 --> 00:58:58,020
distaste for everything and anything

00:58:54,450 --> 00:59:00,690
involving fig.3 and i will stop that

00:58:58,020 --> 00:59:06,660
description there for the sake of

00:59:00,690 --> 00:59:08,610
diplomacy so yeah that's existential

00:59:06,660 --> 00:59:12,420
crisis and fig as we decide are we a

00:59:08,610 --> 00:59:14,100
standards body or not and some people

00:59:12,420 --> 00:59:16,140
standing on soap boxes about that and of

00:59:14,100 --> 00:59:19,440
course a lot of fun i actually did an

00:59:16,140 --> 00:59:22,590
article for sitepoint last week week and

00:59:19,440 --> 00:59:25,290
a half ago now specifically because

00:59:22,590 --> 00:59:27,330
someone else not involved in fig had

00:59:25,290 --> 00:59:29,730
done a blog a an article for them that

00:59:27,330 --> 00:59:32,610
got most of it wrong just factually

00:59:29,730 --> 00:59:33,870
wrong so i put up a blog post to correct

00:59:32,610 --> 00:59:36,930
that fact because people are paying

00:59:33,870 --> 00:59:38,100
attention too thick and i think i've got

00:59:36,930 --> 00:59:42,500
time for one more question before i get

00:59:38,100 --> 00:59:42,500
thrown off the stage here

00:59:48,859 --> 01:00:03,290
outlook for Drupal using PSR too I think

00:59:58,500 --> 01:00:07,109
it's going to happen eventually not soon

01:00:03,290 --> 01:00:09,390
because technically switching Drupal to

01:00:07,109 --> 01:00:10,680
PS are two would be stupid easy you run

01:00:09,390 --> 01:00:13,320
a code formatter across the code base

01:00:10,680 --> 01:00:15,119
and commit the result and break every

01:00:13,320 --> 01:00:18,540
single patch organs every single module

01:00:15,119 --> 01:00:21,060
in the entire system and that's not even

01:00:18,540 --> 01:00:24,000
counting the number of people who don't

01:00:21,060 --> 01:00:25,740
like PS are 24 very legitimate reasons

01:00:24,000 --> 01:00:29,280
there are places where PSR to is are

01:00:25,740 --> 01:00:31,590
stupid and the fact that we do have a

01:00:29,280 --> 01:00:33,570
lot of tooling built up around our

01:00:31,590 --> 01:00:35,100
current coding standards and in many

01:00:33,570 --> 01:00:39,960
ways our coding standards are a lot more

01:00:35,100 --> 01:00:41,880
detail than PSR to is so it's not it is

01:00:39,960 --> 01:00:46,290
socially a very difficult to transition

01:00:41,880 --> 01:00:48,570
to make I think it's probably going to

01:00:46,290 --> 01:00:50,450
happen eventually anyway simply because

01:00:48,570 --> 01:00:53,490
there will be enough pressure over time

01:00:50,450 --> 01:00:55,470
but I'm not pushing that myself I

01:00:53,490 --> 01:00:56,580
probably won't push myself more I am

01:00:55,470 --> 01:00:59,070
resigned to the fact that it will

01:00:56,580 --> 01:01:01,200
eventually happen but I have no clue on

01:00:59,070 --> 01:01:03,859
a timeline for that probably grupal 9 at

01:01:01,200 --> 01:01:03,859
the absolute earliest

01:01:10,519 --> 01:01:16,890
what changes suspect in PS are 12 no

01:01:14,519 --> 01:01:18,269
changes for current code so it's not

01:01:16,890 --> 01:01:23,219
going to change the brace position or

01:01:18,269 --> 01:01:26,699
anything like that it's mostly PHP 7

01:01:23,219 --> 01:01:28,049
adds support for return types okay where

01:01:26,699 --> 01:01:29,549
do we put the colon where do we put the

01:01:28,049 --> 01:01:31,619
spaces around the colon for return types

01:01:29,549 --> 01:01:35,009
those didn't exist when PS are two is

01:01:31,619 --> 01:01:37,619
written we now have people using declare

01:01:35,009 --> 01:01:39,209
statements for strict typing what are

01:01:37,619 --> 01:01:41,579
the carriage returns around that that

01:01:39,209 --> 01:01:45,079
kind of stuff so it's all stuff that

01:01:41,579 --> 01:01:47,910
didn't exist when PSR two came out and

01:01:45,079 --> 01:01:50,669
now they do so okay we should probably

01:01:47,910 --> 01:01:52,319
standardized those which is also an open

01:01:50,669 --> 01:01:54,390
question with a small number of people

01:01:52,319 --> 01:01:55,859
saying don't standardized anything until

01:01:54,390 --> 01:01:57,209
people are already doing it fig should

01:01:55,859 --> 01:02:00,269
only ever standardized what's already

01:01:57,209 --> 01:02:01,589
being done and other people pointing out

01:02:00,269 --> 01:02:02,939
that's a great way to end up with

01:02:01,589 --> 01:02:04,380
incompatibility and a lot of people

01:02:02,939 --> 01:02:07,019
having to break compatibility when we

01:02:04,380 --> 01:02:08,249
define a new standard so is that but

01:02:07,019 --> 01:02:14,929
yeah it should be all backward

01:02:08,249 --> 01:02:18,209
compatible stuff and PS are 12 it was

01:02:14,929 --> 01:02:19,859
alright thank you all for coming please

01:02:18,209 --> 01:02:21,390
do get involved if there's an area that

01:02:19,859 --> 01:02:23,249
you have specific interest in and

01:02:21,390 --> 01:02:24,509
specific domain knowledge and come up

01:02:23,249 --> 01:02:26,069
and get one of these cool stickers I'm

01:02:24,509 --> 01:02:29,029
happy to answer questions after the

01:02:26,069 --> 01:02:29,029

YouTube URL: https://www.youtube.com/watch?v=hPLYSuyqVI0


