Title: DrupalCon Dublin 2016: Drupal 8's Multilingual APIs: Building for the Entire World
Publication date: 2016-09-27
Playlist: DrupalCon Dublin 2016
Description: 
	Are you interested in writing contributed modules, themes or distributions for Drupal 8? Then this is the session for you. In this session, we'll look at the most important APIs you would use to integrate with and best practices to use to ensure that your project is fully multilingual-ready.

This session will be valuable to all contributors even those whose projects are not inherently multilingual. Even if your project is not immediately intended to be multilingual, having a multilingual-capable module, theme or distribution makes your solution appealing to a much broader audience and is likely to provide value to global users.

Drupal 8 is a great platform to work with not only because it is so multilingual capable out-of-the-box, but also because you can easily expand while maintaining the translatability of your data. Drupal 8’s multilingual core offers a robust multilingual foundation, making the integration process much more seamless.

The majority of Drupal 8's APIs are designed to support multilingual by default and make sane assumptions about common scenarios. As a result, there are several important things to keep in mind to build the best integration possible.

In this session, we will walk through:

Working with language APIs, and the language your data is in.

Making your output strings translatable: t() and its friends, but also in twig templates

Why you should and how to code translatable content entities.

Customizing your field properties translatability so site builders can choose.

Configuration translation: translating your configuration entities

Intended Audience

Drupal developers working with contrib or custom modules that are designed for multilingual or non-English sites would benefit from this session (that means nearly every Drupal developer out there).

Drupal themers intending to make their theme templates translation ready.

Attendees will walk away with knowledge to add Drupal 8 multilingual support to your modules, themes and distributions.

Skill Levels

This session is suitable for beginners or intermediate Drupal users. It is best if you come to the session with some exposure to OOP, Drupal 8 code and twig templates, but even if you don’t have that foundation I’m sure you can catch up.

Improving Drupal Multilingual

To make multilingual Drupal 8 APIs even better, please get involved with the Drupal 8 Multilingual Initiative! You can also sprint with us before, during, and after the main DrupalCon Dublin session days. You do not need to know how to code to help. Testers, reviewers, writers, and designers are very welcome.

About the Speaker

Christian López (penyaskito on Drupal.org) works at Lingotek - The Translation Network, writing their open source integration for Drupal 8. This integration provides Drupal users the ability to extract their data and content and translate it using a cloud-based translation management system. This workflow pushed the development team to test the limits of the Drupal 8 multilingual APIs.

Christian has presented about Drupal 8’s multilingual capabilities at several camps around Europe. He is a frequent speaker at Spanish DrupalCamps and presented at international events like Drupal Dev Days 2016 (Milano, Italy), DrupalNorth 2016 (Montreal, Canada), DrupalCamp Leuven 2015 (Belgium), Drupalaton 2015 (Hungary) or DrupalCamp Vienna 2015 (Austria).

Christian has been a contributor to the Drupal 8 Multilingual Initiative since Drupal Dev Days in Barcelona in 2012.
Captions: 
	00:00:00,709 --> 00:00:08,519
so hello everyone welcome to drupal con

00:00:05,190 --> 00:00:11,460
hope you are having a great time this is

00:00:08,519 --> 00:00:17,420
Drupal 8 multilingual api's building for

00:00:11,460 --> 00:00:20,250
the entire world I hope you enjoyed the

00:00:17,420 --> 00:00:22,680
keynote and the drill Dupree keynote and

00:00:20,250 --> 00:00:26,279
is note so what we are going to talk

00:00:22,680 --> 00:00:29,490
here is about a cold because this is

00:00:26,279 --> 00:00:32,009
part of the codon development track not

00:00:29,490 --> 00:00:34,800
site building if you are interested in

00:00:32,009 --> 00:00:37,370
the set building parts of the

00:00:34,800 --> 00:00:40,920
multilingual improvements in Drupal 8

00:00:37,370 --> 00:00:42,719
there's a lot of sessions that we've

00:00:40,920 --> 00:00:45,600
been doing in the past and they are

00:00:42,719 --> 00:00:49,110
recorded in Drupal 8 multilingual dork

00:00:45,600 --> 00:00:52,379
and you can even find a full workshop

00:00:49,110 --> 00:00:55,350
guide three hours worship guide with

00:00:52,379 --> 00:00:57,570
multilingual demo distribution

00:00:55,350 --> 00:00:59,070
distribution that you can use so you can

00:00:57,570 --> 00:01:01,770
check all the improvements and learn

00:00:59,070 --> 00:01:05,129
more about it but today we are going to

00:01:01,770 --> 00:01:07,500
talk about code so my name is Christian

00:01:05,129 --> 00:01:12,090
Lopez I'm penasquitos rubidoux torque

00:01:07,500 --> 00:01:16,500
and having contributing to the Drupal 8

00:01:12,090 --> 00:01:19,560
multilingual initiative so in how many

00:01:16,500 --> 00:01:22,860
of you have built Drupal 8 multilingual

00:01:19,560 --> 00:01:27,390
Drupal 7 multilingual sites quite a lot

00:01:22,860 --> 00:01:30,530
if not everyone how many of you have

00:01:27,390 --> 00:01:33,240
already built drupal 8 sides and

00:01:30,530 --> 00:01:35,790
multilingual Drupal 8 sides so okay so

00:01:33,240 --> 00:01:39,119
quite a lot like more than half of the

00:01:35,790 --> 00:01:42,030
room so if you remember which you

00:01:39,119 --> 00:01:45,990
probably do multilingual was an

00:01:42,030 --> 00:01:48,329
afterthought in Drupal 7 so there was

00:01:45,990 --> 00:01:51,240
not really good support out of the box

00:01:48,329 --> 00:01:54,630
with Drupal core so you need to use a

00:01:51,240 --> 00:01:59,100
lot of contributed models and in Drupal

00:01:54,630 --> 00:02:02,219
8 this was thought that it was an IDL so

00:01:59,100 --> 00:02:04,380
there was a good investment of people

00:02:02,219 --> 00:02:07,680
who wanted to work on that and make it

00:02:04,380 --> 00:02:12,300
the situation better so I'm presenting

00:02:07,680 --> 00:02:13,460
this here but this is the work of a lot

00:02:12,300 --> 00:02:18,290
of people

00:02:13,460 --> 00:02:22,720
so please thank them and if you find

00:02:18,290 --> 00:02:25,370
them around the conference hug them so

00:02:22,720 --> 00:02:28,210
Drupal 7 multilingual the situation is

00:02:25,370 --> 00:02:32,390
that you had a Drupal core and the

00:02:28,210 --> 00:02:37,430
support you need the loci local model

00:02:32,390 --> 00:02:40,220
for allowing people to to at list of

00:02:37,430 --> 00:02:43,520
languages and making them impossible to

00:02:40,220 --> 00:02:47,900
to provide a user interface translations

00:02:43,520 --> 00:02:50,870
and you had to download them manually

00:02:47,900 --> 00:02:55,400
which is you have like 50 modules in

00:02:50,870 --> 00:02:58,640
four languages you need to download 2200

00:02:55,400 --> 00:03:02,120
p 0 files that you have to import on

00:02:58,640 --> 00:03:04,820
your side which can be quite a painful

00:03:02,120 --> 00:03:07,490
task so then the community will the

00:03:04,820 --> 00:03:11,270
localization update model which does

00:03:07,490 --> 00:03:13,670
that automatically for you and then you

00:03:11,270 --> 00:03:15,740
want to translate your content and you

00:03:13,670 --> 00:03:18,830
need to install the content translation

00:03:15,740 --> 00:03:22,370
model which makes copies of your notes

00:03:18,830 --> 00:03:26,420
for each language but then you have your

00:03:22,370 --> 00:03:28,790
menus and you have taxonomy terms so you

00:03:26,420 --> 00:03:32,410
need to install the internationalization

00:03:28,790 --> 00:03:36,920
suite which has models like the IAT n

00:03:32,410 --> 00:03:40,970
terms and a lot of models that help you

00:03:36,920 --> 00:03:43,700
to translate your site and then you want

00:03:40,970 --> 00:03:45,800
to translate your title in your site

00:03:43,700 --> 00:03:52,100
your signing and you need the variable

00:03:45,800 --> 00:03:54,680
model for that and maybe you want to

00:03:52,100 --> 00:03:57,980
make money online and then you you will

00:03:54,680 --> 00:04:01,970
do use Drupal commerce and drupal

00:03:57,980 --> 00:04:04,340
commerce has entity translation for for

00:04:01,970 --> 00:04:06,830
translating your products which was a

00:04:04,340 --> 00:04:09,140
country model that appears later and

00:04:06,830 --> 00:04:14,480
this model instead of doing copies of

00:04:09,140 --> 00:04:17,930
your nodes it translates each fields but

00:04:14,480 --> 00:04:21,440
then you find out that the title of your

00:04:17,930 --> 00:04:24,590
entities or under notes is not really a

00:04:21,440 --> 00:04:27,110
field so you need to install the title

00:04:24,590 --> 00:04:31,580
model so at the end you you

00:04:27,110 --> 00:04:36,139
end up like having 45 50 country models

00:04:31,580 --> 00:04:39,110
install on your side for translating all

00:04:36,139 --> 00:04:41,479
your data and you have multiple

00:04:39,110 --> 00:04:43,969
solutions solutions for translating the

00:04:41,479 --> 00:04:46,400
same content so if you you may have

00:04:43,969 --> 00:04:48,889
nodes and you may be translating them

00:04:46,400 --> 00:04:50,210
with content translation but maybe you

00:04:48,889 --> 00:04:52,460
can also do it with entities

00:04:50,210 --> 00:04:54,409
translations and you have your taxonomy

00:04:52,460 --> 00:04:57,169
and your taxonomy terms can be

00:04:54,409 --> 00:05:00,199
translation with the IDN sweet but you

00:04:57,169 --> 00:05:05,539
can also use the entity translation so

00:05:00,199 --> 00:05:08,509
there were a lot of options and at the

00:05:05,539 --> 00:05:11,270
end you can mix them all and it can be

00:05:08,509 --> 00:05:17,569
quite confusing and your your side

00:05:11,270 --> 00:05:20,539
becomes highly harder to manage so this

00:05:17,569 --> 00:05:25,550
is something that we wanted to solve in

00:05:20,539 --> 00:05:30,439
Drupal 8 and for that we introduce four

00:05:25,550 --> 00:05:35,000
models in Drupal 8 each with each of

00:05:30,439 --> 00:05:37,270
them has like a bacon creat task and we

00:05:35,000 --> 00:05:40,000
are going to see a short summary of them

00:05:37,270 --> 00:05:43,879
so the first one is the language module

00:05:40,000 --> 00:05:45,979
in Drupal 7 you have the local model and

00:05:43,879 --> 00:05:48,219
it allows you to add languages to your

00:05:45,979 --> 00:05:51,529
site and to translate the user interface

00:05:48,219 --> 00:05:53,529
now we split that into palade so we have

00:05:51,529 --> 00:05:56,870
the language model which provides

00:05:53,529 --> 00:06:02,240
services for dealing with data and which

00:05:56,870 --> 00:06:04,490
language your data is in and it's useful

00:06:02,240 --> 00:06:06,319
not only for multilingual side also for

00:06:04,490 --> 00:06:10,430
monolingual sites because you may want

00:06:06,319 --> 00:06:13,520
to install in Spanish and you want to

00:06:10,430 --> 00:06:15,379
track which data your site is on because

00:06:13,520 --> 00:06:20,539
maybe you want to add more languages

00:06:15,379 --> 00:06:24,529
later or or you want to two separate to

00:06:20,539 --> 00:06:26,870
know which language your data is in the

00:06:24,529 --> 00:06:29,389
second model the second pie pillar is

00:06:26,870 --> 00:06:32,930
the interface translation model which

00:06:29,389 --> 00:06:37,909
allows you to translate your user

00:06:32,930 --> 00:06:40,040
interface and before you we needed a

00:06:37,909 --> 00:06:42,350
like the localization update model for

00:06:40,040 --> 00:06:45,050
downloading your p.o files and man

00:06:42,350 --> 00:06:46,640
automatically so now this is in core

00:06:45,050 --> 00:06:49,280
already so you can use interface

00:06:46,640 --> 00:06:51,260
translation model and it has this

00:06:49,280 --> 00:06:55,100
available there and it improves the

00:06:51,260 --> 00:06:57,350
usability a lot then we have the content

00:06:55,100 --> 00:06:59,540
translation model which allows you to

00:06:57,350 --> 00:07:01,610
translate all your content not only

00:06:59,540 --> 00:07:03,560
notes and taxonomy terms but also any

00:07:01,610 --> 00:07:05,390
kind of entity that you can have in your

00:07:03,560 --> 00:07:10,640
site if you have drupal commerce it can

00:07:05,390 --> 00:07:12,710
translate your products and provides the

00:07:10,640 --> 00:07:17,090
user interface for actually translating

00:07:12,710 --> 00:07:20,240
them and then we have the config

00:07:17,090 --> 00:07:22,400
translation model and in Drupal 8 we

00:07:20,240 --> 00:07:26,270
introduce the config management system

00:07:22,400 --> 00:07:29,150
which allows you to move configuration

00:07:26,270 --> 00:07:32,480
around different environments or share

00:07:29,150 --> 00:07:34,160
them with different sides so we actually

00:07:32,480 --> 00:07:37,600
need to translate this configuration

00:07:34,160 --> 00:07:40,010
tool and the config translation a model

00:07:37,600 --> 00:07:42,320
allows you to translate your blogs your

00:07:40,010 --> 00:07:45,530
views your field settings and it

00:07:42,320 --> 00:07:48,970
provides a unified translation UI and it

00:07:45,530 --> 00:07:54,020
looks like the content translation one

00:07:48,970 --> 00:07:55,730
so starting with the language model we

00:07:54,020 --> 00:08:00,920
are going to see which I PS we have

00:07:55,730 --> 00:08:03,080
available here so the first thing we

00:08:00,920 --> 00:08:05,450
want to do is we need to deal with the

00:08:03,080 --> 00:08:08,870
languages and for that we have a service

00:08:05,450 --> 00:08:12,050
which is the language manager and even

00:08:08,870 --> 00:08:13,850
in if you can install any model this is

00:08:12,050 --> 00:08:16,370
part of course so you can actually use

00:08:13,850 --> 00:08:18,410
it you don't even need to install the

00:08:16,370 --> 00:08:22,070
language model you have a language

00:08:18,410 --> 00:08:26,120
manager available because for dealing

00:08:22,070 --> 00:08:32,479
with languages we need to to put that in

00:08:26,120 --> 00:08:34,250
there so so we can manage the data the

00:08:32,479 --> 00:08:38,030
language of all data even if it's in

00:08:34,250 --> 00:08:40,580
English only so calling the drupal

00:08:38,030 --> 00:08:44,180
language manager returns a language

00:08:40,580 --> 00:08:47,270
manager object which is a service that

00:08:44,180 --> 00:08:49,550
you can use for tracking and managing

00:08:47,270 --> 00:08:52,280
your language but if you install the

00:08:49,550 --> 00:08:53,390
language model the same call will return

00:08:52,280 --> 00:08:56,990
a configurable language

00:08:53,390 --> 00:09:00,380
and they share the same interface so you

00:08:56,990 --> 00:09:04,340
can check this you can call the same

00:09:00,380 --> 00:09:06,230
methods on them the way that you do

00:09:04,340 --> 00:09:10,280
don't really to be you don't really know

00:09:06,230 --> 00:09:13,310
to be aware if you have a multilingual

00:09:10,280 --> 00:09:17,060
side or a monolingual side when you are

00:09:13,310 --> 00:09:22,610
dealing with the api's from your country

00:09:17,060 --> 00:09:24,320
bar custom models so one of the most

00:09:22,610 --> 00:09:26,420
important methods that our language

00:09:24,320 --> 00:09:28,730
manager has is they get language methods

00:09:26,420 --> 00:09:33,530
with if you don't have language model

00:09:28,730 --> 00:09:36,320
enabled it has three languages the

00:09:33,530 --> 00:09:40,370
default which will be English as it used

00:09:36,320 --> 00:09:44,410
to be in Drupal 7 and in Drupal 7 we had

00:09:40,370 --> 00:09:49,550
as a special language which was the und

00:09:44,410 --> 00:09:53,510
language which was somehow confusing for

00:09:49,550 --> 00:09:55,940
people so now we added a new one which

00:09:53,510 --> 00:09:59,720
is the not applicable language so we can

00:09:55,940 --> 00:10:02,900
maybe double the confusion so actually

00:09:59,720 --> 00:10:06,880
the difference is that the in our site

00:10:02,900 --> 00:10:09,620
we may have data which is in a language

00:10:06,880 --> 00:10:12,620
which may be English in this case if

00:10:09,620 --> 00:10:16,280
within install a language model but we

00:10:12,620 --> 00:10:20,470
may want to track the language of data

00:10:16,280 --> 00:10:24,470
we when a language doesn't make sense so

00:10:20,470 --> 00:10:27,170
we may have users that are you loading

00:10:24,470 --> 00:10:29,480
content and we don't know the language

00:10:27,170 --> 00:10:32,090
of this content and they don't select it

00:10:29,480 --> 00:10:35,360
maybe we are automatically retrieving it

00:10:32,090 --> 00:10:37,550
from somewhere and then we would assign

00:10:35,360 --> 00:10:40,760
the not specified language like we don't

00:10:37,550 --> 00:10:42,560
know the language of this data but

00:10:40,760 --> 00:10:45,140
there's also the possibility that we are

00:10:42,560 --> 00:10:46,880
blowing an image and the image has no

00:10:45,140 --> 00:10:49,040
text on it so actually the language

00:10:46,880 --> 00:10:50,840
doesn't make sense there so in that case

00:10:49,040 --> 00:10:55,430
we would be using the not applicable

00:10:50,840 --> 00:11:00,110
language and if we install the language

00:10:55,430 --> 00:11:02,210
model we can actually use different

00:11:00,110 --> 00:11:04,790
languages so in this case we will have

00:11:02,210 --> 00:11:05,960
hunger and an Italian and we still have

00:11:04,790 --> 00:11:08,900
the two

00:11:05,960 --> 00:11:13,220
special languages not specified and not

00:11:08,900 --> 00:11:16,700
applicable this if we install the

00:11:13,220 --> 00:11:19,040
configurable the language model our

00:11:16,700 --> 00:11:21,200
language will be configurable so we can

00:11:19,040 --> 00:11:23,860
edit them at them anything you can do

00:11:21,200 --> 00:11:27,620
with languages and they are actually

00:11:23,860 --> 00:11:29,510
they are actually config object so you

00:11:27,620 --> 00:11:32,090
can deploy them and anything so they are

00:11:29,510 --> 00:11:34,730
saved like any other config entities in

00:11:32,090 --> 00:11:37,970
the system and you can export them to to

00:11:34,730 --> 00:11:41,090
a general file and in now in our

00:11:37,970 --> 00:11:43,670
interface when you pick the language you

00:11:41,090 --> 00:11:46,460
are using in some cases it doesn't make

00:11:43,670 --> 00:11:48,140
sense that you see the not specified or

00:11:46,460 --> 00:11:50,900
the not applicable languages so they are

00:11:48,140 --> 00:11:52,850
special and we don't want you to edit

00:11:50,900 --> 00:11:54,800
them or delete them so they are locked

00:11:52,850 --> 00:11:56,990
and this is something that you can see

00:11:54,800 --> 00:12:00,170
when you export your your config and

00:11:56,990 --> 00:12:03,380
your configurable languages you will see

00:12:00,170 --> 00:12:18,470
that they have a lot of property and

00:12:03,380 --> 00:12:20,540
your regular languages are not locked so

00:12:18,470 --> 00:12:26,210
how we deal with languages how we can

00:12:20,540 --> 00:12:27,830
create languages so if you have the

00:12:26,210 --> 00:12:30,530
language model listal you will have a

00:12:27,830 --> 00:12:33,500
configurable language class which has a

00:12:30,530 --> 00:12:36,230
creator method so you can create your

00:12:33,500 --> 00:12:38,150
languages but if you want to use the 95

00:12:36,230 --> 00:12:40,100
standard languages that come with Drupal

00:12:38,150 --> 00:12:43,610
so you don't want to provide their

00:12:40,100 --> 00:12:46,730
native names or the names you only need

00:12:43,610 --> 00:12:48,530
to provide the to use the land code they

00:12:46,730 --> 00:12:50,990
will be used so you call configurable

00:12:48,530 --> 00:12:55,030
language create from lang code you pass

00:12:50,990 --> 00:12:55,030
the LAN code and then you can save them

00:12:55,600 --> 00:13:00,110
but if you want to have your own

00:12:58,130 --> 00:13:03,680
languages you can just call the

00:13:00,110 --> 00:13:08,090
constructor of this class and save it in

00:13:03,680 --> 00:13:10,160
the same way you can do whatever you

00:13:08,090 --> 00:13:14,110
want with languages so you can load them

00:13:10,160 --> 00:13:16,850
you can edit them you can delete them

00:13:14,110 --> 00:13:18,970
through the API sand it works exactly

00:13:16,850 --> 00:13:21,970
the same day I will lose

00:13:18,970 --> 00:13:27,009
the same that the API you would use like

00:13:21,970 --> 00:13:29,230
dealing with nodes and another thing

00:13:27,009 --> 00:13:31,990
that the language module does is that it

00:13:29,230 --> 00:13:35,410
detects the language you are requesting

00:13:31,990 --> 00:13:37,750
in your page and if you need to deal

00:13:35,410 --> 00:13:40,899
with the language the seed that is being

00:13:37,750 --> 00:13:42,939
used currently in this request you can

00:13:40,899 --> 00:13:45,699
use the language manager get current

00:13:42,939 --> 00:13:50,259
language method for that and it will

00:13:45,699 --> 00:13:55,139
return the current language subject so

00:13:50,259 --> 00:13:59,620
in summary languages are configurable

00:13:55,139 --> 00:14:02,439
entities so you can do crud operations

00:13:59,620 --> 00:14:04,180
on them you can also get the language

00:14:02,439 --> 00:14:08,139
which is been being negotiating it on

00:14:04,180 --> 00:14:10,089
the page and you can do whatever you

00:14:08,139 --> 00:14:14,319
need with them from the api's like you

00:14:10,089 --> 00:14:17,500
can edit them assign change that name

00:14:14,319 --> 00:14:21,040
which may be not that common but you can

00:14:17,500 --> 00:14:24,189
do whatever you want so now that we have

00:14:21,040 --> 00:14:26,379
languages on our site the next logical

00:14:24,189 --> 00:14:31,720
step is translating the user interface

00:14:26,379 --> 00:14:39,129
and for that you may remember for from

00:14:31,720 --> 00:14:42,370
Drupal 7 the T function that is still

00:14:39,129 --> 00:14:44,949
there and in most of the cases is all

00:14:42,370 --> 00:14:48,610
you want to know about how to translate

00:14:44,949 --> 00:14:51,970
your user interface so we could say that

00:14:48,610 --> 00:14:54,160
there is no change no change and we just

00:14:51,970 --> 00:14:58,509
leave the room but actually internally

00:14:54,160 --> 00:15:04,720
it's really different and you may not

00:14:58,509 --> 00:15:07,689
want to use that one actually because in

00:15:04,720 --> 00:15:10,569
Drupal 8 we introduced this concept of

00:15:07,689 --> 00:15:15,730
dependency injection who is aware of

00:15:10,569 --> 00:15:19,360
dependency injection half of the room so

00:15:15,730 --> 00:15:21,730
usually in or before Drupal 8 in Drupal

00:15:19,360 --> 00:15:25,870
7 what we usually did is like we had our

00:15:21,730 --> 00:15:28,899
logic in your code and we need to know

00:15:25,870 --> 00:15:32,600
about the user that is in our side so we

00:15:28,899 --> 00:15:34,639
we could call methods

00:15:32,600 --> 00:15:36,699
for dealing with the users and we need

00:15:34,639 --> 00:15:39,230
to know the configuration of our site

00:15:36,699 --> 00:15:41,480
because we may have a user that has a

00:15:39,230 --> 00:15:43,430
different preference of a language we

00:15:41,480 --> 00:15:46,250
may want to know the configuration of

00:15:43,430 --> 00:15:49,180
the language on our site and then we

00:15:46,250 --> 00:15:53,360
need to actually call the translation

00:15:49,180 --> 00:15:55,480
functionality so with the pendency

00:15:53,360 --> 00:16:00,800
ejection what we are doing is just

00:15:55,480 --> 00:16:04,310
reversing the arrows and in some way we

00:16:00,800 --> 00:16:08,240
provide when we have a class or a

00:16:04,310 --> 00:16:10,910
service that is dealing with any logic

00:16:08,240 --> 00:16:14,019
what we want is to know which other

00:16:10,910 --> 00:16:17,389
parts of the system it depends on and

00:16:14,019 --> 00:16:21,529
the a good way of knowing this is like

00:16:17,389 --> 00:16:24,949
instead of having calling external code

00:16:21,529 --> 00:16:27,709
what we do is that doing we inject we

00:16:24,949 --> 00:16:30,649
passed through the constructor or any

00:16:27,709 --> 00:16:33,079
other ways we pass the dependencies they

00:16:30,649 --> 00:16:34,910
need so they keep an instance of a

00:16:33,079 --> 00:16:37,970
reference of them so they can actually

00:16:34,910 --> 00:16:42,380
call them one good thing about this is

00:16:37,970 --> 00:16:46,670
that we can switch them if we have an

00:16:42,380 --> 00:16:49,250
interface and we know that we need to

00:16:46,670 --> 00:16:52,730
know some data about the user and we

00:16:49,250 --> 00:16:54,560
know that there is a method for that we

00:16:52,730 --> 00:16:56,870
don't really need to know which user

00:16:54,560 --> 00:16:59,240
system is you we are using maybe we are

00:16:56,870 --> 00:17:01,250
integrating with an external system and

00:16:59,240 --> 00:17:02,870
it provides the user with so we don't

00:17:01,250 --> 00:17:04,250
really need to know about the details of

00:17:02,870 --> 00:17:07,760
that we just know that there's a

00:17:04,250 --> 00:17:10,159
contract and this service will use that

00:17:07,760 --> 00:17:11,870
contract so we know which methods there

00:17:10,159 --> 00:17:18,289
will be and we don't really need to know

00:17:11,870 --> 00:17:21,620
what they are doing so here we want to

00:17:18,289 --> 00:17:23,510
have a way of having this so we don't

00:17:21,620 --> 00:17:26,809
really need to know if even there's a

00:17:23,510 --> 00:17:28,720
translation system in place because we

00:17:26,809 --> 00:17:31,340
may be in a minute monolingual side and

00:17:28,720 --> 00:17:34,730
actually we won like the language with

00:17:31,340 --> 00:17:36,740
we saw before the language manager can

00:17:34,730 --> 00:17:39,080
be different if you are in a monolingual

00:17:36,740 --> 00:17:42,440
side or if you hand a language model

00:17:39,080 --> 00:17:45,110
installed so we need a way to provide

00:17:42,440 --> 00:17:46,430
this translation service and a way that

00:17:45,110 --> 00:17:50,180
we can switch it

00:17:46,430 --> 00:17:55,190
and for that what we will use is the

00:17:50,180 --> 00:17:57,440
this T method so if we are creating a

00:17:55,190 --> 00:18:00,050
controller or a form we are probably

00:17:57,440 --> 00:18:02,990
standing from base classes that are

00:18:00,050 --> 00:18:07,070
available in Drupal 8 core like form

00:18:02,990 --> 00:18:09,710
base and it will already have a thick

00:18:07,070 --> 00:18:14,750
atty method that we can use so we will

00:18:09,710 --> 00:18:17,360
be calling the DS t function instead and

00:18:14,750 --> 00:18:19,640
it will call the translate the proper

00:18:17,360 --> 00:18:24,950
translation service and it will call the

00:18:19,640 --> 00:18:28,220
t function on on that one but if we are

00:18:24,950 --> 00:18:30,640
creating our own class that doesn't

00:18:28,220 --> 00:18:33,680
extend from anything else in the Drupal

00:18:30,640 --> 00:18:37,460
system we can actually use the string

00:18:33,680 --> 00:18:39,440
translation trade so we don't have to

00:18:37,460 --> 00:18:43,010
repeat or code about creating the T

00:18:39,440 --> 00:18:47,630
method and and storing this reference to

00:18:43,010 --> 00:18:50,270
the translation service so this string

00:18:47,630 --> 00:18:53,000
translation trade will be providing us

00:18:50,270 --> 00:18:56,480
with the reference to the translation

00:18:53,000 --> 00:19:00,040
service and it will provide the T that

00:18:56,480 --> 00:19:07,730
these three function that we want to use

00:19:00,040 --> 00:19:13,100
and as we said T is actually the same

00:19:07,730 --> 00:19:15,230
that Drupal 7 this tea but internally is

00:19:13,100 --> 00:19:19,550
quite different so when we call T in

00:19:15,230 --> 00:19:22,640
duple 7 we get the string translated in

00:19:19,550 --> 00:19:24,980
Drupal 8 we actually are getting an

00:19:22,640 --> 00:19:28,010
object so we are getting a translatable

00:19:24,980 --> 00:19:32,630
markup object and we can call methods on

00:19:28,010 --> 00:19:35,030
it so we can actually if we call T in

00:19:32,630 --> 00:19:38,330
this in this string we can actually

00:19:35,030 --> 00:19:40,640
check with optional and code option and

00:19:38,330 --> 00:19:45,220
we have several methods for knowing

00:19:40,640 --> 00:19:50,260
about this translation this way we can

00:19:45,220 --> 00:19:53,270
even alter how this will be translated

00:19:50,260 --> 00:19:56,420
translated later before the output is

00:19:53,270 --> 00:19:59,160
actually created and we can able and a

00:19:56,420 --> 00:20:03,270
queen we could have an aberration so if

00:19:59,160 --> 00:20:05,970
in Drupal 7 if we had a t equal which

00:20:03,270 --> 00:20:08,880
returns a translation and then in may be

00:20:05,970 --> 00:20:12,800
in a form alter later we are not dealing

00:20:08,880 --> 00:20:17,340
we are not really printing that string

00:20:12,800 --> 00:20:20,040
we we had to translate it here if it's

00:20:17,340 --> 00:20:23,790
not going to be render we are not really

00:20:20,040 --> 00:20:26,490
translating it so at the end we may even

00:20:23,790 --> 00:20:28,800
make it the performance of our site

00:20:26,490 --> 00:20:31,890
better so this is only the translation

00:20:28,800 --> 00:20:37,320
is actually only done when we are going

00:20:31,890 --> 00:20:39,690
to render the HTML of the page in the

00:20:37,320 --> 00:20:43,290
same way we have format pleura in Drupal

00:20:39,690 --> 00:20:47,970
7 now into ballot is gone so we have the

00:20:43,290 --> 00:20:50,610
DS format plural method for that and it

00:20:47,970 --> 00:20:52,260
will work the same way so do you call

00:20:50,610 --> 00:20:54,420
the forum approval and you will get an

00:20:52,260 --> 00:20:58,590
object that you can actually alter or

00:20:54,420 --> 00:21:00,720
whatever you need and if you are doing

00:20:58,590 --> 00:21:03,390
JavaScript it didn't change that much

00:21:00,720 --> 00:21:05,130
from Drupal 7 we still have the Dougal T

00:21:03,390 --> 00:21:07,490
method and the Drupal format plural

00:21:05,130 --> 00:21:07,490
method

00:21:15,040 --> 00:21:23,870
so 14 plates now in Drupal 8 we have

00:21:19,250 --> 00:21:27,770
tweaked and we usually had PHP template

00:21:23,870 --> 00:21:30,190
before so you would call T on your PHP

00:21:27,770 --> 00:21:32,870
templates now we don't have that anymore

00:21:30,190 --> 00:21:36,290
so what we have is there are two

00:21:32,870 --> 00:21:39,980
different methods for translating your

00:21:36,290 --> 00:21:42,740
your strings your literals in your

00:21:39,980 --> 00:21:48,680
template so the first one is the trans

00:21:42,740 --> 00:21:50,930
filter which you can if you have a

00:21:48,680 --> 00:21:52,310
string you can pass the trans filter and

00:21:50,930 --> 00:21:57,080
it will provide the proper translation

00:21:52,310 --> 00:21:59,900
and like in the T function in Drupal 7

00:21:57,080 --> 00:22:03,110
we have we can pass the context for

00:21:59,900 --> 00:22:05,210
maybe we want to request the translation

00:22:03,110 --> 00:22:10,520
not in the current language but in a

00:22:05,210 --> 00:22:13,160
special language define language and if

00:22:10,520 --> 00:22:15,200
you use the first way it can be quite

00:22:13,160 --> 00:22:18,620
complex to read so there's another way

00:22:15,200 --> 00:22:22,220
which is using the trans attack like you

00:22:18,620 --> 00:22:26,420
can see that downside there and this

00:22:22,220 --> 00:22:30,020
makes that all the text that is between

00:22:26,420 --> 00:22:34,220
the trans and entrance will be used for

00:22:30,020 --> 00:22:36,350
calling the t function internally so and

00:22:34,220 --> 00:22:41,800
you can also have like variables there

00:22:36,350 --> 00:22:41,800
like you would have in in your PHP code

00:22:43,240 --> 00:22:50,270
another special thing is that in Drupal

00:22:46,310 --> 00:22:53,360
7 you had your hook menu where you have

00:22:50,270 --> 00:22:56,960
your route you had your links you had

00:22:53,360 --> 00:23:01,370
your menu links your task everything was

00:22:56,960 --> 00:23:03,620
in there now we split that and these are

00:23:01,370 --> 00:23:07,520
all located in jamming files they are

00:23:03,620 --> 00:23:09,200
separated so we have your menu links in

00:23:07,520 --> 00:23:12,620
one side your routing is in a different

00:23:09,200 --> 00:23:17,000
place and you can it's a more flexible

00:23:12,620 --> 00:23:19,370
system and in Drupal 7 one thing you

00:23:17,000 --> 00:23:21,950
couldn't do is in your hook menu you

00:23:19,370 --> 00:23:25,370
shouldn't be calling the T function for

00:23:21,950 --> 00:23:27,920
your title because it this way it would

00:23:25,370 --> 00:23:33,920
be possible to to cash you

00:23:27,920 --> 00:23:36,830
links and Drupal would take care of

00:23:33,920 --> 00:23:39,170
translating those in Drupal 8 is mostly

00:23:36,830 --> 00:23:41,060
the same and actually they are jamming

00:23:39,170 --> 00:23:44,090
files so you can actually you cannot

00:23:41,060 --> 00:23:47,840
call any function on them but what we

00:23:44,090 --> 00:23:51,530
have here is that we have some special

00:23:47,840 --> 00:23:58,340
keys that Drupal 8 will take care of

00:23:51,530 --> 00:24:00,530
translating and if and the p.o TX model

00:23:58,340 --> 00:24:02,600
the pots module will take care of

00:24:00,530 --> 00:24:04,460
extracting them and making them

00:24:02,600 --> 00:24:08,150
available like for provided

00:24:04,460 --> 00:24:10,100
configuration and provided links from

00:24:08,150 --> 00:24:13,790
core you want to translate them in

00:24:10,100 --> 00:24:16,640
localize drupal.org maybe so this module

00:24:13,790 --> 00:24:19,010
takes care of knowing which keys from

00:24:16,640 --> 00:24:22,370
these jamel files should be translated

00:24:19,010 --> 00:24:25,970
or not so in this case we will have the

00:24:22,370 --> 00:24:32,480
title and the description and they will

00:24:25,970 --> 00:24:35,690
be translated for you by drupal 8 so

00:24:32,480 --> 00:24:38,570
this goes about the interface api is the

00:24:35,690 --> 00:24:42,440
interface translation api's so at the

00:24:38,570 --> 00:24:44,450
end interface translation model what it

00:24:42,440 --> 00:24:46,610
does is that it provides the ability to

00:24:44,450 --> 00:24:52,640
translate from English to any other

00:24:46,610 --> 00:24:56,030
language and now next module is the

00:24:52,640 --> 00:24:58,850
content translation model and as we said

00:24:56,030 --> 00:25:04,220
before it's not based on copies of your

00:24:58,850 --> 00:25:07,160
note or your entities so what we have

00:25:04,220 --> 00:25:10,460
here is that we have we will have clever

00:25:07,160 --> 00:25:14,120
objects that know about them so if you

00:25:10,460 --> 00:25:18,860
are creating around entity ty continent

00:25:14,120 --> 00:25:24,380
et types Drupal 8 would make easier to

00:25:18,860 --> 00:25:26,750
translate them so actually for creating

00:25:24,380 --> 00:25:29,240
a Content entity type what you need to

00:25:26,750 --> 00:25:35,240
do is create a class in a special name

00:25:29,240 --> 00:25:37,700
space in your your model and you have an

00:25:35,240 --> 00:25:41,299
annotation which describes the metadata

00:25:37,700 --> 00:25:44,239
of it defines what your content

00:25:41,299 --> 00:25:48,289
see how it will behave so here we have

00:25:44,239 --> 00:25:51,409
the node PHP from core and there we have

00:25:48,289 --> 00:25:55,220
a Content entity type with with the ID

00:25:51,409 --> 00:25:59,960
node then we want to provide a label and

00:25:55,220 --> 00:26:01,940
it's unfortunate in your labels in

00:25:59,960 --> 00:26:06,649
annotations you can use the translation

00:26:01,940 --> 00:26:08,809
this ad translation and it will provide

00:26:06,649 --> 00:26:11,509
the it will be extracted so you can

00:26:08,809 --> 00:26:13,549
translate them on your UI and for

00:26:11,509 --> 00:26:15,980
translating York on your content itself

00:26:13,549 --> 00:26:18,739
you only need to say that this flag

00:26:15,980 --> 00:26:21,859
translatable is true and if you want to

00:26:18,739 --> 00:26:24,769
translate your entities you need to know

00:26:21,859 --> 00:26:27,649
which language they are in so you need

00:26:24,769 --> 00:26:34,789
to define the land code in the entity

00:26:27,649 --> 00:26:39,830
keys arrived and so just by doing this

00:26:34,789 --> 00:26:43,159
and you are actually telling Drupal that

00:26:39,830 --> 00:26:46,340
these entities are translatable or that

00:26:43,159 --> 00:26:49,279
that a user could opt in for translating

00:26:46,340 --> 00:26:51,739
them so this doesn't mean that the all

00:26:49,279 --> 00:26:56,509
your notes can be translatable this

00:26:51,739 --> 00:27:00,049
means that the user can go to the

00:26:56,509 --> 00:27:03,850
language content interface and set up if

00:27:00,049 --> 00:27:09,409
they want to translate them or not and

00:27:03,850 --> 00:27:15,230
as we said we need a LAN code field for

00:27:09,409 --> 00:27:17,330
that in our inner entity in Group A late

00:27:15,230 --> 00:27:21,379
as in Drupal 7 we have two different

00:27:17,330 --> 00:27:24,230
kind of feels so first one is that the

00:27:21,379 --> 00:27:26,269
the fields that are defined as part of

00:27:24,230 --> 00:27:28,399
the entity and then we have the fields

00:27:26,269 --> 00:27:30,549
that we can add one that we can

00:27:28,399 --> 00:27:34,190
configure in the interface of the entity

00:27:30,549 --> 00:27:36,320
so if we are standing from continent ET

00:27:34,190 --> 00:27:40,190
base when creating our continent ities

00:27:36,320 --> 00:27:42,289
which we may we should do we have to

00:27:40,190 --> 00:27:44,570
define the base field definitions which

00:27:42,289 --> 00:27:49,399
provides these base properties that

00:27:44,570 --> 00:27:51,649
every entity of this kind will have and

00:27:49,399 --> 00:27:53,629
it already has the code for creating the

00:27:51,649 --> 00:27:54,230
field for you the land code field for

00:27:53,629 --> 00:27:58,610
you so

00:27:54,230 --> 00:28:01,610
only need to indent attikis awry defined

00:27:58,610 --> 00:28:04,160
that you have a long coat and you have

00:28:01,610 --> 00:28:07,940
to provide the name that you want to use

00:28:04,160 --> 00:28:09,860
for this field and if you extend and

00:28:07,940 --> 00:28:13,820
call the base field definition method

00:28:09,860 --> 00:28:16,190
they will be created for you so in your

00:28:13,820 --> 00:28:18,620
definition when you are creating your

00:28:16,190 --> 00:28:20,600
entity you only need to ensure that you

00:28:18,620 --> 00:28:25,429
call the parent base field F initial

00:28:20,600 --> 00:28:27,470
methods and you use the fields from

00:28:25,429 --> 00:28:31,640
there and then you can add your own

00:28:27,470 --> 00:28:35,600
fields so for your arm fields you will

00:28:31,640 --> 00:28:37,700
you can you need to create the base

00:28:35,600 --> 00:28:39,919
field definition from there and then you

00:28:37,700 --> 00:28:44,030
have the method for making them

00:28:39,919 --> 00:28:46,640
translatable what this makes again is

00:28:44,030 --> 00:28:48,679
not that they are translatable is that

00:28:46,640 --> 00:28:53,960
the user can set them up ass

00:28:48,679 --> 00:28:56,270
translatable and it will provide if we

00:28:53,960 --> 00:28:58,220
call the set translatable method in our

00:28:56,270 --> 00:29:00,230
best properties Drupal will know about

00:28:58,220 --> 00:29:03,620
it and actually it will provide a

00:29:00,230 --> 00:29:05,419
default for st. defaults for that so the

00:29:03,620 --> 00:29:08,390
user can configure them but if you make

00:29:05,419 --> 00:29:11,270
an entity's as a table any field that

00:29:08,390 --> 00:29:15,620
have this flat on will be translatable

00:29:11,270 --> 00:29:18,200
by default and if we are creating our

00:29:15,620 --> 00:29:21,770
round fields how we can make them

00:29:18,200 --> 00:29:23,620
translatable there's nothing you need to

00:29:21,770 --> 00:29:28,460
do actually they will be translatable

00:29:23,620 --> 00:29:31,370
automatically so Drupal 8 knows how to

00:29:28,460 --> 00:29:34,370
make them translatable but at some point

00:29:31,370 --> 00:29:38,299
you may want to make more granular

00:29:34,370 --> 00:29:43,700
options like next example we have we are

00:29:38,299 --> 00:29:49,220
defining an image field here this is

00:29:43,700 --> 00:29:53,049
another example from core and in our

00:29:49,220 --> 00:29:58,130
field in a rematch we will have a file

00:29:53,049 --> 00:30:01,429
it is the available and an entity

00:29:58,130 --> 00:30:03,590
reference to a file entity actually and

00:30:01,429 --> 00:30:06,320
we want to know the width and the head

00:30:03,590 --> 00:30:07,820
of this image and then we want to define

00:30:06,320 --> 00:30:14,330
the alternative text and

00:30:07,820 --> 00:30:16,700
the title of the of this image so a

00:30:14,330 --> 00:30:19,840
field can be composed of different sub

00:30:16,700 --> 00:30:23,270
properties and we may want to provide

00:30:19,840 --> 00:30:28,610
different translate ability options for

00:30:23,270 --> 00:30:30,730
them so in case of an image you probably

00:30:28,610 --> 00:30:32,660
don't want to translate the image itself

00:30:30,730 --> 00:30:35,750
but you want to translate the

00:30:32,660 --> 00:30:37,840
alternative text and the title so what

00:30:35,750 --> 00:30:42,170
we have here is that in our annotation

00:30:37,840 --> 00:30:45,260
we can actually create groups like here

00:30:42,170 --> 00:30:47,210
we are creating a file group and we are

00:30:45,260 --> 00:30:50,570
saying that the columns of this group

00:30:47,210 --> 00:30:52,970
target ID with and hate are part of this

00:30:50,570 --> 00:30:56,000
file and we don't say anything about

00:30:52,970 --> 00:30:57,620
translate ability and for the

00:30:56,000 --> 00:31:00,650
alternative text we are saying

00:30:57,620 --> 00:31:03,770
translatable translatable true what this

00:31:00,650 --> 00:31:06,710
makes is that it will provide same

00:31:03,770 --> 00:31:10,130
default for when you are configuring

00:31:06,710 --> 00:31:15,140
your side so when you check translating

00:31:10,130 --> 00:31:20,060
an image file and image field in an

00:31:15,140 --> 00:31:22,400
entity you will see by default that you

00:31:20,060 --> 00:31:24,740
can provide different contribution for

00:31:22,400 --> 00:31:27,740
the file itself for alternative text and

00:31:24,740 --> 00:31:29,900
for the title and by default the

00:31:27,740 --> 00:31:32,540
alternative text and the title will be

00:31:29,900 --> 00:31:34,460
translatable but not the file itself but

00:31:32,540 --> 00:31:39,290
you can actually make it transfer table

00:31:34,460 --> 00:31:42,950
if you want so this is how do you deal

00:31:39,290 --> 00:31:44,690
with your wood around entities how do

00:31:42,950 --> 00:31:48,800
you make your own entity strands a table

00:31:44,690 --> 00:31:51,080
and how you can provide more granular

00:31:48,800 --> 00:31:55,280
options for translate ability of your

00:31:51,080 --> 00:31:58,490
fields so then we are going to see how

00:31:55,280 --> 00:32:01,640
do you actually manage your your

00:31:58,490 --> 00:32:05,530
entities so the entity language api is

00:32:01,640 --> 00:32:08,660
quite straightforward so you have a node

00:32:05,530 --> 00:32:10,580
class for dealing with your nodes but

00:32:08,660 --> 00:32:12,470
you probably will have you will have the

00:32:10,580 --> 00:32:16,180
same for any kind of entity that you may

00:32:12,470 --> 00:32:19,490
create and you have a load method for it

00:32:16,180 --> 00:32:21,680
so you can load your entity and then you

00:32:19,490 --> 00:32:23,960
can call the gate translation

00:32:21,680 --> 00:32:28,220
method so if you call the gate

00:32:23,960 --> 00:32:30,500
translation method you will you can

00:32:28,220 --> 00:32:32,800
request which translation you want to

00:32:30,500 --> 00:32:35,780
work with and you will get a reference

00:32:32,800 --> 00:32:38,810
to do the translation but it's actually

00:32:35,780 --> 00:32:41,780
another no it's the same note so you can

00:32:38,810 --> 00:32:46,640
do any operations you want with it and

00:32:41,780 --> 00:32:50,990
then save it or edit the fields as you

00:32:46,640 --> 00:32:57,980
were with nodes in any other situation

00:32:50,990 --> 00:33:01,610
so language here is quite easy to use

00:32:57,980 --> 00:33:04,730
and translations from this from these

00:33:01,610 --> 00:33:07,940
notes are quite easy to use and if as

00:33:04,730 --> 00:33:11,630
before we said we may not what we may

00:33:07,940 --> 00:33:15,320
not know which translation we want like

00:33:11,630 --> 00:33:16,820
we may want the translation from the

00:33:15,320 --> 00:33:19,940
current language that has been

00:33:16,820 --> 00:33:24,380
negotiated so in that case what we would

00:33:19,940 --> 00:33:25,970
use is from the entities repository we

00:33:24,380 --> 00:33:28,340
will call the gate translation from

00:33:25,970 --> 00:33:30,500
context method and we pass the note and

00:33:28,340 --> 00:33:35,660
what we get there is the note in the

00:33:30,500 --> 00:33:38,360
current negotiated language so there are

00:33:35,660 --> 00:33:40,820
a lot of functions or a lot of methods

00:33:38,360 --> 00:33:43,160
that we can use in or entities so we

00:33:40,820 --> 00:33:47,960
have a gettin translated method that

00:33:43,160 --> 00:33:50,360
gets us the source translation the note

00:33:47,960 --> 00:33:53,300
or in early was created in the language

00:33:50,360 --> 00:33:55,550
that it was originally created we can

00:33:53,300 --> 00:33:58,640
get a language object from the node

00:33:55,550 --> 00:34:01,160
calling the language method we can see

00:33:58,640 --> 00:34:03,320
which languages this node has been

00:34:01,160 --> 00:34:06,440
translated to with the gate translation

00:34:03,320 --> 00:34:10,130
language we get the list of the language

00:34:06,440 --> 00:34:11,750
objects we have the hash translation

00:34:10,130 --> 00:34:13,910
method for knowing if there's a

00:34:11,750 --> 00:34:16,130
translation for a specific land code

00:34:13,910 --> 00:34:18,500
their translation for actually creating

00:34:16,130 --> 00:34:22,970
it and remove translation for removing

00:34:18,500 --> 00:34:25,490
them so these are the AP is that content

00:34:22,970 --> 00:34:29,030
translation provides for for dealing

00:34:25,490 --> 00:34:35,310
with your language of your content

00:34:29,030 --> 00:34:38,700
translation so but one thing is that in

00:34:35,310 --> 00:34:42,780
belaid be using core and its language

00:34:38,700 --> 00:34:46,260
support has been improved a lot so the

00:34:42,780 --> 00:34:48,780
purpose of be use is actually it has two

00:34:46,260 --> 00:34:52,020
different functionalities one is making

00:34:48,780 --> 00:34:54,240
queries to the system so you can query

00:34:52,020 --> 00:34:57,300
the system about your data and then

00:34:54,240 --> 00:34:59,220
render it and these are the two

00:34:57,300 --> 00:35:04,290
different columns that you can see in

00:34:59,220 --> 00:35:08,550
the bees buse you I so unlike which is

00:35:04,290 --> 00:35:12,330
quite integrated in imbue so in the

00:35:08,550 --> 00:35:14,970
crepe art you can actually filter by

00:35:12,330 --> 00:35:17,910
language so you can actually filter your

00:35:14,970 --> 00:35:21,420
views by a specific language or you can

00:35:17,910 --> 00:35:23,340
say I want to filter by the language

00:35:21,420 --> 00:35:27,480
which is actually negotiated for the

00:35:23,340 --> 00:35:29,340
page and in the rendering side you can

00:35:27,480 --> 00:35:30,990
actually pick which language you should

00:35:29,340 --> 00:35:34,790
render your entities so you can actually

00:35:30,990 --> 00:35:40,830
with be used to give me all the nodes

00:35:34,790 --> 00:35:43,520
that are in English and then render the

00:35:40,830 --> 00:35:47,730
German translations so this is like a

00:35:43,520 --> 00:35:49,800
different the two different ways that

00:35:47,730 --> 00:35:52,680
you deal with language imbues and it's

00:35:49,800 --> 00:35:57,870
quite powerful so you may even not need

00:35:52,680 --> 00:36:00,900
this aps at all so this was about

00:35:57,870 --> 00:36:04,110
content translation so what it provides

00:36:00,900 --> 00:36:08,970
is the ability for translating from any

00:36:04,110 --> 00:36:10,860
language to any other language and your

00:36:08,970 --> 00:36:13,560
entities are intelligent objects so you

00:36:10,860 --> 00:36:15,720
can actually call the methods on them

00:36:13,560 --> 00:36:17,400
for getting the translations for dealing

00:36:15,720 --> 00:36:22,850
with translation and in translations

00:36:17,400 --> 00:36:29,130
than anything so the next model is the

00:36:22,850 --> 00:36:31,410
config translation mode rubellite we

00:36:29,130 --> 00:36:34,040
have computed two kinds of configuration

00:36:31,410 --> 00:36:38,250
configuration configuration objects and

00:36:34,040 --> 00:36:41,070
configuration entities for those objects

00:36:38,250 --> 00:36:43,350
which we can have a lot of them and we

00:36:41,070 --> 00:36:45,030
don't know how much like languages and

00:36:43,350 --> 00:36:48,960
we are going to see how we can actually

00:36:45,030 --> 00:36:53,190
translate them so our configuration

00:36:48,960 --> 00:36:57,599
store in Jamel files and what we do here

00:36:53,190 --> 00:36:59,430
is that we have or any a property in our

00:36:57,599 --> 00:37:03,420
configuration which is the land code and

00:36:59,430 --> 00:37:10,609
there any configuration object will have

00:37:03,420 --> 00:37:10,609
the land code this is in and for knowing

00:37:11,180 --> 00:37:16,140
for making our config transitive all

00:37:14,369 --> 00:37:19,859
what we need is to provide a schema

00:37:16,140 --> 00:37:23,520
which it was introduced in Drupal 8

00:37:19,859 --> 00:37:25,680
actually for translating your for

00:37:23,520 --> 00:37:28,260
knowing how to translate or dealing with

00:37:25,680 --> 00:37:30,750
languages in your configuration but it

00:37:28,260 --> 00:37:34,349
has actually use for for a lot of other

00:37:30,750 --> 00:37:36,330
things so here we are defining a config

00:37:34,349 --> 00:37:39,210
object and then we say that it has a

00:37:36,330 --> 00:37:42,359
long cold and these are the data types

00:37:39,210 --> 00:37:43,859
from the core so we have a LAN code

00:37:42,359 --> 00:37:46,730
which will be a string and it's the

00:37:43,859 --> 00:37:53,520
language code and then we have another

00:37:46,730 --> 00:37:55,170
type of data type which is a text which

00:37:53,520 --> 00:37:58,230
it will be a string that it's actually

00:37:55,170 --> 00:38:00,960
translate able another thing that this

00:37:58,230 --> 00:38:02,599
config schema provides is that when you

00:38:00,960 --> 00:38:05,730
are calling your objects from PHP

00:38:02,599 --> 00:38:07,859
because you have the config a schema do

00:38:05,730 --> 00:38:11,280
you know the data types that this data

00:38:07,859 --> 00:38:14,690
sea is in so if you have an integer in

00:38:11,280 --> 00:38:18,030
your config and you call you load your

00:38:14,690 --> 00:38:20,790
configuration from PHP it will be

00:38:18,030 --> 00:38:24,660
automatically cast in PHP so you already

00:38:20,790 --> 00:38:28,170
will happen into you so for creating

00:38:24,660 --> 00:38:30,720
your own schemas you need to create a in

00:38:28,170 --> 00:38:35,070
the folder config a schema for model you

00:38:30,720 --> 00:38:36,740
create the schema general file and here

00:38:35,070 --> 00:38:39,630
do you define the type of your

00:38:36,740 --> 00:38:41,940
configuration fields so here we are

00:38:39,630 --> 00:38:43,589
defining we are defining the system

00:38:41,940 --> 00:38:46,020
maintenance subject and we are saying

00:38:43,589 --> 00:38:50,880
that it's a config object this means

00:38:46,020 --> 00:38:54,420
that it will have a LAN code and then we

00:38:50,880 --> 00:38:56,640
are defining its attributes that they

00:38:54,420 --> 00:38:57,990
are in the that they are in this config

00:38:56,640 --> 00:39:01,349
object like in this case we have a

00:38:57,990 --> 00:39:02,480
message and we know its attacks so it

00:39:01,349 --> 00:39:07,760
will be

00:39:02,480 --> 00:39:10,210
table stream so our config will look

00:39:07,760 --> 00:39:15,350
like this we will have the message and

00:39:10,210 --> 00:39:18,560
we will have a long code and then when

00:39:15,350 --> 00:39:20,960
we translate these in our config folder

00:39:18,560 --> 00:39:23,900
we will have a language folder and then

00:39:20,960 --> 00:39:27,410
we will have a daylong a folder for its

00:39:23,900 --> 00:39:30,850
length why for for it language with the

00:39:27,410 --> 00:39:35,510
lankan as a name and then we will have a

00:39:30,850 --> 00:39:38,390
file with the same name and the

00:39:35,510 --> 00:39:41,330
properties that we are going to

00:39:38,390 --> 00:39:43,520
translate are the only ones that we will

00:39:41,330 --> 00:39:45,260
have there so if we have a hundred

00:39:43,520 --> 00:39:48,109
inside and we have the system

00:39:45,260 --> 00:39:51,410
maintenance a message we will have a

00:39:48,109 --> 00:39:54,410
language hu system maintenance channel

00:39:51,410 --> 00:39:59,330
where we will have this message

00:39:54,410 --> 00:40:03,890
translated same for Italian so how we

00:39:59,330 --> 00:40:06,140
deal with this configuration so when we

00:40:03,890 --> 00:40:08,660
want to know the configuration of our

00:40:06,140 --> 00:40:11,660
side we have the Drupal config service

00:40:08,660 --> 00:40:13,400
and we pass there the name of the

00:40:11,660 --> 00:40:15,530
configuration object that we want to

00:40:13,400 --> 00:40:17,540
receive and then we can access their

00:40:15,530 --> 00:40:19,970
properties with with the get method so

00:40:17,540 --> 00:40:26,030
we can get the message from the system

00:40:19,970 --> 00:40:29,240
maintenance object and if we have

00:40:26,030 --> 00:40:32,930
language of a right they will apply a

00:40:29,240 --> 00:40:35,300
superb it so if we have this config

00:40:32,930 --> 00:40:40,820
object is translating and we are in a

00:40:35,300 --> 00:40:42,560
and we are in a Hungarian in the and the

00:40:40,820 --> 00:40:45,530
language negotiated for Paige was

00:40:42,560 --> 00:40:49,100
Hungarian we will get the message in

00:40:45,530 --> 00:40:51,710
Hungarian so this is how you usually

00:40:49,100 --> 00:40:55,340
will use your configuration from your

00:40:51,710 --> 00:40:57,440
system if you have a settings PHP and

00:40:55,340 --> 00:41:00,200
you are overriding some config there and

00:40:57,440 --> 00:41:05,060
you call the global config method you

00:41:00,200 --> 00:41:07,100
will get this over rights apply to so

00:41:05,060 --> 00:41:09,410
there are different kinds of

00:41:07,100 --> 00:41:12,200
configurations that you may want to deal

00:41:09,410 --> 00:41:16,570
with so because this drupal config

00:41:12,200 --> 00:41:16,570
method has the override supplied

00:41:17,170 --> 00:41:23,390
we don't actually we cannot actually

00:41:20,060 --> 00:41:26,839
edit them it's mostly for reading

00:41:23,390 --> 00:41:28,579
computation about the system but if we

00:41:26,839 --> 00:41:30,589
want maybe we want to get the

00:41:28,579 --> 00:41:32,300
configuration in a given language that

00:41:30,589 --> 00:41:35,780
we want we know which language

00:41:32,300 --> 00:41:37,849
configuration we want so then what we

00:41:35,780 --> 00:41:41,089
need to use is the language manager with

00:41:37,849 --> 00:41:45,970
knows about languages and it will we can

00:41:41,089 --> 00:41:45,970
call the gate configure barrel language

00:41:46,119 --> 00:41:51,710
for for storing the language that we are

00:41:49,579 --> 00:41:53,630
currently using then you can set a

00:41:51,710 --> 00:41:55,849
different one if we want to use a

00:41:53,630 --> 00:41:59,930
concrete one like here set config of our

00:41:55,849 --> 00:42:05,450
language and then calling the Drupal

00:41:59,930 --> 00:42:08,540
config will actually give us the

00:42:05,450 --> 00:42:11,720
configuration for a Hungarian for the

00:42:08,540 --> 00:42:15,589
Hungarian side so this can be quite

00:42:11,720 --> 00:42:19,329
useful if we are sending emails so the

00:42:15,589 --> 00:42:22,640
user may be visiting maybe animist an

00:42:19,329 --> 00:42:26,329
admin is visiting your site your admin

00:42:22,640 --> 00:42:29,780
interface in English and its mailing

00:42:26,329 --> 00:42:33,619
users but you want the users to get the

00:42:29,780 --> 00:42:35,030
emails in the language they prefer so

00:42:33,619 --> 00:42:38,180
this way you can actually get the

00:42:35,030 --> 00:42:41,660
language from the user object set the

00:42:38,180 --> 00:42:44,690
config of a right then call the conflict

00:42:41,660 --> 00:42:46,609
for getting the string of the email that

00:42:44,690 --> 00:42:49,280
you want to send and you will get a

00:42:46,609 --> 00:42:52,010
translated version of this email for

00:42:49,280 --> 00:42:53,780
that user preference and then you can

00:42:52,010 --> 00:42:57,890
set it back to the original language

00:42:53,780 --> 00:42:59,660
that you were using so we have three

00:42:57,890 --> 00:43:02,660
different ways for dealing with

00:42:59,660 --> 00:43:05,210
languages with configuration the first

00:43:02,660 --> 00:43:07,930
one is the system drupal comfy this

00:43:05,210 --> 00:43:11,450
provides your configuration with area

00:43:07,930 --> 00:43:14,839
override apply so they I applied you

00:43:11,450 --> 00:43:17,480
will have like a priority system so any

00:43:14,839 --> 00:43:20,630
kind of every ride will be overriding

00:43:17,480 --> 00:43:24,349
the previous one so you pile your

00:43:20,630 --> 00:43:27,050
configuration values then we have the

00:43:24,349 --> 00:43:29,359
Drupal config factory get any table for

00:43:27,050 --> 00:43:32,720
getting the

00:43:29,359 --> 00:43:35,720
the current configuration in the arena

00:43:32,720 --> 00:43:38,630
language so now we're let's apply this

00:43:35,720 --> 00:43:42,319
is useful mostly if you are creating

00:43:38,630 --> 00:43:45,739
your own config forms and then we have a

00:43:42,319 --> 00:43:48,559
as we saw we have another method for

00:43:45,739 --> 00:43:50,960
getting a concrete configuration object

00:43:48,559 --> 00:43:53,630
if we know the language we want from it

00:43:50,960 --> 00:43:55,700
which is the Drupal language manager get

00:43:53,630 --> 00:43:58,069
language configure be right so we can

00:43:55,700 --> 00:44:01,339
get the override the config with all the

00:43:58,069 --> 00:44:05,329
overrides we can get the config as role

00:44:01,339 --> 00:44:08,089
data with Nova right or we can actually

00:44:05,329 --> 00:44:14,509
ask the system for getting a concrete of

00:44:08,089 --> 00:44:16,220
a right so summarizing the config

00:44:14,509 --> 00:44:18,170
translation module allows to translate

00:44:16,220 --> 00:44:22,569
your configuration from any language to

00:44:18,170 --> 00:44:25,579
any other language and indifference with

00:44:22,569 --> 00:44:28,309
the content translation model when you

00:44:25,579 --> 00:44:33,220
have intelligent objects here you mostly

00:44:28,309 --> 00:44:35,390
have arise that they are if there are

00:44:33,220 --> 00:44:38,480
configurable rights they are going to be

00:44:35,390 --> 00:44:42,579
merged but you are actually using arise

00:44:38,480 --> 00:44:47,650
so the api's are maybe not that

00:44:42,579 --> 00:44:47,650
beautiful as the content selection ones

00:44:48,099 --> 00:44:54,680
so this was I hope you like the

00:44:52,069 --> 00:44:56,599
different API is that we have this was

00:44:54,680 --> 00:44:58,779
the work of a lot of people so please

00:44:56,599 --> 00:45:03,049
thank them if you find them around and

00:44:58,779 --> 00:45:05,239
thanks also to gaba hoyt see which part

00:45:03,049 --> 00:45:06,859
of this presentation is based in a

00:45:05,239 --> 00:45:10,130
previous presentation and he is the

00:45:06,859 --> 00:45:13,400
initiative lead which did an amazing

00:45:10,130 --> 00:45:18,980
work on making language is better in

00:45:13,400 --> 00:45:22,369
Drupal 8 and if you like it but maybe

00:45:18,980 --> 00:45:24,829
you want to improve it or maybe using

00:45:22,369 --> 00:45:26,569
that it could be quite better you are

00:45:24,829 --> 00:45:29,720
welcome to join us in the contribution

00:45:26,569 --> 00:45:32,329
spins there will be workshop for first

00:45:29,720 --> 00:45:34,549
time sprinters so anyone is welcome no

00:45:32,329 --> 00:45:37,789
matter your experience so please drop by

00:45:34,549 --> 00:45:42,109
and there will be mentor course paint

00:45:37,789 --> 00:45:42,550
where we can help each other to improve

00:45:42,109 --> 00:45:45,910
trouble

00:45:42,550 --> 00:45:49,900
and the general spins too if you already

00:45:45,910 --> 00:45:58,030
know what to work on so that was it

00:45:49,900 --> 00:46:01,290
thank you very much for attending if

00:45:58,030 --> 00:46:06,850
there are questions there is Mike there

00:46:01,290 --> 00:46:09,760
so hello hello I have a question

00:46:06,850 --> 00:46:11,770
concerning performance do you know how

00:46:09,760 --> 00:46:14,830
does it scale when you enable a couple

00:46:11,770 --> 00:46:19,090
of dozens of languages and Wendy work

00:46:14,830 --> 00:46:20,710
extensively with provisions how does it

00:46:19,090 --> 00:46:22,690
work in the background and in a database

00:46:20,710 --> 00:46:24,430
you notice the node load take them

00:46:22,690 --> 00:46:26,950
longer does it load every all

00:46:24,430 --> 00:46:29,370
translation at once or does it only load

00:46:26,950 --> 00:46:34,870
on the train the language is on demand

00:46:29,370 --> 00:46:36,940
so the question so the translations the

00:46:34,870 --> 00:46:38,740
different revisions so when you load a

00:46:36,940 --> 00:46:41,770
note you are actually loading the last

00:46:38,740 --> 00:46:45,010
revision that is published and for that

00:46:41,770 --> 00:46:49,420
and you are actually loading the current

00:46:45,010 --> 00:46:51,790
language of the language negotiated for

00:46:49,420 --> 00:46:54,670
that page and you are getting that

00:46:51,790 --> 00:46:57,700
object and when you access a different

00:46:54,670 --> 00:47:00,400
translation these are actually query to

00:46:57,700 --> 00:47:03,250
a system so when you load a note you are

00:47:00,400 --> 00:47:05,200
not loading all the translations but you

00:47:03,250 --> 00:47:09,610
are loading the current language one or

00:47:05,200 --> 00:47:13,410
the one that you are asking for does

00:47:09,610 --> 00:47:13,410
that answer your question thanks

00:47:17,319 --> 00:47:25,640
so related to that does that mean that

00:47:20,359 --> 00:47:29,839
the the cash tag metadata includes the

00:47:25,640 --> 00:47:32,239
language component yes when you load

00:47:29,839 --> 00:47:36,799
okay so the question is about how the

00:47:32,239 --> 00:47:39,109
caching caching works in ruble so in

00:47:36,799 --> 00:47:42,799
Drupal 8 we have this new caching

00:47:39,109 --> 00:47:45,799
metadata which allows you to provide

00:47:42,799 --> 00:47:50,599
different tags that you can then

00:47:45,799 --> 00:47:53,569
invalidate so when you load an old this

00:47:50,599 --> 00:47:57,319
node is actually cached and the question

00:47:53,569 --> 00:47:59,689
is how language applies to that so when

00:47:57,319 --> 00:48:01,369
you are when you are loading an old the

00:47:59,689 --> 00:48:05,119
language that you are requesting is

00:48:01,369 --> 00:48:08,689
actually provided as a cache tag so you

00:48:05,119 --> 00:48:11,390
can invalidate you can actually cash

00:48:08,689 --> 00:48:12,829
your notes by the language you are

00:48:11,390 --> 00:48:15,439
requesting and then you can invalidate

00:48:12,829 --> 00:48:20,439
the concrete translation that you want

00:48:15,439 --> 00:48:20,439
to thank you

00:48:22,930 --> 00:48:28,359
so if there are not more question thank

00:48:26,650 --> 00:48:30,420
you for coming please evaluate the

00:48:28,359 --> 00:48:33,540
chassis on and enjoy the conference

00:48:30,420 --> 00:48:33,540

YouTube URL: https://www.youtube.com/watch?v=ldwKLMyEA30


