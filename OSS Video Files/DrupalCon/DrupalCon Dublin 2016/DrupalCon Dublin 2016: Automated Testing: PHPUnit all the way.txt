Title: DrupalCon Dublin 2016: Automated Testing: PHPUnit all the way
Publication date: 2016-09-27
Playlist: DrupalCon Dublin 2016
Description: 
	This core conversation will provide some insights into Drupal coreâ€™s testing strategies, what works well and what we are in the process of improving. One major effort is to convert our whole test code and infrastructure to use PHPUnit and to deprecate SimpleTest. This session is targeted at core and contrib developers alike, since the same testing knowledge can be applied to contributed modules as well. We expect that you have worked on a test case at least once, but will explain PHPUnit and concepts otherwise.

We will talk about:

Different types of tests: unit tests vs. integration tests vs. functional tests vs behavioral tests vs. white box tests vs. black box tests

The case for PHPUnit and why we move away from SimpleTest

Explaining test flavors in Drupal: Unit tests, Kernel tests, Browser tests, Javascript Browser tests

Converting SimpleTests to Browser tests

Assertions: checking the outcome of your scenario

Strict assertions in PHPUnit vs. lax assertions in SimpleTest

Mocking in unit tests: advantages of using the Prophecy framework (part of PHPUnit)

Test fixtures and the @dataProvider annotation concept of PHPUnit

Test predictability: Avoiding random data in tests

Test simplicity: avoiding complex logic in tests, hard code everything

Test abstractions: how much is too much?

t() calls and translations in tests

Testing exceptions: @expectedException annotations and why they are deprecated
Captions: 
	00:00:00,050 --> 00:00:07,259
so I think we can start hello everybody

00:00:03,179 --> 00:00:08,960
get in take your seats we are going to

00:00:07,259 --> 00:00:11,460
talk about automated testing today

00:00:08,960 --> 00:00:13,110
especially about the phpunit framework

00:00:11,460 --> 00:00:17,490
which we are using in Drupal core to run

00:00:13,110 --> 00:00:19,439
tests my name is Klaus Buda I work as a

00:00:17,490 --> 00:00:21,720
software engineer in Vienna for Epico

00:00:19,439 --> 00:00:24,300
it's my company doing job boards based

00:00:21,720 --> 00:00:25,830
on Drupal and when the drupal security

00:00:24,300 --> 00:00:27,539
team to a couple of other stuff in

00:00:25,830 --> 00:00:29,550
drupal.org maintained a couple of

00:00:27,539 --> 00:00:31,650
modules like the coda Mario's the routes

00:00:29,550 --> 00:00:33,840
module and recently I've been helping

00:00:31,650 --> 00:00:35,370
out with the PHP unit initiative it's a

00:00:33,840 --> 00:00:39,090
co initiative that we just launched

00:00:35,370 --> 00:00:40,620
yesterday yeah I'm Daniel Vina I'm

00:00:39,090 --> 00:00:42,780
working for Chapter three

00:00:40,620 --> 00:00:45,000
in San Francisco I'm maintaining a

00:00:42,780 --> 00:00:48,149
couple of subsystems in core of which

00:00:45,000 --> 00:00:49,920
use the menu system is I'm involved in

00:00:48,149 --> 00:00:51,809
the peach community initiatives as well

00:00:49,920 --> 00:00:55,680
and I'm also part of the API first

00:00:51,809 --> 00:00:57,059
initiative okay so we get started

00:00:55,680 --> 00:00:59,039
quickly because we have a lot of ground

00:00:57,059 --> 00:01:01,140
to cover first we are going to talk a

00:00:59,039 --> 00:01:03,809
bit about the theoretical background of

00:01:01,140 --> 00:01:05,580
automated testing what is it actually so

00:01:03,809 --> 00:01:06,869
if you consider you have a website and

00:01:05,580 --> 00:01:08,490
you want to make sure it actually works

00:01:06,869 --> 00:01:10,950
then what you can do is build a

00:01:08,490 --> 00:01:13,590
checklist of things that should be there

00:01:10,950 --> 00:01:15,570
and should be working for example that

00:01:13,590 --> 00:01:17,009
there is a login link on your page so

00:01:15,570 --> 00:01:18,930
you write it down check that there is a

00:01:17,009 --> 00:01:22,320
login link on you on the front page and

00:01:18,930 --> 00:01:24,030
then you do changes to your sites it's

00:01:22,320 --> 00:01:26,610
also known as development deploy them to

00:01:24,030 --> 00:01:28,200
a site and of course you want to check

00:01:26,610 --> 00:01:32,220
your site to the site again to make sure

00:01:28,200 --> 00:01:33,659
that it has not been malformed that is

00:01:32,220 --> 00:01:36,090
the works that the login link is still

00:01:33,659 --> 00:01:38,159
there and you can do this with manual

00:01:36,090 --> 00:01:39,630
testing like a human then go through the

00:01:38,159 --> 00:01:41,310
checklist and then make sure that

00:01:39,630 --> 00:01:43,590
everything is still working again this

00:01:41,310 --> 00:01:45,659
is how we do it when there are no other

00:01:43,590 --> 00:01:47,490
automated tests of course this is a lot

00:01:45,659 --> 00:01:49,100
of work because human has to go through

00:01:47,490 --> 00:01:51,299
many things this is tedious because

00:01:49,100 --> 00:01:52,380
humans easily get bored and they make

00:01:51,299 --> 00:01:54,030
mistakes when they go through the

00:01:52,380 --> 00:01:56,399
checklist so it's not ideal

00:01:54,030 --> 00:01:58,530
what we can do instead is automated

00:01:56,399 --> 00:02:00,420
testing so you have this checklist one

00:01:58,530 --> 00:02:02,040
two what you want to make sure that your

00:02:00,420 --> 00:02:03,360
site delivers what the features of your

00:02:02,040 --> 00:02:05,340
site are and you write them down as

00:02:03,360 --> 00:02:08,099
executable code and that is automated

00:02:05,340 --> 00:02:09,780
testing them for example instead of a

00:02:08,099 --> 00:02:11,700
human checking that there is a login

00:02:09,780 --> 00:02:13,120
link on the front page your code does it

00:02:11,700 --> 00:02:16,090
for you your test code that you

00:02:13,120 --> 00:02:17,620
written then you do the changes also

00:02:16,090 --> 00:02:19,629
known as development your site changes

00:02:17,620 --> 00:02:21,340
then you can execute the tests again and

00:02:19,629 --> 00:02:22,930
when they are green you know at least

00:02:21,340 --> 00:02:25,720
the login link on the front page still

00:02:22,930 --> 00:02:27,519
works I'm saying at least here because

00:02:25,720 --> 00:02:30,580
with automated testing you never get

00:02:27,519 --> 00:02:32,379
100% coverage right you can try to get

00:02:30,580 --> 00:02:34,030
us as much coverage for your application

00:02:32,379 --> 00:02:36,790
as you can for it's much much features

00:02:34,030 --> 00:02:38,230
as you can but there's only so much that

00:02:36,790 --> 00:02:42,849
you can do to make sure that something

00:02:38,230 --> 00:02:44,830
works so you can even go further and run

00:02:42,849 --> 00:02:46,599
your test code in regular intervals and

00:02:44,830 --> 00:02:48,220
which means you automate your test runs

00:02:46,599 --> 00:02:49,750
you can for example random once per day

00:02:48,220 --> 00:02:51,519
and does he arm everything is still

00:02:49,750 --> 00:02:53,260
working or you can run them whenever

00:02:51,519 --> 00:02:55,630
somebody pushes to the branch run them

00:02:53,260 --> 00:02:57,250
up that that change that git commit

00:02:55,630 --> 00:02:59,590
didn't break anything we are still good

00:02:57,250 --> 00:03:01,120
everything is still great and you can

00:02:59,590 --> 00:03:03,819
even do continuous integration which

00:03:01,120 --> 00:03:05,110
means I'm somebody pushes stuff to the

00:03:03,819 --> 00:03:06,819
master branch it's get tested

00:03:05,110 --> 00:03:09,040
automatically when everything is green

00:03:06,819 --> 00:03:10,989
it gets deployed automatically and you

00:03:09,040 --> 00:03:13,900
can do this really to it to a high

00:03:10,989 --> 00:03:15,849
extent here's an example of what the

00:03:13,900 --> 00:03:17,709
output of page but unit looks like you

00:03:15,849 --> 00:03:19,510
see the dots that are the test cases

00:03:17,709 --> 00:03:22,780
that run until in the end to get a final

00:03:19,510 --> 00:03:24,760
report that everything is okay or not so

00:03:22,780 --> 00:03:27,069
this is kind of a bit of Inception so

00:03:24,760 --> 00:03:29,709
you write the program and then you write

00:03:27,069 --> 00:03:31,329
another program and use a program to

00:03:29,709 --> 00:03:33,519
test the program so it's really a lot of

00:03:31,329 --> 00:03:34,660
programming going on and what I want to

00:03:33,519 --> 00:03:36,340
say with this slide is you shouldn't

00:03:34,660 --> 00:03:37,989
underestimate this writing automated

00:03:36,340 --> 00:03:40,389
test is a bit of work and it's a bit of

00:03:37,989 --> 00:03:41,709
effort I mean it pay software your most

00:03:40,389 --> 00:03:42,970
important features but you should keep

00:03:41,709 --> 00:03:45,160
in mind that this doesn't come for free

00:03:42,970 --> 00:03:46,840
you need to be able to to sell this to

00:03:45,160 --> 00:03:48,160
your client included in your price if

00:03:46,840 --> 00:03:51,609
you have actually time to work on

00:03:48,160 --> 00:03:52,989
automated tests it's not for free there

00:03:51,609 --> 00:03:55,389
are different testing levels that we

00:03:52,989 --> 00:03:58,030
have to consider when we write automated

00:03:55,389 --> 00:03:59,829
tests the most important three I have

00:03:58,030 --> 00:04:02,079
listed here those are our unit tests

00:03:59,829 --> 00:04:05,200
integration tests and system level or

00:04:02,079 --> 00:04:07,150
functional level tests and unit tests

00:04:05,200 --> 00:04:09,430
they try to test the smallest possible

00:04:07,150 --> 00:04:12,370
unit in isolations for example PHP

00:04:09,430 --> 00:04:15,940
functions or PHP methods or even whole

00:04:12,370 --> 00:04:17,739
classes the advantages of that is that

00:04:15,940 --> 00:04:19,959
they verify that individual parts

00:04:17,739 --> 00:04:21,549
actually work which also means I can

00:04:19,959 --> 00:04:24,250
quickly track down the problem if the

00:04:21,549 --> 00:04:26,230
tests fail PHP unit will tell me this

00:04:24,250 --> 00:04:28,090
function didn't

00:04:26,230 --> 00:04:29,530
deliver the output as we have expected

00:04:28,090 --> 00:04:31,210
it in the test case so I know how this

00:04:29,530 --> 00:04:33,340
function is at fault and can fix the

00:04:31,210 --> 00:04:35,680
problem there I don't have to do any

00:04:33,340 --> 00:04:38,560
system setup because I'm only testing

00:04:35,680 --> 00:04:40,420
one part of the system which has ice has

00:04:38,560 --> 00:04:41,950
been isolated so I don't need to setup a

00:04:40,420 --> 00:04:44,410
database I don't need to setup a browser

00:04:41,950 --> 00:04:45,850
or anything else I can just run their

00:04:44,410 --> 00:04:49,480
unit test that's also why they are very

00:04:45,850 --> 00:04:51,700
fast there are also of course a couple

00:04:49,480 --> 00:04:53,770
of disadvantages so whenever you change

00:04:51,700 --> 00:04:55,390
your code very heavily which is called a

00:04:53,770 --> 00:04:56,620
refactoring so maybe that function

00:04:55,390 --> 00:04:58,300
doesn't even exist anymore

00:04:56,620 --> 00:04:59,560
of course your tests testing that

00:04:58,300 --> 00:05:01,060
function will also fail because the

00:04:59,560 --> 00:05:05,260
function is not there so you also have

00:05:01,060 --> 00:05:07,840
to adapt your test cases it can be

00:05:05,260 --> 00:05:10,900
complicated to provide fake objects

00:05:07,840 --> 00:05:12,610
which is quite mocking and to your class

00:05:10,900 --> 00:05:14,560
that you want to test so your class of

00:05:12,610 --> 00:05:17,410
course calls out our subsystem it wants

00:05:14,560 --> 00:05:19,060
to send an email or it wants to do some

00:05:17,410 --> 00:05:21,070
logging so it needs those dependencies

00:05:19,060 --> 00:05:23,710
and mocked into the classroom they can

00:05:21,070 --> 00:05:25,600
actually call it so in some cases we

00:05:23,710 --> 00:05:27,220
focus as a class as many dependencies

00:05:25,600 --> 00:05:29,440
you will get into complicated mocking

00:05:27,220 --> 00:05:30,430
which can be a bit annoying and of

00:05:29,440 --> 00:05:31,810
course in the end that's the biggest

00:05:30,430 --> 00:05:33,430
downside of unit tests you have no

00:05:31,810 --> 00:05:35,530
actual guarantee that your whole system

00:05:33,430 --> 00:05:37,450
actually works you verified that single

00:05:35,530 --> 00:05:39,640
components work but who knows if the

00:05:37,450 --> 00:05:41,590
whole system works that's why you should

00:05:39,640 --> 00:05:44,230
also have integration level tests they

00:05:41,590 --> 00:05:46,240
do tests on components so not a single

00:05:44,230 --> 00:05:48,610
class but how components interact with

00:05:46,240 --> 00:05:51,130
each other for example if you think of

00:05:48,610 --> 00:05:52,390
2.8 you have a plug-in you test with an

00:05:51,130 --> 00:05:53,860
integration test that the plugin is

00:05:52,390 --> 00:05:56,320
actually found by the plug-in manager

00:05:53,860 --> 00:05:57,850
that can be instantiated and that the

00:05:56,320 --> 00:05:59,620
plug-in actually does something this is

00:05:57,850 --> 00:06:01,030
more than a unit test this is tests

00:05:59,620 --> 00:06:04,090
integration with the drupal plugin

00:06:01,030 --> 00:06:06,580
system itself so the advantages of that

00:06:04,090 --> 00:06:08,680
that you verify a bigger part of your

00:06:06,580 --> 00:06:11,260
application which means not only

00:06:08,680 --> 00:06:13,810
someone's small parts but unit tests but

00:06:11,260 --> 00:06:16,240
even more is verified to be working and

00:06:13,810 --> 00:06:17,920
it's also somewhat easy to locate backs

00:06:16,240 --> 00:06:19,420
as you know IDEs in this component it's

00:06:17,920 --> 00:06:21,130
in a major component for example if a

00:06:19,420 --> 00:06:22,840
test that component so that's also

00:06:21,130 --> 00:06:25,510
pretty good of course there are some

00:06:22,840 --> 00:06:27,340
disadvantages it's a bit slower than M

00:06:25,510 --> 00:06:28,810
unit tests depending on what you need

00:06:27,340 --> 00:06:31,300
your integration test to do you probably

00:06:28,810 --> 00:06:32,800
need a database or some discovery of

00:06:31,300 --> 00:06:33,400
plugins or whatever so there is some

00:06:32,800 --> 00:06:35,080
setups

00:06:33,400 --> 00:06:37,840
required which also makes the test

00:06:35,080 --> 00:06:39,010
execution slower and we still have to

00:06:37,840 --> 00:06:39,849
down set that it doesn't actually

00:06:39,010 --> 00:06:41,649
guarantee that

00:06:39,849 --> 00:06:43,289
and user-facing feature of your drupal

00:06:41,649 --> 00:06:46,029
project of a website actually work so

00:06:43,289 --> 00:06:47,979
what can we do about that hmm there's

00:06:46,029 --> 00:06:50,889
the level of functional level testing

00:06:47,979 --> 00:06:53,349
and this tests the whole the complete

00:06:50,889 --> 00:06:56,080
system the pros for that we can verify

00:06:53,349 --> 00:06:57,669
that what the user sees we replicated in

00:06:56,080 --> 00:06:59,499
a test environment and verify that this

00:06:57,669 --> 00:07:02,259
actually works so this is this is really

00:06:59,499 --> 00:07:04,089
good and it also works that we when we

00:07:02,259 --> 00:07:06,009
refactor code so everything every

00:07:04,089 --> 00:07:08,080
implementation details are changed we

00:07:06,009 --> 00:07:10,389
can still execute the tests most of the

00:07:08,080 --> 00:07:12,309
time and the h2 confirm yes when I go to

00:07:10,389 --> 00:07:14,349
this page and requested it still returns

00:07:12,309 --> 00:07:16,269
the same output this also helped us to

00:07:14,349 --> 00:07:17,949
make the big migration of Trouper 7 to

00:07:16,269 --> 00:07:20,349
Drupal 8 we had a lot of those

00:07:17,949 --> 00:07:23,409
functional tests that verify that notes

00:07:20,349 --> 00:07:25,389
still work while we exchange the

00:07:23,409 --> 00:07:27,399
complete architecture of Trouper 7 and

00:07:25,389 --> 00:07:29,199
swapped in the Drupal 8 codebase that we

00:07:27,399 --> 00:07:31,599
have right now we still could verify

00:07:29,199 --> 00:07:33,399
with this test that groupers do delivers

00:07:31,599 --> 00:07:35,139
its features of course there are a lot

00:07:33,399 --> 00:07:37,209
of cons too to functional level tests

00:07:35,139 --> 00:07:38,529
they are very slow because it has to set

00:07:37,209 --> 00:07:40,479
up a web server you need the database

00:07:38,529 --> 00:07:42,009
and you need a browser and you need to

00:07:40,479 --> 00:07:43,779
install Drupal for each test runs so

00:07:42,009 --> 00:07:45,129
this is a lot of work heavy system setup

00:07:43,779 --> 00:07:47,529
which means you have a lot of moving

00:07:45,129 --> 00:07:50,169
parts which means you can have random

00:07:47,529 --> 00:07:51,699
test failures right suddenly on your

00:07:50,169 --> 00:07:54,300
test system the disk is full this

00:07:51,699 --> 00:07:57,699
happens on the test spot all the time or

00:07:54,300 --> 00:08:00,069
my square goes down or the browser has a

00:07:57,699 --> 00:08:02,649
timeout or whatever there are several

00:08:00,069 --> 00:08:04,599
moving parts that can go wrong and it's

00:08:02,649 --> 00:08:07,269
also how to locate the origins of back

00:08:04,599 --> 00:08:08,800
right if some page doesn't deliver this

00:08:07,269 --> 00:08:10,389
which model is responsible what is

00:08:08,800 --> 00:08:12,279
actually broken in my code I need to

00:08:10,389 --> 00:08:14,619
then debug this to actually find out

00:08:12,279 --> 00:08:15,999
where something is broken contrary to

00:08:14,619 --> 00:08:17,800
that unit tests are much better because

00:08:15,999 --> 00:08:20,619
they they tell you where exactly the

00:08:17,800 --> 00:08:22,419
problem is in which function and yeah as

00:08:20,619 --> 00:08:24,429
I said prone to random test phase or

00:08:22,419 --> 00:08:25,990
kind of things can go wrong and stay

00:08:24,429 --> 00:08:28,240
also hard to change because they are so

00:08:25,990 --> 00:08:31,449
complicated to set up it's not not an

00:08:28,240 --> 00:08:33,789
easy task to maintain function level

00:08:31,449 --> 00:08:36,130
tests that being said it's important

00:08:33,789 --> 00:08:37,479
that you have all three so if you want

00:08:36,130 --> 00:08:39,039
to have really good coverage for your

00:08:37,479 --> 00:08:41,880
application it's important that we have

00:08:39,039 --> 00:08:44,470
these three levels so that you can track

00:08:41,880 --> 00:08:46,360
errors down fast but also have a

00:08:44,470 --> 00:08:49,660
complete test of the user facing

00:08:46,360 --> 00:08:52,630
features but there's a whole test

00:08:49,660 --> 00:08:53,529
universe out there right so we we

00:08:52,630 --> 00:08:55,300
distinguish between

00:08:53,529 --> 00:08:56,949
white box and black box testing you

00:08:55,300 --> 00:08:58,839
would say to unit tests a mostly white

00:08:56,949 --> 00:09:00,490
box testing because they know about the

00:08:58,839 --> 00:09:02,470
code flow they know about functions they

00:09:00,490 --> 00:09:04,360
know which code paths can be taken and

00:09:02,470 --> 00:09:06,459
the explicitly test for that versus

00:09:04,360 --> 00:09:09,399
black box testing which more is like the

00:09:06,459 --> 00:09:11,980
functional testing category where you

00:09:09,399 --> 00:09:14,079
test just the input and you provide an

00:09:11,980 --> 00:09:15,730
input and just test the output that is

00:09:14,079 --> 00:09:18,699
actually there that the HTML page is

00:09:15,730 --> 00:09:20,709
there there also other testing types for

00:09:18,699 --> 00:09:22,720
performance for security for sanity

00:09:20,709 --> 00:09:25,540
testing to make sure that Drupal even

00:09:22,720 --> 00:09:27,670
bootstraps sort of make sure that PHP

00:09:25,540 --> 00:09:29,559
doesn't throw fatal errors regression

00:09:27,670 --> 00:09:31,420
testing usability testing all kind of

00:09:29,559 --> 00:09:32,800
stuff that you can get into and there's

00:09:31,420 --> 00:09:34,870
also the discipline of desk turbine

00:09:32,800 --> 00:09:36,129
development which means when implemented

00:09:34,870 --> 00:09:38,170
feature you actually write the test

00:09:36,129 --> 00:09:39,759
first and then see it fail something is

00:09:38,170 --> 00:09:40,389
read so because we haven't written the

00:09:39,759 --> 00:09:42,189
equiment

00:09:40,389 --> 00:09:43,629
implementation yet then you're right

00:09:42,189 --> 00:09:46,300
implementation makes the test green

00:09:43,629 --> 00:09:48,249
again and level up your implementation

00:09:46,300 --> 00:09:49,779
one step after the other and then I

00:09:48,249 --> 00:09:51,579
already mentioned continuous testing and

00:09:49,779 --> 00:09:54,399
continuous delivery so automating your

00:09:51,579 --> 00:09:56,620
test runs give developers feedback early

00:09:54,399 --> 00:09:57,959
when they work in the feature branches

00:09:56,620 --> 00:10:00,220
or when they deploy stuff

00:09:57,959 --> 00:10:02,439
there's also property based testing

00:10:00,220 --> 00:10:04,209
where you analyze the data types that

00:10:02,439 --> 00:10:05,740
some function for example in your cool

00:10:04,209 --> 00:10:06,459
accepts and try to come up to

00:10:05,740 --> 00:10:08,319
auto-generate

00:10:06,459 --> 00:10:10,360
test sets that you pass in I'm just

00:10:08,319 --> 00:10:11,680
mentioning those here so they you can

00:10:10,360 --> 00:10:13,449
look them up if you find emitters

00:10:11,680 --> 00:10:15,250
interesting we will mostly talk about

00:10:13,449 --> 00:10:18,370
this three level things I explained

00:10:15,250 --> 00:10:20,500
earlier all right now that we have seen

00:10:18,370 --> 00:10:23,259
like a little bit of history and

00:10:20,500 --> 00:10:24,699
especially like here we about testing

00:10:23,259 --> 00:10:26,860
let's have a look how you can actually

00:10:24,699 --> 00:10:30,819
test stuff into a book and how we do it

00:10:26,860 --> 00:10:33,250
in core and in control so historically

00:10:30,819 --> 00:10:37,120
we used to use the testing framework

00:10:33,250 --> 00:10:39,970
called simple tests back in 2008 I guess

00:10:37,120 --> 00:10:44,529
it was like a good thing people used it

00:10:39,970 --> 00:10:47,079
in the entire PHP community you know we

00:10:44,529 --> 00:10:48,699
started to leverage it we started to

00:10:47,079 --> 00:10:51,639
write our tests as far as you mentioned

00:10:48,699 --> 00:10:52,360
like the entire corpus of 2 / 7 both was

00:10:51,639 --> 00:10:54,939
tested with it

00:10:52,360 --> 00:10:57,279
we wrote a good bunch of tests these

00:10:54,939 --> 00:11:00,129
poor nerd five tests I see not the white

00:10:57,279 --> 00:11:02,559
number we are actually having much much

00:11:00,129 --> 00:11:05,589
more tests but 405 tests are still

00:11:02,559 --> 00:11:06,590
simple tests and all those tests are

00:11:05,589 --> 00:11:09,110
those things

00:11:06,590 --> 00:11:11,660
functional system leather tests those

00:11:09,110 --> 00:11:14,480
allows as s clouds we mentioned those

00:11:11,660 --> 00:11:16,760
allowed us to we why drupal in a sense

00:11:14,480 --> 00:11:20,000
for tuple eight so it was we did great

00:11:16,760 --> 00:11:23,900
tool back then but you know life changes

00:11:20,000 --> 00:11:26,330
the world changes so what happened is

00:11:23,900 --> 00:11:28,310
that the entire PHP community moved to a

00:11:26,330 --> 00:11:35,800
different testing framework called PHP

00:11:28,310 --> 00:11:40,430
unit it's way more mature and advanced

00:11:35,800 --> 00:11:42,830
compared to simplest because like it has

00:11:40,430 --> 00:11:44,690
way more future features and especially

00:11:42,830 --> 00:11:47,180
it has way more integrations with other

00:11:44,690 --> 00:11:50,030
systems for example if you use Jenkins

00:11:47,180 --> 00:11:51,920
for your continuous delivery it is just

00:11:50,030 --> 00:11:53,480
there you have a plugin for PHP unit and

00:11:51,920 --> 00:11:55,280
you don't have to think about it the

00:11:53,480 --> 00:11:58,280
same with your integrated development

00:11:55,280 --> 00:12:01,340
environment huge like PHP song just have

00:11:58,280 --> 00:12:04,370
a PHP a PHP unit black and you can can

00:12:01,340 --> 00:12:07,010
just use it they are so tuples started

00:12:04,370 --> 00:12:10,130
in 2013 15 Ghia that's the future so

00:12:07,010 --> 00:12:12,710
let's go with it so it stills 2016 and

00:12:10,130 --> 00:12:14,630
we haven't finished to process it but we

00:12:12,710 --> 00:12:17,270
are in the process of doing so and that

00:12:14,630 --> 00:12:21,950
will be part of the of the talk later as

00:12:17,270 --> 00:12:26,390
of now we have 700 570 tests or I guess

00:12:21,950 --> 00:12:28,610
the numbers are wrong anyway but it is

00:12:26,390 --> 00:12:31,610
kind of like a comparison already and

00:12:28,610 --> 00:12:33,500
those levels those tests what we have in

00:12:31,610 --> 00:12:35,960
PHP unit now are unit tests and

00:12:33,500 --> 00:12:38,090
integration tests and most of the

00:12:35,960 --> 00:12:41,630
functional functional tests are still in

00:12:38,090 --> 00:12:44,720
simplest but yeah let's have a look how

00:12:41,630 --> 00:12:47,030
we actually do something so let's talk

00:12:44,720 --> 00:12:49,490
about unit tests first it's the

00:12:47,030 --> 00:12:52,760
foundation of testing I'm a huge fan of

00:12:49,490 --> 00:12:55,430
thinking of testing as a pyramid so you

00:12:52,760 --> 00:12:57,530
have a base layer of unit tests which

00:12:55,430 --> 00:13:00,080
cover a lot of your logic then you have

00:12:57,530 --> 00:13:01,490
like a smaller layer on top of it for

00:13:00,080 --> 00:13:05,150
the integration tests and you have a

00:13:01,490 --> 00:13:07,520
final step for the functional tests at

00:13:05,150 --> 00:13:10,300
the top which so you have way more unit

00:13:07,520 --> 00:13:14,690
tests ideally then functional tests

00:13:10,300 --> 00:13:18,680
anyway unit tests are tests in isolation

00:13:14,690 --> 00:13:20,510
you test just the component for itself

00:13:18,680 --> 00:13:22,880
and just how the compare

00:13:20,510 --> 00:13:24,920
works without thinking about the world

00:13:22,880 --> 00:13:26,990
otherwise this is really good for

00:13:24,920 --> 00:13:30,410
testing berchik so in case you have to

00:13:26,990 --> 00:13:33,860
like a complex logic if a and B or C or

00:13:30,410 --> 00:13:36,170
D then you can test all the cases which

00:13:33,860 --> 00:13:40,460
are possible and ensure that things are

00:13:36,170 --> 00:13:44,350
if you walk solid Ostrowski started to

00:13:40,460 --> 00:13:48,830
mention dependencies on in your code are

00:13:44,350 --> 00:13:50,930
problematic so if you for example send

00:13:48,830 --> 00:13:52,490
out an email you need you need something

00:13:50,930 --> 00:13:54,050
which sends out the email if you talk to

00:13:52,490 --> 00:13:56,600
the database you need somehow the

00:13:54,050 --> 00:13:59,390
database in your code that makes it

00:13:56,600 --> 00:14:05,840
harder to test because you need to fake

00:13:59,390 --> 00:14:08,480
those real things in order to avoid that

00:14:05,840 --> 00:14:12,470
there is like a entire thing called

00:14:08,480 --> 00:14:16,490
functional testing which is like a

00:14:12,470 --> 00:14:18,350
totally different broken way but we can

00:14:16,490 --> 00:14:20,120
leverage the totally in PHP by writing

00:14:18,350 --> 00:14:22,520
pure functions pure functions are

00:14:20,120 --> 00:14:24,440
functions which just have input and

00:14:22,520 --> 00:14:27,350
output and no side effects between that

00:14:24,440 --> 00:14:30,020
outside of that so in there happens

00:14:27,350 --> 00:14:31,610
something so you give inside give it

00:14:30,020 --> 00:14:33,580
some input and it between some output

00:14:31,610 --> 00:14:37,220
and that makes it really easy to test

00:14:33,580 --> 00:14:39,050
here's some nice comparison between unit

00:14:37,220 --> 00:14:41,060
tests and integration tests here's a

00:14:39,050 --> 00:14:45,110
unit test which perfectly works you know

00:14:41,060 --> 00:14:47,150
the look works SEC yeah it totally works

00:14:45,110 --> 00:14:51,650
exactly like the specification says so

00:14:47,150 --> 00:14:55,130
but SEC yeah in real life things are

00:14:51,650 --> 00:14:57,890
different so unit tests don't cut it

00:14:55,130 --> 00:14:59,390
completely but we need some kind of

00:14:57,890 --> 00:15:02,140
integration test but it's important to

00:14:59,390 --> 00:15:05,750
get that part of the lock done probably

00:15:02,140 --> 00:15:09,800
all right so let's have a look at an

00:15:05,750 --> 00:15:13,160
actual example so if you want to write a

00:15:09,800 --> 00:15:16,160
unit test you need to write a new PHP

00:15:13,160 --> 00:15:16,670
class in our case it's called HTML

00:15:16,160 --> 00:15:19,520
escape

00:15:16,670 --> 00:15:22,580
text taste test and this class has to

00:15:19,520 --> 00:15:26,240
extend a certain base class called unit

00:15:22,580 --> 00:15:28,670
test case in there you need to define

00:15:26,240 --> 00:15:31,610
the things you actually want to test

00:15:28,670 --> 00:15:32,780
these are a couple of test methods so a

00:15:31,610 --> 00:15:35,630
test method

00:15:32,780 --> 00:15:39,650
is a function which starts with the

00:15:35,630 --> 00:15:42,350
swing test and then some may so in this

00:15:39,650 --> 00:15:45,440
case it's test count this indicates that

00:15:42,350 --> 00:15:47,930
we are testing the count method this and

00:15:45,440 --> 00:15:49,840
covers here at the top also indicates

00:15:47,930 --> 00:15:52,310
that we are testing the count method and

00:15:49,840 --> 00:15:55,520
what we're doing in this test function

00:15:52,310 --> 00:15:57,380
is we're getting a string we're doing

00:15:55,520 --> 00:15:59,720
something here we create a new HTML

00:15:57,380 --> 00:16:02,270
escape text object doesn't matter what

00:15:59,720 --> 00:16:04,700
it's doing here it's just general idea

00:16:02,270 --> 00:16:06,500
we are doing something you see here this

00:16:04,700 --> 00:16:08,930
count method so we have this object we

00:16:06,500 --> 00:16:11,630
call the count method we expect it's

00:16:08,930 --> 00:16:15,380
doing something it has some result and

00:16:11,630 --> 00:16:19,340
we ensure that the result which is the

00:16:15,380 --> 00:16:22,270
right side of the equation in quotes is

00:16:19,340 --> 00:16:25,610
exactly what we expect it to be so

00:16:22,270 --> 00:16:28,940
assert equals expects like an expected

00:16:25,610 --> 00:16:31,670
value and an actual value and if you

00:16:28,940 --> 00:16:35,600
specified like that PHP unit in case you

00:16:31,670 --> 00:16:38,150
have a PAC will tell you this is the

00:16:35,600 --> 00:16:40,990
expected value but this was the actual

00:16:38,150 --> 00:16:44,210
value you have a back in your code

00:16:40,990 --> 00:16:47,450
that's a little bit more you have or you

00:16:44,210 --> 00:16:50,000
can define in those tests and here at

00:16:47,450 --> 00:16:52,580
the top you see the at commis default

00:16:50,000 --> 00:16:54,800
class annotation that allows you to

00:16:52,580 --> 00:16:59,840
specify which is the code you are

00:16:54,800 --> 00:17:03,830
actually testing by doing so PHP unit

00:16:59,840 --> 00:17:06,890
can provide your code coverage a code

00:17:03,830 --> 00:17:10,940
coverage basically says okay these are

00:17:06,890 --> 00:17:13,010
all code paths you have tested and these

00:17:10,940 --> 00:17:15,970
are the code paths you haven't tested so

00:17:13,010 --> 00:17:19,730
if you want to have a walk solid test

00:17:15,970 --> 00:17:21,650
suit you basically check which part of

00:17:19,730 --> 00:17:23,720
the code aren't tested and then you can

00:17:21,650 --> 00:17:27,260
write additional tests for those cases

00:17:23,720 --> 00:17:31,310
that makes it really handy potentially

00:17:27,260 --> 00:17:33,770
for like reviewers to see how well is

00:17:31,310 --> 00:17:37,270
your test coverage said you don't lowest

00:17:33,770 --> 00:17:40,400
rate in Drupal at all which was provided

00:17:37,270 --> 00:17:42,740
yeah once you have defined the test

00:17:40,400 --> 00:17:43,780
function you need to probably also want

00:17:42,740 --> 00:17:47,620
the test

00:17:43,780 --> 00:17:49,450
so how do you run the test interesting

00:17:47,620 --> 00:17:55,660
because so just to be clear this is

00:17:49,450 --> 00:17:58,360
queen it's not yellow it is really so

00:17:55,660 --> 00:18:01,690
how do you how do you run a test you

00:17:58,360 --> 00:18:06,820
first copy this PHP unit or X amount of

00:18:01,690 --> 00:18:08,530
this file to expiry unit of XML and that

00:18:06,820 --> 00:18:11,440
allows you to provide some custom

00:18:08,530 --> 00:18:13,480
configuration like for example the

00:18:11,440 --> 00:18:14,320
database connection details like user

00:18:13,480 --> 00:18:19,150
name password

00:18:14,320 --> 00:18:22,480
host and database name and the the URL

00:18:19,150 --> 00:18:25,990
to your site once you have that set up

00:18:22,480 --> 00:18:30,880
Drupal or now the testing framework can

00:18:25,990 --> 00:18:34,390
run those tests in this case we are

00:18:30,880 --> 00:18:38,050
running this HTML escape text taste text

00:18:34,390 --> 00:18:41,680
test you know to do so you like specify

00:18:38,050 --> 00:18:44,620
the path wind up in PHP unit you give it

00:18:41,680 --> 00:18:46,450
like - the core that picks up this

00:18:44,620 --> 00:18:49,150
configuration file you specified down

00:18:46,450 --> 00:18:52,030
there and then the entire power to your

00:18:49,150 --> 00:18:55,330
test file and by doing so it you know

00:18:52,030 --> 00:18:56,800
it's loading the file execute it checks

00:18:55,330 --> 00:18:57,280
the result and in case everything is

00:18:56,800 --> 00:19:02,800
alright

00:18:57,280 --> 00:19:04,750
it returns okay here let's go to the

00:19:02,800 --> 00:19:06,610
next level of testing clouds he

00:19:04,750 --> 00:19:09,430
explained the next level is integration

00:19:06,610 --> 00:19:11,980
testing our integration testing is

00:19:09,430 --> 00:19:14,140
called kernel tests it's called kernel

00:19:11,980 --> 00:19:16,660
because the main component of tuple

00:19:14,140 --> 00:19:19,480
which boots up tuple is the kernel and

00:19:16,660 --> 00:19:22,240
in that kernel it ensures that you have

00:19:19,480 --> 00:19:24,010
the data base in this contest in ensures

00:19:22,240 --> 00:19:24,820
that you have basically every API

00:19:24,010 --> 00:19:29,830
available

00:19:24,820 --> 00:19:32,890
so with that you can test your API for

00:19:29,830 --> 00:19:37,900
example you can test that if you save an

00:19:32,890 --> 00:19:40,300
entity and you validate it that the

00:19:37,900 --> 00:19:41,830
actual validation is 1 and you save it

00:19:40,300 --> 00:19:44,950
and then you can ensure that it actually

00:19:41,830 --> 00:19:48,850
got stored in the database and so on and

00:19:44,950 --> 00:19:50,860
so forth compared to unit test this is

00:19:48,850 --> 00:19:54,150
much much slower

00:19:50,860 --> 00:19:56,129
it's probably like hundred times or so I

00:19:54,150 --> 00:20:01,749
would guess so

00:19:56,129 --> 00:20:05,639
but it allows you to cover much more you

00:20:01,749 --> 00:20:10,570
know database I oh it's it's hopelessly

00:20:05,639 --> 00:20:12,849
avoided sorry thanks and that still is

00:20:10,570 --> 00:20:15,609
pretty nice let's have a look how an

00:20:12,849 --> 00:20:18,279
actual example looks like so this is

00:20:15,609 --> 00:20:21,820
example is testing the locking system in

00:20:18,279 --> 00:20:23,440
Drupal so the system which allows you to

00:20:21,820 --> 00:20:28,119
create a lock and ensure that not

00:20:23,440 --> 00:20:31,359
multiple processes hate each other so in

00:20:28,119 --> 00:20:33,940
order to test that we need to write

00:20:31,359 --> 00:20:37,539
another test class in this case block

00:20:33,940 --> 00:20:40,989
test the base class you need to extend

00:20:37,539 --> 00:20:44,440
this kernel test base which does magic

00:20:40,989 --> 00:20:47,080
for you so this sets up the database for

00:20:44,440 --> 00:20:51,190
you ensures that everything is loaded

00:20:47,080 --> 00:20:54,099
properly yeah in the test we you know we

00:20:51,190 --> 00:20:57,059
create an object and call some methods

00:20:54,099 --> 00:21:00,519
on there in this case we require a lock

00:20:57,059 --> 00:21:02,830
check whether this acquiring fair worked

00:21:00,519 --> 00:21:04,389
then we check whether a lock is still

00:21:02,830 --> 00:21:07,599
available no it's not because it's

00:21:04,389 --> 00:21:09,999
already acquired and we check that on

00:21:07,599 --> 00:21:13,330
here you see another test assertion

00:21:09,999 --> 00:21:15,519
method called so2 which is expecting a

00:21:13,330 --> 00:21:18,460
boolean so if it's true everything is

00:21:15,519 --> 00:21:20,619
fine if it's false something is wrong

00:21:18,460 --> 00:21:23,859
on top of that here you see like a

00:21:20,619 --> 00:21:27,519
message you can give those these

00:21:23,859 --> 00:21:30,219
assertions and this method helps you to

00:21:27,519 --> 00:21:32,679
understand what went wrong when you

00:21:30,219 --> 00:21:34,599
actually have a failing test so this

00:21:32,679 --> 00:21:37,749
message on the right side would be

00:21:34,599 --> 00:21:41,769
printed out when like when the natural

00:21:37,749 --> 00:21:43,899
buck appears somehow in your code so

00:21:41,769 --> 00:21:48,729
yeah but it is conceptually really

00:21:43,899 --> 00:21:51,039
similar to a unit test let's go to the

00:21:48,729 --> 00:21:54,639
next level this is the functional test

00:21:51,039 --> 00:21:57,580
level we call it browser test because in

00:21:54,639 --> 00:22:01,419
our domain the web the system we are

00:21:57,580 --> 00:22:04,299
dealing with is mostly a browser so a

00:22:01,419 --> 00:22:06,669
browser test sets up an entire Drupal so

00:22:04,299 --> 00:22:08,130
it creates the database creates all the

00:22:06,669 --> 00:22:12,480
tables even create

00:22:08,130 --> 00:22:14,610
you know some users installs the

00:22:12,480 --> 00:22:16,830
configuration on your site and then you

00:22:14,610 --> 00:22:20,940
know you can just use a browser and go

00:22:16,830 --> 00:22:23,490
to your site do some stuff like login

00:22:20,940 --> 00:22:25,230
create a note say that check whether the

00:22:23,490 --> 00:22:28,050
title appears on the top of your page

00:22:25,230 --> 00:22:30,990
something like that in order to do that

00:22:28,050 --> 00:22:34,140
we are leveraging a thing called mink

00:22:30,990 --> 00:22:37,710
mink is a browser abstraction layer so

00:22:34,140 --> 00:22:39,960
this talks with some browser by default

00:22:37,710 --> 00:22:42,990
we are having like a PHP based browser

00:22:39,960 --> 00:22:45,290
but we can also plug in other kind of

00:22:42,990 --> 00:22:47,880
browsers for example we now plug in

00:22:45,290 --> 00:22:51,480
phantom chess which is a headless

00:22:47,880 --> 00:22:53,160
browser based upon phone so that allows

00:22:51,480 --> 00:22:54,410
us to actually test for example Yahoo's

00:22:53,160 --> 00:22:58,200
could we will see that later

00:22:54,410 --> 00:23:00,600
we're also tests are even way slower it

00:22:58,200 --> 00:23:03,120
is just another order of magnitude

00:23:00,600 --> 00:23:05,670
slower so if your color test takes a

00:23:03,120 --> 00:23:08,760
second for example for also test takes

00:23:05,670 --> 00:23:10,440
like 10 seconds to set up a coupon so

00:23:08,760 --> 00:23:13,320
have let's have a look at the positives

00:23:10,440 --> 00:23:16,050
example this is coming from wolves

00:23:13,320 --> 00:23:18,750
because they adopted paws a test really

00:23:16,050 --> 00:23:20,970
early so in this case we actually

00:23:18,750 --> 00:23:22,740
extending a woods browser test base

00:23:20,970 --> 00:23:25,760
which according to Clause is much much

00:23:22,740 --> 00:23:28,890
better than the default was a test base

00:23:25,760 --> 00:23:32,070
but maybe we should get something from

00:23:28,890 --> 00:23:34,500
that in the car anyway you are extending

00:23:32,070 --> 00:23:36,780
browser test space in this case and you

00:23:34,500 --> 00:23:39,420
see here are actual like written down

00:23:36,780 --> 00:23:42,480
definitions of kind of what the user

00:23:39,420 --> 00:23:44,580
should do so we created user we lock in

00:23:42,480 --> 00:23:47,460
if we go to a certain page this

00:23:44,580 --> 00:23:50,430
duplicate goes to a specific page we

00:23:47,460 --> 00:23:53,160
click some link we fill in some form

00:23:50,430 --> 00:23:56,340
fields with press a button and so on and

00:23:53,160 --> 00:23:59,390
so forth at the end here we then

00:23:56,340 --> 00:24:02,640
actually ensure that like the browser

00:23:59,390 --> 00:24:05,310
did well or like the system did what we

00:24:02,640 --> 00:24:07,020
expected and this is a little bit

00:24:05,310 --> 00:24:09,030
special down here because it's not

00:24:07,020 --> 00:24:11,340
longer just a so true or assert equals

00:24:09,030 --> 00:24:13,550
but it's rather as a session which gives

00:24:11,340 --> 00:24:16,500
us a helper object to deal with

00:24:13,550 --> 00:24:18,660
assertions for process so in this case

00:24:16,500 --> 00:24:20,360
we are ensuring that the HTTP status

00:24:18,660 --> 00:24:24,580
code is like two hundred and

00:24:20,360 --> 00:24:24,580
see some certain message on the page

00:24:25,480 --> 00:24:30,830
with that kind of pep on you can then

00:24:27,860 --> 00:24:32,690
write the functionality or you can write

00:24:30,830 --> 00:24:36,110
tests for the actual functionality on

00:24:32,690 --> 00:24:39,140
your side pretty easily depends but it

00:24:36,110 --> 00:24:40,160
is it is a lot of code so in case you

00:24:39,140 --> 00:24:42,559
add test coverage

00:24:40,160 --> 00:24:44,960
it adds maintenance cost so we have to

00:24:42,559 --> 00:24:48,140
get to think about what you're doing the

00:24:44,960 --> 00:24:52,760
next level is JavaScript testing we are

00:24:48,140 --> 00:24:54,970
using and we're using PHP to test the

00:24:52,760 --> 00:24:58,070
other script let's frame it like that

00:24:54,970 --> 00:25:00,320
basically instead of the PHP based

00:24:58,070 --> 00:25:04,429
browser as we had before we are now

00:25:00,320 --> 00:25:07,640
plucking phantom chairs at least at the

00:25:04,429 --> 00:25:13,190
moment which allows us to actually do

00:25:07,640 --> 00:25:14,960
screenshots oh sorry no this is actual

00:25:13,190 --> 00:25:17,809
screenshot from a running test

00:25:14,960 --> 00:25:21,049
it is really minimal because by default

00:25:17,809 --> 00:25:27,169
we are installing no theme or like some

00:25:21,049 --> 00:25:30,520
seven some basic theme javascript tests

00:25:27,169 --> 00:25:33,559
are though pretty tricky because

00:25:30,520 --> 00:25:36,530
browsers or javascript do things icing

00:25:33,559 --> 00:25:39,169
firmly so in this case this is the

00:25:36,530 --> 00:25:41,750
toolbar so we want to ensure like

00:25:39,169 --> 00:25:44,690
clicking on this link the toolbar pops

00:25:41,750 --> 00:25:48,410
up and if we click it again the toolbar

00:25:44,690 --> 00:25:50,570
is hidden again this requires into

00:25:48,410 --> 00:25:52,970
preferred something actual HTTP request

00:25:50,570 --> 00:25:58,520
to fetch the data of the toolbar so it

00:25:52,970 --> 00:26:01,940
takes time but as PHP is running soon

00:25:58,520 --> 00:26:05,780
closely so like just imperative style

00:26:01,940 --> 00:26:08,240
just next to each other we need to

00:26:05,780 --> 00:26:12,500
ensure that the browser which is in our

00:26:08,240 --> 00:26:14,929
process actually did its thing so you

00:26:12,500 --> 00:26:17,390
need to basically check continuously

00:26:14,929 --> 00:26:20,809
until some some interaction finish we

00:26:17,390 --> 00:26:23,179
have a look at that now so this is

00:26:20,809 --> 00:26:25,970
another example which is click sorting

00:26:23,179 --> 00:26:27,980
so you know you can on a table click on

00:26:25,970 --> 00:26:32,290
the header and then it sorts that the

00:26:27,980 --> 00:26:33,860
the was according through this column so

00:26:32,290 --> 00:26:35,809
and this

00:26:33,860 --> 00:26:38,360
case you need to extend the JavaScript

00:26:35,809 --> 00:26:43,490
test based class and then it ensures

00:26:38,360 --> 00:26:46,220
that some phantom JS works for you stuff

00:26:43,490 --> 00:26:49,630
it's going on you click on a link this

00:26:46,220 --> 00:26:52,490
is the actual like table header and then

00:26:49,630 --> 00:26:55,520
and then like in the background an H&P

00:26:52,490 --> 00:26:57,980
request is fired in the browser and you

00:26:55,520 --> 00:27:00,049
need to ensure that the HTTP requests

00:26:57,980 --> 00:27:01,700
finished and everything and therefore we

00:27:00,049 --> 00:27:04,040
have developed an actual help of a

00:27:01,700 --> 00:27:07,970
function called assert weight on HX week

00:27:04,040 --> 00:27:09,710
rest but on top of that there are also

00:27:07,970 --> 00:27:12,280
helper functions to ensure that a

00:27:09,710 --> 00:27:14,419
certain bit of interaction on the page

00:27:12,280 --> 00:27:17,480
happened so you need to write some

00:27:14,419 --> 00:27:20,630
jQuery to detect that a certain Dom

00:27:17,480 --> 00:27:24,370
element for example exists that's kind

00:27:20,630 --> 00:27:29,690
of tricky to figure out potentially so

00:27:24,370 --> 00:27:32,540
yeah anyway at the end again we test

00:27:29,690 --> 00:27:35,049
some stuff and ensure that things are

00:27:32,540 --> 00:27:37,520
working as expected

00:27:35,049 --> 00:27:39,220
so now talking a bit about testing

00:27:37,520 --> 00:27:42,200
regions we saw some examples already

00:27:39,220 --> 00:27:44,000
going a bit deeper into that we already

00:27:42,200 --> 00:27:47,270
saw the setup methods in these test

00:27:44,000 --> 00:27:48,650
classes and we do that to create stuff

00:27:47,270 --> 00:27:50,450
that you need in every test method

00:27:48,650 --> 00:27:53,270
beforehand before the test is executed

00:27:50,450 --> 00:27:55,309
so what the base class do is set up the

00:27:53,270 --> 00:27:58,010
database set up the configuration set up

00:27:55,309 --> 00:27:59,360
even test data and what you can do in

00:27:58,010 --> 00:28:00,710
addition for example in a new test

00:27:59,360 --> 00:28:04,190
create some arcs that you will need in

00:28:00,710 --> 00:28:05,450
all your test cases and there's also the

00:28:04,190 --> 00:28:07,250
teardown function which you probably

00:28:05,450 --> 00:28:08,900
will not need but setup is something

00:28:07,250 --> 00:28:10,640
that you do so what you do in a setup

00:28:08,900 --> 00:28:12,230
method you called a parent which does

00:28:10,640 --> 00:28:13,790
some parent work like installing data

00:28:12,230 --> 00:28:16,070
bases or whatever so always called a

00:28:13,790 --> 00:28:18,020
parent method in the beginning and then

00:28:16,070 --> 00:28:19,970
you do for example create a content type

00:28:18,020 --> 00:28:22,070
that you will use for testing and then a

00:28:19,970 --> 00:28:23,960
note for it so I do have two nodes and

00:28:22,070 --> 00:28:27,610
then do some stuff with that this is

00:28:23,960 --> 00:28:27,610
pretty straightforward not a big deal

00:28:27,640 --> 00:28:33,140
then the most crucial part of the test

00:28:30,890 --> 00:28:35,630
is of course to assert something so what

00:28:33,140 --> 00:28:37,940
we do with the sessions is we compare

00:28:35,630 --> 00:28:42,919
something expected that should happen

00:28:37,940 --> 00:28:44,660
with the result that actually happens so

00:28:42,919 --> 00:28:46,710
we do some testing and in the end I said

00:28:44,660 --> 00:28:49,650
or should always be an assertion we

00:28:46,710 --> 00:28:53,130
ensures that the executed staff has the

00:28:49,650 --> 00:28:55,410
result that we want to have so if in

00:28:53,130 --> 00:28:57,570
such an assertion is not fulfilled if

00:28:55,410 --> 00:28:59,010
the expection expectations are fulfilled

00:28:57,570 --> 00:29:01,470
then the test is failed automatically

00:28:59,010 --> 00:29:04,050
and what PHP unit does in this case it

00:29:01,470 --> 00:29:06,210
throws an exception which means PHP unit

00:29:04,050 --> 00:29:07,860
will walk down your test case until it

00:29:06,210 --> 00:29:09,840
reaches the first assertion that fails

00:29:07,860 --> 00:29:11,810
and then the exception is thrown and

00:29:09,840 --> 00:29:14,550
your test case is over and you will get

00:29:11,810 --> 00:29:15,630
an exception and PHP unit will be read

00:29:14,550 --> 00:29:17,880
and will print you out

00:29:15,630 --> 00:29:19,890
oh I expected the boolean true but I got

00:29:17,880 --> 00:29:21,240
a false at this line and it points you

00:29:19,890 --> 00:29:23,040
to the exact line in the test case and

00:29:21,240 --> 00:29:24,930
then you can start debugging and see

00:29:23,040 --> 00:29:26,430
what's going on there this is a bit

00:29:24,930 --> 00:29:28,560
different to simple test which we know

00:29:26,430 --> 00:29:31,410
from Drupal already because simple test

00:29:28,560 --> 00:29:34,050
if an assertion fails it will still

00:29:31,410 --> 00:29:35,880
continue to execute the test right so

00:29:34,050 --> 00:29:37,920
this has advantages and disadvantages

00:29:35,880 --> 00:29:39,540
but just something useful to know when

00:29:37,920 --> 00:29:41,580
you actually phpunit that as soon as the

00:29:39,540 --> 00:29:43,860
first assertion fails it stops this

00:29:41,580 --> 00:29:45,690
particular test case then either moves

00:29:43,860 --> 00:29:47,670
on to the next test case if you run

00:29:45,690 --> 00:29:50,000
multiple ones or if you just run that

00:29:47,670 --> 00:29:52,410
single one then it stops immediately

00:29:50,000 --> 00:29:53,970
what pre-trip unit also does for you it

00:29:52,410 --> 00:29:57,090
automatically asserts that there are no

00:29:53,970 --> 00:29:59,310
PHP warnings no fatal errors or anything

00:29:57,090 --> 00:30:00,720
whenever that happens PHP unit stops

00:29:59,310 --> 00:30:02,400
immediately and says you know there a

00:30:00,720 --> 00:30:04,710
notice has occurred you shouldn't have

00:30:02,400 --> 00:30:07,830
notices in your codebase and also the

00:30:04,710 --> 00:30:09,990
test is failed PHP unit also gives you

00:30:07,830 --> 00:30:12,090
tool to have data providers versus

00:30:09,990 --> 00:30:15,570
multiple assertions so you can have a

00:30:12,090 --> 00:30:18,120
set of test fixtures that you can pass

00:30:15,570 --> 00:30:20,000
to your tests and then assert stuff on

00:30:18,120 --> 00:30:22,620
them I will show you some examples later

00:30:20,000 --> 00:30:25,020
and some assertion examples here so we

00:30:22,620 --> 00:30:27,300
have a wide variety of assertion methods

00:30:25,020 --> 00:30:29,160
in PHP unit core you can of course

00:30:27,300 --> 00:30:31,140
compare stuff if it's actually the same

00:30:29,160 --> 00:30:32,940
this works on primitives like integers

00:30:31,140 --> 00:30:35,060
this works also on objects if it's

00:30:32,940 --> 00:30:38,280
actually the same object or on erase

00:30:35,060 --> 00:30:39,990
their helpers to assert that something

00:30:38,280 --> 00:30:42,270
is contained in something else for

00:30:39,990 --> 00:30:46,200
example in race or it works on strings

00:30:42,270 --> 00:30:48,360
you can count stuff the reason why there

00:30:46,200 --> 00:30:50,580
are this assert helpers you could you

00:30:48,360 --> 00:30:52,920
could always do all of this with a so at

00:30:50,580 --> 00:30:55,260
same right but it's much more readable

00:30:52,920 --> 00:30:56,940
if you use this assert help us then the

00:30:55,260 --> 00:30:59,550
line gets shorter and it's immediately

00:30:56,940 --> 00:31:01,710
clear what the assertion should do

00:30:59,550 --> 00:31:03,060
so there's also stuff to assert regular

00:31:01,710 --> 00:31:06,330
expressions or that the string starts

00:31:03,060 --> 00:31:07,740
with something yeah and then we have the

00:31:06,330 --> 00:31:09,600
browser tests which are in a functional

00:31:07,740 --> 00:31:11,730
level that we mentioned there we have

00:31:09,600 --> 00:31:14,010
some special session a third object

00:31:11,730 --> 00:31:16,230
where you can do stuff with the current

00:31:14,010 --> 00:31:17,760
page you are on you can verify that the

00:31:16,230 --> 00:31:19,980
response that the browser got actually

00:31:17,760 --> 00:31:22,800
delivered the status code 200 you can

00:31:19,980 --> 00:31:25,530
assert that you are in a certain URL you

00:31:22,800 --> 00:31:28,440
can assert that you have a button on the

00:31:25,530 --> 00:31:30,090
page with a certain label yes there's a

00:31:28,440 --> 00:31:33,090
lot of stuff that you can do check boxes

00:31:30,090 --> 00:31:35,340
whatever there's also a link to the app

00:31:33,090 --> 00:31:36,750
unit documentation which has also some

00:31:35,340 --> 00:31:40,950
some great info about the search

00:31:36,750 --> 00:31:43,470
messages we already mentioned mocking

00:31:40,950 --> 00:31:45,630
for unit tests this is where you have to

00:31:43,470 --> 00:31:47,580
fake dependencies so you want to test

00:31:45,630 --> 00:31:50,100
your function your class in isolation

00:31:47,580 --> 00:31:51,630
but it it tries to call out to the

00:31:50,100 --> 00:31:54,210
database so we need to fake the database

00:31:51,630 --> 00:31:56,040
and what we do nowadays when we write

00:31:54,210 --> 00:31:58,380
PHP unit is this use the mocking

00:31:56,040 --> 00:32:00,690
framework called prophecy and prophecies

00:31:58,380 --> 00:32:03,240
gives you a lot of nice helper functions

00:32:00,690 --> 00:32:05,850
and classes that you can use so we have

00:32:03,240 --> 00:32:08,790
four different types of test doubles or

00:32:05,850 --> 00:32:10,680
tests fakes that we are going to use the

00:32:08,790 --> 00:32:13,590
first one there's a doublet that aren't

00:32:10,680 --> 00:32:15,570
really used so you just get an object

00:32:13,590 --> 00:32:18,000
and whenever you call a method on it it

00:32:15,570 --> 00:32:19,350
will just return Nerys when when you

00:32:18,000 --> 00:32:20,790
test code and the database is not

00:32:19,350 --> 00:32:22,320
actually used you can just give it a

00:32:20,790 --> 00:32:23,670
dummy the class in a constructor because

00:32:22,320 --> 00:32:25,410
any constructor it might need the

00:32:23,670 --> 00:32:26,940
database you give it some dummy and then

00:32:25,410 --> 00:32:28,680
you test the method which doesn't even

00:32:26,940 --> 00:32:31,830
use the database then such a dummy is

00:32:28,680 --> 00:32:34,580
fine then you can also have stops stops

00:32:31,830 --> 00:32:36,870
then there you can put arbitrary

00:32:34,580 --> 00:32:38,820
primitive functionality on them you can

00:32:36,870 --> 00:32:41,910
say when this method is called then

00:32:38,820 --> 00:32:43,710
return a certain predefined value you

00:32:41,910 --> 00:32:48,450
can go even further and make your fake

00:32:43,710 --> 00:32:50,100
to a mock then you say I specified that

00:32:48,450 --> 00:32:52,020
a certain method should be called so for

00:32:50,100 --> 00:32:53,250
example I'm faking the mail system and

00:32:52,020 --> 00:32:55,980
now I'm testing something with the mail

00:32:53,250 --> 00:32:58,410
system and this mail method on this this

00:32:55,980 --> 00:33:00,330
fake object should be called so you can

00:32:58,410 --> 00:33:01,950
assert that and when it's not called in

00:33:00,330 --> 00:33:03,570
PHP unit will fail your test it works

00:33:01,950 --> 00:33:07,680
together with prophecy to ensure that

00:33:03,570 --> 00:33:09,960
all the expectations are are matched and

00:33:07,680 --> 00:33:11,940
the last one is spiced it's basically

00:33:09,960 --> 00:33:12,679
the same as marks but you can run your

00:33:11,940 --> 00:33:14,419
test code we

00:33:12,679 --> 00:33:17,450
your your marks and in the end you can

00:33:14,419 --> 00:33:19,279
you can question prophecy has this

00:33:17,450 --> 00:33:21,379
method been called and how many times so

00:33:19,279 --> 00:33:23,240
there are some inspection features with

00:33:21,379 --> 00:33:25,460
marking where you can say which method

00:33:23,240 --> 00:33:29,509
has been caught on this fake object

00:33:25,460 --> 00:33:31,159
exactly so here are some is a short

00:33:29,509 --> 00:33:33,470
collection of prophecy examples to see

00:33:31,159 --> 00:33:35,929
this in practice so at first we set up a

00:33:33,470 --> 00:33:37,909
dummy our mail manager object and we

00:33:35,929 --> 00:33:39,740
call the prophesized method this gives

00:33:37,909 --> 00:33:42,889
you a so-called prophet in prophecy

00:33:39,740 --> 00:33:45,019
which means you can get a fake object

00:33:42,889 --> 00:33:49,039
that will implement mail manager

00:33:45,019 --> 00:33:51,080
interface class that we have here to get

00:33:49,039 --> 00:33:53,330
our dummy out which is called a review

00:33:51,080 --> 00:33:55,580
method so we don't do any further setup

00:33:53,330 --> 00:33:57,320
of our Prophet we just say ok whatever

00:33:55,580 --> 00:33:58,909
just some random dummy which returns

00:33:57,320 --> 00:34:01,159
null every time I don't care that it

00:33:58,909 --> 00:34:02,480
does actually anything then we just call

00:34:01,159 --> 00:34:04,309
the real function and we are done with

00:34:02,480 --> 00:34:06,110
the dummy if you want to do more

00:34:04,309 --> 00:34:08,450
advanced stuff we can turn it into a

00:34:06,110 --> 00:34:10,520
stop by returning something so I can say

00:34:08,450 --> 00:34:11,179
if the mail method on the mail manager

00:34:10,520 --> 00:34:13,309
is called

00:34:11,179 --> 00:34:15,109
with the parameters of this email

00:34:13,309 --> 00:34:16,520
address at Minette example comment the

00:34:15,109 --> 00:34:20,240
second parameter which might be a

00:34:16,520 --> 00:34:22,250
subject test then this fake object

00:34:20,240 --> 00:34:25,069
should return some array which recess

00:34:22,250 --> 00:34:26,960
reside true this exactly fulfills the

00:34:25,069 --> 00:34:30,409
stuff that we have defined in mail

00:34:26,960 --> 00:34:32,089
manager class and then we can also make

00:34:30,409 --> 00:34:34,099
it a mark at the same time by saying

00:34:32,089 --> 00:34:36,319
this mail method should be called

00:34:34,099 --> 00:34:38,149
exactly one time so the test will fail

00:34:36,319 --> 00:34:40,490
if it hasn't been called at all then the

00:34:38,149 --> 00:34:42,260
test will fail or if it has called mean

00:34:40,490 --> 00:34:45,409
it has been called more than once then a

00:34:42,260 --> 00:34:46,940
test will also fail so the next part is

00:34:45,409 --> 00:34:48,409
where we actually set up there the

00:34:46,940 --> 00:34:50,149
object that we want to test in this case

00:34:48,409 --> 00:34:52,010
it's a rule s action so we instantiate

00:34:50,149 --> 00:34:53,510
it this is the actual class on the test

00:34:52,010 --> 00:34:55,639
so this is not a fake this is the real

00:34:53,510 --> 00:34:59,210
class we actually want to test we pass

00:34:55,639 --> 00:35:01,640
in the fake object we call reveal again

00:34:59,210 --> 00:35:03,559
then and the profit is turned into the

00:35:01,640 --> 00:35:06,290
actually actual fake thing that you want

00:35:03,559 --> 00:35:08,420
to test then we do some testing we set

00:35:06,290 --> 00:35:11,780
some context values here and execute the

00:35:08,420 --> 00:35:14,450
action and in the end we can spy on

00:35:11,780 --> 00:35:16,819
stuff we can say oh if there has been

00:35:14,450 --> 00:35:18,980
some other email address defined this

00:35:16,819 --> 00:35:21,440
should never be caught then the test

00:35:18,980 --> 00:35:24,319
should fail and then we can also specify

00:35:21,440 --> 00:35:25,910
this expectation here so PHP unit runs

00:35:24,319 --> 00:35:27,680
through all of this

00:35:25,910 --> 00:35:29,510
in the end it verifies that the correct

00:35:27,680 --> 00:35:31,760
methods have been called and it gives

00:35:29,510 --> 00:35:34,359
you a correct result or not so these are

00:35:31,760 --> 00:35:36,829
the basics of marking it will be a bit

00:35:34,359 --> 00:35:38,390
might not be really intuitive at the

00:35:36,829 --> 00:35:42,470
beginning but if you look at examples it

00:35:38,390 --> 00:35:44,180
really makes sense and then yeah this is

00:35:42,470 --> 00:35:47,990
the output when you run this implicit

00:35:44,180 --> 00:35:50,150
assertions so in this case PHP unit and

00:35:47,990 --> 00:35:54,020
prophecies are telling me oh I expected

00:35:50,150 --> 00:35:57,650
a mail call with the exact admin at

00:35:54,020 --> 00:35:59,539
example.com address but what you gave me

00:35:57,650 --> 00:36:01,549
was the other at example.com address

00:35:59,539 --> 00:36:02,780
that doesn't really match I expected

00:36:01,549 --> 00:36:04,730
something different I'm failing the test

00:36:02,780 --> 00:36:07,730
and that's why you didn't get one errors

00:36:04,730 --> 00:36:09,440
and direct result so that's all there is

00:36:07,730 --> 00:36:11,240
to it it also gives me a nice back trace

00:36:09,440 --> 00:36:16,160
uh-huh this wasn't a test case on line

00:36:11,240 --> 00:36:18,589
94 I know where to start test fixtures

00:36:16,160 --> 00:36:20,930
is when you test the input and the

00:36:18,589 --> 00:36:23,930
output of a method or a class whatever

00:36:20,930 --> 00:36:25,549
it reads and produces and we want to do

00:36:23,930 --> 00:36:27,530
it with well-known data sets because

00:36:25,549 --> 00:36:29,329
they have the advantage that every time

00:36:27,530 --> 00:36:30,950
you run those tests they run on the same

00:36:29,329 --> 00:36:34,460
data it's very predictable what the

00:36:30,950 --> 00:36:36,170
output should be and very reliable PHP

00:36:34,460 --> 00:36:37,700
unit has the concept of data providers

00:36:36,170 --> 00:36:39,920
for this and it uses the app data

00:36:37,700 --> 00:36:42,079
provider annotation so we also saw a

00:36:39,920 --> 00:36:45,279
couple of annotations this is very

00:36:42,079 --> 00:36:47,720
common in PHP unit test if you see this

00:36:45,279 --> 00:36:49,579
and what the data provider looks like is

00:36:47,720 --> 00:36:51,950
you have the actual test function which

00:36:49,579 --> 00:36:53,660
is the first function here it says test

00:36:51,950 --> 00:36:55,849
to string so we want to test that some

00:36:53,660 --> 00:36:59,839
class correctly converts stuff to a

00:36:55,849 --> 00:37:01,579
plain string and what's different about

00:36:59,839 --> 00:37:03,410
this test method here it suddenly has

00:37:01,579 --> 00:37:05,119
three parameters because usually our

00:37:03,410 --> 00:37:06,829
test methods don't have any parameters

00:37:05,119 --> 00:37:09,170
PHP only just starts them and goes

00:37:06,829 --> 00:37:11,329
through them and we specified here in

00:37:09,170 --> 00:37:12,140
the doc block that this test method has

00:37:11,329 --> 00:37:14,510
a data provider

00:37:12,140 --> 00:37:16,400
attached to it and this is the function

00:37:14,510 --> 00:37:18,650
name the exact function name being used

00:37:16,400 --> 00:37:21,410
here it says this is the provider to the

00:37:18,650 --> 00:37:24,470
to string method and as you might guess

00:37:21,410 --> 00:37:26,869
already this is an array of test cases

00:37:24,470 --> 00:37:29,660
so we have one two three test cases here

00:37:26,869 --> 00:37:31,880
and what we specify in the arrays is

00:37:29,660 --> 00:37:33,950
then passed up to the text parameters to

00:37:31,880 --> 00:37:35,329
the first parameter and the expected

00:37:33,950 --> 00:37:37,320
result that should come out of it and

00:37:35,329 --> 00:37:40,230
even in a server some measures that we

00:37:37,320 --> 00:37:42,090
above there and so we built up this

00:37:40,230 --> 00:37:44,160
array returned it and then phpunit will

00:37:42,090 --> 00:37:46,110
take each element of this array and run

00:37:44,160 --> 00:37:49,200
this test method above here three times

00:37:46,110 --> 00:37:51,030
and in there we have their social

00:37:49,200 --> 00:37:53,250
messages again make sure that if we

00:37:51,030 --> 00:37:55,290
convert this object to string they

00:37:53,250 --> 00:37:56,790
expect this stuff is coming out same for

00:37:55,290 --> 00:38:00,300
the chase since you realize here hoops

00:37:56,790 --> 00:38:01,680
and then the test is green or not so

00:38:00,300 --> 00:38:03,420
that's basically how data providers work

00:38:01,680 --> 00:38:04,800
we use that a couple of times in Drupal

00:38:03,420 --> 00:38:08,370
core so you can just grab for the add

00:38:04,800 --> 00:38:11,520
data provider annotation and we will

00:38:08,370 --> 00:38:13,830
find some examples testing exceptions

00:38:11,520 --> 00:38:15,900
what can we do about that so the very

00:38:13,830 --> 00:38:18,780
naive solution is the ugly thing I wrote

00:38:15,900 --> 00:38:20,460
up here you have in my example function

00:38:18,780 --> 00:38:21,990
that might throw an exception so how do

00:38:20,460 --> 00:38:24,360
I check that it really throws that

00:38:21,990 --> 00:38:27,570
exception when I pass it's the test

00:38:24,360 --> 00:38:29,400
parameter I can call it a function and

00:38:27,570 --> 00:38:31,590
if there is no exception I can just fail

00:38:29,400 --> 00:38:33,960
the test right that would work and I can

00:38:31,590 --> 00:38:35,520
catch the exception or grade the

00:38:33,960 --> 00:38:37,290
exception has been thrown so we can pass

00:38:35,520 --> 00:38:39,300
the test so I have I have some fake

00:38:37,290 --> 00:38:40,740
assertion here which is not really nice

00:38:39,300 --> 00:38:43,100
I have to assert that true is really

00:38:40,740 --> 00:38:45,210
true which is of course always true so

00:38:43,100 --> 00:38:46,410
just to get them is bad this is not

00:38:45,210 --> 00:38:48,330
really the ideal solution

00:38:46,410 --> 00:38:51,390
peachie unit helps you out with that you

00:38:48,330 --> 00:38:53,520
can say set an expected exception for

00:38:51,390 --> 00:38:55,200
its tests and whatever class take the

00:38:53,520 --> 00:38:59,130
exception should be so this basically

00:38:55,200 --> 00:39:01,290
corresponds to this class and when it

00:38:59,130 --> 00:39:03,360
then invoke the function it will throw

00:39:01,290 --> 00:39:05,490
the exception and PHP unit will catch

00:39:03,360 --> 00:39:07,200
that and all this is not a real

00:39:05,490 --> 00:39:08,570
exception this is actually expected in

00:39:07,200 --> 00:39:10,860
this test case so we are green this is

00:39:08,570 --> 00:39:14,010
exactly the thing that should be working

00:39:10,860 --> 00:39:16,050
there's also the add expected exception

00:39:14,010 --> 00:39:17,940
notation in PHP unit but it's deprecated

00:39:16,050 --> 00:39:20,040
and the authors of PHP unit advise you

00:39:17,940 --> 00:39:22,890
to not use it because you cannot specify

00:39:20,040 --> 00:39:26,460
exactly where in your test case and

00:39:22,890 --> 00:39:27,840
again exception is expected so the set

00:39:26,460 --> 00:39:31,650
expects this exception call should

00:39:27,840 --> 00:39:33,450
always be the the almost last element in

00:39:31,650 --> 00:39:35,910
a test before the extra function code so

00:39:33,450 --> 00:39:37,740
when this is the last math last line in

00:39:35,910 --> 00:39:39,630
your test method this should be the line

00:39:37,740 --> 00:39:41,010
before the last line because with the

00:39:39,630 --> 00:39:42,660
annotation you don't know where is

00:39:41,010 --> 00:39:45,390
exception is thrown in the testing and

00:39:42,660 --> 00:39:47,040
by using this method it's much more

00:39:45,390 --> 00:39:48,380
precise that's why we you should use

00:39:47,040 --> 00:39:50,690
that

00:39:48,380 --> 00:39:53,359
okay then we'll talk a bit about

00:39:50,690 --> 00:39:55,549
protests yeah so we have seen already

00:39:53,359 --> 00:39:57,499
some good examples of tests and

00:39:55,549 --> 00:39:59,749
assertions and stuff and I will just

00:39:57,499 --> 00:40:02,809
continue with a couple of more best

00:39:59,749 --> 00:40:06,079
practices we actually observed or found

00:40:02,809 --> 00:40:09,019
out while writing unit tests into the

00:40:06,079 --> 00:40:14,269
core so the first one is about

00:40:09,019 --> 00:40:16,119
assertions you could write as clouds he

00:40:14,269 --> 00:40:18,739
said everything with assert equals

00:40:16,119 --> 00:40:21,799
there's some expected value some actual

00:40:18,739 --> 00:40:23,390
value but it is really hard to read in

00:40:21,799 --> 00:40:26,049
this example it's still okay as an

00:40:23,390 --> 00:40:32,479
equals true true off is bigger than 100

00:40:26,049 --> 00:40:35,450
whatever unit but if you really like

00:40:32,479 --> 00:40:37,849
maintain a really big test suit you want

00:40:35,450 --> 00:40:41,960
to have as few lines as possible and as

00:40:37,849 --> 00:40:44,329
precise lines as possible in this line

00:40:41,960 --> 00:40:46,880
you would find something used as a true

00:40:44,329 --> 00:40:49,309
because that exactly semantically saying

00:40:46,880 --> 00:40:52,930
and telling you this is what this line

00:40:49,309 --> 00:40:55,880
should expect another example where this

00:40:52,930 --> 00:40:58,549
comes up is the method a third instance

00:40:55,880 --> 00:41:01,640
of this is checking whether the object

00:40:58,549 --> 00:41:05,299
on the right side is an instance of a

00:41:01,640 --> 00:41:08,960
specific class alternatively you could

00:41:05,299 --> 00:41:12,369
fall some views as a true of chuva of

00:41:08,960 --> 00:41:15,469
object instance of example class but

00:41:12,369 --> 00:41:18,739
this kind of syntax with other instance

00:41:15,469 --> 00:41:20,690
tool is much easier to read like I mean

00:41:18,739 --> 00:41:23,479
of course it in a single test you think

00:41:20,690 --> 00:41:26,150
so what but it sums up over time there

00:41:23,479 --> 00:41:28,279
are a lot of really custom assertions

00:41:26,150 --> 00:41:31,329
for example this one is a great example

00:41:28,279 --> 00:41:34,309
also chasing string equals chaser string

00:41:31,329 --> 00:41:36,440
so for example you could use that in

00:41:34,309 --> 00:41:40,519
order to test your West's API so you

00:41:36,440 --> 00:41:43,279
test that the West's API response

00:41:40,519 --> 00:41:45,859
returns like a certain bit of Jason so

00:41:43,279 --> 00:41:48,349
sure you could use as a equals and check

00:41:45,859 --> 00:41:50,660
two things together but what this one is

00:41:48,349 --> 00:41:53,569
doing is for example it decodes the

00:41:50,660 --> 00:41:55,700
value and compares the values decodes

00:41:53,569 --> 00:41:58,549
the string coming from your HTTP

00:41:55,700 --> 00:42:00,319
response and by doing so it can actually

00:41:58,549 --> 00:42:02,570
compare the values probably and then

00:42:00,319 --> 00:42:06,920
show you exactly like rich

00:42:02,570 --> 00:42:09,670
he of the object exactly is different so

00:42:06,920 --> 00:42:12,850
by doing so it just provides your better

00:42:09,670 --> 00:42:16,550
time afterwards if something fails

00:42:12,850 --> 00:42:18,800
another best practice is to use less

00:42:16,550 --> 00:42:20,780
assertions per test you could of course

00:42:18,800 --> 00:42:23,120
white a single test and do everything

00:42:20,780 --> 00:42:25,190
you would ever want in there

00:42:23,120 --> 00:42:29,210
but this makes it really hard for

00:42:25,190 --> 00:42:31,480
example to figure out which kind of code

00:42:29,210 --> 00:42:35,450
is a problem when something fails

00:42:31,480 --> 00:42:37,580
instead you bother white edition of test

00:42:35,450 --> 00:42:41,840
functions for each logical thing you do

00:42:37,580 --> 00:42:45,290
for example you have a method which

00:42:41,840 --> 00:42:47,690
tests the length of a string and you

00:42:45,290 --> 00:42:50,360
would then have like a test length of

00:42:47,690 --> 00:42:53,330
string method and then there's a special

00:42:50,360 --> 00:42:56,240
case for some of the empty string you

00:42:53,330 --> 00:42:58,730
would have a test method test length of

00:42:56,240 --> 00:43:00,770
a saloon with empty string and for the

00:42:58,730 --> 00:43:04,240
Infinity case or something you also want

00:43:00,770 --> 00:43:08,480
to write another test case for that

00:43:04,240 --> 00:43:11,780
another best practice practice or not we

00:43:08,480 --> 00:43:12,530
have soft is the entire problem space of

00:43:11,780 --> 00:43:17,480
random data

00:43:12,530 --> 00:43:19,880
so one thing of testing one way of

00:43:17,480 --> 00:43:22,040
testing is you specify exactly the

00:43:19,880 --> 00:43:26,270
values you want so for example I create

00:43:22,040 --> 00:43:29,240
a note with in quote my title and the

00:43:26,270 --> 00:43:32,450
body is my text body and so on and so

00:43:29,240 --> 00:43:35,800
forth which is nice it works but it

00:43:32,450 --> 00:43:40,300
doesn't help you to find the edge cases

00:43:35,800 --> 00:43:44,510
for example this the edge case of some

00:43:40,300 --> 00:43:47,600
random characters which play well in

00:43:44,510 --> 00:43:49,760
HTML like the ampersand and the bigger

00:43:47,600 --> 00:43:54,170
sign I don't know it's the measure mark

00:43:49,760 --> 00:43:57,260
everything could cause an edge case so

00:43:54,170 --> 00:44:01,790
one way to deal with that is to use

00:43:57,260 --> 00:44:04,760
vendÃ´me data instead of actual static

00:44:01,790 --> 00:44:07,040
strings in this case we provide the

00:44:04,760 --> 00:44:09,020
Wendon string method in tuple which

00:44:07,040 --> 00:44:10,820
generates a random string but it not

00:44:09,020 --> 00:44:12,740
only generates a random string it

00:44:10,820 --> 00:44:16,250
actually provides a random string vers

00:44:12,740 --> 00:44:17,960
special characters always so this is

00:44:16,250 --> 00:44:20,390
these are the two characters which are

00:44:17,960 --> 00:44:23,690
always included when we generate a

00:44:20,390 --> 00:44:25,940
Windows thing on the other hand that has

00:44:23,690 --> 00:44:29,510
downsides for example it makes it harder

00:44:25,940 --> 00:44:32,210
to debug from you won it once you get a

00:44:29,510 --> 00:44:34,610
failure you run it again and then the

00:44:32,210 --> 00:44:37,390
entire output looks different because

00:44:34,610 --> 00:44:39,860
you have different random strings so

00:44:37,390 --> 00:44:42,200
think about whether you really want

00:44:39,860 --> 00:44:44,690
random data but I would recommend for

00:44:42,200 --> 00:44:47,000
user input related stuff it's probably

00:44:44,690 --> 00:44:49,670
better to have random data because that

00:44:47,000 --> 00:44:56,150
provides you potentially a better

00:44:49,670 --> 00:44:58,430
security yeah I one thing we should

00:44:56,150 --> 00:45:00,980
experiment with is actually the idea to

00:44:58,430 --> 00:45:03,560
somehow be able to reset their Vendome

00:45:00,980 --> 00:45:05,720
see it because then you could for

00:45:03,560 --> 00:45:07,640
example figure out ok this was the

00:45:05,720 --> 00:45:09,740
brendham seed we used to generate the

00:45:07,640 --> 00:45:11,600
random data and then we could set the

00:45:09,740 --> 00:45:13,400
same window seat again on the next test

00:45:11,600 --> 00:45:17,360
run and then it would produce the same

00:45:13,400 --> 00:45:20,870
random data but that's nothing

00:45:17,360 --> 00:45:23,360
so another pest but best practice is the

00:45:20,870 --> 00:45:26,860
idea of whiskey test PHP unit has a way

00:45:23,360 --> 00:45:30,710
to detect common problems with tests

00:45:26,860 --> 00:45:33,620
what are common problems with tests one

00:45:30,710 --> 00:45:35,540
one is the idea of having no assertions

00:45:33,620 --> 00:45:37,280
when you have no assertions your test is

00:45:35,540 --> 00:45:40,520
pointless because it's testing nothing

00:45:37,280 --> 00:45:44,930
another common thing is unintentional

00:45:40,520 --> 00:45:47,090
code coverage that happens if you like

00:45:44,930 --> 00:45:48,830
test a specific thing with a unit test

00:45:47,090 --> 00:45:50,990
but do actually call out to some other

00:45:48,830 --> 00:45:53,000
code but a unit test by definition

00:45:50,990 --> 00:45:56,060
should just test that unit and not

00:45:53,000 --> 00:45:58,820
something else so by having those

00:45:56,060 --> 00:46:00,260
whiskey test detections PHP node can

00:45:58,820 --> 00:46:01,610
tell you oh you're actually calling out

00:46:00,260 --> 00:46:03,980
to some other code you probably don't

00:46:01,610 --> 00:46:07,220
want to call to another common thing is

00:46:03,980 --> 00:46:10,520
like output here you see printer here so

00:46:07,220 --> 00:46:12,620
you don't want to do that it is bad PHP

00:46:10,520 --> 00:46:14,420
code to print out stuff because you want

00:46:12,620 --> 00:46:17,650
to collect the stuff together and then

00:46:14,420 --> 00:46:20,870
print out at the end of the request

00:46:17,650 --> 00:46:23,870
another common thing is really flow

00:46:20,870 --> 00:46:26,720
coach so in this example I just came up

00:46:23,870 --> 00:46:29,160
with like an example sleep 20 you know

00:46:26,720 --> 00:46:30,930
sleep function is probably working

00:46:29,160 --> 00:46:33,299
it's the same as in JavaScript it's the

00:46:30,930 --> 00:46:35,519
type of function but actually you know

00:46:33,299 --> 00:46:36,839
stuff like that can happen right and you

00:46:35,519 --> 00:46:40,069
want to detect that and early as

00:46:36,839 --> 00:46:43,799
possible in this case the others good

00:46:40,069 --> 00:46:46,109
time out takes milliseconds so maybe

00:46:43,799 --> 00:46:49,920
there was about here another common

00:46:46,109 --> 00:46:52,500
thing is to change some global State for

00:46:49,920 --> 00:46:55,559
example the law will use a class user

00:46:52,500 --> 00:46:59,160
where we ever and that's also bad

00:46:55,559 --> 00:47:02,519
practice so whisky tests allow us to

00:46:59,160 --> 00:47:04,200
detect common problems and you should

00:47:02,519 --> 00:47:05,880
totally enable them we have enable some

00:47:04,200 --> 00:47:09,089
of them by default but not all of them I

00:47:05,880 --> 00:47:12,480
think for example we have not enabled

00:47:09,089 --> 00:47:14,880
the SLO test detection because browser

00:47:12,480 --> 00:47:17,430
tests as we talked about a much slower

00:47:14,880 --> 00:47:22,049
so they would always say in basically

00:47:17,430 --> 00:47:24,990
because for justice now another thing we

00:47:22,049 --> 00:47:29,009
found out is that we don't need T

00:47:24,990 --> 00:47:34,190
functions in our tests so a T function

00:47:29,009 --> 00:47:36,690
translates our some arbitrary string and

00:47:34,190 --> 00:47:38,730
you could do that in your test so for

00:47:36,690 --> 00:47:43,529
example you press a button and then you

00:47:38,730 --> 00:47:45,630
specify okay I want to press T safe so I

00:47:43,529 --> 00:47:47,670
want to press the Save button and the T

00:47:45,630 --> 00:47:49,289
function is web the wanted swim but

00:47:47,670 --> 00:47:52,109
actually it is pointless because the T

00:47:49,289 --> 00:47:54,539
function is doing basically nothing if

00:47:52,109 --> 00:47:58,529
you have no it okay module in a bit

00:47:54,539 --> 00:48:07,400
and therefore you just you don't test

00:47:58,529 --> 00:48:07,400
anything at all my screen is working

00:48:07,690 --> 00:48:18,880
maybe whoo

00:48:11,350 --> 00:48:18,880
the matrix is coming what you doing oh

00:48:21,430 --> 00:48:40,190
they did well maybe think we started it

00:48:27,170 --> 00:48:41,890
should I see yeah I did hmm there we go

00:48:40,190 --> 00:48:46,280
thank you

00:48:41,890 --> 00:48:47,540
yeah so anyway best practices don't use

00:48:46,280 --> 00:48:49,730
tea functions in your test

00:48:47,540 --> 00:48:52,190
unlike unless you actually test

00:48:49,730 --> 00:48:55,550
translation related stuff and you should

00:48:52,190 --> 00:48:58,370
do this of course another best practice

00:48:55,550 --> 00:49:02,470
is to write simple tests so here at the

00:48:58,370 --> 00:49:05,390
top we see an example of four module so

00:49:02,470 --> 00:49:08,000
in there we have some set of code and

00:49:05,390 --> 00:49:12,710
then we get first the amount of unread

00:49:08,000 --> 00:49:16,250
topics twins provide a string called

00:49:12,710 --> 00:49:20,030
like one new test go new post or an

00:49:16,250 --> 00:49:23,260
account new posts then we do an XPath

00:49:20,030 --> 00:49:26,810
which tries to find a certain link and

00:49:23,260 --> 00:49:30,860
then we ensure that there are n amount

00:49:26,810 --> 00:49:33,590
of unread topics given that your setup

00:49:30,860 --> 00:49:38,000
code is always deterministic it always

00:49:33,590 --> 00:49:40,880
returns in this example six new Android

00:49:38,000 --> 00:49:43,900
topics okay so this function always

00:49:40,880 --> 00:49:49,610
return six this function always returns

00:49:43,900 --> 00:49:51,650
six new posts and then you do and then

00:49:49,610 --> 00:49:54,050
you do certain down here is always doing

00:49:51,650 --> 00:49:57,080
the same so we could basically collapse

00:49:54,050 --> 00:50:00,740
it down to this single line link exists

00:49:57,080 --> 00:50:03,260
fix new posts so yeah what I want to

00:50:00,740 --> 00:50:06,260
savor that try to write readable and

00:50:03,260 --> 00:50:10,310
small tests which kind of tests stuff

00:50:06,260 --> 00:50:14,090
another thing what this example shows

00:50:10,310 --> 00:50:18,400
you is that if you write those kind of

00:50:14,090 --> 00:50:20,440
lines those are those enable you to

00:50:18,400 --> 00:50:22,789
refactor the underlying

00:50:20,440 --> 00:50:26,029
application much easier because that one

00:50:22,789 --> 00:50:27,440
really implement or really need some

00:50:26,029 --> 00:50:30,619
implementation details for example it

00:50:27,440 --> 00:50:32,569
requires that your HTML has like a table

00:50:30,619 --> 00:50:34,490
and you know at some point people

00:50:32,569 --> 00:50:36,289
thought maybe take this are not a good

00:50:34,490 --> 00:50:41,240
way anymore maybe that will happen in

00:50:36,289 --> 00:50:43,299
the future so you know some kind of that

00:50:41,240 --> 00:50:46,609
kind of test code this is much better to

00:50:43,299 --> 00:50:48,410
to maintain and week and everything so

00:50:46,609 --> 00:50:50,210
another thing which is a little bit of

00:50:48,410 --> 00:50:53,769
another topic is the idea of test

00:50:50,210 --> 00:50:57,140
abstractions and you have abstract code

00:50:53,769 --> 00:51:00,349
like code which does something for every

00:50:57,140 --> 00:51:02,900
entity type and then you want to test

00:51:00,349 --> 00:51:05,210
that one thing you could do is you could

00:51:02,900 --> 00:51:08,089
iterate over the entity type and then

00:51:05,210 --> 00:51:10,970
try to come up with the expected values

00:51:08,089 --> 00:51:13,640
for every entity type and then test that

00:51:10,970 --> 00:51:15,079
so the problem is that you basically

00:51:13,640 --> 00:51:17,990
introduce the same kind of abstraction

00:51:15,079 --> 00:51:21,220
as you do in your one-time code if you

00:51:17,990 --> 00:51:23,690
do abstractions on your test code and

00:51:21,220 --> 00:51:25,309
that has the problem that if your

00:51:23,690 --> 00:51:28,579
one-time code has a bug in their

00:51:25,309 --> 00:51:30,200
abstraction layer your test property has

00:51:28,579 --> 00:51:33,799
the same bug in your abstraction layer

00:51:30,200 --> 00:51:37,430
so the alternative is to always use

00:51:33,799 --> 00:51:40,759
concrete examples so instead of testing

00:51:37,430 --> 00:51:43,880
every entity type just test note user

00:51:40,759 --> 00:51:47,539
and the energy test the entity type for

00:51:43,880 --> 00:51:49,789
example so on the other hand it is good

00:51:47,539 --> 00:51:52,549
to avoid test abstractions but don't use

00:51:49,789 --> 00:51:55,369
the same abstractions in your tests s in

00:51:52,549 --> 00:51:58,160
your one-time code because tests are not

00:51:55,369 --> 00:52:01,519
your one-time code tests are totally

00:51:58,160 --> 00:52:03,619
different and code style or like best

00:52:01,519 --> 00:52:06,849
practices for one-time code doesn't

00:52:03,619 --> 00:52:10,059
necessarily apply to test code only

00:52:06,849 --> 00:52:12,680
we've seen 50 unit now for a while and

00:52:10,059 --> 00:52:15,259
we want to bring it into core and really

00:52:12,680 --> 00:52:18,140
knavish it for everything and this is

00:52:15,259 --> 00:52:23,210
the better plan we came up with doing

00:52:18,140 --> 00:52:25,430
discussions in the recent months so what

00:52:23,210 --> 00:52:30,049
we agreed on is we create a sandbox

00:52:25,430 --> 00:52:33,160
where we convert as much as possible and

00:52:30,049 --> 00:52:38,260
we get that working and

00:52:33,160 --> 00:52:40,330
proper working like resilient against

00:52:38,260 --> 00:52:42,070
random test failures so for example with

00:52:40,330 --> 00:52:44,110
the plan is to convert everything and

00:52:42,070 --> 00:52:46,240
then run it against the test spot really

00:52:44,110 --> 00:52:50,500
often so we can detect when new test

00:52:46,240 --> 00:52:53,530
failures like if every tenth one causes

00:52:50,500 --> 00:52:55,450
a failure because some box somewhere we

00:52:53,530 --> 00:52:59,200
want to detect that as early as possible

00:52:55,450 --> 00:53:01,600
because we don't want to block like

00:52:59,200 --> 00:53:03,880
other work which is going on and I don't

00:53:01,600 --> 00:53:07,570
know media or stuff like that

00:53:03,880 --> 00:53:10,930
so by doing by having like a sandbox in

00:53:07,570 --> 00:53:13,590
which we experiment we can ensure that

00:53:10,930 --> 00:53:18,100
and then like when we are done hopefully

00:53:13,590 --> 00:53:20,860
until February 2017 which is the 8.3

00:53:18,100 --> 00:53:23,710
alpha the plan is then to commit this

00:53:20,860 --> 00:53:26,770
big Big Bang crash into corn then

00:53:23,710 --> 00:53:30,220
hopefully most of the conversions are

00:53:26,770 --> 00:53:32,650
done at the end I want to invite you to

00:53:30,220 --> 00:53:35,160
discuss a little bit about it there are

00:53:32,650 --> 00:53:39,580
a lot of questions you could ask because

00:53:35,160 --> 00:53:42,010
the testing framework is not just that

00:53:39,580 --> 00:53:44,320
if for example supporter is provided a

00:53:42,010 --> 00:53:47,110
UI what should we do that like are you

00:53:44,320 --> 00:53:48,790
using the UI is it useful what do we do

00:53:47,110 --> 00:53:52,510
with it like do we replace it with

00:53:48,790 --> 00:53:55,650
another UI do we remove it to be just

00:53:52,510 --> 00:53:58,600
keep it to be improve it for phpunit

00:53:55,650 --> 00:54:00,490
yeah open questions another one is what

00:53:58,600 --> 00:54:02,590
do we do with the one test that fh

00:54:00,490 --> 00:54:05,080
command this allows you to run tests

00:54:02,590 --> 00:54:07,330
using simple tests for simple tests but

00:54:05,080 --> 00:54:09,130
you know we have PHP unit and as we saw

00:54:07,330 --> 00:54:13,210
before you can trust one then this PHP

00:54:09,130 --> 00:54:16,300
unit so do we need it a couple of more

00:54:13,210 --> 00:54:18,550
questions is for our for example do we

00:54:16,300 --> 00:54:21,370
use so we are using phantom chess and

00:54:18,550 --> 00:54:24,160
some guests and chairs which is weird

00:54:21,370 --> 00:54:26,170
custom stuff in a way should be inside

00:54:24,160 --> 00:54:29,350
you selenium and webdriver which are

00:54:26,170 --> 00:54:31,480
extra browsers so we can blacken like

00:54:29,350 --> 00:54:34,030
Firefox or something like that which is

00:54:31,480 --> 00:54:36,160
much better opportunity another question

00:54:34,030 --> 00:54:38,290
is when do we deprecate and remove

00:54:36,160 --> 00:54:40,810
simple tests finally or should we ever

00:54:38,290 --> 00:54:44,690
do that or something so yeah these are

00:54:40,810 --> 00:54:46,549
questions and yeah let's discuss

00:54:44,690 --> 00:54:48,319
yes so there's a microphone over there

00:54:46,549 --> 00:54:49,789
you can if you're speaking a microphone

00:54:48,319 --> 00:54:53,270
then it's in a recording and everybody

00:54:49,789 --> 00:54:55,490
can hear it so in the meantime what we

00:54:53,270 --> 00:54:57,260
discussed yesterday for duplicating and

00:54:55,490 --> 00:55:01,670
removing simple tests if you can make

00:54:57,260 --> 00:55:03,289
this happen to have this in 2017 in

00:55:01,670 --> 00:55:06,020
February committing a big bank patch

00:55:03,289 --> 00:55:10,250
where we do a lot of conversions then we

00:55:06,020 --> 00:55:12,319
might make simple tests deprecated one

00:55:10,250 --> 00:55:14,059
release after that so for 2 / 8 that for

00:55:12,319 --> 00:55:17,960
us would have a gradual process as soon

00:55:14,059 --> 00:55:20,000
as the conversion is done we committed

00:55:17,960 --> 00:55:21,650
the deprecated attack to the 8.4 that

00:55:20,000 --> 00:55:23,690
extra branch so with the next release

00:55:21,650 --> 00:55:25,670
when that comes out in about a year

00:55:23,690 --> 00:55:27,980
really simple test is deprecated and we

00:55:25,670 --> 00:55:29,869
should start every new test that you

00:55:27,980 --> 00:55:35,270
write should really be a browser test

00:55:29,869 --> 00:55:36,950
based which uses PHP on it yeah for the

00:55:35,270 --> 00:55:39,020
simple test UI I think I opened an issue

00:55:36,950 --> 00:55:40,640
a couple of months ago and it got some

00:55:39,020 --> 00:55:42,980
some feedback that people are actually

00:55:40,640 --> 00:55:44,690
using it the simple test UI so what we

00:55:42,980 --> 00:55:47,510
discussed yesterday is that we would try

00:55:44,690 --> 00:55:49,819
to pump as much output that PHP unit

00:55:47,510 --> 00:55:51,859
gives us into this legacy simple test

00:55:49,819 --> 00:55:54,740
you guys so that even if you execute a

00:55:51,859 --> 00:55:56,510
PHP unit test from this simple test UI

00:55:54,740 --> 00:55:58,480
which is currently possible to some

00:55:56,510 --> 00:56:01,819
extent so that you at least see some

00:55:58,480 --> 00:56:05,000
debug output for example which URLs the

00:56:01,819 --> 00:56:07,190
browser has actually visited and also

00:56:05,000 --> 00:56:09,260
which assertion has failed in at which

00:56:07,190 --> 00:56:11,029
line this should be possible with not

00:56:09,260 --> 00:56:12,859
too much effort the reason we want to

00:56:11,029 --> 00:56:14,029
get get rid of simple test UI because we

00:56:12,859 --> 00:56:16,670
don't want to have the maintenance

00:56:14,029 --> 00:56:18,109
burden right we are switching to PHP

00:56:16,670 --> 00:56:19,789
unit because we don't want to be in the

00:56:18,109 --> 00:56:21,890
business of maintaining our own test

00:56:19,789 --> 00:56:24,559
Runner because basically simple test has

00:56:21,890 --> 00:56:26,510
been committed to core and there is no

00:56:24,559 --> 00:56:28,609
external maintenance we have to all to

00:56:26,510 --> 00:56:29,960
do this all ourselves and we actually

00:56:28,609 --> 00:56:32,690
want to leverage Beauty unit which is

00:56:29,960 --> 00:56:36,819
supported by a wider audience by several

00:56:32,690 --> 00:56:36,819
frameworks and other projects yeah

00:56:37,270 --> 00:56:42,260
nobody's asking questions here I'm just

00:56:39,740 --> 00:56:44,480
answering my own stuff well we can

00:56:42,260 --> 00:56:54,510
continue to discuss

00:56:44,480 --> 00:56:57,720
yeah sure sugar be quick so the the the

00:56:54,510 --> 00:57:01,380
first time they I approached the new

00:56:57,720 --> 00:57:04,380
testing way I got some good stock

00:57:01,380 --> 00:57:07,860
because one example that were probably

00:57:04,380 --> 00:57:09,420
have it if the data provider we in the

00:57:07,860 --> 00:57:15,410
right saying that we can use data

00:57:09,420 --> 00:57:18,900
provider on on unit testing and even the

00:57:15,410 --> 00:57:22,590
HP unit test case and not with the word

00:57:18,900 --> 00:57:24,570
test yeah usually the use case for data

00:57:22,590 --> 00:57:26,190
providers Muslim unit tests and the

00:57:24,570 --> 00:57:28,190
kernel tests integration test they might

00:57:26,190 --> 00:57:31,140
make sense there as well for browser

00:57:28,190 --> 00:57:33,330
tests they should still work so the

00:57:31,140 --> 00:57:35,520
problem with browser tests is that they

00:57:33,330 --> 00:57:38,520
are really slow and each data provider

00:57:35,520 --> 00:57:40,080
entry starts up a new Drupal instance so

00:57:38,520 --> 00:57:41,520
it's really a train of if you use a data

00:57:40,080 --> 00:57:43,140
provider with browser tests that you

00:57:41,520 --> 00:57:46,920
have just few test cases in your data

00:57:43,140 --> 00:57:49,230
provider then Drupal will install the

00:57:46,920 --> 00:57:51,810
site four times the test site four times

00:57:49,230 --> 00:57:53,520
and run it for each set for each entry

00:57:51,810 --> 00:57:56,880
in that's in this set and it makes it

00:57:53,520 --> 00:57:59,220
really really slow yeah it's good to

00:57:56,880 --> 00:58:02,190
have to be at the presentation because I

00:57:59,220 --> 00:58:05,790
know I do understand the same problem

00:58:02,190 --> 00:58:09,270
that I had is with the cover and almost

00:58:05,790 --> 00:58:14,520
trying to test a Drupal internal

00:58:09,270 --> 00:58:16,500
function and probably on defining the

00:58:14,520 --> 00:58:18,660
covert talk probably the module is no

00:58:16,500 --> 00:58:21,660
loaded at that time and I get an

00:58:18,660 --> 00:58:23,310
exception yes so it would be good to

00:58:21,660 --> 00:58:24,810
it's good now to understand it would be

00:58:23,310 --> 00:58:27,300
good to have these documentation

00:58:24,810 --> 00:58:29,790
somewhere which times you can use with

00:58:27,300 --> 00:58:31,860
this tag with this tester which we

00:58:29,790 --> 00:58:34,050
started to write PHP unit documentation

00:58:31,860 --> 00:58:35,820
at Drupa that org slash PHP on it so

00:58:34,050 --> 00:58:37,200
there's no I browser test tutorial which

00:58:35,820 --> 00:58:39,210
you can look at there's some

00:58:37,200 --> 00:58:40,620
explanations how to run PHP unit tests

00:58:39,210 --> 00:58:46,680
there's been about kernel test case and

00:58:40,620 --> 00:58:49,020
and how to use that but yeah the unit

00:58:46,680 --> 00:58:51,090
documentation itself on PHP unit dot de

00:58:49,020 --> 00:58:52,620
for whatever reason it's pretty good

00:58:51,090 --> 00:58:55,470
like if you want to learn about unit

00:58:52,620 --> 00:58:55,990
testing itself go to that side it has a

00:58:55,470 --> 00:58:58,150
lot of

00:58:55,990 --> 00:59:01,270
documentation and like it explains every

00:58:58,150 --> 00:59:04,599
assertion and providers and whatnot

00:59:01,270 --> 00:59:05,950
yeah and forth for historic reasons some

00:59:04,599 --> 00:59:07,510
Drupal stuff is really hard to test

00:59:05,950 --> 00:59:08,920
because we have we had a different code

00:59:07,510 --> 00:59:11,740
base in Drupal seven and it's also the

00:59:08,920 --> 00:59:13,300
reason why I find almost zero unit test

00:59:11,740 --> 00:59:16,030
coverage in Drupal seven because was so

00:59:13,300 --> 00:59:18,520
hard to unifies Drupal seven because it

00:59:16,030 --> 00:59:21,460
was very hard to swap out dependencies

00:59:18,520 --> 00:59:23,050
our code depended on so functions which

00:59:21,460 --> 00:59:24,640
is calling other functions how do you

00:59:23,050 --> 00:59:26,560
swap out their function call which is

00:59:24,640 --> 00:59:27,580
just hard coded it doesn't work so

00:59:26,560 --> 00:59:30,760
that's the reason why we have so many

00:59:27,580 --> 00:59:33,760
web tests and had to basically write

00:59:30,760 --> 00:59:36,010
everything in PHP unit tests from from

00:59:33,760 --> 00:59:38,380
scratch for to plate and even Drupal 8

00:59:36,010 --> 00:59:40,540
is not that mature yet that we have to

00:59:38,380 --> 00:59:42,730
do sometimes some weird module include

00:59:40,540 --> 00:59:44,109
so that constants are there this is

00:59:42,730 --> 00:59:46,089
really a problem yes unfortunately

00:59:44,109 --> 00:59:54,520
Drupal 8 is not the perfect system that

00:59:46,089 --> 00:59:55,480
it should be it's so pretty good I just

00:59:54,520 --> 00:59:58,540
wanted to make a quick note it's

00:59:55,480 --> 01:00:00,400
sometimes nice to test the zero case an

00:59:58,540 --> 01:00:02,589
empty array the empty string or

01:00:00,400 --> 01:00:04,720
something with just one item so it's

01:00:02,589 --> 01:00:06,970
number zero number one because often you

01:00:04,720 --> 01:00:08,589
have some special behavior for that and

01:00:06,970 --> 01:00:10,030
and then it works for all the other

01:00:08,589 --> 01:00:11,320
numbers and just with zero it suddenly

01:00:10,030 --> 01:00:13,510
just something all right

01:00:11,320 --> 01:00:16,210
instead of returning false it returns

01:00:13,510 --> 01:00:17,880
null or something and so you sometimes

01:00:16,210 --> 01:00:21,339
want to have a special test for that one

01:00:17,880 --> 01:00:23,140
yeah I would advise not to use assert

01:00:21,339 --> 01:00:24,970
empty or something so you should always

01:00:23,140 --> 01:00:31,180
make sure that the data types that you

01:00:24,970 --> 01:00:33,339
are asserting with it exactly assert

01:00:31,180 --> 01:00:36,730
false yes then you get the exact match

01:00:33,339 --> 01:00:38,980
yeah yeah I was mostly talking about

01:00:36,730 --> 01:00:40,119
editing as a parameter of some function

01:00:38,980 --> 01:00:41,920
that you want to test not that's a

01:00:40,119 --> 01:00:48,790
return value but of course it's also

01:00:41,920 --> 01:00:51,609
important yeah you touched on it a

01:00:48,790 --> 01:00:54,760
little bit with the random data testing

01:00:51,609 --> 01:00:59,380
how does PHP unit integrate with fuzzing

01:00:54,760 --> 01:01:01,720
database or fuzz testing I think not out

01:00:59,380 --> 01:01:04,390
of the box yeah far as I know I haven't

01:01:01,720 --> 01:01:07,720
seen anything but i'm i would bet there

01:01:04,390 --> 01:01:08,970
was some kind of peace beyond blacking

01:01:07,720 --> 01:01:10,830
out there which

01:01:08,970 --> 01:01:12,210
does that kind of stuff so what we

01:01:10,830 --> 01:01:14,760
haven't get requires a trait which

01:01:12,210 --> 01:01:16,710
provides the random data I'm not a big

01:01:14,760 --> 01:01:18,300
fan of it so my stance on this issue is

01:01:16,710 --> 01:01:19,740
that you shouldn't use random data at

01:01:18,300 --> 01:01:21,390
all in your tests because mixing tests

01:01:19,740 --> 01:01:23,520
unpredictable I'm a fan of predictable

01:01:21,390 --> 01:01:25,200
tests so always the same screen Daniel

01:01:23,520 --> 01:01:27,660
made a point that it's important to test

01:01:25,200 --> 01:01:29,280
special characters and the problem is if

01:01:27,660 --> 01:01:30,869
you test special characters only

01:01:29,280 --> 01:01:33,150
sometimes you will only get sometimes

01:01:30,869 --> 01:01:34,859
fails so we have random test fails this

01:01:33,150 --> 01:01:36,690
makes dealing with with random data

01:01:34,859 --> 01:01:38,640
really really annoying to me I don't

01:01:36,690 --> 01:01:40,410
like it when tests randomly fail and I

01:01:38,640 --> 01:01:42,480
have to track it down what was the cause

01:01:40,410 --> 01:01:45,180
we watch character in the random string

01:01:42,480 --> 01:01:47,430
wasn't which what yeah right but on the

01:01:45,180 --> 01:01:52,830
other hand you don't find the when in

01:01:47,430 --> 01:01:54,540
test failures yes then you have no

01:01:52,830 --> 01:01:56,340
coverage at all right because yeah right

01:01:54,540 --> 01:02:02,970
those are actual bugs in your code no

01:01:56,340 --> 01:02:04,800
bugs in your tests most of the time yeah

01:02:02,970 --> 01:02:08,099
I mean if you find something if you know

01:02:04,800 --> 01:02:10,050
something just maybe open up an issue I

01:02:08,099 --> 01:02:12,690
mean for XSS for example it could be

01:02:10,050 --> 01:02:24,300
pretty useful actually fix SS tests and

01:02:12,690 --> 01:02:30,089
that kind of security related stuff like

01:02:24,300 --> 01:02:32,490
that I wonder if there's a different

01:02:30,089 --> 01:02:34,589
application and you want to mock that in

01:02:32,490 --> 01:02:36,720
so you don't have that component

01:02:34,589 --> 01:02:41,220
interfering with your with your tests or

01:02:36,720 --> 01:02:42,869
with your own code so yeah this there

01:02:41,220 --> 01:02:45,089
are a couple of possibilities to go from

01:02:42,869 --> 01:02:46,770
very primitive to very high level so in

01:02:45,089 --> 01:02:48,720
Drupal 7 for example I remember you

01:02:46,770 --> 01:02:50,970
could use triple HTTP request and it

01:02:48,720 --> 01:02:52,980
actually had a variable in there and

01:02:50,970 --> 01:02:54,270
which function you should use to call so

01:02:52,980 --> 01:02:56,130
you could swap that out and provide a

01:02:54,270 --> 01:02:57,990
static function which returns a static

01:02:56,130 --> 01:02:59,640
chase instead of going out some to some

01:02:57,990 --> 01:03:02,040
web requests and doing something so we

01:02:59,640 --> 01:03:04,410
can do stuff like that or you if you use

01:03:02,040 --> 01:03:08,070
proper dependency injection you have

01:03:04,410 --> 01:03:09,450
some HTTP client injected into your your

01:03:08,070 --> 01:03:10,859
class that you want to test that then

01:03:09,450 --> 01:03:13,890
makes the request you can say I will

01:03:10,859 --> 01:03:15,300
give you the fake page fake HTTP client

01:03:13,890 --> 01:03:16,920
and then it calls a method on that fake

01:03:15,300 --> 01:03:18,390
and of course the fake is totally under

01:03:16,920 --> 01:03:20,500
your control and you can totally mark it

01:03:18,390 --> 01:03:22,670
so if you do

01:03:20,500 --> 01:03:24,890
object-oriented programming properly

01:03:22,670 --> 01:03:32,480
with dependency injection it's not such

01:03:24,890 --> 01:03:36,260
a big of a deal last question you can

01:03:32,480 --> 01:03:39,170
also use tools like soap UI for mocking

01:03:36,260 --> 01:03:41,690
your actual web services you can a

01:03:39,170 --> 01:03:42,740
completely program every response are

01:03:41,690 --> 01:03:46,010
free

01:03:42,740 --> 01:03:48,080
every operation every chain you want so

01:03:46,010 --> 01:03:49,850
you have actually two sets you know I'm

01:03:48,080 --> 01:03:51,470
the one I hear if your code on the test

01:03:49,850 --> 01:03:54,140
and on the other end you have a

01:03:51,470 --> 01:03:56,210
programmed set of responses in the soap

01:03:54,140 --> 01:03:59,240
URI environment that's the way we used

01:03:56,210 --> 01:04:02,180
to test and develop against mock

01:03:59,240 --> 01:04:05,660
services what was the name again so Q I

01:04:02,180 --> 01:04:07,880
so Qi yeah it's you can use it for show

01:04:05,660 --> 01:04:09,620
interfaces and rest interfaces nowadays

01:04:07,880 --> 01:04:12,350
it's good now yeah I think there was

01:04:09,620 --> 01:04:15,230
also some PHP projects which used the

01:04:12,350 --> 01:04:17,660
metaphor of a video recorder so I think

01:04:15,230 --> 01:04:19,370
you can say recording you have some API

01:04:17,660 --> 01:04:21,440
course and it would record and write

01:04:19,370 --> 01:04:23,330
those responses down and then you can

01:04:21,440 --> 01:04:26,810
replay those responses in your test

01:04:23,330 --> 01:04:31,000
that's possible and with so Qi fuf WSDL

01:04:26,810 --> 01:04:33,350
you can have so Qi create a mock surface

01:04:31,000 --> 01:04:35,270
automatically creating more responses

01:04:33,350 --> 01:04:38,840
things like that actually really handy

01:04:35,270 --> 01:04:41,930
for testing what services it's good to

01:04:38,840 --> 01:04:43,520
know thank you so I think with that I

01:04:41,930 --> 01:04:45,760
think we're finished thanks for

01:04:43,520 --> 01:04:45,760
attention

01:04:50,170 --> 01:04:53,890
one general announcement join us on

01:04:52,089 --> 01:04:55,359
Friday for a contribution sprints even

01:04:53,890 --> 01:04:58,329
if you have it contributed to Drupal

01:04:55,359 --> 01:05:00,190
core any contrib modules there's a good

01:04:58,329 --> 01:05:01,509
first time split up workshop where you

01:05:00,190 --> 01:05:03,339
can get started with Drupal development

01:05:01,509 --> 01:05:05,259
also mentor Corps Sprint's to work on

01:05:03,339 --> 01:05:08,799
Drupal core it's a great opportunity to

01:05:05,259 --> 01:05:11,079
join the community and don't forget to

01:05:08,799 --> 01:05:13,210
evaluate the sessions on the event sites

01:05:11,079 --> 01:05:13,749
so that we can nice reviews and get to

01:05:13,210 --> 01:05:16,680
do this again

01:05:13,749 --> 01:05:16,680

YouTube URL: https://www.youtube.com/watch?v=jcdEp3YGa94


