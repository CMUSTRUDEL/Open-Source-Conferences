Title: DrupalCon Dublin 2016: S.R.E. - create ultra-scalable and highly reliable systems
Publication date: 2016-09-27
Playlist: DrupalCon Dublin 2016
Description: 
	What is SRE?

SRE stands for Site reliability engineering. A word crafted by Google in 2003 when Ben Treynor was hired to lead a team of seven software engineers to run a production environment. Managing such large systems with sizes never seen and still merging new features seamlessly was an huge challenge. Today this paradigm has been adopted by several companies like Microsoft, Apple, Facebook, Dropbox, Amazon and Oracle. They all have assembled SRE teams.



“Spock. This child is about to wipe out every living thing on Earth. Now, what do you suggest we do….spank it?” — Dr. McCoy, Star Trek: The Motion Picture



Yes… Manual Work is killing us all. What should we be doing about it?

We all know how monitoring sucks, platforms fail and manual tasks burn out good Engineers. A site reliability engineer (SRE) uses less than 50% of the time doing "ops" related work such as tickets, alert response or manual fixes. It’s expected that a platform where an SRE team works should be highly automated and self-healing. More than 50% of the time an SRE is automating infrastructure and testing these new features.

Do you have to choose stability versus new features?

More automation means faster time-to-market and continual improvement. Creating self-healing mechanisms or, at the limit, smart rollback strategies to quickly deal with some instability is a strong argument for saying yes to keep the flow of new features. The ideal SRE Engineer has operational, coding and systems knowledge, able to solve complex issues.

What should I expect from this session?

In this session we are going to give examples and inspire change for individuals and companies that are under pressure of repetitive work or seeking innovation in the engineering field. Create incident response automation, self-healing, bring feedback in and break down silos that are impediments to an healthy growth and experimentation.

What about a small Drupal Shop, with few sysadmins?

This will help showing you a different path, but surely the principles of SRE are the way to go. Looking at training and hiring so that sysadmin team gets developers awareness for sensible infrastructure problems. Making sure you're doing blameless postmortems, and fixing all the action items when outages happen. We will detail these and other missed gaps during the session.


“Five card stud, nothing wild. And the sky’s the limit” — Captain Jean Luc Picard, Star Trek: The Next Generation
Captions: 
	00:00:00,000 --> 00:00:07,560
hello everyone and welcome to this

00:00:03,240 --> 00:00:16,170
presentation on a sorry i'll be doing a

00:00:07,560 --> 00:00:19,230
presentation on the devops track first

00:00:16,170 --> 00:00:23,960
of all Who am I my name is Ricardo Maru

00:00:19,230 --> 00:00:27,720
I work on the operations team in aquia

00:00:23,960 --> 00:00:31,500
tier 2 since 2011 base in lisbon

00:00:27,720 --> 00:00:35,910
portugal i'm currently transitioned to s

00:00:31,500 --> 00:00:39,719
re site reliability engineer i adapted

00:00:35,910 --> 00:00:41,719
linux since the nineties been in the

00:00:39,719 --> 00:00:44,489
Drupal community for over eight years

00:00:41,719 --> 00:00:50,820
mainly contributing to the

00:00:44,489 --> 00:00:53,660
infrastructure and testing teams you

00:00:50,820 --> 00:01:00,899
guys know of the test bought drupal CI

00:00:53,660 --> 00:01:05,729
drupal CI someone drupal see I ok and

00:01:00,899 --> 00:01:09,330
this is where I started applying sre it

00:01:05,729 --> 00:01:13,110
used to take a lot of manual work until

00:01:09,330 --> 00:01:16,009
I decided to start and fix and ultimate

00:01:13,110 --> 00:01:19,560
a lot of the stuff that we do back home

00:01:16,009 --> 00:01:23,970
so now we never miss any of the fun like

00:01:19,560 --> 00:01:29,400
you can see in the picture so here are

00:01:23,970 --> 00:01:32,159
some numbers from action aquia we have a

00:01:29,400 --> 00:01:37,350
total of seventeen thousand two hundred

00:01:32,159 --> 00:01:41,280
more or less instances running 54,000

00:01:37,350 --> 00:01:46,409
sides production sites not counting with

00:01:41,280 --> 00:01:50,750
the devs and tests around 3000 API calls

00:01:46,409 --> 00:01:56,070
per second a total of twenty or more

00:01:50,750 --> 00:02:03,020
availability zones and 88 regions am I

00:01:56,070 --> 00:02:07,140
correct think my boss is here sir yeah

00:02:03,020 --> 00:02:10,039
so to have more than 50,000 Drupal sites

00:02:07,140 --> 00:02:13,620
in production would not be sustainable

00:02:10,039 --> 00:02:14,370
without a lot of automation large-scale

00:02:13,620 --> 00:02:19,379
production

00:02:14,370 --> 00:02:22,659
and permanent reliability improvements

00:02:19,379 --> 00:02:26,370
the presentation objective today is to

00:02:22,659 --> 00:02:30,099
present you guys the site reliability

00:02:26,370 --> 00:02:33,750
engineering philosophy and the

00:02:30,099 --> 00:02:41,439
strategies that we are implementing

00:02:33,750 --> 00:02:47,220
internally and here is what we will talk

00:02:41,439 --> 00:02:50,939
today what is s re the tenets of s re

00:02:47,220 --> 00:02:53,980
reliability and toil error budget

00:02:50,939 --> 00:02:56,500
keeping the service level objective

00:02:53,980 --> 00:02:58,810
development and operations monitoring

00:02:56,500 --> 00:03:01,689
and being on call the release

00:02:58,810 --> 00:03:05,650
engineering and the post Martin culture

00:03:01,689 --> 00:03:08,829
and learning from failure this will be

00:03:05,650 --> 00:03:12,280
an overview of the concepts behind it so

00:03:08,829 --> 00:03:15,489
aquia is already in the right way of

00:03:12,280 --> 00:03:20,290
implementing some of these as you will

00:03:15,489 --> 00:03:25,419
see but don't expect any special codes

00:03:20,290 --> 00:03:32,859
or software this is basically about

00:03:25,419 --> 00:03:37,810
managing systems and people to scale so

00:03:32,859 --> 00:03:41,639
first question what is s re please raise

00:03:37,810 --> 00:03:46,299
your hand if you ever heard about s re

00:03:41,639 --> 00:03:51,940
okay and who is applying a sorry from

00:03:46,299 --> 00:03:57,459
here oh nice to let us wonder under

00:03:51,940 --> 00:04:01,120
crowd so what exactly is a site

00:03:57,459 --> 00:04:04,180
reliability engineering the term is

00:04:01,120 --> 00:04:07,540
crafted by google in 2003 when been

00:04:04,180 --> 00:04:11,049
trainer was hired to lead a team of

00:04:07,540 --> 00:04:13,150
seven software developers to run a

00:04:11,049 --> 00:04:15,699
production environment and ended up

00:04:13,150 --> 00:04:18,729
applying software engineering to an

00:04:15,699 --> 00:04:21,009
operations function it is motivated

00:04:18,729 --> 00:04:24,909
originally by the same question as a

00:04:21,009 --> 00:04:27,950
software engineer how would I want to

00:04:24,909 --> 00:04:31,310
invest my time to accomplish a set

00:04:27,950 --> 00:04:35,530
repetitive tasks now it has become much

00:04:31,310 --> 00:04:37,640
more it's a set of principles practices

00:04:35,530 --> 00:04:42,530
incentives within the software

00:04:37,640 --> 00:04:45,170
engineering discipline there are now

00:04:42,530 --> 00:04:48,380
many companies that embraced the site

00:04:45,170 --> 00:04:50,480
reliability engineering and they do take

00:04:48,380 --> 00:04:54,290
it very seriously as you can see on

00:04:50,480 --> 00:05:01,160
their job listings Microsoft Apple

00:04:54,290 --> 00:05:03,830
Amazon Google first and foremost sres

00:05:01,160 --> 00:05:06,410
are engineers they apply the principles

00:05:03,830 --> 00:05:08,450
of computer science and engineering to

00:05:06,410 --> 00:05:12,170
the design and development of competing

00:05:08,450 --> 00:05:14,420
systems sometimes their task is writing

00:05:12,170 --> 00:05:16,490
the software for those systems sometimes

00:05:14,420 --> 00:05:19,690
their task is building all the

00:05:16,490 --> 00:05:23,020
additional pieces those systems need

00:05:19,690 --> 00:05:26,570
like backups or load balancing and

00:05:23,020 --> 00:05:30,260
sometimes their task is figuring out how

00:05:26,570 --> 00:05:36,620
to apply existing solutions to new

00:05:30,260 --> 00:05:41,300
problems ooh who knows exactly what

00:05:36,620 --> 00:05:47,210
DevOps meet from here so not DevOps okay

00:05:41,300 --> 00:05:53,000
so some some people may think that sre

00:05:47,210 --> 00:05:55,580
and DevOps are two overlapping words but

00:05:53,000 --> 00:06:00,190
it's actually the way around while

00:05:55,580 --> 00:06:04,570
DevOps is a practice coined in 2008's

00:06:00,190 --> 00:06:07,340
re-appeared it's asking me for updates

00:06:04,570 --> 00:06:12,770
while I've ups is a practice that

00:06:07,340 --> 00:06:16,220
appeared in 2008's re-appeared some

00:06:12,770 --> 00:06:19,610
years before in 2003 and is taken as a

00:06:16,220 --> 00:06:23,000
subset of DevOps including some extra

00:06:19,610 --> 00:06:26,870
skills like we like the ones that we are

00:06:23,000 --> 00:06:30,880
going to see in this presentation let's

00:06:26,870 --> 00:06:34,280
now take a look at the tenets of sre

00:06:30,880 --> 00:06:37,310
these are taking from the actual Google

00:06:34,280 --> 00:06:40,640
sre book we're actually this

00:06:37,310 --> 00:06:41,540
presentation is based on so you have

00:06:40,640 --> 00:06:45,890
ensuring

00:06:41,540 --> 00:06:49,220
a durable focus on engineering pursuing

00:06:45,890 --> 00:06:51,970
a maximum change velocity monitoring

00:06:49,220 --> 00:06:55,510
emergency response change management

00:06:51,970 --> 00:06:58,720
demand forecasting and capacity planning

00:06:55,510 --> 00:07:01,760
provisioning efficiency and performance

00:06:58,720 --> 00:07:04,760
so psyched reliability engineering

00:07:01,760 --> 00:07:07,940
represents a significant break from

00:07:04,760 --> 00:07:12,230
existing industry practices from

00:07:07,940 --> 00:07:15,620
managing large and complex systems to

00:07:12,230 --> 00:07:20,540
explain it better here are the 10 action

00:07:15,620 --> 00:07:25,700
items that a trainer that train ahead

00:07:20,540 --> 00:07:29,800
and we will analyze these items action

00:07:25,700 --> 00:07:32,030
items today this is probably the most

00:07:29,800 --> 00:07:35,810
important slide on the whole

00:07:32,030 --> 00:07:39,740
presentation and we will be talking a

00:07:35,810 --> 00:07:43,790
little bit more about this so first of

00:07:39,740 --> 00:07:46,880
all hire only coders have service level

00:07:43,790 --> 00:07:50,540
objectives for your service measure and

00:07:46,880 --> 00:07:53,060
report performance against s ellos use

00:07:50,540 --> 00:07:56,720
error budgets who knows who is what is

00:07:53,060 --> 00:07:59,420
error budgets from here okay this is

00:07:56,720 --> 00:08:04,310
really really important have a common

00:07:59,420 --> 00:08:07,430
staffing pool between sras and F's the

00:08:04,310 --> 00:08:11,180
excess upward ops work over flows to the

00:08:07,430 --> 00:08:14,210
dev team cap sre operational load at

00:08:11,180 --> 00:08:18,710
fifty percent and share five percent

00:08:14,210 --> 00:08:22,820
with the dev team on call teams at least

00:08:18,710 --> 00:08:25,760
eight or six people in rotation per

00:08:22,820 --> 00:08:30,860
product and they should only receive a

00:08:25,760 --> 00:08:34,010
maximum of two events / on call make

00:08:30,860 --> 00:08:37,010
always a post-mortem and every post

00:08:34,010 --> 00:08:43,820
mortem should be blameless and focus on

00:08:37,010 --> 00:08:47,300
process not people so why do we need the

00:08:43,820 --> 00:08:49,760
dose you might ask let's begin by

00:08:47,300 --> 00:08:55,190
looking at the reliability and toil

00:08:49,760 --> 00:08:59,660
problem we all know that

00:08:55,190 --> 00:09:02,600
features for your product are very

00:08:59,660 --> 00:09:07,250
important right but there is one feature

00:09:02,600 --> 00:09:09,680
that you cannot live without what what

00:09:07,250 --> 00:09:17,260
is the most important feature of a

00:09:09,680 --> 00:09:20,690
product anyone it has work exactly so

00:09:17,260 --> 00:09:23,600
how about the 503 feature you guys

00:09:20,690 --> 00:09:26,920
probably see this in the case it doesn't

00:09:23,600 --> 00:09:30,440
work so I'm pretty sure we all

00:09:26,920 --> 00:09:32,450
understand and and think the same that

00:09:30,440 --> 00:09:37,610
the most important thing is that the

00:09:32,450 --> 00:09:39,770
product works that it is reliable so

00:09:37,610 --> 00:09:43,460
reliability is the most fundamental

00:09:39,770 --> 00:09:46,510
feature of any product a system isn't

00:09:43,460 --> 00:09:49,730
very useful if nobody can use it because

00:09:46,510 --> 00:09:52,100
reliability is so critical sres are

00:09:49,730 --> 00:09:54,740
focused on finding ways to improve the

00:09:52,100 --> 00:09:57,230
design and operation of systems to make

00:09:54,740 --> 00:10:04,700
them more scalable more reliable and

00:09:57,230 --> 00:10:07,790
more efficient but that's that's not

00:10:04,700 --> 00:10:10,460
always being the case to explain why we

00:10:07,790 --> 00:10:13,430
care so much about that today let's go

00:10:10,460 --> 00:10:16,040
back to the 80s the software methodology

00:10:13,430 --> 00:10:18,920
used back then was the waterfall as you

00:10:16,040 --> 00:10:21,770
can see in the picture it was great for

00:10:18,920 --> 00:10:24,650
software developers you actually had the

00:10:21,770 --> 00:10:27,530
requirements and then would go to to the

00:10:24,650 --> 00:10:30,650
design and implementation verification

00:10:27,530 --> 00:10:34,640
maintenance and you can see a problem

00:10:30,650 --> 00:10:38,630
there like when you launch the product

00:10:34,640 --> 00:10:43,660
it is disconnected from the customer so

00:10:38,630 --> 00:10:43,660
so the developers actually didn't had

00:10:43,839 --> 00:10:51,350
didn't had to respond for the problems

00:10:47,990 --> 00:10:53,450
that would happen after the software is

00:10:51,350 --> 00:11:00,280
implemented they were not accountable

00:10:53,450 --> 00:11:05,180
for it then after the web appeared and

00:11:00,280 --> 00:11:08,550
oops then after the web appeared and

00:11:05,180 --> 00:11:12,839
several sites several services were born

00:11:08,550 --> 00:11:16,130
like SI es pas and cloud the operation

00:11:12,839 --> 00:11:20,550
was not any more on the customer side it

00:11:16,130 --> 00:11:23,519
was on the service provider side so

00:11:20,550 --> 00:11:26,610
clearly that's one of the reasons why

00:11:23,519 --> 00:11:30,000
these services became so popular because

00:11:26,610 --> 00:11:36,540
that overhead went from the customer to

00:11:30,000 --> 00:11:40,560
the service provider but there is at

00:11:36,540 --> 00:11:43,529
least one obvious problem or conflict in

00:11:40,560 --> 00:11:47,519
this model while operations tries to

00:11:43,529 --> 00:11:49,769
keep the service up and reliable and get

00:11:47,519 --> 00:11:52,110
rewarded for that the developers are

00:11:49,769 --> 00:11:55,230
rewarded for the opposite thing let's

00:11:52,110 --> 00:11:57,450
say more or less the the opposite thing

00:11:55,230 --> 00:11:59,640
they are rewarded for the features that

00:11:57,450 --> 00:12:08,459
are launched and that creates

00:11:59,640 --> 00:12:11,040
instability so so therefore ops only

00:12:08,459 --> 00:12:14,579
solution to keep the products and the

00:12:11,040 --> 00:12:17,730
feature being added is to increase soil

00:12:14,579 --> 00:12:22,500
while having no time to automate that

00:12:17,730 --> 00:12:25,440
work the types of tile can be manual but

00:12:22,500 --> 00:12:30,089
this includes works such as manually

00:12:25,440 --> 00:12:34,250
running a script or repetitive it's work

00:12:30,089 --> 00:12:37,649
that you do often and it doesn't end

00:12:34,250 --> 00:12:41,370
work that you can easily automate but

00:12:37,649 --> 00:12:43,589
you're not automating a tactical which

00:12:41,370 --> 00:12:45,690
is unplanned work you're working on

00:12:43,589 --> 00:12:48,060
something suddenly you're interrupted

00:12:45,690 --> 00:12:49,709
because unplanned work comes and you

00:12:48,060 --> 00:12:53,370
have to stop what you're doing took two

00:12:49,709 --> 00:12:56,430
to answer that and it has no enduring

00:12:53,370 --> 00:12:58,320
value like what you do today it actually

00:12:56,430 --> 00:13:02,820
tomorrow it's it's not useful anymore

00:12:58,320 --> 00:13:06,120
and it's in the worst thing on this is

00:13:02,820 --> 00:13:12,480
it scales linearly with the service

00:13:06,120 --> 00:13:15,810
growth what does that mean it means that

00:13:12,480 --> 00:13:19,860
you need to use the whole solution scale

00:13:15,810 --> 00:13:22,050
with bodies as your reasons gross you

00:13:19,860 --> 00:13:25,140
have to contract more people

00:13:22,050 --> 00:13:27,600
and in this model you just throw people

00:13:25,140 --> 00:13:29,700
at the reliability problem and keep

00:13:27,600 --> 00:13:33,269
pushing sometimes for a year or more

00:13:29,700 --> 00:13:37,080
until the problem either goes away or it

00:13:33,269 --> 00:13:43,380
just blows up so we need to reduce soil

00:13:37,080 --> 00:13:45,899
in this in a smarter way because if we

00:13:43,380 --> 00:13:47,940
are successful in our business workload

00:13:45,899 --> 00:13:50,820
will gross financially training to

00:13:47,940 --> 00:13:54,209
infinity and as we know that curve is

00:13:50,820 --> 00:13:58,100
going to lead us to failure so we need

00:13:54,209 --> 00:14:01,620
to cap ops work loads at fifty percent

00:13:58,100 --> 00:14:06,440
on the sre teams and leave most of their

00:14:01,620 --> 00:14:06,440
time to write code and reduce that toil

00:14:08,240 --> 00:14:21,089
sorry having problems with mine here so

00:14:15,360 --> 00:14:24,420
we can take Google's example on the

00:14:21,089 --> 00:14:28,649
operational side their goal is to keep

00:14:24,420 --> 00:14:31,470
always a sres work capped at fifty

00:14:28,649 --> 00:14:34,410
percent the other time should be spent

00:14:31,470 --> 00:14:36,120
always on engineering project work that

00:14:34,410 --> 00:14:39,779
will either reduce the future future

00:14:36,120 --> 00:14:42,660
toil or add service features feature

00:14:39,779 --> 00:14:46,350
development typically focus on improving

00:14:42,660 --> 00:14:49,800
reliability performance utilization

00:14:46,350 --> 00:14:54,180
which is often also going to reduce toil

00:14:49,800 --> 00:14:58,140
and this cap this fifty percent cap must

00:14:54,180 --> 00:15:01,380
be kept all the times because if we left

00:14:58,140 --> 00:15:05,750
that unchecked it will fill up a hundred

00:15:01,380 --> 00:15:05,750
percent of everyone's time very quickly

00:15:08,810 --> 00:15:15,920
so how do we solve these reliability in

00:15:13,740 --> 00:15:20,610
type problems this conflict is not

00:15:15,920 --> 00:15:25,199
inevitable the solution is indeed error

00:15:20,610 --> 00:15:28,279
budget as we all as we will see next in

00:15:25,199 --> 00:15:32,250
the organization needs to agree on those

00:15:28,279 --> 00:15:35,279
for this to work therefore sre only

00:15:32,250 --> 00:15:38,249
prevents releases if

00:15:35,279 --> 00:15:46,620
the error budget is exceeded will see

00:15:38,249 --> 00:15:51,779
that first let's let's see some

00:15:46,620 --> 00:15:57,620
terminology here you guys know what is

00:15:51,779 --> 00:16:01,230
SLA right who knows what what is SL e I

00:15:57,620 --> 00:16:04,379
the one on the bottom you guys have

00:16:01,230 --> 00:16:08,249
heard about it so it's a service level

00:16:04,379 --> 00:16:10,769
indicator SL owes anyone heard about

00:16:08,249 --> 00:16:13,800
this these are completely different

00:16:10,769 --> 00:16:16,139
things right a service level objective

00:16:13,800 --> 00:16:19,410
which is that one is a key element of

00:16:16,139 --> 00:16:22,589
the service level agreement the SLA and

00:16:19,410 --> 00:16:26,160
it's between the service provider and

00:16:22,589 --> 00:16:29,550
customer an SLA is an int and entire

00:16:26,160 --> 00:16:32,069
agreement right while there s alluz are

00:16:29,550 --> 00:16:36,319
specific measurable characteristics of

00:16:32,069 --> 00:16:40,439
the SLA such as availability throughput

00:16:36,319 --> 00:16:44,430
frequency response time quality etc and

00:16:40,439 --> 00:16:47,430
the SL is I hope I'm saying this

00:16:44,430 --> 00:16:49,680
correctly s Alliance correct right is a

00:16:47,430 --> 00:16:52,649
measure of the service provider to the

00:16:49,680 --> 00:16:56,129
customer xsellize form the base of s

00:16:52,649 --> 00:16:58,889
ellos which in turn form the base of the

00:16:56,129 --> 00:17:01,079
SLA so you need to have first indicators

00:16:58,889 --> 00:17:03,569
of your platform and then those

00:17:01,079 --> 00:17:05,549
indicators will create an objective that

00:17:03,569 --> 00:17:14,189
you want to measure and then in the end

00:17:05,549 --> 00:17:17,069
you actually get an SLA so the business

00:17:14,189 --> 00:17:19,709
or the product they must establish what

00:17:17,069 --> 00:17:23,610
the availability target is for your

00:17:19,709 --> 00:17:26,640
system once you have done that one minus

00:17:23,610 --> 00:17:30,390
the availability target is what we call

00:17:26,640 --> 00:17:35,760
the ER budget it's down there for

00:17:30,390 --> 00:17:39,299
instance if it is 99.9 percent available

00:17:35,760 --> 00:17:42,630
that means that it's 0.1 percent

00:17:39,299 --> 00:17:45,899
unavailable and now we are allowed to

00:17:42,630 --> 00:17:48,870
have like 0.1 percent unavailability and

00:17:45,899 --> 00:17:52,370
that is our budget that we

00:17:48,870 --> 00:17:55,940
and spend for launching things for a

00:17:52,370 --> 00:18:02,309
mental new features for testing stuff

00:17:55,940 --> 00:18:05,490
not in production please so how do we

00:18:02,309 --> 00:18:08,730
how do what we obtained the air budget

00:18:05,490 --> 00:18:10,050
of course we cannot say it said it's a

00:18:08,730 --> 00:18:14,400
hundred percent no one hundred percent

00:18:10,050 --> 00:18:18,300
cannot be ever a reliable reliability

00:18:14,400 --> 00:18:21,830
target for this measure and the sres

00:18:18,300 --> 00:18:24,570
objective is not zero outages at all

00:18:21,830 --> 00:18:28,110
instead they align with the product devs

00:18:24,570 --> 00:18:31,710
to spend the era budget on a maximum

00:18:28,110 --> 00:18:34,940
feature velocity if we run out of budget

00:18:31,710 --> 00:18:41,429
we just need more to do more testing

00:18:34,940 --> 00:18:44,820
between releases therefore era budgets

00:18:41,429 --> 00:18:47,490
acts like a self-regulating mechanism

00:18:44,820 --> 00:18:49,590
when the system is working well the

00:18:47,490 --> 00:18:52,650
developer have an institute to write

00:18:49,590 --> 00:18:55,470
strong code and launch launch carefully

00:18:52,650 --> 00:18:58,890
to prevent issues and gives control

00:18:55,470 --> 00:19:02,730
drive back to the SR is to permit change

00:18:58,890 --> 00:19:06,420
not just stability it makes decision

00:19:02,730 --> 00:19:10,650
based on numbers and not politics nor

00:19:06,420 --> 00:19:13,650
feelings just data we don't want to be

00:19:10,650 --> 00:19:21,630
that system in there it's always stop

00:19:13,650 --> 00:19:24,480
and things so both the development and

00:19:21,630 --> 00:19:28,550
the sre teams they share a sick a single

00:19:24,480 --> 00:19:32,220
staffing pool so every sre that is hired

00:19:28,550 --> 00:19:34,740
one less developer is available and vice

00:19:32,220 --> 00:19:38,300
versa this ends it the never ending

00:19:34,740 --> 00:19:42,320
headcount between dev and ops and

00:19:38,300 --> 00:19:45,150
creates a self-policing system where

00:19:42,320 --> 00:19:48,150
developers get rewarded with more

00:19:45,150 --> 00:19:57,110
teammates if they actually do better

00:19:48,150 --> 00:20:02,669
code sre teams are actually staffed with

00:19:57,110 --> 00:20:05,999
developer / sysadmin hybrids

00:20:02,669 --> 00:20:08,669
will not only know how to code but they

00:20:05,999 --> 00:20:11,399
know how to fix problems and find them

00:20:08,669 --> 00:20:16,460
they interface easily with the dev team

00:20:11,399 --> 00:20:20,580
and as kirkwall s quality code improvers

00:20:16,460 --> 00:20:26,129
are often moved to the dev team if fewer

00:20:20,580 --> 00:20:31,679
sres are needed on the project so in the

00:20:26,129 --> 00:20:34,919
end this creates a highly motivated and

00:20:31,679 --> 00:20:42,299
effective teamwork between dev and ops

00:20:34,919 --> 00:20:46,159
and that's our objective so how is the

00:20:42,299 --> 00:20:50,070
monitoring and being on call of an SRE I

00:20:46,159 --> 00:20:53,519
i know this presentation is very Tirek

00:20:50,070 --> 00:20:55,799
but and you will get in the presentation

00:20:53,519 --> 00:20:58,739
in the end i'll make make sure it's it's

00:20:55,799 --> 00:21:02,580
available online but these are really

00:20:58,739 --> 00:21:05,489
the concepts that we are implementing at

00:21:02,580 --> 00:21:10,350
aquia and we think they are the best way

00:21:05,489 --> 00:21:15,659
of having scalable and complex large

00:21:10,350 --> 00:21:19,799
systems working correctly for instance

00:21:15,659 --> 00:21:22,950
in this case there are three sres take

00:21:19,799 --> 00:21:27,379
three valid kinds of monitoring output

00:21:22,950 --> 00:21:30,239
the alerts the tickets and the logging

00:21:27,379 --> 00:21:33,779
what do we do about alerts they need

00:21:30,239 --> 00:21:36,779
action immediately but we don't keep

00:21:33,779 --> 00:21:40,529
actually the email alerts because those

00:21:36,779 --> 00:21:43,259
when you get to a large to a large size

00:21:40,529 --> 00:21:45,869
actually if you get a lot of alerts in

00:21:43,259 --> 00:21:48,739
the email where we're just not going to

00:21:45,869 --> 00:21:52,649
see them so just stick with the page

00:21:48,739 --> 00:21:55,470
tickets a human will need to take action

00:21:52,649 --> 00:21:58,230
eventually on those it's not to take

00:21:55,470 --> 00:22:01,499
immediately action but it will take an

00:21:58,230 --> 00:22:03,960
action and logging we just don't take

00:22:01,499 --> 00:22:10,529
any action at the moment we just analyze

00:22:03,960 --> 00:22:14,039
them afterwards while focused on

00:22:10,529 --> 00:22:15,810
operations work sarees should receive a

00:22:14,039 --> 00:22:20,310
maximum of two

00:22:15,810 --> 00:22:23,310
events / 8 to 12 hour on-call shift this

00:22:20,310 --> 00:22:25,290
gives the on-call engineer enough time

00:22:23,310 --> 00:22:28,050
to handle the event occur Italy and

00:22:25,290 --> 00:22:34,740
quickly clean up restore the system and

00:22:28,050 --> 00:22:37,830
then conduct the postmortem use the four

00:22:34,740 --> 00:22:41,660
Golden satis signals of monitoring and

00:22:37,830 --> 00:22:46,920
they are latency traffic errors and

00:22:41,660 --> 00:22:51,960
saturation within your dashboards expose

00:22:46,920 --> 00:22:59,160
all data very clearly and actually easy

00:22:51,960 --> 00:23:02,720
to action on during on call pager

00:22:59,160 --> 00:23:07,950
fatigue who has been on call from this

00:23:02,720 --> 00:23:12,540
crowd oh okay you think you feel the

00:23:07,950 --> 00:23:15,680
pain with that so a pager fatigue is a

00:23:12,540 --> 00:23:18,300
real problem like you get alerts and

00:23:15,680 --> 00:23:20,550
suddenly just don't hear them anymore

00:23:18,300 --> 00:23:23,670
and that's that's that's the thing we

00:23:20,550 --> 00:23:28,710
try to go over with with the sre

00:23:23,670 --> 00:23:30,900
actually an engineer can only react with

00:23:28,710 --> 00:23:34,440
urgency a few times a day before they

00:23:30,900 --> 00:23:37,560
actually get exhausted therefore ideally

00:23:34,440 --> 00:23:40,530
every page should be actionable they

00:23:37,560 --> 00:23:45,560
should require some kind of intelligence

00:23:40,530 --> 00:23:50,490
to be or something that is unseen before

00:23:45,560 --> 00:23:54,540
there is a nice book I'm reading this

00:23:50,490 --> 00:23:57,000
book right now from Duke hoax about the

00:23:54,540 --> 00:23:59,520
the root cause analysis and it goes

00:23:57,000 --> 00:24:06,690
really really deep into this problem how

00:23:59,520 --> 00:24:09,090
to find root causes Play Books and burn

00:24:06,690 --> 00:24:13,430
books reduced greatly the mean time to

00:24:09,090 --> 00:24:18,780
repair sres right and rely on them for

00:24:13,430 --> 00:24:21,270
on-call for instance we have the other

00:24:18,780 --> 00:24:24,480
day we had a presentation on a crib

00:24:21,270 --> 00:24:27,840
where someone just shown a civil

00:24:24,480 --> 00:24:29,590
playbooks which actually they could be

00:24:27,840 --> 00:24:33,039
used for for this

00:24:29,590 --> 00:24:35,559
but we now have run books which which

00:24:33,039 --> 00:24:41,100
improves a lot the response to these

00:24:35,559 --> 00:24:41,100
alerts and I can give it examples later

00:24:41,610 --> 00:24:49,270
so concluding an alcy monitoring and

00:24:46,779 --> 00:24:52,570
alerting pipeline is should be simple

00:24:49,270 --> 00:24:56,320
and easy to reason about try always to

00:24:52,570 --> 00:25:00,370
have high-level stack overview still

00:24:56,320 --> 00:25:03,779
some few services like databases need to

00:25:00,370 --> 00:25:07,029
go in and check on the system itself a

00:25:03,779 --> 00:25:09,669
dashboard might also be paired with the

00:25:07,029 --> 00:25:17,529
log in order to analyze X torical

00:25:09,669 --> 00:25:22,140
correlations rapidly so the release

00:25:17,529 --> 00:25:25,390
engineering which is also a part of s re

00:25:22,140 --> 00:25:28,299
deals with all the activities between in

00:25:25,390 --> 00:25:30,940
between regular development and delivery

00:25:28,299 --> 00:25:34,600
of the software product to the end-user

00:25:30,940 --> 00:25:38,320
it accelerates the path from development

00:25:34,600 --> 00:25:40,809
to operations it's formed by season it s

00:25:38,320 --> 00:25:45,549
re team members to conduct this

00:25:40,809 --> 00:25:49,450
important internal service and there are

00:25:45,549 --> 00:25:54,970
some Commandments that actually they use

00:25:49,450 --> 00:25:57,970
on the release engineering teams that we

00:25:54,970 --> 00:26:01,809
should actually apply some of these you

00:25:57,970 --> 00:26:04,059
probably already use but a like for

00:26:01,809 --> 00:26:08,350
instance point eight who do Sudha's

00:26:04,059 --> 00:26:12,990
cannery from here cannery anyone knows

00:26:08,350 --> 00:26:17,409
what is Kenner canary yeah cannery sorry

00:26:12,990 --> 00:26:19,299
it's my accent so so cannery for

00:26:17,409 --> 00:26:21,159
instance it's it's a very important

00:26:19,299 --> 00:26:23,919
thing to actually use your on your

00:26:21,159 --> 00:26:25,840
system just have like a piece of service

00:26:23,919 --> 00:26:28,659
that can you can test you can actually

00:26:25,840 --> 00:26:31,210
throw the new features there and if they

00:26:28,659 --> 00:26:32,950
explode well those errors go to the

00:26:31,210 --> 00:26:38,350
error budget but you didn't explode the

00:26:32,950 --> 00:26:40,899
whole platform will not go very deep

00:26:38,350 --> 00:26:43,310
into this but we can talk about in the

00:26:40,899 --> 00:26:48,650
questions part later

00:26:43,310 --> 00:26:53,690
so developers sres and release engineers

00:26:48,650 --> 00:26:53,690
all in the same group they work together

00:26:54,950 --> 00:27:02,610
now to a part that really pleases me on

00:26:59,550 --> 00:27:07,290
the sre and probably for most of you

00:27:02,610 --> 00:27:10,500
guys is the post-mortems postpartum here

00:27:07,290 --> 00:27:13,230
is a process usually performed at the

00:27:10,500 --> 00:27:15,980
conclusion of an outage determining

00:27:13,230 --> 00:27:18,330
elements that were successful or once

00:27:15,980 --> 00:27:21,750
unsuccessful and should be written for

00:27:18,330 --> 00:27:26,180
all significant incidents regardless or

00:27:21,750 --> 00:27:29,070
on whether they were paged or not this

00:27:26,180 --> 00:27:32,100
investigation should establish what

00:27:29,070 --> 00:27:35,190
happened in detail filed find all root

00:27:32,100 --> 00:27:38,580
causes of the event and assign actions

00:27:35,190 --> 00:27:45,630
to correct problem or improve it for the

00:27:38,580 --> 00:27:50,180
next time one of the biggest part of

00:27:45,630 --> 00:27:56,880
post mortems is they must be blameless

00:27:50,180 --> 00:27:59,820
like in any devops approach we must

00:27:56,880 --> 00:28:02,850
remember we can't fix people but we can

00:27:59,820 --> 00:28:04,710
fix systems and that's our in end

00:28:02,850 --> 00:28:08,550
processes that's what we should be

00:28:04,710 --> 00:28:12,060
pointing at not blaming people and this

00:28:08,550 --> 00:28:14,340
is really key it is kick a critical that

00:28:12,060 --> 00:28:17,190
post mortems be blameless so we can

00:28:14,340 --> 00:28:19,560
understand honestly and truthfully what

00:28:17,190 --> 00:28:21,840
happened why the people involved did

00:28:19,560 --> 00:28:25,700
what they did and how to make the

00:28:21,840 --> 00:28:29,180
systems more reliable even though it has

00:28:25,700 --> 00:28:36,660
unreliable components like disks people

00:28:29,180 --> 00:28:39,720
power sources etc and another purpose of

00:28:36,660 --> 00:28:42,180
post mortems is that some of them they

00:28:39,720 --> 00:28:45,000
are teachable they can give a good

00:28:42,180 --> 00:28:48,150
insight into how your systems work or

00:28:45,000 --> 00:28:51,210
don't work how incidents are handled and

00:28:48,150 --> 00:28:53,310
also serve as a proof that your

00:28:51,210 --> 00:28:56,640
postmodern culture takes the blameless

00:28:53,310 --> 00:28:59,940
part seriously

00:28:56,640 --> 00:29:03,060
there is another interesting reading on

00:28:59,940 --> 00:29:05,280
this this subject if you guys want to

00:29:03,060 --> 00:29:09,720
take note it will be in the slides later

00:29:05,280 --> 00:29:12,210
but from from Sydney Decker is actually

00:29:09,720 --> 00:29:15,360
a personal professor on human factors

00:29:12,210 --> 00:29:19,440
and flight safety from the Lund

00:29:15,360 --> 00:29:22,560
University in Sweden and it goes really

00:29:19,440 --> 00:29:27,860
deep into how these psychologically

00:29:22,560 --> 00:29:27,860
effects people and companies of course

00:29:29,600 --> 00:29:37,730
so in the end site reliability

00:29:33,150 --> 00:29:41,880
engineering enables agility stability

00:29:37,730 --> 00:29:44,640
sres use software engineering to

00:29:41,880 --> 00:29:46,680
automate themselves out of the job like

00:29:44,640 --> 00:29:50,040
we heard before in other sessions and

00:29:46,680 --> 00:29:53,370
Maya my advice if you want to implement

00:29:50,040 --> 00:29:56,660
this change on your company is to start

00:29:53,370 --> 00:30:00,510
with the action items from from trainer

00:29:56,660 --> 00:30:03,090
alter your training and hiring implement

00:30:00,510 --> 00:30:06,030
error budgets do blaze blameless port

00:30:03,090 --> 00:30:11,340
and post mortems and specially reduce

00:30:06,030 --> 00:30:15,810
your toil this presentation was based on

00:30:11,340 --> 00:30:20,010
the google book so i hope it was not

00:30:15,810 --> 00:30:23,010
very fastidious but it actually is it

00:30:20,010 --> 00:30:33,900
goes much much much much deeper into the

00:30:23,010 --> 00:30:36,090
subject ok questions you can now you go

00:30:33,900 --> 00:30:40,380
to them you can go to the microphone if

00:30:36,090 --> 00:30:45,570
you have questions what you present it

00:30:40,380 --> 00:30:48,690
seems ok for larger color organizations

00:30:45,570 --> 00:30:51,780
but what if your team is very small so

00:30:48,690 --> 00:30:54,360
how does it fit for example if you have

00:30:51,780 --> 00:30:59,190
a team of three people to organize all

00:30:54,360 --> 00:31:04,560
your IT so you actually let me go back

00:30:59,190 --> 00:31:08,100
to to the first let's go let's go back

00:31:04,560 --> 00:31:10,410
here to the trainer's items all right

00:31:08,100 --> 00:31:14,370
and there are a bunch

00:31:10,410 --> 00:31:18,210
things here that you actually should

00:31:14,370 --> 00:31:22,920
take right you you can I are only coders

00:31:18,210 --> 00:31:25,350
forces it means and ops work you can

00:31:22,920 --> 00:31:28,530
have the the service level objectives

00:31:25,350 --> 00:31:32,010
for your own service right you should

00:31:28,530 --> 00:31:34,980
report to your management what are those

00:31:32,010 --> 00:31:37,440
s allows doing or not right those are

00:31:34,980 --> 00:31:41,670
good measures if you have a really

00:31:37,440 --> 00:31:45,240
really small a team I don't know error

00:31:41,670 --> 00:31:48,810
budgets can be or not important because

00:31:45,240 --> 00:31:51,210
of course if it is the same team error

00:31:48,810 --> 00:31:53,550
budgets who are you going to discuss

00:31:51,210 --> 00:31:57,150
arrow budgets with like in the same team

00:31:53,550 --> 00:32:00,360
you can you can do that like okay let's

00:31:57,150 --> 00:32:04,050
not explore their or our SLO this month

00:32:00,360 --> 00:32:06,570
but so there are a lot of things that

00:32:04,050 --> 00:32:09,480
you can any surely if you have a small

00:32:06,570 --> 00:32:14,900
team you are sharing a common staffing

00:32:09,480 --> 00:32:18,150
pool between devs and I sorry okay

00:32:14,900 --> 00:32:19,770
thanks did I answer your question these

00:32:18,150 --> 00:32:22,410
these items there are a lot of things

00:32:19,770 --> 00:32:25,140
that small companies can do would you

00:32:22,410 --> 00:32:29,700
divide the job between people or would

00:32:25,140 --> 00:32:32,430
you just depends on your organization

00:32:29,700 --> 00:32:36,690
you know like what what do you actually

00:32:32,430 --> 00:32:39,060
do in terms of VV have a ecommerce

00:32:36,690 --> 00:32:42,300
business and okay our IT team is really

00:32:39,060 --> 00:32:45,030
small okay I'm thinking about you so you

00:32:42,300 --> 00:32:48,240
probably have payment systems yeah okay

00:32:45,030 --> 00:32:51,060
and those need to be up like 99.999%

00:32:48,240 --> 00:32:53,700
okay those are really important yes I

00:32:51,060 --> 00:33:00,450
would divide specially i would put error

00:32:53,700 --> 00:33:02,900
budgets on those thank you yeah more

00:33:00,450 --> 00:33:02,900
questions

00:33:03,170 --> 00:33:10,500
thanks buddy you say you totally invited

00:33:08,070 --> 00:33:12,720
the question about canary deploys yeah

00:33:10,500 --> 00:33:14,610
yeah we can go back to that slide if

00:33:12,720 --> 00:33:17,280
that yeah that's really interesting for

00:33:14,610 --> 00:33:18,930
you guys does it seemed like not

00:33:17,280 --> 00:33:21,690
everybody knew what canary deploys was

00:33:18,930 --> 00:33:23,550
yeah yeah why don't you explain that and

00:33:21,690 --> 00:33:27,960
I'm curious how you actually do that or

00:33:23,550 --> 00:33:35,940
if you're doing that uh can it yeah okay

00:33:27,960 --> 00:33:39,720
yeah yeah yeah because as you seen like

00:33:35,940 --> 00:33:43,650
this this is like a very broad topic to

00:33:39,720 --> 00:33:47,690
discuss on we would probably just just

00:33:43,650 --> 00:33:52,830
need a full camp only to discuss the sre

00:33:47,690 --> 00:34:01,190
matter but for instance the cannery

00:33:52,830 --> 00:34:06,360
stuff alignment let me see my notes ok

00:34:01,190 --> 00:34:10,710
so imagine you have a grid of computers

00:34:06,360 --> 00:34:16,110
right and in your grid you have like a

00:34:10,710 --> 00:34:19,800
hundred computers so what what can you

00:34:16,110 --> 00:34:22,530
do to do cannery you just choose like a

00:34:19,800 --> 00:34:26,400
small percentage of those computers and

00:34:22,530 --> 00:34:31,340
you actually deploy to those and you let

00:34:26,400 --> 00:34:35,460
some traffic go there but you you don't

00:34:31,340 --> 00:34:38,880
let it go too much further if you start

00:34:35,460 --> 00:34:41,610
to see errors of course there is some

00:34:38,880 --> 00:34:44,870
point that you actually decide where to

00:34:41,610 --> 00:34:47,340
stop right but this is an internal

00:34:44,870 --> 00:34:51,810
discussion you must have with your own

00:34:47,340 --> 00:34:54,510
peers right so cannery is not very

00:34:51,810 --> 00:34:57,120
difficult to do but it should be

00:34:54,510 --> 00:34:59,910
implemented in such a way together with

00:34:57,120 --> 00:35:02,400
the version cultural system and probably

00:34:59,910 --> 00:35:05,610
with the package managers management

00:35:02,400 --> 00:35:09,570
system to actually be able to roll back

00:35:05,610 --> 00:35:13,230
or to just apply a version to the

00:35:09,570 --> 00:35:15,590
cannery system right did I answer the

00:35:13,230 --> 00:35:15,590
question

00:35:18,560 --> 00:35:28,470
we are so we are starting to well we do

00:35:23,010 --> 00:35:32,240
now actually we do cannery cannery non

00:35:28,470 --> 00:35:38,130
in a way that is completely reversible

00:35:32,240 --> 00:35:40,980
but we do it yes because if if we wanted

00:35:38,130 --> 00:35:43,980
to do it like completely reversible our

00:35:40,980 --> 00:35:46,710
platform will have to have like a

00:35:43,980 --> 00:35:55,800
version system that you could just uh

00:35:46,710 --> 00:36:00,890
apply network so we choose a set of

00:35:55,800 --> 00:36:06,300
computers to do that okay more questions

00:36:00,890 --> 00:36:14,280
about this or other subjects it is much

00:36:06,300 --> 00:36:23,090
to take ya can't can you come to the

00:36:14,280 --> 00:36:23,090
Micra okay or I can repeat the yeah Oh

00:36:23,960 --> 00:36:36,660
interesting ya like like so so your

00:36:30,630 --> 00:36:41,220
question is the ops work overflows to

00:36:36,660 --> 00:36:46,350
the dev team okay yeah you're on

00:36:41,220 --> 00:36:50,160
operations or death def okay that's why

00:36:46,350 --> 00:36:53,250
you asked the question of course so so

00:36:50,160 --> 00:36:57,090
it's tricky it's a tricky place to be on

00:36:53,250 --> 00:37:04,020
but you need actually to put everybody

00:36:57,090 --> 00:37:08,040
engaged with that with that objective

00:37:04,020 --> 00:37:13,110
because in the end you guys deaths will

00:37:08,040 --> 00:37:16,620
profit from the sre schema in the sense

00:37:13,110 --> 00:37:19,230
of right now you probably have a lot of

00:37:16,620 --> 00:37:21,360
ethics with the ops okay we want to

00:37:19,230 --> 00:37:23,400
launch a feature no no you cannot launch

00:37:21,360 --> 00:37:25,980
because it's going to break this it

00:37:23,400 --> 00:37:27,850
break it broke this test last time it's

00:37:25,980 --> 00:37:30,400
going to break this this time

00:37:27,850 --> 00:37:33,340
you have a lot of ethics right if you

00:37:30,400 --> 00:37:35,460
follow a sorry what happened is you have

00:37:33,340 --> 00:37:38,920
the error budget and you know exactly

00:37:35,460 --> 00:37:40,960
you devs you can actually use that the

00:37:38,920 --> 00:37:45,780
debt error budget and they cannot stop

00:37:40,960 --> 00:37:50,680
you from releasing the features oh yes

00:37:45,780 --> 00:37:52,630
yeah but if you exceed the error budget

00:37:50,680 --> 00:37:56,470
that month you don't launch any more

00:37:52,630 --> 00:38:00,130
features or quarter whatever but you

00:37:56,470 --> 00:38:05,560
need to define the SLO s before before

00:38:00,130 --> 00:38:09,670
actually diving into the sre world let's

00:38:05,560 --> 00:38:13,240
say and another thing is if you work

00:38:09,670 --> 00:38:16,870
together with ops they will feel more

00:38:13,240 --> 00:38:19,810
your work and agree more with your work

00:38:16,870 --> 00:38:24,340
and you will feel the up Spain and you

00:38:19,810 --> 00:38:29,080
will try to do not extend their pain

00:38:24,340 --> 00:38:31,960
with more burden right so I think it's

00:38:29,080 --> 00:38:34,980
better for both sides and actually it's

00:38:31,960 --> 00:38:44,130
not both sides they will become one side

00:38:34,980 --> 00:38:44,130
yeah more sings edges

00:38:48,509 --> 00:38:54,999
so my question is more about you know

00:38:51,190 --> 00:38:56,589
when we are the developers of the

00:38:54,999 --> 00:38:59,829
maintenance for physically massive

00:38:56,589 --> 00:39:04,720
platform came across the issues the

00:38:59,829 --> 00:39:08,410
salted do some aussies but in this

00:39:04,720 --> 00:39:11,349
particular process providing a solution

00:39:08,410 --> 00:39:15,009
or finding the root cause is one part

00:39:11,349 --> 00:39:18,460
but do you think that the developers

00:39:15,009 --> 00:39:20,710
also should spend dines on documenting

00:39:18,460 --> 00:39:23,950
the correct are seized the square it

00:39:20,710 --> 00:39:25,630
could be you know the more time

00:39:23,950 --> 00:39:30,099
consuming job for the developers

00:39:25,630 --> 00:39:32,890
probably or so that that basically it

00:39:30,099 --> 00:39:34,869
depends on on what type of documentation

00:39:32,890 --> 00:39:38,499
are you talking so basically a kind of

00:39:34,869 --> 00:39:40,980
our see where you can document what the

00:39:38,499 --> 00:39:44,349
root cause of that particular issue

00:39:40,980 --> 00:39:46,839
providing detailed logs and so on let's

00:39:44,349 --> 00:39:48,730
see in this one should go that that I

00:39:46,839 --> 00:39:51,099
understand I want to know yeah let's see

00:39:48,730 --> 00:39:55,319
in this in this way wouldn't be better

00:39:51,099 --> 00:39:58,029
if certain if instead of just document

00:39:55,319 --> 00:40:02,079
how it should be fixed the next time

00:39:58,029 --> 00:40:04,180
just fix it yeah just fix it and if it

00:40:02,079 --> 00:40:05,829
is a saying that's it's repetitive and

00:40:04,180 --> 00:40:08,140
it will come back and you know it's

00:40:05,829 --> 00:40:11,940
going going to come back to just hunt

00:40:08,140 --> 00:40:14,710
you just automate it yeah and

00:40:11,940 --> 00:40:17,829
documentation of course developers they

00:40:14,710 --> 00:40:19,690
should do a documentation but it's not

00:40:17,829 --> 00:40:22,390
it's not the real solution for the

00:40:19,690 --> 00:40:27,069
problems like like the perfect platform

00:40:22,390 --> 00:40:29,759
you just push about them you release and

00:40:27,069 --> 00:40:29,759
it works

00:40:30,799 --> 00:40:35,729
that's how it is supposed to be yeah but

00:40:33,539 --> 00:40:38,970
it doesn't work like that so so this

00:40:35,729 --> 00:40:42,150
this is the objective right so we should

00:40:38,970 --> 00:40:49,700
code better not just oh it is a new

00:40:42,150 --> 00:40:59,160
feature take it hi more alerts downtime

00:40:49,700 --> 00:41:03,019
yep you wouldn't you wanna okay can you

00:40:59,160 --> 00:41:07,920
talk it if it's not going to be recorded

00:41:03,019 --> 00:41:10,200
yeah that's bro I work with Ricardo on

00:41:07,920 --> 00:41:13,650
the option to be a sorry team rock we're

00:41:10,200 --> 00:41:15,089
so um yeah one of the big processes we

00:41:13,650 --> 00:41:16,799
started to implement over the last year

00:41:15,089 --> 00:41:19,140
internally at ops and started to spread

00:41:16,799 --> 00:41:21,630
out across all of engineering is much

00:41:19,140 --> 00:41:24,390
more formal root causes analysis process

00:41:21,630 --> 00:41:26,729
so the idea is okay an incident happened

00:41:24,390 --> 00:41:28,440
and we have a template that actually

00:41:26,729 --> 00:41:31,079
goes over a few things so what went well

00:41:28,440 --> 00:41:33,630
so there were doc there was docs there

00:41:31,079 --> 00:41:35,460
were tools that fixed it the impact was

00:41:33,630 --> 00:41:37,279
reduced you know to a few minutes those

00:41:35,460 --> 00:41:39,059
types of things what didn't go so well

00:41:37,279 --> 00:41:40,680
someone slept through their alert

00:41:39,059 --> 00:41:42,210
because the paging system was broken we

00:41:40,680 --> 00:41:44,009
didn't monitor for this thing the

00:41:42,210 --> 00:41:46,859
customer is down for two hours you know

00:41:44,009 --> 00:41:49,979
those types of failures and then what

00:41:46,859 --> 00:41:51,779
was lucky a person was on shift that

00:41:49,979 --> 00:41:53,910
knew exactly what that failure mode was

00:41:51,779 --> 00:41:55,380
even though it wasn't in documentation

00:41:53,910 --> 00:41:58,229
was able to fix it you know that type of

00:41:55,380 --> 00:42:01,410
thing so the idea behind a root causes

00:41:58,229 --> 00:42:04,680
analysis is that every single thing that

00:42:01,410 --> 00:42:07,950
you find that went wrong you create an

00:42:04,680 --> 00:42:09,680
action item for ya and then you put that

00:42:07,950 --> 00:42:11,489
in your ticketing system and then you

00:42:09,680 --> 00:42:13,979
prioritize it depending on the severity

00:42:11,489 --> 00:42:15,630
you prioritize it to be done as part of

00:42:13,979 --> 00:42:19,079
unplanned work for your sprint yeah or

00:42:15,630 --> 00:42:21,960
you put it in for next sprint or later

00:42:19,079 --> 00:42:24,269
depending on what the potential risks

00:42:21,960 --> 00:42:25,589
are for that finding to still be in your

00:42:24,269 --> 00:42:27,239
new ticketing system so that way you

00:42:25,589 --> 00:42:29,339
have a very nice and tight feedback loop

00:42:27,239 --> 00:42:32,160
so that every time and a system event

00:42:29,339 --> 00:42:34,170
happens in your stack you now have a set

00:42:32,160 --> 00:42:35,910
of items that if achieved improves the

00:42:34,170 --> 00:42:39,180
quality of product that's all I wanted

00:42:35,910 --> 00:42:42,630
to yeah yeah and and and I would even go

00:42:39,180 --> 00:42:44,310
go further is if you have a proper sre

00:42:42,630 --> 00:42:47,040
teen they

00:42:44,310 --> 00:42:50,520
to code and they know the code that devs

00:42:47,040 --> 00:42:52,410
produce right if they know that you can

00:42:50,520 --> 00:42:54,690
actually accelerate instead of just

00:42:52,410 --> 00:42:57,540
waiting for the next sprint and the sres

00:42:54,690 --> 00:43:00,870
can can fix that right because they

00:42:57,540 --> 00:43:03,300
don't want to be hammered anymore by

00:43:00,870 --> 00:43:07,140
that this that same problem and that's

00:43:03,300 --> 00:43:10,140
why sres exists they actually automate

00:43:07,140 --> 00:43:15,530
themselves out of the job that's the

00:43:10,140 --> 00:43:15,530
idea okay are there any more questions

00:43:15,920 --> 00:43:27,780
drew there comes a tough question um I'm

00:43:24,930 --> 00:43:29,340
just thinking from from a certain

00:43:27,780 --> 00:43:31,950
perspective lots of what you've

00:43:29,340 --> 00:43:34,590
presented Ricardo is sort of from the

00:43:31,950 --> 00:43:36,930
operations teams point of view so this

00:43:34,590 --> 00:43:39,630
sort of you know you're setting budgets

00:43:36,930 --> 00:43:42,570
and tolerances and you're saying you

00:43:39,630 --> 00:43:45,080
know Uncle staff shouldn't get more than

00:43:42,570 --> 00:43:48,180
two alerts and we won't tolerate

00:43:45,080 --> 00:43:53,520
failures beyond this level and that sort

00:43:48,180 --> 00:43:55,860
of thing so but I mean I presume the the

00:43:53,520 --> 00:43:58,140
rest of their have to be arguments made

00:43:55,860 --> 00:44:00,090
to convince the rest of the business buy

00:43:58,140 --> 00:44:01,950
into that it's not just the ops team

00:44:00,090 --> 00:44:04,050
standing up for themselves I think we're

00:44:01,950 --> 00:44:05,670
not going to take this anymore you need

00:44:04,050 --> 00:44:07,520
to actually convince the rest of the

00:44:05,670 --> 00:44:10,320
business that it's beneficial to

00:44:07,520 --> 00:44:12,600
implement those systems there is there

00:44:10,320 --> 00:44:18,150
is one thing to to respond to your

00:44:12,600 --> 00:44:21,750
question maybe it was too too too too

00:44:18,150 --> 00:44:25,730
fast that I want this is this is what

00:44:21,750 --> 00:44:31,080
you don't want to have right you have a

00:44:25,730 --> 00:44:35,330
work that gets into your cue work and

00:44:31,080 --> 00:44:39,510
work and work and it never gets done so

00:44:35,330 --> 00:44:42,750
that curve there imagine you're getting

00:44:39,510 --> 00:44:45,420
more traffic and more costumers and all

00:44:42,750 --> 00:44:47,490
of that which is good but if you're

00:44:45,420 --> 00:44:49,470
getting that and you're not fixing the

00:44:47,490 --> 00:44:54,450
errors you're not fixing the toil and

00:44:49,470 --> 00:44:57,680
the toil here is really the problem your

00:44:54,450 --> 00:44:57,680
company the whole company

00:44:57,710 --> 00:45:05,089
should see this problem happening before

00:45:01,010 --> 00:45:08,990
it actually goes like really strong on

00:45:05,089 --> 00:45:11,950
them and that's why the sre for instance

00:45:08,990 --> 00:45:16,460
on google was implemented like Trenor

00:45:11,950 --> 00:45:19,040
eek he actually is a system is a

00:45:16,460 --> 00:45:23,119
software engineer so is it comes from

00:45:19,040 --> 00:45:27,080
dev right but E is conducting an

00:45:23,119 --> 00:45:29,390
Operations team s re our operations they

00:45:27,080 --> 00:45:33,859
are but they're not in any more because

00:45:29,390 --> 00:45:37,460
they were converted to have as much as

00:45:33,859 --> 00:45:41,630
possible development on them not just

00:45:37,460 --> 00:45:45,650
toil right I don't know if I answered

00:45:41,630 --> 00:45:49,010
your question but this is this is like

00:45:45,650 --> 00:45:50,960
the point of no return that you don't

00:45:49,010 --> 00:45:53,660
want to get there and your company

00:45:50,960 --> 00:45:57,440
someone inside of the company must make

00:45:53,660 --> 00:46:10,820
them aware a this is happening don't go

00:45:57,440 --> 00:46:12,680
there yeah yeah yeah

00:46:10,820 --> 00:46:15,260
yeah thats that's exactly what this

00:46:12,680 --> 00:46:19,790
means like you're trying to solve a

00:46:15,260 --> 00:46:22,850
problem with more bodies is the problem

00:46:19,790 --> 00:46:25,700
going to go away well the tickets are

00:46:22,850 --> 00:46:27,890
going to write to to get you surely are

00:46:25,700 --> 00:46:30,410
going to get more repetitive work and

00:46:27,890 --> 00:46:32,570
more work that you can actually automate

00:46:30,410 --> 00:46:35,750
it and you're not automating that's

00:46:32,570 --> 00:46:43,480
going to increase it's probably good to

00:46:35,750 --> 00:46:49,880
the employment in the country more

00:46:43,480 --> 00:46:57,560
questions no okay I would ask you guys

00:46:49,880 --> 00:47:00,980
please go to the page where this note

00:46:57,560 --> 00:47:05,350
page to make your evaluation of the

00:47:00,980 --> 00:47:09,530
session don't be very hurtful I tried it

00:47:05,350 --> 00:47:12,950
but I think I think we all agree that if

00:47:09,530 --> 00:47:15,350
you guys have hops team we all agree we

00:47:12,950 --> 00:47:18,200
need to change something yeah and that's

00:47:15,350 --> 00:47:20,930
that was the purpose of this session to

00:47:18,200 --> 00:47:27,250
actually put a put us all in a new level

00:47:20,930 --> 00:47:27,250

YouTube URL: https://www.youtube.com/watch?v=4DWXv9zyIGg


