Title: DrupalCon Nashville 2018: Building "cooperative" APIs with HTTP 2
Publication date: 2018-04-11
Playlist: DrupalCon Nashville - April 2018
Description: 
	Much has been made of HTTP/2 and how it can improve frontend performance. It has challenged best-practices like JS minification and CSS aggregation. However, very little has been done to explore its impact on REST APIs. In this session, we're going to dive into HTTP/2 from a backend perspective and we'll see how its improved semantics and its expanded featureset enables a new way of thinking about RESTful APIs.

We'll see how client and server can work cooperatively to improve performance. We'll see how server push can solve tedious problems like paginated responses and eliminate requests entirely. Finally, we'll see how improvements borne out of HTTP/2 can still improve experiences for clients that don't yet support HTTP/2 or don't have the capability to take advantage of some of its features.

Attendees need not have any PHP or Drupal experience. An understanding of REST ideas like using the HTTP methods GET, POST, PATCH, or DELETE to read, create, update or remove resources will make it easier to follow along.



Truly sorry for cutting the session short; that's completely on me.

Here are all the links for all the relevant code. A little background that I couldn't get to:

Hades is an HTTP/2 server written in Go which parses the X-Push-Please header and server pushes the requested resources. Juissy is a new JSON API client that requires no configuration and can cooperate with Hades or fall back to HTTP/1.1 with no change in code or configuration (it's all handled in the library). It automatically handles pagination for you too.

There's a lot more to explored with all these things. I regularly post about HTTP/2 on Twitter and will be writing a blog post about these ideas soon. Stay tuned!

Demo: https://demo.sullice.com

Demo Code: https://github.com/gabesullice/cooperative-api-demo

Hades: https://github.com/gabesullice/hades (Hades is an experimental HATEOAS-based HTTP/2 reverse proxy for JSON API backends)

Juissy: https://github.com/gabesullice/juissy (Juissy is a minimal experimental JSON API client for Drupal)
Captions: 
	00:00:00,390 --> 00:00:03,600
if you didn't already know you're in

00:00:02,070 --> 00:00:07,319
building cooperative API it's with

00:00:03,600 --> 00:00:08,849
http/2 I wanted to quickly just give a

00:00:07,319 --> 00:00:10,950
shout out for it a couple Drupal days

00:00:08,849 --> 00:00:14,400
it's going to be in New York City on

00:00:10,950 --> 00:00:16,890
August 17th through 19th it's a great

00:00:14,400 --> 00:00:18,570
place to come share experiences about

00:00:16,890 --> 00:00:23,039
building two coupled sites learn from

00:00:18,570 --> 00:00:25,560
one another ask questions voice concerns

00:00:23,039 --> 00:00:26,699
just collaborate on some really cool and

00:00:25,560 --> 00:00:30,869
awesome stuff that's pushing the

00:00:26,699 --> 00:00:32,460
boundaries of what triple can do kind of

00:00:30,869 --> 00:00:34,940
bringing us into the future of what we

00:00:32,460 --> 00:00:38,969
can do with JavaScript in with Drupal

00:00:34,940 --> 00:00:40,370
yeah so try and make it decoupled Drupal

00:00:38,969 --> 00:00:43,500
days

00:00:40,370 --> 00:00:44,940
I'm Gabe Solis I'm a senior engineer at

00:00:43,500 --> 00:00:47,579
aqueous

00:00:44,940 --> 00:00:50,370
jason api co maintainer I really love

00:00:47,579 --> 00:00:54,120
http/2 I've really loved like reading

00:00:50,370 --> 00:00:58,920
the specifications RFC's and I I do lose

00:00:54,120 --> 00:01:00,469
sleep over sleep over api's just figure

00:00:58,920 --> 00:01:05,250
out like how we're gonna build

00:01:00,469 --> 00:01:07,500
cooperative HB API is with HTTP 2 we

00:01:05,250 --> 00:01:08,040
kind of have to understand where we're

00:01:07,500 --> 00:01:09,780
coming from

00:01:08,040 --> 00:01:12,900
and some of the concepts that are

00:01:09,780 --> 00:01:15,119
underneath HTTP so therefore why HTTP 2

00:01:12,900 --> 00:01:17,280
is different than HTTP 1 and then also

00:01:15,119 --> 00:01:19,140
some just basic concepts about how we

00:01:17,280 --> 00:01:22,549
build api's in general and how they work

00:01:19,140 --> 00:01:25,049
how client and server can work together

00:01:22,549 --> 00:01:27,090
at the lowest level that's as low as

00:01:25,049 --> 00:01:30,869
we're gonna go its IP or the Internet

00:01:27,090 --> 00:01:32,970
Protocol and it's very dumb system it's

00:01:30,869 --> 00:01:34,409
just you've got two nodes 2 computer

00:01:32,970 --> 00:01:36,840
systems communicating with one another

00:01:34,409 --> 00:01:38,700
sending data back and forth between a

00:01:36,840 --> 00:01:41,040
source and a host and they find each

00:01:38,700 --> 00:01:44,280
other on the big wide open Internet with

00:01:41,040 --> 00:01:46,470
IP addresses very raw just bits sent

00:01:44,280 --> 00:01:48,390
over the wire so the Internet Protocol

00:01:46,470 --> 00:01:51,180
describes how those two systems can

00:01:48,390 --> 00:01:53,220
communicate and then on top of that

00:01:51,180 --> 00:01:56,280
people have what's called TCP and that's

00:01:53,220 --> 00:01:59,759
the transport control protocol and TCP

00:01:56,280 --> 00:02:03,420
is a way a mechanism for communicating

00:01:59,759 --> 00:02:06,000
over IP but it adds specific features to

00:02:03,420 --> 00:02:08,879
IP that make it a little bit easier to

00:02:06,000 --> 00:02:11,970
use right so it's reliable ordered an

00:02:08,879 --> 00:02:13,050
air checked reliable meaning if I send a

00:02:11,970 --> 00:02:15,690
raw pocket of day

00:02:13,050 --> 00:02:17,640
over the wire I can be sure that it's

00:02:15,690 --> 00:02:19,860
going to end up in the client there's no

00:02:17,640 --> 00:02:22,020
I don't have to account for some packets

00:02:19,860 --> 00:02:24,780
of information not arriving right or

00:02:22,020 --> 00:02:26,610
just missing packets altogether ordered

00:02:24,780 --> 00:02:28,620
makes it easier to understand because if

00:02:26,610 --> 00:02:31,350
I sinned like a bunch of JSON over the

00:02:28,620 --> 00:02:33,360
wire that first half is going to get

00:02:31,350 --> 00:02:35,400
there first and the second half is gonna

00:02:33,360 --> 00:02:37,410
get there second is there are lots of

00:02:35,400 --> 00:02:39,810
different ways that that data could go

00:02:37,410 --> 00:02:42,000
over the big open Internet and so they

00:02:39,810 --> 00:02:43,650
might arrive out of order but TCP means

00:02:42,000 --> 00:02:45,810
I can be sure that they'll be there in

00:02:43,650 --> 00:02:47,820
the order I sent them and then air

00:02:45,810 --> 00:02:53,310
checked just means nothing got corrupted

00:02:47,820 --> 00:02:55,650
along the way and so HTTP then builds on

00:02:53,310 --> 00:02:59,070
top of that protocol and HTTP stands for

00:02:55,650 --> 00:03:01,500
hypertext Transfer Protocol and there's

00:02:59,070 --> 00:03:03,000
one distinct feature for what we've seen

00:03:01,500 --> 00:03:05,100
so far about protocols and that it's an

00:03:03,000 --> 00:03:07,500
application protocol so it means it's

00:03:05,100 --> 00:03:09,090
actually four being applied to real

00:03:07,500 --> 00:03:12,060
systems that you're going to build it it

00:03:09,090 --> 00:03:14,190
starts to get into actually how to how

00:03:12,060 --> 00:03:16,680
to build things that are what we

00:03:14,190 --> 00:03:19,230
consider applications right rather than

00:03:16,680 --> 00:03:21,180
just infrastructure underneath and

00:03:19,230 --> 00:03:22,440
another thing to call out is hyper media

00:03:21,180 --> 00:03:24,900
and that's going to be really important

00:03:22,440 --> 00:03:27,209
later because HTTP is intimately

00:03:24,900 --> 00:03:29,100
intertwined with the idea of hyper media

00:03:27,209 --> 00:03:32,160
it's kind of what makes the Internet

00:03:29,100 --> 00:03:37,260
over IP the web right the worldwide web

00:03:32,160 --> 00:03:39,630
that's hyper media so what is HTTP 1

00:03:37,260 --> 00:03:43,260
what is what we've been using for over

00:03:39,630 --> 00:03:44,850
20 years and we all just kind of take it

00:03:43,260 --> 00:03:46,590
for granted but really underneath the

00:03:44,850 --> 00:03:48,480
hood just a quick reminder we're gonna

00:03:46,590 --> 00:03:51,060
look at kind of how it's put together so

00:03:48,480 --> 00:03:53,610
at the highest level there's a few basic

00:03:51,060 --> 00:03:56,730
concepts let's you our eyes methods and

00:03:53,610 --> 00:04:01,050
messages a URI

00:03:56,730 --> 00:04:02,940
it's a Uniform Resource identifier we

00:04:01,050 --> 00:04:04,890
typically always see it as URL it

00:04:02,940 --> 00:04:06,390
doesn't necessarily need to be one what

00:04:04,890 --> 00:04:08,489
makes a URL different is that it's

00:04:06,390 --> 00:04:11,640
locatable and that kind of means like if

00:04:08,489 --> 00:04:13,980
I have example.com I can use DNS to find

00:04:11,640 --> 00:04:16,950
out that I'm supposed to go to 192 168

00:04:13,980 --> 00:04:19,530
blah blah blah but you could have a

00:04:16,950 --> 00:04:21,270
uniform resource identifier that doesn't

00:04:19,530 --> 00:04:24,450
have a dns resolution it it's not that

00:04:21,270 --> 00:04:26,039
important but then we see it as like

00:04:24,450 --> 00:04:27,330
this HTTP example.com

00:04:26,039 --> 00:04:30,750
API user 1

00:04:27,330 --> 00:04:33,270
it's a uniform unique identifier for the

00:04:30,750 --> 00:04:35,120
user with ID 1 that's where the user is

00:04:33,270 --> 00:04:37,889
okay

00:04:35,120 --> 00:04:42,030
breaking it down there's scheme host

00:04:37,889 --> 00:04:44,280
port path and query it's just the basic

00:04:42,030 --> 00:04:46,680
components of it

00:04:44,280 --> 00:04:48,330
so then HTTP has the concept of methods

00:04:46,680 --> 00:04:49,800
right and you've maybe seen these before

00:04:48,330 --> 00:04:52,650
if you've built ap is or if you've

00:04:49,800 --> 00:04:55,139
worked with rest there's a get past post

00:04:52,650 --> 00:04:56,849
patch put and delete there are others

00:04:55,139 --> 00:04:59,250
but what they do is they describe

00:04:56,849 --> 00:05:00,599
actions between between the client and

00:04:59,250 --> 00:05:02,819
the server things that you want to

00:05:00,599 --> 00:05:05,280
change right there are a couple others

00:05:02,819 --> 00:05:06,870
had options trace connect but there are

00:05:05,280 --> 00:05:11,520
really more about discovery they're not

00:05:06,870 --> 00:05:14,370
about applications options kind of says

00:05:11,520 --> 00:05:17,069
what am I allowed to do get says get me

00:05:14,370 --> 00:05:19,740
the resource at a particular URI post

00:05:17,069 --> 00:05:22,349
says create an interim a resource at

00:05:19,740 --> 00:05:25,349
this URI so maybe add a new user past

00:05:22,349 --> 00:05:28,889
post patch put delete all different

00:05:25,349 --> 00:05:30,900
variations of that idea and then

00:05:28,889 --> 00:05:32,279
statuses are kind of from the other side

00:05:30,900 --> 00:05:34,919
so if you've got a client and a server

00:05:32,279 --> 00:05:36,990
working together methods are what the

00:05:34,919 --> 00:05:39,979
client sins and statuses are what the

00:05:36,990 --> 00:05:42,810
server sends back and so they categorize

00:05:39,979 --> 00:05:44,580
basically errors or information they

00:05:42,810 --> 00:05:49,650
categorize that communication between

00:05:44,580 --> 00:05:52,289
the client and the server 200-level

00:05:49,650 --> 00:05:54,659
errors they basically say I understood

00:05:52,289 --> 00:05:57,389
the message that you sent me I did what

00:05:54,659 --> 00:05:58,889
you expected me to do we're all good and

00:05:57,389 --> 00:06:02,219
then there are their sub categories in

00:05:58,889 --> 00:06:03,870
there like 202 201 204 they're all

00:06:02,219 --> 00:06:08,669
basically saying I understood and we're

00:06:03,870 --> 00:06:10,460
good to go 300 level errors they say

00:06:08,669 --> 00:06:14,069
like I understand what you're asking for

00:06:10,460 --> 00:06:15,960
client but maybe you actually meant this

00:06:14,069 --> 00:06:18,139
I you should be talking to a different

00:06:15,960 --> 00:06:23,159
resource for hundreds it's just like

00:06:18,139 --> 00:06:24,870
client you're drunk go home it's a bad

00:06:23,159 --> 00:06:27,599
request it so that the clients fault and

00:06:24,870 --> 00:06:30,180
500 is kind of like it's not you it's me

00:06:27,599 --> 00:06:31,110
I'm sorry I whatever you did was okay

00:06:30,180 --> 00:06:35,610
but I

00:06:31,110 --> 00:06:36,839
I really screwed up you know and so we

00:06:35,610 --> 00:06:37,949
talked about that idea that there's a

00:06:36,839 --> 00:06:39,009
client and server and they're sending

00:06:37,949 --> 00:06:41,110
messages back and

00:06:39,009 --> 00:06:43,449
fourth so that's the the fundamental

00:06:41,110 --> 00:06:46,659
idea of HDPE is that you have requests

00:06:43,449 --> 00:06:48,279
and responses and they're they basically

00:06:46,659 --> 00:06:51,009
start with the line they're composed of

00:06:48,279 --> 00:06:52,899
a URI method status headers which are

00:06:51,009 --> 00:06:56,649
meta information about the message and

00:06:52,899 --> 00:06:58,839
the body so what's actually there

00:06:56,649 --> 00:07:07,809
and then headers I said describe the

00:06:58,839 --> 00:07:12,279
resource my arrows he just stopped

00:07:07,809 --> 00:07:15,099
working there we go so for example an

00:07:12,279 --> 00:07:17,020
HTTP request or a response it's gonna

00:07:15,099 --> 00:07:19,029
say content type might be the header and

00:07:17,020 --> 00:07:21,009
it's text HTML and then of course the

00:07:19,029 --> 00:07:22,960
body follows and that kind of tells the

00:07:21,009 --> 00:07:25,120
client how to interpret the information

00:07:22,960 --> 00:07:27,129
that's being said it's don't try and

00:07:25,120 --> 00:07:30,580
paste parse this as json.parse it as

00:07:27,129 --> 00:07:31,959
HTML alternatively it could say it's

00:07:30,580 --> 00:07:34,149
JSON and so then you wouldn't be looking

00:07:31,959 --> 00:07:36,580
for angle brackets in HTML you're

00:07:34,149 --> 00:07:38,259
looking for JSON so that's that's part

00:07:36,580 --> 00:07:43,779
of cooperation between the client and

00:07:38,259 --> 00:07:46,029
server they're just looking at a request

00:07:43,779 --> 00:07:48,879
it could be very simple with no content

00:07:46,029 --> 00:07:52,270
in it you say get you know give me the

00:07:48,879 --> 00:07:57,180
user one and then the response all put

00:07:52,270 --> 00:07:57,180
together here you see the 200 okay a lot

00:07:58,080 --> 00:08:03,039
so then on top of that right we start

00:08:01,029 --> 00:08:05,139
building api's and we start talking

00:08:03,039 --> 00:08:09,099
about rest and that's kind of like the

00:08:05,139 --> 00:08:12,519
lingua franca for API is built on top of

00:08:09,099 --> 00:08:14,080
HTTP and what does that stand for

00:08:12,519 --> 00:08:15,699
sometimes we just hear like something is

00:08:14,080 --> 00:08:17,409
restful all right and you might think

00:08:15,699 --> 00:08:19,599
like okay that means it's going to be in

00:08:17,409 --> 00:08:21,909
JSON and it's probably going to be some

00:08:19,599 --> 00:08:25,089
different URLs that are gonna be

00:08:21,909 --> 00:08:26,949
generally structured like some type like

00:08:25,089 --> 00:08:29,919
a user or an article or something slash

00:08:26,949 --> 00:08:34,899
ID and I and I know I can I can share

00:08:29,919 --> 00:08:36,490
those between a client and a server rest

00:08:34,899 --> 00:08:38,740
stands for reference and patient estate

00:08:36,490 --> 00:08:40,360
transfer and it's important to

00:08:38,740 --> 00:08:42,940
understand that it's really about moving

00:08:40,360 --> 00:08:45,130
state back and forth between the client

00:08:42,940 --> 00:08:48,010
and server it's not about performing

00:08:45,130 --> 00:08:50,769
actions it's not about behavior changes

00:08:48,010 --> 00:08:52,660
so if you're familiar with Drupal like

00:08:50,769 --> 00:08:54,490
you can't clear cache

00:08:52,660 --> 00:08:56,709
restful way because you're just you're

00:08:54,490 --> 00:08:58,420
telling Drupal to do something but

00:08:56,709 --> 00:09:02,949
you're not transferring state back and

00:08:58,420 --> 00:09:04,800
forth right and so rest is not actually

00:09:02,949 --> 00:09:09,129
a protocol we've been talking about IP

00:09:04,800 --> 00:09:11,199
TCP HTTP rest isn't a protocol really

00:09:09,129 --> 00:09:13,089
it's just kind of like a style of

00:09:11,199 --> 00:09:17,379
building things on top of that

00:09:13,089 --> 00:09:19,149
application layer that HTTP so it's just

00:09:17,379 --> 00:09:22,779
principles about how you might construct

00:09:19,149 --> 00:09:27,329
an application and it's totally it's

00:09:22,779 --> 00:09:30,910
always HDV so what are those principles

00:09:27,329 --> 00:09:32,769
they seem rather obvious but they end up

00:09:30,910 --> 00:09:35,560
having really like huge ramifications

00:09:32,769 --> 00:09:38,350
for how you design a system that allow

00:09:35,560 --> 00:09:42,189
to a client and a server to to evolve

00:09:38,350 --> 00:09:44,350
over time and be really robust and to

00:09:42,189 --> 00:09:46,360
develop independently of one another so

00:09:44,350 --> 00:09:48,279
if a server needs to change out its

00:09:46,360 --> 00:09:50,439
database and you know switch from my

00:09:48,279 --> 00:09:52,629
sequel to Postgres it can do that or if

00:09:50,439 --> 00:09:55,569
you need to go from Drupal 7 to Drupal 8

00:09:52,629 --> 00:09:58,480
and still keep operating you can upgrade

00:09:55,569 --> 00:10:00,370
that without necessarily updating like a

00:09:58,480 --> 00:10:04,329
JavaScript client that's kind of the

00:10:00,370 --> 00:10:06,009
promise of decoupled because if what

00:10:04,329 --> 00:10:08,319
that client and server does is it

00:10:06,009 --> 00:10:10,029
creates a separation of concerns right

00:10:08,319 --> 00:10:12,189
the client is going to handle

00:10:10,029 --> 00:10:14,079
presentation of the data and the server

00:10:12,189 --> 00:10:15,970
is going to stand handle storage and

00:10:14,079 --> 00:10:18,279
maybe some business logic like what to

00:10:15,970 --> 00:10:19,689
do when a new user is created maybe you

00:10:18,279 --> 00:10:24,069
need to send an email or something like

00:10:19,689 --> 00:10:26,860
that so if you've been hearing about a

00:10:24,069 --> 00:10:29,649
couple sites that comes from this idea

00:10:26,860 --> 00:10:31,019
of restful systems being client and

00:10:29,649 --> 00:10:34,079
server

00:10:31,019 --> 00:10:36,730
well they influence one another rather

00:10:34,079 --> 00:10:38,380
stateless is the idea that that HTTP

00:10:36,730 --> 00:10:40,449
request and response have to be

00:10:38,380 --> 00:10:43,660
independent from one another

00:10:40,449 --> 00:10:46,089
right if you send two or three requests

00:10:43,660 --> 00:10:49,389
they can't affect each other in any

00:10:46,089 --> 00:10:50,740
significant any way right so the way you

00:10:49,389 --> 00:10:54,699
might think about this is if I send a

00:10:50,740 --> 00:10:57,399
request and I say get you know some some

00:10:54,699 --> 00:10:58,809
resource and I get a 403 back it's

00:10:57,399 --> 00:11:01,389
denied to me I don't have permission to

00:10:58,809 --> 00:11:04,430
view that resource and then I go to a

00:11:01,389 --> 00:11:05,990
login page and I do some login there

00:11:04,430 --> 00:11:07,970
and then I go back and I tree try the

00:11:05,990 --> 00:11:10,670
same request and I didn't change

00:11:07,970 --> 00:11:13,040
anything about that first request it

00:11:10,670 --> 00:11:14,930
should still be denied right it

00:11:13,040 --> 00:11:16,670
shouldn't be that I that I made the

00:11:14,930 --> 00:11:18,589
login call I actually have to change

00:11:16,670 --> 00:11:20,120
something about the request so that

00:11:18,589 --> 00:11:22,459
might mean putting a cookie header on

00:11:20,120 --> 00:11:24,500
there or an authorization header that's

00:11:22,459 --> 00:11:28,820
what makes it self-contained it's

00:11:24,500 --> 00:11:30,980
independent of one another and then

00:11:28,820 --> 00:11:33,230
cache ability is the idea that your

00:11:30,980 --> 00:11:35,660
resources the representations that come

00:11:33,230 --> 00:11:38,300
for it have to share information about

00:11:35,660 --> 00:11:40,459
if they can be stored for any given

00:11:38,300 --> 00:11:42,380
period of time so if you've got a CD in

00:11:40,459 --> 00:11:44,270
how long can it can it cache this

00:11:42,380 --> 00:11:46,550
response or if you're trying to build an

00:11:44,270 --> 00:11:50,120
offline app how long is this resource

00:11:46,550 --> 00:11:51,410
valid or something like that and the

00:11:50,120 --> 00:11:53,180
reason you want things to be catchable

00:11:51,410 --> 00:11:55,220
or so you can eliminate requests and

00:11:53,180 --> 00:11:56,959
responses altogether because that always

00:11:55,220 --> 00:11:59,720
has a cost right if you make a request

00:11:56,959 --> 00:12:01,970
to a server even though it's it's really

00:11:59,720 --> 00:12:03,110
fast over fiber-optic cable you know

00:12:01,970 --> 00:12:05,149
you're never going to really get it

00:12:03,110 --> 00:12:08,270
under 100 milliseconds if you're going

00:12:05,149 --> 00:12:10,700
between the US and Europe it's just

00:12:08,270 --> 00:12:13,010
unavoidable physics there's time that it

00:12:10,700 --> 00:12:14,870
takes to make those two that cycle of a

00:12:13,010 --> 00:12:16,520
request and a response so if it's

00:12:14,870 --> 00:12:19,250
cashable you can kind of eliminate those

00:12:16,520 --> 00:12:21,200
requests altogether or maybe cash

00:12:19,250 --> 00:12:25,910
something on the edge and make that

00:12:21,200 --> 00:12:28,940
latency lower layered system is that if

00:12:25,910 --> 00:12:32,330
a system is restful it should be able to

00:12:28,940 --> 00:12:35,000
have layers put in between like proxies

00:12:32,330 --> 00:12:36,680
or load balancers or CD ends and nobody

00:12:35,000 --> 00:12:38,330
should be the wiser the the server

00:12:36,680 --> 00:12:40,100
that's generating the actual resource

00:12:38,330 --> 00:12:44,120
and the client they don't need to know

00:12:40,100 --> 00:12:46,870
that something was in between them code

00:12:44,120 --> 00:12:49,250
on demand is kind of an under

00:12:46,870 --> 00:12:50,660
underrepresented or people don't really

00:12:49,250 --> 00:12:53,810
think of it very much but it is part of

00:12:50,660 --> 00:12:56,600
rest and it's optional but it means that

00:12:53,810 --> 00:12:58,579
you can actually send code in a restful

00:12:56,600 --> 00:13:01,820
way that tells this the client how to

00:12:58,579 --> 00:13:04,279
understand a resource you might think

00:13:01,820 --> 00:13:06,980
about that in terms of like doing

00:13:04,279 --> 00:13:09,829
client-side validation if you if you

00:13:06,980 --> 00:13:12,110
wanted to send a schema for a user and

00:13:09,829 --> 00:13:13,730
you want it to be able to say certain

00:13:12,110 --> 00:13:15,589
rules like you can't have these komban

00:13:13,730 --> 00:13:17,180
of fields or something you might be able

00:13:15,589 --> 00:13:21,139
to ship some JavaScript over there that

00:13:17,180 --> 00:13:23,300
can run that validation its kind of it

00:13:21,139 --> 00:13:25,699
came about for making like Java applets

00:13:23,300 --> 00:13:29,600
and stuff but it kind of fell out of

00:13:25,699 --> 00:13:30,800
favor and then uniform interface I

00:13:29,600 --> 00:13:36,110
promise we're wrapping this stuff about

00:13:30,800 --> 00:13:37,010
rest up it's that kind of like what I

00:13:36,110 --> 00:13:40,130
was saying you could switch between

00:13:37,010 --> 00:13:43,459
Postgres and my sequel representations

00:13:40,130 --> 00:13:45,769
are decoupled from their storage and so

00:13:43,459 --> 00:13:48,110
when you when you're operating over over

00:13:45,769 --> 00:13:50,269
a restful api you you're not just like

00:13:48,110 --> 00:13:52,880
sending a sequel query you're not saying

00:13:50,269 --> 00:13:54,440
like if i'm if i want to post a user you

00:13:52,880 --> 00:13:57,820
don't actually put in your request like

00:13:54,440 --> 00:13:59,779
insert into table you know values you're

00:13:57,820 --> 00:14:02,180
you're you're not having to worry about

00:13:59,779 --> 00:14:04,070
the actual implementation details so it

00:14:02,180 --> 00:14:07,010
allows you to build things in a couple

00:14:04,070 --> 00:14:11,690
teams and and version things and

00:14:07,010 --> 00:14:13,579
progress forward and then of course

00:14:11,690 --> 00:14:16,880
there's the idea that you use hyper

00:14:13,579 --> 00:14:20,899
media to communicate state okay so hyper

00:14:16,880 --> 00:14:23,829
media is this idea is linking and that's

00:14:20,899 --> 00:14:26,060
how you can you can make change

00:14:23,829 --> 00:14:28,279
represent the state on the server and

00:14:26,060 --> 00:14:31,069
the client and we'll look at that later

00:14:28,279 --> 00:14:33,050
but like if you if you're getting a

00:14:31,069 --> 00:14:36,050
collection of resources and you want to

00:14:33,050 --> 00:14:37,699
know is there another page right you

00:14:36,050 --> 00:14:40,310
don't necessarily have to say there are

00:14:37,699 --> 00:14:42,040
five pages for a listing you just put a

00:14:40,310 --> 00:14:44,540
link in there to the next one and that

00:14:42,040 --> 00:14:46,279
communicates itself the fact that

00:14:44,540 --> 00:14:50,449
there's a link there that there is a

00:14:46,279 --> 00:14:52,670
next page so hypermedia kind of sounds a

00:14:50,449 --> 00:14:55,209
little fancy but it's really quite a

00:14:52,670 --> 00:14:58,670
simple concept if we just think about

00:14:55,209 --> 00:15:00,139
text that's not hypertext right it's

00:14:58,670 --> 00:15:02,690
just like this right it's I'm a teapot

00:15:00,139 --> 00:15:05,569
short and stout and all of a sudden

00:15:02,690 --> 00:15:07,940
we've made it hypertext okay all we did

00:15:05,569 --> 00:15:11,300
is we added a link to text and that link

00:15:07,940 --> 00:15:13,069
is saying this this bit of content can

00:15:11,300 --> 00:15:16,040
reach out and it's referencing something

00:15:13,069 --> 00:15:20,600
else it makes it adds information to

00:15:16,040 --> 00:15:22,339
just something simpler and hypermedia

00:15:20,600 --> 00:15:25,069
it's just the difference between saying

00:15:22,339 --> 00:15:26,100
hypertext or hyper JSON or hyper XML

00:15:25,069 --> 00:15:30,029
hyper media

00:15:26,100 --> 00:15:33,209
 encompasses them all and so you can

00:15:30,029 --> 00:15:34,860
have you can have links in JSON and they

00:15:33,209 --> 00:15:37,709
can be represented in different ways but

00:15:34,860 --> 00:15:41,459
the idea is those those links can exist

00:15:37,709 --> 00:15:44,459
okay and so you know you can have the

00:15:41,459 --> 00:15:46,889
same exact representation in JSON as you

00:15:44,459 --> 00:15:48,269
do here you know you've got the the line

00:15:46,889 --> 00:15:50,339
of text and then something else that it

00:15:48,269 --> 00:15:53,009
references JSON you have the same

00:15:50,339 --> 00:15:57,930
content and then a link out to its

00:15:53,009 --> 00:15:59,699
explanation and that hypermedia creates

00:15:57,930 --> 00:16:01,860
kind of the web as we know it you can

00:15:59,699 --> 00:16:04,230
think of everything on the web as these

00:16:01,860 --> 00:16:06,810
nodes with lines in between them edges

00:16:04,230 --> 00:16:09,060
in a graph and they they create this

00:16:06,810 --> 00:16:11,120
this web of information that inform one

00:16:09,060 --> 00:16:13,139
another but also describe the

00:16:11,120 --> 00:16:15,569
relationships between different

00:16:13,139 --> 00:16:19,819
resources so the relationship between a

00:16:15,569 --> 00:16:19,819
listing of users and a particular user

00:16:20,180 --> 00:16:24,540
so thinking about a very traditional

00:16:22,319 --> 00:16:28,139
website you might have the very the home

00:16:24,540 --> 00:16:30,899
page it lives at index.html and so a

00:16:28,139 --> 00:16:33,120
client might go and request that it

00:16:30,899 --> 00:16:35,040
downloads the HTML and it notices that

00:16:33,120 --> 00:16:38,399
there's an image tag with a link a

00:16:35,040 --> 00:16:40,230
source right to a hero and the browser

00:16:38,399 --> 00:16:42,689
is going to download that it's going to

00:16:40,230 --> 00:16:44,639
notice that there's a style that CSS and

00:16:42,689 --> 00:16:46,410
it's gonna grab that and then when it

00:16:44,639 --> 00:16:48,689
gets the style and CSS it's gonna see

00:16:46,410 --> 00:16:51,630
that there are probably icons in that

00:16:48,689 --> 00:16:55,110
CSS as well or fonts or things like that

00:16:51,630 --> 00:16:58,769
and it it makes up the whole page it's a

00:16:55,110 --> 00:17:01,589
big graph or tree of information that

00:16:58,769 --> 00:17:04,169
that has to be fetched to represent that

00:17:01,589 --> 00:17:08,250
thing that home page resource all at

00:17:04,169 --> 00:17:10,049
once but those hypermedia legs don't

00:17:08,250 --> 00:17:12,449
just make up a single page they can

00:17:10,049 --> 00:17:13,860
represent whole applications so if you

00:17:12,449 --> 00:17:16,770
think about a website in general not

00:17:13,860 --> 00:17:18,569
just the home page there can be the home

00:17:16,770 --> 00:17:21,120
page that links to an about page that

00:17:18,569 --> 00:17:24,630
also links to a post page and that post

00:17:21,120 --> 00:17:27,539
page also links to individual posts and

00:17:24,630 --> 00:17:30,360
so not just one page but a whole suite

00:17:27,539 --> 00:17:36,030
of a whole application lives under that

00:17:30,360 --> 00:17:37,020
that idea of linked hypermedia then we

00:17:36,030 --> 00:17:39,059
see something that's a little bit more

00:17:37,020 --> 00:17:41,249
restful right it's posts post

00:17:39,059 --> 00:17:43,649
post one and those posts might reference

00:17:41,249 --> 00:17:48,330
tags or something on them and it makes

00:17:43,649 --> 00:17:49,799
up that graph so if you're if you're an

00:17:48,330 --> 00:17:52,860
API client or something you're you're

00:17:49,799 --> 00:17:55,200
getting posts and then you want to learn

00:17:52,860 --> 00:17:57,389
more about the second post you might

00:17:55,200 --> 00:18:00,840
Traverse that link download that other

00:17:57,389 --> 00:18:03,509
data and of course the graph then then

00:18:00,840 --> 00:18:06,299
changes so that now that you're at post

00:18:03,509 --> 00:18:09,659
two or previously we were at just post

00:18:06,299 --> 00:18:11,369
at the head of that graph the what you

00:18:09,659 --> 00:18:13,799
can see changes so now you've got tags

00:18:11,369 --> 00:18:15,360
and author tags one and that graph is

00:18:13,799 --> 00:18:19,830
always expanding out in front of you as

00:18:15,360 --> 00:18:21,299
you move along right so in HTTP 1 how do

00:18:19,830 --> 00:18:25,980
we how do we understand this whole graph

00:18:21,299 --> 00:18:27,600
at once we have to make requests right

00:18:25,980 --> 00:18:29,519
so we get it we send a get request for

00:18:27,600 --> 00:18:33,869
index data HTML we send gets four heroes

00:18:29,519 --> 00:18:35,460
and styles and so what is the actual

00:18:33,869 --> 00:18:37,740
order of operations when we send those

00:18:35,460 --> 00:18:40,019
request responses we first get index dot

00:18:37,740 --> 00:18:42,149
HTML and then we have to download with

00:18:40,019 --> 00:18:44,129
that HTML let me notice okay there's

00:18:42,149 --> 00:18:46,710
some style that CSS is approaching let's

00:18:44,129 --> 00:18:49,080
go get that then we're gonna go get the

00:18:46,710 --> 00:18:51,210
hero image and then of course we finally

00:18:49,080 --> 00:18:53,669
we received the style and so now we see

00:18:51,210 --> 00:18:56,279
we got to get the separator and we got

00:18:53,669 --> 00:18:58,259
to get the list bullet and so of course

00:18:56,279 --> 00:18:59,490
that's really slow you you make these

00:18:58,259 --> 00:19:01,139
requests and they're sequentially

00:18:59,490 --> 00:19:03,629
operated and so to download a whole page

00:19:01,139 --> 00:19:05,039
with maybe hundreds of resources that

00:19:03,629 --> 00:19:06,720
can take a lot of time because you just

00:19:05,039 --> 00:19:09,809
have to do one after the other after the

00:19:06,720 --> 00:19:14,100
other and so people started trying to

00:19:09,809 --> 00:19:16,169
optimize that system and so browsers

00:19:14,100 --> 00:19:18,360
basically looked at TCP and they looked

00:19:16,169 --> 00:19:19,919
at HTTP and they said okay how can we

00:19:18,360 --> 00:19:21,779
make this a little bit faster first look

00:19:19,919 --> 00:19:23,700
at the HTML but then we're just going to

00:19:21,779 --> 00:19:26,970
open up to TCP connections and we'll do

00:19:23,700 --> 00:19:29,129
it at the same time and we'll ask for

00:19:26,970 --> 00:19:31,440
the style and the hero at relatively the

00:19:29,129 --> 00:19:33,059
same the same time and that makes

00:19:31,440 --> 00:19:35,249
everything a little bit faster we

00:19:33,059 --> 00:19:38,669
download the styles and then we ask for

00:19:35,249 --> 00:19:40,769
those icons as soon as we have the CSS

00:19:38,669 --> 00:19:42,809
and of course it starts to get optimized

00:19:40,769 --> 00:19:46,499
we're bringing that waterfall down it's

00:19:42,809 --> 00:19:48,899
becoming faster and faster and to that

00:19:46,499 --> 00:19:50,820
encourage people to do do strange things

00:19:48,899 --> 00:19:51,940
like well we still don't want to make

00:19:50,820 --> 00:19:53,559
multiple requests for

00:19:51,940 --> 00:19:55,539
all the icons let's put them all into

00:19:53,559 --> 00:19:59,740
one one big bucket and download the

00:19:55,539 --> 00:20:01,870
whole thing at once and http2 can I said

00:19:59,740 --> 00:20:04,929
well maybe we don't need to have this

00:20:01,870 --> 00:20:07,120
big waterfall of content when somebody

00:20:04,929 --> 00:20:10,840
asks for the index dot HTML let's just

00:20:07,120 --> 00:20:12,940
send them everything at once so HTTP to

00:20:10,840 --> 00:20:15,490
introduced this idea of server push and

00:20:12,940 --> 00:20:17,590
that's the big thing that is supposed to

00:20:15,490 --> 00:20:19,450
make it so much more performant the idea

00:20:17,590 --> 00:20:20,620
is you get that index out of HTML and

00:20:19,450 --> 00:20:22,960
the server already knows you're going to

00:20:20,620 --> 00:20:25,029
ask for the style that CSS and the hero

00:20:22,960 --> 00:20:28,299
image and all the icons and so it can

00:20:25,029 --> 00:20:29,409
just send it to you all at once and so

00:20:28,299 --> 00:20:31,080
people have been saying ok this

00:20:29,409 --> 00:20:35,799
overthrows that idea of maybe doing

00:20:31,080 --> 00:20:37,419
spriting with your icons or using link

00:20:35,799 --> 00:20:39,639
pre loaders pre features and all this

00:20:37,419 --> 00:20:43,570
kind of stuff that of course like

00:20:39,639 --> 00:20:45,519
introduces this idea of the server is

00:20:43,570 --> 00:20:48,990
kind of saying that you forcing you to

00:20:45,519 --> 00:20:48,990
download things that you may not need

00:20:49,019 --> 00:20:53,019
and so that's that's the goal right

00:20:51,490 --> 00:20:59,679
we're trying to get that waterfall

00:20:53,019 --> 00:21:01,210
smaller and smaller ok so we've talked

00:20:59,679 --> 00:21:02,409
about it should be one we've talked

00:21:01,210 --> 00:21:05,559
about rest we've talked about these

00:21:02,409 --> 00:21:07,269
basic principles and now I kind of want

00:21:05,559 --> 00:21:10,500
to talk about cooperation and what

00:21:07,269 --> 00:21:13,529
allows clients and servers to cooperate

00:21:10,500 --> 00:21:16,480
and that's through specifications

00:21:13,529 --> 00:21:19,120
specifications in part meaning to to a

00:21:16,480 --> 00:21:22,590
lower level protocol so HTTP and part of

00:21:19,120 --> 00:21:25,149
meaning to TCP it says if I send a

00:21:22,590 --> 00:21:27,669
request a packet of information and it

00:21:25,149 --> 00:21:29,799
has the word get in the top means you're

00:21:27,669 --> 00:21:32,710
supposed to give me something write to

00:21:29,799 --> 00:21:35,460
200 statuses mean it worked

00:21:32,710 --> 00:21:43,830
headers describe the body bla

00:21:35,460 --> 00:21:47,460
specifications allow three minutes ok

00:21:43,830 --> 00:21:47,460
Wow all right

00:21:49,160 --> 00:21:53,340
all right so schema lets you to

00:21:51,990 --> 00:21:56,700
understand the data types that are there

00:21:53,340 --> 00:21:58,410
and hey das links lets you say like are

00:21:56,700 --> 00:22:03,960
there are more pages can I delete this

00:21:58,410 --> 00:22:05,490
does this cart have products can I make

00:22:03,960 --> 00:22:07,920
a withdrawal it's a link that exists

00:22:05,490 --> 00:22:10,650
there to withdraw content or withdraw it

00:22:07,920 --> 00:22:12,990
for make it withdrawal that linked

00:22:10,650 --> 00:22:15,140
shouldn't exist if the bank account is

00:22:12,990 --> 00:22:15,140
empty

00:22:15,720 --> 00:22:22,410
so we can look at like adjacent can

00:22:17,640 --> 00:22:24,060
everybody read this cool we look at a

00:22:22,410 --> 00:22:27,060
document that might be at like a PA

00:22:24,060 --> 00:22:28,470
slash content and we see that the next

00:22:27,060 --> 00:22:31,920
link is there so there must be more

00:22:28,470 --> 00:22:33,510
pages create is here there's a link

00:22:31,920 --> 00:22:39,210
there so we must be allowed to create

00:22:33,510 --> 00:22:44,550
content I'm just gonna skip very far

00:22:39,210 --> 00:22:46,920
ahead so let's say you're an API thing

00:22:44,550 --> 00:22:48,780
and you want to you basically a server

00:22:46,920 --> 00:22:50,730
can't push all the information you need

00:22:48,780 --> 00:22:52,320
it doesn't know what the client needs if

00:22:50,730 --> 00:22:54,510
you're in a decoupled world it doesn't

00:22:52,320 --> 00:22:56,070
know that if your if your load looking

00:22:54,510 --> 00:22:58,470
loading a certain post that you also

00:22:56,070 --> 00:22:59,850
need the comments and if you're if

00:22:58,470 --> 00:23:02,160
you're at a couple client you might be

00:22:59,850 --> 00:23:04,500
getting a certain post and say I don't

00:23:02,160 --> 00:23:05,670
know it's just like a teaser list you

00:23:04,500 --> 00:23:07,860
don't need the comments but then as soon

00:23:05,670 --> 00:23:09,270
as you navigate to the page itself those

00:23:07,860 --> 00:23:11,910
comments need to be there so a server

00:23:09,270 --> 00:23:13,800
can't push in a restful world that

00:23:11,910 --> 00:23:17,010
content along without some extra

00:23:13,800 --> 00:23:18,930
cooperation same goes for pages as you

00:23:17,010 --> 00:23:19,950
get secondary pages and then comments

00:23:18,930 --> 00:23:21,300
for other items you don't know what you

00:23:19,950 --> 00:23:23,760
need

00:23:21,300 --> 00:23:25,860
so you still end up in that waterfall

00:23:23,760 --> 00:23:29,820
system where you're you're making this

00:23:25,860 --> 00:23:31,290
waterfall of requests so basically the

00:23:29,820 --> 00:23:33,300
way that we can solve that is we can

00:23:31,290 --> 00:23:37,860
communicate exactly what we need

00:23:33,300 --> 00:23:40,650
if I'm if I'm a client I know I may need

00:23:37,860 --> 00:23:43,710
know that I need all the posts but I

00:23:40,650 --> 00:23:46,200
don't know how many to get if if I need

00:23:43,710 --> 00:23:48,600
the schema for a post I don't know if

00:23:46,200 --> 00:23:49,950
it's up-to-date if I'm a server I know

00:23:48,600 --> 00:23:51,600
that there may be a hundred and fifty

00:23:49,950 --> 00:23:52,950
posts but I don't know how many the

00:23:51,600 --> 00:23:59,010
client wants maybe they're just doing a

00:23:52,950 --> 00:24:00,230
listing of the top five so basically

00:23:59,010 --> 00:24:02,570
what I was

00:24:00,230 --> 00:24:05,000
well what I was hoping to show is that

00:24:02,570 --> 00:24:08,090
we can communicate using this idea of

00:24:05,000 --> 00:24:10,399
hypermedia hyperlinks in text and we can

00:24:08,090 --> 00:24:13,279
send a header that says when you respond

00:24:10,399 --> 00:24:15,830
to me we look at the bottom of 200 okay

00:24:13,279 --> 00:24:17,720
if I go to slash API and I get a

00:24:15,830 --> 00:24:20,480
response and it comes back with links

00:24:17,720 --> 00:24:23,110
like API content that's a listing of

00:24:20,480 --> 00:24:25,190
content I can specify a path in that

00:24:23,110 --> 00:24:27,440
content that says I want you to push

00:24:25,190 --> 00:24:29,059
something to me please right so if we

00:24:27,440 --> 00:24:32,750
look at that top one it says links

00:24:29,059 --> 00:24:34,789
content href we can follow that in and

00:24:32,750 --> 00:24:38,600
then the server knows that API slash

00:24:34,789 --> 00:24:40,130
content ought to be pushed right and

00:24:38,600 --> 00:24:42,440
then it you'll see that second push

00:24:40,130 --> 00:24:44,059
please inside the JSON it says in that

00:24:42,440 --> 00:24:48,169
thing that you're going to push to me

00:24:44,059 --> 00:24:50,899
also push to me the next page and also

00:24:48,169 --> 00:24:53,269
push to me the data comments that are

00:24:50,899 --> 00:24:55,159
related to it and Link those as well and

00:24:53,269 --> 00:24:57,080
you can say like I want a hundred of

00:24:55,159 --> 00:24:59,690
them no matter how many items are there

00:24:57,080 --> 00:25:01,159
per page give me up to a hundred of them

00:24:59,690 --> 00:25:06,260
and the server can just keep pushing

00:25:01,159 --> 00:25:16,580
those things so I'll just quickly do a

00:25:06,260 --> 00:25:21,309
very quick demo so this idea that you

00:25:16,580 --> 00:25:24,769
have this waterfall here is we click

00:25:21,309 --> 00:25:26,240
HTTP 1 and you're kind of noticing that

00:25:24,769 --> 00:25:28,100
waterfall there are five items per page

00:25:26,240 --> 00:25:31,909
there and they come in one by one by one

00:25:28,100 --> 00:25:36,970
and if we were to look at the well the

00:25:31,909 --> 00:25:39,470
HTTP two example hopefully they all load

00:25:36,970 --> 00:25:41,809
relatively much faster once they get

00:25:39,470 --> 00:25:46,240
there I'm sorry I really messed up the

00:25:41,809 --> 00:25:50,090
time I thought I had I'm much longer

00:25:46,240 --> 00:25:51,679
amount of time do you guys want to see

00:25:50,090 --> 00:26:01,000
the waterfall or should I just wrap it

00:25:51,679 --> 00:26:01,000
up okay okay

00:26:03,720 --> 00:26:10,980
yeah yeah my sites are available thank

00:26:08,309 --> 00:26:13,200
you hey thanks for the end my slides are

00:26:10,980 --> 00:26:15,419
available on the website I'll put all

00:26:13,200 --> 00:26:17,669
these up and also there's a github repo

00:26:15,419 --> 00:26:19,620
that shows a proc to you that you can

00:26:17,669 --> 00:26:21,330
put in front of any JC the API server

00:26:19,620 --> 00:26:24,029
and it'll start doing this pushes for

00:26:21,330 --> 00:26:26,190
you I wrote an HTTP client to do this

00:26:24,029 --> 00:26:27,870
kind of stuff and all the code for the

00:26:26,190 --> 00:26:30,180
demo is up on github as well and I'll

00:26:27,870 --> 00:26:36,559
link all that thanks guys I'm sorry

00:26:30,180 --> 00:26:36,559

YouTube URL: https://www.youtube.com/watch?v=78BYVc7OJlE


