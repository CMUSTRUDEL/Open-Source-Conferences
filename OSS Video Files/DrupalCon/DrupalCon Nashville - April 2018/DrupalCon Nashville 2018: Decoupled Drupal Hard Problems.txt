Title: DrupalCon Nashville 2018: Decoupled Drupal Hard Problems
Publication date: 2018-04-11
Playlist: DrupalCon Nashville - April 2018
Description: 
	This session is about the hard problems discovered as part of the API-First initiative and professional experience with decoupled projects.

In this session we'll learn about the challenges with:

Performance where multiple requests are "unavoidable". You will learn how to improve your back-end performance to have a more responsive application with a better user experience.
Image styles in decoupled Drupal projects. You need to deal with image styles in order to improve your front-end performance.
Automatic schemas for the exposed resources. We'll see why schemas are important, and what are the challenges to accurately generate them.
Comprehensive routing with SEO friendly paths. Decoupled routing requires some additional thought if you want to retain the SEO wins you are accustumed with Drupal.
Controlling the layout from the editorial back-end.
How to re-couple the documentation for decoupled Drupal. So we all build a common language around decoupled Drupal.
How to authenticate your requests with the appropriate OAuth2 flavor. Depending on your consumer you'll need a type of authentication or another. JS app vs. cron deamon in some remote machine vs. native app vs. â€¦
After coming out of this session you'll have a better understanding of the (often) hidden challenges of a real decoupled Drupal project. In turn that will improve your estimations in decoupled projects. Moreover you will be able to plan your project better once you know the hard problems. In summary, this session will enhance your ability to deliver successful decoupled projects.
Captions: 
	00:00:01,220 --> 00:00:09,780
awesome I think it's time so before we

00:00:06,600 --> 00:00:12,179
get started I wanted to know if any of

00:00:09,780 --> 00:00:17,910
you got to attend the decouples summit

00:00:12,179 --> 00:00:20,970
yesterday okay I see some hands well we

00:00:17,910 --> 00:00:23,789
had a panel discussion on these topics I

00:00:20,970 --> 00:00:25,949
gotta touch in some different things I'm

00:00:23,789 --> 00:00:28,439
gonna go a little bit in more depth in

00:00:25,949 --> 00:00:31,080
some topics some others I will not

00:00:28,439 --> 00:00:34,410
because that panel was an hour and 45

00:00:31,080 --> 00:00:35,989
minutes and we're not gonna go that long

00:00:34,410 --> 00:00:41,010
again

00:00:35,989 --> 00:00:44,090
so hello welcome this is your first

00:00:41,010 --> 00:00:46,710
Drupal comm presentation I love this lot

00:00:44,090 --> 00:00:50,039
there's a lot of energy after the two is

00:00:46,710 --> 00:00:54,020
not always so I will write them that way

00:00:50,039 --> 00:00:54,020
and hopefully I will keep that going so

00:00:55,309 --> 00:01:03,629
I'm I'm Mateo I've been doing the couple

00:01:00,329 --> 00:01:07,320
projects for a while now I think that I

00:01:03,629 --> 00:01:10,560
started in 2013 and I've been doing

00:01:07,320 --> 00:01:13,049
those I like them and I'm lucky enough

00:01:10,560 --> 00:01:18,509
that I was able to get on those projects

00:01:13,049 --> 00:01:20,790
and thanks to to LA about as well I've

00:01:18,509 --> 00:01:23,970
been able to contribute a lot of code in

00:01:20,790 --> 00:01:26,909
the in the community to help like build

00:01:23,970 --> 00:01:28,829
projects like JSON API or the solutions

00:01:26,909 --> 00:01:31,259
that we're going to talk today they are

00:01:28,829 --> 00:01:33,780
all backed by Drupal modules that I was

00:01:31,259 --> 00:01:36,210
able to to write because of two things

00:01:33,780 --> 00:01:40,140
because all about sponsors my time

00:01:36,210 --> 00:01:42,509
partly and because we are a distributed

00:01:40,140 --> 00:01:46,350
company and I don't have to wait in a

00:01:42,509 --> 00:01:48,360
bus to get to work right so I can do

00:01:46,350 --> 00:01:50,790
this stuff and I guess that the

00:01:48,360 --> 00:01:53,670
community benefits from that so if you

00:01:50,790 --> 00:01:55,530
want to appreciate that maybe consider

00:01:53,670 --> 00:01:57,390
dropping by the books and talking to us

00:01:55,530 --> 00:01:59,329
about your next project that would be

00:01:57,390 --> 00:02:03,600
awesome

00:01:59,329 --> 00:02:06,600
apart from that I'm an API first

00:02:03,600 --> 00:02:08,759
initiative coordinator along with wim

00:02:06,600 --> 00:02:13,230
Lear's you may have heard about

00:02:08,759 --> 00:02:16,770
initiative in the keynote or read in

00:02:13,230 --> 00:02:19,230
to posit org we're trying to make all

00:02:16,770 --> 00:02:22,860
these cool things that we saw earlier

00:02:19,230 --> 00:02:25,560
happen so yeah please come and

00:02:22,860 --> 00:02:28,410
contribute part from that last Rubicon

00:02:25,560 --> 00:02:31,320
we talked about getting a new Drupal

00:02:28,410 --> 00:02:35,550
distribution with decoupled in mind and

00:02:31,320 --> 00:02:37,590
so I built Contenta with along with

00:02:35,550 --> 00:02:40,040
Daniel Wagner and some other

00:02:37,590 --> 00:02:43,890
contributors put to the project so

00:02:40,040 --> 00:02:45,989
alright that out of the way the actual

00:02:43,890 --> 00:02:50,640
content of the of the presentation so

00:02:45,989 --> 00:02:53,760
we're going to talk about five or five

00:02:50,640 --> 00:02:56,760
different heart problems here there are

00:02:53,760 --> 00:02:58,890
more yesterday's panel was a big proof

00:02:56,760 --> 00:03:02,790
of that and we're gonna just mention

00:02:58,890 --> 00:03:04,050
some of those at the end but these are

00:03:02,790 --> 00:03:06,090
the ones that I wanted to talk about

00:03:04,050 --> 00:03:09,150
because these are the ones that have

00:03:06,090 --> 00:03:12,120
been taking my time in this last year

00:03:09,150 --> 00:03:14,370
and I've been writing some Drupal

00:03:12,120 --> 00:03:15,989
modules to ease the problems of those so

00:03:14,370 --> 00:03:18,750
we're going to be talking about

00:03:15,989 --> 00:03:21,209
performance about schemas why they are

00:03:18,750 --> 00:03:24,930
important and how they are massively

00:03:21,209 --> 00:03:27,810
difficult to generate routing and then

00:03:24,930 --> 00:03:31,590
editorial layouts and authentication by

00:03:27,810 --> 00:03:35,160
the end so again as usual there is a

00:03:31,590 --> 00:03:39,780
troop module for that so yeah hopefully

00:03:35,160 --> 00:03:42,840
we can keep that going and the first

00:03:39,780 --> 00:03:46,440
heart problem is performance right when

00:03:42,840 --> 00:03:49,500
you start at the copper project you may

00:03:46,440 --> 00:03:54,000
not see that right away and that is

00:03:49,500 --> 00:03:58,320
because at least in HTTP 1 or 1.1

00:03:54,000 --> 00:04:03,450
projects you have the need of sequential

00:03:58,320 --> 00:04:05,360
requests right JSON API greatly improves

00:04:03,450 --> 00:04:08,400
in that in the sense that you can

00:04:05,360 --> 00:04:10,799
include entities in the response so you

00:04:08,400 --> 00:04:13,440
can save yourself that work but

00:04:10,799 --> 00:04:16,799
sometimes it's unavoidable and sometimes

00:04:13,440 --> 00:04:19,680
it's not just getting set of entities

00:04:16,799 --> 00:04:23,160
and doing some includes sometimes it's

00:04:19,680 --> 00:04:26,220
more like do you want to create an

00:04:23,160 --> 00:04:26,600
article right and imagine that you have

00:04:26,220 --> 00:04:28,940
a

00:04:26,600 --> 00:04:32,770
react application with the form and that

00:04:28,940 --> 00:04:34,940
form is submitting some some data and

00:04:32,770 --> 00:04:38,270
ultimately what you want to create is an

00:04:34,940 --> 00:04:42,080
article with a bunch of tags and and

00:04:38,270 --> 00:04:43,700
that's it to do that you create the JSON

00:04:42,080 --> 00:04:46,580
object that you need to push to the

00:04:43,700 --> 00:04:49,460
server and you realize oh but I need the

00:04:46,580 --> 00:04:51,740
tank ideas for this for this article

00:04:49,460 --> 00:04:54,470
right if I want to add some tags to it

00:04:51,740 --> 00:04:57,080
so I need to create the tags first you

00:04:54,470 --> 00:05:00,620
know to get the ideas and also I need to

00:04:57,080 --> 00:05:03,560
get the user ID based on the user name

00:05:00,620 --> 00:05:07,550
so I can put it in the JSON body first

00:05:03,560 --> 00:05:11,750
and that becomes a set of sequential

00:05:07,550 --> 00:05:14,150
requests so you can get first the user

00:05:11,750 --> 00:05:16,940
IP and the vocabulary ID when you have

00:05:14,150 --> 00:05:19,550
the vocabulary ID you can create the two

00:05:16,940 --> 00:05:21,410
tags when you have the two tags you can

00:05:19,550 --> 00:05:23,600
fetch the IDS from there and you can

00:05:21,410 --> 00:05:24,620
actually create the article so this is

00:05:23,600 --> 00:05:27,770
very painful

00:05:24,620 --> 00:05:29,690
it's like you can do the first two in

00:05:27,770 --> 00:05:32,390
parallel then there's the second two in

00:05:29,690 --> 00:05:36,260
parallel and then the third sorry the

00:05:32,390 --> 00:05:39,560
fifth but that's assuming and this is

00:05:36,260 --> 00:05:41,690
like one of the key concepts that I want

00:05:39,560 --> 00:05:45,610
you to walk out the room with that's

00:05:41,690 --> 00:05:47,840
assuming that you are thinking about a

00:05:45,610 --> 00:05:50,660
particular consumer that can do things

00:05:47,840 --> 00:05:52,970
in parallel so in decoupled in the

00:05:50,660 --> 00:05:56,090
couple and sometimes you don't get that

00:05:52,970 --> 00:05:57,650
luxury there are technologies that don't

00:05:56,090 --> 00:05:59,750
have an event loop like the browser does

00:05:57,650 --> 00:06:02,720
there are like for instance if you had a

00:05:59,750 --> 00:06:04,280
consumer that's Symphony application you

00:06:02,720 --> 00:06:08,660
cannot do things in parallel

00:06:04,280 --> 00:06:11,210
so that's your assumption is that you

00:06:08,660 --> 00:06:14,930
have to get into the lowest common

00:06:11,210 --> 00:06:16,880
denominator and also think about all of

00:06:14,930 --> 00:06:19,520
the requests that you need to coordinate

00:06:16,880 --> 00:06:23,870
you need to don't try to read the code

00:06:19,520 --> 00:06:26,810
this is just for kind of an example the

00:06:23,870 --> 00:06:29,420
this highlights though the complexity of

00:06:26,810 --> 00:06:33,020
doing this very simple task of posting

00:06:29,420 --> 00:06:36,110
an article you need to coordinate 3

00:06:33,020 --> 00:06:38,660
levels of requests each one of those has

00:06:36,110 --> 00:06:39,650
a bunch of parallel requests and you

00:06:38,660 --> 00:06:41,449
need to

00:06:39,650 --> 00:06:43,370
and hold all that process and you didn't

00:06:41,449 --> 00:06:45,380
need to do it across multiple consumers

00:06:43,370 --> 00:06:49,370
at the same time and as we talked about

00:06:45,380 --> 00:06:52,729
late before each consumer can have its

00:06:49,370 --> 00:06:55,610
own ideas on how to make requests and if

00:06:52,729 --> 00:06:57,550
they can be parallelized or not right so

00:06:55,610 --> 00:06:58,759
this code needs to be repeated and

00:06:57,550 --> 00:07:01,880
variated

00:06:58,759 --> 00:07:04,130
in each consumer instead what we want is

00:07:01,880 --> 00:07:06,199
to do something like this right so that

00:07:04,130 --> 00:07:09,009
it's very simple it's a simple request

00:07:06,199 --> 00:07:12,500
that deals with all of that because

00:07:09,009 --> 00:07:15,050
ultimately what we are doing is we're

00:07:12,500 --> 00:07:18,080
going back and forth with the server and

00:07:15,050 --> 00:07:19,940
the client just to fill in an ID and

00:07:18,080 --> 00:07:23,419
that's a very simple task that a machine

00:07:19,940 --> 00:07:26,990
should be able to do so that's why I got

00:07:23,419 --> 00:07:29,660
the idea to build the sub request module

00:07:26,990 --> 00:07:34,820
to make the server to it so the idea is

00:07:29,660 --> 00:07:36,949
that you create a JSON document which is

00:07:34,820 --> 00:07:38,750
called a blueprint that contains a

00:07:36,949 --> 00:07:41,900
description on how to make all those

00:07:38,750 --> 00:07:44,120
requests basically it's just the request

00:07:41,900 --> 00:07:46,520
that you would do - the ideas because

00:07:44,120 --> 00:07:49,639
you don't know them right so you put all

00:07:46,520 --> 00:07:52,160
those into a JSON document and wherever

00:07:49,639 --> 00:07:54,669
you have the ID that you're missing you

00:07:52,160 --> 00:07:58,490
put a placeholder the placeholder says

00:07:54,669 --> 00:08:02,060
grab the ID from this previous response

00:07:58,490 --> 00:08:03,860
right so you're telling the you telling

00:08:02,060 --> 00:08:06,229
the server do all these requests and

00:08:03,860 --> 00:08:09,560
then grab information from those and

00:08:06,229 --> 00:08:12,729
fill them for me no don't come back to

00:08:09,560 --> 00:08:16,849
me - just put an ID in a JSON document

00:08:12,729 --> 00:08:20,599
so it's a very simple idea and it goes

00:08:16,849 --> 00:08:22,490
like this and again don't try - don't

00:08:20,599 --> 00:08:27,229
try to really do probably won't be able

00:08:22,490 --> 00:08:29,900
to but oh that's sad it's color coded

00:08:27,229 --> 00:08:32,930
but it's not showing very well well the

00:08:29,900 --> 00:08:36,440
first two sections hopefully you can see

00:08:32,930 --> 00:08:38,870
that there are five sections in there so

00:08:36,440 --> 00:08:42,020
those are the five requests that we're

00:08:38,870 --> 00:08:43,820
making and the first two are the ones

00:08:42,020 --> 00:08:46,010
that you start off they don't have any

00:08:43,820 --> 00:08:49,040
dependency on other requests you start

00:08:46,010 --> 00:08:52,310
making them right away so the second two

00:08:49,040 --> 00:08:53,180
are gonna they have a key at the end

00:08:52,310 --> 00:08:55,910
let's say

00:08:53,180 --> 00:08:58,850
for and then they waiting for the

00:08:55,910 --> 00:09:02,690
vocabulary request so what that is

00:08:58,850 --> 00:09:04,850
expressing is that I have in my request

00:09:02,690 --> 00:09:08,930
I have a placeholder that depends on the

00:09:04,850 --> 00:09:12,010
response to one previous request so it's

00:09:08,930 --> 00:09:15,320
gonna wait for those replace that and

00:09:12,010 --> 00:09:18,589
and it's gonna happen all in the server

00:09:15,320 --> 00:09:20,870
so you can specify with using this

00:09:18,589 --> 00:09:23,839
format you can specify the request as

00:09:20,870 --> 00:09:27,560
you would do them in the in the consumer

00:09:23,839 --> 00:09:32,300
you can specify in a way that you can

00:09:27,560 --> 00:09:35,000
have placeholders to create your request

00:09:32,300 --> 00:09:38,540
for you so ultimately what we are aiming

00:09:35,000 --> 00:09:42,230
for is to make a single request to the

00:09:38,540 --> 00:09:44,300
server so there's only one there is only

00:09:42,230 --> 00:09:46,550
one back-and-forth between the server

00:09:44,300 --> 00:09:49,130
and the consumer to make all these

00:09:46,550 --> 00:09:52,190
requests that Drupal can do internally

00:09:49,130 --> 00:09:55,820
in the server so that improves

00:09:52,190 --> 00:09:58,700
performance greatly and also has the the

00:09:55,820 --> 00:10:01,430
added benefit that since it's a single

00:09:58,700 --> 00:10:04,100
request it is going to be the same code

00:10:01,430 --> 00:10:07,430
or the same principle across all of the

00:10:04,100 --> 00:10:10,850
consumers because it becomes the problem

00:10:07,430 --> 00:10:13,400
becomes generating these and this

00:10:10,850 --> 00:10:14,510
blueprint and having the placeholders

00:10:13,400 --> 00:10:16,550
and that's gonna be the same thing

00:10:14,510 --> 00:10:19,220
across the board because it's gonna be

00:10:16,550 --> 00:10:22,190
interpreted in the server so that works

00:10:19,220 --> 00:10:24,770
really well when especially when these

00:10:22,190 --> 00:10:28,160
internal requests take advantage of

00:10:24,770 --> 00:10:31,700
things like page cache it's really fast

00:10:28,160 --> 00:10:34,850
like we are resolving requests in under

00:10:31,700 --> 00:10:40,459
three milliseconds and three

00:10:34,850 --> 00:10:42,920
milliseconds is pretty fast so that's it

00:10:40,459 --> 00:10:46,459
for the first one that's let's

00:10:42,920 --> 00:10:50,120
performance and sub requests will help a

00:10:46,459 --> 00:10:52,700
lot and also want to mention oh great

00:10:50,120 --> 00:10:54,709
they are showing here the notifications

00:10:52,700 --> 00:10:59,200
hopefully no one will

00:10:54,709 --> 00:10:59,200
I definitely turned those off

00:11:00,680 --> 00:11:08,600
do not disturb is now on okay

00:11:03,740 --> 00:11:08,600
all right oh sorry about that

00:11:09,740 --> 00:11:16,529
schemas we were talking about schemas um

00:11:13,790 --> 00:11:18,329
no absolutely mentioning that the sub

00:11:16,529 --> 00:11:22,279
requests module that is implemented in

00:11:18,329 --> 00:11:25,559
Drupal I also implemented in node GS so

00:11:22,279 --> 00:11:28,259
the thing is that you can now have it in

00:11:25,559 --> 00:11:31,290
Drupal or in nodejs

00:11:28,259 --> 00:11:35,430
if you have a proxy nodejs application

00:11:31,290 --> 00:11:39,540
which you probably will end up with you

00:11:35,430 --> 00:11:42,509
can use it there too and and yeah just

00:11:39,540 --> 00:11:45,300
try it out and leverage it and hopefully

00:11:42,509 --> 00:11:48,839
it will help your their performance and

00:11:45,300 --> 00:11:53,910
maintain maintainability so let's talk

00:11:48,839 --> 00:11:56,970
about schemas right I didn't write the

00:11:53,910 --> 00:11:59,790
schemata module I only helped writing

00:11:56,970 --> 00:12:04,949
the json api integration of the s

00:11:59,790 --> 00:12:07,230
command module but why do we want

00:12:04,949 --> 00:12:11,220
schemas and what are they good for

00:12:07,230 --> 00:12:14,279
so schemas are basically a description

00:12:11,220 --> 00:12:17,610
of the shape of a JSON document so

00:12:14,279 --> 00:12:19,980
imagine that back-end developer and a

00:12:17,610 --> 00:12:23,730
front-end developer go into a bar and

00:12:19,980 --> 00:12:26,730
this is not a joke so imagine that they

00:12:23,730 --> 00:12:29,750
go and go for a coffee right

00:12:26,730 --> 00:12:33,180
and the back-end developer is trying to

00:12:29,750 --> 00:12:34,920
explain the front-end developer oh and

00:12:33,180 --> 00:12:37,500
working in this API and you're gonna get

00:12:34,920 --> 00:12:40,139
JSON documents so the JSON document is

00:12:37,500 --> 00:12:42,470
going to look like it it has a data

00:12:40,139 --> 00:12:45,240
property and inside of that it has a

00:12:42,470 --> 00:12:47,699
attributes key and a relationships key

00:12:45,240 --> 00:12:49,649
and if it's an article in the attributes

00:12:47,699 --> 00:12:53,189
key you're gonna have a title that's

00:12:49,649 --> 00:12:56,040
going to be a string that's gonna be 255

00:12:53,189 --> 00:12:59,519
characters long max and you're gonna

00:12:56,040 --> 00:13:02,069
have a body key that has a value and

00:12:59,519 --> 00:13:04,920
then the long text in there so that

00:13:02,069 --> 00:13:07,910
description that is that description is

00:13:04,920 --> 00:13:11,880
what schema is right we are describing

00:13:07,910 --> 00:13:15,390
the shape of the document using

00:13:11,880 --> 00:13:16,830
machine a machine format or a format

00:13:15,390 --> 00:13:18,990
that a machine can understand

00:13:16,830 --> 00:13:22,260
that's called decent schema and very

00:13:18,990 --> 00:13:25,920
importantly this is a standard and by a

00:13:22,260 --> 00:13:27,810
standard I mean that other platforms and

00:13:25,920 --> 00:13:30,720
other software understand this format

00:13:27,810 --> 00:13:35,160
and can do cool things about it so by

00:13:30,720 --> 00:13:38,640
using schemata and json api integration

00:13:35,160 --> 00:13:40,860
with that what we are empowering is

00:13:38,640 --> 00:13:45,120
creating documentation because what i

00:13:40,860 --> 00:13:47,100
just the analogy that i just made is is

00:13:45,120 --> 00:13:49,830
a back-end developer documenting

00:13:47,100 --> 00:13:53,220
verbally the shape of the api and how to

00:13:49,830 --> 00:13:55,950
use the api but by having a software do

00:13:53,220 --> 00:13:59,100
this we can just generate beautiful web

00:13:55,950 --> 00:14:01,200
apps that document your api for free and

00:13:59,100 --> 00:14:04,560
let's stop a second to realize that so

00:14:01,200 --> 00:14:08,610
you download Drupal you download JSON

00:14:04,560 --> 00:14:11,430
API s Kumada and the open API module and

00:14:08,610 --> 00:14:14,190
you get for free for your content model

00:14:11,430 --> 00:14:16,830
and a fully fledged API that you can do

00:14:14,190 --> 00:14:19,140
a lot of stuff and it's totally

00:14:16,830 --> 00:14:21,510
documented and not only that you create

00:14:19,140 --> 00:14:23,820
a new field and that gets documented as

00:14:21,510 --> 00:14:26,610
well like magically well no it's not

00:14:23,820 --> 00:14:28,500
magically it's actually shop software

00:14:26,610 --> 00:14:30,120
but it gets documented and it's

00:14:28,500 --> 00:14:33,570
up-to-date doesn't get stale you don't

00:14:30,120 --> 00:14:37,170
have to do anything to do it and it's

00:14:33,570 --> 00:14:38,640
accurate right so that's one of the

00:14:37,170 --> 00:14:40,380
that's one of the benefits of having

00:14:38,640 --> 00:14:42,660
schemas but that's not the only one

00:14:40,380 --> 00:14:46,770
because by describing the shape in a

00:14:42,660 --> 00:14:48,930
standard and and in a way that the

00:14:46,770 --> 00:14:52,350
software can understand it we can do

00:14:48,930 --> 00:14:56,790
things like generating forms imagine

00:14:52,350 --> 00:14:59,370
that you have your ember app or your iOS

00:14:56,790 --> 00:15:01,860
app right you want to create a form for

00:14:59,370 --> 00:15:06,060
that article that I was making the

00:15:01,860 --> 00:15:09,540
analogy for so the iOS app can download

00:15:06,060 --> 00:15:12,690
the schema you can see the okay this is

00:15:09,540 --> 00:15:15,870
a title so I'm gonna put the label title

00:15:12,690 --> 00:15:19,650
this is a string so I'm gonna generate a

00:15:15,870 --> 00:15:23,139
text field and this is max 255 so I'm

00:15:19,650 --> 00:15:25,420
gonna make it just not text area but

00:15:23,139 --> 00:15:29,319
textfield right and the same goes for

00:15:25,420 --> 00:15:30,970
body etc so you can end up with a

00:15:29,319 --> 00:15:33,670
software that reads a schema and

00:15:30,970 --> 00:15:36,179
generates a form for it automatically

00:15:33,670 --> 00:15:41,199
without no one having to type the HTML

00:15:36,179 --> 00:15:43,869
to do a for and you may think that's

00:15:41,199 --> 00:15:46,329
pretty cool because I'm I'm a software

00:15:43,869 --> 00:15:48,369
developer and I'm basically lazy in when

00:15:46,329 --> 00:15:54,879
it goes to write code I want to reuse

00:15:48,369 --> 00:15:57,129
and keep dry etc so that is very

00:15:54,879 --> 00:15:59,319
appealing to me but then you realize

00:15:57,129 --> 00:16:00,970
that there is another factor that is

00:15:59,319 --> 00:16:05,439
more important than that and that is

00:16:00,970 --> 00:16:08,949
that when you create a form if you if

00:16:05,439 --> 00:16:10,809
you don't use techniques like this what

00:16:08,949 --> 00:16:13,779
you end up with is that you have like

00:16:10,809 --> 00:16:18,009
maybe for consumers to your API all of

00:16:13,779 --> 00:16:19,839
those have forms and then you create a

00:16:18,009 --> 00:16:23,290
field a new field in your content type

00:16:19,839 --> 00:16:25,179
right so now you need to deploy your API

00:16:23,290 --> 00:16:27,850
and update all the forms you know log

00:16:25,179 --> 00:16:31,569
the consumers and have a joint

00:16:27,850 --> 00:16:34,089
deployment so the API and the forms are

00:16:31,569 --> 00:16:35,829
all in line right if you do it with the

00:16:34,089 --> 00:16:38,499
schemas the app just downloaded the

00:16:35,829 --> 00:16:41,470
schema and pops up the new fields in

00:16:38,499 --> 00:16:43,209
there right and that is very powerful

00:16:41,470 --> 00:16:45,910
because it allows you to decouple

00:16:43,209 --> 00:16:49,449
yourself from release pro form the

00:16:45,910 --> 00:16:53,290
release workflow right you don't have to

00:16:49,449 --> 00:16:55,689
be like in sync for your deployments all

00:16:53,290 --> 00:16:57,610
the things that are good when when you

00:16:55,689 --> 00:17:00,119
get schemas is like the client-side

00:16:57,610 --> 00:17:03,879
validation we got into the like

00:17:00,119 --> 00:17:05,949
validation of 255 characters you can do

00:17:03,879 --> 00:17:09,819
that into in the client side we have

00:17:05,949 --> 00:17:12,159
going to go to the server to do that

00:17:09,819 --> 00:17:15,789
validation right and throw that error so

00:17:12,159 --> 00:17:19,600
that's better experience for for the

00:17:15,789 --> 00:17:21,909
onion team and then just the global

00:17:19,600 --> 00:17:27,399
concept of enhancing the user experience

00:17:21,909 --> 00:17:30,639
with this so this is a screenshot of of

00:17:27,399 --> 00:17:32,769
Contenta out-of-the-box you get these

00:17:30,639 --> 00:17:34,659
automatic generation of climbers and

00:17:32,769 --> 00:17:35,600
that translates in automatic

00:17:34,659 --> 00:17:40,880
documentation

00:17:35,600 --> 00:17:41,630
the open API module and it's very it's

00:17:40,880 --> 00:17:43,309
very easy to use

00:17:41,630 --> 00:17:47,809
like it's actually just going to that

00:17:43,309 --> 00:17:53,000
page and start using the problem here is

00:17:47,809 --> 00:17:55,900
that the shape of the API is pretty hard

00:17:53,000 --> 00:17:59,780
to guess right we are talking about

00:17:55,900 --> 00:18:01,610
auto-generating these schemas and what

00:17:59,780 --> 00:18:05,410
we're really talking about is doing the

00:18:01,610 --> 00:18:09,740
best we can to guess the schema right

00:18:05,410 --> 00:18:12,559
and I'm gonna say I'm gonna say Y right

00:18:09,740 --> 00:18:13,039
because the first I need to drink a

00:18:12,559 --> 00:18:27,620
little bit

00:18:13,039 --> 00:18:29,539
it's a cliffhanger alright so the the

00:18:27,620 --> 00:18:34,370
main problem here is that we are using

00:18:29,539 --> 00:18:37,480
Symphony and the symphony serialization

00:18:34,370 --> 00:18:40,429
component and what that allows is for

00:18:37,480 --> 00:18:41,120
arbitrary code execution which is good

00:18:40,429 --> 00:18:45,039
right

00:18:41,120 --> 00:18:48,440
it's what we want it because when you're

00:18:45,039 --> 00:18:52,850
normalizing the tuple entities what you

00:18:48,440 --> 00:18:55,820
want to go from is like the node object

00:18:52,850 --> 00:18:59,929
that you get when you do not load 42

00:18:55,820 --> 00:19:02,059
right it's a it's a PHP typed object

00:18:59,929 --> 00:19:04,460
that you have you can execute methods

00:19:02,059 --> 00:19:06,770
aren't and that it can actually save

00:19:04,460 --> 00:19:09,650
data to the database and it can load

00:19:06,770 --> 00:19:12,620
from the database so it's a pH in the

00:19:09,650 --> 00:19:14,870
PHP world it lives in the PHP world but

00:19:12,620 --> 00:19:18,530
we need to go from that the data that

00:19:14,870 --> 00:19:21,140
represents a node to JSON object that

00:19:18,530 --> 00:19:25,309
can be streamed over the wire to a

00:19:21,140 --> 00:19:28,309
client right so it the data the node 42

00:19:25,309 --> 00:19:31,700
lives in like two parallel dimensions

00:19:28,309 --> 00:19:35,000
one that is PHP only and one that is in

00:19:31,700 --> 00:19:37,640
serialized or text only write in JSON

00:19:35,000 --> 00:19:40,640
format so the the normalization

00:19:37,640 --> 00:19:45,620
component allows us to go from one to

00:19:40,640 --> 00:19:48,260
the other and the problem is that it is

00:19:45,620 --> 00:19:49,070
too flexible so you can have something

00:19:48,260 --> 00:19:52,639
like this

00:19:49,070 --> 00:19:55,279
a normalization function that says all

00:19:52,639 --> 00:19:57,980
right so I'm loading a node and I'm

00:19:55,279 --> 00:20:00,529
gonna roll a die and it fits a 5 I'm

00:19:57,980 --> 00:20:04,130
gonna output a string and if it's not

00:20:00,529 --> 00:20:08,059
I'm gonna output an integer but your

00:20:04,130 --> 00:20:10,519
schema was saying all along that it was

00:20:08,059 --> 00:20:12,799
going to be an integer but since you can

00:20:10,519 --> 00:20:16,909
overwrite the normalizer that json api

00:20:12,799 --> 00:20:19,399
produces and rest core produces you

00:20:16,909 --> 00:20:22,149
could do something like this right and

00:20:19,399 --> 00:20:25,399
there is no way that we can guess

00:20:22,149 --> 00:20:27,259
beforehand like when like two months ago

00:20:25,399 --> 00:20:29,840
when you deliver the documentation to

00:20:27,259 --> 00:20:33,169
the developer what the result of rolling

00:20:29,840 --> 00:20:36,230
a die would be right and it has to be

00:20:33,169 --> 00:20:38,389
either a string or an integer and there

00:20:36,230 --> 00:20:41,899
is nothing in our code base that

00:20:38,389 --> 00:20:43,899
prevents this and this can become a

00:20:41,899 --> 00:20:48,610
problem

00:20:43,899 --> 00:20:51,259
also when we talked about documentation

00:20:48,610 --> 00:20:52,730
we didn't touch on this but the shape is

00:20:51,259 --> 00:20:55,639
not enough to provide meaningful

00:20:52,730 --> 00:20:58,639
documentation things like is this

00:20:55,639 --> 00:21:02,200
content type public through the API or

00:20:58,639 --> 00:21:04,669
can I delete this or is this field

00:21:02,200 --> 00:21:06,889
allowed to modify because there are

00:21:04,669 --> 00:21:10,039
fields that are generated by Drupal and

00:21:06,889 --> 00:21:13,039
you cannot modify them you can't read

00:21:10,039 --> 00:21:15,649
them but you cannot create them right so

00:21:13,039 --> 00:21:19,850
things like these are not available

00:21:15,649 --> 00:21:21,769
directly for for our API and we want to

00:21:19,850 --> 00:21:25,490
document that because that's critical

00:21:21,769 --> 00:21:28,039
for documentation knowing what what you

00:21:25,490 --> 00:21:31,639
can do and how you have to do it it's

00:21:28,039 --> 00:21:36,200
not only about the shape so we have some

00:21:31,639 --> 00:21:39,919
ideas in the API initiative so the first

00:21:36,200 --> 00:21:44,809
problem is about ensuring that the

00:21:39,919 --> 00:21:48,669
schema is accurate and for that I wrote

00:21:44,809 --> 00:21:51,860
a PHP library that ensures

00:21:48,669 --> 00:21:54,679
transformations in a type safe way so

00:21:51,860 --> 00:21:57,230
we're going to try to build a prototype

00:21:54,679 --> 00:21:59,990
that includes that into JSON API

00:21:57,230 --> 00:22:01,970
normalizes and we're gonna require

00:21:59,990 --> 00:22:05,210
everyone writing a normalizer

00:22:01,970 --> 00:22:07,790
to be typesafe and declare okay this is

00:22:05,210 --> 00:22:10,790
the shape that this is gonna output and

00:22:07,790 --> 00:22:13,340
that that contract is what we're gonna

00:22:10,790 --> 00:22:16,580
use to generate the schemas so we're

00:22:13,340 --> 00:22:19,510
gonna be sure that the output of our

00:22:16,580 --> 00:22:23,150
normalize errs are what the schemas say

00:22:19,510 --> 00:22:27,040
the other problem is a little bit more

00:22:23,150 --> 00:22:31,130
complex because we kind of require a

00:22:27,040 --> 00:22:33,440
little bit of coordination with core

00:22:31,130 --> 00:22:36,860
teams to provide more meta data on what

00:22:33,440 --> 00:22:39,710
the API can do and we immediately we

00:22:36,860 --> 00:22:42,950
already have a bunch of this through the

00:22:39,710 --> 00:22:45,590
access system and the entity and field

00:22:42,950 --> 00:22:48,890
api's it contains some of that

00:22:45,590 --> 00:22:51,170
information but sometimes we don't want

00:22:48,890 --> 00:22:54,470
to conflate the two things what Drupal

00:22:51,170 --> 00:22:56,690
can do internally as a system and when

00:22:54,470 --> 00:22:59,930
what you want to expose to the world

00:22:56,690 --> 00:23:03,260
right so we need some sort of a rapper

00:22:59,930 --> 00:23:05,830
on entity API and fill API to declare

00:23:03,260 --> 00:23:09,050
this in a in a way that it can be reused

00:23:05,830 --> 00:23:11,660
for the rest core we can it can be

00:23:09,050 --> 00:23:13,880
reduced to some API and maybe even graph

00:23:11,660 --> 00:23:17,390
QL so ultimately what if these two in

00:23:13,880 --> 00:23:20,570
sleights is that we get into the mindset

00:23:17,390 --> 00:23:23,210
that we are really API first and not

00:23:20,570 --> 00:23:29,630
just API compatible which is kind of the

00:23:23,210 --> 00:23:35,420
situation that we are currently alright

00:23:29,630 --> 00:23:39,680
so routing our routing like my British

00:23:35,420 --> 00:23:43,970
friends like the same is is the next in

00:23:39,680 --> 00:23:47,300
in the list so I've been saying that you

00:23:43,970 --> 00:23:51,560
need to stop thinking about your react

00:23:47,300 --> 00:23:54,290
side as decouple Drupal because that is

00:23:51,560 --> 00:23:57,730
not only what decoupled Rupali is about

00:23:54,290 --> 00:24:00,200
right it's mostly about omni-channel

00:23:57,730 --> 00:24:02,480
situation or multi-channel situations

00:24:00,200 --> 00:24:05,380
where you have you have an API that

00:24:02,480 --> 00:24:09,830
drives different digital experiences and

00:24:05,380 --> 00:24:11,620
that is in many situations what it

00:24:09,830 --> 00:24:14,830
drives the decision to move

00:24:11,620 --> 00:24:16,930
decouple Drupal and probably why many of

00:24:14,830 --> 00:24:18,670
you are here right because you're

00:24:16,930 --> 00:24:21,970
building I know

00:24:18,670 --> 00:24:25,480
experiences that drive a react website

00:24:21,970 --> 00:24:30,820
but also an iOS app and an Android app

00:24:25,480 --> 00:24:33,730
and Apple TV Roku SmartWatch even there

00:24:30,820 --> 00:24:38,050
are smart opens and you can install apps

00:24:33,730 --> 00:24:40,240
on that so you need to be mindful of

00:24:38,050 --> 00:24:42,370
this and that every decision that you

00:24:40,240 --> 00:24:47,400
make in the backend affects the front

00:24:42,370 --> 00:24:51,130
end however there are some outstanding

00:24:47,400 --> 00:24:54,480
challenges to the to the browser and the

00:24:51,130 --> 00:24:57,550
browser is is pretty important I mean

00:24:54,480 --> 00:24:59,770
we've been building websites and now we

00:24:57,550 --> 00:25:02,020
are building websites and all the things

00:24:59,770 --> 00:25:05,980
right but we still building websites and

00:25:02,020 --> 00:25:09,340
the browser has has a thing and that is

00:25:05,980 --> 00:25:12,400
that it's driven by URLs we run our web

00:25:09,340 --> 00:25:17,170
apps inside of browsers we could say

00:25:12,400 --> 00:25:20,530
that it's our OS for for web apps and we

00:25:17,170 --> 00:25:22,870
need to be able to use the URL in an

00:25:20,530 --> 00:25:25,870
effective manner and for that Drupal has

00:25:22,870 --> 00:25:29,500
been like very opinionated that content

00:25:25,870 --> 00:25:31,840
editors should be able to specify the

00:25:29,500 --> 00:25:36,809
URL for the content and for every web

00:25:31,840 --> 00:25:40,480
page and that is fair because SEO that

00:25:36,809 --> 00:25:43,630
that concept affects SEO and that is

00:25:40,480 --> 00:25:45,700
very important for many for the success

00:25:43,630 --> 00:25:50,830
of many businesses in the individual

00:25:45,700 --> 00:25:54,130
world right so we really need this in

00:25:50,830 --> 00:25:57,130
the decoupled landscape and let me focus

00:25:54,130 --> 00:25:59,440
right now on the on the browser for a

00:25:57,130 --> 00:26:01,870
second and break that rule that is not

00:25:59,440 --> 00:26:07,390
only about the react app it will be for

00:26:01,870 --> 00:26:10,900
the next slides right so it it is a need

00:26:07,390 --> 00:26:14,380
that you have to be able to control

00:26:10,900 --> 00:26:17,590
editorially your URLs right you need to

00:26:14,380 --> 00:26:21,550
have like the SEO specialist be

00:26:17,590 --> 00:26:22,380
opinionated on where your routes will

00:26:21,550 --> 00:26:26,280
live

00:26:22,380 --> 00:26:29,549
and whenever a request comes in to your

00:26:26,280 --> 00:26:31,740
bougie ass up it's gonna take that path

00:26:29,549 --> 00:26:33,660
and it's gonna inspect it and it's gonna

00:26:31,740 --> 00:26:37,200
have to make a request to the Drupal

00:26:33,660 --> 00:26:39,750
back-end so one strategy that people

00:26:37,200 --> 00:26:41,789
have been following is to to do

00:26:39,750 --> 00:26:45,240
something like I'm gonna create a

00:26:41,789 --> 00:26:48,720
property in my in my node this is gonna

00:26:45,240 --> 00:26:51,690
be called path or a slug and then I'm

00:26:48,720 --> 00:26:53,580
gonna filter that content type but die

00:26:51,690 --> 00:26:56,480
property and I'm gonna find what I'm

00:26:53,580 --> 00:27:00,480
looking for right and that works well

00:26:56,480 --> 00:27:03,059
except when you realize that you go into

00:27:00,480 --> 00:27:06,600
this scenario like imagine that an

00:27:03,059 --> 00:27:10,710
editor creates a recipe for recipe side

00:27:06,600 --> 00:27:13,679
and it puts it in the recipes sliced

00:27:10,710 --> 00:27:17,370
bread right and we are already very

00:27:13,679 --> 00:27:21,750
proud of that recipe and share they

00:27:17,370 --> 00:27:23,940
share that in Facebook Twitter even put

00:27:21,750 --> 00:27:28,169
it in a printed magazine that URL and

00:27:23,940 --> 00:27:33,000
then comes a change to that right and

00:27:28,169 --> 00:27:35,460
you drop the recipes prefix so now if

00:27:33,000 --> 00:27:39,350
you think about that solution that we

00:27:35,460 --> 00:27:44,220
came up with when the request comes in

00:27:39,350 --> 00:27:46,740
we have updated to slice bread and not

00:27:44,220 --> 00:27:49,740
recipes sliced bread so the request

00:27:46,740 --> 00:27:51,600
comes in but it comes in with with the

00:27:49,740 --> 00:27:54,750
old path because someone clicked on

00:27:51,600 --> 00:27:58,409
Twitter or on Facebook so you look for

00:27:54,750 --> 00:28:00,120
the content that has that old path and

00:27:58,409 --> 00:28:04,440
you don't find it because you updated it

00:28:00,120 --> 00:28:07,230
right and it's no longer there and that

00:28:04,440 --> 00:28:10,919
is very sad and the SEO specialist is

00:28:07,230 --> 00:28:12,510
not pleased about it especially when you

00:28:10,919 --> 00:28:15,870
when the magazine is printed and sold

00:28:12,510 --> 00:28:20,010
right because you cannot change that so

00:28:15,870 --> 00:28:24,080
the idea is that you used this module

00:28:20,010 --> 00:28:26,429
called decoupled Reuter program and

00:28:24,080 --> 00:28:29,429
basically deals with this because this

00:28:26,429 --> 00:28:31,770
isn't an old problem for the tuple

00:28:29,429 --> 00:28:32,340
community we solve this like a long time

00:28:31,770 --> 00:28:37,000
ago

00:28:32,340 --> 00:28:39,670
you just use the URL alias and you

00:28:37,000 --> 00:28:43,000
download and enable the redirects module

00:28:39,670 --> 00:28:46,330
and whenever there is a change on the on

00:28:43,000 --> 00:28:49,660
the path alias then it a redirection

00:28:46,330 --> 00:28:51,970
gets created and if you land on an old

00:28:49,660 --> 00:28:53,950
URL you follow all the Bri directions

00:28:51,970 --> 00:28:56,530
throughout the changes until you land

00:28:53,950 --> 00:28:59,140
into the node that you're looking for so

00:28:56,530 --> 00:29:01,270
the concept is the same there is a new

00:28:59,140 --> 00:29:05,230
end point when you download and install

00:29:01,270 --> 00:29:09,520
the decoupled router module and to that

00:29:05,230 --> 00:29:13,390
you pass the path and you just execute

00:29:09,520 --> 00:29:15,880
the the request in Interpol come back to

00:29:13,390 --> 00:29:21,460
you with the URL that you need to

00:29:15,880 --> 00:29:25,540
request and I kind of dropped the the

00:29:21,460 --> 00:29:29,170
hint before but if you see here we kind

00:29:25,540 --> 00:29:31,960
of dropped the recipes prefix the

00:29:29,170 --> 00:29:34,960
recipes prefix was what it was telling

00:29:31,960 --> 00:29:40,090
the bougie as up look for a recipe that

00:29:34,960 --> 00:29:43,270
has this this path a sliced bread if we

00:29:40,090 --> 00:29:46,900
drop that we don't know if sliced bread

00:29:43,270 --> 00:29:50,350
we need to filter on a taxonomy term it

00:29:46,900 --> 00:29:53,560
is it recipe is it an article so we need

00:29:50,350 --> 00:29:56,050
to look for all of the resources to find

00:29:53,560 --> 00:29:58,780
that path with the decouple router

00:29:56,050 --> 00:30:00,730
however you just pass a path and it

00:29:58,780 --> 00:30:03,340
resolves to any entity that is behind

00:30:00,730 --> 00:30:06,670
that but you then you don't even need to

00:30:03,340 --> 00:30:09,010
know what resources is it so at this

00:30:06,670 --> 00:30:12,520
point hopefully someone in the audience

00:30:09,010 --> 00:30:16,450
is cringing about the idea of sending a

00:30:12,520 --> 00:30:18,820
path to Drupal to get the entity that

00:30:16,450 --> 00:30:20,590
you need to request in the client and

00:30:18,820 --> 00:30:26,710
then make another request to actually

00:30:20,590 --> 00:30:29,140
get the entity right and you just build

00:30:26,710 --> 00:30:31,690
a blueprint to fix that right because

00:30:29,140 --> 00:30:34,600
that's a that's the thing when we work

00:30:31,690 --> 00:30:37,510
in these hard problems as an abstract

00:30:34,600 --> 00:30:40,480
concept we find ourselves whenever we

00:30:37,510 --> 00:30:43,300
crack the nut on on one of the problems

00:30:40,480 --> 00:30:45,190
that we find the old problems again so

00:30:43,300 --> 00:30:47,649
we need to keep reusing

00:30:45,190 --> 00:30:50,470
the same principals so you send a

00:30:47,649 --> 00:30:53,889
blueprint that has the path resolution

00:30:50,470 --> 00:30:56,979
to the couple Reuter and then it

00:30:53,889 --> 00:31:04,179
requests the entity in there using the

00:30:56,979 --> 00:31:07,479
placeholder so that makes two and we're

00:31:04,179 --> 00:31:12,759
gonna move to editorial layout and in

00:31:07,479 --> 00:31:16,019
place editors this one is special it's

00:31:12,759 --> 00:31:21,999
my least favorite of the heart problems

00:31:16,019 --> 00:31:26,379
because I feel that I feel like we are

00:31:21,999 --> 00:31:29,679
in a transitioning time right we are

00:31:26,379 --> 00:31:34,960
kind of new to decoupled through Poe or

00:31:29,679 --> 00:31:37,899
decouple strategies and we are still

00:31:34,960 --> 00:31:41,979
dragging some of the feature sets of the

00:31:37,899 --> 00:31:45,090
old times I feel and building layouts in

00:31:41,979 --> 00:31:50,679
the server is one of those concepts

00:31:45,090 --> 00:31:54,159
however that is something that some

00:31:50,679 --> 00:31:57,609
clients really need or think that they

00:31:54,159 --> 00:32:01,570
really need and and we need to provide

00:31:57,609 --> 00:32:06,340
solutions for them right what I would

00:32:01,570 --> 00:32:10,299
try is to teach them how this is hard

00:32:06,340 --> 00:32:13,479
and how much this is gonna be a problem

00:32:10,299 --> 00:32:17,289
like maybe development time or budget

00:32:13,479 --> 00:32:21,700
for it etc but some they will still need

00:32:17,289 --> 00:32:25,720
this and there are solutions like this

00:32:21,700 --> 00:32:28,629
is a screenshot of something that the 1x

00:32:25,720 --> 00:32:31,989
internet people showed the triple

00:32:28,629 --> 00:32:34,869
Kammerer this year and this is what you

00:32:31,989 --> 00:32:39,429
would expect it's not show him very well

00:32:34,869 --> 00:32:42,009
but it has like in place layout builder

00:32:39,429 --> 00:32:44,619
you drop blocks and you select them and

00:32:42,009 --> 00:32:46,179
you edit them and it works really well

00:32:44,619 --> 00:32:50,190
and both things

00:32:46,179 --> 00:32:54,039
it's a layout builder and it's also the

00:32:50,190 --> 00:32:57,339
and it's also the in context experience

00:32:54,039 --> 00:32:58,570
that that editors really love and there

00:32:57,339 --> 00:33:02,529
is above

00:32:58,570 --> 00:33:06,369
I'm sure Chris over here can can say

00:33:02,529 --> 00:33:09,459
more about that later and do you go and

00:33:06,369 --> 00:33:12,639
and watch that also there is going to be

00:33:09,459 --> 00:33:17,229
another session right after this one in

00:33:12,639 --> 00:33:20,649
this room that is the moon race project

00:33:17,229 --> 00:33:23,049
it's the weather calm

00:33:20,649 --> 00:33:26,499
builder experience for the couple

00:33:23,049 --> 00:33:27,279
projects so this is real need that's

00:33:26,499 --> 00:33:32,199
what I'm saying

00:33:27,279 --> 00:33:35,199
however it is very hard to generalize

00:33:32,199 --> 00:33:38,109
from the API first initiative

00:33:35,199 --> 00:33:41,079
perspective because Drupal is everything

00:33:38,109 --> 00:33:43,690
to everyone at any given moment and how

00:33:41,079 --> 00:33:47,019
how do we do that right how do we

00:33:43,690 --> 00:33:50,079
provide layout builder for in context

00:33:47,019 --> 00:33:53,769
for every project that is just not

00:33:50,079 --> 00:33:56,649
possible because there is also another

00:33:53,769 --> 00:33:59,409
limitation and that is again what we

00:33:56,649 --> 00:34:02,229
were thinking about was about the react

00:33:59,409 --> 00:34:05,829
version of this do we need to build a

00:34:02,229 --> 00:34:08,169
layout builder in context for all of the

00:34:05,829 --> 00:34:11,409
different consumers do you have to build

00:34:08,169 --> 00:34:15,849
five layout builder experiences do we

00:34:11,409 --> 00:34:17,740
build one that is not in context the

00:34:15,849 --> 00:34:20,319
answer is going to be different for

00:34:17,740 --> 00:34:23,200
different projects and what I really

00:34:20,319 --> 00:34:26,500
encourage you and this is the second big

00:34:23,200 --> 00:34:29,319
takeaway of the of the session is that

00:34:26,500 --> 00:34:32,579
you need to leverage the constraints of

00:34:29,319 --> 00:34:36,000
your actual project to simplify because

00:34:32,579 --> 00:34:38,200
we're trying to build something that is

00:34:36,000 --> 00:34:40,359
really difficult it's very impressive

00:34:38,200 --> 00:34:45,250
but it's really difficult we're trying

00:34:40,359 --> 00:34:48,490
to drive six seven ten different

00:34:45,250 --> 00:34:52,139
consumers digital experiences you allow

00:34:48,490 --> 00:34:54,789
me with a single API and we're trying to

00:34:52,139 --> 00:34:58,720
leverage most of the work that we've

00:34:54,789 --> 00:35:02,170
done in one into the others right so you

00:34:58,720 --> 00:35:05,410
need to simplify and if you have the

00:35:02,170 --> 00:35:08,170
ability to say I'm okay I'm only gonna

00:35:05,410 --> 00:35:11,049
be building a website and I know that's

00:35:08,170 --> 00:35:12,510
not going to change because x y&z then

00:35:11,049 --> 00:35:16,460
go ahead and

00:35:12,510 --> 00:35:20,359
build this if this des suits you right

00:35:16,460 --> 00:35:23,840
but this raises a lot of questions like

00:35:20,359 --> 00:35:26,700
how how is the layout that I just built

00:35:23,840 --> 00:35:30,090
with my front-end

00:35:26,700 --> 00:35:33,270
for the web in mind show in my smart

00:35:30,090 --> 00:35:36,270
open or if I'm going to build different

00:35:33,270 --> 00:35:37,140
consumers different layout builders for

00:35:36,270 --> 00:35:39,600
different consumers

00:35:37,140 --> 00:35:41,850
how do third-party consumers do this

00:35:39,600 --> 00:35:44,010
like they don't have a hand on the

00:35:41,850 --> 00:35:49,350
server and you probably don't want them

00:35:44,010 --> 00:35:53,369
to have but also and most importantly is

00:35:49,350 --> 00:35:56,100
that the original concept of a page in

00:35:53,369 --> 00:35:58,740
the server for the cup of world so we

00:35:56,100 --> 00:36:01,580
have as Drupal people we have this

00:35:58,740 --> 00:36:05,670
cognitive bias to think about a node

00:36:01,580 --> 00:36:08,250
corresponds to a page right and that

00:36:05,670 --> 00:36:10,890
that is not true like a page is whatever

00:36:08,250 --> 00:36:13,800
that react app defines as a set of

00:36:10,890 --> 00:36:17,250
templates or that iOS app defines as

00:36:13,800 --> 00:36:19,980
their presentation right and it may be

00:36:17,250 --> 00:36:22,020
that those templates are for a single

00:36:19,980 --> 00:36:24,540
entity but there is no guarantee of that

00:36:22,020 --> 00:36:27,180
they could be pulling different set of

00:36:24,540 --> 00:36:30,119
data and items of data so defining a

00:36:27,180 --> 00:36:32,130
layout for a page in the server is very

00:36:30,119 --> 00:36:35,330
difficult when you don't even have the

00:36:32,130 --> 00:36:38,340
ability to define for the pages and

00:36:35,330 --> 00:36:41,130
again leverage your constraints maybe

00:36:38,340 --> 00:36:47,820
you can say for my project a node is a

00:36:41,130 --> 00:36:50,310
page and then build on that alright so

00:36:47,820 --> 00:36:55,140
one of the solutions that we could build

00:36:50,310 --> 00:36:58,290
is to have some way of defining

00:36:55,140 --> 00:37:00,890
consumers and assign configuration to

00:36:58,290 --> 00:37:04,590
that that's something that for instance

00:37:00,890 --> 00:37:06,990
Facebook does they allow you to go to

00:37:04,590 --> 00:37:10,340
developer at facebook.com and register

00:37:06,990 --> 00:37:14,460
an app so in Drupal we also have that

00:37:10,340 --> 00:37:17,580
there is the consumers project I created

00:37:14,460 --> 00:37:20,130
this for the consumer image Styles which

00:37:17,580 --> 00:37:22,619
allows you to put select the image

00:37:20,130 --> 00:37:24,869
styles for each consumer so

00:37:22,619 --> 00:37:28,470
you have to load them all in different

00:37:24,869 --> 00:37:30,920
situations so you just register your

00:37:28,470 --> 00:37:33,240
consumer and then assign some him some

00:37:30,920 --> 00:37:37,200
configuration maybe with the layout

00:37:33,240 --> 00:37:40,130
builder I don't know but I'm very

00:37:37,200 --> 00:37:43,170
interested in learning what your

00:37:40,130 --> 00:37:46,049
audiences are with it and if someone

00:37:43,170 --> 00:37:48,180
gets to build this I'm very happy to

00:37:46,049 --> 00:37:52,049
help review and maybe even work on that

00:37:48,180 --> 00:37:57,630
and we're moving now to user

00:37:52,049 --> 00:38:00,509
authentication so maybe surprised that

00:37:57,630 --> 00:38:02,700
this is a hard problem because like it's

00:38:00,509 --> 00:38:06,029
been working forever for us in Drupal

00:38:02,700 --> 00:38:08,369
right and it's been a solved problem and

00:38:06,029 --> 00:38:12,539
other communities have struggled with

00:38:08,369 --> 00:38:16,309
this but we have not it is it has been

00:38:12,539 --> 00:38:19,619
working great and great but we've been

00:38:16,309 --> 00:38:22,980
doing authentication using cookies which

00:38:19,619 --> 00:38:26,940
is something that again the browser is a

00:38:22,980 --> 00:38:29,190
pretty complicated thing that does a lot

00:38:26,940 --> 00:38:29,849
for us and one thing that that for us it

00:38:29,190 --> 00:38:32,099
slaps

00:38:29,849 --> 00:38:34,470
cookie on your request depending on the

00:38:32,099 --> 00:38:36,930
domain it works cross subdomains

00:38:34,470 --> 00:38:40,140
it encrypts cookies so they are securely

00:38:36,930 --> 00:38:41,940
you can share state with those so

00:38:40,140 --> 00:38:45,660
there's a lot that we can do with that

00:38:41,940 --> 00:38:48,660
but when you have an app that runs in a

00:38:45,660 --> 00:38:50,910
Roku for instance you don't have this

00:38:48,660 --> 00:38:53,730
right so we want to do authentication

00:38:50,910 --> 00:38:59,390
that works across consumers we need to

00:38:53,730 --> 00:39:02,819
go to earth - and this is the

00:38:59,390 --> 00:39:04,920
specification that the industry is using

00:39:02,819 --> 00:39:08,160
like there is little discussion about

00:39:04,920 --> 00:39:10,769
that there are others they also work but

00:39:08,160 --> 00:39:13,049
this is the leading one and the good

00:39:10,769 --> 00:39:16,019
thing about it is that it is solving

00:39:13,049 --> 00:39:19,140
many of the problems that you let you

00:39:16,019 --> 00:39:21,960
have again this is a diagram that I

00:39:19,140 --> 00:39:26,609
didn't write please don't run to to read

00:39:21,960 --> 00:39:31,289
it the idea is that auth - has the

00:39:26,609 --> 00:39:33,410
concept of grants and it's based on the

00:39:31,289 --> 00:39:36,450
authentication is based on the server

00:39:33,410 --> 00:39:39,270
generated a token that

00:39:36,450 --> 00:39:42,810
the consumer stores and then everytime

00:39:39,270 --> 00:39:45,990
that wants to prove that this is for

00:39:42,810 --> 00:39:48,660
user forty-three and it just uses that

00:39:45,990 --> 00:39:51,210
token in the request the problem becomes

00:39:48,660 --> 00:39:52,829
how to get that token from the server

00:39:51,210 --> 00:39:58,800
because it's going to be different if

00:39:52,829 --> 00:40:02,579
you have angular app and you have to

00:39:58,800 --> 00:40:06,750
authenticate a user because you just do

00:40:02,579 --> 00:40:09,030
what you used to right I I think of this

00:40:06,750 --> 00:40:12,000
like the github example you click the

00:40:09,030 --> 00:40:14,400
sign with github and you get redirected

00:40:12,000 --> 00:40:16,079
to github.com you put your password

00:40:14,400 --> 00:40:18,540
there if you're not already logged in

00:40:16,079 --> 00:40:20,869
and it asks for approval and then it you

00:40:18,540 --> 00:40:25,230
get redirected back to the other side

00:40:20,869 --> 00:40:28,079
with with a code in the URL that that

00:40:25,230 --> 00:40:31,950
site reads and then generates a token

00:40:28,079 --> 00:40:34,619
for you and you get it so it's a kind of

00:40:31,950 --> 00:40:37,560
a complicated process that happens but

00:40:34,619 --> 00:40:41,550
it requires human interaction that's

00:40:37,560 --> 00:40:44,790
called the the authorized authorization

00:40:41,550 --> 00:40:48,660
code grant and this diagram helps you

00:40:44,790 --> 00:40:51,300
with deciding do I need this one or not

00:40:48,660 --> 00:40:54,630
because it could be that you're writing

00:40:51,300 --> 00:40:57,690
a java application that is a demon that

00:40:54,630 --> 00:41:00,150
runs on a server and every cron

00:40:57,690 --> 00:41:02,970
execution needs to make authenticated

00:41:00,150 --> 00:41:04,710
requests to Drupal right and for that

00:41:02,970 --> 00:41:07,770
you don't have a user to click around

00:41:04,710 --> 00:41:09,960
and put their password you could argue

00:41:07,770 --> 00:41:12,599
that using even have a user at all

00:41:09,960 --> 00:41:13,859
because it's just a machine right so for

00:41:12,599 --> 00:41:19,310
that you would use the client

00:41:13,859 --> 00:41:22,619
credentials so this seems very

00:41:19,310 --> 00:41:25,380
complicated to execute but since this is

00:41:22,619 --> 00:41:27,569
this is a standard and most importantly

00:41:25,380 --> 00:41:29,819
a leading standard there are lots of

00:41:27,569 --> 00:41:32,640
tools lots of documentation that go with

00:41:29,819 --> 00:41:35,460
this and also this particular

00:41:32,640 --> 00:41:38,910
implementation or asked to is based on

00:41:35,460 --> 00:41:41,550
JW TS which is when I was saying passing

00:41:38,910 --> 00:41:44,550
the token back and forth is not just a

00:41:41,550 --> 00:41:47,160
random string is a JSON document that

00:41:44,550 --> 00:41:50,040
contains information about the user that

00:41:47,160 --> 00:41:53,310
is encrypted with an encryption

00:41:50,040 --> 00:41:55,410
there so you have a set of keys you

00:41:53,310 --> 00:41:58,080
encrypt that JSON document and that's

00:41:55,410 --> 00:42:00,750
the token that they share around so you

00:41:58,080 --> 00:42:04,590
can do creative things like if you have

00:42:00,750 --> 00:42:08,280
a nodejs proxy in there you could share

00:42:04,590 --> 00:42:11,010
those set of encryption keys and decrypt

00:42:08,280 --> 00:42:13,230
the token and say oh well this is

00:42:11,010 --> 00:42:15,450
actually not a valid token I'm not even

00:42:13,230 --> 00:42:18,420
gonna bother Drupal with this or you

00:42:15,450 --> 00:42:23,040
could say oh I see that this is a valid

00:42:18,420 --> 00:42:25,470
token for user 77 and user 77 doesn't go

00:42:23,040 --> 00:42:28,650
to Drupal does it goes to whatever

00:42:25,470 --> 00:42:33,930
external service so you can you can also

00:42:28,650 --> 00:42:36,240
use these underlying GWT technology to

00:42:33,930 --> 00:42:38,130
do other interesting things like for

00:42:36,240 --> 00:42:41,580
instance and this is something that is

00:42:38,130 --> 00:42:44,160
already happening doing single sign-on

00:42:41,580 --> 00:42:46,500
solutions there are two different teams

00:42:44,160 --> 00:42:48,330
right now that building on this module

00:42:46,500 --> 00:42:50,880
they are providing single sign-on

00:42:48,330 --> 00:42:54,270
solutions one of those is also another

00:42:50,880 --> 00:42:58,770
standard called open connect which again

00:42:54,270 --> 00:43:03,330
you can leverage to connect to just sign

00:42:58,770 --> 00:43:05,760
in in your iOS app and be signed in your

00:43:03,330 --> 00:43:11,130
in your web service and in your app web

00:43:05,760 --> 00:43:14,270
app so don't be stressed there is a lot

00:43:11,130 --> 00:43:17,190
of documentation I wrote I recorded a

00:43:14,270 --> 00:43:19,710
set of videos to kind of help with the

00:43:17,190 --> 00:43:22,830
process of how do I use this grant or

00:43:19,710 --> 00:43:25,380
how do ID bug that my token is being

00:43:22,830 --> 00:43:27,750
processed correctly and also the stuff

00:43:25,380 --> 00:43:30,660
like that we didn't comment on like

00:43:27,750 --> 00:43:33,000
scopes what you can do because you can

00:43:30,660 --> 00:43:37,050
limit what the user can do using OAuth

00:43:33,000 --> 00:43:40,530
and and all that so go and check that

00:43:37,050 --> 00:43:43,350
channel and and see those videos you can

00:43:40,530 --> 00:43:45,210
also install Contenta and there is a

00:43:43,350 --> 00:43:53,090
knowledge hub that links to all those

00:43:45,210 --> 00:43:55,440
videos and that is pretty much it but

00:43:53,090 --> 00:43:58,160
yeah there are many other heart problems

00:43:55,440 --> 00:44:02,040
like for instance um something that you

00:43:58,160 --> 00:44:02,970
did not expect maybe is that project

00:44:02,040 --> 00:44:05,130
management gets

00:44:02,970 --> 00:44:06,270
more complicated because you instead of

00:44:05,130 --> 00:44:08,580
having one web team

00:44:06,270 --> 00:44:11,490
now you have one iOS team one Android

00:44:08,580 --> 00:44:14,040
team then also one web app team and the

00:44:11,490 --> 00:44:16,800
back-end team to to manage and they all

00:44:14,040 --> 00:44:19,440
have scrums so you have now five scrams

00:44:16,800 --> 00:44:21,720
and then you have scrum of scrums to

00:44:19,440 --> 00:44:24,210
coordinate what they have in common and

00:44:21,720 --> 00:44:28,530
also you may have three different

00:44:24,210 --> 00:44:32,670
ticketing systems and like it may not be

00:44:28,530 --> 00:44:35,760
a big issue but it is just an example

00:44:32,670 --> 00:44:39,570
that when you're jumping into a new

00:44:35,760 --> 00:44:42,300
thing you're gonna find small nuances

00:44:39,570 --> 00:44:45,120
like this that you need to solve right

00:44:42,300 --> 00:44:48,680
so your process may be impacted and you

00:44:45,120 --> 00:44:51,360
need to figure it out to be productive

00:44:48,680 --> 00:44:54,360
another heart problem and this may be

00:44:51,360 --> 00:44:57,720
the hardest one that I mentioned is API

00:44:54,360 --> 00:45:01,140
I personally I say that it's the hardest

00:44:57,720 --> 00:45:03,720
one because I'm almost convinced that it

00:45:01,140 --> 00:45:05,610
cannot be implemented in Drupal to a

00:45:03,720 --> 00:45:06,900
point that he worked in every single

00:45:05,610 --> 00:45:09,410
scenario so again

00:45:06,900 --> 00:45:13,620
leverage your constraints and try to

00:45:09,410 --> 00:45:16,200
make it work for you but imagine that

00:45:13,620 --> 00:45:18,720
you have a version one of the API that

00:45:16,200 --> 00:45:21,470
contains a content type with a field

00:45:18,720 --> 00:45:25,170
that you want to remove for vision to

00:45:21,470 --> 00:45:29,820
write so you go ahead and you delete the

00:45:25,170 --> 00:45:31,800
field from Drupal and it's gone and it's

00:45:29,820 --> 00:45:34,080
gone with all the implications it's gone

00:45:31,800 --> 00:45:36,630
from the database so if a request comes

00:45:34,080 --> 00:45:39,690
in and try to load that content type

00:45:36,630 --> 00:45:42,300
data for that content type the data is

00:45:39,690 --> 00:45:46,830
not there right you removed it from

00:45:42,300 --> 00:45:48,510
version one as well and there is no good

00:45:46,830 --> 00:45:49,980
solution and that is not the only

00:45:48,510 --> 00:45:52,050
problem with versioning like there are

00:45:49,980 --> 00:45:55,530
other problems like making small changes

00:45:52,050 --> 00:45:57,480
in the in the content model can have

00:45:55,530 --> 00:46:00,270
rippling effects that are very difficult

00:45:57,480 --> 00:46:07,730
to undo when you maintain backwards

00:46:00,270 --> 00:46:11,070
compatibility but there are proposals to

00:46:07,730 --> 00:46:15,300
to make versioning work within some

00:46:11,070 --> 00:46:16,160
given constraints so we'll see where

00:46:15,300 --> 00:46:20,480
that word out

00:46:16,160 --> 00:46:23,839
and can't improve you we talked about

00:46:20,480 --> 00:46:28,720
that a little bit yesterday in the

00:46:23,839 --> 00:46:33,380
Kickapoo summit it is very hard the

00:46:28,720 --> 00:46:35,510
workspaces project of content staging

00:46:33,380 --> 00:46:41,960
that was mentioned today in the in the

00:46:35,510 --> 00:46:45,079
trees note and the fact that you can set

00:46:41,960 --> 00:46:48,230
some content together and then see it

00:46:45,079 --> 00:46:51,369
how it worked in Drupal it doesn't mean

00:46:48,230 --> 00:46:54,530
that it's easy to do in six different

00:46:51,369 --> 00:46:56,930
you see different consumers it's it's

00:46:54,530 --> 00:47:00,309
hard especially because you need some

00:46:56,930 --> 00:47:03,890
level of authentication that may be

00:47:00,309 --> 00:47:06,650
exclusive for the preview system right

00:47:03,890 --> 00:47:08,299
you have a read-only application that

00:47:06,650 --> 00:47:10,520
all of the sudden needs authentication

00:47:08,299 --> 00:47:12,289
because you need to preview content so

00:47:10,520 --> 00:47:14,210
you need to plan a little bit for that

00:47:12,289 --> 00:47:20,109
especially when you're doing estimations

00:47:14,210 --> 00:47:23,539
and budgeting for the project search

00:47:20,109 --> 00:47:26,660
search can also be problematic because

00:47:23,539 --> 00:47:29,720
it doesn't follow the same conventions

00:47:26,660 --> 00:47:33,470
of the rest of the entities you could

00:47:29,720 --> 00:47:35,960
write a fake entity that wraps search

00:47:33,470 --> 00:47:38,119
results right and then use JSON API to

00:47:35,960 --> 00:47:42,650
interact with that but I will recommend

00:47:38,119 --> 00:47:45,190
that instead you go and index your your

00:47:42,650 --> 00:47:48,980
search into things like for instance

00:47:45,190 --> 00:47:51,980
elastic search or Apache Solr and then

00:47:48,980 --> 00:47:54,500
use those api's to get your search

00:47:51,980 --> 00:47:58,730
instead of going to trupo go directly to

00:47:54,500 --> 00:48:00,980
the search add to the search index but

00:47:58,730 --> 00:48:04,190
you lose all the thing all the good

00:48:00,980 --> 00:48:07,220
things that the Search API module does

00:48:04,190 --> 00:48:09,740
like the faceted the facets searching on

00:48:07,220 --> 00:48:12,049
all the widgets that allow good

00:48:09,740 --> 00:48:14,839
searching experience so you've got to

00:48:12,049 --> 00:48:16,579
build that which is not a big deal

00:48:14,839 --> 00:48:20,049
because if you are into decoupled you

00:48:16,579 --> 00:48:22,190
have to be into building things and

00:48:20,049 --> 00:48:23,900
you're gonna be building a lot of things

00:48:22,190 --> 00:48:28,130
from scratch

00:48:23,900 --> 00:48:30,220
and that's pretty much it this

00:48:28,130 --> 00:48:32,599
presentation took a lot of effort I

00:48:30,220 --> 00:48:42,349
practiced this presentation twice this

00:48:32,599 --> 00:48:45,920
morning before I did this so all all

00:48:42,349 --> 00:48:49,640
that to say that it would be great if

00:48:45,920 --> 00:48:53,029
you took a minute to go to the Drupal

00:48:49,640 --> 00:48:57,380
con session node click into the evaluate

00:48:53,029 --> 00:49:03,619
and you could even do it now if you want

00:48:57,380 --> 00:49:08,299
and yeah we have a little bit of time

00:49:03,619 --> 00:49:12,589
for questions but I wanted to take the

00:49:08,299 --> 00:49:16,999
chance to say that I'm gonna be on the

00:49:12,589 --> 00:49:19,519
lull about booth at noon answering any

00:49:16,999 --> 00:49:22,130
other questions that are lingering or

00:49:19,519 --> 00:49:24,980
that you want to ask later or that we

00:49:22,130 --> 00:49:28,999
don't have time to to answer so with

00:49:24,980 --> 00:49:31,700
that do we have any questions I'm please

00:49:28,999 --> 00:49:34,009
walk to the to the mic and stay in line

00:49:31,700 --> 00:49:38,349
because otherwise the questions will not

00:49:34,009 --> 00:49:42,130
be recorded for the video all right I

00:49:38,349 --> 00:49:42,130
wonder if you can hear me fine

00:49:46,900 --> 00:49:52,040
how about now okay perfect

00:49:49,339 --> 00:49:53,569
all right a very nice presentation I

00:49:52,040 --> 00:49:55,339
came in a slightly late but I'm

00:49:53,569 --> 00:49:58,700
wondering if you covered stream rappers

00:49:55,339 --> 00:50:00,410
in sort of heart problems that seems

00:49:58,700 --> 00:50:04,270
like stream rappers are sort of there

00:50:00,410 --> 00:50:04,270
but they are not quite general enough

00:50:04,930 --> 00:50:10,720
I'm not sure anytime what you mean by

00:50:07,700 --> 00:50:14,270
stream rappers can you elaborate on that

00:50:10,720 --> 00:50:16,190
so there's a notion of handling files in

00:50:14,270 --> 00:50:19,579
Drupal right typically those stream

00:50:16,190 --> 00:50:22,730
rappers are just meant for public and

00:50:19,579 --> 00:50:24,890
private file systems architectural II

00:50:22,730 --> 00:50:28,369
you can write your own stream rapper and

00:50:24,890 --> 00:50:30,260
say hey Lola bot is a stream rapper and

00:50:28,369 --> 00:50:32,390
it can do magical things whatever you

00:50:30,260 --> 00:50:36,799
want it to do but things don't

00:50:32,390 --> 00:50:39,589
necessarily work things are still tight

00:50:36,799 --> 00:50:42,740
in the core to the paths they don't

00:50:39,589 --> 00:50:44,660
convert the URIs to you know the hats

00:50:42,740 --> 00:50:47,030
and things like that and I'm wondering

00:50:44,660 --> 00:50:52,700
if if you encounter that in the

00:50:47,030 --> 00:50:57,559
decoupled scenario what I can look what

00:50:52,700 --> 00:51:00,710
I can say is that it has been an

00:50:57,559 --> 00:51:05,750
outstanding problem handling files in in

00:51:00,710 --> 00:51:08,359
decoupled so far but some really big

00:51:05,750 --> 00:51:12,319
improvements have landed in the in the

00:51:08,359 --> 00:51:15,500
last versions of of Drupal core the most

00:51:12,319 --> 00:51:18,980
important is that we can now upload file

00:51:15,500 --> 00:51:22,160
binaries in the most impressive ways

00:51:18,980 --> 00:51:26,900
like you can upload just a single pixel

00:51:22,160 --> 00:51:29,420
image or you can upload a file of five

00:51:26,900 --> 00:51:33,170
gigabytes and you're not even limited

00:51:29,420 --> 00:51:35,470
for the PHP memory limit so that is one

00:51:33,170 --> 00:51:41,150
improvement another improvement is that

00:51:35,470 --> 00:51:45,349
files now have the the ability to to

00:51:41,150 --> 00:51:48,109
unwrap the the stream wrapper and

00:51:45,349 --> 00:51:53,329
provide a download URL when do you

00:51:48,109 --> 00:51:56,710
normalize the the entity and that works

00:51:53,329 --> 00:51:59,740
for the stream rappers that come with

00:51:56,710 --> 00:52:05,109
or like basically public and private mmm

00:51:59,740 --> 00:52:06,300
I'm not sure if those would work with no

00:52:05,109 --> 00:52:21,640
okay

00:52:06,300 --> 00:52:27,160
probably whim can provide more I'm gonna

00:52:21,640 --> 00:52:28,089
repeat that for for the mic can you tell

00:52:27,160 --> 00:52:31,450
me your name sorry

00:52:28,089 --> 00:52:33,130
or maybe winkin that's Brad Jones who is

00:52:31,450 --> 00:52:34,930
working with me on the CDI module but

00:52:33,130 --> 00:52:36,790
CDI module is kind of a separate problem

00:52:34,930 --> 00:52:40,470
space I think I don't think you were

00:52:36,790 --> 00:52:40,470
necessarily interacting with seed yet

00:52:41,460 --> 00:52:45,700
sure but I think what you're asking is

00:52:44,349 --> 00:52:47,560
whether it's streamers some of them

00:52:45,700 --> 00:52:50,710
public and private are actually support

00:52:47,560 --> 00:52:52,000
it's just fine in normalizations of your

00:52:50,710 --> 00:52:55,480
data is that what you're asking

00:52:52,000 --> 00:52:57,930
really in Drupal 8 5 we added we

00:52:55,480 --> 00:53:01,180
improved the way that file entities

00:52:57,930 --> 00:53:03,940
represents your eyes and it now

00:53:01,180 --> 00:53:07,359
automatically is going to expose a

00:53:03,940 --> 00:53:10,890
property on your I field that contains a

00:53:07,359 --> 00:53:13,720
publicly accessible URL so an HTTP URL

00:53:10,890 --> 00:53:16,119
for whatever streamer you have so as

00:53:13,720 --> 00:53:18,790
long as your stream wrapper implements

00:53:16,119 --> 00:53:20,140
the interface correctly things are going

00:53:18,790 --> 00:53:21,760
to work fine and as long as you're not

00:53:20,140 --> 00:53:23,740
using custom modules that do things

00:53:21,760 --> 00:53:25,750
wrong right things are going to work

00:53:23,740 --> 00:53:28,000
fine in Drupal core all of this should

00:53:25,750 --> 00:53:29,890
be working fine already if that's not

00:53:28,000 --> 00:53:31,420
the case then please file a bug report

00:53:29,890 --> 00:53:33,880
because as far as I know that there's

00:53:31,420 --> 00:53:36,490
there is no bug reports around this

00:53:33,880 --> 00:53:39,640
being horribly provoking or broken in

00:53:36,490 --> 00:53:41,890
any way and I have to admit that in

00:53:39,640 --> 00:53:44,710
general streamers it's not something

00:53:41,890 --> 00:53:46,089
that is very widely used maybe that is

00:53:44,710 --> 00:53:49,890
why but that's exactly why we need you

00:53:46,089 --> 00:53:49,890
to file bug reports if you're impacted

00:53:51,500 --> 00:53:59,280
so there was whimpers and API first

00:53:55,830 --> 00:54:01,859
initiative co-coordinator I think I

00:53:59,280 --> 00:54:06,660
don't know if that was captured by the

00:54:01,859 --> 00:54:10,050
mic that the summary of it is that I was

00:54:06,660 --> 00:54:11,880
not sure if we supported other stream

00:54:10,050 --> 00:54:14,460
rappers other than public and private

00:54:11,880 --> 00:54:18,660
but it seems that we do if they are

00:54:14,460 --> 00:54:21,630
implemented the correct way great work

00:54:18,660 --> 00:54:24,240
on the session thank you um you

00:54:21,630 --> 00:54:27,270
mentioned that versioning of the API is

00:54:24,240 --> 00:54:29,730
an issue you said that you were almost

00:54:27,270 --> 00:54:32,490
convinced that it was unsolvable Andrew

00:54:29,730 --> 00:54:34,700
I'm curious what is specific about this

00:54:32,490 --> 00:54:38,310
problem in Drupal that is different from

00:54:34,700 --> 00:54:40,080
any other API it seems like people are

00:54:38,310 --> 00:54:41,970
dealing with versioning api's and

00:54:40,080 --> 00:54:44,940
removing things deprecating things from

00:54:41,970 --> 00:54:49,369
their API is elsewhere what's unique in

00:54:44,940 --> 00:54:49,369
your mind about Drupal in this case

00:54:50,630 --> 00:54:58,080
sometimes and this statement is going to

00:54:54,810 --> 00:55:01,140
be very unfair but sometimes I reduce

00:54:58,080 --> 00:55:05,010
Drupal to a content modeling tool which

00:55:01,140 --> 00:55:08,369
means that you click together like very

00:55:05,010 --> 00:55:12,990
complex content models that gets

00:55:08,369 --> 00:55:17,130
translated into a content store and that

00:55:12,990 --> 00:55:20,040
can be either just a database set of

00:55:17,130 --> 00:55:22,980
databases that work together and and all

00:55:20,040 --> 00:55:27,660
that so but we only have one of those

00:55:22,980 --> 00:55:31,740
and we don't have a great way to version

00:55:27,660 --> 00:55:34,560
the store and at the same time maintain

00:55:31,740 --> 00:55:38,250
all the feature sets that we expect from

00:55:34,560 --> 00:55:42,450
Drupal so the example that I gave was

00:55:38,250 --> 00:55:47,430
when you remove a content type for

00:55:42,450 --> 00:55:50,430
version 2 it's gone so you need to to

00:55:47,430 --> 00:55:53,580
get a little bit more creative on your

00:55:50,430 --> 00:55:56,810
solution and you you need to stop

00:55:53,580 --> 00:56:00,570
editing your content model so you can

00:55:56,810 --> 00:56:03,210
keep this API versioning

00:56:00,570 --> 00:56:05,520
but to me that goes against what I think

00:56:03,210 --> 00:56:07,590
that Drupal is good at which is like

00:56:05,520 --> 00:56:09,870
creating content models so you're

00:56:07,590 --> 00:56:13,050
freezing the content model at some point

00:56:09,870 --> 00:56:15,930
and you cannot touch it anymore and then

00:56:13,050 --> 00:56:18,240
do all the stuff to maintain the API

00:56:15,930 --> 00:56:22,440
version II is there no way to deprecate

00:56:18,240 --> 00:56:24,240
a field or content type in like a

00:56:22,440 --> 00:56:26,250
version two and then remove it

00:56:24,240 --> 00:56:28,350
completely in version 3 it seems like

00:56:26,250 --> 00:56:30,780
I'm asking about the intermediate state

00:56:28,350 --> 00:56:33,840
where in my example you're just talking

00:56:30,780 --> 00:56:40,650
about version 1 and version 3 is that

00:56:33,840 --> 00:56:45,090
possible II if you keep the Drupal isms

00:56:40,650 --> 00:56:49,410
in place it could be done like you could

00:56:45,090 --> 00:56:51,330
have a property on a field that says if

00:56:49,410 --> 00:56:53,430
it's deprecated or not you could even

00:56:51,330 --> 00:56:55,890
have like configuration entity that

00:56:53,430 --> 00:56:59,430
informs which fields are deprecated or

00:56:55,890 --> 00:57:01,770
not and that could even go into the API

00:56:59,430 --> 00:57:04,230
response I'd say this field is

00:57:01,770 --> 00:57:07,220
deprecated stop using it because it's

00:57:04,230 --> 00:57:09,780
gonna go away in the next major version

00:57:07,220 --> 00:57:11,700
but the thing is that when it goes away

00:57:09,780 --> 00:57:14,430
it doesn't go away in the next major

00:57:11,700 --> 00:57:16,260
major version it goes away for all of

00:57:14,430 --> 00:57:18,900
the versions because you've removed it

00:57:16,260 --> 00:57:21,150
from from the database but yeah you

00:57:18,900 --> 00:57:29,400
could you could deprecated things and

00:57:21,150 --> 00:57:31,290
this Quaritch is off thank you um thank

00:57:29,400 --> 00:57:31,770
you so much for your presentation it was

00:57:31,290 --> 00:57:35,610
great

00:57:31,770 --> 00:57:38,220
I have my questions about routing you

00:57:35,610 --> 00:57:43,110
mentioned the decoupled router module

00:57:38,220 --> 00:57:47,130
which sounds great my question is

00:57:43,110 --> 00:57:52,830
basically the route becomes the first

00:57:47,130 --> 00:57:55,770
class query in in every request and does

00:57:52,830 --> 00:57:59,190
it and and the decoupled routes module

00:57:55,770 --> 00:58:00,800
just handles the right hands the right

00:57:59,190 --> 00:58:04,640
entity over to me

00:58:00,800 --> 00:58:09,050
yes that's that's it um it doesn't hand

00:58:04,640 --> 00:58:12,920
the entity it hands the URL that you

00:58:09,050 --> 00:58:16,190
need to request because the decouple

00:58:12,920 --> 00:58:18,740
router is an opinionated of the API that

00:58:16,190 --> 00:58:22,790
you're using so it can give you the

00:58:18,740 --> 00:58:27,470
entity ID the JSON API URL but also it

00:58:22,790 --> 00:58:29,090
can give you the rest core URL so that's

00:58:27,470 --> 00:58:31,490
why it doesn't give you the response

00:58:29,090 --> 00:58:39,080
right away it doesn't know which API

00:58:31,490 --> 00:58:41,590
your user yeah but but you can use sub

00:58:39,080 --> 00:58:45,470
requests to bundle the next two together

00:58:41,590 --> 00:58:48,350
but it is this is actually something

00:58:45,470 --> 00:58:51,890
that it was requested as a feature

00:58:48,350 --> 00:58:55,490
request in the Shakya to just return the

00:58:51,890 --> 00:58:59,420
response and maybe it is that we need to

00:58:55,490 --> 00:59:02,710
do that because I know it feels like sub

00:58:59,420 --> 00:59:13,880
requests should handle that to me

00:59:02,710 --> 00:59:16,670
welcome oh sorry um I'm just realized

00:59:13,880 --> 00:59:20,869
that we are out of time I didn't realize

00:59:16,670 --> 00:59:24,770
they had to tell me but do you mind

00:59:20,869 --> 00:59:27,260
taking the question at noon right again

00:59:24,770 --> 00:59:30,080
if you want to continue the Q&A come to

00:59:27,260 --> 00:59:30,530
the lullaby boost with 100 with keep

00:59:30,080 --> 00:59:40,030
this going

00:59:30,530 --> 00:59:40,030
thank you nice

00:59:41,170 --> 00:59:44,620

YouTube URL: https://www.youtube.com/watch?v=3wHl0_jHpzU


