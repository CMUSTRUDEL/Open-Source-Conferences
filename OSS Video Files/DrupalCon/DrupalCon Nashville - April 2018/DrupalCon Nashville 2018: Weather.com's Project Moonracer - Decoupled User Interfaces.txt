Title: DrupalCon Nashville 2018: Weather.com's Project Moonracer - Decoupled User Interfaces
Publication date: 2018-04-11
Playlist: DrupalCon Nashville - April 2018
Description: 
	The most common decoupled Drupal architectures have Drupal acting as a passive datastore for front-end consumers - a system whose relationship with the frontend is limited to acting as a content API.  In this model, dynamic configuration changes to the presentation layer are handled almost exclusively by developers in code, which removes much of the configurability expected by experienced Drupal site maintainers.  Likewise these architectures emphasize Drupal for its content management and editorial interface, which may be itself somewhat limited in some use cases from a UI/UX perspective.

During the course of an ongoing decoupling project for weather.com, the team found that the lack of page configurability was a distinct pain point for site administrators and product owners. They had grown accustomed to being able to modify not just content, but entire page layouts themselves using Panels.  This functionality was lost in the traditional decoupled architecture.

To meet this challenge, the weather.com team built Project Moonracer, a Drupal 8-based solution that allowed for the direct modification of page configuration on a completely decoupled front-end by developing a unique set of data models to move page configuration back into the hands of the site owners.  Additionally, the editorial interface itself was decoupled from Drupal, allowing for a completely unique configuration management experience while allowing Drupal to shine as a data modeller, content repository and user authentication hub.

In this session, learn how the weather.com team implemented this architecture and see a brief demonstration of the Page Management System UI and API layers. We will speak to design considerations in the interface and the data models, modules and tools employed, and lessons learned from this implementation for others contemplating Drupal as a content component of a decoupled site ecosystem, ending with an exploration of how this model could inform other decoupled editorial paradigms.  

While this session will cover with some detail concepts of API design, data modelling and decoupled site architecture, it should be of interest to anyone who is familiar with decoupled site architectures as well as anyone interested in next-generation editorial experience possibilities.  Attendees of the session will leave with a greater understanding of the decoupled UI problem space as a whole, specific API and UI considerations and lessons learned from our experience and a glimpse into some possible futures of editorial interfaces in an increasingly decoupled world.
Captions: 
	00:00:03,380 --> 00:00:09,090
all right

00:00:05,960 --> 00:00:11,849
it does help there's it you know if you

00:00:09,090 --> 00:00:13,349
set it to where its audible I think

00:00:11,849 --> 00:00:16,289
that's where they like to have it but

00:00:13,349 --> 00:00:19,050
anyway we'll go ahead and get started

00:00:16,289 --> 00:00:20,970
we're at the one-minute past I know

00:00:19,050 --> 00:00:23,010
people typically trickle into these

00:00:20,970 --> 00:00:27,449
things but thank you all for coming this

00:00:23,010 --> 00:00:30,689
session is about the wthr.com project

00:00:27,449 --> 00:00:33,480
moonracer it's the lovingly named does

00:00:30,689 --> 00:00:35,219
what it says on the tin anybody who's in

00:00:33,480 --> 00:00:37,140
the room who can figure out what it's a

00:00:35,219 --> 00:00:39,210
reference to I'm gonna give you a fist

00:00:37,140 --> 00:00:42,239
bump afterwards so make sure to let me

00:00:39,210 --> 00:00:44,430
know so let's go ahead and get started

00:00:42,239 --> 00:00:46,800
this is about decoupled user interfaces

00:00:44,430 --> 00:00:48,690
so it's not just decoupling the the

00:00:46,800 --> 00:00:50,760
front end of a website it's decoupling

00:00:48,690 --> 00:00:54,149
the back end of the unit of the website

00:00:50,760 --> 00:00:56,160
so allow me to introduce myself my name

00:00:54,149 --> 00:00:58,170
is Jeremy Dickens I am the technical

00:00:56,160 --> 00:01:00,859
lead for the CMS team with the weather

00:00:58,170 --> 00:01:05,369
company we're part of IBM Watson now

00:01:00,859 --> 00:01:07,170
which is a lot of fun I am a native

00:01:05,369 --> 00:01:10,890
Nashville ioan as you can tell by my

00:01:07,170 --> 00:01:12,299
shirt they give native Nashvillians when

00:01:10,890 --> 00:01:14,400
you're born this is a true story they

00:01:12,299 --> 00:01:17,759
will give you one of these if you're

00:01:14,400 --> 00:01:19,259
actually native there's a coupon though

00:01:17,759 --> 00:01:22,080
you have to redeem it and if you don't

00:01:19,259 --> 00:01:23,909
do that then it doesn't work but no

00:01:22,080 --> 00:01:25,560
really I'm I'm super excited that

00:01:23,909 --> 00:01:27,150
everyone's here in Nashville for

00:01:25,560 --> 00:01:29,280
DrupalCon it's kind of a dream come true

00:01:27,150 --> 00:01:30,990
for me so thank you all for being here

00:01:29,280 --> 00:01:33,090
in general and thank you all for being

00:01:30,990 --> 00:01:35,130
at my presentation specifically that's

00:01:33,090 --> 00:01:38,520
wonderful I've been in the Drupal

00:01:35,130 --> 00:01:40,950
community I looked at my drupal.org page

00:01:38,520 --> 00:01:44,390
at one point in the last few months and

00:01:40,950 --> 00:01:51,030
it said nine years and I felt really old

00:01:44,390 --> 00:01:53,670
but that's probably enough about me all

00:01:51,030 --> 00:01:56,009
right and I am Matt Davis I'm the

00:01:53,670 --> 00:01:58,890
director of emerging technology for

00:01:56,009 --> 00:02:00,450
media current and I've also been around

00:01:58,890 --> 00:02:03,409
in the Drupal world for quite a while

00:02:00,450 --> 00:02:08,160
now I installed my first Drupal site in

00:02:03,409 --> 00:02:10,050
2003 I think and I've also been playing

00:02:08,160 --> 00:02:10,550
with the couple Drupal for quite a long

00:02:10,050 --> 00:02:13,940
time

00:02:10,550 --> 00:02:19,370
my first decoupled Drupal project was a

00:02:13,940 --> 00:02:21,860
Drupal 5 project that used XML RPC to

00:02:19,370 --> 00:02:24,320
communicate with a with a flash

00:02:21,860 --> 00:02:26,330
application and crazy

00:02:24,320 --> 00:02:28,310
so things have changed a little bit

00:02:26,330 --> 00:02:30,770
since then

00:02:28,310 --> 00:02:32,930
but alright let's go over a little bit

00:02:30,770 --> 00:02:34,640
about our agenda for the day and what

00:02:32,930 --> 00:02:36,800
we're gonna cover we're really going to

00:02:34,640 --> 00:02:37,700
be going over three main sections here

00:02:36,800 --> 00:02:39,890
we're gonna give a little bit of

00:02:37,700 --> 00:02:43,460
background on the history of weather

00:02:39,890 --> 00:02:45,920
comms use of Drupal and their move

00:02:43,460 --> 00:02:49,220
towards full decoupling and then

00:02:45,920 --> 00:02:51,770
specifically how they're now been using

00:02:49,220 --> 00:02:56,660
decoupled administrative interfaces as

00:02:51,770 --> 00:02:58,220
well so before we dig into the meat of

00:02:56,660 --> 00:03:01,720
the presentation I just want to kind of

00:02:58,220 --> 00:03:05,420
pause it a big question for the day a

00:03:01,720 --> 00:03:07,910
decoupled editorial interface why would

00:03:05,420 --> 00:03:10,130
anyone want to do that if there's one

00:03:07,910 --> 00:03:12,260
thing we know Drupal is pretty good at

00:03:10,130 --> 00:03:14,810
its forms and fields and data models

00:03:12,260 --> 00:03:18,050
right so why would you decouple your

00:03:14,810 --> 00:03:20,420
editorial interface well I'm not going

00:03:18,050 --> 00:03:22,310
to answer that question yet instead

00:03:20,420 --> 00:03:24,020
we're gonna go into some background on

00:03:22,310 --> 00:03:27,320
the project and we'll circle back to

00:03:24,020 --> 00:03:30,170
that so let me give you a little bit of

00:03:27,320 --> 00:03:33,860
background on whether comms history with

00:03:30,170 --> 00:03:37,310
Drupal whether comm is kind of a unique

00:03:33,860 --> 00:03:38,930
site in a lot of ways obviously because

00:03:37,310 --> 00:03:41,720
it's a pretty high-profile site it has

00:03:38,930 --> 00:03:42,800
substantial traffic coming to it but one

00:03:41,720 --> 00:03:45,470
of the things that makes it really

00:03:42,800 --> 00:03:47,870
unique is when a major weather event

00:03:45,470 --> 00:03:50,170
occurs the traffic spikes through the

00:03:47,870 --> 00:03:52,670
roof and so it has very specific

00:03:50,170 --> 00:03:55,790
performance concerns that we have to

00:03:52,670 --> 00:03:58,490
accommodate and cater to aside from that

00:03:55,790 --> 00:04:00,650
it has very specific needs in terms of

00:03:58,490 --> 00:04:03,050
the pieces on the page have different

00:04:00,650 --> 00:04:05,390
needs in terms of cache ability so

00:04:03,050 --> 00:04:07,280
articles for example may be cached for

00:04:05,390 --> 00:04:09,530
several hours but when you go to a

00:04:07,280 --> 00:04:11,959
weather page you expect to get the most

00:04:09,530 --> 00:04:13,700
up to date weather information and so

00:04:11,959 --> 00:04:16,070
that part of the page needs to be very

00:04:13,700 --> 00:04:19,160
dynamic and so the way we approach this

00:04:16,070 --> 00:04:22,040
in the original Drupal build was with a

00:04:19,160 --> 00:04:24,080
project called DNA for Drupal and

00:04:22,040 --> 00:04:26,810
angular and this was a progress

00:04:24,080 --> 00:04:28,909
decoupled Drupal build that term

00:04:26,810 --> 00:04:32,210
actually didn't even exist yet when we

00:04:28,909 --> 00:04:36,439
launched this in 2014 it was coined by

00:04:32,210 --> 00:04:40,159
Drees subsequently but the idea was to

00:04:36,439 --> 00:04:42,110
let Drupal still render the main markup

00:04:40,159 --> 00:04:44,840
on the page and the most cashable

00:04:42,110 --> 00:04:47,599
components on the page and then those

00:04:44,840 --> 00:04:50,389
pages those components that needed that

00:04:47,599 --> 00:04:53,360
very dynamic short lifespan we hand it

00:04:50,389 --> 00:04:56,000
off to angular 1 components at the time

00:04:53,360 --> 00:04:59,539
and then there's also some custom magic

00:04:56,000 --> 00:05:02,120
glue in the middle using panels plugins

00:04:59,539 --> 00:05:05,030
which all of the components on the page

00:05:02,120 --> 00:05:07,699
that you see there are panels plugins

00:05:05,030 --> 00:05:10,129
and then we use some ESI meaning edge

00:05:07,699 --> 00:05:13,460
side includes which is the ability to

00:05:10,129 --> 00:05:16,639
have separate caching at the edge for

00:05:13,460 --> 00:05:21,860
dynamic components as well so there are

00:05:16,639 --> 00:05:25,250
also some unique team needs in terms of

00:05:21,860 --> 00:05:27,710
the stakeholders of the site they have

00:05:25,250 --> 00:05:30,379
an entire team that's dedicated to

00:05:27,710 --> 00:05:32,979
managing those panels pages and what you

00:05:30,379 --> 00:05:36,289
see here is that the panels back in UI

00:05:32,979 --> 00:05:38,449
in Drupal 7 this is what the editors

00:05:36,289 --> 00:05:41,449
used for a long time with the DNA

00:05:38,449 --> 00:05:42,740
project and I think as probably many of

00:05:41,449 --> 00:05:45,889
you in the room would agree this is not

00:05:42,740 --> 00:05:48,379
the most elegant user interface but we

00:05:45,889 --> 00:05:49,819
did find that with training they really

00:05:48,379 --> 00:05:52,969
were able to hit the ground running with

00:05:49,819 --> 00:05:55,219
this and actually they built tons of

00:05:52,969 --> 00:05:57,199
different kinds of pages configured in

00:05:55,219 --> 00:05:59,240
themselves and didn't need any developer

00:05:57,199 --> 00:06:05,900
assistance to actually launch whole new

00:05:59,240 --> 00:06:07,009
types of pages so I'm sure most of you

00:06:05,900 --> 00:06:09,050
in the room are probably familiar with

00:06:07,009 --> 00:06:11,270
panels and and how all that looks but

00:06:09,050 --> 00:06:14,360
we'll just give you a little example of

00:06:11,270 --> 00:06:17,750
what that workflow look like to these to

00:06:14,360 --> 00:06:20,779
these users you know we'll show you a

00:06:17,750 --> 00:06:25,490
little bit of the d7 wthr.com homepage

00:06:20,779 --> 00:06:27,940
each of these is a angular mod so you

00:06:25,490 --> 00:06:29,900
have this sort of decoupled

00:06:27,940 --> 00:06:30,800
progressively decoupled thing where

00:06:29,900 --> 00:06:34,099
we're looking at a couple of modules

00:06:30,800 --> 00:06:37,220
here we saw a photos module what we're

00:06:34,099 --> 00:06:40,290
gonna do is we're gonna go back into the

00:06:37,220 --> 00:06:42,300
panels edit page interface you see all

00:06:40,290 --> 00:06:45,139
the variants down in the left hand side

00:06:42,300 --> 00:06:47,460
and then this semi abstracted

00:06:45,139 --> 00:06:52,350
representation of what the page layout

00:06:47,460 --> 00:06:53,910
looks like with every one of those every

00:06:52,350 --> 00:06:56,400
one of those pieces of panels content is

00:06:53,910 --> 00:06:58,710
an angular mod so what we're gonna do is

00:06:56,400 --> 00:07:02,400
we're gonna edit this one and I believe

00:06:58,710 --> 00:07:05,190
this is the photo gallery we will change

00:07:02,400 --> 00:07:06,540
the name just to make gratuitous updates

00:07:05,190 --> 00:07:10,350
because that's what you can do if you

00:07:06,540 --> 00:07:12,680
can edit the homepage of whether com

00:07:10,350 --> 00:07:16,440
we make that change we just save it and

00:07:12,680 --> 00:07:18,570
then once that completes we're gonna

00:07:16,440 --> 00:07:20,040
also say well the photos we want to

00:07:18,570 --> 00:07:21,720
promote those we want to make them more

00:07:20,040 --> 00:07:24,630
visible bring them above the fold maybe

00:07:21,720 --> 00:07:27,270
a little bit so we change the position

00:07:24,630 --> 00:07:30,660
of that module and then I think we're

00:07:27,270 --> 00:07:32,669
gonna make one more change here yeah

00:07:30,660 --> 00:07:34,979
we're gonna go in it's worth noting that

00:07:32,669 --> 00:07:38,070
these these admin interfaces that you

00:07:34,979 --> 00:07:41,190
see are actually written in a subset of

00:07:38,070 --> 00:07:43,669
form API so the front-end devs would

00:07:41,190 --> 00:07:47,160
write their angular code and then

00:07:43,669 --> 00:07:49,289
basically write a Drupal form and put it

00:07:47,160 --> 00:07:51,390
in an info file that got packaged right

00:07:49,289 --> 00:07:53,220
there along with their angular code to

00:07:51,390 --> 00:07:56,130
provide these interfaces for the users

00:07:53,220 --> 00:07:59,310
so you hit save on that one and then you

00:07:56,130 --> 00:08:02,400
update and save the page then Drupal

00:07:59,310 --> 00:08:05,340
comes back and renders you the home page

00:08:02,400 --> 00:08:08,250
again but this time as we scroll down

00:08:05,340 --> 00:08:11,490
you will see that it's our greatest

00:08:08,250 --> 00:08:14,220
photos and it's now on top of the latest

00:08:11,490 --> 00:08:16,169
tropical updates so that is the the

00:08:14,220 --> 00:08:18,660
basic workflow that these that these

00:08:16,169 --> 00:08:20,250
users I mean they did things that were a

00:08:18,660 --> 00:08:23,910
lot more interesting a promise but

00:08:20,250 --> 00:08:26,160
that's for illustration purposes but as

00:08:23,910 --> 00:08:30,000
great as that was for those users our

00:08:26,160 --> 00:08:31,590
web team actually they loved it at first

00:08:30,000 --> 00:08:36,270
it really worked really well for them

00:08:31,590 --> 00:08:40,919
and then they really needed some

00:08:36,270 --> 00:08:43,080
additional support in getting being able

00:08:40,919 --> 00:08:45,690
to do the things they wanted to do

00:08:43,080 --> 00:08:47,400
I love the JavaScript community I love

00:08:45,690 --> 00:08:48,760
that it's like super dynamic and there's

00:08:47,400 --> 00:08:51,970
lots of stuff happening

00:08:48,760 --> 00:08:56,890
the time but what that meant for us was

00:08:51,970 --> 00:09:00,160
that effectively we could not support

00:08:56,890 --> 00:09:02,080
the changes that they wanted to make so

00:09:00,160 --> 00:09:04,000
if they wanted to do something really

00:09:02,080 --> 00:09:06,880
exciting and super interesting and cool

00:09:04,000 --> 00:09:10,990
that violated the guardrails that were

00:09:06,880 --> 00:09:14,950
put around the DNA module or set of

00:09:10,990 --> 00:09:17,740
modules they were constricted by that

00:09:14,950 --> 00:09:20,320
and if they wanted to do that and it was

00:09:17,740 --> 00:09:22,360
a business decision to do that that

00:09:20,320 --> 00:09:23,440
meant that our team which is quite a bit

00:09:22,360 --> 00:09:27,220
smaller than the front-end JavaScript

00:09:23,440 --> 00:09:30,160
team would have to implement something

00:09:27,220 --> 00:09:32,160
and that was not always something that

00:09:30,160 --> 00:09:34,870
we could do promptly to be quite honest

00:09:32,160 --> 00:09:37,360
they wanted to move off of angular one

00:09:34,870 --> 00:09:40,840
they wanted to move to angular 1.5

00:09:37,360 --> 00:09:43,480
angular 2 angular Universal react view

00:09:40,840 --> 00:09:47,560
whatever they couldn't do that unless we

00:09:43,480 --> 00:09:49,900
submitted quite a bit of time to get

00:09:47,560 --> 00:09:53,260
that working there was a big drive also

00:09:49,900 --> 00:09:56,020
to BCD and agnostic we were heavily

00:09:53,260 --> 00:09:59,440
invested in a particular ESI

00:09:56,020 --> 00:10:00,790
implementation and what do you do if you

00:09:59,440 --> 00:10:03,430
don't want to use that vendor anymore

00:10:00,790 --> 00:10:05,770
that was another big one um and then I

00:10:03,430 --> 00:10:07,060
think most interestingly technically but

00:10:05,770 --> 00:10:09,610
one that I'm going to gloss over

00:10:07,060 --> 00:10:13,650
completely is that Drupal is really

00:10:09,610 --> 00:10:16,650
really bad at aggregating JavaScript and

00:10:13,650 --> 00:10:19,690
shaking out JavaScript dependencies and

00:10:16,650 --> 00:10:22,480
most people don't run into the same kind

00:10:19,690 --> 00:10:25,660
of issues that we did when you have that

00:10:22,480 --> 00:10:28,330
much JavaScript on your site and you

00:10:25,660 --> 00:10:32,530
have infrastructure issues that can

00:10:28,330 --> 00:10:33,250
arise so we had that as something to to

00:10:32,530 --> 00:10:35,890
deal with

00:10:33,250 --> 00:10:38,110
we ended up commonly calling the Drupal

00:10:35,890 --> 00:10:41,890
7 advanced aggregation module the

00:10:38,110 --> 00:10:45,210
advanced aggregation modulation yeah

00:10:41,890 --> 00:10:48,130
they sound so similar but it's so true

00:10:45,210 --> 00:10:49,630
so so the front-end team actually went

00:10:48,130 --> 00:10:51,520
off and they said you know what we're

00:10:49,630 --> 00:10:53,260
gonna we're gonna decouple this thing

00:10:51,520 --> 00:10:55,840
we're gonna make it a completely

00:10:53,260 --> 00:10:58,840
decoupled front-end so nerf was born and

00:10:55,840 --> 00:11:00,040
nerf is a very very clever acronym I've

00:10:58,840 --> 00:11:02,680
got to give it to him

00:11:00,040 --> 00:11:04,930
node express reactant Falkor

00:11:02,680 --> 00:11:09,070
was there proof of concept technology

00:11:04,930 --> 00:11:12,580
stack interestingly as it evolved it

00:11:09,070 --> 00:11:15,880
became you know koa inferno node graph

00:11:12,580 --> 00:11:22,089
QL which is can which is maybe slightly

00:11:15,880 --> 00:11:23,440
less fun but you know they stuck with

00:11:22,089 --> 00:11:26,380
nerf it's definitely the catch here of

00:11:23,440 --> 00:11:29,529
the names they completely eliminated any

00:11:26,380 --> 00:11:33,430
dependency on ESI so none of that

00:11:29,529 --> 00:11:36,190
craziness and then we were already

00:11:33,430 --> 00:11:38,800
pushing all of our content to an

00:11:36,190 --> 00:11:40,450
external content datastore so if you're

00:11:38,800 --> 00:11:42,070
in the decoupled summit yesterday you

00:11:40,450 --> 00:11:45,250
heard a lot of talk about a content API

00:11:42,070 --> 00:11:46,630
a separate content system we were

00:11:45,250 --> 00:11:48,790
already doing that so it made it very

00:11:46,630 --> 00:11:50,110
easy for them to say hey we'll just

00:11:48,790 --> 00:11:51,459
stand up something and read all this

00:11:50,110 --> 00:11:56,080
stuff from there instead of from Drupal

00:11:51,459 --> 00:11:58,390
so that was good for them and but what

00:11:56,080 --> 00:11:59,950
was interesting was they inherited a

00:11:58,390 --> 00:12:02,320
bunch of stuff from DNA that I thought

00:11:59,950 --> 00:12:04,000
after they implemented it was very

00:12:02,320 --> 00:12:06,940
interesting they kind of could have

00:12:04,000 --> 00:12:09,070
taken a cleaner break but they had page

00:12:06,940 --> 00:12:12,150
configurations and they were calling

00:12:09,070 --> 00:12:13,750
them variants there's just very panel Z

00:12:12,150 --> 00:12:15,760
they were talking about things like

00:12:13,750 --> 00:12:17,110
context 2 which is also panels either

00:12:15,760 --> 00:12:22,029
were using it slightly differently

00:12:17,110 --> 00:12:24,550
they had layouts right they had user

00:12:22,029 --> 00:12:26,230
configurable modules on the page they

00:12:24,550 --> 00:12:28,480
were they were taking their module code

00:12:26,230 --> 00:12:30,490
they kept that same paradigm where if

00:12:28,480 --> 00:12:31,930
you wanted a module that did X you wrote

00:12:30,490 --> 00:12:33,430
a little bit of code and put it

00:12:31,930 --> 00:12:36,270
somewhere which is a common JavaScript

00:12:33,430 --> 00:12:39,940
pattern I mean it totally works but

00:12:36,270 --> 00:12:41,589
there's still modules interestingly when

00:12:39,940 --> 00:12:45,400
I was a user configurable at this point

00:12:41,589 --> 00:12:47,079
they are configurable by a developer if

00:12:45,400 --> 00:12:50,230
the product team needs them to change

00:12:47,079 --> 00:12:54,490
then we start to get into where this

00:12:50,230 --> 00:12:57,220
started causing consternation Nerf

00:12:54,490 --> 00:12:59,079
became to those product managers that

00:12:57,220 --> 00:13:01,630
had had that workflow and had that

00:12:59,079 --> 00:13:03,760
capability this became a big ol black

00:13:01,630 --> 00:13:07,660
box for them to work with that you know

00:13:03,760 --> 00:13:09,850
no one likes a big old black box modules

00:13:07,660 --> 00:13:11,290
and pages yes you could change them yes

00:13:09,850 --> 00:13:13,390
you could put in something and the the

00:13:11,290 --> 00:13:15,300
the dev team could probably change them

00:13:13,390 --> 00:13:18,269
more rapidly in code

00:13:15,300 --> 00:13:20,070
you could in in a UI but it was going to

00:13:18,269 --> 00:13:21,750
require code release which a lot of

00:13:20,070 --> 00:13:23,670
times in decoupled interfaces people I

00:13:21,750 --> 00:13:25,080
guess that's what you do but we'd

00:13:23,670 --> 00:13:27,779
already let this genie out of the

00:13:25,080 --> 00:13:29,760
proverbial bottle so we we have these

00:13:27,779 --> 00:13:32,459
use cases where we get to severe weather

00:13:29,760 --> 00:13:34,769
events they want to specifically move a

00:13:32,459 --> 00:13:37,589
module up because it's important or add

00:13:34,769 --> 00:13:40,290
a new module to the page because some

00:13:37,589 --> 00:13:42,390
area of the country is in you know dire

00:13:40,290 --> 00:13:44,100
peril and they can't do that without a

00:13:42,390 --> 00:13:45,660
code release which by the way if you're

00:13:44,100 --> 00:13:48,990
in a severe weather event at weather

00:13:45,660 --> 00:13:51,329
calm you are under a code freeze so you

00:13:48,990 --> 00:13:52,649
cannot do a release so we had we had

00:13:51,329 --> 00:13:55,260
taken this away from them and there it

00:13:52,649 --> 00:13:57,060
was like that's really not all that cool

00:13:55,260 --> 00:13:58,829
right that's not a good thing to do um

00:13:57,060 --> 00:14:00,690
and effectively we basically gave these

00:13:58,829 --> 00:14:03,510
product managers we took away their free

00:14:00,690 --> 00:14:05,519
agency we took away their ability to do

00:14:03,510 --> 00:14:06,930
anything in the system that was there

00:14:05,519 --> 00:14:08,640
was part of their job before they could

00:14:06,930 --> 00:14:11,670
make decisions they could they could say

00:14:08,640 --> 00:14:13,380
we want paychecks to do why but they

00:14:11,670 --> 00:14:17,130
used to be able to just do that now they

00:14:13,380 --> 00:14:19,560
were dependent on someone else and this

00:14:17,130 --> 00:14:22,320
is where the page management system we

00:14:19,560 --> 00:14:26,670
call moonracer comes in this was our

00:14:22,320 --> 00:14:29,459
attempt to really not only give back the

00:14:26,670 --> 00:14:32,550
capabilities but also to reimagine what

00:14:29,459 --> 00:14:35,550
these interfaces could look like so we

00:14:32,550 --> 00:14:37,589
had basic MVP requirements first and

00:14:35,550 --> 00:14:40,410
foremost as we mentioned was to

00:14:37,589 --> 00:14:42,270
re-enable our product managers to be

00:14:40,410 --> 00:14:44,339
able to manipulate pages and put new

00:14:42,270 --> 00:14:48,420
modules onto pages as they were used to

00:14:44,339 --> 00:14:50,790
doing before also because the new nerf

00:14:48,420 --> 00:14:52,770
architecture was already live we needed

00:14:50,790 --> 00:14:54,990
to be able to accommodate and be

00:14:52,770 --> 00:14:57,300
compatible with that architecture which

00:14:54,990 --> 00:14:59,339
was actually helped in some regard by

00:14:57,300 --> 00:15:01,440
the fact that they had adopted several

00:14:59,339 --> 00:15:03,470
of the concepts from the original DNA

00:15:01,440 --> 00:15:07,290
platform so they already had those

00:15:03,470 --> 00:15:11,459
abstracted ideas of variants and module

00:15:07,290 --> 00:15:13,470
configurations and also we needed to be

00:15:11,459 --> 00:15:16,649
able to support rights to an external

00:15:13,470 --> 00:15:18,870
data store for performance reasons the

00:15:16,649 --> 00:15:23,040
nerf system didn't want to be querying

00:15:18,870 --> 00:15:24,720
drupal's api's directly and one of our

00:15:23,040 --> 00:15:27,120
overarching goals was to minimize the

00:15:24,720 --> 00:15:29,820
amount of custom code that we would have

00:15:27,120 --> 00:15:34,830
to write and to utilize opens

00:15:29,820 --> 00:15:36,570
tools wherever possible so let's talk a

00:15:34,830 --> 00:15:39,540
little bit about how we approach this we

00:15:36,570 --> 00:15:40,860
knew we had pretty consistent data

00:15:39,540 --> 00:15:43,560
models that we could turn page

00:15:40,860 --> 00:15:45,810
configurations into so Drupal 8 seemed

00:15:43,560 --> 00:15:48,029
like a very good fit for this and we

00:15:45,810 --> 00:15:49,410
were excited to get to experiment with

00:15:48,029 --> 00:15:52,080
some of the new tools that were being

00:15:49,410 --> 00:15:56,279
developed in Drupal 8 specifically

00:15:52,080 --> 00:15:59,640
around api's JSON API was pretty new on

00:15:56,279 --> 00:16:01,380
the scene at that point this was coming

00:15:59,640 --> 00:16:04,170
out of Drupal con Baltimore when we were

00:16:01,380 --> 00:16:06,959
really starting to build this and we

00:16:04,170 --> 00:16:09,750
were really excited to play around a

00:16:06,959 --> 00:16:13,170
little bit with JSON API we did run into

00:16:09,750 --> 00:16:15,570
some limitations with JSON API where it

00:16:13,170 --> 00:16:18,240
tends to be extremely verbose and

00:16:15,570 --> 00:16:20,310
provide all of your data in the api's

00:16:18,240 --> 00:16:22,860
and we actually wanted to limit that

00:16:20,310 --> 00:16:24,870
some so that only the data that the

00:16:22,860 --> 00:16:26,880
front-end rendering system needed would

00:16:24,870 --> 00:16:29,550
actually be provided to them and we also

00:16:26,880 --> 00:16:31,950
wanted to be able to remove some of the

00:16:29,550 --> 00:16:34,920
Drupal isms that are provided in JSON

00:16:31,950 --> 00:16:37,589
API is by default things like field

00:16:34,920 --> 00:16:39,450
underscore or whatever that is a very

00:16:37,589 --> 00:16:41,490
true 'pls Pacific term that we all

00:16:39,450 --> 00:16:44,339
recognize but the to a JavaScript

00:16:41,490 --> 00:16:45,900
developer is just extra noise and

00:16:44,339 --> 00:16:50,550
there's actually a story about how this

00:16:45,900 --> 00:16:53,640
was born how this all played out so in

00:16:50,550 --> 00:16:55,140
Baltimore Drupal con last year we had

00:16:53,640 --> 00:16:57,300
Matt and I had been talking about how

00:16:55,140 --> 00:17:01,110
this was an issue and things we want to

00:16:57,300 --> 00:17:03,839
do and ran into matteo on the exhibit

00:17:01,110 --> 00:17:05,610
show that the exhibit hall floor and

00:17:03,839 --> 00:17:06,780
stopped him and introduced myself and

00:17:05,610 --> 00:17:08,280
said hey we're really looking at your

00:17:06,780 --> 00:17:10,699
stuff this is really great we've got

00:17:08,280 --> 00:17:13,439
these ideas about how we might want to

00:17:10,699 --> 00:17:15,360
you know modify it a little bit for our

00:17:13,439 --> 00:17:18,630
purposes and maybe provide overrides

00:17:15,360 --> 00:17:20,040
because I think I've got something that

00:17:18,630 --> 00:17:21,630
does that give me

00:17:20,040 --> 00:17:23,939
to--after Drupal con and then lo and

00:17:21,630 --> 00:17:26,130
behold next week JSON API extras was

00:17:23,939 --> 00:17:29,510
released and you know it was it was a

00:17:26,130 --> 00:17:31,950
pretty awesome moment to be like oh good

00:17:29,510 --> 00:17:34,320
yeah actually I think he had a branch

00:17:31,950 --> 00:17:37,429
somewhere already in a repo that already

00:17:34,320 --> 00:17:39,260
did some of this that was pretty neat

00:17:37,429 --> 00:17:41,700
going a little further we also

00:17:39,260 --> 00:17:42,680
integrated with the open API and

00:17:41,700 --> 00:17:45,770
schemata

00:17:42,680 --> 00:17:48,920
modules for declaring out our data

00:17:45,770 --> 00:17:51,020
models as api's themselves and for

00:17:48,920 --> 00:17:53,090
authentication we use sam'l user auth

00:17:51,020 --> 00:17:56,000
which was pretty straightforward to

00:17:53,090 --> 00:17:58,670
implement as well so that's what was

00:17:56,000 --> 00:18:00,890
going on in the backend drupal side of

00:17:58,670 --> 00:18:03,350
this new page configuration system

00:18:00,890 --> 00:18:05,450
honestly not a whole lot it's a pretty

00:18:03,350 --> 00:18:08,510
bare-bones Drupal site in a lot of ways

00:18:05,450 --> 00:18:11,360
but it still leverages that core power

00:18:08,510 --> 00:18:13,910
of Drupal which is that data modeling

00:18:11,360 --> 00:18:17,360
capability and exposing those api's out

00:18:13,910 --> 00:18:20,690
oh and one more thing was the fly system

00:18:17,360 --> 00:18:23,030
s3 integration that's right which as I

00:18:20,690 --> 00:18:24,970
mentioned before for performance reasons

00:18:23,030 --> 00:18:31,220
we wanted to make sure that the final

00:18:24,970 --> 00:18:34,460
read-only API was pushed out to s3 so on

00:18:31,220 --> 00:18:36,110
the other end the actual decoupled

00:18:34,460 --> 00:18:38,840
administrative interface which you get a

00:18:36,110 --> 00:18:40,790
little sneak peek of there was rethought

00:18:38,840 --> 00:18:43,270
from the ground up as well and it was

00:18:40,790 --> 00:18:47,450
built as a nodejs an express application

00:18:43,270 --> 00:18:50,900
with react components using redux for

00:18:47,450 --> 00:18:53,090
for state management and this was really

00:18:50,900 --> 00:18:55,610
it gave us the ability to design

00:18:53,090 --> 00:18:58,430
completely outside of the kind of Drupal

00:18:55,610 --> 00:19:01,430
box that were used to and so we actually

00:18:58,430 --> 00:19:03,400
leveraged material design which provided

00:19:01,430 --> 00:19:08,960
this sort of familiar and intuitive

00:19:03,400 --> 00:19:10,190
layout to our product managers so we're

00:19:08,960 --> 00:19:13,810
gonna take we're going to take a little

00:19:10,190 --> 00:19:16,280
dive into how we broke this data up I

00:19:13,810 --> 00:19:17,840
apologize if as we go through this the

00:19:16,280 --> 00:19:19,760
slides I mean it's gonna be hard to read

00:19:17,840 --> 00:19:21,440
it's blobs of JSON but we're gonna do

00:19:19,760 --> 00:19:24,980
our best to describe like what these are

00:19:21,440 --> 00:19:27,800
and and what they do and you'll see kind

00:19:24,980 --> 00:19:30,650
of how we solve this problem from a data

00:19:27,800 --> 00:19:32,920
model point of view infrastructure wise

00:19:30,650 --> 00:19:38,360
as we've said json api and json api

00:19:32,920 --> 00:19:40,520
extras were key coming to agreements

00:19:38,360 --> 00:19:42,230
with the api team or with the front end

00:19:40,520 --> 00:19:47,090
team that we were going to use that API

00:19:42,230 --> 00:19:49,400
standard was like a really big win we

00:19:47,090 --> 00:19:50,600
normalized as much as we could there

00:19:49,400 --> 00:19:52,160
were still some places where I was like

00:19:50,600 --> 00:19:54,170
yeah well this could be this or it could

00:19:52,160 --> 00:19:56,179
be that or it could be something else so

00:19:54,170 --> 00:20:00,559
in those instances we actually went

00:19:56,179 --> 00:20:02,929
and leverage JSON be fields so we are

00:20:00,559 --> 00:20:07,279
just dealing in some cases with blobs of

00:20:02,929 --> 00:20:11,149
random JSON don't judge you weren't

00:20:07,279 --> 00:20:12,169
there so let's just get into him the

00:20:11,149 --> 00:20:16,460
first one this one's actually pretty

00:20:12,169 --> 00:20:20,059
simple this is the layout document it's

00:20:16,460 --> 00:20:22,549
really just a bunch of layout areas

00:20:20,059 --> 00:20:26,960
you've got some objects you've got IDs

00:20:22,549 --> 00:20:28,700
you got some names notice all it does is

00:20:26,960 --> 00:20:31,850
describe what a region is these are just

00:20:28,700 --> 00:20:34,249
buckets we have no idea how this is

00:20:31,850 --> 00:20:37,789
gonna get rendered we don't care what a

00:20:34,249 --> 00:20:39,529
header is we don't care what main is you

00:20:37,789 --> 00:20:41,809
could put something in there that's left

00:20:39,529 --> 00:20:45,529
rail in fact that is one that I had to

00:20:41,809 --> 00:20:47,990
edit out we have no knowledge about what

00:20:45,529 --> 00:20:50,179
the presentation layer is gonna do with

00:20:47,990 --> 00:20:53,330
these this just provides us with buckets

00:20:50,179 --> 00:20:55,340
so that when it does get rendered it'll

00:20:53,330 --> 00:20:58,159
be rendered in the right spot

00:20:55,340 --> 00:21:00,379
there are only three of these and they

00:20:58,159 --> 00:21:01,820
haven't really changed they I mean the

00:21:00,379 --> 00:21:03,080
next time they do a site redesign if

00:21:01,820 --> 00:21:08,450
we're still on this infrastructure we'll

00:21:03,080 --> 00:21:11,440
probably add another layout but so we

00:21:08,450 --> 00:21:13,759
don't have a UI for developing this you

00:21:11,440 --> 00:21:16,789
one thing that I keep coming back to you

00:21:13,759 --> 00:21:19,249
is that you know honestly a postman is a

00:21:16,789 --> 00:21:23,649
decoupled UI guys think about that for a

00:21:19,249 --> 00:21:25,730
second huh okay so or maybe don't sorry

00:21:23,649 --> 00:21:27,590
module definitions is actually one of

00:21:25,730 --> 00:21:31,490
the more interesting data types that we

00:21:27,590 --> 00:21:34,480
have I think because it does a lot so we

00:21:31,490 --> 00:21:36,619
showed you in the in the d7 world that

00:21:34,480 --> 00:21:39,350
we had these modules and they could

00:21:36,619 --> 00:21:41,059
prevent or present configuration to the

00:21:39,350 --> 00:21:44,990
user and that that was done with a

00:21:41,059 --> 00:21:46,669
subset of form API well it was nice that

00:21:44,990 --> 00:21:48,980
some of the developers had learned some

00:21:46,669 --> 00:21:52,279
form API but we really wanted to get to

00:21:48,980 --> 00:21:55,549
a standard so what these files are is a

00:21:52,279 --> 00:21:58,460
blob of JSON schema that defines the

00:21:55,549 --> 00:22:01,639
configuration fields that this module

00:21:58,460 --> 00:22:06,639
uses and the UI system the react

00:22:01,639 --> 00:22:09,980
moonracer UI interprets this to both

00:22:06,639 --> 00:22:12,500
present a user interface to the user

00:22:09,980 --> 00:22:14,090
and to figure out what that serialized

00:22:12,500 --> 00:22:16,820
data is gonna look like when it writes

00:22:14,090 --> 00:22:19,040
it back to the API so a module developer

00:22:16,820 --> 00:22:21,410
has to say okay my module does XY and Z

00:22:19,040 --> 00:22:23,330
I need these fields I'm gonna write a

00:22:21,410 --> 00:22:26,059
JSON schema document that defines those

00:22:23,330 --> 00:22:28,100
fields and then our UI system takes that

00:22:26,059 --> 00:22:29,840
and not only like says okay we're gonna

00:22:28,100 --> 00:22:32,510
make sure you've got those those fields

00:22:29,840 --> 00:22:36,590
for for consumption but interprets it

00:22:32,510 --> 00:22:41,690
and presents the user interface talking

00:22:36,590 --> 00:22:43,520
about the the actual config object that

00:22:41,690 --> 00:22:47,809
gets written that's called a module

00:22:43,520 --> 00:22:51,320
instance the nerve system had an idea of

00:22:47,809 --> 00:22:53,720
module reuse so our modules are reusable

00:22:51,320 --> 00:22:56,840
you can create them you can name them

00:22:53,720 --> 00:22:58,549
and you can put one module on a lot of

00:22:56,840 --> 00:23:01,280
different pages and they're caching is

00:22:58,549 --> 00:23:03,110
very smart so it just gets reused you

00:23:01,280 --> 00:23:05,120
can make that change in one module and

00:23:03,110 --> 00:23:08,960
it will get reflected in all of the

00:23:05,120 --> 00:23:11,240
pages where that module is used but

00:23:08,960 --> 00:23:13,280
we'll get into some of the some of the

00:23:11,240 --> 00:23:17,030
challenges around that maybe in a little

00:23:13,280 --> 00:23:18,710
bit again the data structures defined by

00:23:17,030 --> 00:23:21,620
that module definition document that you

00:23:18,710 --> 00:23:24,080
saw and our UI literally writes these in

00:23:21,620 --> 00:23:26,299
if they are creating a new one it posts

00:23:24,080 --> 00:23:28,100
it to our API if they are modifying an

00:23:26,299 --> 00:23:32,150
existing when it patches it to our API

00:23:28,100 --> 00:23:35,540
and then we get into the fun stuff so

00:23:32,150 --> 00:23:37,220
the page config is our big data model I

00:23:35,540 --> 00:23:39,559
suppose that really holds a lot of the

00:23:37,220 --> 00:23:41,270
meat of what's going on on a page but

00:23:39,559 --> 00:23:43,669
first and foremost it has just your

00:23:41,270 --> 00:23:46,790
basic metadata about a page the title

00:23:43,669 --> 00:23:49,160
and meta tags and things like that but

00:23:46,790 --> 00:23:51,890
then if you go a little further down you

00:23:49,160 --> 00:23:55,370
get into this real configuration object

00:23:51,890 --> 00:23:57,679
which is references to the layout and to

00:23:55,370 --> 00:24:00,200
the specific module instances that have

00:23:57,679 --> 00:24:03,020
been placed on that page and you'll

00:24:00,200 --> 00:24:06,919
notice here that these references are

00:24:03,020 --> 00:24:09,429
just uu IDs which is how JSON API entity

00:24:06,919 --> 00:24:12,290
references work by default in Drupal

00:24:09,429 --> 00:24:14,360
this was actually kind of a problem for

00:24:12,290 --> 00:24:17,299
us because we didn't want to have to

00:24:14,360 --> 00:24:19,670
just be making a request to a page

00:24:17,299 --> 00:24:22,370
config entity object and then

00:24:19,670 --> 00:24:24,290
go and make subsequent requests to all

00:24:22,370 --> 00:24:26,840
of the referenced entities that were

00:24:24,290 --> 00:24:29,750
related to it so we actually have one

00:24:26,840 --> 00:24:32,150
kind of additional data model that we

00:24:29,750 --> 00:24:35,090
call page composites in the Drupal site

00:24:32,150 --> 00:24:39,080
it's actually just still a page config

00:24:35,090 --> 00:24:41,720
but with some handy tooling that the

00:24:39,080 --> 00:24:44,570
json api module provides you can just

00:24:41,720 --> 00:24:46,760
append includes to the end of your

00:24:44,570 --> 00:24:48,320
request and it will automatically

00:24:46,760 --> 00:24:50,780
include the data for all of those

00:24:48,320 --> 00:24:53,630
reference entities so this composite

00:24:50,780 --> 00:24:56,270
really packages up every single piece of

00:24:53,630 --> 00:24:59,870
data that the Nerf stack needs to render

00:24:56,270 --> 00:25:01,960
a single page from configuration and so

00:24:59,870 --> 00:25:05,180
this is the document that we actually

00:25:01,960 --> 00:25:08,480
when we post it back to Drupal cron runs

00:25:05,180 --> 00:25:10,610
and it pushes it out to s3 and from s3

00:25:08,480 --> 00:25:13,100
is where that data is actually consumed

00:25:10,610 --> 00:25:18,680
button for rendering by the Nerf stack

00:25:13,100 --> 00:25:23,570
Oh Jimoh time all right bear with us

00:25:18,680 --> 00:25:26,750
let's see so this is the Nerf home page

00:25:23,570 --> 00:25:28,280
and we'll just show you it you know

00:25:26,750 --> 00:25:31,970
structurally there's some very similar

00:25:28,280 --> 00:25:33,740
ideas here you have groups of you know

00:25:31,970 --> 00:25:36,500
you have a region you can kind of make

00:25:33,740 --> 00:25:38,060
out and you see modules with you know

00:25:36,500 --> 00:25:38,690
probably some configuration in them

00:25:38,060 --> 00:25:40,070
under the hood

00:25:38,690 --> 00:25:42,890
we've got lazy loading gotta wait for

00:25:40,070 --> 00:25:45,200
that and you'll see that we've got this

00:25:42,890 --> 00:25:51,530
recommended block and we've got a photo

00:25:45,200 --> 00:25:54,500
gallery and you'll notice that what we

00:25:51,530 --> 00:25:56,510
can't do here is find a link to go click

00:25:54,500 --> 00:25:58,910
on moonracer so we have to go switch to

00:25:56,510 --> 00:26:02,030
another tab and load that and the user

00:25:58,910 --> 00:26:04,430
is presented with a list of pages it's

00:26:02,030 --> 00:26:08,120
pretty sizable so we give them a search

00:26:04,430 --> 00:26:11,030
capability find the homepage normal site

00:26:08,120 --> 00:26:13,040
mode and you kind of get this interface

00:26:11,030 --> 00:26:16,280
where the rubber meets the road and

00:26:13,040 --> 00:26:21,950
where pages get configured so I think in

00:26:16,280 --> 00:26:23,180
this case we're going to yeah we're

00:26:21,950 --> 00:26:25,550
gonna do the same sort of thing we're

00:26:23,180 --> 00:26:28,580
gonna we're gonna rejigger that

00:26:25,550 --> 00:26:30,830
recommended and that photos gallery so

00:26:28,580 --> 00:26:33,590
here on the far left you get all that

00:26:30,830 --> 00:26:39,280
page metadata so this is the page

00:26:33,590 --> 00:26:43,190
config' level information that is

00:26:39,280 --> 00:26:44,540
editable then you have another region in

00:26:43,190 --> 00:26:46,670
the center here that actually lists the

00:26:44,540 --> 00:26:49,130
regions that you can drop content into

00:26:46,670 --> 00:26:50,780
you can expand these and inside you'll

00:26:49,130 --> 00:26:53,570
see the modules that are in that region

00:26:50,780 --> 00:26:55,460
and we see recommended and we see the

00:26:53,570 --> 00:26:58,430
photo gallery we're going to click the

00:26:55,460 --> 00:27:02,120
photo gallery you see this is a rather

00:26:58,430 --> 00:27:04,120
complicated form all coming from JSON

00:27:02,120 --> 00:27:08,720
schema data interpreted by our front-end

00:27:04,120 --> 00:27:10,340
we modify the name you see you can note

00:27:08,720 --> 00:27:13,400
it's a little hard to see on the screen

00:27:10,340 --> 00:27:16,190
but the UI calls out that there is a

00:27:13,400 --> 00:27:18,140
change by highlighting the the module in

00:27:16,190 --> 00:27:22,300
yellow and we're gonna drag and drop a

00:27:18,140 --> 00:27:24,530
little bit rearrange those things and

00:27:22,300 --> 00:27:26,060
then we're gonna change the name of this

00:27:24,530 --> 00:27:30,220
one because we did that in the other

00:27:26,060 --> 00:27:31,970
demo so let's stay relatively consistent

00:27:30,220 --> 00:27:33,940
because we want to recommend that

00:27:31,970 --> 00:27:36,560
content to you we're gonna hit publish

00:27:33,940 --> 00:27:38,810
make sure you're sure that that's what's

00:27:36,560 --> 00:27:41,750
gonna happen and then in the background

00:27:38,810 --> 00:27:44,690
it posts those module instances and page

00:27:41,750 --> 00:27:47,840
configs or patches them to the drupal

00:27:44,690 --> 00:27:50,600
api cron runs and it pushes that page

00:27:47,840 --> 00:27:52,790
composite to s3 and you will see that

00:27:50,600 --> 00:27:57,230
there is a change on the decoupled page

00:27:52,790 --> 00:27:58,580
to reflect it those people that were in

00:27:57,230 --> 00:28:01,160
the decoupled summit you actually got a

00:27:58,580 --> 00:28:07,550
much more real-time party trick but you

00:28:01,160 --> 00:28:10,040
know this is higher pressure alright so

00:28:07,550 --> 00:28:11,870
before we dive into the challenges that

00:28:10,040 --> 00:28:14,720
we encountered along the way of building

00:28:11,870 --> 00:28:17,750
this though let's recap a little bit of

00:28:14,720 --> 00:28:18,350
what we gained from the introduction of

00:28:17,750 --> 00:28:22,820
moonracer

00:28:18,350 --> 00:28:25,160
so most importantly the editors regained

00:28:22,820 --> 00:28:27,770
their ability to have that full control

00:28:25,160 --> 00:28:29,170
over what is placed on a page and as we

00:28:27,770 --> 00:28:32,000
mentioned this was a really

00:28:29,170 --> 00:28:34,730
mission-critical need for these product

00:28:32,000 --> 00:28:38,240
managers especially during these code

00:28:34,730 --> 00:28:42,020
freeze weather events so that was huge

00:28:38,240 --> 00:28:44,240
also I think we would agree that that

00:28:42,020 --> 00:28:45,970
interface maybe there are ways to

00:28:44,240 --> 00:28:47,830
improve it but compared to

00:28:45,970 --> 00:28:50,650
Drupal seven panels back-end was

00:28:47,830 --> 00:28:52,810
providing us it's a lot easier for the

00:28:50,650 --> 00:28:55,180
product managers to navigate and very

00:28:52,810 --> 00:28:59,530
intuitively understand what they're

00:28:55,180 --> 00:29:01,840
doing as well so those were both huge

00:28:59,530 --> 00:29:03,730
wins with the system but now let's get

00:29:01,840 --> 00:29:05,230
into some of what we learned along the

00:29:03,730 --> 00:29:08,620
way real talk

00:29:05,230 --> 00:29:11,860
and the biggest thing is we were trying

00:29:08,620 --> 00:29:15,010
to in in many ways effectively replace

00:29:11,860 --> 00:29:17,350
panels module with a decoupled version

00:29:15,010 --> 00:29:20,620
of panels and you know we found out it's

00:29:17,350 --> 00:29:22,090
it's not panels it was way out of scope

00:29:20,620 --> 00:29:24,880
to try to recreate the full

00:29:22,090 --> 00:29:27,310
functionality of panels in this project

00:29:24,880 --> 00:29:29,440
so some of what we've lost from the

00:29:27,310 --> 00:29:31,930
original DNA capabilities was the

00:29:29,440 --> 00:29:34,990
ability to control routing from within

00:29:31,930 --> 00:29:37,060
this configuration system and that what

00:29:34,990 --> 00:29:40,750
that actually ends up meaning is that

00:29:37,060 --> 00:29:43,450
while editors can modify existing pages

00:29:40,750 --> 00:29:46,600
they had no ability to create a brand

00:29:43,450 --> 00:29:49,530
new page give it a URL and then drop

00:29:46,600 --> 00:29:52,090
modules on to it so that's one existing

00:29:49,530 --> 00:29:55,060
one continuing pain point I think

00:29:52,090 --> 00:29:58,900
they're also because this isn't panels

00:29:55,060 --> 00:30:01,480
there's still no real configurability of

00:29:58,900 --> 00:30:03,640
selection rules for these variants the

00:30:01,480 --> 00:30:07,210
variants exist in an abstracted state

00:30:03,640 --> 00:30:09,550
but if you want to change the weight of

00:30:07,210 --> 00:30:11,650
how one variant gets selected over

00:30:09,550 --> 00:30:15,270
another that's a code change that's no

00:30:11,650 --> 00:30:19,000
longer possible to a configuration alone

00:30:15,270 --> 00:30:21,640
and then there's also this kind of magic

00:30:19,000 --> 00:30:23,650
thing that we had to create that exists

00:30:21,640 --> 00:30:26,950
outside of our data models that Maps

00:30:23,650 --> 00:30:30,400
those existing variants that were

00:30:26,950 --> 00:30:33,010
already alive in the nerf stack to the

00:30:30,400 --> 00:30:34,720
UUID of the entity in Drupal that

00:30:33,010 --> 00:30:37,120
doesn't really follow the json api

00:30:34,720 --> 00:30:39,520
specification so it's kind of like this

00:30:37,120 --> 00:30:43,570
special snowflake data model that we

00:30:39,520 --> 00:30:46,420
were left with and again because this

00:30:43,570 --> 00:30:48,040
wasn't panels we had no many panel

00:30:46,420 --> 00:30:50,110
support so one of the things that

00:30:48,040 --> 00:30:53,440
product managers like to do in the DNA

00:30:50,110 --> 00:30:55,570
system was create groupings of angular

00:30:53,440 --> 00:30:57,280
modules that they could then reuse

00:30:55,570 --> 00:30:59,170
across pages and then if

00:30:57,280 --> 00:31:00,730
they wanted to make a change they could

00:30:59,170 --> 00:31:03,250
change it one place and it would be

00:31:00,730 --> 00:31:05,620
reflected everywhere because we don't

00:31:03,250 --> 00:31:08,230
have the notion of many panels anymore

00:31:05,620 --> 00:31:10,330
when that need arises what actually has

00:31:08,230 --> 00:31:13,300
to happen is we have to create a new

00:31:10,330 --> 00:31:15,100
component in the front end that is that

00:31:13,300 --> 00:31:17,380
collects those sub components and then

00:31:15,100 --> 00:31:19,750
expose that back to the administrative

00:31:17,380 --> 00:31:23,710
UI to give them that configurability in

00:31:19,750 --> 00:31:25,480
groups and that that leads directly into

00:31:23,710 --> 00:31:27,700
this bulk editing like there's a

00:31:25,480 --> 00:31:29,590
developer step that's required if they

00:31:27,700 --> 00:31:35,050
want to bulk edit groupings of

00:31:29,590 --> 00:31:36,910
components now all right so those of you

00:31:35,050 --> 00:31:38,770
that have worked in the decoupled space

00:31:36,910 --> 00:31:40,810
or have been thinking or talking about

00:31:38,770 --> 00:31:41,650
it you know the previews kind of I don't

00:31:40,810 --> 00:31:43,090
think it's an elephant in the room

00:31:41,650 --> 00:31:47,310
anymore because everybody really does

00:31:43,090 --> 00:31:49,840
know it's there and it's not that it's

00:31:47,310 --> 00:31:52,210
unsolvable but I think everyone can

00:31:49,840 --> 00:31:54,430
agree that it's inherently difficult if

00:31:52,210 --> 00:31:56,380
you're completely decoupled you no

00:31:54,430 --> 00:31:58,150
longer have that ability for Drupal to

00:31:56,380 --> 00:32:00,130
like you know window your page for you

00:31:58,150 --> 00:32:02,620
and have the user go yes that's exactly

00:32:00,130 --> 00:32:05,920
what I want without jumping through some

00:32:02,620 --> 00:32:08,440
additional hoops and and the biggest

00:32:05,920 --> 00:32:10,360
struggle with it to me is that it

00:32:08,440 --> 00:32:12,340
requires a lot of consensus building

00:32:10,360 --> 00:32:14,650
between all of your different systems

00:32:12,340 --> 00:32:18,100
and your different teams on how you want

00:32:14,650 --> 00:32:20,820
this to work you know there are a lot of

00:32:18,100 --> 00:32:23,350
different ways to solve this and where

00:32:20,820 --> 00:32:24,940
these are kind of ranked in in our order

00:32:23,350 --> 00:32:27,160
of preference and how we went with it so

00:32:24,940 --> 00:32:30,610
really you you establish a contract

00:32:27,160 --> 00:32:31,960
between these systems and you allow the

00:32:30,610 --> 00:32:35,110
front-end to be able to hand back

00:32:31,960 --> 00:32:40,030
preview to preview users without it

00:32:35,110 --> 00:32:42,960
going live without it poisoning your

00:32:40,030 --> 00:32:46,870
cache and we're doing that with with

00:32:42,960 --> 00:32:49,780
query strings and JavaScript web token

00:32:46,870 --> 00:32:50,890
to provide that security layer but you

00:32:49,780 --> 00:32:53,440
know there's some other ways that you

00:32:50,890 --> 00:32:56,860
could do this right I mean you could

00:32:53,440 --> 00:32:58,570
we're in reactor there's enough there's

00:32:56,860 --> 00:33:01,680
enough code commonality that we could

00:32:58,570 --> 00:33:05,590
wrap some of their code into our UI

00:33:01,680 --> 00:33:08,860
that's technically possible but that's

00:33:05,590 --> 00:33:10,490
really kind of ugly and then you could

00:33:08,860 --> 00:33:13,160
create like a separate front-end it's

00:33:10,490 --> 00:33:15,980
that all it does is create preview but

00:33:13,160 --> 00:33:19,760
that has like the burden of you know

00:33:15,980 --> 00:33:21,470
DevOps effort and you know maintenance

00:33:19,760 --> 00:33:24,770
costs I mean you've got to keep this

00:33:21,470 --> 00:33:28,700
container or whatever running to spit

00:33:24,770 --> 00:33:30,950
out these ad hoc instances so we're

00:33:28,700 --> 00:33:33,320
trying to err on the side of like use

00:33:30,950 --> 00:33:38,330
what already exists use what's there but

00:33:33,320 --> 00:33:42,050
I mean it's it's not it's not easy well

00:33:38,330 --> 00:33:44,270
just put it that way one other thing

00:33:42,050 --> 00:33:46,400
that we saw as a challenge coming out of

00:33:44,270 --> 00:33:50,390
this project was this whole concept of

00:33:46,400 --> 00:33:53,450
layouts so our constraint was to make

00:33:50,390 --> 00:33:56,510
our layouts be designed to be framework

00:33:53,450 --> 00:33:58,910
agnostic and kind of future proof and

00:33:56,510 --> 00:34:01,429
what that means is that as you saw our

00:33:58,910 --> 00:34:04,580
conception of layouts is a very simple

00:34:01,429 --> 00:34:07,880
notion of just buckets of regions that

00:34:04,580 --> 00:34:10,280
you put things into which has its

00:34:07,880 --> 00:34:12,320
advantages but one of the disadvantages

00:34:10,280 --> 00:34:14,780
of it I think when you have that sort of

00:34:12,320 --> 00:34:16,399
very abstracted data structure is data

00:34:14,780 --> 00:34:19,190
structure is that it leads to an

00:34:16,399 --> 00:34:22,090
abstracted interface so as you saw in

00:34:19,190 --> 00:34:24,980
the demo those regions there's no

00:34:22,090 --> 00:34:27,020
contextual way to understand what that

00:34:24,980 --> 00:34:29,179
actually represents or how it's going to

00:34:27,020 --> 00:34:30,919
look on the page until you actually

00:34:29,179 --> 00:34:33,169
generate a preview of that you don't

00:34:30,919 --> 00:34:36,320
know you have to make inferences based

00:34:33,169 --> 00:34:38,929
on the name alone effectively yeah so

00:34:36,320 --> 00:34:41,690
there's no visual cues there and as was

00:34:38,929 --> 00:34:44,990
mentioned a little earlier as well some

00:34:41,690 --> 00:34:47,659
modules that we create for the pages are

00:34:44,990 --> 00:34:50,270
only really applicable to specific

00:34:47,659 --> 00:34:53,149
regions but this was not something that

00:34:50,270 --> 00:34:54,889
we accommodated in our in our build so

00:34:53,149 --> 00:34:56,720
this is another step that product

00:34:54,889 --> 00:34:59,570
managers just have to understand and

00:34:56,720 --> 00:35:01,400
know which modules make sense where and

00:34:59,570 --> 00:35:03,740
that can sometimes lead to some trial

00:35:01,400 --> 00:35:05,690
and error of them putting things in the

00:35:03,740 --> 00:35:08,150
wrong place and having to preview it and

00:35:05,690 --> 00:35:10,760
not looking great when we could

00:35:08,150 --> 00:35:14,260
potentially make that something that's

00:35:10,760 --> 00:35:14,260
actually built into the system so

00:35:14,500 --> 00:35:19,570
ironically when developer experience was

00:35:17,150 --> 00:35:21,740
one of the key drivers to letting the

00:35:19,570 --> 00:35:23,510
JavaScript team do JavaScript and the

00:35:21,740 --> 00:35:26,630
Drupal team do Drupal

00:35:23,510 --> 00:35:30,860
we found that we still have a little bit

00:35:26,630 --> 00:35:34,790
of web team chocolate in CMS team peanut

00:35:30,860 --> 00:35:37,670
butter from time to time and we really

00:35:34,790 --> 00:35:38,600
tried we really really really tried we

00:35:37,670 --> 00:35:40,550
did we

00:35:38,600 --> 00:35:42,740
our original conception was we didn't

00:35:40,550 --> 00:35:45,440
want anybody but the CMS team to have to

00:35:42,740 --> 00:35:47,990
go back into the the drupal back-end we

00:35:45,440 --> 00:35:50,690
have found that that's at least in our

00:35:47,990 --> 00:35:53,630
initial build that's not exactly

00:35:50,690 --> 00:35:55,460
possible and some of that you can

00:35:53,630 --> 00:35:57,530
understand right like first of all we're

00:35:55,460 --> 00:36:00,410
telling these guys that that were

00:35:57,530 --> 00:36:02,660
creating modules and module

00:36:00,410 --> 00:36:04,220
configurations strictly in code that was

00:36:02,660 --> 00:36:06,620
going to be you know rendered

00:36:04,220 --> 00:36:08,900
procedurally that now they have to

00:36:06,620 --> 00:36:10,280
flatten it out and write some schema

00:36:08,900 --> 00:36:12,020
document that they didn't have to post

00:36:10,280 --> 00:36:13,310
to an external system and I think

00:36:12,020 --> 00:36:16,100
everybody would agree that's kind of

00:36:13,310 --> 00:36:17,540
like you know not cool to a certain

00:36:16,100 --> 00:36:21,080
level I mean I feel like that house you

00:36:17,540 --> 00:36:23,690
come on man why do I have to do this now

00:36:21,080 --> 00:36:29,570
so we understand but we tried to make

00:36:23,690 --> 00:36:33,470
that as painless as possible except how

00:36:29,570 --> 00:36:37,250
do you manage getting it from there i

00:36:33,470 --> 00:36:39,890
des and then there get repo into our

00:36:37,250 --> 00:36:44,300
code base and our database in a way that

00:36:39,890 --> 00:36:47,720
is manageable where it's not just the

00:36:44,300 --> 00:36:51,050
Wild West where you can keep a testing

00:36:47,720 --> 00:36:54,200
process and QA in the loop you know

00:36:51,050 --> 00:36:56,450
we've got an initial solution where that

00:36:54,200 --> 00:36:58,580
repository that they commit these things

00:36:56,450 --> 00:37:00,950
to you is a dependency of our Drupal

00:36:58,580 --> 00:37:02,960
build and then we've got Josh Drupal

00:37:00,950 --> 00:37:05,150
console commands that can read that into

00:37:02,960 --> 00:37:07,550
the database which works just fine and

00:37:05,150 --> 00:37:10,580
the process is actually straightforward

00:37:07,550 --> 00:37:15,080
except a they do still they kind of

00:37:10,580 --> 00:37:19,760
require us to do something and B it

00:37:15,080 --> 00:37:21,950
doesn't account for multiple module

00:37:19,760 --> 00:37:24,110
builds where developer a has a module

00:37:21,950 --> 00:37:27,200
that needs to go to production that was

00:37:24,110 --> 00:37:31,150
committed to the repo after module B

00:37:27,200 --> 00:37:35,140
which is not ready for production yet so

00:37:31,150 --> 00:37:37,370
sticky not unsolvable bit sticky and

00:37:35,140 --> 00:37:39,520
then we have built

00:37:37,370 --> 00:37:41,930
some things to make things easier for us

00:37:39,520 --> 00:37:44,510
and to make things easier for us when

00:37:41,930 --> 00:37:45,740
they ask us to do things but again

00:37:44,510 --> 00:37:47,650
there's that big problem if they're

00:37:45,740 --> 00:37:50,630
still having to ask us to do things like

00:37:47,650 --> 00:37:53,720
replicating page configs you know I want

00:37:50,630 --> 00:37:57,350
page config A to B I want a duplicate of

00:37:53,720 --> 00:38:00,620
it but it needs to be for a different

00:37:57,350 --> 00:38:02,510
language activating pages so that

00:38:00,620 --> 00:38:05,420
mapping file that's the special

00:38:02,510 --> 00:38:07,130
snowflake is based upon whether a page

00:38:05,420 --> 00:38:10,430
is considered active or not which is a

00:38:07,130 --> 00:38:12,470
boolean on the page config we typically

00:38:10,430 --> 00:38:14,630
do that which means that when they want

00:38:12,470 --> 00:38:17,600
to launch a new set of pages we ask them

00:38:14,630 --> 00:38:19,550
to include us in the process maybe not a

00:38:17,600 --> 00:38:20,960
bad thing but still I mean it's it's

00:38:19,550 --> 00:38:25,160
understandable it's it's a friction

00:38:20,960 --> 00:38:27,830
point and then we put a JSON B editor in

00:38:25,160 --> 00:38:31,190
our back-end so that we could you know

00:38:27,830 --> 00:38:33,020
if we needed to go and edit some JSON

00:38:31,190 --> 00:38:37,040
from time to time and it turns out like

00:38:33,020 --> 00:38:38,450
yeah maybe you can go make that change

00:38:37,040 --> 00:38:39,770
in the dev environment and test it

00:38:38,450 --> 00:38:42,080
instead of us going through the git

00:38:39,770 --> 00:38:43,700
repository thing so it's turning out

00:38:42,080 --> 00:38:46,940
that they are actually needing to

00:38:43,700 --> 00:38:50,870
interact with the Drupal side of things

00:38:46,940 --> 00:38:53,000
a little more than we anticipated so one

00:38:50,870 --> 00:38:55,310
more area of challenge and I would say

00:38:53,000 --> 00:38:57,050
this is not so much specific to the

00:38:55,310 --> 00:38:59,300
decoupled editorial but I think this is

00:38:57,050 --> 00:39:01,910
really a more general decoupling

00:38:59,300 --> 00:39:05,120
challenge is accommodating the designer

00:39:01,910 --> 00:39:06,980
experience so in this new nerf front end

00:39:05,120 --> 00:39:09,740
the the nerf system

00:39:06,980 --> 00:39:12,020
owns all the markup and styles and this

00:39:09,740 --> 00:39:14,900
kind of leaves designers in a in a

00:39:12,020 --> 00:39:16,760
delicate situation you know it's a big

00:39:14,900 --> 00:39:19,010
thing in the Drupal world component

00:39:16,760 --> 00:39:21,860
driven design and this concept of having

00:39:19,010 --> 00:39:24,410
like a living style guide the designers

00:39:21,860 --> 00:39:26,630
can have a system completely outside of

00:39:24,410 --> 00:39:28,510
front-end or back-end where they can see

00:39:26,630 --> 00:39:30,880
all of their components in isolation

00:39:28,510 --> 00:39:34,130
nothing like that exists in this system

00:39:30,880 --> 00:39:37,760
and it means that when a designer

00:39:34,130 --> 00:39:39,770
creates a new modular component they

00:39:37,760 --> 00:39:44,600
require a fair amount of developer time

00:39:39,770 --> 00:39:46,880
to integrate that into the codebase and

00:39:44,600 --> 00:39:50,210
then we have this process of moving from

00:39:46,880 --> 00:39:51,170
the JavaScript code into our flattened

00:39:50,210 --> 00:39:54,049
JSON API

00:39:51,170 --> 00:39:56,119
Figg and into the database you know it's

00:39:54,049 --> 00:39:58,970
it's its own problem and I thought it

00:39:56,119 --> 00:40:00,920
was gonna be one of the huge er more

00:39:58,970 --> 00:40:02,450
difficult to surmount problems but it

00:40:00,920 --> 00:40:04,640
turns out we had a developer on staff at

00:40:02,450 --> 00:40:06,500
the time on the front-end team named

00:40:04,640 --> 00:40:08,750
Joel cancel Meyer who just knocked it

00:40:06,500 --> 00:40:12,470
out of the park and wrote this generator

00:40:08,750 --> 00:40:15,849
that reads there reads their data access

00:40:12,470 --> 00:40:18,349
layer translates all into JSON API and

00:40:15,849 --> 00:40:20,839
posts it on into our system

00:40:18,349 --> 00:40:24,140
it was brilliant it was fantastic it was

00:40:20,839 --> 00:40:26,569
reproducible we could it wasn't all or

00:40:24,140 --> 00:40:28,490
nothing we could choose specific pages

00:40:26,569 --> 00:40:30,049
that we wanted to deal with which is how

00:40:28,490 --> 00:40:33,319
we decided to do it we were gonna phase

00:40:30,049 --> 00:40:35,359
we were gonna phase in moon racers so we

00:40:33,319 --> 00:40:37,790
were gonna take certain configurations

00:40:35,359 --> 00:40:41,119
and launch them earlier and then kind of

00:40:37,790 --> 00:40:43,130
go from config to config which is great

00:40:41,119 --> 00:40:46,849
it's a great tool that it can do that

00:40:43,130 --> 00:40:48,500
but what we found is that any of those

00:40:46,849 --> 00:40:50,780
pages that we haven't run into moonracer

00:40:48,500 --> 00:40:52,849
yet you know there's the potential that

00:40:50,780 --> 00:40:54,950
the web teams had to make some upstream

00:40:52,849 --> 00:40:57,049
changes that are going to require either

00:40:54,950 --> 00:40:59,059
additional work in the generator to

00:40:57,049 --> 00:41:00,470
serialize them properly or even

00:40:59,059 --> 00:41:02,960
additional work in moonracer to

00:41:00,470 --> 00:41:06,020
accommodate for that data I mean if you

00:41:02,960 --> 00:41:08,119
can imagine a situation where a module

00:41:06,020 --> 00:41:10,430
definition is changed or the generator

00:41:08,119 --> 00:41:13,640
decides that you know it interprets that

00:41:10,430 --> 00:41:15,260
there's a new field in a module but that

00:41:13,640 --> 00:41:16,970
field is not represented in that JSON

00:41:15,260 --> 00:41:19,130
schema document that means the UI

00:41:16,970 --> 00:41:21,049
doesn't know about it that means that

00:41:19,130 --> 00:41:22,970
they go into the UI and they don't see

00:41:21,049 --> 00:41:25,819
it so you can imagine there's there's a

00:41:22,970 --> 00:41:28,609
number of little pain points to not

00:41:25,819 --> 00:41:31,940
being completely in sync here but not

00:41:28,609 --> 00:41:34,640
insurmountable again but a challenge

00:41:31,940 --> 00:41:37,660
nonetheless and then the one that's

00:41:34,640 --> 00:41:40,819
maybe the more fun and more more

00:41:37,660 --> 00:41:44,960
frustrating at times being in the Drupal

00:41:40,819 --> 00:41:46,970
community is we did suffer and kind of

00:41:44,960 --> 00:41:50,390
probably are still suffering from early

00:41:46,970 --> 00:41:55,130
adopter syndrome a year ago in Baltimore

00:41:50,390 --> 00:41:58,069
we hadn't really laid down any serious

00:41:55,130 --> 00:42:00,650
code for this project outside of Matt's

00:41:58,069 --> 00:42:02,150
proof of concept and API first was

00:42:00,650 --> 00:42:04,250
getting a lot of momentum

00:42:02,150 --> 00:42:04,910
matéo was like building a lot of

00:42:04,250 --> 00:42:06,740
momentum on Jen

00:42:04,910 --> 00:42:10,670
an API like I said it was in Baltimore

00:42:06,740 --> 00:42:14,150
where I said hey we need that he's like

00:42:10,670 --> 00:42:16,580
yes Jason API extra is coming soon which

00:42:14,150 --> 00:42:18,200
is great and it was it was fantastic

00:42:16,580 --> 00:42:20,450
because we were actually able to like

00:42:18,200 --> 00:42:22,220
really pitch in and help in a community

00:42:20,450 --> 00:42:25,730
effort which is something that I'd

00:42:22,220 --> 00:42:28,780
recommend everybody try to do what has

00:42:25,730 --> 00:42:32,060
been the challenge though is you know

00:42:28,780 --> 00:42:33,440
literally this past week we finally

00:42:32,060 --> 00:42:35,930
bought ourselves up to date with the

00:42:33,440 --> 00:42:38,510
JSON API module and JSON API extras

00:42:35,930 --> 00:42:44,140
module I think we were four or five

00:42:38,510 --> 00:42:47,720
versions behind you know when you have a

00:42:44,140 --> 00:42:50,570
component that you rely on that has that

00:42:47,720 --> 00:42:53,150
much velocity behind it then you've got

00:42:50,570 --> 00:42:55,370
to keep up because you know there's talk

00:42:53,150 --> 00:42:57,050
about moving JSON API and Accord we want

00:42:55,370 --> 00:42:59,140
to be ready for that day in eight eight

00:42:57,050 --> 00:43:02,150
six or whenever it ends up happening

00:42:59,140 --> 00:43:04,460
which means that it's on us to to keep

00:43:02,150 --> 00:43:09,080
our code base current and really that's

00:43:04,460 --> 00:43:10,490
easy enough except for the QA and the

00:43:09,080 --> 00:43:13,100
regression testing that you have to do

00:43:10,490 --> 00:43:14,870
anytime a major change happens and

00:43:13,100 --> 00:43:17,330
anybody who's anybody who's been working

00:43:14,870 --> 00:43:19,640
in those modules know there's been some

00:43:17,330 --> 00:43:22,880
pretty major changes recently that you

00:43:19,640 --> 00:43:25,040
know you've had to work around so it's

00:43:22,880 --> 00:43:26,420
it's it's a good challenge to have it's

00:43:25,040 --> 00:43:28,940
good to know that we're staying

00:43:26,420 --> 00:43:33,110
up-to-date but again it was one that I

00:43:28,940 --> 00:43:36,320
will highlight all right so now we've

00:43:33,110 --> 00:43:38,690
shown you all of our challenges and kind

00:43:36,320 --> 00:43:40,730
of a look under the hood so now let's

00:43:38,690 --> 00:43:44,270
have a look forward at what's maybe

00:43:40,730 --> 00:43:46,280
coming next and first and foremost maybe

00:43:44,270 --> 00:43:50,270
we should circle back to that big

00:43:46,280 --> 00:43:52,310
question we asked at the beginning why

00:43:50,270 --> 00:43:54,350
on earth would you want to decouple you

00:43:52,310 --> 00:43:56,270
realize well even with all the

00:43:54,350 --> 00:43:58,670
challenges we faced we're still really

00:43:56,270 --> 00:44:01,400
excited about the potential of decoupled

00:43:58,670 --> 00:44:02,870
editorial interfaces because first and

00:44:01,400 --> 00:44:06,410
foremost it really gives you an

00:44:02,870 --> 00:44:09,260
opportunity to completely reimagine the

00:44:06,410 --> 00:44:12,500
user experience and what's possible with

00:44:09,260 --> 00:44:16,850
forms it allows you to make them much

00:44:12,500 --> 00:44:18,289
more intuitive and really that is so key

00:44:16,850 --> 00:44:19,849
to reducing those training

00:44:18,289 --> 00:44:22,910
cycles that you're needed when you bring

00:44:19,849 --> 00:44:26,029
on new editors new content managers if

00:44:22,910 --> 00:44:27,739
they can intuitively be able to do

00:44:26,029 --> 00:44:30,410
exactly what they need to do with an

00:44:27,739 --> 00:44:32,569
interface it creates so much less

00:44:30,410 --> 00:44:34,729
friction with training and it also

00:44:32,569 --> 00:44:37,999
creates these better visualizations of

00:44:34,729 --> 00:44:40,489
what can be complicated data models and

00:44:37,999 --> 00:44:43,179
and also importantly I think it lets

00:44:40,489 --> 00:44:46,249
developers work in the accustomed spaces

00:44:43,179 --> 00:44:48,859
so that JavaScript people can write

00:44:46,249 --> 00:44:52,849
JavaScript and that's one key that we

00:44:48,859 --> 00:44:54,799
always want to be accommodating so you

00:44:52,849 --> 00:44:56,209
know over the over the last year and a

00:44:54,799 --> 00:44:57,619
half probably close to two years Matt

00:44:56,209 --> 00:45:01,099
and I have been thinking a lot about

00:44:57,619 --> 00:45:03,769
this problem space so just thinking

00:45:01,099 --> 00:45:05,329
about what you know part of that answer

00:45:03,769 --> 00:45:07,880
of why do this is think of the

00:45:05,329 --> 00:45:09,439
possibilities so just a few that that

00:45:07,880 --> 00:45:13,160
I'd like to throw out there for people

00:45:09,439 --> 00:45:16,459
to think about you know if you could

00:45:13,160 --> 00:45:18,169
simplify your node edit screen that's

00:45:16,459 --> 00:45:22,400
fantastic you could make it more

00:45:18,169 --> 00:45:25,099
complicated anybody who's used like

00:45:22,400 --> 00:45:27,949
tried to implement a multi step or multi

00:45:25,099 --> 00:45:30,829
stage form in Drupal knows that it's not

00:45:27,949 --> 00:45:33,199
the greatest experience either for you

00:45:30,829 --> 00:45:36,019
as a developer or the users who have to

00:45:33,199 --> 00:45:37,819
use them so imagine being able to like

00:45:36,019 --> 00:45:40,789
break yourself out of that box and build

00:45:37,819 --> 00:45:44,900
something that that actually flows a

00:45:40,789 --> 00:45:48,079
user through a node entry that makes

00:45:44,900 --> 00:45:51,579
sense for that specific node and isn't

00:45:48,079 --> 00:45:54,259
just hey here's forms and fields right

00:45:51,579 --> 00:45:56,809
another one that I think that we have a

00:45:54,259 --> 00:45:59,959
specific use case for it weather that I

00:45:56,809 --> 00:46:03,049
hope to beat my head against for a while

00:45:59,959 --> 00:46:07,099
is you could have multiple interfaces

00:46:03,049 --> 00:46:10,099
for the same data type and the example

00:46:07,099 --> 00:46:11,929
that I can present is whether comm has

00:46:10,099 --> 00:46:14,029
articles which are which are pretty

00:46:11,929 --> 00:46:16,429
massive node edit forms with all of

00:46:14,029 --> 00:46:18,789
these bells and whistles our sister site

00:46:16,429 --> 00:46:20,959
Weather Underground wanted a blog and

00:46:18,789 --> 00:46:22,309
when I looked at the content that they

00:46:20,959 --> 00:46:24,169
want it on their blog I was like well

00:46:22,309 --> 00:46:25,999
it's an article why not just use an

00:46:24,169 --> 00:46:27,589
article and they said well because we

00:46:25,999 --> 00:46:28,880
don't need all that other stuff like a

00:46:27,589 --> 00:46:31,400
weld okay fair point

00:46:28,880 --> 00:46:32,000
there are ways we could have done that

00:46:31,400 --> 00:46:33,470
in Drupal

00:46:32,000 --> 00:46:35,990
we actually thought about doing it in

00:46:33,470 --> 00:46:38,390
Drupal and the that engineering team

00:46:35,990 --> 00:46:41,120
decided to do something else but imagine

00:46:38,390 --> 00:46:43,640
being able to just have one micro

00:46:41,120 --> 00:46:46,310
service that gives editor group a an

00:46:43,640 --> 00:46:48,680
interface and another micro service that

00:46:46,310 --> 00:46:51,800
gives editor Group B an interface that

00:46:48,680 --> 00:46:54,980
all populate the same data model that

00:46:51,800 --> 00:46:58,340
you then can search or or publish or

00:46:54,980 --> 00:47:02,420
syndicate properly I think that's a

00:46:58,340 --> 00:47:06,020
pretty huge categorization and workflow

00:47:02,420 --> 00:47:09,860
like I know that there's you know a lot

00:47:06,020 --> 00:47:12,880
of current work around a workflow

00:47:09,860 --> 00:47:15,500
initiative and having publishing steps

00:47:12,880 --> 00:47:17,660
all those publishing steps really need

00:47:15,500 --> 00:47:19,820
to be data wise is like a value on the

00:47:17,660 --> 00:47:22,700
field but you could represent those

00:47:19,820 --> 00:47:24,530
visually to your editorial team in so

00:47:22,700 --> 00:47:26,720
many interesting and cool ways that it's

00:47:24,530 --> 00:47:28,790
worth thinking about like well I could

00:47:26,720 --> 00:47:30,620
have you know all these different boxes

00:47:28,790 --> 00:47:32,810
and content flowing through the boxes

00:47:30,620 --> 00:47:34,070
and I could hover over it and get

00:47:32,810 --> 00:47:35,900
additional information about that

00:47:34,070 --> 00:47:37,790
content or I could assign it to this

00:47:35,900 --> 00:47:41,180
editor or I could assign it to this

00:47:37,790 --> 00:47:43,280
playlist that really you can do that

00:47:41,180 --> 00:47:47,780
without being fully decoupled I agree

00:47:43,280 --> 00:47:50,300
but you could make these things and it's

00:47:47,780 --> 00:47:52,700
really a matter of being API first like

00:47:50,300 --> 00:47:55,010
drupal's trying to trying to achieve

00:47:52,700 --> 00:47:58,160
that goal of being API first to allow

00:47:55,010 --> 00:48:00,230
for those experiences and then finally

00:47:58,160 --> 00:48:02,450
another one that I think that we've got

00:48:00,230 --> 00:48:04,670
a pretty good use case for is being able

00:48:02,450 --> 00:48:07,130
to build a form that assembles data from

00:48:04,670 --> 00:48:09,680
multiple data sources before committing

00:48:07,130 --> 00:48:12,470
it to your Drupal back-end so we had a

00:48:09,680 --> 00:48:15,200
use case where we you know we're part of

00:48:12,470 --> 00:48:17,770
IBM were part of specifically the Watson

00:48:15,200 --> 00:48:20,390
group and our team implemented the first

00:48:17,770 --> 00:48:22,010
the very first implementation of Watson

00:48:20,390 --> 00:48:25,430
at the weather company our team actually

00:48:22,010 --> 00:48:29,300
implemented it and it was it was to read

00:48:25,430 --> 00:48:31,960
the body of an article and populate

00:48:29,300 --> 00:48:34,820
Watson natural language processing tags

00:48:31,960 --> 00:48:37,520
so content categorization content

00:48:34,820 --> 00:48:40,460
tagging into the node well one of the

00:48:37,520 --> 00:48:41,810
problems becomes when do you do that do

00:48:40,460 --> 00:48:44,030
you do that on node safe

00:48:41,810 --> 00:48:45,080
well we save drafts do you do it on

00:48:44,030 --> 00:48:47,090
publish well

00:48:45,080 --> 00:48:48,860
we had this other piece that needed to

00:48:47,090 --> 00:48:50,960
read that so it kind of needed to exist

00:48:48,860 --> 00:48:52,820
before publish and you could get into

00:48:50,960 --> 00:48:57,320
some Ajax stuff but we found that the

00:48:52,820 --> 00:48:59,810
API was not the fastest API because we

00:48:57,320 --> 00:49:02,660
were using a dev version so but anyway

00:48:59,810 --> 00:49:04,940
think about the the possibility of being

00:49:02,660 --> 00:49:08,150
able to just populate data from other

00:49:04,940 --> 00:49:10,000
sources into your node edit form cleanly

00:49:08,150 --> 00:49:12,530
and easily without having to deal with

00:49:10,000 --> 00:49:14,720
Drupal at all and then just write that

00:49:12,530 --> 00:49:20,000
stuff into Drupal as necessary I think

00:49:14,720 --> 00:49:22,970
there's a ton of possibility there all

00:49:20,000 --> 00:49:24,770
right so just briefly we're gonna talk a

00:49:22,970 --> 00:49:26,750
little bit about what others are doing

00:49:24,770 --> 00:49:28,820
with the couple editorial because we do

00:49:26,750 --> 00:49:30,170
see this as a space where there's a lot

00:49:28,820 --> 00:49:34,330
of excitement and energy right now

00:49:30,170 --> 00:49:36,920
actually first and foremost the core

00:49:34,330 --> 00:49:39,650
JavaScript improvement initiative is in

00:49:36,920 --> 00:49:42,260
the process right now of building the

00:49:39,650 --> 00:49:44,810
entire administrative interface as a

00:49:42,260 --> 00:49:47,630
decoupled application and if you go to

00:49:44,810 --> 00:49:49,070
github.com slash j/s drupal right now

00:49:47,630 --> 00:49:51,590
you can check out what they're building

00:49:49,070 --> 00:49:53,990
and actually install an example app

00:49:51,590 --> 00:49:56,330
there's some question because it's still

00:49:53,990 --> 00:49:59,090
in the experimental phase around whether

00:49:56,330 --> 00:50:01,730
this will actually become an admin theme

00:49:59,090 --> 00:50:04,460
that's included with Drupal core or if

00:50:01,730 --> 00:50:07,340
it will be a composer dependency that

00:50:04,460 --> 00:50:08,420
just installs a standalone app but

00:50:07,340 --> 00:50:10,610
there's some really exciting things

00:50:08,420 --> 00:50:13,190
happening there that I think will inform

00:50:10,610 --> 00:50:15,920
a lot of the future of decoupled

00:50:13,190 --> 00:50:17,270
editorial as we think of it if you've

00:50:15,920 --> 00:50:19,790
been in the decoupled space for a while

00:50:17,270 --> 00:50:22,550
you've probably seen the card stack demo

00:50:19,790 --> 00:50:25,640
that Ed Faulkner debuted a few years ago

00:50:22,550 --> 00:50:28,520
at Drupal con New Orleans which was an

00:50:25,640 --> 00:50:30,500
inline editing experience that was

00:50:28,520 --> 00:50:35,390
actually an ember j/s app layered on top

00:50:30,500 --> 00:50:37,280
of a Drupal site very cool demo card

00:50:35,390 --> 00:50:40,220
stack has since become a blockchain

00:50:37,280 --> 00:50:41,710
project they put a blockchain on it so I

00:50:40,220 --> 00:50:45,800
don't know how much it has to do with

00:50:41,710 --> 00:50:48,290
decoupled Drupal today but interestingly

00:50:45,800 --> 00:50:51,020
in the decoupled summit yesterday we saw

00:50:48,290 --> 00:50:53,450
an awesome demo by the 1x internet team

00:50:51,020 --> 00:50:56,900
with a very similar inline editing

00:50:53,450 --> 00:50:58,530
experience that's actually using

00:50:56,900 --> 00:51:00,300
paragraphs that you can drag

00:50:58,530 --> 00:51:03,090
drop his widgets into a react

00:51:00,300 --> 00:51:06,030
application super cool and they're doing

00:51:03,090 --> 00:51:07,680
a Boff on Thursday at 10:45 so I'd

00:51:06,030 --> 00:51:10,560
encourage people to check that out as

00:51:07,680 --> 00:51:12,150
well all right so we're gonna wrap up

00:51:10,560 --> 00:51:13,830
we're gonna do this pretty quickly I

00:51:12,150 --> 00:51:16,380
know we're getting short on time but

00:51:13,830 --> 00:51:17,640
just some final thoughts really if

00:51:16,380 --> 00:51:21,630
you're talking about decoupled you is

00:51:17,640 --> 00:51:23,790
this is the key driver for what you're

00:51:21,630 --> 00:51:25,140
the decision you're trying to make is

00:51:23,790 --> 00:51:27,030
Drupal is out-of-the-box out-of-the-box

00:51:25,140 --> 00:51:31,890
experience good enough for you

00:51:27,030 --> 00:51:36,120
or do you need a tailor-made a UI for

00:51:31,890 --> 00:51:38,040
your users what that gives you if you

00:51:36,120 --> 00:51:40,380
make that decision for that bespoke

00:51:38,040 --> 00:51:42,210
experiences you can actually bring your

00:51:40,380 --> 00:51:45,630
editorial team or what the users of your

00:51:42,210 --> 00:51:48,630
of your back-end to the table to discuss

00:51:45,630 --> 00:51:51,690
what it is that they actually need and

00:51:48,630 --> 00:51:53,430
you can avoid maybe that awkward

00:51:51,690 --> 00:51:55,890
situation that we've probably all had

00:51:53,430 --> 00:51:59,160
where they say we want it to work like X

00:51:55,890 --> 00:52:03,000
and you respond with well Drupal doesn't

00:51:59,160 --> 00:52:05,400
really do that or work that way but if

00:52:03,000 --> 00:52:06,780
you do make that decision you know one

00:52:05,400 --> 00:52:09,030
of the biggest things that made our

00:52:06,780 --> 00:52:10,920
lives easier through this is is getting

00:52:09,030 --> 00:52:13,020
that API consensus getting everybody on

00:52:10,920 --> 00:52:15,360
the same page about what your data

00:52:13,020 --> 00:52:18,830
models actually look like how your API

00:52:15,360 --> 00:52:22,380
czar gonna work when possible please

00:52:18,830 --> 00:52:25,740
embrace shared standards the JavaScript

00:52:22,380 --> 00:52:27,420
world knows about JSON API they know

00:52:25,740 --> 00:52:29,340
about a lot of these things so when you

00:52:27,420 --> 00:52:31,440
say hey well we're gonna use JSON API

00:52:29,340 --> 00:52:34,230
likelihood is your friend team's gonna

00:52:31,440 --> 00:52:36,810
go hey great that's that's fantastic

00:52:34,230 --> 00:52:40,950
and then finally like really watch this

00:52:36,810 --> 00:52:42,960
space and not here but globally I think

00:52:40,950 --> 00:52:46,620
my prediction for next year at Drupal

00:52:42,960 --> 00:52:48,870
con there will be I think significantly

00:52:46,620 --> 00:52:51,270
more people who've been working in

00:52:48,870 --> 00:52:54,090
decoupled UI and will be demoing

00:52:51,270 --> 00:52:55,710
decoupled UI and be showing it off and

00:52:54,090 --> 00:52:57,960
having buffs and having sessions about

00:52:55,710 --> 00:53:00,900
it so if you're interested I don't think

00:52:57,960 --> 00:53:04,080
it's going away and and I can't wait to

00:53:00,900 --> 00:53:06,540
see what you all do with it alright so

00:53:04,080 --> 00:53:08,160
just before we finish up here I want to

00:53:06,540 --> 00:53:11,060
give a quick shout out to this

00:53:08,160 --> 00:53:13,340
conference that we created last year

00:53:11,060 --> 00:53:14,720
we are having another one this year d

00:53:13,340 --> 00:53:17,690
couple drupal days so if you're

00:53:14,720 --> 00:53:20,300
interested in this topic space we have

00:53:17,690 --> 00:53:22,820
an entire conference where all we do is

00:53:20,300 --> 00:53:25,160
talk about decoupled drupal tack-on

00:53:22,820 --> 00:53:26,600
decoupled drupal it's a lot of fun we're

00:53:25,160 --> 00:53:30,770
doing it again in New York City

00:53:26,600 --> 00:53:33,260
August 17th through 19th 2018 so follow

00:53:30,770 --> 00:53:35,920
us on decoupled days on Twitter if you'd

00:53:33,260 --> 00:53:39,290
like to get more information about that

00:53:35,920 --> 00:53:43,190
thanks so much thanks y'all we have five

00:53:39,290 --> 00:53:46,970
minutes thank you so much if anybody has

00:53:43,190 --> 00:53:48,590
any questions step on up and sir may I

00:53:46,970 --> 00:53:56,420
may I just compliment you on your

00:53:48,590 --> 00:54:02,410
predators Blanc President Roh fee I

00:53:56,420 --> 00:54:02,410
don't know oh look at that look at that

00:54:02,420 --> 00:54:06,130
[Laughter]

00:54:08,290 --> 00:54:14,600
I have one question and one shout-out to

00:54:12,080 --> 00:54:17,570
myself so I'm doing a thing on decoupled

00:54:14,600 --> 00:54:19,370
UI's end of tomorrow about a non Drupal

00:54:17,570 --> 00:54:21,680
decoupled UI which if you're interested

00:54:19,370 --> 00:54:24,950
I did want to ask you about the language

00:54:21,680 --> 00:54:28,430
you use so like the word that you you

00:54:24,950 --> 00:54:30,320
use like layout and module and fin did

00:54:28,430 --> 00:54:32,090
you did you find when working with the

00:54:30,320 --> 00:54:33,500
rest of project team that that helped or

00:54:32,090 --> 00:54:35,270
did it make things more confusing

00:54:33,500 --> 00:54:37,580
because you would have like oh that's a

00:54:35,270 --> 00:54:40,640
module well it's actually it's more

00:54:37,580 --> 00:54:43,270
confusing for us because because again

00:54:40,640 --> 00:54:45,230
they they took that ball and ran with it

00:54:43,270 --> 00:54:48,230
they were the ones who are like yeah we

00:54:45,230 --> 00:54:50,420
have layouts we have we have variants we

00:54:48,230 --> 00:54:55,160
have modules like oh yeah it's all this

00:54:50,420 --> 00:55:02,420
stuff that you got from d7 right so it

00:54:55,160 --> 00:55:04,010
was it was really no it is kind of funny

00:55:02,420 --> 00:55:05,720
that we're still calling them modules it

00:55:04,010 --> 00:55:08,150
yeah I think they could have called them

00:55:05,720 --> 00:55:09,860
like sugar plums and I would have been

00:55:08,150 --> 00:55:12,020
like okay great that's like okay great

00:55:09,860 --> 00:55:14,450
but the other components we all know

00:55:12,020 --> 00:55:17,720
their component every one I should just

00:55:14,450 --> 00:55:20,660
call them components good talk guys

00:55:17,720 --> 00:55:22,280
thank you hopefully next year Major

00:55:20,660 --> 00:55:24,270
League Soccer can contribute to this

00:55:22,280 --> 00:55:26,430
there you go

00:55:24,270 --> 00:55:29,880
I wanted some clarification did you

00:55:26,430 --> 00:55:32,940
decouple the entire editorial dashboard

00:55:29,880 --> 00:55:36,810
no no and yes I think that's a key thing

00:55:32,940 --> 00:55:39,230
in this cases is to focus you know first

00:55:36,810 --> 00:55:41,430
and foremost on those mission-critical

00:55:39,230 --> 00:55:43,440
interfaces where you really need to

00:55:41,430 --> 00:55:45,270
provide that extra capability to the

00:55:43,440 --> 00:55:47,700
editors to have that really intuitive

00:55:45,270 --> 00:55:49,590
experience because still by default

00:55:47,700 --> 00:55:52,050
every data model you define in Drupal

00:55:49,590 --> 00:55:54,180
you're gonna get a form automatically

00:55:52,050 --> 00:55:55,890
right so if that's good enough that's

00:55:54,180 --> 00:55:58,320
great you know you you really should

00:55:55,890 --> 00:56:00,390
consider it on a case-by-case for those

00:55:58,320 --> 00:56:04,320
mission-critical interfaces if you just

00:56:00,390 --> 00:56:11,460
have like a separate URL to go to for

00:56:04,320 --> 00:56:16,350
those that spoke experience yeah yeah

00:56:11,460 --> 00:56:18,450
thanks thank you thanks for the good

00:56:16,350 --> 00:56:21,600
presentation my question is on the micro

00:56:18,450 --> 00:56:24,000
services you talked about the different

00:56:21,600 --> 00:56:26,480
micro services at least you have micro

00:56:24,000 --> 00:56:29,640
services that had say their own

00:56:26,480 --> 00:56:32,280
databases to which they pushed wand and

00:56:29,640 --> 00:56:38,790
at some point you needed probably some

00:56:32,280 --> 00:56:41,490
of the data synchronized so your

00:56:38,790 --> 00:56:44,160
questions about data consistency I have

00:56:41,490 --> 00:56:50,580
nightmares about data consistency but

00:56:44,160 --> 00:56:52,950
not with this per se so that's one of

00:56:50,580 --> 00:56:56,550
the reasons why it's actually beneficial

00:56:52,950 --> 00:56:58,890
that with JSON API we can pass in those

00:56:56,550 --> 00:57:02,450
parameters that allow us to include

00:56:58,890 --> 00:57:04,620
additional data and flatten that

00:57:02,450 --> 00:57:05,870
basically it's three different entities

00:57:04,620 --> 00:57:07,770
or

00:57:05,870 --> 00:57:10,140
instances of three different instance

00:57:07,770 --> 00:57:12,870
entities a page config then a bunch of

00:57:10,140 --> 00:57:14,640
module configs and a layout and we can

00:57:12,870 --> 00:57:16,740
assemble all those in one flat document

00:57:14,640 --> 00:57:19,800
and push it out to s3 and basically

00:57:16,740 --> 00:57:21,780
that's all the front-end uses the way

00:57:19,800 --> 00:57:24,810
that that push works is effectively

00:57:21,780 --> 00:57:28,230
anytime one of those things changes

00:57:24,810 --> 00:57:30,090
weari push all the things that it that

00:57:28,230 --> 00:57:36,360
it has to deal with which in this case

00:57:30,090 --> 00:57:37,380
is not awful but there are other cases

00:57:36,360 --> 00:57:38,130
like when you start talking about

00:57:37,380 --> 00:57:40,979
content

00:57:38,130 --> 00:57:43,979
specifically where that can become a

00:57:40,979 --> 00:57:47,130
very sticky problem and yeah it's it's

00:57:43,979 --> 00:57:48,450
its own we didn't highlight it here

00:57:47,130 --> 00:57:51,299
because it's not a problem with this

00:57:48,450 --> 00:57:54,329
system per se but it is a problem it's

00:57:51,299 --> 00:57:57,180
it's or challenge oh yeah a challenge

00:57:54,329 --> 00:57:59,279
alright one more I think we're yeah we

00:57:57,180 --> 00:58:00,660
got a couple minutes um my question is

00:57:59,279 --> 00:58:03,210
actually a little bit related to that

00:58:00,660 --> 00:58:05,670
with s3 I was wondering if you could

00:58:03,210 --> 00:58:08,910
describe but what is going to s3 is that

00:58:05,670 --> 00:58:12,319
like a flat pre-rendered Jason response

00:58:08,910 --> 00:58:16,140
yep so it's the page composite document

00:58:12,319 --> 00:58:18,119
with the included module definitions so

00:58:16,140 --> 00:58:21,269
it's the same thing if you hit if you

00:58:18,119 --> 00:58:25,410
hit JSON API slash page config slash

00:58:21,269 --> 00:58:28,410
UUID you get the page config then you

00:58:25,410 --> 00:58:31,259
can pass in the include and you include

00:58:28,410 --> 00:58:33,900
the layout and the module instances and

00:58:31,259 --> 00:58:37,529
it will add the relationships and give

00:58:33,900 --> 00:58:40,499
you those render JSON objects as part of

00:58:37,529 --> 00:58:42,809
your document and all we do is we take

00:58:40,499 --> 00:58:44,969
what that would be and write it out to

00:58:42,809 --> 00:58:49,049
s3 as a flat file and is that a caching

00:58:44,969 --> 00:58:52,049
mechanism at that point yeah I mean so

00:58:49,049 --> 00:58:53,339
it was interesting I the web team were

00:58:52,049 --> 00:58:55,410
the ones who said can you just make it

00:58:53,339 --> 00:58:57,569
s3 because we really like reading from

00:58:55,410 --> 00:58:59,160
s3 and that means they don't have to

00:58:57,569 --> 00:59:02,940
make an HTTP request to your server

00:58:59,160 --> 00:59:04,979
that's right awesome no but that but I

00:59:02,940 --> 00:59:06,420
will say that is one additional thing

00:59:04,979 --> 00:59:08,759
that's sort of a challenge for me like I

00:59:06,420 --> 00:59:12,719
keep saying I want an instance of the

00:59:08,759 --> 00:59:15,390
front-end code that hits my server so

00:59:12,719 --> 00:59:17,759
that if I'd had that today I would have

00:59:15,390 --> 00:59:21,329
done that demo completely live and felt

00:59:17,759 --> 00:59:23,400
really good about it as it is I've got

00:59:21,329 --> 00:59:25,920
serviceworker to think about I've got

00:59:23,400 --> 00:59:27,989
I've got caching in front of s3 to think

00:59:25,920 --> 00:59:31,829
about I've got the Drupal cron run to

00:59:27,989 --> 00:59:38,309
think about so rather than sit there and

00:59:31,829 --> 00:59:39,660
try to burn 60 to 180 seconds right so

00:59:38,309 --> 00:59:42,299
you have to deal with that for your

00:59:39,660 --> 00:59:43,769
testing exactly and in our in our devs

00:59:42,299 --> 00:59:45,690
complain about to like why don't why I'm

00:59:43,769 --> 00:59:48,660
not seeing this like well it's cached

00:59:45,690 --> 00:59:50,219
you know it's cash yeah so awesome thank

00:59:48,660 --> 00:59:51,509
you very much for anything this is great

00:59:50,219 --> 00:59:52,580
thank you thanks everybody

00:59:51,509 --> 01:00:00,750
Thanks

00:59:52,580 --> 01:00:00,750
[Applause]

01:00:11,120 --> 01:00:14,239
[Music]

01:00:50,950 --> 01:00:57,540

YouTube URL: https://www.youtube.com/watch?v=zn04u3mAQ8o


