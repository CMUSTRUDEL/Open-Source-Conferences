Title: DrupalCon Nashville 2018: The Benefits of Continuous Integration
Publication date: 2018-04-11
Playlist: DrupalCon Nashville - April 2018
Description: 
	Modern development is complex, with lots of tools to turn the code we write into the code used by the userâ€™s browser. This can be as simple as minifying assets or as sophisticated as downloading dependencies and turning source code into production code.

In this session, we will look at the top benefits gained from adopting a Continuous Integration workflow to automate the build process, testing, and deployment. Whether you're a developer wondering why you should try Continuous Integration in the first place or a business owner wondering why you should let your team spend time on adopting a new process when the current one "just works" we'll have answers for you!
Captions: 
	00:00:11,780 --> 00:00:18,240
alright go ahead and get started

00:00:15,209 --> 00:00:20,310
said the slides are here here to talk

00:00:18,240 --> 00:00:23,220
about the benefits of continuous

00:00:20,310 --> 00:00:25,890
integration my name's Andrew Taylor a

00:00:23,220 --> 00:00:28,289
Taylor Emmy on github and Twitter so

00:00:25,890 --> 00:00:29,429
links those slides are on Twitter if you

00:00:28,289 --> 00:00:31,859
want to grab them there it's a lot

00:00:29,429 --> 00:00:34,050
easier than trying to type in this crazy

00:00:31,859 --> 00:00:37,260
Google shortener URL which are

00:00:34,050 --> 00:00:39,540
apparently going away now so andrew

00:00:37,260 --> 00:00:41,040
pantheon dot IO I'm gonna try and leave

00:00:39,540 --> 00:00:43,530
some time for questions at the end but

00:00:41,040 --> 00:00:48,449
if not shoot me an email or come find me

00:00:43,530 --> 00:00:50,730
at the booth later on so I want to start

00:00:48,449 --> 00:00:53,399
with just this high-level sort of what

00:00:50,730 --> 00:00:55,559
is continuous integration and maybe talk

00:00:53,399 --> 00:00:58,440
about some misconceptions and some

00:00:55,559 --> 00:01:01,320
things so continuous integration to me

00:00:58,440 --> 00:01:04,350
is really just thinking about what

00:01:01,320 --> 00:01:08,330
pieces of your workflow can you automate

00:01:04,350 --> 00:01:11,910
can you take from doing manually and

00:01:08,330 --> 00:01:13,710
bundle those into a lot of CI services

00:01:11,910 --> 00:01:16,410
live on the cloud you know they can run

00:01:13,710 --> 00:01:18,060
with every pull request or run once an

00:01:16,410 --> 00:01:20,670
hour or whatever you want to set that up

00:01:18,060 --> 00:01:22,649
but I like to take CI and not in that

00:01:20,670 --> 00:01:24,869
very narrow view where like I'm just

00:01:22,649 --> 00:01:27,149
going to install composer dependencies

00:01:24,869 --> 00:01:29,009
on every code pitch y-you can certainly

00:01:27,149 --> 00:01:30,780
do that we want to expand it and think

00:01:29,009 --> 00:01:33,599
about all the things in our workflow

00:01:30,780 --> 00:01:36,270
that we can automate so it's really

00:01:33,599 --> 00:01:38,459
about what sort of value are you going

00:01:36,270 --> 00:01:40,380
to get out of continuous integration so

00:01:38,459 --> 00:01:43,670
why would you want to do this and it's

00:01:40,380 --> 00:01:47,789
really taking a step back and looking at

00:01:43,670 --> 00:01:49,709
CI is a state of mind so going in and

00:01:47,789 --> 00:01:51,420
thinking about certain problems in

00:01:49,709 --> 00:01:53,369
different ways and taking a different

00:01:51,420 --> 00:01:56,280
perspective about what sorts of things

00:01:53,369 --> 00:01:58,349
are we doing now that we can automate

00:01:56,280 --> 00:02:00,810
and it doesn't have to be an immediate

00:01:58,349 --> 00:02:03,690
process this could be things where you

00:02:00,810 --> 00:02:06,149
are manually going in and clicking

00:02:03,690 --> 00:02:08,129
buttons and doing things on a command

00:02:06,149 --> 00:02:11,220
line or sorry doing things in a

00:02:08,129 --> 00:02:13,770
dashboard in a UI that now you're doing

00:02:11,220 --> 00:02:15,780
in the command line that could be the

00:02:13,770 --> 00:02:18,239
first step towards this path down

00:02:15,780 --> 00:02:20,099
continuous integration it's it's not

00:02:18,239 --> 00:02:21,959
taking this plunge into full automation

00:02:20,099 --> 00:02:24,540
immediately there's lots of small steps

00:02:21,959 --> 00:02:25,380
along the way so we just had a great

00:02:24,540 --> 00:02:27,840
talk

00:02:25,380 --> 00:02:29,610
on looking at you know code Snicket's

00:02:27,840 --> 00:02:33,360
sniffing in these sorts of static

00:02:29,610 --> 00:02:34,830
analysis things so here's you know PHP

00:02:33,360 --> 00:02:37,200
code snipper we kind of saw the live

00:02:34,830 --> 00:02:39,660
demo in the talk before is going to

00:02:37,200 --> 00:02:43,080
check your code for errors and then show

00:02:39,660 --> 00:02:46,470
you sort of what's wrong but if we zoom

00:02:43,080 --> 00:02:48,900
in at the bottom here it says that this

00:02:46,470 --> 00:02:52,260
complimentary tool to the code sniffer

00:02:48,900 --> 00:02:56,850
code beautifier can fix these two March

00:02:52,260 --> 00:02:59,850
things automatically okay so normally if

00:02:56,850 --> 00:03:02,640
we're using something like this we'll go

00:02:59,850 --> 00:03:05,190
in we could run this tool locally we get

00:03:02,640 --> 00:03:07,590
these notifications and before we push

00:03:05,190 --> 00:03:09,900
to github or wherever then we're gonna

00:03:07,590 --> 00:03:12,600
go in and say I need to fix these you

00:03:09,900 --> 00:03:14,880
know five things that are listed here I

00:03:12,600 --> 00:03:16,740
need to go fix these errors I can run

00:03:14,880 --> 00:03:18,930
the beautifier and it will fix two of

00:03:16,740 --> 00:03:21,810
them automatically but I need to clean

00:03:18,930 --> 00:03:24,240
up the other three what if instead of

00:03:21,810 --> 00:03:26,730
having to have a developer run this tool

00:03:24,240 --> 00:03:28,560
and check every commit you know we're

00:03:26,730 --> 00:03:31,140
busy we're doing things instead of

00:03:28,560 --> 00:03:32,670
making your team do this every time we

00:03:31,140 --> 00:03:34,680
can offload that and that's where

00:03:32,670 --> 00:03:37,440
continuous integration comes into play

00:03:34,680 --> 00:03:39,120
so it's automating this process maybe

00:03:37,440 --> 00:03:41,520
moving it to the clouds when you make

00:03:39,120 --> 00:03:43,740
that commit on github then we now have a

00:03:41,520 --> 00:03:46,380
script that's going to run run these

00:03:43,740 --> 00:03:48,090
checks and we can mark the pull request

00:03:46,380 --> 00:03:51,810
and say you know thumbs up thumbs down

00:03:48,090 --> 00:03:54,180
if this has these errors or not but we

00:03:51,810 --> 00:03:56,310
could go a step further so looking at it

00:03:54,180 --> 00:03:58,110
can automatically fix two things so what

00:03:56,310 --> 00:04:00,450
if not only did it tell us that these

00:03:58,110 --> 00:04:02,250
are wrong but then we ran the beautifier

00:04:00,450 --> 00:04:03,960
and it fixed the two items that this

00:04:02,250 --> 00:04:06,780
tool can already fix automatically

00:04:03,960 --> 00:04:08,970
that's you know two less items that we

00:04:06,780 --> 00:04:10,440
have to go in and fix ourselves right

00:04:08,970 --> 00:04:12,690
it's taking these things that are

00:04:10,440 --> 00:04:15,270
repetitive tasks that we might be doing

00:04:12,690 --> 00:04:16,920
in part of our daily process or if

00:04:15,270 --> 00:04:18,330
you're not on the technical side if

00:04:16,920 --> 00:04:19,880
you're on the business side maybe this

00:04:18,330 --> 00:04:22,260
is something that your team is doing

00:04:19,880 --> 00:04:25,110
finding where those pain points are

00:04:22,260 --> 00:04:27,630
those kind of repetitive tasks and

00:04:25,110 --> 00:04:29,970
offloading those so it's like what

00:04:27,630 --> 00:04:32,160
happens after a code change what happens

00:04:29,970 --> 00:04:34,080
after commit what are all of these

00:04:32,160 --> 00:04:36,030
things and so it's keeping that state of

00:04:34,080 --> 00:04:38,000
mind and approaching

00:04:36,030 --> 00:04:40,950
yes because we want our developers to

00:04:38,000 --> 00:04:44,130
take their brainpower and do critical

00:04:40,950 --> 00:04:46,830
tasks and and do deeper thinking and not

00:04:44,130 --> 00:04:50,370
do these redundant tasks right compiling

00:04:46,830 --> 00:04:53,340
CSS into a minified thing it might be a

00:04:50,370 --> 00:04:55,380
quick easy step I'm just gonna open my

00:04:53,340 --> 00:04:57,750
terminal and run this command or I'm

00:04:55,380 --> 00:04:59,610
gonna have some application open that's

00:04:57,750 --> 00:05:01,740
gonna do it for me it might seem like a

00:04:59,610 --> 00:05:03,090
trivial thing but we only have so much

00:05:01,740 --> 00:05:05,130
brain power in the day so if you're

00:05:03,090 --> 00:05:06,990
sitting there spending it on I have to

00:05:05,130 --> 00:05:08,940
remember to do these 10 things after

00:05:06,990 --> 00:05:11,370
every code change or I have to remember

00:05:08,940 --> 00:05:13,470
to do this before every commit or every

00:05:11,370 --> 00:05:15,720
deploy all those sorts of things add up

00:05:13,470 --> 00:05:17,580
so it's really taking that stuff that

00:05:15,720 --> 00:05:22,050
we're doing and unburdening ourselves

00:05:17,580 --> 00:05:24,330
and automating that process so some

00:05:22,050 --> 00:05:26,550
items that you can use with CI we can

00:05:24,330 --> 00:05:30,419
install dependencies Drupal 8 is very

00:05:26,550 --> 00:05:32,610
composer heavy I use composer elsewhere

00:05:30,419 --> 00:05:34,350
but not with Drupal and then I went to

00:05:32,610 --> 00:05:37,440
install address module and it was like

00:05:34,350 --> 00:05:39,630
you can't write I can't just go in and

00:05:37,440 --> 00:05:42,740
used Russian install it you have to do

00:05:39,630 --> 00:05:45,090
some of these things with composer and

00:05:42,740 --> 00:05:47,940
that might be alright for a more

00:05:45,090 --> 00:05:50,040
experienced person but what happens if

00:05:47,940 --> 00:05:51,660
you're onboarding a junior developer

00:05:50,040 --> 00:05:53,010
who's never touched composer what

00:05:51,660 --> 00:05:54,450
happens if someone's out sick and you

00:05:53,010 --> 00:05:56,550
got to pull somebody else into this

00:05:54,450 --> 00:05:59,790
project and they're not experienced with

00:05:56,550 --> 00:06:01,530
these tools rather than having this big

00:05:59,790 --> 00:06:03,570
burden for them to overcome in this

00:06:01,530 --> 00:06:05,190
giant learning curve just to get into

00:06:03,570 --> 00:06:06,870
your workflow if you have these steps

00:06:05,190 --> 00:06:09,419
automated and all they have to do is

00:06:06,870 --> 00:06:11,100
update their code and push and this next

00:06:09,419 --> 00:06:13,290
step is going to happen automatically

00:06:11,100 --> 00:06:14,700
that's one less thing for you to worry

00:06:13,290 --> 00:06:16,320
about that you know how to do it but

00:06:14,700 --> 00:06:18,479
it's one less thing for everybody else

00:06:16,320 --> 00:06:20,700
to worry about and it takes that barrier

00:06:18,479 --> 00:06:22,800
to entry from getting involved in your

00:06:20,700 --> 00:06:26,040
projects and lowers that so that other

00:06:22,800 --> 00:06:29,250
people can get involved we can also

00:06:26,040 --> 00:06:31,830
build source files so compiling CSS

00:06:29,250 --> 00:06:34,650
minifying assets maybe you're working

00:06:31,830 --> 00:06:37,470
with reactor things like that you want

00:06:34,650 --> 00:06:40,620
to take your JSX and you know you need

00:06:37,470 --> 00:06:42,330
to run babel and all those things and

00:06:40,620 --> 00:06:45,090
things that aren't code related

00:06:42,330 --> 00:06:47,729
necessarily like deployments so maybe I

00:06:45,090 --> 00:06:48,200
have this nice process where my composer

00:06:47,729 --> 00:06:50,890
depends

00:06:48,200 --> 00:06:52,790
these get installed all of my assets get

00:06:50,890 --> 00:06:55,070
minified all that's happening

00:06:52,790 --> 00:06:57,980
automatically but I still have to open a

00:06:55,070 --> 00:06:59,630
ticket for IT to spin up a server or I

00:06:57,980 --> 00:07:01,220
still have to go in and log into my

00:06:59,630 --> 00:07:03,260
hosting provider and click some buttons

00:07:01,220 --> 00:07:05,720
and wait a few minutes for a new

00:07:03,260 --> 00:07:08,390
environment to be provisioned and then

00:07:05,720 --> 00:07:10,310
FTP my code up right these are the sorts

00:07:08,390 --> 00:07:12,890
of things that we can take this entire

00:07:10,310 --> 00:07:14,240
pipeline and automate it and so it's

00:07:12,890 --> 00:07:16,520
keeping that state of mind to think

00:07:14,240 --> 00:07:21,800
about what are areas in your workflow

00:07:16,520 --> 00:07:23,660
that you can offload communication a lot

00:07:21,800 --> 00:07:25,640
of the tools we use and so not just

00:07:23,660 --> 00:07:29,120
thinking about your development workflow

00:07:25,640 --> 00:07:32,120
but think about other folks on the team

00:07:29,120 --> 00:07:34,580
some things you might be doing so if you

00:07:32,120 --> 00:07:36,920
have project managers that need to know

00:07:34,580 --> 00:07:40,010
when your developers have shipped code

00:07:36,920 --> 00:07:41,960
if you primarily communicate in slack

00:07:40,010 --> 00:07:45,080
well guess what slack has an API

00:07:41,960 --> 00:07:47,330
every time you deploy code you can go in

00:07:45,080 --> 00:07:49,850
and call the slack API and just have a

00:07:47,330 --> 00:07:53,180
running channel for every project I've

00:07:49,850 --> 00:07:55,610
actually seen this be done in a really

00:07:53,180 --> 00:07:58,160
really efficient way where every time

00:07:55,610 --> 00:08:01,850
code was pushed to the production server

00:07:58,160 --> 00:08:03,590
we looked at the git commit logs the the

00:08:01,850 --> 00:08:05,690
messages that went along with that code

00:08:03,590 --> 00:08:07,790
parsed through it and if there's a JIRA

00:08:05,690 --> 00:08:09,410
ticket number call back to the JIRA API

00:08:07,790 --> 00:08:11,330
and close the ticket because it's now in

00:08:09,410 --> 00:08:13,610
production right so that's something

00:08:11,330 --> 00:08:16,040
that your project managers don't have to

00:08:13,610 --> 00:08:17,660
go hunt down developers and ask them hey

00:08:16,040 --> 00:08:19,700
did you ship this thing is this done can

00:08:17,660 --> 00:08:20,930
I close it it's already done and the

00:08:19,700 --> 00:08:22,880
developers don't have to worry about oh

00:08:20,930 --> 00:08:24,350
I have to log in here because they've

00:08:22,880 --> 00:08:25,520
shipped this and I already moving on to

00:08:24,350 --> 00:08:27,350
the next hash they don't have this

00:08:25,520 --> 00:08:29,510
additional overhead of all the things I

00:08:27,350 --> 00:08:31,400
have to do after I ship the code right

00:08:29,510 --> 00:08:33,050
so it can help everybody on the team

00:08:31,400 --> 00:08:35,540
this isn't just for developers this is

00:08:33,050 --> 00:08:37,640
really about taking those items that are

00:08:35,540 --> 00:08:39,020
weighing down your team and unloading

00:08:37,640 --> 00:08:44,360
them so they can be more productive with

00:08:39,020 --> 00:08:46,640
their time testing in QA is right along

00:08:44,360 --> 00:08:48,770
that process so we looked at kind of the

00:08:46,640 --> 00:08:50,570
code sniffing but there's all sorts of

00:08:48,770 --> 00:08:53,600
tools and we'll take a look at you can

00:08:50,570 --> 00:08:55,280
do B hat testing so if we have a contact

00:08:53,600 --> 00:08:57,860
form or a donation form or those

00:08:55,280 --> 00:08:59,870
business-critical parts of our site and

00:08:57,860 --> 00:09:00,889
let's run a test and make sure that

00:08:59,870 --> 00:09:04,220
every code change

00:09:00,889 --> 00:09:06,259
we introduce is going to not break these

00:09:04,220 --> 00:09:08,920
items and that might be QA that people

00:09:06,259 --> 00:09:11,089
are doing manually that's a giant pain

00:09:08,920 --> 00:09:13,189
what if we have to go in and change

00:09:11,089 --> 00:09:15,230
configuration because we want to test a

00:09:13,189 --> 00:09:17,449
shopping cart and if we have our live

00:09:15,230 --> 00:09:19,699
stripe info in there and people make

00:09:17,449 --> 00:09:21,410
mistakes might not forget to change that

00:09:19,699 --> 00:09:23,239
configuration before you test something

00:09:21,410 --> 00:09:26,509
now we've actually done some actual

00:09:23,239 --> 00:09:28,699
billing or created a real order when you

00:09:26,509 --> 00:09:30,529
take advantage of continuous integration

00:09:28,699 --> 00:09:33,410
you can offload this the cloud and you

00:09:30,529 --> 00:09:35,269
can automate those steps so that we can

00:09:33,410 --> 00:09:37,369
go in and say okay let's import dummy

00:09:35,269 --> 00:09:40,519
config and then test this and then put

00:09:37,369 --> 00:09:42,350
our old config back right so that

00:09:40,519 --> 00:09:45,379
configuration import right in there

00:09:42,350 --> 00:09:47,509
along with that and so raise of hands

00:09:45,379 --> 00:09:49,489
has anyone forgotten to run update dot

00:09:47,509 --> 00:09:52,970
PHP after you do an appointment like

00:09:49,489 --> 00:09:55,309
ever right that that's the thing we're

00:09:52,970 --> 00:09:58,399
all human we're not perfect and so when

00:09:55,309 --> 00:10:00,470
you have this big list it's just going

00:09:58,399 --> 00:10:01,939
in and taking those items so you don't

00:10:00,470 --> 00:10:05,239
have to think about it and making sure

00:10:01,939 --> 00:10:06,949
it happens every time and I like to tell

00:10:05,239 --> 00:10:08,600
people that you know this isn't you're

00:10:06,949 --> 00:10:11,480
not gonna go from zero to full

00:10:08,600 --> 00:10:13,429
automation this is a process and a nice

00:10:11,480 --> 00:10:15,799
way to start with this process is I bet

00:10:13,429 --> 00:10:17,480
a lot of people in the room have some

00:10:15,799 --> 00:10:19,189
documentation or even if it's just in

00:10:17,480 --> 00:10:21,519
your head some idea of the things you

00:10:19,189 --> 00:10:24,079
need to do start with writing them down

00:10:21,519 --> 00:10:26,269
find the most painful one and it can be

00:10:24,079 --> 00:10:28,819
something as small as pinging update dot

00:10:26,269 --> 00:10:31,220
PHP after every deploy and automate that

00:10:28,819 --> 00:10:34,100
one thing and that starts you down this

00:10:31,220 --> 00:10:35,869
path right and that's something that the

00:10:34,100 --> 00:10:38,209
continuous integration can help with

00:10:35,869 --> 00:10:41,389
because it can you know these services

00:10:38,209 --> 00:10:43,369
I'm gonna show Circle CI there's Jenkins

00:10:41,389 --> 00:10:45,949
and Travis and all these pick what

00:10:43,369 --> 00:10:47,989
everyone's best for you it could even be

00:10:45,949 --> 00:10:49,819
a deployment script you write and you

00:10:47,989 --> 00:10:52,759
share with everyone on your team so that

00:10:49,819 --> 00:10:54,829
every deployment it you know SSH is in

00:10:52,759 --> 00:10:57,319
does the deployment runs update like all

00:10:54,829 --> 00:10:59,209
these steps so CI doesn't have to

00:10:57,319 --> 00:11:01,699
necessarily be moving things in the

00:10:59,209 --> 00:11:03,739
cloud in this grand fashion it can be

00:11:01,699 --> 00:11:07,279
something as simple as writing down your

00:11:03,739 --> 00:11:09,739
steps and automating one piece if you do

00:11:07,279 --> 00:11:11,329
want to go for the the big shebang and

00:11:09,739 --> 00:11:14,260
move everything to the cloud this is

00:11:11,329 --> 00:11:16,180
kind of the process that I've tuned that

00:11:14,260 --> 00:11:20,500
works well for me and a lot of the

00:11:16,180 --> 00:11:22,720
agencies I've worked with so we have

00:11:20,500 --> 00:11:24,100
some version control system this is

00:11:22,720 --> 00:11:26,200
where our custom code lives especially

00:11:24,100 --> 00:11:28,960
with Drupal 8 and composer so we have

00:11:26,200 --> 00:11:32,290
our composer JSON and all of our vendor

00:11:28,960 --> 00:11:34,690
is not in this repository Drupal core is

00:11:32,290 --> 00:11:35,980
not there all the contributing we're

00:11:34,690 --> 00:11:38,260
pulling in the only thing that's there

00:11:35,980 --> 00:11:40,180
is our custom code so maybe some modules

00:11:38,260 --> 00:11:42,790
we've written some theming things like

00:11:40,180 --> 00:11:45,310
that every time you make a code change

00:11:42,790 --> 00:11:47,920
then our continuous integration server

00:11:45,310 --> 00:11:50,320
chimes in it downloads all the

00:11:47,920 --> 00:11:52,900
dependencies that compiled CSS turns

00:11:50,320 --> 00:11:55,150
that into production code and then spins

00:11:52,900 --> 00:11:57,610
up an environment and ships that code

00:11:55,150 --> 00:12:00,700
and once it's deployed out then it can

00:11:57,610 --> 00:12:02,500
go in the CI server can pick back up and

00:12:00,700 --> 00:12:05,320
it can run some of those testing right

00:12:02,500 --> 00:12:07,480
we can go in and make sure even before

00:12:05,320 --> 00:12:09,130
our staging environments spun up we

00:12:07,480 --> 00:12:11,800
could have run this code testing and and

00:12:09,130 --> 00:12:13,900
stop the process that far if our code

00:12:11,800 --> 00:12:15,400
tests they'll pass we could do the

00:12:13,900 --> 00:12:18,040
automated testing we talked about like

00:12:15,400 --> 00:12:20,800
testing contact forms or donation forms

00:12:18,040 --> 00:12:22,860
or whatever reporting and analytics so

00:12:20,800 --> 00:12:25,450
this was like going back in and

00:12:22,860 --> 00:12:27,340
notifying slackers year of what's going

00:12:25,450 --> 00:12:30,460
on so kind of taking your entire

00:12:27,340 --> 00:12:32,320
workflow and offloading it and so that's

00:12:30,460 --> 00:12:35,350
kind of what a complete picture looks

00:12:32,320 --> 00:12:38,020
like but there's a lots of little steps

00:12:35,350 --> 00:12:39,610
along the way and now I want to dive

00:12:38,020 --> 00:12:41,320
into kind of what the title of the talk

00:12:39,610 --> 00:12:43,570
was the benefits so these are things

00:12:41,320 --> 00:12:45,970
that I've seen working with agencies

00:12:43,570 --> 00:12:47,410
adopting automation and adopting

00:12:45,970 --> 00:12:49,210
automation myself some of the things

00:12:47,410 --> 00:12:51,220
that come out of this so you get that

00:12:49,210 --> 00:12:53,530
consistency forgetting to run update dot

00:12:51,220 --> 00:12:56,590
PHP is not a thing that happens when the

00:12:53,530 --> 00:12:59,770
robots do it every single time we get

00:12:56,590 --> 00:13:03,100
that nice consistency so here's just an

00:12:59,770 --> 00:13:04,900
example of a circle CI configuration

00:13:03,100 --> 00:13:07,150
file like I said there's tons of other

00:13:04,900 --> 00:13:09,490
tools out there but basically you just

00:13:07,150 --> 00:13:12,130
list out like I have a script to do you

00:13:09,490 --> 00:13:13,690
know building the site or deploying or

00:13:12,130 --> 00:13:16,240
testing or whatever you just list the

00:13:13,690 --> 00:13:19,960
order you can list dependencies so I can

00:13:16,240 --> 00:13:21,940
say in order to test my contact form the

00:13:19,960 --> 00:13:24,010
code needs to be deployed right that

00:13:21,940 --> 00:13:25,780
that's the first step that's a

00:13:24,010 --> 00:13:27,460
requirement and so you can set up these

00:13:25,780 --> 00:13:29,700
workflows this is what kind of that

00:13:27,460 --> 00:13:32,290
looks like visually within the interface

00:13:29,700 --> 00:13:33,100
and so every time I push code all of

00:13:32,290 --> 00:13:37,270
these steps happen

00:13:33,100 --> 00:13:40,750
and if we come in and look in here each

00:13:37,270 --> 00:13:42,760
of these has a timer and the total time

00:13:40,750 --> 00:13:44,740
is not that much this is like five

00:13:42,760 --> 00:13:46,870
minutes for the full run but if it was

00:13:44,740 --> 00:13:48,970
me doing it manually this would take

00:13:46,870 --> 00:13:50,890
about 15 minutes because I'd have to you

00:13:48,970 --> 00:13:52,990
like oh I need to open up my terminal

00:13:50,890 --> 00:13:54,490
and run this and fix these things and

00:13:52,990 --> 00:13:57,040
check for this and analyze the results

00:13:54,490 --> 00:13:58,930
and that's all something that is wasted

00:13:57,040 --> 00:14:02,440
time and brain power for me that I've

00:13:58,930 --> 00:14:04,840
now offloaded and this is what it looks

00:14:02,440 --> 00:14:07,060
like if it fails so we had one step here

00:14:04,840 --> 00:14:09,520
kind of in the middle fail that had to

00:14:07,060 --> 00:14:11,350
happen before the others so our build

00:14:09,520 --> 00:14:16,870
fails we get notified of that and all

00:14:11,350 --> 00:14:20,140
these other tests don't even run we

00:14:16,870 --> 00:14:21,940
mitigate risk because we're running this

00:14:20,140 --> 00:14:25,690
in an automated fashion there there's

00:14:21,940 --> 00:14:28,630
less room for error within our workflow

00:14:25,690 --> 00:14:31,630
within our pipelines and within our code

00:14:28,630 --> 00:14:33,520
we can check for errors earlier so if

00:14:31,630 --> 00:14:35,710
you're doing that code sniffing if

00:14:33,520 --> 00:14:41,220
you're testing that form on every single

00:14:35,710 --> 00:14:43,510
commit that really ups your level of

00:14:41,220 --> 00:14:45,580
that that increases your level of

00:14:43,510 --> 00:14:47,320
confidence as well which we're going to

00:14:45,580 --> 00:14:50,020
talk about but mitigating that risk

00:14:47,320 --> 00:14:52,660
because we have this full coverage and I

00:14:50,020 --> 00:14:55,540
don't know this might just be me but as

00:14:52,660 --> 00:14:58,390
a developer I can be lazy so going in

00:14:55,540 --> 00:15:00,460
and you know if it's some QA like we're

00:14:58,390 --> 00:15:02,770
supposed to test this full shopping cart

00:15:00,460 --> 00:15:04,810
process I just changed a menu item

00:15:02,770 --> 00:15:07,270
that's not gonna affect the cart right

00:15:04,810 --> 00:15:09,340
maybe I'm just gonna not test that this

00:15:07,270 --> 00:15:11,800
time well when you automate these things

00:15:09,340 --> 00:15:14,170
you mitigate that risk because it's

00:15:11,800 --> 00:15:16,330
gonna be tested every time and I don't

00:15:14,170 --> 00:15:18,310
have to worry about it so that's some

00:15:16,330 --> 00:15:20,470
some risks that was introduced because

00:15:18,310 --> 00:15:22,090
you weren't previously testing it now

00:15:20,470 --> 00:15:23,650
you've lowered that barrier of entry to

00:15:22,090 --> 00:15:26,650
doing all these things that they can

00:15:23,650 --> 00:15:29,290
happen more frequently so this is just a

00:15:26,650 --> 00:15:32,530
screenshot of circle CI downloading

00:15:29,290 --> 00:15:34,570
dependencies here's like in installing

00:15:32,530 --> 00:15:37,779
assets and compiling things with gulp

00:15:34,570 --> 00:15:39,999
kind of a task run or set up here

00:15:37,779 --> 00:15:41,769
and this is a lighthouse report I don't

00:15:39,999 --> 00:15:44,259
know if you guys have seen this it's in

00:15:41,769 --> 00:15:47,620
Chrome developer tools now lighthouse is

00:15:44,259 --> 00:15:50,050
pretty cool it also has an NPM package

00:15:47,620 --> 00:15:53,050
you can run it on the command line so we

00:15:50,050 --> 00:15:55,870
can come in in audit performance so we

00:15:53,050 --> 00:15:57,879
can come in and say hey if this new code

00:15:55,870 --> 00:16:00,220
changed decreases performance by a

00:15:57,879 --> 00:16:01,930
certain threshold then let's not allow

00:16:00,220 --> 00:16:03,790
this change and we can go back and

00:16:01,930 --> 00:16:08,740
refactor and catch those things earlier

00:16:03,790 --> 00:16:11,230
in our process confidence we talked

00:16:08,740 --> 00:16:13,209
about that a little bit if we come in

00:16:11,230 --> 00:16:16,480
and look and I see here a tests has

00:16:13,209 --> 00:16:19,120
failed this why am i talking about this

00:16:16,480 --> 00:16:21,220
with confidence what's still automated

00:16:19,120 --> 00:16:23,589
testing in adopting this continuous

00:16:21,220 --> 00:16:26,110
integration ups my confidence that I'm

00:16:23,589 --> 00:16:27,610
not shipping bugs because we have test

00:16:26,110 --> 00:16:29,980
coverage and it's running every single

00:16:27,610 --> 00:16:32,230
time I'm confident that I'm gonna catch

00:16:29,980 --> 00:16:34,660
things and when all the lights are green

00:16:32,230 --> 00:16:36,699
then I'm confident that I'm shipping

00:16:34,660 --> 00:16:39,939
quality code that I'm not introducing a

00:16:36,699 --> 00:16:42,160
bug members of my team are confident the

00:16:39,939 --> 00:16:43,809
project managers can go in and they're

00:16:42,160 --> 00:16:45,850
confident that when they tell a client

00:16:43,809 --> 00:16:47,829
something is done it's actually done and

00:16:45,850 --> 00:16:50,889
it's not broken and they're not gonna

00:16:47,829 --> 00:16:53,620
get a phone call later on and this can

00:16:50,889 --> 00:16:56,019
show up right in github or bitbucket or

00:16:53,620 --> 00:16:58,420
wherever you're working we can have all

00:16:56,019 --> 00:17:00,670
these green check boxes and especially

00:16:58,420 --> 00:17:03,209
if you're you know transparent with your

00:17:00,670 --> 00:17:05,559
clients if they're coming in and they're

00:17:03,209 --> 00:17:06,970
watching your repository seeing what

00:17:05,559 --> 00:17:08,679
you're doing maybe you're introducing

00:17:06,970 --> 00:17:10,809
this pull request on something they own

00:17:08,679 --> 00:17:12,429
and you've set up this sort of testing

00:17:10,809 --> 00:17:14,020
and all the lights are green it's gonna

00:17:12,429 --> 00:17:17,169
give them confidence that you're doing

00:17:14,020 --> 00:17:19,480
quality work it's you know coming in and

00:17:17,169 --> 00:17:21,789
saying like Oh trust us our code is good

00:17:19,480 --> 00:17:25,799
they can actually go in and look at the

00:17:21,789 --> 00:17:25,799
tests and and know that the code is good

00:17:26,699 --> 00:17:32,679
we have communication as well so we

00:17:30,730 --> 00:17:35,679
talked earlier this is a screenshot of

00:17:32,679 --> 00:17:37,510
kind of the running slack message so we

00:17:35,679 --> 00:17:39,250
come in and see that these tests are

00:17:37,510 --> 00:17:41,260
running and I can see like red and green

00:17:39,250 --> 00:17:43,390
pass or fail I have little buttons in

00:17:41,260 --> 00:17:45,030
here that if one fails I can click on it

00:17:43,390 --> 00:17:47,260
and actually go view the full report

00:17:45,030 --> 00:17:49,360
those sorts of things you can set this

00:17:47,260 --> 00:17:51,460
up so that if something fails

00:17:49,360 --> 00:17:53,740
members of your team get notified if

00:17:51,460 --> 00:17:55,690
it's a general test maybe a project

00:17:53,740 --> 00:17:58,030
manager gets notified and they can go in

00:17:55,690 --> 00:18:00,130
and look at that and kind of keep tabs

00:17:58,030 --> 00:18:03,790
on the project if it's something more

00:18:00,130 --> 00:18:05,740
critical that fails let's say that I'm

00:18:03,790 --> 00:18:08,470
the developer who maintains a shopping

00:18:05,740 --> 00:18:10,090
cart that test fails even when someone

00:18:08,470 --> 00:18:12,730
else introduced you know we talked about

00:18:10,090 --> 00:18:14,410
a menu code change some tests with the

00:18:12,730 --> 00:18:17,110
shopping cart fails it could message me

00:18:14,410 --> 00:18:18,790
because I own that component right so

00:18:17,110 --> 00:18:22,570
you can go in and keep these lines of

00:18:18,790 --> 00:18:24,460
communication really open and clear and

00:18:22,570 --> 00:18:26,470
then also you can post these results

00:18:24,460 --> 00:18:28,630
back to github so this was the

00:18:26,470 --> 00:18:31,360
lighthouse test we talked about if the

00:18:28,630 --> 00:18:35,710
performance is drops a certain threshold

00:18:31,360 --> 00:18:37,919
we can block this being merged so we can

00:18:35,710 --> 00:18:42,100
come in and see that this test failed

00:18:37,919 --> 00:18:44,740
the performance score was 37 and I

00:18:42,100 --> 00:18:47,500
expected a score of 81 because our

00:18:44,740 --> 00:18:49,299
previous score was 86 and I have a level

00:18:47,500 --> 00:18:51,340
of tolerance of five you can configure

00:18:49,299 --> 00:18:54,520
all of these things we can go and say

00:18:51,340 --> 00:18:56,830
whoa you know maybe all of the other

00:18:54,520 --> 00:18:59,049
tests pass the forum still work the code

00:18:56,830 --> 00:19:01,840
looks okay but our performance tanked

00:18:59,049 --> 00:19:04,360
and so when you have that broad coverage

00:19:01,840 --> 00:19:06,220
then you're make it again risk building

00:19:04,360 --> 00:19:09,669
that confidence and that's communicated

00:19:06,220 --> 00:19:12,160
back as well and we can see review

00:19:09,669 --> 00:19:14,140
required so this is something that is

00:19:12,160 --> 00:19:15,700
not actually see itself this is

00:19:14,140 --> 00:19:18,040
something you can do with github but you

00:19:15,700 --> 00:19:20,320
can go in and say hey our process is

00:19:18,040 --> 00:19:21,850
that we do code reviews and maybe

00:19:20,320 --> 00:19:25,450
currently that's something you're just

00:19:21,850 --> 00:19:27,309
saying out loud well maybe you know like

00:19:25,450 --> 00:19:28,660
I said someone new comes on are you

00:19:27,309 --> 00:19:30,070
bringing a contractor to help with a

00:19:28,660 --> 00:19:32,169
project and they don't know your

00:19:30,070 --> 00:19:34,390
processes even if it's written in some

00:19:32,169 --> 00:19:35,860
wiki somewhere maybe they still don't

00:19:34,390 --> 00:19:37,990
know that you do code reviews because

00:19:35,860 --> 00:19:40,240
nobody told them but if github gets

00:19:37,990 --> 00:19:42,100
angry and says no this test failed or

00:19:40,240 --> 00:19:43,630
this code needs reviewed you're

00:19:42,100 --> 00:19:45,010
enforcing your process and you're

00:19:43,630 --> 00:19:46,929
keeping that consistency and that

00:19:45,010 --> 00:19:48,309
communication so you don't have to

00:19:46,929 --> 00:19:50,169
remember that every time you on board

00:19:48,309 --> 00:19:52,179
someone oh you have to do all of these

00:19:50,169 --> 00:19:54,610
things and we knew we do code review

00:19:52,179 --> 00:19:56,260
it's baked in the system they know you

00:19:54,610 --> 00:20:01,780
do code reviews because it's right there

00:19:56,260 --> 00:20:02,980
in front of them in reduced overhead you

00:20:01,780 --> 00:20:05,770
know we've talked about

00:20:02,980 --> 00:20:09,370
these things take time from different

00:20:05,770 --> 00:20:11,710
people on your team so here is just an

00:20:09,370 --> 00:20:13,780
example where we have a new poll request

00:20:11,710 --> 00:20:16,780
open we've changed some things on the

00:20:13,780 --> 00:20:18,750
readme but we actually spun up a new

00:20:16,780 --> 00:20:21,250
development environment automatically

00:20:18,750 --> 00:20:23,620
with continuous integration just have a

00:20:21,250 --> 00:20:25,419
script that goes in uses some command

00:20:23,620 --> 00:20:27,520
line tool spins up a new environment and

00:20:25,419 --> 00:20:30,880
then call the github API and post that

00:20:27,520 --> 00:20:32,590
link back so now I don't have to go in

00:20:30,880 --> 00:20:34,450
whoever made this change doesn't have to

00:20:32,590 --> 00:20:36,940
go in and worry about provisioning an

00:20:34,450 --> 00:20:38,770
environment someone else who wants to go

00:20:36,940 --> 00:20:40,360
review this change doesn't have to worry

00:20:38,770 --> 00:20:42,309
about provisioning it if the first

00:20:40,360 --> 00:20:44,590
person didn't maybe they don't even know

00:20:42,309 --> 00:20:45,910
how to do that they can just come in and

00:20:44,590 --> 00:20:47,559
click on the link they don't have to

00:20:45,910 --> 00:20:50,320
request it and wait for a response right

00:20:47,559 --> 00:20:51,820
so you're taking this burden off of the

00:20:50,320 --> 00:20:53,230
person who's making the change you're

00:20:51,820 --> 00:20:56,140
taking the burden off of the person

00:20:53,230 --> 00:20:57,850
reviewing the change and just really

00:20:56,140 --> 00:21:05,350
improving the efficiencies in your

00:20:57,850 --> 00:21:08,110
process this is visual regression

00:21:05,350 --> 00:21:10,150
testing so it can use headless browsers

00:21:08,110 --> 00:21:12,640
to take screenshots before and after of

00:21:10,150 --> 00:21:14,559
a change we see here on the left we

00:21:12,640 --> 00:21:16,809
kinda are missing this button now we

00:21:14,559 --> 00:21:18,760
have this log in with Google social

00:21:16,809 --> 00:21:20,650
button and then the image on the right

00:21:18,760 --> 00:21:22,750
is the difference because the button

00:21:20,650 --> 00:21:25,630
like moved everything a few pixels the

00:21:22,750 --> 00:21:27,130
entire thing failed but this is a type

00:21:25,630 --> 00:21:29,890
of thing that you can automatically

00:21:27,130 --> 00:21:32,940
generate these aport s-- attach them to

00:21:29,890 --> 00:21:35,140
your post and I don't know about you but

00:21:32,940 --> 00:21:37,929
when I go in and make a change that's

00:21:35,140 --> 00:21:39,790
kind of the default QA right is go look

00:21:37,929 --> 00:21:42,040
at the home page go click around some

00:21:39,790 --> 00:21:43,570
stuff well what happens when you have 10

00:21:42,040 --> 00:21:45,910
templates and you want to view three

00:21:43,570 --> 00:21:47,860
viewports that's 30 things I have to

00:21:45,910 --> 00:21:51,130
review and if we're being honest with

00:21:47,860 --> 00:21:53,590
ourselves we don't review 30 times every

00:21:51,130 --> 00:21:54,880
single push right it doesn't happen but

00:21:53,590 --> 00:21:55,419
when you move that to continuous

00:21:54,880 --> 00:21:57,640
integration

00:21:55,419 --> 00:21:58,780
it can't happen every time because guess

00:21:57,640 --> 00:22:00,340
what

00:21:58,780 --> 00:22:01,840
the robots are really good at spinning

00:22:00,340 --> 00:22:03,549
up a headless browser and they can do it

00:22:01,840 --> 00:22:06,910
in parallel spin up like ten of them and

00:22:03,549 --> 00:22:08,980
go review these things and then it is

00:22:06,910 --> 00:22:10,809
reasonable it's not reasonable to ask

00:22:08,980 --> 00:22:13,000
someone to review 30 for every single

00:22:10,809 --> 00:22:14,990
change it is reasonable to ask somebody

00:22:13,000 --> 00:22:17,600
to hey look at the report in

00:22:14,990 --> 00:22:18,860
make sure that yes I introduced this

00:22:17,600 --> 00:22:21,230
button change this was what I expected

00:22:18,860 --> 00:22:23,690
to change but what if the report came

00:22:21,230 --> 00:22:25,070
back and said this other template that I

00:22:23,690 --> 00:22:27,649
you know this buttons on the homepage

00:22:25,070 --> 00:22:29,690
some other template is broken now and it

00:22:27,649 --> 00:22:32,059
caught that like reviewing the report as

00:22:29,690 --> 00:22:34,100
a reasonable ask much more reasonable

00:22:32,059 --> 00:22:35,690
than go check every template to make

00:22:34,100 --> 00:22:42,919
sure your homepage changed it and break

00:22:35,690 --> 00:22:44,720
things right and so this is extending

00:22:42,919 --> 00:22:46,100
that we've actually used visual

00:22:44,720 --> 00:22:48,860
regressions some of this automated

00:22:46,100 --> 00:22:50,149
testing to automate security updates I

00:22:48,860 --> 00:22:53,240
know there's a pretty big one that

00:22:50,149 --> 00:22:56,000
happened recently won't go into details

00:22:53,240 --> 00:22:59,120
there but essentially this this is a

00:22:56,000 --> 00:23:00,830
pretty extreme example of the power of

00:22:59,120 --> 00:23:02,419
continuous integration some of the

00:23:00,830 --> 00:23:04,580
things you can do so

00:23:02,419 --> 00:23:06,340
spinning up a new environment pulling

00:23:04,580 --> 00:23:09,080
down the database and files from live

00:23:06,340 --> 00:23:11,390
applying a new security update running

00:23:09,080 --> 00:23:14,120
this visual testing because security

00:23:11,390 --> 00:23:16,820
updates shouldn't affect the way your

00:23:14,120 --> 00:23:19,370
site looks right it's probably some one

00:23:16,820 --> 00:23:20,480
like sequel input lines somewhere that's

00:23:19,370 --> 00:23:22,880
not going to affect the way your

00:23:20,480 --> 00:23:24,710
homepage looks so we can go in make sure

00:23:22,880 --> 00:23:26,690
visual tests are okay if you have any

00:23:24,710 --> 00:23:28,130
additional tests for those contact forms

00:23:26,690 --> 00:23:30,919
and whatever else is business-critical

00:23:28,130 --> 00:23:34,700
we talked about earlier run those tasks

00:23:30,919 --> 00:23:36,679
if everything passes merge it ship it

00:23:34,700 --> 00:23:38,840
out you can run more tests if you want

00:23:36,679 --> 00:23:42,140
and then deploy it right and this is

00:23:38,840 --> 00:23:46,309
something that can run on a cron I have

00:23:42,140 --> 00:23:49,669
it running every four hours for sites

00:23:46,309 --> 00:23:52,250
that have to help maintain and so now if

00:23:49,669 --> 00:23:55,730
a big security patch came out right now

00:23:52,250 --> 00:23:57,620
I and I'm busy I can't stop in the PI

00:23:55,730 --> 00:23:59,500
updates to a bunch of sites right now I

00:23:57,620 --> 00:24:02,360
mean I could but it'd be pretty rude

00:23:59,500 --> 00:24:04,730
then we could go in and I just know that

00:24:02,360 --> 00:24:06,559
within four hours this is either going

00:24:04,730 --> 00:24:08,360
to get applied or I'm going to get an

00:24:06,559 --> 00:24:10,610
email that some tests failed and I need

00:24:08,360 --> 00:24:12,799
to go review and even if that happens

00:24:10,610 --> 00:24:14,779
it's gonna tell me like hey this certain

00:24:12,799 --> 00:24:16,669
template is broken check that and so I'm

00:24:14,779 --> 00:24:18,860
not playing needle in the haystack I can

00:24:16,669 --> 00:24:20,870
go in with precision

00:24:18,860 --> 00:24:23,990
fix what I need to fix get my update

00:24:20,870 --> 00:24:25,650
applied and ship it out so really if you

00:24:23,990 --> 00:24:28,410
think about the time you're

00:24:25,650 --> 00:24:30,360
on updates adopting continuous

00:24:28,410 --> 00:24:32,130
integration is going to mitigate your

00:24:30,360 --> 00:24:34,470
risk up your level of confidence and

00:24:32,130 --> 00:24:36,450
we're talking about reducing overhead I

00:24:34,470 --> 00:24:38,280
don't know about you but before I

00:24:36,450 --> 00:24:41,670
automated this process I spent many many

00:24:38,280 --> 00:24:44,520
hours applying and queuing updates so if

00:24:41,670 --> 00:24:46,380
you want a good reason to adopt this

00:24:44,520 --> 00:24:50,040
then taking those hours off of your

00:24:46,380 --> 00:24:53,280
plate is a pretty darn good one and I

00:24:50,040 --> 00:24:56,910
kind of want to end with automation is a

00:24:53,280 --> 00:24:59,280
journey so don't go in and try and like

00:24:56,910 --> 00:25:01,140
do this over the weekend it's not gonna

00:24:59,280 --> 00:25:03,240
happen this took us like a year to flesh

00:25:01,140 --> 00:25:04,440
out that large process I showed at the

00:25:03,240 --> 00:25:06,750
beginning with all of these things

00:25:04,440 --> 00:25:09,630
running on polar quest it was a journey

00:25:06,750 --> 00:25:11,640
it took time so we came in and said all

00:25:09,630 --> 00:25:13,770
right on every poor request we're gonna

00:25:11,640 --> 00:25:16,110
just run some code sniffing now we're

00:25:13,770 --> 00:25:18,630
just gonna install dependencies okay

00:25:16,110 --> 00:25:20,220
wait we're shipping code in the clients

00:25:18,630 --> 00:25:22,140
complaining with the site slower let's

00:25:20,220 --> 00:25:24,030
add a lighthouse test for performance so

00:25:22,140 --> 00:25:26,850
you build these things over time so it

00:25:24,030 --> 00:25:29,280
really is a journey and so think of it

00:25:26,850 --> 00:25:30,480
that way final thoughts laughs some

00:25:29,280 --> 00:25:33,110
links on here at the end of slide

00:25:30,480 --> 00:25:35,190
actually did a full talk at Drupal con

00:25:33,110 --> 00:25:37,350
previously about the automated updates

00:25:35,190 --> 00:25:39,780
if you want to dive into that some other

00:25:37,350 --> 00:25:41,730
great DevOps tracks so if I've sold you

00:25:39,780 --> 00:25:43,320
on adopting CI go check out some of

00:25:41,730 --> 00:25:46,890
these other ones and really get in the

00:25:43,320 --> 00:25:48,660
details and then I don't unfortunately

00:25:46,890 --> 00:25:50,340
think we have time for questions we're

00:25:48,660 --> 00:25:52,140
kind of out of time but I'll hang around

00:25:50,340 --> 00:25:53,790
down the hall or up at the Pantheon

00:25:52,140 --> 00:25:55,890
booth come find me

00:25:53,790 --> 00:25:58,430
or hit me up a tailor and me and I'm

00:25:55,890 --> 00:26:03,479
happy to chat some more thank you

00:25:58,430 --> 00:26:03,479

YouTube URL: https://www.youtube.com/watch?v=PpwxYspFP7Y


