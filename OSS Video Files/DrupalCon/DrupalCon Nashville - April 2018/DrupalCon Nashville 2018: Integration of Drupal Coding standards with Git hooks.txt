Title: DrupalCon Nashville 2018: Integration of Drupal Coding standards with Git hooks
Publication date: 2018-04-11
Playlist: DrupalCon Nashville - April 2018
Description: 
	Introduction

Git hooks are scripts that Git executes before or after events such as: commit,
push, and receive. Git hooks are a built-in feature - no need to download anything. Git hooks are run locally.

Hooks we will use in our session :

pre-commit: Check for the line of code thats getting committed. This is something i will be explaining in detail in this article.
pre-receive: Checks for the code that is getting pushed to git-repo. Invoked before the line of code gets pushed to git repo.
post-receive: Gets triggered once the code is merged to the remote git repo. A simple usecase could be to notify other team members by sending an email with commit link and the commit message or to deploy the committed code to production


These hooks are disabled in default state on your local repository and resides in .git/hooks. you just need to remove .sample extension, make them executable and you are all set to go!!

The main objective while reviewing a pull request is to focus on the logic. As a Drupal developer and code reviewer, i have noticed people commiting code which lacks coding standard and at times they have syntactical errors as well. This used to waste a lot of my time as well as the developers leading to obvious problems towards the end of the Projects. when i found git-hooks and started playing around with it. Right now i have a pre-commit hook that tests the files for coding standards and syntactical errors before them getting committed and reaching to me. The following code in the pre-commit file takes care of parsing any file thats getting committed against Drupalcoding standards using PHP_Codesniffer and then parsing them against php lint.



Take Away for attendees:

Improved Project Management.
Proper code as per coding standards.
Proper workflow when you deploy something on the repository.
Proper formatted commit messages as per defined in the documentation.
Captions: 
	00:00:00,060 --> 00:00:06,330
hello everyone good afternoon my name is

00:00:03,090 --> 00:00:09,750
couples and I work with Steve I work

00:00:06,330 --> 00:00:11,490
with region as a Drupal developer I love

00:00:09,750 --> 00:00:14,759
to work with open so technologies and

00:00:11,490 --> 00:00:18,420
Drupal is one of them so for today my

00:00:14,759 --> 00:00:29,539
topic is integration of Drupal coding

00:00:18,420 --> 00:00:34,890
standards with detox yeah so get set go

00:00:29,539 --> 00:00:37,440
so what are Gators detox are strips that

00:00:34,890 --> 00:00:40,469
get execute before or after events such

00:00:37,440 --> 00:00:42,239
as commit push and receive get hooks are

00:00:40,469 --> 00:00:44,760
built-in feature no need to download

00:00:42,239 --> 00:00:47,250
anything they are just done locally so

00:00:44,760 --> 00:00:50,190
this is just a technical definition in

00:00:47,250 --> 00:00:53,640
lemon I would say get-ups are

00:00:50,190 --> 00:00:55,920
gatekeepers like they checks you your ID

00:00:53,640 --> 00:01:00,050
and let you come in the building the

00:00:55,920 --> 00:01:05,070
same thing you took does for us yeah

00:01:00,050 --> 00:01:09,840
okay so why get books these are just

00:01:05,070 --> 00:01:12,869
advantageous so you can say them a good

00:01:09,840 --> 00:01:14,970
habit you can enforce something on an

00:01:12,869 --> 00:01:17,159
event to follow set of rules and

00:01:14,970 --> 00:01:19,409
regulations so that you can follow

00:01:17,159 --> 00:01:21,710
proper standards or anything on the

00:01:19,409 --> 00:01:26,820
commits it's up to you

00:01:21,710 --> 00:01:29,579
so first is Auto debug it will debug

00:01:26,820 --> 00:01:33,990
your code automatically using PHP CS or

00:01:29,579 --> 00:01:39,000
PHP lint or set of rules you provide put

00:01:33,990 --> 00:01:41,100
into the hook next is auto deploy it can

00:01:39,000 --> 00:01:45,799
help you for displaying your code on

00:01:41,100 --> 00:01:45,799
master using photo post hooks

00:01:46,369 --> 00:01:51,780
notifications you can get notified when

00:01:49,140 --> 00:01:55,460
your code is updated over a slags email

00:01:51,780 --> 00:01:58,439
outlook whatever you want to integrate

00:01:55,460 --> 00:02:00,860
cross-language it is language language

00:01:58,439 --> 00:02:05,840
independent you can use any language

00:02:00,860 --> 00:02:05,840
Python Ruby PHP bash it's up to you

00:02:07,750 --> 00:02:16,270
Drupal coding standards coding standards

00:02:11,320 --> 00:02:17,590
are set of rules set of program coding

00:02:16,270 --> 00:02:20,170
standards are set of rules for

00:02:17,590 --> 00:02:22,930
programmers that lay out best practices

00:02:20,170 --> 00:02:25,900
for formatting and various other rules

00:02:22,930 --> 00:02:27,550
it tell us how to format what we write

00:02:25,900 --> 00:02:29,950
so that everyone is using the same

00:02:27,550 --> 00:02:32,140
convention and has the same expectation

00:02:29,950 --> 00:02:35,440
when they go to look at a new piece of

00:02:32,140 --> 00:02:37,150
code so this is just a definition just a

00:02:35,440 --> 00:02:39,910
set of rules and regulation you have to

00:02:37,150 --> 00:02:40,900
follow while writing the code who

00:02:39,910 --> 00:02:44,080
decided that

00:02:40,900 --> 00:02:47,260
Drupal standards it is decided by

00:02:44,080 --> 00:02:49,900
communities and it is based on the PC

00:02:47,260 --> 00:02:52,060
standards or pierre-pierre standards and

00:02:49,900 --> 00:02:54,040
even you can contribute if you are not

00:02:52,060 --> 00:02:57,790
liking something just create an issue on

00:02:54,040 --> 00:03:00,070
the cube that is PHP standards the

00:02:57,790 --> 00:03:03,610
quality of your code is not just in its

00:03:00,070 --> 00:03:08,920
execution but also in its appearance yes

00:03:03,610 --> 00:03:10,720
a very nice line it is not restricted to

00:03:08,920 --> 00:03:13,270
follow the style but it shouldn't be

00:03:10,720 --> 00:03:19,989
hard for you also yes if you see your

00:03:13,270 --> 00:03:24,370
code after one year or two year by

00:03:19,989 --> 00:03:26,050
coding standards readability it should

00:03:24,370 --> 00:03:28,570
it shouldn't be hard to read or

00:03:26,050 --> 00:03:32,250
understand by the third person who is

00:03:28,570 --> 00:03:35,230
looking at the code it can be

00:03:32,250 --> 00:03:37,810
maintainable maintainable code it should

00:03:35,230 --> 00:03:40,090
be easily extendable so that we can add

00:03:37,810 --> 00:03:42,489
more functionality to it or we can reuse

00:03:40,090 --> 00:03:45,730
that code after a while also we can

00:03:42,489 --> 00:03:48,430
extend that functionality also spot

00:03:45,730 --> 00:03:50,440
error more easily obviously if you have

00:03:48,430 --> 00:03:52,600
if you have if your code is proper

00:03:50,440 --> 00:03:55,900
properly Len turd

00:03:52,600 --> 00:03:58,300
so it's proper you can just easily spot

00:03:55,900 --> 00:04:01,330
the human errors like syntax errors or

00:03:58,300 --> 00:04:05,380
just a missing of comma or the semicolon

00:04:01,330 --> 00:04:08,470
you can easily track them encourages

00:04:05,380 --> 00:04:10,420
collective ownership if you fall if you

00:04:08,470 --> 00:04:13,120
follow your team will also encourage to

00:04:10,420 --> 00:04:17,680
follow such practices and if they didn't

00:04:13,120 --> 00:04:20,010
it's your responsibility then so how do

00:04:17,680 --> 00:04:20,010
they work

00:04:20,049 --> 00:04:27,039
every git repository has a dot dot get

00:04:24,190 --> 00:04:29,169
hooks directive with a scrip for each

00:04:27,039 --> 00:04:31,629
hook you can bind to you are free to

00:04:29,169 --> 00:04:34,509
change update these hooks as necessary

00:04:31,629 --> 00:04:38,349
and gate will execute them when those

00:04:34,509 --> 00:04:40,539
events occur go to get hit directory

00:04:38,349 --> 00:04:43,449
select your hook write your stuff

00:04:40,539 --> 00:04:46,659
make them execute executable and it's

00:04:43,449 --> 00:04:51,280
ready just make sure that you remove the

00:04:46,659 --> 00:04:52,960
dot sample extension while executing the

00:04:51,280 --> 00:04:55,919
script or any piece of code you are

00:04:52,960 --> 00:04:55,919
running in the file

00:05:05,020 --> 00:05:10,720
so type of youtubes so there are two

00:05:07,930 --> 00:05:16,690
types of hooks client-side hooks and

00:05:10,720 --> 00:05:19,860
server-side roots so client-side hooks

00:05:16,690 --> 00:05:22,660
they just run on your local machine

00:05:19,860 --> 00:05:25,240
pre-commit prepare commit message commit

00:05:22,660 --> 00:05:26,110
message post-commit post check out pre

00:05:25,240 --> 00:05:29,800
rebased

00:05:26,110 --> 00:05:31,569
and post merge the first four hooks let

00:05:29,800 --> 00:05:34,060
you plug into the entire commit

00:05:31,569 --> 00:05:35,919
lifecycle and the final three let you

00:05:34,060 --> 00:05:37,990
perform some extra actions or safety

00:05:35,919 --> 00:05:41,740
checks for git checkout or while

00:05:37,990 --> 00:05:47,370
debasing the branch next our server-side

00:05:41,740 --> 00:05:50,500
root pre receive update or post receive

00:05:47,370 --> 00:05:53,710
pre receive you can enforce some depth

00:05:50,500 --> 00:05:55,750
policies update it works pretty same as

00:05:53,710 --> 00:05:58,360
pre received and it is still called

00:05:55,750 --> 00:06:02,370
before anything updated it has three

00:05:58,360 --> 00:06:06,550
parameters reference reference reference

00:06:02,370 --> 00:06:11,740
new object and old object and after that

00:06:06,550 --> 00:06:17,050
post receive so you can use that for

00:06:11,740 --> 00:06:24,280
notifying people via Gmail outlook or

00:06:17,050 --> 00:06:27,190
slack it's up to you so as you can see

00:06:24,280 --> 00:06:28,810
this big picture so you can

00:06:27,190 --> 00:06:31,479
differentiate between client side and

00:06:28,810 --> 00:06:34,090
server side all the pre hooks run the

00:06:31,479 --> 00:06:37,810
checks tiles protect master and the post

00:06:34,090 --> 00:06:43,389
one is it safe to the branch and notify

00:06:37,810 --> 00:06:46,330
chatroom and Wendy topes

00:06:43,389 --> 00:06:48,969
this is the entire commit cycle till the

00:06:46,330 --> 00:06:52,289
local one and after that the remote one

00:06:48,969 --> 00:06:55,570
the client-side one so changes to commit

00:06:52,289 --> 00:06:57,810
pre-commit prepare commit message commit

00:06:55,570 --> 00:07:01,110
message post-commit

00:06:57,810 --> 00:07:04,360
pre receive update possessive and then

00:07:01,110 --> 00:07:06,699
rebased check out and merge so

00:07:04,360 --> 00:07:09,969
pre-commit you can mention the PHP

00:07:06,699 --> 00:07:12,520
standards or using code sniffers you can

00:07:09,969 --> 00:07:16,599
add them in pre-commit prepare commit

00:07:12,520 --> 00:07:17,800
message just allow you to just alter the

00:07:16,599 --> 00:07:20,770
basic

00:07:17,800 --> 00:07:22,600
mplet of the commit message in commit

00:07:20,770 --> 00:07:26,320
message you can just follow the

00:07:22,600 --> 00:07:30,580
restriction that you can just as an

00:07:26,320 --> 00:07:34,180
example I would say that enforce user to

00:07:30,580 --> 00:07:36,520
add the JIRA ID in the ticket as we not

00:07:34,180 --> 00:07:38,290
follow in the commit most of the commits

00:07:36,520 --> 00:07:45,970
so you can restrict that and commit

00:07:38,290 --> 00:07:50,400
message yeah that's a live demo okay so

00:07:45,970 --> 00:07:55,060
before going to the demo be realistic so

00:07:50,400 --> 00:07:58,240
PHP code sniffer it's less than or equal

00:07:55,060 --> 00:07:59,740
to two point nine so right now I guess

00:07:58,240 --> 00:08:01,870
the latest version is three point two

00:07:59,740 --> 00:08:03,400
point five but there is a known issue in

00:08:01,870 --> 00:08:05,380
the community I am I am and I am

00:08:03,400 --> 00:08:07,750
following up on the same so it is

00:08:05,380 --> 00:08:11,440
currently working with PHP code sniffer

00:08:07,750 --> 00:08:13,240
two point nine or less than that gate

00:08:11,440 --> 00:08:20,580
and the coder module you can download

00:08:13,240 --> 00:08:20,580
that from Drupal eight website yeah

00:08:36,650 --> 00:08:40,450
so I have the spine just

00:08:55,660 --> 00:09:00,600
yeah so just create some errors

00:09:21,230 --> 00:09:35,880
so just try to permit some message

00:09:30,440 --> 00:09:38,160
anything so it will be notified that it

00:09:35,880 --> 00:09:40,850
has the file has an error so first you

00:09:38,160 --> 00:09:40,850
need to correct that

00:10:13,930 --> 00:10:17,540
yeah

00:10:15,200 --> 00:10:21,350
so there is a please append the JIRA

00:10:17,540 --> 00:10:25,850
ticket number and even you can notify

00:10:21,350 --> 00:10:28,670
the user as I you can say that every

00:10:25,850 --> 00:10:31,190
time developer just forgot to log their

00:10:28,670 --> 00:10:33,680
time after the code so even you can

00:10:31,190 --> 00:10:35,420
remember you can just give them a

00:10:33,680 --> 00:10:37,670
warning that please log your time as

00:10:35,420 --> 00:10:40,130
well or in the worst case you can just

00:10:37,670 --> 00:10:45,530
open a browser window also so that they

00:10:40,130 --> 00:10:49,210
can force free log the time so in my

00:10:45,530 --> 00:10:49,210
case in my script

00:11:05,830 --> 00:11:17,800
in my case this is the pattern now you

00:11:12,370 --> 00:11:21,730
can commit the file and now you can push

00:11:17,800 --> 00:11:32,560
that so I'll just show you the directory

00:11:21,730 --> 00:11:35,670
structure so these are the hooks apply

00:11:32,560 --> 00:11:40,030
patch message commit message reapply

00:11:35,670 --> 00:11:43,300
pre-commit pre push update commit post

00:11:40,030 --> 00:11:46,720
update pre-commit prepare commit and pre

00:11:43,300 --> 00:11:50,290
debase you just need to remove the dot

00:11:46,720 --> 00:11:54,450
sample extension and just make them

00:11:50,290 --> 00:11:59,160
executable and you are ready to go so

00:11:54,450 --> 00:12:04,410
for the PHP cs and Linda one I have just

00:11:59,160 --> 00:12:04,410
altered the file of my P commit file I

00:12:08,550 --> 00:12:15,400
have added these a piece of code in this

00:12:11,680 --> 00:12:18,120
file and for the restriction of the

00:12:15,400 --> 00:12:18,120
commit message

00:12:19,730 --> 00:12:29,449
I have added this I'm not good at bash

00:12:26,630 --> 00:12:31,760
but I still tried something so you can

00:12:29,449 --> 00:12:45,019
find n number of examples and order

00:12:31,760 --> 00:12:49,880
according to your needs so I have added

00:12:45,019 --> 00:12:53,260
one video first take a look and this and

00:12:49,880 --> 00:12:53,260
then just I can relate this

00:12:54,860 --> 00:12:58,049
[Music]

00:13:05,910 --> 00:13:09,070
[Music]

00:13:14,150 --> 00:13:17,240
[Music]

00:13:22,810 --> 00:13:34,310
yeah so what happened anyone yeah so I

00:13:31,130 --> 00:13:36,020
can relate this in such a manner that my

00:13:34,310 --> 00:13:39,080
knowledge transfer is done of a product

00:13:36,020 --> 00:13:41,810
and when I dive into the coding part and

00:13:39,080 --> 00:13:43,970
I see that the non documented code and

00:13:41,810 --> 00:13:47,180
even if I ask someone

00:13:43,970 --> 00:13:50,690
so how he can he or she can decide that

00:13:47,180 --> 00:13:53,690
what is going on so it should be a good

00:13:50,690 --> 00:13:57,230
practice that we follow the standards to

00:13:53,690 --> 00:13:59,300
just maintain the maintain the integrity

00:13:57,230 --> 00:14:02,540
of the code and even for the product the

00:13:59,300 --> 00:14:04,370
product even if you go our or the

00:14:02,540 --> 00:14:06,980
project has been transferred to someone

00:14:04,370 --> 00:14:10,520
so even they are just by the

00:14:06,980 --> 00:14:21,160
documentation they can go and just give

00:14:10,520 --> 00:14:24,160
it a shot so so thank you so much guys

00:14:21,160 --> 00:14:24,160
questions

00:14:30,339 --> 00:14:41,430
a with dogs

00:14:44,780 --> 00:14:55,340
yeah I so get the prepare commit message

00:14:50,420 --> 00:14:57,620
just give you the altar of the specified

00:14:55,340 --> 00:15:00,890
template so there is a default template

00:14:57,620 --> 00:15:02,900
that you should follow so prepare commit

00:15:00,890 --> 00:15:04,700
message and commit message so they have

00:15:02,900 --> 00:15:07,280
a difference on commit message you can

00:15:04,700 --> 00:15:08,900
check the restriction in the prepare

00:15:07,280 --> 00:15:27,380
commit message you can define the

00:15:08,900 --> 00:15:29,740
template of the commit message with

00:15:27,380 --> 00:15:29,740
erase

00:15:33,610 --> 00:15:41,680
no no no no you can just it just a

00:15:38,950 --> 00:15:44,230
language independent so you can write in

00:15:41,680 --> 00:15:47,140
the on the local machine you can run the

00:15:44,230 --> 00:15:51,279
server hoops but on if you say on the

00:15:47,140 --> 00:15:54,370
server side so on the you can use Web

00:15:51,279 --> 00:15:57,190
books so bitbucket gives you but github

00:15:54,370 --> 00:15:59,649
does have a plugin with the jenkins so

00:15:57,190 --> 00:16:01,839
that you can check you can create a job

00:15:59,649 --> 00:16:04,120
in the jenkins and just write the code

00:16:01,839 --> 00:16:06,810
the piece of wood there so on the github

00:16:04,120 --> 00:16:10,060
you can just take the whether it is

00:16:06,810 --> 00:16:18,750
following the standards or not so with

00:16:10,060 --> 00:16:18,750
composer i guess it's not possible no

00:16:24,149 --> 00:16:29,800
yeah sure and even who is interested

00:16:27,339 --> 00:16:31,390
setting this up on his local machine i

00:16:29,800 --> 00:16:34,029
have created a very document it

00:16:31,390 --> 00:16:37,029
step-by-step doc so that you can just

00:16:34,029 --> 00:16:40,149
set up it locally in just 10 to 20

00:16:37,029 --> 00:16:43,240
minutes alright so I figured that use

00:16:40,149 --> 00:16:47,019
the mic yeah I just had a question if if

00:16:43,240 --> 00:16:51,490
all the get hooks are local is there a

00:16:47,019 --> 00:16:55,180
way to enforce a certain set of scripts

00:16:51,490 --> 00:16:57,300
for like a distributed company what's

00:16:55,180 --> 00:17:00,040
the is there a good practice to

00:16:57,300 --> 00:17:04,839
transmitting that to each developer on

00:17:00,040 --> 00:17:07,569
their local machine ideally we have a

00:17:04,839 --> 00:17:09,760
way that we can simulate on the local

00:17:07,569 --> 00:17:13,809
machines we can create a symlink

00:17:09,760 --> 00:17:16,449
and distribute among all but but if you

00:17:13,809 --> 00:17:20,850
want to integrate this server side so it

00:17:16,449 --> 00:17:23,439
might be a hectic because you have to

00:17:20,850 --> 00:17:26,350
even some of the quantitated modules

00:17:23,439 --> 00:17:28,480
also does not follow proper standards so

00:17:26,350 --> 00:17:31,240
that should be a case that you have to

00:17:28,480 --> 00:17:34,440
setup this on the local system yeah

00:17:31,240 --> 00:17:34,440
makes sense thank you

00:17:49,950 --> 00:17:56,530
it's already there on the github if you

00:17:54,370 --> 00:17:58,540
if you are just using it it it is

00:17:56,530 --> 00:18:01,120
already there you just have to use them

00:17:58,540 --> 00:18:03,850
you have to write the piece of code but

00:18:01,120 --> 00:18:06,520
what do you want from the what do you

00:18:03,850 --> 00:18:09,960
want from get hooks what you want to

00:18:06,520 --> 00:18:09,960
implement you have to write the code

00:18:15,570 --> 00:18:18,619
[Music]

00:18:19,740 --> 00:18:25,360
yeah that's what I'm saying that there

00:18:22,630 --> 00:18:28,300
is a way to sibling the great oaks so

00:18:25,360 --> 00:18:31,350
that you can use all the same hook on

00:18:28,300 --> 00:18:31,350
the different repositories

00:18:38,750 --> 00:18:41,559
anyone

00:18:46,210 --> 00:18:53,350
I had a question about just you showed

00:18:50,260 --> 00:18:58,630
the pre-commit hook and then the commit

00:18:53,350 --> 00:19:03,549
message hook what is like a good

00:18:58,630 --> 00:19:06,940
practice on what steps of hooks to use

00:19:03,549 --> 00:19:11,799
in a project I've used post receive to

00:19:06,940 --> 00:19:14,500
apply code onto a server after pushing

00:19:11,799 --> 00:19:16,600
or after committing to a branch and then

00:19:14,500 --> 00:19:20,290
pushing those changes to that specific

00:19:16,600 --> 00:19:24,760
branch on the server to change the code

00:19:20,290 --> 00:19:28,210
but I guess it totally depends upon your

00:19:24,760 --> 00:19:30,370
requirement so you have to decide that

00:19:28,210 --> 00:19:33,340
what hook you are using and what you

00:19:30,370 --> 00:19:35,830
want to implement on the repository so

00:19:33,340 --> 00:19:40,480
that's the decision you make while

00:19:35,830 --> 00:19:46,780
implementing the project okay so you

00:19:40,480 --> 00:19:49,270
showed pre-commit are there good

00:19:46,780 --> 00:19:52,510
practices to use when you're using hooks

00:19:49,270 --> 00:19:56,070
locally and then on a server where

00:19:52,510 --> 00:20:01,000
you're pushing those changes and yeah

00:19:56,070 --> 00:20:04,750
could you maybe go more specific on how

00:20:01,000 --> 00:20:08,020
you would use post receive - maybe if

00:20:04,750 --> 00:20:11,290
you push changed and you want to go back

00:20:08,020 --> 00:20:13,690
a commit or take back your last commit

00:20:11,290 --> 00:20:16,210
that you might have pushed that you can

00:20:13,690 --> 00:20:18,820
enforce on pre receive so that it could

00:20:16,210 --> 00:20:20,890
not be merged to master on post receive

00:20:18,820 --> 00:20:23,290
only you get the notifications because

00:20:20,890 --> 00:20:25,990
it runs after the master has been

00:20:23,290 --> 00:20:28,390
updated okay okay so it's kind of a

00:20:25,990 --> 00:20:30,070
matter of just you have to decide what

00:20:28,390 --> 00:20:34,440
you have you want to implement that's it

00:20:30,070 --> 00:20:34,440
all right that makes sense Thanks

00:20:34,950 --> 00:20:44,460
thank you so much guys

00:20:37,520 --> 00:20:44,460
[Applause]

00:21:35,630 --> 00:21:38,200

YouTube URL: https://www.youtube.com/watch?v=iivwTZ8j2wo


