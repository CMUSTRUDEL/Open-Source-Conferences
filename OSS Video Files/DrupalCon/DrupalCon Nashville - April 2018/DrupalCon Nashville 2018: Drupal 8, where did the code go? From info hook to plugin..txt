Title: DrupalCon Nashville 2018: Drupal 8, where did the code go? From info hook to plugin.
Publication date: 2018-04-11
Playlist: DrupalCon Nashville - April 2018
Description: 
	Looking at core and contributed modules for Drupal 8, you may be wondering "where did the code go?".

Drupal 8 has removed many of the "info" hooks that were found in your module file and converted them to plugins.

This session will be a practical discussion of how plugins work and how to upgrade your module to Drupal 8 if it used one of these hooks that's been converted to a plugin. I will include example of code from Drupal 7 and where the very similar code lives in Drupal 8.

In addition I'll cover the essentials of implementing your own plugin if your module previously used an "info" hook and you want to join the new paradigm. You'll come away understanding plugin terminology and different ways plugins can be discovered,

Finally, you will leave feeling good that you'll never again implement one of these hooks by mistake again when you're writing a function in your module.
Captions: 
	00:00:00,800 --> 00:00:08,160
thanks a minute all right well so we hit

00:00:06,569 --> 00:00:09,650
1050 you've all had five extra minutes

00:00:08,160 --> 00:00:12,540
for coffee

00:00:09,650 --> 00:00:13,830
hopefully that was enough again

00:00:12,540 --> 00:00:16,470
PDFs already posted if you want to

00:00:13,830 --> 00:00:19,199
follow along on your laptop or make a

00:00:16,470 --> 00:00:21,960
copy of that for later thanks for coming

00:00:19,199 --> 00:00:23,640
everyone I'm Anna just told me we don't

00:00:21,960 --> 00:00:24,900
have a session right after so if we run

00:00:23,640 --> 00:00:26,660
over a couple minutes for questions that

00:00:24,900 --> 00:00:29,880
will be okay too

00:00:26,660 --> 00:00:33,000
this talk is titled Drupal 8 where did

00:00:29,880 --> 00:00:35,730
the code go from info hook to plugin and

00:00:33,000 --> 00:00:39,000
the broad idea behind this talk is I

00:00:35,730 --> 00:00:40,140
wanted to really make Drupal 8 feel a

00:00:39,000 --> 00:00:42,540
little bit more accessible for people

00:00:40,140 --> 00:00:45,390
coming from Drupal 7 it might be trying

00:00:42,540 --> 00:00:46,920
to put get their head around where some

00:00:45,390 --> 00:00:48,809
of the familiar pieces of code in Drupal

00:00:46,920 --> 00:00:50,100
7 when in Drupal 8 this is also a good

00:00:48,809 --> 00:00:53,100
talk if you're just interested in the

00:00:50,100 --> 00:00:54,600
Drupal 8 plug-in system but imma spend

00:00:53,100 --> 00:00:56,879
some time talking about a comparison

00:00:54,600 --> 00:01:00,809
between the code in Drupal 7 and Drupal

00:00:56,879 --> 00:01:01,920
8 so if you've looked at Drupal 8 you

00:01:00,809 --> 00:01:03,480
might realize there's a lot of things

00:01:01,920 --> 00:01:04,049
that are gone all these hooks they're

00:01:03,480 --> 00:01:05,640
dead

00:01:04,049 --> 00:01:07,680
completely removed from the codebase you

00:01:05,640 --> 00:01:10,020
can't use them anymore

00:01:07,680 --> 00:01:13,799
so what do we do we replace them with

00:01:10,020 --> 00:01:15,360
plugins so what I'm going to talk about

00:01:13,799 --> 00:01:17,939
is really just give you a little bit of

00:01:15,360 --> 00:01:19,619
background about some a couple key terms

00:01:17,939 --> 00:01:20,970
or changes in Drupal 8 just so you don't

00:01:19,619 --> 00:01:22,890
get lost when I keep talking about them

00:01:20,970 --> 00:01:24,840
over and over again I spend a little

00:01:22,890 --> 00:01:28,799
while telling you what a plug-in is

00:01:24,840 --> 00:01:29,759
which is a you know an important thing

00:01:28,799 --> 00:01:32,460
that you get you wrap your head around

00:01:29,759 --> 00:01:34,470
the concept then I'm gonna dive into a

00:01:32,460 --> 00:01:37,890
first example we're showing you where

00:01:34,470 --> 00:01:39,780
the code in a Drupal 7 info hook and

00:01:37,890 --> 00:01:43,799
corresponding implementation hooks went

00:01:39,780 --> 00:01:45,540
in a plugin in Drupal 8 then start

00:01:43,799 --> 00:01:47,210
showing you some code for a little

00:01:45,540 --> 00:01:49,649
custom module and how you can implement

00:01:47,210 --> 00:01:51,750
plugins in a custom module so we'll

00:01:49,649 --> 00:01:54,360
start with putting a couple tabs on a

00:01:51,750 --> 00:01:56,009
page as local tasks then get into a

00:01:54,360 --> 00:01:57,659
little more advanced examples where I'll

00:01:56,009 --> 00:02:00,030
show you how you can define a custom

00:01:57,659 --> 00:02:02,040
block how you can define a custom text

00:02:00,030 --> 00:02:03,840
filter and finally a couple best

00:02:02,040 --> 00:02:06,659
practices if you want your module to

00:02:03,840 --> 00:02:10,410
define its own plug-in type so that's

00:02:06,659 --> 00:02:12,840
the roadmap for today's talk this is me

00:02:10,410 --> 00:02:14,940
hopefully I look like that picture

00:02:12,840 --> 00:02:16,830
I've been a Drupal core contributors

00:02:14,940 --> 00:02:19,140
since through Pohl 5 I'm on the Drupal

00:02:16,830 --> 00:02:21,030
security team I work for by RF now which

00:02:19,140 --> 00:02:24,300
makes a web application for self

00:02:21,030 --> 00:02:25,500
laboratory safety and compliance and I

00:02:24,300 --> 00:02:27,030
helped create some of the Drupal 8

00:02:25,500 --> 00:02:29,460
plugins that we're going to be talking

00:02:27,030 --> 00:02:31,350
about so in particular I helped write

00:02:29,460 --> 00:02:33,750
the local tasks and among other menu

00:02:31,350 --> 00:02:36,960
related plugins that we're going to talk

00:02:33,750 --> 00:02:38,190
about so we'll certainly be happy to

00:02:36,960 --> 00:02:39,690
take questions on any of those and I

00:02:38,190 --> 00:02:41,400
also help organize a Drupal camp New

00:02:39,690 --> 00:02:45,990
Jersey so if you're in that area I look

00:02:41,400 --> 00:02:48,180
for it next winter so this is the key

00:02:45,990 --> 00:02:49,890
Drupal 8 background some things that you

00:02:48,180 --> 00:02:51,720
need to know without which you'll be

00:02:49,890 --> 00:02:53,460
lost i'll keep referencing them the rest

00:02:51,720 --> 00:02:55,800
of the talk so the first thing is the

00:02:53,460 --> 00:02:58,080
dependency injection container sometimes

00:02:55,800 --> 00:03:00,450
called the DI see more commonly just the

00:02:58,080 --> 00:03:02,430
container or the service container and

00:03:00,450 --> 00:03:05,640
this is an object that's available in

00:03:02,430 --> 00:03:07,080
Drupal 8 and it just contains instances

00:03:05,640 --> 00:03:08,730
of other objects and each of these

00:03:07,080 --> 00:03:10,680
objects is a service and what that means

00:03:08,730 --> 00:03:12,660
is you can grab that service have it do

00:03:10,680 --> 00:03:14,640
some work for you and then let it go

00:03:12,660 --> 00:03:17,190
and there's stateless that means they

00:03:14,640 --> 00:03:20,100
don't change use them to do some unit of

00:03:17,190 --> 00:03:21,810
work but the service itself doesn't

00:03:20,100 --> 00:03:24,060
retain any stage so it has things like

00:03:21,810 --> 00:03:26,880
who's the current logged in user how do

00:03:24,060 --> 00:03:28,770
I take route and render it into a URL

00:03:26,880 --> 00:03:30,300
things like that but when that's the

00:03:28,770 --> 00:03:32,250
service is done the service itself has

00:03:30,300 --> 00:03:34,830
not changed and stateless so that's

00:03:32,250 --> 00:03:38,280
important you'd be talking about

00:03:34,830 --> 00:03:40,620
services a lot in terms of how you get

00:03:38,280 --> 00:03:42,540
and interact with plugins the other

00:03:40,620 --> 00:03:44,820
thing are going to mentioned quite a few

00:03:42,540 --> 00:03:47,370
times is new routing system in Drupal 8

00:03:44,820 --> 00:03:50,459
so the key conceptual difference really

00:03:47,370 --> 00:03:52,950
between Drupal 7 and rupal 8 is that we

00:03:50,459 --> 00:03:55,410
now have route names and instead of

00:03:52,950 --> 00:03:57,540
using system paths so the route name is

00:03:55,410 --> 00:04:00,239
just a machine name and that machine

00:03:57,540 --> 00:04:01,709
name is connected to a path and two

00:04:00,239 --> 00:04:04,140
callbacks to provide the page content

00:04:01,709 --> 00:04:06,030
the title all the things that a Drupal 7

00:04:04,140 --> 00:04:07,980
many router would have given you but

00:04:06,030 --> 00:04:09,810
again we're using these machine names

00:04:07,980 --> 00:04:11,580
and so there's not a direct one-to-one

00:04:09,810 --> 00:04:14,580
correlation between the machine name and

00:04:11,580 --> 00:04:16,919
a path necessarily finally you'll see a

00:04:14,580 --> 00:04:19,049
lot of full namespace class names in

00:04:16,919 --> 00:04:20,489
this talk so if you're not familiar with

00:04:19,049 --> 00:04:23,490
namespacing this is a feature that came

00:04:20,489 --> 00:04:26,100
in PHP 5.3 so it's been around a little

00:04:23,490 --> 00:04:26,680
while now and what that means is a PHP

00:04:26,100 --> 00:04:28,210
class name

00:04:26,680 --> 00:04:30,580
look like that full string on the bottom

00:04:28,210 --> 00:04:32,949
so it's a Drupal search plug-in block

00:04:30,580 --> 00:04:34,360
search block and that entire string is

00:04:32,949 --> 00:04:36,880
the class name but you see each of those

00:04:34,360 --> 00:04:38,770
back slashes separates a section of that

00:04:36,880 --> 00:04:40,479
name of that class name is part of the

00:04:38,770 --> 00:04:42,850
namespace and that gives you information

00:04:40,479 --> 00:04:44,259
about where that class lives and what it

00:04:42,850 --> 00:04:45,970
does so you can see that obviously it's

00:04:44,259 --> 00:04:48,100
part of Drupal it's provided by the

00:04:45,970 --> 00:04:49,750
search module it's a plug-in it's a

00:04:48,100 --> 00:04:51,940
block plug-in right and then we get to

00:04:49,750 --> 00:04:53,740
the specific actual plug-in that it is

00:04:51,940 --> 00:04:56,229
so this namespace is kind of like a

00:04:53,740 --> 00:04:57,550
little map and is also really important

00:04:56,229 --> 00:05:00,669
for Auto loading which is something I'll

00:04:57,550 --> 00:05:02,620
talk about later okay so that's all the

00:05:00,669 --> 00:05:04,840
background hopefully that's enough to

00:05:02,620 --> 00:05:07,780
get you through the rest of the talk

00:05:04,840 --> 00:05:11,020
the big topic here is plugins right and

00:05:07,780 --> 00:05:13,720
plugins encapsulate reusable

00:05:11,020 --> 00:05:15,520
functionality in a class and they

00:05:13,720 --> 00:05:17,740
implement one or more specific

00:05:15,520 --> 00:05:18,940
interfaces and all three of those things

00:05:17,740 --> 00:05:21,070
are really important to wrap your head

00:05:18,940 --> 00:05:23,830
around for plugins so they're reusable

00:05:21,070 --> 00:05:25,240
we could have multiple plugins and keep

00:05:23,830 --> 00:05:27,699
using them over and over again we're not

00:05:25,240 --> 00:05:30,400
constrained to use it only once this all

00:05:27,699 --> 00:05:33,190
class-based and what's really important

00:05:30,400 --> 00:05:34,630
is they use interfaces and interfaces

00:05:33,190 --> 00:05:36,699
are something that make Drupal 8

00:05:34,630 --> 00:05:39,460
actually much more powerful and much

00:05:36,699 --> 00:05:41,740
more malleable than previous versions of

00:05:39,460 --> 00:05:43,030
Drupal because all these plugins all the

00:05:41,740 --> 00:05:44,650
services I'm going to talk about in this

00:05:43,030 --> 00:05:46,330
talk use interfaces

00:05:44,650 --> 00:05:48,099
what that means is if you don't like the

00:05:46,330 --> 00:05:50,110
way that the implementation works

00:05:48,099 --> 00:05:52,659
provided by Drupal core provided by some

00:05:50,110 --> 00:05:55,030
other module you can substitute your own

00:05:52,659 --> 00:05:56,500
implementation as long as it follows the

00:05:55,030 --> 00:05:59,080
same interface and the interface just

00:05:56,500 --> 00:06:01,000
means essentially what classes does it

00:05:59,080 --> 00:06:02,860
have or what methods does the class have

00:06:01,000 --> 00:06:03,970
and what parameters they take and what

00:06:02,860 --> 00:06:05,470
kind of return value do they give you

00:06:03,970 --> 00:06:07,210
that's what the interface tells you as

00:06:05,470 --> 00:06:09,820
long as your code implements the same

00:06:07,210 --> 00:06:12,159
interface you can substitute your

00:06:09,820 --> 00:06:14,470
version for anything in Drupal core or

00:06:12,159 --> 00:06:16,030
contributor module said imagine it's

00:06:14,470 --> 00:06:18,580
essentially like swapping out the module

00:06:16,030 --> 00:06:19,560
file in Drupal 7 of some module when you

00:06:18,580 --> 00:06:21,820
want it to work a little bit differently

00:06:19,560 --> 00:06:23,590
that's what you can do a Drupal 8 and so

00:06:21,820 --> 00:06:26,259
that's an extremely powerful new feature

00:06:23,590 --> 00:06:27,580
of Drupal 8 that makes it more pluggable

00:06:26,259 --> 00:06:31,720
more changeable that I think a lot of

00:06:27,580 --> 00:06:35,050
people don't yet appreciate so a little

00:06:31,720 --> 00:06:36,729
diversion there on interfaces so if you

00:06:35,050 --> 00:06:39,490
think about what a plug-in does again

00:06:36,729 --> 00:06:40,490
it's a reusable functionality and it

00:06:39,490 --> 00:06:42,410
combines a Drupal 7

00:06:40,490 --> 00:06:45,259
what was generally an info hook and a

00:06:42,410 --> 00:06:48,050
number of implementation hooks so if you

00:06:45,259 --> 00:06:49,400
implemented hook search info in Drupal 7

00:06:48,050 --> 00:06:50,810
this is probably not too common to

00:06:49,400 --> 00:06:52,849
implement but if you wanted a custom

00:06:50,810 --> 00:06:54,979
search you're searching something that's

00:06:52,849 --> 00:06:56,599
not nodes a user or something custom you

00:06:54,979 --> 00:06:59,030
would have to also implement in your

00:06:56,599 --> 00:07:00,319
module hooks search execute right so

00:06:59,030 --> 00:07:02,750
there's the info hook that tells you

00:07:00,319 --> 00:07:04,430
that my module provides a search hook

00:07:02,750 --> 00:07:08,030
search execute actually does the work

00:07:04,430 --> 00:07:09,500
and those two functions both had to be

00:07:08,030 --> 00:07:10,970
present but they didn't necessarily have

00:07:09,500 --> 00:07:12,860
to be in the same place they might not

00:07:10,970 --> 00:07:14,659
even be in the same file or next to each

00:07:12,860 --> 00:07:15,919
other the documentation might not be

00:07:14,659 --> 00:07:17,300
clear if someone was reading your module

00:07:15,919 --> 00:07:18,860
that these two things were coupled

00:07:17,300 --> 00:07:20,630
together and essential that they both be

00:07:18,860 --> 00:07:23,360
present in order for your search system

00:07:20,630 --> 00:07:25,430
to work similarly a lot of you probably

00:07:23,360 --> 00:07:27,440
implemented a custom block right so you

00:07:25,430 --> 00:07:28,970
implement hook block info in your module

00:07:27,440 --> 00:07:30,919
that tells Drupal about the list of

00:07:28,970 --> 00:07:32,840
blocks that are available to be turned

00:07:30,919 --> 00:07:34,460
on but of course if you did that you

00:07:32,840 --> 00:07:36,380
also had to implement hook blog of you

00:07:34,460 --> 00:07:38,030
which actually returned the render array

00:07:36,380 --> 00:07:39,860
for that custom block right if you only

00:07:38,030 --> 00:07:41,300
implement a hook block info it was no

00:07:39,860 --> 00:07:43,880
good Drupal thought there was a block

00:07:41,300 --> 00:07:45,409
and it had no way to render it similarly

00:07:43,880 --> 00:07:48,409
you might implement hook block configure

00:07:45,409 --> 00:07:50,530
hook block save in order to capture

00:07:48,409 --> 00:07:52,729
configuration about your block but these

00:07:50,530 --> 00:07:53,930
different functions might not have been

00:07:52,729 --> 00:07:56,000
in the same file again might not be

00:07:53,930 --> 00:07:58,130
collocated might not be documented as

00:07:56,000 --> 00:07:59,599
being connected to each other in your

00:07:58,130 --> 00:08:01,729
modules who is often hard to understand

00:07:59,599 --> 00:08:04,219
the code in Drupal 7 how these different

00:08:01,729 --> 00:08:09,469
hooks actually work together to make

00:08:04,219 --> 00:08:11,539
your custom block work so if you go

00:08:09,469 --> 00:08:13,039
pretty deep into Drupal 7 especially

00:08:11,539 --> 00:08:15,289
something like C tools and views you

00:08:13,039 --> 00:08:19,039
might have seen that those modules in

00:08:15,289 --> 00:08:20,719
Drupal 7 had a plug-in system so what we

00:08:19,039 --> 00:08:24,409
have in Drupal 8 in a lot of ways is

00:08:20,719 --> 00:08:26,569
kind of a grandchild you might say

00:08:24,409 --> 00:08:28,969
evolved from seed tools and views

00:08:26,569 --> 00:08:31,039
plugins in Drupal 7 but a lot of the

00:08:28,969 --> 00:08:33,349
mechanisms used to find those plugins

00:08:31,039 --> 00:08:34,789
and create instances Ammar completely

00:08:33,349 --> 00:08:36,940
different from pupil 7 so there's a

00:08:34,789 --> 00:08:39,649
connection there but you really can't

00:08:36,940 --> 00:08:41,690
have a one-to-one you can't just copy

00:08:39,649 --> 00:08:47,360
over a Drupal 7 plug-in and have it work

00:08:41,690 --> 00:08:48,410
in Drupal 8 ok so how do I get an

00:08:47,360 --> 00:08:50,089
instance of a plug-in how do I do

00:08:48,410 --> 00:08:53,150
something with it so that's through

00:08:50,089 --> 00:08:54,350
plugin managers so every plugin type so

00:08:53,150 --> 00:08:55,760
like blocks

00:08:54,350 --> 00:08:58,160
I have a plug-in manager that's

00:08:55,760 --> 00:08:59,780
registered as a service in that service

00:08:58,160 --> 00:09:01,940
container that I mentioned earlier as an

00:08:59,780 --> 00:09:04,100
important background so you basically

00:09:01,940 --> 00:09:05,870
say hey service container can I have the

00:09:04,100 --> 00:09:09,110
block manager I'd like an instance of a

00:09:05,870 --> 00:09:10,940
block and the block plug-in manager will

00:09:09,110 --> 00:09:13,310
give you back the object of that knows

00:09:10,940 --> 00:09:16,100
how to render that custom block so

00:09:13,310 --> 00:09:20,080
that's how we get to those through a

00:09:16,100 --> 00:09:22,160
manager every plugin has an ID which may

00:09:20,080 --> 00:09:23,510
generally be an insta rivet of just a

00:09:22,160 --> 00:09:25,670
static string and we'll see a lot of

00:09:23,510 --> 00:09:27,770
those in this talk as examples but we

00:09:25,670 --> 00:09:29,750
can also have derivatives so a

00:09:27,770 --> 00:09:33,830
derivative more commonly we look like a

00:09:29,750 --> 00:09:34,880
static string a colon and then a UUID so

00:09:33,830 --> 00:09:36,440
that's a very common pattern for

00:09:34,880 --> 00:09:38,240
derivatives and so that's essentially

00:09:36,440 --> 00:09:40,340
there's a base definition and then a lot

00:09:38,240 --> 00:09:42,260
of unique versions of that plug-in and

00:09:40,340 --> 00:09:43,400
I'll come back to those later and give

00:09:42,260 --> 00:09:47,150
you a little more in from information

00:09:43,400 --> 00:09:48,980
about derivatives but the thing you need

00:09:47,150 --> 00:09:51,890
to know is that for each plug-in ID

00:09:48,980 --> 00:09:53,690
which might just be a simple string that

00:09:51,890 --> 00:09:56,660
basically corresponds to a one-to-one

00:09:53,690 --> 00:09:59,060
mapping to a class so I have a specific

00:09:56,660 --> 00:10:00,890
plug-in ID every time I ask the plug-in

00:09:59,060 --> 00:10:02,480
manager for a plug-in with that ID it's

00:10:00,890 --> 00:10:04,820
gonna give me an instance of a specific

00:10:02,480 --> 00:10:06,200
class as I mentioned before you can

00:10:04,820 --> 00:10:08,990
actually go behind the scenes and

00:10:06,200 --> 00:10:10,670
replace substitute your preferred class

00:10:08,990 --> 00:10:13,850
for the class provided by a Drupal core

00:10:10,670 --> 00:10:15,800
module if you need to but again once

00:10:13,850 --> 00:10:18,590
once you've done that the one plug-in ID

00:10:15,800 --> 00:10:19,880
always Maps the same class finally we

00:10:18,590 --> 00:10:22,130
want to plug in instance we want

00:10:19,880 --> 00:10:24,080
something that's actually working and so

00:10:22,130 --> 00:10:25,510
we not only need to know the class we

00:10:24,080 --> 00:10:29,300
need to be able to instantiate the class

00:10:25,510 --> 00:10:30,890
and in general a plug-in instance so the

00:10:29,300 --> 00:10:33,110
thing you actually use is a combination

00:10:30,890 --> 00:10:35,810
of that class and then it is in Sanchi

00:10:33,110 --> 00:10:37,550
ated with specific configuration and

00:10:35,810 --> 00:10:38,990
we'll get back to that a little more but

00:10:37,550 --> 00:10:40,910
think about blocks if you use drop

00:10:38,990 --> 00:10:42,860
blocks in Drupal 8 you know that you can

00:10:40,910 --> 00:10:44,570
take the same block and you can place it

00:10:42,860 --> 00:10:46,610
as many times as you want in your site

00:10:44,570 --> 00:10:49,100
in different regions in different themes

00:10:46,610 --> 00:10:51,710
right so every one of those is the same

00:10:49,100 --> 00:10:53,600
plug-in ID using the same class but

00:10:51,710 --> 00:10:56,090
different configuration so it's that

00:10:53,600 --> 00:10:58,100
combination of the plug-in ID slash

00:10:56,090 --> 00:11:03,560
class and the configuration that gives

00:10:58,100 --> 00:11:05,690
you an actual useful block instance that

00:11:03,560 --> 00:11:08,420
Bella that configuration is off often

00:11:05,690 --> 00:11:09,920
can specify by a config entity

00:11:08,420 --> 00:11:11,119
so just store that in your mind we'll

00:11:09,920 --> 00:11:16,579
come back and talk about that a little

00:11:11,119 --> 00:11:19,720
bit more later okay so I said sort of an

00:11:16,579 --> 00:11:22,459
intro this talk is a little bit designed

00:11:19,720 --> 00:11:24,139
to be reassuring through people coming

00:11:22,459 --> 00:11:26,839
from Drupal seven that they can

00:11:24,139 --> 00:11:27,889
understand the code in Drupal eight so

00:11:26,839 --> 00:11:29,329
you know the saying the drop is always

00:11:27,889 --> 00:11:30,709
moving means we kind of break things and

00:11:29,329 --> 00:11:32,660
rearrange things between versions of

00:11:30,709 --> 00:11:34,699
Drupal but the message I have for you is

00:11:32,660 --> 00:11:36,829
that Drupal 8 and Drupal 7 still share

00:11:34,699 --> 00:11:38,660
he asserted the fundamental DNA and a

00:11:36,829 --> 00:11:39,980
lot of the code is actually line to line

00:11:38,660 --> 00:11:43,249
the same it's just moved to a different

00:11:39,980 --> 00:11:44,600
place so that's why the subtitle the

00:11:43,249 --> 00:11:47,269
talk where did the code go this is

00:11:44,600 --> 00:11:49,249
intended to give you some a sense of how

00:11:47,269 --> 00:11:51,379
the code moved from Drupal 7 and where

00:11:49,249 --> 00:11:54,790
it lives in Drupal 8 and how it works in

00:11:51,379 --> 00:11:54,790
parallel to how it worked in Drupal 7

00:11:55,059 --> 00:12:00,649
okay so the first info hook conversion I

00:11:58,399 --> 00:12:04,040
want to talk about is hook image

00:12:00,649 --> 00:12:05,240
toolkits and you might be complaining

00:12:04,040 --> 00:12:06,949
that this does not have the word info

00:12:05,240 --> 00:12:09,050
and the hook name sorry but it is

00:12:06,949 --> 00:12:10,639
actually an info hook info hooks just

00:12:09,050 --> 00:12:13,040
generally returned you an array of

00:12:10,639 --> 00:12:15,470
metadata and you see here the metadata

00:12:13,040 --> 00:12:18,290
has a top-level key of GD so that's the

00:12:15,470 --> 00:12:20,299
image toolkit we want to use we have a

00:12:18,290 --> 00:12:22,040
translated title and then we have a

00:12:20,299 --> 00:12:23,839
dynamic a key that's basically

00:12:22,040 --> 00:12:26,389
dynamically populated here with a method

00:12:23,839 --> 00:12:28,369
that says whether or not this image

00:12:26,389 --> 00:12:30,589
toolkit is available so this is pretty a

00:12:28,369 --> 00:12:33,740
simple info hook right you if you've

00:12:30,589 --> 00:12:36,879
ever implemented something like that you

00:12:33,740 --> 00:12:41,149
just return the metadata and that's it

00:12:36,879 --> 00:12:42,350
so in Drupal 8 things end up working the

00:12:41,149 --> 00:12:43,910
same way essentially but they're

00:12:42,350 --> 00:12:46,490
organized very differently and so in

00:12:43,910 --> 00:12:49,549
Drupal 8 this is a class that implements

00:12:46,490 --> 00:12:52,069
an image toolkit and you see above the

00:12:49,549 --> 00:12:53,809
class definition is the special code

00:12:52,069 --> 00:12:57,350
comment which is an annotation you see

00:12:53,809 --> 00:12:59,720
that at image tool kit and what Drupal 8

00:12:57,350 --> 00:13:01,519
is actually doing is it parses these

00:12:59,720 --> 00:13:03,379
annotations out so these annotations are

00:13:01,519 --> 00:13:06,139
not actually code comments in a pure

00:13:03,379 --> 00:13:08,149
sense they're actually providing Drupal

00:13:06,139 --> 00:13:10,040
information about this class and so they

00:13:08,149 --> 00:13:13,160
need to be formatted precisely they need

00:13:10,040 --> 00:13:14,209
to use the right keys and values to tell

00:13:13,160 --> 00:13:17,120
Drupal what you want to do with this

00:13:14,209 --> 00:13:19,730
class and so this at image toolkit

00:13:17,120 --> 00:13:21,049
annotation is parsed out and the result

00:13:19,730 --> 00:13:21,740
of that is actually essentially the same

00:13:21,049 --> 00:13:24,020
as the info

00:13:21,740 --> 00:13:25,630
hooking Drupal 7 so what we get back at

00:13:24,020 --> 00:13:28,850
a parsing this annotation is an array

00:13:25,630 --> 00:13:31,640
and you'll see the top-level key is this

00:13:28,850 --> 00:13:33,050
ID GD that's exactly the same as the

00:13:31,640 --> 00:13:36,290
top-level key that we use in the Drupal

00:13:33,050 --> 00:13:38,120
7 return value from the info hook we

00:13:36,290 --> 00:13:39,680
have again a translated title which is I

00:13:38,120 --> 00:13:43,250
think the same string as it was in

00:13:39,680 --> 00:13:44,870
Drupal 7 so the results of finding the

00:13:43,250 --> 00:13:46,940
plugins this process called plug-in

00:13:44,870 --> 00:13:48,980
discovery gives us an array of metadata

00:13:46,940 --> 00:13:53,120
that's essentially the same as the info

00:13:48,980 --> 00:13:54,800
hook return value in Drupal 7 and again

00:13:53,120 --> 00:13:58,370
you see we have a method here is

00:13:54,800 --> 00:13:59,900
available so this method is used then by

00:13:58,370 --> 00:14:03,710
the manager to do this sort of dynamic

00:13:59,900 --> 00:14:06,410
flagging that we did in Drupal 7

00:14:03,710 --> 00:14:08,030
so the plugins themselves can't give you

00:14:06,410 --> 00:14:09,320
this metadata back we actually need the

00:14:08,030 --> 00:14:10,490
manager right so I told you every

00:14:09,320 --> 00:14:13,760
plug-in type has a plug-in manager

00:14:10,490 --> 00:14:16,280
plug-in manager has a method to pull

00:14:13,760 --> 00:14:17,720
back the list available plugins this

00:14:16,280 --> 00:14:20,030
particular one get available toolkits

00:14:17,720 --> 00:14:21,170
and it's a little different than other

00:14:20,030 --> 00:14:22,640
plugin managers because it's going ahead

00:14:21,170 --> 00:14:25,490
and running this method on each image

00:14:22,640 --> 00:14:26,960
toolkit this is available method so just

00:14:25,490 --> 00:14:28,340
like in Drupal 7 we were dynamically

00:14:26,960 --> 00:14:30,110
setting the property saying is this

00:14:28,340 --> 00:14:32,180
toolkit actually available in the

00:14:30,110 --> 00:14:34,130
version of PHP I'm running in Drupal 8

00:14:32,180 --> 00:14:35,630
we're doing exactly the same thing we're

00:14:34,130 --> 00:14:37,670
checking if the image toolkit is

00:14:35,630 --> 00:14:38,840
available and if it's available we

00:14:37,670 --> 00:14:41,930
included in list if it's not available

00:14:38,840 --> 00:14:42,800
we leave it out of the list so hopefully

00:14:41,930 --> 00:14:45,380
that gives you a little sense again

00:14:42,800 --> 00:14:47,270
these these two things work almost

00:14:45,380 --> 00:14:48,890
exactly the same it's just the way we

00:14:47,270 --> 00:14:54,200
get to that information is a little bit

00:14:48,890 --> 00:14:55,790
different so let's dive in a little more

00:14:54,200 --> 00:14:57,590
so image tool kits aren't very useful if

00:14:55,790 --> 00:15:01,490
you can't actually work on images so you

00:14:57,590 --> 00:15:03,050
have operations that happen on images so

00:15:01,490 --> 00:15:05,300
the image to saturate function is

00:15:03,050 --> 00:15:07,070
example of this in Drupal 7 you see this

00:15:05,300 --> 00:15:09,970
function we're passing in a standard

00:15:07,070 --> 00:15:12,050
class objects that's a really boring

00:15:09,970 --> 00:15:13,820
object it just has some properties we

00:15:12,050 --> 00:15:15,170
set on it it doesn't have any methods

00:15:13,820 --> 00:15:18,610
doesn't tell us anything special about

00:15:15,170 --> 00:15:21,500
what it does and how do we actually

00:15:18,610 --> 00:15:24,320
carry out a method on this image we call

00:15:21,500 --> 00:15:27,280
image toolkit invoke so we delegate the

00:15:24,320 --> 00:15:29,420
actual work to the current image toolkit

00:15:27,280 --> 00:15:31,490
we're just passing the string saying

00:15:29,420 --> 00:15:33,590
desaturate so here's the object here's

00:15:31,490 --> 00:15:36,400
the operation image toolkit please

00:15:33,590 --> 00:15:36,400
handle this for us

00:15:36,530 --> 00:15:43,670
Drupal 8 works actually in a very

00:15:38,900 --> 00:15:45,020
similar way so we have the plugin the

00:15:43,670 --> 00:15:46,820
image toolkit plug-in that we need to

00:15:45,020 --> 00:15:50,000
call basically to have this desaturate

00:15:46,820 --> 00:15:51,500
ah operation happen in Drupal 8 we've

00:15:50,000 --> 00:15:53,630
turned the relationship a little bit on

00:15:51,500 --> 00:15:56,060
its head so instead of a standard class

00:15:53,630 --> 00:15:57,590
object we have a proper object now we

00:15:56,060 --> 00:15:59,870
have an image class and the image class

00:15:57,590 --> 00:16:02,720
has methods has predefined properties

00:15:59,870 --> 00:16:04,820
and so the image object essentially

00:16:02,720 --> 00:16:08,270
knows how to call desaturate on itself

00:16:04,820 --> 00:16:09,500
so it has a desaturate method you see

00:16:08,270 --> 00:16:11,630
the desaturate method that works

00:16:09,500 --> 00:16:13,670
basically the same as Drupal 7 it says

00:16:11,630 --> 00:16:15,650
here's a string operation desaturate and

00:16:13,670 --> 00:16:18,650
I'm going to just pass that off to the

00:16:15,650 --> 00:16:21,050
image toolkit that is currently active

00:16:18,650 --> 00:16:22,730
and ask the image toolkit to actually do

00:16:21,050 --> 00:16:24,980
the operation of desaturate

00:16:22,730 --> 00:16:26,420
so again Drupal 7 and Drupal 8 working

00:16:24,980 --> 00:16:28,460
almost exactly the same way it's just

00:16:26,420 --> 00:16:31,130
the organization of the code here it's

00:16:28,460 --> 00:16:34,510
inside the image object in Drupal 7 it

00:16:31,130 --> 00:16:38,360
was inside that image toolkit function

00:16:34,510 --> 00:16:40,430
finally we've got one level deeper and

00:16:38,360 --> 00:16:44,180
want to look at how this image toolkit

00:16:40,430 --> 00:16:45,710
actually did that work in Drupal 7 for

00:16:44,180 --> 00:16:47,360
hooks and many things like these image

00:16:45,710 --> 00:16:48,770
toolkit operations we had this process

00:16:47,360 --> 00:16:51,740
of building up a function named by

00:16:48,770 --> 00:16:53,180
prefixes we'd say hey alright so this is

00:16:51,740 --> 00:16:54,860
an image operation so the first part of

00:16:53,180 --> 00:16:56,540
the function name must be image it's the

00:16:54,860 --> 00:16:58,820
GD toolkit so the second part of the

00:16:56,540 --> 00:17:00,320
function name must be GD and the

00:16:58,820 --> 00:17:01,520
operations desaturate so that must be

00:17:00,320 --> 00:17:03,170
the third part of the function name and

00:17:01,520 --> 00:17:05,839
if that function exists I'm going to

00:17:03,170 --> 00:17:08,959
call it and nothing would go wrong right

00:17:05,839 --> 00:17:10,400
that did it everyone ever have a case

00:17:08,959 --> 00:17:12,650
where you accidentally implemented a

00:17:10,400 --> 00:17:15,199
hook or something just by accidentally

00:17:12,650 --> 00:17:17,540
naming it yeah right that was it could

00:17:15,199 --> 00:17:18,650
be a little scary so again right like

00:17:17,540 --> 00:17:20,150
duple doesn't actually know that this

00:17:18,650 --> 00:17:21,980
function is going to exist ahead of time

00:17:20,150 --> 00:17:25,150
it just builds up the name and it sort

00:17:21,980 --> 00:17:27,589
of calls a function exists great call it

00:17:25,150 --> 00:17:30,350
well you see inside there it's pretty

00:17:27,589 --> 00:17:32,000
simple code we're just checking if the

00:17:30,350 --> 00:17:35,720
PHP version we have supports this

00:17:32,000 --> 00:17:38,870
operation if not we log a warning or

00:17:35,720 --> 00:17:40,580
notice in return and then we call the

00:17:38,870 --> 00:17:43,900
function built-in function on the

00:17:40,580 --> 00:17:46,429
resource and say convert it to grayscale

00:17:43,900 --> 00:17:48,809
Drupal 8 there we go this one level

00:17:46,429 --> 00:17:50,940
deeper each individual operation

00:17:48,809 --> 00:17:52,710
also a plug in and as I talked about

00:17:50,940 --> 00:17:54,389
your sort of ability to substitute

00:17:52,710 --> 00:17:56,279
things in Drupal 8 if you didn't like

00:17:54,389 --> 00:17:58,019
the way this particular operation worked

00:17:56,279 --> 00:17:59,279
on images you wanted to behave

00:17:58,019 --> 00:18:00,870
differently you could substitute a

00:17:59,279 --> 00:18:02,669
different class for this specific

00:18:00,870 --> 00:18:04,200
operation and none of the rest of Drupal

00:18:02,669 --> 00:18:06,749
would be any of the wiser it would call

00:18:04,200 --> 00:18:09,809
this your preferred class instead of the

00:18:06,749 --> 00:18:11,700
built-in one that comes with core so

00:18:09,809 --> 00:18:13,080
here you see this is again a plug-in we

00:18:11,700 --> 00:18:17,610
have a different annotation we have an

00:18:13,080 --> 00:18:19,350
image toolkit operation annotation an ID

00:18:17,610 --> 00:18:21,450
we're told is associated with the GE

00:18:19,350 --> 00:18:24,960
toolkit and that it's going to do the

00:18:21,450 --> 00:18:26,940
desaturate operation but you'll see that

00:18:24,960 --> 00:18:28,889
inside there the code is essentially

00:18:26,940 --> 00:18:31,980
identical to the Drupal 7 code so

00:18:28,889 --> 00:18:33,749
executing this desaturate option we're

00:18:31,980 --> 00:18:35,580
again checking and the exactly the same

00:18:33,749 --> 00:18:37,590
built-in function exists if it doesn't

00:18:35,580 --> 00:18:39,929
exist we login notice and if it does

00:18:37,590 --> 00:18:41,669
exist we go ahead and we perform the

00:18:39,929 --> 00:18:43,679
grayscale operation on the related image

00:18:41,669 --> 00:18:45,240
resource so again what there's a

00:18:43,679 --> 00:18:47,129
one-to-one mapping between what happened

00:18:45,240 --> 00:18:49,769
in Drupal 7 what's happening in Drupal 8

00:18:47,129 --> 00:18:52,110
but the code went from those hooks from

00:18:49,769 --> 00:18:55,769
those functions name based on prefixes

00:18:52,110 --> 00:18:57,059
into these plug-in classes so code is

00:18:55,769 --> 00:18:59,249
still there it still works the same way

00:18:57,059 --> 00:19:02,369
it's still kind of Drupal but it went

00:18:59,249 --> 00:19:07,230
into these class-based plugins instead

00:19:02,369 --> 00:19:08,759
of being in functions okay so you may be

00:19:07,230 --> 00:19:09,960
thinking what about hooks

00:19:08,759 --> 00:19:16,259
I remember hooks as being the most

00:19:09,960 --> 00:19:17,730
important thing in Drupal and for good

00:19:16,259 --> 00:19:19,860
or ill hooks still have their place in

00:19:17,730 --> 00:19:22,470
Drupal 8 in fact there might even be

00:19:19,860 --> 00:19:24,269
more hooks in Drupal 8 and the reason

00:19:22,470 --> 00:19:26,070
for that is that every one of these

00:19:24,269 --> 00:19:28,980
plug-in managers basically implements an

00:19:26,070 --> 00:19:30,899
altar hook or provides an altar hook so

00:19:28,980 --> 00:19:33,330
that this is the way you in your module

00:19:30,899 --> 00:19:35,490
can go in and change what these plug-in

00:19:33,330 --> 00:19:37,200
managers are doing which classes they're

00:19:35,490 --> 00:19:40,139
using for a given plug-in or even which

00:19:37,200 --> 00:19:42,480
plugins are available in the system so

00:19:40,139 --> 00:19:44,610
this is if you're thinking about you

00:19:42,480 --> 00:19:46,350
know how can I change the behavior of my

00:19:44,610 --> 00:19:49,049
site I want to change the way one of

00:19:46,350 --> 00:19:50,309
these plugins operates this altar hook

00:19:49,049 --> 00:19:51,419
would usually be the first place you'd

00:19:50,309 --> 00:19:52,950
want to look and you could go in your

00:19:51,419 --> 00:19:54,929
module and just do a quick substitution

00:19:52,950 --> 00:19:57,779
say use my class instead of the built in

00:19:54,929 --> 00:19:59,820
class from Drupal core so in example

00:19:57,779 --> 00:20:01,320
hook block alter so might be one you

00:19:59,820 --> 00:20:02,610
want to use you're not quite happy with

00:20:01,320 --> 00:20:04,230
the way a core block works

00:20:02,610 --> 00:20:06,210
you want to subclass to change its

00:20:04,230 --> 00:20:08,640
behavior you could go in and in hook

00:20:06,210 --> 00:20:12,059
block alter say use my modules block

00:20:08,640 --> 00:20:16,770
instead of Drupal cores block and that

00:20:12,059 --> 00:20:18,330
would happen so there's also hooks that

00:20:16,770 --> 00:20:21,000
really weren't candidates for being

00:20:18,330 --> 00:20:23,600
converted to plugins so there were info

00:20:21,000 --> 00:20:26,010
hooks that just returned a data array

00:20:23,600 --> 00:20:27,090
and they didn't have any associated code

00:20:26,010 --> 00:20:29,640
they didn't have that implementation

00:20:27,090 --> 00:20:30,960
hook and so there was no reason that

00:20:29,640 --> 00:20:33,780
those would become plugins is all they

00:20:30,960 --> 00:20:36,690
were was metadata but you may find some

00:20:33,780 --> 00:20:38,910
of these hooks probably all most of them

00:20:36,690 --> 00:20:40,290
got removed also and what happened to

00:20:38,910 --> 00:20:42,679
those instead of making them plugins we

00:20:40,290 --> 00:20:45,270
just turned them into static EML files

00:20:42,679 --> 00:20:47,460
if people aren't familiar with the ml

00:20:45,270 --> 00:20:48,840
this is a sort of fairly simple human

00:20:47,460 --> 00:20:51,210
readable way to write a data file

00:20:48,840 --> 00:20:53,970
basically right to write out arrays into

00:20:51,210 --> 00:20:57,000
a file in a way that's safe for drupal

00:20:53,970 --> 00:20:59,340
to parse it back in so an example of

00:20:57,000 --> 00:21:00,480
this in Drupal 8 is hook permissions if

00:20:59,340 --> 00:21:02,669
you remember hook permissions from

00:21:00,480 --> 00:21:04,140
Drupal 7 hook permissions just gave you

00:21:02,669 --> 00:21:05,610
back an array said here's the

00:21:04,140 --> 00:21:07,650
permissions here's what I call them in

00:21:05,610 --> 00:21:09,090
the admin UI here's a flag that says if

00:21:07,650 --> 00:21:11,100
it's a dangerous admin permission things

00:21:09,090 --> 00:21:13,320
like that right but there's no logic

00:21:11,100 --> 00:21:15,570
there's no execute permission function

00:21:13,320 --> 00:21:16,919
right so in Drupal 8 permissions are

00:21:15,570 --> 00:21:19,200
actually stored in these yamo files

00:21:16,919 --> 00:21:20,669
associated with your module so and

00:21:19,200 --> 00:21:22,919
Drupal just knows how to parse the

00:21:20,669 --> 00:21:24,090
yellow file into an array so the end

00:21:22,919 --> 00:21:25,350
result is the same

00:21:24,090 --> 00:21:26,790
in Drupal 7 you got an array of

00:21:25,350 --> 00:21:28,500
permissions in Drupal 8 you get an array

00:21:26,790 --> 00:21:32,549
of permissions it just stored now in a

00:21:28,500 --> 00:21:33,840
file instead of being in PHP code so

00:21:32,549 --> 00:21:36,240
there's a few other great hooks that we

00:21:33,840 --> 00:21:37,950
all love like hook cron that actually is

00:21:36,240 --> 00:21:40,140
still more or less the same in Drupal 8

00:21:37,950 --> 00:21:41,610
things like hook entity access you don't

00:21:40,140 --> 00:21:43,530
want to mess around with access controls

00:21:41,610 --> 00:21:44,730
some of these weren't converted because

00:21:43,530 --> 00:21:47,370
of lack of time or some of them it's

00:21:44,730 --> 00:21:49,049
just still it's such a Drupal thing to

00:21:47,370 --> 00:21:50,940
change any access that there wasn't a

00:21:49,049 --> 00:21:55,590
clear mapping it is some more object

00:21:50,940 --> 00:21:57,630
oriented strategy there okay so I've

00:21:55,590 --> 00:21:59,280
mentioned plug-in discovery already

00:21:57,630 --> 00:22:01,500
plug-in discovery is how the plug-in

00:21:59,280 --> 00:22:04,890
manager gets the metadata about your

00:22:01,500 --> 00:22:07,080
plugins and I basically told you it's

00:22:04,890 --> 00:22:09,000
it's the same more or less in the end

00:22:07,080 --> 00:22:10,860
result as invoking an info hook you get

00:22:09,000 --> 00:22:12,630
an array of metadata it tells you about

00:22:10,860 --> 00:22:14,910
the available plugins and some things

00:22:12,630 --> 00:22:16,380
about their definitions in fact if you

00:22:14,910 --> 00:22:19,799
wanted to you could actually

00:22:16,380 --> 00:22:21,779
implement a plug-in pipe that had an

00:22:19,799 --> 00:22:23,730
info hook as this discovery mechanism

00:22:21,779 --> 00:22:25,500
I wouldn't recommend this Drupal core

00:22:23,730 --> 00:22:28,529
doesn't do it except in a test to verify

00:22:25,500 --> 00:22:29,909
that it so works but you can think about

00:22:28,529 --> 00:22:32,360
it again the results of plug-in

00:22:29,909 --> 00:22:34,679
discovery is just an array of metadata

00:22:32,360 --> 00:22:37,470
and that gives you an array a plug-in

00:22:34,679 --> 00:22:39,600
definitions and that's just string keys

00:22:37,470 --> 00:22:40,590
and values it's nothing exciting but it

00:22:39,600 --> 00:22:43,740
just tells you the basic information

00:22:40,590 --> 00:22:46,769
about things like plug-in IDs which

00:22:43,740 --> 00:22:49,289
class to use various things the plug-in

00:22:46,769 --> 00:22:50,879
process also fills in defaults so every

00:22:49,289 --> 00:22:52,919
plug-in wants to know its provider which

00:22:50,879 --> 00:22:55,889
is the the module that's defining that

00:22:52,919 --> 00:23:00,029
specific plug-in and discovery can make

00:22:55,889 --> 00:23:01,559
derivatives and so derivatives are a

00:23:00,029 --> 00:23:04,649
case of where you get many plugins

00:23:01,559 --> 00:23:06,899
basically out of one plug-in definition

00:23:04,649 --> 00:23:08,669
and so let me explain that a little more

00:23:06,899 --> 00:23:11,820
and then I won't talk about it again

00:23:08,669 --> 00:23:14,850
but a interesting example in Drupal core

00:23:11,820 --> 00:23:17,009
is the fueled UI local task so filled UI

00:23:14,850 --> 00:23:19,889
local task is to plug in and it wants to

00:23:17,009 --> 00:23:23,190
put a local task which is a tab usually

00:23:19,889 --> 00:23:25,440
in the UI on every bundle of every

00:23:23,190 --> 00:23:27,059
entity so that I can manage the fields

00:23:25,440 --> 00:23:29,279
associated with every bundle of every

00:23:27,059 --> 00:23:30,929
entity so if you think about that right

00:23:29,279 --> 00:23:33,120
away you say well I can't know in

00:23:30,929 --> 00:23:35,340
advance which entities are going to be

00:23:33,120 --> 00:23:37,980
defined in my system and which bundles

00:23:35,340 --> 00:23:39,870
are going to be so bundles are the same

00:23:37,980 --> 00:23:41,070
basically as no types in Drupal 7 right

00:23:39,870 --> 00:23:42,629
so I have different energy types they

00:23:41,070 --> 00:23:44,730
have different bundles like node types

00:23:42,629 --> 00:23:47,519
for every single one of those I need to

00:23:44,730 --> 00:23:48,960
define a tab that's in the admin

00:23:47,519 --> 00:23:50,669
interface associated with that entity

00:23:48,960 --> 00:23:53,039
and it's bundle so I can manage the

00:23:50,669 --> 00:23:55,019
fields associated with that entity and

00:23:53,039 --> 00:23:57,990
bundle so derivatives are the way we

00:23:55,019 --> 00:24:00,659
handle that case so that plug-in knows

00:23:57,990 --> 00:24:02,120
how to query Drupal find a list of all

00:24:00,659 --> 00:24:04,639
energy types and all bundles and

00:24:02,120 --> 00:24:06,779
dynamically make a derivative plug-in

00:24:04,639 --> 00:24:09,750
associated with each one of those any

00:24:06,779 --> 00:24:12,059
types and any bundles stick that tab on

00:24:09,750 --> 00:24:14,039
the Associated admin page allow you to

00:24:12,059 --> 00:24:15,750
manage the fields so this is basically

00:24:14,039 --> 00:24:16,830
where derivatives are useful you have

00:24:15,750 --> 00:24:19,080
something in your system in this dynamic

00:24:16,830 --> 00:24:21,570
something like entity types the bundles

00:24:19,080 --> 00:24:23,879
the available languages for example and

00:24:21,570 --> 00:24:25,830
I want you to define a tab or I want to

00:24:23,879 --> 00:24:27,480
create some available behavior

00:24:25,830 --> 00:24:29,980
associated with each one of those

00:24:27,480 --> 00:24:31,690
dynamic things so I can have it

00:24:29,980 --> 00:24:34,179
I can query Drupal find all those

00:24:31,690 --> 00:24:37,960
dynamic things and associate a plug-in

00:24:34,179 --> 00:24:40,000
with each one of them so that's it for

00:24:37,960 --> 00:24:43,270
driven people have questions at the end

00:24:40,000 --> 00:24:45,160
we can talk more about them let me just

00:24:43,270 --> 00:24:48,850
give you a little overview of how

00:24:45,160 --> 00:24:51,660
plug-in discovery works most commonly in

00:24:48,850 --> 00:24:53,530
Drupal core so you have to sort of broad

00:24:51,660 --> 00:24:54,790
categories I would say which is the

00:24:53,530 --> 00:24:56,350
yellow base discovery and then

00:24:54,790 --> 00:24:58,049
annotation base discovery and I showed

00:24:56,350 --> 00:24:59,740
you a couple examples already of

00:24:58,049 --> 00:25:03,010
annotations

00:24:59,740 --> 00:25:04,360
yamo based are for a bunch of these

00:25:03,010 --> 00:25:07,000
things that we pulled out of hook menu

00:25:04,360 --> 00:25:08,860
in Drupal 7 so we have the many links

00:25:07,000 --> 00:25:10,750
local tasks local actions contextual

00:25:08,860 --> 00:25:14,799
links these are the things you most

00:25:10,750 --> 00:25:16,270
might most often use Gemmell base

00:25:14,799 --> 00:25:19,929
discovery in Drupal 8 which means you

00:25:16,270 --> 00:25:21,730
basically just author a yellow file in

00:25:19,929 --> 00:25:23,140
your modules directory and that would

00:25:21,730 --> 00:25:27,640
basically tell Drupal that there should

00:25:23,140 --> 00:25:30,160
be a plug-in created with some specific

00:25:27,640 --> 00:25:31,900
definition and we'll go into those and

00:25:30,160 --> 00:25:34,929
show you what a local task a plug-in

00:25:31,900 --> 00:25:36,370
implementation might look like and the

00:25:34,929 --> 00:25:38,860
reason we do that is that basically all

00:25:36,370 --> 00:25:41,230
of these things all the the local tasks

00:25:38,860 --> 00:25:45,520
more or less or 95% of them use the same

00:25:41,230 --> 00:25:47,049
class behind the scene in contrast most

00:25:45,520 --> 00:25:49,090
of the plug-in systems the Drupal core

00:25:47,049 --> 00:25:50,590
use annotation this is a couple of these

00:25:49,090 --> 00:25:53,980
one I showed you already the image

00:25:50,590 --> 00:25:55,929
toolkit which uses annotation and maybe

00:25:53,980 --> 00:25:58,390
some configuration but doesn't have a

00:25:55,929 --> 00:26:01,120
config entity then the vast vast

00:25:58,390 --> 00:26:03,370
majority of plugins in Drupal 8 use a

00:26:01,120 --> 00:26:06,460
combination of an annotation based

00:26:03,370 --> 00:26:08,830
plug-in discovery system and a config

00:26:06,460 --> 00:26:11,290
entity in order to combine those things

00:26:08,830 --> 00:26:14,830
together and give you this is a specific

00:26:11,290 --> 00:26:16,059
plug-in instance so things like blocks

00:26:14,830 --> 00:26:18,250
which I've referenced a bunch of times

00:26:16,059 --> 00:26:19,750
we'll talk about more views all the

00:26:18,250 --> 00:26:22,780
views plugins so like a views display

00:26:19,750 --> 00:26:24,880
image effects searches if you wanted to

00:26:22,780 --> 00:26:27,730
find a search so those also use a

00:26:24,880 --> 00:26:30,400
combination of annotation and a config

00:26:27,730 --> 00:26:32,799
entity finally just a little warning if

00:26:30,400 --> 00:26:35,410
you want to go look at the code and

00:26:32,799 --> 00:26:38,290
figure out how plugins work the energy

00:26:35,410 --> 00:26:40,750
system in Drupal more or less works like

00:26:38,290 --> 00:26:42,280
a plugin it has annotations but there's

00:26:40,750 --> 00:26:43,480
so many things layered on top of the

00:26:42,280 --> 00:26:45,460
entity system you

00:26:43,480 --> 00:26:47,380
should not try to use the energy system

00:26:45,460 --> 00:26:48,940
to understand the plug-in system so

00:26:47,380 --> 00:26:50,740
start with a much simpler plug-in system

00:26:48,940 --> 00:26:52,630
even like the block system which is a

00:26:50,740 --> 00:26:54,220
little bit complex is much easier to

00:26:52,630 --> 00:26:55,960
understand than the energy system so

00:26:54,220 --> 00:26:58,419
focus on one of these other ones if you

00:26:55,960 --> 00:26:59,980
want to understand how plugins work the

00:26:58,419 --> 00:27:01,539
energy system obviously is great for a

00:26:59,980 --> 00:27:06,039
lot of things but but it's not an easy

00:27:01,539 --> 00:27:09,760
example to dive into first thing okay

00:27:06,039 --> 00:27:10,899
so as I say the beginning we're going to

00:27:09,760 --> 00:27:12,700
look at a little code I'm going to show

00:27:10,899 --> 00:27:15,669
you how you can implement in a module

00:27:12,700 --> 00:27:16,929
some of these plugins so the we're gonna

00:27:15,669 --> 00:27:20,289
get started with a Drupal 8 plug-in

00:27:16,929 --> 00:27:22,289
toolkit so you need a module you're

00:27:20,289 --> 00:27:25,389
gonna write your own module in Drupal 8

00:27:22,289 --> 00:27:28,330
all you need to define a module in

00:27:25,389 --> 00:27:29,139
Drupal 8 is a info yml file which is a

00:27:28,330 --> 00:27:32,260
yellow file

00:27:29,139 --> 00:27:34,659
I said yeah Moe is all over Drupal 8 so

00:27:32,260 --> 00:27:36,909
you don't even need an empty module file

00:27:34,659 --> 00:27:38,590
in Drupal 7 you needed at least a dot

00:27:36,909 --> 00:27:40,570
module file to exist in the file system

00:27:38,590 --> 00:27:42,010
in Drupal 8 you don't even need that you

00:27:40,570 --> 00:27:43,809
could just write this one e mo file and

00:27:42,010 --> 00:27:46,570
Drupal recognize your module and allow

00:27:43,809 --> 00:27:49,090
you to enable it the reason for that is

00:27:46,570 --> 00:27:51,429
that most of the module code is now in

00:27:49,090 --> 00:27:53,769
classes it's not in the dot module file

00:27:51,429 --> 00:27:55,299
so it's perfectly fine for the not to be

00:27:53,769 --> 00:27:56,440
module module file because all you might

00:27:55,299 --> 00:28:00,159
have in there would be a few hooks

00:27:56,440 --> 00:28:01,710
anyway the other thing that's fun

00:28:00,159 --> 00:28:04,409
tonight about Drupal 8 is the code

00:28:01,710 --> 00:28:06,340
codebase was reorganized and if you ever

00:28:04,409 --> 00:28:08,320
developed a site and handed it over to

00:28:06,340 --> 00:28:09,970
someone in Drupal 7 you had to keep

00:28:08,320 --> 00:28:11,769
telling them over and over again don't

00:28:09,970 --> 00:28:14,289
put modules in the modules directory

00:28:11,769 --> 00:28:16,149
that would make sense but don't do it

00:28:14,289 --> 00:28:19,450
you have to put it in sites all modules

00:28:16,149 --> 00:28:20,919
something right Drupal 8 is different

00:28:19,450 --> 00:28:22,570
Drupal 8 you can actually put all your

00:28:20,919 --> 00:28:24,909
modules directly in the modules

00:28:22,570 --> 00:28:26,620
directory all the core modules now live

00:28:24,909 --> 00:28:29,470
under the core directory under core

00:28:26,620 --> 00:28:31,779
modules so people that you don't see

00:28:29,470 --> 00:28:33,610
them it's under the core directory I and

00:28:31,779 --> 00:28:35,289
you can actually go ahead now and put

00:28:33,610 --> 00:28:36,610
all of your custom modules or you

00:28:35,289 --> 00:28:38,230
contribute to modules under the top

00:28:36,610 --> 00:28:40,799
levels model modules directory it's a

00:28:38,230 --> 00:28:44,019
lot easier to find and manage them so

00:28:40,799 --> 00:28:47,350
here's what basically all you would need

00:28:44,019 --> 00:28:49,570
to write to enable a custom module have

00:28:47,350 --> 00:28:51,460
it appear in the UI and turn it on all

00:28:49,570 --> 00:28:52,870
the code I'm showing you is in a sandbox

00:28:51,460 --> 00:28:54,220
I'll give you a link at the end if you

00:28:52,870 --> 00:28:56,320
want to clone that sandbox and look at

00:28:54,220 --> 00:28:58,240
the code yourself turn it on in a Drupal

00:28:56,320 --> 00:29:02,770
8 site play

00:28:58,240 --> 00:29:04,780
so the the info tamil file contents

00:29:02,770 --> 00:29:06,669
looks basically the same as a done info

00:29:04,780 --> 00:29:09,159
file in Drupal 7 it tells you the name

00:29:06,669 --> 00:29:10,570
tells you this is a module options they

00:29:09,159 --> 00:29:12,549
are basically module profile and theme

00:29:10,570 --> 00:29:16,390
for the type description and of course

00:29:12,549 --> 00:29:18,280
that it's a Drupal 8 module so once

00:29:16,390 --> 00:29:21,070
we've done that we can start adding some

00:29:18,280 --> 00:29:23,559
plugins to our module so I'm going to

00:29:21,070 --> 00:29:26,289
add two local tasks local task tabs I

00:29:23,559 --> 00:29:28,000
don't know what term people prefer so in

00:29:26,289 --> 00:29:29,860
order to that all I have to do is write

00:29:28,000 --> 00:29:33,240
a yamo file I just have to follow this

00:29:29,860 --> 00:29:36,780
naming pattern my module links tasks yml

00:29:33,240 --> 00:29:40,690
in that file it's a very simple format

00:29:36,780 --> 00:29:42,460
the top-level key is the plug-in ID so I

00:29:40,690 --> 00:29:43,870
talked about plug-in IDs a plug-in ID is

00:29:42,460 --> 00:29:47,650
going to map to a class that's going to

00:29:43,870 --> 00:29:49,000
provide the functionality route name so

00:29:47,650 --> 00:29:51,820
I told you a route name is a machine

00:29:49,000 --> 00:29:54,340
name as basically tells you how this tab

00:29:51,820 --> 00:29:56,049
it's gonna have a link rendered to peer

00:29:54,340 --> 00:29:58,990
on the tab so the link is gonna link to

00:29:56,049 --> 00:30:01,570
that route name wherever that goes the

00:29:58,990 --> 00:30:04,299
title and then a base route and so this

00:30:01,570 --> 00:30:06,640
is new in Drupal 8 when we rewrote this

00:30:04,299 --> 00:30:08,559
local task system I was really sick of

00:30:06,640 --> 00:30:10,480
this default local task thing that used

00:30:08,559 --> 00:30:12,580
to have to do in Drupal 7 jump through

00:30:10,480 --> 00:30:13,990
hoops to make 2 tabs appear together so

00:30:12,580 --> 00:30:16,539
in Drupal 8 basically this is all you

00:30:13,990 --> 00:30:18,130
have to do you just tell it ok this base

00:30:16,539 --> 00:30:19,630
route is sort of the grouping principle

00:30:18,130 --> 00:30:21,760
all my tabs are gonna appear together

00:30:19,630 --> 00:30:24,520
there and the one the first one you see

00:30:21,760 --> 00:30:26,260
that route is it's the route that it's

00:30:24,520 --> 00:30:28,659
linked to so that's going to be the

00:30:26,260 --> 00:30:30,400
default tab so the default tab is the

00:30:28,659 --> 00:30:31,659
one that links to the base route all the

00:30:30,400 --> 00:30:33,520
other tabs are going to be the secondary

00:30:31,659 --> 00:30:35,350
tabs associated with it so if we this

00:30:33,520 --> 00:30:36,820
makes for a little easier developer

00:30:35,350 --> 00:30:39,850
experience easier to wrap your head

00:30:36,820 --> 00:30:42,520
around so I put this on my module I turn

00:30:39,850 --> 00:30:43,840
it on you may have to clear cache if you

00:30:42,520 --> 00:30:45,789
write a new file of course does the

00:30:43,840 --> 00:30:48,340
plug-in manager is cache the definitions

00:30:45,789 --> 00:30:51,490
they found before but once I do that I

00:30:48,340 --> 00:30:53,710
get two tabs appearing on the page and

00:30:51,490 --> 00:30:55,630
you'll see the right tab the right-hand

00:30:53,710 --> 00:30:59,020
screenshot is the default tab the list

00:30:55,630 --> 00:31:02,470
tab and that has path admin config my

00:30:59,020 --> 00:31:05,289
module list the screenshot behind on the

00:31:02,470 --> 00:31:09,190
left is the secondary tab has path admin

00:31:05,289 --> 00:31:10,700
config also my module settings so what

00:31:09,190 --> 00:31:12,080
have I done here

00:31:10,700 --> 00:31:14,390
if you remember we were using Route

00:31:12,080 --> 00:31:16,580
names route names use our machine names

00:31:14,390 --> 00:31:18,680
so Drupal no longer cares about the two

00:31:16,580 --> 00:31:19,940
paths I can put these two tabs right

00:31:18,680 --> 00:31:22,870
next to each other in the admin page

00:31:19,940 --> 00:31:25,730
even though the paths are not hierarchy

00:31:22,870 --> 00:31:27,620
hierarchically related in any way so

00:31:25,730 --> 00:31:30,380
this is a cute little feature of Drupal

00:31:27,620 --> 00:31:31,790
8 hopefully makes it easier to build

00:31:30,380 --> 00:31:33,680
admin interfaces because you no longer

00:31:31,790 --> 00:31:35,870
have to jump through hoops aligning the

00:31:33,680 --> 00:31:37,730
paths where your pages appear in order

00:31:35,870 --> 00:31:41,390
to have a group of tabs of related

00:31:37,730 --> 00:31:43,280
functionality okay and you see I printed

00:31:41,390 --> 00:31:44,540
some output on these two pages and now

00:31:43,280 --> 00:31:46,010
you may be wondering wait a minute

00:31:44,540 --> 00:31:48,080
I think he just skipped a step because

00:31:46,010 --> 00:31:50,060
he pointed to some routes and he didn't

00:31:48,080 --> 00:31:52,250
tell us about the routes so yes all

00:31:50,060 --> 00:31:54,530
right I skipped a step so we back up we

00:31:52,250 --> 00:31:55,790
also need to define the two routes see

00:31:54,530 --> 00:31:57,020
these are custom routes in the module

00:31:55,790 --> 00:32:01,580
again if you pull down the code you can

00:31:57,020 --> 00:32:04,010
look at these so the most common way in

00:32:01,580 --> 00:32:06,560
Drupal 8 to define routes is again a

00:32:04,010 --> 00:32:07,970
yamo file

00:32:06,560 --> 00:32:10,610
so again if you're not familiar with the

00:32:07,970 --> 00:32:12,800
mo files please read up on them

00:32:10,610 --> 00:32:14,660
so this looks very similar to the

00:32:12,800 --> 00:32:18,050
plug-in definitions but it's a routing

00:32:14,660 --> 00:32:19,870
definition and most of the keys in here

00:32:18,050 --> 00:32:22,490
are actually taken from the symphony

00:32:19,870 --> 00:32:24,230
routing system so you can actually find

00:32:22,490 --> 00:32:25,340
discover most of the things that are

00:32:24,230 --> 00:32:28,460
going on here by looking at the symphony

00:32:25,340 --> 00:32:29,930
documentation and again it's pretty

00:32:28,460 --> 00:32:31,910
simple the top-level key is the route

00:32:29,930 --> 00:32:33,260
name you see module dot list or module

00:32:31,910 --> 00:32:36,460
dot settings those are the two route

00:32:33,260 --> 00:32:39,770
names there's a path where does this

00:32:36,460 --> 00:32:41,240
route actually go what path is connected

00:32:39,770 --> 00:32:42,770
to this route and then the controller

00:32:41,240 --> 00:32:46,310
which is essentially the page callback

00:32:42,770 --> 00:32:47,750
and these two controllers i define are

00:32:46,310 --> 00:32:48,800
stupidly simple I'm not even going to

00:32:47,750 --> 00:32:50,120
show you the code it basically just

00:32:48,800 --> 00:32:52,760
prints out the class name and method

00:32:50,120 --> 00:32:55,010
it's in the it's in the example code a

00:32:52,760 --> 00:32:57,110
title and then access check which is

00:32:55,010 --> 00:33:00,350
just true so anyone can access these two

00:32:57,110 --> 00:33:02,420
pages so this is how you define a route

00:33:00,350 --> 00:33:04,190
in your module and then when we have

00:33:02,420 --> 00:33:05,960
these wrap defined again then we can use

00:33:04,190 --> 00:33:08,120
them for things like our local tasks

00:33:05,960 --> 00:33:09,470
link to them or we can use them in the

00:33:08,120 --> 00:33:12,980
block you'll see later linking to them

00:33:09,470 --> 00:33:17,990
from our block ok great so hopefully

00:33:12,980 --> 00:33:19,610
that's moving as horror but you may may

00:33:17,990 --> 00:33:21,350
be wondering ok I saw you wrote those

00:33:19,610 --> 00:33:23,870
two yellow files to define the plugins

00:33:21,350 --> 00:33:24,530
but how the hell do I know what valid

00:33:23,870 --> 00:33:26,900
keys

00:33:24,530 --> 00:33:28,880
GMO files and what do they mean and so

00:33:26,900 --> 00:33:31,220
that's a something you have to dig in a

00:33:28,880 --> 00:33:33,800
little bit and we've put those that

00:33:31,220 --> 00:33:35,030
information on in the plugin managers so

00:33:33,800 --> 00:33:36,920
the EML files aren't really self

00:33:35,030 --> 00:33:40,040
documenting the way you'll see that

00:33:36,920 --> 00:33:41,510
class annotations can be but the in the

00:33:40,040 --> 00:33:43,550
plugin manager you see here is the list

00:33:41,510 --> 00:33:46,400
of all the valid keys if you're defining

00:33:43,550 --> 00:33:48,260
a local task or tab so some of them we

00:33:46,400 --> 00:33:50,240
already saw like the route name the

00:33:48,260 --> 00:33:51,410
route parameters goes along with the

00:33:50,240 --> 00:33:53,000
route name and that's things like a note

00:33:51,410 --> 00:33:55,720
ID so if you want to link to a specific

00:33:53,000 --> 00:33:58,310
node that would be a route parameter

00:33:55,720 --> 00:34:00,560
title the base route I told you about is

00:33:58,310 --> 00:34:02,750
where they're grouped a parent ID allows

00:34:00,560 --> 00:34:04,820
you to have a hierarchy of of tasks of

00:34:02,750 --> 00:34:07,070
tabs so if you remember making secondary

00:34:04,820 --> 00:34:08,750
tabs based again on a convoluted system

00:34:07,070 --> 00:34:10,820
of paths and previous versions Drupal

00:34:08,750 --> 00:34:12,200
now all you have to say is this

00:34:10,820 --> 00:34:15,710
particular plugin I want to be

00:34:12,200 --> 00:34:18,020
underneath it and that works with that

00:34:15,710 --> 00:34:20,240
parent ID wait the options for rendering

00:34:18,020 --> 00:34:22,909
the URL and again the class so if you

00:34:20,240 --> 00:34:24,890
want to have a specific class rather

00:34:22,909 --> 00:34:31,730
than the default class you can provide

00:34:24,890 --> 00:34:33,530
that in your plug-in definition okay so

00:34:31,730 --> 00:34:35,270
that was a pretty simple example in a

00:34:33,530 --> 00:34:36,980
way all I had to do was essentially

00:34:35,270 --> 00:34:38,929
defined some routes or used some

00:34:36,980 --> 00:34:41,060
existing routes and then write a yellow

00:34:38,929 --> 00:34:42,679
file to get two tabs to appear which are

00:34:41,060 --> 00:34:44,780
basically implementing plugins in my

00:34:42,679 --> 00:34:46,669
module so we're now we're gonna go into

00:34:44,780 --> 00:34:47,960
blocks and this is I think a really

00:34:46,669 --> 00:34:49,640
common use case one of the first things

00:34:47,960 --> 00:34:52,370
people might do in a custom module say I

00:34:49,640 --> 00:34:53,810
want to block exposes a widget it gives

00:34:52,370 --> 00:34:56,990
me a list of something on the site

00:34:53,810 --> 00:34:58,400
custom and hopefully you will like the

00:34:56,990 --> 00:35:02,150
new block in Drupal 8 compared to Drupal

00:34:58,400 --> 00:35:04,940
7 again blocks are plugins now so every

00:35:02,150 --> 00:35:06,320
custom block is its own class it's

00:35:04,940 --> 00:35:09,710
completely encapsulated it lives

00:35:06,320 --> 00:35:11,600
separate from every other block when you

00:35:09,710 --> 00:35:12,950
as the administrator go to the backend

00:35:11,600 --> 00:35:14,780
and I'll show you some screenshots of

00:35:12,950 --> 00:35:17,060
this to place a block so you're placing

00:35:14,780 --> 00:35:19,820
a block in a region in a theme with the

00:35:17,060 --> 00:35:22,250
specific weight a configuration object

00:35:19,820 --> 00:35:23,660
is created to track that setting so now

00:35:22,250 --> 00:35:25,310
we know there's a specific instance of

00:35:23,660 --> 00:35:28,550
this block in a specific region in a

00:35:25,310 --> 00:35:30,650
specific theme that config object that's

00:35:28,550 --> 00:35:31,910
created is a config entity which I

00:35:30,650 --> 00:35:33,620
mentioned several times now and also

00:35:31,910 --> 00:35:36,740
applause to actually tell you what that

00:35:33,620 --> 00:35:38,390
is so config entity is an abstraction on

00:35:36,740 --> 00:35:40,490
top of the configuration management

00:35:38,390 --> 00:35:41,810
initiative so people remember the

00:35:40,490 --> 00:35:43,820
configuration management initiative was

00:35:41,810 --> 00:35:46,970
a big thing in Drupal 8 and that

00:35:43,820 --> 00:35:48,830
basically lets you export or import the

00:35:46,970 --> 00:35:54,110
configuration of your Drupal site as the

00:35:48,830 --> 00:35:56,540
ML files again yeah Mille so or also

00:35:54,110 --> 00:35:58,760
view them as EML files so what this

00:35:56,540 --> 00:36:00,890
config entity abstraction does is lets

00:35:58,760 --> 00:36:02,510
you treat essentially that data object

00:36:00,890 --> 00:36:05,480
that's represented as a yellow file as

00:36:02,510 --> 00:36:07,970
an entity so something that essentially

00:36:05,480 --> 00:36:10,070
shares a bunch of methods with things

00:36:07,970 --> 00:36:12,290
like nodes and that means it's very easy

00:36:10,070 --> 00:36:15,520
for Drupal now to have an API that

00:36:12,290 --> 00:36:18,440
allows you to easily find lists and load

00:36:15,520 --> 00:36:21,050
these configuration objects using the

00:36:18,440 --> 00:36:23,870
same basic API as you would to find

00:36:21,050 --> 00:36:25,550
lists or load something like nodes so

00:36:23,870 --> 00:36:27,890
that's why this abstraction is useful so

00:36:25,550 --> 00:36:31,460
now Drupal can more easily just say hey

00:36:27,890 --> 00:36:32,980
I want to do a query and find all the

00:36:31,460 --> 00:36:34,670
list of active block instances

00:36:32,980 --> 00:36:37,820
correspondent which are basically these

00:36:34,670 --> 00:36:39,610
configuration entities and so that just

00:36:37,820 --> 00:36:42,470
works now much more naturally in the API

00:36:39,610 --> 00:36:43,670
in the example I'll show you if you're

00:36:42,470 --> 00:36:45,440
writing just a basic block you don't

00:36:43,670 --> 00:36:48,560
have to worry about this so we're going

00:36:45,440 --> 00:36:50,810
to extend a base class that Drupal 8

00:36:48,560 --> 00:36:52,490
gives us Drupal 8 it's already going to

00:36:50,810 --> 00:36:54,440
take care of all the work of saving this

00:36:52,490 --> 00:36:55,580
configuration entity for us if we use

00:36:54,440 --> 00:36:57,110
that base class so you don't have to

00:36:55,580 --> 00:36:59,210
worry about it all in the example I'll

00:36:57,110 --> 00:37:00,910
show you but you know in the back of

00:36:59,210 --> 00:37:02,990
your mind if you want to add your own

00:37:00,910 --> 00:37:04,190
specific configuration for your block

00:37:02,990 --> 00:37:06,920
you're gonna have to add a little bit

00:37:04,190 --> 00:37:08,780
more code to add those settings to the

00:37:06,920 --> 00:37:14,930
configuration entity that's saved along

00:37:08,780 --> 00:37:16,820
with your block ok so how do we

00:37:14,930 --> 00:37:18,770
implement a block we're gonna implement

00:37:16,820 --> 00:37:20,810
the Drupal core block block plug-in

00:37:18,770 --> 00:37:22,400
interface remember I told you about

00:37:20,810 --> 00:37:25,520
interfaces interfaces are very important

00:37:22,400 --> 00:37:28,850
because it lets a substitute or reuse

00:37:25,520 --> 00:37:30,470
code so any block has to implement the

00:37:28,850 --> 00:37:32,450
block interface block plug-in interface

00:37:30,470 --> 00:37:34,100
and any block essentially could be

00:37:32,450 --> 00:37:35,210
substituted for a different block as

00:37:34,100 --> 00:37:38,000
long as you're both implementing this

00:37:35,210 --> 00:37:39,740
interface if you extend this abstract

00:37:38,000 --> 00:37:41,960
class that your pakora provides the the

00:37:39,740 --> 00:37:43,640
Drupal core block block base class all

00:37:41,960 --> 00:37:45,200
you need to do is implement one method

00:37:43,640 --> 00:37:47,900
which is the build method which is the

00:37:45,200 --> 00:37:49,250
same as hook block view in Drupal 7 so

00:37:47,900 --> 00:37:51,630
hook block view you return a render

00:37:49,250 --> 00:37:53,610
array Drupal 8 the build method

00:37:51,630 --> 00:37:55,350
to render a that will be render for your

00:37:53,610 --> 00:37:56,580
block you're done it's very simple to

00:37:55,350 --> 00:37:58,950
implement a couple of custom block in

00:37:56,580 --> 00:38:01,470
Drupal 8 so for this example module I

00:37:58,950 --> 00:38:06,210
added Drupal my module plug-in block my

00:38:01,470 --> 00:38:08,190
block and a quick side note people may

00:38:06,210 --> 00:38:10,460
be wondering again why this namespace is

00:38:08,190 --> 00:38:12,900
so important why I need to use this very

00:38:10,460 --> 00:38:15,090
long naming for classes and that's

00:38:12,900 --> 00:38:17,760
because of the way that autoloading

00:38:15,090 --> 00:38:20,430
works so we're using the PSR for

00:38:17,760 --> 00:38:23,760
autoloading standard and what that means

00:38:20,430 --> 00:38:25,380
is that when I add when I want to add a

00:38:23,760 --> 00:38:27,600
block with this kind of name to my

00:38:25,380 --> 00:38:28,920
module there's a one-to-one mapping of

00:38:27,600 --> 00:38:32,220
where that lives in terms of the file

00:38:28,920 --> 00:38:34,560
system so it's at the path under modules

00:38:32,220 --> 00:38:37,320
my module SRC

00:38:34,560 --> 00:38:38,970
then plug-in block my block type PHP and

00:38:37,320 --> 00:38:40,350
if you look at that you can see very

00:38:38,970 --> 00:38:42,720
clearly the mapping of course this is

00:38:40,350 --> 00:38:44,490
Drupal it's a module it's under my

00:38:42,720 --> 00:38:47,250
module so that's the first few parts of

00:38:44,490 --> 00:38:48,450
the namespace then plug-in block my

00:38:47,250 --> 00:38:49,650
blocker the last three parts the

00:38:48,450 --> 00:38:51,480
namespace if you basically take those

00:38:49,650 --> 00:38:53,850
back slashes you flip them to forward

00:38:51,480 --> 00:38:55,980
slashes that defines the file path under

00:38:53,850 --> 00:38:58,590
that SRC directory right so I'm going to

00:38:55,980 --> 00:39:00,090
create a class in a specific namespace I

00:38:58,590 --> 00:39:02,430
have to create the corresponding

00:39:00,090 --> 00:39:04,830
directory under my module under its SRC

00:39:02,430 --> 00:39:07,440
directory and put the the class file

00:39:04,830 --> 00:39:09,750
there and then autoloading works like

00:39:07,440 --> 00:39:11,880
magic the autoloader knows how to scan

00:39:09,750 --> 00:39:13,350
the file system if I ask for a class of

00:39:11,880 --> 00:39:18,240
that name it knows exactly which

00:39:13,350 --> 00:39:21,390
directory to find it in okay so what is

00:39:18,240 --> 00:39:22,890
a block plug-in class looks like this is

00:39:21,390 --> 00:39:24,090
basically I cut a couple extraneous

00:39:22,890 --> 00:39:25,410
lines but this is essentially all there

00:39:24,090 --> 00:39:27,780
is to it if you want to write a custom

00:39:25,410 --> 00:39:29,460
block it can be this simple you see this

00:39:27,780 --> 00:39:32,040
as annotated again it's an app block

00:39:29,460 --> 00:39:33,630
annotation tells you the plug-in ID and

00:39:32,040 --> 00:39:35,670
gives you a label that's gonna show up

00:39:33,630 --> 00:39:37,080
in the administrative interface which I

00:39:35,670 --> 00:39:38,790
will show you in a second a screenshot

00:39:37,080 --> 00:39:41,160
of and then it just returns a render

00:39:38,790 --> 00:39:42,930
array the render array has two links

00:39:41,160 --> 00:39:45,360
they link to those two routes I defined

00:39:42,930 --> 00:39:47,160
in my module so bringing it together

00:39:45,360 --> 00:39:48,570
here you know so I defined the routes to

00:39:47,160 --> 00:39:49,950
find a block the block has two links

00:39:48,570 --> 00:39:53,730
that point to the routes which have

00:39:49,950 --> 00:39:54,930
those two tabs so hopefully if if you're

00:39:53,730 --> 00:39:57,900
trying to get started that example code

00:39:54,930 --> 00:40:00,150
might be useful so if I define this

00:39:57,900 --> 00:40:03,330
class maybe clear the cache is so that

00:40:00,150 --> 00:40:05,250
the plug-in manager finds it then I can

00:40:03,330 --> 00:40:06,960
create an instance of this block

00:40:05,250 --> 00:40:11,190
if you haven't used the Drupal 8 box

00:40:06,960 --> 00:40:12,810
admin page yet it's got a new

00:40:11,190 --> 00:40:14,760
functionality called place block if you

00:40:12,810 --> 00:40:17,160
remember Drupal 7 it told you available

00:40:14,760 --> 00:40:19,020
blocks and Drupal 8 we're gonna place a

00:40:17,160 --> 00:40:20,460
new block and we can do that as many

00:40:19,020 --> 00:40:21,930
times as we want with the same block so

00:40:20,460 --> 00:40:24,119
we can have as many instances who want

00:40:21,930 --> 00:40:27,420
of the same block so a click place block

00:40:24,119 --> 00:40:28,740
I do a search here I find my module

00:40:27,420 --> 00:40:31,770
block that was the string that was in

00:40:28,740 --> 00:40:34,770
the annotation as the admin label click

00:40:31,770 --> 00:40:35,910
place block again and then I get a

00:40:34,770 --> 00:40:37,770
configuration page it looks pretty

00:40:35,910 --> 00:40:39,810
similar to a Drupal 7 block

00:40:37,770 --> 00:40:41,970
configuration page and if I click here

00:40:39,810 --> 00:40:43,800
I've gone ahead and created a new plugin

00:40:41,970 --> 00:40:46,320
instance I've created a instance of that

00:40:43,800 --> 00:40:49,230
block so there's a configuration saying

00:40:46,320 --> 00:40:52,619
this block exists in this region in this

00:40:49,230 --> 00:40:54,960
theme with these settings and so when I

00:40:52,619 --> 00:40:56,430
now go to my front page that block will

00:40:54,960 --> 00:40:59,369
be rendered you see there on the left

00:40:56,430 --> 00:41:01,050
it's rendered has two links that came

00:40:59,369 --> 00:41:04,260
from that render array in the build

00:41:01,050 --> 00:41:05,430
method and it shows up on the page so

00:41:04,260 --> 00:41:08,430
that's all there is to it

00:41:05,430 --> 00:41:10,740
block plugins again in conceptually

00:41:08,430 --> 00:41:12,900
doing the same things as Drupal 7

00:41:10,740 --> 00:41:14,540
but that code it's all moved into the

00:41:12,900 --> 00:41:17,700
block plug-in class instead of being

00:41:14,540 --> 00:41:20,160
present in hooks and just to make that a

00:41:17,700 --> 00:41:21,630
little more clear let's just do it again

00:41:20,160 --> 00:41:23,190
a one to one comparison so you can see

00:41:21,630 --> 00:41:26,010
how this code is moving from pupil 7

00:41:23,190 --> 00:41:27,480
Drupal 8 Drupal 7 we hook block info

00:41:26,010 --> 00:41:29,460
right and that just returned an array

00:41:27,480 --> 00:41:31,740
listing the blocks your module provided

00:41:29,460 --> 00:41:33,810
in Drupal 8 that's handled by the block

00:41:31,740 --> 00:41:36,180
plug-in manager block plugin manager

00:41:33,810 --> 00:41:38,190
knows how to get all the metadata from

00:41:36,180 --> 00:41:40,109
the annotations and basically builds up

00:41:38,190 --> 00:41:44,099
an array of all the available block

00:41:40,109 --> 00:41:45,570
plugins hook block view in Drupal 7 you

00:41:44,099 --> 00:41:47,760
had to give it a delta right because

00:41:45,570 --> 00:41:50,070
that one hook had to handle every block

00:41:47,760 --> 00:41:52,410
from your module in Drupal 8 every block

00:41:50,070 --> 00:41:54,770
is its own individual class it has its

00:41:52,410 --> 00:41:57,180
own specific build method on that class

00:41:54,770 --> 00:41:59,280
so basically moved from having no the

00:41:57,180 --> 00:42:02,220
Delta just simply knowing which class

00:41:59,280 --> 00:42:04,050
corresponds to my block in Drupal 7

00:42:02,220 --> 00:42:06,450
there was really no good way to control

00:42:04,050 --> 00:42:08,609
access to your blocks so you had to hack

00:42:06,450 --> 00:42:11,099
something maybe into they to the view

00:42:08,609 --> 00:42:13,020
hook Drupal 8 if you want to there's a

00:42:11,099 --> 00:42:15,119
specific method on every block class

00:42:13,020 --> 00:42:16,400
that allows you control access to that

00:42:15,119 --> 00:42:18,840
block

00:42:16,400 --> 00:42:20,790
similarly in Drupal 7 the way we

00:42:18,840 --> 00:42:23,250
configuration was a little bit like

00:42:20,790 --> 00:42:25,740
one-off so there's hook block configure

00:42:23,250 --> 00:42:28,520
and hook block save which again you had

00:42:25,740 --> 00:42:31,440
to pass in a delta hook block save had a

00:42:28,520 --> 00:42:34,340
Ray kind of a form values and edit array

00:42:31,440 --> 00:42:36,510
but it wasn't a standard form API thing

00:42:34,340 --> 00:42:39,300
instead in Drupal 8 we have a very

00:42:36,510 --> 00:42:41,340
standard form API workflow so we have

00:42:39,300 --> 00:42:42,870
the the method that defines the form the

00:42:41,340 --> 00:42:45,000
method the validates the form the method

00:42:42,870 --> 00:42:46,830
that submits the form so if you've you

00:42:45,000 --> 00:42:49,320
know used for my API and Drupal 8 for

00:42:46,830 --> 00:42:51,180
anything this this flow here for a block

00:42:49,320 --> 00:42:53,310
plug-in works exactly the same as every

00:42:51,180 --> 00:42:54,810
other form in Drupal 8 so I think that's

00:42:53,310 --> 00:42:57,210
nice we've got more consistency now and

00:42:54,810 --> 00:42:58,590
how we're using our API is we've made it

00:42:57,210 --> 00:43:00,810
easier to control access and we made it

00:42:58,590 --> 00:43:02,160
easier here to validate the

00:43:00,810 --> 00:43:03,570
configuration for your block we actually

00:43:02,160 --> 00:43:06,660
have a validate step which we didn't

00:43:03,570 --> 00:43:10,620
have in Drupal 7 okay so that's the

00:43:06,660 --> 00:43:13,950
mapping there so block discovery and

00:43:10,620 --> 00:43:17,070
annotations each plug-in type has to be

00:43:13,950 --> 00:43:18,750
in the expected namespace so this is

00:43:17,070 --> 00:43:20,970
partly how the block is found and then

00:43:18,750 --> 00:43:22,350
it has to use the write annotation all

00:43:20,970 --> 00:43:24,800
the core plugins have a custom

00:43:22,350 --> 00:43:26,670
annotation class so that at block

00:43:24,800 --> 00:43:28,920
annotation actually corresponds to a

00:43:26,670 --> 00:43:30,630
class I'll show you the annotation class

00:43:28,920 --> 00:43:31,860
provides that documentation about what

00:43:30,630 --> 00:43:34,260
things are allowed to be in that

00:43:31,860 --> 00:43:36,270
definition and provide some default

00:43:34,260 --> 00:43:38,250
values and then there's a generic one

00:43:36,270 --> 00:43:40,680
that you can use basically as a starting

00:43:38,250 --> 00:43:43,110
point to extend so this is what the

00:43:40,680 --> 00:43:45,270
block annotation class looks like it

00:43:43,110 --> 00:43:46,710
extends that plug-in annotation again

00:43:45,270 --> 00:43:50,280
tells you things like the ID and the

00:43:46,710 --> 00:43:52,140
admin label are valid keys to put in the

00:43:50,280 --> 00:43:53,880
annotation right so that's what these

00:43:52,140 --> 00:43:58,110
mean these these variables here are the

00:43:53,880 --> 00:44:01,890
valid keys in the annotation okay so

00:43:58,110 --> 00:44:04,410
last example is filtering text we had an

00:44:01,890 --> 00:44:06,390
info hook in Drupal 7 hook filter info

00:44:04,410 --> 00:44:09,000
which we tell you about text filters and

00:44:06,390 --> 00:44:10,290
how Drupal could you could build up a

00:44:09,000 --> 00:44:12,570
text format that would apply different

00:44:10,290 --> 00:44:14,250
filters to your text and this example is

00:44:12,570 --> 00:44:16,440
taken from project module not from core

00:44:14,250 --> 00:44:18,270
and if you use Drupal or ever in an

00:44:16,440 --> 00:44:20,250
issue you've seen people put an issue

00:44:18,270 --> 00:44:21,660
number in brackets with a hash sign that

00:44:20,250 --> 00:44:23,880
links to the issue right that's what

00:44:21,660 --> 00:44:25,320
this text filter does you see in the

00:44:23,880 --> 00:44:27,540
info hook we have the title the

00:44:25,320 --> 00:44:28,980
description and then we have we're

00:44:27,540 --> 00:44:30,960
defining callback so the process

00:44:28,980 --> 00:44:31,860
callback the tips callback and then we

00:44:30,960 --> 00:44:32,410
say whether or not this thing is

00:44:31,860 --> 00:44:34,569
cashable

00:44:32,410 --> 00:44:36,940
so that's the metadata we get out of the

00:44:34,569 --> 00:44:38,650
info hook in Drupal 7 we're told again

00:44:36,940 --> 00:44:42,849
the title description and then two

00:44:38,650 --> 00:44:45,549
callbacks and cache ability in Drupal 8

00:44:42,849 --> 00:44:47,799
it works a little bit differently so we

00:44:45,549 --> 00:44:49,269
have again a plug-in we if I so I'm

00:44:47,799 --> 00:44:52,000
basically implement re-implementing the

00:44:49,269 --> 00:44:53,529
the project modules functionality in a

00:44:52,000 --> 00:44:55,869
slightly simpler form in Drupal 8 in

00:44:53,529 --> 00:45:01,089
this example module we have an ad filter

00:44:55,869 --> 00:45:03,069
plug-in with an ID and a title and then

00:45:01,089 --> 00:45:05,140
instead of those two callbacks that were

00:45:03,069 --> 00:45:07,180
functions in Drupal 7 we have methods on

00:45:05,140 --> 00:45:09,700
the plugin so we have a process method

00:45:07,180 --> 00:45:11,410
and a tips method and those do basically

00:45:09,700 --> 00:45:13,630
exactly what you think we get some text

00:45:11,410 --> 00:45:16,150
passed in to the process method we

00:45:13,630 --> 00:45:17,319
process it and then we return it so if

00:45:16,150 --> 00:45:19,359
we return it wrapped in this other

00:45:17,319 --> 00:45:21,579
object called a filter process results

00:45:19,359 --> 00:45:23,920
and that's basically serving the same

00:45:21,579 --> 00:45:27,430
role as a cash ability flag in Drupal 7

00:45:23,920 --> 00:45:28,269
so this process result object carries

00:45:27,430 --> 00:45:31,750
along with there's some information

00:45:28,269 --> 00:45:33,250
about how cacheable this filtered result

00:45:31,750 --> 00:45:35,019
is so it might only be casual for the

00:45:33,250 --> 00:45:36,490
current user or it might be casual for

00:45:35,019 --> 00:45:38,319
everyone in this case it's just a link

00:45:36,490 --> 00:45:40,180
to a node it's the same for everyone I

00:45:38,319 --> 00:45:42,369
don't have to provide any special extra

00:45:40,180 --> 00:45:43,779
cash ability data but in other cases you

00:45:42,369 --> 00:45:45,970
would want to say this is only valid for

00:45:43,779 --> 00:45:47,920
the current user and then the tips

00:45:45,970 --> 00:45:49,930
method of course just returns to the

00:45:47,920 --> 00:45:52,359
filter tips that you see below the text

00:45:49,930 --> 00:45:56,349
edit area so if I define this class

00:45:52,359 --> 00:45:58,029
again show you how that works so let's

00:45:56,349 --> 00:46:03,339
say I create a nice first note on my

00:45:58,029 --> 00:46:06,789
site node two zero five eight now I want

00:46:03,339 --> 00:46:08,680
to enable this new filter plugin so go

00:46:06,789 --> 00:46:11,829
to my text filters in the configure

00:46:08,680 --> 00:46:13,839
section I edit scroll down I see this

00:46:11,829 --> 00:46:16,000
title I to find on my plugin format a

00:46:13,839 --> 00:46:18,400
note ideas a link click that off and

00:46:16,000 --> 00:46:21,609
save it and now if I go and edit my

00:46:18,400 --> 00:46:24,329
second node I can bassy use this special

00:46:21,609 --> 00:46:26,650
format these brackets hash sign note ID

00:46:24,329 --> 00:46:28,480
to create a link back to my first node

00:46:26,650 --> 00:46:29,740
and you'll see that in the tips below

00:46:28,480 --> 00:46:31,660
we're getting just the return value of

00:46:29,740 --> 00:46:35,380
that tips method showing up in my filter

00:46:31,660 --> 00:46:38,740
tips so great if I save this it works

00:46:35,380 --> 00:46:40,690
I get the node title I get a link back

00:46:38,740 --> 00:46:42,789
to my first node which you can see if I

00:46:40,690 --> 00:46:44,920
hover over and that's it so now this

00:46:42,789 --> 00:46:46,150
little plugin that just had a you know a

00:46:44,920 --> 00:46:48,099
couple methods to implement

00:46:46,150 --> 00:46:49,990
is able to rhyme a new filtering

00:46:48,099 --> 00:46:52,420
functionality for my Drupal site and I

00:46:49,990 --> 00:46:54,549
can basically transform text from that

00:46:52,420 --> 00:46:56,140
sort of token format into an actual link

00:46:54,549 --> 00:47:00,309
with the title of the node that I care

00:46:56,140 --> 00:47:03,789
about okay so hopefully that was all

00:47:00,309 --> 00:47:06,520
informative a brief pause here for best

00:47:03,789 --> 00:47:08,589
practices if you're want to define a

00:47:06,520 --> 00:47:11,529
plug-in type for your own module so this

00:47:08,589 --> 00:47:13,750
means for example you defined an info

00:47:11,529 --> 00:47:15,640
hook in a module or you defined like a

00:47:13,750 --> 00:47:17,289
CTools plugin in a drupal 7 module

00:47:15,640 --> 00:47:19,630
define it means you actually called like

00:47:17,289 --> 00:47:23,770
module invoke all to get the results of

00:47:19,630 --> 00:47:25,119
all other modules info hooks so that's

00:47:23,770 --> 00:47:26,970
something you might convert to a plug-in

00:47:25,119 --> 00:47:28,960
if you upgrade your module to Drupal 8

00:47:26,970 --> 00:47:31,450
my strong advice to you is to use

00:47:28,960 --> 00:47:33,490
annotation based discovery by default

00:47:31,450 --> 00:47:34,720
because it keeps that metadata that

00:47:33,490 --> 00:47:36,250
annotation together with the class

00:47:34,720 --> 00:47:37,690
that's actually doing the work so you

00:47:36,250 --> 00:47:38,710
have those two things in the same file

00:47:37,690 --> 00:47:40,599
you can basically look at them together

00:47:38,710 --> 00:47:44,589
and make sure that you understand that

00:47:40,599 --> 00:47:45,880
they match up the ml discovery as I

00:47:44,589 --> 00:47:47,470
mentioned before is really only good for

00:47:45,880 --> 00:47:50,109
a few edge cases where the class

00:47:47,470 --> 00:47:52,180
implementing the plugins is almost

00:47:50,109 --> 00:47:53,770
always the same so if 95% of the time

00:47:52,180 --> 00:47:55,150
the class is going to be the same no

00:47:53,770 --> 00:47:56,740
matter what module is implementing the

00:47:55,150 --> 00:47:58,539
plug-in you might want to use the amyl

00:47:56,740 --> 00:48:02,260
base discovery an example of where you

00:47:58,539 --> 00:48:04,569
might provide a specific class in Drupal

00:48:02,260 --> 00:48:06,010
8 is let's say you want a tab in the

00:48:04,569 --> 00:48:08,109
page that shows the current users name

00:48:06,010 --> 00:48:09,700
so it has to be dynamic has to be

00:48:08,109 --> 00:48:11,319
specific for the current user has to

00:48:09,700 --> 00:48:13,720
pull in some other information it's not

00:48:11,319 --> 00:48:17,140
a fixed string so that's where you might

00:48:13,720 --> 00:48:18,760
provide that class name in the ml file

00:48:17,140 --> 00:48:20,020
and tell Drupal I don't want to use the

00:48:18,760 --> 00:48:21,520
default class I want to use a specific

00:48:20,020 --> 00:48:23,200
one that has a different method for the

00:48:21,520 --> 00:48:24,099
title but most of the time you're not

00:48:23,200 --> 00:48:25,390
going to do that you're just going to

00:48:24,099 --> 00:48:27,880
have a fixed string for the title a

00:48:25,390 --> 00:48:28,980
fixed link to a pill route and you're

00:48:27,880 --> 00:48:33,730
done

00:48:28,980 --> 00:48:36,160
okay so here's some links towards the

00:48:33,730 --> 00:48:39,670
end of presentation so the sandbox where

00:48:36,160 --> 00:48:40,720
the code is handbook pages on converting

00:48:39,670 --> 00:48:41,170
your modules if you haven't done that

00:48:40,720 --> 00:48:43,000
already

00:48:41,170 --> 00:48:44,650
another handbook page on the plug-in

00:48:43,000 --> 00:48:46,089
system and one that I want to highlight

00:48:44,650 --> 00:48:47,260
specifically if you want to you know

00:48:46,089 --> 00:48:49,930
dive in a little more about the

00:48:47,260 --> 00:48:51,630
philosophy out why we adopted this

00:48:49,930 --> 00:48:54,160
plug-in system so broadly in Drupal 8

00:48:51,630 --> 00:48:56,109
and finally a blog post from Drupal

00:48:54,160 --> 00:48:58,119
ëismí that covers a lot of the same

00:48:56,109 --> 00:48:59,140
things as talk does but from the you

00:48:58,119 --> 00:48:59,589
know of course it slightly different

00:48:59,140 --> 00:49:01,989
perspective

00:48:59,589 --> 00:49:04,359
so you might find it helpful to compare

00:49:01,989 --> 00:49:07,930
notes from that blog post to what what I

00:49:04,359 --> 00:49:09,309
was telling you today so let's sort of

00:49:07,930 --> 00:49:10,359
move to wrapping up and I want to just

00:49:09,309 --> 00:49:12,400
again give you you know a little

00:49:10,359 --> 00:49:14,769
excitement about using Drupal 8 it has

00:49:12,400 --> 00:49:16,839
so many great features so widespread

00:49:14,769 --> 00:49:18,279
uses of interfaces everything in Drupal

00:49:16,839 --> 00:49:20,199
8 pretty much has an interface all the

00:49:18,279 --> 00:49:21,910
plugins all the plugin managers almost

00:49:20,199 --> 00:49:24,099
all the services use an interface and

00:49:21,910 --> 00:49:26,439
that means that you can replace them you

00:49:24,099 --> 00:49:28,029
can say I want to use my class instead

00:49:26,439 --> 00:49:29,410
of the one that was provided by core as

00:49:28,029 --> 00:49:31,869
long as you implement the right

00:49:29,410 --> 00:49:33,249
interfaces the rest of Drupal doesn't

00:49:31,869 --> 00:49:34,719
know that you've substituted you've

00:49:33,249 --> 00:49:37,589
tricked it and given it your class

00:49:34,719 --> 00:49:39,939
instead of the one that it was expecting

00:49:37,589 --> 00:49:41,109
in terms of building admin interfaces

00:49:39,939 --> 00:49:43,029
you can now group tabs together

00:49:41,109 --> 00:49:45,369
regardless of what path they're

00:49:43,029 --> 00:49:46,900
referencing and that's partly because

00:49:45,369 --> 00:49:48,519
it's the route name that's a unique

00:49:46,900 --> 00:49:49,809
thing and not the system path so it care

00:49:48,519 --> 00:49:51,819
about those machine names we don't care

00:49:49,809 --> 00:49:54,539
about the path what's also interesting

00:49:51,819 --> 00:49:57,609
about that is I can have multiple routes

00:49:54,539 --> 00:49:59,739
that are possibly serving the same path

00:49:57,609 --> 00:50:02,229
and why might you want to do that so

00:49:59,739 --> 00:50:05,619
imagine you want to render a node either

00:50:02,229 --> 00:50:08,439
as HTML or as JSON well it might be at

00:50:05,619 --> 00:50:09,969
the same path and I can then append a

00:50:08,439 --> 00:50:12,309
query string and get a different format

00:50:09,969 --> 00:50:13,869
and the query string basically might let

00:50:12,309 --> 00:50:14,259
Drupal choose between two different

00:50:13,869 --> 00:50:16,719
routes

00:50:14,259 --> 00:50:19,689
so both these routes say I want to serve

00:50:16,719 --> 00:50:20,949
the node content but in one case if the

00:50:19,689 --> 00:50:22,929
query string is present I'm gonna go to

00:50:20,949 --> 00:50:25,150
the route that gives you JSON in another

00:50:22,929 --> 00:50:28,900
case I'm gonna give you HML another

00:50:25,150 --> 00:50:31,509
example is get and post so if I do a get

00:50:28,900 --> 00:50:33,880
request on this particular path it goes

00:50:31,509 --> 00:50:35,739
to one route if I do a post request it

00:50:33,880 --> 00:50:37,299
goes to a different route so that's

00:50:35,739 --> 00:50:39,279
really nice allows you to segregate out

00:50:37,299 --> 00:50:40,569
this functionality for different cases

00:50:39,279 --> 00:50:44,049
that's something that wasn't easy to do

00:50:40,569 --> 00:50:45,910
in Drupal 7 again Y Emmel I've mentioned

00:50:44,049 --> 00:50:47,170
yeah mo mo mo so if you're not familiar

00:50:45,910 --> 00:50:50,049
with the mo as a standard for those

00:50:47,170 --> 00:50:52,599
configuration and data files please take

00:50:50,049 --> 00:50:54,069
a look at it great thing about Drupal 8

00:50:52,599 --> 00:50:56,559
is we have multiple instances of the

00:50:54,069 --> 00:50:58,539
same plugin the key feature of plugins

00:50:56,559 --> 00:51:00,160
is reusability so we can have as many

00:50:58,539 --> 00:51:01,660
instances of the same block as we want

00:51:00,160 --> 00:51:04,689
and reuse them anywhere you want on your

00:51:01,660 --> 00:51:06,009
site and the way we do that is basically

00:51:04,689 --> 00:51:07,929
that each block instance has a

00:51:06,009 --> 00:51:10,150
correspondent config entity that

00:51:07,929 --> 00:51:11,799
captures that key configuration are

00:51:10,150 --> 00:51:13,619
necessary to instantiate that one block

00:51:11,799 --> 00:51:18,069
instance

00:51:13,619 --> 00:51:19,630
okay so to sum it up plugins combine the

00:51:18,069 --> 00:51:23,170
discovery available functionality with

00:51:19,630 --> 00:51:24,910
the implementation in Drupal 7 that was

00:51:23,170 --> 00:51:27,000
really the combination of an info hook

00:51:24,910 --> 00:51:29,470
and multiple other implementation hooks

00:51:27,000 --> 00:51:31,119
and possibly a spread across different

00:51:29,470 --> 00:51:32,920
files so April 7 they were spread out

00:51:31,119 --> 00:51:34,180
you weren't always sure where to look in

00:51:32,920 --> 00:51:35,770
Drupal 8 they're actually nicely grouped

00:51:34,180 --> 00:51:37,450
together that metadata in the annotation

00:51:35,770 --> 00:51:40,000
and all the implementation is all in

00:51:37,450 --> 00:51:41,950
that one class file if you're going to

00:51:40,000 --> 00:51:43,540
define your own plug-in type please do

00:51:41,950 --> 00:51:46,950
use annotation unless you have a really

00:51:43,540 --> 00:51:49,420
clear reason to do something else so

00:51:46,950 --> 00:51:52,510
that's pretty much it I'll get to

00:51:49,420 --> 00:51:54,400
questions in a second if you haven't

00:51:52,510 --> 00:51:56,049
been to Drupal con sprint before

00:51:54,400 --> 00:51:58,180
strongly encourage you to stay for

00:51:56,049 --> 00:52:00,010
Friday it's a lot of fun so there's a

00:51:58,180 --> 00:52:02,589
half-day in the morning of a first-time

00:52:00,010 --> 00:52:05,020
Sprinter workshop the people there that

00:52:02,589 --> 00:52:07,420
will help you set up whether you want to

00:52:05,020 --> 00:52:08,530
do documentation or code if you want to

00:52:07,420 --> 00:52:10,240
do code they'll help you get your local

00:52:08,530 --> 00:52:13,480
development environment set up to edit

00:52:10,240 --> 00:52:14,799
Drupal so a great thing to do there and

00:52:13,480 --> 00:52:17,200
then all day there's the metric or

00:52:14,799 --> 00:52:18,309
sprint and the general sprint so general

00:52:17,200 --> 00:52:19,470
spend you'll find people working in

00:52:18,309 --> 00:52:21,880
different contributed modules

00:52:19,470 --> 00:52:23,740
documentation marketing initiatives all

00:52:21,880 --> 00:52:25,510
kinds of different things and the metric

00:52:23,740 --> 00:52:27,520
or Sprint is people especially want to

00:52:25,510 --> 00:52:28,569
work on Drupal core issues and an

00:52:27,520 --> 00:52:29,980
exciting part of that is at the end of

00:52:28,569 --> 00:52:32,890
the day they do one or more alive

00:52:29,980 --> 00:52:34,270
commits of changes people made that day

00:52:32,890 --> 00:52:35,859
issues it got all the way from started

00:52:34,270 --> 00:52:38,049
not necessary from start but got all the

00:52:35,859 --> 00:52:39,400
way to finish in that day and get

00:52:38,049 --> 00:52:43,510
committed to Drupal core and right in

00:52:39,400 --> 00:52:44,799
front of your eyes so that's it please

00:52:43,510 --> 00:52:48,160
tell me what you think please go to the

00:52:44,799 --> 00:52:49,690
session node 21 0 to 5 on the site and

00:52:48,160 --> 00:52:51,309
please fill out the evaluations that

00:52:49,690 --> 00:52:53,079
really helps me and helps the conference

00:52:51,309 --> 00:52:54,160
organizers know whether you appreciated

00:52:53,079 --> 00:52:56,109
this content whether you got something

00:52:54,160 --> 00:52:58,150
useful out of it and please also take

00:52:56,109 --> 00:53:00,730
the Drupal con Nashville survey to tell

00:52:58,150 --> 00:53:04,960
them about the overall event with that I

00:53:00,730 --> 00:53:06,400
would be happy to take your questions so

00:53:04,960 --> 00:53:09,599
if your questions please come to the mic

00:53:06,400 --> 00:53:09,599
so we get on the recording

00:53:15,270 --> 00:53:18,400
[Applause]

00:53:20,910 --> 00:53:27,039
yeah you you mentioned that you could

00:53:24,190 --> 00:53:29,109
load a config entity yes correct

00:53:27,039 --> 00:53:31,690
is there a way to alter it is there

00:53:29,109 --> 00:53:35,739
anything that you know change it on the

00:53:31,690 --> 00:53:38,880
fly so there is a system which I'm like

00:53:35,739 --> 00:53:41,200
yeah now which you can dynamically alter

00:53:38,880 --> 00:53:48,339
configuration when it's loaded yes great

00:53:41,200 --> 00:53:50,589
okay yep hi you talked about plugins

00:53:48,339 --> 00:53:53,650
being able to use your own plugins for a

00:53:50,589 --> 00:53:55,900
place another one yeah is there a way to

00:53:53,650 --> 00:53:58,029
ensure which plug-in if there are

00:53:55,900 --> 00:54:02,589
multiple ones in the system which one

00:53:58,029 --> 00:54:05,140
wins out and is actually being used so

00:54:02,589 --> 00:54:06,579
which one wins Aldi I mean that's really

00:54:05,140 --> 00:54:09,519
the same problem is like hook ordering

00:54:06,579 --> 00:54:12,400
in Drupal 7 so there's not a guaranteed

00:54:09,519 --> 00:54:14,410
way other than you can make sure that

00:54:12,400 --> 00:54:19,449
your altar hook is the last one to go if

00:54:14,410 --> 00:54:23,019
you're worried about that so Drupal 8

00:54:19,449 --> 00:54:25,959
provides a hook module implements ultra

00:54:23,019 --> 00:54:29,880
hook which allows you to alter the order

00:54:25,959 --> 00:54:29,880
of in which module hooks are called

00:54:30,119 --> 00:54:34,359
there's maybe still a module weight but

00:54:32,949 --> 00:54:40,170
I would recommend ya using that hook is

00:54:34,359 --> 00:54:44,380
probably the preferred way to do it hi

00:54:40,170 --> 00:54:45,940
great talk thanks first off wherever

00:54:44,380 --> 00:54:47,739
you're working with queue workers is

00:54:45,940 --> 00:54:51,880
there a guaranteed way to make sure that

00:54:47,739 --> 00:54:54,880
the process item method is called with

00:54:51,880 --> 00:54:57,400
queue workers yeah supposedly is

00:54:54,880 --> 00:54:59,289
supposed to replace cron and the job

00:54:57,400 --> 00:55:00,999
that I'm trying to run is too big for

00:54:59,289 --> 00:55:03,309
cron to handle so I'm wrapping in the

00:55:00,999 --> 00:55:05,650
queue workers and I can make everything

00:55:03,309 --> 00:55:07,509
work but I have to manually call process

00:55:05,650 --> 00:55:09,640
item in the constructor which I know is

00:55:07,509 --> 00:55:12,819
this wrong so I'm trying to figure out a

00:55:09,640 --> 00:55:14,979
way to make it yeah we could talk about

00:55:12,819 --> 00:55:17,079
that though so you might so it doesn't

00:55:14,979 --> 00:55:21,029
really replace cron often what happens

00:55:17,079 --> 00:55:23,680
is I don't know if you define the cron

00:55:21,029 --> 00:55:26,049
key and in the annotation for your key

00:55:23,680 --> 00:55:27,290
worker yeah I did you did okay so that

00:55:26,049 --> 00:55:32,630
should get called on

00:55:27,290 --> 00:55:33,920
then I mean that's I've had it work but

00:55:32,630 --> 00:55:36,740
yeah generally you just break up those

00:55:33,920 --> 00:55:38,090
those jobs into smaller chunks and put

00:55:36,740 --> 00:55:40,250
them in the queue and when cron runs

00:55:38,090 --> 00:55:42,800
that should call them well do I have to

00:55:40,250 --> 00:55:46,040
implement hook cron for that to ever

00:55:42,800 --> 00:55:47,570
fire your module should not have to

00:55:46,040 --> 00:55:52,340
implement her cron if you as long as you

00:55:47,570 --> 00:56:09,410
define that key in the annotation thank

00:55:52,340 --> 00:56:12,730
you okay doing a Content import so I

00:56:09,410 --> 00:56:14,900
have basically a few different

00:56:12,730 --> 00:56:17,180
environments so for if it's a dev

00:56:14,900 --> 00:56:20,000
environment get it from here if it's a

00:56:17,180 --> 00:56:24,200
staging environment get it from this URL

00:56:20,000 --> 00:56:27,220
so how you can change the URL in yml

00:56:24,200 --> 00:56:30,170
depending on your environment

00:56:27,220 --> 00:56:33,110
dynamically hmm so did you go to jury's

00:56:30,170 --> 00:56:34,400
keynote today yeah okay so that was one

00:56:33,110 --> 00:56:37,340
of things he highlighted is a problem

00:56:34,400 --> 00:56:39,290
yeah is altering those so there's a few

00:56:37,340 --> 00:56:42,050
different strategies I mean so one thing

00:56:39,290 --> 00:56:43,760
is you can I mean Drupal does ship with

00:56:42,050 --> 00:56:45,760
the system for altering config

00:56:43,760 --> 00:56:49,100
dynamically and that's for example how

00:56:45,760 --> 00:56:51,050
translations of configuration happen is

00:56:49,100 --> 00:56:52,220
that dynamic altering but that's a

00:56:51,050 --> 00:56:54,860
little bit tricky there are a couple

00:56:52,220 --> 00:56:57,440
modules that will let you basically

00:56:54,860 --> 00:56:59,870
substitute in different pieces of

00:56:57,440 --> 00:57:01,910
configuration it's I would say it's not

00:56:59,870 --> 00:57:06,080
a well solved problem unfortunate which

00:57:01,910 --> 00:57:08,750
is why it was in the keynote it's it is

00:57:06,080 --> 00:57:10,280
a problem yeah so substituting those

00:57:08,750 --> 00:57:15,920
values in in yeah there's different

00:57:10,280 --> 00:57:17,720
environments yeah so I mean you can

00:57:15,920 --> 00:57:19,970
override configured values in

00:57:17,720 --> 00:57:32,450
settings.php so that's yeah how we've

00:57:19,970 --> 00:57:33,710
been doing yeah I mean there are there

00:57:32,450 --> 00:57:36,380
again there are hooks that will allow

00:57:33,710 --> 00:57:39,110
you to swap things out and config at

00:57:36,380 --> 00:57:41,100
runtime so it is possible did you get a

00:57:39,110 --> 00:57:43,640
module but it's it's

00:57:41,100 --> 00:57:50,130
yeah it's not beautiful at this point

00:57:43,640 --> 00:57:52,680
yeah thanks

00:57:50,130 --> 00:57:56,750
after you showed your routing Amla file

00:57:52,680 --> 00:57:58,980
yeah you showed the defaults property to

00:57:56,750 --> 00:58:01,260
show what properties you could use in

00:57:58,980 --> 00:58:03,450
that ya know file right that that was

00:58:01,260 --> 00:58:05,670
for the the local tasks plugins right

00:58:03,450 --> 00:58:07,770
okay yeah now is there a way to see this

00:58:05,670 --> 00:58:09,270
the sub properties like the the ones

00:58:07,770 --> 00:58:11,370
that begin with the underscore like an

00:58:09,270 --> 00:58:13,350
easy way to find those oh so that those

00:58:11,370 --> 00:58:15,510
that's the routing definition so that's

00:58:13,350 --> 00:58:16,470
where it's a look at the starting point

00:58:15,510 --> 00:58:20,430
would be to look at the Symphony

00:58:16,470 --> 00:58:21,780
documentation I mean I think there's

00:58:20,430 --> 00:58:22,950
some Drupal Oh everyone's also but if

00:58:21,780 --> 00:58:26,640
you start basically the symphony ones

00:58:22,950 --> 00:58:28,440
most of those are fairly standard Drupal

00:58:26,640 --> 00:58:31,380
has kind of repurposed a couple of them

00:58:28,440 --> 00:58:35,340
so things like where a route is a form

00:58:31,380 --> 00:58:37,400
instead of just a controller it uses

00:58:35,340 --> 00:58:39,210
like underscore form things like that

00:58:37,400 --> 00:58:40,560
alright so a lot of those come from

00:58:39,210 --> 00:58:42,480
Symphony but a lot of them come from

00:58:40,560 --> 00:58:44,100
Symphony so that's kind of if you just

00:58:42,480 --> 00:58:45,600
want to get an overview what goes in

00:58:44,100 --> 00:58:48,320
there I'd start with the Symphony Docs

00:58:45,600 --> 00:58:48,320
great thanks

00:58:51,890 --> 00:58:59,490
hi thank you for the talk I had a

00:58:56,340 --> 00:59:02,730
question about the annotations you said

00:58:59,490 --> 00:59:06,210
you could locate the definitions of the

00:59:02,730 --> 00:59:08,610
annotations where does that live so

00:59:06,210 --> 00:59:11,280
those those are classes themselves so

00:59:08,610 --> 00:59:12,540
they're annotation classes and the class

00:59:11,280 --> 00:59:15,750
name is basically the same as that

00:59:12,540 --> 00:59:19,110
annotation so at block basically says

00:59:15,750 --> 00:59:21,420
the the there's a block annotation class

00:59:19,110 --> 00:59:23,520
that's actually the name of the class so

00:59:21,420 --> 00:59:25,350
you basically just look for a class name

00:59:23,520 --> 00:59:28,080
block that was under the annotation

00:59:25,350 --> 00:59:32,340
namespace of in this case Drupal core or

00:59:28,080 --> 00:59:35,880
under some module okay and then another

00:59:32,340 --> 00:59:39,660
question on the on the routing in

00:59:35,880 --> 00:59:42,200
Symphony console there was a there's a

00:59:39,660 --> 00:59:46,350
command that you can show your routes

00:59:42,200 --> 00:59:47,760
Rober debug controllers is there is

00:59:46,350 --> 00:59:50,480
there something corresponding in Drupal

00:59:47,760 --> 00:59:53,220
8 so you can tie routes to controllers

00:59:50,480 --> 00:59:55,560
so the Drupal console does have

00:59:53,220 --> 00:59:58,740
basically had an equivalent command so

00:59:55,560 --> 01:00:00,420
we'll list all the routes and then you

00:59:58,740 --> 01:00:02,340
can dive into eight specific routes to

01:00:00,420 --> 01:00:04,860
see the controllers so the Drupal

01:00:02,340 --> 01:00:06,540
console which basically wraps symphony

01:00:04,860 --> 01:00:07,680
console and some other things ah okay

01:00:06,540 --> 01:00:12,690
alright thank you

01:00:07,680 --> 01:00:15,630
yep you're welcome okay any other

01:00:12,690 --> 01:00:17,800
questions if not thank you and again

01:00:15,630 --> 01:00:19,620
please fill out the evaluations

01:00:17,800 --> 01:00:56,100
[Applause]

01:00:19,620 --> 01:00:59,120
I remember your name I don't remember

01:00:56,100 --> 01:00:59,120

YouTube URL: https://www.youtube.com/watch?v=hf3TbM6wuO0


