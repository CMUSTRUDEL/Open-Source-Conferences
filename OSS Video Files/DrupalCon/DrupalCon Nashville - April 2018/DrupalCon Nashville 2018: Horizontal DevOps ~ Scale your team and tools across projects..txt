Title: DrupalCon Nashville 2018: Horizontal DevOps ~ Scale your team and tools across projects.
Publication date: 2018-04-11
Playlist: DrupalCon Nashville - April 2018
Description: 
	We often think of DevOps in a super siloed context (eg one project at a time), but having an organizational DevOps plan/strategy and some cross project standardization is really how you benefit. This talk is about the business value of horizontal DevOps across people and projects.



Who?
Beginner / Intermediate / Advanced

All concepts will be discussed at a high level. This will be talk about code and workflow examples, but your experience level will not preclude you from gaining contextual benefit and it is probably good for a beginner to be exposed to some of the concepts and vocabulary.

If you are a decision maker (or have or intend to influence decision making) for your agency/company
CEO
CTO
Lead Developer
People who are thinking about workflows, efficiency, and repeatability for their company


Why?
Sanity
Efficiency
Stability
Repeatability
Sustainability
Profitability


How?
Documentation, Documentation, Documentation
Processes (People and Machines)
Communication
Real time vs. Asynchronous
ChatOps
Email
Issue Queues
Tooling
Automation
Captions: 
	00:00:26,790 --> 00:00:34,809
cool hey everyone thanks for coming out

00:00:32,489 --> 00:00:37,510
we're gonna go ahead and get started up

00:00:34,809 --> 00:00:41,590
here so we're gonna talk about

00:00:37,510 --> 00:00:43,739
horizontal DevOps today my name is Rob

00:00:41,590 --> 00:00:47,070
Bayliss I'm the CTO at last call media

00:00:43,739 --> 00:00:51,180
we're a full service digital agency

00:00:47,070 --> 00:00:54,309
specializing in higher education and

00:00:51,180 --> 00:00:57,820
government sites we also do a lot of

00:00:54,309 --> 00:01:00,059
ongoing support and we have division of

00:00:57,820 --> 00:01:03,579
the business that does DevOps consulting

00:01:00,059 --> 00:01:07,289
I'm here with Jeff I am Jeff st. Pierre

00:01:03,579 --> 00:01:10,960
I work at tandem we are also an agency

00:01:07,289 --> 00:01:13,500
we have websites and some consulting

00:01:10,960 --> 00:01:21,420
gigs and we make a thing called lando

00:01:13,500 --> 00:01:24,220
for local development yeah all right so

00:01:21,420 --> 00:01:26,050
session title of this one is a little

00:01:24,220 --> 00:01:28,439
bit confusing so we're gonna stop and

00:01:26,050 --> 00:01:32,110
unpack for a moment just what we mean by

00:01:28,439 --> 00:01:34,619
horizontal DevOps and basically we're

00:01:32,110 --> 00:01:35,830
working in contrast to traditional

00:01:34,619 --> 00:01:38,380
DevOps

00:01:35,830 --> 00:01:40,799
which is kind of the act of building

00:01:38,380 --> 00:01:43,990
like a yellow brick road to production

00:01:40,799 --> 00:01:46,570
so you have you know your local

00:01:43,990 --> 00:01:48,549
developers and you're gonna be pushing

00:01:46,570 --> 00:01:50,799
code you're gonna be running some kind

00:01:48,549 --> 00:01:53,590
of testing process that's going to end

00:01:50,799 --> 00:01:55,270
up at production and as you're building

00:01:53,590 --> 00:01:57,070
this you might start to construct a

00:01:55,270 --> 00:01:58,299
pipeline that looks a little bit like

00:01:57,070 --> 00:02:00,820
this

00:01:58,299 --> 00:02:03,820
you know you might start with one

00:02:00,820 --> 00:02:06,670
project you have integration with circle

00:02:03,820 --> 00:02:09,040
CI and circle CIA does some work later

00:02:06,670 --> 00:02:11,290
on you might add gulp later on you might

00:02:09,040 --> 00:02:13,540
add new relic to that same project and

00:02:11,290 --> 00:02:16,480
then you know some testing or whatever

00:02:13,540 --> 00:02:20,920
so that that pipeline kind of develops

00:02:16,480 --> 00:02:23,530
over time as a single static thing nuts

00:02:20,920 --> 00:02:28,829
not static at all but basically it's a

00:02:23,530 --> 00:02:31,720
one vertical stack in contrast to

00:02:28,829 --> 00:02:34,180
horizontal DevOps we're talking about we

00:02:31,720 --> 00:02:36,910
have to manage multiple projects you

00:02:34,180 --> 00:02:37,450
know 10 projects 15 projects maybe two

00:02:36,910 --> 00:02:40,270
or three

00:02:37,450 --> 00:02:42,069
active maybe five or relatively dormant

00:02:40,270 --> 00:02:43,629
and two are just hanging around or

00:02:42,069 --> 00:02:45,819
something but how do you manage that

00:02:43,629 --> 00:02:49,560
complexity so that's what we're going to

00:02:45,819 --> 00:02:52,870
talk about with horizontal DevOps and

00:02:49,560 --> 00:02:55,450
just to kind of illustrate this what

00:02:52,870 --> 00:02:58,239
we're really talking about is like in an

00:02:55,450 --> 00:03:01,000
agency or large corporate setting where

00:02:58,239 --> 00:03:03,640
you may be rolling out many projects

00:03:01,000 --> 00:03:06,130
across a time span

00:03:03,640 --> 00:03:09,400
you might start your first project with

00:03:06,130 --> 00:03:11,560
a tool like gulp built into it you might

00:03:09,400 --> 00:03:15,220
work your way up to on your second

00:03:11,560 --> 00:03:17,650
project getting circle CI built in and

00:03:15,220 --> 00:03:19,510
then on your third project you might add

00:03:17,650 --> 00:03:21,880
new relic kind of the same way we were

00:03:19,510 --> 00:03:23,920
talking about before but the idea here

00:03:21,880 --> 00:03:26,110
is that we want to be doing this in a

00:03:23,920 --> 00:03:28,959
way that's going to be scalable that's

00:03:26,110 --> 00:03:31,360
gonna allow us to take these tools with

00:03:28,959 --> 00:03:33,280
us and carry them on to the next project

00:03:31,360 --> 00:03:36,120
so we really want to be building that

00:03:33,280 --> 00:03:41,849
sort of upward momentum of the overall

00:03:36,120 --> 00:03:41,849
agency or organization knowledgebase

00:03:42,810 --> 00:03:47,709
Debs

00:03:44,760 --> 00:03:49,600
so what one of the major themes here is

00:03:47,709 --> 00:03:51,579
we're trying to avoid the DevOps so

00:03:49,600 --> 00:03:53,650
we're super far focused on our new

00:03:51,579 --> 00:03:55,060
project but we still have the other

00:03:53,650 --> 00:03:56,560
projects going we don't but we don't

00:03:55,060 --> 00:03:58,420
want those to fall over the client does

00:03:56,560 --> 00:03:59,739
want those to fall over nobody wants to

00:03:58,420 --> 00:04:01,900
fall for them to fall over we want to

00:03:59,739 --> 00:04:04,359
keep them healthy so here's our

00:04:01,900 --> 00:04:07,810
definition of the problems that we have

00:04:04,359 --> 00:04:09,880
we're managing multiple projects here so

00:04:07,810 --> 00:04:13,389
we obviously have clients and they have

00:04:09,880 --> 00:04:15,970
needs and budgets and that's that's the

00:04:13,389 --> 00:04:17,769
real world you can't can't develop

00:04:15,970 --> 00:04:19,959
everything for a finite amount of money

00:04:17,769 --> 00:04:22,930
everything is possible but you can't do

00:04:19,959 --> 00:04:24,240
it on a budget so you have to there's

00:04:22,930 --> 00:04:26,620
some choices that have to be made there

00:04:24,240 --> 00:04:30,070
Rob you want to take developers sure

00:04:26,620 --> 00:04:33,450
yeah developers how many developers do

00:04:30,070 --> 00:04:36,160
we actually have in the room a lot

00:04:33,450 --> 00:04:38,889
developers we love new stuff we love to

00:04:36,160 --> 00:04:40,990
work with new tools we want react and we

00:04:38,889 --> 00:04:44,200
want all sorts of stuff built into the

00:04:40,990 --> 00:04:46,810
project we might want like I don't know

00:04:44,200 --> 00:04:50,860
a deployment to s3 of your Drupal site I

00:04:46,810 --> 00:04:51,370
don't know why you would do that but we

00:04:50,860 --> 00:04:53,530
always

00:04:51,370 --> 00:04:55,300
like the new thing so that's another

00:04:53,530 --> 00:04:58,810
kind of competing priority there and

00:04:55,300 --> 00:05:00,940
then as DevOps people we want uniformity

00:04:58,810 --> 00:05:03,250
across these projects so if you're

00:05:00,940 --> 00:05:05,080
working with 10 projects it'd be awfully

00:05:03,250 --> 00:05:08,230
nice if we were deploying to the same

00:05:05,080 --> 00:05:11,740
place for example and so these problems

00:05:08,230 --> 00:05:13,810
are always present in any kind of DevOps

00:05:11,740 --> 00:05:16,210
setting any kind of development setting

00:05:13,810 --> 00:05:18,190
but I think they become especially

00:05:16,210 --> 00:05:24,880
painful sometimes when you're working

00:05:18,190 --> 00:05:28,240
across maybe 20 projects so we're just

00:05:24,880 --> 00:05:31,120
gonna stop here and talk about how each

00:05:28,240 --> 00:05:32,770
of our agencies manages it Jeff is gonna

00:05:31,120 --> 00:05:35,530
talk about lando and I'm gonna talk

00:05:32,770 --> 00:05:39,190
about what last call media is doing just

00:05:35,530 --> 00:05:41,470
as kind of examples of how you might be

00:05:39,190 --> 00:05:46,660
trying to build this upward trajectory

00:05:41,470 --> 00:05:48,910
in your own organization great so a

00:05:46,660 --> 00:05:52,360
tandem one of the primary tools we use

00:05:48,910 --> 00:05:55,630
to manage this complexity is lando so

00:05:52,360 --> 00:05:57,490
here's what lando is I know it's for

00:05:55,630 --> 00:05:59,229
developers want to quickly specify and

00:05:57,490 --> 00:06:01,479
painlessly spin up services and tools

00:05:59,229 --> 00:06:03,370
they need to develop their projects so

00:06:01,479 --> 00:06:05,080
in that sense we consider Lando a

00:06:03,370 --> 00:06:07,840
wrapper that gives us all the things

00:06:05,080 --> 00:06:09,160
that we need for project a and all the

00:06:07,840 --> 00:06:10,450
things that we need for project B and

00:06:09,160 --> 00:06:11,740
they might be totally the same they

00:06:10,450 --> 00:06:13,270
might be slightly different they might

00:06:11,740 --> 00:06:14,919
be totally different but they're

00:06:13,270 --> 00:06:18,580
packaged and managed by this thing that

00:06:14,919 --> 00:06:20,260
we use so when you were getting started

00:06:18,580 --> 00:06:23,680
with Lando the first command we issue is

00:06:20,260 --> 00:06:25,630
Lando and nits and then we can so this

00:06:23,680 --> 00:06:28,660
is in our git repo we choose a recipe in

00:06:25,630 --> 00:06:30,580
this case we chose in Drupal 8 and then

00:06:28,660 --> 00:06:32,500
it's gonna ask us some questions about

00:06:30,580 --> 00:06:34,510
configuring this application so in this

00:06:32,500 --> 00:06:39,160
case I'm telling it that the where we're

00:06:34,510 --> 00:06:41,650
gonna serve from is web and and then the

00:06:39,160 --> 00:06:43,750
result of Lando and it is this Lando

00:06:41,650 --> 00:06:46,690
diamo file and that's where all the

00:06:43,750 --> 00:06:47,919
configuration goes from running this

00:06:46,690 --> 00:06:49,510
Lando init command so we're following

00:06:47,919 --> 00:06:51,340
the same pattern as you know get in the

00:06:49,510 --> 00:06:52,960
MPM init composer in it so we're

00:06:51,340 --> 00:06:55,090
following these similar patterns that

00:06:52,960 --> 00:06:56,770
are felt familiar to both developers and

00:06:55,090 --> 00:06:59,190
the result of this is this dot Lando

00:06:56,770 --> 00:07:01,720
diamo file

00:06:59,190 --> 00:07:03,699
so that Lando and Nick come in that we

00:07:01,720 --> 00:07:05,889
just run results in this single Yama

00:07:03,699 --> 00:07:08,139
file it has the name of the application

00:07:05,889 --> 00:07:09,520
the recipe that we chose you don't have

00:07:08,139 --> 00:07:11,470
to start with a recipe but recipes a

00:07:09,520 --> 00:07:13,270
really convenient way to get going if

00:07:11,470 --> 00:07:15,789
you want to start with a tuple aid or

00:07:13,270 --> 00:07:17,530
Drupal 7 or Drupal 6 project get you

00:07:15,789 --> 00:07:19,060
going super fast and then you can extend

00:07:17,530 --> 00:07:21,879
it from there or you can go full-blown

00:07:19,060 --> 00:07:23,319
custom right away so we have a config

00:07:21,879 --> 00:07:25,180
key here and the only thing in there so

00:07:23,319 --> 00:07:26,800
far is that we're telling that we're

00:07:25,180 --> 00:07:33,759
gonna serve out of a subdirectory called

00:07:26,800 --> 00:07:35,860
web after you initialize the application

00:07:33,759 --> 00:07:38,440
you're going to do lando start and

00:07:35,860 --> 00:07:40,330
that's gonna spin up your docker

00:07:38,440 --> 00:07:42,909
containers lando is based on top of

00:07:40,330 --> 00:07:44,560
docker compose so it's going to spin up

00:07:42,909 --> 00:07:46,090
all the containers that are necessary to

00:07:44,560 --> 00:07:47,860
run the application depending on

00:07:46,090 --> 00:07:51,659
whatever recipe or whatever is in your

00:07:47,860 --> 00:07:51,659
dock then dot land o dot yeah we'll file

00:07:53,099 --> 00:07:58,030
so land o start spins up those

00:07:55,599 --> 00:08:00,430
containers and then it spits up a

00:07:58,030 --> 00:08:02,440
database container applications

00:08:00,430 --> 00:08:04,860
container and then you have in this case

00:08:02,440 --> 00:08:12,250
a working to plate site that you're

00:08:04,860 --> 00:08:13,659
ready to start developing on so the next

00:08:12,250 --> 00:08:15,610
thing that we recommend that you do is

00:08:13,659 --> 00:08:17,430
commit that configuration file that dot

00:08:15,610 --> 00:08:19,479
landed on yellow file to your repository

00:08:17,430 --> 00:08:21,130
this way you're sharing that

00:08:19,479 --> 00:08:24,190
configuration amongst all of your

00:08:21,130 --> 00:08:26,949
developers so you have a team of three a

00:08:24,190 --> 00:08:28,870
team of ten once your initial DevOps is

00:08:26,949 --> 00:08:31,479
done with this Lando init and Lando and

00:08:28,870 --> 00:08:32,709
you commit this file they pull that down

00:08:31,479 --> 00:08:37,000
they have all the configuration

00:08:32,709 --> 00:08:39,310
necessary to run this application so

00:08:37,000 --> 00:08:41,169
when you do a Drupal 8 recipe for

00:08:39,310 --> 00:08:43,839
example that's pulling in Drupal console

00:08:41,169 --> 00:08:45,850
drush things like that so you have those

00:08:43,839 --> 00:08:51,550
two links that you need to run that

00:08:45,850 --> 00:08:53,680
application so with just a lando in it

00:08:51,550 --> 00:08:55,839
and answering those questions you get a

00:08:53,680 --> 00:08:57,579
very simple file this is an example of

00:08:55,839 --> 00:08:59,110
what I would call a sort of whelming

00:08:57,579 --> 00:09:02,260
file it's not overwhelming but it's a

00:08:59,110 --> 00:09:04,089
little more complex than then the then

00:09:02,260 --> 00:09:06,310
the first you know five or six line file

00:09:04,089 --> 00:09:07,750
that we saw so this is intended to

00:09:06,310 --> 00:09:09,459
demonstrate some of the flexibility that

00:09:07,750 --> 00:09:09,920
you can add in besides just doing the

00:09:09,459 --> 00:09:11,540
Lando and

00:09:09,920 --> 00:09:13,670
and starting from a recipe so here we're

00:09:11,540 --> 00:09:15,290
still starting from a recipe we have a

00:09:13,670 --> 00:09:18,290
couple more things under the config key

00:09:15,290 --> 00:09:20,930
so we still have web rue is web now we

00:09:18,290 --> 00:09:23,630
have via engine acts so we can start

00:09:20,930 --> 00:09:25,250
creating production parity here so if if

00:09:23,630 --> 00:09:26,600
you're serving with Apache by default

00:09:25,250 --> 00:09:28,760
the Drupal 8 recipes going to serve from

00:09:26,600 --> 00:09:31,490
Apache but you can specify nginx or you

00:09:28,760 --> 00:09:33,260
can specify Apache here and you know

00:09:31,490 --> 00:09:34,430
specify whatever you're using in

00:09:33,260 --> 00:09:37,490
production so you're starting to get

00:09:34,430 --> 00:09:39,829
that build up that parity PHP key we're

00:09:37,490 --> 00:09:43,070
specifying PHP 7.1 here we can go

00:09:39,829 --> 00:09:44,899
backwards to 5.3 and upwards to 7.2 so

00:09:43,070 --> 00:09:47,300
if you have one application on 7.0 one

00:09:44,899 --> 00:09:49,850
application on 7.1 super easy to swap it

00:09:47,300 --> 00:09:51,980
out Lando rebuild the application get a

00:09:49,850 --> 00:09:54,320
new container that has the the right

00:09:51,980 --> 00:09:56,630
components for whatever application

00:09:54,320 --> 00:09:59,540
you're working on similarly you can have

00:09:56,630 --> 00:10:02,209
swap databases are specified what kind

00:09:59,540 --> 00:10:05,750
of databases you want in this case we're

00:10:02,209 --> 00:10:07,670
specifying Maria DB you can pop in x2

00:10:05,750 --> 00:10:10,100
bug so you can have X the bug across all

00:10:07,670 --> 00:10:12,320
your developers Lando is gonna spin that

00:10:10,100 --> 00:10:15,860
up and have the things you need to use X

00:10:12,320 --> 00:10:17,690
debug so here we have a services key and

00:10:15,860 --> 00:10:19,640
we're saying on the app server we want

00:10:17,690 --> 00:10:21,470
to run a certain command and what we're

00:10:19,640 --> 00:10:23,690
doing here is pulling in the platform

00:10:21,470 --> 00:10:26,029
CLI so in the example that you're

00:10:23,690 --> 00:10:27,649
hosting on platform SH you could pull in

00:10:26,029 --> 00:10:29,449
that platform CLI and have access to

00:10:27,649 --> 00:10:32,990
that right and right in the application

00:10:29,449 --> 00:10:35,000
across developers and then the tooling

00:10:32,990 --> 00:10:36,890
key is going to expose that command so

00:10:35,000 --> 00:10:39,230
we're saying expose the platform command

00:10:36,890 --> 00:10:40,449
on the app server and run this command

00:10:39,230 --> 00:10:44,120
when people have it so that's going to

00:10:40,449 --> 00:10:50,079
expose the platform CLI to the Lando

00:10:44,120 --> 00:10:53,329
users on this project if you just run

00:10:50,079 --> 00:10:55,069
bare Lando on an application that's

00:10:53,329 --> 00:10:56,660
using about Liana Diane will file it

00:10:55,069 --> 00:10:58,819
will give you a list of the things that

00:10:56,660 --> 00:11:00,920
you have available to you the tooling is

00:10:58,819 --> 00:11:04,279
you have available to you so some things

00:11:00,920 --> 00:11:05,779
like in a PHP app you're gonna have it's

00:11:04,279 --> 00:11:08,180
kind of come around here so I've

00:11:05,779 --> 00:11:10,279
composer available to us by by default

00:11:08,180 --> 00:11:13,639
on a PHP application in the case of my

00:11:10,279 --> 00:11:15,589
Triple A app we have Drupal triple

00:11:13,639 --> 00:11:17,490
console and drush available to us and

00:11:15,589 --> 00:11:20,100
there's that platform command

00:11:17,490 --> 00:11:21,660
exposed in the in the tooling grout so

00:11:20,100 --> 00:11:23,580
most of those that you see up there

00:11:21,660 --> 00:11:25,260
defaults for the Jubilee recipe the

00:11:23,580 --> 00:11:27,089
platform was an example of one that we

00:11:25,260 --> 00:11:29,459
piped in via that run command and

00:11:27,089 --> 00:11:31,230
exposing it via tooling and you can add

00:11:29,459 --> 00:11:35,430
in as many other things as you might

00:11:31,230 --> 00:11:37,260
need with similar configurations and

00:11:35,430 --> 00:11:42,089
there's lots lots to say about that on

00:11:37,260 --> 00:11:44,190
the documentation sure yeah I guess I

00:11:42,089 --> 00:11:46,830
would just mention that I think the

00:11:44,190 --> 00:11:49,620
really powerful way about thing about

00:11:46,830 --> 00:11:52,050
the way you guys use lando is that that

00:11:49,620 --> 00:11:54,510
configuration file exists in the project

00:11:52,050 --> 00:11:56,399
and it's going to be more or less the

00:11:54,510 --> 00:11:58,529
same set up steps for every single

00:11:56,399 --> 00:12:01,110
project for you guys so is it developers

00:11:58,529 --> 00:12:05,130
coming on they're gonna start with Lando

00:12:01,110 --> 00:12:08,010
start that's gonna remain consistent so

00:12:05,130 --> 00:12:11,490
this is a slightly different solution to

00:12:08,010 --> 00:12:14,610
a similar problem last call media had an

00:12:11,490 --> 00:12:17,880
issue several years back where we were

00:12:14,610 --> 00:12:21,270
starting every project fresh and we

00:12:17,880 --> 00:12:24,360
basically were repeating things but not

00:12:21,270 --> 00:12:27,510
sharing anything us we started kind of

00:12:24,360 --> 00:12:29,070
our own like place to put this it's

00:12:27,510 --> 00:12:31,050
called the last call media Drupal

00:12:29,070 --> 00:12:34,110
scaffold and it's just a boilerplate

00:12:31,050 --> 00:12:37,260
Drupal 8 build that contains like you

00:12:34,110 --> 00:12:41,820
know like our PHP CS configuration our

00:12:37,260 --> 00:12:44,430
circle build our ideal deployment

00:12:41,820 --> 00:12:46,110
process that kind of thing this is an

00:12:44,430 --> 00:12:47,760
open source project as well and you're

00:12:46,110 --> 00:12:52,350
welcome to check out the URL which is

00:12:47,760 --> 00:12:54,510
down on the bottom left we have pretty

00:12:52,350 --> 00:12:57,029
explicit setup instructions for local

00:12:54,510 --> 00:12:59,550
development which are shared between all

00:12:57,029 --> 00:13:01,230
of our projects so any developer that's

00:12:59,550 --> 00:13:03,360
coming on to our projects is going to

00:13:01,230 --> 00:13:06,779
see this to start with on the project

00:13:03,360 --> 00:13:09,410
page and these steps are basically the

00:13:06,779 --> 00:13:12,570
same between all of our projects as well

00:13:09,410 --> 00:13:16,910
so again quick set up you know docker

00:13:12,570 --> 00:13:20,010
compose is what we're using and we use

00:13:16,910 --> 00:13:22,680
additionally composer and yarn always

00:13:20,010 --> 00:13:24,149
built into our projects so those are

00:13:22,680 --> 00:13:26,940
sort of the three things that we know

00:13:24,149 --> 00:13:29,790
are always going to be there and we rely

00:13:26,940 --> 00:13:30,780
on them from project to project one

00:13:29,790 --> 00:13:33,720
thing I would point out

00:13:30,780 --> 00:13:37,500
is the last step which is this site

00:13:33,720 --> 00:13:38,910
import command that you're gonna run I'm

00:13:37,500 --> 00:13:40,230
gonna go through that in a little bit

00:13:38,910 --> 00:13:44,120
more detail in a moment

00:13:40,230 --> 00:13:48,000
but for now just know it's the last step

00:13:44,120 --> 00:13:50,580
we do most of our actual tooling inside

00:13:48,000 --> 00:13:54,750
the projects with composer scripts and

00:13:50,580 --> 00:13:57,510
we try to keep a few commands absolutely

00:13:54,750 --> 00:13:59,910
locked in and the same across all of our

00:13:57,510 --> 00:14:01,980
projects so even though we're starting

00:13:59,910 --> 00:14:05,700
from the same point we may be able to

00:14:01,980 --> 00:14:07,470
deviate each project in certain ways but

00:14:05,700 --> 00:14:11,370
some things are gonna stay the same for

00:14:07,470 --> 00:14:14,130
example you have a composer build script

00:14:11,370 --> 00:14:16,440
and build is going to be compiling your

00:14:14,130 --> 00:14:18,960
static assets whatever that means for

00:14:16,440 --> 00:14:22,140
this site whether it's gulp or grunt or

00:14:18,960 --> 00:14:24,960
webpack or whatever composer build will

00:14:22,140 --> 00:14:27,450
always invoke that we have you know

00:14:24,960 --> 00:14:30,620
linting so composer lint is gonna mean

00:14:27,450 --> 00:14:33,060
the same thing across all the projects

00:14:30,620 --> 00:14:35,250
testing this is another area that can

00:14:33,060 --> 00:14:37,440
differ from project to project will have

00:14:35,250 --> 00:14:39,660
like you know visual regression testing

00:14:37,440 --> 00:14:43,590
on one project we might have B hat we

00:14:39,660 --> 00:14:46,350
might have PHP unit but the composer

00:14:43,590 --> 00:14:49,140
test command will do all the setup in

00:14:46,350 --> 00:14:51,840
the the invoking of all that stuff

00:14:49,140 --> 00:14:55,670
and then finally this site import

00:14:51,840 --> 00:14:58,260
command down here and all that does is

00:14:55,670 --> 00:15:00,240
every one sorry I should probably ask

00:14:58,260 --> 00:15:05,400
this first does anyone not know what

00:15:00,240 --> 00:15:07,560
composer scripts are okay no one all

00:15:05,400 --> 00:15:09,690
right well just in case

00:15:07,560 --> 00:15:12,570
composer scripts are ways that you can

00:15:09,690 --> 00:15:14,570
specify in your composer file commands

00:15:12,570 --> 00:15:18,840
that can be invoked using composer

00:15:14,570 --> 00:15:21,150
whatever the word is and so this site

00:15:18,840 --> 00:15:24,390
import command is just something that

00:15:21,150 --> 00:15:27,240
you can invoke via composer and it does

00:15:24,390 --> 00:15:29,220
whatever is written here and again this

00:15:27,240 --> 00:15:31,020
is going to be configurable on a per

00:15:29,220 --> 00:15:33,930
project basis so you can see that on

00:15:31,020 --> 00:15:36,240
this one we have refresh local Pantheon

00:15:33,930 --> 00:15:38,940
is what happens when site import is run

00:15:36,240 --> 00:15:41,070
so that's going to pull a database down

00:15:38,940 --> 00:15:44,370
from Pantheon using the terminal

00:15:41,070 --> 00:15:46,680
terminus CLI and import it into our low

00:15:44,370 --> 00:15:49,529
site so you can imagine that on aqueous

00:15:46,680 --> 00:15:52,170
that show shell script might change but

00:15:49,529 --> 00:15:54,330
what's cool is that the developer only

00:15:52,170 --> 00:15:58,110
needs to know that composer site import

00:15:54,330 --> 00:16:00,300
works on in both cases so again we're

00:15:58,110 --> 00:16:02,370
trying to keep that consistency from

00:16:00,300 --> 00:16:05,400
project to project a project to avoid

00:16:02,370 --> 00:16:08,040
the spin off time as developers hop

00:16:05,400 --> 00:16:09,960
between projects the other thing that

00:16:08,040 --> 00:16:13,290
we've done a lot of work on in our

00:16:09,960 --> 00:16:15,750
scaffold is the circle CI integration

00:16:13,290 --> 00:16:17,490
and we've got three common steps that

00:16:15,750 --> 00:16:19,940
are gonna happen pretty much anytime you

00:16:17,490 --> 00:16:22,410
push code to one of our repositories

00:16:19,940 --> 00:16:25,080
we've got a build step which is going to

00:16:22,410 --> 00:16:29,029
do all of our asset compilation all the

00:16:25,080 --> 00:16:32,220
vendor third-party dependency pulling in

00:16:29,029 --> 00:16:35,160
and then we've got deploy which is going

00:16:32,220 --> 00:16:37,710
to send it to whatever the destination

00:16:35,160 --> 00:16:39,450
is in this case this is a Pantheon multi

00:16:37,710 --> 00:16:41,100
dev instance so don't worry that the

00:16:39,450 --> 00:16:44,880
tests didn't pass

00:16:41,100 --> 00:16:46,860
not everything is broken and then we

00:16:44,880 --> 00:16:48,600
have this test step and again that might

00:16:46,860 --> 00:16:51,300
differ from project to project the

00:16:48,600 --> 00:16:53,970
project but as a developer coming into

00:16:51,300 --> 00:16:56,130
this project I know exactly what to

00:16:53,970 --> 00:16:57,690
expect when I hit circle CI I'm gonna

00:16:56,130 --> 00:17:02,459
see that there's a build deploy and test

00:16:57,690 --> 00:17:04,500
and I can see instantly what failed so

00:17:02,459 --> 00:17:07,170
we share that across all of our projects

00:17:04,500 --> 00:17:08,490
again and it's been a really nice way to

00:17:07,170 --> 00:17:11,790
kind of make sure that we're always

00:17:08,490 --> 00:17:18,390
keeping that upward trajectory as far as

00:17:11,790 --> 00:17:21,360
our tooling great so why did we pick X

00:17:18,390 --> 00:17:24,480
meaning you know why is last call use

00:17:21,360 --> 00:17:25,890
Drupal scaffold and tandem use lando I

00:17:24,480 --> 00:17:27,870
thought you're gonna come here and get

00:17:25,890 --> 00:17:29,850
the golden road everything was perfect

00:17:27,870 --> 00:17:31,260
all your problems solved well it's

00:17:29,850 --> 00:17:33,360
complicated there's lots of decisions to

00:17:31,260 --> 00:17:35,700
make so that the thing we would like you

00:17:33,360 --> 00:17:38,220
to take away from this is pick something

00:17:35,700 --> 00:17:40,830
think about it and make some decisions

00:17:38,220 --> 00:17:44,790
so it's good to think about these things

00:17:40,830 --> 00:17:45,990
and come to some conclusions so that's

00:17:44,790 --> 00:17:50,490
what we're gonna offer you here some

00:17:45,990 --> 00:17:52,679
some guidelines yep right and I just

00:17:50,490 --> 00:17:56,460
want to expand on that and say that

00:17:52,679 --> 00:17:58,200
where our message here is that as an

00:17:56,460 --> 00:18:00,500
organization you should be working

00:17:58,200 --> 00:18:03,570
that develops capacity and the

00:18:00,500 --> 00:18:06,690
organizational kind of knowledge

00:18:03,570 --> 00:18:10,350
knowledge base so the guidelines that

00:18:06,690 --> 00:18:13,860
we're gonna present here are in service

00:18:10,350 --> 00:18:16,680
of that first things first we have to

00:18:13,860 --> 00:18:19,920
recognize that you do need to invest in

00:18:16,680 --> 00:18:22,020
DevOps as an organization if you want to

00:18:19,920 --> 00:18:24,930
improve your tooling improve your

00:18:22,020 --> 00:18:28,350
project first you need to actually spend

00:18:24,930 --> 00:18:30,630
some some time doing it the way that we

00:18:28,350 --> 00:18:33,450
sort of suggest getting started with

00:18:30,630 --> 00:18:36,120
that is we're all working on individual

00:18:33,450 --> 00:18:37,950
projects today and as those projects

00:18:36,120 --> 00:18:40,740
progress you're gonna hit a moment in

00:18:37,950 --> 00:18:43,110
every project where something breaks and

00:18:40,740 --> 00:18:46,290
you don't understand why but you have to

00:18:43,110 --> 00:18:48,750
spend the time to fix it so if that

00:18:46,290 --> 00:18:51,090
something has broken more than once or

00:18:48,750 --> 00:18:54,360
if it's something you anticipate having

00:18:51,090 --> 00:18:56,520
to to deal with again spend the time to

00:18:54,360 --> 00:19:00,300
actually come up with a good solution

00:18:56,520 --> 00:19:03,120
for it in the scope of that project and

00:19:00,300 --> 00:19:05,220
as you're doing that just kind of keep

00:19:03,120 --> 00:19:06,900
it in the back of your mind that you

00:19:05,220 --> 00:19:09,480
spent that time you should be

00:19:06,900 --> 00:19:11,370
considering after the project how do we

00:19:09,480 --> 00:19:13,590
actually take that and make it a

00:19:11,370 --> 00:19:17,060
universal solution for all our projects

00:19:13,590 --> 00:19:19,800
so just as a concrete example of this

00:19:17,060 --> 00:19:22,500
during one of our projects we have we

00:19:19,800 --> 00:19:25,260
kept having an issue with CSS breakage

00:19:22,500 --> 00:19:28,230
so we would make a change and then we

00:19:25,260 --> 00:19:31,590
would push it everything looked great we

00:19:28,230 --> 00:19:32,940
would push it to production and there

00:19:31,590 --> 00:19:35,430
were pages broken that we didn't know

00:19:32,940 --> 00:19:37,770
about so I think we've probably all had

00:19:35,430 --> 00:19:40,620
that experience before we spent some

00:19:37,770 --> 00:19:42,360
time during the scope of that project to

00:19:40,620 --> 00:19:45,090
implement visual or regression testing

00:19:42,360 --> 00:19:47,490
and we did it in the way that enabled us

00:19:45,090 --> 00:19:51,390
to kind of go back later on and pick it

00:19:47,490 --> 00:19:53,940
out into that Drupal scaffold and really

00:19:51,390 --> 00:19:57,840
like leverage that going forward in a

00:19:53,940 --> 00:19:59,270
very simple way lover you against more

00:19:57,840 --> 00:20:01,800
than one project more than just a patch

00:19:59,270 --> 00:20:04,050
so yeah so all the projects benefited

00:20:01,800 --> 00:20:06,990
from it yep the other thing I would add

00:20:04,050 --> 00:20:08,800
to this slide is that it's really great

00:20:06,990 --> 00:20:10,870
and probably necessary that by

00:20:08,800 --> 00:20:14,140
from your upper level of your company

00:20:10,870 --> 00:20:16,330
the the CEOs and CTOs because otherwise

00:20:14,140 --> 00:20:18,040
it's unlikely that someone from the

00:20:16,330 --> 00:20:20,980
ground up is gonna carve out this time

00:20:18,040 --> 00:20:22,180
for the stuff to happen but if you're if

00:20:20,980 --> 00:20:23,830
you're topple over your company is

00:20:22,180 --> 00:20:26,320
encouraging that and they recognize that

00:20:23,830 --> 00:20:28,990
there's value in that time then it's

00:20:26,320 --> 00:20:33,400
gonna be more likely to happen yeah I

00:20:28,990 --> 00:20:35,050
think also as far as like identifying

00:20:33,400 --> 00:20:37,270
those things and pulling them out into

00:20:35,050 --> 00:20:39,250
this global namespace as we're calling

00:20:37,270 --> 00:20:42,460
it this is the practice that we'd like

00:20:39,250 --> 00:20:44,740
to encourage retrospectives are a really

00:20:42,460 --> 00:20:47,500
great chance to offer to really like

00:20:44,740 --> 00:20:50,110
recognize it and pull it out and

00:20:47,500 --> 00:20:52,750
identify that it is a thing that could

00:20:50,110 --> 00:20:54,400
be fixed across many projects so as

00:20:52,750 --> 00:20:56,170
DevOps people we want to stay involved

00:20:54,400 --> 00:20:58,900
in those retrospectives and make sure

00:20:56,170 --> 00:21:05,050
that we're hearing what what people are

00:20:58,900 --> 00:21:06,520
saying so why why invest in DevOps so

00:21:05,050 --> 00:21:08,560
these are probably pretty well known but

00:21:06,520 --> 00:21:11,020
we want to state them for clarity so

00:21:08,560 --> 00:21:13,420
when you if you choose to make this

00:21:11,020 --> 00:21:13,980
investment of time and money and people

00:21:13,420 --> 00:21:16,990
power

00:21:13,980 --> 00:21:19,180
you're gonna increase efficiency you're

00:21:16,990 --> 00:21:22,390
gonna be able to move more quickly per

00:21:19,180 --> 00:21:24,880
project you're gonna become more

00:21:22,390 --> 00:21:27,670
productive so you're not gonna have to

00:21:24,880 --> 00:21:29,920
worry about the Annoying breakages

00:21:27,670 --> 00:21:31,270
you're gonna be able to focus on the

00:21:29,920 --> 00:21:33,070
things that's making the project move

00:21:31,270 --> 00:21:39,490
forward and making your skills move

00:21:33,070 --> 00:21:41,350
forward sure yeah your developers are

00:21:39,490 --> 00:21:44,080
gonna be able to move a lot faster if

00:21:41,350 --> 00:21:46,330
they have the confidence that something

00:21:44,080 --> 00:21:48,400
small is not going to trip them up so

00:21:46,330 --> 00:21:51,280
you know using the example of like

00:21:48,400 --> 00:21:54,040
imagine that on project number one for

00:21:51,280 --> 00:21:55,960
your agency you implemented a b-hat test

00:21:54,040 --> 00:21:58,540
that went through and checked at the

00:21:55,960 --> 00:22:02,200
homepage bootstraps really simple check

00:21:58,540 --> 00:22:04,570
but having that in the future just that

00:22:02,200 --> 00:22:07,300
is the home page loading seems like a

00:22:04,570 --> 00:22:09,400
pretty simple way to like remove that

00:22:07,300 --> 00:22:12,130
from your developers brains and just

00:22:09,400 --> 00:22:14,470
make it so that they don't need to worry

00:22:12,130 --> 00:22:17,680
about that kind of breakage that'll be

00:22:14,470 --> 00:22:20,080
caught automatically they can focus more

00:22:17,680 --> 00:22:22,450
on the hard problems so it's going to

00:22:20,080 --> 00:22:26,380
let them move a lot faster and

00:22:22,450 --> 00:22:29,050
develop a lot faster and then sort of

00:22:26,380 --> 00:22:30,880
the next thing as you develop this

00:22:29,050 --> 00:22:34,470
toolset you're gonna find yourself able

00:22:30,880 --> 00:22:37,660
to take on much more complex projects

00:22:34,470 --> 00:22:39,550
using the same resources so you have all

00:22:37,660 --> 00:22:41,680
that sort of like aggregated knowledge

00:22:39,550 --> 00:22:44,860
process technology whatever you want to

00:22:41,680 --> 00:22:46,570
call it you can carry that from project

00:22:44,860 --> 00:22:49,090
to project and really use it as a

00:22:46,570 --> 00:22:49,600
stepping stool to jump up to the next

00:22:49,090 --> 00:22:52,060
level

00:22:49,600 --> 00:22:55,600
in terms of what your company is able to

00:22:52,060 --> 00:22:58,360
deliver and then finally if you're able

00:22:55,600 --> 00:23:03,100
to actually develop this DevOps practice

00:22:58,360 --> 00:23:05,320
into more of like a habit that is

00:23:03,100 --> 00:23:08,170
well-known as something your company

00:23:05,320 --> 00:23:10,120
does well then it can really become a

00:23:08,170 --> 00:23:12,550
good revenue stream or a selling point

00:23:10,120 --> 00:23:15,730
for your company if you're able to go

00:23:12,550 --> 00:23:17,830
into project pitches and say yeah we we

00:23:15,730 --> 00:23:20,020
do all sorts of testing we're excellent

00:23:17,830 --> 00:23:22,660
at implementing test pipelines and

00:23:20,020 --> 00:23:30,940
production pipelines that's something

00:23:22,660 --> 00:23:33,280
that that sells very well right so who's

00:23:30,940 --> 00:23:35,320
on my dev dev ops team I think this is

00:23:33,280 --> 00:23:38,290
an interesting question we did this

00:23:35,320 --> 00:23:40,750
session at nerd summit in Western

00:23:38,290 --> 00:23:43,330
Massachusetts and there was a person

00:23:40,750 --> 00:23:44,980
from data dog there who basically called

00:23:43,330 --> 00:23:47,800
us out at the end of the presentation

00:23:44,980 --> 00:23:50,320
and said that's all well and good but I

00:23:47,800 --> 00:23:52,930
think that this doesn't just apply to

00:23:50,320 --> 00:23:55,240
DevOps people I think that everyone and

00:23:52,930 --> 00:23:58,960
the company should be a DevOps person

00:23:55,240 --> 00:24:00,850
and that's a really really good point we

00:23:58,960 --> 00:24:03,520
think that the people that are involved

00:24:00,850 --> 00:24:06,610
in DevOps they might not be DevOps

00:24:03,520 --> 00:24:08,800
people but they're really anybody that

00:24:06,610 --> 00:24:10,750
is on the team there are people that

00:24:08,800 --> 00:24:13,060
participate in you know the daily

00:24:10,750 --> 00:24:17,890
activities development quality control

00:24:13,060 --> 00:24:20,140
whatever and they're aware and mindful

00:24:17,890 --> 00:24:23,380
of the sticking points that they're

00:24:20,140 --> 00:24:26,170
hitting on deployments on you know

00:24:23,380 --> 00:24:28,900
regular development and they're just

00:24:26,170 --> 00:24:30,790
focused on improving like the technical

00:24:28,900 --> 00:24:31,990
flow of the projects making sure that

00:24:30,790 --> 00:24:35,860
those are going smoothly

00:24:31,990 --> 00:24:38,080
and also being responsible for

00:24:35,860 --> 00:24:41,110
either identifying or actually pulling

00:24:38,080 --> 00:24:43,059
those slight improvements that are made

00:24:41,110 --> 00:24:45,070
from project a project up to the higher

00:24:43,059 --> 00:24:47,320
level so that their surface to the

00:24:45,070 --> 00:24:49,539
organization and available for projects

00:24:47,320 --> 00:24:51,700
going forward yeah let's say that a

00:24:49,539 --> 00:24:53,529
large part of that to including everyone

00:24:51,700 --> 00:24:57,100
in the DevOps workflow is it is it's a

00:24:53,529 --> 00:25:00,190
flow so pay attention to where you know

00:24:57,100 --> 00:25:01,929
DevOps hands off to a developer and vice

00:25:00,190 --> 00:25:03,250
versa where a developer feels a pain

00:25:01,929 --> 00:25:04,570
point but they don't necessarily know

00:25:03,250 --> 00:25:06,490
how to solve it if you have your DevOps

00:25:04,570 --> 00:25:08,649
hat on on the background you can at

00:25:06,490 --> 00:25:10,929
least make a bullet point for that to

00:25:08,649 --> 00:25:12,549
bring that up to your DevOps people in

00:25:10,929 --> 00:25:15,399
the you know stand up or in a

00:25:12,549 --> 00:25:16,840
retrospective so if you always have kind

00:25:15,399 --> 00:25:18,070
of this DevOps half in the background

00:25:16,840 --> 00:25:19,929
you're injecting DevOps into all your

00:25:18,070 --> 00:25:22,000
processes that's we're gonna get the

00:25:19,929 --> 00:25:23,110
flow increase of efficiency because

00:25:22,000 --> 00:25:25,149
you're communicating that to each other

00:25:23,110 --> 00:25:26,649
identifying those pain points and then

00:25:25,149 --> 00:25:28,510
giving yourself your company an

00:25:26,649 --> 00:25:36,970
opportunity to do something about those

00:25:28,510 --> 00:25:38,889
through communication building your

00:25:36,970 --> 00:25:42,340
global namespace so this is what we're

00:25:38,889 --> 00:25:45,039
talking about about building a toolset

00:25:42,340 --> 00:25:48,010
that can work across projects so what

00:25:45,039 --> 00:25:49,899
are these things so in a super simple

00:25:48,010 --> 00:25:52,179
sense there they are

00:25:49,899 --> 00:25:54,130
Lando and Drupal scaffold those are

00:25:52,179 --> 00:25:57,399
definitely things that move across all

00:25:54,130 --> 00:25:59,860
of our projects to help us have similar

00:25:57,399 --> 00:26:02,980
and consistent workflows but we also

00:25:59,860 --> 00:26:05,139
want to see what else we can pull in and

00:26:02,980 --> 00:26:07,210
how we can manage these tools once we

00:26:05,139 --> 00:26:09,309
start building them up and they don't

00:26:07,210 --> 00:26:11,320
have to be tools that you built in-house

00:26:09,309 --> 00:26:14,130
either I want to definitely highlight

00:26:11,320 --> 00:26:16,480
that point that you know even if you

00:26:14,130 --> 00:26:19,269
part of this global namespace is

00:26:16,480 --> 00:26:22,289
figuring out how to use some external

00:26:19,269 --> 00:26:24,909
tool that's that's part of this -

00:26:22,289 --> 00:26:26,769
absolutely I would include you know

00:26:24,909 --> 00:26:28,659
composer and Russian that like those are

00:26:26,769 --> 00:26:30,130
those are part of the tools you need to

00:26:28,659 --> 00:26:31,450
build your application so they're part

00:26:30,130 --> 00:26:33,000
of your namespace part of the stuff

00:26:31,450 --> 00:26:36,669
you're managing how you manage that

00:26:33,000 --> 00:26:38,740
matters so one thing that we think is

00:26:36,669 --> 00:26:40,539
leveraging semantic versioning so if you

00:26:38,740 --> 00:26:42,429
have this in-house toolset you're

00:26:40,539 --> 00:26:44,110
controlling some some way either through

00:26:42,429 --> 00:26:46,200
the docker compose files or through

00:26:44,110 --> 00:26:48,940
vandal configuration files

00:26:46,200 --> 00:26:50,470
version that thing some do you semantic

00:26:48,940 --> 00:26:51,580
version even if it's just an in-house

00:26:50,470 --> 00:26:53,200
tool you haven't released it as

00:26:51,580 --> 00:26:54,520
open-source we encourage you to release

00:26:53,200 --> 00:26:57,460
it as open source if you have something

00:26:54,520 --> 00:26:59,380
that's useful to people but if you even

00:26:57,460 --> 00:27:01,090
if you don't and you still use semantic

00:26:59,380 --> 00:27:03,160
versioning against it you're going to be

00:27:01,090 --> 00:27:04,840
conveying information to your users

00:27:03,160 --> 00:27:06,550
which may be just your developer so they

00:27:04,840 --> 00:27:10,240
may be many developers of it's an open

00:27:06,550 --> 00:27:12,610
source project so minor point release if

00:27:10,240 --> 00:27:16,360
you go from 3.0 zero to three dot zero

00:27:12,610 --> 00:27:18,190
dot one your with no other information

00:27:16,360 --> 00:27:19,870
just your developer seeing that through

00:27:18,190 --> 00:27:21,250
semver they know that this should be a

00:27:19,870 --> 00:27:23,110
non-breaking change and i should feel

00:27:21,250 --> 00:27:25,690
comfortable doing it they probably have

00:27:23,110 --> 00:27:27,760
a safe way to test that and then they

00:27:25,690 --> 00:27:29,320
know if you go from 3.0 to 3.1 that

00:27:27,760 --> 00:27:30,700
something might be changing I should

00:27:29,320 --> 00:27:33,460
have at the very least check out the

00:27:30,700 --> 00:27:36,000
read meet before I move forward with

00:27:33,460 --> 00:27:39,720
this thing so we think there's value in

00:27:36,000 --> 00:27:41,830
using semver even on your in-house tools

00:27:39,720 --> 00:27:43,840
treat them as if they're an open source

00:27:41,830 --> 00:27:46,390
project or release them as open source

00:27:43,840 --> 00:27:48,790
yep

00:27:46,390 --> 00:27:51,250
the second point here package managers

00:27:48,790 --> 00:27:53,350
so we have some really great tools out

00:27:51,250 --> 00:27:55,930
there available to us for distributing

00:27:53,350 --> 00:27:57,880
code this is something that comes up as

00:27:55,930 --> 00:28:00,640
you're talking about how to actually

00:27:57,880 --> 00:28:02,710
implement this let's imagine that on

00:28:00,640 --> 00:28:04,390
project number one you're a shell script

00:28:02,710 --> 00:28:06,220
that you're using for deployment and you

00:28:04,390 --> 00:28:09,280
want to share it with project number two

00:28:06,220 --> 00:28:11,730
so the easy simple way to do that would

00:28:09,280 --> 00:28:14,560
be copypasta that thing right in there

00:28:11,730 --> 00:28:16,360
the problem is that then when you go and

00:28:14,560 --> 00:28:18,130
update the script there's no central

00:28:16,360 --> 00:28:22,060
source of truth and there's no way to

00:28:18,130 --> 00:28:24,330
update the projects in the future so we

00:28:22,060 --> 00:28:28,330
encourage you to use things like

00:28:24,330 --> 00:28:30,370
composer or things like NPM to really

00:28:28,330 --> 00:28:32,620
distribute that stuff put it in a

00:28:30,370 --> 00:28:36,490
repository whether or not it goes public

00:28:32,620 --> 00:28:39,010
or not both composer and npm have

00:28:36,490 --> 00:28:41,440
mechanisms for private package sharing

00:28:39,010 --> 00:28:43,660
and it'll allow you to share that code

00:28:41,440 --> 00:28:45,310
out and if you're using semantic

00:28:43,660 --> 00:28:48,460
versioning for it it'll allow you to

00:28:45,310 --> 00:28:50,800
even control what gets pulled in if you

00:28:48,460 --> 00:28:56,860
want to pin it to a specific minor

00:28:50,800 --> 00:28:58,990
release that's fine documentation this

00:28:56,860 --> 00:28:59,890
one is absolutely critical across the

00:28:58,990 --> 00:29:02,050
board

00:28:59,890 --> 00:29:03,850
and it's something that even for

00:29:02,050 --> 00:29:07,600
something as simple as a shell script

00:29:03,850 --> 00:29:09,670
the likelihood that the writer of that

00:29:07,600 --> 00:29:11,710
shell script is going to be the one that

00:29:09,670 --> 00:29:14,770
finds the bug and fixes it later is

00:29:11,710 --> 00:29:15,880
pretty low and you really want to make

00:29:14,770 --> 00:29:19,390
sure that everyone in your organization

00:29:15,880 --> 00:29:21,570
is enabled as much as they can be to get

00:29:19,390 --> 00:29:24,490
involved with this process and to

00:29:21,570 --> 00:29:27,310
contribute back to the DevOps tools that

00:29:24,490 --> 00:29:29,260
you're sort of aggregating here so

00:29:27,310 --> 00:29:31,000
keeping our documentation up to date is

00:29:29,260 --> 00:29:32,590
really important and we have a whole

00:29:31,000 --> 00:29:37,840
slide about that later on

00:29:32,590 --> 00:29:39,910
and then finally yeah just defining and

00:29:37,840 --> 00:29:43,720
sharing their release workflow for all

00:29:39,910 --> 00:29:45,370
of these tools so like if you have six

00:29:43,720 --> 00:29:48,060
shell scripts that are all in their own

00:29:45,370 --> 00:29:50,890
packages it would be awesome if each one

00:29:48,060 --> 00:29:55,090
used the same process for getting rolled

00:29:50,890 --> 00:29:58,390
out so it would be like imagine a change

00:29:55,090 --> 00:30:00,250
is just a git commit get tagged and then

00:29:58,390 --> 00:30:03,730
update the change or update the change

00:30:00,250 --> 00:30:06,130
log and then get tagged it probably so

00:30:03,730 --> 00:30:12,910
just try to keep that consistent across

00:30:06,130 --> 00:30:14,740
your tool tool set picking an interfaces

00:30:12,910 --> 00:30:16,870
yes so this is a little bit more

00:30:14,740 --> 00:30:21,520
abstract and this is something that we

00:30:16,870 --> 00:30:24,730
touched on during our our demonstration

00:30:21,520 --> 00:30:27,310
of our individual tools but an interface

00:30:24,730 --> 00:30:30,160
is something where two systems kind of

00:30:27,310 --> 00:30:33,580
touch and in this case it's our DevOps

00:30:30,160 --> 00:30:37,060
tooling and our developers or our DevOps

00:30:33,580 --> 00:30:42,070
tooling and our PM's or stakeholders

00:30:37,060 --> 00:30:46,080
whatever so this would be we're

00:30:42,070 --> 00:30:48,940
encouraging you to think about how

00:30:46,080 --> 00:30:51,220
developers and stakeholders and PMS

00:30:48,940 --> 00:30:53,980
interact with your tools so is it a

00:30:51,220 --> 00:30:55,870
single command if it is a single command

00:30:53,980 --> 00:31:00,370
it's probably good not to break that

00:30:55,870 --> 00:31:02,800
command or change that command yeah so

00:31:00,370 --> 00:31:04,480
by thinking about the places that the

00:31:02,800 --> 00:31:06,700
stakeholders are touching these

00:31:04,480 --> 00:31:07,390
processes and how they interact with

00:31:06,700 --> 00:31:10,270
them

00:31:07,390 --> 00:31:12,040
establishing a contract with them so if

00:31:10,270 --> 00:31:13,720
we're gonna change something of that

00:31:12,040 --> 00:31:16,060
level then we're gonna have to go from

00:31:13,720 --> 00:31:18,100
zero to 3.1 we have to document it we're

00:31:16,060 --> 00:31:19,210
because we're pulling the we're pulling

00:31:18,100 --> 00:31:20,890
the contract out from under their feet

00:31:19,210 --> 00:31:23,800
so it has to be communicated and rolled

00:31:20,890 --> 00:31:25,150
out in a slow enough fashion so Robyn I

00:31:23,800 --> 00:31:26,500
think that you think this way that

00:31:25,150 --> 00:31:29,260
you're going to develop modular tools

00:31:26,500 --> 00:31:31,540
that can be pluggable and and come in

00:31:29,260 --> 00:31:32,890
and out of your processes with the least

00:31:31,540 --> 00:31:34,090
amount of harm possible and hopefully

00:31:32,890 --> 00:31:37,270
the reason you're doing that is for

00:31:34,090 --> 00:31:39,430
actual benefit not for harm so we're

00:31:37,270 --> 00:31:41,350
gonna try to minimize how much we change

00:31:39,430 --> 00:31:43,030
that interaction that doesn't mean we

00:31:41,350 --> 00:31:46,380
can't change the implementation details

00:31:43,030 --> 00:31:48,970
Rob mentioned in earlier that you know

00:31:46,380 --> 00:31:50,800
Composer build might run grunt it might

00:31:48,970 --> 00:31:53,920
run gulp that shouldn't matter too much

00:31:50,800 --> 00:31:55,780
to them to the user their interaction

00:31:53,920 --> 00:31:57,280
with it is the same and their result is

00:31:55,780 --> 00:32:02,830
the same they get a bill pass at

00:31:57,280 --> 00:32:04,840
pipeline so just to quickly define that

00:32:02,830 --> 00:32:08,080
I think our interface that last call

00:32:04,840 --> 00:32:11,680
media is the set of Composer commands

00:32:08,080 --> 00:32:15,490
that I showed you build run sorry build

00:32:11,680 --> 00:32:18,070
lint test site import and for you guys

00:32:15,490 --> 00:32:19,840
it's essentially lando start is is your

00:32:18,070 --> 00:32:21,160
interface with your developers yep

00:32:19,840 --> 00:32:23,110
Linda start and if you run the bare

00:32:21,160 --> 00:32:24,490
lando command all the tooling commands

00:32:23,110 --> 00:32:29,650
that are available or that's our

00:32:24,490 --> 00:32:32,290
interface yeah yeah right and our goal

00:32:29,650 --> 00:32:35,380
is to make new developers coming on to

00:32:32,290 --> 00:32:37,210
the project as seamless and easy as

00:32:35,380 --> 00:32:40,920
possible because we want to be able to

00:32:37,210 --> 00:32:40,920
have people hop from project to project

00:32:42,180 --> 00:32:47,470
all right

00:32:43,630 --> 00:32:49,360
don't be dogmatic yeah so I think in the

00:32:47,470 --> 00:32:51,910
tech world it's pretty easy to get

00:32:49,360 --> 00:32:54,520
locked into certain ideas and certain

00:32:51,910 --> 00:32:58,870
decisions and I think that that can be

00:32:54,520 --> 00:33:01,420
really dangerous you know things like

00:32:58,870 --> 00:33:04,600
like I think Drupal is long for a long

00:33:01,420 --> 00:33:07,420
time had a resistance to Composer to the

00:33:04,600 --> 00:33:09,970
point where that became a little bit

00:33:07,420 --> 00:33:14,140
burdensome and then we heard injuries

00:33:09,970 --> 00:33:18,190
talk today about how we're encouraging

00:33:14,140 --> 00:33:21,070
like more widespread composer use so

00:33:18,190 --> 00:33:23,980
really check your dog men at the door as

00:33:21,070 --> 00:33:26,740
coming into this DevOps thing try to

00:33:23,980 --> 00:33:29,049
look at every solution or every problem

00:33:26,740 --> 00:33:35,799
as its own problem and don't envision

00:33:29,049 --> 00:33:37,750
solutions first so finding the outliers

00:33:35,799 --> 00:33:40,149
so it's it's great to say that we're

00:33:37,750 --> 00:33:41,649
gonna we're gonna make this beautiful

00:33:40,149 --> 00:33:44,409
tool set and everything to be perfect

00:33:41,649 --> 00:33:46,120
all the time but that's not reality in

00:33:44,409 --> 00:33:48,360
reality you know that every project

00:33:46,120 --> 00:33:50,470
should have it you know some outliers so

00:33:48,360 --> 00:33:52,659
what we want to do is acknowledge that

00:33:50,470 --> 00:33:55,419
and make sure that our processes are

00:33:52,659 --> 00:33:58,480
flexible to accommodate those things so

00:33:55,419 --> 00:33:59,950
that goes back to the interface kind of

00:33:58,480 --> 00:34:02,409
paradigm how we're thinking about this

00:33:59,950 --> 00:34:06,009
in encouraging modularity so that we can

00:34:02,409 --> 00:34:07,690
accommodate these things so we know that

00:34:06,009 --> 00:34:09,010
these differences are gonna they're

00:34:07,690 --> 00:34:11,619
gonna cost money because it's gonna be a

00:34:09,010 --> 00:34:13,000
thing you have to figure out so be frank

00:34:11,619 --> 00:34:14,859
with your clients you know be like hey

00:34:13,000 --> 00:34:17,649
like we see this thing and it's it's

00:34:14,859 --> 00:34:19,569
different than then everywhere else and

00:34:17,649 --> 00:34:22,839
it's gonna take some time and some money

00:34:19,569 --> 00:34:25,750
and the then the clients answer might be

00:34:22,839 --> 00:34:27,730
that this is an absolute necessity this

00:34:25,750 --> 00:34:29,560
is a value add to us we need this as a

00:34:27,730 --> 00:34:30,730
project requirement and then you're on

00:34:29,560 --> 00:34:32,230
the same page you're gonna you're gonna

00:34:30,730 --> 00:34:34,540
spend the time and the money and deliver

00:34:32,230 --> 00:34:36,879
the value to the client but the answer

00:34:34,540 --> 00:34:38,829
might be oh no we didn't realize that

00:34:36,879 --> 00:34:41,050
that was so hard maybe we shouldn't

00:34:38,829 --> 00:34:43,589
spend you know 30% of the budget on that

00:34:41,050 --> 00:34:45,940
one thing so put that out there

00:34:43,589 --> 00:34:47,770
identified the outliers in your process

00:34:45,940 --> 00:34:51,190
and see if they're worth it or not

00:34:47,770 --> 00:34:53,399
make some decisions based on that but

00:34:51,190 --> 00:34:56,230
then if you do move forward an outlier

00:34:53,399 --> 00:34:57,849
you you might have an opportunity to

00:34:56,230 --> 00:35:00,849
abstract that back to your global

00:34:57,849 --> 00:35:03,130
namespace once you solve that problem it

00:35:00,849 --> 00:35:04,930
might be useful to you to be able to use

00:35:03,130 --> 00:35:06,730
that on either all client projects or

00:35:04,930 --> 00:35:08,800
enhance the set of clients that you can

00:35:06,730 --> 00:35:10,660
work on one example that Rob and I

00:35:08,800 --> 00:35:12,880
talked about a lot is like hosting like

00:35:10,660 --> 00:35:15,579
if you standardize hosting on like

00:35:12,880 --> 00:35:17,410
Pantheon exclusively that's fantastic

00:35:15,579 --> 00:35:19,660
and that makes your development life and

00:35:17,410 --> 00:35:21,599
your operations life pretty easy but if

00:35:19,660 --> 00:35:23,680
you get a client then it requires

00:35:21,599 --> 00:35:25,750
something outside they're contractually

00:35:23,680 --> 00:35:28,320
if they need platforms or Express comm

00:35:25,750 --> 00:35:29,730
wordpress.com

00:35:28,320 --> 00:35:31,260
and there you have to make a decision

00:35:29,730 --> 00:35:33,420
like is this worth it

00:35:31,260 --> 00:35:36,090
is this a value add to the client and to

00:35:33,420 --> 00:35:37,560
us and if it if it is maybe that's an

00:35:36,090 --> 00:35:38,730
opportunity to abstract that back out to

00:35:37,560 --> 00:35:42,690
your global namespace to be able to

00:35:38,730 --> 00:35:44,370
handle more clients of that type you had

00:35:42,690 --> 00:35:51,810
the example of the visual regression as

00:35:44,370 --> 00:35:53,280
well great yeah right and so I kind of

00:35:51,810 --> 00:35:55,830
talked about this earlier but we had

00:35:53,280 --> 00:35:59,640
like you know a client where they had

00:35:55,830 --> 00:36:01,620
some some very stringent I'm not gonna

00:35:59,640 --> 00:36:06,090
call them pixel pushers but they were

00:36:01,620 --> 00:36:07,890
very good at QA and so like their their

00:36:06,090 --> 00:36:10,980
requirements were a little bit different

00:36:07,890 --> 00:36:13,470
from the rest of our our client set and

00:36:10,980 --> 00:36:15,360
it we use it as an opportunity to get

00:36:13,470 --> 00:36:18,720
that visual or regression testing system

00:36:15,360 --> 00:36:21,480
in and that really benefited all of our

00:36:18,720 --> 00:36:26,970
clients in the end and us as an agency

00:36:21,480 --> 00:36:29,070
as well right

00:36:26,970 --> 00:36:32,010
documentation I told you we had a whole

00:36:29,070 --> 00:36:35,100
slide about this so we think that you

00:36:32,010 --> 00:36:36,690
need a lot of documentation but we think

00:36:35,100 --> 00:36:38,400
that you can do it in a smart way that's

00:36:36,690 --> 00:36:41,970
not going to be a huge pain to maintain

00:36:38,400 --> 00:36:44,700
so at the top level your company needs

00:36:41,970 --> 00:36:46,770
to read me this would outline you know

00:36:44,700 --> 00:36:49,590
the things that you have as part of your

00:36:46,770 --> 00:36:52,680
process it might have links off to

00:36:49,590 --> 00:36:54,600
external tools that you use it might

00:36:52,680 --> 00:36:57,870
have all of your best practices listed

00:36:54,600 --> 00:36:59,850
in there and it's a document that you

00:36:57,870 --> 00:37:06,450
could reference back to from some of

00:36:59,850 --> 00:37:08,340
this lower level documentation extending

00:37:06,450 --> 00:37:10,020
that idea all of your tools do you read

00:37:08,340 --> 00:37:11,580
me so in the case of the examples that

00:37:10,020 --> 00:37:13,440
we're talking about here Drupal scaffold

00:37:11,580 --> 00:37:16,200
has a readme and that's kept up to date

00:37:13,440 --> 00:37:20,640
and lando has documentation pages where

00:37:16,200 --> 00:37:22,020
you can go and read those and so figure

00:37:20,640 --> 00:37:23,430
out how you're supposed to interact with

00:37:22,020 --> 00:37:25,460
the tool what is the way the tool is

00:37:23,430 --> 00:37:27,540
supposed to work and then by extension

00:37:25,460 --> 00:37:30,210
every project is going to have a readme

00:37:27,540 --> 00:37:31,590
and of course your project every knee

00:37:30,210 --> 00:37:33,210
should tell developers how to spin up

00:37:31,590 --> 00:37:35,340
the project how to use the project and

00:37:33,210 --> 00:37:36,660
how to get productive on the project but

00:37:35,340 --> 00:37:39,180
we think the value in structuring it

00:37:36,660 --> 00:37:42,080
this way is that now you can have that

00:37:39,180 --> 00:37:42,080
project readme

00:37:42,350 --> 00:37:46,050
focused on the differences between

00:37:44,310 --> 00:37:47,880
projects because everything that's the

00:37:46,050 --> 00:37:50,520
same about them is upstream and your

00:37:47,880 --> 00:37:52,560
company readme and your tools read me

00:37:50,520 --> 00:37:53,700
and now you can focus on what what

00:37:52,560 --> 00:37:55,830
things are different about this project

00:37:53,700 --> 00:37:57,870
that you have to know so we think this

00:37:55,830 --> 00:38:00,060
makes sense to be able to extend your

00:37:57,870 --> 00:38:01,800
documentation and just keeping it up to

00:38:00,060 --> 00:38:03,360
date is so important it's such an easy

00:38:01,800 --> 00:38:06,570
step to skip if you're given the

00:38:03,360 --> 00:38:07,680
opportunity but just don't because you

00:38:06,570 --> 00:38:09,210
could be poisoning a developer

00:38:07,680 --> 00:38:10,380
downstream that doesn't know about this

00:38:09,210 --> 00:38:12,000
difference because it's not gonna read

00:38:10,380 --> 00:38:13,350
me when something was changed and then

00:38:12,000 --> 00:38:20,040
they can't be productive in there

00:38:13,350 --> 00:38:24,030
they're stuck poisoning uh alright yeah

00:38:20,040 --> 00:38:27,120
so I want to take a moment to remember

00:38:24,030 --> 00:38:29,340
back to that slide that we had with all

00:38:27,120 --> 00:38:31,800
the boxes where we're stacking things up

00:38:29,340 --> 00:38:33,480
and I think that we made a very

00:38:31,800 --> 00:38:35,700
conscious choice when we started

00:38:33,480 --> 00:38:37,560
thinking about this presentation not to

00:38:35,700 --> 00:38:40,410
talk about some of the really hard

00:38:37,560 --> 00:38:42,840
problems in DevOps like hosting and

00:38:40,410 --> 00:38:47,310
logging and you know there's a whole

00:38:42,840 --> 00:38:50,460
host of things out there we think that

00:38:47,310 --> 00:38:52,290
agencies and large sort of corporate

00:38:50,460 --> 00:38:54,510
entities that are building out many

00:38:52,290 --> 00:38:56,490
sites at once should not be doing these

00:38:54,510 --> 00:38:58,650
things we think that you should be

00:38:56,490 --> 00:39:01,590
delegating these things to good partners

00:38:58,650 --> 00:39:03,720
so people like Pantheon platform in

00:39:01,590 --> 00:39:07,080
aqueous whom are sponsors at this

00:39:03,720 --> 00:39:08,700
conference our great fits for this you

00:39:07,080 --> 00:39:13,500
shouldn't be worrying about how your

00:39:08,700 --> 00:39:15,420
code gets from the git repository to the

00:39:13,500 --> 00:39:17,880
dev site like that's that's a solved

00:39:15,420 --> 00:39:19,620
problem and it's not really worth us

00:39:17,880 --> 00:39:21,690
spending a lot of time on what you

00:39:19,620 --> 00:39:23,220
should be worrying about is making sure

00:39:21,690 --> 00:39:26,120
that what you're pushing up is of good

00:39:23,220 --> 00:39:29,150
quality and that it won't break the site

00:39:26,120 --> 00:39:31,950
so we think that you should pick people

00:39:29,150 --> 00:39:35,400
partners that are aligned with whatever

00:39:31,950 --> 00:39:37,950
your goals are as an organization and

00:39:35,400 --> 00:39:41,010
also ones that are easy for you to work

00:39:37,950 --> 00:39:44,570
with so if you really like let's imagine

00:39:41,010 --> 00:39:47,040
Pantheon they're multi dev service is

00:39:44,570 --> 00:39:50,100
just the way that your organization

00:39:47,040 --> 00:39:51,930
works then great go with them the thing

00:39:50,100 --> 00:39:54,390
is you're not always going to be able to

00:39:51,930 --> 00:39:56,490
get that so this goes back to that

00:39:54,390 --> 00:39:58,740
question of outliers and how you handle

00:39:56,490 --> 00:40:00,930
them when a new client comes on

00:39:58,740 --> 00:40:03,390
sometimes they come on with specific

00:40:00,930 --> 00:40:05,790
hosting recommendations and unless that

00:40:03,390 --> 00:40:08,940
recommendation is like wordpress comm

00:40:05,790 --> 00:40:12,240
then you should probably not force your

00:40:08,940 --> 00:40:14,430
your partners on them on the other hand

00:40:12,240 --> 00:40:16,500
we do have often the ability to make

00:40:14,430 --> 00:40:20,580
recommendations so if they come in and

00:40:16,500 --> 00:40:23,550
they say we would like to host on I

00:40:20,580 --> 00:40:25,350
don't know Bluehost you could say you

00:40:23,550 --> 00:40:26,790
know what that's that's awesome I'm

00:40:25,350 --> 00:40:29,550
really glad to hear that you've thought

00:40:26,790 --> 00:40:32,880
this through just so you know we work

00:40:29,550 --> 00:40:34,980
really well with Pantheon and Acquia

00:40:32,880 --> 00:40:38,880
both of whom are wonderful hosts and

00:40:34,980 --> 00:40:40,530
have competitive pricing and we think

00:40:38,880 --> 00:40:42,930
that development would actually move

00:40:40,530 --> 00:40:46,320
forward a lot smoother if we're able to

00:40:42,930 --> 00:40:48,660
work with one of those two and so I

00:40:46,320 --> 00:40:51,480
think that that's our role in this this

00:40:48,660 --> 00:40:54,510
conversation about hosting is to inform

00:40:51,480 --> 00:40:57,090
the clients about who the the kind of

00:40:54,510 --> 00:40:59,670
best partners are the ones that you work

00:40:57,090 --> 00:41:05,910
well with and just be honest about like

00:40:59,670 --> 00:41:08,760
what the limitations are continuously

00:41:05,910 --> 00:41:11,130
reevaluate this is also key this speaks

00:41:08,760 --> 00:41:13,680
to not being dogmatic and and many other

00:41:11,130 --> 00:41:17,040
points that we've made throughout you

00:41:13,680 --> 00:41:19,080
just you absolutely have to look at

00:41:17,040 --> 00:41:20,400
what's going on and seeing if you should

00:41:19,080 --> 00:41:27,540
continue in that direction or if change

00:41:20,400 --> 00:41:29,670
is needed yeah so I like this quote from

00:41:27,540 --> 00:41:31,260
Stephen King it's about killing your

00:41:29,670 --> 00:41:34,140
darlings which sounds a little violent

00:41:31,260 --> 00:41:38,580
but really what it's about is he's a

00:41:34,140 --> 00:41:40,500
writer and he's saying that when you're

00:41:38,580 --> 00:41:42,120
writing sometimes you need to kill the

00:41:40,500 --> 00:41:44,910
things that you love at a particularly

00:41:42,120 --> 00:41:48,210
dramatic moment in the story to further

00:41:44,910 --> 00:41:50,670
the story and as developers I think we

00:41:48,210 --> 00:41:54,300
kind of have or developers and ops

00:41:50,670 --> 00:41:56,790
people we need to really take this to

00:41:54,300 --> 00:41:59,130
heart and consider it because sometimes

00:41:56,790 --> 00:42:01,530
the tools that we build are not the best

00:41:59,130 --> 00:42:05,880
solutions for us and we're kind of blind

00:42:01,530 --> 00:42:07,890
to the fact that that that's the case so

00:42:05,880 --> 00:42:09,809
we should always be

00:42:07,890 --> 00:42:12,029
a little bit sad but a little bit

00:42:09,809 --> 00:42:14,690
enthusiastic to kill off any of our own

00:42:12,029 --> 00:42:18,359
stuff because it means less for us to do

00:42:14,690 --> 00:42:21,029
so as you're evaluating your process

00:42:18,359 --> 00:42:22,980
just keep this in mind and see if there

00:42:21,029 --> 00:42:25,140
are ways that you can reduce your

00:42:22,980 --> 00:42:27,000
overall technical load even if it means

00:42:25,140 --> 00:42:29,460
killing off your favorite

00:42:27,000 --> 00:42:38,069
I don't know project that that you

00:42:29,460 --> 00:42:39,809
built-in right and so DevOps is all

00:42:38,069 --> 00:42:41,369
about iteration you know we're trying to

00:42:39,809 --> 00:42:44,670
move quickly we're trying to be agile

00:42:41,369 --> 00:42:46,829
and your needs are gonna change you need

00:42:44,670 --> 00:42:48,269
to be responsive to feedback and you

00:42:46,829 --> 00:42:51,660
need to be able to collect that feedback

00:42:48,269 --> 00:42:54,569
as well monitoring is a huge piece of

00:42:51,660 --> 00:42:55,769
making sure that your overall process is

00:42:54,569 --> 00:42:57,990
working and that can be really tricky

00:42:55,769 --> 00:43:00,720
when you're talking about I don't know

00:42:57,990 --> 00:43:03,869
20 projects or whatever but just start

00:43:00,720 --> 00:43:06,420
with what you have as far as gathering

00:43:03,869 --> 00:43:09,180
metrics maybe like just take a look at

00:43:06,420 --> 00:43:11,490
how deployments are going across all of

00:43:09,180 --> 00:43:14,789
your projects are things going smoothly

00:43:11,490 --> 00:43:18,059
are there hiccups that you're hitting

00:43:14,789 --> 00:43:20,099
all the time that kind of thing and just

00:43:18,059 --> 00:43:22,710
start to quantify that and see if you

00:43:20,099 --> 00:43:24,809
can reduce it over time this is really

00:43:22,710 --> 00:43:27,329
like the reason that we're here is to

00:43:24,809 --> 00:43:31,529
collect these sorts of metrics and to

00:43:27,329 --> 00:43:33,839
improve to improve them yeah so pick one

00:43:31,529 --> 00:43:36,119
thing and prove that then pick another

00:43:33,839 --> 00:43:44,220
thing don't try to improve everything

00:43:36,119 --> 00:43:47,400
all at once it's too daunting right so

00:43:44,220 --> 00:43:48,900
just kind of loop back here this is the

00:43:47,400 --> 00:43:51,690
model that we're working toward and

00:43:48,900 --> 00:43:54,259
obviously these box the the choices of

00:43:51,690 --> 00:43:58,259
what's in the box is totally irrelevant

00:43:54,259 --> 00:44:00,269
the idea here is that as an organization

00:43:58,259 --> 00:44:02,190
we really want to encourage you to be

00:44:00,269 --> 00:44:05,579
thinking about how you can move in that

00:44:02,190 --> 00:44:08,069
upward trajectory and build up that that

00:44:05,579 --> 00:44:09,809
stack of things that you drop on the

00:44:08,069 --> 00:44:12,029
table when you walk into your next pitch

00:44:09,809 --> 00:44:14,880
meeting for another project you have

00:44:12,029 --> 00:44:18,720
circle CI you have visual regression

00:44:14,880 --> 00:44:20,950
testing you have whatever else so and

00:44:18,720 --> 00:44:22,810
then you can carry that forward to

00:44:20,950 --> 00:44:26,849
every single project that your your

00:44:22,810 --> 00:44:26,849
agency works on for your company

00:44:28,890 --> 00:44:32,680
that's it

00:44:30,310 --> 00:44:42,820
I think we'll take some questions if

00:44:32,680 --> 00:44:45,160
anyone has has them yeah actually if

00:44:42,820 --> 00:44:47,470
people could step up to the mic is they

00:44:45,160 --> 00:45:11,500
have questions I think the session is

00:44:47,470 --> 00:45:13,510
being recorded so that would be great or

00:45:11,500 --> 00:45:17,820
is it possible to switch land over so

00:45:13,510 --> 00:45:21,070
that it can it can work on aqua or

00:45:17,820 --> 00:45:23,200
Amazon absolutely it's it's hosting

00:45:21,070 --> 00:45:25,900
agnostic you can deploy anywhere you

00:45:23,200 --> 00:45:28,530
like there are integrations built-in

00:45:25,900 --> 00:45:31,210
with Pantheon that you can leverage for

00:45:28,530 --> 00:45:33,160
easy getting code from here to there but

00:45:31,210 --> 00:45:36,720
you can also pull in platform tools and

00:45:33,160 --> 00:45:43,180
deploy platform SH or anywhere really

00:45:36,720 --> 00:45:47,200
okay yes regarding including everyone in

00:45:43,180 --> 00:45:48,220
DevOps as you move that out to all of

00:45:47,200 --> 00:45:50,230
your projects

00:45:48,220 --> 00:45:53,160
now do you any strategies for dealing

00:45:50,230 --> 00:45:56,770
with people in your team who are not

00:45:53,160 --> 00:46:00,940
100% developers maybe they work 10% of

00:45:56,770 --> 00:46:02,920
the time on Drupal content strategy okay

00:46:00,940 --> 00:46:04,690
and end up spending all 10% of their

00:46:02,920 --> 00:46:06,160
time yep fixing their local development

00:46:04,690 --> 00:46:10,510
environment to deal with all these tools

00:46:06,160 --> 00:46:13,630
yeah so I'll just ask the question again

00:46:10,510 --> 00:46:16,329
make sure I get it so it is how to

00:46:13,630 --> 00:46:21,550
include people that are non developers

00:46:16,329 --> 00:46:24,910
in the DevOps process or very part time

00:46:21,550 --> 00:46:27,160
developers okay yeah I think that's a

00:46:24,910 --> 00:46:29,619
tough one I think that your goal there

00:46:27,160 --> 00:46:32,050
should probably not be including them

00:46:29,619 --> 00:46:34,170
too in the sense that like they're not

00:46:32,050 --> 00:46:36,600
going to be developing new solutions

00:46:34,170 --> 00:46:38,250
but their feedback is very valid and it

00:46:36,600 --> 00:46:40,140
sounds like their feedback in this case

00:46:38,250 --> 00:46:41,640
was that they were having trouble with

00:46:40,140 --> 00:46:46,010
their local development environments

00:46:41,640 --> 00:46:48,810
frequently so I think that that is

00:46:46,010 --> 00:46:52,050
valuable and that is like the feedback

00:46:48,810 --> 00:46:53,340
that we want to collect from them so I

00:46:52,050 --> 00:46:55,860
wouldn't say that you have to put the

00:46:53,340 --> 00:46:57,930
DevOps hat on them but I would say that

00:46:55,860 --> 00:46:59,160
they are contributing to it in the sense

00:46:57,930 --> 00:47:01,980
that they're giving you that feedback

00:46:59,160 --> 00:47:04,080
and that's something that you can assess

00:47:01,980 --> 00:47:07,400
and say alright is this causing a big

00:47:04,080 --> 00:47:09,720
enough problem to be worth fixing for us

00:47:07,400 --> 00:47:11,430
so yeah I mean I think there are

00:47:09,720 --> 00:47:12,840
different levels of involvement here and

00:47:11,430 --> 00:47:14,490
not everyone is going to be actually

00:47:12,840 --> 00:47:16,560
getting involved on the fixing things

00:47:14,490 --> 00:47:18,300
side some people are just going to be

00:47:16,560 --> 00:47:24,900
identifying problems and that's totally

00:47:18,300 --> 00:47:27,240
fine for setting up the local dev

00:47:24,900 --> 00:47:31,610
environments for the developers as well

00:47:27,240 --> 00:47:34,550
as the continuous integration and

00:47:31,610 --> 00:47:37,470
interaction with the hosting services

00:47:34,550 --> 00:47:41,280
are you asking about one of this tools

00:47:37,470 --> 00:47:42,690
specifically Orlando tools yeah it

00:47:41,280 --> 00:47:44,850
certainly can package up all of your

00:47:42,690 --> 00:47:47,160
configurations so once you configure the

00:47:44,850 --> 00:47:50,100
circle CI integration and make that part

00:47:47,160 --> 00:47:51,450
of your Lando yamo then when the second

00:47:50,100 --> 00:47:53,130
developer prosed on the project they do

00:47:51,450 --> 00:47:54,630
the Andal start it's going to spin up

00:47:53,130 --> 00:47:56,610
all the same integrations that you had

00:47:54,630 --> 00:48:00,210
for the first developer so they can do

00:47:56,610 --> 00:48:03,000
they say dribble VM and any of those and

00:48:00,210 --> 00:48:05,160
put in some configuration for that yeah

00:48:03,000 --> 00:48:07,080
joopa Drupal VM is an independent

00:48:05,160 --> 00:48:09,240
solution but it's also configurable so

00:48:07,080 --> 00:48:10,560
you say you pick one of these tools to

00:48:09,240 --> 00:48:12,750
manage your configuration for the

00:48:10,560 --> 00:48:16,040
project similarly triple scaffold can

00:48:12,750 --> 00:48:21,360
manage the housing of all of these

00:48:16,040 --> 00:48:23,850
configurations great thank you yep the

00:48:21,360 --> 00:48:25,440
using Drupal project as the scaffold

00:48:23,850 --> 00:48:27,060
makes a lot of sense especially for all

00:48:25,440 --> 00:48:28,830
the Drupal 8 projects you're doing

00:48:27,060 --> 00:48:30,540
I imagine you still have Drupal 7 sites

00:48:28,830 --> 00:48:32,520
out there that you have to maintain that

00:48:30,540 --> 00:48:34,500
are probably way before composer and all

00:48:32,520 --> 00:48:37,110
that you have any experience is trying

00:48:34,500 --> 00:48:40,290
to share your your DevOps infrastructure

00:48:37,110 --> 00:48:44,640
between Drupal 7 and Drupal 8 sites yeah

00:48:40,290 --> 00:48:47,579
it's definitely tough I think that you

00:48:44,640 --> 00:48:49,529
can still run composer on Drupal

00:48:47,579 --> 00:48:51,089
and it doesn't even necessarily have to

00:48:49,529 --> 00:48:53,579
be hooked in with the project to be able

00:48:51,089 --> 00:48:56,690
to pull in like shell scripts or

00:48:53,579 --> 00:49:01,739
whatever configurations you need via

00:48:56,690 --> 00:49:03,569
like composer so yeah I guess that's the

00:49:01,739 --> 00:49:05,640
way I would approach it probably like

00:49:03,569 --> 00:49:08,219
just set up a dummy composer file in the

00:49:05,640 --> 00:49:11,640
root and pull that in pull it in that

00:49:08,219 --> 00:49:13,890
way of course all of our all of our

00:49:11,640 --> 00:49:16,799
scaffolds stuff doesn't work so well on

00:49:13,890 --> 00:49:18,989
Drupal 8 or Drupal 7 but we're able to

00:49:16,799 --> 00:49:22,289
share stuff like you know the PHP CS

00:49:18,989 --> 00:49:23,819
configurations and that kind of thing we

00:49:22,289 --> 00:49:25,619
actually ended up implementing a

00:49:23,819 --> 00:49:30,420
slightly different solution for the

00:49:25,619 --> 00:49:34,799
scaffold for sharing those like root

00:49:30,420 --> 00:49:37,079
files like PHP CSS XML which just is

00:49:34,799 --> 00:49:40,259
capable of going and fetching them from

00:49:37,079 --> 00:49:41,880
github based on cember so similar to

00:49:40,259 --> 00:49:45,420
composer but doesn't actually require

00:49:41,880 --> 00:49:48,930
like the registration of the package so

00:49:45,420 --> 00:49:51,690
we can use that yeah lando has Drupal 7

00:49:48,930 --> 00:49:53,459
Drupal 6 recipes so it's easy to switch

00:49:51,690 --> 00:50:05,430
between the different platforms it has

00:49:53,459 --> 00:50:07,709
other recipes - yeah but how do you make

00:50:05,430 --> 00:50:12,660
sure that it's running on production or

00:50:07,709 --> 00:50:14,069
test yeah right in the case of lando we

00:50:12,660 --> 00:50:15,930
use the doc I know that yeah Mille

00:50:14,069 --> 00:50:18,539
configuration file it's specified PHP

00:50:15,930 --> 00:50:21,569
versions and database backends that are

00:50:18,539 --> 00:50:23,880
similar to the hosting service so if

00:50:21,569 --> 00:50:25,979
they are using solar for six we specify

00:50:23,880 --> 00:50:28,949
solar for six in that file so we can

00:50:25,979 --> 00:50:31,499
granularly specify very close production

00:50:28,949 --> 00:50:32,910
parity that way yeah I think it's also

00:50:31,499 --> 00:50:35,630
worth pointing out that both of these

00:50:32,910 --> 00:50:38,069
tools are based on docker and Dockers

00:50:35,630 --> 00:50:40,469
able to match production very well

00:50:38,069 --> 00:50:42,299
whether you take advantage of that by

00:50:40,469 --> 00:50:45,509
actually building your own docker file

00:50:42,299 --> 00:50:48,229
is a whole other thing just quick plug

00:50:45,509 --> 00:50:51,180
for Lando that they have very good

00:50:48,229 --> 00:50:53,869
production parity with you know Pantheon

00:50:51,180 --> 00:50:56,249
I don't know I don't know about aqueous

00:50:53,869 --> 00:50:59,340
platform like you guys are pretty on it

00:50:56,249 --> 00:51:05,610
as far as keeping up with those recipes

00:50:59,340 --> 00:51:08,250
examples are think can get good question

00:51:05,610 --> 00:51:11,070
like so I've been using homebrew for

00:51:08,250 --> 00:51:12,780
like I don't know for forever and I've

00:51:11,070 --> 00:51:14,700
got you know I've got it all set up and

00:51:12,780 --> 00:51:18,150
like it's really fast and I've got solar

00:51:14,700 --> 00:51:20,220
and I've got like Redis and memcache and

00:51:18,150 --> 00:51:22,050
blah blah blah and I switched to Lando

00:51:20,220 --> 00:51:24,740
and it was like half again it's felt

00:51:22,050 --> 00:51:27,090
like it was just a lot slower and then

00:51:24,740 --> 00:51:28,980
you know so I'm kind of like you know

00:51:27,090 --> 00:51:31,260
and so how do you I guess

00:51:28,980 --> 00:51:33,600
when you've got a developer that's like

00:51:31,260 --> 00:51:35,280
you know like I version all of that you

00:51:33,600 --> 00:51:37,200
know that you know like I do I do a lot

00:51:35,280 --> 00:51:38,970
of stuff to kind of keep it like up but

00:51:37,200 --> 00:51:40,290
how do you deal with that kind of

00:51:38,970 --> 00:51:42,210
situation you that's like everyone

00:51:40,290 --> 00:51:45,270
should use Lando or is it kind of

00:51:42,210 --> 00:51:48,690
optional or yeah I think the value is is

00:51:45,270 --> 00:51:51,030
if your team is you know more than three

00:51:48,690 --> 00:51:52,710
but you know five or ten then then you

00:51:51,030 --> 00:51:54,060
have that shared configuration that can

00:51:52,710 --> 00:51:56,430
scale out across a team but if your

00:51:54,060 --> 00:51:58,860
development team of one or two and you

00:51:56,430 --> 00:52:00,440
have the ideal stack then I think you

00:51:58,860 --> 00:52:02,280
should keep your ideal stack you know

00:52:00,440 --> 00:52:03,840
because you don't have to manage that

00:52:02,280 --> 00:52:05,730
complexity across developers you're

00:52:03,840 --> 00:52:07,140
managing it for yourself but once you

00:52:05,730 --> 00:52:13,010
have to pass it left or right to other

00:52:07,140 --> 00:52:13,010
developers no no way

00:52:13,040 --> 00:52:18,530
yeah my setup is ridiculous and like I

00:52:16,140 --> 00:52:21,180
have to like recompile PHP when I

00:52:18,530 --> 00:52:23,400
upgrade things so just you know I mean

00:52:21,180 --> 00:52:25,380
like you know because it's there's but I

00:52:23,400 --> 00:52:27,150
know it like really well so I know like

00:52:25,380 --> 00:52:28,860
if I'm gonna have to upgrade things so

00:52:27,150 --> 00:52:30,930
it's like you know because I'm yeah yeah

00:52:28,860 --> 00:52:32,280
just really fast yeah so they're really

00:52:30,930 --> 00:52:34,140
hard to pass off to other developers

00:52:32,280 --> 00:52:36,030
it's really great for you to do yeah

00:52:34,140 --> 00:52:37,890
there's there it's not something that I

00:52:36,030 --> 00:52:39,180
could write yeah and if that is a

00:52:37,890 --> 00:52:41,070
concern

00:52:39,180 --> 00:52:44,730
probably the jumping pool yeah pass that

00:52:41,070 --> 00:52:47,700
off or not I would say that yeah docker

00:52:44,730 --> 00:52:51,030
does have some specifically like file

00:52:47,700 --> 00:52:53,820
access slowness to it which you know you

00:52:51,030 --> 00:52:55,350
have to weigh honestly if you have

00:52:53,820 --> 00:52:58,290
multiple developers on a team I think

00:52:55,350 --> 00:53:00,690
it's it's already even if you've - it's

00:52:58,290 --> 00:53:02,610
already easier to write it and docker

00:53:00,690 --> 00:53:05,010
and then like deal with the slowness but

00:53:02,610 --> 00:53:07,230
that's that balance is gonna be

00:53:05,010 --> 00:53:10,530
different for everyone yes you lose a

00:53:07,230 --> 00:53:12,630
couple seconds I'm Deb cycles but you

00:53:10,530 --> 00:53:15,000
gain a lot by

00:53:12,630 --> 00:53:20,040
ooh I have the answer switch to Linux

00:53:15,000 --> 00:53:25,160
that's true that's true I kid I'm not

00:53:20,040 --> 00:53:25,160
out minutes any other questions

00:53:25,370 --> 00:53:30,870
cool I'll wrap it up here feel free to

00:53:29,220 --> 00:53:33,450
contact us on Twitter if you're

00:53:30,870 --> 00:53:34,850
interested in chatting and thanks for

00:53:33,450 --> 00:53:39,389
coming up

00:53:34,850 --> 00:53:39,389

YouTube URL: https://www.youtube.com/watch?v=zpb84OuOzzY


