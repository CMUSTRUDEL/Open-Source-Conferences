Title: DrupalCon Nashville 2018: Building Confidence in APIs with Postman
Publication date: 2018-04-11
Playlist: DrupalCon Nashville - April 2018
Description: 
	Reliable API calls are critical to any decoupled application. A simple configuration change to an entity or updating Drupal core can alter an API response and lead to application-breaking changes on the front-end. An API test suite can watch out for these API breaking changes by running a slew of tests against your endpoint.   

When you need to create an API test suite, Postman delivers. (Sorry. I had to.)

On its surface, Postman is a simple GUI for sending HTTP requests and viewing responses. But underneath, Postman is built upon an extensive set of power tools that are incredibly easy to use. You can organize your requests into collections and folders, share common values across requests with environment variables, script tests with the built-in node.js based runtime, and automate it all with Postman’s very own CLI – Newman.

In this session we’ll build up a test suite for Contenta, the API-first distribution of Drupal.

We’ll cover:

Making simple API requests

Making authenticated requests with varying authentication strategies

Using environment variables

Importing request collections directly from your Drupal site

Writing tests using JavaScript

Automating it all with Newman

Attendees will come away with a clearer understanding of how to make requests against Drupal’s JSON API module and working knowledge of how to leverage Postman when developing decoupled applications.
Captions: 
	00:00:00,000 --> 00:00:06,379
soon everyone can hear me all right cool

00:00:03,540 --> 00:00:09,389
seems really loud to me up here

00:00:06,379 --> 00:00:13,139
so this is a building confidence and

00:00:09,389 --> 00:00:15,179
api's with postman my name is Jon

00:00:13,139 --> 00:00:19,380
Farriss I'm the director of front-end

00:00:15,179 --> 00:00:22,859
engineering at Aten Design Group Adhan

00:00:19,380 --> 00:00:25,050
is a full-service design strategy and

00:00:22,859 --> 00:00:28,289
development agency based out of Denver

00:00:25,050 --> 00:00:32,520
Colorado we work with a lot of

00:00:28,289 --> 00:00:35,719
organizations that are doing really good

00:00:32,520 --> 00:00:37,590
work we like to think that we work with

00:00:35,719 --> 00:00:40,379
organizations that are really trying to

00:00:37,590 --> 00:00:45,360
make the world a better place

00:00:40,379 --> 00:00:50,780
and increasingly our clients are coming

00:00:45,360 --> 00:00:53,280
to us with ask for more like application

00:00:50,780 --> 00:00:56,789
like websites not just content

00:00:53,280 --> 00:01:00,690
publishing but you know data

00:00:56,789 --> 00:01:06,390
visualization more interactive intuitive

00:01:00,690 --> 00:01:10,049
forms things that don't work very well

00:01:06,390 --> 00:01:13,920
necessarily or very efficiently with the

00:01:10,049 --> 00:01:15,869
standard like full page refresh kind of

00:01:13,920 --> 00:01:19,619
site architecture so we're doing a

00:01:15,869 --> 00:01:24,299
little bit more decoupled work and that

00:01:19,619 --> 00:01:27,530
requires using a lot of aps and me

00:01:24,299 --> 00:01:32,040
personally I got into web development

00:01:27,530 --> 00:01:35,310
through design I started graphic design

00:01:32,040 --> 00:01:38,220
and I did do a little bit of school in

00:01:35,310 --> 00:01:42,750
was actual computer science degree but

00:01:38,220 --> 00:01:45,060
it wasn't visual enough for me and so I

00:01:42,750 --> 00:01:48,210
gravitated to the front-end naturally

00:01:45,060 --> 00:01:51,740
because it's at that mix of visual kind

00:01:48,210 --> 00:01:55,560
of the art side and actual programming

00:01:51,740 --> 00:01:59,969
so my experience was with JavaScript was

00:01:55,560 --> 00:02:03,149
more like making dropdowns and animating

00:01:59,969 --> 00:02:07,860
things and a whole lot of ActionScript

00:02:03,149 --> 00:02:11,039
and flash interaction back in the day so

00:02:07,860 --> 00:02:12,990
the idea of actually you know getting

00:02:11,039 --> 00:02:15,510
data through an API

00:02:12,990 --> 00:02:17,370
and do an authentication those kind of

00:02:15,510 --> 00:02:20,520
things that was really really

00:02:17,370 --> 00:02:22,560
intimidating for me when I was getting

00:02:20,520 --> 00:02:25,220
into it it just seemed like a lot of

00:02:22,560 --> 00:02:29,330
pressure get to get this right

00:02:25,220 --> 00:02:33,360
and so a few years ago I found a tool

00:02:29,330 --> 00:02:37,440
called postman at the time it was a

00:02:33,360 --> 00:02:39,690
chrome app or a Chrome extension that

00:02:37,440 --> 00:02:41,640
you can use to actually test api's can I

00:02:39,690 --> 00:02:44,820
get a show of hands of people that have

00:02:41,640 --> 00:02:50,430
actually used postman cool a lot of

00:02:44,820 --> 00:02:55,890
people awesome of those people who's

00:02:50,430 --> 00:02:59,850
actually used the native app cool so

00:02:55,890 --> 00:03:01,290
yeah the traditionally postman was a it

00:02:59,850 --> 00:03:05,700
was a browser extension for Chrome and

00:03:01,290 --> 00:03:08,670
they've released a native app that is

00:03:05,700 --> 00:03:12,720
just incredibly intuitive really useful

00:03:08,670 --> 00:03:14,280
and the reason I wanted to to share it

00:03:12,720 --> 00:03:16,340
with you today is like there was a lot

00:03:14,280 --> 00:03:20,010
of things I just used postman to like

00:03:16,340 --> 00:03:22,290
grab an API like Center request get the

00:03:20,010 --> 00:03:24,480
response back and view it and I recently

00:03:22,290 --> 00:03:27,570
learned like there's so much more to it

00:03:24,480 --> 00:03:29,520
and there's so much more like so many

00:03:27,570 --> 00:03:32,520
more features that I just didn't know

00:03:29,520 --> 00:03:35,100
about I got really excited it felt very

00:03:32,520 --> 00:03:37,190
empowering so I wanted to to share that

00:03:35,100 --> 00:03:41,090
with you today

00:03:37,190 --> 00:03:44,850
and I want to do that in the context of

00:03:41,090 --> 00:03:47,540
Contenta is everybody familiar with the

00:03:44,850 --> 00:03:51,510
content of distribution for Drupal

00:03:47,540 --> 00:03:54,510
anyone not cool

00:03:51,510 --> 00:03:57,990
so it's Contenta is basically it's a

00:03:54,510 --> 00:04:00,650
distribution made for API first Google

00:03:57,990 --> 00:04:05,640
development so it has a lot of things

00:04:00,650 --> 00:04:09,180
turned off like you know there's there's

00:04:05,640 --> 00:04:12,860
not really a front-end or like blocks

00:04:09,180 --> 00:04:15,859
per se it's really designed just to

00:04:12,860 --> 00:04:20,609
allow you to model your content and

00:04:15,859 --> 00:04:23,550
expose that as api's so it has a lot of

00:04:20,609 --> 00:04:24,810
functionality like simpler life built

00:04:23,550 --> 00:04:26,370
into it

00:04:24,810 --> 00:04:30,690
Jason API which

00:04:26,370 --> 00:04:32,850
are going to talk about and graph qo

00:04:30,690 --> 00:04:35,160
which I have never used so you can ask

00:04:32,850 --> 00:04:38,840
me a question and I won't answer it all

00:04:35,160 --> 00:04:40,650
right so you where to Google it I guess

00:04:38,840 --> 00:04:42,690
so we're gonna talk a little bit about

00:04:40,650 --> 00:04:46,380
JSON API if you're not familiar with

00:04:42,690 --> 00:04:49,350
JSON API yes it is a module for Drupal

00:04:46,380 --> 00:04:55,800
but JSON API is actually a specification

00:04:49,350 --> 00:04:58,290
for sending requests to a server and

00:04:55,800 --> 00:05:03,240
getting responses back so the

00:04:58,290 --> 00:05:06,630
specification outlines like basically if

00:05:03,240 --> 00:05:09,870
you were sending a JSON request or JSON

00:05:06,630 --> 00:05:13,199
body in a request to a server its

00:05:09,870 --> 00:05:17,120
formatted in a very specific way you

00:05:13,199 --> 00:05:19,970
know how you filter is fairly prescribed

00:05:17,120 --> 00:05:22,620
how you sort and those kind of things

00:05:19,970 --> 00:05:26,010
and then the response the shape of that

00:05:22,620 --> 00:05:30,360
data as it comes back is all on the

00:05:26,010 --> 00:05:33,450
specification and there's really two big

00:05:30,360 --> 00:05:37,889
advantages in my mind at least for the

00:05:33,450 --> 00:05:41,180
specification the first is you don't

00:05:37,889 --> 00:05:43,349
have to spend a bunch of time like

00:05:41,180 --> 00:05:46,970
architecting what your API is going to

00:05:43,349 --> 00:05:50,520
look like JSON API

00:05:46,970 --> 00:05:52,919
everything is entity formatted so or

00:05:50,520 --> 00:05:55,949
entity based so you have specific

00:05:52,919 --> 00:05:59,910
endpoints for a resource you can fetch

00:05:55,949 --> 00:06:04,860
those resources you can post them and

00:05:59,910 --> 00:06:07,410
get collections back and that Maps

00:06:04,860 --> 00:06:09,840
really well with what the Drupal so if

00:06:07,410 --> 00:06:13,310
you think of you know a node is an

00:06:09,840 --> 00:06:16,349
entity or a taxonomy term is an entity

00:06:13,310 --> 00:06:17,580
that map's really well to chasing API so

00:06:16,349 --> 00:06:20,520
you don't have to spend time arguing

00:06:17,580 --> 00:06:23,099
over like you know what what's the shape

00:06:20,520 --> 00:06:25,110
of this data like what is the in point

00:06:23,099 --> 00:06:28,919
we're gonna post to what what are we

00:06:25,110 --> 00:06:31,470
going to get back and then the other big

00:06:28,919 --> 00:06:34,169
advantage because it's a specification

00:06:31,470 --> 00:06:36,240
that allows us to make tools that make

00:06:34,169 --> 00:06:38,820
assumptions about you know what that

00:06:36,240 --> 00:06:40,680
shape the shape of the data should be

00:06:38,820 --> 00:06:45,120
so we don't have to write a lot of

00:06:40,680 --> 00:06:50,010
boilerplate code in order to you know

00:06:45,120 --> 00:06:51,480
fetch a node from Drupal per se so we're

00:06:50,010 --> 00:06:53,580
going to the examples we're going to

00:06:51,480 --> 00:06:57,780
look at in postman or all going to be

00:06:53,580 --> 00:07:00,840
based on JSON API in JSON API module as

00:06:57,780 --> 00:07:05,190
they say here highly encourage you to

00:07:00,840 --> 00:07:06,900
actually read the spec it's a it's a 30

00:07:05,190 --> 00:07:09,630
40 minute read and I'm a really slow

00:07:06,900 --> 00:07:12,330
reader also once you're done with that

00:07:09,630 --> 00:07:14,640
there's really good modules or really

00:07:12,330 --> 00:07:16,680
good documentation for the module itself

00:07:14,640 --> 00:07:19,910
so it's definitely worth the time

00:07:16,680 --> 00:07:23,370
reading those it'll save you much time

00:07:19,910 --> 00:07:25,920
yeah do that

00:07:23,370 --> 00:07:27,900
so I want to talk a little bit about API

00:07:25,920 --> 00:07:30,210
is in general sounds like just based on

00:07:27,900 --> 00:07:32,700
the hands of people in the room that

00:07:30,210 --> 00:07:36,480
abused postman you know that a REST API

00:07:32,700 --> 00:07:38,610
is but essentially we are just singing a

00:07:36,480 --> 00:07:41,310
curette a request just like you would

00:07:38,610 --> 00:07:43,560
for an image or an HTML page you're

00:07:41,310 --> 00:07:45,240
sending a request for data so you send

00:07:43,560 --> 00:07:50,100
that to the server and you get a

00:07:45,240 --> 00:07:54,000
response back those responses have

00:07:50,100 --> 00:07:56,520
status codes so you're familiar with 200

00:07:54,000 --> 00:07:58,110
you know everything worked it's usually

00:07:56,520 --> 00:08:00,300
a good sign

00:07:58,110 --> 00:08:04,200
201 created so if you're actually

00:08:00,300 --> 00:08:05,490
posting a new entity to the server and

00:08:04,200 --> 00:08:10,620
our example is coming up we're going to

00:08:05,490 --> 00:08:12,680
post a recipe to the server and if it

00:08:10,620 --> 00:08:18,000
works successfully we'll get a 201

00:08:12,680 --> 00:08:20,340
status code 301 moved permanently 403

00:08:18,000 --> 00:08:23,760
forbidden so if you don't have your not

00:08:20,340 --> 00:08:26,990
authenticated to get a resource 404 not

00:08:23,760 --> 00:08:30,060
found you probably put the wrong URL in

00:08:26,990 --> 00:08:33,660
418 I'm a teapot if you send a request

00:08:30,060 --> 00:08:35,370
to a teapot trying to make coffee you're

00:08:33,660 --> 00:08:38,880
going to get the 418 I'm a teapot

00:08:35,370 --> 00:08:44,490
response there's also a spec for that

00:08:38,880 --> 00:08:47,520
google it I'm not lying but the general

00:08:44,490 --> 00:08:51,240
the general idea is the 100 responses

00:08:47,520 --> 00:08:51,529
are hold on - here you go everything's

00:08:51,240 --> 00:08:55,449
work

00:08:51,529 --> 00:08:57,920
while three go away 400 you screwed up

00:08:55,449 --> 00:08:59,660
500 I screwed up

00:08:57,920 --> 00:09:05,509
usually when you get the white screen of

00:08:59,660 --> 00:09:08,990
death that's in the 500s so it's

00:09:05,509 --> 00:09:12,970
actually sent some requests okay so

00:09:08,990 --> 00:09:16,759
here's the here's the postman interface

00:09:12,970 --> 00:09:19,459
postman has a concept of workspaces so

00:09:16,759 --> 00:09:22,610
you can switch usually I'll have a

00:09:19,459 --> 00:09:27,170
workspace set up for like a different

00:09:22,610 --> 00:09:29,120
project that I'm working on and then you

00:09:27,170 --> 00:09:32,589
have collections here on the side so

00:09:29,120 --> 00:09:36,259
collections are just groups of requests

00:09:32,589 --> 00:09:39,439
and then within those you can I don't

00:09:36,259 --> 00:09:43,120
have any here but you can you can you

00:09:39,439 --> 00:09:43,120
know organize those into folders as well

00:09:43,720 --> 00:09:48,709
so in this example can everyone see that

00:09:46,819 --> 00:09:53,290
all right is it big enough I need to

00:09:48,709 --> 00:09:56,329
zoom in no cool

00:09:53,290 --> 00:10:01,579
so here's I've got a I've got a local

00:09:56,329 --> 00:10:06,980
instance of content of running its

00:10:01,579 --> 00:10:10,730
namespace with this API path and I want

00:10:06,980 --> 00:10:16,399
to get recipes so I send that I should

00:10:10,730 --> 00:10:18,980
get a whole list of recipes back and

00:10:16,399 --> 00:10:23,019
this is the the JSON API format you get

00:10:18,980 --> 00:10:26,000
if everything goes correctly you get one

00:10:23,019 --> 00:10:29,329
object and inside of that it's got a

00:10:26,000 --> 00:10:31,879
property called data or must have

00:10:29,329 --> 00:10:34,100
property data if it's a collection like

00:10:31,879 --> 00:10:36,769
you're getting a group of entities in

00:10:34,100 --> 00:10:38,449
this case we want all the recipes we

00:10:36,769 --> 00:10:41,360
didn't specify any filtering or anything

00:10:38,449 --> 00:10:43,480
so it's gonna send back an array even if

00:10:41,360 --> 00:10:49,189
it's just one it'll send back an array

00:10:43,480 --> 00:10:51,079
because we're getting a collection so

00:10:49,189 --> 00:10:53,929
yeah we just have a bunch of entities

00:10:51,079 --> 00:10:58,339
and you'll see that there's a lot of a

00:10:53,929 --> 00:11:01,399
lot of data here in a lot of cases when

00:10:58,339 --> 00:11:03,620
you're when you just want to show a list

00:11:01,399 --> 00:11:04,230
of recipes you don't necessarily need

00:11:03,620 --> 00:11:07,020
all that day

00:11:04,230 --> 00:11:09,350
you don't need the created date you

00:11:07,020 --> 00:11:12,300
might not need if it's published or not

00:11:09,350 --> 00:11:14,970
you don't need the user ID so we'll look

00:11:12,300 --> 00:11:21,660
at ways to to just get what you need

00:11:14,970 --> 00:11:25,170
there so postmen allows for URL

00:11:21,660 --> 00:11:28,290
parameters so in this case we want to

00:11:25,170 --> 00:11:32,640
get a specific recipe so we know the

00:11:28,290 --> 00:11:34,520
UUID for that and if we just hit params

00:11:32,640 --> 00:11:37,700
you can see I already have it defined

00:11:34,520 --> 00:11:45,260
I've got one of the uu IDs for a recipe

00:11:37,700 --> 00:11:48,030
and send that and in that response you

00:11:45,260 --> 00:11:52,440
notice that now this is an object so we

00:11:48,030 --> 00:11:54,240
just get one single single entity it's a

00:11:52,440 --> 00:11:55,770
recipe basically all the same

00:11:54,240 --> 00:12:02,150
information that we had before it's just

00:11:55,770 --> 00:12:05,040
now a single entity so it's an an object

00:12:02,150 --> 00:12:13,350
categories or taxonomy terms we can send

00:12:05,040 --> 00:12:15,480
those get those and that's what you

00:12:13,350 --> 00:12:21,840
might expect its categories a bunch of

00:12:15,480 --> 00:12:25,050
field data now JSON API allows you to

00:12:21,840 --> 00:12:28,980
you know filter those those queries get

00:12:25,050 --> 00:12:30,660
specific fields so first I'll turn on

00:12:28,980 --> 00:12:32,400
the sort parameter this is one thing I

00:12:30,660 --> 00:12:35,690
really like about postman is you can

00:12:32,400 --> 00:12:39,630
load a bunch of test query parameters up

00:12:35,690 --> 00:12:41,790
in here and just enable and disable and

00:12:39,630 --> 00:12:43,650
delete them as you need so you don't

00:12:41,790 --> 00:12:45,390
have to worry about like always going

00:12:43,650 --> 00:12:48,260
back and copying and pasting things and

00:12:45,390 --> 00:12:50,730
you can just disable specific parameters

00:12:48,260 --> 00:12:56,390
so we'll send that and it should be

00:12:50,730 --> 00:12:56,390
sorted by name so we have main course

00:12:57,500 --> 00:13:03,990
see it's kind of hard to scroll through

00:13:02,970 --> 00:13:07,050
this right because there's a lot of

00:13:03,990 --> 00:13:09,860
information that we don't need so Jason

00:13:07,050 --> 00:13:13,560
API has this idea of sparse field sets

00:13:09,860 --> 00:13:15,840
which lets you define what field you

00:13:13,560 --> 00:13:16,400
want back so really our we're interested

00:13:15,840 --> 00:13:18,470
in

00:13:16,400 --> 00:13:23,270
is the name for our hypothetical

00:13:18,470 --> 00:13:25,280
purposes so if I send that now I mainly

00:13:23,270 --> 00:13:26,420
just get the name attribute

00:13:25,280 --> 00:13:28,310
I don't have the created or the

00:13:26,420 --> 00:13:31,460
published or anything like that it makes

00:13:28,310 --> 00:13:37,100
for a smaller request easier to look at

00:13:31,460 --> 00:13:39,290
a little more efficient in terms of what

00:13:37,100 --> 00:13:45,320
you're downloading from the server so

00:13:39,290 --> 00:13:52,250
now we can see that these are indeed

00:13:45,320 --> 00:13:56,510
sorted by name and you can actually get

00:13:52,250 --> 00:14:02,210
pretty complicated with this so here

00:13:56,510 --> 00:14:05,120
I've got searching for recipes I want

00:14:02,210 --> 00:14:06,890
the title and the category again using

00:14:05,120 --> 00:14:08,960
sparse field sets again we're going to

00:14:06,890 --> 00:14:12,290
sort by title but now I've got this new

00:14:08,960 --> 00:14:15,940
parameter called include an include

00:14:12,290 --> 00:14:19,850
allows us to include any of the other

00:14:15,940 --> 00:14:26,720
entities that are being referenced so in

00:14:19,850 --> 00:14:30,500
this case if we run this oh and I also I

00:14:26,720 --> 00:14:32,780
limited it by only two resources so all

00:14:30,500 --> 00:14:37,430
these are paginate it I believe the

00:14:32,780 --> 00:14:40,480
default is 50 is that right good thanks

00:14:37,430 --> 00:14:40,480
miss paying attention

00:14:41,200 --> 00:14:46,910
so I'm liberating by 50 and also for the

00:14:44,210 --> 00:14:49,670
categories I only want the name so with

00:14:46,910 --> 00:14:52,550
this syntax we can say fields categories

00:14:49,670 --> 00:14:55,120
only give me the name so let's see what

00:14:52,550 --> 00:14:55,120
that looks like

00:14:58,480 --> 00:15:08,240
sorry my little scroll target is really

00:15:01,220 --> 00:15:13,990
tiny so here we have recipes and we have

00:15:08,240 --> 00:15:13,990
these relationships so at the category

00:15:14,410 --> 00:15:22,880
the data is so this is in the category

00:15:18,370 --> 00:15:26,600
nine one f07 3ef yada yada yada it's not

00:15:22,880 --> 00:15:27,640
very useful to humans anyway but we have

00:15:26,600 --> 00:15:32,410
included

00:15:27,640 --> 00:15:34,600
so if I collapse this we now have an

00:15:32,410 --> 00:15:35,920
included parameter and that includes any

00:15:34,600 --> 00:15:39,310
of the categories that are referenced

00:15:35,920 --> 00:15:40,870
from the entities that we searched so in

00:15:39,310 --> 00:15:43,000
this this way we don't have to make two

00:15:40,870 --> 00:15:45,310
requests we don't have to get our

00:15:43,000 --> 00:15:50,200
recipes and then turn around and fetch

00:15:45,310 --> 00:15:52,600
all of our categories so there's only

00:15:50,200 --> 00:15:55,750
one included category here because both

00:15:52,600 --> 00:15:58,210
the two recipes that we got back were

00:15:55,750 --> 00:16:03,520
both main course recipes so it only

00:15:58,210 --> 00:16:04,620
included one of those entities cool does

00:16:03,520 --> 00:16:07,810
that all make sense so far

00:16:04,620 --> 00:16:12,520
pretty pretty basic which is why I

00:16:07,810 --> 00:16:14,050
labeled this basic so now we're going to

00:16:12,520 --> 00:16:15,820
talk about authentication this is one of

00:16:14,050 --> 00:16:17,110
the things that was really really scary

00:16:15,820 --> 00:16:20,190
for me there's a number of different

00:16:17,110 --> 00:16:22,330
ways you can authenticate with an API

00:16:20,190 --> 00:16:27,130
the example we're going to use right now

00:16:22,330 --> 00:16:30,010
is a auth so the general idea with OAuth

00:16:27,130 --> 00:16:33,550
is you have a specific endpoint that

00:16:30,010 --> 00:16:37,090
will return

00:16:33,550 --> 00:16:40,480
tokens like an access token in this case

00:16:37,090 --> 00:16:43,570
it's au / token and this stuff pretty

00:16:40,480 --> 00:16:45,820
much works out of the box when you

00:16:43,570 --> 00:16:49,300
install Contenta I think you have to you

00:16:45,820 --> 00:16:53,980
have to upload a public and private key

00:16:49,300 --> 00:16:58,120
but that's generally about it so we can

00:16:53,980 --> 00:16:59,710
see what we get back here so in the

00:16:58,120 --> 00:17:02,590
we're actually doing a post now we're

00:16:59,710 --> 00:17:06,160
not doing a get request so we're posting

00:17:02,590 --> 00:17:08,860
for a token the grant type has password

00:17:06,160 --> 00:17:12,790
the client ID which is the UUID of a

00:17:08,860 --> 00:17:17,560
client the client secret which is kind

00:17:12,790 --> 00:17:21,190
of like the the client password username

00:17:17,560 --> 00:17:24,580
is admin and here's my user 1 password

00:17:21,190 --> 00:17:28,000
feel free if you want to try to hack my

00:17:24,580 --> 00:17:32,890
local content environment and download

00:17:28,000 --> 00:17:34,570
recipes for grilled cheeses and then

00:17:32,890 --> 00:17:35,860
there's a scope which is content

00:17:34,570 --> 00:17:38,260
administrator I'm not really going to

00:17:35,860 --> 00:17:40,150
get too deep into this because there's a

00:17:38,260 --> 00:17:41,860
bunch of great resources

00:17:40,150 --> 00:17:45,400
out there specifically for the simple

00:17:41,860 --> 00:17:48,010
off module but this is what we need to

00:17:45,400 --> 00:17:50,530
send in order to get this token so I

00:17:48,010 --> 00:17:59,350
sent that I got this really long token

00:17:50,530 --> 00:18:03,160
back it expires in 300 seconds which is

00:17:59,350 --> 00:18:06,060
what five minutes so we have our access

00:18:03,160 --> 00:18:08,740
token and then we have our Refresh token

00:18:06,060 --> 00:18:12,640
so five minutes it's a pretty short

00:18:08,740 --> 00:18:16,900
period of time so this access token is

00:18:12,640 --> 00:18:18,220
going to expire in five minutes and then

00:18:16,900 --> 00:18:20,620
after that it's just not going to be

00:18:18,220 --> 00:18:23,320
usable anymore Refresh token has a much

00:18:20,620 --> 00:18:24,730
longer expiration date so instead of

00:18:23,320 --> 00:18:31,390
having to send our password every time

00:18:24,730 --> 00:18:39,270
we can just send a refresh token so I am

00:18:31,390 --> 00:18:41,530
going to copy this out switch over and

00:18:39,270 --> 00:18:43,930
so the idea here if you're building a

00:18:41,530 --> 00:18:45,850
JavaScript application you would do your

00:18:43,930 --> 00:18:50,440
fetch for your token and then you store

00:18:45,850 --> 00:18:52,630
that locally and objects in memory or

00:18:50,440 --> 00:18:55,980
local storage something like that and

00:18:52,630 --> 00:18:59,410
then when you need to get a new token

00:18:55,980 --> 00:19:02,230
I'm sorry I'll back up then once you

00:18:59,410 --> 00:19:05,110
post request you just include that token

00:19:02,230 --> 00:19:07,030
and that'll give you access to do

00:19:05,110 --> 00:19:10,920
whatever delete things add things edit

00:19:07,030 --> 00:19:13,780
things and then when you need to refresh

00:19:10,920 --> 00:19:15,430
so five minutes has gone by you know

00:19:13,780 --> 00:19:19,000
it's been 10 minutes and now you want to

00:19:15,430 --> 00:19:22,210
post a new recipe what you would do is

00:19:19,000 --> 00:19:28,000
send the Refresh token that you saved so

00:19:22,210 --> 00:19:32,890
in this case you replace that I'll send

00:19:28,000 --> 00:19:36,310
that and now I got a new token and so

00:19:32,890 --> 00:19:39,760
this cycle just goes on you know forever

00:19:36,310 --> 00:19:43,180
as long as you need it if if you're past

00:19:39,760 --> 00:19:45,010
the Refresh token expiration date then

00:19:43,180 --> 00:19:45,180
you have to go back and that's when you

00:19:45,010 --> 00:19:46,560
know

00:19:45,180 --> 00:19:48,720
if you're on a website and it's like

00:19:46,560 --> 00:19:49,800
you've been logged out too long we need

00:19:48,720 --> 00:19:51,930
your username and password

00:19:49,800 --> 00:19:58,380
most likely the refresh token has

00:19:51,930 --> 00:20:01,790
expired cool so now let's actually post

00:19:58,380 --> 00:20:05,280
a recipe so you see we have all our HTTP

00:20:01,790 --> 00:20:09,360
HTTP methods here so far we've just been

00:20:05,280 --> 00:20:12,830
looking at gets in terms of entities but

00:20:09,360 --> 00:20:15,780
now we're going to post so we include

00:20:12,830 --> 00:20:18,450
the accepting content type headers it's

00:20:15,780 --> 00:20:22,410
Jason API you know notice now that we

00:20:18,450 --> 00:20:24,810
have an authorization header I believe

00:20:22,410 --> 00:20:27,450
if I send this it should get rejected

00:20:24,810 --> 00:20:31,350
yep 403 forbidden because this is the

00:20:27,450 --> 00:20:34,290
token that I sent earlier so if I go

00:20:31,350 --> 00:20:40,040
back to this response if I haven't been

00:20:34,290 --> 00:20:46,950
talking for five minutes this should

00:20:40,040 --> 00:20:50,190
work so general syntax it's just a

00:20:46,950 --> 00:20:56,400
string bearer with capital B space and

00:20:50,190 --> 00:21:06,660
then whatever your token is and we'll

00:20:56,400 --> 00:21:10,130
send that bummer dragged in I don't

00:21:06,660 --> 00:21:10,130
think I copied the whole thing

00:21:13,239 --> 00:21:18,339
there's better ways of doing this

00:21:15,509 --> 00:21:25,349
especially hitting shift instead of

00:21:18,339 --> 00:21:25,349
caps-lock I'll try this one more time

00:21:27,239 --> 00:21:31,809
okay there we go so we posted a grilled

00:21:30,309 --> 00:21:35,859
cheese I guess I should have explained

00:21:31,809 --> 00:21:38,289
that with the post we're sending a JSON

00:21:35,859 --> 00:21:40,719
object in the body this looks very

00:21:38,289 --> 00:21:44,559
similar to what we got back when we were

00:21:40,719 --> 00:21:46,989
trying to get a single resource so these

00:21:44,559 --> 00:21:49,359
are probably everything that somebody

00:21:46,989 --> 00:21:50,499
would have put in in like a forum or

00:21:49,359 --> 00:21:54,429
whatever you're using to actually

00:21:50,499 --> 00:22:00,519
generate the fields that here send you

00:21:54,429 --> 00:22:06,399
not I'm not gonna get too deep into that

00:22:00,519 --> 00:22:08,529
I do want to show the authorization

00:22:06,399 --> 00:22:11,049
options so everything we've done so far

00:22:08,529 --> 00:22:17,409
was very manual we're just copying and

00:22:11,049 --> 00:22:20,619
pasting those tokens if we change the

00:22:17,409 --> 00:22:24,639
authorization type we can just put in a

00:22:20,619 --> 00:22:27,789
bearer token and if I paste that

00:22:24,639 --> 00:22:31,149
directly in there still copying and

00:22:27,789 --> 00:22:33,179
pasting you know we just posted another

00:22:31,149 --> 00:22:40,119
grilled cheese

00:22:33,179 --> 00:22:43,059
let me here's our consensus site we

00:22:40,119 --> 00:22:45,700
should had two grilled cheeses yeah

00:22:43,059 --> 00:22:48,119
so it's working it's posting data

00:22:45,700 --> 00:22:48,119
locally

00:22:53,060 --> 00:22:57,950
so there's quite a few authorization

00:22:55,190 --> 00:23:00,770
options in here you can just do like

00:22:57,950 --> 00:23:02,720
basic auth which is filling in your

00:23:00,770 --> 00:23:06,110
username and password and it'll take

00:23:02,720 --> 00:23:08,450
that and it'll encode it into a string

00:23:06,110 --> 00:23:10,790
and you would send that there is

00:23:08,450 --> 00:23:19,910
actually a built in functionality for

00:23:10,790 --> 00:23:22,750
OAuth actually go off to and this is

00:23:19,910 --> 00:23:27,320
just another interface for actually

00:23:22,750 --> 00:23:29,630
getting that data I haven't I haven't

00:23:27,320 --> 00:23:31,730
found this really useful because it

00:23:29,630 --> 00:23:33,860
doesn't it doesn't handle the refresh

00:23:31,730 --> 00:23:35,420
token at least I haven't figured out how

00:23:33,860 --> 00:23:37,940
how to get it to handle the refresh

00:23:35,420 --> 00:23:41,480
token so we'll look at other ways for

00:23:37,940 --> 00:23:46,190
handling that but you do have these

00:23:41,480 --> 00:23:50,510
options there another one I want to

00:23:46,190 --> 00:23:52,370
point out is inherent off from parent so

00:23:50,510 --> 00:23:55,460
we can actually set whatever our

00:23:52,370 --> 00:23:59,240
authentication settings are on the

00:23:55,460 --> 00:24:01,310
parent request so in this case or I'm

00:23:59,240 --> 00:24:04,610
sorry the parent whatever you want to

00:24:01,310 --> 00:24:07,400
call it collection I guess we can edit

00:24:04,610 --> 00:24:14,000
that and we could set the specific

00:24:07,400 --> 00:24:17,060
authorization settings here update that

00:24:14,000 --> 00:24:21,830
and now any any requests within this

00:24:17,060 --> 00:24:24,140
collection using the type inherent off

00:24:21,830 --> 00:24:25,580
from parent will actually use that so

00:24:24,140 --> 00:24:29,360
you don't have to worry about setting it

00:24:25,580 --> 00:24:30,080
on every single request as you'll see in

00:24:29,360 --> 00:24:31,610
a little bit

00:24:30,080 --> 00:24:37,850
you can get a lot of requests in

00:24:31,610 --> 00:24:41,960
collection okay now I want to talk a

00:24:37,850 --> 00:24:44,660
little bit about variables so postman

00:24:41,960 --> 00:24:48,860
allows you to to add variables in pretty

00:24:44,660 --> 00:24:51,140
much anywhere you can type as a string

00:24:48,860 --> 00:24:53,300
in postman you can replace it with the

00:24:51,140 --> 00:24:57,580
variable looks very similar to like

00:24:53,300 --> 00:24:57,580
twigs and syntax and double curly braces

00:24:58,000 --> 00:25:02,110
and those variables have different

00:25:01,310 --> 00:25:04,929
scopes

00:25:02,110 --> 00:25:08,380
so just like with our authentication we

00:25:04,929 --> 00:25:10,510
had a collection that was handling the

00:25:08,380 --> 00:25:13,690
authentication and we said inherent that

00:25:10,510 --> 00:25:18,010
from the parent variables do that

00:25:13,690 --> 00:25:20,740
naturally so you can have there's five

00:25:18,010 --> 00:25:23,500
different scopes of variables in postman

00:25:20,740 --> 00:25:24,670
you have your global scope which is if

00:25:23,500 --> 00:25:26,590
you remember when I first started

00:25:24,670 --> 00:25:29,559
talking I clicked on the content to work

00:25:26,590 --> 00:25:31,600
space at the top those are specific to

00:25:29,559 --> 00:25:34,470
the work space so if you switch

00:25:31,600 --> 00:25:36,669
workspaces your global variables change

00:25:34,470 --> 00:25:40,510
and we have collections which we were

00:25:36,669 --> 00:25:42,280
looking at we had a number of different

00:25:40,510 --> 00:25:43,780
collections and then we have

00:25:42,280 --> 00:25:45,520
environments so I haven't talked about

00:25:43,780 --> 00:25:47,980
environments yet but I will in a second

00:25:45,520 --> 00:25:49,809
but an environment is essentially just a

00:25:47,980 --> 00:25:53,640
group of variables that you can share

00:25:49,809 --> 00:25:56,950
across collections across workspaces

00:25:53,640 --> 00:25:59,679
typically use environment settings for

00:25:56,950 --> 00:26:03,549
like my development environments so I'll

00:25:59,679 --> 00:26:07,750
have a group of settings maybe specific

00:26:03,549 --> 00:26:09,480
passwords for my local environment like

00:26:07,750 --> 00:26:12,700
a different domain

00:26:09,480 --> 00:26:15,669
maybe my locals using HTTP so I have a

00:26:12,700 --> 00:26:21,660
variable for that protocol where our dev

00:26:15,669 --> 00:26:23,440
servers using HTTP so you can have those

00:26:21,660 --> 00:26:25,480
those environments

00:26:23,440 --> 00:26:27,220
check those variables grouped together

00:26:25,480 --> 00:26:29,890
in environments and then when you run a

00:26:27,220 --> 00:26:33,760
request you specify which environment

00:26:29,890 --> 00:26:37,179
you want to run and then you have local

00:26:33,760 --> 00:26:40,870
local variables which we'll get into

00:26:37,179 --> 00:26:42,790
that those are specific to scripts we'll

00:26:40,870 --> 00:26:45,280
talk more about scripts and then you

00:26:42,790 --> 00:26:48,790
have a data variable and I hope to at

00:26:45,280 --> 00:26:51,610
least touch on this but we'll talk about

00:26:48,790 --> 00:26:53,410
that in a bit when we get into running a

00:26:51,610 --> 00:26:57,520
collection so you can run all your

00:26:53,410 --> 00:27:01,059
requests together data variables allow

00:26:57,520 --> 00:27:04,000
you to have a different set of variables

00:27:01,059 --> 00:27:06,520
each time you run that request and I'll

00:27:04,000 --> 00:27:09,549
talk about some use cases for that but

00:27:06,520 --> 00:27:11,320
it ends up these various layers of

00:27:09,549 --> 00:27:14,400
abstraction give you a lot of power and

00:27:11,320 --> 00:27:14,400
what you can do with postman

00:27:14,440 --> 00:27:24,410
so real quick simple variables here I've

00:27:21,860 --> 00:27:28,630
replaced the initial request with a

00:27:24,410 --> 00:27:33,320
protocol variable and a domain and

00:27:28,630 --> 00:27:36,860
postman has a lot of nice my Qi touches

00:27:33,320 --> 00:27:41,600
in it so if I hover over a variable that

00:27:36,860 --> 00:27:43,520
I've typed in it'll say whether in it'll

00:27:41,600 --> 00:27:47,000
tell you what scope it's coming from so

00:27:43,520 --> 00:27:49,970
in this case the value of this variable

00:27:47,000 --> 00:27:55,970
is can contents a test in the scope is

00:27:49,970 --> 00:27:57,470
environment and if I screw up the name

00:27:55,970 --> 00:28:00,740
and actually I don't know if you can see

00:27:57,470 --> 00:28:05,060
but it turns red so it's simple to use

00:28:00,740 --> 00:28:09,470
npm install neumann des g so install it

00:28:05,060 --> 00:28:13,750
globally it's a node package and then

00:28:09,470 --> 00:28:16,400
you can run your collection so Dumon run

00:28:13,750 --> 00:28:18,830
echo this is just an example from the

00:28:16,400 --> 00:28:23,330
site and you can see it runs through all

00:28:18,830 --> 00:28:32,840
that stuff just to give you an example

00:28:23,330 --> 00:28:36,410
of what we just did so I saved these my

00:28:32,840 --> 00:28:40,010
collection in my environment outs and I

00:28:36,410 --> 00:28:44,780
did that by just going here clicking

00:28:40,010 --> 00:28:47,750
export saves it as JSON file same with

00:28:44,780 --> 00:28:52,450
the environment you can go in and edit

00:28:47,750 --> 00:28:57,530
it save it as a JSON file and then

00:28:52,450 --> 00:28:58,850
command-line just say Neumann run you

00:28:57,530 --> 00:29:01,730
give it the collection file that you

00:28:58,850 --> 00:29:03,620
want to run in this case I want to run

00:29:01,730 --> 00:29:07,180
it with a specific environment so you

00:29:03,620 --> 00:29:14,810
just pass it the e flag for environment

00:29:07,180 --> 00:29:19,010
and if I run that and it just ran all

00:29:14,810 --> 00:29:23,710
then the tests that I've had so super

00:29:19,010 --> 00:29:26,300
super powerful super easy to use

00:29:23,710 --> 00:29:29,570
[Music]

00:29:26,300 --> 00:29:31,790
and there's a bunch more I feel like I'm

00:29:29,570 --> 00:29:34,850
just scratching the surface or surface

00:29:31,790 --> 00:29:36,730
with with postmen everything you've seen

00:29:34,850 --> 00:29:39,110
here is all part of the free tool

00:29:36,730 --> 00:29:44,270
obviously they need to make money they

00:29:39,110 --> 00:29:46,820
have pro level features one of the main

00:29:44,270 --> 00:29:49,280
things there is sharing things with the

00:29:46,820 --> 00:29:54,440
team like I said you can you can export

00:29:49,280 --> 00:29:56,090
a collection to get and share it but if

00:29:54,440 --> 00:29:57,980
you have the pro version you can

00:29:56,090 --> 00:29:59,660
actually share or workspaces and all

00:29:57,980 --> 00:30:02,230
that stuff you know stored in the cloud

00:29:59,660 --> 00:30:07,220
so everybody on your development team

00:30:02,230 --> 00:30:10,850
can work with it what other things are

00:30:07,220 --> 00:30:11,809
there you can run monitors super easy so

00:30:10,850 --> 00:30:14,480
if you've ever used something like

00:30:11,809 --> 00:30:17,090
Pingdom that's just you know every so

00:30:14,480 --> 00:30:19,280
often it'll it'll ping a sight to see

00:30:17,090 --> 00:30:20,990
that it's getting the 200 or whatever

00:30:19,280 --> 00:30:25,580
tests you can run a whole collection

00:30:20,990 --> 00:30:27,410
with a monitor tool you know give

00:30:25,580 --> 00:30:30,380
reporting back on that so I set that up

00:30:27,410 --> 00:30:32,660
for one of our client sites it just

00:30:30,380 --> 00:30:36,670
pings their site and lets me know yeah

00:30:32,660 --> 00:30:39,760
it's it's up every five minutes or so

00:30:36,670 --> 00:30:43,490
that's something if you get the if you

00:30:39,760 --> 00:30:46,000
pony up for a pro subscription you get

00:30:43,490 --> 00:30:48,410
more of those monitors like you get more

00:30:46,000 --> 00:30:50,330
executions you're limited by the free

00:30:48,410 --> 00:30:52,760
account

00:30:50,330 --> 00:30:56,390
I recently used this I wrote a

00:30:52,760 --> 00:30:59,240
collection for actually doing like a

00:30:56,390 --> 00:31:04,120
very basic migration so we have a client

00:30:59,240 --> 00:31:07,340
site that has an event management system

00:31:04,120 --> 00:31:09,470
it's a it's an older system it has like

00:31:07,340 --> 00:31:12,170
a pretty basic XML feed for all their

00:31:09,470 --> 00:31:13,700
events I was able to take that convert

00:31:12,170 --> 00:31:17,360
it into JSON and turn it into one of

00:31:13,700 --> 00:31:20,770
those data collections and my migration

00:31:17,360 --> 00:31:25,220
script from a postman perspective was

00:31:20,770 --> 00:31:27,590
essentially just one it was like an

00:31:25,220 --> 00:31:29,480
authentication request to authenticate

00:31:27,590 --> 00:31:31,429
with the server and then a post request

00:31:29,480 --> 00:31:35,000
and that looped through all the

00:31:31,429 --> 00:31:39,410
different all the different entity types

00:31:35,000 --> 00:31:42,080
and because I was using JSON API and it

00:31:39,410 --> 00:31:44,090
had a standard Drupal has a standard for

00:31:42,080 --> 00:31:46,400
you know what those endpoints should

00:31:44,090 --> 00:31:49,429
look like I was able to figure out from

00:31:46,400 --> 00:31:52,610
the data you know what URL to post to

00:31:49,429 --> 00:31:57,380
and was able to migrate like seven

00:31:52,610 --> 00:32:00,770
hundred events fairly quickly and for me

00:31:57,380 --> 00:32:03,860
being a front-end guy who hasn't ran or

00:32:00,770 --> 00:32:05,270
written a migration myself I was was

00:32:03,860 --> 00:32:07,760
pretty damn proud of myself for doing

00:32:05,270 --> 00:32:10,790
that may not be the most efficient way

00:32:07,760 --> 00:32:13,280
but it worked and the client was really

00:32:10,790 --> 00:32:15,559
happy with the result so there's a lot

00:32:13,280 --> 00:32:21,800
of other things I'm sure I've missed a

00:32:15,559 --> 00:32:24,559
ton but with that say thanks definitely

00:32:21,800 --> 00:32:26,600
have a couple minutes for questions I do

00:32:24,559 --> 00:32:28,820
also want to say that we're we're hiring

00:32:26,600 --> 00:32:31,340
developers right now so if any of this

00:32:28,820 --> 00:32:34,100
stuff looks interesting to you come talk

00:32:31,340 --> 00:32:37,490
to myself come talk to Joel and that and

00:32:34,100 --> 00:32:40,850
shirt down there we'd love to talk to

00:32:37,490 --> 00:32:42,710
you I think we're doing really fun work

00:32:40,850 --> 00:32:44,929
I'm always excited about the stuff we're

00:32:42,710 --> 00:32:48,230
working on we get to work with some

00:32:44,929 --> 00:32:50,690
amazing clients so yeah come talk to me

00:32:48,230 --> 00:32:54,100
and if you have any questions please

00:32:50,690 --> 00:32:54,100
step up to the mic

00:32:54,950 --> 00:33:02,940
[Applause]

00:32:58,890 --> 00:33:06,750
I do also have I don't work for postman

00:33:02,940 --> 00:33:08,700
I'm just a big fan boy it's been really

00:33:06,750 --> 00:33:10,530
helpful for me so I reached out to them

00:33:08,700 --> 00:33:13,830
and asked them if I could use some of

00:33:10,530 --> 00:33:15,180
their assets and they actually sent a

00:33:13,830 --> 00:33:19,590
bunch of stickers and they're really

00:33:15,180 --> 00:33:22,170
nice stickers if that's your thing so

00:33:19,590 --> 00:33:24,930
come up and see me come visit us at the

00:33:22,170 --> 00:33:39,690
booth but I'd love to answer some

00:33:24,930 --> 00:33:50,430
questions if anyone has these like these

00:33:39,690 --> 00:33:52,710
right here yeah well I definitely I've

00:33:50,430 --> 00:33:56,880
exported all the collections here as

00:33:52,710 --> 00:33:59,030
part of my slides so they're they're up

00:33:56,880 --> 00:34:01,950
and github and I'll post a link to that

00:33:59,030 --> 00:34:05,310
but I could definitely post the

00:34:01,950 --> 00:34:06,870
collection for like I've got one that

00:34:05,310 --> 00:34:10,980
just creates a ton of entities and more

00:34:06,870 --> 00:34:17,510
than that deletes punch yeah happy to do

00:34:10,980 --> 00:34:17,510
that anything else

00:34:18,700 --> 00:34:29,320
somebody's gotta have a question all

00:34:25,250 --> 00:34:29,320
right well thanks for coming

00:34:29,389 --> 00:34:34,859

YouTube URL: https://www.youtube.com/watch?v=Es_K8tIMKks


