Title: DrupalCon Prague 2013: FROM NOT-INVENTED-HERE TO PROUDLY-FOUND-ELSEWHERE: A DRUPAL 8 STORY
Publication date: 2013-09-26
Playlist: DrupalCon Prague - September 2013
Description: 
	Drupal has always been an amazingly flexible, programmable, adaptable platform. The aspect-oriented hook system has been a great ally to developers on some of the biggest websites in the world, allowing for enormous flexibility.

But, Drupal has always done things it's own way - in some cases, to the exclusion of best practices elsewhere. Drupal 8 broke this pattern, and began to leverage code from outside its borders.

Drupal 8 integrates much code from outside its ecosystem. Most notable of all, of course, is the replacement of Drupal's core HTTP routing component with Symfony's HTTP Foundation classes, but there are many more: Doctrine, Guzzle, Twig, Assetic, EasyRDF, and more - all bound together with leading technologies from the PHP community, PSR-0 and Composer.

Drupal's enormous talent pool has been made even larger - and we are contributing back to other projects. We've truly become members of the wider PHP community.

Join Alex Pott, the newest Drupal core maintainer, to hear the story of how this shift was made, its pain points, and to examine the opportunity it presents.
Captions: 
	00:00:00,000 --> 00:00:04,920
hi my name is Cameron I'm the tract

00:00:02,850 --> 00:00:07,290
chair for coding and development

00:00:04,920 --> 00:00:10,170
drupalcon Prague and it's my absolute

00:00:07,290 --> 00:00:13,410
honor to introduce one of the featured

00:00:10,170 --> 00:00:15,330
speakers in my track Alec spot those of

00:00:13,410 --> 00:00:16,770
you who attended Teresa's keynote this

00:00:15,330 --> 00:00:19,350
morning would have had a bit of an intro

00:00:16,770 --> 00:00:22,590
to Alex winter is thanked him but for

00:00:19,350 --> 00:00:25,800
those who weren't alex is one of only

00:00:22,590 --> 00:00:28,070
five Drupal 8 core committees in the

00:00:25,800 --> 00:00:30,929
most recently appointed i think in april

00:00:28,070 --> 00:00:33,420
so core committer is someone in a very

00:00:30,929 --> 00:00:35,670
privileged position being one of the few

00:00:33,420 --> 00:00:38,370
people can accept changes to the core of

00:00:35,670 --> 00:00:40,469
Drupal itself so for Drupal 8 we've only

00:00:38,370 --> 00:00:42,899
got Angie Byron Nathaniel Catchpole

00:00:40,469 --> 00:00:46,350
Jennifer hodgdon and the docs team dress

00:00:42,899 --> 00:00:48,329
of course in Alex who can commit code so

00:00:46,350 --> 00:00:50,100
since April he's already done more than

00:00:48,329 --> 00:00:51,840
1,200 commits which is a blistering pace

00:00:50,100 --> 00:00:55,890
I think three said 50 a week this

00:00:51,840 --> 00:00:58,219
morning and to put them in perspective I

00:00:55,890 --> 00:01:02,750
think until then there was only about

00:00:58,219 --> 00:01:04,860
2,000 commits on the drip wet trunk so

00:01:02,750 --> 00:01:07,409
came to call development through its

00:01:04,860 --> 00:01:09,000
work on the configuration management

00:01:07,409 --> 00:01:10,920
initiative which some of you may know

00:01:09,000 --> 00:01:12,930
about which he became interested in when

00:01:10,920 --> 00:01:17,659
he was working as lead developer on the

00:01:12,930 --> 00:01:20,250
Royal Mail project talked a Greek Dunlop

00:01:17,659 --> 00:01:21,780
became part of that initiative and then

00:01:20,250 --> 00:01:24,600
was invited by juries to be a cool

00:01:21,780 --> 00:01:28,590
committed he's now working full-time in

00:01:24,600 --> 00:01:29,759
London on drip away and he's an

00:01:28,590 --> 00:01:33,329
absolutely lovely guy it's really my

00:01:29,759 --> 00:01:35,520
honor to to introduce him so the theme

00:01:33,329 --> 00:01:37,979
of the conference is one too many alex

00:01:35,520 --> 00:01:41,939
is going to talk about how Triple A has

00:01:37,979 --> 00:01:43,770
incorporated and ideas technologies and

00:01:41,939 --> 00:01:45,990
indeed librarians from the wider PHP

00:01:43,770 --> 00:01:48,840
community and what it means for Drupal

00:01:45,990 --> 00:01:52,799
now and in the future so Alex take it

00:01:48,840 --> 00:01:55,229
away Thank You Cameron afternoon

00:01:52,799 --> 00:01:57,329
everyone so as comments just said I'm

00:01:55,229 --> 00:02:00,750
here to talk about the Drupal 8 story

00:01:57,329 --> 00:02:02,850
how we've gone from not invented here to

00:02:00,750 --> 00:02:04,860
proudly found elsewhere and we're

00:02:02,850 --> 00:02:06,540
looking for ideas from outside of the

00:02:04,860 --> 00:02:10,440
Drupal community outside of PHP on how

00:02:06,540 --> 00:02:12,270
to make Drupal better so that's who I am

00:02:10,440 --> 00:02:13,830
he's introduced me so that slide is

00:02:12,270 --> 00:02:16,710
rather redundant

00:02:13,830 --> 00:02:19,740
I'm so we'll move on to who are you I'm

00:02:16,710 --> 00:02:21,890
hoping that most of you are drupal

00:02:19,740 --> 00:02:25,380
developers who are new to Drupal 8 and

00:02:21,890 --> 00:02:26,640
that I'm going to talk to you about why

00:02:25,380 --> 00:02:29,910
we're making the changes that we've made

00:02:26,640 --> 00:02:31,620
a Drupal 8 how to talk in Drupal 8 so

00:02:29,910 --> 00:02:33,420
that when you come to issues and you

00:02:31,620 --> 00:02:35,670
look at the way that the codes written

00:02:33,420 --> 00:02:37,920
you understand what it's what it's

00:02:35,670 --> 00:02:39,990
trying to do I'm going to talk about

00:02:37,920 --> 00:02:41,250
some of the advantages about the changes

00:02:39,990 --> 00:02:45,000
that we've made from a developer

00:02:41,250 --> 00:02:47,130
perspective so in order to talk about

00:02:45,000 --> 00:02:52,470
why we've made the changes to Drupal 8

00:02:47,130 --> 00:02:53,760
we had to go back in time so I don't

00:02:52,470 --> 00:02:56,040
know how many of you know how Drupal

00:02:53,760 --> 00:02:58,830
started but dribble started in a doormat

00:02:56,040 --> 00:03:01,200
at university by user one sitting there

00:02:58,830 --> 00:03:04,080
going hey I want to make a slashdot for

00:03:01,200 --> 00:03:07,680
my dorm and so that's what he set out to

00:03:04,080 --> 00:03:10,170
do he made made the drop org and him and

00:03:07,680 --> 00:03:14,700
his friends posted messages and started

00:03:10,170 --> 00:03:17,310
to share the software this has impact on

00:03:14,700 --> 00:03:19,590
the way that Drupal is written and the

00:03:17,310 --> 00:03:21,630
the way that the internet was in 1999

00:03:19,590 --> 00:03:23,010
also has impacts you know Google was in

00:03:21,630 --> 00:03:25,350
beta everyone was using Internet

00:03:23,010 --> 00:03:26,730
Explorer five there were some advanced

00:03:25,350 --> 00:03:28,860
things going on on the internet like

00:03:26,730 --> 00:03:31,800
SETI at home but it was all like bespoke

00:03:28,860 --> 00:03:34,620
software and the internet was full of

00:03:31,800 --> 00:03:38,580
tables and it just was a different world

00:03:34,620 --> 00:03:40,320
and people were using these to access

00:03:38,580 --> 00:03:44,820
the internet and these to make phone

00:03:40,320 --> 00:03:47,400
calls we're not in that world anymore so

00:03:44,820 --> 00:03:50,070
looking at what we have today we have a

00:03:47,400 --> 00:03:53,550
Drupal that sitting at the heart of the

00:03:50,070 --> 00:03:55,800
Internet getting requests from iPhones

00:03:53,550 --> 00:03:58,590
from kiosk applications from desktops of

00:03:55,800 --> 00:04:03,019
course from all sorts of other

00:03:58,590 --> 00:04:06,000
frameworks and systems yet at the moment

00:04:03,019 --> 00:04:10,140
drupal 7 assumes the moment it's making

00:04:06,000 --> 00:04:13,920
a response to requests that is this

00:04:10,140 --> 00:04:15,390
desktop that's what it does and in

00:04:13,920 --> 00:04:17,459
Drupal 7 order to get around this the

00:04:15,390 --> 00:04:19,799
services module does all sorts of evil

00:04:17,459 --> 00:04:22,140
things like just exiting straight from

00:04:19,799 --> 00:04:23,669
co2 any anything you've got that it's

00:04:22,140 --> 00:04:25,540
going to fire at the end of a response

00:04:23,669 --> 00:04:30,310
on termination there that won't fire

00:04:25,540 --> 00:04:32,070
but yep that's Drupal 7 for HTML so at

00:04:30,310 --> 00:04:35,590
the beginning of the cycle for Drupal 8

00:04:32,070 --> 00:04:38,170
Larry Garfield said the Drupal basically

00:04:35,590 --> 00:04:41,020
needs to evolve and quickly from the

00:04:38,170 --> 00:04:43,300
first class web CMS into a first-class

00:04:41,020 --> 00:04:47,710
rest server that includes the first

00:04:43,300 --> 00:04:49,870
class web CMS and this has a fundamental

00:04:47,710 --> 00:04:53,710
impact on the way in which we have to

00:04:49,870 --> 00:04:56,650
architect Drupal to work and so I'm

00:04:53,710 --> 00:04:58,900
going to talk about what that is at the

00:04:56,650 --> 00:05:02,740
same time the tools on which we built

00:04:58,900 --> 00:05:05,770
Drupal have been changing so PHP is no

00:05:02,740 --> 00:05:07,980
longer pH before that it was back in

00:05:05,770 --> 00:05:12,900
nineteen ninety nine it's embraced

00:05:07,980 --> 00:05:18,460
concepts and techniques such as oo

00:05:12,900 --> 00:05:21,220
namespaces and anonymous functions that

00:05:18,460 --> 00:05:23,350
we need to embrace because that's that's

00:05:21,220 --> 00:05:28,150
PHP that's the fundamental language that

00:05:23,350 --> 00:05:30,910
we're using so Drupal 8 is object

00:05:28,150 --> 00:05:33,850
orientated because PHP is object

00:05:30,910 --> 00:05:35,740
oriented so if you if you don't get

00:05:33,850 --> 00:05:38,170
classes objects and interfaces then

00:05:35,740 --> 00:05:40,450
now's the time to start to learn so i'm

00:05:38,170 --> 00:05:44,590
going to show you why that's important

00:05:40,450 --> 00:05:48,510
in quite simple numbers drupal 7 has 380

00:05:44,590 --> 00:05:52,750
classes basically it's all the DB layer

00:05:48,510 --> 00:05:56,440
Drupal 8 at the moment has 2816 classes

00:05:52,750 --> 00:05:58,570
and it's only going to grow so if you

00:05:56,440 --> 00:06:01,390
want to develop on Drupal 8 getting

00:05:58,570 --> 00:06:05,470
comfortable with oo code is going to be

00:06:01,390 --> 00:06:09,040
mandatory so one of the key things that

00:06:05,470 --> 00:06:10,960
was introduced in PHP 53 which Drupal 8

00:06:09,040 --> 00:06:12,270
assume is the lowest version that the

00:06:10,960 --> 00:06:16,060
Drupal 8 is going to work on is

00:06:12,270 --> 00:06:19,870
namespaces and what namespaces allow us

00:06:16,060 --> 00:06:23,140
to do is to use classes with the same

00:06:19,870 --> 00:06:25,620
name like database but take them from

00:06:23,140 --> 00:06:25,620
different places

00:06:28,210 --> 00:06:35,450
so with PHP 53 and its new object

00:06:32,240 --> 00:06:36,890
orientation and namespaces people were

00:06:35,450 --> 00:06:39,800
sitting around saying well actually this

00:06:36,890 --> 00:06:45,050
now allows us to share code between our

00:06:39,800 --> 00:06:48,400
projects and so in 2009 some people came

00:06:45,050 --> 00:06:51,980
together under the framework into

00:06:48,400 --> 00:06:56,570
interoperability group so called PHP fig

00:06:51,980 --> 00:06:59,030
and proposed PSR 0 which is a way in

00:06:56,570 --> 00:07:01,640
which projects can share their classes

00:06:59,030 --> 00:07:03,170
and share their share objects and share

00:07:01,640 --> 00:07:05,510
functionality so that we don't all have

00:07:03,170 --> 00:07:07,070
to do the same thing which basically

00:07:05,510 --> 00:07:09,080
says that if we're going to have an

00:07:07,070 --> 00:07:11,600
object we're going to namespace it like

00:07:09,080 --> 00:07:17,120
this we got to have a vendor name Drupal

00:07:11,600 --> 00:07:21,890
a namespace database and a class named

00:07:17,120 --> 00:07:27,650
connection for example and so what this

00:07:21,890 --> 00:07:29,240
allows us to do in code is to use our

00:07:27,650 --> 00:07:32,240
objects like this so at the top of our

00:07:29,240 --> 00:07:34,670
code rewrite use Drupal user entity role

00:07:32,240 --> 00:07:36,290
and then like in my code I can create a

00:07:34,670 --> 00:07:41,030
create a new role just by going the new

00:07:36,290 --> 00:07:44,060
role and then automatic automatic ly PHP

00:07:41,030 --> 00:07:46,700
will be able to include the role file in

00:07:44,060 --> 00:07:49,430
your in your directory structure which

00:07:46,700 --> 00:07:52,760
at the moment is buried quite deep

00:07:49,430 --> 00:07:54,680
because it's a PSI 0 and it will load

00:07:52,760 --> 00:07:59,300
this file automatically for you when it

00:07:54,680 --> 00:08:02,150
when it needs the class so we have

00:07:59,300 --> 00:08:05,210
autoloading and we have namespaces but

00:08:02,150 --> 00:08:07,160
the next bit that that really meant that

00:08:05,210 --> 00:08:11,930
PHP projects could start to share code

00:08:07,160 --> 00:08:14,300
was the advent of composer script and

00:08:11,930 --> 00:08:16,490
what this is is it's a dependency

00:08:14,300 --> 00:08:18,980
management tool for project so it allows

00:08:16,490 --> 00:08:21,230
us to say that my drupal project needs

00:08:18,980 --> 00:08:24,980
code from symphony it needs code from

00:08:21,230 --> 00:08:27,350
zend or any framework or any part of PHP

00:08:24,980 --> 00:08:30,590
that we want we can pull in in in it in

00:08:27,350 --> 00:08:34,660
a way that allows the autoloader to load

00:08:30,590 --> 00:08:38,870
those classes for us so at the moment

00:08:34,660 --> 00:08:41,380
Drupal 8 is relying on 11 or so symphony

00:08:38,870 --> 00:08:41,380
component

00:08:41,490 --> 00:08:46,750
but it's not just symphony as I was

00:08:43,719 --> 00:08:49,890
saying we're using doctrine for parsing

00:08:46,750 --> 00:08:52,180
annotations we're using easy RDF for

00:08:49,890 --> 00:08:56,140
managing our RDF stuff we're using

00:08:52,180 --> 00:08:59,170
guzzle for making HTTP requests we're

00:08:56,140 --> 00:09:01,690
using the zend framework to manage RSS

00:08:59,170 --> 00:09:03,760
aggregation and we're using twig for

00:09:01,690 --> 00:09:06,430
templating so we're pulling in all this

00:09:03,760 --> 00:09:07,899
extra code to handle problems that we

00:09:06,430 --> 00:09:14,980
don't need to solve problems that other

00:09:07,899 --> 00:09:17,380
people have solved for us so now with

00:09:14,980 --> 00:09:19,690
vendor we actually have over 5000

00:09:17,380 --> 00:09:21,579
objects in Drupal 8 that you can

00:09:19,690 --> 00:09:28,120
instantiate and use to solve your

00:09:21,579 --> 00:09:32,100
problems so we have all these new

00:09:28,120 --> 00:09:34,420
objects and we have this the new PHP

00:09:32,100 --> 00:09:36,370
ecosystem built around object

00:09:34,420 --> 00:09:38,529
orientation namespaces and autoloading

00:09:36,370 --> 00:09:40,600
but that means that we now need to use

00:09:38,529 --> 00:09:45,910
some new words to talk about the way

00:09:40,600 --> 00:09:49,149
that Drupal 8 works and I think its

00:09:45,910 --> 00:09:51,430
language is a really important thing if

00:09:49,149 --> 00:09:52,980
we use different words to talk about the

00:09:51,430 --> 00:09:56,529
same things and we end up with confusion

00:09:52,980 --> 00:09:58,600
and I think that we need to use a model

00:09:56,529 --> 00:10:00,520
based language a language that where the

00:09:58,600 --> 00:10:03,579
words are represent things that we can

00:10:00,520 --> 00:10:05,320
all think about and share share an

00:10:03,579 --> 00:10:08,290
understanding in so that we can come

00:10:05,320 --> 00:10:10,829
together and create a great Drupal 8 and

00:10:08,290 --> 00:10:12,850
great websites and products built off it

00:10:10,829 --> 00:10:15,459
so I'm going to go through some of the

00:10:12,850 --> 00:10:17,680
words that you'll hear a lot in Drupal 8

00:10:15,459 --> 00:10:23,500
and then show you the code that creates

00:10:17,680 --> 00:10:27,370
these things so services what services

00:10:23,500 --> 00:10:32,199
are basically global objects that

00:10:27,370 --> 00:10:34,270
provide functionality to your code so a

00:10:32,199 --> 00:10:38,470
classic service would be something like

00:10:34,270 --> 00:10:40,720
a cash back end the mailer or the module

00:10:38,470 --> 00:10:44,380
handler which will allow you to not care

00:10:40,720 --> 00:10:46,329
about how it does it but just get the

00:10:44,380 --> 00:10:51,940
database connection installer module you

00:10:46,329 --> 00:10:53,620
can go crema I have the module handler

00:10:51,940 --> 00:10:56,440
just install

00:10:53,620 --> 00:10:59,320
and services have to live somewhere in

00:10:56,440 --> 00:11:02,200
Drupal 8 and so services live on the

00:10:59,320 --> 00:11:04,360
container and so the container is the

00:11:02,200 --> 00:11:07,720
collection of all of the global objects

00:11:04,360 --> 00:11:09,790
that you can access and the advantage of

00:11:07,720 --> 00:11:12,490
using a container and specifically the

00:11:09,790 --> 00:11:17,529
symphony container is that it means that

00:11:12,490 --> 00:11:21,420
we can inject the dependencies into the

00:11:17,529 --> 00:11:24,190
services well that allows us to do is to

00:11:21,420 --> 00:11:30,010
remove the assumptions that your code is

00:11:24,190 --> 00:11:31,810
making about what it needs so it allows

00:11:30,010 --> 00:11:34,150
us to remove all of the hard-coded

00:11:31,810 --> 00:11:35,860
dependencies and then it makes it

00:11:34,150 --> 00:11:38,800
possible to change them so if we want to

00:11:35,860 --> 00:11:41,620
swap out the HTTP client that's

00:11:38,800 --> 00:11:43,810
currently in court we can and then your

00:11:41,620 --> 00:11:47,830
code just because it is it having the

00:11:43,810 --> 00:11:49,210
HIV client injected can just use the new

00:11:47,830 --> 00:11:51,430
one because you know that it's going to

00:11:49,210 --> 00:11:53,650
implement the same interface and this

00:11:51,430 --> 00:11:56,260
allows us to write clutter-free and

00:11:53,650 --> 00:11:57,910
testable code because the less your code

00:11:56,260 --> 00:12:01,150
actually knows about the rest of the

00:11:57,910 --> 00:12:06,430
application the more reusable it is by

00:12:01,150 --> 00:12:11,110
others and by yourself so in Drupal 8 to

00:12:06,430 --> 00:12:14,080
set up a service all we do is we declare

00:12:11,110 --> 00:12:16,480
stuff in our quick well we can declare

00:12:14,080 --> 00:12:17,980
stuff in court services yeah more which

00:12:16,480 --> 00:12:20,290
is basically this is saying okay I've

00:12:17,980 --> 00:12:23,680
got my config factory service it's going

00:12:20,290 --> 00:12:26,410
to instantiate this class and it's going

00:12:23,680 --> 00:12:28,470
to have the storage and the context

00:12:26,410 --> 00:12:31,870
injected in which are other services

00:12:28,470 --> 00:12:34,839
here's the database service it gets the

00:12:31,870 --> 00:12:36,310
connect it creates a connection and in

00:12:34,839 --> 00:12:40,540
order to create that connection it uses

00:12:36,310 --> 00:12:42,370
a factory and the arguments of the

00:12:40,540 --> 00:12:49,540
default settings these are the default

00:12:42,370 --> 00:12:51,250
settings from your settings or PHP you

00:12:49,540 --> 00:12:53,830
don't have to just use yamel to register

00:12:51,250 --> 00:12:55,839
services you can programmatically

00:12:53,830 --> 00:12:58,330
register them in PHP and what this

00:12:55,839 --> 00:13:00,640
allows us to do is to swap things out at

00:12:58,330 --> 00:13:02,650
different times so in when we're

00:13:00,640 --> 00:13:04,900
installing Drupal the module handler

00:13:02,650 --> 00:13:07,300
isn't the cached module handle but when

00:13:04,900 --> 00:13:10,180
it's in runtime we're using the cash

00:13:07,300 --> 00:13:12,700
hanger so it's really flexible in the

00:13:10,180 --> 00:13:15,700
way that we can now change things at

00:13:12,700 --> 00:13:18,250
different states and what this the

00:13:15,700 --> 00:13:20,019
impact of this is amazing in terms of

00:13:18,250 --> 00:13:22,750
what we can do with now the upgrade path

00:13:20,019 --> 00:13:24,700
the updater the updater has a completely

00:13:22,750 --> 00:13:26,829
alternate module handler that prevents

00:13:24,700 --> 00:13:28,959
you from firing hooks so we've we've

00:13:26,829 --> 00:13:31,000
told you in Drupal five and six and

00:13:28,959 --> 00:13:32,890
seven don't fire hooks from your upgrade

00:13:31,000 --> 00:13:34,510
path it's actually now impossible to

00:13:32,890 --> 00:13:36,160
fire hooks with me upgrade paths and

00:13:34,510 --> 00:13:38,649
this is a big win because it means that

00:13:36,160 --> 00:13:42,420
we won't break Drupal in the ways that

00:13:38,649 --> 00:13:42,420
we've broken it before it's more robust

00:13:42,810 --> 00:13:46,390
you're going to hear a lot about

00:13:44,440 --> 00:13:49,990
requests and responses these are these

00:13:46,390 --> 00:13:52,750
are Symphony objects that we've used to

00:13:49,990 --> 00:13:56,560
model the way in which Drupal works so a

00:13:52,750 --> 00:14:00,910
request is made and a response is

00:13:56,560 --> 00:14:04,269
returned to the browser when a request

00:14:00,910 --> 00:14:06,910
is made we've discovered a route if

00:14:04,269 --> 00:14:11,680
you're American or root if you're

00:14:06,910 --> 00:14:15,190
English and the route will declare what

00:14:11,680 --> 00:14:20,079
controller to use in order to create the

00:14:15,190 --> 00:14:22,750
response and again the routes are

00:14:20,079 --> 00:14:25,000
declared in yama so here is the user

00:14:22,750 --> 00:14:27,220
autocomplete route so / user

00:14:25,000 --> 00:14:29,800
autocomplete here's the controller to

00:14:27,220 --> 00:14:31,839
use and here's what the mission it

00:14:29,800 --> 00:14:34,180
requires it's declarative this is the

00:14:31,839 --> 00:14:39,730
equivalent of the routing part of hook

00:14:34,180 --> 00:14:42,550
menu in Drupal 7 and here is the

00:14:39,730 --> 00:14:44,890
controller and here we see dependency

00:14:42,550 --> 00:14:48,220
injection in action we we inject the

00:14:44,890 --> 00:14:51,579
user autocomplete service into the into

00:14:48,220 --> 00:14:53,829
the controller and then the controller

00:14:51,579 --> 00:14:56,949
just cools get matches so that means in

00:14:53,829 --> 00:14:58,779
order to test the user autocomplete

00:14:56,949 --> 00:15:03,730
service which is that there it's the

00:14:58,779 --> 00:15:06,130
declaration in the services llamo far we

00:15:03,730 --> 00:15:10,540
actually don't need a request or we can

00:15:06,130 --> 00:15:14,860
mock the request so our our use our auto

00:15:10,540 --> 00:15:17,380
completion for the users is now divorced

00:15:14,860 --> 00:15:19,149
from our request handling in Drupal 7 in

00:15:17,380 --> 00:15:20,270
order to test this code you would have

00:15:19,149 --> 00:15:22,310
needed to fire up

00:15:20,270 --> 00:15:26,840
web browser now we don't now this is

00:15:22,310 --> 00:15:29,630
testable in other ways you're going to

00:15:26,840 --> 00:15:33,500
hear a lot about plugins and all plugins

00:15:29,630 --> 00:15:35,720
are is a group of similar objects that

00:15:33,500 --> 00:15:38,150
can be used in a part of Drupal so a

00:15:35,720 --> 00:15:39,860
good example is blocked so not every

00:15:38,150 --> 00:15:42,380
block does the same thing but when you

00:15:39,860 --> 00:15:47,840
place a block on a page it provides a

00:15:42,380 --> 00:15:50,570
view a view as in as in some HTML to put

00:15:47,840 --> 00:15:52,010
on the page and the thing that's special

00:15:50,570 --> 00:15:54,170
about plugins is that they are

00:15:52,010 --> 00:15:58,730
discovered so we have discovery

00:15:54,170 --> 00:16:01,220
mechanisms and what discovery mechanisms

00:15:58,730 --> 00:16:03,920
in Drupal 7 basic you replace is all of

00:16:01,220 --> 00:16:05,870
the hook something info so hook entity

00:16:03,920 --> 00:16:09,110
info hook field formatter info hook

00:16:05,870 --> 00:16:11,360
field widget info hook image tool kits

00:16:09,110 --> 00:16:14,510
they're all gone in favor of a common

00:16:11,360 --> 00:16:16,970
discovery method or we have to at the

00:16:14,510 --> 00:16:19,190
moment and one of them is annotations

00:16:16,970 --> 00:16:20,210
which we've borrowed from doctrine so

00:16:19,190 --> 00:16:22,280
I'm going to show you some of an

00:16:20,210 --> 00:16:24,140
annotation I'm going to show you a block

00:16:22,280 --> 00:16:29,060
and try and show you why this is really

00:16:24,140 --> 00:16:32,180
really nice so in Drupal 7 we have our

00:16:29,060 --> 00:16:34,910
system block view and at the moment I as

00:16:32,180 --> 00:16:36,680
a developer I'm wanting to work on the

00:16:34,910 --> 00:16:38,720
power by block I have to read all this

00:16:36,680 --> 00:16:40,750
code it's going into a switch and I'm go

00:16:38,720 --> 00:16:45,350
yeah that's great there's my theme

00:16:40,750 --> 00:16:48,050
Drupal 8 we don't need that that view

00:16:45,350 --> 00:16:50,960
that the hook view we don't need the

00:16:48,050 --> 00:16:53,300
hook block info all we have is the

00:16:50,960 --> 00:16:55,510
annotation in the same place as we're

00:16:53,300 --> 00:16:59,390
telling it how to render the the block

00:16:55,510 --> 00:17:03,110
so we have an appt plugin here's the ID

00:16:59,390 --> 00:17:05,150
that appears in the admin interface and

00:17:03,110 --> 00:17:07,220
here's the function that just returns

00:17:05,150 --> 00:17:09,290
the theme block and so in order to

00:17:07,220 --> 00:17:13,480
create a block you can just copy this

00:17:09,290 --> 00:17:16,010
file and change the ID the admin label

00:17:13,480 --> 00:17:17,420
do what you want on the output and then

00:17:16,010 --> 00:17:20,839
it the system will automatically

00:17:17,420 --> 00:17:24,860
discover it for you another big change

00:17:20,839 --> 00:17:27,589
in Drupal 8 is entities and basically

00:17:24,860 --> 00:17:30,620
everything is an entity that has a life

00:17:27,589 --> 00:17:33,560
cycle that can be created changed over

00:17:30,620 --> 00:17:34,010
its life and then deleted at some point

00:17:33,560 --> 00:17:36,920
or

00:17:34,010 --> 00:17:38,480
caps around and and the important thing

00:17:36,920 --> 00:17:41,510
about an entity is that it's uniquely

00:17:38,480 --> 00:17:43,190
identifiable so we have content entities

00:17:41,510 --> 00:17:45,740
which are pretty similar to Drupal 7

00:17:43,190 --> 00:17:48,460
there's obviously nodes users comments

00:17:45,740 --> 00:17:51,640
but we've also now got contact messages

00:17:48,460 --> 00:17:54,250
and menu items but we also have

00:17:51,640 --> 00:17:58,330
configuration entities like views

00:17:54,250 --> 00:18:02,690
vocabularies contact categories field

00:17:58,330 --> 00:18:04,580
menus and roles and what's what's nice

00:18:02,690 --> 00:18:07,550
about configuration entities is that

00:18:04,580 --> 00:18:10,220
they use the cmi system in order to be

00:18:07,550 --> 00:18:12,590
managed so we have the user

00:18:10,220 --> 00:18:16,550
authenticated role looking like this so

00:18:12,590 --> 00:18:18,770
it's really easy to read this file and

00:18:16,550 --> 00:18:20,960
see what permissions it has and we can

00:18:18,770 --> 00:18:24,470
copy that file up to production into a

00:18:20,960 --> 00:18:28,250
staging directory import it and make the

00:18:24,470 --> 00:18:31,490
changes but what's also nice about using

00:18:28,250 --> 00:18:33,710
the entity system to manage things like

00:18:31,490 --> 00:18:38,090
roles is that we can then put helpful

00:18:33,710 --> 00:18:40,370
methods on the role entity so we can

00:18:38,090 --> 00:18:42,970
implement house permission so you create

00:18:40,370 --> 00:18:45,230
your role you load up the role the

00:18:42,970 --> 00:18:48,110
authenticated rolling you ask it does it

00:18:45,230 --> 00:18:53,990
have a permission and this helplessly

00:18:48,110 --> 00:18:56,660
helps us fix bugs at the moment this

00:18:53,990 --> 00:18:59,960
this code reads like the code for should

00:18:56,660 --> 00:19:02,090
i search comments depending on whether

00:18:59,960 --> 00:19:04,040
the authenticated or anonymous user has

00:19:02,090 --> 00:19:06,020
access to comments now looks like this

00:19:04,040 --> 00:19:07,550
and it's it's much easier to read I can

00:19:06,020 --> 00:19:09,890
go okay this role does it have this

00:19:07,550 --> 00:19:12,170
permission has the permission access

00:19:09,890 --> 00:19:16,460
comment yeah and if the role IDs are

00:19:12,170 --> 00:19:19,550
this yeah okay I can't act I can't index

00:19:16,460 --> 00:19:21,320
comments because the the authenticated

00:19:19,550 --> 00:19:22,730
user doesn't have access to comments but

00:19:21,320 --> 00:19:25,880
the anonymous does or something like

00:19:22,730 --> 00:19:27,620
that and Drupal 7 the code was like this

00:19:25,880 --> 00:19:30,950
we just quick read straight out the

00:19:27,620 --> 00:19:33,500
database and we made we loaded up a huge

00:19:30,950 --> 00:19:35,930
array we went okay the array key is

00:19:33,500 --> 00:19:37,310
going to be the permission name and then

00:19:35,930 --> 00:19:41,000
we're going to see if the role OD has it

00:19:37,310 --> 00:19:44,540
and when we move to Drupal 8 we changed

00:19:41,000 --> 00:19:46,370
what these constants were and we ended

00:19:44,540 --> 00:19:47,490
up introducing a bug that if you created

00:19:46,370 --> 00:19:50,330
a role

00:19:47,490 --> 00:19:52,290
like administrator that was less than

00:19:50,330 --> 00:19:53,520
authenticated user it would actually

00:19:52,290 --> 00:19:57,920
fall in here you'd never be able to

00:19:53,520 --> 00:20:00,270
index your comment so by having

00:19:57,920 --> 00:20:01,620
interfaces which declare helpful methods

00:20:00,270 --> 00:20:03,270
on your entities we're able to actually

00:20:01,620 --> 00:20:08,970
make the code more readable and easier

00:20:03,270 --> 00:20:13,920
to debug so everything is different in

00:20:08,970 --> 00:20:15,900
Drupal 8 but that also is getting us

00:20:13,920 --> 00:20:20,850
some other wins a lot of people say that

00:20:15,900 --> 00:20:21,780
Drupal 8 is more complicated but I'm

00:20:20,850 --> 00:20:24,179
going to make an argument that's

00:20:21,780 --> 00:20:26,040
actually less complexity I've shown you

00:20:24,179 --> 00:20:27,929
that the blocks are less complex I've

00:20:26,040 --> 00:20:31,080
shown that it's possible with config

00:20:27,929 --> 00:20:32,760
entities to manage configuration in a

00:20:31,080 --> 00:20:35,550
less complex way but I also think it's

00:20:32,760 --> 00:20:38,630
measurably less complex if we have a

00:20:35,550 --> 00:20:40,710
look at how we can measure complexity

00:20:38,630 --> 00:20:42,300
there's there's a there's a measuring

00:20:40,710 --> 00:20:43,770
computing called cyclomatic complexity

00:20:42,300 --> 00:20:47,179
which basically just measures the

00:20:43,770 --> 00:20:49,860
numbers of decision points in code so

00:20:47,179 --> 00:20:51,240
this function here has four decision

00:20:49,860 --> 00:20:59,340
points the decision to call the function

00:20:51,240 --> 00:21:00,420
and each each if or else if so if we

00:20:59,340 --> 00:21:03,690
have a look at what that would mean for

00:21:00,420 --> 00:21:04,920
a function 124 cyclomatic complexity is

00:21:03,690 --> 00:21:09,300
low complexity that didn't look very

00:21:04,920 --> 00:21:11,760
complex 527 moderate complexity eight to

00:21:09,300 --> 00:21:14,610
ten high complexity more than 11 it's

00:21:11,760 --> 00:21:16,020
just very very complex if we have a look

00:21:14,610 --> 00:21:17,880
at with it but we can move this measure

00:21:16,020 --> 00:21:21,150
to actually every line of code in a

00:21:17,880 --> 00:21:22,620
project and so generally there's been

00:21:21,150 --> 00:21:25,080
some studies and it shows that you know

00:21:22,620 --> 00:21:26,820
here are the the kind of measures that

00:21:25,080 --> 00:21:28,980
we will look for so you know triples not

00:21:26,820 --> 00:21:30,960
going to be a low complex application

00:21:28,980 --> 00:21:36,620
never has been and but it'd be nice if

00:21:30,960 --> 00:21:39,620
we were in the moderate complexity range

00:21:36,620 --> 00:21:42,630
so if we have a look at Drupal 6

00:21:39,620 --> 00:21:45,300
actually Drupal 6 was was was very

00:21:42,630 --> 00:21:48,270
complex like lots of functions did an

00:21:45,300 --> 00:21:51,420
awful lot they have lots and lots of

00:21:48,270 --> 00:21:52,770
features and and ability to do from two

00:21:51,420 --> 00:21:53,730
different things and so when you were

00:21:52,770 --> 00:21:56,220
trying to work out what does that

00:21:53,730 --> 00:21:58,309
function do you had to reload a code and

00:21:56,220 --> 00:22:01,170
you weren't always sure it's going to do

00:21:58,309 --> 00:22:06,900
drupal 7 we got better we got a lot

00:22:01,170 --> 00:22:10,020
better and now in Drupal 8 we're

00:22:06,900 --> 00:22:13,020
actually in the sweet spot of measurable

00:22:10,020 --> 00:22:14,610
complexity where you're looking at most

00:22:13,020 --> 00:22:16,080
functions they're just doing a single

00:22:14,610 --> 00:22:21,060
thing they're not doing lots and lots of

00:22:16,080 --> 00:22:23,790
different things but actually you know

00:22:21,060 --> 00:22:26,280
what you would say here is the number of

00:22:23,790 --> 00:22:27,990
lines of code has gone up by three

00:22:26,280 --> 00:22:30,630
hundred thousand so what does this

00:22:27,990 --> 00:22:33,030
really mean we've actually got a lot

00:22:30,630 --> 00:22:34,950
more decision point and what's really

00:22:33,030 --> 00:22:36,660
really interesting is it and you can

00:22:34,950 --> 00:22:38,880
make this up is that triple six is

00:22:36,660 --> 00:22:41,340
actually seventy-seven percent less

00:22:38,880 --> 00:22:44,460
complex in this measure of numbers of

00:22:41,340 --> 00:22:46,500
decisions than Drupal 7 and Drupal 8 is

00:22:44,460 --> 00:22:51,140
seventy-seven percent more complex than

00:22:46,500 --> 00:22:55,740
triple seven so am I losing my argument

00:22:51,140 --> 00:23:00,180
well maybe not because actually if i

00:22:55,740 --> 00:23:01,500
take drupal 7 and I remove the modules

00:23:00,180 --> 00:23:05,490
that have been removed like blog

00:23:01,500 --> 00:23:09,600
dashboard open ID poll profile PHP but I

00:23:05,490 --> 00:23:12,030
add in views email link telephone

00:23:09,600 --> 00:23:13,920
features entity entity reference see

00:23:12,030 --> 00:23:15,240
tools and widgets work which is just a

00:23:13,920 --> 00:23:16,800
selection of some of the functionality

00:23:15,240 --> 00:23:19,610
that you would have to bring into core

00:23:16,800 --> 00:23:22,950
to have the same feature set of Drupal 8

00:23:19,610 --> 00:23:25,230
we actually get to a point where the

00:23:22,950 --> 00:23:28,470
number of decision point is more in

00:23:25,230 --> 00:23:30,750
Drupal sir so I think that in order to

00:23:28,470 --> 00:23:32,850
achieve Drupal 8 functionality in Drupal

00:23:30,750 --> 00:23:38,220
7 you're going to have is a more complex

00:23:32,850 --> 00:23:40,050
site and so just to kind of like really

00:23:38,220 --> 00:23:42,570
focus in on one of the changes that we

00:23:40,050 --> 00:23:44,730
made in Drupal 8 and how we've benefited

00:23:42,570 --> 00:23:47,220
from going and using other libraries we

00:23:44,730 --> 00:23:50,490
can have a look at this function Drupal

00:23:47,220 --> 00:23:53,910
HTTP request which is really hard to

00:23:50,490 --> 00:23:55,440
change it has a cyclomatic complexity 41

00:23:53,910 --> 00:23:58,680
which is early yet it's over that 10

00:23:55,440 --> 00:24:01,860
measure but also there was an issue that

00:23:58,680 --> 00:24:03,750
was study in 2004 took 12 years and over

00:24:01,860 --> 00:24:08,540
400 comments to actually get to commit

00:24:03,750 --> 00:24:10,980
into Drupal 8 it was fixed for Drupal 8

00:24:08,540 --> 00:24:14,659
but we now we don't even have the

00:24:10,980 --> 00:24:18,889
function in Drupal 8 we

00:24:14,659 --> 00:24:20,779
guzzle and what's and what's amazing is

00:24:18,889 --> 00:24:22,309
that in order to actually test that code

00:24:20,779 --> 00:24:25,849
ourselves we would actually have to

00:24:22,309 --> 00:24:30,759
write 25 billion tests to actually fully

00:24:25,849 --> 00:24:30,759
test drupal HT request it's not possible

00:24:31,869 --> 00:24:38,779
and what's even more funny is that that

00:24:35,720 --> 00:24:40,460
issue is now broken we can't actually we

00:24:38,779 --> 00:24:43,279
can't actually use proxies in court but

00:24:40,460 --> 00:24:47,989
in order to use proxies in core we

00:24:43,279 --> 00:24:50,840
actually only require this code so we

00:24:47,989 --> 00:24:54,169
can actually take the guzzle HP client

00:24:50,840 --> 00:24:55,639
modify it just add the proxy settings

00:24:54,169 --> 00:24:57,169
whatever we want straight on them

00:24:55,639 --> 00:24:59,809
because we're using dependency injection

00:24:57,169 --> 00:25:02,059
everywhere to inject the the HP client

00:24:59,809 --> 00:25:05,059
into every service that needs it we just

00:25:02,059 --> 00:25:07,669
benefit so issues that took 12 years of

00:25:05,059 --> 00:25:10,999
arguing can be solved in five lines of

00:25:07,669 --> 00:25:16,940
code in Drupal 8 I think that's pretty

00:25:10,999 --> 00:25:20,359
cool another thing that we've done is we

00:25:16,940 --> 00:25:23,779
brought in phpunit and so we finally

00:25:20,359 --> 00:25:26,029
have a way of testing our code in ways

00:25:23,779 --> 00:25:28,159
that doesn't rely on on the simple test

00:25:26,029 --> 00:25:30,379
browser and what's really good about

00:25:28,159 --> 00:25:32,239
that is that we're testing all of our

00:25:30,379 --> 00:25:35,809
code and all of our functionality on a

00:25:32,239 --> 00:25:38,779
browser that no one ever uses it doesn't

00:25:35,809 --> 00:25:40,700
really make sense and we're trying to

00:25:38,779 --> 00:25:42,139
make it test things that we don't need

00:25:40,700 --> 00:25:43,580
to have all of that we did with not

00:25:42,139 --> 00:25:47,989
isolating what what we're actually

00:25:43,580 --> 00:25:50,059
testing and it's slow so phpunit to

00:25:47,989 --> 00:25:54,320
actually run all the tests at the moment

00:25:50,059 --> 00:25:59,389
takes four seconds to make nearly 2,000

00:25:54,320 --> 00:26:01,519
assertions simple test takes an hour and

00:25:59,389 --> 00:26:05,509
a half on test spots to make 50,000

00:26:01,519 --> 00:26:07,519
assertions so it's it's it's a big

00:26:05,509 --> 00:26:09,499
improvement if we can move much more of

00:26:07,519 --> 00:26:11,269
our testing to phpunit we're going to

00:26:09,499 --> 00:26:12,919
benefit we're going to benefit in other

00:26:11,269 --> 00:26:14,989
ways because it's not just about speed

00:26:12,919 --> 00:26:18,590
we get more information back on what

00:26:14,989 --> 00:26:20,119
we're testing so it's possible in PHP

00:26:18,590 --> 00:26:22,789
unit to produce coverage reports so

00:26:20,119 --> 00:26:24,710
here's the date-time plus class and I

00:26:22,789 --> 00:26:26,989
know that we've got all of these

00:26:24,710 --> 00:26:28,220
functions methods in there and I know

00:26:26,989 --> 00:26:29,870
that this method

00:26:28,220 --> 00:26:32,179
eighty percent of the lines are being

00:26:29,870 --> 00:26:34,940
hit by my test so i can actually look

00:26:32,179 --> 00:26:36,590
and say hey we're missing test coverage

00:26:34,940 --> 00:26:37,610
for this format glass because it is only

00:26:36,590 --> 00:26:41,659
thirty three percent of the lines

00:26:37,610 --> 00:26:43,220
actually tested it's brilliant and it

00:26:41,659 --> 00:26:45,860
it's really lovely because you actually

00:26:43,220 --> 00:26:48,200
can get the code and i can say that in

00:26:45,860 --> 00:26:50,120
the test for crate from array we've got

00:26:48,200 --> 00:26:53,240
nothing that's testing that we throw

00:26:50,120 --> 00:26:54,830
this exception correctly because that

00:26:53,240 --> 00:26:58,450
line is red and all the other lines of

00:26:54,830 --> 00:26:58,450
green so they're being hit by my tests

00:26:59,140 --> 00:27:02,960
so i spent a lot of time talking about

00:27:01,100 --> 00:27:05,299
what we've brought in from PHP but it's

00:27:02,960 --> 00:27:07,340
not just about PHP what Drupal 8 has

00:27:05,299 --> 00:27:11,210
changed you heard this morning what

00:27:07,340 --> 00:27:13,120
dress was talking about we have six new

00:27:11,210 --> 00:27:16,490
front-end libraries in core we've got

00:27:13,120 --> 00:27:18,500
ckeditor backbone modernize it which

00:27:16,490 --> 00:27:21,380
wasn't mentioned and we've got massive

00:27:18,500 --> 00:27:23,179
efforts to clean up front and

00:27:21,380 --> 00:27:25,640
performance like one of my favorite

00:27:23,179 --> 00:27:27,770
facts about Drupal 8 which is not PHP

00:27:25,640 --> 00:27:32,210
related is that in order to do a request

00:27:27,770 --> 00:27:34,990
in Drupal 7 just install and request a

00:27:32,210 --> 00:27:38,390
node you'll actually make 24 requests

00:27:34,990 --> 00:27:42,140
for different assets in Drupal 8 that's

00:27:38,390 --> 00:27:46,280
now only 13 it's a lot of work that

00:27:42,140 --> 00:27:47,270
people have done on that so if i wanted

00:27:46,280 --> 00:27:49,010
to know more about some of the things

00:27:47,270 --> 00:27:51,799
that i've been talking about i can't

00:27:49,010 --> 00:27:55,580
recommend PHP the right way calm enough

00:27:51,799 --> 00:27:57,770
to have a look at how PHP has changed in

00:27:55,580 --> 00:28:00,350
the past that three or four years to

00:27:57,770 --> 00:28:03,470
embrace object orientation and new

00:28:00,350 --> 00:28:05,419
design pads if you want to see about how

00:28:03,470 --> 00:28:08,510
to create a framework like the way that

00:28:05,419 --> 00:28:10,370
Drupal 8 has has used Symphony then fab

00:28:08,510 --> 00:28:12,620
framework will bring up an amazing

00:28:10,370 --> 00:28:15,440
series of tutorials on using Symphony

00:28:12,620 --> 00:28:17,169
components and talking about the way

00:28:15,440 --> 00:28:25,210
that we use language it eric evans

00:28:17,169 --> 00:28:28,549
domain-driven design is a great book so

00:28:25,210 --> 00:28:31,370
also now I'm on stage I would like to

00:28:28,549 --> 00:28:32,600
thank everyone who's contributed to my

00:28:31,370 --> 00:28:34,429
get to because I don't know how many of

00:28:32,600 --> 00:28:37,429
you actually know about how I'm funded

00:28:34,429 --> 00:28:39,620
and only work on Drupal 8 but it's my

00:28:37,429 --> 00:28:42,169
own money and contributions from the

00:28:39,620 --> 00:28:43,940
community so thank you everyone for

00:28:42,169 --> 00:28:52,909
for giving me money it's it's amazing

00:28:43,940 --> 00:28:56,149
it's it's just cool the last but not

00:28:52,909 --> 00:28:57,710
least come to the Sprint's on Friday we

00:28:56,149 --> 00:28:59,509
need more help there's lots to do in

00:28:57,710 --> 00:29:01,249
Drupal 8 there's going to be there's

00:28:59,509 --> 00:29:03,769
going to be big decisions made and we're

00:29:01,249 --> 00:29:05,299
going to produce an amazing product and

00:29:03,769 --> 00:29:12,220
I would really really like you all to be

00:29:05,299 --> 00:29:12,220
a part of it so yeah thank you everyone

00:29:19,330 --> 00:29:36,590
any questions yay so edit just ask me

00:29:34,429 --> 00:29:38,929
what do you think the biggest remaining

00:29:36,590 --> 00:29:41,299
challenges are to tackle with your plate

00:29:38,929 --> 00:29:43,369
well from my perspective it's finishing

00:29:41,299 --> 00:29:46,039
cmi I really want to see that that

00:29:43,369 --> 00:29:48,249
finished I think that there are

00:29:46,039 --> 00:29:51,049
challenges around the upgrade path

00:29:48,249 --> 00:29:53,269
making sure that it works in all

00:29:51,049 --> 00:29:56,059
situations we've done a lot to improve

00:29:53,269 --> 00:29:57,409
the testing on upgrade paths but you

00:29:56,059 --> 00:29:59,149
know that there's there's always more

00:29:57,409 --> 00:30:00,830
work to be done because most people

00:29:59,149 --> 00:30:03,109
don't have a Drupal 7 site there's just

00:30:00,830 --> 00:30:04,999
drupal 7 call they've got contrib

00:30:03,109 --> 00:30:07,249
modules about about everything that so

00:30:04,999 --> 00:30:09,109
we've got to it's really unknown what

00:30:07,249 --> 00:30:10,879
you're upgrading from so we have to do

00:30:09,109 --> 00:30:12,769
work so I think those are the two big

00:30:10,879 --> 00:30:15,289
challenges for me personally but for

00:30:12,769 --> 00:30:17,210
Drupal as a whole I think in the

00:30:15,289 --> 00:30:20,359
Driessen I this morning you know he laid

00:30:17,210 --> 00:30:22,220
out that that we have challenges around

00:30:20,359 --> 00:30:30,309
complexity and DX and we really really

00:30:22,220 --> 00:30:30,309
want to improve that as well Angie

00:30:35,219 --> 00:30:40,299
so Angie asked me what what what things

00:30:38,019 --> 00:30:43,629
get me the most excited me me the most

00:30:40,299 --> 00:30:45,399
excited I think I think for me that the

00:30:43,629 --> 00:30:49,509
most exciting thing is the consistency

00:30:45,399 --> 00:30:51,519
in handling different things that are

00:30:49,509 --> 00:30:54,190
similar within within the Drupal

00:30:51,519 --> 00:30:58,479
universe so so how we handle role

00:30:54,190 --> 00:31:00,580
configuration and how we handle views

00:30:58,479 --> 00:31:02,710
and that the methods are the same so if

00:31:00,580 --> 00:31:05,830
I want to know what's the uuid of a view

00:31:02,710 --> 00:31:07,629
I call the uuid method if I want to know

00:31:05,830 --> 00:31:09,339
what the UU idea of the role is because

00:31:07,629 --> 00:31:11,799
they're both conferences they have the

00:31:09,339 --> 00:31:14,979
same methods and this is nice because if

00:31:11,799 --> 00:31:16,210
your hand it's that perhaps my answers a

00:31:14,979 --> 00:31:18,070
little bit more obtuse than it needs to

00:31:16,210 --> 00:31:20,710
be because if you look at nodes and

00:31:18,070 --> 00:31:24,549
users in in order to get their idea in

00:31:20,710 --> 00:31:28,299
Drupal 7 land you go node arrow you ID

00:31:24,549 --> 00:31:30,369
for the user no lerro NID for that for

00:31:28,299 --> 00:31:33,369
the node and user arrow you ID for the

00:31:30,369 --> 00:31:34,779
for the user but in in Drupal 8 you just

00:31:33,369 --> 00:31:37,989
call the ID method and it will return

00:31:34,779 --> 00:31:41,739
uid you have to know that you and then

00:31:37,989 --> 00:31:43,359
if you have a an IDE that auto completes

00:31:41,739 --> 00:31:45,460
it will tell you that that ID method is

00:31:43,359 --> 00:31:47,259
there so once you know it you once

00:31:45,460 --> 00:31:49,659
you've learnt it for nodes you've know

00:31:47,259 --> 00:31:51,609
it for users you know it for actually

00:31:49,659 --> 00:31:53,679
views you know it for everything so I

00:31:51,609 --> 00:31:56,549
think that there's a consistency that we

00:31:53,679 --> 00:31:56,549
haven't had before

00:32:12,200 --> 00:32:14,260
you

00:32:21,679 --> 00:32:27,720
so the question is Drupal versions prior

00:32:25,679 --> 00:32:31,230
to Drupal 8 were largely procedural and

00:32:27,720 --> 00:32:34,769
drupal versions to Drupal 8 and the

00:32:31,230 --> 00:32:36,390
future might be largely oh whoa well I'd

00:32:34,769 --> 00:32:38,659
you can I can only answer for myself and

00:32:36,390 --> 00:32:42,149
how I came into Drupal which was as a

00:32:38,659 --> 00:32:46,289
site builder I was building sites for a

00:32:42,149 --> 00:32:49,190
university I wanted a tool that that I

00:32:46,289 --> 00:32:51,149
could click together stuff I did another

00:32:49,190 --> 00:32:52,740
comparison of different things I was

00:32:51,149 --> 00:32:55,049
like all Drupal looks good at that point

00:32:52,740 --> 00:32:56,340
I had not looked at the code I didn't

00:32:55,049 --> 00:32:58,950
know whether it was procedural or oh I

00:32:56,340 --> 00:33:03,149
didn't care what I cared is that is that

00:32:58,950 --> 00:33:05,880
I had this amazing ability to create

00:33:03,149 --> 00:33:07,620
content types list them and click it

00:33:05,880 --> 00:33:11,190
together in a way that just worked and I

00:33:07,620 --> 00:33:12,360
was solving my problems then I got to

00:33:11,190 --> 00:33:14,130
this point where I said oh it's not

00:33:12,360 --> 00:33:17,820
solving my problems anymore I need to I

00:33:14,130 --> 00:33:19,169
need to change something and then I just

00:33:17,820 --> 00:33:21,059
I was like oh this is procedural code

00:33:19,169 --> 00:33:23,970
okay that's that's fine if but I don't

00:33:21,059 --> 00:33:25,710
think that that changes you know if

00:33:23,970 --> 00:33:27,840
you're if you're a site builder and you

00:33:25,710 --> 00:33:28,950
get into coding in its now o.o you're

00:33:27,840 --> 00:33:30,510
not going to sit there and go oh I wish

00:33:28,950 --> 00:33:33,480
it was procedural you're going to say ok

00:33:30,510 --> 00:33:37,130
this is the paradigm so I'm not sure

00:33:33,480 --> 00:33:37,130
that it changes that much

00:33:55,890 --> 00:34:01,350
so the question is is do I think that

00:33:59,250 --> 00:34:04,830
other projects will will will join to

00:34:01,350 --> 00:34:06,660
use Drupal components and yeah if we get

00:34:04,830 --> 00:34:09,419
it right if we provide valuable things

00:34:06,660 --> 00:34:12,649
back to the ph community sure and in

00:34:09,419 --> 00:34:16,020
fact in the last month or so the the

00:34:12,649 --> 00:34:18,450
drupal 8 initiative lead four blocks has

00:34:16,020 --> 00:34:21,149
been doing a lot of work on plugins and

00:34:18,450 --> 00:34:22,710
symphony and he's been talking a lot in

00:34:21,149 --> 00:34:24,630
the symphony channels and they're very

00:34:22,710 --> 00:34:26,550
interested in our plug-in system because

00:34:24,630 --> 00:34:29,820
they don't have an equivalent system so

00:34:26,550 --> 00:34:31,409
so yeah i think that if we don't give

00:34:29,820 --> 00:34:33,000
code back to the wild pitch for your

00:34:31,409 --> 00:34:42,630
community we've kind of failed it's not

00:34:33,000 --> 00:34:45,470
a one-way street anymore well thank you

00:34:42,630 --> 00:34:45,470

YouTube URL: https://www.youtube.com/watch?v=b6XOhsuqYq8


