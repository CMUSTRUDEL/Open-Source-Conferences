Title: DrupalCon Prague 2013: HIGH PERFORMANCE SITES WITH DRUPAL AND CACHE CONTROL MODULE
Publication date: 2013-09-26
Playlist: DrupalCon Prague - September 2013
Description: 
	High performance sites are hard to build with Drupal and in a number of cases the internal caching does not give enough boost. Exove has been working for years with all kinds of sites with extremely high performance requirements. We have developed a number of strategies and in this session we explore one of the most efficient one -- using external caching.

For that purpose, we have developed a specific Drupal module. Cache Control integrates sites with the Varnish HTTP accelerator -- and other external HTTP caches -- in a fashion that not only allows for caching page loads for anonymous users but also for authenticated users.

In this session, we briefly discuss how the module works and what are its benefits and limitations. Further, we discuss three real-life cases with high performance requirements that we solved using Cache Control. For all cases we describe how the module worked and what kind of problems we faced.

The first case is a happy case: a high-traffic site where administrators are the only authenticated users. Cache Control suits perfectly for this kind of case. The second case is different: A site where majority of users are authenticated, generate lots of content (making cache purging an issue) and the site shows a lot of personalized content. Cache Control works also in this kind of environment, but faces a lot of challenges. The third case is about dealing with geographical distribution rather than high traffic: We will discuss how Cache Control plays with Fastly CDN.
Captions: 
	00:00:00,000 --> 00:00:05,520
ok hello everyone my name is Janice a

00:00:02,909 --> 00:00:08,580
lot and i'm a senior developer at x 0

00:00:05,520 --> 00:00:11,309
and i'm going to talk to you a bit about

00:00:08,580 --> 00:00:13,860
the cache control module and how you can

00:00:11,309 --> 00:00:16,650
use it to help you to build

00:00:13,860 --> 00:00:21,090
high-performance sites in drupal and how

00:00:16,650 --> 00:00:24,359
we have used it at x 0 so what I'm going

00:00:21,090 --> 00:00:26,099
to talk to you first I'm going to spend

00:00:24,359 --> 00:00:29,460
a couple of moments to talk about who we

00:00:26,099 --> 00:00:33,000
are as a company and then I'm going to

00:00:29,460 --> 00:00:35,399
go into some details about the gas

00:00:33,000 --> 00:00:38,670
control module itself and how it works

00:00:35,399 --> 00:00:40,980
things like this and well I'm not going

00:00:38,670 --> 00:00:43,920
to go into too much details because

00:00:40,980 --> 00:00:47,640
there are some complexities complexities

00:00:43,920 --> 00:00:49,739
involved with the module and then I'm

00:00:47,640 --> 00:00:52,020
going to present you three cases we've

00:00:49,739 --> 00:00:54,989
used the module in first one is really

00:00:52,020 --> 00:00:57,660
easy for like perfect use case for the

00:00:54,989 --> 00:00:59,489
module is this hockey site called the

00:00:57,660 --> 00:01:04,439
earthquake oh that's gone then we have a

00:00:59,489 --> 00:01:07,760
hard case community site for teenage

00:01:04,439 --> 00:01:10,770
girls the middle fi which has a lot of

00:01:07,760 --> 00:01:14,280
authenticated users generating a lot of

00:01:10,770 --> 00:01:18,780
content and it really puts the servers

00:01:14,280 --> 00:01:22,200
on a strain and then last last cases is

00:01:18,780 --> 00:01:24,630
a bit different one in that we didn't

00:01:22,200 --> 00:01:27,750
have to deal with high loads rather than

00:01:24,630 --> 00:01:32,990
geographical distribution and after that

00:01:27,750 --> 00:01:37,340
we'll have some Q&A so

00:01:32,990 --> 00:01:40,850
few words about EXO we believe in open

00:01:37,340 --> 00:01:44,270
source which I guess everyone does here

00:01:40,850 --> 00:01:46,909
and we come from the Northern Europe

00:01:44,270 --> 00:01:50,840
headquarter season is in Helsinki and we

00:01:46,909 --> 00:01:55,310
also have a presence in Estonia and the

00:01:50,840 --> 00:01:59,149
UK and well we were found that in 2006

00:01:55,310 --> 00:02:01,340
and we're about 60 people now more job

00:01:59,149 --> 00:02:06,289
most of which are developers we don't

00:02:01,340 --> 00:02:09,470
have that much other staff and since

00:02:06,289 --> 00:02:13,790
2006 were served more than 120 clients

00:02:09,470 --> 00:02:16,940
and some of you might have met our CEO

00:02:13,790 --> 00:02:19,340
young a gorilla who is the chair of

00:02:16,940 --> 00:02:23,330
business and strategy track here at

00:02:19,340 --> 00:02:25,519
rubicon and this is really all I'm going

00:02:23,330 --> 00:02:27,290
to say about us for now if you are

00:02:25,519 --> 00:02:30,019
interested in hearing more you are

00:02:27,290 --> 00:02:35,959
welcome to visit at booth booth number

00:02:30,019 --> 00:02:40,459
38 so what's cache control and how does

00:02:35,959 --> 00:02:42,470
it work well on this slide you can see

00:02:40,459 --> 00:02:44,269
the address to the project page you're

00:02:42,470 --> 00:02:47,120
welcome to check out the code if you

00:02:44,269 --> 00:02:48,890
like you'll probably if you're

00:02:47,120 --> 00:02:51,310
technically already orientate that you

00:02:48,890 --> 00:02:53,750
might want to take a look because I'm

00:02:51,310 --> 00:03:02,030
going to skip some details in this

00:02:53,750 --> 00:03:04,400
presentation ok so cache control is on

00:03:02,030 --> 00:03:06,530
concept or conceptual level it's really

00:03:04,400 --> 00:03:08,630
simple it's it's a module for

00:03:06,530 --> 00:03:14,600
integrating your site with varnish or

00:03:08,630 --> 00:03:16,670
some other external HTTP cache and I'll

00:03:14,600 --> 00:03:18,799
be mostly talking about war varnish

00:03:16,670 --> 00:03:22,630
today because it's the one we have most

00:03:18,799 --> 00:03:26,150
experienced in but we also have some

00:03:22,630 --> 00:03:29,720
experience with the nginx caching it's

00:03:26,150 --> 00:03:30,770
pretty much the same except that it

00:03:29,720 --> 00:03:33,470
doesn't

00:03:30,770 --> 00:03:37,730
support perch requests as far as I know

00:03:33,470 --> 00:03:40,700
and well whenever I say one ish you can

00:03:37,730 --> 00:03:45,290
replace it with your favorite external

00:03:40,700 --> 00:03:50,690
HDD be cached if you want and well how

00:03:45,290 --> 00:03:53,570
it works is it's really just manipulates

00:03:50,690 --> 00:03:56,390
the cache control headers in the HDD we

00:03:53,570 --> 00:03:58,910
request that Drupal sends out and some

00:03:56,390 --> 00:04:03,890
of you might already have guessed where

00:03:58,910 --> 00:04:05,990
the modules name comes from and yeah we

00:04:03,890 --> 00:04:09,170
also have soft support for purging

00:04:05,990 --> 00:04:11,900
content from the gash and we do

00:04:09,170 --> 00:04:15,530
automatic purchase when for example

00:04:11,900 --> 00:04:17,570
nodes update northcote comments things

00:04:15,530 --> 00:04:19,730
like this and then we provide a hook

00:04:17,570 --> 00:04:25,580
system for those who want to upgrade

00:04:19,730 --> 00:04:28,730
some content on their own but actually I

00:04:25,580 --> 00:04:31,430
just before just before the launch I

00:04:28,730 --> 00:04:34,010
went to see the session by the Columbia

00:04:31,430 --> 00:04:37,970
Law School where they presented their

00:04:34,010 --> 00:04:42,050
own way of doing cash purging and I kind

00:04:37,970 --> 00:04:44,060
of like it so that's cash tagging it

00:04:42,050 --> 00:04:51,950
it's a way I would like to see

00:04:44,060 --> 00:04:55,040
cache-control going someday and then gas

00:04:51,950 --> 00:04:58,490
control comes with an admin UI where you

00:04:55,040 --> 00:05:01,510
can select which menu move their paths

00:04:58,490 --> 00:05:04,880
you want to cash and you can also

00:05:01,510 --> 00:05:06,950
specify different TD else times to live

00:05:04,880 --> 00:05:10,190
for different parts view so you can have

00:05:06,950 --> 00:05:12,680
like content that expires fast and some

00:05:10,190 --> 00:05:20,330
content that just hangs in there on your

00:05:12,680 --> 00:05:23,060
perch and so on and we also ship a VCF

00:05:20,330 --> 00:05:29,450
file for one ish you can use to

00:05:23,060 --> 00:05:30,650
configure your cash with so how does it

00:05:29,450 --> 00:05:35,360
work

00:05:30,650 --> 00:05:40,009
on a very very high level it goes like

00:05:35,360 --> 00:05:43,370
this so whenever I request this in

00:05:40,009 --> 00:05:46,060
coming to the server varnish checks it

00:05:43,370 --> 00:05:50,300
and see if it can be served from the

00:05:46,060 --> 00:05:52,930
cache and if it if it can be then 11 is

00:05:50,300 --> 00:05:56,300
just sent it to the users browser and

00:05:52,930 --> 00:05:59,930
here's where things get interesting the

00:05:56,300 --> 00:06:04,479
varnish also does it for authenticated

00:05:59,930 --> 00:06:11,690
users and how it can do that is because

00:06:04,479 --> 00:06:15,199
if the request isn't can't KAG isn't

00:06:11,690 --> 00:06:17,630
found in the cache varnish of course

00:06:15,199 --> 00:06:21,080
passes to request a trouble and trouble

00:06:17,630 --> 00:06:25,360
then starts executing the page load but

00:06:21,080 --> 00:06:28,070
it does it as an anonymous user and such

00:06:25,360 --> 00:06:30,560
generating response that can be cashed

00:06:28,070 --> 00:06:33,830
by varnish safely there's no

00:06:30,560 --> 00:06:36,880
personalized data in it and of course we

00:06:33,830 --> 00:06:41,300
don't do that for all requests in some

00:06:36,880 --> 00:06:44,620
first of all if the page isn't set

00:06:41,300 --> 00:06:49,370
cashable then we don't do anything and

00:06:44,620 --> 00:06:52,400
then if if the page can't be seen or

00:06:49,370 --> 00:06:55,159
executed by anonymous user we don't do

00:06:52,400 --> 00:07:00,380
anything we don't want the cash to fill

00:06:55,159 --> 00:07:03,680
up with sensitive data ever and and

00:07:00,380 --> 00:07:06,530
there are also some minor details here

00:07:03,680 --> 00:07:09,889
some in some cases we might want to

00:07:06,530 --> 00:07:15,110
bypass the cash but those are really not

00:07:09,889 --> 00:07:17,389
worth going into here okay so then the

00:07:15,110 --> 00:07:21,349
users browser has finally received the

00:07:17,389 --> 00:07:23,870
response and if if the user happens to

00:07:21,349 --> 00:07:27,860
be an anonymous one we just showed page

00:07:23,870 --> 00:07:29,870
to the user and be done with it and if

00:07:27,860 --> 00:07:33,190
the user happens to be authenticated we

00:07:29,870 --> 00:07:37,220
need to generalize personal generate

00:07:33,190 --> 00:07:39,560
personalized parts of it in a separate

00:07:37,220 --> 00:07:41,000
HX parent which we call circuit

00:07:39,560 --> 00:07:43,970
components wagon

00:07:41,000 --> 00:07:48,290
and then we inject the results on the

00:07:43,970 --> 00:07:50,300
page and you might wonder what

00:07:48,290 --> 00:07:54,410
personalized content actually means in

00:07:50,300 --> 00:07:56,930
this case well first of all you can you

00:07:54,410 --> 00:08:02,080
can enable cache-control support for any

00:07:56,930 --> 00:08:07,460
any block interval meaning that all box

00:08:02,080 --> 00:08:10,940
you enabled for our tact as personalized

00:08:07,460 --> 00:08:12,440
and they will be generated for

00:08:10,940 --> 00:08:17,000
authenticated users in the gate

00:08:12,440 --> 00:08:20,750
components HX backend and we also

00:08:17,000 --> 00:08:25,310
provide a an API where you can tag any

00:08:20,750 --> 00:08:29,660
any other content then and blocks if you

00:08:25,310 --> 00:08:35,060
need and for those who are interested we

00:08:29,660 --> 00:08:38,479
actually in order to be able to generate

00:08:35,060 --> 00:08:42,039
personalized content in the h HX back

00:08:38,479 --> 00:08:44,740
end we need to store store the function

00:08:42,039 --> 00:08:48,470
that's going to be used to generate the

00:08:44,740 --> 00:08:52,250
content and function arguments and then

00:08:48,470 --> 00:08:56,690
we need a HTML ID which we use to

00:08:52,250 --> 00:09:01,520
replace their content in the users

00:08:56,690 --> 00:09:05,780
browser so what benefits does this sort

00:09:01,520 --> 00:09:09,290
of approach have well first of all is i

00:09:05,780 --> 00:09:12,280
think this is kind of obvious only the

00:09:09,290 --> 00:09:16,490
needed parts of the page are loaded we

00:09:12,280 --> 00:09:18,830
we avoid some bootstrapping actually we

00:09:16,490 --> 00:09:21,140
avoid all bootstrapping or almost all

00:09:18,830 --> 00:09:24,080
bootstrapping for anonymous users that

00:09:21,140 --> 00:09:29,390
just gets a page from deck directly from

00:09:24,080 --> 00:09:32,780
varnish and for for authenticated users

00:09:29,390 --> 00:09:36,830
we still need to do bootstrap in the cat

00:09:32,780 --> 00:09:40,400
components back end but we only generate

00:09:36,830 --> 00:09:43,610
the parts that are actually needed so we

00:09:40,400 --> 00:09:45,610
avoid generating the whole page all over

00:09:43,610 --> 00:09:48,850
again

00:09:45,610 --> 00:09:51,329
and we do this in a single request or

00:09:48,850 --> 00:09:57,370
all all the personalized parts are

00:09:51,329 --> 00:10:00,660
executing in single request and well

00:09:57,370 --> 00:10:03,810
from the users point of view one of the

00:10:00,660 --> 00:10:06,250
one of the benefits is that the user

00:10:03,810 --> 00:10:08,440
instantly get something to look at while

00:10:06,250 --> 00:10:15,000
the hard parts of the page are being

00:10:08,440 --> 00:10:15,000
loaded so it makes site just feel faster

00:10:15,690 --> 00:10:23,200
okay so there's a gap catch to it first

00:10:21,250 --> 00:10:26,170
of all building high-performance sites

00:10:23,200 --> 00:10:28,060
is a complex matter and cache control is

00:10:26,170 --> 00:10:31,329
not going to solve all your performance

00:10:28,060 --> 00:10:33,250
problems and well if you're only going

00:10:31,329 --> 00:10:35,470
to remember one thing about this session

00:10:33,250 --> 00:10:42,160
let it be this I'm not presenting a

00:10:35,470 --> 00:10:45,399
magic bullet here why is it a complex

00:10:42,160 --> 00:10:47,709
matter it's because that simply if you

00:10:45,399 --> 00:10:49,660
take one ish in the use that's not going

00:10:47,709 --> 00:10:52,620
probably not going to solve your

00:10:49,660 --> 00:10:59,610
performance issues as we will see later

00:10:52,620 --> 00:11:02,860
and another catch is that whenever you

00:10:59,610 --> 00:11:04,779
you develop site with cash control you

00:11:02,860 --> 00:11:08,529
kind of have to keep in mind that you're

00:11:04,779 --> 00:11:13,440
working with cash control or you might

00:11:08,529 --> 00:11:13,440
you might end up doing a lot of work and

00:11:13,800 --> 00:11:20,320
what this means is that you need to

00:11:16,829 --> 00:11:22,660
think what parts of your site are going

00:11:20,320 --> 00:11:25,269
to be personalized for the users and

00:11:22,660 --> 00:11:28,600
what's the performance impact of these

00:11:25,269 --> 00:11:31,339
parts and

00:11:28,600 --> 00:11:33,350
the sad truth is that most likely you

00:11:31,339 --> 00:11:36,399
will end up writing at least some custom

00:11:33,350 --> 00:11:38,540
code where is in cash control and

00:11:36,399 --> 00:11:40,759
another sad truth is that you're

00:11:38,540 --> 00:11:42,379
probably end up spending some time

00:11:40,759 --> 00:11:44,149
wondering why the site behaves

00:11:42,379 --> 00:11:51,290
differently when cash control is United

00:11:44,149 --> 00:11:54,079
enabled and yes the fact that sites

00:11:51,290 --> 00:11:58,540
sometimes decide sometimes behaves

00:11:54,079 --> 00:12:01,759
differently is that is due the fact that

00:11:58,540 --> 00:12:04,610
for example CSS and JavaScript files

00:12:01,759 --> 00:12:06,740
simply aren't loaded both of them are

00:12:04,610 --> 00:12:12,709
loaded when anonymous user makes the

00:12:06,740 --> 00:12:17,680
request so you may end up having to load

00:12:12,709 --> 00:12:21,939
some of the chase and CSS files in a

00:12:17,680 --> 00:12:25,579
hook that cache control provides you

00:12:21,939 --> 00:12:29,180
okay so you might have heard about SH

00:12:25,579 --> 00:12:31,850
site includes and you might wonder why

00:12:29,180 --> 00:12:38,899
you should use cash cash control instead

00:12:31,850 --> 00:12:41,540
of psi well es is partial loading

00:12:38,899 --> 00:12:44,029
technique which is supported by one ish

00:12:41,540 --> 00:12:50,350
and also some content delivery networks

00:12:44,029 --> 00:12:53,870
and in in ESI you you basically you

00:12:50,350 --> 00:12:57,800
write what this special markup that gets

00:12:53,870 --> 00:12:59,509
cached and varnish and varnish web

00:12:57,800 --> 00:13:02,379
before serving the page from the cache

00:12:59,509 --> 00:13:07,220
it it goes through the ESI marker and

00:13:02,379 --> 00:13:10,309
Lord Lord ESO I marked path parts of the

00:13:07,220 --> 00:13:13,990
page from cache or from trouble usually

00:13:10,309 --> 00:13:13,990
from trouble directly and

00:13:14,839 --> 00:13:22,829
well cache-control has does have some

00:13:18,360 --> 00:13:25,889
benefits over ESI one is that when using

00:13:22,829 --> 00:13:29,249
ESI you will have to wait until the

00:13:25,889 --> 00:13:34,459
whole page is loaded I one ish before it

00:13:29,249 --> 00:13:38,879
passes it forward and while doing it

00:13:34,459 --> 00:13:40,920
varnish causes Drupal bootstrap several

00:13:38,879 --> 00:13:46,499
times per page requests when generating

00:13:40,920 --> 00:13:51,420
those parts and well to my knowledge

00:13:46,499 --> 00:13:53,220
this might change in Drupal 8 so I hope

00:13:51,420 --> 00:13:59,279
we're heading to better direction with

00:13:53,220 --> 00:14:01,170
that and it might if this is the case it

00:13:59,279 --> 00:14:03,649
might might even end up burning the

00:14:01,170 --> 00:14:09,660
server with even more good straps than

00:14:03,649 --> 00:14:14,279
it would without any caching so onwards

00:14:09,660 --> 00:14:16,679
to the cases then first one is your koi

00:14:14,279 --> 00:14:21,439
kaam which is the lead leading ice

00:14:16,679 --> 00:14:25,199
hockey site in Vinland we get about

00:14:21,439 --> 00:14:29,069
200,000 unique visitors and 1.6 million

00:14:25,199 --> 00:14:32,519
page loads per week the good thing about

00:14:29,069 --> 00:14:35,360
this is that almost exclusively the page

00:14:32,519 --> 00:14:38,669
load are being done by anonymous users

00:14:35,360 --> 00:14:41,639
actually the only only users using the

00:14:38,669 --> 00:14:44,910
site as all indicated are the site

00:14:41,639 --> 00:14:47,429
administrators and we have disabled

00:14:44,910 --> 00:14:50,129
cache control for those cache control

00:14:47,429 --> 00:14:55,439
allows you to disable it from several

00:14:50,129 --> 00:14:59,759
certain roles and what makes it even

00:14:55,439 --> 00:15:03,600
easier content on the site is read a lot

00:14:59,759 --> 00:15:07,529
more often than it's written so we don't

00:15:03,600 --> 00:15:10,369
really have to worry about cash perching

00:15:07,529 --> 00:15:10,369
that much

00:15:12,330 --> 00:15:18,010
okay here's a screenshot of the site

00:15:15,010 --> 00:15:22,960
it's basically offers to finish hockey

00:15:18,010 --> 00:15:25,870
fan everything he needs about news from

00:15:22,960 --> 00:15:32,770
different leagues at hand results and

00:15:25,870 --> 00:15:37,899
statistics and teams whatever so how we

00:15:32,770 --> 00:15:43,060
achieve this we have the basic drupal

00:15:37,899 --> 00:15:47,860
mysql set up the booster quit solar and

00:15:43,060 --> 00:15:50,980
memcache d and varnish and this all is

00:15:47,860 --> 00:15:53,700
running on one server and we have cash

00:15:50,980 --> 00:15:57,160
control enabled for all content pages

00:15:53,700 --> 00:16:01,660
all node pages taxonomy term pages the

00:15:57,160 --> 00:16:04,330
front page whatever we have and we're

00:16:01,660 --> 00:16:09,240
using different TTL settings for

00:16:04,330 --> 00:16:09,240
different pages to control the cash

00:16:09,959 --> 00:16:18,880
freshness and we're actually using not

00:16:15,520 --> 00:16:23,500
using any any custom code we still do

00:16:18,880 --> 00:16:27,089
have some requirements about content

00:16:23,500 --> 00:16:30,850
propagation to the cash that we need to

00:16:27,089 --> 00:16:35,410
the site administrators want to be able

00:16:30,850 --> 00:16:38,770
to update the site so that the updated

00:16:35,410 --> 00:16:42,670
content is can be accessed by the users

00:16:38,770 --> 00:16:45,279
first and for this we we are using lo TT

00:16:42,670 --> 00:16:46,690
else on for example the front page we're

00:16:45,279 --> 00:16:49,390
not doing purchase to the front page

00:16:46,690 --> 00:16:52,800
it's bit's enough to use like 30 seconds

00:16:49,390 --> 00:16:55,329
or one minutes TTL on the front page and

00:16:52,800 --> 00:16:57,670
because of all this the server logs are

00:16:55,329 --> 00:16:59,560
really minimal where we were able to

00:16:57,670 --> 00:17:02,400
hand pretty much everything that users

00:16:59,560 --> 00:17:02,400
can throw at us

00:17:03,059 --> 00:17:09,579
so this is this is how things work in a

00:17:07,780 --> 00:17:13,030
perfect world we just enabled gosh

00:17:09,579 --> 00:17:17,140
control and outside starts working like

00:17:13,030 --> 00:17:23,439
John unfortunately this is not the case

00:17:17,140 --> 00:17:28,150
always as you can see us you will see

00:17:23,439 --> 00:17:31,540
with Demi fi dem into FY is the

00:17:28,150 --> 00:17:33,580
community around the Demi magazine which

00:17:31,540 --> 00:17:38,860
is really popular amongst finished

00:17:33,580 --> 00:17:41,850
teenage girls it's the site has been

00:17:38,860 --> 00:17:46,450
around since nineteen ninety eight or so

00:17:41,850 --> 00:17:49,270
are the version we did it's maybe the

00:17:46,450 --> 00:17:53,640
fourth incarnation of the site and we

00:17:49,270 --> 00:17:53,640
had to do a huge migration for it and

00:17:54,450 --> 00:18:00,480
currently the site has like two hundred

00:17:57,040 --> 00:18:04,260
and fifty thousand registered users

00:18:00,480 --> 00:18:06,970
millions of nodes which include

00:18:04,260 --> 00:18:12,190
discussion threads community pages and

00:18:06,970 --> 00:18:16,179
plot was and now what we get 2.8 million

00:18:12,190 --> 00:18:19,419
immediately big page views and I can

00:18:16,179 --> 00:18:21,460
tell you that teenage girls are probably

00:18:19,419 --> 00:18:23,230
the hardest demographic to please they

00:18:21,460 --> 00:18:25,120
they will really let you know if

00:18:23,230 --> 00:18:28,350
something's wrong but the good thing

00:18:25,120 --> 00:18:32,760
about them is that they always also

00:18:28,350 --> 00:18:32,760
forget quite fast

00:18:36,840 --> 00:18:42,760
so what makes this case hard is that

00:18:40,110 --> 00:18:45,670
most of the page loads are learned by

00:18:42,760 --> 00:18:48,700
authenticated users and during the busy

00:18:45,670 --> 00:18:53,370
hours we have might even have 1500 of

00:18:48,700 --> 00:18:56,770
those locked in at the same time and

00:18:53,370 --> 00:19:00,600
well the user base is pretty fanatic

00:18:56,770 --> 00:19:03,790
they hit refresh or at all times they

00:19:00,600 --> 00:19:08,260
they generate a lot of content they pay

00:19:03,790 --> 00:19:10,210
right they start new discussions at an

00:19:08,260 --> 00:19:12,160
alarming rate they commit each other

00:19:10,210 --> 00:19:16,870
discussions with an hour arming date

00:19:12,160 --> 00:19:21,340
rate and thus they generate a lot of

00:19:16,870 --> 00:19:23,950
content and this poses a challenge to

00:19:21,340 --> 00:19:26,380
how we can give the cash up to date

00:19:23,950 --> 00:19:28,950
because they also want to see the

00:19:26,380 --> 00:19:34,060
content they posted inside immediately

00:19:28,950 --> 00:19:37,240
and even further every every almost

00:19:34,060 --> 00:19:41,020
every page on the site has a lot of

00:19:37,240 --> 00:19:49,270
personalized content that's different

00:19:41,020 --> 00:19:51,790
for each user so we might be in some

00:19:49,270 --> 00:19:54,010
trouble with this one okay this is a

00:19:51,790 --> 00:19:56,650
screenshot from the site this one

00:19:54,010 --> 00:19:59,920
actually features the forum listing

00:19:56,650 --> 00:20:04,030
which is one of the most requested page

00:19:59,920 --> 00:20:06,160
of the pages of the site and the right

00:20:04,030 --> 00:20:09,270
hand side you can see some blocks which

00:20:06,160 --> 00:20:14,310
are personalized for each user and

00:20:09,270 --> 00:20:14,310
furthermore the user can users can

00:20:14,730 --> 00:20:25,510
arrange the discussion topics to their

00:20:19,540 --> 00:20:29,680
liking and well as I said new discussion

00:20:25,510 --> 00:20:34,990
threads are being created at all times

00:20:29,680 --> 00:20:40,150
so this page also gets needs to be

00:20:34,990 --> 00:20:41,770
refreshed often so i will go to three

00:20:40,150 --> 00:20:44,530
tails a bit later about how we dealt

00:20:41,770 --> 00:20:48,470
with this is that we actually

00:20:44,530 --> 00:20:52,160
or floated all the almost all theming of

00:20:48,470 --> 00:20:56,540
the moving parts to the user's browser

00:20:52,160 --> 00:21:02,060
and we just served Jason fees from the

00:20:56,540 --> 00:21:05,270
back end okay a little bit about the

00:21:02,060 --> 00:21:10,310
setup here too we have a drupal and

00:21:05,270 --> 00:21:13,400
mysql setup we've opted upgraded the

00:21:10,310 --> 00:21:17,410
mysql to use to work on server for

00:21:13,400 --> 00:21:20,720
performance reasons for using solar for

00:21:17,410 --> 00:21:24,490
searches and as a storage normally with

00:21:20,720 --> 00:21:29,750
as a storage we have engine X and

00:21:24,490 --> 00:21:31,700
php-fpm memcache the and varnish and all

00:21:29,750 --> 00:21:34,580
of this is running on almost one server

00:21:31,700 --> 00:21:39,010
it used to be used to run on one server

00:21:34,580 --> 00:21:44,140
but then we we leverage another part of

00:21:39,010 --> 00:21:49,730
another server to partly offload the

00:21:44,140 --> 00:21:52,900
php-fpm processes to and well this is

00:21:49,730 --> 00:21:57,050
something i'm a bit proud of that we can

00:21:52,900 --> 00:22:01,180
we can run this kind of site on one

00:21:57,050 --> 00:22:03,950
server and one and a half servers and

00:22:01,180 --> 00:22:06,980
well how we use cash control here is

00:22:03,950 --> 00:22:11,650
that we enable it for almost all user

00:22:06,980 --> 00:22:14,630
facing pages at least the ones that are

00:22:11,650 --> 00:22:17,170
requested to most some for some pages

00:22:14,630 --> 00:22:20,230
cache-control can't really be used and

00:22:17,170 --> 00:22:23,660
where web form pages are one of these

00:22:20,230 --> 00:22:25,670
cases where we it's not that wise to use

00:22:23,660 --> 00:22:32,120
cash control because it forms will just

00:22:25,670 --> 00:22:35,050
fail and well since a lot of the users

00:22:32,120 --> 00:22:39,680
are authenticated and there's a lot of

00:22:35,050 --> 00:22:41,840
personalized stuff on the page the Ajax

00:22:39,680 --> 00:22:45,440
backends they get called get components

00:22:41,840 --> 00:22:51,800
back in this it's under a lot of stress

00:22:45,440 --> 00:22:53,840
and well also we have written quite a

00:22:51,800 --> 00:22:55,830
lot a lot of custom gold to give the

00:22:53,840 --> 00:23:01,270
cash

00:22:55,830 --> 00:23:05,050
fresh so that purchase happen when they

00:23:01,270 --> 00:23:07,990
should happen and there are also some

00:23:05,050 --> 00:23:10,540
quite a lot of JavaScript and CSS CSS

00:23:07,990 --> 00:23:14,350
tweeting needed to make the site to look

00:23:10,540 --> 00:23:17,020
good when used with cash control this is

00:23:14,350 --> 00:23:21,600
actually one case where where cash

00:23:17,020 --> 00:23:25,120
tagging would would benefit us a lot and

00:23:21,600 --> 00:23:27,700
after all this the server loads are

00:23:25,120 --> 00:23:31,570
still significant but they are mostly

00:23:27,700 --> 00:23:34,900
within tolerable levels we get do get

00:23:31,570 --> 00:23:38,740
some some rush hours where red lodge go

00:23:34,900 --> 00:23:40,390
up a bit and we're still still kind of

00:23:38,740 --> 00:23:44,830
it this is working progress we are still

00:23:40,390 --> 00:23:47,770
kind of struggling to push the loads

00:23:44,830 --> 00:23:52,360
even even lower so that we can we can

00:23:47,770 --> 00:23:59,620
just leave the server I never never look

00:23:52,360 --> 00:24:01,870
at it again not really and okay a little

00:23:59,620 --> 00:24:07,780
bit little bit about the strategy we we

00:24:01,870 --> 00:24:09,880
approach this kind of monster with we

00:24:07,780 --> 00:24:14,350
want to avoid trouble bootstrap and

00:24:09,880 --> 00:24:16,780
theming as much as we can well luckily

00:24:14,350 --> 00:24:18,910
this is what cache control does it tries

00:24:16,780 --> 00:24:24,160
to keep keep as much content lead to

00:24:18,910 --> 00:24:26,950
varnish cash as possible and well as an

00:24:24,160 --> 00:24:30,040
as an example that using cash control

00:24:26,950 --> 00:24:33,370
isn't the only thing you can do or it's

00:24:30,040 --> 00:24:39,100
a using cash control as as a self isn't

00:24:33,370 --> 00:24:41,860
usually enough we've we have these fast

00:24:39,100 --> 00:24:44,530
Jason based packets for later that chain

00:24:41,860 --> 00:24:50,050
is often like the forum topic listings I

00:24:44,530 --> 00:24:53,350
was talking about and we distribute the

00:24:50,050 --> 00:24:56,620
content as JSON and let users process

00:24:53,350 --> 00:24:58,160
handle the theming and we've created a

00:24:56,620 --> 00:25:04,130
little little module

00:24:58,160 --> 00:25:06,380
old frontier to do help with this and we

00:25:04,130 --> 00:25:09,350
also use gas control for those HX

00:25:06,380 --> 00:25:13,970
package so we we cash those results with

00:25:09,350 --> 00:25:16,940
very short TTL 30 seconds or so so we

00:25:13,970 --> 00:25:21,410
don't we don't purge those actually but

00:25:16,940 --> 00:25:24,410
30 seconds seems to be short enough time

00:25:21,410 --> 00:25:31,000
period so that nobody really notices it

00:25:24,410 --> 00:25:34,310
and yes further we we use fast storage

00:25:31,000 --> 00:25:38,150
we use solar for we use MongoDB for file

00:25:34,310 --> 00:25:44,540
storage and memcache Dave cash to go

00:25:38,150 --> 00:25:46,460
cash back end and well as most rupal

00:25:44,540 --> 00:25:49,130
developers probably aren't that

00:25:46,460 --> 00:25:52,670
comfortable with with fiddling with

00:25:49,130 --> 00:25:56,420
varnish or optimizing database engines

00:25:52,670 --> 00:25:58,730
and and stuff like this my professional

00:25:56,420 --> 00:26:01,130
advice would be to get a good sis has

00:25:58,730 --> 00:26:08,450
been admin in your team that can do

00:26:01,130 --> 00:26:11,510
these things for you so we we have

00:26:08,450 --> 00:26:15,230
learned quite a lot of legend lessons in

00:26:11,510 --> 00:26:17,030
this project one of them being that the

00:26:15,230 --> 00:26:23,000
get components back and really needs to

00:26:17,030 --> 00:26:26,030
be fast and this caused us to actually

00:26:23,000 --> 00:26:28,730
rewrite the whole thing using to use

00:26:26,030 --> 00:26:32,480
memory be as a storage back end when

00:26:28,730 --> 00:26:34,330
when when the module was using my scar

00:26:32,480 --> 00:26:39,350
as a back end the server holds

00:26:34,330 --> 00:26:42,650
skyrocketed in some cases but now when

00:26:39,350 --> 00:26:44,750
we got that under control we noticed

00:26:42,650 --> 00:26:46,580
that cash controls phone front and also

00:26:44,750 --> 00:26:48,890
needs to be fast there's a lot of lot of

00:26:46,580 --> 00:26:53,060
JavaScript magic going on in the front

00:26:48,890 --> 00:26:56,020
end and and and since there are a lot of

00:26:53,060 --> 00:27:01,529
lot of mobile devices in the market

00:26:56,020 --> 00:27:06,759
these days it needs to be pretty fast

00:27:01,529 --> 00:27:11,009
and also cash purging can can itself

00:27:06,759 --> 00:27:13,870
become a performance issue meaning that

00:27:11,009 --> 00:27:19,149
users generate so much content that the

00:27:13,870 --> 00:27:21,399
varnish varnish kind of kind of doesn't

00:27:19,149 --> 00:27:28,110
take well do the amount of birch request

00:27:21,399 --> 00:27:35,370
it gets and we solved overcame this by

00:27:28,110 --> 00:27:40,409
using using purchase instead of bands in

00:27:35,370 --> 00:27:40,409
varnish three point of terminology

00:27:41,100 --> 00:27:48,159
because in varnish 3.0 bands bands are

00:27:46,629 --> 00:27:53,500
implemented using regular expressions

00:27:48,159 --> 00:27:55,990
and if we have a extensive list of bands

00:27:53,500 --> 00:27:58,029
it will take some time for varnish to go

00:27:55,990 --> 00:28:00,759
through all of the entries in the ban

00:27:58,029 --> 00:28:03,970
list to see if the incoming requests

00:28:00,759 --> 00:28:06,960
match matches any of those so we switch

00:28:03,970 --> 00:28:09,129
to burgeon instead with which just

00:28:06,960 --> 00:28:17,919
searches the entering the cash and

00:28:09,129 --> 00:28:21,580
delete it and well just just just an

00:28:17,919 --> 00:28:24,610
example of how how performance issues

00:28:21,580 --> 00:28:27,779
kind of when you solve one you run into

00:28:24,610 --> 00:28:32,350
another one after we have done all this

00:28:27,779 --> 00:28:36,250
we noticed that memcache d actually

00:28:32,350 --> 00:28:39,279
started to show some worrying symptoms

00:28:36,250 --> 00:28:45,970
with with the weight handled form gash

00:28:39,279 --> 00:28:48,820
our form form cache size went up to 10

00:28:45,970 --> 00:28:51,820
10 gigs or something like that causing

00:28:48,820 --> 00:28:56,379
causing memcache d to lose some of the

00:28:51,820 --> 00:28:59,399
cache entries because it just ran out of

00:28:56,379 --> 00:29:03,730
space allocated to it so we have to

00:28:59,399 --> 00:29:06,490
after trying different options we had to

00:29:03,730 --> 00:29:10,720
move the whole whole form gasps to my

00:29:06,490 --> 00:29:11,950
sequel which in turn causes costume is

00:29:10,720 --> 00:29:18,159
equal or

00:29:11,950 --> 00:29:20,019
go up so there's really no silver bullet

00:29:18,159 --> 00:29:22,860
here it's all there's always something

00:29:20,019 --> 00:29:28,840
to eat to tweak in this high-traffic

00:29:22,860 --> 00:29:31,000
environments and it all if we didn't

00:29:28,840 --> 00:29:33,789
know it earlier we do know it now that

00:29:31,000 --> 00:29:36,340
building hyper phone so it is hard hard

00:29:33,789 --> 00:29:38,440
and it it gets harder if you don't take

00:29:36,340 --> 00:29:41,889
performance into account from the very

00:29:38,440 --> 00:29:43,929
beginning and from the by the very

00:29:41,889 --> 00:29:47,370
beginning I mean the design phase also

00:29:43,929 --> 00:29:57,220
you need to work with the designers to

00:29:47,370 --> 00:29:58,899
to kind of have a plan which which what

00:29:57,220 --> 00:30:03,669
is the performance cost of different

00:29:58,899 --> 00:30:05,559
different options of for example showing

00:30:03,669 --> 00:30:10,299
certain piece of content on a page a

00:30:05,559 --> 00:30:12,370
certain listing and show in personalized

00:30:10,299 --> 00:30:15,429
content giving the users a lot of

00:30:12,370 --> 00:30:18,639
options all of this makes caching harder

00:30:15,429 --> 00:30:25,570
and well probably makes the users

00:30:18,639 --> 00:30:27,429
happier but not the developers and it's

00:30:25,570 --> 00:30:30,370
it's best to mitigate potential

00:30:27,429 --> 00:30:33,429
performance givers at this point if you

00:30:30,370 --> 00:30:39,720
if you can if you can avoid some obvious

00:30:33,429 --> 00:30:42,399
performance trouble with just just

00:30:39,720 --> 00:30:44,320
influencing the design phase then you

00:30:42,399 --> 00:30:48,750
might self you save yourself a lot of

00:30:44,320 --> 00:30:51,429
trouble later in the project and well

00:30:48,750 --> 00:30:54,610
another lesson is that cash consolation

00:30:51,429 --> 00:30:57,460
pretty much far from perfect and it

00:30:54,610 --> 00:31:00,480
doesn't alone solve your problems as I

00:30:57,460 --> 00:31:06,279
hope I have stress enough in this

00:31:00,480 --> 00:31:08,799
session and actually you may end up

00:31:06,279 --> 00:31:12,669
doing a lot of work are in ironing out

00:31:08,799 --> 00:31:15,070
small glitches with cash purging you

00:31:12,669 --> 00:31:17,750
might get some user feedback yet the AI

00:31:15,070 --> 00:31:21,230
I made some changes to the site and

00:31:17,750 --> 00:31:24,290
they don't show yet and things like this

00:31:21,230 --> 00:31:29,930
you might actually end up using quite a

00:31:24,290 --> 00:31:32,720
lot of be bugging time with those so

00:31:29,930 --> 00:31:37,700
that's the hard case then we go to the

00:31:32,720 --> 00:31:41,990
different one which is deco campus it's

00:31:37,700 --> 00:31:44,150
an online learning tool and a community

00:31:41,990 --> 00:31:47,390
for engineering construction students

00:31:44,150 --> 00:31:51,980
where they can learn how to use the

00:31:47,390 --> 00:31:59,840
tools structural engineering tools tech

00:31:51,980 --> 00:32:02,630
la tecla provides and here are Jones is

00:31:59,840 --> 00:32:05,060
that the users there are not not that

00:32:02,630 --> 00:32:08,780
many users but they they come from all

00:32:05,060 --> 00:32:12,590
over the world and almost all of them

00:32:08,780 --> 00:32:15,230
are authenticated there's a moderate

00:32:12,590 --> 00:32:18,550
amount of personalized content per page

00:32:15,230 --> 00:32:21,290
for logged in users not that bad and

00:32:18,550 --> 00:32:23,450
they don't really generate that module

00:32:21,290 --> 00:32:27,410
content of their own there's a support

00:32:23,450 --> 00:32:36,160
form on the site but it's not nothing

00:32:27,410 --> 00:32:40,640
like the form the teenage girls use so

00:32:36,160 --> 00:32:43,960
again screen sort of of the site this

00:32:40,640 --> 00:32:50,470
one is very simple shape basically it

00:32:43,960 --> 00:32:50,470
has lessons for to use the tools

00:32:52,659 --> 00:32:59,320
okay so how did we approach approach

00:32:56,139 --> 00:33:01,629
this problem well the site is hosted in

00:32:59,320 --> 00:33:04,210
Finland but the user brace face is

00:33:01,629 --> 00:33:07,869
spread all over the world and we wanted

00:33:04,210 --> 00:33:10,809
to mitigate the latency to to users in

00:33:07,869 --> 00:33:14,470
for example Asia and Australia and all

00:33:10,809 --> 00:33:16,269
these remote locations so we figured we

00:33:14,470 --> 00:33:23,649
need some sort of content delivery

00:33:16,269 --> 00:33:26,019
network and well we tried out fear until

00:33:23,649 --> 00:33:28,619
it turned out that the first lie CD and

00:33:26,019 --> 00:33:32,820
actually uses varnished as its back end

00:33:28,619 --> 00:33:35,080
so we decided to give it a go and it

00:33:32,820 --> 00:33:38,340
turns out that cache control actually

00:33:35,080 --> 00:33:41,769
plays pretty nicely with fast line

00:33:38,340 --> 00:33:47,229
pretty much everything works straight

00:33:41,769 --> 00:33:49,509
out of the box even gasp roaches and if

00:33:47,229 --> 00:33:52,419
you are having some trouble with fast

00:33:49,509 --> 00:33:54,549
light they even allow you to upload your

00:33:52,419 --> 00:33:57,489
own vcl configuration file so you can

00:33:54,549 --> 00:34:02,649
you can affect the way how the varnish

00:33:57,489 --> 00:34:06,849
actually works ok this is all seems very

00:34:02,649 --> 00:34:09,460
happy almost that's the first case but

00:34:06,849 --> 00:34:12,399
it's not not equally happy because we

00:34:09,460 --> 00:34:17,319
still needed some custom code do the

00:34:12,399 --> 00:34:21,250
fact that sums on users a lot of the

00:34:17,319 --> 00:34:25,349
users are authenticated and and and they

00:34:21,250 --> 00:34:25,349
see a lot of some person was condom

00:34:26,840 --> 00:34:38,690
so I'm going to quickly cover all the

00:34:32,810 --> 00:34:41,420
topics again so cash control is module

00:34:38,690 --> 00:34:43,640
for integrating your site with an XML

00:34:41,420 --> 00:34:46,790
HTTP cache I've been talking about 1ish

00:34:43,640 --> 00:34:51,170
party you get really try it with any

00:34:46,790 --> 00:34:53,270
HTTP cache and it works for both

00:34:51,170 --> 00:34:55,040
anonymous and authenticated users and

00:34:53,270 --> 00:34:58,370
the fact that it does work with all

00:34:55,040 --> 00:35:05,480
indicated users is the is the

00:34:58,370 --> 00:35:08,960
justification for its existence and how

00:35:05,480 --> 00:35:11,990
it integrates your site within a HTTP

00:35:08,960 --> 00:35:16,970
cache is that it manipulates the cache

00:35:11,990 --> 00:35:21,920
control headers in the HTTP responses

00:35:16,970 --> 00:35:26,810
and out quadruple and how it how it does

00:35:21,920 --> 00:35:29,210
it for authenticated users it simply dax

00:35:26,810 --> 00:35:33,430
some of the parts of some parts of the

00:35:29,210 --> 00:35:36,320
base as personalized and those bots are

00:35:33,430 --> 00:35:42,560
executing an ajax back end at a later

00:35:36,320 --> 00:35:47,240
time it can help your site to be a lot

00:35:42,560 --> 00:35:49,340
faster than just vanilla drupal and it

00:35:47,240 --> 00:35:53,620
can be easier hard depending on the

00:35:49,340 --> 00:35:57,140
complexity of your site and i wish i was

00:35:53,620 --> 00:35:59,570
presenting us like this bulletproof

00:35:57,140 --> 00:36:02,750
solution that always makes your site

00:35:59,570 --> 00:36:08,780
blazingly flat fast but that's not what

00:36:02,750 --> 00:36:11,620
i'm doing here unfortunately well what

00:36:08,780 --> 00:36:16,820
we mean by an easy case is that we have

00:36:11,620 --> 00:36:19,490
mostly anonymous users pretty high read

00:36:16,820 --> 00:36:22,070
right ratio meaning that there are a lot

00:36:19,490 --> 00:36:25,910
of content rates compared to content

00:36:22,070 --> 00:36:32,060
rights there are few only few purchase

00:36:25,910 --> 00:36:34,910
needed and the hard case is that we we

00:36:32,060 --> 00:36:36,740
need to serve a big number of

00:36:34,910 --> 00:36:37,020
authenticated users that generate a lot

00:36:36,740 --> 00:36:42,930
of

00:36:37,020 --> 00:36:45,480
and we also saw that cache-control can

00:36:42,930 --> 00:36:51,150
help you achieve geographical

00:36:45,480 --> 00:36:54,470
distribution on your site and at this

00:36:51,150 --> 00:36:56,910
point I would like to invite you to

00:36:54,470 --> 00:36:59,270
discuss ask questions if you have

00:36:56,910 --> 00:36:59,270
anything

00:37:02,650 --> 00:37:05,280
yes

00:37:36,690 --> 00:37:44,800
the question was about a check week HX

00:37:40,660 --> 00:37:47,800
requests and how we catch those or do we

00:37:44,800 --> 00:37:50,470
do it at all the answer is that you can

00:37:47,800 --> 00:37:54,190
use gas cash control cash a check we pay

00:37:50,470 --> 00:37:57,550
checks requests if you want you just

00:37:54,190 --> 00:38:01,030
have to make sure that they are you you

00:37:57,550 --> 00:38:04,480
can't really do that if the HX HX

00:38:01,030 --> 00:38:06,370
request serve something that's only

00:38:04,480 --> 00:38:09,550
meant for a single user for an

00:38:06,370 --> 00:38:13,840
authenticated user but for for anonymous

00:38:09,550 --> 00:38:16,660
users or HX requests that do you just do

00:38:13,840 --> 00:38:19,680
the same thing for issues or you can you

00:38:16,660 --> 00:38:24,100
can do that as we have done in the

00:38:19,680 --> 00:38:27,910
Demonata f I guess we cash cash da check

00:38:24,100 --> 00:38:34,840
with Ajax requests that serves the chase

00:38:27,910 --> 00:38:37,390
and output for the forum listings thank

00:38:34,840 --> 00:38:40,840
you great presentation thanks a lot um

00:38:37,390 --> 00:38:45,730
do you deal with out-of-band issues like

00:38:40,840 --> 00:38:47,260
multiple varnish servers and because one

00:38:45,730 --> 00:38:52,540
of the things that we've sort of noticed

00:38:47,260 --> 00:38:56,080
in dealing with any sort of HTTP proxy

00:38:52,540 --> 00:38:58,990
cache is that we usually have multiple

00:38:56,080 --> 00:39:01,870
varnis servers and at the same time when

00:38:58,990 --> 00:39:04,120
our users are essentially have our

00:39:01,870 --> 00:39:07,330
invalidating or purging content whether

00:39:04,120 --> 00:39:09,370
we're using ban or purge it still takes

00:39:07,330 --> 00:39:12,220
a while for that to act that request to

00:39:09,370 --> 00:39:14,140
actually happen so we started doing it

00:39:12,220 --> 00:39:17,830
in the actual thread and then we moved

00:39:14,140 --> 00:39:20,290
it to you know a sort of spawned off a

00:39:17,830 --> 00:39:24,010
new thread and then we moved it to queue

00:39:20,290 --> 00:39:25,720
API and sort of you know did that

00:39:24,010 --> 00:39:27,990
because we had to clear out a bunch of

00:39:25,720 --> 00:39:30,340
varnish servers have you sort of

00:39:27,990 --> 00:39:32,200
addressed any of that or come across to

00:39:30,340 --> 00:39:33,400
any of it because we're sort of we still

00:39:32,200 --> 00:39:36,610
don't know what the best solution is

00:39:33,400 --> 00:39:38,140
well this is actually actually a point

00:39:36,610 --> 00:39:41,590
where I would really like to have our

00:39:38,140 --> 00:39:44,350
sysadmin here to answer you but cache

00:39:41,590 --> 00:39:47,790
control does support multiple one shows

00:39:44,350 --> 00:39:50,430
it if in case of purchase

00:39:47,790 --> 00:39:53,520
sense of Burt request to each one of

00:39:50,430 --> 00:39:55,740
those and it can be configured to do it

00:39:53,520 --> 00:39:58,100
in a non-blocking way where you just

00:39:55,740 --> 00:40:01,110
send out the birch requests and they

00:39:58,100 --> 00:40:06,300
answer back just continue executing and

00:40:01,110 --> 00:40:08,790
it's kind of let's hope it it gets done

00:40:06,300 --> 00:40:14,400
before the user loads to page the next

00:40:08,790 --> 00:40:16,440
time but as us how to do that what what

00:40:14,400 --> 00:40:18,600
are the implication of the 11 should I

00:40:16,440 --> 00:40:23,390
would really have to consult our

00:40:18,600 --> 00:40:23,390
sysadmin for that thank you thanks

00:40:29,270 --> 00:40:32,420
anyone else

00:40:35,599 --> 00:40:38,229
yep

00:40:56,860 --> 00:41:03,200
do you mean they are owned in checks

00:40:59,600 --> 00:41:07,250
back end yeah the question was that if

00:41:03,200 --> 00:41:09,560
if we can catch the results sent out

00:41:07,250 --> 00:41:15,170
about the gate components back and the

00:41:09,560 --> 00:41:19,660
top again that cache control uses and in

00:41:15,170 --> 00:41:22,400
short the answer is no we used to have

00:41:19,660 --> 00:41:26,810
in a previous version of cache control

00:41:22,400 --> 00:41:32,530
we tried this approach where where you

00:41:26,810 --> 00:41:32,530
could actually do that if the page has

00:41:33,010 --> 00:41:42,020
components only components that let's

00:41:38,240 --> 00:41:47,180
see how how it wins that don't need to

00:41:42,020 --> 00:41:51,680
be generated for the user during each

00:41:47,180 --> 00:41:54,920
page week with such as let's say the box

00:41:51,680 --> 00:41:57,740
in the upper right corner of the of your

00:41:54,920 --> 00:42:00,140
site that says welcome username that's

00:41:57,740 --> 00:42:02,060
that's an example of a block that really

00:42:00,140 --> 00:42:05,660
doesn't need to be generated over and

00:42:02,060 --> 00:42:08,450
over again but it's kind of made the

00:42:05,660 --> 00:42:11,420
back and bit more complex than it should

00:42:08,450 --> 00:42:12,710
be and that was one of the reasons one

00:42:11,420 --> 00:42:15,560
of the reasons to the performance

00:42:12,710 --> 00:42:19,070
problems we had and we decided to

00:42:15,560 --> 00:42:24,230
simplify it and now we just don't

00:42:19,070 --> 00:42:29,100
they're the HX week back-end responses

00:42:24,230 --> 00:42:33,540
are not cashable yeah

00:42:29,100 --> 00:42:38,610
you use manage both from HD and mobile

00:42:33,540 --> 00:42:42,410
TV why's that for example this component

00:42:38,610 --> 00:42:42,410
function why they use

00:42:43,800 --> 00:42:53,590
we use MongoDB because we want to have

00:42:48,960 --> 00:42:59,920
non-volatile storage which memcached

00:42:53,590 --> 00:43:02,560
isn't we need to be sure that when we

00:42:59,920 --> 00:43:05,530
when we attack some parts of the pages

00:43:02,560 --> 00:43:09,400
personalized that they will we will find

00:43:05,530 --> 00:43:12,700
point the content we inserted hello at a

00:43:09,400 --> 00:43:24,210
time and with memcache the you don't

00:43:12,700 --> 00:43:24,210
really have that currency sorry

00:43:27,780 --> 00:43:34,540
we don't use moment of a perform cash we

00:43:31,690 --> 00:43:38,520
we used to use in this this hard case we

00:43:34,540 --> 00:43:42,070
used to use it memcache d for its and

00:43:38,520 --> 00:43:46,210
well as it turns out wasn't really a

00:43:42,070 --> 00:43:49,570
good idea because memcache d ran out of

00:43:46,210 --> 00:43:52,570
space and with it's still a kind of

00:43:49,570 --> 00:43:55,990
standing problem with the site that we

00:43:52,570 --> 00:43:57,820
don't really we haven't found the

00:43:55,990 --> 00:44:07,860
optimal caching solution for the forum

00:43:57,820 --> 00:44:07,860
cash with big volumes yeah

00:44:13,100 --> 00:44:21,480
did we should do some tests to measure

00:44:15,990 --> 00:44:25,620
the speed gains yes we have done some

00:44:21,480 --> 00:44:31,650
tests i wish i had you have some figures

00:44:25,620 --> 00:44:35,910
with me too to show but a let's say in a

00:44:31,650 --> 00:44:39,230
happy case where you where you have a

00:44:35,910 --> 00:44:42,930
lot of orthendarh anonymous users and

00:44:39,230 --> 00:44:46,980
the content can be served directly from

00:44:42,930 --> 00:44:48,960
the cash you can get to several hundreds

00:44:46,980 --> 00:44:51,300
or thousands of requests per second

00:44:48,960 --> 00:44:55,140
whereas with with vanilla drupal you can

00:44:51,300 --> 00:44:57,540
get to I don't know tents or maybe

00:44:55,140 --> 00:45:01,050
hundreds in an optimal case so we're

00:44:57,540 --> 00:45:04,050
talking about several several orders of

00:45:01,050 --> 00:45:05,340
magnitude here at the best case in the

00:45:04,050 --> 00:45:07,940
in the worst cases it's not the

00:45:05,340 --> 00:45:07,940
significance

00:45:33,009 --> 00:45:39,190
yeah the question was about configuring

00:45:35,420 --> 00:45:41,749
cache control and disabling it / need

00:45:39,190 --> 00:45:44,420
there's a global switching cache control

00:45:41,749 --> 00:45:46,849
that allows you to just just disable the

00:45:44,420 --> 00:45:49,969
whole whole thing from your site if if

00:45:46,849 --> 00:45:53,299
you do if you're doing development or if

00:45:49,969 --> 00:45:55,009
it's somehow malfunctioning or for

00:45:53,299 --> 00:45:59,059
whatever reason and you can also

00:45:55,009 --> 00:46:00,890
configure / path per million route

00:45:59,059 --> 00:46:05,180
through path which which ones are

00:46:00,890 --> 00:46:09,459
cacheable and which with which TTL and

00:46:05,180 --> 00:46:12,229
for notes you can also enable or disable

00:46:09,459 --> 00:46:17,420
disable caching by node type for example

00:46:12,229 --> 00:46:20,509
you usually want to disable caching from

00:46:17,420 --> 00:46:35,119
web form nodes and maybe give its enable

00:46:20,509 --> 00:46:42,019
for other ones did we have to play with

00:46:35,119 --> 00:46:45,920
the busy of file a lot we had to cache

00:46:42,019 --> 00:46:50,119
cache control requires it its own vzl

00:46:45,920 --> 00:46:54,019
file to work perfectly because we use

00:46:50,119 --> 00:46:56,839
some some special cookies to denote

00:46:54,019 --> 00:46:58,849
whether the user is authenticated or if

00:46:56,839 --> 00:47:01,699
the cache control has been disabled for

00:46:58,849 --> 00:47:04,190
a user and we do not we do not grant any

00:47:01,699 --> 00:47:06,769
any permissions to users based on these

00:47:04,190 --> 00:47:09,769
cookies we just use them as flags to let

00:47:06,769 --> 00:47:13,359
cache-control know what to do so we yeah

00:47:09,769 --> 00:47:19,309
we do need some custom vzl and we had

00:47:13,359 --> 00:47:22,309
have had to make some iterations to its

00:47:19,309 --> 00:47:24,459
parts I think it's pretty much stable

00:47:22,309 --> 00:47:24,459
now

00:47:32,380 --> 00:47:35,039
ok

00:47:37,200 --> 00:47:43,110
I'm not seeing so many people reaching

00:47:39,390 --> 00:47:45,990
for the mic so I guess we're done here

00:47:43,110 --> 00:47:51,020
if if anyone anybody doesn't have

00:47:45,990 --> 00:47:51,020

YouTube URL: https://www.youtube.com/watch?v=I6-ASksJtQQ


